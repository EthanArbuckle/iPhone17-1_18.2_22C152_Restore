void CMPhotoDecompressionContainerClass_Init(uint64_t a1)
{
  bzero((void *)(a1 + 16), 0x240uLL);
}

void ___invalidate_block_invoke(uint64_t a1)
{
}

uint64_t _once_setTypes()
{
  qword_1EB3D2590 = CFDataGetTypeID();
  qword_1EB3D2598 = CMBlockBufferGetTypeID();
  qword_1EB3D25A0 = CFURLGetTypeID();
  qword_1EB3D25A8 = IOSurfaceGetTypeID();
  uint64_t result = CMByteStreamBaseGetTypeID();
  qword_1EB3D25B0 = result;
  return result;
}

void _callbackDataProviderReleaseSurface(__IOSurface *a1)
{
  IOSurfaceUnlock(a1, 1u, 0);
  IOSurfaceDecrementUseCount(a1);
  if (a1)
  {
    CFRelease(a1);
  }
}

uint64_t _copyAuxiliaryImageTypeInfoForIndex(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  unint64_t v13 = a2;
  uint64_t v7 = a1 + 40;
  unsigned __int8 v12 = 0;
  uint64_t result = _checkImageIndex(a1 + 40, &v13, &v12);
  if (!result)
  {
    uint64_t v11 = 0;
    uint64_t result = _getAuxiliaryImageStorageForIndex(v7, v12, a3, &v11);
    if (!result)
    {
      v9 = *(const void **)(v11 + 32);
      if (v9)
      {
        if (a5)
        {
          CFTypeRef v10 = CFRetain(v9);
          uint64_t result = 0;
          *a5 = v10;
        }
        else
        {
          return 0;
        }
      }
      else
      {
        return 4294950303;
      }
    }
  }
  return result;
}

uint64_t _copyAuxiliaryImageTypeInfoForIndex_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __CFString **a5, void *a6)
{
  if (a2 || a3 < 0 || (*(_DWORD *)(a1 + 144) != 0) <= a3)
  {
    return FigSignalErrorAt();
  }
  else
  {
    if (a5)
    {
      v8 = @"urn:mpeg:hevc:2015:auxid:1";
      if (@"urn:mpeg:hevc:2015:auxid:1") {
        v8 = (__CFString *)CFRetain(@"urn:mpeg:hevc:2015:auxid:1");
      }
      *a5 = v8;
    }
    if (a6) {
      *a6 = 0;
    }
    return 0;
  }
}

uint64_t _getAuxiliaryImageStorageForIndex(uint64_t a1, int a2, unint64_t a3, void *a4)
{
  if (!a4) {
    return 4294950306;
  }
  if (a3 == -128)
  {
    if (!a2 || !*(unsigned char *)(a1 + 113)) {
      return 4294950304;
    }
    uint64_t v4 = 0;
    uint64_t v5 = a1 + 120;
    goto LABEL_16;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (a2)
    {
      uint64_t v6 = *(void *)(a1 + 216);
      if (v6 == -1)
      {
        BOOL v9 = 0;
        BOOL v7 = 0;
        BOOL v8 = 0;
      }
      else
      {
        BOOL v9 = __OFSUB__(v6, a3);
        BOOL v7 = v6 == a3;
        BOOL v8 = (uint64_t)(v6 - a3) < 0;
      }
      if (v8 ^ v9 | v7) {
        ++a3;
      }
    }
    if (a3 >= *(void *)(a1 + 224)) {
      return 4294950303;
    }
    uint64_t v10 = *(void *)(a1 + 232);
    if (v10)
    {
      uint64_t v4 = 0;
      uint64_t v5 = v10 + 96 * a3;
LABEL_16:
      *a4 = v5;
      return v4;
    }
  }
  return FigSignalErrorAt();
}

void CMPhotoDecompressionTileIteratorClass_Finalize(uint64_t a1)
{
  v2 = *(void **)(a1 + 16);
  uint64_t v3 = v2[4];
  if (v3) {
    uint64_t v4 = v2[4];
  }
  else {
    uint64_t v4 = 0;
  }
  if (!*(void *)(v4 + 248) || ((*(void (**)(void))(v3 + 248))(), (v2 = *(void **)(a1 + 16)) != 0))
  {
    CFRelease(v2);
    *(void *)(a1 + 16) = 0;
  }
}

uint64_t _finalizeTileIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(const void **)(a2 + 56);
  if (v3)
  {
    CFRelease(v3);
    uint64_t v4 = *(void **)(a2 + 56);
    if (v4)
    {
      *(void *)(a2 + 56) = 0;
      free(v4);
    }
  }
  *(void *)(a2 + 48) = 0;
  return 0;
}

uint64_t _finalizeTileIterator_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(CFTypeRef **)(a2 + 56);
  if (v3)
  {
    if (!*v3 || (CFRelease(*v3), *uint64_t v3 = 0, (uint64_t v3 = *(CFTypeRef **)(a2 + 56)) != 0))
    {
      *(void *)(a2 + 56) = 0;
      free(v3);
    }
  }
  *(void *)(a2 + 48) = 0;
  return 0;
}

uint64_t _finalizeTileIterator_1(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(CFTypeRef **)(a2 + 56);
  if (v3)
  {
    if (!*v3 || (CFRelease(*v3), *uint64_t v3 = 0, (uint64_t v3 = *(CFTypeRef **)(a2 + 56)) != 0))
    {
      *(void *)(a2 + 56) = 0;
      free(v3);
    }
  }
  *(void *)(a2 + 48) = 0;
  return 0;
}

void _ioSurfaceDeallocator_deallocateDirect(int a1, IOSurfaceRef buffer)
{
  IOSurfaceUnlock(buffer, 1u, 0);
  if (buffer)
  {
    CFRelease(buffer);
  }
}

BOOL ___parseAuxImage_block_invoke(uint64_t a1, int a2, CGImageMetadataTagRef tag)
{
  CFStringRef v4 = CGImageMetadataTagCopyNamespace(tag);
  int v5 = FigCFEqual();
  if (v5) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
  if (v4) {
    CFRelease(v4);
  }
  return v5 == 0;
}

void CMPhotoDecompressionContainerClass_Finalize(void *a1)
{
  uint64_t v2 = a1[4];
  if (v2)
  {
    uint64_t v3 = *(void (**)(void *))(v2 + 16);
    if (v3 && (v3(a1), (uint64_t v2 = a1[4]) == 0))
    {
      uint64_t v5 = 0;
      char v4 = 1;
    }
    else
    {
      char v4 = 0;
      uint64_t v5 = v2;
    }
    if (*(void *)(v5 + 8))
    {
      if (v4) {
        uint64_t v2 = 0;
      }
      (*(void (**)(void *))(v2 + 8))(a1);
    }
  }
  uint64_t v6 = (const void *)a1[68];
  if (v6)
  {
    CFRelease(v6);
    a1[68] = 0;
  }
  BOOL v7 = (void *)a1[69];
  if (v7)
  {
    a1[69] = 0;
    free(v7);
  }
  BOOL v8 = (void *)a1[70];
  if (v8)
  {
    a1[70] = 0;
    free(v8);
  }
  BOOL v9 = (const void *)a1[2];
  if (v9)
  {
    CFRelease(v9);
    a1[2] = 0;
  }
}

uint64_t _closeContainer(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 56);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 56) = 0;
  }
  uint64_t v3 = *(const void **)(a1 + 64);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 64) = 0;
  }
  *(_DWORD *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 280) = 0;
  *(unsigned char *)(a1 + 104) = 0;
  char v4 = *(const void **)(a1 + 144);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 144) = 0;
  }
  *(unsigned char *)(a1 + 368) = 0;
  uint64_t v5 = *(const void **)(a1 + 416);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 416) = 0;
  }
  *(unsigned char *)(a1 + 392) = 0;
  uint64_t v6 = *(const void **)(a1 + 448);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 448) = 0;
  }
  *(unsigned char *)(a1 + 424) = 0;
  BOOL v7 = *(const void **)(a1 + 464);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(a1 + 464) = 0;
  }
  *(unsigned char *)(a1 + 456) = 0;
  BOOL v8 = *(const void **)(a1 + 480);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 480) = 0;
  }
  *(unsigned char *)(a1 + 472) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  if (*(void *)(a1 + 264))
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    do
    {
      _releaseAuxImageStorage((void *)(*(void *)(a1 + 272) + v9));
      ++v10;
      v9 += 96;
    }
    while (v10 < *(void *)(a1 + 264));
  }
  uint64_t v11 = *(void **)(a1 + 272);
  if (v11)
  {
    *(void *)(a1 + 272) = 0;
    free(v11);
  }
  *(unsigned char *)(a1 + 153) = 0;
  _releaseAuxImageStorage((void *)(a1 + 160));
  return 0;
}

uint64_t _closeContainer_0(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 288);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 288) = 0;
  }
  uint64_t v3 = *(const void **)(a1 + 296);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 296) = 0;
  }
  char v4 = *(const void **)(a1 + 304);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 304) = 0;
  }
  uint64_t v5 = *(const void **)(a1 + 312);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 312) = 0;
  }
  uint64_t v6 = *(const void **)(a1 + 320);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 320) = 0;
  }
  BOOL v7 = *(const void **)(a1 + 328);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(a1 + 328) = 0;
  }
  BOOL v8 = *(const void **)(a1 + 72);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 72) = 0;
  }
  uint64_t v9 = *(const void **)(a1 + 56);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a1 + 56) = 0;
  }
  unint64_t v10 = *(const void **)(a1 + 64);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(a1 + 64) = 0;
  }
  *(_DWORD *)(a1 + 48) = 0;
  return 0;
}

uint64_t _closeContainer_1(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 48);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 48) = 0;
  }
  uint64_t v3 = *(const void **)(a1 + 56);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 56) = 0;
  }
  char v4 = *(const void **)(a1 + 128);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 128) = 0;
  }
  *(unsigned char *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  return 0;
}

uint64_t _closeContainer_2(uint64_t a1)
{
  _releaseSequenceReader(*(void **)(a1 + 80));
  *(void *)(a1 + 80) = 0;
  CFArrayRef v2 = *(const __CFArray **)(a1 + 88);
  if (v2)
  {
    CFIndex v3 = 0;
    do
    {
      if (CFArrayGetCount(v2) <= v3) {
        break;
      }
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 88), v3);
      _releaseSequenceReader(ValueAtIndex);
      ++v3;
      CFArrayRef v2 = *(const __CFArray **)(a1 + 88);
    }
    while (v2);
  }
  CFArrayRef v5 = *(const __CFArray **)(a1 + 96);
  if (v5)
  {
    CFIndex v6 = 0;
    do
    {
      if (CFArrayGetCount(v5) <= v6) {
        break;
      }
      BOOL v7 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 96), v6);
      _releaseSequenceReader(v7);
      ++v6;
      CFArrayRef v5 = *(const __CFArray **)(a1 + 96);
    }
    while (v5);
  }
  BOOL v8 = *(const void **)(a1 + 88);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 88) = 0;
  }
  uint64_t v9 = *(const void **)(a1 + 96);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a1 + 96) = 0;
  }
  unint64_t v10 = *(const void **)(a1 + 64);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(a1 + 64) = 0;
  }
  uint64_t v11 = *(const void **)(a1 + 72);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(a1 + 72) = 0;
  }
  unsigned __int8 v12 = *(NSObject **)(a1 + 104);
  if (v12) {
    dispatch_release(v12);
  }
  *(void *)(a1 + 104) = 0;
  return 0;
}

uint64_t _closeContainer_3(uint64_t a1)
{
  return _closeContainerAndCopyBacking(a1, 0, 0, 0);
}

uint64_t _closeContainer_4(uint64_t a1)
{
  return _closeContainerAndCopyBacking_0(a1, 0, 0, 0);
}

uint64_t _invalidate(void *a1)
{
  CFArrayRef v2 = (const void *)a1[58];
  if (v2)
  {
    CFRelease(v2);
    a1[58] = 0;
  }
  _dropPreparedDecoders((uint64_t)a1);
  CFIndex v3 = (const void *)a1[11];
  if (v3)
  {
    CFRelease(v3);
    a1[11] = 0;
  }
  FigSimpleMutexDestroy();
  a1[9] = 0;
  char v4 = (const void *)a1[5];
  if (v4)
  {
    CFRelease(v4);
    a1[5] = 0;
  }
  CMPhotoUnifiedJPEGDecoderDestroy(a1[12]);
  a1[12] = 0;
  return 0;
}

uint64_t _invalidate_0(uint64_t a1)
{
  CFArrayRef v2 = *(const void **)(a1 + 40);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 40) = 0;
  }
  return 0;
}

uint64_t _invalidate_1(uint64_t a1)
{
  CFArrayRef v2 = (CFTypeRef *)(a1 + 40);
  CFIndex v3 = *(NSObject **)(a1 + 64);
  if (v3)
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = *(void *)"";
    block[2] = ___invalidate_block_invoke;
    block[3] = &__block_descriptor_tmp_9;
    block[4] = v2;
    dispatch_sync(v3, block);
    char v4 = *(const void **)(a1 + 64);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(a1 + 64) = 0;
    }
  }
  if (*v2)
  {
    CFRelease(*v2);
    CFTypeRef *v2 = 0;
  }
  _closeContainer_1(a1);
  return 0;
}

uint64_t _invalidate_2(uint64_t a1)
{
  CFArrayRef v2 = *(const void **)(a1 + 40);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 40) = 0;
  }
  _closeContainer_2(a1);
  return 0;
}

uint64_t _invalidate_3(uint64_t a1)
{
  _releaseAllContainerResources(a1);
  uint64_t v2 = *(unsigned int *)(a1 + 396);
  if (v2)
  {
    JPEGDeviceInterface_closeDriverConnection(v2);
    *(_DWORD *)(a1 + 396) = 0;
  }
  return 0;
}

uint64_t _invalidate_4(uint64_t a1)
{
  _finishAsyncEncoding((void *)a1);
  uint64_t v2 = *(const void **)(a1 + 96);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 96) = 0;
  }
  CFIndex v3 = *(const void **)(a1 + 120);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 120) = 0;
  }
  char v4 = *(const void **)(a1 + 168);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 168) = 0;
  }
  CFArrayRef v5 = *(const void **)(a1 + 152);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 152) = 0;
  }
  CFIndex v6 = *(const void **)(a1 + 160);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 160) = 0;
  }
  FigSemaphoreDestroy();
  *(void *)(a1 + 200) = 0;
  BOOL v7 = *(NSObject **)(a1 + 192);
  if (v7)
  {
    dispatch_release(v7);
    *(void *)(a1 + 192) = 0;
  }
  BOOL v8 = *(const void **)(a1 + 128);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 128) = 0;
  }
  _destroySequenceGroupReaders(*(const __CFArray **)(a1 + 144));
  *(void *)(a1 + 144) = 0;
  CMPhotoHEIFFileWriterDispose(*(const void ***)(a1 + 88));
  *(void *)(a1 + 88) = 0;
  return 0;
}

void CMPhotoUnifiedJPEGDecoderDestroy(uint64_t a1)
{
  if (a1)
  {
    CFAllocatorRef v2 = *(const __CFAllocator **)(a1 + 8);
    CFIndex v3 = *(void **)(a1 + 224);
    if (v3)
    {
      if (!*(unsigned char *)(a1 + 240) || (IOSurfaceDecrementUseCount((IOSurfaceRef)v3), (CFIndex v3 = *(void **)(a1 + 224)) != 0)) {
        CFRelease(v3);
      }
    }
    applejpeg_decode_destroy();
    InputWrapper_destroy(*(const void ***)(a1 + 80));
    char v4 = *(const void **)(a1 + 88);
    if (v4) {
      CFRelease(v4);
    }
    CFArrayRef v5 = *(const void **)(a1 + 16);
    if (v5) {
      CFRelease(v5);
    }
    CFIndex v6 = *(const void **)(a1 + 40);
    if (v6) {
      CFRelease(v6);
    }
    if (*(void *)a1) {
      CFRelease(*(CFTypeRef *)a1);
    }
    CFAllocatorDeallocate(v2, (void *)a1);
    if (v2)
    {
      CFRelease(v2);
    }
  }
}

void InputWrapper_destroy(const void **a1)
{
  if (a1)
  {
    CFAllocatorRef v2 = *a1;
    if (v2) {
      CFRelease(v2);
    }
    CFIndex v3 = a1[1];
    if (v3) {
      CFRelease(v3);
    }
    free(a1);
  }
}

void _releaseAuxImageStorage(void *a1)
{
  if (a1)
  {
    CFAllocatorRef v2 = (const void *)a1[3];
    if (v2)
    {
      CFRelease(v2);
      a1[3] = 0;
    }
    CFIndex v3 = (const void *)a1[5];
    if (v3)
    {
      CFRelease(v3);
      a1[5] = 0;
    }
    char v4 = (const void *)a1[4];
    if (v4)
    {
      CFRelease(v4);
      a1[4] = 0;
    }
    CFArrayRef v5 = (const void *)a1[9];
    if (v5)
    {
      CFRelease(v5);
      a1[9] = 0;
    }
    CFIndex v6 = (const void *)a1[10];
    if (v6)
    {
      CFRelease(v6);
      a1[10] = 0;
    }
    BOOL v7 = (const void *)a1[11];
    if (v7)
    {
      CFRelease(v7);
      a1[11] = 0;
    }
  }
}

uint64_t _dropPreparedDecoders(uint64_t a1)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 72));
  CFArrayRef v2 = *(const __CFArray **)(a1 + 88);
  if (v2)
  {
    v6.length = CFArrayGetCount(*(CFArrayRef *)(a1 + 88));
    v6.location = 0;
    CFArrayApplyFunction(v2, v6, (CFArrayApplierFunction)_disposePreparedDecoder, 0);
  }
  *(unsigned char *)(a1 + 80) = 0;
  CFIndex v3 = *(pthread_mutex_t **)(a1 + 72);
  return pthread_mutex_unlock(v3);
}

void CMPhotoDecompressionSessionClass_Finalize(uint64_t a1)
{
  CFArrayRef v2 = *(NSObject **)(a1 + 40);
  if (v2)
  {
    dispatch_sync(v2, &__block_literal_global_21);
    CFIndex v3 = *(NSObject **)(a1 + 40);
    if (v3)
    {
      dispatch_release(v3);
      *(void *)(a1 + 40) = 0;
    }
  }
  _releaseAsyncQueueElements((void *)(a1 + 144));
  _releaseAsyncQueueElements((void *)(a1 + 192));
  _releaseAsyncQueueElements((void *)(a1 + 96));
  _releaseAsyncQueueElements((void *)(a1 + 48));
  char v4 = *(const void **)(a1 + 32);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 32) = 0;
  }
  CFArrayRef v5 = *(const void **)(a1 + 288);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 288) = 0;
  }
  CFRange v6 = *(const void **)(a1 + 296);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 296) = 0;
  }
  BOOL v7 = *(const void **)(a1 + 280);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(a1 + 280) = 0;
  }
  BOOL v8 = *(const void **)(a1 + 272);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 272) = 0;
  }
  if (*(unsigned char *)(a1 + 240))
  {
    CFArrayRef v9 = *(const __CFArray **)(a1 + 264);
    if (v9)
    {
      CFIndex Count = CFArrayGetCount(v9);
      if (Count >= 1)
      {
        unint64_t v11 = Count + 1;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 264), v11 - 2);
          JPEGDeviceInterface_closeDriverConnection((uint64_t)ValueAtIndex);
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 264), v11 - 2);
          --v11;
        }
        while (v11 > 1);
      }
    }
    unint64_t v13 = *(const void **)(a1 + 256);
    if (v13)
    {
      CFRelease(v13);
      *(void *)(a1 + 256) = 0;
    }
    v14 = *(const void **)(a1 + 264);
    if (v14)
    {
      CFRelease(v14);
      *(void *)(a1 + 264) = 0;
    }
  }
  v15 = *(const void **)(a1 + 304);
  if (v15)
  {
    _Block_release(v15);
    *(void *)(a1 + 304) = 0;
  }
}

void _releaseAsyncQueueElements(void *a1)
{
  CFArrayRef v2 = a1[2];
  if (v2)
  {
    dispatch_barrier_sync(v2, &__block_literal_global_18_1);
    CFIndex v3 = a1[2];
    if (v3)
    {
      dispatch_release(v3);
      a1[2] = 0;
    }
  }
  char v4 = a1[1];
  if (v4)
  {
    dispatch_release(v4);
    a1[1] = 0;
  }
  CFArrayRef v5 = (const void *)a1[4];
  if (v5)
  {
    CFRelease(v5);
    a1[4] = 0;
  }
  CFRange v6 = a1[3];
  if (v6)
  {
    dispatch_release(v6);
    a1[3] = 0;
  }
}

uint64_t JPEGDeviceInterface_closeDriverConnection(uint64_t connect)
{
  if (connect) {
    return IOServiceClose(connect);
  }
  return connect;
}

uint64_t HEIFItemDecoderWaitForFinishAndReturnStatus(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  if (*(unsigned char *)(a1 + 157))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 14576));
    *(unsigned char *)(a1 + 216) = 1;
    CFIndex Count = CFSetGetCount(*(CFSetRef *)(a1 + 14600));
    uint64_t v9 = *(void *)(a1 + 14608);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 14576));
    if (*(int *)(a1 + 212) >= 1)
    {
      int v10 = 0;
      do
      {
        unint64_t v11 = *(NSObject **)(a1 + 224);
        dispatch_time_t v12 = dispatch_time(0, 10000000000);
        if (dispatch_semaphore_wait(v11, v12))
        {
          if (FigDebugIsInternalBuild()) {
            _logHang(**(void **)(a1 + 8), 0, v9, Count, *(_DWORD *)(a1 + 14580), a2, a3, a4);
          }
          dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 224), 0xFFFFFFFFFFFFFFFFLL);
        }
        ++v10;
        int v13 = *(_DWORD *)(a1 + 212);
      }
      while (v10 < v13);
      if (v13 >= 1)
      {
        int v14 = 0;
        do
        {
          dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 224));
          ++v14;
        }
        while (v14 < *(_DWORD *)(a1 + 212));
      }
    }
    if (Count)
    {
      v15 = *(NSObject **)(a1 + 232);
      dispatch_time_t v16 = dispatch_time(0, 10000000000);
      if (dispatch_semaphore_wait(v15, v16))
      {
        if (FigDebugIsInternalBuild()) {
          _logHang(**(void **)(a1 + 8), 1, v9, Count, *(_DWORD *)(a1 + 14580), a2, a3, a4);
        }
        dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 232), 0xFFFFFFFFFFFFFFFFLL);
      }
    }
  }
  return *(unsigned int *)(a1 + 14580);
}

uint64_t CMPhotoSetPixelBufferCLAPFromRect(__CVBuffer *a1, int a2, int a3, double a4, double a5, CGFloat a6, CGFloat a7)
{
  CFTypeRef value = 0;
  if (!a1) {
    goto LABEL_14;
  }
  double PixelBufferCLAPAsRect = CMPhotoGetPixelBufferCLAPAsRect(a1);
  CGFloat v18 = v17;
  CGFloat v19 = v14;
  CGFloat v20 = v15;
  double v21 = -0.0;
  if (a2) {
    double v22 = PixelBufferCLAPAsRect;
  }
  else {
    double v22 = -0.0;
  }
  double v23 = a4 + v22;
  if (a2) {
    double v21 = v18;
  }
  double v24 = a5 + v21;
  double v25 = PixelBufferCLAPAsRect;
  CGFloat v26 = v18;
  v36.origin.x = v23;
  v36.origin.y = v24;
  v36.size.width = a6;
  v36.size.height = a7;
  if (CGRectContainsRect(*(CGRect *)(&v14 - 2), v36))
  {
    v35.origin.x = PixelBufferCLAPAsRect;
    v35.origin.y = v18;
    v35.size.width = v19;
    v35.size.height = v20;
    v37.origin.x = v23;
    v37.origin.y = v24;
    v37.size.width = a6;
    v37.size.height = a7;
    if (CGRectEqualToRect(v35, v37)) {
      return 0;
    }
    CFAllocatorRef v27 = CFGetAllocator(a1);
    double Width = (double)CVPixelBufferGetWidth(a1);
    size_t Height = CVPixelBufferGetHeight(a1);
    uint64_t PixelBufferCLAPDictionaryFromRect = CMPhotoCreatePixelBufferCLAPDictionaryFromRect(v27, (__CFDictionary **)&value, Width, (double)Height, v23, v24, a6, a7);
    CFTypeRef v31 = value;
    if (!PixelBufferCLAPDictionaryFromRect)
    {
      CVBufferSetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24A78], value, (CVAttachmentMode)(a3 != 0));
      CFTypeRef v31 = value;
    }
    if (v31) {
      CFRelease(v31);
    }
    return PixelBufferCLAPDictionaryFromRect;
  }
  else
  {
LABEL_14:
    return FigSignalErrorAt();
  }
}

double CMPhotoGetPixelBufferCLAPAsRect(__CVBuffer *a1)
{
  double PixelBufferSize = CMPhotoGetPixelBufferSize(a1);
  double v4 = v3;
  CFDictionaryRef v5 = (const __CFDictionary *)CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24A78], 0);
  double CropRectFromCLAPDict = CMPhotoGetCropRectFromCLAPDict(v5, PixelBufferSize, v4);
  if (v5) {
    CFRelease(v5);
  }
  return CropRectFromCLAPDict;
}

double CMPhotoGetPixelBufferSize(__CVBuffer *a1)
{
  if (!a1) {
    return 0.0;
  }
  double Width = (double)CVPixelBufferGetWidth(a1);
  CVPixelBufferGetHeight(a1);
  return Width;
}

double CMPhotoGetCropRectFromCLAPDict(const __CFDictionary *a1, double a2, double a3)
{
  double v4 = a2;
  double v30 = 0.0;
  uint64_t v31 = 0;
  double v28 = a2;
  double v29 = a3;
  if (!a1) {
    goto LABEL_28;
  }
  CFRange v6 = (const void *)*MEMORY[0x1E4F1EED8];
  if (!CFDictionaryContainsKey(a1, (const void *)*MEMORY[0x1E4F1EED8])
    || (BOOL v7 = (const void *)*MEMORY[0x1E4F1EEA8], !CFDictionaryContainsKey(a1, (const void *)*MEMORY[0x1E4F1EEA8]))
    || (BOOL v8 = (const void *)*MEMORY[0x1E4F1EEB8], !CFDictionaryContainsKey(a1, (const void *)*MEMORY[0x1E4F1EEB8]))
    || (uint64_t v9 = (const void *)*MEMORY[0x1E4F1EEC8], !CFDictionaryContainsKey(a1, (const void *)*MEMORY[0x1E4F1EEC8])))
  {
    CMPhotoCFDictionaryGetDoubleIfPresent(a1, (const void *)*MEMORY[0x1E4F24A88], &v28);
    CMPhotoCFDictionaryGetDoubleIfPresent(a1, (const void *)*MEMORY[0x1E4F24A68], &v29);
    CMPhotoCFDictionaryGetDoubleIfPresent(a1, (const void *)*MEMORY[0x1E4F24A70], &v30);
    CMPhotoCFDictionaryGetDoubleIfPresent(a1, (const void *)*MEMORY[0x1E4F24A80], &v31);
    double v26 = v30;
    double v4 = v28;
    return round(v26 + (a2 - v4) * 0.5);
  }
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a1, v6);
  int v32 = 1;
  int v33 = 0;
  if (!Value) {
    goto LABEL_28;
  }
  CFArrayRef v11 = Value;
  CFTypeID v12 = CFGetTypeID(Value);
  if (v12 != CFArrayGetTypeID()) {
    goto LABEL_28;
  }
  if (CFArrayGetCount(v11) != 2) {
    goto LABEL_28;
  }
  if (!FigCFArrayGetInt32AtIndex()) {
    goto LABEL_28;
  }
  if (!FigCFArrayGetInt32AtIndex()) {
    goto LABEL_28;
  }
  int v13 = v32;
  int v14 = v33;
  CFArrayRef v15 = (const __CFArray *)CFDictionaryGetValue(a1, v7);
  int v32 = 1;
  int v33 = 0;
  if (!v15) {
    goto LABEL_28;
  }
  CFArrayRef v16 = v15;
  CFTypeID v17 = CFGetTypeID(v15);
  if (v17 != CFArrayGetTypeID()) {
    goto LABEL_28;
  }
  if (CFArrayGetCount(v16) != 2) {
    goto LABEL_28;
  }
  if (!FigCFArrayGetInt32AtIndex()) {
    goto LABEL_28;
  }
  if (!FigCFArrayGetInt32AtIndex()) {
    goto LABEL_28;
  }
  CFArrayRef v18 = (const __CFArray *)CFDictionaryGetValue(a1, v8);
  int v32 = 1;
  int v33 = 0;
  if (!v18) {
    goto LABEL_28;
  }
  CFArrayRef v19 = v18;
  CFTypeID v20 = CFGetTypeID(v18);
  if (v20 != CFArrayGetTypeID()
    || CFArrayGetCount(v19) != 2
    || !FigCFArrayGetInt32AtIndex()
    || !FigCFArrayGetInt32AtIndex()
    || (int v21 = v32, v22 = v33, v23 = (const __CFArray *)CFDictionaryGetValue(a1, v9), v32 = 1, v33 = 0, !v23)
    || (CFArrayRef v24 = v23, v25 = CFGetTypeID(v23), v25 != CFArrayGetTypeID())
    || CFArrayGetCount(v24) != 2
    || !FigCFArrayGetInt32AtIndex()
    || !FigCFArrayGetInt32AtIndex())
  {
LABEL_28:
    double v26 = 0.0;
    return round(v26 + (a2 - v4) * 0.5);
  }
  double v4 = (double)v14 / (double)v13;
  double v26 = (double)v22 / (double)v21;
  return round(v26 + (a2 - v4) * 0.5);
}

uint64_t CMPhotoCFDictionaryGetDoubleIfPresent(CFDictionaryRef theDict, const void *a2, void *a3)
{
  uint64_t result = 0;
  CFTypeRef value = 0;
  if (theDict)
  {
    if (a2)
    {
      if (a3)
      {
        uint64_t result = CFDictionaryGetValueIfPresent(theDict, a2, (const void **)&value);
        if (result)
        {
          CFTypeID TypeID = CFNumberGetTypeID();
          if (TypeID == CFGetTypeID(value))
          {
            CFNumberGetValue((CFNumberRef)value, kCFNumberDoubleType, a3);
            return 1;
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t _createImageSurfacePropertiesAndName(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7, int a8, unsigned __int8 a9, __CFDictionary **a10, CFTypeRef *a11)
{
  if (!(a2 >> 31) && !(a3 >> 31))
  {
    CFTypeID v12 = a10;
    int v13 = a11;
    if (a10) {
      BOOL v14 = a11 == 0;
    }
    else {
      BOOL v14 = 1;
    }
    if (v14) {
      return 4294950306;
    }
    if (a4 | a5) {
      uint64_t v15 = a5;
    }
    else {
      uint64_t v15 = 2;
    }
    if (a4 | a5) {
      unint64_t v16 = a4;
    }
    else {
      unint64_t v16 = 2;
    }
    uint64_t v17 = 4294950306;
    if (!v16 || !v15) {
      return v17;
    }
    int v19 = a1;
    if (a6) {
      unint64_t v20 = a6;
    }
    else {
      unint64_t v20 = 16;
    }
    uint64_t v17 = 4294950301;
    if ((int)a1 <= 1734501175)
    {
      if ((int)a1 <= 1278555700)
      {
        if ((int)a1 > 875704949)
        {
          if ((int)a1 <= 1111970368)
          {
            if (a1 == 875704950 || a1 == 875836518) {
              goto LABEL_166;
            }
            int v23 = 875836534;
            goto LABEL_165;
          }
          if ((a1 - 1278226488) <= 0x30 && ((1 << (a1 - 56)) & 0x1400000000001) != 0
            || (a1 - 1278226736) <= 6 && ((1 << (a1 - 48)) & 0x45) != 0)
          {
            goto LABEL_232;
          }
          int v22 = 1111970369;
        }
        else
        {
          if ((int)a1 <= 843264055)
          {
            if (a1 > 0x20 || ((1 << a1) & 0x101010000) == 0)
            {
              if (a1 != 825306677)
              {
                int v21 = 825437747;
                goto LABEL_231;
              }
LABEL_232:
              v150 = a10;
              unint64_t v89 = CMPhotoPaddedSizeFromImageSizeAndBlockSize(a2, a3, v16);
              unint64_t v91 = v90;
              uint64_t BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(v19);
              unint64_t SurfaceElementWidthForPixelFormat = CMPhotoGetSurfaceElementWidthForPixelFormat(v19);
              unint64_t v94 = CMPhotoGetSurfaceElementWidthForPixelFormat(v19);
              CFAllocatorRef allocatorb = (CFAllocatorRef)v89;
              uint64_t v95 = CMPhotoAlignValue(v89 * BytesPerPixelForPixelFormat, v20);
              uint64_t v96 = v95;
              unint64_t v97 = v95 * v91;
              if (a7) {
                unint64_t v97 = CMPhotoAlignValue(v95 * v91, a7);
              }
              if (v97 >> 31
                || (unint64_t v98 = v96 * SurfaceElementWidthForPixelFormat, (v96 * SurfaceElementWidthForPixelFormat) >> 31))
              {
                uint64_t v17 = FigSignalErrorAt();
                CGRect v35 = 0;
                CGRect v36 = @"CMPhoto Luma";
              }
              else
              {
                CFAllocatorRef v99 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
                Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                CGRect v35 = Mutable;
                if (Mutable)
                {
                  unint64_t v101 = SurfaceElementWidthForPixelFormat * BytesPerPixelForPixelFormat * v94;
                  CMPhotoCFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E4F2EFE8], 0);
                  CMPhotoCFDictionarySetSize(v35, *MEMORY[0x1E4F2F2C0], a2);
                  CMPhotoCFDictionarySetSize(v35, *MEMORY[0x1E4F2F0E8], a3);
                  CMPhotoCFDictionarySetSize(v35, *MEMORY[0x1E4F2EFD8], v101);
                  CMPhotoCFDictionarySetSize(v35, *MEMORY[0x1E4F2EFE0], v98);
                  CMPhotoCFDictionarySetInt32(v35, (const void *)*MEMORY[0x1E4F2F150], v19);
                  if ((unint64_t)allocatorb > a2) {
                    CMPhotoCFDictionarySetSize(v35, *MEMORY[0x1E4F2F200], (char *)allocatorb - a2);
                  }
                  if (v91 > a3) {
                    CMPhotoCFDictionarySetSize(v35, *MEMORY[0x1E4F2F1F8], v91 - a3);
                  }
                  if (SurfaceElementWidthForPixelFormat >= 2) {
                    CMPhotoCFDictionarySetSize(v35, *MEMORY[0x1E4F2F0A0], SurfaceElementWidthForPixelFormat);
                  }
                  if (v94 >= 2) {
                    CMPhotoCFDictionarySetSize(v35, *MEMORY[0x1E4F2F098], v94);
                  }
                  CFMutableArrayRef v102 = CFArrayCreateMutable(v99, 1, MEMORY[0x1E4F1D510]);
                  if (v102)
                  {
                    v103 = v102;
                    CFMutableDictionaryRef v104 = CFDictionaryCreateMutable(v99, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                    if (v104)
                    {
                      CFMutableDictionaryRef v105 = v104;
                      CMPhotoCFDictionarySetSize(v104, *MEMORY[0x1E4F2F258], a2);
                      CMPhotoCFDictionarySetSize(v105, *MEMORY[0x1E4F2F220], a3);
                      CMPhotoCFDictionarySetSize(v105, *MEMORY[0x1E4F2F170], v101);
                      CMPhotoCFDictionarySetSize(v105, *MEMORY[0x1E4F2F240], 0);
                      CMPhotoCFDictionarySetSize(v105, *MEMORY[0x1E4F2F178], v98);
                      if ((unint64_t)allocatorb > a2) {
                        CMPhotoCFDictionarySetSize(v105, *MEMORY[0x1E4F2F200], (char *)allocatorb - a2);
                      }
                      uint64_t v107 = v91 - a3;
                      BOOL v106 = v91 > a3;
                      CFTypeID v12 = a10;
                      if (v106) {
                        CMPhotoCFDictionarySetSize(v105, *MEMORY[0x1E4F2F1F8], v107);
                      }
                      if (SurfaceElementWidthForPixelFormat >= 2) {
                        CMPhotoCFDictionarySetSize(v105, *MEMORY[0x1E4F2F1F0], SurfaceElementWidthForPixelFormat);
                      }
                      if (v94 >= 2) {
                        CMPhotoCFDictionarySetSize(v105, *MEMORY[0x1E4F2F1E8], v94);
                      }
                      CMPhotoCFDictionarySetSize(v105, *MEMORY[0x1E4F2F248], v97);
                      CFArrayAppendValue(v103, v105);
                      CFDictionarySetValue(v35, (const void *)*MEMORY[0x1E4F2F238], v103);
                      CMPhotoCFDictionarySetSize(v35, *MEMORY[0x1E4F2EFB8], v97);
                      CMPhotoCFDictionarySetInt(v35, (const void *)*MEMORY[0x1E4F2F100], a8);
                      CMPhotoCFDictionarySetBoolean(v35, (const void *)*MEMORY[0x1E4F2F268], a9);
                      uint64_t v17 = 0;
                    }
                    else
                    {
                      uint64_t v17 = 4294950305;
                      CFMutableDictionaryRef v105 = v35;
                      CGRect v35 = 0;
                      CFTypeID v12 = a10;
                    }
                    CFRelease(v105);
                    CFRelease(v103);
                    CGRect v36 = @"CMPhoto Luma";
                    int v13 = a11;
                    goto LABEL_258;
                  }
                  CFRelease(v35);
                  CGRect v35 = 0;
                }
                CGRect v36 = @"CMPhoto Luma";
                uint64_t v17 = 4294950305;
              }
              int v13 = a11;
              goto LABEL_314;
            }
LABEL_132:
            unint64_t v171 = 0;
            uint64_t IsSubsampled = CMPhotoPixelFormatIsSubsampled(a1, 0, 0, 0, (uint64_t *)&v171);
            if (!IsSubsampled)
            {
              unint64_t v43 = CMPhotoPaddedSizeFromImageSizeAndBlockSize(a2, a3, v16);
              uint64_t v45 = v44;
              unint64_t v165 = v43;
              uint64_t v158 = CMPhotoGetBytesPerPixelForPixelFormat(v19);
              unint64_t v46 = CMPhotoAlignValue(v43 * v158, v20);
              if (!(v46 >> 31))
              {
                unint64_t v47 = v46;
                unint64_t v48 = v46 * v45;
                if (a7) {
                  unint64_t v48 = CMPhotoAlignValue(v46 * v45, a7);
                }
                if (v48 >> 31 || (unint64_t v49 = a3, v169 = v45, v50 = v171 * v48, (v171 * v48) >> 31))
                {
                  uint64_t v17 = FigSignalErrorAt();
                  CGRect v35 = 0;
                }
                else
                {
                  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
                  v51 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                  CGRect v35 = v51;
                  if (v51)
                  {
                    CMPhotoCFDictionarySetInt(v51, (const void *)*MEMORY[0x1E4F2EFE8], 0);
                    CMPhotoCFDictionarySetSize(v35, *MEMORY[0x1E4F2F2C0], a2);
                    CMPhotoCFDictionarySetSize(v35, *MEMORY[0x1E4F2F0E8], v49);
                    CMPhotoCFDictionarySetInt32(v35, (const void *)*MEMORY[0x1E4F2F150], v19);
                    CMPhotoCFDictionarySetSize(v35, *MEMORY[0x1E4F2EFB8], v50);
                    CMPhotoCFDictionarySetInt(v35, (const void *)*MEMORY[0x1E4F2F100], a8);
                    CMPhotoCFDictionarySetBoolean(v35, (const void *)*MEMORY[0x1E4F2F268], a9);
                    if (v171 == 3)
                    {
                      unint64_t v152 = v47;
                      theDict = v35;
                      CFMutableArrayRef theArrayb = CFArrayCreateMutable(allocator, 3, MEMORY[0x1E4F1D510]);
                      if (theArrayb)
                      {
                        if (!v171)
                        {
LABEL_156:
                          CGRect v35 = theDict;
                          CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E4F2F238], theArrayb);
                          CFRelease(theArrayb);
                          uint64_t v17 = 0;
                          int v13 = a11;
                          CFTypeID v12 = a10;
                          goto LABEL_160;
                        }
                        uint64_t v52 = 0;
                        unint64_t v53 = 0;
                        uint64_t v147 = *MEMORY[0x1E4F2F258];
                        uint64_t v144 = *MEMORY[0x1E4F2F220];
                        uint64_t v54 = *MEMORY[0x1E4F2F170];
                        uint64_t v55 = *MEMORY[0x1E4F2F240];
                        uint64_t v56 = *MEMORY[0x1E4F2F178];
                        uint64_t v141 = *MEMORY[0x1E4F2F200];
                        uint64_t v137 = *MEMORY[0x1E4F2F1F8];
                        uint64_t v57 = *MEMORY[0x1E4F2F248];
                        while (1)
                        {
                          CFMutableDictionaryRef v58 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                          if (!v58) {
                            break;
                          }
                          CFMutableDictionaryRef v59 = v58;
                          CMPhotoCFDictionarySetSize(v58, v147, a2);
                          CMPhotoCFDictionarySetSize(v59, v144, v49);
                          CMPhotoCFDictionarySetSize(v59, v54, v158);
                          CMPhotoCFDictionarySetSize(v59, v55, v52);
                          CMPhotoCFDictionarySetSize(v59, v56, v152);
                          if (v165 > a2) {
                            CMPhotoCFDictionarySetSize(v59, v141, v165 - a2);
                          }
                          if (v169 > v49) {
                            CMPhotoCFDictionarySetSize(v59, v137, v169 - v49);
                          }
                          CMPhotoCFDictionarySetSize(v59, v57, v48);
                          CFArrayAppendValue(theArrayb, v59);
                          CFRelease(v59);
                          ++v53;
                          v52 += v48;
                          if (v171 <= v53) {
                            goto LABEL_156;
                          }
                        }
                        CFRelease(theArrayb);
                      }
                      uint64_t v17 = 4294950305;
                      int v13 = a11;
                      CFTypeID v12 = a10;
                      CGRect v35 = theDict;
                    }
                    else
                    {
                      if (v171 == 1)
                      {
                        CMPhotoCFDictionarySetSize(v35, *MEMORY[0x1E4F2EFE0], v47);
                        CMPhotoCFDictionarySetSize(v35, *MEMORY[0x1E4F2EFD8], v158);
                        CMPhotoCFDictionarySetInt(v35, (const void *)*MEMORY[0x1E4F2F138], 0);
                        if (v43 > a2) {
                          CMPhotoCFDictionarySetSize(v35, *MEMORY[0x1E4F2F200], v43 - a2);
                        }
                        if (v169 > v49) {
                          CMPhotoCFDictionarySetSize(v35, *MEMORY[0x1E4F2F1F8], v169 - v49);
                        }
                        uint64_t v17 = 0;
                        goto LABEL_146;
                      }
                      uint64_t v17 = FigSignalErrorAt();
                      CFTypeID v12 = a10;
                    }
                    CFRelease(v35);
LABEL_159:
                    CGRect v35 = 0;
                    goto LABEL_160;
                  }
                  uint64_t v17 = 4294950305;
                }
LABEL_146:
                CFTypeID v12 = a10;
LABEL_160:
                CGRect v36 = @"CMPhoto RGB";
LABEL_258:
                *CFTypeID v12 = v35;
                *int v13 = CFRetain(v36);
                return v17;
              }
              uint64_t IsSubsampled = FigSignalErrorAt();
            }
            uint64_t v17 = IsSubsampled;
            goto LABEL_159;
          }
          if ((int)a1 > 875704421)
          {
            if (a1 == 875704422 || a1 == 875704438) {
              goto LABEL_166;
            }
            int v23 = 875704934;
            goto LABEL_165;
          }
          if (a1 == 843264056) {
            goto LABEL_132;
          }
          int v22 = 843264310;
        }
LABEL_131:
        if (a1 != v22) {
          return v17;
        }
        goto LABEL_132;
      }
      if ((int)a1 <= 1650943795)
      {
        if ((int)a1 <= 1380410944)
        {
          if ((int)a1 <= 1279340853)
          {
            if (a1 == 1278555701) {
              goto LABEL_132;
            }
            int v22 = 1279340600;
            goto LABEL_131;
          }
          if (a1 == 1279340854) {
            goto LABEL_132;
          }
          unsigned __int16 v41 = 16961;
        }
        else
        {
          if ((int)a1 > 1647589489)
          {
            if (a1 == 1647589490) {
              goto LABEL_132;
            }
            if (a1 == 1647719528) {
              goto LABEL_232;
            }
            int v21 = 1650942776;
            goto LABEL_231;
          }
          if (a1 == 1380410945) {
            goto LABEL_132;
          }
          unsigned __int16 v41 = 26689;
        }
        int v22 = v41 | 0x52470000;
        goto LABEL_131;
      }
      if ((int)a1 > 1651925815)
      {
        if ((int)a1 <= 1652056887)
        {
          if (a1 == 1651925816) {
            goto LABEL_232;
          }
          int v21 = 1651926376;
        }
        else
        {
          if (a1 == 1652056888 || a1 == 1717855600) {
            goto LABEL_232;
          }
          int v21 = 1717856627;
        }
        goto LABEL_231;
      }
      if ((int)a1 > 1651519797)
      {
        if (a1 == 1651519798) {
          goto LABEL_232;
        }
        int v21 = 1651847472;
        goto LABEL_231;
      }
      if (a1 == 1650943796) {
        goto LABEL_232;
      }
      int v37 = 1650946098;
      goto LABEL_107;
    }
    if ((int)a1 <= 1936077361)
    {
      if ((int)a1 <= 1815491697)
      {
        if ((int)a1 <= 1751410031)
        {
          if ((int)a1 > 1735549491)
          {
            if (a1 == 1735549492) {
              goto LABEL_232;
            }
            int v21 = 1735549752;
          }
          else
          {
            if (a1 == 1734501176) {
              goto LABEL_232;
            }
            int v21 = 1734505012;
          }
        }
        else
        {
          if ((int)a1 > 1751527983)
          {
            if (a1 == 1751527984) {
              goto LABEL_166;
            }
            if (a1 == 1815162994) {
              goto LABEL_132;
            }
            int v22 = 1815361650;
            goto LABEL_131;
          }
          if (a1 == 1751410032) {
            goto LABEL_232;
          }
          int v21 = 1751411059;
        }
LABEL_231:
        if (a1 == v21) {
          goto LABEL_232;
        }
        return v17;
      }
      if ((int)a1 <= 1919378231)
      {
        if ((int)a1 <= 1885745711)
        {
          if (a1 == 1815491698) {
            goto LABEL_132;
          }
          int v37 = 1882468912;
LABEL_107:
          if (a1 != v37) {
            return v17;
          }
          goto LABEL_108;
        }
        if (a1 != 1885745712)
        {
          if (a1 == 1919365990) {
            goto LABEL_132;
          }
          int v22 = 1919365992;
          goto LABEL_131;
        }
LABEL_108:
        unint64_t v39 = CMPhotoPaddedSizeFromImageSizeAndBlockSize(a2, a3, v16);
        CGRect v35 = 0;
        CGRect v36 = @"CMPhoto Packed";
        uint64_t v17 = 4294950306;
        if (v19 > 1885745711)
        {
          if (v19 != 1919381552)
          {
            int v40 = 1885745712;
            goto LABEL_262;
          }
          unint64_t v167 = v38;
          v109 = a10;
          unint64_t v110 = a3;
          unint64_t v114 = 5 * ((v39 + 3) >> 2);
          unint64_t v115 = 320;
        }
        else
        {
          if (v19 != 1650946098)
          {
            int v40 = 1882468912;
LABEL_262:
            if (v19 != v40) {
              goto LABEL_258;
            }
            v109 = a10;
            unint64_t v149 = (a2 + 1) >> 1;
            unint64_t v110 = a3;
            unint64_t v167 = v38;
            CFMutableArrayRef v160 = (CFMutableArrayRef)((a3 + 1) >> 1);
            unint64_t allocatorc = (v38 + 1) >> 1;
            unint64_t v111 = CMPhotoAlignValue((2 * (((v39 + 2) * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64)) & 0xFFFFFFFFFFFFFFFCLL, v20);
            int v112 = 1;
            unint64_t v113 = v39;
            unint64_t v146 = v111;
            goto LABEL_268;
          }
          unint64_t v167 = v38;
          v109 = a10;
          unint64_t v110 = a3;
          unint64_t v114 = (unint64_t)((double)v39 * 1.5);
          unint64_t v115 = 96;
        }
        unint64_t v111 = CMPhotoAlignValue(v114, v115);
        if (v111 != CMPhotoAlignValue(v111, v20)) {
          goto LABEL_325;
        }
        int v112 = 0;
        unint64_t v146 = 0;
        unint64_t v149 = 0;
        CFMutableArrayRef v160 = 0;
        unint64_t allocatorc = 0;
        unint64_t v113 = 0;
LABEL_268:
        if (!(v111 >> 31))
        {
          CFAllocatorRef v116 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          v117 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          if (v117)
          {
            v118 = v117;
            CMPhotoCFDictionarySetInt(v117, (const void *)*MEMORY[0x1E4F2EFE8], 0);
            CMPhotoCFDictionarySetSize(v118, *MEMORY[0x1E4F2F2C0], a2);
            CMPhotoCFDictionarySetSize(v118, *MEMORY[0x1E4F2F0E8], v110);
            theDictb = v118;
            CMPhotoCFDictionarySetInt32(v118, (const void *)*MEMORY[0x1E4F2F150], v19);
            if (!v112)
            {
              unint64_t v130 = v111 * v110;
              if (a7) {
                unint64_t v130 = CMPhotoAlignValue(v111 * v110, a7);
              }
              CMPhotoCFDictionarySetSize(theDictb, *MEMORY[0x1E4F2EFE0], v111);
              if (v39 > a2) {
                CMPhotoCFDictionarySetSize(theDictb, *MEMORY[0x1E4F2F200], v39 - a2);
              }
              if (v167 <= v110)
              {
                CFMutableArrayRef v119 = 0;
                CFMutableDictionaryRef v121 = 0;
                int v132 = a8;
                v131 = theDictb;
LABEL_296:
                CMPhotoCFDictionarySetSize(v131, *MEMORY[0x1E4F2EFB8], v130);
                CMPhotoCFDictionarySetInt(v131, (const void *)*MEMORY[0x1E4F2F100], v132);
                CMPhotoCFDictionarySetBoolean(v131, (const void *)*MEMORY[0x1E4F2F268], a9);
                uint64_t v17 = 0;
                if (!v121)
                {
LABEL_298:
                  if (v119) {
                    CFRelease(v119);
                  }
                  CGRect v36 = @"CMPhoto Packed";
                  int v13 = a11;
                  CFTypeID v12 = v109;
                  CGRect v35 = theDictb;
                  goto LABEL_258;
                }
LABEL_297:
                CFRelease(v121);
                goto LABEL_298;
              }
              v131 = theDictb;
              CMPhotoCFDictionarySetSize(theDictb, *MEMORY[0x1E4F2F1F8], v167 - v110);
              CFMutableArrayRef v119 = 0;
              CFMutableDictionaryRef v121 = 0;
LABEL_294:
              int v132 = a8;
              goto LABEL_296;
            }
            unint64_t v143 = v113;
            CFMutableArrayRef v119 = CFArrayCreateMutable(v116, 2, MEMORY[0x1E4F1D510]);
            v151 = v109;
            if (v119)
            {
              CFMutableDictionaryRef v120 = CFDictionaryCreateMutable(v116, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              CFMutableDictionaryRef v121 = v120;
              if (v120)
              {
                uint64_t v140 = *MEMORY[0x1E4F2F258];
                CMPhotoCFDictionarySetSize(v120, *MEMORY[0x1E4F2F258], a2);
                uint64_t v122 = *MEMORY[0x1E4F2F220];
                CMPhotoCFDictionarySetSize(v121, *MEMORY[0x1E4F2F220], v110);
                uint64_t v123 = *MEMORY[0x1E4F2F240];
                CMPhotoCFDictionarySetSize(v121, *MEMORY[0x1E4F2F240], 0);
                uint64_t v124 = *MEMORY[0x1E4F2F178];
                CMPhotoCFDictionarySetSize(v121, *MEMORY[0x1E4F2F178], v111);
                if (v39 > a2) {
                  CMPhotoCFDictionarySetSize(v121, *MEMORY[0x1E4F2F200], v39 - a2);
                }
                unint64_t v125 = v167;
                if (v167 > v110)
                {
                  CMPhotoCFDictionarySetSize(v121, *MEMORY[0x1E4F2F1F8], v167 - v110);
                  unint64_t v125 = v167;
                }
                unint64_t v126 = v111 * v125;
                if (a7) {
                  unint64_t v126 = CMPhotoAlignValue(v111 * v125, a7);
                }
                if (v126 >> 31)
                {
LABEL_326:
                  uint64_t v17 = FigSignalErrorAt();
                  goto LABEL_333;
                }
                uint64_t v127 = *MEMORY[0x1E4F2F248];
                CMPhotoCFDictionarySetSize(v121, *MEMORY[0x1E4F2F248], v126);
                CFArrayAppendValue(v119, v121);
                CFRelease(v121);
                CFMutableDictionaryRef v128 = CFDictionaryCreateMutable(v116, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                CFMutableDictionaryRef v121 = v128;
                if (v128)
                {
                  CMPhotoCFDictionarySetSize(v128, v140, v149);
                  CMPhotoCFDictionarySetSize(v121, v122, v160);
                  CMPhotoCFDictionarySetSize(v121, v123, v126);
                  CMPhotoCFDictionarySetSize(v121, v124, v146);
                  if (v143 >> 1 > v149) {
                    CMPhotoCFDictionarySetSize(v121, *MEMORY[0x1E4F2F200], (v143 >> 1) - v149);
                  }
                  v109 = v151;
                  if (allocatorc > (unint64_t)v160) {
                    CMPhotoCFDictionarySetSize(v121, *MEMORY[0x1E4F2F1F8], allocatorc - (void)v160);
                  }
                  unint64_t v129 = v146 * allocatorc;
                  if (!((v146 * allocatorc) >> 31))
                  {
                    CMPhotoCFDictionarySetSize(v121, v127, v129);
                    unint64_t v130 = v126 + v129;
                    if (!(v130 >> 31))
                    {
                      CFArrayAppendValue(v119, v121);
                      v131 = theDictb;
                      CFDictionarySetValue(theDictb, (const void *)*MEMORY[0x1E4F2F238], v119);
                      goto LABEL_294;
                    }
                  }
                  goto LABEL_326;
                }
              }
            }
            else
            {
              CFMutableDictionaryRef v121 = 0;
            }
            uint64_t v17 = 4294950305;
LABEL_333:
            CFRelease(theDictb);
            theDictb = 0;
            v109 = v151;
            if (!v121) {
              goto LABEL_298;
            }
            goto LABEL_297;
          }
          CGRect v36 = @"CMPhoto Packed";
          uint64_t v17 = 4294950305;
LABEL_329:
          CFTypeID v12 = v109;
          CGRect v35 = 0;
          goto LABEL_258;
        }
LABEL_325:
        uint64_t v17 = FigSignalErrorAt();
        CGRect v36 = @"CMPhoto Packed";
        goto LABEL_329;
      }
      if ((int)a1 <= 1919381551)
      {
        if (a1 == 1919378232) {
          goto LABEL_232;
        }
        int v21 = 1919379252;
        goto LABEL_231;
      }
      if (a1 == 1919381552) {
        goto LABEL_108;
      }
      if (a1 == 1932996149) {
        goto LABEL_232;
      }
      unsigned __int16 v25 = 12848;
LABEL_99:
      int v23 = v25 | 0x73660000;
      goto LABEL_165;
    }
    if ((int)a1 <= 1953903153)
    {
      if ((int)a1 <= 1937126451)
      {
        if ((int)a1 > 1937125935)
        {
          if (a1 == 1937125936) {
            goto LABEL_166;
          }
          int v23 = 1937125938;
          goto LABEL_165;
        }
        if (a1 == 1936077362) {
          goto LABEL_166;
        }
        unsigned __int16 v25 = 13364;
        goto LABEL_99;
      }
      if ((int)a1 <= 1952854577)
      {
        if (a1 == 1937126452) {
          goto LABEL_166;
        }
        int v23 = 1952854576;
        goto LABEL_165;
      }
      if (a1 == 1952854578 || a1 == 1952855092) {
        goto LABEL_166;
      }
      unsigned __int16 v24 = 12848;
    }
    else
    {
      if ((int)a1 > 2019963439)
      {
        if ((int)a1 > 2019963955)
        {
          if (a1 != 2019963956)
          {
            if (a1 != 2037741158 && a1 != 2037741171) {
              return v17;
            }
            v150 = a10;
            unint64_t v27 = CMPhotoPaddedSizeFromImageSizeAndBlockSize(a2, a3, v16);
            unint64_t v29 = v28;
            uint64_t v30 = CMPhotoGetBytesPerPixelForPixelFormat(v19);
            unint64_t v31 = CMPhotoAlignValue(v27 * v30, v20);
            if (v31 >> 31) {
              goto LABEL_327;
            }
            unint64_t v32 = v31;
            unint64_t v33 = v31 * v29;
            if (a7) {
              unint64_t v33 = CMPhotoAlignValue(v31 * v29, a7);
            }
            if (v33 >> 31)
            {
LABEL_327:
              uint64_t v17 = FigSignalErrorAt();
              CGRect v35 = 0;
              CGRect v36 = @"CMPhoto YUV";
            }
            else
            {
              v34 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              CGRect v35 = v34;
              if (v34)
              {
                CMPhotoCFDictionarySetInt(v34, (const void *)*MEMORY[0x1E4F2EFE8], 0);
                CMPhotoCFDictionarySetSize(v35, *MEMORY[0x1E4F2F2C0], a2);
                CMPhotoCFDictionarySetSize(v35, *MEMORY[0x1E4F2F0E8], a3);
                CMPhotoCFDictionarySetInt32(v35, (const void *)*MEMORY[0x1E4F2F150], v19);
                CMPhotoCFDictionarySetSize(v35, *MEMORY[0x1E4F2EFE0], v32);
                if (v27 > a2) {
                  CMPhotoCFDictionarySetSize(v35, *MEMORY[0x1E4F2F200], v27 - a2);
                }
                if (v29 > a3) {
                  CMPhotoCFDictionarySetSize(v35, *MEMORY[0x1E4F2F1F8], v29 - a3);
                }
                CMPhotoCFDictionarySetSize(v35, *MEMORY[0x1E4F2EFB8], v33);
                CMPhotoCFDictionarySetInt(v35, (const void *)*MEMORY[0x1E4F2F100], a8);
                CMPhotoCFDictionarySetBoolean(v35, (const void *)*MEMORY[0x1E4F2F268], a9);
                uint64_t v17 = 0;
                CGRect v36 = @"CMPhoto YUV";
                CFTypeID v12 = a10;
                goto LABEL_258;
              }
              CGRect v36 = @"CMPhoto YUV";
              uint64_t v17 = 4294950305;
            }
LABEL_314:
            CFTypeID v12 = v150;
            goto LABEL_258;
          }
          goto LABEL_166;
        }
        if (a1 == 2019963440) {
          goto LABEL_166;
        }
        int v23 = 2019963442;
LABEL_165:
        if (a1 != v23) {
          return v17;
        }
LABEL_166:
        unint64_t v60 = CMPhotoPaddedSizeFromImageSizeAndBlockSize(a2, a3, v16);
        CFAllocatorRef v62 = v61;
        uint64_t v63 = CMPhotoGetBytesPerPixelForPixelFormat(v19);
        unint64_t v166 = CMPhotoAlignValue(v60 * v63, v20);
        if (v166 >> 31)
        {
          uint64_t v17 = FigSignalErrorAt();
          CGRect v35 = 0;
          goto LABEL_228;
        }
        CGRect v35 = 0;
        unint64_t v148 = v60;
        uint64_t v64 = v60;
        CGRect v36 = @"CMPhoto Bi-planar";
        uint64_t v17 = 4294950306;
        int theArrayc = a8;
        CFAllocatorRef allocatora = v62;
        if (v19 <= 1937126451)
        {
          if (v19 <= 1751527983)
          {
            if (v19 <= 875704949)
            {
              if (v19 != 875704422 && v19 != 875704438)
              {
                int v65 = 875704934;
                goto LABEL_199;
              }
              goto LABEL_201;
            }
            if (v19 == 875704950) {
              goto LABEL_200;
            }
            if (v19 != 875836518)
            {
              int v66 = 875836534;
              goto LABEL_204;
            }
            goto LABEL_205;
          }
          if (v19 <= 1936077875)
          {
            if (v19 != 1751527984 && v19 != 1936077360)
            {
              int v65 = 1936077362;
              goto LABEL_199;
            }
            goto LABEL_201;
          }
          if (v19 == 1936077876)
          {
LABEL_205:
            uint64_t v64 = 2 * v148;
            unint64_t v67 = a2;
            goto LABEL_206;
          }
          if (v19 == 1937125936) {
            goto LABEL_201;
          }
          int v65 = 1937125938;
        }
        else
        {
          if (v19 > 1953903667)
          {
            if (v19 > 2016687155)
            {
              if (v19 <= 2019963441)
              {
                if (v19 != 2016687156)
                {
                  if (v19 != 2019963440) {
                    goto LABEL_258;
                  }
                  goto LABEL_201;
                }
                goto LABEL_205;
              }
              if (v19 != 2019963442)
              {
                int v66 = 2019963956;
LABEL_204:
                if (v19 != v66) {
                  goto LABEL_258;
                }
                goto LABEL_205;
              }
LABEL_200:
              unint64_t v67 = (a2 + 1) >> 1;
LABEL_206:
              unint64_t v139 = v67;
              unint64_t v68 = a3;
              unint64_t v69 = (unint64_t)v62;
LABEL_207:
              unint64_t v145 = v64;
              uint64_t v142 = CMPhotoAlignValue(v64 * v63, v20);
              CFAllocatorRef v70 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
              v71 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              if (v71)
              {
                v72 = v71;
                CMPhotoCFDictionarySetInt(v71, (const void *)*MEMORY[0x1E4F2EFE8], 0);
                CMPhotoCFDictionarySetSize(v72, *MEMORY[0x1E4F2F2C0], a2);
                CMPhotoCFDictionarySetSize(v72, *MEMORY[0x1E4F2F0E8], a3);
                CMPhotoCFDictionarySetInt32(v72, (const void *)*MEMORY[0x1E4F2F150], v19);
                CFMutableArrayRef v73 = CFArrayCreateMutable(v70, 2, MEMORY[0x1E4F1D510]);
                if (v73)
                {
                  v74 = v73;
                  CFMutableDictionaryRef v75 = CFDictionaryCreateMutable(v70, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                  if (v75)
                  {
                    CFMutableDictionaryRef v76 = v75;
                    CFMutableDictionaryRef theDicta = (CFMutableDictionaryRef)v68;
                    unint64_t v136 = v69;
                    v159 = v74;
                    uint64_t v77 = *MEMORY[0x1E4F2F258];
                    CMPhotoCFDictionarySetSize(v75, *MEMORY[0x1E4F2F258], a2);
                    uint64_t v78 = *MEMORY[0x1E4F2F220];
                    unint64_t v79 = a3;
                    CMPhotoCFDictionarySetSize(v76, *MEMORY[0x1E4F2F220], a3);
                    uint64_t v80 = *MEMORY[0x1E4F2F170];
                    uint64_t v138 = v63;
                    CMPhotoCFDictionarySetSize(v76, *MEMORY[0x1E4F2F170], v63);
                    uint64_t v81 = *MEMORY[0x1E4F2F240];
                    CMPhotoCFDictionarySetSize(v76, *MEMORY[0x1E4F2F240], 0);
                    uint64_t v82 = *MEMORY[0x1E4F2F178];
                    CMPhotoCFDictionarySetSize(v76, *MEMORY[0x1E4F2F178], v166);
                    if (v148 > a2) {
                      CMPhotoCFDictionarySetSize(v76, *MEMORY[0x1E4F2F200], v148 - a2);
                    }
                    if ((unint64_t)allocatora > v79) {
                      CMPhotoCFDictionarySetSize(v76, *MEMORY[0x1E4F2F1F8], (char *)allocatora - v79);
                    }
                    unint64_t v83 = v166 * (void)allocatora;
                    if (a7) {
                      unint64_t v83 = CMPhotoAlignValue(v166 * (void)allocatora, a7);
                    }
                    if (v83 >> 31)
                    {
                      int v13 = a11;
                      CFTypeID v12 = a10;
                    }
                    else
                    {
                      uint64_t v84 = *MEMORY[0x1E4F2F248];
                      CMPhotoCFDictionarySetSize(v76, *MEMORY[0x1E4F2F248], v83);
                      CFArrayAppendValue(v159, v76);
                      CFRelease(v76);
                      CFMutableDictionaryRef v85 = CFDictionaryCreateMutable(v70, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                      if (!v85)
                      {
                        CGRect v35 = 0;
                        uint64_t v17 = 4294950305;
                        int v13 = a11;
                        CFTypeID v12 = a10;
                        v74 = v159;
                        goto LABEL_227;
                      }
                      CFMutableDictionaryRef v76 = v85;
                      CMPhotoCFDictionarySetSize(v85, v77, v139);
                      CMPhotoCFDictionarySetSize(v76, v78, theDicta);
                      CMPhotoCFDictionarySetSize(v76, v80, 2 * v138);
                      CMPhotoCFDictionarySetSize(v76, v81, v83);
                      CMPhotoCFDictionarySetSize(v76, v82, v142);
                      if (v145 >> 1 > v139) {
                        CMPhotoCFDictionarySetSize(v76, *MEMORY[0x1E4F2F200], (v145 >> 1) - v139);
                      }
                      if (v136 > (unint64_t)theDicta) {
                        CMPhotoCFDictionarySetSize(v76, *MEMORY[0x1E4F2F1F8], v136 - (void)theDicta);
                      }
                      unint64_t v86 = v142 * v136;
                      int v13 = a11;
                      if (a7) {
                        unint64_t v86 = CMPhotoAlignValue(v86, a7);
                      }
                      if (!(v86 >> 31))
                      {
                        CMPhotoCFDictionarySetSize(v76, v84, v86);
                        unint64_t v87 = v86 + v83;
                        if (!(v87 >> 31))
                        {
                          v74 = v159;
                          CFArrayAppendValue(v159, v76);
                          CFDictionarySetValue(v72, (const void *)*MEMORY[0x1E4F2F238], v159);
                          CMPhotoCFDictionarySetSize(v72, *MEMORY[0x1E4F2EFB8], v87);
                          CMPhotoCFDictionarySetInt(v72, (const void *)*MEMORY[0x1E4F2F100], theArrayc);
                          CMPhotoCFDictionarySetBoolean(v72, (const void *)*MEMORY[0x1E4F2F268], a9);
                          uint64_t v17 = 0;
                          CGRect v35 = v72;
                          v72 = v76;
                          CFTypeID v12 = a10;
LABEL_227:
                          CFRelease(v72);
                          CFRelease(v74);
LABEL_228:
                          CGRect v36 = @"CMPhoto Bi-planar";
                          goto LABEL_258;
                        }
                      }
                      CFTypeID v12 = a10;
                    }
                    v74 = v159;
                    uint64_t v17 = FigSignalErrorAt();
                    CFRelease(v72);
                    CGRect v35 = 0;
                    v72 = v76;
                    goto LABEL_227;
                  }
                  CGRect v35 = 0;
                  uint64_t v17 = 4294950305;
                  goto LABEL_227;
                }
                CFRelease(v72);
              }
              CGRect v35 = 0;
              CGRect v36 = @"CMPhoto Bi-planar";
              uint64_t v17 = 4294950305;
              goto LABEL_258;
            }
            if (v19 != 1953903668)
            {
              if (v19 != 2016686640)
              {
                int v65 = 2016686642;
                goto LABEL_199;
              }
LABEL_201:
              unint64_t v139 = (a2 + 1) >> 1;
              unint64_t v68 = (a3 + 1) >> 1;
              unint64_t v69 = ((unint64_t)v62 + 1) >> 1;
              goto LABEL_207;
            }
            goto LABEL_205;
          }
          if (v19 <= 1952855091)
          {
            if (v19 != 1937126452)
            {
              if (v19 != 1952854576)
              {
                int v65 = 1952854578;
                goto LABEL_199;
              }
              goto LABEL_201;
            }
            goto LABEL_205;
          }
          if (v19 == 1952855092) {
            goto LABEL_205;
          }
          if (v19 == 1953903152) {
            goto LABEL_201;
          }
          int v65 = 1953903154;
        }
LABEL_199:
        if (v19 != v65) {
          goto LABEL_258;
        }
        goto LABEL_200;
      }
      if ((int)a1 > 2016686639)
      {
        if (a1 == 2016686640 || a1 == 2016686642) {
          goto LABEL_166;
        }
        int v23 = 2016687156;
        goto LABEL_165;
      }
      if (a1 == 1953903154) {
        goto LABEL_166;
      }
      unsigned __int16 v24 = 13364;
    }
    int v23 = v24 | 0x74760000;
    goto LABEL_165;
  }
  return FigSignalErrorAt();
}

uint64_t CMPhotoCFDictionarySetInt64(__CFDictionary *a1, const void *a2, uint64_t a3)
{
  uint64_t valuePtr = a3;
  uint64_t result = 4294950306;
  if (a1 && a2)
  {
    CFNumberRef v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &valuePtr);
    if (v6)
    {
      CFNumberRef v7 = v6;
      CFDictionarySetValue(a1, a2, v6);
      CFRelease(v7);
      return 0;
    }
    else
    {
      return 4294950305;
    }
  }
  return result;
}

__n128 Pool_Cleanup(int64x2_t *a1, unint64_t a2, unint64_t a3, int a4, int a5)
{
  unint64_t v6 = a3;
  unint64_t v7 = a2;
  if (a4)
  {
    if (a1[7].i64[0] > a2 && a1[4].i64[0] < a2) {
      unint64_t v7 = a1[4].u64[0];
    }
    if (a1[7].i64[1] > a3 && a1[5].i64[1] < a3) {
      unint64_t v6 = a1[5].u64[1];
    }
  }
  uint64_t v9 = (void *)a1->i64[0];
  if (a1->i64[0])
  {
    while (1)
    {
      int v10 = v9;
      uint64_t v9 = (void *)v9[7];
      if (!*((unsigned char *)v10 + 72) && IOSurfaceIsInUse((IOSurfaceRef)*v10)) {
        goto LABEL_23;
      }
      if (a1[7].i64[0] > v7
        || a1[7].i64[1] > v6
        || (BOOL v11 = CMPhotoUsePurgeableIOSurfaces(), a5) && v11 && *(_DWORD *)(v10[4] + 76) != 2)
      {
        uint64_t v13 = v10[7];
        BOOL v14 = (void *)v10[8];
        if (v13)
        {
          *(void *)(v13 + 64) = v14;
          BOOL v14 = (void *)v10[8];
        }
        else
        {
          a1->i64[1] = (uint64_t)v14;
        }
        void *v14 = v13;
        uint64_t v15 = v10[5];
        unint64_t v16 = (void *)v10[6];
        if (v15)
        {
          *(void *)(v15 + 48) = v16;
          unint64_t v16 = (void *)v10[6];
        }
        else
        {
          *(void *)(v10[4] + 8) = v16;
        }
        *unint64_t v16 = v15;
        CMPhotoGetEncodeAccelerationModeOverride(*v10, @"CMPhoto dropped");
        if (*v10) {
          CFRelease((CFTypeRef)*v10);
        }
        uint64_t v17 = (const void *)v10[2];
        if (v17) {
          CFRelease(v17);
        }
        int64x2_t v18 = a1[7];
        v19.i64[1] = -1;
        v19.i64[0] = v10[1];
        v19.i64[0] = vsubq_s64(v18, v19).u64[0];
        v20.i64[0] = -1;
        v20.i64[1] = -1;
        v19.i64[1] = vaddq_s64(v18, v20).i64[1];
        a1[7] = v19;
        uint64_t v21 = v10[4];
        --*(void *)(v21 + 24);
        ++*(void *)(v21 + 48);
        free(v10);
        if (!v9) {
          return result;
        }
      }
      else if (*((unsigned char *)v10 + 72))
      {
LABEL_23:
        if (!v9) {
          return result;
        }
      }
      else
      {
        if (CMPhotoUsePurgeableIOSurfaces()) {
          IOSurfaceSetPurgeable((IOSurfaceRef)*v10, 1u, 0);
        }
        *((unsigned char *)v10 + 72) = 1;
        if (!v9) {
          return result;
        }
      }
    }
  }
  return result;
}

BOOL CMPhotoUsePurgeableIOSurfaces()
{
  if (_getMarkSurfacesNonPurgeable_onceToken != -1) {
    dispatch_once(&_getMarkSurfacesNonPurgeable_onceToken, &__block_literal_global_37);
  }
  return (_getMarkSurfacesNonPurgeable_markSurfacesNonPurgeable & 1) == 0;
}

uint64_t CMPhotoCFDictionarySetInt(__CFDictionary *a1, const void *a2, int a3)
{
  int valuePtr = a3;
  uint64_t result = 4294950306;
  if (a1 && a2)
  {
    CFNumberRef v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
    if (v6)
    {
      CFNumberRef v7 = v6;
      CFDictionarySetValue(a1, a2, v6);
      CFRelease(v7);
      return 0;
    }
    else
    {
      return 4294950305;
    }
  }
  return result;
}

uint64_t CMPhotoAlignValue(unint64_t a1, unint64_t a2)
{
  if (a1 % a2) {
    unint64_t v2 = a2 - a1 % a2;
  }
  else {
    unint64_t v2 = 0;
  }
  return v2 + a1;
}

uint64_t CMPhotoCFDictionarySetInt32(__CFDictionary *a1, const void *a2, int a3)
{
  int valuePtr = a3;
  uint64_t result = 4294950306;
  if (a1 && a2)
  {
    CFNumberRef v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
    if (v6)
    {
      CFNumberRef v7 = v6;
      CFDictionarySetValue(a1, a2, v6);
      CFRelease(v7);
      return 0;
    }
    else
    {
      return 4294950305;
    }
  }
  return result;
}

uint64_t CMPhotoCFDictionarySetBoolean(__CFDictionary *a1, const void *a2, int a3)
{
  uint64_t v3 = 4294950306;
  if (a1 && a2)
  {
    double v4 = (const void **)MEMORY[0x1E4F1CFD0];
    if (!a3) {
      double v4 = (const void **)MEMORY[0x1E4F1CFC8];
    }
    CFDictionarySetValue(a1, a2, *v4);
    return 0;
  }
  return v3;
}

uint64_t CMPhotoCreatePixelBufferCLAPDictionaryFromRect(const __CFAllocator *a1, __CFDictionary **a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  if (!a2) {
    return 0;
  }
  Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    unint64_t v16 = Mutable;
    float v17 = a5 + a7 * 0.5 - a3 * 0.5;
    uint64_t v18 = CMPhotoCFDictionarySetFloat(Mutable, (const void *)*MEMORY[0x1E4F24A70], v17);
    if (v18
      || (float v19 = a6 + a8 * 0.5 - a4 * 0.5,
          uint64_t v18 = CMPhotoCFDictionarySetFloat(v16, (const void *)*MEMORY[0x1E4F24A80], v19),
          v18)
      || (v20 = a7, uint64_t v18 = CMPhotoCFDictionarySetFloat(v16, (const void *)*MEMORY[0x1E4F24A88], v20), v18))
    {
      uint64_t v22 = v18;
    }
    else
    {
      float v21 = a8;
      uint64_t v22 = CMPhotoCFDictionarySetFloat(v16, (const void *)*MEMORY[0x1E4F24A68], v21);
      if (!v22)
      {
        *a2 = v16;
        return v22;
      }
    }
    CFRelease(v16);
    return v22;
  }
  return FigSignalErrorAt();
}

uint64_t CMPhotoCFDictionarySetFloat(__CFDictionary *a1, const void *a2, float a3)
{
  float valuePtr = a3;
  uint64_t result = 4294950306;
  if (a1 && a2)
  {
    CFNumberRef v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloatType, &valuePtr);
    if (v6)
    {
      CFNumberRef v7 = v6;
      CFDictionarySetValue(a1, a2, v6);
      CFRelease(v7);
      return 0;
    }
    else
    {
      return 4294950305;
    }
  }
  return result;
}

double CMPhotoDecompressionSessionClass_Init(uint64_t a1)
{
  *(void *)(a1 + 320) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

double CMPhotoDecompressionTileIteratorClass_Init(_OWORD *a1)
{
  double result = 0.0;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t _createPooledIOSurfaceFromStreamRange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, IOSurfaceRef *a6)
{
  IOSurfaceRef buffer = 0;
  uint64_t v11 = a4;
  if (a5) {
    uint64_t v11 = *a5;
  }
  uint64_t v12 = CMPhotoSurfacePoolCreateMemorySurface(a1, v11 + 2, 1, &buffer);
  if (v12 || (uint64_t v12 = IOSurfaceLock(buffer, 0, 0), v12))
  {
    uint64_t v18 = v12;
  }
  else
  {
    BaseAddress = (char *)IOSurfaceGetBaseAddress(buffer);
    uint64_t v20 = 0;
    uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v14) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    unint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, uint64_t *))(v15 + 8);
    if (v16)
    {
      uint64_t v17 = v16(a2, a4, a3, BaseAddress, &v20);
      if (v17)
      {
        uint64_t v18 = v17;
      }
      else
      {
        if (v20 == a4)
        {
          if (BaseAddress[v11 - 2] != 255 || BaseAddress[v11 - 1] != 217)
          {
            *(_WORD *)&BaseAddress[v11] = -9729;
            v11 += 2;
          }
          IOSurfaceUnlock(buffer, 0, 0);
          if (a5) {
            *a5 = v11;
          }
          uint64_t v18 = 0;
          *a6 = buffer;
          return v18;
        }
        uint64_t v18 = 4294950304;
      }
    }
    else
    {
      uint64_t v18 = 4294954514;
    }
    IOSurfaceUnlock(buffer, 0, 0);
  }
  if (buffer)
  {
    IOSurfaceDecrementUseCount(buffer);
    if (buffer) {
      CFRelease(buffer);
    }
  }
  return v18;
}

uint64_t CMPhotoSurfacePoolCreateMemorySurface(uint64_t a1, unint64_t a2, int a3, IOSurfaceRef *a4)
{
  uint64_t v7 = a1;
  IOSurfaceRef buffer = 0;
  if (!a1)
  {
    pthread_once(&CMPhotoSurfacePoolGetDefault_onceToken, _once_CMPhotoSurfacePoolGetDefault);
    uint64_t v7 = defaultSurfacePool;
  }
  if ((__CFString *)v7 == @"SurfacePoolOneShot")
  {
    BOOL v8 = 0;
    uint64_t v11 = 0;
    uint64_t v17 = 0;
LABEL_15:
    uint64_t v12 = CMPhotoCreateMemorySurface(a2, 1246774599, a3, 0, 0, v17, &buffer);
    if (v12) {
      goto LABEL_59;
    }
    if (!buffer)
    {
      unsigned __int16 v24 = 0;
      uint64_t v26 = 4294950305;
      goto LABEL_41;
    }
    if (v17) {
      uint64_t v18 = @"CMPhoto non-pooled IOSurfaceMemoryPool";
    }
    else {
      uint64_t v18 = @"CMPhoto non-pooled";
    }
    CMPhotoGetEncodeAccelerationModeOverride(buffer, v18);
    IOSurfaceIncrementUseCount(buffer);
    if ((__CFString *)v7 == @"SurfacePoolOneShot")
    {
      IOSurfaceRef v19 = buffer;
      if (buffer) {
        goto LABEL_40;
      }
      uint64_t v20 = 0;
      goto LABEL_26;
    }
    atomic_fetch_add(&v8[8].i32[1], 1u);
    goto LABEL_22;
  }
  BOOL v8 = (int64x2_t *)(v7 + 24);
  unint64_t v31 = 0;
  if (!Pool_LookupSizeBucket(v7 + 24, a2, &v31))
  {
    uint64_t v11 = 0;
    goto LABEL_14;
  }
  uint64_t v9 = *(void *)(v7 + 48);
  unint64_t v10 = v31;
  uint64_t v11 = (uint64_t *)(v9 + 88 * v31);
  if (!v9)
  {
LABEL_14:
    uint64_t v17 = *(void *)(v7 + 160);
    goto LABEL_15;
  }
  uint64_t v12 = pthread_mutex_lock(*(pthread_mutex_t **)(v7 + 312));
  if (v12) {
    goto LABEL_59;
  }
  uint64_t v13 = *v11;
  if (*v11)
  {
    while (!*(unsigned char *)(v13 + 72) && IOSurfaceIsInUse(*(IOSurfaceRef *)v13))
    {
      uint64_t v13 = *(void *)(v13 + 40);
      if (!v13) {
        goto LABEL_11;
      }
    }
    Pool_MarkBufferAsUsed(v7 + 24, (uint64_t)v11, v13);
    uint64_t v15 = *(__IOSurface **)v13;
    IOSurfaceRef buffer = v15;
    *(void *)(v7 + 384) = dispatch_time(0, 0);
    *(unsigned char *)(v7 + 392) = 0;
    if (*(void *)(v7 + 352))
    {
      objc_msgSend(*(id *)(v7 + 352), "takeAssertionUntilTime:forContext:", dispatch_time(0, 15000000000), v7);
      [*(id *)(v7 + 352) registerBackgroundNotificationHandlerForContext:v7 handler:*(void *)(v7 + 360)];
    }
    if (*(unsigned char *)(v7 + 320))
    {
      dispatch_resume(*(dispatch_object_t *)(v7 + 328));
      uint64_t v14 = 0;
      *(unsigned char *)(v7 + 320) = 0;
    }
    else
    {
      uint64_t v14 = 0;
    }
    int v16 = 1;
  }
  else
  {
LABEL_11:
    uint64_t v14 = *(void *)(v9 + 88 * v10 + 16);
    Pool_Cleanup((int64x2_t *)(v7 + 24), *(void *)(v7 + 80) - v14, *(void *)(v7 + 104) - 1, 0, 0);
    uint64_t v15 = 0;
    int v16 = 0;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(v7 + 312));
  if (v16 && v15)
  {
    if (CMPhotoUsePurgeableIOSurfaces() && IOSurfaceSetPurgeable(v15, 0, 0))
    {
      SurfacePool_DetachSurface(v7, v15, 0);
      CFRelease(v15);
      IOSurfaceRef buffer = 0;
      goto LABEL_54;
    }
    CFStringRef v28 = (const __CFString *)*MEMORY[0x1E4F2F128];
    CFTypeRef v29 = IOSurfaceCopyValue(v15, (CFStringRef)*MEMORY[0x1E4F2F128]);
    IOSurfaceRemoveAllValues(v15);
    if (v29)
    {
      IOSurfaceSetValue(v15, v28, v29);
      CFRelease(v29);
    }
  }
  else if (!v15)
  {
LABEL_54:
    if ((unint64_t)(*(void *)(v7 + 136) + v14) > *(void *)(v7 + 80) && *(unsigned char *)(v7 + 153)
      || *(void *)(v7 + 144) >= *(void *)(v7 + 104) && *(unsigned char *)(v7 + 152))
    {
      uint64_t v12 = FigSignalErrorAt();
      goto LABEL_59;
    }
  }
LABEL_22:
  IOSurfaceRef v19 = buffer;
  if (buffer) {
    goto LABEL_40;
  }
  uint64_t v20 = v8[8].i64[1];
LABEL_26:
  uint64_t v12 = CMPhotoCreateMemorySurface(v11[2], 1246774599, a3, 0, 0, v20, &buffer);
  if (!v12)
  {
    if (v8[6].i8[8]) {
      WiringAssertion = (const void *)IOSurfaceCreateWiringAssertion();
    }
    else {
      WiringAssertion = 0;
    }
    if (v20) {
      uint64_t v22 = @"CMPhoto pooled IOSurfaceMemoryPool";
    }
    else {
      uint64_t v22 = @"CMPhoto pooled";
    }
    CMPhotoGetEncodeAccelerationModeOverride(buffer, v22);
    IOSurfaceIncrementUseCount(buffer);
    int v23 = malloc_type_malloc(0x50uLL, 0x10A00405052DA9CuLL);
    unsigned __int16 v24 = v23;
    if (!v23)
    {
      uint64_t v26 = 4294950305;
      goto LABEL_66;
    }
    *int v23 = buffer;
    v23[2] = WiringAssertion;
    v23[4] = v11;
    v23[1] = v11[2];
    v23[3] = 0;
    uint64_t v25 = pthread_mutex_lock(*(pthread_mutex_t **)(v7 + 312));
    if (v25)
    {
      uint64_t v26 = v25;
      goto LABEL_65;
    }
    Pool_InsertNewBuffer(v8, v11, (uint64_t)v24);
    *(void *)(v7 + 384) = dispatch_time(0, 0);
    *(unsigned char *)(v7 + 392) = 0;
    if (*(void *)(v7 + 352))
    {
      objc_msgSend(*(id *)(v7 + 352), "takeAssertionUntilTime:forContext:", dispatch_time(0, 15000000000), v7);
      [*(id *)(v7 + 352) registerBackgroundNotificationHandlerForContext:v7 handler:*(void *)(v7 + 360)];
    }
    if (*(unsigned char *)(v7 + 320))
    {
      dispatch_resume(*(dispatch_object_t *)(v7 + 328));
      *(unsigned char *)(v7 + 320) = 0;
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)(v7 + 312));
    IOSurfaceRef v19 = buffer;
LABEL_40:
    unsigned __int16 v24 = 0;
    uint64_t v26 = 0;
    *a4 = v19;
    IOSurfaceRef buffer = 0;
    goto LABEL_41;
  }
LABEL_59:
  uint64_t v26 = v12;
  unsigned __int16 v24 = 0;
LABEL_65:
  WiringAssertion = 0;
LABEL_66:
  if (buffer)
  {
    IOSurfaceDecrementUseCount(buffer);
    if (buffer) {
      CFRelease(buffer);
    }
  }
  if (WiringAssertion) {
    CFRelease(WiringAssertion);
  }
LABEL_41:
  free(v24);
  return v26;
}

uint64_t CMPhotoSurfacePoolCreateImageSurfaceWithAlignment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unint64_t a6, unint64_t a7, int a8, uint64_t a9, unint64_t a10, int a11, unsigned __int8 a12, IOSurfaceRef *a13, unsigned char *a14)
{
  kern_return_t v67;
  char v68;
  CFStringRef v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  void *v73;
  __CFString *v74;
  IOSurfaceRef v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const void *WiringAssertion;
  __CFString *v81;
  __IOSurface *v82;
  size_t BytesPerRowOfPlane;
  uint64_t v84;
  unint64_t v86;
  unint64_t v87;
  unint64_t v90;
  int64x2_t *v91;
  unint64_t v92;
  IOSurfaceRef buffer;
  unint64_t v94;
  UInt8 bytes[16];
  long long v96;

  IOSurfaceRef buffer = 0;
  if (a6 >= 0x7FFFFFFF)
  {
    v72 = FigSignalErrorAt();
    CFMutableArrayRef v73 = 0;
    goto LABEL_293;
  }
  unint64_t v14 = a7;
  if (a7 >= 0x7FFFFFFF) {
    goto LABEL_255;
  }
  unint64_t v15 = a6;
  uint64_t v19 = a1;
  if (!a1)
  {
    pthread_once(&CMPhotoSurfacePoolGetDefault_onceToken, _once_CMPhotoSurfacePoolGetDefault);
    uint64_t v19 = defaultSurfacePool;
    if (!defaultSurfacePool)
    {
      CFMutableArrayRef v73 = 0;
      WiringAssertion = 0;
      goto LABEL_303;
    }
  }
  if (a9) {
    uint64_t v20 = a9;
  }
  else {
    uint64_t v20 = 16;
  }
  v92 = v20;
  unint64_t v21 = CMPhotoSmallestNumGreaterThanAndDivisibleBy(v15, v20);
  unint64_t v22 = 1;
  if ((int)a2 > 1882468911)
  {
    if ((int)a2 <= 1952854575)
    {
      if ((int)a2 <= 1919381551)
      {
        if ((int)a2 > 1919378231)
        {
          if (a2 == 1919378232) {
            goto LABEL_72;
          }
          int v24 = 1919379252;
        }
        else
        {
          if (a2 == 1882468912) {
            goto LABEL_72;
          }
          int v24 = 1885745712;
        }
        goto LABEL_71;
      }
      if ((int)a2 <= 1936077361)
      {
        if (a2 == 1919381552)
        {
          unint64_t v25 = 1;
          unint64_t v22 = 16;
          if (!v15) {
            goto LABEL_68;
          }
          goto LABEL_74;
        }
        int v24 = 1936077360;
        goto LABEL_71;
      }
      if (a2 != 1936077362)
      {
        if (a2 == 1937125936) {
          goto LABEL_72;
        }
        int v26 = 1937125938;
        goto LABEL_66;
      }
    }
    else if ((int)a2 > 2016686641)
    {
      if ((int)a2 > 2019963441)
      {
        if (a2 == 2019963442 || a2 == 2037741158) {
          goto LABEL_67;
        }
        int v26 = 2037741171;
        goto LABEL_66;
      }
      if (a2 != 2016686642)
      {
        int v24 = 2019963440;
        goto LABEL_71;
      }
    }
    else
    {
      if ((int)a2 <= 1953903151)
      {
        if (a2 == 1952854576) {
          goto LABEL_72;
        }
        int v26 = 1952854578;
        goto LABEL_66;
      }
      if (a2 == 1953903152) {
        goto LABEL_72;
      }
      if (a2 != 1953903154)
      {
        int v24 = 2016686640;
        goto LABEL_71;
      }
    }
  }
  else
  {
    if ((int)a2 > 1651519797)
    {
      if ((int)a2 <= 1734501175)
      {
        if ((int)a2 <= 1651925815)
        {
          if (a2 == 1651519798) {
            goto LABEL_56;
          }
          int v23 = 1651847472;
        }
        else
        {
          if (a2 == 1651925816 || a2 == 1651926376)
          {
LABEL_56:
            unint64_t v22 = 4;
            unint64_t v25 = 4;
            if (!v15) {
              goto LABEL_68;
            }
LABEL_74:
            unint64_t v27 = v15 % v22;
            if (v27 && (v21 <= v15 || v27 > v21 - v15)) {
              goto LABEL_79;
            }
            goto LABEL_77;
          }
          int v23 = 1652056888;
        }
        goto LABEL_55;
      }
      if ((int)a2 > 1735549491)
      {
        if (a2 != 1735549492 && a2 != 1735549752)
        {
          int v24 = 1751527984;
          goto LABEL_71;
        }
LABEL_72:
        unint64_t v22 = 2;
        unint64_t v25 = 2;
LABEL_73:
        if (v15) {
          goto LABEL_74;
        }
        goto LABEL_68;
      }
      if (a2 == 1734501176) {
        goto LABEL_72;
      }
      int v24 = 1734505012;
LABEL_71:
      unint64_t v25 = 1;
      if (a2 != v24) {
        goto LABEL_73;
      }
      goto LABEL_72;
    }
    if ((int)a2 > 1278555700)
    {
      if ((int)a2 > 1650942775)
      {
        if (a2 != 1650942776 && a2 != 1650943796)
        {
          unint64_t v25 = 1;
          if (a2 == 1650946098) {
            unint64_t v22 = 8;
          }
          else {
            unint64_t v25 = 1;
          }
          if (!v15) {
            goto LABEL_68;
          }
          goto LABEL_74;
        }
        goto LABEL_72;
      }
      if (a2 != 1278555701)
      {
        int v23 = 1647719528;
LABEL_55:
        unint64_t v25 = 1;
        if (a2 == v23) {
          goto LABEL_56;
        }
        goto LABEL_73;
      }
      goto LABEL_67;
    }
    if ((int)a2 <= 875704933)
    {
      if (a2 == 875704422) {
        goto LABEL_72;
      }
      int v24 = 875704438;
      goto LABEL_71;
    }
    if (a2 != 875704934)
    {
      int v26 = 875704950;
LABEL_66:
      unint64_t v25 = 1;
      if (a2 != v26) {
        goto LABEL_73;
      }
    }
  }
LABEL_67:
  unint64_t v25 = 1;
  unint64_t v22 = 2;
  if (v15) {
    goto LABEL_74;
  }
LABEL_68:
  unint64_t v15 = v22;
LABEL_77:
  if (!v14)
  {
    unint64_t v14 = v25;
    goto LABEL_82;
  }
  if (!(v14 % v25)) {
    goto LABEL_82;
  }
LABEL_79:
  uint64_t v28 = FigSignalErrorAt();
  if (v28)
  {
LABEL_294:
    v72 = v28;
    CFMutableArrayRef v73 = 0;
LABEL_295:
    WiringAssertion = 0;
    goto LABEL_296;
  }
LABEL_82:
  int v29 = a11;
  unint64_t v30 = a10;
  unint64_t v87 = v15;
  if ((__CFString *)v19 == @"SurfacePoolOneShot")
  {
    unint64_t v91 = 0;
    uint64_t v40 = 0;
LABEL_260:
    if (!a5 && a8)
    {
      a3 = CMPhotoSmallestNumGreaterThanAndDivisibleBy(a3, v87);
      a4 = CMPhotoSmallestNumGreaterThanAndDivisibleBy(a4, v14);
    }
    uint64_t v28 = CMPhotoCreateImageSurface(a2, a3, a4, v87, v14, v92, v30, v29, a12, 0, 0, v40, &buffer);
    if (v28) {
      goto LABEL_294;
    }
    if (!buffer)
    {
      CFMutableArrayRef v73 = 0;
      v72 = 4294950305;
      goto LABEL_293;
    }
    if (v40) {
      v74 = @"CMPhoto non-pooled IOSurfaceMemoryPool";
    }
    else {
      v74 = @"CMPhoto non-pooled";
    }
    CMPhotoGetEncodeAccelerationModeOverride(buffer, v74);
    IOSurfaceIncrementUseCount(buffer);
    if ((__CFString *)v19 != @"SurfacePoolOneShot")
    {
      CFArrayRef Value = 0;
      LOBYTE(v59) = 0;
      atomic_fetch_add(&v91[8].i32[1], 1u);
      goto LABEL_270;
    }
    LOBYTE(v59) = 0;
    CFMutableDictionaryRef v75 = buffer;
    if (buffer) {
      goto LABEL_291;
    }
    CFMutableDictionaryRef v76 = v87;
    CFArrayRef Value = 0;
    unint64_t v79 = 0;
    uint64_t v78 = 60;
    uint64_t v77 = 56;
LABEL_274:
    uint64_t v28 = CMPhotoCreateImageSurface(a2, *(unsigned int *)v77, *(unsigned int *)v78, v76, v14, v92, v30, v29, a12, 0, 0, v79, &buffer);
    if (v28) {
      goto LABEL_294;
    }
    if (v91[6].i8[8]) {
      WiringAssertion = (const void *)IOSurfaceCreateWiringAssertion();
    }
    else {
      WiringAssertion = 0;
    }
    if (v79) {
      uint64_t v81 = @"CMPhoto pooled IOSurfaceMemoryPool";
    }
    else {
      uint64_t v81 = @"CMPhoto pooled";
    }
    CMPhotoGetEncodeAccelerationModeOverride(buffer, v81);
    IOSurfaceIncrementUseCount(buffer);
    CFMutableArrayRef v73 = malloc_type_malloc(0x50uLL, 0x10A00405052DA9CuLL);
    if (v73)
    {
      uint64_t v82 = buffer;
      *CFMutableArrayRef v73 = buffer;
      v73[2] = WiringAssertion;
      v73[4] = Value;
      v73[1] = IOSurfaceGetAllocSize(v82);
      if (IOSurfaceGetPlaneCount(buffer)) {
        BytesPerRowOfPlane = IOSurfaceGetBytesPerRowOfPlane(buffer, 0);
      }
      else {
        BytesPerRowOfPlane = IOSurfaceGetBytesPerRow(buffer);
      }
      v73[3] = BytesPerRowOfPlane;
      uint64_t v84 = pthread_mutex_lock(*(pthread_mutex_t **)(v19 + 312));
      if (!v84)
      {
        Pool_InsertNewBuffer(v91, Value, (uint64_t)v73);
        *(void *)(v19 + 384) = dispatch_time(0, 0);
        *(unsigned char *)(v19 + 392) = 0;
        if (*(void *)(v19 + 352))
        {
          objc_msgSend(*(id *)(v19 + 352), "takeAssertionUntilTime:forContext:", dispatch_time(0, 15000000000), v19);
          [*(id *)(v19 + 352) registerBackgroundNotificationHandlerForContext:v19 handler:*(void *)(v19 + 360)];
        }
        if (*(unsigned char *)(v19 + 320))
        {
          dispatch_resume(*(dispatch_object_t *)(v19 + 328));
          *(unsigned char *)(v19 + 320) = 0;
        }
        pthread_mutex_unlock(*(pthread_mutex_t **)(v19 + 312));
        CFMutableDictionaryRef v75 = buffer;
        goto LABEL_291;
      }
      v72 = v84;
      goto LABEL_295;
    }
LABEL_303:
    v72 = 4294950305;
LABEL_296:
    if (buffer)
    {
      IOSurfaceDecrementUseCount(buffer);
      if (buffer) {
        CFRelease(buffer);
      }
    }
    if (WiringAssertion) {
      CFRelease(WiringAssertion);
    }
    goto LABEL_293;
  }
  unint64_t v91 = (int64x2_t *)(v19 + 168);
  unint64_t v31 = v14;
  unint64_t v32 = *(void *)(*(void *)(v19 + 200) + 8 * *(void *)(v19 + 208) - 8);
  unint64_t v86 = v31;
  unint64_t v33 = CMPhotoPaddedSizeFromImageSizeAndBlockSize(a3, a4, v15);
  if (v33 > v32) {
    goto LABEL_258;
  }
  unint64_t v35 = v34;
  if (v34 > v32) {
    goto LABEL_258;
  }
  LODWORD(v36) = v33;
  if (a8 | a5)
  {
    uint64_t v37 = a2;
    unint64_t v38 = a10;
    int v39 = a11;
  }
  else
  {
    unint64_t v94 = 0;
    if (!Pool_LookupSizeBucket((uint64_t)v91, v33, &v94)
      || (uint64_t v41 = *(void *)(v19 + 200),
          uint64_t v36 = *(void *)(v41 + 8 * v94),
          !Pool_LookupSizeBucket((uint64_t)v91, v35, &v94)))
    {
      a2 = a2;
      goto LABEL_258;
    }
    unint64_t v35 = *(void *)(v41 + 8 * v94);
    int v39 = a11;
    unint64_t v38 = a10;
    uint64_t v37 = a2;
  }
  if (a5) {
    int v42 = a3;
  }
  else {
    int v42 = v36;
  }
  if (a5) {
    int v43 = a4;
  }
  else {
    int v43 = v35;
  }
  *(_DWORD *)bytes = v42;
  *(_DWORD *)&bytes[4] = v43;
  *(_DWORD *)&bytes[8] = v36;
  *(_DWORD *)&bytes[12] = v35;
  HIDWORD(v96) = v38;
  unint64_t v30 = v38;
  a2 = v37;
  LODWORD(v96) = v37;
  *(void *)((char *)&v96 + 4) = __PAIR64__(v92, v39);
  int v29 = v39;
  CFAllocatorRef v44 = CFGetAllocator((CFTypeRef)v19);
  CFDataRef v45 = CFDataCreate(v44, bytes, 32);
  if (!v45) {
    goto LABEL_258;
  }
  CFDataRef v46 = v45;
  if (pthread_mutex_lock(*(pthread_mutex_t **)(v19 + 312)))
  {
    CFRelease(v46);
LABEL_258:
    unint64_t v14 = v86;
LABEL_259:
    uint64_t v40 = *(void *)(v19 + 304);
    goto LABEL_260;
  }
  CFArrayRef Value = (uint64_t *)CFDictionaryGetValue(*(CFDictionaryRef *)(v19 + 192), v46);
  unint64_t v14 = v86;
  if (!Value)
  {
    unint64_t v48 = (char *)malloc_type_calloc(1uLL, 0x58uLL, 0x10A00402736B2FBuLL);
    CFArrayRef Value = (uint64_t *)v48;
    if (v48)
    {
      *(void *)unint64_t v48 = 0;
      *((void *)v48 + 1) = v48;
      long long v49 = v96;
      *(_OWORD *)(v48 + 56) = *(_OWORD *)bytes;
      *(_OWORD *)(v48 + 72) = v49;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(v19 + 192), v46, v48);
    }
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(v19 + 312));
  CFRelease(v46);
  if (!Value) {
    goto LABEL_259;
  }
  uint64_t v28 = pthread_mutex_lock(*(pthread_mutex_t **)(v19 + 312));
  if (v28) {
    goto LABEL_294;
  }
  uint64_t BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(a2);
  uint64_t v51 = *Value;
  if (!*Value)
  {
LABEL_118:
    uint64_t v55 = CMPhotoGetBytesPerPixelForPixelFormat(a2);
    uint64_t v56 = CMPhotoAlignValue(v55 * *((unsigned int *)Value + 16), v92);
    unint64_t v57 = 0;
    if ((int)a2 <= 1734504495)
    {
      if ((int)a2 <= 1380401728)
      {
        if ((int)a2 <= 875836533)
        {
          if ((int)a2 > 875704421)
          {
            if ((int)a2 > 875704933)
            {
              if (a2 != 875704934 && a2 != 875704950)
              {
                int v58 = 875836518;
                goto LABEL_251;
              }
LABEL_253:
              unint64_t v57 = 2 * v56 * *((unsigned int *)Value + 17);
              goto LABEL_229;
            }
            if (a2 != 875704422)
            {
              int v63 = 875704438;
LABEL_197:
              if (a2 != v63) {
                goto LABEL_229;
              }
            }
LABEL_213:
            unint64_t v57 = (((*((_DWORD *)Value + 17) + 1) >> 1) + (unint64_t)*((unsigned int *)Value + 17))
                * v56;
            goto LABEL_229;
          }
          if ((int)a2 <= 825306676)
          {
            if (a2 != 16 && a2 != 32) {
              goto LABEL_229;
            }
            goto LABEL_228;
          }
          if (a2 == 825306677)
          {
LABEL_228:
            unint64_t v57 = v56 * *((unsigned int *)Value + 17);
            goto LABEL_229;
          }
          int v60 = 825437747;
LABEL_227:
          if (a2 != v60) {
            goto LABEL_229;
          }
          goto LABEL_228;
        }
        if ((int)a2 > 1278226735)
        {
          if ((a2 - 1278226736) <= 6 && ((1 << (a2 - 48)) & 0x45) != 0) {
            goto LABEL_228;
          }
          int v60 = 1278555701;
          goto LABEL_227;
        }
        if ((a2 - 1278226488) <= 0x30 && ((1 << (a2 - 56)) & 0x1400000000001) != 0) {
          goto LABEL_228;
        }
        if (a2 != 875836534)
        {
          int v60 = 1111970369;
          goto LABEL_227;
        }
LABEL_252:
        unint64_t v57 = 3 * v56 * *((unsigned int *)Value + 17);
        goto LABEL_229;
      }
      if ((int)a2 <= 1650946097)
      {
        if ((int)a2 <= 1647589489)
        {
          if ((int)a2 > 1380411456)
          {
            if (a2 == 1380411457) {
              goto LABEL_228;
            }
            int v60 = 1647392369;
          }
          else
          {
            if (a2 == 1380401729) {
              goto LABEL_228;
            }
            int v60 = 1380410945;
          }
        }
        else if ((int)a2 <= 1650942775)
        {
          if (a2 == 1647589490) {
            goto LABEL_228;
          }
          int v60 = 1647719528;
        }
        else
        {
          if (a2 == 1650942776 || a2 == 1650943796) {
            goto LABEL_228;
          }
          int v60 = 1650946096;
        }
        goto LABEL_227;
      }
      if ((int)a2 <= 1651926375)
      {
        if ((int)a2 > 1651847471)
        {
          if (a2 == 1651847472) {
            goto LABEL_228;
          }
          int v60 = 1651925816;
        }
        else
        {
          if (a2 == 1650946098) {
            goto LABEL_228;
          }
          int v60 = 1651519798;
        }
        goto LABEL_227;
      }
      if ((int)a2 <= 1717855599)
      {
        if (a2 == 1651926376) {
          goto LABEL_228;
        }
        int v60 = 1652056888;
        goto LABEL_227;
      }
      if (a2 == 1717855600 || a2 == 1717856627) {
        goto LABEL_228;
      }
      unsigned __int16 v62 = 25400;
LABEL_176:
      int v60 = v62 | 0x67620000;
      goto LABEL_227;
    }
    if ((int)a2 <= 1936077875)
    {
      if ((int)a2 <= 1815491697)
      {
        if ((int)a2 > 1735553071)
        {
          if ((int)a2 <= 1751411058)
          {
            if (a2 == 1735553072) {
              goto LABEL_228;
            }
            int v60 = 1751410032;
          }
          else
          {
            if (a2 == 1751411059) {
              goto LABEL_228;
            }
            if (a2 == 1751527984) {
              goto LABEL_213;
            }
            int v60 = 1815162994;
          }
          goto LABEL_227;
        }
        if ((int)a2 > 1735549491)
        {
          if (a2 == 1735549492) {
            goto LABEL_228;
          }
          int v60 = 1735549752;
          goto LABEL_227;
        }
        if (a2 == 1734504496) {
          goto LABEL_228;
        }
        unsigned __int16 v62 = 29236;
        goto LABEL_176;
      }
      if ((int)a2 > 1919379251)
      {
        if ((int)a2 > 1932996148)
        {
          if (a2 == 1932996149) {
            goto LABEL_228;
          }
          if (a2 == 1936077360) {
            goto LABEL_213;
          }
          int v61 = 1936077362;
          goto LABEL_211;
        }
        if (a2 == 1919379252) {
          goto LABEL_228;
        }
        unsigned __int16 v64 = 28720;
LABEL_224:
        int v60 = v64 | 0x72670000;
        goto LABEL_227;
      }
      if ((int)a2 > 1919365991)
      {
        if (a2 == 1919365992) {
          goto LABEL_252;
        }
        unsigned __int16 v64 = 25400;
        goto LABEL_224;
      }
      if (a2 == 1815491698) {
        goto LABEL_228;
      }
      int v58 = 1919365990;
LABEL_251:
      if (a2 == v58) {
        goto LABEL_252;
      }
LABEL_229:
      unint64_t v90 = v57;
      Pool_Cleanup(v91, *(void *)(v19 + 224) - v57, *(void *)(v19 + 248) - 1, 0, 0);
      LODWORD(v59) = 0;
      goto LABEL_230;
    }
    if ((int)a2 > 1953903667)
    {
      if ((int)a2 <= 2019963439)
      {
        if ((int)a2 <= 2016686641)
        {
          if (a2 != 1953903668)
          {
            int v63 = 2016686640;
            goto LABEL_197;
          }
          goto LABEL_252;
        }
        if (a2 == 2016686642) {
          goto LABEL_253;
        }
        int v58 = 2016687156;
        goto LABEL_251;
      }
      if ((int)a2 > 2019963955)
      {
        if (a2 != 2019963956)
        {
          if (a2 == 2037741158) {
            goto LABEL_228;
          }
          int v60 = 2037741171;
          goto LABEL_227;
        }
        goto LABEL_252;
      }
      if (a2 == 2019963440) {
        goto LABEL_213;
      }
      int v61 = 2019963442;
    }
    else
    {
      if ((int)a2 <= 1952854575)
      {
        if ((int)a2 <= 1937125937)
        {
          if (a2 != 1936077876)
          {
            int v63 = 1937125936;
            goto LABEL_197;
          }
          goto LABEL_252;
        }
        if (a2 == 1937125938) {
          goto LABEL_253;
        }
        int v58 = 1937126452;
        goto LABEL_251;
      }
      if ((int)a2 <= 1952855091)
      {
        if (a2 == 1952854576) {
          goto LABEL_213;
        }
        int v61 = 1952854578;
      }
      else
      {
        if (a2 == 1952855092) {
          goto LABEL_252;
        }
        if (a2 == 1953903152) {
          goto LABEL_213;
        }
        int v61 = 1953903154;
      }
    }
LABEL_211:
    if (a2 != v61) {
      goto LABEL_229;
    }
    goto LABEL_253;
  }
  uint64_t v52 = BytesPerPixelForPixelFormat;
  while (1)
  {
    if (!*(unsigned char *)(v51 + 72) && IOSurfaceIsInUse(*(IOSurfaceRef *)v51)) {
      goto LABEL_111;
    }
    unint64_t v53 = *(void *)(v51 + 24);
    if (a8) {
      break;
    }
    if (!(v53 % v92)) {
      goto LABEL_114;
    }
LABEL_111:
    uint64_t v51 = *(void *)(v51 + 40);
    if (!v51) {
      goto LABEL_118;
    }
  }
  uint64_t v54 = *(void *)(v51 + 32);
  if (v53 != v52 * *(unsigned int *)(v54 + 64) || *(_DWORD *)(v54 + 76) != v29) {
    goto LABEL_111;
  }
LABEL_114:
  Pool_MarkBufferAsUsed((uint64_t)v91, (uint64_t)Value, v51);
  IOSurfaceRef buffer = *(IOSurfaceRef *)v51;
  *(void *)(v19 + 384) = dispatch_time(0, 0);
  *(unsigned char *)(v19 + 392) = 0;
  if (*(void *)(v19 + 352))
  {
    objc_msgSend(*(id *)(v19 + 352), "takeAssertionUntilTime:forContext:", dispatch_time(0, 15000000000), v19);
    [*(id *)(v19 + 352) registerBackgroundNotificationHandlerForContext:v19 handler:*(void *)(v19 + 360)];
  }
  if (*(unsigned char *)(v19 + 320))
  {
    dispatch_resume(*(dispatch_object_t *)(v19 + 328));
    unint64_t v90 = 0;
    *(unsigned char *)(v19 + 320) = 0;
  }
  else
  {
    unint64_t v90 = 0;
  }
  LODWORD(v59) = 1;
LABEL_230:
  pthread_mutex_unlock(*(pthread_mutex_t **)(v19 + 312));
  int v65 = buffer;
  if (v59)
  {
    if (buffer)
    {
      BOOL v66 = CMPhotoUsePurgeableIOSurfaces();
      int v65 = buffer;
      if (v66)
      {
        unint64_t v67 = IOSurfaceSetPurgeable(buffer, 0, 0);
        int v65 = buffer;
        if (v67)
        {
          SurfacePool_DetachSurface(v19, buffer, 1);
          CFRelease(buffer);
          LOBYTE(v59) = 0;
          IOSurfaceRef buffer = 0;
          goto LABEL_241;
        }
      }
    }
  }
  unint64_t v68 = v59 ^ 1;
  if (!v65) {
    unint64_t v68 = 1;
  }
  if (v68)
  {
LABEL_240:
    if (!v65) {
      goto LABEL_241;
    }
  }
  else
  {
    unint64_t v69 = (const __CFString *)*MEMORY[0x1E4F2F128];
    CFTypeRef v59 = IOSurfaceCopyValue(v65, (CFStringRef)*MEMORY[0x1E4F2F128]);
    IOSurfaceRemoveAllValues(buffer);
    if (v59)
    {
      IOSurfaceSetValue(buffer, v69, v59);
      CFRelease(v59);
      LOBYTE(v59) = 1;
      int v65 = buffer;
      goto LABEL_240;
    }
    LOBYTE(v59) = 1;
    if (!buffer)
    {
LABEL_241:
      uint64_t v28 = pthread_mutex_lock(*(pthread_mutex_t **)(v19 + 312));
      if (v28) {
        goto LABEL_294;
      }
      CFAllocatorRef v70 = *(void *)(v19 + 288);
      v71 = *(void *)(v19 + 280) + v90;
      pthread_mutex_unlock(*(pthread_mutex_t **)(v19 + 312));
      if (v71 > *(void *)(v19 + 224) && *(unsigned char *)(v19 + 297)
        || v70 >= *(void *)(v19 + 248) && *(unsigned char *)(v19 + 296))
      {
LABEL_255:
        uint64_t v28 = FigSignalErrorAt();
        goto LABEL_294;
      }
    }
  }
LABEL_270:
  CFMutableDictionaryRef v75 = buffer;
  if (!buffer)
  {
    CFMutableDictionaryRef v76 = v87;
    uint64_t v77 = (uint64_t)(Value + 7);
    uint64_t v78 = (uint64_t)Value + 60;
    unint64_t v79 = v91[8].i64[1];
    goto LABEL_274;
  }
LABEL_291:
  *a13 = v75;
  IOSurfaceRef buffer = 0;
  CFMutableArrayRef v73 = 0;
  v72 = 0;
  if (a14) {
    *a14 = (_BYTE)v59;
  }
LABEL_293:
  free(v73);
  return v72;
}

uint64_t CMPhotoGetBytesPerPixelForPixelFormat(int a1)
{
  if (a1 > 1651925815)
  {
    if (a1 > 1932996148)
    {
      if (a1 <= 1953903153)
      {
        if (a1 > 1937125937)
        {
          if (a1 > 1952854577)
          {
            if (a1 == 1952854578 || a1 == 1952855092) {
              return 2;
            }
            int v1 = 1953903152;
          }
          else
          {
            if (a1 == 1937125938 || a1 == 1937126452) {
              return 2;
            }
            int v1 = 1952854576;
          }
          goto LABEL_105;
        }
        if (a1 > 1936077361)
        {
          if (a1 == 1936077362 || a1 == 1936077876) {
            return 2;
          }
          int v1 = 1937125936;
          goto LABEL_105;
        }
        if (a1 != 1932996149)
        {
          int v1 = 1936077360;
          goto LABEL_105;
        }
      }
      else
      {
        if (a1 <= 2019963441)
        {
          if (a1 > 2016686641)
          {
            if (a1 == 2016686642 || a1 == 2016687156) {
              return 2;
            }
            int v1 = 2019963440;
          }
          else
          {
            if (a1 == 1953903154 || a1 == 1953903668) {
              return 2;
            }
            int v1 = 2016686640;
          }
LABEL_105:
          if (a1 == v1) {
            return 2;
          }
          return 1;
        }
        if (a1 <= 2037741170)
        {
          if (a1 == 2019963442 || a1 == 2019963956) {
            return 2;
          }
          int v1 = 2037741158;
          goto LABEL_105;
        }
        if (a1 != 2037741171) {
          return 1;
        }
      }
      return 2;
    }
    if (a1 <= 1751527983)
    {
      if (a1 > 1734501175)
      {
        if (a1 > 1735549751)
        {
          if (a1 == 1735549752) {
            return 1;
          }
          if (a1 != 1751410032)
          {
            int v1 = 1751411059;
            goto LABEL_105;
          }
        }
        else
        {
          if (a1 == 1734501176) {
            return 1;
          }
          if (a1 != 1734505012)
          {
            int v1 = 1735549492;
            goto LABEL_105;
          }
        }
        return 2;
      }
      if (a1 <= 1652056887)
      {
        if (a1 != 1651925816)
        {
          int v1 = 1651926376;
          goto LABEL_105;
        }
        return 1;
      }
      if (a1 == 1652056888) {
        return 1;
      }
      if (a1 == 1717855600) {
        return 4;
      }
      int v2 = 1717856627;
      goto LABEL_110;
    }
    if (a1 > 1885745711)
    {
      if (a1 <= 1919378231)
      {
        if (a1 != 1885745712)
        {
          if (a1 != 1919365990)
          {
            int v1 = 1919365992;
            goto LABEL_105;
          }
          return 4;
        }
        return 0;
      }
      if (a1 == 1919378232) {
        return 1;
      }
      if (a1 == 1919379252) {
        return 2;
      }
      int v3 = 1919381552;
      return a1 != v3;
    }
    if (a1 <= 1815361649)
    {
      if (a1 == 1751527984) {
        return 2;
      }
      int v2 = 1815162994;
LABEL_110:
      if (a1 != v2) {
        return 1;
      }
      return 4;
    }
    if (a1 != 1815361650)
    {
      if (a1 != 1815491698)
      {
        int v3 = 1882468912;
        return a1 != v3;
      }
      return 8;
    }
    return 6;
  }
  if (a1 > 875836533)
  {
    if (a1 <= 1380401728)
    {
      if (a1 <= 1278226735)
      {
        if (a1 > 1278226487)
        {
          if (a1 == 1278226488) {
            return 1;
          }
          if (a1 != 1278226534)
          {
            int v1 = 1278226536;
            goto LABEL_105;
          }
          return 4;
        }
        if (a1 == 875836534) {
          return 1;
        }
        int v2 = 1111970369;
      }
      else
      {
        if (a1 <= 1278555700)
        {
          if ((a1 - 1278226736) <= 6 && ((1 << (a1 - 48)) & 0x45) != 0) {
            return 2;
          }
          return 1;
        }
        if (a1 == 1278555701 || a1 == 1279340600) {
          return 2;
        }
        int v2 = 1279340854;
      }
      goto LABEL_110;
    }
    if (a1 > 1647719527)
    {
      if (a1 <= 1650946097)
      {
        if (a1 != 1647719528)
        {
          if (a1 != 1650942776)
          {
            int v1 = 1650943796;
            goto LABEL_105;
          }
          return 1;
        }
        return 2;
      }
      if (a1 != 1650946098)
      {
        if (a1 != 1651519798)
        {
          int v1 = 1651847472;
          goto LABEL_105;
        }
        return 2;
      }
      return 0;
    }
    if (a1 > 1380411456)
    {
      if (a1 == 1380411457) {
        return 8;
      }
      if (a1 == 1647392369) {
        return 2;
      }
      if (a1 != 1647589490) {
        return 1;
      }
      return 6;
    }
    if (a1 == 1380401729) {
      return 4;
    }
    if (a1 != 1380410945) {
      return 1;
    }
    return 16;
  }
  else
  {
    if (a1 > 792225327)
    {
      if (a1 <= 843264309)
      {
        if (a1 > 825306676)
        {
          if (a1 == 825306677 || a1 == 825437747) {
            return 2;
          }
          int v1 = 843264056;
          goto LABEL_105;
        }
        return 1;
      }
      if (a1 != 843264310) {
        return 1;
      }
      return 4;
    }
    if (a1 >= 641230384) {
      return 1;
    }
    if (a1 == 16) {
      return 2;
    }
    if (a1 != 24)
    {
      if (a1 != 32) {
        return 1;
      }
      return 4;
    }
    return 3;
  }
}

unint64_t CMPhotoPaddedSizeFromImageSizeAndBlockSize(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return a3 + a1 + ~((a1 - 1) % a3);
}

uint64_t Pool_LookupSizeBucket(uint64_t a1, unint64_t a2, unint64_t *a3)
{
  int v3 = *(unint64_t **)(a1 + 32);
  if (*v3 >= a2)
  {
    unint64_t v4 = 0;
  }
  else
  {
    unint64_t v4 = *(void *)(a1 + 40) - 1;
    if (v3[v4] < a2) {
      return 0;
    }
    if (v4 >= 2)
    {
      unint64_t v6 = 0;
      do
      {
        if (v3[(v4 + v6) >> 1] >= a2) {
          unint64_t v4 = (v4 + v6) >> 1;
        }
        else {
          unint64_t v6 = (v4 + v6) >> 1;
        }
      }
      while (v4 - v6 > 1);
    }
  }
  *a3 = v4;
  return 1;
}

int64x2_t Pool_InsertNewBuffer(int64x2_t *a1, void *a2, uint64_t a3)
{
  if (*(void *)a3) {
    CFRetain(*(CFTypeRef *)a3);
  }
  *(unsigned char *)(a3 + 72) = 0;
  *(void *)(a3 + 40) = 0;
  unint64_t v6 = (void *)a2[1];
  *(void *)(a3 + 48) = v6;
  *unint64_t v6 = a3;
  a2[1] = a3 + 40;
  *(void *)(a3 + 56) = 0;
  uint64_t v7 = (void *)a1->i64[1];
  *(void *)(a3 + 64) = v7;
  *uint64_t v7 = a3;
  a1->i64[1] = a3 + 56;
  int64x2_t v8 = vdupq_n_s64(1uLL);
  v8.i64[0] = *(void *)(a3 + 8);
  int64x2_t result = vaddq_s64(a1[7], v8);
  a1[7] = result;
  ++a2[3];
  ++a2[5];
  return result;
}

uint64_t CMPhotoSmallestNumGreaterThanAndDivisibleBy(uint64_t result, uint64_t a2)
{
  if (a2 + result != (a2 + result) / a2 * a2) {
    return (a2 + result) / a2 * a2;
  }
  return result;
}

uint64_t CMPhotoCreateImageSurface(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7, int a8, unsigned __int8 a9, uint64_t a10, unint64_t a11, uint64_t a12, __IOSurface **a13)
{
  CFTypeRef value = 0;
  CFDictionaryRef properties = 0;
  if (!a13) {
    return 4294950306;
  }
  uint64_t v13 = _createImageSurfacePropertiesAndName(a1, a2, a3, a4, a5, a6, a7, a8, a9, &properties, &value);
  if (v13)
  {
    uint64_t v17 = v13;
  }
  else
  {
    if (!a10)
    {
LABEL_6:
      if (_getMarkSurfacesNonPurgeable_onceToken != -1) {
        dispatch_once(&_getMarkSurfacesNonPurgeable_onceToken, &__block_literal_global_37);
      }
      if (_getMarkSurfacesNonPurgeable_markSurfacesNonPurgeable == 1) {
        CMPhotoCFDictionarySetBoolean(properties, (const void *)*MEMORY[0x1E4F2F130], 1);
      }
      if (a12) {
        CMPhotoCFDictionarySetInt64(properties, (const void *)*MEMORY[0x1E4F2EFC0], a12);
      }
      unint64_t v14 = IOSurfaceCreate(properties);
      if (v14)
      {
        unint64_t v15 = v14;
        if (a10) {
          int v16 = @"CMPhoto Wrapped";
        }
        else {
          int v16 = (__CFString *)value;
        }
        IOSurfaceSetValue(v14, (CFStringRef)*MEMORY[0x1E4F2F128], v16);
        if (_getShouldSetSurfaceOwnership()) {
          IOSurfaceSetOwnership();
        }
        uint64_t v17 = 0;
        *a13 = v15;
      }
      else
      {
        uint64_t v17 = 4294950305;
      }
      goto LABEL_19;
    }
    unint64_t v19 = 0;
    CMPhotoCFDictionaryGetSizeIfPresent(properties, (const void *)*MEMORY[0x1E4F2EFB8], &v19);
    if (v19 <= a11)
    {
      FigCFDictionarySetInt64();
      goto LABEL_6;
    }
    uint64_t v17 = 4294950306;
  }
LABEL_19:
  if (properties) {
    CFRelease(properties);
  }
  if (value) {
    CFRelease(value);
  }
  return v17;
}

uint64_t _getShouldSetSurfaceOwnership()
{
  if (_getShouldSetSurfaceOwnership_onceToken != -1) {
    dispatch_once(&_getShouldSetSurfaceOwnership_onceToken, &__block_literal_global_20);
  }
  if (_getMarkSurfacesNonPurgeable_onceToken != -1) {
    dispatch_once(&_getMarkSurfacesNonPurgeable_onceToken, &__block_literal_global_37);
  }
  return _getShouldSetSurfaceOwnership_setOwnership & ~_getMarkSurfacesNonPurgeable_markSurfacesNonPurgeable & 1;
}

const void *Pool_MarkBufferAsUsed(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 40);
  unint64_t v6 = *(void **)(a3 + 48);
  if (v5)
  {
    *(void *)(v5 + 48) = v6;
    unint64_t v6 = *(void **)(a3 + 48);
  }
  else
  {
    *(void *)(a2 + 8) = v6;
  }
  *unint64_t v6 = v5;
  uint64_t v7 = *(void **)(a2 + 8);
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = v7;
  *uint64_t v7 = a3;
  *(void *)(a2 + 8) = a3 + 40;
  uint64_t v8 = *(void *)(a3 + 56);
  uint64_t v9 = *(void **)(a3 + 64);
  if (v8)
  {
    *(void *)(v8 + 64) = v9;
    uint64_t v9 = *(void **)(a3 + 64);
  }
  else
  {
    *(void *)(a1 + 8) = v9;
  }
  void *v9 = v8;
  unint64_t v10 = *(void **)(a1 + 8);
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = v10;
  *unint64_t v10 = a3;
  *(void *)(a1 + 8) = a3 + 56;
  IOSurfaceIncrementUseCount(*(IOSurfaceRef *)a3);
  *(unsigned char *)(a3 + 72) = 0;
  int64x2_t result = *(const void **)a3;
  if (*(void *)a3) {
    int64x2_t result = CFRetain(result);
  }
  ++*(void *)(a2 + 32);
  return result;
}

uint64_t CMPhotoCreateMemorySurface(unint64_t a1, int a2, int a3, uint64_t a4, unint64_t a5, uint64_t a6, __IOSurface **a7)
{
  if (a1 >> 31 || a4 && a1 > a5)
  {
    return FigSignalErrorAt();
  }
  else
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!Mutable) {
      return 4294950305;
    }
    unint64_t v14 = Mutable;
    CMPhotoCFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E4F2EFE8], 0);
    CMPhotoCFDictionarySetInt32(v14, (const void *)*MEMORY[0x1E4F2F150], a2);
    CMPhotoCFDictionarySetSize(v14, *MEMORY[0x1E4F2EFB8], a1);
    if (_getMarkSurfacesNonPurgeable_onceToken != -1) {
      dispatch_once(&_getMarkSurfacesNonPurgeable_onceToken, &__block_literal_global_37);
    }
    if (_getMarkSurfacesNonPurgeable_markSurfacesNonPurgeable == 1) {
      CMPhotoCFDictionarySetBoolean(v14, (const void *)*MEMORY[0x1E4F2F130], 1);
    }
    CMPhotoCFDictionarySetInt(v14, (const void *)*MEMORY[0x1E4F2F100], a3);
    if (a4) {
      FigCFDictionarySetInt64();
    }
    if (a6) {
      CMPhotoCFDictionarySetInt64(v14, (const void *)*MEMORY[0x1E4F2EFC0], a6);
    }
    unint64_t v15 = IOSurfaceCreate(v14);
    if (v15)
    {
      int v16 = v15;
      if (a4) {
        uint64_t v17 = @"CMPhoto Wrapped Memory Surface";
      }
      else {
        uint64_t v17 = @"CMPhoto Memory Surface";
      }
      IOSurfaceSetValue(v15, (CFStringRef)*MEMORY[0x1E4F2F128], v17);
      if (_getShouldSetSurfaceOwnership()) {
        IOSurfaceSetOwnership();
      }
      if (a7)
      {
        uint64_t v18 = 0;
        *a7 = v16;
      }
      else
      {
        CFRelease(v16);
        uint64_t v18 = 0;
      }
    }
    else
    {
      uint64_t v18 = 4294950305;
    }
    CFRelease(v14);
    return v18;
  }
}

void _destroyAuxMetadataCache(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32))
  {
    int v2 = *(const void **)(a1 + 64);
    if (v2)
    {
      CFRelease(v2);
      *(void *)(a1 + 64) = 0;
    }
    int v3 = *(const void **)(a1 + 56);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(a1 + 56) = 0;
    }
    *(unsigned char *)(a1 + 32) = 0;
  }
}

uint64_t VTTileDecompressionPluginClass_VideoToolbox_callback(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, char a8)
{
  uint64_t v13 = (unsigned char *)a1[8];
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  if ((a8 & 2) != 0) {
    unsigned int v14 = -17104;
  }
  else {
    unsigned int v14 = a7;
  }
  if (v14)
  {
    *uint64_t v13 = 1;
    if ((v14 | 2) == 0x44E) {
      uint64_t v15 = 4294951826;
    }
    else {
      uint64_t v15 = v14;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  int v16 = (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t))a1[6];
  uint64_t v17 = a1[7];
  return v16(a1, v15, a5, v17, a2);
}

uint64_t CMPhotoPixelBufferAttributesGetExtendedPixels(const __CFDictionary *a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  CMPhotoCFDictionaryGetSizeIfPresent(a1, (const void *)*MEMORY[0x1E4F24CE0], &v14);
  CMPhotoCFDictionaryGetSizeIfPresent(a1, (const void *)*MEMORY[0x1E4F24CE8], &v13);
  CMPhotoCFDictionaryGetSizeIfPresent(a1, (const void *)*MEMORY[0x1E4F24CF0], &v12);
  uint64_t result = CMPhotoCFDictionaryGetSizeIfPresent(a1, (const void *)*MEMORY[0x1E4F24CD0], &v11);
  if (a2) {
    *a2 = v14;
  }
  if (a3) {
    *a3 = v13;
  }
  if (a4) {
    *a4 = v12;
  }
  if (a5) {
    *a5 = v11;
  }
  return result;
}

uint64_t _convertAndScalePixelBuffer(uint64_t a1, CVPixelBufferRef pixelBuffer, int a3, int a4, OSType a5, uint64_t a6, int a7, int a8, double PixelBufferCLAPAsRect, CGFloat a10, CGFloat a11, CGFloat a12, double a13, double a14, double a15, double a16, double a17, double a18, double a19, double a20,uint64_t a21,unsigned __int8 a22,unsigned __int8 a23,unsigned __int8 a24,unsigned int a25,const void **a26)
{
  pixelTransferSessionOut[4] = *(VTPixelTransferSessionRef *)MEMORY[0x1E4F143B8];
  uint64_t v144 = *a26;
  CVBufferRef buffer = 0;
  CFTypeRef v156 = v144;
  propertyCFArrayRef Value = 0;
  CFTypeRef cf = 0;
  int v151 = -1;
  int v152 = 0;
  if (!pixelBuffer
    || ((double v25 = *MEMORY[0x1E4F1DB30], v26 = *(double *)(MEMORY[0x1E4F1DB30] + 8), a13 == *MEMORY[0x1E4F1DB30])
      ? (BOOL v27 = a14 == v26)
      : (BOOL v27 = 0),
        v27))
  {
    CFMutableDictionaryRef v75 = 0;
    int v65 = 0;
    CFDictionaryRef DictionaryRepresentation = 0;
    CFMutableDictionaryRef v76 = 0;
    uint64_t v39 = 4294950306;
    goto LABEL_67;
  }
  uint64_t v37 = pixelBuffer;
  uint64_t v38 = CMPhotoPixelBufferConvertYCbCrIdentityMatrixToRGB(*(const void **)(a1 + 16), a3, pixelBuffer, (CVPixelBufferRef *)&cf);
  if (v38)
  {
    uint64_t v39 = v38;
    if (v38 != -16997)
    {
      CFMutableDictionaryRef v75 = 0;
      int v65 = 0;
      CFDictionaryRef DictionaryRepresentation = 0;
      goto LABEL_66;
    }
  }
  else
  {
    uint64_t v37 = (__CVBuffer *)cf;
  }
  double v138 = v26;
  double v139 = v25;
  double v40 = a19;
  double v41 = a20;
  double v42 = a17;
  double v43 = a18;
  v158.origin.x = PixelBufferCLAPAsRect;
  v158.origin.y = a10;
  v158.size.width = a11;
  v158.size.height = a12;
  int v143 = a8;
  if (CGRectIsNull(v158))
  {
    double PixelBufferCLAPAsRect = CMPhotoGetPixelBufferCLAPAsRect(v37);
    a10 = v44;
    a11 = v45;
    a12 = v46;
  }
  v159.origin.x = PixelBufferCLAPAsRect;
  v159.origin.y = a10;
  v159.size.width = a11;
  v159.size.height = a12;
  CFDictionaryRef DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v159);
  if (v156)
  {
    v160.origin.x = a17;
    v160.origin.y = a18;
    v160.size.width = a19;
    v160.size.height = a20;
    if (CGRectIsNull(v160))
    {
      double v42 = CMPhotoGetPixelBufferCLAPAsRect((__CVBuffer *)v156);
      double v43 = v48;
      double v40 = v49;
      double v41 = v50;
    }
  }
  uint64_t PixelBufferCLAPDictionaryFromRect = CMPhotoHEIFRotationCCWAndMirroringFromExifOrientation(a4, &v152, &v151);
  if (PixelBufferCLAPDictionaryFromRect)
  {
LABEL_65:
    uint64_t v39 = PixelBufferCLAPDictionaryFromRect;
    CFMutableDictionaryRef v75 = 0;
    int v65 = 0;
LABEL_66:
    CFMutableDictionaryRef v76 = 0;
LABEL_67:
    int v77 = 1;
    int v142 = 1;
LABEL_68:
    uint64_t v78 = v144;
    goto LABEL_187;
  }
  *(void *)uint64_t v141 = a6;
  CFDictionaryRef v148 = DictionaryRepresentation;
  uint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(v37);
  if (v152) {
    BOOL v53 = 0;
  }
  else {
    BOOL v53 = v151 == -1;
  }
  char v54 = v53;
  if (!v53)
  {
    IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(v37);
    if (!a7 && a11 <= 4092.0 && a12 <= 4092.0)
    {
      double v67 = a14 / a12;
      if (a13 / a11 >= 0.25 && v67 >= 0.25)
      {
        if (!a23 && a3 && IOSurface
          || (a13 / a11 == 1.0 ? (BOOL v69 = v67 == 1.0) : (BOOL v69 = 0),
              v69 ? (BOOL v70 = PixelFormatType == a5) : (BOOL v70 = 0),
              v70))
        {
          CFMutableDictionaryRef v76 = 0;
          int v65 = 0;
          BOOL v63 = 1;
          int v140 = 1;
          goto LABEL_128;
        }
      }
    }
    size_t v71 = vcvtad_u64_f64(a13);
    size_t v72 = vcvtad_u64_f64(a14);
    unint64_t v73 = 2 * (v143 == 0);
    if (a3)
    {
      uint64_t v74 = CMPhotoSurfacePoolCreatePixelBuffer(*(const void **)(a1 + 16), a5, v71, v72, v143, v73, v73, v143 == 0, a21, 0, &buffer);
      if (v74)
      {
LABEL_61:
        uint64_t v39 = v74;
        CFMutableDictionaryRef v75 = 0;
        int v65 = 0;
        CFMutableDictionaryRef v76 = 0;
        int v77 = 1;
        int v142 = 1;
LABEL_62:
        uint64_t v78 = v144;
        CFDictionaryRef DictionaryRepresentation = v148;
        goto LABEL_187;
      }
    }
    else
    {
      int valuea = a7;
      char v83 = v54;
      size_t v84 = v71;
      size_t v85 = v72;
      if (!v143)
      {
        size_t v84 = CMPhotoAlignValue(v71, 2uLL);
        size_t v85 = CMPhotoAlignValue(v72, 2uLL);
      }
      uint64_t v74 = CMPhotoCreateCVPixelBufferNotBackedByIOSurface(*MEMORY[0x1E4F1CF80], a5, v84, v85, v73, v73, a21, 0, &buffer);
      if (v74) {
        goto LABEL_61;
      }
      BOOL v27 = v84 == v71;
      char v54 = v83;
      a7 = valuea;
      if (!v27 || v85 != v72) {
        CMPhotoSetPixelBufferCLAP(buffer, 0, 0, v71, v72, 0, 1);
      }
    }
  }
  CVBufferRef destinationBuffer = 0;
  uint64_t v55 = buffer;
  if (buffer)
  {
    char v134 = v54;
LABEL_25:
    CVBufferRef destinationBuffer = v55;
    CFStringRef v56 = (const __CFString *)*MEMORY[0x1E4F24A78];
    propertyCFArrayRef Value = CVBufferCopyAttachment(v55, (CFStringRef)*MEMORY[0x1E4F24A78], 0);
    CFDictionaryRef DictionaryRepresentation = v148;
    goto LABEL_26;
  }
  if (!v156)
  {
    size_t v86 = vcvtad_u64_f64(a13);
    size_t v87 = vcvtad_u64_f64(a14);
    unint64_t v88 = 2 * (v143 == 0);
    if (a3)
    {
      CVPixelBufferNotBackedByIOSurfaceRef IOSurface = CMPhotoSurfacePoolCreatePixelBuffer(*(const void **)(a1 + 16), a5, v86, v87, v143, v88, v88, v143 == 0, a21, 0, (CVPixelBufferRef *)&v156);
      if (CVPixelBufferNotBackedByIOSurface)
      {
LABEL_236:
        uint64_t v39 = CVPixelBufferNotBackedByIOSurface;
        int v65 = 0;
        CFMutableDictionaryRef v76 = 0;
        int v142 = 1;
        uint64_t v78 = v144;
        CFDictionaryRef DictionaryRepresentation = v148;
        goto LABEL_221;
      }
    }
    else
    {
      int valueb = a7;
      char v131 = v54;
      size_t v132 = v86;
      size_t v133 = v87;
      if (!v143)
      {
        size_t v132 = CMPhotoAlignValue(v86, 2uLL);
        size_t v133 = CMPhotoAlignValue(v87, 2uLL);
      }
      CVPixelBufferNotBackedByIOSurfaceRef IOSurface = CMPhotoCreateCVPixelBufferNotBackedByIOSurface(*MEMORY[0x1E4F1CF80], a5, v132, v133, v88, v88, a21, 0, (CVPixelBufferRef *)&v156);
      if (CVPixelBufferNotBackedByIOSurface) {
        goto LABEL_236;
      }
      BOOL v27 = v132 == v86;
      char v54 = v131;
      a7 = valueb;
      if (!v27 || v133 != v87) {
        CMPhotoSetPixelBufferCLAP((__CVBuffer *)v156, 0, 0, v86, v87, 0, 1);
      }
    }
    char v134 = v54;
    uint64_t v55 = (__CVBuffer *)v156;
    goto LABEL_25;
  }
  CVBufferRef destinationBuffer = (CVBufferRef)v156;
  double PixelBufferSize = CMPhotoGetPixelBufferSize((__CVBuffer *)v156);
  double v81 = v80;
  CFAllocatorRef v82 = CFGetAllocator((CFTypeRef)a1);
  uint64_t PixelBufferCLAPDictionaryFromRect = CMPhotoCreatePixelBufferCLAPDictionaryFromRect(v82, (__CFDictionary **)&propertyValue, PixelBufferSize, v81, v42, v43, v40, v41);
  CFDictionaryRef DictionaryRepresentation = v148;
  if (PixelBufferCLAPDictionaryFromRect) {
    goto LABEL_65;
  }
  char v134 = v54;
  CFStringRef v56 = (const __CFString *)*MEMORY[0x1E4F24A78];
LABEL_26:
  CFTypeRef value = CVBufferCopyAttachment(destinationBuffer, v56, 0);
  CFTypeRef v57 = propertyValue;
  int IsAGXCompressed = CMPhotoPixelFormatIsAGXCompressed(PixelFormatType);
  int IsFullRange = CMPhotoPixelFormatIsFullRange(PixelFormatType);
  BOOL v63 = a5 != 875836518 && v57 == 0 && a5 != 1111970369 && (IsFullRange | IsAGXCompressed) == 0;
  pixelTransferSessionOut[0] = 0;
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL);
  if (v63)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 24));
    if (CFArrayGetCount(*(CFArrayRef *)(a1 + 40)) <= 0)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 24));
    }
    else
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), 0);
      if (ValueAtIndex) {
        int v65 = (OpaqueVTPixelTransferSession *)CFRetain(ValueAtIndex);
      }
      else {
        int v65 = 0;
      }
      pixelTransferSessionOut[0] = v65;
      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 40), 0);
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 24));
      if (v65) {
        goto LABEL_94;
      }
    }
  }
  uint64_t v90 = VTPixelTransferSessionCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], pixelTransferSessionOut);
  if (v90)
  {
    uint64_t v39 = v90;
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
    if (pixelTransferSessionOut[0]) {
      CFRelease(pixelTransferSessionOut[0]);
    }
    int v142 = v63;
    int v65 = 0;
    goto LABEL_220;
  }
  if (_disableGPUForTransfer_onceToken != -1) {
    dispatch_once(&_disableGPUForTransfer_onceToken, &__block_literal_global_17);
  }
  if (_disableMSRForTransfer_onceToken != -1) {
    dispatch_once(&_disableMSRForTransfer_onceToken, &__block_literal_global_11);
  }
  unint64_t v91 = (const void *)*MEMORY[0x1E4F1CFC8];
  if (a3) {
    v92 = (const void *)*MEMORY[0x1E4F1CFD0];
  }
  else {
    v92 = (const void *)*MEMORY[0x1E4F1CFC8];
  }
  VTSessionSetProperty(pixelTransferSessionOut[0], (CFStringRef)*MEMORY[0x1E4F45120], v92);
  if (!a3) {
    VTSessionSetProperty(pixelTransferSessionOut[0], (CFStringRef)*MEMORY[0x1E4F45118], v91);
  }
  VTSessionSetProperty(pixelTransferSessionOut[0], (CFStringRef)*MEMORY[0x1E4F45168], (CFTypeRef)*MEMORY[0x1E4F45450]);
  VTSessionSetProperty(pixelTransferSessionOut[0], (CFStringRef)*MEMORY[0x1E4F45188], v91);
  int v65 = pixelTransferSessionOut[0];
LABEL_94:
  uint64_t v93 = VTSessionSetProperty(v65, (CFStringRef)*MEMORY[0x1E4F450D8], propertyValue);
  if (v93) {
    goto LABEL_219;
  }
  unint64_t v94 = (v141[0] - 1) > 2 ? 0 : (const void *)**((void **)&unk_1E5E2E258 + v141[0] - 1);
  int v95 = a7;
  uint64_t v96 = (v141[1] - 1) > 3 ? 0 : (const void *)**((void **)&unk_1E5E2E270 + v141[1] - 1);
  unint64_t v97 = (v95 - 1) > 2 ? 0 : (const void *)**((void **)&unk_1E5E2E290 + v95 - 1);
  uint64_t v93 = VTSessionSetProperty(v65, (CFStringRef)*MEMORY[0x1E4F450E0], v94);
  if (v93
    || (uint64_t v93 = VTSessionSetProperty(v65, (CFStringRef)*MEMORY[0x1E4F450F8], v96), v93)
    || (uint64_t v93 = VTSessionSetProperty(v65, (CFStringRef)*MEMORY[0x1E4F45100], v97), v93)
    || (uint64_t v93 = VTSessionSetProperty(v65, (CFStringRef)*MEMORY[0x1E4F45170], DictionaryRepresentation), v93))
  {
LABEL_219:
    uint64_t v39 = v93;
    int v142 = v63;
LABEL_220:
    uint64_t v78 = v144;
    CFMutableDictionaryRef v76 = value;
LABEL_221:
    CFMutableDictionaryRef v75 = 0;
    int v77 = 1;
    goto LABEL_187;
  }
  CMPhotoAddChromaLocationToPixelBufferAccordingToFormat(a25, a25, destinationBuffer);
  LOBYTE(pixelTransferSessionOut[0]) = 0;
  uint64_t v98 = CMPhotoVTPixelTransferSetHWAndSWAndGPUProperties(v65, a22, a23, a24, a3, pixelTransferSessionOut, a11, a12, a13, a14);
  if (v98)
  {
    uint64_t v39 = v98;
LABEL_226:
    int v142 = v63;
    CFMutableDictionaryRef v75 = 0;
    int v77 = 1;
    uint64_t v78 = v144;
    CFMutableDictionaryRef v76 = value;
    goto LABEL_187;
  }
  if (LOBYTE(pixelTransferSessionOut[0])) {
    BOOL v63 = 0;
  }
  uint64_t v99 = VTPixelTransferSessionTransferImage(v65, v37, destinationBuffer);
  if (v99 == -12905)
  {
    uint64_t v100 = CVPixelBufferGetPixelFormatType(destinationBuffer);
    uint64_t v39 = CMPhotoVTPixelTransferWorkaround(v37, v100, 0, 1, a3, a22, a23, a24, *MEMORY[0x1E4F1DB20], *(CGFloat *)(MEMORY[0x1E4F1DB20] + 8), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 16), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 24), v139, v138, &destinationBuffer);
    BOOL v63 = 0;
  }
  else
  {
    uint64_t v39 = v99;
  }
  if (v39) {
    goto LABEL_226;
  }
  _removeYCbCrMatrixFromBufferIfNeeded(destinationBuffer);
  if (CMPhotoPixelBufferContainsYCbCr(destinationBuffer))
  {
    if (!v97)
    {
      CFStringRef v101 = (const __CFString *)*MEMORY[0x1E4F24C18];
      CFTypeRef v102 = CVBufferCopyAttachment(v37, (CFStringRef)*MEMORY[0x1E4F24C18], 0);
      if (v102)
      {
        v103 = v102;
        CVBufferSetAttachment(destinationBuffer, v101, v102, kCVAttachmentMode_ShouldPropagate);
        CFRelease(v103);
      }
    }
  }
  if (!v96)
  {
    CFStringRef v104 = (const __CFString *)*MEMORY[0x1E4F24BC8];
    CFTypeRef v105 = CVBufferCopyAttachment(v37, (CFStringRef)*MEMORY[0x1E4F24BC8], 0);
    if (v105)
    {
      BOOL v106 = v105;
      CVBufferSetAttachment(destinationBuffer, v104, v105, kCVAttachmentMode_ShouldPropagate);
      CFRelease(v106);
    }
  }
  CFMutableDictionaryRef v76 = value;
  if (value) {
    CVBufferSetAttachment(destinationBuffer, v56, value, kCVAttachmentMode_ShouldPropagate);
  }
  else {
    CMPhotoRemovePixelBufferCLAP(destinationBuffer);
  }
  if (v134)
  {
    int v142 = v63;
    CFMutableDictionaryRef v75 = 0;
    int v77 = 1;
    uint64_t v78 = v144;
LABEL_186:
    uint64_t v39 = 0;
    *a26 = v156;
    CFTypeRef v156 = 0;
    goto LABEL_187;
  }
  int v140 = 0;
LABEL_128:
  v161.origin.x = v42;
  v161.origin.y = v43;
  v161.size.width = v40;
  v161.size.height = v41;
  if (CGRectIsNull(v161))
  {
    if (v152 == 90)
    {
      double v40 = a14;
      double v41 = a13;
    }
    else
    {
      double v41 = a13;
      if (v152 == 270)
      {
        double v40 = a14;
      }
      else
      {
        double v40 = a13;
        double v41 = a14;
      }
    }
  }
  pixelTransferSessionOut[0] = 0;
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 56), 0xFFFFFFFFFFFFFFFFLL);
  CFArrayRef v107 = *(const __CFArray **)(a1 + 64);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  int v142 = v63;
  if (CFArrayGetCount(v107) <= 0)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  }
  else
  {
    v108 = CFArrayGetValueAtIndex(v107, 0);
    if (v108) {
      CFMutableDictionaryRef v75 = (OpaqueVTPixelTransferSession *)CFRetain(v108);
    }
    else {
      CFMutableDictionaryRef v75 = 0;
    }
    pixelTransferSessionOut[0] = v75;
    CFArrayRemoveValueAtIndex(v107, 0);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
    if (v75) {
      goto LABEL_142;
    }
  }
  uint64_t v109 = VTPixelRotationSessionCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], pixelTransferSessionOut);
  if (v109)
  {
    uint64_t v39 = v109;
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 56));
    if (pixelTransferSessionOut[0]) {
      CFRelease(pixelTransferSessionOut[0]);
    }
    CFMutableDictionaryRef v75 = 0;
    goto LABEL_224;
  }
  CFMutableDictionaryRef v75 = pixelTransferSessionOut[0];
LABEL_142:
  unint64_t v110 = (OpaqueVTPixelTransferSession *)*MEMORY[0x1E4F45358];
  pixelTransferSessionOut[0] = *(VTPixelTransferSessionRef *)MEMORY[0x1E4F45348];
  pixelTransferSessionOut[1] = v110;
  unint64_t v111 = (OpaqueVTPixelTransferSession *)*MEMORY[0x1E4F45360];
  pixelTransferSessionOut[2] = *(VTPixelTransferSessionRef *)MEMORY[0x1E4F45350];
  pixelTransferSessionOut[3] = v111;
  uint64_t v112 = VTSessionSetProperty(v75, (CFStringRef)*MEMORY[0x1E4F450C0], pixelTransferSessionOut[((11651 * ((__int16)v152 % 360)) >> 20)+ ((11651 * ((__int16)v152 % 360)) >> 31)]);
  if (v112) {
    goto LABEL_223;
  }
  unint64_t v113 = (const void *)*MEMORY[0x1E4F1CFD0];
  unint64_t v114 = (const void *)*MEMORY[0x1E4F1CFC8];
  unint64_t v115 = (const void *)(v151 ? *MEMORY[0x1E4F1CFC8] : *MEMORY[0x1E4F1CFD0]);
  uint64_t v112 = VTSessionSetProperty(v75, (CFStringRef)*MEMORY[0x1E4F450A0], v115);
  if (v112
    || (v151 != 1 ? (CFAllocatorRef v116 = v114) : (CFAllocatorRef v116 = v113),
        (uint64_t v112 = VTSessionSetProperty(v75, (CFStringRef)*MEMORY[0x1E4F45098], v116), v112)
     || (!a23 ? (BOOL v117 = a22 == 0) : (BOOL v117 = 1),
         v117 ? (v118 = v114) : (v118 = v113),
         uint64_t v112 = VTSessionSetProperty(v75, (CFStringRef)*MEMORY[0x1E4F45088], v118),
         v112)))
  {
LABEL_223:
    uint64_t v39 = v112;
LABEL_224:
    int v77 = 1;
    goto LABEL_68;
  }
  if (_disableMSRForTransfer_onceToken != -1) {
    dispatch_once(&_disableMSRForTransfer_onceToken, &__block_literal_global_11);
  }
  BOOL v119 = a3 == 0;
  if (v119 | a23)
  {
    uint64_t v120 = VTSessionSetProperty(v75, (CFStringRef)*MEMORY[0x1E4F45080], v114);
    if (v120)
    {
      uint64_t v39 = v120;
      int v77 = 1;
      goto LABEL_62;
    }
    int v77 = 0;
  }
  else
  {
    int v77 = 1;
  }
  if (_disableGPUForTransfer_onceToken != -1) {
    dispatch_once(&_disableGPUForTransfer_onceToken, &__block_literal_global_17);
  }
  if (v119 | a24)
  {
    uint64_t v121 = VTSessionSetProperty(v75, (CFStringRef)*MEMORY[0x1E4F45078], v114);
    if (v121)
    {
LABEL_231:
      uint64_t v39 = v121;
      goto LABEL_62;
    }
    int v77 = 0;
  }
  if (!v156)
  {
    size_t v122 = vcvtad_u64_f64(v40);
    size_t v123 = vcvtad_u64_f64(v41);
    unint64_t v124 = 2 * (v143 == 0);
    if (a3)
    {
      uint64_t v121 = CMPhotoSurfacePoolCreatePixelBuffer(*(const void **)(a1 + 16), a5, v122, v123, v143, v124, v124, v143 == 0, a21, 0, (CVPixelBufferRef *)&v156);
      if (v121) {
        goto LABEL_231;
      }
    }
    else
    {
      size_t v125 = v122;
      size_t v126 = v123;
      if (!v143)
      {
        size_t v125 = CMPhotoAlignValue(v122, 2uLL);
        size_t v126 = CMPhotoAlignValue(v123, 2uLL);
      }
      size_t v149 = v126;
      uint64_t v121 = CMPhotoCreateCVPixelBufferNotBackedByIOSurface(*MEMORY[0x1E4F1CF80], a5, v125, v126, v124, v124, a21, 0, (CVPixelBufferRef *)&v156);
      if (v121) {
        goto LABEL_231;
      }
      if (v125 != v122 || v149 != v123) {
        CMPhotoSetPixelBufferCLAP((__CVBuffer *)v156, 0, 0, v122, v123, 0, 1);
      }
    }
  }
  if ((v140 & 1) == 0) {
    CMPhotoGetPixelBufferCLAPAsRect(buffer);
  }
  uint64_t v127 = VTPixelRotationSessionRotateSubImage();
  uint64_t v78 = v144;
  CFDictionaryRef DictionaryRepresentation = v148;
  if (!v127)
  {
    _removeYCbCrMatrixFromBufferIfNeeded((__CVBuffer *)v156);
    if (v140) {
      CFMutableDictionaryRef v128 = v37;
    }
    else {
      CFMutableDictionaryRef v128 = buffer;
    }
    CMPhotoPropagateColorPropertiesFromSourceBuffer(v128, (__CVBuffer *)v156);
    goto LABEL_186;
  }
  uint64_t v39 = v127;
LABEL_187:
  if (cf) {
    CFRelease(cf);
  }
  if (buffer) {
    CFRelease(buffer);
  }
  if (propertyValue) {
    CFRelease(propertyValue);
  }
  if (v76) {
    CFRelease(v76);
  }
  if (!v78 && v156) {
    CFRelease(v156);
  }
  if (DictionaryRepresentation) {
    CFRelease(DictionaryRepresentation);
  }
  if (v75)
  {
    if (v77)
    {
      unint64_t v129 = *(__CFArray **)(a1 + 64);
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
      CFArrayInsertValueAtIndex(v129, 0, v75);
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
    }
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 56));
    CFRelease(v75);
  }
  if (v65)
  {
    if (v142)
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 24));
      CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(a1 + 40), 0, v65);
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 24));
    }
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
    CFRelease(v65);
  }
  return v39;
}

uint64_t CMPhotoSurfacePoolCreatePixelBuffer(const void *a1, uint64_t a2, size_t a3, size_t a4, int a5, unint64_t a6, unint64_t a7, int a8, uint64_t a9, const __CFDictionary *a10, CVPixelBufferRef *a11)
{
  return CMPhotoSurfacePoolCreatePixelBufferAndReportOrigin(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0);
}

uint64_t CMPhotoSurfacePoolCreatePixelBufferAndReportOrigin(const void *a1, uint64_t a2, size_t a3, size_t a4, int a5, unint64_t a6, unint64_t a7, int a8, uint64_t a9, const __CFDictionary *a10, CVPixelBufferRef *a11, unsigned char *a12)
{
  IOSurfaceRef buffer = 0;
  CVPixelBufferRef pixelBufferOut = 0;
  if (CMPhotoPixelFormatIsLossyCompressed(a2) || CMPhotoPixelFormatIsAGXCompressed(a2))
  {
    CFGetAllocator(a1);
    CFDictionaryRef MutableCopy = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
    if (MutableCopy)
    {
      if (a6 <= 1) {
        unint64_t v21 = 1;
      }
      else {
        unint64_t v21 = a6;
      }
      unint64_t v22 = CMPhotoPaddedSizeFromImageSizeAndBlockSize(a3, a4, v21);
      unint64_t v24 = v22;
      uint64_t v25 = v23;
      if (a9 || v22 != a3 || v23 != a4)
      {
        size_t v42 = 0;
        unint64_t v43 = 0;
        uint64_t v26 = *MEMORY[0x1E4F24CE8];
        CMPhotoCFDictionaryGetSizeIfPresent(MutableCopy, (const void *)*MEMORY[0x1E4F24CE8], &v43);
        uint64_t v27 = *MEMORY[0x1E4F24CD0];
        CMPhotoCFDictionaryGetSizeIfPresent(MutableCopy, (const void *)*MEMORY[0x1E4F24CD0], &v42);
        size_t v28 = v43 <= v24 - a3 ? v24 - a3 : v43;
        size_t v29 = v42 <= v25 - a4 ? v25 - a4 : v42;
        CMPhotoCFDictionarySetSize(MutableCopy, v26, v28);
        CMPhotoCFDictionarySetSize(MutableCopy, v27, v29);
        if (a9) {
          CMPhotoCFDictionarySetSize(MutableCopy, *MEMORY[0x1E4F24C98], a9);
        }
      }
      CFAllocatorRef v30 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionaryAddValue(MutableCopy, (const void *)*MEMORY[0x1E4F24D20], Mutable);
      uint64_t v32 = CVPixelBufferCreate(v30, a3, a4, a2, MutableCopy, &pixelBufferOut);
      if (!v32)
      {
        if (a12) {
          *a12 = 0;
        }
        goto LABEL_32;
      }
      uint64_t v39 = v32;
      if (Mutable) {
LABEL_33:
      }
        CFRelease(Mutable);
    }
    else
    {
      uint64_t v39 = 4294950305;
    }
  }
  else
  {
    unint64_t v43 = 0;
    CMPhotoCFDictionaryGetSizeIfPresent(a10, (const void *)*MEMORY[0x1E4F24D78], &v43);
    if (!a1)
    {
      pthread_once(&CMPhotoSurfacePoolGetDefault_onceToken, _once_CMPhotoSurfacePoolGetDefault);
      a1 = (const void *)defaultSurfacePool;
    }
    uint64_t v33 = CMPhotoSurfacePoolCreateImageSurfaceWithAlignment((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8, a9, v43, 1, 0, &buffer, a12);
    if (!v33)
    {
      CFAllocatorRef v34 = CFGetAllocator(a1);
      uint64_t v33 = CMPhotoCreatePixelBufferWithSurface(v34, buffer, a10, &pixelBufferOut);
      if (!v33)
      {
        if (!a5)
        {
          double PixelBufferSize = CMPhotoGetPixelBufferSize(pixelBufferOut);
          unint64_t v37 = vcvtad_u64_f64(v36);
          if (vcvtad_u64_f64(PixelBufferSize) != a3 || v37 != a4) {
            CMPhotoSetPixelBufferCLAP(pixelBufferOut, 0, 0, a3, a4, 0, 1);
          }
        }
        CFMutableDictionaryRef Mutable = 0;
        CFDictionaryRef MutableCopy = 0;
LABEL_32:
        uint64_t v39 = 0;
        *a11 = pixelBufferOut;
        CVPixelBufferRef pixelBufferOut = 0;
        if (!Mutable) {
          goto LABEL_34;
        }
        goto LABEL_33;
      }
    }
    uint64_t v39 = v33;
    CFDictionaryRef MutableCopy = 0;
  }
LABEL_34:
  IOSurfaceRef v40 = buffer;
  if (buffer)
  {
    IOSurfaceDecrementUseCount(buffer);
    CFRelease(v40);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (pixelBufferOut) {
    CFRelease(pixelBufferOut);
  }
  return v39;
}

uint64_t CMPhotoCFDictionaryGetSizeIfPresent(const __CFDictionary *a1, const void *a2, void *a3)
{
  uint64_t v6 = 0;
  int Int64IfPresent = CMPhotoCFDictionaryGetInt64IfPresent(a1, a2, &v6);
  uint64_t result = 0;
  if (a3)
  {
    if (Int64IfPresent)
    {
      *a3 = v6;
      return 1;
    }
  }
  return result;
}

uint64_t CMPhotoCFDictionaryGetInt64IfPresent(CFDictionaryRef theDict, const void *a2, void *a3)
{
  uint64_t result = 0;
  CFTypeRef value = 0;
  if (theDict)
  {
    if (a2)
    {
      if (a3)
      {
        uint64_t result = CFDictionaryGetValueIfPresent(theDict, a2, (const void **)&value);
        if (result)
        {
          CFTypeID TypeID = CFNumberGetTypeID();
          if (TypeID == CFGetTypeID(value))
          {
            CFNumberGetValue((CFNumberRef)value, kCFNumberSInt64Type, a3);
            return 1;
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t CMPhotoPixelFormatIsAGXCompressed(int a1)
{
  uint64_t result = 1;
  if (a1 <= 645101103)
  {
    if (a1 > 642527535)
    {
      if ((a1 - 642527536) <= 6 && ((1 << (a1 - 48)) & 0x45) != 0
        || (a1 - 645097008) <= 4 && ((1 << (a1 - 48)) & 0x15) != 0)
      {
        return result;
      }
      int v4 = 644624754;
    }
    else
    {
      if ((a1 - 641230384) <= 4 && ((1 << (a1 - 48)) & 0x15) != 0
        || (a1 - 641234480) <= 4 && ((1 << (a1 - 48)) & 0x15) != 0)
      {
        return result;
      }
      int v4 = 642527288;
    }
    if (a1 == v4) {
      return result;
    }
    return 0;
  }
  if (a1 <= 645166639)
  {
    if ((a1 - 645101104) <= 4 && ((1 << (a1 - 48)) & 0x15) != 0) {
      return result;
    }
    int v3 = -645162544;
  }
  else
  {
    if ((a1 - 645166640) <= 4 && ((1 << (a1 - 48)) & 0x15) != 0
      || (a1 - 645424688) <= 4 && ((1 << (a1 - 48)) & 0x15) != 0)
    {
      return result;
    }
    int v3 = -645428784;
  }
  unsigned int v5 = a1 + v3;
  if (v5 > 4 || ((1 << v5) & 0x15) == 0) {
    return 0;
  }
  return result;
}

BOOL CMPhotoPixelFormatIsLossyCompressed(int a1)
{
  return CMPhotoPixelFormatIsLossyCompressed50(a1)
      || CMPhotoPixelFormatIsLossyCompressed62(a1)
      || CMPhotoPixelFormatIsLossyCompressed75(a1) != 0;
}

uint64_t CMPhotoPixelFormatIsLossyCompressed75(int a1)
{
  uint64_t result = 1;
  if (a1 > 762865199)
  {
    if (a1 > 762869295)
    {
      if (a1 == 762869296) {
        return result;
      }
      unsigned __int16 v3 = 30258;
    }
    else
    {
      if (a1 == 762865200) {
        return result;
      }
      unsigned __int16 v3 = 26162;
    }
    int v4 = v3 | 0x2D780000;
    goto LABEL_11;
  }
  if (a1 != 758670896 && a1 != 758674992)
  {
    int v4 = 759967800;
LABEL_11:
    if (a1 != v4) {
      return 0;
    }
  }
  return result;
}

uint64_t CMPhotoPixelFormatIsLossyCompressed62(int a1)
{
  uint64_t result = 1;
  if (a1 > 796419631)
  {
    if (a1 > 796423727)
    {
      if (a1 == 796423728) {
        return result;
      }
      unsigned __int16 v3 = 30258;
    }
    else
    {
      if (a1 == 796419632) {
        return result;
      }
      unsigned __int16 v3 = 26162;
    }
    int v4 = v3 | 0x2F780000;
    goto LABEL_11;
  }
  if (a1 != 792225328 && a1 != 792229424)
  {
    int v4 = 793522232;
LABEL_11:
    if (a1 != v4) {
      return 0;
    }
  }
  return result;
}

uint64_t CMPhotoPixelFormatIsLossyCompressed50(int a1)
{
  uint64_t result = 1;
  if (a1 > 2088265263)
  {
    if (a1 > 2088269359)
    {
      if (a1 == 2088269360) {
        return result;
      }
      unsigned __int16 v3 = 30258;
    }
    else
    {
      if (a1 == 2088265264) {
        return result;
      }
      unsigned __int16 v3 = 26162;
    }
    int v4 = v3 | 0x7C780000;
    goto LABEL_11;
  }
  if (a1 != 2084070960 && a1 != 2084075056)
  {
    int v4 = 2085367864;
LABEL_11:
    if (a1 != v4) {
      return 0;
    }
  }
  return result;
}

uint64_t CMPhotoSurfacePoolMarkCachesVolatile(uint64_t a1, int a2)
{
  uint64_t result = CMPhotoUsePurgeableIOSurfaces();
  if (result)
  {
    if (!a1)
    {
      uint64_t result = pthread_once(&CMPhotoSurfacePoolGetDefault_onceToken, _once_CMPhotoSurfacePoolGetDefault);
      a1 = defaultSurfacePool;
    }
    if ((__CFString *)a1 != @"SurfacePoolOneShot")
    {
      uint64_t result = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 312));
      if (!result)
      {
        Pool_Cleanup((int64x2_t *)(a1 + 24), *(void *)(a1 + 80), *(void *)(a1 + 104), 0, a2);
        Pool_Cleanup((int64x2_t *)(a1 + 168), *(void *)(a1 + 224), *(void *)(a1 + 248), 0, a2);
        unsigned int v5 = *(pthread_mutex_t **)(a1 + 312);
        return pthread_mutex_unlock(v5);
      }
    }
  }
  return result;
}

uint64_t CMPhotoSurfacePoolGetDefault()
{
  return defaultSurfacePool;
}

uint64_t CMPhotoCreatePixelBufferWithSurface(const __CFAllocator *a1, IOSurfaceRef buffer, const __CFDictionary *a3, CVPixelBufferRef *a4)
{
  if (IOSurfaceGetPixelFormat(buffer) == 1380401729)
  {
    if (a3) {
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(a1, 0, a3);
    }
    else {
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    }
    unint64_t v10 = MutableCopy;
    if (MutableCopy)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (Mutable)
      {
        uint64_t v12 = Mutable;
        CFDictionarySetValue(v10, (const void *)*MEMORY[0x1E4F24D68], Mutable);
        CMPhotoCFDictionarySetInt32(v12, (const void *)*MEMORY[0x1E4F24E90], 1380401729);
        CMPhotoCFDictionarySetInt(v12, (const void *)*MEMORY[0x1E4F24E18], 32);
        CFDataRef v13 = CFDataCreate(a1, CMPhotoCreatePixelBufferWithSurface_kBlack_32RGBA, 4);
        if (v13)
        {
          CFDataRef v14 = v13;
          CFDictionarySetValue(v12, (const void *)*MEMORY[0x1E4F24E28], v13);
          uint64_t v15 = CVPixelBufferCreateWithIOSurface(a1, buffer, v10, a4);
          CFRelease(v10);
          CFRelease(v12);
          CFRelease(v14);
          return v15;
        }
        CFRelease(v10);
        int v16 = v12;
      }
      else
      {
        int v16 = v10;
      }
      CFRelease(v16);
    }
    return 4294950305;
  }
  else
  {
    return CVPixelBufferCreateWithIOSurface(a1, buffer, a3, a4);
  }
}

uint64_t CMPhotoPixelFormatIsFullRange(uint64_t a1)
{
  int UncompressedPixelFormatFromCompressedPixelFormat = CMPhotoGetUncompressedPixelFormatFromCompressedPixelFormat(a1);
  if (UncompressedPixelFormatFromCompressedPixelFormat == 1278555701) {
    return 1;
  }
  if (UncompressedPixelFormatFromCompressedPixelFormat == 1380401729) {
    return 1;
  }
  DescriptionWithuint64_t PixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
  if (!DescriptionWithPixelFormatType
    || !CFDictionaryGetValue(DescriptionWithPixelFormatType, (const void *)*MEMORY[0x1E4F24E50]))
  {
    return 1;
  }
  return FigCFEqual();
}

uint64_t CMPhotoGetUncompressedPixelFormatFromCompressedPixelFormat(uint64_t result)
{
  if ((int)result > 645428783)
  {
    if ((int)result > 792872768)
    {
      if ((int)result <= 2084075055)
      {
        if ((int)result <= 796419633)
        {
          if (result != 792872769)
          {
            if (result != 793522232)
            {
              int v9 = 796419632;
              goto LABEL_70;
            }
            return 1278226488;
          }
          return 1111970369;
        }
        if ((int)result <= 796423729)
        {
          if (result == 796419634) {
            return 2019963442;
          }
          if (result != 796423728) {
            return result;
          }
          return 2016686640;
        }
        if (result != 796423730)
        {
          if (result != 2084070960) {
            return result;
          }
          return 875704422;
        }
        return 2016686642;
      }
      if ((int)result <= 2088265263)
      {
        if (result != 2084075056)
        {
          if (result != 2084718401)
          {
            if (result != 2085367864) {
              return result;
            }
            return 1278226488;
          }
          return 1111970369;
        }
        return 875704438;
      }
      if ((int)result <= 2088269359)
      {
        if (result == 2088265264) {
          return 2019963440;
        }
        int v10 = 2088265266;
        goto LABEL_78;
      }
      if (result == 2088269360) {
        return 2016686640;
      }
      int v8 = 2088269362;
LABEL_120:
      if (result != v8) {
        return result;
      }
      return 2016686642;
    }
    if ((int)result <= 759967799)
    {
      if ((int)result <= 758670895)
      {
        if (result == 645428784) {
          return 2016686640;
        }
        if (result != 645428786)
        {
          BOOL v15 = result == 645428788;
          unsigned int v16 = 2016687156;
          goto LABEL_114;
        }
        return 2016686642;
      }
      if (result == 758670896) {
        return 875704422;
      }
      if (result != 758674992)
      {
        if (result != 759318337) {
          return result;
        }
        return 1111970369;
      }
    }
    else
    {
      if ((int)result <= 762869295)
      {
        if (result == 759967800) {
          return 1278226488;
        }
        if (result == 762865200) {
          return 2019963440;
        }
        int v10 = 762865202;
LABEL_78:
        if (result != v10) {
          return result;
        }
        return 2019963442;
      }
      if ((int)result <= 792225327)
      {
        if (result == 762869296) {
          return 2016686640;
        }
        int v8 = 762869298;
        goto LABEL_120;
      }
      if (result == 792225328) {
        return 875704422;
      }
      if (result != 792229424) {
        return result;
      }
    }
    return 875704438;
  }
  if ((int)result > 645097009)
  {
    if ((int)result <= 645162547)
    {
      if ((int)result > 645101105)
      {
        int v1 = 645162543;
        if (result == 645162546) {
          int v2 = 1952854578;
        }
        else {
          int v2 = result;
        }
        if (result == 645162544) {
          unsigned int v3 = 1952854576;
        }
        else {
          unsigned int v3 = v2;
        }
        if (result == 645101108) {
          int v4 = 1937126452;
        }
        else {
          int v4 = result;
        }
        if (result == 645101106) {
          unsigned int v5 = 1937125938;
        }
        else {
          unsigned int v5 = v4;
        }
LABEL_38:
        if ((int)result <= v1) {
          return v5;
        }
        else {
          return v3;
        }
      }
      int v17 = 645097010;
      unsigned int v18 = 1936077362;
      if (result == 645101104) {
        unsigned int v19 = 1937125936;
      }
      else {
        unsigned int v19 = result;
      }
      if (result == 645097012) {
        unsigned int v19 = 1936077876;
      }
      goto LABEL_87;
    }
    if ((int)result <= 645166643)
    {
      int v17 = 645162548;
      unsigned int v18 = 1952855092;
      if (result == 645166642) {
        int v20 = 1953903154;
      }
      else {
        int v20 = result;
      }
      if (result == 645166640) {
        unsigned int v19 = 1953903152;
      }
      else {
        unsigned int v19 = v20;
      }
LABEL_87:
      if (result == v17) {
        return v18;
      }
      else {
        return v19;
      }
    }
    if ((int)result <= 645424689)
    {
      if (result == 645166644) {
        return 1953903668;
      }
      int v9 = 645424688;
LABEL_70:
      if (result != v9) {
        return result;
      }
      return 2019963440;
    }
    if (result != 645424690)
    {
      BOOL v15 = result == 645424692;
      unsigned int v16 = 2019963956;
LABEL_114:
      if (v15) {
        return v16;
      }
      else {
        return result;
      }
    }
    return 2019963442;
  }
  if ((int)result > 641877824)
  {
    if ((int)result > 642527537)
    {
      int v1 = 644624753;
      if (result == 645097008) {
        int v6 = 1936077360;
      }
      else {
        int v6 = result;
      }
      if (result == 644624754) {
        unsigned int v3 = 1815162994;
      }
      else {
        unsigned int v3 = v6;
      }
      if (result == 642527542) {
        int v7 = 1278226742;
      }
      else {
        int v7 = result;
      }
      if (result == 642527538) {
        unsigned int v5 = 1278226738;
      }
      else {
        unsigned int v5 = v7;
      }
      goto LABEL_38;
    }
    if (result != 641877825)
    {
      if (result != 642527288)
      {
        BOOL v15 = result == 642527536;
        unsigned int v16 = 1278226736;
        goto LABEL_114;
      }
      return 1278226488;
    }
    return 1111970369;
  }
  if ((int)result > 641234479)
  {
    if (result != 641234480)
    {
      int v11 = 641234482;
      unsigned int v12 = 875704950;
      BOOL v13 = result == 641234484;
      unsigned int v14 = 875836534;
      goto LABEL_96;
    }
    return 875704438;
  }
  if (result == 641230384) {
    return 875704422;
  }
  int v11 = 641230386;
  unsigned int v12 = 875704934;
  BOOL v13 = result == 641230388;
  unsigned int v14 = 875836518;
LABEL_96:
  if (!v13) {
    unsigned int v14 = result;
  }
  if (result == v11) {
    return v12;
  }
  else {
    return v14;
  }
}

void CMPhotoAddChromaLocationToPixelBufferAccordingToFormat(unsigned int a1, unsigned int a2, __CVBuffer *a3)
{
  if (a2 != -1 && a1 != -1 && a3)
  {
    CFBooleanRef PixelBufferDescriptionKey = (const __CFBoolean *)_getPixelBufferDescriptionKey(a3, (const void *)*MEMORY[0x1E4F24EB8]);
    unsigned int Value = CMPhotoCFBooleanGetValue(PixelBufferDescriptionKey);
    uint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(a3);
    int ChromaSubsamplingFromPixelFormat = CMPhotoGetChromaSubsamplingFromPixelFormat(PixelFormatType);
    if (Value && ChromaSubsamplingFromPixelFormat == 5)
    {
      _setChromaLocationAttachmentToBuffer(1, a1, a3);
      _setChromaLocationAttachmentToBuffer(0, a2, a3);
    }
  }
}

uint64_t CMPhotoRemovePixelBufferCLAP(__CVBuffer *a1)
{
  if (a1) {
    CVBufferRemoveAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24A78]);
  }
  return 0;
}

uint64_t CMPhotoHEIFRotationCCWAndMirroringFromExifOrientation(int a1, _DWORD *a2, int *a3)
{
  int v3 = a1 - 2;
  if ((a1 - 2) > 6)
  {
    int v4 = 0;
    int v5 = -1;
    if (!a2) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v4 = dword_1AB9E2618[v3];
  int v5 = dword_1AB9E2634[v3];
  if (a2) {
LABEL_5:
  }
    *a2 = v4;
LABEL_6:
  if (a3) {
    *a3 = v5;
  }
  return 0;
}

uint64_t CMPhotoPixelBufferConvertYCbCrIdentityMatrixToRGB(const void *a1, int a2, CVPixelBufferRef pixelBuffer, CVPixelBufferRef *a4)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  signed int PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  CVPixelBufferRef pixelBuffera = 0;
  double PixelBufferSize = CMPhotoGetPixelBufferSize(pixelBuffer);
  if (!a4) {
    return 4294950306;
  }
  double v11 = PixelBufferSize;
  double v12 = v10;
  *a4 = 0;
  if (CMPhotoPixelBufferHasUnhandledIdentityMatrix(pixelBuffer))
  {
    uint64_t v13 = 1815491698;
    if (PixelFormatType > 1952855091)
    {
      if (PixelFormatType == 1952855092) {
        goto LABEL_13;
      }
      if (PixelFormatType == 2019963956)
      {
        uint64_t v13 = 1815162994;
        goto LABEL_13;
      }
    }
    else
    {
      switch(PixelFormatType)
      {
        case 875836518:
          uint64_t v13 = 1111970369;
          goto LABEL_13;
        case 1936077876:
          goto LABEL_13;
        case 0:
          uint64_t v14 = FigSignalErrorAt();
LABEL_55:
          uint64_t v46 = v14;
          goto LABEL_52;
      }
    }
    uint64_t v13 = 0;
LABEL_13:
    size_t v15 = (unint64_t)v11;
    size_t v16 = (unint64_t)v12;
    if (a2)
    {
      uint64_t v14 = CMPhotoSurfacePoolCreatePixelBuffer(a1, v13, v15, v16, 1, 0, 0, 0, 0, 0, &pixelBuffera);
      if (v14) {
        goto LABEL_55;
      }
    }
    else
    {
      uint64_t v14 = CMPhotoCreateCVPixelBufferNotBackedByIOSurface(*MEMORY[0x1E4F1CF80], v13, v15, v16, 0, 0, 0, 0, &pixelBuffera);
      if (v14) {
        goto LABEL_55;
      }
    }
    uint64_t v14 = CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
    if (v14) {
      goto LABEL_55;
    }
    uint64_t v17 = CVPixelBufferLockBaseAddress(pixelBuffera, 0);
    if (v17)
    {
      uint64_t v46 = v17;
LABEL_50:
      unint64_t v47 = pixelBuffer;
      CVPixelBufferLockFlags v48 = 1;
LABEL_51:
      CVPixelBufferUnlockBaseAddress(v47, v48);
      goto LABEL_52;
    }
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    v52[0] = 0;
    v52[1] = 0;
    v51[0] = 0;
    v51[1] = 0;
    uint64_t PixelBufferDataPointers = CMPhotoGetPixelBufferDataPointers(pixelBuffer, 0, 0, 0, (uint64_t)&v55, (uint64_t)&v53, 0);
    if (PixelBufferDataPointers
      || (uint64_t PixelBufferDataPointers = CMPhotoGetPixelBufferDataPointers(pixelBuffera, 0, 0, 0, (uint64_t)v52, (uint64_t)v51, 0), PixelBufferDataPointers))
    {
      uint64_t v46 = PixelBufferDataPointers;
      CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
      unint64_t v47 = pixelBuffera;
      CVPixelBufferLockFlags v48 = 0;
      goto LABEL_51;
    }
    if (PixelFormatType > 1952855091)
    {
      if (PixelFormatType != 1952855092)
      {
        if (PixelFormatType == 2019963956 && v12 > 0.0)
        {
          uint64_t v19 = 0;
          do
          {
            if (v11 > 0.0)
            {
              uint64_t v20 = 0;
              unint64_t v21 = (unsigned __int16 *)(v56 + v54 * v19);
              uint64_t v22 = v55 + v53 * v19;
              uint64_t v23 = v52[0] + v51[0] * v19;
              do
              {
                *(_DWORD *)(v23 + 4 * v20) = (16 * *(unsigned __int16 *)(v22 + 2 * v20)) & 0xFFC00 | (((v21[1] >> 6) & 0x3FF) << 20) | (*v21 >> 6) | 0xC0000000;
                ++v20;
                v21 += 2;
              }
              while (v11 > (double)(int)v20);
            }
            ++v19;
          }
          while (v12 > (double)(int)v19);
        }
        goto LABEL_47;
      }
    }
    else
    {
      if (PixelFormatType == 875836518)
      {
        if (v12 > 0.0)
        {
          uint64_t v36 = 0;
          do
          {
            if (v11 > 0.0)
            {
              uint64_t v37 = 0;
              uint64_t v38 = (unsigned char *)(v52[0] + v51[0] * v36);
              uint64_t v39 = (unsigned char *)(v56 + v54 * v36);
              uint64_t v40 = v55 + v53 * v36;
              do
              {
                char v41 = *(unsigned char *)(v40 + v37);
                char v42 = v39[1];
                *uint64_t v38 = *v39;
                v38[1] = v41;
                v38[2] = v42;
                v38[3] = -1;
                ++v37;
                v39 += 2;
                v38 += 4;
              }
              while (v11 > (double)(int)v37);
            }
            ++v36;
          }
          while (v12 > (double)(int)v36);
        }
        goto LABEL_47;
      }
      if (PixelFormatType != 1936077876)
      {
LABEL_47:
        CMPhotoPixelBufferSetAlphaOpaquenessAndAlphaMode(pixelBuffera, 1, 2);
        CMPhotoPropagateColorPropertiesFromSourceBuffer(pixelBuffer, pixelBuffera);
        CFStringRef v43 = (const __CFString *)*MEMORY[0x1E4F24A78];
        CFTypeRef v44 = CVBufferCopyAttachment(pixelBuffer, (CFStringRef)*MEMORY[0x1E4F24A78], 0);
        if (v44)
        {
          double v45 = v44;
          CVBufferSetAttachment(pixelBuffera, v43, v44, kCVAttachmentMode_ShouldPropagate);
          CFRelease(v45);
        }
        CVPixelBufferUnlockBaseAddress(pixelBuffera, 0);
        uint64_t v46 = 0;
        *a4 = pixelBuffera;
        CVPixelBufferRef pixelBuffera = 0;
        goto LABEL_50;
      }
    }
    if (v12 > 0.0)
    {
      uint64_t v24 = 0;
      uint64_t v25 = v55;
      uint64_t v26 = v56;
      uint64_t v27 = v53;
      uint64_t v28 = v54;
      uint64_t v29 = v52[0];
      uint64_t v30 = v51[0];
      do
      {
        if (v11 > 0.0)
        {
          uint64_t v31 = 0;
          uint64_t v32 = (_WORD *)(v29 + v30 * v24);
          uint64_t v33 = (__int16 *)(v26 + v28 * v24);
          do
          {
            __int16 v34 = *(_WORD *)(v25 + 2 * v31);
            __int16 v35 = *v33;
            *uint64_t v32 = v33[1];
            v32[1] = v34;
            v32[2] = v35;
            v32[3] = -1;
            ++v31;
            v33 += 2;
            v32 += 4;
          }
          while (v11 > (double)(int)v31);
        }
        ++v24;
        v25 += v27;
      }
      while (v12 > (double)(int)v24);
    }
    goto LABEL_47;
  }
  uint64_t v46 = 4294950299;
LABEL_52:
  if (pixelBuffera) {
    CFRelease(pixelBuffera);
  }
  return v46;
}

__CVBuffer *CMPhotoPixelBufferHasUnhandledIdentityMatrix(__CVBuffer *result)
{
  if (result)
  {
    int v1 = result;
    CFTypeRef v2 = CVBufferCopyAttachment(result, (CFStringRef)*MEMORY[0x1E4F24C18], 0);
    int v3 = FigCFEqual();
    OSType PixelFormatType = CVPixelBufferGetPixelFormatType(v1);
    int v5 = CMPhotoPixelFormatContainsYCbCr(PixelFormatType);
    if (v2) {
      CFRelease(v2);
    }
    if (v3) {
      BOOL v6 = v5 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    return (__CVBuffer *)!v6;
  }
  return result;
}

uint64_t CMPhotoPixelFormatContainsYCbCr(OSType pixelFormat)
{
  CFDictionaryRef v1 = CVPixelFormatDescriptionCreateWithPixelFormatType((CFAllocatorRef)*MEMORY[0x1E4F1CF80], pixelFormat);
  FigCFDictionaryGetBooleanIfPresent();
  if (v1) {
    CFRelease(v1);
  }
  return 0;
}

uint64_t CMPhotoVTPixelTransferSetHWAndSWAndGPUProperties(const void *a1, int a2, int a3, int a4, int a5, unsigned char *a6, double a7, double a8, double a9, double a10)
{
  if (!a1) {
    return 4294950306;
  }
  if (a3) {
    BOOL v19 = 1;
  }
  else {
    BOOL v19 = a2 == 0;
  }
  uint64_t v20 = (const void *)*MEMORY[0x1E4F1CFD0];
  unint64_t v21 = (const void *)*MEMORY[0x1E4F1CFC8];
  if (v19) {
    uint64_t v22 = (const void *)*MEMORY[0x1E4F1CFC8];
  }
  else {
    uint64_t v22 = (const void *)*MEMORY[0x1E4F1CFD0];
  }
  uint64_t result = VTSessionSetProperty(a1, (CFStringRef)*MEMORY[0x1E4F45128], v22);
  if (!result)
  {
    if (_disableMSRForTransfer_onceToken != -1) {
      dispatch_once(&_disableMSRForTransfer_onceToken, &__block_literal_global_11);
    }
    if (a7 >= a8) {
      double v24 = a8;
    }
    else {
      double v24 = a7;
    }
    BOOL v25 = v24 < 16.0;
    if (a9 >= a10) {
      double v26 = a10;
    }
    else {
      double v26 = a9;
    }
    if (v26 < 4.0) {
      BOOL v25 = 1;
    }
    BOOL v19 = a5 == 0;
    BOOL v27 = a5 == 0;
    if (v19) {
      BOOL v25 = 1;
    }
    int v28 = v25 | a3;
    if (v28)
    {
      uint64_t result = VTSessionSetProperty(a1, (CFStringRef)*MEMORY[0x1E4F45120], v21);
      if (result) {
        return result;
      }
    }
    else
    {
      if (_disableOptimalCoefficients_onceToken != -1) {
        dispatch_once(&_disableOptimalCoefficients_onceToken, &__block_literal_global_14);
      }
      uint64_t v29 = cmpweak_kVTPixelTransferPropertyKey_UseOptimalMSRCoefficients();
      VTSessionSetProperty(a1, v29, v20);
    }
    if (_disableGPUForTransfer_onceToken != -1) {
      dispatch_once(&_disableGPUForTransfer_onceToken, &__block_literal_global_17);
    }
    int v30 = v27 | a4;
    if (v30)
    {
      uint64_t result = VTSessionSetProperty(a1, (CFStringRef)*MEMORY[0x1E4F45118], v21);
      if (!a6 || result) {
        return result;
      }
    }
    else if (!a6)
    {
      return 0;
    }
    uint64_t result = 0;
    *a6 = v28 | v30;
  }
  return result;
}

CFBooleanRef CMPhotoPixelBufferContainsYCbCr(__CVBuffer *a1)
{
  CFBooleanRef PixelBufferDescriptionKey = (const __CFBoolean *)_getPixelBufferDescriptionKey(a1, (const void *)*MEMORY[0x1E4F24EB8]);
  return CMPhotoCFBooleanGetValue(PixelBufferDescriptionKey);
}

uint64_t CMPhotoSetPixelBufferCLAP(__CVBuffer *a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, int a6, int a7)
{
  return CMPhotoSetPixelBufferCLAPFromRect(a1, a6, a7, (double)a2, (double)a3, (double)a4, (double)a5);
}

__CFString *cmpweak_kVTPixelTransferPropertyKey_UseOptimalMSRCoefficients()
{
  if (MEMORY[0x1E4F45180]) {
    return (__CFString *)*MEMORY[0x1E4F45180];
  }
  else {
    return @"UseOptimalMSRCoefficients";
  }
}

uint64_t CMPhotoGetChromaSubsamplingFromPixelFormat(uint64_t a1)
{
  int UncompressedPixelFormatFromCompressedPixelFormat = CMPhotoGetUncompressedPixelFormatFromCompressedPixelFormat(a1);
  uint64_t v2 = 5;
  if (UncompressedPixelFormatFromCompressedPixelFormat > 1735549491)
  {
    if (UncompressedPixelFormatFromCompressedPixelFormat > 1936077875)
    {
      if (UncompressedPixelFormatFromCompressedPixelFormat <= 1953903667)
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat <= 1952854575)
        {
          if (UncompressedPixelFormatFromCompressedPixelFormat <= 1937125937)
          {
            if (UncompressedPixelFormatFromCompressedPixelFormat == 1936077876) {
              return 1;
            }
            int v10 = 1937125936;
            goto LABEL_107;
          }
          if (UncompressedPixelFormatFromCompressedPixelFormat == 1937125938) {
            return 3;
          }
          int v5 = 1937126452;
          return UncompressedPixelFormatFromCompressedPixelFormat == v5;
        }
        if (UncompressedPixelFormatFromCompressedPixelFormat > 1952855091)
        {
          if (UncompressedPixelFormatFromCompressedPixelFormat == 1952855092) {
            return 1;
          }
          if (UncompressedPixelFormatFromCompressedPixelFormat != 1953903152)
          {
            int v7 = 1953903154;
            goto LABEL_103;
          }
          return v2;
        }
        if (UncompressedPixelFormatFromCompressedPixelFormat == 1952854576) {
          return v2;
        }
        int v7 = 1952854578;
      }
      else
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat <= 2019963439)
        {
          if (UncompressedPixelFormatFromCompressedPixelFormat > 2016686639)
          {
            if (UncompressedPixelFormatFromCompressedPixelFormat != 2016686640)
            {
              if (UncompressedPixelFormatFromCompressedPixelFormat != 2016686642)
              {
                int v5 = 2016687156;
                return UncompressedPixelFormatFromCompressedPixelFormat == v5;
              }
              return 3;
            }
            return v2;
          }
          if (UncompressedPixelFormatFromCompressedPixelFormat == 1953903668) {
            return 1;
          }
          int v5 = 1999843442;
          return UncompressedPixelFormatFromCompressedPixelFormat == v5;
        }
        if (UncompressedPixelFormatFromCompressedPixelFormat > 2019963955)
        {
          if (UncompressedPixelFormatFromCompressedPixelFormat == 2019963956) {
            return 1;
          }
          if (UncompressedPixelFormatFromCompressedPixelFormat == 2037741171) {
            return 3;
          }
          int v7 = 2037741158;
          goto LABEL_103;
        }
        if (UncompressedPixelFormatFromCompressedPixelFormat == 2019963440) {
          return v2;
        }
        int v7 = 2019963442;
      }
LABEL_103:
      if (UncompressedPixelFormatFromCompressedPixelFormat != v7) {
        return 0;
      }
      return 3;
    }
    if (UncompressedPixelFormatFromCompressedPixelFormat > 1882468911)
    {
      if (UncompressedPixelFormatFromCompressedPixelFormat > 1919379251)
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat > 1932996148)
        {
          if (UncompressedPixelFormatFromCompressedPixelFormat == 1932996149) {
            return 6;
          }
          if (UncompressedPixelFormatFromCompressedPixelFormat != 1936077360)
          {
            int v7 = 1936077362;
            goto LABEL_103;
          }
          return v2;
        }
        if (UncompressedPixelFormatFromCompressedPixelFormat == 1919379252) {
          return 7;
        }
        unsigned __int16 v3 = 28720;
      }
      else
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat <= 1919365989)
        {
          if (UncompressedPixelFormatFromCompressedPixelFormat == 1882468912) {
            return v2;
          }
          int v10 = 1885745712;
          goto LABEL_107;
        }
        if (UncompressedPixelFormatFromCompressedPixelFormat == 1919365990
          || UncompressedPixelFormatFromCompressedPixelFormat == 1919365992)
        {
          return 1;
        }
        unsigned __int16 v3 = 25400;
      }
      int v4 = v3 | 0x72670000;
      goto LABEL_97;
    }
    if (UncompressedPixelFormatFromCompressedPixelFormat <= 1751411058)
    {
      if (UncompressedPixelFormatFromCompressedPixelFormat > 1735553071)
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat != 1735553072)
        {
          int v8 = 1751410032;
LABEL_111:
          if (UncompressedPixelFormatFromCompressedPixelFormat != v8) {
            return 0;
          }
          return 6;
        }
        return 7;
      }
      if (UncompressedPixelFormatFromCompressedPixelFormat == 1735549492) {
        return 7;
      }
      int v4 = 1735549752;
LABEL_97:
      if (UncompressedPixelFormatFromCompressedPixelFormat != v4) {
        return 0;
      }
      return 7;
    }
    if (UncompressedPixelFormatFromCompressedPixelFormat <= 1815162993)
    {
      if (UncompressedPixelFormatFromCompressedPixelFormat == 1751411059) {
        return 6;
      }
      int v10 = 1751527984;
      goto LABEL_107;
    }
    if (UncompressedPixelFormatFromCompressedPixelFormat == 1815162994
      || UncompressedPixelFormatFromCompressedPixelFormat == 1815361650)
    {
      return 1;
    }
    int v5 = 1815491698;
    return UncompressedPixelFormatFromCompressedPixelFormat == v5;
  }
  if (UncompressedPixelFormatFromCompressedPixelFormat > 1380410944)
  {
    if (UncompressedPixelFormatFromCompressedPixelFormat > 1651519797)
    {
      if (UncompressedPixelFormatFromCompressedPixelFormat > 1717855599)
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat <= 1734501175)
        {
          if (UncompressedPixelFormatFromCompressedPixelFormat == 1717855600) {
            return 6;
          }
          int v8 = 1717856627;
          goto LABEL_111;
        }
        if (UncompressedPixelFormatFromCompressedPixelFormat == 1734501176
          || UncompressedPixelFormatFromCompressedPixelFormat == 1734504496)
        {
          return 7;
        }
        int v4 = 1734505012;
      }
      else
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat > 1651925815)
        {
          if (UncompressedPixelFormatFromCompressedPixelFormat != 1651925816
            && UncompressedPixelFormatFromCompressedPixelFormat != 1651926376)
          {
            int v4 = 1652056888;
            goto LABEL_97;
          }
          return 7;
        }
        if (UncompressedPixelFormatFromCompressedPixelFormat == 1651519798) {
          return 7;
        }
        int v4 = 1651847472;
      }
      goto LABEL_97;
    }
    if (UncompressedPixelFormatFromCompressedPixelFormat > 1647719527)
    {
      if (UncompressedPixelFormatFromCompressedPixelFormat <= 1650943795)
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat == 1647719528) {
          return 7;
        }
        unsigned __int16 v6 = 25400;
      }
      else
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat == 1650943796
          || UncompressedPixelFormatFromCompressedPixelFormat == 1650946096)
        {
          return 7;
        }
        unsigned __int16 v6 = 28722;
      }
      int v4 = v6 | 0x62670000;
      goto LABEL_97;
    }
    if (UncompressedPixelFormatFromCompressedPixelFormat <= 1647392368)
    {
      if (UncompressedPixelFormatFromCompressedPixelFormat != 1380410945)
      {
        unsigned __int16 v9 = 26689;
LABEL_78:
        int v5 = v9 | 0x52470000;
        return UncompressedPixelFormatFromCompressedPixelFormat == v5;
      }
      return 1;
    }
    if (UncompressedPixelFormatFromCompressedPixelFormat == 1647392369) {
      return 7;
    }
    int v5 = 1647589490;
    return UncompressedPixelFormatFromCompressedPixelFormat == v5;
  }
  if (UncompressedPixelFormatFromCompressedPixelFormat > 1111970368)
  {
    if (UncompressedPixelFormatFromCompressedPixelFormat > 1278226735)
    {
      if (UncompressedPixelFormatFromCompressedPixelFormat <= 1278555444)
      {
        if ((UncompressedPixelFormatFromCompressedPixelFormat - 1278226736) > 6
          || ((1 << (UncompressedPixelFormatFromCompressedPixelFormat - 48)) & 0x45) == 0)
        {
          return 0;
        }
        return 6;
      }
      if (UncompressedPixelFormatFromCompressedPixelFormat != 1278555445
        && UncompressedPixelFormatFromCompressedPixelFormat != 1378955371)
      {
        unsigned __int16 v9 = 16961;
        goto LABEL_78;
      }
      return 1;
    }
    if ((UncompressedPixelFormatFromCompressedPixelFormat - 1278226488) > 0x30
      || ((1 << (UncompressedPixelFormatFromCompressedPixelFormat - 56)) & 0x1400000000001) == 0)
    {
      int v5 = 1111970369;
      return UncompressedPixelFormatFromCompressedPixelFormat == v5;
    }
    return 6;
  }
  if (UncompressedPixelFormatFromCompressedPixelFormat <= 875704437)
  {
    if (UncompressedPixelFormatFromCompressedPixelFormat <= 825437746)
    {
      if (UncompressedPixelFormatFromCompressedPixelFormat == 32) {
        return 1;
      }
      int v8 = 825306677;
      goto LABEL_111;
    }
    if (UncompressedPixelFormatFromCompressedPixelFormat == 825437747) {
      return 6;
    }
    int v10 = 875704422;
LABEL_107:
    if (UncompressedPixelFormatFromCompressedPixelFormat != v10) {
      return 0;
    }
    return v2;
  }
  if (UncompressedPixelFormatFromCompressedPixelFormat > 875704949)
  {
    if (UncompressedPixelFormatFromCompressedPixelFormat != 875704950)
    {
      if (UncompressedPixelFormatFromCompressedPixelFormat != 875836518)
      {
        int v5 = 875836534;
        return UncompressedPixelFormatFromCompressedPixelFormat == v5;
      }
      return 1;
    }
    return 3;
  }
  if (UncompressedPixelFormatFromCompressedPixelFormat != 875704438)
  {
    int v7 = 875704934;
    goto LABEL_103;
  }
  return v2;
}

uint64_t CMPhotoCodecSessionPoolCreate(const __CFAllocator *a1, const __CFDictionary *a2, uint64_t *a3)
{
  pthread_once(&CMPhotoCodecSessionPoolGetTypeID_onceToken, (void (*)(void))RegisterCMPhotoCodecSessionPool);
  if (!a3) {
    return 0;
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance) {
    return 4294950305;
  }
  uint64_t v7 = Instance;
  uint64_t v8 = 10000000000;
  if (a2)
  {
    uint64_t v36 = 0;
    BOOL v9 = CMPhotoCFDictionaryGetInt64IfPresent(a2, @"IdleTimeoutMilliseconds", &v36) != 0;
    BOOL v10 = v36 >= 0;
    uint64_t v11 = 1000000 * v36;
    if (!v36) {
      uint64_t v11 = -1;
    }
    BOOL v12 = v9 && v10;
    if (v9 && v10) {
      uint64_t v8 = v11;
    }
    int Int64IfPresent = CMPhotoCFDictionaryGetInt64IfPresent(a2, @"MaxSimultaneousCompressionSessions", &v36);
    if (v36) {
      uint64_t v14 = v36;
    }
    else {
      uint64_t v14 = -1;
    }
    if (v36 <= -1 || Int64IfPresent == 0) {
      uint64_t v16 = 8;
    }
    else {
      uint64_t v16 = v14;
    }
    int v17 = CMPhotoCFDictionaryGetInt64IfPresent(a2, @"MaxSimultaneousDecompressionSessions", &v36);
    if (v36) {
      uint64_t v18 = v36;
    }
    else {
      uint64_t v18 = -1;
    }
    if (v36 <= -1 || v17 == 0) {
      uint64_t v20 = 16;
    }
    else {
      uint64_t v20 = v18;
    }
  }
  else
  {
    BOOL v12 = 0;
    uint64_t v20 = 16;
    uint64_t v16 = 8;
  }
  uint64_t v21 = FigSimpleMutexCreate();
  *(void *)(v7 + 24) = v21;
  if (!v21) {
    goto LABEL_43;
  }
  *(void *)(v7 + 32) = v16;
  *(void *)(v7 + 40) = v20;
  uint64_t v22 = CodecSessionPool_Init(a1, (const __CFAllocator **)(v7 + 48));
  if (v22 || (uint64_t v22 = CodecSessionPool_Init(a1, (const __CFAllocator **)(v7 + 88)), v22))
  {
    uint64_t v33 = v22;
    goto LABEL_45;
  }
  dispatch_semaphore_t v23 = dispatch_semaphore_create(0);
  *(void *)(v7 + 168) = v23;
  if (!v23
    || (double v24 = dispatch_queue_create("com.apple.coremedia.photo.codecsessionpool-eventqueue", 0),
        (*(void *)(v7 + 144) = v24) == 0)
    || (BOOL v25 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, v24), (*(void *)(v7 + 136) = v25) == 0))
  {
LABEL_43:
    uint64_t v33 = 4294950305;
LABEL_45:
    CFRelease((CFTypeRef)v7);
    return v33;
  }
  dispatch_set_context(v25, (void *)v7);
  dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v7 + 136), (dispatch_function_t)CMPhotoCodecSessionPool_CleanupTimerHandler);
  dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(v7 + 136), (dispatch_function_t)CMPhotoCodecSessionPool_CleanupTimerCanceled);
  if (v8 == -1)
  {
    uint64_t v29 = -1;
    dispatch_time_t v30 = -1;
    int64_t v31 = 0;
  }
  else
  {
    BOOL v26 = +[CMPhotoProcessMonitor isForegroundApp];
    int v27 = v26 | +[CMPhotoProcessMonitor isCameraCaptured];
    int v28 = v27 | +[CMPhotoProcessMonitor isDeferredMediad];
    if (v12) {
      int v28 = 1;
    }
    if (v28) {
      uint64_t v29 = v8;
    }
    else {
      uint64_t v29 = 1000000000;
    }
    *(void *)(v7 + 176) = +[CMPhotoProcessMonitor getShared];
    v35[0] = MEMORY[0x1E4F143A8];
    v35[1] = 3221225472;
    v35[2] = __CMPhotoCodecSessionPoolCreate_block_invoke;
    v35[3] = &__block_descriptor_40_e5_v8__0l;
    v35[4] = v7;
    *(void *)(v7 + 184) = [v35 copy];
    dispatch_time_t v30 = 0;
    int64_t v31 = v29;
  }
  dispatch_time_t v32 = dispatch_time(v30, v31);
  dispatch_source_set_timer(*(dispatch_source_t *)(v7 + 136), v32, v29, v29 >> 3);
  uint64_t v33 = 0;
  *(unsigned char *)(v7 + 128) = 1;
  *(void *)(v7 + 152) = v29;
  *a3 = v7;
  return v33;
}

__SecTask *_currentProcessIsOfIdentifier(uint64_t a1)
{
  uint64_t result = SecTaskCreateFromSelf((CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
  if (result)
  {
    unsigned __int16 v3 = result;
    int v4 = (__CFString *)SecTaskCopySigningIdentifier(result, 0);
    uint64_t v5 = [(__CFString *)v4 isEqualToString:a1];

    CFRelease(v3);
    return (__SecTask *)v5;
  }
  return result;
}

uint64_t CodecSessionPool_Init(const __CFAllocator *cf, const __CFAllocator **a2)
{
  CFAllocatorRef v3 = cf;
  if (cf) {
    CFTypeRef cf = (const __CFAllocator *)CFRetain(cf);
  }
  *a2 = cf;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v3, 0, MEMORY[0x1E4F1D510]);
  a2[1] = Mutable;
  if (!Mutable) {
    return 4294950305;
  }
  CFMutableDictionaryRef v5 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  a2[2] = v5;
  if (!v5) {
    return 4294950305;
  }
  CFMutableDictionaryRef v6 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E4F1D530], 0);
  a2[3] = v6;
  if (!v6) {
    return 4294950305;
  }
  CFMutableArrayRef v7 = CFArrayCreateMutable(v3, 0, 0);
  a2[4] = v7;
  if (v7) {
    return 0;
  }
  else {
    return 4294950305;
  }
}

uint64_t CMPhotoSurfacePoolCreate(const __CFAllocator *a1, const __CFDictionary *a2, uint64_t *a3)
{
  pthread_once(&CMPhotoSurfacePoolGetTypeID_onceToken, (void (*)(void))RegisterCMPhotoSurfacePoolClass);
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance) {
    return 4294950305;
  }
  uint64_t v7 = Instance;
  int v28 = 0;
  if (a2) {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a2, @"MemoryPoolAttributes");
  }
  else {
    CFDictionaryRef Value = 0;
  }
  uint64_t v9 = Pool_SetOptions(v7 + 24, Value, (uint64_t)&kMemoryPoolDefaults, 0);
  if (v9) {
    goto LABEL_40;
  }
  int IntIfPresent = CMPhotoCFDictionaryGetIntIfPresent(Value, @"IdleTimeout", &v28);
  int v11 = IntIfPresent;
  if (v28) {
    uint64_t v12 = 1000000 * v28;
  }
  else {
    uint64_t v12 = -1;
  }
  if (IntIfPresent) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 1000000000;
  }
  if (a2) {
    CFDictionaryRef v14 = (const __CFDictionary *)CFDictionaryGetValue(a2, @"ImagePoolAttributes");
  }
  else {
    CFDictionaryRef v14 = 0;
  }
  Pool_SetOptions(v7 + 168, v14, (uint64_t)&kImagePoolDefaults, 0x10uLL);
  if (CMPhotoCFDictionaryGetIntIfPresent(v14, @"IdleTimeout", &v28))
  {
    unint64_t v15 = v28 ? 1000000 * v28 : -1;
    if (v13 > v15 || v11 == 0) {
      uint64_t v13 = v15;
    }
  }
  uint64_t v9 = Pool_Create(a1, v7 + 24, 0);
  if (v9)
  {
LABEL_40:
    uint64_t v25 = v9;
    goto LABEL_41;
  }
  *(_DWORD *)(v7 + 184) = 1;
  *(void *)(v7 + 168) = 0;
  *(void *)(v7 + 176) = v7 + 168;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], 0);
  *(void *)(v7 + 192) = Mutable;
  if (!Mutable) {
    goto LABEL_39;
  }
  uint64_t v18 = FigSimpleMutexCreate();
  *(void *)(v7 + 312) = v18;
  if (!v18
    || (dispatch_semaphore_t v19 = dispatch_semaphore_create(0), (*(void *)(v7 + 344) = v19) == 0)
    || (uint64_t v20 = dispatch_queue_create("com.apple.coremedia.photo.surfacepool-eventqueue", 0),
        (*(void *)(v7 + 336) = v20) == 0)
    || (uint64_t v21 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, v20), (*(void *)(v7 + 328) = v21) == 0))
  {
LABEL_39:
    uint64_t v25 = 4294950305;
LABEL_41:
    CFRelease((CFTypeRef)v7);
    return v25;
  }
  dispatch_set_context(v21, (void *)v7);
  dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v7 + 328), (dispatch_function_t)SurfacePool_CleanupTimerHandler);
  dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(v7 + 328), (dispatch_function_t)SurfacePool_CleanupTimerCanceled);
  if (v13 == -1)
  {
    dispatch_time_t v22 = -1;
    int64_t v23 = 0;
  }
  else
  {
    dispatch_time_t v22 = 0;
    int64_t v23 = v13;
  }
  dispatch_time_t v24 = dispatch_time(v22, v23);
  dispatch_source_set_timer(*(dispatch_source_t *)(v7 + 328), v24, v13, v13 >> 3);
  *(unsigned char *)(v7 + 320) = 1;
  *(void *)(v7 + 368) = v13;
  *(void *)(v7 + 376) = 10000000000;
  if (v13 != -1)
  {
    if (!+[CMPhotoProcessMonitor isForegroundApp]) {
      *(void *)(v7 + 376) = v13;
    }
    *(void *)(v7 + 352) = +[CMPhotoProcessMonitor getShared];
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    v27[2] = __CMPhotoSurfacePoolCreate_block_invoke;
    v27[3] = &__block_descriptor_40_e5_v8__0l;
    v27[4] = v7;
    *(void *)(v7 + 360) = [v27 copy];
  }
  uint64_t v25 = 0;
  *(unsigned char *)(v7 + 16) = 0;
  *a3 = v7;
  return v25;
}

uint64_t Pool_Create(const __CFAllocator *a1, uint64_t a2, int a3)
{
  *(_DWORD *)(a2 + 16) = a3;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = a2;
  if (a3 == 1)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], 0);
    *(void *)(a2 + 24) = Mutable;
    if (Mutable) {
      return 0;
    }
    else {
      return 4294950305;
    }
  }
  else
  {
    if (a3) {
      return 0;
    }
    uint64_t v4 = 88 * *(void *)(a2 + 40);
    CFMutableDictionaryRef v5 = CFAllocatorAllocate(a1, v4, 0);
    bzero(v5, v4);
    *(void *)(a2 + 24) = v5;
    if (v5)
    {
      uint64_t v6 = *(void *)(a2 + 40);
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(uint64_t **)(a2 + 32);
        do
        {
          *(void *)(*(void *)(a2 + 24) + v7) = 0;
          uint64_t v9 = *v8++;
          *(void *)(*(void *)(a2 + 24) + v7 + 8) = *(void *)(a2 + 24) + v7;
          *(void *)(*(void *)(a2 + 24) + v7 + 16) = v9;
          v7 += 88;
          --v6;
        }
        while (v6);
      }
      return 0;
    }
    return 4294950305;
  }
}

uint64_t _encodeImageForIndex(const void *a1, int a2, int a3, const void *a4, const __CFDictionary *a5, int a6, const opaqueCMFormatDescription *ImageBuffer)
{
  uint64_t v11 = (uint64_t)a1;
  CFAllocatorRef v81 = CFGetAllocator(a1);
  float64x2_t v99 = 0u;
  float64x2_t v100 = 0u;
  unint64_t v97 = 0;
  uint64_t v98 = 0;
  int v95 = 0;
  CMSampleBufferRef v96 = 0;
  if (a6)
  {
    CMVideoDimensions Dimensions = CMVideoFormatDescriptionGetDimensions(ImageBuffer);
    double width = (double)Dimensions.width;
    double height = (double)Dimensions.height;
    uint64_t MediaSubType = CMFormatDescriptionGetMediaSubType(ImageBuffer);
    ImageBuffer = 0;
    float64x2_t v99 = 0uLL;
    char v16 = 1;
    v100.f64[0] = width;
    v100.f64[1] = height;
  }
  else
  {
    CFTypeID v17 = CFGetTypeID(ImageBuffer);
    if (v17 == CMSampleBufferGetTypeID()) {
      ImageBuffer = CMSampleBufferGetImageBuffer(ImageBuffer);
    }
    uint64_t MediaSubType = CVPixelBufferGetPixelFormatType(ImageBuffer);
    v99.f64[0] = CMPhotoGetPixelBufferCLAPAsRect(ImageBuffer);
    v99.f64[1] = v18;
    v100.f64[0] = v19;
    v100.f64[1] = v20;
    if (ImageBuffer)
    {
      CFRetain(ImageBuffer);
      char v16 = 0;
    }
    else
    {
      char v16 = 1;
    }
  }
  unsigned __int8 v94 = 1;
  __int16 v93 = 0;
  __int16 v92 = 0;
  int v91 = 0;
  __int16 v90 = 1;
  int v88 = 1;
  unsigned int v89 = 5;
  char v87 = 0;
  unsigned int v83 = MediaSubType;
  if (!a5)
  {
    CFTypeRef cf = 0;
    CFNumberRef v35 = 0;
    int v82 = 0;
    unsigned int v80 = 0;
    int IntIfPresent = 0;
    uint64_t v46 = 0;
LABEL_66:
    double v49 = 0;
    goto LABEL_67;
  }
  CFDictionaryRef v21 = (const __CFDictionary *)CFDictionaryGetValue(a5, @"SourceCropRect");
  if (v21)
  {
    memset(&rect, 0, sizeof(rect));
    if (CGRectMakeWithDictionaryRepresentation(v21, &rect))
    {
      uint64_t v22 = CMPhotoApplyCropRectToRect(v99.f64, rect.origin.x, rect.origin.y, rect.size.width, rect.size.height);
      if (v22) {
        goto LABEL_192;
      }
    }
    uint64_t MediaSubType = MediaSubType;
  }
  CMPhotoCFDictionaryGetBooleanIfPresent(a5, @"ApplyTransform", &v87);
  if (v87 && !CMPhotoCFDictionaryGetIntIfPresent(a5, @"ImageOrientation", &v88)) {
    goto LABEL_191;
  }
  CMPhotoCFDictionaryGetBooleanIfPresent(a5, @"ForceHighSpeed", &v94);
  CMPhotoCFDictionaryGetBooleanIfPresent(a5, @"DisableMSRForTransfer", (unsigned char *)&v93 + 1);
  CMPhotoCFDictionaryGetBooleanIfPresent(a5, @"DisableGPUForTransfer", &v93);
  CMPhotoCFDictionaryGetIntIfPresent(a5, @"MaxPixelSize", &v91);
  int v23 = v91;
  if (v91)
  {
    CMPhotoCFDictionaryGetBooleanIfPresent(a5, @"AllowMaxPixelSizeUpscale", (unsigned char *)&v90 + 1);
    CMPhotoCFDictionaryGetBooleanIfPresent(a5, @"UseEvenScalingMode", &v90);
    LOBYTE(v90) = CMPhotoGetEvenScalingModeDefault(1, v90);
    int v23 = v91;
  }
  if (!a6)
  {
    if (v100.f64[0] <= v100.f64[1]) {
      double v24 = v100.f64[1];
    }
    else {
      double v24 = v100.f64[0];
    }
    BOOL v25 = v23 < (unint64_t)v24;
    if (HIBYTE(v90)) {
      BOOL v25 = v23 != (unint64_t)v24;
    }
    if (v23 >= 1 && v25 || v87 && v88 != 1)
    {
      unint64_t v26 = vcvtad_u64_f64(v100.f64[0]);
      unint64_t v27 = vcvtad_u64_f64(v100.f64[1]);
      rect.origin.x = 0.0;
      if (v26 <= v27) {
        unint64_t v26 = v27;
      }
      if (!HIBYTE(v90) && v26 < v23) {
        goto LABEL_191;
      }
      uint64_t v28 = *(void *)(v11 + 32);
      int v29 = v88;
      unsigned int UncompressedPixelFormatFromCompressedPixelFormat = CMPhotoGetUncompressedPixelFormatFromCompressedPixelFormat(v83);
      uint64_t v22 = CMPhotoScaleAndRotateSessionTransformForMaxSideLengthWithOptions(v28, ImageBuffer, 0, 1, v29, UncompressedPixelFormatFromCompressedPixelFormat, 0, v91, v99.f64[0], v99.f64[1], v100.f64[0], v100.f64[1], HIBYTE(v90), 0, v90, 0, v94, SHIBYTE(v93), 0,
              v93,
              (__CVBuffer **)&rect);
      if (v22)
      {
LABEL_192:
        uint64_t v59 = v22;
        int v56 = 0;
        BOOL v63 = 0;
        goto LABEL_193;
      }
      if ((v16 & 1) == 0) {
        CFRelease(ImageBuffer);
      }
      ImageBuffer = *(const opaqueCMFormatDescription **)&rect.origin.x;
      v99.f64[0] = CMPhotoGetPixelBufferCLAPAsRect(*(__CVBuffer **)&rect.origin.x);
      v99.f64[1] = v31;
      v100.f64[0] = v32;
      v100.f64[1] = v33;
      uint64_t MediaSubType = v83;
    }
  }
  CFNumberRef v34 = (const __CFNumber *)CFDictionaryGetValue(a5, @"AuxiliaryImagePreserveValue");
  CFNumberRef v35 = v34;
  if (v34)
  {
    CFTypeID v36 = CFGetTypeID(v34);
    if (v36 != CFNumberGetTypeID())
    {
LABEL_191:
      uint64_t v22 = FigSignalErrorAt();
      goto LABEL_192;
    }
  }
  CMPhotoCFDictionaryGetBooleanIfPresent(a5, @"IgnoreColorSpace", (unsigned char *)&v92 + 1);
  CMPhotoCFDictionaryGetBooleanIfPresent(a5, @"AllowITUR_2100TFToSDRTransformBeforeEncode", &v92);
  LODWORD(rect.origin.x) = 0;
  int IntIfPresent = FigCFDictionaryGetIntIfPresent();
  if (IntIfPresent) {
    BOOL v38 = LODWORD(rect.origin.x) == 5;
  }
  else {
    BOOL v38 = 0;
  }
  int v39 = v38;
  int v82 = v39;
  LOBYTE(value) = 0;
  if (CMPhotoCFDictionaryGetBooleanIfPresent(a5, @"PreferSoftwareCodec", &value)) {
    BOOL v40 = value == 0;
  }
  else {
    BOOL v40 = 1;
  }
  int v41 = !v40;
  if (CMPhotoCFDictionaryGetBooleanIfPresent(a5, @"RequireHardwareCodec", &value)) {
    BOOL v42 = value == 0;
  }
  else {
    BOOL v42 = 1;
  }
  if (v42) {
    int v43 = v41;
  }
  else {
    int v43 = 2;
  }
  unsigned int v80 = v43;
  if (!v42 && v41) {
    goto LABEL_64;
  }
  CMPhotoCFDictionaryGetInt32IfPresent(a5, @"Subsampling", &v89);
  CFTypeRef cf = CFDictionaryGetValue(a5, @"AuxiliaryImageCustomTypeURN");
  if (cf)
  {
    CFTypeID v44 = CFGetTypeID(cf);
    if (v44 != CFStringGetTypeID()) {
      goto LABEL_64;
    }
  }
  double v45 = (CGColorSpace *)FigCFDictionaryGetValue();
  uint64_t v46 = v45;
  if (v45)
  {
    CFTypeID v47 = CFGetTypeID(v45);
    if (v47 != CGColorSpaceGetTypeID()) {
      goto LABEL_64;
    }
  }
  if (a2 != 2) {
    goto LABEL_66;
  }
  CVPixelBufferLockFlags v48 = CFDictionaryGetValue(a5, @"AuxiliaryImageTonemapMetadata");
  double v49 = v48;
  if (v48)
  {
    uint64_t v50 = v11;
    int v51 = IntIfPresent;
    int v52 = a6;
    CFNumberRef v53 = v35;
    uint64_t v54 = v48;
    CFTypeID v55 = CFGetTypeID(v48);
    BOOL v38 = v55 == CFDictionaryGetTypeID();
    double v49 = v54;
    CFNumberRef v35 = v53;
    a6 = v52;
    int IntIfPresent = v51;
    uint64_t v11 = v50;
    a2 = 2;
    if (!v38)
    {
LABEL_64:
      int v56 = 0;
      CFMutableDictionaryRef MutableCopy = 0;
      CFDataRef v58 = 0;
      uint64_t v59 = 4294950306;
LABEL_198:
      BOOL v63 = v82;
      goto LABEL_169;
    }
  }
LABEL_67:
  if (a2 == 2)
  {
    if (a3 == 4 && !cf)
    {
      uint64_t ColorSpaceFromPixelBuffer = FigSignalErrorAt();
      goto LABEL_195;
    }
    HIBYTE(v92) = 1;
  }
  if (!a6 && (_BYTE)v92 && CMPhotoPixelBufferIsITUR_2100TF(ImageBuffer))
  {
    uint64_t ColorSpaceFromPixelBuffer = CMPhotoScaleAndRotateSessionTransformForSize(*(void *)(v11 + 32), ImageBuffer, 1, 1, MediaSubType, 0x100000002, 1, 0, *MEMORY[0x1E4F1DB20], *(CGFloat *)(MEMORY[0x1E4F1DB20] + 8), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 16), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 24), *MEMORY[0x1E4F1DB30], *(double *)(MEMORY[0x1E4F1DB30] + 8), v60, v61, 0, 1u, &v95);
    if (ColorSpaceFromPixelBuffer) {
      goto LABEL_195;
    }
    if (ImageBuffer) {
      CFRelease(ImageBuffer);
    }
    ImageBuffer = v95;
    int v95 = 0;
    LODWORD(MediaSubType) = v83;
  }
  CFMutableDictionaryRef v76 = v49;
  if (HIBYTE(v92))
  {
    if (a2 == 2)
    {
      CFDataRef v58 = CGColorSpaceCopyICCData(v46);
      goto LABEL_86;
    }
    if (a2)
    {
LABEL_90:
      BOOL v63 = v82;
      if (!*(void *)(v11 + 288))
      {
        CFDataRef v58 = 0;
        goto LABEL_100;
      }
      uint64_t v59 = FigSignalErrorAt();
      int v56 = 0;
LABEL_193:
      CFMutableDictionaryRef MutableCopy = 0;
      CFDataRef v58 = 0;
      goto LABEL_169;
    }
    CFDataRef v58 = 0;
    goto LABEL_95;
  }
  rect.origin.x = 0.0;
  uint64_t ColorSpaceFromPixelBuffer = CMPhotoCreateColorSpaceFromPixelBuffer(ImageBuffer, (CGColorSpace **)&rect, 1, 1);
  if (ColorSpaceFromPixelBuffer)
  {
LABEL_195:
    uint64_t v59 = ColorSpaceFromPixelBuffer;
    int v56 = 0;
    CFMutableDictionaryRef MutableCopy = 0;
    CFDataRef v58 = 0;
    goto LABEL_198;
  }
  CFDataRef v58 = CGColorSpaceCopyICCData(*(CGColorSpaceRef *)&rect.origin.x);
  if (*(void *)&rect.origin.x) {
    CFRelease(*(CFTypeRef *)&rect.origin.x);
  }
  LODWORD(MediaSubType) = v83;
  if (!a2)
  {
    if (v58)
    {
      CFTypeRef v64 = CFRetain(v58);
LABEL_96:
      BOOL v63 = v82;
      *(void *)(v11 + 288) = v64;
      goto LABEL_100;
    }
LABEL_95:
    CFTypeRef v64 = 0;
    goto LABEL_96;
  }
  if (a2 == 2)
  {
LABEL_86:
    if (!v46 && v58)
    {
      uint64_t v59 = FigSignalErrorAt();
      int v56 = 0;
      CFMutableDictionaryRef MutableCopy = 0;
      goto LABEL_198;
    }
    BOOL v63 = v82;
    goto LABEL_100;
  }
  if (!v58) {
    goto LABEL_90;
  }
  BOOL v63 = v82;
  if (!*(void *)(v11 + 288) || !FigCFEqual())
  {
    uint64_t v59 = FigSignalErrorAt();
    int v56 = 0;
    CFMutableDictionaryRef MutableCopy = 0;
    goto LABEL_169;
  }
LABEL_100:
  if (a6)
  {
    int v56 = 0;
    CFMutableDictionaryRef MutableCopy = 0;
    goto LABEL_168;
  }
  CFMutableDictionaryRef MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy)
  {
    int v56 = 0;
    uint64_t v59 = 4294950305;
    goto LABEL_169;
  }
  if (a2 == 2 && !IntIfPresent)
  {
    BOOL v63 = MediaSubType == 1278226742 || MediaSubType == 1278226736 || v35 != 0;
    CFTypeRef value = 0;
    rect.origin.x = 0.0;
    uint64_t v67 = CMPhotoQualityControllerCopyDefaultControllerForAuxiliaryImage(1785750887, v63, (CFNumberRef *)&rect, (CFNumberRef *)&value);
    if (v67) {
      goto LABEL_163;
    }
    CFDictionarySetValue(MutableCopy, @"QualityControllerType", *(const void **)&rect.origin.x);
    if (value) {
      CFDictionarySetValue(MutableCopy, @"QualityControllerParameters", value);
    }
    LODWORD(MediaSubType) = v83;
    if (*(void *)&rect.origin.x) {
      CFRelease(*(CFTypeRef *)&rect.origin.x);
    }
    if (value) {
      CFRelease(value);
    }
  }
  if (*(_DWORD *)(v11 + 240) != 2) {
    CMPhotoCFDictionarySetBoolean(MutableCopy, @"PoolCompressedSurfaces", 0);
  }
  if (a2 != 2) {
    goto LABEL_154;
  }
  if ((int)MediaSubType > 1380411456)
  {
    if ((int)MediaSubType <= 1717856626)
    {
      if ((int)MediaSubType > 1651926375)
      {
        if (MediaSubType == 1651926376) {
          goto LABEL_145;
        }
        int v68 = 1717855600;
      }
      else
      {
        if (MediaSubType == 1380411457) {
          goto LABEL_145;
        }
        int v68 = 1647719528;
      }
    }
    else if ((int)MediaSubType <= 1751411058)
    {
      if (MediaSubType == 1717856627) {
        goto LABEL_145;
      }
      int v68 = 1751410032;
    }
    else
    {
      if (MediaSubType == 1751411059 || MediaSubType == 1932996149) {
        goto LABEL_145;
      }
      int v68 = 1751527984;
    }
LABEL_144:
    if (MediaSubType != v68) {
      goto LABEL_154;
    }
    goto LABEL_145;
  }
  if ((int)MediaSubType > 1278226735)
  {
    if ((MediaSubType - 1278226736) <= 6 && ((1 << (MediaSubType - 48)) & 0x45) != 0) {
      goto LABEL_145;
    }
    int v68 = 1380410945;
    goto LABEL_144;
  }
  if (((MediaSubType - 1278226488) > 0x30
     || ((1 << (MediaSubType - 56)) & 0x1400000000001) == 0)
    && MediaSubType != 825306677)
  {
    int v68 = 825437747;
    goto LABEL_144;
  }
LABEL_145:
  if (v35 && !v63)
  {
    uint64_t v67 = FigSignalErrorAt();
    goto LABEL_163;
  }
  if (v63) {
    unsigned int v69 = 16;
  }
  else {
    unsigned int v69 = 8;
  }
  uint64_t v67 = CMPhotoCreateCompressionCompatiblePixelBuffer(ImageBuffer, *(const void **)(v11 + 24), v69, v35, 1, (CFTypeRef *)&v95, &v98);
  if (v67) {
    goto LABEL_163;
  }
  if (ImageBuffer) {
    CFRelease(ImageBuffer);
  }
  ImageBuffer = v95;
  int v95 = 0;
LABEL_154:
  uint64_t v67 = CMPhotoUnifiedJPEGEncoderCreate(v81, *(const void **)(v11 + 32), *(const void **)(v11 + 24), *(_DWORD *)(v11 + 396), &v97);
  if (v67)
  {
LABEL_163:
    uint64_t v59 = v67;
    int v56 = 0;
    goto LABEL_169;
  }
  v84[0] = vcvtq_u64_f64(vrndaq_f64(v99));
  v84[1] = vcvtq_u64_f64(vrndaq_f64(v100));
  uint64_t v70 = CMPhotoUnifiedJPEGEncoderEncode((uint64_t)v97, (uint64_t)MutableCopy, (uint64_t)ImageBuffer, 0, v84, 0, v80, v89, v11, &v96);
  if (v70)
  {
    uint64_t v59 = v70;
    int v56 = 1;
    goto LABEL_169;
  }
  if (a2 == 2)
  {
    uint64_t v67 = _saveAuxImage(v11 + 240, v96, 1, 0, a3, a4, cf, v98, v58, v76);
    goto LABEL_163;
  }
  if (a2 != 1)
  {
    if (!a2)
    {
      CMSampleBufferRef v71 = v96;
      if (v96) {
        CMSampleBufferRef v71 = (CMSampleBufferRef)CFRetain(v96);
      }
      int v56 = 0;
      uint64_t v59 = 0;
      *(void *)(v11 + 264) = v71;
      *(unsigned char *)(v11 + 304) = 1;
      goto LABEL_169;
    }
    int v56 = 0;
LABEL_168:
    uint64_t v59 = 0;
    goto LABEL_169;
  }
  CMSampleBufferRef v72 = v96;
  if (v96) {
    CMSampleBufferRef v72 = (CMSampleBufferRef)CFRetain(v96);
  }
  int v56 = 0;
  uint64_t v59 = 0;
  *(void *)(v11 + 280) = v72;
  *(unsigned char *)(v11 + 305) = 1;
LABEL_169:
  CMPhotoUnifiedJPEGEncoderDestroy(v97);
  if (v96) {
    CFRelease(v96);
  }
  if (ImageBuffer) {
    CFRelease(ImageBuffer);
  }
  if (v58) {
    CFRelease(v58);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (v98) {
    CFRelease(v98);
  }
  if (v95) {
    CFRelease(v95);
  }
  if (v63) {
    int v73 = 0;
  }
  else {
    int v73 = v56;
  }
  if (v73 == 1)
  {
    uint64_t v74 = *(unsigned int *)(v11 + 396);
    if (v74)
    {
      JPEGDeviceInterface_closeDriverConnection(v74);
      *(_DWORD *)(v11 + 396) = 0;
    }
  }
  CMPhotoSurfacePoolMarkCachesVolatile(*(void *)(v11 + 24), 0);
  return v59;
}

uint64_t Pool_SetOptions(uint64_t a1, const __CFDictionary *cf, uint64_t a3, unint64_t a4)
{
  if (cf && (CFDictionaryRef v7 = cf, v8 = CFGetTypeID(cf), v8 == CFDictionaryGetTypeID()))
  {
    uint64_t v9 = *(void *)(a3 + 16);
    LODWORD(v45) = 0;
    int IntIfPresent = CMPhotoCFDictionaryGetIntIfPresent(v7, @"HighWaterBytes", &v45);
    LODWORD(v11) = v45;
    if (!v45) {
      LODWORD(v11) = -1;
    }
    uint64_t v11 = (int)v11;
    if (!IntIfPresent) {
      uint64_t v11 = v9;
    }
    *(void *)(a1 + 56) = v11;
    uint64_t v12 = *(void *)(a3 + 24);
    LODWORD(v45) = 0;
    int v13 = CMPhotoCFDictionaryGetIntIfPresent(v7, @"LowWaterBytes", &v45);
    int v14 = v45;
    if (!v45) {
      int v14 = -1;
    }
    if (v13) {
      uint64_t v12 = v14;
    }
    *(void *)(a1 + 64) = v12;
    LODWORD(v45) = 0;
    int v15 = CMPhotoCFDictionaryGetIntIfPresent(v7, @"MinBytes", &v45);
    LODWORD(v16) = v45;
    if (!v45) {
      LODWORD(v16) = -1;
    }
    uint64_t v16 = (int)v16;
    if (!v15) {
      uint64_t v16 = v12;
    }
    *(void *)(a1 + 72) = v16;
    uint64_t v17 = *(void *)(a3 + 32);
    LODWORD(v45) = 0;
    int v18 = CMPhotoCFDictionaryGetIntIfPresent(v7, @"HighWaterBufferCount", &v45);
    LODWORD(v19) = v45;
    if (!v45) {
      LODWORD(v19) = -1;
    }
    uint64_t v19 = (int)v19;
    if (!v18) {
      uint64_t v19 = v17;
    }
    *(void *)(a1 + 80) = v19;
    uint64_t v20 = *(void *)(a3 + 40);
    LODWORD(v45) = 0;
    int v21 = CMPhotoCFDictionaryGetIntIfPresent(v7, @"LowWaterBufferCount", &v45);
    int v22 = v45;
    if (!v45) {
      int v22 = -1;
    }
    if (v21) {
      uint64_t v20 = v22;
    }
    *(void *)(a1 + 88) = v20;
    LODWORD(v45) = 0;
    int v23 = CMPhotoCFDictionaryGetIntIfPresent(v7, @"MinCount", &v45);
    LODWORD(v24) = v45;
    if (!v45) {
      LODWORD(v24) = -1;
    }
    uint64_t v24 = (int)v24;
    if (!v23) {
      uint64_t v24 = v20;
    }
    *(void *)(a1 + 96) = v24;
    uint64_t v25 = *(void *)(a3 + 56);
    uint64_t v45 = 0;
    int Int64IfPresent = CMPhotoCFDictionaryGetInt64IfPresent(v7, @"IOSurfaceAllocateFromSuperbufferID", &v45);
    uint64_t v27 = v45;
    if (!Int64IfPresent) {
      uint64_t v27 = v25;
    }
    *(void *)(a1 + 136) = v27;
    char v28 = *(unsigned char *)(a3 + 48);
    LOBYTE(v45) = 0;
    int BooleanIfPresent = CMPhotoCFDictionaryGetBooleanIfPresent(v7, @"IOSurfaceWiringAssertion", &v45);
    char v30 = 0;
    char v31 = v45;
    if (!BooleanIfPresent) {
      char v31 = v28;
    }
  }
  else
  {
    CFDictionaryRef v7 = 0;
    *(void *)(a1 + 56) = *(void *)(a3 + 16);
    uint64_t v32 = *(void *)(a3 + 24);
    *(void *)(a1 + 64) = v32;
    *(void *)(a1 + 72) = v32;
    *(void *)(a1 + 80) = *(void *)(a3 + 32);
    uint64_t v33 = *(void *)(a3 + 40);
    *(void *)(a1 + 88) = v33;
    *(void *)(a1 + 96) = v33;
    *(void *)(a1 + 136) = *(void *)(a3 + 56);
    char v31 = *(unsigned char *)(a3 + 48);
    char v30 = 1;
  }
  *(unsigned char *)(a1 + 104) = v31;
  *(unsigned char *)(a1 + 128) = 0;
  CMPhotoCFDictionaryGetBooleanIfPresent(v7, @"HighWaterBufferCount_HardLimit", (unsigned char *)(a1 + 128));
  *(unsigned char *)(a1 + 129) = 0;
  CMPhotoCFDictionaryGetBooleanIfPresent(v7, @"HighWaterBytes_HardLimit", (unsigned char *)(a1 + 129));
  if ((v30 & 1) != 0 || (CFDataRef Value = (const __CFData *)CFDictionaryGetValue(v7, @"Sizes")) == 0)
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 48) = 0;
    *(void *)(a1 + 32) = *(void *)a3;
    *(void *)(a1 + 40) = *(void *)(a3 + 8);
  }
  else
  {
    CFDataRef v35 = Value;
    CFTypeID v36 = CFGetTypeID(Value);
    if (v36 == CFDataGetTypeID())
    {
      BytePtr = CFDataGetBytePtr(v35);
      unint64_t Length = CFDataGetLength(v35);
      unint64_t v39 = Length >> 2;
      BOOL v40 = malloc_type_malloc(8 * (Length >> 2), 0x100004000313F17uLL);
      *(void *)(a1 + 32) = v40;
      if (v40)
      {
        *(void *)(a1 + 40) = v39;
        *(unsigned char *)(a1 + 48) = 1;
        if (Length >= 4)
        {
          if (v39 <= 1) {
            uint64_t v41 = 1;
          }
          else {
            uint64_t v41 = Length >> 2;
          }
          do
          {
            unsigned int v43 = *(_DWORD *)BytePtr;
            BytePtr += 4;
            uint64_t v42 = v43;
            if (a4) {
              v42 += a4 + ~((v42 - 1) % a4);
            }
            *v40++ = v42;
            --v41;
          }
          while (v41);
        }
        return 0;
      }
      else
      {
        return 4294950305;
      }
    }
    else
    {
      return 4294950306;
    }
  }
  return result;
}

uint64_t VTDecompressionPluginClass_getDecoderRestrictions(uint64_t a1, uint64_t a2)
{
  CFDictionaryRef propertyValueOut = 0;
  uint64_t result = 4294950306;
  if (a1 && a2)
  {
    uint64_t v5 = *(void *)(a1 + 64);
    *(void *)a2 = 0x1000000040;
    if (*(_DWORD *)(a1 + 72) == 1752589105) {
      int v6 = 64;
    }
    else {
      int v6 = 16;
    }
    *(_DWORD *)(a2 + 48) = v6;
    *(_DWORD *)(a2 + 16) = 0x7FFFFFFF;
    *(void *)(a2 + 32) = 0x7FFFFFFF0003FFC0;
    *(_DWORD *)(a2 + 24) = 262080;
    *(_DWORD *)(a2 + 40) = 262080;
    *(void *)(a2 + 52) = 0x7FFFFFFF0003FFC0;
    *(_DWORD *)(a2 + 20) = v6;
    *(_DWORD *)(a2 + 28) = v6;
    *(_DWORD *)(a2 + 44) = v6;
    if (!VTSessionCopyProperty(*(VTSessionRef *)(v5 + 8), (CFStringRef)*MEMORY[0x1E4F44CD8], (CFAllocatorRef)*MEMORY[0x1E4F1CF80], &propertyValueOut))
    {
      signed int v14 = 64;
      int v15 = 64;
      CMPhotoCFDictionaryGetInt32IfPresent(propertyValueOut, (const void *)*MEMORY[0x1E4F45538], &v14);
      CMPhotoCFDictionaryGetInt32IfPresent(propertyValueOut, (const void *)*MEMORY[0x1E4F45528], &v15);
      if (CMPhotoDecompressionPluginCopyPixelBufferAttributes(a1))
      {
        unint64_t BytesPerPixelForPixelFormat = 1;
        CFTypeID v8 = (void *)(a2 + 40);
        uint64_t v9 = (void *)(a2 + 24);
      }
      else
      {
        uint64_t v9 = (void *)(a2 + 24);
        if (CMPhotoPixelFormatIsPackedYUV(0)) {
          unint64_t BytesPerPixelForPixelFormat = 1;
        }
        else {
          unint64_t BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(0);
        }
        CFTypeID v8 = (void *)(a2 + 40);
      }
      BOOL IsPackedYUV = CMPhotoPixelFormatIsPackedYUV(0);
      int v11 = v14;
      if (IsPackedYUV)
      {
        if (v14 <= (int)((3 * v15 / 4) & 0xFFFFFFFE)) {
          int v11 = (3 * v15 / 4) & 0xFFFFFFFE;
        }
      }
      else if (v15 / BytesPerPixelForPixelFormat >= v14)
      {
        int v11 = v15 / BytesPerPixelForPixelFormat;
      }
      *(_DWORD *)a2 = v11;
      CMPhotoCFDictionaryGetInt32IfPresent(propertyValueOut, (const void *)*MEMORY[0x1E4F45530], (void *)(a2 + 4));
      CMPhotoCFDictionaryGetInt32IfPresent(propertyValueOut, (const void *)*MEMORY[0x1E4F454F8], (void *)(a2 + 16));
      CMPhotoCFDictionaryGetInt32IfPresent(propertyValueOut, (const void *)*MEMORY[0x1E4F45500], v9);
      CMPhotoCFDictionaryGetInt32IfPresent(propertyValueOut, (const void *)*MEMORY[0x1E4F45518], (void *)(a2 + 20));
      CMPhotoCFDictionaryGetInt32IfPresent(propertyValueOut, (const void *)*MEMORY[0x1E4F45520], (void *)(a2 + 28));
      CMPhotoCFDictionaryGetInt32IfPresent(propertyValueOut, (const void *)*MEMORY[0x1E4F454F0], (void *)(a2 + 32));
      CMPhotoCFDictionaryGetInt32IfPresent(propertyValueOut, (const void *)*MEMORY[0x1E4F454E0], (void *)(a2 + 36));
      CMPhotoCFDictionaryGetInt32IfPresent(propertyValueOut, (const void *)*MEMORY[0x1E4F454E8], v8);
      CMPhotoCFDictionaryGetInt32IfPresent(propertyValueOut, (const void *)*MEMORY[0x1E4F45508], (void *)(a2 + 48));
      CMPhotoCFDictionaryGetInt32IfPresent(propertyValueOut, (const void *)*MEMORY[0x1E4F45510], (void *)(a2 + 44));
      int v12 = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a2 + 52) = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a2 + 56) = v12;
      v13.i32[0] = *(_DWORD *)(a2 + 28);
      v13.i32[1] = *(_DWORD *)(a2 + 20);
      *(int32x2_t *)(a2 + 44) = vmin_s32(*(int32x2_t *)(a2 + 44), v13);
    }
    uint64_t result = (uint64_t)propertyValueOut;
    if (propertyValueOut)
    {
      CFRelease(propertyValueOut);
      return 0;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerParseOptions(uint64_t a1, const __CFDictionary *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a5) {
    return 4294950306;
  }
  *(unsigned char *)a5 = 0;
  *(unsigned char *)(a5 + 1) = CMPhotoGetDecodeHighSpeedDefault();
  *(unsigned char *)(a5 + 2) = 0;
  *(void *)(a5 + 56) = 0;
  *(unsigned char *)(a5 + 64) = 0;
  *(unsigned char *)(a5 + 71) = 0;
  *(_DWORD *)(a5 + 66) = 0;
  *(_DWORD *)(a5 + 4) = 875704422;
  *(_WORD *)(a5 + 104) = 1;
  unsigned int v43 = (unsigned char *)(a5 + 104);
  *(unsigned char *)(a5 + 8) = 0;
  *(void *)(a5 + 24) = 0;
  *(void *)(a5 + 32) = 0;
  *(void *)(a5 + 40) = a3;
  *(void *)(a5 + 48) = a4;
  *(_WORD *)(a5 + 20) = 0;
  *(void *)(a5 + 88) = 0;
  *(void *)(a5 + 80) = 0;
  *(_DWORD *)(a5 + 72) = 0;
  *(unsigned char *)(a5 + 120) = 0;
  *(unsigned char *)(a5 + 70) = 0;
  *(_DWORD *)(a5 + 16) = 0;
  *(void *)(a5 + 124) = 0;
  *(unsigned char *)(a5 + 132) = 0;
  *(_WORD *)(a5 + 133) = 1;
  *(unsigned char *)(a5 + 135) = 0;
  *(unsigned char *)(a5 + 76) = 0;
  *(_DWORD *)(a5 + 136) = 0x800000;
  *(_WORD *)(a5 + 140) = 0;
  *(_DWORD *)(a5 + 12) = 0;
  *(unsigned char *)(a5 + 65) = 0;
  if (!a2) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 27) || *(unsigned char *)(a1 + 25))
  {
    if (*(unsigned char *)(a1 + 26))
    {
      int v9 = 2;
    }
    else
    {
      if (!*(unsigned char *)(a1 + 24)) {
        goto LABEL_10;
      }
      int v9 = 1;
    }
    *(_DWORD *)(a5 + 72) = v9;
  }
LABEL_10:
  CFTypeID v44 = (_DWORD *)(a5 + 72);
  CFDataRef Value = (const void *)FigCFDictionaryGetValue();
  if (Value)
  {
    char v48 = 0;
    uint64_t result = CMPhotoDecompressionContainerValidateSourceCropRect(Value, a3, a4, &v48, (int64x2_t *)(a5 + 24));
    if (result) {
      return result;
    }
    *(unsigned char *)(a5 + 21) = v48 == 0;
    *(unsigned char *)(a5 + 133) = 0;
  }
  uint64_t v45 = (_DWORD *)(a5 + 128);
  int v12 = (unsigned char *)(a5 + 141);
  CFDictionaryRef v13 = (const __CFDictionary *)FigCFDictionaryGetValue();
  if (!v13)
  {
    int BooleanIfPresent = 0;
LABEL_20:
    uint64_t v20 = (unsigned char *)(a5 + 65);
    int v22 = (_DWORD *)(a5 + 4);
    int v21 = (_DWORD *)(a5 + 16);
    goto LABEL_22;
  }
  CFDictionaryRef v14 = v13;
  CFTypeID v15 = CFGetTypeID(v13);
  if (v15 != CFDictionaryGetTypeID()) {
    return FigSignalErrorAt();
  }
  CMPhotoCFDictionaryGetIntIfPresent(v14, @"DecodeToHDROutputMode", v45);
  if (*v45 >= 8u) {
    return FigSignalErrorAt();
  }
  CMPhotoCFDictionaryGetBooleanIfPresent(v14, @"DecodeToHDROutputModePreferMeteor", (unsigned char *)(a5 + 132));
  CMPhotoCFDictionaryGetBooleanIfPresent(v14, @"DecodeToHDRAddFlexGTC", (unsigned char *)(a5 + 133));
  CMPhotoCFDictionaryGetBooleanIfPresent(v14, @"DecodeToHDRForceFlexGTCCreation", (unsigned char *)(a5 + 134));
  CMPhotoCFDictionaryGetBooleanIfPresent(v14, @"DecodeToHDRApplyFlexGTC", (unsigned char *)(a5 + 135));
  CMPhotoCFDictionaryGetFloatIfPresent(v14, @"DecodeToHDROutputHeadRoom", (void *)(a5 + 136));
  CMPhotoCFDictionaryGetBooleanIfPresent(v14, @"DecodeToHDROutputDoNotDecodeBaselayer", (unsigned char *)(a5 + 140));
  int v12 = (unsigned char *)(a5 + 141);
  int BooleanIfPresent = CMPhotoCFDictionaryGetBooleanIfPresent(v14, @"DecodeToHDROutputModeUseBaselayerOrientation", (unsigned char *)(a5 + 141));
  uint64_t v17 = (const void *)FigCFDictionaryGetValue();
  if (!v17) {
    goto LABEL_20;
  }
  int v18 = v17;
  CFTypeID v19 = CFGetTypeID(v17);
  uint64_t v20 = (unsigned char *)(a5 + 65);
  int v22 = (_DWORD *)(a5 + 4);
  int v21 = (_DWORD *)(a5 + 16);
  if (v19 != CFDictionaryGetTypeID()) {
    return 4294950306;
  }
  *(void *)(a5 + 144) = v18;
LABEL_22:
  CMPhotoCFDictionaryGetBooleanIfPresent(a2, @"DryRun", (unsigned char *)a5);
  *(unsigned char *)(a5 + 8) = CMPhotoCFDictionaryGetInt32IfPresent(a2, @"OutputPixelFormat", v22);
  int v23 = (__CVBuffer *)FigCFDictionaryGetValue();
  if (v23)
  {
    uint64_t v24 = v23;
    CFTypeID v25 = CFGetTypeID(v23);
    if (v25 != CVPixelBufferGetTypeID()) {
      return FigSignalErrorAt();
    }
    *(void *)(a5 + 88) = v24;
    OSType PixelFormatType = CVPixelBufferGetPixelFormatType(v24);
    uint64_t v27 = (unint64_t *)(a5 + 56);
    if (*(unsigned char *)(a5 + 8))
    {
      if (PixelFormatType != *v22) {
        return FigSignalErrorAt();
      }
    }
    else
    {
      *(_DWORD *)(a5 + 4) = PixelFormatType;
      *(unsigned char *)(a5 + 8) = 1;
    }
  }
  else
  {
    *(void *)(a5 + 88) = 0;
    uint64_t v27 = (unint64_t *)(a5 + 56);
  }
  CMPhotoCFDictionaryGetBooleanIfPresent(a2, @"ApplyTransform", (unsigned char *)(a5 + 71));
  CMPhotoCFDictionaryGetBooleanIfPresent(a2, @"ScaleAuxImageToParentImage", v20);
  if (CMPhotoCFDictionaryGetSizeIfPresent(a2, @"MaxPixelSize", v27))
  {
    if (!*v27) {
      return FigSignalErrorAt();
    }
    CMPhotoCFDictionaryGetBooleanIfPresent(a2, @"UseMaxPixelSizeForShortEdge", (unsigned char *)(a5 + 69));
    CMPhotoCFDictionaryGetBooleanIfPresent(a2, @"AllowMaxPixelSizeUpscale", (unsigned char *)(a5 + 64));
  }
  CMPhotoCFDictionaryGetBooleanIfPresent(a2, @"DisableMSRForTransfer", (unsigned char *)(a5 + 66));
  CMPhotoCFDictionaryGetBooleanIfPresent(a2, @"DisableGPUForTransfer", (unsigned char *)(a5 + 68));
  __int16 v47 = 0;
  CMPhotoCFDictionaryGetBooleanIfPresent(a2, @"RestrictedDecoding", (unsigned char *)&v47 + 1);
  CMPhotoCFDictionaryGetBooleanIfPresent(a2, @"RestrictedTranscoding", &v47);
  char v28 = v47 | HIBYTE(v47);
  *(unsigned char *)(a5 + 105) = v47 | HIBYTE(v47);
  if (!*(_DWORD *)(a1 + 536) && v28 && !VTAreVideoDecodersRunningInProcess()) {
    return FigSignalErrorAt();
  }
  CMPhotoCFDictionaryGetCFValueIfPresent(a2, @"AllowExperimentalCodecs", (void **)(a5 + 112));
  *(unsigned char *)(a5 + 105) &= CMPhotoRestrictedDecodingDisabled() == 0;
  if (!CMPhotoCFDictionaryGetIntIfPresent(a2, @"TiledDownsampling", v21)) {
    goto LABEL_40;
  }
  if (*v21 <= 4u)
  {
    if (!*v27) {
      *int v21 = 0;
    }
    *(unsigned char *)(a5 + 20) = 1;
LABEL_40:
    int IntIfPresent = CMPhotoCFDictionaryGetIntIfPresent(a2, @"AccelerationMode", v44);
    uint64_t v31 = *v44;
    if (IntIfPresent && (v31 >= 3 || v31 == 2 && *(unsigned char *)(a5 + 105))) {
      return FigSignalErrorAt();
    }
    *(_DWORD *)(a5 + 72) = CMPhotoGetEncodeAccelerationModeOverride(v31, v29);
    CMPhotoCFDictionaryGetBooleanIfPresent(a2, @"ForceHighSpeedDecode", (unsigned char *)(a5 + 1));
    CMPhotoCFDictionaryGetBooleanIfPresent(a2, @"HighPriority", (unsigned char *)(a5 + 2));
    CMPhotoCFDictionaryGetBooleanIfPresent(a2, @"PreferLowMemory", (unsigned char *)(a5 + 3));
    if (CMPhotoCFDictionaryGetBooleanIfPresent(a2, @"BackCGImageWithIOSurface", v43))
    {
      if (*v43 && *(unsigned char *)(a5 + 105)) {
        return FigSignalErrorAt();
      }
    }
    else if (*(unsigned char *)(a5 + 105))
    {
      *unsigned int v43 = 0;
    }
    CMPhotoCFDictionaryGetInt32IfPresent(a2, @"ThreadPriority", (void *)(a5 + 124));
    unint64_t v32 = *v27;
    if (*v27)
    {
      unint64_t v33 = *(void *)(a5 + 40);
      unint64_t v34 = *(void *)(a5 + 48);
      if (v33 <= v34) {
        unint64_t v35 = *(void *)(a5 + 48);
      }
      else {
        unint64_t v35 = *(void *)(a5 + 40);
      }
      if (*(unsigned char *)(a5 + 69))
      {
        if (v33 >= v34) {
          unint64_t v33 = *(void *)(a5 + 48);
        }
        signed int v36 = vcvtps_s32_f32((float)((float)v35 / (float)v33) * (float)v32);
        int v37 = v36 + 1;
        BOOL v39 = v36 < 1;
        int v38 = ((_BYTE)v36 - 1) & 1;
        if (v39) {
          int v38 = -v38;
        }
        unint64_t v32 = v37 - v38;
        *uint64_t v27 = (int)v32;
        if (!v32) {
          goto LABEL_62;
        }
      }
      if (v35 == v32)
      {
        *uint64_t v27 = 0;
      }
      else
      {
LABEL_62:
        if (v32) {
          BOOL v39 = (*v21 - 2) > 2;
        }
        else {
          BOOL v39 = 1;
        }
        if (!v39) {
          *(unsigned char *)(a5 + 70) = 1;
        }
      }
    }
    CMPhotoCFDictionaryGetBooleanIfPresent(a2, @"UseEvenScalingMode", (unsigned char *)(a5 + 70));
    *(unsigned char *)(a5 + 70) = CMPhotoGetEvenScalingModeDefault(0, *(unsigned __int8 *)(a5 + 70));
    *(unsigned char *)(a5 + 76) = CMPhotoCFDictionaryGetSizeIfPresent(a2, @"ReservedRequestID", (void *)(a5 + 80));
    CMPhotoCFDictionaryGetBooleanIfPresent(a2, @"UseVTDecompression", (unsigned char *)(a5 + 120));
    BOOL v40 = (const void *)FigCFDictionaryGetValue();
    uint64_t v41 = v40;
    if (v40)
    {
      CFTypeID v42 = CFGetTypeID(v40);
      if (v42 != CGColorSpaceGetTypeID()) {
        return FigSignalErrorAt();
      }
    }
    *(void *)(a5 + 96) = v41;
    if (*(unsigned char *)(a5 + 105)) {
      *CFTypeID v44 = 1;
    }
    if (*v45 == 6 && !BooleanIfPresent) {
      *int v12 = 1;
    }
    if (*v20 && (*v27 || *(unsigned char *)(a5 + 21))) {
      return FigSignalErrorAt();
    }
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t CMPhotoCFDictionaryGetBooleanIfPresent(CFDictionaryRef theDict, const void *a2, unsigned char *a3)
{
  uint64_t result = 0;
  CFTypeRef value = 0;
  if (theDict)
  {
    if (a2)
    {
      if (a3)
      {
        uint64_t result = CFDictionaryGetValueIfPresent(theDict, a2, (const void **)&value);
        if (result)
        {
          CFTypeID v6 = CFGetTypeID(value);
          if (CFBooleanGetTypeID() == v6)
          {
            *a3 = CFBooleanGetValue((CFBooleanRef)value);
            return 1;
          }
          else if (CFNumberGetTypeID() == v6)
          {
            int valuePtr = 0;
            uint64_t result = CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &valuePtr);
            if (result) {
              *a3 = valuePtr != 0;
            }
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t CMPhotoCFDictionaryGetInt32IfPresent(CFDictionaryRef theDict, const void *a2, void *a3)
{
  uint64_t result = 0;
  CFTypeRef value = 0;
  if (theDict)
  {
    if (a2)
    {
      if (a3)
      {
        uint64_t result = CFDictionaryGetValueIfPresent(theDict, a2, (const void **)&value);
        if (result)
        {
          CFTypeID TypeID = CFNumberGetTypeID();
          if (TypeID == CFGetTypeID(value))
          {
            CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, a3);
            return 1;
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t CMPhotoCFDictionaryGetIntIfPresent(CFDictionaryRef theDict, const void *a2, void *a3)
{
  uint64_t result = 0;
  CFTypeRef value = 0;
  if (theDict)
  {
    if (a2)
    {
      if (a3)
      {
        uint64_t result = CFDictionaryGetValueIfPresent(theDict, a2, (const void **)&value);
        if (result)
        {
          CFTypeID TypeID = CFNumberGetTypeID();
          if (TypeID == CFGetTypeID(value))
          {
            CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, a3);
            return 1;
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t CMPhotoCFDictionaryGetCFValueIfPresent(CFDictionaryRef theDict, const void *a2, void **a3)
{
  uint64_t result = 0;
  CFTypeRef value = 0;
  if (theDict)
  {
    if (a2)
    {
      uint64_t result = CFDictionaryGetValueIfPresent(theDict, a2, (const void **)&value);
      if (result)
      {
        CFTypeID v6 = CFGetTypeID(value);
        uint64_t result = 1;
        if (a3)
        {
          if (v6) {
            *a3 = value;
          }
        }
      }
    }
  }
  return result;
}

uint64_t CMPhotoGetDecodeHighSpeedDefault()
{
  if (CMPhotoGetDecodeHighSpeedDefault_onceToken != -1) {
    dispatch_once(&CMPhotoGetDecodeHighSpeedDefault_onceToken, &__block_literal_global_17);
  }
  return 1;
}

uint64_t CMPhotoRestrictedDecodingDisabled()
{
  if (CMPhotoRestrictedDecodingDisabled_onceToken != -1) {
    dispatch_once(&CMPhotoRestrictedDecodingDisabled_onceToken, &__block_literal_global_61);
  }
  return 0;
}

uint64_t CMPhotoGetEvenScalingModeDefault(uint64_t a1, uint64_t a2)
{
  if (CMPhotoGetEvenScalingModeDefault_onceToken != -1) {
    dispatch_once(&CMPhotoGetEvenScalingModeDefault_onceToken, &__block_literal_global_3_0);
  }
  return a2;
}

BOOL CMPhotoPixelFormatIsPackedYUV(int a1)
{
  return a1 == 1882468912 || a1 == 1885745712;
}

uint64_t VTDecompressionPluginClass_copyPixelBufferAttributes(uint64_t a1, _DWORD *a2, __CFDictionary **a3)
{
  uint64_t v6 = *(void *)(a1 + 64);
  CFDictionaryRef propertyValueOut = 0;
  CVPixelBufferPoolRef pool = 0;
  int valuePtr = 0;
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  unsigned int InfoFromFormatDescription = VTSessionCopyProperty(*(VTSessionRef *)(v6 + 8), (CFStringRef)*MEMORY[0x1E4F44C00], (CFAllocatorRef)*MEMORY[0x1E4F1CF80], &propertyValueOut);
  if (InfoFromFormatDescription) {
    BOOL v9 = InfoFromFormatDescription == -12900;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9) {
    goto LABEL_27;
  }
  CFDictionaryRef v10 = propertyValueOut;
  if (!propertyValueOut)
  {
    if (!VTSessionCopyProperty(*(VTSessionRef *)(v6 + 8), (CFStringRef)*MEMORY[0x1E4F44C80], v7, &pool))
    {
      CFDictionaryRef PixelBufferAttributes = CVPixelBufferPoolGetPixelBufferAttributes(pool);
      if (PixelBufferAttributes)
      {
        CFDictionaryRef v10 = (const __CFDictionary *)CFRetain(PixelBufferAttributes);
        CFDictionaryRef propertyValueOut = v10;
        if (v10) {
          goto LABEL_7;
        }
        uint64_t v16 = 0;
      }
      else
      {
        uint64_t v16 = 0;
        CFDictionaryRef propertyValueOut = 0;
      }
      unsigned int v18 = -16994;
      goto LABEL_41;
    }
    CFDictionaryRef v10 = propertyValueOut;
    if (propertyValueOut) {
      goto LABEL_7;
    }
    if (CMPhotoDecompressionUtilityGetNativePixelFormatFromFormatDescription(*(const opaqueCMFormatDescription **)(v6 + 16), 0, &valuePtr))
    {
      LOBYTE(v23) = 1;
      unsigned int InfoFromFormatDescription = CMPhotoGetInfoFromFormatDescription(*(const opaqueCMFormatDescription **)(v6 + 16), 0, 0, 0, &v23, 0, 0, 0, 0, 0, 0, 0);
      if (InfoFromFormatDescription)
      {
LABEL_27:
        unsigned int v18 = InfoFromFormatDescription;
        uint64_t v16 = 0;
        goto LABEL_39;
      }
      uint64_t v16 = 0;
      if ((_BYTE)v23) {
        int v17 = 875704422;
      }
      else {
        int v17 = 875704438;
      }
      int valuePtr = v17;
      if (!a3)
      {
LABEL_37:
        unsigned int v18 = 0;
        if (a2) {
          *a2 = valuePtr;
        }
        goto LABEL_39;
      }
    }
    else
    {
      uint64_t v16 = 0;
      if (!a3) {
        goto LABEL_37;
      }
    }
LABEL_36:
    *a3 = v16;
    uint64_t v16 = 0;
    goto LABEL_37;
  }
LABEL_7:
  int v11 = (const void *)*MEMORY[0x1E4F24D70];
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v10, (const void *)*MEMORY[0x1E4F24D70]);
  if (!Value) {
    goto LABEL_52;
  }
  CFArrayRef ValueAtIndex = Value;
  CFTypeID v14 = CFGetTypeID(Value);
  if (v14 == CFArrayGetTypeID())
  {
    int v23 = 0;
    if (CFArrayGetCount(ValueAtIndex) < 1) {
      goto LABEL_52;
    }
    if (CFArrayGetCount(ValueAtIndex) >= 1)
    {
      CFIndex v15 = 0;
      while (!FigCFArrayGetInt32AtIndex()
           || !CMPhotoIsDecoderOutputPixelFormatAccepted(v23)
           || CMPhotoPixelFormatIsPackedYUV(v23) && !*(unsigned char *)(v6 + 41))
      {
        if (++v15 >= CFArrayGetCount(ValueAtIndex)) {
          goto LABEL_32;
        }
      }
      CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(ValueAtIndex, v15);
    }
  }
LABEL_32:
  CFTypeID v20 = CFGetTypeID(ValueAtIndex);
  if (v20 == CFNumberGetTypeID())
  {
    if (CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr))
    {
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(*(CFAllocatorRef *)a1, 0, propertyValueOut);
      uint64_t v16 = MutableCopy;
      if (MutableCopy)
      {
        CFDictionaryRemoveValue(MutableCopy, v11);
        CFDictionaryRemoveValue(v16, (const void *)*MEMORY[0x1E4F24D08]);
        CFDictionaryRemoveValue(v16, (const void *)*MEMORY[0x1E4F24E10]);
        if (!a3) {
          goto LABEL_37;
        }
        goto LABEL_36;
      }
      goto LABEL_53;
    }
LABEL_52:
    uint64_t v16 = 0;
LABEL_53:
    unsigned int v18 = -16994;
    goto LABEL_39;
  }
  uint64_t v16 = 0;
  unsigned int v18 = -16995;
LABEL_39:
  if (propertyValueOut) {
    CFRelease(propertyValueOut);
  }
LABEL_41:
  if (pool) {
    CFRelease(pool);
  }
  if (v16) {
    CFRelease(v16);
  }
  if ((v18 | 2) == 0x44E) {
    return 4294951826;
  }
  else {
    return v18;
  }
}

uint64_t CMPhotoDecompressionPluginCopyPixelBufferAttributes(uint64_t a1)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1) {
    uint64_t v2 = *(void *)(a1 + 40);
  }
  else {
    uint64_t v2 = 0;
  }
  if (!*(void *)(v2 + 24)) {
    return 4294950302;
  }
  if (v1) {
    uint64_t v3 = *(void *)(a1 + 40);
  }
  else {
    uint64_t v3 = 0;
  }
  return (*(uint64_t (**)(void))(v3 + 24))();
}

uint64_t CMPhotoIsDecoderOutputPixelFormatAccepted(int a1)
{
  uint64_t result = 1;
  if (a1 > 1885745711)
  {
    if (a1 <= 2016687155)
    {
      if (a1 <= 1952854575)
      {
        if (a1 == 1885745712) {
          return result;
        }
        int v3 = 1949577776;
        goto LABEL_30;
      }
      if (a1 != 1952854576 && a1 != 2016686640)
      {
        int v3 = 2016686642;
        goto LABEL_30;
      }
    }
    else if (a1 > 2019963955)
    {
      if (a1 != 2019963956 && a1 != 2037741158)
      {
        int v3 = 2037741171;
        goto LABEL_30;
      }
    }
    else if (a1 != 2016687156 && a1 != 2019963440)
    {
      int v3 = 2019963442;
      goto LABEL_30;
    }
  }
  else
  {
    if (a1 > 875836533)
    {
      if (a1 <= 1278226735)
      {
        if (a1 == 875836534) {
          return result;
        }
        int v3 = 1278226488;
      }
      else
      {
        if ((a1 - 1278226736) <= 6 && ((1 << (a1 - 48)) & 0x45) != 0) {
          return result;
        }
        int v3 = 1882468912;
      }
LABEL_30:
      if (a1 != v3) {
        return 0;
      }
      return result;
    }
    if (a1 <= 875704933)
    {
      if (a1 == 875704422) {
        return result;
      }
      int v3 = 875704438;
      goto LABEL_30;
    }
    if (a1 != 875704934 && a1 != 875704950)
    {
      int v3 = 875836518;
      goto LABEL_30;
    }
  }
  return result;
}

uint64_t CMPhotoUnifiedJPEGEncoderCreate(const __CFAllocator *a1, const void *a2, const void *a3, int a4, void *a5)
{
  if (!a5) {
    return 4294950306;
  }
  CFDictionaryRef v10 = CFAllocatorAllocate(a1, 80, 0);
  if (!v10) {
    return 4294950305;
  }
  int v11 = v10;
  v10[3] = 0u;
  v10[4] = 0u;
  v10[1] = 0u;
  v10[2] = 0u;
  *CFDictionaryRef v10 = 0u;
  if (a1) {
    CFTypeRef v12 = CFRetain(a1);
  }
  else {
    CFTypeRef v12 = 0;
  }
  *(void *)int v11 = v12;
  if (a2) {
    CFTypeRef v13 = CFRetain(a2);
  }
  else {
    CFTypeRef v13 = 0;
  }
  *((void *)v11 + 2) = v13;
  if (a3) {
    CFTypeRef v14 = CFRetain(a3);
  }
  else {
    CFTypeRef v14 = 0;
  }
  uint64_t result = 0;
  *((void *)v11 + 1) = v14;
  *((_DWORD *)v11 + 6) = a4;
  *a5 = v11;
  return result;
}

void CMPhotoUnifiedJPEGEncoderDestroy(void *a1)
{
  if (a1)
  {
    CFAllocatorRef v3 = *(const __CFAllocator **)a1;
    uint64_t v2 = (const void *)*((void *)a1 + 1);
    if (v2) {
      CFRelease(v2);
    }
    uint64_t v4 = (const void *)*((void *)a1 + 2);
    if (v4) {
      CFRelease(v4);
    }
    free(*((void **)a1 + 8));
    CFAllocatorDeallocate(v3, a1);
    if (v3)
    {
      CFRelease(v3);
    }
  }
}

uint64_t CMPhotoDecompressionContainerValidateSourceCropRect(const void *a1, uint64_t a2, uint64_t a3, unsigned char *a4, int64x2_t *a5)
{
  if (!a1) {
    return 4294950306;
  }
  CFTypeID v10 = CFGetTypeID(a1);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  uint64_t result = 4294950306;
  if (a5 && v10 == TypeID)
  {
    CGSize v13 = *(CGSize *)(MEMORY[0x1E4F1DB20] + 16);
    v22.origin = (CGPoint)*MEMORY[0x1E4F1DB20];
    v22.size = v13;
    if (!CGRectMakeWithDictionaryRepresentation((CFDictionaryRef)a1, &v22)) {
      return FigSignalErrorAt();
    }
    int64x2_t v14 = (int64x2_t)vcvtq_u64_f64(vrndaq_f64((float64x2_t)v22.origin));
    int8x16_t v15 = (int8x16_t)vcvtq_u64_f64(vrndaq_f64((float64x2_t)v22.size));
    char v16 = a2 | a3;
    if (a2 | a3)
    {
      v17.i64[0] = a2;
      v17.i64[1] = a3;
      int64x2_t v18 = vsubq_s64(v17, v14);
      int8x16_t v19 = vandq_s8((int8x16_t)v18, (int8x16_t)vcgtzq_s64(v18));
      int8x16_t v15 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v19, (uint64x2_t)v15), v15, v19);
      if (v15.i64[0]) {
        BOOL v20 = v15.i64[1] == 0;
      }
      else {
        BOOL v20 = 1;
      }
      if (v20) {
        return 4294950306;
      }
      char v16 = a2 == v15.i64[0] && a3 == v15.i64[1];
    }
    if (a4) {
      *a4 = v16;
    }
    uint64_t result = 0;
    *a5 = v14;
    a5[1] = (int64x2_t)v15;
  }
  return result;
}

uint64_t _createImageForIndex(uint64_t a1, unint64_t a2, const __CFDictionary *a3, int a4, CFTypeRef *a5)
{
  CFTypeRef cf = 0;
  unint64_t v14 = a2;
  unsigned __int8 v12 = 0;
  uint64_t v9 = _checkImageIndex(a1 + 40, &v14, &v12);
  if (v9) {
    return v9;
  }
  uint64_t v10 = _decodeImage(*(const __CFAllocator **)(a1 + 40), a1, *(const void **)(a1 + 64), 0, 0, a3, v12, 0, a4, 0, (CGImageRef *)&cf);
  if (v10)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    *a5 = cf;
  }
  return v10;
}

uint64_t _createImageForIndex_0(uint64_t a1, uint64_t a2, const __CFDictionary *a3, int a4, CGImageRef *a5)
{
  return _decodeImage_0(a1, a2, a3, 0, a4, 0, a5);
}

uint64_t _createImageForIndex_1(void *a1, uint64_t a2, CFDictionaryRef theDict, int a4, CGImageRef *a5)
{
  CFTypeRef cf = 0;
  CFTypeRef v35 = 0;
  CFTypeRef v32 = 0;
  CFTypeRef v33 = 0;
  CFTypeRef v30 = 0;
  CFTypeRef v31 = 0;
  *(void *)uint64_t v29 = 0;
  char v28 = 0;
  int v27 = 0;
  if (theDict)
  {
    if (CFDictionaryGetValue(theDict, @"UseProvidedPixelBuffer")
      && CFDictionaryContainsKey(theDict, @"BackCGImageWithIOSurface"))
    {
      uint64_t v10 = FigSignalErrorAt();
      goto LABEL_34;
    }
    if (CFDictionaryGetValue(theDict, @"DryRun")) {
      goto LABEL_8;
    }
  }
  CMPhotoDecompressionContainerFindFirstAuxiliaryOfTypeForInternalIndexWithOptions(a1, a2, 0, 3, 0, &v28, (uint64_t *)v29);
  if (!v28)
  {
LABEL_8:
    int ShouldDecodeAlphaAutomatically = 0;
  }
  else
  {
    int v26 = 0;
    uint64_t v10 = _copyImageSubsamplingForIndex_1((uint64_t)a1, a2, &v26);
    if (v10)
    {
LABEL_34:
      uint64_t v22 = v10;
      goto LABEL_40;
    }
    int ShouldDecodeAlphaAutomatically = CMPhotoShouldDecodeAlphaAutomatically(theDict, v26, &v27);
  }
  uint64_t v12 = a1[6];
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  int8x16_t v15 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, void))(v14 + 16);
  if (!v15)
  {
    uint64_t v22 = 4294954514;
    goto LABEL_40;
  }
  uint64_t v10 = v15(v12, a2, &v35, 0);
  if (v10) {
    goto LABEL_34;
  }
  if (!ShouldDecodeAlphaAutomatically)
  {
    uint64_t v10 = _decodeImage_1(a1, v35, 0, a2, theDict, 0, a4, 0, a5);
    goto LABEL_34;
  }
  int v26 = 2;
  uint64_t AuxiliaryImageForIndex_0 = CMPhotoDecompressionContainerCreateAlphaDecodeOptionsForInternalIndex((uint64_t)a1, a2, (uint64_t)theDict, v27, &v32, (__CFDictionary **)&v31);
  if (!AuxiliaryImageForIndex_0)
  {
    uint64_t AuxiliaryImageForIndex_0 = (uint64_t)_createAuxiliaryImageForIndex_0(a1, a2, *(uint64_t *)v29, (CFDictionaryRef)v31, 2, (CGImageRef *)&v33);
    if (!AuxiliaryImageForIndex_0)
    {
      int v17 = a4 == 5 ? 5 : 2;
      uint64_t AuxiliaryImageForIndex_0 = _decodeImage_1(a1, v35, 0, a2, (const __CFDictionary *)v32, 0, v17, 0, (CGImageRef *)&cf);
      if (!AuxiliaryImageForIndex_0)
      {
        if (_copyAuxiliaryImageTypeInfo((uint64_t)a1, a2, *(uint64_t *)v29, v18, 0, (uint64_t)&v30)
          || !v30
          || (_readAlphaInfoSEIPayload((uint64_t)v30, &v26), int v19 = v26, v26 == 2))
        {
          int v19 = 0;
        }
        if (a4 == 5)
        {
          if (cf && (CFTypeID v20 = CFGetTypeID(cf), v20 == CFDictionaryGetTypeID()))
          {
            uint64_t AuxiliaryImageForIndex_0 = FigCFDictionarySetInt();
            if (!AuxiliaryImageForIndex_0)
            {
              FigCFDictionarySetValue();
              int v21 = (CGImage *)cf;
              if (cf) {
                int v21 = (CGImage *)CFRetain(cf);
              }
              uint64_t v22 = 0;
              *a5 = v21;
              goto LABEL_38;
            }
          }
          else
          {
            uint64_t AuxiliaryImageForIndex_0 = FigSignalErrorAt();
          }
        }
        else
        {
          __int16 v25 = 0;
          CMPhotoCFDictionaryGetBooleanIfPresent(theDict, @"BackCGImageWithIOSurface", (unsigned char *)&v25 + 1);
          CMPhotoCFDictionaryGetBooleanIfPresent(theDict, @"PremultiplyWithAlpha", &v25);
          if (!CMPhotoCreateImageFromAlphaAndMainBuffer((__CVBuffer *)cf, (__CVBuffer *)v33, v19, v25, HIBYTE(v25), a4, a5)|| (CFAllocatorRef v23 = CFGetAllocator(a1), AuxiliaryImageForIndex_0 = CMPhotoCreateWrappedPixelBufferForType(v23, (CVPixelBufferRef)cf, HIBYTE(v25), a4, a5), !AuxiliaryImageForIndex_0))
          {
            uint64_t v22 = 0;
            goto LABEL_38;
          }
        }
      }
    }
  }
  uint64_t v22 = AuxiliaryImageForIndex_0;
LABEL_38:
  if (v32) {
    CFRelease(v32);
  }
LABEL_40:
  if (v30) {
    CFRelease(v30);
  }
  if (v31) {
    CFRelease(v31);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v33) {
    CFRelease(v33);
  }
  if (v35) {
    CFRelease(v35);
  }
  return v22;
}

uint64_t _createImageForIndex_2(uint64_t a1, uint64_t a2, const __CFDictionary *a3, int a4, CGImageRef *a5)
{
  v35[1] = *(const void **)MEMORY[0x1E4F143B8];
  CFDictionaryRef v33 = 0;
  CMSampleBufferRef v34 = 0;
  CGImageRef v31 = 0;
  CFTypeRef v32 = 0;
  uint64_t v27 = 0;
  char v28 = &v27;
  uint64_t v29 = 0x2000000000;
  uint64_t v30 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = &v23;
  uint64_t v25 = 0x2000000000;
  int v26 = 0;
  int v22 = 0;
  if (!*(unsigned char *)(a1 + 112))
  {
    uint64_t WrappedPixelBufferForType = FigSignalErrorAt();
    goto LABEL_24;
  }
  if (a3)
  {
    v35[0] = @"DryRun";
    uint64_t v10 = _checkForUnsupportedKeys(a3, v35);
    if (v10) {
      goto LABEL_25;
    }
  }
  uint64_t WrappedPixelBufferForType = _moveSampleCursorToIndexAndCreateSampleBuffer(*(const __CFAllocator **)(a1 + 40), a2, *(void *)(a1 + 80), &v34);
  if (WrappedPixelBufferForType) {
    goto LABEL_24;
  }
  CFArrayRef v12 = *(const __CFArray **)(a1 + 96);
  if (!v12
    || ((CFIndex Count = CFArrayGetCount(v12), Count >= 1) ? (v14 = 0) : (v14 = -1),
        Count < 1 || !CMPhotoShouldDecodeAlphaAutomatically(a3, 0, &v22)))
  {
    uint64_t WrappedPixelBufferForType = _decodePixelBufferForImageIndex(*(const __CFAllocator **)(a1 + 40), (uint64_t *)a1, a2, (uint64_t)v34, *(void *)(a1 + 80), a3, a4, a5);
    goto LABEL_24;
  }
  int8x16_t v15 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  uint64_t WrappedPixelBufferForType = CMPhotoDecompressionContainerCreateAlphaDecodeOptionsForInternalIndex(a1, a2, (uint64_t)a3, v22, &v33, &v32);
  if (WrappedPixelBufferForType) {
    goto LABEL_24;
  }
  char v16 = *(NSObject **)(a1 + 104);
  if (!v16)
  {
    char v16 = dispatch_queue_create("com.apple.coremedia.decodeasyncauxiliary", 0);
    *(void *)(a1 + 104) = v16;
    if (!v16)
    {
      uint64_t v10 = 4294950305;
      goto LABEL_25;
    }
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = *(void *)"";
  block[2] = ___createImageForIndex_block_invoke;
  block[3] = &unk_1E5E2EFE0;
  block[6] = a1;
  block[7] = a2;
  block[8] = v14;
  block[9] = v32;
  block[4] = &v23;
  void block[5] = &v27;
  dispatch_async(v16, block);
  uint64_t v17 = _decodePixelBufferForImageIndex(*(const __CFAllocator **)(a1 + 40), (uint64_t *)a1, a2, (uint64_t)v34, *(void *)(a1 + 80), v33, 2, &v31);
  if (v17)
  {
    uint64_t v10 = v17;
    dispatch_sync(*(dispatch_queue_t *)(a1 + 104), &__block_literal_global_18_0);
    goto LABEL_25;
  }
  LOBYTE(v35[0]) = 0;
  unsigned __int8 v20 = 0;
  CMPhotoCFDictionaryGetBooleanIfPresent(a3, @"BackCGImageWithIOSurface", v35);
  CMPhotoCFDictionaryGetBooleanIfPresent(a3, @"PremultiplyWithAlpha", &v20);
  dispatch_sync(*(dispatch_queue_t *)(a1 + 104), &__block_literal_global_13);
  uint64_t v10 = *((unsigned int *)v24 + 6);
  if (v10) {
    goto LABEL_25;
  }
  if (CMPhotoCreateImageFromAlphaAndMainBuffer(v31, (__CVBuffer *)v28[3], 2, v20, LOBYTE(v35[0]), a4, a5))
  {
    uint64_t WrappedPixelBufferForType = CMPhotoCreateWrappedPixelBufferForType(*(const __CFAllocator **)(a1 + 40), v31, LOBYTE(v35[0]), a4, a5);
    if (WrappedPixelBufferForType)
    {
LABEL_24:
      uint64_t v10 = WrappedPixelBufferForType;
      goto LABEL_25;
    }
  }
  if (*v15 == 1) {
    kdebug_trace();
  }
  uint64_t v10 = 0;
LABEL_25:
  if (v33) {
    CFRelease(v33);
  }
  if (v32) {
    CFRelease(v32);
  }
  if (v31) {
    CFRelease(v31);
  }
  uint64_t v18 = (const void *)v28[3];
  if (v18) {
    CFRelease(v18);
  }
  if (v34) {
    CFRelease(v34);
  }
  _Block_object_dispose(&v23, 8);
  _Block_object_dispose(&v27, 8);
  return v10;
}

uint64_t _decodeImage(const __CFAllocator *a1, uint64_t a2, const void *a3, int a4, unint64_t a5, const __CFDictionary *a6, int a7, uint64_t a8, int a9, unsigned __int8 a10, CGImageRef *a11)
{
  uint64_t v11 = a8;
  if (a8) {
    uint64_t v19 = a8;
  }
  else {
    uint64_t v19 = a2;
  }
  uint64_t v134 = 0;
  long long v132 = 0u;
  *(_OWORD *)size_t v133 = 0u;
  long long v130 = 0u;
  *(_OWORD *)char v131 = 0u;
  long long v129 = 0u;
  memset(v128, 0, sizeof(v128));
  *(_OWORD *)pixelFormat = 0u;
  CFTypeRef v125 = 0;
  CFTypeRef v126 = 0;
  CFTypeRef cf = 0;
  CVBufferRef buffer = 0;
  size_t v122 = 0;
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  if (v11 && CMPhotoDecompressionSessionAsyncRequestCancelled(*(void *)(a2 + 16), v11)) {
    goto LABEL_263;
  }
  CFAllocatorRef v96 = a1;
  uint64_t v20 = a2 + 40;
  if (a4 == 2)
  {
    uint64_t ImageSize = _parseMPOIfNeeded(a2 + 40);
    if (ImageSize) {
      goto LABEL_262;
    }
  }
  long long v121 = 0uLL;
  uint64_t ImageSize = _getImageSize(a2 + 40, a4, a7, a5, &v121);
  if (ImageSize) {
    goto LABEL_262;
  }
  uint64_t ImageSize = _parseImageSizeAndTypeIfNeeded(a2 + 40);
  if (ImageSize) {
    goto LABEL_262;
  }
  uint64_t ImageSize = _parseOptionsForJPEGDecoding(a2, a6, v121, *((uint64_t *)&v121 + 1), a4, *(unsigned char *)(a2 + 133), (uint64_t)pixelFormat);
  if (ImageSize) {
    goto LABEL_262;
  }
  int v22 = a10;
  if (a10 && LOBYTE(pixelFormat[0]))
  {
LABEL_261:
    uint64_t ImageSize = FigSignalErrorAt();
    goto LABEL_262;
  }
  if (a4 == 2 && BYTE1(v129))
  {
    uint64_t ImageSize = _parseImageSizeAndTypeIfNeeded(a2 + 40);
    if (ImageSize) {
      goto LABEL_262;
    }
    unint64_t v23 = *(void *)(a2 + 112);
    if (v23 <= *(void *)(a2 + 120)) {
      unint64_t v23 = *(void *)(a2 + 120);
    }
    *((void *)&v128[2] + 1) = v23;
    LOBYTE(v129) = 1;
  }
  unint64_t v97 = a3;
  if (a7 && !*(_DWORD *)v133) {
    *(_DWORD *)size_t v133 = 1;
  }
  if (BYTE5(v128[0]))
  {
    *(_OWORD *)CFTypeRef value = *(_OWORD *)((char *)v128 + 8);
    long long v106 = *(_OWORD *)((char *)&v128[1] + 8);
    uint64_t ImageSize = CMPhotoGetTwoPassCropRects(pixelFormat[1], (unint64_t *)value, v121, *((unint64_t *)&v121 + 1), 0, 0);
    if (ImageSize) {
      goto LABEL_262;
    }
  }
  if (!a4)
  {
    uint64_t ImageSize = _parseImageSizeAndTypeIfNeeded(a2 + 40);
    if (ImageSize) {
      goto LABEL_262;
    }
    *(void *)&v135[0] = 0;
    uint64_t v25 = *(void *)(a2 + 64);
    uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v26) {
      uint64_t v27 = v26;
    }
    else {
      uint64_t v27 = 0;
    }
    uint64_t v29 = *(uint64_t (**)(uint64_t, void, _OWORD *))(v27 + 24);
    if (v29)
    {
      uint64_t ImageSize = v29(v25, 0, v135);
      if (ImageSize) {
        goto LABEL_262;
      }
      uint64_t v24 = *(void *)&v135[0];
      if ((*(void *)&v135[0] & 0x8000000000000000) != 0)
      {
        uint64_t WrappedPixelBufferForType = 4294950190;
        goto LABEL_88;
      }
      uint64_t v20 = a2 + 40;
      uint64_t v93 = 0;
      int v22 = a10;
      goto LABEL_43;
    }
    uint64_t WrappedPixelBufferForType = 4294954514;
LABEL_88:
    CFDictionaryRef v53 = 0;
    uint64_t v54 = 0;
LABEL_89:
    CFTypeID v55 = (_DWORD *)MEMORY[0x1E4F1EBA8];
    goto LABEL_272;
  }
  if (a4 == 1)
  {
    uint64_t ImageSize = _parseExifIfNeeded(a2 + 40, 0);
    if (ImageSize) {
      goto LABEL_262;
    }
    if (*(unsigned char *)(a2 + 312))
    {
      uint64_t v24 = *(void *)(a2 + 352);
      uint64_t v93 = *(void *)(a2 + 288) + *(void *)(a2 + 344);
      goto LABEL_43;
    }
    goto LABEL_37;
  }
  if (a4 != 2)
  {
LABEL_37:
    uint64_t WrappedPixelBufferForType = 4294950306;
    goto LABEL_88;
  }
  value[0] = 0;
  uint64_t ImageSize = _getAuxiliaryImageStorageForIndex(a2 + 40, a7, a5, value);
  if (ImageSize) {
    goto LABEL_262;
  }
  uint64_t v24 = *((void *)value[0] + 7);
  uint64_t v93 = *((void *)value[0] + 6);
LABEL_43:
  uint64_t v94 = v24;
  if (!BYTE7(v129))
  {
LABEL_47:
    int v30 = 1;
    goto LABEL_48;
  }
  uint64_t ImageSize = _parseExifIfNeeded(v20, 0);
  if (ImageSize)
  {
LABEL_262:
    uint64_t WrappedPixelBufferForType = ImageSize;
    goto LABEL_88;
  }
  if (!*(unsigned char *)(a2 + 281)) {
    goto LABEL_47;
  }
  int v30 = *(_DWORD *)(a2 + 304);
LABEL_48:
  int v92 = v30;
  uint64_t ImageSize = CMPhotoDecompressionSessionCopyScaler(*(void *)(a2 + 16), &v126);
  if (ImageSize) {
    goto LABEL_262;
  }
  uint64_t ImageSize = CMPhotoDecompressionSessionCopySurfacePool(*(void *)(a2 + 16), &v125);
  if (ImageSize) {
    goto LABEL_262;
  }
  BOOL v119 = 0;
  uint64_t v120 = 0;
  int8x16_t v118 = 0uLL;
  int8x16_t v117 = 0uLL;
  unsigned int v116 = 0;
  char v115 = 0;
  long long v111 = *(_OWORD *)v131;
  long long v112 = v132;
  long long v113 = *(_OWORD *)v133;
  uint64_t v114 = v134;
  long long v107 = v128[1];
  long long v108 = v128[2];
  long long v109 = v129;
  long long v110 = v130;
  *(_OWORD *)CFTypeRef value = *(_OWORD *)pixelFormat;
  long long v106 = v128[0];
  uint64_t ImageSize = _determineDecodeStrategy(a2, v11, (uint64_t)value, v121, *((unint64_t *)&v121 + 1), (uint64_t)v125, (unint64_t *)&v119, &v118, &v117, &v116, &v115);
  if (ImageSize) {
    goto LABEL_262;
  }
  if (*((void *)&v130 + 1))
  {
    value[0] = 0;
    value[1] = 0;
    CMPhotoGetPixelBufferCLAP(*((__CVBuffer **)&v130 + 1), 0, 0, value, &value[1]);
    if (*(_OWORD *)value != *(_OWORD *)&v117) {
      goto LABEL_261;
    }
  }
  if (v11 && CMPhotoDecompressionSessionAsyncRequestCancelled(*(void *)(a2 + 16), v11))
  {
LABEL_263:
    CFDictionaryRef v53 = 0;
    uint64_t v54 = 0;
    uint64_t WrappedPixelBufferForType = 4294950191;
    goto LABEL_89;
  }
  if (BYTE5(v128[0]))
  {
    long long v103 = *(_OWORD *)((char *)v128 + 8);
    long long v104 = *(_OWORD *)((char *)&v128[1] + 8);
  }
  else
  {
    long long v103 = 0u;
    long long v104 = 0u;
  }
  uint64_t v100 = v19;
  int v31 = LOBYTE(pixelFormat[0]);
  int v99 = a7;
  if (a4 != 1 && LOBYTE(pixelFormat[0]))
  {
    int v88 = v22;
    uint64_t v89 = v20;
    unint64_t v90 = a5;
    uint64_t v91 = v11;
    CFTypeRef v32 = v125;
    CFTypeRef v33 = v126;
    int v34 = DWORD2(v129);
    uint64_t v35 = pixelFormat[1];
    uint64_t v36 = v116;
    CFAllocatorRef v37 = *(const __CFAllocator **)(a2 + 40);
    CPUCFIndex Count = CMPhotoGetCPUCount();
    _dropPreparedDecoders(a2);
    if (CPUCount)
    {
      uint64_t v39 = pthread_mutex_lock(*(pthread_mutex_t **)(a2 + 72));
      if (v39)
      {
        uint64_t WrappedPixelBufferForType = v39;
      }
      else
      {
        if (*(void *)(a2 + 88)
          || (CFMutableArrayRef Mutable = CFArrayCreateMutable(v37, 0, 0), (*(void *)(a2 + 88) = Mutable) != 0))
        {
          uint64_t v41 = *(void *)(a2 + 96);
          *(_OWORD *)CFTypeRef value = v103;
          long long v106 = v104;
          uint64_t Clone = CMPhotoUnifiedJPEGDecoderPrepare(v41, (uint64_t)v32, (uint64_t)v33, v34, v35, (uint64_t)value, v36, v100);
          if (!Clone)
          {
            uint64_t v43 = CPUCount;
            while (1)
            {
              value[0] = 0;
              uint64_t Clone = CMPhotoUnifiedJPEGDecoderCreateClone(*(void *)(a2 + 96), v100, value);
              if (Clone) {
                break;
              }
              --v43;
              CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 88), value[0]);
              if (!v43)
              {
                *(unsigned char *)(a2 + 80) = 1;
                pthread_mutex_unlock(*(pthread_mutex_t **)(a2 + 72));
                goto LABEL_69;
              }
            }
          }
          uint64_t WrappedPixelBufferForType = Clone;
        }
        else
        {
          uint64_t WrappedPixelBufferForType = 4294950305;
        }
        pthread_mutex_unlock(*(pthread_mutex_t **)(a2 + 72));
      }
      CFTypeID v55 = (_DWORD *)MEMORY[0x1E4F1EBA8];
      _dropPreparedDecoders(a2);
      CFDictionaryRef v53 = 0;
      uint64_t v54 = 0;
      goto LABEL_272;
    }
LABEL_69:
    int v31 = LOBYTE(pixelFormat[0]);
    a5 = v90;
    uint64_t v11 = v91;
    a7 = v99;
    uint64_t v20 = v89;
    int v22 = v88;
  }
  if (v31)
  {
    CFDictionaryRef v53 = 0;
    uint64_t v54 = 0;
    uint64_t WrappedPixelBufferForType = 0;
    goto LABEL_89;
  }
  if (v115) {
    BOOL v44 = 1;
  }
  else {
    BOOL v44 = *((void *)&v130 + 1) == 0;
  }
  if (v44) {
    uint64_t v45 = 0;
  }
  else {
    uint64_t v45 = (__CVBuffer *)*((void *)&v130 + 1);
  }
  if (!a4)
  {
    if (!v22)
    {
      uint64_t v46 = v20;
      BOOL v98 = 0;
      uint64_t WrappedPixelBufferForType = 0;
      size_t v122 = *(const void **)(a2 + 96);
      char v47 = 1;
      goto LABEL_96;
    }
    if (*(unsigned char *)(a2 + 80))
    {
      uint64_t v48 = v20;
      uint64_t v49 = pthread_mutex_lock(*(pthread_mutex_t **)(a2 + 72));
      if (v49)
      {
        uint64_t WrappedPixelBufferForType = v49;
      }
      else
      {
        uint64_t v50 = v11;
        CFArrayRef v51 = *(const __CFArray **)(a2 + 88);
        if (CFArrayGetCount(v51) <= 0)
        {
          uint64_t WrappedPixelBufferForType = FigSignalErrorAt();
        }
        else
        {
          CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(v51, 0);
          CFArrayRemoveValueAtIndex(v51, 0);
          uint64_t WrappedPixelBufferForType = 0;
          size_t v122 = ValueAtIndex;
        }
        pthread_mutex_unlock(*(pthread_mutex_t **)(a2 + 72));
        uint64_t v11 = v50;
      }
      uint64_t v20 = v48;
      BOOL v98 = WrappedPixelBufferForType == 0;
      a7 = v99;
    }
    else
    {
      BOOL v98 = 0;
      uint64_t WrappedPixelBufferForType = 0;
    }
    if (v122)
    {
      uint64_t v46 = v20;
    }
    else
    {
      uint64_t v46 = v20;
      uint64_t WrappedPixelBufferForType = CMPhotoUnifiedJPEGDecoderCreate(*(const void **)(a2 + 16), *(CFAllocatorRef *)(a2 + 40), *(void *)(a2 + 112), *(void *)(a2 + 120), *(const void **)(a2 + 64), 0, 0, *(const void **)(a2 + 56), *(_DWORD *)(a2 + 48), (uint64_t *)&v122);
      if (WrappedPixelBufferForType)
      {
        uint64_t v54 = 0;
        CFDictionaryRef v53 = 0;
        CFTypeID v55 = (_DWORD *)MEMORY[0x1E4F1EBA8];
        if (v98) {
          goto LABEL_246;
        }
LABEL_272:
        CMPhotoUnifiedJPEGDecoderDestroy((uint64_t)v122);
        goto LABEL_273;
      }
    }
    char v47 = 0;
    goto LABEL_96;
  }
  uint64_t WrappedPixelBufferForType = CMPhotoUnifiedJPEGDecoderCreate(*(const void **)(a2 + 16), *(CFAllocatorRef *)(a2 + 40), v121, *((uint64_t *)&v121 + 1), v97, v93, v94, v97, 5, (uint64_t *)&v122);
  if (WrappedPixelBufferForType)
  {
    CFDictionaryRef v53 = 0;
    uint64_t v54 = 0;
    goto LABEL_89;
  }
  uint64_t v46 = v20;
  char v47 = 0;
  BOOL v98 = 0;
LABEL_96:
  char v95 = v47;
  if (a4 != 2 && v133[12])
  {
    if (*(_DWORD *)v133 == 6)
    {
      CFDictionaryRef v53 = 0;
      uint64_t v54 = 0;
      int v56 = v100;
      if (!v11)
      {
LABEL_182:
        BOOL v44 = a4 == 2;
        CFTypeID v55 = (_DWORD *)MEMORY[0x1E4F1EBA8];
        if (v44) {
          goto LABEL_235;
        }
        int v72 = *(_DWORD *)v133;
        unsigned __int8 v102 = 0;
        uint64_t v101 = -1;
        uint64_t FirstAuxiliaryOfTypeForInternalIndexWithOptions = CMPhotoDecompressionContainerFindFirstAuxiliaryOfTypeForInternalIndexWithOptions((void *)a2, 0, 0, 4, @"urn:com:apple:photo:2020:aux:hdrgainmap", (char *)&v102, &v101);
        if (FirstAuxiliaryOfTypeForInternalIndexWithOptions)
        {
          uint64_t WrappedPixelBufferForType = FirstAuxiliaryOfTypeForInternalIndexWithOptions;
          goto LABEL_245;
        }
        if (v99)
        {
          int v74 = 0;
          unsigned __int8 v102 = 0;
        }
        else
        {
          int v74 = v102;
          if (v102)
          {
LABEL_189:
            if (v72 != 6 && (v72 & 0xFFFFFFFD) == 0)
            {
LABEL_224:
              if (!cf || v72 == 6)
              {
                if (v72 != 6)
                {
                  uint64_t v82 = CMPhotoDecompressionContainerCheckHDROutputMode(buffer, *(unsigned int *)v133);
                  if (v82 != -16994)
                  {
                    uint64_t WrappedPixelBufferForType = v82;
                    if (v82) {
                      goto LABEL_245;
                    }
                  }
                }
              }
              else
              {
                value[0] = 0;
                uint64_t OutputFromConstituents = CMPhotoGainMapCreateOutputFromConstituents((int)v126, v125, BYTE1(v131[1]), (uint64_t)v131[0], v56, cf, *(int *)v133, v133[4], *(float *)&v133[8], v133[5], v133[6], v133[7], v134, (__CVBuffer **)value, 0);
                if (OutputFromConstituents != -16994)
                {
                  uint64_t WrappedPixelBufferForType = OutputFromConstituents;
                  if (OutputFromConstituents) {
                    goto LABEL_245;
                  }
                  if (buffer) {
                    CFRelease(buffer);
                  }
                  CVBufferRef buffer = (CVBufferRef)value[0];
                }
              }
              uint64_t WrappedPixelBufferForType = 0;
LABEL_235:
              if (!a11) {
                goto LABEL_245;
              }
              if (a9 == 5)
              {
                if (!cf)
                {
                  uint64_t WrappedPixelBufferForType = 4294950304;
                  goto LABEL_245;
                }
                *a11 = (CGImageRef)CFRetain(cf);
              }
              else
              {
                unsigned int v83 = buffer;
                if (v131[0])
                {
                  CMPhotoRemoveColorPropertiesFromBufferExcludingMatrix(buffer);
                  CMPhotoAddColorInformationToPixelBufferAccordingToFormat(v131[0], 0, 0, 0, buffer);
                  unsigned int v83 = buffer;
                }
                uint64_t WrappedPixelBufferForType = CMPhotoCreateWrappedPixelBufferForType(v96, v83, LOBYTE(v131[1]), a9, a11);
                if (WrappedPixelBufferForType)
                {
LABEL_245:
                  if (v98) {
                    goto LABEL_246;
                  }
LABEL_271:
                  if (v95) {
                    goto LABEL_273;
                  }
                  goto LABEL_272;
                }
              }
              if (v11 && CMPhotoDecompressionSessionAsyncRequestCancelled(*(void *)(a2 + 16), v11)) {
                uint64_t WrappedPixelBufferForType = 4294950191;
              }
              goto LABEL_245;
            }
            if (!v99)
            {
              if (v74) {
                CMPhotoDecompressionContainerCreateMeteorConstituentsForInternalIndex((void *)a2, 0, v101, (unsigned __int8 *)pixelFormat, (uint64_t)buffer, (__CFDictionary **)&cf);
              }
              goto LABEL_224;
            }
            CVBufferRef v75 = buffer;
            CFTypeRef v138 = 0;
            v139[0] = 0;
            CFTypeRef v136 = 0;
            uint64_t v137 = 0;
            if (!*(unsigned char *)(a2 + 153))
            {
LABEL_218:
              if (v137) {
                CFRelease(v137);
              }
              int v56 = v100;
              if (v138) {
                CFRelease(v138);
              }
              if (v139[0]) {
                CFRelease(v139[0]);
              }
              goto LABEL_224;
            }
            CFMutableDictionaryRef v76 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            if (v76)
            {
              *(_OWORD *)CFTypeRef value = *(_OWORD *)((char *)v128 + 8);
              long long v106 = *(_OWORD *)((char *)&v128[1] + 8);
              if (!CMPhotoDecompressionContainerCreateCorrespondingDecodeOptionsForInternalIndexAuxImage((void *)a2, 1, -128, BYTE5(v128[0]), (uint64x2_t *)value, BYTE7(v129), 1, v139)&& !_createAuxiliaryImageForIndex(a2, 1uLL, -128, v139[0], 2, (uint64_t)&v138)&& *(unsigned char *)(a2 + 153))
              {
                int v77 = *(const void **)(a2 + 248);
                if (v77)
                {
                  uint64_t v137 = (__CFDictionary *)CFRetain(v77);
                }
                else
                {
                  if (CMPhotoGetChromaSubsamplingFromPixelFormat(*(unsigned int *)(a2 + 180)) == 6) {
                    int v78 = 1;
                  }
                  else {
                    int v78 = 3;
                  }
                  long long v108 = 0u;
                  long long v109 = 0u;
                  long long v106 = 0u;
                  long long v107 = 0u;
                  *(_OWORD *)CFTypeRef value = 0u;
                  if (CMPhotoParseFlexRangeMetadataFromAuxiliaryXMPMetadata(*(const CGImageMetadata **)(a2 + 184), v78, (uint64_t)value))goto LABEL_214; {
                  v135[2] = v107;
                  }
                  v135[3] = v108;
                  v135[4] = v109;
                  v135[0] = *(_OWORD *)value;
                  v135[1] = v106;
                  if (CMPhotoCreateFlexRangeMetadataDictionaryFromParsedMetadata((uint64_t)v135, &v137)) {
                    goto LABEL_214;
                  }
                }
                if (!v75
                  || (FigCFDictionarySetValue(),
                      LODWORD(value[0]) = 1,
                      _getImageGeometryForIndex(a2, 1uLL, v79, 0, 0, value))
                  || !FigCFDictionarySetInt())
                {
                  FigCFDictionarySetValue();
                  LODWORD(value[0]) = 1;
                  if (_getAuxiliaryImageGeometryForIndex(a2, 1uLL, 0xFFFFFFFFFFFFFF80, v80, 0, 0, value)|| !FigCFDictionarySetInt())
                  {
                    FigCFDictionarySetValue();
                    if (v131[0]) {
                      goto LABEL_212;
                    }
                    int v85 = _copyColorSpaceForIndex(a2, 1uLL, &v136);
                    if (v85 && v85 != -16993) {
                      goto LABEL_214;
                    }
                    if (v136) {
LABEL_212:
                    }
                      FigCFDictionarySetValue();
                    CFTypeRef cf = v76;
                    CFMutableDictionaryRef v76 = 0;
                  }
                }
              }
            }
LABEL_214:
            if (v136) {
              CFRelease(v136);
            }
            if (v76) {
              CFRelease(v76);
            }
            goto LABEL_218;
          }
        }
        if (v133[4]) {
          v133[4] = 0;
        }
        goto LABEL_189;
      }
      goto LABEL_181;
    }
    goto LABEL_267;
  }
  if (a4 == 2)
  {
    value[0] = 0;
    uint64_t AuxiliaryImageStorageForIndex = _getAuxiliaryImageStorageForIndex(v46, a7, a5, value);
    if (AuxiliaryImageStorageForIndex)
    {
LABEL_268:
      uint64_t WrappedPixelBufferForType = AuxiliaryImageStorageForIndex;
      CFDictionaryRef v53 = 0;
      uint64_t v54 = 0;
LABEL_295:
      CFTypeID v55 = (_DWORD *)MEMORY[0x1E4F1EBA8];
      goto LABEL_245;
    }
    int v58 = *((_DWORD *)value[0] + 5);
    LODWORD(v135[0]) = 0;
    FigCFDictionaryGetInt32IfPresent();
    BOOL v59 = 1;
    if (v58 != 825306677 && v58 != 825437747) {
      BOOL v59 = v58 == 1932996149;
    }
    int v60 = 1;
    if (v58 <= 1651926375)
    {
      if (v58 <= 1380410944)
      {
        if (v58 == 1278226534) {
          goto LABEL_122;
        }
        int v61 = 1278226536;
      }
      else
      {
        if (v58 == 1380410945 || v58 == 1380411457) {
          goto LABEL_122;
        }
        int v61 = 1647719528;
      }
    }
    else if (v58 > 1751410031)
    {
      if (v58 == 1751410032 || v58 == 1751411059) {
        goto LABEL_122;
      }
      int v61 = 1751527984;
    }
    else
    {
      if (v58 == 1651926376 || v58 == 1717855600) {
        goto LABEL_122;
      }
      int v61 = 1717856627;
    }
    if (v58 != v61) {
      int v60 = 0;
    }
LABEL_122:
    if (LOBYTE(pixelFormat[2]))
    {
      if (LODWORD(v135[0]) != pixelFormat[1])
      {
        if (v59)
        {
          if (pixelFormat[1] != v58)
          {
LABEL_267:
            uint64_t AuxiliaryImageStorageForIndex = FigSignalErrorAt();
            goto LABEL_268;
          }
        }
        else if (v60 && !CMPhotoIsOutputFormatSupportedForNativeFloatingPoint(v58, pixelFormat[1]))
        {
          goto LABEL_267;
        }
      }
    }
    else
    {
      pixelFormat[1] = v58;
      LOBYTE(pixelFormat[2]) = 1;
    }
  }
  *(_OWORD *)CFTypeRef value = v103;
  long long v106 = v104;
  char v87 = v45;
  int v56 = v100;
  uint64_t v62 = CMPhotoUnifiedJPEGDecoderDecode((uint64_t)v122, (uint64_t)v125, (uint64_t)v126, SDWORD2(v129), pixelFormat[1], BYTE1(v131[1]), value, v116, SBYTE1(pixelFormat[0]), v100, 0, v115, v87, &buffer);
  if (v62)
  {
    uint64_t WrappedPixelBufferForType = v62;
    CFDictionaryRef v53 = 0;
    uint64_t v54 = 0;
    goto LABEL_295;
  }
  uint64_t v54 = 0;
  if (a4 != 2 && *(unsigned char *)(a2 + 457))
  {
    uint64_t v54 = (const void *)MEMORY[0x1AD10E420](*(void *)(a2 + 464));
    if (!v54)
    {
      CFDictionaryRef v53 = 0;
      goto LABEL_294;
    }
    CVBufferSetAttachment(buffer, (CFStringRef)*MEMORY[0x1E4F24A00], v54, kCVAttachmentMode_ShouldPropagate);
  }
  CMPhotoAddDefault601709MatrixToBufferIfAllowed(buffer, 1, 0);
  if (v11 && CMPhotoDecompressionSessionAsyncRequestCancelled(*(void *)(a2 + 16), v11))
  {
    CFDictionaryRef v53 = 0;
LABEL_292:
    uint64_t WrappedPixelBufferForType = 4294950191;
    goto LABEL_295;
  }
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(buffer);
  value[0] = 0;
  value[1] = 0;
  CMPhotoGetPixelBufferCLAP(buffer, 0, 0, value, &value[1]);
  if (v119 != value[0] || v120 != value[1]) {
    char v115 = 1;
  }
  if (a4 != 2 || PixelFormatType == pixelFormat[1])
  {
LABEL_145:
    if (!v115
      && (!LOBYTE(pixelFormat[2]) || PixelFormatType == pixelFormat[1])
      && !CMPhotoPixelBufferHasCLAP(buffer))
    {
      CFDictionaryRef v53 = 0;
      if (!*((void *)&v130 + 1) || *((CVBufferRef *)&v130 + 1) == buffer) {
        goto LABEL_180;
      }
    }
    *(void *)&v135[0] = *((void *)&v130 + 1);
    if (!CMPhotoPixelFormatContainsRGB(PixelFormatType)
      || CMPhotoPixelFormatContainsRGB(pixelFormat[1]))
    {
      int v67 = 0;
LABEL_169:
      if (!HIBYTE(pixelFormat[0]))
      {
        CFDictionaryRef v53 = 0;
        goto LABEL_173;
      }
      uint64_t v70 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionaryRef v53 = v70;
      if (v70)
      {
        CMPhotoCFDictionarySetBoolean(v70, @"PreferLowMemory", HIBYTE(pixelFormat[0]));
LABEL_173:
        uint64_t v71 = CMPhotoScaleAndRotateSessionTransformForSizeWithOptions((uint64_t)v126, buffer, v53, BYTE1(v131[1]) == 0, v92, pixelFormat[1], 0, v67, *MEMORY[0x1E4F1DB20], *(CGFloat *)(MEMORY[0x1E4F1DB20] + 8), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 16), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 24), (double)v118.u64[0], (double)v118.u64[1], v65, v66, 1u, 0, BYTE1(pixelFormat[0]),
                SBYTE2(v129),
                SBYTE3(v129),
                SBYTE2(v129),
                (__CVBuffer **)v135);
        if (v71)
        {
          uint64_t WrappedPixelBufferForType = v71;
          goto LABEL_295;
        }
        if (*((void *)&v130 + 1) && *(void *)&v135[0]) {
          CFRetain(*(CFTypeRef *)&v135[0]);
        }
        if (buffer) {
          CFRelease(buffer);
        }
        CVBufferRef buffer = *(CVBufferRef *)&v135[0];
LABEL_180:
        uint64_t WrappedPixelBufferForType = 0;
        if (!v11) {
          goto LABEL_182;
        }
LABEL_181:
        if (!CMPhotoDecompressionSessionAsyncRequestCancelled(*(void *)(a2 + 16), v11)) {
          goto LABEL_182;
        }
        goto LABEL_292;
      }
LABEL_294:
      uint64_t WrappedPixelBufferForType = 4294950305;
      goto LABEL_295;
    }
    BOOL v68 = 1;
    if ((int)pixelFormat[1] <= 1278226735)
    {
      if (pixelFormat[1] - 1278226488 <= 0x30 && ((1 << (LOBYTE(pixelFormat[1]) - 56)) & 0x1400000000001) != 0)
      {
LABEL_168:
        int v67 = !v68;
        goto LABEL_169;
      }
    }
    else if (pixelFormat[1] - 1278226736 <= 6 && ((1 << (LOBYTE(pixelFormat[1]) - 48)) & 0x45) != 0 {
           || pixelFormat[1] == 1717855600
    }
           || pixelFormat[1] == 1751410032)
    {
      goto LABEL_168;
    }
    BOOL v68 = pixelFormat[1] == 1751411059 || pixelFormat[1] == 1717856627;
    goto LABEL_168;
  }
  *(void *)&v135[0] = 0;
  v139[0] = 0;
  uint64_t FractionalPixelBuffer = _getAuxiliaryImageStorageForIndex(v46, v99, a5, v139);
  if (!FractionalPixelBuffer)
  {
    uint64_t FractionalPixelBuffer = CMPhotoCreateFractionalPixelBuffer(buffer, v125, pixelFormat[1], BYTE1(v131[1]), *((const __CFDictionary **)v139[0] + 5), (CFTypeRef *)v135);
    if (!FractionalPixelBuffer)
    {
      if (buffer) {
        CFRelease(buffer);
      }
      CVBufferRef buffer = *(CVBufferRef *)&v135[0];
      OSType PixelFormatType = CVPixelBufferGetPixelFormatType(*(CVPixelBufferRef *)&v135[0]);
      goto LABEL_145;
    }
  }
  uint64_t WrappedPixelBufferForType = FractionalPixelBuffer;
  CFTypeID v55 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  CFDictionaryRef v53 = 0;
  if (!v98) {
    goto LABEL_271;
  }
LABEL_246:
  size_t v84 = v122;
  if (v122 && *(unsigned char *)(a2 + 80) && !pthread_mutex_lock(*(pthread_mutex_t **)(a2 + 72)))
  {
    CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 88), v84);
    pthread_mutex_unlock(*(pthread_mutex_t **)(a2 + 72));
    size_t v84 = 0;
  }
  CMPhotoUnifiedJPEGDecoderDestroy((uint64_t)v84);
  size_t v122 = 0;
LABEL_273:
  if (cf) {
    CFRelease(cf);
  }
  if (v54) {
    CFRelease(v54);
  }
  if (buffer) {
    CFRelease(buffer);
  }
  if (v126) {
    CFRelease(v126);
  }
  if (v53) {
    CFRelease(v53);
  }
  CMPhotoSurfacePoolMarkCachesVolatile((uint64_t)v125, 0);
  if (v125) {
    CFRelease(v125);
  }
  if (*v55 == 1) {
    kdebug_trace();
  }
  return WrappedPixelBufferForType;
}

uint64_t _decodeImage_0(uint64_t a1, uint64_t a2, const __CFDictionary *a3, BOOL a4, int a5, int a6, CGImageRef *a7)
{
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  CFTypeRef v52 = 0;
  CFDictionaryRef v53 = 0;
  uint64_t v50 = 0;
  CVPixelBufferRef v51 = 0;
  uint64_t v14 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  if (a2) {
    goto LABEL_81;
  }
  if (a4 && CMPhotoDecompressionSessionAsyncRequestCancelled(*(void *)(a1 + 16), a4)) {
    goto LABEL_84;
  }
  long long v48 = 0u;
  memset(v49, 0, sizeof(v49));
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  *(_OWORD *)pixelBuffer = 0u;
  long long v41 = 0u;
  long long v39 = 0u;
  memset(v38, 0, sizeof(v38));
  uint64_t v15 = _determineDecodeStrategy_0(a1, a3, *(unsigned int *)(a1 + 88), *(unsigned int *)(a1 + 92), (uint64_t)v38);
  if (v15) {
    goto LABEL_82;
  }
  if (a6 && LOBYTE(v38[0])) {
    goto LABEL_81;
  }
  if (a4 && CMPhotoDecompressionSessionAsyncRequestCancelled(*(void *)(a1 + 16), a4)) {
    goto LABEL_84;
  }
  if (pixelBuffer[1])
  {
    long long v37 = 0uLL;
    CMPhotoGetPixelBufferCLAP(pixelBuffer[1], 0, 0, &v37, (void *)&v37 + 1);
    if (v37 == *(_OWORD *)&v49[1])
    {
      OSType PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer[1]);
      if (PixelFormatType != v48)
      {
        FigSignalErrorAt();
        uint64_t v21 = 0;
        goto LABEL_83;
      }
      goto LABEL_14;
    }
LABEL_81:
    uint64_t v15 = FigSignalErrorAt();
    goto LABEL_82;
  }
LABEL_14:
  if (BYTE6(v48) | BYTE4(v48))
  {
    BOOL v17 = 1;
  }
  else
  {
    BOOL v17 = BYTE5(v48) != 0;
    if (!BYTE5(v48) && pixelBuffer[1])
    {
      uint64_t v20 = (__CVBuffer *)CFRetain(pixelBuffer[1]);
      BOOL v17 = 0;
      CVPixelBufferRef v51 = v20;
      goto LABEL_25;
    }
  }
  uint64_t v15 = CMPhotoDecompressionSessionCopySurfacePool(*(void *)(a1 + 16), &v53);
  if (v15)
  {
LABEL_82:
    uint64_t v21 = v15;
    goto LABEL_83;
  }
  if (BYTE9(v41))
  {
    CFAllocatorRef v18 = CFGetAllocator((CFTypeRef)a1);
    uint64_t v19 = CMPhotoCreateCVPixelBufferNotBackedByIOSurface((uint64_t)v18, HIDWORD(v47), *((size_t *)&v46 + 1), v47, 1uLL, 1uLL, 0, 0, &v51);
  }
  else
  {
    uint64_t v19 = CMPhotoSurfacePoolCreatePixelBuffer(v53, HIDWORD(v47), *((size_t *)&v46 + 1), v47, 1, 1uLL, 1uLL, 1, 0, 0, &v51);
  }
  uint64_t v21 = v19;
  if (v19) {
    goto LABEL_83;
  }
  uint64_t v20 = v51;
LABEL_25:
  int v22 = *(const void **)(a1 + 288);
  if (v22)
  {
    CVBufferSetAttachment(v20, (CFStringRef)*MEMORY[0x1E4F24A00], v22, kCVAttachmentMode_ShouldPropagate);
    uint64_t v20 = v51;
  }
  unint64_t v23 = *(const void **)(a1 + 312);
  if (v23)
  {
    CVBufferSetAttachment(v20, (CFStringRef)*MEMORY[0x1E4F24BC8], v23, kCVAttachmentMode_ShouldPropagate);
    uint64_t v20 = v51;
  }
  uint64_t v24 = *(const void **)(a1 + 304);
  if (v24)
  {
    CVBufferSetAttachment(v20, (CFStringRef)*MEMORY[0x1E4F24A90], v24, kCVAttachmentMode_ShouldPropagate);
    uint64_t v20 = v51;
  }
  CMPhotoPixelBufferSetAlphaOpaquenessAndAlphaMode(v20, *(_DWORD *)(a1 + 144) == 0, 0);
  uint64_t v15 = CVPixelBufferLockBaseAddress(v51, 0);
  if (v15) {
    goto LABEL_82;
  }
  if (*v14 == 1) {
    kdebug_trace();
  }
  int v25 = _createPreparedJXLDecoder(a1, 4352, *((uint64_t *)&v46 + 1), v47, &v55, &v54);
  if (*v14 == 1)
  {
    kdebug_trace();
    if (*v14 == 1) {
      kdebug_trace();
    }
  }
  if (v25 == 256)
  {
    uint64_t v26 = _configureJXLColor(*(const __CFAllocator **)(a1 + 40), v55, *(unsigned __int8 *)(a1 + 120), 0, 0, 0);
    if (v26)
    {
      uint64_t v21 = v26;
      goto LABEL_80;
    }
    int v25 = JxlDecoderProcessInput();
  }
  if (v25 != 5) {
    goto LABEL_79;
  }
  CVPixelBufferGetBytesPerRow(v51);
  CVPixelBufferGetBaseAddress(v51);
  if (JxlDecoderSetImageOutCallback() || JxlDecoderSetImageOutBitDepth()) {
    goto LABEL_79;
  }
  int v27 = JxlDecoderProcessInput();
  if (*v14 == 1) {
    kdebug_trace();
  }
  if ((v27 & 0xFFFFEFFF) != 0)
  {
LABEL_79:
    uint64_t v21 = 4294950194;
LABEL_80:
    CVPixelBufferUnlockBaseAddress(v51, 0);
LABEL_83:
    CFDictionaryRef v29 = 0;
    goto LABEL_66;
  }
  CVPixelBufferUnlockBaseAddress(v51, 0);
  if (a4 && CMPhotoDecompressionSessionAsyncRequestCancelled(*(void *)(a1 + 16), a4))
  {
LABEL_84:
    CFDictionaryRef v29 = 0;
LABEL_85:
    uint64_t v21 = 4294950191;
    goto LABEL_66;
  }
  if (!v17)
  {
    CFDictionaryRef v29 = 0;
    goto LABEL_61;
  }
  uint64_t v15 = CMPhotoDecompressionSessionCopyScaler(*(void *)(a1 + 16), &v52);
  if (v15) {
    goto LABEL_82;
  }
  if (BYTE3(v38[0]))
  {
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDictionaryRef v29 = Mutable;
    if (!Mutable)
    {
      uint64_t v21 = 4294950305;
      goto LABEL_66;
    }
    CMPhotoCFDictionarySetBoolean(Mutable, @"PreferLowMemory", BYTE3(v38[0]));
  }
  else
  {
    CFDictionaryRef v29 = 0;
  }
  if (pixelBuffer[1]) {
    uint64_t v50 = (__CVBuffer *)CFRetain(pixelBuffer[1]);
  }
  uint64_t DefaultTripletsForTransfer = CMPhotoCreateDefaultTripletsForTransfer(v51, v48);
  uint64_t WrappedPixelBufferForType = CMPhotoScaleAndRotateSessionTransformForSizeWithOptions((uint64_t)v52, v51, v29, BYTE9(v41) == 0, SDWORD2(v47), v48, DefaultTripletsForTransfer, v31, *MEMORY[0x1E4F1DB20], *(CGFloat *)(MEMORY[0x1E4F1DB20] + 8), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 16), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 24), (double)*((unint64_t *)&v48 + 1), (double)v49[0], v32, v33, 1u, 0, BYTE1(v38[0]),
                                SBYTE2(v39),
                                SBYTE3(v39),
                                SBYTE4(v39),
                                &v50);
  if (WrappedPixelBufferForType) {
    goto LABEL_65;
  }
  if (v51) {
    CFRelease(v51);
  }
  uint64_t v35 = v50;
  uint64_t v50 = 0;
  CVPixelBufferRef v51 = v35;
LABEL_61:
  if (a7)
  {
    if (!a4 || !CMPhotoDecompressionSessionAsyncRequestCancelled(*(void *)(a1 + 16), a4))
    {
      uint64_t WrappedPixelBufferForType = CMPhotoCreateWrappedPixelBufferForType(*(const __CFAllocator **)(a1 + 40), v51, BYTE8(v41), a5, a7);
LABEL_65:
      uint64_t v21 = WrappedPixelBufferForType;
      goto LABEL_66;
    }
    goto LABEL_85;
  }
  uint64_t v21 = 0;
LABEL_66:
  JxlThreadParallelRunnerDestroy();
  JxlDecoderDestroy();
  if (v53) {
    CFRelease(v53);
  }
  if (v52) {
    CFRelease(v52);
  }
  if (v29) {
    CFRelease(v29);
  }
  if (v51) {
    CFRelease(v51);
  }
  if (v50) {
    CFRelease(v50);
  }
  if (*v14 == 1) {
    kdebug_trace();
  }
  return v21;
}

uint64_t _decodeImage_1(void *a1, const void *a2, const void *a3, uint64_t a4, const __CFDictionary *a5, BOOL a6, int a7, int a8, CGImageRef *a9)
{
  uint64_t v62 = 0;
  CVPixelBufferRef v63 = 0;
  CFMutableDictionaryRef Mutable = 0;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v56 = 0u;
  uint64_t v54 = 0;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  *(_OWORD *)CFTypeRef value = 0u;
  long long v39 = 0u;
  memset(v38, 0, sizeof(v38));
  if (a6) {
    int v16 = a6;
  }
  else {
    int v16 = (int)a1;
  }
  if (*MEMORY[0x1E4F1EBA8] == 1)
  {
    kdebug_trace();
    if (*MEMORY[0x1E4F1EBA8] == 1) {
      kdebug_trace();
    }
  }
  *(void *)&long long v55 = a6;
  *((void *)&v55 + 1) = a1;
  int v33 = v16;
  if (a6 && CMPhotoDecompressionSessionAsyncRequestCancelled(a1[2], a6)) {
    goto LABEL_88;
  }
  __n128 v18 = _determineDecodeStrategy_1((uint64_t)a1, a2, a3, a5, 0, a8, 0, (uint64_t)v38);
  if (ItemTypeFromReader) {
    goto LABEL_86;
  }
  if (a7 == 1 && BYTE1(value[1]) || (int v19 = v43, a7 == 5) && v43 != 6)
  {
    uint64_t ItemTypeFromReader = FigSignalErrorAt();
    goto LABEL_86;
  }
  if (a4 == -1)
  {
    int v21 = 0;
    BOOL v20 = 0;
    unsigned __int8 v37 = 0;
    uint64_t v36 = -1;
    goto LABEL_27;
  }
  if (_getEncoderNativePixelFormatForIndex(*((void **)&v55 + 1), a4, (int *)((unint64_t)v38 | 0xC)))HIDWORD(v38[0]) = 0; {
  LODWORD(v35[0]) = 0;
  }
  uint64_t ItemTypeFromReader = CMPhotoPictureReaderGetItemTypeFromReader(a2, v35);
  if (ItemTypeFromReader) {
    goto LABEL_86;
  }
  BOOL v20 = LODWORD(v35[0]) == 1953325424;
  if (LODWORD(v35[0]) == 1953325424 && FigCFDictionaryGetValue() && !v43) {
    LODWORD(v43) = 1;
  }
  unsigned __int8 v37 = 0;
  uint64_t v36 = -1;
  if (!a8)
  {
    uint64_t ItemTypeFromReader = CMPhotoDecompressionContainerFindFirstAuxiliaryOfTypeForInternalIndexWithOptions(a1, a4, 0, 4, @"urn:com:apple:photo:2020:aux:hdrgainmap", (char *)&v37, &v36);
    if (!ItemTypeFromReader)
    {
      int v21 = v37;
      goto LABEL_27;
    }
LABEL_86:
    uint64_t WrappedPixelBufferForType = ItemTypeFromReader;
LABEL_87:
    uint64_t v26 = (_DWORD *)MEMORY[0x1E4F1EBA8];
    goto LABEL_71;
  }
  int v21 = 0;
LABEL_27:
  int v22 = v43;
  *((void *)&v58 + 1) = v43;
  LODWORD(v59) = DWORD2(v43);
  v18.n128_u32[0] = DWORD1(v43);
  WORD2(v59) = WORD6(v43);
  *(CFTypeRef *)&long long v60 = value[0];
  DWORD2(v60) = HIDWORD(v38[0]);
  if (v20 && v21)
  {
    int v21 = 0;
    unsigned __int8 v37 = 0;
  }
  if (!v21 && vmovl_u8((uint8x8_t)v18.n128_u64[0]).u8[0]) {
    BYTE12(v58) = 0;
  }
  *((void *)&v59 + 1) = v44;
  LOBYTE(v58) = BYTE1(v38[0]);
  BYTE2(v58) = BYTE2(v39);
  *(_WORD *)((char *)&v58 + 3) = *(_WORD *)((char *)&v39 + 3);
  BYTE8(v57) = BYTE6(v54);
  HIDWORD(v57) = DWORD2(v39);
  BYTE1(v58) = BYTE1(value[1]);
  BYTE5(v58) = BYTE8(v42);
  uint64_t ItemTypeFromReader = CMPhotoDecompressionSessionCopyScaler(a1[2], &v57);
  if (ItemTypeFromReader) {
    goto LABEL_86;
  }
  uint64_t ItemTypeFromReader = CMPhotoDecompressionSessionCopySurfacePool(a1[2], (void *)&v56 + 1);
  if (ItemTypeFromReader) {
    goto LABEL_86;
  }
  uint64_t ItemTypeFromReader = CMPhotoDecompressionSessionGetPictureCollectionCodecPool(a1[2], &v56);
  if (ItemTypeFromReader) {
    goto LABEL_86;
  }
  v35[2] = v57;
  v35[3] = v58;
  v35[4] = v59;
  void v35[5] = v60;
  v35[0] = v55;
  v35[1] = v56;
  uint64_t ItemTypeFromReader = _applyDecodeStrategy(v35, (uint64_t)v38, a2, a3, a8, (CFTypeRef *)&Mutable, &v63);
  if (ItemTypeFromReader) {
    goto LABEL_86;
  }
  if ((void)v55 && CMPhotoDecompressionSessionAsyncRequestCancelled(*(void *)(*((void *)&v55 + 1) + 16), v55))
  {
LABEL_88:
    uint64_t WrappedPixelBufferForType = 4294950191;
    goto LABEL_87;
  }
  BOOL v24 = v19 == 6 || (v22 & 0xFFFFFFFD) != 0;
  if (v37 && v24) {
    CMPhotoDecompressionContainerCreateMeteorConstituentsForInternalIndex(a1, a4, v36, (unsigned __int8 *)v38, (uint64_t)v63, &Mutable);
  }
  if (!Mutable || v19 == 6)
  {
    uint64_t v26 = (_DWORD *)MEMORY[0x1E4F1EBA8];
    if (v19 != 6)
    {
      uint64_t v29 = CMPhotoDecompressionContainerCheckHDROutputMode(v63, DWORD2(v58));
      if (v29 != -16994)
      {
        uint64_t WrappedPixelBufferForType = v29;
        if (v29) {
          goto LABEL_71;
        }
      }
    }
  }
  else
  {
    uint64_t v25 = CMPhotoGainMapCreateOutputFromConstituents(v57, *((const void **)&v56 + 1), BYTE1(v58), v60, v33, Mutable, SDWORD2(v58), BYTE12(v58), *(float *)&v59, BYTE13(v58), BYTE14(v58), SHIBYTE(v58), *((uint64_t *)&v59 + 1), &v62, 0);
    uint64_t v26 = (_DWORD *)MEMORY[0x1E4F1EBA8];
    if (v25 != -16994)
    {
      uint64_t WrappedPixelBufferForType = v25;
      if (v25) {
        goto LABEL_71;
      }
      if (v63) {
        CFRelease(v63);
      }
      char v28 = v62;
      uint64_t v62 = 0;
      CVPixelBufferRef v63 = v28;
    }
  }
  if (!Mutable && !(v37 | v20) && v19 == 6)
  {
    LODWORD(v35[0]) = 1;
    _getImageOrientation((uint64_t)a1, a2, 0, v35);
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!Mutable)
    {
      uint64_t WrappedPixelBufferForType = 4294950305;
      goto LABEL_73;
    }
    FigCFDictionarySetValue();
    FigCFDictionarySetInt();
  }
  if ((void)v55 && CMPhotoDecompressionSessionAsyncRequestCancelled(*(void *)(*((void *)&v55 + 1) + 16), v55))
  {
    uint64_t WrappedPixelBufferForType = 4294950191;
  }
  else if (a7 == 5)
  {
    if (!Mutable)
    {
      uint64_t WrappedPixelBufferForType = 4294950304;
      goto LABEL_73;
    }
    uint64_t WrappedPixelBufferForType = 0;
    *a9 = (CGImageRef)CFRetain(Mutable);
  }
  else
  {
    int v30 = v63;
    if (value[0])
    {
      CMPhotoRemoveColorPropertiesFromBufferExcludingMatrix(v63);
      CMPhotoAddColorInformationToPixelBufferAccordingToFormat(value[0], 0, 0, 0, v30);
    }
    CFAllocatorRef v31 = CFGetAllocator(a1);
    uint64_t WrappedPixelBufferForType = CMPhotoCreateWrappedPixelBufferForType(v31, v30, LOBYTE(value[1]), a7, a9);
  }
LABEL_71:
  if (Mutable) {
    CFRelease(Mutable);
  }
LABEL_73:
  if (v62) {
    CFRelease(v62);
  }
  if (v63) {
    CFRelease(v63);
  }
  if ((void)v57) {
    CFRelease((CFTypeRef)v57);
  }
  CMPhotoSurfacePoolMarkCachesVolatile(*((uint64_t *)&v56 + 1), 0);
  if (*((void *)&v56 + 1)) {
    CFRelease(*((CFTypeRef *)&v56 + 1));
  }
  if (*v26 == 1)
  {
    kdebug_trace();
    if (*v26 == 1) {
      kdebug_trace();
    }
  }
  return WrappedPixelBufferForType;
}

uint64_t _parseImageSizeAndTypeIfNeeded(uint64_t a1)
{
  uint64_t v2 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 32));
  if (v2) {
    return v2;
  }
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v4 = (const void **)(a1 + 104);
    uint64_t ImageInformationFromJFIFByteStream = CMPhotoGetImageInformationFromJFIFByteStream(*(void *)(a1 + 24), 0, (void *)(a1 + 72), (int *)(a1 + 88), (BOOL *)(a1 + 92), (unsigned char *)(a1 + 93), (_DWORD *)(a1 + 96), (void *)(a1 + 104));
    if (ImageInformationFromJFIFByteStream)
    {
      uint64_t v3 = ImageInformationFromJFIFByteStream;
    }
    else
    {
      if (*v4) {
        CMPhotoCreateFlexRangeMetadataDictionaryFromBinaryMetadata(*v4, 1, 0);
      }
      uint64_t v3 = 0;
      *(unsigned char *)(a1 + 64) = 1;
    }
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 32));
  return v3;
}

BOOL CMPhotoDecompressionSessionAsyncRequestCancelled(uint64_t a1, BOOL a2)
{
  BOOL v2 = a2;
  if (a2)
  {
    uint64_t v4 = (os_unfair_lock_s *)(a1 + 16);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
    BOOL v2 = CFSetContainsValue(*(CFSetRef *)(a1 + 32), (const void *)v2) == 0;
    os_unfair_lock_unlock(v4);
  }
  return v2;
}

uint64_t CMPhotoDecompressionContainerFindFirstAuxiliaryOfTypeForInternalIndexWithOptions(void *cf, uint64_t a2, uint64_t a3, int a4, uint64_t a5, char *a6, uint64_t *a7)
{
  char v8 = 0;
  CFTypeRef MutableCopy = 0;
  CFTypeRef cfa = 0;
  uint64_t v9 = 4294950306;
  if (a6 && a7)
  {
    if (!a3 || (CFGetAllocator(cf), (CFTypeRef MutableCopy = (CFTypeRef)FigCFDictionaryCreateMutableCopy()) != 0))
    {
      uint64_t v18 = -1;
      uint64_t AuxiliaryImageCountForIndexWithOptions = CMPhotoDecompressionContainerInternalToExternalIndexAndCopyAlternateOptions(cf, a2, &v18, 0, (CFMutableDictionaryRef *)&MutableCopy);
      if (!AuxiliaryImageCountForIndexWithOptions)
      {
        uint64_t v17 = 0;
        uint64_t AuxiliaryImageCountForIndexWithOptions = CMPhotoDecompressionContainerGetAuxiliaryImageCountForIndexWithOptions(cf, (const __CFNumber *)v18, (const __CFDictionary *)MutableCopy, (uint64_t)&v17);
        if (!AuxiliaryImageCountForIndexWithOptions)
        {
          if (v17 < 1)
          {
LABEL_16:
            uint64_t v9 = 0;
LABEL_17:
            char v8 = 0;
            goto LABEL_19;
          }
          uint64_t v15 = 0;
          while (1)
          {
            if (cfa)
            {
              CFRelease(cfa);
              CFTypeRef cfa = 0;
            }
            uint64_t AuxiliaryImageCountForIndexWithOptions = CMPhotoDecompressionContainerCopyAuxiliaryImageTypeURNForIndexWithOptions(cf, (const __CFNumber *)v18, v15, (const __CFDictionary *)MutableCopy, (uint64_t)&cfa);
            if (AuxiliaryImageCountForIndexWithOptions) {
              break;
            }
            if (CMPhotoGetAuxiliaryImageTypeFromURN() == a4 && (a4 != 4 || FigCFEqual()))
            {
              uint64_t v9 = 0;
              *a7 = v15;
              char v8 = 1;
              goto LABEL_19;
            }
            if (++v15 >= v17) {
              goto LABEL_16;
            }
          }
        }
      }
      uint64_t v9 = AuxiliaryImageCountForIndexWithOptions;
      goto LABEL_17;
    }
    char v8 = 0;
    uint64_t v9 = 4294950305;
  }
LABEL_19:
  if (cfa) {
    CFRelease(cfa);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  *a6 = v8;
  return v9;
}

uint64_t CMPhotoDecompressionContainerInternalToExternalIndexAndCopyAlternateOptions(void *a1, uint64_t a2, void *a3, void *a4, CFMutableDictionaryRef *a5)
{
  if (a1[72] <= a2) {
    return 4294950306;
  }
  if (a1[68])
  {
    uint64_t v6 = *(void *)(a1[70] + 8 * a2);
    a2 = *(void *)(a1[69] + 8 * a2);
    if (!a3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v6 = 0;
  if (a3) {
LABEL_4:
  }
    *a3 = a2;
LABEL_5:
  if (a4) {
    *a4 = v6;
  }
  if (!a5) {
    return 0;
  }
  CFMutableDictionaryRef v7 = *a5;
  if (*a5)
  {
    CFMutableDictionaryRef Mutable = 0;
  }
  else
  {
    CFAllocatorRef v10 = CFGetAllocator(a1);
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFMutableDictionaryRef v7 = Mutable;
    if (!Mutable) {
      return 4294950305;
    }
  }
  uint64_t v9 = FigCFDictionarySetCFIndex();
  if (v9)
  {
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
  else
  {
    *a5 = v7;
  }
  return v9;
}

uint64_t CMPhotoDecompressionContainerGetAuxiliaryImageCountForIndexWithOptions(void *a1, const __CFNumber *a2, const __CFDictionary *a3, uint64_t a4)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v10 = -1;
  uint64_t result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a3, (const __CFNumber **)&v10, 0, 0);
  if (!result)
  {
    if (a4)
    {
      uint64_t v8 = a1[4];
      if (v8) {
        uint64_t v9 = a1[4];
      }
      else {
        uint64_t v9 = 0;
      }
      if (*(void *)(v9 + 136)) {
        return (*(uint64_t (**)(void *, uint64_t, const __CFDictionary *, uint64_t))(v8 + 136))(a1, v10, a3, a4);
      }
      else {
        return 4294950302;
      }
    }
    else
    {
      return 4294950306;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerExternalToInternalIndex(void *a1, const __CFNumber *a2, CFIndex a3, const __CFDictionary *a4, const __CFNumber **a5, CFIndex *a6, const __CFNumber **a7)
{
  CFIndex v33 = a3;
  if (a2 == (const __CFNumber *)-2) {
    a2 = (const __CFNumber *)a1[71];
  }
  CFNumberRef v32 = a2;
  if (((unint64_t)a2 & 0x8000000000000000) == 0 && (uint64_t)a2 < a1[73])
  {
    if (a1[68])
    {
      CFNumberRef ValueAtIndex = (const __CFNumber *)FigCFArrayGetValueAtIndex();
      if (ValueAtIndex)
      {
        CFNumberRef v14 = ValueAtIndex;
        CFTypeID v15 = CFGetTypeID(ValueAtIndex);
        if (v15 == CFNumberGetTypeID())
        {
          CFNumberRef Size = CMPhotoCFNumberGetSize(v14);
          CFNumberRef v14 = 0;
          CFNumberRef v32 = Size;
LABEL_11:
          if (a3 == -1 && !FigCFDictionaryGetCFIndexIfPresent())
          {
            if (!v14)
            {
              CFIndex v33 = 0;
              if (!a5)
              {
LABEL_72:
                if (a7) {
                  *a7 = v14;
                }
                if (a6)
                {
                  uint64_t v27 = 0;
                  *a6 = v33;
                  return v27;
                }
                return 0;
              }
LABEL_71:
              *a5 = v32;
              goto LABEL_72;
            }
            CMFormatDescriptionRef desc = 0;
            CFTypeRef cf = 0;
            int v38 = 0;
            char v37 = 0;
            if (a4)
            {
              CFDictionaryGetValue(a4, @"kCMPhotoDecompressionOption_ForTranscode");
              int v38 = FigCFEqual() != 0;
              CFDictionaryRef Value = (const __CFDictionary *)FigCFDictionaryGetValue();
              if (Value)
              {
                CFDictionaryRef v19 = Value;
                CMPhotoCFDictionaryGetIntIfPresent(Value, @"DecodeToHDROutputMode", &v38);
                CMPhotoCFDictionaryGetBooleanIfPresent(v19, @"DecodeToHDROutputModePreferMeteor", &v37);
              }
            }
            if (_selectAlternateIndexBasedOnOptions_onceToken != -1) {
              dispatch_once(&_selectAlternateIndexBasedOnOptions_onceToken, &__block_literal_global_12);
            }
            if (_selectAlternateIndexBasedOnOptions_onceTokenPreferMeteor != -1) {
              dispatch_once(&_selectAlternateIndexBasedOnOptions_onceTokenPreferMeteor, &__block_literal_global_317);
            }
            BOOL v20 = v38 == 6 || v38 == 1;
            if (v20 && !v37 || CFArrayGetCount(v14) < 1)
            {
LABEL_58:
              CFIndex v21 = 0;
LABEL_59:
              uint64_t v27 = 0;
              CFIndex v33 = v21;
            }
            else
            {
              CFIndex v21 = 0;
              int v22 = a1 + 4;
              CFStringRef v23 = (const __CFString *)*MEMORY[0x1E4F1DC98];
              while (2)
              {
                if (cf)
                {
                  CFRelease(cf);
                  CFTypeRef cf = 0;
                }
                uint64_t v36 = 0;
                if (CMPhotoCFArrayGetSizeAtIndex(v14, v21, &v36))
                {
                  if (*v22) {
                    uint64_t v24 = *v22;
                  }
                  else {
                    uint64_t v24 = 0;
                  }
                  if (*(void *)(v24 + 448))
                  {
                    if (*v22) {
                      uint64_t v25 = *v22;
                    }
                    else {
                      uint64_t v25 = 0;
                    }
                    uint64_t v26 = (*(uint64_t (**)(void *, uint64_t, CFTypeRef *))(v25 + 448))(a1, v36, &cf);
                    if (!v26) {
                      goto LABEL_42;
                    }
                    uint64_t v27 = v26;
                    if (v26 == -16993)
                    {
                      CFTypeRef cf = CGColorSpaceCreateWithName(v23);
LABEL_42:
                      switch(v38)
                      {
                        case 0:
                          if (*v22) {
                            uint64_t v29 = *v22;
                          }
                          else {
                            uint64_t v29 = 0;
                          }
                          if (!*(void *)(v29 + 40)) {
                            goto LABEL_78;
                          }
                          uint64_t FirstAuxiliaryOfTypeForInternalIndexWithOptions = (*(uint64_t (**)(void *, uint64_t, void, CMFormatDescriptionRef *))(*v22 + 40))(a1, v36, 0, &desc);
                          if (FirstAuxiliaryOfTypeForInternalIndexWithOptions) {
                            goto LABEL_86;
                          }
                          FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(desc);
                          if (desc)
                          {
                            CFRelease(desc);
                            CMFormatDescriptionRef desc = 0;
                          }
                          if (MediaSubType != 1953325424) {
                            goto LABEL_59;
                          }
                          goto LABEL_57;
                        case 1:
                        case 6:
                          if (!v37) {
                            goto LABEL_57;
                          }
                          char v35 = 0;
                          uint64_t v34 = -1;
                          uint64_t FirstAuxiliaryOfTypeForInternalIndexWithOptions = CMPhotoDecompressionContainerFindFirstAuxiliaryOfTypeForInternalIndexWithOptions(a1);
                          if (!FirstAuxiliaryOfTypeForInternalIndexWithOptions) {
                            goto LABEL_57;
                          }
LABEL_86:
                          uint64_t v27 = FirstAuxiliaryOfTypeForInternalIndexWithOptions;
                          break;
                        case 2:
                          if (!CGColorSpaceUsesITUR_2100TF((CGColorSpaceRef)cf)
                            && !CGColorSpaceUsesExtendedRange((CGColorSpaceRef)cf))
                          {
                            goto LABEL_59;
                          }
                          goto LABEL_57;
                        default:
LABEL_57:
                          if (++v21 >= CFArrayGetCount(v14)) {
                            goto LABEL_58;
                          }
                          continue;
                      }
                    }
                  }
                  else
                  {
LABEL_78:
                    uint64_t v27 = 4294950302;
                  }
                }
                else
                {
                  uint64_t v27 = 4294950304;
                }
                break;
              }
            }
            if (desc) {
              CFRelease(desc);
            }
            if (cf) {
              CFRelease(cf);
            }
            if (v27) {
              return v27;
            }
          }
          if (v14)
          {
            if (v33 < CFArrayGetCount(v14))
            {
              if (!CMPhotoCFArrayGetSizeAtIndex(v14, v33, &v32)) {
                return 4294950304;
              }
LABEL_70:
              if (!a5) {
                goto LABEL_72;
              }
              goto LABEL_71;
            }
          }
          else if (!v33)
          {
            goto LABEL_70;
          }
          FigSignalErrorAt();
          return 0;
        }
        CFTypeID v17 = CFGetTypeID(v14);
        if (v17 == CFArrayGetTypeID()) {
          goto LABEL_11;
        }
      }
      return 4294950304;
    }
    CFNumberRef v14 = 0;
    goto LABEL_11;
  }
  return FigSignalErrorAt();
}

uint64_t _getAuxiliaryImageCountForIndex(uint64_t a1, unint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v9 = a2;
  uint64_t v6 = a1 + 40;
  char v8 = 0;
  uint64_t result = _checkImageIndex(a1 + 40, &v9, &v8);
  if (!result)
  {
    uint64_t result = _parseMPOIfNeeded(v6);
    if (a4)
    {
      if (!result) {
        *a4 = *(void *)(a1 + 264) - (v8 != 0);
      }
    }
  }
  return result;
}

uint64_t _getAuxiliaryImageCountForIndex_0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a2) {
    return FigSignalErrorAt();
  }
  if (a4) {
    *a4 = *(_DWORD *)(a1 + 144) != 0;
  }
  return 0;
}

uint64_t _getAuxiliaryImageCountForIndex_1(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  CFTypeRef cf = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v17 = 0;
  unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, void))(v8 + 16);
  if (!v9) {
    goto LABEL_13;
  }
  uint64_t v10 = v9(v6, a2, &cf, 0);
  uint64_t v11 = v10;
  if (!a4 || v10) {
    goto LABEL_14;
  }
  CFTypeRef v12 = cf;
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v14 = v13 ? v13 : 0;
  CFTypeID v15 = *(uint64_t (**)(CFTypeRef, uint64_t *))(v14 + 32);
  if (!v15)
  {
LABEL_13:
    uint64_t v11 = 4294954514;
    goto LABEL_14;
  }
  uint64_t v11 = v15(v12, &v17);
  if (!v11) {
    *a4 = v17;
  }
LABEL_14:
  if (cf) {
    CFRelease(cf);
  }
  return v11;
}

uint64_t _getAuxiliaryImageCountForIndex_2(uint64_t a1, uint64_t a2, uint64_t a3, CFIndex *a4)
{
  if (!a4) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 112))
  {
    *a4 = CFArrayGetCount(*(CFArrayRef *)(a1 + 96));
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t _checkImageIndex(uint64_t a1, unint64_t *a2, unsigned char *a3)
{
  unint64_t v3 = *a2;
  if (!*(unsigned char *)(a1 + 113))
  {
    if (!v3) {
      goto LABEL_5;
    }
    return FigSignalErrorAt();
  }
  if (v3 >= 2) {
    return FigSignalErrorAt();
  }
  LOBYTE(v3) = v3 == 1;
  *a2 = 0;
LABEL_5:
  if (a3) {
    *a3 = v3;
  }
  return 0;
}

uint64_t _determineDecodeStrategy(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, unint64_t *a7, int8x16_t *a8, int8x16_t *a9, _DWORD *a10, char *a11)
{
  unint64_t v13 = a5;
  unint64_t v14 = a4;
  CFTypeRef v68 = 0;
  if (!*(unsigned char *)(a3 + 21)) {
    goto LABEL_11;
  }
  uint64_t v17 = *(unsigned int *)(a3 + 4);
  long long v18 = *(_OWORD *)(a3 + 40);
  v67[0] = *(_OWORD *)(a3 + 24);
  v67[1] = v18;
  uint64_t TwoPassCropRects = CMPhotoGetTwoPassCropRects(v17, (unint64_t *)v67, a4, a5, 0, 0);
  if (TwoPassCropRects) {
    goto LABEL_125;
  }
  if (*(unsigned char *)(a3 + 21))
  {
    LODWORD(v20) = 0;
    CFIndex v21 = (unint64_t *)(a3 + 56);
    unint64_t v22 = *(void *)(a3 + 56);
    unint64_t v14 = *(void *)(a3 + 40);
    unint64_t v13 = *(void *)(a3 + 48);
    if (v14 <= v13) {
      unint64_t v23 = *(void *)(a3 + 48);
    }
    else {
      unint64_t v23 = *(void *)(a3 + 40);
    }
    if (!v22 || v22 >= v23) {
      goto LABEL_40;
    }
    if (_canUseEmbeddedHWDCTScaling_onceToken != -1) {
      dispatch_once(&_canUseEmbeddedHWDCTScaling_onceToken, &__block_literal_global_3);
    }
  }
  else
  {
LABEL_11:
    CFIndex v21 = (unint64_t *)(a3 + 56);
    unint64_t v22 = *(void *)(a3 + 56);
    if (v14 <= v13) {
      unint64_t v24 = v13;
    }
    else {
      unint64_t v24 = v14;
    }
    if (v22) {
      BOOL v25 = v22 >= v24;
    }
    else {
      BOOL v25 = 1;
    }
    if (v25) {
      goto LABEL_39;
    }
    int v26 = *(_DWORD *)(a3 + 72);
    if (v26 != 1
      && (v26 == 2 || v22 >= 4 && CMPhotoUnifiedJPEGDecoderFileSupportedByHardware(*(void *)(a1 + 96), a6)))
    {
      int v27 = 0;
      if (*(unsigned char *)(a3 + 70)) {
        v22 &= ~1uLL;
      }
      goto LABEL_30;
    }
  }
  if (*(unsigned char *)(a3 + 21))
  {
    int v27 = *(_DWORD *)(a3 + 72);
    if (v27 != 1)
    {
LABEL_39:
      LODWORD(v20) = 0;
LABEL_40:
      unint64_t v34 = v14;
      unint64_t v35 = v13;
      goto LABEL_41;
    }
  }
  else
  {
    int v27 = 1;
  }
LABEL_30:
  unint64_t v28 = (v14 + 1) >> 1;
  unint64_t v29 = (v13 + 1) >> 1;
  unint64_t v30 = v14 >> 1;
  unint64_t v31 = v13 >> 1;
  if (v28 <= v29) {
    unint64_t v32 = (v13 + 1) >> 1;
  }
  else {
    unint64_t v32 = (v14 + 1) >> 1;
  }
  if (v30 <= v13 >> 1) {
    unint64_t v33 = v13 >> 1;
  }
  else {
    unint64_t v33 = v14 >> 1;
  }
  if (v27) {
    unint64_t v32 = v33;
  }
  if (v32 < v22) {
    goto LABEL_39;
  }
  uint64_t v20 = 0;
  while (1)
  {
    unint64_t v46 = v28;
    unint64_t v47 = v29;
    unint64_t v48 = v30;
    unint64_t v49 = v31;
    if (v20 == 2) {
      break;
    }
    char v50 = v20++ + 2;
    uint64_t v51 = (2 << v20);
    unint64_t v28 = (v14 - 1 + v51) >> v50;
    unint64_t v29 = (v13 - 1 + v51) >> v50;
    unint64_t v30 = v14 >> v50;
    unint64_t v31 = v13 >> v50;
    if (v28 <= v29) {
      unint64_t v52 = v29;
    }
    else {
      unint64_t v52 = v28;
    }
    if (v30 <= v31) {
      unint64_t v53 = v31;
    }
    else {
      unint64_t v53 = v30;
    }
    if (v27) {
      unint64_t v52 = v53;
    }
    if (v52 < v22) {
      goto LABEL_118;
    }
  }
  LODWORD(v20) = 3;
LABEL_118:
  if (v27) {
    unint64_t v35 = v49;
  }
  else {
    unint64_t v35 = v47;
  }
  if (v27) {
    unint64_t v34 = v48;
  }
  else {
    unint64_t v34 = v46;
  }
LABEL_41:
  CVPixelBufferRef v63 = a8;
  if (*(unsigned char *)(a3 + 71))
  {
    uint64_t TwoPassCropRects = _parseExifIfNeeded(a1 + 40, 0);
    if (TwoPassCropRects) {
      goto LABEL_125;
    }
    if (*(unsigned char *)(a1 + 281)) {
      int v36 = *(_DWORD *)(a1 + 304);
    }
    else {
      int v36 = 1;
    }
  }
  else
  {
    int v36 = 0;
  }
  if (*(unsigned char *)(a3 + 71)) {
    BOOL v37 = v36 == 1;
  }
  else {
    BOOL v37 = 1;
  }
  int v38 = !v37;
  BOOL v66 = 0;
  v65.i64[0] = v34;
  v65.i64[1] = v35;
  CMPhotoPixelBufferConstrainSizeToMaxSideLength(v34, v35, *(void *)(a3 + 56), v14, v13, *(unsigned __int8 *)(a3 + 64), *(unsigned __int8 *)(a3 + 70), (unint64_t *)&v65, &v66, 0);
  if (*(_DWORD *)(a3 + 72) != 1)
  {
    BOOL v42 = 0;
    int v43 = *(_DWORD *)(a3 + 4);
    int v44 = 1;
    if (v43 > 875836517)
    {
      if (v43 != 1111970369)
      {
        int v45 = 875836518;
LABEL_61:
        uint64_t v40 = 0;
        if (v43 != v45) {
          goto LABEL_91;
        }
        goto LABEL_78;
      }
    }
    else if (v43 != 875704422)
    {
      int v45 = 875704934;
      goto LABEL_61;
    }
    uint64_t v40 = 0;
    goto LABEL_78;
  }
  uint64_t v40 = _copyImageBitDepthForIndex(a1, 0, v39, &v68);
  if (v40)
  {
    BOOL v41 = 1;
  }
  else
  {
    LODWORD(v67[0]) = 0;
    FigCFArrayGetIntAtIndex();
    BOOL v41 = SLODWORD(v67[0]) < 9;
  }
  BOOL v42 = CMPhotoDecompressionContainerJFIF_pixelFormatToAppleJPEGFormat(*(_DWORD *)(a3 + 4), v41, 0) != 0;
LABEL_78:
  if ((v38 & 1) != 0 || v42 || !v66)
  {
    int v44 = v42;
  }
  else
  {
    unint64_t v54 = *v21;
    if (*v21
      && (v34 <= v35 ? (unint64_t v55 = v35) : (unint64_t v55 = v34),
          (BOOL v25 = v55 >= v54, v56 = v55 - v54, v25) && (*(_DWORD *)(a3 + 16) & 0xFFFFFFFE) == 2 && 100 * v56 / v54 <= 9))
    {
      int v44 = 0;
      v65.i64[0] = v34;
      v65.i64[1] = v35;
      BOOL v66 = 0;
    }
    else
    {
      int v44 = 0;
    }
  }
LABEL_91:
  int8x16_t v57 = v65;
  if (v38)
  {
    int8x16_t v62 = v65;
    LODWORD(v67[0]) = 0;
    uint64_t TwoPassCropRects = CMPhotoHEIFRotationCCWAndMirroringFromExifOrientation(v36, v67, 0);
    long long v58 = a7;
    if (!TwoPassCropRects)
    {
      if (LODWORD(v67[0]) == 270 || LODWORD(v67[0]) == 90)
      {
        int8x16_t v57 = vextq_s8(v62, v62, 8uLL);
        long long v59 = v63;
      }
      else
      {
        long long v59 = v63;
        int8x16_t v57 = v62;
      }
      uint64_t v40 = 0;
      goto LABEL_99;
    }
LABEL_125:
    uint64_t v40 = TwoPassCropRects;
    goto LABEL_114;
  }
  long long v59 = v63;
  long long v58 = a7;
LABEL_99:
  if (v58)
  {
    *long long v58 = v34;
    v58[1] = v35;
  }
  if (v59) {
    *long long v59 = v65;
  }
  if (a9) {
    *a9 = v57;
  }
  if (a10) {
    *a10 = v20;
  }
  if (a11)
  {
    if (v66) {
      char v60 = 1;
    }
    else {
      char v60 = v38;
    }
    if (v44) {
      char v60 = 1;
    }
    *a11 = v60;
  }
LABEL_114:
  if (v68) {
    CFRelease(v68);
  }
  return v40;
}

uint64_t _determineDecodeStrategy_0(uint64_t a1, const __CFDictionary *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a5 + 152) = a3;
  *(void *)(a5 + 160) = a4;
  uint64_t result = CMPhotoDecompressionContainerParseOptions(a1, a2, a3, a4, a5);
  if (!result)
  {
    if (*(_DWORD *)(a5 + 72) == 2)
    {
      return FigSignalErrorAt();
    }
    else
    {
      if (*(_DWORD *)(a1 + 96) <= 8u) {
        int v8 = 1111970369;
      }
      else {
        int v8 = 1815491698;
      }
      *(_DWORD *)(a5 + 204) = v8;
      if (*(unsigned char *)(a5 + 8))
      {
        int v9 = *(_DWORD *)(a5 + 4);
        if (v9 == 1815491698 || v9 == 1111970369)
        {
          *(_DWORD *)(a5 + 204) = v9;
          int v8 = v9;
        }
      }
      else
      {
        *(_DWORD *)(a5 + 4) = v8;
        int v9 = v8;
      }
      *(_DWORD *)(a5 + 208) = v9;
      *(unsigned char *)(a5 + 213) = v8 != v9;
      if (*(unsigned char *)(a5 + 71))
      {
        int v10 = *(_DWORD *)(a1 + 132);
        *(unsigned char *)(a5 + 212) = v10 != 1;
      }
      else
      {
        *(unsigned char *)(a5 + 212) = 0;
        int v10 = 1;
      }
      *(unsigned char *)(a5 + 214) = 0;
      *(_DWORD *)(a5 + 200) = v10;
      long long v11 = *(_OWORD *)(a5 + 40);
      *(_OWORD *)(a5 + 184) = v11;
      *(_OWORD *)(a5 + 168) = *(_OWORD *)(a5 + 24);
      *(_OWORD *)(a5 + 216) = v11;
      CMPhotoPixelBufferConstrainSizeToMaxSideLength(*(void *)(a5 + 184), *(void *)(a5 + 192), *(void *)(a5 + 56), 0, 0, *(unsigned __int8 *)(a5 + 64), *(unsigned __int8 *)(a5 + 70), (unint64_t *)(a5 + 216), (BOOL *)(a5 + 214), 0);
      *(_OWORD *)(a5 + 232) = *(_OWORD *)(a5 + 216);
      if (*(unsigned char *)(a5 + 212))
      {
        int v12 = 0;
        uint64_t result = CMPhotoHEIFRotationCCWAndMirroringFromExifOrientation(*(_DWORD *)(a5 + 200), &v12, 0);
        if (!result && (v12 == 270 || v12 == 90)) {
          *(int8x16_t *)(a5 + 232) = vextq_s8(*(int8x16_t *)(a5 + 216), *(int8x16_t *)(a5 + 216), 8uLL);
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

__n128 _determineDecodeStrategy_1(uint64_t a1, const void *a2, const void *a3, const __CFDictionary *a4, int a5, int a6, int a7, uint64_t a8)
{
  uint64_t v102 = 0;
  long long v100 = 0u;
  long long v101 = 0u;
  long long v98 = 0u;
  long long v99 = 0u;
  long long v97 = 0u;
  memset(v96, 0, sizeof(v96));
  int v95 = 0;
  __n128 v93 = 0u;
  long long v94 = 0u;
  long long v92 = 0uLL;
  int v91 = 0;
  if (_getItemProperties(a1, a2, a3, (uint64_t)a4, &v95, &v93, &v92, &v91)
    || CMPhotoDecompressionContainerParseOptions(a1, a4, v94, *((uint64_t *)&v94 + 1), (uint64_t)v96))
  {
    return result;
  }
  if (a6 && BYTE1(v97))
  {
    long long v106 = 0u;
    long long v107 = 0u;
    if (_getItemProperties(a1, a3, 0, (uint64_t)a4, 0, &v106, 0, 0)) {
      return result;
    }
    uint64_t v16 = v107;
    if ((unint64_t)v107 <= *((void *)&v107 + 1)) {
      uint64_t v16 = *((void *)&v107 + 1);
    }
    *((void *)&v96[3] + 1) = v16;
    LOBYTE(v97) = 1;
  }
  if (BYTE8(v96[0])) {
    int v17 = DWORD1(v96[0]);
  }
  else {
    int v17 = 0;
  }
  DWORD1(v96[0]) = v17;
  BOOL v18 = CMPhotoHEIFUtilitiesSupportsOutputPixelFormat(v17);
  if (a5 || BYTE8(v96[0]))
  {
    if (v18) {
      goto LABEL_15;
    }
LABEL_47:
    FigSignalErrorAt();
    return result;
  }
  if (BYTE5(v96[1]) && ((BYTE8(v96[1]) & 1) != 0 || (v96[2] & 1) != 0 || (BYTE8(v96[2]) & 1) != 0 || (v96[3] & 1) != 0)) {
    goto LABEL_47;
  }
LABEL_15:
  long long v89 = 0u;
  long long v90 = 0u;
  if (BYTE5(v96[1]))
  {
    long long v106 = *(_OWORD *)((char *)&v96[1] + 8);
    long long v107 = *(_OWORD *)((char *)&v96[2] + 8);
    if (CMPhotoGetTwoPassCropRects(DWORD1(v96[0]), (unint64_t *)&v106, v94, *((unint64_t *)&v94 + 1), (unint64_t *)&v96[1] + 1, (unint64_t *)&v89))return result; {
    BOOL v19 = v89 == 0 && v90 == 0;
    }
    __n128 v87 = v93;
    long long v88 = v94;
    if (BYTE5(v96[1]))
    {
      long long v106 = *(_OWORD *)((char *)&v96[1] + 8);
      long long v107 = *(_OWORD *)((char *)&v96[2] + 8);
      if (CMPhotoApplyCropCMPhotoRectToRect(&v87, (unint64_t *)&v106)) {
        return result;
      }
      if (v19)
      {
        int v20 = 0;
      }
      else
      {
        long long v106 = v89;
        long long v107 = v90;
        if (CMPhotoApplyCropCMPhotoRectToRect(&v87, (unint64_t *)&v106)) {
          return result;
        }
        int v20 = 1;
      }
    }
    else
    {
      int v20 = !v19;
    }
  }
  else
  {
    int v20 = 0;
    __n128 v87 = v93;
    long long v88 = v94;
  }
  unint64_t v22 = *((void *)&v88 + 1);
  unint64_t v21 = v88;
  __n128 v23 = v87;
  unint64_t v24 = *((void *)&v92 + 1);
  unint64_t v25 = v92;
  int v81 = a7;
  if ((unint64_t)v92 >= (unint64_t)v94 && *((void *)&v92 + 1) >= *((void *)&v94 + 1)) {
    goto LABEL_80;
  }
  uint64x2_t v79 = (uint64x2_t)v92;
  unint64_t v26 = *((void *)&v96[3] + 1);
  BOOL v109 = 0;
  float64x2_t v108 = 0uLL;
  CMPhotoPixelBufferConstrainSizeToMaxSideLength(v88, *((unint64_t *)&v88 + 1), *((unint64_t *)&v96[3] + 1), 0, 0, v97, 0, 0, &v109, v108.f64);
  BOOL v27 = v109;
  unint64_t v82 = v23.n128_u64[0];
  if (!v109)
  {
    unint64_t v34 = v23.n128_u64[1];
LABEL_49:
    unint64_t v35 = v22;
    unint64_t v36 = v21;
LABEL_77:
    LODWORD(v96[1]) = v27;
    unint64_t v49 = v35;
    unint64_t v50 = v36;
    goto LABEL_78;
  }
  int v28 = v96[1];
  if (!LODWORD(v96[1]))
  {
    unint64_t v34 = v23.n128_u64[1];
    BOOL v27 = 0;
    goto LABEL_49;
  }
  float64x2_t v29 = vcvtq_f64_u64(v79);
  float64x2_t v30 = vmulq_f64(v108, v29);
  int64x2_t v31 = (int64x2_t)vcvtq_u64_f64(vrndpq_f64(v30));
  if ((v31.i32[0] | v31.i32[2]))
  {
    int64x2_t v32 = vdupq_n_s64(2uLL);
    int64x2_t v31 = (int64x2_t)vbslq_s8((int8x16_t)vceqzq_s64(v31), (int8x16_t)v32, (int8x16_t)vaddq_s64(vaddq_s64(v31, v32), (int64x2_t)vorrq_s8((int8x16_t)v31, (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFFELL))));
  }
  if (v31.i64[0] >= (unint64_t)v31.i64[1]) {
    unint64_t v33 = v31.u64[1];
  }
  else {
    unint64_t v33 = v31.i64[0];
  }
  if (v33 <= 0xF)
  {
    if (LODWORD(v96[1]) == 3)
    {
      int v28 = 2;
    }
    else
    {
      if (LODWORD(v96[1]) != 4)
      {
LABEL_52:
        if (v31.i64[0] >= (unint64_t)v31.i64[1]) {
          unint64_t v37 = v24;
        }
        else {
          unint64_t v37 = v25;
        }
        int64x2_t v38 = (int64x2_t)vcvtq_u64_f64(vrndaq_f64(vmulq_n_f64(v29, 16.0 / (double)v37)));
        int64x2_t v31 = vaddq_s64(vaddq_s64(v38, vdupq_n_s64(2uLL)), (int64x2_t)vorrq_s8((int8x16_t)v38, (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFFELL)));
        goto LABEL_56;
      }
      int v28 = 1;
    }
    LODWORD(v96[1]) = v28;
    goto LABEL_52;
  }
LABEL_56:
  uint64_t v40 = v31.i64[1];
  uint64_t v39 = v31.i64[0];
  unint64_t v78 = v26;
  if ((v28 - 3) <= 1)
  {
    uint64x2_t v41 = (uint64x2_t)vandq_s8((int8x16_t)vcvtq_u64_f64(vrndaq_f64(v30)), (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFFELL));
    uint64x2_t v42 = v41;
    unint64_t v43 = v41.i64[0] >= (unint64_t)v41.i64[1] ? v41.i64[1] : v41.i64[0];
    if (v43 >= 0x10)
    {
      BOOL v44 = v28 == 4;
      if (v28 == 3)
      {
        float64x2_t v45 = vabdq_f64(vcvtq_f64_u64(v41), v30);
        if (v45.f64[0] <= v45.f64[1]) {
          v45.f64[0] = v45.f64[1];
        }
        float64x2_t v46 = vabdq_f64(vcvtq_f64_u64((uint64x2_t)v31), v30);
        if (v46.f64[0] <= v46.f64[1]) {
          v46.f64[0] = v46.f64[1];
        }
        BOOL v44 = v45.f64[0] < v46.f64[0];
      }
      if (v44)
      {
        uint64_t v40 = v42.i64[1];
        uint64_t v39 = v42.i64[0];
      }
    }
  }
  __n128 v103 = v23;
  unint64_t v34 = v23.n128_u64[1];
  unint64_t v104 = v21;
  unint64_t v105 = v22;
  unint64_t v47 = v39;
  unint64_t v48 = v40;
  _getScaledEvenCropRect((uint64_t)&v103, v25, v24, v39, v40, (uint64_t)&v106);
  unint64_t v36 = v107;
  if ((unint64_t)v107 >> 31)
  {
    unint64_t v49 = v22;
    unint64_t v50 = v21;
    goto LABEL_78;
  }
  unint64_t v35 = *((void *)&v107 + 1);
  unint64_t v49 = v22;
  unint64_t v50 = v21;
  if (!(*((void *)&v107 + 1) >> 31))
  {
    unint64_t v34 = *((void *)&v106 + 1);
    unint64_t v82 = v106;
    if ((unint64_t)v107 <= *((void *)&v107 + 1)) {
      unint64_t v51 = *((void *)&v107 + 1);
    }
    else {
      unint64_t v51 = v107;
    }
    if (v28 != 4 || v51 <= v78)
    {
      unint64_t v49 = *((void *)&v107 + 1);
      unint64_t v50 = v107;
      unint64_t v24 = v48;
      unint64_t v25 = v47;
      goto LABEL_78;
    }
    BOOL v27 = 1;
    unint64_t v24 = v48;
    unint64_t v25 = v47;
    goto LABEL_77;
  }
LABEL_78:
  if (v92 != __PAIR128__(v24, v25))
  {
    *(void *)&long long v88 = v87.n128_u64[0] - v92 * (v82 / v25) + v88;
    *((void *)&v88 + 1) += v87.n128_u64[1] - *((void *)&v92 + 1) * (v34 / v24);
    v87.n128_u64[0] = v92 * (v82 / v25);
    v87.n128_u64[1] = *((void *)&v92 + 1) * (v34 / v24);
    *(__n128 *)((char *)&v96[1] + 8) = v87;
    *(_OWORD *)((char *)&v96[2] + 8) = v88;
    *(void *)&long long v89 = v82 % v25;
    *((void *)&v89 + 1) = v34 % v24;
    *(void *)&long long v90 = v50;
    *((void *)&v90 + 1) = v49;
    int v83 = 1;
    char v54 = 1;
    int v20 = 1;
    goto LABEL_86;
  }
  a7 = v81;
LABEL_80:
  if (a7)
  {
    unint64_t v52 = v87.n128_u64[0] % v25;
    unint64_t v53 = v87.n128_u64[1] % v24;
    *(void *)&long long v89 = v87.n128_u64[0] % v25;
    *((void *)&v89 + 1) = v87.n128_u64[1] % v24;
    if (v90 == 0) {
      long long v90 = *(_OWORD *)((char *)&v96[2] + 8);
    }
    int v83 = 0;
    *((void *)&v96[1] + 1) = v87.n128_u64[0] - v52;
    *(void *)&v96[2] = v87.n128_u64[1] - v53;
    *((void *)&v96[2] + 1) = v25 + v88 + v52 + ~(((unint64_t)v88 + v87.n128_u64[0] - 1) % v25);
    *(void *)&v96[3] = v24 + *((void *)&v88 + 1) + v53 + ~((*((void *)&v88 + 1) + v87.n128_u64[1] - 1) % v24);
    char v54 = 1;
    int v20 = 1;
  }
  else
  {
    int v83 = 0;
    char v54 = 0;
  }
LABEL_86:
  BOOL v55 = 0;
  unint64_t v56 = &v94;
  if (*((void *)&v98 + 1)) {
    BOOL v57 = 0;
  }
  else {
    BOOL v57 = v20 == 0;
  }
  if (v57) {
    int v58 = BYTE7(v97);
  }
  else {
    int v58 = 0;
  }
  if (!v58 && BYTE7(v97)) {
    BOOL v55 = v91 != 1;
  }
  BOOL v86 = 0;
  if (BYTE5(v96[1])) {
    unint64_t v56 = (_OWORD *)((char *)&v96[2] + 8);
  }
  if (v20) {
    unint64_t v56 = &v90;
  }
  long long v85 = *v56;
  if (v95 == 1953325424 && BYTE13(v101))
  {
    uint64_t v59 = v85;
    if (CMPhotoFlipSizeIfNeeded(v91, v85, *((uint64_t *)&v85 + 1), &v85)) {
      return result;
    }
    if ((void)v85 == v59) {
      unint64_t v60 = v22;
    }
    else {
      unint64_t v60 = v21;
    }
    if ((void)v85 != v59) {
      unint64_t v21 = v22;
    }
    unint64_t v22 = v60;
  }
  long long v84 = v85;
  char v80 = v54;
  if (v58)
  {
    if (CMPhotoFlipSizeIfNeeded(v91, v85, *((uint64_t *)&v85 + 1), &v84)) {
      return result;
    }
    unint64_t v61 = v84;
    if ((void)v85 == (void)v84) {
      unint64_t v62 = v22;
    }
    else {
      unint64_t v62 = v21;
    }
    if ((void)v85 != (void)v84) {
      unint64_t v21 = v22;
    }
    unint64_t v22 = v62;
  }
  else
  {
    unint64_t v61 = v84;
  }
  unint64_t v63 = *((void *)&v84 + 1);
  if (!v20 && !*((void *)&v96[3] + 1) && !v55) {
    goto LABEL_143;
  }
  long long v106 = v84;
  if (v55 || *((void *)&v96[3] + 1))
  {
    CMPhotoPixelBufferConstrainSizeToMaxSideLength(v61, *((unint64_t *)&v84 + 1), *((unint64_t *)&v96[3] + 1), v21, v22, v97, BYTE6(v97), (unint64_t *)&v106, &v86, 0);
    unint64_t v64 = *((void *)&v96[3] + 1);
  }
  else
  {
    unint64_t v64 = 0;
  }
  if (v61 <= v63) {
    int v65 = v63;
  }
  else {
    int v65 = v61;
  }
  int v66 = v65 - v64;
  if (v66 < 0) {
    int v66 = -v66;
  }
  BOOL v67 = (double)v64 * 0.1 >= (double)v66;
  if ((void)v92 != *((void *)&v92 + 1) && vabdd_f64((double)v21 / (double)v22, (double)v61 / (double)v63) >= 0.001) {
    BOOL v67 = 0;
  }
  int v68 = v83;
  if (!v86) {
    int v68 = 0;
  }
  if (v68 == 1 && LODWORD(v96[1]) != 1 && v67 && !v55)
  {
    BOOL v86 = 0;
LABEL_143:
    if (DWORD2(v97))
    {
      BOOL v69 = 0;
    }
    else
    {
      long long v70 = v94;
      if (CMPhotoSupportsHEVCHWDecode()) {
        BOOL v69 = !CMPhotoShouldUseHWDecoderForSize(*((void *)&v70 + 1) * v70, 0);
      }
      else {
        BOOL v69 = 1;
      }
    }
    long long v71 = v100;
    *(_OWORD *)(a8 + 96) = v99;
    *(_OWORD *)(a8 + 112) = v71;
    *(_OWORD *)(a8 + 128) = v101;
    long long v72 = v96[3];
    *(_OWORD *)(a8 + 32) = v96[2];
    *(_OWORD *)(a8 + 48) = v72;
    long long v73 = v98;
    *(_OWORD *)(a8 + 64) = v97;
    *(_OWORD *)(a8 + 80) = v73;
    long long v74 = v96[1];
    *(_OWORD *)a8 = v96[0];
    *(_OWORD *)(a8 + 16) = v74;
    long long v75 = v84;
    *(_OWORD *)(a8 + 208) = v85;
    *(_OWORD *)(a8 + 224) = v75;
    long long v76 = v90;
    *(_OWORD *)(a8 + 272) = v89;
    *(_OWORD *)(a8 + 288) = v76;
    __n128 result = v93;
    *(_OWORD *)(a8 + 192) = v92;
    long long v77 = v94;
    *(__n128 *)(a8 + 152) = result;
    *(unsigned char *)(a8 + 310) = v69;
    *(void *)(a8 + 144) = v102;
    *(unsigned char *)(a8 + 305) = v58;
    *(unsigned char *)(a8 + 304) = v83;
    *(unsigned char *)(a8 + 306) = v80;
    *(void *)(a8 + 256) = v25;
    *(void *)(a8 + 264) = v24;
    *(unsigned char *)(a8 + 307) = v20;
    *(unsigned char *)(a8 + 308) = v55;
    *(unsigned char *)(a8 + 309) = v86;
    *(void *)(a8 + 240) = v61;
    *(void *)(a8 + 248) = v63;
    *(_DWORD *)(a8 + 184) = v91;
    *(_OWORD *)(a8 + 168) = v77;
    *(unsigned char *)(a8 + 311) = v81;
    return result;
  }
  if (!v86 && !v55) {
    goto LABEL_143;
  }
  long long v84 = v106;
  long long v85 = v106;
  if (!v55 || !CMPhotoFlipSizeIfNeeded(v91, v84, *((uint64_t *)&v84 + 1), &v84)) {
    goto LABEL_143;
  }
  return result;
}

uint64_t CMPhotoDecompressionSessionCopySurfacePool(uint64_t a1, void *a2)
{
  uint64_t result = 4294950306;
  if (a1 && a2)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
    CFTypeRef v5 = *(CFTypeRef *)(a1 + 272);
    if (v5) {
      CFTypeRef v5 = CFRetain(v5);
    }
    *a2 = v5;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
    return 0;
  }
  return result;
}

uint64_t CMPhotoDecompressionSessionCopyScaler(uint64_t a1, void *a2)
{
  uint64_t result = 4294950306;
  if (a1 && a2)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
    CFTypeRef v5 = *(CFTypeRef *)(a1 + 280);
    if (v5) {
      CFTypeRef v5 = CFRetain(v5);
    }
    *a2 = v5;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
    return 0;
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerCheckHDROutputMode(__CVBuffer *a1, unsigned int a2)
{
  if (!a1) {
    return 4294950306;
  }
  unsigned int v2 = a2 - 2;
  if (a2 < 2) {
    return 0;
  }
  if (CMPhotoPixelBufferIsHLG(a1))
  {
    if (v2 < 4)
    {
      CFTypeRef v5 = (unsigned int *)&unk_1AB9E2F90;
      return v5[v2];
    }
  }
  else if (CMPhotoPixelBufferIsPQ(a1))
  {
    if (v2 < 4)
    {
      CFTypeRef v5 = (unsigned int *)&unk_1AB9E2FA0;
      return v5[v2];
    }
  }
  else if (CMPhotoPixelBufferIsLinear(a1) || CMPhotoPixelBufferIsExtendedLinear(a1))
  {
    if (v2 < 4)
    {
      CFTypeRef v5 = (unsigned int *)&unk_1AB9E2F78;
      return v5[v2];
    }
  }
  else if (v2 <= 3)
  {
    CFTypeRef v5 = (unsigned int *)&unk_1AB9E2FB0;
    return v5[v2];
  }
  return 4294950306;
}

uint64_t CMPhotoCreateWrappedPixelBufferForType(const __CFAllocator *a1, CVPixelBufferRef pixelBuffer, int a3, int a4, CGImageRef *a5)
{
  CMVideoFormatDescriptionRef formatDescriptionOut = 0;
  CMSampleBufferRef sampleBufferOut = 0;
  if (!a5) {
    return 0;
  }
  uint64_t v8 = 4294950306;
  switch(a4)
  {
    case 0:
      return v8;
    case 1:
      IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(pixelBuffer);
      if (IOSurface)
      {
        int v10 = IOSurface;
        IOSurfaceIncrementUseCount(IOSurface);
        CVPixelBufferRef v11 = v10;
        goto LABEL_8;
      }
      uint64_t v8 = 4294950304;
      break;
    case 2:
      if (pixelBuffer)
      {
        CVPixelBufferRef v11 = pixelBuffer;
LABEL_8:
        int v12 = (CGImage *)CFRetain(v11);
      }
      else
      {
        int v12 = 0;
      }
      uint64_t v8 = 0;
      *a5 = v12;
      break;
    case 3:
      *(_OWORD *)&v15.duration.CFTypeRef value = *MEMORY[0x1E4F1F9F8];
      v15.duration.epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      v15.presentationTimeStamp = v15.duration;
      v15.decodeTimeStamp = v15.duration;
      uint64_t v13 = CMVideoFormatDescriptionCreateForImageBuffer(a1, pixelBuffer, &formatDescriptionOut);
      if (v13) {
        goto LABEL_13;
      }
      uint64_t v8 = CMSampleBufferCreateForImageBuffer(a1, pixelBuffer, 1u, 0, 0, formatDescriptionOut, &v15, &sampleBufferOut);
      if (v8)
      {
        if (sampleBufferOut) {
          CFRelease(sampleBufferOut);
        }
      }
      else
      {
        *a5 = sampleBufferOut;
        CMSampleBufferRef sampleBufferOut = 0;
LABEL_13:
        uint64_t v8 = v13;
      }
      break;
    case 4:
      return CMPhotoCreateCGImageWithPixelBuffer(a1, pixelBuffer, a3, a5);
    default:
      return 4294950302;
  }
  if (formatDescriptionOut) {
    CFRelease(formatDescriptionOut);
  }
  return v8;
}

double CMPhotoPixelBufferConstrainSizeToMaxSideLength(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, int a6, int a7, unint64_t *a8, BOOL *a9, double *a10)
{
  unint64_t v30 = a2;
  unint64_t v31 = a1;
  LODWORD(result) = 4.0;
  if (!a6) {
    *(float *)&double result = 1.0;
  }
  if (!a3 || !(a4 | a5))
  {
    if (a1 <= a2) {
      unint64_t v11 = a2;
    }
    else {
      unint64_t v11 = a1;
    }
    unint64_t v12 = a2;
    unint64_t v13 = a1;
    if (!a3 || v11 == a3) {
      goto LABEL_42;
    }
    if (!(a4 | a5))
    {
      a5 = a2;
      a4 = a1;
    }
  }
  unint64_t v14 = &v30;
  CMSampleTimingInfo v15 = &v30;
  if (a1 < a2) {
    unint64_t v16 = a4;
  }
  else {
    unint64_t v16 = a5;
  }
  if (a1 < a2) {
    unint64_t v17 = a5;
  }
  else {
    unint64_t v17 = a4;
  }
  if (a1 < a2) {
    unint64_t v14 = &v31;
  }
  else {
    CMSampleTimingInfo v15 = &v31;
  }
  float v18 = fminf(*(float *)&result, (float)a3 / (float)v17);
  unint64_t v19 = vcvtas_u32_f32(v18 * (float)v17);
  unint64_t *v15 = v19;
  *(float *)&double result = v18 * (float)v16;
  unint64_t v20 = vcvtas_u32_f32(*(float *)&result);
  unint64_t *v14 = v20;
  if ((a3 & 1) == 0 && v17 != a3)
  {
    unint64_t v21 = v20 & 1;
    BOOL v22 = v19 != a3 || v21 == 0;
    BOOL v23 = !v22 && a7 == 0;
    if (v23 && v17 != v16)
    {
      float v25 = roundf(*(float *)&result * 0.5);
      double result = v25 + v25;
      unint64_t *v14 = (unint64_t)result;
    }
  }
  if (a7) {
    unint64_t v12 = 2;
  }
  else {
    unint64_t v12 = 1;
  }
  if (v31 >= 2) {
    unint64_t v13 = v31;
  }
  else {
    unint64_t v13 = v12;
  }
  if (v30 >= 2) {
    unint64_t v12 = v30;
  }
LABEL_42:
  unint64_t v26 = v13 & 0xFFFFFFFFFFFFFFFELL;
  if ((v13 & 0xFFFFFFFFFFFFFFFELL) == 0) {
    unint64_t v26 = 1;
  }
  unint64_t v27 = v12 & 0xFFFFFFFFFFFFFFFELL;
  if ((v12 & 0xFFFFFFFFFFFFFFFELL) == 0) {
    unint64_t v27 = 1;
  }
  if (a7)
  {
    unint64_t v12 = v27;
    unint64_t v13 = v26;
  }
  if (a8)
  {
    *a8 = v13;
    a8[1] = v12;
  }
  if (a9)
  {
    BOOL v29 = a1 != v13 || a2 != v12;
    *a9 = v29;
  }
  if (a10)
  {
    double result = (double)v13 / (double)a1;
    *a10 = result;
    a10[1] = (double)v12 / (double)a2;
  }
  return result;
}

uint64_t _parseOptionsForJPEGDecoding(uint64_t a1, const __CFDictionary *a2, uint64_t a3, uint64_t a4, int a5, char a6, uint64_t a7)
{
  uint64_t result = CMPhotoDecompressionContainerParseOptions(a1, a2, a3, a4, a7);
  if (!result)
  {
    int v13 = *(_DWORD *)(a7 + 72);
    if ((a6 & 0xFE) != 0xC2 || v13 == 2)
    {
      if (v13 == 2) {
        goto LABEL_9;
      }
    }
    else
    {
      *(_DWORD *)(a7 + 72) = 1;
    }
    if (*(unsigned char *)(a7 + 21) && (unint64_t)(a3 * a4) / (*(void *)(a7 + 48) * *(void *)(a7 + 40)) >= 5) {
      *(_DWORD *)(a7 + 72) = 1;
    }
LABEL_9:
    if (a5 == 2)
    {
      uint64_t result = 0;
      *(_DWORD *)(a7 + 72) = 1;
      return result;
    }
    int v14 = *(_DWORD *)(a7 + 4);
    if (v14 <= 1278226741)
    {
      if (v14 > 875836517)
      {
        if (v14 == 875836518 || v14 == 1111970369) {
          return 0;
        }
        int v15 = 1278226488;
      }
      else
      {
        if (v14 == 875704422 || v14 == 875704438) {
          return 0;
        }
        int v15 = 875704934;
      }
    }
    else if (v14 <= 1815162993)
    {
      if (v14 == 1278226742 || v14 == 1278555701) {
        return 0;
      }
      int v15 = 1380401729;
    }
    else
    {
      if (v14 <= 1952854575)
      {
        if (v14 != 1815162994)
        {
          int v15 = 1815491698;
          goto LABEL_28;
        }
        return 0;
      }
      if (v14 == 1952854576) {
        return 0;
      }
      int v15 = 2019963440;
    }
LABEL_28:
    if (v14 != v15
      && (!CMPhotoPixelFormatIsAGXCompressed(v14) || !CMPhotoSupportsAGXCompressedFormat())
      && (!CMPhotoPixelFormatIsLossyCompressed(v14) || !CMPhotoSupportsLossyCompressedFormat()))
    {
      return 4294950301;
    }
    return 0;
  }
  return result;
}

uint64_t _getImageSize(uint64_t a1, int a2, int a3, unint64_t a4, _OWORD *a5)
{
  if (!a2)
  {
    uint64_t result = _parseImageSizeAndTypeIfNeeded(a1);
    if (result) {
      return result;
    }
    long long v9 = *(_OWORD *)(a1 + 72);
    goto LABEL_11;
  }
  if (a2 == 1)
  {
    uint64_t result = _parseExifIfNeeded(a1, 0);
    if (result) {
      return result;
    }
    if (*(unsigned char *)(a1 + 272))
    {
      uint64_t result = 0;
      uint64_t v8 = (long long *)(a1 + 280);
      goto LABEL_10;
    }
    return 4294950306;
  }
  if (a2 != 2) {
    return 4294950306;
  }
  int v10 = 0;
  uint64_t result = _getAuxiliaryImageStorageForIndex(a1, a3, a4, &v10);
  uint64_t v8 = v10;
LABEL_10:
  long long v9 = *v8;
LABEL_11:
  long long v11 = v9;
  if (a5) {
    *a5 = v11;
  }
  return result;
}

void CMPhotoGetPixelBufferCLAP(__CVBuffer *a1, void *a2, void *a3, void *a4, void *a5)
{
  double PixelBufferCLAPAsRect = CMPhotoGetPixelBufferCLAPAsRect(a1);
  if (a2) {
    *a2 = (unint64_t)PixelBufferCLAPAsRect;
  }
  if (a3) {
    *a3 = (unint64_t)v10;
  }
  if (a4) {
    *a4 = (unint64_t)v11;
  }
  if (a5) {
    *a5 = (unint64_t)v12;
  }
}

void CMPhotoAddDefault601709MatrixToBufferIfAllowed(__CVBuffer *a1, int a2, int a3)
{
  if (!a1) {
    return;
  }
  uint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  signed int v7 = PixelFormatType;
  int IsFullRange = CMPhotoPixelFormatIsFullRange(PixelFormatType);
  int v9 = CMPhotoPixelFormatContainsRGB(v7);
  BOOL v10 = 1;
  if (v7 <= 1278226735)
  {
    if ((v7 - 1278226488) <= 0x30 && ((1 << (v7 - 56)) & 0x1400000000001) != 0) {
      goto LABEL_16;
    }
    goto LABEL_10;
  }
  if (((v7 - 1278226736) > 6 || ((1 << (v7 - 48)) & 0x45) == 0) && v7 != 1717855600 && v7 != 1751410032) {
LABEL_10:
  }
    BOOL v10 = v7 == 1751411059 || v7 == 1717856627;
LABEL_16:
  BOOL v12 = 1;
  if (v7 != 825306677 && v7 != 825437747) {
    BOOL v12 = v7 == 1932996149;
  }
  char v13 = 1;
  if (v7 <= 1652056887)
  {
    if (v7 > 1650946097)
    {
      if (v7 <= 1651847471)
      {
        if (v7 == 1650946098) {
          goto LABEL_49;
        }
        int v14 = 1651519798;
      }
      else
      {
        if (v7 == 1651847472 || v7 == 1651925816) {
          goto LABEL_49;
        }
        int v14 = 1651926376;
      }
    }
    else if (v7 <= 1650942775)
    {
      if (v7 == 1647392369) {
        goto LABEL_49;
      }
      int v14 = 1647719528;
    }
    else
    {
      if (v7 == 1650942776 || v7 == 1650943796) {
        goto LABEL_49;
      }
      int v14 = 1650946096;
    }
    goto LABEL_47;
  }
  if (v7 > 1735549751)
  {
    if (v7 > 1919378231)
    {
      if (v7 == 1919378232 || v7 == 1919379252) {
        goto LABEL_49;
      }
      int v14 = 1919381552;
      goto LABEL_47;
    }
    if (v7 == 1735549752) {
      goto LABEL_49;
    }
    unsigned __int16 v15 = 28720;
  }
  else
  {
    if (v7 <= 1734504495)
    {
      if (v7 == 1652056888) {
        goto LABEL_49;
      }
      int v14 = 1734501176;
      goto LABEL_47;
    }
    if (v7 == 1734504496 || v7 == 1734505012) {
      goto LABEL_49;
    }
    unsigned __int16 v15 = 25140;
  }
  int v14 = v15 | 0x67720000;
LABEL_47:
  if (v7 != v14) {
    char v13 = 0;
  }
LABEL_49:
  int IsITUR_2100TF = CMPhotoPixelBufferIsITUR_2100TF(a1);
  if (v9) {
    int v17 = 1;
  }
  else {
    int v17 = v10;
  }
  if (((v17 | v12) & 1) == 0 && (v13 & 1) == 0 && !IsITUR_2100TF)
  {
    CFStringRef v18 = (const __CFString *)*MEMORY[0x1E4F24C18];
    CFTypeRef v19 = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24C18], 0);
    if (v19)
    {
      CFRelease(v19);
    }
    else
    {
      if (a2 && IsFullRange)
      {
        unint64_t v20 = (const void **)MEMORY[0x1E4F24C40];
      }
      else
      {
        if (!a3) {
          return;
        }
        unint64_t v20 = (const void **)MEMORY[0x1E4F24C48];
      }
      unint64_t v21 = *v20;
      CVBufferSetAttachment(a1, v18, v21, kCVAttachmentMode_ShouldPropagate);
    }
  }
}

uint64_t CMPhotoPixelFormatContainsRGB(OSType pixelFormat)
{
  unsigned __int8 v3 = 0;
  if (pixelFormat == 1380401729)
  {
    return 1;
  }
  else
  {
    CFDictionaryRef v1 = CVPixelFormatDescriptionCreateWithPixelFormatType((CFAllocatorRef)*MEMORY[0x1E4F1CF80], pixelFormat);
    FigCFDictionaryGetBooleanIfPresent();
    if (v1) {
      CFRelease(v1);
    }
  }
  return v3;
}

uint64_t CMPhotoPixelBufferIsITUR_2100TF(__CVBuffer *a1)
{
  CGColorSpaceRef v7 = 0;
  if (!a1) {
    return 0;
  }
  CFTypeRef v2 = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24BC8], 0);
  if (v2)
  {
    if (FigCFEqual()) {
      uint64_t v3 = 1;
    }
    else {
      uint64_t v3 = FigCFEqual() != 0;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  int v4 = CMPhotoCreateColorSpaceFromPixelBuffer(a1, &v7, 1, 0);
  CGColorSpaceRef v5 = v7;
  if (!v4 && v7) {
    uint64_t v3 = v3 | CGColorSpaceUsesITUR_2100TF(v7);
  }
  if (v2) {
    CFRelease(v2);
  }
  if (v5) {
    CFRelease(v5);
  }
  return v3;
}

uint64_t CMPhotoCreateColorSpaceFromPixelBuffer(__CVBuffer *a1, CGColorSpace **a2, int a3, int a4)
{
  BOOL v8 = 1;
  CFDictionaryRef v9 = CVBufferCopyAttachments(a1, kCVAttachmentMode_ShouldPropagate);
  signed int PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (PixelFormatType > 1278226735)
  {
    if ((PixelFormatType - 1278226736) <= 6 && ((1 << (PixelFormatType - 48)) & 0x45) != 0
      || PixelFormatType == 1717855600
      || PixelFormatType == 1751410032)
    {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  if ((PixelFormatType - 1278226488) > 0x30
    || ((1 << (PixelFormatType - 56)) & 0x1400000000001) == 0)
  {
LABEL_9:
    BOOL v8 = PixelFormatType == 1751411059 || PixelFormatType == 1717856627;
  }
LABEL_15:
  uint64_t ColorSpaceFromPixelBufferAttachments = CMPhotoCreateColorSpaceFromPixelBufferAttachments(v9, v8, a2, a3, a4);
  if (v9) {
    CFRelease(v9);
  }
  return ColorSpaceFromPixelBufferAttachments;
}

uint64_t CMPhotoCreateColorSpaceFromPixelBufferAttachments(const __CFDictionary *a1, int a2, CGColorSpace **a3, int a4, int a5)
{
  if (a2) {
    CFStringRef v8 = (const __CFString *)*MEMORY[0x1E4F1DC00];
  }
  else {
    CFStringRef v8 = (const __CFString *)*MEMORY[0x1E4F1DC98];
  }
  if (a1 && CFDictionaryGetCount(a1) >= 1)
  {
    CFDictionaryRef Value = CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E4F24A00]);
    if (Value)
    {
      ColorSpaceFromTriplets = (CGColorSpace *)CFRetain(Value);
      if (ColorSpaceFromTriplets) {
        goto LABEL_15;
      }
    }
    if (CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E4F24B70]))
    {
      CGColorSpaceRef ColorSpaceFromAttachments = (CGColorSpaceRef)MEMORY[0x1AD10E420]();
    }
    else
    {
      CFStringRef v16 = (const __CFString *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E4F24A90]);
      CFStringRef v17 = (const __CFString *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E4F24BC8]);
      CFStringRef yCbCrMatrixString = (const __CFString *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E4F24C18]);
      ColorSpaceFromTriplets = CMPhotoCreateColorSpaceFromTriplets((uint64_t)v16, (uint64_t)v17, v18, a2);
      if (ColorSpaceFromTriplets) {
        goto LABEL_15;
      }
      CVColorPrimariesGetIntegerCodePointForString(v16);
      CVTransferFunctionGetIntegerCodePointForString(v17);
      CVYCbCrMatrixGetIntegerCodePointForString(yCbCrMatrixString);
      ColorSpaceFromTriplets = (CGColorSpace *)CGColorSpaceCreateFromCICP();
      if (ColorSpaceFromTriplets) {
        goto LABEL_15;
      }
      if (!v17 || !v16) {
        goto LABEL_12;
      }
      CGColorSpaceRef ColorSpaceFromAttachments = CVImageBufferCreateColorSpaceFromAttachments(a1);
    }
    ColorSpaceFromTriplets = ColorSpaceFromAttachments;
  }
  else
  {
    ColorSpaceFromTriplets = 0;
  }
LABEL_12:
  if (!(a5 | a4) && !ColorSpaceFromTriplets)
  {
    ColorSpaceFromTriplets = CGColorSpaceCreateWithName(v8);
    if (!ColorSpaceFromTriplets)
    {
      uint64_t result = 4294950305;
      goto LABEL_20;
    }
  }
LABEL_15:
  if (a5)
  {
    CGColorSpaceGetName(ColorSpaceFromTriplets);
    int v14 = FigCFEqual();
    uint64_t result = 0;
    if (ColorSpaceFromTriplets && v14)
    {
      CFRelease(ColorSpaceFromTriplets);
      uint64_t result = 0;
      ColorSpaceFromTriplets = 0;
    }
  }
  else
  {
    uint64_t result = 0;
  }
LABEL_20:
  *a3 = ColorSpaceFromTriplets;
  return result;
}

CGColorSpaceRef CMPhotoCreateColorSpaceFromTriplets(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v6 = FigCFEqual();
  if (FigCFEqual() && FigCFEqual()
    || FigCFEqual() && FigCFEqual())
  {
    CGColorSpaceRef v7 = (const __CFString **)MEMORY[0x1E4F1DB90];
  }
  else if (FigCFEqual() && FigCFEqual())
  {
    CGColorSpaceRef v7 = (const __CFString **)MEMORY[0x1E4F1DC70];
  }
  else if (v6 && (FigCFEqual() || FigCFEqual()))
  {
    CGColorSpaceRef v7 = (const __CFString **)MEMORY[0x1E4F1DC98];
  }
  else if ((FigCFEqual() || FigCFEqual()) && FigCFEqual())
  {
    CGColorSpaceRef v7 = (const __CFString **)MEMORY[0x1E4F1DC28];
  }
  else if (FigCFEqual() && FigCFEqual())
  {
    CGColorSpaceRef v7 = (const __CFString **)MEMORY[0x1E4F1DC80];
  }
  else if (FigCFEqual() && FigCFEqual())
  {
    CGColorSpaceRef v7 = (const __CFString **)MEMORY[0x1E4F1DC68];
  }
  else if (FigCFEqual() && FigCFEqual())
  {
    CGColorSpaceRef v7 = (const __CFString **)MEMORY[0x1E4F1DC60];
  }
  else if (FigCFEqual() && FigCFEqual())
  {
    CGColorSpaceRef v7 = (const __CFString **)MEMORY[0x1E4F1DBA0];
  }
  else if (FigCFEqual() && FigCFEqual())
  {
    CGColorSpaceRef v7 = (const __CFString **)MEMORY[0x1E4F1DB98];
  }
  else if (FigCFEqual() && FigCFEqual())
  {
    CGColorSpaceRef v7 = (const __CFString **)MEMORY[0x1E4F1DC50];
  }
  else if (FigCFEqual() && FigCFEqual())
  {
    CGColorSpaceRef v7 = (const __CFString **)MEMORY[0x1E4F1DC48];
  }
  else if (FigCFEqual())
  {
    CGColorSpaceRef v7 = (const __CFString **)MEMORY[0x1E4F1DC78];
    if (!a4) {
      CGColorSpaceRef v7 = (const __CFString **)MEMORY[0x1E4F1DC88];
    }
  }
  else
  {
    if (!FigCFEqual()) {
      return 0;
    }
    BOOL v10 = a1 && v6 == 0;
    BOOL v11 = !v10;
    if (!a4 || !v11) {
      return 0;
    }
    CGColorSpaceRef v7 = (const __CFString **)MEMORY[0x1E4F1DC00];
  }
  CFStringRef v8 = *v7;
  return CGColorSpaceCreateWithName(v8);
}

uint64_t CMPhotoGetAuxiliaryImageTypeFromURN()
{
  if (FigCFEqual() || FigCFEqual()) {
    return 3;
  }
  if (FigCFEqual() || FigCFEqual()) {
    return 2;
  }
  if (FigCFEqual()) {
    return 5;
  }
  return 4;
}

uint64_t CMPhotoDecompressionContainerCopyAuxiliaryImageTypeURNForIndexWithOptions(void *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5)
{
  uint64_t result = 4294950306;
  if (a1)
  {
    if (a5)
    {
      uint64_t v12 = -1;
      uint64_t result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a4, (const __CFNumber **)&v12, 0, 0);
      if (!result)
      {
        if (a3 < 0)
        {
          return 4294950306;
        }
        else
        {
          uint64_t v10 = a1[4];
          if (v10) {
            uint64_t v11 = a1[4];
          }
          else {
            uint64_t v11 = 0;
          }
          if (*(void *)(v11 + 160)) {
            return (*(uint64_t (**)(void *, uint64_t, uint64_t, const __CFDictionary *, uint64_t, void))(v10 + 160))(a1, v12, a3, a4, a5, 0);
          }
          else {
            return 4294950302;
          }
        }
      }
    }
  }
  return result;
}

BOOL CMPhotoHEIFUtilitiesSupportsOutputPixelFormat(int a1)
{
  BOOL result = 1;
  if (a1 > 1717855599)
  {
    if (a1 > 1936077361)
    {
      if (a1 > 1953903151)
      {
        if (a1 <= 2016686641)
        {
          if (a1 <= 1953903667)
          {
            if (a1 == 1953903152) {
              return result;
            }
            int v5 = 1953903154;
            goto LABEL_103;
          }
          if (a1 == 1953903668) {
            return result;
          }
          unsigned __int16 v8 = 12848;
        }
        else
        {
          if (a1 > 2019963439)
          {
            if (a1 == 2019963440 || a1 == 2019963442) {
              return result;
            }
            int v5 = 2019963956;
            goto LABEL_103;
          }
          if (a1 == 2016686642) {
            return result;
          }
          unsigned __int16 v8 = 13364;
        }
        int v5 = v8 | 0x78340000;
        goto LABEL_103;
      }
      if (a1 > 1937126451)
      {
        if (a1 > 1952854577)
        {
          if (a1 == 1952854578) {
            return result;
          }
          unsigned __int16 v7 = 13364;
        }
        else
        {
          if (a1 == 1937126452) {
            return result;
          }
          unsigned __int16 v7 = 12848;
        }
        int v5 = v7 | 0x74660000;
        goto LABEL_103;
      }
      if (a1 > 1937125935)
      {
        if (a1 == 1937125936) {
          return result;
        }
        int v5 = 1937125938;
        goto LABEL_103;
      }
      if (a1 == 1936077362) {
        return result;
      }
      unsigned __int16 v4 = 13364;
    }
    else
    {
      if (a1 <= 1751527983)
      {
        if (a1 > 1735549491)
        {
          if (a1 > 1751410031)
          {
            if (a1 == 1751410032) {
              return result;
            }
            int v5 = 1751411059;
          }
          else
          {
            if (a1 == 1735549492) {
              return result;
            }
            int v5 = 1735549752;
          }
        }
        else if (a1 > 1734501175)
        {
          if (a1 == 1734501176) {
            return result;
          }
          int v5 = 1734505012;
        }
        else
        {
          if (a1 == 1717855600) {
            return result;
          }
          int v5 = 1717856627;
        }
        goto LABEL_103;
      }
      if (a1 <= 1885745711)
      {
        if (a1 > 1815491697)
        {
          if (a1 == 1815491698) {
            return result;
          }
          int v5 = 1882468912;
        }
        else
        {
          if (a1 == 1751527984) {
            return result;
          }
          int v5 = 1815162994;
        }
        goto LABEL_103;
      }
      if (a1 <= 1919379251)
      {
        if (a1 == 1885745712) {
          return result;
        }
        int v5 = 1919378232;
        goto LABEL_103;
      }
      if (a1 == 1919379252 || a1 == 1932996149) {
        return result;
      }
      unsigned __int16 v4 = 12848;
    }
    int v5 = v4 | 0x73660000;
    goto LABEL_103;
  }
  if (a1 > 1278555700)
  {
    if (a1 <= 1647719527)
    {
      if (a1 > 1380410944)
      {
        if (a1 > 1647392368)
        {
          if (a1 == 1647392369) {
            return result;
          }
          int v5 = 1647589490;
          goto LABEL_103;
        }
        if (a1 == 1380410945) {
          return result;
        }
        unsigned __int16 v6 = 26689;
      }
      else
      {
        if (a1 <= 1279340853)
        {
          if (a1 == 1278555701) {
            return result;
          }
          int v5 = 1279340600;
          goto LABEL_103;
        }
        if (a1 == 1279340854) {
          return result;
        }
        unsigned __int16 v6 = 16961;
      }
      int v5 = v6 | 0x52470000;
      goto LABEL_103;
    }
    if (a1 > 1651847471)
    {
      if (a1 > 1651926375)
      {
        if (a1 == 1651926376) {
          return result;
        }
        int v5 = 1652056888;
      }
      else
      {
        if (a1 == 1651847472) {
          return result;
        }
        int v5 = 1651925816;
      }
    }
    else if (a1 > 1650943795)
    {
      if (a1 == 1650943796) {
        return result;
      }
      int v5 = 1651519798;
    }
    else
    {
      if (a1 == 1647719528) {
        return result;
      }
      int v5 = 1650942776;
    }
  }
  else if (a1 > 875836517)
  {
    if (a1 > 1278226487)
    {
      if ((a1 - 1278226488) <= 0x30 && ((1 << (a1 - 56)) & 0x1400000000001) != 0
        || (a1 - 1278226736) <= 6 && ((1 << (a1 - 48)) & 0x45) != 0)
      {
        return result;
      }
      return CMPhotoPixelFormatIsAGXCompressed(a1) && CMPhotoSupportsAGXCompressedFormat()
          || CMPhotoPixelFormatIsLossyCompressed(a1) && CMPhotoSupportsLossyCompressedFormat();
    }
    if (a1 == 875836518 || a1 == 875836534) {
      return result;
    }
    int v5 = 1111970369;
  }
  else if (a1 <= 843264309)
  {
    if (a1 > 825437746)
    {
      if (a1 == 825437747) {
        return result;
      }
      int v5 = 843264056;
    }
    else
    {
      if (a1 == 16) {
        return result;
      }
      int v5 = 825306677;
    }
  }
  else
  {
    if (a1 <= 875704437)
    {
      if (a1 == 843264310) {
        return result;
      }
      unsigned __int16 v3 = 12390;
    }
    else
    {
      if (a1 == 875704438 || a1 == 875704934) {
        return result;
      }
      unsigned __int16 v3 = 12918;
    }
    int v5 = v3 | 0x34320000;
  }
LABEL_103:
  if (a1 == v5) {
    return result;
  }
  return CMPhotoPixelFormatIsAGXCompressed(a1) && CMPhotoSupportsAGXCompressedFormat()
      || CMPhotoPixelFormatIsLossyCompressed(a1) && CMPhotoSupportsLossyCompressedFormat();
}

uint64_t CMPhotoDecompressionSessionGetPictureCollectionCodecPool(uint64_t a1, void *a2)
{
  uint64_t result = 4294950306;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = 0;
      *a2 = *(void *)(a1 + 288);
    }
  }
  return result;
}

uint64_t CMPhotoGetTwoPassCropRects(uint64_t a1, unint64_t *a2, unint64_t a3, unint64_t a4, unint64_t *a5, unint64_t *a6)
{
  unint64_t v11 = *a2;
  unint64_t v12 = a2[1];
  unint64_t v13 = a2[2];
  unint64_t v14 = a2[3];
  if ((*a2 & 1) == 0)
  {
    BOOL v15 = (v12 & 1) == 0 && (a2[2] & 1) == 0;
    if (v15 && (a2[3] & 1) == 0)
    {
LABEL_14:
      unint64_t v19 = 0;
      unint64_t v20 = 0;
      unint64_t v21 = 0;
      unint64_t v22 = 0;
      if (!a5) {
        goto LABEL_16;
      }
      goto LABEL_15;
    }
  }
  if (v11) {
    int v17 = 1;
  }
  else {
    int v17 = (v13 + v11) & (v13 + v11 != a3);
  }
  if (v12)
  {
    int v18 = 1;
  }
  else
  {
    int v18 = (v14 + v12) & (v14 + v12 != a4);
    if ((v17 | v18) != 1) {
      goto LABEL_14;
    }
  }
  __int16 v31 = 0;
  uint64_t result = CMPhotoPixelFormatIsSubsampled(a1, (unsigned char *)&v31 + 1, &v31, 0, 0);
  if (result) {
    return result;
  }
  if (HIBYTE(v31)) {
    char v24 = v17;
  }
  else {
    char v24 = 0;
  }
  if (v24) {
    return FigSignalErrorAt();
  }
  char v25 = (_BYTE)v31 ? v18 : 0;
  if (v25) {
    return FigSignalErrorAt();
  }
  unint64_t v26 = a2[1];
  unint64_t v20 = a2[2];
  unint64_t v19 = a2[3];
  unint64_t v11 = *a2 & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v27 = v20 + *a2 + ((v20 + *a2) | 0xFFFFFFFFFFFFFFFELL) + 2;
  if (v27 >= a3) {
    unint64_t v27 = a3;
  }
  if (v17)
  {
    unint64_t v28 = v27;
  }
  else
  {
    unint64_t v11 = *a2;
    unint64_t v28 = v20 + *a2;
  }
  unint64_t v12 = v26 & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v29 = v19 + v26 + ((v19 + v26) | 0xFFFFFFFFFFFFFFFELL) + 2;
  if (v29 >= a4) {
    unint64_t v29 = a4;
  }
  if (v18)
  {
    unint64_t v30 = v29;
  }
  else
  {
    unint64_t v12 = a2[1];
    unint64_t v30 = v19 + v26;
  }
  unint64_t v22 = *a2 - v11;
  unint64_t v21 = v26 - v12;
  unint64_t v13 = v28 - v11;
  unint64_t v14 = v30 - v12;
  if (a5)
  {
LABEL_15:
    *a5 = v11;
    a5[1] = v12;
    a5[2] = v13;
    a5[3] = v14;
  }
LABEL_16:
  uint64_t result = 0;
  if (a6)
  {
    *a6 = v22;
    a6[1] = v21;
    a6[2] = v20;
    a6[3] = v19;
  }
  return result;
}

uint64_t _copyAuxiliaryImageTypeInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  CFTypeRef cf = 0;
  CFTypeRef v33 = 0;
  if (!(a5 | a6))
  {
    uint64_t v30 = 4294950306;
    goto LABEL_30;
  }
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  unint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, void))(v12 + 16);
  if (!v13) {
    goto LABEL_29;
  }
  uint64_t v14 = v13(v10, a2, &v33, 0);
  if (v14) {
    goto LABEL_36;
  }
  CFTypeRef v15 = v33;
  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v16) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  int v18 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *))(v17 + 40);
  if (!v18) {
    goto LABEL_29;
  }
  uint64_t v14 = v18(v15, a3, &cf);
  if (v14)
  {
LABEL_36:
    uint64_t v30 = v14;
    goto LABEL_30;
  }
  if (a5)
  {
    CFAllocatorRef v19 = CFGetAllocator(cf);
    uint64_t FigBaseObject = FigPictureReaderGetFigBaseObject();
    uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v21) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = 0;
    }
    char v24 = *(uint64_t (**)(uint64_t, void, CFAllocatorRef, uint64_t))(v22 + 48);
    if (!v24) {
      goto LABEL_29;
    }
    unsigned int v23 = v24(FigBaseObject, *MEMORY[0x1E4F33390], v19, a5);
    if (!a6) {
      goto LABEL_26;
    }
    goto LABEL_20;
  }
  unsigned int v23 = 0;
  if (a6)
  {
LABEL_20:
    if (v23) {
      goto LABEL_26;
    }
    CFAllocatorRef v25 = CFGetAllocator(cf);
    uint64_t v26 = FigPictureReaderGetFigBaseObject();
    uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v27) {
      uint64_t v28 = v27;
    }
    else {
      uint64_t v28 = 0;
    }
    unint64_t v29 = *(uint64_t (**)(uint64_t, void, CFAllocatorRef, uint64_t))(v28 + 48);
    if (v29)
    {
      unsigned int v23 = v29(v26, *MEMORY[0x1E4F33388], v25, a6);
      goto LABEL_26;
    }
LABEL_29:
    uint64_t v30 = 4294954514;
    goto LABEL_30;
  }
LABEL_26:
  if (v23 == -12783) {
    uint64_t v30 = 4294950303;
  }
  else {
    uint64_t v30 = v23;
  }
LABEL_30:
  if (v33) {
    CFRelease(v33);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v30;
}

uint64_t VTTileDecompressionOutputCallback_Gateway(uint64_t a1)
{
  if (a1 && *(_DWORD *)a1 == 1 && (CFDictionaryRef v1 = *(uint64_t (**)(uint64_t))(a1 + 16)) != 0)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    return v1(v2);
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

uint64_t CMPhotoDecompressionSupportedForContainerAndCodec(int a1, int a2, uint64_t a3, BOOL *a4)
{
  if (!a4) {
    return 4294950306;
  }
  if (a3)
  {
    uint64_t result = FigSignalErrorAt();
    BOOL v5 = 0;
  }
  else if (a1 == 2)
  {
    uint64_t result = 0;
    BOOL v7 = a2 != 1786276896 || MEMORY[0x1E4F4D940] == 0;
    BOOL v5 = !v7;
  }
  else
  {
    BOOL v5 = a2 == 1785750887;
    if (a2 == 1752589105) {
      BOOL v5 = 1;
    }
    if (a2 == 1635148593) {
      BOOL v5 = 1;
    }
    if (a2 == 1936484717) {
      BOOL v5 = 1;
    }
    if (a2 == 1635135537) {
      BOOL v5 = 1;
    }
    if (a1) {
      BOOL v5 = 0;
    }
    BOOL v7 = a1 == 1;
    uint64_t result = 0;
    if (v7) {
      BOOL v5 = a2 == 1785750887;
    }
  }
  *a4 = v5;
  return result;
}

uint64_t _getPrimaryIndex(uint64_t a1, void *a2)
{
  if (a2 && *(void *)(a1 + 48))
  {
    CFTypeRef cf = 0;
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t CMBaseObject = FigPictureCollectionGetCMBaseObject();
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    BOOL v7 = *(uint64_t (**)(uint64_t, void, uint64_t, CFTypeRef *))(v6 + 48);
    if (v7)
    {
      int v8 = v7(CMBaseObject, *MEMORY[0x1E4F33268], v3, &cf);
      CFTypeRef v9 = cf;
      if (v8)
      {
        uint64_t Int32 = 0;
      }
      else
      {
        uint64_t Int32 = CMPhotoCFNumberGetInt32((const __CFNumber *)cf);
        CFTypeRef v9 = cf;
      }
      *a2 = Int32;
      if (v9) {
        CFRelease(v9);
      }
    }
    else
    {
      *a2 = 0;
    }
  }
  return 0;
}

uint64_t CMPhotoDecompressionSessionCreate(const __CFAllocator *a1, const __CFDictionary *a2, void *a3)
{
  if (!a3) {
    return 4294950306;
  }
  FigKTraceInit();
  pthread_once(&CMPhotoDecompressionSessionGetTypeID_onceToken, (void (*)(void))RegisterCMPhotoDecompressionSession);
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance) {
    return 4294950305;
  }
  BOOL v7 = (void *)Instance;
  *(_DWORD *)(Instance + 16) = 0;
  *(void *)(Instance + 272) = 0;
  *(void *)(Instance + 280) = 0;
  *(void *)(Instance + 288) = 0;
  *(void *)(Instance + 296) = 0;
  *(void *)(Instance + 320) = 0;
  *(void *)(Instance + 24) = 1;
  CPUCFIndex Count = CMPhotoGetCPUCount();
  int v20 = 1;
  if (a2)
  {
    CMPhotoCFDictionaryGetIntIfPresent(a2, @"LimitedConcurrencySlots", &v20);
    if (v20 <= 0)
    {
      uint64_t AsyncQueueElements = FigSignalErrorAt();
      goto LABEL_23;
    }
  }
  CFMutableSetRef Mutable = CFSetCreateMutable(a1, 0, 0);
  v7[4] = Mutable;
  if (!Mutable)
  {
LABEL_19:
    uint64_t v18 = 4294950305;
LABEL_24:
    CFRelease(v7);
    return v18;
  }
  uint64_t AsyncQueueElements = _createAsyncQueueElements(a1, (uint64_t)(v7 + 18), "com.apple.CMPhoto.sw.feederQueue", "com.apple.CMPhoto.sw.workerQueue", CPUCount, 0);
  if (AsyncQueueElements
    || (uint64_t AsyncQueueElements = _createAsyncQueueElements(a1, (uint64_t)(v7 + 24), "com.apple.CMPhoto.limitedConcurrency.feederQueue", "com.apple.CMPhoto.limitedConcurrency.workerQueue", v20, 3), AsyncQueueElements))
  {
LABEL_23:
    uint64_t v18 = AsyncQueueElements;
    goto LABEL_24;
  }
  dispatch_queue_t v11 = dispatch_queue_create("com.apple.CMPhoto.hwQueueSynchronizer", 0);
  v7[5] = v11;
  if (!v11) {
    goto LABEL_19;
  }
  if (a2)
  {
    CFDictionaryRef Value = (__CFString *)CFDictionaryGetValue(a2, @"SurfacePool");
    if (Value)
    {
      unint64_t v13 = Value;
      CFTypeID v14 = CFGetTypeID(Value);
      if (v14 == CMPhotoSurfacePoolGetTypeID() || v13 == @"SurfacePoolOneShot") {
        v7[34] = CFRetain(v13);
      }
    }
    CFTypeRef v15 = CFDictionaryGetValue(a2, @"Scaler");
    if (v15)
    {
      uint64_t v16 = v15;
      CFTypeID v17 = CFGetTypeID(v15);
      if (v17 == CMPhotoScaleAndRotateSessionGetTypeID()) {
        v7[35] = CFRetain(v16);
      }
    }
  }
  uint64_t v18 = 0;
  *a3 = v7;
  return v18;
}

uint64_t _createAsyncQueueElements(const __CFAllocator *a1, uint64_t a2, char *label, const char *a4, int a5, int a6)
{
  if (a5 < 1)
  {
    uint64_t v15 = 4294950306;
    if (!a2) {
      return v15;
    }
    goto LABEL_9;
  }
  dispatch_queue_t v11 = dispatch_queue_create(label, 0);
  *(void *)(a2 + 16) = v11;
  if (!v11
    || (dispatch_queue_t v12 = dispatch_queue_create(a4, MEMORY[0x1E4F14430]), (*(void *)(a2 + 8) = v12) == 0)
    || (dispatch_semaphore_t v13 = dispatch_semaphore_create(a5), (*(void *)(a2 + 24) = v13) == 0)
    || (CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, 0), (*(void *)(a2 + 32) = Mutable) == 0))
  {
    uint64_t v15 = 4294950305;
LABEL_9:
    _releaseAsyncQueueElements((void *)a2);
    return v15;
  }
  uint64_t v15 = 0;
  *(_DWORD *)(a2 + 40) = a6;
  return v15;
}

uint64_t VTTileDecompressionPluginClass_decode(uint64_t a1, CFDictionaryRef theDict, CFTypeRef a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 64);
  if (!theDict) {
    goto LABEL_13;
  }
  CFDictionaryRef Value = CFDictionaryGetValue(theDict, @"CanvasPixelBuffer");
  uint64_t v10 = CFDictionaryGetValue(theDict, @"TilePixelBuffer");
  dispatch_queue_t v11 = CFDictionaryGetValue(theDict, @"CanvasOrigin");
  if (!Value)
  {
    CFDictionaryRef Value = v10;
    if (v10) {
      goto LABEL_6;
    }
LABEL_13:
    unsigned int v13 = FigSignalErrorAt();
    goto LABEL_19;
  }
  if (v11)
  {
    FigCFDictionaryGetInt32IfPresent();
    FigCFDictionaryGetInt32IfPresent();
    FigCFDictionaryGetInt32IfPresent();
    FigCFDictionaryGetInt32IfPresent();
  }
LABEL_6:
  dispatch_queue_t v12 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  if (!*(unsigned char *)(v4 + 25))
  {
    if (*(unsigned char *)(v4 + 24))
    {
      if (*v12 == 1) {
        kdebug_trace();
      }
      unsigned int v13 = VTTileDecompressionSessionDecodeTile();
      if (*v12 == 1) {
        goto LABEL_18;
      }
      goto LABEL_19;
    }
    uint64_t v15 = malloc_type_calloc(1uLL, 0x38uLL, 0x10A0040518B8D9EuLL);
    if (!v15)
    {
      *(unsigned char *)uint64_t v4 = 1;
      return 4294950305;
    }
    uint64_t v16 = v15;
    CFTypeID v17 = *(const void **)(v4 + 8);
    if (v17)
    {
      CFTypeRef v18 = CFRetain(v17);
      if (!a3)
      {
LABEL_27:
        CFTypeRef v19 = CFRetain(Value);
        *uint64_t v16 = a1;
        v16[1] = v18;
        v16[2] = a3;
        v16[3] = v19;
        v16[4] = 0;
        v16[5] = -1;
        v16[6] = a4;
        dispatch_async_f(*(dispatch_queue_t *)(v4 + 32), v16, (dispatch_function_t)_dispatch_tileDecodeTileAsync);
        return 0;
      }
    }
    else
    {
      CFTypeRef v18 = 0;
      if (!a3) {
        goto LABEL_27;
      }
    }
    a3 = CFRetain(a3);
    goto LABEL_27;
  }
  if (*v12 == 1) {
    kdebug_trace();
  }
  unsigned int v13 = VTTileDecompressionSessionDecodeTile();
  if (*v12 == 1) {
LABEL_18:
  }
    kdebug_trace();
LABEL_19:
  if (!v13) {
    return 0;
  }
  *(unsigned char *)uint64_t v4 = 1;
  if ((v13 | 2) == 0x44E) {
    return 4294951826;
  }
  else {
    return v13;
  }
}

uint64_t CMPhotoDecompressionSessionCreateContainer(const void *a1, const __CFDictionary *a2, const __CFData *a3, _DWORD *a4, uint64_t *a5)
{
  if (!a1 || !a3 || !a5) {
    return 4294950306;
  }
  CFAllocatorRef v10 = CFGetAllocator(a1);
  return CMPhotoDecompressionContainerCreate((uint64_t)v10, a3, a2, (uint64_t)a1, a4, a5);
}

uint64_t CMPhotoDecompressionContainerCreate(uint64_t a1, const __CFData *a2, const __CFDictionary *a3, uint64_t a4, _DWORD *a5, uint64_t *a6)
{
  CFTypeRef cf = 0;
  int v73 = 0;
  if (!a6) {
    return 4294950306;
  }
  uint64_t v6 = a6;
  pthread_once(&CMPhotoDecompressionContainerGetTypeID_onceToken, (void (*)(void))RegisterCMPhotoDecompressionContainer);
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    uint64_t v21 = 4294950305;
    goto LABEL_117;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a4 + 16));
  uint64_t v12 = *(void *)(a4 + 320) + 1;
  *(void *)(a4 + 320) = v12;
  *(void *)(Instance + 496) = v12;
  os_unfair_lock_unlock((os_unfair_lock_t)(a4 + 16));
  CFTypeRef v13 = CFRetain((CFTypeRef)a4);
  *(unsigned char *)(Instance + 28) = 0;
  *(void *)(Instance + 16) = v13;
  if (a3)
  {
    *(unsigned char *)(Instance + 25) = CMPhotoCFDictionaryGetBooleanIfPresent(a3, @"PreferSoftwareCodec", (unsigned char *)(Instance + 24));
    *(unsigned char *)(Instance + 27) = CMPhotoCFDictionaryGetBooleanIfPresent(a3, @"RequireHardwareCodec", (unsigned char *)(Instance + 26));
    CFTypeID v14 = CFDictionaryGetValue(a3, @"SequenceInfo");
    CMPhotoCFDictionaryGetBooleanIfPresent(a3, @"UseLenientParsingMode", (unsigned char *)(Instance + 28));
  }
  else
  {
    CFTypeID v14 = 0;
  }
  if (*(unsigned char *)(Instance + 26)) {
    *(unsigned char *)(Instance + 24) = 0;
  }
  if (v14)
  {
    int v15 = 0;
    int v73 = 0;
    uint64_t v16 = CMPhotoDecompressionContainerVTableHEICS;
    goto LABEL_10;
  }
  uint64_t v17 = CMPhotoByteStreamCreateFromSource(a2, 0, 0, 0, &cf, 0);
  if (v17) {
    goto LABEL_30;
  }
  uint64_t v17 = CMPhotoImageContainerFormatDetectFromBytestream((uint64_t)cf, &v73);
  if (v17) {
    goto LABEL_30;
  }
  int v15 = v73;
  if (v73)
  {
    if (v73 != 1)
    {
      if (v73 == 2)
      {
        uint64_t v16 = CMPhotoDecompressionContainerVTableJXL;
        goto LABEL_10;
      }
      uint64_t v17 = FigSignalErrorAt();
LABEL_30:
      uint64_t v21 = v17;
      goto LABEL_117;
    }
    uint64_t v16 = CMPhotoDecompressionContainerVTableJFIF;
  }
  else
  {
    uint64_t v16 = CMPhotoDecompressionContainerVTableHEIF;
  }
LABEL_10:
  *(void *)(Instance + 32) = v16;
  *(_DWORD *)(Instance + 536) = v15;
  if (!*v16)
  {
    uint64_t v21 = 4294950302;
    goto LABEL_117;
  }
  uint64_t v17 = ((uint64_t (*)(uint64_t, const __CFDictionary *, CFTypeRef, const __CFData *))*v16)(Instance, a3, cf, a2);
  if (v17) {
    goto LABEL_30;
  }
  CFAllocatorRef v18 = CFGetAllocator((CFTypeRef)Instance);
  v79[0] = 0;
  int64_t v77 = 0;
  unint64_t v78 = 0;
  uint64_t v19 = *(void *)(Instance + 32);
  if (v19) {
    uint64_t v20 = *(void *)(Instance + 32);
  }
  else {
    uint64_t v20 = 0;
  }
  if (!*(void *)(v20 + 24)) {
    goto LABEL_73;
  }
  uint64_t v22 = (*(uint64_t (**)(uint64_t, int64_t *))(v19 + 24))(Instance, &v77);
  if (v22) {
    goto LABEL_134;
  }
  CFIndex v23 = v77;
  if (!v77)
  {
    int64_t v26 = 0;
    CFMutableArrayRef Mutable = 0;
    CFMutableDictionaryRef v28 = 0;
    unint64_t v29 = 0;
    uint64_t v30 = 0;
    __int16 v31 = 0;
    int64x2_t v32 = 0;
LABEL_106:
    uint64_t v21 = 0;
    *(void *)(Instance + 544) = Mutable;
    *(void *)(Instance + 552) = v29;
    *(void *)(Instance + 560) = v30;
    *(void *)(Instance + 568) = v31;
    *(void *)(Instance + 576) = v26;
    *(void *)(Instance + 584) = v23;
    CFMutableArrayRef Mutable = 0;
    unint64_t v49 = 0;
    unint64_t v50 = 0;
    goto LABEL_107;
  }
  uint64_t v24 = *(void *)(Instance + 32);
  if (v24) {
    uint64_t v25 = *(void *)(Instance + 32);
  }
  else {
    uint64_t v25 = 0;
  }
  if (*(void *)(v25 + 320))
  {
    if (v24) {
      uint64_t v33 = *(void *)(Instance + 32);
    }
    else {
      uint64_t v33 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, CFTypeRef *))(v33 + 320))(Instance, 1, v79);
    uint64_t v24 = *(void *)(Instance + 32);
  }
  if (v24) {
    uint64_t v34 = v24;
  }
  else {
    uint64_t v34 = 0;
  }
  if (*(void *)(v34 + 32))
  {
    if (v24) {
      uint64_t v35 = v24;
    }
    else {
      uint64_t v35 = 0;
    }
    if (*(void *)(v35 + 32))
    {
      uint64_t v22 = (*(uint64_t (**)(uint64_t, char **))(v24 + 32))(Instance, &v78);
      if (!v22) {
        goto LABEL_47;
      }
LABEL_134:
      uint64_t v21 = v22;
      CFMutableArrayRef Mutable = 0;
      CFMutableDictionaryRef v28 = 0;
      unint64_t v49 = 0;
      unint64_t v50 = 0;
      int64x2_t v32 = 0;
      goto LABEL_107;
    }
LABEL_73:
    CFMutableArrayRef Mutable = 0;
    CFMutableDictionaryRef v28 = 0;
    unint64_t v49 = 0;
    unint64_t v50 = 0;
    int64x2_t v32 = 0;
    uint64_t v21 = 4294950302;
    goto LABEL_107;
  }
LABEL_47:
  if (!v79[0])
  {
    int64_t v26 = v77;
    goto LABEL_75;
  }
  CFIndex Count = CFArrayGetCount((CFArrayRef)v79[0]);
  int64_t v26 = v77;
  if (!Count)
  {
LABEL_75:
    CFMutableArrayRef Mutable = 0;
    CFMutableDictionaryRef v28 = 0;
    unint64_t v29 = 0;
    uint64_t v30 = 0;
    int64x2_t v32 = 0;
    __int16 v31 = v78;
    CFIndex v23 = v26;
    goto LABEL_106;
  }
  int64x2_t v32 = malloc_type_calloc(v77, 1uLL, 0x100004077774924uLL);
  if (!v32)
  {
    CFMutableArrayRef Mutable = 0;
    goto LABEL_131;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v18, 0, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
LABEL_131:
    CFMutableDictionaryRef v28 = 0;
LABEL_132:
    unint64_t v49 = 0;
    unint64_t v50 = 0;
    uint64_t v21 = 4294950305;
    goto LABEL_107;
  }
  CFMutableDictionaryRef v28 = CFDictionaryCreateMutable(v18, 0, MEMORY[0x1E4F1D530], 0);
  if (!v28) {
    goto LABEL_132;
  }
  unint64_t v37 = malloc_type_calloc(v77, 8uLL, 0x100004000313F17uLL);
  if (!v37) {
    goto LABEL_132;
  }
  long long v71 = v37;
  theDict = v28;
  BOOL v67 = a5;
  int v68 = v6;
  BOOL v69 = malloc_type_calloc(v77, 8uLL, 0x100004000313F17uLL);
  if (!v69)
  {
    unint64_t v50 = 0;
    uint64_t v21 = 4294950305;
    unint64_t v49 = v71;
    goto LABEL_107;
  }
  CFDictionaryRef v38 = 0;
  CFIndex v39 = 0;
  uint64_t v40 = @"GroupPictureIndexList";
  theArray = Mutable;
  while (1)
  {
    CFArrayRef v41 = (const __CFArray *)v79[0];
    if (v79[0]) {
      CFArrayRef v41 = (const __CFArray *)CFArrayGetCount((CFArrayRef)v79[0]);
    }
    if (v39 >= (uint64_t)v41) {
      break;
    }
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)v79[0], v39);
    CFArrayRef v43 = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, v40);
    if (v43)
    {
      CFArrayRef v44 = v43;
      if (CFArrayGetCount(v43) >= 2)
      {
        float64x2_t v45 = v40;
        if (CFArrayGetCount(v44) >= 1)
        {
          uint64_t v46 = 0;
          while (1)
          {
            value[0] = 0;
            if (!CMPhotoCFArrayGetSizeAtIndex(v44, v46, value) || value[0] >= (void *)v77) {
              break;
            }
            if (value[0] == v78) {
              CFDictionaryRef v47 = ValueAtIndex;
            }
            else {
              CFDictionaryRef v47 = 0;
            }
            if (!v38) {
              CFDictionaryRef v38 = v47;
            }
            v32[(unint64_t)value[0]] = 1;
            if (++v46 >= CFArrayGetCount(v44)) {
              goto LABEL_70;
            }
          }
LABEL_125:
          uint64_t v21 = 4294950194;
          a5 = v67;
          uint64_t v6 = v68;
          unint64_t v49 = v71;
          CFMutableDictionaryRef v28 = theDict;
          unint64_t v50 = v69;
          CFMutableArrayRef Mutable = theArray;
          goto LABEL_107;
        }
LABEL_70:
        LODWORD(value[0]) = 0;
        unint64_t v48 = cmpweak_kFigPictureCollection_Group_LowestMemberIDKey();
        if (!CMPhotoCFDictionaryGetInt32IfPresent(ValueAtIndex, v48, value)) {
          goto LABEL_125;
        }
        uint64_t v40 = v45;
        CFMutableArrayRef Mutable = theArray;
        CFArrayAppendValue(theArray, ValueAtIndex);
        CFDictionaryAddValue(theDict, ValueAtIndex, (const void *)LODWORD(value[0]));
      }
    }
    ++v39;
  }
  int64_t v51 = v77;
  if (v77 >= 1)
  {
    for (uint64_t i = 0; i < v51; ++i)
    {
      if (!v32[i])
      {
        LODWORD(value[0]) = 0;
        uint64_t v53 = *(void *)(Instance + 32);
        if (v53) {
          uint64_t v54 = *(void *)(Instance + 32);
        }
        else {
          uint64_t v54 = 0;
        }
        if (!*(void *)(v54 + 48))
        {
          uint64_t v21 = 4294950302;
LABEL_123:
          a5 = v67;
          uint64_t v6 = v68;
          goto LABEL_124;
        }
        uint64_t v55 = (*(uint64_t (**)(uint64_t, uint64_t, void **))(v53 + 48))(Instance, i, value);
        if (v55)
        {
          uint64_t v21 = v55;
          goto LABEL_123;
        }
        CFNumberRef Size = CMPhotoCFNumberCreateSize(i);
        if (!Size)
        {
          uint64_t v21 = 4294950305;
          goto LABEL_123;
        }
        CFNumberRef v57 = Size;
        CFArrayAppendValue(Mutable, Size);
        CFRelease(v57);
        CFDictionarySetValue(theDict, v57, (const void *)LODWORD(value[0]));
        if ((char *)i == v78) {
          CFNumberRef v58 = v57;
        }
        else {
          CFNumberRef v58 = 0;
        }
        if (!v38) {
          CFDictionaryRef v38 = v58;
        }
        int64_t v51 = v77;
      }
    }
  }
  v80.length = CFArrayGetCount(Mutable);
  v80.location = 0;
  CFArraySortValues(Mutable, v80, (CFComparatorFunction)_indexMapComparator, theDict);
  if (CFArrayGetCount(Mutable) < 1)
  {
    __int16 v31 = 0;
LABEL_105:
    CFIndex v23 = CFArrayGetCount(Mutable);
    int64_t v26 = v77;
    a5 = v67;
    uint64_t v6 = v68;
    unint64_t v29 = v71;
    CFMutableDictionaryRef v28 = theDict;
    uint64_t v30 = v69;
    goto LABEL_106;
  }
  uint64_t v59 = 0;
  __int16 v31 = 0;
  while (1)
  {
    CFNumberRef v60 = (const __CFNumber *)FigCFArrayGetValueAtIndex();
    CFNumberRef v61 = v60;
    if (v60 == v38) {
      __int16 v31 = v59;
    }
    if (!v60 || (CFTypeID v62 = CFGetTypeID(v60), v62 != CFDictionaryGetTypeID()))
    {
      CFNumberRef v65 = CMPhotoCFNumberGetSize(v61);
      if ((uint64_t)v65 < v77) {
        *((void *)v71 + (void)v65) = v59;
      }
      goto LABEL_102;
    }
    unint64_t v63 = CFDictionaryGetValue(v61, @"GroupPictureIndexList");
    if (!v63) {
      break;
    }
    unint64_t v64 = v63;
    v76[0] = 0;
    v76[1] = v76;
    v76[2] = 0x2000000000;
    v76[3] = 0;
    value[0] = (void *)MEMORY[0x1E4F143A8];
    value[1] = *(void **)"";
    CFTypeRef value[2] = ___populateIndexMap_block_invoke;
    value[3] = &unk_1E5E2EF78;
    value[6] = v71;
    value[7] = v59;
    value[8] = v69;
    value[4] = v76;
    value[5] = (void *)v77;
    FigCFArrayApplyBlock();
    CFArraySetValueAtIndex(Mutable, (CFIndex)v59, v64);
    _Block_object_dispose(v76, 8);
LABEL_102:
    if ((uint64_t)++v59 >= CFArrayGetCount(Mutable)) {
      goto LABEL_105;
    }
  }
  uint64_t v21 = 4294950304;
  a5 = v67;
  uint64_t v6 = v68;
LABEL_124:
  unint64_t v49 = v71;
  CFMutableDictionaryRef v28 = theDict;
  unint64_t v50 = v69;
LABEL_107:
  if (v79[0]) {
    CFRelease(v79[0]);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v28) {
    CFRelease(v28);
  }
  free(v32);
  free(v49);
  free(v50);
  if (!v21)
  {
    if (a5) {
      *a5 = v73;
    }
    uint64_t v21 = 0;
    *uint64_t v6 = Instance;
    uint64_t Instance = 0;
  }
LABEL_117:
  if (cf) {
    CFRelease(cf);
  }
  if (Instance) {
    CFRelease((CFTypeRef)Instance);
  }
  return v21;
}

uint64_t _copyGroupsDescriptionArray(unsigned char *a1, int a2, void *a3)
{
  CFGetAllocator(a1);
  if (!a3) {
    return 4294950306;
  }
  if (!a2 || !a1[153]) {
    return 4294950303;
  }
  uint64_t MutableCopy = FigCFArrayCreateMutableCopy();
  if (!MutableCopy) {
    return 4294950305;
  }
  BOOL v7 = (void *)MutableCopy;
  uint64_t v8 = FigCFDictionaryCreateMutableCopy();
  if (!v8) {
    goto LABEL_21;
  }
  CFTypeRef v9 = (void *)v8;
  CFAllocatorRef v10 = (__CFArray *)FigCFArrayCreateMutableCopy();
  if (!v10)
  {
    CFRelease(v9);
LABEL_21:
    uint64_t v14 = 4294950305;
LABEL_14:
    CFRelease(v7);
    return v14;
  }
  dispatch_queue_t v11 = v10;
  uint64_t appended = CMPhotoCFArrayAppendInt32(v10, 1);
  if (appended
    || (uint64_t appended = CMPhotoCFArrayAppendInt32(v11, 0), appended)
    || (uint64_t appended = CMPhotoCFDictionarySetInt32((__CFDictionary *)v9, @"GroupType", 1634497650), appended)
    || (CFDictionarySetValue((CFMutableDictionaryRef)v9, @"GroupPictureIndexList", v11),
        uint64_t appended = CMPhotoCFDictionarySetInt32((__CFDictionary *)v9, (const void *)*MEMORY[0x1E4F33368], 2),
        appended))
  {
    uint64_t v14 = appended;
  }
  else
  {
    CFTypeRef v13 = cmpweak_kFigPictureCollection_Group_LowestMemberIDKey();
    uint64_t v14 = CMPhotoCFDictionarySetInt32((__CFDictionary *)v9, v13, 1);
    if (!v14)
    {
      CFArrayAppendValue((CFMutableArrayRef)v7, v9);
      *a3 = v7;
      BOOL v7 = 0;
    }
  }
  CFRelease(v11);
  CFRelease(v9);
  if (v7) {
    goto LABEL_14;
  }
  return v14;
}

uint64_t _copyGroupsDescriptionArray_0(void *a1, int a2, __CFArray **a3)
{
  CFAllocatorRef allocator = CFGetAllocator(a1);
  CFArrayRef v57 = 0;
  if (!a3) {
    return 4294950306;
  }
  uint64_t CMBaseObject = FigPictureCollectionGetCMBaseObject();
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(unsigned int (**)(uint64_t, void, const __CFAllocator *, const __CFArray **))(v7 + 48);
  if (!v8 || v8(CMBaseObject, *MEMORY[0x1E4F33260], allocator, &v57)) {
    goto LABEL_12;
  }
  if (!v57) {
    return 4294950303;
  }
  CFIndex Count = CFArrayGetCount(v57);
  if (!Count)
  {
LABEL_12:
    uint64_t v12 = 0;
    CFTypeRef v13 = 0;
    CFDictionaryRef Value = 0;
    uint64_t v15 = 4294950303;
    goto LABEL_13;
  }
  CFIndex v10 = Count;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(allocator, Count, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
    uint64_t v12 = 0;
    CFTypeRef v13 = 0;
    CFDictionaryRef Value = 0;
    uint64_t v15 = 4294950305;
    goto LABEL_13;
  }
  theArray = Mutable;
  float64x2_t v45 = a3;
  if (a2) {
    BOOL HasAlternates = 0;
  }
  else {
    BOOL HasAlternates = CMPhotoDecompressionContainerHasAlternates((uint64_t)a1);
  }
  CFIndex v17 = 0;
  CFAllocatorRef v18 = 0;
  uint64_t v12 = 0;
  CFDictionaryRef Value = 0;
  key = (void *)*MEMORY[0x1E4F33380];
  uint64_t v54 = (void *)*MEMORY[0x1E4F33378];
  uint64_t v46 = (void *)*MEMORY[0x1E4F33368];
  CFDictionaryRef v47 = (void *)*MEMORY[0x1E4F33360];
  uint64_t v19 = (const void *)*MEMORY[0x1E4F34940];
  CFIndex v50 = v10;
  do
  {
    if (v12) {
      CFRelease(v12);
    }
    if (Value) {
      CFRelease(Value);
    }
    if (v18) {
      CFRelease(v18);
    }
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v57, v17);
    CFDictionaryRef Value = CFDictionaryGetValue(ValueAtIndex, key);
    if (!Value)
    {
      uint64_t v12 = 0;
LABEL_88:
      uint64_t v15 = 4294950304;
      goto LABEL_92;
    }
    uint64_t v21 = (__CFArray *)CFDictionaryGetValue(ValueAtIndex, v54);
    if (!v21)
    {
      uint64_t v12 = 0;
      CFDictionaryRef Value = 0;
      goto LABEL_88;
    }
    uint64_t v22 = v21;
    int v23 = FigCFEqual();
    if (v23)
    {
      int v24 = 1937007986;
    }
    else
    {
      if (!FigCFEqual())
      {
        CFAllocatorRef v18 = 0;
        uint64_t v12 = 0;
        CFDictionaryRef Value = 0;
        goto LABEL_73;
      }
      int v24 = 1634497650;
    }
    CFAllocatorRef v18 = 0;
    uint64_t v12 = 0;
    CFDictionaryRef Value = 0;
    if (v23) {
      BOOL v25 = a2 == 0;
    }
    else {
      BOOL v25 = 1;
    }
    if (v25 && v23 | a2)
    {
      int64_t v26 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      uint64_t v12 = v26;
      if (!v26) {
        goto LABEL_89;
      }
      uint64_t v27 = CMPhotoCFDictionarySetInt32(v26, @"GroupType", v24);
      if (v27)
      {
        uint64_t v15 = v27;
        CFDictionaryRef Value = 0;
LABEL_92:
        CFTypeRef v13 = theArray;
        goto LABEL_13;
      }
      if (HasAlternates)
      {
        CFArrayRef MutableCopy = (const __CFArray *)FigCFArrayCreateMutableCopy();
        if (!MutableCopy)
        {
LABEL_89:
          CFDictionaryRef Value = 0;
          uint64_t v15 = 4294950305;
          goto LABEL_92;
        }
        uint64_t v22 = MutableCopy;
        if (CFArrayGetCount(MutableCopy) >= 1)
        {
          CFIndex v29 = 0;
          while (1)
          {
            CFNumberRef v56 = 0;
            CFNumberRef v30 = (const __CFNumber *)FigCFArrayGetValueAtIndex();
            if (!v30)
            {
LABEL_78:
              CFDictionaryRef Value = 0;
              uint64_t v15 = 4294950194;
              goto LABEL_83;
            }
            CFNumberRef v31 = v30;
            CFTypeID v32 = CFGetTypeID(v30);
            if (v32 == CFNumberGetTypeID())
            {
              CFNumberRef Size = CMPhotoCFNumberGetSize(v31);
              CFNumberRef v56 = Size;
            }
            else
            {
              CFTypeID v34 = CFGetTypeID(v31);
              if (v34 != CFDictionaryGetTypeID()) {
                goto LABEL_78;
              }
              uint64_t v35 = CFDictionaryGetValue(v31, v54);
              if (!CMPhotoCFArrayGetSizeAtIndex(v35, 0, &v56))
              {
                CFDictionaryRef Value = 0;
                uint64_t v15 = 4294950304;
                goto LABEL_83;
              }
              CFNumberRef Size = v56;
            }
            uint64_t v55 = -1;
            uint64_t v36 = CMPhotoDecompressionContainerInternalToExternalIndexAndCopyAlternateOptions(a1, (uint64_t)Size, &v55, 0, 0);
            if (v36) {
              break;
            }
            uint64_t v36 = CMPhotoCFArraySetCFIndexAtIndex(v22, v55, v29);
            if (v36) {
              break;
            }
            if (++v29 >= CFArrayGetCount(v22)) {
              goto LABEL_58;
            }
          }
          uint64_t v15 = v36;
          CFDictionaryRef Value = 0;
LABEL_83:
          CFTypeRef v13 = theArray;
          goto LABEL_84;
        }
LABEL_58:
        CFAllocatorRef v18 = v22;
      }
      else
      {
        CFAllocatorRef v18 = 0;
      }
      CFDictionarySetValue(v12, @"GroupPictureIndexList", v22);
      if (a2)
      {
        unint64_t v37 = cmpweak_kFigPictureCollection_Group_LowestMemberIDKey();
        CFDictionaryRef v38 = CFDictionaryGetValue(ValueAtIndex, v37);
        if (v38 || (CFDictionaryRef v38 = CFDictionaryGetValue(ValueAtIndex, v46)) != 0)
        {
          CFIndex v39 = cmpweak_kFigPictureCollection_Group_LowestMemberIDKey();
          CFDictionarySetValue(v12, v39, v38);
        }
LABEL_64:
        CFDictionaryRef Value = 0;
      }
      else
      {
        uint64_t v40 = CFDictionaryGetValue(ValueAtIndex, v47);
        CFDictionaryRef Value = v40;
        if (v40)
        {
          CFGetAllocator(v40);
          uint64_t v41 = FigCFDictionaryCreateMutableCopy();
          if (!v41) {
            goto LABEL_64;
          }
          uint64x2_t v42 = (__CFDictionary *)v41;
          uint64_t v43 = FigCFDictionaryGetValue();
          if (v43)
          {
            CFArrayRef v44 = (const void *)v43;
            CFDictionaryRemoveValue(v42, v19);
            CFDictionarySetValue(v42, @"DisparityAdjustment", v44);
          }
          if (FigCFDictionaryGetCount() < 1)
          {
            CFRelease(v42);
            goto LABEL_64;
          }
        }
        else
        {
          uint64x2_t v42 = 0;
          if (FigCFDictionaryGetCount() < 1) {
            goto LABEL_72;
          }
        }
        FigCFDictionaryAddEntriesToDictionaryWithRecursion();
        CFDictionaryRef Value = v42;
      }
LABEL_72:
      CFArrayAppendValue(theArray, v12);
    }
LABEL_73:
    ++v17;
  }
  while (v17 != v50);
  CFTypeRef v13 = theArray;
  if (CFArrayGetCount(theArray) >= 1)
  {
    uint64_t v15 = 0;
    *float64x2_t v45 = theArray;
    uint64_t v22 = v18;
    CFTypeRef v13 = 0;
    if (!v18) {
      goto LABEL_13;
    }
    goto LABEL_84;
  }
  uint64_t v15 = 4294950303;
  uint64_t v22 = v18;
  if (v18) {
LABEL_84:
  }
    CFRelease(v22);
LABEL_13:
  if (v57) {
    CFRelease(v57);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (Value) {
    CFRelease(Value);
  }
  return v15;
}

uint64_t CMPhotoByteStreamCreateFromSource(const __CFData *a1, uint64_t a2, int a3, int a4, CFTypeRef *a5, void *a6)
{
  CFBooleanRef BOOLean = 0;
  CFTypeRef cf = 0;
  CFTypeRef v33 = 0;
  CFTypeRef v34 = 0;
  if (!a1)
  {
    CFArrayRef MutableCopy = 0;
    uint64_t v16 = 4294950306;
LABEL_59:
    if (cf) {
      CFRelease(cf);
    }
    if (MutableCopy) {
      CFRelease(MutableCopy);
    }
    goto LABEL_63;
  }
  if (!a5)
  {
    CFArrayRef MutableCopy = 0;
    uint64_t v16 = 0;
    goto LABEL_59;
  }
  CFDataRef v11 = a1;
  CFAllocatorRef v12 = CFGetAllocator(a1);
  switch(CMPhotoGetStorageType(v11))
  {
    case 1u:
      if (a3 && !a4) {
        goto LABEL_10;
      }
      if (!a3)
      {
        uint64_t WritableWithCFMutableData = FigByteStreamCreateWithCFData();
        goto LABEL_25;
      }
      CFArrayRef MutableCopy = CFDataCreateMutableCopy(v12, 0, v11);
      if (!MutableCopy)
      {
        uint64_t v16 = 4294950305;
        goto LABEL_59;
      }
      uint64_t WritableWithCFMutableData = FigByteStreamCreateWritableWithCFMutableData();
      if (!WritableWithCFMutableData) {
        goto LABEL_40;
      }
      goto LABEL_26;
    case 2u:
      uint64_t WritableWithCFMutableData = CMByteStreamCreateWritableForBlockBuffer();
      goto LABEL_25;
    case 3u:
      if (a3)
      {
        uint64_t ByteStreamForFile = CMByteStreamCreateForFileURL();
      }
      else
      {
        FigGetDefaultManagedFilePool();
        uint64_t ByteStreamForFile = FigManagedFilePoolCreateByteStreamForFile();
      }
      goto LABEL_22;
    case 4u:
      if (a3)
      {
        uint64_t WritableWithCFMutableData = FigByteStreamCreateWritableWithIOSurface();
LABEL_25:
        CFArrayRef MutableCopy = 0;
        if (WritableWithCFMutableData)
        {
LABEL_26:
          uint64_t v16 = WritableWithCFMutableData;
          goto LABEL_59;
        }
      }
      else
      {
        uint64_t ByteStreamForFile = FigByteStreamCreateWithIOSurface();
LABEL_22:
        uint64_t v16 = ByteStreamForFile;
        CFArrayRef MutableCopy = 0;
        if (ByteStreamForFile) {
          goto LABEL_59;
        }
      }
      goto LABEL_40;
    case 5u:
      if (!a3) {
        goto LABEL_37;
      }
      uint64_t v32 = a2;
      uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
      uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v19) {
        uint64_t v20 = v19;
      }
      else {
        uint64_t v20 = 0;
      }
      uint64_t v21 = *(uint64_t (**)(uint64_t, void, const __CFAllocator *, CFBooleanRef *))(v20 + 48);
      if (!v21) {
        goto LABEL_57;
      }
      uint64_t v15 = v21(CMBaseObject, *MEMORY[0x1E4F1EC80], v12, &BOOLean);
      if (v15) {
        goto LABEL_11;
      }
      if (a2) {
        goto LABEL_31;
      }
      uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v27) {
        uint64_t v28 = v27;
      }
      else {
        uint64_t v28 = 0;
      }
      CFNumberRef v30 = *(uint64_t (**)(const __CFData *, void, uint64_t *))(v28 + 24);
      if (!v30) {
        goto LABEL_57;
      }
      uint64_t v15 = v30(v11, 0, &v32);
      if (v15) {
        goto LABEL_11;
      }
LABEL_31:
      int Value = CFBooleanGetValue(BOOLean);
      if (!(Value | a4))
      {
LABEL_10:
        uint64_t v15 = FigSignalErrorAt();
        goto LABEL_11;
      }
      if (!a4 || Value)
      {
LABEL_37:
        CFArrayRef MutableCopy = 0;
LABEL_38:
        CFTypeRef v26 = CFRetain(v11);
        goto LABEL_39;
      }
      uint64_t v23 = v32;
      if (v32 < 0)
      {
        uint64_t v16 = 4294950190;
        goto LABEL_58;
      }
      uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v24) {
        uint64_t v25 = v24;
      }
      else {
        uint64_t v25 = 0;
      }
      CFIndex v29 = *(uint64_t (**)(const __CFData *, uint64_t, void, CFTypeRef *, void))(v25 + 32);
      if (!v29)
      {
LABEL_57:
        uint64_t v16 = 4294954514;
        goto LABEL_58;
      }
      uint64_t v15 = v29(v11, v23, 0, &v34, 0);
      if (v15 || (uint64_t v15 = CMByteStreamCreateForBlockBuffer(), v15))
      {
LABEL_11:
        uint64_t v16 = v15;
LABEL_58:
        CFArrayRef MutableCopy = 0;
        goto LABEL_59;
      }
      CFDataRef v11 = (const __CFData *)v33;
      CFArrayRef MutableCopy = v34;
      CFTypeRef v34 = 0;
      if (v33) {
        goto LABEL_38;
      }
      CFTypeRef v26 = 0;
LABEL_39:
      CFTypeRef cf = v26;
LABEL_40:
      *a5 = cf;
      CFTypeRef cf = 0;
      if (a6)
      {
        uint64_t v16 = 0;
        *a6 = MutableCopy;
      }
      else
      {
        if (MutableCopy) {
          CFRelease(MutableCopy);
        }
        uint64_t v16 = 0;
      }
LABEL_63:
      if (v34) {
        CFRelease(v34);
      }
      if (v33) {
        CFRelease(v33);
      }
      if (BOOLean) {
        CFRelease(BOOLean);
      }
      return v16;
    default:
      goto LABEL_10;
  }
}

uint64_t CMPhotoGetStorageType(const void *a1)
{
  pthread_once(&CMPhotoGetStorageType_onceToken, (void (*)(void))_once_setTypes);
  CFTypeID v2 = CFGetTypeID(a1);
  uint64_t result = 1;
  while (v2 != sTypes_0[result])
  {
    if (++result == 6) {
      return 0;
    }
  }
  return result;
}

uint64_t _getImageCount(uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v2 = 1;
    if (*(unsigned char *)(a1 + 153)) {
      uint64_t v2 = 2;
    }
    *a2 = v2;
  }
  return 0;
}

uint64_t _getImageCount_0(uint64_t a1, void *a2)
{
  if (a2) {
    *a2 = 1;
  }
  return 0;
}

uint64_t _getImageCount_1(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v9 = 0;
  uint64_t v3 = *(void *)(a1 + 48);
  if (!v3)
  {
    uint64_t v7 = 0;
LABEL_11:
    uint64_t result = 0;
    *a2 = v7;
    return result;
  }
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(v5 + 8);
  if (v8)
  {
    uint64_t result = v8(v3, 1, &v9);
    if (result) {
      return result;
    }
    uint64_t v7 = v9;
    goto LABEL_11;
  }
  return 4294954514;
}

CFNumberRef _getImageCount_2(uint64_t a1, void *a2)
{
  return _getImageCountForSequence(*(void *)(a1 + 80), a2);
}

uint64_t CMPhotoImageContainerFormatDetectFromBytestream(uint64_t a1, int *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = &v20;
    unint64_t v6 = 12;
    do
    {
      unint64_t v18 = 0;
      uint64_t v19 = 0;
      uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v7) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(v8 + 24);
      if (!v9) {
        return 4294954514;
      }
      uint64_t result = v9(a1, v4, &v19);
      if (result) {
        return result;
      }
      if (v19 < 1) {
        return 4294950194;
      }
      uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v11) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = 0;
      }
      CFTypeRef v13 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t *, unint64_t *))(v12 + 8);
      if (!v13) {
        return 4294954514;
      }
      uint64_t result = v13(a1, v6, v4, v5, &v18);
      if (result) {
        return result;
      }
      BOOL v14 = v6 >= v18;
      v6 -= v18;
      if (!v14) {
        return 4294950304;
      }
      uint64_t v5 = (uint64_t *)((char *)v5 + v18);
      v4 += v18;
    }
    while (v6);
    if ((unsigned __int16)v20 == 55551) {
      int v15 = 1;
    }
    else {
      int v15 = -1;
    }
    if (HIDWORD(v20) == 1887007846)
    {
      int v16 = 0;
    }
    else
    {
      int v16 = 2;
      if ((unsigned __int16)v20 != 2815)
      {
        uint64_t v17 = v20 ^ 0x204C584A0C000000 | v21 ^ 0xA870A0DLL;
        int v16 = v17 ? v15 : 2;
        if (v17 && (unsigned __int16)v20 != 55551) {
          return 4294950194;
        }
      }
    }
    uint64_t result = 0;
    if (a2) {
      *a2 = v16;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t _openContainer(uint64_t a1, uint64_t a2, const void *a3, const void *a4)
{
  uint64_t v7 = (void *)(a1 + 40);
  uint64_t v8 = CFGetAllocator((CFTypeRef)a1);
  if (v8) {
    uint64_t v8 = CFRetain(v8);
  }
  *uint64_t v7 = v8;
  if (a3) {
    CFTypeRef v9 = CFRetain(a3);
  }
  else {
    CFTypeRef v9 = 0;
  }
  *(void *)(a1 + 64) = v9;
  if (a4) {
    CFTypeRef v10 = CFRetain(a4);
  }
  else {
    CFTypeRef v10 = 0;
  }
  *(void *)(a1 + 56) = v10;
  *(_DWORD *)(a1 + 48) = CMPhotoGetStorageType(a4);
  uint64_t v11 = FigSimpleMutexCreate();
  *(void *)(a1 + 72) = v11;
  if (!v11) {
    return 4294950305;
  }
  uint64_t result = _parseICCProfileIfNeeded((uint64_t)v7);
  if (!result)
  {
    uint64_t result = _parseImageSizeAndTypeIfNeeded((uint64_t)v7);
    if (!result)
    {
      uint64_t result = _parseMPOIfNeeded((uint64_t)v7);
      if (!result)
      {
        uint64_t result = CMPhotoUnifiedJPEGDecoderCreate(*(const void **)(a1 + 16), *(CFAllocatorRef *)(a1 + 40), *(void *)(a1 + 112), *(void *)(a1 + 120), a3, 0, 0, a4, *(_DWORD *)(a1 + 48), (uint64_t *)(a1 + 96));
        if (!result)
        {
          ByteStreamunint64_t Length = CMPhotoUtilitiesGetByteStreamLength();
          uint64_t result = 0;
          *(void *)(a1 + 488) = ByteStreamLength;
        }
      }
    }
  }
  return result;
}

uint64_t _openContainer_0(uint64_t a1, uint64_t a2, const void *a3, const void *a4)
{
  BOOL v36 = 0;
  uint64_t v7 = CMPhotoDecompressionSupportedForContainerAndCodec(2, 1786276896, 0, &v36);
  if (v7) {
    return v7;
  }
  if (!v36) {
    return FigSignalErrorAt();
  }
  uint64_t v8 = CFGetAllocator((CFTypeRef)a1);
  if (v8) {
    uint64_t v8 = CFRetain(v8);
  }
  *(void *)(a1 + 40) = v8;
  if (a3) {
    CFTypeRef v9 = CFRetain(a3);
  }
  else {
    CFTypeRef v9 = 0;
  }
  *(void *)(a1 + 64) = v9;
  if (a4) {
    CFTypeRef v10 = CFRetain(a4);
  }
  else {
    CFTypeRef v10 = 0;
  }
  *(void *)(a1 + 56) = v10;
  *(_DWORD *)(a1 + 48) = CMPhotoGetStorageType(a4);
  uint64_t v7 = CMPhotoDataCreateFromSource(*(const __CFAllocator **)(a1 + 40), (const __CFData *)a4, 0, 0, (void *)(a1 + 72), 0);
  if (v7) {
    return v7;
  }
  CFTypeRef v45 = 0;
  uint64_t v46 = 0;
  CFTypeRef v43 = 0;
  CFTypeRef v44 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v42 = 0;
  CFTypeRef value = 0;
  if (*(unsigned char *)(a1 + 80))
  {
    CFTypeRef v26 = 0;
    CFDataRef v12 = 0;
    uint64_t v27 = 0;
    goto LABEL_78;
  }
  int v11 = _createPreparedJXLDecoder(a1, 16704, 0, 0, &v46, 0);
  CFDataRef v12 = 0;
  char v13 = 0;
  __int16 v14 = 0;
  int v15 = 0;
  while (v11 > 63)
  {
    if (v11 != 0x4000)
    {
      if (v11 == 256)
      {
        if ((v14 & 0x100) != 0) {
          goto LABEL_63;
        }
        uint64_t v18 = _configureJXLColor(*(const __CFAllocator **)(a1 + 40), v46, *(unsigned __int8 *)(a1 + 120), (unint64_t)&cf, (CFStringRef *)&value, (__CFData **)&v45);
        if (v18) {
          goto LABEL_99;
        }
      }
      else
      {
        if (v11 != 64) {
          goto LABEL_64;
        }
        if ((v14 & 0x40) != 0 || JxlDecoderGetBasicInfo())
        {
LABEL_63:
          CFTypeRef v26 = 0;
          uint64_t v27 = 4294950194;
          goto LABEL_78;
        }
      }
      goto LABEL_62;
    }
    int v17 = 1;
    if (v12) {
      goto LABEL_32;
    }
LABEL_33:
    if (v15)
    {
      if (CFDataGetLength(v12) <= 4) {
        goto LABEL_98;
      }
      *(_DWORD *)CVBufferRef buffer = 0;
      v47.location = 0;
      v47.length = 4;
      CFDataGetBytes(v12, v47, buffer);
      *(_DWORD *)CVBufferRef buffer = bswap32(*(unsigned int *)buffer);
      CFIndex v21 = (*(_DWORD *)buffer + 4);
      if (CFDataGetLength(v12) <= v21) {
        goto LABEL_98;
      }
      v48.length = (*(_DWORD *)buffer + 4);
      v48.location = 0;
      CFDataDeleteBytes(v12, v48);
      uint64_t v22 = &v43;
      goto LABEL_39;
    }
    BOOL v23 = v13 == 0;
    char v13 = 0;
    if (!v23)
    {
      uint64_t v22 = &v42;
LABEL_39:
      CFMutableArrayRef Mutable = (__CFArray *)*v22;
      if (!*v22)
      {
        CFMutableArrayRef Mutable = CFArrayCreateMutable(*(CFAllocatorRef *)(a1 + 40), 0, MEMORY[0x1E4F1D510]);
        *uint64_t v22 = Mutable;
        if (!Mutable)
        {
          CFTypeRef v26 = 0;
          uint64_t v27 = 4294950305;
          goto LABEL_78;
        }
      }
      CFArrayAppendValue(Mutable, v12);
      if (v12)
      {
        CFRelease(v12);
        CFDataRef v12 = 0;
      }
    }
    if (v11 != 0x4000) {
      goto LABEL_61;
    }
    char v39 = 0;
    int v38 = 0;
    if (JxlDecoderGetBoxType()) {
      goto LABEL_63;
    }
    *(void *)CVBufferRef buffer = 0;
    if (JxlDecoderGetBoxSizeRaw()) {
      goto LABEL_94;
    }
    if (v38 == 1718188101)
    {
      int v15 = 1;
    }
    else
    {
      if (v38 == 543976824) {
        char v13 = 1;
      }
      if (!v13)
      {
        char v13 = 0;
LABEL_61:
        int v15 = 0;
        if (!v17) {
          goto LABEL_65;
        }
        goto LABEL_62;
      }
      int v15 = 0;
    }
    if (!*(void *)buffer) {
      *(void *)CVBufferRef buffer = 4096;
    }
    uint64_t v25 = CFDataCreateMutable(*(CFAllocatorRef *)(a1 + 40), 0);
    CFDataRef v12 = v25;
    if (!v25)
    {
      uint64_t v27 = 4294950305;
      goto LABEL_100;
    }
    if ((*(void *)buffer & 0x8000000000000000) != 0)
    {
      uint64_t v27 = 4294950190;
      goto LABEL_100;
    }
    if (*(void *)buffer >> 27) {
      goto LABEL_98;
    }
    CFDataSetLength(v25, *(CFIndex *)buffer);
    CFDataGetMutableBytePtr(v12);
    CFDataGetLength(v12);
    if (JxlDecoderSetBoxBuffer())
    {
LABEL_94:
      uint64_t v27 = 4294950194;
      goto LABEL_100;
    }
    if (!v17) {
      goto LABEL_65;
    }
LABEL_62:
    v14 |= v11;
    int v11 = JxlDecoderProcessInput();
  }
  if (!v11)
  {
    int v17 = 0;
    if (!v12) {
      goto LABEL_33;
    }
LABEL_32:
    uint64_t v19 = JxlDecoderReleaseBoxBuffer();
    CFIndex Length = CFDataGetLength(v12);
    CFDataSetLength(v12, Length - v19);
    goto LABEL_33;
  }
  if (v11 == 7)
  {
    if (!v12)
    {
      CFTypeRef v26 = 0;
      uint64_t v27 = 4294950304;
      goto LABEL_78;
    }
    JxlDecoderReleaseBoxBuffer();
    CFIndex v16 = CFDataGetLength(v12);
    CFDataIncreaseLength(v12, v16);
    CFDataGetMutableBytePtr(v12);
    if (JxlDecoderSetBoxBuffer()) {
      goto LABEL_63;
    }
    goto LABEL_62;
  }
LABEL_64:
  if ((v11 & 0xFFFFFFFD) != 0)
  {
LABEL_98:
    uint64_t v18 = FigSignalErrorAt();
LABEL_99:
    uint64_t v27 = v18;
LABEL_100:
    CFTypeRef v26 = 0;
    goto LABEL_78;
  }
LABEL_65:
  CFTypeRef v26 = 0;
  if (cf && value)
  {
    uint64_t v28 = CFDictionaryCreateMutable(*(CFAllocatorRef *)(a1 + 40), 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFTypeRef v26 = v28;
    if (v28)
    {
      CFDictionarySetValue(v28, (const void *)*MEMORY[0x1E4F24BC8], value);
      CFDictionarySetValue(v26, (const void *)*MEMORY[0x1E4F24A90], cf);
      CMPhotoCreateColorSpaceFromPixelBufferAttachments(v26, *(_DWORD *)(a1 + 136) == 1, (CGColorSpace **)&v44, 1, 0);
      goto LABEL_69;
    }
LABEL_105:
    uint64_t v27 = 4294950305;
  }
  else
  {
LABEL_69:
    CFTypeRef v29 = v44;
    CFTypeRef v30 = v45;
    if (v45 && !v44)
    {
      CFTypeRef v29 = (CFTypeRef)MEMORY[0x1AD10E420](v45);
      CFTypeRef v44 = v29;
      if (!v29) {
        goto LABEL_105;
      }
      CFTypeRef v30 = v45;
    }
    *(unsigned char *)(a1 + 80) = 1;
    CFTypeRef v44 = 0;
    CFTypeRef v45 = 0;
    *(void *)(a1 + 288) = v29;
    *(void *)(a1 + 296) = v30;
    CFTypeRef v32 = v42;
    CFTypeRef v31 = v43;
    CFTypeRef v42 = 0;
    CFTypeRef v43 = 0;
    *(void *)(a1 + 320) = v31;
    *(void *)(a1 + 328) = v32;
    CFTypeRef v33 = cf;
    if (cf) {
      CFTypeRef v33 = CFRetain(cf);
    }
    *(void *)(a1 + 304) = v33;
    CFTypeRef v34 = value;
    if (value) {
      CFTypeRef v34 = (void *)CFRetain(value);
    }
    uint64_t v27 = 0;
    *(void *)(a1 + 312) = v34;
  }
LABEL_78:
  JxlDecoderDestroy();
  if (v45) {
    CFRelease(v45);
  }
  if (v44) {
    CFRelease(v44);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (v43) {
    CFRelease(v43);
  }
  if (v42) {
    CFRelease(v42);
  }
  if (v26) {
    CFRelease(v26);
  }
  if (!v27) {
    *(void *)(a1 + 488) = CMPhotoUtilitiesGetByteStreamLength();
  }
  return v27;
}

uint64_t _openContainer_1(uint64_t a1)
{
  CFAllocatorRef v2 = CFGetAllocator((CFTypeRef)a1);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v2, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return 4294950305;
  }
  CFMutableDictionaryRef v4 = Mutable;
  if (*(unsigned char *)(a1 + 28)) {
    BOOL v5 = MEMORY[0x1E4F31AC0] == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    FigPictureCollectionCreateFromByteStream();
LABEL_10:
    if (CMPhotoHEIFUtilitiesByteStreamHasMoovAtom())
    {
      FigCFDictionarySetValue();
      FigFormatReaderCreateForStreamReturningMatchingContainerLabel();
    }
    if (*(void *)(a1 + 48) || *(void *)(a1 + 56))
    {
      *(void *)(a1 + 488) = CMPhotoUtilitiesGetByteStreamLength();
      dispatch_queue_t v8 = dispatch_queue_create("com.apple.cmphoto.auxmeta.synchronizer", 0);
      *(void *)(a1 + 64) = v8;
      if (v8) {
        uint64_t v9 = 0;
      }
      else {
        uint64_t v9 = 4294950305;
      }
    }
    else
    {
      uint64_t v9 = 4294950194;
    }
    goto LABEL_17;
  }
  unint64_t v6 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v6)
  {
    uint64_t v7 = v6;
    CFDictionarySetValue(v6, (const void *)*MEMORY[0x1E4F33248], (const void *)*MEMORY[0x1E4F1CFD0]);
    FigPictureCollectionCreateFromByteStreamWithOptions();
    CFRelease(v7);
    goto LABEL_10;
  }
  uint64_t v9 = 4294950305;
LABEL_17:
  CFRelease(v4);
  return v9;
}

uint64_t _openContainer_2(uint64_t a1, const __CFDictionary *a2)
{
  CFAllocatorRef v4 = CFGetAllocator((CFTypeRef)a1);
  if (!a2) {
    return 4294950306;
  }
  CFAllocatorRef v5 = v4;
  if (!*(void *)(a1 + 40))
  {
    if (v4) {
      CFTypeRef v6 = CFRetain(v4);
    }
    else {
      CFTypeRef v6 = 0;
    }
    *(void *)(a1 + 40) = v6;
  }
  *(unsigned char *)(a1 + 112) = 1;
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a2, @"SequenceInfo");
  if (!Value) {
    return 4294950306;
  }
  CFDictionaryRef v8 = Value;
  CFTypeID v9 = CFGetTypeID(Value);
  if (v9 != CFDictionaryGetTypeID()) {
    return 4294950306;
  }
  CFTypeRef v10 = CFDictionaryGetValue(v8, @"FormatReader");
  if (!v10) {
    return 4294950306;
  }
  int v11 = v10;
  CFTypeID v12 = CFGetTypeID(v10);
  if (v12 != FigFormatReaderGetTypeID() || !FigCFDictionaryGetInt32IfPresent()) {
    return 4294950306;
  }
  uint64_t result = _createSequenceReader((uint64_t)v11, 0, 1885954932, *(unsigned __int8 *)(a1 + 28), (void *)(a1 + 80));
  if (result) {
    return result;
  }
  CFArrayRef v14 = (const __CFArray *)CFDictionaryGetValue(v8, @"thmb");
  if (!v14) {
    return 4294950306;
  }
  CFArrayRef v15 = v14;
  CFTypeID v16 = CFGetTypeID(v14);
  if (v16 != CFArrayGetTypeID()) {
    return 4294950306;
  }
  int v17 = (CFArrayRef *)(a1 + 88);
  uint64_t result = _copyReferenceSequenceReaders(v5, (uint64_t)v11, v15, 1885954932, *(unsigned __int8 *)(a1 + 28), (__CFArray **)(a1 + 88));
  if (result) {
    return result;
  }
  CFArrayRef v18 = (const __CFArray *)CFDictionaryGetValue(v8, @"auxl");
  if (!v18) {
    return 4294950306;
  }
  CFArrayRef v19 = v18;
  CFTypeID v20 = CFGetTypeID(v18);
  if (v20 != CFArrayGetTypeID()) {
    return 4294950306;
  }
  CFIndex v21 = (CFArrayRef *)(a1 + 96);
  uint64_t result = _copyReferenceSequenceReaders(v5, (uint64_t)v11, v19, 1635088502, *(unsigned __int8 *)(a1 + 28), (__CFArray **)(a1 + 96));
  if (!result)
  {
    uint64_t v33 = 0;
    uint64_t result = (uint64_t)_getImageCountForSequence(*(void *)(a1 + 80), &v33);
    if (!result)
    {
      if (*v17 && (CFIndex v22 = CFArrayGetCount(*v17), v22 >= 1))
      {
        CFIndex v23 = v22;
        CFIndex v24 = 0;
        LOBYTE(v25) = 1;
        while (1)
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*v17, v24);
          uint64_t v32 = 0;
          uint64_t result = (uint64_t)_getImageCountForSequence((uint64_t)ValueAtIndex, &v32);
          if (result) {
            break;
          }
          int v25 = (v33 == v32) & v25;
          if (v23 == ++v24) {
            goto LABEL_27;
          }
        }
      }
      else
      {
        int v25 = 1;
LABEL_27:
        if (*v21 && (CFIndex Count = CFArrayGetCount(*v21), Count >= 1))
        {
          CFIndex v28 = Count;
          CFIndex v29 = 0;
          while (1)
          {
            CFTypeRef v30 = CFArrayGetValueAtIndex(*v21, v29);
            uint64_t v32 = 0;
            uint64_t result = (uint64_t)_getImageCountForSequence((uint64_t)v30, &v32);
            if (result) {
              break;
            }
            int v25 = (v33 == v32) & v25;
            if (v28 == ++v29) {
              goto LABEL_32;
            }
          }
        }
        else
        {
LABEL_32:
          *(unsigned char *)(a1 + 112) = v25;
          if (v25)
          {
            *(void *)(a1 + 72) = CFRetain(v8);
            CFTypeRef v31 = CFRetain(v11);
            uint64_t result = 0;
            *(void *)(a1 + 64) = v31;
            *(void *)(a1 + 104) = 0;
          }
          else
          {
            return FigSignalErrorAt();
          }
        }
      }
    }
  }
  return result;
}

uint64_t _openContainer_3(uint64_t a1, const __CFDictionary *a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t result = _parseContainer(a1, a2, a3, a4);
  if (!result)
  {
    _handleStripping(a1, a2);
    uint64_t result = _handleRewrite(a1, a3);
    if (a5)
    {
      if (!result)
      {
        CFMutableDictionaryRef v10 = 0;
        uint64_t result = _createDescriptionFromSession(a1, &v10);
        if (!result) {
          *a5 = v10;
        }
      }
    }
  }
  return result;
}

uint64_t _openContainer_4(const void *a1, const __CFDictionary *a2, uint64_t a3, uint64_t a4, __CFDictionary **a5)
{
  CFTypeRef cf = 0;
  uint64_t v8 = _newContainer_0((uint64_t)a1, a2);
  if (v8) {
    return v8;
  }
  uint64_t ContainerAndCopyDescription = _readContainerAndCopyDescription((uint64_t)a1, a3, (__CFDictionary **)&cf);
  CFTypeRef v10 = cf;
  if (ContainerAndCopyDescription)
  {
    uint64_t inited = ContainerAndCopyDescription;
    if (!cf) {
      return inited;
    }
    goto LABEL_4;
  }
  uint64_t inited = _initContainerFromDescription(a1, (const __CFDictionary *)cf, a5);
  CFTypeRef v10 = cf;
  if (cf) {
LABEL_4:
  }
    CFRelease(v10);
  return inited;
}

uint64_t _parseMPOIfNeeded(uint64_t a1)
{
  size_t v41 = 1;
  CFTypeRef v42 = 0;
  uint64_t v2 = _parseImageSizeAndTypeIfNeeded(a1);
  if (v2) {
    return v2;
  }
  uint64_t v2 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 32));
  if (v2) {
    return v2;
  }
  if (*(unsigned char *)(a1 + 112)
    || (*(_WORD *)(a1 + 112) = 1,
        *(_OWORD *)(a1 + 216) = xmmword_1AB9DCA70,
        CMPhotoCopyImageCountAndRangesFromJFIFByteStream(*(void *)(a1 + 24), 0, 0, &v41, &v42, 0)))
  {
    uint64_t v3 = 0;
    size_t v4 = 0;
    goto LABEL_5;
  }
  size_t v40 = v41;
  size_t v4 = v41 - 1;
  if (v41 == 1)
  {
    uint64_t v3 = 0;
    goto LABEL_5;
  }
  CFAllocatorRef v5 = malloc_type_calloc(v41 - 1, 0x60uLL, 0x10600403F7110D9uLL);
  if (!v5)
  {
    uint64_t v3 = 4294950305;
    goto LABEL_6;
  }
  uint64_t v8 = 0;
  uint64_t v38 = *MEMORY[0x1E4F1DC00];
  uint64_t v37 = *MEMORY[0x1E4F1DC98];
  CFStringRef name = (const __CFString *)*MEMORY[0x1E4F1DC50];
  uint64_t v9 = 1;
  while (v40 != v9)
  {
    long long v10 = *((_OWORD *)v42 + v9);
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    int64_t v51 = 0;
    uint64_t v47 = 0;
    CFRange v48 = &v47;
    uint64_t v49 = 0x2000000000;
    char v50 = 0;
    unsigned __int8 v46 = 0;
    int v45 = 0;
    long long v55 = v10;
    if (CMPhotoGetImageInformationFromJFIFByteStream(*(void *)(a1 + 24), v10, &v52, &v45, 0, &v46, (_DWORD *)&v56 + 1, &v51))goto LABEL_85; {
    LOBYTE(v56) = v46 == 195;
    }
    if (v51)
    {
      int FlexRangeMetadataDictionaryFromBinaryMetadata = CMPhotoCreateFlexRangeMetadataDictionaryFromBinaryMetadata(v51, 0, (__CFDictionary **)&v57 + 1);
      if (FlexRangeMetadataDictionaryFromBinaryMetadata) {
        goto LABEL_86;
      }
    }
    int v12 = CMPhotoJFIFUtilitiesCreateAuxiliaryPropertiesFromStream(*(const __CFAllocator **)a1, *(void *)(a1 + 24), v55, (int *)&v53, (CGImageMetadata **)&v53 + 1, &v54, (const __CFDictionary **)&v54 + 1);
    if (v12 && *((void *)&v57 + 1))
    {
      LODWORD(v53) = 4;
    }
    else if (v12 && !*((void *)&v57 + 1))
    {
LABEL_85:
      int FlexRangeMetadataDictionaryFromBinaryMetadata = FigSignalErrorAt();
LABEL_86:
      int v31 = FlexRangeMetadataDictionaryFromBinaryMetadata;
      CGColorSpaceRef v15 = 0;
      goto LABEL_74;
    }
    if (!FigCFDictionaryGetInt32IfPresent()
      && CMPhotoGetYUVPixelFormatForParameters(v45, SDWORD1(v56), 1, 0, 0, 0, 1, (int *)&v53 + 1))
    {
      goto LABEL_85;
    }
    int FlexRangeMetadataDictionaryFromBinaryMetadata = CMPhotoCopyICCProfileFromJFIFByteStream(*(void *)a1, *(void *)(a1 + 24), v55, 0, 0, (void *)&v56 + 1);
    if (FlexRangeMetadataDictionaryFromBinaryMetadata) {
      goto LABEL_86;
    }
    if (!*(unsigned char *)(a1 + 113))
    {
      if (*((void *)&v57 + 1)) {
        goto LABEL_30;
      }
      if (v53 == 4)
      {
        if (FigCFEqual())
        {
LABEL_30:
          *((unsigned char *)v48 + 24) = 1;
          goto LABEL_36;
        }
        if (FigCFEqual() && *((void *)&v53 + 1))
        {
          block[0] = MEMORY[0x1E4F143A8];
          block[1] = *(void *)"";
          block[2] = ___parseAuxImage_block_invoke;
          block[3] = &unk_1E5E2E548;
          block[4] = &v47;
          CGImageMetadataEnumerateTagsUsingBlock(*((CGImageMetadataRef *)&v53 + 1), 0, 0, block);
        }
      }
    }
LABEL_36:
    if (v53 == 4) {
      BOOL v13 = (void)v54 != 0;
    }
    else {
      BOOL v13 = v53 != 0;
    }
    int v14 = *((unsigned __int8 *)v48 + 24);
    if (*((unsigned char *)v48 + 24) && !*((void *)&v56 + 1))
    {
      if (!*(unsigned char *)(a1 + 417) || (CGColorSpaceRef v15 = (CGColorSpaceRef)MEMORY[0x1AD10E420](*(void *)(a1 + 424))) == 0)
      {
        CFStringRef v16 = (const __CFString *)(*(_DWORD *)(a1 + 88) == 6 ? v38 : v37);
        CGColorSpaceRef v15 = CGColorSpaceCreateWithName(v16);
        if (!v15)
        {
LABEL_87:
          int v31 = -16991;
          goto LABEL_89;
        }
      }
      char v43 = 1;
      CMPhotoCFDictionaryGetBooleanIfPresent(*((CFDictionaryRef *)&v57 + 1), @"TonemapBaseColorIsWorkingColor", &v43);
      if (!v43)
      {
        CFArrayRef MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
        if (!MutableCopy) {
          goto LABEL_87;
        }
        CFArrayRef v18 = MutableCopy;
        CMPhotoCFDictionarySetBoolean(MutableCopy, @"TonemapBaseColorIsWorkingColor", 1);
        if (*((void *)&v57 + 1)) {
          CFRelease(*((CFTypeRef *)&v57 + 1));
        }
        *((void *)&v57 + 1) = v18;
      }
      int v58 = 0;
      if (!CGColorSpaceGetCICPInfo() || (BYTE1(v58) = 16, (uint64_t v19 = CGColorSpaceCreateFromCICP()) == 0))
      {
        uint64_t v19 = (uint64_t)CGColorSpaceCreateWithName(name);
        if (!v19)
        {
          int v31 = FigSignalErrorAt();
LABEL_89:
          if (v13)
          {
LABEL_75:
            uint64_t v36 = 0;
            goto LABEL_76;
          }
LABEL_74:
          _releaseAuxImageStorage(&v52);
          goto LABEL_75;
        }
      }
      CFRelease(v15);
      *(void *)&long long v57 = v19;
      int v14 = *((unsigned __int8 *)v48 + 24);
    }
    if (v14)
    {
      uint64_t v20 = v9 - 1;
      long long v21 = v57;
      *(_OWORD *)(a1 + 184) = v56;
      *(_OWORD *)(a1 + 200) = v21;
      long long v22 = v55;
      *(_OWORD *)(a1 + 152) = v54;
      *(_OWORD *)(a1 + 168) = v22;
      long long v23 = v53;
      *(_OWORD *)(a1 + 120) = v52;
      *(_OWORD *)(a1 + 136) = v23;
      *(unsigned char *)(a1 + 113) = 1;
      if (!v13) {
        uint64_t v20 = -1;
      }
      *(void *)(a1 + 216) = v20;
      CFIndex v24 = *(const void **)(a1 + 144);
      if (v24) {
        CFRetain(v24);
      }
      int v25 = *(const void **)(a1 + 160);
      if (v25) {
        CFRetain(v25);
      }
      CFTypeRef v26 = *(const void **)(a1 + 152);
      if (v26) {
        CFRetain(v26);
      }
      uint64_t v27 = *(const void **)(a1 + 192);
      if (v27) {
        CFRetain(v27);
      }
      CFIndex v28 = *(const void **)(a1 + 200);
      if (v28) {
        CFRetain(v28);
      }
      CFIndex v29 = *(const void **)(a1 + 208);
      if (v29) {
        CFRetain(v29);
      }
    }
    CFTypeRef v30 = &v5[12 * v8];
    CGColorSpaceRef v15 = 0;
    int v31 = 0;
    if (!v13)
    {
      v30[4] = 0u;
      v30[5] = 0u;
      v30[2] = 0u;
      v30[3] = 0u;
      *CFTypeRef v30 = 0u;
      v30[1] = 0u;
      goto LABEL_74;
    }
    long long v32 = v53;
    *CFTypeRef v30 = v52;
    v30[1] = v32;
    long long v33 = v54;
    long long v34 = v55;
    long long v35 = v57;
    v30[4] = v56;
    v30[5] = v35;
    v30[2] = v33;
    v30[3] = v34;
    uint64_t v36 = 1;
LABEL_76:
    if (v51) {
      CFRelease(v51);
    }
    if (v15) {
      CFRelease(v15);
    }
    _Block_object_dispose(&v47, 8);
    if (v31) {
      uint64_t v3 = FigSignalErrorAt();
    }
    else {
      uint64_t v3 = 0;
    }
    v8 += v36;
    ++v9;
    if (v3) {
      goto LABEL_6;
    }
  }
  uint64_t v3 = 0;
  if (v8)
  {
    *(void *)(a1 + 224) = v8;
    *(void *)(a1 + 232) = v5;
LABEL_5:
    CFAllocatorRef v5 = 0;
  }
LABEL_6:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 32));
  free(v42);
  if (v5)
  {
    if (v4)
    {
      CFTypeRef v6 = v5;
      do
      {
        _releaseAuxImageStorage(v6);
        v6 += 12;
        --v4;
      }
      while (v4);
    }
    free(v5);
  }
  return v3;
}

uint64_t CMPhotoUtilitiesGetByteStreamLength()
{
  CFTypeRef cf = 0;
  uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
  uint64_t v1 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v1) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t, void, void, CFTypeRef *))(v2 + 48);
  if (!v3) {
    return 0;
  }
  int v4 = v3(CMBaseObject, *MEMORY[0x1E4F1EC48], *MEMORY[0x1E4F1CF80], &cf);
  CFTypeRef v5 = cf;
  if (v4 || (v6 = CFGetTypeID(cf), TypeID = CFNumberGetTypeID(), CFTypeRef v5 = cf, v6 != TypeID))
  {
    uint64_t Int32 = 0;
    if (!v5) {
      return Int32;
    }
    goto LABEL_8;
  }
  uint64_t Int32 = (int)CMPhotoCFNumberGetInt32((const __CFNumber *)cf);
  CFTypeRef v5 = cf;
  if (cf) {
LABEL_8:
  }
    CFRelease(v5);
  return Int32;
}

CFNumberRef CMPhotoCFNumberGetInt32(const __CFNumber *result)
{
  if (result)
  {
    unsigned int valuePtr = 0;
    if (CFNumberGetValue(result, kCFNumberSInt32Type, &valuePtr)) {
      return (const __CFNumber *)valuePtr;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t CMPhotoUnifiedJPEGDecoderCreate(const void *a1, CFAllocatorRef allocator, uint64_t a3, uint64_t a4, const void *a5, uint64_t a6, uint64_t a7, const void *a8, int a9, uint64_t *a10)
{
  if (!a10) {
    return 4294950306;
  }
  CFArrayRef v18 = CFAllocatorAllocate(allocator, 248, 0);
  if (!v18) {
    return 4294950305;
  }
  uint64_t v19 = (uint64_t)v18;
  v18[30] = 0;
  *((_OWORD *)v18 + 13) = 0u;
  *((_OWORD *)v18 + 14) = 0u;
  *((_OWORD *)v18 + 11) = 0u;
  *((_OWORD *)v18 + 12) = 0u;
  *((_OWORD *)v18 + 9) = 0u;
  *((_OWORD *)v18 + 10) = 0u;
  *((_OWORD *)v18 + 7) = 0u;
  *((_OWORD *)v18 + 8) = 0u;
  *((_OWORD *)v18 + 5) = 0u;
  *((_OWORD *)v18 + 6) = 0u;
  *((_OWORD *)v18 + 3) = 0u;
  *((_OWORD *)v18 + 4) = 0u;
  *((_OWORD *)v18 + 1) = 0u;
  *((_OWORD *)v18 + 2) = 0u;
  *(_OWORD *)CFArrayRef v18 = 0u;
  if (allocator) {
    CFTypeRef v20 = CFRetain(allocator);
  }
  else {
    CFTypeRef v20 = 0;
  }
  *(void *)(v19 + 8) = v20;
  if (a1) {
    CFTypeRef v21 = CFRetain(a1);
  }
  else {
    CFTypeRef v21 = 0;
  }
  *(void *)uint64_t v19 = v21;
  if (a5) {
    CFTypeRef v22 = CFRetain(a5);
  }
  else {
    CFTypeRef v22 = 0;
  }
  *(void *)(v19 + 16) = v22;
  if (a6 | a7) {
    goto LABEL_19;
  }
  uint64_t v30 = 0;
  uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v23) {
    uint64_t v24 = v23;
  }
  else {
    uint64_t v24 = 0;
  }
  int v25 = *(uint64_t (**)(const void *, void, uint64_t *))(v24 + 24);
  if (!v25)
  {
    uint64_t v28 = 4294954514;
LABEL_22:
    CMPhotoUnifiedJPEGDecoderDestroy(v19);
    return v28;
  }
  uint64_t v26 = v25(a5, 0, &v30);
  if (v26)
  {
    uint64_t v28 = v26;
    goto LABEL_22;
  }
  a7 = v30;
  if (v30 < 0)
  {
    uint64_t v28 = 4294950190;
    goto LABEL_22;
  }
LABEL_19:
  *(void *)(v19 + 24) = a6;
  *(void *)(v19 + 32) = a7;
  if (a8) {
    CFTypeRef v27 = CFRetain(a8);
  }
  else {
    CFTypeRef v27 = 0;
  }
  uint64_t v28 = 0;
  *(void *)(v19 + 40) = v27;
  *(_DWORD *)(v19 + 48) = a9;
  *(void *)(v19 + 56) = a3;
  *(void *)(v19 + 64) = a4;
  *a10 = v19;
  return v28;
}

uint64_t CMPhotoGetCPUCount()
{
  return sCPUCount;
}

uint64_t CMPhotoCopyImageCountAndRangesFromJFIFByteStream(uint64_t a1, uint64_t a2, int a3, size_t *a4, void *a5, unsigned char *a6)
{
  uint64_t v126 = *MEMORY[0x1E4F143B8];
  unint64_t v118 = 4;
  BOOL v119 = "MPF";
  uint64_t v114 = 0;
  char v115 = &v114;
  uint64_t v116 = 0x2000000000;
  char v117 = 0;
  uint64_t v110 = 0;
  long long v111 = &v110;
  uint64_t v112 = 0x2000000000;
  uint64_t v113 = 0;
  uint64_t v106 = 0;
  long long v107 = &v106;
  uint64_t v108 = 0x2000000000;
  uint64_t v109 = 0;
  uint64_t v105 = 0;
  *a4 = 1;
  *a5 = 0;
  char v104 = -30;
  v103[0] = MEMORY[0x1E4F143A8];
  v103[1] = *(void *)"";
  v103[2] = __CMPhotoCopyImageCountAndRangesFromJFIFByteStream_block_invoke;
  v103[3] = &unk_1E5E2F9B8;
  v103[4] = &v114;
  v103[5] = &v110;
  v103[6] = &v106;
  uint64_t MarkersWithSignaturesInJFIFByteStreamWithHandler = CMPhotoFindMarkersWithSignaturesInJFIFByteStreamWithHandler(a1, a2, 1, (uint64_t)&v104, &v119, &v118, (uint64_t)v103);
  if (MarkersWithSignaturesInJFIFByteStreamWithHandler)
  {
    uint64_t v53 = MarkersWithSignaturesInJFIFByteStreamWithHandler;
    char v50 = 0;
    goto LABEL_75;
  }
  if (!*((unsigned char *)v115 + 24)) {
    goto LABEL_179;
  }
  unint64_t v13 = v107[3] - 4;
  if (v13 < 8) {
    goto LABEL_74;
  }
  uint64_t v14 = v111[3];
  *(void *)long long v121 = 0;
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
  long long v99 = a6;
  long long v100 = a4;
  long long v101 = a5;
  int v102 = a3;
  uint64_t v16 = v15 ? v15 : 0;
  int v17 = *(unsigned int (**)(uint64_t, uint64_t))(v16 + 8);
  if (!v17) {
    goto LABEL_74;
  }
  uint64_t v98 = v14 + 4;
  if (v17(a1, 8) || *(void *)v121 != 8) {
    goto LABEL_74;
  }
  int v18 = v122;
  __int16 v19 = v123;
  unsigned int v20 = bswap32(v123) >> 16;
  if (v122 == 19789) {
    __int16 v19 = v20;
  }
  if (v19 != 42) {
    goto LABEL_74;
  }
  unsigned int v21 = bswap32(v124);
  unint64_t v22 = v122 == 19789 ? v21 : v124;
  unint64_t v23 = v13 - v22;
  if (v13 <= v22) {
    goto LABEL_74;
  }
  unint64_t v24 = v23 - 2;
  if (v23 < 2) {
    goto LABEL_74;
  }
  uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v26 = v25 ? v25 : 0;
  CFTypeRef v27 = *(unsigned int (**)(uint64_t, uint64_t, unint64_t, unsigned __int16 *, unsigned __int8 *))(v26 + 8);
  if (!v27 || v27(a1, 2, v98 + v22, &v122, v121) || *(void *)v121 != 2) {
    goto LABEL_74;
  }
  unsigned int v28 = bswap32(v122) >> 16;
  if (v18 != 19789) {
    LOWORD(v28) = v122;
  }
  if (v24 < 12 * (unint64_t)(unsigned __int16)v28) {
    goto LABEL_74;
  }
  if (!(_WORD)v28) {
    goto LABEL_76;
  }
  unint64_t v96 = 0;
  size_t count = 0;
  int v29 = 0;
  unint64_t v95 = 0;
  int v30 = 0;
  uint64_t v31 = (unsigned __int16)v28 - 1;
  uint64_t v32 = v14 + v22 + 6;
  do
  {
    uint64_t v33 = v31;
    uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v34) {
      uint64_t v35 = v34;
    }
    else {
      uint64_t v35 = 0;
    }
    uint64_t v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned __int16 *, unsigned __int8 *))(v35 + 8);
    if (!v36 || v36(a1, 12, v32, &v122, v121) || *(void *)v121 != 12) {
      goto LABEL_74;
    }
    unsigned __int16 v37 = v122;
    unsigned int v38 = bswap32(v122) >> 16;
    if (v18 == 19789) {
      unsigned __int16 v37 = v38;
    }
    if (v37 == 45058)
    {
      __int16 v45 = v123;
      unsigned int v46 = bswap32(v123) >> 16;
      if (v18 == 19789) {
        __int16 v45 = v46;
      }
      if (v45 != 7) {
        goto LABEL_74;
      }
      unsigned int v47 = bswap32(v124);
      if (v18 == 19789) {
        unint64_t v48 = v47;
      }
      else {
        unint64_t v48 = v124;
      }
      unint64_t v96 = v48;
      LODWORD(v48) = bswap32(v125);
      if (v18 == 19789) {
        unint64_t v48 = v48;
      }
      else {
        unint64_t v48 = v125;
      }
      unint64_t v95 = v48;
      int v30 = 1;
    }
    else if (v37 == 45057)
    {
      __int16 v39 = v123;
      unsigned int v40 = bswap32(v123) >> 16;
      if (v18 == 19789) {
        __int16 v39 = v40;
      }
      if (v39 != 4) {
        goto LABEL_74;
      }
      unsigned int v41 = v124;
      unsigned int v42 = bswap32(v124);
      if (v18 == 19789) {
        unsigned int v41 = v42;
      }
      if (v41 != 1) {
        goto LABEL_74;
      }
      unsigned int v43 = bswap32(v125);
      if (v18 == 19789) {
        size_t v44 = v43;
      }
      else {
        size_t v44 = v125;
      }
      size_t count = v44;
      int v29 = 1;
    }
    if (v30) {
      BOOL v49 = v29 == 0;
    }
    else {
      BOOL v49 = 1;
    }
    if (!v49) {
      break;
    }
    uint64_t v31 = v33 - 1;
    v32 += 12;
  }
  while (v33);
  if (!v29 || count < 2 || !v30)
  {
LABEL_76:
    char v50 = 0;
    uint64_t v53 = 4294950303;
    goto LABEL_75;
  }
  if (v96 != 16 * count || v13 <= v95 || v13 - v95 < v96)
  {
LABEL_74:
    char v50 = 0;
    uint64_t v53 = 4294950194;
    goto LABEL_75;
  }
  *(void *)long long v121 = 0;
  char v50 = (char *)malloc_type_calloc(count, 0x10uLL, 0x1000040451B5BE8uLL);
  if (v50)
  {
    unint64_t v120 = 0;
    uint64_t v51 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v52 = v51 ? v51 : 0;
    long long v55 = *(unsigned int (**)(uint64_t, void, unint64_t *))(v52 + 24);
    if (v55)
    {
      if (!v55(a1, 0, &v120))
      {
        uint64_t v56 = 0;
        char v57 = 1;
        while (1)
        {
          while (1)
          {
            uint64_t v58 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v58) {
              uint64_t v59 = v58;
            }
            else {
              uint64_t v59 = 0;
            }
            CFNumberRef v60 = *(unsigned int (**)(uint64_t, uint64_t, unint64_t, unsigned __int16 *, unsigned __int8 *))(v59 + 8);
            if (!v60 || v60(a1, 12, v95 + v98 + 16 * v56, &v122, v121) || *(void *)v121 != 12) {
              goto LABEL_124;
            }
            if (v57)
            {
              uint64_t v61 = v56 ? v98 : a2;
              unsigned int v62 = bswap32(v124);
              uint64_t v63 = v18 == 19789 ? v62 : v124;
              LODWORD(v64) = bswap32(v125);
              uint64_t v64 = v18 == 19789 ? v64 : v125;
              uint64_t v65 = v61 + v64;
              unint64_t v66 = v61 + v64 + v63;
              if (v66 <= v120) {
                break;
              }
            }
LABEL_98:
            char v57 = 0;
            if (++v56 == count)
            {
              int v94 = FigSignalErrorAt();
              free(v50);
              if (!v94)
              {
                char v50 = 0;
                goto LABEL_178;
              }
              goto LABEL_125;
            }
          }
          if (v56)
          {
            if (v63 < 2 || !v64) {
              goto LABEL_98;
            }
          }
          else if (v63 < 2 || v64)
          {
            goto LABEL_98;
          }
          uint64_t v67 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v67) {
            uint64_t v68 = v67;
          }
          else {
            uint64_t v68 = 0;
          }
          BOOL v69 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned __int16 *, unsigned __int8 *))(v68 + 8);
          if (!v69 || v69(a1, 2, v65, &v122, v121) || *(void *)v121 != 2) {
            break;
          }
          if (v122 != 255 || HIBYTE(v122) != 216) {
            goto LABEL_98;
          }
          uint64_t v70 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v70) {
            uint64_t v71 = v70;
          }
          else {
            uint64_t v71 = 0;
          }
          long long v72 = *(unsigned int (**)(uint64_t, uint64_t, unint64_t, unsigned __int16 *, unsigned __int8 *))(v71 + 8);
          if (!v72 || v72(a1, 2, v66 - 2, &v122, v121) || *(void *)v121 != 2) {
            break;
          }
          if (v122 != 255 || HIBYTE(v122) != 217) {
            goto LABEL_98;
          }
          int v73 = &v50[16 * v56];
          *(void *)int v73 = v65;
          *((void *)v73 + 1) = v63;
          ++v56;
          char v57 = 1;
          if (v56 == count) {
            goto LABEL_178;
          }
        }
      }
    }
  }
LABEL_124:
  free(v50);
LABEL_125:
  long long v74 = (char *)malloc_type_calloc(count, 0x10uLL, 0x1000040451B5BE8uLL);
  char v50 = v74;
  if (!v74)
  {
    uint64_t v53 = 4294950305;
    goto LABEL_75;
  }
  unint64_t v75 = 0;
  int v76 = 0;
  *(void *)long long v74 = a2;
  uint64_t v77 = v107[3] + v111[3];
  while (2)
  {
    BOOL v78 = 0;
    unint64_t v120 = 0;
    for (BOOL i = 1; ; BOOL i = 0)
    {
      while (1)
      {
        BOOL v80 = i;
        uint64_t v81 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (!v80) {
          break;
        }
        if (v81) {
          uint64_t v82 = v81;
        }
        else {
          uint64_t v82 = 0;
        }
        int v83 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned __int16 *, unint64_t *))(v82 + 8);
        if (!v83) {
          goto LABEL_171;
        }
        uint64_t v53 = 4294950194;
        if (v83(a1, 4, v77, &v122, &v120) || v120 != 4) {
          goto LABEL_172;
        }
        LOBYTE(v122) = -1;
        if (HIBYTE(v122) == 216) {
          v77 += 2;
        }
        else {
          v77 += (bswap32(v123) >> 16) + 2;
        }
        BOOL i = HIBYTE(v122) != 218;
      }
      if (v81) {
        uint64_t v84 = v81;
      }
      else {
        uint64_t v84 = 0;
      }
      long long v85 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned __int16 *, unint64_t *))(v84 + 8);
      if (!v85 || v85(a1, 512, v77, &v122, &v120))
      {
LABEL_171:
        uint64_t v53 = 4294950194;
        goto LABEL_172;
      }
      if (v77 < 0)
      {
        uint64_t v53 = 4294950190;
LABEL_172:
        if (!v76 || !v102) {
          goto LABEL_75;
        }
        *long long v100 = 1;
        *long long v101 = v50;
        __n128 v93 = v99;
        if (!v99) {
          goto LABEL_179;
        }
        goto LABEL_175;
      }
      if (v120) {
        break;
      }
LABEL_151:
      v77 += v120;
    }
    uint64_t v86 = 0;
    while (1)
    {
      int v87 = *((unsigned __int8 *)&v122 + v86);
      if (v78)
      {
        if (v87 == 216)
        {
          uint64_t v88 = -1;
          goto LABEL_154;
        }
        if (v87 == 217) {
          break;
        }
      }
      BOOL v78 = v87 == 255;
      if (v120 == ++v86) {
        goto LABEL_151;
      }
    }
    uint64_t v88 = 1;
LABEL_154:
    uint64_t v89 = *(void *)&v50[16 * v75];
    if (v89 < 0)
    {
      uint64_t v53 = 4294950190;
LABEL_181:
      int v76 = 1;
      goto LABEL_172;
    }
    v77 += v88 + v86;
    *(void *)&v50[16 * v75 + 8] = v77 - v89;
    if (v75 < count - 1)
    {
      while (1)
      {
        uint64_t v90 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v90) {
          uint64_t v91 = v90;
        }
        else {
          uint64_t v91 = 0;
        }
        long long v92 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(v91 + 8);
        if (!v92)
        {
          uint64_t v53 = 4294950194;
          goto LABEL_181;
        }
        uint64_t v53 = 4294950194;
        int v76 = 1;
        if (v92(a1, 2, v77, v121, &v105) || v105 != 2) {
          goto LABEL_172;
        }
        if (v121[0] != 255 || v121[1] != 255) {
          break;
        }
        ++v77;
      }
      if (v121[0] == 255 && v121[1] == 216)
      {
        ++v75;
        *(void *)&v50[16 * v75] = v77;
        goto LABEL_169;
      }
      goto LABEL_172;
    }
    ++v75;
LABEL_169:
    int v76 = 1;
    if (v75 != count) {
      continue;
    }
    break;
  }
LABEL_178:
  __n128 v93 = v99;
  *long long v100 = count;
  *long long v101 = v50;
  if (v99)
  {
LABEL_175:
    char v50 = 0;
    uint64_t v53 = 0;
    *__n128 v93 = *((unsigned char *)v115 + 24);
  }
  else
  {
LABEL_179:
    char v50 = 0;
    uint64_t v53 = 0;
  }
LABEL_75:
  free(v50);
  _Block_object_dispose(&v106, 8);
  _Block_object_dispose(&v110, 8);
  _Block_object_dispose(&v114, 8);
  return v53;
}

BOOL CMPhotoHEIFUtilitiesByteStreamHasMoovAtom()
{
  return !FigAtomStreamInitWithByteStream()
      && FigAtomStreamPositionAtFirstAtomWithType() == 0;
}

uint64_t CMPhotoCompressionSupportedForContainerAndCodec(int a1, int a2, uint64_t a3, unsigned char *a4)
{
  if (a4)
  {
    if (a3)
    {
      uint64_t result = FigSignalErrorAt();
    }
    else
    {
      if (a1 == 1)
      {
        uint64_t result = 0;
        char v5 = a2 == 1785750887;
        goto LABEL_10;
      }
      if (!a1 && a2 == 1752589105)
      {
        char v5 = CMPhotoSupportsHEVCEncode();
        uint64_t result = 0;
LABEL_10:
        *a4 = v5;
        return result;
      }
      uint64_t result = 0;
    }
    char v5 = 0;
    goto LABEL_10;
  }
  return 4294950306;
}

uint64_t CMPhotoSupportsHEVCEncode()
{
  return 1;
}

uint64_t CMPhotoDecompressionContainerGetImageGeometryForIndexWithOptions(void *a1, const __CFNumber *a2, const __CFDictionary *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v14 = -1;
  uint64_t result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a3, (const __CFNumber **)&v14, 0, 0);
  if (!result)
  {
    if (a4 || a5 || a6)
    {
      uint64_t v12 = a1[4];
      if (v12) {
        uint64_t v13 = a1[4];
      }
      else {
        uint64_t v13 = 0;
      }
      if (*(void *)(v13 + 56)) {
        return (*(uint64_t (**)(void *, uint64_t, const __CFDictionary *, uint64_t, uint64_t, uint64_t))(v12 + 56))(a1, v14, a3, a4, a5, a6);
      }
      else {
        return 4294950302;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t _getItemProperties(uint64_t a1, const void *a2, const void *a3, uint64_t a4, _DWORD *a5, _OWORD *a6, _OWORD *a7, int *a8)
{
  CFTypeRef v14 = a2;
  CFTypeRef v44 = 0;
  CFTypeRef v45 = 0;
  CFTypeRef cf = 0;
  int v42 = 0;
  uint64_t ItemTypeFromReader = CMPhotoPictureReaderGetItemTypeFromReader(a2, &v42);
  if (ItemTypeFromReader) {
    goto LABEL_51;
  }
  int v41 = 1;
  long long v39 = 0u;
  long long v40 = 0u;
  if (v42 == 1953325424)
  {
    char v38 = 0;
    int v37 = 0;
    CFDictionaryRef ValueAtIndex = v14;
    if (a4)
    {
      CFDictionaryRef Value = (const __CFDictionary *)FigCFDictionaryGetValue();
      if (Value)
      {
        CFDictionaryRef v19 = Value;
        CMPhotoCFDictionaryGetIntIfPresent(Value, @"DecodeToHDROutputMode", &v37);
        int BooleanIfPresent = CMPhotoCFDictionaryGetBooleanIfPresent(v19, @"DecodeToHDROutputModeUseBaselayerOrientation", &v38);
        if (v37 == 6 && !BooleanIfPresent)
        {
          char v38 = 1;
LABEL_15:
          uint64_t FigBaseObject = FigPictureReaderGetFigBaseObject();
          uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v24) {
            uint64_t v25 = v24;
          }
          else {
            uint64_t v25 = 0;
          }
          uint64_t v26 = *(uint64_t (**)(uint64_t, void, void, CFTypeRef *))(v25 + 48);
          if (!v26) {
            goto LABEL_42;
          }
          uint64_t ItemTypeFromReader = v26(FigBaseObject, *MEMORY[0x1E4F333A0], *MEMORY[0x1E4F1CF80], &cf);
          if (ItemTypeFromReader) {
            goto LABEL_51;
          }
          CFArrayRef v27 = (const __CFArray *)FigCFDictionaryGetValue();
          if (!v27 || (CFArrayRef v28 = v27, v29 = CFGetTypeID(v27), v29 != CFArrayGetTypeID()) || CFArrayGetCount(v28) != 2)
          {
            uint64_t ItemTypeFromReader = FigSignalErrorAt();
            goto LABEL_51;
          }
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v28, 0);
          goto LABEL_24;
        }
      }
      CFDictionaryRef ValueAtIndex = v14;
      if (v38) {
        goto LABEL_15;
      }
    }
LABEL_24:
    uint64_t ItemTypeFromReader = CMPhotoPictureReaderGetImageGeometryFromPictureReader(v14, *(unsigned __int8 *)(a1 + 28), (unint64_t)&v39, 0);
    if (ItemTypeFromReader) {
      goto LABEL_51;
    }
    uint64_t v21 = a1;
    unint64_t v22 = ValueAtIndex;
    goto LABEL_26;
  }
  if (v42 == 1768187246)
  {
    uint64_t ItemTypeFromReader = CMPhotoPictureReaderCopyBaseReaderAndPropertiesForDerivedPicture(v14, &v45, &v39, &v41);
    if (ItemTypeFromReader) {
      goto LABEL_51;
    }
    uint64_t ItemTypeFromReader = CMPhotoPictureReaderGetItemTypeFromReader(v45, &v42);
    if (ItemTypeFromReader) {
      goto LABEL_51;
    }
    CFTypeRef v14 = v45;
    goto LABEL_27;
  }
  uint64_t ItemTypeFromReader = CMPhotoPictureReaderGetImageGeometryFromPictureReader(v14, *(unsigned __int8 *)(a1 + 28), (unint64_t)&v39, 0);
  if (ItemTypeFromReader) {
    goto LABEL_51;
  }
  uint64_t v21 = a1;
  unint64_t v22 = v14;
LABEL_26:
  uint64_t ItemTypeFromReader = _getImageOrientation(v21, v22, a3, &v41);
  if (ItemTypeFromReader) {
    goto LABEL_51;
  }
LABEL_27:
  *(_OWORD *)uint64_t v36 = v40;
  if (v42 == 1735551332)
  {
    uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v30) {
      uint64_t v31 = v30;
    }
    else {
      uint64_t v31 = 0;
    }
    uint64_t v32 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(v31 + 8);
    if (v32)
    {
      uint64_t ItemTypeFromReader = v32(v14, &v44);
      if (!ItemTypeFromReader)
      {
        uint64_t ItemTypeFromReader = _getTileGeometryFromPictureTileCursorService(v44, 0, v36, 0);
        if (!ItemTypeFromReader) {
          goto LABEL_34;
        }
      }
LABEL_51:
      uint64_t v34 = ItemTypeFromReader;
      goto LABEL_43;
    }
LABEL_42:
    uint64_t v34 = 4294954514;
    goto LABEL_43;
  }
LABEL_34:
  if (a5) {
    *a5 = v42;
  }
  if (a6)
  {
    long long v33 = v40;
    *a6 = v39;
    a6[1] = v33;
  }
  if (a7) {
    *a7 = *(_OWORD *)v36;
  }
  uint64_t v34 = 0;
  if (a8) {
    *a8 = v41;
  }
LABEL_43:
  if (cf) {
    CFRelease(cf);
  }
  if (v45) {
    CFRelease(v45);
  }
  if (v44) {
    CFRelease(v44);
  }
  return v34;
}

uint64_t _copyColorInfoForItem(unsigned char *a1, const void *a2, const void *a3, int a4, CMVideoFormatDescriptionRef *a5, int a6, CFTypeRef *a7, void *a8, CFTypeRef *a9, CFTypeRef *a10, _DWORD *a11, _DWORD *a12, unsigned char *a13)
{
  CFTypeRef v60 = 0;
  CMVideoFormatDescriptionRef v61 = 0;
  CFTypeRef v58 = 0;
  CFTypeRef v59 = 0;
  CFTypeRef v57 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v56 = 0;
  int v53 = -1;
  int v54 = -1;
  CFTypeRef v52 = 0;
  int v51 = 0;
  CFAllocatorRef v48 = CFGetAllocator(a1);
  uint64_t ItemTypeFromReader = CMPhotoPictureReaderGetItemTypeFromReader(a2, &v51);
  if (ItemTypeFromReader) {
    goto LABEL_88;
  }
  uint64_t FigBaseObject = FigPictureReaderGetFigBaseObject();
  uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v23) {
    uint64_t v24 = v23;
  }
  else {
    uint64_t v24 = 0;
  }
  uint64_t v25 = *(uint64_t (**)(uint64_t, void, CFAllocatorRef, CMVideoFormatDescriptionRef *))(v24 + 48);
  if (!v25) {
    goto LABEL_89;
  }
  uint64_t ItemTypeFromReader = v25(FigBaseObject, *MEMORY[0x1E4F333D0], v48, &v61);
  if (ItemTypeFromReader) {
    goto LABEL_88;
  }
  uint64_t v26 = v61;
  v63[0] = 0;
  uint64_t ItemTypeFromReader = _verifyPixelInformationFromPictureReader(a2, (CFIndex *)v63);
  if (ItemTypeFromReader) {
    goto LABEL_88;
  }
  CMVideoFormatDescriptionRef v27 = v63[0];
  if (a3 && !v63[0])
  {
    uint64_t ItemTypeFromReader = _verifyPixelInformationFromPictureReader(a3, (CFIndex *)v63);
    if (ItemTypeFromReader) {
      goto LABEL_88;
    }
    CMVideoFormatDescriptionRef v27 = v63[0];
  }
  if (v27)
  {
    BOOL v28 = v27 == (CMVideoFormatDescriptionRef)1;
  }
  else
  {
    int v29 = a4;
    if (a4) {
      goto LABEL_18;
    }
    if (!v26)
    {
      int v29 = 0;
      goto LABEL_18;
    }
    int v62 = 0;
    if (CMPhotoGetInfoFromFormatDescription(v26, 0, 0, 0, 0, &v62, 0, 0, 0, 0, 0, 0)) {
      BOOL v28 = 0;
    }
    else {
      BOOL v28 = v62 == 6;
    }
  }
  int v29 = v28;
LABEL_18:
  if (v51 == 1635135537)
  {
    v63[0] = 0;
    if (a4) {
      BOOL v30 = a1[28] == 0;
    }
    else {
      BOOL v30 = 1;
    }
    int v31 = !v30;
    v50[0] = MEMORY[0x1E4F143A8];
    v50[1] = *(void *)"";
    v50[2] = ___copyColorInfoForItem_block_invoke;
    v50[3] = &__block_descriptor_tmp_11;
    v50[4] = a2;
    v50[5] = v61;
    uint64_t ItemTypeFromReader = CMPhotoDecompressionContainerCreateCorrectedAV1FormatDescription(v61, (uint64_t)v50, v31, v63);
    if (ItemTypeFromReader) {
      goto LABEL_88;
    }
    if (v61) {
      CFRelease(v61);
    }
    CMVideoFormatDescriptionRef v61 = v63[0];
  }
  if (_checkForInterestingBrands((uint64_t)a1)) {
    int v32 = 0;
  }
  else {
    int v32 = a1[163];
  }
  char v49 = 0;
  uint64_t ItemTypeFromReader = CMPhotoDecompressionContainerCopyColorInfoFromFormatDescription(v61, a1[28], v32, v29, 0, a6, &v52, &v57, &v56, &cf, &v54, &v53, &v49);
  if (ItemTypeFromReader) {
    goto LABEL_88;
  }
  if (v52)
  {
    int v33 = 1;
  }
  else
  {
    if (v57) {
      BOOL v34 = v56 == 0;
    }
    else {
      BOOL v34 = 1;
    }
    int v33 = !v34;
  }
  if (v33 && cf && !v49)
  {
LABEL_54:
    if (a5)
    {
      *a5 = v61;
      CMVideoFormatDescriptionRef v61 = 0;
    }
    if (a7)
    {
      *a7 = v52;
      CFTypeRef v52 = 0;
    }
    if (a8)
    {
      *a8 = v57;
      CFTypeRef v57 = 0;
    }
    if (a9)
    {
      *a9 = v56;
      CFTypeRef v56 = 0;
    }
    if (a10)
    {
      *a10 = cf;
      CFTypeRef cf = 0;
    }
    if (a11) {
      *a11 = v54;
    }
    if (a12) {
      *a12 = v53;
    }
    uint64_t v37 = 0;
    if (a13) {
      *a13 = v49;
    }
    goto LABEL_90;
  }
  if (v51 == 1768187246)
  {
    uint64_t ItemTypeFromReader = CMPhotoPictureReaderCopyBaseReaderAndPropertiesForDerivedPicture(a2, &v60, 0, 0);
    if (!ItemTypeFromReader) {
      goto LABEL_49;
    }
    goto LABEL_88;
  }
  if (v51 != 1735551332) {
    goto LABEL_49;
  }
  uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v35) {
    uint64_t v36 = v35;
  }
  else {
    uint64_t v36 = 0;
  }
  char v38 = *(uint64_t (**)(const void *, CFTypeRef *))(v36 + 8);
  if (!v38)
  {
LABEL_89:
    uint64_t v37 = 4294954514;
    goto LABEL_90;
  }
  uint64_t ItemTypeFromReader = v38(a2, &v59);
  if (ItemTypeFromReader) {
    goto LABEL_88;
  }
  CFTypeRef v39 = v59;
  uint64_t v40 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v40) {
    uint64_t v41 = v40;
  }
  else {
    uint64_t v41 = 0;
  }
  int v42 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(v41 + 8);
  if (!v42) {
    goto LABEL_89;
  }
  uint64_t ItemTypeFromReader = v42(v39, &v58);
  if (ItemTypeFromReader)
  {
LABEL_88:
    uint64_t v37 = ItemTypeFromReader;
    goto LABEL_90;
  }
  uint64_t CMBaseObject = FigPictureTileCursorGetCMBaseObject();
  uint64_t v44 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v44) {
    uint64_t v45 = v44;
  }
  else {
    uint64_t v45 = 0;
  }
  unsigned int v46 = *(uint64_t (**)(uint64_t, void, CFAllocatorRef, CFTypeRef *))(v45 + 48);
  if (!v46) {
    goto LABEL_89;
  }
  uint64_t ItemTypeFromReader = v46(CMBaseObject, *MEMORY[0x1E4F33478], v48, &v60);
  if (ItemTypeFromReader) {
    goto LABEL_88;
  }
LABEL_49:
  if (!v60) {
    goto LABEL_54;
  }
  if (v49 && cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  uint64_t v37 = _copyColorInfoForItem(a1);
  if (!v37) {
    goto LABEL_54;
  }
LABEL_90:
  if (v61) {
    CFRelease(v61);
  }
  if (v57) {
    CFRelease(v57);
  }
  if (v56) {
    CFRelease(v56);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v52) {
    CFRelease(v52);
  }
  if (v60) {
    CFRelease(v60);
  }
  if (v59) {
    CFRelease(v59);
  }
  if (v58) {
    CFRelease(v58);
  }
  return v37;
}

uint64_t _verifyPixelInformationFromPictureReader(const void *a1, CFIndex *a2)
{
  CFArrayRef theArray = 0;
  CFAllocatorRef v3 = CFGetAllocator(a1);
  uint64_t FigBaseObject = FigPictureReaderGetFigBaseObject();
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, void, CFAllocatorRef, CFArrayRef *))(v6 + 48);
  if (!v7)
  {
    uint64_t v10 = 4294954514;
    goto LABEL_12;
  }
  uint64_t v8 = v7(FigBaseObject, *MEMORY[0x1E4F33438], v3, &theArray);
  if (v8 == -12783)
  {
    CFIndex Count = 0;
  }
  else
  {
    uint64_t v10 = v8;
    if (v8) {
      goto LABEL_12;
    }
    CFIndex Count = CFArrayGetCount(theArray);
    if ((Count & 0xFFFFFFFFFFFFFFFDLL) != 1)
    {
      uint64_t v10 = FigSignalErrorAt();
      goto LABEL_12;
    }
  }
  uint64_t v10 = 0;
  if (a2) {
    *a2 = Count;
  }
LABEL_12:
  if (theArray) {
    CFRelease(theArray);
  }
  return v10;
}

uint64_t _getImageGeometryForIndex(uint64_t a1, unint64_t a2, uint64_t a3, void *a4, void *a5, _DWORD *a6)
{
  unint64_t v12 = a2;
  if (!a4 && !a5 && !a6) {
    return 0;
  }
  uint64_t result = _checkImageIndex(a1 + 40, &v12, 0);
  if (!result)
  {
    uint64_t result = _parseImageSizeAndTypeIfNeeded(a1 + 40);
    if (!result)
    {
      uint64_t v11 = *(void *)(a1 + 120);
      if (a4) {
        *a4 = *(void *)(a1 + 112);
      }
      if (a5) {
        *a5 = v11;
      }
      if (a6)
      {
        uint64_t result = _parseExifIfNeeded(a1 + 40, 0);
        if (!result) {
          *a6 = *(_DWORD *)(a1 + 304);
        }
        return result;
      }
      return 0;
    }
  }
  return result;
}

uint64_t _getImageGeometryForIndex_0(unsigned int *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, _DWORD *a6)
{
  if (!a4 && !a5 && !a6) {
    return 0;
  }
  if (!a2)
  {
    if (a4) {
      *a4 = a1[22];
    }
    if (a5) {
      *a5 = a1[23];
    }
    if (a6) {
      *a6 = a1[33];
    }
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t _getImageGeometryForIndex_1(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, int *a6)
{
  CFTypeRef cf = 0;
  int v20 = 0;
  int v21 = 1;
  long long v18 = 0u;
  long long v19 = 0u;
  if (!a4 && !a5 && !a6)
  {
LABEL_23:
    uint64_t v16 = 0;
    goto LABEL_24;
  }
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  CFTypeRef v14 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, void))(v13 + 16);
  if (!v14)
  {
    uint64_t v16 = 4294954514;
    goto LABEL_24;
  }
  uint64_t ItemTypeFromReader = v14(v11, a2, &cf, 0);
  if (ItemTypeFromReader) {
    goto LABEL_27;
  }
  uint64_t ItemTypeFromReader = CMPhotoPictureReaderGetItemTypeFromReader(cf, &v20);
  if (ItemTypeFromReader) {
    goto LABEL_27;
  }
  if (v20 != 1768187246)
  {
    uint64_t ItemTypeFromReader = CMPhotoPictureReaderGetImageGeometryFromPictureReader(cf, *(unsigned __int8 *)(a1 + 28), (unint64_t)&v18, 0);
    if (ItemTypeFromReader) {
      goto LABEL_27;
    }
    if (a6)
    {
      uint64_t ItemTypeFromReader = _getImageOrientation(a1, cf, 0, &v21);
      if (ItemTypeFromReader) {
        goto LABEL_27;
      }
    }
    goto LABEL_17;
  }
  uint64_t ItemTypeFromReader = CMPhotoPictureReaderCopyBaseReaderAndPropertiesForDerivedPicture(cf, 0, &v18, &v21);
  if (!ItemTypeFromReader)
  {
LABEL_17:
    if (a4) {
      *a4 = v19;
    }
    if (a5) {
      *a5 = *((void *)&v19 + 1);
    }
    if (a6)
    {
      uint64_t v16 = 0;
      *a6 = v21;
      goto LABEL_24;
    }
    goto LABEL_23;
  }
LABEL_27:
  uint64_t v16 = ItemTypeFromReader;
LABEL_24:
  if (cf) {
    CFRelease(cf);
  }
  return v16;
}

uint64_t _getImageGeometryForIndex_2(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, _DWORD *a6)
{
  if (!a4 && !a5 && !a6) {
    return 0;
  }
  long long v10 = 0u;
  long long v11 = 0u;
  uint64_t result = _getImageGeometryFromTrackReader(*(CFTypeRef *)(*(void *)(a1 + 80) + 8), &v10);
  if (result) {
    return result;
  }
  if (a4) {
    *a4 = v11;
  }
  if (a5) {
    *a5 = *((void *)&v11 + 1);
  }
  if (!a6) {
    return 0;
  }
  uint64_t result = 0;
  *a6 = 1;
  return result;
}

uint64_t _getFourCCPropertyFromReader(const void *a1, uint64_t a2, void *a3)
{
  CFNumberRef number = 0;
  if (!a3) {
    return 0;
  }
  CFAllocatorRef v5 = CFGetAllocator(a1);
  uint64_t FigBaseObject = FigPictureReaderGetFigBaseObject();
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, CFAllocatorRef, CFNumberRef *))(v8 + 48);
  if (v9)
  {
    uint64_t v10 = v9(FigBaseObject, a2, v5, &number);
    if (v10)
    {
      uint64_t v11 = v10;
    }
    else if (CFNumberGetValue(number, kCFNumberSInt32Type, a3))
    {
      uint64_t v11 = 0;
    }
    else
    {
      uint64_t v11 = 4294950194;
    }
  }
  else
  {
    uint64_t v11 = 4294954514;
  }
  if (number) {
    CFRelease(number);
  }
  return v11;
}

uint64_t CMPhotoPictureReaderGetItemTypeFromReader(const void *a1, void *a2)
{
  return _getFourCCPropertyFromReader(a1, *MEMORY[0x1E4F333F8], a2);
}

uint64_t _getImageOrientation(uint64_t a1, const void *a2, const void *a3, _DWORD *a4)
{
  unsigned __int8 v28 = 0;
  int v27 = 1;
  uint64_t result = CMPhotoPictureReaderGetHEIFOrientation(a2, &v28, &v27);
  if (!result)
  {
    if ((_checkForInterestingBrands(a1) || !*(unsigned char *)(a1 + 163))
      && (_checkForInterestingBrands(a1) || !*(unsigned char *)(a1 + 164)))
    {
      LODWORD(v34) = 0;
      uint64_t result = CMPhotoPictureReaderGetItemTypeFromReader(a2, &v34);
      if (result) {
        return result;
      }
      if (v34 != 1953325424)
      {
        if (!*(unsigned char *)(a1 + 165))
        {
          CFBooleanRef v34 = 0;
          uint64_t v9 = cmpweak_kFigPictureCollectionProperty_SourceSpecifiesOrientation();
          uint64_t v10 = *(void *)(a1 + 40);
          uint64_t CMBaseObject = FigPictureCollectionGetCMBaseObject();
          uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v12) {
            uint64_t v13 = v12;
          }
          else {
            uint64_t v13 = 0;
          }
          CFTypeRef v14 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, const __CFBoolean **))(v13 + 48);
          if (v14 && !v14(CMBaseObject, v9, v10, &v34)) {
            *(unsigned char *)(a1 + 166) = CMPhotoCFBooleanGetValue(v34);
          }
          *(unsigned char *)(a1 + 165) = 1;
        }
        if (!*(unsigned char *)(a1 + 166))
        {
          int v15 = v28;
          if (a3 && !v28)
          {
            LODWORD(v34) = 0;
            uint64_t result = CMPhotoPictureReaderGetHEIFOrientation(a3, &v28, (int *)&v34);
            if (result) {
              return result;
            }
            int v15 = v28;
          }
          if (!v15)
          {
            if (!a3) {
              a3 = a2;
            }
            CFAllocatorRef v16 = CFGetAllocator(a3);
            unsigned int v35 = 0;
            int v33 = 0;
            CFBooleanRef v34 = 0;
            CMBlockBufferRef theBuffer = 0;
            int v32 = 0;
            uint64_t v29 = 0;
            CFTypeRef cf = 0;
            uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v17) {
              uint64_t v18 = v17;
            }
            else {
              uint64_t v18 = 0;
            }
            long long v19 = *(unsigned int (**)(const void *, uint64_t *))(v18 + 48);
            if (v19 && !v19(a3, &v29) && v29 >= 1)
            {
              for (uint64_t i = 0; i < v29; ++i)
              {
                uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
                uint64_t v22 = v21 ? v21 : 0;
                uint64_t v23 = *(unsigned int (**)(const void *, uint64_t, unsigned int *, const __CFBoolean **, void **, void **, CFTypeRef *, void))(v22 + 56);
                if (!v23
                  || v23(a3, i, &v35, &v34, &v33, &v32, &cf, 0)
                  || !cf
                  || CMPhotoPictureReaderCreateContiguousBlockBufferFromChunks((uint64_t)v16, (uint64_t)v34, (uint64_t)v33, (uint64_t)v32, (uint64_t)cf, 0, 0, &theBuffer))
                {
                  break;
                }
                DataCFIndex Length = CMBlockBufferGetDataLength(theBuffer);
                if (DataLength < v35)
                {
                  FigSignalErrorAt();
                  break;
                }
                if (CMPhotoParseExifOrientationFromTIFF(theBuffer, v35, DataLength - v35, &v27))
                {
                  unsigned __int8 v28 = 1;
                  break;
                }
                uint64_t v25 = v33;
                if (v33)
                {
                  int v33 = 0;
                  free(v25);
                }
                uint64_t v26 = v32;
                if (v32)
                {
                  int v32 = 0;
                  free(v26);
                }
                if (cf)
                {
                  CFRelease(cf);
                  CFTypeRef cf = 0;
                }
                if (theBuffer)
                {
                  CFRelease(theBuffer);
                  CMBlockBufferRef theBuffer = 0;
                }
              }
            }
            free(v33);
            free(v32);
            if (cf) {
              CFRelease(cf);
            }
            if (theBuffer) {
              CFRelease(theBuffer);
            }
          }
        }
      }
    }
    uint64_t result = 0;
    *a4 = v27;
  }
  return result;
}

uint64_t _checkForInterestingBrands(uint64_t a1)
{
  CFArrayRef theArray = 0;
  if (*(unsigned char *)(a1 + 162)) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t CMBaseObject = FigPictureCollectionGetCMBaseObject();
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, void, uint64_t, CFArrayRef *))(v6 + 48);
  if (v7)
  {
    uint64_t v8 = v7(CMBaseObject, *MEMORY[0x1E4F33250], v3, &theArray);
    if (v8)
    {
      uint64_t v1 = v8;
    }
    else
    {
      for (CFIndex i = 0; ; ++i)
      {
        CFIndex Count = (CFIndex)theArray;
        if (theArray) {
          CFIndex Count = CFArrayGetCount(theArray);
        }
        if (i >= Count) {
          break;
        }
        FigCFArrayGetInt32AtIndex();
      }
      uint64_t v1 = 0;
      *(unsigned char *)(a1 + 162) = 1;
    }
  }
  else
  {
    uint64_t v1 = 4294954514;
  }
  if (theArray) {
    CFRelease(theArray);
  }
  return v1;
}

uint64_t CMPhotoPictureReaderGetHEIFOrientation(const void *a1, unsigned char *a2, int *a3)
{
  CFNumberRef number = 0;
  int v24 = -1;
  int valuePtr = 0;
  CFAllocatorRef v6 = CFGetAllocator(a1);
  uint64_t FigBaseObject = FigPictureReaderGetFigBaseObject();
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, void, CFAllocatorRef, CFNumberRef *))(v9 + 48);
  if (!v10) {
    goto LABEL_17;
  }
  uint64_t v11 = v10(FigBaseObject, *MEMORY[0x1E4F33440], v6, &number);
  if (v11 == -12783)
  {
    char v12 = 0;
  }
  else
  {
    uint64_t v13 = v11;
    if (v11) {
      goto LABEL_18;
    }
    CFNumberGetValue(number, kCFNumberIntType, &valuePtr);
    char v12 = 1;
  }
  if (number)
  {
    CFRelease(number);
    CFNumberRef number = 0;
  }
  CFAllocatorRef v14 = CFGetAllocator(a1);
  uint64_t v15 = FigPictureReaderGetFigBaseObject();
  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v17 = v16 ? v16 : 0;
  uint64_t v18 = *(uint64_t (**)(uint64_t, void, CFAllocatorRef, CFNumberRef *))(v17 + 48);
  if (!v18)
  {
LABEL_17:
    uint64_t v13 = 4294954514;
    goto LABEL_18;
  }
  uint64_t v19 = v18(v15, *MEMORY[0x1E4F33410], v14, &number);
  if (v19 == -12783)
  {
    char v20 = 0;
    int v21 = -1;
  }
  else
  {
    uint64_t v13 = v19;
    if (v19) {
      goto LABEL_18;
    }
    CFNumberGetValue(number, kCFNumberIntType, &v24);
    char v20 = 1;
    int v21 = v24;
  }
  uint64_t v23 = CMPhotoExifOrientationFromHEIFRotationCCWAndMirroring(valuePtr, v21, a3);
  uint64_t v13 = v23;
  if (a2 && !v23) {
    *a2 = v12 | v20;
  }
LABEL_18:
  if (number) {
    CFRelease(number);
  }
  return v13;
}

uint64_t CMPhotoExifOrientationFromHEIFRotationCCWAndMirroring(int a1, int a2, int *a3)
{
  if (a1 || a2 != -1)
  {
    if ((a1 || a2 != 1) && (a1 != 180 || a2))
    {
      if (a1 == 180 && a2 == -1)
      {
        int v3 = 3;
      }
      else
      {
        BOOL v6 = a1 == 180 && a2 == 1;
        int v3 = 4;
        if (a2 | a1 && !v6)
        {
          if (a1 == 90 && !a2 || a1 == 270 && a2 == 1)
          {
            int v3 = 5;
          }
          else if (a1 == 270 && a2 == -1)
          {
            int v3 = 6;
          }
          else
          {
            BOOL v8 = a1 == 270 && a2 == 0;
            BOOL v9 = a2 == 1 && a1 == 90;
            int v3 = 7;
            if (!v9 && !v8)
            {
              if (a1 != 90 || a2 != -1) {
                return FigSignalErrorAt();
              }
              int v3 = 8;
            }
          }
        }
      }
    }
    else
    {
      int v3 = 2;
    }
  }
  else
  {
    int v3 = 1;
  }
  if (a3) {
    *a3 = v3;
  }
  return 0;
}

uint64_t CMPhotoPictureReaderGetImageGeometryFromPictureReader(const void *a1, int a2, unint64_t a3, unint64_t a4)
{
  size.double height = 0.0;
  CFDictionaryRef dict = 0;
  size.double width = 0.0;
  if (!(a3 | a4)) {
    goto LABEL_40;
  }
  CFAllocatorRef v8 = CFGetAllocator(a1);
  uint64_t FigBaseObject = FigPictureReaderGetFigBaseObject();
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  char v12 = *(uint64_t (**)(uint64_t, void, CFAllocatorRef, CFDictionaryRef *))(v11 + 48);
  if (!v12)
  {
LABEL_20:
    uint64_t v20 = 4294954514;
    goto LABEL_21;
  }
  uint64_t v13 = v12(FigBaseObject, *MEMORY[0x1E4F33430], v8, &dict);
  if (v13)
  {
LABEL_41:
    uint64_t v20 = v13;
    goto LABEL_21;
  }
  if (!CGSizeMakeWithDictionaryRepresentation(dict, &size) || size.width <= 0.0 || size.height <= 0.0)
  {
LABEL_40:
    uint64_t v13 = FigSignalErrorAt();
    goto LABEL_41;
  }
  if (dict)
  {
    CFRelease(dict);
    CFDictionaryRef dict = 0;
  }
  CFAllocatorRef v14 = CFGetAllocator(a1);
  uint64_t v15 = FigPictureReaderGetFigBaseObject();
  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v16) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v18 = *(uint64_t (**)(uint64_t, void, CFAllocatorRef, CFDictionaryRef *))(v17 + 48);
  if (!v18) {
    goto LABEL_20;
  }
  uint64_t v19 = v18(v15, *MEMORY[0x1E4F24A78], v14, &dict);
  if (v19)
  {
    uint64_t v20 = v19;
    if (v19 != -12783) {
      goto LABEL_21;
    }
  }
  double width = size.width;
  if (dict)
  {
    double CropRectFromCLAPDict = CMPhotoGetCropRectFromCLAPDict(dict, size.width, size.height);
    double width = size.width;
    double height = size.height;
  }
  else
  {
    double height = size.height;
    double CropRectFromCLAPDict = 0.0;
    double v22 = 0.0;
    double v23 = size.width;
    double v24 = size.height;
  }
  if (CropRectFromCLAPDict < 0.0 || v23 <= 0.0 || v22 < 0.0 || v24 <= 0.0) {
    goto LABEL_40;
  }
  double v28 = CropRectFromCLAPDict + v23;
  double v29 = v22 + v24;
  if (a2)
  {
    if (v28 > width) {
      double v23 = width - CropRectFromCLAPDict;
    }
    if (v29 > height) {
      double v24 = height - v22;
    }
    goto LABEL_36;
  }
  if (v28 > width || v29 > height) {
    goto LABEL_40;
  }
LABEL_36:
  if (a3)
  {
    *(void *)a3 = vcvtad_u64_f64(CropRectFromCLAPDict);
    *(void *)(a3 + 8) = vcvtad_u64_f64(v22);
    *(void *)(a3 + 16) = vcvtad_u64_f64(v23);
    *(void *)(a3 + 24) = vcvtad_u64_f64(v24);
  }
  uint64_t v20 = 0;
  if (a4)
  {
    *(void *)a4 = vcvtad_u64_f64(width);
    *(void *)(a4 + 8) = vcvtad_u64_f64(height);
  }
LABEL_21:
  if (dict) {
    CFRelease(dict);
  }
  return v20;
}

uint64_t CMPhotoDecompressionContainerCopyColorInfoFromFormatDescription(const opaqueCMFormatDescription *a1, int a2, int a3, int a4, int a5, int a6, void *a7, CFTypeRef *a8, CFTypeRef *a9, CFTypeRef *a10, int *a11, int *a12, char *a13)
{
  CFBooleanRef v34 = 0;
  CFTypeRef v32 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v31 = 0;
  int v29 = -1;
  int v30 = -1;
  BOOL v28 = a5 == 0;
  *(void *)&long long v27 = &v30;
  *((void *)&v27 + 1) = &v29;
  uint64_t InfoFromFormatDescription = CMPhotoGetInfoFromFormatDescription(a1, 0, a2, 0, &v28, 0, 0, 0, v27, &cf, &v32, &v31);
  if (InfoFromFormatDescription) {
    goto LABEL_45;
  }
  CFDictionaryRef Extensions = CMFormatDescriptionGetExtensions(a1);
  uint64_t InfoFromFormatDescription = CMPhotoCreateColorSpaceFromPixelBufferAttachments(Extensions, a4, &v34, 1, 1);
  if (InfoFromFormatDescription) {
    goto LABEL_45;
  }
  if (a4) {
    BOOL v21 = 0;
  }
  else {
    BOOL v21 = v31 == 0;
  }
  char v22 = !v21;
  if (!a3 || (v22 & 1) != 0)
  {
    if (v28) {
      char v22 = 1;
    }
    char v23 = 0;
    if ((v22 & 1) == 0) {
      CFTypeRef v31 = CFRetain((CFTypeRef)*MEMORY[0x1E4F24C48]);
    }
  }
  else
  {
    CFTypeRef v31 = CFRetain((CFTypeRef)*MEMORY[0x1E4F24C40]);
    char v23 = 1;
  }
  double v24 = v34;
  if (!(a6 | a4) && !v34)
  {
    double v24 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC98]);
    CFBooleanRef v34 = v24;
  }
  if (v24 && CGColorSpaceGetModel(v24) >= kCGColorSpaceModelCMYK)
  {
    uint64_t InfoFromFormatDescription = FigSignalErrorAt();
LABEL_45:
    uint64_t v25 = InfoFromFormatDescription;
    goto LABEL_35;
  }
  if (a7)
  {
    *a7 = v34;
    CFBooleanRef v34 = 0;
  }
  if (a8)
  {
    *a8 = cf;
    CFTypeRef cf = 0;
  }
  if (a9)
  {
    *a9 = v32;
    CFTypeRef v32 = 0;
  }
  if (a10)
  {
    *a10 = v31;
    CFTypeRef v31 = 0;
  }
  if (a11) {
    *a11 = v30;
  }
  if (a12) {
    *a12 = v29;
  }
  uint64_t v25 = 0;
  if (a13) {
    *a13 = v23;
  }
LABEL_35:
  if (v34) {
    CFRelease(v34);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v32) {
    CFRelease(v32);
  }
  if (v31) {
    CFRelease(v31);
  }
  return v25;
}

uint64_t CMPhotoGetInfoFromFormatDescription(const opaqueCMFormatDescription *a1, opaqueCMSampleBuffer *a2, int a3, FourCharCode *a4, unsigned char *a5, _DWORD *a6, char *a7, char *a8, long long a9, void *a10, void *a11, void *a12)
{
  char BitDepthForPixelFormat = -1;
  char v85 = -1;
  int v83 = -1;
  int v84 = -1;
  if (!a1) {
    return 4294950306;
  }
  FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(a1);
  int v18 = MediaSubType;
  if (a4) {
    *a4 = MediaSubType;
  }
  CFTypeRef v88 = 0;
  CFTypeRef v89 = 0;
  CFTypeRef v87 = 0;
  if (!a10 && !a11 && !a12)
  {
    uint64_t AV1SequenceHeaderInfoFromSampleBuffer = 0;
    unint64_t v40 = (unint64_t)a6;
    goto LABEL_69;
  }
  uint64x2_t v79 = a5;
  BOOL v80 = a7;
  uint64_t v81 = a8;
  CFDictionaryRef Extensions = CMFormatDescriptionGetExtensions(a1);
  CFDictionaryRef v20 = Extensions;
  if (!Extensions)
  {
    BOOL v75 = 0;
    BOOL v76 = 0;
    BOOL v24 = 0;
    char v22 = 0;
    StringForIntegerCodePoint = 0;
    if (CMFormatDescriptionGetMediaSubType(a1) != 1735551332) {
      goto LABEL_31;
    }
    CFDictionaryRef Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E4F1EE20]);
    if (!Extension) {
      goto LABEL_31;
    }
LABEL_18:
    CFDictionaryRef v28 = Extension;
    if (CFDictionaryGetValue(Extension, @"hvcC"))
    {
      int v29 = 1752589105;
LABEL_26:
      int v31 = v29;
      goto LABEL_32;
    }
    if (CFDictionaryGetValue(v28, @"avcC"))
    {
      int v29 = 1635148593;
      goto LABEL_26;
    }
    if (CFDictionaryGetValue(v28, @"slmC"))
    {
      int v29 = 1936484717;
      goto LABEL_26;
    }
    CFDictionaryRef Value = CFDictionaryGetValue(v28, @"av1C");
    if (Value)
    {
      int v29 = 1635135537;
      CFTypeRef cf = Value;
      CFTypeID v73 = CFGetTypeID(Value);
      if (v73 == CFArrayGetTypeID()) {
        goto LABEL_26;
      }
      CFTypeID v74 = CFGetTypeID(cf);
      CFTypeID TypeID = CFDataGetTypeID();
      int v31 = v18;
      if (v74 == TypeID) {
        goto LABEL_26;
      }
    }
    else
    {
LABEL_31:
      int v31 = v18;
    }
LABEL_32:
    uint64_t AV1SequenceHeaderInfoFromSampleBuffer = 0;
    if (v31 > 1752589104)
    {
      if (v31 == 1936484717) {
        goto LABEL_38;
      }
      int v34 = 1752589105;
    }
    else
    {
      if (v31 == 1635135537)
      {
        uint64_t AV1SequenceHeaderInfoFromSampleBuffer = 0;
        if (a2)
        {
          if (a3)
          {
            uint64_t v93 = 0;
            long long v91 = 0u;
            long long v92 = 0u;
            *(_OWORD *)colorPrimariesCodePoint = 0u;
            uint64_t AV1SequenceHeaderInfoFromSampleBuffer = CMPhotoReadAV1SequenceHeaderInfoFromSampleBuffer(a2, colorPrimariesCodePoint);
            if (!AV1SequenceHeaderInfoFromSampleBuffer)
            {
              if (v24) {
                StringForIntegerCodePoint = 0;
              }
              else {
                StringForIntegerCodePoint = CVColorPrimariesGetStringForIntegerCodePoint(colorPrimariesCodePoint[1]);
              }
              if (v75) {
                char v22 = 0;
              }
              else {
                char v22 = CVTransferFunctionGetStringForIntegerCodePoint(colorPrimariesCodePoint[2]);
              }
              if (v76) {
                CFDictionaryRef v20 = 0;
              }
              else {
                CFDictionaryRef v20 = (const __CFDictionary *)CMPhotoCVYCbCrMatrixGetStringForIntegerCodePoint(colorPrimariesCodePoint[3]);
              }
            }
          }
        }
        goto LABEL_53;
      }
      int v34 = 1635148593;
    }
    if (v31 != v34) {
      goto LABEL_53;
    }
LABEL_38:
    if (v24) {
      unsigned int v35 = 0;
    }
    else {
      unsigned int v35 = &v89;
    }
    if (v75) {
      uint64_t v36 = 0;
    }
    else {
      uint64_t v36 = &v88;
    }
    if (v76) {
      uint64_t v37 = 0;
    }
    else {
      uint64_t v37 = &v87;
    }
    CMPhotoCopyTripletsFromVUIInsideFormatDescription(a1, v35, v36, v37);
    uint64_t AV1SequenceHeaderInfoFromSampleBuffer = 0;
    if (v89) {
      StringForIntegerCodePoint = v89;
    }
    if (v88) {
      char v22 = v88;
    }
    if (v87) {
      CFDictionaryRef v20 = (const __CFDictionary *)v87;
    }
    goto LABEL_53;
  }
  StringForIntegerCodePoint = CFDictionaryGetValue(Extensions, (const void *)*MEMORY[0x1E4F24A90]);
  char v22 = CFDictionaryGetValue(v20, (const void *)*MEMORY[0x1E4F24BC8]);
  CFDictionaryRef MatrixFromPixelBufferAttachments = CMPhotoGetMatrixFromPixelBufferAttachments(v20);
  CFDictionaryRef v20 = MatrixFromPixelBufferAttachments;
  BOOL v24 = StringForIntegerCodePoint != 0;
  if (StringForIntegerCodePoint) {
    BOOL v25 = v22 == 0;
  }
  else {
    BOOL v25 = 1;
  }
  if (v25 || MatrixFromPixelBufferAttachments == 0)
  {
    BOOL v75 = v22 != 0;
    BOOL v76 = MatrixFromPixelBufferAttachments != 0;
    goto LABEL_18;
  }
  uint64_t AV1SequenceHeaderInfoFromSampleBuffer = 0;
LABEL_53:
  a5 = v79;
  if (a10)
  {
    if (StringForIntegerCodePoint) {
      CFTypeRef v38 = CFRetain(StringForIntegerCodePoint);
    }
    else {
      CFTypeRef v38 = 0;
    }
    *a10 = v38;
  }
  a7 = v80;
  if (a11)
  {
    if (v22) {
      CFTypeRef v39 = CFRetain(v22);
    }
    else {
      CFTypeRef v39 = 0;
    }
    *a11 = v39;
  }
  if (a12)
  {
    a8 = v81;
    unint64_t v40 = (unint64_t)a6;
    if (v20) {
      CFTypeRef v41 = CFRetain(v20);
    }
    else {
      CFTypeRef v41 = 0;
    }
    *a12 = v41;
  }
  else
  {
    a8 = v81;
    unint64_t v40 = (unint64_t)a6;
  }
LABEL_69:
  if (v89) {
    CFRelease(v89);
  }
  if (v88) {
    CFRelease(v88);
  }
  if (v87) {
    CFRelease(v87);
  }
  if (!AV1SequenceHeaderInfoFromSampleBuffer)
  {
    if (!a5) {
      goto LABEL_97;
    }
    Boolean v42 = 1;
    if (v18 > 1752589104)
    {
      if (v18 == 1936484717)
      {
        CFDictionaryRef v46 = (const __CFDictionary *)CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E4F1EE20]);
        if (!v46) {
          return 4294950303;
        }
        CFDataRef v47 = (const __CFData *)CFDictionaryGetValue(v46, @"slmC");
        if (v47)
        {
          CFDataRef v48 = v47;
          unint64_t Length = CFDataGetLength(v47);
          BytePtr = CFDataGetBytePtr(v48);
          Boolean v42 = 1;
          if (Length < 4 || !BytePtr) {
            goto LABEL_96;
          }
          unsigned int v51 = *(_DWORD *)BytePtr;
          colorPrimariesCodePoint[0] = 6;
          LODWORD(v89) = 0;
          uint64_t AV1SequenceHeaderInfoFromSampleBuffer = Slim_GetPixelBufferInfoFromVersion(v51, colorPrimariesCodePoint, (int *)&v89, 0, 0, 0);
          if (AV1SequenceHeaderInfoFromSampleBuffer) {
            char IsFullRange = 1;
          }
          else {
            char IsFullRange = CMPhotoPixelFormatIsFullRange(v89);
          }
LABEL_161:
          *a5 = IsFullRange;
          if (AV1SequenceHeaderInfoFromSampleBuffer) {
            return AV1SequenceHeaderInfoFromSampleBuffer;
          }
LABEL_97:
          unint64_t v52 = v40 | (unint64_t)a7 | (unint64_t)a8;
          BOOL v53 = v52 != 0;
          if (!v52 && a9 == 0) {
            return 0;
          }
          LODWORD(v54) = 0;
          if (v18 > 1752589104)
          {
            if (v18 != 1936484717)
            {
              uint64_t AV1SequenceHeaderInfoFromSampleBuffer = 0;
              if (v18 != 1752589105) {
                goto LABEL_141;
              }
              CFTypeRef v89 = 0;
              *(void *)colorPrimariesCodePoint = 0;
              CFDictionaryRef v59 = (const __CFDictionary *)CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E4F1EE20]);
              if (v59 && CFDictionaryGetValue(v59, @"hvcC"))
              {
                uint64_t HEVCParameterSetAtIndex = FigHEVCBridge_GetHEVCParameterSetAtIndex();
                if (!HEVCParameterSetAtIndex)
                {
                  if (v53
                    && (LOBYTE(v88) = -1,
                        FigHEVCBridge_GetSPSChromaFormatAndBitDepths(),
                        (unint64_t)(char)v88 <= 3))
                  {
                    LODWORD(v54) = dword_1AB9DCA80[(char)v88];
                  }
                  else
                  {
                    LODWORD(v54) = 0;
                  }
                  if (a9 != 0) {
                    FigHEVCBridge_GetSPS_VUI_ChromaLocation();
                  }
                  goto LABEL_140;
                }
                return HEVCParameterSetAtIndex;
              }
              return 4294950303;
            }
            if (!v52)
            {
              uint64_t AV1SequenceHeaderInfoFromSampleBuffer = 0;
              if (!(void)a9)
              {
LABEL_149:
                if (*((void *)&a9 + 1)) {
                  **((_DWORD **)&a9 + 1) = v83;
                }
                return AV1SequenceHeaderInfoFromSampleBuffer;
              }
LABEL_148:
              *(_DWORD *)a9 = v84;
              goto LABEL_149;
            }
            CFDictionaryRef v64 = (const __CFDictionary *)CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E4F1EE20]);
            if (!v64) {
              return 4294950303;
            }
            CFDataRef v65 = (const __CFData *)CFDictionaryGetValue(v64, @"slmC");
            CFDataRef v54 = v65;
            if (v65)
            {
              unint64_t v66 = CFDataGetLength(v65);
              uint64_t v67 = CFDataGetBytePtr(v54);
              LODWORD(v54) = 0;
              uint64_t AV1SequenceHeaderInfoFromSampleBuffer = 0;
              if (v66 >= 4)
              {
                if (v67)
                {
                  unsigned int v68 = *(_DWORD *)v67;
                  colorPrimariesCodePoint[0] = 6;
                  LODWORD(v89) = 0;
                  uint64_t AV1SequenceHeaderInfoFromSampleBuffer = Slim_GetPixelBufferInfoFromVersion(v68, colorPrimariesCodePoint, (int *)&v89, 0, 0, 0);
                  LODWORD(v54) = 0;
                  if (!AV1SequenceHeaderInfoFromSampleBuffer)
                  {
                    LODWORD(v54) = CMPhotoGetChromaSubsamplingFromPixelFormat(v89);
                    char BitDepthForPixelFormat = CMPhotoGetBitDepthForPixelFormat(v89);
                    char v85 = BitDepthForPixelFormat;
                  }
                }
              }
LABEL_141:
              if (v40) {
                *(_DWORD *)unint64_t v40 = v54;
              }
              if (a7) {
                *a7 = BitDepthForPixelFormat;
              }
              if (a8) {
                *a8 = v85;
              }
              if (!(void)a9) {
                goto LABEL_149;
              }
              goto LABEL_148;
            }
LABEL_140:
            uint64_t AV1SequenceHeaderInfoFromSampleBuffer = 0;
            goto LABEL_141;
          }
          if (v18 != 1635135537)
          {
            uint64_t AV1SequenceHeaderInfoFromSampleBuffer = 0;
            if (v18 != 1635148593) {
              goto LABEL_141;
            }
            CFTypeRef v89 = 0;
            *(void *)colorPrimariesCodePoint = 0;
            CFDictionaryRef v55 = (const __CFDictionary *)CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E4F1EE20]);
            if (v55)
            {
              CFDataRef v56 = (const __CFData *)CFDictionaryGetValue(v55, @"avcC");
              if (v56)
              {
                CFDataRef v57 = v56;
                CFDataGetBytePtr(v56);
                CFDataGetLength(v57);
                uint64_t HEVCParameterSetAtIndex = FigH264Bridge_GetSPSFromAVCC();
                if (!HEVCParameterSetAtIndex)
                {
                  if (v53
                    && (LOBYTE(v88) = -1,
                        FigH264Bridge_GetSPSChromaFormatAndBitDepths(),
                        (unint64_t)(char)v88 <= 3))
                  {
                    LODWORD(v54) = dword_1AB9DCA80[(char)v88];
                  }
                  else
                  {
                    LODWORD(v54) = 0;
                  }
                  if (a9 != 0) {
                    FigH264Bridge_GetSPS_VUI_ChromaLocation();
                  }
                  goto LABEL_140;
                }
                return HEVCParameterSetAtIndex;
              }
            }
            return 4294950303;
          }
          LOBYTE(colorPrimariesCodePoint[0]) = -1;
          LOBYTE(v89) = -1;
          CFDictionaryRef v60 = (const __CFDictionary *)CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E4F1EE20]);
          if (!v60) {
            return 4294950303;
          }
          CFArrayRef v61 = (const __CFArray *)CFDictionaryGetValue(v60, @"av1C");
          if (!v61) {
            return 4294950303;
          }
          CFArrayRef ValueAtIndex = v61;
          CFTypeID v63 = CFGetTypeID(v61);
          if (v63 == CFArrayGetTypeID())
          {
            CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(ValueAtIndex, 0);
            if (!ValueAtIndex) {
              return 4294950303;
            }
          }
          else
          {
            CFTypeID v70 = CFGetTypeID(ValueAtIndex);
            if (v70 != CFDataGetTypeID()) {
              return 4294950303;
            }
          }
          CFDataGetBytePtr(ValueAtIndex);
          CFDataGetLength(ValueAtIndex);
          uint64_t HEVCParameterSetAtIndex = FigAV1Bridge_GetChromaFormatAndBitDepthsFromAV1CodecConfigurationRecord();
          if (HEVCParameterSetAtIndex) {
            return HEVCParameterSetAtIndex;
          }
          char BitDepthForPixelFormat = -1;
          int v71 = LOBYTE(colorPrimariesCodePoint[0]);
          if (LOBYTE(colorPrimariesCodePoint[0]) != 2)
          {
            if (LOBYTE(colorPrimariesCodePoint[0]) == 1)
            {
              int v83 = 0;
              int v84 = 0;
              goto LABEL_165;
            }
            int v71 = -1;
          }
          int v83 = v71;
          int v84 = v71;
LABEL_165:
          if (v89 > 0x6Du)
          {
            if (v89 == 110)
            {
              LODWORD(v54) = 5;
              goto LABEL_140;
            }
            if (v89 == 111)
            {
              LODWORD(v54) = 6;
              goto LABEL_140;
            }
          }
          else
          {
            if (!(_BYTE)v89)
            {
              LODWORD(v54) = 1;
              goto LABEL_140;
            }
            if (v89 == 100)
            {
              LODWORD(v54) = 3;
              goto LABEL_140;
            }
          }
          LODWORD(v54) = 0;
          goto LABEL_140;
        }
LABEL_95:
        Boolean v42 = 1;
        goto LABEL_96;
      }
      int v43 = 1752589105;
    }
    else
    {
      if (v18 == 1635135537) {
        goto LABEL_83;
      }
      int v43 = 1635148593;
    }
    if (v18 != v43)
    {
LABEL_96:
      *a5 = v42;
      goto LABEL_97;
    }
LABEL_83:
    CFBooleanRef v44 = (const __CFBoolean *)CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E4F1EDB0]);
    if (v44)
    {
      Boolean v42 = CFBooleanGetValue(v44);
      goto LABEL_96;
    }
    if (v18 == 1635135537)
    {
      Boolean v42 = 1;
      if (!a2 || !a3) {
        goto LABEL_96;
      }
      uint64_t v93 = 0;
      long long v91 = 0u;
      long long v92 = 0u;
      *(_OWORD *)colorPrimariesCodePoint = 0u;
      uint64_t AV1SequenceHeaderInfoFromSampleBuffer = CMPhotoReadAV1SequenceHeaderInfoFromSampleBuffer(a2, colorPrimariesCodePoint);
      char IsFullRange = (AV1SequenceHeaderInfoFromSampleBuffer | colorPrimariesCodePoint[0]) != 0;
      goto LABEL_161;
    }
    goto LABEL_95;
  }
  return AV1SequenceHeaderInfoFromSampleBuffer;
}

CFDictionaryRef CMPhotoGetMatrixFromPixelBufferAttachments(const __CFDictionary *result)
{
  if (result)
  {
    CFDictionaryRef Value = CFDictionaryGetValue(result, (const void *)*MEMORY[0x1E4F24C18]);
    if (FigCFEqual()) {
      return (const __CFDictionary *)*MEMORY[0x1E4F24C40];
    }
    else {
      return (const __CFDictionary *)Value;
    }
  }
  return result;
}

uint64_t CMPhotoCopyTripletsFromVUIInsideFormatDescription(const opaqueCMFormatDescription *a1, void *a2, void *a3, void *a4)
{
  if (!a1)
  {
    CFDataRef StringForIntegerCodePoint = 0;
    goto LABEL_7;
  }
  CFDictionaryRef Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E4F1EE20]);
  CFDictionaryRef v8 = Extension;
  if (!Extension)
  {
    CFDataRef StringForIntegerCodePoint = 0;
LABEL_9:
    CFStringRef v13 = 0;
    uint64_t v14 = 0;
    if (!a2) {
      goto LABEL_21;
    }
    goto LABEL_17;
  }
  CFDictionaryRef Value = CFDictionaryGetValue(Extension, @"hvcC");
  CFDataRef StringForIntegerCodePoint = (const __CFData *)CFDictionaryGetValue(v8, @"avcC");
  CFDictionaryGetValue(v8, @"slmC");
  if (Value)
  {
    uint64_t HEVCParameterSetAtIndex = FigHEVCBridge_GetHEVCParameterSetAtIndex();
    if (!HEVCParameterSetAtIndex)
    {
      uint64_t SPS_VUI_NCLC = FigHEVCBridge_GetSPS_VUI_NCLC();
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (!StringForIntegerCodePoint)
  {
LABEL_7:
    CFDictionaryRef v8 = 0;
    goto LABEL_9;
  }
  CFDataGetBytePtr(StringForIntegerCodePoint);
  CFDataGetLength(StringForIntegerCodePoint);
  uint64_t HEVCParameterSetAtIndex = FigH264Bridge_GetSPSFromAVCC();
  if (!HEVCParameterSetAtIndex)
  {
    uint64_t SPS_VUI_NCLC = FigH264Bridge_GetSPS_VUI_NCLC();
LABEL_15:
    uint64_t v14 = SPS_VUI_NCLC;
    if (!SPS_VUI_NCLC)
    {
      CFDataRef StringForIntegerCodePoint = (const __CFData *)CVColorPrimariesGetStringForIntegerCodePoint(0);
      CFDictionaryRef v8 = (const __CFDictionary *)CVTransferFunctionGetStringForIntegerCodePoint(0);
      CFStringRef v13 = CMPhotoCVYCbCrMatrixGetStringForIntegerCodePoint(0);
      if (!a2) {
        goto LABEL_21;
      }
      goto LABEL_17;
    }
    goto LABEL_16;
  }
LABEL_13:
  uint64_t v14 = HEVCParameterSetAtIndex;
LABEL_16:
  CFDataRef StringForIntegerCodePoint = 0;
  CFDictionaryRef v8 = 0;
  CFStringRef v13 = 0;
  if (!a2) {
    goto LABEL_21;
  }
LABEL_17:
  if (StringForIntegerCodePoint) {
    CFTypeRef v15 = CFRetain(StringForIntegerCodePoint);
  }
  else {
    CFTypeRef v15 = 0;
  }
  *a2 = v15;
LABEL_21:
  if (a3)
  {
    if (v8) {
      CFTypeRef v16 = CFRetain(v8);
    }
    else {
      CFTypeRef v16 = 0;
    }
    *a3 = v16;
  }
  if (a4)
  {
    if (v13) {
      CFTypeRef v17 = CFRetain(v13);
    }
    else {
      CFTypeRef v17 = 0;
    }
    *a4 = v17;
  }
  return v14;
}

CFStringRef CMPhotoCVYCbCrMatrixGetStringForIntegerCodePoint(int a1)
{
  if (a1 == 5)
  {
    uint64_t v1 = MEMORY[0x1E4F24C40];
    return *(CFStringRef *)v1;
  }
  if (!a1)
  {
    uint64_t v1 = MEMORY[0x1E4F24C50];
    return *(CFStringRef *)v1;
  }
  return CVYCbCrMatrixGetStringForIntegerCodePoint(a1);
}

uint64_t _getTileGeometryFromPictureTileCursorService(const void *a1, uint64x2_t *a2, unint64_t *a3, unint64_t a4)
{
  CFAllocatorRef v7 = CFGetAllocator(a1);
  CFDictionaryRef dict = 0;
  uint64x2_t v8 = 0uLL;
  CGSize size = (CGSize)0;
  if ((unint64_t)a2 | a4)
  {
    uint64_t CMBaseObject = FigPictureTileCursorServiceGetCMBaseObject();
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    char v12 = *(uint64_t (**)(uint64_t, void, CFAllocatorRef, CFDictionaryRef *))(v11 + 48);
    if (!v12) {
      goto LABEL_33;
    }
    uint64_t v13 = v12(CMBaseObject, *MEMORY[0x1E4F334B0], v7, &dict);
    if (v13) {
      goto LABEL_38;
    }
    if (!CGSizeMakeWithDictionaryRepresentation(dict, &size))
    {
LABEL_37:
      uint64_t v13 = FigSignalErrorAt();
      goto LABEL_38;
    }
    uint64x2_t v8 = vcvtq_u64_f64(vrndaq_f64((float64x2_t)size));
    if (dict)
    {
      uint64x2_t v23 = v8;
      CFRelease(dict);
      uint64x2_t v8 = v23;
      CFDictionaryRef dict = 0;
    }
  }
  if ((unint64_t)a3 | a4)
  {
    uint64x2_t v24 = v8;
    uint64_t v14 = FigPictureTileCursorServiceGetCMBaseObject();
    uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v15) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    CFDictionaryRef v20 = *(uint64_t (**)(uint64_t, void, CFAllocatorRef, CFDictionaryRef *))(v16 + 48);
    if (v20)
    {
      uint64_t v13 = v20(v14, *MEMORY[0x1E4F334A8], v7, &dict);
      if (!v13)
      {
        if (CGSizeMakeWithDictionaryRepresentation(dict, &size))
        {
          unint64_t v18 = vcvtad_u64_f64(size.width);
          unint64_t v17 = vcvtad_u64_f64(size.height);
          BOOL v21 = !v18 || v17 == 0;
          if (!v21 && !(v18 >> 16) && v17 < 0x10000)
          {
            if (dict)
            {
              CFRelease(dict);
              CFDictionaryRef dict = 0;
            }
            uint64x2_t v8 = v24;
            if (!a2) {
              goto LABEL_15;
            }
            goto LABEL_14;
          }
        }
        goto LABEL_37;
      }
LABEL_38:
      uint64_t v19 = v13;
      goto LABEL_34;
    }
LABEL_33:
    uint64_t v19 = 4294954514;
    goto LABEL_34;
  }
  unint64_t v17 = 0;
  unint64_t v18 = 0;
  if (a2) {
LABEL_14:
  }
    *a2 = v8;
LABEL_15:
  if (a3)
  {
    *a3 = v18;
    a3[1] = v17;
  }
  uint64_t v19 = 0;
  if (a4)
  {
    *(void *)a4 = v18 * v8.i64[0];
    *(void *)(a4 + 8) = v17 * v8.i64[1];
  }
LABEL_34:
  if (dict) {
    CFRelease(dict);
  }
  return v19;
}

uint64_t CMPhotoJFIFUtilitiesCreateAuxiliaryPropertiesFromStream(const __CFAllocator *a1, uint64_t a2, uint64_t a3, int *a4, CGImageMetadata **a5, void *a6, const __CFDictionary **a7)
{
  v22[1] = *MEMORY[0x1E4F143B8];
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  size_t lengthAtOffsetOut = 0;
  CMBlockBufferRef theBuffer = 0;
  dataPointerOut = 0;
  char v16 = -31;
  v22[0] = "http://ns.adobe.com/xap/1.0/";
  uint64_t MarkersWithSignaturesInJFIFByteStream = CMPhotoFindMarkersWithSignaturesInJFIFByteStream(a2, a3, 1, (uint64_t)&v16, v22, (unint64_t *)&kCMPhotoXMPIdentificationStringSize, &v20);
  if (MarkersWithSignaturesInJFIFByteStream)
  {
    uint64_t v14 = MarkersWithSignaturesInJFIFByteStream;
    CFDataRef v13 = 0;
  }
  else if (v21 < 0)
  {
    CFDataRef v13 = 0;
    uint64_t v14 = 4294950190;
  }
  else
  {
    CFDataRef v13 = 0;
    uint64_t v14 = 4294950305;
    if (!CMCreateContiguousBlockBufferFromStream() && lengthAtOffsetOut == v21)
    {
      CFDataRef v13 = 0;
      uint64_t v14 = 4294950194;
      if (!CMBlockBufferGetDataPointer(theBuffer, 0, &lengthAtOffsetOut, 0, &dataPointerOut)
        && lengthAtOffsetOut == v21)
      {
        CFDataRef v13 = CFDataCreateWithBytesNoCopy(a1, (const UInt8 *)dataPointerOut, lengthAtOffsetOut, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
        if (v13) {
          uint64_t v14 = CMPhotoAuxiliaryImageMetadataCreateFromXMPData(a1, v13, a4, a5, a6, a7);
        }
        else {
          uint64_t v14 = 4294950305;
        }
      }
    }
  }
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  if (v13) {
    CFRelease(v13);
  }
  return v14;
}

uint64_t CMPhotoAuxiliaryImageMetadataCreateFromXMPData(const __CFAllocator *a1, const __CFData *a2, int *a3, CGImageMetadata **a4, void *a5, const __CFDictionary **a6)
{
  CFDataRef v6 = a2;
  CFDictionaryRef v46 = 0;
  CFNumberFormatterRef v47 = 0;
  if (!a2)
  {
    int v31 = 0;
    CFDictionaryRef Mutable = 0;
    CFArrayRef v14 = 0;
    CFStringRef cf = 0;
    CFStringRef v43 = 0;
    uint64_t v35 = 4294950306;
    goto LABEL_78;
  }
  uint64_t v11 = CMPhotoMetadataCreateCFNumberFormatter(a1, &v47);
  if (v11)
  {
    uint64_t v35 = v11;
    CFDataRef v6 = 0;
    int v31 = 0;
    CFDictionaryRef Mutable = 0;
    CFArrayRef v14 = 0;
    CFStringRef cf = 0;
    CFStringRef v43 = 0;
    goto LABEL_78;
  }
  char v12 = CGImageMetadataCreateFromXMPData(v6);
  CFDataRef v6 = v12;
  if (!v12)
  {
    int v31 = 0;
    CFDictionaryRef Mutable = 0;
    CFArrayRef v14 = 0;
LABEL_112:
    CFStringRef cf = 0;
    CFStringRef v43 = 0;
    uint64_t v35 = 4294950194;
    goto LABEL_78;
  }
  CFArrayRef v13 = CGImageMetadataCopyTags(v12);
  CFArrayRef v14 = v13;
  if (!v13)
  {
    int v31 = 0;
    CFDictionaryRef Mutable = 0;
    goto LABEL_112;
  }
  CFTypeRef v39 = a3;
  unint64_t v40 = a5;
  uint64_t v37 = a6;
  CFTypeRef v38 = a4;
  uint64_t Count = CFArrayGetCount(v13);
  CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Count, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable || (CGMutableImageMetadataRef MutableCopy = CGImageMetadataCreateMutableCopy(v6)) == 0)
  {
    int v31 = 0;
    CFStringRef cf = 0;
    CFStringRef v43 = 0;
    uint64_t v35 = 4294950305;
    goto LABEL_78;
  }
  metadata = MutableCopy;
  CFDataRef v41 = v6;
  if (Count < 1)
  {
    CFStringRef cf = 0;
    CFStringRef v43 = 0;
    unsigned int Int32 = 4;
LABEL_50:
    CFDataRef v6 = v41;
    if (v40 && !cf)
    {
      uint64_t v35 = FigSignalErrorAt();
      CFStringRef cf = 0;
LABEL_97:
      int v31 = metadata;
      goto LABEL_78;
    }
    int v31 = metadata;
    int v32 = Int32;
    if (!cf)
    {
LABEL_71:
      if (v37 && CFDictionaryGetCount(Mutable) >= 1)
      {
        *uint64_t v37 = Mutable;
        CFDictionaryRef Mutable = 0;
      }
      if (v38)
      {
        *CFTypeRef v38 = metadata;
        int v31 = 0;
      }
      uint64_t v35 = 0;
      if (v39) {
        *CFTypeRef v39 = v32;
      }
      goto LABEL_78;
    }
    if (CFStringCompare(cf, @"disparity", 0))
    {
      if (CFStringCompare(cf, @"depth", 0))
      {
        if (CFEqual(cf, @"alpha"))
        {
          int v32 = 3;
          goto LABEL_64;
        }
        CFStringRef v33 = cf;
      }
      else
      {
        CFStringRef v33 = v43;
        if (!v43)
        {
          int v32 = 2;
          goto LABEL_64;
        }
      }
      if (CFStringCompare(v33, @"portraiteffectsmatte", 0))
      {
        URNFromAuxiliaryImageType = 0;
        int v32 = 4;
        goto LABEL_65;
      }
      int v32 = 5;
    }
    else
    {
      int v32 = 1;
    }
LABEL_64:
    URNFromAuxiliaryImageType = CMPhotoCreateURNFromAuxiliaryImageType(v32);
LABEL_65:
    if (v40)
    {
      if (!URNFromAuxiliaryImageType) {
        URNFromAuxiliaryImageType = CFRetain(cf);
      }
      *unint64_t v40 = URNFromAuxiliaryImageType;
    }
    else if (URNFromAuxiliaryImageType)
    {
      CFRelease(URNFromAuxiliaryImageType);
    }
    goto LABEL_71;
  }
  CFIndex v19 = 0;
  CFStringRef v43 = 0;
  CFStringRef cf = 0;
  unsigned int Int32 = 4;
  while (1)
  {
    CFArrayRef ValueAtIndex = (CGImageMetadataTag *)CFArrayGetValueAtIndex(v14, v19);
    CFStringRef v21 = CGImageMetadataTagCopyNamespace(ValueAtIndex);
    if (v21) {
      break;
    }
LABEL_46:
    if (Count == ++v19) {
      goto LABEL_50;
    }
  }
  CFStringRef v22 = v21;
  CFStringRef v23 = CGImageMetadataTagCopyName(ValueAtIndex);
  if (!v23)
  {
    CFRelease(v22);
    uint64_t v35 = 4294950194;
    CFDataRef v6 = v41;
    goto LABEL_97;
  }
  CFStringRef v24 = v23;
  if (FigCFEqual())
  {
    uint64_t v25 = CMPhotoCopyMetadataTagValue(ValueAtIndex, v47, 0, &v46);
    if (v25) {
      goto LABEL_98;
    }
    if (FigCFEqual())
    {
      if (!v46) {
        goto LABEL_95;
      }
      CFTypeID v26 = CFGetTypeID(v46);
      if (v26 != CFStringGetTypeID()) {
        goto LABEL_95;
      }
      if (cf) {
        CFRelease(cf);
      }
      if (v46) {
        CFStringRef cf = (const __CFString *)CFRetain(v46);
      }
      else {
        CFStringRef cf = 0;
      }
    }
    else if (FigCFEqual())
    {
      if (!v46) {
        goto LABEL_95;
      }
      CFTypeID v28 = CFGetTypeID(v46);
      if (v28 != CFStringGetTypeID()) {
        goto LABEL_95;
      }
      if (v43) {
        CFRelease(v43);
      }
      if (v46) {
        CFStringRef v43 = (const __CFString *)CFRetain(v46);
      }
      else {
        CFStringRef v43 = 0;
      }
    }
    else
    {
      CFDictionaryAddValue(Mutable, v24, v46);
    }
  }
  else
  {
    if (!FigCFEqual())
    {
      if (!cf)
      {
        if (FigCFEqual()) {
          CFStringRef cf = (const __CFString *)CFRetain(v22);
        }
        else {
          CFStringRef cf = 0;
        }
      }
      goto LABEL_44;
    }
    uint64_t v25 = CMPhotoCopyMetadataTagValue(ValueAtIndex, v47, 0, &v46);
    if (v25)
    {
LABEL_98:
      uint64_t v35 = v25;
LABEL_99:
      CFStringRef v30 = v22;
      CFDataRef v6 = v41;
      int v31 = metadata;
      goto LABEL_105;
    }
    if (FigCFEqual())
    {
      if (!v46 || (CFTypeID v27 = CFGetTypeID(v46), v27 != CFNumberGetTypeID()))
      {
LABEL_95:
        uint64_t v35 = 4294950194;
        goto LABEL_99;
      }
      unsigned int Int32 = CMPhotoCFNumberGetInt32(v46);
    }
  }
  CFStringRef v29 = CGImageMetadataTagCopyPrefix(ValueAtIndex);
  CFStringRef v30 = CFStringCreateWithFormat(v16, 0, @"%@:%@", v29, v24);
  if (!v30)
  {
    uint64_t v35 = 4294950305;
    goto LABEL_102;
  }
  if (CGImageMetadataRemoveTagWithPath(metadata, 0, v30))
  {
    if (v29) {
      CFRelease(v29);
    }
    CFRelease(v30);
LABEL_44:
    CFRelease(v22);
    CFRelease(v24);
    if (v46)
    {
      CFRelease(v46);
      CFDictionaryRef v46 = 0;
    }
    goto LABEL_46;
  }
  uint64_t v35 = FigSignalErrorAt();
LABEL_102:
  CFRelease(v22);
  CFDataRef v6 = v41;
  if (v29) {
    CFRelease(v29);
  }
  int v31 = metadata;
  if (v30) {
LABEL_105:
  }
    CFRelease(v30);
  CFRelease(v24);
LABEL_78:
  if (v46) {
    CFRelease(v46);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v6) {
    CFRelease(v6);
  }
  if (v31) {
    CFRelease(v31);
  }
  if (v47) {
    CFRelease(v47);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v43) {
    CFRelease(v43);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v35;
}

uint64_t CMPhotoCopyMetadataTagValue(CGImageMetadataTag *a1, __CFNumberFormatter *a2, CFStringRef *a3, __CFArray **a4)
{
  int v32 = 0;
  CFArrayRef v8 = (const __CFArray *)CGImageMetadataTagCopyValue(a1);
  CFArrayRef v9 = v8;
  if (v8)
  {
    CFTypeID v10 = CFGetTypeID(v8);
    if (v10 == CFArrayGetTypeID())
    {
      uint64_t Count = CFArrayGetCount(v9);
      CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Count, MEMORY[0x1E4F1D510]);
      if (Mutable)
      {
        CFArrayRef v13 = Mutable;
        if (Count >= 1)
        {
          CFIndex v14 = 0;
          while (1)
          {
            value.location = 0;
            CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(v9, v14);
            uint64_t v16 = CMPhotoCopyMetadataTagValue(ValueAtIndex, a2, 0, &value);
            if (v16) {
              break;
            }
            CFArrayAppendValue(v13, (const void *)value.location);
            if (value.location) {
              CFRelease((CFTypeRef)value.location);
            }
            if (Count == ++v14) {
              goto LABEL_24;
            }
          }
          uint64_t v25 = v16;
          goto LABEL_31;
        }
        goto LABEL_24;
      }
      uint64_t v25 = 4294950305;
LABEL_42:
      CFRelease(v9);
      return v25;
    }
    CFTypeID v17 = CFGetTypeID(v9);
    if (v17 == CFStringGetTypeID())
    {
      if (a2)
      {
        CFIndex Length = CFStringGetLength((CFStringRef)v9);
        value.location = 0;
        value.length = Length;
        CFNumberRef v19 = CFNumberFormatterCreateNumberFromString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, (CFStringRef)v9, &value, 0);
        CFArrayRef v13 = v19;
        if ((value.location || value.length != Length) && v19)
        {
          CFRelease(v19);
          CFArrayRef v13 = 0;
        }
      }
      else
      {
        CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
        __endptr = 0;
        value.location = 0;
        double v29 = strtod(CStringPtrAndBufferToFree, (char **)&value);
        uint64_t v28 = strtol(CStringPtrAndBufferToFree, &__endptr, 0);
        CFStringRef v21 = (char *)&CStringPtrAndBufferToFree[strlen(CStringPtrAndBufferToFree)];
        if (v21 == (char *)value.location || (CFArrayRef v13 = 0, v21 == __endptr))
        {
          if ((unint64_t)__endptr >= value.location)
          {
            CFStringRef v22 = (double *)&v28;
            CFNumberType v23 = kCFNumberLongType;
          }
          else
          {
            CFStringRef v22 = &v29;
            CFNumberType v23 = kCFNumberDoubleType;
          }
          CFArrayRef v13 = CFNumberCreate(0, v23, v22);
        }
      }
      if (v13) {
        goto LABEL_24;
      }
      if (CFStringCompare((CFStringRef)v9, @"True", 1uLL))
      {
        if (CFStringCompare((CFStringRef)v9, @"False", 1uLL))
        {
          CFArrayRef v13 = v9;
          CFArrayRef v9 = 0;
          goto LABEL_24;
        }
        CFTypeID v26 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
      }
      else
      {
        CFTypeID v26 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
      }
      if (*v26)
      {
        CFArrayRef v13 = (__CFArray *)CFRetain(*v26);
        if (v13)
        {
LABEL_24:
          if (a4)
          {
            *a4 = v13;
            CFArrayRef v13 = 0;
          }
          if (a3)
          {
            CFStringRef v24 = CGImageMetadataTagCopyName(a1);
            if (v24)
            {
              uint64_t v25 = 0;
              *a3 = v24;
            }
            else
            {
              uint64_t v25 = 4294950194;
            }
          }
          else
          {
            uint64_t v25 = 0;
          }
          free(v32);
          if (!v13)
          {
LABEL_32:
            if (!v9) {
              return v25;
            }
            goto LABEL_42;
          }
LABEL_31:
          CFRelease(v13);
          goto LABEL_32;
        }
      }
    }
  }
  free(v32);
  uint64_t v25 = 4294950194;
  if (v9) {
    goto LABEL_42;
  }
  return v25;
}

uint64_t CMPhotoMetadataCreateCFNumberFormatter(const __CFAllocator *a1, CFNumberFormatterRef *a2)
{
  if (!a2) {
    return 0;
  }
  CFStringRef CanonicalLocaleIdentifierFromString = CFLocaleCreateCanonicalLocaleIdentifierFromString(a1, @"en_US");
  if (!CanonicalLocaleIdentifierFromString) {
    return 4294950305;
  }
  CFStringRef v5 = CanonicalLocaleIdentifierFromString;
  CFLocaleRef v6 = CFLocaleCreate(a1, CanonicalLocaleIdentifierFromString);
  if (v6)
  {
    CFLocaleRef v7 = v6;
    CFNumberFormatterRef v8 = CFNumberFormatterCreate(a1, v6, kCFNumberFormatterNoStyle);
    if (v8)
    {
      uint64_t v9 = 0;
      *a2 = v8;
    }
    else
    {
      uint64_t v9 = 4294950305;
    }
    CFRelease(v7);
  }
  else
  {
    uint64_t v9 = 4294950305;
  }
  CFRelease(v5);
  return v9;
}

uint64_t CMPhotoFindMarkersWithSignaturesInJFIFByteStream(uint64_t a1, uint64_t a2, int a3, uint64_t a4, void *a5, unint64_t *a6, void *a7)
{
  if (!a7) {
    return 4294950306;
  }
  if (a3 >= 1) {
    bzero(a7, 16 * a3);
  }
  uint64_t v18 = 0;
  CFNumberRef v19 = &v18;
  uint64_t v20 = 0x2000000000;
  char v21 = 0;
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = *(void *)"";
  v17[2] = __CMPhotoFindMarkersWithSignaturesInJFIFByteStream_block_invoke;
  v17[3] = &unk_1E5E2F940;
  v17[4] = &v18;
  v17[5] = a7;
  uint64_t MarkersWithSignaturesInJFIFByteStreamWithHandler = CMPhotoFindMarkersWithSignaturesInJFIFByteStreamWithHandler(a1, a2, a3, a4, a5, a6, (uint64_t)v17);
  if (MarkersWithSignaturesInJFIFByteStreamWithHandler)
  {
    uint64_t v15 = MarkersWithSignaturesInJFIFByteStreamWithHandler;
  }
  else if (*((unsigned char *)v19 + 24))
  {
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = 4294950303;
  }
  _Block_object_dispose(&v18, 8);
  return v15;
}

uint64_t CMPhotoGetExifLocationFromJFIFByteStream(uint64_t a1, uint64_t a2, unsigned char *a3, void *a4, void *a5, void *a6)
{
  unint64_t v23 = 6;
  CFStringRef v24 = "Exif";
  uint64_t v19 = 0;
  uint64_t v20 = &v19;
  uint64_t v21 = 0x2000000000;
  char v22 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x2800000000;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  char v13 = -31;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = *(void *)"";
  v12[2] = __CMPhotoGetExifLocationFromJFIFByteStream_block_invoke;
  v12[3] = &unk_1E5E2F9E0;
  v12[4] = &v14;
  v12[5] = &v19;
  uint64_t MarkersWithSignaturesInJFIFByteStreamWithHandler = CMPhotoFindMarkersWithSignaturesInJFIFByteStreamWithHandler(a1, a2, 1, (uint64_t)&v13, &v24, &v23, (uint64_t)v12);
  if (a3) {
    *a3 = *((unsigned char *)v20 + 24);
  }
  if (a4) {
    *a4 = v15[3];
  }
  if (a5) {
    *a5 = v23 + v15[3];
  }
  if (a6) {
    *a6 = v15[4];
  }
  _Block_object_dispose(&v14, 8);
  _Block_object_dispose(&v19, 8);
  return MarkersWithSignaturesInJFIFByteStreamWithHandler;
}

uint64_t _parseICCProfileIfNeeded(uint64_t a1)
{
  CFTypeRef cf = 0;
  CFTypeRef v9 = 0;
  uint64_t v2 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 32));
  if (v2)
  {
    uint64_t v4 = v2;
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 416)) {
    goto LABEL_5;
  }
  *(unsigned char *)(a1 + 416) = 1;
  uint64_t v3 = CMPhotoCopyICCProfileFromJFIFByteStream(*(void *)a1, *(void *)(a1 + 24), 0, (unsigned char *)(a1 + 417), 0, &v9);
  if (v3) {
    goto LABEL_20;
  }
  *(void *)(a1 + 424) = v9;
  CFTypeRef v9 = 0;
  if (*(unsigned char *)(a1 + 417))
  {
LABEL_5:
    uint64_t v4 = 0;
    goto LABEL_6;
  }
  if (!*(unsigned char *)(a1 + 240))
  {
    uint64_t v3 = _parseExifIfNeeded(a1, 1);
    if (v3) {
      goto LABEL_20;
    }
  }
  if (!*(unsigned char *)(a1 + 268)) {
    goto LABEL_5;
  }
  CFIndex v7 = 0;
  uint64_t v3 = CMPhotoByteStreamReadAndCreateData(*(void *)(a1 + 24), *(void *)(a1 + 256), *(void *)(a1 + 248), (CFDataRef *)&cf, &v7);
  if (v3)
  {
LABEL_20:
    uint64_t v4 = v3;
  }
  else
  {
    if (v7 == *(void *)(a1 + 256))
    {
      if (!CGImageCreateColorSpaceFromExifOrData())
      {
        CFDataRef v6 = CGColorSpaceCopyICCData(0);
        *(void *)(a1 + 424) = v6;
        *(unsigned char *)(a1 + 417) = v6 != 0;
      }
      goto LABEL_5;
    }
    uint64_t v4 = 4294950194;
  }
LABEL_6:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 32));
  if (cf) {
    CFRelease(cf);
  }
LABEL_8:
  if (v9) {
    CFRelease(v9);
  }
  return v4;
}

uint64_t _parseExifIfNeeded(uint64_t a1, int a2)
{
  CFTypeID v27 = 0;
  if (!a2)
  {
    uint64_t v4 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 32));
    if (v4)
    {
      uint64_t v5 = v4;
      goto LABEL_7;
    }
  }
  if (*(unsigned char *)(a1 + 240)) {
    goto LABEL_4;
  }
  *(unsigned char *)(a1 + 240) = 1;
  unsigned __int8 v26 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v23 = 0;
  *(_DWORD *)(a1 + 264) = 1;
  uint64_t ExifLocationFromJFIFByteStream = CMPhotoGetExifLocationFromJFIFByteStream(*(void *)(a1 + 24), 0, &v26, &v25, &v24, &v23);
  if (ExifLocationFromJFIFByteStream) {
    goto LABEL_28;
  }
  int v8 = v26;
  *(unsigned char *)(a1 + 241) = v26;
  if (!v8)
  {
LABEL_4:
    uint64_t v5 = 0;
    goto LABEL_5;
  }
  uint64_t v22 = 0;
  BOOL v21 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v9 = v25;
  uint64_t v10 = v23;
  *(void *)(a1 + 248) = v25;
  *(void *)(a1 + 256) = v10;
  uint64_t v11 = *(void *)(a1 + 24);
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, OpaqueCMBlockBuffer **, uint64_t *))(v13 + 32);
  if (!v14)
  {
    uint64_t v5 = 4294954514;
    goto LABEL_5;
  }
  uint64_t ExifLocationFromJFIFByteStream = v14(v11, v10, v9, &v27, &v22);
  if (ExifLocationFromJFIFByteStream) {
    goto LABEL_28;
  }
  if (v22 == v23)
  {
    if (v24 - v25 >= 0)
    {
      uint64_t v15 = (_DWORD *)(a1 + 264);
      uint64_t ExifLocationFromJFIFByteStream = CMPhotoParseExifFromTIFF(v27, v24 - v25, v22 - (v24 - v25), 0, (int *)(a1 + 264), &v21, (unint64_t)&v20, (unint64_t)&v19, (char *)(a1 + 268));
      if (!ExifLocationFromJFIFByteStream)
      {
        if ((*v15 - 9) <= 0xFFFFFFF7) {
          _DWORD *v15 = 1;
        }
        BOOL v16 = v21;
        uint64_t v17 = v19;
        if (v21 && !v19
          || (*(unsigned char *)(a1 + 272) = v21, v16)
          && (uint64_t v18 = v20,
              *(void *)(a1 + 304) = v20,
              *(void *)(a1 + 312) = v17,
              CMPhotoGetImageInformationFromJFIFByteStream(*(void *)(a1 + 24), v25 + v18, (void *)(a1 + 280), (int *)(a1 + 296), 0, 0, (_DWORD *)(a1 + 320), 0)))
        {
          *(unsigned char *)(a1 + 272) = 0;
        }
        goto LABEL_4;
      }
LABEL_28:
      uint64_t v5 = ExifLocationFromJFIFByteStream;
      goto LABEL_5;
    }
    uint64_t v5 = 4294950190;
  }
  else
  {
    uint64_t v5 = 4294950194;
  }
LABEL_5:
  if (!a2) {
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 32));
  }
LABEL_7:
  if (v27) {
    CFRelease(v27);
  }
  return v5;
}

uint64_t CMPhotoCopyICCProfileFromJFIFByteStream(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4, _OWORD *a5, void *a6)
{
  return _copyChunkedHeadersFromJFIFByteStream(a1, a2, a3, 226, (uint64_t)"ICC_PROFILE", 0xCuLL, 1, a4, a5, a6);
}

uint64_t _copyChunkedHeadersFromJFIFByteStream(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, unint64_t a6, uint64_t a7, unsigned char *a8, _OWORD *a9, void *a10)
{
  char v37 = a4;
  unint64_t v35 = a6;
  uint64_t v36 = a5;
  uint64_t v30 = 0;
  int v31 = &v30;
  uint64_t v32 = 0x2800000000;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v26 = 0;
  CFTypeID v27 = &v26;
  uint64_t v28 = 0x2000000000;
  uint64_t v29 = 0;
  v25[0] = 0;
  v25[1] = v25;
  v25[2] = 0x2000000000;
  v25[3] = 0;
  v23[0] = 0;
  v23[1] = v23;
  v23[2] = 0x2000000000;
  int v24 = 0;
  v21[0] = 0;
  v21[1] = v21;
  v21[2] = 0x2000000000;
  int v22 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = &v17;
  uint64_t v19 = 0x2000000000;
  char v20 = 0;
  if (!a9 && !a8 && !a10 || (unint64_t)(a7 - 3) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t MarkersWithSignaturesInJFIFByteStreamWithHandler = FigSignalErrorAt();
    goto LABEL_16;
  }
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = *(void *)"";
  v16[2] = ___copyChunkedHeadersFromJFIFByteStream_block_invoke;
  v16[3] = &unk_1E5E2FA80;
  v16[10] = a6;
  v16[11] = a7;
  v16[4] = v23;
  v16[5] = v21;
  v16[6] = &v30;
  v16[7] = &v26;
  v16[12] = a2;
  v16[13] = a1;
  v16[8] = v25;
  v16[9] = &v17;
  uint64_t MarkersWithSignaturesInJFIFByteStreamWithHandler = CMPhotoFindMarkersWithSignaturesInJFIFByteStreamWithHandler(a2, a3, 1, (uint64_t)&v37, &v36, &v35, (uint64_t)v16);
  if (MarkersWithSignaturesInJFIFByteStreamWithHandler)
  {
LABEL_16:
    uint64_t v12 = MarkersWithSignaturesInJFIFByteStreamWithHandler;
    goto LABEL_12;
  }
  if (a8) {
    *a8 = *((unsigned char *)v18 + 24);
  }
  if (a9) {
    *a9 = *(_OWORD *)(v31 + 3);
  }
  uint64_t v12 = 0;
  if (a10)
  {
    uint64_t v13 = v27;
    *a10 = v27[3];
    v13[3] = 0;
  }
LABEL_12:
  uint64_t v14 = (const void *)v27[3];
  if (v14) {
    CFRelease(v14);
  }
  _Block_object_dispose(&v17, 8);
  _Block_object_dispose(v21, 8);
  _Block_object_dispose(v23, 8);
  _Block_object_dispose(v25, 8);
  _Block_object_dispose(&v26, 8);
  _Block_object_dispose(&v30, 8);
  return v12;
}

uint64_t CMPhotoGetImageInformationFromJFIFByteStream(uint64_t a1, uint64_t a2, void *a3, int *a4, BOOL *a5, unsigned char *a6, _DWORD *a7, void *a8)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  CFDataRef v68 = 0;
  uint64_t v64 = 0;
  CFDataRef v65 = &v64;
  uint64_t v66 = 0x2000000000;
  char v67 = 0;
  v62[0] = 0;
  v62[1] = v62;
  v62[2] = 0x2000000000;
  char v63 = 0;
  uint64_t v58 = 0;
  CFDictionaryRef v59 = &v58;
  uint64_t v60 = 0x2000000000;
  BOOL v61 = a8 != 0;
  char v57 = -30;
  int v56 = -1010646592;
  memset(v74, 0, sizeof(v74));
  BOOL v75 = "urn:iso:std:iso:ts:21496:-1";
  memset(v72, 0, sizeof(v72));
  uint64_t v73 = 28;
  uint64_t v51 = 0;
  unint64_t v52 = &v51;
  uint64_t v53 = 0x2800000000;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  uint64_t v46 = 0;
  CFNumberFormatterRef v47 = &v46;
  uint64_t v48 = 0x2800000000;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  v45[0] = MEMORY[0x1E4F143A8];
  v45[1] = *(void *)"";
  v45[2] = __CMPhotoGetImageInformationFromJFIFByteStream_block_invoke;
  v45[3] = &unk_1E5E2F990;
  v45[4] = v62;
  v45[5] = &v64;
  v45[6] = &v51;
  v45[7] = &v58;
  v45[8] = &v46;
  uint64_t MarkersWithSignaturesInJFIFByteStreamWithHandler = CMPhotoFindMarkersWithSignaturesInJFIFByteStreamWithHandler(a1, a2, 5, (uint64_t)&v56, v74, (unint64_t *)v72, (uint64_t)v45);
  if (MarkersWithSignaturesInJFIFByteStreamWithHandler) {
    goto LABEL_72;
  }
  if ((unint64_t)v52[4] < 9)
  {
    CFBooleanRef v44 = a6;
    goto LABEL_71;
  }
  uint64_t v16 = v52[3];
  uint64_t v71 = 0;
  memset(v70, 0, 5);
  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v17) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _DWORD *, uint64_t *))(v18 + 8);
  if (!v19) {
    goto LABEL_27;
  }
  CFBooleanRef v44 = a6;
  uint64_t MarkersWithSignaturesInJFIFByteStreamWithHandler = v19(a1, 5, v16, v70, &v71);
  if (MarkersWithSignaturesInJFIFByteStreamWithHandler) {
    goto LABEL_72;
  }
  if (v71 != 5) {
    goto LABEL_71;
  }
  int v20 = *(unsigned __int16 *)((char *)v70 + 3);
  *(_WORD *)((char *)v70 + 3) = __rev16(*(unsigned __int16 *)((char *)v70 + 3));
  int v21 = *(unsigned __int16 *)((char *)v70 + 1);
  *(_WORD *)((char *)v70 + 1) = __rev16(*(unsigned __int16 *)((char *)v70 + 1));
  if (!v21 || !v20) {
    goto LABEL_71;
  }
  unsigned __int8 v69 = 0;
  uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v22) {
    uint64_t v23 = v22;
  }
  else {
    uint64_t v23 = 0;
  }
  int v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(v23 + 8);
  if (!v24)
  {
LABEL_27:
    uint64_t v31 = 4294954514;
    goto LABEL_28;
  }
  uint64_t MarkersWithSignaturesInJFIFByteStreamWithHandler = v24(a1, 1, v16 + 5, &v69, &v71);
  if (MarkersWithSignaturesInJFIFByteStreamWithHandler)
  {
LABEL_72:
    uint64_t v31 = MarkersWithSignaturesInJFIFByteStreamWithHandler;
    goto LABEL_28;
  }
  if (v71 != 1) {
    goto LABEL_71;
  }
  uint64_t v25 = v69;
  if (v69 - 5 < 0xFFFFFFFC) {
    goto LABEL_71;
  }
  int v77 = 0;
  CFIndex v76 = 0;
  uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v26) {
    uint64_t v27 = v26;
  }
  else {
    uint64_t v27 = 0;
  }
  uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFIndex *, uint64_t *))(v27 + 8);
  if (!v28) {
    goto LABEL_27;
  }
  uint64_t MarkersWithSignaturesInJFIFByteStreamWithHandler = v28(a1, 3 * v25, v16 + 6, &v76, &v71);
  if (MarkersWithSignaturesInJFIFByteStreamWithHandler) {
    goto LABEL_72;
  }
  if (v71 == 3 * v69)
  {
    if (v69)
    {
      if (v69 == 1)
      {
        BOOL v29 = 0;
        int v30 = 6;
LABEL_52:
        if (a3)
        {
          uint64_t v38 = *(unsigned __int16 *)((char *)v70 + 1);
          *a3 = *(unsigned __int16 *)((char *)v70 + 3);
          a3[1] = v38;
        }
        if (a4) {
          *a4 = v30;
        }
        CFTypeRef v39 = a6;
        if (a5) {
          *a5 = v29;
        }
        if (a7) {
          *a7 = LOBYTE(v70[0]);
        }
        goto LABEL_60;
      }
      uint64_t v33 = v69 - 1;
      uint64_t v34 = (unsigned __int8 *)&v76 + 4;
      while (1)
      {
        int v35 = *v34;
        v34 += 3;
        if (v35 != 17) {
          break;
        }
        if (!--v33) {
          goto LABEL_32;
        }
      }
    }
    else
    {
LABEL_32:
      if (BYTE1(v76) <= 0x20u)
      {
        if (BYTE1(v76) == 17)
        {
          BOOL v29 = v76 == 82 && BYTE3(v76) == 71 && BYTE6(v76) == 66;
          int v30 = 1;
          goto LABEL_52;
        }
        if (BYTE1(v76) == 18)
        {
          BOOL v29 = 0;
          int v30 = 2;
          goto LABEL_52;
        }
      }
      else
      {
        switch(BYTE1(v76))
        {
          case '!':
            BOOL v29 = 0;
            int v30 = 3;
            goto LABEL_52;
          case '""':
            BOOL v29 = 0;
            int v30 = 5;
            goto LABEL_52;
          case 'A':
            BOOL v29 = 0;
            int v30 = 4;
            goto LABEL_52;
        }
      }
    }
  }
LABEL_71:
  uint64_t MarkersWithSignaturesInJFIFByteStreamWithHandler = FigSignalErrorAt();
  CFTypeRef v39 = v44;
  if (MarkersWithSignaturesInJFIFByteStreamWithHandler) {
    goto LABEL_72;
  }
LABEL_60:
  if (v39) {
    *CFTypeRef v39 = *((unsigned char *)v65 + 24);
  }
  if (!a8 || !*((unsigned char *)v59 + 24) || (unint64_t v40 = v47[4], v41 = v40 - 28, v40 <= 0x1C))
  {
    uint64_t v31 = 0;
    goto LABEL_28;
  }
  CFIndex v76 = 0;
  uint64_t v42 = CMPhotoByteStreamReadAndCreateData(a1, v40 - 28, v47[3] + 28, &v68, &v76);
  if (v42)
  {
    uint64_t v31 = v42;
    CFDataRef v43 = v68;
  }
  else
  {
    CFDataRef v43 = v68;
    if (v76 == v41)
    {
      uint64_t v31 = 0;
      *a8 = v68;
      CFDataRef v68 = 0;
      goto LABEL_28;
    }
    uint64_t v31 = 4294950194;
  }
  if (v43) {
    CFRelease(v43);
  }
LABEL_28:
  _Block_object_dispose(&v46, 8);
  _Block_object_dispose(&v51, 8);
  _Block_object_dispose(&v58, 8);
  _Block_object_dispose(v62, 8);
  _Block_object_dispose(&v64, 8);
  return v31;
}

uint64_t CMPhotoFindMarkersWithSignaturesInJFIFByteStreamWithHandler(uint64_t a1, uint64_t a2, int a3, uint64_t a4, void *a5, unint64_t *a6, uint64_t a7)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v37 = 0;
  uint64_t result = 4294950306;
  if (a3 < 1 || !a4) {
    return result;
  }
  if (a5)
  {
    if (!a6) {
      return result;
    }
    uint64_t v12 = a3;
    uint64_t v13 = a6;
    uint64_t v14 = a5;
    do
    {
      unint64_t v16 = *v13++;
      unint64_t v15 = v16;
      if (v16 > 0xFF || v15 && !*v14) {
        return 4294950306;
      }
      ++v14;
      --v12;
    }
    while (v12);
  }
  uint64_t v17 = a3;
  while (1)
  {
LABEL_11:
    uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v18) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0;
    }
    int v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(v19 + 8);
    if (!v20) {
      return 4294950194;
    }
    int v21 = v20(a1, 4, a2, &__s1, &v37);
    uint64_t result = 4294950194;
    if (v21 || v37 != 4 || __s1 != 255) {
      return result;
    }
    int v22 = v39;
    switch(v39)
    {
      case 0xD8u:
        a2 += 2;
        break;
      case 0xFFu:
        ++a2;
        break;
      case 0xDAu:
        return 0;
      default:
        uint64_t v23 = 0;
        unint64_t v24 = bswap32(v40) >> 16;
        uint64_t v25 = a2 + 4;
        uint64_t v34 = a2;
        while (1)
        {
          if (a6)
          {
            size_t v26 = a6[v23];
            if (v22 == *(unsigned __int8 *)(a4 + v23) && v26 + 2 <= v24)
            {
              if (!v26) {
                goto LABEL_45;
              }
              uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v28) {
                uint64_t v29 = v28;
              }
              else {
                uint64_t v29 = 0;
              }
              uint64_t v31 = *(uint64_t (**)(uint64_t, size_t, uint64_t, unsigned __int8 *, uint64_t *))(v29 + 8);
              if (!v31) {
                return 4294950194;
              }
              int v32 = v31(a1, v26, v25, &__s1, &v37);
              uint64_t result = 4294950194;
              if (v32 || v37 != v26) {
                return result;
              }
              if (!memcmp(&__s1, (const void *)a5[v23], v26))
              {
                uint64_t v33 = *(uint64_t (**)(void))(a7 + 16);
LABEL_47:
                uint64_t result = v33();
                if (result != -17105)
                {
                  if (!result)
                  {
LABEL_42:
                    a2 = v34 + v24 + 2;
                    goto LABEL_11;
                  }
                  return result;
                }
                return 0;
              }
            }
          }
          else if (v22 == *(unsigned __int8 *)(a4 + v23) && v24 >= 2)
          {
LABEL_45:
            uint64_t v33 = *(uint64_t (**)(void))(a7 + 16);
            goto LABEL_47;
          }
          if (v17 == ++v23) {
            goto LABEL_42;
          }
        }
    }
  }
}

uint64_t __CMPhotoGetImageInformationFromJFIFByteStream_block_invoke(void *a1, uint64_t a2, int a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a3 > 3)
  {
    *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = 1;
    uint64_t v10 = *(void *)(a1[8] + 8);
    *(void *)(v10 + 24) = a7;
    *(void *)(v10 + 32) = a8;
    uint64_t v9 = a1[4];
  }
  else
  {
    *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 1;
    *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = a4;
    uint64_t v8 = *(void *)(a1[6] + 8);
    *(void *)(v8 + 24) = a7;
    *(void *)(v8 + 32) = a8;
    uint64_t v9 = a1[7];
  }
  if (*(unsigned char *)(*(void *)(v9 + 8) + 24)) {
    return 4294950191;
  }
  else {
    return 0;
  }
}

uint64_t CMPhotoParseExifFromTIFF(OpaqueCMBlockBuffer *a1, size_t a2, unint64_t a3, BOOL *a4, int *a5, BOOL *a6, unint64_t a7, unint64_t a8, char *a9)
{
  uint64_t v9 = (void *)a8;
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  int v11 = ((unint64_t)a4 | (unint64_t)a5) != 0;
  BOOL v12 = ((unint64_t)a6 | a7 | a8) != 0;
  if (a1)
  {
    size_t lengthAtOffsetOut = 0;
    dataPointerOut[0] = 0;
    DataCFIndex Length = a3 + a2;
    if (a3 + a2 >= CMBlockBufferGetDataLength(a1)) {
      DataCFIndex Length = CMBlockBufferGetDataLength(a1);
    }
    if (!DataLength)
    {
      uint64_t v31 = 4294950194;
      goto LABEL_89;
    }
    BOOL v16 = DataLength >= a2;
    size_t v17 = DataLength - a2;
    if (v16)
    {
      CFDictionaryRef v59 = v9;
      if (v17)
      {
        uint64_t DataPointer = CMBlockBufferGetDataPointer(a1, a2, &lengthAtOffsetOut, 0, dataPointerOut);
        if (DataPointer)
        {
          uint64_t v31 = DataPointer;
          goto LABEL_89;
        }
        if (lengthAtOffsetOut != v17)
        {
          int v21 = (char *)malloc_type_malloc(v17, 0x7CDB58DBuLL);
          if (!v21)
          {
            uint64_t v31 = 4294950305;
            goto LABEL_89;
          }
          int v20 = v21;
          dataPointerOut[0] = v21;
          size_t v22 = v17;
          size_t v23 = a2;
          while (1)
          {
            uint64_t v64 = 0;
            uint64_t v24 = CMBlockBufferGetDataPointer(a1, v23, &lengthAtOffsetOut, 0, &v64);
            if (v24) {
              break;
            }
            if (v22 >= lengthAtOffsetOut) {
              size_t v25 = lengthAtOffsetOut;
            }
            else {
              size_t v25 = v22;
            }
            size_t lengthAtOffsetOut = v25;
            memcpy(dataPointerOut[0], v64, v25);
            dataPointerOut[0] += lengthAtOffsetOut;
            v23 += lengthAtOffsetOut;
            v22 -= lengthAtOffsetOut;
            if (!v22)
            {
              uint64_t v19 = v20;
              goto LABEL_20;
            }
          }
          uint64_t v31 = v24;
          free(v20);
          int v20 = 0;
          goto LABEL_48;
        }
        uint64_t v19 = dataPointerOut[0];
      }
      else
      {
        uint64_t v19 = 0;
      }
      int v20 = 0;
LABEL_20:
      if (v17 != a3)
      {
        BOOL v42 = 0;
        uint64_t v30 = 0;
        uint64_t v43 = 0;
        BOOL v39 = 0;
        char v44 = 0;
        int v35 = 1;
        uint64_t v31 = 4294950194;
        goto LABEL_49;
      }
      if (a3 >= 8)
      {
        int v26 = *v19;
        if (v26 == 73)
        {
          if (v19[1] == 73)
          {
            int v29 = 0;
            unsigned int v28 = *((unsigned __int16 *)v19 + 1);
            int v27 = 1;
LABEL_28:
            if (v28 == 42)
            {
              uint64_t v30 = 0;
              uint64_t v31 = 0;
              unsigned int v32 = *((_DWORD *)v19 + 1);
              unsigned int v33 = bswap32(v32);
              if (v27) {
                uint64_t v34 = v32;
              }
              else {
                uint64_t v34 = v33;
              }
              int v35 = 1;
              if v34 < 8 || (v34)
              {
                BOOL v42 = 0;
                uint64_t v43 = 0;
                BOOL v39 = 0;
LABEL_96:
                char v44 = 0;
                goto LABEL_49;
              }
              if (v34 + 2 > a3)
              {
                uint64_t v31 = 0;
                BOOL v42 = 0;
                uint64_t v30 = 0;
                uint64_t v43 = 0;
                BOOL v39 = 0;
              }
              else
              {
                unsigned int v36 = bswap32(*(unsigned __int16 *)&v19[v34]) >> 16;
                if (v27) {
                  unsigned __int16 v37 = *(_WORD *)&v19[v34];
                }
                else {
                  unsigned __int16 v37 = v36;
                }
                if (((a9 == 0) & ~v11) != 0)
                {
                  BOOL v39 = 0;
                  BOOL v40 = 0;
                  uint64_t v41 = 0;
                  int v38 = v29;
                  if (!v12)
                  {
LABEL_46:
                    BOOL v42 = 0;
                    uint64_t v30 = 0;
                    uint64_t v43 = 0;
                    goto LABEL_79;
                  }
                }
                else
                {
                  *(_OWORD *)dataPointerOut = xmmword_1AB9E25C8;
                  long long v67 = unk_1AB9E25D8;
                  int v38 = v29;
                  _readExifDirectory((unint64_t)&v19[v34], a3 - v34, v29, (uint64_t)dataPointerOut, 2, 0);
                  BOOL v39 = BYTE4(dataPointerOut[1]) != 0;
                  if (BYTE4(dataPointerOut[1])) {
                    int v35 = LOWORD(dataPointerOut[1]);
                  }
                  else {
                    int v35 = 1;
                  }
                  BOOL v40 = BYTE12(v67) != 0;
                  if (BYTE12(v67)) {
                    uint64_t v41 = DWORD2(v67);
                  }
                  else {
                    uint64_t v41 = 0;
                  }
                  if (!v12) {
                    goto LABEL_46;
                  }
                }
                *(_OWORD *)dataPointerOut = xmmword_1AB9E25E8;
                long long v67 = unk_1AB9E25F8;
                if (v34 + 12 * (unint64_t)v37 + 6 <= a3)
                {
                  LODWORD(v46) = *(_DWORD *)&v19[12 * v37 + 2 + v34];
                  unsigned int v47 = bswap32(v46);
                  uint64_t v46 = v27 ? v46 : v47;
                  if (v46 >= 8 && (v46 & 1) == 0)
                  {
                    LODWORD(lengthAtOffsetOut) = 0;
                    int v49 = v35;
                    BOOL v50 = v39;
                    uint64_t v51 = v41;
                    BOOL v52 = v40;
                    _readExifDirectory((unint64_t)&v19[v46], a3 - v46, v38, (uint64_t)dataPointerOut, 2, (int *)&lengthAtOffsetOut);
                    BOOL v40 = v52;
                    uint64_t v41 = v51;
                    BOOL v39 = v50;
                    int v35 = v49;
                    uint64_t v30 = LODWORD(dataPointerOut[1]);
                    uint64_t v43 = DWORD2(v67);
                    BOOL v42 = lengthAtOffsetOut == 2
                       && DWORD2(v67) + (unint64_t)LODWORD(dataPointerOut[1]) <= a3;
LABEL_79:
                    uint64_t v31 = 0;
                    if (a9 && v40)
                    {
                      *(_OWORD *)dataPointerOut = xmmword_1AB9E2650;
                      unint64_t v54 = (unint64_t)&v19[v41];
                      uint64_t v55 = a3 - v41;
                      int v56 = v35;
                      BOOL v57 = v39;
                      _readExifDirectory(v54, v55, v38, (uint64_t)dataPointerOut, 1, 0);
                      BOOL v39 = v57;
                      int v35 = v56;
                      uint64_t v31 = 0;
                      if (BYTE4(dataPointerOut[1])) {
                        BOOL v58 = LOWORD(dataPointerOut[1]) == 1;
                      }
                      else {
                        BOOL v58 = 1;
                      }
                      char v44 = !v58;
                      goto LABEL_49;
                    }
                    goto LABEL_96;
                  }
                }
                uint64_t v31 = 0;
                BOOL v42 = 0;
                uint64_t v30 = 0;
                uint64_t v43 = 0;
              }
              char v44 = 0;
              goto LABEL_49;
            }
          }
        }
        else if (v26 == 77 && v19[1] == 77)
        {
          int v27 = 0;
          unsigned int v28 = bswap32(*((unsigned __int16 *)v19 + 1)) >> 16;
          int v29 = 1;
          goto LABEL_28;
        }
      }
      uint64_t v31 = 0;
LABEL_48:
      BOOL v42 = 0;
      uint64_t v30 = 0;
      uint64_t v43 = 0;
      BOOL v39 = 0;
      char v44 = 0;
      int v35 = 1;
LABEL_49:
      uint64_t v9 = v59;
      goto LABEL_50;
    }
  }
  uint64_t v31 = 4294950306;
LABEL_89:
  int v20 = 0;
  BOOL v42 = 0;
  uint64_t v30 = 0;
  uint64_t v43 = 0;
  BOOL v39 = 0;
  char v44 = 0;
  int v35 = 1;
LABEL_50:
  if (a4) {
    *a4 = v39;
  }
  if (a5) {
    *a5 = v35;
  }
  if (a6) {
    *a6 = v42;
  }
  if (a7) {
    *(void *)a7 = v30 + a2;
  }
  if (v9) {
    void *v9 = v43;
  }
  if (a9) {
    *a9 = v44;
  }
  free(v20);
  return v31;
}

unint64_t _readExifDirectory(unint64_t result, uint64_t a2, int a3, uint64_t a4, int a5, int *a6)
{
  if (a2 >= 2)
  {
    unsigned int v6 = *(unsigned __int16 *)result;
    unsigned int v7 = bswap32(v6) >> 16;
    if (a3) {
      LOWORD(v6) = v7;
    }
    if (12 * (unint64_t)(unsigned __int16)v6 <= a2 - 2)
    {
      if ((_WORD)v6) {
        BOOL v8 = a5 < 1;
      }
      else {
        BOOL v8 = 1;
      }
      if (v8)
      {
        int v10 = 0;
      }
      else
      {
        int v9 = 0;
        int v10 = 0;
        int v11 = (unsigned __int16 *)(result + 2);
        do
        {
          unsigned int v12 = bswap32(*v11) >> 16;
          if (!a3) {
            LOWORD(v12) = *v11;
          }
          unsigned int v13 = bswap32(v11[1]) >> 16;
          if (!a3) {
            LOWORD(v13) = v11[1];
          }
          unsigned int v14 = *((_DWORD *)v11 + 1);
          LODWORD(result) = bswap32(v14);
          if (a3) {
            uint64_t result = result;
          }
          else {
            uint64_t result = v14;
          }
          uint64_t v15 = a5;
          uint64_t v16 = a4 + 8;
          while (*(unsigned __int16 *)(v16 - 8) != (unsigned __int16)v12
               || *(unsigned __int16 *)(v16 - 6) != (unsigned __int16)v13
               || result != *(_DWORD *)(v16 - 4)
               || *(unsigned char *)(v16 + 4))
          {
            v16 += 16;
            if (!--v15) {
              goto LABEL_27;
            }
          }
          if ((unsigned __int16)v13 == 3)
          {
            unsigned int v17 = v11[4];
            unsigned int v18 = bswap32(v17) >> 16;
            if (a3) {
              LOWORD(v17) = v18;
            }
            *(_WORD *)uint64_t v16 = v17;
          }
          else
          {
            unsigned int v19 = *((_DWORD *)v11 + 2);
            unsigned int v20 = bswap32(v19);
            if (a3) {
              unsigned int v19 = v20;
            }
            *(_DWORD *)uint64_t v16 = v19;
          }
          *(unsigned char *)(v16 + 4) = 1;
          ++v10;
LABEL_27:
          if (++v9 >= (unsigned __int16)v6) {
            break;
          }
          v11 += 6;
        }
        while (v10 < a5);
      }
      if (a6) {
        *a6 = v10;
      }
    }
  }
  return result;
}

uint64_t __CMPhotoGetExifLocationFromJFIFByteStream_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
  *(void *)(v8 + 24) = a7;
  *(void *)(v8 + 32) = a8;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  return 4294950191;
}

uint64_t ___copyChunkedHeadersFromJFIFByteStream_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 80);
  uint64_t v9 = *(void *)(a1 + 88);
  if (a8 < v8 + 2 * v9) {
    return 4294950194;
  }
  uint64_t v13 = *(void *)(a1 + 96);
  uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v14) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _WORD *, uint64_t *))(v15 + 8);
  if (!v16) {
    return 4294954514;
  }
  uint64_t v40 = 0;
  uint64_t result = v16(v13, 2 * v9, v8 + a7, v41, &v40);
  if (result) {
    return result;
  }
  uint64_t v18 = *(void *)(a1 + 88);
  if (v40 != 2 * v18) {
    return 4294950194;
  }
  uint64_t v19 = v40 + *(void *)(a1 + 80);
  if (v18 == 1)
  {
    unsigned int v20 = LOBYTE(v41[0]);
    unsigned int v21 = HIBYTE(v41[0]);
  }
  else
  {
    unsigned int v20 = bswap32(v41[0]) >> 16;
    unsigned int v21 = bswap32(v41[1]) >> 16;
  }
  uint64_t v22 = v19 + a7;
  uint64_t v23 = *(void *)(*(void *)(a1 + 32) + 8);
  int v24 = *(_DWORD *)(v23 + 24);
  if (v24) {
    BOOL v25 = 0;
  }
  else {
    BOOL v25 = v20 == 1;
  }
  if (v25 && v21 != 0)
  {
    *(_DWORD *)(v23 + 24) = v21;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v22;
    int v24 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  if (v24 <= 0 || v24 != v21 || *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) != v20) {
    return FigSignalErrorAt();
  }
  int v27 = *(__CFData **)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
  if (!v27)
  {
    *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = CFDataCreateMutable(*(CFAllocatorRef *)(a1 + 104), 0);
    int v27 = *(__CFData **)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
    if (!v27) {
      return 4294950305;
    }
  }
  uint64_t v28 = a8 - v19;
  CFIndex v29 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) + v28;
  if (v29 < 0) {
    return 4294950190;
  }
  CFDataSetLength(v27, v29);
  MutableBytePtr = CFDataGetMutableBytePtr(*(CFMutableDataRef *)(*(void *)(*(void *)(a1 + 56) + 8) + 24));
  uint64_t v31 = *(void *)(*(void *)(a1 + 64) + 8);
  uint64_t v32 = *(void *)(v31 + 24);
  *(void *)(v31 + 24) = v32 + v28;
  uint64_t v33 = *(void *)(a1 + 96);
  uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v35 = v34 ? v34 : 0;
  unsigned int v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, UInt8 *, uint64_t *))(v35 + 8);
  if (!v36) {
    return 4294954514;
  }
  uint64_t result = v36(v33, v28, v22, &MutableBytePtr[v32], &v40);
  if (!result)
  {
    if (v40 == v28)
    {
      uint64_t v37 = *(void *)(*(void *)(a1 + 40) + 8);
      int v38 = *(_DWORD *)(v37 + 24);
      if (v38 != *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
      {
        uint64_t result = 0;
        *(_DWORD *)(v37 + 24) = v38 + 1;
        return result;
      }
      *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 1;
      uint64_t v39 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
      if ((v39 & 0x8000000000000000) == 0)
      {
        *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 32) = v39;
        return 4294950191;
      }
      return 4294950190;
    }
    return 4294950194;
  }
  return result;
}

uint64_t __CMPhotoCopyImageCountAndRangesFromJFIFByteStream_block_invoke(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 1;
  *(void *)(*(void *)(a1[5] + 8) + 24) = a7;
  *(void *)(*(void *)(a1[6] + 8) + 24) = a8;
  return 4294950191;
}

uint64_t __CMPhotoFindMarkersWithSignaturesInJFIFByteStream_block_invoke(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = (void *)(*(void *)(a1 + 40) + 16 * a3);
  if (*(_OWORD *)v8 == 0)
  {
    void *v8 = a7;
    v8[1] = a8;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
  return 0;
}

void ___getHWQueueForFormat_block_invoke(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 48);
  if (v2)
  {
    if (v2 == 1)
    {
      uint64_t v3 = *(void *)(a1 + 32);
      if (*(void *)(v3 + 56))
      {
        uint64_t v4 = v3 + 48;
        uint64_t v5 = *(void **)(a1 + 40);
LABEL_7:
        *uint64_t v5 = v4;
        return;
      }
    }
    else
    {
      uint64_t v3 = *(void *)(a1 + 32);
    }
    **(void **)(a1 + 40) = v3 + 144;
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = (unsigned char *)(v7 + 48);
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(a1 + 40);
    if (*(void *)(v6 + 104))
    {
      uint64_t v4 = v6 + 96;
      goto LABEL_7;
    }
    *uint64_t v5 = v6 + 144;
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = (unsigned char *)(v7 + 96);
  }
  if (!*v8)
  {
    uint64_t v9 = *(NSObject **)(v7 + 40);
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = *(void *)"";
    v11[2] = ___getHWQueueForFormat_block_invoke_2;
    v11[3] = &__block_descriptor_tmp_38;
    int v12 = v2;
    v11[4] = v7;
    dispatch_async(v9, v11);
    uint64_t v10 = *(void *)(a1 + 32);
    if (*(_DWORD *)(a1 + 48)) {
      *(unsigned char *)(v10 + 48) = 1;
    }
    else {
      *(unsigned char *)(v10 + 96) = 1;
    }
  }
}

uint64_t _transferToCanvas(uint64_t a1, int a2, char a3, char a4, char a5, unsigned __int8 a6, uint64_t a7, CVPixelBufferRef pixelBuffer, uint64_t a9, int a10, unint64_t *a11, __CVBuffer *a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14 = pixelBuffer;
  CVPixelBufferRef v71 = 0;
  long long v72 = 0;
  uint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  uint64_t v18 = CVPixelBufferGetPixelFormatType(a12);
  uint64_t v19 = v18;
  BOOL v21 = a10 != 1 && *(unsigned char *)(a9 + 1) != 0;
  BOOL v22 = *(_OWORD *)(a9 + 88) != 0;
  BOOL v23 = *(_OWORD *)(a9 + 40) == 0 && *(_OWORD *)(a9 + 56) == 0;
  if (a7
    && PixelFormatType != a7
    && v18 != PixelFormatType
    && (CMPhotoGetFullRangeForPixelFormat(PixelFormatType) == a7
     || CMPhotoGetFullRangeForPixelFormat(a7) == PixelFormatType)
    && !CMPhotoCreateOtherRangePixelBufferWithBacking(v14, &v71))
  {
    uint64_t v14 = v71;
  }
  int v65 = a14;
  if (v21) {
    int v24 = a10;
  }
  else {
    int v24 = 1;
  }
  if (v19 != PixelFormatType && (v19 == 1815491698 || v19 == 1815162994))
  {
    if (_l64r_insertionWorkaroundEnabled_onceToken != -1) {
      dispatch_once(&_l64r_insertionWorkaroundEnabled_onceToken, &__block_literal_global_28);
    }
    int v25 = 1;
LABEL_31:
    unsigned __int8 v28 = a6;
    uint64_t v29 = a1;
    if (*(unsigned char *)(a9 + 114))
    {
      CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionaryRef v27 = Mutable;
      if (!Mutable)
      {
        uint64_t v58 = 4294950305;
        goto LABEL_54;
      }
      CMPhotoCFDictionarySetBoolean(Mutable, @"PreferLowMemory", *(unsigned __int8 *)(a9 + 114));
      if (v22) {
        goto LABEL_34;
      }
    }
    else
    {
      CFDictionaryRef v27 = 0;
      if (v22)
      {
LABEL_34:
        v69[0] = 0uLL;
        uint64_t v32 = CMPhotoFlipSizeIfNeeded(v24, *(void *)(a9 + 88), *(void *)(a9 + 96), v69);
        if (v32)
        {
LABEL_53:
          uint64_t v58 = v32;
          goto LABEL_54;
        }
        double v33 = (double)*(unint64_t *)&v69[0];
        double v34 = (double)*((unint64_t *)&v69[0] + 1);
        goto LABEL_38;
      }
    }
    double v33 = *MEMORY[0x1E4F1DB30];
    double v34 = *(double *)(MEMORY[0x1E4F1DB30] + 8);
LABEL_38:
    long long v35 = *(_OWORD *)(a9 + 112);
    v69[6] = *(_OWORD *)(a9 + 96);
    v69[7] = v35;
    uint64_t v70 = *(void *)(a9 + 128);
    long long v36 = *(_OWORD *)(a9 + 48);
    v69[2] = *(_OWORD *)(a9 + 32);
    v69[3] = v36;
    long long v37 = *(_OWORD *)(a9 + 80);
    v69[4] = *(_OWORD *)(a9 + 64);
    v69[5] = v37;
    long long v38 = *(_OWORD *)(a9 + 16);
    v69[0] = *(_OWORD *)a9;
    v69[1] = v38;
    uint64_t v32 = _fillEdgesIfNeeded(v14, (uint64_t)v69, v24);
    if (v32) {
      goto LABEL_53;
    }
    uint64_t v41 = v19;
    uint64_t v30 = a13;
    uint64_t v32 = CMPhotoScaleAndRotateSessionTransformForSizeWithOptions(a1, v14, v27, a2 == 0, v24, v41, a13, a14, *MEMORY[0x1E4F1DB20], *(CGFloat *)(MEMORY[0x1E4F1DB20] + 8), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 16), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 24), v33, v34, v39, v40, 1u, 0, a6,
            a3,
            a4,
            a5,
            &v72);
    if (v32) {
      goto LABEL_53;
    }
    int v65 = 0;
    int v24 = 1;
    uint64_t v14 = v72;
    goto LABEL_41;
  }
  int v25 = 0;
  int v26 = v19 != PixelFormatType || v21;
  if ((((v26 | v22) ^ 1 | v23) & 1) == 0) {
    goto LABEL_31;
  }
  CFDictionaryRef v27 = 0;
  unsigned __int8 v28 = a6;
  uint64_t v29 = a1;
  uint64_t v30 = a13;
LABEL_41:
  v67.f64[0] = CMPhotoGetPixelBufferCLAPAsRect(v14);
  v67.f64[1] = v42;
  v68.f64[0] = v43;
  v68.f64[1] = v44;
  unint64_t v45 = *(void *)(a9 + 56);
  unint64_t v46 = *(void *)(a9 + 64);
  if (*(_OWORD *)(a9 + 40) != 0 || v45 | v46)
  {
    uint64_t v32 = CMPhotoApplyCropRectToRect(v67.f64, (double)*(unint64_t *)(a9 + 40), (double)*(unint64_t *)(a9 + 48), (double)v45, (double)v46);
    if (v32) {
      goto LABEL_53;
    }
  }
  unint64_t v47 = a11[2];
  unint64_t v48 = a11[3];
  if (*(_OWORD *)a11 == 0 && !(v47 | v48))
  {
    double v49 = *MEMORY[0x1E4F1DB20];
    double v50 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
    double v51 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
    double v52 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
  }
  else
  {
    double v49 = (double)*a11;
    double v50 = (double)a11[1];
    double v51 = (double)v47;
    double v52 = (double)v48;
  }
  double v53 = v67.f64[0];
  CGFloat v54 = v68.f64[0];
  if (!v25)
  {
    CGFloat v56 = v67.f64[1];
    CGFloat v57 = v68.f64[1];
    uint64_t v55 = a12;
    goto LABEL_52;
  }
  v66[0] = vcvtq_u64_f64(vrndaq_f64(v67));
  v66[1] = vcvtq_u64_f64(vrndaq_f64(v68));
  uint64_t v55 = a12;
  if (CMPhotoPixelBufferCopyCropRectToOffset(v14, 1, (uint64_t *)v66, a12, 1, vcvtad_u64_f64(v49), vcvtad_u64_f64(v50), 0))
  {
    CGFloat v56 = v67.f64[1];
    double v53 = v67.f64[0];
    CGFloat v57 = v68.f64[1];
    CGFloat v54 = v68.f64[0];
LABEL_52:
    uint64_t v32 = CMPhotoScaleAndRotateSessionTransformWithRect(v29, v14, a2 == 0, v24, v55, v30, v65, v28, v53, v56, v54, v57, v49, v50, v51, v52);
    goto LABEL_53;
  }
  uint64_t v58 = 0;
LABEL_54:
  if (v71) {
    CFRelease(v71);
  }
  if (v72) {
    CFRelease(v72);
  }
  if (v27) {
    CFRelease(v27);
  }
  return v58;
}

uint64_t CMPhotoScaleAndRotateSessionTransformWithRect(uint64_t a1, __CVBuffer *a2, int a3, int a4, CVPixelBufferRef pixelBuffer, uint64_t a6, int a7, unsigned __int8 a8, double a9, CGFloat a10, CGFloat a11, CGFloat a12, double PixelBufferCLAPAsRect, CGFloat a14, CGFloat a15, CGFloat a16)
{
  uint64_t v31 = a1;
  float64_t v42 = pixelBuffer;
  int v41 = 0;
  if (!a1)
  {
    pthread_once(&CMPhotoScaleAndRotateSessionGetDefault_onceToken, _once_CMPhotoScaleAndRotateSessionGetDefault);
    uint64_t v31 = defaultSession;
  }
  uint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  v43.origin.x = PixelBufferCLAPAsRect;
  v43.origin.y = a14;
  v43.size.double width = a15;
  v43.size.double height = a16;
  if (CGRectIsNull(v43))
  {
    double PixelBufferCLAPAsRect = CMPhotoGetPixelBufferCLAPAsRect(pixelBuffer);
    a14 = v33;
    a15 = v34;
    a16 = v35;
  }
  uint64_t result = CMPhotoHEIFRotationCCWAndMirroringFromExifOrientation(a4, &v41, 0);
  if (!result)
  {
    if (v41 == 270 || (double v39 = a15, v40 = a16, v41 == 90))
    {
      double v39 = a16;
      double v40 = a15;
    }
    return _convertAndScalePixelBufferOddSafe(v31, a2, 0, a3, a4, PixelFormatType, a6, a7, a9, a10, a11, a12, v39, v40, v37, v38, PixelBufferCLAPAsRect, a14, a15,
             a16,
             1u,
             0,
             a8,
             0,
             0,
             0xFFFFFFFF,
             &v42);
  }
  return result;
}

uint64_t _fillEdgesIfNeeded(__CVBuffer *a1, uint64_t a2, int a3)
{
  if (*(_OWORD *)(a2 + 72) == 0) {
    return 0;
  }
  CMPhotoGetPixelBufferCLAPAsRect(a1);
  unint64_t v16 = vcvtad_u64_f64(v6);
  unint64_t v17 = vcvtad_u64_f64(v7);
  uint64_t result = CMPhotoFlipSizeIfNeeded(a3, v16, v17, &v16);
  if (!result)
  {
    unint64_t v9 = *(void *)(a2 + 72);
    unint64_t v10 = *(void *)(a2 + 80);
    if (v16 <= v9 && v17 <= v10) {
      return 0;
    }
    if (v10 >= v17) {
      unint64_t v10 = v17;
    }
    if (v9 >= v16) {
      unint64_t v9 = v16;
    }
    long long v14 = 0uLL;
    *(void *)&long long v15 = v9;
    *((void *)&v15 + 1) = v10;
    long long v12 = 0uLL;
    long long v13 = v15;
    uint64_t result = CMPhotoGetCropPreOrientation(v16, v17, &v12, a3, &v14);
    if (!result)
    {
      long long v12 = v14;
      long long v13 = v15;
      return CMPhotoPixelBufferFillOutsideCropRect(a1, 1, &v12);
    }
  }
  return result;
}

uint64_t CMPhotoPixelBufferFillOutsideCropRect(__CVBuffer *a1, int a2, void *a3)
{
  if (!a1) {
    goto LABEL_105;
  }
  uint64_t v3 = a3;
  if (!a3[2] || !a3[3]) {
    return 0;
  }
  uint64_t v5 = a1;
  signed int PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (PixelFormatType <= 1734505011)
  {
    if (PixelFormatType <= 1647392368)
    {
      if (PixelFormatType > 1111970368)
      {
        if (PixelFormatType > 1278226735)
        {
          if ((PixelFormatType - 1278226736) > 6 || ((1 << (PixelFormatType - 48)) & 0x45) == 0)
          {
            int v8 = 1380401729;
            goto LABEL_75;
          }
          goto LABEL_76;
        }
        if (PixelFormatType == 1111970369) {
          goto LABEL_76;
        }
        int v8 = 1278226488;
      }
      else
      {
        if (PixelFormatType <= 875704949)
        {
          if (PixelFormatType != 875704422 && PixelFormatType != 875704438)
          {
            int v8 = 875704934;
            goto LABEL_75;
          }
          goto LABEL_76;
        }
        if (PixelFormatType == 875704950 || PixelFormatType == 875836518) {
          goto LABEL_76;
        }
        int v8 = 875836534;
      }
    }
    else if (PixelFormatType <= 1651519797)
    {
      if (PixelFormatType > 1650943795)
      {
        if (PixelFormatType == 1650943796 || PixelFormatType == 1650946096) {
          goto LABEL_76;
        }
        unsigned __int16 v10 = 28722;
      }
      else
      {
        if (PixelFormatType == 1647392369 || PixelFormatType == 1647719528) {
          goto LABEL_76;
        }
        unsigned __int16 v10 = 25400;
      }
      int v8 = v10 | 0x62670000;
    }
    else if (PixelFormatType <= 1651926375)
    {
      if (PixelFormatType == 1651519798 || PixelFormatType == 1651847472) {
        goto LABEL_76;
      }
      int v8 = 1651925816;
    }
    else
    {
      if (PixelFormatType <= 1734501175)
      {
        if (PixelFormatType != 1651926376)
        {
          int v8 = 1652056888;
          goto LABEL_75;
        }
        goto LABEL_76;
      }
      if (PixelFormatType == 1734501176) {
        goto LABEL_76;
      }
      int v8 = 1734504496;
    }
  }
  else if (PixelFormatType > 1937126451)
  {
    if (PixelFormatType <= 1953903667)
    {
      if (PixelFormatType <= 1952855091)
      {
        if (PixelFormatType != 1937126452 && PixelFormatType != 1952854576)
        {
          int v8 = 1952854578;
          goto LABEL_75;
        }
        goto LABEL_76;
      }
      if (PixelFormatType == 1952855092 || PixelFormatType == 1953903152) {
        goto LABEL_76;
      }
      int v8 = 1953903154;
    }
    else if (PixelFormatType <= 2016687155)
    {
      if (PixelFormatType == 1953903668 || PixelFormatType == 2016686640) {
        goto LABEL_76;
      }
      int v8 = 2016686642;
    }
    else
    {
      if (PixelFormatType > 2019963441)
      {
        if (PixelFormatType == 2019963442) {
          goto LABEL_76;
        }
        unsigned __int16 v9 = 13364;
      }
      else
      {
        if (PixelFormatType == 2016687156) {
          goto LABEL_76;
        }
        unsigned __int16 v9 = 12848;
      }
      int v8 = v9 | 0x78660000;
    }
  }
  else if (PixelFormatType <= 1919379251)
  {
    if (PixelFormatType <= 1735553071)
    {
      if (PixelFormatType != 1734505012 && PixelFormatType != 1735549492)
      {
        int v8 = 1735549752;
        goto LABEL_75;
      }
      goto LABEL_76;
    }
    if (PixelFormatType == 1735553072 || PixelFormatType == 1751527984) {
      goto LABEL_76;
    }
    int v8 = 1919378232;
  }
  else
  {
    if (PixelFormatType <= 1936077361)
    {
      if (PixelFormatType != 1919379252 && PixelFormatType != 1919381552)
      {
        unsigned __int16 v7 = 12848;
        goto LABEL_46;
      }
LABEL_76:
      CFDictionaryRef Attributes = (const __CFDictionary *)CVPixelBufferGetAttributes();
      if (!Attributes) {
        return 4294950305;
      }
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(Attributes, (const void *)*MEMORY[0x1E4F24D68]);
      if (!Value)
      {
        CFDictionaryRef Value = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
        if (!Value) {
          return 4294950305;
        }
      }
      CFArrayRef v13 = (const __CFArray *)CFDictionaryGetValue(Value, (const void *)*MEMORY[0x1E4F24EE0]);
      if (a2)
      {
        uint64_t v14 = CVPixelBufferLockBaseAddress(v5, 0);
        if (v14) {
          return v14;
        }
      }
      if (CVPixelBufferGetPlaneCount(v5) < 2)
      {
        Planeuint64_t Count = 1;
      }
      else
      {
        Planeuint64_t Count = CVPixelBufferGetPlaneCount(v5);
        if (!PlaneCount)
        {
          uint64_t v15 = 0;
          if (!a2) {
            return v15;
          }
          goto LABEL_103;
        }
      }
      int v31 = a2;
      pixelBuffer = v5;
      size_t v16 = 0;
      double v38 = (const void *)*MEMORY[0x1E4F24EE8];
      double v37 = (const void *)*MEMORY[0x1E4F24ED0];
      double v35 = v3;
      long long v36 = (const void *)*MEMORY[0x1E4F24E18];
      CFDictionaryRef v32 = Value;
      CFArrayRef v34 = v13;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = Value;
        if (v13) {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v13, v16);
        }
        unint64_t v50 = 1;
        unint64_t v51 = 1;
        CMPhotoCFDictionaryGetSizeIfPresent(ValueAtIndex, v38, &v51);
        CMPhotoCFDictionaryGetSizeIfPresent(ValueAtIndex, v37, &v50);
        unint64_t v19 = v50;
        unint64_t v18 = v51;
        unint64_t v20 = *v3;
        unint64_t v21 = (*v3 + v19 + v3[2] - 1) / v19;
        unint64_t v40 = *v3 / v50;
        unint64_t v41 = v3[1];
        unint64_t v42 = (v41 + v18 + v3[3] - 1) / v18;
        unint64_t v43 = v41 / v51;
        unint64_t v22 = v42 - v41 / v51;
        size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(pixelBuffer, v16);
        size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(pixelBuffer, v16);
        BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, v16);
        unint64_t v25 = HeightOfPlane;
        size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, v16);
        unint64_t v49 = 8;
        CMPhotoCFDictionaryGetSizeIfPresent(ValueAtIndex, v36, &v49);
        unint64_t v27 = v49 >> 3;
        v49 >>= 3;
        if (v21 - v40 < WidthOfPlane)
        {
          if (v19 <= v20)
          {
            unint64_t v45 = 0;
            unint64_t v46 = v43;
            size_t v47 = v40;
            unint64_t v48 = v22;
            uint64_t v28 = _fillPixelBufferRectHorizontally((uint64_t *)&v45, 0, WidthOfPlane, v25, v27, BytesPerRowOfPlane, (uint64_t)BaseAddressOfPlane);
            if (v28) {
              break;
            }
          }
          if (WidthOfPlane > v21)
          {
            unint64_t v45 = v21;
            unint64_t v46 = v43;
            size_t v47 = WidthOfPlane - v21;
            unint64_t v48 = v22;
            uint64_t v28 = _fillPixelBufferRectHorizontally((uint64_t *)&v45, 1, WidthOfPlane, v25, v49, BytesPerRowOfPlane, (uint64_t)BaseAddressOfPlane);
            if (v28) {
              break;
            }
          }
        }
        BOOL v29 = v22 >= v25;
        CFArrayRef v13 = v34;
        uint64_t v3 = v35;
        if (!v29)
        {
          if (v18 <= v41)
          {
            unint64_t v45 = 0;
            unint64_t v46 = 0;
            size_t v47 = WidthOfPlane;
            unint64_t v48 = v43;
            uint64_t v28 = _fillPixelBufferRectVertically(&v45, 0, WidthOfPlane, v25, v49, BytesPerRowOfPlane, (uint64_t)BaseAddressOfPlane);
            if (v28) {
              break;
            }
          }
          if (v25 > v42)
          {
            unint64_t v45 = 0;
            unint64_t v46 = v42;
            size_t v47 = WidthOfPlane;
            unint64_t v48 = v25 - v42;
            uint64_t v28 = _fillPixelBufferRectVertically(&v45, 1, WidthOfPlane, v25, v49, BytesPerRowOfPlane, (uint64_t)BaseAddressOfPlane);
            if (v28) {
              break;
            }
          }
        }
        ++v16;
        CFDictionaryRef Value = v32;
        if (PlaneCount == v16)
        {
          uint64_t v15 = 0;
          goto LABEL_102;
        }
      }
      uint64_t v15 = v28;
LABEL_102:
      uint64_t v5 = pixelBuffer;
      if (!v31) {
        return v15;
      }
LABEL_103:
      CVPixelBufferUnlockBaseAddress(v5, 0);
      return v15;
    }
    if (PixelFormatType <= 1937125935)
    {
      if (PixelFormatType != 1936077362)
      {
        unsigned __int16 v7 = 13364;
LABEL_46:
        int v8 = v7 | 0x73660000;
        goto LABEL_75;
      }
      goto LABEL_76;
    }
    if (PixelFormatType == 1937125936) {
      goto LABEL_76;
    }
    int v8 = 1937125938;
  }
LABEL_75:
  if (PixelFormatType == v8) {
    goto LABEL_76;
  }
LABEL_105:
  return FigSignalErrorAt();
}

uint64_t _fillPixelBufferRectVertically(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a1[3];
  if (!v7 || !a1[2]) {
    return 0;
  }
  uint64_t v11 = a1[1];
  if (a2)
  {
    if (v11)
    {
      uint64_t v12 = v11 - 1;
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v12 = v11 + v7;
    if (a4 != v12)
    {
LABEL_7:
      unint64_t v13 = 0;
      uint64_t v14 = *a1 * a5;
      uint64_t v15 = (const void *)(a7 + v12 * a6 + v14);
      size_t v16 = (char *)(a7 + v11 * a6 + v14);
      do
      {
        memcpy(v16, v15, a1[2] * a5);
        v16 += a6;
        ++v13;
      }
      while (v13 < a1[3]);
      return 0;
    }
  }
  return 4294950193;
}

uint64_t CMPhotoGetCropPreOrientation(uint64_t a1, uint64_t a2, void *a3, int a4, _OWORD *a5)
{
  if (!a5) {
    return 4294950306;
  }
  if (a4 == 1) {
    goto LABEL_19;
  }
  int v23 = -1;
  int v24 = 0;
  uint64_t result = CMPhotoHEIFRotationCCWAndMirroringFromExifOrientation(a4, &v24, &v23);
  if (result) {
    return result;
  }
  uint64_t v10 = *a3;
  uint64_t v11 = a3[1];
  uint64_t v21 = v11;
  uint64_t v22 = v10;
  uint64_t v12 = a3[2];
  uint64_t v13 = a3[3];
  if (v23)
  {
    if (v23 != 1) {
      goto LABEL_9;
    }
    uint64_t v14 = &v22;
    uint64_t v15 = a3[2];
    uint64_t v16 = a1;
  }
  else
  {
    uint64_t v14 = &v21;
    uint64_t v10 = v11;
    uint64_t v15 = a3[3];
    uint64_t v16 = a2;
  }
  uint64_t *v14 = v16 - v15 - v10;
  uint64_t v11 = v21;
  uint64_t v10 = v22;
LABEL_9:
  int v17 = v24 % 360;
  if (v24 % 360 == 270)
  {
    uint64_t v10 = a1 - v10 - v12;
    uint64_t v18 = v11;
    goto LABEL_14;
  }
  if (v17 == 180)
  {
    uint64_t v18 = a1 - (v12 + v10);
    uint64_t v10 = a2 - (v13 + v11);
LABEL_17:
    uint64_t v19 = v12;
    uint64_t v12 = v13;
    goto LABEL_18;
  }
  if (v17 != 90)
  {
    uint64_t v18 = v10;
    uint64_t v10 = v11;
    goto LABEL_17;
  }
  uint64_t v18 = a2 - v11 - v13;
LABEL_14:
  uint64_t v19 = v13;
LABEL_18:
  *a3 = v18;
  a3[1] = v10;
  a3[2] = v19;
  a3[3] = v12;
LABEL_19:
  uint64_t result = 0;
  long long v20 = *((_OWORD *)a3 + 1);
  *a5 = *(_OWORD *)a3;
  a5[1] = v20;
  return result;
}

uint64_t CMPhotoFlipSizeIfNeeded(int a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a4)
  {
    if ((a1 - 5) >= 4) {
      uint64_t v4 = a3;
    }
    else {
      uint64_t v4 = a2;
    }
    if ((a1 - 5) >= 4) {
      uint64_t v5 = a2;
    }
    else {
      uint64_t v5 = a3;
    }
    *a4 = v5;
    a4[1] = v4;
  }
  return 0;
}

uint64_t CMPhotoApplyCropRectToRect(double *a1, double a2, double a3, double a4, double a5)
{
  if (!a1) {
    return FigSignalErrorAt();
  }
  double v5 = a1[2];
  if (a2 >= v5) {
    return 4294950193;
  }
  double v6 = a1[3];
  double v7 = v5 - a2;
  BOOL v8 = a3 >= v6 || a4 > v7;
  if (v8 || a5 > v6 - a3) {
    return 4294950193;
  }
  uint64_t v10 = 0;
  double v11 = a3 + a1[1];
  *a1 = a2 + *a1;
  a1[1] = v11;
  a1[2] = a4;
  a1[3] = a5;
  return v10;
}

uint64_t _fillPixelBufferRectHorizontally(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a1[3];
  if (!v7) {
    return 0;
  }
  uint64_t v8 = a1[2];
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *a1;
  if (a2)
  {
    if (v9)
    {
      uint64_t v10 = (v9 - 1) * a5;
      int v11 = 1;
      goto LABEL_8;
    }
  }
  else if (a3 != v9 + v8)
  {
    uint64_t v10 = a5 + a5 * (v8 + v9) - 1;
    int v11 = -1;
LABEL_8:
    unint64_t v12 = a1[1];
    unint64_t v13 = v12 + v7;
    if (v12 < v13)
    {
      uint64_t v14 = a7 + v10;
      uint64_t v15 = v11;
      uint64_t v16 = (int)a5 * (uint64_t)v11;
      do
      {
        if (v8 * a5)
        {
          unint64_t v17 = 0;
          uint64_t v18 = (unsigned char *)(v14 + v12 * a6);
          do
          {
            v18[v16] = *v18;
            v18 += v15;
            ++v17;
            uint64_t v8 = a1[2];
          }
          while (v17 < v8 * a5);
        }
        ++v12;
      }
      while (v12 != v13);
    }
    return 0;
  }
  return 4294950193;
}

void _canvasItemDecodeCallback(int a1, int a2, CVBufferRef buffer, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1)
  {
    kdebug_trace();
    if (*v9 == 1) {
      kdebug_trace();
    }
  }
  if (*(_DWORD *)(a4 + 14580) | a2) {
    goto LABEL_11;
  }
  uint64_t v10 = *(BOOL **)(a4 + 8);
  if (*v10 && CMPhotoDecompressionSessionAsyncRequestCancelled(*(void *)(v10[1] + 16), *v10))
  {
    a2 = -17105;
    goto LABEL_11;
  }
  if (!*(unsigned char *)(a4 + 156))
  {
    CMPhotoRemoveColorInformationGuessedBy(buffer);
    CMPhotoRemoveChromaInformationFromBuffer(buffer);
  }
  if (*(unsigned char *)(a4 + 158))
  {
    a2 = 0;
LABEL_11:
    int v11 = *(const void **)(a5 + 208);
    if (v11)
    {
      CFRelease(v11);
      *(void *)(a5 + 208) = 0;
    }
    unint64_t v12 = *(const void **)(a5 + 216);
    if (v12)
    {
      CFRelease(v12);
      *(void *)(a5 + 216) = 0;
    }
    _asyncCanvasDecodeFinished(a4, (const void *)a5, a2, 0);
    goto LABEL_27;
  }
  if (!*(unsigned char *)(a5 + 48)
    && (int v13 = CMPhotoSetPixelBufferCLAPFromRect(buffer, 1, 1, (double)*(unint64_t *)(a4 + 176), (double)*(unint64_t *)(a4 + 184), (double)*(unint64_t *)(a4 + 192), (double)*(unint64_t *)(a4 + 200))) != 0|| ((v14 = *(void *)(a5 + 72), v15 = *(void *)(a5 + 80), *(_OWORD *)(a5 + 56) != 0) || v14 | v15)&& (int v13 = CMPhotoSetPixelBufferCLAPFromRect(buffer, 1, 1, (double)*(unint64_t *)(a5 + 56), (double)*(unint64_t *)(a5 + 64), (double)v14, (double)v15)) != 0)
  {
    a2 = v13;
    goto LABEL_11;
  }
  CMPhotoAddColorInformationToPixelBufferAccordingToFormat(*(CFTypeRef *)(a4 + 48), *(const void **)(a4 + 56), *(const void **)(a4 + 64), *(const void **)(a4 + 72), buffer);
  CMPhotoAddChromaLocationToPixelBufferAccordingToFormat(*(_DWORD *)(a4 + 80), *(_DWORD *)(a4 + 84), buffer);
  if (!*(void *)(a5 + 208))
  {
    if (buffer) {
      CFTypeRef v16 = CFRetain(buffer);
    }
    else {
      CFTypeRef v16 = 0;
    }
    *(void *)(a5 + 208) = v16;
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = *(void *)"";
  block[2] = ___canvasItemDecodeCallback_block_invoke;
  block[3] = &__block_descriptor_tmp_12_0;
  block[4] = a5;
  void block[5] = a4;
  block[6] = a5;
  block[7] = buffer;
  int v19 = 0;
  char v20 = 1;
  dispatch_block_t v17 = dispatch_block_create(DISPATCH_BLOCK_INHERIT_QOS_CLASS, block);
  os_unfair_lock_lock((os_unfair_lock_t)(a4 + 14576));
  CFArrayAppendValue(*(CFMutableArrayRef *)(a4 + 14592), v17);
  dispatch_async(*(dispatch_queue_t *)(a5 + 40), v17);
  os_unfair_lock_unlock((os_unfair_lock_t)(a4 + 14576));
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a4 + 224));
LABEL_27:
  if (*v9 == 1) {
    kdebug_trace();
  }
}

void _asyncCanvasDecodeFinished(uint64_t a1, const void *a2, int a3, int a4)
{
  uint64_t v8 = (os_unfair_lock_s *)(a1 + 14576);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 14576));
  if (a3) {
    *(_DWORD *)(a1 + 14580) = a3;
  }
  BOOL v9 = CFSetContainsValue(*(CFSetRef *)(a1 + 14600), a2)
    && (CFSetRemoveValue(*(CFMutableSetRef *)(a1 + 14600), a2),
        CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 14584), a2),
        !CFSetGetCount(*(CFSetRef *)(a1 + 14600)))
    && *(unsigned char *)(a1 + 216) != 0;
  CFSetGetCount(*(CFSetRef *)(a1 + 14600));
  os_unfair_lock_unlock(v8);
  if (a4)
  {
    if (!v9) {
      return;
    }
  }
  else
  {
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 224));
    if (!v9) {
      return;
    }
  }
  uint64_t v10 = *(NSObject **)(a1 + 232);
  dispatch_semaphore_signal(v10);
}

void CMPhotoAddColorInformationToPixelBufferAccordingToFormat(CFTypeRef value, const void *a2, const void *a3, const void *a4, CVBufferRef buffer)
{
  if (buffer)
  {
    if (value) {
      CVBufferSetAttachment(buffer, (CFStringRef)*MEMORY[0x1E4F24A00], value, kCVAttachmentMode_ShouldPropagate);
    }
    CFBooleanRef PixelBufferDescriptionKey = (const __CFBoolean *)_getPixelBufferDescriptionKey(buffer, (const void *)*MEMORY[0x1E4F24EB0]);
    unsigned int v10 = CMPhotoCFBooleanGetValue(PixelBufferDescriptionKey);
    CFBooleanRef v11 = (const __CFBoolean *)_getPixelBufferDescriptionKey(buffer, (const void *)*MEMORY[0x1E4F24EA8]);
    unsigned int v12 = CMPhotoCFBooleanGetValue(v11);
    if (CMPhotoPixelBufferIsITUR_2100TF(buffer))
    {
      if (a2 && !v12) {
        CVBufferSetAttachment(buffer, (CFStringRef)*MEMORY[0x1E4F24A90], a2, kCVAttachmentMode_ShouldPropagate);
      }
      if (a3) {
        CVBufferSetAttachment(buffer, (CFStringRef)*MEMORY[0x1E4F24BC8], a3, kCVAttachmentMode_ShouldPropagate);
      }
    }
    if (a4)
    {
      if (!v10 && v12 == 0)
      {
        CFStringRef v14 = (const __CFString *)*MEMORY[0x1E4F24C18];
        CVBufferSetAttachment(buffer, v14, a4, kCVAttachmentMode_ShouldPropagate);
      }
    }
  }
}

void _removeYCbCrMatrixFromBufferIfNeeded(__CVBuffer *a1)
{
  unsigned int v2 = CMPhotoPixelBufferContainsRGB(a1);
  if (v2 | CMPhotoPixelBufferContainsGrayscale(a1))
  {
    CFStringRef v3 = (const __CFString *)*MEMORY[0x1E4F24C18];
    CVBufferRemoveAttachment(a1, v3);
  }
}

CFBooleanRef CMPhotoCFBooleanGetValue(const __CFBoolean *result)
{
  if (result)
  {
    CFBooleanRef v1 = result;
    CFTypeID v2 = CFGetTypeID(result);
    if (CFBooleanGetTypeID() == v2)
    {
      return (const __CFBoolean *)CFBooleanGetValue(v1);
    }
    else if (CFNumberGetTypeID() == v2)
    {
      int valuePtr = 0;
      if (CFNumberGetValue(v1, kCFNumberIntType, &valuePtr)) {
        BOOL v3 = valuePtr == 0;
      }
      else {
        BOOL v3 = 1;
      }
      return (const __CFBoolean *)!v3;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

CFBooleanRef CMPhotoPixelBufferContainsRGB(__CVBuffer *a1)
{
  CFBooleanRef PixelBufferDescriptionKey = (const __CFBoolean *)_getPixelBufferDescriptionKey(a1, (const void *)*MEMORY[0x1E4F24EB0]);
  return CMPhotoCFBooleanGetValue(PixelBufferDescriptionKey);
}

const void *_getPixelBufferDescriptionKey(__CVBuffer *a1, const void *a2)
{
  if (!a1) {
    return 0;
  }
  CFDictionaryRef Attributes = (const __CFDictionary *)CVPixelBufferGetAttributes();
  if (!Attributes) {
    return 0;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(Attributes, (const void *)*MEMORY[0x1E4F24D68]);
  if (!Value)
  {
    CVPixelBufferGetPixelFormatType(a1);
    CFDictionaryRef Value = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
    if (!Value) {
      return 0;
    }
  }
  return CFDictionaryGetValue(Value, a2);
}

CFBooleanRef CMPhotoPixelBufferContainsGrayscale(__CVBuffer *a1)
{
  CFBooleanRef PixelBufferDescriptionKey = (const __CFBoolean *)_getPixelBufferDescriptionKey(a1, (const void *)*MEMORY[0x1E4F24EA8]);
  return CMPhotoCFBooleanGetValue(PixelBufferDescriptionKey);
}

void _oneShotItemDecodeCallback(int a1, int a2, void *cf, uint64_t a4, uint64_t a5)
{
  BOOL v9 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  *(_DWORD *)(a5 + 16) = a2;
  if (cf) {
    unsigned int v10 = (__CVBuffer *)CFRetain(cf);
  }
  else {
    unsigned int v10 = 0;
  }
  *(void *)a5 = v10;
  if (!*(unsigned char *)(a4 + 156))
  {
    CMPhotoRemoveColorInformationGuessedBy((__CVBuffer *)cf);
    unsigned int v10 = *(__CVBuffer **)a5;
  }
  CMPhotoAddColorInformationToPixelBufferAccordingToFormat(*(CFTypeRef *)(a4 + 48), *(const void **)(a4 + 56), *(const void **)(a4 + 64), *(const void **)(a4 + 72), v10);
  CMPhotoAddChromaLocationToPixelBufferAccordingToFormat(*(_DWORD *)(a4 + 80), *(_DWORD *)(a4 + 84), *(__CVBuffer **)a5);
  CMPhotoAddHDRMetadataToPixelBufferFromFormatDescription(*(const opaqueCMFormatDescription **)(a4 + 24), *(__CVBuffer **)a5);
  if (!*(unsigned char *)(a4 + 208)) {
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a5 + 8));
  }
  if (*v9 == 1)
  {
    kdebug_trace();
  }
}

void _setChromaLocationAttachmentToBuffer(int a1, unsigned int a2, CVBufferRef buffer)
{
  if (a2 <= 5)
  {
    BOOL v3 = (CFStringRef *)MEMORY[0x1E4F24A08];
    if (a1) {
      BOOL v3 = (CFStringRef *)MEMORY[0x1E4F24A10];
    }
    CVBufferSetAttachment(buffer, *v3, **((CFTypeRef **)&unk_1E5E2DF68 + (int)a2), kCVAttachmentMode_ShouldPropagate);
  }
}

uint64_t CMPhotoDecompressionSessionDetachSurface(uint64_t a1, void *a2)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  uint64_t v5 = CMPhotoSurfacePoolDetachImageSurface(*(void *)(a1 + 272), a2);
  os_unfair_lock_unlock(v4);
  return v5;
}

uint64_t CMPhotoSurfacePoolDetachImageSurface(uint64_t a1, void *a2)
{
  return SurfacePool_DetachSurface(a1, a2, 1);
}

uint64_t SurfacePool_DetachSurface(uint64_t a1, void *a2, int a3)
{
  uint64_t v5 = a1;
  if (!a1)
  {
    pthread_once(&CMPhotoSurfacePoolGetDefault_onceToken, _once_CMPhotoSurfacePoolGetDefault);
    uint64_t v5 = defaultSurfacePool;
  }
  if ((__CFString *)v5 != @"SurfacePoolOneShot")
  {
    uint64_t result = pthread_mutex_lock(*(pthread_mutex_t **)(v5 + 312));
    if (result) {
      return result;
    }
    uint64_t v7 = 168;
    if (a3)
    {
      uint64_t v8 = (int64x2_t *)(v5 + 168);
    }
    else
    {
      uint64_t v7 = 24;
      uint64_t v8 = (int64x2_t *)(v5 + 24);
    }
    BOOL v9 = *(void **)(v5 + v7);
    if (v9)
    {
      while ((void *)*v9 != a2)
      {
        BOOL v9 = (void *)v9[7];
        if (!v9) {
          goto LABEL_26;
        }
      }
      if (a2) {
        CFRetain(a2);
      }
      uint64_t v10 = v9[7];
      CFBooleanRef v11 = (void *)v9[8];
      if (v10)
      {
        *(void *)(v10 + 64) = v11;
        CFBooleanRef v11 = (void *)v9[8];
      }
      else
      {
        v8->i64[1] = (uint64_t)v11;
      }
      *CFBooleanRef v11 = v10;
      uint64_t v12 = v9[5];
      int v13 = (void *)v9[6];
      if (v12)
      {
        *(void *)(v12 + 48) = v13;
        int v13 = (void *)v9[6];
      }
      else
      {
        *(void *)(v9[4] + 8) = v13;
      }
      *int v13 = v12;
      CMPhotoGetEncodeAccelerationModeOverride(*v9, @"CMPhoto dropped");
      if (*v9) {
        CFRelease((CFTypeRef)*v9);
      }
      CFStringRef v14 = (const void *)v9[2];
      if (v14) {
        CFRelease(v14);
      }
      int64x2_t v15 = v8[7];
      v16.i64[0] = -1;
      v16.i64[1] = -1;
      v17.i64[1] = -1;
      v17.i64[0] = v9[1];
      v17.i64[0] = vsubq_s64(v15, v17).u64[0];
      v17.i64[1] = vaddq_s64(v15, v16).i64[1];
      v8[7] = v17;
      uint64_t v18 = v9[4];
      --*(void *)(v18 + 24);
      ++*(void *)(v18 + 48);
      free(v9);
      IOSurfaceDecrementUseCount((IOSurfaceRef)a2);
      IOSurfaceRemoveValue((IOSurfaceRef)a2, (CFStringRef)*MEMORY[0x1E4F2F128]);
      CMPhotoGetEncodeAccelerationModeOverride(a2, @"CMPhoto detached");
      if (a2) {
        CFRelease(a2);
      }
    }
LABEL_26:
    pthread_mutex_unlock(*(pthread_mutex_t **)(v5 + 312));
  }
  return 0;
}

double CMPhotoScaleAndRotateSessionClass_Init(uint64_t a1)
{
  *(void *)(a1 + 64) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t CMPhotoDecompressionContainerDecodeImageForIndexAsync(char *a1, const __CFNumber *a2, CFDictionaryRef theDict, uint64_t a4, uint64_t a5, void *aBlock)
{
  if (theDict && CFDictionaryContainsKey(theDict, @"DryRun"))
  {
    uint64_t v12 = FigSignalErrorAt();
  }
  else
  {
    aBlock = _Block_copy(aBlock);
    uint64_t v12 = CMPhotoDecompressionContainerDecodeImageForIndexAsyncF(a1, a2, theDict, a4, a5, (uint64_t)_callback_CompletionHandlerWrapper_0, (uint64_t)aBlock);
  }
  uint64_t v13 = v12;
  if (aBlock && v12) {
    _Block_release(aBlock);
  }
  return v13;
}

uint64_t CMPhotoDecompressionContainerDecodeImageForIndexAsyncF(char *a1, const __CFNumber *a2, const __CFDictionary *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  CFTypeRef cf = 0;
  if (!a1) {
    return 4294950306;
  }
  uint64_t v19 = -1;
  uint64_t v14 = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a3, (const __CFNumber **)&v19, 0, 0);
  if (v14) {
    goto LABEL_12;
  }
  if (a6)
  {
    if (a3 && CFDictionaryContainsKey(a3, @"DryRun"))
    {
      uint64_t v14 = FigSignalErrorAt();
      goto LABEL_12;
    }
    uint64_t v14 = _createModifiedDecodeOptionsIfNeeded(a1, a2, -1, a3, a4, &cf);
    if (v14)
    {
LABEL_12:
      uint64_t v17 = v14;
      goto LABEL_14;
    }
    uint64_t v15 = *((void *)a1 + 4);
    if (v15) {
      uint64_t v16 = *((void *)a1 + 4);
    }
    else {
      uint64_t v16 = 0;
    }
    if (*(void *)(v16 + 96))
    {
      uint64_t v14 = (*(uint64_t (**)(char *, uint64_t, CFTypeRef, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 96))(a1, v19, cf, a4, a5, a6, a7);
      goto LABEL_12;
    }
    uint64_t v17 = 4294950302;
  }
  else
  {
    uint64_t v17 = 4294950306;
  }
LABEL_14:
  if (cf) {
    CFRelease(cf);
  }
  return v17;
}

uint64_t CMPhotoDecompressionContainerCreateImageForIndex(char *a1, const __CFNumber *a2, const __CFDictionary *a3, uint64_t a4, uint64_t a5)
{
  CFTypeRef cf = 0;
  if (!a1) {
    return 4294950306;
  }
  uint64_t v15 = -1;
  uint64_t v10 = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a3, (const __CFNumber **)&v15, 0, 0);
  if (v10) {
    goto LABEL_9;
  }
  uint64_t v10 = _createModifiedDecodeOptionsIfNeeded(a1, a2, -1, a3, a4, &cf);
  if (v10) {
    goto LABEL_9;
  }
  uint64_t v11 = *((void *)a1 + 4);
  if (v11) {
    uint64_t v12 = *((void *)a1 + 4);
  }
  else {
    uint64_t v12 = 0;
  }
  if (*(void *)(v12 + 80))
  {
    uint64_t v10 = (*(uint64_t (**)(char *, uint64_t, CFTypeRef, uint64_t, uint64_t))(v11 + 80))(a1, v15, cf, a4, a5);
LABEL_9:
    uint64_t v13 = v10;
    goto LABEL_11;
  }
  uint64_t v13 = 4294950302;
LABEL_11:
  if (cf) {
    CFRelease(cf);
  }
  return v13;
}

uint64_t _createModifiedDecodeOptionsIfNeeded(char *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, int a5, void *a6)
{
  CFArrayRef theArray = 0;
  CFTypeRef cf = 0;
  if (!a6) {
    return 4294950306;
  }
  CFDictionaryRef v8 = a4;
  if (a3 == -1)
  {
    uint64_t v12 = CMPhotoDecompressionContainerCopyTranslatedOptionsForAlternates(a1, a2, a4, 0, (__CFDictionary **)&cf);
    if (v12)
    {
      uint64_t v15 = v12;
      goto LABEL_18;
    }
    CFDictionaryRef v8 = (const __CFDictionary *)cf;
  }
  uint64_t Value = FigCFDictionaryGetValue();
  if (a5 != 4 || Value) {
    goto LABEL_14;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (!CMPhotoDecompressionContainerCopyThumbnailBitDepthForIndexWithOptions(a1, a2, a3, v8, (uint64_t)&theArray))goto LABEL_11; {
LABEL_14:
    }
    if (v8) {
      CFTypeRef v14 = CFRetain(v8);
    }
    else {
      CFTypeRef v14 = 0;
    }
    goto LABEL_17;
  }
  if (CMPhotoDecompressionContainerCopyImageBitDepthForIndexWithOptions(a1, a2, v8, (uint64_t)&theArray)) {
    goto LABEL_14;
  }
LABEL_11:
  if (!theArray) {
    goto LABEL_14;
  }
  if (CFArrayGetCount(theArray) != 1) {
    goto LABEL_14;
  }
  char v20 = 0;
  uint64_t v19 = 0;
  CMPhotoDecompressionContainerFindFirstAuxiliaryOfTypeForInternalIndexWithOptions(a1, (uint64_t)a2, 0, 3, 0, &v20, &v19);
  if (v20) {
    goto LABEL_14;
  }
  CFGetAllocator(a1);
  CGMutableImageMetadataRef MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy)
  {
    uint64_t v15 = 4294950305;
    goto LABEL_18;
  }
  CFTypeRef v14 = MutableCopy;
  uint64_t v18 = CMPhotoCFDictionarySetInt32(MutableCopy, @"OutputPixelFormat", 1278226488);
  if (v18)
  {
    uint64_t v15 = v18;
    CFRelease(v14);
    goto LABEL_18;
  }
LABEL_17:
  uint64_t v15 = 0;
  *a6 = v14;
LABEL_18:
  if (cf) {
    CFRelease(cf);
  }
  if (theArray) {
    CFRelease(theArray);
  }
  return v15;
}

uint64_t CMPhotoDecompressionContainerCopyTranslatedOptionsForAlternates(char *cf, const __CFNumber *a2, const __CFDictionary *a3, int a4, __CFDictionary **a5)
{
  uint64_t v5 = 4294950306;
  if (cf && a5)
  {
    CFDictionaryRef v7 = a3;
    if (*((void *)cf + 68))
    {
      if (a4)
      {
        CFGetAllocator(cf);
        CGMutableImageMetadataRef MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
        if (!MutableCopy) {
          return 4294950305;
        }
        CFDictionaryRef v7 = MutableCopy;
        CFDictionarySetValue(MutableCopy, @"kCMPhotoDecompressionOption_ForTranscode", (const void *)*MEMORY[0x1E4F1CFD0]);
        uint64_t v11 = v7;
      }
      else
      {
        uint64_t v11 = 0;
        if (!a3)
        {
LABEL_34:
          uint64_t v5 = 0;
          *a5 = v11;
          return v5;
        }
      }
      int v12 = CFDictionaryContainsKey(v7, @"AlternateIndex");
      int v13 = CFDictionaryContainsKey(v7, @"SourceCropRect");
      if (v12) {
        BOOL v14 = 1;
      }
      else {
        BOOL v14 = v13 == 0;
      }
      if (!v14)
      {
        uint64_t v35 = -1;
        uint64_t v36 = -1;
        uint64_t v15 = CMPhotoDecompressionContainerExternalToInternalIndex(cf, a2, -1, 0, (const __CFNumber **)&v36, 0, 0);
        if (v15) {
          goto LABEL_38;
        }
        uint64_t v15 = CMPhotoDecompressionContainerExternalToInternalIndex(cf, a2, -1, v7, (const __CFNumber **)&v35, 0, 0);
        if (v15) {
          goto LABEL_38;
        }
        if (v36 != v35)
        {
          uint64_t v33 = 0;
          uint64_t v34 = 0;
          int v32 = 1;
          uint64_t v17 = cf + 32;
          uint64_t v16 = *((void *)cf + 4);
          if (v16) {
            uint64_t v18 = *((void *)cf + 4);
          }
          else {
            uint64_t v18 = 0;
          }
          if (!*(void *)(v18 + 56)) {
            goto LABEL_35;
          }
          uint64_t v15 = (*(uint64_t (**)(char *))(v16 + 56))(cf);
          if (v15) {
            goto LABEL_38;
          }
          uint64_t v30 = 0;
          uint64_t v31 = 0;
          int v29 = 1;
          uint64_t v19 = *(void *)v17 ? *(void *)v17 : 0;
          if (!*(void *)(v19 + 56))
          {
LABEL_35:
            uint64_t v5 = 4294950302;
            if (!v11) {
              return v5;
            }
            goto LABEL_36;
          }
          uint64_t v15 = (*(uint64_t (**)(char *, uint64_t, void, uint64_t *, uint64_t *, int *))(*(void *)v17 + 56))(cf, v35, 0, &v30, &v31, &v29);
          if (v15)
          {
LABEL_38:
            uint64_t v5 = v15;
            if (!v11) {
              return v5;
            }
            goto LABEL_36;
          }
          if (v33 != v30 || v34 != v31 || v29 != v32)
          {
            uint64x2_t v27 = 0u;
            uint64x2_t v28 = 0u;
            uint64_t Value = CFDictionaryGetValue(v7, @"SourceCropRect");
            uint64_t v15 = CMPhotoDecompressionContainerValidateSourceCropRect(Value, v33, v34, 0, (int64x2_t *)&v27);
            if (!v15)
            {
              uint64x2_t v25 = v27;
              uint64x2_t v26 = v28;
              v24[0] = v27;
              v24[1] = v28;
              uint64_t v15 = CMPhotoTranslateAndScalePreOrientationCrop(v33, v34, v24, v32, v30, v31, v29, &v25, 0);
              if (!v15)
              {
                if (v11 || (CFGetAllocator(cf), (uint64_t v11 = (__CFDictionary *)FigCFDictionaryCreateMutableCopy()) != 0))
                {
                  v37.origin.x = (double)v25.u64[0];
                  v37.origin.y = (double)v25.u64[1];
                  v37.size.double width = (double)v26.u64[0];
                  v37.size.double height = (double)v26.u64[1];
                  CFDictionaryRef DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v37);
                  if (DictionaryRepresentation)
                  {
                    CFDictionaryRef v22 = DictionaryRepresentation;
                    CFDictionarySetValue(v11, @"SourceCropRect", DictionaryRepresentation);
                    CFRelease(v22);
                    goto LABEL_34;
                  }
                  uint64_t v5 = 4294950305;
LABEL_36:
                  CFRelease(v11);
                  return v5;
                }
                return 4294950305;
              }
            }
            goto LABEL_38;
          }
        }
      }
      if (v11) {
        goto LABEL_34;
      }
    }
    else if (!a3)
    {
      uint64_t v11 = 0;
      goto LABEL_34;
    }
    uint64_t v11 = (__CFDictionary *)CFRetain(v7);
    goto LABEL_34;
  }
  return v5;
}

uint64_t CMPhotoDecompressionContainerCopyImageBitDepthForIndexWithOptions(void *a1, const __CFNumber *a2, const __CFDictionary *a3, uint64_t a4)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v10 = -1;
  uint64_t result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a3, (const __CFNumber **)&v10, 0, 0);
  if (!result)
  {
    if (a4)
    {
      uint64_t v8 = a1[4];
      if (v8) {
        uint64_t v9 = a1[4];
      }
      else {
        uint64_t v9 = 0;
      }
      if (*(void *)(v9 + 64)) {
        return (*(uint64_t (**)(void *, uint64_t, const __CFDictionary *, uint64_t))(v8 + 64))(a1, v10, a3, a4);
      }
      else {
        return 4294950302;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t _copyImageBitDepthForIndex(uint64_t a1, unint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  CFTypeRef cf = 0;
  unint64_t v14 = a2;
  if (!a4) {
    return 0;
  }
  uint64_t v6 = a1 + 40;
  char v12 = 0;
  uint64_t v7 = _checkImageIndex(a1 + 40, &v14, &v12);
  if (v7) {
    return v7;
  }
  uint64_t v7 = _parseImageSizeAndTypeIfNeeded(v6);
  if (v7) {
    return v7;
  }
  if (*(int *)(a1 + 136) <= 10) {
    int v8 = 10;
  }
  else {
    int v8 = *(_DWORD *)(a1 + 136);
  }
  if (v12) {
    int v9 = v8;
  }
  else {
    int v9 = *(_DWORD *)(a1 + 136);
  }
  uint64_t BitDepthArray = _createBitDepthArray(*(const __CFAllocator **)(a1 + 40), *(_DWORD *)(a1 + 128), v9, (__CFArray **)&cf);
  if (BitDepthArray)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    *a4 = cf;
  }
  return BitDepthArray;
}

uint64_t _copyImageBitDepthForIndex_0(uint64_t a1, uint64_t a2, uint64_t a3, __CFArray **a4)
{
  if (!a4) {
    return 0;
  }
  if (!a2)
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(*(CFAllocatorRef *)(a1 + 40), 4, MEMORY[0x1E4F1D510]);
    if (!Mutable) {
      return 4294950305;
    }
    uint64_t v7 = Mutable;
    if (*(_DWORD *)(a1 + 136))
    {
      int v8 = 0;
      while (1)
      {
        uint64_t appended = CMPhotoCFArrayAppendInt32(v7, *(_DWORD *)(a1 + 96));
        if (appended) {
          break;
        }
        if (++v8 >= *(_DWORD *)(a1 + 136)) {
          goto LABEL_8;
        }
      }
      uint64_t v10 = appended;
      CFRelease(v7);
    }
    else
    {
LABEL_8:
      uint64_t v10 = 0;
      *a4 = v7;
    }
    return v10;
  }
  return FigSignalErrorAt();
}

uint64_t _copyImageBitDepthForIndex_1(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  CFTypeRef cf = 0;
  if (!a4) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  int v9 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, void))(v8 + 16);
  if (!v9) {
    return 4294954514;
  }
  uint64_t v10 = v9(v6, a2, &cf, 0);
  CFTypeRef v11 = cf;
  if (!v10)
  {
    uint64_t v10 = CMPhotoPictureReaderCopyImageBitDepth(cf, a4);
    CFTypeRef v11 = cf;
  }
  if (v11) {
    CFRelease(v11);
  }
  return v10;
}

uint64_t _copyImageBitDepthForIndex_2(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  CMFormatDescriptionRef desc = 0;
  CFTypeRef cf = 0;
  if (!a4) {
    return 0;
  }
  uint64_t v5 = _copyFormatDescriptionForTrackReader(*(void *)(*(void *)(a1 + 80) + 8), &desc);
  if (v5)
  {
    uint64_t v6 = v5;
  }
  else if (CMFormatDescriptionGetExtensions(desc))
  {
    uint64_t v6 = CMPhotoCopyImageBitDepthFromFormatDescription(desc, (CFMutableArrayRef *)&cf);
    if (!v6)
    {
      *a4 = cf;
      CFTypeRef cf = 0;
    }
  }
  else
  {
    uint64_t v6 = 4294950303;
  }
  if (desc) {
    CFRelease(desc);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

uint64_t _decodeImageForIndexAsync(uint64_t a1, unint64_t a2, const void *a3, int a4, void *a5, uint64_t a6, uint64_t a7)
{
  unint64_t v15 = a2;
  char v14 = 0;
  uint64_t result = _checkImageIndex(a1 + 40, &v15, &v14);
  if (!result) {
    return _queueAsyncImageDecode(a1, 0, 0, a3, v14, a4, a5, a6, a7);
  }
  return result;
}

uint64_t _decodeImageForIndexAsync_0(uint64_t a1, uint64_t a2, const void *a3, int a4, void *a5, uint64_t a6, uint64_t a7)
{
  if (!a2)
  {
    char v29 = 0;
    *(void *)uint64x2_t v28 = 0;
    memset(v27, 0, sizeof(v27));
    if (a3)
    {
      DeepCopy = CMPhotoDictionaryCreateDeepCopy(*(const __CFAllocator **)(a1 + 40), a3);
      if (!DeepCopy) {
        return 4294950305;
      }
      unint64_t v15 = DeepCopy;
      char v26 = 0;
      if (CMPhotoCFDictionaryGetBooleanIfPresent((CFDictionaryRef)a3, @"PreferLowMemory", &v26)) {
        v27[0] = v26;
      }
      CMPhotoCFDictionaryGetBooleanIfPresent((CFDictionaryRef)a3, @"HighPriority", &v29);
      CMPhotoCFDictionaryGetBooleanIfPresent((CFDictionaryRef)a3, @"UseLimitedConcurrencyQueue", v27);
      int SizeIfPresent = CMPhotoCFDictionaryGetSizeIfPresent((const __CFDictionary *)a3, @"ReservedRequestID", v28);
      if (CMPhotoCFDictionaryGetIntIfPresent((CFDictionaryRef)a3, @"AccelerationMode", &v27[1]))
      {
        if (*(_DWORD *)&v27[1] > 1u)
        {
LABEL_27:
          uint64_t v22 = FigSignalErrorAt();
          int v23 = 0;
          goto LABEL_28;
        }
        *(_DWORD *)&v27[1] = 1;
      }
      if (SizeIfPresent)
      {
        uint64_t v17 = *(void *)v28;
        if (!*(void *)v28) {
          goto LABEL_27;
        }
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v15 = 0;
    }
    uint64_t v18 = CMPhotoDecompressionSessionReserveRequestID(*(void *)(a1 + 16), v28);
    if (v18)
    {
      uint64_t v22 = v18;
      int v23 = 0;
      goto LABEL_24;
    }
    uint64_t v17 = *(void *)v28;
LABEL_15:
    AsyncRequest = CMPhotoDecompressionSessionCreateAsyncRequest(0x40uLL, v17, v29 != 0, (const void *)a1, v27[0], 0, a6, a7, a4);
    if (AsyncRequest)
    {
      char v20 = AsyncRequest;
      AsyncRequest[12] = 0;
      if (v15) {
        CFTypeRef v21 = CFRetain(v15);
      }
      else {
        CFTypeRef v21 = 0;
      }
      *((void *)v20 + 7) = v21;
      if (a5) {
        *a5 = *(void *)v28;
      }
      uint64_t v22 = CMPhotoDecompressionSessionEnqueueAsynchronousRequest(*(void *)(a1 + 16), (const void **)v20);
      if (v22) {
        int v23 = v20;
      }
      else {
        int v23 = 0;
      }
    }
    else
    {
      int v23 = 0;
      uint64_t v22 = 4294950305;
    }
LABEL_24:
    if (!v15)
    {
      if (v23)
      {
LABEL_29:
        int v24 = (const void *)v23[7];
        if (v24)
        {
          CFRelease(v24);
          v23[7] = 0;
        }
        CMPhotoDecompressionSessionFreeAsyncRequest(v23);
      }
      return v22;
    }
LABEL_28:
    CFRelease(v15);
    if (v23) {
      goto LABEL_29;
    }
    return v22;
  }
  return FigSignalErrorAt();
}

uint64_t _decodeImageForIndexAsync_1(uint64_t *a1, uint64_t a2, const __CFDictionary *a3, int a4, void *a5, uint64_t a6, uint64_t a7)
{
  return _decodeImageAsync(a1, a2, -1, 0, a3, a4, a5, a6, a7);
}

uint64_t _queueAsyncImageDecode(uint64_t a1, int a2, uint64_t a3, const void *a4, char a5, int a6, void *a7, uint64_t a8, uint64_t a9)
{
  char v37 = 0;
  *(void *)uint64_t v36 = 0;
  memset(v35, 0, sizeof(v35));
  if (!a4)
  {
    uint64_t v18 = 0;
    goto LABEL_13;
  }
  DeepCopy = CMPhotoDictionaryCreateDeepCopy(*(const __CFAllocator **)(a1 + 40), a4);
  if (!DeepCopy) {
    return 4294950305;
  }
  uint64_t v18 = DeepCopy;
  LOBYTE(v34[0]) = 0;
  if (CMPhotoCFDictionaryGetBooleanIfPresent((CFDictionaryRef)a4, @"PreferLowMemory", v34)) {
    v35[0] = v34[0];
  }
  CMPhotoCFDictionaryGetBooleanIfPresent((CFDictionaryRef)a4, @"HighPriority", &v37);
  CMPhotoCFDictionaryGetBooleanIfPresent((CFDictionaryRef)a4, @"UseLimitedConcurrencyQueue", v35);
  int SizeIfPresent = CMPhotoCFDictionaryGetSizeIfPresent((const __CFDictionary *)a4, @"ReservedRequestID", v36);
  if (CMPhotoCFDictionaryGetIntIfPresent((CFDictionaryRef)a4, @"AccelerationMode", &v35[1])) {
    BOOL v20 = *(_DWORD *)&v35[1] >= 3u;
  }
  else {
    BOOL v20 = 0;
  }
  if (v20) {
    goto LABEL_11;
  }
  if (!SizeIfPresent)
  {
LABEL_13:
    uint64_t v23 = CMPhotoDecompressionSessionReserveRequestID(*(void *)(a1 + 16), v36);
    if (v23)
    {
      uint64_t v21 = v23;
      uint64_t v22 = 0;
      goto LABEL_28;
    }
LABEL_14:
    if (a2 == 2)
    {
      int v24 = 1;
      *(_DWORD *)&v35[1] = 1;
    }
    else
    {
      int v24 = *(_DWORD *)&v35[1];
    }
    uint64_t v25 = *(void *)(a1 + 96);
    memset(v34, 0, sizeof(v34));
    char ShouldUseHWForOperation = CMPhotoUnifiedJPEGDecoderShouldUseHWForOperation(v25, v24);
    AsyncRequest = CMPhotoDecompressionSessionCreateAsyncRequest(0x58uLL, *(uint64_t *)v36, v37 != 0, (const void *)a1, v35[0], ShouldUseHWForOperation, a8, a9, a6);
    if (AsyncRequest)
    {
      uint64x2_t v28 = AsyncRequest;
      CFTypeRef v29 = *(CFTypeRef *)(a1 + 64);
      if (v29) {
        CFTypeRef v29 = CFRetain(v29);
      }
      *((void *)v28 + 6) = v29;
      *((unsigned char *)v28 + 72) = a5;
      v28[14] = a2;
      *((void *)v28 + 8) = a3;
      if (v18) {
        CFTypeRef v30 = CFRetain(v18);
      }
      else {
        CFTypeRef v30 = 0;
      }
      *((void *)v28 + 10) = v30;
      if (a7) {
        *a7 = *(void *)v36;
      }
      uint64_t v21 = CMPhotoDecompressionSessionEnqueueAsynchronousRequest(*(void *)(a1 + 16), (const void **)v28);
      if (v21) {
        uint64_t v22 = v28;
      }
      else {
        uint64_t v22 = 0;
      }
    }
    else
    {
      uint64_t v22 = 0;
      uint64_t v21 = 4294950305;
    }
LABEL_28:
    if (!v18) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (*(void *)v36) {
    goto LABEL_14;
  }
LABEL_11:
  uint64_t v21 = FigSignalErrorAt();
  uint64_t v22 = 0;
LABEL_29:
  CFRelease(v18);
LABEL_30:
  if (v22)
  {
    uint64_t v31 = (const void *)v22[6];
    if (v31)
    {
      CFRelease(v31);
      v22[6] = 0;
    }
    int v32 = (const void *)v22[10];
    if (v32)
    {
      CFRelease(v32);
      v22[10] = 0;
    }
    CMPhotoDecompressionSessionFreeAsyncRequest(v22);
  }
  return v21;
}

BOOL CMPhotoUnifiedJPEGDecoderFileSupportedByHardware(uint64_t a1, uint64_t a2)
{
  if (_isHWAvailableHelper_onceToken != -1) {
    dispatch_once(&_isHWAvailableHelper_onceToken, &__block_literal_global_6);
  }
  return _isHWAvailableHelper_sHWAvailable
      && (*(_DWORD *)(a1 + 48) == 4 || *(void *)(a1 + 32) <= 0xC800000uLL)
      && _createHWDecoderIfNeeded(a1, a2) == 0;
}

uint64_t _prepare(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, BOOL *a8)
{
  BOOL ShouldUseHWForOperation = CMPhotoUnifiedJPEGDecoderShouldUseHWForOperation(a1, a3);
  char v14 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (ShouldUseHWForOperation)
  {
    if (*MEMORY[0x1E4F1EBA8] == 1) {
      kdebug_trace();
    }
    uint64_t HWDecoderIfNeeded = _createHWDecoderIfNeeded(a1, a2);
    if (*v14 == 1) {
      kdebug_trace();
    }
    BOOL v16 = a3 != 2;
    if (!HWDecoderIfNeeded) {
      BOOL v16 = 0;
    }
    if (a3 == 2 && HWDecoderIfNeeded) {
      return HWDecoderIfNeeded;
    }
    BOOL v17 = !v16;
    if (!v16 && (a3 || !a6))
    {
      if (!a8) {
        return 0;
      }
LABEL_22:
      uint64_t HWDecoderIfNeeded = 0;
      *a8 = v17;
      return HWDecoderIfNeeded;
    }
  }
  else
  {
    BOOL v17 = 0;
  }
  if (*v14 == 1) {
    kdebug_trace();
  }
  uint64_t HWDecoderIfNeeded = _createSWDecoderIfNeeded(a1, a6);
  if (*v14 == 1) {
    kdebug_trace();
  }
  if (a8 && !HWDecoderIfNeeded) {
    goto LABEL_22;
  }
  return HWDecoderIfNeeded;
}

uint64_t _createHWDecoderIfNeeded(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  if (*(unsigned char *)(a1 + 144))
  {
    DataWrappingIOSurfaceRef IOSurface = 0;
    int v14 = 0;
    if (*(void *)(a1 + 224)) {
      unsigned int DataPointer = 0;
    }
    else {
      unsigned int DataPointer = -16996;
    }
    goto LABEL_52;
  }
  *(_DWORD *)(a1 + 148) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  size_t Length = 0;
  int v4 = *(_DWORD *)(a1 + 48);
  if (v4 == 1)
  {
    if (((unint64_t)CFDataGetBytePtr(*(CFDataRef *)(a1 + 40)) & 0x1F) == 0
      && (unint64_t)CFDataGetLength(*(CFDataRef *)(a1 + 40)) > 0x800000)
    {
      uint64_t v5 = *(const void **)(a1 + 40);
      if (v5)
      {
        DataWrappingIOSurfaceRef IOSurface = (const __CFData *)CFRetain(v5);
        uint64_t v5 = *(const void **)(a1 + 40);
      }
      else
      {
        DataWrappingIOSurfaceRef IOSurface = 0;
      }
      size_t Length = CFDataGetLength((CFDataRef)v5);
      BytePtr = CFDataGetBytePtr(DataWrappingIOSurface);
      char v12 = 1;
      CMPhotoCreateMemorySurface(Length, 1246774599, 1, (uint64_t)BytePtr, Length, 0, (__IOSurface **)&cf);
      int v13 = 0;
LABEL_24:
      if (cf) {
        goto LABEL_25;
      }
      goto LABEL_29;
    }
    int v4 = *(_DWORD *)(a1 + 48);
  }
  if (v4 == 2)
  {
    if (!CMBlockBufferIsRangeContiguous(*(CMBlockBufferRef *)(a1 + 40), 0, 0)) {
      goto LABEL_23;
    }
    dataPointerOut = 0;
    size_t lengthAtOffsetOut = 0;
    unsigned int DataPointer = CMBlockBufferGetDataPointer(*(CMBlockBufferRef *)(a1 + 40), 0, &lengthAtOffsetOut, 0, &dataPointerOut);
    if (!DataPointer)
    {
      CFDataRef v10 = CFDataCreateWithBytesNoCopy(*(CFAllocatorRef *)(a1 + 8), (const UInt8 *)dataPointerOut, lengthAtOffsetOut, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
      if (v10)
      {
        DataWrappingIOSurfaceRef IOSurface = v10;
        uint64_t v25 = 0;
        if (CMPhotoCopyBackingIOSurfaceFromStorage(*(void *)(a1 + 40), 2, &cf, &v25, &Length) || v25)
        {
          if (cf)
          {
            CFRelease(cf);
            CFTypeRef cf = 0;
          }
          uint64_t MemorySurface = CMPhotoCreateMemorySurface(lengthAtOffsetOut, 1246774599, 1, (uint64_t)dataPointerOut, lengthAtOffsetOut, 0, (__IOSurface **)&cf);
          if (MemorySurface) {
            goto LABEL_71;
          }
          size_t Length = lengthAtOffsetOut;
        }
        uint64_t MemorySurface = IOSurfaceLock((IOSurfaceRef)cf, 0, 0);
        if (!MemorySurface)
        {
          char v12 = 0;
          int v13 = 1;
          goto LABEL_24;
        }
LABEL_71:
        uint64_t v18 = MemorySurface;
        goto LABEL_58;
      }
      unsigned int DataPointer = -16991;
    }
    DataWrappingIOSurfaceRef IOSurface = 0;
    int v14 = 0;
LABEL_52:
    if (*(unsigned __int8 *)(a1 + 145) | DataPointer) {
      uint64_t v18 = DataPointer;
    }
    else {
      uint64_t v18 = 4294950300;
    }
    goto LABEL_55;
  }
  if (v4 != 4)
  {
LABEL_23:
    DataWrappingIOSurfaceRef IOSurface = 0;
    int v13 = 0;
    size_t Length = *(void *)(a1 + 32);
    char v12 = 1;
    goto LABEL_24;
  }
  uint64_t v7 = *(const void **)(a1 + 40);
  if (v7) {
    uint64_t v8 = (void *)CFRetain(v7);
  }
  else {
    uint64_t v8 = 0;
  }
  CFTypeRef cf = v8;
  DataWrappingIOSurfaceRef IOSurface = 0;
  int v13 = 0;
  size_t Length = IOSurfaceGetAllocSize((IOSurfaceRef)v8);
  char v12 = 1;
  if (v8)
  {
LABEL_25:
    int v14 = 0;
    if (DataWrappingIOSurface) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
LABEL_29:
  unsigned int PooledIOSurfaceFromStreamRange = _createPooledIOSurfaceFromStreamRange(a2, *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), (uint64_t *)&Length, (IOSurfaceRef *)&cf);
  if (PooledIOSurfaceFromStreamRange)
  {
    int v14 = 0;
    goto LABEL_37;
  }
  int v14 = 1;
  if (DataWrappingIOSurface) {
    goto LABEL_32;
  }
LABEL_31:
  DataWrappingIOSurfaceRef IOSurface = CMPhotoCreateDataWrappingIOSurface(*(const __CFAllocator **)(a1 + 8), (IOSurfaceRef)cf, 0, Length);
  if (!DataWrappingIOSurface)
  {
    unsigned int PooledIOSurfaceFromStreamRange = -16991;
    goto LABEL_37;
  }
LABEL_32:
  BOOL v16 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  int v17 = JPEGParseJPEGInfo(DataWrappingIOSurface, a1 + 148, 0, 0);
  if (*v16 == 1) {
    kdebug_trace();
  }
  *(unsigned char *)(a1 + 144) = 1;
  unsigned int PooledIOSurfaceFromStreamRange = -16996;
  if (!*(unsigned char *)(a1 + 208))
  {
    unint64_t v19 = 1024;
    if (*(unsigned char *)(a1 + 180) == 1) {
      unint64_t v19 = 1536;
    }
    unint64_t v20 = (*(_DWORD *)(a1 + 152) * *(_DWORD *)(a1 + 148));
    unsigned int PooledIOSurfaceFromStreamRange = v19 >= v20 ? -16996 : v17;
    if (v19 < v20 && !PooledIOSurfaceFromStreamRange)
    {
      *(unsigned char *)(a1 + 145) = 1;
      if ((v12 & 1) == 0) {
        IOSurfaceUnlock((IOSurfaceRef)cf, 0, 0);
      }
      unsigned int DataPointer = 0;
      size_t v21 = Length;
      *(void *)(a1 + 224) = cf;
      *(void *)(a1 + 232) = v21;
      CFTypeRef cf = 0;
      *(unsigned char *)(a1 + 240) = v14;
      goto LABEL_52;
    }
  }
LABEL_37:
  if (*(unsigned __int8 *)(a1 + 145) | PooledIOSurfaceFromStreamRange) {
    uint64_t v18 = PooledIOSurfaceFromStreamRange;
  }
  else {
    uint64_t v18 = 4294950300;
  }
  if (v13) {
    IOSurfaceUnlock((IOSurfaceRef)cf, 0, 0);
  }
LABEL_55:
  CFTypeRef v22 = cf;
  if (v14 && cf)
  {
    IOSurfaceDecrementUseCount((IOSurfaceRef)cf);
LABEL_58:
    CFTypeRef v22 = cf;
  }
  if (v22) {
    CFRelease(v22);
  }
  if (DataWrappingIOSurface) {
    CFRelease(DataWrappingIOSurface);
  }
  return v18;
}

BOOL CMPhotoUnifiedJPEGDecoderShouldUseHWForOperation(uint64_t a1, int a2)
{
  if (a2 == 2) {
    return 1;
  }
  ShouldUseHWDecoderForCFNumberRef Size = CMPhotoShouldUseHWDecoderForSize(*(void *)(a1 + 64) * *(void *)(a1 + 56), 1);
  if (*(_DWORD *)(a1 + 48) == 4)
  {
    if (!ShouldUseHWDecoderForSize) {
      return 0;
    }
  }
  else if (*(void *)(a1 + 32) > 0xC800000uLL || !ShouldUseHWDecoderForSize)
  {
    return 0;
  }
  if (_isHWAvailableHelper_onceToken == -1)
  {
    if (a2) {
      return 0;
    }
  }
  else
  {
    dispatch_once(&_isHWAvailableHelper_onceToken, &__block_literal_global_6);
    if (a2) {
      return 0;
    }
  }
  return _isHWAvailableHelper_sHWAvailable && JPEGDeviceInterface_supportsAppleInterchangeFormats();
}

BOOL CMPhotoShouldUseHWDecoderForSize(unint64_t a1, int a2)
{
  CFTypeID v2 = (unint64_t *)&g_cutOffHEIF;
  if (a2) {
    CFTypeID v2 = (unint64_t *)&g_cutOffJPEG;
  }
  return *v2 <= a1;
}

uint64_t JPEGDeviceInterface_supportsAppleInterchangeFormats()
{
  return _supportsAppleInterchangeFormats;
}

uint64_t JPEGParseJPEGInfo(const __CFData *a1, uint64_t a2, uint64_t a3, int a4)
{
  CFDataRef v7 = a1;
  BytePtr = CFDataGetBytePtr(a1);
  unint64_t Length = CFDataGetLength(v7);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 20) = 0x100000001;
  if (Length < 3) {
    return 4294954387;
  }
  if (BytePtr[1] != 216) {
    return 4294954387;
  }
  *(_DWORD *)(a2 + 56) = 2;
  unint64_t v10 = Length - 2;
  if (Length - 2 < 4) {
    return 4294954387;
  }
  uint64_t v11 = 0;
  CFMutableArrayRef Mutable = 0;
  int v13 = 0;
  unsigned int v107 = 0;
  unsigned int v14 = 0;
  int v15 = 0;
  BOOL v16 = (unsigned __int8 *)(BytePtr + 2);
  CFAllocatorRef v17 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  unint64_t v18 = Length - 2;
  int v19 = 1;
  do
  {
    if (*v16 != 255)
    {
      int v20 = 0;
      --v18;
      ++v16;
      continue;
    }
    unsigned int v21 = v16[1];
    unint64_t v22 = __rev16(*((unsigned __int16 *)v16 + 1));
    unint64_t v23 = v22 + 2;
    if (v21 <= 0xE1)
    {
      if (v16[1] > 0xD9u)
      {
        if (v21 == 218)
        {
          uint64_t v24 = 4294954387;
          if ((v11 & 1) == 0 || v18 < 0xA || v23 > v18) {
            goto LABEL_224;
          }
          if (v16[4] != *(unsigned __int8 *)(a2 + 32)) {
            goto LABEL_199;
          }
          int v20 = 1;
LABEL_87:
          uint64_t v11 = 1;
          goto LABEL_184;
        }
        if (v21 == 221)
        {
          uint64_t v24 = 4294954387;
          if (v18 < 6 || v22 != 4) {
            goto LABEL_224;
          }
          int v20 = 0;
          *(_DWORD *)(a2 + 28) = __rev16(*((unsigned __int16 *)v16 + 2));
          unint64_t v23 = 6;
          goto LABEL_184;
        }
      }
      else if (v21 == 192 || v21 == 194)
      {
        uint64_t v24 = 4294954387;
        if (v18 < 0xD || v23 > v18) {
          goto LABEL_224;
        }
        *(unsigned char *)(a2 + 60) = v21 == 194;
        if (v16[4] != 8) {
          goto LABEL_199;
        }
        *(_DWORD *)(a2 + 4) = __rev16(*(unsigned __int16 *)(v16 + 5));
        *(_DWORD *)a2 = __rev16(*(unsigned __int16 *)(v16 + 7));
        uint64_t v25 = v16[9];
        *(unsigned char *)(a2 + 32) = v25;
        if (v22 != 3 * v25 + 8) {
          goto LABEL_199;
        }
        if (v25 == 3)
        {
          uint64_t v33 = 0;
          uint64_t v34 = v16 + 11;
          while (1)
          {
            int v36 = *v34;
            v34 += 3;
            int v35 = v36;
            v108[v33] = v36;
            if (v33)
            {
              if (v35 != 17) {
                goto LABEL_199;
              }
            }
            if (++v33 == 3)
            {
              if (v108[0] > 0x21u)
              {
                if (v108[0] == 34)
                {
                  int v37 = 0;
                  uint64_t v38 = 0x1000000010;
                }
                else
                {
                  if (v108[0] != 65) {
                    goto LABEL_199;
                  }
                  int v37 = 3;
                  uint64_t v38 = 0x800000020;
                }
              }
              else if (v108[0] == 17)
              {
                uint64_t v38 = 0x800000008;
                int v37 = 2;
              }
              else
              {
                if (v108[0] != 33) {
                  goto LABEL_199;
                }
                int v37 = 1;
                uint64_t v38 = 0x800000010;
              }
              int v20 = 0;
              *(void *)(a2 + 8) = v38;
              *(_DWORD *)(a2 + 16) = v37;
              goto LABEL_87;
            }
          }
        }
        if (v25 != 1) {
          goto LABEL_199;
        }
        int v20 = 0;
        *(void *)(a2 + 8) = 0x800000008;
        *(_DWORD *)(a2 + 16) = 4;
        goto LABEL_87;
      }
      goto LABEL_54;
    }
    if (v16[1] <= 0xEDu)
    {
      if (v21 != 226)
      {
        if (v21 == 234)
        {
          if (v18 >= 0xE)
          {
            if (v23 > v18) {
              goto LABEL_227;
            }
            if (v22 >= 0xC)
            {
              uint64_t v26 = v11;
              if (*((_DWORD *)v16 + 1) ^ 0x544F5241 | *((unsigned __int16 *)v16 + 4)) {
                goto LABEL_25;
              }
              if (!__rev16(*((unsigned __int16 *)v16 + 5)))
              {
                unsigned int v44 = __rev16(*((unsigned __int16 *)v16 + 6));
                if (v44 && v22 >= 4 * v44 + 12)
                {
                  int v20 = 0;
                  *(unsigned char *)(a2 + 33) = 1;
                  *(_DWORD *)(a2 + 36) = v44;
                  *(_DWORD *)(a2 + 40) = v16 - BytePtr + 14;
                }
                else
                {
LABEL_25:
                  int v20 = 0;
                }
                goto LABEL_183;
              }
            }
          }
LABEL_58:
          int v20 = 0;
          goto LABEL_184;
        }
        goto LABEL_54;
      }
      int v20 = 0;
      if (!(_BYTE)a4 || v18 < 0x12) {
        goto LABEL_184;
      }
      if (v23 > v18) {
        goto LABEL_227;
      }
      CFIndex v27 = v22 - 16;
      if (v22 < 0x10) {
        goto LABEL_58;
      }
      unsigned int v97 = v11;
      int v98 = v15;
      int v105 = v19;
      unsigned int v101 = v14;
      CFAllocatorRef allocator = v17;
      unint64_t v99 = v10;
      unint64_t v100 = Length;
      int v95 = a4;
      int v96 = v13;
      uint64x2_t v28 = BytePtr;
      uint64_t v29 = a3;
      CFDataRef v30 = v7;
      uint64_t v31 = Mutable;
      if (strncmp((const char *)v16 + 4, "ICC_PROFILE", 0xCuLL))
      {
        int v20 = 0;
        CFMutableArrayRef Mutable = v31;
        CFDataRef v7 = v30;
        a3 = v29;
        BytePtr = v28;
        a4 = v95;
        int v13 = v96;
        unint64_t v10 = v99;
        unint64_t Length = v100;
        int v15 = v98;
        unsigned int v14 = v101;
LABEL_40:
        int v19 = v105;
        uint64_t v11 = v97;
        goto LABEL_184;
      }
      unsigned int v43 = v16[17];
      CFMutableArrayRef Mutable = v31;
      int v13 = v96;
      unsigned int v14 = v101;
      if (v16[17])
      {
        CFDataRef v7 = v30;
        unint64_t v10 = v99;
        unint64_t Length = v100;
        uint64_t v11 = v97;
        int v15 = v98;
        int v19 = v105;
        if (v107 && v107 != v43)
        {
          unsigned int v43 = v107;
          a3 = v29;
          BytePtr = v28;
          goto LABEL_112;
        }
        unsigned int v45 = v16[16];
        a3 = v29;
        if (v43 <= (v45 - 1))
        {
          BytePtr = v28;
LABEL_111:
          CFAllocatorRef v17 = allocator;
LABEL_112:
          a4 = 0;
          int v20 = 0;
          unsigned int v107 = v43;
          goto LABEL_184;
        }
        BytePtr = v28;
        if (v101 + 1 != v45) {
          goto LABEL_111;
        }
        unsigned int v107 = v16[17];
        a4 = v95;
        if (!Mutable)
        {
          CFMutableArrayRef Mutable = CFDataCreateMutable(allocator, 0);
          if (!Mutable)
          {
            unint64_t v10 = v99;
            unint64_t Length = v100;
            int v13 = v96;
            uint64_t v11 = v97;
            int v15 = v98;
            CFAllocatorRef v17 = allocator;
            unsigned int v14 = v101;
            int v19 = v105;
            unsigned int v43 = v107;
            goto LABEL_112;
          }
          unsigned int v45 = v16[16];
        }
        int v102 = Mutable;
        CFDataAppendBytes(Mutable, v16 + 18, v27);
        unsigned int v43 = v107;
        if (v45 != v107)
        {
          unsigned int v14 = v45;
          int v20 = 0;
          unint64_t Length = v100;
          CFMutableArrayRef Mutable = v102;
          int v13 = v96;
          unint64_t v10 = v99;
          int v15 = v98;
          CFAllocatorRef v17 = allocator;
          goto LABEL_40;
        }
        int v13 = 1;
        unsigned int v14 = v107;
        unint64_t Length = v100;
        CFMutableArrayRef Mutable = v102;
        unint64_t v10 = v99;
        int v15 = v98;
        CFAllocatorRef v17 = allocator;
      }
      else
      {
        unsigned int v43 = v107;
        CFDataRef v7 = v30;
        a3 = v29;
        BytePtr = v28;
        unint64_t v10 = v99;
        unint64_t Length = v100;
        int v15 = v98;
      }
      int v19 = v105;
      uint64_t v11 = v97;
      goto LABEL_112;
    }
    if (v21 == 238)
    {
      if (v18 < 0x10) {
        goto LABEL_58;
      }
      if (v23 > v18) {
        goto LABEL_227;
      }
      if (*((_DWORD *)v16 + 1) != 1651467329 || v16[8] != 101) {
        goto LABEL_58;
      }
      int v20 = 0;
      int v19 = v16[15];
      int v15 = 1;
      goto LABEL_184;
    }
    if (v21 == 255)
    {
      int v20 = 0;
      unint64_t v23 = 1;
      goto LABEL_184;
    }
LABEL_54:
    uint64_t v26 = v11;
    int v20 = 0;
    if ((v21 & 0xF0) != 0xE0) {
      goto LABEL_183;
    }
    if (v18 >= 0xA)
    {
      if (v23 > v18) {
        goto LABEL_227;
      }
      if (v22 >= 8)
      {
        int v106 = v19;
        int v20 = 0;
        if (*((_DWORD *)v16 + 1) ^ 0x66697845 | *((unsigned __int16 *)v16 + 4)) {
          goto LABEL_182;
        }
        if (v22 - 2 < 0x10) {
          goto LABEL_183;
        }
        if (v16[4] == 69 && v16[5] == 120 && v16[6] == 105 && v16[7] == 102 && !v16[8])
        {
          if (!v16[9])
          {
            unint64_t v40 = v16 + 10;
            int v39 = v16[10];
            if (v39 == 73)
            {
              if (v16[11] == 73 && v16[12] == 42 && !v16[13])
              {
                int v42 = 0;
                unsigned int v41 = *(_DWORD *)(v16 + 14);
                goto LABEL_114;
              }
            }
            else if (v39 == 77 && v16[11] == 77 && !v16[12] && v16[13] == 42)
            {
              unsigned int v41 = bswap32(*(_DWORD *)(v16 + 14));
              int v42 = 1;
LABEL_114:
              int v20 = 0;
              if (v41 >= 8)
              {
                unsigned int v103 = v14;
                if ((v41 & 1) == 0)
                {
                  uint64_t v46 = v41;
                  unint64_t v47 = v22 - 10;
                  unint64_t v48 = v47 - v41;
                  if (v47 >= v41)
                  {
                    int v20 = 0;
                    unsigned int v49 = *(unsigned __int16 *)&v40[v41];
                    unsigned int v50 = bswap32(v49) >> 16;
                    if (v42) {
                      unsigned int v49 = v50;
                    }
                    if ((_WORD)v49 && 12 * (unint64_t)(unsigned __int16)v49 <= v48)
                    {
                      unsigned int v51 = 0;
                      int v52 = 0;
                      int v53 = 0;
                      CGFloat v54 = (unsigned int *)&v16[v46 + 20];
                      do
                      {
                        unsigned int v55 = *((unsigned __int16 *)v54 - 4);
                        unsigned int v56 = bswap32(v55) >> 16;
                        if (v42) {
                          LOWORD(v55) = v56;
                        }
                        unsigned int v57 = bswap32(*((unsigned __int16 *)v54 - 3)) >> 16;
                        if (!v42) {
                          LOWORD(v57) = *((_WORD *)v54 - 3);
                        }
                        unsigned int v58 = *(v54 - 1);
                        unsigned int v59 = bswap32(v58);
                        if (v42) {
                          unsigned int v58 = v59;
                        }
                        if ((unsigned __int16)v55 == 274 && (unsigned __int16)v57 == 3 && v58 == 1)
                        {
                          unsigned int v65 = *(unsigned __int16 *)v54;
                          unsigned int v66 = bswap32(v65) >> 16;
                          if (v42) {
                            LOWORD(v65) = v66;
                          }
                          if ((_WORD)v65)
                          {
                            *(_DWORD *)(a2 + 20) = (unsigned __int16)v65;
                            int v53 = 1;
                          }
                        }
                        else if ((unsigned __int16)v55 == 34665 && (unsigned __int16)v57 == 4 && v58 == 1)
                        {
                          unsigned int v51 = *v54;
                          unsigned int v64 = bswap32(*v54);
                          if (v42) {
                            unsigned int v51 = v64;
                          }
                          int v52 = 1;
                        }
                        if (!(_WORD)--v49) {
                          break;
                        }
                        v54 += 3;
                      }
                      while ((v53 & v52 & 1) == 0);
                      int v20 = 0;
                      if (v51 >= 8 && (v51 & 1) == 0)
                      {
                        uint64_t v67 = v51;
                        BOOL v68 = v47 >= v51;
                        unint64_t v69 = v47 - v51;
                        if (v68)
                        {
                          int v20 = 0;
                          unsigned int v70 = *(unsigned __int16 *)&v40[v67];
                          unsigned int v71 = bswap32(v70) >> 16;
                          if (v42) {
                            unsigned int v70 = v71;
                          }
                          if ((_WORD)v70 && 12 * (unint64_t)(unsigned __int16)v70 <= v69)
                          {
                            long long v72 = &v16[v67 + 20];
                            while (1)
                            {
                              unsigned int v73 = *((unsigned __int16 *)v72 - 4);
                              unsigned int v74 = bswap32(v73) >> 16;
                              if (v42) {
                                LOWORD(v73) = v74;
                              }
                              unsigned int v75 = *((unsigned __int16 *)v72 - 3);
                              unsigned int v76 = bswap32(v75) >> 16;
                              if (v42) {
                                LOWORD(v75) = v76;
                              }
                              unsigned int v77 = *((_DWORD *)v72 - 1);
                              unsigned int v78 = bswap32(v77);
                              if (v42) {
                                unsigned int v77 = v78;
                              }
                              BOOL v79 = (unsigned __int16)v73 == 40961 && (unsigned __int16)v75 == 3;
                              if (v79 && v77 == 1) {
                                break;
                              }
                              --v70;
                              v72 += 12;
                              if (!(_WORD)v70)
                              {
                                int v20 = 0;
                                goto LABEL_181;
                              }
                            }
                            int v20 = 0;
                            unsigned int v81 = *(unsigned __int16 *)v72;
                            unsigned int v82 = bswap32(v81) >> 16;
                            if (v42) {
                              LOWORD(v81) = v82;
                            }
                            *(_DWORD *)(a2 + 24) = (unsigned __int16)v81;
                          }
                        }
                      }
                    }
                  }
                }
LABEL_181:
                unsigned int v14 = v103;
              }
LABEL_182:
              int v19 = v106;
LABEL_183:
              uint64_t v11 = v26;
              goto LABEL_184;
            }
          }
          int v20 = 0;
          int v19 = v106;
          goto LABEL_184;
        }
      }
      goto LABEL_58;
    }
LABEL_184:
    BOOL v68 = v18 >= v23;
    v18 -= v23;
    if (!v68) {
      goto LABEL_227;
    }
    v16 += v23;
    if (v21 - 192 <= 0x1D && ((1 << (v21 + 64)) & 0x2C000011) != 0) {
      *(_DWORD *)(a2 + 56) += v23;
    }
  }
  while ((v20 & 1) == 0 && v18 > 3);
  if (v20)
  {
    *(_DWORD *)(a2 + 52) = v16 - BytePtr;
    if (v15 && v19 != 1)
    {
LABEL_199:
      uint64_t v24 = 4294954386;
      if (!Mutable) {
        return v24;
      }
    }
    else
    {
      if (a3)
      {
        BOOL v83 = BytePtr[v10] == 255 && BytePtr[Length - 1] == 217;
        *(unsigned char *)(a2 + 61) = v83;
      }
      if (v13)
      {
        int v84 = Mutable;
        CFIndex v85 = CFDataGetLength(Mutable);
        CFMutableArrayRef Mutable = v84;
        if (v85 >= 1)
        {
          uint64_t v86 = (CGColorSpace *)MEMORY[0x1AD10E420](v84);
          CFTypeRef v87 = v86;
          if (v86 && CGColorSpaceGetModel(v86) == kCGColorSpaceModelRGB) {
            *(void *)(a2 + 44) = CFRetain(v87);
          }
          CGColorSpaceRelease(v87);
          goto LABEL_217;
        }
      }
      if ((_BYTE)a4)
      {
        if (*(_DWORD *)(a2 + 24) != 1)
        {
          int v84 = Mutable;
          CFTypeRef v88 = CGImageSourceCreateWithData(v7, 0);
          CFMutableArrayRef Mutable = v84;
          if (v88)
          {
            CFTypeRef v89 = v88;
            ImageAtIndex = CGImageSourceCreateImageAtIndex(v88, 0, 0);
            if (ImageAtIndex)
            {
              long long v91 = ImageAtIndex;
              ColorSpace = CGImageGetColorSpace(ImageAtIndex);
              if (ColorSpace) {
                ColorSpace = CFRetain(ColorSpace);
              }
              *(void *)(a2 + 44) = ColorSpace;
              CFRelease(v91);
            }
            CFRelease(v89);
LABEL_217:
            CFMutableArrayRef Mutable = v84;
          }
        }
      }
      uint32x2_t v93 = vshl_u32((uint32x2_t)vadd_s32(vadd_s32(*(int32x2_t *)a2, *(int32x2_t *)(a2 + 8)), (int32x2_t)-1), (uint32x2_t)vsub_s32(vclz_s32(*(int32x2_t *)(a2 + 8)), (int32x2_t)0x1F0000001FLL));
      *(uint32x2_t *)(a2 + 64) = v93;
      if (!*(unsigned char *)(a2 + 33) || *(_DWORD *)(a2 + 28) == v93.i32[0] && *(_DWORD *)(a2 + 36) == v93.i32[1] - 1)
      {
        uint64_t v24 = 0;
        if (!Mutable) {
          return v24;
        }
      }
      else
      {
        uint64_t v24 = 0;
        *(unsigned char *)(a2 + 33) = 0;
LABEL_224:
        if (!Mutable) {
          return v24;
        }
      }
    }
LABEL_225:
    CFRelease(Mutable);
    return v24;
  }
LABEL_227:
  uint64_t v24 = 4294954387;
  if (Mutable) {
    goto LABEL_225;
  }
  return v24;
}

CFDataRef CMPhotoCreateDataWrappingIOSurface(const __CFAllocator *a1, IOSurfaceRef buffer, unint64_t a3, CFIndex a4)
{
  if (!buffer) {
    return 0;
  }
  AllocCFNumberRef Size = IOSurfaceGetAllocSize(buffer);
  CFIndex v9 = AllocSize - a3;
  if (AllocSize < a3 || a4 + a3 > AllocSize)
  {
    FigSignalErrorAt();
    return 0;
  }
  unint64_t v10 = (__IOSurface *)CFRetain(buffer);
  if (IOSurfaceLock(v10, 1u, 0))
  {
    CFDataRef v16 = 0;
    if (!v10) {
      return v16;
    }
    goto LABEL_23;
  }
  if (a4) {
    CFIndex v9 = a4;
  }
  BaseAddress = (const UInt8 *)IOSurfaceGetBaseAddress(v10);
  if (BaseAddress)
  {
    char v12 = BaseAddress;
    context.version = 0;
    context.info = v10;
    memset(&context.retain, 0, 24);
    context.allocate = (CFAllocatorAllocateCallBack)_ioSurfaceDeallocator_allocate;
    context.reallocate = 0;
    context.deallocate = (CFAllocatorDeallocateCallBack)_ioSurfaceDeallocator_deallocateDirect;
    context.preferredCFNumberRef Size = 0;
    CFAllocatorRef v13 = CFAllocatorCreate(0, &context);
    int v14 = -16990;
    if (v13)
    {
      CFDataRef v15 = CFDataCreateWithBytesNoCopy(a1, &v12[a3], v9, v13);
      CFDataRef v16 = v15;
      BOOL v17 = v15 == 0;
      if (v15) {
        int v14 = 0;
      }
      else {
        int v14 = -16990;
      }
      if (v15) {
        unint64_t v10 = 0;
      }
    }
    else
    {
      CFDataRef v16 = 0;
      BOOL v17 = 1;
    }
  }
  else
  {
    CFAllocatorRef v13 = 0;
    CFDataRef v16 = 0;
    BOOL v17 = 1;
    int v14 = -16990;
  }
  if (v10 && v17) {
    IOSurfaceUnlock(v10, 1u, 0);
  }
  if (v14 && v16)
  {
    CFRelease(v16);
    CFDataRef v16 = 0;
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v10) {
LABEL_23:
  }
    CFRelease(v10);
  return v16;
}

uint64_t CMPhotoDecompressionSessionEnqueueAsynchronousRequest(uint64_t a1, const void **a2)
{
  uint64_t result = 4294950306;
  if (a1 && a2 && *a2)
  {
    uint64_t v5 = a2[2];
    uint64_t v6 = v5[4] ? *((void *)a2[2] + 4) : 0;
    if (*(void *)(v6 + 128))
    {
      uint64_t v18 = 0;
      if (*((unsigned char *)a2 + 12))
      {
        uint64_t v7 = a1 + 192;
      }
      else
      {
        if (*((unsigned char *)a2 + 13))
        {
          int v8 = *((_DWORD *)v5 + 134);
          CFIndex v9 = *(NSObject **)(a1 + 40);
          block[0] = MEMORY[0x1E4F143A8];
          block[1] = *(void *)"";
          block[2] = ___getHWQueueForFormat_block_invoke;
          block[3] = &__block_descriptor_tmp_39;
          int v20 = v8;
          block[4] = a1;
          void block[5] = &v18;
          dispatch_sync(v9, block);
          uint64_t v7 = v18;
          goto LABEL_13;
        }
        uint64_t v7 = a1 + 144;
      }
      uint64_t v18 = v7;
LABEL_13:
      intptr_t v10 = dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v7 + 24), 0);
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
      v21.length = CFArrayGetCount(*(CFArrayRef *)(v18 + 32));
      v21.location = 0;
      CFIndex v11 = CFArrayBSearchValues(*(CFArrayRef *)(v18 + 32), v21, a2, (CFComparatorFunction)_compareAsyncDecodeRequests, 0);
      CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(v18 + 32), v11, a2);
      CFSetAddValue(*(CFMutableSetRef *)(a1 + 32), *a2);
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = *(void *)"";
      CFAllocatorRef v13 = __CMPhotoDecompressionSessionEnqueueAsynchronousRequest_block_invoke;
      int v14 = &__block_descriptor_tmp_13_1;
      BOOL v17 = v10 != 0;
      uint64_t v15 = v18;
      uint64_t v16 = a1;
      CFRetain((CFTypeRef)a1);
      if (v10) {
        dispatch_async(*(dispatch_queue_t *)(v18 + 16), v12);
      }
      else {
        v13((int8x16_t *)v12);
      }
      return 0;
    }
  }
  return result;
}

_DWORD *CMPhotoDecompressionSessionCreateAsyncRequest(size_t size, uint64_t a2, int a3, const void *a4, char a5, char a6, uint64_t a7, uint64_t a8, int a9)
{
  if (size <= 0x2F)
  {
    FigSignalErrorAt();
    return 0;
  }
  else
  {
    uint64_t v16 = malloc_type_calloc(1uLL, size, 0xE23B2BE6uLL);
    BOOL v17 = v16;
    if (v16)
    {
      *(void *)uint64_t v16 = a2;
      v16[2] = a3;
      if (a4) {
        CFTypeRef v18 = CFRetain(a4);
      }
      else {
        CFTypeRef v18 = 0;
      }
      *((void *)v17 + 2) = v18;
      *((void *)v17 + 3) = a7;
      *((void *)v17 + 4) = a8;
      v17[10] = a9;
      *((unsigned char *)v17 + 12) = a5;
      *((unsigned char *)v17 + 13) = a6;
    }
    else
    {
      FigSignalErrorAt();
    }
  }
  return v17;
}

void __CMPhotoDecompressionSessionEnqueueAsynchronousRequest_block_invoke(int8x16_t *a1)
{
  if (a1[3].i8[0]) {
    dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1[2].i64[0] + 24), 0xFFFFFFFFFFFFFFFFLL);
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1[2].i64[1] + 16));
  if (CFArrayGetCount(*(CFArrayRef *)(a1[2].i64[0] + 32)) < 1)
  {
    CFDictionaryRef ValueAtIndex = 0;
  }
  else
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1[2].i64[0] + 32), 0);
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1[2].i64[0] + 32), 0);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1[2].i64[1] + 16));
  block[0] = MEMORY[0x1E4F143A8];
  int8x16_t v3 = vextq_s8(a1[2], a1[2], 8uLL);
  int v4 = *(NSObject **)(a1[2].i64[0] + 8);
  block[1] = *(void *)"";
  block[2] = __CMPhotoDecompressionSessionEnqueueAsynchronousRequest_block_invoke_2;
  block[3] = &__block_descriptor_tmp_22;
  block[4] = ValueAtIndex;
  int8x16_t v6 = v3;
  dispatch_async(v4, block);
}

__CFDictionary *CMPhotoDictionaryCreateDeepCopy(const __CFAllocator *a1, const void *a2)
{
  if (!a2) {
    return 0;
  }
  DeepCopy = (__CFDictionary *)CFPropertyListCreateDeepCopy(a1, a2, 2uLL);
  if (!DeepCopy)
  {
    CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)a2);
    DeepCopy = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (DeepCopy)
    {
      int8x16_t v6 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
      if (v6)
      {
        uint64_t v7 = v6;
        int v8 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
        if (v8)
        {
          CFIndex v9 = v8;
          CFDictionaryGetKeysAndValues((CFDictionaryRef)a2, v7, v8);
          if (Count >= 1)
          {
            intptr_t v10 = v9;
            CFIndex v11 = v7;
            while (1)
            {
              CFTypeID v12 = CFGetTypeID(*v10);
              if (v12 == CFDictionaryGetTypeID()) {
                break;
              }
              CFTypeID v14 = CFGetTypeID(*v10);
              if (v14 != CFArrayGetTypeID())
              {
                CFDictionarySetValue(DeepCopy, *v11, *v10);
                goto LABEL_15;
              }
              CFAllocatorRef v13 = CMPhotoArrayCreateDeepCopy(a1, (const __CFArray *)*v10);
              if (v13) {
                goto LABEL_13;
              }
LABEL_15:
              ++v11;
              ++v10;
              if (!--Count) {
                goto LABEL_16;
              }
            }
            CFAllocatorRef v13 = (__CFArray *)CMPhotoDictionaryCreateDeepCopy(a1, *v10);
            if (!v13) {
              goto LABEL_15;
            }
LABEL_13:
            uint64_t v15 = v13;
            CFDictionaryAddValue(DeepCopy, *v11, v13);
            CFRelease(v15);
            goto LABEL_15;
          }
LABEL_16:
          free(v7);
        }
        else
        {
          CFIndex v9 = v7;
        }
        free(v9);
      }
    }
  }
  return DeepCopy;
}

uint64_t _createBitDepthArray(const __CFAllocator *a1, int a2, int a3, __CFArray **a4)
{
  int valuePtr = a3;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
  CFNumberRef v8 = CFNumberCreate(a1, kCFNumberIntType, &valuePtr);
  CFNumberRef v9 = v8;
  if (Mutable) {
    BOOL v10 = v8 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    unsigned int v11 = 0;
    do
    {
      CFArrayAppendValue(Mutable, v9);
      if (a2 == 6) {
        break;
      }
    }
    while (v11++ < 2);
    uint64_t v13 = 0;
    *a4 = Mutable;
    CFMutableArrayRef Mutable = 0;
    if (!v9) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t v13 = 4294950305;
  if (v8) {
LABEL_10:
  }
    CFRelease(v9);
LABEL_11:
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v13;
}

uint64_t CMPhotoDecompressionSessionFlushCachedBuffers(uint64_t a1, uint64_t a2, int a3)
{
  if (!a1) {
    return 4294950306;
  }
  int8x16_t v6 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  CMPhotoScaleAndRotateSessionFlushCaches(*(void *)(a1 + 280), a2, a3);
  BOOL v7 = CMPhotoUsePurgeableIOSurfaces();
  uint64_t v8 = *(void *)(a1 + 272);
  if (a3 || !v7) {
    CMPhotoSurfacePoolFlushCaches(v8, a3);
  }
  else {
    CMPhotoSurfacePoolMarkCachesVolatile(v8, 1);
  }
  os_unfair_lock_unlock(v6);
  return 0;
}

void CMPhotoScaleAndRotateSessionFlushCaches(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = a1;
  if (!a1)
  {
    pthread_once(&CMPhotoScaleAndRotateSessionGetDefault_onceToken, _once_CMPhotoScaleAndRotateSessionGetDefault);
    uint64_t v4 = defaultSession;
  }
  BOOL v5 = CMPhotoUsePurgeableIOSurfaces();
  uint64_t v6 = *(void *)(v4 + 16);
  if (a3 || !v5) {
    CMPhotoSurfacePoolFlushCaches(v6, a3);
  }
  else {
    CMPhotoSurfacePoolMarkCachesVolatile(v6, 1);
  }
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 24));
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(v4 + 40));
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 24));
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 48));
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(v4 + 64));
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 48));
}

uint64_t CMPhotoScaleAndRotateSessionTransformForSizeWithOptions(uint64_t a1, __CVBuffer *a2, const __CFDictionary *a3, int a4, int a5, uint64_t a6, uint64_t a7, int a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12, double a13, double a14, double a15, double a16, unsigned __int8 a17, uint64_t a18, unsigned __int8 a19, char a20,char a21,char a22,__CVBuffer **a23)
{
  return _scaleAndRotateSessionTransformForSizeWithOptions(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a22,
           a23);
}

uint64_t _scaleAndRotateSessionTransformForSizeWithOptions(uint64_t a1, __CVBuffer *a2, const __CFDictionary *a3, int a4, int a5, uint64_t a6, uint64_t a7, int a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12, double a13, double a14, double a15, double a16, unsigned __int8 a17, uint64_t a18, unsigned __int8 a19, char a20,char a21,__CVBuffer **a22)
{
  if (!a22) {
    return 4294950306;
  }
  uint64_t v31 = a1;
  if (!a1)
  {
    int v32 = a2;
    uint64_t v33 = a7;
    CFDictionaryRef v34 = a3;
    int v35 = a8;
    pthread_once(&CMPhotoScaleAndRotateSessionGetDefault_onceToken, _once_CMPhotoScaleAndRotateSessionGetDefault);
    a8 = v35;
    a2 = v32;
    a3 = v34;
    a7 = v33;
    uint64_t v31 = defaultSession;
  }
  if (a13 == *MEMORY[0x1E4F1DB30] && a14 == *(double *)(MEMORY[0x1E4F1DB30] + 8))
  {
    int v42 = a8;
    unsigned int v43 = a2;
    CFDictionaryRef v45 = a3;
    int v44 = a5;
    uint64_t v37 = a6;
    uint64_t v38 = a7;
    v46.origin.x = a9;
    v46.origin.y = a10;
    v46.size.double width = a11;
    v46.size.double height = a12;
    if (CGRectIsNull(v46))
    {
      CMPhotoGetPixelBufferCLAPAsRect(v43);
      a2 = v43;
      a13 = v39;
      a14 = v40;
      a7 = v38;
      a6 = v37;
      a5 = v44;
      a3 = v45;
    }
    else
    {
      a13 = a11;
      a14 = a12;
      a7 = v38;
      a6 = v37;
      a5 = v44;
      a3 = v45;
      a2 = v43;
    }
    a8 = v42;
  }
  return _convertAndScalePixelBufferOddSafe(v31, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, *MEMORY[0x1E4F1DB20], *(double *)(MEMORY[0x1E4F1DB20] + 8), *(double *)(MEMORY[0x1E4F1DB20] + 16),
           *(double *)(MEMORY[0x1E4F1DB20] + 24),
           a17,
           a18,
           a19,
           a20,
           a21,
           0xFFFFFFFF,
           a22);
}

uint64_t _convertAndScalePixelBufferOddSafe(uint64_t a1, __CVBuffer *a2, const __CFDictionary *a3, int a4, int a5, uint64_t a6, uint64_t a7, int a8, double a9, CGFloat a10, CGFloat a11, CGFloat a12, double a13, double a14, double a15, double a16, double a17, double a18, double a19, double a20,unsigned __int8 a21,uint64_t a22,unsigned __int8 a23,char a24,char a25,unsigned int a26,__CVBuffer **a27)
{
  CFTypeRef v171 = 0;
  CFTypeRef cf = 0;
  if (!a2) {
    return 4294950306;
  }
  BOOL v27 = a13 == *MEMORY[0x1E4F1DB30] && a14 == *(double *)(MEMORY[0x1E4F1DB30] + 8);
  if (v27)
  {
    uint64_t v51 = 4294950306;
    goto LABEL_21;
  }
  int v35 = (const void **)a27;
  if (CGRectIsNull(*(CGRect *)&a9))
  {
    double PixelBufferCLAPAsRect = CMPhotoGetPixelBufferCLAPAsRect(a2);
    double v38 = v37;
    double v40 = v39;
    double v42 = v41;
  }
  else
  {
    double PixelBufferCLAPAsRect = a9;
    double v38 = a10;
    double v40 = a11;
    double v42 = a12;
  }
  unsigned __int8 v43 = a23;
  uint64_t v44 = a22;
  __int16 v170 = 0;
  uint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(a2);
  int v46 = PixelFormatType;
  if (CMPhotoPixelFormatIsSubsampled(PixelFormatType, 0, 0, (unsigned char *)&v170 + 1, 0)
    || CMPhotoPixelFormatIsSubsampled(a6, 0, 0, &v170, 0))
  {
    goto LABEL_20;
  }
  char v169 = 0;
  if (a3) {
    CMPhotoCFDictionaryGetBooleanIfPresent(a3, @"PreferLowMemory", &v169);
  }
  if (!(HIBYTE(v170) | v170)) {
    goto LABEL_20;
  }
  size_t v49 = vcvtad_u64_f64(v40);
  size_t v50 = vcvtad_u64_f64(v42);
  if (((v49 | v50) & 1) == 0
    && vabdd_f64(floor(a13 * 0.5), a13 * 0.5) < 0.000001
    && vabdd_f64(floor(a14 * 0.5), a14 * 0.5) < 0.000001)
  {
    goto LABEL_20;
  }
  if (_disableOddWorkaround_onceToken != -1) {
    dispatch_once(&_disableOddWorkaround_onceToken, &__block_literal_global_1);
  }
  if (v169) {
    goto LABEL_20;
  }
  int v53 = (__CVBuffer *)vcvtad_u64_f64(PixelBufferCLAPAsRect);
  unint64_t v54 = vcvtad_u64_f64(v38);
  v186.origin.x = a17;
  v186.origin.y = a18;
  v186.size.double width = a19;
  v186.size.double height = a20;
  BOOL IsNull = CGRectIsNull(v186);
  unint64_t v56 = vcvtad_u64_f64(a17);
  unint64_t v57 = vcvtad_u64_f64(a18);
  uint64_t v154 = v57;
  unint64_t v155 = v56;
  if (IsNull) {
    char v58 = 0;
  }
  else {
    char v58 = v57;
  }
  if (IsNull) {
    char v59 = 0;
  }
  else {
    char v59 = v56;
  }
  unint64_t v162 = (unint64_t)v53;
  v179 = v53;
  unint64_t v180 = v54;
  CVPixelBufferRef pixelBuffer = (CVPixelBufferRef)v54;
  unint64_t v181 = v49;
  unint64_t v182 = v50;
  int v60 = CMPhotoPixelBufferMemcpySupportedForBuffer(a2, &v179, v59, v58);
  if (a5 == 1 && v46 == a6 && v49 == vcvtad_u64_f64(a13) && v50 == vcvtad_u64_f64(a14) && !a8 && v60)
  {
    *(void *)&long long v177 = 0;
    if (*a27)
    {
      v187.origin.y = a18;
      v187.origin.x = a17;
      v187.size.double width = a19;
      v187.size.double height = a20;
      unsigned __int8 v43 = a23;
      uint64_t v44 = a22;
      if (CGRectIsNull(v187))
      {
        double v61 = CMPhotoGetPixelBufferCLAPAsRect(*a27);
        uint64_t v154 = vcvtad_u64_f64(v62);
        unint64_t v155 = vcvtad_u64_f64(v61);
      }
      char v63 = *a27;
      v179 = (__CVBuffer *)v162;
      unint64_t v180 = (unint64_t)pixelBuffer;
      unint64_t v181 = v49;
      unint64_t v182 = v50;
      int v64 = CMPhotoPixelBufferCopyCropRectToOffset(a2, 1, (uint64_t *)&v179, v63, 1, v155, v154, 0);
      if (!v64) {
        CMPhotoPropagateColorPropertiesFromSourceBuffer(a2, *a27);
      }
      goto LABEL_43;
    }
    uint64_t v74 = CVPixelBufferGetPixelFormatType(a2);
    unint64_t v75 = 2 * (a21 == 0);
    uint64_t v44 = a22;
    if (a4)
    {
      CVPixelBufferNotBackedByIOSurfaceRef IOSurface = CMPhotoSurfacePoolCreatePixelBuffer(*(const void **)(a1 + 16), v74, v49, v50, a21, v75, v75, a21 == 0, a22, 0, (CVPixelBufferRef *)&v177);
      if (CVPixelBufferNotBackedByIOSurface)
      {
LABEL_172:
        int v64 = CVPixelBufferNotBackedByIOSurface;
        unsigned __int8 v43 = a23;
LABEL_43:
        if ((void)v177) {
          CFRelease((CFTypeRef)v177);
        }
        goto LABEL_162;
      }
    }
    else
    {
      size_t v160 = v49;
      size_t v79 = v50;
      if (!a21)
      {
        size_t v160 = CMPhotoAlignValue(v49, 2uLL);
        size_t v79 = CMPhotoAlignValue(v50, 2uLL);
      }
      size_t v156 = v79;
      CVPixelBufferNotBackedByIOSurfaceRef IOSurface = CMPhotoCreateCVPixelBufferNotBackedByIOSurface(*MEMORY[0x1E4F1CF80], v74, v160, v79, v75, v75, a22, 0, (CVPixelBufferRef *)&v177);
      if (CVPixelBufferNotBackedByIOSurface) {
        goto LABEL_172;
      }
      if (v160 != v49 || v156 != v50) {
        CMPhotoSetPixelBufferCLAP((__CVBuffer *)v177, 0, 0, v49, v50, 0, 1);
      }
    }
    v179 = (__CVBuffer *)v162;
    unint64_t v180 = (unint64_t)pixelBuffer;
    unint64_t v181 = v49;
    unint64_t v182 = v50;
    CVPixelBufferNotBackedByIOSurfaceRef IOSurface = CMPhotoPixelBufferCopyCropRectToOffset(a2, 1, (uint64_t *)&v179, (__CVBuffer *)v177, 1, 0, 0, 0);
    if (!CVPixelBufferNotBackedByIOSurface)
    {
      CMPhotoPropagateColorPropertiesFromSourceBuffer(a2, (__CVBuffer *)v177);
      uint64_t v51 = 0;
      *a27 = (__CVBuffer *)v177;
      goto LABEL_21;
    }
    goto LABEL_172;
  }
  if (CMPhotoPixelFormatContainsGrayScale(a6)
    && !CMPhotoPixelBufferHasUnhandledIdentityMatrix(a2)
    && CMPhotoWrapLumaPlaneAsGrayscale(a2, (CVPixelBufferRef *)&cf))
  {
    CMPhotoGetPixelBufferSize(a2);
  }
  unsigned __int8 v43 = a23;
  uint64_t v44 = a22;
  uint64_t v153 = a7;
  int v152 = a5;
  if (!cf)
  {
    double PixelBufferSize = CMPhotoGetPixelBufferSize(a2);
    double v67 = v66;
    uint64_t v68 = CVPixelBufferGetPixelFormatType(a2);
    int v69 = v68;
    v184 = 0;
    v185[0] = 0;
    __int16 v183 = 0;
    int IsSubsampled = CMPhotoPixelFormatIsSubsampled(v68, (unsigned char *)&v183 + 1, &v183, 0, 0);
    if (!IsSubsampled)
    {
      v179 = 0;
      unint64_t v180 = 0;
      unint64_t v181 = v49;
      unint64_t v182 = v50;
      if (!(HIBYTE(v183) | v183))
      {
        unsigned int v77 = (__CVBuffer *)CFRetain(a2);
        unsigned int v78 = 0;
        v179 = (__CVBuffer *)v162;
        unint64_t v180 = (unint64_t)pixelBuffer;
        unint64_t v181 = v49;
        unint64_t v182 = v50;
        a7 = v153;
        goto LABEL_87;
      }
      OSType UnsubsampledEquivalent = CMPhotoPixelFormatGetUnsubsampledEquivalent(v69);
      if (UnsubsampledEquivalent)
      {
        unint64_t v71 = vcvtad_u64_f64(PixelBufferSize);
        unint64_t v72 = vcvtad_u64_f64(v67);
        int v146 = HIBYTE(v183);
        int v144 = v183;
        if ((_BYTE)v183) {
          int v73 = (pixelBuffer | v50) & 1;
        }
        else {
          int v73 = 0;
        }
        long long v177 = 0u;
        long long v178 = 0u;
        unint64_t v173 = v162;
        CVPixelBufferRef v174 = pixelBuffer;
        size_t v175 = v49;
        size_t v176 = v50;
        unint64_t v142 = v72;
        int v140 = (HIBYTE(v183) != 0) & (v49 | v162);
        if (_makeEvenCropRect(&v173, v71, v72, v140, v73, (unint64_t *)&v177, (uint64_t)&v179))
        {
          BOOL v80 = (__CVBuffer *)CFRetain(a2);
          v185[0] = v80;
          CFTypeRef v147 = CVBufferCopyAttachment(a2, (CFStringRef)*MEMORY[0x1E4F24A78], 0);
          CMPhotoRemovePixelBufferCLAP(v80);
          goto LABEL_76;
        }
        unint64_t v81 = v71 & 1;
        if (!v146) {
          unint64_t v81 = 0;
        }
        size_t v82 = v81 + v71;
        unint64_t v83 = v142 & 1;
        if (!v144) {
          unint64_t v83 = 0;
        }
        unint64_t v84 = v83 + v142;
        unint64_t v148 = v82;
        int IsSubsampled = CMPhotoCreateEvenPixelBufferWithBacking(a2, v82, v83 + v142, v185);
        if (!IsSubsampled)
        {
          unint64_t v173 = v162;
          CVPixelBufferRef v174 = pixelBuffer;
          size_t v175 = v49;
          size_t v176 = v50;
          _makeEvenCropRect(&v173, v148, v84, v140, v73, (unint64_t *)&v177, (uint64_t)&v179);
          CFTypeRef v147 = 0;
LABEL_76:
          unint64_t v85 = *((void *)&v178 + 1);
          a7 = v153;
          if (a4)
          {
            int v86 = CMPhotoSurfacePoolCreatePixelBuffer(*(const void **)(a1 + 16), UnsubsampledEquivalent, v178, *((size_t *)&v178 + 1), 0, 2uLL, 2uLL, 1, 0, 0, &v184);
            if (v86)
            {
              int v87 = v86;
              goto LABEL_176;
            }
          }
          else
          {
            long long v143 = v178;
            size_t v88 = CMPhotoAlignValue(v178, 2uLL);
            size_t v141 = CMPhotoAlignValue(v85, 2uLL);
            int v89 = CMPhotoCreateCVPixelBufferNotBackedByIOSurface(*MEMORY[0x1E4F1CF80], UnsubsampledEquivalent, v88, v141, 2uLL, 2uLL, 0, 0, &v184);
            if (v89)
            {
              int v87 = v89;
              a7 = v153;
              goto LABEL_176;
            }
            BOOL v27 = v88 == (void)v143;
            a7 = v153;
            if (!v27 || v141 != v85) {
              CMPhotoSetPixelBufferCLAP(v184, 0, 0, v143, *((unint64_t *)&v143 + 1), 0, 1);
            }
          }
          int v90 = _convertAndScalePixelBuffer(a1, v185[0], a4, 1, UnsubsampledEquivalent, 0, 0, 0, (double)(unint64_t)v177, (double)*((unint64_t *)&v177 + 1), (double)(unint64_t)v178, (double)*((unint64_t *)&v178 + 1), (double)(unint64_t)v178, (double)*((unint64_t *)&v178 + 1), *(double *)(MEMORY[0x1E4F1DB20] + 24), v48, *MEMORY[0x1E4F1DB20], *(double *)(MEMORY[0x1E4F1DB20] + 8), *(double *)(MEMORY[0x1E4F1DB20] + 16),
                  *(double *)(MEMORY[0x1E4F1DB20] + 24),
                  0,
                  a23,
                  1u,
                  1u,
                  0xFFFFFFFF,
                  (const void **)&v184);
          if (!v90)
          {
            int v90 = CMPhotoSetPixelBufferCLAPFromRect(v184, 1, 1, (double)(unint64_t)v179, (double)v180, (double)v181, (double)v182);
            if (!v90)
            {
              unsigned int v77 = v184;
              unint64_t v162 = (unint64_t)v179;
              size_t v49 = v181;
              CVPixelBufferRef pixelBuffer = (CVPixelBufferRef)v180;
              size_t v50 = v182;
              unsigned int v78 = v147;
LABEL_87:
              int v87 = 0;
              CFTypeRef cf = v77;
              v184 = 0;
              if (!v78) {
                goto LABEL_89;
              }
              goto LABEL_88;
            }
          }
          int v87 = v90;
LABEL_176:
          unsigned int v78 = v147;
          if (!v147)
          {
LABEL_89:
            a5 = v152;
            if (v184) {
              CFRelease(v184);
            }
            if (v185[0]) {
              CFRelease(v185[0]);
            }
            if (v87) {
              goto LABEL_20;
            }
            goto LABEL_94;
          }
LABEL_88:
          CVBufferSetAttachment(a2, (CFStringRef)*MEMORY[0x1E4F24A78], v78, kCVAttachmentMode_ShouldPropagate);
          CFRelease(v78);
          goto LABEL_89;
        }
      }
      else
      {
        int IsSubsampled = FigSignalErrorAt();
      }
    }
    int v87 = IsSubsampled;
    a7 = v153;
    goto LABEL_89;
  }
LABEL_94:
  if ((_BYTE)v170)
  {
    OSType v91 = CMPhotoPixelFormatGetUnsubsampledEquivalent(a6);
    if (!v91)
    {
      FigSignalErrorAt();
      goto LABEL_20;
    }
    double v95 = *MEMORY[0x1E4F1DB20];
    double v94 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
    double v97 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
    CGFloat v96 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
    if (!_convertAndScalePixelBuffer(a1, (CVPixelBufferRef)cf, a4, a5, v91, a7, a8, 0, (double)v162, (double)(unint64_t)pixelBuffer, (double)v49, (double)v50, a13, a14, v92, v93, *MEMORY[0x1E4F1DB20], v94, v97,
                          v96,
                          0,
                          a23,
                          1u,
                          1u,
                          0xFFFFFFFF,
                          &v171))
    {
      int v98 = (__CVBuffer *)v171;
      CMPhotoGetPixelBufferCLAPAsRect((__CVBuffer *)v171);
      size_t v161 = vcvtad_u64_f64(v100);
      size_t v163 = vcvtad_u64_f64(v99);
      v179 = 0;
      *(void *)&long long v177 = *a27;
      unsigned int v101 = (__CVBuffer *)v177;
      CGFloat v139 = v97;
      double v137 = v95;
      CGFloat v138 = v94;
      if ((void)v177)
      {
        double v102 = CMPhotoGetPixelBufferCLAPAsRect((__CVBuffer *)v177);
        double v145 = v103;
        CGFloat v149 = v104;
        double v106 = v105;
        v188.origin.y = a18;
        v188.origin.x = a17;
        double v107 = a20;
        v188.size.double width = a19;
        v188.size.double height = a20;
        if (CGRectIsNull(v188))
        {
          double v108 = v102;
          double v107 = v149;
          uint64_t v154 = vcvtad_u64_f64(v145);
          unint64_t v155 = vcvtad_u64_f64(v102);
          double v109 = v106;
        }
        else
        {
          double v108 = v102;
          double v109 = v106;
          double v106 = a19;
        }
        int v64 = -16992;
        if (v163 != vcvtad_u64_f64(v106)) {
          goto LABEL_159;
        }
        size_t v110 = v161;
        if (v161 != vcvtad_u64_f64(v107)) {
          goto LABEL_159;
        }
        double v97 = v109;
        double v95 = v108;
      }
      else
      {
        uint64_t v154 = 0;
        unint64_t v155 = 0;
        double v145 = v94;
        CGFloat v149 = v96;
        size_t v110 = v161;
      }
      LOBYTE(v173) = 0;
      LOBYTE(v185[0]) = 0;
      int v111 = CMPhotoPixelFormatIsSubsampled(a6, &v173, v185, 0, 0);
      if (v111)
      {
        if (v101)
        {
          int v64 = -16992;
          unsigned __int8 v43 = a23;
          uint64_t v44 = a22;
          a5 = v152;
          goto LABEL_159;
        }
        int v64 = v111;
        unsigned __int8 v43 = a23;
        uint64_t v44 = a22;
        a5 = v152;
        goto LABEL_157;
      }
      if ((_BYTE)v173) {
        size_t v112 = v163 & 1;
      }
      else {
        size_t v112 = 0;
      }
      size_t v113 = v110;
      if (LOBYTE(v185[0])) {
        size_t v114 = v110 & 1;
      }
      else {
        size_t v114 = 0;
      }
      CVPixelBufferRef pixelBuffera = v98;
      int v64 = -16992;
      size_t v151 = v112 + v163;
      if (v112 + v163 <= vcvtad_u64_f64(CMPhotoGetPixelBufferSize(v98)))
      {
        size_t v116 = v114 + v113;
        if (v114 + v113 <= vcvtad_u64_f64(v115))
        {
          int v117 = CMPhotoRemovePixelBufferCLAP(pixelBuffera);
          a5 = v152;
          int v35 = (const void **)a27;
          if (!v117)
          {
            double v118 = (double)v151;
            int v117 = CMPhotoSetPixelBufferCLAPFromRect(pixelBuffera, 0, 1, 0.0, 0.0, (double)v151, (double)v116);
            if (!v117)
            {
              if (v101)
              {
                size_t v119 = v116 + v154;
                if (v151 + v155 > vcvtad_u64_f64(CMPhotoGetPixelBufferSize(v101)) || v119 > vcvtad_u64_f64(v120))
                {
                  int v121 = CMPhotoCreateEvenPixelBufferWithBacking(v101, v151 + v155, v119, &v179);
                  unsigned __int16 v122 = pixelBuffera;
                  if (!v121)
                  {
                    int v123 = 0;
LABEL_128:
                    int v125 = _convertAndScalePixelBuffer(a1, v122, a4, 1, a6, 0, 0, a21, v137, v138, v139, v96, v118, (double)v116, v47, v48, (double)v155, (double)(unint64_t)v154, v118,
                             (double)v116,
                             a22,
                             a23,
                             1u,
                             1u,
                             a26,
                             (const void **)&v179);
                    if (v125)
                    {
                      int v64 = v125;
LABEL_154:
                      if (!v123) {
                        goto LABEL_159;
                      }
                      int v136 = 0;
LABEL_156:
                      int v64 = CMPhotoSetPixelBufferCLAPFromRect(*a27, 0, 1, v95, v145, v97, v149);
                      if (v136) {
                        goto LABEL_157;
                      }
LABEL_159:
                      if (v179) {
                        CFRelease(v179);
                      }
                      a7 = v153;
LABEL_162:
                      if (!v64) {
                        goto LABEL_163;
                      }
                      goto LABEL_20;
                    }
LABEL_150:
                    if (v179 && v179 != v101)
                    {
                      CMPhotoPropagateColorPropertiesFromSourceBuffer(v179, v101);
                      unsigned int v101 = (__CVBuffer *)v177;
                    }
                    int v64 = 0;
                    *a27 = v101;
                    goto LABEL_154;
                  }
                }
                else
                {
                  v179 = (__CVBuffer *)CFRetain(*a27);
                  int v121 = CMPhotoRemovePixelBufferCLAP(v179);
                  unsigned __int16 v122 = pixelBuffera;
                  if (!v121)
                  {
                    int v123 = 1;
                    goto LABEL_128;
                  }
                }
                int v64 = v121;
                goto LABEL_159;
              }
              if (a4)
              {
                int v124 = CMPhotoSurfacePoolCreatePixelBuffer(*(const void **)(a1 + 16), a6, v163, v161, a21, 2uLL, 2uLL, 1, a22, 0, (CVPixelBufferRef *)&v177);
                if (v124) {
                  goto LABEL_173;
                }
              }
              else
              {
                size_t v126 = v163;
                size_t v127 = v161;
                if (!a21)
                {
                  size_t v126 = CMPhotoAlignValue(v163, 2uLL);
                  size_t v127 = CMPhotoAlignValue(v161, 2uLL);
                }
                size_t v157 = v127;
                int v124 = CMPhotoCreateCVPixelBufferNotBackedByIOSurface(*MEMORY[0x1E4F1CF80], a6, v126, v127, 2uLL, 2uLL, a22, 0, (CVPixelBufferRef *)&v177);
                if (v124) {
                  goto LABEL_173;
                }
                if (v126 != v163 || v157 != v161) {
                  CMPhotoSetPixelBufferCLAP((__CVBuffer *)v177, 0, 0, v163, v161, 0, 1);
                }
              }
              double v128 = CMPhotoGetPixelBufferSize((__CVBuffer *)v177);
              unint64_t v130 = vcvtad_u64_f64(v129);
              BOOL v132 = v151 > vcvtad_u64_f64(v128) || v116 > v130;
              if (v132)
              {
                int v124 = CMPhotoCreateEvenPixelBufferWithBacking((__CVBuffer *)v177, v151, v116, &v179);
                if (v124)
                {
LABEL_173:
                  int v64 = v124;
                  goto LABEL_157;
                }
                int v123 = 0;
                int v133 = a21;
                uint64_t v134 = pixelBuffera;
              }
              else
              {
                v179 = (__CVBuffer *)CFRetain((CFTypeRef)v177);
                int v124 = CMPhotoRemovePixelBufferCLAP(v179);
                if (v124) {
                  goto LABEL_173;
                }
                int v124 = CMPhotoSetPixelBufferCLAPFromRect(v179, 0, 1, 0.0, 0.0, v118, (double)v116);
                uint64_t v134 = pixelBuffera;
                if (v124) {
                  goto LABEL_173;
                }
                double v97 = (double)v163;
                double v145 = 0.0;
                CGFloat v149 = (double)v161;
                int v123 = 1;
                double v95 = 0.0;
                int v133 = a21;
              }
              int v135 = _convertAndScalePixelBuffer(a1, v134, a4, 1, a6, 0, 0, v133, v137, v138, v139, v96, v118, (double)v116, v47, v48, v137, v138, v139,
                       v96,
                       a22,
                       a23,
                       1u,
                       1u,
                       a26,
                       (const void **)&v179);
              if (!v135)
              {
                unsigned int v101 = (__CVBuffer *)v177;
                goto LABEL_150;
              }
              int v64 = v135;
              if (!v132)
              {
                int v136 = 1;
                goto LABEL_156;
              }
LABEL_157:
              if ((void)v177) {
                CFRelease((CFTypeRef)v177);
              }
              goto LABEL_159;
            }
          }
          int v64 = v117;
        }
      }
      a5 = v152;
      int v35 = (const void **)a27;
      if (v101) {
        goto LABEL_159;
      }
      goto LABEL_157;
    }
  }
  else if (!_convertAndScalePixelBuffer(a1, (CVPixelBufferRef)cf, a4, a5, a6, a7, a8, a21, (double)v162, (double)(unint64_t)pixelBuffer, (double)v49, (double)v50, a13, a14, v47, v48, a17, a18, a19, {
                             a20,
  }
                             a22,
                             a23,
                             1u,
                             1u,
                             0xFFFFFFFF,
                             (const void **)a27))
  {
LABEL_163:
    uint64_t v51 = 0;
    goto LABEL_21;
  }
LABEL_20:
  uint64_t v51 = _convertAndScalePixelBuffer(a1, a2, a4, a5, a6, a7, a8, a21, a9, a10, a11, a12, a13, a14, v47, v48, a17, a18, a19,
          a20,
          v44,
          v43,
          a24,
          a25,
          a26,
          v35);
LABEL_21:
  if (cf) {
    CFRelease(cf);
  }
  if (v171) {
    CFRelease(v171);
  }
  return v51;
}

uint64_t CMPhotoPixelFormatIsSubsampled(uint64_t a1, unsigned char *a2, unsigned char *a3, unsigned char *a4, uint64_t *a5)
{
  DescriptionWithuint64_t PixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
  if (!DescriptionWithPixelFormatType) {
    return 4294950305;
  }
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(DescriptionWithPixelFormatType, (const void *)*MEMORY[0x1E4F24EE0]);
  if (Value)
  {
    CFArrayRef v11 = Value;
    CFIndex Count = CFArrayGetCount(Value);
    uint64_t v13 = Count;
    if (Count)
    {
      CFTypeRef v18 = a5;
      CFIndex v14 = 0;
      CFIndex v15 = Count - 1;
      do
      {
        CFArrayGetValueAtIndex(v11, v14);
        FigCFDictionaryGetIntIfPresent();
        FigCFDictionaryGetIntIfPresent();
      }
      while (v15 != v14++);
      a5 = v18;
    }
    if (!a2) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v13 = 1;
    FigCFDictionaryGetIntIfPresent();
    FigCFDictionaryGetIntIfPresent();
    if (!a2) {
      goto LABEL_10;
    }
  }
  *a2 = 0;
LABEL_10:
  if (a3) {
    *a3 = 0;
  }
  if (a4) {
    *a4 = 0;
  }
  uint64_t result = 0;
  if (a5) {
    *a5 = v13;
  }
  return result;
}

uint64_t CMPhotoPixelFormatGetUnsubsampledEquivalent(int a1)
{
  if (a1 > 1952854575)
  {
    if (a1 > 2016686639)
    {
      if (a1 > 2019963439)
      {
        if (a1 == 2019963440 || a1 == 2019963442) {
          return 2019963956;
        }
        return 0;
      }
      if (a1 != 2016686640 && a1 != 2016686642) {
        return 0;
      }
      return 2016687156;
    }
    if (a1 <= 1953903151)
    {
      if (a1 != 1952854576 && a1 != 1952854578) {
        return 0;
      }
      return 1952855092;
    }
    if (a1 != 1953903152 && a1 != 1953903154) {
      return 0;
    }
    int v3 = 1952855092;
    return v3 | 0x100000u;
  }
  if (a1 > 1936077359)
  {
    if (a1 <= 1937125935)
    {
      if (a1 != 1936077360 && a1 != 1936077362) {
        return 0;
      }
      return 1936077876;
    }
    if (a1 != 1937125936 && a1 != 1937125938) {
      return 0;
    }
    int v3 = 1936077876;
    return v3 | 0x100000u;
  }
  uint64_t v1 = 875836518;
  if (a1 > 875704933)
  {
    if (a1 != 875704934)
    {
      unsigned __int16 v2 = 12918;
LABEL_21:
      if (a1 == (v2 | 0x34320000)) {
        return 875836534;
      }
      return 0;
    }
  }
  else if (a1 != 875704422)
  {
    unsigned __int16 v2 = 12406;
    goto LABEL_21;
  }
  return v1;
}

uint64_t _makeEvenCropRect(unint64_t *a1, unint64_t a2, unint64_t a3, int a4, int a5, unint64_t *a6, uint64_t a7)
{
  unint64_t v7 = a1[1];
  unint64_t v8 = *a1 & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v9 = a1[2] + *a1 + ((a1[2] + *a1) | 0xFFFFFFFFFFFFFFFELL) + 2;
  if (v9 >= a2) {
    unint64_t v9 = a2;
  }
  if (a4)
  {
    LODWORD(v10) = (v9 & 1) == 0;
  }
  else
  {
    unint64_t v8 = *a1;
    unint64_t v9 = a1[2] + *a1;
    LODWORD(v10) = 1;
  }
  unint64_t v11 = a1[3] + v7 + ((a1[3] + v7) | 0xFFFFFFFFFFFFFFFELL) + 2;
  if (v11 >= a3) {
    unint64_t v11 = a3;
  }
  if (v11) {
    unsigned int v12 = 0;
  }
  else {
    unsigned int v12 = v10;
  }
  if (a5)
  {
    v7 &= ~1uLL;
    unint64_t v13 = v11;
  }
  else
  {
    unint64_t v13 = a1[3] + v7;
  }
  if (a5) {
    uint64_t v10 = v12;
  }
  else {
    uint64_t v10 = v10;
  }
  if (a6)
  {
    *a6 = v8;
    a6[1] = v7;
    a6[2] = v9 - v8;
    a6[3] = v13 - v7;
  }
  if (a7)
  {
    unint64_t v14 = a1[1] - v7;
    long long v15 = *((_OWORD *)a1 + 1);
    *(void *)a7 = *a1 - v8;
    *(void *)(a7 + 8) = v14;
    *(_OWORD *)(a7 + 16) = v15;
  }
  return v10;
}

uint64_t CMPhotoPixelFormatContainsGrayScale(OSType pixelFormat)
{
  unsigned __int8 v3 = 0;
  if (pixelFormat)
  {
    if (pixelFormat == 843264310 || pixelFormat == 843264056)
    {
      return 1;
    }
    else
    {
      CFDictionaryRef v1 = CVPixelFormatDescriptionCreateWithPixelFormatType((CFAllocatorRef)*MEMORY[0x1E4F1CF80], pixelFormat);
      FigCFDictionaryGetBooleanIfPresent();
      if (v1) {
        CFRelease(v1);
      }
    }
  }
  return v3;
}

uint64_t CMPhotoPixelBufferMemcpySupportedForBuffer(__CVBuffer *a1, unsigned char *a2, char a3, char a4)
{
  uint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  uint64_t result = 0;
  if ((int)PixelFormatType > 1380401728)
  {
    if ((int)PixelFormatType > 1937125935)
    {
      if ((int)PixelFormatType <= 1953903151)
      {
        if (PixelFormatType == 1937125936) {
          goto LABEL_30;
        }
        int v10 = 1952854576;
      }
      else
      {
        if (PixelFormatType == 1953903152 || PixelFormatType == 2019963440) {
          goto LABEL_30;
        }
        int v10 = 2016686640;
      }
    }
    else if ((int)PixelFormatType <= 1815162993)
    {
      if (PixelFormatType == 1380401729) {
        goto LABEL_30;
      }
      int v10 = 1751527984;
    }
    else
    {
      if (PixelFormatType == 1815162994 || PixelFormatType == 1815491698) {
        goto LABEL_30;
      }
      int v10 = 1936077360;
    }
LABEL_29:
    if (PixelFormatType != v10) {
      return result;
    }
    goto LABEL_30;
  }
  if ((int)PixelFormatType <= 875836533)
  {
    if ((int)PixelFormatType <= 875704933)
    {
      if (PixelFormatType == 875704422) {
        goto LABEL_30;
      }
      int v10 = 875704438;
    }
    else
    {
      if (PixelFormatType == 875704934 || PixelFormatType == 875704950) {
        goto LABEL_30;
      }
      int v10 = 875836518;
    }
    goto LABEL_29;
  }
  if ((int)PixelFormatType > 1278226735)
  {
    if ((PixelFormatType - 1278226736) > 6 || ((1 << (PixelFormatType - 48)) & 0x45) == 0) {
      return result;
    }
    goto LABEL_30;
  }
  if (PixelFormatType != 875836534 && PixelFormatType != 1111970369)
  {
    int v10 = 1278226488;
    goto LABEL_29;
  }
LABEL_30:
  long long extraRowsOnTop = 0uLL;
  CVPixelBufferGetExtendedPixels(a1, (size_t *)&extraRowsOnTop + 1, 0, (size_t *)&extraRowsOnTop, 0);
  if (extraRowsOnTop != 0) {
    return 0;
  }
  char v12 = 0;
  int IsSubsampled = CMPhotoPixelFormatIsSubsampled(PixelFormatType, 0, 0, &v12, 0);
  uint64_t result = 0;
  if (!IsSubsampled)
  {
    if (!v12) {
      return 1;
    }
    if (*a2) {
      return 0;
    }
    uint64_t result = 0;
    if ((a2[8] & 1) == 0 && (a3 & 1) == 0 && (a4 & 1) == 0) {
      return 1;
    }
  }
  return result;
}

uint64_t CMPhotoCreateEvenPixelBufferWithBacking(__CVBuffer *a1, size_t a2, size_t a3, CVPixelBufferRef *a4)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  CVPixelBufferRef pixelBufferOut = 0;
  if (!a1) {
    return 4294950306;
  }
  PlaneCFIndex Count = CVPixelBufferGetPlaneCount(a1);
  unint64_t v9 = 0;
  uint64_t v10 = 4294950306;
  if (!a4 || PlaneCount != 2) {
    goto LABEL_61;
  }
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  unint64_t Width = (unint64_t)(double)CVPixelBufferGetWidth(a1);
  unint64_t Height = (unint64_t)(double)CVPixelBufferGetHeight(a1);
  BOOL v14 = a2 == Width && a3 == Height;
  if (v14
    || (a2 != Width ? (BOOL v15 = a2 == Width + 1) : (BOOL v15 = 1),
        !v15 || (a3 != Height ? (BOOL v16 = a3 == Height + 1) : (BOOL v16 = 1), !v16)))
  {
    unint64_t v9 = 0;
    goto LABEL_61;
  }
  size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  size_t v18 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
  if (a2 != Width && BytesPerRowOfPlane < CMPhotoGetBytesPerPixelForPixelFormat(PixelFormatType) * a2
    || (DataCFNumberRef Size = CVPixelBufferGetDataSize(a1),
        DataSize < BytesPerRowOfPlane * a3 + CVPixelBufferGetHeightOfPlane(a1, 1uLL) * v18))
  {
    unint64_t v9 = 0;
    uint64_t v10 = 4294950306;
    goto LABEL_61;
  }
  IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(a1);
  size_t v43 = v18;
  size_t v44 = BytesPerRowOfPlane;
  if (IOSurface)
  {
    OSType v45 = PixelFormatType;
    size_t v42 = DataSize;
    CFRange v21 = (__IOSurface *)IOSurfaceCopyValue(IOSurface, (CFStringRef)*MEMORY[0x1E4F2F080]);
    if (v21)
    {
      unint64_t v22 = v21;
      *(_OWORD *)planeBaseAddress = 0u;
      long long v51 = 0u;
      IOSurfaceGetExtendedPixelsOfPlane();
      unint64_t v9 = 0;
      BOOL v24 = a3 != Height && *((void *)&v51 + 1) == 0;
      if (planeBaseAddress[1]) {
        BOOL v25 = 1;
      }
      else {
        BOOL v25 = a2 == Width;
      }
      uint64_t v10 = 4294950306;
      if (!v25) {
        goto LABEL_81;
      }
      if (v24)
      {
LABEL_54:
        CFRelease(v22);
        goto LABEL_55;
      }
      CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v22);
      if (MutableCopy)
      {
        BOOL v27 = MutableCopy;
        double v41 = a4;
        uint64x2_t v28 = (void *)*MEMORY[0x1E4F2F238];
        CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(MutableCopy, (const void *)*MEMORY[0x1E4F2F238]);
        if (Value && (CFArrayRef v30 = Value, CFArrayGetCount(Value) == 2))
        {
          CFArrayRef v31 = CFArrayCreateMutableCopy(0, 0, v30);
          unint64_t v9 = v31;
          if (v31)
          {
            CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v31, 0);
            if (ValueAtIndex)
            {
              key = v28;
              uint64_t v33 = CFDictionaryCreateMutableCopy(0, 0, ValueAtIndex);
              CFDictionaryRef v34 = v33;
              if (v33)
              {
                uint64_t v35 = CMPhotoCFDictionarySetInt(v33, (const void *)*MEMORY[0x1E4F2F258], a2);
                if (v35
                  || (uint64_t v35 = CMPhotoCFDictionarySetInt(v34, (const void *)*MEMORY[0x1E4F2F220], a3), v35)
                  || a2 != Width
                  && (uint64_t v35 = CMPhotoCFDictionarySetInt(v34, (const void *)*MEMORY[0x1E4F2F200], LODWORD(planeBaseAddress[1]) - 1), v35)|| a3 != Height&& (uint64_t v35 = CMPhotoCFDictionarySetInt(v34, (const void *)*MEMORY[0x1E4F2F1F8], DWORD2(v51) - 1), v35)|| (uint64_t v35 = CMPhotoCFDictionarySetInt(v27, (const void *)*MEMORY[0x1E4F2F2C0], a2), v35))
                {
                  uint64_t v10 = v35;
                }
                else
                {
                  uint64_t v10 = CMPhotoCFDictionarySetInt(v27, (const void *)*MEMORY[0x1E4F2F0E8], a3);
                  if (!v10)
                  {
                    CFArraySetValueAtIndex(v9, 0, v34);
                    CFDictionarySetValue(v27, key, v9);
                    CFRelease(v9);
                    unint64_t v9 = v27;
                    BOOL v27 = v34;
                    goto LABEL_51;
                  }
                }
              }
              else
              {
                uint64_t v10 = 4294950305;
              }
            }
            else
            {
              CFDictionaryRef v34 = 0;
              uint64_t v10 = 4294950304;
            }
            CFRelease(v27);
            CFRelease(v9);
            unint64_t v9 = 0;
            BOOL v27 = v34;
            if (!v34)
            {
              a4 = v41;
              goto LABEL_81;
            }
          }
          else
          {
            uint64_t v10 = 4294950305;
          }
        }
        else
        {
          unint64_t v9 = 0;
          uint64_t v10 = 4294950304;
        }
LABEL_51:
        CFRelease(v27);
        CFRelease(v22);
        if (v10)
        {
          a4 = v41;
          OSType PixelFormatType = v45;
        }
        else
        {
          ChildSurface = (__IOSurface *)IOSurfaceCreateChildSurface();
          a4 = v41;
          OSType PixelFormatType = v45;
          if (ChildSurface)
          {
            unint64_t v22 = ChildSurface;
            uint64_t v10 = CVPixelBufferCreateWithIOSurface(0, ChildSurface, 0, &pixelBufferOut);
            goto LABEL_54;
          }
          uint64_t v10 = 4294950305;
        }
LABEL_55:
        double v37 = pixelBufferOut;
        DataCFNumberRef Size = v42;
        if (pixelBufferOut) {
          goto LABEL_66;
        }
        goto LABEL_58;
      }
      unint64_t v9 = 0;
      uint64_t v10 = 4294950305;
LABEL_81:
      OSType PixelFormatType = v45;
      goto LABEL_54;
    }
    unint64_t v9 = 0;
  }
  else
  {
    unint64_t v9 = 0;
  }
LABEL_58:
  uint64_t v38 = CVPixelBufferLockBaseAddress(a1, 0);
  if (!v38)
  {
    planeBaseAddress[0] = CVPixelBufferGetBaseAddressOfPlane(a1, 0);
    planeBaseAddress[1] = CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
    planeWidth[0] = a2;
    planeWidth[1] = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
    v48[0] = a3;
    v48[1] = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
    planeBytesPerRow[0] = v44;
    planeBytesPerRow[1] = v43;
    uint64_t v10 = CVPixelBufferCreateWithPlanarBytes(0, a2, a3, PixelFormatType, 0, DataSize, 2uLL, planeBaseAddress, planeWidth, v48, planeBytesPerRow, (CVPixelBufferReleasePlanarBytesCallback)_wrappingBufferReleaseCallback, a1, 0, &pixelBufferOut);
    if (v10)
    {
      CVPixelBufferUnlockBaseAddress(a1, 0);
      goto LABEL_61;
    }
    CFRetain(a1);
    double v37 = pixelBufferOut;
LABEL_66:
    CMPhotoPropagateColorPropertiesFromSourceBuffer(a1, v37);
    *a4 = pixelBufferOut;
    CVPixelBufferRef pixelBufferOut = 0;
    if (!v9) {
      return v10;
    }
LABEL_67:
    CFRelease(v9);
    return v10;
  }
  uint64_t v10 = v38;
LABEL_61:
  if (pixelBufferOut) {
    CFRelease(pixelBufferOut);
  }
  if (v9) {
    goto LABEL_67;
  }
  return v10;
}

void CMPhotoPropagateColorPropertiesFromSourceBuffer(CVBufferRef buffer, __CVBuffer *a2)
{
  v12[5] = *MEMORY[0x1E4F143B8];
  if (buffer && a2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *MEMORY[0x1E4F24B70];
    v12[0] = *MEMORY[0x1E4F24A00];
    v12[1] = v5;
    uint64_t v6 = *MEMORY[0x1E4F24BC8];
    void v12[2] = *MEMORY[0x1E4F24A90];
    v12[3] = v6;
    CFStringRef v7 = (const __CFString *)*MEMORY[0x1E4F24C18];
    v12[4] = *MEMORY[0x1E4F24C18];
    do
    {
      CFStringRef v8 = (const __CFString *)v12[v4];
      CVAttachmentMode attachmentMode = kCVAttachmentMode_ShouldNotPropagate;
      CFTypeRef v9 = CVBufferCopyAttachment(buffer, v8, &attachmentMode);
      if (v9)
      {
        uint64_t v10 = v9;
        if (v8 == v7) {
          CMPhotoAddMatrixToBufferIfAllowed(a2, v9);
        }
        else {
          CVBufferSetAttachment(a2, v8, v9, attachmentMode);
        }
        CFRelease(v10);
      }
      ++v4;
    }
    while (v4 != 5);
  }
}

void CMPhotoAddMatrixToBufferIfAllowed(__CVBuffer *a1, const void *a2)
{
  if (!a1 || !a2) {
    return;
  }
  int PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  int v5 = CMPhotoPixelFormatContainsRGB(PixelFormatType);
  BOOL v6 = 1;
  if (PixelFormatType <= 1278226735)
  {
    if ((PixelFormatType - 1278226488) <= 0x30
      && ((1 << (PixelFormatType - 56)) & 0x1400000000001) != 0)
    {
      goto LABEL_17;
    }
    goto LABEL_11;
  }
  if (((PixelFormatType - 1278226736) > 6 || ((1 << (PixelFormatType - 48)) & 0x45) == 0)
    && PixelFormatType != 1717855600
    && PixelFormatType != 1751410032)
  {
LABEL_11:
    BOOL v6 = PixelFormatType == 1751411059 || PixelFormatType == 1717856627;
  }
LABEL_17:
  BOOL v8 = 1;
  if (PixelFormatType != 825306677 && PixelFormatType != 825437747) {
    BOOL v8 = PixelFormatType == 1932996149;
  }
  if (PixelFormatType <= 1652056887)
  {
    if (PixelFormatType > 1650946097)
    {
      if (PixelFormatType <= 1651847471)
      {
        if (PixelFormatType == 1650946098) {
          return;
        }
        int v9 = 1651519798;
      }
      else
      {
        if (PixelFormatType == 1651847472 || PixelFormatType == 1651925816) {
          return;
        }
        int v9 = 1651926376;
      }
    }
    else if (PixelFormatType <= 1650942775)
    {
      if (PixelFormatType == 1647392369) {
        return;
      }
      int v9 = 1647719528;
    }
    else
    {
      if (PixelFormatType == 1650942776 || PixelFormatType == 1650943796) {
        return;
      }
      int v9 = 1650946096;
    }
    goto LABEL_48;
  }
  if (PixelFormatType > 1735549751)
  {
    if (PixelFormatType > 1919378231)
    {
      if (PixelFormatType == 1919378232 || PixelFormatType == 1919379252) {
        return;
      }
      int v9 = 1919381552;
      goto LABEL_48;
    }
    if (PixelFormatType == 1735549752) {
      return;
    }
    unsigned __int16 v10 = 28720;
  }
  else
  {
    if (PixelFormatType <= 1734504495)
    {
      if (PixelFormatType == 1652056888) {
        return;
      }
      int v9 = 1734501176;
      goto LABEL_48;
    }
    if (PixelFormatType == 1734504496 || PixelFormatType == 1734505012) {
      return;
    }
    unsigned __int16 v10 = 25140;
  }
  int v9 = v10 | 0x67720000;
LABEL_48:
  if (PixelFormatType != v9)
  {
    if (v5) {
      BOOL v6 = 1;
    }
    if (!v6 && !v8)
    {
      CFStringRef v11 = (const __CFString *)*MEMORY[0x1E4F24C18];
      CVBufferSetAttachment(a1, v11, a2, kCVAttachmentMode_ShouldPropagate);
    }
  }
}

uint64_t ___getHWQueueForFormat_block_invoke_2(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 40))
  {
    uint64_t result = CMPhotoUnifiedJPEGDecoderHardwareAvailable();
    if (!result) {
      return result;
    }
    int v3 = CMPhotoUnifiedJPEGDecoderNumHardwareCores();
    int NumberOfScalerCores = FigGetNumberOfScalerCores();
    int v5 = NumberOfScalerCores + 2 * v3 + ((NumberOfScalerCores + 1) >> 1);
    CFAllocatorRef v6 = CFGetAllocator(*(CFTypeRef *)(a1 + 32));
    uint64_t v7 = *(void *)(a1 + 32) + 48;
    BOOL v8 = "com.apple.CMPhoto.jfifhw.feederQueue";
    int v9 = "com.apple.CMPhoto.jfifhw.workerQueue";
    int v10 = v5;
    int v11 = 1;
  }
  else
  {
    uint64_t result = CMPhotoSupportsHEVCHWDecode();
    if (!result) {
      return result;
    }
    CFAllocatorRef v6 = CFGetAllocator(*(CFTypeRef *)(a1 + 32));
    uint64_t v7 = *(void *)(a1 + 32) + 96;
    BOOL v8 = "com.apple.CMPhoto.heifhw.feederQueue";
    int v9 = "com.apple.CMPhoto.heifhw.workerQueue";
    int v10 = 2;
    int v11 = 2;
  }
  return _createAsyncQueueElements(v6, v7, v8, v9, v10, v11);
}

void ___setupHWCacheIfNeeded_block_invoke(uint64_t a1)
{
  if (CMPhotoUnifiedJPEGDecoderHardwareAvailable() && !*(unsigned char *)(*(void *)(a1 + 40) + 240))
  {
    int v2 = 2 * CMPhotoUnifiedJPEGDecoderNumHardwareCores();
    int v3 = *(_DWORD **)(a1 + 40);
    v3[62] = 0;
    CFAllocatorRef v4 = CFGetAllocator(v3);
    *(void *)(*(void *)(a1 + 40) + 264) = CFArrayCreateMutable(v4, v2, 0);
    uint64_t v5 = *(void *)(a1 + 40);
    if (!*(void *)(v5 + 264)) {
      goto LABEL_12;
    }
    *(void *)(*(void *)(a1 + 40) + 256) = dispatch_semaphore_create(v2);
    uint64_t v5 = *(void *)(a1 + 40);
    if (*(void *)(v5 + 256))
    {
      *(unsigned char *)(v5 + 240) = 1;
      *(_DWORD *)(v5 + 244) = v2;
    }
    else
    {
LABEL_12:
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = -16991;
    }
    if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
    {
      CFAllocatorRef v6 = *(const void **)(v5 + 256);
      if (v6)
      {
        CFRelease(v6);
        *(void *)(*(void *)(a1 + 40) + 256) = 0;
        uint64_t v5 = *(void *)(a1 + 40);
      }
      uint64_t v7 = *(const void **)(v5 + 264);
      if (v7)
      {
        CFRelease(v7);
        *(void *)(*(void *)(a1 + 40) + 264) = 0;
      }
    }
  }
}

uint64_t CMPhotoUnifiedJPEGDecoderHardwareAvailable()
{
  if (_isHWAvailableHelper_onceToken != -1) {
    dispatch_once(&_isHWAvailableHelper_onceToken, &__block_literal_global_6);
  }
  return _isHWAvailableHelper_sHWAvailable;
}

uint64_t CMPhotoUnifiedJPEGDecoderNumHardwareCores()
{
  if (_isHWAvailableHelper_onceToken != -1) {
    dispatch_once(&_isHWAvailableHelper_onceToken, &__block_literal_global_6);
  }
  if (_isHWAvailableHelper_sHWAvailable) {
    return _isHWAvailableHelper_sNumCores;
  }
  else {
    return 0;
  }
}

uint64_t _decodeImageAsync(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, CFDictionaryRef theDict, int a6, void *a7, uint64_t a8, uint64_t a9)
{
  char v44 = 0;
  uint64_t v42 = 0;
  *(void *)size_t v43 = 0;
  char v41 = 0;
  int v40 = 0;
  memset(v39, 0, sizeof(v39));
  if (theDict)
  {
    LOBYTE(v37) = 0;
    if (CMPhotoCFDictionaryGetBooleanIfPresent(theDict, @"PreferLowMemory", &v37)) {
      v39[0] = v37;
    }
    CMPhotoCFDictionaryGetBooleanIfPresent(theDict, @"HighPriority", &v44);
    CMPhotoCFDictionaryGetBooleanIfPresent(theDict, @"UseLimitedConcurrencyQueue", v39);
    CFAllocatorRef v16 = CFGetAllocator(a1);
    DeepCopy = CMPhotoDictionaryCreateDeepCopy(v16, theDict);
    if (!DeepCopy)
    {
      uint64_t v21 = 4294950305;
LABEL_12:
      unint64_t v22 = 0;
      if (!DeepCopy) {
        goto LABEL_48;
      }
LABEL_47:
      CFRelease(DeepCopy);
      goto LABEL_48;
    }
    int SizeIfPresent = CMPhotoCFDictionaryGetSizeIfPresent(theDict, @"ReservedRequestID", v43);
    if (CMPhotoCFDictionaryGetIntIfPresent(theDict, @"AccelerationMode", &v39[1])) {
      BOOL v19 = *(_DWORD *)&v39[1] >= 3u;
    }
    else {
      BOOL v19 = 0;
    }
    if (v19) {
      goto LABEL_10;
    }
  }
  else
  {
    DeepCopy = 0;
    int SizeIfPresent = 0;
  }
  CMPhotoDecompressionContainerFindFirstAuxiliaryOfTypeForInternalIndexWithOptions(a1, a2, 0, 3, 0, &v41, &v42);
  if (!v41)
  {
    int ShouldDecodeAlphaAutomatically = 0;
    if (SizeIfPresent) {
      goto LABEL_18;
    }
LABEL_21:
    uint64_t ThumbnailGeometryForIndex_0 = CMPhotoDecompressionSessionReserveRequestID(a1[2], v43);
    if (ThumbnailGeometryForIndex_0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
  LODWORD(v37) = 0;
  uint64_t ThumbnailGeometryForIndex_0 = _copyImageSubsamplingForIndex_1((uint64_t)a1, a2, &v37);
  if (ThumbnailGeometryForIndex_0) {
    goto LABEL_11;
  }
  int ShouldDecodeAlphaAutomatically = CMPhotoShouldDecodeAlphaAutomatically(theDict, v37, &v40);
  if (!SizeIfPresent) {
    goto LABEL_21;
  }
LABEL_18:
  if (!*(void *)v43)
  {
LABEL_10:
    uint64_t ThumbnailGeometryForIndex_0 = FigSignalErrorAt();
LABEL_11:
    uint64_t v21 = ThumbnailGeometryForIndex_0;
    goto LABEL_12;
  }
LABEL_22:
  ShouldUseHWDecoderForCFNumberRef Size = *(_DWORD *)&v39[1] == 2;
  if (!*(_DWORD *)&v39[1])
  {
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    if (a4 == 1)
    {
      uint64_t ThumbnailGeometryForIndex_0 = _getThumbnailGeometryForIndex_0((uint64_t)a1, a2, a3, &v37, &v38, 0);
      if (ThumbnailGeometryForIndex_0) {
        goto LABEL_11;
      }
    }
    else if (a4)
    {
      uint64_t ThumbnailGeometryForIndex_0 = _getAuxiliaryImageGeometryForIndex_1((uint64_t)a1, a2, a3, v24, &v37, &v38, 0);
      if (ThumbnailGeometryForIndex_0) {
        goto LABEL_11;
      }
    }
    else
    {
      uint64_t ThumbnailGeometryForIndex_0 = _getImageGeometryForIndex_1((uint64_t)a1, a2, v23, &v37, &v38, 0);
      if (ThumbnailGeometryForIndex_0) {
        goto LABEL_11;
      }
    }
    ShouldUseHWDecoderForCFNumberRef Size = CMPhotoShouldUseHWDecoderForSize(v38 * v37, 0);
  }
  AsyncRequest = CMPhotoDecompressionSessionCreateAsyncRequest(0x68uLL, *(uint64_t *)v43, v44 != 0, a1, v39[0], ShouldUseHWDecoderForSize, a8, a9, a6);
  if (AsyncRequest)
  {
    uint64x2_t v28 = AsyncRequest;
    if (DeepCopy) {
      CFTypeRef v29 = CFRetain(DeepCopy);
    }
    else {
      CFTypeRef v29 = 0;
    }
    *((void *)v28 + 12) = v29;
    CFTypeRef v30 = (CFTypeRef)a1[6];
    if (v30) {
      CFTypeRef v30 = CFRetain(v30);
    }
    *((void *)v28 + 11) = v30;
    v28[14] = a4;
    *((void *)v28 + 6) = a2;
    uint64_t v31 = v42;
    if (!ShouldDecodeAlphaAutomatically) {
      uint64_t v31 = -1;
    }
    *((void *)v28 + 8) = a3;
    *((void *)v28 + 9) = v31;
    int v32 = v40;
    if (!ShouldDecodeAlphaAutomatically) {
      int v32 = 0;
    }
    v28[20] = v32;
    if (a7) {
      *a7 = *(void *)v43;
    }
    uint64_t v21 = CMPhotoDecompressionSessionEnqueueAsynchronousRequest(a1[2], (const void **)v28);
    if (v21) {
      unint64_t v22 = v28;
    }
    else {
      unint64_t v22 = 0;
    }
    if (DeepCopy) {
      goto LABEL_47;
    }
  }
  else
  {
    unint64_t v22 = 0;
    uint64_t v21 = 4294950305;
    if (DeepCopy) {
      goto LABEL_47;
    }
  }
LABEL_48:
  if (v22)
  {
    uint64_t v33 = (const void *)v22[11];
    if (v33)
    {
      CFRelease(v33);
      v22[11] = 0;
    }
    CFDictionaryRef v34 = (const void *)v22[12];
    if (v34)
    {
      CFRelease(v34);
      v22[12] = 0;
    }
    CMPhotoDecompressionSessionFreeAsyncRequest(v22);
  }
  return v21;
}

uint64_t CMPhotoDecompressionSessionReserveRequestID(uint64_t a1, void *a2)
{
  uint64_t result = 4294950306;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = 0;
      *a2 = atomic_fetch_add_explicit((atomic_ullong *volatile)(a1 + 24), 1uLL, memory_order_relaxed) + 1;
    }
  }
  return result;
}

uint64_t CMPhotoSupportsHEVCHWDecode()
{
  v0 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  if (CMPhotoSupportsHEVCHWDecode_onceToken != -1) {
    dispatch_once(&CMPhotoSupportsHEVCHWDecode_onceToken, &__block_literal_global_3);
  }
  if (*v0 == 1) {
    kdebug_trace();
  }
  return CMPhotoSupportsHEVCHWDecode_supported;
}

uint64_t _getScaledEvenCropRect@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  if (a2 == a4 && a3 == a5)
  {
    long long v6 = *(_OWORD *)(result + 16);
    *(_OWORD *)a6 = *(_OWORD *)result;
    *(_OWORD *)(a6 + 16) = v6;
  }
  else
  {
    unint64_t v7 = (a4 << 16) / a2;
    uint64_t v8 = *(void *)(result + 8);
    uint64_t v9 = *(void *)(result + 24) + v8;
    unint64_t v10 = (a5 << 16) / a3;
    unint64_t v11 = ((*(void *)result * v7 + 0x10000) >> 16) & 0xFFFFFFFFFFFELL;
    unint64_t v12 = ((v8 * v10 + 0x10000) >> 16) & 0xFFFFFFFFFFFELL;
    unint64_t v13 = (((*(void *)(result + 16) + *(void *)result) * v7 + 0x10000) >> 16) & 0xFFFFFFFFFFFELL;
    unint64_t v14 = ((v9 * v10 + 0x10000) >> 16) & 0xFFFFFFFFFFFELL;
    *(void *)a6 = v11;
    *(void *)(a6 + 8) = v12;
    unint64_t v15 = v13 - v11;
    *(void *)(a6 + 16) = v15;
    *(void *)(a6 + 24) = v14 - v12;
    if (!v15) {
      *(void *)(a6 + 16) = 2;
    }
    if (v14 == v12) {
      *(void *)(a6 + 24) = 2;
    }
  }
  return result;
}

uint64_t CMPhotoCompressionSessionOpenEmptyContainer(uint64_t a1, CFDictionaryRef theDict)
{
  if (!a1) {
    return 4294950306;
  }
  if (*(unsigned char *)(a1 + 16)) {
    return 4294950195;
  }
  if (!*(unsigned char *)(a1 + 72) || (uint64_t result = CMPhotoCompressionSessionCloseContainer(a1), !result))
  {
    uint64_t v5 = (uint64_t (***)())(a1 + 80);
    long long v6 = CMPhotoCompressionSessionVTableHEIF;
    *(void *)(a1 + 80) = CMPhotoCompressionSessionVTableHEIF;
    if (theDict)
    {
      int v7 = -1;
      if (CMPhotoCFDictionaryGetIntIfPresent(theDict, @"ContainerFormat", &v7))
      {
        if (v7 == 1)
        {
          long long v6 = (uint64_t (**)())&CMPhotoCompressionSessionVTableJFIF;
          *uint64_t v5 = (uint64_t (**)())&CMPhotoCompressionSessionVTableJFIF;
          if (!&CMPhotoCompressionSessionVTableJFIF) {
            return 4294950195;
          }
        }
        else
        {
          if (v7) {
            return FigSignalErrorAt();
          }
          *uint64_t v5 = CMPhotoCompressionSessionVTableHEIF;
          if (!CMPhotoCompressionSessionVTableHEIF) {
            return 4294950195;
          }
        }
LABEL_13:
        if (v6)
        {
          if (!*v6) {
            return 4294950302;
          }
          uint64_t result = ((uint64_t (*)(uint64_t, CFDictionaryRef))*v6)(a1, theDict);
          if (!result) {
            *(unsigned char *)(a1 + 72) = 1;
          }
          return result;
        }
        return 4294950195;
      }
      long long v6 = *v5;
    }
    if (!v6) {
      return 4294950195;
    }
    goto LABEL_13;
  }
  return result;
}

uint64_t _newContainer(uint64_t a1, CFDictionaryRef theDict)
{
  *(_DWORD *)(a1 + 240) = 2;
  int v3 = (int *)(a1 + 240);
  if (theDict)
  {
    int v12 = 0;
    if (CMPhotoCFDictionaryGetIntIfPresent(theDict, @"ImageCountHint", &v12)) {
      BOOL v5 = v12 <= 1;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      return FigSignalErrorAt();
    }
    CMPhotoCFDictionaryGetIntIfPresent(theDict, @"BackingType", v3);
    int v6 = *v3;
    if (*v3)
    {
      if (v6 == 4)
      {
        CMPhotoCFDictionaryGetSizeIfPresent(theDict, @"BackingIOSurfaceDestinationSize", (void *)(a1 + 256));
      }
      else if (v6 == 3)
      {
        CFArrayRef Value = CFDictionaryGetValue(theDict, @"BackingFileURL");
        if (!Value) {
          return FigSignalErrorAt();
        }
        uint64_t v8 = Value;
        CFTypeID v9 = CFGetTypeID(Value);
        if (v9 != CFURLGetTypeID()) {
          return FigSignalErrorAt();
        }
        *(void *)(a1 + 248) = CFRetain(v8);
      }
    }
    else
    {
      *int v3 = 2;
    }
  }
  uint64_t result = *(unsigned int *)(a1 + 396);
  if (*(unsigned char *)(a1 + 392))
  {
    if (result)
    {
      return 0;
    }
    else
    {
      int v11 = JPEGDeviceInterface_openDriverConnection();
      uint64_t result = 0;
      *(_DWORD *)(a1 + 396) = v11;
    }
  }
  else if (result)
  {
    JPEGDeviceInterface_closeDriverConnection(result);
    uint64_t result = 0;
    *(_DWORD *)(a1 + 396) = 0;
  }
  return result;
}

uint64_t _newContainer_0(uint64_t a1, const __CFDictionary *a2)
{
  CFAllocatorRef v4 = CFGetAllocator((CFTypeRef)a1);
  BOOL v5 = *(const void **)(a1 + 96);
  *(void *)(a1 + 96) = v4;
  if (v4) {
    CFRetain(v4);
  }
  if (v5) {
    CFRelease(v5);
  }
  *(unsigned char *)(a1 + 138) = 0;
  int v6 = (unsigned char *)(a1 + 138);
  *(_WORD *)(a1 + 136) = 0;
  int v7 = (unsigned char *)(a1 + 136);
  *(_WORD *)(a1 + 112) = 0;
  FigSemaphoreDestroy();
  *(void *)(a1 + 200) = 0;
  uint64_t v8 = *(NSObject **)(a1 + 192);
  if (v8)
  {
    dispatch_release(v8);
    *(void *)(a1 + 192) = 0;
  }
  *(_DWORD *)(a1 + 216) = 0;
  CFTypeID v9 = *(const void **)(a1 + 120);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a1 + 120) = 0;
  }
  unint64_t v10 = *(const void **)(a1 + 168);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(a1 + 168) = 0;
  }
  int v11 = *(const void **)(a1 + 152);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(a1 + 152) = 0;
  }
  int v12 = *(const void **)(a1 + 160);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(a1 + 160) = 0;
  }
  unint64_t v13 = *(const void **)(a1 + 128);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(a1 + 128) = 0;
  }
  _destroySequenceGroupReaders(*(const __CFArray **)(a1 + 144));
  *(void *)(a1 + 144) = 0;
  CMPhotoHEIFFileWriterDispose(*(const void ***)(a1 + 88));
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 104) = 0;
  CFAllocatorRef v14 = CFGetAllocator((CFTypeRef)a1);
  uint64_t v15 = CMPhotoHEIFFileWriterCreate(v14, a2, (void *)(a1 + 88));
  uint64_t v16 = v15;
  if (a2 && !v15)
  {
    CMPhotoCFDictionaryGetBooleanIfPresent(a2, @"StripExistingMetadata", v7);
    CMPhotoCFDictionaryGetBooleanIfPresent(a2, @"StripExistingThumbnails", v6 - 1);
    CMPhotoCFDictionaryGetBooleanIfPresent(a2, @"StripExistingAuxiliaryImages", v6);
  }
  return v16;
}

uint64_t ___isHWAvailableHelper_block_invoke()
{
  uint64_t v0 = JPEGDeviceInterface_openDriverConnection();
  _isHWAvailableHelper_sHWAvailable = v0 != 0;
  JPEGDeviceInterface_closeDriverConnection(v0);
  if (_isHWAvailableHelper_sHWAvailable)
  {
    uint64_t result = JPEGDeviceInterface_numberOfJPEGCores();
    _isHWAvailableHelper_sNumCores = result;
  }
  else
  {
    uint64_t result = CMPhotoParavirtualizedGuestJPEGHardwareGetCapabilities(0, &_isHWAvailableHelper_sNumCores, 0, 0, 0, 0);
    _isHWAvailableHelper_sIsParavirtualized = result == 0;
    _isHWAvailableHelper_sHWAvailable = result == 0;
  }
  return result;
}

uint64_t ___isHWAvailableHelper_block_invoke_0()
{
  uint64_t v0 = JPEGDeviceInterface_openDriverConnection();
  _isHWAvailableHelper_sHWAvailable_0 = v0 != 0;
  uint64_t result = JPEGDeviceInterface_closeDriverConnection(v0);
  if (!_isHWAvailableHelper_sHWAvailable_0)
  {
    uint64_t result = CMPhotoParavirtualizedGuestJPEGHardwareGetCapabilities(0, 0, 0, 0, 0, 0);
    _isHWAvailableHelper_sIsParavirtualized_0 = result == 0;
    _isHWAvailableHelper_sHWAvailable_0 = result == 0;
  }
  return result;
}

uint64_t CMPhotoUnifiedJPEGDecoderDecode(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, void *a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, char a12, __CVBuffer *a13, CVPixelBufferRef *a14)
{
  uint64_t v218 = *MEMORY[0x1E4F143B8];
  if (!a14) {
    return 4294950306;
  }
  uint64_t v14 = a8;
  uint64_t v20 = a10;
  BOOL v192 = 0;
  uint64_t v21 = _prepare(a1, a2, a4, a5, a8, 0, a10, &v192);
  if (v21) {
    return v21;
  }
  int v182 = a4;
  CGRect v186 = (const void *)a2;
  unint64_t v22 = (int *)MEMORY[0x1E4F1EBA8];
  uint64_t v188 = v14;
  unsigned int v189 = a5;
  if (!v192)
  {
LABEL_145:
    char v83 = 0;
    goto LABEL_146;
  }
  int v23 = *MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1)
  {
    kdebug_trace();
    int v23 = *v22;
  }
  unint64_t v24 = *a7;
  unint64_t v25 = a7[1];
  uint64_t v26 = a7[2];
  uint64_t v27 = a7[3];
  LODWORD(v193[0]) = 0;
  unint64_t v28 = *(unsigned int *)(a1 + 148);
  unint64_t v181 = (unsigned int *)(a1 + 148);
  unint64_t v29 = *(unsigned int *)(a1 + 152);
  v212[0] = 0;
  long long v197 = 0u;
  long long v198 = 0u;
  *(void *)&long long v184 = v27;
  *((void *)&v184 + 1) = v26;
  unint64_t v178 = v25;
  unint64_t v179 = v24;
  if (v23 == 1)
  {
    kdebug_trace();
    unint64_t v25 = v178;
    unint64_t v24 = v179;
    uint64_t v26 = *((void *)&v184 + 1);
    uint64_t v27 = v184;
  }
  int v30 = 1;
  if ((v24 & 1) == 0 && (v25 & 1) == 0 && (v26 & 1) == 0) {
    int v30 = v27 & 1;
  }
  if ((int)a5 <= 875836517)
  {
    if (a5 != 875704422)
    {
      uint64_t v31 = 875704422;
      if (a5 != 875704934) {
        goto LABEL_32;
      }
    }
  }
  else if (a5 != 875836518)
  {
    if (a5 == 1380401729 || (uint64_t v31 = 875704422, a5 == 1111970369))
    {
      if (!a12) {
        LOBYTE(v30) = 1;
      }
      uint64_t v31 = a5;
      if ((v30 & 1) == 0)
      {
        int v32 = *(_DWORD *)(a1 + 164);
        if (v32 == 2) {
          unsigned int v33 = 875836518;
        }
        else {
          unsigned int v33 = 875704422;
        }
        if (v32 == 1) {
          uint64_t v31 = 875704934;
        }
        else {
          uint64_t v31 = v33;
        }
      }
    }
    goto LABEL_32;
  }
  if (!a12) {
    int v30 = 1;
  }
  if (v30) {
    uint64_t v31 = a5;
  }
  else {
    uint64_t v31 = 875704422;
  }
LABEL_32:
  BOOL v183 = (v24 | v25) != 0;
  if (v24 | v25 || v26 | v27)
  {
    unint64_t v34 = *(unsigned int *)(a1 + 156);
    unint64_t v35 = *(unsigned int *)(a1 + 160);
    unint64_t v36 = v24 / v34;
    unint64_t v37 = (v24 + v26 + v34 - 1) / v34 - v24 / v34;
    unint64_t v38 = v37 * v34;
    unint64_t v39 = *(unsigned int *)(a1 + 152);
    if (v38 >= *(unsigned int *)(a1 + 148)) {
      unint64_t v28 = *(unsigned int *)(a1 + 148);
    }
    else {
      unint64_t v28 = v38;
    }
    unint64_t v175 = v25 / v35;
    unint64_t v176 = v36;
    *(void *)&long long v197 = v36;
    *((void *)&v197 + 1) = v25 / v35;
    unint64_t v173 = (v25 + v27 + v35 - 1) / v35 - v25 / v35;
    unint64_t v174 = v37;
    *(void *)&long long v198 = v37;
    *((void *)&v198 + 1) = v173;
    if (v173 * v35 >= v39) {
      unint64_t v29 = v39;
    }
    else {
      unint64_t v29 = v173 * v35;
    }
  }
  else
  {
    unint64_t v173 = 0;
    unint64_t v174 = 0;
    unint64_t v175 = 0;
    unint64_t v176 = 0;
  }
  long long v177 = a7;
  if (v14)
  {
    if (v28 >> v14 << v14 == v28) {
      unint64_t v40 = v28 >> v14;
    }
    else {
      unint64_t v40 = (v28 >> v14) + 1;
    }
    if (v29 >> v14 << v14 == v29) {
      unint64_t v41 = v29 >> v14;
    }
    else {
      unint64_t v41 = (v29 >> v14) + 1;
    }
    if (v40 >= v41) {
      unint64_t v42 = v41;
    }
    else {
      unint64_t v42 = v40;
    }
    int v43 = v14;
    if ((int)v14 >= 1 && v42 <= 3)
    {
      unint64_t v44 = v14;
      do
      {
        int v43 = v44 - 1;
        unint64_t v45 = v28 >> (v44 - 1);
        if (v45 << (v44 - 1) == v28) {
          unint64_t v40 = v28 >> (v44 - 1);
        }
        else {
          unint64_t v40 = v45 + 1;
        }
        if (v29 >> v43 << v43 == v29) {
          unint64_t v41 = v29 >> v43;
        }
        else {
          unint64_t v41 = (v29 >> v43) + 1;
        }
        if (v40 >= v41) {
          unint64_t v46 = v41;
        }
        else {
          unint64_t v46 = v40;
        }
        if (v44 < 2) {
          break;
        }
        --v44;
      }
      while (v46 < 4);
    }
  }
  else
  {
    int v43 = 0;
    unint64_t v41 = v29;
    unint64_t v40 = v28;
  }
  if (!JPEGDeviceInterface_supportsDecodeSize(*(unsigned int *)(a1 + 148), *(unsigned int *)(a1 + 152), *(_DWORD *)(a1 + 164), v40, v41))
  {
    uint64_t v62 = 4294950302;
    goto LABEL_135;
  }
  if (a13)
  {
    unint64_t v47 = vcvtad_u64_f64(CMPhotoGetPixelBufferCLAPAsRect(a13));
    unint64_t v49 = vcvtad_u64_f64(v48);
    unint64_t v51 = vcvtad_u64_f64(v50);
    unint64_t v53 = vcvtad_u64_f64(v52);
    OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a13);
    BOOL v55 = !v183 && v184 == 0;
    BOOL v56 = v40 == v51 && v41 == v53;
    BOOL v57 = v56 && v47 == 0;
    BOOL v58 = v57 && v49 == 0;
    BOOL v59 = v58 && v31 == PixelFormatType;
    BOOL v60 = !v59 || !v55;
    uint64_t v20 = a10;
    unint64_t v22 = (int *)MEMORY[0x1E4F1EBA8];
    if (!v60)
    {
      double v61 = (__CVBuffer *)CFRetain(a13);
      v212[0] = v61;
      if (a6 && CVPixelBufferGetIOSurface(v61))
      {
        uint64_t v62 = FigSignalErrorAt();
        goto LABEL_135;
      }
LABEL_99:
      if (_isHWAvailableHelper_onceToken != -1) {
        dispatch_once(&_isHWAvailableHelper_onceToken, &__block_literal_global_6);
      }
      int v64 = *v22;
      int v180 = _isHWAvailableHelper_sIsParavirtualized;
      if (_isHWAvailableHelper_sIsParavirtualized)
      {
        BOOL v172 = 0;
      }
      else
      {
        if (v64 == 1) {
          kdebug_trace();
        }
        int v65 = CMPhotoDecompressionSessionCopyPooledJPEGHWSession(*(void *)a1, (unsigned int *)v193);
        int v64 = *v22;
        if (*v22 == 1)
        {
          kdebug_trace();
          int v64 = *v22;
        }
        BOOL v172 = v65 == 0;
      }
      if (v64 == 1) {
        kdebug_trace();
      }
      if (v176 | v175 | v174 | v173) {
        double v66 = (uint64_t *)&v197;
      }
      else {
        double v66 = 0;
      }
      unsigned int v67 = v193[0];
      uint64_t v69 = *(void *)(a1 + 224);
      uint64_t v68 = *(void *)(a1 + 232);
      IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(v212[0]);
      BOOL v71 = a9 != 0;
      uint64_t v62 = JPEGDecompressSurface(v67, v180, v69, v68, (uint64_t)IOSurface, v181, v71, v20, v40, v41, v66, 0);
      if (v62 == -536870192)
      {
        *(void *)&long long v209 = 0;
        uint64_t PooledIOSurfaceFromStreamRange = _createPooledIOSurfaceFromStreamRange((uint64_t)v186, *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), 0, (IOSurfaceRef *)&v209);
        if (PooledIOSurfaceFromStreamRange)
        {
          uint64_t v62 = PooledIOSurfaceFromStreamRange;
          uint64_t v14 = v188;
          uint64_t v20 = a10;
          unint64_t v22 = (int *)MEMORY[0x1E4F1EBA8];
LABEL_133:
          if (v172) {
            CMPhotoDecompressionSessionRecyclePooledJPEGHWSession(*(void *)a1, LODWORD(v193[0]), 0);
          }
          goto LABEL_135;
        }
        unsigned int v73 = v193[0];
        uint64_t v74 = v209;
        uint64_t v75 = *(void *)(a1 + 232);
        IOSurfaceRef v76 = CVPixelBufferGetIOSurface(v212[0]);
        uint64_t v62 = JPEGDecompressSurface(v73, v180, v74, v75, (uint64_t)v76, v181, v71, a10, v40, v41, v66, 0);
        if (*(unsigned char *)(a1 + 240)) {
          IOSurfaceDecrementUseCount(*(IOSurfaceRef *)(a1 + 224));
        }
        unsigned int v77 = *(const void **)(a1 + 224);
        if (v77) {
          CFRelease(v77);
        }
        *(void *)(a1 + 224) = v74;
        *(unsigned char *)(a1 + 240) = 1;
      }
      uint64_t v14 = v188;
      uint64_t v20 = a10;
      unint64_t v22 = (int *)MEMORY[0x1E4F1EBA8];
      uint64_t v78 = *((void *)&v184 + 1);
      unint64_t v79 = v184;
      if (!v62)
      {
        if (!v183 && v184 == 0) {
          goto LABEL_132;
        }
        unint64_t v80 = v179 - v197 * *(unsigned int *)(a1 + 156);
        unint64_t v81 = v178 - *((void *)&v197 + 1) * *(unsigned int *)(a1 + 160);
        if (v43)
        {
          unint64_t v82 = 1 << v43;
          v80 /= v82;
          if (*((void *)&v184 + 1) >> v43 << v43 == *((void *)&v184 + 1)) {
            uint64_t v78 = *((void *)&v184 + 1) >> v43;
          }
          else {
            uint64_t v78 = (*((void *)&v184 + 1) >> v43) + 1;
          }
          if ((unint64_t)v184 >> v43 << v43 == (void)v184) {
            unint64_t v79 = (unint64_t)v184 >> v43;
          }
          else {
            unint64_t v79 = ((unint64_t)v184 >> v43) + 1;
          }
          v81 /= v82;
        }
        uint64_t v62 = CMPhotoSetPixelBufferCLAPFromRect(v212[0], 1, 1, (double)v80, (double)v81, (double)(unint64_t)v78, (double)v79);
        if (!v62)
        {
LABEL_132:
          uint64_t v62 = 0;
          *a14 = v212[0];
          v212[0] = 0;
        }
      }
      goto LABEL_133;
    }
  }
  if (*v22 == 1) {
    kdebug_trace();
  }
  if (a6) {
    CVPixelBufferNotBackedByIOSurfaceRef IOSurface = CMPhotoCreateCVPixelBufferNotBackedByIOSurface(*MEMORY[0x1E4F1CF80], v31, v40, v41, *(unsigned int *)(a1 + 156), *(unsigned int *)(a1 + 160), a11, 0, v212);
  }
  else {
    CVPixelBufferNotBackedByIOSurfaceRef IOSurface = CMPhotoSurfacePoolCreatePixelBuffer(v186, v31, v40, v41, a12 == 0, *(unsigned int *)(a1 + 156), *(unsigned int *)(a1 + 160), 0, a11, 0, v212);
  }
  uint64_t v62 = CVPixelBufferNotBackedByIOSurface;
  if (*v22 == 1) {
    kdebug_trace();
  }
  if (!v62) {
    goto LABEL_99;
  }
LABEL_135:
  if (v212[0]) {
    CFRelease(v212[0]);
  }
  a7 = v177;
  if (*v22 == 1) {
    kdebug_trace();
  }
  if (v182 || !v62)
  {
    if (v192) {
      return v62;
    }
    goto LABEL_145;
  }
  BOOL v192 = 0;
  char v83 = 1;
  uint64_t v62 = _prepare(a1, (uint64_t)v186, 1, v189, v14, 0, v20, &v192);
  if (v62 || v192) {
    return v62;
  }
LABEL_146:
  int v84 = *v22;
  if (*v22 == 1)
  {
    kdebug_trace();
    int v84 = *v22;
  }
  uint64_t v85 = *a7;
  uint64_t v86 = a7[1];
  int v87 = a7;
  unint64_t v88 = a7[2];
  unint64_t v89 = v87[3];
  CVPixelBufferRef v208 = 0;
  int v207 = 0;
  v216 = 0;
  v217 = 0;
  long long v215 = 0uLL;
  v213 = 0;
  v214 = 0;
  if (v84 == 1) {
    kdebug_trace();
  }
  uint64_t v206 = 0;
  long long v204 = 0u;
  long long v205 = 0u;
  long long v202 = 0u;
  long long v203 = 0u;
  long long v200 = 0u;
  long long v201 = 0u;
  long long v198 = 0u;
  long long v199 = 0u;
  long long v197 = 0u;
  if (*(_DWORD *)(a1 + 140) == 8)
  {
    int v90 = *(_DWORD *)(a1 + 112);
    int v196 = 0;
    int v91 = CMPhotoDecompressionContainerJFIF_pixelFormatToAppleJPEGFormat(v189, v90 != 2, &v196);
    if (v90 != 2)
    {
      if (!a12 && !v91)
      {
        int v92 = 1;
        goto LABEL_157;
      }
      uint64_t v95 = v189;
      if ((int)v189 <= 1111970368)
      {
        if (v189 == 875704422 || v189 == 875704934 || v189 == 875836518)
        {
          signed int v94 = 0;
          if (a12) {
            uint64_t v95 = 875704422;
          }
          else {
            uint64_t v95 = v189;
          }
          goto LABEL_198;
        }
LABEL_191:
        signed int v94 = 0;
        if (*(_DWORD *)(a1 + 136) == 4) {
          uint64_t v95 = 1278226488;
        }
        else {
          uint64_t v95 = 875704422;
        }
        goto LABEL_198;
      }
      if (v189 != 1380401729)
      {
        if (v189 == 1278226488)
        {
LABEL_190:
          signed int v94 = 0;
LABEL_198:
          int v92 = 1;
          goto LABEL_199;
        }
        if (v189 != 1111970369) {
          goto LABEL_191;
        }
      }
      if (!a12)
      {
        signed int v94 = 0;
        int v92 = 1;
        goto LABEL_168;
      }
      uint64_t v95 = 1111970369;
      if (v189 != 1111970369 || !a6)
      {
        uint64_t v97 = *(int *)(a1 + 136);
        signed int v94 = 0;
        if (v97 >= 5) {
          uint64_t v95 = 875704422;
        }
        else {
          uint64_t v95 = dword_1AB9E2670[v97];
        }
        goto LABEL_198;
      }
      goto LABEL_190;
    }
  }
  else
  {
    int v196 = 0;
    int v91 = CMPhotoDecompressionContainerJFIF_pixelFormatToAppleJPEGFormat(v189, 0, &v196);
  }
  int v92 = 0;
LABEL_157:
  int v93 = *(_DWORD *)(a1 + 140);
  if (*(_DWORD *)(a1 + 112) == 2)
  {
    if (v93 < 9)
    {
      signed int v94 = 8 - v93;
      if (*(_DWORD *)(a1 + 100) == 3) {
        uint64_t v95 = 1111970369;
      }
      else {
        uint64_t v95 = 1278226488;
      }
      goto LABEL_199;
    }
    goto LABEL_163;
  }
  if (v93 == 12)
  {
LABEL_163:
    signed int v94 = 16 - v93;
    if (*(_DWORD *)(a1 + 100) == 3)
    {
      if (*(_DWORD *)(a1 + 136) == 3 && *(_DWORD *)(a1 + 116) == 1) {
        uint64_t v95 = 1952854576;
      }
      else {
        uint64_t v95 = 1815491698;
      }
    }
    else
    {
      uint64_t v95 = 1278226742;
    }
    goto LABEL_199;
  }
  signed int v94 = 0;
  if (v91)
  {
LABEL_168:
    uint64_t v95 = v189;
    goto LABEL_199;
  }
  if (v196 == 18 && v93 == 8) {
    uint64_t v95 = 1278226488;
  }
  else {
    uint64_t v95 = v189;
  }
LABEL_199:
  uint64_t v98 = CMPhotoDecompressionContainerJFIF_pixelFormatToAppleJPEGFormat(v95, v92, &v196);
  if (v98)
  {
LABEL_321:
    uint64_t v62 = v98;
    size_t v113 = (_DWORD *)MEMORY[0x1E4F1EBA8];
    goto LABEL_325;
  }
  if (v196 == 18 && (v189 == 825306677 || v189 == 1932996149 || v189 == 825437747)) {
    uint64_t v95 = v189;
  }
  applejpeg_decode_clear_options();
  int v99 = applejpeg_decode_set_option_outformat();
  if (v99
    || (v85 | v86 || v88 | v89) && (int v99 = applejpeg_decode_set_option_crop()) != 0
    || v188 && (int v99 = applejpeg_decode_set_option_outsize()) != 0)
  {
    uint64_t v98 = CMPhotoAppleJPEGErrorToCMPhotoError(v99);
    goto LABEL_321;
  }
  int v195 = 0;
  int v194 = 0;
  int output_dimensions = applejpeg_decode_get_output_dimensions();
  if (output_dimensions)
  {
    uint64_t v62 = CMPhotoAppleJPEGErrorToCMPhotoError(output_dimensions);
    size_t v113 = (_DWORD *)MEMORY[0x1E4F1EBA8];
LABEL_325:
    if (v208) {
      CFRelease(v208);
    }
    goto LABEL_317;
  }
  LODWORD(v101) = v195;
  uint64_t v190 = v195;
  LODWORD(v102) = v194;
  uint64_t v185 = v194;
  char v103 = v83 ^ 1;
  if (!v188) {
    char v103 = 1;
  }
  if (v103)
  {
    BOOL v105 = 0;
    double v104 = a13;
    if (!a13)
    {
LABEL_238:
      BOOL cf = v105;
      if (*MEMORY[0x1E4F1EBA8] == 1)
      {
        kdebug_trace();
        LODWORD(v101) = v195;
        LODWORD(v102) = v194;
      }
      size_t v115 = (int)v101;
      size_t v116 = (int)v102;
      if (v95 == 1952854576) {
        goto LABEL_243;
      }
      if (v95 == 875704934)
      {
        unint64_t v117 = (int)v101 + (v101 | 0xFFFFFFFFFFFFFFFELL) + 2;
        unint64_t v118 = (int)v102;
        goto LABEL_245;
      }
      unint64_t v117 = (int)v101;
      unint64_t v118 = (int)v102;
      if (v95 == 875704422)
      {
LABEL_243:
        unint64_t v117 = (int)v101 + (v101 | 0xFFFFFFFFFFFFFFFELL) + 2;
        unint64_t v118 = (int)v102 + (v102 | 0xFFFFFFFFFFFFFFFELL) + 2;
      }
LABEL_245:
      if (v117 > (int)v101 || v118 > (int)v102)
      {
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (!Mutable)
        {
          uint64_t v62 = 4294950305;
          size_t v113 = (_DWORD *)MEMORY[0x1E4F1EBA8];
          BOOL v105 = cf;
          goto LABEL_256;
        }
        CFMutableDictionaryRef v119 = Mutable;
        uint64_t v121 = CMPhotoCFDictionarySetSize(Mutable, *MEMORY[0x1E4F24CE8], v117 - v115);
        if (v121 || (uint64_t v121 = CMPhotoCFDictionarySetSize(v119, *MEMORY[0x1E4F24CD0], v118 - v116), v121))
        {
          uint64_t v62 = v121;
          size_t v113 = (_DWORD *)MEMORY[0x1E4F1EBA8];
          BOOL v105 = cf;
LABEL_255:
          CFRelease(v119);
          goto LABEL_256;
        }
      }
      else
      {
        CFMutableDictionaryRef v119 = 0;
      }
      if (a6) {
        uint64_t v122 = CMPhotoCreateCVPixelBufferNotBackedByIOSurface(*MEMORY[0x1E4F1CF80], v95, v115, v116, v117, v118, a11, (uint64_t)v119, &v208);
      }
      else {
        uint64_t v122 = CMPhotoSurfacePoolCreatePixelBuffer(v186, v95, v115, v116, 1, v117, v118, 0, a11, v119, &v208);
      }
      uint64_t v62 = v122;
      size_t v113 = (_DWORD *)MEMORY[0x1E4F1EBA8];
      BOOL v105 = cf;
      if (v119) {
        goto LABEL_255;
      }
LABEL_256:
      if (*v113 == 1) {
        kdebug_trace();
      }
      if (v62) {
        goto LABEL_325;
      }
      goto LABEL_259;
    }
  }
  else
  {
    if (v85 | v86)
    {
      double v104 = a13;
    }
    else
    {
      double v104 = a13;
      if (!(v88 | v89))
      {
        unint64_t v88 = *(void *)(a1 + 56);
        unint64_t v89 = *(void *)(a1 + 64);
      }
    }
    unint64_t v101 = v88 >> v188;
    if (v88 >> v188 << v188 != v88) {
      ++v101;
    }
    unint64_t v102 = v89 >> v188;
    if (v89 >> v188 << v188 != v89) {
      ++v102;
    }
    BOOL v105 = v101 != v195 || v102 != v194;
    int v195 = v101;
    int v194 = v102;
    if (!v104) {
      goto LABEL_238;
    }
  }
  CMPhotoGetPixelBufferCLAPAsRect(v104);
  double v108 = v107;
  double v110 = v109;
  OSType v111 = CVPixelBufferGetPixelFormatType(v104);
  LODWORD(v101) = v195;
  LODWORD(v102) = v194;
  if (v95 != v111 || v108 != (double)v195 || v110 != (double)v194) {
    goto LABEL_238;
  }
  size_t v112 = (__CVBuffer *)CFRetain(v104);
  CVPixelBufferRef v208 = v112;
  size_t v113 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (a6 && CVPixelBufferGetIOSurface(v112))
  {
    uint64_t v114 = FigSignalErrorAt();
LABEL_329:
    uint64_t v62 = v114;
    goto LABEL_325;
  }
LABEL_259:
  uint64_t v114 = CVPixelBufferLockBaseAddress(v208, 0);
  if (v114) {
    goto LABEL_329;
  }
  uint64_t PixelBufferDataPointers = CMPhotoGetPixelBufferDataPointers(v208, 0, 0, &v207, (uint64_t)&v216, (uint64_t)&v215, (uint64_t)&v213);
  if (PixelBufferDataPointers) {
    goto LABEL_323;
  }
  v212[0] = v216;
  v212[1] = v213;
  v212[2] = v217;
  v212[3] = v214;
  long long v209 = v215;
  uint64_t v210 = 0;
  uint64_t v211 = 0;
  int v124 = applejpeg_decode_set_option_stride();
  if (v124) {
    goto LABEL_322;
  }
  if (*v113 == 1) {
    kdebug_trace();
  }
  int v124 = applejpeg_decode_image_all();
  if ((v124 + 1) > 1)
  {
LABEL_322:
    uint64_t PixelBufferDataPointers = CMPhotoAppleJPEGErrorToCMPhotoError(v124);
LABEL_323:
    uint64_t v62 = PixelBufferDataPointers;
    goto LABEL_324;
  }
  if (v94 >= 1)
  {
    uint64_t v62 = 4294950306;
    if ((int)v200 <= 15)
    {
      if (v200 == 4)
      {
        int v162 = HIDWORD(v199);
        if (SHIDWORD(v199) >= 1)
        {
          uint64_t v163 = 0;
          int v164 = DWORD2(v199);
          uint32x4_t v165 = (uint32x4_t)vdupq_n_s32(v94);
          uint32x4_t v166 = (uint32x4_t)vnegq_s32(vdupq_n_s32(8 - 2 * v94));
          do
          {
            if (v164 >= 1)
            {
              uint64_t v167 = 0;
              uint64_t v168 = v197 + *((void *)&v204 + 1) * v163;
              do
              {
                v125.i32[0] = *(_DWORD *)(v168 + 4 * v167);
                uint32x4_t v169 = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v125));
                int16x8_t v170 = (int16x8_t)vorrq_s8((int8x16_t)vshlq_u32(v169, v165), (int8x16_t)vshlq_u32(v169, v166));
                *(int16x4_t *)v170.i8 = vmovn_s32((int32x4_t)v170);
                uint8x8_t v125 = (uint8x8_t)vmovn_s16(v170);
                *(_DWORD *)(v168 + 4 * v167) = v125.i32[0];
                int v164 = DWORD2(v199);
                ++v167;
              }
              while ((int)v167 < SDWORD2(v199));
              int v162 = HIDWORD(v199);
            }
            ++v163;
          }
          while (v163 < v162);
        }
      }
      else
      {
        if (v200 != 5) {
          goto LABEL_324;
        }
        int v140 = HIDWORD(v199);
        if (SHIDWORD(v199) >= 1)
        {
          uint64_t v141 = 0;
          int v142 = DWORD2(v199);
          do
          {
            if (v142 >= 1)
            {
              uint64_t v143 = 0;
              uint64_t v144 = v197 + *((void *)&v204 + 1) * v141;
              do
              {
                *(unsigned char *)(v144 + v143) = (*(unsigned __int8 *)(v144 + v143) << v94) | (*(unsigned __int8 *)(v144 + v143) >> (8 - 2 * v94));
                int v142 = DWORD2(v199);
                ++v143;
              }
              while ((int)v143 < SDWORD2(v199));
              int v140 = HIDWORD(v199);
            }
            ++v141;
          }
          while (v141 < v140);
        }
      }
    }
    else if ((v200 - 16) < 2)
    {
      uint64_t v145 = HIDWORD(v199);
      if (SHIDWORD(v199) >= 1)
      {
        uint64_t v146 = 0;
        uint64_t v147 = v197;
        uint64_t v148 = *((void *)&v204 + 1);
        int v149 = DWORD2(v199);
        uint32x4_t v150 = (uint32x4_t)vdupq_n_s32(v94);
        uint32x4_t v151 = (uint32x4_t)vnegq_s32(vdupq_n_s32(16 - 2 * v94));
        do
        {
          if (v149 >= 1)
          {
            int v152 = (uint16x4_t *)(v147 + v146 * v148);
            int v153 = v149;
            do
            {
              uint32x4_t v154 = vmovl_u16(*v152);
              *v152++ = (uint16x4_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vshlq_u32(v154, v150), (int8x16_t)vshlq_u32(v154, v151)));
              --v153;
            }
            while (v153);
          }
          ++v146;
        }
        while (v146 != v145);
      }
    }
    else
    {
      if (v200 != 18)
      {
        if (v200 == 19)
        {
          uint64_t v126 = HIDWORD(v199);
          if (SHIDWORD(v199) >= 1)
          {
            uint64_t v127 = 0;
            uint64_t v128 = v197;
            uint64_t v129 = *((void *)&v204 + 1);
            int v130 = DWORD2(v199);
            char v131 = 16 - 2 * v94;
            do
            {
              if (v130 >= 1)
              {
                BOOL v132 = (_WORD *)(v128 + v127 * v129);
                int v133 = v130;
                do
                {
                  *BOOL v132 = (*v132 << v94) | ((unsigned __int16)*v132 >> v131);
                  ++v132;
                  --v133;
                }
                while (v133);
              }
              ++v127;
            }
            while (v127 != v126);
            if ((int)v126 >= 2)
            {
              uint64_t v134 = 0;
              unsigned int v135 = v126 >> 1;
              uint64_t v136 = *((void *)&v197 + 1);
              uint64_t v137 = v205;
              do
              {
                if (v130 >= 1)
                {
                  CGFloat v138 = (_WORD *)(v136 + v134 * v137);
                  int v139 = v130;
                  do
                  {
                    *CGFloat v138 = (*v138 << v94) | ((unsigned __int16)*v138 >> v131);
                    ++v138;
                    --v139;
                  }
                  while (v139);
                }
                ++v134;
              }
              while (v134 != v135);
            }
          }
          goto LABEL_314;
        }
LABEL_324:
        CVPixelBufferUnlockBaseAddress(v208, 0);
        goto LABEL_325;
      }
      uint64_t v155 = HIDWORD(v199);
      if (SHIDWORD(v199) >= 1)
      {
        uint64_t v156 = 0;
        uint64_t v157 = v197;
        uint64_t v158 = *((void *)&v204 + 1);
        int v159 = DWORD2(v199);
        do
        {
          if (v159 >= 1)
          {
            size_t v160 = (_WORD *)(v157 + v156 * v158);
            int v161 = v159;
            do
            {
              *size_t v160 = (*v160 << v94) | ((unsigned __int16)*v160 >> (16 - 2 * v94));
              ++v160;
              --v161;
            }
            while (v161);
          }
          ++v156;
        }
        while (v156 != v155);
      }
    }
  }
LABEL_314:
  if (v105)
  {
    v193[0] = 0;
    v193[1] = 0;
    v193[2] = v190;
    v193[3] = v185;
    uint64_t PixelBufferDataPointers = CMPhotoPixelBufferFillOutsideCropRect(v208, 0, v193);
    if (PixelBufferDataPointers) {
      goto LABEL_323;
    }
  }
  CVPixelBufferUnlockBaseAddress(v208, 0);
  uint64_t v62 = 0;
  *a14 = v208;
LABEL_317:
  if (*v113 == 1) {
    kdebug_trace();
  }
  return v62;
}

uint64_t JPEGDecompressSurface(unsigned int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int *a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, long long a12)
{
  BOOL v17 = (__IOSurface *)a3;
  v104[1] = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    if ((int)JPEGDeviceInterface_numberOfJPEGCores() < 2) {
      return JPEGDecompressSurfaceHelper(a1, (uint64_t)v17, a4, a5, *a6, a6[1], a6[4], a6[16], a6[17], a7, a8, v79, a9, SHIDWORD(a9), a10, a11, (void *)a12, *((void **)&a12 + 1));
    }
    int v19 = JPEGDeviceInterface_supportsRSTLogging();
    if (a1) {
      return JPEGDecompressSurfaceHelper(a1, (uint64_t)v17, a4, a5, *a6, a6[1], a6[4], a6[16], a6[17], a7, a8, v79, a9, SHIDWORD(a9), a10, a11, (void *)a12, *((void **)&a12 + 1));
    }
    if (a11) {
      return JPEGDecompressSurfaceHelper(a1, (uint64_t)v17, a4, a5, *a6, a6[1], a6[4], a6[16], a6[17], a7, a8, v79, a9, SHIDWORD(a9), a10, a11, (void *)a12, *((void **)&a12 + 1));
    }
    if (!v19) {
      return JPEGDecompressSurfaceHelper(a1, (uint64_t)v17, a4, a5, *a6, a6[1], a6[4], a6[16], a6[17], a7, a8, v79, a9, SHIDWORD(a9), a10, a11, (void *)a12, *((void **)&a12 + 1));
    }
    if (!*((unsigned char *)a6 + 33)) {
      return JPEGDecompressSurfaceHelper(a1, (uint64_t)v17, a4, a5, *a6, a6[1], a6[4], a6[16], a6[17], a7, a8, v79, a9, SHIDWORD(a9), a10, a11, (void *)a12, *((void **)&a12 + 1));
    }
    uint64_t v21 = *a6;
    uint64_t v20 = a6[1];
    if (v20 * (unint64_t)v21 < 0x3D0901 || v21 != a9 || v20 != a10) {
      return JPEGDecompressSurfaceHelper(a1, (uint64_t)v17, a4, a5, *a6, a6[1], a6[4], a6[16], a6[17], a7, a8, v79, a9, SHIDWORD(a9), a10, a11, (void *)a12, *((void **)&a12 + 1));
    }
    int v94 = a8;
    int v92 = -536870165;
    v104[0] = 0;
    *(void *)char v103 = 0;
    unsigned int v22 = JPEGDeviceInterface_numberOfJPEGCores();
    unsigned int v23 = a6[17];
    if (v22 >= v23) {
      unsigned int v24 = a6[17];
    }
    else {
      unsigned int v24 = v22;
    }
    double v100 = v17;
    if (v24 < 2)
    {
      if (!v24)
      {
        a8 = v94;
        return JPEGDecompressSurfaceHelper(a1, (uint64_t)v17, a4, a5, *a6, a6[1], a6[4], a6[16], a6[17], a7, a8, v79, a9, SHIDWORD(a9), a10, a11, (void *)a12, *((void **)&a12 + 1));
      }
      __int32 v95 = a7;
      uint64_t v89 = a4;
      unint64_t v101 = 0;
      notify = 0;
      group = 0;
      queue = 0;
      uint64_t v25 = 1;
LABEL_83:
      uint64_t v76 = 0;
      uint64_t v77 = 4 * v25;
      BOOL v17 = v100;
      do
      {
        uint64_t v78 = *(unsigned int *)((char *)v104 + v76);
        if (v78) {
          JPEGDeviceInterface_closeDriverConnection(v78);
        }
        v76 += 4;
      }
      while (v77 != v76);
      if (notify)
      {
        IONotificationPortSetDispatchQueue(notify, 0);
        IONotificationPortDestroy(notify);
      }
      a4 = v89;
      a8 = v94;
      a7 = v95;
      if (queue) {
        dispatch_release(queue);
      }
      if (group) {
        dispatch_release(group);
      }
      if (v101) {
        free(v101);
      }
      if (!v92) {
        return 0;
      }
      return JPEGDecompressSurfaceHelper(a1, (uint64_t)v17, a4, a5, *a6, a6[1], a6[4], a6[16], a6[17], a7, a8, v79, a9, SHIDWORD(a9), a10, a11, (void *)a12, *((void **)&a12 + 1));
    }
    unint64_t v101 = (char *)malloc_type_calloc(0xDA0uLL, 4uLL, 0xFD03AE74uLL);
    uint64_t v89 = a4;
    __int32 v95 = a7;
    if (v101)
    {
      if (a6[7] == a6[16])
      {
        CVBufferRef buffer = (__IOSurface *)a5;
        uint64_t v31 = (v23 + 1) >> 1;
        IOSurfaceLock(v17, 1u, 0);
        BaseAddress = IOSurfaceGetBaseAddress(v17);
        unsigned int v33 = 0;
        uint64_t v85 = (char *)BaseAddress + a6[10];
        unint64_t v81 = (unsigned __int8 *)(BaseAddress + 1);
        char v83 = BaseAddress;
        unint64_t v34 = v101;
        uint64_t v88 = v31;
        while (2)
        {
          uint64_t v35 = (void)v33 * v31;
          if (v33 == 1) {
            unsigned int v36 = a6[17];
          }
          else {
            unsigned int v36 = v31 + v35;
          }
          if (v35) {
            int v37 = *(_DWORD *)&v85[4 * v35 - 4];
          }
          else {
            int v37 = 0;
          }
          v103[(void)v33 + 4] = v37;
          if (v33 == 1)
          {
            v103[3] = IOSurfaceGetAllocSize(v17) - a6[13];
            unsigned int v38 = a6[1] - a6[3] * v35;
          }
          else
          {
            v103[(void)v33 + 2] = *(_DWORD *)&v85[4 * (v36 - 1)];
            unsigned int v38 = a6[3] * (v36 - v35);
          }
          unsigned int notifya = v38;
          dispatch_queue_t queuea = v33;
          unint64_t v39 = &v34[3488 * (void)v33 + 132];
          unsigned int v40 = a6[14];
          uint64_t v41 = v40 & 7;
          int v87 = (int)v39;
          if ((v40 & 7) != 0)
          {
            memset(v39, 255, 8 - v41);
            unint64_t v42 = &v39[8 - v41];
            int v43 = v41 | 0xBF8;
          }
          else
          {
            int v43 = 3072;
            unint64_t v42 = v39;
          }
          int groupa = 0;
          unint64_t v44 = v81;
          *(_WORD *)unint64_t v42 = *v83;
          unint64_t v45 = v42 + 2;
          unsigned int v46 = v43 - 2;
          do
          {
            while (1)
            {
              while (*v44 != 255)
                ++v44;
              unsigned int v47 = __rev16(*((unsigned __int16 *)v44 + 1));
              uint64_t v48 = v47 + 2;
              if (v44[1] - 192 <= 0x1D && ((1 << (v44[1] + 64)) & 0x2C000011) != 0) {
                break;
              }
              v44 += v48;
            }
            BOOL v50 = v46 >= v48;
            v46 -= v48;
            if (!v50) {
              goto LABEL_75;
            }
            memcpy(v45, v44, v47 + 2);
            int v51 = v44[1];
            if (v51 == 218)
            {
              int v52 = 1;
            }
            else if (v51 == 192)
            {
              if (v47 != 3 * *((unsigned __int8 *)a6 + 32) + 8) {
                goto LABEL_75;
              }
              int v52 = 0;
              *(_WORD *)((char *)v45 + 5) = bswap32(notifya) >> 16;
              int groupa = 1;
            }
            else
            {
              int v52 = 0;
            }
            v44 += v48;
            unint64_t v45 = (_WORD *)((char *)v45 + v48);
          }
          while (!v52);
          if (groupa)
          {
            uint64_t v31 = v88;
            BOOL v17 = v100;
            unint64_t v34 = v101;
            *(_DWORD *)&v101[3488 * (void)queuea + 124] = v45 - v87;
            unsigned int v33 = ((char *)&queuea->isa + 1);
            if (queuea != (dispatch_queue_t)1) {
              continue;
            }
            IOSurfaceUnlock(v100, 1u, 0);
            group = dispatch_group_create();
            if (group)
            {
              queue = dispatch_queue_create("com.apple.coremedia.jpegdecode.callbackqueue", 0);
              if (queue)
              {
                unint64_t v53 = IONotificationPortCreate(*MEMORY[0x1E4F2EEF0]);
                if (v53)
                {
                  notify = v53;
                  IONotificationPortSetDispatchQueue(v53, queue);
                  uint64_t v54 = 0;
                  char v55 = 1;
                  uint64_t v25 = 2;
                  while (1)
                  {
                    char v56 = v55;
                    uint64_t v57 = JPEGDeviceInterface_openDriverConnection();
                    *((_DWORD *)v104 + v54) = v57;
                    if (!v57) {
                      break;
                    }
                    uint64_t v58 = v57;
                    uint64_t MachPort = IONotificationPortGetMachPort(notify);
                    MEMORY[0x1AD10F710](v58, 0, MachPort, 0);
                    char v55 = 0;
                    uint64_t v54 = 1;
                    if ((v56 & 1) == 0)
                    {
                      int v60 = 0;
                      int v61 = 0;
                      uint64_t v62 = 0;
                      unint64_t v63 = 0;
                      uint64_t v64 = 6976;
                      int v93 = v103;
                      do
                      {
                        uint64_t v82 = v64;
                        if (v63 == 1) {
                          unsigned int v65 = a6[17];
                        }
                        else {
                          unsigned int v65 = v88 + v61;
                        }
                        unsigned int v80 = v65;
                        int v66 = v61;
                        unsigned int v67 = (int8x8_t *)&v101[v62];
                        *(_DWORD *)&v101[v62] = IOSurfaceGetID(v100);
                        v67[1].i32[0] = IOSurfaceGetID(buffer);
                        v67->i32[1] = IOSurfaceGetAllocSize(v100);
                        v67[1].i32[1] = IOSurfaceGetAllocSize(buffer);
                        v67[5].i32[1] = a6[4];
                        v67[9].i32[1] = a9;
                        v67[10].i32[0] = a10;
                        v67[4].i32[0] = v95;
                        v67[4].i32[1] = 0;
                        unsigned int v68 = a6[3];
                        int v86 = v66;
                        v67[5].i32[0] = v68 * v66;
                        v67[2].i32[1] = *a6;
                        unsigned int v69 = a6[1] - v68 * v66;
                        unsigned int v70 = v68 * (v80 + v60);
                        if (v69 < v70) {
                          unsigned int v70 = v69;
                        }
                        v67[3].i32[0] = v70;
                        v67[14] = vand_s8((int8x8_t)vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vceqq_s64(vdupq_n_s64(v63), (int64x2_t)xmmword_1AB9DCA60))), (int8x8_t)0x100000001);
                        int v71 = v103[v63 + 4];
                        v67[15].i32[0] = v103[v63 + 2] - v71;
                        v67[16].i32[0] = a6[13] + v71;
                        v67[6] = (int8x8_t)_stripDecodeCompleteCallback;
                        v67[7] = (int8x8_t)group;
                        v67[8] = (int8x8_t)v93;
                        dispatch_group_enter(group);
                        int v72 = JPEGDeviceInterface_decodeJPEG2024(*((_DWORD *)v104 + v63), v67, &v101[v82]);
                        int v73 = v72;
                        if (v72)
                        {
                          syslog(5, "JPEGDecompressSurfaceParallel : Picture decode failed: %08x", v72);
                          v103[v63] = v73;
                          dispatch_group_leave(group);
                        }
                        uint64_t v64 = v82 + 3488;
                        v62 += 3488;
                        ++v93;
                        int v61 = v86 + v88;
                        v60 -= v88;
                      }
                      while (!(v73 | v63++));
                      dispatch_group_wait(group, 0xFFFFFFFFFFFFFFFFLL);
                      int v75 = v103[0];
                      if (!v103[0])
                      {
                        int v75 = v103[1];
                        if (!v103[1]) {
                          int v75 = v73;
                        }
                      }
                      int v92 = v75;
                      goto LABEL_78;
                    }
                  }
LABEL_79:
                  a5 = (uint64_t)buffer;
                  goto LABEL_83;
                }
                notify = 0;
LABEL_78:
                uint64_t v25 = 2;
                goto LABEL_79;
              }
              notify = 0;
LABEL_77:
              queue = 0;
              goto LABEL_78;
            }
          }
          else
          {
LABEL_75:
            IOSurfaceUnlock(v100, 1u, 0);
          }
          break;
        }
        notify = 0;
        group = 0;
        goto LABEL_77;
      }
    }
    else
    {
      unint64_t v101 = 0;
    }
    notify = 0;
    group = 0;
    queue = 0;
    uint64_t v25 = 2;
    goto LABEL_83;
  }
  if (a12 != 0) {
    return 4294950302;
  }
  int v26 = *a6;
  int v27 = a6[1];
  int v28 = a6[4];
  int v29 = a6[16];
  int v30 = a6[17];
  return CMPhotoParavirtualizedGuestJPEGHardwareDecode(a3, a4, a5, v26, v27, v28, v29, v30, a7, a9, a10, (unint64_t *)a11);
}

uint64_t JPEGDeviceInterface_supportsRSTLogging()
{
  return _supportsRSTLogging;
}

uint64_t JPEGDeviceInterface_numberOfJPEGCores()
{
  if (!_jpegService) {
    pthread_once(&jpegService_once, (void (*)(void))_initializeService);
  }
  if (_numberOfJPEGCores <= 1) {
    return 1;
  }
  else {
    return _numberOfJPEGCores;
  }
}

uint64_t JPEGDecompressSurfaceHelper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, uint64_t *a16, void *a17, void *a18)
{
  mach_port_t v18 = MEMORY[0x1F4188790]();
  int v40 = v19;
  int v41 = v20;
  mach_port_t connection = v18;
  int v22 = v21;
  int v24 = v23;
  int v26 = v25;
  size_t v28 = v27;
  int v30 = v29;
  bzero(v47, 0xD90uLL);
  bzero(outputStruct, 0xDA0uLL);
  AllocCFNumberRef Size = IOSurfaceGetAllocSize(v30);
  inputStruct[0] = IOSurfaceGetID(v30);
  IOSurfaceID ID = IOSurfaceGetID(v26);
  v47[1] = v24;
  v47[2] = v22;
  if (AllocSize >= v28) {
    int v33 = v28;
  }
  else {
    int v33 = AllocSize;
  }
  if (!v28) {
    int v33 = AllocSize;
  }
  inputStruct[2] = ID;
  inputStruct[1] = v33;
  inputStruct[3] = IOSurfaceGetAllocSize(v26);
  v47[4] = a10;
  v47[14] = a11;
  v47[7] = v41;
  v47[15] = a13;
  v47[16] = a15;
  if (a16)
  {
    uint64_t v35 = *a16;
    uint64_t v34 = a16[1];
    uint64_t v36 = a16[2];
    if (*a16 || v34 || v36 != v40 || a16[3] != a9)
    {
      v47[19] = 1;
      v47[20] = v35;
      v47[21] = v34;
      v47[22] = v36;
      v47[23] = a16[3];
      v47[17] = v40;
      v47[18] = a9;
    }
  }
  uint64_t v37 = JPEGDeviceInterface_decodeJPEG2024(connection, inputStruct, outputStruct);
  uint64_t v38 = v37;
  if (a17) {
    *a17 = v44;
  }
  if (a18) {
    *a18 = v45;
  }
  if (v37) {
    syslog(5, "JPEGDecompressSurface : Picture decode failed: %08x", v37);
  }
  return v38;
}

uint64_t JPEGDeviceInterface_decodeJPEG2024(mach_port_t connection, void *inputStruct, void *outputStruct)
{
  size_t outputStructCnt = 3488;
  int v6 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  mach_port_t v7 = connection;
  if (connection || (mach_port_t v7 = _openService()) != 0)
  {
    if (*v6 == 1) {
      kdebug_trace();
    }
    uint64_t v8 = IOConnectCallStructMethod(v7, 7u, inputStruct, 0xDA0uLL, outputStruct, &outputStructCnt);
  }
  else
  {
    uint64_t v8 = 3758097101;
  }
  if (!*((void *)inputStruct + 6) && *v6 == 1) {
    kdebug_trace();
  }
  if (!connection && v7) {
    _closeService(v7);
  }
  return v8;
}

uint64_t JPEGDeviceInterface_supportsDecodeSize(uint64_t a1, uint64_t a2, int a3, unint64_t a4, unint64_t a5)
{
  pthread_once(&JPEGDeviceInterface_supportsAppleInterchangeFormats_once, (void (*)(void))_checkSupportsAppleInterchangeFormats);
  if (_supportsAppleInterchangeFormats) {
    return 1;
  }
  switch(a3)
  {
    case 0:
      BOOL v10 = a4 > 0xF && a5 > 0xF;
      goto LABEL_14;
    case 1:
      BOOL v9 = a4 > 0xF;
      goto LABEL_11;
    case 2:
    case 4:
      BOOL v9 = a4 > 7;
      goto LABEL_11;
    case 3:
      BOOL v9 = a4 > 0x1F;
LABEL_11:
      BOOL v10 = v9 && a5 > 7;
LABEL_14:
      uint64_t result = v10;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

intptr_t CMPhotoDecompressionSessionRecyclePooledJPEGHWSession(uint64_t a1, uint64_t a2, int a3)
{
  if (*(unsigned char *)(a1 + 240))
  {
    int v6 = (os_unfair_lock_s *)(a1 + 248);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 248));
    if (a3)
    {
      os_unfair_lock_unlock(v6);
      JPEGDeviceInterface_closeDriverConnection(a2);
    }
    else
    {
      CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(a1 + 264), 0, (const void *)a2);
      os_unfair_lock_unlock(v6);
    }
    uint64_t v8 = *(NSObject **)(a1 + 256);
    return dispatch_semaphore_signal(v8);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t CMPhotoDecompressionSessionCopyPooledJPEGHWSession(uint64_t a1, unsigned int *a2)
{
  if (!a2) {
    return 4294950306;
  }
  uint64_t v10 = 0;
  int v11 = &v10;
  uint64_t v12 = 0x2000000000;
  int v13 = 0;
  CFAllocatorRef v4 = *(NSObject **)(a1 + 40);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = *(void *)"";
  v9[2] = ___setupHWCacheIfNeeded_block_invoke;
  v9[3] = &unk_1E5E2FB78;
  v9[4] = &v10;
  v9[5] = a1;
  dispatch_sync(v4, v9);
  uint64_t v5 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  if (!v5)
  {
    if (*(unsigned char *)(a1 + 240))
    {
      dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 256), 0xFFFFFFFFFFFFFFFFLL);
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 248));
      CFArrayRef v6 = *(const __CFArray **)(a1 + 264);
      if (v6 && CFArrayGetCount(v6) >= 1)
      {
        unsigned int ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 264), 0);
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 264), 0);
      }
      else
      {
        unsigned int ValueAtIndex = JPEGDeviceInterface_openDriverConnection();
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 248));
      if (ValueAtIndex)
      {
        uint64_t v5 = 0;
        *a2 = ValueAtIndex;
      }
      else
      {
        dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 256));
        return 4294950305;
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return v5;
}

uint64_t _openDriverConnection()
{
  io_connect_t connect = 0;
  LODWORD(result) = _jpegService;
  if (_jpegService
    || (pthread_once(&jpegService_once, (void (*)(void))_initializeService),
        uint64_t result = _jpegService,
        _jpegService))
  {
    if (IOServiceOpen(result, *MEMORY[0x1E4F14960], 0, &connect)) {
      return 0;
    }
    else {
      return connect;
    }
  }
  return result;
}

uint64_t _getEncoderNativePixelFormatForIndex(void *a1, uint64_t a2, int *a3)
{
  CFTypeRef cf = 0;
  CMSampleBufferRef sbuf = 0;
  if ((a2 & 0x8000000000000000) == 0)
  {
    if (!a3) {
      return 0;
    }
    if (a1[6])
    {
      uint64_t v10 = -1;
      uint64_t v5 = CMPhotoDecompressionContainerInternalToExternalIndexAndCopyAlternateOptions(a1, a2, &v10, 0, (CFMutableDictionaryRef *)&cf);
      if (!v5)
      {
        uint64_t NativePixelFormatFromFormatDescription = CMPhotoDecompressionContainerCopySampleBufferForIndexWithOptions(a1, (const __CFNumber *)v10, (const __CFDictionary *)cf, (uint64_t)&sbuf);
        CMSampleBufferRef v7 = sbuf;
        if (!NativePixelFormatFromFormatDescription)
        {
          FormatDescription = CMSampleBufferGetFormatDescription(sbuf);
          uint64_t NativePixelFormatFromFormatDescription = CMPhotoDecompressionUtilityGetNativePixelFormatFromFormatDescription(FormatDescription, (uint64_t)sbuf, a3);
          CMSampleBufferRef v7 = sbuf;
        }
        if (v7) {
          CFRelease(v7);
        }
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v5 = FigSignalErrorAt();
    }
    uint64_t NativePixelFormatFromFormatDescription = v5;
LABEL_9:
    if (cf) {
      CFRelease(cf);
    }
    return NativePixelFormatFromFormatDescription;
  }
  return FigSignalErrorAt();
}

uint64_t CMPhotoDecompressionUtilityGetNativePixelFormatFromFormatDescription(const opaqueCMFormatDescription *a1, uint64_t a2, int *a3)
{
  __int16 v17 = 0;
  int v16 = 0;
  unsigned __int8 v15 = 1;
  uint64_t v3 = 4294950306;
  if (!a1) {
    return v3;
  }
  if (!a3) {
    return v3;
  }
  FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(a1);
  uint64_t v3 = 0;
  if (MediaSubType == 1953325424) {
    return v3;
  }
  FourCharCode v8 = MediaSubType;
  if (MediaSubType == 1768912492) {
    return v3;
  }
  if (a2 && MediaSubType == 1635135537)
  {
    CMVideoFormatDescriptionRef v14 = 0;
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = *(void *)"";
    v13[2] = __CMPhotoDecompressionUtilityGetNativePixelFormatFromFormatDescription_block_invoke;
    v13[3] = &__block_descriptor_tmp_15;
    v13[4] = a2;
    uint64_t v3 = CMPhotoDecompressionContainerCreateCorrectedAV1FormatDescription(a1, (uint64_t)v13, 0, &v14);
    if (v3) {
      return v3;
    }
    BOOL v9 = v14;
    goto LABEL_11;
  }
  uint64_t v10 = (const opaqueCMFormatDescription *)CFRetain(a1);
  BOOL v9 = v10;
  if (v8 != 1936484717)
  {
LABEL_11:
    uint64_t InfoFromFormatDescription = CMPhotoGetInfoFromFormatDescription(v9, 0, 0, 0, &v15, &v16, (char *)&v17 + 1, (char *)&v17, 0, 0, 0, 0);
    if (!InfoFromFormatDescription)
    {
      if (v16 == 6 || v17 == HIBYTE(v17)) {
        uint64_t InfoFromFormatDescription = CMPhotoGetYUVPixelFormatForParameters(v16, HIBYTE(v17), v15, 0, 0, 0, 1, a3);
      }
      else {
        uint64_t InfoFromFormatDescription = FigSignalErrorAt();
      }
    }
    goto LABEL_15;
  }
  uint64_t InfoFromFormatDescription = CMPhotoGetSlimPixelFormatFromFormatDescription(v10, a3);
LABEL_15:
  uint64_t v3 = InfoFromFormatDescription;
  if (v9) {
    CFRelease(v9);
  }
  return v3;
}

uint64_t CMPhotoGetYUVPixelFormatForParameters(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int *a8)
{
  int v8 = 1111573574;
  switch(a1)
  {
    case 1:
      switch(a2)
      {
        case 8:
          unsigned int v9 = a5 - 3;
          if (a3) {
            int v10 = 875836518;
          }
          else {
            int v10 = 875836534;
          }
          int v11 = 641230388;
          int v12 = 641234482;
          goto LABEL_51;
        case 10:
          unsigned int v9 = a5 - 3;
          if (a3) {
            int v10 = 2019963956;
          }
          else {
            int v10 = 2016687156;
          }
          int v11 = 645424692;
          int v12 = 645428786;
          goto LABEL_51;
        case 12:
          unsigned int v9 = a5 - 3;
          if (a3) {
            int v10 = 1952855092;
          }
          else {
            int v10 = 1953903668;
          }
          int v11 = 645162548;
          int v12 = 645166642;
          goto LABEL_51;
        case 16:
          unsigned int v9 = a5 - 3;
          if (a3) {
            int v10 = 1936077876;
          }
          else {
            int v10 = 1937126452;
          }
          int v11 = 645097012;
          int v12 = 645101106;
LABEL_51:
          int v14 = v12 + 2;
          goto LABEL_52;
        default:
          goto LABEL_96;
      }
    case 2:
    case 5:
      switch(a2)
      {
        case 8:
          switch(a5)
          {
            case 2:
              int v8 = 641230384;
              goto LABEL_92;
            case 3:
              int v8 = 2084070960;
              goto LABEL_92;
            case 4:
              int v8 = 792225328;
              goto LABEL_92;
            case 5:
              int v8 = 758670896;
              goto LABEL_92;
            default:
              int v8 = 875704422;
              int v21 = 875704438;
              break;
          }
          break;
        case 10:
          if (a4)
          {
            int v8 = 1882468912;
LABEL_20:
            int v17 = v8 + 3276800;
            BOOL v18 = a3 == 0;
            goto LABEL_21;
          }
          switch(a5)
          {
            case 2:
              int v8 = 645424688;
              goto LABEL_92;
            case 3:
              int v8 = 2088265264;
              int v23 = 2088265266;
              break;
            case 4:
              int v8 = 796419632;
              int v23 = 796419634;
              break;
            case 5:
              int v8 = 762865200;
              int v23 = 762865202;
              break;
            default:
              int v8 = 2016686640;
              goto LABEL_20;
          }
          int v21 = v23 + 4094;
          break;
        case 12:
          unsigned int v9 = a5 - 3;
          BOOL v13 = a3 == 0;
          if (a3) {
            int v10 = 1952854576;
          }
          else {
            int v10 = 1953903152;
          }
          int v11 = 645162544;
          int v14 = 645166640;
          goto LABEL_53;
        case 16:
          unsigned int v9 = a5 - 3;
          if (a3) {
            int v19 = 1936077360;
          }
          else {
            int v19 = 1937125936;
          }
          if (a6) {
            int v10 = 1751527984;
          }
          else {
            int v10 = v19;
          }
          int v11 = 645097008;
          int v14 = 645101104;
LABEL_52:
          BOOL v13 = a3 == 0;
          goto LABEL_53;
        default:
          goto LABEL_96;
      }
LABEL_93:
      BOOL v20 = a3 == 0;
LABEL_94:
      if (v20) {
        int v8 = v21;
      }
      break;
    case 3:
      switch(a2)
      {
        case 8:
          unsigned int v9 = a5 - 3;
          BOOL v13 = a3 == 0;
          if (a3) {
            int v10 = 875704934;
          }
          else {
            int v10 = 875704950;
          }
          int v11 = 641230386;
          int v14 = 641234482;
          goto LABEL_53;
        case 10:
          switch(a5)
          {
            case 2:
              int v8 = 645424690;
              BOOL v20 = a3 == 0;
              int v21 = 645428786;
              goto LABEL_94;
            case 3:
              int v8 = 2088265266;
              goto LABEL_92;
            case 4:
              int v8 = 796419634;
              goto LABEL_92;
            case 5:
              int v8 = 762865202;
LABEL_92:
              int v21 = v8 | 0x1000;
              goto LABEL_93;
            default:
              int v8 = 2016686642;
              BOOL v18 = a3 == 0;
              int v17 = 2019963442;
LABEL_21:
              if (!v18) {
                int v8 = v17;
              }
              goto LABEL_96;
          }
        case 12:
          unsigned int v9 = a5 - 3;
          if (a3) {
            int v10 = 1952854578;
          }
          else {
            int v10 = 1953903154;
          }
          int v11 = 645162546;
          BOOL v13 = a3 == 0;
          int v14 = 645166642;
          goto LABEL_53;
        case 16:
          unsigned int v9 = a5 - 3;
          if (a3) {
            int v10 = 1936077362;
          }
          else {
            int v10 = 1937125938;
          }
          int v11 = 645097010;
          BOOL v13 = a3 == 0;
          int v14 = 645101106;
LABEL_53:
          if (v13) {
            int v11 = v14;
          }
          if (a5 == 2) {
            int v10 = v11;
          }
          if (v9 >= 3) {
            int v8 = v10;
          }
          else {
            int v8 = 1111573574;
          }
          break;
        default:
          goto LABEL_96;
      }
      break;
    case 6:
      switch(a2)
      {
        case 8:
          int v15 = a5 - 2;
          if ((a5 - 2) < 4)
          {
            int v16 = "80L&80L|80L/80L-21L&FDABFDABFDAB01L&FDABFDABFDAB61L&FDABFDABFDAB";
            goto LABEL_74;
          }
          int v8 = 1278226488;
          break;
        case 9:
        case 11:
        case 13:
        case 14:
        case 15:
          goto LABEL_96;
        case 10:
          int v15 = a5 - 2;
          if ((a5 - 2) < 4)
          {
            int v16 = "01L&FDABFDABFDAB61L&FDABFDABFDAB";
            goto LABEL_74;
          }
          int v8 = 1278226736;
          break;
        case 12:
          int v15 = a5 - 2;
          if ((a5 - 2) >= 4)
          {
            int v8 = 1278226738;
          }
          else
          {
            int v16 = "21L&FDABFDABFDAB01L&FDABFDABFDAB61L&FDABFDABFDAB";
LABEL_74:
            int v8 = *(_DWORD *)&v16[4 * v15];
          }
          break;
        case 16:
          if (a6)
          {
            int v8 = 1278226536;
          }
          else if ((a5 - 2) >= 4)
          {
            int v8 = 1278226742;
          }
          else
          {
            int v8 = *(_DWORD *)&a80l80l80l80l21[4 * a5 + 40];
          }
          break;
        default:
          if (a6) {
            int v8 = 1278226534;
          }
          else {
            int v8 = 1111573574;
          }
          if (a2 != 32) {
            int v8 = 1111573574;
          }
          break;
      }
      break;
    default:
      break;
  }
LABEL_96:
  if (a7)
  {
    if (v8 == 1111573574) {
      return FigSignalErrorAt();
    }
  }
  else if (v8 == 1111573574)
  {
    return 4294950302;
  }
  uint64_t result = 0;
  if (a8) {
    *a8 = v8;
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerCopySampleBufferForIndexWithOptions(void *a1, const __CFNumber *a2, const __CFDictionary *a3, uint64_t a4)
{
  CFTypeRef cf = 0;
  if (!a1) {
    return 4294950306;
  }
  if (!a4) {
    return 0;
  }
  uint64_t v5 = CMPhotoDecompressionContainerCreateTileIteratorForIndexWithOptions(a1, a2, a3, &cf);
  CFTypeRef v6 = cf;
  if (!v5) {
    uint64_t v5 = _copySampleBufferFromIterator((uint64_t)cf, a4);
  }
  uint64_t v7 = v5;
  if (v6) {
    CFRelease(v6);
  }
  return v7;
}

uint64_t _copySampleBufferFromIterator(uint64_t a1, uint64_t a2)
{
  uint64_t result = 4294950306;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = CMPhotoDecompressionTileIteratorReset(a1);
      if (!result)
      {
        return CMPhotoDecompressionTileIteratorCopyTileSampleBuffer(a1);
      }
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionTileIteratorReset(uint64_t a1)
{
  if (!a1) {
    return 4294950306;
  }
  CFDictionaryRef v1 = **(uint64_t (***)(void))(a1 + 48);
  if (v1) {
    return v1();
  }
  else {
    return 4294950302;
  }
}

uint64_t TileIterator_reset(uint64_t a1, CFDictionaryRef theDict)
{
  int v2 = *(uint64_t **)(a1 + 56);
  if (theDict && CFDictionaryContainsKey(theDict, @"TileSize"))
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v3 = *v2;
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    CFTypeRef v6 = *(uint64_t (**)(uint64_t))(v5 + 8);
    if (v6)
    {
      return v6(v3);
    }
    else
    {
      return 4294954514;
    }
  }
}

uint64_t TileIterator_reset_0()
{
  return 0;
}

uint64_t CMPhotoDecompressionTileIteratorCopyTileSampleBuffer(uint64_t a1)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v1 = *(void *)(a1 + 48);
  if (v1) {
    uint64_t v2 = *(void *)(a1 + 48);
  }
  else {
    uint64_t v2 = 0;
  }
  if (!*(void *)(v2 + 32)) {
    return 4294950302;
  }
  if (v1) {
    uint64_t v3 = *(void *)(a1 + 48);
  }
  else {
    uint64_t v3 = 0;
  }
  return (*(uint64_t (**)(void))(v3 + 32))();
}

uint64_t TileIterator_copyTileSampleBuffer(void *a1, void *a2)
{
  uint64_t v3 = (uint64_t *)a1[7];
  CFAllocatorRef v4 = CFGetAllocator(a1);
  CMSampleBufferRef v24 = 0;
  uint64_t v25 = 0;
  uint64_t v22 = 0;
  int v23 = 0;
  BOOL v20 = 0;
  int v21 = 0;
  CFTypeRef v19 = 0;
  if (!a2)
  {
    uint64_t v15 = 0;
    goto LABEL_16;
  }
  CFAllocatorRef v5 = v4;
  uint64_t CMBaseObject = FigPictureTileCursorGetCMBaseObject();
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  unsigned int v9 = *(uint64_t (**)(uint64_t, void, const __CFAllocator *, const opaqueCMFormatDescription **))(v8 + 48);
  if (!v9) {
    goto LABEL_15;
  }
  uint64_t v10 = v9(CMBaseObject, *MEMORY[0x1E4F33470], v5, &v25);
  if (v10)
  {
LABEL_26:
    uint64_t v15 = v10;
    goto LABEL_16;
  }
  uint64_t v11 = *v3;
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v13 = v12 ? v12 : 0;
  int v14 = *(uint64_t (**)(uint64_t, uint64_t *, void **, void **, CFTypeRef *, void))(v13 + 40);
  if (!v14)
  {
LABEL_15:
    uint64_t v15 = 4294954514;
    goto LABEL_16;
  }
  uint64_t v10 = v14(v11, &v22, &v21, &v20, &v19, 0);
  if (v10) {
    goto LABEL_26;
  }
  uint64_t v10 = CMPhotoPictureReaderCreateContiguousBlockBufferFromChunks((uint64_t)v5, v22, (uint64_t)v21, (uint64_t)v20, (uint64_t)v19, 0, 0, &v23);
  if (v10) {
    goto LABEL_26;
  }
  memset(&sampleTimingArray, 0, sizeof(sampleTimingArray));
  CMTimeMake(&sampleTimingArray.duration, 1, 1);
  sampleTimingArray.presentationTimeStamp = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  sampleTimingArray.decodeTimeStamp = sampleTimingArray.presentationTimeStamp;
  size_t sampleSizeArray = CMBlockBufferGetDataLength(v23);
  uint64_t v15 = CMSampleBufferCreate(v5, v23, 1u, 0, 0, v25, 1, 1, &sampleTimingArray, 1, &sampleSizeArray, &v24);
  if (!v15)
  {
    *a2 = v24;
    CMSampleBufferRef v24 = 0;
  }
LABEL_16:
  if (v25) {
    CFRelease(v25);
  }
  if (v24) {
    CFRelease(v24);
  }
  if (v23) {
    CFRelease(v23);
  }
  free(v21);
  free(v20);
  if (v19) {
    CFRelease(v19);
  }
  return v15;
}

uint64_t TileIterator_copyTileSampleBuffer_0(uint64_t a1, CMSampleBufferRef *a2)
{
  return _createSampleBufferFromSampleCursor((const __CFAllocator *)*MEMORY[0x1E4F1CF80], **(void **)(a1 + 56), a2);
}

uint64_t _createSampleBufferFromPictureReader(CFTypeRef cf, const void *a2, void *a3, BOOL *a4)
{
  if (cf) {
    CFAllocatorRef v8 = CFGetAllocator(cf);
  }
  else {
    CFAllocatorRef v8 = 0;
  }
  unsigned int v9 = 0;
  unsigned int v46 = 0;
  CMSampleBufferRef v47 = 0;
  unsigned int v44 = 0;
  CFTypeRef v45 = 0;
  long long v43 = 0uLL;
  uint64_t v41 = 0;
  CFArrayRef v42 = 0;
  unint64_t v39 = 0;
  int v40 = 0;
  uint64_t v10 = 4294950306;
  if (!cf || !a3) {
    goto LABEL_66;
  }
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(uint64_t (**)(CFTypeRef, uint64_t *, void **, void **, CFTypeRef *, void))(v12 + 96);
  if (!v13) {
    goto LABEL_65;
  }
  uint64_t v14 = v13(cf, &v41, &v40, &v39, &v45, 0);
  if (v14) {
    goto LABEL_84;
  }
  if (!a2)
  {
    uint64_t FigBaseObject = FigPictureReaderGetFigBaseObject();
    uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v25) {
      uint64_t v26 = v25;
    }
    else {
      uint64_t v26 = 0;
    }
    int v33 = *(uint64_t (**)(uint64_t, void, const __CFAllocator *, const opaqueCMFormatDescription **))(v26 + 48);
    if (v33)
    {
      uint64_t v14 = v33(FigBaseObject, *MEMORY[0x1E4F333D0], v8, &v44);
      if (v14) {
        goto LABEL_84;
      }
      uint64_t v15 = v44;
      goto LABEL_13;
    }
LABEL_65:
    unsigned int v9 = 0;
    uint64_t v10 = 4294954514;
    goto LABEL_66;
  }
  uint64_t v15 = (const opaqueCMFormatDescription *)CFRetain(a2);
  unsigned int v44 = v15;
  if (CMFormatDescriptionGetMediaSubType(v15) != 1635135537) {
    goto LABEL_19;
  }
LABEL_13:
  uint64_t v14 = _copyMultilayerProperties((uint64_t)v8, (uint64_t)cf, (CFTypeRef *)&v43 + 1, &v43, &v42, a4);
  if (v14) {
    goto LABEL_84;
  }
  if (*((void *)&v43 + 1) && CMPhotoCFNumberGetInt32(*((const __CFNumber **)&v43 + 1)) == 0xFFFF)
  {
    BOOL v16 = v42 != 0;
    if (*((void *)&v43 + 1))
    {
      CFRelease(*((CFTypeRef *)&v43 + 1));
      *((void *)&v43 + 1) = 0;
    }
  }
  else
  {
LABEL_19:
    BOOL v16 = 0;
  }
  unint64_t v38 = 0;
  uint64_t v14 = CMPhotoPictureReaderCreateContiguousBlockBufferFromChunks((uint64_t)v8, v41, (uint64_t)v40, (uint64_t)v39, (uint64_t)v45, v16, &v38, &v46);
  if (v14) {
    goto LABEL_84;
  }
  size_t sampleSizeArray = CMBlockBufferGetDataLength(v46);
  if (v42) {
    BOOL v17 = v38 == 0;
  }
  else {
    BOOL v17 = 1;
  }
  int v18 = !v17;
  if (v17) {
    goto LABEL_46;
  }
  uint64_t v19 = v41;
  if (v41 >= 1)
  {
    BOOL v20 = 0;
    int v21 = (uint64_t *)v39;
    while (1)
    {
      uint64_t v23 = *v21++;
      uint64_t v22 = v23;
      if (__CFADD__(v20, v23)) {
        break;
      }
      BOOL v20 = (__CFDictionary *)((char *)v20 + v22);
      if (!--v19) {
        goto LABEL_36;
      }
    }
    uint64_t v14 = FigSignalErrorAt();
    goto LABEL_84;
  }
  BOOL v20 = 0;
LABEL_36:
  size_t v27 = 0;
  uint64_t v28 = 0;
  do
  {
    unsigned int v9 = v27;
    CFArrayRef Count = v42;
    if (v42) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(v42);
    }
    if (v28 >= (uint64_t)Count) {
      break;
    }
    LODWORD(blockBufferOut) = 0;
    FigCFArrayGetInt32AtIndex();
    size_t v27 = v20;
    ++v28;
  }
  while ((unint64_t)v20 <= v38);
  if (!v9)
  {
    uint64_t v32 = FigSignalErrorAt();
LABEL_86:
    uint64_t v10 = v32;
    goto LABEL_66;
  }
  CMBlockBufferRef blockBufferOut = 0;
  uint64_t v14 = CMBlockBufferCreateWithBufferReference(v8, v46, 0, (size_t)v9, 0, &blockBufferOut);
  if (v14)
  {
LABEL_84:
    uint64_t v10 = v14;
    unsigned int v9 = 0;
    goto LABEL_66;
  }
  if (v46) {
    CFRelease(v46);
  }
  unsigned int v46 = blockBufferOut;
  size_t sampleSizeArray = (size_t)v9;
LABEL_46:
  memset(&sampleTimingArray, 0, sizeof(sampleTimingArray));
  CMTimeMake(&sampleTimingArray.duration, 1, 1);
  sampleTimingArray.presentationTimeStamp = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  sampleTimingArray.decodeTimeStamp = sampleTimingArray.presentationTimeStamp;
  uint64_t v14 = CMSampleBufferCreate(v8, v46, 1u, 0, 0, v44, 1, 1, &sampleTimingArray, 1, &sampleSizeArray, &v47);
  if (v14) {
    goto LABEL_84;
  }
  if (v43 == 0) {
    int v30 = v18;
  }
  else {
    int v30 = 1;
  }
  if (v30 != 1)
  {
    unsigned int v9 = 0;
    goto LABEL_60;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  unsigned int v9 = Mutable;
  if (Mutable)
  {
    if (*((void *)&v43 + 1)) {
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F33400], *((const void **)&v43 + 1));
    }
    if ((void)v43) {
      CFDictionarySetValue(v9, (const void *)*MEMORY[0x1E4F33418], (const void *)v43);
    }
    if (!v18 || (uint64_t v32 = CMPhotoCFDictionarySetInt32(v9, @"IncompleteSample", 1), !v32))
    {
      CMSetAttachments(v47, v9, 1u);
LABEL_60:
      uint64_t v10 = 0;
      *a3 = v47;
      CMSampleBufferRef v47 = 0;
      goto LABEL_66;
    }
    goto LABEL_86;
  }
  uint64_t v10 = 4294950305;
LABEL_66:
  free(v40);
  free(v39);
  if (v47) {
    CFRelease(v47);
  }
  if (v46) {
    CFRelease(v46);
  }
  if (v45) {
    CFRelease(v45);
  }
  if (v44) {
    CFRelease(v44);
  }
  if (*((void *)&v43 + 1)) {
    CFRelease(*((CFTypeRef *)&v43 + 1));
  }
  if ((void)v43) {
    CFRelease((CFTypeRef)v43);
  }
  if (v42) {
    CFRelease(v42);
  }
  if (v9) {
    CFRelease(v9);
  }
  return v10;
}

uint64_t CMPhotoPictureReaderCreateContiguousBlockBufferFromChunks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, __CFData **a8)
{
  return _createContiguousBufferFromChunks(a1, a2, a3, a4, a5, 2, a6, 0, a7, a8);
}

uint64_t _createContiguousBufferFromChunks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, __CFData **a10)
{
  uint64_t v10 = MEMORY[0x1F4188790]();
  dataPointerOut[512] = *(char **)MEMORY[0x1E4F143B8];
  uint64_t v18 = 4294950306;
  if (!v14) {
    return v18;
  }
  if (!a10) {
    return v18;
  }
  int v19 = v15;
  if ((v15 - 3) < 0xFFFFFFFE) {
    return v18;
  }
  uint64_t v20 = v17;
  int v21 = v16;
  uint64_t v22 = v14;
  uint64_t v23 = v13;
  uint64_t v24 = v11;
  CFAllocatorRef v25 = (const __CFAllocator *)v10;
  if ((v15 == 1 || !v17) && (!v16 || !v17))
  {
    unsigned int v67 = v12;
    if (v11 >= 1)
    {
      unint64_t v26 = 0;
      size_t v27 = v13;
      uint64_t v28 = v11;
      while (1)
      {
        uint64_t v30 = *(void *)v27;
        size_t v27 = (OpaqueCMBlockBuffer *)((char *)v27 + 8);
        uint64_t v29 = v30;
        if (__CFADD__(v26, v30)) {
          goto LABEL_109;
        }
        v26 += v29;
        if (!--v28) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v26 = 0;
LABEL_14:
    unint64_t v68 = 0;
    uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v31) {
      uint64_t v32 = v31;
    }
    else {
      uint64_t v32 = 0;
    }
    int v33 = *(uint64_t (**)(OpaqueCMBlockBuffer *, void, unint64_t *))(v32 + 24);
    if (!v33) {
      return 4294954514;
    }
    uint64_t v34 = v33(v22, 0, &v68);
    if (!v34)
    {
      if (v26 <= v68 || (unint64_t v26 = v68, v21))
      {
        if (v19 == 1)
        {
          if ((v26 & 0x8000000000000000) != 0) {
            return 4294950190;
          }
          if (v20) {
            CFIndex v38 = 0;
          }
          else {
            CFIndex v38 = v26;
          }
          CFMutableDictionaryRef Mutable = CFDataCreateMutable(v25, v38);
          if (Mutable)
          {
            int v40 = Mutable;
            CFDataSetLength(Mutable, v26);
            int v66 = v40;
            MutableBytePtr = CFDataGetMutableBytePtr(v40);
LABEL_34:
            if (!MutableBytePtr)
            {
              uint64_t v18 = 4294950305;
              goto LABEL_117;
            }
            if (v20)
            {
              int v41 = FigCFEqual();
              CFArrayRef v42 = v66;
              if (v41)
              {
                compression_algorithm v43 = COMPRESSION_BROTLI;
                goto LABEL_66;
              }
              if (FigCFEqual())
              {
                compression_algorithm v43 = COMPRESSION_ZLIB;
LABEL_66:
                long long v74 = 0u;
                long long v73 = 0u;
                if (v24 < 1)
                {
LABEL_88:
                  uint64_t v18 = 4294950194;
                }
                else
                {
                  theBuffer[0] = (CMBlockBufferRef)v24;
                  theBuffer[1] = v67;
                  theBuffer[2] = v23;
                  theBuffer[3] = v22;
                  memset(&stream, 0, sizeof(stream));
                  uint64_t BytesFromChunks = compression_stream_init(&stream, COMPRESSION_STREAM_DECODE, v43);
                  if (!BytesFromChunks)
                  {
                    CFDataSetLength(v66, llroundf((float)v26 * 4.0));
                    stream.dst_ptr = CFDataGetMutableBytePtr(v66);
                    stream.dst_CGSize size = CFDataGetLength(v66);
                    if (v41)
                    {
                      unint64_t v55 = 0;
                    }
                    else
                    {
                      while (1)
                      {
                        unint64_t v55 = *((void *)&v74 + 1);
                        if (*((void *)&v74 + 1) >= 2uLL) {
                          break;
                        }
                        uint64_t BytesFromChunks = _readBytesFromChunks((uint64_t)theBuffer, 2 - *((void *)&v74 + 1), (uint64_t)&v75[2] + *((void *)&v74 + 1), 0);
                        if (BytesFromChunks) {
                          goto LABEL_79;
                        }
                      }
                    }
                    unint64_t v56 = 4 * (v41 == 0);
                    unsigned __int8 v70 = 0;
                    unint64_t v57 = v26 - v56;
                    while (v57 > v55)
                    {
                      if (!stream.src_size)
                      {
                        size_t v69 = 0;
                        if (v57 - v55 >= 0x1000) {
                          unint64_t v58 = 4096;
                        }
                        else {
                          unint64_t v58 = v57 - v55;
                        }
                        uint64_t BytesFromChunks = _readBytesFromChunks((uint64_t)theBuffer, v58, (uint64_t)dataPointerOut, &v69);
                        if (BytesFromChunks) {
                          goto LABEL_79;
                        }
                        stream.src_ptr = (const uint8_t *)dataPointerOut;
                        stream.src_CGSize size = v69;
                        unint64_t v55 = *((void *)&v74 + 1);
                      }
                      uint64_t BytesFromChunks = _processCompressedData(&stream, v66, v55 >= v57, &v70);
                      if (BytesFromChunks) {
                        goto LABEL_79;
                      }
                    }
                    if (!v41)
                    {
                      unint64_t v64 = 0;
                      while (v56 > v64)
                      {
                        size_t v69 = 0;
                        uint64_t BytesFromChunks = _readBytesFromChunks((uint64_t)theBuffer, v56 - v64, (uint64_t)v75 + v64, &v69);
                        v64 += v69;
                        if (BytesFromChunks) {
                          goto LABEL_79;
                        }
                      }
                    }
                    int v59 = v70;
                    while (!v59)
                    {
                      uint64_t BytesFromChunks = _processCompressedData(&stream, v66, 1, &v70);
                      if (BytesFromChunks) {
                        goto LABEL_79;
                      }
                      int v59 = v70;
                      if (!v70 && stream.dst_size) {
                        goto LABEL_88;
                      }
                    }
                    if (stream.dst_size)
                    {
                      CFIndex Length = CFDataGetLength(v66);
                      CFDataSetLength(v66, Length - stream.dst_size);
                    }
                    if (v41
                      || (BytePtr = CFDataGetBytePtr(v66),
                          uInt v62 = CFDataGetLength(v66),
                          int v63 = adler32(1uLL, BytePtr, v62),
                          bswap32(*(unsigned int *)v75) == v63))
                    {
                      compression_stream_destroy(&stream);
                      uint64_t v44 = 0;
LABEL_99:
                      if (a9) {
                        *a9 = v44;
                      }
                      uint64_t v18 = 0;
                      *a10 = v42;
                      return v18;
                    }
                    uint64_t v18 = FigSignalErrorAt();
                    compression_stream_destroy(&stream);
                    if (!v18)
                    {
LABEL_60:
                      uint64_t v44 = 0;
LABEL_98:
                      CFArrayRef v42 = v66;
                      goto LABEL_99;
                    }
LABEL_117:
                    CFArrayRef v42 = v66;
                    if (!v66) {
                      return v18;
                    }
                    goto LABEL_108;
                  }
LABEL_79:
                  uint64_t v18 = BytesFromChunks;
                }
                compression_stream_destroy(&stream);
                if (!v66) {
                  return v18;
                }
                goto LABEL_108;
              }
              uint64_t v65 = FigSignalErrorAt();
            }
            else
            {
              if (v24 < 1) {
                goto LABEL_60;
              }
              uint64_t v44 = 0;
              while (1)
              {
                unsigned int v46 = *(char **)v23;
                uint64_t v23 = (OpaqueCMBlockBuffer *)((char *)v23 + 8);
                CFTypeRef v45 = v46;
                dataPointerOut[0] = 0;
                if ((unint64_t)v46 >= v26 - v44) {
                  CMSampleBufferRef v47 = (char *)(v26 - v44);
                }
                else {
                  CMSampleBufferRef v47 = v45;
                }
                uint64_t v48 = *(void *)v67;
                unsigned int v67 = (OpaqueCMBlockBuffer *)((char *)v67 + 8);
                uint64_t v49 = *(void *)(CMBaseObjectGetVTable() + 16);
                if (v49) {
                  uint64_t v50 = v49;
                }
                else {
                  uint64_t v50 = 0;
                }
                int v51 = *(uint64_t (**)(OpaqueCMBlockBuffer *, char *, uint64_t, UInt8 *, char **))(v50 + 8);
                if (v51) {
                  uint64_t v18 = v51(v22, v47, v48, MutableBytePtr, dataPointerOut);
                }
                else {
                  uint64_t v18 = 4294954514;
                }
                v44 += (uint64_t)dataPointerOut[0];
                BOOL v53 = v45 != dataPointerOut[0] || v18 == -12873;
                if (v21 && v53)
                {
                  FigSignalErrorAt();
                  goto LABEL_98;
                }
                if (v18) {
                  goto LABEL_117;
                }
                if (v45 != dataPointerOut[0]) {
                  break;
                }
                MutableBytePtr = (UInt8 *)&v45[(void)MutableBytePtr];
                if (!--v24) {
                  goto LABEL_60;
                }
              }
              uint64_t v65 = FigSignalErrorAt();
              uint64_t v44 = 0;
              CFArrayRef v42 = v66;
              if (!v65) {
                goto LABEL_99;
              }
            }
            uint64_t v18 = v65;
            if (v42) {
LABEL_108:
            }
              CFRelease(v42);
            return v18;
          }
        }
        else if (v19 == 2)
        {
          dataPointerOut[0] = 0;
          theBuffer[0] = 0;
          uint64_t v18 = CMBlockBufferCreateWithMemoryBlock(v25, 0, v26, v25, 0, 0, v26, 1u, theBuffer);
          int v66 = theBuffer[0];
          if (v18) {
            goto LABEL_117;
          }
          uint64_t DataPointer = CMBlockBufferGetDataPointer(theBuffer[0], 0, 0, 0, dataPointerOut);
          if (DataPointer)
          {
            uint64_t v18 = DataPointer;
            goto LABEL_117;
          }
          MutableBytePtr = (UInt8 *)dataPointerOut[0];
          goto LABEL_34;
        }
        return 4294950305;
      }
      return FigSignalErrorAt();
    }
    return v34;
  }
LABEL_109:
  return FigSignalErrorAt();
}

uint64_t CMPhotoDecompressionContainerCreateTileIteratorForIndexWithOptions(void *a1, const __CFNumber *a2, const __CFDictionary *a3, CFTypeRef *a4)
{
  CFTypeRef cf = 0;
  if (!a1) {
    return 4294950306;
  }
  uint64_t v13 = -1;
  uint64_t v6 = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a3, (const __CFNumber **)&v13, 0, 0);
  if (v6) {
    return v6;
  }
  uint64_t v7 = _allocateTileIterator(a1, &cf);
  CFTypeRef v8 = cf;
  if (v7)
  {
    uint64_t v11 = v7;
    goto LABEL_16;
  }
  *((void *)cf + 3) = v13;
  uint64_t v9 = a1[4];
  if (v9) {
    uint64_t v10 = a1[4];
  }
  else {
    uint64_t v10 = 0;
  }
  if (!*(void *)(v10 + 240))
  {
    uint64_t v11 = 4294950302;
LABEL_11:
    CFRelease(v8);
    return v11;
  }
  uint64_t v11 = (*(uint64_t (**)(void *, void, CFTypeRef))(v9 + 240))(a1, 0, v8);
  CFTypeRef v8 = cf;
  if (v11)
  {
LABEL_16:
    if (!v8) {
      return v11;
    }
    goto LABEL_11;
  }
  *a4 = cf;
  return v11;
}

uint64_t _initTileIteratorForIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = CMPhotoSoftwareJFIFTileIteratorCreate();
  if (!result) {
    *(void *)(a3 + 48) = &CMPhotoSoftwareJFIFTileIteratorVTable;
  }
  return result;
}

uint64_t _initTileIteratorForIndex_0(uint64_t a1, uint64_t a2, void *a3)
{
  CFTypeRef v32 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v31 = 0;
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = a3[3];
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  CFTypeRef v8 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, void))(v7 + 16);
  if (!v8)
  {
LABEL_34:
    uint64_t v28 = 4294954514;
    goto LABEL_35;
  }
  uint64_t v9 = v8(v4, v5, &cf, 0);
  if (v9)
  {
LABEL_43:
    uint64_t v28 = v9;
    goto LABEL_35;
  }
  uint64_t v10 = a3[5];
  if (v10 == -1)
  {
    uint64_t v14 = a3[4];
    CFTypeRef v15 = cf;
    if (v14 == -1) {
      goto LABEL_22;
    }
    uint64_t v30 = 0;
    uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v16) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = 0;
    }
    int v19 = *(uint64_t (**)(CFTypeRef, uint64_t, const void **))(v17 + 40);
    if (!v19) {
      goto LABEL_34;
    }
    uint64_t v9 = v19(v15, v14, &v30);
    if (v9) {
      goto LABEL_43;
    }
  }
  else
  {
    uint64_t v30 = 0;
    CFTypeRef v11 = cf;
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v18 = *(uint64_t (**)(CFTypeRef, uint64_t, const void **))(v13 + 24);
    if (!v18) {
      goto LABEL_34;
    }
    uint64_t v9 = v18(v11, v10, &v30);
    if (v9) {
      goto LABEL_43;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  CFTypeRef v15 = v30;
  CFTypeRef cf = v30;
LABEL_22:
  uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v20) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = 0;
  }
  uint64_t v22 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(v21 + 8);
  if (!v22) {
    goto LABEL_34;
  }
  uint64_t v9 = v22(v15, &v32);
  if (v9) {
    goto LABEL_43;
  }
  CFTypeRef v23 = v32;
  uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v24) {
    uint64_t v25 = v24;
  }
  else {
    uint64_t v25 = 0;
  }
  unint64_t v26 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(v25 + 8);
  if (!v26) {
    goto LABEL_34;
  }
  uint64_t v9 = v26(v23, &v31);
  if (v9) {
    goto LABEL_43;
  }
  size_t v27 = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
  if (v27)
  {
    uint64_t v28 = 0;
    *size_t v27 = v31;
    CFTypeRef v31 = 0;
    a3[6] = &_initTileIteratorForIndex_vtable;
    a3[7] = v27;
  }
  else
  {
    uint64_t v28 = 4294950305;
  }
LABEL_35:
  if (cf) {
    CFRelease(cf);
  }
  if (v32) {
    CFRelease(v32);
  }
  if (v31) {
    CFRelease(v31);
  }
  return v28;
}

uint64_t _initTileIteratorForIndex_1(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v22 = 0;
  uint64_t v5 = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
  if (!v5)
  {
    uint64_t v13 = FigSignalErrorAt();
    goto LABEL_29;
  }
  uint64_t v6 = a3[5];
  if (v6 != -1)
  {
    CFArrayRef Count = (const __CFArray *)a1[11];
    if (Count) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if (v6 <= (uint64_t)Count)
    {
      CFArrayRef v8 = (const __CFArray *)a1[11];
      CFIndex v9 = a3[5];
LABEL_12:
      unsigned int ValueAtIndex = CFArrayGetValueAtIndex(v8, v9);
      goto LABEL_13;
    }
    goto LABEL_31;
  }
  uint64_t v10 = a3[4];
  if (v10 != -1)
  {
    CFArrayRef v11 = (const __CFArray *)a1[12];
    if (v11) {
      CFArrayRef v11 = (const __CFArray *)CFArrayGetCount(v11);
    }
    if (v10 <= (uint64_t)v11)
    {
      CFArrayRef v8 = (const __CFArray *)a1[12];
      CFIndex v9 = a3[4];
      goto LABEL_12;
    }
LABEL_31:
    uint64_t v19 = 4294950306;
    goto LABEL_22;
  }
  unsigned int ValueAtIndex = (const void *)a1[10];
LABEL_13:
  uint64_t v13 = pthread_mutex_lock(*((pthread_mutex_t **)ValueAtIndex + 4));
  if (v13)
  {
LABEL_29:
    uint64_t v19 = v13;
    goto LABEL_22;
  }
  uint64_t v14 = _moveCursorToPosition(*((void *)ValueAtIndex + 2), (uint64_t *)ValueAtIndex + 3, a3[3]);
  if (v14) {
    goto LABEL_30;
  }
  uint64_t v15 = *((void *)ValueAtIndex + 2);
  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v16) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v18 = *(uint64_t (**)(uint64_t, const void **))(v17 + 8);
  if (!v18)
  {
    uint64_t v19 = 4294954514;
    goto LABEL_24;
  }
  uint64_t v14 = v18(v15, &v22);
  if (v14)
  {
LABEL_30:
    uint64_t v19 = v14;
  }
  else
  {
    uint64_t v19 = pthread_mutex_unlock(*((pthread_mutex_t **)ValueAtIndex + 4));
    if (!v19)
    {
      *uint64_t v5 = v22;
      a3[6] = (uint64_t)&_initTileIteratorForIndex_vtable_0;
      a3[7] = (uint64_t)v5;
      uint64_t v5 = 0;
LABEL_22:
      free(v5);
      return v19;
    }
  }
LABEL_24:
  pthread_mutex_unlock(*((pthread_mutex_t **)ValueAtIndex + 4));
  uint64_t v20 = v22;
  free(v5);
  if (v20) {
    CFRelease(v20);
  }
  return v19;
}

uint64_t _allocateTileIterator(CFTypeRef cf, void *a2)
{
  uint64_t result = 4294950306;
  if (cf && a2)
  {
    CFGetAllocator(cf);
    pthread_once(&CMPhotoDecompressionTileIteratorGetTypeID_onceToken, (void (*)(void))RegisterCMPhotoDecompressionTileIterator);
    uint64_t Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      uint64_t v6 = (void *)Instance;
      CFTypeRef v7 = CFRetain(cf);
      uint64_t result = 0;
      v6[2] = v7;
      v6[3] = -1;
      v6[4] = -1;
      v6[5] = -1;
      *a2 = v6;
    }
    else
    {
      return 4294950305;
    }
  }
  return result;
}

void ___getShouldSetSurfaceOwnership_block_invoke()
{
  _getShouldSetSurfaceOwnership_setOwnership = 1;
}

double CMPhotoSurfacePoolClass_Init(_OWORD *a1)
{
  double result = 0.0;
  a1[24] = 0u;
  a1[25] = 0u;
  a1[22] = 0u;
  a1[23] = 0u;
  a1[20] = 0u;
  a1[21] = 0u;
  a1[18] = 0u;
  a1[19] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

void __CMPhotoIsTileDecoderAvailable_block_invoke_2()
{
  sTileDecodersAvailable_1 = 1;
}

uint64_t CMPhotoDecompressionContainerCreateDictionaryDescription(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 4294950306;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  else {
    uint64_t v3 = 0;
  }
  if (!*(void *)(v3 + 344)) {
    return 4294950302;
  }
  if (v2) {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  else {
    uint64_t v4 = 0;
  }
  return (*(uint64_t (**)(void))(v4 + 344))();
}

uint64_t _createDescription(uint64_t a1, CFDictionaryRef *a2)
{
  keys[4] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t v5 = a1 + 40;
  CFAllocatorRef v4 = *(const __CFAllocator **)(a1 + 40);
  CFTypeRef cf = 0;
  uint64_t v6 = _parseImageSizeAndTypeIfNeeded(a1 + 40);
  if (v6) {
    return v6;
  }
  uint64_t MainImageDescription = _parseICCProfileIfNeeded(v5);
  if (MainImageDescription
    || (uint64_t MainImageDescription = _parseExifIfNeeded(v5, 0), MainImageDescription)
    || (uint64_t MainImageDescription = _parseXMPIfNeeded(v5), MainImageDescription)
    || (uint64_t MainImageDescription = _parseDebugMetadataIfNeeded(v5), MainImageDescription)
    || (uint64_t MainImageDescription = _parseCustomMetadataIfNeeded(v5), MainImageDescription)
    || (uint64_t MainImageDescription = _parseMPOIfNeeded(v5), MainImageDescription)
    || (uint64_t MainImageDescription = _createMainImageDescription(a1, (const __CFNumber *)0xFFFFFFFFFFFFFFFFLL, (__CFDictionary **)&cf), MainImageDescription))
  {
    uint64_t v14 = MainImageDescription;
    CFNumberRef v12 = 0;
    CFNumberRef Int = 0;
    goto LABEL_14;
  }
  CFArrayRef v8 = CFArrayCreate(v4, &cf, 1, MEMORY[0x1E4F1D510]);
  if (!v8)
  {
    CFNumberRef v12 = 0;
    CFNumberRef Int = 0;
    uint64_t v14 = 4294950305;
    goto LABEL_14;
  }
  CFArrayRef v9 = v8;
  CFNumberRef Int = CMPhotoCFNumberCreateInt(0);
  if (!Int)
  {
    CFNumberRef v12 = 0;
    goto LABEL_25;
  }
  int Count = CFArrayGetCount(v9);
  CFNumberRef v12 = CMPhotoCFNumberCreateInt(Count);
  keys[0] = @"MainImages";
  keys[1] = @"MainImageCount";
  keys[2] = @"PrimaryImageIndex";
  keys[3] = @"ImageSequenceCount";
  values[0] = v9;
  values[1] = v12;
  values[2] = Int;
  values[3] = Int;
  CFDictionaryRef v13 = CFDictionaryCreate(v4, (const void **)keys, (const void **)values, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v13)
  {
LABEL_25:
    uint64_t v14 = 4294950305;
    goto LABEL_13;
  }
  uint64_t v14 = 0;
  *a2 = v13;
LABEL_13:
  CFRelease(v9);
LABEL_14:
  if (cf) {
    CFRelease(cf);
  }
  if (Int) {
    CFRelease(Int);
  }
  if (v12) {
    CFRelease(v12);
  }
  return v14;
}

uint64_t _createDescription_0(uint64_t a1, __CFDictionary **a2)
{
  CFAllocatorRef v2 = *(const __CFAllocator **)(a1 + 40);
  CFMutableDictionaryRef theDict = 0;
  values = 0;
  CFTypeRef v39 = 0;
  CFTypeRef cf = 0;
  CFRange value = 0;
  if (!a2)
  {
    CFArrayRef v31 = 0;
    uint64_t v34 = 0;
    uint64_t v36 = 0;
    goto LABEL_62;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v6 = Mutable;
  values = Mutable;
  if (!Mutable)
  {
    CFArrayRef v31 = 0;
    goto LABEL_81;
  }
  uint64_t v7 = *(void *)(a1 + 488);
  uint64_t MetadataDescriptionArray_0 = CMPhotoCFDictionarySetInt64(Mutable, @"DataOffset", 0);
  if (MetadataDescriptionArray_0) {
    goto LABEL_75;
  }
  uint64_t MetadataDescriptionArray_0 = CMPhotoCFDictionarySetSize(v6, @"DataLength", v7);
  if (MetadataDescriptionArray_0) {
    goto LABEL_75;
  }
  LODWORD(v9) = *(_DWORD *)(a1 + 88);
  LODWORD(v10) = *(_DWORD *)(a1 + 92);
  v43.double width = (double)v9;
  v43.double height = (double)v10;
  CFDictionaryRef DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v43);
  if (!DictionaryRepresentation) {
    goto LABEL_78;
  }
  CFDictionaryRef v12 = DictionaryRepresentation;
  CFDictionarySetValue(v6, @"Dimensions", DictionaryRepresentation);
  CFRelease(v12);
  uint64_t MetadataDescriptionArray_0 = _copyImageBitDepthForIndex_0(a1, 0, v13, (__CFArray **)&value);
  if (MetadataDescriptionArray_0)
  {
LABEL_75:
    uint64_t v36 = MetadataDescriptionArray_0;
    CFArrayRef v31 = 0;
LABEL_76:
    uint64_t v6 = 0;
    goto LABEL_57;
  }
  CFDictionarySetValue(v6, @"BitDepth", value);
  if (value)
  {
    CFRelease(value);
    CFRange value = 0;
  }
  uint64_t v14 = *(CGColorSpace **)(a1 + 288);
  if (v14)
  {
    CFStringRef v15 = CGColorSpaceCopyName(v14);
    if (v15)
    {
      CFStringRef v16 = v15;
      CFDictionarySetValue(v6, @"NamedColorSpace", v15);
      CFRelease(v16);
    }
    else
    {
      CFDictionarySetValue(v6, @"ColorSpace", *(const void **)(a1 + 288));
    }
  }
  if (*(void *)(a1 + 304) || *(void *)(a1 + 312))
  {
    uint64_t v17 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (v17)
    {
      uint64_t v18 = v17;
      uint64_t v19 = *(const void **)(a1 + 304);
      if (v19) {
        CFDictionarySetValue(v17, @"ColorPrimaries", v19);
      }
      uint64_t v20 = *(const void **)(a1 + 312);
      if (v20) {
        CFDictionarySetValue(v18, @"TransferFunction", v20);
      }
      CFDictionarySetValue(v6, @"NclxColor", v18);
      CFRelease(v18);
      goto LABEL_21;
    }
LABEL_78:
    CFArrayRef v31 = 0;
    uint64_t v6 = 0;
    goto LABEL_81;
  }
LABEL_21:
  uint64_t MetadataDescriptionArray_0 = CMPhotoCFDictionarySetInt32(v6, @"CodecType", 1786276896);
  if (MetadataDescriptionArray_0) {
    goto LABEL_75;
  }
  uint64_t MetadataDescriptionArray_0 = CMPhotoCFDictionarySetInt64(v6, @"ItemID", 1);
  if (MetadataDescriptionArray_0) {
    goto LABEL_75;
  }
  CFArrayRef v21 = *(const __CFArray **)(a1 + 320);
  if (v21)
  {
    if (CFArrayGetCount(v21) >= 1)
    {
      uint64_t MetadataDescriptionArray_0 = _createMetadataDescriptionArray_0(v2, 0, v7, *(CFArrayRef *)(a1 + 320), (__CFArray **)&cf);
      if (MetadataDescriptionArray_0) {
        goto LABEL_75;
      }
    }
  }
  CFArrayRef v22 = *(const __CFArray **)(a1 + 328);
  if (v22)
  {
    if (CFArrayGetCount(v22) >= 1)
    {
      uint64_t MetadataDescriptionArray_0 = _createMetadataDescriptionArray_0(v2, 0, v7, *(CFArrayRef *)(a1 + 328), (__CFArray **)&v39);
      if (MetadataDescriptionArray_0) {
        goto LABEL_75;
      }
    }
  }
  if (!*(_DWORD *)(a1 + 144)
    || (CFTypeRef v23 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]), (theDict = v23) == 0)
    || CMPhotoCFDictionarySetInt64(v23, @"DataOffset", 0)
    || CMPhotoCFDictionarySetSize(theDict, @"DataLength", v7))
  {
LABEL_43:
    CFArrayRef v31 = 0;
    goto LABEL_44;
  }
  unsigned int v24 = *(_DWORD *)(a1 + 144);
  if (v24)
  {
    if (v24 <= 8) {
      int v25 = 1278226488;
    }
    else {
      int v25 = 1278226742;
    }
    int v26 = 3;
LABEL_38:
    if (!CMPhotoCFDictionarySetInt(theDict, @"AuxiliaryType", v26)
      && !CMPhotoCFDictionarySetInt32(theDict, @"AuxiliaryNativePixelFormat", v25)
      && !CMPhotoCFDictionarySetInt(theDict, @"AlphaPremultiplication", 0))
    {
      LODWORD(v27) = *(_DWORD *)(a1 + 88);
      LODWORD(v28) = *(_DWORD *)(a1 + 92);
      v44.double width = (double)v27;
      v44.double height = (double)v28;
      CFDictionaryRef v29 = CGSizeCreateDictionaryRepresentation(v44);
      if (v29)
      {
        CFDictionaryRef v30 = v29;
        CFDictionarySetValue(theDict, @"Dimensions", v29);
        CFRelease(v30);
        CFArrayRef v31 = CFArrayCreate(v2, (const void **)&theDict, 1, MEMORY[0x1E4F1D510]);
        goto LABEL_44;
      }
    }
    goto LABEL_43;
  }
  CFArrayRef v31 = 0;
  if (!FigSignalErrorAt())
  {
    int v26 = 0;
    int v25 = 0;
    goto LABEL_38;
  }
LABEL_44:
  if (cf) {
    CFDictionarySetValue(v6, @"ExifPayloads", cf);
  }
  if (v39) {
    CFDictionarySetValue(v6, @"XMPPayloads", v39);
  }
  if (v31)
  {
    CFDictionarySetValue(v6, @"AuxiliaryImages", v31);
    CFArrayGetCount(v31);
  }
  uint64_t v32 = FigCFDictionarySetInt();
  if (v32)
  {
    uint64_t v36 = v32;
    goto LABEL_76;
  }
  uint64_t v6 = CFArrayCreate(v2, (const void **)&values, 1, MEMORY[0x1E4F1D510]);
  if (!v6)
  {
LABEL_81:
    uint64_t v34 = 0;
    goto LABEL_82;
  }
  int v33 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v34 = v33;
  if (!v33)
  {
LABEL_82:
    uint64_t v36 = 4294950305;
    goto LABEL_58;
  }
  CFDictionarySetValue(v33, @"MainImages", v6);
  CFArrayGetCount(v6);
  uint64_t v35 = FigCFDictionarySetInt();
  if (v35 || (uint64_t v35 = CMPhotoCFDictionarySetSize(v34, @"PrimaryImageIndex", 0), v35))
  {
    uint64_t v36 = v35;
    goto LABEL_58;
  }
  uint64_t v36 = CMPhotoCFDictionarySetSize(v34, @"ImageSequenceCount", 0);
  if (!v36)
  {
    *a2 = v34;
LABEL_57:
    uint64_t v34 = 0;
  }
LABEL_58:
  if (value) {
    CFRelease(value);
  }
  if (v6) {
    CFRelease(v6);
  }
LABEL_62:
  if (cf) {
    CFRelease(cf);
  }
  if (v39) {
    CFRelease(v39);
  }
  if (v31) {
    CFRelease(v31);
  }
  if (values) {
    CFRelease(values);
  }
  if (theDict) {
    CFRelease(theDict);
  }
  if (v34) {
    CFRelease(v34);
  }
  return v36;
}

uint64_t _createDescription_1(void *a1, __CFDictionary **a2)
{
  CFAllocatorRef v4 = CFGetAllocator(a1);
  CFRange value = 0;
  CFTypeRef cf = 0;
  uint64_t v25 = 0;
  CFIndex v26 = 0;
  uint64_t v24 = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    uint64_t v6 = Mutable;
    CFIndex capacity = 0;
    uint64_t ImageCountWithOptions = CMPhotoDecompressionContainerGetImageCountWithOptions((uint64_t)a1, 0, &capacity);
    if (ImageCountWithOptions
      || (uint64_t ImageCountWithOptions = FigCFDictionarySetInt(), ImageCountWithOptions))
    {
      uint64_t v19 = ImageCountWithOptions;
      goto LABEL_33;
    }
    CFMutableArrayRef v8 = CFArrayCreateMutable(v4, capacity, MEMORY[0x1E4F1D510]);
    if (!v8)
    {
      uint64_t v19 = 4294950305;
      goto LABEL_33;
    }
    CFMutableArrayRef v9 = v8;
    if (capacity < 1)
    {
LABEL_22:
      int IsMIAF = CMPhotoDecompressionContainerDetectSourceIsMIAF((uint64_t)a1);
      uint64_t SequenceCount_1 = CMPhotoCFDictionarySetBoolean(v6, @"SourceIsMIAF", IsMIAF);
      if (!SequenceCount_1)
      {
        CFDictionarySetValue(v6, @"MainImages", v9);
        if (capacity >= 1)
        {
          CFArrayRef theArray = 0;
          if (!_copyGroupsDescriptionArray_0(a1, 0, &theArray))
          {
            if (theArray)
            {
              if (CFArrayGetCount(theArray) >= 1)
              {
                CFDictionarySetValue(v6, @"GroupsList", theArray);
                if (theArray) {
                  CFRelease(theArray);
                }
              }
            }
          }
        }
        uint64_t SequenceCount_1 = _getSequenceCount_1((uint64_t)a1, &v26);
        if (!SequenceCount_1)
        {
          uint64_t SequenceCount_1 = FigCFDictionarySetInt();
          if (!SequenceCount_1)
          {
            uint64_t SequenceCount_1 = _getVideoAndAudioCount((uint64_t)a1, (unint64_t)&v25, (unint64_t)&v24);
            if (!SequenceCount_1)
            {
              uint64_t SequenceCount_1 = FigCFDictionarySetInt();
              if (!SequenceCount_1)
              {
                uint64_t v19 = FigCFDictionarySetInt();
                if (!v19)
                {
                  *a2 = v6;
                  uint64_t v6 = v9;
LABEL_33:
                  CFRelease(v6);
                  goto LABEL_34;
                }
LABEL_32:
                CFRelease(v9);
                goto LABEL_33;
              }
            }
          }
        }
      }
    }
    else
    {
      unint64_t v10 = 0;
      CFNumberRef v11 = 0;
      while (1)
      {
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0;
        }
        if (v10)
        {
          CFRelease(v10);
          CFRange value = 0;
        }
        CFNumberRef v21 = 0;
        CFArrayRef theArray = (CFArrayRef)-1;
        uint64_t SequenceCount_1 = CMPhotoDecompressionContainerExternalToInternalIndex(a1, v11, -1, 0, &theArray, 0, &v21);
        if (SequenceCount_1) {
          break;
        }
        uint64_t v13 = a1[6];
        CFArrayRef v14 = theArray;
        uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v15) {
          uint64_t v16 = v15;
        }
        else {
          uint64_t v16 = 0;
        }
        uint64_t v17 = *(uint64_t (**)(uint64_t, CFArrayRef, CFTypeRef *, void))(v16 + 16);
        if (!v17)
        {
          uint64_t v19 = 4294954514;
          goto LABEL_32;
        }
        uint64_t SequenceCount_1 = v17(v13, v14, &cf, 0);
        if (SequenceCount_1) {
          break;
        }
        uint64_t SequenceCount_1 = _createDescriptionForReader((uint64_t)a1, cf, (uint64_t)theArray, v21, v4, 0, 0, (__CFDictionary **)&value);
        if (SequenceCount_1) {
          break;
        }
        unint64_t v10 = value;
        CFArrayAppendValue(v9, value);
        CFNumberRef v11 = (const __CFNumber *)((char *)v11 + 1);
        if ((uint64_t)v11 >= capacity)
        {
          if (capacity >= 1)
          {
            CFArrayRef theArray = 0;
            uint64_t SequenceCount_1 = CMPhotoDecompressionContainerGetPrimaryItemIndexWithOptions((uint64_t)a1, 0, &theArray);
            if (SequenceCount_1) {
              break;
            }
            uint64_t SequenceCount_1 = FigCFDictionarySetInt();
            if (SequenceCount_1) {
              break;
            }
          }
          goto LABEL_22;
        }
      }
    }
    uint64_t v19 = SequenceCount_1;
    goto LABEL_32;
  }
  uint64_t v19 = 4294950305;
LABEL_34:
  if (value) {
    CFRelease(value);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v19;
}

uint64_t _createDescription_2(uint64_t *a1, CFMutableDictionaryRef *a2)
{
  CFAllocatorRef v4 = CFGetAllocator(a1);
  CFTypeRef v21 = 0;
  CFTypeRef cf = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return 4294950305;
  }
  CFMutableDictionaryRef v6 = Mutable;
  uint64_t v7 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v7)
  {
    CFDictionaryRef v12 = 0;
    uint64_t v13 = 0;
LABEL_44:
    uint64_t v17 = 4294950305;
LABEL_45:
    CFRelease(v6);
    if (!v7) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  CFIndex capacity = 0;
  CFNumberRef ImageCountForSequence = _getImageCountForSequence(a1[10], &capacity);
  if (ImageCountForSequence
    || (v19 = 0, Loopint Count = _getLoopCount((uint64_t)a1, &v19), !LoopCount)
    && (CFNumberRef ImageCountForSequence = (CFNumberRef)CMPhotoCFDictionarySetSize(v6, @"LoopCount", v19),
        ImageCountForSequence))
  {
    uint64_t v17 = (uint64_t)ImageCountForSequence;
    CFDictionaryRef v12 = 0;
    uint64_t v13 = 0;
    goto LABEL_45;
  }
  CFIndex v10 = capacity;
  if (capacity >= 1)
  {
    CFIndex v11 = 0;
    CFDictionaryRef v12 = 0;
    uint64_t v13 = 0;
    CFArrayRef v14 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    while (1)
    {
      if (!v13)
      {
        uint64_t v13 = CFArrayCreateMutable(v4, v10, v14);
        if (!v13) {
          goto LABEL_44;
        }
      }
      if (cf)
      {
        CFRelease(cf);
        CFTypeRef cf = 0;
      }
      if (v21)
      {
        CFRelease(v21);
        CFTypeRef v21 = 0;
      }
      uint64_t DescriptionOfFrameForIndex = _createDescriptionOfFrameForIndex((uint64_t)a1, a1[10], v11, v4, 0, (__CFDictionary **)&v21, (__CFDictionary **)&cf);
      if (DescriptionOfFrameForIndex)
      {
        uint64_t v17 = DescriptionOfFrameForIndex;
        goto LABEL_45;
      }
      if (cf) {
        CFArrayAppendValue(v13, cf);
      }
      if (!v11)
      {
        CFTypeRef v16 = v21;
        if (v21)
        {
          if (!v12)
          {
            CFDictionaryRef v12 = CFArrayCreateMutable(v4, 0, v14);
            if (!v12) {
              goto LABEL_44;
            }
            CFTypeRef v16 = v21;
          }
          CFArrayAppendValue(v12, v16);
        }
      }
      ++v11;
      CFIndex v10 = capacity;
      if (v11 >= capacity)
      {
        CFDictionarySetValue(v6, @"MainImages", v13);
        if (v12)
        {
          CFDictionarySetValue(v7, @"MainImages", v12);
          CFDictionarySetValue(v6, @"SequenceTracksDescription", v7);
        }
        uint64_t v17 = 0;
        if (a2) {
          goto LABEL_29;
        }
        goto LABEL_45;
      }
    }
  }
  uint64_t v13 = 0;
  CFDictionaryRef v12 = 0;
  uint64_t v17 = LoopCount;
  if (!a2) {
    goto LABEL_45;
  }
LABEL_29:
  *a2 = v6;
LABEL_30:
  CFRelease(v7);
LABEL_31:
  if (v13) {
    CFRelease(v13);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v21) {
    CFRelease(v21);
  }
  return v17;
}

uint64_t _getVideoAndAudioCount(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (!(a2 | a3)) {
    return 0;
  }
  if (!*(unsigned char *)(a1 + 136))
  {
    *(void *)(a1 + 152) = 0;
    *(unsigned char *)(a1 + 136) = 1;
    *(void *)(a1 + 144) = 0;
    uint64_t v6 = *(void *)(a1 + 56);
    if (v6)
    {
      uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v7) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 0;
      }
      CFIndex v10 = *(uint64_t (**)(uint64_t, uint64_t *))(v8 + 8);
      if (!v10) {
        return 4294954514;
      }
      uint64_t v18 = 0;
      uint64_t result = v10(v6, &v18);
      if (result) {
        return result;
      }
      if (v18 >= 1)
      {
        uint64_t v11 = 0;
        while (1)
        {
          int v17 = 0;
          uint64_t v12 = *(void *)(a1 + 56);
          uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v13) {
            uint64_t v14 = v13;
          }
          else {
            uint64_t v14 = 0;
          }
          uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, void, int *, void))(v14 + 48);
          if (!v15) {
            return 4294954514;
          }
          uint64_t result = v15(v12, v11, 0, &v17, 0);
          if (result) {
            return result;
          }
          CFTypeRef v16 = (void *)(a1 + 144);
          if (v17 == 1986618469) {
            goto LABEL_20;
          }
          if (v17 == 1936684398) {
            break;
          }
LABEL_21:
          if (++v11 >= v18) {
            goto LABEL_22;
          }
        }
        CFTypeRef v16 = (void *)(a1 + 152);
LABEL_20:
        ++*v16;
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  if (a2) {
    *(void *)a2 = *(void *)(a1 + 144);
  }
  uint64_t result = 0;
  if (a3) {
    *(void *)a3 = *(void *)(a1 + 152);
  }
  return result;
}

uint64_t _getSequenceCount(uint64_t a1, void *a2)
{
  if (a2) {
    *a2 = 0;
  }
  return 0;
}

uint64_t _getSequenceCount_0(uint64_t a1, void *a2)
{
  if (a2) {
    *a2 = 0;
  }
  return 0;
}

uint64_t _getSequenceCount_1(uint64_t a1, CFIndex *a2)
{
  if (!a2) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 120)
    || (*(unsigned char *)(a1 + 120) = 1,
        uint64_t result = CMPhotoDecompressionContainerHEICS_GetSequenceInfoFromSource(*(const void **)(a1 + 56), (__CFArray **)(a1 + 128)), !result))
  {
    CFArrayRef v5 = *(const __CFArray **)(a1 + 128);
    if (v5) {
      CFIndex Count = CFArrayGetCount(v5);
    }
    else {
      CFIndex Count = 0;
    }
    uint64_t result = 0;
    *a2 = Count;
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerHEICS_GetSequenceInfoFromSource(const void *a1, __CFArray **a2)
{
  CFTypeRef cf = 0;
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (!Mutable) {
    return 4294950305;
  }
  uint64_t v6 = Mutable;
  uint64_t v27 = 0;
  if (!a1) {
    goto LABEL_31;
  }
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  CFMutableArrayRef v9 = *(uint64_t (**)(const void *, uint64_t *))(v8 + 8);
  if (v9)
  {
    uint64_t v10 = v9(a1, &v27);
    if (v10)
    {
LABEL_42:
      uint64_t v22 = v10;
      goto LABEL_34;
    }
    uint64_t FigBaseObject = FigFormatReaderGetFigBaseObject();
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = *(void (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v13 + 48);
    if (v14) {
      v14(FigBaseObject, *MEMORY[0x1E4F32BB0], v4, &cf);
    }
    if (v27 >= 1)
    {
      uint64_t v15 = 0;
      do
      {
        uint64_t v25 = 0;
        uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v17 = v16 ? v16 : 0;
        uint64_t v18 = *(uint64_t (**)(const void *, uint64_t, void, char *, uint64_t *))(v17 + 48);
        if (!v18) {
          goto LABEL_33;
        }
        uint64_t v10 = v18(a1, v15, 0, (char *)&v25 + 4, &v25);
        if (v10) {
          goto LABEL_42;
        }
        if (HIDWORD(v25) == 1885954932)
        {
          char v24 = 0;
          CFMutableDictionaryRef v19 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          if (!v19)
          {
            uint64_t v22 = 4294950305;
            goto LABEL_34;
          }
          uint64_t v20 = v19;
          FigCFDictionarySetInt();
          CFDictionarySetValue(v20, @"FormatReader", a1);
          uint64_t v21 = _addReferencesToItemInfo(v20, (const __CFDictionary *)cf, v25, @"thmb", &v24);
          if (v21) {
            goto LABEL_39;
          }
          if (v24)
          {
            uint64_t v21 = _addReferencesToItemInfo(v20, (const __CFDictionary *)cf, v25, @"auxl", &v24);
            if (v21) {
              goto LABEL_39;
            }
            if (v24)
            {
              uint64_t v21 = _addReferencesToItemInfo(v20, (const __CFDictionary *)cf, v25, @"cdsc", &v24);
              if (v21)
              {
LABEL_39:
                uint64_t v22 = v21;
                CFRelease(v20);
                goto LABEL_34;
              }
              if (v24) {
                CFArrayAppendValue(v6, v20);
              }
            }
          }
          CFRelease(v20);
        }
      }
      while (++v15 < v27);
    }
LABEL_31:
    uint64_t v22 = 0;
    if (a2)
    {
      *a2 = v6;
      uint64_t v6 = 0;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t v22 = 4294954514;
LABEL_34:
  if (cf) {
    CFRelease(cf);
  }
  if (v6) {
    CFRelease(v6);
  }
  return v22;
}

uint64_t CMPhotoDecompressionContainerGetPrimaryItemIndexWithOptions(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result = 4294950306;
  if (a1)
  {
    if (a3)
    {
      uint64_t result = 0;
      *a3 = *(void *)(a1 + 568);
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerDetectSourceIsMIAF(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(void *)(a1 + 32);
    uint64_t v2 = v1 ? *(void *)(a1 + 32) : 0;
    if (*(void *)(v2 + 424))
    {
      if (v1) {
        uint64_t v3 = *(void *)(a1 + 32);
      }
      else {
        uint64_t v3 = 0;
      }
      (*(uint64_t (**)(void))(v3 + 424))();
    }
  }
  return 0;
}

uint64_t _detectSourceIsMIAF(uint64_t a1, unsigned char *a2)
{
  CFTypeRef cf = 0;
  if (!a2) {
    return 4294950306;
  }
  if (*(unsigned char *)(a1 + 160))
  {
    CFTypeRef v4 = 0;
    char v5 = *(unsigned char *)(a1 + 161);
LABEL_13:
    uint64_t v11 = 0;
    *a2 = v5;
    goto LABEL_14;
  }
  CFTypeRef v4 = *(CFTypeRef *)(a1 + 48);
  if (!v4)
  {
    char v5 = 0;
    *(unsigned char *)(a1 + 161) = 0;
LABEL_12:
    *(unsigned char *)(a1 + 160) = 1;
    goto LABEL_13;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t CMBaseObject = FigPictureCollectionGetCMBaseObject();
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, void, uint64_t, CFTypeRef *))(v9 + 48);
  if (!v10) {
    return 4294954514;
  }
  uint64_t v11 = v10(CMBaseObject, *MEMORY[0x1E4F33270], v6, &cf);
  CFTypeRef v4 = cf;
  if (!v11)
  {
    char v5 = FigCFEqual();
    *(unsigned char *)(a1 + 161) = v5;
    CFTypeRef v4 = cf;
    goto LABEL_12;
  }
LABEL_14:
  if (v4) {
    CFRelease(v4);
  }
  return v11;
}

uint64_t CMPhotoDecompressionContainerGetImageCountWithOptions(uint64_t a1, uint64_t a2, void *a3)
{
  if (!a1) {
    return 4294950306;
  }
  if (!a3) {
    return 0;
  }
  uint64_t result = 0;
  *a3 = *(void *)(a1 + 584);
  return result;
}

uint64_t _runAsyncDecodeRequest(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  CFTypeRef cf = 0;
  uint64_t v5 = _decodeImage(*(const __CFAllocator **)(a1 + 40), *(void *)(a2 + 16), *(const void **)(a2 + 48), *(_DWORD *)(a2 + 56), *(void *)(a2 + 64), *(const __CFDictionary **)(a2 + 80), *(unsigned __int8 *)(a2 + 72), *(void *)a2, *(_DWORD *)(a2 + 40), 1u, (CGImageRef *)&cf);
  if (v5)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    *a3 = cf;
    CFTypeRef cf = 0;
  }
  uint64_t v6 = *(const void **)(a2 + 48);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a2 + 48) = 0;
  }
  uint64_t v7 = *(const void **)(a2 + 80);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(a2 + 80) = 0;
  }
  return v5;
}

uint64_t _runAsyncDecodeRequest_0(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  CFTypeRef cf = 0;
  if (*(_DWORD *)(a2 + 48))
  {
    uint64_t v5 = 4294950302;
  }
  else
  {
    uint64_t v5 = _decodeImage_0(a1, 0, *(const __CFDictionary **)(a2 + 56), *(void *)a2, *(_DWORD *)(a2 + 40), 1, (CGImageRef *)&cf);
    if (v5)
    {
      if (cf) {
        CFRelease(cf);
      }
    }
    else
    {
      *a3 = cf;
      CFTypeRef cf = 0;
    }
  }
  uint64_t v6 = *(const void **)(a2 + 56);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a2 + 56) = 0;
  }
  return v5;
}

uint64_t _runAsyncDecodeRequest_1(void *a1, uint64_t a2, void *a3)
{
  CGImageRef v38 = 0;
  CFTypeRef v36 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v34 = 0;
  CFTypeRef v35 = 0;
  CFTypeRef v32 = 0;
  CFTypeRef v33 = 0;
  CFTypeRef v31 = 0;
  if (!*(_DWORD *)(a2 + 56) || *(void *)(a2 + 72) == -1)
  {
    uint64_t v6 = *(void *)(a2 + 88);
    uint64_t v7 = *(void *)(a2 + 48);
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, void))(v9 + 16);
    if (!v10) {
      goto LABEL_34;
    }
    uint64_t AuxiliaryImageForIndex_0 = v10(v6, v7, &cf, 0);
    if (AuxiliaryImageForIndex_0) {
      goto LABEL_60;
    }
    CFTypeRef v12 = cf;
    uint64_t v13 = *(void *)(a2 + 64);
    if (v13 == -1)
    {
      CFTypeRef v17 = 0;
LABEL_23:
      if (*(void *)(a2 + 72) != -1)
      {
        int v30 = 2;
        uint64_t AuxiliaryImageForIndex_0 = CMPhotoDecompressionContainerCreateAlphaDecodeOptionsForInternalIndex((uint64_t)a1, *(void *)(a2 + 48), *(void *)(a2 + 96), *(_DWORD *)(a2 + 80), &v33, (__CFDictionary **)&v32);
        if (!AuxiliaryImageForIndex_0)
        {
          uint64_t AuxiliaryImageForIndex_0 = (uint64_t)_createAuxiliaryImageForIndex_0(a1, *(void *)(a2 + 48), *(void *)(a2 + 72), (CFDictionaryRef)v32, 2, (CGImageRef *)&v34);
          if (!AuxiliaryImageForIndex_0)
          {
            uint64_t AuxiliaryImageForIndex_0 = _decodeImage_1(a1, v12, 0, *(void *)(a2 + 48), (const __CFDictionary *)v33, *(void *)a2, 2, 0, (CGImageRef *)&v35);
            if (!AuxiliaryImageForIndex_0)
            {
              if (_copyAuxiliaryImageTypeInfo((uint64_t)a1, *(void *)(a2 + 48), *(void *)(a2 + 72), v22, 0, (uint64_t)&v31)|| !v31|| (_readAlphaInfoSEIPayload((uint64_t)v31, &v30), int v23 = v30, v30 == 2))
              {
                int v23 = 0;
              }
              __int16 v29 = 0;
              CMPhotoCFDictionaryGetBooleanIfPresent(*(CFDictionaryRef *)(a2 + 96), @"BackCGImageWithIOSurface", (unsigned char *)&v29 + 1);
              CMPhotoCFDictionaryGetBooleanIfPresent(*(CFDictionaryRef *)(a2 + 96), @"PremultiplyWithAlpha", &v29);
              if (!CMPhotoCreateImageFromAlphaAndMainBuffer((__CVBuffer *)v35, (__CVBuffer *)v34, v23, v29, HIBYTE(v29), *(_DWORD *)(a2 + 40), &v38))goto LABEL_33; {
              CFAllocatorRef v24 = CFGetAllocator(a1);
              }
              uint64_t AuxiliaryImageForIndex_0 = CMPhotoCreateWrappedPixelBufferForType(v24, (CVPixelBufferRef)v35, HIBYTE(v29), *(_DWORD *)(a2 + 40), &v38);
              if (!AuxiliaryImageForIndex_0) {
                goto LABEL_33;
              }
            }
          }
        }
        goto LABEL_60;
      }
      uint64_t v28 = *(void *)(a2 + 48);
      if (*(_DWORD *)(a2 + 56) == 2)
      {
        uint64_t AuxiliaryImageForIndex_0 = _decodeAuxiliaryImage(a1, v12, v17, v28, *(void *)(a2 + 64), *(CFDictionaryRef *)(a2 + 96), *(void *)a2, *(_DWORD *)(a2 + 40), &v38);
        if (AuxiliaryImageForIndex_0) {
          goto LABEL_60;
        }
LABEL_33:
        uint64_t v21 = 0;
        *a3 = v38;
        CGImageRef v38 = 0;
        goto LABEL_37;
      }
      uint64_t AuxiliaryImageForIndex_0 = _decodeImage_1(a1, v12, v17, v28, *(const __CFDictionary **)(a2 + 96), *(void *)a2, *(_DWORD *)(a2 + 40), 0, &v38);
      if (!AuxiliaryImageForIndex_0) {
        goto LABEL_33;
      }
LABEL_60:
      uint64_t v21 = AuxiliaryImageForIndex_0;
      goto LABEL_35;
    }
    int v14 = *(_DWORD *)(a2 + 56);
    if (v14 == 1)
    {
      uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v18) {
        uint64_t v19 = v18;
      }
      else {
        uint64_t v19 = 0;
      }
      uint64_t v20 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *))(v19 + 24);
      if (v20) {
        goto LABEL_21;
      }
      goto LABEL_34;
    }
    if (v14)
    {
      uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v15) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = 0;
      }
      uint64_t v20 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *))(v16 + 40);
      if (v20)
      {
LABEL_21:
        uint64_t v21 = v20(v12, v13, &v36);
        if (v21) {
          goto LABEL_35;
        }
        CFTypeRef v12 = v36;
        CFTypeRef v17 = cf;
        goto LABEL_23;
      }
LABEL_34:
      uint64_t v21 = 4294954514;
      goto LABEL_35;
    }
  }
  uint64_t v21 = 4294950302;
LABEL_35:
  if (v38) {
    CFRelease(v38);
  }
LABEL_37:
  uint64_t v25 = *(const void **)(a2 + 96);
  if (v25)
  {
    CFRelease(v25);
    *(void *)(a2 + 96) = 0;
  }
  CFIndex v26 = *(const void **)(a2 + 88);
  if (v26)
  {
    CFRelease(v26);
    *(void *)(a2 + 88) = 0;
  }
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (v36)
  {
    CFRelease(v36);
    CFTypeRef v36 = 0;
  }
  if (v35)
  {
    CFRelease(v35);
    CFTypeRef v35 = 0;
  }
  if (v34)
  {
    CFRelease(v34);
    CFTypeRef v34 = 0;
  }
  if (v33)
  {
    CFRelease(v33);
    CFTypeRef v33 = 0;
  }
  if (v32)
  {
    CFRelease(v32);
    CFTypeRef v32 = 0;
  }
  if (v31) {
    CFRelease(v31);
  }
  return v21;
}

void QualityController_dispose(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (const void *)a1[6];
    if (v2) {
      CFRelease(v2);
    }
    free(a1);
  }
}

void _callback_CompletionHandlerWrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (**a8)(void, void, void, void, void, void, void, void))
{
  a8[2](a8, a1, a2, a3, a4, a5, a6, a7);
  _Block_release(a8);
}

void _callback_CompletionHandlerWrapper_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (**a6)(void, void, void, void, void, void))
{
  a6[2](a6, a1, a2, a3, a4, a5);
  _Block_release(a6);
}

uint64_t ___getMarkSurfacesNonPurgeable_block_invoke()
{
  uint64_t result = FigServer_IsServerProcess();
  _getMarkSurfacesNonPurgeable_markSurfacesNonPurgeable = result != 0;
  return result;
}

uint64_t _initializeService()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  mach_port_t v0 = *MEMORY[0x1E4F2EEF0];
  CFDictionaryRef v1 = IOServiceMatching("AppleJPEGDriver");
  uint64_t result = IOServiceGetMatchingService(v0, v1);
  _jpegService = result;
  if (result)
  {
    CFBooleanRef CFProperty = (const __CFBoolean *)IORegistryEntryCreateCFProperty(result, @"AppleJPEGNumCores", 0, 0);
    int Int = CMPhotoCFNumberGetInt(CFProperty);
    _numberOfJPEGCores = Int;
    if (CFProperty)
    {
      CFRelease(CFProperty);
      int Int = _numberOfJPEGCores;
    }
    if (Int < 2)
    {
      v5.__sig = 0;
      *(void *)v5.__opaque = 0;
      pthread_mutexattr_init(&v5);
      pthread_mutexattr_settype(&v5, 2);
      pthread_mutex_init(&_jpegLock, &v5);
      return pthread_mutexattr_destroy(&v5);
    }
    else
    {
      uint64_t result = FigSemaphoreCreate();
      _jpegSema = result;
    }
  }
  return result;
}

CFBooleanRef _checkSupportsAppleInterchangeFormats()
{
  CFBooleanRef result = _checkUInt32DriverProperty(@"AppleJPEGSupportsAppleInterchangeFormats", (const __CFBoolean *)_supportsAppleInterchangeFormats);
  _supportsAppleInterchangeFormats = (char)result;
  return result;
}

CFBooleanRef _checkSupportsRSTLogging()
{
  CFBooleanRef result = _checkUInt32DriverProperty(@"AppleJPEGSupportsRSTLogging", (const __CFBoolean *)_supportsRSTLogging);
  _supportsRSTLogging = (char)result;
  return result;
}

CFBooleanRef _checkUInt32DriverProperty(CFStringRef key, const __CFBoolean *Int)
{
  io_registry_entry_t v3 = _jpegService;
  if (_jpegService || (pthread_once(&jpegService_once, (void (*)(void))_initializeService), (io_registry_entry_t v3 = _jpegService) != 0))
  {
    CFBooleanRef CFProperty = (const __CFBoolean *)IORegistryEntryCreateCFProperty(v3, key, 0, 0);
    int Int = CMPhotoCFNumberGetInt(CFProperty);
    if (CFProperty) {
      CFRelease(CFProperty);
    }
  }
  return Int;
}

CFBooleanRef CMPhotoCFNumberGetInt(const __CFBoolean *result)
{
  if (result)
  {
    CFBooleanRef v1 = result;
    CFTypeID v2 = CFGetTypeID(result);
    if (v2 == CFBooleanGetTypeID())
    {
      return (const __CFBoolean *)(CFBooleanGetValue(v1) != 0);
    }
    else
    {
      unsigned int valuePtr = 0;
      if (CFNumberGetValue(v1, kCFNumberIntType, &valuePtr)) {
        return (const __CFBoolean *)valuePtr;
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

BOOL _canDecodeTilesOrLayersIntoCanvas(__CVBuffer *a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, int a8, int *a9, const __CFDictionary *a10, int a11)
{
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  double PixelBufferSize = CMPhotoGetPixelBufferSize(a1);
  if (a11 == 1785750887) {
    return PixelFormatType == a8;
  }
  double v23 = PixelBufferSize;
  double v24 = v21;
  int v25 = CMPhotoDeviceSupportsTileDecodingToCanvas();
  BOOL result = 0;
  if ((a8 & 0xFFFFFFEF) != 0x34343466 && v25)
  {
    IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(a1);
    BOOL v28 = PixelFormatType == a8 && IOSurface != 0;
    long long v53 = 0u;
    long long v54 = 0u;
    CMPhotoPixelBufferAttributesGetExtendedPixelsStruct(a10, &v53);
    if ((unint64_t)v53 | (unint64_t)v54)
    {
      BOOL v31 = 0;
      unint64_t v29 = a7;
    }
    else
    {
      unint64_t v29 = a7;
      BOOL v31 = (a6 < 2 || !*((void *)&v53 + 1)) && (a7 < 2 || *((void *)&v54 + 1) == 0);
    }
    int v32 = v31 && v28;
    if (a2 > a9[6]) {
      int v32 = 0;
    }
    if (a3 > a9[4]) {
      int v32 = 0;
    }
    if (a4 | a5) {
      unint64_t v33 = a4;
    }
    else {
      unint64_t v33 = a2;
    }
    if (a4 | a5) {
      unint64_t v34 = a5;
    }
    else {
      unint64_t v34 = a3;
    }
    if (v33 < a9[7] || v34 < a9[5]) {
      int v32 = 0;
    }
    if (a6 >= 2 && a2 % *a9) {
      int v32 = 0;
    }
    unint64_t v36 = vcvtad_u64_f64(v23);
    unint64_t v37 = vcvtad_u64_f64(v24);
    if (v29 >= 2 && a3 % a9[1]) {
      int v32 = 0;
    }
    unint64_t v38 = a2 + v36 + ~((v36 - 1) % a2);
    unint64_t v39 = a3 + v37 + ~((v37 - 1) % a3);
    if (a4 | a5)
    {
      unint64_t v38 = a4 + a9[2] + ~((a4 - 1) % a9[2]) + v36 + ~((v36 - 1) % a2);
      unint64_t v39 = a5 + a9[3] + ~((a5 - 1) % a9[3]) + v37 + ~((v37 - 1) % a3);
    }
    size_t v40 = 0;
    if (a6 == 1) {
      unint64_t v41 = *((void *)&v53 + 1) + a2;
    }
    else {
      unint64_t v41 = v38;
    }
    if (v29 == 1) {
      unint64_t v42 = *((void *)&v54 + 1) + a3;
    }
    else {
      unint64_t v42 = v39;
    }
    if (v41 <= a9[8]) {
      int v43 = v32;
    }
    else {
      int v43 = 0;
    }
    if (v42 <= a9[9]) {
      int v44 = v43;
    }
    else {
      int v44 = 0;
    }
    while (1)
    {
      size_t v45 = CVPixelBufferGetPlaneCount(a1) ? CVPixelBufferGetPlaneCount(a1) : 1;
      if (v40 >= v45) {
        break;
      }
      if (CVPixelBufferIsPlanar(a1)) {
        size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, v40);
      }
      else {
        size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRow(a1);
      }
      BOOL v48 = BytesPerRowOfPlane <= a9[10] && BytesPerRowOfPlane % *a9 == 0;
      v44 &= v48;
      ++v40;
    }
    size_t extraRowsOnBottom = 0;
    size_t extraColumnsOnRight = 0;
    CVPixelBufferGetExtendedPixels(a1, 0, &extraColumnsOnRight, 0, &extraRowsOnBottom);
    BOOL v50 = extraColumnsOnRight + v36 >= v41 && extraRowsOnBottom + v37 >= v42;
    return v50 & v44;
  }
  return result;
}

uint64_t CMPhotoDecompressionPluginCreate(const void *a1, const void *a2, const void *a3, const void *a4, int a5, const void *a6, uint64_t a7, uint64_t a8, uint64_t a9, CFDictionaryRef theDict, uint64_t a11, uint64_t a12, void *a13)
{
  int IsTileDecoderAvailable = CMPhotoIsTileDecoderAvailable(a5);
  if (a11) {
    BOOL v21 = a13 == 0;
  }
  else {
    BOOL v21 = 1;
  }
  if (v21)
  {
    double v24 = 0;
    uint64_t v25 = 4294950306;
    goto LABEL_41;
  }
  int v22 = IsTileDecoderAvailable;
  uint64_t v36 = a7;
  char v38 = 0;
  if (theDict) {
    CMPhotoCFDictionaryGetBooleanIfPresent(theDict, @"UseVTDecompression", &v38);
  }
  double v23 = malloc_type_calloc(1uLL, 0x60uLL, 0x10E0040E38DA5B6uLL);
  double v24 = v23;
  if (!v23)
  {
    uint64_t v25 = 4294950305;
    goto LABEL_41;
  }
  uint64_t v25 = 4294950298;
  if (a5 <= 1752589104)
  {
    if (a5 == 1635135537)
    {
LABEL_15:
      if (v38) {
        BOOL v27 = 1;
      }
      else {
        BOOL v27 = v22 == 0;
      }
      if (v27) {
        BOOL v28 = CMPhotoDecompressionPluginClassVideoToolbox;
      }
      else {
        BOOL v28 = CMPhotoDecompressionPluginClassVideoToolbox_Tile;
      }
      goto LABEL_24;
    }
    int v26 = 1635148593;
LABEL_14:
    if (a5 != v26) {
      goto LABEL_41;
    }
    goto LABEL_15;
  }
  if (a5 == 1936484717)
  {
    unint64_t v29 = CMPhotoDecompressionPluginClassSlim;
  }
  else
  {
    if (a5 != 1785750887)
    {
      int v26 = 1752589105;
      goto LABEL_14;
    }
    unint64_t v29 = CMPhotoDecompressionPluginClassJPEG;
  }
  BOOL v28 = v29;
LABEL_24:
  v23[5] = v28;
  v23[6] = a11;
  if (a1) {
    CFTypeRef v30 = CFRetain(a1);
  }
  else {
    CFTypeRef v30 = 0;
  }
  *double v24 = v30;
  if (a2) {
    CFTypeRef v31 = CFRetain(a2);
  }
  else {
    CFTypeRef v31 = 0;
  }
  v24[1] = v31;
  if (a3) {
    CFTypeRef v32 = CFRetain(a3);
  }
  else {
    CFTypeRef v32 = 0;
  }
  uint64x2_t v24[2] = v32;
  if (a4) {
    CFTypeRef v33 = CFRetain(a4);
  }
  else {
    CFTypeRef v33 = 0;
  }
  v24[3] = v33;
  if (a6) {
    CFTypeRef v34 = CFRetain(a6);
  }
  else {
    CFTypeRef v34 = 0;
  }
  v24[4] = v34;
  v24[7] = a12;
  *((_DWORD *)v24 + 18) = a5;
  v24[10] = a9;
  v24[11] = a8;
  uint64_t v25 = (*(uint64_t (**)(void *, uint64_t, CFDictionaryRef, uint64_t))v24[5])(v24, v36, theDict, a11);
  if (!v25)
  {
    *a13 = v24;
    double v24 = 0;
  }
LABEL_41:
  CMPhotoDecompressionPluginDispose((CFTypeRef *)v24);
  return v25;
}

uint64_t HEIFItemDecoderCreate(uint64_t a1, const void *a2, const void *a3, const void *a4, uint64_t a5, char a6, unint64_t a7, unint64_t a8, long long *a9, size_t *a10, uint64_t *a11, void *a12, __CVBuffer **a13)
{
  CFAllocatorRef v19 = CFGetAllocator(*(CFTypeRef *)(a1 + 8));
  CFTypeRef v97 = 0;
  uint64_t v98 = 0;
  unint64_t v95 = 0;
  unint64_t v96 = 0;
  int v94 = 0;
  int v83 = *(unsigned __int8 *)(a5 + 112);
  uint64_t v88 = a5;
  unsigned int v20 = *(_DWORD *)(a5 + 104);
  CFRange value = 0;
  if (*(unsigned char *)(a1 + 49)) {
    uint64_t v21 = 2;
  }
  else {
    uint64_t v21 = 4;
  }
  if (*(unsigned char *)(a1 + 49)) {
    int v22 = 2;
  }
  else {
    int v22 = 64;
  }
  unsigned int v82 = v22;
  double v23 = (char *)malloc_type_calloc(1uLL, 0x3918uLL, 0x10600407F32F884uLL);
  if (!v23)
  {
    CFMutableDictionaryRef theDict = 0;
    goto LABEL_159;
  }
  char v81 = a6;
  CFMutableDictionaryRef theDict = CFDictionaryCreateMutable(v19, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!theDict) {
    goto LABEL_159;
  }
  *((void *)v23 + 1) = a1;
  if (a3) {
    CFTypeRef v25 = CFRetain(a3);
  }
  else {
    CFTypeRef v25 = 0;
  }
  *((void *)v23 + 5) = v25;
  uint64_t ImageGeometryFromPictureReader = CMPhotoPictureReaderGetImageGeometryFromPictureReader(v25, *(unsigned __int8 *)(*(void *)(a1 + 8) + 28), (unint64_t)(v23 + 176), (unint64_t)(v23 + 160));
  if (ImageGeometryFromPictureReader) {
    goto LABEL_161;
  }
  unsigned int v86 = v20;
  uint64_t v80 = v21;
  uint64_t ImageGeometryFromPictureReader = _copyColorInfoForItem(*(unsigned char **)(a1 + 8), *((const void **)v23 + 5), 0, v83, (CMVideoFormatDescriptionRef *)v23 + 3, *(unsigned __int8 *)(v88 + 128), (CFTypeRef *)v23 + 6, (void *)v23 + 7, (CFTypeRef *)v23 + 8, (CFTypeRef *)v23 + 9, (_DWORD *)v23 + 20, (_DWORD *)v23 + 21, 0);
  if (ImageGeometryFromPictureReader) {
    goto LABEL_161;
  }
  uint64_t ImageGeometryFromPictureReader = CMPhotoPictureReaderGetImageCodecTypeFromReader(*((const void **)v23 + 5), &v94);
  if (ImageGeometryFromPictureReader) {
    goto LABEL_161;
  }
  if (v94 == 1936484717)
  {
    char v27 = FigCFArrayContainsInt();
    char IsInternalBuild = FigDebugIsInternalBuild();
    if (!CMPhotoAllowExperimentalCodecsOverride(IsInternalBuild | v27)) {
      goto LABEL_160;
    }
  }
  if (!a2) {
    a2 = (const void *)*((void *)v23 + 5);
  }
  if (!CMPhotoPictureReaderCopyImageBitDepth(a2, (CFTypeRef *)&value) && value) {
    CFDictionaryAddValue(theDict, @"PixelInformation", value);
  }
  BOOL v92 = 0;
  int v29 = v94;
  if (v94 == 1635135537)
  {
    uint64_t ImageGeometryFromPictureReader = _copyMultilayerProperties((uint64_t)v19, *((void *)v23 + 5), 0, 0, 0, &v92);
    if (ImageGeometryFromPictureReader)
    {
LABEL_161:
      uint64_t v50 = ImageGeometryFromPictureReader;
      goto LABEL_149;
    }
    int v29 = v94;
  }
  CFAllocatorRef allocator = v19;
  int v30 = *(_DWORD *)(a1 + 44);
  char v31 = v30 == 1;
  if (!v30)
  {
    v31 |= *(unsigned char *)(a1 + 40) | v92;
    if (v29 == 1635135537)
    {
      v31 |= (*(void *)&CMVideoFormatDescriptionGetDimensions(*((CMVideoFormatDescriptionRef *)v23 + 3)) & 0x100000001) != 0;
      int v29 = v94;
    }
  }
  if (v29 == 1785750887)
  {
    char v91 = 0;
    uint64_t v99 = 0;
    v100[0] = 0;
    int ImageInformationFromJFIFByteStream = CMPhotoPictureReaderCopyByteStreamForFirstTile((uint64_t)a3, v100, &v99);
    if (!ImageInformationFromJFIFByteStream) {
      int ImageInformationFromJFIFByteStream = CMPhotoGetImageInformationFromJFIFByteStream((uint64_t)v100[0], v99, 0, 0, 0, &v91, 0, 0);
    }
    int v33 = ImageInformationFromJFIFByteStream;
    if (v100[0]) {
      CFRelease(v100[0]);
    }
    if (v33) {
      char v31 = 1;
    }
    else {
      v31 |= (v91 & 0xFE) == 194;
    }
  }
  CFTypeRef v34 = (const void **)MEMORY[0x1E4F1CFD0];
  if (v31) {
    CFDictionaryAddValue(theDict, @"PreferSoftwareCodec", (const void *)*MEMORY[0x1E4F1CFD0]);
  }
  if (*(_DWORD *)(a1 + 44) == 2) {
    CFDictionaryAddValue(theDict, @"RequireHardwareCodec", *v34);
  }
  if (CMPhotoPixelFormatIsPackedYUV(v86)) {
    CFDictionaryAddValue(theDict, @"AllowPackedBuffers", *v34);
  }
  if (*(unsigned char *)(a1 + 53) || v94 == 1635148593) {
    CFDictionaryAddValue(theDict, @"UseVTDecompression", *v34);
  }
  v23[208] = 0;
  if (a7 == 1 && a8 == 1)
  {
    CMPhotoCFDictionarySetBoolean(theDict, @"SyncDecode", 1);
    v23[208] = 1;
  }
  CMPhotoCFDictionarySetInt32(theDict, @"ThreadPriority", *(_DWORD *)(v88 + 108));
  v23[157] = a13 != 0;
  if (a13) {
    CFTypeRef v35 = _canvasItemDecodeCallback;
  }
  else {
    CFTypeRef v35 = _oneShotItemDecodeCallback;
  }
  uint64_t v36 = (CFTypeRef **)(v23 + 16);
  uint64_t ImageGeometryFromPictureReader = CMPhotoDecompressionPluginCreate(allocator, *(const void **)(a1 + 24), *(const void **)(a1 + 32), *(const void **)(a1 + 16), v94, *(const void **)(*(void *)(a1 + 8) + 16), *((void *)v23 + 3), *(void *)a1, 0, theDict, (uint64_t)v35, (uint64_t)v23, (void *)v23 + 2);
  if (ImageGeometryFromPictureReader) {
    goto LABEL_161;
  }
  if (a4)
  {
    uint64_t ImageGeometryFromPictureReader = CMPhotoPictureReaderGetImageGeometryFromPictureReader(a4, *(unsigned __int8 *)(*(void *)(a1 + 8) + 28), 0, (unint64_t)&v95);
    if (ImageGeometryFromPictureReader) {
      goto LABEL_161;
    }
    CFAllocatorRef v37 = CFGetAllocator(a4);
    uint64_t FigBaseObject = FigPictureReaderGetFigBaseObject();
    uint64_t v39 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v39) {
      uint64_t v40 = v39;
    }
    else {
      uint64_t v40 = 0;
    }
    unint64_t v41 = *(uint64_t (**)(uint64_t, void, CFAllocatorRef, CFTypeRef *))(v40 + 48);
    if (!v41)
    {
      uint64_t v50 = 4294954514;
      goto LABEL_149;
    }
    uint64_t ImageGeometryFromPictureReader = v41(FigBaseObject, *MEMORY[0x1E4F333D0], v37, &v97);
    if (ImageGeometryFromPictureReader) {
      goto LABEL_161;
    }
  }
  uint64_t ImageGeometryFromPictureReader = CMPhotoDecompressionPluginGetDecoderRestrictions(*((void *)v23 + 2), (uint64_t)v97, (uint64_t)(v23 + 92));
  if (ImageGeometryFromPictureReader) {
    goto LABEL_161;
  }
  int v42 = CMPhotoDecompressionPluginSupportsNativeTiling(*((void *)v23 + 2));
  v23[156] = v42;
  unint64_t v43 = *((void *)v23 + 21);
  if (v43 >= *((int *)v23 + 35))
  {
    unint64_t v44 = *((void *)v23 + 20);
    if (v44 >= *((int *)v23 + 34) && v43 <= *((int *)v23 + 37) && v44 <= *((int *)v23 + 36))
    {
      uint64_t v47 = v86;
      goto LABEL_76;
    }
  }
  if (v31 || *(_DWORD *)(a1 + 44))
  {
    if (v42)
    {
LABEL_160:
      uint64_t ImageGeometryFromPictureReader = FigSignalErrorAt();
      goto LABEL_161;
    }
    uint64_t v47 = v86;
    BOOL v48 = a13;
    goto LABEL_86;
  }
  LOBYTE(v99) = 0;
  v100[0] = 0;
  CMPhotoDecompressionPluginDispose(*v36);
  *uint64_t v36 = 0;
  CMPhotoCFDictionaryGetBooleanIfPresent(theDict, @"UseVTDecompression", &v99);
  CMPhotoCFDictionaryGetCFValueIfPresent(theDict, @"PixelInformation", v100);
  CFRelease(theDict);
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(allocator, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef theDict = Mutable;
  if (!Mutable)
  {
LABEL_159:
    uint64_t v50 = 4294950305;
    goto LABEL_149;
  }
  unsigned int v46 = *v34;
  CFDictionaryAddValue(Mutable, @"PreferSoftwareCodec", v46);
  if ((_BYTE)v99) {
    CFDictionaryAddValue(theDict, @"UseVTDecompression", v46);
  }
  if (v100[0]) {
    CFDictionaryAddValue(theDict, @"PixelInformation", v100[0]);
  }
  uint64_t v47 = v86;
  if (v23[208]) {
    CMPhotoCFDictionarySetBoolean(theDict, @"SyncDecode", 1);
  }
  uint64_t ImageGeometryFromPictureReader = CMPhotoDecompressionPluginCreate(allocator, *(const void **)(a1 + 24), *(const void **)(a1 + 32), *(const void **)(a1 + 16), v94, *(const void **)(*(void *)(a1 + 8) + 16), *((void *)v23 + 3), *(void *)a1, 0, theDict, (uint64_t)v35, (uint64_t)v23, (void *)v23 + 2);
  if (ImageGeometryFromPictureReader) {
    goto LABEL_161;
  }
  uint64_t ImageGeometryFromPictureReader = CMPhotoDecompressionPluginGetDecoderRestrictions((uint64_t)*v36, (uint64_t)v97, (uint64_t)(v23 + 92));
  if (ImageGeometryFromPictureReader) {
    goto LABEL_161;
  }
  int v42 = v23[156];
LABEL_76:
  BOOL v48 = a13;
  if (!v42)
  {
LABEL_86:
    if (v47) {
      *((_DWORD *)v23 + 38) = v47;
    }
    else {
      *((_DWORD *)v23 + 38) = 875704422;
    }
    goto LABEL_89;
  }
  uint64_t ImageGeometryFromPictureReader = CMPhotoDecompressionPluginCopyPixelBufferAttributes(*((void *)v23 + 2));
  if (ImageGeometryFromPictureReader) {
    goto LABEL_161;
  }
  if (v94 == 1785750887)
  {
    int v49 = CMPhotoDecompressionContainerJFIF_pixelFormatToAppleJPEGFormat(v47, 0, 0);
    if (v83 || v47 && !v49) {
      *((_DWORD *)v23 + 38) = v47;
    }
  }
LABEL_89:
  if (!v23[157])
  {
    unint64_t v58 = 0;
    goto LABEL_145;
  }
  int v51 = (v23[156] & v81);
  if (*v48)
  {
    double PixelBufferSize = CMPhotoGetPixelBufferSize(*v48);
    if (a11)
    {
      unint64_t v54 = vcvtad_u64_f64(v53);
      BOOL v56 = *a11 <= vcvtad_u64_f64(PixelBufferSize) && a11[1] <= v54;
      v51 &= v56;
    }
    CMPhotoAddColorInformationToPixelBufferAccordingToFormat(*((CFTypeRef *)v23 + 6), *((const void **)v23 + 7), *((const void **)v23 + 8), *((const void **)v23 + 9), *v48);
    CMPhotoAddChromaLocationToPixelBufferAccordingToFormat(*((_DWORD *)v23 + 20), *((_DWORD *)v23 + 21), *v48);
    CMPhotoAddHDRMetadataToPixelBufferFromFormatDescription(*((const opaqueCMFormatDescription **)v23 + 3), *v48);
    BOOL canDecodeTilesOrLayersIntoCanvas = _canDecodeTilesOrLayersIntoCanvas(*v48, *((void *)v23 + 20), *((void *)v23 + 21), v95, v96, a7, a8, *((_DWORD *)v23 + 38), (int *)v23 + 23, *((const __CFDictionary **)v23 + 4), v94);
    unint64_t v58 = 0;
  }
  else
  {
    uint64_t v59 = *(void *)a1;
    if (!*(void *)a1) {
      uint64_t v59 = *(void *)(a1 + 8);
    }
    int v60 = *(const void **)(a1 + 24);
    int v61 = *(unsigned __int8 *)(a1 + 49);
    if (!v47) {
      uint64_t v47 = *((unsigned int *)v23 + 38);
    }
    v89[0] = 0;
    v89[1] = 0;
    long long v90 = *a9;
    if (v51) {
      uInt v62 = (int *)(v23 + 92);
    }
    else {
      uInt v62 = 0;
    }
    if (v51) {
      CFDictionaryRef v63 = (const __CFDictionary *)*((void *)v23 + 4);
    }
    else {
      CFDictionaryRef v63 = 0;
    }
    uint64_t ImageGeometryFromPictureReader = _createPixelBuffer(v60, v59, v61, v47, *a11, a11[1], *a10, a10[1], v89, v62, v63, &v98);
    if (ImageGeometryFromPictureReader) {
      goto LABEL_161;
    }
    unint64_t v58 = v98;
    CMPhotoAddColorInformationToPixelBufferAccordingToFormat(*((CFTypeRef *)v23 + 6), *((const void **)v23 + 7), *((const void **)v23 + 8), *((const void **)v23 + 9), v98);
    CMPhotoAddChromaLocationToPixelBufferAccordingToFormat(*((_DWORD *)v23 + 20), *((_DWORD *)v23 + 21), v58);
    CMPhotoAddHDRMetadataToPixelBufferFromFormatDescription(*((const opaqueCMFormatDescription **)v23 + 3), v58);
    BOOL canDecodeTilesOrLayersIntoCanvas = _canDecodeTilesOrLayersIntoCanvas(v58, *((void *)v23 + 20), *((void *)v23 + 21), v95, v96, a7, a8, *((_DWORD *)v23 + 38), (int *)v23 + 23, *((const __CFDictionary **)v23 + 4), v94);
  }
  int v64 = canDecodeTilesOrLayersIntoCanvas & v51;
  v23[158] = canDecodeTilesOrLayersIntoCanvas & v51;
  CFAllocatorRef v65 = allocator;
  if (v94 == 1936484717
    && *((_DWORD *)v23 + 38) == *(_DWORD *)(v88 + 104)
    && *(_OWORD *)(v88 + 8) == 0
    && *(_OWORD *)(v88 + 24) == 0)
  {
    unsigned int v66 = v82;
    if (v64) {
      goto LABEL_138;
    }
    goto LABEL_160;
  }
  unsigned int v66 = v82;
  if (!v64)
  {
    if (*(unsigned char *)(v88 + 114))
    {
      unsigned int v66 = 2;
    }
    else
    {
      if (_lowMemoryConcurrentDecodeOverride_onceToken != -1) {
        dispatch_once(&_lowMemoryConcurrentDecodeOverride_onceToken, &__block_literal_global_15);
      }
      if (_getAvailableFreeMemory_onceToken != -1) {
        dispatch_once(&_getAvailableFreeMemory_onceToken, &__block_literal_global_18);
      }
      if (_getAvailableFreeMemory_sSyscallAllowed) {
        unint64_t v67 = MEMORY[0x1AD110BA0]();
      }
      else {
        unint64_t v67 = 0;
      }
      uint64_t v68 = *((void *)v23 + 20);
      uint64_t v69 = *((void *)v23 + 21);
      uint64_t BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(*((_DWORD *)v23 + 38));
      if (v67)
      {
        unint64_t v71 = a7 * a8;
        if (a7 * a8 >= v80) {
          unint64_t v71 = v80;
        }
        if (v68 * v71 * v69 * BytesPerPixelForPixelFormat <= v67 >> 2) {
          unsigned int v66 = v80;
        }
        else {
          unsigned int v66 = 2;
        }
      }
      else
      {
        unsigned int v66 = v80;
      }
      CFAllocatorRef v65 = allocator;
    }
  }
LABEL_138:
  *((_DWORD *)v23 + 53) = v66;
  *((_DWORD *)v23 + 3644) = 0;
  CFIndex v72 = v66;
  dispatch_semaphore_t v73 = dispatch_semaphore_create(v66);
  *((void *)v23 + 28) = v73;
  if (!v73) {
    goto LABEL_159;
  }
  dispatch_semaphore_t v74 = dispatch_semaphore_create(0);
  *((void *)v23 + 29) = v74;
  if (!v74) {
    goto LABEL_159;
  }
  CFMutableArrayRef v75 = CFArrayCreateMutable(v65, v72, 0);
  *((void *)v23 + 1823) = v75;
  if (!v75) {
    goto LABEL_159;
  }
  CFMutableArrayRef v76 = CFArrayCreateMutable(v65, 0, 0);
  *((void *)v23 + 1824) = v76;
  if (!v76) {
    goto LABEL_159;
  }
  CFMutableSetRef v77 = CFSetCreateMutable(v65, v72, 0);
  *((void *)v23 + 1825) = v77;
  if (!v77) {
    goto LABEL_159;
  }
  uint64_t v78 = v23 + 240;
  do
  {
    CFArrayAppendValue(*((CFMutableArrayRef *)v23 + 1823), v78);
    v78 += 224;
    --v72;
  }
  while (v72);
LABEL_145:
  v23[88] = CMPhotoDecompressionPluginIsHardwareSession(*((void *)v23 + 2)) == 0;
  *double v23 = 1;
  *a12 = v23;
  if (v48 && !*v48)
  {
    double v23 = 0;
    uint64_t v50 = 0;
    *BOOL v48 = v58;
    uint64_t v98 = 0;
  }
  else
  {
    double v23 = 0;
    uint64_t v50 = 0;
  }
LABEL_149:
  if (value) {
    CFRelease(value);
  }
  if (theDict) {
    CFRelease(theDict);
  }
  if (v98) {
    CFRelease(v98);
  }
  HEIFItemDecoderRelease((uint64_t)v23);
  if (v97) {
    CFRelease(v97);
  }
  return v50;
}

void HEIFItemDecoderRelease(uint64_t a1)
{
  if (a1)
  {
    if (*(unsigned char *)a1) {
      HEIFItemDecoderWaitForFinishAndReturnStatus(a1, 0, 0, 0);
    }
    CMPhotoDecompressionPluginDispose(*(CFTypeRef **)(a1 + 16));
    CFTypeID v2 = *(const void **)(a1 + 24);
    if (v2) {
      CFRelease(v2);
    }
    io_registry_entry_t v3 = *(const void **)(a1 + 32);
    if (v3) {
      CFRelease(v3);
    }
    CFTypeRef v4 = *(const void **)(a1 + 40);
    if (v4) {
      CFRelease(v4);
    }
    pthread_mutexattr_t v5 = *(const void **)(a1 + 48);
    if (v5) {
      CFRelease(v5);
    }
    uint64_t v6 = *(const void **)(a1 + 72);
    if (v6) {
      CFRelease(v6);
    }
    uint64_t v7 = *(NSObject **)(a1 + 224);
    if (v7) {
      dispatch_release(v7);
    }
    uint64_t v8 = *(NSObject **)(a1 + 232);
    if (v8) {
      dispatch_release(v8);
    }
    uint64_t v9 = *(const void **)(a1 + 14584);
    if (v9) {
      CFRelease(v9);
    }
    FigCFArrayApplyFunction();
    uint64_t v10 = *(const void **)(a1 + 14592);
    if (v10) {
      CFRelease(v10);
    }
    uint64_t v11 = *(const void **)(a1 + 14600);
    if (v11) {
      CFRelease(v11);
    }
    free((void *)a1);
  }
}

void CMPhotoDecompressionPluginDispose(CFTypeRef *a1)
{
  if (a1)
  {
    CFTypeID v2 = (void (**)(CFTypeRef *))a1[5];
    if (v2) {
      v2[1](a1);
    }
    if (*a1) {
      CFRelease(*a1);
    }
    CFTypeRef v3 = a1[1];
    if (v3) {
      CFRelease(v3);
    }
    CFTypeRef v4 = a1[2];
    if (v4) {
      CFRelease(v4);
    }
    CFTypeRef v5 = a1[3];
    if (v5) {
      CFRelease(v5);
    }
    CFTypeRef v6 = a1[4];
    if (v6) {
      CFRelease(v6);
    }
    free(a1);
  }
}

uint64_t _createBufferAndOptionsForTileDecoding(const void *a1, uint64_t a2, int a3, unint64_t a4, unint64_t a5, uint64_t a6, int *a7, const __CFDictionary *a8, void *a9, __CFDictionary **a10)
{
  CFRange value = 0;
  CFAllocatorRef v18 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v18, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return 4294950305;
  }
  unsigned int v20 = Mutable;
  v27[0] = 0;
  v27[1] = 0;
  v27[2] = a4;
  v27[3] = a5;
  uint64_t v21 = _createPixelBuffer(a1, a2, a3, a6, a4, a5, a4, a5, v27, a7, a8, &value);
  int v22 = value;
  if (v21)
  {
    uint64_t v25 = v21;
    goto LABEL_10;
  }
  CFDictionaryAddValue(v20, @"CanvasPixelBuffer", value);
  v29.size.double width = (double)a4;
  v29.size.double height = (double)a5;
  v29.origin.x = 0.0;
  v29.origin.y = 0.0;
  CFDictionaryRef DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v29);
  if (!DictionaryRepresentation)
  {
    uint64_t v25 = 4294950305;
LABEL_10:
    if (v22) {
      CFRelease(v22);
    }
    goto LABEL_5;
  }
  double v24 = DictionaryRepresentation;
  CFDictionaryAddValue(v20, @"CanvasOrigin", DictionaryRepresentation);
  uint64_t v25 = 0;
  *a9 = v22;
  *a10 = v20;
  unsigned int v20 = v24;
LABEL_5:
  CFRelease(v20);
  return v25;
}

uint64_t _createPixelBuffer(const void *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, size_t a7, size_t a8, unint64_t *a9, int *a10, const __CFDictionary *a11, void *a12)
{
  CVPixelBufferRef v52 = 0;
  long long v50 = 0u;
  long long v51 = 0u;
  CFAllocatorRef v18 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  if (*(_OWORD *)a9 == 0 && *((_OWORD *)a9 + 1) == 0)
  {
    *a9 = 0;
    a9[1] = 0;
    a9[2] = a7;
    a9[3] = a8;
  }
  __int16 v49 = 0;
  CMPhotoPixelBufferAttributesGetExtendedPixelsStruct(a11, &v50);
  if ((void)v50 || (void)v51)
  {
    uint64_t IsSubsampled = FigSignalErrorAt();
    goto LABEL_53;
  }
  uint64_t IsSubsampled = CMPhotoPixelFormatIsSubsampled(a4, (unsigned char *)&v49 + 1, &v49, 0, 0);
  if (IsSubsampled)
  {
LABEL_53:
    uint64_t v33 = IsSubsampled;
    goto LABEL_54;
  }
  OSType v46 = a4;
  int v20 = a3;
  size_t v45 = a1;
  if (HIBYTE(v49)) {
    uint64_t v21 = 2;
  }
  else {
    uint64_t v21 = 1;
  }
  if ((_BYTE)v49) {
    uint64_t v22 = 2;
  }
  else {
    uint64_t v22 = 1;
  }
  unint64_t v23 = *((void *)&v50 + 1) + a5;
  unint64_t v24 = *((void *)&v51 + 1) + a6;
  if (a10)
  {
    uint64_t v25 = *a10;
    uint64_t v48 = 0;
    CMPhotoCFDictionaryGetSizeIfPresent(a11, (const void *)*MEMORY[0x1E4F24C98], &v48);
    if (v48) {
      uint64_t v25 = CMPhotoLeastCommonMultiple(v25, v48);
    }
    int v26 = a10[2];
    if (!v26) {
      int v26 = *a10;
    }
    unint64_t v27 = v23 + v26 + ~((v23 - 1) % v26);
    unint64_t v28 = v27 + v21 + ~((v27 - 1) & (v21 - 1));
    if (v28 <= a10[7]) {
      unint64_t v23 = a10[7];
    }
    else {
      unint64_t v23 = v28;
    }
    int v29 = a10[3];
    if (!v29) {
      int v29 = a10[1];
    }
    unint64_t v30 = v24 + v29 + ~((v24 - 1) % v29);
    unint64_t v31 = v30 + v22 + ~((v30 - 1) & (v22 - 1));
    if (v31 <= a10[5]) {
      unint64_t v24 = a10[5];
    }
    else {
      unint64_t v24 = v31;
    }
  }
  else
  {
    uint64_t v25 = 0;
  }
  if (!*a9 && !a9[1])
  {
    unint64_t v37 = a9[2];
    unint64_t v38 = a9[3];
    uint64_t v39 = *MEMORY[0x1E4F1CF80];
    uint64_t MutableCopy = FigCFDictionaryCreateMutableCopy();
    CFDictionaryRef v35 = (const __CFDictionary *)MutableCopy;
    if (MutableCopy)
    {
      uint64_t v41 = CMPhotoCFDictionarySetSize(MutableCopy, *MEMORY[0x1E4F24CE8], v23 + ~((v37 - 1) % v23));
      if (!v41)
      {
        uint64_t v41 = CMPhotoCFDictionarySetSize(v35, *MEMORY[0x1E4F24CD0], v24 + ~((v38 - 1) % v24));
        if (!v41)
        {
          size_t v42 = a9[2];
          size_t v43 = a9[3];
          if (v20) {
            uint64_t v44 = CMPhotoCreateCVPixelBufferNotBackedByIOSurface(v39, v46, v42, v43, v23, v24, v25, (uint64_t)v35, &v52);
          }
          else {
            uint64_t v44 = CMPhotoSurfacePoolCreatePixelBuffer(v45, v46, v42, v43, 1, v23, v24, 0, v25, v35, &v52);
          }
          uint64_t v33 = v44;
          CFAllocatorRef v18 = (_DWORD *)MEMORY[0x1E4F1EBA8];
          if (!v44) {
            goto LABEL_36;
          }
          goto LABEL_37;
        }
      }
      uint64_t v33 = v41;
    }
    else
    {
      uint64_t v33 = 4294950305;
    }
    CFAllocatorRef v18 = (_DWORD *)MEMORY[0x1E4F1EBA8];
    goto LABEL_37;
  }
  if (v20) {
    uint64_t v32 = CMPhotoCreateCVPixelBufferNotBackedByIOSurface(*MEMORY[0x1E4F1CF80], v46, a7, a8, v23, v24, v25, (uint64_t)a11, &v52);
  }
  else {
    uint64_t v32 = CMPhotoSurfacePoolCreatePixelBuffer(v45, v46, a7, a8, 1, v23, v24, 0, v25, a11, &v52);
  }
  uint64_t v33 = v32;
  CFAllocatorRef v18 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (v32)
  {
LABEL_54:
    CFDictionaryRef v35 = 0;
    goto LABEL_37;
  }
  uint64_t v34 = CMPhotoSetPixelBufferCLAP(v52, *a9, a9[1], a9[2], a9[3], 0, 1);
  CFDictionaryRef v35 = 0;
  if (!v34)
  {
LABEL_36:
    uint64_t v33 = 0;
    *a12 = v52;
    CVPixelBufferRef v52 = 0;
    goto LABEL_37;
  }
  uint64_t v33 = v34;
LABEL_37:
  if (*v18 == 1) {
    kdebug_trace();
  }
  if (v35) {
    CFRelease(v35);
  }
  if (v52) {
    CFRelease(v52);
  }
  return v33;
}

CFDictionaryRef CMPhotoPixelBufferAttributesGetExtendedPixelsStruct(const __CFDictionary *result, void *a2)
{
  if (a2) {
    return (const __CFDictionary *)CMPhotoPixelBufferAttributesGetExtendedPixels(result, a2, a2 + 1, a2 + 2, a2 + 3);
  }
  return result;
}

uint64_t CMPhotoPixelFormatIsPacked(uint64_t a1)
{
  uint64_t result = 1;
  if (a1 != 1882468912 && a1 != 1885745712)
  {
    if (CMPhotoGetUncompressedPixelFormatFromCompressedPixelFormat(a1) == 1815162994) {
      return 1;
    }
    uint64_t result = 1;
    if ((int)a1 <= 1734504495)
    {
      if (a1 == 1650946096) {
        return result;
      }
      int v3 = 1650946098;
      goto LABEL_11;
    }
    if (a1 != 1734504496 && a1 != 1735553072)
    {
      int v3 = 1919381552;
LABEL_11:
      if (a1 != v3) {
        return 0;
      }
    }
  }
  return result;
}

BOOL CMPhotoPixelFormatIsCompressed(int a1)
{
  return CMPhotoPixelFormatIsAGXCompressed(a1) || CMPhotoPixelFormatIsLossyCompressed(a1);
}

void VTTileDecompressionPluginClass_dispose(uint64_t a1)
{
  if (a1)
  {
    CFTypeID v2 = *(unsigned __int8 **)(a1 + 64);
    if (v2)
    {
      int v3 = *((void *)v2 + 4);
      if (v3)
      {
        dispatch_barrier_sync_f(v3, 0, (dispatch_function_t)_dispatch_empty);
        CFTypeRef v4 = *((void *)v2 + 4);
        if (v4) {
          dispatch_release(v4);
        }
      }
      CFTypeRef v5 = (const void *)*((void *)v2 + 1);
      if (v5)
      {
        if (!*(void *)(a1 + 80) && ((int v6 = *(_DWORD *)(a1 + 72), v6 == 1635135537) || v6 == 1902212657))
        {
          VTTileDecompressionSessionInvalidate();
        }
        else
        {
          VTSessionSetProperty(v5, (CFStringRef)*MEMORY[0x1E4F44C40], (CFTypeRef)*MEMORY[0x1E4F1CFD0]);
          CMPhotoCodecSessionPoolRecycleSession(*(void *)(a1 + 24), *((CFTypeRef *)v2 + 1), *v2);
        }
        uint64_t v7 = (const void *)*((void *)v2 + 1);
        if (v7)
        {
          CFRelease(v7);
          *((void *)v2 + 1) = 0;
        }
      }
      uint64_t v8 = (const void *)*((void *)v2 + 2);
      if (v8) {
        CFRelease(v8);
      }
      free(v2);
      *(void *)(a1 + 64) = 0;
    }
  }
}

uint64_t CMPhotoCodecSessionPoolRecycleSession(uint64_t a1, CFTypeRef cf, int a3)
{
  uint64_t v5 = a1;
  if (!a1)
  {
    pthread_once(&CMPhotoCodecSessionPoolGetDefault_onceToken, _once_setDefaultPool);
    uint64_t v5 = defaultPool;
    if (!defaultPool) {
      return 4294950305;
    }
  }
  if (!cf) {
    return 0;
  }
  CFTypeID v6 = CFGetTypeID(cf);
  if (v6 == VTCompressionSessionGetTypeID() || (CFTypeID v7 = CFGetTypeID(cf), v7 == VTTileCompressionSessionGetTypeID()))
  {
    uint64_t v8 = v5;
    int v9 = 0;
LABEL_7:
    return CMPhotoCodecSessionPool_RecycleSession(v8, v9, cf, a3);
  }
  CFTypeID v11 = CFGetTypeID(cf);
  if (v11 == VTDecompressionSessionGetTypeID() || (CFTypeID v12 = CFGetTypeID(cf), v12 == VTTileDecompressionSessionGetTypeID()))
  {
    uint64_t v8 = v5;
    int v9 = 1;
    goto LABEL_7;
  }
  return FigSignalErrorAt();
}

uint64_t CMPhotoCodecSessionPoolGetDefault()
{
  return defaultPool;
}

uint64_t CMPhotoCodecSessionPool_RecycleSession(uint64_t a1, int a2, const void *a3, int a4)
{
  if (a2) {
    CFTypeID v7 = (CFAllocatorRef *)(a1 + 88);
  }
  else {
    CFTypeID v7 = (CFAllocatorRef *)(a1 + 48);
  }
  uint64_t v8 = 40;
  if (!a2) {
    uint64_t v8 = 32;
  }
  unint64_t v9 = *(void *)(a1 + v8);
  uint64_t v10 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 24));
  if (v10) {
    return v10;
  }
  CFMutableArrayRef v28 = 0;
  CFArrayRef Value = CFDictionaryGetValue(v7[3], a3);
  if (!Value)
  {
    uint64_t IdleSessionSlots = FigSignalErrorAt();
    goto LABEL_34;
  }
  CFTypeID v12 = Value;
  int64_t v13 = *(void *)(a1 + 152);
  Value[1] = 0;
  Value[2] = 0;
  *((unsigned char *)Value + 48) = 1;
  Value[7] = dispatch_time(0, v13);
  if (a4 || *((unsigned char *)v12 + 49))
  {
    CodecSessionPool_DestroyGatewayForSession((uint64_t)v7, a3);
    v31.length = CFArrayGetCount(v7[1]);
    v31.location = 0;
    FirstIndexOfCFArrayRef Value = CFArrayGetFirstIndexOfValue(v7[1], v31, a3);
    CFArrayRemoveValueAtIndex(v7[1], FirstIndexOfValue);
    goto LABEL_11;
  }
  uint64_t IdleSessionSlots = CodecSessionPool_GetIdleSessionSlots(v7, (const void *)v12[4], 1, &v28);
  if (IdleSessionSlots)
  {
LABEL_34:
    uint64_t v24 = IdleSessionSlots;
    goto LABEL_28;
  }
  CFArrayAppendValue(v28, a3);
LABEL_11:
  CFIndex Count = CFArrayGetCount(v7[4]);
  CFIndex v16 = CFArrayGetCount(v7[1]);
  if (Count >= 1)
  {
    unint64_t v17 = v16;
    for (CFIndex i = 0; i != Count; ++i)
    {
      unsigned int ValueAtIndex = CFArrayGetValueAtIndex(v7[4], i);
      CFArrayRef v20 = (const __CFArray *)CFDictionaryGetValue(v7[2], *(const void **)ValueAtIndex);
      if (v20)
      {
        CFArrayRef v21 = v20;
        if (CFArrayGetCount(v20) > 0)
        {
          uint64_t v25 = CFArrayGetValueAtIndex(v21, 0);
          CFDictionaryGetValue(v7[3], v25);
          goto LABEL_26;
        }
      }
    }
    if (v17 >= v9)
    {
      uint64_t context = 0;
      CFArrayRef theArray = 0;
      CFDictionaryApplyFunction(v7[2], (CFDictionaryApplierFunction)CodecSessionPool_PurgeIdleSessionFromLargestGroupApplier, &context);
      if (theArray)
      {
        if (context >= 1)
        {
          uint64_t v22 = CFArrayGetValueAtIndex(theArray, 0);
          CodecSessionPool_DestroyGatewayForSession((uint64_t)v7, v22);
          v32.length = CFArrayGetCount(v7[1]);
          v32.location = 0;
          CFIndex v23 = CFArrayGetFirstIndexOfValue(v7[1], v32, v22);
          CFArrayRemoveValueAtIndex(v7[1], v23);
        }
      }
    }
    unsigned int ValueAtIndex = CFArrayGetValueAtIndex(v7[4], 0);
LABEL_26:
    dispatch_semaphore_signal(*((dispatch_semaphore_t *)ValueAtIndex + 1));
    CodecSessionPool_DequeueWaitingClient((uint64_t)v7, ValueAtIndex);
    goto LABEL_27;
  }
  *(void *)(a1 + 160) = dispatch_time(0, 0);
  if (*(void *)(a1 + 176))
  {
    objc_msgSend(*(id *)(a1 + 176), "takeAssertionUntilTime:forContext:", dispatch_time(0, *(void *)(a1 + 152) + 5000000000), a1);
    [*(id *)(a1 + 176) registerBackgroundNotificationHandlerForContext:a1 handler:*(void *)(a1 + 184)];
  }
  if (!*(unsigned char *)(a1 + 128))
  {
LABEL_27:
    uint64_t v24 = 0;
    goto LABEL_28;
  }
  dispatch_resume(*(dispatch_object_t *)(a1 + 136));
  uint64_t v24 = 0;
  *(unsigned char *)(a1 + 128) = 0;
LABEL_28:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 24));
  return v24;
}

uint64_t CodecSessionPool_GetIdleSessionSlots(CFAllocatorRef *a1, const void *a2, int a3, CFMutableArrayRef *a4)
{
  CFArrayRef Value = (__CFArray *)CFDictionaryGetValue(a1[2], a2);
  CFMutableArrayRef v9 = Value;
  if (!a3 || Value) {
    goto LABEL_5;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(*a1, 0, 0);
  if (Mutable)
  {
    CFMutableArrayRef v9 = Mutable;
    CFDictionarySetValue(a1[2], a2, Mutable);
    CFRelease(v9);
LABEL_5:
    uint64_t result = 0;
    *a4 = v9;
    return result;
  }
  return 4294950305;
}

uint64_t VTTileDecompressionPluginClass_create(uint64_t a1, const void *a2, const __CFDictionary *a3, uint64_t a4)
{
  keys[2] = *(void **)MEMORY[0x1E4F143B8];
  char DecodeHighSpeedDefault = CMPhotoGetDecodeHighSpeedDefault();
  __int16 v31 = 0;
  int v30 = 0;
  uint64_t v8 = 4294950306;
  if (!a1 || !a2 || !a4) {
    return v8;
  }
  if (*(_DWORD *)(a1 + 72) == 1936484717) {
    return 4294950298;
  }
  CFMutableArrayRef v9 = (char *)malloc_type_calloc(1uLL, 0x30uLL, 0x10E2040A0F51DDDuLL);
  if (!v9) {
    return 4294950305;
  }
  uint64_t v10 = v9;
  v9[41] = 0;
  CFTypeID v11 = v9 + 41;
  v9[24] = 1;
  *((void *)v9 + 2) = CFRetain(a2);
  if (a3
    && (CMPhotoCFDictionaryGetBooleanIfPresent(a3, @"SyncDecode", v10 + 25),
        CMPhotoCFDictionaryGetBooleanIfPresent(a3, @"AllowPackedBuffers", v11),
        CMPhotoCFDictionaryGetBooleanIfPresent(a3, @"ForceHighSpeedDecode", &DecodeHighSpeedDefault),
        CMPhotoCFDictionaryGetBooleanIfPresent(a3, @"PreferSoftwareCodec", (unsigned char *)&v31 + 1),
        CMPhotoCFDictionaryGetBooleanIfPresent(a3, @"RequireHardwareCodec", &v31),
        CMPhotoCFDictionaryGetInt32IfPresent(a3, @"ThreadPriority", &v30),
        HIBYTE(v31)))
  {
    int v12 = 0;
    LOBYTE(v31) = 0;
  }
  else
  {
    int v12 = 1;
    if ((_BYTE)v31)
    {
      int64_t v13 = (void **)MEMORY[0x1E4F455E8];
      goto LABEL_12;
    }
  }
  int64_t v13 = (void **)MEMORY[0x1E4F455D0];
LABEL_12:
  int v14 = (void *)*MEMORY[0x1E4F455C8];
  keys[0] = *v13;
  keys[1] = v14;
  uint64_t v15 = (void *)*MEMORY[0x1E4F1CFD0];
  if (v12) {
    CFIndex v16 = (void *)*MEMORY[0x1E4F1CFD0];
  }
  else {
    CFIndex v16 = (void *)*MEMORY[0x1E4F1CFC8];
  }
  values[0] = v16;
  values[1] = v15;
  CFDictionaryRef v17 = CFDictionaryCreate(*(CFAllocatorRef *)a1, (const void **)keys, (const void **)values, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v17)
  {
    *uint64_t v10 = 1;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v28 = (unint64_t)v10;
    VTTileDecompressionPluginClass_dispose((uint64_t)&v24);
    return 4294950305;
  }
  CFDictionaryRef v18 = v17;
  uint64_t v19 = *(void *)(a1 + 80);
  if (!v19)
  {
    int v23 = *(_DWORD *)(a1 + 72);
    if (v23 == 1635135537 || v23 == 1902212657)
    {
      uint64_t DecompressionSession = VTTileDecompressionSessionCreate();
      if (DecompressionSession) {
        goto LABEL_26;
      }
LABEL_18:
      if (v10[24] || v10[25] || (uint64_t v21 = FigDispatchQueueCreateWithPriority(), (*((void *)v10 + 4) = v21) != 0))
      {
        v10[40] = 1;
        *(void *)(a1 + 64) = v10;
        CFRelease(v18);
        return 0;
      }
      uint64_t v8 = 4294950305;
      goto LABEL_27;
    }
  }
  uint64_t DecompressionSession = CMPhotoCodecSessionPoolCreateDecompressionSession(*(CFTypeRef *)(a1 + 24), 1u, v19, (const opaqueCMFormatDescription *)a2, v17, (uint64_t)VTTileDecompressionPluginClass_VideoToolbox_callback, a1, (void *)v10 + 1, 0);
  if (!DecompressionSession) {
    goto LABEL_18;
  }
LABEL_26:
  uint64_t v8 = DecompressionSession;
LABEL_27:
  CFRelease(v18);
  *uint64_t v10 = 1;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v28 = (unint64_t)v10;
  VTTileDecompressionPluginClass_dispose((uint64_t)&v24);
  if ((v8 | 2) == 0x44E) {
    return 4294951826;
  }
  return v8;
}

uint64_t VTDecompressionPluginClass_supportsNativeTiling(uint64_t result)
{
  if (result) {
    return *(unsigned __int8 *)(*(void *)(result + 64) + 40);
  }
  return result;
}

uint64_t CMPhotoIsTileDecoderAvailable(int a1)
{
  switch(a1)
  {
    case 1635135537:
      if (CMPhotoIsTileDecoderAvailable_onceTokenAV1 != -1) {
        dispatch_once(&CMPhotoIsTileDecoderAvailable_onceTokenAV1, &__block_literal_global_58);
      }
      return sTileDecodersAvailable_2;
    case 1752589105:
      if (CMPhotoIsTileDecoderAvailable_onceTokenHEVC != -1) {
        dispatch_once(&CMPhotoIsTileDecoderAvailable_onceTokenHEVC, &__block_literal_global_55);
      }
      return sTileDecodersAvailable_1;
    case 1635148593:
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = *(void *)"";
      block[2] = __CMPhotoIsTileDecoderAvailable_block_invoke;
      block[3] = &__block_descriptor_tmp_52;
      int v3 = 1635148593;
      if (CMPhotoIsTileDecoderAvailable_onceTokenAVC != -1) {
        dispatch_once(&CMPhotoIsTileDecoderAvailable_onceTokenAVC, block);
      }
      return sTileDecodersAvailable_0;
    default:
      return 0;
  }
}

uint64_t CMPhotoDecompressionPluginSupportsNativeTiling(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = v1 ? *(void *)(a1 + 40) : 0;
  if (!*(void *)(v2 + 16)) {
    return 0;
  }
  if (v1) {
    uint64_t v3 = *(void *)(a1 + 40);
  }
  else {
    uint64_t v3 = 0;
  }
  return (*(uint64_t (**)(void))(v3 + 16))();
}

uint64_t CMPhotoDecompressionPluginGetDecoderRestrictions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 4294950306;
  if (!a1 || !a3) {
    return v3;
  }
  uint64_t v4 = *(void *)(a1 + 40);
  if (a2)
  {
    uint64_t v5 = v4 ? *(void *)(a1 + 40) : 0;
    if (*(void *)(v5 + 48))
    {
      if (v4) {
        uint64_t v6 = *(void *)(a1 + 40);
      }
      else {
        uint64_t v6 = 0;
      }
      return (*(uint64_t (**)(void))(v6 + 48))();
    }
  }
  if (v4) {
    uint64_t v7 = *(void *)(a1 + 40);
  }
  else {
    uint64_t v7 = 0;
  }
  if (!*(void *)(v7 + 40))
  {
    uint64_t v3 = 0;
    *(_DWORD *)(a3 + 56) = 0x7FFFFFFF;
    *(_OWORD *)(a3 + 16) = xmmword_1AB9E3050;
    *(_OWORD *)(a3 + 32) = xmmword_1AB9E3060;
    *(void *)(a3 + 48) = 0x7FFFFFFF00000001;
    *(void *)a3 = 0x1000000010;
    return v3;
  }
  if (v4) {
    uint64_t v8 = *(void *)(a1 + 40);
  }
  else {
    uint64_t v8 = 0;
  }
  return (*(uint64_t (**)(void))(v8 + 40))();
}

uint64_t VTDecompressionPluginClass_isHardwareSession(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 64);
  CFTypeRef propertyValueOut = 0;
  if (VTSessionCopyProperty(*(VTSessionRef *)(v1 + 8), (CFStringRef)*MEMORY[0x1E4F44CF0], *(CFAllocatorRef *)a1, &propertyValueOut))
  {
    uint64_t v2 = 0;
  }
  else
  {
    uint64_t v2 = FigCFEqual();
  }
  if (propertyValueOut) {
    CFRelease(propertyValueOut);
  }
  return v2;
}

uint64_t CMPhotoDecompressionPluginIsHardwareSession(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = v1 ? *(void *)(a1 + 40) : 0;
  if (!*(void *)(v2 + 56)) {
    return 0;
  }
  if (v1) {
    uint64_t v3 = *(void *)(a1 + 40);
  }
  else {
    uint64_t v3 = 0;
  }
  return (*(uint64_t (**)(void))(v3 + 56))();
}

uint64_t CMPhotoDeviceSupportsTileDecodingToCanvas()
{
  return sDeviceSupportsTileDecodingToCanvas;
}

uint64_t CMPhotoDecompressionContainerGetImageGeometryForIndex(void *a1, const __CFNumber *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return CMPhotoDecompressionContainerGetImageGeometryForIndexWithOptions(a1, a2, 0, a3, a4, a5);
}

uint64_t CMPhotoDecompressionContainerCopyHEIFItemPropertiesForIndexWithOptions(void *a1, const __CFNumber *a2, const __CFDictionary *a3, uint64_t a4)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v11 = -1;
  uint64_t result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a3, (const __CFNumber **)&v11, 0, 0);
  if (!result)
  {
    if (a4)
    {
      uint64_t v8 = a1[4];
      if (v8) {
        uint64_t v9 = a1[4];
      }
      else {
        uint64_t v9 = 0;
      }
      if (*(void *)(v9 + 312))
      {
        if (v8) {
          uint64_t v10 = a1[4];
        }
        else {
          uint64_t v10 = 0;
        }
        return (*(uint64_t (**)(void *, uint64_t, const __CFDictionary *, uint64_t))(v10 + 312))(a1, v11, a3, a4);
      }
      else
      {
        return 4294950302;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t _copyHEIFItemPropertiesForIndex(void *a1, uint64_t a2, uint64_t a3, const __CFDictionary **a4)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  CFTypeRef v53 = 0;
  CFDictionaryRef theDict = 0;
  if (!a4) {
    return 0;
  }
  uint64_t v4 = a4;
  uint64_t v7 = _copyMetadataForIndex(a1, 3, a2, -1, 0, &theDict);
  if (v7 != -16993)
  {
    uint64_t RotationMatrixFromQuaternionArray = v7;
    if (v7) {
      goto LABEL_63;
    }
    CFAllocatorRef v10 = CFGetAllocator(a1);
    CFDictionaryRef Mutable = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!Mutable) {
      goto LABEL_73;
    }
    long long v52 = 0uLL;
    int v51 = 1;
    uint64_t ImageGeometryForIndex_1 = _getImageGeometryForIndex_1((uint64_t)a1, a2, v11, &v52, (void *)&v52 + 1, &v51);
    if (ImageGeometryForIndex_1) {
      goto LABEL_71;
    }
    long long v50 = v52;
    uint64_t ImageGeometryForIndex_1 = CMPhotoFlipSizeIfNeeded(v51, v52, *((uint64_t *)&v52 + 1), &v50);
    if (ImageGeometryForIndex_1) {
      goto LABEL_71;
    }
    uint64_t v45 = a2;
    char v49 = 1;
    int64_t v13 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F34938]);
    int v48 = 0;
    int IntIfPresent = FigCFDictionaryGetIntIfPresent();
    int v15 = IntIfPresent;
    if (v13)
    {
      CFAllocatorRef v16 = CFGetAllocator(a1);
      uint64_t ImageGeometryForIndex_1 = CMPhotoCreateIntrinsicsMatrixFromFigIntrinsicsDict(v16, v13, v52, *((uint64_t *)&v52 + 1), v50, *((uint64_t *)&v50 + 1), (BOOL *)&v49, (__CFArray **)&v53);
      if (ImageGeometryForIndex_1
        || !v15
        && v49
        && !CMPhotoGetHorizontalFOVFromIntrinsicsArray(v53, v52, *((uint64_t *)&v52 + 1), (uint64_t)&v48)
        && (uint64_t ImageGeometryForIndex_1 = FigCFDictionarySetInt(), ImageGeometryForIndex_1))
      {
LABEL_71:
        uint64_t RotationMatrixFromQuaternionArray = ImageGeometryForIndex_1;
        goto LABEL_64;
      }
    }
    else if (IntIfPresent)
    {
      uint64_t ImageGeometryForIndex_1 = FigCFDictionarySetInt();
      if (ImageGeometryForIndex_1) {
        goto LABEL_71;
      }
      CFAllocatorRef v17 = CFGetAllocator(a1);
      uint64_t ImageGeometryForIndex_1 = CMPhotoCreateIntrinsicsArrayFromHorizontalFOV(v17, v52, *((unint64_t *)&v52 + 1), v48, (__CFArray **)&v53);
      if (ImageGeometryForIndex_1) {
        goto LABEL_71;
      }
    }
    if (!v53)
    {
LABEL_33:
      int v58 = 0;
      uint64_t v57 = 0;
      int v47 = 0;
      CFDictionaryRef v30 = (const __CFDictionary *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F34930]);
      int v31 = FigCFDictionaryGetIntIfPresent();
      if (!v30 && !v31)
      {
LABEL_61:
        if (CFDictionaryGetCount(Mutable) < 1) {
          goto LABEL_4;
        }
        uint64_t RotationMatrixFromQuaternionArray = 0;
        *uint64_t v4 = Mutable;
LABEL_63:
        CFDictionaryRef Mutable = 0;
        goto LABEL_64;
      }
      int v46 = 0;
      if (v30)
      {
        CFArrayRef v32 = (const __CFArray *)CFDictionaryGetValue(v30, (const void *)*MEMORY[0x1E4F32790]);
        if (v32 && CFArrayGetCount(v32) == 3)
        {
          uint64_t v33 = 0;
          uint64_t v34 = &v57;
          while (FigCFArrayGetInt32AtIndex())
          {
            ++v33;
            uint64_t v34 = (uint64_t *)((char *)v34 + 4);
            if (v33 == 3)
            {
              CFDictionaryRef v35 = CFDictionaryGetValue(v30, (const void *)*MEMORY[0x1E4F327A0]);
              if (v35)
              {
                uint64_t v36 = v35;
                int v37 = 1;
              }
              else
              {
                uint64_t v36 = CFDictionaryGetValue(v30, (const void *)*MEMORY[0x1E4F32798]);
                int v37 = 0;
              }
              CMPhotoCFDictionaryGetIntIfPresent(v30, (const void *)*MEMORY[0x1E4F327A8], &v46);
              goto LABEL_49;
            }
          }
        }
        uint64_t RotationMatrixFromQuaternionArray = 4294950304;
        goto LABEL_64;
      }
      uint64_t v36 = 0;
      int v37 = 0;
      int v38 = v47;
      if (!v45) {
        int v38 = 0;
      }
      LODWORD(v57) = v38;
LABEL_49:
      CFAllocatorRef v39 = CFGetAllocator(a1);
      int v40 = v46;
      CFTypeRef cf = 0;
      CFRange value = 0;
      uint64_t v41 = CFDictionaryCreateMutable(v39, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      size_t v42 = v41;
      if (!v41)
      {
        uint64_t RotationMatrixFromQuaternionArray = 4294950305;
LABEL_56:
        if (value) {
          CFRelease(value);
        }
        if (RotationMatrixFromQuaternionArray) {
          goto LABEL_64;
        }
        CFDictionarySetValue(Mutable, @"CameraExtrinsics", v42);
        if (v42) {
          CFRelease(v42);
        }
        goto LABEL_61;
      }
      uint64_t ExtrinsicsPositionArrayFromExtrinsicsValues = CMPhotoCFDictionarySetInt32(v41, @"CoordinateSystemID", v40);
      if (ExtrinsicsPositionArrayFromExtrinsicsValues
        || (uint64_t ExtrinsicsPositionArrayFromExtrinsicsValues = CMPhotoCreateExtrinsicsPositionArrayFromExtrinsicsValues(v39, v57, SHIDWORD(v57), v58, (__CFArray **)&cf), ExtrinsicsPositionArrayFromExtrinsicsValues))
      {
        uint64_t RotationMatrixFromQuaternionArray = ExtrinsicsPositionArrayFromExtrinsicsValues;
      }
      else
      {
        uint64_t RotationMatrixFromQuaternionArray = CMPhotoCreateRotationMatrixFromQuaternionArray(v39, v36, v37, (__CFArray **)&value);
        if (!RotationMatrixFromQuaternionArray)
        {
          CFDictionarySetValue(v42, @"Position", cf);
          CFDictionarySetValue(v42, @"Rotation", value);
          goto LABEL_54;
        }
      }
      CFRelease(v42);
      size_t v42 = 0;
LABEL_54:
      if (cf) {
        CFRelease(cf);
      }
      goto LABEL_56;
    }
    CFDictionaryRef v18 = v4;
    CFAllocatorRef v19 = CFGetAllocator(a1);
    int v20 = v48;
    unint64_t v21 = *((void *)&v52 + 1);
    CFTypeRef v22 = v53;
    int v23 = v49;
    unint64_t v24 = v52;
    CFRange value = 0;
    CFMutableDictionaryRef v25 = CFDictionaryCreateMutable(v19, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!v25)
    {
LABEL_73:
      uint64_t RotationMatrixFromQuaternionArray = 4294950305;
      goto LABEL_64;
    }
    CFMutableDictionaryRef v26 = v25;
    if (v22)
    {
      long long v27 = (void *)CFRetain(v22);
      CFRange value = v27;
    }
    else
    {
      uint64_t IntrinsicsArrayFromHorizontalFOV = CMPhotoCreateIntrinsicsArrayFromHorizontalFOV(v19, v24, v21, v20, (__CFArray **)&value);
      if (IntrinsicsArrayFromHorizontalFOV)
      {
        uint64_t RotationMatrixFromQuaternionArray = IntrinsicsArrayFromHorizontalFOV;
        CFRelease(v26);
        CFMutableDictionaryRef v26 = 0;
        uint64_t v4 = v18;
LABEL_28:
        if (value) {
          CFRelease(value);
        }
        if (RotationMatrixFromQuaternionArray) {
          goto LABEL_64;
        }
        CFDictionarySetValue(Mutable, @"CameraModel", v26);
        if (v26) {
          CFRelease(v26);
        }
        goto LABEL_33;
      }
      long long v27 = value;
    }
    uint64_t v4 = v18;
    CFDictionarySetValue(v26, @"Intrinsics", v27);
    long long v29 = kCMPhotoCameraModelType_GenericPinhole;
    if (v23) {
      long long v29 = kCMPhotoCameraModelType_SimplifiedPinhole;
    }
    CFDictionarySetValue(v26, @"ModelType", *v29);
    uint64_t RotationMatrixFromQuaternionArray = 0;
    goto LABEL_28;
  }
  CFDictionaryRef Mutable = 0;
LABEL_4:
  uint64_t RotationMatrixFromQuaternionArray = 4294950303;
LABEL_64:
  if (v53) {
    CFRelease(v53);
  }
  if (theDict) {
    CFRelease(theDict);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return RotationMatrixFromQuaternionArray;
}

uint64_t _copyMetadataForIndex(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, __CFData **a6)
{
  CFAllocatorRef v12 = CFGetAllocator(a1);
  CFTypeRef v58 = 0;
  CFTypeRef v57 = 0;
  unint64_t v54 = 0;
  unint64_t v55 = 0;
  CFTypeRef v52 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v50 = 0;
  uint64_t v13 = a1[6];
  uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v14) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v56 = 0;
  uint64_t v51 = 0;
  CFAllocatorRef v16 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, void))(v15 + 16);
  if (v16)
  {
    uint64_t ContiguousDataFromChunks = v16(v13, a3, &v58, 0);
    if (ContiguousDataFromChunks
      || (uint64_t ContiguousDataFromChunks = _getMetadataCountForIndex((uint64_t)a1, a2, a3, &v51),
          ContiguousDataFromChunks))
    {
LABEL_79:
      uint64_t v43 = ContiguousDataFromChunks;
    }
    else if (v51 <= a4)
    {
      uint64_t v43 = 4294950303;
    }
    else
    {
      switch(a2)
      {
        case 0:
          CFTypeRef v18 = v58;
          CFAllocatorRef v19 = *(void **)(CMBaseObjectGetVTable() + 16);
          if (v19) {
            int v20 = v19;
          }
          else {
            int v20 = 0;
          }
          if (*v20 >= 3uLL)
          {
            CFArrayRef v32 = (uint64_t (*)(CFTypeRef, uint64_t, uint64_t, uint64_t *, void **, void **, CFTypeRef *, void, CFTypeRef *))v20[15];
            if (v32)
            {
              unsigned int v33 = v32(v18, a4, a5, &v56, &v55, &v54, &v57, 0, &v50);
              goto LABEL_51;
            }
          }
          uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v34) {
            uint64_t v35 = v34;
          }
          else {
            uint64_t v35 = 0;
          }
          uint64_t v44 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, uint64_t *, void **, void **, CFTypeRef *, void))(v35 + 56);
          if (!v44) {
            goto LABEL_66;
          }
          unsigned int v33 = v44(v18, a4, a5, &v56, &v55, &v54, &v57, 0);
          goto LABEL_51;
        case 1:
          CFTypeRef v21 = v58;
          CFTypeRef v22 = *(void **)(CMBaseObjectGetVTable() + 16);
          if (v22) {
            int v23 = v22;
          }
          else {
            int v23 = 0;
          }
          if (*v23 >= 3uLL
            && (uint64_t v36 = (uint64_t (*)(CFTypeRef, uint64_t, uint64_t *, void **, void **, CFTypeRef *, void, CFTypeRef *))v23[16]) != 0)
          {
            unsigned int v33 = v36(v21, a4, &v56, &v55, &v54, &v57, 0, &v50);
          }
          else
          {
            uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v37) {
              uint64_t v38 = v37;
            }
            else {
              uint64_t v38 = 0;
            }
            CFAllocatorRef v39 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *, void **, void **, CFTypeRef *, void))(v38 + 72);
            if (!v39) {
              goto LABEL_66;
            }
LABEL_50:
            unsigned int v33 = v39(v21, a4, &v56, &v55, &v54, &v57, 0);
          }
LABEL_51:
          if (v33 == -12783) {
            uint64_t v43 = 4294950303;
          }
          else {
            uint64_t v43 = v33;
          }
          if (a2 != 3 && !v43)
          {
            if (a2 != 4)
            {
              uint64_t ContiguousDataFromChunks = CMPhotoPictureReaderCreateContiguousDataFromChunks((uint64_t)v12, v56, (uint64_t)v55, (uint64_t)v54, (uint64_t)v57, 0, (uint64_t)v50, 0, a6);
              goto LABEL_79;
            }
LABEL_57:
            CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v12, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            if (Mutable)
            {
              CFMutableDictionaryRef v46 = Mutable;
              CFRange value = 0;
              uint64_t v47 = CMPhotoPictureReaderCreateContiguousDataFromChunks((uint64_t)v12, v56, (uint64_t)v55, (uint64_t)v54, (uint64_t)v57, 0, (uint64_t)v50, 0, (__CFData **)&value);
              if (v47)
              {
                uint64_t v43 = v47;
                CFRelease(v46);
              }
              else
              {
                CFDictionarySetValue(v46, @"Data", value);
                if (value) {
                  CFRelease(value);
                }
                if (cf) {
                  CFDictionarySetValue(v46, @"URI", cf);
                }
                if (v52) {
                  CFDictionarySetValue(v46, @"Name", v52);
                }
                uint64_t v43 = 0;
                *a6 = v46;
              }
            }
            else
            {
              uint64_t v43 = 4294950305;
            }
          }
          break;
        case 2:
          CFTypeRef v21 = v58;
          uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v24) {
            uint64_t v25 = v24;
          }
          else {
            uint64_t v25 = 0;
          }
          CFAllocatorRef v39 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *, void **, void **, CFTypeRef *, void))(v25 + 88);
          if (!v39) {
            goto LABEL_66;
          }
          goto LABEL_50;
        case 4:
          CFTypeRef v29 = v58;
          CFDictionaryRef v30 = *(void **)(CMBaseObjectGetVTable() + 16);
          if (v30) {
            int v31 = v30;
          }
          else {
            int v31 = 0;
          }
          if (*v31 < 2uLL) {
            goto LABEL_66;
          }
          uint64_t v41 = (uint64_t (*)(CFTypeRef, uint64_t, uint64_t *, void **, void **, CFTypeRef *, void, CFTypeRef *, CFTypeRef *))v31[14];
          if (!v41) {
            goto LABEL_66;
          }
          unsigned int v42 = v41(v29, a4, &v56, &v55, &v54, &v57, 0, &cf, &v52);
          if (v42 == -12783) {
            uint64_t v43 = 4294950303;
          }
          else {
            uint64_t v43 = v42;
          }
          if (v43) {
            break;
          }
          goto LABEL_57;
        default:
          uint64_t FigBaseObject = FigPictureReaderGetFigBaseObject();
          uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v27) {
            uint64_t v28 = v27;
          }
          else {
            uint64_t v28 = 0;
          }
          int v40 = *(uint64_t (**)(uint64_t, void, void, __CFData **))(v28 + 48);
          if (!v40) {
            goto LABEL_66;
          }
          unsigned int v33 = v40(FigBaseObject, *MEMORY[0x1E4F33448], 0, a6);
          goto LABEL_51;
      }
    }
  }
  else
  {
LABEL_66:
    uint64_t v43 = 4294954514;
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v52) {
    CFRelease(v52);
  }
  if (v58) {
    CFRelease(v58);
  }
  if (v57) {
    CFRelease(v57);
  }
  if (v50) {
    CFRelease(v50);
  }
  free(v55);
  free(v54);
  return v43;
}

uint64_t CMPhotoDecompressionContainerGetXMPCountForIndexWithOptions(void *a1, const __CFNumber *a2, const __CFDictionary *a3, void *a4)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v12 = -1;
  uint64_t result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a3, (const __CFNumber **)&v12, 0, 0);
  if (!result)
  {
    uint64_t v8 = a1[4];
    if (v8) {
      uint64_t v9 = a1[4];
    }
    else {
      uint64_t v9 = 0;
    }
    if (*(void *)(v9 + 264))
    {
      if (v8) {
        uint64_t v10 = a1[4];
      }
      else {
        uint64_t v10 = 0;
      }
      if (*(void *)(v10 + 264))
      {
        if (v8) {
          uint64_t v11 = a1[4];
        }
        else {
          uint64_t v11 = 0;
        }
        return (*(uint64_t (**)(void *, uint64_t, const __CFDictionary *, void *))(v11 + 264))(a1, v12, a3, a4);
      }
      else
      {
        return 4294950302;
      }
    }
    else
    {
      uint64_t result = 0;
      if (a4) {
        *a4 = 0;
      }
    }
  }
  return result;
}

uint64_t _getXMPCountForIndex(uint64_t a1, unint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v8 = a2;
  uint64_t v6 = a1 + 40;
  uint64_t result = _checkImageIndex(a1 + 40, &v8, 0);
  if (!result)
  {
    uint64_t result = _parseXMPIfNeeded(v6);
    if (a4)
    {
      if (!result) {
        *a4 = *(unsigned char *)(a1 + 369) != 0;
      }
    }
  }
  return result;
}

uint64_t _getXMPCountForIndex_0(uint64_t a1, uint64_t a2, uint64_t a3, const __CFArray **a4)
{
  if (a2)
  {
    return FigSignalErrorAt();
  }
  else
  {
    if (a4)
    {
      CFArrayRef Count = *(const __CFArray **)(a1 + 328);
      if (Count) {
        CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
      }
      *a4 = Count;
    }
    return 0;
  }
}

uint64_t _getXMPCountForIndex_1(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _getMetadataCountForIndex(a1, 1, a2, a4);
}

uint64_t CMPhotoDecompressionContainerGetExifCountForIndexWithOptions(void *a1, const __CFNumber *a2, const __CFDictionary *a3, void *a4)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v12 = -1;
  uint64_t result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a3, (const __CFNumber **)&v12, 0, 0);
  if (!result)
  {
    uint64_t v8 = a1[4];
    if (v8) {
      uint64_t v9 = a1[4];
    }
    else {
      uint64_t v9 = 0;
    }
    if (*(void *)(v9 + 336))
    {
      if (v8) {
        uint64_t v10 = a1[4];
      }
      else {
        uint64_t v10 = 0;
      }
      if (*(void *)(v10 + 336))
      {
        if (v8) {
          uint64_t v11 = a1[4];
        }
        else {
          uint64_t v11 = 0;
        }
        return (*(uint64_t (**)(void *, uint64_t, const __CFDictionary *, void *))(v11 + 336))(a1, v12, a3, a4);
      }
      else
      {
        return 4294950302;
      }
    }
    else
    {
      uint64_t result = 0;
      if (a4) {
        *a4 = 0;
      }
    }
  }
  return result;
}

uint64_t _getMetadataCountForIndex(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  CFTypeRef cf = 0;
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v24 = 0;
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, void))(v9 + 16);
  if (v10)
  {
    uint64_t v11 = v10(v7, a3, &cf, 0);
    if (v11)
    {
      uint64_t v21 = v11;
    }
    else
    {
      switch(a2)
      {
        case 0:
          CFTypeRef v12 = cf;
          uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v13) {
            uint64_t v14 = v13;
          }
          else {
            uint64_t v14 = 0;
          }
          CFTypeRef v22 = *(uint64_t (**)(CFTypeRef, uint64_t *))(v14 + 48);
          if (!v22) {
            goto LABEL_32;
          }
          goto LABEL_28;
        case 1:
          CFTypeRef v12 = cf;
          uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v17) {
            uint64_t v18 = v17;
          }
          else {
            uint64_t v18 = 0;
          }
          CFTypeRef v22 = *(uint64_t (**)(CFTypeRef, uint64_t *))(v18 + 64);
          if (!v22) {
            goto LABEL_32;
          }
          goto LABEL_28;
        case 2:
          CFTypeRef v12 = cf;
          uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v15) {
            uint64_t v16 = v15;
          }
          else {
            uint64_t v16 = 0;
          }
          CFTypeRef v22 = *(uint64_t (**)(CFTypeRef, uint64_t *))(v16 + 80);
          if (!v22) {
            goto LABEL_32;
          }
          goto LABEL_28;
        case 4:
          CFTypeRef v12 = cf;
          CFAllocatorRef v19 = *(void **)(CMBaseObjectGetVTable() + 16);
          if (v19) {
            int v20 = v19;
          }
          else {
            int v20 = 0;
          }
          if (*v20 < 2uLL) {
            goto LABEL_32;
          }
          CFTypeRef v22 = (uint64_t (*)(CFTypeRef, uint64_t *))v20[13];
          if (!v22) {
            goto LABEL_32;
          }
LABEL_28:
          uint64_t v21 = v22(v12, &v24);
          break;
        default:
          uint64_t v21 = 0;
          uint64_t v24 = 0;
          break;
      }
      if (a4 && !v21) {
        *a4 = v24;
      }
    }
  }
  else
  {
LABEL_32:
    uint64_t v21 = 4294954514;
  }
  if (cf) {
    CFRelease(cf);
  }
  return v21;
}

uint64_t _getExifCountForIndex(uint64_t a1, unint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v8 = a2;
  uint64_t v6 = a1 + 40;
  uint64_t result = _checkImageIndex(a1 + 40, &v8, 0);
  if (!result)
  {
    uint64_t result = _parseExifIfNeeded(v6, 0);
    if (a4)
    {
      if (!result) {
        *a4 = *(unsigned char *)(a1 + 281) != 0;
      }
    }
  }
  return result;
}

uint64_t _getExifCountForIndex_0(uint64_t a1, uint64_t a2, uint64_t a3, const __CFArray **a4)
{
  if (a2)
  {
    return FigSignalErrorAt();
  }
  else
  {
    if (a4)
    {
      CFArrayRef Count = *(const __CFArray **)(a1 + 320);
      if (Count) {
        CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
      }
      *a4 = Count;
    }
    return 0;
  }
}

uint64_t _getExifCountForIndex_1(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _getMetadataCountForIndex(a1, 0, a2, a4);
}

uint64_t _once_CMPhotoGetCPUCount()
{
  int v2 = 1;
  size_t v1 = 4;
  uint64_t result = sysctlbyname("hw.logicalcpu", &v2, &v1, 0, 0);
  sCPUCFArrayRef Count = v2;
  return result;
}

void CMPhotoAddHDRMetadataToPixelBufferFromFormatDescription(const opaqueCMFormatDescription *a1, __CVBuffer *a2)
{
  CFDictionaryRef Extensions = CMFormatDescriptionGetExtensions(a1);
  if (Extensions)
  {
    CFDictionaryRef v4 = Extensions;
    CFArrayRef Value = CFDictionaryGetValue(Extensions, (const void *)*MEMORY[0x1E4F1ED88]);
    if (Value) {
      CVBufferSetAttachment(a2, (CFStringRef)*MEMORY[0x1E4F24AD0], Value, kCVAttachmentMode_ShouldPropagate);
    }
    uint64_t v6 = CFDictionaryGetValue(v4, (const void *)*MEMORY[0x1E4F1EE00]);
    if (v6) {
      CVBufferSetAttachment(a2, (CFStringRef)*MEMORY[0x1E4F24B88], v6, kCVAttachmentMode_ShouldPropagate);
    }
    if (cmpweak_exists_kCMFormatDescriptionExtension_ContentColorVolume())
    {
      uint64_t v7 = cmpweak_kCMFormatDescriptionExtension_ContentColorVolume();
      unint64_t v8 = CFDictionaryGetValue(v4, v7);
      if (v8) {
        CVBufferSetAttachment(a2, @"ContentColorVolume", v8, kCVAttachmentMode_ShouldPropagate);
      }
    }
    uint64_t v9 = CFDictionaryGetValue(v4, (const void *)*MEMORY[0x1E4F1ED30]);
    if (v9)
    {
      CFStringRef v10 = (const __CFString *)*MEMORY[0x1E4F249F0];
      CVBufferSetAttachment(a2, v10, v9, kCVAttachmentMode_ShouldPropagate);
    }
  }
}

uint64_t _createDescriptionForReader(uint64_t a1, CFTypeRef a2, uint64_t a3, const __CFArray *a4, const __CFAllocator *a5, int a6, int a7, __CFDictionary **a8)
{
  CFTypeRef v122 = 0;
  CFTypeRef v123 = 0;
  CFTypeRef v120 = 0;
  uint64_t v121 = 0;
  unint64_t v118 = 0;
  CFMutableDictionaryRef v119 = 0;
  size_t v116 = 0;
  unint64_t v117 = 0;
  CFTypeRef v114 = 0;
  CFTypeRef v115 = 0;
  CFTypeRef cf = 0;
  int v112 = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a5, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    goto LABEL_257;
  }
  uint64_t ItemTypeFromReader = CMPhotoPictureReaderGetItemTypeFromReader(a2, &v112);
  if (ItemTypeFromReader) {
    goto LABEL_255;
  }
  uint64_t ItemTypeFromReader = CMPhotoCFDictionarySetInt32(Mutable, @"ItemType", v112);
  if (ItemTypeFromReader) {
    goto LABEL_255;
  }
  int v104 = a7;
  uint64_t FigBaseObject = FigPictureReaderGetFigBaseObject();
  uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v19) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = 0;
  }
  uint64_t v21 = *(uint64_t (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v20 + 48);
  if (!v21) {
    goto LABEL_74;
  }
  uint64_t v105 = a3;
  uint64_t ItemTypeFromReader = v21(FigBaseObject, *MEMORY[0x1E4F333E8], a5, &v122);
  if (ItemTypeFromReader)
  {
LABEL_255:
    uint64_t v25 = ItemTypeFromReader;
    goto LABEL_256;
  }
  FigCFDictionarySetValue();
  *(_OWORD *)CFRange value = 0u;
  long long v111 = 0u;
  if (v112 == 1768187246)
  {
    uint64_t ItemTypeFromReader = CMPhotoPictureReaderCopyBaseReaderAndPropertiesForDerivedPicture(a2, &v115, value, 0);
    if (ItemTypeFromReader) {
      goto LABEL_255;
    }
  }
  else
  {
    uint64_t ItemTypeFromReader = CMPhotoPictureReaderGetImageGeometryFromPictureReader(a2, *(unsigned __int8 *)(a1 + 28), (unint64_t)value, 0);
    if (ItemTypeFromReader) {
      goto LABEL_255;
    }
  }
  v128.double width = (double)(unint64_t)v111;
  v128.double height = (double)*((unint64_t *)&v111 + 1);
  CFDictionaryRef DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v128);
  if (!DictionaryRepresentation)
  {
    uint64_t v25 = 4294950305;
    goto LABEL_256;
  }
  CFDictionaryRef v23 = DictionaryRepresentation;
  CFDictionarySetValue(Mutable, @"Dimensions", DictionaryRepresentation);
  CFRelease(v23);
  v127[0] = 0;
  uint64_t v24 = CMPhotoPictureReaderCopyImageBitDepth(a2, (CFTypeRef *)v127);
  if (v24 != -12783)
  {
    uint64_t v25 = v24;
    if (v24) {
      goto LABEL_256;
    }
    CFDictionarySetValue(Mutable, @"BitDepth", v127[0]);
    if (v127[0]) {
      CFRelease(v127[0]);
    }
  }
  if (v112 == 1768187246)
  {
    LODWORD(value[0]) = 0;
LABEL_20:
    CFTypeRef v26 = v115;
    goto LABEL_21;
  }
  uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v28) {
    uint64_t v29 = v28;
  }
  else {
    uint64_t v29 = 0;
  }
  unsigned int v33 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(v29 + 8);
  if (!v33) {
    goto LABEL_74;
  }
  uint64_t ItemTypeFromReader = v33(a2, &v114);
  if (ItemTypeFromReader) {
    goto LABEL_255;
  }
  value[0] = 0;
  uint64_t CMBaseObject = FigPictureTileCursorServiceGetCMBaseObject();
  uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v35) {
    uint64_t v36 = v35;
  }
  else {
    uint64_t v36 = 0;
  }
  CFTypeRef v50 = *(uint64_t (**)(uint64_t, void, const __CFAllocator *, void **))(v36 + 48);
  if (!v50) {
    goto LABEL_74;
  }
  uint64_t v51 = v50(CMBaseObject, *MEMORY[0x1E4F334A8], a5, value);
  if (v51 != -12784)
  {
    uint64_t v25 = v51;
    if (!v51)
    {
      CFDictionarySetValue(Mutable, @"TileDimensions", value[0]);
      if (value[0]) {
        CFRelease(value[0]);
      }
      goto LABEL_60;
    }
LABEL_256:
    unint64_t v54 = 0;
    unint64_t v55 = 0;
    uint64_t v56 = 0;
    goto LABEL_75;
  }
LABEL_60:
  LODWORD(value[0]) = 0;
  if (v112 == 1768187246) {
    goto LABEL_20;
  }
  CFTypeRef v26 = a2;
LABEL_21:
  uint64_t ItemTypeFromReader = CMPhotoPictureReaderGetImageCodecTypeFromReader(v26, value);
  if (ItemTypeFromReader) {
    goto LABEL_255;
  }
  uint64_t ItemTypeFromReader = CMPhotoCFDictionarySetInt32(Mutable, @"CodecType", (int)value[0]);
  if (ItemTypeFromReader) {
    goto LABEL_255;
  }
  value[0] = 0;
  value[1] = 0;
  CFTypeRef v27 = v112 == 1768187246 ? v115 : a2;
  uint64_t ItemTypeFromReader = _getDataRangeFromReader((uint64_t)v27, (unint64_t *)value);
  if (ItemTypeFromReader) {
    goto LABEL_255;
  }
  uint64_t ItemTypeFromReader = CMPhotoCFDictionarySetInt64(Mutable, @"DataOffset", (uint64_t)value[0]);
  if (ItemTypeFromReader) {
    goto LABEL_255;
  }
  uint64_t ItemTypeFromReader = CMPhotoCFDictionarySetSize(Mutable, @"DataLength", value[1]);
  if (ItemTypeFromReader) {
    goto LABEL_255;
  }
  char v103 = a8;
  if (v112 != 1953325424) {
    goto LABEL_72;
  }
  uint64_t v30 = FigPictureReaderGetFigBaseObject();
  uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v31) {
    uint64_t v32 = v31;
  }
  else {
    uint64_t v32 = 0;
  }
  uint64_t v37 = *(uint64_t (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v32 + 48);
  if (!v37)
  {
LABEL_74:
    unint64_t v54 = 0;
    unint64_t v55 = 0;
    uint64_t v56 = 0;
    uint64_t v25 = 4294954514;
    goto LABEL_75;
  }
  uint64_t ItemTypeFromReader = v37(v30, *MEMORY[0x1E4F333A0], a5, &v123);
  if (ItemTypeFromReader) {
    goto LABEL_255;
  }
  CFDictionaryRef v38 = (const __CFDictionary *)FigCFDictionaryGetValue();
  CFAllocatorRef v39 = (const void **)MEMORY[0x1E4F33430];
  if (!v38) {
    goto LABEL_49;
  }
  CFDictionaryRef v40 = v38;
  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(a5, 0, v38);
  if (!MutableCopy)
  {
LABEL_257:
    unint64_t v54 = 0;
    unint64_t v55 = 0;
    uint64_t v56 = 0;
LABEL_258:
    uint64_t v25 = 4294950305;
    goto LABEL_75;
  }
  unsigned int v42 = MutableCopy;
  if (!CFDictionaryContainsKey(v40, @"TonemapVersion")) {
    CMPhotoCFDictionarySetInt(v42, @"TonemapVersion", 0);
  }
  if (!CFDictionaryContainsKey(v40, @"TonemapWriterVersion")) {
    CMPhotoCFDictionarySetInt(v42, @"TonemapWriterVersion", 0);
  }
  CFDictionaryRemoveValue(v42, *v39);
  CFDictionarySetValue(Mutable, @"DerivationDetails", v42);
  CFRelease(v42);
LABEL_49:
  CFArrayRef v43 = (const __CFArray *)FigCFDictionaryGetValue();
  if (!v43 || (CFArrayRef v44 = v43, v45 = CFGetTypeID(v43), v45 != CFArrayGetTypeID()) || CFArrayGetCount(v44) != 2)
  {
    unint64_t v54 = 0;
    unint64_t v55 = 0;
    uint64_t v56 = 0;
    uint64_t v25 = 4294950194;
    goto LABEL_75;
  }
  unsigned int ValueAtIndex = CFArrayGetValueAtIndex(v44, 1);
  uint64_t v47 = FigPictureReaderGetFigBaseObject();
  uint64_t v48 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v48) {
    uint64_t v49 = v48;
  }
  else {
    uint64_t v49 = 0;
  }
  CFTypeRef v52 = *(uint64_t (**)(uint64_t, const void *, const __CFAllocator *, const void **))(v49 + 48);
  if (!v52) {
    goto LABEL_74;
  }
  uint64_t ItemTypeFromReader = v52(v47, *v39, a5, &v121);
  if (ItemTypeFromReader) {
    goto LABEL_255;
  }
  CFDictionarySetValue(Mutable, @"DerivationGainMapDimension", v121);
  uint64_t ItemTypeFromReader = CMPhotoPictureReaderCopyFormatDescriptorFromReader((uint64_t)ValueAtIndex, (uint64_t)a5, 1, (CMFormatDescriptionRef *)&cf);
  a3 = v105;
  if (ItemTypeFromReader) {
    goto LABEL_255;
  }
  LODWORD(value[0]) = 0;
  if (!_getImageOrientation(a1, ValueAtIndex, 0, value))
  {
    uint64_t ItemTypeFromReader = FigCFDictionarySetInt();
    if (ItemTypeFromReader) {
      goto LABEL_255;
    }
  }
  LODWORD(v127[0]) = 0;
  LOBYTE(v124) = 1;
  uint64_t ItemTypeFromReader = CMPhotoGetInfoFromFormatDescription((const opaqueCMFormatDescription *)cf, 0, *(unsigned __int8 *)(a1 + 28), 0, &v124, v127, 0, 0, 0, 0, 0, 0);
  if (ItemTypeFromReader) {
    goto LABEL_255;
  }
  if (LODWORD(v127[0]))
  {
    uint64_t ItemTypeFromReader = FigCFDictionarySetInt();
    if (ItemTypeFromReader) {
      goto LABEL_255;
    }
  }
  if (!CMPhotoPictureReaderCopyImageBitDepth(ValueAtIndex, &v120))
  {
    LODWORD(v126) = 0;
    if (FigCFArrayGetInt32AtIndex())
    {
      LODWORD(v125) = 0;
      if (!CMPhotoGetYUVPixelFormatForParameters((int)v127[0], (int)v126, v124, 0, 0, 0, 1, (int *)&v125))
      {
        uint64_t ItemTypeFromReader = FigCFDictionarySetInt();
        if (ItemTypeFromReader) {
          goto LABEL_255;
        }
      }
    }
  }
LABEL_72:
  _createMetadataDictionaryArrayForReader((uint64_t)a2, a5, 0, &v119);
  _createMetadataDictionaryArrayForReader((uint64_t)a2, a5, 1, &v118);
  _createMetadataDictionaryArrayForReader((uint64_t)a2, a5, 2, &v117);
  _createMetadataDictionaryArrayForReader((uint64_t)a2, a5, 4, &v116);
  if (a6)
  {
    unint64_t v54 = 0;
    unint64_t v55 = 0;
    uint64_t v56 = 0;
    goto LABEL_206;
  }
  if (!a4 || (uint64_t Count = CFArrayGetCount(a4), Count < 1))
  {
    uint64_t v56 = 0;
    goto LABEL_126;
  }
  uint64_t v56 = CFArrayCreateMutable(a5, Count, MEMORY[0x1E4F1D510]);
  if (!v56)
  {
    unint64_t v54 = 0;
    unint64_t v55 = 0;
    goto LABEL_258;
  }
  for (uint64_t i = 0; i != Count; ++i)
  {
    if (v115)
    {
      CFRelease(v115);
      CFTypeRef v115 = 0;
    }
    LODWORD(v127[0]) = 0;
    if (FigCFArrayGetInt32AtIndex())
    {
      uint64_t v60 = *(void *)(a1 + 48);
      uint64_t v61 = LODWORD(v127[0]);
      uint64_t v62 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v62) {
        uint64_t v63 = v62;
      }
      else {
        uint64_t v63 = 0;
      }
      int v64 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, void))(v63 + 16);
      if (!v64)
      {
        uint64_t v25 = 4294954514;
        goto LABEL_202;
      }
      uint64_t DummyReaderDescription = v64(v60, v61, &v115, 0);
      if (DummyReaderDescription) {
        goto LABEL_260;
      }
      value[0] = 0;
      if (_createDescriptionForReader(a1, v115, LODWORD(v127[0]), 0, a5, 0, 1, value))
      {
        uint64_t DummyReaderDescription = _createDummyReaderDescription(a5, (__CFDictionary **)value);
        if (DummyReaderDescription) {
          goto LABEL_260;
        }
      }
      unsigned int v66 = value[0];
      uint64_t DummyReaderDescription = FigCFDictionarySetCFIndex();
      if (DummyReaderDescription) {
        goto LABEL_260;
      }
      CFArrayAppendValue(v56, v66);
      if (v66) {
        CFRelease(v66);
      }
    }
  }
  a3 = v105;
LABEL_126:
  if (!v104 && (uint64_t DummyReaderDescription = FigCFDictionarySetInt(), DummyReaderDescription)
    || (int v109 = 0, !_getImageGeometryForIndex_1(a1, a3, v53, 0, 0, &v109))
    && (uint64_t DummyReaderDescription = FigCFDictionarySetInt(), DummyReaderDescription)
    || (value[0] = 0,
        uint64_t DummyReaderDescription = FigPictureReaderGetThumbnailCount((uint64_t)a2, (uint64_t)value),
        DummyReaderDescription)
    || (uint64_t DummyReaderDescription = FigCFDictionarySetInt(), DummyReaderDescription))
  {
LABEL_260:
    uint64_t v25 = DummyReaderDescription;
LABEL_202:
    unint64_t v54 = 0;
    goto LABEL_203;
  }
  if ((uint64_t)value[0] >= 1)
  {
    uint64_t v67 = 0;
    unint64_t v54 = 0;
    while (1)
    {
      if (v115)
      {
        CFRelease(v115);
        CFTypeRef v115 = 0;
      }
      v127[0] = 0;
      if (!v54)
      {
        unint64_t v54 = CFArrayCreateMutable(a5, (CFIndex)value[0], MEMORY[0x1E4F1D510]);
        if (!v54) {
          break;
        }
      }
      uint64_t v68 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v68) {
        uint64_t v69 = v68;
      }
      else {
        uint64_t v69 = 0;
      }
      unsigned __int8 v70 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *))(v69 + 24);
      if (!v70)
      {
        uint64_t v25 = 4294954514;
        goto LABEL_203;
      }
      AuxiliaryImageuint64_t Count = v70(a2, v67, &v115);
      if (AuxiliaryImageCount) {
        goto LABEL_261;
      }
      if (_createDescriptionForReader(a1, v115, v67, 0, a5, 1, 0, v127))
      {
        AuxiliaryImageuint64_t Count = _createDummyReaderDescription(a5, v127);
        if (AuxiliaryImageCount) {
          goto LABEL_261;
        }
      }
      int v109 = 0;
      int ThumbnailGeometryForIndex_0 = _getThumbnailGeometryForIndex_0(a1, a3, v67, 0, 0, &v109);
      dispatch_semaphore_t v73 = v127[0];
      if (!ThumbnailGeometryForIndex_0)
      {
        AuxiliaryImageuint64_t Count = FigCFDictionarySetInt();
        if (AuxiliaryImageCount) {
          goto LABEL_261;
        }
      }
      CFArrayAppendValue(v54, v73);
      if (v127[0]) {
        CFRelease(v127[0]);
      }
      ++v67;
      a3 = v105;
      if (v67 >= (uint64_t)value[0]) {
        goto LABEL_153;
      }
    }
    uint64_t v25 = 4294950305;
    goto LABEL_203;
  }
  unint64_t v54 = 0;
LABEL_153:
  v127[0] = 0;
  AuxiliaryImageuint64_t Count = FigPictureReaderGetAuxiliaryImageCount((uint64_t)a2, (uint64_t)v127);
  if (AuxiliaryImageCount || (AuxiliaryImageuint64_t Count = FigCFDictionarySetInt(), AuxiliaryImageCount))
  {
LABEL_261:
    uint64_t v25 = AuxiliaryImageCount;
LABEL_203:
    unint64_t v55 = 0;
    goto LABEL_75;
  }
  if ((uint64_t)v127[0] >= 1)
  {
    uint64_t v74 = 0;
    unint64_t v55 = 0;
    uint64_t v102 = *MEMORY[0x1E4F33390];
    while (1)
    {
      if (v115)
      {
        CFRelease(v115);
        CFTypeRef v115 = 0;
      }
      uint8x8_t v125 = 0;
      uint64_t v126 = 0;
      int v124 = 0;
      if (!v55)
      {
        unint64_t v55 = CFArrayCreateMutable(a5, (CFIndex)v127[0], MEMORY[0x1E4F1D510]);
        if (!v55) {
          goto LABEL_258;
        }
      }
      uint64_t v75 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v75) {
        uint64_t v76 = v75;
      }
      else {
        uint64_t v76 = 0;
      }
      CFMutableSetRef v77 = *(unsigned int (**)(CFTypeRef, uint64_t, CFTypeRef *))(v76 + 40);
      if (v77
        && !v77(a2, v74, &v115)
        && (!_createDescriptionForReader(a1, v115, v74, 0, a5, 2, 0, &v125)
         || !_createDummyReaderDescription(a5, &v125)))
      {
        int v109 = 0;
        if (!_getAuxiliaryImageGeometryForIndex_1(a1, v105, v74, v78, 0, 0, &v109))
        {
          uint64_t v80 = FigCFDictionarySetInt();
          if (v80)
          {
            uint64_t v25 = v80;
            goto LABEL_75;
          }
        }
        int v108 = 0;
        if (!_getAuxiliaryImageTypeForIndex_1((void *)a1, v105, v74, v79, (unint64_t)&v108, 0))
        {
          if (_copyAuxiliaryImageTypeInfo(a1, v105, v74, v81, 0, (uint64_t)&v124) || !v124 || v108 != 3)
          {
            int v83 = v125;
LABEL_180:
            _copyColorInfoForImageTypeWithIndex(a1, 2, v105, v74, v83);
            if (!CMPhotoCFDictionarySetInt(v83, @"AuxiliaryType", v108))
            {
              int v106 = 0;
              if (_getAuxiliaryImageTypeForIndex_1((void *)a1, v105, v74, v85, 0, (unint64_t)&v106)|| !CMPhotoCFDictionarySetInt32(v83, @"AuxiliaryNativePixelFormat", v106))
              {
                uint64_t v86 = FigPictureReaderGetFigBaseObject();
                uint64_t v87 = *(void *)(CMBaseObjectGetVTable() + 8);
                uint64_t v88 = v87 ? v87 : 0;
                uint64_t v89 = *(unsigned int (**)(uint64_t, uint64_t, const __CFAllocator *, __CFDictionary **))(v88 + 48);
                if (v89)
                {
                  if (!v89(v86, v102, a5, &v126))
                  {
                    CFDictionarySetValue(v83, @"AuxiliaryTypeURN", v126);
                    if (v108 == 4)
                    {
                      if (FigCFEqual()) {
                        CMPhotoDecompressionContainerAddMeteorHeadroomToDescriptionForInternalIndex((uint64_t *)a1, v105, v74, v83);
                      }
                    }
                  }
                }
              }
            }
            goto LABEL_191;
          }
          int v107 = 2;
          int v82 = _readAlphaInfoSEIPayload((uint64_t)v124, &v107);
          int v83 = v125;
          if (v82) {
            int v84 = 2;
          }
          else {
            int v84 = v107;
          }
          if (!CMPhotoCFDictionarySetInt(v125, @"AlphaPremultiplication", v84)) {
            goto LABEL_180;
          }
        }
      }
LABEL_191:
      if (v125) {
        CFArrayAppendValue(v55, v125);
      }
      a3 = v105;
      if (v126) {
        CFRelease(v126);
      }
      if (v124) {
        CFRelease(v124);
      }
      if (v125) {
        CFRelease(v125);
      }
      if (++v74 >= (uint64_t)v127[0]) {
        goto LABEL_205;
      }
    }
  }
  unint64_t v55 = 0;
LABEL_205:
  _copyColorInfoForImageTypeWithIndex(a1, 0, a3, -1, Mutable);
LABEL_206:
  value[0] = 0;
  uint64_t v126 = 0;
  v127[0] = 0;
  int v124 = 0;
  uint8x8_t v125 = 0;
  uint64_t v90 = FigPictureReaderGetFigBaseObject();
  uint64_t v91 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v91) {
    uint64_t v92 = v91;
  }
  else {
    uint64_t v92 = 0;
  }
  int v93 = *(uint64_t (**)(uint64_t, void, const __CFAllocator *, void **))(v92 + 48);
  if (v93)
  {
    uint64_t ClliDictionary = v93(v90, *MEMORY[0x1E4F333D0], a5, value);
    if (!ClliDictionary)
    {
      CFDictionaryRef Extensions = CMFormatDescriptionGetExtensions((CMFormatDescriptionRef)value[0]);
      if (!Extensions)
      {
LABEL_251:
        uint64_t v25 = 0;
        goto LABEL_225;
      }
      CFDictionaryRef v96 = Extensions;
      CFDataRef v97 = (const __CFData *)CFDictionaryGetValue(Extensions, (const void *)*MEMORY[0x1E4F1ED88]);
      if (v97)
      {
        uint64_t ClliDictionary = CMPhotoCreateClliDictionary(v97, a5, v127);
        if (ClliDictionary) {
          goto LABEL_264;
        }
        CFDictionarySetValue(Mutable, @"ContentLightLevelInfo", v127[0]);
      }
      CFDataRef v98 = (const __CFData *)CFDictionaryGetValue(v96, (const void *)*MEMORY[0x1E4F1EE00]);
      if (v98)
      {
        uint64_t ClliDictionary = CMPhotoCreateMdcvDictionary(v98, a5, &v126);
        if (ClliDictionary) {
          goto LABEL_264;
        }
        CFDictionarySetValue(Mutable, @"MasteringDisplayColorVolume", v126);
      }
      uint64_t v99 = cmpweak_kCMFormatDescriptionExtension_ContentColorVolume();
      CFDataRef v100 = (const __CFData *)CFDictionaryGetValue(v96, v99);
      if (!v100) {
        goto LABEL_221;
      }
      uint64_t ClliDictionary = CMPhotoCreateCclvDictionary(v100, a5, &v125);
      if (!ClliDictionary)
      {
        CFDictionarySetValue(Mutable, @"ContentColorVolume", v125);
LABEL_221:
        CFDataRef v101 = (const __CFData *)CFDictionaryGetValue(v96, (const void *)*MEMORY[0x1E4F1ED30]);
        if (v101)
        {
          uint64_t v25 = CMPhotoCreateAmveDictionary(v101, a5, &v124);
          if (!v25) {
            CFDictionarySetValue(Mutable, @"AmbientViewingEnvironment", v124);
          }
          goto LABEL_225;
        }
        goto LABEL_251;
      }
    }
LABEL_264:
    uint64_t v25 = ClliDictionary;
    goto LABEL_225;
  }
  uint64_t v25 = 4294954514;
LABEL_225:
  if (value[0]) {
    CFRelease(value[0]);
  }
  if (v127[0]) {
    CFRelease(v127[0]);
  }
  if (v126) {
    CFRelease(v126);
  }
  if (v125) {
    CFRelease(v125);
  }
  if (v124) {
    CFRelease(v124);
  }
  if (!v25)
  {
    if (v119) {
      CFDictionarySetValue(Mutable, @"ExifPayloads", v119);
    }
    if (v118) {
      CFDictionarySetValue(Mutable, @"XMPPayloads", v118);
    }
    if (v117) {
      CFDictionarySetValue(Mutable, @"DebugPayloads", v117);
    }
    if (v116) {
      CFDictionarySetValue(Mutable, @"CustomMetadataPayloads", v116);
    }
    if (v54) {
      CFDictionarySetValue(Mutable, @"ThumbnailImages", v54);
    }
    if (v55) {
      CFDictionarySetValue(Mutable, @"AuxiliaryImages", v55);
    }
    if (v56) {
      CFDictionarySetValue(Mutable, @"AlternateImages", v56);
    }
    uint64_t v25 = 0;
    const void *v103 = Mutable;
    CFMutableDictionaryRef Mutable = 0;
  }
LABEL_75:
  if (v120) {
    CFRelease(v120);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v114) {
    CFRelease(v114);
  }
  if (v115) {
    CFRelease(v115);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v119) {
    CFRelease(v119);
  }
  if (v118) {
    CFRelease(v118);
  }
  if (v117) {
    CFRelease(v117);
  }
  if (v116) {
    CFRelease(v116);
  }
  if (v54) {
    CFRelease(v54);
  }
  if (v55) {
    CFRelease(v55);
  }
  if (v123) {
    CFRelease(v123);
  }
  if (v121) {
    CFRelease(v121);
  }
  if (v56) {
    CFRelease(v56);
  }
  if (v122) {
    CFRelease(v122);
  }
  return v25;
}

void _createMetadataDictionaryArrayForReader(uint64_t a1, const __CFAllocator *a2, int a3, __CFArray **a4)
{
  CFMutableDictionaryRef Mutable = 0;
  CFIndex capacity = 0;
  switch(a3)
  {
    case 0:
      uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v8) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = 0;
      }
      uint64_t v16 = *(unsigned int (**)(uint64_t, CFIndex *))(v9 + 48);
      if (!v16 || v16(a1, &capacity)) {
        return;
      }
      goto LABEL_26;
    case 1:
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = 0;
      }
      uint64_t v17 = *(unsigned int (**)(uint64_t, CFIndex *))(v11 + 64);
      if (!v17 || v17(a1, &capacity)) {
        return;
      }
      goto LABEL_26;
    case 2:
      uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v12) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v18 = *(unsigned int (**)(uint64_t, CFIndex *))(v13 + 80);
      if (!v18 || v18(a1, &capacity)) {
        return;
      }
      goto LABEL_26;
    case 4:
      uint64_t v14 = *(void **)(CMBaseObjectGetVTable() + 16);
      if (v14) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = 0;
      }
      if (*v15 < 2uLL) {
        return;
      }
      uint64_t v19 = (unsigned int (*)(uint64_t, CFIndex *))v15[13];
      if (!v19 || v19(a1, &capacity)) {
        return;
      }
LABEL_26:
      CFIndex v20 = capacity;
      if (capacity < 1)
      {
        CFMutableDictionaryRef Mutable = 0;
LABEL_101:
        *a4 = Mutable;
      }
      else
      {
        CFIndex v21 = 0;
        CFMutableDictionaryRef Mutable = 0;
        unint64_t v55 = (const void *)*MEMORY[0x1E4F1CFD0];
        unint64_t v54 = (const void *)*MEMORY[0x1E4F1CFC8];
        while (1)
        {
          if (!Mutable)
          {
            CFMutableDictionaryRef Mutable = CFArrayCreateMutable(a2, v20, MEMORY[0x1E4F1D510]);
            if (!Mutable) {
              return;
            }
          }
          uint64_t v61 = 0;
          uint64_t v62 = 0;
          uint64_t v60 = 0;
          CFTypeRef cf = 0;
          CFRange value = 0;
          unsigned int v57 = 0;
          CFMutableDictionaryRef v22 = CFDictionaryCreateMutable(a2, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          if (v22)
          {
            unint64_t v23 = 0;
            char v24 = 1;
            unint64_t v25 = 0;
            switch(a3)
            {
              case 0:
                uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 16);
                if (v26) {
                  uint64_t v27 = v26;
                }
                else {
                  uint64_t v27 = 0;
                }
                uint64_t v34 = *(uint64_t (**)(uint64_t, CFIndex, unsigned int *, uint64_t *, unint64_t **, uint64_t **, void, void))(v27 + 56);
                if (!v34) {
                  goto LABEL_73;
                }
                int v35 = v34(a1, v21, &v57, &v62, &v61, &v60, 0, 0);
                if (v35 != -12783)
                {
                  int v41 = v35;
                  char v24 = 0;
                  goto LABEL_60;
                }
                uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 16);
                if (v36) {
                  uint64_t v37 = v36;
                }
                else {
                  uint64_t v37 = 0;
                }
                unsigned int v42 = *(uint64_t (**)(uint64_t, CFIndex, void, uint64_t *, unint64_t **, uint64_t **, void, void))(v37 + 56);
                if (!v42) {
                  goto LABEL_73;
                }
                int v39 = v42(a1, v21, 0, &v62, &v61, &v60, 0, 0);
                goto LABEL_59;
              case 1:
                uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 16);
                if (v28) {
                  uint64_t v29 = v28;
                }
                else {
                  uint64_t v29 = 0;
                }
                CFDictionaryRef v38 = *(uint64_t (**)(uint64_t, CFIndex, uint64_t *, unint64_t **, uint64_t **, void, void))(v29 + 72);
                if (v38) {
                  goto LABEL_47;
                }
                goto LABEL_73;
              case 2:
                uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 16);
                if (v30) {
                  uint64_t v31 = v30;
                }
                else {
                  uint64_t v31 = 0;
                }
                CFDictionaryRef v38 = *(uint64_t (**)(uint64_t, CFIndex, uint64_t *, unint64_t **, uint64_t **, void, void))(v31 + 88);
                if (!v38) {
                  goto LABEL_73;
                }
LABEL_47:
                int v39 = v38(a1, v21, &v62, &v61, &v60, 0, 0);
                goto LABEL_59;
              case 4:
                uint64_t v32 = *(void **)(CMBaseObjectGetVTable() + 16);
                if (v32) {
                  unsigned int v33 = v32;
                }
                else {
                  unsigned int v33 = 0;
                }
                if (*v33 < 2uLL
                  || (CFDictionaryRef v40 = (uint64_t (*)(uint64_t, CFIndex, uint64_t *, unint64_t **, uint64_t **, void, void, void **, CFTypeRef *))v33[14]) == 0)
                {
LABEL_73:
                  int v41 = -12782;
LABEL_74:
                  CFRelease(v22);
                  CFMutableDictionaryRef v22 = 0;
                  break;
                }
                int v39 = v40(a1, v21, &v62, &v61, &v60, 0, 0, &value, &cf);
LABEL_59:
                int v41 = v39;
LABEL_60:
                if (v41) {
                  goto LABEL_74;
                }
                uint64_t v43 = v62;
                if (v62)
                {
                  if (v62 < 1)
                  {
                    unint64_t v25 = 0;
                    unint64_t v23 = -1;
                  }
                  else
                  {
                    unint64_t v25 = 0;
                    CFTypeID v45 = v60;
                    CFArrayRef v44 = v61;
                    unint64_t v23 = -1;
                    do
                    {
                      unint64_t v47 = *v44++;
                      unint64_t v46 = v47;
                      uint64_t v49 = *v45++;
                      uint64_t v48 = v49;
                      unint64_t v50 = v49 + v46;
                      if (v25 > v49 + v46) {
                        unint64_t v50 = v25;
                      }
                      if (__CFADD__(v48, v46)) {
                        unint64_t v25 = -1;
                      }
                      else {
                        unint64_t v25 = v50;
                      }
                      if (v23 >= v46) {
                        unint64_t v23 = v46;
                      }
                      --v43;
                    }
                    while (v43);
                  }
                }
                else
                {
                  unint64_t v23 = 0;
                  unint64_t v25 = 0;
                }
LABEL_77:
                int v51 = CMPhotoCFDictionarySetInt64(v22, @"DataOffset", v23);
                if (v51
                  || (int v51 = CMPhotoCFDictionarySetSize(v22, @"DataLength", v25 - v23)) != 0
                  || (v62 != 1 ? (CFTypeRef v52 = v54) : (CFTypeRef v52 = v55),
                      (CFDictionarySetValue(v22, @"DataIsContiguous", v52), (v24 & 1) == 0)
                   && (int v51 = CMPhotoCFDictionarySetSize(v22, @"TiffOffset", v57)) != 0))
                {
                  int v41 = v51;
                  goto LABEL_74;
                }
                if (value) {
                  CFDictionarySetValue(v22, @"URI", value);
                }
                if (cf) {
                  CFDictionarySetValue(v22, @"Name", cf);
                }
                int v41 = 0;
                break;
              default:
                goto LABEL_77;
            }
          }
          else
          {
            int v41 = -16991;
          }
          if (value) {
            CFRelease(value);
          }
          if (cf) {
            CFRelease(cf);
          }
          free(v61);
          free(v60);
          if (v41) {
            break;
          }
          CFArrayAppendValue(Mutable, v22);
          if (v22) {
            CFRelease(v22);
          }
          ++v21;
          CFIndex v20 = capacity;
          if (v21 >= capacity) {
            goto LABEL_101;
          }
        }
        CFRelease(Mutable);
      }
      return;
    default:
      goto LABEL_101;
  }
}

uint64_t CMPhotoPictureReaderCopyImageBitDepth(const void *a1, CFTypeRef *a2)
{
  CMFormatDescriptionRef desc = 0;
  CFTypeRef v46 = 0;
  int v44 = 0;
  CFDictionaryRef theDict = 0;
  CFAllocatorRef v4 = CFGetAllocator(a1);
  uint64_t FigBaseObject = FigPictureReaderGetFigBaseObject();
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, void, CFAllocatorRef, CFDictionaryRef *))(v7 + 48);
  if (v8)
  {
    uint64_t v9 = v8(FigBaseObject, *MEMORY[0x1E4F33438], v4, &theDict);
    if (v9)
    {
      if (theDict) {
        CFRelease(theDict);
      }
      if (v9 == -12783)
      {
        uint64_t v9 = 4294950303;
        goto LABEL_10;
      }
    }
    else
    {
      CFTypeRef v46 = theDict;
    }
  }
  else
  {
    uint64_t v9 = 4294954514;
  }
  if (v9 && v9 != -16993) {
    goto LABEL_83;
  }
LABEL_10:
  if (v46)
  {
    CFTypeRef v10 = 0;
    goto LABEL_69;
  }
  uint64_t FourCCPropertyFromReader = _getFourCCPropertyFromReader(a1, *MEMORY[0x1E4F333F8], &v44);
  if (FourCCPropertyFromReader)
  {
    uint64_t v9 = FourCCPropertyFromReader;
LABEL_83:
    CFTypeRef v10 = 0;
    goto LABEL_84;
  }
  CFTypeRef v10 = 0;
  int v12 = v44;
  if (v44 > 1768912491)
  {
    if (v44 == 1953325424) {
      goto LABEL_19;
    }
    int v13 = 1768912492;
  }
  else
  {
    if (v44 == 1735551332) {
      goto LABEL_19;
    }
    int v13 = 1768187246;
  }
  if (v44 != v13)
  {
LABEL_67:
    if (v46)
    {
      uint64_t v9 = 0;
LABEL_69:
      if (a2)
      {
        *a2 = v46;
        CFTypeRef v46 = 0;
      }
      goto LABEL_84;
    }
    CFAllocatorRef v37 = CFGetAllocator(a1);
    uint64_t v38 = FigPictureReaderGetFigBaseObject();
    uint64_t v39 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v39) {
      uint64_t v40 = v39;
    }
    else {
      uint64_t v40 = 0;
    }
    int v41 = *(uint64_t (**)(uint64_t, void, CFAllocatorRef, CMFormatDescriptionRef *))(v40 + 48);
    if (!v41)
    {
      uint64_t v9 = 4294954514;
      goto LABEL_84;
    }
    uint64_t v36 = v41(v38, *MEMORY[0x1E4F333D0], v37, &desc);
    if (!v36)
    {
      if (CMFormatDescriptionGetMediaSubType(desc) == 1785750887) {
        uint64_t v42 = CMPhotoPictureReaderCopyImageBitDepthForJPEG((uint64_t)a1, (CFMutableArrayRef *)&v46);
      }
      else {
        uint64_t v42 = CMPhotoCopyImageBitDepthFromFormatDescription(desc, (CFMutableArrayRef *)&v46);
      }
      uint64_t v9 = v42;
      if (v42) {
        goto LABEL_84;
      }
      goto LABEL_69;
    }
LABEL_91:
    uint64_t v9 = v36;
    goto LABEL_84;
  }
LABEL_19:
  CFTypeRef v10 = 0;
  CFTypeRef v49 = 0;
  CFDictionaryRef theDict = 0;
  CFTypeRef v47 = 0;
  CFTypeRef cf = 0;
  if (v44 > 1768912491)
  {
    if (v44 == 1953325424) {
      goto LABEL_25;
    }
    int v14 = 1768912492;
  }
  else
  {
    if (v44 == 1735551332)
    {
      uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v24) {
        uint64_t v25 = v24;
      }
      else {
        uint64_t v25 = 0;
      }
      uint64_t v27 = *(uint64_t (**)(const void *, CFTypeRef *))(v25 + 8);
      if (v27)
      {
        uint64_t v19 = v27(a1, &cf);
        if (v19) {
          goto LABEL_93;
        }
        CFTypeRef v28 = cf;
        uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v30 = v29 ? v29 : 0;
        uint64_t v31 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(v30 + 8);
        if (v31)
        {
          uint64_t v19 = v31(v28, &v47);
          if (v19) {
            goto LABEL_93;
          }
          uint64_t CMBaseObject = FigPictureTileCursorGetCMBaseObject();
          uint64_t v33 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v34 = v33 ? v33 : 0;
          int v35 = *(uint64_t (**)(uint64_t, void, void, CFTypeRef *))(v34 + 48);
          if (v35)
          {
            uint64_t v19 = v35(CMBaseObject, *MEMORY[0x1E4F33478], *MEMORY[0x1E4F1CF80], &v49);
            if (!v19)
            {
              CFTypeRef v10 = v49;
              goto LABEL_41;
            }
            goto LABEL_93;
          }
        }
      }
LABEL_56:
      CFTypeRef v10 = 0;
      uint64_t v9 = 4294954514;
      goto LABEL_57;
    }
    int v14 = 1768187246;
  }
  if (v44 != v14) {
    goto LABEL_41;
  }
LABEL_25:
  uint64_t v15 = FigPictureReaderGetFigBaseObject();
  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v16) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v18 = *(uint64_t (**)(uint64_t, void, void, CFDictionaryRef *))(v17 + 48);
  if (!v18) {
    goto LABEL_56;
  }
  uint64_t v19 = v18(v15, *MEMORY[0x1E4F333A0], *MEMORY[0x1E4F1CF80], &theDict);
  if (!v19)
  {
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F333B8]);
    if (!Value) {
      goto LABEL_92;
    }
    CFArrayRef v21 = Value;
    CFTypeID v22 = CFGetTypeID(Value);
    if (v22 != CFArrayGetTypeID()) {
      goto LABEL_92;
    }
    CFIndex Count = CFArrayGetCount(v21);
    if (v12 == 1768187246)
    {
      if (Count != 1)
      {
LABEL_92:
        uint64_t v19 = FigSignalErrorAt();
        goto LABEL_93;
      }
    }
    else if (Count <= 0)
    {
      goto LABEL_92;
    }
    unsigned int ValueAtIndex = CFArrayGetValueAtIndex(v21, 0);
    if (ValueAtIndex) {
      CFTypeRef v10 = CFRetain(ValueAtIndex);
    }
    else {
      CFTypeRef v10 = 0;
    }
LABEL_41:
    uint64_t v9 = 0;
    CFTypeRef v49 = 0;
    goto LABEL_57;
  }
LABEL_93:
  uint64_t v9 = v19;
  CFTypeRef v10 = 0;
LABEL_57:
  if (cf) {
    CFRelease(cf);
  }
  if (v47) {
    CFRelease(v47);
  }
  if (theDict) {
    CFRelease(theDict);
  }
  if (v49) {
    CFRelease(v49);
  }
  if (!v9)
  {
    uint64_t v36 = CMPhotoPictureReaderCopyImageBitDepth(v10, &v46);
    if (v36) {
      goto LABEL_91;
    }
    goto LABEL_67;
  }
LABEL_84:
  if (desc) {
    CFRelease(desc);
  }
  if (v46) {
    CFRelease(v46);
  }
  if (v10) {
    CFRelease(v10);
  }
  return v9;
}

uint64_t CMPhotoPictureReaderGetImageCodecTypeFromReader(const void *a1, void *a2)
{
  return _getFourCCPropertyFromReader(a1, *MEMORY[0x1E4F33398], a2);
}

__CFString *cmpweak_kCMFormatDescriptionExtension_ContentColorVolume()
{
  if (MEMORY[0x1E4F1ED80]) {
    return (__CFString *)*MEMORY[0x1E4F1ED80];
  }
  else {
    return @"ContentColorVolume";
  }
}

uint64_t _getDataRangeFromReader(uint64_t a1, unint64_t *a2)
{
  CFTypeRef v38 = 0;
  CFTypeRef cf = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  int v35 = 0;
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, CFTypeRef *))(v5 + 8);
  if (!v6) {
    goto LABEL_42;
  }
  uint64_t v7 = v6(a1, &cf);
  if (v7) {
    goto LABEL_48;
  }
  CFTypeRef v8 = cf;
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v10 = v9 ? v9 : 0;
  uint64_t v11 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(v10 + 8);
  if (!v11)
  {
LABEL_42:
    uint64_t v33 = 4294954514;
    goto LABEL_43;
  }
  uint64_t v7 = v11(v8, &v38);
  if (!v7)
  {
    unint64_t v12 = 0;
    unint64_t v13 = -1;
    while (1)
    {
      int v14 = v36;
      if (v36)
      {
        uint64_t v36 = 0;
        free(v14);
      }
      uint64_t v15 = v35;
      if (v35)
      {
        int v35 = 0;
        free(v15);
      }
      CFTypeRef v16 = v38;
      uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v18 = v17 ? v17 : 0;
      uint64_t v19 = *(uint64_t (**)(CFTypeRef, uint64_t *, void **, void **, void, void))(v18 + 40);
      if (!v19) {
        goto LABEL_42;
      }
      uint64_t v7 = v19(v16, &v37, &v36, &v35, 0, 0);
      if (v7) {
        break;
      }
      uint64_t v20 = v37;
      if (v37)
      {
        if (v37 >= 1)
        {
          CFTypeID v22 = (uint64_t *)v35;
          CFArrayRef v21 = (unint64_t *)v36;
          do
          {
            unint64_t v24 = *v21++;
            unint64_t v23 = v24;
            uint64_t v26 = *v22++;
            uint64_t v25 = v26;
            unint64_t v27 = v26 + v23;
            if (v12 > v26 + v23) {
              unint64_t v27 = v12;
            }
            if (__CFADD__(v25, v23)) {
              unint64_t v12 = -1;
            }
            else {
              unint64_t v12 = v27;
            }
            if (v13 >= v23) {
              unint64_t v13 = v23;
            }
            --v20;
          }
          while (v20);
        }
      }
      else
      {
        unint64_t v13 = 0;
        unint64_t v12 = 0;
      }
      CFTypeRef v28 = v38;
      uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v30 = v29 ? v29 : 0;
      uint64_t v31 = *(uint64_t (**)(CFTypeRef, void, void))(v30 + 16);
      if (!v31) {
        goto LABEL_42;
      }
      uint64_t v32 = v31(v28, 0, 0);
      if (v32)
      {
        uint64_t v33 = v32;
        if (v32 == -17171)
        {
          uint64_t v33 = 0;
          if (a2)
          {
            *a2 = v13;
            a2[1] = v12 - v13;
          }
        }
        goto LABEL_43;
      }
    }
  }
LABEL_48:
  uint64_t v33 = v7;
LABEL_43:
  if (cf) {
    CFRelease(cf);
  }
  if (v38) {
    CFRelease(v38);
  }
  free(v36);
  free(v35);
  return v33;
}

void _copyColorInfoForImageTypeWithIndex(uint64_t a1, int a2, uint64_t a3, uint64_t a4, __CFDictionary *a5)
{
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  CFTypeRef v27 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v25 = 0;
  CFTypeRef v26 = 0;
  if (!a5)
  {
LABEL_28:
    unint64_t v23 = 0;
    goto LABEL_29;
  }
  if (a2 == 2)
  {
    uint64_t v12 = *(void *)(a1 + 48);
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    CFTypeRef v16 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *, void))(v14 + 16);
    if (!v16 || v16(v12, a3, &v25, 0)) {
      goto LABEL_28;
    }
    CFTypeRef v17 = v25;
    uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v19 = v18 ? v18 : 0;
    uint64_t v20 = *(unsigned int (**)(CFTypeRef, uint64_t, CFTypeRef *))(v19 + 40);
    if (!v20 || v20(v17, a4, &v26)) {
      goto LABEL_28;
    }
  }
  else
  {
    if (a2) {
      goto LABEL_28;
    }
    uint64_t v8 = *(void *)(a1 + 48);
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v10 = v9 ? v9 : 0;
    uint64_t v15 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *, void))(v10 + 16);
    if (!v15 || v15(v8, a3, &v26, 0)) {
      goto LABEL_28;
    }
  }
  _copyColorInfoForItem((unsigned char *)a1, v26, 0, 0, 0, 0, (CFTypeRef *)&v30, &v29, &cf, &v27, 0, 0, 0);
  if (v30)
  {
    CFStringRef v21 = CGColorSpaceCopyName(v30);
    if (v21)
    {
      CFStringRef v22 = v21;
      CFDictionarySetValue(a5, @"NamedColorSpace", v21);
      CFRelease(v22);
    }
    else if (v30)
    {
      CFDictionarySetValue(a5, @"ColorSpace", v30);
    }
  }
  if (!v29 && !cf && !v27) {
    goto LABEL_28;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  unint64_t v23 = Mutable;
  if (Mutable)
  {
    if (v29) {
      CFDictionarySetValue(Mutable, @"ColorPrimaries", v29);
    }
    if (cf) {
      CFDictionarySetValue(v23, @"TransferFunction", cf);
    }
    if (v27) {
      CFDictionarySetValue(v23, @"YCbCrMatrix", v27);
    }
    CFDictionarySetValue(a5, @"NclxColor", v23);
  }
  else
  {
    FigSignalErrorAt();
  }
LABEL_29:
  if (v30) {
    CFRelease(v30);
  }
  if (v29) {
    CFRelease(v29);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v27) {
    CFRelease(v27);
  }
  if (v26) {
    CFRelease(v26);
  }
  if (v25) {
    CFRelease(v25);
  }
  if (v23) {
    CFRelease(v23);
  }
}

uint64_t FigPictureReaderGetThumbnailCount(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  if (!v6) {
    return 4294954514;
  }
  return v6(a1, a2);
}

uint64_t FigPictureReaderGetAuxiliaryImageCount(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 32);
  if (!v6) {
    return 4294954514;
  }
  return v6(a1, a2);
}

BOOL cmpweak_exists_kCMFormatDescriptionExtension_ContentColorVolume()
{
  return MEMORY[0x1E4F1ED80] != 0;
}

uint64_t CMPhotoCreateClliDictionary(const __CFData *a1, const __CFAllocator *a2, __CFDictionary **a3)
{
  uint64_t v3 = 4294950306;
  if (a1 && a3)
  {
    if (CFDataGetLength(a1) != 4) {
      return 4294950194;
    }
    BytePtr = CFDataGetBytePtr(a1);
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a2, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!Mutable) {
      return 4294950305;
    }
    uint64_t v9 = Mutable;
    uint64_t v10 = CMPhotoCFDictionarySetInt32(Mutable, @"MaxContentLightLevel", bswap32(*(unsigned __int16 *)BytePtr) >> 16);
    if (v10)
    {
      uint64_t v3 = v10;
    }
    else
    {
      uint64_t v3 = CMPhotoCFDictionarySetInt32(v9, @"MaxPicAverageLightLevel", bswap32(*((unsigned __int16 *)BytePtr + 1)) >> 16);
      if (!v3)
      {
        *a3 = v9;
        return v3;
      }
    }
    CFRelease(v9);
  }
  return v3;
}

void _callbackDataProviderReleaseInfo(void *a1)
{
  FigSimpleMutexDestroy();
  int v2 = (const void *)a1[1];
  if (v2)
  {
    CFRelease(v2);
    a1[1] = 0;
  }
  uint64_t v3 = (__CVBuffer *)a1[2];
  if (v3)
  {
    CVPixelBufferUnlockBaseAddress(v3, 0);
    uint64_t v4 = (const void *)a1[2];
    if (v4) {
      CFRelease(v4);
    }
  }
  free(a1);
}

double CMPhotoCodecSessionPoolClass_Init(_OWORD *a1)
{
  double result = 0.0;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t _applyDecodeStrategy(long long *a1, uint64_t a2, const void *a3, const void *a4, char a5, CFTypeRef *a6, CVPixelBufferRef *a7)
{
  uint64_t v8 = a6;
  uint64_t v107 = *MEMORY[0x1E4F143B8];
  CVPixelBufferRef v104 = 0;
  CVPixelBufferRef v105 = 0;
  uint64_t v11 = *(__CVBuffer **)(a2 + 88);
  if (*(unsigned char *)(a2 + 105)) {
    BOOL v12 = v11 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    uint64_t v14 = a4;
    uint64_t v15 = a3;
    char v16 = a5;
    IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)(a2 + 88));
    a5 = v16;
    a3 = v15;
    a4 = v14;
    uint64_t v8 = a6;
    if (IOSurface)
    {
      uint64_t v31 = FigSignalErrorAt();
LABEL_78:
      uint64_t v30 = v31;
      goto LABEL_79;
    }
  }
  BOOL v18 = 1;
  if (!*(unsigned char *)(a2 + 309)) {
    BOOL v18 = *(unsigned char *)(a2 + 308) != 0;
  }
  int v103 = 1;
  *(_DWORD *)int v106 = 0;
  v106[4] = 0;
  char v19 = *(unsigned char *)(a2 + 306);
  char v20 = *(unsigned char *)(a2 + 305);
  char v21 = *(unsigned char *)(a2 + 21);
  *(_OWORD *)&v106[5] = *(_OWORD *)(a2 + 24);
  *(_OWORD *)&v106[21] = *(_OWORD *)(a2 + 40);
  uint64_t v74 = a7;
  CVPixelBufferRef cf = v11;
  if (*(unsigned char *)(a2 + 304)) {
    long long v102 = *(_OWORD *)(a2 + 256);
  }
  else {
    long long v102 = 0uLL;
  }
  int v22 = *(_DWORD *)(a2 + 4);
  int v23 = *(_DWORD *)(a2 + 124);
  char v24 = *(unsigned char *)(a2 + 3);
  uint64_t v25 = *(void *)(a2 + 112);
  char v75 = v18;
  if (v11) {
    char v26 = v18;
  }
  else {
    char v26 = 1;
  }
  int v73 = *(unsigned __int8 *)(a2 + 3);
  if ((v26 & 1) != 0 || *(unsigned char *)(a2 + 307))
  {
    long long v27 = a1[3];
    long long v98 = a1[2];
    long long v99 = v27;
    long long v28 = a1[5];
    long long v100 = a1[4];
    long long v101 = v28;
    long long v29 = a1[1];
    long long v96 = *a1;
    long long v97 = v29;
    *(_OWORD *)&v81[3] = *(_OWORD *)v106;
    v81[0] = v19;
    v81[1] = v20;
    v81[2] = v21;
    *(_OWORD *)int v82 = *(_OWORD *)&v106[16];
    *(void *)&v82[13] = *(void *)&v106[29];
    long long v83 = 0u;
    long long v84 = 0u;
    long long v85 = 0u;
    long long v86 = v102;
    int v87 = v22;
    int v88 = v23;
    char v89 = a5;
    char v90 = 0;
    char v91 = v24;
    char v93 = 0;
    int v92 = 0;
    uint64_t v94 = v25;
    uint64_t v95 = 0;
    uint64_t v30 = _decodeItem((BOOL *)&v96, a3, a4, 0, v81, &v103, 0, v8, &v105);
    if (!v30) {
      goto LABEL_17;
    }
LABEL_79:
    CFDictionaryRef v47 = 0;
    goto LABEL_69;
  }
  uint64_t v68 = *(void *)(a2 + 112);
  char v69 = a5;
  unsigned __int8 v70 = a3;
  unint64_t v71 = a4;
  CFIndex v72 = v8;
  CVPixelBufferRef v105 = (CVPixelBufferRef)CFRetain(v11);
  dispatch_queue_t v49 = dispatch_queue_create("bufferQueue", 0);
  if (!v49)
  {
    CFDictionaryRef v47 = 0;
    goto LABEL_82;
  }
  CFMutableSetRef v77 = v11;
  long long v50 = a1[3];
  long long v98 = a1[2];
  long long v99 = v50;
  long long v51 = a1[5];
  long long v100 = a1[4];
  long long v101 = v51;
  long long v52 = a1[1];
  long long v96 = *a1;
  long long v97 = v52;
  *(_OWORD *)&v81[3] = *(_OWORD *)v106;
  long long v78 = 0u;
  long long v79 = 0u;
  dispatch_queue_t v80 = v49;
  v81[0] = v19;
  v81[1] = v20;
  v81[2] = v21;
  *(_OWORD *)int v82 = *(_OWORD *)&v106[16];
  *(void *)&v82[13] = *(void *)&v106[29];
  long long v83 = 0u;
  long long v84 = 0u;
  long long v85 = 0u;
  long long v86 = v102;
  int v87 = v22;
  int v88 = v23;
  char v89 = v69;
  char v90 = 0;
  char v91 = v73;
  char v93 = 0;
  int v92 = 0;
  uint64_t v94 = v68;
  uint64_t v95 = 0;
  uint64_t v53 = v49;
  uint64_t v30 = _decodeItem((BOOL *)&v96, v70, v71, 0, v81, &v103, (long long *)&v77, v72, 0);
  dispatch_barrier_sync(v53, &__block_literal_global_8);
  dispatch_release(v53);
  if (v30) {
    goto LABEL_79;
  }
LABEL_17:
  if (*(unsigned char *)(a2 + 307))
  {
    uint64_t v31 = CMPhotoSetPixelBufferCLAPFromRect(v105, 1, 1, (double)*(unint64_t *)(a2 + 272), (double)*(unint64_t *)(a2 + 280), (double)*(unint64_t *)(a2 + 288), (double)*(unint64_t *)(a2 + 296));
    if (v31) {
      goto LABEL_78;
    }
  }
  if (CMPhotoPixelBufferHasCLAP(v105)) {
    BOOL v32 = *(unsigned char *)(a2 + 311) == 0;
  }
  else {
    BOOL v32 = 0;
  }
  unsigned int v33 = CMPhotoPixelBufferHasUnhandledIdentityMatrix(v105);
  if (*(void *)a1
    && CMPhotoDecompressionSessionAsyncRequestCancelled(*(void *)(*((void *)a1 + 1) + 16), *(void *)a1))
  {
    CFDictionaryRef v47 = 0;
    uint64_t v30 = 4294950191;
    goto LABEL_69;
  }
  uint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(v105);
  int v35 = PixelFormatType;
  int v36 = *((_DWORD *)a1 + 22);
  if (v36) {
    BOOL v37 = v36 == PixelFormatType;
  }
  else {
    BOOL v37 = 1;
  }
  int v38 = !v37;
  if (*(unsigned char *)(a2 + 8)) {
    BOOL v39 = *(_DWORD *)(a2 + 4) != PixelFormatType;
  }
  else {
    BOOL v39 = 1;
  }
  if ((v38 & v39) == 1)
  {
    int FullRangeForPixelFormat = CMPhotoGetFullRangeForPixelFormat(PixelFormatType);
    uint64_t v41 = *((unsigned int *)a1 + 22);
    if ((FullRangeForPixelFormat == v41 || CMPhotoGetFullRangeForPixelFormat(v41) == v35)
      && !CMPhotoCreateOtherRangePixelBufferWithBacking(v105, &v104))
    {
      if (v105) {
        CFRelease(v105);
      }
      uint64_t v42 = v104;
      CVPixelBufferRef v104 = 0;
      CVPixelBufferRef v105 = v42;
    }
  }
  CVPixelBufferRef v43 = v105;
  if (cf) {
    BOOL v44 = cf == v105;
  }
  else {
    BOOL v44 = 1;
  }
  char v45 = !v44;
  char v46 = v75;
  if (v32) {
    char v46 = 1;
  }
  if ((v46 & 1) == 0 && (v45 & 1) == 0 && !v33)
  {
    CFDictionaryRef v47 = 0;
LABEL_68:
    uint64_t v30 = 0;
    CVPixelBufferRef *v74 = v43;
    CVPixelBufferRef v105 = 0;
    goto LABEL_69;
  }
  if (!v73)
  {
    CFDictionaryRef v47 = 0;
    goto LABEL_59;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionaryRef v47 = Mutable;
  if (!Mutable)
  {
LABEL_82:
    uint64_t v30 = 4294950305;
    goto LABEL_69;
  }
  CMPhotoCFDictionarySetBoolean(Mutable, @"PreferLowMemory", v73);
LABEL_59:
  if (!*(unsigned char *)(a2 + 308)) {
    int v103 = 1;
  }
  unint64_t v54 = v105;
  uint64_t v55 = CVPixelBufferGetPixelFormatType(v105);
  uint64_t DefaultTripletsForTransfer = CMPhotoCreateDefaultTripletsForTransfer(v54, v55);
  int v58 = v57;
  *(void *)uint64_t v81 = cf;
  uint64_t v59 = *((void *)a1 + 4);
  uint64_t v60 = v105;
  BOOL v61 = *((unsigned char *)a1 + 49) == 0;
  int v62 = v103;
  uint64_t v63 = CVPixelBufferGetPixelFormatType(v105);
  uint64_t v66 = CMPhotoScaleAndRotateSessionTransformForSizeWithOptions(v59, v60, v47, v61, v62, v63, DefaultTripletsForTransfer, v58, *MEMORY[0x1E4F1DB20], *(CGFloat *)(MEMORY[0x1E4F1DB20] + 8), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 16), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 24), (double)*(unint64_t *)(a2 + 208), (double)*(unint64_t *)(a2 + 216), v64, v65, 1u, 0, *((unsigned char *)a1 + 48),
          *((unsigned char *)a1 + 50),
          *((unsigned char *)a1 + 51),
          *((unsigned char *)a1 + 52),
          (__CVBuffer **)v81);
  if (!v66)
  {
    if (cf && *(void *)v81) {
      CFRetain(*(CFTypeRef *)v81);
    }
    if (v105) {
      CFRelease(v105);
    }
    CVPixelBufferRef v43 = *(CVPixelBufferRef *)v81;
    goto LABEL_68;
  }
  uint64_t v30 = v66;
LABEL_69:
  if (v104) {
    CFRelease(v104);
  }
  if (v105) {
    CFRelease(v105);
  }
  if (v47) {
    CFRelease(v47);
  }
  return v30;
}

uint64_t CMPhotoPixelBufferHasCLAP(__CVBuffer *a1)
{
  return CVBufferHasAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24A78]);
}

uint64_t CMPhotoCreateCGImageWithPixelBuffer(const __CFAllocator *a1, CVPixelBufferRef pixelBuffer, int a3, CGImageRef *a4)
{
  if (!pixelBuffer) {
    return 4294950306;
  }
  uint64_t v6 = pixelBuffer;
  IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(pixelBuffer);
  if (a3 && IOSurface)
  {
    uint64_t v9 = CVPixelBufferGetIOSurface(v6);
    uint64_t PixelFormat = IOSurfaceGetPixelFormat(v9);
    space[0] = 0;
    double PixelBufferCLAPAsRect = CMPhotoGetPixelBufferCLAPAsRect(v6);
    double v13 = v12;
    size_t v105 = vcvtad_u64_f64(v14);
    size_t v107 = vcvtad_u64_f64(v15);
    int IsTiled = IOSurfaceIsTiled();
    v17.i32[0] = PixelFormat & 0xFFFFFFFD;
    v17.i32[1] = PixelFormat;
    v17.i32[2] = PixelFormat;
    v17.i32[3] = PixelFormat;
    int16x8_t v18 = (int16x8_t)vceqq_s32(vdupq_n_s32(PixelFormat), (int32x4_t)xmmword_1AB9D7820);
    char v19 = (PixelFormat != 1380411457) & ~vmaxv_u8((uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vceqq_s32(v17, (int32x4_t)xmmword_1AB9D7810), v18)));
    if (PixelFormat == 1815162994) {
      char v19 = 0;
    }
    if (PixelFormat == 1380410945) {
      char v19 = 0;
    }
    if (PixelFormat == 1815491698) {
      char v19 = 0;
    }
    if (PixelFormat == 1717856627) {
      char v19 = 0;
    }
    if (PixelFormat == 1751411059) {
      char v19 = 0;
    }
    CVPixelBufferRef v104 = a4;
    if ((v19 & 1) == 0 && !IsTiled)
    {
      int16x8_t v103 = v18;
      if (v9) {
        CFRetain(v9);
      }
      IOSurfaceLock(v9, 1u, 0);
      IOSurfaceIncrementUseCount(v9);
      if ((int)PixelFormat <= 1380410944)
      {
        if ((PixelFormat - 1278226736) <= 6 && ((1 << (PixelFormat - 48)) & 0x45) != 0)
        {
          int v20 = 4096;
          goto LABEL_95;
        }
        if (PixelFormat == 1111970369)
        {
          int v20 = 6;
          goto LABEL_95;
        }
LABEL_94:
        int v20 = 0;
LABEL_95:
        unint64_t v40 = vcvtad_u64_f64(PixelBufferCLAPAsRect);
        unint64_t v41 = vcvtad_u64_f64(v13);
        if (CMPhotoPixelBufferHasOpaqueAlphaFromAttachment(v6, 1))
        {
          int32x4_t v42 = (int32x4_t)v103;
          goto LABEL_97;
        }
        CGBitmapInfo v29 = 3;
        int32x4_t v42 = (int32x4_t)v103;
        if ((int)PixelFormat <= 1380411456)
        {
          if (PixelFormat != 1111970369)
          {
            if (PixelFormat == 1380410945) {
              goto LABEL_100;
            }
            goto LABEL_97;
          }
        }
        else
        {
          if (PixelFormat == 1380411457 || PixelFormat == 1815491698) {
            goto LABEL_100;
          }
          if (PixelFormat != 1815162994)
          {
LABEL_97:
            if (vmovn_s16(vmovn_hight_s32(*(int16x4_t *)&v42, v42)).i8[7])
            {
              CGBitmapInfo v29 = v20 | 0x2000;
              goto LABEL_192;
            }
            CGBitmapInfo v29 = v20;
LABEL_100:
            switch(PixelFormat)
            {
              case 0x6C313072:
                int v43 = 204800;
LABEL_191:
                v29 |= v43;
                goto LABEL_192;
              case 0x6C363472:
                v29 |= 0x1000u;
                goto LABEL_192;
              case 0x52476841:
                int v43 = 4352;
                goto LABEL_191;
              case 0x52476641:
                int v43 = 8448;
                goto LABEL_191;
            }
            if ((int)PixelFormat > 1717856626)
            {
              if (PixelFormat != 1717856627)
              {
                if (PixelFormat != 1751411059 && PixelFormat != 1751410032)
                {
LABEL_247:
                  uint64_t v39 = 1;
                  if ((int)PixelFormat <= 1278226735)
                  {
                    if ((PixelFormat - 1278226488) <= 0x30
                      && ((1 << (PixelFormat - 56)) & 0x1400000000001) != 0)
                    {
LABEL_198:
                      Usedunint64_t BitDepthForPixelFormat = CMPhotoGetUsedBitDepthForPixelFormat(PixelFormat);
                      size_t v35 = UsedBitDepthForPixelFormat;
                      if (PixelFormat == 1815162994) {
                        size_t v32 = 32;
                      }
                      else {
                        size_t v32 = UsedBitDepthForPixelFormat * v39;
                      }
                      size_t BytesPerRow = IOSurfaceGetBytesPerRow(v9);
                      BaseAddress = (char *)IOSurfaceGetBaseAddress(v9);
                      int v38 = CGDataProviderCreateWithData(v9, &BaseAddress[BytesPerRow * v41 + (v32 >> 3) * v40], BytesPerRow * v107, (CGDataProviderReleaseDataCallback)_callbackDataProviderReleaseSurface);
LABEL_202:
                      uint64_t ColorSpaceFromPixelBuffer = CMPhotoCreateColorSpaceFromPixelBuffer(v6, space, 0, 0);
                      long long v97 = space[0];
                      if (ColorSpaceFromPixelBuffer) {
                        goto LABEL_207;
                      }
                      CGImageRef v98 = CGImageCreate(v105, v107, v35, v32, BytesPerRow, space[0], v29, v38, 0, 1, kCGRenderingIntentPerceptual);
                      CGImageRef v99 = v98;
                      if (v39 == 1 && !v98)
                      {
                        if (CGColorSpaceGetNumberOfComponents(v97) == 1)
                        {
LABEL_206:
                          uint64_t ColorSpaceFromPixelBuffer = FigSignalErrorAt();
LABEL_207:
                          uint64_t v51 = ColorSpaceFromPixelBuffer;
                          if (!v97) {
                            goto LABEL_215;
                          }
                          goto LABEL_214;
                        }
                        if (v97) {
                          CFRelease(v97);
                        }
                        long long v97 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC00]);
                        space[0] = v97;
                        CGImageRef v99 = CGImageCreate(v105, v107, v35, v32, BytesPerRow, v97, v29, v38, 0, 1, kCGRenderingIntentPerceptual);
                      }
                      if (v99)
                      {
                        CMPhotoGetEncodeAccelerationModeOverride(v9, @"CMPhoto CGImage");
                        CGImageSetProperty();
                        uint64_t v51 = 0;
                        *CVPixelBufferRef v104 = v99;
                        if (!v97)
                        {
LABEL_215:
                          if (v38) {
                            CFRelease(v38);
                          }
                          char v24 = 0;
                          goto LABEL_218;
                        }
LABEL_214:
                        CFRelease(v97);
                        goto LABEL_215;
                      }
                      goto LABEL_206;
                    }
                  }
                  else if ((PixelFormat - 1278226736) <= 6 && ((1 << (PixelFormat - 48)) & 0x45) != 0 {
                         || PixelFormat == 1717855600
                  }
                         || PixelFormat == 1751410032)
                  {
                    goto LABEL_198;
                  }
LABEL_192:
                  if (PixelFormat == 1717856627 || PixelFormat == 1751411059) {
                    uint64_t v39 = 1;
                  }
                  else {
                    uint64_t v39 = 4;
                  }
                  goto LABEL_198;
                }
                goto LABEL_244;
              }
            }
            else if (PixelFormat != 1278226534)
            {
              if (PixelFormat != 1278226536)
              {
                if (PixelFormat != 1717855600) {
                  goto LABEL_247;
                }
                goto LABEL_245;
              }
LABEL_244:
              int v102 = 4352;
LABEL_246:
              v29 |= v102;
              goto LABEL_247;
            }
LABEL_245:
            int v102 = 8448;
            goto LABEL_246;
          }
        }
        int v20 = 4;
        goto LABEL_97;
      }
      if ((int)PixelFormat > 1815162993)
      {
        if (PixelFormat != 1815491698)
        {
          if (PixelFormat == 1815162994)
          {
            int v20 = 4;
            goto LABEL_95;
          }
          goto LABEL_94;
        }
      }
      else if (PixelFormat != 1380410945 && PixelFormat != 1380411457)
      {
        goto LABEL_94;
      }
      int v20 = 5;
      goto LABEL_95;
    }
    uint64_t FastestAlignment = CGBitmapGetFastestAlignment();
    int v23 = CFAllocatorAllocate(a1, 48, 0);
    char v24 = v23;
    if (!v23)
    {
      uint64_t v51 = FigSignalErrorAt();
      goto LABEL_218;
    }
    if ((int)PixelFormat > 1278555700)
    {
      if ((int)PixelFormat <= 1717856626)
      {
        if (PixelFormat == 1278555701)
        {
          int v34 = 1278555445;
          v24[6] = 1278555445;
          uint64_t v33 = 2 * v105;
          CGBitmapInfo v29 = 4102;
          size_t v32 = 16;
          goto LABEL_88;
        }
        int v28 = 1717855600;
      }
      else
      {
        if (PixelFormat == 1717856627 || PixelFormat == 1751411059) {
          goto LABEL_71;
        }
        int v28 = 1751410032;
      }
      if (PixelFormat != v28)
      {
LABEL_175:
        if ((unint64_t)CMPhotoGetBitDepthForPixelFormat(PixelFormat) < 9)
        {
          int v34 = 1111970369;
          v24[6] = 1111970369;
          uint64_t v33 = 4 * v105;
          CGBitmapInfo v29 = 8198;
          size_t v32 = 32;
        }
        else
        {
          if (PixelFormat == 1380410945) {
            int v91 = 1380410945;
          }
          else {
            int v91 = 1815491698;
          }
          if (PixelFormat == 1380410945) {
            int v92 = 8453;
          }
          else {
            int v92 = 4101;
          }
          if (PixelFormat == 1380411457) {
            int v34 = 1380411457;
          }
          else {
            int v34 = v91;
          }
          if (PixelFormat == 1380411457) {
            CGBitmapInfo v29 = 4357;
          }
          else {
            CGBitmapInfo v29 = v92;
          }
          v24[6] = v34;
          uint64_t v33 = 8 * v105;
          size_t v32 = 64;
        }
        goto LABEL_88;
      }
    }
    else if (((PixelFormat - 1278226488) > 0x30 {
            || ((1 << (PixelFormat - 56)) & 0x1400000000001) == 0)
    }
           && ((PixelFormat - 1278226736) > 6 || ((1 << (PixelFormat - 48)) & 0x45) == 0))
    {
      goto LABEL_175;
    }
LABEL_71:
    v23[6] = PixelFormat;
    CGBitmapInfo v29 = ((unint64_t)CMPhotoGetBitDepthForPixelFormat(PixelFormat) > 8) << 12;
    if ((int)PixelFormat > 1651926375)
    {
      if ((int)PixelFormat <= 1717856626)
      {
        if (PixelFormat == 1651926376) {
          goto LABEL_86;
        }
        int v30 = 1717855600;
      }
      else
      {
        if (PixelFormat == 1717856627 || PixelFormat == 1751411059) {
          goto LABEL_86;
        }
        int v30 = 1751410032;
      }
    }
    else if ((int)PixelFormat <= 1380410944)
    {
      if (PixelFormat == 1278226534) {
        goto LABEL_86;
      }
      int v30 = 1278226536;
    }
    else
    {
      if (PixelFormat == 1380410945 || PixelFormat == 1380411457) {
        goto LABEL_86;
      }
      int v30 = 1647719528;
    }
    if (PixelFormat != v30)
    {
LABEL_87:
      size_t v32 = CMPhotoGetUsedBitDepthForPixelFormat(PixelFormat);
      uint64_t v33 = CMPhotoGetBytesPerPixelForPixelFormat(PixelFormat) * v105;
      int v34 = v24[6];
LABEL_88:
      size_t v35 = CMPhotoGetUsedBitDepthForPixelFormat(v34);
      size_t BytesPerRow = (FastestAlignment + v33 - 1) & -FastestAlignment;
      *((void *)v24 + 4) = BytesPerRow;
      *((void *)v24 + 5) = BytesPerRow * v107;
      *((void *)v24 + 1) = CFRetain(v6);
      *((void *)v24 + 2) = 0;
      v24[7] = 0;
      uint64_t v37 = FigSimpleMutexCreate();
      *(void *)char v24 = v37;
      if (v37)
      {
        CGDataProviderDirectCallbacks callbacks = *(CGDataProviderDirectCallbacks *)byte_1F02DE370;
        int v38 = CGDataProviderCreateDirect(v24, BytesPerRow * v107, &callbacks);
        uint64_t v39 = 0;
        goto LABEL_202;
      }
      uint64_t v51 = 4294950305;
LABEL_218:
      free(v24);
      return v51;
    }
LABEL_86:
    v29 |= 0x100u;
    goto LABEL_87;
  }
  space[0] = 0;
  if (CVPixelBufferGetIOSurface(v6)) {
    BOOL v21 = IOSurfaceIsTiled() != 0;
  }
  else {
    BOOL v21 = 0;
  }
  uint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(v6);
  if ((int)PixelFormatType <= 1278226741)
  {
    if ((int)PixelFormatType > 1278226535)
    {
      if (PixelFormatType == 1278226536 || PixelFormatType == 1278226736) {
        goto LABEL_118;
      }
      unsigned __int16 v27 = 12594;
    }
    else
    {
      if (PixelFormatType == 1111970369 || PixelFormatType == 1278226488) {
        goto LABEL_56;
      }
      unsigned __int16 v27 = 12390;
    }
    int v31 = v27 | 0x4C300000;
    goto LABEL_117;
  }
  if ((int)PixelFormatType <= 1717856626)
  {
    if (PixelFormatType != 1278226742 && PixelFormatType != 1380401729)
    {
      int v31 = 1717855600;
      goto LABEL_117;
    }
  }
  else
  {
    if ((int)PixelFormatType <= 1751411058)
    {
      int v26 = 1717856627;
      goto LABEL_115;
    }
    if (PixelFormatType == 1751411059)
    {
LABEL_118:
      unint64_t BitDepthForPixelFormat = CMPhotoGetBitDepthForPixelFormat(PixelFormatType);
      unsigned int v47 = 1278226488;
      unsigned int v48 = 1278226742;
      BOOL v49 = BitDepthForPixelFormat > 8;
      goto LABEL_119;
    }
    if (PixelFormatType != 1815491698) {
      goto LABEL_151;
    }
  }
LABEL_56:
  if (!v21) {
    goto LABEL_123;
  }
  if ((int)PixelFormatType <= 1717855599)
  {
    if ((PixelFormatType - 1278226488) <= 0x30
      && ((1 << (PixelFormatType - 56)) & 0x1400000000001) != 0
      || (PixelFormatType - 1278226736) <= 6 && ((1 << (PixelFormatType - 48)) & 0x45) != 0)
    {
      goto LABEL_118;
    }
    goto LABEL_151;
  }
  int v26 = 1751411059;
LABEL_115:
  if (PixelFormatType == v26) {
    goto LABEL_118;
  }
  int v31 = 1751410032;
LABEL_117:
  if (PixelFormatType == v31) {
    goto LABEL_118;
  }
LABEL_151:
  BOOL v49 = (unint64_t)CMPhotoGetBitDepthForPixelFormat(PixelFormatType) > 8;
  unsigned int v47 = 1111970369;
  unsigned int v48 = 1815491698;
LABEL_119:
  if (v49) {
    uint64_t v50 = v48;
  }
  else {
    uint64_t v50 = v47;
  }
  uint64_t v51 = CMPhotoScaleAndRotateSessionTransformForSize(0, v6, a3, 1, v50, 0, 0, 1u, *MEMORY[0x1E4F1DB20], *(CGFloat *)(MEMORY[0x1E4F1DB20] + 8), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 16), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 24), *MEMORY[0x1E4F1DB30], *(double *)(MEMORY[0x1E4F1DB30] + 8), v45, v46, 0, 1u, space);
  uint64_t v6 = space[0];
  if (!v51)
  {
LABEL_123:
    *(void *)&callbacks.version = 0;
    uint64_t v52 = CVPixelBufferGetPixelFormatType(v6);
    uint64_t v53 = v52;
    if ((int)v52 <= 1278226741)
    {
      if (v52 == 1111970369) {
        goto LABEL_130;
      }
      int v54 = 1278226488;
    }
    else
    {
      if (v52 == 1278226742 || v52 == 1380401729) {
        goto LABEL_130;
      }
      int v54 = 1815491698;
    }
    if (v52 != v54)
    {
      uint64_t v57 = FigSignalErrorAt();
      goto LABEL_153;
    }
LABEL_130:
    uint64_t BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(v52);
    int HasOpaqueAlphaFromAttachment = CMPhotoPixelBufferHasOpaqueAlphaFromAttachment(v6, 1);
    uint64_t v57 = CVPixelBufferLockBaseAddress(v6, 1uLL);
    if (!v57)
    {
      if (CVPixelBufferGetPlaneCount(v6) == 1) {
        BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(v6, 0);
      }
      else {
        BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddress(v6);
      }
      uint64_t v59 = BaseAddressOfPlane;
      int v106 = HasOpaqueAlphaFromAttachment;
      if (CVPixelBufferGetPlaneCount(v6) == 1) {
        size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v6, 0);
      }
      else {
        size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRow(v6);
      }
      unint64_t v61 = BytesPerRowOfPlane;
      double v62 = CMPhotoGetPixelBufferCLAPAsRect(v6);
      double v64 = v63;
      double v66 = v65;
      double v68 = v67;
      uint64_t v108 = BytesPerPixelForPixelFormat;
      double v69 = v65 * (double)(unint64_t)BytesPerPixelForPixelFormat;
      size_t v70 = (unint64_t)(v67 * (double)(unint64_t)v69);
      uint64_t Data = CGBitmapAllocateData();
      if (!Data)
      {
        uint64_t v51 = 4294950305;
        goto LABEL_231;
      }
      CFIndex v72 = (const void *)Data;
      if ((unint64_t)v68)
      {
        int v73 = &v59[(unint64_t)(v64 * (double)v61)
                 + (unint64_t)(v62 * (double)(unint64_t)BytesPerPixelForPixelFormat)];
        unint64_t v74 = (unint64_t)v68;
        char v75 = (char *)Data;
        do
        {
          memcpy(v75, v73, (unint64_t)v69);
          v75 += (unint64_t)v69;
          v73 += v61;
          --v74;
        }
        while (v74);
      }
      uint64_t v76 = CVPixelBufferUnlockBaseAddress(v6, 1uLL);
      if (v76)
      {
        uint64_t v51 = v76;
      }
      else
      {
        CGDataProviderRef v77 = CGDataProviderCreateWithData(0, v72, v70, (CGDataProviderReleaseDataCallback)_callbackDataProviderReleaseImage);
        if (v77)
        {
          long long v78 = v77;
          uint64_t v79 = CMPhotoCreateColorSpaceFromPixelBuffer(v6, (CGColorSpace **)&callbacks, 0, 0);
          if (v79)
          {
            uint64_t v51 = v79;
            CGColorSpaceRef v88 = *(CGColorSpaceRef *)&callbacks.version;
            if (!*(void *)&callbacks.version) {
              goto LABEL_230;
            }
            goto LABEL_229;
          }
          if ((int)v53 > 1278226741)
          {
            size_t v80 = (unint64_t)v68;
            if (v53 != 1278226742)
            {
              uint64_t v81 = v108;
              if (v53 == 1380401729)
              {
                BOOL v83 = v106 == 0;
                int v84 = 16389;
                int v85 = 16387;
                goto LABEL_160;
              }
LABEL_159:
              BOOL v83 = v106 == 0;
              int v84 = 4101;
              int v85 = 4099;
LABEL_160:
              if (v83) {
                CGBitmapInfo v82 = v85;
              }
              else {
                CGBitmapInfo v82 = v84;
              }
LABEL_163:
              size_t v86 = CMPhotoGetBitDepthForPixelFormat(v53);
              size_t v87 = 8 * v81;
              CGColorSpaceRef v88 = *(CGColorSpaceRef *)&callbacks.version;
              CGImageRef v89 = CGImageCreate((unint64_t)v66, v80, v86, v87, (unint64_t)v69, *(CGColorSpaceRef *)&callbacks.version, v82, v78, 0, 1, kCGRenderingIntentPerceptual);
              if (v89)
              {
LABEL_228:
                uint64_t v51 = 0;
                *a4 = v89;
                if (!v88)
                {
LABEL_230:
                  CFRelease(v78);
                  goto LABEL_231;
                }
LABEL_229:
                CFRelease(v88);
                goto LABEL_230;
              }
              if ((int)v53 > 1717855599)
              {
                if ((int)v53 > 1751410031)
                {
                  if (v53 == 1751411059) {
                    goto LABEL_222;
                  }
                  int v90 = 1751410032;
                }
                else
                {
                  if (v53 == 1717855600) {
                    goto LABEL_222;
                  }
                  int v90 = 1717856627;
                }
                if (v53 != v90) {
                  goto LABEL_223;
                }
              }
              else if (((v53 - 1278226488) > 0x30 {
                      || ((1 << (v53 - 56)) & 0x1400000000001) == 0)
              }
                     && ((v53 - 1278226736) > 6 || ((1 << (v53 - 48)) & 0x45) == 0))
              {
                goto LABEL_223;
              }
LABEL_222:
              if (CGColorSpaceGetNumberOfComponents(v88) == 1) {
                goto LABEL_223;
              }
              if (v88) {
                CFRelease(v88);
              }
              CGColorSpaceRef v88 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC00]);
              size_t v100 = CMPhotoGetBitDepthForPixelFormat(v53);
              CGImageRef v89 = CGImageCreate((unint64_t)v66, v80, v100, v87, (unint64_t)v69, v88, v82, v78, 0, 1, kCGRenderingIntentPerceptual);
              if (!v89)
              {
LABEL_223:
                uint64_t v51 = FigSignalErrorAt();
                if (!v88) {
                  goto LABEL_230;
                }
                goto LABEL_229;
              }
              goto LABEL_228;
            }
            CGBitmapInfo v82 = 4096;
          }
          else
          {
            size_t v80 = (unint64_t)v68;
            if (v53 != 1111970369)
            {
              uint64_t v81 = v108;
              if (v53 == 1278226488)
              {
                CGBitmapInfo v82 = 0;
                goto LABEL_163;
              }
              goto LABEL_159;
            }
            if (v106) {
              CGBitmapInfo v82 = 8198;
            }
            else {
              CGBitmapInfo v82 = 8196;
            }
          }
          uint64_t v81 = v108;
          goto LABEL_163;
        }
        uint64_t v51 = 4294950305;
      }
      CGBitmapFreeData();
      goto LABEL_231;
    }
LABEL_153:
    uint64_t v51 = v57;
LABEL_231:
    uint64_t v6 = space[0];
  }
  if (v6) {
    CFRelease(v6);
  }
  return v51;
}

uint64_t CMPhotoGetUsedBitDepthForPixelFormat(int a1)
{
  uint64_t v1 = 32;
  if (a1 > 1734501175)
  {
    if (a1 > 1936077875)
    {
      if (a1 <= 1953903667)
      {
        if (a1 <= 1952854575)
        {
          if (a1 > 1937125937)
          {
            if (a1 == 1937125938) {
              return 16;
            }
            unsigned __int16 v7 = 13364;
          }
          else
          {
            if (a1 == 1936077876) {
              return 16;
            }
            unsigned __int16 v7 = 12848;
          }
          int v4 = v7 | 0x73760000;
        }
        else if (a1 <= 1952855091)
        {
          if (a1 == 1952854576) {
            return 16;
          }
          int v4 = 1952854578;
        }
        else
        {
          if (a1 == 1952855092 || a1 == 1953903152) {
            return 16;
          }
          int v4 = 1953903154;
        }
        goto LABEL_117;
      }
      if (a1 > 2019963439)
      {
        if (a1 <= 2019963955)
        {
          if (a1 == 2019963440) {
            return 16;
          }
          unsigned __int16 v6 = 12850;
        }
        else
        {
          if (a1 == 2037741171 || a1 == 2037741158) {
            return 8;
          }
          unsigned __int16 v6 = 13364;
        }
        int v4 = v6 | 0x78660000;
        goto LABEL_117;
      }
      if (a1 > 2016686639)
      {
        if (a1 == 2016686640 || a1 == 2016686642) {
          return 16;
        }
        int v4 = 2016687156;
        goto LABEL_117;
      }
      if (a1 == 1953903668) {
        return 16;
      }
      int v8 = 1999843442;
    }
    else
    {
      if (a1 <= 1882468911)
      {
        if (a1 <= 1751410031)
        {
          if (a1 > 1735549491)
          {
            if (a1 == 1735549492) {
              return 16;
            }
            int v3 = 1735549752;
            goto LABEL_111;
          }
          if (a1 == 1734501176) {
            return 8;
          }
          int v4 = 1734505012;
          goto LABEL_117;
        }
        if (a1 <= 1751527983)
        {
          if (a1 == 1751410032) {
            return 16;
          }
          int v4 = 1751411059;
          goto LABEL_117;
        }
        if (a1 == 1751527984) {
          return 16;
        }
        if (a1 != 1815162994)
        {
          int v4 = 1815491698;
          goto LABEL_117;
        }
        return 10;
      }
      if (a1 > 1919379251)
      {
        if (a1 > 1932996148)
        {
          if (a1 == 1932996149 || a1 == 1936077360) {
            return 16;
          }
          int v4 = 1936077362;
          goto LABEL_117;
        }
        if (a1 == 1919379252) {
          return 16;
        }
        int v8 = 1919381552;
      }
      else
      {
        if (a1 > 1919365989)
        {
          if (a1 == 1919365990) {
            return v1;
          }
          if (a1 != 1919365992)
          {
            int v3 = 1919378232;
            goto LABEL_111;
          }
          return 16;
        }
        if (a1 == 1882468912) {
          return 10;
        }
        int v8 = 1885745712;
      }
    }
    if (a1 != v8) {
      return 0;
    }
    return 10;
  }
  if (a1 > 1279340599)
  {
    if (a1 > 1650942775)
    {
      if (a1 > 1651925815)
      {
        if (a1 > 1652056887)
        {
          if (a1 != 1652056888)
          {
            if (a1 == 1717855600) {
              return v1;
            }
            int v2 = 1717856627;
            goto LABEL_61;
          }
          return 8;
        }
        if (a1 == 1651925816) {
          return 8;
        }
        int v4 = 1651926376;
      }
      else if (a1 <= 1650946097)
      {
        if (a1 == 1650942776) {
          return 8;
        }
        int v4 = 1650943796;
      }
      else
      {
        if (a1 == 1650946098) {
          return 12;
        }
        if (a1 == 1651519798) {
          return 16;
        }
        int v4 = 1651847472;
      }
      goto LABEL_117;
    }
    if (a1 > 1380410944)
    {
      if (a1 <= 1647392368)
      {
        if (a1 == 1380410945) {
          return v1;
        }
        int v4 = 1380411457;
      }
      else
      {
        if (a1 == 1647392369 || a1 == 1647589490) {
          return 16;
        }
        int v4 = 1647719528;
      }
      goto LABEL_117;
    }
    if (a1 <= 1378955370)
    {
      if (a1 == 1279340600) {
        return 8;
      }
      int v4 = 1279340854;
      goto LABEL_117;
    }
    if (a1 != 1378955371)
    {
      int v3 = 1380401729;
      goto LABEL_111;
    }
    return 10;
  }
  if (a1 <= 875836517)
  {
    if (a1 > 843264309)
    {
      if (a1 <= 875704437)
      {
        if (a1 == 843264310) {
          return 16;
        }
        unsigned __int16 v5 = 12390;
      }
      else
      {
        if (a1 == 875704438 || a1 == 875704934) {
          return 8;
        }
        unsigned __int16 v5 = 12918;
      }
      int v3 = v5 | 0x34320000;
LABEL_111:
      if (a1 == v3) {
        return 8;
      }
      return 0;
    }
    if (a1 > 825437746)
    {
      if (a1 == 825437747) {
        return 16;
      }
      int v3 = 843264056;
      goto LABEL_111;
    }
    if (a1 == 32) {
      return 8;
    }
    int v4 = 825306677;
LABEL_117:
    if (a1 != v4) {
      return 0;
    }
    return 16;
  }
  if (a1 > 1278226535)
  {
    if (((a1 - 1278226736) > 6 || ((1 << (a1 - 48)) & 0x45) == 0) && a1 != 1278226536)
    {
      if (a1 == 1278555445) {
        return 5;
      }
      return 0;
    }
    return 16;
  }
  if (a1 <= 1111970368)
  {
    if (a1 != 875836518)
    {
      int v3 = 875836534;
      goto LABEL_111;
    }
    return 8;
  }
  if (a1 == 1111970369 || a1 == 1278226488) {
    return 8;
  }
  int v2 = 1278226534;
LABEL_61:
  if (a1 != v2) {
    return 0;
  }
  return v1;
}

uint64_t CMPhotoGetBitDepthForPixelFormat(uint64_t a1)
{
  int UncompressedPixelFormatFromCompressedPixelFormat = CMPhotoGetUncompressedPixelFormatFromCompressedPixelFormat(a1);
  uint64_t v2 = 32;
  if (UncompressedPixelFormatFromCompressedPixelFormat > 1734505011)
  {
    if (UncompressedPixelFormatFromCompressedPixelFormat <= 1936077875)
    {
      if (UncompressedPixelFormatFromCompressedPixelFormat <= 1882468911)
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat > 1751411058)
        {
          if (UncompressedPixelFormatFromCompressedPixelFormat <= 1815162993)
          {
            if (UncompressedPixelFormatFromCompressedPixelFormat == 1751411059) {
              return 16;
            }
            int v4 = 1751527984;
          }
          else
          {
            if (UncompressedPixelFormatFromCompressedPixelFormat == 1815162994) {
              return 10;
            }
            if (UncompressedPixelFormatFromCompressedPixelFormat == 1815361650) {
              return 16;
            }
            int v4 = 1815491698;
          }
          goto LABEL_110;
        }
        if (UncompressedPixelFormatFromCompressedPixelFormat > 1735549751)
        {
          if (UncompressedPixelFormatFromCompressedPixelFormat == 1735549752) {
            return 8;
          }
          int v4 = 1751410032;
          goto LABEL_110;
        }
        if (UncompressedPixelFormatFromCompressedPixelFormat != 1734505012)
        {
          int v6 = 1735549492;
LABEL_76:
          if (UncompressedPixelFormatFromCompressedPixelFormat != v6) {
            return 8;
          }
        }
      }
      else
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat <= 1919379251)
        {
          if (UncompressedPixelFormatFromCompressedPixelFormat > 1919365989)
          {
            if (UncompressedPixelFormatFromCompressedPixelFormat == 1919365990) {
              return v2;
            }
            if (UncompressedPixelFormatFromCompressedPixelFormat != 1919365992) {
              return 8;
            }
            return 16;
          }
          if (UncompressedPixelFormatFromCompressedPixelFormat != 1882468912)
          {
            int v3 = 1885745712;
            goto LABEL_99;
          }
          return 10;
        }
        if (UncompressedPixelFormatFromCompressedPixelFormat > 1932996148)
        {
          if (UncompressedPixelFormatFromCompressedPixelFormat == 1932996149
            || UncompressedPixelFormatFromCompressedPixelFormat == 1936077360)
          {
            return 16;
          }
          int v4 = 1936077362;
          goto LABEL_110;
        }
        if (UncompressedPixelFormatFromCompressedPixelFormat != 1919379252)
        {
          int v3 = 1919381552;
          goto LABEL_99;
        }
      }
      return 14;
    }
    if (UncompressedPixelFormatFromCompressedPixelFormat <= 1953903667)
    {
      if (UncompressedPixelFormatFromCompressedPixelFormat > 1952854575)
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat <= 1952855091)
        {
          if (UncompressedPixelFormatFromCompressedPixelFormat == 1952854576) {
            return 12;
          }
          int v5 = 1952854578;
        }
        else
        {
          if (UncompressedPixelFormatFromCompressedPixelFormat == 1952855092
            || UncompressedPixelFormatFromCompressedPixelFormat == 1953903152)
          {
            return 12;
          }
          int v5 = 1953903154;
        }
        if (UncompressedPixelFormatFromCompressedPixelFormat != v5) {
          return 8;
        }
        return 12;
      }
      if (UncompressedPixelFormatFromCompressedPixelFormat > 1937125937)
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat == 1937125938) {
          return 16;
        }
        unsigned __int16 v7 = 13364;
      }
      else
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat == 1936077876) {
          return 16;
        }
        unsigned __int16 v7 = 12848;
      }
      int v4 = v7 | 0x73760000;
      goto LABEL_110;
    }
    if (UncompressedPixelFormatFromCompressedPixelFormat <= 2019963439)
    {
      if (UncompressedPixelFormatFromCompressedPixelFormat <= 2016686639)
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat == 1953903668) {
          return 12;
        }
        int v3 = 1999843442;
      }
      else
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat == 2016686640
          || UncompressedPixelFormatFromCompressedPixelFormat == 2016686642)
        {
          return 10;
        }
        int v3 = 2016687156;
      }
      goto LABEL_99;
    }
    if (UncompressedPixelFormatFromCompressedPixelFormat > 2019963955)
    {
      if (UncompressedPixelFormatFromCompressedPixelFormat != 2019963956) {
        return 8;
      }
      return 10;
    }
    if (UncompressedPixelFormatFromCompressedPixelFormat == 2019963440) {
      return 10;
    }
    int v3 = 2019963442;
LABEL_99:
    if (UncompressedPixelFormatFromCompressedPixelFormat != v3) {
      return 8;
    }
    return 10;
  }
  if (UncompressedPixelFormatFromCompressedPixelFormat > 1279340599)
  {
    if (UncompressedPixelFormatFromCompressedPixelFormat <= 1650942775)
    {
      if (UncompressedPixelFormatFromCompressedPixelFormat <= 1380410944)
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat > 1378955370)
        {
          if (UncompressedPixelFormatFromCompressedPixelFormat != 1378955371) {
            return 8;
          }
          return 10;
        }
        if (UncompressedPixelFormatFromCompressedPixelFormat == 1279340600) {
          return 8;
        }
        int v4 = 1279340854;
      }
      else if (UncompressedPixelFormatFromCompressedPixelFormat <= 1647392368)
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat == 1380410945) {
          return v2;
        }
        int v4 = 1380411457;
      }
      else
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat == 1647392369
          || UncompressedPixelFormatFromCompressedPixelFormat == 1647589490)
        {
          return 16;
        }
        int v4 = 1647719528;
      }
    }
    else
    {
      if (UncompressedPixelFormatFromCompressedPixelFormat <= 1651925815)
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat > 1650946097)
        {
          if (UncompressedPixelFormatFromCompressedPixelFormat == 1650946098) {
            return 12;
          }
          if (UncompressedPixelFormatFromCompressedPixelFormat == 1651519798) {
            return 16;
          }
          int v3 = 1651847472;
          goto LABEL_99;
        }
        if (UncompressedPixelFormatFromCompressedPixelFormat == 1650942776) {
          return 8;
        }
        int v6 = 1650943796;
        goto LABEL_76;
      }
      if (UncompressedPixelFormatFromCompressedPixelFormat > 1717855599)
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat != 1717855600
          && UncompressedPixelFormatFromCompressedPixelFormat != 1717856627)
        {
          return 8;
        }
        return v2;
      }
      if (UncompressedPixelFormatFromCompressedPixelFormat == 1651925816) {
        return 8;
      }
      int v4 = 1651926376;
    }
LABEL_110:
    if (UncompressedPixelFormatFromCompressedPixelFormat != v4) {
      return 8;
    }
    return 16;
  }
  if (UncompressedPixelFormatFromCompressedPixelFormat <= 875836517)
  {
    if (UncompressedPixelFormatFromCompressedPixelFormat > 843264309)
    {
      if (UncompressedPixelFormatFromCompressedPixelFormat > 875704437
        || UncompressedPixelFormatFromCompressedPixelFormat != 843264310)
      {
        return 8;
      }
      return 16;
    }
    if (UncompressedPixelFormatFromCompressedPixelFormat > 825437746)
    {
      if (UncompressedPixelFormatFromCompressedPixelFormat != 825437747) {
        return 8;
      }
      return 16;
    }
    if (UncompressedPixelFormatFromCompressedPixelFormat == 32) {
      return 8;
    }
    int v4 = 825306677;
    goto LABEL_110;
  }
  if (UncompressedPixelFormatFromCompressedPixelFormat > 1278226535)
  {
    if (UncompressedPixelFormatFromCompressedPixelFormat > 1278226737)
    {
      if (UncompressedPixelFormatFromCompressedPixelFormat != 1278226738)
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat != 1278226742)
        {
          if (UncompressedPixelFormatFromCompressedPixelFormat == 1278555445) {
            return 5;
          }
          return 8;
        }
        return 16;
      }
      return 12;
    }
    if (UncompressedPixelFormatFromCompressedPixelFormat == 1278226536) {
      return 16;
    }
    int v3 = 1278226736;
    goto LABEL_99;
  }
  if (UncompressedPixelFormatFromCompressedPixelFormat != 1278226534) {
    return 8;
  }
  return v2;
}

uint64_t CMPhotoPixelBufferHasOpaqueAlphaFromAttachment(__CVBuffer *a1, uint64_t Value)
{
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (CMPhotoPixelFormatContainsAlpha(PixelFormatType))
  {
    CFBooleanRef v5 = (const __CFBoolean *)CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E4F249D0], 0);
    if (v5)
    {
      CFBooleanRef v6 = v5;
      CFTypeID v7 = CFGetTypeID(v5);
      if (v7 == CFBooleanGetTypeID()) {
        CFArrayRef Value = CFBooleanGetValue(v6);
      }
      CFRelease(v6);
    }
  }
  return Value;
}

uint64_t CMPhotoPixelFormatContainsAlpha(signed int pixelFormat)
{
  unsigned __int8 v4 = 0;
  if (pixelFormat > 843264309)
  {
    if (pixelFormat == 843264310) {
      return 1;
    }
    int v1 = 1380401729;
  }
  else
  {
    if (!pixelFormat) {
      return v4;
    }
    int v1 = 843264056;
  }
  if (pixelFormat == v1) {
    return 1;
  }
  CFDictionaryRef v3 = CVPixelFormatDescriptionCreateWithPixelFormatType((CFAllocatorRef)*MEMORY[0x1E4F1CF80], pixelFormat);
  FigCFDictionaryGetBooleanIfPresent();
  if (v3) {
    CFRelease(v3);
  }
  return v4;
}

uint64_t RegisterCMPhotoDecompressionContainer()
{
  sCMPhotoDecompressionContainerClass = 0;
  unk_1EB3D23F0 = "CMPhotoDecompressionContainer";
  qword_1EB3D23F8 = (uint64_t)CMPhotoDecompressionContainerClass_Init;
  unk_1EB3D2400 = 0;
  qword_1EB3D2410 = 0;
  unk_1EB3D2418 = 0;
  qword_1EB3D2408 = (uint64_t)CMPhotoDecompressionContainerClass_Finalize;
  qword_1EB3D2420 = (uint64_t)CMPhotoDecompressionContainerClass_CopyFormattingDesc;
  unk_1EB3D2428 = 0;
  uint64_t result = _CFRuntimeRegisterClass();
  sCMPhotoDecompressionContainerCFTypeID TypeID = result;
  return result;
}

uint64_t RegisterCMPhotoSurfacePoolClass()
{
  sCMPhotoSurfacePoolClass = 0;
  unk_1EB3D2500 = "CMPhotoSurfacePoolClass";
  qword_1EB3D2508 = (uint64_t)CMPhotoSurfacePoolClass_Init;
  unk_1EB3D2510 = 0;
  qword_1EB3D2518 = (uint64_t)CMPhotoSurfacePoolClass_Finalize;
  unk_1EB3D2520 = 0;
  qword_1EB3D2528 = 0;
  unk_1EB3D2530 = 0;
  qword_1EB3D2538 = (uint64_t)CMPhotoSurfacePoolClass_CopyDebugDesc;
  uint64_t result = _CFRuntimeRegisterClass();
  sCMPhotoSurfacePoolCFTypeID TypeID = result;
  return result;
}

void _once_CMPhotoSurfacePoolGetDefault()
{
  CFTypeRef cf = 0;
  int v0 = CMPhotoSurfacePoolCreate((const __CFAllocator *)*MEMORY[0x1E4F1CF80], 0, (uint64_t *)&cf);
  CFTypeRef v1 = cf;
  if (v0
    || (uint64_t v2 = 0,
        atomic_compare_exchange_strong_explicit(&defaultSurfacePool, (unint64_t *)&v2, (unint64_t)cf, memory_order_relaxed, memory_order_relaxed), v2))
  {
    if (v1)
    {
      CFRelease(v1);
    }
  }
}

uint64_t RegisterCMPhotoDecompressionSession()
{
  sCMPhotoDecompressionSessionClass = 0;
  unk_1EB3D2390 = "CMPhotoDecompressionSession";
  qword_1EB3D2398 = (uint64_t)CMPhotoDecompressionSessionClass_Init;
  unk_1EB3D23A0 = 0;
  qword_1EB3D23B0 = 0;
  unk_1EB3D23B8 = 0;
  qword_1EB3D23A8 = (uint64_t)CMPhotoDecompressionSessionClass_Finalize;
  qword_1EB3D23C0 = (uint64_t)CMPhotoDecompressionSessionClass_CopyFormattingDesc;
  qword_1EB3D23C8 = (uint64_t)CMPhotoDecompressionSession_CopyDebugDesc;
  uint64_t result = _CFRuntimeRegisterClass();
  sCMPhotoDecompressionSessionCFTypeID TypeID = result;
  return result;
}

uint64_t CMPhotoCodecSessionPoolCreateDecompressionSession(CFTypeRef cf, UInt8 a2, uint64_t a3, const opaqueCMFormatDescription *a4, const void *a5, uint64_t a6, uint64_t a7, void *a8, unsigned char *a9)
{
  if (cf)
  {
    CFTypeRef v16 = cf;
    CFTypeRef cfa = 0;
    CFTypeRef session = 0;
    char v47 = 0;
  }
  else
  {
    pthread_once(&CMPhotoCodecSessionPoolGetDefault_onceToken, _once_setDefaultPool);
    CFTypeRef v16 = (CFTypeRef)defaultPool;
    CFTypeRef cfa = 0;
    CFTypeRef session = 0;
    char v47 = 0;
    if (!defaultPool)
    {
      CFMutableDictionaryRef MutableCopy = 0;
      uint64_t v18 = 4294950305;
      goto LABEL_44;
    }
  }
  CFMutableDictionaryRef MutableCopy = 0;
  if (!a8)
  {
LABEL_41:
    uint64_t v18 = 0;
    goto LABEL_42;
  }
  uint64_t v18 = 4294950306;
  if (a4)
  {
    uint64_t v44 = a6;
    uint64_t v45 = a7;
    int v43 = a8;
    if (a6)
    {
      CFAllocatorRef v19 = CFGetAllocator(v16);
      UInt8 bytes = a2;
      *(void *)int v54 = a3;
      FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(a4);
      CFDictionaryRef Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension(a4, (CFStringRef)*MEMORY[0x1E4F1EE20]);
      if (Extension)
      {
        switch(MediaSubType)
        {
          case 0x61763031u:
            int v22 = @"av1C";
            break;
          case 0x68766331u:
            int v22 = @"hvcC";
            break;
          case 0x61766331u:
            int v22 = @"avcC";
            break;
          default:
            goto LABEL_34;
        }
        CFDataRef Value = (const __CFData *)CFDictionaryGetValue(Extension, v22);
        CFDataRef v24 = Value;
        if (Value)
        {
          CFTypeID v25 = CFGetTypeID(Value);
          if (v25 == CFDataGetTypeID())
          {
            CFMutableDictionaryRef MutableCopy = CFDataCreateMutableCopy(v19, 0, v24);
            if (!MutableCopy) {
              goto LABEL_61;
            }
            goto LABEL_25;
          }
          CFTypeID v26 = CFGetTypeID(v24);
          if (v26 == CFArrayGetTypeID())
          {
            CFMutableDataRef Mutable = CFDataCreateMutable(v19, 0);
            if (!Mutable)
            {
LABEL_61:
              CFMutableDictionaryRef MutableCopy = 0;
              uint64_t v18 = 4294950305;
              goto LABEL_42;
            }
            CFMutableDictionaryRef MutableCopy = Mutable;
            if (CFArrayGetCount(v24) >= 1)
            {
              CFIndex v28 = 0;
              while (1)
              {
                CFDataRef ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(v24, v28);
                if (!ValueAtIndex) {
                  break;
                }
                CFDataRef v30 = ValueAtIndex;
                CFTypeID v31 = CFGetTypeID(ValueAtIndex);
                if (v31 != CFDataGetTypeID()) {
                  break;
                }
                BytePtr = CFDataGetBytePtr(v30);
                CFIndex Length = CFDataGetLength(v30);
                CFDataAppendBytes(MutableCopy, BytePtr, Length);
                if (++v28 >= CFArrayGetCount(v24)) {
                  goto LABEL_25;
                }
              }
              uint64_t v18 = 4294950194;
LABEL_58:
              CFRelease(MutableCopy);
LABEL_35:
              CFMutableDictionaryRef MutableCopy = 0;
              if (v18) {
                goto LABEL_42;
              }
LABEL_36:
              v46[0] = v19;
              v46[1] = a4;
              v46[2] = a5;
              v46[3] = a2;
              uint64_t v38 = CMPhotoCodecSessionPool_CreateSession((uint64_t)v16, 1, MutableCopy, v44, v45, (uint64_t (*)(void *, uint64_t, void **))_callback_CreateDecompressionSession, (uint64_t)v46, (void **)&session, &v47);
              if (!v38)
              {
                CFTypeRef v39 = session;
                if (v47)
                {
                  unint64_t v40 = v43;
                  goto LABEL_39;
                }
                OSStatus v42 = VTSessionCopySupportedPropertyDictionary(session, (CFDictionaryRef *)&cfa);
                unint64_t v40 = v43;
                if (v42 == -12900 || !v42)
                {
LABEL_39:
                  *unint64_t v40 = v39;
                  CFTypeRef session = 0;
                  if (a9)
                  {
                    uint64_t v18 = 0;
                    *a9 = v47;
                    goto LABEL_42;
                  }
                  goto LABEL_41;
                }
                uint64_t v38 = CMPhotoCodecSessionPoolRecycleSession((uint64_t)v16, v39, 1);
                if (!v38)
                {
                  if (v39)
                  {
                    CFRelease(v39);
                    CFTypeRef session = 0;
                  }
                  uint64_t v38 = CMPhotoCodecSessionPoolFlush((uint64_t)v16, 3);
                  if (!v38)
                  {
                    uint64_t v38 = CMPhotoCodecSessionPool_CreateSession((uint64_t)v16, 1, MutableCopy, v44, v45, (uint64_t (*)(void *, uint64_t, void **))_callback_CreateDecompressionSession, (uint64_t)v46, (void **)&session, &v47);
                    if (!v38)
                    {
                      CFTypeRef v39 = session;
                      goto LABEL_39;
                    }
                  }
                }
              }
              uint64_t v18 = v38;
              goto LABEL_42;
            }
LABEL_25:
            if (!a5)
            {
              CFDataRef v35 = 0;
              goto LABEL_30;
            }
            CFDataRef Data = CFPropertyListCreateData(v19, a5, kCFPropertyListBinaryFormat_v1_0, 0, 0);
            if (Data)
            {
              CFDataRef v35 = Data;
              int v36 = CFDataGetBytePtr(Data);
              CFIndex v37 = CFDataGetLength(v35);
              CFDataAppendBytes(MutableCopy, v36, v37);
LABEL_30:
              CFDataAppendBytes(MutableCopy, &bytes, 1);
              if (CMFormatDescriptionGetExtension(a4, (CFStringRef)*MEMORY[0x1E4F24A78]))
              {
                CGRect CleanAperture = CMVideoFormatDescriptionGetCleanAperture(a4, 1u);
                *(void *)uint64_t v50 = vcvtad_u64_f64(CleanAperture.origin.x);
                unint64_t v51 = vcvtad_u64_f64(CleanAperture.origin.y);
                unint64_t v52 = vcvtad_u64_f64(CleanAperture.size.width);
                unint64_t v53 = vcvtad_u64_f64(CleanAperture.size.height);
                CFDataAppendBytes(MutableCopy, v50, 32);
              }
              CFDataAppendBytes(MutableCopy, v54, 8);
              if (v35) {
                CFRelease(v35);
              }
              goto LABEL_36;
            }
            uint64_t v18 = FigSignalErrorAt();
            goto LABEL_58;
          }
        }
      }
LABEL_34:
      uint64_t v18 = FigSignalErrorAt();
      goto LABEL_35;
    }
  }
LABEL_42:
  if (cfa) {
    CFRelease(cfa);
  }
LABEL_44:
  if (session) {
    CFRelease(session);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  return v18;
}

uint64_t CMPhotoCodecSessionPool_CreateSession(uint64_t a1, int a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void *, uint64_t, void **), uint64_t a7, void **a8, unsigned char *a9)
{
  uint64_t v11 = a3;
  uint64_t v13 = a1;
  int v34 = 0;
  if (a2) {
    double v14 = (CFAllocatorRef *)(a1 + 88);
  }
  else {
    double v14 = (CFAllocatorRef *)(a1 + 48);
  }
  uint64_t v15 = 40;
  if (!a2) {
    uint64_t v15 = 32;
  }
  unint64_t v38 = *(void *)(a1 + v15);
  key = 0;
  do
  {
    if (*(unsigned char *)(v13 + 16))
    {
      uint64_t v21 = 4294950195;
      goto LABEL_57;
    }
    uint64_t v16 = pthread_mutex_lock(*(pthread_mutex_t **)(v13 + 24));
    if (v16)
    {
      uint64_t v21 = v16;
      goto LABEL_57;
    }
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v14[2], v11);
    if (Value)
    {
      CFArrayRef v18 = Value;
      if (CFArrayGetCount(Value))
      {
        CFDataRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(v18, 0);
        if (ValueAtIndex) {
          CFDataRef ValueAtIndex = (void *)CFRetain(ValueAtIndex);
        }
        key = ValueAtIndex;
        CFArrayRemoveValueAtIndex(v18, 0);
        int v20 = CFDictionaryGetValue(v14[3], key);
        if (!v20)
        {
          uint64_t v21 = 4294950195;
          goto LABEL_40;
        }
        if (a2) {
          goto LABEL_15;
        }
LABEL_37:
        CFDataGetBytePtr((CFDataRef)v11);
        goto LABEL_15;
      }
    }
    CFIndex Count = CFArrayGetCount(v14[1]);
    if (Count >= v38)
    {
      CodecSessionPool_PurgeSessionsWithCriteria(v14, (unsigned int (*)(const void *, const void *, uint64_t))_callback_CodecSessionPool_PurgeIdleSessions_CriteriaIsIdle, 0, 1);
      CFIndex Count = CFArrayGetCount(v14[1]);
    }
    if (Count >= v38)
    {
      int v20 = 0;
      uint64_t v21 = 0;
      goto LABEL_39;
    }
    int v23 = malloc_type_calloc(1uLL, 0x40uLL, 0x10E204024717DD0uLL);
    int v20 = v23;
    if (!v23)
    {
      uint64_t v21 = 4294950305;
      goto LABEL_39;
    }
    *int v23 = a2;
    CFTypeRef v24 = a3;
    if (a3) {
      CFTypeRef v24 = CFRetain(a3);
    }
    v20[4] = v24;
    v20[5] = 0;
    *((unsigned char *)v20 + 49) = 0;
    uint64_t v21 = a6(v20, a7, &key);
    int v25 = 10;
    if (!a2)
    {
LABEL_23:
      if (v21 != -12915) {
        goto LABEL_27;
      }
      uint64_t v21 = 4294954381;
      if (Count >= 1 && v25 >= 2) {
        goto LABEL_31;
      }
LABEL_38:
      uint64_t v13 = a1;
LABEL_39:
      uint64_t v11 = a3;
      goto LABEL_40;
    }
LABEL_27:
    while (a2 == 1 && v21 == -12913 && Count >= 1 && v25 > 1)
    {
LABEL_31:
      --v25;
      CodecSessionPool_PurgeSessionsWithCriteria(v14, (unsigned int (*)(const void *, const void *, uint64_t))_callback_CodecSessionPool_PurgeIdleSessions_CriteriaIsIdle, 0, 1);
      uint64_t v21 = a6(v20, a7, &key);
      CFIndex Count = CFArrayGetCount(v14[1]);
      if (!a2) {
        goto LABEL_23;
      }
    }
    if (v21) {
      goto LABEL_38;
    }
    CFTypeID v26 = key;
    v20[3] = key;
    CFDictionarySetValue(v14[3], v26, v20);
    CFArrayGetCount(v14[1]);
    CFArrayAppendValue(v14[1], v26);
    int v27 = v34;
    if (key) {
      int v27 = 1;
    }
    int v34 = v27;
    uint64_t v13 = a1;
    uint64_t v11 = a3;
    if (!a2) {
      goto LABEL_37;
    }
LABEL_15:
    uint64_t v21 = 0;
    v20[1] = a5;
    v20[2] = a4;
    *((unsigned char *)v20 + 48) = 0;
    int v20 = 0;
LABEL_40:
    CodecGateway_Destroy(v20);
    if (v21 || key)
    {
      pthread_mutex_unlock(*(pthread_mutex_t **)(v13 + 24));
      if (v21) {
        goto LABEL_57;
      }
    }
    else
    {
      CFIndex v28 = malloc_type_calloc(1uLL, 0x10uLL, 0xE00402B90B96AuLL);
      if (!v28 || (dispatch_semaphore_t v29 = dispatch_semaphore_create(0), (*((void *)v28 + 1) = v29) == 0))
      {
        WaitingClient_Destroy((const void **)v28);
        pthread_mutex_unlock(*(pthread_mutex_t **)(v13 + 24));
        uint64_t v21 = 4294950305;
        goto LABEL_57;
      }
      if (v11) {
        CFTypeRef v30 = CFRetain(v11);
      }
      else {
        CFTypeRef v30 = 0;
      }
      *(void *)CFIndex v28 = v30;
      WaitingClient_Destroy(0);
      CFArrayAppendValue(v14[4], v28);
      pthread_mutex_unlock(*(pthread_mutex_t **)(v13 + 24));
      dispatch_semaphore_wait(*((dispatch_semaphore_t *)v28 + 1), 0xFFFFFFFFFFFFFFFFLL);
      WaitingClient_Destroy((const void **)v28);
    }
  }
  while (!key);
  *a8 = key;
  key = 0;
  uint64_t v21 = 0;
  if (a9) {
    *a9 = v34;
  }
LABEL_57:
  WaitingClient_Destroy(0);
  if (key) {
    CFRelease(key);
  }
  return v21;
}

void WaitingClient_Destroy(const void **a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (v2) {
      CFRelease(v2);
    }
    CFDictionaryRef v3 = a1[1];
    if (v3) {
      dispatch_release(v3);
    }
    free(a1);
  }
}

void CodecGateway_Destroy(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (const void *)a1[4];
    if (v2) {
      CFRelease(v2);
    }
    CFDictionaryRef v3 = (const void *)a1[5];
    if (v3) {
      CFRelease(v3);
    }
    free(a1);
  }
}

uint64_t _callback_CreateDecompressionSession(uint64_t a1, uint64_t a2)
{
  CMVideoFormatDescriptionGetCleanAperture(*(CMVideoFormatDescriptionRef *)(a2 + 8), 1u);
  CFDictionaryRef v3 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  int v4 = *MEMORY[0x1E4F1EBA8];
  if (*(unsigned char *)(a2 + 24))
  {
    if (v4 == 1) {
      kdebug_trace();
    }
    uint64_t v5 = VTTileDecompressionSessionCreate();
    if (*v3 == 1) {
LABEL_9:
    }
      kdebug_trace();
  }
  else
  {
    if (v4 == 1) {
      kdebug_trace();
    }
    uint64_t v5 = VTDecompressionSessionCreateWithOptions();
    if (*v3 == 1) {
      goto LABEL_9;
    }
  }
  return v5;
}

uint64_t RegisterCMPhotoScaleAndRotateSession()
{
  sCMPhotoScaleAndRotateSessionClass = 0;
  unk_1EB3D2450 = "CMPhotoScaleAndRotateSession";
  qword_1EB3D2458 = (uint64_t)CMPhotoScaleAndRotateSessionClass_Init;
  unk_1EB3D2460 = 0;
  qword_1EB3D2470 = 0;
  unk_1EB3D2478 = 0;
  qword_1EB3D2468 = (uint64_t)CMPhotoScaleAndRotateSessionClass_Finalize;
  qword_1EB3D2480 = (uint64_t)CMPhotoScaleAndRotateSessionClass_CopyFormattingDesc;
  unk_1EB3D2488 = 0;
  uint64_t result = _CFRuntimeRegisterClass();
  sCMPhotoScaleAndRotateSessionCFTypeID TypeID = result;
  return result;
}

uint64_t _compareAsyncDecodeRequests(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 8);
  int v3 = *(_DWORD *)(a2 + 8);
  if (v2 == v3)
  {
    if (*(void *)a1 >= *(void *)a2) {
      uint64_t v4 = 0;
    }
    else {
      uint64_t v4 = -1;
    }
    if (*(void *)a1 <= *(void *)a2) {
      return v4;
    }
    else {
      return 1;
    }
  }
  else
  {
    if (v2 >= v3) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = -1;
    }
    if (v2 <= v3) {
      return v6;
    }
    else {
      return 1;
    }
  }
}

void __CMPhotoSupportsHEVCHWDecode_block_invoke()
{
  int v0 = (const void *)MGCopyAnswer();
  CMPhotoSupportsHEVCHWDecode_supported = FigCFEqual();
  if (v0)
  {
    CFRelease(v0);
  }
}

uint64_t _decodeItem(BOOL *a1, const void *a2, const void *a3, uint64_t a4, unsigned __int8 *a5, int *a6, long long *a7, CFTypeRef *a8, CVPixelBufferRef *a9)
{
  uint64_t v9 = a9;
  uint64_t v694 = *MEMORY[0x1E4F143B8];
  v648[0] = 0;
  CVPixelBufferRef pixelBuffer = 0;
  if ((a7 != 0) != (a9 == 0)) {
    return 4294950306;
  }
  uint64_t v11 = a7;
  uint64_t v16 = a1;
  if (*a1 && CMPhotoDecompressionSessionAsyncRequestCancelled(*(void *)(a1[1] + 16), *a1)) {
    goto LABEL_581;
  }
  v618 = a6;
  *(void *)CGSize size = 0;
  LODWORD(v674) = 0;
  *(_DWORD *)v690 = 0;
  CFAllocatorRef v17 = CFGetAllocator(a2);
  uint64_t FigBaseObject = FigPictureReaderGetFigBaseObject();
  uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v19) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = 0;
  }
  uint64_t v21 = *(uint64_t (**)(uint64_t, void, CFAllocatorRef, unsigned char *))(v20 + 48);
  if (v21)
  {
    uint64_t v22 = v21(FigBaseObject, *MEMORY[0x1E4F24B98], v17, size);
    if (v22 == -12783) {
      goto LABEL_13;
    }
    uint64_t v23 = v22;
    if (v22) {
      goto LABEL_15;
    }
    if (CMPhotoCFDictionaryGetInt32IfPresent(*(CFDictionaryRef *)size, (const void *)*MEMORY[0x1E4F24B90], &v674)&& CMPhotoCFDictionaryGetInt32IfPresent(*(CFDictionaryRef *)size, (const void *)*MEMORY[0x1E4F24BA0], v690)&& v674 == *(_DWORD *)v690)
    {
LABEL_13:
      uint64_t v23 = 0;
    }
    else
    {
      uint64_t v23 = FigSignalErrorAt();
    }
  }
  else
  {
    uint64_t v23 = 4294954514;
  }
LABEL_15:
  if (*(void *)size) {
    CFRelease(*(CFTypeRef *)size);
  }
  if (v23) {
    goto LABEL_398;
  }
  uint64_t ItemTypeFromReader = _verifyPixelInformationFromPictureReader(a2, 0);
  if (ItemTypeFromReader
    || (uint64_t ItemTypeFromReader = CMPhotoPictureReaderGetItemTypeFromReader(a2, v648), ItemTypeFromReader))
  {
    uint64_t v23 = ItemTypeFromReader;
    goto LABEL_398;
  }
  int v646 = 1;
  v619 = v16;
  v617 = v11;
  CFTypeRef v620 = a2;
  if (v648[0] > 1768912491)
  {
    if (v648[0] != 1768912492)
    {
      if (v648[0] != 1953325424) {
        goto LABEL_48;
      }
      int v41 = *((_DWORD *)v16 + 14);
      int v42 = *((unsigned __int8 *)v16 + 68);
      int v43 = v16;
      int v44 = *((unsigned __int8 *)v16 + 69);
      if (v41 == 6) {
        uint64_t v45 = a8;
      }
      else {
        uint64_t v45 = 0;
      }
      BOOL v47 = *v43;
      double v46 = (unsigned char *)v43[1];
      v539 = v45;
      BOOL v541 = v43[2];
      v589 = (const void *)v43[3];
      uint64_t v555 = v43[4];
      v692[0] = (CFTypeRef)v43[5];
      LOBYTE(v692[1]) = *((unsigned char *)v43 + 48);
      int v583 = *((unsigned __int8 *)v43 + 49);
      char v613 = *((unsigned char *)v43 + 50);
      unsigned int v594 = *((unsigned __int8 *)v43 + 51);
      char theDicta = *((unsigned char *)v43 + 52);
      LOWORD(v671) = *(_WORD *)((char *)v43 + 53);
      BYTE2(v671) = *((unsigned char *)v43 + 55);
      int v48 = *((unsigned __int8 *)v43 + 60);
      unsigned __int8 v574 = *((unsigned char *)v43 + 61);
      unsigned __int8 v571 = *((unsigned char *)v43 + 62);
      char v567 = *((unsigned char *)v43 + 63);
      float v49 = *((float *)v43 + 16);
      int v548 = *((_DWORD *)v43 + 17);
      uint64_t v563 = v43[9];
      CFTypeRef v577 = (CFTypeRef)v43[10];
      BOOL v545 = v43[11];
      unsigned __int8 v558 = a5[1];
      int v50 = a5[2];
      long long v51 = *(_OWORD *)(a5 + 19);
      v688[0] = *(_OWORD *)(a5 + 3);
      v688[1] = v51;
      *(void *)((char *)&v688[1] + 13) = *((void *)a5 + 4);
      unsigned __int8 v553 = a5[114];
      uint64_t v550 = *((void *)a5 + 15);
      CFAllocatorRef v52 = CFGetAllocator(v46);
      *(void *)&long long v664 = 0;
      if (v47) {
        int v53 = v47;
      }
      else {
        int v53 = (int)v46;
      }
      int v536 = v53;
      *(void *)&long long v661 = 0;
      v686.i64[0] = 0;
      cf.i64[0] = 0;
      *(void *)&long long v667 = 0;
      v666.i64[0] = 0;
      value.i64[0] = 0;
      *(void *)&long long v660 = 0;
      *(void *)&long long v659 = 0;
      if (v48)
      {
        uint64_t HEIFOrientation = FigSignalErrorAt();
      }
      else
      {
        uint64x2_t v682 = 0uLL;
        memset(v690, 0, 80);
        uint64_t HEIFOrientation = _copyFlexRangeDetails((uint64_t)v52, (uint64_t)v620, &v682, v690, (__CFDictionary **)&v667, 0, &v686, &cf);
        if (!HEIFOrientation)
        {
          LODWORD(v673) = 1;
          LODWORD(v672) = 1;
          uint64_t HEIFOrientation = CMPhotoPictureReaderGetHEIFOrientation((const void *)cf.i64[0], 0, (int *)&v672);
          if (!HEIFOrientation)
          {
            uint64_t HEIFOrientation = CMPhotoPictureReaderGetHEIFOrientation((const void *)v686.i64[0], 0, (int *)&v673);
            if (!HEIFOrientation)
            {
              memset(size, 0, 32);
              uint64_t ImageGeometryFromPictureReader = CMPhotoPictureReaderGetImageGeometryFromPictureReader((const void *)cf.i64[0], 0, (unint64_t)size, 0);
              if (ImageGeometryFromPictureReader
                || (uint64_t v530 = *(void *)&size[24],
                    uint64_t v533 = *(void *)&size[16],
                    uint64_t ImageGeometryFromPictureReader = CMPhotoPictureReaderGetImageGeometryFromPictureReader((const void *)v686.i64[0], 0, (unint64_t)size, 0), ImageGeometryFromPictureReader))
              {
                uint64_t v23 = ImageGeometryFromPictureReader;
              }
              else
              {
                v609 = a5;
                uint64_t v57 = *(void *)&size[16];
                uint64_t v56 = *(void *)&size[24];
                long long v674 = *(_OWORD *)size;
                long long v675 = *(_OWORD *)&size[16];
                uint64_t CropPostOrientation = CMPhotoGetCropPostOrientation(*(uint64_t *)&size[16], *(uint64_t *)&size[24], &v674, (int)v673, size);
                if (!CropPostOrientation)
                {
                  uint64_t v59 = *(void *)&size[16];
                  if (v682.i64[0] == *(void *)&size[16]
                    && (uint64_t v60 = *(void *)&size[24], v682.i64[1] == *(void *)&size[24]))
                  {
                    memset(v680, 0, 32);
                    if (!v50
                      || (*(_OWORD *)CGSize size = *(_OWORD *)((char *)v688 + 5),
                          *(_OWORD *)&size[16] = *(_OWORD *)((char *)&v688[1] + 5),
                          uint64_t CropPreOrientation = CMPhotoGetCropPreOrientation(v59, v60, size, (int)v673, v680),
                          !CropPreOrientation))
                    {
                      if (v44) {
                        int v646 = (int)v673;
                      }
                      else {
                        unsigned __int8 v558 = 1;
                      }
                      uint64_t v16 = v619;
                      if (v42)
                      {
                        if (v41 == 6) {
                          goto LABEL_184;
                        }
                        uint64_t v170 = FigSignalErrorAt();
                      }
                      else
                      {
                        BYTE4(v678[0]) = 0;
                        LODWORD(v678[0]) = 0;
                        size[119] = 0;
                        *(_DWORD *)&size[115] = 0;
                        *(_DWORD *)&size[129] = 0;
                        *(_DWORD *)&size[132] = 0;
                        *(_OWORD *)((char *)v678 + 5) = *(_OWORD *)v680;
                        *(_OWORD *)((char *)&v678[1] + 5) = *(_OWORD *)&v680[16];
                        *(void *)&long long v674 = v47;
                        *((void *)&v674 + 1) = v46;
                        *(void *)&long long v675 = v541;
                        *((void *)&v675 + 1) = v589;
                        v676.i64[0] = v555;
                        v676.i64[1] = (uint64_t)v692[0];
                        v677[0] = v692[1];
                        v677[1] = v583;
                        v677[2] = v613;
                        v677[3] = v594;
                        v677[4] = theDicta;
                        *(_WORD *)&v677[5] = (_WORD)v671;
                        v677[7] = BYTE2(v671);
                        *(_DWORD *)&v677[8] = v41;
                        v677[12] = 0;
                        v677[13] = v574;
                        v677[14] = v571;
                        v677[15] = v567;
                        *(float *)&v677[16] = v49;
                        *(_DWORD *)&v677[20] = v548;
                        *(void *)&v677[24] = v563;
                        *(void *)&v677[32] = v577;
                        *(void *)&v677[40] = v545;
                        size[0] = 0;
                        *(_WORD *)&size[1] = v558;
                        *(void *)&size[32] = *(void *)&v680[24];
                        *(_OWORD *)&size[19] = v678[1];
                        *(_OWORD *)&size[3] = v678[0];
                        memset(&size[40], 0, 74);
                        size[114] = v553;
                        *(void *)&size[120] = v550;
                        size[128] = 0;
                        uint64_t v170 = _decodeItem(&v674, v686.i64[0], 0, 0, size, 0, 0, 0, &v664);
                        if (!v170)
                        {
LABEL_184:
                          BOOL v164 = (v41 - 3) < 3;
                          if (*(float *)&v690[8] == 0.0) {
                            BOOL v164 = v41 == 2;
                          }
                          if (v164)
                          {
                            uint64_t v23 = 0;
                            uint32x4_t v165 = 0;
                            CVPixelBufferRef pixelBuffer = (CVPixelBufferRef)v664;
                            *(void *)&long long v664 = 0;
                            a5 = v609;
                            goto LABEL_442;
                          }
                          CFAllocatorRef allocatora = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
                          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                          if (!Mutable)
                          {
                            uint32x4_t v165 = 0;
                            uint64_t v23 = 4294950305;
                            goto LABEL_439;
                          }
                          uint64_t v167 = Mutable;
                          if (!v42)
                          {
                            uint64_t v168 = CMPhotoScaleAndRotateSessionBakeInCLAPIfNeeded(v555, v613, v594, theDicta, (__CVBuffer **)&v664);
                            if (v168) {
                              goto LABEL_585;
                            }
                            FigCFDictionarySetValue();
                            uint64_t v168 = FigCFDictionarySetInt();
                            if (v168) {
                              goto LABEL_585;
                            }
                          }
                          FigCFDictionarySetValue();
                          memset(v691, 0, 32);
                          if (*(_OWORD *)v680 != 0 || *(_OWORD *)&v680[16] != 0)
                          {
                            *(_OWORD *)CGSize size = *(_OWORD *)v680;
                            *(_OWORD *)&size[16] = *(_OWORD *)&v680[16];
                            uint64_t v168 = CMPhotoTranslateAndScalePreOrientationCrop(v57, v56, (uint64x2_t *)size, (int)v673, v533, v530, (int)v672, v691, 0);
                            if (v168) {
                              goto LABEL_585;
                            }
                            uint32x4_t v165 = 0;
                            uint64_t v23 = 4294950306;
                            if (!v691[2] || !v691[3]) {
                              goto LABEL_438;
                            }
                          }
                          BYTE4(v678[0]) = 0;
                          LODWORD(v678[0]) = 0;
                          size[119] = 0;
                          *(_DWORD *)&size[115] = 0;
                          *(_DWORD *)&size[129] = 0;
                          *(_DWORD *)&size[132] = 0;
                          *(_OWORD *)((char *)v678 + 5) = *(_OWORD *)v691;
                          *(_OWORD *)((char *)&v678[1] + 5) = *(_OWORD *)&v691[2];
                          *(void *)&long long v674 = v47;
                          *((void *)&v674 + 1) = v46;
                          *(void *)&long long v675 = v541;
                          *((void *)&v675 + 1) = v589;
                          v676.i64[0] = v555;
                          v676.i64[1] = (uint64_t)v692[0];
                          v677[0] = v692[1];
                          v677[1] = v583;
                          v677[2] = v613;
                          v677[3] = v594;
                          v677[4] = theDicta;
                          *(_WORD *)&v677[5] = (_WORD)v671;
                          v677[7] = BYTE2(v671);
                          *(_DWORD *)&v677[8] = v41;
                          v677[12] = 0;
                          v677[13] = v574;
                          v677[14] = v571;
                          v677[15] = v567;
                          *(float *)&v677[16] = v49;
                          *(_DWORD *)&v677[20] = v548;
                          *(void *)&v677[24] = v563;
                          *(void *)&v677[32] = v577;
                          *(void *)&v677[40] = v545;
                          size[0] = 0;
                          *(_WORD *)&size[1] = v558;
                          *(CFTypeRef *)&size[32] = v691[3];
                          *(_OWORD *)&size[19] = v678[1];
                          *(_OWORD *)&size[3] = v678[0];
                          memset(&size[40], 0, 74);
                          size[114] = v553;
                          *(void *)&size[120] = v550;
                          size[128] = 1;
                          uint64_t v168 = _decodeItem(&v674, cf.i64[0], 0, 0, size, 0, 0, 0, &v661);
                          if (!v168)
                          {
                            uint64_t v168 = CMPhotoScaleAndRotateSessionBakeInCLAPIfNeeded(v555, v613, v594, theDicta, (__CVBuffer **)&v661);
                            if (!v168)
                            {
                              FigCFDictionarySetValue();
                              uint64_t v168 = FigCFDictionarySetInt();
                              if (!v168)
                              {
                                uint64_t v168 = _copyColorInfoForItem(v46, v620, 0, 0, 0, 0, (CFTypeRef *)&v666, &value, (CFTypeRef *)&v660, (CFTypeRef *)&v659, 0, 0, 0);
                                if (!v168)
                                {
                                  if (v577)
                                  {
                                    FigCFDictionarySetValue();
                                    if ((void)v659)
                                    {
                                      uint32x4_t v165 = CFDictionaryCreateMutable(allocatora, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                                      if (v165)
                                      {
                                        uint32x4_t v169 = (const void *)v659;
LABEL_434:
                                        CFDictionarySetValue(v165, @"YCbCrMatrix", v169);
LABEL_435:
                                        CFDictionarySetValue(v167, @"NclxColor", v165);
                                        goto LABEL_436;
                                      }
                                      goto LABEL_632;
                                    }
                                  }
                                  else
                                  {
                                    if (v666.i64[0]) {
                                      FigCFDictionarySetValue();
                                    }
                                    if (value.i64[0] || (void)v660 || (void)v659)
                                    {
                                      v266 = CFDictionaryCreateMutable(allocatora, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                                      uint32x4_t v165 = v266;
                                      if (v266)
                                      {
                                        if (value.i64[0]) {
                                          CFDictionarySetValue(v266, @"ColorPrimaries", (const void *)value.i64[0]);
                                        }
                                        if ((void)v660) {
                                          CFDictionarySetValue(v165, @"TransferFunction", (const void *)v660);
                                        }
                                        uint32x4_t v169 = (const void *)v659;
                                        if (!(void)v659) {
                                          goto LABEL_435;
                                        }
                                        goto LABEL_434;
                                      }
LABEL_632:
                                      uint64_t v267 = FigSignalErrorAt();
                                      goto LABEL_437;
                                    }
                                  }
                                  uint32x4_t v165 = 0;
LABEL_436:
                                  uint64_t v267 = CMPhotoGainMapCreateOutputFromConstituents(v555, v589, v583, (uint64_t)v577, v536, v167, v41, 0, v49, v574, v571, v567, v563, &pixelBuffer, v539);
LABEL_437:
                                  uint64_t v23 = v267;
LABEL_438:
                                  CFRelease(v167);
                                  goto LABEL_439;
                                }
                              }
                            }
                          }
LABEL_585:
                          uint64_t v23 = v168;
                          uint32x4_t v165 = 0;
                          goto LABEL_438;
                        }
                      }
                      uint64_t v23 = v170;
                      uint32x4_t v165 = 0;
LABEL_439:
                      a5 = v609;
                      goto LABEL_440;
                    }
                  }
                  else
                  {
                    uint64_t CropPreOrientation = FigSignalErrorAt();
                  }
                  uint64_t v23 = CropPreOrientation;
                  uint32x4_t v165 = 0;
                  a5 = v609;
                  goto LABEL_601;
                }
                uint64_t v23 = CropPostOrientation;
                a5 = v609;
              }
              uint64_t v16 = v619;
              uint32x4_t v165 = 0;
              goto LABEL_440;
            }
          }
        }
      }
      uint64_t v23 = HEIFOrientation;
      uint32x4_t v165 = 0;
LABEL_601:
      uint64_t v16 = v619;
LABEL_440:
      if ((void)v664) {
        CFRelease((CFTypeRef)v664);
      }
LABEL_442:
      if ((void)v661) {
        CFRelease((CFTypeRef)v661);
      }
      if (v686.i64[0]) {
        CFRelease((CFTypeRef)v686.i64[0]);
      }
      if (cf.i64[0]) {
        CFRelease((CFTypeRef)cf.i64[0]);
      }
      if ((void)v667) {
        CFRelease((CFTypeRef)v667);
      }
      if (v666.i64[0]) {
        CFRelease((CFTypeRef)v666.i64[0]);
      }
      if (v165) {
        CFRelease(v165);
      }
      if (value.i64[0]) {
        CFRelease((CFTypeRef)value.i64[0]);
      }
      uint64_t v9 = a9;
      if ((void)v660) {
        CFRelease((CFTypeRef)v660);
      }
      BOOL v172 = (const void *)v659;
      if ((void)v659) {
        goto LABEL_222;
      }
      goto LABEL_223;
    }
    size_t v86 = (const void *)v16[1];
    BOOL v534 = v16[2];
    v542 = (const void *)v16[3];
    *(void *)&long long v546 = *v16;
    uint64x2_t cf = *((uint64x2_t *)v16 + 2);
    char v685 = *((unsigned char *)v16 + 48);
    int v556 = *((unsigned __int8 *)v16 + 49);
    long long v87 = *(_OWORD *)((char *)v16 + 66);
    uint64x2_t v682 = *(uint64x2_t *)((char *)v16 + 50);
    *(_OWORD *)v683 = v87;
    *(_OWORD *)&v683[14] = *((_OWORD *)v16 + 5);
    int v88 = *a5;
    int v531 = a5[1];
    LODWORD(BOOLean) = *(_DWORD *)(a5 + 2);
    WORD2(BOOLean) = *((_WORD *)a5 + 3);
    *(void *)&long long v551 = *((void *)a5 + 2);
    *((void *)&v551 + 1) = *((void *)a5 + 1);
    *(void *)&long long v537 = *((void *)a5 + 4);
    *((void *)&v537 + 1) = *((void *)a5 + 3);
    long long v89 = *(_OWORD *)(a5 + 40);
    long long v90 = *(_OWORD *)(a5 + 88);
    *(_OWORD *)&v680[32] = *(_OWORD *)(a5 + 72);
    long long v681 = v90;
    long long v91 = *(_OWORD *)(a5 + 56);
    *(_OWORD *)v680 = v89;
    *(_OWORD *)&v680[16] = v91;
    uint64_t v522 = *((void *)a5 + 13);
    int v569 = a5[112];
    unsigned __int8 v92 = a5[113];
    unsigned __int8 v576 = a5[114];
    unsigned __int8 v650 = a5[119];
    int v649 = *(_DWORD *)(a5 + 115);
    uint64_t v573 = *((void *)a5 + 15);
    uint64_t v520 = *((void *)a5 + 16);
    CFTypeRef v657 = 0;
    *((void *)&v546 + 1) = v86;
    CFAllocatorRef v93 = CFGetAllocator(v86);
    uint64_t v94 = FigPictureReaderGetFigBaseObject();
    uint64_t v95 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v95) {
      uint64_t v96 = v95;
    }
    else {
      uint64_t v96 = 0;
    }
    size_t v100 = *(uint64_t (**)(uint64_t, void, CFAllocatorRef, CFTypeRef *))(v96 + 48);
    if (!v100)
    {
      BOOL v154 = 0;
      uint64_t v23 = 4294954514;
      goto LABEL_1067;
    }
    unsigned __int8 v495 = v92;
    int v501 = v88;
    uint64_t v101 = v100(v94, *MEMORY[0x1E4F333A0], v93, &v657);
    if (v101)
    {
      uint64_t v23 = v101;
      BOOL v154 = 0;
      goto LABEL_1067;
    }
    v679[0] = 0u;
    memset(v678, 0, sizeof(v678));
    CFDictionaryRef v102 = (const __CFDictionary *)v657;
    *(void *)&long long v674 = 0;
    *(void *)v690 = 0;
    *(void *)&v688[0] = 0;
    CFAllocatorRef v103 = CFGetAllocator(v657);
    CFDictionaryGetValue(v102, (const void *)*MEMORY[0x1E4F333C0]);
    v610 = a5;
    if (!FigCFEqual())
    {
      FigSignalErrorAt();
      CFDictionaryRef v110 = 0;
      char v182 = 1;
      goto LABEL_637;
    }
    CFDictionaryRef v104 = (const __CFDictionary *)CFDictionaryGetValue(v102, (const void *)*MEMORY[0x1E4F333B0]);
    if (v104)
    {
      CFDictionaryRef v105 = v104;
      *(_OWORD *)CGSize size = *MEMORY[0x1E4F1DB30];
      uint64_t v517 = *MEMORY[0x1E4F33430];
      if (FigCFDictionaryGetCGSizeIfPresent())
      {
        uint64x2_t v106 = vcvtq_u64_f64(vrndaq_f64(*(float64x2_t *)size));
        uint64_t v586 = v106.i64[0];
        if (v106.i64[0])
        {
          v580 = (char *)v106.i64[1];
          if (v106.i64[1])
          {
            *(uint64x2_t *)v597 = v106;
            CFArrayRef v107 = (const __CFArray *)CFDictionaryGetValue(v105, (const void *)*MEMORY[0x1E4F33428]);
            if (v107)
            {
              CFIndex Count = CFArrayGetCount(v107);
              CFDictionaryRef v109 = (const __CFDictionary *)malloc_type_malloc(4 * Count, 0x100004052888210uLL);
              CFDictionaryRef v110 = v109;
              if (!Count) {
                goto LABEL_79;
              }
              uint64_t v111 = 0;
              CFDictionaryRef v112 = v109;
              while (FigCFArrayGetInt32AtIndex())
              {
                ++v111;
                CFDictionaryRef v112 = (const __CFDictionary *)((char *)v112 + 4);
                if (Count == v111) {
                  goto LABEL_79;
                }
              }
            }
            else
            {
              CFDictionaryRef v110 = 0;
            }
            int v308 = FigSignalErrorAt();
            free(v110);
            CFDictionaryRef v110 = 0;
            if (v308) {
              goto LABEL_620;
            }
            CFIndex Count = 0;
LABEL_79:
            CFArrayRef v113 = (const __CFArray *)CFDictionaryGetValue(v102, (const void *)*MEMORY[0x1E4F333B8]);
            if (v113)
            {
              CFArrayRef v114 = v113;
              CFDictionaryRef theDictd = v110;
              CFIndex v115 = CFArrayGetCount(v113);
              if (Count != 2 * v115)
              {
                FigSignalErrorAt();
                char v182 = 1;
                a2 = v620;
                goto LABEL_636;
              }
              a2 = v620;
              long long v116 = *(_OWORD *)v597;
              if (!v115)
              {
                unsigned int v120 = 0;
                unsigned int v119 = 0;
                unint64_t v565 = 0;
                CFAllocatorRef allocator = 0;
                unint64_t v139 = 0;
                unint64_t v140 = 0;
LABEL_249:
                char v182 = 0;
                *(void *)&v678[0] = v120;
                *((void *)&v678[0] + 1) = v119;
                *(void *)&v678[1] = v565;
                *((void *)&v678[1] + 1) = allocator;
                *(void *)&v678[2] = v139;
                *((void *)&v678[2] + 1) = v140;
                v679[0] = v116;
                goto LABEL_635;
              }
              CFIndex v117 = 0;
              int v559 = 0;
              int v523 = 0;
              v506 = 0;
              unint64_t v512 = 0;
              unint64_t v515 = 0;
              unint64_t v118 = 0;
              CFAllocatorRef allocator = 0;
              unint64_t v565 = 0;
              unsigned int v119 = 0;
              unsigned int v120 = 0;
              *(void *)v615 = *MEMORY[0x1E4F33390];
              uint64_t v509 = v586 - 1;
              while (1)
              {
                CFIndex v121 = v115;
                CFDataRef ValueAtIndex = CFArrayGetValueAtIndex(v114, v117);
                if (!ValueAtIndex)
                {
LABEL_633:
                  FigSignalErrorAt();
                  goto LABEL_634;
                }
                CFTypeRef v123 = ValueAtIndex;
                v691[0] = 0;
                uint64_t v124 = *(void *)(CMBaseObjectGetVTable() + 16);
                if (v124) {
                  uint64_t v125 = v124;
                }
                else {
                  uint64_t v125 = 0;
                }
                uint64_t v126 = *(unsigned int (**)(const void *, CFTypeRef *))(v125 + 32);
                if (!v126 || v126(v123, v691)) {
                  goto LABEL_634;
                }
                if ((uint64_t)v691[0] >= 1)
                {
                  uint64_t v127 = 0;
                  while (1)
                  {
                    if (*(void *)v690)
                    {
                      CFRelease(*(CFTypeRef *)v690);
                      *(void *)v690 = 0;
                    }
                    if (*(void *)&v688[0])
                    {
                      CFRelease(*(CFTypeRef *)&v688[0]);
                      *(void *)&v688[0] = 0;
                    }
                    uint64_t v128 = *(void *)(CMBaseObjectGetVTable() + 16);
                    uint64_t v129 = v128 ? v128 : 0;
                    int v130 = *(unsigned int (**)(const void *, uint64_t, unsigned char *))(v129 + 40);
                    if (!v130 || v130(v123, v127, v690)) {
                      break;
                    }
                    uint64_t v131 = FigPictureReaderGetFigBaseObject();
                    uint64_t v132 = *(void *)(CMBaseObjectGetVTable() + 8);
                    uint64_t v133 = v132 ? v132 : 0;
                    uint64_t v134 = *(unsigned int (**)(uint64_t, void, CFAllocatorRef, _OWORD *))(v133 + 48);
                    if (!v134
                      || v134(v131, *(void *)v615, v103, v688)
                      || CMPhotoGetAuxiliaryImageTypeFromURN() == 3)
                    {
                      break;
                    }
                    if (++v127 >= (uint64_t)v691[0]) {
                      goto LABEL_107;
                    }
                  }
                  char v182 = 1;
                  a5 = v610;
                  uint64_t v9 = a9;
                  uint64_t v11 = v617;
                  a2 = v620;
LABEL_636:
                  CFDictionaryRef v110 = theDictd;
LABEL_637:
                  free(v110);
                  if ((void)v674) {
                    CFRelease((CFTypeRef)v674);
                  }
                  if (*(void *)v690) {
                    CFRelease(*(CFTypeRef *)v690);
                  }
                  if (*(void *)&v688[0]) {
                    CFRelease(*(CFTypeRef *)&v688[0]);
                  }
                  if (v182)
                  {
                    BOOL v154 = 0;
                    uint64_t v16 = v619;
                    v309 = (unsigned __int8 *)*((void *)&v546 + 1);
                    goto LABEL_949;
                  }
                  CFDictionaryRef v310 = (const __CFDictionary *)v657;
                  *(_OWORD *)v690 = v546;
                  *(void *)&v690[16] = v534;
                  *(void *)&v690[24] = v542;
                  *(uint64x2_t *)&v690[32] = cf;
                  v690[48] = v685;
                  v690[49] = v556;
                  *(uint64x2_t *)&v690[50] = v682;
                  *(_OWORD *)&v690[66] = *(_OWORD *)v683;
                  *(_OWORD *)&v690[80] = *(_OWORD *)&v683[14];
                  LODWORD(v670) = BOOLean;
                  WORD2(v670) = WORD2(BOOLean);
                  v688[0] = *(_OWORD *)v680;
                  v688[1] = *(_OWORD *)&v680[16];
                  v688[2] = *(_OWORD *)&v680[32];
                  long long v689 = v681;
                  LODWORD(v668) = v649;
                  BYTE4(v668) = v650;
                  *(void *)&long long v660 = 0;
                  *(void *)&long long v659 = 0;
                  if ((void)v546) {
                    uint64_t v311 = v546;
                  }
                  else {
                    uint64_t v311 = *((void *)&v546 + 1);
                  }
                  uint64_t v500 = v311;
                  CFTypeRef v673 = 0;
                  uint64_t ImageOrientation = _getImageOrientation(*((uint64_t *)&v546 + 1), a2, 0, &v646);
                  if (ImageOrientation) {
                    goto LABEL_654;
                  }
                  long long v313 = v678[0];
                  uint64x2_t v314 = (uint64x2_t)v678[1];
                  long long v315 = v678[2];
                  long long v667 = v679[0];
                  long long v665 = 0u;
                  long long v664 = 0u;
                  uint64_t ImageOrientation = CMPhotoPictureReaderGetImageGeometryFromPictureReader(a2, *(unsigned __int8 *)(*(void *)&v690[8] + 28), (unint64_t)&v664, 0);
                  if (ImageOrientation) {
                    goto LABEL_654;
                  }
                  uint64_t v316 = v313 - 1;
                  uint64_t v317 = *((void *)&v313 + 1) - 1;
                  if (v501)
                  {
                    long long v664 = 0uLL;
                    *(void *)&long long v665 = v315 + v314.i64[0] * v316;
                    *((void *)&v665 + 1) = *((void *)&v315 + 1) + v314.i64[1] * v317;
                  }
                  if (v551 != 0 || v537 != 0 && v537 != __PAIR128__(v665, *((unint64_t *)&v665 + 1)))
                  {
                    *(void *)CGSize size = *((void *)&v551 + 1);
                    *(void *)&size[8] = v551;
                    *(void *)&size[16] = *((void *)&v537 + 1);
                    *(void *)&size[24] = v537;
                    uint64_t ImageOrientation = CMPhotoApplyCropCMPhotoRectToRect(&v664, (unint64_t *)size);
                    if (ImageOrientation)
                    {
LABEL_654:
                      uint64_t v23 = ImageOrientation;
                      BOOL v154 = 0;
                      uint64_t v16 = v619;
LABEL_1095:
                      v309 = (unsigned __int8 *)*((void *)&v546 + 1);
                      goto LABEL_944;
                    }
                  }
                  unint64_t v318 = (unint64_t)v664 / v314.i64[0];
                  uint64_t v319 = *((void *)&v664 + 1) / v314.i64[1];
                  *(void *)&long long v664 = (unint64_t)v664 % v314.i64[0];
                  *((void *)&v664 + 1) %= v314.i64[1];
                  *(void *)&long long v667 = v665 + v664;
                  *((void *)&v667 + 1) = *((void *)&v665 + 1) + *((void *)&v664 + 1);
                  uint64_t v587 = v665 + v664;
                  unint64_t v497 = v665 + v664 + v314.i64[0] + ~((unint64_t)(v665 + v664 - 1) % v314.i64[0]);
                  uint64_t v598 = *((void *)&v665 + 1) + *((void *)&v664 + 1);
                  uint64x2_t v666 = v314;
                  unint64_t v561 = *((void *)&v665 + 1)
                       + *((void *)&v664 + 1)
                       + v314.i64[1]
                       + ~((unint64_t)(*((void *)&v665 + 1) + *((void *)&v664 + 1) - 1) % v314.i64[1]);
                  unint64_t v516 = v561 / v314.i64[1];
                  size_t v493 = v561 / v314.i64[1] * v314.i64[1];
                  size_t v494 = v497 / v314.i64[0] * v314.i64[0];
                  v686.i64[0] = v494;
                  v686.i64[1] = v493;
                  CFDictionaryRef theDicte = (CFDictionaryRef)v318;
                  unint64_t v502 = v497 / v314.i64[0];
                  if (v497 / v314.i64[0] + v318 == (void)v313)
                  {
                    size_t v494 = v494 - v314.i64[0] + v315;
                    v686.i64[0] = v494;
                  }
                  if (v516 + v319 == *((void *)&v313 + 1))
                  {
                    v493 += *((void *)&v315 + 1) - v314.i64[1];
                    v686.i64[1] = v493;
                  }
                  if (v318 == v316) {
                    v666.i64[0] = v315;
                  }
                  if (v319 == v317) {
                    v666.i64[1] = *((void *)&v315 + 1);
                  }
                  CFArrayRef v320 = (const __CFArray *)CFDictionaryGetValue(v310, (const void *)*MEMORY[0x1E4F333B8]);
                  uint64_t v16 = v619;
                  if (!v320)
                  {
                    BOOL v154 = 0;
                    uint64_t v23 = 0;
                    goto LABEL_1095;
                  }
                  CFTypeRef v672 = 0;
                  CFArrayRef v581 = v320;
                  uint64_t v492 = v319;
                  uint64_t LayerReaderAtPosition = _getLayerReaderAtPosition(v320, (uint64_t)theDicte, v319, v678, &v672);
                  if (LayerReaderAtPosition)
                  {
                    uint64_t v23 = LayerReaderAtPosition;
                    BOOL v154 = 0;
                    goto LABEL_1095;
                  }
                  CFTypeRef v322 = v672;
                  v323 = *(unsigned char **)&v690[8];
                  *(void *)CGSize size = 0;
                  *(void *)&long long v674 = 0;
                  v691[0] = 0;
                  v692[0] = 0;
                  LODWORD(v661) = -1;
                  value.i32[0] = -1;
                  LOBYTE(v671) = 0;
                  uint64_t v324 = _copyColorInfoForItem(*(unsigned char **)&v690[8], a2, 0, v569, 0, 0, (CFTypeRef *)size, &v674, v691, v692, &v661, &value, &v671);
                  if (v324)
                  {
                    uint64_t v23 = v324;
                    v326 = *(const void **)size;
                    if (*(void *)size) {
LABEL_692:
                    }
                      CFRelease(v326);
LABEL_693:
                    CFTypeRef v503 = 0;
                    CFTypeRef v505 = 0;
                    CFTypeRef v507 = 0;
                    CFTypeRef v508 = 0;
                    int v335 = -1;
                    unsigned int v499 = -1;
                  }
                  else
                  {
                    CFTypeRef v325 = v692[0];
                    if ((_BYTE)v671 && v692[0])
                    {
                      CFRelease(v692[0]);
                      CFTypeRef v325 = 0;
                      v692[0] = 0;
                    }
                    v326 = *(const void **)size;
                    CFTypeRef v327 = v691[0];
                    if (*(void *)size && (void)v674 && v691[0] && v325)
                    {
                      CFTypeRef v508 = (CFTypeRef)v674;
                      goto LABEL_695;
                    }
                    if (*(void *)size) {
                      v328 = 0;
                    }
                    else {
                      v328 = (CFTypeRef *)size;
                    }
                    if ((void)v674) {
                      v329 = 0;
                    }
                    else {
                      v329 = &v674;
                    }
                    v330 = v691;
                    if (v691[0]) {
                      v330 = 0;
                    }
                    v331 = v692;
                    if (v325) {
                      v331 = 0;
                    }
                    v332 = &v661;
                    if (v661 != -1) {
                      v332 = 0;
                    }
                    p_uint64x2_t value = (long long *)&value;
                    if (value.i32[0] != -1) {
                      p_uint64x2_t value = 0;
                    }
                    uint64_t v334 = _copyColorInfoForItem(v323, v322, 0, v569, 0, 0, v328, v329, v330, v331, v332, p_value, 0);
                    v326 = *(const void **)size;
                    if (v334)
                    {
                      uint64_t v23 = v334;
                      if (*(void *)size) {
                        goto LABEL_692;
                      }
                      goto LABEL_693;
                    }
                    CFTypeRef v508 = (CFTypeRef)v674;
                    CFTypeRef v327 = v691[0];
                    CFTypeRef v325 = v692[0];
LABEL_695:
                    CFTypeRef v503 = v327;
                    CFTypeRef v505 = v326;
                    CFTypeRef v507 = v325;
                    uint64_t v23 = 0;
                    *(void *)CGSize size = 0;
                    *(void *)&long long v674 = 0;
                    v691[0] = 0;
                    v692[0] = 0;
                    unsigned int v499 = v661;
                    int v335 = value.i32[0];
                  }
                  unsigned int v498 = v335;
                  if ((void)v674) {
                    CFRelease((CFTypeRef)v674);
                  }
                  if (v691[0]) {
                    CFRelease(v691[0]);
                  }
                  if (v692[0]) {
                    CFRelease(v692[0]);
                  }
                  if (v23) {
                    goto LABEL_1106;
                  }
                  LODWORD(v658) = 0;
                  uint64_t ImageCodecTypeFromReader = CMPhotoPictureReaderGetImageCodecTypeFromReader(v672, &v658);
                  if (ImageCodecTypeFromReader) {
                    goto LABEL_1105;
                  }
                  if (v658 == 1936484717)
                  {
                    BOOL v337 = 0;
                    uint64_t v23 = 4294950297;
                    if (v502 != 1 || v516 > 4) {
                      goto LABEL_936;
                    }
                  }
                  unint64_t v338 = v314.u64[1];
                  if (v531) {
                    BOOL v339 = v646 == 1;
                  }
                  else {
                    BOOL v339 = 1;
                  }
                  BOOL v341 = !v339
                      || (((unint64_t)v551 % v314.i64[1]) | (*((void *)&v551 + 1) % v314.i64[0])) != 0
                      || v11 == 0;
                  int v342 = !v341;
                  int v513 = v342;
                  if (!v341
                    && (!*(void *)v11
                     || *(long long *)((char *)v11 + 8) != 0
                     || *(long long *)((char *)v11 + 24) != 0
                     || !*((void *)v11 + 5)))
                  {
                    BOOL v337 = 0;
                    uint64_t v23 = 4294950304;
                    goto LABEL_936;
                  }
                  v691[0] = 0;
                  v692[0] = 0;
                  memset(size, 0, 24);
                  long long v674 = 0uLL;
                  *(void *)&long long v675 = 0;
                  CFAllocatorRef v343 = CFGetAllocator(v581);
                  if (v314.i64[1] > v561)
                  {
                    int v518 = 1;
                    goto LABEL_769;
                  }
                  CFAllocatorRef v344 = v343;
                  uint64_t v345 = 0;
                  int v518 = 0;
                  uint64_t v346 = *MEMORY[0x1E4F333D0];
                  while (v314.i64[0] > v497)
                  {
LABEL_729:
                    if (++v345 == v516)
                    {
                      int v518 = 1;
                      goto LABEL_768;
                    }
                  }
                  uint64_t v347 = 0;
                  while (1)
                  {
                    *(void *)&long long v661 = 0;
                    if (_getLayerReaderAtPosition(v581, (uint64_t)theDicte + v347, v345 + v492, v678, &v661))goto LABEL_768; {
                    value.i32[0] = 0;
                    }
                    if (CMPhotoPictureReaderGetItemTypeFromReader((const void *)v661, &value)) {
                      goto LABEL_768;
                    }
                    BOOL v348 = value.i32[0] == 1735551332 || value.i32[0] == 1768187246;
                    if (v348 || value.i32[0] == 1768912492) {
                      goto LABEL_768;
                    }
                    if (v347 | v345)
                    {
                      if (v691[0])
                      {
                        CFRelease(v691[0]);
                        v691[0] = 0;
                      }
                      uint64_t v350 = FigPictureReaderGetFigBaseObject();
                      uint64_t v351 = *(void *)(CMBaseObjectGetVTable() + 8);
                      if (v351) {
                        uint64_t v352 = v351;
                      }
                      else {
                        uint64_t v352 = 0;
                      }
                      v356 = *(unsigned int (**)(uint64_t, uint64_t, CFAllocatorRef, CFTypeRef *))(v352 + 48);
                      if (!v356 || v356(v350, v346, v344, v691))
                      {
LABEL_767:
                        unint64_t v338 = v314.u64[1];
                        goto LABEL_768;
                      }
                      unint64_t v338 = v314.u64[1];
                      if (value.i32[0] == 1936484717)
                      {
                        if (_getDecoderReusableInfoForOverlay((const void *)v661, (CMFormatDescriptionRef)v691[0], (uint64_t)size))goto LABEL_768; {
                        int v357 = v674;
                        }
                        if (v674 != *(_DWORD *)size)
                        {
LABEL_1102:
                          int v518 = 0;
LABEL_768:
                          a5 = v610;
                          uint64_t v16 = v619;
                          uint64_t v11 = v617;
                          a2 = v620;
LABEL_769:
                          if (v691[0]) {
                            CFRelease(v691[0]);
                          }
                          if (v692[0]) {
                            CFRelease(v692[0]);
                          }
                          if (*(void *)&size[8]) {
                            CFRelease(*(CFTypeRef *)&size[8]);
                          }
                          if (*((void *)&v674 + 1)) {
                            CFRelease(*((CFTypeRef *)&v674 + 1));
                          }
                          if (v658 != 1936484717 || v518)
                          {
                            if (v518)
                            {
                              BOOL v361 = v314.i64[0] != (void)v315 && v502 == (void)v313;
                              BOOL v566 = v361;
                              CFArrayRef v362 = v581;
                              BOOL v488 = *((void *)&v315 + 1) != v338 && v516 == *((void *)&v313 + 1);
                            }
                            else
                            {
                              BOOL v566 = 0;
                              BOOL v488 = 0;
                              CFArrayRef v362 = v581;
                            }
                            if (v338 > v561)
                            {
                              char v363 = 0;
                              goto LABEL_833;
                            }
                            uint64_t v364 = 0;
                            uint64_t v365 = *MEMORY[0x1E4F24A78];
                            CFAllocatorRef allocatorc = (CFAllocatorRef)*MEMORY[0x1E4F33440];
                            uint64_t v525 = *MEMORY[0x1E4F33410];
                            while (v314.i64[0] > v497)
                            {
LABEL_829:
                              if (++v364 == v516)
                              {
                                char v363 = 0;
                                goto LABEL_832;
                              }
                            }
                            uint64_t v366 = 0;
                            unint64_t v367 = v497 / v314.i64[0];
                            while (2)
                            {
                              v691[0] = 0;
                              if (_getLayerReaderAtPosition(v362, (uint64_t)theDicte + v366, v364 + v492, v678, v691))
                              {
LABEL_831:
                                char v363 = 1;
LABEL_832:
                                a5 = v610;
                                uint64_t v11 = v617;
                                unint64_t v338 = v314.u64[1];
LABEL_833:
                                if ((unint64_t)v664 % v314.i64[0]) {
                                  BOOL v388 = 1;
                                }
                                else {
                                  BOOL v388 = *((void *)&v664 + 1) % v338 != 0;
                                }
                                if ((void)v665 + (void)v664 == v494
                                  && *((void *)&v665 + 1) + *((void *)&v664 + 1) == v493)
                                {
                                  BOOL v389 = 0;
                                }
                                else if ((unint64_t)v665 % v314.i64[0])
                                {
                                  BOOL v389 = 1;
                                }
                                else
                                {
                                  BOOL v389 = *((void *)&v665 + 1) % v338 != 0;
                                }
                                if (v513)
                                {
                                  dispatch_retain(*((dispatch_object_t *)v11 + 5));
                                  v390 = *((void *)v11 + 5);
                                }
                                else
                                {
                                  v390 = dispatch_queue_create("com.apple.cmphoto.canvasTransferQueue", 0);
                                }
                                if (!v390)
                                {
                                  BOOL v337 = 0;
                                  uint64_t v23 = 4294950305;
                                  uint64_t v16 = v619;
                                  goto LABEL_936;
                                }
                                int v391 = 0;
                                memset(v692, 0, 37);
                                LODWORD(v669) = 0;
                                BYTE4(v669) = 0;
                                LODWORD(v671) = 0;
                                *(_DWORD *)((char *)&v671 + 3) = 0;
                                uint64x2_t value = 0uLL;
                                v392 = (int *)MEMORY[0x1E4F1EBA8];
                                if (v338 > v561)
                                {
LABEL_847:
                                  dispatch_barrier_sync(v390, &__block_literal_global_25);
                                  int v393 = *v392;
                                  if (v391)
                                  {
                                    uint64_t v16 = v619;
                                    if (v393 == 1)
                                    {
                                      kdebug_trace();
                                      int v393 = *v392;
                                    }
                                  }
                                  else
                                  {
                                    uint64_t v16 = v619;
                                  }
                                  if (v393 == 1) {
                                    kdebug_trace();
                                  }
                                  if ((void)v660)
                                  {
                                    uint64_t v427 = CMPhotoSetPixelBufferCLAPFromRect((__CVBuffer *)v660, 1, 1, (double)(unint64_t)v664, (double)*((unint64_t *)&v664 + 1), (double)(unint64_t)v665, (double)*((unint64_t *)&v665 + 1));
                                    BOOL v337 = v427 == 0;
                                    char v428 = v513;
                                    if (v427) {
                                      char v428 = 1;
                                    }
                                    if (v428)
                                    {
                                      uint64_t v23 = v427;
                                    }
                                    else
                                    {
                                      BOOL v337 = 0;
                                      uint64_t v23 = 0;
                                      CVPixelBufferRef pixelBuffer = (CVPixelBufferRef)v660;
                                      *(void *)&long long v660 = 0;
                                    }
                                  }
                                  else
                                  {
                                    BOOL v337 = 0;
                                    uint64_t v23 = 4294950305;
                                  }
                                  goto LABEL_935;
                                }
                                uint64_t v394 = 0;
                                int v395 = v566;
                                if (v488) {
                                  int v395 = 1;
                                }
                                int v491 = v395;
                                unint64_t v396 = v497 / v314.i64[0];
                                if (v502 <= 1) {
                                  unint64_t v396 = 1;
                                }
                                unint64_t v485 = v396;
                                char v490 = (v363 | v389 | v388) ^ 1;
                                uint64_t v496 = *MEMORY[0x1E4F333D0];
                                if (v516 <= 1) {
                                  uint64_t v397 = 1;
                                }
                                else {
                                  uint64_t v397 = v561 / v314.i64[1];
                                }
                                uint64_t v486 = v397;
                                int v398 = v522;
                                if (!v522) {
                                  int v398 = 875704422;
                                }
                                unsigned int v487 = v398;
                                uint64_t v16 = v619;
                                while (1)
                                {
                                  uint64_t v489 = v394;
                                  if (v314.i64[0] <= v497) {
                                    break;
                                  }
LABEL_917:
                                  uint64_t v394 = v489 + 1;
                                  unint64_t v338 = v314.u64[1];
                                  if (v489 + 1 == v486)
                                  {
                                    if ((void)v659)
                                    {
                                      uint64_t v426 = HEIFItemDecoderWaitForFinishAndReturnStatus(v659, (uint64_t *)&v667, v666.i64, v666.i64);
                                      a5 = v610;
                                      a2 = v620;
                                      if (v426)
                                      {
                                        uint64_t v23 = v426;
                                        BOOL v337 = 0;
                                        uint64_t v16 = v619;
                                        goto LABEL_935;
                                      }
                                      int v391 = 1;
                                    }
                                    else
                                    {
                                      int v391 = 0;
                                      a5 = v610;
                                      a2 = v620;
                                    }
                                    v392 = (int *)MEMORY[0x1E4F1EBA8];
                                    goto LABEL_847;
                                  }
                                }
                                uint64_t v399 = 0;
                                v400 = 0;
                                uint64_t v401 = 0;
                                unint64_t v402 = v394 * v338;
                                uint64_t v562 = v394 + v492;
                                unint64_t v403 = v485;
                                char v405 = v488 && v394 == v516 - 1;
                                char v511 = v405;
                                unint64_t v406 = v502 - 1;
                                while (2)
                                {
                                  uint64_t v407 = v659;
                                  if ((void)v659)
                                  {
                                    uint64_t v23 = *(unsigned int *)(v659 + 14580);
                                    if (v23) {
                                      goto LABEL_1073;
                                    }
                                  }
                                  uint64_t v408 = _getLayerReaderAtPosition(v581, (uint64_t)theDicte + v401, v562, v678, &v672);
                                  if (v408)
                                  {
                                    uint64_t v23 = v408;
LABEL_1073:
                                    BOOL v337 = 0;
                                    a5 = v610;
                                    goto LABEL_934;
                                  }
                                  if (v406) {
                                    BOOL v409 = 0;
                                  }
                                  else {
                                    BOOL v409 = v566;
                                  }
                                  if (!(void)v660)
                                  {
                                    if (v513)
                                    {
                                      CVPixelBufferRef v410 = *(CVPixelBufferRef *)v617;
                                      if (*(void *)v617) {
                                        CVPixelBufferRef v410 = (CVPixelBufferRef)CFRetain(v410);
                                      }
                                      *(void *)&long long v660 = v410;
                                      if (!v518 || v407) {
                                        goto LABEL_889;
                                      }
LABEL_883:
                                      v411 = 0;
                                      *(void *)&long long v674 = 0;
                                      if (v491)
                                      {
                                        uint64_t v412 = _getLayerReaderAtPosition(v581, (uint64_t)theDicte + v502 - 1, v516 - 1 + v492, v678, &v674);
                                        if (v412) {
                                          goto LABEL_932;
                                        }
                                        v411 = (const void *)v674;
                                      }
                                      size[0] = v501;
                                      size[1] = v531;
                                      *(_DWORD *)&size[2] = v670;
                                      *(_WORD *)&size[6] = WORD2(v670);
                                      *(void *)&size[8] = *((void *)&v551 + 1);
                                      *(void *)&size[16] = v551;
                                      *(void *)&size[24] = *((void *)&v537 + 1);
                                      *(void *)&size[32] = v537;
                                      *(_OWORD *)&size[40] = v688[0];
                                      *(_OWORD *)&size[56] = v688[1];
                                      *(_OWORD *)&size[72] = v688[2];
                                      *(_OWORD *)&size[88] = v689;
                                      *(void *)&size[104] = v522;
                                      size[112] = v569;
                                      size[113] = v495;
                                      size[114] = v576;
                                      size[119] = BYTE4(v668);
                                      *(_DWORD *)&size[115] = v668;
                                      *(void *)&size[120] = v573;
                                      *(void *)&size[128] = v520;
                                      uint64_t v412 = HEIFItemDecoderCreate((uint64_t)v690, v620, v672, v411, (uint64_t)size, v490, v502, v516, &v667, (size_t *)&v686, v666.i64, &v659, (__CVBuffer **)&v660);
                                      if (v412)
                                      {
LABEL_932:
                                        uint64_t v23 = v412;
                                        BOOL v337 = 0;
                                        goto LABEL_933;
                                      }
                                    }
                                    else
                                    {
                                      if (v518 && !v407) {
                                        goto LABEL_883;
                                      }
                                      long long v661 = 0uLL;
                                      *(void *)&long long v662 = v587;
                                      *((void *)&v662 + 1) = v598;
                                      uint64_t v412 = _createPixelBuffer(*(const void **)&v690[24], v500, v690[49], v487, v666.i64[0], v666.i64[1], v494, v493, (unint64_t *)&v661, 0, 0, &v660);
                                      if (v412) {
                                        goto LABEL_932;
                                      }
                                    }
LABEL_889:
                                    v413 = (_DWORD *)MEMORY[0x1E4F1EBA8];
                                    if (*MEMORY[0x1E4F1EBA8] == 1)
                                    {
                                      kdebug_trace();
                                      if ((void)v659)
                                      {
                                        if (*v413 == 1) {
                                          kdebug_trace();
                                        }
                                      }
                                    }
                                    if (!(void)v660)
                                    {
                                      BOOL v337 = 0;
                                      uint64_t v23 = 4294950305;
LABEL_933:
                                      a5 = v610;
                                      uint64_t v16 = v619;
LABEL_934:
                                      a2 = v620;
LABEL_935:
                                      HEIFItemDecoderRelease(v659);
                                      dispatch_release(v390);
LABEL_936:
                                      if (v505) {
                                        CFRelease(v505);
                                      }
                                      uint64_t v9 = a9;
                                      v309 = (unsigned __int8 *)*((void *)&v546 + 1);
                                      if (v508) {
                                        CFRelease(v508);
                                      }
                                      if (v503) {
                                        CFRelease(v503);
                                      }
                                      BOOL v154 = v337;
                                      if (v507) {
                                        CFRelease(v507);
                                      }
LABEL_944:
                                      if ((void)v660) {
                                        CFRelease((CFTypeRef)v660);
                                      }
                                      if (v673) {
                                        CFRelease(v673);
                                      }
                                      if (!v23) {
                                        goto LABEL_1067;
                                      }
LABEL_949:
                                      CFDictionaryRef v429 = (const __CFDictionary *)v657;
                                      uint64x2_t v686 = cf;
                                      char v687 = v685;
                                      *(uint64x2_t *)v690 = v682;
                                      *(_OWORD *)&v690[16] = *(_OWORD *)v683;
                                      *(_OWORD *)&v690[30] = *(_OWORD *)&v683[14];
                                      CFTypeRef v673 = 0;
                                      CFTypeRef v672 = 0;
                                      CFTypeRef v671 = 0;
                                      CFTypeRef v670 = 0;
                                      CFTypeRef v669 = 0;
                                      CFTypeRef v668 = 0;
                                      CFAllocatorRef v616 = CFGetAllocator(v309);
                                      memset(v692, 0, 32);
                                      long long v667 = 0uLL;
                                      uint64_t v430 = CMPhotoPictureReaderGetImageGeometryFromPictureReader(a2, v309[28], (unint64_t)v692, (unint64_t)&v667);
                                      if (!v430)
                                      {
                                        uint64_t v430 = _getImageOrientation((uint64_t)v309, a2, 0, &v646);
                                        if (!v430)
                                        {
                                          CFDictionaryRef v431 = (const __CFDictionary *)CFDictionaryGetValue(v429, (const void *)*MEMORY[0x1E4F333B0]);
                                          if (!v431)
                                          {
                                            v599 = 0;
                                            v443 = 0;
                                            v445 = 0;
                                            uint64_t v23 = 4294950304;
                                            goto LABEL_1050;
                                          }
                                          CFDictionaryRef v432 = v431;
                                          CFDictionaryRef v433 = (const __CFDictionary *)CFDictionaryGetValue(v431, (const void *)*MEMORY[0x1E4F33430]);
                                          if (v433)
                                          {
                                            uint64x2_t v666 = 0uLL;
                                            if (CMPhotoSizeMakeWithDictionaryRepresentation(v433, &v666)
                                              && *(_OWORD *)&v666 == v667)
                                            {
                                              v434 = CFDictionaryGetValue(v432, (const void *)*MEMORY[0x1E4F33420]);
                                              CFDictionaryRef theDictf = v429;
                                              if (v434 && (v435 = (CGColor *)CFRetain(v434)) != 0)
                                              {
                                                v436 = v435;
                                                CFArrayRef v437 = (const __CFArray *)CFDictionaryGetValue(v432, (const void *)*MEMORY[0x1E4F33428]);
                                                if (v437)
                                                {
                                                  BOOL v438 = v154;
                                                  CFIndex v439 = CFArrayGetCount(v437);
                                                  if (v439)
                                                  {
                                                    CFIndex v440 = v439;
                                                    v441 = (char *)malloc_type_malloc(4 * v439, 0x100004052888210uLL);
                                                    uint64_t v442 = 0;
                                                    v599 = v441;
                                                    do
                                                    {
                                                      if (!FigCFArrayGetInt32AtIndex()) {
                                                        goto LABEL_1092;
                                                      }
                                                      ++v442;
                                                      v441 += 4;
                                                    }
                                                    while (v440 != v442);
                                                    a2 = v620;
                                                    BOOL v154 = v438;
                                                    v443 = v436;
LABEL_965:
                                                    BOOL v519 = v154;
                                                    long long v446 = v667;
                                                    *(void *)&long long v674 = 0;
                                                    *(void *)&v688[0] = 0;
                                                    v691[0] = 0;
                                                    *(void *)&long long v664 = 0;
                                                    LODWORD(v660) = -1;
                                                    LODWORD(v659) = -1;
                                                    *(void *)&long long v661 = 0;
                                                    value.i64[0] = 0;
                                                    uint64_t v447 = _copyColorInfoForItem(v309, a2, 0, 0, (CMVideoFormatDescriptionRef *)&value, 0, (CFTypeRef *)&v674, v688, v691, (CFTypeRef *)&v664, &v660, &v659, 0);
                                                    if (v447)
                                                    {
                                                      uint64_t v23 = v447;
                                                      v445 = 0;
                                                      v450 = 0;
                                                    }
                                                    else
                                                    {
                                                      if ((void)v546) {
                                                        uint64_t v448 = v546;
                                                      }
                                                      else {
                                                        uint64_t v448 = (uint64_t)v309;
                                                      }
                                                      memset(size, 0, 32);
                                                      uint64_t v449 = _createPixelBuffer(v542, v448, v556, 1111970369, v446, *((uint64_t *)&v446 + 1), v446, *((size_t *)&v446 + 1), (unint64_t *)size, 0, 0, &v661);
                                                      v450 = (__CVBuffer *)v661;
                                                      if (v449)
                                                      {
                                                        uint64_t v23 = v449;
                                                        v451 = v9;
                                                        v452 = a5;
                                                        if ((void)v661) {
                                                          goto LABEL_1089;
                                                        }
                                                        v445 = 0;
LABEL_974:
                                                        a5 = v452;
                                                        uint64_t v9 = v451;
                                                      }
                                                      else
                                                      {
                                                        if ((void)v661)
                                                        {
                                                          v451 = v9;
                                                          v452 = a5;
                                                          uint64_t v453 = CVPixelBufferLockBaseAddress((CVPixelBufferRef)v661, 0);
                                                          if (v453)
                                                          {
                                                            uint64_t v23 = v453;
                                                          }
                                                          else
                                                          {
                                                            size_t BytesPerRow = CVPixelBufferGetBytesPerRow(v450);
                                                            size_t Height = CVPixelBufferGetHeight(v450);
                                                            size_t Width = CVPixelBufferGetWidth(v450);
                                                            BaseAddress = CVPixelBufferGetBaseAddress(v450);
                                                            v458 = CGBitmapContextCreate(BaseAddress, Width, Height, 8uLL, BytesPerRow, (CGColorSpaceRef)v674, 0x2006u);
                                                            if (v458)
                                                            {
                                                              v445 = v458;
                                                              CGContextSetFillColorWithColor(v458, v443);
                                                              v696.size.double width = (double)(unint64_t)v446;
                                                              v696.size.double height = (double)*((unint64_t *)&v446 + 1);
                                                              v696.origin.x = 0.0;
                                                              v696.origin.y = 0.0;
                                                              CGContextFillRect(v445, v696);
                                                              CMPhotoAddColorInformationToPixelBufferAccordingToFormat((CFTypeRef)v674, *(const void **)&v688[0], v691[0], (const void *)v664, v450);
                                                              CMPhotoAddChromaLocationToPixelBufferAccordingToFormat(v660, v659, v450);
                                                              CMPhotoAddHDRMetadataToPixelBufferFromFormatDescription((const opaqueCMFormatDescription *)value.i64[0], v450);
                                                              uint64_t v23 = 0;
                                                              *(void *)&long long v661 = 0;
                                                              goto LABEL_974;
                                                            }
                                                            uint64_t v23 = FigSignalErrorAt();
                                                            CVPixelBufferUnlockBaseAddress(v450, 0);
                                                          }
LABEL_1089:
                                                          CFRelease(v450);
                                                          v445 = 0;
                                                          v450 = 0;
                                                          goto LABEL_974;
                                                        }
                                                        v445 = 0;
                                                        uint64_t v23 = 4294950305;
                                                      }
                                                    }
                                                    uint64_t v16 = v619;
                                                    if (value.i64[0]) {
                                                      CFRelease((CFTypeRef)value.i64[0]);
                                                    }
                                                    if ((void)v674) {
                                                      CFRelease((CFTypeRef)v674);
                                                    }
                                                    if (*(void *)&v688[0]) {
                                                      CFRelease(*(CFTypeRef *)&v688[0]);
                                                    }
                                                    if (v691[0]) {
                                                      CFRelease(v691[0]);
                                                    }
                                                    if ((void)v664) {
                                                      CFRelease((CFTypeRef)v664);
                                                    }
                                                    if (v23)
                                                    {
LABEL_1044:
                                                      if (v450)
                                                      {
                                                        CVPixelBufferUnlockBaseAddress(v450, 0);
                                                        CFRelease(v450);
                                                      }
                                                      goto LABEL_1050;
                                                    }
                                                    *(_DWORD *)v570 = CVPixelBufferGetPixelFormatType(v450);
                                                    CFArrayRef v459 = (const __CFArray *)CFDictionaryGetValue(theDictf, (const void *)*MEMORY[0x1E4F333B8]);
                                                    if (v459)
                                                    {
                                                      memset(v688, 0, 37);
                                                      v648[1] = 0;
                                                      LOBYTE(v648[2]) = 0;
                                                      LODWORD(v656) = 0;
                                                      *(_DWORD *)((char *)&v656 + 3) = 0;
                                                      long long v664 = 0u;
                                                      long long v665 = 0u;
                                                      uint64x2_t value = 0uLL;
                                                      memset(v691, 0, 37);
                                                      LOBYTE(v645) = 0;
                                                      int v644 = 0;
                                                      *(_DWORD *)((char *)&v653 + 3) = 0;
                                                      LODWORD(v653) = 0;
                                                      long long v661 = 0u;
                                                      long long v662 = 0u;
                                                      long long v660 = 0uLL;
                                                      long long v659 = 0uLL;
                                                      CFArrayRef v582 = v459;
                                                      CFIndex v514 = CFArrayGetCount(v459);
                                                      if (!v514) {
                                                        goto LABEL_1033;
                                                      }
                                                      CFIndex v460 = 0;
                                                      CFDictionaryRef theDictg = (CFDictionaryRef)*MEMORY[0x1E4F33390];
                                                      BOOL v521 = v556 == 0;
                                                      v592 = v445;
                                                      while (1)
                                                      {
                                                        if (v673)
                                                        {
                                                          CFRelease(v673);
                                                          CFTypeRef v673 = 0;
                                                        }
                                                        if (v669)
                                                        {
                                                          CFRelease(v669);
                                                          CFTypeRef v669 = 0;
                                                        }
                                                        if (v672)
                                                        {
                                                          CFRelease(v672);
                                                          CFTypeRef v672 = 0;
                                                        }
                                                        v461 = v9;
                                                        v462 = a5;
                                                        if (v668)
                                                        {
                                                          CFRelease(v668);
                                                          CFTypeRef v668 = 0;
                                                        }
                                                        v463 = (int32x2_t *)&v599[8 * v460];
                                                        int32x2_t v464 = *v463;
                                                        int64x2_t v588 = (int64x2_t)v667;
                                                        v465 = CFArrayGetValueAtIndex(v582, v460);
                                                        if (!v465)
                                                        {
                                                          uint64_t v467 = FigSignalErrorAt();
LABEL_1078:
                                                          uint64_t v23 = v467;
                                                          a5 = v462;
                                                          uint64_t v9 = v461;
                                                          uint64_t v16 = v619;
                                                          BOOL v154 = v519;
                                                          v445 = v592;
                                                          goto LABEL_1044;
                                                        }
                                                        v466 = v465;
                                                        long long v674 = v546;
                                                        *(void *)&long long v675 = v534;
                                                        *((void *)&v675 + 1) = v542;
                                                        uint64x2_t v676 = v686;
                                                        v677[0] = v687;
                                                        v677[1] = v556;
                                                        *(_OWORD *)&v677[2] = *(_OWORD *)v690;
                                                        *(_OWORD *)&v677[18] = *(_OWORD *)&v690[16];
                                                        *(_OWORD *)&v677[32] = *(_OWORD *)&v690[30];
                                                        *(_WORD *)CGSize size = 256;
                                                        size[2] = 0;
                                                        *(_OWORD *)&size[3] = v688[0];
                                                        *(_OWORD *)&size[19] = v688[1];
                                                        *(void *)&size[32] = *(void *)((char *)&v688[1] + 13);
                                                        *(_OWORD *)&size[40] = v664;
                                                        *(_OWORD *)&size[56] = v665;
                                                        *(int64x2_t *)&size[72] = vsubw_s32(v588, v464);
                                                        *(uint64x2_t *)&size[88] = value;
                                                        *(void *)&size[104] = *(unsigned int *)v570;
                                                        *(_WORD *)&size[112] = 0;
                                                        size[114] = v576;
                                                        size[119] = v648[2];
                                                        *(_DWORD *)&size[115] = v648[1];
                                                        *(void *)&size[120] = v573;
                                                        size[128] = 0;
                                                        *(_DWORD *)&size[132] = *(_DWORD *)((char *)&v656 + 3);
                                                        *(_DWORD *)&size[129] = v656;
                                                        uint64_t v467 = _decodeItem(&v674, v465, v620, 0, size, 0, 0, 0, &v673);
                                                        if (v467) {
                                                          goto LABEL_1078;
                                                        }
                                                        uint64_t WrappedPixelBufferForType = CMPhotoCreateWrappedPixelBufferForType(v616, (CVPixelBufferRef)v673, v521, 4, (CGImageRef *)&v669);
                                                        v445 = v592;
                                                        if (WrappedPixelBufferForType)
                                                        {
                                                          uint64_t v23 = WrappedPixelBufferForType;
                                                          goto LABEL_1042;
                                                        }
                                                        CFTypeRef v658 = 0;
                                                        uint64_t v469 = *(void *)(CMBaseObjectGetVTable() + 16);
                                                        if (v469) {
                                                          uint64_t v470 = v469;
                                                        }
                                                        else {
                                                          uint64_t v470 = 0;
                                                        }
                                                        v471 = *(uint64_t (**)(const void *, CFTypeRef *))(v470 + 32);
                                                        if (!v471)
                                                        {
                                                          uint64_t v23 = 4294954514;
                                                          goto LABEL_1042;
                                                        }
                                                        uint64_t v472 = v471(v466, &v658);
                                                        if (v472) {
                                                          goto LABEL_1101;
                                                        }
                                                        if ((uint64_t)v658 < 1) {
                                                          goto LABEL_1026;
                                                        }
                                                        uint64_t v473 = 0;
                                                        while (1)
                                                        {
                                                          if (v671)
                                                          {
                                                            CFRelease(v671);
                                                            CFTypeRef v671 = 0;
                                                          }
                                                          if (v670)
                                                          {
                                                            CFRelease(v670);
                                                            CFTypeRef v670 = 0;
                                                          }
                                                          uint64_t v474 = *(void *)(CMBaseObjectGetVTable() + 16);
                                                          if (v474) {
                                                            uint64_t v475 = v474;
                                                          }
                                                          else {
                                                            uint64_t v475 = 0;
                                                          }
                                                          v476 = *(uint64_t (**)(const void *, uint64_t, CFTypeRef *))(v475 + 40);
                                                          if (!v476) {
                                                            goto LABEL_1040;
                                                          }
                                                          uint64_t v472 = v476(v466, v473, &v671);
                                                          if (v472) {
                                                            goto LABEL_1101;
                                                          }
                                                          uint64_t v477 = FigPictureReaderGetFigBaseObject();
                                                          uint64_t v478 = *(void *)(CMBaseObjectGetVTable() + 8);
                                                          uint64_t v479 = v478 ? v478 : 0;
                                                          v480 = *(uint64_t (**)(uint64_t, CFDictionaryRef, const __CFAllocator *, CFTypeRef *))(v479 + 48);
                                                          if (!v480)
                                                          {
LABEL_1040:
                                                            uint64_t v23 = 4294954514;
                                                            goto LABEL_1041;
                                                          }
                                                          uint64_t v472 = v480(v477, theDictg, v616, &v670);
                                                          if (v472) {
                                                            goto LABEL_1101;
                                                          }
                                                          if (CMPhotoGetAuxiliaryImageTypeFromURN() == 3) {
                                                            break;
                                                          }
                                                          if (++v473 >= (uint64_t)v658) {
                                                            goto LABEL_1026;
                                                          }
                                                        }
                                                        long long v674 = v546;
                                                        *(void *)&long long v675 = v534;
                                                        *((void *)&v675 + 1) = v542;
                                                        uint64x2_t v676 = v686;
                                                        v677[0] = v687;
                                                        v677[1] = v556;
                                                        *(_OWORD *)&v677[2] = *(_OWORD *)v690;
                                                        *(_OWORD *)&v677[18] = *(_OWORD *)&v690[16];
                                                        *(_OWORD *)&v677[32] = *(_OWORD *)&v690[30];
                                                        *(_WORD *)CGSize size = 256;
                                                        size[2] = 0;
                                                        *(_OWORD *)&size[3] = *(_OWORD *)v691;
                                                        *(_OWORD *)&size[19] = *(_OWORD *)&v691[2];
                                                        *(CFTypeRef *)&size[32] = *(CFTypeRef *)((char *)&v691[3] + 5);
                                                        *(_OWORD *)&size[40] = v661;
                                                        *(_OWORD *)&size[56] = v662;
                                                        *(_OWORD *)&size[72] = v660;
                                                        *(_OWORD *)&size[88] = v659;
                                                        *(void *)&size[104] = 1278226488;
                                                        *(_WORD *)&size[112] = 1;
                                                        size[114] = v576;
                                                        size[119] = v645;
                                                        *(_DWORD *)&size[115] = v644;
                                                        *(void *)&size[120] = v573;
                                                        size[128] = 0;
                                                        *(_DWORD *)&size[132] = *(_DWORD *)((char *)&v653 + 3);
                                                        *(_DWORD *)&size[129] = v653;
                                                        uint64_t v472 = _decodeItem(&v674, v671, 0, 0, size, 0, 0, 0, &v672);
                                                        if (v472) {
                                                          goto LABEL_1101;
                                                        }
                                                        uint64_t v472 = CMPhotoCreateWrappedPixelBufferForType(v616, (CVPixelBufferRef)v672, v521, 4, (CGImageRef *)&v668);
                                                        if (v472) {
                                                          goto LABEL_1101;
                                                        }
LABEL_1026:
                                                        v481 = (void *)v669;
                                                        if (!v668)
                                                        {
                                                          a5 = v462;
                                                          goto LABEL_1032;
                                                        }
                                                        CGImageRef v482 = CGImageCreateWithMask((CGImageRef)v669, (CGImageRef)v668);
                                                        if (!v482) {
                                                          break;
                                                        }
                                                        v481 = v482;
                                                        a5 = v462;
                                                        if (v669) {
                                                          CFRelease(v669);
                                                        }
                                                        CFTypeRef v669 = v481;
LABEL_1032:
                                                        CGFloat v483 = (double)CGImageGetWidth((CGImageRef)v481);
                                                        v697.size.double height = (double)CGImageGetHeight((CGImageRef)v669);
                                                        v697.origin.x = (double)v463->i32[0];
                                                        v445 = v592;
                                                        v697.origin.y = (double)(unint64_t)(*((void *)&v667 + 1)
                                                                                                 - *(int *)&v599[4 * ((2 * v460) | 1)])
                                                                      - v697.size.height;
                                                        v697.size.double width = v483;
                                                        CGContextDrawImage(v592, v697, (CGImageRef)v669);
                                                        ++v460;
                                                        uint64_t v9 = v461;
                                                        uint64_t v16 = v619;
                                                        if (v460 == v514)
                                                        {
LABEL_1033:
                                                          CGContextFlush(v445);
                                                          if (v445) {
                                                            CFRelease(v445);
                                                          }
                                                          CVPixelBufferUnlockBaseAddress(v450, 0);
                                                          BOOL v154 = v519;
                                                          if (v501)
                                                          {
                                                            v692[1] = 0;
                                                            v692[0] = 0;
                                                            *(_OWORD *)&v692[2] = v667;
                                                          }
                                                          if (v551 != 0
                                                            || v537 != 0
                                                            && v537 != __PAIR128__((unint64_t)v692[2], (unint64_t)v692[3]))
                                                          {
                                                            *(void *)CGSize size = *((void *)&v551 + 1);
                                                            *(void *)&size[8] = v551;
                                                            *(void *)&size[16] = *((void *)&v537 + 1);
                                                            *(void *)&size[24] = v537;
                                                            uint64_t v484 = CMPhotoApplyCropCMPhotoRectToRect(v692, (unint64_t *)size);
                                                            if (v484)
                                                            {
                                                              uint64_t v23 = v484;
                                                              v445 = 0;
                                                              goto LABEL_1044;
                                                            }
                                                          }
                                                          uint64_t v23 = CMPhotoSetPixelBufferCLAPFromRect(v450, 1, 1, (double)(unint64_t)v692[0], (double)(unint64_t)v692[1], (double)(unint64_t)v692[2], (double)(unint64_t)v692[3]);
                                                          v445 = 0;
                                                          if (v23) {
                                                            goto LABEL_1044;
                                                          }
                                                          CVPixelBufferRef pixelBuffer = v450;
LABEL_1050:
                                                          if (v673) {
                                                            CFRelease(v673);
                                                          }
                                                          if (v672) {
                                                            CFRelease(v672);
                                                          }
                                                          if (v445) {
                                                            CFRelease(v445);
                                                          }
                                                          if (v443) {
                                                            CFRelease(v443);
                                                          }
                                                          if (v671) {
                                                            CFRelease(v671);
                                                          }
                                                          if (v670) {
                                                            CFRelease(v670);
                                                          }
                                                          if (v669) {
                                                            CFRelease(v669);
                                                          }
                                                          if (v668) {
                                                            CFRelease(v668);
                                                          }
                                                          free(v599);
LABEL_1067:
                                                          CFTypeRef v222 = v657;
                                                          if (!v657) {
                                                            goto LABEL_369;
                                                          }
LABEL_368:
                                                          CFRelease(v222);
                                                          goto LABEL_369;
                                                        }
                                                      }
                                                      uint64_t v472 = FigSignalErrorAt();
LABEL_1101:
                                                      uint64_t v23 = v472;
LABEL_1041:
                                                      v445 = v592;
LABEL_1042:
                                                      a5 = v462;
                                                      uint64_t v9 = v461;
                                                      uint64_t v16 = v619;
                                                    }
                                                    else
                                                    {
                                                      uint64_t v23 = FigSignalErrorAt();
                                                    }
                                                    BOOL v154 = v519;
                                                    goto LABEL_1044;
                                                  }
                                                }
                                                else
                                                {
                                                  BOOL v438 = v154;
                                                }
                                                v599 = 0;
LABEL_1092:
                                                uint64_t v23 = FigSignalErrorAt();
                                                CFRelease(v436);
                                                a2 = v620;
                                                BOOL v154 = v438;
                                                v444 = v599;
                                              }
                                              else
                                              {
                                                uint64_t v23 = FigSignalErrorAt();
                                                v444 = 0;
                                              }
                                              free(v444);
                                              v443 = 0;
                                              v599 = 0;
                                              v445 = 0;
                                              if (v23) {
                                                goto LABEL_1050;
                                              }
                                              goto LABEL_965;
                                            }
                                          }
                                          uint64_t v430 = FigSignalErrorAt();
                                        }
                                      }
                                      uint64_t v23 = v430;
                                      v599 = 0;
                                      v443 = 0;
                                      v445 = 0;
                                      goto LABEL_1050;
                                    }
                                    v414 = v390;
                                    CMPhotoAddColorInformationToPixelBufferAccordingToFormat(v505, v508, v503, v507, (CVBufferRef)v660);
                                    CMPhotoAddChromaLocationToPixelBufferAccordingToFormat(v499, v498, (__CVBuffer *)v660);
                                    CFAllocatorRef v415 = CFGetAllocator(*(CFTypeRef *)&v690[8]);
                                    uint64_t v416 = FigPictureReaderGetFigBaseObject();
                                    uint64_t v417 = *(void *)(CMBaseObjectGetVTable() + 8);
                                    if (v417) {
                                      uint64_t v418 = v417;
                                    }
                                    else {
                                      uint64_t v418 = 0;
                                    }
                                    v419 = *(uint64_t (**)(uint64_t, uint64_t, CFAllocatorRef, CFTypeRef *))(v418 + 48);
                                    if (!v419)
                                    {
                                      BOOL v337 = 0;
                                      uint64_t v23 = 4294954514;
LABEL_922:
                                      a5 = v610;
                                      uint64_t v16 = v619;
                                      a2 = v620;
                                      v390 = v414;
                                      goto LABEL_935;
                                    }
                                    uint64_t v420 = v419(v416, v496, v415, &v673);
                                    if (v420)
                                    {
                                      uint64_t v23 = v420;
                                      BOOL v337 = 0;
                                      goto LABEL_922;
                                    }
                                    CMPhotoAddHDRMetadataToPixelBufferFromFormatDescription((const opaqueCMFormatDescription *)v673, (__CVBuffer *)v660);
                                    uint64_t v598 = *((void *)&v667 + 1);
                                    uint64_t v587 = v667;
                                    v390 = v414;
                                  }
                                  v421 = (const void *)v314.i64[0];
                                  if (v314.i64[0] >= (unint64_t)(v587 + v399)) {
                                    v421 = (const void *)(v587 + v399);
                                  }
                                  v422 = (const void *)(v598 - v402);
                                  if (v314.i64[1] < v598 - v402) {
                                    v422 = (const void *)v314.i64[1];
                                  }
                                  if (v421 && v422)
                                  {
                                    BOOL v423 = (const void *)v666.i64[0] == v421 && v666.i64[1] == (void)v422;
                                    v424 = v423 ? 0 : v421;
                                    v425 = v423 ? 0 : v422;
                                    v691[0] = (CFTypeRef)v660;
                                    v691[1] = v400;
                                    v691[2] = (CFTypeRef)v402;
                                    v691[3] = v421;
                                    v691[4] = v422;
                                    v691[5] = v390;
                                    uint64x2_t v676 = *(uint64x2_t *)&v690[32];
                                    *(_OWORD *)v677 = *(_OWORD *)&v690[48];
                                    *(_OWORD *)&v677[16] = *(_OWORD *)&v690[64];
                                    *(_OWORD *)&v677[32] = *(_OWORD *)&v690[80];
                                    long long v674 = *(_OWORD *)v690;
                                    long long v675 = *(_OWORD *)&v690[16];
                                    *(_WORD *)CGSize size = 256;
                                    size[2] = 0;
                                    *(_OWORD *)&size[3] = *(_OWORD *)v692;
                                    *(_OWORD *)&size[19] = *(_OWORD *)&v692[2];
                                    *(CFTypeRef *)&size[32] = *(CFTypeRef *)((char *)&v692[3] + 5);
                                    *(void *)&size[40] = 0;
                                    *(void *)&size[48] = 0;
                                    *(void *)&size[56] = v424;
                                    *(void *)&size[64] = v425;
                                    *(void *)&size[72] = v587 + v399;
                                    *(void *)&size[80] = v598 - v402;
                                    *(uint64x2_t *)&size[88] = value;
                                    *(void *)&size[104] = 0;
                                    size[112] = v569;
                                    size[113] = v409 | v511;
                                    size[114] = v576;
                                    size[119] = BYTE4(v669);
                                    *(_DWORD *)&size[115] = v669;
                                    *(void *)&size[120] = v573;
                                    size[128] = 0;
                                    *(_DWORD *)&size[132] = *(_DWORD *)((char *)&v671 + 3);
                                    *(_DWORD *)&size[129] = v671;
                                    uint64_t v412 = _decodeItem(&v674, v672, v620, v659, size, 0, v691, 0, 0);
                                    if (v412) {
                                      goto LABEL_932;
                                    }
                                  }
                                  ++v401;
                                  --v406;
                                  v400 += v314.i64[0];
                                  v399 -= v314.i64[0];
                                  --v403;
                                  uint64_t v16 = v619;
                                  if (!v403) {
                                    goto LABEL_917;
                                  }
                                  continue;
                                }
                              }
                              CFTypeRef v368 = v691[0];
                              *(void *)CGSize size = 0;
                              *(void *)&long long v674 = 0;
                              CFAllocatorRef v369 = CFGetAllocator(v691[0]);
                              uint64_t v370 = FigPictureReaderGetFigBaseObject();
                              uint64_t v371 = *(void *)(CMBaseObjectGetVTable() + 8);
                              if (v371) {
                                uint64_t v372 = v371;
                              }
                              else {
                                uint64_t v372 = 0;
                              }
                              v373 = *(unsigned int (**)(uint64_t, uint64_t, CFAllocatorRef, unsigned char *))(v372 + 48);
                              if (!v373 || v373(v370, v365, v369, size) != -12783) {
                                goto LABEL_822;
                              }
                              CFAllocatorRef v374 = CFGetAllocator(v368);
                              uint64_t v375 = FigPictureReaderGetFigBaseObject();
                              uint64_t v376 = *(void *)(CMBaseObjectGetVTable() + 8);
                              if (v376) {
                                uint64_t v377 = v376;
                              }
                              else {
                                uint64_t v377 = 0;
                              }
                              v378 = *(uint64_t (**)(uint64_t, CFAllocatorRef, CFAllocatorRef, long long *))(v377 + 48);
                              if (v378)
                              {
                                int v379 = v378(v375, allocatorc, v374, &v674);
                                v380 = (const void *)v674;
                                if (!v379)
                                {
                                  if (!CMPhotoCFNumberGetInt((const __CFBoolean *)v674))
                                  {
                                    v380 = (const void *)v674;
                                    goto LABEL_808;
                                  }
LABEL_822:
                                  int v387 = 1;
LABEL_823:
                                  a2 = v620;
                                  if (*(void *)size) {
                                    CFRelease(*(CFTypeRef *)size);
                                  }
                                  if ((void)v674) {
                                    CFRelease((CFTypeRef)v674);
                                  }
                                  if (v387) {
                                    goto LABEL_831;
                                  }
                                  ++v366;
                                  if (!--v367) {
                                    goto LABEL_829;
                                  }
                                  continue;
                                }
LABEL_808:
                                if (v380)
                                {
                                  CFRelease(v380);
                                  *(void *)&long long v674 = 0;
                                }
                              }
                              break;
                            }
                            CFAllocatorRef v381 = CFGetAllocator(v368);
                            uint64_t v382 = FigPictureReaderGetFigBaseObject();
                            uint64_t v383 = *(void *)(CMBaseObjectGetVTable() + 8);
                            if (v383) {
                              uint64_t v384 = v383;
                            }
                            else {
                              uint64_t v384 = 0;
                            }
                            v385 = *(unsigned int (**)(uint64_t, uint64_t, CFAllocatorRef, long long *))(v384 + 48);
                            if (v385
                              && !v385(v382, v525, v381, &v674)
                              && CMPhotoCFNumberGetInt32((const __CFNumber *)v674) != -1)
                            {
                              goto LABEL_822;
                            }
                            LODWORD(v692[0]) = 0;
                            if (CMPhotoPictureReaderGetItemTypeFromReader(v368, v692)) {
                              BOOL v386 = 1;
                            }
                            else {
                              BOOL v386 = LODWORD(v692[0]) == 1768187246;
                            }
                            int v387 = v386;
                            goto LABEL_823;
                          }
                          uint64_t ImageCodecTypeFromReader = FigSignalErrorAt();
LABEL_1105:
                          uint64_t v23 = ImageCodecTypeFromReader;
LABEL_1106:
                          BOOL v337 = 0;
                          goto LABEL_936;
                        }
                        int v358 = FigCFEqual();
                        int v518 = 0;
                        if (v357 != 1936484717 || !v358) {
                          goto LABEL_768;
                        }
                        if (v675 != *(_DWORD *)&size[16]) {
                          goto LABEL_1102;
                        }
                        int v518 = 1;
                      }
                      else
                      {
                        int v518 = CMFormatDescriptionEqualIgnoringExtensionKeys((CMFormatDescriptionRef)v692[0], (CMFormatDescriptionRef)v691[0], 0, 0);
                        if (!v518) {
                          goto LABEL_1102;
                        }
                      }
                    }
                    else
                    {
                      uint64_t v353 = FigPictureReaderGetFigBaseObject();
                      uint64_t v354 = *(void *)(CMBaseObjectGetVTable() + 8);
                      if (v354) {
                        uint64_t v355 = v354;
                      }
                      else {
                        uint64_t v355 = 0;
                      }
                      v359 = *(unsigned int (**)(uint64_t, uint64_t, CFAllocatorRef, CFTypeRef *))(v355 + 48);
                      if (!v359 || v359(v353, v346, v344, v692)) {
                        goto LABEL_767;
                      }
                      unint64_t v338 = v314.u64[1];
                      if (value.i32[0] == 1936484717
                        && _getDecoderReusableInfoForOverlay((const void *)v661, (CMFormatDescriptionRef)v692[0], (uint64_t)&v674))
                      {
                        goto LABEL_768;
                      }
                    }
                    if (v502 == ++v347) {
                      goto LABEL_729;
                    }
                  }
                }
LABEL_107:
                if ((void)v674)
                {
                  CFRelease((CFTypeRef)v674);
                  *(void *)&long long v674 = 0;
                }
                uint64_t v135 = FigPictureReaderGetFigBaseObject();
                uint64_t v136 = *(void *)(CMBaseObjectGetVTable() + 8);
                a2 = v620;
                if (v136) {
                  uint64_t v137 = v136;
                }
                else {
                  uint64_t v137 = 0;
                }
                CGFloat v138 = *(unsigned int (**)(uint64_t, uint64_t, CFAllocatorRef, long long *))(v137 + 48);
                if (!v138 || v138(v135, v517, v103, &v674)) {
                  goto LABEL_634;
                }
                if (!CGSizeMakeWithDictionaryRepresentation((CFDictionaryRef)v674, (CGSize *)size)) {
                  goto LABEL_633;
                }
                unint64_t v139 = vcvtad_u64_f64(*(double *)size);
                if (!v139) {
                  goto LABEL_633;
                }
                unint64_t v140 = vcvtad_u64_f64(*(double *)&size[8]);
                if (!v140) {
                  goto LABEL_633;
                }
                long long v116 = *(_OWORD *)v597;
                if (v117) {
                  break;
                }
                unsigned int v120 = (unsigned __int16)((v509 + v139) / v139);
                unsigned int v119 = (unsigned __int16)((unint64_t)&v580[v140 - 1] / v140);
                if (v121 != v119 * v120) {
                  goto LABEL_634;
                }
                if ((unsigned __int16)((unint64_t)&v580[v140 - 1] / v140))
                {
                  int v143 = 0;
                  int v144 = 0;
                  int v145 = 0;
                  while (!(unsigned __int16)((v509 + v139) / v139))
                  {
LABEL_134:
                    v145 += v140;
                    if (++v143 == v119) {
                      goto LABEL_135;
                    }
                  }
                  uint64_t v146 = (_DWORD *)((char *)theDictd + 4 * v144 + 4);
                  int v147 = -(int)v139;
                  int v148 = (unsigned __int16)((v509 + v139) / v139);
                  while (1)
                  {
                    v147 += v139;
                    if (v147 != *(v146 - 1) || *v146 != v145) {
                      break;
                    }
                    v144 += 2;
                    v146 += 2;
                    if (!--v148) {
                      goto LABEL_134;
                    }
                  }
LABEL_634:
                  char v182 = 1;
LABEL_635:
                  a5 = v610;
                  uint64_t v9 = a9;
                  uint64_t v11 = v617;
                  goto LABEL_636;
                }
LABEL_135:
                unint64_t v512 = v586 - (int)(v120 - 1) * v139;
                v506 = &v580[-((int)(v119 - 1) * v140)];
                unint64_t v565 = v139;
                CFAllocatorRef allocator = (CFAllocatorRef)v140;
LABEL_154:
                BOOL v151 = v523 + 1 == v120;
                if (v523 + 1 == v120) {
                  int v152 = 0;
                }
                else {
                  int v152 = v523 + 1;
                }
                int v523 = v152;
                int v153 = v559;
                if (v151) {
                  int v153 = v559 + 1;
                }
                int v559 = v153;
                ++v117;
                unint64_t v118 = v140;
                unint64_t v515 = v139;
                CFIndex v115 = v121;
                if (v117 == v121) {
                  goto LABEL_249;
                }
              }
              unsigned int v141 = v120 - 1;
              if (v523 < (int)(v120 - 1) && v559 < (int)(v119 - 1))
              {
                unint64_t v142 = v565;
LABEL_149:
                if (v142 != v139) {
                  goto LABEL_634;
                }
                unint64_t v139 = v515;
LABEL_151:
                BOOL v150 = allocator == (CFAllocatorRef)v140;
                goto LABEL_152;
              }
              if (v523 == v141 && !v559)
              {
                if (v565 < v139 || v512 > v139) {
                  goto LABEL_634;
                }
                goto LABEL_151;
              }
              if (!v523 && v559 == v119 - 1)
              {
                if (v565 != v139) {
                  goto LABEL_634;
                }
                if ((unint64_t)allocator < v140) {
                  goto LABEL_634;
                }
                unint64_t v139 = v515;
                if ((unint64_t)v506 > v140) {
                  goto LABEL_634;
                }
                goto LABEL_154;
              }
              if (v523 == v141)
              {
                if (v559 != v119 - 1)
                {
                  unint64_t v142 = v515;
                  goto LABEL_149;
                }
                unint64_t v149 = v515;
              }
              else
              {
                unint64_t v149 = v565;
              }
              if (v149 != v139) {
                goto LABEL_634;
              }
              unint64_t v139 = v515;
              BOOL v150 = v118 == v140;
LABEL_152:
              unint64_t v140 = v118;
              if (!v150) {
                goto LABEL_634;
              }
              goto LABEL_154;
            }
LABEL_620:
            char v182 = 1;
            a2 = v620;
            goto LABEL_637;
          }
        }
      }
      FigSignalErrorAt();
    }
    CFDictionaryRef v110 = 0;
    char v182 = 1;
    goto LABEL_637;
  }
  if (v648[0] != 1735551332)
  {
    if (v648[0] == 1768187246)
    {
      BOOL v26 = *v16;
      int v25 = (unsigned char *)v16[1];
      long long v27 = *((_OWORD *)v16 + 4);
      *(_OWORD *)&v690[32] = *((_OWORD *)v16 + 3);
      *(_OWORD *)&v690[48] = v27;
      *(_OWORD *)&v690[64] = *((_OWORD *)v16 + 5);
      long long v28 = *((_OWORD *)v16 + 2);
      *(_OWORD *)v690 = *((_OWORD *)v16 + 1);
      *(_OWORD *)&v690[16] = v28;
      int v29 = *a5;
      uint64_t v31 = *((void *)a5 + 1);
      uint64_t v30 = *((void *)a5 + 2);
      size_t v32 = a2;
      uint64_t v33 = a5;
      unint64_t v34 = *((void *)a5 + 3);
      unint64_t v35 = *((void *)a5 + 4);
      long long v36 = *(_OWORD *)(v33 + 56);
      v678[0] = *(_OWORD *)(v33 + 40);
      v678[1] = v36;
      long long v37 = *(_OWORD *)(v33 + 88);
      v678[2] = *(_OWORD *)(v33 + 72);
      v679[0] = v37;
      unsigned int v38 = *((_DWORD *)v33 + 26);
      int v39 = v33[112];
      unsigned __int8 theDict = v33[114];
      v608 = v33;
      uint64_t v593 = *((void *)v33 + 15);
      v691[0] = 0;
      v682.i64[0] = 0;
      v692[0] = 0;
      *(void *)&long long v664 = 0;
      *(void *)&long long v661 = 0;
      v686.i64[0] = 0;
      cf.i32[0] = -1;
      LODWORD(v667) = -1;
      memset(v680, 0, 32);
      uint64_t v40 = CMPhotoPictureReaderCopyBaseReaderAndPropertiesForDerivedPicture(v32, v691, v680, &v646);
      if (!v40)
      {
        if (!(v31 | v30) && (!(v34 | v35) || __PAIR128__(v35, v34) == *(_OWORD *)&v680[16]))
        {
          if (v29) {
            memset(v680, 0, 32);
          }
          goto LABEL_208;
        }
        if (v29)
        {
          *(void *)v680 = v31;
          *(void *)&v680[8] = v30;
          *(void *)&v680[16] = v34;
          *(void *)&v680[24] = v35;
LABEL_208:
          BYTE4(v688[0]) = 0;
          LODWORD(v688[0]) = 0;
          size[119] = 0;
          *(_DWORD *)&size[115] = 0;
          *(_DWORD *)&size[129] = 0;
          *(_DWORD *)&size[132] = 0;
          *(_OWORD *)((char *)v688 + 5) = *(_OWORD *)v680;
          *(_OWORD *)((char *)&v688[1] + 5) = *(_OWORD *)&v680[16];
          *(_OWORD *)&size[88] = v679[0];
          *(void *)&long long v674 = v26;
          *((void *)&v674 + 1) = v25;
          *(_OWORD *)v677 = *(_OWORD *)&v690[32];
          *(_OWORD *)&v677[16] = *(_OWORD *)&v690[48];
          *(_OWORD *)&v677[32] = *(_OWORD *)&v690[64];
          long long v675 = *(_OWORD *)v690;
          uint64x2_t v676 = *(uint64x2_t *)&v690[16];
          *(_WORD *)CGSize size = 1;
          size[2] = 0;
          *(void *)&size[32] = *(void *)&v680[24];
          *(_OWORD *)&size[19] = v688[1];
          *(_OWORD *)&size[3] = v688[0];
          memset(&size[40], 0, 48);
          *(void *)&size[104] = v38;
          *(_WORD *)&size[112] = v39;
          size[114] = theDict;
          *(void *)&size[120] = v593;
          size[128] = 0;
          uint64_t v171 = _decodeItem(&v674, v691[0], 0, a4, size, 0, 0, 0, &v682);
          a5 = v608;
          if (!v171)
          {
            CMPhotoRemoveColorPropertiesFromBuffer((__CVBuffer *)v682.i64[0]);
            uint64_t v23 = _copyColorInfoForItem(v25, v620, 0, v39, 0, 0, v692, &v664, (CFTypeRef *)&v661, (CFTypeRef *)&v686, &cf, &v667, 0);
            uint64_t v9 = a9;
            uint64_t v16 = v619;
            if (!v23)
            {
              CMPhotoAddColorInformationToPixelBufferAccordingToFormat(v692[0], (const void *)v664, (const void *)v661, (const void *)v686.i64[0], (CVBufferRef)v682.i64[0]);
              CMPhotoAddChromaLocationToPixelBufferAccordingToFormat(cf.u32[0], v667, (__CVBuffer *)v682.i64[0]);
              CVPixelBufferRef pixelBuffer = (CVPixelBufferRef)v682.i64[0];
              v682.i64[0] = 0;
            }
LABEL_211:
            if (v691[0]) {
              CFRelease(v691[0]);
            }
            if (v682.i64[0]) {
              CFRelease((CFTypeRef)v682.i64[0]);
            }
            if (v692[0]) {
              CFRelease(v692[0]);
            }
            if ((void)v664) {
              CFRelease((CFTypeRef)v664);
            }
            if ((void)v661) {
              CFRelease((CFTypeRef)v661);
            }
            BOOL v172 = (const void *)v686.i64[0];
            if (v686.i64[0]) {
LABEL_222:
            }
              CFRelease(v172);
LABEL_223:
            if (v23) {
              goto LABEL_398;
            }
            BOOL v154 = 0;
LABEL_370:
            if (!*v16 || !CMPhotoDecompressionSessionAsyncRequestCancelled(*(void *)(v16[1] + 16), *v16))
            {
              int v223 = v646;
              if (a5[1]) {
                BOOL v224 = v646 == 1;
              }
              else {
                BOOL v224 = 1;
              }
              int v225 = !v224;
              int v226 = 1;
              if (v224)
              {
                int v226 = v646;
                int v223 = 1;
              }
              else
              {
                int v646 = 1;
              }
              if (v618) {
                int *v618 = v226;
              }
              v227 = pixelBuffer;
              if (!pixelBuffer) {
                return 0;
              }
              if (!v9)
              {
                if (!v154)
                {
                  *(void *)CGSize size = 0;
                  *(void *)&size[8] = size;
                  *(void *)&size[16] = 0x2000000000;
                  *(_DWORD *)&size[24] = 0;
                  uint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(*(CVPixelBufferRef *)v617);
                  uint64_t DefaultTripletsForTransfer = CMPhotoCreateDefaultTripletsForTransfer(v227, PixelFormatType);
                  v234 = *((void *)v617 + 5);
                  block[0] = MEMORY[0x1E4F143A8];
                  block[1] = *(void *)"";
                  block[2] = ___decodeItem_block_invoke;
                  block[3] = &unk_1E5E2E918;
                  void block[4] = size;
                  long long v235 = *((_OWORD *)v16 + 3);
                  long long v624 = *((_OWORD *)v16 + 2);
                  long long v625 = v235;
                  long long v236 = *((_OWORD *)v16 + 5);
                  long long v626 = *((_OWORD *)v16 + 4);
                  long long v627 = v236;
                  long long v237 = *((_OWORD *)v16 + 1);
                  long long v622 = *(_OWORD *)v16;
                  long long v623 = v237;
                  CVPixelBufferRef v628 = pixelBuffer;
                  uint64_t v238 = *((void *)a5 + 16);
                  long long v239 = *((_OWORD *)a5 + 6);
                  long long v636 = *((_OWORD *)a5 + 7);
                  long long v635 = v239;
                  long long v240 = *((_OWORD *)a5 + 4);
                  long long v634 = *((_OWORD *)a5 + 5);
                  long long v633 = v240;
                  long long v241 = *((_OWORD *)a5 + 2);
                  long long v632 = *((_OWORD *)a5 + 3);
                  long long v631 = v241;
                  long long v242 = *((_OWORD *)a5 + 1);
                  long long v629 = *(_OWORD *)a5;
                  long long v630 = v242;
                  int v639 = v223;
                  uint64_t v637 = v238;
                  v638 = v617;
                  uint64_t v640 = DefaultTripletsForTransfer;
                  int v641 = v243;
                  dispatch_sync(v234, block);
                  uint64_t v23 = *(unsigned int *)(*(void *)&size[8] + 24);
                  _Block_object_dispose(size, 8);
                  goto LABEL_398;
                }
                uint64_t v23 = 0;
                CFDictionaryRef v231 = 0;
                goto LABEL_400;
              }
              OSType v228 = *((_DWORD *)a5 + 26);
              if (!v228)
              {
                OSType v228 = CVPixelBufferGetPixelFormatType(pixelBuffer);
                *((_DWORD *)a5 + 26) = v228;
                v227 = pixelBuffer;
              }
              if (v228 == CVPixelBufferGetPixelFormatType(v227)) {
                int v229 = v225;
              }
              else {
                int v229 = 1;
              }
              if (v229 == 1)
              {
                if (a5[114])
                {
                  v230 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                  CFDictionaryRef v231 = v230;
                  if (!v230)
                  {
                    uint64_t v23 = 4294950305;
                    goto LABEL_399;
                  }
                  CMPhotoCFDictionarySetBoolean(v230, @"PreferLowMemory", a5[114]);
                }
                else
                {
                  CFDictionaryRef v231 = 0;
                }
                long long v244 = *((_OWORD *)a5 + 7);
                *(_OWORD *)&size[96] = *((_OWORD *)a5 + 6);
                *(_OWORD *)&size[112] = v244;
                *(void *)&size[128] = *((void *)a5 + 16);
                long long v245 = *((_OWORD *)a5 + 3);
                *(_OWORD *)&size[32] = *((_OWORD *)a5 + 2);
                *(_OWORD *)&size[48] = v245;
                long long v246 = *((_OWORD *)a5 + 5);
                *(_OWORD *)&size[64] = *((_OWORD *)a5 + 4);
                *(_OWORD *)&size[80] = v246;
                long long v247 = *((_OWORD *)a5 + 1);
                *(_OWORD *)CGSize size = *(_OWORD *)a5;
                *(_OWORD *)&size[16] = v247;
                uint64_t v248 = _fillEdgesIfNeeded(pixelBuffer, (uint64_t)size, v223);
                if (v248) {
                  goto LABEL_582;
                }
                uint64_t v249 = CMPhotoCreateDefaultTripletsForTransfer(pixelBuffer, *((unsigned int *)a5 + 26));
                *(void *)CGSize size = 0;
                uint64_t v248 = CMPhotoScaleAndRotateSessionTransformForSizeWithOptions(v16[4], pixelBuffer, v231, *((unsigned char *)v16 + 49) == 0, v223, *((unsigned int *)a5 + 26), v249, v250, *MEMORY[0x1E4F1DB20], *(CGFloat *)(MEMORY[0x1E4F1DB20] + 8), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 16), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 24), *MEMORY[0x1E4F1DB30], *(double *)(MEMORY[0x1E4F1DB30] + 8), v251, v252, 1u, 0, *((unsigned char *)v16 + 48),
                         *((unsigned char *)v16 + 50),
                         *((unsigned char *)v16 + 51),
                         *((unsigned char *)v16 + 52),
                         (__CVBuffer **)size);
                if (v248) {
                  goto LABEL_582;
                }
                if (pixelBuffer) {
                  CFRelease(pixelBuffer);
                }
                CVPixelBufferRef pixelBuffer = *(CVPixelBufferRef *)size;
              }
              else
              {
                CFDictionaryRef v231 = 0;
              }
              unint64_t v253 = *((void *)a5 + 7);
              unint64_t v254 = *((void *)a5 + 8);
              if (*(_OWORD *)(a5 + 40) == 0 && !(v253 | v254)
                || (uint64_t v248 = CMPhotoSetPixelBufferCLAPFromRect(pixelBuffer, 1, 1, (double)*((unint64_t *)a5 + 5), (double)*((unint64_t *)a5 + 6), (double)v253, (double)v254), !v248))
              {
                uint64_t v23 = 0;
                CVPixelBufferRef *v9 = pixelBuffer;
                CVPixelBufferRef pixelBuffer = 0;
                if (!v231) {
                  return v23;
                }
                goto LABEL_413;
              }
LABEL_582:
              uint64_t v23 = v248;
              goto LABEL_399;
            }
LABEL_581:
            CFDictionaryRef v231 = 0;
            uint64_t v23 = 4294950191;
            goto LABEL_399;
          }
          uint64_t v23 = v171;
LABEL_596:
          uint64_t v9 = a9;
          uint64_t v16 = v619;
          goto LABEL_211;
        }
        *(void *)CGSize size = v31;
        *(void *)&size[8] = v30;
        *(void *)&size[16] = v34;
        *(void *)&size[24] = v35;
        uint64_t v40 = CMPhotoApplyCropCMPhotoRectToRect(v680, (unint64_t *)size);
        if (!v40) {
          goto LABEL_208;
        }
      }
      uint64_t v23 = v40;
      a5 = v608;
      goto LABEL_596;
    }
LABEL_48:
    long long v62 = *((_OWORD *)v16 + 3);
    long long v63 = *((_OWORD *)v16 + 1);
    *(_OWORD *)&v690[32] = *((_OWORD *)v16 + 2);
    *(_OWORD *)&v690[48] = v62;
    long long v64 = *((_OWORD *)v16 + 3);
    long long v65 = *((_OWORD *)v16 + 5);
    *(_OWORD *)&v690[64] = *((_OWORD *)v16 + 4);
    *(_OWORD *)&v690[80] = v65;
    long long v66 = *((_OWORD *)v16 + 1);
    *(_OWORD *)v690 = *(_OWORD *)v16;
    *(_OWORD *)&v690[16] = v66;
    long long v67 = *(_OWORD *)(a5 + 56);
    long long v68 = *(_OWORD *)(a5 + 88);
    v678[2] = *(_OWORD *)(a5 + 72);
    v679[0] = v68;
    *(_OWORD *)((char *)v679 + 9) = *(_OWORD *)(a5 + 97);
    v678[0] = *(_OWORD *)(a5 + 40);
    v678[1] = v67;
    *(void *)&v680[14] = *((void *)a5 + 16);
    *(_OWORD *)v680 = *(_OWORD *)(a5 + 114);
    uint64x2_t v676 = *(uint64x2_t *)&v690[32];
    *(_OWORD *)v677 = v64;
    long long v69 = *((_OWORD *)v16 + 5);
    *(_OWORD *)&v677[16] = *(_OWORD *)&v690[64];
    *(_OWORD *)&v677[32] = v69;
    int v578 = *a5;
    v686.i32[0] = *(_DWORD *)(a5 + 1);
    *(__int32 *)((char *)v686.i32 + 3) = *((_DWORD *)a5 + 1);
    CFDictionaryRef theDictb = (CFDictionaryRef)*((void *)a5 + 2);
    unint64_t v584 = *((void *)a5 + 3);
    *(void *)v590 = *((void *)a5 + 4);
    unint64_t v595 = *((void *)a5 + 1);
    int v70 = a5[113];
    long long v674 = *(_OWORD *)v690;
    long long v675 = v63;
    v692[0] = 0;
    *(void *)&long long v664 = 0;
    uint64_t v71 = *(void *)&v690[8];
    if (*(void *)v690)
    {
      if (CMPhotoDecompressionSessionAsyncRequestCancelled(*(void *)(*(void *)&v690[8] + 16), *(BOOL *)v690))
      {
        long long v209 = 0;
        uint64_t v23 = 4294950191;
        goto LABEL_607;
      }
      uint64_t v71 = *(void *)&v690[8];
    }
    uint64_t v97 = _getImageOrientation(v71, a2, a3, &v646);
    if (!v97)
    {
      if (a4)
      {
        uint64_t v98 = 0;
        uint64_t v99 = a4;
        goto LABEL_262;
      }
      if (v11)
      {
        *(void *)CGSize size = 0;
        *(void *)&size[8] = 0;
        double PixelBufferSize = CMPhotoGetPixelBufferSize(*(__CVBuffer **)v11);
        double v159 = v158;
        uint64_t v160 = CMPhotoPictureReaderGetImageGeometryFromPictureReader(a2, *(unsigned __int8 *)(*(void *)&v690[8] + 28), 0, (unint64_t)size);
        if (v160) {
          goto LABEL_612;
        }
        unint64_t v161 = vcvtad_u64_f64(v159);
        char v163 = *(void *)size == vcvtad_u64_f64(PixelBufferSize) && *(void *)&size[8] == v161;
      }
      else
      {
        char v163 = 0;
      }
      *(_OWORD *)&size[56] = v678[1];
      *(_OWORD *)&size[72] = v678[2];
      *(_OWORD *)&size[88] = v679[0];
      *(_OWORD *)&size[97] = *(_OWORD *)((char *)v679 + 9);
      size[0] = v578;
      *(_DWORD *)&size[1] = v686.i32[0];
      *(_DWORD *)&size[4] = *(__int32 *)((char *)v686.i32 + 3);
      *(void *)&size[8] = v595;
      *(void *)&size[16] = theDictb;
      *(void *)&size[24] = v584;
      *(void *)&size[32] = *(void *)v590;
      *(_OWORD *)&size[40] = v678[0];
      size[113] = v70;
      *(void *)&size[128] = *(void *)&v680[14];
      *(_OWORD *)&size[114] = *(_OWORD *)v680;
      uint64_t v160 = HEIFItemDecoderCreate((uint64_t)v690, a3, a2, 0, (uint64_t)size, v163, 1uLL, 1uLL, 0, 0, 0, &v664, (__CVBuffer **)v11);
      if (!v160)
      {
        uint64_t v98 = v664;
        BOOL v183 = (_DWORD *)MEMORY[0x1E4F1EBA8];
        if (*MEMORY[0x1E4F1EBA8] == 1)
        {
          kdebug_trace();
          if (*v183 == 1) {
            kdebug_trace();
          }
        }
        uint64_t v99 = v98;
LABEL_262:
        cf.i8[0] = 0;
        if (v70)
        {
          long long v184 = a2;
          uint64_t v185 = 0;
        }
        else
        {
          uint64_t v185 = *(const void **)(v99 + 24);
          long long v184 = a2;
        }
        uint64_t SampleBufferFromPictureReader = _createSampleBufferFromPictureReader(v184, v185, v692, (BOOL *)cf.i8);
        if (!SampleBufferFromPictureReader)
        {
          if (!cf.i8[0] || *(unsigned char *)(v99 + 88))
          {
LABEL_272:
            if (v11)
            {
              int v187 = v646;
              LODWORD(v661) = v686.i32[0];
              *(_DWORD *)((char *)&v661 + 3) = *(__int32 *)((char *)v686.i32 + 3);
              *(_OWORD *)&size[32] = v678[2];
              *(_OWORD *)&size[48] = v679[0];
              *(_OWORD *)&size[57] = *(_OWORD *)((char *)v679 + 9);
              *(_OWORD *)CGSize size = v678[0];
              *(_OWORD *)&size[16] = v678[1];
              *(void *)((char *)v688 + 14) = *(void *)&v680[14];
              v688[0] = *(_OWORD *)v680;
              v691[0] = 0;
              v682.i64[0] = 0;
              if (*(void *)v690) {
                uint64_t v188 = *(void *)v690;
              }
              else {
                uint64_t v188 = *(void *)&v690[8];
              }
              unsigned int v189 = (_DWORD *)MEMORY[0x1E4F1EBA8];
              if (*MEMORY[0x1E4F1EBA8] == 1) {
                kdebug_trace();
              }
              dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v99 + 224), 0xFFFFFFFFFFFFFFFFLL);
              if (*v189 == 1) {
                kdebug_trace();
              }
              os_unfair_lock_lock((os_unfair_lock_t)(v99 + 14576));
              CFIndex v190 = CFArrayGetCount(*(CFArrayRef *)(v99 + 14584));
              CFIndex v191 = CFArrayGetCount(*(CFArrayRef *)(v99 + 14592));
              if (v190 || v191 < 1)
              {
LABEL_285:
                os_unfair_lock_unlock((os_unfair_lock_t)(v99 + 14576));
              }
              else
              {
                while (1)
                {
                  BOOL v192 = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v99 + 14592), 0);
                  CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v99 + 14592), 0);
                  CFSetGetCount(*(CFSetRef *)(v99 + 14600));
                  os_unfair_lock_unlock((os_unfair_lock_t)(v99 + 14576));
                  if (!v192) {
                    break;
                  }
                  dispatch_block_wait(v192, 0xFFFFFFFFFFFFFFFFLL);
                  _Block_release(v192);
                  os_unfair_lock_lock((os_unfair_lock_t)(v99 + 14576));
                  CFIndex v193 = CFArrayGetCount(*(CFArrayRef *)(v99 + 14584));
                  CFIndex v194 = CFArrayGetCount(*(CFArrayRef *)(v99 + 14592));
                  if (v193 || v194 <= 0) {
                    goto LABEL_285;
                  }
                }
              }
              int v195 = a5;
              os_unfair_lock_lock((os_unfair_lock_t)(v99 + 14576));
              CFIndex v196 = CFArrayGetCount(*(CFArrayRef *)(v99 + 14584)) - 1;
              long long v197 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v99 + 14584), v196);
              CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v99 + 14584), v196);
              CFSetAddValue(*(CFMutableSetRef *)(v99 + 14600), v197);
              CFSetGetCount(*(CFSetRef *)(v99 + 14600));
              uint64_t v198 = *(void *)(v99 + 14608) + 1;
              *(void *)(v99 + 14608) = v198;
              *((void *)v197 + 25) = v198;
              os_unfair_lock_unlock((os_unfair_lock_t)(v99 + 14576));
              if (*v189 == 1) {
                kdebug_trace();
              }
              uint64_t v16 = v619;
              a5 = v195;
              if (*(unsigned char *)(v99 + 156))
              {
                if (!*(unsigned char *)(v99 + 158))
                {
                  uint64_t v199 = _createBufferAndOptionsForTileDecoding(*(const void **)&v690[24], v188, v690[49], *(void *)(v99 + 160), *(void *)(v99 + 168), *(unsigned int *)(v99 + 152), (int *)(v99 + 92), *(const __CFDictionary **)(v99 + 32), &v682, (__CFDictionary **)v691);
                  if (v199)
                  {
                    uint64_t v23 = v199;
                    CFDictionaryRef DictionaryRepresentation = 0;
                    goto LABEL_346;
                  }
                  CFDictionaryRef DictionaryRepresentation = 0;
                  CFTypeRef v201 = (CFTypeRef)v682.i64[0];
                  goto LABEL_340;
                }
              }
              else if (!*(unsigned char *)(v99 + 158))
              {
                CFTypeRef v201 = 0;
                CFDictionaryRef DictionaryRepresentation = 0;
                goto LABEL_340;
              }
              CFAllocatorRef v204 = CFGetAllocator(*(CFTypeRef *)&v690[8]);
              CFMutableDictionaryRef v205 = CFDictionaryCreateMutable(v204, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              v691[0] = v205;
              if (v205)
              {
                uint64_t v206 = v205;
                v695.origin.x = (double)*((unint64_t *)v617 + 1);
                v695.origin.y = (double)*((unint64_t *)v617 + 2);
                v695.size.double width = (double)*((unint64_t *)v617 + 3);
                v695.size.double height = (double)*((unint64_t *)v617 + 4);
                CFDictionaryRef DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v695);
                if (DictionaryRepresentation)
                {
                  CFDictionaryAddValue(v206, @"CanvasPixelBuffer", *(const void **)v617);
                  CFDictionaryAddValue(v206, @"CanvasOrigin", DictionaryRepresentation);
                  CFTypeRef v201 = *(CFTypeRef *)v617;
                  if (*(void *)v617) {
                    CFTypeRef v201 = CFRetain(v201);
                  }
                  v682.i64[0] = (uint64_t)v201;
LABEL_340:
                  long long v213 = *v617;
                  long long v214 = v617[2];
                  v197[1] = v617[1];
                  v197[2] = v214;
                  *long long v197 = v213;
                  *((unsigned char *)v197 + 48) = v578;
                  *(_DWORD *)((char *)v197 + 49) = v661;
                  *((_DWORD *)v197 + 13) = *(_DWORD *)((char *)&v661 + 3);
                  *((void *)v197 + 7) = v595;
                  *((void *)v197 + 8) = theDictb;
                  *((void *)v197 + 9) = v584;
                  *((void *)v197 + 10) = *(void *)v590;
                  long long v215 = *(_OWORD *)size;
                  *(_OWORD *)((char *)v197 + 104) = *(_OWORD *)&size[16];
                  long long v216 = *(_OWORD *)&size[48];
                  *(_OWORD *)((char *)v197 + 120) = *(_OWORD *)&size[32];
                  *(_OWORD *)((char *)v197 + 136) = v216;
                  *(_OWORD *)((char *)v197 + 145) = *(_OWORD *)&size[57];
                  *(_OWORD *)((char *)v197 + 88) = v215;
                  *((unsigned char *)v197 + 161) = v70;
                  *((void *)v197 + 22) = *(void *)((char *)v688 + 14);
                  *(_OWORD *)((char *)v197 + 162) = v688[0];
                  *((_DWORD *)v197 + 46) = v187;
                  *((void *)v197 + 24) = *(void *)v690;
                  if (v201) {
                    CFTypeRef v201 = CFRetain(v201);
                  }
                  *((void *)v197 + 26) = v201;
                  if (v691[0]) {
                    CFTypeRef v217 = CFRetain(v691[0]);
                  }
                  else {
                    CFTypeRef v217 = 0;
                  }
                  *((void *)v197 + 27) = v217;
                  uint64_t v23 = CMPhotoDecompressionPluginDecode(*(void *)(v99 + 16));
                  if (!v23)
                  {
LABEL_350:
                    if (v682.i64[0]) {
                      CFRelease((CFTypeRef)v682.i64[0]);
                    }
                    if (v691[0]) {
                      CFRelease(v691[0]);
                    }
                    if (DictionaryRepresentation) {
                      CFRelease(DictionaryRepresentation);
                    }
                    uint64_t v11 = v617;
                    if (!v23) {
                      goto LABEL_357;
                    }
                    goto LABEL_590;
                  }
LABEL_346:
                  _asyncCanvasDecodeFinished(v99, v197, v23, 0);
                  uint64_t v218 = (const void *)*((void *)v197 + 26);
                  if (v218)
                  {
                    CFRelease(v218);
                    *((void *)v197 + 26) = 0;
                  }
                  v219 = (const void *)*((void *)v197 + 27);
                  if (v219)
                  {
                    CFRelease(v219);
                    *((void *)v197 + 27) = 0;
                  }
                  goto LABEL_350;
                }
              }
              else
              {
                CFDictionaryRef DictionaryRepresentation = 0;
              }
              uint64_t v23 = 4294950305;
              goto LABEL_346;
            }
            *(void *)&v688[0] = 0;
            v691[0] = 0;
            memset(size, 0, 32);
            if (*(unsigned char *)(v99 + 156))
            {
              if (*(void *)v690) {
                uint64_t v202 = *(void *)v690;
              }
              else {
                uint64_t v202 = *(void *)&v690[8];
              }
              uint64_t BufferAndOptionsForTileDecoding = _createBufferAndOptionsForTileDecoding(*(const void **)&v690[24], v202, v690[49], *(void *)(v99 + 160), *(void *)(v99 + 168), *(unsigned int *)(v99 + 152), (int *)(v99 + 92), *(const __CFDictionary **)(v99 + 32), v691, (__CFDictionary **)v688);
              if (BufferAndOptionsForTileDecoding) {
                goto LABEL_630;
              }
            }
            else
            {
              int v207 = *(_DWORD *)(v99 + 152);
              if (v207 == 825306677 || v207 == 1932996149 || v207 == 825437747)
              {
                CFAllocatorRef v208 = CFGetAllocator(*(CFTypeRef *)&v690[8]);
                *(void *)&v688[0] = CFDictionaryCreateMutable(v208, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                if (!*(void *)&v688[0]) {
                  goto LABEL_626;
                }
                uint64_t BufferAndOptionsForTileDecoding = FigCFDictionarySetInt();
                if (BufferAndOptionsForTileDecoding) {
                  goto LABEL_630;
                }
              }
            }
            *(void *)&size[24] = *(void *)v690;
            if (*(unsigned char *)(v99 + 208) || (*(void *)&size[8] = dispatch_semaphore_create(0)) != 0)
            {
              uint64_t BufferAndOptionsForTileDecoding = CMPhotoDecompressionPluginDecode(*(void *)(v99 + 16));
              if (!BufferAndOptionsForTileDecoding)
              {
                if (!*(unsigned char *)(v99 + 208)) {
                  dispatch_semaphore_wait(*(dispatch_semaphore_t *)&size[8], 0xFFFFFFFFFFFFFFFFLL);
                }
                uint64_t v23 = *(unsigned int *)&size[16];
                if (*(_DWORD *)&size[16]) {
                  goto LABEL_631;
                }
                long long v209 = *(__CVBuffer **)size;
                if (*(CFTypeRef *)size != v691[0] && *(unsigned char *)(v99 + 156))
                {
                  uint64_t BufferAndOptionsForTileDecoding = FigSignalErrorAt();
                }
                else
                {
                  if (v578)
                  {
LABEL_320:
                    uint64_t v23 = 0;
                    *(void *)CGSize size = 0;
                    goto LABEL_321;
                  }
                  uint64_t BufferAndOptionsForTileDecoding = CMPhotoSetPixelBufferCLAPFromRect(*(__CVBuffer **)size, 1, 1, (double)*(unint64_t *)(v99 + 176), (double)*(unint64_t *)(v99 + 184), (double)*(unint64_t *)(v99 + 192), (double)*(unint64_t *)(v99 + 200));
                  if (!BufferAndOptionsForTileDecoding)
                  {
                    long long v209 = *(__CVBuffer **)size;
                    goto LABEL_320;
                  }
                }
              }
LABEL_630:
              uint64_t v23 = BufferAndOptionsForTileDecoding;
LABEL_631:
              long long v209 = 0;
LABEL_321:
              if (v691[0]) {
                CFRelease(v691[0]);
              }
              if (*(void *)&v688[0]) {
                CFRelease(*(CFTypeRef *)&v688[0]);
              }
              if (*(void *)size) {
                CFRelease(*(CFTypeRef *)size);
              }
              if (*(void *)&size[8]) {
                dispatch_release(*(dispatch_object_t *)&size[8]);
              }
              if (!v23)
              {
                if (!(v595 | (unint64_t)theDictb) && !(v584 | *(void *)v590)
                  || (uint64_t v210 = CMPhotoSetPixelBufferCLAPFromRect(v209, 1, 1, (double)v595, (double)(unint64_t)theDictb, (double)v584, (double)*(unint64_t *)v590), !v210))
                {
                  CVPixelBufferRef pixelBuffer = v209;
LABEL_357:
                  uint64_t v23 = 0;
                  BOOL v154 = v11 != 0;
LABEL_358:
                  long long v209 = 0;
                  BOOL v220 = v23 != 0;
                  goto LABEL_359;
                }
                uint64_t v23 = v210;
              }
              goto LABEL_591;
            }
LABEL_626:
            long long v209 = 0;
            uint64_t v23 = 4294950305;
            goto LABEL_321;
          }
          if (v98)
          {
            HEIFItemDecoderRelease(v98);
            *(void *)&long long v664 = 0;
          }
          *(_OWORD *)&size[56] = v678[1];
          *(_OWORD *)&size[72] = v678[2];
          *(_OWORD *)&size[88] = v679[0];
          *(_OWORD *)&size[97] = *(_OWORD *)((char *)v679 + 9);
          v676.i32[3] = 1;
          size[0] = v578;
          *(_DWORD *)&size[1] = v686.i32[0];
          *(_DWORD *)&size[4] = *(__int32 *)((char *)v686.i32 + 3);
          *(void *)&size[8] = v595;
          *(void *)&size[16] = theDictb;
          *(void *)&size[24] = v584;
          *(void *)&size[32] = *(void *)v590;
          *(_OWORD *)&size[40] = v678[0];
          size[113] = v70;
          *(void *)&size[128] = *(void *)&v680[14];
          *(_OWORD *)&size[114] = *(_OWORD *)v680;
          uint64_t SampleBufferFromPictureReader = HEIFItemDecoderCreate((uint64_t)&v674, a3, a2, 0, (uint64_t)size, 0, 1uLL, 1uLL, 0, 0, 0, &v664, (__CVBuffer **)v11);
          if (!SampleBufferFromPictureReader)
          {
            uint64_t v99 = v664;
            goto LABEL_272;
          }
        }
        uint64_t v23 = SampleBufferFromPictureReader;
LABEL_590:
        long long v209 = 0;
LABEL_591:
        uint64_t v307 = a4;
LABEL_608:
        BOOL v154 = 0;
        if (v307) {
          *(_DWORD *)(v307 + 14580) = v23;
        }
        BOOL v220 = 1;
LABEL_359:
        if ((void)v664)
        {
          unsigned int v221 = HEIFItemDecoderWaitForFinishAndReturnStatus(v664, (uint64_t *)(v99 + 160), 0, 0);
          HEIFItemDecoderRelease(v664);
          uint64_t v23 = v220 ? v23 : v221;
          if (*MEMORY[0x1E4F1EBA8] == 1) {
            kdebug_trace();
          }
        }
        uint64_t v9 = a9;
        if (v209) {
          CFRelease(v209);
        }
        CFTypeRef v222 = v692[0];
        if (!v692[0]) {
          goto LABEL_369;
        }
        goto LABEL_368;
      }
LABEL_612:
      uint64_t v23 = v160;
      BOOL v154 = 0;
      uint64_t v99 = 0;
      goto LABEL_358;
    }
    uint64_t v23 = v97;
    long long v209 = 0;
LABEL_607:
    uint64_t v307 = a4;
    uint64_t v99 = a4;
    goto LABEL_608;
  }
  long long v72 = *((_OWORD *)v16 + 3);
  *(_OWORD *)&v690[32] = *((_OWORD *)v16 + 2);
  *(_OWORD *)&v690[48] = v72;
  long long v73 = *((_OWORD *)v16 + 5);
  *(_OWORD *)&v690[64] = *((_OWORD *)v16 + 4);
  *(_OWORD *)&v690[80] = v73;
  long long v74 = *((_OWORD *)v16 + 1);
  *(_OWORD *)v690 = *(_OWORD *)v16;
  *(_OWORD *)&v690[16] = v74;
  int v75 = *a5;
  int v76 = a5[1];
  int v644 = *(_DWORD *)(a5 + 2);
  __int16 v645 = *((_WORD *)a5 + 3);
  CGDataProviderRef v77 = a2;
  unint64_t v79 = *((void *)a5 + 1);
  unint64_t v78 = *((void *)a5 + 2);
  *(void *)v614 = *((void *)a5 + 3);
  unint64_t v596 = *((void *)a5 + 4);
  long long v80 = *(_OWORD *)(a5 + 56);
  v688[0] = *(_OWORD *)(a5 + 40);
  v688[1] = v80;
  v688[2] = *(_OWORD *)(a5 + 72);
  uint64_t v81 = *((void *)a5 + 11);
  uint64_t theDictc = *((void *)a5 + 12);
  uint64_t v572 = *((void *)a5 + 13);
  int v591 = a5[112];
  unsigned __int8 v568 = a5[113];
  unsigned __int8 v579 = a5[114];
  unsigned __int8 v643 = a5[119];
  int v642 = *(_DWORD *)(a5 + 115);
  *(void *)v575 = *((void *)a5 + 15);
  uint64_t v564 = *((void *)a5 + 16);
  CFTypeRef v673 = 0;
  CFTypeRef v672 = 0;
  CFTypeRef v671 = 0;
  CFTypeRef v670 = 0;
  CFTypeRef v669 = 0;
  CFTypeRef v668 = 0;
  CFTypeRef v658 = 0;
  CFTypeRef v657 = 0;
  CFTypeRef v656 = 0;
  unsigned int v655 = -1;
  unsigned int v654 = -1;
  CFTypeRef v653 = 0;
  CFBooleanRef BOOLean = 0;
  if (*(void *)v690) {
    uint64_t v82 = *(void *)v690;
  }
  else {
    uint64_t v82 = *(void *)&v690[8];
  }
  int v651 = 0;
  CFAllocatorRef v585 = CFGetAllocator(*(CFTypeRef *)&v690[8]);
  uint64_t TileGeometryFromPictureTileCursorService = _getImageOrientation(*(uint64_t *)&v690[8], v77, 0, &v646);
  if (TileGeometryFromPictureTileCursorService) {
    goto LABEL_172;
  }
  uint64_t v84 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v84) {
    uint64_t v85 = v84;
  }
  else {
    uint64_t v85 = 0;
  }
  uint64_t v155 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(v85 + 8);
  if (!v155) {
    goto LABEL_468;
  }
  char v560 = v76;
  uint64_t TileGeometryFromPictureTileCursorService = v155(v620, &v672);
  if (TileGeometryFromPictureTileCursorService) {
    goto LABEL_172;
  }
  uint64x2_t v686 = 0uLL;
  uint64x2_t cf = 0uLL;
  long long v667 = 0uLL;
  uint64x2_t v666 = 0uLL;
  memset(v691, 0, 32);
  uint64_t TileGeometryFromPictureTileCursorService = CMPhotoPictureReaderGetImageGeometryFromPictureReader(v620, *(unsigned __int8 *)(*(void *)&v690[8] + 28), (unint64_t)v691, (unint64_t)&v666);
  if (TileGeometryFromPictureTileCursorService) {
    goto LABEL_172;
  }
  uint64_t TileGeometryFromPictureTileCursorService = _getTileGeometryFromPictureTileCursorService(v672, &v686, (unint64_t *)&cf, (unint64_t)&v667);
  if (TileGeometryFromPictureTileCursorService) {
    goto LABEL_172;
  }
  uint64_t TileGeometryFromPictureTileCursorService = CMPhotoPictureReaderGetImageCodecTypeFromReader(v620, &v651);
  if (TileGeometryFromPictureTileCursorService) {
    goto LABEL_172;
  }
  if (v75)
  {
    v691[1] = 0;
    v691[0] = 0;
    *(_OWORD *)&v691[2] = v667;
  }
  char v554 = v75;
  uint64_t v557 = v82;
  if (v79 | v78 || *(void *)v614 | v596 && (*(CFTypeRef *)v614 != v691[2] || (CFTypeRef)v596 != v691[3]))
  {
    *(void *)CGSize size = v79;
    *(void *)&size[8] = v78;
    *(void *)&size[16] = *(void *)v614;
    *(void *)&size[24] = v596;
    uint64_t TileGeometryFromPictureTileCursorService = CMPhotoApplyCropCMPhotoRectToRect(v691, (unint64_t *)size);
    if (TileGeometryFromPictureTileCursorService) {
      goto LABEL_172;
    }
  }
  uint64x2_t v173 = cf;
  unint64_t v174 = (unint64_t)v691[0] / cf.i64[0] * cf.i64[0];
  unint64_t v175 = (unint64_t)v691[1] / cf.i64[1] * cf.i64[1];
  v691[0] = (CFTypeRef)((unint64_t)v691[0] % cf.i64[0]);
  v691[1] = (CFTypeRef)((unint64_t)v691[1] % cf.i64[1]);
  v666.i64[0] = (uint64_t)v691[2] + (unint64_t)v691[0];
  v666.i64[1] = (uint64_t)v691[3] + (unint64_t)v691[1];
  unint64_t v176 = ((unint64_t)v691[2]
        + (unint64_t)v691[0]
        + cf.i64[0]
        + ~(((unint64_t)v691[2] + (unint64_t)v691[0] - 1) % cf.i64[0]))
       / cf.i64[0];
  unint64_t v177 = ((unint64_t)v691[3]
        + (unint64_t)v691[1]
        + cf.i64[1]
        + ~(((unint64_t)v691[3] + (unint64_t)v691[1] - 1) % cf.i64[1]))
       / cf.i64[1];
  v686.i64[0] = v176;
  v686.i64[1] = v177;
  if (v651 == 1936484717)
  {
    BOOL v156 = 0;
    uint64_t v23 = 4294950297;
    if (v177 > 4 || v176 != 1) {
      goto LABEL_469;
    }
  }
  *(void *)&long long v667 = v176 * cf.i64[0];
  *((void *)&v667 + 1) = v177 * cf.i64[1];
  if (v76) {
    BOOL v178 = v646 == 1;
  }
  else {
    BOOL v178 = 1;
  }
  BOOL v180 = !v178 || ((v78 % cf.i64[1]) | (v79 % cf.i64[0])) != 0 || v11 == 0;
  int v181 = !v180;
  if (!v180
    && (!*(void *)v11
     || *(long long *)((char *)v11 + 8) != 0
     || *(long long *)((char *)v11 + 24) != 0
     || !*((void *)v11 + 5)))
  {
    BOOL v156 = 0;
    uint64_t v23 = 4294950304;
    goto LABEL_469;
  }
  v611 = a5;
  int v547 = v181;
  v549 = (char *)v175;
  unint64_t v552 = v174;
  if (v81 | theDictc && *(_OWORD *)&cf != __PAIR128__(theDictc, v81))
  {
    value.i64[0] = v81;
    uint64_t v212 = theDictc;
    value.i64[1] = theDictc;
    char v543 = 1;
    uint64_t v211 = v81;
  }
  else
  {
    char v543 = 0;
    uint64x2_t value = cf;
    uint64_t v212 = cf.i64[1];
    uint64_t v211 = cf.i64[0];
  }
  size_t v538 = v212 * v177;
  size_t v540 = v211 * v176;
  *(void *)&long long v660 = v211 * v176;
  *((void *)&v660 + 1) = v212 * v177;
  uint64x2_t v682 = 0uLL;
  *(void *)v683 = (char *)v691[2] + (unint64_t)v691[0];
  *(void *)&v683[8] = (char *)v691[3] + (unint64_t)v691[1];
  _getScaledEvenCropRect((uint64_t)&v682, cf.u64[0], cf.u64[1], v211, v212, (uint64_t)v692);
  long long v659 = *(_OWORD *)&v692[2];
  long long v664 = 0u;
  long long v665 = 0u;
  *(_OWORD *)CGSize size = *(_OWORD *)v691;
  *(_OWORD *)&size[16] = *(_OWORD *)&v691[2];
  _getScaledEvenCropRect((uint64_t)size, v173.u64[0], v173.u64[1], v211, v212, (uint64_t)&v664);
  uint64_t v256 = _copyColorInfoForItem(*(unsigned char **)&v690[8], v620, 0, v591, (CMVideoFormatDescriptionRef *)&v653, 0, &v668, &v658, &v657, &v656, &v655, &v654, 0);
  if (v256)
  {
    uint64_t v23 = v256;
    BOOL v156 = 0;
    a5 = v611;
    goto LABEL_469;
  }
  uint64_t v257 = FigPictureReaderGetFigBaseObject();
  uint64_t v258 = *(void *)(CMBaseObjectGetVTable() + 8);
  a5 = v611;
  uint64_t v259 = v258 ? v258 : 0;
  v260 = *(uint64_t (**)(uint64_t, void, CFAllocatorRef, CFBooleanRef *))(v259 + 48);
  if (!v260) {
    goto LABEL_468;
  }
  uint64_t TileGeometryFromPictureTileCursorService = v260(v257, *MEMORY[0x1E4F333E0], v585, &BOOLean);
  if (TileGeometryFromPictureTileCursorService)
  {
LABEL_172:
    uint64_t v23 = TileGeometryFromPictureTileCursorService;
    BOOL v156 = 0;
    goto LABEL_469;
  }
  int v261 = CFBooleanGetValue(BOOLean);
  int v262 = v261;
  if (v651 == 1936484717 && !v261)
  {
    uint64_t TileGeometryFromPictureTileCursorService = FigSignalErrorAt();
    goto LABEL_172;
  }
  if (BOOLean)
  {
    CFRelease(BOOLean);
    CFBooleanRef BOOLean = 0;
  }
  uint64_t v263 = FigPictureReaderGetFigBaseObject();
  uint64_t v264 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v264) {
    uint64_t v265 = v264;
  }
  else {
    uint64_t v265 = 0;
  }
  v268 = *(uint64_t (**)(uint64_t, void, CFAllocatorRef, CFBooleanRef *))(v265 + 48);
  if (!v268)
  {
LABEL_468:
    BOOL v156 = 0;
    uint64_t v23 = 4294954514;
    goto LABEL_469;
  }
  uint64_t TileGeometryFromPictureTileCursorService = v268(v263, *MEMORY[0x1E4F333D8], v585, &BOOLean);
  if (TileGeometryFromPictureTileCursorService) {
    goto LABEL_172;
  }
  if (CFBooleanGetValue(BOOLean)) {
    char v269 = 1;
  }
  else {
    char v269 = v543;
  }
  if (v547)
  {
    dispatch_retain(*((dispatch_object_t *)v617 + 5));
    v270 = *((void *)v617 + 5);
  }
  else
  {
    v270 = dispatch_queue_create("com.apple.cmphoto.canvasTransferQueue", 0);
  }
  if (!v270)
  {
    BOOL v156 = 0;
    uint64_t v23 = 4294950305;
    goto LABEL_469;
  }
  CFTypeRef v271 = v672;
  uint64_t v272 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v272) {
    uint64_t v273 = v272;
  }
  else {
    uint64_t v273 = 0;
  }
  v274 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(v273 + 8);
  if (!v274)
  {
    BOOL v156 = 0;
    CFTypeRef v302 = 0;
    uint64_t v23 = 4294954514;
    goto LABEL_580;
  }
  uint64_t v275 = v274(v271, &v671);
  if (v275)
  {
    uint64_t v23 = v275;
    BOOL v156 = 0;
    CFTypeRef v302 = 0;
    goto LABEL_580;
  }
  memset(v680, 0, 37);
  int v649 = 0;
  unsigned __int8 v650 = 0;
  memset(&v648[1], 0, 7);
  unint64_t v276 = v686.u64[1];
  if (!v686.i64[1])
  {
    int v301 = 0;
LABEL_564:
    dispatch_barrier_sync(v270, &__block_literal_global_9);
    v303 = (int *)MEMORY[0x1E4F1EBA8];
    int v304 = *MEMORY[0x1E4F1EBA8];
    if (v301 && v304 == 1)
    {
      kdebug_trace();
      int v304 = *v303;
    }
    if (v304 == 1) {
      kdebug_trace();
    }
    if (v673)
    {
      uint64_t v305 = CMPhotoSetPixelBufferCLAPFromRect((__CVBuffer *)v673, 1, 1, (double)(unint64_t)v664, (double)*((unint64_t *)&v664 + 1), (double)(unint64_t)v665, (double)*((unint64_t *)&v665 + 1));
      BOOL v156 = v305 == 0;
      char v306 = v547;
      if (v305) {
        char v306 = 1;
      }
      if (v306)
      {
        uint64_t v23 = v305;
      }
      else
      {
        BOOL v156 = 0;
        uint64_t v23 = 0;
        CVPixelBufferRef pixelBuffer = (CVPixelBufferRef)v673;
        CFTypeRef v673 = 0;
      }
    }
    else
    {
      BOOL v156 = 0;
      uint64_t v23 = 4294950305;
    }
    goto LABEL_579;
  }
  v535 = 0;
  v277 = 0;
  uint64_t v544 = 0;
  int v278 = v572;
  if (!v572) {
    int v278 = 875704422;
  }
  unsigned int v504 = v278;
  uint64_t v532 = v659;
  uint64_t v524 = *MEMORY[0x1E4F33478];
  CFAllocatorRef allocatorb = (CFAllocatorRef)*((void *)&v659 + 1);
  uint64_t v279 = v686.i64[0];
  int v510 = v262;
  while (!v279)
  {
LABEL_558:
    if (++v544 >= v276)
    {
      if (v535)
      {
        uint64_t v286 = HEIFItemDecoderWaitForFinishAndReturnStatus((uint64_t)v535, v666.i64, cf.i64, value.i64);
        if (v286)
        {
LABEL_613:
          uint64_t v23 = v286;
          BOOL v156 = 0;
          goto LABEL_577;
        }
        int v301 = 1;
      }
      else
      {
        int v301 = 0;
      }
      a5 = v611;
      goto LABEL_564;
    }
  }
  unint64_t v280 = 0;
  while (1)
  {
    if (v670)
    {
      CFRelease(v670);
      CFTypeRef v670 = 0;
    }
    if (v277)
    {
      uint64_t v23 = v277[3645];
      if (v23)
      {
        BOOL v156 = 0;
        goto LABEL_579;
      }
    }
    uint64x2_t v281 = cf;
    CFTypeRef v282 = v671;
    uint64_t v283 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v283) {
      uint64_t v284 = v283;
    }
    else {
      uint64_t v284 = 0;
    }
    v285 = *(uint64_t (**)(CFTypeRef, unint64_t, char *))(v284 + 24);
    if (!v285)
    {
      BOOL v156 = 0;
      uint64_t v23 = 4294954514;
      goto LABEL_579;
    }
    uint64_t v286 = v285(v282, v552 + v281.i64[0] * v280, &v549[v281.i64[1] * v544]);
    if (v286) {
      goto LABEL_613;
    }
    uint64_t CMBaseObject = FigPictureTileCursorGetCMBaseObject();
    uint64_t v288 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v288) {
      uint64_t v289 = v288;
    }
    else {
      uint64_t v289 = 0;
    }
    v290 = *(uint64_t (**)(uint64_t, uint64_t, CFAllocatorRef, CFTypeRef *))(v289 + 48);
    if (!v290)
    {
      BOOL v156 = 0;
      uint64_t v23 = 4294954514;
      goto LABEL_577;
    }
    uint64_t v286 = v290(CMBaseObject, v524, v585, &v670);
    if (v286) {
      goto LABEL_613;
    }
    if (!v673) {
      break;
    }
LABEL_535:
    uint64_t v292 = value.i64[1] * v544;
    unint64_t v293 = v532 - value.i64[0] * v280;
    if (value.i64[0] >= v293) {
      uint64_t v294 = v532 - value.i64[0] * v280;
    }
    else {
      uint64_t v294 = value.i64[0];
    }
    if (value.i64[1] >= (unint64_t)allocatorb - v292) {
      v295 = (char *)allocatorb - v292;
    }
    else {
      v295 = (char *)value.i64[1];
    }
    if (v294 && v295)
    {
      BOOL v296 = value.i64[0] > v293 || value.i64[1] > (unint64_t)allocatorb - v292;
      BOOL v297 = v296;
      BOOL v298 = !v297;
      v299 = v297 ? v295 : 0;
      uint64_t v300 = v298 ? 0 : v294;
      *(void *)&v678[0] = v673;
      *((void *)&v678[0] + 1) = value.i64[0] * v280;
      *(void *)&v678[1] = value.i64[1] * v544;
      *((void *)&v678[1] + 1) = v294;
      *(void *)&v678[2] = v295;
      *((void *)&v678[2] + 1) = v270;
      uint64x2_t v676 = *(uint64x2_t *)&v690[32];
      *(_OWORD *)v677 = *(_OWORD *)&v690[48];
      *(_OWORD *)&v677[16] = *(_OWORD *)&v690[64];
      *(_OWORD *)&v677[32] = *(_OWORD *)&v690[80];
      long long v674 = *(_OWORD *)v690;
      long long v675 = *(_OWORD *)&v690[16];
      *(_WORD *)CGSize size = 256;
      size[2] = 0;
      *(_OWORD *)&size[3] = *(_OWORD *)v680;
      *(_OWORD *)&size[19] = *(_OWORD *)&v680[16];
      *(void *)&size[32] = *(void *)&v680[29];
      *(void *)&size[40] = 0;
      *(void *)&size[48] = 0;
      *(void *)&size[56] = v300;
      *(void *)&size[64] = v299;
      *(void *)&size[72] = v666.i64[0] - v281.i64[0] * v280;
      *(void *)&size[80] = v666.i64[1] - v281.i64[1] * v544;
      *(void *)&size[88] = v81;
      *(void *)&size[96] = theDictc;
      *(void *)&size[104] = 0;
      *(_WORD *)&size[112] = v591;
      size[114] = v579;
      *(_DWORD *)&size[115] = v649;
      size[119] = v650;
      *(void *)&size[120] = *(void *)v575;
      size[128] = 0;
      *(_DWORD *)&size[129] = v648[1];
      *(_DWORD *)&size[132] = *(_DWORD *)((char *)&v648[1] + 3);
      v277 = v535;
      uint64_t v286 = _decodeItem(&v674, v670, 0, v535, size, 0, v678, 0, 0);
      if (v286) {
        goto LABEL_613;
      }
    }
    ++v280;
    uint64_t v279 = v686.i64[0];
    a5 = v611;
    if (v280 >= v686.i64[0])
    {
      unint64_t v276 = v686.u64[1];
      goto LABEL_558;
    }
  }
  if (v547)
  {
    CFTypeRef v291 = *(CFTypeRef *)v617;
    if (*(void *)v617) {
      CFTypeRef v291 = CFRetain(v291);
    }
    CFTypeRef v673 = v291;
    if (!v510 || v277) {
      goto LABEL_528;
    }
    goto LABEL_525;
  }
  if (v510 && !v277)
  {
LABEL_525:
    size[0] = v554;
    size[1] = v560;
    *(_DWORD *)&size[2] = v644;
    *(_WORD *)&size[6] = v645;
    *(void *)&size[8] = v79;
    *(void *)&size[16] = v78;
    *(void *)&size[24] = *(void *)v614;
    *(void *)&size[32] = v596;
    *(_OWORD *)&size[40] = v688[0];
    *(_OWORD *)&size[56] = v688[1];
    *(_OWORD *)&size[72] = v688[2];
    *(void *)&size[88] = v81;
    *(void *)&size[96] = theDictc;
    *(void *)&size[104] = v572;
    size[112] = v591;
    size[113] = v568;
    size[114] = v579;
    size[119] = v643;
    *(_DWORD *)&size[115] = v642;
    *(void *)&size[120] = *(void *)v575;
    *(void *)&size[128] = v564;
    uint64_t v286 = HEIFItemDecoderCreate((uint64_t)v690, v620, v670, 0, (uint64_t)size, v269 ^ 1u, v686.u64[0], v686.u64[1], &v659, (size_t *)&v660, value.i64, &v669, (__CVBuffer **)&v673);
    if (v286) {
      goto LABEL_613;
    }
    goto LABEL_528;
  }
  long long v661 = 0uLL;
  *(void *)&long long v662 = v532;
  *((void *)&v662 + 1) = allocatorb;
  uint64_t v286 = _createPixelBuffer(*(const void **)&v690[24], v557, v690[49], v504, value.i64[0], value.i64[1], v540, v538, (unint64_t *)&v661, 0, 0, &v673);
  if (v286) {
    goto LABEL_613;
  }
LABEL_528:
  if (*MEMORY[0x1E4F1EBA8] == 1)
  {
    kdebug_trace();
    v535 = (unsigned int *)v669;
    if (v669 && *MEMORY[0x1E4F1EBA8] == 1) {
      kdebug_trace();
    }
  }
  else
  {
    v535 = (unsigned int *)v669;
  }
  if (v673)
  {
    CMPhotoAddColorInformationToPixelBufferAccordingToFormat(v668, v658, v657, v656, (CVBufferRef)v673);
    CMPhotoAddChromaLocationToPixelBufferAccordingToFormat(v655, v654, (__CVBuffer *)v673);
    CMPhotoAddHDRMetadataToPixelBufferFromFormatDescription((const opaqueCMFormatDescription *)v653, (__CVBuffer *)v673);
    v277 = v535;
    goto LABEL_535;
  }
  BOOL v156 = 0;
  uint64_t v23 = 4294950305;
LABEL_577:
  a5 = v611;
LABEL_579:
  CFTypeRef v302 = v669;
LABEL_580:
  HEIFItemDecoderRelease((uint64_t)v302);
  dispatch_release(v270);
LABEL_469:
  if (v653) {
    CFRelease(v653);
  }
  uint64_t v9 = a9;
  if (v668) {
    CFRelease(v668);
  }
  if (v658) {
    CFRelease(v658);
  }
  uint64_t v16 = v619;
  BOOL v154 = v156;
  if (v657) {
    CFRelease(v657);
  }
  if (v656) {
    CFRelease(v656);
  }
  if (v672) {
    CFRelease(v672);
  }
  if (v671) {
    CFRelease(v671);
  }
  if (v673) {
    CFRelease(v673);
  }
  if (v670) {
    CFRelease(v670);
  }
  CFTypeRef v222 = BOOLean;
  if (BOOLean) {
    goto LABEL_368;
  }
LABEL_369:
  if (!v23) {
    goto LABEL_370;
  }
LABEL_398:
  CFDictionaryRef v231 = 0;
LABEL_399:
  v227 = pixelBuffer;
  if (pixelBuffer) {
LABEL_400:
  }
    CFRelease(v227);
  if (v231) {
LABEL_413:
  }
    CFRelease(v231);
  return v23;
}

uint64_t CMPhotoDecompressionPluginDecode(uint64_t a1)
{
  if (!a1) {
    return 4294950306;
  }
  if (*(void *)(a1 + 40)) {
    uint64_t v1 = *(void *)(a1 + 40);
  }
  else {
    uint64_t v1 = 0;
  }
  return (*(uint64_t (**)(void))(v1 + 32))();
}

uint64_t CMPhotoCreateDefaultTripletsForTransfer(__CVBuffer *a1, uint64_t a2)
{
  if (a1)
  {
    OSType v2 = a2;
    CMPhotoPixelFormatIsFullRange(a2);
    CFBooleanRef PixelBufferDescriptionKey = (const __CFBoolean *)_getPixelBufferDescriptionKey(a1, (const void *)*MEMORY[0x1E4F24EB0]);
    if (CMPhotoCFBooleanGetValue(PixelBufferDescriptionKey))
    {
      if (CMPhotoPixelFormatContainsYCbCr(v2)) {
        CMPhotoPixelBufferIsITUR_2100TF(a1);
      }
    }
  }
  return 0;
}

CFNumberRef ___populateIndexMap_block_invoke(void *a1, const __CFNumber *a2)
{
  CFNumberRef result = CMPhotoCFNumberGetSize(a2);
  if ((uint64_t)result < a1[5])
  {
    *(void *)(a1[6] + 8 * (void)result) = a1[7];
    uint64_t v4 = *(void *)(a1[4] + 8);
    uint64_t v5 = *(void *)(v4 + 24);
    *(void *)(v4 + 24) = v5 + 1;
    *(void *)(a1[8] + 8 * (void)result) = v5;
  }
  return result;
}

void _once_setDefaultPool()
{
  CFTypeRef cf = 0;
  int v0 = CMPhotoCodecSessionPoolCreate((const __CFAllocator *)*MEMORY[0x1E4F1CF80], 0, (uint64_t *)&cf);
  CFTypeRef v1 = cf;
  if (v0
    || (uint64_t v2 = 0,
        atomic_compare_exchange_strong_explicit(&defaultPool, (unint64_t *)&v2, (unint64_t)cf, memory_order_relaxed, memory_order_relaxed), v2))
  {
    if (v1) {
      CFRelease(v1);
    }
  }
}

uint64_t CMPhotoCompressionSessionAddImage(uint64_t a1, const __CFDictionary *a2, opaqueCMSampleBuffer *a3, CFIndex *a4)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t result = _verifyMainImageOptions(a1, a2, (uint64_t)a3);
  if (!result)
  {
    if (*(unsigned char *)(a1 + 72))
    {
      uint64_t v9 = *(void *)(a1 + 80);
      if (!v9) {
        return 4294950195;
      }
      uint64_t v10 = *(uint64_t (**)(uint64_t, const __CFDictionary *, opaqueCMSampleBuffer *, CFIndex *))(v9 + 48);
      if (v10)
      {
        return v10(a1, a2, a3, a4);
      }
      return 4294950302;
    }
    uint64_t v11 = (uint64_t (*)(uint64_t, const __CFDictionary *, opaqueCMSampleBuffer *, CFIndex *))off_1EB3D1888[0];
    if (!off_1EB3D1888[0]) {
      return 4294950302;
    }
    return v11(a1, a2, a3, a4);
  }
  return result;
}

uint64_t _verifyMainImageOptions(uint64_t a1, CFDictionaryRef theDict, uint64_t a3)
{
  if (!theDict)
  {
    if (!a3) {
      goto LABEL_12;
    }
    goto LABEL_8;
  }
  CFArrayRef Value = CFDictionaryGetValue(theDict, @"DryRun");
  if ((a3 != 0) != (Value == 0)) {
    goto LABEL_12;
  }
  if (!Value)
  {
LABEL_8:
    if (*(unsigned char *)(a1 + 16) || !*(unsigned char *)(a1 + 72)) {
      return 4294950195;
    }
    return 0;
  }
  CFTypeID v6 = CFGetTypeID(Value);
  if (v6 == CMFormatDescriptionGetTypeID())
  {
    if (*(unsigned char *)(a1 + 16)) {
      return 4294950195;
    }
    return 0;
  }
LABEL_12:
  return FigSignalErrorAt();
}

uint64_t _compressImageInternal(void *a1, const __CFDictionary *a2, opaqueCMSampleBuffer *a3, uint64_t *a4)
{
  if (a1[33])
  {
    return FigSignalErrorAt();
  }
  else
  {
    char v14 = 0;
    v13[0] = 0;
    v13[1] = 0;
    SourceCMVideoDimensions Dimensions = CMPhotoGetSourceDimensions(a3, a2, v13);
    if (SourceDimensions) {
      return SourceDimensions;
    }
    uint64_t v9 = (_DWORD *)MEMORY[0x1E4F1EBA8];
    if (*MEMORY[0x1E4F1EBA8] == 1) {
      kdebug_trace();
    }
    uint64_t v10 = _encodeSource(a1, 0, 0, 0, a2, a3, &v14);
    if (*v9 == 1) {
      kdebug_trace();
    }
    if (a4 && !v10)
    {
      if (v14) {
        uint64_t v11 = -1;
      }
      else {
        uint64_t v11 = 0;
      }
      *a4 = v11;
    }
    return v10;
  }
}

uint64_t _compressImageInternal_0(uint64_t a1, CFDictionaryRef theDict, opaqueCMSampleBuffer *a3, int a4, CFIndex *a5, uint64_t a6)
{
  if (!*(unsigned char *)(a1 + 104))
  {
    if (!theDict)
    {
LABEL_22:
      return _compressMainImage(a1, theDict, a3, a4, a5, a6);
    }
    int v12 = CFDictionaryContainsKey(theDict, @"IncludeThumbnailWithOptions");
    if (!CFDictionaryContainsKey(theDict, @"IncludeAlphaAuxiliaryImageWithOptions"))
    {
      if (v12)
      {
        uint64_t v13 = (_DWORD *)MEMORY[0x1E4F1EBA8];
        if (*MEMORY[0x1E4F1EBA8] == 1) {
          kdebug_trace();
        }
        uint64_t v20 = 0;
        uint64_t v21 = &v20;
        uint64_t v22 = 0x2000000000;
        int v23 = 0;
        *(void *)(a1 + 224) = FigSemaphoreCreate();
        *(void *)(a1 + 232) = -1;
        char v14 = dispatch_queue_create("com.apple.coremedia.asyncthumb", 0);
        uint64_t v15 = v14;
        if (v14)
        {
          block[0] = MEMORY[0x1E4F143A8];
          block[1] = *(void *)"";
          block[2] = ___compressMainWithThumbAsync_block_invoke;
          block[3] = &unk_1E5E30020;
          void block[6] = theDict;
          block[7] = a1 + 88;
          void block[8] = a3;
          block[9] = a1;
          char v19 = a4;
          void block[4] = a6;
          void block[5] = &v20;
          dispatch_async(v14, block);
          uint64_t v16 = _compressMainImage(a1, theDict, a3, a4, a5, a6);
        }
        else
        {
          uint64_t v16 = 4294950194;
        }
        if (*v13 == 1) {
          kdebug_trace();
        }
        dispatch_sync(v15, &__block_literal_global_21);
        FigSemaphoreDestroy();
        if (*v13 == 1) {
          kdebug_trace();
        }
        if (v15) {
          dispatch_release(v15);
        }
        if (!v16)
        {
          if (*((_DWORD *)v21 + 6)) {
            uint64_t v16 = 4294950187;
          }
          else {
            uint64_t v16 = 0;
          }
        }
        _Block_object_dispose(&v20, 8);
        if (*v13 == 1) {
          kdebug_trace();
        }
        return v16;
      }
      goto LABEL_22;
    }
  }
  return FigSignalErrorAt();
}

uint64_t _encodeSource(const void *a1, int a2, int a3, const void *a4, const __CFDictionary *a5, void *a6, char *a7)
{
  CFAllocatorRef v14 = CFGetAllocator(a1);
  CFTypeRef cf = 0;
  if (a5)
  {
    int v31 = 0;
    if (CFDictionaryContainsKey(a5, @"IncludeThumbnailWithOptions")) {
      goto LABEL_25;
    }
    CFArrayRef Value = (const opaqueCMFormatDescription *)CFDictionaryGetValue(a5, @"DryRun");
    if ((a6 != 0) != (Value == 0))
    {
      uint64_t v28 = 4294950306;
      goto LABEL_27;
    }
    uint64_t v16 = Value;
    if (CMPhotoCFDictionaryGetInt32IfPresent(a5, @"CodecType", &v31) && v31 != 1785750887) {
      goto LABEL_25;
    }
    if (CFDictionaryContainsKey(a5, @"ImageOrientation"))
    {
      char v30 = 0;
      if (!CMPhotoCFDictionaryGetBooleanIfPresent(a5, @"ApplyTransform", &v30) || v30 == 0) {
        goto LABEL_25;
      }
    }
    if (v16)
    {
      char v19 = 1;
      uint64_t PixelBufferWithSurface = _encodeImageForIndex(a1, a2, a3, a4, a5, 1, v16);
      if (PixelBufferWithSurface) {
        goto LABEL_26;
      }
      goto LABEL_23;
    }
  }
  int ImageType = CMPhotoGetImageType(a6);
  if ((ImageType - 2) < 2)
  {
    uint64_t v22 = a1;
    int v23 = a2;
    int v24 = a3;
    int v25 = a4;
    CFDictionaryRef v26 = a5;
    long long v27 = (const opaqueCMFormatDescription *)a6;
    goto LABEL_22;
  }
  if (ImageType != 1)
  {
LABEL_25:
    uint64_t PixelBufferWithSurface = FigSignalErrorAt();
    goto LABEL_26;
  }
  uint64_t PixelBufferWithSurface = CMPhotoCreatePixelBufferWithSurface(v14, (IOSurfaceRef)a6, 0, (CVPixelBufferRef *)&cf);
  if (PixelBufferWithSurface)
  {
LABEL_26:
    uint64_t v28 = PixelBufferWithSurface;
    goto LABEL_27;
  }
  long long v27 = (const opaqueCMFormatDescription *)cf;
  uint64_t v22 = a1;
  int v23 = a2;
  int v24 = a3;
  int v25 = a4;
  CFDictionaryRef v26 = a5;
LABEL_22:
  uint64_t PixelBufferWithSurface = _encodeImageForIndex(v22, v23, v24, v25, v26, 0, v27);
  char v19 = 0;
  if (PixelBufferWithSurface) {
    goto LABEL_26;
  }
LABEL_23:
  uint64_t v28 = 0;
  if (a7) {
    *a7 = v19;
  }
LABEL_27:
  if (cf) {
    CFRelease(cf);
  }
  return v28;
}

uint64_t _compressImage_0(uint64_t a1, const __CFDictionary *a2, opaqueCMSampleBuffer *a3, CFIndex *a4)
{
  return _compressImageInternal_0(a1, a2, a3, 0, a4, 0);
}

uint64_t CMPhotoGetSourceDimensions(opaqueCMSampleBuffer *a1, CFDictionaryRef theDict, unint64_t *a3)
{
  if (!((unint64_t)a1 | (unint64_t)theDict)) {
    goto LABEL_17;
  }
  ImageBuffer = a1;
  if (!a1)
  {
    CFArrayRef Value = (const opaqueCMFormatDescription *)CFDictionaryGetValue(theDict, @"DryRun");
    if (!Value || (v9 = Value, CFTypeID v10 = CFGetTypeID(Value), v10 != CMFormatDescriptionGetTypeID()))
    {
      FigSignalErrorAt();
      return 0;
    }
    uint64_t Dimensions = (uint64_t)CMVideoFormatDescriptionGetDimensions(v9);
    unint64_t v12 = (int)Dimensions;
    uint64_t v13 = Dimensions >> 32;
LABEL_13:
    *a3 = v12;
    a3[1] = v13;
    return 0;
  }
  int ImageType = CMPhotoGetImageType(a1);
  switch(ImageType)
  {
    case 3:
      ImageBuffer = CMSampleBufferGetImageBuffer(ImageBuffer);
      if (!ImageBuffer) {
        goto LABEL_17;
      }
LABEL_11:
      double PixelBufferSize = CMPhotoGetPixelBufferSize(ImageBuffer);
      goto LABEL_12;
    case 2:
      goto LABEL_11;
    case 1:
      double PixelBufferSize = CMPhotoGetSurfaceSize(ImageBuffer);
LABEL_12:
      unint64_t v12 = vcvtad_u64_f64(PixelBufferSize);
      uint64_t v13 = vcvtad_u64_f64(v7);
      goto LABEL_13;
  }
  if (FigCFDictionaryGetValue())
  {
    uint64_t v13 = 0;
    unint64_t v12 = 0;
    goto LABEL_13;
  }
LABEL_17:
  return FigSignalErrorAt();
}

uint64_t CMPhotoGetImageType(const void *a1)
{
  pthread_once(&CMPhotoGetImageType_onceToken, (void (*)(void))_once_CMPhotoGetImageType);
  CFTypeID v2 = CFGetTypeID(a1);
  uint64_t result = 1;
  while (v2 != sTypes[result])
  {
    if (++result == 5) {
      return 0;
    }
  }
  return result;
}

uint64_t ___getAvailableFreeMemory_block_invoke()
{
  getpid();
  uint64_t result = sandbox_check();
  _getAvailableFreeMemory_sSyscallAllowed = result == 0;
  return result;
}

uint64_t CMPhotoCompressionSessionCloseContainerAndCopyBacking(uint64_t a1)
{
  if (!a1) {
    return 4294950306;
  }
  if (*(unsigned char *)(a1 + 16)) {
    return 4294950195;
  }
  if (!*(unsigned char *)(a1 + 72)) {
    return 4294950195;
  }
  uint64_t v1 = *(void *)(a1 + 80);
  *(unsigned char *)(a1 + 72) = 0;
  if (!v1) {
    return 4294950195;
  }
  CFTypeID v2 = *(uint64_t (**)(void))(v1 + 32);
  if (v2) {
    return v2();
  }
  else {
    return 4294950302;
  }
}

uint64_t _closeContainerAndCopyBacking(uint64_t a1, _DWORD *a2, size_t *a3, unint64_t a4)
{
  CFAllocatorRef v8 = CFGetAllocator((CFTypeRef)a1);
  DataCFIndex Length = 0;
  uint64_t v9 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  if (!(a4 | *(void *)(a1 + 264)))
  {
LABEL_106:
    uint64_t v13 = 0;
    goto LABEL_107;
  }
  if (!*(unsigned char *)(a1 + 376) && !*(void *)(a1 + 280))
  {
    CFArrayRef v15 = *(const __CFArray **)(a1 + 312);
    if ((!v15 || !CFArrayGetCount(v15)) && !*(unsigned char *)(a1 + 320) && !*(void *)(a1 + 288))
    {
      if (*(unsigned char *)(a1 + 304))
      {
        uint64_t v16 = (CFDataRef *)(a1 + 248);
        if (!*(void *)(a1 + 248))
        {
          int v10 = *(_DWORD *)(a1 + 240);
          if (v10 != 4)
          {
            if (v10 == 2)
            {
              DataBuffer = CMSampleBufferGetDataBuffer(*(CMSampleBufferRef *)(a1 + 264));
              if (DataBuffer)
              {
                float v49 = DataBuffer;
                DataCFIndex Length = CMBlockBufferGetDataLength(DataBuffer);
                *uint64_t v16 = (CFDataRef)CFRetain(v49);
                goto LABEL_100;
              }
              uint64_t v13 = 4294950304;
              goto LABEL_107;
            }
            if (v10 == 1)
            {
              uint64_t WritableWithCFMutableData = CMPhotoDataCreateFromSampleBuffer(v8, *(CMSampleBufferRef *)(a1 + 264), 0, (CFDataRef *)(a1 + 248));
              if (!WritableWithCFMutableData)
              {
                DataCFIndex Length = CFDataGetLength(*v16);
                goto LABEL_100;
              }
LABEL_13:
              uint64_t v13 = WritableWithCFMutableData;
              goto LABEL_107;
            }
            goto LABEL_7;
          }
          CFTypeRef cf = 0;
          uint64_t WritableWithCFMutableData = CMPhotoSampleBufferCopyIOSurfaceBacking(*(void *)(a1 + 264), (void *)(a1 + 248), &cf, &DataLength);
          if (WritableWithCFMutableData) {
            goto LABEL_13;
          }
          if (*v16)
          {
LABEL_100:
            if (a2) {
              *a2 = *(_DWORD *)(a1 + 240);
            }
            if (a3) {
              *a3 = DataLength;
            }
            if (a4)
            {
              uint64_t v13 = 0;
              *(void *)a4 = *(void *)(a1 + 248);
              *(void *)(a1 + 248) = 0;
              goto LABEL_107;
            }
            goto LABEL_106;
          }
        }
      }
    }
  }
  int v10 = *(_DWORD *)(a1 + 240);
LABEL_7:
  switch(v10)
  {
    case 1:
      if (!*(void *)(a1 + 248))
      {
        CFMutableDataRef Mutable = CFDataCreateMutable(v8, 0);
        *(void *)(a1 + 248) = Mutable;
        if (!Mutable)
        {
          uint64_t v13 = 4294950305;
          goto LABEL_107;
        }
      }
      uint64_t WritableWithCFMutableData = FigByteStreamCreateWritableWithCFMutableData();
      if (!WritableWithCFMutableData) {
        goto LABEL_57;
      }
      goto LABEL_13;
    case 2:
      if (!*(void *)(a1 + 248))
      {
        uint64_t WritableWithCFMutableData = CMBlockBufferCreateEmpty(v8, 0, 0, (CMBlockBufferRef *)(a1 + 248));
        if (WritableWithCFMutableData) {
          goto LABEL_13;
        }
      }
      uint64_t WritableWithCFMutableData = CMByteStreamCreateWritableForBlockBuffer();
      if (WritableWithCFMutableData) {
        goto LABEL_13;
      }
      goto LABEL_57;
    case 3:
      uint64_t WritableWithCFMutableData = CMByteStreamCreateForFileURL();
      if (WritableWithCFMutableData) {
        goto LABEL_13;
      }
      goto LABEL_57;
    case 4:
      if (*(void *)(a1 + 248)) {
        goto LABEL_56;
      }
      CFAllocatorRef v14 = *(opaqueCMSampleBuffer **)(a1 + 264);
      if (v14) {
        SampleCFNumberRef Size = CMSampleBufferGetSampleSize(v14, 0);
      }
      else {
        SampleCFNumberRef Size = 0;
      }
      CFAllocatorRef v17 = *(opaqueCMSampleBuffer **)(a1 + 280);
      if (v17) {
        size_t v18 = CMSampleBufferGetSampleSize(v17, 0);
      }
      else {
        size_t v18 = 0;
      }
      uint64_t v19 = 0;
      for (CFIndex i = 0; ; ++i)
      {
        CFArrayRef Count = *(const __CFArray **)(a1 + 312);
        if (Count) {
          CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
        }
        if (i >= (uint64_t)Count) {
          break;
        }
        CFDataRef ValueAtIndex = (CMSampleBufferRef *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 312), i);
        v19 += CMSampleBufferGetSampleSize(*ValueAtIndex, 0);
      }
      CFDataRef v23 = *(const __CFData **)(a1 + 288);
      if (v23) {
        CFIndex Length = CFDataGetLength(v23);
      }
      else {
        CFIndex Length = 0;
      }
      CFDataRef v25 = *(const __CFData **)(a1 + 344);
      if (v25) {
        CFIndex v26 = CFDataGetLength(v25);
      }
      else {
        CFIndex v26 = 0;
      }
      CFDataRef v27 = *(const __CFData **)(a1 + 352);
      if (v27) {
        CFDataRef v27 = (const __CFData *)CFDataGetLength(v27);
      }
      if (*(void *)(a1 + 256) <= (unint64_t)v27 + v26 + SampleSize + v18 + v19 + Length + 0x10000) {
        unint64_t v28 = (unint64_t)v27 + v26 + SampleSize + v18 + v19 + Length + 0x10000;
      }
      else {
        unint64_t v28 = *(void *)(a1 + 256);
      }
      uint64_t MemorySurface = CMPhotoSurfacePoolCreateMemorySurface(@"SurfacePoolOneShot", v28, 1, (IOSurfaceRef *)(a1 + 248));
      if (MemorySurface)
      {
        uint64_t v13 = MemorySurface;
        uint64_t v9 = (_DWORD *)MEMORY[0x1E4F1EBA8];
        goto LABEL_107;
      }
      IOSurfaceDecrementUseCount(*(IOSurfaceRef *)(a1 + 248));
      uint64_t v9 = (_DWORD *)MEMORY[0x1E4F1EBA8];
LABEL_56:
      uint64_t WritableWithCFMutableData = FigByteStreamCreateWritableWithIOSurface();
      if (WritableWithCFMutableData) {
        goto LABEL_13;
      }
LABEL_57:
      CFTypeRef v55 = 0;
      CFTypeRef cf = 0;
      CFMutableDictionaryRef theDict = 0;
      if (*(unsigned char *)(a1 + 376))
      {
        char v30 = *(opaqueCMSampleBuffer **)(a1 + 272);
        CFAllocatorRef v31 = v8;
        BOOL v32 = 0;
      }
      else
      {
        char v30 = *(opaqueCMSampleBuffer **)(a1 + 264);
        BOOL v32 = *(unsigned char *)(a1 + 304) == 0;
        CFAllocatorRef v31 = v8;
      }
      uint64_t v13 = CMPhotoDataCreateFromSampleBuffer(v31, v30, v32, (CFDataRef *)&cf);
      if (v13)
      {
        CFMutableDictionaryRef MutableCopy = 0;
        goto LABEL_91;
      }
      if (*(unsigned char *)(a1 + 376)
        || *(void *)(a1 + 280)
        || *(unsigned char *)(a1 + 320)
        || *(void *)(a1 + 288)
        || (CFArrayRef v45 = *(const __CFArray **)(a1 + 312)) != 0 && CFArrayGetCount(v45))
      {
        CFMutableDictionaryRef MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
        if (!MutableCopy)
        {
          uint64_t v13 = 4294950305;
          goto LABEL_91;
        }
        unint64_t v34 = *(opaqueCMSampleBuffer **)(a1 + 280);
        if (!v34
          || (uint64_t v35 = CMPhotoDataCreateFromSampleBuffer(v8, v34, *(unsigned char *)(a1 + 305) == 0, (CFDataRef *)&v55),
              !v35))
        {
          CFDataRef v36 = *(const __CFData **)(a1 + 336);
          if (*(_OWORD *)(a1 + 328) == 0)
          {
            if (!*(void *)(a1 + 344) && !*(void *)(a1 + 352))
            {
              int v44 = *(const void **)(a1 + 288);
              if (v44) {
                CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E4F2F420], v44);
              }
LABEL_82:
              uint64_t v13 = CMPhotoJFIFUtilitiesMergeImageComponents(v8, 0, (int)cf, (int)v55, *(CFArrayRef *)(a1 + 312), MutableCopy);
              if (v13) {
                goto LABEL_91;
              }
              goto LABEL_83;
            }
            CFDataRef v36 = 0;
          }
          uint64_t v35 = CMPhotoCreateImagePropertiesFromData(v8, 0, 0, *(void *)(a1 + 328), v36, 0, *(const void **)(a1 + 288), 0, &theDict);
          if (!v35)
          {
            long long v37 = *(const void **)(a1 + 352);
            if (v37) {
              CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E4F2FB50], v37);
            }
            unsigned int v38 = *(const void **)(a1 + 344);
            if (v38) {
              CFDictionarySetValue(theDict, @"iOS_Debug", v38);
            }
            if (!*(void *)(a1 + 328))
            {
              LODWORD(v52) = 1;
              int v39 = (const void *)*MEMORY[0x1E4F2FCA0];
              CMPhotoCFDictionaryGetIntIfPresent(MutableCopy, (const void *)*MEMORY[0x1E4F2FCA0], &v52);
              int v53 = 1;
              CMPhotoCFDictionaryGetIntIfPresent(theDict, v39, &v53);
              if (v52 != 1 && v53 != v52) {
                CMPhotoCFDictionarySetInt(theDict, v39, v52);
              }
            }
            uint64_t v35 = CMPhotoMergeDictionaryEntries((uint64_t)v8, (uint64_t)MutableCopy, theDict, 1u);
            if (!v35) {
              goto LABEL_82;
            }
          }
        }
LABEL_116:
        uint64_t v13 = v35;
        goto LABEL_91;
      }
      BytePtr = CFDataGetBytePtr((CFDataRef)cf);
      CFIndex v47 = CFDataGetLength((CFDataRef)cf);
      uint64_t v13 = CMByteStreamWrite(0, v47, (uint64_t)BytePtr);
      CFMutableDictionaryRef MutableCopy = 0;
      if (v13) {
        goto LABEL_91;
      }
LABEL_83:
      size_t v52 = 0;
      uint64_t v40 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v40) {
        uint64_t v41 = v40;
      }
      else {
        uint64_t v41 = 0;
      }
      int v42 = *(uint64_t (**)(void, void, size_t *))(v41 + 24);
      if (!v42)
      {
        uint64_t v13 = 4294954514;
        goto LABEL_91;
      }
      uint64_t v35 = v42(0, 0, &v52);
      if (v35) {
        goto LABEL_116;
      }
      if ((v52 & 0x8000000000000000) != 0)
      {
        uint64_t v13 = 4294950190;
      }
      else
      {
        uint64_t v13 = 0;
        DataCFIndex Length = v52;
      }
LABEL_91:
      if (cf) {
        CFRelease(cf);
      }
      if (v55) {
        CFRelease(v55);
      }
      if (MutableCopy) {
        CFRelease(MutableCopy);
      }
      if (theDict) {
        CFRelease(theDict);
      }
      if (!v13) {
        goto LABEL_100;
      }
LABEL_107:
      _releaseAllContainerResources(a1);
      if (*v9 == 1) {
        kdebug_trace();
      }
      return v13;
    default:
      uint64_t WritableWithCFMutableData = FigSignalErrorAt();
      goto LABEL_13;
  }
}

uint64_t _closeContainerAndCopyBacking_0(uint64_t a1, _DWORD *a2, void *a3, void *a4)
{
  CFAllocatorRef v8 = (uint64_t *)(a1 + 88);
  uint64_t v9 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  uint64_t v10 = (uint64_t)_finishAsyncEncoding((void *)a1);
  if (!v10)
  {
    uint64_t v10 = _copyMainAndAuxImageSamplesIfNeeded(a1);
    if (!v10) {
      uint64_t v10 = CMPhotoHEIFFileWriterCloseAndCopyBacking(*v8, a2, a3, a4);
    }
  }
  uint64_t v11 = v10;
  *(unsigned char *)(a1 + 104) = 0;
  CMPhotoHEIFFileWriterDispose(*(const void ***)(a1 + 88));
  *(void *)(a1 + 88) = 0;
  if (*v9 == 1) {
    kdebug_trace();
  }
  return v11;
}

void _releaseAllContainerResources(uint64_t a1)
{
  CFTypeID v2 = *(const void **)(a1 + 264);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 264) = 0;
  }
  int v3 = *(const void **)(a1 + 272);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 272) = 0;
  }
  uint64_t v4 = *(const void **)(a1 + 280);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 280) = 0;
  }
  uint64_t v5 = *(const void **)(a1 + 288);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 288) = 0;
  }
  CFTypeID v6 = *(const void **)(a1 + 296);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 296) = 0;
  }
  *(_WORD *)(a1 + 304) = 0;
  _releaseAuxImages(a1 + 240);
  double v7 = *(const void **)(a1 + 328);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(a1 + 328) = 0;
  }
  CFAllocatorRef v8 = *(const void **)(a1 + 336);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 336) = 0;
  }
  uint64_t v9 = *(const void **)(a1 + 344);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a1 + 344) = 0;
  }
  uint64_t v10 = *(const void **)(a1 + 352);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(a1 + 352) = 0;
  }
  uint64_t v11 = *(const void **)(a1 + 360);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(a1 + 360) = 0;
  }
  *(unsigned char *)(a1 + 320) = 0;
  *(unsigned char *)(a1 + 376) = 0;
  unint64_t v12 = *(const void **)(a1 + 248);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(a1 + 248) = 0;
  }
  *(_DWORD *)(a1 + 240) = 0;
  *(void *)(a1 + 256) = 0;
}

void _releaseAuxImages(uint64_t a1)
{
  CFArrayRef v1 = *(const __CFArray **)(a1 + 72);
  if (v1)
  {
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 72));
    if (Count >= 1)
    {
      CFIndex v4 = Count;
      for (CFIndex i = 0; i != v4; ++i)
      {
        CFDataRef ValueAtIndex = (const void **)CFArrayGetValueAtIndex(v1, i);
        CMPhotoCompressedAuxImageStorageDestroy(ValueAtIndex);
      }
    }
    double v7 = *(const void **)(a1 + 72);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(a1 + 72) = 0;
    }
  }
}

uint64_t RegisterCMPhotoDecompressionTileIterator()
{
  sCMPhotoDecompressionTileIteratorClass = 0;
  *(void *)algn_1EB3D21F8 = "CMPhotoDecompressionTileIterator";
  qword_1EB3D2200 = (uint64_t)CMPhotoDecompressionTileIteratorClass_Init;
  unk_1EB3D2208 = 0;
  qword_1EB3D2218 = 0;
  unk_1EB3D2220 = 0;
  qword_1EB3D2210 = (uint64_t)CMPhotoDecompressionTileIteratorClass_Finalize;
  qword_1EB3D2228 = (uint64_t)CMPhotoDecompressionTileIteratorClass_CopyFormattingDesc;
  unk_1EB3D2230 = 0;
  uint64_t result = _CFRuntimeRegisterClass();
  sCMPhotoDecompressionTileIteratorCFTypeID TypeID = result;
  return result;
}

double CMPhotoCompressionSessionClass_Init(_OWORD *a1)
{
  double result = 0.0;
  a1[23] = 0u;
  a1[24] = 0u;
  a1[21] = 0u;
  a1[22] = 0u;
  a1[19] = 0u;
  a1[20] = 0u;
  a1[17] = 0u;
  a1[18] = 0u;
  a1[15] = 0u;
  a1[16] = 0u;
  a1[13] = 0u;
  a1[14] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

uint64_t RegisterCMPhotoCodecSessionPool()
{
  sCMPhotoCodecSessionPoolClass = 0;
  unk_1EB3D2290 = "CMPhotoCodecSessionPool";
  qword_1EB3D2298 = (uint64_t)CMPhotoCodecSessionPoolClass_Init;
  unk_1EB3D22A0 = 0;
  qword_1EB3D22B0 = 0;
  unk_1EB3D22B8 = 0;
  qword_1EB3D22A8 = (uint64_t)CMPhotoCodecSessionPoolClass_Finalize;
  qword_1EB3D22C0 = (uint64_t)CMPhotoCodecSessionPoolClass_CopyFormattingDesc;
  qword_1EB3D22C8 = (uint64_t)CMPhotoCodecSessionPool_CopyDebugDesc;
  uint64_t result = _CFRuntimeRegisterClass();
  sCMPhotoCodecSessionPoolCFTypeID TypeID = result;
  return result;
}

void ___canvasItemDecodeCallback_block_invoke(uint64_t a1)
{
  CFTypeID v2 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v5 = *(void *)(v4 + 32);
  int v6 = *(unsigned __int8 *)(v4 + 49);
  char v7 = *(unsigned char *)(v4 + 50);
  char v8 = *(unsigned char *)(v4 + 51);
  char v9 = *(unsigned char *)(v4 + 52);
  unsigned __int8 v10 = *(unsigned char *)(v4 + 48);
  uint64_t v11 = *(unsigned int *)(v4 + 88);
  unint64_t v12 = *(__CVBuffer **)(a1 + 56);
  LODWORD(v4) = *(_DWORD *)(v3 + 184);
  uint64_t v13 = *(__CVBuffer **)v3;
  uint64_t v14 = *(unsigned int *)(a1 + 64);
  long long v15 = *(_OWORD *)(v3 + 160);
  v25[6] = *(_OWORD *)(v3 + 144);
  v25[7] = v15;
  uint64_t v26 = *(void *)(v3 + 176);
  long long v16 = *(_OWORD *)(v3 + 96);
  v25[2] = *(_OWORD *)(v3 + 80);
  v25[3] = v16;
  long long v17 = *(_OWORD *)(v3 + 128);
  void v25[4] = *(_OWORD *)(v3 + 112);
  v25[5] = v17;
  long long v18 = *(_OWORD *)(v3 + 64);
  v25[0] = *(_OWORD *)(v3 + 48);
  v25[1] = v18;
  long long v19 = *(_OWORD *)(v3 + 24);
  v24[0] = *(_OWORD *)(v3 + 8);
  v24[1] = v19;
  int v20 = _transferToCanvas(v5, v6, v7, v8, v9, v10, v11, v12, (uint64_t)v25, v4, (unint64_t *)v24, v13, 0, v14);
  uint64_t v21 = *(void **)(a1 + 48);
  uint64_t v22 = (const void *)v21[26];
  if (v22)
  {
    CFRelease(v22);
    *(void *)(*(void *)(a1 + 48) + 208) = 0;
    uint64_t v21 = *(void **)(a1 + 48);
  }
  CFDataRef v23 = (const void *)v21[27];
  if (v23)
  {
    CFRelease(v23);
    *(void *)(*(void *)(a1 + 48) + 216) = 0;
    uint64_t v21 = *(void **)(a1 + 48);
  }
  _asyncCanvasDecodeFinished(*(void *)(a1 + 40), v21, v20, *(unsigned __int8 *)(a1 + 68));
  if (*v2 == 1)
  {
    kdebug_trace();
  }
}

uint64_t CMPhotoJPEGQualityControllerParse(int a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, CFTypeRef cf, int a7, _OWORD *a8)
{
  long long v58 = 0u;
  long long v59 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  if (a8)
  {
    *(void *)&long long v54 = a2;
    *((void *)&v54 + 1) = a3;
    *(void *)&long long v55 = __PAIR64__(a5, a4);
    if (cf) {
      CFTypeRef v15 = CFRetain(cf);
    }
    else {
      CFTypeRef v15 = 0;
    }
    *((void *)&v57 + 1) = v15;
    uint64_t v16 = 4294950196;
    switch(a5)
    {
      case 2u:
        if (!v15) {
          goto LABEL_64;
        }
        CFTypeID v17 = CFGetTypeID(v15);
        if (v17 == CFDataGetTypeID())
        {
          long long v18 = malloc_type_malloc(0x40uLL, 0x1000040FA0F61DDuLL);
          *((void *)&v59 + 1) = v18;
          if (v18)
          {
            long long v19 = v18;
            *((void *)&v58 + 1) = v18;
            *(void *)&long long v59 = v18;
            *(void *)&long long v58 = v18;
            int v20 = v15;
            uint64_t v21 = v19;
            goto LABEL_10;
          }
          goto LABEL_72;
        }
        CFTypeID v42 = CFGetTypeID(v15);
        if (v42 == CFArrayGetTypeID()
          && (CFIndex Count = CFArrayGetCount((CFArrayRef)v15), (Count & 0xFFFFFFFFFFFFFFFELL) == 2))
        {
          CFIndex v44 = Count;
          CFArrayRef v45 = malloc_type_malloc(Count << 6, 0x1000040FA0F61DDuLL);
          *((void *)&v59 + 1) = v45;
          if (!v45)
          {
LABEL_72:
            uint64_t v16 = 4294950305;
            break;
          }
          long long v19 = v45;
          double v46 = v45 + 4;
          *(void *)&long long v58 = v45;
          *((void *)&v58 + 1) = v45 + 4;
          unint64_t v47 = (unint64_t)&v45[4 * (unint64_t)(v44 == 3) + 4];
          *(void *)&long long v59 = v47;
          CFDataRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v15, 0);
          uint64_t v22 = _copyQTableFromData(ValueAtIndex, v19);
          if (!v22)
          {
            float v49 = CFArrayGetValueAtIndex((CFArrayRef)v15, 1);
            uint64_t v22 = _copyQTableFromData(v49, v46);
            if (!v22)
            {
              if (v44 != 3) {
                goto LABEL_11;
              }
              int v20 = CFArrayGetValueAtIndex((CFArrayRef)v15, 2);
              uint64_t v21 = (_OWORD *)v47;
LABEL_10:
              uint64_t v22 = _copyQTableFromData(v20, v21);
              if (!v22)
              {
LABEL_11:
                uint64_t v23 = 0;
                float v24 = 0.8944;
                do
                {
                  if (*((unsigned char *)v19 + v23) != 1) {
                    goto LABEL_15;
                  }
                  ++v23;
                }
                while (v23 != 64);
                float v24 = 0.9944;
LABEL_15:
                *(float *)&long long v57 = v24;
                unint64_t v25 = 2 * a3 * a2;
                unint64_t v26 = v25 / 3;
                double v27 = v24;
                BOOL v28 = a4 != 1 && v27 < 0.9944;
                goto LABEL_33;
              }
            }
          }
        }
        else
        {
LABEL_64:
          uint64_t v22 = FigSignalErrorAt();
          if (!v22) {
            goto LABEL_65;
          }
        }
        uint64_t v16 = v22;
        break;
      case 3u:
        if (!v15) {
          goto LABEL_54;
        }
        CFTypeID v29 = CFGetTypeID(v15);
        if (v29 != CFDictionaryGetTypeID()) {
          goto LABEL_54;
        }
        LODWORD(valuePtr) = 0;
        if (!CMPhotoCFDictionaryGetFloatIfPresent((CFDictionaryRef)v15, @"QualityValue", &valuePtr)) {
          goto LABEL_54;
        }
        float v30 = *(float *)&valuePtr;
        goto LABEL_53;
      case 4u:
        if (!v15
          || (CFTypeID v31 = CFGetTypeID(v15), v31 != CFNumberGetTypeID())
          || CFNumberIsFloatType((CFNumberRef)v15)
          || (LODWORD(valuePtr) = 0, !CFNumberGetValue((CFNumberRef)v15, kCFNumberSInt32Type, &valuePtr))
          || valuePtr >= 6)
        {
LABEL_54:
          uint64_t v41 = FigSignalErrorAt();
          goto LABEL_55;
        }
        float v32 = flt_1AB9E2B78[(int)valuePtr];
        *(void *)&long long v58 = *(&off_1E5E2E8A0 + (int)valuePtr);
        *((void *)&v58 + 1) = v58 + 64;
        long long v59 = (unint64_t)(v58 + 64);
        *(float *)&long long v57 = v32;
        unint64_t v25 = 2 * a3 * a2;
        unint64_t v26 = v25 / 3;
        double v33 = v32;
        BOOL v28 = a4 != 1 && v33 <= 0.9 || v33 < 0.9944;
LABEL_33:
        if (v28) {
          unint64_t v25 = v26;
        }
        *(void *)&long long v56 = v25;
        BYTE8(v55) = 0;
        goto LABEL_65;
      case 5u:
        BYTE8(v55) = 1;
        *(void *)&long long v56 = 0;
        goto LABEL_65;
      case 0xAu:
        float v62 = 0.85;
        unint64_t valuePtr = 0;
        unint64_t v60 = 0;
        if (!cf) {
          goto LABEL_67;
        }
        CFTypeID v35 = CFGetTypeID(cf);
        if (v35 != CFDictionaryGetTypeID()
          || !CMPhotoCFDictionaryGetSizeIfPresent((const __CFDictionary *)cf, @"ByteBudget", &v60))
        {
          goto LABEL_67;
        }
        CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)cf, @"ByteBudgetHint");
        if (!Value)
        {
          unint64_t v39 = v60;
          float v30 = 0.85;
LABEL_52:
          *((void *)&v56 + 1) = v39;
          goto LABEL_53;
        }
        CFDictionaryRef v37 = Value;
        CFTypeID v38 = CFGetTypeID(Value);
        if (v38 == CFDictionaryGetTypeID())
        {
          if (CMPhotoCFDictionaryGetSizeIfPresent(v37, @"ByteBudgetHint_Size", &valuePtr))
          {
            if (CMPhotoCFDictionaryGetFloatIfPresent(v37, @"ByteBudgetHint_Quality", &v62))
            {
              float v30 = v62;
              if (v62 > 0.0 && v62 <= 1.0)
              {
                unint64_t v39 = v60;
                if (v60 >= valuePtr)
                {
                  if (a7 == 2) {
                    uint64_t v40 = &_relativeSizeHW;
                  }
                  else {
                    uint64_t v40 = &_relativeSizeSW;
                  }
                  float v30 = _estimateNewQuality(valuePtr, v60, (uint64_t)v40, 0, v62);
                }
                goto LABEL_52;
              }
            }
          }
        }
LABEL_67:
        uint64_t v16 = FigSignalErrorAt();
        float v30 = v62;
        *((void *)&v56 + 1) = v60;
        if (v16) {
          break;
        }
LABEL_53:
        uint64_t v41 = _parseQualityParameters_QValue_float((uint64_t)&v54, v30);
LABEL_55:
        uint64_t v16 = v41;
        if (!v41)
        {
LABEL_65:
          uint64_t v16 = 0;
          long long v50 = v57;
          a8[2] = v56;
          a8[3] = v50;
          long long v51 = v59;
          a8[4] = v58;
          a8[5] = v51;
          long long v52 = v55;
          *a8 = v54;
          a8[1] = v52;
          long long v54 = 0u;
          long long v55 = 0u;
          long long v56 = 0u;
          long long v57 = 0u;
          long long v58 = 0u;
          long long v59 = 0u;
        }
        break;
      default:
        break;
    }
  }
  else
  {
    uint64_t v16 = 4294950306;
  }
  CMPhotoJPEGQualitySettingsReleaseStorage(&v54);
  return v16;
}

uint64_t _parseQualityParameters_QValue_float(uint64_t a1, float a2)
{
  uint64_t result = _copyJPEGQTablesForQValue(a1 + 64, a2);
  if (!result)
  {
    *(float *)(a1 + 48) = a2;
    unint64_t v5 = 2 * *(void *)(a1 + 8) * *(void *)a1;
    double v6 = a2;
    if (*(_DWORD *)(a1 + 16) != 1 && v6 <= 0.9 || v6 < 0.9944) {
      v5 /= 3uLL;
    }
    *(void *)(a1 + 32) = v5;
    *(unsigned char *)(a1 + 24) = 0;
  }
  return result;
}

uint64_t _copyJPEGQTablesForQValue(uint64_t a1, float a2)
{
  if (a2 < 0.0 || a2 > 1.0)
  {
    return FigSignalErrorAt();
  }
  else
  {
    unint64_t v5 = (__n128 *)malloc_type_malloc(0x80uLL, 0x1000040FA0F61DDuLL);
    *(void *)(a1 + 24) = v5;
    if (v5)
    {
      *(void *)(a1 + 8) = v5 + 4;
      *(void *)(a1 + 16) = v5 + 4;
      *(void *)a1 = v5;
      _copyQTableForQValue(0, v5, a2);
      _copyQTableForQValue(1u, *(__n128 **)(a1 + 8), a2);
      return 0;
    }
    else
    {
      return 4294950305;
    }
  }
}

float32x4_t _copyQTableForQValue(unsigned int a1, __n128 *a2, float a3)
{
  double v3 = a3;
  if (v3 >= 0.9944)
  {
    result.i64[0] = 0x101010101010101;
    result.i64[1] = 0x101010101010101;
    a2[2] = (__n128)result;
    a2[3] = (__n128)result;
    *a2 = (__n128)result;
    a2[1] = (__n128)result;
  }
  else
  {
    uint64_t v4 = 0;
    double v5 = v3 * 32.0 * v3 * v3 + 1.0;
    float32x4_t result = (float32x4_t)vdupq_n_s32(0x42C80000u);
    float v7 = 200.0 / v5;
    v8.i64[0] = 0x3F0000003F000000;
    v8.i64[1] = 0x3F0000003F000000;
    v9.i64[0] = 0x101010101010101;
    v9.i64[1] = 0x101010101010101;
    do
    {
      int8x16_t v10 = _QTable_ImageIOBase[4 * (unint64_t)a1 + v4];
      uint64_t v11 = *(void *)&vzip2_s8(*(int8x8_t *)v10.i8, *(int8x8_t *)result.f32) & 0xFF00FF00FF00FFLL;
      uint64_t v12 = *(void *)&vzip1_s8(*(int8x8_t *)v10.i8, *(int8x8_t *)result.f32) & 0xFF00FF00FF00FFLL;
      v10.i64[0] = vextq_s8(v10, v10, 8uLL).u64[0];
      uint64_t v13 = *(void *)&vzip2_s8(*(int8x8_t *)v10.i8, *(int8x8_t *)result.f32) & 0xFF00FF00FF00FFLL;
      *(int16x4_t *)v14.i8 = vmovn_s32(vcvtq_s32_f32(vaddq_f32(vdivq_f32(vmulq_n_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)v12)), v7), result), v8)));
      v14.u64[1] = (unint64_t)vmovn_s32(vcvtq_s32_f32(vaddq_f32(vdivq_f32(vmulq_n_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)v11)), v7), result), v8)));
      *(int16x4_t *)v10.i8 = vmovn_s32(vcvtq_s32_f32(vaddq_f32(vdivq_f32(vmulq_n_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)(*(void *)&vzip1_s8(*(int8x8_t *)v10.i8, *(int8x8_t *)result.f32) & 0xFF00FF00FF00FFLL))), v7), result), v8)));
      v10.u64[1] = (unint64_t)vmovn_s32(vcvtq_s32_f32(vaddq_f32(vdivq_f32(vmulq_n_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)v13)), v7), result), v8)));
      a2[v4++] = (__n128)vmaxq_u8((uint8x16_t)vuzp1q_s8(v14, v10), v9);
    }
    while (v4 != 4);
  }
  return result;
}

uint64_t CMPhotoUnifiedJPEGEncoderEncode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, CMSampleBufferRef *a10)
{
  long long v10 = a5[1];
  v12[0] = *a5;
  v12[1] = v10;
  return _encodeBuffer(a1, a2, a3, a4, (uint64_t)v12, a6, a7, a8, 0, CMPhotoRectZero_0, a9, a10, 0);
}

uint64_t _encodeBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, unint64_t *a10, uint64_t a11, CMSampleBufferRef *a12, __CFData *a13)
{
  uint64_t v13 = MEMORY[0x1F4188790](a1);
  unsigned int v178 = v18;
  int v168 = v20;
  int v169 = v19;
  CMSampleBufferRef sbuf = 0;
  long long v190 = 0u;
  long long v191 = 0u;
  long long v188 = 0u;
  long long v189 = 0u;
  long long v186 = 0u;
  long long v187 = 0u;
  long long v184 = 0u;
  memset(bytes, 0, 120);
  *(_OWORD *)char v182 = 0u;
  memset(v183, 0, sizeof(v183));
  long long v181 = 0u;
  if ((a12 == 0) == (a13 != 0))
  {
    uint64_t v21 = v17;
    int v22 = v16;
    uint64_t v23 = v15;
    CFDictionaryRef v24 = v14;
    uint64_t v180 = v13;
    if (*MEMORY[0x1E4F1EBA8] == 1) {
      kdebug_trace();
    }
    uint64_t v25 = *v21;
    uint64_t v26 = v21[1];
    uint64_t v27 = v21[2];
    uint64_t v28 = v21[3];
    unint64_t v30 = *a10;
    unint64_t v29 = a10[1];
    uint64_t v172 = v27;
    long long v174 = *((_OWORD *)a10 + 1);
    signed int PixelFormatType = CVPixelBufferGetPixelFormatType(v23);
    if (PixelFormatType <= 1717855599)
    {
      if (((PixelFormatType - 1278226488) > 0x30
         || ((1 << (PixelFormatType - 56)) & 0x1400000000001) == 0)
        && ((PixelFormatType - 1278226736) > 6 || ((1 << (PixelFormatType - 48)) & 0x45) == 0))
      {
LABEL_18:
        *(void *)&v182[2] = a11;
        WORD2(v181) = 257;
        LODWORD(v183[0]) = -1;
        v182[0] = v169;
        LODWORD(v181) = v178;
        *((void *)&v181 + 1) = 0x10000000101;
        unint64_t v177 = v23;
        int v165 = v22;
        if (v24)
        {
          CMPhotoCFDictionaryGetBooleanIfPresent(v24, @"IncreaseRoundingPoint", (unsigned char *)((unint64_t)&v181 | 0xD));
          CMPhotoCFDictionaryGetBooleanIfPresent(v24, @"ForceHighSpeed", (unsigned char *)&v181 + 8);
          CMPhotoCFDictionaryGetBooleanIfPresent(v24, @"DisableMSRForTransfer", (unsigned char *)((unint64_t)&v181 | 0xA));
          CMPhotoCFDictionaryGetBooleanIfPresent(v24, @"DisableGPUForTransfer", (unsigned char *)((unint64_t)&v181 | 0xC));
          CMPhotoCFDictionaryGetBooleanIfPresent(v24, @"AllowPixelTransfer", (unsigned char *)((unint64_t)&v181 | 9));
          CMPhotoCFDictionaryGetBooleanIfPresent(v24, @"PoolCompressedSurfaces", (unsigned char *)((unint64_t)&v181 | 0xE));
          CMPhotoCFDictionaryGetBooleanIfPresent(v24, @"LogJPEGBufferOverruns", (unsigned char *)((unint64_t)&v181 | 0xF));
        }
        uint64_t v33 = v172;
        if (v30 | v29 || v174 != 0)
        {
          if (v25 | v26 || v172 | v28)
          {
            if (v172 != (void)v174) {
              goto LABEL_68;
            }
            uint64_t v34 = v172;
            uint64_t v35 = v28;
            if (v28 != *((void *)&v174 + 1)) {
              goto LABEL_68;
            }
          }
          else
          {
            CMPhotoGetPixelBufferCLAPAsRect(v23);
            uint64_t v35 = *((void *)&v174 + 1);
            uint64_t v34 = v174;
            if (v174 != __PAIR128__(vcvtad_u64_f64(v37), vcvtad_u64_f64(v36)))
            {
LABEL_68:
              uint64_t Capabilities = FigSignalErrorAt();
              uint64_t v63 = v180;
              goto LABEL_128;
            }
            uint64_t v33 = v172;
          }
          unint64_t v38 = 0;
          unint64_t v39 = v35 + v29;
          if ((unint64_t)a9 >= v34 + v30) {
            unint64_t v40 = v34 + v30;
          }
          else {
            unint64_t v40 = a9;
          }
          if (*((void *)&a9 + 1) >= v39) {
            unint64_t v41 = v35 + v29;
          }
          else {
            unint64_t v41 = *((void *)&a9 + 1);
          }
          unint64_t v42 = v40 - v30;
          if (v40 <= v30)
          {
            unint64_t v43 = 0;
            unint64_t v44 = 0;
            unint64_t v45 = 0;
          }
          else
          {
            unint64_t v43 = 0;
            unint64_t v44 = 0;
            unint64_t v45 = 0;
            BOOL v46 = v41 > v29;
            unint64_t v47 = v41 - v29;
            if (v46)
            {
              unint64_t v38 = v47;
              unint64_t v43 = v42;
              unint64_t v44 = v29;
              unint64_t v45 = v30;
            }
          }
          if (v30 != v45 || v29 != v44 || v34 != v43 || v35 != v38) {
            goto LABEL_68;
          }
          BYTE4(v181) = (v30 | v29) == 0;
          BOOL v48 = v34 + v30 == (void)a9 && v39 == *((void *)&a9 + 1);
          char v49 = v48;
          BYTE5(v181) = v49;
          if (v30 | v29)
          {
            BOOL v51 = v178 == 5 || v178 == 2;
            int v52 = v51;
            uint64_t v53 = 7;
            if (v51) {
              uint64_t v53 = 15;
            }
            if ((v53 & v29) != 0) {
              goto LABEL_68;
            }
            char v50 = 0;
            BOOL v48 = v52 == 0;
            char v54 = 3;
            if (!v48) {
              char v54 = 4;
            }
            LODWORD(v183[0]) = (v29 >> v54) - 1;
          }
          else
          {
            char v50 = v49 ^ 1;
          }
          BYTE7(v181) = v50;
        }
        int v55 = v22;
        if (v25 | v26 || v33 | v28)
        {
          *((void *)&v183[2] + 1) = v25;
          *(void *)&long long v184 = v26;
          *((void *)&v184 + 1) = v33;
          *(void *)&bytes[0] = v28;
          uint64_t v56 = v26;
          uint64_t v57 = v25;
          uint64_t v58 = v33;
          *((void *)&v183[0] + 1) = vcvtad_u64_f64(CMPhotoGetPixelBufferCLAPAsRect(v23));
          *(void *)&v183[1] = vcvtad_u64_f64(v59);
          *((void *)&v183[1] + 1) = vcvtad_u64_f64(v60);
          *(void *)&v183[2] = vcvtad_u64_f64(v61);
          *(void *)int v207 = v57;
          uint64_t v208 = v56;
          *(void *)&long long v209 = v58;
          *((void *)&v209 + 1) = v28;
          CMPhotoApplyCropCMPhotoRectToRect((void *)v183 + 1, (unint64_t *)v207);
        }
        else
        {
          double PixelBufferCLAPAsRect = CMPhotoGetPixelBufferCLAPAsRect(v23);
          unint64_t v68 = vcvtad_u64_f64(v67);
          *((void *)&v183[0] + 1) = vcvtad_u64_f64(PixelBufferCLAPAsRect);
          *(void *)&v183[1] = vcvtad_u64_f64(v65);
          *((void *)&v183[1] + 1) = vcvtad_u64_f64(v66);
          v183[2] = v68;
          *(void *)&long long v184 = 0;
          *((void *)&v184 + 1) = *((void *)&v183[1] + 1);
          *(void *)&bytes[0] = v68;
        }
        uint64_t v63 = v180;
        if (a9 == 0) {
          *(_OWORD *)((char *)bytes + 8) = *(_OWORD *)((char *)&v183[1] + 8);
        }
        else {
          *(_OWORD *)((char *)bytes + 8) = a9;
        }
        int v22 = v55;
        v207[0] = 4;
        if (v24 && CMPhotoCFDictionaryGetIntIfPresent(v24, @"QualityControllerType", v207))
        {
          CFDictionaryRef Value = CFDictionaryGetValue(v24, @"QualityControllerParameters");
          if (!Value)
          {
            long long v72 = 0;
LABEL_82:
            uint64_t v73 = CMPhotoJPEGQualityControllerParse(*(void *)v180, *((uint64_t *)&v184 + 1), *(uint64_t *)&bytes[0], v178, v207[0], v72, v168, (_OWORD *)((char *)&bytes[1] + 8));
            if (!v73)
            {
              int v74 = LOBYTE(bytes[3]);
              int v75 = v168;
              if (!LOBYTE(bytes[3]))
              {
LABEL_86:
                if (!BYTE4(v181))
                {
                  uint64_t Capabilities = 0;
LABEL_117:
                  if (v55 || v75 == 1)
                  {
                    BYTE6(v181) = 0;
                  }
                  else
                  {
                    if (v75)
                    {
                      char v86 = 1;
                    }
                    else
                    {
                      if (_isHWAvailableHelper_onceToken_0 != -1) {
                        dispatch_once(&_isHWAvailableHelper_onceToken_0, &__block_literal_global_15);
                      }
                      char v86 = _isHWAvailableHelper_sHWAvailable_0;
                    }
                    BYTE6(v181) = v86;
                  }
                  goto LABEL_126;
                }
                int v76 = (_OWORD *)(v180 + 32);
                CGDataProviderRef v77 = *(void **)(v180 + 64);
                if (v77)
                {
                  *(void *)(v180 + 64) = 0;
                  free(v77);
                  int v74 = LOBYTE(bytes[3]);
                }
                *(void *)(v180 + 64) = 0;
                *int v76 = 0u;
                *(_OWORD *)(v180 + 48) = 0u;
                char v79 = *(void *)&bytes[1] * *((void *)&bytes[0] + 1) > 0x2DC6BFuLL && v74 == 0;
                *(unsigned char *)int v76 = v79;
                if (v75 == 1)
                {
                  uint64_t Capabilities = 0;
                }
                else
                {
                  if (_isHWAvailableHelper_onceToken_0 != -1) {
                    dispatch_once(&_isHWAvailableHelper_onceToken_0, &__block_literal_global_15);
                  }
                  LOBYTE(lengthAtOffsetOut[0]) = 0;
                  if (_isHWAvailableHelper_sIsParavirtualized_0)
                  {
                    uint64_t Capabilities = CMPhotoParavirtualizedGuestJPEGHardwareGetCapabilities(0, 0, 0, 0, lengthAtOffsetOut, 0);
                    if (Capabilities) {
                      char v80 = 0;
                    }
                    else {
                      char v80 = lengthAtOffsetOut[0];
                    }
                  }
                  else
                  {
                    char v80 = JPEGDeviceInterface_supportsRSTLogging();
                    uint64_t Capabilities = 0;
                  }
                  char v79 = *(unsigned char *)v76 & v80;
                  *(unsigned char *)int v76 = v79;
                }
                if (!v79) {
                  goto LABEL_117;
                }
                BOOL v81 = v178 == 5 || v178 == 2;
                uint64_t v82 = 8;
                if (v81) {
                  uint64_t v82 = 16;
                }
                char v83 = 3;
                if (v81) {
                  char v83 = 4;
                }
                unint64_t v84 = (*(void *)&bytes[1] + v82 + ~((*(void *)&bytes[1] - 1) & (unint64_t)(v82 - 1))) >> v83;
                *(void *)(v180 + 56) = v84 - 1;
                if (v84 == 1)
                {
                  uint64_t Capabilities = 4294950304;
                }
                else
                {
                  uint64_t v85 = malloc_type_calloc(v84 - 1, 4uLL, 0x100004052888210uLL);
                  *(void *)(v180 + 64) = v85;
                  if (v85) {
                    goto LABEL_117;
                  }
                  uint64_t Capabilities = 4294950305;
                }
LABEL_126:
                if (v72) {
                  CFRelease(v72);
                }
LABEL_128:
                if (*MEMORY[0x1E4F1EBA8] == 1) {
                  kdebug_trace();
                }
                if (Capabilities) {
                  goto LABEL_373;
                }
                if (v169 == 1 && *(void *)&bytes[4]) {
                  goto LABEL_371;
                }
                CVPixelBufferGetPixelFormatType(v23);
                CMPhotoGetPixelBufferSize(v23);
                if (!BYTE6(v181)) {
                  goto LABEL_334;
                }
                if (*MEMORY[0x1E4F1EBA8] == 1) {
                  kdebug_trace();
                }
                unsigned int v202 = 0;
                dataPointerOut = 0;
                v220[0] = 0;
                long long v200 = 0u;
                long long v201 = 0u;
                long long v198 = 0u;
                long long v199 = 0u;
                long long v196 = 0u;
                long long v197 = 0u;
                CVPixelBufferRef pixelBuffer = 0;
                char v194 = 0;
                if (_isHWAvailableHelper_onceToken_0 != -1) {
                  dispatch_once(&_isHWAvailableHelper_onceToken_0, &__block_literal_global_15);
                }
                if (_isHWAvailableHelper_sHWAvailable_0)
                {
                  int v171 = _isHWAvailableHelper_sIsParavirtualized_0;
                  mach_port_t v167 = *(_DWORD *)(v63 + 24);
                  if (v167 | _isHWAvailableHelper_sIsParavirtualized_0)
                  {
                    mach_port_t v87 = 0;
                    goto LABEL_142;
                  }
                  mach_port_t v87 = JPEGDeviceInterface_openDriverConnection();
                  mach_port_t v167 = v87;
                  if (v87)
                  {
LABEL_142:
                    mach_port_t v164 = v87;
                    *(void *)unint64_t v179 = *((void *)&v183[0] + 1);
                    unint64_t v175 = *((void *)&v183[1] + 1);
                    unint64_t v176 = *(void *)&v183[1];
                    unint64_t v173 = *(void *)&v183[2];
                    uint64_t v88 = CVPixelBufferGetPixelFormatType(v23);
                    char v193 = 0;
                    BOOL IsNon601YCbCr = CMPhotoPixelBufferIsNon601YCbCr(v23, &v193);
                    unsigned int v90 = v181;
                    int UncompressedPixelFormatFromCompressedPixelFormat = CMPhotoGetUncompressedPixelFormatFromCompressedPixelFormat(v88);
                    BOOL v92 = 1;
                    if (UncompressedPixelFormatFromCompressedPixelFormat > 1111970368)
                    {
                      if (UncompressedPixelFormatFromCompressedPixelFormat <= 2037741157)
                      {
                        if (UncompressedPixelFormatFromCompressedPixelFormat == 1111970369) {
                          goto LABEL_158;
                        }
                        int v93 = 1380401729;
                        goto LABEL_152;
                      }
                      if (UncompressedPixelFormatFromCompressedPixelFormat != 2037741171
                        && UncompressedPixelFormatFromCompressedPixelFormat != 2037741158)
                      {
                        goto LABEL_165;
                      }
                    }
                    else
                    {
                      if (UncompressedPixelFormatFromCompressedPixelFormat <= 875704933)
                      {
                        if (UncompressedPixelFormatFromCompressedPixelFormat != 32)
                        {
                          if (UncompressedPixelFormatFromCompressedPixelFormat == 875704422)
                          {
                            BOOL v92 = v90 - 5 < 2;
                            goto LABEL_158;
                          }
LABEL_165:
                          if ((v181 - 1) > 5) {
                            unsigned int v95 = 875704422;
                          }
                          else {
                            unsigned int v95 = dword_1AB9E3150[(int)v181 - 1];
                          }
                          if (!BYTE9(v181))
                          {
                            uint64_t MemorySurface = FigSignalErrorAt();
                            goto LABEL_365;
                          }
                          uint64_t MemorySurface = CMPhotoScaleAndRotateSessionTransformForMaxSideLengthWithOptions(*(void *)(v63 + 16), v23, 0, 1, 1, v95, 1, 0, (double)*((unint64_t *)&v183[2] + 1), (double)(unint64_t)v184, (double)*((unint64_t *)&v184 + 1), (double)*(unint64_t *)&bytes[0], 0, 0, 0, 0, 1u, SBYTE10(v181), SBYTE11(v181),
                                            SBYTE12(v181),
                                            &pixelBuffer);
                          if (MemorySurface)
                          {
LABEL_365:
                            uint64_t Capabilities = MemorySurface;
                            SampleBufferWrappingIOSurfaceRef IOSurface = 0;
                            goto LABEL_241;
                          }
                          IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(pixelBuffer);
                          if (IOSurface)
                          {
                            v220[0] = (__IOSurface *)CFRetain(IOSurface);
                            if (v220[0])
                            {
                              *(void *)unint64_t v179 = vcvtad_u64_f64(CMPhotoGetPixelBufferCLAPAsRect(pixelBuffer));
                              unint64_t v175 = vcvtad_u64_f64(v99);
                              unint64_t v176 = vcvtad_u64_f64(v98);
                              unint64_t v173 = vcvtad_u64_f64(v100);
                              goto LABEL_177;
                            }
                            SampleBufferWrappingIOSurfaceRef IOSurface = 0;
                          }
                          else
                          {
                            SampleBufferWrappingIOSurfaceRef IOSurface = 0;
                            v220[0] = 0;
                          }
                          uint64_t Capabilities = 4294950305;
LABEL_241:
                          if (v194)
                          {
                            CVPixelBufferUnlockBaseAddress(v23, 1uLL);
                            char v194 = 0;
                          }
                          CMPhotoJPEGQualitySettingsReleaseStorage(&v196);
                          JPEGDeviceInterface_closeDriverConnection(v164);
                          if (v220[0]) {
                            CFRelease(v220[0]);
                          }
                          if (pixelBuffer) {
                            CFRelease(pixelBuffer);
                          }
                          if (dataPointerOut)
                          {
                            IOSurfaceDecrementUseCount((IOSurfaceRef)dataPointerOut);
                            if (dataPointerOut) {
                              CFRelease(dataPointerOut);
                            }
                          }
                          if (*MEMORY[0x1E4F1EBA8] == 1) {
                            kdebug_trace();
                          }
                          if (a13 && !Capabilities)
                          {
                            CMBlockBufferRef DataBuffer = CMSampleBufferGetDataBuffer(SampleBufferWrappingIOSurface);
                            if (!DataBuffer)
                            {
                              uint64_t Capabilities = 4294950304;
                              goto LABEL_374;
                            }
                            uint64_t v128 = DataBuffer;
                            if (*MEMORY[0x1E4F1EBA8] == 1) {
                              kdebug_trace();
                            }
                            *(void *)&long long v196 = 0;
                            DataCFIndex Length = CMBlockBufferGetDataLength(v128);
                            if (LODWORD(v183[0]) + 8 <= 0) {
                              int v130 = -(-(LODWORD(v183[0]) + 8) & 7);
                            }
                            else {
                              LOBYTE(v130) = (LOBYTE(v183[0]) + 8) & 7;
                            }
                            if (BYTE4(v181))
                            {
                              ++LODWORD(v183[0]);
                              if (!BYTE7(v181) && BYTE5(v181) && v130 == 7)
                              {
                                uint64_t Capabilities = CMByteStreamAppendBlockBuffer();
                                goto LABEL_330;
                              }
                            }
                            v220[0] = 0;
                            uint64_t v131 = *(void *)(CMBaseObjectGetVTable() + 16);
                            if (v131) {
                              uint64_t v132 = v131;
                            }
                            else {
                              uint64_t v132 = 0;
                            }
                            uint64_t v133 = *(uint64_t (**)(__CFData *, void, __IOSurface **))(v132 + 24);
                            if (!v133)
                            {
LABEL_328:
                              uint64_t Capabilities = 4294954514;
LABEL_329:
                              CMPhotoJFIFScannerDispose((void *)v196);
LABEL_330:
                              if (*MEMORY[0x1E4F1EBA8] == 1) {
                                kdebug_trace();
                              }
                              if (Capabilities) {
                                goto LABEL_373;
                              }
LABEL_333:
                              if (BYTE6(v181)) {
                                goto LABEL_355;
                              }
                              goto LABEL_334;
                            }
                            uint64_t v134 = v133(a13, 0, v220);
                            if (v134) {
                              goto LABEL_358;
                            }
                            int v135 = BYTE4(v181);
                            if (BYTE4(v181)) {
                              BOOL v136 = 1;
                            }
                            else {
                              BOOL v136 = v130 == 7;
                            }
                            char v137 = !v136;
                            long long v209 = 0uLL;
                            uint64_t v208 = 0;
                            *(void *)int v207 = v128;
                            BOOL v138 = !v136 || *(unsigned char *)(v63 + 32) != 0;
                            LOBYTE(v208) = v138;
                            BYTE1(v208) = v137;
                            BYTE2(v208) = v130;
                            BYTE3(v208) = BYTE5(v181) == 0;
                            BYTE4(v208) = BYTE4(v181) == 0;
                            if (BYTE7(v181)) {
                              long long v209 = *(_OWORD *)((char *)bytes + 8);
                            }
                            else {
                              long long v209 = 0uLL;
                            }
                            unint64_t v139 = *(void *)(v63 + 56);
                            uint64_t v210 = (char *)v220[0] - *(void *)(v63 + 48);
                            unint64_t v211 = v139;
                            size_t v213 = 0;
                            unint64_t v212 = 0;
                            unint64_t v214 = *(void *)(v63 + 64);
                            size_t v215 = SLODWORD(v183[0]);
                            if (BYTE5(v181))
                            {
                              int v140 = 0;
                              size_t v213 = DataLength;
                              if (BYTE7(v181)) {
                                goto LABEL_301;
                              }
                            }
                            else
                            {
                              lengthAtOffsetOut[0] = 0;
                              dataPointerOut = 0;
                              OSStatus DataPointer = CMBlockBufferGetDataPointer(v128, DataLength - 2, lengthAtOffsetOut, 0, &dataPointerOut);
                              int v140 = 1;
                              if (!DataPointer && lengthAtOffsetOut[0] >= 2)
                              {
                                if (*dataPointerOut == 255
                                  && dataPointerOut[1] == 217)
                                {
                                  int v140 = 0;
                                  size_t v213 = DataLength - 2;
                                  BYTE3(v208) = 0;
                                }
                                else
                                {
                                  int v140 = 1;
                                }
                              }
                              int v135 = BYTE4(v181);
                              if (BYTE7(v181)) {
                                goto LABEL_301;
                              }
                            }
                            if (v135)
                            {
                              if (v140) {
                                int v142 = 1;
                              }
                              else {
                                int v142 = v138;
                              }
                              if (v142 != 1)
                              {
LABEL_311:
                                if (!*(unsigned char *)(v63 + 32) || !BYTE4(v181)) {
                                  goto LABEL_315;
                                }
                                *(void *)(v63 + 48) = v212;
                                dataPointerOut = 0;
                                unsigned int v147 = *(unsigned __int16 *)(v63 + 56);
                                uint64_t v148 = *(void *)(v63 + 64);
                                lengthAtOffsetOut[0] = MEMORY[0x1E4F143A8];
                                lengthAtOffsetOut[1] = *(void *)"";
                                CFAllocatorRef v204 = ___postProcessStripToStream_block_invoke;
                                CFMutableDictionaryRef v205 = &__block_descriptor_tmp_13_0;
                                uint64_t v206 = a13;
                                uint64_t v134 = _writeRestartMarkerSegmentWithHandler(1, 1, v147, v148, (uint64_t *)(v63 + 40), &dataPointerOut, (uint64_t)lengthAtOffsetOut);
                                if (!v134)
                                {
                                  *(void *)(v63 + 48) = &dataPointerOut[*(void *)(v63 + 48) - 2];
LABEL_315:
                                  uint64_t Capabilities = CMByteStreamAppendBlockBuffer();
                                  if (Capabilities || !*(unsigned char *)(v63 + 32) || !BYTE5(v181)) {
                                    goto LABEL_329;
                                  }
                                  dataPointerOut = 0;
                                  uint64_t v149 = *(void *)(v63 + 40);
                                  uint64_t v151 = *(void *)(v63 + 56);
                                  uint64_t v150 = *(void *)(v63 + 64);
                                  uint64_t v152 = *(void *)(CMBaseObjectGetVTable() + 16);
                                  if (v152) {
                                    uint64_t v153 = v152;
                                  }
                                  else {
                                    uint64_t v153 = 0;
                                  }
                                  BOOL v154 = *(uint64_t (**)(__CFData *, char *, uint64_t, uint64_t, char **))(v153 + 16);
                                  if (v154)
                                  {
                                    uint64_t v155 = (char *)(4 * v151);
                                    unsigned int v156 = v154(a13, v155, v149, v150, &dataPointerOut);
                                    if (dataPointerOut == v155) {
                                      unsigned int v157 = 0;
                                    }
                                    else {
                                      unsigned int v157 = -16992;
                                    }
                                    if (v156) {
                                      uint64_t Capabilities = v156;
                                    }
                                    else {
                                      uint64_t Capabilities = v157;
                                    }
                                    goto LABEL_329;
                                  }
                                  goto LABEL_328;
                                }
LABEL_358:
                                uint64_t Capabilities = v134;
                                goto LABEL_329;
                              }
                              if (!v140)
                              {
                                int v143 = 0;
                                goto LABEL_302;
                              }
                            }
LABEL_301:
                            int v143 = _scannerCallbackMarker;
LABEL_302:
                            if (v138) {
                              int v144 = _scannerCallbackRestartMarker;
                            }
                            else {
                              int v144 = 0;
                            }
                            uint64_t v134 = CMPhotoJFIFScannerCreate((uint64_t)v143, (uint64_t)v207, (uint64_t)v144, (uint64_t)v207, &v196);
                            if (v134) {
                              goto LABEL_358;
                            }
                            if (DataLength)
                            {
                              size_t v145 = 0;
                              size_t v146 = DataLength;
                              while (1)
                              {
                                lengthAtOffsetOut[0] = 0;
                                dataPointerOut = 0;
                                uint64_t v134 = CMBlockBufferGetDataPointer(v128, v145, (size_t *)&dataPointerOut, 0, (char **)lengthAtOffsetOut);
                                if (v134) {
                                  goto LABEL_358;
                                }
                                uint64_t v134 = CMPhotoJFIFScannerRun(v196, lengthAtOffsetOut[0], (unint64_t)dataPointerOut);
                                if (v134) {
                                  goto LABEL_358;
                                }
                                v145 += (size_t)dataPointerOut;
                                v146 -= (unint64_t)dataPointerOut;
                                if (!v146) {
                                  goto LABEL_311;
                                }
                              }
                            }
                            goto LABEL_311;
                          }
                          if (v168 || !Capabilities) {
                            goto LABEL_333;
                          }
                          BYTE6(v181) = 0;
LABEL_334:
                          if (*MEMORY[0x1E4F1EBA8] == 1) {
                            kdebug_trace();
                          }
                          uint64_t Capabilities = _encodeSW(v63, v23, (uint64_t)&v181, v22, (CFTypeRef *)&sbuf, a13);
                          if (*MEMORY[0x1E4F1EBA8] == 1) {
                            kdebug_trace();
                          }
                          if (Capabilities) {
                            goto LABEL_373;
                          }
                          CMSampleBufferRef v158 = sbuf;
                          if (sbuf)
                          {
                            TotalSampleCFNumberRef Size = CMSampleBufferGetTotalSampleSize(sbuf);
                            uint64_t Capabilities = 0;
                            if (*(void *)&bytes[4])
                            {
                              unint64_t v160 = TotalSampleSize;
                              if (TotalSampleSize > *(void *)&bytes[4])
                              {
                                if (!v169)
                                {
                                  while (1)
                                  {
                                    if (v158)
                                    {
                                      CFRelease(v158);
                                      CMSampleBufferRef sbuf = 0;
                                    }
                                    uint64_t v161 = CMPhotoJPEGQualityControllerDecrementByteBudgetQualityGivenSize((_OWORD *)((char *)&bytes[1] + 8), v160, 1, &v186);
                                    if (v161) {
                                      goto LABEL_372;
                                    }
                                    CMPhotoJPEGQualitySettingsReleaseStorage((void *)&bytes[1] + 1);
                                    *(_OWORD *)((char *)&bytes[3] + 8) = v188;
                                    *(_OWORD *)((char *)&bytes[4] + 8) = v189;
                                    *(_OWORD *)((char *)&bytes[5] + 8) = v190;
                                    *(_OWORD *)((char *)&bytes[6] + 8) = v191;
                                    *(_OWORD *)((char *)&bytes[1] + 8) = v186;
                                    *(_OWORD *)((char *)&bytes[2] + 8) = v187;
                                    long long v186 = 0u;
                                    long long v187 = 0u;
                                    long long v188 = 0u;
                                    long long v189 = 0u;
                                    long long v190 = 0u;
                                    long long v191 = 0u;
                                    LODWORD(v183[0]) = -1;
                                    if (*MEMORY[0x1E4F1EBA8] == 1) {
                                      kdebug_trace();
                                    }
                                    uint64_t Capabilities = _encodeSW(v63, v23, (uint64_t)&v181, v22, (CFTypeRef *)&sbuf, a13);
                                    if (*MEMORY[0x1E4F1EBA8] == 1) {
                                      kdebug_trace();
                                    }
                                    if (Capabilities) {
                                      goto LABEL_373;
                                    }
                                    CMSampleBufferRef v158 = sbuf;
                                    size_t v162 = CMSampleBufferGetTotalSampleSize(sbuf);
                                    if (*(void *)&bytes[4])
                                    {
                                      unint64_t v160 = v162;
                                      if (v162 > *(void *)&bytes[4]) {
                                        continue;
                                      }
                                    }
                                    goto LABEL_355;
                                  }
                                }
LABEL_371:
                                uint64_t v161 = FigSignalErrorAt();
LABEL_372:
                                uint64_t Capabilities = v161;
                                goto LABEL_373;
                              }
                            }
                          }
                          else
                          {
                            uint64_t Capabilities = 0;
                          }
LABEL_355:
                          if (a12)
                          {
                            *a12 = sbuf;
                            goto LABEL_376;
                          }
                          goto LABEL_373;
                        }
LABEL_158:
                        if (v92 && (v179[0] & 1) == 0 && (v176 & 1) == 0 && !IsNon601YCbCr)
                        {
                          IOSurfaceRef v94 = CVPixelBufferGetIOSurface(v23);
                          if (v94)
                          {
                            v220[0] = (__IOSurface *)CFRetain(v94);
                            if (v220[0]) {
                              goto LABEL_177;
                            }
                          }
                          else
                          {
                            v220[0] = 0;
                          }
                          uint64_t MemorySurface = CMPhotoCreateImageSurfaceWrappingPixelBuffer(v23, &v194, v220);
                          if (v220[0])
                          {
LABEL_177:
                            unint64_t v102 = (*((void *)&bytes[3] + 1) + *MEMORY[0x1E4F14B00] - 1) & -*MEMORY[0x1E4F14B00];
                            if (v102 <= 0x8000) {
                              unint64_t v102 = 0x8000;
                            }
                            if (*(void *)&bytes[4]) {
                              unint64_t v103 = *(void *)&bytes[4];
                            }
                            else {
                              unint64_t v103 = v102;
                            }
                            if (BYTE14(v181)) {
                              CFDictionaryRef v104 = (uint64_t *)(v63 + 8);
                            }
                            else {
                              CFDictionaryRef v104 = (uint64_t *)&kFigPhotoSurfacePoolOneShot;
                            }
                            uint64_t v166 = *v104;
                            uint64_t MemorySurface = CMPhotoSurfacePoolCreateMemorySurface(*v104, v103, 1, (IOSurfaceRef *)&dataPointerOut);
                            if (!MemorySurface)
                            {
                              if ((v181 - 1) > 5) {
                                int v170 = 0;
                              }
                              else {
                                int v170 = dword_1AB9E3168[(int)v181 - 1];
                              }
                              IOSurfaceBindAccel();
                              int v105 = 0;
                              while (1)
                              {
                                int v106 = BYTE8(v181) != 0;
                                if (BYTE13(v181)) {
                                  v106 |= 0x10u;
                                }
                                BOOL v107 = !*(unsigned char *)(v63 + 32) || BYTE4(v181) == 0;
                                BOOL v108 = !v107 && BYTE5(v181) != 0;
                                int v109 = v106 | 8;
                                CFDictionaryRef v110 = dataPointerOut;
                                uint64_t v111 = v220[0];
                                int v112 = v182[2];
                                uint64_t v114 = *((void *)&bytes[5] + 1);
                                uint64_t v113 = *(void *)&bytes[6];
                                if (v171)
                                {
                                  int v115 = CMPhotoParavirtualizedGuestJPEGHardwareEncode((int)v220[0], (int)dataPointerOut, v182[2], v175, v173, v179[0], v176, v170, v109, v108, *((UInt8 **)&bytes[5] + 1), *(UInt8 **)&bytes[6], (uint64_t)&v202);
                                  uint64_t v23 = v177;
                                  uint64_t v63 = v180;
                                }
                                else
                                {
                                  bzero(&v208, 0xD98uLL);
                                  bzero(lengthAtOffsetOut, 0xDA0uLL);
                                  LODWORD(v215) = v112;
                                  v207[0] = IOSurfaceGetID(v111);
                                  AllocCFNumberRef Size = IOSurfaceGetAllocSize(v111);
                                  uint64_t v117 = 0;
                                  v207[1] = AllocSize;
                                  DWORD1(v209) = v175;
                                  unint64_t v211 = __PAIR64__(v170, v176);
                                  uint64_t v210 = (char *)__PAIR64__(v179[0], v109);
                                  *((void *)&v209 + 1) = v173;
                                  int v217 = 1;
                                  BOOL v218 = v108;
                                  do
                                  {
                                    unint64_t v118 = (char *)v207 + 2 * v117;
                                    *((_WORD *)v118 + 46) = *(unsigned __int8 *)(v114 + v117);
                                    *((_WORD *)v118 + 110) = *(unsigned __int8 *)(v113 + v117++);
                                  }
                                  while (v117 != 64);
                                  LODWORD(v208) = IOSurfaceGetID((IOSurfaceRef)v110);
                                  HIDWORD(v208) = IOSurfaceGetAllocSize((IOSurfaceRef)v110);
                                  if (*MEMORY[0x1E4F1EBA8] == 1) {
                                    kdebug_trace();
                                  }
                                  int v115 = JPEGDeviceInterface_encodeJPEG2024(v167, v207, lengthAtOffsetOut);
                                  uint64_t v23 = v177;
                                  uint64_t v63 = v180;
                                  if (*MEMORY[0x1E4F1EBA8] == 1) {
                                    kdebug_trace();
                                  }
                                  if (!v115) {
                                    unsigned int v202 = v204;
                                  }
                                }
                                ++v105;
                                if (v115 != -536870168) {
                                  break;
                                }
                                if (v182[0])
                                {
                                  if (v182[0] == 2) {
                                    goto LABEL_234;
                                  }
                                  if (*(void *)&bytes[4])
                                  {
                                    SampleBufferWrappingIOSurfaceRef IOSurface = 0;
                                    size_t v126 = 0;
                                    uint64_t Capabilities = 4294950306;
                                    goto LABEL_238;
                                  }
                                  size_t v119 = IOSurfaceGetAllocSize((IOSurfaceRef)dataPointerOut);
                                  uint64_t v120 = *MEMORY[0x1E4F14B00] - 1;
                                  uint64_t v121 = -*MEMORY[0x1E4F14B00];
                                  unint64_t v122 = (v120 + 2 * *((void *)&v184 + 1) * *(void *)&bytes[0]) & v121;
                                  if (v122 <= 0x8000) {
                                    unint64_t v122 = 0x8000;
                                  }
                                  if (v122 >= (3 * v119) >> 1) {
                                    unint64_t v122 = (3 * v119) >> 1;
                                  }
                                  unint64_t v123 = (v122 + v120) & v121;
                                  if (v123 <= 0x8000) {
                                    unint64_t v124 = 0x8000;
                                  }
                                  else {
                                    unint64_t v124 = v123;
                                  }
                                  if (v124 <= v119)
                                  {
                                    uint64_t v125 = FigSignalErrorAt();
LABEL_237:
                                    uint64_t Capabilities = v125;
                                    SampleBufferWrappingIOSurfaceRef IOSurface = 0;
                                    size_t v126 = 0;
LABEL_238:
                                    int v22 = v165;
                                    goto LABEL_239;
                                  }
                                  IOSurfaceDecrementUseCount((IOSurfaceRef)dataPointerOut);
                                  if (dataPointerOut)
                                  {
                                    CFRelease(dataPointerOut);
                                    dataPointerOut = 0;
                                  }
                                  uint64_t v125 = CMPhotoSurfacePoolCreateMemorySurface(v166, v124, 1, (IOSurfaceRef *)&dataPointerOut);
                                  if (v125) {
                                    goto LABEL_237;
                                  }
                                }
                                else
                                {
                                  uint64_t v125 = CMPhotoJPEGQualityControllerDecrementQuality((_OWORD *)((char *)&bytes[1] + 8), &v196);
                                  if (v125) {
                                    goto LABEL_237;
                                  }
                                  CMPhotoJPEGQualitySettingsReleaseStorage((void *)&bytes[1] + 1);
                                  *(_OWORD *)((char *)&bytes[3] + 8) = v198;
                                  *(_OWORD *)((char *)&bytes[4] + 8) = v199;
                                  *(_OWORD *)((char *)&bytes[5] + 8) = v200;
                                  *(_OWORD *)((char *)&bytes[6] + 8) = v201;
                                  *(_OWORD *)((char *)&bytes[1] + 8) = v196;
                                  *(_OWORD *)((char *)&bytes[2] + 8) = v197;
                                  long long v196 = 0u;
                                  long long v197 = 0u;
                                  long long v198 = 0u;
                                  long long v199 = 0u;
                                  long long v200 = 0u;
                                  long long v201 = 0u;
                                }
                                if (v105 == 10) {
                                  goto LABEL_229;
                                }
                              }
                              if (v115)
                              {
LABEL_234:
                                SampleBufferWrappingIOSurfaceRef IOSurface = 0;
                                size_t v126 = 0;
                                uint64_t Capabilities = 4294950302;
                                goto LABEL_238;
                              }
LABEL_229:
                              int v22 = v165;
                              if (v202)
                              {
                                SampleBufferWrappingIOSurfaceRef IOSurface = CMPhotoCreateSampleBufferWrappingIOSurface(*(const __CFAllocator **)v63, (__IOSurface *)dataPointerOut, 0, v202, SBYTE14(v181), 1u);
                                if (SampleBufferWrappingIOSurface)
                                {
                                  _attachSizeHintIfNeeded((uint64_t)&v181, v202, SampleBufferWrappingIOSurface);
                                  size_t v126 = IOSurfaceGetAllocSize((IOSurfaceRef)dataPointerOut);
                                  if (dataPointerOut)
                                  {
                                    CFRelease(dataPointerOut);
                                    dataPointerOut = 0;
                                  }
                                  uint64_t Capabilities = 0;
                                  *(unsigned char *)(v63 + 73) = 1;
                                  CMSampleBufferRef sbuf = SampleBufferWrappingIOSurface;
                                }
                                else
                                {
                                  size_t v126 = 0;
                                  uint64_t Capabilities = 4294950305;
                                }
                              }
                              else
                              {
                                SampleBufferWrappingIOSurfaceRef IOSurface = 0;
                                size_t v126 = 0;
                                uint64_t Capabilities = 4294950304;
                              }
LABEL_239:
                              if (HIBYTE(v181))
                              {
                                *(void *)int v207 = MEMORY[0x1E4F143A8];
                                uint64_t v208 = *(void *)"";
                                *(void *)&long long v209 = ___encodeHW_block_invoke;
                                *((void *)&v209 + 1) = &__block_descriptor_tmp_12_1;
                                uint64_t v210 = (char *)&v181;
                                unint64_t v211 = *(void *)v179;
                                unint64_t v212 = v176;
                                size_t v213 = v175;
                                unint64_t v214 = v173;
                                size_t v215 = v126;
                                int v216 = v105;
                                int v217 = v202;
                                analytics_send_event_lazy();
                              }
                              goto LABEL_241;
                            }
                            goto LABEL_365;
                          }
                          goto LABEL_365;
                        }
                        goto LABEL_165;
                      }
                      if (UncompressedPixelFormatFromCompressedPixelFormat != 875704934)
                      {
                        int v93 = 875836518;
LABEL_152:
                        if (UncompressedPixelFormatFromCompressedPixelFormat == v93) {
                          goto LABEL_158;
                        }
                        goto LABEL_165;
                      }
                    }
                    if (v90 > 6) {
                      goto LABEL_165;
                    }
                    BOOL v92 = 1;
                    if (((1 << v90) & 0x68) == 0) {
                      goto LABEL_165;
                    }
                    goto LABEL_158;
                  }
                }
                uint64_t Capabilities = FigSignalErrorAt();
                SampleBufferWrappingIOSurfaceRef IOSurface = 0;
                mach_port_t v164 = 0;
                goto LABEL_241;
              }
              if (v168 != 2)
              {
                int v75 = 1;
                goto LABEL_86;
              }
              uint64_t v73 = FigSignalErrorAt();
            }
            uint64_t Capabilities = v73;
            goto LABEL_126;
          }
          int Int = (void *)CFRetain(Value);
        }
        else
        {
          if (*(void *)&bytes[1] * *((void *)&bytes[0] + 1) < 0xF42400uLL) {
            int v71 = 5;
          }
          else {
            int v71 = 0;
          }
          int Int = CMPhotoCFNumberCreateInt(v71);
        }
        long long v72 = Int;
        goto LABEL_82;
      }
LABEL_17:
      unsigned int v178 = 6;
      goto LABEL_18;
    }
    if (PixelFormatType > 1751410031)
    {
      if (PixelFormatType == 1751411059) {
        goto LABEL_17;
      }
      int v32 = 1751410032;
    }
    else
    {
      if (PixelFormatType == 1717855600) {
        goto LABEL_17;
      }
      int v32 = 1717856627;
    }
    if (PixelFormatType != v32) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  FigSignalErrorAt();
  uint64_t Capabilities = 0;
LABEL_373:
  SampleBufferWrappingIOSurfaceRef IOSurface = sbuf;
LABEL_374:
  if (SampleBufferWrappingIOSurface) {
    CFRelease(SampleBufferWrappingIOSurface);
  }
LABEL_376:
  CMPhotoJPEGQualitySettingsReleaseStorage((void *)&bytes[1] + 1);
  CMPhotoJPEGQualitySettingsReleaseStorage(&v186);
  return Capabilities;
}

void CMPhotoJPEGQualitySettingsReleaseStorage(void *a1)
{
  if (a1)
  {
    a1[8] = 0;
    a1[9] = 0;
    a1[10] = 0;
    CFTypeID v2 = (void *)a1[11];
    if (v2)
    {
      a1[11] = 0;
      free(v2);
    }
    double v3 = (const void *)a1[7];
    if (v3)
    {
      CFRelease(v3);
      a1[7] = 0;
    }
  }
}

uint64_t CMPhotoApplyCropCMPhotoRectToRect(void *a1, unint64_t *a2)
{
  if (!a1) {
    return FigSignalErrorAt();
  }
  unint64_t v2 = a1[2];
  BOOL v3 = v2 > *a2;
  unint64_t v4 = v2 - *a2;
  if (!v3) {
    return 4294950193;
  }
  unint64_t v5 = a2[1];
  unint64_t v6 = a1[3];
  if (v6 <= v5 || a2[2] > v4 || a2[3] > v6 - v5) {
    return 4294950193;
  }
  uint64_t v7 = 0;
  unint64_t v8 = a1[1] + v5;
  *a1 += *a2;
  a1[1] = v8;
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  return v7;
}

BOOL CMPhotoPixelBufferIsNon601YCbCr(__CVBuffer *a1, char *a2)
{
  int PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  char v5 = 0;
  CFStringRef v6 = 0;
  char v7 = 1;
  if (PixelFormatType <= 1278226735)
  {
    if ((PixelFormatType - 1278226488) <= 0x30
      && ((1 << (PixelFormatType - 56)) & 0x1400000000001) != 0
      || PixelFormatType == 825306677)
    {
      goto LABEL_18;
    }
    int v8 = 825437747;
  }
  else
  {
    if (PixelFormatType <= 1717856626)
    {
      if ((PixelFormatType - 1278226736) > 6 || ((1 << (PixelFormatType - 48)) & 0x45) == 0)
      {
        int v8 = 1717855600;
        goto LABEL_15;
      }
LABEL_18:
      BOOL v9 = 0;
      goto LABEL_19;
    }
    if (PixelFormatType > 1751411058)
    {
      if (PixelFormatType == 1751411059) {
        goto LABEL_18;
      }
      int v8 = 1932996149;
    }
    else
    {
      if (PixelFormatType == 1717856627) {
        goto LABEL_18;
      }
      int v8 = 1751410032;
    }
  }
LABEL_15:
  BOOL v9 = 0;
  if (PixelFormatType != v8)
  {
    if (CMPhotoPixelFormatContainsRGB(PixelFormatType))
    {
      CFStringRef v6 = 0;
      char v5 = 0;
      BOOL v9 = 0;
      char v7 = 1;
    }
    else
    {
      CFStringRef v11 = (const __CFString *)CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24C18], 0);
      CFStringRef v6 = v11;
      if (v11)
      {
        int IntegerCodePointForString = CMPhotoCVYCbCrMatrixGetIntegerCodePointForString(v11);
        char v7 = 0;
        char v5 = 0;
        BOOL v9 = (IntegerCodePointForString - 7) < 0xFFFFFFFE;
      }
      else
      {
        BOOL v9 = 0;
        char v7 = 1;
        char v5 = 1;
      }
    }
  }
LABEL_19:
  if (a2) {
    *a2 = v5;
  }
  if ((v7 & 1) == 0) {
    CFRelease(v6);
  }
  return v9;
}

uint64_t CMPhotoCVYCbCrMatrixGetIntegerCodePointForString(const __CFString *a1)
{
  if (!a1) {
    return 2;
  }
  if (FigCFEqual()) {
    return 0;
  }
  return CVYCbCrMatrixGetIntegerCodePointForString(a1);
}

double _estimateNewQuality(unint64_t a1, unint64_t a2, uint64_t a3, unsigned char *a4, double result)
{
  uint64_t v5 = 0;
  float v6 = result;
  double v7 = v6;
  do
  {
    if (_jpegQualityLevels[v5] > v7) {
      break;
    }
    ++v5;
  }
  while (v5 != 20);
  float v8 = (float)a1 / (float)a2;
  if (v8 < 1.0 && v8 > 0.92)
  {
    LODWORD(v9) = v5 - 1;
    BOOL v10 = 1;
    if (!a4) {
      goto LABEL_16;
    }
LABEL_15:
    *a4 = v10;
    goto LABEL_16;
  }
  unint64_t v9 = 19;
  while ((float)((float)((float)a1 / *(float *)(a3 + 4 * (int)v5)) * *(float *)(a3 + 4 * v9)) >= (float)((float)a2 * 0.92))
  {
    if (v9-- <= 1)
    {
      LODWORD(v9) = 0;
      break;
    }
  }
  if (v5 == 20) {
    LODWORD(v5) = 19;
  }
  BOOL v10 = v9 != v5;
  if (a4) {
    goto LABEL_15;
  }
LABEL_16:
  if (v10)
  {
    if ((int)v9 < 1)
    {
      return 0.01;
    }
    else
    {
      float32x4_t result = 1.0;
      if (v9 <= 0x13) {
        return (_jpegQualityLevels[(v9 - 1)] + _jpegQualityLevels[v9]) * 0.5;
      }
    }
  }
  return result;
}

uint64_t JPEGDeviceInterface_encodeJPEG2024(mach_port_t a1, void *inputStruct, void *outputStruct)
{
  size_t outputStructCnt = 3488;
  return IOConnectCallStructMethod(a1, 6u, inputStruct, 0xDA0uLL, outputStruct, &outputStructCnt);
}

uint64_t CMPhotoCFDictionaryGetFloatIfPresent(CFDictionaryRef theDict, const void *a2, void *a3)
{
  uint64_t result = 0;
  uint64x2_t value = 0;
  if (theDict)
  {
    if (a2)
    {
      if (a3)
      {
        uint64_t result = CFDictionaryGetValueIfPresent(theDict, a2, (const void **)&value);
        if (result)
        {
          CFTypeID TypeID = CFNumberGetTypeID();
          if (TypeID == CFGetTypeID(value))
          {
            CFNumberGetValue((CFNumberRef)value, kCFNumberFloatType, a3);
            return 1;
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

void _attachSizeHintIfNeeded(uint64_t a1, uint64_t a2, void *a3)
{
  if (*(void *)(a1 + 160))
  {
    CFMutableDataRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      double v7 = Mutable;
      CMPhotoCFDictionarySetFloat(Mutable, @"ByteBudgetHint_Quality", *(float *)(a1 + 168));
      CMPhotoCFDictionarySetSize(v7, @"ByteBudgetHint_Size", a2);
      CMSetAttachment(a3, @"ByteBudgetHint", v7, 1u);
      CMBlockBufferRef DataBuffer = CMSampleBufferGetDataBuffer((CMSampleBufferRef)a3);
      CMPropagateAttachments(a3, DataBuffer);
      CFRelease(v7);
    }
  }
}

OpaqueCMBlockBuffer *CMPhotoCreateSampleBufferWrappingIOSurface(const __CFAllocator *a1, __IOSurface *a2, unint64_t a3, size_t a4, char a5, IOSurfaceLockOptions a6)
{
  int v6 = a3;
  CMAttachmentBearerRef target = 0;
  size_t sampleSizeArray = a4;
  uint64_t result = CMPhotoCreateBlockBufferWrappingIOSurface(a1, a2, a3, a4, a5, a6);
  if (result)
  {
    BOOL v10 = result;
    if (CMSampleBufferCreate(a1, result, 1u, 0, 0, 0, 1, 0, 0, 1, &sampleSizeArray, (CMSampleBufferRef *)&target))
    {
      if (target)
      {
        CFRelease(target);
        CMAttachmentBearerRef target = 0;
      }
    }
    else
    {
      CFMutableDataRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (Mutable)
      {
        uint64_t v12 = Mutable;
        CFDictionarySetValue(Mutable, @"IOSurface", a2);
        CMPhotoCFDictionarySetInt(v12, @"IOSurfaceDataOffset", v6);
        CMPhotoCFDictionarySetInt(v12, @"IOSurfaceDataSize", sampleSizeArray);
        CMSetAttachments(target, v12, 1u);
        CMPropagateAttachments(target, v10);
        CFRelease(v12);
      }
    }
    CFRelease(v10);
    return (OpaqueCMBlockBuffer *)target;
  }
  return result;
}

CMBlockBufferRef CMPhotoCreateBlockBufferWrappingIOSurface(const __CFAllocator *a1, IOSurfaceRef buffer, unint64_t a3, size_t a4, char a5, IOSurfaceLockOptions a6)
{
  kern_return_t v14;
  size_t v15;
  char *BaseAddress;
  char *v17;
  void *v18;
  void *v19;
  CFAllocatorRef v20;
  OSStatus v21;
  int v23;
  CFAllocatorContext context;
  CMBlockBufferRef blockBufferOut;

  IOSurfaceRef v6 = buffer;
  CMBlockBufferRef blockBufferOut = 0;
  if (buffer)
  {
    AllocCFNumberRef Size = IOSurfaceGetAllocSize(buffer);
    size_t v13 = AllocSize - a3;
    if (AllocSize < a3 || a4 + a3 > AllocSize)
    {
      uint64_t v23 = FigSignalErrorAt();
      IOSurfaceRef v6 = 0;
    }
    else
    {
      IOSurfaceRef v6 = (IOSurfaceRef)CFRetain(v6);
      CFDictionaryRef v14 = IOSurfaceLock(v6, a6, 0);
      if (!v14)
      {
        if (a4) {
          CFTypeRef v15 = a4;
        }
        else {
          CFTypeRef v15 = v13;
        }
        BaseAddress = (char *)IOSurfaceGetBaseAddress(v6);
        if (BaseAddress)
        {
          CFTypeID v17 = BaseAddress;
          unsigned int v18 = malloc_type_calloc(1uLL, 0x10uLL, 0x102004034E03FFCuLL);
          int v19 = v18;
          if (v18)
          {
            *unsigned int v18 = v6;
            *((_DWORD *)v18 + 2) = a6;
            *((unsigned char *)v18 + 12) = a5;
            context.version = 0;
            context.info = v18;
            memset(&context.retain, 0, 24);
            context.allocate = (CFAllocatorAllocateCallBack)_ioSurfaceDeallocator_allocate;
            context.reallocate = 0;
            context.deallocate = (CFAllocatorDeallocateCallBack)_ioSurfaceDeallocator_deallocateWithContext;
            context.preferredCFNumberRef Size = 0;
            int v20 = CFAllocatorCreate(0, &context);
            uint64_t v21 = CMBlockBufferCreateWithMemoryBlock(a1, &v17[a3], v15, v20, 0, 0, v15, 0, &blockBufferOut);
            if (!v21)
            {
              int v19 = 0;
              IOSurfaceRef v6 = 0;
              goto LABEL_12;
            }
            uint64_t v23 = v21;
            goto LABEL_24;
          }
        }
        else
        {
          int v19 = 0;
        }
        int v20 = 0;
        uint64_t v23 = -16990;
LABEL_24:
        if (v6) {
          IOSurfaceUnlock(v6, a6, 0);
        }
        goto LABEL_26;
      }
      uint64_t v23 = v14;
    }
    int v20 = 0;
    int v19 = 0;
  }
  else
  {
    int v20 = 0;
    int v19 = 0;
    uint64_t v23 = -16990;
  }
LABEL_26:
  if (v23 && blockBufferOut)
  {
    CFRelease(blockBufferOut);
    CMBlockBufferRef blockBufferOut = 0;
  }
LABEL_12:
  free(v19);
  if (v20) {
    CFRelease(v20);
  }
  if (v6) {
    CFRelease(v6);
  }
  return blockBufferOut;
}

uint64_t _once_CMPhotoDeviceSupportsTileDecodingToCanvas()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t result = pthread_once(&_getDeviceType_onceToken, (void (*)(void))_once_getDeviceType);
  if (sDeviceType == 8)
  {
    unsigned int v6 = 16;
    mach_port_t v1 = *MEMORY[0x1E4F2EEF0];
    CFDictionaryRef v2 = IOServiceMatching("AppleAVD");
    uint64_t result = IOServiceGetMatchingService(v1, v2);
    if (result)
    {
      io_object_t v3 = result;
      if (MEMORY[0x1AD10F780](result, "HEVCCanDecodeTileToCanvas", v7, &v6)) {
        BOOL v4 = 1;
      }
      else {
        BOOL v4 = v6 == 0;
      }
      BOOL v5 = !v4 && strncasecmp(v7, "Yes", v6) == 0;
      sDeviceSupportsTileDecodingToCanvas = v5;
      return IOObjectRelease(v3);
    }
    else
    {
      sDeviceSupportsTileDecodingToCanvas = 0;
    }
  }
  else
  {
    sDeviceSupportsTileDecodingToCanvas = 1;
  }
  return result;
}

uint64_t CMPhotoCompressionSessionCreate(const __CFAllocator *a1, const __CFDictionary *a2, void *a3)
{
  uint64_t v29 = -1;
  if (!a3) {
    return 4294950306;
  }
  io_object_t v3 = a3;
  FigKTraceInit();
  pthread_once(&CMPhotoCompressionSessionGetTypeID_onceToken, (void (*)(void))RegisterCMPhotoCompressionSession);
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance) {
    return 4294950305;
  }
  double v7 = (unsigned char *)Instance;
  *(void *)(Instance + 24) = 0;
  uint64_t v8 = (const void **)(Instance + 24);
  *(void *)(Instance + 32) = 0;
  unint64_t v9 = (uint64_t *)(Instance + 32);
  *(void *)(Instance + 40) = 0;
  BOOL v10 = (uint64_t *)(Instance + 40);
  *(unsigned char *)(Instance + 64) = 0;
  CFStringRef v11 = (unsigned char *)(Instance + 64);
  *(unsigned char *)(Instance + 392) = 0;
  *(_DWORD *)(Instance + 396) = 0;
  *(void *)(Instance + 48) = 0;
  *(void *)(Instance + 56) = 0;
  LODWORD(keys) = 0;
  getpid();
  v7[65] = proc_can_use_foreground_hw() == 1;
  if (a2)
  {
    CFAllocatorRef v27 = a1;
    CFDictionaryRef Value = (__CFString *)CFDictionaryGetValue(a2, @"SurfacePool");
    if (Value)
    {
      size_t v13 = Value;
      CFTypeID v14 = CFGetTypeID(Value);
      if (v14 == CMPhotoSurfacePoolGetTypeID() || v13 == @"SurfacePoolOneShot") {
        const void *v8 = CFRetain(v13);
      }
    }
    CFTypeRef v15 = v7 + 392;
    int v16 = CFDictionaryGetValue(a2, @"Scaler");
    if (v16)
    {
      CFTypeID v17 = v16;
      unsigned int v18 = v3;
      CFTypeID v19 = CFGetTypeID(v16);
      BOOL v20 = v19 == CMPhotoScaleAndRotateSessionGetTypeID();
      io_object_t v3 = v18;
      CFTypeRef v15 = v7 + 392;
      if (v20) {
        uint64_t *v9 = (uint64_t)CFRetain(v17);
      }
    }
    CMPhotoCFDictionaryGetBooleanIfPresent(a2, @"UseCodecSessionPool", v11);
    a1 = v27;
    if (*v11) {
      CMPhotoCFDictionaryGetInt64IfPresent(a2, @"CodecSessionPoolTimeoutMilliseconds", &v29);
    }
    CMPhotoCFDictionaryGetBooleanIfPresent(a2, @"ForceHighSpeedEncode", v7 + 65);
    CMPhotoCFDictionaryGetBooleanIfPresent(a2, @"CacheDriverConnection", v15);
    a2 = 0;
    if (*v11)
    {
      if (v29 != -1)
      {
        CFMutableDataRef Mutable = CFDictionaryCreateMutable(v27, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        a2 = Mutable;
        if (!Mutable)
        {
          CFDictionaryRef v23 = 0;
LABEL_34:
          uint64_t v25 = 4294950305;
          goto LABEL_36;
        }
        uint64_t v22 = CMPhotoCFDictionarySetInt64(Mutable, @"IdleTimeoutMilliseconds", v29);
        if (v22 || (uint64_t v22 = CMPhotoCodecSessionPoolCreate(v27, a2, v10), v22))
        {
          uint64_t v25 = v22;
          CFDictionaryRef v23 = 0;
          goto LABEL_36;
        }
      }
    }
  }
  if (!*v8)
  {
LABEL_22:
    CFDictionaryRef v23 = 0;
    goto LABEL_25;
  }
  if (*v9)
  {
    CMPhotoScaleAndRotateSessionGetSurfacePool(*v9);
    FigCFEqual();
    goto LABEL_22;
  }
  keys = @"SurfacePool";
  CFDictionaryRef v23 = CFDictionaryCreate(a1, (const void **)&keys, v8, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v23) {
    goto LABEL_34;
  }
  uint64_t v24 = CMPhotoScaleAndRotateSessionCreate(a1, v23, v9);
  if (!v24)
  {
LABEL_25:
    uint64_t v25 = 0;
    *io_object_t v3 = v7;
    if (!a2) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  uint64_t v25 = v24;
LABEL_36:
  CFRelease(v7);
  if (a2) {
LABEL_26:
  }
    CFRelease(a2);
LABEL_27:
  if (v23) {
    CFRelease(v23);
  }
  return v25;
}

void _once_CMPhotoScaleAndRotateSessionGetDefault()
{
  CFTypeRef cf = 0;
  int v0 = CMPhotoScaleAndRotateSessionCreate((const __CFAllocator *)*MEMORY[0x1E4F1CF80], 0, (uint64_t *)&cf);
  CFTypeRef v1 = cf;
  if (v0
    || (uint64_t v2 = 0,
        atomic_compare_exchange_strong_explicit(&defaultSession, (unint64_t *)&v2, (unint64_t)cf, memory_order_relaxed, memory_order_relaxed), v2))
  {
    if (v1) {
      CFRelease(v1);
    }
  }
}

uint64_t CMPhotoScaleAndRotateSessionCreate(const __CFAllocator *a1, const __CFDictionary *a2, uint64_t *a3)
{
  if (!a3) {
    return 4294950306;
  }
  int NumberOfScalerCores = FigGetNumberOfScalerCores();
  pthread_once(&CMPhotoScaleAndRotateSessionGetTypeID_onceToken, (void (*)(void))RegisterCMPhotoScaleAndRotateSession);
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance) {
    return 4294950305;
  }
  uint64_t v8 = Instance;
  if (a2)
  {
    CFDictionaryRef Value = (__CFString *)CFDictionaryGetValue(a2, @"SurfacePool");
    if (Value)
    {
      BOOL v10 = Value;
      CFTypeID v11 = CFGetTypeID(Value);
      if (v11 == CMPhotoSurfacePoolGetTypeID() || v10 == @"SurfacePoolOneShot") {
        *(void *)(v8 + 16) = CFRetain(v10);
      }
    }
  }
  *(_DWORD *)(v8 + 24) = 0;
  *(void *)(v8 + 32) = dispatch_semaphore_create(NumberOfScalerCores);
  uint64_t v12 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
  *(void *)(v8 + 40) = CFArrayCreateMutable(a1, NumberOfScalerCores, MEMORY[0x1E4F1D510]);
  *(_DWORD *)(v8 + 48) = 0;
  *(void *)(v8 + 56) = dispatch_semaphore_create(NumberOfScalerCores);
  CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, NumberOfScalerCores, v12);
  uint64_t result = 0;
  *(void *)(v8 + 64) = Mutable;
  *a3 = v8;
  return result;
}

uint64_t CMPhotoSurfacePoolGetTypeID()
{
  return sCMPhotoSurfacePoolTypeID;
}

uint64_t CMPhotoOneShotSessionPoolDiscardDecompressionCaches()
{
  return _clearTimerRecord(1);
}

uint64_t _clearTimerRecord(uint64_t result)
{
  if (globalPool)
  {
    if (*(unsigned char *)globalPool)
    {
      unsigned int v1 = result;
      uint64_t result = pthread_mutex_lock(*(pthread_mutex_t **)(globalPool + 8));
      if (!result)
      {
        v4.length = CFArrayGetCount(*(CFArrayRef *)(globalPool + 8 * v1 + 16));
        v4.location = 0;
        CFArrayApplyFunction(*(CFArrayRef *)(globalPool + 8 * v1 + 16), v4, (CFArrayApplierFunction)_clearTimeRecordApplier, *(void **)(globalPool + 32));
        CFArrayRemoveAllValues(*(CFMutableArrayRef *)(globalPool + 8 * v1 + 16));
        uint64_t v2 = *(pthread_mutex_t **)(globalPool + 8);
        return pthread_mutex_unlock(v2);
      }
    }
  }
  return result;
}

uint64_t SurfacePool_CleanupTimerHandler(uint64_t a1)
{
  uint64_t result = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 312));
  if (!result)
  {
    if (*(void *)(a1 + 368) != -1)
    {
      dispatch_time_t v3 = dispatch_time(0, 0);
      dispatch_time_t v4 = dispatch_time(*(void *)(a1 + 384), *(void *)(a1 + 368));
      if (dispatch_time(*(void *)(a1 + 384), *(void *)(a1 + 376)) >= v3)
      {
        if (v4 < v3 && !*(unsigned char *)(a1 + 392))
        {
          ++*(void *)(a1 + 400);
          *(unsigned char *)(a1 + 392) = 1;
          Pool_Cleanup((int64x2_t *)(a1 + 24), *(void *)(a1 + 96), *(void *)(a1 + 120), 1, 0);
          Pool_Cleanup((int64x2_t *)(a1 + 168), *(void *)(a1 + 240), *(void *)(a1 + 264), 1, 0);
        }
      }
      else
      {
        SurfacePool_PerformFullClean(a1);
      }
    }
    BOOL v5 = *(pthread_mutex_t **)(a1 + 312);
    return pthread_mutex_unlock(v5);
  }
  return result;
}

uint64_t _once_getDeviceType()
{
  size_t v4 = 8;
  uint64_t v5 = 0;
  uint64_t result = sysctlbyname("hw.cpufamily", &v5, &v4, 0, 0);
  if (v5 > 1741614738)
  {
    if (v5 > 2271604201)
    {
      if (v5 <= 3660830780)
      {
        if (v5 != 2271604202)
        {
          if (v5 == 2465937352)
          {
            int v3 = 5;
            goto LABEL_36;
          }
          goto LABEL_44;
        }
        goto LABEL_35;
      }
      if (v5 == 3660830781)
      {
        int v3 = 11;
        goto LABEL_36;
      }
      if (v5 == 3894312694)
      {
        int v3 = 7;
        goto LABEL_36;
      }
      uint64_t v1 = 4197663070;
      goto LABEL_12;
    }
    if (v5 > 1912690737)
    {
      if (v5 != 1912690738)
      {
        if (v5 == 1976872121)
        {
          int v3 = 15;
          goto LABEL_36;
        }
        goto LABEL_44;
      }
      goto LABEL_35;
    }
    if (v5 == 1741614739)
    {
      int v3 = 6;
      goto LABEL_36;
    }
    uint64_t v2 = 1867590060;
LABEL_20:
    if (v5 != v2) {
      goto LABEL_44;
    }
LABEL_25:
    int v3 = 13;
    goto LABEL_36;
  }
  if (v5 <= 678884788)
  {
    if (v5 > 458787762)
    {
      if (v5 == 458787763)
      {
        int v3 = 10;
        goto LABEL_36;
      }
      if (v5 == 541402832)
      {
        int v3 = 14;
        goto LABEL_36;
      }
      goto LABEL_44;
    }
    if (v5 == 131287967)
    {
      int v3 = 8;
      goto LABEL_36;
    }
    uint64_t v2 = 399882554;
    goto LABEL_20;
  }
  if (v5 > 933271105)
  {
    if (v5 == 933271106)
    {
      int v3 = 3;
      goto LABEL_36;
    }
    if (v5 == 1176831186)
    {
      int v3 = 9;
      goto LABEL_36;
    }
    uint64_t v1 = 1598941843;
LABEL_12:
    if (v5 != v1) {
      goto LABEL_44;
    }
LABEL_35:
    int v3 = 12;
    goto LABEL_36;
  }
  if (v5 == 678884789) {
    goto LABEL_25;
  }
  if (v5 == 747742334)
  {
    int v3 = 4;
    goto LABEL_36;
  }
LABEL_44:
  uint64_t result = _isMobileGestaltVirtualDevice();
  if (result) {
    int v3 = 10;
  }
  else {
    int v3 = 0;
  }
LABEL_36:
  sDeviceType = v3;
  return result;
}

void *_callbackDataProviderGetBytePointer(uint64_t a1)
{
  if (pthread_mutex_lock(*(pthread_mutex_t **)a1)) {
    return 0;
  }
  CVPixelBufferRef pixelBuffer = 0;
  CVPixelBufferRef destinationBuffer = 0;
  VTPixelTransferSessionRef pixelTransferSessionOut = 0;
  if (*(void *)(a1 + 16)) {
    goto LABEL_17;
  }
  CMPhotoGetPixelBufferCLAPAsRect(*(__CVBuffer **)(a1 + 8));
  double v3 = v2;
  double v5 = v4;
  CFDataRef Data = (void *)CGBitmapAllocateData();
  if (!Data)
  {
    int v8 = FigSignalErrorAt();
    goto LABEL_29;
  }
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  int v8 = CVPixelBufferCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (unint64_t)v3, (unint64_t)v5, *(_DWORD *)(a1 + 24), Data, *(void *)(a1 + 32), (CVPixelBufferReleaseBytesCallback)_dataProviderReleasePixelBufferBacking, 0, 0, &destinationBuffer);
  if (v8)
  {
LABEL_29:
    int v13 = v8;
    goto LABEL_18;
  }
  if (!VTPixelTransferSessionCreate(v7, &pixelTransferSessionOut))
  {
    VTSessionSetProperty(pixelTransferSessionOut, (CFStringRef)*MEMORY[0x1E4F45108], (CFTypeRef)*MEMORY[0x1E4F1CFC8]);
    if (!VTSessionSetProperty(pixelTransferSessionOut, (CFStringRef)*MEMORY[0x1E4F45168], (CFTypeRef)*MEMORY[0x1E4F45450]))
    {
      OSStatus v9 = VTPixelTransferSessionTransferImage(pixelTransferSessionOut, *(CVPixelBufferRef *)(a1 + 8), destinationBuffer);
      if (v9 != -12905) {
        goto LABEL_13;
      }
      if (!CMPhotoSurfacePoolCreatePixelBuffer(@"SurfacePoolOneShot", *(unsigned int *)(a1 + 24), (unint64_t)v3, (unint64_t)v5, 1, 0, 0, 1, 0, 0, &pixelBuffer))
      {
        int v10 = VTPixelTransferSessionTransferImage(pixelTransferSessionOut, *(CVPixelBufferRef *)(a1 + 8), pixelBuffer);
        if (v10 == -12905)
        {
          CFTypeID v11 = *(__CVBuffer **)(a1 + 8);
          uint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
          int v10 = CMPhotoVTPixelTransferWorkaround(v11, PixelFormatType, 0, 1, 1, 1, 0, 0, *MEMORY[0x1E4F1DB20], *(CGFloat *)(MEMORY[0x1E4F1DB20] + 8), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 16), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 24), *MEMORY[0x1E4F1DB30], *(double *)(MEMORY[0x1E4F1DB30] + 8), &pixelBuffer);
        }
        if (!v10)
        {
          OSStatus v9 = VTPixelTransferSessionTransferImage(pixelTransferSessionOut, pixelBuffer, destinationBuffer);
LABEL_13:
          if (!v9) {
            goto LABEL_15;
          }
        }
      }
    }
  }
  VTFillPixelBufferWithBlack();
LABEL_15:
  CVPixelBufferLockBaseAddress(destinationBuffer, 0);
  *(void *)(a1 + 16) = destinationBuffer;
  CVPixelBufferRef destinationBuffer = 0;
  if (pixelTransferSessionOut) {
    CFRelease(pixelTransferSessionOut);
  }
LABEL_17:
  int v13 = 0;
LABEL_18:
  if (pixelBuffer) {
    CFRelease(pixelBuffer);
  }
  if (destinationBuffer) {
    CFRelease(destinationBuffer);
  }
  if (v13)
  {
    BaseAddress = 0;
  }
  else
  {
    BaseAddress = CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(a1 + 16));
    ++*(_DWORD *)(a1 + 28);
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)a1);
  return BaseAddress;
}

uint64_t SlimXEncodeBlocks_NEON(uint64_t *a1)
{
  uint64_t v1031 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  double v3 = (unsigned char *)a1[2];
  uint64_t v5 = *((unsigned int *)a1 + 8);
  int v4 = *((_DWORD *)a1 + 9);
  int v6 = *((_DWORD *)a1 + 2);
  uint64_t v7 = *((int *)a1 + 3);
  unint64_t v8 = predictionPattern[v5];
  uint64_t v9 = a1[10];
  uint64_t v10 = *(void *)(v9 + 128);
  if (v10 && *(void *)(v9 + 88) + v10 - (uint64_t)v3 < 160) {
    return 4294951888;
  }
  uint64_t v11 = 4294951891;
  uint16x8_t v12 = (uint16x8_t)vdupq_n_s16(-v4);
  switch((int)v5)
  {
    case 0:
      int64x2_t v34 = (int64x2_t)vmovl_u8(*(uint8x8_t *)v2);
      int64x2_t v35 = (int64x2_t)vmovl_u8(*(uint8x8_t *)(v2 + 8));
      int64x2_t v36 = (int64x2_t)vmovl_u8(*(uint8x8_t *)(v2 + v7));
      int64x2_t v37 = (int64x2_t)vmovl_u8(*(uint8x8_t *)(v2 + v7 + 8));
      unint64_t v38 = (uint8x8_t *)(v2 + v7 + v7);
      int64x2_t v39 = (int64x2_t)vmovl_u8(*v38);
      int64x2_t v40 = (int64x2_t)vmovl_u8(v38[1]);
      unint64_t v41 = (uint8x8_t *)((char *)v38 + v7);
      int64x2_t v42 = (int64x2_t)vmovl_u8(*v41);
      int64x2_t v43 = (int64x2_t)vmovl_u8(v41[1]);
      goto LABEL_22;
    case 1:
      int16x8_t v13 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v2);
      int16x8_t v14 = (int16x8_t)vmovl_u8(*(uint8x8_t *)(v2 + 8));
      int16x8_t v15 = (int16x8_t)vmovl_u8(*(uint8x8_t *)(v2 + v7));
      int16x8_t v16 = (int16x8_t)vmovl_u8(*(uint8x8_t *)(v2 + v7 + 8));
      unint64_t v44 = (uint8x8_t *)(v2 + v7 + v7);
      int16x8_t v18 = (int16x8_t)vmovl_u8(*v44);
      int16x8_t v19 = (int16x8_t)vmovl_u8(v44[1]);
      unint64_t v45 = (uint8x8_t *)((char *)v44 + v7);
      int16x8_t v21 = (int16x8_t)vmovl_u8(*v45);
      int16x8_t v22 = (int16x8_t)vmovl_u8(v45[1]);
      goto LABEL_38;
    case 2:
      int16x8_t v46 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v2);
      int16x8_t v47 = (int16x8_t)vmovl_u8(*(uint8x8_t *)(v2 + v7));
      BOOL v48 = (uint8x8_t *)(v2 + v7 + v7);
      int16x8_t v49 = (int16x8_t)vmovl_u8(*v48);
      char v50 = (uint8x8_t *)((char *)v48 + v7);
      int16x8_t v51 = (int16x8_t)vmovl_u8(*v50);
      int v52 = (uint8x8_t *)((char *)v50 + v7);
      int16x8_t v53 = (int16x8_t)vmovl_u8(*v52);
      char v54 = (uint8x8_t *)((char *)v52 + v7);
      int16x8_t v55 = (int16x8_t)vmovl_u8(*v54);
      uint64_t v56 = (uint8x8_t *)((char *)v54 + v7);
      int16x8_t v57 = (int16x8_t)vmovl_u8(*v56);
      int16x8_t v58 = (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v56 + v7));
      int16x8_t v26 = vtrn1q_s16(v46, v53);
      int64x2_t v59 = (int64x2_t)vtrn2q_s16(v46, v53);
      int16x8_t v28 = vtrn1q_s16(v49, v57);
      int64x2_t v60 = (int64x2_t)vtrn2q_s16(v49, v57);
      int64x2_t v61 = (int64x2_t)vtrn1q_s16(v47, v55);
      int16x8_t v31 = vtrn2q_s16(v47, v55);
      int64x2_t v62 = (int64x2_t)vtrn1q_s16(v51, v58);
      int16x8_t v33 = vtrn2q_s16(v51, v58);
      int16x8_t v29 = (int16x8_t)vzip2q_s64(v61, v59);
      v27.i64[0] = v61.i64[0];
      v27.i64[1] = v59.i64[0];
      int16x8_t v32 = (int16x8_t)vzip2q_s64(v62, v60);
      v30.i64[0] = v62.i64[0];
      v30.i64[1] = v60.i64[0];
      goto LABEL_64;
    case 3:
      int32x4_t v63 = (int32x4_t)vmovl_u8(*(uint8x8_t *)v2);
      int32x4_t v64 = (int32x4_t)vmovl_u8(*(uint8x8_t *)(v2 + v7));
      double v65 = (uint8x8_t *)(v2 + v7 + v7);
      int32x4_t v66 = (int32x4_t)vmovl_u8(*v65);
      double v67 = (uint8x8_t *)((char *)v65 + v7);
      int32x4_t v68 = (int32x4_t)vmovl_u8(*v67);
      long long v69 = (uint8x8_t *)((char *)v67 + v7);
      int32x4_t v70 = (int32x4_t)vmovl_u8(*v69);
      int v71 = (uint8x8_t *)((char *)v69 + v7);
      int32x4_t v72 = (int32x4_t)vmovl_u8(*v71);
      uint64_t v73 = (uint8x8_t *)((char *)v71 + v7);
      int32x4_t v74 = (int32x4_t)vmovl_u8(*v73);
      int32x4_t v75 = (int32x4_t)vmovl_u8(*(uint8x8_t *)((char *)v73 + v7));
      int16x8_t v26 = (int16x8_t)vtrn1q_s32(v63, v70);
      int64x2_t v76 = (int64x2_t)vtrn2q_s32(v63, v70);
      int16x8_t v28 = (int16x8_t)vtrn1q_s32(v64, v72);
      int64x2_t v77 = (int64x2_t)vtrn2q_s32(v64, v72);
      int64x2_t v78 = (int64x2_t)vtrn1q_s32(v66, v74);
      int16x8_t v31 = (int16x8_t)vtrn2q_s32(v66, v74);
      int64x2_t v79 = (int64x2_t)vtrn1q_s32(v68, v75);
      int16x8_t v33 = (int16x8_t)vtrn2q_s32(v68, v75);
      int16x8_t v27 = (int16x8_t)vzip1q_s64(v78, v76);
      int16x8_t v29 = (int16x8_t)vzip2q_s64(v78, v76);
      int16x8_t v30 = (int16x8_t)vzip1q_s64(v79, v77);
      int16x8_t v32 = (int16x8_t)vzip2q_s64(v79, v77);
      goto LABEL_64;
    case 6:
      int32x4_t v80 = (int32x4_t)vmovl_u8(*(uint8x8_t *)v2);
      int32x4_t v81 = (int32x4_t)vmovl_u8(*(uint8x8_t *)(v2 + 8));
      int32x4_t v82 = (int32x4_t)vmovl_u8(*(uint8x8_t *)(v2 + v7));
      int32x4_t v83 = (int32x4_t)vmovl_u8(*(uint8x8_t *)(v2 + v7 + 8));
      unint64_t v84 = (uint8x8_t *)(v2 + v7 + v7);
      int32x4_t v85 = (int32x4_t)vmovl_u8(*v84);
      int32x4_t v86 = (int32x4_t)vmovl_u8(v84[1]);
      mach_port_t v87 = (uint8x8_t *)((char *)v84 + v7);
      int32x4_t v88 = (int32x4_t)vmovl_u8(*v87);
      int32x4_t v89 = (int32x4_t)vmovl_u8(v87[1]);
      if (v4)
      {
        int32x4_t v80 = (int32x4_t)vshlq_u16((uint16x8_t)v80, v12);
        int32x4_t v82 = (int32x4_t)vshlq_u16((uint16x8_t)v82, v12);
        int32x4_t v85 = (int32x4_t)vshlq_u16((uint16x8_t)v85, v12);
        int32x4_t v88 = (int32x4_t)vshlq_u16((uint16x8_t)v88, v12);
        int32x4_t v81 = (int32x4_t)vshlq_u16((uint16x8_t)v81, v12);
        int32x4_t v83 = (int32x4_t)vshlq_u16((uint16x8_t)v83, v12);
        int32x4_t v86 = (int32x4_t)vshlq_u16((uint16x8_t)v86, v12);
        int32x4_t v89 = (int32x4_t)vshlq_u16((uint16x8_t)v89, v12);
      }
      int16x8_t v90 = (int16x8_t)vtrn1q_s32(v80, v81);
      int16x8_t v91 = (int16x8_t)vtrn2q_s32(v80, v81);
      int16x8_t v92 = (int16x8_t)vtrn1q_s32(v82, v83);
      int16x8_t v93 = (int16x8_t)vtrn2q_s32(v82, v83);
      int16x8_t v94 = (int16x8_t)vtrn1q_s32(v85, v86);
      int16x8_t v95 = (int16x8_t)vtrn2q_s32(v85, v86);
      int16x8_t v96 = (int16x8_t)vtrn1q_s32(v88, v89);
      int16x8_t v97 = (int16x8_t)vtrn2q_s32(v88, v89);
      int16x8_t v26 = vtrn1q_s16(v90, v94);
      int16x8_t v27 = vtrn2q_s16(v90, v94);
      int16x8_t v28 = vtrn1q_s16(v92, v96);
      int16x8_t v30 = vtrn2q_s16(v92, v96);
      int16x8_t v29 = vtrn1q_s16(v91, v95);
      int16x8_t v31 = vtrn2q_s16(v91, v95);
      int16x8_t v32 = vtrn1q_s16(v93, v97);
      int16x8_t v33 = vtrn2q_s16(v93, v97);
      goto LABEL_64;
    case 7:
      int64x2_t v1030 = 0uLL;
      int64x2_t v1029 = 0uLL;
      vectorload_1x16_packed10((unsigned int *)v2, v6, &v1030, &v1029);
      int64x2_t v988 = v1029;
      int64x2_t v1000 = v1030;
      double v98 = (unsigned int *)(v2 + v7);
      vectorload_1x16_packed10(v98, v6, &v1030, &v1029);
      int64x2_t v969 = v1029;
      int64x2_t v978 = v1030;
      double v99 = (unsigned int *)((char *)v98 + v7);
      vectorload_1x16_packed10(v99, v6, &v1030, &v1029);
      int64x2_t v956 = v1029;
      int64x2_t v962 = v1030;
      vectorload_1x16_packed10((unsigned int *)((char *)v99 + v7), v6, &v1030, &v1029);
      int64x2_t v40 = v956;
      int64x2_t v39 = v962;
      int64x2_t v37 = v969;
      int64x2_t v36 = v978;
      int64x2_t v35 = v988;
      int64x2_t v34 = v1000;
      int64x2_t v43 = v1029;
      int64x2_t v42 = v1030;
LABEL_22:
      v26.i64[0] = v34.i64[0];
      v26.i64[1] = v39.i64[0];
      int16x8_t v27 = (int16x8_t)vzip2q_s64(v34, v39);
      v28.i64[0] = v36.i64[0];
      v28.i64[1] = v42.i64[0];
      v29.i64[0] = v35.i64[0];
      v29.i64[1] = v40.i64[0];
      int16x8_t v30 = (int16x8_t)vzip2q_s64(v36, v42);
      int16x8_t v31 = (int16x8_t)vzip2q_s64(v35, v40);
      v32.i64[0] = v37.i64[0];
      v32.i64[1] = v43.i64[0];
      int16x8_t v33 = (int16x8_t)vzip2q_s64(v37, v43);
      goto LABEL_64;
    case 8:
      int64x2_t v1030 = 0uLL;
      int64x2_t v1029 = 0uLL;
      vectorload_1x16_packed10((unsigned int *)v2, v6, &v1030, &v1029);
      int16x8_t v989 = (int16x8_t)v1029;
      int16x8_t v1001 = (int16x8_t)v1030;
      double v100 = (unsigned int *)(v2 + v7);
      vectorload_1x16_packed10(v100, v6, &v1030, &v1029);
      int16x8_t v970 = (int16x8_t)v1029;
      int16x8_t v979 = (int16x8_t)v1030;
      uint64_t v101 = (unsigned int *)((char *)v100 + v7);
      vectorload_1x16_packed10(v101, v6, &v1030, &v1029);
      int16x8_t v957 = (int16x8_t)v1029;
      int16x8_t v963 = (int16x8_t)v1030;
      vectorload_1x16_packed10((unsigned int *)((char *)v101 + v7), v6, &v1030, &v1029);
      int16x8_t v19 = v957;
      int16x8_t v18 = v963;
      int16x8_t v16 = v970;
      int16x8_t v15 = v979;
      int16x8_t v14 = v989;
      int16x8_t v13 = v1001;
      int16x8_t v22 = (int16x8_t)v1029;
      int16x8_t v21 = (int16x8_t)v1030;
      goto LABEL_38;
    case 10:
    case 24:
      int16x8_t v13 = *(int16x8_t *)v2;
      int16x8_t v14 = *(int16x8_t *)(v2 + 16);
      int16x8_t v15 = *(int16x8_t *)(v2 + v7);
      int16x8_t v16 = *(int16x8_t *)(v2 + v7 + 16);
      CFTypeID v17 = (int16x8_t *)(v2 + v7 + v7);
      int16x8_t v18 = *v17;
      int16x8_t v19 = v17[1];
      BOOL v20 = (int16x8_t *)((char *)v17 + v7);
      int16x8_t v21 = *v20;
      int16x8_t v22 = v20[1];
      if (*((unsigned char *)a1 + 40))
      {
        uint16x8_t v23 = vqaddq_u16(vqaddq_u16(vqaddq_u16(vqaddq_u16(vqaddq_u16(vqaddq_u16(vqaddq_u16((uint16x8_t)vshlq_n_s16(v13, 0xCuLL), (uint16x8_t)vshlq_n_s16(v15, 0xCuLL)), (uint16x8_t)vshlq_n_s16(v18, 0xCuLL)), (uint16x8_t)vshlq_n_s16(v21, 0xCuLL)), (uint16x8_t)vshlq_n_s16(v14, 0xCuLL)), (uint16x8_t)vshlq_n_s16(v16, 0xCuLL)), (uint16x8_t)vshlq_n_s16(v19, 0xCuLL)), (uint16x8_t)vshlq_n_s16(v22, 0xCuLL));
        v23.i16[0] = vmaxvq_u16(v23);
        if (v23.i32[0]) {
          return 4294951887;
        }
      }
      if (v4)
      {
        int16x8_t v13 = (int16x8_t)vshlq_u16((uint16x8_t)v13, v12);
        int16x8_t v15 = (int16x8_t)vshlq_u16((uint16x8_t)v15, v12);
        int16x8_t v18 = (int16x8_t)vshlq_u16((uint16x8_t)v18, v12);
        int16x8_t v21 = (int16x8_t)vshlq_u16((uint16x8_t)v21, v12);
        int16x8_t v14 = (int16x8_t)vshlq_u16((uint16x8_t)v14, v12);
        int16x8_t v16 = (int16x8_t)vshlq_u16((uint16x8_t)v16, v12);
        int16x8_t v19 = (int16x8_t)vshlq_u16((uint16x8_t)v19, v12);
        int16x8_t v22 = (int16x8_t)vshlq_u16((uint16x8_t)v22, v12);
      }
      if (v5 == 11)
      {
LABEL_38:
        int16x8_t v26 = vtrn1q_s16(v13, v18);
        int16x8_t v27 = vtrn2q_s16(v13, v18);
        int16x8_t v28 = vtrn1q_s16(v15, v21);
        int16x8_t v30 = vtrn2q_s16(v15, v21);
        int16x8_t v29 = vtrn1q_s16(v14, v19);
        int16x8_t v31 = vtrn2q_s16(v14, v19);
        int16x8_t v32 = vtrn1q_s16(v16, v22);
        int16x8_t v33 = vtrn2q_s16(v16, v22);
      }
      else
      {
        v26.i64[0] = v13.i64[0];
        v26.i64[1] = v18.i64[0];
        int16x8_t v27 = (int16x8_t)vzip2q_s64((int64x2_t)v13, (int64x2_t)v18);
        v28.i64[0] = v15.i64[0];
        v28.i64[1] = v21.i64[0];
        v29.i64[0] = v14.i64[0];
        v29.i64[1] = v19.i64[0];
        int16x8_t v30 = (int16x8_t)vzip2q_s64((int64x2_t)v15, (int64x2_t)v21);
        int16x8_t v31 = (int16x8_t)vzip2q_s64((int64x2_t)v14, (int64x2_t)v19);
        v32.i64[0] = v16.i64[0];
        v32.i64[1] = v22.i64[0];
        int16x8_t v33 = (int16x8_t)vzip2q_s64((int64x2_t)v16, (int64x2_t)v22);
      }
LABEL_61:
      if (v5 >= 0x11 && *((_DWORD *)a1 + 27))
      {
        int v287 = *((unsigned __int16 *)a1 + 56);
        uint16x8_t v288 = (uint16x8_t)vdupq_n_s16(16 - v287);
        uint16x8_t v289 = (uint16x8_t)vdupq_n_s16(v287 - 1);
        uint16x8_t v290 = (uint16x8_t)vdupq_n_s16(-v287);
        int16x8_t v291 = (int16x8_t)vqsubq_u16(v288, (uint16x8_t)vclzq_s16(v26));
        v292.i64[0] = -1;
        v292.i64[1] = -1;
        v293.i64[0] = 0x1000100010001;
        v293.i64[1] = 0x1000100010001;
        int16x8_t v26 = vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)v291, v289), (int16x8_t)vshlq_u16((uint16x8_t)vaddq_s16(vsubq_s16(v26, (int16x8_t)vshlq_u16((uint16x8_t)v26, v290)), (int16x8_t)vshlq_u16(v293, (uint16x8_t)vaddq_s16(v291, v292))), (uint16x8_t)vnegq_s16(v291)));
        int16x8_t v294 = (int16x8_t)vqsubq_u16(v288, (uint16x8_t)vclzq_s16(v28));
        int16x8_t v28 = vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)v294, v289), (int16x8_t)vshlq_u16((uint16x8_t)vaddq_s16(vsubq_s16(v28, (int16x8_t)vshlq_u16((uint16x8_t)v28, v290)), (int16x8_t)vshlq_u16(v293, (uint16x8_t)vaddq_s16(v294, v292))), (uint16x8_t)vnegq_s16(v294)));
        int16x8_t v295 = (int16x8_t)vqsubq_u16(v288, (uint16x8_t)vclzq_s16(v27));
        int16x8_t v27 = vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)v295, v289), (int16x8_t)vshlq_u16((uint16x8_t)vaddq_s16(vsubq_s16(v27, (int16x8_t)vshlq_u16((uint16x8_t)v27, v290)), (int16x8_t)vshlq_u16(v293, (uint16x8_t)vaddq_s16(v295, v292))), (uint16x8_t)vnegq_s16(v295)));
        int16x8_t v296 = (int16x8_t)vqsubq_u16(v288, (uint16x8_t)vclzq_s16(v30));
        int16x8_t v30 = vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)v296, v289), (int16x8_t)vshlq_u16((uint16x8_t)vaddq_s16(vsubq_s16(v30, (int16x8_t)vshlq_u16((uint16x8_t)v30, v290)), (int16x8_t)vshlq_u16(v293, (uint16x8_t)vaddq_s16(v296, v292))), (uint16x8_t)vnegq_s16(v296)));
        int16x8_t v297 = (int16x8_t)vqsubq_u16(v288, (uint16x8_t)vclzq_s16(v29));
        int16x8_t v29 = vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)v297, v289), (int16x8_t)vshlq_u16((uint16x8_t)vaddq_s16(vsubq_s16(v29, (int16x8_t)vshlq_u16((uint16x8_t)v29, v290)), (int16x8_t)vshlq_u16(v293, (uint16x8_t)vaddq_s16(v297, v292))), (uint16x8_t)vnegq_s16(v297)));
        int16x8_t v298 = (int16x8_t)vqsubq_u16(v288, (uint16x8_t)vclzq_s16(v32));
        int16x8_t v32 = vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)v298, v289), (int16x8_t)vshlq_u16((uint16x8_t)vaddq_s16(vsubq_s16(v32, (int16x8_t)vshlq_u16((uint16x8_t)v32, v290)), (int16x8_t)vshlq_u16(v293, (uint16x8_t)vaddq_s16(v298, v292))), (uint16x8_t)vnegq_s16(v298)));
        int16x8_t v299 = (int16x8_t)vqsubq_u16(v288, (uint16x8_t)vclzq_s16(v31));
        int16x8_t v31 = vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)v299, v289), (int16x8_t)vshlq_u16((uint16x8_t)vaddq_s16(vsubq_s16(v31, (int16x8_t)vshlq_u16((uint16x8_t)v31, v290)), (int16x8_t)vshlq_u16(v293, (uint16x8_t)vaddq_s16(v299, v292))), (uint16x8_t)vnegq_s16(v299)));
        int16x8_t v300 = (int16x8_t)vqsubq_u16(v288, (uint16x8_t)vclzq_s16(v33));
        int16x8_t v33 = vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)v300, v289), (int16x8_t)vshlq_u16((uint16x8_t)vaddq_s16(vsubq_s16(v33, (int16x8_t)vshlq_u16((uint16x8_t)v33, v290)), (int16x8_t)vshlq_u16(v293, (uint16x8_t)vaddq_s16(v300, v292))), (uint16x8_t)vnegq_s16(v300)));
      }
LABEL_64:
      int v301 = (_WORD *)a1 + 21;
      uint16x8_t v302 = vminq_u16((uint16x8_t)v26, (uint16x8_t)v28);
      v302.i16[0] = vminvq_u16(v302);
      unsigned __int32 v303 = v302.i32[0];
      uint16x8_t v304 = vmaxq_u16((uint16x8_t)v26, (uint16x8_t)v28);
      v304.i16[0] = vmaxvq_u16(v304);
      unsigned int v305 = 32 - __clz(v304.i32[0] - v303);
      char v306 = (_WORD *)((char *)a1 + ((v8 >> 9) & 0x7FFFF8) + 42);
      if (v304.i32[0] == v303) {
        LOWORD(v305) = 0;
      }
      *((_WORD *)a1 + 22) = v305 - *v306;
      *((_WORD *)a1 + 21) = v305;
      unsigned __int32 v307 = (unsigned __int16)v306[2];
      if (v303 < v307 || (int)((1 << v305) + v307) <= v304.i32[0])
      {
        unsigned int v309 = (v303 - (((1 << v305) - (v304.i32[0] - v303)) >> 1)) & ~((int)(v303
                                                                            - (((1 << v305) - (v304.i32[0] - v303)) >> 1)) >> 31);
        __int16 v310 = v309 - v307;
        LOWORD(v307) = v309;
      }
      else
      {
        __int16 v310 = 0;
      }
      uint16x8_t v311 = vminq_u16((uint16x8_t)v27, (uint16x8_t)v30);
      v311.i16[0] = vminvq_u16(v311);
      unsigned __int32 v312 = v311.i32[0];
      uint16x8_t v313 = vmaxq_u16((uint16x8_t)v27, (uint16x8_t)v30);
      v313.i16[0] = vmaxvq_u16(v313);
      unsigned int v314 = 32 - __clz(v313.i32[0] - v312);
      *((_WORD *)a1 + 24) = v310;
      *((_WORD *)a1 + 23) = v307;
      long long v315 = &v301[4 * ((v8 >> 8) & 0xF)];
      if (v313.i32[0] == v312) {
        LOWORD(v314) = 0;
      }
      *((_WORD *)a1 + 26) = v314 - *v315;
      *((_WORD *)a1 + 25) = v314;
      unsigned __int32 v316 = (unsigned __int16)v315[2];
      if (v312 < v316 || (int)((1 << v314) + v316) <= v313.i32[0])
      {
        unsigned int v318 = (v312 - (((1 << v314) - (v313.i32[0] - v312)) >> 1)) & ~((int)(v312
                                                                            - (((1 << v314) - (v313.i32[0] - v312)) >> 1)) >> 31);
        __int16 v319 = v318 - v316;
        LOWORD(v316) = v318;
      }
      else
      {
        __int16 v319 = 0;
      }
      uint16x8_t v320 = vminq_u16((uint16x8_t)v29, (uint16x8_t)v32);
      v320.i16[0] = vminvq_u16(v320);
      unsigned __int32 v321 = v320.i32[0];
      uint16x8_t v322 = vmaxq_u16((uint16x8_t)v29, (uint16x8_t)v32);
      v322.i16[0] = vmaxvq_u16(v322);
      unsigned int v323 = 32 - __clz(v322.i32[0] - v321);
      *((_WORD *)a1 + 28) = v319;
      *((_WORD *)a1 + 27) = v316;
      uint64_t v324 = &v301[4 * (v8 >> 4)];
      if (v322.i32[0] == v321) {
        unsigned __int16 v325 = 0;
      }
      else {
        unsigned __int16 v325 = v323;
      }
      *((_WORD *)a1 + 30) = v325 - *v324;
      *((_WORD *)a1 + 29) = v325;
      unsigned __int32 v326 = (unsigned __int16)v324[2];
      if (v321 < v326 || (int)((1 << v325) + v326) <= v322.i32[0])
      {
        unsigned int v328 = (v321 - (((1 << v325) - (v322.i32[0] - v321)) >> 1)) & ~((int)(v321
                                                                            - (((1 << v325) - (v322.i32[0] - v321)) >> 1)) >> 31);
        __int16 v329 = v328 - v326;
        LOWORD(v326) = v328;
      }
      else
      {
        __int16 v329 = 0;
      }
      *((_WORD *)a1 + 32) = v329;
      *((_WORD *)a1 + 31) = v326;
      if (v5 == 19)
      {
        __int16 v330 = *((_WORD *)a1 + 36);
      }
      else
      {
        uint16x8_t v331 = vminq_u16((uint16x8_t)v31, (uint16x8_t)v33);
        v331.i16[0] = vminvq_u16(v331);
        unsigned __int32 v332 = v331.i32[0];
        uint16x8_t v333 = vmaxq_u16((uint16x8_t)v31, (uint16x8_t)v33);
        v333.i16[0] = vmaxvq_u16(v333);
        unsigned int v334 = 32 - __clz(v333.i32[0] - v332);
        int v335 = &v301[4 * (v8 & 0xF)];
        if (v333.i32[0] == v332) {
          LOWORD(v334) = 0;
        }
        *((_WORD *)a1 + 34) = v334 - *v335;
        *((_WORD *)a1 + 33) = v334;
        int v336 = 1 << v334;
        unsigned __int32 v337 = (unsigned __int16)v335[2];
        if (v332 < v337 || (int)(v336 + v337) <= v333.i32[0])
        {
          unsigned int v338 = (v332 - ((v336 - (v333.i32[0] - v332)) >> 1)) & ~((int)(v332 - ((v336 - (v333.i32[0] - v332)) >> 1)) >> 31);
          __int16 v330 = v338 - v337;
        }
        else
        {
          __int16 v330 = 0;
          LOWORD(v338) = v335[2];
        }
        *((_WORD *)a1 + 36) = v330;
        *((_WORD *)a1 + 35) = v338;
      }
      uint64_t v339 = 0;
      int v340 = 0;
      unsigned int v341 = 0;
      int v342 = 0;
      unsigned int v343 = v310 != 0;
      if (v319) {
        v343 |= 2u;
      }
      if (v329) {
        v343 |= 4u;
      }
      if (v330) {
        v343 |= 8u;
      }
      CFAllocatorRef v344 = (unsigned __int16 *)a1 + 22;
      break;
    case 11:
    case 25:
      int16x8_t v13 = *(int16x8_t *)v2;
      int16x8_t v14 = *(int16x8_t *)(v2 + 16);
      int16x8_t v15 = *(int16x8_t *)(v2 + v7);
      int16x8_t v16 = *(int16x8_t *)(v2 + v7 + 16);
      uint64_t v24 = (int16x8_t *)(v2 + v7 + v7);
      int16x8_t v18 = *v24;
      int16x8_t v19 = v24[1];
      uint64_t v25 = (int16x8_t *)((char *)v24 + v7);
      int16x8_t v21 = *v25;
      int16x8_t v22 = v25[1];
      if (!v4) {
        goto LABEL_38;
      }
      goto LABEL_37;
    case 12:
      unint64_t v102 = (int16x8_t *)(v2 + v7 + v7);
      int16x8_t v103 = *v102;
      int16x8_t v104 = v102[1];
      int v105 = (int16x8_t *)((char *)v102 + v7);
      int32x4_t v106 = (int32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*(int16x8_t *)v2) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)v2);
      int32x4_t v107 = (int32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*(int16x8_t *)(v2 + v7)) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)(v2 + v7));
      int32x4_t v108 = (int32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(v103) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v103);
      int32x4_t v109 = (int32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*v105) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)v105);
      int32x4_t v110 = (int32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*(int16x8_t *)(v2 + 16)) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)(v2 + 16));
      int32x4_t v111 = (int32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*(int16x8_t *)(v2 + v7 + 16)) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)(v2 + v7 + 16));
      int32x4_t v112 = (int32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(v104) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v104);
      int32x4_t v113 = (int32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(v105[1]) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v105[1]);
      if (v4)
      {
        int32x4_t v106 = (int32x4_t)vshlq_u16((uint16x8_t)v106, v12);
        int32x4_t v107 = (int32x4_t)vshlq_u16((uint16x8_t)v107, v12);
        int32x4_t v108 = (int32x4_t)vshlq_u16((uint16x8_t)v108, v12);
        int32x4_t v109 = (int32x4_t)vshlq_u16((uint16x8_t)v109, v12);
        int32x4_t v110 = (int32x4_t)vshlq_u16((uint16x8_t)v110, v12);
        int32x4_t v111 = (int32x4_t)vshlq_u16((uint16x8_t)v111, v12);
        int32x4_t v112 = (int32x4_t)vshlq_u16((uint16x8_t)v112, v12);
        int32x4_t v113 = (int32x4_t)vshlq_u16((uint16x8_t)v113, v12);
      }
      int16x8_t v114 = (int16x8_t)vtrn1q_s32(v106, v110);
      int16x8_t v115 = (int16x8_t)vtrn2q_s32(v106, v110);
      int16x8_t v116 = (int16x8_t)vtrn1q_s32(v107, v111);
      int16x8_t v117 = (int16x8_t)vtrn2q_s32(v107, v111);
      int16x8_t v118 = (int16x8_t)vtrn1q_s32(v108, v112);
      int16x8_t v119 = (int16x8_t)vtrn2q_s32(v108, v112);
      int16x8_t v120 = (int16x8_t)vtrn1q_s32(v109, v113);
      int16x8_t v121 = (int16x8_t)vtrn2q_s32(v109, v113);
      int16x8_t v26 = vtrn1q_s16(v114, v118);
      int16x8_t v27 = vtrn2q_s16(v114, v118);
      int16x8_t v28 = vtrn1q_s16(v116, v120);
      int16x8_t v30 = vtrn2q_s16(v116, v120);
      int16x8_t v29 = vtrn1q_s16(v115, v119);
      int16x8_t v31 = vtrn2q_s16(v115, v119);
      int16x8_t v32 = vtrn1q_s16(v117, v121);
      int16x8_t v33 = vtrn2q_s16(v117, v121);
      goto LABEL_64;
    case 13:
      unint64_t v122 = (int16x8_t *)(v2 + v7 + v7);
      int16x8_t v123 = *v122;
      unint64_t v124 = (int16x8_t *)((char *)v122 + v7);
      int16x8_t v125 = *v124;
      size_t v126 = (int16x8_t *)((char *)v124 + v7);
      int16x8_t v127 = *v126;
      uint64_t v128 = (int16x8_t *)((char *)v126 + v7);
      int16x8_t v129 = *v128;
      int v130 = (int16x8_t *)((char *)v128 + v7);
      int16x8_t v131 = (int16x8_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*(int16x8_t *)v2) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)v2);
      int16x8_t v132 = (int16x8_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(v123) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v123);
      int16x8_t v133 = (int16x8_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*(int16x8_t *)(v2 + v7)) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)(v2 + v7));
      int16x8_t v134 = (int16x8_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(v125) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v125);
      int16x8_t v135 = (int16x8_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(v127) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v127);
      int16x8_t v136 = (int16x8_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*v130) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)v130);
      int16x8_t v137 = (int16x8_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(v129) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v129);
      int16x8_t v138 = (int16x8_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*(int16x8_t *)((char *)v130 + v7)) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)((char *)v130 + v7));
      if (v4)
      {
        int16x8_t v131 = (int16x8_t)vshlq_u16((uint16x8_t)v131, v12);
        int16x8_t v132 = (int16x8_t)vshlq_u16((uint16x8_t)v132, v12);
        int16x8_t v133 = (int16x8_t)vshlq_u16((uint16x8_t)v133, v12);
        int16x8_t v134 = (int16x8_t)vshlq_u16((uint16x8_t)v134, v12);
        int16x8_t v135 = (int16x8_t)vshlq_u16((uint16x8_t)v135, v12);
        int16x8_t v136 = (int16x8_t)vshlq_u16((uint16x8_t)v136, v12);
        int16x8_t v137 = (int16x8_t)vshlq_u16((uint16x8_t)v137, v12);
        int16x8_t v138 = (int16x8_t)vshlq_u16((uint16x8_t)v138, v12);
      }
      int16x8_t v26 = vtrn1q_s16(v131, v135);
      int64x2_t v139 = (int64x2_t)vtrn2q_s16(v131, v135);
      int16x8_t v28 = vtrn1q_s16(v132, v136);
      int64x2_t v140 = (int64x2_t)vtrn2q_s16(v132, v136);
      int64x2_t v141 = (int64x2_t)vtrn1q_s16(v133, v137);
      int16x8_t v31 = vtrn2q_s16(v133, v137);
      int64x2_t v142 = (int64x2_t)vtrn1q_s16(v134, v138);
      int16x8_t v33 = vtrn2q_s16(v134, v138);
      int16x8_t v29 = (int16x8_t)vzip2q_s64(v141, v139);
      v27.i64[0] = v141.i64[0];
      v27.i64[1] = v139.i64[0];
      int16x8_t v32 = (int16x8_t)vzip2q_s64(v142, v140);
      v30.i64[0] = v142.i64[0];
      v30.i64[1] = v140.i64[0];
      goto LABEL_64;
    case 14:
      int v143 = (int16x8_t *)(v2 + v7 + v7);
      int16x8_t v144 = *v143;
      size_t v145 = (int16x8_t *)((char *)v143 + v7);
      int16x8_t v146 = *v145;
      unsigned int v147 = (int16x8_t *)((char *)v145 + v7);
      int16x8_t v148 = *v147;
      uint64_t v149 = (int16x8_t *)((char *)v147 + v7);
      int16x8_t v150 = *v149;
      uint64_t v151 = (int16x8_t *)((char *)v149 + v7);
      int32x4_t v152 = (int32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*(int16x8_t *)v2) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)v2);
      int32x4_t v153 = (int32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*(int16x8_t *)(v2 + v7)) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)(v2 + v7));
      int32x4_t v154 = (int32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(v144) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v144);
      int32x4_t v155 = (int32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(v146) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v146);
      int32x4_t v156 = (int32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(v148) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v148);
      int32x4_t v157 = (int32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(v150) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v150);
      int32x4_t v158 = (int32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*v151) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)v151);
      int32x4_t v159 = (int32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*(int16x8_t *)((char *)v151 + v7)) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)((char *)v151 + v7));
      if (v4)
      {
        int32x4_t v152 = (int32x4_t)vshlq_u16((uint16x8_t)v152, v12);
        int32x4_t v153 = (int32x4_t)vshlq_u16((uint16x8_t)v153, v12);
        int32x4_t v154 = (int32x4_t)vshlq_u16((uint16x8_t)v154, v12);
        int32x4_t v155 = (int32x4_t)vshlq_u16((uint16x8_t)v155, v12);
        int32x4_t v156 = (int32x4_t)vshlq_u16((uint16x8_t)v156, v12);
        int32x4_t v157 = (int32x4_t)vshlq_u16((uint16x8_t)v157, v12);
        int32x4_t v158 = (int32x4_t)vshlq_u16((uint16x8_t)v158, v12);
        int32x4_t v159 = (int32x4_t)vshlq_u16((uint16x8_t)v159, v12);
      }
      int16x8_t v26 = (int16x8_t)vtrn1q_s32(v152, v156);
      int64x2_t v160 = (int64x2_t)vtrn2q_s32(v152, v156);
      int16x8_t v28 = (int16x8_t)vtrn1q_s32(v153, v157);
      int64x2_t v161 = (int64x2_t)vtrn2q_s32(v153, v157);
      int64x2_t v162 = (int64x2_t)vtrn1q_s32(v154, v158);
      int16x8_t v31 = (int16x8_t)vtrn2q_s32(v154, v158);
      int64x2_t v163 = (int64x2_t)vtrn1q_s32(v155, v159);
      int16x8_t v33 = (int16x8_t)vtrn2q_s32(v155, v159);
      int16x8_t v27 = (int16x8_t)vzip1q_s64(v162, v160);
      int16x8_t v29 = (int16x8_t)vzip2q_s64(v162, v160);
      int16x8_t v30 = (int16x8_t)vzip1q_s64(v163, v161);
      int16x8_t v32 = (int16x8_t)vzip2q_s64(v163, v161);
      goto LABEL_64;
    case 15:
      mach_port_t v164 = (int16x8_t *)(v2 + v7 + v7);
      int16x8_t v165 = *v164;
      int16x8_t v166 = v164[1];
      mach_port_t v167 = (int16x8_t *)((char *)v164 + v7);
      int64x2_t v168 = (int64x2_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*(int16x8_t *)v2) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)v2);
      int64x2_t v169 = (int64x2_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*(int16x8_t *)(v2 + v7)) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)(v2 + v7));
      int64x2_t v170 = (int64x2_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(v165) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v165);
      int64x2_t v171 = (int64x2_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*v167) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)v167);
      int64x2_t v172 = (int64x2_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*(int16x8_t *)(v2 + 16)) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)(v2 + 16));
      int64x2_t v173 = (int64x2_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*(int16x8_t *)(v2 + v7 + 16)) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)(v2 + v7 + 16));
      int64x2_t v174 = (int64x2_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(v166) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v166);
      int64x2_t v175 = (int64x2_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(v167[1]) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v167[1]);
      if (v4)
      {
        int64x2_t v168 = (int64x2_t)vshlq_u16((uint16x8_t)v168, v12);
        int64x2_t v169 = (int64x2_t)vshlq_u16((uint16x8_t)v169, v12);
        int64x2_t v170 = (int64x2_t)vshlq_u16((uint16x8_t)v170, v12);
        int64x2_t v171 = (int64x2_t)vshlq_u16((uint16x8_t)v171, v12);
        int64x2_t v172 = (int64x2_t)vshlq_u16((uint16x8_t)v172, v12);
        int64x2_t v173 = (int64x2_t)vshlq_u16((uint16x8_t)v173, v12);
        int64x2_t v174 = (int64x2_t)vshlq_u16((uint16x8_t)v174, v12);
        int64x2_t v175 = (int64x2_t)vshlq_u16((uint16x8_t)v175, v12);
      }
      v26.i64[0] = v168.i64[0];
      v26.i64[1] = v170.i64[0];
      int16x8_t v27 = (int16x8_t)vzip2q_s64(v168, v170);
      v28.i64[0] = v169.i64[0];
      v28.i64[1] = v171.i64[0];
      v29.i64[0] = v172.i64[0];
      v29.i64[1] = v174.i64[0];
      int16x8_t v30 = (int16x8_t)vzip2q_s64(v169, v171);
      int16x8_t v31 = (int16x8_t)vzip2q_s64(v172, v174);
      v32.i64[0] = v173.i64[0];
      v32.i64[1] = v175.i64[0];
      int16x8_t v33 = (int16x8_t)vzip2q_s64(v173, v175);
      goto LABEL_64;
    case 16:
      unint64_t v176 = (int16x8_t *)(v2 + v7 + v7);
      int16x8_t v177 = *v176;
      int16x8_t v178 = v176[1];
      unint64_t v179 = (int16x8_t *)((char *)v176 + v7);
      int16x8_t v13 = (int16x8_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*(int16x8_t *)v2) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)v2);
      int16x8_t v15 = (int16x8_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*(int16x8_t *)(v2 + v7)) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)(v2 + v7));
      int16x8_t v18 = (int16x8_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(v177) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v177);
      int16x8_t v21 = (int16x8_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*v179) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)v179);
      int16x8_t v14 = (int16x8_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*(int16x8_t *)(v2 + 16)) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)(v2 + 16));
      int16x8_t v16 = (int16x8_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*(int16x8_t *)(v2 + v7 + 16)) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)(v2 + v7 + 16));
      int16x8_t v19 = (int16x8_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(v178) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v178);
      int16x8_t v22 = (int16x8_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(v179[1]) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v179[1]);
      if (v4)
      {
LABEL_37:
        int16x8_t v13 = (int16x8_t)vshlq_u16((uint16x8_t)v13, v12);
        int16x8_t v15 = (int16x8_t)vshlq_u16((uint16x8_t)v15, v12);
        int16x8_t v18 = (int16x8_t)vshlq_u16((uint16x8_t)v18, v12);
        int16x8_t v21 = (int16x8_t)vshlq_u16((uint16x8_t)v21, v12);
        int16x8_t v14 = (int16x8_t)vshlq_u16((uint16x8_t)v14, v12);
        int16x8_t v16 = (int16x8_t)vshlq_u16((uint16x8_t)v16, v12);
        int16x8_t v19 = (int16x8_t)vshlq_u16((uint16x8_t)v19, v12);
        int16x8_t v22 = (int16x8_t)vshlq_u16((uint16x8_t)v22, v12);
      }
      goto LABEL_38;
    case 17:
      int16x8_t v180 = *(int16x8_t *)v2;
      int16x8_t v181 = *(int16x8_t *)(v2 + v7);
      char v182 = (int16x8_t *)(v2 + v7 + v7);
      int16x8_t v183 = *v182;
      long long v184 = (int16x8_t *)((char *)v182 + v7);
      int16x8_t v185 = *v184;
      long long v186 = (int16x8_t *)((char *)v184 + v7);
      int16x8_t v187 = *v186;
      long long v188 = (int16x8_t *)((char *)v186 + v7);
      int16x8_t v189 = *v188;
      long long v190 = (int16x8_t *)((char *)v188 + v7);
      int16x8_t v191 = *v190;
      int16x8_t v192 = *(int16x8_t *)((char *)v190 + v7);
      if (v4)
      {
        int16x8_t v180 = (int16x8_t)vshlq_u16((uint16x8_t)v180, v12);
        int16x8_t v183 = (int16x8_t)vshlq_u16((uint16x8_t)v183, v12);
        int16x8_t v187 = (int16x8_t)vshlq_u16((uint16x8_t)v187, v12);
        int16x8_t v191 = (int16x8_t)vshlq_u16((uint16x8_t)v191, v12);
        int16x8_t v181 = (int16x8_t)vshlq_u16((uint16x8_t)v181, v12);
        int16x8_t v185 = (int16x8_t)vshlq_u16((uint16x8_t)v185, v12);
        int16x8_t v189 = (int16x8_t)vshlq_u16((uint16x8_t)v189, v12);
        int16x8_t v192 = (int16x8_t)vshlq_u16((uint16x8_t)v192, v12);
      }
      int16x8_t v27 = vtrn1q_s16(v187, v180);
      int32x4_t v193 = (int32x4_t)vtrn2q_s16(v187, v180);
      int16x8_t v30 = vtrn1q_s16(v191, v183);
      int32x4_t v194 = (int32x4_t)vtrn2q_s16(v191, v183);
      int32x4_t v195 = (int32x4_t)vtrn1q_s16(v181, v189);
      int16x8_t v31 = vtrn2q_s16(v181, v189);
      int32x4_t v196 = (int32x4_t)vtrn1q_s16(v185, v192);
      int16x8_t v33 = vtrn2q_s16(v185, v192);
      int16x8_t v26 = (int16x8_t)vtrn1q_s32(v193, v195);
      int16x8_t v29 = (int16x8_t)vtrn2q_s32(v193, v195);
      int16x8_t v28 = (int16x8_t)vtrn1q_s32(v194, v196);
      int16x8_t v32 = (int16x8_t)vtrn2q_s32(v194, v196);
      goto LABEL_61;
    case 18:
      int32x4_t v197 = *(int32x4_t *)v2;
      int32x4_t v198 = *(int32x4_t *)(v2 + 16);
      int32x4_t v199 = *(int32x4_t *)(v2 + v7);
      int32x4_t v200 = *(int32x4_t *)(v2 + v7 + 16);
      long long v201 = (int32x4_t *)(v2 + v7 + v7);
      int32x4_t v202 = *v201;
      int32x4_t v203 = v201[1];
      CFAllocatorRef v204 = (int32x4_t *)((char *)v201 + v7);
      int32x4_t v205 = *v204;
      int32x4_t v206 = v204[1];
      if (v4)
      {
        int32x4_t v197 = (int32x4_t)vshlq_u16((uint16x8_t)v197, v12);
        int32x4_t v199 = (int32x4_t)vshlq_u16((uint16x8_t)v199, v12);
        int32x4_t v202 = (int32x4_t)vshlq_u16((uint16x8_t)v202, v12);
        int32x4_t v205 = (int32x4_t)vshlq_u16((uint16x8_t)v205, v12);
        int32x4_t v198 = (int32x4_t)vshlq_u16((uint16x8_t)v198, v12);
        int32x4_t v200 = (int32x4_t)vshlq_u16((uint16x8_t)v200, v12);
        int32x4_t v203 = (int32x4_t)vshlq_u16((uint16x8_t)v203, v12);
        int32x4_t v206 = (int32x4_t)vshlq_u16((uint16x8_t)v206, v12);
      }
      int16x8_t v207 = (int16x8_t)vtrn1q_s32(v197, v198);
      int16x8_t v208 = (int16x8_t)vtrn2q_s32(v197, v198);
      int16x8_t v209 = (int16x8_t)vtrn1q_s32(v199, v200);
      int16x8_t v210 = (int16x8_t)vtrn2q_s32(v199, v200);
      int16x8_t v211 = (int16x8_t)vtrn1q_s32(v202, v203);
      int16x8_t v212 = (int16x8_t)vtrn2q_s32(v202, v203);
      int16x8_t v213 = (int16x8_t)vtrn1q_s32(v205, v206);
      int16x8_t v214 = (int16x8_t)vtrn2q_s32(v205, v206);
      int16x8_t v26 = vtrn1q_s16(v207, v211);
      int16x8_t v27 = vtrn2q_s16(v207, v211);
      int16x8_t v28 = vtrn1q_s16(v209, v213);
      int16x8_t v30 = vtrn2q_s16(v209, v213);
      int16x8_t v29 = vtrn1q_s16(v208, v212);
      int16x8_t v31 = vtrn2q_s16(v208, v212);
      int16x8_t v32 = vtrn1q_s16(v210, v214);
      int16x8_t v33 = vtrn2q_s16(v210, v214);
      goto LABEL_61;
    case 19:
      *(int16x4x3_t *)v26.i8 = vld3_s16((const __int16 *)v2);
      size_t v215 = (const __int16 *)(v2 + v7);
      int16x4x3_t v1032 = vld3_s16(v215);
      int v216 = (const __int16 *)((char *)v215 + v7);
      v26.i64[1] = (uint64_t)v1032.val[0];
      v27.i64[0] = v217;
      v27.i64[1] = (uint64_t)v1032.val[1];
      *(int16x4x3_t *)v28.i8 = vld3_s16(v216);
      BOOL v218 = (const __int16 *)((char *)v216 + v7);
      int16x4x3_t v1033 = vld3_s16(v218);
      v29.i64[0] = v219;
      v29.i64[1] = (uint64_t)v1032.val[2];
      v28.i64[1] = (uint64_t)v1033.val[0];
      v30.i64[0] = v220;
      v30.i64[1] = (uint64_t)v1033.val[1];
      v32.i64[0] = v221;
      v32.i64[1] = (uint64_t)v1033.val[2];
      int16x8_t v33 = 0uLL;
      if (v4)
      {
        int16x8_t v26 = (int16x8_t)vshlq_u16((uint16x8_t)v26, v12);
        int16x8_t v28 = (int16x8_t)vshlq_u16((uint16x8_t)v28, v12);
        int16x8_t v27 = (int16x8_t)vshlq_u16((uint16x8_t)v27, v12);
        int16x8_t v30 = (int16x8_t)vshlq_u16((uint16x8_t)v30, v12);
        int16x8_t v29 = (int16x8_t)vshlq_u16((uint16x8_t)v29, v12);
        int16x8_t v32 = (int16x8_t)vshlq_u16((uint16x8_t)v32, v12);
      }
      int16x8_t v31 = 0uLL;
      goto LABEL_61;
    case 20:
      int16x8_t v222 = *(int16x8_t *)v2;
      int16x8_t v223 = *(int16x8_t *)(v2 + v7);
      BOOL v224 = (int16x8_t *)(v2 + v7 + v7);
      int16x8_t v225 = *v224;
      int v226 = (int16x8_t *)((char *)v224 + v7);
      int16x8_t v227 = *v226;
      OSType v228 = (int16x8_t *)((char *)v226 + v7);
      int16x8_t v229 = *v228;
      v230 = (int16x8_t *)((char *)v228 + v7);
      int16x8_t v231 = *v230;
      v232 = (int16x8_t *)((char *)v230 + v7);
      int16x8_t v233 = *v232;
      int16x8_t v234 = *(int16x8_t *)((char *)v232 + v7);
      if (v4)
      {
        int16x8_t v222 = (int16x8_t)vshlq_u16((uint16x8_t)v222, v12);
        int16x8_t v225 = (int16x8_t)vshlq_u16((uint16x8_t)v225, v12);
        int16x8_t v223 = (int16x8_t)vshlq_u16((uint16x8_t)v223, v12);
        int16x8_t v227 = (int16x8_t)vshlq_u16((uint16x8_t)v227, v12);
        int16x8_t v229 = (int16x8_t)vshlq_u16((uint16x8_t)v229, v12);
        int16x8_t v233 = (int16x8_t)vshlq_u16((uint16x8_t)v233, v12);
        int16x8_t v231 = (int16x8_t)vshlq_u16((uint16x8_t)v231, v12);
        int16x8_t v234 = (int16x8_t)vshlq_u16((uint16x8_t)v234, v12);
      }
      int16x8_t v26 = vtrn1q_s16(v222, v229);
      int64x2_t v235 = (int64x2_t)vtrn2q_s16(v222, v229);
      int16x8_t v28 = vtrn1q_s16(v225, v233);
      int64x2_t v236 = (int64x2_t)vtrn2q_s16(v225, v233);
      int64x2_t v237 = (int64x2_t)vtrn1q_s16(v223, v231);
      int16x8_t v31 = vtrn2q_s16(v223, v231);
      int16x8_t v30 = vtrn1q_s16(v227, v234);
      int16x8_t v33 = vtrn2q_s16(v227, v234);
      int16x8_t v29 = (int16x8_t)vzip2q_s64(v237, v235);
      v27.i64[0] = v237.i64[0];
      v27.i64[1] = v235.i64[0];
      int16x8_t v32 = (int16x8_t)vzip2q_s64((int64x2_t)v30, v236);
      goto LABEL_54;
    case 21:
      int16x8_t v238 = *(int16x8_t *)v2;
      int16x8_t v239 = *(int16x8_t *)(v2 + 16);
      int16x8_t v240 = *(int16x8_t *)(v2 + v7);
      int16x8_t v241 = *(int16x8_t *)(v2 + v7 + 16);
      long long v242 = (int16x8_t *)(v2 + v7 + v7);
      int16x8_t v243 = *v242;
      int16x8_t v244 = v242[1];
      long long v245 = (int16x8_t *)((char *)v242 + v7);
      int16x8_t v246 = *v245;
      int16x8_t v30 = v245[1];
      if (v4)
      {
        int16x8_t v238 = (int16x8_t)vshlq_u16((uint16x8_t)v238, v12);
        int16x8_t v243 = (int16x8_t)vshlq_u16((uint16x8_t)v243, v12);
        int16x8_t v240 = (int16x8_t)vshlq_u16((uint16x8_t)v240, v12);
        int16x8_t v246 = (int16x8_t)vshlq_u16((uint16x8_t)v246, v12);
        int16x8_t v239 = (int16x8_t)vshlq_u16((uint16x8_t)v239, v12);
        int16x8_t v244 = (int16x8_t)vshlq_u16((uint16x8_t)v244, v12);
        int16x8_t v241 = (int16x8_t)vshlq_u16((uint16x8_t)v241, v12);
        int16x8_t v30 = (int16x8_t)vshlq_u16((uint16x8_t)v30, v12);
      }
      int16x8_t v26 = vtrn1q_s16(v238, v239);
      int64x2_t v247 = (int64x2_t)vtrn2q_s16(v238, v239);
      int16x8_t v28 = vtrn1q_s16(v243, v244);
      int64x2_t v236 = (int64x2_t)vtrn2q_s16(v243, v244);
      int64x2_t v248 = (int64x2_t)vtrn1q_s16(v240, v241);
      int16x8_t v31 = vtrn2q_s16(v240, v241);
      int64x2_t v249 = (int64x2_t)vtrn1q_s16(v246, v30);
      int16x8_t v33 = vtrn2q_s16(v246, v30);
      int16x8_t v29 = (int16x8_t)vzip2q_s64(v248, v247);
      v27.i64[0] = v248.i64[0];
      v27.i64[1] = v247.i64[0];
      int16x8_t v32 = (int16x8_t)vzip2q_s64(v249, v236);
      v30.i64[0] = v249.i64[0];
LABEL_54:
      v30.i64[1] = v236.i64[0];
      goto LABEL_61;
    case 22:
      int32x4_t v250 = *(int32x4_t *)v2;
      int32x4_t v251 = *(int32x4_t *)(v2 + v7);
      double v252 = (int32x4_t *)(v2 + v7 + v7);
      int32x4_t v253 = *v252;
      unint64_t v254 = (int32x4_t *)((char *)v252 + v7);
      int32x4_t v255 = *v254;
      uint64_t v256 = (int32x4_t *)((char *)v254 + v7);
      int32x4_t v257 = *v256;
      uint64_t v258 = (int32x4_t *)((char *)v256 + v7);
      int32x4_t v259 = *v258;
      v260 = (int32x4_t *)((char *)v258 + v7);
      int32x4_t v261 = *v260;
      int32x4_t v262 = *(int32x4_t *)((char *)v260 + v7);
      if (v4)
      {
        int32x4_t v250 = (int32x4_t)vshlq_u16((uint16x8_t)v250, v12);
        int32x4_t v251 = (int32x4_t)vshlq_u16((uint16x8_t)v251, v12);
        int32x4_t v253 = (int32x4_t)vshlq_u16((uint16x8_t)v253, v12);
        int32x4_t v255 = (int32x4_t)vshlq_u16((uint16x8_t)v255, v12);
        int32x4_t v257 = (int32x4_t)vshlq_u16((uint16x8_t)v257, v12);
        int32x4_t v259 = (int32x4_t)vshlq_u16((uint16x8_t)v259, v12);
        int32x4_t v261 = (int32x4_t)vshlq_u16((uint16x8_t)v261, v12);
        int32x4_t v262 = (int32x4_t)vshlq_u16((uint16x8_t)v262, v12);
      }
      int16x8_t v26 = (int16x8_t)vtrn1q_s32(v250, v257);
      int64x2_t v263 = (int64x2_t)vtrn2q_s32(v250, v257);
      int16x8_t v28 = (int16x8_t)vtrn1q_s32(v251, v259);
      int64x2_t v264 = (int64x2_t)vtrn2q_s32(v251, v259);
      int64x2_t v265 = (int64x2_t)vtrn1q_s32(v253, v261);
      int16x8_t v31 = (int16x8_t)vtrn2q_s32(v253, v261);
      int64x2_t v266 = (int64x2_t)vtrn1q_s32(v255, v262);
      int16x8_t v33 = (int16x8_t)vtrn2q_s32(v255, v262);
      int16x8_t v27 = (int16x8_t)vzip1q_s64(v265, v263);
      int16x8_t v29 = (int16x8_t)vzip2q_s64(v265, v263);
      int16x8_t v30 = (int16x8_t)vzip1q_s64(v266, v264);
      int16x8_t v32 = (int16x8_t)vzip2q_s64(v266, v264);
      goto LABEL_61;
    case 23:
      uint64_t v267 = (int16x8_t *)(v2 + v7 + v7);
      int16x8_t v268 = *v267;
      int16x8_t v269 = v267[1];
      v270 = (int16x8_t *)((char *)v267 + v7);
      int32x4_t v271 = (int32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*(int16x8_t *)v2) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)v2);
      int32x4_t v272 = (int32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*(int16x8_t *)(v2 + v7)) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)(v2 + v7));
      int32x4_t v273 = (int32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(v268) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v268);
      int32x4_t v274 = (int32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*v270) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)v270);
      int32x4_t v275 = (int32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*(int16x8_t *)(v2 + 16)) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)(v2 + 16));
      int32x4_t v276 = (int32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(*(int16x8_t *)(v2 + v7 + 16)) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), *(int8x16_t *)(v2 + v7 + 16));
      int32x4_t v277 = (int32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(v269) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v269);
      int32x4_t v278 = (int32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s16(v270[1]) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v270[1]);
      if (v4)
      {
        int32x4_t v271 = (int32x4_t)vshlq_u16((uint16x8_t)v271, v12);
        int32x4_t v272 = (int32x4_t)vshlq_u16((uint16x8_t)v272, v12);
        int32x4_t v273 = (int32x4_t)vshlq_u16((uint16x8_t)v273, v12);
        int32x4_t v274 = (int32x4_t)vshlq_u16((uint16x8_t)v274, v12);
        int32x4_t v275 = (int32x4_t)vshlq_u16((uint16x8_t)v275, v12);
        int32x4_t v276 = (int32x4_t)vshlq_u16((uint16x8_t)v276, v12);
        int32x4_t v277 = (int32x4_t)vshlq_u16((uint16x8_t)v277, v12);
        int32x4_t v278 = (int32x4_t)vshlq_u16((uint16x8_t)v278, v12);
      }
      int16x8_t v279 = (int16x8_t)vtrn1q_s32(v271, v275);
      int16x8_t v280 = (int16x8_t)vtrn2q_s32(v271, v275);
      int16x8_t v281 = (int16x8_t)vtrn1q_s32(v272, v276);
      int16x8_t v282 = (int16x8_t)vtrn2q_s32(v272, v276);
      int16x8_t v283 = (int16x8_t)vtrn1q_s32(v273, v277);
      int16x8_t v284 = (int16x8_t)vtrn2q_s32(v273, v277);
      int16x8_t v285 = (int16x8_t)vtrn1q_s32(v274, v278);
      int16x8_t v286 = (int16x8_t)vtrn2q_s32(v274, v278);
      int16x8_t v26 = vtrn1q_s16(v279, v283);
      int16x8_t v27 = vtrn2q_s16(v279, v283);
      int16x8_t v28 = vtrn1q_s16(v281, v285);
      int16x8_t v30 = vtrn2q_s16(v281, v285);
      int16x8_t v29 = vtrn1q_s16(v280, v284);
      int16x8_t v31 = vtrn2q_s16(v280, v284);
      int16x8_t v32 = vtrn1q_s16(v282, v286);
      int16x8_t v33 = vtrn2q_s16(v282, v286);
      goto LABEL_61;
    default:
      return v11;
  }
  do
  {
    int v346 = *v344;
    v344 += 4;
    int v345 = v346;
    if ((unsigned __int16)(v346 + 2) >= 5u)
    {
      int v348 = (unsigned __int16)v305;
      if ((unsigned __int16)v305 <= 0xFu)
      {
        if ((unsigned __int16)v314 <= 0xFu)
        {
          if (v325 <= 0xFu)
          {
            unsigned int v349 = *((unsigned __int16 *)a1 + 33);
            if (v349 <= 0xF)
            {
              *double v3 = v343 + 64;
              v3[1] = *((unsigned char *)a1 + 42) + 16 * *((unsigned char *)a1 + 50);
              uint64_t v353 = (unint64_t *)(v3 + 3);
              v3[2] = *((unsigned char *)a1 + 58) + 16 * *((unsigned char *)a1 + 66);
              goto LABEL_130;
            }
            goto LABEL_120;
          }
          if (v325 != 16) {
            return 4294951894;
          }
LABEL_119:
          unsigned int v349 = *((unsigned __int16 *)a1 + 33);
LABEL_120:
          if (v349 <= 0x10)
          {
            *double v3 = v343 + 80;
            int v350 = *((unsigned __int16 *)a1 + 21) + (*((unsigned __int16 *)a1 + 25) << 6);
            int v351 = v350 + (*((unsigned __int16 *)a1 + 29) << 12);
            int v352 = v351 + (*((unsigned __int16 *)a1 + 33) << 18);
            v3[1] = v350;
            v3[2] = BYTE1(v351);
            uint64_t v353 = (unint64_t *)(v3 + 4);
            v3[3] = BYTE2(v352);
            goto LABEL_130;
          }
          return 4294951894;
        }
        uint64_t v11 = 4294951894;
        if ((unsigned __int16)v314 != 16) {
          return v11;
        }
      }
      else
      {
        uint64_t v11 = 4294951894;
        if (v348 != 16 || (unsigned __int16)v314 > 0x10u) {
          return v11;
        }
      }
      if (v325 > 0x10u) {
        return v11;
      }
      goto LABEL_119;
    }
    if (v345)
    {
      int v340 = v339;
      ++v342;
    }
    unsigned int v341 = 5 * v341 + v345 + 2;
    ++v339;
  }
  while (v339 != 4);
  if (v342 == 1)
  {
    unsigned int v354 = (unsigned __int16)v301[4 * v340 + 1];
    if (v354 != 0xFFFF && v354 != 1) {
      goto LABEL_129;
    }
    int v347 = ((v354 >> 11) & 0x10 | (32 * v340)) + v343 + 128;
LABEL_128:
    *double v3 = v347;
    uint64_t v353 = (unint64_t *)(v3 + 1);
  }
  else
  {
    if (!v342)
    {
      LOBYTE(v347) = v343 + 48;
      goto LABEL_128;
    }
LABEL_129:
    *double v3 = ((v341 >> 4) & 0xF0) + v343;
    uint64_t v353 = (unint64_t *)(v3 + 2);
    v3[1] = v341;
  }
LABEL_130:
  uint64_t v356 = 0;
  while (2)
  {
    if (v343)
    {
      int v357 = &a1[v356];
      if (v5 <= 5)
      {
        LOWORD(v357) = *((_WORD *)v357 + 23);
        goto LABEL_139;
      }
      int v358 = *((__int16 *)v357 + 24);
      if (v358 >= 0) {
        LOWORD(v357) = *((_WORD *)v357 + 24);
      }
      else {
        LODWORD(v357) = -v358;
      }
      int v359 = (v358 >> 9) & 0x40;
      if ((unsigned __int16)v357 > 0x3Fu)
      {
        if (((unsigned __int16)v357 & 0xC000) != 0)
        {
          unsigned int v362 = HIWORD(a1[v356 + 5]);
          *(unsigned char *)uint64_t v353 = 0;
          BOOL v361 = (unint64_t *)((char *)v353 + 2);
          *((unsigned char *)v353 + 1) = v362;
          LODWORD(v357) = v362 >> 8;
          uint64_t v360 = 3;
        }
        else
        {
          *(unsigned char *)uint64_t v353 = v357 & 0x3F | v359 | 0x80;
          BOOL v361 = (unint64_t *)((char *)v353 + 1);
          LOWORD(v357) = (unsigned __int16)v357 >> 6;
          uint64_t v360 = 2;
        }
      }
      else
      {
        LOBYTE(v357) = v359 + (_BYTE)v357;
LABEL_139:
        uint64_t v360 = 1;
        BOOL v361 = v353;
      }
      uint64_t v353 = (unint64_t *)((char *)v353 + v360);
      *(unsigned char *)BOOL v361 = (_BYTE)v357;
    }
    v343 >>= 1;
    if (++v356 != 4) {
      continue;
    }
    break;
  }
  if (!v353) {
    return 4294951894;
  }
  char v363 = (const __int16 *)a1 + 23;
  int16x8_t v364 = vld1q_dup_s16(v363);
  int8x16_t v365 = (int8x16_t)vsubq_s16(v26, v364);
  int8x16_t v366 = (int8x16_t)vsubq_s16(v28, v364);
  unint64_t v367 = (const __int16 *)a1 + 27;
  int16x8_t v368 = vld1q_dup_s16(v367);
  int8x16_t v369 = (int8x16_t)vsubq_s16(v27, v368);
  int8x16_t v370 = (int8x16_t)vsubq_s16(v30, v368);
  uint64_t v371 = (const __int16 *)a1 + 31;
  int16x8_t v372 = vld1q_dup_s16(v371);
  int8x16_t v373 = (int8x16_t)vsubq_s16(v29, v372);
  int8x16_t v374 = (int8x16_t)vsubq_s16(v32, v372);
  uint64_t v375 = (const __int16 *)a1 + 35;
  int16x8_t v376 = vld1q_dup_s16(v375);
  int8x16_t v377 = (int8x16_t)vsubq_s16(v31, v376);
  int8x16_t v378 = (int8x16_t)vsubq_s16(v33, v376);
  int v379 = *((unsigned __int16 *)a1 + 21);
  if (v5 <= 0x10 && (int v380 = *((_DWORD *)a1 + 27)) != 0)
  {
    int v381 = v379 - v380 * v379 / 8;
    uint16x8_t v382 = (uint16x8_t)vdupq_n_s16(v380 * v379 / -8);
    int8x16_t v383 = (int8x16_t)vshlq_u16((uint16x8_t)v365, v382);
    switch(v381)
    {
      case 0:
        break;
      case 1:
        int8x16_t v384 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v383, 0xFuLL), v383);
        v385.i64[0] = 0xFFFFLL;
        v385.i64[1] = 0xFFFFLL;
        int8x16_t v386 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v384, 0x1EuLL), (int8x16_t)vdupq_n_s64(0x3FFFCuLL)), vandq_s8(v384, v385));
        *(_DWORD *)uint64_t v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v386, v386, 8uLL).i64[0], 4uLL), *(int8x8_t *)v386.i8).u32[0];
        uint64_t v353 = (unint64_t *)((char *)v353 + 1);
        int8x16_t v387 = (int8x16_t)vshlq_u16((uint16x8_t)v366, v382);
LABEL_151:
        int8x16_t v388 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v387, 0xFuLL), v387);
        v389.i64[0] = 0xFFFFLL;
        v389.i64[1] = 0xFFFFLL;
        int8x16_t v390 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v388, 0x1EuLL), (int8x16_t)vdupq_n_s64(0x3FFFCuLL)), vandq_s8(v388, v389));
        unsigned __int32 v391 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v390, v390, 8uLL).i64[0], 4uLL), *(int8x8_t *)v390.i8).u32[0];
        uint64_t v392 = 1;
        goto LABEL_166;
      case 2:
        int8x16_t v399 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v383, 0xEuLL), v383);
        v400.i64[0] = 0xFFFFLL;
        v400.i64[1] = 0xFFFFLL;
        int8x16_t v401 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v399, 0x1CuLL), (int8x16_t)vdupq_n_s64(0xFFFF0uLL)), vandq_s8(v399, v400));
        *(_DWORD *)uint64_t v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v401, v401, 8uLL).i64[0], 8uLL), *(int8x8_t *)v401.i8).u32[0];
        uint64_t v353 = (unint64_t *)((char *)v353 + 2);
        int8x16_t v387 = (int8x16_t)vshlq_u16((uint16x8_t)v366, v382);
LABEL_163:
        int8x16_t v402 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v387, 0xEuLL), v387);
        v403.i64[0] = 0xFFFFLL;
        v403.i64[1] = 0xFFFFLL;
        int8x16_t v404 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v402, 0x1CuLL), (int8x16_t)vdupq_n_s64(0xFFFF0uLL)), vandq_s8(v402, v403));
        unsigned __int32 v391 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v404, v404, 8uLL).i64[0], 8uLL), *(int8x8_t *)v404.i8).u32[0];
        uint64_t v392 = 2;
        goto LABEL_166;
      case 3:
        int8x16_t v405 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v383, 0xDuLL), v383);
        v406.i64[0] = 0xFFFFLL;
        v406.i64[1] = 0xFFFFLL;
        int8x16_t v407 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v405, 0x1AuLL), (int8x16_t)vdupq_n_s64(0x3FFFC0uLL)), vandq_s8(v405, v406));
        *(_DWORD *)uint64_t v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v407, v407, 8uLL).i64[0], 0xCuLL), *(int8x8_t *)v407.i8).u32[0];
        uint64_t v353 = (unint64_t *)((char *)v353 + 3);
        int8x16_t v387 = (int8x16_t)vshlq_u16((uint16x8_t)v366, v382);
LABEL_165:
        int8x16_t v408 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v387, 0xDuLL), v387);
        v409.i64[0] = 0xFFFFLL;
        v409.i64[1] = 0xFFFFLL;
        int8x16_t v410 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v408, 0x1AuLL), (int8x16_t)vdupq_n_s64(0x3FFFC0uLL)), vandq_s8(v408, v409));
        unsigned __int32 v391 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v410, v410, 8uLL).i64[0], 0xCuLL), *(int8x8_t *)v410.i8).u32[0];
        uint64_t v392 = 3;
LABEL_166:
        *(_DWORD *)uint64_t v353 = v391;
        uint64_t v353 = (unint64_t *)((char *)v353 + v392);
        break;
      case 4:
        int8x16_t v411 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v383, 0xCuLL), v383);
        v412.i64[0] = 16776960;
        v412.i64[1] = 16776960;
        int8x16_t v413 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v411, 0x18uLL), v412);
        v412.i64[0] = 0xFFFFLL;
        v412.i64[1] = 0xFFFFLL;
        int8x16_t v414 = vorrq_s8(v413, vandq_s8(v411, v412));
        *(_DWORD *)uint64_t v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v414, v414, 8uLL).i64[0], 0x10uLL), *(int8x8_t *)v414.i8).u32[0];
        uint64_t v353 = (unint64_t *)((char *)v353 + 4);
        int8x16_t v387 = (int8x16_t)vshlq_u16((uint16x8_t)v366, v382);
LABEL_168:
        int8x16_t v415 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v387, 0xCuLL), v387);
        v416.i64[0] = 16776960;
        v416.i64[1] = 16776960;
        int8x16_t v417 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v415, 0x18uLL), v416);
        v416.i64[0] = 0xFFFFLL;
        v416.i64[1] = 0xFFFFLL;
        int8x16_t v418 = vorrq_s8(v417, vandq_s8(v415, v416));
        *(_DWORD *)uint64_t v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v418, v418, 8uLL).i64[0], 0x10uLL), *(int8x8_t *)v418.i8).u32[0];
        uint64_t v353 = (unint64_t *)((char *)v353 + 4);
        break;
      case 5:
        int8x16_t v419 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v383, 0xBuLL), v383);
        v420.i64[0] = 0xFFFFLL;
        v420.i64[1] = 0xFFFFLL;
        int8x16_t v421 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v419, 0x16uLL), (int8x16_t)vdupq_n_s64(0x3FFFC00uLL)), vandq_s8(v419, v420));
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v421, v421, 8uLL).i64[0], 0x14uLL), *(int8x8_t *)v421.i8);
        uint64_t v353 = (unint64_t *)((char *)v353 + 5);
        int8x16_t v387 = (int8x16_t)vshlq_u16((uint16x8_t)v366, v382);
LABEL_170:
        int8x16_t v422 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v387, 0xBuLL), v387);
        v423.i64[0] = 0xFFFFLL;
        v423.i64[1] = 0xFFFFLL;
        int8x16_t v424 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v422, 0x16uLL), (int8x16_t)vdupq_n_s64(0x3FFFC00uLL)), vandq_s8(v422, v423));
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v424, v424, 8uLL).i64[0], 0x14uLL), *(int8x8_t *)v424.i8);
        uint64_t v353 = (unint64_t *)((char *)v353 + 5);
        break;
      case 6:
        int8x16_t v425 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v383, 0xAuLL), v383);
        v426.i64[0] = 0xFFFFLL;
        v426.i64[1] = 0xFFFFLL;
        int8x16_t v427 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v425, 0x14uLL), (int8x16_t)vdupq_n_s64(0xFFFF000uLL)), vandq_s8(v425, v426));
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v427, v427, 8uLL).i64[0], 0x18uLL), *(int8x8_t *)v427.i8);
        uint64_t v353 = (unint64_t *)((char *)v353 + 6);
        int8x16_t v387 = (int8x16_t)vshlq_u16((uint16x8_t)v366, v382);
LABEL_172:
        int8x16_t v428 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v387, 0xAuLL), v387);
        v429.i64[0] = 0xFFFFLL;
        v429.i64[1] = 0xFFFFLL;
        int8x16_t v430 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v428, 0x14uLL), (int8x16_t)vdupq_n_s64(0xFFFF000uLL)), vandq_s8(v428, v429));
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v430, v430, 8uLL).i64[0], 0x18uLL), *(int8x8_t *)v430.i8);
        uint64_t v353 = (unint64_t *)((char *)v353 + 6);
        break;
      case 7:
        int8x16_t v431 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v383, 9uLL), v383);
        v432.i64[0] = 0xFFFFLL;
        v432.i64[1] = 0xFFFFLL;
        int8x16_t v433 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v431, 0x12uLL), (int8x16_t)vdupq_n_s64(0x3FFFC000uLL)), vandq_s8(v431, v432));
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v433, v433, 8uLL).i64[0], 0x1CuLL), *(int8x8_t *)v433.i8);
        uint64_t v353 = (unint64_t *)((char *)v353 + 7);
        int8x16_t v387 = (int8x16_t)vshlq_u16((uint16x8_t)v366, v382);
LABEL_174:
        int8x16_t v434 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v387, 9uLL), v387);
        v435.i64[0] = 0xFFFFLL;
        v435.i64[1] = 0xFFFFLL;
        int8x16_t v436 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v434, 0x12uLL), (int8x16_t)vdupq_n_s64(0x3FFFC000uLL)), vandq_s8(v434, v435));
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v436, v436, 8uLL).i64[0], 0x1CuLL), *(int8x8_t *)v436.i8);
        uint64_t v353 = (unint64_t *)((char *)v353 + 7);
        break;
      case 8:
        int8x16_t v437 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v383, 8uLL), v383);
        v438.i64[0] = 4294901760;
        v438.i64[1] = 4294901760;
        int8x16_t v439 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v437, 0x10uLL), v438);
        v438.i64[0] = 0xFFFFLL;
        v438.i64[1] = 0xFFFFLL;
        int8x16_t v440 = vorrq_s8(v439, vandq_s8(v437, v438));
        *v353++ = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v440, v440, 8uLL).i64[0], 0x20uLL), *(int8x8_t *)v440.i8);
        int8x16_t v387 = (int8x16_t)vshlq_u16((uint16x8_t)v366, v382);
LABEL_176:
        int8x16_t v441 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v387, 8uLL), v387);
        v442.i64[0] = 4294901760;
        v442.i64[1] = 4294901760;
        int8x16_t v443 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v441, 0x10uLL), v442);
        v442.i64[0] = 0xFFFFLL;
        v442.i64[1] = 0xFFFFLL;
        int8x16_t v444 = vorrq_s8(v443, vandq_s8(v441, v442));
        *v353++ = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v444, v444, 8uLL).i64[0], 0x20uLL), *(int8x8_t *)v444.i8);
        break;
      case 9:
        v445.i64[0] = 0xFFFF0000FFFFLL;
        v445.i64[1] = 0xFFFF0000FFFFLL;
        int8x16_t v446 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v383, 7uLL), (int8x16_t)vdupq_n_s64(0x1FFFE0001FFFE00uLL)), vandq_s8(v383, v445));
        int8x16_t v447 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v446, 0xEuLL), (int8x16_t)vdupq_n_s64(0x7FFFFFC0000uLL)), vandq_s8(v446, (int8x16_t)vdupq_n_s64(0x1FFFFFFuLL)));
        v445.i64[0] = vextq_s8(v447, v447, 8uLL).u64[0];
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v445.i64[0], 0x24uLL), *(int8x8_t *)v447.i8);
        *((unsigned char *)v353 + 8) = vshrd_n_u64(v445.u64[0], 0x1CuLL);
        uint64_t v353 = (unint64_t *)((char *)v353 + 9);
        int8x16_t v387 = (int8x16_t)vshlq_u16((uint16x8_t)v366, v382);
LABEL_178:
        v448.i64[0] = 0xFFFF0000FFFFLL;
        v448.i64[1] = 0xFFFF0000FFFFLL;
        int8x16_t v449 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v387, 7uLL), (int8x16_t)vdupq_n_s64(0x1FFFE0001FFFE00uLL)), vandq_s8(v387, v448));
        int8x16_t v450 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v449, 0xEuLL), (int8x16_t)vdupq_n_s64(0x7FFFFFC0000uLL)), vandq_s8(v449, (int8x16_t)vdupq_n_s64(0x1FFFFFFuLL)));
        v448.i64[0] = vextq_s8(v450, v450, 8uLL).u64[0];
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v448.i64[0], 0x24uLL), *(int8x8_t *)v450.i8);
        *((unsigned char *)v353 + 8) = vshrd_n_u64(v448.u64[0], 0x1CuLL);
        uint64_t v353 = (unint64_t *)((char *)v353 + 9);
        break;
      case 10:
        v451.i64[0] = 0xFFFF0000FFFFLL;
        v451.i64[1] = 0xFFFF0000FFFFLL;
        int8x16_t v452 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v383, 6uLL), (int8x16_t)vdupq_n_s64(0x3FFFC0003FFFC00uLL)), vandq_s8(v383, v451));
        int8x16_t v453 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v452, 0xCuLL), (int8x16_t)vdupq_n_s64(0x3FFFFFF00000uLL)), vandq_s8(v452, (int8x16_t)vdupq_n_s64(0x3FFFFFFuLL)));
        v451.i64[0] = vextq_s8(v453, v453, 8uLL).u64[0];
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v451.i64[0], 0x28uLL), *(int8x8_t *)v453.i8);
        *((_WORD *)v353 + 4) = vshrd_n_u64(v451.u64[0], 0x18uLL);
        uint64_t v353 = (unint64_t *)((char *)v353 + 10);
        int8x16_t v387 = (int8x16_t)vshlq_u16((uint16x8_t)v366, v382);
LABEL_180:
        v454.i64[0] = 0xFFFF0000FFFFLL;
        v454.i64[1] = 0xFFFF0000FFFFLL;
        int8x16_t v455 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v387, 6uLL), (int8x16_t)vdupq_n_s64(0x3FFFC0003FFFC00uLL)), vandq_s8(v387, v454));
        int8x16_t v456 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v455, 0xCuLL), (int8x16_t)vdupq_n_s64(0x3FFFFFF00000uLL)), vandq_s8(v455, (int8x16_t)vdupq_n_s64(0x3FFFFFFuLL)));
        v454.i64[0] = vextq_s8(v456, v456, 8uLL).u64[0];
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v454.i64[0], 0x28uLL), *(int8x8_t *)v456.i8);
        *((_WORD *)v353 + 4) = vshrd_n_u64(v454.u64[0], 0x18uLL);
        uint64_t v353 = (unint64_t *)((char *)v353 + 10);
        break;
      default:
        uint16x8_t v953 = v382;
        uint16x8_t v954 = (uint16x8_t)v366;
        int8x16_t v958 = v369;
        int8x16_t v964 = v370;
        int8x16_t v971 = v373;
        int8x16_t v980 = v374;
        int8x16_t v990 = v377;
        int8x16_t v1002 = v378;
        uint64_t v398 = 0;
        int64x2_t v1030 = 0uLL;
        do
        {
          int8x16_t v1020 = v383;
          v1030.i16[v398] = *(_WORD *)((unint64_t)&v1020 & 0xFFFFFFFFFFFFFFF1 | (2 * (v398 & 7)));
          ++v398;
        }
        while (v398 != 8);
        uint64_t v353 = vectorWritePacked(v353, (uint64_t)&v1030, v381);
        int8x16_t v387 = (int8x16_t)vshlq_u16(v954, v953);
        int8x16_t v377 = v990;
        int8x16_t v378 = v1002;
        int8x16_t v373 = v971;
        int8x16_t v374 = v980;
        int8x16_t v369 = v958;
        int8x16_t v370 = v964;
        switch(v381)
        {
          case 0:
            goto LABEL_181;
          case 1:
            goto LABEL_151;
          case 2:
            goto LABEL_163;
          case 3:
            goto LABEL_165;
          case 4:
            goto LABEL_168;
          case 5:
            goto LABEL_170;
          case 6:
            goto LABEL_172;
          case 7:
            goto LABEL_174;
          case 8:
            goto LABEL_176;
          case 9:
            goto LABEL_178;
          case 10:
            goto LABEL_180;
          default:
            uint64_t v949 = 0;
            int64x2_t v1030 = 0uLL;
            do
            {
              int8x16_t v1019 = v387;
              v1030.i16[v949] = *(_WORD *)((unint64_t)&v1019 & 0xFFFFFFFFFFFFFFF1 | (2 * (v949 & 7)));
              ++v949;
            }
            while (v949 != 8);
            uint64_t v353 = vectorWritePacked(v353, (uint64_t)&v1030, v381);
            int8x16_t v377 = v990;
            int8x16_t v378 = v1002;
            int8x16_t v373 = v971;
            int8x16_t v374 = v980;
            int8x16_t v369 = v958;
            int8x16_t v370 = v964;
            break;
        }
        break;
    }
LABEL_181:
    int v457 = *((unsigned __int16 *)a1 + 25);
    int v458 = v457 - *((_DWORD *)a1 + 27) * v457 / 8;
    uint16x8_t v459 = (uint16x8_t)vdupq_n_s16(*((_DWORD *)a1 + 27) * v457 / -8);
    int8x16_t v460 = (int8x16_t)vshlq_u16((uint16x8_t)v369, v459);
    switch(v458)
    {
      case 0:
        break;
      case 1:
        int8x16_t v461 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v460, 0xFuLL), v460);
        v462.i64[0] = 0xFFFFLL;
        v462.i64[1] = 0xFFFFLL;
        int8x16_t v463 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v461, 0x1EuLL), (int8x16_t)vdupq_n_s64(0x3FFFCuLL)), vandq_s8(v461, v462));
        *(_DWORD *)uint64_t v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v463, v463, 8uLL).i64[0], 4uLL), *(int8x8_t *)v463.i8).u32[0];
        uint64_t v353 = (unint64_t *)((char *)v353 + 1);
        int8x16_t v464 = (int8x16_t)vshlq_u16((uint16x8_t)v370, v459);
LABEL_183:
        int8x16_t v465 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v464, 0xFuLL), v464);
        v466.i64[0] = 0xFFFFLL;
        v466.i64[1] = 0xFFFFLL;
        int8x16_t v467 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v465, 0x1EuLL), (int8x16_t)vdupq_n_s64(0x3FFFCuLL)), vandq_s8(v465, v466));
        unsigned __int32 v468 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v467, v467, 8uLL).i64[0], 4uLL), *(int8x8_t *)v467.i8).u32[0];
        uint64_t v469 = 1;
        goto LABEL_206;
      case 2:
        int8x16_t v507 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v460, 0xEuLL), v460);
        v508.i64[0] = 0xFFFFLL;
        v508.i64[1] = 0xFFFFLL;
        int8x16_t v509 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v507, 0x1CuLL), (int8x16_t)vdupq_n_s64(0xFFFF0uLL)), vandq_s8(v507, v508));
        *(_DWORD *)uint64_t v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v509, v509, 8uLL).i64[0], 8uLL), *(int8x8_t *)v509.i8).u32[0];
        uint64_t v353 = (unint64_t *)((char *)v353 + 2);
        int8x16_t v464 = (int8x16_t)vshlq_u16((uint16x8_t)v370, v459);
LABEL_203:
        int8x16_t v510 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v464, 0xEuLL), v464);
        v511.i64[0] = 0xFFFFLL;
        v511.i64[1] = 0xFFFFLL;
        int8x16_t v512 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v510, 0x1CuLL), (int8x16_t)vdupq_n_s64(0xFFFF0uLL)), vandq_s8(v510, v511));
        unsigned __int32 v468 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v512, v512, 8uLL).i64[0], 8uLL), *(int8x8_t *)v512.i8).u32[0];
        uint64_t v469 = 2;
        goto LABEL_206;
      case 3:
        int8x16_t v513 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v460, 0xDuLL), v460);
        v514.i64[0] = 0xFFFFLL;
        v514.i64[1] = 0xFFFFLL;
        int8x16_t v515 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v513, 0x1AuLL), (int8x16_t)vdupq_n_s64(0x3FFFC0uLL)), vandq_s8(v513, v514));
        *(_DWORD *)uint64_t v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v515, v515, 8uLL).i64[0], 0xCuLL), *(int8x8_t *)v515.i8).u32[0];
        uint64_t v353 = (unint64_t *)((char *)v353 + 3);
        int8x16_t v464 = (int8x16_t)vshlq_u16((uint16x8_t)v370, v459);
LABEL_205:
        int8x16_t v516 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v464, 0xDuLL), v464);
        v517.i64[0] = 0xFFFFLL;
        v517.i64[1] = 0xFFFFLL;
        int8x16_t v518 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v516, 0x1AuLL), (int8x16_t)vdupq_n_s64(0x3FFFC0uLL)), vandq_s8(v516, v517));
        unsigned __int32 v468 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v518, v518, 8uLL).i64[0], 0xCuLL), *(int8x8_t *)v518.i8).u32[0];
        uint64_t v469 = 3;
LABEL_206:
        *(_DWORD *)uint64_t v353 = v468;
        uint64_t v353 = (unint64_t *)((char *)v353 + v469);
        break;
      case 4:
        int8x16_t v519 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v460, 0xCuLL), v460);
        v520.i64[0] = 16776960;
        v520.i64[1] = 16776960;
        int8x16_t v521 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v519, 0x18uLL), v520);
        v520.i64[0] = 0xFFFFLL;
        v520.i64[1] = 0xFFFFLL;
        int8x16_t v522 = vorrq_s8(v521, vandq_s8(v519, v520));
        *(_DWORD *)uint64_t v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v522, v522, 8uLL).i64[0], 0x10uLL), *(int8x8_t *)v522.i8).u32[0];
        uint64_t v353 = (unint64_t *)((char *)v353 + 4);
        int8x16_t v464 = (int8x16_t)vshlq_u16((uint16x8_t)v370, v459);
LABEL_208:
        int8x16_t v523 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v464, 0xCuLL), v464);
        v524.i64[0] = 16776960;
        v524.i64[1] = 16776960;
        int8x16_t v525 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v523, 0x18uLL), v524);
        v524.i64[0] = 0xFFFFLL;
        v524.i64[1] = 0xFFFFLL;
        int8x16_t v526 = vorrq_s8(v525, vandq_s8(v523, v524));
        *(_DWORD *)uint64_t v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v526, v526, 8uLL).i64[0], 0x10uLL), *(int8x8_t *)v526.i8).u32[0];
        uint64_t v353 = (unint64_t *)((char *)v353 + 4);
        break;
      case 5:
        int8x16_t v527 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v460, 0xBuLL), v460);
        v528.i64[0] = 0xFFFFLL;
        v528.i64[1] = 0xFFFFLL;
        int8x16_t v529 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v527, 0x16uLL), (int8x16_t)vdupq_n_s64(0x3FFFC00uLL)), vandq_s8(v527, v528));
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v529, v529, 8uLL).i64[0], 0x14uLL), *(int8x8_t *)v529.i8);
        uint64_t v353 = (unint64_t *)((char *)v353 + 5);
        int8x16_t v464 = (int8x16_t)vshlq_u16((uint16x8_t)v370, v459);
LABEL_210:
        int8x16_t v530 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v464, 0xBuLL), v464);
        v531.i64[0] = 0xFFFFLL;
        v531.i64[1] = 0xFFFFLL;
        int8x16_t v532 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v530, 0x16uLL), (int8x16_t)vdupq_n_s64(0x3FFFC00uLL)), vandq_s8(v530, v531));
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v532, v532, 8uLL).i64[0], 0x14uLL), *(int8x8_t *)v532.i8);
        uint64_t v353 = (unint64_t *)((char *)v353 + 5);
        break;
      case 6:
        int8x16_t v533 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v460, 0xAuLL), v460);
        v534.i64[0] = 0xFFFFLL;
        v534.i64[1] = 0xFFFFLL;
        int8x16_t v535 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v533, 0x14uLL), (int8x16_t)vdupq_n_s64(0xFFFF000uLL)), vandq_s8(v533, v534));
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v535, v535, 8uLL).i64[0], 0x18uLL), *(int8x8_t *)v535.i8);
        uint64_t v353 = (unint64_t *)((char *)v353 + 6);
        int8x16_t v464 = (int8x16_t)vshlq_u16((uint16x8_t)v370, v459);
LABEL_212:
        int8x16_t v536 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v464, 0xAuLL), v464);
        v537.i64[0] = 0xFFFFLL;
        v537.i64[1] = 0xFFFFLL;
        int8x16_t v538 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v536, 0x14uLL), (int8x16_t)vdupq_n_s64(0xFFFF000uLL)), vandq_s8(v536, v537));
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v538, v538, 8uLL).i64[0], 0x18uLL), *(int8x8_t *)v538.i8);
        uint64_t v353 = (unint64_t *)((char *)v353 + 6);
        break;
      case 7:
        int8x16_t v539 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v460, 9uLL), v460);
        v540.i64[0] = 0xFFFFLL;
        v540.i64[1] = 0xFFFFLL;
        int8x16_t v541 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v539, 0x12uLL), (int8x16_t)vdupq_n_s64(0x3FFFC000uLL)), vandq_s8(v539, v540));
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v541, v541, 8uLL).i64[0], 0x1CuLL), *(int8x8_t *)v541.i8);
        uint64_t v353 = (unint64_t *)((char *)v353 + 7);
        int8x16_t v464 = (int8x16_t)vshlq_u16((uint16x8_t)v370, v459);
LABEL_214:
        int8x16_t v542 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v464, 9uLL), v464);
        v543.i64[0] = 0xFFFFLL;
        v543.i64[1] = 0xFFFFLL;
        int8x16_t v544 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v542, 0x12uLL), (int8x16_t)vdupq_n_s64(0x3FFFC000uLL)), vandq_s8(v542, v543));
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v544, v544, 8uLL).i64[0], 0x1CuLL), *(int8x8_t *)v544.i8);
        uint64_t v353 = (unint64_t *)((char *)v353 + 7);
        break;
      case 8:
        int8x16_t v545 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v460, 8uLL), v460);
        v546.i64[0] = 4294901760;
        v546.i64[1] = 4294901760;
        int8x16_t v547 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v545, 0x10uLL), v546);
        v546.i64[0] = 0xFFFFLL;
        v546.i64[1] = 0xFFFFLL;
        int8x16_t v548 = vorrq_s8(v547, vandq_s8(v545, v546));
        *v353++ = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v548, v548, 8uLL).i64[0], 0x20uLL), *(int8x8_t *)v548.i8);
        int8x16_t v464 = (int8x16_t)vshlq_u16((uint16x8_t)v370, v459);
LABEL_216:
        int8x16_t v549 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v464, 8uLL), v464);
        v550.i64[0] = 4294901760;
        v550.i64[1] = 4294901760;
        int8x16_t v551 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v549, 0x10uLL), v550);
        v550.i64[0] = 0xFFFFLL;
        v550.i64[1] = 0xFFFFLL;
        int8x16_t v552 = vorrq_s8(v551, vandq_s8(v549, v550));
        *v353++ = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v552, v552, 8uLL).i64[0], 0x20uLL), *(int8x8_t *)v552.i8);
        break;
      case 9:
        v553.i64[0] = 0xFFFF0000FFFFLL;
        v553.i64[1] = 0xFFFF0000FFFFLL;
        int8x16_t v554 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v460, 7uLL), (int8x16_t)vdupq_n_s64(0x1FFFE0001FFFE00uLL)), vandq_s8(v460, v553));
        int8x16_t v555 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v554, 0xEuLL), (int8x16_t)vdupq_n_s64(0x7FFFFFC0000uLL)), vandq_s8(v554, (int8x16_t)vdupq_n_s64(0x1FFFFFFuLL)));
        v553.i64[0] = vextq_s8(v555, v555, 8uLL).u64[0];
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v553.i64[0], 0x24uLL), *(int8x8_t *)v555.i8);
        *((unsigned char *)v353 + 8) = vshrd_n_u64(v553.u64[0], 0x1CuLL);
        uint64_t v353 = (unint64_t *)((char *)v353 + 9);
        int8x16_t v464 = (int8x16_t)vshlq_u16((uint16x8_t)v370, v459);
LABEL_218:
        v556.i64[0] = 0xFFFF0000FFFFLL;
        v556.i64[1] = 0xFFFF0000FFFFLL;
        int8x16_t v557 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v464, 7uLL), (int8x16_t)vdupq_n_s64(0x1FFFE0001FFFE00uLL)), vandq_s8(v464, v556));
        int8x16_t v558 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v557, 0xEuLL), (int8x16_t)vdupq_n_s64(0x7FFFFFC0000uLL)), vandq_s8(v557, (int8x16_t)vdupq_n_s64(0x1FFFFFFuLL)));
        v556.i64[0] = vextq_s8(v558, v558, 8uLL).u64[0];
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v556.i64[0], 0x24uLL), *(int8x8_t *)v558.i8);
        *((unsigned char *)v353 + 8) = vshrd_n_u64(v556.u64[0], 0x1CuLL);
        uint64_t v353 = (unint64_t *)((char *)v353 + 9);
        break;
      case 10:
        v559.i64[0] = 0xFFFF0000FFFFLL;
        v559.i64[1] = 0xFFFF0000FFFFLL;
        int8x16_t v560 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v460, 6uLL), (int8x16_t)vdupq_n_s64(0x3FFFC0003FFFC00uLL)), vandq_s8(v460, v559));
        int8x16_t v561 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v560, 0xCuLL), (int8x16_t)vdupq_n_s64(0x3FFFFFF00000uLL)), vandq_s8(v560, (int8x16_t)vdupq_n_s64(0x3FFFFFFuLL)));
        v559.i64[0] = vextq_s8(v561, v561, 8uLL).u64[0];
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v559.i64[0], 0x28uLL), *(int8x8_t *)v561.i8);
        *((_WORD *)v353 + 4) = vshrd_n_u64(v559.u64[0], 0x18uLL);
        uint64_t v353 = (unint64_t *)((char *)v353 + 10);
        int8x16_t v464 = (int8x16_t)vshlq_u16((uint16x8_t)v370, v459);
LABEL_220:
        v562.i64[0] = 0xFFFF0000FFFFLL;
        v562.i64[1] = 0xFFFF0000FFFFLL;
        int8x16_t v563 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v464, 6uLL), (int8x16_t)vdupq_n_s64(0x3FFFC0003FFFC00uLL)), vandq_s8(v464, v562));
        int8x16_t v564 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v563, 0xCuLL), (int8x16_t)vdupq_n_s64(0x3FFFFFF00000uLL)), vandq_s8(v563, (int8x16_t)vdupq_n_s64(0x3FFFFFFuLL)));
        v562.i64[0] = vextq_s8(v564, v564, 8uLL).u64[0];
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v562.i64[0], 0x28uLL), *(int8x8_t *)v564.i8);
        *((_WORD *)v353 + 4) = vshrd_n_u64(v562.u64[0], 0x18uLL);
        uint64_t v353 = (unint64_t *)((char *)v353 + 10);
        break;
      default:
        uint16x8_t v960 = v459;
        uint16x8_t v966 = (uint16x8_t)v370;
        int8x16_t v973 = v373;
        int8x16_t v982 = v374;
        int8x16_t v992 = v377;
        int8x16_t v1004 = v378;
        uint64_t v506 = 0;
        int64x2_t v1030 = 0uLL;
        do
        {
          int8x16_t v1018 = v460;
          v1030.i16[v506] = *(_WORD *)((unint64_t)&v1018 & 0xFFFFFFFFFFFFFFF1 | (2 * (v506 & 7)));
          ++v506;
        }
        while (v506 != 8);
        uint64_t v353 = vectorWritePacked(v353, (uint64_t)&v1030, v458);
        int8x16_t v464 = (int8x16_t)vshlq_u16(v966, v960);
        int8x16_t v377 = v992;
        int8x16_t v378 = v1004;
        int8x16_t v373 = v973;
        int8x16_t v374 = v982;
        switch(v458)
        {
          case 0:
            goto LABEL_221;
          case 1:
            goto LABEL_183;
          case 2:
            goto LABEL_203;
          case 3:
            goto LABEL_205;
          case 4:
            goto LABEL_208;
          case 5:
            goto LABEL_210;
          case 6:
            goto LABEL_212;
          case 7:
            goto LABEL_214;
          case 8:
            goto LABEL_216;
          case 9:
            goto LABEL_218;
          case 10:
            goto LABEL_220;
          default:
            uint64_t v950 = 0;
            int64x2_t v1030 = 0uLL;
            do
            {
              int8x16_t v1017 = v464;
              v1030.i16[v950] = *(_WORD *)((unint64_t)&v1017 & 0xFFFFFFFFFFFFFFF1 | (2 * (v950 & 7)));
              ++v950;
            }
            while (v950 != 8);
            uint64_t v353 = vectorWritePacked(v353, (uint64_t)&v1030, v458);
            int8x16_t v377 = v992;
            int8x16_t v378 = v1004;
            int8x16_t v373 = v973;
            int8x16_t v374 = v982;
            break;
        }
        break;
    }
LABEL_221:
    int v565 = *((unsigned __int16 *)a1 + 29);
    int v566 = v565 - *((_DWORD *)a1 + 27) * v565 / 8;
    uint16x8_t v567 = (uint16x8_t)vdupq_n_s16(*((_DWORD *)a1 + 27) * v565 / -8);
    int8x16_t v568 = (int8x16_t)vshlq_u16((uint16x8_t)v373, v567);
    switch(v566)
    {
      case 0:
        break;
      case 1:
        int8x16_t v569 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v568, 0xFuLL), v568);
        v570.i64[0] = 0xFFFFLL;
        v570.i64[1] = 0xFFFFLL;
        int8x16_t v571 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v569, 0x1EuLL), (int8x16_t)vdupq_n_s64(0x3FFFCuLL)), vandq_s8(v569, v570));
        *(_DWORD *)uint64_t v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v571, v571, 8uLL).i64[0], 4uLL), *(int8x8_t *)v571.i8).u32[0];
        uint64_t v353 = (unint64_t *)((char *)v353 + 1);
        int8x16_t v572 = (int8x16_t)vshlq_u16((uint16x8_t)v374, v567);
LABEL_223:
        int8x16_t v573 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v572, 0xFuLL), v572);
        v574.i64[0] = 0xFFFFLL;
        v574.i64[1] = 0xFFFFLL;
        int8x16_t v575 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v573, 0x1EuLL), (int8x16_t)vdupq_n_s64(0x3FFFCuLL)), vandq_s8(v573, v574));
        unsigned __int32 v576 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v575, v575, 8uLL).i64[0], 4uLL), *(int8x8_t *)v575.i8).u32[0];
        uint64_t v577 = 1;
        goto LABEL_231;
      case 2:
        int8x16_t v579 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v568, 0xEuLL), v568);
        v580.i64[0] = 0xFFFFLL;
        v580.i64[1] = 0xFFFFLL;
        int8x16_t v581 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v579, 0x1CuLL), (int8x16_t)vdupq_n_s64(0xFFFF0uLL)), vandq_s8(v579, v580));
        *(_DWORD *)uint64_t v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v581, v581, 8uLL).i64[0], 8uLL), *(int8x8_t *)v581.i8).u32[0];
        uint64_t v353 = (unint64_t *)((char *)v353 + 2);
        int8x16_t v572 = (int8x16_t)vshlq_u16((uint16x8_t)v374, v567);
LABEL_228:
        int8x16_t v582 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v572, 0xEuLL), v572);
        v583.i64[0] = 0xFFFFLL;
        v583.i64[1] = 0xFFFFLL;
        int8x16_t v584 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v582, 0x1CuLL), (int8x16_t)vdupq_n_s64(0xFFFF0uLL)), vandq_s8(v582, v583));
        unsigned __int32 v576 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v584, v584, 8uLL).i64[0], 8uLL), *(int8x8_t *)v584.i8).u32[0];
        uint64_t v577 = 2;
        goto LABEL_231;
      case 3:
        int8x16_t v585 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v568, 0xDuLL), v568);
        v586.i64[0] = 0xFFFFLL;
        v586.i64[1] = 0xFFFFLL;
        int8x16_t v587 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v585, 0x1AuLL), (int8x16_t)vdupq_n_s64(0x3FFFC0uLL)), vandq_s8(v585, v586));
        *(_DWORD *)uint64_t v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v587, v587, 8uLL).i64[0], 0xCuLL), *(int8x8_t *)v587.i8).u32[0];
        uint64_t v353 = (unint64_t *)((char *)v353 + 3);
        int8x16_t v572 = (int8x16_t)vshlq_u16((uint16x8_t)v374, v567);
LABEL_230:
        int8x16_t v588 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v572, 0xDuLL), v572);
        v589.i64[0] = 0xFFFFLL;
        v589.i64[1] = 0xFFFFLL;
        int8x16_t v590 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v588, 0x1AuLL), (int8x16_t)vdupq_n_s64(0x3FFFC0uLL)), vandq_s8(v588, v589));
        unsigned __int32 v576 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v590, v590, 8uLL).i64[0], 0xCuLL), *(int8x8_t *)v590.i8).u32[0];
        uint64_t v577 = 3;
LABEL_231:
        *(_DWORD *)uint64_t v353 = v576;
        uint64_t v353 = (unint64_t *)((char *)v353 + v577);
        break;
      case 4:
        int8x16_t v591 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v568, 0xCuLL), v568);
        v592.i64[0] = 16776960;
        v592.i64[1] = 16776960;
        int8x16_t v593 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v591, 0x18uLL), v592);
        v592.i64[0] = 0xFFFFLL;
        v592.i64[1] = 0xFFFFLL;
        int8x16_t v594 = vorrq_s8(v593, vandq_s8(v591, v592));
        *(_DWORD *)uint64_t v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v594, v594, 8uLL).i64[0], 0x10uLL), *(int8x8_t *)v594.i8).u32[0];
        uint64_t v353 = (unint64_t *)((char *)v353 + 4);
        int8x16_t v572 = (int8x16_t)vshlq_u16((uint16x8_t)v374, v567);
LABEL_233:
        int8x16_t v595 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v572, 0xCuLL), v572);
        v596.i64[0] = 16776960;
        v596.i64[1] = 16776960;
        int8x16_t v597 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v595, 0x18uLL), v596);
        v596.i64[0] = 0xFFFFLL;
        v596.i64[1] = 0xFFFFLL;
        int8x16_t v598 = vorrq_s8(v597, vandq_s8(v595, v596));
        *(_DWORD *)uint64_t v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v598, v598, 8uLL).i64[0], 0x10uLL), *(int8x8_t *)v598.i8).u32[0];
        uint64_t v353 = (unint64_t *)((char *)v353 + 4);
        break;
      case 5:
        int8x16_t v599 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v568, 0xBuLL), v568);
        v600.i64[0] = 0xFFFFLL;
        v600.i64[1] = 0xFFFFLL;
        int8x16_t v601 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v599, 0x16uLL), (int8x16_t)vdupq_n_s64(0x3FFFC00uLL)), vandq_s8(v599, v600));
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v601, v601, 8uLL).i64[0], 0x14uLL), *(int8x8_t *)v601.i8);
        uint64_t v353 = (unint64_t *)((char *)v353 + 5);
        int8x16_t v572 = (int8x16_t)vshlq_u16((uint16x8_t)v374, v567);
LABEL_235:
        int8x16_t v602 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v572, 0xBuLL), v572);
        v603.i64[0] = 0xFFFFLL;
        v603.i64[1] = 0xFFFFLL;
        int8x16_t v604 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v602, 0x16uLL), (int8x16_t)vdupq_n_s64(0x3FFFC00uLL)), vandq_s8(v602, v603));
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v604, v604, 8uLL).i64[0], 0x14uLL), *(int8x8_t *)v604.i8);
        uint64_t v353 = (unint64_t *)((char *)v353 + 5);
        break;
      case 6:
        int8x16_t v605 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v568, 0xAuLL), v568);
        v606.i64[0] = 0xFFFFLL;
        v606.i64[1] = 0xFFFFLL;
        int8x16_t v607 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v605, 0x14uLL), (int8x16_t)vdupq_n_s64(0xFFFF000uLL)), vandq_s8(v605, v606));
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v607, v607, 8uLL).i64[0], 0x18uLL), *(int8x8_t *)v607.i8);
        uint64_t v353 = (unint64_t *)((char *)v353 + 6);
        int8x16_t v572 = (int8x16_t)vshlq_u16((uint16x8_t)v374, v567);
LABEL_237:
        int8x16_t v608 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v572, 0xAuLL), v572);
        v609.i64[0] = 0xFFFFLL;
        v609.i64[1] = 0xFFFFLL;
        int8x16_t v610 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v608, 0x14uLL), (int8x16_t)vdupq_n_s64(0xFFFF000uLL)), vandq_s8(v608, v609));
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v610, v610, 8uLL).i64[0], 0x18uLL), *(int8x8_t *)v610.i8);
        uint64_t v353 = (unint64_t *)((char *)v353 + 6);
        break;
      case 7:
        int8x16_t v611 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v568, 9uLL), v568);
        v612.i64[0] = 0xFFFFLL;
        v612.i64[1] = 0xFFFFLL;
        int8x16_t v613 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v611, 0x12uLL), (int8x16_t)vdupq_n_s64(0x3FFFC000uLL)), vandq_s8(v611, v612));
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v613, v613, 8uLL).i64[0], 0x1CuLL), *(int8x8_t *)v613.i8);
        uint64_t v353 = (unint64_t *)((char *)v353 + 7);
        int8x16_t v572 = (int8x16_t)vshlq_u16((uint16x8_t)v374, v567);
LABEL_239:
        int8x16_t v614 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v572, 9uLL), v572);
        v615.i64[0] = 0xFFFFLL;
        v615.i64[1] = 0xFFFFLL;
        int8x16_t v616 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v614, 0x12uLL), (int8x16_t)vdupq_n_s64(0x3FFFC000uLL)), vandq_s8(v614, v615));
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v616, v616, 8uLL).i64[0], 0x1CuLL), *(int8x8_t *)v616.i8);
        uint64_t v353 = (unint64_t *)((char *)v353 + 7);
        break;
      case 8:
        int8x16_t v617 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v568, 8uLL), v568);
        v618.i64[0] = 4294901760;
        v618.i64[1] = 4294901760;
        int8x16_t v619 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v617, 0x10uLL), v618);
        v618.i64[0] = 0xFFFFLL;
        v618.i64[1] = 0xFFFFLL;
        int8x16_t v620 = vorrq_s8(v619, vandq_s8(v617, v618));
        *v353++ = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v620, v620, 8uLL).i64[0], 0x20uLL), *(int8x8_t *)v620.i8);
        int8x16_t v572 = (int8x16_t)vshlq_u16((uint16x8_t)v374, v567);
LABEL_241:
        int8x16_t v621 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v572, 8uLL), v572);
        v622.i64[0] = 4294901760;
        v622.i64[1] = 4294901760;
        int8x16_t v623 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v621, 0x10uLL), v622);
        v622.i64[0] = 0xFFFFLL;
        v622.i64[1] = 0xFFFFLL;
        int8x16_t v624 = vorrq_s8(v623, vandq_s8(v621, v622));
        *v353++ = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v624, v624, 8uLL).i64[0], 0x20uLL), *(int8x8_t *)v624.i8);
        break;
      case 9:
        v625.i64[0] = 0xFFFF0000FFFFLL;
        v625.i64[1] = 0xFFFF0000FFFFLL;
        int8x16_t v626 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v568, 7uLL), (int8x16_t)vdupq_n_s64(0x1FFFE0001FFFE00uLL)), vandq_s8(v568, v625));
        int8x16_t v627 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v626, 0xEuLL), (int8x16_t)vdupq_n_s64(0x7FFFFFC0000uLL)), vandq_s8(v626, (int8x16_t)vdupq_n_s64(0x1FFFFFFuLL)));
        v625.i64[0] = vextq_s8(v627, v627, 8uLL).u64[0];
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v625.i64[0], 0x24uLL), *(int8x8_t *)v627.i8);
        *((unsigned char *)v353 + 8) = vshrd_n_u64(v625.u64[0], 0x1CuLL);
        uint64_t v353 = (unint64_t *)((char *)v353 + 9);
        int8x16_t v572 = (int8x16_t)vshlq_u16((uint16x8_t)v374, v567);
LABEL_243:
        v628.i64[0] = 0xFFFF0000FFFFLL;
        v628.i64[1] = 0xFFFF0000FFFFLL;
        int8x16_t v629 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v572, 7uLL), (int8x16_t)vdupq_n_s64(0x1FFFE0001FFFE00uLL)), vandq_s8(v572, v628));
        int8x16_t v630 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v629, 0xEuLL), (int8x16_t)vdupq_n_s64(0x7FFFFFC0000uLL)), vandq_s8(v629, (int8x16_t)vdupq_n_s64(0x1FFFFFFuLL)));
        v628.i64[0] = vextq_s8(v630, v630, 8uLL).u64[0];
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v628.i64[0], 0x24uLL), *(int8x8_t *)v630.i8);
        *((unsigned char *)v353 + 8) = vshrd_n_u64(v628.u64[0], 0x1CuLL);
        uint64_t v353 = (unint64_t *)((char *)v353 + 9);
        break;
      case 10:
        v631.i64[0] = 0xFFFF0000FFFFLL;
        v631.i64[1] = 0xFFFF0000FFFFLL;
        int8x16_t v632 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v568, 6uLL), (int8x16_t)vdupq_n_s64(0x3FFFC0003FFFC00uLL)), vandq_s8(v568, v631));
        int8x16_t v633 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v632, 0xCuLL), (int8x16_t)vdupq_n_s64(0x3FFFFFF00000uLL)), vandq_s8(v632, (int8x16_t)vdupq_n_s64(0x3FFFFFFuLL)));
        v631.i64[0] = vextq_s8(v633, v633, 8uLL).u64[0];
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v631.i64[0], 0x28uLL), *(int8x8_t *)v633.i8);
        *((_WORD *)v353 + 4) = vshrd_n_u64(v631.u64[0], 0x18uLL);
        uint64_t v353 = (unint64_t *)((char *)v353 + 10);
        int8x16_t v572 = (int8x16_t)vshlq_u16((uint16x8_t)v374, v567);
LABEL_245:
        v634.i64[0] = 0xFFFF0000FFFFLL;
        v634.i64[1] = 0xFFFF0000FFFFLL;
        int8x16_t v635 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v572, 6uLL), (int8x16_t)vdupq_n_s64(0x3FFFC0003FFFC00uLL)), vandq_s8(v572, v634));
        int8x16_t v636 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v635, 0xCuLL), (int8x16_t)vdupq_n_s64(0x3FFFFFF00000uLL)), vandq_s8(v635, (int8x16_t)vdupq_n_s64(0x3FFFFFFuLL)));
        v634.i64[0] = vextq_s8(v636, v636, 8uLL).u64[0];
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v634.i64[0], 0x28uLL), *(int8x8_t *)v636.i8);
        *((_WORD *)v353 + 4) = vshrd_n_u64(v634.u64[0], 0x18uLL);
        uint64_t v353 = (unint64_t *)((char *)v353 + 10);
        break;
      default:
        uint16x8_t v974 = v567;
        uint16x8_t v983 = (uint16x8_t)v374;
        int8x16_t v993 = v377;
        int8x16_t v1005 = v378;
        uint64_t v578 = 0;
        int64x2_t v1030 = 0uLL;
        do
        {
          int8x16_t v1016 = v568;
          v1030.i16[v578] = *(_WORD *)((unint64_t)&v1016 & 0xFFFFFFFFFFFFFFF1 | (2 * (v578 & 7)));
          ++v578;
        }
        while (v578 != 8);
        uint64_t v353 = vectorWritePacked(v353, (uint64_t)&v1030, v566);
        int8x16_t v572 = (int8x16_t)vshlq_u16(v983, v974);
        int8x16_t v377 = v993;
        int8x16_t v378 = v1005;
        switch(v566)
        {
          case 0:
            goto LABEL_246;
          case 1:
            goto LABEL_223;
          case 2:
            goto LABEL_228;
          case 3:
            goto LABEL_230;
          case 4:
            goto LABEL_233;
          case 5:
            goto LABEL_235;
          case 6:
            goto LABEL_237;
          case 7:
            goto LABEL_239;
          case 8:
            goto LABEL_241;
          case 9:
            goto LABEL_243;
          case 10:
            goto LABEL_245;
          default:
            uint64_t v951 = 0;
            int64x2_t v1030 = 0uLL;
            do
            {
              int8x16_t v1015 = v572;
              v1030.i16[v951] = *(_WORD *)((unint64_t)&v1015 & 0xFFFFFFFFFFFFFFF1 | (2 * (v951 & 7)));
              ++v951;
            }
            while (v951 != 8);
            uint64_t v353 = vectorWritePacked(v353, (uint64_t)&v1030, v566);
            int8x16_t v377 = v993;
            int8x16_t v378 = v1005;
            break;
        }
        break;
    }
LABEL_246:
    int v637 = *((unsigned __int16 *)a1 + 33);
    int v638 = v637 - *((_DWORD *)a1 + 27) * v637 / 8;
    uint16x8_t v639 = (uint16x8_t)vdupq_n_s16(*((_DWORD *)a1 + 27) * v637 / -8);
    int8x16_t v640 = (int8x16_t)vshlq_u16((uint16x8_t)v377, v639);
    switch(v638)
    {
      case 0:
        break;
      case 1:
        int8x16_t v641 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v640, 0xFuLL), v640);
        v642.i64[0] = 0xFFFFLL;
        v642.i64[1] = 0xFFFFLL;
        int8x16_t v643 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v641, 0x1EuLL), (int8x16_t)vdupq_n_s64(0x3FFFCuLL)), vandq_s8(v641, v642));
        *(_DWORD *)uint64_t v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v643, v643, 8uLL).i64[0], 4uLL), *(int8x8_t *)v643.i8).u32[0];
        uint64_t v353 = (unint64_t *)((char *)v353 + 1);
        int8x16_t v644 = (int8x16_t)vshlq_u16((uint16x8_t)v378, v639);
LABEL_248:
        int8x16_t v645 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v644, 0xFuLL), v644);
        int8x16_t v646 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v645, 0x1EuLL), (int8x16_t)vdupq_n_s64(0x3FFFCuLL));
        goto LABEL_361;
      case 2:
        int8x16_t v648 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v640, 0xEuLL), v640);
        v649.i64[0] = 0xFFFFLL;
        v649.i64[1] = 0xFFFFLL;
        int8x16_t v650 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v648, 0x1CuLL), (int8x16_t)vdupq_n_s64(0xFFFF0uLL)), vandq_s8(v648, v649));
        *(_DWORD *)uint64_t v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v650, v650, 8uLL).i64[0], 8uLL), *(int8x8_t *)v650.i8).u32[0];
        uint64_t v353 = (unint64_t *)((char *)v353 + 2);
        int8x16_t v644 = (int8x16_t)vshlq_u16((uint16x8_t)v378, v639);
LABEL_253:
        int8x16_t v651 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v644, 0xEuLL), v644);
        int8x16_t v652 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v651, 0x1CuLL), (int8x16_t)vdupq_n_s64(0xFFFF0uLL));
        goto LABEL_367;
      case 3:
        int8x16_t v653 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v640, 0xDuLL), v640);
        v654.i64[0] = 0xFFFFLL;
        v654.i64[1] = 0xFFFFLL;
        int8x16_t v655 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v653, 0x1AuLL), (int8x16_t)vdupq_n_s64(0x3FFFC0uLL)), vandq_s8(v653, v654));
        *(_DWORD *)uint64_t v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v655, v655, 8uLL).i64[0], 0xCuLL), *(int8x8_t *)v655.i8).u32[0];
        uint64_t v353 = (unint64_t *)((char *)v353 + 3);
        int8x16_t v644 = (int8x16_t)vshlq_u16((uint16x8_t)v378, v639);
LABEL_255:
        int8x16_t v656 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v644, 0xDuLL), v644);
        int8x16_t v657 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v656, 0x1AuLL), (int8x16_t)vdupq_n_s64(0x3FFFC0uLL));
        goto LABEL_369;
      case 4:
        int8x16_t v658 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v640, 0xCuLL), v640);
        v659.i64[0] = 16776960;
        v659.i64[1] = 16776960;
        int8x16_t v660 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v658, 0x18uLL), v659);
        v659.i64[0] = 0xFFFFLL;
        v659.i64[1] = 0xFFFFLL;
        int8x16_t v661 = vorrq_s8(v660, vandq_s8(v658, v659));
        *(_DWORD *)uint64_t v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v661, v661, 8uLL).i64[0], 0x10uLL), *(int8x8_t *)v661.i8).u32[0];
        uint64_t v353 = (unint64_t *)((char *)v353 + 4);
        int8x16_t v644 = (int8x16_t)vshlq_u16((uint16x8_t)v378, v639);
LABEL_257:
        int8x16_t v662 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v644, 0xCuLL), v644);
        goto LABEL_372;
      case 5:
        int8x16_t v663 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v640, 0xBuLL), v640);
        v664.i64[0] = 0xFFFFLL;
        v664.i64[1] = 0xFFFFLL;
        int8x16_t v665 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v663, 0x16uLL), (int8x16_t)vdupq_n_s64(0x3FFFC00uLL)), vandq_s8(v663, v664));
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v665, v665, 8uLL).i64[0], 0x14uLL), *(int8x8_t *)v665.i8);
        uint64_t v353 = (unint64_t *)((char *)v353 + 5);
        int8x16_t v644 = (int8x16_t)vshlq_u16((uint16x8_t)v378, v639);
LABEL_259:
        int8x16_t v666 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v644, 0xBuLL), v644);
        int8x16_t v667 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v666, 0x16uLL), (int8x16_t)vdupq_n_s64(0x3FFFC00uLL));
        goto LABEL_374;
      case 6:
        int8x16_t v668 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v640, 0xAuLL), v640);
        v669.i64[0] = 0xFFFFLL;
        v669.i64[1] = 0xFFFFLL;
        int8x16_t v670 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v668, 0x14uLL), (int8x16_t)vdupq_n_s64(0xFFFF000uLL)), vandq_s8(v668, v669));
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v670, v670, 8uLL).i64[0], 0x18uLL), *(int8x8_t *)v670.i8);
        uint64_t v353 = (unint64_t *)((char *)v353 + 6);
        int8x16_t v644 = (int8x16_t)vshlq_u16((uint16x8_t)v378, v639);
LABEL_261:
        int8x16_t v671 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v644, 0xAuLL), v644);
        int8x16_t v672 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v671, 0x14uLL), (int8x16_t)vdupq_n_s64(0xFFFF000uLL));
        goto LABEL_376;
      case 7:
        int8x16_t v673 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v640, 9uLL), v640);
        v674.i64[0] = 0xFFFFLL;
        v674.i64[1] = 0xFFFFLL;
        int8x16_t v675 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v673, 0x12uLL), (int8x16_t)vdupq_n_s64(0x3FFFC000uLL)), vandq_s8(v673, v674));
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v675, v675, 8uLL).i64[0], 0x1CuLL), *(int8x8_t *)v675.i8);
        uint64_t v353 = (unint64_t *)((char *)v353 + 7);
        int8x16_t v644 = (int8x16_t)vshlq_u16((uint16x8_t)v378, v639);
LABEL_263:
        int8x16_t v676 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v644, 9uLL), v644);
        int8x16_t v677 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v676, 0x12uLL), (int8x16_t)vdupq_n_s64(0x3FFFC000uLL));
        goto LABEL_378;
      case 8:
        int8x16_t v678 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v640, 8uLL), v640);
        v679.i64[0] = 4294901760;
        v679.i64[1] = 4294901760;
        int8x16_t v680 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v678, 0x10uLL), v679);
        v679.i64[0] = 0xFFFFLL;
        v679.i64[1] = 0xFFFFLL;
        int8x16_t v681 = vorrq_s8(v680, vandq_s8(v678, v679));
        *v353++ = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v681, v681, 8uLL).i64[0], 0x20uLL), *(int8x8_t *)v681.i8);
        int8x16_t v644 = (int8x16_t)vshlq_u16((uint16x8_t)v378, v639);
LABEL_265:
        int8x16_t v682 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v644, 8uLL), v644);
        goto LABEL_380;
      case 9:
        v683.i64[0] = 0xFFFF0000FFFFLL;
        v683.i64[1] = 0xFFFF0000FFFFLL;
        int8x16_t v684 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v640, 7uLL), (int8x16_t)vdupq_n_s64(0x1FFFE0001FFFE00uLL)), vandq_s8(v640, v683));
        int8x16_t v685 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v684, 0xEuLL), (int8x16_t)vdupq_n_s64(0x7FFFFFC0000uLL)), vandq_s8(v684, (int8x16_t)vdupq_n_s64(0x1FFFFFFuLL)));
        v683.i64[0] = vextq_s8(v685, v685, 8uLL).u64[0];
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v683.i64[0], 0x24uLL), *(int8x8_t *)v685.i8);
        *((unsigned char *)v353 + 8) = vshrd_n_u64(v683.u64[0], 0x1CuLL);
        uint64_t v353 = (unint64_t *)((char *)v353 + 9);
        int8x16_t v644 = (int8x16_t)vshlq_u16((uint16x8_t)v378, v639);
LABEL_267:
        v686.i64[0] = 0xFFFF0000FFFFLL;
        v686.i64[1] = 0xFFFF0000FFFFLL;
        int8x16_t v687 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v644, 7uLL), (int8x16_t)vdupq_n_s64(0x1FFFE0001FFFE00uLL)), vandq_s8(v644, v686));
        int8x16_t v688 = vandq_s8(v687, (int8x16_t)vdupq_n_s64(0x1FFFFFFuLL));
        int8x16_t v689 = (int8x16_t)vdupq_n_s64(0x7FFFFFC0000uLL);
        int8x16_t v690 = (int8x16_t)vshrq_n_u64((uint64x2_t)v687, 0xEuLL);
        goto LABEL_382;
      case 10:
        v691.i64[0] = 0xFFFF0000FFFFLL;
        v691.i64[1] = 0xFFFF0000FFFFLL;
        int8x16_t v692 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v640, 6uLL), (int8x16_t)vdupq_n_s64(0x3FFFC0003FFFC00uLL)), vandq_s8(v640, v691));
        int8x16_t v693 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v692, 0xCuLL), (int8x16_t)vdupq_n_s64(0x3FFFFFF00000uLL)), vandq_s8(v692, (int8x16_t)vdupq_n_s64(0x3FFFFFFuLL)));
        v691.i64[0] = vextq_s8(v693, v693, 8uLL).u64[0];
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v691.i64[0], 0x28uLL), *(int8x8_t *)v693.i8);
        *((_WORD *)v353 + 4) = vshrd_n_u64(v691.u64[0], 0x18uLL);
        uint64_t v353 = (unint64_t *)((char *)v353 + 10);
        int8x16_t v644 = (int8x16_t)vshlq_u16((uint16x8_t)v378, v639);
LABEL_269:
        v694.i64[0] = 0xFFFF0000FFFFLL;
        v694.i64[1] = 0xFFFF0000FFFFLL;
        int8x16_t v695 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v644, 6uLL), (int8x16_t)vdupq_n_s64(0x3FFFC0003FFFC00uLL)), vandq_s8(v644, v694));
        goto LABEL_384;
      default:
        uint16x8_t v994 = v639;
        uint16x8_t v1006 = (uint16x8_t)v378;
        uint64_t v647 = 0;
        int64x2_t v1030 = 0uLL;
        do
        {
          int8x16_t v1014 = v640;
          v1030.i16[v647] = *(_WORD *)((unint64_t)&v1014 & 0xFFFFFFFFFFFFFFF1 | (2 * (v647 & 7)));
          ++v647;
        }
        while (v647 != 8);
        uint64_t v353 = vectorWritePacked(v353, (uint64_t)&v1030, v638);
        int8x16_t v644 = (int8x16_t)vshlq_u16(v1006, v994);
        switch(v638)
        {
          case 0:
            goto LABEL_385;
          case 1:
            goto LABEL_248;
          case 2:
            goto LABEL_253;
          case 3:
            goto LABEL_255;
          case 4:
            goto LABEL_257;
          case 5:
            goto LABEL_259;
          case 6:
            goto LABEL_261;
          case 7:
            goto LABEL_263;
          case 8:
            goto LABEL_265;
          case 9:
            goto LABEL_267;
          case 10:
            goto LABEL_269;
          default:
            uint64_t v952 = 0;
            int64x2_t v1030 = 0uLL;
            do
            {
              int8x16_t v1013 = v644;
              v1030.i16[v952] = *(_WORD *)((unint64_t)&v1013 & 0xFFFFFFFFFFFFFFF1 | (2 * (v952 & 7)));
              ++v952;
            }
            while (v952 != 8);
            int v924 = v638;
            goto LABEL_365;
        }
    }
  }
  else
  {
    switch(*((_WORD *)a1 + 21))
    {
      case 0:
        goto LABEL_283;
      case 1:
        int8x16_t v393 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v365, 0xFuLL), v365);
        v394.i64[0] = 0xFFFFLL;
        v394.i64[1] = 0xFFFFLL;
        int8x16_t v395 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v393, 0x1EuLL), (int8x16_t)vdupq_n_s64(0x3FFFCuLL)), vandq_s8(v393, v394));
        unsigned __int32 v396 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v395, v395, 8uLL).i64[0], 4uLL), *(int8x8_t *)v395.i8).u32[0];
        uint64_t v397 = 1;
        goto LABEL_189;
      case 2:
        int8x16_t v471 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v365, 0xEuLL), v365);
        v472.i64[0] = 0xFFFFLL;
        v472.i64[1] = 0xFFFFLL;
        int8x16_t v473 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v471, 0x1CuLL), (int8x16_t)vdupq_n_s64(0xFFFF0uLL)), vandq_s8(v471, v472));
        unsigned __int32 v396 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v473, v473, 8uLL).i64[0], 8uLL), *(int8x8_t *)v473.i8).u32[0];
        uint64_t v397 = 2;
        goto LABEL_189;
      case 3:
        int8x16_t v474 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v365, 0xDuLL), v365);
        v475.i64[0] = 0xFFFFLL;
        v475.i64[1] = 0xFFFFLL;
        int8x16_t v476 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v474, 0x1AuLL), (int8x16_t)vdupq_n_s64(0x3FFFC0uLL)), vandq_s8(v474, v475));
        unsigned __int32 v396 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v476, v476, 8uLL).i64[0], 0xCuLL), *(int8x8_t *)v476.i8).u32[0];
        uint64_t v397 = 3;
LABEL_189:
        *(_DWORD *)uint64_t v353 = v396;
        uint64_t v353 = (unint64_t *)((char *)v353 + v397);
        break;
      case 4:
        int8x16_t v477 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v365, 0xCuLL), v365);
        v478.i64[0] = 16776960;
        v478.i64[1] = 16776960;
        int8x16_t v479 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v477, 0x18uLL), v478);
        v478.i64[0] = 0xFFFFLL;
        v478.i64[1] = 0xFFFFLL;
        int8x16_t v480 = vorrq_s8(v479, vandq_s8(v477, v478));
        *(_DWORD *)uint64_t v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v480, v480, 8uLL).i64[0], 0x10uLL), *(int8x8_t *)v480.i8).u32[0];
        uint64_t v353 = (unint64_t *)((char *)v353 + 4);
        break;
      case 5:
        int8x16_t v481 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v365, 0xBuLL), v365);
        v482.i64[0] = 0xFFFFLL;
        v482.i64[1] = 0xFFFFLL;
        int8x16_t v483 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v481, 0x16uLL), (int8x16_t)vdupq_n_s64(0x3FFFC00uLL)), vandq_s8(v481, v482));
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v483, v483, 8uLL).i64[0], 0x14uLL), *(int8x8_t *)v483.i8);
        uint64_t v353 = (unint64_t *)((char *)v353 + 5);
        break;
      case 6:
        int8x16_t v484 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v365, 0xAuLL), v365);
        v485.i64[0] = 0xFFFFLL;
        v485.i64[1] = 0xFFFFLL;
        int8x16_t v486 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v484, 0x14uLL), (int8x16_t)vdupq_n_s64(0xFFFF000uLL)), vandq_s8(v484, v485));
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v486, v486, 8uLL).i64[0], 0x18uLL), *(int8x8_t *)v486.i8);
        uint64_t v353 = (unint64_t *)((char *)v353 + 6);
        break;
      case 7:
        int8x16_t v487 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v365, 9uLL), v365);
        v488.i64[0] = 0xFFFFLL;
        v488.i64[1] = 0xFFFFLL;
        int8x16_t v489 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v487, 0x12uLL), (int8x16_t)vdupq_n_s64(0x3FFFC000uLL)), vandq_s8(v487, v488));
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v489, v489, 8uLL).i64[0], 0x1CuLL), *(int8x8_t *)v489.i8);
        uint64_t v353 = (unint64_t *)((char *)v353 + 7);
        break;
      case 8:
        int8x16_t v490 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v365, 8uLL), v365);
        v491.i64[0] = 4294901760;
        v491.i64[1] = 4294901760;
        int8x16_t v492 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v490, 0x10uLL), v491);
        v491.i64[0] = 0xFFFFLL;
        v491.i64[1] = 0xFFFFLL;
        int8x16_t v493 = vorrq_s8(v492, vandq_s8(v490, v491));
        *v353++ = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v493, v493, 8uLL).i64[0], 0x20uLL), *(int8x8_t *)v493.i8);
        break;
      case 9:
        v494.i64[0] = 0xFFFF0000FFFFLL;
        v494.i64[1] = 0xFFFF0000FFFFLL;
        int8x16_t v495 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v365, 7uLL), (int8x16_t)vdupq_n_s64(0x1FFFE0001FFFE00uLL)), vandq_s8(v365, v494));
        int8x16_t v496 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v495, 0xEuLL), (int8x16_t)vdupq_n_s64(0x7FFFFFC0000uLL)), vandq_s8(v495, (int8x16_t)vdupq_n_s64(0x1FFFFFFuLL)));
        v494.i64[0] = vextq_s8(v496, v496, 8uLL).u64[0];
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v494.i64[0], 0x24uLL), *(int8x8_t *)v496.i8);
        *((unsigned char *)v353 + 8) = vshrd_n_u64(v494.u64[0], 0x1CuLL);
        uint64_t v353 = (unint64_t *)((char *)v353 + 9);
        break;
      case 0xA:
        v497.i64[0] = 0xFFFF0000FFFFLL;
        v497.i64[1] = 0xFFFF0000FFFFLL;
        int8x16_t v498 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v365, 6uLL), (int8x16_t)vdupq_n_s64(0x3FFFC0003FFFC00uLL)), vandq_s8(v365, v497));
        int8x16_t v499 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v498, 0xCuLL), (int8x16_t)vdupq_n_s64(0x3FFFFFF00000uLL)), vandq_s8(v498, (int8x16_t)vdupq_n_s64(0x3FFFFFFuLL)));
        v497.i64[0] = vextq_s8(v499, v499, 8uLL).u64[0];
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v497.i64[0], 0x28uLL), *(int8x8_t *)v499.i8);
        *((_WORD *)v353 + 4) = vshrd_n_u64(v497.u64[0], 0x18uLL);
        uint64_t v353 = (unint64_t *)((char *)v353 + 10);
        break;
      default:
        int8x16_t v955 = v366;
        int8x16_t v959 = v369;
        int8x16_t v965 = v370;
        int8x16_t v972 = v373;
        int8x16_t v981 = v374;
        int8x16_t v991 = v377;
        int8x16_t v1003 = v378;
        uint64_t v470 = 0;
        int64x2_t v1030 = 0uLL;
        do
        {
          int8x16_t v1028 = v365;
          v1030.i16[v470] = *(_WORD *)((unint64_t)&v1028 & 0xFFFFFFFFFFFFFFF1 | (2 * (v470 & 7)));
          ++v470;
        }
        while (v470 != 8);
        uint64_t v353 = vectorWritePacked(v353, (uint64_t)&v1030, v379);
        int8x16_t v377 = v991;
        int8x16_t v378 = v1003;
        int8x16_t v373 = v972;
        int8x16_t v374 = v981;
        int8x16_t v369 = v959;
        int8x16_t v370 = v965;
        int8x16_t v366 = v955;
        break;
    }
    int v500 = (unsigned __int16)*v301;
    switch(*v301)
    {
      case 0:
        break;
      case 1:
        int8x16_t v501 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v366, 0xFuLL), v366);
        v502.i64[0] = 0xFFFFLL;
        v502.i64[1] = 0xFFFFLL;
        int8x16_t v503 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v501, 0x1EuLL), (int8x16_t)vdupq_n_s64(0x3FFFCuLL)), vandq_s8(v501, v502));
        unsigned __int32 v504 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v503, v503, 8uLL).i64[0], 4uLL), *(int8x8_t *)v503.i8).u32[0];
        uint64_t v505 = 1;
        goto LABEL_275;
      case 2:
        int8x16_t v697 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v366, 0xEuLL), v366);
        v698.i64[0] = 0xFFFFLL;
        v698.i64[1] = 0xFFFFLL;
        int8x16_t v699 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v697, 0x1CuLL), (int8x16_t)vdupq_n_s64(0xFFFF0uLL)), vandq_s8(v697, v698));
        unsigned __int32 v504 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v699, v699, 8uLL).i64[0], 8uLL), *(int8x8_t *)v699.i8).u32[0];
        uint64_t v505 = 2;
        goto LABEL_275;
      case 3:
        int8x16_t v700 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v366, 0xDuLL), v366);
        v701.i64[0] = 0xFFFFLL;
        v701.i64[1] = 0xFFFFLL;
        int8x16_t v702 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v700, 0x1AuLL), (int8x16_t)vdupq_n_s64(0x3FFFC0uLL)), vandq_s8(v700, v701));
        unsigned __int32 v504 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v702, v702, 8uLL).i64[0], 0xCuLL), *(int8x8_t *)v702.i8).u32[0];
        uint64_t v505 = 3;
LABEL_275:
        *(_DWORD *)uint64_t v353 = v504;
        uint64_t v353 = (unint64_t *)((char *)v353 + v505);
        break;
      case 4:
        int8x16_t v703 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v366, 0xCuLL), v366);
        v704.i64[0] = 16776960;
        v704.i64[1] = 16776960;
        int8x16_t v705 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v703, 0x18uLL), v704);
        v704.i64[0] = 0xFFFFLL;
        v704.i64[1] = 0xFFFFLL;
        int8x16_t v706 = vorrq_s8(v705, vandq_s8(v703, v704));
        *(_DWORD *)uint64_t v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v706, v706, 8uLL).i64[0], 0x10uLL), *(int8x8_t *)v706.i8).u32[0];
        uint64_t v353 = (unint64_t *)((char *)v353 + 4);
        break;
      case 5:
        int8x16_t v707 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v366, 0xBuLL), v366);
        v708.i64[0] = 0xFFFFLL;
        v708.i64[1] = 0xFFFFLL;
        int8x16_t v709 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v707, 0x16uLL), (int8x16_t)vdupq_n_s64(0x3FFFC00uLL)), vandq_s8(v707, v708));
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v709, v709, 8uLL).i64[0], 0x14uLL), *(int8x8_t *)v709.i8);
        uint64_t v353 = (unint64_t *)((char *)v353 + 5);
        break;
      case 6:
        int8x16_t v710 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v366, 0xAuLL), v366);
        v711.i64[0] = 0xFFFFLL;
        v711.i64[1] = 0xFFFFLL;
        int8x16_t v712 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v710, 0x14uLL), (int8x16_t)vdupq_n_s64(0xFFFF000uLL)), vandq_s8(v710, v711));
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v712, v712, 8uLL).i64[0], 0x18uLL), *(int8x8_t *)v712.i8);
        uint64_t v353 = (unint64_t *)((char *)v353 + 6);
        break;
      case 7:
        int8x16_t v713 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v366, 9uLL), v366);
        v714.i64[0] = 0xFFFFLL;
        v714.i64[1] = 0xFFFFLL;
        int8x16_t v715 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v713, 0x12uLL), (int8x16_t)vdupq_n_s64(0x3FFFC000uLL)), vandq_s8(v713, v714));
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v715, v715, 8uLL).i64[0], 0x1CuLL), *(int8x8_t *)v715.i8);
        uint64_t v353 = (unint64_t *)((char *)v353 + 7);
        break;
      case 8:
        int8x16_t v716 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v366, 8uLL), v366);
        v717.i64[0] = 4294901760;
        v717.i64[1] = 4294901760;
        int8x16_t v718 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v716, 0x10uLL), v717);
        v717.i64[0] = 0xFFFFLL;
        v717.i64[1] = 0xFFFFLL;
        int8x16_t v719 = vorrq_s8(v718, vandq_s8(v716, v717));
        *v353++ = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v719, v719, 8uLL).i64[0], 0x20uLL), *(int8x8_t *)v719.i8);
        break;
      case 9:
        v720.i64[0] = 0xFFFF0000FFFFLL;
        v720.i64[1] = 0xFFFF0000FFFFLL;
        int8x16_t v721 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v366, 7uLL), (int8x16_t)vdupq_n_s64(0x1FFFE0001FFFE00uLL)), vandq_s8(v366, v720));
        int8x16_t v722 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v721, 0xEuLL), (int8x16_t)vdupq_n_s64(0x7FFFFFC0000uLL)), vandq_s8(v721, (int8x16_t)vdupq_n_s64(0x1FFFFFFuLL)));
        unint64_t v723 = vextq_s8(v722, v722, 8uLL).u64[0];
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v723, 0x24uLL), *(int8x8_t *)v722.i8);
        *((unsigned char *)v353 + 8) = vshrd_n_u64(v723, 0x1CuLL);
        uint64_t v353 = (unint64_t *)((char *)v353 + 9);
        break;
      case 0xA:
        v724.i64[0] = 0xFFFF0000FFFFLL;
        v724.i64[1] = 0xFFFF0000FFFFLL;
        int8x16_t v725 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v366, 6uLL), (int8x16_t)vdupq_n_s64(0x3FFFC0003FFFC00uLL)), vandq_s8(v366, v724));
        int8x16_t v726 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v725, 0xCuLL), (int8x16_t)vdupq_n_s64(0x3FFFFFF00000uLL)), vandq_s8(v725, (int8x16_t)vdupq_n_s64(0x3FFFFFFuLL)));
        unint64_t v727 = vextq_s8(v726, v726, 8uLL).u64[0];
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v727, 0x28uLL), *(int8x8_t *)v726.i8);
        *((_WORD *)v353 + 4) = vshrd_n_u64(v727, 0x18uLL);
        uint64_t v353 = (unint64_t *)((char *)v353 + 10);
        break;
      default:
        int8x16_t v961 = v369;
        int8x16_t v967 = v370;
        int8x16_t v975 = v373;
        int8x16_t v984 = v374;
        int8x16_t v995 = v377;
        int8x16_t v1007 = v378;
        uint64_t v696 = 0;
        int64x2_t v1030 = 0uLL;
        do
        {
          int8x16_t v1027 = v366;
          v1030.i16[v696] = *(_WORD *)((unint64_t)&v1027 & 0xFFFFFFFFFFFFFFF1 | (2 * (v696 & 7)));
          ++v696;
        }
        while (v696 != 8);
        uint64_t v353 = vectorWritePacked(v353, (uint64_t)&v1030, v500);
        int8x16_t v377 = v995;
        int8x16_t v378 = v1007;
        int8x16_t v373 = v975;
        int8x16_t v374 = v984;
        int8x16_t v369 = v961;
        int8x16_t v370 = v967;
        break;
    }
LABEL_283:
    int v728 = *((unsigned __int16 *)a1 + 25);
    switch(*((_WORD *)a1 + 25))
    {
      case 0:
        goto LABEL_313;
      case 1:
        int8x16_t v729 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v369, 0xFuLL), v369);
        v730.i64[0] = 0xFFFFLL;
        v730.i64[1] = 0xFFFFLL;
        int8x16_t v731 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v729, 0x1EuLL), (int8x16_t)vdupq_n_s64(0x3FFFCuLL)), vandq_s8(v729, v730));
        unsigned __int32 v732 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v731, v731, 8uLL).i64[0], 4uLL), *(int8x8_t *)v731.i8).u32[0];
        uint64_t v733 = 1;
        goto LABEL_290;
      case 2:
        int8x16_t v735 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v369, 0xEuLL), v369);
        v736.i64[0] = 0xFFFFLL;
        v736.i64[1] = 0xFFFFLL;
        int8x16_t v737 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v735, 0x1CuLL), (int8x16_t)vdupq_n_s64(0xFFFF0uLL)), vandq_s8(v735, v736));
        unsigned __int32 v732 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v737, v737, 8uLL).i64[0], 8uLL), *(int8x8_t *)v737.i8).u32[0];
        uint64_t v733 = 2;
        goto LABEL_290;
      case 3:
        int8x16_t v738 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v369, 0xDuLL), v369);
        v739.i64[0] = 0xFFFFLL;
        v739.i64[1] = 0xFFFFLL;
        int8x16_t v740 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v738, 0x1AuLL), (int8x16_t)vdupq_n_s64(0x3FFFC0uLL)), vandq_s8(v738, v739));
        unsigned __int32 v732 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v740, v740, 8uLL).i64[0], 0xCuLL), *(int8x8_t *)v740.i8).u32[0];
        uint64_t v733 = 3;
LABEL_290:
        *(_DWORD *)uint64_t v353 = v732;
        uint64_t v353 = (unint64_t *)((char *)v353 + v733);
        break;
      case 4:
        int8x16_t v741 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v369, 0xCuLL), v369);
        v742.i64[0] = 16776960;
        v742.i64[1] = 16776960;
        int8x16_t v743 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v741, 0x18uLL), v742);
        v742.i64[0] = 0xFFFFLL;
        v742.i64[1] = 0xFFFFLL;
        int8x16_t v744 = vorrq_s8(v743, vandq_s8(v741, v742));
        *(_DWORD *)uint64_t v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v744, v744, 8uLL).i64[0], 0x10uLL), *(int8x8_t *)v744.i8).u32[0];
        uint64_t v353 = (unint64_t *)((char *)v353 + 4);
        break;
      case 5:
        int8x16_t v745 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v369, 0xBuLL), v369);
        v746.i64[0] = 0xFFFFLL;
        v746.i64[1] = 0xFFFFLL;
        int8x16_t v747 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v745, 0x16uLL), (int8x16_t)vdupq_n_s64(0x3FFFC00uLL)), vandq_s8(v745, v746));
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v747, v747, 8uLL).i64[0], 0x14uLL), *(int8x8_t *)v747.i8);
        uint64_t v353 = (unint64_t *)((char *)v353 + 5);
        break;
      case 6:
        int8x16_t v748 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v369, 0xAuLL), v369);
        v749.i64[0] = 0xFFFFLL;
        v749.i64[1] = 0xFFFFLL;
        int8x16_t v750 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v748, 0x14uLL), (int8x16_t)vdupq_n_s64(0xFFFF000uLL)), vandq_s8(v748, v749));
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v750, v750, 8uLL).i64[0], 0x18uLL), *(int8x8_t *)v750.i8);
        uint64_t v353 = (unint64_t *)((char *)v353 + 6);
        break;
      case 7:
        int8x16_t v751 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v369, 9uLL), v369);
        v752.i64[0] = 0xFFFFLL;
        v752.i64[1] = 0xFFFFLL;
        int8x16_t v753 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v751, 0x12uLL), (int8x16_t)vdupq_n_s64(0x3FFFC000uLL)), vandq_s8(v751, v752));
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v753, v753, 8uLL).i64[0], 0x1CuLL), *(int8x8_t *)v753.i8);
        uint64_t v353 = (unint64_t *)((char *)v353 + 7);
        break;
      case 8:
        int8x16_t v754 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v369, 8uLL), v369);
        v755.i64[0] = 4294901760;
        v755.i64[1] = 4294901760;
        int8x16_t v756 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v754, 0x10uLL), v755);
        v755.i64[0] = 0xFFFFLL;
        v755.i64[1] = 0xFFFFLL;
        int8x16_t v757 = vorrq_s8(v756, vandq_s8(v754, v755));
        *v353++ = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v757, v757, 8uLL).i64[0], 0x20uLL), *(int8x8_t *)v757.i8);
        break;
      case 9:
        v758.i64[0] = 0xFFFF0000FFFFLL;
        v758.i64[1] = 0xFFFF0000FFFFLL;
        int8x16_t v759 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v369, 7uLL), (int8x16_t)vdupq_n_s64(0x1FFFE0001FFFE00uLL)), vandq_s8(v369, v758));
        int8x16_t v760 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v759, 0xEuLL), (int8x16_t)vdupq_n_s64(0x7FFFFFC0000uLL)), vandq_s8(v759, (int8x16_t)vdupq_n_s64(0x1FFFFFFuLL)));
        unint64_t v761 = vextq_s8(v760, v760, 8uLL).u64[0];
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v761, 0x24uLL), *(int8x8_t *)v760.i8);
        *((unsigned char *)v353 + 8) = vshrd_n_u64(v761, 0x1CuLL);
        uint64_t v353 = (unint64_t *)((char *)v353 + 9);
        break;
      case 0xA:
        v762.i64[0] = 0xFFFF0000FFFFLL;
        v762.i64[1] = 0xFFFF0000FFFFLL;
        int8x16_t v763 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v369, 6uLL), (int8x16_t)vdupq_n_s64(0x3FFFC0003FFFC00uLL)), vandq_s8(v369, v762));
        int8x16_t v764 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v763, 0xCuLL), (int8x16_t)vdupq_n_s64(0x3FFFFFF00000uLL)), vandq_s8(v763, (int8x16_t)vdupq_n_s64(0x3FFFFFFuLL)));
        unint64_t v765 = vextq_s8(v764, v764, 8uLL).u64[0];
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v765, 0x28uLL), *(int8x8_t *)v764.i8);
        *((_WORD *)v353 + 4) = vshrd_n_u64(v765, 0x18uLL);
        uint64_t v353 = (unint64_t *)((char *)v353 + 10);
        break;
      default:
        int8x16_t v968 = v370;
        int8x16_t v976 = v373;
        int8x16_t v985 = v374;
        int8x16_t v996 = v377;
        int8x16_t v1008 = v378;
        uint64_t v734 = 0;
        int64x2_t v1030 = 0uLL;
        do
        {
          int8x16_t v1026 = v369;
          v1030.i16[v734] = *(_WORD *)((unint64_t)&v1026 & 0xFFFFFFFFFFFFFFF1 | (2 * (v734 & 7)));
          ++v734;
        }
        while (v734 != 8);
        uint64_t v353 = vectorWritePacked(v353, (uint64_t)&v1030, v728);
        int8x16_t v377 = v996;
        int8x16_t v378 = v1008;
        int8x16_t v373 = v976;
        int8x16_t v374 = v985;
        int8x16_t v370 = v968;
        break;
    }
    int v766 = *((unsigned __int16 *)a1 + 25);
    switch(*((_WORD *)a1 + 25))
    {
      case 0:
        break;
      case 1:
        int8x16_t v767 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v370, 0xFuLL), v370);
        v768.i64[0] = 0xFFFFLL;
        v768.i64[1] = 0xFFFFLL;
        int8x16_t v769 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v767, 0x1EuLL), (int8x16_t)vdupq_n_s64(0x3FFFCuLL)), vandq_s8(v767, v768));
        unsigned __int32 v770 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v769, v769, 8uLL).i64[0], 4uLL), *(int8x8_t *)v769.i8).u32[0];
        uint64_t v771 = 1;
        goto LABEL_305;
      case 2:
        int8x16_t v773 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v370, 0xEuLL), v370);
        v774.i64[0] = 0xFFFFLL;
        v774.i64[1] = 0xFFFFLL;
        int8x16_t v775 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v773, 0x1CuLL), (int8x16_t)vdupq_n_s64(0xFFFF0uLL)), vandq_s8(v773, v774));
        unsigned __int32 v770 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v775, v775, 8uLL).i64[0], 8uLL), *(int8x8_t *)v775.i8).u32[0];
        uint64_t v771 = 2;
        goto LABEL_305;
      case 3:
        int8x16_t v776 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v370, 0xDuLL), v370);
        v777.i64[0] = 0xFFFFLL;
        v777.i64[1] = 0xFFFFLL;
        int8x16_t v778 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v776, 0x1AuLL), (int8x16_t)vdupq_n_s64(0x3FFFC0uLL)), vandq_s8(v776, v777));
        unsigned __int32 v770 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v778, v778, 8uLL).i64[0], 0xCuLL), *(int8x8_t *)v778.i8).u32[0];
        uint64_t v771 = 3;
LABEL_305:
        *(_DWORD *)uint64_t v353 = v770;
        uint64_t v353 = (unint64_t *)((char *)v353 + v771);
        break;
      case 4:
        int8x16_t v779 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v370, 0xCuLL), v370);
        v780.i64[0] = 16776960;
        v780.i64[1] = 16776960;
        int8x16_t v781 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v779, 0x18uLL), v780);
        v780.i64[0] = 0xFFFFLL;
        v780.i64[1] = 0xFFFFLL;
        int8x16_t v782 = vorrq_s8(v781, vandq_s8(v779, v780));
        *(_DWORD *)uint64_t v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v782, v782, 8uLL).i64[0], 0x10uLL), *(int8x8_t *)v782.i8).u32[0];
        uint64_t v353 = (unint64_t *)((char *)v353 + 4);
        break;
      case 5:
        int8x16_t v783 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v370, 0xBuLL), v370);
        v784.i64[0] = 0xFFFFLL;
        v784.i64[1] = 0xFFFFLL;
        int8x16_t v785 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v783, 0x16uLL), (int8x16_t)vdupq_n_s64(0x3FFFC00uLL)), vandq_s8(v783, v784));
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v785, v785, 8uLL).i64[0], 0x14uLL), *(int8x8_t *)v785.i8);
        uint64_t v353 = (unint64_t *)((char *)v353 + 5);
        break;
      case 6:
        int8x16_t v786 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v370, 0xAuLL), v370);
        v787.i64[0] = 0xFFFFLL;
        v787.i64[1] = 0xFFFFLL;
        int8x16_t v788 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v786, 0x14uLL), (int8x16_t)vdupq_n_s64(0xFFFF000uLL)), vandq_s8(v786, v787));
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v788, v788, 8uLL).i64[0], 0x18uLL), *(int8x8_t *)v788.i8);
        uint64_t v353 = (unint64_t *)((char *)v353 + 6);
        break;
      case 7:
        int8x16_t v789 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v370, 9uLL), v370);
        v790.i64[0] = 0xFFFFLL;
        v790.i64[1] = 0xFFFFLL;
        int8x16_t v791 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v789, 0x12uLL), (int8x16_t)vdupq_n_s64(0x3FFFC000uLL)), vandq_s8(v789, v790));
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v791, v791, 8uLL).i64[0], 0x1CuLL), *(int8x8_t *)v791.i8);
        uint64_t v353 = (unint64_t *)((char *)v353 + 7);
        break;
      case 8:
        int8x16_t v792 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v370, 8uLL), v370);
        v793.i64[0] = 4294901760;
        v793.i64[1] = 4294901760;
        int8x16_t v794 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v792, 0x10uLL), v793);
        v793.i64[0] = 0xFFFFLL;
        v793.i64[1] = 0xFFFFLL;
        int8x16_t v795 = vorrq_s8(v794, vandq_s8(v792, v793));
        *v353++ = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v795, v795, 8uLL).i64[0], 0x20uLL), *(int8x8_t *)v795.i8);
        break;
      case 9:
        v796.i64[0] = 0xFFFF0000FFFFLL;
        v796.i64[1] = 0xFFFF0000FFFFLL;
        int8x16_t v797 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v370, 7uLL), (int8x16_t)vdupq_n_s64(0x1FFFE0001FFFE00uLL)), vandq_s8(v370, v796));
        int8x16_t v798 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v797, 0xEuLL), (int8x16_t)vdupq_n_s64(0x7FFFFFC0000uLL)), vandq_s8(v797, (int8x16_t)vdupq_n_s64(0x1FFFFFFuLL)));
        unint64_t v799 = vextq_s8(v798, v798, 8uLL).u64[0];
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v799, 0x24uLL), *(int8x8_t *)v798.i8);
        *((unsigned char *)v353 + 8) = vshrd_n_u64(v799, 0x1CuLL);
        uint64_t v353 = (unint64_t *)((char *)v353 + 9);
        break;
      case 0xA:
        v800.i64[0] = 0xFFFF0000FFFFLL;
        v800.i64[1] = 0xFFFF0000FFFFLL;
        int8x16_t v801 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v370, 6uLL), (int8x16_t)vdupq_n_s64(0x3FFFC0003FFFC00uLL)), vandq_s8(v370, v800));
        int8x16_t v802 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v801, 0xCuLL), (int8x16_t)vdupq_n_s64(0x3FFFFFF00000uLL)), vandq_s8(v801, (int8x16_t)vdupq_n_s64(0x3FFFFFFuLL)));
        unint64_t v803 = vextq_s8(v802, v802, 8uLL).u64[0];
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v803, 0x28uLL), *(int8x8_t *)v802.i8);
        *((_WORD *)v353 + 4) = vshrd_n_u64(v803, 0x18uLL);
        uint64_t v353 = (unint64_t *)((char *)v353 + 10);
        break;
      default:
        int8x16_t v977 = v373;
        int8x16_t v986 = v374;
        int8x16_t v997 = v377;
        int8x16_t v1009 = v378;
        uint64_t v772 = 0;
        int64x2_t v1030 = 0uLL;
        do
        {
          int8x16_t v1025 = v370;
          v1030.i16[v772] = *(_WORD *)((unint64_t)&v1025 & 0xFFFFFFFFFFFFFFF1 | (2 * (v772 & 7)));
          ++v772;
        }
        while (v772 != 8);
        uint64_t v353 = vectorWritePacked(v353, (uint64_t)&v1030, v766);
        int8x16_t v377 = v997;
        int8x16_t v378 = v1009;
        int8x16_t v373 = v977;
        int8x16_t v374 = v986;
        break;
    }
LABEL_313:
    int v804 = *((unsigned __int16 *)a1 + 29);
    switch(*((_WORD *)a1 + 29))
    {
      case 0:
        goto LABEL_343;
      case 1:
        int8x16_t v805 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v373, 0xFuLL), v373);
        v806.i64[0] = 0xFFFFLL;
        v806.i64[1] = 0xFFFFLL;
        int8x16_t v807 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v805, 0x1EuLL), (int8x16_t)vdupq_n_s64(0x3FFFCuLL)), vandq_s8(v805, v806));
        unsigned __int32 v808 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v807, v807, 8uLL).i64[0], 4uLL), *(int8x8_t *)v807.i8).u32[0];
        uint64_t v809 = 1;
        goto LABEL_320;
      case 2:
        int8x16_t v811 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v373, 0xEuLL), v373);
        v812.i64[0] = 0xFFFFLL;
        v812.i64[1] = 0xFFFFLL;
        int8x16_t v813 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v811, 0x1CuLL), (int8x16_t)vdupq_n_s64(0xFFFF0uLL)), vandq_s8(v811, v812));
        unsigned __int32 v808 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v813, v813, 8uLL).i64[0], 8uLL), *(int8x8_t *)v813.i8).u32[0];
        uint64_t v809 = 2;
        goto LABEL_320;
      case 3:
        int8x16_t v814 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v373, 0xDuLL), v373);
        v815.i64[0] = 0xFFFFLL;
        v815.i64[1] = 0xFFFFLL;
        int8x16_t v816 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v814, 0x1AuLL), (int8x16_t)vdupq_n_s64(0x3FFFC0uLL)), vandq_s8(v814, v815));
        unsigned __int32 v808 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v816, v816, 8uLL).i64[0], 0xCuLL), *(int8x8_t *)v816.i8).u32[0];
        uint64_t v809 = 3;
LABEL_320:
        *(_DWORD *)uint64_t v353 = v808;
        uint64_t v353 = (unint64_t *)((char *)v353 + v809);
        break;
      case 4:
        int8x16_t v817 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v373, 0xCuLL), v373);
        v818.i64[0] = 16776960;
        v818.i64[1] = 16776960;
        int8x16_t v819 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v817, 0x18uLL), v818);
        v818.i64[0] = 0xFFFFLL;
        v818.i64[1] = 0xFFFFLL;
        int8x16_t v820 = vorrq_s8(v819, vandq_s8(v817, v818));
        *(_DWORD *)uint64_t v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v820, v820, 8uLL).i64[0], 0x10uLL), *(int8x8_t *)v820.i8).u32[0];
        uint64_t v353 = (unint64_t *)((char *)v353 + 4);
        break;
      case 5:
        int8x16_t v821 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v373, 0xBuLL), v373);
        v822.i64[0] = 0xFFFFLL;
        v822.i64[1] = 0xFFFFLL;
        int8x16_t v823 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v821, 0x16uLL), (int8x16_t)vdupq_n_s64(0x3FFFC00uLL)), vandq_s8(v821, v822));
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v823, v823, 8uLL).i64[0], 0x14uLL), *(int8x8_t *)v823.i8);
        uint64_t v353 = (unint64_t *)((char *)v353 + 5);
        break;
      case 6:
        int8x16_t v824 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v373, 0xAuLL), v373);
        v825.i64[0] = 0xFFFFLL;
        v825.i64[1] = 0xFFFFLL;
        int8x16_t v826 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v824, 0x14uLL), (int8x16_t)vdupq_n_s64(0xFFFF000uLL)), vandq_s8(v824, v825));
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v826, v826, 8uLL).i64[0], 0x18uLL), *(int8x8_t *)v826.i8);
        uint64_t v353 = (unint64_t *)((char *)v353 + 6);
        break;
      case 7:
        int8x16_t v827 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v373, 9uLL), v373);
        v828.i64[0] = 0xFFFFLL;
        v828.i64[1] = 0xFFFFLL;
        int8x16_t v829 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v827, 0x12uLL), (int8x16_t)vdupq_n_s64(0x3FFFC000uLL)), vandq_s8(v827, v828));
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v829, v829, 8uLL).i64[0], 0x1CuLL), *(int8x8_t *)v829.i8);
        uint64_t v353 = (unint64_t *)((char *)v353 + 7);
        break;
      case 8:
        int8x16_t v830 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v373, 8uLL), v373);
        v831.i64[0] = 4294901760;
        v831.i64[1] = 4294901760;
        int8x16_t v832 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v830, 0x10uLL), v831);
        v831.i64[0] = 0xFFFFLL;
        v831.i64[1] = 0xFFFFLL;
        int8x16_t v833 = vorrq_s8(v832, vandq_s8(v830, v831));
        *v353++ = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v833, v833, 8uLL).i64[0], 0x20uLL), *(int8x8_t *)v833.i8);
        break;
      case 9:
        v834.i64[0] = 0xFFFF0000FFFFLL;
        v834.i64[1] = 0xFFFF0000FFFFLL;
        int8x16_t v835 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v373, 7uLL), (int8x16_t)vdupq_n_s64(0x1FFFE0001FFFE00uLL)), vandq_s8(v373, v834));
        int8x16_t v836 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v835, 0xEuLL), (int8x16_t)vdupq_n_s64(0x7FFFFFC0000uLL)), vandq_s8(v835, (int8x16_t)vdupq_n_s64(0x1FFFFFFuLL)));
        unint64_t v837 = vextq_s8(v836, v836, 8uLL).u64[0];
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v837, 0x24uLL), *(int8x8_t *)v836.i8);
        *((unsigned char *)v353 + 8) = vshrd_n_u64(v837, 0x1CuLL);
        uint64_t v353 = (unint64_t *)((char *)v353 + 9);
        break;
      case 0xA:
        v838.i64[0] = 0xFFFF0000FFFFLL;
        v838.i64[1] = 0xFFFF0000FFFFLL;
        int8x16_t v839 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v373, 6uLL), (int8x16_t)vdupq_n_s64(0x3FFFC0003FFFC00uLL)), vandq_s8(v373, v838));
        int8x16_t v840 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v839, 0xCuLL), (int8x16_t)vdupq_n_s64(0x3FFFFFF00000uLL)), vandq_s8(v839, (int8x16_t)vdupq_n_s64(0x3FFFFFFuLL)));
        unint64_t v841 = vextq_s8(v840, v840, 8uLL).u64[0];
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v841, 0x28uLL), *(int8x8_t *)v840.i8);
        *((_WORD *)v353 + 4) = vshrd_n_u64(v841, 0x18uLL);
        uint64_t v353 = (unint64_t *)((char *)v353 + 10);
        break;
      default:
        int8x16_t v987 = v374;
        int8x16_t v998 = v377;
        int8x16_t v1010 = v378;
        uint64_t v810 = 0;
        int64x2_t v1030 = 0uLL;
        do
        {
          int8x16_t v1024 = v373;
          v1030.i16[v810] = *(_WORD *)((unint64_t)&v1024 & 0xFFFFFFFFFFFFFFF1 | (2 * (v810 & 7)));
          ++v810;
        }
        while (v810 != 8);
        uint64_t v353 = vectorWritePacked(v353, (uint64_t)&v1030, v804);
        int8x16_t v377 = v998;
        int8x16_t v378 = v1010;
        int8x16_t v374 = v987;
        break;
    }
    int v842 = *((unsigned __int16 *)a1 + 29);
    switch(*((_WORD *)a1 + 29))
    {
      case 0:
        break;
      case 1:
        int8x16_t v843 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v374, 0xFuLL), v374);
        v844.i64[0] = 0xFFFFLL;
        v844.i64[1] = 0xFFFFLL;
        int8x16_t v845 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v843, 0x1EuLL), (int8x16_t)vdupq_n_s64(0x3FFFCuLL)), vandq_s8(v843, v844));
        unsigned __int32 v846 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v845, v845, 8uLL).i64[0], 4uLL), *(int8x8_t *)v845.i8).u32[0];
        uint64_t v847 = 1;
        goto LABEL_335;
      case 2:
        int8x16_t v849 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v374, 0xEuLL), v374);
        v850.i64[0] = 0xFFFFLL;
        v850.i64[1] = 0xFFFFLL;
        int8x16_t v851 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v849, 0x1CuLL), (int8x16_t)vdupq_n_s64(0xFFFF0uLL)), vandq_s8(v849, v850));
        unsigned __int32 v846 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v851, v851, 8uLL).i64[0], 8uLL), *(int8x8_t *)v851.i8).u32[0];
        uint64_t v847 = 2;
        goto LABEL_335;
      case 3:
        int8x16_t v852 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v374, 0xDuLL), v374);
        v853.i64[0] = 0xFFFFLL;
        v853.i64[1] = 0xFFFFLL;
        int8x16_t v854 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v852, 0x1AuLL), (int8x16_t)vdupq_n_s64(0x3FFFC0uLL)), vandq_s8(v852, v853));
        unsigned __int32 v846 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v854, v854, 8uLL).i64[0], 0xCuLL), *(int8x8_t *)v854.i8).u32[0];
        uint64_t v847 = 3;
LABEL_335:
        *(_DWORD *)uint64_t v353 = v846;
        uint64_t v353 = (unint64_t *)((char *)v353 + v847);
        break;
      case 4:
        int8x16_t v855 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v374, 0xCuLL), v374);
        v856.i64[0] = 16776960;
        v856.i64[1] = 16776960;
        int8x16_t v857 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v855, 0x18uLL), v856);
        v856.i64[0] = 0xFFFFLL;
        v856.i64[1] = 0xFFFFLL;
        int8x16_t v858 = vorrq_s8(v857, vandq_s8(v855, v856));
        *(_DWORD *)uint64_t v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v858, v858, 8uLL).i64[0], 0x10uLL), *(int8x8_t *)v858.i8).u32[0];
        uint64_t v353 = (unint64_t *)((char *)v353 + 4);
        break;
      case 5:
        int8x16_t v859 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v374, 0xBuLL), v374);
        v860.i64[0] = 0xFFFFLL;
        v860.i64[1] = 0xFFFFLL;
        int8x16_t v861 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v859, 0x16uLL), (int8x16_t)vdupq_n_s64(0x3FFFC00uLL)), vandq_s8(v859, v860));
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v861, v861, 8uLL).i64[0], 0x14uLL), *(int8x8_t *)v861.i8);
        uint64_t v353 = (unint64_t *)((char *)v353 + 5);
        break;
      case 6:
        int8x16_t v862 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v374, 0xAuLL), v374);
        v863.i64[0] = 0xFFFFLL;
        v863.i64[1] = 0xFFFFLL;
        int8x16_t v864 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v862, 0x14uLL), (int8x16_t)vdupq_n_s64(0xFFFF000uLL)), vandq_s8(v862, v863));
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v864, v864, 8uLL).i64[0], 0x18uLL), *(int8x8_t *)v864.i8);
        uint64_t v353 = (unint64_t *)((char *)v353 + 6);
        break;
      case 7:
        int8x16_t v865 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v374, 9uLL), v374);
        v866.i64[0] = 0xFFFFLL;
        v866.i64[1] = 0xFFFFLL;
        int8x16_t v867 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v865, 0x12uLL), (int8x16_t)vdupq_n_s64(0x3FFFC000uLL)), vandq_s8(v865, v866));
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v867, v867, 8uLL).i64[0], 0x1CuLL), *(int8x8_t *)v867.i8);
        uint64_t v353 = (unint64_t *)((char *)v353 + 7);
        break;
      case 8:
        int8x16_t v868 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v374, 8uLL), v374);
        v869.i64[0] = 4294901760;
        v869.i64[1] = 4294901760;
        int8x16_t v870 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v868, 0x10uLL), v869);
        v869.i64[0] = 0xFFFFLL;
        v869.i64[1] = 0xFFFFLL;
        int8x16_t v871 = vorrq_s8(v870, vandq_s8(v868, v869));
        *v353++ = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v871, v871, 8uLL).i64[0], 0x20uLL), *(int8x8_t *)v871.i8);
        break;
      case 9:
        v872.i64[0] = 0xFFFF0000FFFFLL;
        v872.i64[1] = 0xFFFF0000FFFFLL;
        int8x16_t v873 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v374, 7uLL), (int8x16_t)vdupq_n_s64(0x1FFFE0001FFFE00uLL)), vandq_s8(v374, v872));
        int8x16_t v874 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v873, 0xEuLL), (int8x16_t)vdupq_n_s64(0x7FFFFFC0000uLL)), vandq_s8(v873, (int8x16_t)vdupq_n_s64(0x1FFFFFFuLL)));
        unint64_t v875 = vextq_s8(v874, v874, 8uLL).u64[0];
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v875, 0x24uLL), *(int8x8_t *)v874.i8);
        *((unsigned char *)v353 + 8) = vshrd_n_u64(v875, 0x1CuLL);
        uint64_t v353 = (unint64_t *)((char *)v353 + 9);
        break;
      case 0xA:
        v876.i64[0] = 0xFFFF0000FFFFLL;
        v876.i64[1] = 0xFFFF0000FFFFLL;
        int8x16_t v877 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v374, 6uLL), (int8x16_t)vdupq_n_s64(0x3FFFC0003FFFC00uLL)), vandq_s8(v374, v876));
        int8x16_t v878 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v877, 0xCuLL), (int8x16_t)vdupq_n_s64(0x3FFFFFF00000uLL)), vandq_s8(v877, (int8x16_t)vdupq_n_s64(0x3FFFFFFuLL)));
        unint64_t v879 = vextq_s8(v878, v878, 8uLL).u64[0];
        *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v879, 0x28uLL), *(int8x8_t *)v878.i8);
        *((_WORD *)v353 + 4) = vshrd_n_u64(v879, 0x18uLL);
        uint64_t v353 = (unint64_t *)((char *)v353 + 10);
        break;
      default:
        int8x16_t v999 = v377;
        int8x16_t v1011 = v378;
        uint64_t v848 = 0;
        int64x2_t v1030 = 0uLL;
        do
        {
          int8x16_t v1023 = v374;
          v1030.i16[v848] = *(_WORD *)((unint64_t)&v1023 & 0xFFFFFFFFFFFFFFF1 | (2 * (v848 & 7)));
          ++v848;
        }
        while (v848 != 8);
        uint64_t v353 = vectorWritePacked(v353, (uint64_t)&v1030, v842);
        int8x16_t v377 = v999;
        int8x16_t v378 = v1011;
        break;
    }
LABEL_343:
    if (v5 != 19)
    {
      int v880 = *((unsigned __int16 *)a1 + 33);
      switch(*((_WORD *)a1 + 33))
      {
        case 0:
          goto LABEL_385;
        case 1:
          int8x16_t v881 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v377, 0xFuLL), v377);
          v882.i64[0] = 0xFFFFLL;
          v882.i64[1] = 0xFFFFLL;
          int8x16_t v883 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v881, 0x1EuLL), (int8x16_t)vdupq_n_s64(0x3FFFCuLL)), vandq_s8(v881, v882));
          unsigned __int32 v884 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v883, v883, 8uLL).i64[0], 4uLL), *(int8x8_t *)v883.i8).u32[0];
          uint64_t v885 = 1;
          goto LABEL_351;
        case 2:
          int8x16_t v887 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v377, 0xEuLL), v377);
          v888.i64[0] = 0xFFFFLL;
          v888.i64[1] = 0xFFFFLL;
          int8x16_t v889 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v887, 0x1CuLL), (int8x16_t)vdupq_n_s64(0xFFFF0uLL)), vandq_s8(v887, v888));
          unsigned __int32 v884 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v889, v889, 8uLL).i64[0], 8uLL), *(int8x8_t *)v889.i8).u32[0];
          uint64_t v885 = 2;
          goto LABEL_351;
        case 3:
          int8x16_t v890 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v377, 0xDuLL), v377);
          v891.i64[0] = 0xFFFFLL;
          v891.i64[1] = 0xFFFFLL;
          int8x16_t v892 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v890, 0x1AuLL), (int8x16_t)vdupq_n_s64(0x3FFFC0uLL)), vandq_s8(v890, v891));
          unsigned __int32 v884 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v892, v892, 8uLL).i64[0], 0xCuLL), *(int8x8_t *)v892.i8).u32[0];
          uint64_t v885 = 3;
LABEL_351:
          *(_DWORD *)uint64_t v353 = v884;
          uint64_t v353 = (unint64_t *)((char *)v353 + v885);
          break;
        case 4:
          int8x16_t v893 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v377, 0xCuLL), v377);
          v894.i64[0] = 16776960;
          v894.i64[1] = 16776960;
          int8x16_t v895 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v893, 0x18uLL), v894);
          v894.i64[0] = 0xFFFFLL;
          v894.i64[1] = 0xFFFFLL;
          int8x16_t v896 = vorrq_s8(v895, vandq_s8(v893, v894));
          *(_DWORD *)uint64_t v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v896, v896, 8uLL).i64[0], 0x10uLL), *(int8x8_t *)v896.i8).u32[0];
          uint64_t v353 = (unint64_t *)((char *)v353 + 4);
          break;
        case 5:
          int8x16_t v897 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v377, 0xBuLL), v377);
          v898.i64[0] = 0xFFFFLL;
          v898.i64[1] = 0xFFFFLL;
          int8x16_t v899 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v897, 0x16uLL), (int8x16_t)vdupq_n_s64(0x3FFFC00uLL)), vandq_s8(v897, v898));
          *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v899, v899, 8uLL).i64[0], 0x14uLL), *(int8x8_t *)v899.i8);
          uint64_t v353 = (unint64_t *)((char *)v353 + 5);
          break;
        case 6:
          int8x16_t v900 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v377, 0xAuLL), v377);
          v901.i64[0] = 0xFFFFLL;
          v901.i64[1] = 0xFFFFLL;
          int8x16_t v902 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v900, 0x14uLL), (int8x16_t)vdupq_n_s64(0xFFFF000uLL)), vandq_s8(v900, v901));
          *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v902, v902, 8uLL).i64[0], 0x18uLL), *(int8x8_t *)v902.i8);
          uint64_t v353 = (unint64_t *)((char *)v353 + 6);
          break;
        case 7:
          int8x16_t v903 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v377, 9uLL), v377);
          v904.i64[0] = 0xFFFFLL;
          v904.i64[1] = 0xFFFFLL;
          int8x16_t v905 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v903, 0x12uLL), (int8x16_t)vdupq_n_s64(0x3FFFC000uLL)), vandq_s8(v903, v904));
          *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v905, v905, 8uLL).i64[0], 0x1CuLL), *(int8x8_t *)v905.i8);
          uint64_t v353 = (unint64_t *)((char *)v353 + 7);
          break;
        case 8:
          int8x16_t v906 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v377, 8uLL), v377);
          v907.i64[0] = 4294901760;
          v907.i64[1] = 4294901760;
          int8x16_t v908 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v906, 0x10uLL), v907);
          v907.i64[0] = 0xFFFFLL;
          v907.i64[1] = 0xFFFFLL;
          int8x16_t v909 = vorrq_s8(v908, vandq_s8(v906, v907));
          *v353++ = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v909, v909, 8uLL).i64[0], 0x20uLL), *(int8x8_t *)v909.i8);
          break;
        case 9:
          v910.i64[0] = 0xFFFF0000FFFFLL;
          v910.i64[1] = 0xFFFF0000FFFFLL;
          int8x16_t v911 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v377, 7uLL), (int8x16_t)vdupq_n_s64(0x1FFFE0001FFFE00uLL)), vandq_s8(v377, v910));
          int8x16_t v912 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v911, 0xEuLL), (int8x16_t)vdupq_n_s64(0x7FFFFFC0000uLL)), vandq_s8(v911, (int8x16_t)vdupq_n_s64(0x1FFFFFFuLL)));
          unint64_t v913 = vextq_s8(v912, v912, 8uLL).u64[0];
          *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v913, 0x24uLL), *(int8x8_t *)v912.i8);
          *((unsigned char *)v353 + 8) = vshrd_n_u64(v913, 0x1CuLL);
          uint64_t v353 = (unint64_t *)((char *)v353 + 9);
          break;
        case 0xA:
          v914.i64[0] = 0xFFFF0000FFFFLL;
          v914.i64[1] = 0xFFFF0000FFFFLL;
          int8x16_t v915 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v377, 6uLL), (int8x16_t)vdupq_n_s64(0x3FFFC0003FFFC00uLL)), vandq_s8(v377, v914));
          int8x16_t v916 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v915, 0xCuLL), (int8x16_t)vdupq_n_s64(0x3FFFFFF00000uLL)), vandq_s8(v915, (int8x16_t)vdupq_n_s64(0x3FFFFFFuLL)));
          unint64_t v917 = vextq_s8(v916, v916, 8uLL).u64[0];
          *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v917, 0x28uLL), *(int8x8_t *)v916.i8);
          *((_WORD *)v353 + 4) = vshrd_n_u64(v917, 0x18uLL);
          uint64_t v353 = (unint64_t *)((char *)v353 + 10);
          break;
        default:
          int8x16_t v1012 = v378;
          uint64_t v886 = 0;
          int64x2_t v1030 = 0uLL;
          do
          {
            int8x16_t v1022 = v377;
            v1030.i16[v886] = *(_WORD *)((unint64_t)&v1022 & 0xFFFFFFFFFFFFFFF1 | (2 * (v886 & 7)));
            ++v886;
          }
          while (v886 != 8);
          uint64_t v353 = vectorWritePacked(v353, (uint64_t)&v1030, v880);
          int8x16_t v378 = v1012;
          break;
      }
      int v918 = *((unsigned __int16 *)a1 + 33);
      switch(*((_WORD *)a1 + 33))
      {
        case 0:
          break;
        case 1:
          int8x16_t v645 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v378, 0xFuLL), v378);
          int8x16_t v646 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v645, 0x1EuLL), (int8x16_t)vdupq_n_s64(0x3FFFCuLL));
LABEL_361:
          v919.i64[0] = 0xFFFFLL;
          v919.i64[1] = 0xFFFFLL;
          int8x16_t v920 = vorrq_s8(v646, vandq_s8(v645, v919));
          unsigned __int32 v921 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v920, v920, 8uLL).i64[0], 4uLL), *(int8x8_t *)v920.i8).u32[0];
          uint64_t v922 = 1;
          goto LABEL_370;
        case 2:
          int8x16_t v651 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v378, 0xEuLL), v378);
          int8x16_t v652 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v651, 0x1CuLL), (int8x16_t)vdupq_n_s64(0xFFFF0uLL));
LABEL_367:
          v925.i64[0] = 0xFFFFLL;
          v925.i64[1] = 0xFFFFLL;
          int8x16_t v926 = vorrq_s8(v652, vandq_s8(v651, v925));
          unsigned __int32 v921 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v926, v926, 8uLL).i64[0], 8uLL), *(int8x8_t *)v926.i8).u32[0];
          uint64_t v922 = 2;
          goto LABEL_370;
        case 3:
          int8x16_t v656 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v378, 0xDuLL), v378);
          int8x16_t v657 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v656, 0x1AuLL), (int8x16_t)vdupq_n_s64(0x3FFFC0uLL));
LABEL_369:
          v927.i64[0] = 0xFFFFLL;
          v927.i64[1] = 0xFFFFLL;
          int8x16_t v928 = vorrq_s8(v657, vandq_s8(v656, v927));
          unsigned __int32 v921 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v928, v928, 8uLL).i64[0], 0xCuLL), *(int8x8_t *)v928.i8).u32[0];
          uint64_t v922 = 3;
LABEL_370:
          *(_DWORD *)uint64_t v353 = v921;
          uint64_t v353 = (unint64_t *)((char *)v353 + v922);
          break;
        case 4:
          int8x16_t v662 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v378, 0xCuLL), v378);
LABEL_372:
          v929.i64[0] = 16776960;
          v929.i64[1] = 16776960;
          int8x16_t v930 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v662, 0x18uLL), v929);
          v929.i64[0] = 0xFFFFLL;
          v929.i64[1] = 0xFFFFLL;
          int8x16_t v931 = vorrq_s8(v930, vandq_s8(v662, v929));
          *(_DWORD *)uint64_t v353 = vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v931, v931, 8uLL).i64[0], 0x10uLL), *(int8x8_t *)v931.i8).u32[0];
          uint64_t v353 = (unint64_t *)((char *)v353 + 4);
          break;
        case 5:
          int8x16_t v666 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v378, 0xBuLL), v378);
          int8x16_t v667 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v666, 0x16uLL), (int8x16_t)vdupq_n_s64(0x3FFFC00uLL));
LABEL_374:
          v932.i64[0] = 0xFFFFLL;
          v932.i64[1] = 0xFFFFLL;
          int8x16_t v933 = vorrq_s8(v667, vandq_s8(v666, v932));
          *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v933, v933, 8uLL).i64[0], 0x14uLL), *(int8x8_t *)v933.i8);
          uint64_t v353 = (unint64_t *)((char *)v353 + 5);
          break;
        case 6:
          int8x16_t v671 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v378, 0xAuLL), v378);
          int8x16_t v672 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v671, 0x14uLL), (int8x16_t)vdupq_n_s64(0xFFFF000uLL));
LABEL_376:
          v934.i64[0] = 0xFFFFLL;
          v934.i64[1] = 0xFFFFLL;
          int8x16_t v935 = vorrq_s8(v672, vandq_s8(v671, v934));
          *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v935, v935, 8uLL).i64[0], 0x18uLL), *(int8x8_t *)v935.i8);
          uint64_t v353 = (unint64_t *)((char *)v353 + 6);
          break;
        case 7:
          int8x16_t v676 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v378, 9uLL), v378);
          int8x16_t v677 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v676, 0x12uLL), (int8x16_t)vdupq_n_s64(0x3FFFC000uLL));
LABEL_378:
          v936.i64[0] = 0xFFFFLL;
          v936.i64[1] = 0xFFFFLL;
          int8x16_t v937 = vorrq_s8(v677, vandq_s8(v676, v936));
          *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v937, v937, 8uLL).i64[0], 0x1CuLL), *(int8x8_t *)v937.i8);
          uint64_t v353 = (unint64_t *)((char *)v353 + 7);
          break;
        case 8:
          int8x16_t v682 = vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v378, 8uLL), v378);
LABEL_380:
          v938.i64[0] = 4294901760;
          v938.i64[1] = 4294901760;
          int8x16_t v939 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v682, 0x10uLL), v938);
          v938.i64[0] = 0xFFFFLL;
          v938.i64[1] = 0xFFFFLL;
          int8x16_t v940 = vorrq_s8(v939, vandq_s8(v682, v938));
          *v353++ = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(vextq_s8(v940, v940, 8uLL).i64[0], 0x20uLL), *(int8x8_t *)v940.i8);
          break;
        case 9:
          v941.i64[0] = 0xFFFF0000FFFFLL;
          v941.i64[1] = 0xFFFF0000FFFFLL;
          int8x16_t v942 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v378, 7uLL), (int8x16_t)vdupq_n_s64(0x1FFFE0001FFFE00uLL)), vandq_s8(v378, v941));
          int8x16_t v688 = vandq_s8(v942, (int8x16_t)vdupq_n_s64(0x1FFFFFFuLL));
          int8x16_t v690 = (int8x16_t)vshrq_n_u64((uint64x2_t)v942, 0xEuLL);
          int8x16_t v689 = (int8x16_t)vdupq_n_s64(0x7FFFFFC0000uLL);
LABEL_382:
          int8x16_t v943 = vorrq_s8(vandq_s8(v690, v689), v688);
          unint64_t v944 = vextq_s8(v943, v943, 8uLL).u64[0];
          *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v944, 0x24uLL), *(int8x8_t *)v943.i8);
          *((unsigned char *)v353 + 8) = vshrd_n_u64(v944, 0x1CuLL);
          uint64_t v353 = (unint64_t *)((char *)v353 + 9);
          break;
        case 0xA:
          v945.i64[0] = 0xFFFF0000FFFFLL;
          v945.i64[1] = 0xFFFF0000FFFFLL;
          int8x16_t v695 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v378, 6uLL), (int8x16_t)vdupq_n_s64(0x3FFFC0003FFFC00uLL)), vandq_s8(v378, v945));
LABEL_384:
          int8x16_t v946 = vorrq_s8(vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v695, 0xCuLL), (int8x16_t)vdupq_n_s64(0x3FFFFFF00000uLL)), vandq_s8(v695, (int8x16_t)vdupq_n_s64(0x3FFFFFFuLL)));
          unint64_t v947 = vextq_s8(v946, v946, 8uLL).u64[0];
          *uint64_t v353 = (unint64_t)vorr_s8((int8x8_t)vshld_n_s64(v947, 0x28uLL), *(int8x8_t *)v946.i8);
          *((_WORD *)v353 + 4) = vshrd_n_u64(v947, 0x18uLL);
          uint64_t v353 = (unint64_t *)((char *)v353 + 10);
          break;
        default:
          uint64_t v923 = 0;
          int64x2_t v1030 = 0uLL;
          do
          {
            int8x16_t v1021 = v378;
            v1030.i16[v923] = *(_WORD *)((unint64_t)&v1021 & 0xFFFFFFFFFFFFFFF1 | (2 * (v923 & 7)));
            ++v923;
          }
          while (v923 != 8);
          int v924 = v918;
LABEL_365:
          uint64_t v353 = vectorWritePacked(v353, (uint64_t)&v1030, v924);
          break;
      }
    }
  }
LABEL_385:
  uint64_t v11 = 0;
  a1[2] = (uint64_t)v353;
  return v11;
}

unsigned int *vectorload_1x16_packed10(unsigned int *result, int a2, _WORD *a3, _WORD *a4)
{
  unsigned int v4 = *result;
  if (a2 == 2)
  {
    *a3 = (v4 >> 20) & 0x3FF;
    unsigned int v10 = result[1];
    unsigned int v11 = result[2];
    a3[1] = v10 & 0x3FF;
    a3[2] = (v10 >> 10) & 0x3FF;
    a3[3] = (v10 >> 20) & 0x3FF;
    a3[4] = v11 & 0x3FF;
    a3[5] = (v11 >> 10) & 0x3FF;
    a3[6] = (v11 >> 20) & 0x3FF;
    unsigned int v12 = result[3];
    unsigned int v13 = result[4];
    a3[7] = v12 & 0x3FF;
    *a4 = (v12 >> 10) & 0x3FF;
    a4[1] = (v12 >> 20) & 0x3FF;
    a4[2] = v13 & 0x3FF;
    a4[3] = (v13 >> 10) & 0x3FF;
    LOWORD(v12) = (v13 >> 20) & 0x3FF;
    unsigned int v14 = result[5];
    a4[4] = v12;
    a4[5] = v14 & 0x3FF;
    unsigned int v9 = v14 >> 20;
    a4[6] = (v14 >> 10) & 0x3FF;
  }
  else if (a2 == 1)
  {
    *a3 = (v4 >> 10) & 0x3FF;
    a3[1] = (v4 >> 20) & 0x3FF;
    unsigned int v15 = result[1];
    unsigned int v16 = result[2];
    a3[2] = v15 & 0x3FF;
    a3[3] = (v15 >> 10) & 0x3FF;
    a3[4] = (v15 >> 20) & 0x3FF;
    a3[5] = v16 & 0x3FF;
    a3[6] = (v16 >> 10) & 0x3FF;
    a3[7] = (v16 >> 20) & 0x3FF;
    unsigned int v17 = result[3];
    unsigned int v18 = result[4];
    *a4 = v17 & 0x3FF;
    a4[1] = (v17 >> 10) & 0x3FF;
    a4[2] = (v17 >> 20) & 0x3FF;
    a4[3] = v18 & 0x3FF;
    a4[4] = (v18 >> 10) & 0x3FF;
    a4[5] = (v18 >> 20) & 0x3FF;
    unsigned int v19 = result[5];
    LOWORD(v18) = v19 & 0x3FF;
    unsigned int v9 = v19 >> 10;
    a4[6] = v18;
  }
  else
  {
    if (a2) {
      vectorload_1x16_packed10_cold_1();
    }
    *a3 = v4 & 0x3FF;
    a3[1] = (v4 >> 10) & 0x3FF;
    a3[2] = (v4 >> 20) & 0x3FF;
    unsigned int v5 = result[1];
    unsigned int v6 = result[2];
    a3[3] = v5 & 0x3FF;
    a3[4] = (v5 >> 10) & 0x3FF;
    a3[5] = (v5 >> 20) & 0x3FF;
    a3[6] = v6 & 0x3FF;
    a3[7] = (v6 >> 10) & 0x3FF;
    *a4 = (v6 >> 20) & 0x3FF;
    unsigned int v7 = result[3];
    unsigned int v8 = result[4];
    a4[1] = v7 & 0x3FF;
    a4[2] = (v7 >> 10) & 0x3FF;
    a4[3] = (v7 >> 20) & 0x3FF;
    a4[4] = v8 & 0x3FF;
    a4[5] = (v8 >> 10) & 0x3FF;
    a4[6] = (v8 >> 20) & 0x3FF;
    unsigned int v9 = result[5];
  }
  a4[7] = v9 & 0x3FF;
  return result;
}

int *SlimXDecodeBlocks_NEON(int *result, double a2, uint32x4_t a3, uint32x4_t a4)
{
  uint64_t v454 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *((void *)result + 2);
  unint64_t v5 = *((void *)result + 3);
  if (v4 >= v5) {
    goto LABEL_285;
  }
  uint64_t v6 = *(void *)result;
  int v7 = result[2];
  uint64_t v8 = result[3];
  uint64_t v10 = result[8];
  unsigned int v9 = result[9];
  uint16x8_t v11 = (uint16x8_t)vdupq_n_s16(v9);
  unsigned int v12 = (char *)result + 42;
  unint64_t v13 = predictionPattern[v10];
  unint64_t v14 = v5 - v4;
  unsigned int v15 = (unsigned __int8 *)(v4 + 2);
  while (1)
  {
    unsigned int v16 = v15 - 1;
    *((void *)result + 2) = v15 - 1;
    unint64_t v17 = *(v15 - 2);
    unsigned int v18 = v17 & 0xF;
    unsigned int v19 = v17 >> 4;
    if (v17 >> 4 != 6) {
      break;
    }
    if (v18 < 8)
    {
      unsigned int v20 = 10 - v18;
      if ((v17 & 0xF) == 0) {
        unsigned int v20 = 0;
      }
      result[27] = v18;
      result[28] = v20;
      ++v15;
      if (--v14) {
        continue;
      }
    }
    goto LABEL_285;
  }
  switch(v19)
  {
    case 0u:
    case 1u:
    case 2u:
      if ((unint64_t)v16 >= v5) {
        goto LABEL_285;
      }
      *((void *)result + 2) = v15;
      unsigned __int16 v21 = *(v15 - 1) | (unsigned __int16)((_WORD)v19 << 8);
      unsigned int v22 = v21;
      __int16 v23 = v21 % 5u;
      *((_WORD *)result + 34) = v21 % 5u;
      __int16 v24 = (v21 / 5u) % 5u;
      *((_WORD *)result + 30) = v24;
      __int16 v25 = ((((unsigned __int16)(v21 - ((18351 * v22) >> 16)) >> 1) + ((18351 * v22) >> 16)) >> 4)
          % 5u;
      *((_WORD *)result + 26) = v25;
      unsigned int v26 = (((unsigned __int16)(v21 - ((1573 * v22) >> 16)) >> 1) + ((1573 * v22) >> 16)) >> 6;
      if (v22 >= 0x271) {
        LOWORD(v26) = v26 - 5;
      }
      *((_WORD *)result + 22) = v26;
LABEL_23:
      unsigned __int16 v27 = v26 + *(_WORD *)&v12[(v13 >> 9) & 0x7FFFF8] - 2;
      *((_WORD *)result + 21) = v27;
      LOWORD(v28) = v25 + *(_WORD *)&v12[8 * ((v13 >> 8) & 0xF)] - 2;
      *((_WORD *)result + 25) = v28;
      LOWORD(v29) = v24 + *(_WORD *)&v12[8 * (v13 >> 4)] - 2;
      *((_WORD *)result + 29) = v29;
      LOWORD(v30) = v23 + *(_WORD *)&v12[8 * (v13 & 0xF)] - 2;
      *((_WORD *)result + 33) = v30;
      break;
    case 3u:
      unsigned __int16 v27 = *(_WORD *)&v12[(v13 >> 9) & 0x7FFFF8];
      *((_WORD *)result + 21) = v27;
      LOWORD(v28) = *(_WORD *)&v12[8 * ((v13 >> 8) & 0xF)];
      *((_WORD *)result + 25) = v28;
      LOWORD(v29) = *(_WORD *)&v12[8 * (v13 >> 4)];
      *((_WORD *)result + 29) = v29;
      LOWORD(v30) = *(_WORD *)&v12[8 * (v13 & 0xF)];
      *((_WORD *)result + 33) = v30;
      --v15;
      break;
    case 4u:
      if ((unint64_t)v16 >= v5) {
        goto LABEL_285;
      }
      *((void *)result + 2) = v15;
      unsigned int v31 = *(v15 - 1);
      unsigned __int16 v27 = v31 & 0xF;
      *((_WORD *)result + 21) = v27;
      unsigned int v28 = v31 >> 4;
      *((_WORD *)result + 25) = v28;
      if ((unint64_t)v15 >= v5) {
        goto LABEL_285;
      }
      int16x8_t v32 = v15 + 1;
      *((void *)result + 2) = v15 + 1;
      unsigned int v33 = *v15;
      LOWORD(v29) = v33 & 0xF;
      *((_WORD *)result + 29) = v29;
      unsigned int v30 = v33 >> 4;
      *((_WORD *)result + 33) = v33 >> 4;
      unsigned int v15 = v32;
      break;
    case 5u:
      if ((unint64_t)v16 >= v5) {
        goto LABEL_285;
      }
      *((void *)result + 2) = v15;
      if ((unint64_t)v15 >= v5) {
        goto LABEL_285;
      }
      int v34 = *(v15 - 1);
      *((void *)result + 2) = v15 + 1;
      if ((unint64_t)(v15 + 1) >= v5) {
        goto LABEL_285;
      }
      int v35 = *v15;
      int64x2_t v36 = v15 + 2;
      *((void *)result + 2) = v15 + 2;
      unsigned int v37 = v15[1];
      unsigned __int16 v27 = v34 & 0x3F;
      *((_WORD *)result + 21) = v27;
      unsigned int v28 = ((v34 & 0xFFFF00FF | (v35 << 8)) >> 6) & 0x3F;
      *((_WORD *)result + 25) = v28;
      unsigned int v29 = (((v35 << 8) | (v37 << 16)) >> 12) & 0x3F;
      *((_WORD *)result + 29) = (((v35 << 8) | (v37 << 16)) >> 12) & 0x3F;
      unsigned int v30 = v37 >> 2;
      *((_WORD *)result + 33) = v37 >> 2;
      unsigned int v15 = v36;
      break;
    case 7u:
      goto LABEL_285;
    default:
      *((_WORD *)result + 34) = 2;
      *((_WORD *)result + 30) = 2;
      *((_WORD *)result + 26) = 2;
      *((_WORD *)result + 22) = 2;
      *(_WORD *)&v12[8 * ((v17 >> 5) & 3) + 2] = (2 * ((v17 & 0x10) != 0)) ^ 3;
      LOWORD(v26) = *((_WORD *)result + 22);
      __int16 v25 = *((_WORD *)result + 26);
      __int16 v24 = *((_WORD *)result + 30);
      __int16 v23 = *((_WORD *)result + 34);
      --v15;
      goto LABEL_23;
  }
  if (v10 >= 6) {
    unsigned int v38 = 16;
  }
  else {
    unsigned int v38 = 8;
  }
  if (v38 < v27
    || (int64_t v39 = (unsigned __int16)v28, v38 < (unsigned __int16)v28)
    || (int64_t v40 = (unsigned __int16)v29, v38 < (unsigned __int16)v29)
    || (int64_t v41 = (unsigned __int16)v30, v38 < (unsigned __int16)v30))
  {
LABEL_285:
    longjmp(result + 29, -15407);
  }
  int64_t v42 = v27;
  int64x2_t v43 = (_WORD *)result + 23;
  uint64_t v44 = 16;
  do
  {
    if ((v18 & 1) == 0)
    {
      LOWORD(v45) = 0;
LABEL_34:
      *int64x2_t v43 = *(_WORD *)&v12[8 * ((v13 >> (v44 - 4)) & 3) + 4] + v45;
      goto LABEL_48;
    }
    if ((unint64_t)v15 >= v5) {
      goto LABEL_285;
    }
    int16x8_t v46 = v15 + 1;
    *((void *)result + 2) = v15 + 1;
    __int16 v47 = *v15;
    if (v10 > 5)
    {
      if (*v15)
      {
        if ((v47 & 0x80) != 0)
        {
          if ((unint64_t)v46 >= v5) {
            goto LABEL_285;
          }
          int16x8_t v49 = v15 + 2;
          *((void *)result + 2) = v15 + 2;
          int v50 = v47 & 0x3F | (v15[1] << 6);
          if ((v47 & 0x40) != 0) {
            int v45 = -v50;
          }
          else {
            LOWORD(v45) = v50;
          }
          unsigned int v15 = v49;
        }
        else
        {
          if ((v47 & 0x40) != 0) {
            int v45 = -(v47 & 0x3F);
          }
          else {
            LOWORD(v45) = v47 & 0x3F;
          }
          ++v15;
        }
        goto LABEL_34;
      }
      if ((unint64_t)v46 >= v5) {
        goto LABEL_285;
      }
      *((void *)result + 2) = v15 + 2;
      __int16 v48 = v15[1];
      *int64x2_t v43 = v48;
      if ((unint64_t)(v15 + 2) >= v5) {
        goto LABEL_285;
      }
      int16x8_t v46 = v15 + 3;
      *((void *)result + 2) = v15 + 3;
      *int64x2_t v43 = v48 | (v15[2] << 8);
    }
    else
    {
      *int64x2_t v43 = v47;
    }
    unsigned int v15 = v46;
LABEL_48:
    v18 >>= 1;
    v43 += 4;
    v44 -= 4;
  }
  while (v44);
  int v51 = result[27];
  if (v10 <= 0x10 && v51)
  {
    if (v10 >= 0xC || v10 == 6) {
      unsigned int v53 = 0;
    }
    else {
      unsigned int v53 = -1;
    }
    unsigned int v54 = v51 * v42 + 7;
    if (v51 * (int)v42 >= 0) {
      int v55 = v51 * v42;
    }
    else {
      int v55 = v51 * v42 + 7;
    }
    unsigned int v56 = v55 >> 3;
    int64_t v57 = (v42 - (v55 >> 3));
    int v58 = 1 << ((v55 >> 3) - 1);
    if (v54 >= 0xF) {
      int v59 = v58;
    }
    else {
      int v59 = 0;
    }
    if (v57 <= 0x10 && (uint64_t)(v5 - (void)v15) >= v57)
    {
      a3.i32[0] = v10;
      a4.i32[0] = 6;
      int8x16_t v60 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_u32(a4, a3), 0);
      int8x16_t v61 = (int8x16_t)vdupq_n_s16(v53);
      int8x16_t v62 = vbicq_s8(vornq_s8((int8x16_t)(*(_OWORD *)&v61 & __PAIR128__(0x3FF03FF03FF03FFLL, 0x3FF03FF03FF03FFLL)), v61), v60);
      unsigned long long v63 = *(_OWORD *)&v60 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL);
      unsigned int v64 = v59 + *((unsigned __int16 *)result + 23);
      if (v57 < 5)
      {
        unsigned int v65 = 0;
        unsigned int v67 = 0;
      }
      else
      {
        unsigned int v66 = *(_DWORD *)v15;
        v15 += 4;
        unsigned int v65 = v66;
        unsigned int v67 = 32;
      }
      uint64_t v71 = 0;
      uint16x8_t v72 = (uint16x8_t)vdupq_n_s16(v56);
      int16x8_t v73 = vdupq_n_s16(v64);
      uint16x8_t v74 = (uint16x8_t)vorrq_s8((int8x16_t)v63, v62);
      __int16 v75 = ~(unsigned __int16)(-1 << v57);
      int16x8_t v453 = 0uLL;
      do
      {
        while (v67 < v57)
        {
          int v76 = *v15++;
          v65 += v76 << v67;
          v67 += 8;
        }
        v453.i16[v71] = v65 & v75;
        v65 >>= v57;
        v67 -= v57;
        ++v71;
      }
      while (v71 != 8);
      *((void *)result + 2) = v15;
      if ((uint64_t)(v5 - (void)v15) >= v57)
      {
        uint16x8_t v77 = (uint16x8_t)vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)v453, v72), v73);
        if (v57 < 5)
        {
          unsigned int v78 = 0;
          unsigned int v80 = 0;
        }
        else
        {
          unsigned int v79 = *(_DWORD *)v15;
          v15 += 4;
          unsigned int v78 = v79;
          unsigned int v80 = 32;
        }
        uint64_t v88 = 0;
        int16x8_t v89 = (int16x8_t)vminq_u16(v77, v74);
        int16x8_t v453 = 0uLL;
        do
        {
          while (v80 < v57)
          {
            int v90 = *v15++;
            v78 += v90 << v80;
            v80 += 8;
          }
          v453.i16[v88] = v78 & v75;
          v78 >>= v57;
          v80 -= v57;
          ++v88;
        }
        while (v88 != 8);
        *((void *)result + 2) = v15;
        unsigned int v91 = v51 * v39 + 7;
        int v92 = v51 * (int)v39 >= 0 ? v51 * v39 : v51 * (int)v39 + 7;
        unsigned int v93 = v92 >> 3;
        int64_t v94 = (v39 - (v92 >> 3));
        int v95 = 1 << ((v92 >> 3) - 1);
        int v96 = v91 >= 0xF ? v95 : 0;
        if (v94 <= 0x10 && (uint64_t)(v5 - (void)v15) >= v94)
        {
          uint16x8_t v97 = (uint16x8_t)vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)v453, v72), v73);
          unsigned int v98 = v96 + *((unsigned __int16 *)result + 27);
          if (v94 < 5)
          {
            unsigned int v99 = 0;
            unsigned int v101 = 0;
          }
          else
          {
            unsigned int v100 = *(_DWORD *)v15;
            v15 += 4;
            unsigned int v99 = v100;
            unsigned int v101 = 32;
          }
          uint64_t v107 = 0;
          uint16x8_t v108 = (uint16x8_t)vdupq_n_s16(v93);
          int16x8_t v109 = vdupq_n_s16(v98);
          int16x8_t v110 = (int16x8_t)vminq_u16(v97, v74);
          __int16 v111 = ~(unsigned __int16)(-1 << v94);
          int16x8_t v453 = 0uLL;
          do
          {
            while (v101 < v94)
            {
              int v112 = *v15++;
              v99 += v112 << v101;
              v101 += 8;
            }
            v453.i16[v107] = v99 & v111;
            v99 >>= v94;
            v101 -= v94;
            ++v107;
          }
          while (v107 != 8);
          *((void *)result + 2) = v15;
          if ((uint64_t)(v5 - (void)v15) >= v94)
          {
            uint16x8_t v113 = (uint16x8_t)vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)v453, v108), v109);
            if (v94 < 5)
            {
              unsigned int v114 = 0;
              unsigned int v116 = 0;
            }
            else
            {
              unsigned int v115 = *(_DWORD *)v15;
              v15 += 4;
              unsigned int v114 = v115;
              unsigned int v116 = 32;
            }
            uint64_t v124 = 0;
            int16x8_t v125 = (int16x8_t)vminq_u16(v113, v74);
            int16x8_t v453 = 0uLL;
            do
            {
              while (v116 < v94)
              {
                int v126 = *v15++;
                v114 += v126 << v116;
                v116 += 8;
              }
              v453.i16[v124] = v114 & v111;
              v114 >>= v94;
              v116 -= v94;
              ++v124;
            }
            while (v124 != 8);
            *((void *)result + 2) = v15;
            unsigned int v127 = v51 * v40 + 7;
            int v128 = v51 * (int)v40 >= 0 ? v51 * v40 : v51 * (int)v40 + 7;
            unsigned int v129 = v128 >> 3;
            int64_t v130 = (v40 - (v128 >> 3));
            int v131 = 1 << ((v128 >> 3) - 1);
            int v132 = v127 >= 0xF ? v131 : 0;
            if (v130 <= 0x10 && (uint64_t)(v5 - (void)v15) >= v130)
            {
              uint16x8_t v133 = (uint16x8_t)vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)v453, v108), v109);
              unsigned int v134 = v132 + *((unsigned __int16 *)result + 31);
              if (v130 < 5)
              {
                unsigned int v135 = 0;
                unsigned int v137 = 0;
              }
              else
              {
                unsigned int v136 = *(_DWORD *)v15;
                v15 += 4;
                unsigned int v135 = v136;
                unsigned int v137 = 32;
              }
              uint64_t v143 = 0;
              uint16x8_t v144 = (uint16x8_t)vdupq_n_s16(v129);
              int16x8_t v145 = vdupq_n_s16(v134);
              int16x8_t v146 = (int16x8_t)vminq_u16(v133, v74);
              __int16 v147 = ~(unsigned __int16)(-1 << v130);
              int16x8_t v453 = 0uLL;
              do
              {
                while (v137 < v130)
                {
                  int v148 = *v15++;
                  v135 += v148 << v137;
                  v137 += 8;
                }
                v453.i16[v143] = v135 & v147;
                v135 >>= v130;
                v137 -= v130;
                ++v143;
              }
              while (v143 != 8);
              *((void *)result + 2) = v15;
              if ((uint64_t)(v5 - (void)v15) >= v130)
              {
                uint16x8_t v149 = (uint16x8_t)vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)v453, v144), v145);
                if (v130 < 5)
                {
                  unsigned int v150 = 0;
                  unsigned int v152 = 0;
                }
                else
                {
                  unsigned int v151 = *(_DWORD *)v15;
                  v15 += 4;
                  unsigned int v150 = v151;
                  unsigned int v152 = 32;
                }
                uint64_t v160 = 0;
                int16x8_t v161 = (int16x8_t)vminq_u16(v149, v74);
                int16x8_t v453 = 0uLL;
                do
                {
                  while (v152 < v130)
                  {
                    int v162 = *v15++;
                    v150 += v162 << v152;
                    v152 += 8;
                  }
                  v453.i16[v160] = v150 & v147;
                  v150 >>= v130;
                  v152 -= v130;
                  ++v160;
                }
                while (v160 != 8);
                *((void *)result + 2) = v15;
                unsigned int v163 = v51 * v41 + 7;
                int v164 = v51 * (int)v41 >= 0 ? v51 * v41 : v51 * (int)v41 + 7;
                unsigned int v165 = v164 >> 3;
                int64_t v166 = (v41 - (v164 >> 3));
                int v167 = 1 << ((v164 >> 3) - 1);
                int v168 = v163 >= 0xF ? v167 : 0;
                if (v166 <= 0x10 && (uint64_t)(v5 - (void)v15) >= v166)
                {
                  uint16x8_t v169 = (uint16x8_t)vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)v453, v144), v145);
                  unsigned int v170 = v168 + *((unsigned __int16 *)result + 35);
                  if (v166 < 5)
                  {
                    unsigned int v171 = 0;
                    unsigned int v173 = 0;
                  }
                  else
                  {
                    unsigned int v172 = *(_DWORD *)v15;
                    v15 += 4;
                    unsigned int v171 = v172;
                    unsigned int v173 = 32;
                  }
                  uint64_t v182 = 0;
                  uint16x8_t v183 = (uint16x8_t)vdupq_n_s16(v165);
                  int16x8_t v184 = vdupq_n_s16(v170);
                  int16x8_t v176 = (int16x8_t)vminq_u16(v169, v74);
                  __int16 v185 = ~(unsigned __int16)(-1 << v166);
                  int16x8_t v453 = 0uLL;
                  do
                  {
                    while (v173 < v166)
                    {
                      int v186 = *v15++;
                      v171 += v186 << v173;
                      v173 += 8;
                    }
                    v453.i16[v182] = v171 & v185;
                    v171 >>= v166;
                    v173 -= v166;
                    ++v182;
                  }
                  while (v182 != 8);
                  *((void *)result + 2) = v15;
                  if ((uint64_t)(v5 - (void)v15) >= v166)
                  {
                    uint16x8_t v187 = (uint16x8_t)vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)v453, v183), v184);
                    if (v166 < 5)
                    {
                      unsigned int v188 = 0;
                      unsigned int v190 = 0;
                    }
                    else
                    {
                      unsigned int v189 = *(_DWORD *)v15;
                      v15 += 4;
                      unsigned int v188 = v189;
                      unsigned int v190 = 32;
                    }
                    uint64_t v191 = 0;
                    int16x8_t v177 = (int16x8_t)vminq_u16(v187, v74);
                    int16x8_t v453 = 0uLL;
                    do
                    {
                      while (v190 < v166)
                      {
                        int v192 = *v15++;
                        v188 += v192 << v190;
                        v190 += 8;
                      }
                      v453.i16[v191] = v188 & v185;
                      v188 >>= v166;
                      v190 -= v166;
                      ++v191;
                    }
                    while (v191 != 8);
                    *((void *)result + 2) = v15;
                    int16x8_t v178 = (int16x8_t)vminq_u16((uint16x8_t)vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)v453, v183), v184), v74);
                    goto LABEL_228;
                  }
                }
              }
            }
          }
        }
      }
    }
    goto LABEL_285;
  }
  if (v42 > 0x10 || (uint64_t)(v5 - (void)v15) < v42) {
    goto LABEL_285;
  }
  if (v42 < 5)
  {
    unsigned int v68 = 0;
    unsigned int v70 = 0;
  }
  else
  {
    unsigned int v69 = *(_DWORD *)v15;
    v15 += 4;
    unsigned int v68 = v69;
    unsigned int v70 = 32;
  }
  uint64_t v81 = 0;
  __int16 v82 = *((_WORD *)result + 23);
  __int16 v83 = ~(unsigned __int16)(-1 << v42);
  int16x8_t v453 = 0uLL;
  do
  {
    while (v70 < v42)
    {
      int v84 = *v15++;
      v68 += v84 << v70;
      v70 += 8;
    }
    v453.i16[v81] = v82 + (v68 & v83);
    v68 >>= v42;
    v70 -= v42;
    ++v81;
  }
  while (v81 != 8);
  *((void *)result + 2) = v15;
  if ((uint64_t)(v5 - (void)v15) < v42) {
    goto LABEL_285;
  }
  if (v42 < 5)
  {
    unsigned int v85 = 0;
    unsigned int v87 = 0;
  }
  else
  {
    unsigned int v86 = *(_DWORD *)v15;
    v15 += 4;
    unsigned int v85 = v86;
    unsigned int v87 = 32;
  }
  uint64_t v102 = 0;
  int16x8_t v89 = v453;
  int16x8_t v453 = 0uLL;
  do
  {
    while (v87 < v42)
    {
      int v103 = *v15++;
      v85 += v103 << v87;
      v87 += 8;
    }
    v453.i16[v102] = v82 + (v85 & v83);
    v85 >>= v42;
    v87 -= v42;
    ++v102;
  }
  while (v102 != 8);
  *((void *)result + 2) = v15;
  if (v39 > 0x10 || (uint64_t)(v5 - (void)v15) < v39) {
    goto LABEL_285;
  }
  if (v39 < 5)
  {
    unsigned int v104 = 0;
    unsigned int v106 = 0;
  }
  else
  {
    unsigned int v105 = *(_DWORD *)v15;
    v15 += 4;
    unsigned int v104 = v105;
    unsigned int v106 = 32;
  }
  uint64_t v117 = 0;
  int16x8_t v110 = v453;
  __int16 v118 = *((_WORD *)result + 27);
  __int16 v119 = ~(unsigned __int16)(-1 << v39);
  int16x8_t v453 = 0uLL;
  do
  {
    while (v106 < v39)
    {
      int v120 = *v15++;
      v104 += v120 << v106;
      v106 += 8;
    }
    v453.i16[v117] = v118 + (v104 & v119);
    v104 >>= v39;
    v106 -= v39;
    ++v117;
  }
  while (v117 != 8);
  *((void *)result + 2) = v15;
  if ((uint64_t)(v5 - (void)v15) < v39) {
    goto LABEL_285;
  }
  if (v39 < 5)
  {
    unsigned int v121 = 0;
    unsigned int v123 = 0;
  }
  else
  {
    unsigned int v122 = *(_DWORD *)v15;
    v15 += 4;
    unsigned int v121 = v122;
    unsigned int v123 = 32;
  }
  uint64_t v138 = 0;
  int16x8_t v125 = v453;
  int16x8_t v453 = 0uLL;
  do
  {
    while (v123 < v39)
    {
      int v139 = *v15++;
      v121 += v139 << v123;
      v123 += 8;
    }
    v453.i16[v138] = v118 + (v121 & v119);
    v121 >>= v39;
    v123 -= v39;
    ++v138;
  }
  while (v138 != 8);
  *((void *)result + 2) = v15;
  if (v40 > 0x10 || (uint64_t)(v5 - (void)v15) < v40) {
    goto LABEL_285;
  }
  if (v40 < 5)
  {
    unsigned int v140 = 0;
    unsigned int v142 = 0;
  }
  else
  {
    unsigned int v141 = *(_DWORD *)v15;
    v15 += 4;
    unsigned int v140 = v141;
    unsigned int v142 = 32;
  }
  uint64_t v153 = 0;
  int16x8_t v146 = v453;
  __int16 v154 = *((_WORD *)result + 31);
  __int16 v155 = ~(unsigned __int16)(-1 << v40);
  int16x8_t v453 = 0uLL;
  do
  {
    while (v142 < v40)
    {
      int v156 = *v15++;
      v140 += v156 << v142;
      v142 += 8;
    }
    v453.i16[v153] = v154 + (v140 & v155);
    v140 >>= v40;
    v142 -= v40;
    ++v153;
  }
  while (v153 != 8);
  *((void *)result + 2) = v15;
  if ((uint64_t)(v5 - (void)v15) < v40) {
    goto LABEL_285;
  }
  if (v40 < 5)
  {
    unsigned int v157 = 0;
    unsigned int v159 = 0;
  }
  else
  {
    unsigned int v158 = *(_DWORD *)v15;
    v15 += 4;
    unsigned int v157 = v158;
    unsigned int v159 = 32;
  }
  uint64_t v174 = 0;
  int16x8_t v161 = v453;
  int16x8_t v453 = 0uLL;
  do
  {
    while (v159 < v40)
    {
      int v175 = *v15++;
      v157 += v175 << v159;
      v159 += 8;
    }
    v453.i16[v174] = v154 + (v157 & v155);
    v157 >>= v40;
    v159 -= v40;
    ++v174;
  }
  while (v174 != 8);
  *((void *)result + 2) = v15;
  int16x8_t v176 = v453;
  if (v10 == 19)
  {
    int16x8_t v177 = 0uLL;
    int16x8_t v178 = 0uLL;
    if (!v51)
    {
LABEL_236:
      if (v9)
      {
        int16x8_t v89 = (int16x8_t)vshlq_u16((uint16x8_t)v89, v11);
        int16x8_t v110 = (int16x8_t)vshlq_u16((uint16x8_t)v110, v11);
        int16x8_t v125 = (int16x8_t)vshlq_u16((uint16x8_t)v125, v11);
        int16x8_t v146 = (int16x8_t)vshlq_u16((uint16x8_t)v146, v11);
        int16x8_t v161 = (int16x8_t)vshlq_u16((uint16x8_t)v161, v11);
        int16x8_t v176 = (int16x8_t)vshlq_u16((uint16x8_t)v176, v11);
      }
      v456.val[0] = (int16x4_t)vextq_s8((int8x16_t)v89, (int8x16_t)v89, 8uLL).u64[0];
      v456.val[1] = (int16x4_t)vextq_s8((int8x16_t)v125, (int8x16_t)v125, 8uLL).u64[0];
      vst3_s16((__int16 *)v6, *(int16x4x3_t *)v89.i8);
      int64x2_t v236 = (__int16 *)(v6 + v8);
      v456.val[2] = (int16x4_t)vextq_s8((int8x16_t)v161, (int8x16_t)v161, 8uLL).u64[0];
      vst3_s16(v236, v456);
      int64x2_t v237 = (__int16 *)((char *)v236 + v8);
      v455.val[0] = (int16x4_t)vextq_s8((int8x16_t)v110, (int8x16_t)v110, 8uLL).u64[0];
      vst3_s16(v237, *(int16x4x3_t *)v110.i8);
      int16x8_t v238 = (__int16 *)((char *)v237 + v8);
      v455.val[1] = (int16x4_t)vextq_s8((int8x16_t)v146, (int8x16_t)v146, 8uLL).u64[0];
      v455.val[2] = (int16x4_t)vextq_s8((int8x16_t)v176, (int8x16_t)v176, 8uLL).u64[0];
      vst3_s16(v238, v455);
      return result;
    }
LABEL_229:
    int v202 = result[28];
    if (v202)
    {
      int16x8_t v203 = vdupq_n_s16(v202 - 1);
      uint16x8_t v204 = (uint16x8_t)vnegq_s16(v203);
      uint16x8_t v205 = (uint16x8_t)vdupq_n_s16(-v202);
      v206.i64[0] = 0x1000100010001;
      v206.i64[1] = 0x1000100010001;
      uint16x8_t v207 = vqsubq_u16(vshlq_u16((uint16x8_t)v89, v204), v206);
      int16x8_t v208 = (int16x8_t)vshlq_u16((uint16x8_t)vsubq_s16(v89, (int16x8_t)vshlq_u16(v207, (uint16x8_t)v203)), v207);
      int16x8_t v89 = vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)v208, v205), v208);
      uint16x8_t v209 = vqsubq_u16(vshlq_u16((uint16x8_t)v110, v204), v206);
      int16x8_t v210 = (int16x8_t)vshlq_u16((uint16x8_t)vsubq_s16(v110, (int16x8_t)vshlq_u16(v209, (uint16x8_t)v203)), v209);
      int16x8_t v110 = vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)v210, v205), v210);
      uint16x8_t v211 = vqsubq_u16(vshlq_u16((uint16x8_t)v125, v204), v206);
      int16x8_t v212 = (int16x8_t)vshlq_u16((uint16x8_t)vsubq_s16(v125, (int16x8_t)vshlq_u16(v211, (uint16x8_t)v203)), v211);
      int16x8_t v125 = vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)v212, v205), v212);
      uint16x8_t v213 = vqsubq_u16(vshlq_u16((uint16x8_t)v146, v204), v206);
      int16x8_t v214 = (int16x8_t)vshlq_u16((uint16x8_t)vsubq_s16(v146, (int16x8_t)vshlq_u16(v213, (uint16x8_t)v203)), v213);
      int16x8_t v146 = vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)v214, v205), v214);
      uint16x8_t v215 = vqsubq_u16(vshlq_u16((uint16x8_t)v161, v204), v206);
      int16x8_t v216 = (int16x8_t)vshlq_u16((uint16x8_t)vsubq_s16(v161, (int16x8_t)vshlq_u16(v215, (uint16x8_t)v203)), v215);
      int16x8_t v161 = vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)v216, v205), v216);
      uint16x8_t v217 = vqsubq_u16(vshlq_u16((uint16x8_t)v176, v204), v206);
      int16x8_t v218 = (int16x8_t)vshlq_u16((uint16x8_t)vsubq_s16(v176, (int16x8_t)vshlq_u16(v217, (uint16x8_t)v203)), v217);
      int16x8_t v176 = vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)v218, v205), v218);
      uint16x8_t v219 = vqsubq_u16(vshlq_u16((uint16x8_t)v177, v204), v206);
      int16x8_t v220 = (int16x8_t)vshlq_u16((uint16x8_t)vsubq_s16(v177, (int16x8_t)vshlq_u16(v219, (uint16x8_t)v203)), v219);
      int16x8_t v177 = vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)v220, v205), v220);
      uint16x8_t v221 = vqsubq_u16(vshlq_u16((uint16x8_t)v178, v204), v206);
      int16x8_t v222 = (int16x8_t)vshlq_u16((uint16x8_t)vsubq_s16(v178, (int16x8_t)vshlq_u16(v221, (uint16x8_t)v203)), v221);
      int16x8_t v178 = vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)v222, v205), v222);
    }
  }
  else
  {
    if (v41 > 0x10 || (uint64_t)(v5 - (void)v15) < v41) {
      goto LABEL_285;
    }
    if (v41 < 5)
    {
      unsigned int v179 = 0;
      unsigned int v181 = 0;
    }
    else
    {
      unsigned int v180 = *(_DWORD *)v15;
      v15 += 4;
      unsigned int v179 = v180;
      unsigned int v181 = 32;
    }
    uint64_t v193 = 0;
    __int16 v194 = *((_WORD *)result + 35);
    __int16 v195 = ~(unsigned __int16)(-1 << v41);
    int16x8_t v453 = 0uLL;
    do
    {
      while (v181 < v41)
      {
        int v196 = *v15++;
        v179 += v196 << v181;
        v181 += 8;
      }
      v453.i16[v193] = v194 + (v179 & v195);
      v179 >>= v41;
      v181 -= v41;
      ++v193;
    }
    while (v193 != 8);
    *((void *)result + 2) = v15;
    if ((uint64_t)(v5 - (void)v15) < v41) {
      goto LABEL_285;
    }
    if (v41 < 5)
    {
      unsigned int v197 = 0;
      unsigned int v199 = 0;
    }
    else
    {
      unsigned int v198 = *(_DWORD *)v15;
      v15 += 4;
      unsigned int v197 = v198;
      unsigned int v199 = 32;
    }
    uint64_t v200 = 0;
    int16x8_t v177 = v453;
    int16x8_t v453 = 0uLL;
    do
    {
      while (v199 < v41)
      {
        int v201 = *v15++;
        v197 += v201 << v199;
        v199 += 8;
      }
      v453.i16[v200] = v194 + (v197 & v195);
      v197 >>= v41;
      v199 -= v41;
      ++v200;
    }
    while (v200 != 8);
    *((void *)result + 2) = v15;
    int16x8_t v178 = v453;
    if (v51)
    {
LABEL_228:
      if (v10 > 0x10) {
        goto LABEL_229;
      }
    }
  }
  switch((int)v10)
  {
    case 0:
    case 7:
      uint16x8_t v223 = (uint16x8_t)vzip1q_s64((int64x2_t)v89, (int64x2_t)v125);
      uint16x8_t v224 = (uint16x8_t)vzip2q_s64((int64x2_t)v89, (int64x2_t)v125);
      uint16x8_t v225 = (uint16x8_t)vzip1q_s64((int64x2_t)v110, (int64x2_t)v146);
      uint16x8_t v226 = (uint16x8_t)vzip2q_s64((int64x2_t)v110, (int64x2_t)v146);
      uint16x8_t v227 = (uint16x8_t)vzip1q_s64((int64x2_t)v161, (int64x2_t)v177);
      uint16x8_t v228 = (uint16x8_t)vzip2q_s64((int64x2_t)v161, (int64x2_t)v177);
      uint16x8_t v229 = (uint16x8_t)vzip1q_s64((int64x2_t)v176, (int64x2_t)v178);
      uint16x8_t v230 = (uint16x8_t)vzip2q_s64((int64x2_t)v176, (int64x2_t)v178);
      if (!v9) {
        goto LABEL_234;
      }
      goto LABEL_233;
    case 1:
    case 8:
    case 11:
    case 25:
      uint16x8_t v223 = (uint16x8_t)vtrn1q_s16(v89, v125);
      uint16x8_t v224 = (uint16x8_t)vtrn2q_s16(v89, v125);
      uint16x8_t v225 = (uint16x8_t)vtrn1q_s16(v110, v146);
      uint16x8_t v226 = (uint16x8_t)vtrn2q_s16(v110, v146);
      uint16x8_t v227 = (uint16x8_t)vtrn1q_s16(v161, v177);
      uint16x8_t v228 = (uint16x8_t)vtrn2q_s16(v161, v177);
      uint16x8_t v229 = (uint16x8_t)vtrn1q_s16(v176, v178);
      uint16x8_t v230 = (uint16x8_t)vtrn2q_s16(v176, v178);
      if (v9)
      {
LABEL_233:
        uint16x8_t v223 = vshlq_u16(v223, v11);
        uint16x8_t v225 = vshlq_u16(v225, v11);
        uint16x8_t v224 = vshlq_u16(v224, v11);
        uint16x8_t v226 = vshlq_u16(v226, v11);
        uint16x8_t v227 = vshlq_u16(v227, v11);
        uint16x8_t v229 = vshlq_u16(v229, v11);
        uint16x8_t v228 = vshlq_u16(v228, v11);
        uint16x8_t v230 = vshlq_u16(v230, v11);
      }
LABEL_234:
      if (v10 > 5)
      {
        if ((v10 - 7) > 1)
        {
          *(uint16x8_t *)uint64_t v6 = v223;
          *(uint16x8_t *)(v6 + 16) = v227;
          v270 = (uint16x8_t *)(v6 + v8);
          uint16x8_t *v270 = v225;
          v270[1] = v229;
          int32x4_t v271 = (uint16x8_t *)(v6 + v8 + v8);
          *int32x4_t v271 = v224;
          v271[1] = v228;
          int32x4_t v272 = (uint16x8_t *)((char *)v271 + v8);
          *int32x4_t v272 = v226;
LABEL_275:
          v272[1] = v230;
        }
        else
        {
          uint16x8_t v452 = v227;
          int16x8_t v453 = (int16x8_t)v223;
          uint16x8_t v450 = v226;
          uint16x8_t v451 = v230;
          uint16x8_t v448 = v224;
          uint16x8_t v449 = v228;
          uint16x8_t v446 = v225;
          uint16x8_t v447 = v229;
          vectorstore_1x16_packed10((int *)v6, v7, (unsigned __int16 *)&v453, (unsigned __int16 *)&v452);
          uint16x8_t v452 = v447;
          int16x8_t v453 = (int16x8_t)v446;
          vectorstore_1x16_packed10((int *)(v6 + v8), v7, (unsigned __int16 *)&v453, (unsigned __int16 *)&v452);
          uint16x8_t v452 = v449;
          int16x8_t v453 = (int16x8_t)v448;
          vectorstore_1x16_packed10((int *)(v6 + 2 * (int)v8), v7, (unsigned __int16 *)&v453, (unsigned __int16 *)&v452);
          uint16x8_t v452 = v451;
          int16x8_t v453 = (int16x8_t)v450;
          uint64_t result = vectorstore_1x16_packed10((int *)(v6 + 3 * v8), v7, (unsigned __int16 *)&v453, (unsigned __int16 *)&v452);
        }
      }
      else
      {
        *(uint8x8_t *)uint64_t v6 = vqmovn_u16(v223);
        *(uint8x8_t *)(v6 + 8) = vqmovn_u16(v227);
        int16x8_t v231 = (uint8x8_t *)(v6 + v8);
        *int16x8_t v231 = vqmovn_u16(v225);
        v231[1] = vqmovn_u16(v229);
        v232 = (uint8x8_t *)(v6 + v8 + v8);
        uint8x8_t *v232 = vqmovn_u16(v224);
        v232[1] = vqmovn_u16(v228);
        int16x8_t v233 = (uint8x8_t *)((char *)v232 + v8);
        uint8x8_t v234 = vqmovn_u16(v226);
        uint8x8_t v235 = vqmovn_u16(v230);
LABEL_256:
        *int16x8_t v233 = v234;
        v233[1] = v235;
      }
      break;
    case 2:
      int16x8_t v273 = (int16x8_t)vzip1q_s64((int64x2_t)v125, (int64x2_t)v161);
      int16x8_t v274 = (int16x8_t)vzip2q_s64((int64x2_t)v125, (int64x2_t)v161);
      int16x8_t v275 = (int16x8_t)vzip1q_s64((int64x2_t)v146, (int64x2_t)v176);
      int16x8_t v276 = (int16x8_t)vzip2q_s64((int64x2_t)v146, (int64x2_t)v176);
      *(uint8x8_t *)uint64_t v6 = vqmovn_u16((uint16x8_t)vtrn1q_s16(v89, v274));
      *(uint8x8_t *)(v6 + v8) = vqmovn_u16((uint16x8_t)vtrn1q_s16(v273, v177));
      *(uint8x8_t *)(v6 + 2 * v8) = vqmovn_u16((uint16x8_t)vtrn1q_s16(v110, v276));
      *(uint8x8_t *)(v6 + 3 * v8) = vqmovn_u16((uint16x8_t)vtrn1q_s16(v275, v178));
      uint16x8_t v277 = (uint16x8_t)vtrn2q_s16(v275, v178);
      *(uint8x8_t *)(v6 + 4 * v8) = vqmovn_u16((uint16x8_t)vtrn2q_s16(v89, v274));
      *(uint8x8_t *)(v6 + 5 * v8) = vqmovn_u16((uint16x8_t)vtrn2q_s16(v273, v177));
      uint8x8_t v278 = vqmovn_u16((uint16x8_t)vtrn2q_s16(v110, v276));
      goto LABEL_252;
    case 3:
      int32x4_t v279 = (int32x4_t)vzip1q_s64((int64x2_t)v125, (int64x2_t)v161);
      int32x4_t v280 = (int32x4_t)vzip2q_s64((int64x2_t)v125, (int64x2_t)v161);
      int32x4_t v281 = (int32x4_t)vzip1q_s64((int64x2_t)v146, (int64x2_t)v176);
      int32x4_t v282 = (int32x4_t)vzip2q_s64((int64x2_t)v146, (int64x2_t)v176);
      *(uint8x8_t *)uint64_t v6 = vqmovn_u16((uint16x8_t)vtrn1q_s32((int32x4_t)v89, v280));
      *(uint8x8_t *)(v6 + v8) = vqmovn_u16((uint16x8_t)vtrn1q_s32((int32x4_t)v110, v282));
      *(uint8x8_t *)(v6 + 2 * v8) = vqmovn_u16((uint16x8_t)vtrn1q_s32(v279, (int32x4_t)v177));
      *(uint8x8_t *)(v6 + 3 * v8) = vqmovn_u16((uint16x8_t)vtrn1q_s32(v281, (int32x4_t)v178));
      uint16x8_t v277 = (uint16x8_t)vtrn2q_s32(v281, (int32x4_t)v178);
      *(uint8x8_t *)(v6 + 4 * v8) = vqmovn_u16((uint16x8_t)vtrn2q_s32((int32x4_t)v89, v280));
      *(uint8x8_t *)(v6 + 5 * v8) = vqmovn_u16((uint16x8_t)vtrn2q_s32((int32x4_t)v110, v282));
      uint8x8_t v278 = vqmovn_u16((uint16x8_t)vtrn2q_s32(v279, (int32x4_t)v177));
LABEL_252:
      *(uint8x8_t *)(v6 + 6 * (int)v8) = v278;
      *(uint8x8_t *)(v6 - v8 + 8 * v8) = vqmovn_u16(v277);
      return result;
    case 6:
      int32x4_t v283 = (int32x4_t)vtrn1q_s16(v89, v125);
      int32x4_t v284 = (int32x4_t)vtrn2q_s16(v89, v125);
      int32x4_t v285 = (int32x4_t)vtrn1q_s16(v110, v146);
      int32x4_t v286 = (int32x4_t)vtrn2q_s16(v110, v146);
      int32x4_t v287 = (int32x4_t)vtrn1q_s16(v161, v177);
      int32x4_t v288 = (int32x4_t)vtrn2q_s16(v161, v177);
      int32x4_t v289 = (int32x4_t)vtrn1q_s16(v176, v178);
      int32x4_t v290 = (int32x4_t)vtrn2q_s16(v176, v178);
      uint16x8_t v291 = (uint16x8_t)vtrn1q_s32(v283, v287);
      uint16x8_t v292 = (uint16x8_t)vtrn2q_s32(v283, v287);
      uint16x8_t v293 = (uint16x8_t)vtrn1q_s32(v285, v289);
      uint16x8_t v294 = (uint16x8_t)vtrn2q_s32(v285, v289);
      uint16x8_t v295 = (uint16x8_t)vtrn1q_s32(v284, v288);
      uint16x8_t v296 = (uint16x8_t)vtrn2q_s32(v284, v288);
      uint16x8_t v297 = (uint16x8_t)vtrn1q_s32(v286, v290);
      uint16x8_t v298 = (uint16x8_t)vtrn2q_s32(v286, v290);
      if (v9)
      {
        uint16x8_t v291 = vshlq_u16(v291, v11);
        uint16x8_t v293 = vshlq_u16(v293, v11);
        uint16x8_t v295 = vshlq_u16(v295, v11);
        uint16x8_t v297 = vshlq_u16(v297, v11);
        uint16x8_t v292 = vshlq_u16(v292, v11);
        uint16x8_t v294 = vshlq_u16(v294, v11);
        uint16x8_t v296 = vshlq_u16(v296, v11);
        uint16x8_t v298 = vshlq_u16(v298, v11);
      }
      *(uint8x8_t *)uint64_t v6 = vqmovn_u16(v291);
      *(uint8x8_t *)(v6 + 8) = vqmovn_u16(v292);
      int16x8_t v299 = (uint8x8_t *)(v6 + v8);
      uint8x8_t *v299 = vqmovn_u16(v293);
      v299[1] = vqmovn_u16(v294);
      int16x8_t v300 = (uint8x8_t *)(v6 + v8 + v8);
      *int16x8_t v300 = vqmovn_u16(v295);
      v300[1] = vqmovn_u16(v296);
      int16x8_t v233 = (uint8x8_t *)((char *)v300 + v8);
      uint8x8_t v234 = vqmovn_u16(v297);
      uint8x8_t v235 = vqmovn_u16(v298);
      goto LABEL_256;
    case 10:
    case 24:
      uint16x8_t v239 = (uint16x8_t)vzip1q_s64((int64x2_t)v89, (int64x2_t)v125);
      uint16x8_t v240 = (uint16x8_t)vzip2q_s64((int64x2_t)v89, (int64x2_t)v125);
      uint16x8_t v241 = (uint16x8_t)vzip1q_s64((int64x2_t)v110, (int64x2_t)v146);
      uint16x8_t v242 = (uint16x8_t)vzip2q_s64((int64x2_t)v110, (int64x2_t)v146);
      uint16x8_t v243 = (uint16x8_t)vzip1q_s64((int64x2_t)v161, (int64x2_t)v177);
      uint16x8_t v244 = (uint16x8_t)vzip2q_s64((int64x2_t)v161, (int64x2_t)v177);
      uint16x8_t v245 = (uint16x8_t)vzip1q_s64((int64x2_t)v176, (int64x2_t)v178);
      uint16x8_t v246 = (uint16x8_t)vzip2q_s64((int64x2_t)v176, (int64x2_t)v178);
      if (v9)
      {
        uint16x8_t v239 = vshlq_u16(v239, v11);
        uint16x8_t v241 = vshlq_u16(v241, v11);
        uint16x8_t v240 = vshlq_u16(v240, v11);
        uint16x8_t v242 = vshlq_u16(v242, v11);
        uint16x8_t v243 = vshlq_u16(v243, v11);
        uint16x8_t v245 = vshlq_u16(v245, v11);
        uint16x8_t v244 = vshlq_u16(v244, v11);
        uint16x8_t v246 = vshlq_u16(v246, v11);
      }
      *(uint16x8_t *)uint64_t v6 = v239;
      *(uint16x8_t *)(v6 + 16) = v243;
      int64x2_t v247 = (uint16x8_t *)(v6 + v8);
      *int64x2_t v247 = v241;
      v247[1] = v245;
      int64x2_t v248 = (uint16x8_t *)(v6 + v8 + v8);
      *int64x2_t v248 = v240;
      v248[1] = v244;
      int64x2_t v249 = (uint16x8_t *)((char *)v248 + v8);
      *int64x2_t v249 = v242;
      v249[1] = v246;
      return result;
    case 12:
    case 23:
      int32x4_t v250 = (int32x4_t)vtrn1q_s16(v89, v125);
      int32x4_t v251 = (int32x4_t)vtrn2q_s16(v89, v125);
      int32x4_t v252 = (int32x4_t)vtrn1q_s16(v110, v146);
      int32x4_t v253 = (int32x4_t)vtrn2q_s16(v110, v146);
      int32x4_t v254 = (int32x4_t)vtrn1q_s16(v161, v177);
      int32x4_t v255 = (int32x4_t)vtrn2q_s16(v161, v177);
      int32x4_t v256 = (int32x4_t)vtrn1q_s16(v176, v178);
      int32x4_t v257 = (int32x4_t)vtrn2q_s16(v176, v178);
      int16x8_t v258 = (int16x8_t)vtrn1q_s32(v250, v254);
      int16x8_t v259 = (int16x8_t)vtrn2q_s32(v250, v254);
      int16x8_t v260 = (int16x8_t)vtrn1q_s32(v252, v256);
      int16x8_t v261 = (int16x8_t)vtrn2q_s32(v252, v256);
      int16x8_t v262 = (int16x8_t)vtrn1q_s32(v251, v255);
      int16x8_t v263 = (int16x8_t)vtrn2q_s32(v251, v255);
      int16x8_t v264 = (int16x8_t)vtrn1q_s32(v253, v257);
      int16x8_t v265 = (int16x8_t)vtrn2q_s32(v253, v257);
      if (v9)
      {
        int16x8_t v258 = (int16x8_t)vshlq_u16((uint16x8_t)v258, v11);
        int16x8_t v260 = (int16x8_t)vshlq_u16((uint16x8_t)v260, v11);
        int16x8_t v262 = (int16x8_t)vshlq_u16((uint16x8_t)v262, v11);
        int16x8_t v264 = (int16x8_t)vshlq_u16((uint16x8_t)v264, v11);
        int16x8_t v259 = (int16x8_t)vshlq_u16((uint16x8_t)v259, v11);
        int16x8_t v261 = (int16x8_t)vshlq_u16((uint16x8_t)v261, v11);
        int16x8_t v263 = (int16x8_t)vshlq_u16((uint16x8_t)v263, v11);
        int16x8_t v265 = (int16x8_t)vshlq_u16((uint16x8_t)v265, v11);
      }
      v266.i64[0] = -1;
      v266.i64[1] = -1;
      *(int8x16_t *)uint64_t v6 = veorq_s8((int8x16_t)(*(_OWORD *)&vcgtq_s16(v258, v266) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v258);
      *(int8x16_t *)(v6 + 16) = veorq_s8((int8x16_t)(*(_OWORD *)&vcgtq_s16(v259, v266) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v259);
      uint64_t v267 = (int8x16_t *)(v6 + v8);
      *uint64_t v267 = veorq_s8((int8x16_t)(*(_OWORD *)&vcgtq_s16(v260, v266) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v260);
      v267[1] = veorq_s8((int8x16_t)(*(_OWORD *)&vcgtq_s16(v261, v266) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v261);
      int16x8_t v268 = (int8x16_t *)(v6 + v8 + v8);
      *int16x8_t v268 = veorq_s8((int8x16_t)(*(_OWORD *)&vcgtq_s16(v262, v266) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v262);
      v268[1] = veorq_s8((int8x16_t)(*(_OWORD *)&vcgtq_s16(v263, v266) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v263);
      int16x8_t v269 = (int8x16_t *)((char *)v268 + v8);
      *int16x8_t v269 = veorq_s8((int8x16_t)(*(_OWORD *)&vcgtq_s16(v264, v266) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v264);
      v269[1] = veorq_s8((int8x16_t)(*(_OWORD *)&vcgtq_s16(v265, v266) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v265);
      return result;
    case 13:
      int16x8_t v301 = (int16x8_t)vzip1q_s64((int64x2_t)v125, (int64x2_t)v161);
      int16x8_t v302 = (int16x8_t)vzip2q_s64((int64x2_t)v125, (int64x2_t)v161);
      int16x8_t v303 = (int16x8_t)vzip1q_s64((int64x2_t)v146, (int64x2_t)v176);
      int16x8_t v304 = (int16x8_t)vzip2q_s64((int64x2_t)v146, (int64x2_t)v176);
      int16x8_t v305 = vtrn1q_s16(v89, v302);
      int16x8_t v306 = vtrn2q_s16(v89, v302);
      int16x8_t v307 = vtrn1q_s16(v110, v304);
      int16x8_t v308 = vtrn2q_s16(v110, v304);
      int16x8_t v309 = vtrn1q_s16(v301, v177);
      int16x8_t v310 = vtrn2q_s16(v301, v177);
      int16x8_t v311 = vtrn1q_s16(v303, v178);
      int16x8_t v312 = vtrn2q_s16(v303, v178);
      if (v9)
      {
        int16x8_t v305 = (int16x8_t)vshlq_u16((uint16x8_t)v305, v11);
        int16x8_t v307 = (int16x8_t)vshlq_u16((uint16x8_t)v307, v11);
        int16x8_t v309 = (int16x8_t)vshlq_u16((uint16x8_t)v309, v11);
        int16x8_t v311 = (int16x8_t)vshlq_u16((uint16x8_t)v311, v11);
        int16x8_t v306 = (int16x8_t)vshlq_u16((uint16x8_t)v306, v11);
        int16x8_t v308 = (int16x8_t)vshlq_u16((uint16x8_t)v308, v11);
        int16x8_t v310 = (int16x8_t)vshlq_u16((uint16x8_t)v310, v11);
        int16x8_t v312 = (int16x8_t)vshlq_u16((uint16x8_t)v312, v11);
      }
      v313.i64[0] = -1;
      v313.i64[1] = -1;
      unsigned long long v314 = *(_OWORD *)&vcgtq_s16(v311, v313) | __PAIR128__(0x8000800080008000, 0x8000800080008000);
      int8x16_t v315 = veorq_s8((int8x16_t)(*(_OWORD *)&vcgtq_s16(v305, v313) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v305);
      int8x16_t v316 = veorq_s8((int8x16_t)(*(_OWORD *)&vcgtq_s16(v307, v313) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v307);
      int8x16_t v317 = veorq_s8((int8x16_t)(*(_OWORD *)&vcgtq_s16(v309, v313) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v309);
      int16x8_t v318 = vcgtq_s16(v306, v313);
      int16x8_t v319 = vcgtq_s16(v308, v313);
      int16x8_t v320 = vcgtq_s16(v310, v313);
      int8x16_t v321 = veorq_s8((int8x16_t)(*(_OWORD *)&vcgtq_s16(v312, v313) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v312);
      *(int8x16_t *)uint64_t v6 = v315;
      *(int8x16_t *)(v6 + v8) = v317;
      uint16x8_t v322 = (int8x16_t *)(v6 + v8 + v8);
      *uint16x8_t v322 = v316;
      unsigned int v323 = (int8x16_t *)((char *)v322 + v8);
      int8x16_t *v323 = veorq_s8((int8x16_t)v314, (int8x16_t)v311);
      uint64_t v324 = (int8x16_t *)((char *)v323 + v8);
      *uint64_t v324 = veorq_s8((int8x16_t)(*(_OWORD *)&v318 | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v306);
      unsigned __int16 v325 = (int8x16_t *)((char *)v324 + v8);
      *unsigned __int16 v325 = veorq_s8((int8x16_t)(*(_OWORD *)&v320 | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v310);
      unsigned __int32 v326 = (int8x16_t *)((char *)v325 + v8);
      int8x16_t *v326 = veorq_s8((int8x16_t)(*(_OWORD *)&v319 | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v308);
      goto LABEL_263;
    case 14:
      int32x4_t v327 = (int32x4_t)vzip1q_s64((int64x2_t)v125, (int64x2_t)v161);
      int32x4_t v328 = (int32x4_t)vzip2q_s64((int64x2_t)v125, (int64x2_t)v161);
      int32x4_t v329 = (int32x4_t)vzip1q_s64((int64x2_t)v146, (int64x2_t)v176);
      int32x4_t v330 = (int32x4_t)vzip2q_s64((int64x2_t)v146, (int64x2_t)v176);
      int16x8_t v331 = (int16x8_t)vtrn1q_s32((int32x4_t)v89, v328);
      int16x8_t v332 = (int16x8_t)vtrn2q_s32((int32x4_t)v89, v328);
      int16x8_t v333 = (int16x8_t)vtrn1q_s32((int32x4_t)v110, v330);
      int16x8_t v334 = (int16x8_t)vtrn2q_s32((int32x4_t)v110, v330);
      int16x8_t v335 = (int16x8_t)vtrn1q_s32(v327, (int32x4_t)v177);
      int16x8_t v336 = (int16x8_t)vtrn2q_s32(v327, (int32x4_t)v177);
      int16x8_t v337 = (int16x8_t)vtrn1q_s32(v329, (int32x4_t)v178);
      int16x8_t v338 = (int16x8_t)vtrn2q_s32(v329, (int32x4_t)v178);
      if (v9)
      {
        int16x8_t v331 = (int16x8_t)vshlq_u16((uint16x8_t)v331, v11);
        int16x8_t v333 = (int16x8_t)vshlq_u16((uint16x8_t)v333, v11);
        int16x8_t v335 = (int16x8_t)vshlq_u16((uint16x8_t)v335, v11);
        int16x8_t v337 = (int16x8_t)vshlq_u16((uint16x8_t)v337, v11);
        int16x8_t v332 = (int16x8_t)vshlq_u16((uint16x8_t)v332, v11);
        int16x8_t v334 = (int16x8_t)vshlq_u16((uint16x8_t)v334, v11);
        int16x8_t v336 = (int16x8_t)vshlq_u16((uint16x8_t)v336, v11);
        int16x8_t v338 = (int16x8_t)vshlq_u16((uint16x8_t)v338, v11);
      }
      v339.i64[0] = -1;
      v339.i64[1] = -1;
      unsigned long long v340 = *(_OWORD *)&vcgtq_s16(v337, v339) | __PAIR128__(0x8000800080008000, 0x8000800080008000);
      int8x16_t v341 = veorq_s8((int8x16_t)(*(_OWORD *)&vcgtq_s16(v331, v339) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v331);
      int8x16_t v342 = veorq_s8((int8x16_t)(*(_OWORD *)&vcgtq_s16(v333, v339) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v333);
      int8x16_t v343 = veorq_s8((int8x16_t)(*(_OWORD *)&vcgtq_s16(v335, v339) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v335);
      int16x8_t v344 = vcgtq_s16(v332, v339);
      int16x8_t v345 = vcgtq_s16(v334, v339);
      int16x8_t v346 = vcgtq_s16(v336, v339);
      int8x16_t v321 = veorq_s8((int8x16_t)(*(_OWORD *)&vcgtq_s16(v338, v339) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v338);
      *(int8x16_t *)uint64_t v6 = v341;
      *(int8x16_t *)(v6 + v8) = v342;
      int v347 = (int8x16_t *)(v6 + v8 + v8);
      *int v347 = v343;
      int v348 = (int8x16_t *)((char *)v347 + v8);
      *int v348 = veorq_s8((int8x16_t)v340, (int8x16_t)v337);
      unsigned int v349 = (int8x16_t *)((char *)v348 + v8);
      *unsigned int v349 = veorq_s8((int8x16_t)(*(_OWORD *)&v344 | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v332);
      int v350 = (int8x16_t *)((char *)v349 + v8);
      *int v350 = veorq_s8((int8x16_t)(*(_OWORD *)&v345 | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v334);
      unsigned __int32 v326 = (int8x16_t *)((char *)v350 + v8);
      int8x16_t *v326 = veorq_s8((int8x16_t)(*(_OWORD *)&v346 | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v336);
LABEL_263:
      *(int8x16_t *)((char *)v326 + v8) = v321;
      return result;
    case 15:
      int16x8_t v351 = (int16x8_t)vzip1q_s64((int64x2_t)v89, (int64x2_t)v125);
      int16x8_t v352 = (int16x8_t)vzip2q_s64((int64x2_t)v89, (int64x2_t)v125);
      int16x8_t v353 = (int16x8_t)vzip1q_s64((int64x2_t)v110, (int64x2_t)v146);
      int16x8_t v354 = (int16x8_t)vzip2q_s64((int64x2_t)v110, (int64x2_t)v146);
      int16x8_t v355 = (int16x8_t)vzip1q_s64((int64x2_t)v161, (int64x2_t)v177);
      int16x8_t v356 = (int16x8_t)vzip2q_s64((int64x2_t)v161, (int64x2_t)v177);
      int16x8_t v357 = (int16x8_t)vzip1q_s64((int64x2_t)v176, (int64x2_t)v178);
      int16x8_t v358 = (int16x8_t)vzip2q_s64((int64x2_t)v176, (int64x2_t)v178);
      if (!v9) {
        goto LABEL_268;
      }
      goto LABEL_267;
    case 16:
      int16x8_t v351 = vtrn1q_s16(v89, v125);
      int16x8_t v352 = vtrn2q_s16(v89, v125);
      int16x8_t v353 = vtrn1q_s16(v110, v146);
      int16x8_t v354 = vtrn2q_s16(v110, v146);
      int16x8_t v355 = vtrn1q_s16(v161, v177);
      int16x8_t v356 = vtrn2q_s16(v161, v177);
      int16x8_t v357 = vtrn1q_s16(v176, v178);
      int16x8_t v358 = vtrn2q_s16(v176, v178);
      if (v9)
      {
LABEL_267:
        int16x8_t v351 = (int16x8_t)vshlq_u16((uint16x8_t)v351, v11);
        int16x8_t v353 = (int16x8_t)vshlq_u16((uint16x8_t)v353, v11);
        int16x8_t v352 = (int16x8_t)vshlq_u16((uint16x8_t)v352, v11);
        int16x8_t v354 = (int16x8_t)vshlq_u16((uint16x8_t)v354, v11);
        int16x8_t v355 = (int16x8_t)vshlq_u16((uint16x8_t)v355, v11);
        int16x8_t v357 = (int16x8_t)vshlq_u16((uint16x8_t)v357, v11);
        int16x8_t v356 = (int16x8_t)vshlq_u16((uint16x8_t)v356, v11);
        int16x8_t v358 = (int16x8_t)vshlq_u16((uint16x8_t)v358, v11);
      }
LABEL_268:
      v359.i64[0] = -1;
      v359.i64[1] = -1;
      *(int8x16_t *)uint64_t v6 = veorq_s8((int8x16_t)(*(_OWORD *)&vcgtq_s16(v351, v359) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v351);
      *(int8x16_t *)(v6 + 16) = veorq_s8((int8x16_t)(*(_OWORD *)&vcgtq_s16(v355, v359) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v355);
      uint64_t v360 = (int8x16_t *)(v6 + v8);
      *uint64_t v360 = veorq_s8((int8x16_t)(*(_OWORD *)&vcgtq_s16(v353, v359) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v353);
      v360[1] = veorq_s8((int8x16_t)(*(_OWORD *)&vcgtq_s16(v357, v359) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v357);
      BOOL v361 = (int8x16_t *)(v6 + v8 + v8);
      *BOOL v361 = veorq_s8((int8x16_t)(*(_OWORD *)&vcgtq_s16(v352, v359) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v352);
      v361[1] = veorq_s8((int8x16_t)(*(_OWORD *)&vcgtq_s16(v356, v359) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v356);
      unsigned int v362 = (int8x16_t *)((char *)v361 + v8);
      *unsigned int v362 = veorq_s8((int8x16_t)(*(_OWORD *)&vcgtq_s16(v354, v359) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v354);
      v362[1] = veorq_s8((int8x16_t)(*(_OWORD *)&vcgtq_s16(v358, v359) | __PAIR128__(0x8000800080008000, 0x8000800080008000)), (int8x16_t)v358);
      return result;
    case 17:
      int16x8_t v363 = (int16x8_t)vtrn1q_s32((int32x4_t)v89, (int32x4_t)v161);
      int16x8_t v364 = (int16x8_t)vtrn2q_s32((int32x4_t)v89, (int32x4_t)v161);
      int16x8_t v365 = (int16x8_t)vtrn1q_s32((int32x4_t)v110, (int32x4_t)v176);
      int16x8_t v366 = (int16x8_t)vtrn2q_s32((int32x4_t)v110, (int32x4_t)v176);
      uint16x8_t v367 = (uint16x8_t)vtrn1q_s16(v125, v363);
      uint16x8_t v368 = (uint16x8_t)vtrn2q_s16(v125, v363);
      uint16x8_t v369 = (uint16x8_t)vtrn1q_s16(v146, v365);
      uint16x8_t v370 = (uint16x8_t)vtrn2q_s16(v146, v365);
      uint16x8_t v371 = (uint16x8_t)vtrn1q_s16(v364, v177);
      uint16x8_t v372 = (uint16x8_t)vtrn2q_s16(v364, v177);
      uint16x8_t v373 = (uint16x8_t)vtrn1q_s16(v366, v178);
      uint16x8_t v374 = (uint16x8_t)vtrn2q_s16(v366, v178);
      if (v9)
      {
        uint16x8_t v368 = vshlq_u16(v368, v11);
        uint16x8_t v370 = vshlq_u16(v370, v11);
        uint16x8_t v367 = vshlq_u16(v367, v11);
        uint16x8_t v369 = vshlq_u16(v369, v11);
        uint16x8_t v371 = vshlq_u16(v371, v11);
        uint16x8_t v373 = vshlq_u16(v373, v11);
        uint16x8_t v372 = vshlq_u16(v372, v11);
        uint16x8_t v374 = vshlq_u16(v374, v11);
      }
      *(uint16x8_t *)uint64_t v6 = v368;
      *(uint16x8_t *)(v6 + v8) = v371;
      uint64_t v375 = (uint16x8_t *)(v6 + v8 + v8);
      *uint64_t v375 = v370;
      int16x8_t v376 = (uint16x8_t *)((char *)v375 + v8);
      *int16x8_t v376 = v373;
      int8x16_t v377 = (uint16x8_t *)((char *)v376 + v8);
      *int8x16_t v377 = v367;
      int8x16_t v378 = (uint16x8_t *)((char *)v377 + v8);
      *int8x16_t v378 = v372;
      int v379 = (uint16x8_t *)((char *)v378 + v8);
      *int v379 = v369;
      *(uint16x8_t *)((char *)v379 + v8) = v374;
      return result;
    case 18:
      int32x4_t v380 = (int32x4_t)vtrn1q_s16(v89, v125);
      int32x4_t v381 = (int32x4_t)vtrn2q_s16(v89, v125);
      int32x4_t v382 = (int32x4_t)vtrn1q_s16(v110, v146);
      int32x4_t v383 = (int32x4_t)vtrn2q_s16(v110, v146);
      int32x4_t v384 = (int32x4_t)vtrn1q_s16(v161, v177);
      int32x4_t v385 = (int32x4_t)vtrn2q_s16(v161, v177);
      int32x4_t v386 = (int32x4_t)vtrn1q_s16(v176, v178);
      int32x4_t v387 = (int32x4_t)vtrn2q_s16(v176, v178);
      uint16x8_t v388 = (uint16x8_t)vtrn1q_s32(v380, v384);
      uint16x8_t v389 = (uint16x8_t)vtrn2q_s32(v380, v384);
      uint16x8_t v390 = (uint16x8_t)vtrn1q_s32(v382, v386);
      uint16x8_t v391 = (uint16x8_t)vtrn2q_s32(v382, v386);
      uint16x8_t v392 = (uint16x8_t)vtrn1q_s32(v381, v385);
      uint16x8_t v393 = (uint16x8_t)vtrn2q_s32(v381, v385);
      uint16x8_t v394 = (uint16x8_t)vtrn1q_s32(v383, v387);
      uint16x8_t v230 = (uint16x8_t)vtrn2q_s32(v383, v387);
      if (v9)
      {
        uint16x8_t v388 = vshlq_u16(v388, v11);
        uint16x8_t v390 = vshlq_u16(v390, v11);
        uint16x8_t v392 = vshlq_u16(v392, v11);
        uint16x8_t v394 = vshlq_u16(v394, v11);
        uint16x8_t v389 = vshlq_u16(v389, v11);
        uint16x8_t v391 = vshlq_u16(v391, v11);
        uint16x8_t v393 = vshlq_u16(v393, v11);
        uint16x8_t v230 = vshlq_u16(v230, v11);
      }
      *(uint16x8_t *)uint64_t v6 = v388;
      *(uint16x8_t *)(v6 + 16) = v389;
      int8x16_t v395 = (uint16x8_t *)(v6 + v8);
      *int8x16_t v395 = v390;
      v395[1] = v391;
      unsigned __int32 v396 = (uint16x8_t *)(v6 + v8 + v8);
      *unsigned __int32 v396 = v392;
      v396[1] = v393;
      int32x4_t v272 = (uint16x8_t *)((char *)v396 + v8);
      *int32x4_t v272 = v394;
      goto LABEL_275;
    case 19:
      goto LABEL_236;
    case 20:
      int16x8_t v397 = (int16x8_t)vzip1q_s64((int64x2_t)v125, (int64x2_t)v161);
      int16x8_t v398 = (int16x8_t)vzip2q_s64((int64x2_t)v125, (int64x2_t)v161);
      int16x8_t v399 = (int16x8_t)vzip1q_s64((int64x2_t)v146, (int64x2_t)v176);
      int16x8_t v400 = (int16x8_t)vzip2q_s64((int64x2_t)v146, (int64x2_t)v176);
      uint16x8_t v401 = (uint16x8_t)vtrn1q_s16(v89, v398);
      uint16x8_t v402 = (uint16x8_t)vtrn2q_s16(v89, v398);
      uint16x8_t v403 = (uint16x8_t)vtrn1q_s16(v110, v400);
      uint16x8_t v404 = (uint16x8_t)vtrn2q_s16(v110, v400);
      uint16x8_t v405 = (uint16x8_t)vtrn1q_s16(v397, v177);
      uint16x8_t v406 = (uint16x8_t)vtrn2q_s16(v397, v177);
      uint16x8_t v407 = (uint16x8_t)vtrn1q_s16(v399, v178);
      uint16x8_t v408 = (uint16x8_t)vtrn2q_s16(v399, v178);
      if (v9)
      {
        uint16x8_t v401 = vshlq_u16(v401, v11);
        uint16x8_t v403 = vshlq_u16(v403, v11);
        uint16x8_t v405 = vshlq_u16(v405, v11);
        uint16x8_t v407 = vshlq_u16(v407, v11);
        uint16x8_t v402 = vshlq_u16(v402, v11);
        uint16x8_t v404 = vshlq_u16(v404, v11);
        uint16x8_t v406 = vshlq_u16(v406, v11);
        uint16x8_t v408 = vshlq_u16(v408, v11);
      }
      *(uint16x8_t *)uint64_t v6 = v401;
      *(uint16x8_t *)(v6 + v8) = v405;
      int8x16_t v409 = (uint16x8_t *)(v6 + v8 + v8);
      *int8x16_t v409 = v403;
      int8x16_t v410 = (uint16x8_t *)((char *)v409 + v8);
      *int8x16_t v410 = v407;
      int8x16_t v411 = (uint16x8_t *)((char *)v410 + v8);
      uint16x8_t *v411 = v402;
      int8x16_t v412 = (uint16x8_t *)((char *)v411 + v8);
      *int8x16_t v412 = v406;
      int8x16_t v413 = (uint16x8_t *)((char *)v412 + v8);
      uint16x8_t *v413 = v404;
      *(uint16x8_t *)((char *)v413 + v8) = v408;
      return result;
    case 21:
      int16x8_t v414 = (int16x8_t)vzip1q_s64((int64x2_t)v125, (int64x2_t)v161);
      int16x8_t v415 = (int16x8_t)vzip2q_s64((int64x2_t)v125, (int64x2_t)v161);
      int16x8_t v416 = (int16x8_t)vzip1q_s64((int64x2_t)v146, (int64x2_t)v176);
      int16x8_t v417 = (int16x8_t)vzip2q_s64((int64x2_t)v146, (int64x2_t)v176);
      uint16x8_t v418 = (uint16x8_t)vtrn1q_s16(v89, v415);
      uint16x8_t v419 = (uint16x8_t)vtrn2q_s16(v89, v415);
      uint16x8_t v420 = (uint16x8_t)vtrn1q_s16(v110, v417);
      uint16x8_t v421 = (uint16x8_t)vtrn2q_s16(v110, v417);
      uint16x8_t v422 = (uint16x8_t)vtrn1q_s16(v414, v177);
      uint16x8_t v423 = (uint16x8_t)vtrn2q_s16(v414, v177);
      uint16x8_t v424 = (uint16x8_t)vtrn1q_s16(v416, v178);
      uint16x8_t v425 = (uint16x8_t)vtrn2q_s16(v416, v178);
      if (v9)
      {
        uint16x8_t v418 = vshlq_u16(v418, v11);
        uint16x8_t v420 = vshlq_u16(v420, v11);
        uint16x8_t v422 = vshlq_u16(v422, v11);
        uint16x8_t v424 = vshlq_u16(v424, v11);
        uint16x8_t v419 = vshlq_u16(v419, v11);
        uint16x8_t v421 = vshlq_u16(v421, v11);
        uint16x8_t v423 = vshlq_u16(v423, v11);
        uint16x8_t v425 = vshlq_u16(v425, v11);
      }
      *(uint16x8_t *)uint64_t v6 = v418;
      *(uint16x8_t *)(v6 + 16) = v419;
      int8x16_t v426 = (uint16x8_t *)(v6 + v8);
      *int8x16_t v426 = v422;
      v426[1] = v423;
      int8x16_t v427 = (uint16x8_t *)(v6 + v8 + v8);
      *int8x16_t v427 = v420;
      v427[1] = v421;
      int8x16_t v428 = (uint16x8_t *)((char *)v427 + v8);
      *int8x16_t v428 = v424;
      v428[1] = v425;
      return result;
    case 22:
      int32x4_t v429 = (int32x4_t)vzip1q_s64((int64x2_t)v125, (int64x2_t)v161);
      int32x4_t v430 = (int32x4_t)vzip2q_s64((int64x2_t)v125, (int64x2_t)v161);
      int32x4_t v431 = (int32x4_t)vzip1q_s64((int64x2_t)v146, (int64x2_t)v176);
      int32x4_t v432 = (int32x4_t)vzip2q_s64((int64x2_t)v146, (int64x2_t)v176);
      uint16x8_t v433 = (uint16x8_t)vtrn1q_s32((int32x4_t)v89, v430);
      uint16x8_t v434 = (uint16x8_t)vtrn2q_s32((int32x4_t)v89, v430);
      uint16x8_t v435 = (uint16x8_t)vtrn1q_s32((int32x4_t)v110, v432);
      uint16x8_t v436 = (uint16x8_t)vtrn2q_s32((int32x4_t)v110, v432);
      uint16x8_t v437 = (uint16x8_t)vtrn1q_s32(v429, (int32x4_t)v177);
      uint16x8_t v438 = (uint16x8_t)vtrn2q_s32(v429, (int32x4_t)v177);
      uint16x8_t v439 = (uint16x8_t)vtrn1q_s32(v431, (int32x4_t)v178);
      uint16x8_t v440 = (uint16x8_t)vtrn2q_s32(v431, (int32x4_t)v178);
      if (v9)
      {
        uint16x8_t v433 = vshlq_u16(v433, v11);
        uint16x8_t v435 = vshlq_u16(v435, v11);
        uint16x8_t v437 = vshlq_u16(v437, v11);
        uint16x8_t v439 = vshlq_u16(v439, v11);
        uint16x8_t v434 = vshlq_u16(v434, v11);
        uint16x8_t v436 = vshlq_u16(v436, v11);
        uint16x8_t v438 = vshlq_u16(v438, v11);
        uint16x8_t v440 = vshlq_u16(v440, v11);
      }
      *(uint16x8_t *)uint64_t v6 = v433;
      *(uint16x8_t *)(v6 + v8) = v435;
      int8x16_t v441 = (uint16x8_t *)(v6 + v8 + v8);
      uint16x8_t *v441 = v437;
      int8x16_t v442 = (uint16x8_t *)((char *)v441 + v8);
      *int8x16_t v442 = v439;
      int8x16_t v443 = (uint16x8_t *)((char *)v442 + v8);
      uint16x8_t *v443 = v434;
      int8x16_t v444 = (uint16x8_t *)((char *)v443 + v8);
      uint16x8_t *v444 = v436;
      int8x16_t v445 = (uint16x8_t *)((char *)v444 + v8);
      uint16x8_t *v445 = v438;
      *(uint16x8_t *)((char *)v445 + v8) = v440;
      return result;
    default:
      longjmp(result + 29, -15405);
  }
  return result;
}

int *vectorstore_1x16_packed10(int *result, int a2, unsigned __int16 *a3, unsigned __int16 *a4)
{
  switch(a2)
  {
    case 2:
      int v7 = a3[1] + (a3[2] << 10) + (a3[3] << 20);
      *uint64_t result = *result & 0xFFFFF | (*a3 << 20);
      result[1] = v7;
      int v8 = a3[7] + (*a4 << 10) + (a4[1] << 20);
      result[2] = a3[4] + (a3[5] << 10) + (a3[6] << 20);
      result[3] = v8;
      int v9 = a4[2] + (a4[3] << 10) + (a4[4] << 20);
      int v10 = a4[5] + (a4[6] << 10) + (a4[7] << 20);
LABEL_7:
      result[4] = v9;
      result[5] = v10;
      return result;
    case 1:
      int v11 = a3[2] + (a3[3] << 10) + (a3[4] << 20);
      *uint64_t result = (*result & 0x3FF | (*a3 << 10)) + (a3[1] << 20);
      result[1] = v11;
      int v12 = *a4 + (a4[1] << 10) + (a4[2] << 20);
      result[2] = a3[5] + (a3[6] << 10) + (a3[7] << 20);
      result[3] = v12;
      int v9 = a4[3] + (a4[4] << 10) + (a4[5] << 20);
      int v10 = a4[6] + (a4[7] << 10);
      goto LABEL_7;
    case 0:
      int v4 = a3[3] + (a3[4] << 10) + (a3[5] << 20);
      *uint64_t result = *a3 + (a3[1] << 10) + (a3[2] << 20);
      result[1] = v4;
      int v5 = a4[1] + (a4[2] << 10) + (a4[3] << 20);
      result[2] = a3[6] + (a3[7] << 10) + (*a4 << 20);
      result[3] = v5;
      int v6 = a4[7];
      result[4] = a4[4] + (a4[5] << 10) + (a4[6] << 20);
      result[5] = v6;
      break;
  }
  return result;
}

uint64_t CMPhotoQualityControllerNeedsImageAnalysis()
{
  return 0;
}

uint64_t CMPhotoQualityControllerCopyDefaultControllerForAuxiliaryImage(int a1, int a2, CFNumberRef *a3, CFNumberRef *a4)
{
  switch(a1)
  {
    case 1752589105:
      if (!a2)
      {
        CFNumberRef Int = CMPhotoCFNumberCreateInt(0);
        if (Int)
        {
          CFNumberRef v8 = Int;
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          if (Mutable)
          {
            CFNumberRef v9 = Mutable;
            FigCFDictionarySetFloat();
            goto LABEL_11;
          }
LABEL_21:
          CFRelease(v8);
        }
        return 4294950305;
      }
      int v6 = 6;
LABEL_9:
      CFNumberRef v7 = CMPhotoCFNumberCreateInt(v6);
      if (v7)
      {
        CFNumberRef v8 = v7;
        CFNumberRef v9 = 0;
LABEL_11:
        uint64_t result = 0;
        *a3 = v8;
        *a4 = v9;
        return result;
      }
      return 4294950305;
    case 1936484717:
      int v6 = 9;
      goto LABEL_9;
    case 1785750887:
      if (a2)
      {
        int v6 = 5;
        goto LABEL_9;
      }
      CFNumberRef v11 = CMPhotoCFNumberCreateInt(4);
      if (v11)
      {
        CFNumberRef v8 = v11;
        CFNumberRef v9 = CMPhotoCFNumberCreateInt(5);
        if (v9) {
          goto LABEL_11;
        }
        goto LABEL_21;
      }
      return 4294950305;
  }
  return FigSignalErrorAt();
}

uint64_t CMPhotoComputeWPSNRForPixelBuffer(__CVBuffer *a1, __CVBuffer *a2, double *a3, uint64_t a4, signed int a5, double *a6, CVPixelBufferRef *a7, CVPixelBufferRef *a8, CVPixelBufferRef *a9)
{
  CVPixelBufferRef v137 = 0;
  CVPixelBufferRef pixelBufferOut = 0;
  CVPixelBufferRef v136 = 0;
  CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  unsigned int v15 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  unsigned int v16 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFAllocatorRef allocator = v14;
  CFMutableDictionaryRef v18 = CFDictionaryCreateMutable(v14, 0, v15, v16);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24D20], v18);
  CVPixelBufferRef pixelBuffer = a2;
  if (CMPhotoPixelBufferHasCLAP(a1)
    || CMPhotoPixelBufferHasCLAP(a2)
    || a3 && (a5 < 1 || a5 > (unint64_t)a3))
  {
    FigSignalErrorAt();
    int v110 = 0;
    int v111 = 0;
    int64_t v130 = 0;
    unsigned int v28 = 0;
    a3 = 0;
    uint64_t v63 = 0;
LABEL_120:
    double v36 = 0.0;
    goto LABEL_103;
  }
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (PixelFormatType != CVPixelBufferGetPixelFormatType(a2)) {
    goto LABEL_119;
  }
  int v20 = CVPixelBufferGetPixelFormatType(a2);
  uint64_t v134 = 0;
  uint64_t v135 = 0;
  CMPhotoGetPixelBufferCLAP(a1, 0, 0, &v134, &v135);
  unint64_t v132 = 0;
  unint64_t v133 = 0;
  CMPhotoGetPixelBufferCLAP(a2, 0, 0, &v132, &v133);
  signed int v21 = v134;
  if (v134 != v132 || (signed int v22 = v135, v135 != v133))
  {
LABEL_119:
    uint64_t v63 = FigSignalErrorAt();
    int v110 = 0;
    int v111 = 0;
    int64_t v130 = 0;
    unsigned int v28 = 0;
    a3 = 0;
    goto LABEL_120;
  }
  int v131 = a1;
  uint64_t v129 = (uint64_t)a3;
  unsigned int v123 = Mutable;
  uint64_t v124 = a6;
  CFTypeRef cf = v18;
  if (a3)
  {
    if ((int)v135 < 1)
    {
      unsigned int v23 = 0;
    }
    else
    {
      unsigned int v23 = 0;
      if (a5 > (int)v135) {
        signed int v22 = a5;
      }
      unsigned int v24 = (v22 - 1) / a5 + 1;
      do
        ++v23;
      while (v24 != v23);
    }
    if ((int)v134 < 1)
    {
      unsigned int v25 = 0;
    }
    else
    {
      unsigned int v25 = 0;
      if (a5 > (int)v134) {
        signed int v21 = a5;
      }
      unsigned int v27 = (v21 - 1) / a5 + 1;
      do
        ++v25;
      while (v27 != v25);
    }
    unsigned int v26 = v25 * v23;
    if (v25 * v23)
    {
      a3 = (double *)malloc_type_calloc(v25 * v23, 8uLL, 0x100004000313F17uLL);
      if (!a3) {
        goto LABEL_121;
      }
      if (a8)
      {
LABEL_29:
        int64_t v130 = (int *)malloc_type_calloc(v132 * v133, 4uLL, 0x100004052888210uLL);
        if (v130) {
          goto LABEL_30;
        }
LABEL_121:
        int v110 = 0;
        int v111 = 0;
        int64_t v130 = 0;
        unsigned int v28 = 0;
        double v36 = 0.0;
        uint64_t v63 = 4294950305;
        goto LABEL_102;
      }
    }
    else
    {
      a3 = 0;
      if (a8) {
        goto LABEL_29;
      }
    }
  }
  else
  {
    unsigned int v25 = 0;
    unsigned int v23 = 0;
    unsigned int v26 = 0;
    if (a8) {
      goto LABEL_29;
    }
  }
  int64_t v130 = 0;
LABEL_30:
  int16x8_t v125 = a8;
  unsigned int v28 = 0;
  if (a9)
  {
    if (v26)
    {
      unsigned int v28 = (double *)malloc_type_calloc(v26, 8uLL, 0x100004000313F17uLL);
      if (!v28)
      {
        int v110 = 0;
        int v111 = 0;
        uint64_t v63 = 4294950305;
        double v36 = 0.0;
        goto LABEL_102;
      }
    }
  }
  int v29 = CMPhotoPixelFormatContainsYCbCr(v20);
  int v30 = CMPhotoPixelFormatContainsRGB(v20);
  int v31 = CMPhotoPixelFormatContainsGrayScale(v20);
  uint64_t v32 = CVPixelBufferGetPixelFormatType(a2);
  int BitDepthForPixelFormat = CMPhotoGetBitDepthForPixelFormat(v32);
  OSType v33 = CVPixelBufferGetPixelFormatType(a2);
  int BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(v33);
  uint64_t v35 = CVPixelBufferLockBaseAddress(v131, 0);
  double v36 = 0.0;
  if (v35)
  {
    uint64_t v63 = v35;
    int v110 = 0;
    int v111 = 0;
    goto LABEL_102;
  }
  uint64_t v37 = CVPixelBufferLockBaseAddress(a2, 0);
  if (v37)
  {
    uint64_t v63 = v37;
    int v111 = 0;
    int v110 = 1;
    goto LABEL_102;
  }
  if (v31)
  {
    if ((v20 - 1278226736) <= 6 && ((1 << (v20 - 48)) & 0x45) != 0)
    {
      int v38 = 16 - BitDepthForPixelFormat;
LABEL_46:
      size_t v40 = CVPixelBufferGetBytesPerRow(a2) / BytesPerPixelForPixelFormat;
      BaseAddress = CVPixelBufferGetBaseAddress(pixelBuffer);
      size_t v42 = CVPixelBufferGetBytesPerRow(v131) / BytesPerPixelForPixelFormat;
      int64x2_t v43 = CVPixelBufferGetBaseAddress(v131);
      if (v129) {
        calc_wpsnr((uint64_t)BaseAddress, v40, (uint64_t)v43, v42, BitDepthForPixelFormat, v132, v133, v129, a5, 1u, v38, (uint64_t)a3, v25, 0, (uint64_t)v28);
      }
      calc_wpsnr((uint64_t)BaseAddress, v40, (uint64_t)v43, v42, BitDepthForPixelFormat, v132, v133, 8, 8u, 1u, v38, 0, 0, (uint64_t)v130, 0);
      double v36 = v44;
      goto LABEL_75;
    }
    if (v20 == 1278226488)
    {
      int v38 = 0;
      goto LABEL_46;
    }
LABEL_65:
    FigSignalErrorAt();
LABEL_100:
    uint64_t v63 = 0;
    goto LABEL_101;
  }
  if (v29)
  {
    if (v20 > 2016686639)
    {
      if (v20 != 2019963440 && v20 != 2016686640) {
        goto LABEL_65;
      }
      int v39 = 6;
    }
    else
    {
      int v39 = 0;
      if (v20 != 875704422 && v20 != 875704438) {
        goto LABEL_65;
      }
    }
    int v119 = v39;
    unint64_t v116 = v132 >> 1;
    unint64_t v117 = v133 >> 1;
    size_t v118 = CVPixelBufferGetBytesPerRowOfPlane(a2, 0) / BytesPerPixelForPixelFormat;
    unint64_t v51 = 2 * BytesPerPixelForPixelFormat;
    size_t v114 = CVPixelBufferGetBytesPerRowOfPlane(a2, 1uLL) / v51;
    BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(a2, 0);
    unsigned int v53 = CVPixelBufferGetBaseAddressOfPlane(a2, 1uLL);
    uint64_t v115 = BytesPerPixelForPixelFormat;
    size_t v54 = CVPixelBufferGetBytesPerRowOfPlane(v131, 0) / BytesPerPixelForPixelFormat;
    size_t v113 = CVPixelBufferGetBytesPerRowOfPlane(v131, 1uLL) / v51;
    int v55 = CVPixelBufferGetBaseAddressOfPlane(v131, 0);
    unsigned int v56 = CVPixelBufferGetBaseAddressOfPlane(v131, 1uLL);
    if (v129) {
      calc_wpsnr((uint64_t)BaseAddressOfPlane, v118, (uint64_t)v55, v54, BitDepthForPixelFormat, v132, v133, v129, a5, 1u, v119, (uint64_t)a3, v25, 0, (uint64_t)v28);
    }
    calc_wpsnr((uint64_t)BaseAddressOfPlane, v118, (uint64_t)v55, v54, BitDepthForPixelFormat, v132, v133, 8, 8u, 1u, v119, 0, 0, (uint64_t)v130, 0);
    double v58 = v57;
    calc_wpsnr((uint64_t)v53, v114, (uint64_t)v56, v113, BitDepthForPixelFormat, v116, v117, 8, 8u, 2u, v119, 0, 0, 0, 0);
    double v60 = v59;
    calc_wpsnr((uint64_t)v53 + v115, v114, (uint64_t)v56 + v115, v113, BitDepthForPixelFormat, v116, v117, 8, 8u, 2u, v119, 0, 0, 0, 0);
    double v36 = (v60 + v58 * 6.0 + v61) * 0.125;
  }
  else
  {
    if (!v30)
    {
      uint64_t v62 = FigSignalErrorAt();
      goto LABEL_67;
    }
    if (v20 != 1111970369 && v20 != 1380401729 && v20 != 1815491698) {
      goto LABEL_65;
    }
    size_t v45 = CVPixelBufferGetBytesPerRow(a2) / BytesPerPixelForPixelFormat;
    int16x8_t v46 = CVPixelBufferGetBaseAddressOfPlane(a2, 0);
    size_t v47 = CVPixelBufferGetBytesPerRow(v131) / BytesPerPixelForPixelFormat;
    __int16 v48 = CVPixelBufferGetBaseAddress(v131);
    if (v129)
    {
      int v49 = BitDepthForPixelFormat;
      uint64_t v50 = 1;
      if (BitDepthForPixelFormat > 8) {
        uint64_t v50 = 2;
      }
      calc_wpsnr((uint64_t)v46 + v50, v45, (uint64_t)v48 + v50, v47, BitDepthForPixelFormat, v132, v133, v129, a5, 4u, 0, (uint64_t)a3, v25, 0, (uint64_t)v28);
    }
    else
    {
      int v49 = BitDepthForPixelFormat;
    }
    int v64 = v47;
    int v65 = v45;
    uint64_t v66 = 1;
    if (v49 > 8) {
      uint64_t v66 = 2;
    }
    uint64_t v67 = (uint64_t)v46 + v66;
    uint64_t v68 = (uint64_t)v48 + v66;
    uint64_t v69 = (uint64_t)v48;
    uint64_t v70 = (uint64_t)v46;
    int v71 = v49;
    if (v49 <= 8) {
      uint64_t v72 = 2;
    }
    else {
      uint64_t v72 = 4;
    }
    int v73 = v64;
    calc_wpsnr(v67, v65, v68, v64, v71, v132, v133, 8, 8u, 4u, 0, 0, 0, (uint64_t)v130, 0);
    double v75 = v74;
    calc_wpsnr(v70, v65, v69, v73, v71, v132, v133, 8, 8u, 4u, 0, 0, 0, 0, 0);
    double v77 = v76;
    calc_wpsnr(v70 + v72, v65, v69 + v72, v73, v71, v132, v133, 8, 8u, 4u, 0, 0, 0, 0, 0);
    double v36 = (v75 + v77 + v78) / 3.0;
  }
LABEL_75:
  if (v129)
  {
    uint64_t v62 = CVPixelBufferCreate(allocator, v25, v23, 0x72673366u, 0, &pixelBufferOut);
    if (v62) {
      goto LABEL_67;
    }
    CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
    size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBufferOut, 0);
    unsigned int v80 = (float *)CVPixelBufferGetBaseAddressOfPlane(pixelBufferOut, 0);
    uint64_t v81 = (float *)CVPixelBufferGetBaseAddressOfPlane(pixelBufferOut, 1uLL);
    __int16 v82 = (float *)CVPixelBufferGetBaseAddressOfPlane(pixelBufferOut, 2uLL);
    if (v23)
    {
      int v83 = 0;
      uint64_t v84 = 0;
      uint64_t v85 = 4 * (BytesPerRowOfPlane >> 2);
      do
      {
        uint64_t v86 = v25;
        unsigned int v87 = v80;
        uint64_t v88 = v81;
        int16x8_t v89 = v82;
        int v90 = v83;
        if (v25)
        {
          do
          {
            float v91 = a3[v90];
            *v87++ = v91;
            *v88++ = v91;
            *v89++ = v91;
            ++v90;
            --v86;
          }
          while (v86);
        }
        ++v84;
        v83 += v25;
        __int16 v82 = (float *)((char *)v82 + v85);
        uint64_t v81 = (float *)((char *)v81 + v85);
        unsigned int v80 = (float *)((char *)v80 + v85);
      }
      while (v84 != v23);
    }
    CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
    if (a7)
    {
      *a7 = pixelBufferOut;
      CVPixelBufferRef pixelBufferOut = 0;
    }
  }
  if (!v125) {
    goto LABEL_92;
  }
  uint64_t v62 = CVPixelBufferCreate(allocator, v132, v133, 0x4C303066u, 0, &v137);
  if (v62)
  {
LABEL_67:
    uint64_t v63 = v62;
LABEL_101:
    int v110 = 1;
    int v111 = 1;
LABEL_102:
    a1 = v131;
    CFMutableDictionaryRef Mutable = v123;
    a6 = v124;
    CFMutableDictionaryRef v18 = cf;
    goto LABEL_103;
  }
  CVPixelBufferLockBaseAddress(v137, 0);
  size_t v92 = CVPixelBufferGetBytesPerRowOfPlane(v137, 0);
  unsigned int v93 = (char *)CVPixelBufferGetBaseAddressOfPlane(v137, 0);
  unint64_t v94 = v133;
  if (v133)
  {
    uint64_t v95 = 0;
    unint64_t v96 = v132;
    uint16x8_t v97 = v130;
    do
    {
      unint64_t v98 = v96;
      unsigned int v99 = v97;
      for (CFIndex i = v93; v98; --v98)
      {
        int v101 = *v99++;
        *i++ = v101;
      }
      ++v95;
      v93 += 4 * (v92 >> 2);
      v97 += v96;
    }
    while (v95 != v94);
  }
  CVPixelBufferUnlockBaseAddress(v137, 0);
  *int16x8_t v125 = v137;
  CVPixelBufferRef v137 = 0;
LABEL_92:
  if (!a9) {
    goto LABEL_100;
  }
  uint64_t v63 = CVPixelBufferCreate(allocator, v25, v23, 0x4C303066u, 0, &v136);
  if (!v63)
  {
    CVPixelBufferLockBaseAddress(v136, 0);
    size_t v102 = CVPixelBufferGetBytesPerRowOfPlane(v136, 0);
    int v103 = (float *)CVPixelBufferGetBaseAddressOfPlane(v136, 0);
    if (v23)
    {
      int v104 = 0;
      for (uint64_t j = 0; j != v23; ++j)
      {
        uint64_t v106 = v25;
        uint64_t v107 = v103;
        int v108 = v104;
        if (v25)
        {
          do
          {
            float v109 = v28[v108];
            *v107++ = v109;
            ++v108;
            --v106;
          }
          while (v106);
        }
        v104 += v25;
        v103 += v102 >> 2;
      }
    }
    CVPixelBufferUnlockBaseAddress(v136, 0);
    uint64_t v63 = 0;
    *a9 = v136;
    CVPixelBufferRef v136 = 0;
    goto LABEL_101;
  }
  a1 = v131;
  CFMutableDictionaryRef Mutable = v123;
  a6 = v124;
  CFMutableDictionaryRef v18 = cf;
  if (v136) {
    CFRelease(v136);
  }
  int v110 = 1;
  int v111 = 1;
LABEL_103:
  if (pixelBufferOut) {
    CFRelease(pixelBufferOut);
  }
  if (v137) {
    CFRelease(v137);
  }
  if (v18) {
    CFRelease(v18);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  free(a3);
  free(v28);
  free(v130);
  if (a6) {
    *a6 = v36;
  }
  if (v110) {
    CVPixelBufferUnlockBaseAddress(a1, 0);
  }
  if (v111) {
    CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
  }
  return v63;
}

void calc_wpsnr(uint64_t a1, int a2, uint64_t a3, int a4, int a5, uint64_t a6, unint64_t a7, uint64_t a8, unsigned int a9, unsigned int a10, int a11, uint64_t a12, int a13, uint64_t a14, uint64_t a15)
{
  uint64_t v199 = *MEMORY[0x1E4F143B8];
  double v23 = ldexp(1.0, a5 - 6);
  double v24 = ldexp(1.0, a5);
  int v198 = a5;
  if (a7)
  {
    uint64_t v172 = a15;
    uint64_t v25 = a14;
    uint64_t v179 = a12;
    int v193 = a11;
    double v26 = sqrt(8294400.0 / (double)(a6 * a7)) * v24;
    unint64_t v27 = a6 * a10;
    int v171 = a6 * a10;
    uint64_t v28 = (int)a10 * (uint64_t)a2;
    uint64_t v29 = (int)a10 * (uint64_t)a4;
    uint64_t v170 = (int)(a10 * a9);
    uint64_t v155 = a9;
    uint64_t v148 = a13;
    uint64_t v30 = -(uint64_t)(int)a10;
    int v31 = 0;
    double v162 = (double)(~(-1 << a5) * (unint64_t)~(-1 << a5));
    uint64_t v161 = a3 + v30 - v29;
    uint64_t v32 = -2 * (int)a10;
    uint64_t v195 = 2 * v29;
    uint64_t v196 = v29;
    uint64_t v160 = a3 + v32 - 2 * v29;
    uint64_t v153 = (int)a9 * v29;
    uint64_t v152 = 2 * v153;
    uint64_t v169 = 2 * v170;
    uint64_t v189 = a10;
    uint64_t v147 = v30;
    uint64_t v159 = a1 + v30 - v28;
    uint64_t v194 = 2 * v28;
    uint64_t v197 = v28;
    uint64_t v158 = a1 + v32 - 2 * v28;
    uint64_t v151 = (int)a9 * v28;
    uint64_t v150 = 2 * v151;
    uint64_t v174 = (int)a8;
    uint64_t v154 = (int)a9;
    uint64_t v149 = a6 * (int)a9;
    double v33 = 0.0;
    int v34 = a7;
    uint64_t v35 = 0;
    uint64_t v163 = 0;
    unint64_t v190 = 0;
    uint64_t v167 = a6;
    uint64_t v177 = a14;
    uint64_t v173 = a8;
    do
    {
      int v157 = v34;
      if ((int)a8 >= v34) {
        int v36 = v34;
      }
      else {
        int v36 = a8;
      }
      uint64_t v156 = v35;
      if (v27)
      {
        uint64_t v37 = 0;
        unint64_t v38 = 0;
        int v165 = v36;
        int v164 = v36 + 1;
        int v39 = a7 - v190;
        if ((int)a7 - (int)v190 >= (int)a8) {
          int v39 = a8;
        }
        double v40 = (double)v39;
        uint64_t v176 = v35 * v148;
        uint64_t v41 = v39;
        uint64_t v42 = v39 + 2;
        if (v25) {
          BOOL v43 = v39 < 1;
        }
        else {
          BOOL v43 = 1;
        }
        int v44 = v43;
        int v166 = v44;
        uint64_t v45 = v147;
        uint64_t v188 = v158;
        uint64_t v187 = v159;
        uint64_t v186 = v160;
        uint64_t v185 = v161;
        uint64_t v175 = v42;
        do
        {
          uint64_t v184 = v37;
          int v182 = v31;
          unsigned int v181 = &v146;
          unsigned int v46 = (v171 - (int)v38) / (int)v189;
          uint64_t v183 = v46;
          if ((int)v46 >= (int)a8) {
            a8 = a8;
          }
          else {
            a8 = v46;
          }
          uint64_t v178 = (a8 + 2);
          uint64_t v47 = ((uint64_t (*)(void))MEMORY[0x1F4188790])();
          int v49 = (char *)&v146 - ((v48 + 15) & 0xFFFFFFFF0);
          uint64_t v50 = MEMORY[0x1F4188790](v47);
          unsigned int v53 = (char *)&v146 - v52;
          if ((int)v51 >= 1)
          {
            size_t v54 = 8 * v51;
            bzero(v49, 8 * v51);
            bzero(v53, v54);
          }
          uint64_t v180 = (a8 * v41);
          MEMORY[0x1F4188790](v50);
          unsigned int v56 = (double *)((char *)&v146 - v55);
          double v57 = 0.0;
          if ((int)v41 >= -1)
          {
            char v58 = 0;
            char v59 = 0;
            char v60 = 0;
            char v61 = 0;
            int v192 = v53 + 8;
            uint64_t v191 = v49 + 8;
            uint64_t v168 = (a8 + 1);
            uint64_t v62 = v168 + 1;
            int v63 = -1;
            uint64_t v64 = -1;
            uint64_t v66 = v187;
            uint64_t v65 = v188;
            uint64_t v67 = v186;
            uint64_t v68 = v185;
            do
            {
              if ((int)a8 >= -1)
              {
                uint64_t v69 = 0;
                uint64_t v70 = 0;
                unint64_t v71 = v64 + v190;
                unint64_t v72 = (v64 + v190);
                int v73 = &v192[8 * v63];
                double v74 = &v191[8 * v63];
                do
                {
                  if ((v71 & 0x8000000000000000) != 0)
                  {
                    char v61 = 1;
                  }
                  else if ((uint64_t)(v38 + v70 - 1) < 0)
                  {
                    char v59 = 1;
                  }
                  else if (a7 <= v72)
                  {
                    char v60 = 1;
                  }
                  else if (v27 <= v45 + v69)
                  {
                    char v58 = 1;
                  }
                  else
                  {
                    if (v198 < 9)
                    {
                      *(void *)&v74[8 * v70] = *(unsigned __int8 *)(v66 + v69);
                      uint64_t v76 = *(unsigned __int8 *)(v68 + v69);
                    }
                    else
                    {
                      char v75 = v193;
                      *(void *)&v74[8 * v70] = *(unsigned __int16 *)(v65 + 2 * v69) >> v193;
                      uint64_t v76 = *(unsigned __int16 *)(v67 + 2 * v69) >> v75;
                    }
                    *(void *)&v73[8 * v70] = v76;
                  }
                  ++v70;
                  v69 += (int)a10;
                }
                while (v62 != v70);
                v63 += v70;
              }
              v68 += v196;
              v67 += v195;
              v66 += v197;
              v65 += v194;
              BOOL v43 = v64++ < v41;
            }
            while (v43);
            uint64_t v77 = v175;
            int v78 = v178;
            if (int)a8 >= -1 && (v61)
            {
              if ((int)v178 <= 1) {
                uint64_t v79 = 1;
              }
              else {
                uint64_t v79 = v178;
              }
              uint64_t v80 = (int)v183;
              if ((int)v183 >= v174) {
                uint64_t v80 = v174;
              }
              uint64_t v81 = 8 * v80 + 16;
              __int16 v82 = v53;
              int v83 = v49;
              do
              {
                *int v83 = *(void *)((char *)v83 + v81);
                ++v83;
                *__int16 v82 = *(void *)((char *)v82 + v81);
                ++v82;
                --v79;
              }
              while (v79);
            }
            uint64_t v84 = v167;
            uint64_t v25 = v177;
            uint64_t v85 = v168;
            if (int)a8 >= -1 && (v60)
            {
              if (v78 <= 1) {
                uint64_t v86 = 1;
              }
              else {
                uint64_t v86 = v78;
              }
              uint64_t v87 = 8 * v164 * v78;
              uint64_t v88 = 8 * v165 * v78;
              do
              {
                *(void *)&v49[v87] = *(void *)&v49[v88];
                *(void *)&v53[v87] = *(void *)&v53[v88];
                v87 += 8;
                v88 += 8;
                --v86;
              }
              while (v86);
            }
            if (int)v41 >= -1 && (v59)
            {
              uint64_t v89 = 0;
              uint64_t v90 = 0;
              uint64_t v91 = (int)v183;
              if ((int)v183 >= v174) {
                uint64_t v91 = v174;
              }
              uint64_t v92 = 8 * v91 + 16;
              do
              {
                *(void *)&v49[v89] = *(void *)&v49[v89 + 8];
                *(void *)&v53[v89] = *(void *)&v53[v89 + 8];
                ++v90;
                v89 += v92;
              }
              while (v90 < v77);
            }
            if (int)v41 >= -1 && (v58)
            {
              uint64_t v93 = 0;
              uint64_t v94 = 0;
              do
              {
                *(void *)&v49[8 * (int)v85 + v93] = *(void *)&v49[8 * (int)a8 + v93];
                *(void *)&v53[8 * (int)v85 + v93] = *(void *)&v53[8 * (int)a8 + v93];
                ++v94;
                v93 += 8 * (int)a8 + 16;
              }
              while (v94 < v77);
            }
            if ((int)v41 >= 1)
            {
              uint64_t v95 = v85 - 1;
              unint64_t v96 = v49 + 8;
              uint64_t v97 = 8 * v78;
              double v57 = 0.0;
              uint64_t v98 = 1;
              do
              {
                if ((int)a8 <= 0)
                {
                  uint64_t v99 = v98 + 1;
                }
                else
                {
                  uint64_t v99 = v98 + 1;
                  int v100 = a8 * (v98 - 1);
                  int v101 = &v96[v97 * (v98 + 1)];
                  size_t v102 = (uint64_t *)&v96[v97 * v98];
                  uint64_t v103 = v95;
                  int v104 = &v96[v97 * (v98 - 1)];
                  do
                  {
                    uint64_t v105 = *v102;
                    uint64_t v106 = *(v102 - 1);
                    uint64_t v107 = v102[1];
                    ++v102;
                    double v108 = (double)(v107 + v106 + *(void *)v104 + *(void *)v101) * -2.0 + (double)v105 * 12.0;
                    uint64_t v109 = *((void *)v104 - 1);
                    uint64_t v110 = *((void *)v104 + 1);
                    v104 += 8;
                    uint64_t v111 = v110 + v109;
                    uint64_t v112 = *((void *)v101 - 1);
                    uint64_t v113 = *((void *)v101 + 1);
                    v101 += 8;
                    double v114 = (v108 - (double)(v111 + v112 + v113)) * 0.25;
                    double v115 = -v114;
                    if (v114 >= 0.0) {
                      double v115 = v114;
                    }
                    v56[v100] = v115;
                    double v57 = v57 + v114 * v114;
                    ++v100;
                    --v103;
                  }
                  while (v103);
                }
                BOOL v43 = v98 < v41;
                uint64_t v98 = v99;
              }
              while (v43);
              if ((v166 & 1) == 0)
              {
                uint64_t v116 = 0;
                uint64_t v117 = v163;
                do
                {
                  if ((int)a8 >= 1)
                  {
                    size_t v118 = (float *)(v25 + 4 * (v117 + (int)v38 / (int)v189));
                    uint64_t v119 = a8;
                    int v120 = v56;
                    do
                    {
                      double v121 = *v120++;
                      float v122 = v121;
                      *v118++ = v122;
                      --v119;
                    }
                    while (v119);
                  }
                  ++v116;
                  v117 += v84;
                  v56 += (int)a8;
                }
                while (v116 < v41);
              }
            }
          }
          double v123 = v57 / (v40 * (double)(int)a8);
          uint64_t v124 = v184;
          if (v172) {
            *(double *)(v172 + 8 * (v184 + v176)) = v123;
          }
          if (v123 < v23) {
            double v123 = v23;
          }
          double v125 = v26 / v123;
          double v126 = fabs(sqrt(v125));
          BOOL v127 = v125 == -INFINITY;
          double v128 = INFINITY;
          if (!v127) {
            double v128 = v126;
          }
          if ((int)v41 < 1)
          {
            uint64_t v129 = 0;
            int v135 = v182;
          }
          else
          {
            uint64_t v129 = 0;
            if ((int)v183 >= v174) {
              uint64_t v130 = v174;
            }
            else {
              uint64_t v130 = (int)v183;
            }
            uint64_t v131 = (uint64_t)&v49[8 * v130 + 24];
            uint64_t v132 = 8 * v130 + 16;
            uint64_t v133 = (uint64_t)&v53[8 * v130 + 24];
            uint64_t v134 = 1;
            int v135 = v182;
            do
            {
              uint64_t v136 = (a8 + 1) - 1;
              CVPixelBufferRef v137 = (uint64_t *)v133;
              uint64_t v138 = (uint64_t *)v131;
              if ((int)a8 >= 1)
              {
                do
                {
                  uint64_t v140 = *v138++;
                  uint64_t v139 = v140;
                  uint64_t v141 = *v137++;
                  v129 += (v139 - v141) * (v139 - v141);
                  --v136;
                }
                while (v136);
              }
              v131 += v132;
              v133 += v132;
              BOOL v43 = v134++ < v41;
            }
            while (v43);
          }
          double v142 = v128 * ((double)v129 / (double)(int)v180);
          LODWORD(a8) = v173;
          if (v179)
          {
            if (v142 == 0.0)
            {
              double v143 = INFINITY;
            }
            else
            {
              long double v144 = log10(v162 / v142);
              uint64_t v124 = v184;
              uint64_t v25 = v177;
              double v143 = v144 * 10.0;
            }
            *(double *)(v179 + 8 * (v124 + v176)) = v143;
          }
          uint64_t v37 = v124 + 1;
          double v33 = v33 + v142;
          int v31 = v135 + 1;
          v38 += v170;
          v185 += v170;
          v186 += v169;
          v187 += v170;
          v188 += v169;
          v45 += v170;
        }
        while (v27 > v38);
      }
      uint64_t v35 = v156 + 1;
      v161 += v153;
      v160 += v152;
      v159 += v151;
      v158 += v150;
      int v34 = v157 - v155;
      v163 += v149;
      v190 += v154;
    }
    while (a7 > v190);
  }
  else
  {
    int v31 = 0;
    double v33 = 0.0;
  }
  double v145 = v33 / (double)v31;
  if (v145 != 0.0) {
    log10((double)(~(-1 << v198) * (unint64_t)~(-1 << v198)) / v145);
  }
}

uint64_t _computeFLIPForRGB(__CVBuffer *a1, __CVBuffer *a2, int a3, CFTypeRef *a4, _DWORD *a5, unint64_t a6, void *a7, float a8, float a9, float a10)
{
  uint64_t v300 = *MEMORY[0x1E4F143B8];
  int32x4_t v288 = 0;
  int32x4_t v289 = 0;
  CVPixelBufferRef v286 = 0;
  CVPixelBufferRef pixelBufferOut = 0;
  CVPixelBufferRef v284 = 0;
  CVPixelBufferRef v285 = 0;
  CVPixelBufferRef v282 = 0;
  CVPixelBufferRef v283 = 0;
  CVPixelBufferRef v280 = 0;
  CVPixelBufferRef v281 = 0;
  CVPixelBufferRef v278 = 0;
  CVPixelBufferRef v279 = 0;
  CVPixelBufferRef v276 = 0;
  CVPixelBufferRef v277 = 0;
  CVPixelBufferRef pixelBuffer = 0;
  CVPixelBufferRef v275 = 0;
  CVPixelBufferRef v272 = 0;
  CVPixelBufferRef v273 = 0;
  CFTypeRef cf = 0;
  CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  unsigned int v19 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  int v20 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v217 = CFDictionaryCreateMutable(v18, 0, v19, v20);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24D20], v217);
  if (CMPhotoPixelBufferHasCLAP(a1) || CMPhotoPixelBufferHasCLAP(a2))
  {
    uint64_t v186 = 4294950306;
    goto LABEL_195;
  }
  size_t v269 = 0;
  size_t v270 = 0;
  CMPhotoGetPixelBufferCLAP(a1, 0, 0, &v269, &v270);
  uint64_t v267 = 0;
  uint64_t v268 = 0;
  CMPhotoGetPixelBufferCLAP(a2, 0, 0, &v267, &v268);
  if (v269 != v267 || v270 != v268)
  {
    uint64_t v30 = FigSignalErrorAt();
    goto LABEL_248;
  }
  float v261 = a8;
  unint64_t v227 = a6;
  int v216 = a3;
  uint16x8_t v215 = a4;
  CGFloat v25 = *MEMORY[0x1E4F1DB20];
  CGFloat v24 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
  CGFloat v26 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
  CGFloat v27 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
  double v29 = *MEMORY[0x1E4F1DB30];
  double v28 = *(double *)(MEMORY[0x1E4F1DB30] + 8);
  uint64_t v30 = CMPhotoScaleAndRotateSessionTransformForSize(0, a1, 1, 1, 1919365990, 0, 0, 1u, *MEMORY[0x1E4F1DB20], v24, v26, v27, *MEMORY[0x1E4F1DB30], v28, v22, v23, 0, 1u, &v289);
  if (v30) {
    goto LABEL_248;
  }
  double v220 = v26;
  double v221 = v24;
  CGFloat v33 = v24;
  double v219 = v27;
  double v34 = v28;
  uint64_t v30 = CMPhotoScaleAndRotateSessionTransformForSize(0, a2, 1, 1, 1919365990, 0, 0, 1u, v25, v33, v26, v27, v29, v28, v31, v32, 0, 1u, &v288);
  if (v30) {
    goto LABEL_248;
  }
  double v35 = v29;
  uint64_t v30 = _computesRGB2LinearRGB(v289, v289);
  if (v30) {
    goto LABEL_248;
  }
  uint64_t v30 = _computesRGB2LinearRGB(v288, v288);
  if (v30) {
    goto LABEL_248;
  }
  uint64_t v30 = _computesLinearRGB2XYZ(v289, v289);
  if (v30) {
    goto LABEL_248;
  }
  uint64_t v30 = _computesLinearRGB2XYZ(v288, v288);
  if (v30) {
    goto LABEL_248;
  }
  uint64_t v30 = CVPixelBufferCreate(v18, v269, v270, 0x72673366u, Mutable, &pixelBufferOut);
  if (v30) {
    goto LABEL_248;
  }
  uint64_t v30 = CVPixelBufferCreate(v18, v269, v270, 0x72673366u, Mutable, &v286);
  if (v30) {
    goto LABEL_248;
  }
  uint64_t v30 = _computesXYZ2YCxCz(v289, pixelBufferOut);
  if (v30) {
    goto LABEL_248;
  }
  uint64_t v30 = _computesXYZ2YCxCz(v288, v286);
  if (v30) {
    goto LABEL_248;
  }
  if (v289)
  {
    CFRelease(v289);
    int32x4_t v289 = 0;
  }
  double v36 = v28;
  CGFloat v37 = v25;
  if (v288)
  {
    CFRelease(v288);
    int32x4_t v288 = 0;
  }
  float v38 = 0.25;
  if (v261 != 0.0) {
    float v38 = v261;
  }
  float v39 = 0.718;
  if (a9 != 0.0) {
    float v39 = a9;
  }
  if (a10 == 0.0)
  {
    float v40 = (float)v269;
    if ((float)v269 <= (float)v270) {
      float v40 = (float)v270;
    }
    a10 = 4096.0;
    if (v40 <= 4096.0) {
      a10 = v40;
    }
  }
  float v41 = (float)(v38 * (float)(a10 / v39)) * 0.017453;
  unsigned int v228 = vcvtps_s32_f32(v41 * 0.13505);
  uint64_t v30 = CVPixelBufferCreate(v18, (int)((2 * v228) | 1), (int)((2 * v228) | 1), 0x72673366u, Mutable, &pixelBuffer);
  if (v30) {
    goto LABEL_248;
  }
  uint64_t v42 = pixelBuffer;
  pixelBufferCFDictionaryRef Attributes = Mutable;
  double v222 = v34;
  double v225 = v25;
  CFAllocatorRef allocator = v18;
  if (CVPixelBufferGetPixelFormatType(pixelBuffer) == 1919365990)
  {
    uint64_t v290 = 0;
    uint16x8_t v291 = 0;
    CMPhotoGetPixelBufferCLAP(v42, 0, 0, &v290, &v291);
    CVPixelBufferLockBaseAddress(v42, 0);
    size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v42, 0);
    BaseAddressOfPlane = (float *)CVPixelBufferGetBaseAddressOfPlane(v42, 0);
    uint64_t v45 = (float *)CVPixelBufferGetBaseAddressOfPlane(v42, 1uLL);
    unsigned int v46 = (float *)CVPixelBufferGetBaseAddressOfPlane(v42, 2uLL);
    if (v291)
    {
      uint64_t v47 = v46;
      int16x8_t v212 = v42;
      double v214 = v35;
      uint64_t v48 = 0;
      float v49 = 0.00001;
      float v50 = 25.854;
      float v51 = 0.0053;
      uint16x8_t v211 = BaseAddressOfPlane;
      int16x8_t v210 = v45;
      uint64_t v52 = v46;
      float v53 = 0.0;
      float v54 = 0.0;
      float v55 = 0.0;
      uint64_t v56 = v290;
      float v213 = v41;
      float v57 = 1.0 / v41;
      uint64_t v229 = v290;
      uint16x8_t v230 = v291;
      size_t v231 = BytesPerRowOfPlane;
      float v232 = 1.0 / v41;
      do
      {
        if (v56)
        {
          int v58 = -v228;
          float v247 = (float)(v57 * (float)(int)(v48 - v228)) * (float)(v57 * (float)(int)(v48 - v228));
          char v59 = BaseAddressOfPlane;
          char v60 = v45;
          char v61 = v52;
          uint64_t v62 = v56;
          do
          {
            float v251 = v55;
            float v255 = v54;
            float v262 = v53;
            float v63 = (float)(v247 + (float)((float)(v57 * (float)v58) * (float)(v57 * (float)v58))) * -9.8696;
            float v64 = expf(v63 / 0.0047);
            float v65 = (float)(expf(v63 / v49) * 0.0) + (float)(v64 * v50);
            float v66 = expf(v63 / v51);
            float v67 = v51;
            float v68 = v50;
            float v69 = v49;
            float v70 = expf(v63 / 0.025) * 151.33;
            float v71 = v70 + (float)(v66 * 24.347);
            float v72 = expf(v63 / 0.04);
            float v57 = v232;
            float v73 = v70 + (float)(v72 * 302.2);
            float v49 = v69;
            float v50 = v68;
            float v51 = v67;
            *v59++ = v65;
            *v60++ = v71;
            *v61++ = v73;
            float v55 = v251 + v65;
            float v54 = v255 + v71;
            float v53 = v262 + v73;
            ++v58;
            --v62;
          }
          while (v62);
        }
        uint64_t v48 = (__CVBuffer *)((char *)v48 + 1);
        uint64_t v52 = (float *)((char *)v52 + v231);
        uint64_t v45 = (float *)((char *)v45 + v231);
        BaseAddressOfPlane = (float *)((char *)BaseAddressOfPlane + v231);
        uint64_t v56 = v229;
      }
      while (v48 != v230);
      double v74 = 0;
      CFMutableDictionaryRef Mutable = pixelBufferAttributes;
      double v35 = v214;
      double v36 = v222;
      CFAllocatorRef v18 = allocator;
      float v41 = v213;
      char v75 = v211;
      uint64_t v42 = v212;
      uint64_t v76 = v210;
      do
      {
        uint64_t v77 = v75;
        int v78 = v76;
        uint64_t v79 = v47;
        for (uint64_t i = v229; i; --i)
        {
          *uint64_t v77 = *v77 / v55;
          ++v77;
          *int v78 = *v78 / v54;
          ++v78;
          *uint64_t v79 = *v79 / v53;
          ++v79;
        }
        double v74 = (__CVBuffer *)((char *)v74 + 1);
        uint64_t v47 = (float *)((char *)v47 + v231);
        uint64_t v76 = (float *)((char *)v76 + v231);
        char v75 = (float *)((char *)v75 + v231);
      }
      while (v74 != v230);
    }
    CVPixelBufferUnlockBaseAddress(v42, 0);
  }
  else
  {
    uint64_t v186 = FigSignalErrorAt();
    if (v186) {
      goto LABEL_195;
    }
  }
  uint64_t v30 = CVPixelBufferCreate(v18, v269, v270, 0x72673366u, Mutable, &v285);
  if (v30) {
    goto LABEL_248;
  }
  uint64_t v30 = CVPixelBufferCreate(v18, v269, v270, 0x72673366u, Mutable, &v284);
  if (v30) {
    goto LABEL_248;
  }
  uint64_t v30 = convolve(pixelBufferOut, v285, pixelBuffer);
  if (v30) {
    goto LABEL_248;
  }
  uint64_t v30 = convolve(v286, v284, pixelBuffer);
  if (v30) {
    goto LABEL_248;
  }
  if (pixelBuffer)
  {
    CFRelease(pixelBuffer);
    CVPixelBufferRef pixelBuffer = 0;
  }
  uint64_t v30 = _computesYCxCz2XYZ(v285, v285);
  if (v30) {
    goto LABEL_248;
  }
  uint64_t v30 = _computesYCxCz2XYZ(v284, v284);
  if (v30) {
    goto LABEL_248;
  }
  uint64_t v30 = _computesXYZ2LinearRGB(v285, v285);
  if (v30) {
    goto LABEL_248;
  }
  uint64_t v30 = _computesXYZ2LinearRGB(v284, v284);
  if (v30) {
    goto LABEL_248;
  }
  uint64_t v30 = _computesClamp(v285, v285);
  if (v30) {
    goto LABEL_248;
  }
  uint64_t v30 = _computesClamp(v284, v284);
  if (v30) {
    goto LABEL_248;
  }
  uint64_t v30 = _computesLinearRGB2XYZ(v285, v285);
  if (v30) {
    goto LABEL_248;
  }
  uint64_t v30 = _computesLinearRGB2XYZ(v284, v284);
  if (v30) {
    goto LABEL_248;
  }
  uint64_t v30 = _computesXYZ2CIELab(v285, v285);
  if (v30) {
    goto LABEL_248;
  }
  uint64_t v30 = _computesXYZ2CIELab(v284, v284);
  if (v30) {
    goto LABEL_248;
  }
  uint64_t v30 = _computesHunt(v285, v285);
  if (v30) {
    goto LABEL_248;
  }
  uint64_t v30 = _computesHunt(v284, v284);
  if (v30) {
    goto LABEL_248;
  }
  uint64_t v30 = CVPixelBufferCreate(v18, v269, v270, 0x72673366u, Mutable, &v277);
  if (v30) {
    goto LABEL_248;
  }
  __int16 v82 = v284;
  uint64_t v81 = v285;
  int v83 = v277;
  if (CVPixelBufferGetPixelFormatType(v285) == 1919365990
    && CVPixelBufferGetPixelFormatType(v82) == 1919365990
    && CVPixelBufferGetPixelFormatType(v83) == 1919365990)
  {
    CVPixelBufferLockBaseAddress(v81, 0);
    CVPixelBufferLockBaseAddress(v82, 0);
    CVPixelBufferLockBaseAddress(v83, 0);
    uint64_t v290 = 0;
    uint16x8_t v291 = 0;
    CMPhotoGetPixelBufferCLAP(v81, 0, 0, &v290, &v291);
    int v84 = CVPixelBufferGetBytesPerRowOfPlane(v81, 0);
    CVPixelBufferRef v263 = (CVPixelBufferRef)CVPixelBufferGetBaseAddressOfPlane(v81, 0);
    uint64_t v85 = (float *)CVPixelBufferGetBaseAddressOfPlane(v81, 1uLL);
    uint8x8_t v235 = v81;
    uint64_t v86 = (float *)CVPixelBufferGetBaseAddressOfPlane(v81, 2uLL);
    int v87 = CVPixelBufferGetBytesPerRowOfPlane(v82, 0);
    uint64_t v88 = (float *)CVPixelBufferGetBaseAddressOfPlane(v82, 0);
    uint64_t v89 = (float *)CVPixelBufferGetBaseAddressOfPlane(v82, 1uLL);
    int16x8_t v233 = v82;
    uint64_t v90 = (float *)CVPixelBufferGetBaseAddressOfPlane(v82, 2uLL);
    int v256 = CVPixelBufferGetBytesPerRowOfPlane(v83, 0);
    uint64_t v91 = (float *)CVPixelBufferGetBaseAddressOfPlane(v83, 0);
    uint64_t v92 = (float *)CVPixelBufferGetBaseAddressOfPlane(v83, 1uLL);
    int16x8_t v238 = v83;
    uint64_t v93 = (float *)CVPixelBufferGetBaseAddressOfPlane(v83, 2uLL);
    float v295 = 0.0;
    uint64_t v294 = 0;
    float v293 = 0.0;
    uint64_t v292 = 0;
    uint64_t v298 = 0x3F37163B3EB7163BLL;
    int v299 = 1039408548;
    uint64_t v296 = 0x3D93D3363E38C803;
    int v297 = 1064520606;
    XYZ2CIELab((float *)&v298, (float *)&v294);
    XYZ2CIELab((float *)&v296, (float *)&v292);
    float v94 = powf(vabds_f32(*(float *)&v294, *(float *)&v292)+ sqrtf((float)((float)((float)((float)(*(float *)&v294 * 0.01) * v295)- (float)((float)(*(float *)&v292 * 0.01) * v293))* (float)((float)((float)(*(float *)&v294 * 0.01) * v295)- (float)((float)(*(float *)&v292 * 0.01) * v293)))+ (float)((float)((float)((float)(*(float *)&v294 * 0.01) * *((float *)&v294 + 1))- (float)((float)(*(float *)&v292 * 0.01) * *((float *)&v292 + 1)))* (float)((float)((float)(*(float *)&v294 * 0.01) * *((float *)&v294 + 1))- (float)((float)(*(float *)&v292 * 0.01) * *((float *)&v292 + 1))))), 0.7);
    CVPixelBufferRef v252 = v291;
    if (v291)
    {
      uint64_t v95 = 0;
      float v96 = v94 * 0.4;
      int v97 = v84 + 3;
      if (v84 >= 0) {
        int v97 = v84;
      }
      uint64_t v98 = v290;
      float v99 = v94 - v96;
      CVPixelBufferRef v244 = (CVPixelBufferRef)(4 * (v87 / 4));
      CVPixelBufferRef v248 = (CVPixelBufferRef)(4 * (v256 / 4));
      uint64_t v241 = 4 * (v97 >> 2);
      do
      {
        CVPixelBufferRef v257 = v95;
        if (v98)
        {
          for (uint64_t j = 0; j != v98; ++j)
          {
            float v101 = powf(vabds_f32(*((float *)v263 + j), v88[j])+ sqrtf((float)((float)(v86[j] - v90[j]) * (float)(v86[j] - v90[j]))+ (float)((float)(v85[j] - v89[j]) * (float)(v85[j] - v89[j]))), 0.7);
            if (v101 >= v96) {
              float v102 = (float)((float)((float)(v101 - v96) / v99) * 0.05) + 0.95;
            }
            else {
              float v102 = (float)(0.95 / v96) * v101;
            }
            v91[j] = v102;
            v92[j] = v102;
            v93[j] = v102;
          }
        }
        uint64_t v95 = (CVPixelBufferRef)((char *)v257 + 1);
        uint64_t v93 = (float *)((char *)v248 + (void)v93);
        uint64_t v92 = (float *)((char *)v248 + (void)v92);
        uint64_t v91 = (float *)((char *)v248 + (void)v91);
        uint64_t v90 = (float *)((char *)v244 + (void)v90);
        uint64_t v89 = (float *)((char *)v244 + (void)v89);
        uint64_t v88 = (float *)((char *)v244 + (void)v88);
        uint64_t v86 = (float *)((char *)v86 + v241);
        uint64_t v85 = (float *)((char *)v85 + v241);
        CVPixelBufferRef v263 = (CVPixelBufferRef)((char *)v263 + v241);
      }
      while ((CVPixelBufferRef)((char *)v257 + 1) != v252);
    }
    CVPixelBufferUnlockBaseAddress(v233, 0);
    CVPixelBufferUnlockBaseAddress(v235, 0);
    CVPixelBufferUnlockBaseAddress(v238, 0);
    CFMutableDictionaryRef Mutable = pixelBufferAttributes;
    double v36 = v222;
    CGFloat v37 = v225;
    CFAllocatorRef v18 = allocator;
  }
  else
  {
    uint64_t v30 = FigSignalErrorAt();
    if (v30) {
      goto LABEL_248;
    }
  }
  size_t v103 = (int)((2 * vcvtps_s32_f32((float)(v41 * 0.041) * 3.0)) | 1);
  uint64_t v30 = CVPixelBufferCreate(v18, v103, v103, 0x72673366u, Mutable, &v273);
  if (v30) {
    goto LABEL_248;
  }
  uint64_t v30 = CVPixelBufferCreate(v18, v103, v103, 0x72673366u, Mutable, &v272);
  if (v30) {
    goto LABEL_248;
  }
  setFeatureFilter(v273, 1, v41);
  setFeatureFilter(v272, 0, v41);
  uint64_t v30 = CVPixelBufferCreate(v18, v269, v270, 0x72673366u, Mutable, &v283);
  if (v30) {
    goto LABEL_248;
  }
  uint64_t v30 = CVPixelBufferCreate(v18, v269, v270, 0x72673366u, Mutable, &v282);
  if (v30) {
    goto LABEL_248;
  }
  uint64_t v30 = _computesCIELab2Gray(pixelBufferOut, v283);
  if (v30) {
    goto LABEL_248;
  }
  uint64_t v30 = _computesCIELab2Gray(v286, v282);
  if (v30) {
    goto LABEL_248;
  }
  uint64_t v30 = CVPixelBufferCreate(v18, v269, v270, 0x72673366u, Mutable, &v281);
  if (v30) {
    goto LABEL_248;
  }
  uint64_t v30 = CVPixelBufferCreate(v18, v269, v270, 0x72673366u, Mutable, &v279);
  if (v30) {
    goto LABEL_248;
  }
  uint64_t v30 = CVPixelBufferCreate(v18, v269, v270, 0x72673366u, Mutable, &v280);
  if (v30) {
    goto LABEL_248;
  }
  uint64_t v30 = CVPixelBufferCreate(v18, v269, v270, 0x72673366u, Mutable, &v278);
  if (v30) {
    goto LABEL_248;
  }
  uint64_t v30 = convolve(v283, v281, v273);
  if (v30) {
    goto LABEL_248;
  }
  uint64_t v30 = convolve(v282, v280, v273);
  if (v30) {
    goto LABEL_248;
  }
  uint64_t v30 = convolve(v283, v279, v272);
  if (v30) {
    goto LABEL_248;
  }
  uint64_t v30 = convolve(v282, v278, v272);
  if (v30) {
    goto LABEL_248;
  }
  if (v273)
  {
    CFRelease(v273);
    CVPixelBufferRef v273 = 0;
  }
  if (v272)
  {
    CFRelease(v272);
    CVPixelBufferRef v272 = 0;
  }
  uint64_t v30 = CVPixelBufferCreate(v18, v269, v270, 0x72673366u, Mutable, &v276);
  if (v30) {
    goto LABEL_248;
  }
  uint64_t v105 = v280;
  int v104 = v281;
  uint64_t v107 = v278;
  uint64_t v106 = v279;
  double v108 = v276;
  if (CVPixelBufferGetPixelFormatType(v281) == 1919365990
    && CVPixelBufferGetPixelFormatType(v105) == 1919365990
    && CVPixelBufferGetPixelFormatType(v106) == 1919365990
    && CVPixelBufferGetPixelFormatType(v107) == 1919365990
    && CVPixelBufferGetPixelFormatType(v108) == 1919365990)
  {
    uint64_t v290 = 0;
    uint16x8_t v291 = 0;
    CMPhotoGetPixelBufferCLAP(v104, 0, 0, &v290, &v291);
    CVPixelBufferLockBaseAddress(v104, 0);
    CVPixelBufferLockBaseAddress(v105, 0);
    CVPixelBufferLockBaseAddress(v106, 0);
    CVPixelBufferLockBaseAddress(v107, 0);
    CVPixelBufferLockBaseAddress(v108, 0);
    int v242 = CVPixelBufferGetBytesPerRowOfPlane(v104, 0);
    uint64_t v109 = (float *)CVPixelBufferGetBaseAddressOfPlane(v104, 0);
    uint64_t v110 = (float *)CVPixelBufferGetBaseAddressOfPlane(v104, 1uLL);
    int16x8_t v258 = v104;
    CVPixelBufferGetBaseAddressOfPlane(v104, 2uLL);
    uint64_t v111 = (float *)CVPixelBufferGetBaseAddressOfPlane(v106, 0);
    uint64_t v112 = v108;
    uint64_t v113 = (float *)CVPixelBufferGetBaseAddressOfPlane(v106, 1uLL);
    int64x2_t v249 = v106;
    CVPixelBufferGetBaseAddressOfPlane(v106, 2uLL);
    int v239 = CVPixelBufferGetBytesPerRowOfPlane(v105, 0);
    double v114 = (float *)CVPixelBufferGetBaseAddressOfPlane(v105, 0);
    double v115 = (float *)CVPixelBufferGetBaseAddressOfPlane(v105, 1uLL);
    int32x4_t v253 = v105;
    CVPixelBufferGetBaseAddressOfPlane(v105, 2uLL);
    uint64_t v116 = (float *)CVPixelBufferGetBaseAddressOfPlane(v107, 0);
    uint64_t v117 = (float *)CVPixelBufferGetBaseAddressOfPlane(v107, 1uLL);
    uint16x8_t v245 = v107;
    CVPixelBufferGetBaseAddressOfPlane(v107, 2uLL);
    int v236 = CVPixelBufferGetBytesPerRowOfPlane(v112, 0);
    size_t v118 = v112;
    int16x8_t v264 = v112;
    uint64_t v119 = (float *)CVPixelBufferGetBaseAddressOfPlane(v112, 0);
    int v120 = (float *)CVPixelBufferGetBaseAddressOfPlane(v118, 1uLL);
    double v121 = (float *)CVPixelBufferGetBaseAddressOfPlane(v264, 2uLL);
    float v122 = v291;
    if (v291)
    {
      double v123 = 0;
      uint64_t v124 = v290;
      uint64_t v125 = 4 * (v236 / 4);
      uint64_t v126 = 4 * (v239 / 4);
      uint64_t v127 = 4 * (v242 / 4);
      do
      {
        if (v124)
        {
          for (uint64_t k = 0; k != v124; ++k)
          {
            float v129 = sqrtf((float)(v113[k] * v113[k]) + (float)(v111[k] * v111[k]));
            float v130 = sqrtf((float)(v117[k] * v117[k]) + (float)(v116[k] * v116[k]));
            float v131 = sqrtf((float)(v110[k] * v110[k]) + (float)(v109[k] * v109[k]))
                 - sqrtf((float)(v115[k] * v115[k]) + (float)(v114[k] * v114[k]));
            if (v131 < 0.0) {
              float v131 = -v131;
            }
            float v132 = v129 - v130;
            float v133 = -(float)(v129 - v130);
            if (v132 < 0.0) {
              float v132 = v133;
            }
            if (v131 <= v132) {
              float v131 = v132;
            }
            float v134 = v131 * 0.70711;
            float v135 = fabsf(sqrtf(v134));
            BOOL v136 = v134 == -INFINITY;
            float v137 = INFINITY;
            if (!v136) {
              float v137 = v135;
            }
            v119[k] = v137;
            v120[k] = v137;
            v121[k] = v137;
          }
        }
        double v123 = (__CVBuffer *)((char *)v123 + 1);
        double v121 = (float *)((char *)v121 + v125);
        int v120 = (float *)((char *)v120 + v125);
        uint64_t v119 = (float *)((char *)v119 + v125);
        uint64_t v117 = (float *)((char *)v117 + v126);
        uint64_t v116 = (float *)((char *)v116 + v126);
        double v115 = (float *)((char *)v115 + v126);
        double v114 = (float *)((char *)v114 + v126);
        uint64_t v113 = (float *)((char *)v113 + v127);
        uint64_t v111 = (float *)((char *)v111 + v127);
        uint64_t v110 = (float *)((char *)v110 + v127);
        uint64_t v109 = (float *)((char *)v109 + v127);
      }
      while (v123 != v122);
    }
    CVPixelBufferUnlockBaseAddress(v245, 0);
    CVPixelBufferUnlockBaseAddress(v249, 0);
    CVPixelBufferUnlockBaseAddress(v253, 0);
    CVPixelBufferUnlockBaseAddress(v258, 0);
    CVPixelBufferUnlockBaseAddress(v264, 0);
    CFMutableDictionaryRef Mutable = pixelBufferAttributes;
    CFAllocatorRef v18 = allocator;
  }
  else
  {
    uint64_t v30 = FigSignalErrorAt();
    if (v30) {
      goto LABEL_248;
    }
  }
  uint64_t v30 = CVPixelBufferCreate(v18, v269, v270, 0x72673366u, Mutable, &v275);
  if (v30)
  {
LABEL_248:
    uint64_t v186 = v30;
    goto LABEL_195;
  }
  uint64_t v139 = v276;
  uint64_t v138 = v277;
  uint64_t v140 = v275;
  if (CVPixelBufferGetPixelFormatType(v277) != 1919365990
    || CVPixelBufferGetPixelFormatType(v139) != 1919365990
    || CVPixelBufferGetPixelFormatType(v140) != 1919365990)
  {
    uint64_t v30 = FigSignalErrorAt();
    if (!v30) {
      goto LABEL_125;
    }
    goto LABEL_248;
  }
  uint64_t v290 = 0;
  uint16x8_t v291 = 0;
  CMPhotoGetPixelBufferCLAP(v138, 0, 0, &v290, &v291);
  CVPixelBufferLockBaseAddress(v138, 0);
  CVPixelBufferLockBaseAddress(v139, 0);
  CVPixelBufferLockBaseAddress(v140, 0);
  int v265 = CVPixelBufferGetBytesPerRowOfPlane(v138, 0);
  uint64_t v141 = (float *)CVPixelBufferGetBaseAddressOfPlane(v138, 0);
  double v142 = (float *)CVPixelBufferGetBaseAddressOfPlane(v138, 1uLL);
  int64x2_t v237 = v138;
  double v143 = (float *)CVPixelBufferGetBaseAddressOfPlane(v138, 2uLL);
  int v259 = CVPixelBufferGetBytesPerRowOfPlane(v139, 0);
  long double v144 = (float *)CVPixelBufferGetBaseAddressOfPlane(v139, 0);
  double v145 = (float *)CVPixelBufferGetBaseAddressOfPlane(v139, 1uLL);
  uint8x8_t v234 = v139;
  uint64_t v146 = (float *)CVPixelBufferGetBaseAddressOfPlane(v139, 2uLL);
  int v147 = CVPixelBufferGetBytesPerRowOfPlane(v140, 0);
  uint64_t v148 = (float *)CVPixelBufferGetBaseAddressOfPlane(v140, 0);
  uint64_t v149 = (__CVBuffer *)CVPixelBufferGetBaseAddressOfPlane(v140, 1uLL);
  uint16x8_t v240 = v140;
  uint64_t v150 = (float *)CVPixelBufferGetBaseAddressOfPlane(v140, 2uLL);
  CVPixelBufferRef v254 = v291;
  if (v291)
  {
    uint64_t v151 = 0;
    int v152 = v147 / 4;
    uint64_t v153 = v290;
    CVPixelBufferRef v246 = (CVPixelBufferRef)(4 * (v259 / 4));
    CVPixelBufferRef v250 = (CVPixelBufferRef)(4 * v152);
    uint64_t v243 = 4 * (v265 / 4);
    do
    {
      CVPixelBufferRef v260 = v151;
      if (v153)
      {
        uint64_t v154 = 0;
        CVPixelBufferRef v266 = v149;
        do
        {
          float v155 = v141[v154];
          float v156 = v142[v154];
          float v157 = v143[v154];
          float v158 = v145[v154];
          float v159 = v146[v154];
          float v160 = 1.0 - v144[v154];
          uint64_t v161 = v148;
          double v162 = v146;
          uint64_t v163 = v145;
          int v164 = v144;
          int v165 = v143;
          int v166 = v142;
          uint64_t v167 = v141;
          uint64_t v168 = v150;
          float v169 = powf(v155, v160);
          float v170 = powf(v156, 1.0 - v158);
          float v171 = powf(v157, 1.0 - v159);
          uint64_t v150 = v168;
          uint64_t v141 = v167;
          double v142 = v166;
          double v143 = v165;
          long double v144 = v164;
          double v145 = v163;
          uint64_t v146 = v162;
          uint64_t v148 = v161;
          uint64_t v149 = v266;
          v148[v154] = v169;
          *((float *)v266 + v154) = v170;
          v150[v154++] = v171;
        }
        while (v153 != v154);
      }
      uint64_t v151 = (CVPixelBufferRef)((char *)v260 + 1);
      uint64_t v150 = (float *)((char *)v250 + (void)v150);
      uint64_t v149 = (CVPixelBufferRef)((char *)v250 + (void)v149);
      uint64_t v148 = (float *)((char *)v250 + (void)v148);
      uint64_t v146 = (float *)((char *)v246 + (void)v146);
      double v145 = (float *)((char *)v246 + (void)v145);
      long double v144 = (float *)((char *)v246 + (void)v144);
      double v143 = (float *)((char *)v143 + v243);
      double v142 = (float *)((char *)v142 + v243);
      uint64_t v141 = (float *)((char *)v141 + v243);
    }
    while ((CVPixelBufferRef)((char *)v260 + 1) != v254);
  }
  CVPixelBufferUnlockBaseAddress(v234, 0);
  CVPixelBufferUnlockBaseAddress(v237, 0);
  CVPixelBufferUnlockBaseAddress(v240, 0);
  CFMutableDictionaryRef Mutable = pixelBufferAttributes;
  CGFloat v37 = v225;
LABEL_125:
  if (v276)
  {
    CFRelease(v276);
    CVPixelBufferRef v276 = 0;
  }
  uint64_t v174 = (const void *)v227;
  if (a5 || v227)
  {
    uint64_t v178 = v275;
    if (v275)
    {
      if (!a5 && !v227) {
        goto LABEL_252;
      }
      if (v227 && (v227 == 1 || !a7))
      {
        uint64_t v186 = FigSignalErrorAt();
        uint64_t v174 = 0;
        int v182 = 0;
        uint64_t v183 = 0;
        uint64_t v184 = 0;
        goto LABEL_182;
      }
      if (CVPixelBufferGetPixelFormatType(v275) == 1919365990)
      {
        double PixelBufferSize = CMPhotoGetPixelBufferSize(v178);
        double v181 = v180;
        if (v227)
        {
          int v182 = (float *)malloc_type_calloc(v227, 4uLL, 0x100004052888210uLL);
          if (!v182)
          {
            uint64_t v174 = 0;
            uint64_t v183 = 0;
            uint64_t v184 = 0;
LABEL_144:
            uint64_t v186 = 4294950305;
            goto LABEL_182;
          }
        }
        else
        {
          int v182 = 0;
        }
        size_t v185 = (unint64_t)(PixelBufferSize * v181 * 3.0);
        if (a5)
        {
          uint64_t v184 = malloc_type_malloc(4 * v185, 0x100004052888210uLL);
          if (!v184)
          {
            uint64_t v174 = 0;
            uint64_t v183 = 0;
            goto LABEL_144;
          }
        }
        else
        {
          uint64_t v184 = 0;
        }
        uint64_t v187 = CVPixelBufferLockBaseAddress(v178, 1uLL);
        if (v187)
        {
          uint64_t v186 = v187;
          uint64_t v174 = 0;
          uint64_t v183 = 0;
        }
        else
        {
          size_t v188 = 0;
          uint64_t v189 = 0;
          uint64_t v186 = v227;
          float v190 = 1.0 / (float)v227;
          double v191 = 0.0;
          do
          {
            int v192 = (float *)CVPixelBufferGetBaseAddressOfPlane(v178, v188);
            size_t v193 = CVPixelBufferGetBytesPerRowOfPlane(v178, v188);
            if (v181 > 0.0)
            {
              uint64_t v194 = 0;
              do
              {
                if (PixelBufferSize > 0.0)
                {
                  uint64_t v195 = 0;
                  do
                  {
                    float v196 = v192[v195];
                    if (v184) {
                      *(float *)&v184[v189++] = v196;
                    }
                    if (v182)
                    {
                      LODWORD(v197) = (int)(float)(fminf(fmaxf(v196, 0.0), 1.0) / v190);
                      if (v227 - 1 >= (int)v197) {
                        unint64_t v197 = (int)v197;
                      }
                      else {
                        unint64_t v197 = v227 - 1;
                      }
                      v182[v197] = v182[v197] + 1.0;
                    }
                    double v191 = v191 + v196;
                    ++v195;
                  }
                  while (PixelBufferSize > (double)(int)v195);
                }
                ++v194;
                int v192 = (float *)((char *)v192 + v193);
              }
              while (v181 > (double)(int)v194);
            }
            ++v188;
          }
          while (v188 != 3);
          double v36 = v222;
          CGFloat v37 = v225;
          if (a5)
          {
            qsort_b(v184, v185, 4uLL, &__block_literal_global);
            int v198 = 0;
            *a5 = *v184;
            a5[4] = v184[v185 - 1];
            double v199 = 0.0;
            for (uint64_t m = 1; m != 4; ++m)
            {
              if (v185 > v198)
              {
                size_t v201 = v185 - v198;
                int v202 = (float *)&v184[v198];
                while (1)
                {
                  double v199 = v199 + *v202;
                  if (v199 > v191 * ((double)(int)m * 0.25)) {
                    break;
                  }
                  ++v198;
                  ++v202;
                  if (!--v201)
                  {
                    int v198 = (unint64_t)(PixelBufferSize * v181 * 3.0);
                    goto LABEL_170;
                  }
                }
                a5[m] = *(_DWORD *)v202;
              }
LABEL_170:
              ;
            }
          }
          if (v182)
          {
            uint64_t v183 = CFArrayCreateMutable(0, v227, MEMORY[0x1E4F1D510]);
            if (v183)
            {
              if (v227)
              {
                uint64_t v203 = 0;
                float v204 = PixelBufferSize * v181 * 0.000000953674316;
                double v205 = v190;
                double v206 = v204;
                while (1)
                {
                  uint64_t appended = CMPhotoCFArrayAppendDouble(v183, ((double)(int)v203 + 0.5) * v205 * v182[v203] / v206);
                  if (appended) {
                    break;
                  }
                  if (v227 == ++v203)
                  {
                    uint64_t v186 = 0;
                    goto LABEL_178;
                  }
                }
                uint64_t v186 = appended;
                uint64_t v174 = 0;
              }
              else
              {
LABEL_178:
                uint64_t v174 = v183;
                uint64_t v183 = 0;
              }
            }
            else
            {
              uint64_t v174 = 0;
              uint64_t v186 = 4294950305;
            }
          }
          else
          {
            uint64_t v174 = 0;
            uint64_t v183 = 0;
            uint64_t v186 = 0;
          }
          CVPixelBufferUnlockBaseAddress(v178, 1uLL);
        }
LABEL_182:
        free(v184);
        free(v182);
        if (v183) {
          CFRelease(v183);
        }
        CGFloat v176 = v220;
        CGFloat v175 = v221;
        CGFloat v177 = v219;
        if (v186) {
          goto LABEL_193;
        }
        goto LABEL_185;
      }
    }
    uint64_t v174 = 0;
LABEL_252:
    int v182 = 0;
    uint64_t v183 = 0;
    uint64_t v184 = 0;
    uint64_t v186 = 4294950306;
    goto LABEL_182;
  }
  CGFloat v176 = v220;
  CGFloat v175 = v221;
  CGFloat v177 = v219;
LABEL_185:
  if (!v216 || (v208 = CMPhotoApplyMagmaMap(v275, v275), v177 = v219, v176 = v220, CGFloat v175 = v221, !v208))
  {
    uint64_t v208 = CMPhotoScaleAndRotateSessionTransformForSize(0, v275, 1, 1, 1111970369, 0, 0, 1u, v37, v175, v176, v177, v35, v36, v172, v173, 0, 1u, (__CVBuffer **)&cf);
    if (!v208)
    {
      if (v215)
      {
        *uint16x8_t v215 = cf;
        CFTypeRef cf = 0;
      }
      if (a7)
      {
        uint64_t v186 = 0;
        *a7 = v174;
        goto LABEL_195;
      }
      uint64_t v186 = 0;
LABEL_193:
      if (!v174) {
        goto LABEL_195;
      }
      goto LABEL_194;
    }
  }
  uint64_t v186 = v208;
  if (v174) {
LABEL_194:
  }
    CFRelease(v174);
LABEL_195:
  if (cf) {
    CFRelease(cf);
  }
  if (v275) {
    CFRelease(v275);
  }
  if (v276) {
    CFRelease(v276);
  }
  if (v277) {
    CFRelease(v277);
  }
  if (pixelBuffer) {
    CFRelease(pixelBuffer);
  }
  if (v273) {
    CFRelease(v273);
  }
  if (v272) {
    CFRelease(v272);
  }
  if (v281) {
    CFRelease(v281);
  }
  if (v280) {
    CFRelease(v280);
  }
  if (v279) {
    CFRelease(v279);
  }
  if (v278) {
    CFRelease(v278);
  }
  if (v283) {
    CFRelease(v283);
  }
  if (v282) {
    CFRelease(v282);
  }
  if (v285) {
    CFRelease(v285);
  }
  if (v284) {
    CFRelease(v284);
  }
  if (pixelBufferOut) {
    CFRelease(pixelBufferOut);
  }
  if (v286) {
    CFRelease(v286);
  }
  if (v289) {
    CFRelease(v289);
  }
  if (v288) {
    CFRelease(v288);
  }
  if (v217) {
    CFRelease(v217);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v186;
}

uint64_t _computesRGB2LinearRGB(__CVBuffer *a1, __CVBuffer *a2)
{
  if (CVPixelBufferGetPixelFormatType(a1) == 1919365990 && CVPixelBufferGetPixelFormatType(a2) == 1919365990)
  {
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    CMPhotoGetPixelBufferCLAP(a1, 0, 0, &v25, &v26);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    CMPhotoGetPixelBufferCLAP(a2, 0, 0, &v23, &v24);
    if (v25 == v23 && v26 == v24)
    {
      CVPixelBufferLockBaseAddress(a1, 0);
      CVPixelBufferLockBaseAddress(a2, 0);
      size_t v3 = 0;
      int v20 = a2;
      do
      {
        size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, v3);
        BaseAddressOfPlane = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, v3);
        size_t v6 = CVPixelBufferGetBytesPerRowOfPlane(a2, v3);
        size_t v22 = v3;
        CFNumberRef v7 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, v3);
        uint64_t v8 = v26;
        if (v26)
        {
          CFNumberRef v9 = v7;
          uint64_t v10 = 0;
          uint64_t v11 = v25;
          uint64_t v12 = 4 * (v6 >> 2);
          uint64_t v13 = 4 * (BytesPerRowOfPlane >> 2);
          do
          {
            CFAllocatorRef v14 = BaseAddressOfPlane;
            unsigned int v15 = v9;
            for (uint64_t i = v11; i; --i)
            {
              float v17 = *v14;
              if (*v14 <= 0.04045) {
                float v18 = v17 / 12.92;
              }
              else {
                float v18 = powf((float)(v17 + 0.055) / 1.055, 2.4);
              }
              *v15++ = v18;
              ++v14;
            }
            ++v10;
            CFNumberRef v9 = (float *)((char *)v9 + v12);
            BaseAddressOfPlane = (float *)((char *)BaseAddressOfPlane + v13);
          }
          while (v10 != v8);
        }
        size_t v3 = v22 + 1;
        a2 = v20;
      }
      while (v22 != 2);
      CVPixelBufferUnlockBaseAddress(a1, 0);
      CVPixelBufferUnlockBaseAddress(v20, 0);
      return 0;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t _computesLinearRGB2XYZ(__CVBuffer *a1, __CVBuffer *a2)
{
  if (CVPixelBufferGetPixelFormatType(a1) == 1919365990 && CVPixelBufferGetPixelFormatType(a2) == 1919365990)
  {
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    CMPhotoGetPixelBufferCLAP(a1, 0, 0, &v30, &v31);
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    CMPhotoGetPixelBufferCLAP(a2, 0, 0, &v28, &v29);
    if (v30 == v28 && v31 == v29)
    {
      CVPixelBufferLockBaseAddress(a1, 0);
      CVPixelBufferLockBaseAddress(a2, 0);
      size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
      BaseAddressOfPlane = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
      size_t v6 = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
      CFNumberRef v7 = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 2uLL);
      size_t v8 = CVPixelBufferGetBytesPerRowOfPlane(a2, 0);
      CFNumberRef v9 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 0);
      uint64_t v10 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 1uLL);
      uint64_t v11 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 2uLL);
      uint64_t v12 = v31;
      if (v31)
      {
        uint64_t v13 = 0;
        uint64_t v14 = v30;
        do
        {
          unsigned int v15 = BaseAddressOfPlane;
          unsigned int v16 = v6;
          float v17 = v7;
          float v18 = v9;
          unsigned int v19 = v10;
          int v20 = v11;
          for (uint64_t i = v14; i; --i)
          {
            float v22 = *v15++;
            float v23 = v22;
            float v24 = *v16++;
            float v25 = v24;
            float v26 = *v17++;
            *v18++ = (float)((float)(v25 * 0.35759) + (float)(v23 * 0.41239)) + (float)(v26 * 0.18045);
            *v19++ = (float)((float)(v25 * 0.71518) + (float)(v23 * 0.21264)) + (float)(v26 * 0.07218);
            *v20++ = (float)((float)(v25 * 0.1192) + (float)(v23 * 0.019331)) + (float)(v26 * 0.95037);
          }
          ++v13;
          uint64_t v11 = (float *)((char *)v11 + v8);
          uint64_t v10 = (float *)((char *)v10 + v8);
          CFNumberRef v9 = (float *)((char *)v9 + v8);
          CFNumberRef v7 = (float *)((char *)v7 + BytesPerRowOfPlane);
          size_t v6 = (float *)((char *)v6 + BytesPerRowOfPlane);
          BaseAddressOfPlane = (float *)((char *)BaseAddressOfPlane + BytesPerRowOfPlane);
        }
        while (v13 != v12);
      }
      CVPixelBufferUnlockBaseAddress(a1, 0);
      CVPixelBufferUnlockBaseAddress(a2, 0);
      return 0;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t _computesXYZ2YCxCz(__CVBuffer *a1, __CVBuffer *a2)
{
  if (CVPixelBufferGetPixelFormatType(a1) == 1919365990 && CVPixelBufferGetPixelFormatType(a2) == 1919365990)
  {
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    CMPhotoGetPixelBufferCLAP(a1, 0, 0, &v30, &v31);
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    CMPhotoGetPixelBufferCLAP(a2, 0, 0, &v28, &v29);
    if (v30 == v28 && v31 == v29)
    {
      CVPixelBufferLockBaseAddress(a1, 0);
      CVPixelBufferLockBaseAddress(a2, 0);
      size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
      BaseAddressOfPlane = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
      size_t v6 = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
      CFNumberRef v7 = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 2uLL);
      size_t v8 = CVPixelBufferGetBytesPerRowOfPlane(a2, 0);
      CFNumberRef v9 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 0);
      uint64_t v10 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 1uLL);
      uint64_t v11 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 2uLL);
      uint64_t v12 = v31;
      if (v31)
      {
        uint64_t v13 = 0;
        uint64_t v14 = v30;
        do
        {
          unsigned int v15 = BaseAddressOfPlane;
          unsigned int v16 = v6;
          float v17 = v7;
          float v18 = v9;
          unsigned int v19 = v10;
          int v20 = v11;
          for (uint64_t i = v14; i; --i)
          {
            float v22 = *v15++;
            float v23 = v22;
            float v24 = *v16++;
            float v25 = v24;
            float v26 = *v17++;
            *v18++ = (float)(v25 * 116.0) + -16.0;
            *v19++ = (float)((float)(v23 * 1.0522) - v25) * 500.0;
            *v20++ = (float)(v25 + (float)(v26 * -0.91836)) * 200.0;
          }
          ++v13;
          uint64_t v11 = (float *)((char *)v11 + v8);
          uint64_t v10 = (float *)((char *)v10 + v8);
          CFNumberRef v9 = (float *)((char *)v9 + v8);
          CFNumberRef v7 = (float *)((char *)v7 + BytesPerRowOfPlane);
          size_t v6 = (float *)((char *)v6 + BytesPerRowOfPlane);
          BaseAddressOfPlane = (float *)((char *)BaseAddressOfPlane + BytesPerRowOfPlane);
        }
        while (v13 != v12);
      }
      CVPixelBufferUnlockBaseAddress(a1, 0);
      CVPixelBufferUnlockBaseAddress(a2, 0);
      return 0;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t convolve(__CVBuffer *a1, __CVBuffer *a2, __CVBuffer *a3)
{
  if (CVPixelBufferGetPixelFormatType(a1) == 1919365990
    && CVPixelBufferGetPixelFormatType(a3) == 1919365990
    && CVPixelBufferGetPixelFormatType(a2) == 1919365990)
  {
    CVPixelBufferLockBaseAddress(a1, 0);
    CVPixelBufferLockBaseAddress(a2, 0);
    CVPixelBufferLockBaseAddress(a3, 0);
    uint64_t v68 = 0;
    uint64_t v69 = 0;
    CMPhotoGetPixelBufferCLAP(a1, 0, 0, &v68, &v69);
    uint64_t v66 = 0;
    uint64_t v67 = 0;
    CMPhotoGetPixelBufferCLAP(a3, 0, 0, &v66, &v67);
    size_t v6 = a3;
    int v7 = v66;
    int v8 = v67;
    if ((int)v66 >= 0) {
      int v9 = v66;
    }
    else {
      int v9 = v66 + 1;
    }
    int v64 = v9;
    if ((int)v67 >= 0) {
      int v10 = v67;
    }
    else {
      int v10 = v67 + 1;
    }
    int v61 = v10;
    int BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
    int v12 = BytesPerRowOfPlane + 3;
    if (BytesPerRowOfPlane >= 0) {
      int v12 = BytesPerRowOfPlane;
    }
    int v59 = v12;
    BaseAddressOfPlane = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
    uint64_t v14 = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
    float v57 = a1;
    unsigned int v15 = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 2uLL);
    int v55 = CVPixelBufferGetBytesPerRowOfPlane(a2, 0);
    unsigned int v16 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 0);
    float v17 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 1uLL);
    uint64_t v56 = a2;
    float v18 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 2uLL);
    unsigned int v19 = v6;
    CVPixelBufferRef pixelBuffer = v6;
    int v20 = CVPixelBufferGetBytesPerRowOfPlane(v6, 0);
    int v21 = v20 + 3;
    if (v20 >= 0) {
      int v21 = v20;
    }
    int v54 = v21;
    float v22 = (float *)CVPixelBufferGetBaseAddressOfPlane(v6, 0);
    float v23 = (float *)CVPixelBufferGetBaseAddressOfPlane(v19, 1uLL);
    float v24 = (float *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 2uLL);
    uint64_t v63 = v69;
    if (v69)
    {
      uint64_t v25 = 0;
      int v26 = v64 >> 1;
      int v27 = v61 >> 1;
      int v28 = v59 >> 2;
      if (v55 >= 0) {
        int v29 = v55;
      }
      else {
        int v29 = v55 + 3;
      }
      uint64_t v30 = v68;
      int v65 = -v27;
      int v31 = v69 - 1;
      int v62 = -v26;
      if (v26 >= 0) {
        int v32 = v26;
      }
      else {
        int v32 = -v26;
      }
      int v33 = v26 + v32;
      int v34 = v68 - 1;
      if (v27 >= 0) {
        int v35 = v27;
      }
      else {
        int v35 = -v27;
      }
      uint64_t v60 = (uint64_t)v29 >> 2;
      int v36 = v33 + 1;
      do
      {
        if (v30)
        {
          uint64_t v37 = 0;
          uint64_t v38 = v25 * v60;
          int v39 = v62;
          do
          {
            float v40 = 0.0;
            float v41 = 0.0;
            float v42 = 0.0;
            if (v8 >= -1)
            {
              int v43 = 0;
              int v44 = v65;
              do
              {
                if (v7 >= -1)
                {
                  int v45 = (v44 + v25) & ~((v44 + (int)v25) >> 31);
                  if (v45 >= v31) {
                    int v45 = v31;
                  }
                  int v46 = v45 * v28;
                  int v47 = v36;
                  int v48 = v43;
                  int v49 = v39;
                  do
                  {
                    int v50 = v49 & ~(v49 >> 31);
                    if (v50 >= v34) {
                      int v50 = v34;
                    }
                    int v51 = v50 + v46;
                    float v40 = v40 + (float)(v22[v48] * BaseAddressOfPlane[v51]);
                    float v41 = v41 + (float)(v23[v48] * v14[v51]);
                    float v42 = v42 + (float)(v24[v48] * v15[v51]);
                    ++v49;
                    ++v48;
                    --v47;
                  }
                  while (v47);
                }
                v43 += v54 >> 2;
              }
              while (v44++ != v35);
            }
            v16[v37 + v38] = v40;
            v17[v37 + v38] = v41;
            v18[v37 + v38] = v42;
            ++v37;
            ++v39;
          }
          while (v37 != v30);
        }
        ++v25;
      }
      while (v25 != v63);
    }
    CVPixelBufferUnlockBaseAddress(v56, 0);
    CVPixelBufferUnlockBaseAddress(v57, 0);
    CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t _computesYCxCz2XYZ(__CVBuffer *a1, __CVBuffer *a2)
{
  if (CVPixelBufferGetPixelFormatType(a1) == 1919365990 && CVPixelBufferGetPixelFormatType(a2) == 1919365990)
  {
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    CMPhotoGetPixelBufferCLAP(a1, 0, 0, &v27, &v28);
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    CMPhotoGetPixelBufferCLAP(a2, 0, 0, &v25, &v26);
    if (v27 == v25 && v28 == v26)
    {
      CVPixelBufferLockBaseAddress(a1, 0);
      CVPixelBufferLockBaseAddress(a2, 0);
      size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
      BaseAddressOfPlane = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
      size_t v6 = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
      CVPixelBufferGetBaseAddressOfPlane(a1, 2uLL);
      size_t v7 = CVPixelBufferGetBytesPerRowOfPlane(a2, 0);
      int v8 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 0);
      int v9 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 1uLL);
      int v10 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 2uLL);
      uint64_t v11 = v28;
      if (v28)
      {
        uint64_t v12 = 0;
        uint64_t v13 = v27;
        do
        {
          uint64_t v14 = BaseAddressOfPlane;
          unsigned int v15 = v6;
          unsigned int v16 = v8;
          float v17 = v9;
          float v18 = v10;
          for (uint64_t i = v13; i; --i)
          {
            float v20 = *v14++;
            float v21 = v20;
            float v22 = *v15++;
            float v23 = (float)(v21 + 16.0) / 116.0;
            *v16++ = (float)(v23 + (float)(v22 / 500.0)) * 0.95043;
            *v17++ = v23;
            *v18++ = (float)(v23 + (float)(v21 / -200.0)) * 1.0889;
          }
          ++v12;
          int v10 = (float *)((char *)v10 + v7);
          int v9 = (float *)((char *)v9 + v7);
          int v8 = (float *)((char *)v8 + v7);
          size_t v6 = (float *)((char *)v6 + BytesPerRowOfPlane);
          BaseAddressOfPlane = (float *)((char *)BaseAddressOfPlane + BytesPerRowOfPlane);
        }
        while (v12 != v11);
      }
      CVPixelBufferUnlockBaseAddress(a1, 0);
      CVPixelBufferUnlockBaseAddress(a2, 0);
      return 0;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t _computesXYZ2LinearRGB(__CVBuffer *a1, __CVBuffer *a2)
{
  if (CVPixelBufferGetPixelFormatType(a1) == 1919365990 && CVPixelBufferGetPixelFormatType(a2) == 1919365990)
  {
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    CMPhotoGetPixelBufferCLAP(a1, 0, 0, &v30, &v31);
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    CMPhotoGetPixelBufferCLAP(a2, 0, 0, &v28, &v29);
    if (v30 == v28 && v31 == v29)
    {
      CVPixelBufferLockBaseAddress(a1, 0);
      CVPixelBufferLockBaseAddress(a2, 0);
      size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
      BaseAddressOfPlane = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
      size_t v6 = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
      size_t v7 = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 2uLL);
      size_t v8 = CVPixelBufferGetBytesPerRowOfPlane(a2, 0);
      int v9 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 0);
      int v10 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 1uLL);
      uint64_t v11 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 2uLL);
      uint64_t v12 = v31;
      if (v31)
      {
        uint64_t v13 = 0;
        uint64_t v14 = v30;
        do
        {
          unsigned int v15 = BaseAddressOfPlane;
          unsigned int v16 = v6;
          float v17 = v7;
          float v18 = v9;
          unsigned int v19 = v10;
          float v20 = v11;
          for (uint64_t i = v14; i; --i)
          {
            float v22 = *v15++;
            float v23 = v22;
            float v24 = *v16++;
            float v25 = v24;
            float v26 = *v17++;
            *v18++ = (float)((float)(v25 * -1.5374) + (float)(v23 * 3.241)) + (float)(v26 * -0.49862);
            *v19++ = (float)((float)(v25 * 1.8759) + (float)(v23 * -0.96922)) + (float)(v26 * 0.041554);
            *v20++ = (float)((float)(v25 * -0.20401) + (float)(v23 * 0.055639)) + (float)(v26 * 1.0571);
          }
          ++v13;
          uint64_t v11 = (float *)((char *)v11 + v8);
          int v10 = (float *)((char *)v10 + v8);
          int v9 = (float *)((char *)v9 + v8);
          size_t v7 = (float *)((char *)v7 + BytesPerRowOfPlane);
          size_t v6 = (float *)((char *)v6 + BytesPerRowOfPlane);
          BaseAddressOfPlane = (float *)((char *)BaseAddressOfPlane + BytesPerRowOfPlane);
        }
        while (v13 != v12);
      }
      CVPixelBufferUnlockBaseAddress(a1, 0);
      CVPixelBufferUnlockBaseAddress(a2, 0);
      return 0;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t _computesClamp(__CVBuffer *a1, __CVBuffer *a2)
{
  if (CVPixelBufferGetPixelFormatType(a1) == 1919365990 && CVPixelBufferGetPixelFormatType(a2) == 1919365990)
  {
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    CMPhotoGetPixelBufferCLAP(a1, 0, 0, &v31, &v32);
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    CMPhotoGetPixelBufferCLAP(a2, 0, 0, &v29, &v30);
    if (v31 == v29 && v32 == v30)
    {
      CVPixelBufferLockBaseAddress(a1, 0);
      CVPixelBufferLockBaseAddress(a2, 0);
      size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
      BaseAddressOfPlane = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
      size_t v6 = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
      size_t v7 = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 2uLL);
      size_t v8 = CVPixelBufferGetBytesPerRowOfPlane(a2, 0);
      int v9 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 0);
      int v10 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 1uLL);
      uint64_t v11 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 2uLL);
      uint64_t v12 = v32;
      if (v32)
      {
        uint64_t v13 = 0;
        uint64_t v14 = v31;
        do
        {
          unsigned int v15 = BaseAddressOfPlane;
          unsigned int v16 = v9;
          float v17 = v6;
          float v18 = v10;
          unsigned int v19 = v7;
          float v20 = v11;
          for (uint64_t i = v14; i; --i)
          {
            float v22 = *v15++;
            float v23 = v22;
            if (v22 > 1.0) {
              float v23 = 1.0;
            }
            if (v23 < 0.0) {
              float v23 = 0.0;
            }
            *v16++ = v23;
            float v24 = *v17++;
            float v25 = v24;
            if (v24 > 1.0) {
              float v25 = 1.0;
            }
            if (v25 < 0.0) {
              float v25 = 0.0;
            }
            *v18++ = v25;
            float v26 = *v19++;
            float v27 = v26;
            if (v26 > 1.0) {
              float v27 = 1.0;
            }
            if (v27 < 0.0) {
              float v27 = 0.0;
            }
            *v20++ = v27;
          }
          ++v13;
          uint64_t v11 = (float *)((char *)v11 + v8);
          size_t v7 = (float *)((char *)v7 + BytesPerRowOfPlane);
          int v10 = (float *)((char *)v10 + v8);
          size_t v6 = (float *)((char *)v6 + BytesPerRowOfPlane);
          int v9 = (float *)((char *)v9 + v8);
          BaseAddressOfPlane = (float *)((char *)BaseAddressOfPlane + BytesPerRowOfPlane);
        }
        while (v13 != v12);
      }
      CVPixelBufferUnlockBaseAddress(a1, 0);
      CVPixelBufferUnlockBaseAddress(a2, 0);
      return 0;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t _computesXYZ2CIELab(__CVBuffer *a1, __CVBuffer *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (CVPixelBufferGetPixelFormatType(a1) == 1919365990 && CVPixelBufferGetPixelFormatType(a2) == 1919365990)
  {
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    CMPhotoGetPixelBufferCLAP(a1, 0, 0, &v33, &v34);
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    CMPhotoGetPixelBufferCLAP(a2, 0, 0, &v31, &v32);
    if (v33 == v31 && v34 == v32)
    {
      CVPixelBufferLockBaseAddress(a1, 0);
      CVPixelBufferLockBaseAddress(a2, 0);
      size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
      BaseAddressOfPlane = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
      int v5 = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
      CVPixelBufferRef pixelBuffer = a1;
      size_t v6 = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 2uLL);
      size_t v25 = CVPixelBufferGetBytesPerRowOfPlane(a2, 0);
      size_t v7 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 0);
      size_t v8 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 1uLL);
      float v22 = a2;
      int v9 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 2uLL);
      uint64_t v24 = v34;
      if (v34)
      {
        int v10 = v9;
        uint64_t v11 = 0;
        uint64_t v23 = v33;
        do
        {
          uint64_t v29 = v5;
          uint64_t v30 = BaseAddressOfPlane;
          float v27 = v7;
          uint64_t v28 = v6;
          uint64_t v12 = v8;
          uint64_t v13 = v10;
          for (uint64_t i = v23; i; --i)
          {
            float v15 = *BaseAddressOfPlane++;
            float v16 = v15;
            float v17 = *v5++;
            v36[0] = v16;
            v36[1] = v17;
            float v18 = *v6++;
            int v36[2] = v18;
            XYZ2CIELab(v36, v35);
            float v19 = v35[1];
            *v7++ = v35[0];
            *v12++ = v19;
            *v13++ = v35[2];
          }
          ++v11;
          int v10 = (float *)((char *)v10 + v25);
          size_t v8 = (float *)((char *)v8 + v25);
          size_t v7 = (float *)((char *)v27 + v25);
          size_t v6 = (float *)((char *)v28 + BytesPerRowOfPlane);
          int v5 = (float *)((char *)v29 + BytesPerRowOfPlane);
          BaseAddressOfPlane = (float *)((char *)v30 + BytesPerRowOfPlane);
        }
        while (v11 != v24);
      }
      CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
      CVPixelBufferUnlockBaseAddress(v22, 0);
      return 0;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t _computesHunt(__CVBuffer *a1, __CVBuffer *a2)
{
  if (CVPixelBufferGetPixelFormatType(a1) == 1919365990 && CVPixelBufferGetPixelFormatType(a2) == 1919365990)
  {
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    CMPhotoGetPixelBufferCLAP(a1, 0, 0, &v30, &v31);
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    CMPhotoGetPixelBufferCLAP(a2, 0, 0, &v28, &v29);
    if (v30 == v28 && v31 == v29)
    {
      CVPixelBufferLockBaseAddress(a1, 0);
      CVPixelBufferLockBaseAddress(a2, 0);
      size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
      BaseAddressOfPlane = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
      size_t v6 = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
      size_t v7 = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 2uLL);
      size_t v8 = CVPixelBufferGetBytesPerRowOfPlane(a2, 0);
      int v9 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 0);
      int v10 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 1uLL);
      uint64_t v11 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 2uLL);
      uint64_t v12 = v31;
      if (v31)
      {
        uint64_t v13 = 0;
        uint64_t v14 = v30;
        do
        {
          float v15 = BaseAddressOfPlane;
          float v16 = v6;
          float v17 = v7;
          float v18 = v9;
          float v19 = v10;
          float v20 = v11;
          for (uint64_t i = v14; i; --i)
          {
            float v22 = *v15++;
            float v23 = v22;
            float v24 = *v16++;
            float v25 = v24;
            float v26 = *v17++;
            *v18++ = v23;
            *v19++ = (float)(v23 * 0.01) * v25;
            *v20++ = (float)(v23 * 0.01) * v26;
          }
          ++v13;
          uint64_t v11 = (float *)((char *)v11 + v8);
          int v10 = (float *)((char *)v10 + v8);
          int v9 = (float *)((char *)v9 + v8);
          size_t v7 = (float *)((char *)v7 + BytesPerRowOfPlane);
          size_t v6 = (float *)((char *)v6 + BytesPerRowOfPlane);
          BaseAddressOfPlane = (float *)((char *)BaseAddressOfPlane + BytesPerRowOfPlane);
        }
        while (v13 != v12);
      }
      CVPixelBufferUnlockBaseAddress(a1, 0);
      CVPixelBufferUnlockBaseAddress(a2, 0);
      return 0;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t setFeatureFilter(__CVBuffer *a1, int a2, float a3)
{
  int v5 = a1;
  if (CVPixelBufferGetPixelFormatType(a1) == 1919365990)
  {
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    CMPhotoGetPixelBufferCLAP(v5, 0, 0, &v49, &v50);
    CVPixelBufferLockBaseAddress(v5, 0);
    size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v5, 0);
    BaseAddressOfPlane = (float *)CVPixelBufferGetBaseAddressOfPlane(v5, 0);
    size_t v8 = (float *)CVPixelBufferGetBaseAddressOfPlane(v5, 1uLL);
    int v9 = CVPixelBufferGetBaseAddressOfPlane(v5, 2uLL);
    if (v50)
    {
      int v10 = v9;
      float v42 = v5;
      uint64_t v11 = 0;
      float v12 = a3 * 0.041;
      uint64_t v13 = v49;
      float v47 = v12 * v12;
      float v48 = v12 * (float)(v12 + v12);
      unsigned int v43 = vcvtps_s32_f32((float)(a3 * 0.041) * 3.0);
      float v40 = v8;
      float v41 = BaseAddressOfPlane;
      uint64_t v14 = v8;
      float v15 = 0.0;
      float v16 = 0.0;
      float v17 = 0.0;
      float v18 = 0.0;
      uint64_t v44 = v49;
      uint64_t v45 = v50;
      size_t v46 = BytesPerRowOfPlane;
      do
      {
        if (v13)
        {
          int v19 = -v43;
          float v20 = (float)(int)(v11 - v43) * (float)(int)(v11 - v43);
          float v21 = BaseAddressOfPlane;
          float v22 = v14;
          float v23 = v10;
          do
          {
            float v24 = (float)v19;
            float v25 = expf((float)-(float)(v20 + (float)(v24 * v24)) / v48);
            if (a2)
            {
              float v26 = (float)((float)((float)(v24 * v24) / v47) + -1.0) * v25;
              float v27 = (float)((float)(v20 / v47) + -1.0) * v25;
            }
            else
            {
              float v26 = -(float)(v24 * v25);
              float v27 = v25 * (float)-(float)(int)(v11 - v43);
            }
            *v21++ = v26;
            *v22++ = v27;
            *v23++ = 0;
            if (v26 <= 0.0) {
              float v28 = v26;
            }
            else {
              float v28 = 0.0;
            }
            float v18 = v18 - v28;
            if (v26 <= 0.0) {
              float v26 = -0.0;
            }
            float v17 = v17 + v26;
            if (v27 <= 0.0) {
              float v29 = v27;
            }
            else {
              float v29 = 0.0;
            }
            float v16 = v16 - v29;
            if (v27 <= 0.0) {
              float v27 = -0.0;
            }
            float v15 = v15 + v27;
            ++v19;
            --v13;
          }
          while (v13);
        }
        ++v11;
        int v10 = (_DWORD *)((char *)v10 + v46);
        uint64_t v14 = (float *)((char *)v14 + v46);
        BaseAddressOfPlane = (float *)((char *)BaseAddressOfPlane + v46);
        uint64_t v13 = v44;
      }
      while (v11 != v45);
      uint64_t v30 = 0;
      uint64_t v31 = v49;
      uint64_t v32 = v41;
      int v5 = v42;
      uint64_t v33 = v40;
      do
      {
        uint64_t v34 = v31;
        int v35 = v32;
        for (uint64_t i = v33; v34; --v34)
        {
          if (*v35 <= 0.0) {
            float v37 = v18;
          }
          else {
            float v37 = v17;
          }
          *int v35 = *v35 / v37;
          ++v35;
          if (*i <= 0.0) {
            float v38 = v16;
          }
          else {
            float v38 = v15;
          }
          *uint64_t i = *i / v38;
          ++i;
        }
        ++v30;
        uint64_t v33 = (float *)((char *)v33 + v46);
        uint64_t v32 = (float *)((char *)v32 + v46);
      }
      while (v30 != v45);
    }
    return CVPixelBufferUnlockBaseAddress(v5, 0);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t _computesCIELab2Gray(__CVBuffer *a1, __CVBuffer *a2)
{
  if (CVPixelBufferGetPixelFormatType(a1) == 1919365990 && CVPixelBufferGetPixelFormatType(a2) == 1919365990)
  {
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    CMPhotoGetPixelBufferCLAP(a1, 0, 0, &v24, &v25);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    CMPhotoGetPixelBufferCLAP(a2, 0, 0, &v22, &v23);
    if (v24 == v22 && v25 == v23)
    {
      CVPixelBufferLockBaseAddress(a1, 0);
      CVPixelBufferLockBaseAddress(a2, 0);
      size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
      BaseAddressOfPlane = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
      CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
      CVPixelBufferGetBaseAddressOfPlane(a1, 2uLL);
      size_t v6 = CVPixelBufferGetBytesPerRowOfPlane(a2, 0);
      size_t v7 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 0);
      size_t v8 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 1uLL);
      int v9 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 2uLL);
      uint64_t v10 = v25;
      if (v25)
      {
        uint64_t v11 = 0;
        uint64_t v12 = v24;
        do
        {
          uint64_t v13 = BaseAddressOfPlane;
          uint64_t v14 = v7;
          float v15 = v8;
          float v16 = v9;
          for (uint64_t i = v12; i; --i)
          {
            float v18 = *v13++;
            float v19 = (float)(v18 + 16.0) / 116.0;
            float *v14 = v19;
            *v15++ = v19;
            float v20 = *v14++;
            *v16++ = v20;
          }
          ++v11;
          int v9 = (float *)((char *)v9 + v6);
          size_t v8 = (float *)((char *)v8 + v6);
          size_t v7 = (float *)((char *)v7 + v6);
          BaseAddressOfPlane = (float *)((char *)BaseAddressOfPlane + BytesPerRowOfPlane);
        }
        while (v11 != v10);
      }
      CVPixelBufferUnlockBaseAddress(a1, 0);
      CVPixelBufferUnlockBaseAddress(a2, 0);
      return 0;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

float XYZ2CIELab(float *a1, float *a2)
{
  float v3 = a1[1];
  float v4 = *a1 * 1.0522;
  float v5 = a1[2];
  if (v4 <= 0.0088565) {
    float v6 = (float)(v4 * 7.787) + 0.13793;
  }
  else {
    float v6 = powf(v4, 0.33333);
  }
  float v7 = v5 * 0.91836;
  if (v3 <= 0.0088565) {
    float v8 = (float)(v3 * 7.787) + 0.13793;
  }
  else {
    float v8 = powf(v3, 0.33333);
  }
  if (v7 <= 0.0088565) {
    float v9 = (float)(v7 * 7.787) + 0.13793;
  }
  else {
    float v9 = powf(v7, 0.33333);
  }
  *a2 = (float)(v8 * 116.0) + -16.0;
  a2[1] = (float)(v6 - v8) * 500.0;
  float result = (float)(v8 - v9) * 200.0;
  a2[2] = result;
  return result;
}

uint64_t ___poolFLIP_block_invoke(uint64_t a1, float *a2, float *a3)
{
  if (*a2 > *a3) {
    return 1;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

BOOL CMPhotoExtensionIsPNG(const __CFString *a1)
{
  if (!a1) {
    return 0;
  }
  v4.length = CFStringGetLength(a1);
  uint64_t v2 = 1;
  v4.location = 0;
  if (CFStringCompareWithOptions(a1, @"png", v4, 1uLL))
  {
    v5.length = CFStringGetLength(a1);
    v5.location = 0;
    return CFStringCompareWithOptions(a1, @"apng", v5, 1uLL) == kCFCompareEqualTo;
  }
  return v2;
}

uint64_t CMPhotoImageHasOpaqueAlphaFromPixelData(opaqueCMSampleBuffer *a1, unsigned char *a2)
{
  char v7 = 0;
  CFTypeRef cf = 0;
  HasOpaqueAlphaFromPixelCFDataRef Data = 4294950306;
  if (a1 && a2)
  {
    uint64_t PixelBufferFromImage = CMPhotoCreatePixelBufferFromImage((const __CFAllocator *)*MEMORY[0x1E4F1CF80], a1, (opaqueCMSampleBuffer **)&cf);
    if (PixelBufferFromImage)
    {
      HasOpaqueAlphaFromPixelCFDataRef Data = PixelBufferFromImage;
    }
    else
    {
      HasOpaqueAlphaFromPixelCFDataRef Data = CMPhotoPixelBufferHasOpaqueAlphaFromPixelData((__CVBuffer *)cf, &v7);
      if (!HasOpaqueAlphaFromPixelData) {
        *a2 = v7;
      }
    }
    if (cf) {
      CFRelease(cf);
    }
  }
  return HasOpaqueAlphaFromPixelData;
}

uint64_t CMPhotoCreatePixelBufferFromImage(const __CFAllocator *a1, opaqueCMSampleBuffer *a2, opaqueCMSampleBuffer **a3)
{
  CFRange v4 = a2;
  CFTypeRef cf = 0;
  int ImageType = CMPhotoGetImageType(a2);
  switch(ImageType)
  {
    case 3:
      CVImageBufferRef ImageBuffer = CMSampleBufferGetImageBuffer(v4);
      if (ImageBuffer)
      {
        uint64_t v10 = (opaqueCMSampleBuffer *)CFRetain(ImageBuffer);
        CFRange v4 = v10;
        CFTypeRef cf = v10;
        if (v10)
        {
          CFTypeID v11 = CFGetTypeID(v10);
          if (v11 == CVPixelBufferGetTypeID())
          {
            if (a3) {
              goto LABEL_11;
            }
LABEL_15:
            uint64_t v8 = 0;
            goto LABEL_16;
          }
        }
      }
      else
      {
        CFRange v4 = 0;
        CFTypeRef cf = 0;
      }
      uint64_t v8 = FigSignalErrorAt();
      if (!v4) {
        return v8;
      }
      goto LABEL_17;
    case 2:
      if (v4) {
        CFRange v4 = (opaqueCMSampleBuffer *)CFRetain(v4);
      }
      CFTypeRef cf = v4;
      if (a3) {
        goto LABEL_11;
      }
      goto LABEL_15;
    case 1:
      uint64_t PixelBufferWithSurface = CMPhotoCreatePixelBufferWithSurface(a1, v4, 0, (CVPixelBufferRef *)&cf);
      uint64_t v8 = PixelBufferWithSurface;
      CFRange v4 = (opaqueCMSampleBuffer *)cf;
      if (!a3 || PixelBufferWithSurface)
      {
LABEL_16:
        if (v4) {
LABEL_17:
        }
          CFRelease(v4);
        return v8;
      }
LABEL_11:
      uint64_t v8 = 0;
      *a3 = v4;
      return v8;
  }
  return FigSignalErrorAt();
}

uint64_t CMPhotoPixelBufferHasOpaqueAlphaFromPixelData(__CVBuffer *a1, char *a2)
{
  v64[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 4294950306;
  if (a1 && a2)
  {
    signed int PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
    uint64_t v6 = CVPixelBufferLockBaseAddress(a1, 0);
    if (v6) {
      return v6;
    }
    v64[0] = 0;
    v64[1] = 0;
    v63[0] = 0;
    v63[1] = 0;
    int v62 = 0;
    double PixelBufferCLAPAsRect = CMPhotoGetPixelBufferCLAPAsRect(a1);
    double v9 = v8;
    double v11 = v10;
    uint64_t PixelBufferDataPointers = CMPhotoGetPixelBufferDataPointers(a1, vcvtad_u64_f64(PixelBufferCLAPAsRect), vcvtad_u64_f64(v12), &v62, (uint64_t)v64, (uint64_t)v63, 0);
    if (PixelBufferDataPointers)
    {
      uint64_t v2 = PixelBufferDataPointers;
      goto LABEL_94;
    }
    unint64_t v14 = vcvtad_u64_f64(v9);
    unint64_t v15 = vcvtad_u64_f64(v11);
    uint64_t v2 = 4294950301;
    if (PixelFormatType <= 1278226741)
    {
      if (PixelFormatType > 1111970368)
      {
        switch(PixelFormatType)
        {
          case 1111970369:
            if (v15)
            {
              uint64_t v41 = 0;
              uint64_t v42 = v64[0] + 3;
              while (!v14)
              {
LABEL_64:
                ++v41;
                v42 += v63[0];
                if (v41 == v15) {
                  goto LABEL_88;
                }
              }
              unsigned int v43 = (unsigned __int8 *)v42;
              unint64_t v44 = v14;
              while (1)
              {
                int v45 = *v43;
                v43 += 4;
                if (v45 != 255) {
                  goto LABEL_91;
                }
                if (!--v44) {
                  goto LABEL_64;
                }
              }
            }
            goto LABEL_88;
          case 1278226488:
            if (v15)
            {
              uint64_t v46 = 0;
              float v47 = (unsigned __int8 *)v64[0];
              while (1)
              {
                unint64_t v48 = v14;
                uint64_t v49 = v47;
                if (v14) {
                  break;
                }
LABEL_71:
                ++v46;
                v47 += v63[0];
                if (v46 == v15) {
                  goto LABEL_88;
                }
              }
              while (1)
              {
                int v50 = *v49++;
                if (v50 != 255) {
                  goto LABEL_91;
                }
                if (!--v48) {
                  goto LABEL_71;
                }
              }
            }
            goto LABEL_88;
          case 1278226736:
            if (v15)
            {
              uint64_t v17 = 0;
              float v18 = (unsigned __int16 *)v64[0];
              while (1)
              {
                unint64_t v19 = v14;
                float v20 = v18;
                if (v14) {
                  break;
                }
LABEL_19:
                ++v17;
                float v18 = (unsigned __int16 *)((char *)v18 + v63[0]);
                if (v17 == v15) {
                  goto LABEL_88;
                }
              }
              while (1)
              {
                unsigned int v21 = *v20++;
                if (v21 >> 6 < 0x3FF) {
                  goto LABEL_91;
                }
                if (!--v19) {
                  goto LABEL_19;
                }
              }
            }
            goto LABEL_88;
        }
        goto LABEL_94;
      }
      if (PixelFormatType != 843264056)
      {
        int v16 = 843264310;
LABEL_34:
        if (PixelFormatType == v16)
        {
          if (v15)
          {
            uint64_t v26 = 0;
            uint64_t v27 = v64[0] + 2;
            while (!v14)
            {
LABEL_41:
              ++v26;
              v27 += v63[0];
              if (v26 == v15) {
                goto LABEL_88;
              }
            }
            float v28 = (__int16 *)v27;
            unint64_t v29 = v14;
            while (1)
            {
              int v30 = *v28;
              v28 += 2;
              if (v30 != -1) {
                break;
              }
              if (!--v29) {
                goto LABEL_41;
              }
            }
LABEL_91:
            char v60 = 0;
            goto LABEL_89;
          }
          goto LABEL_88;
        }
LABEL_94:
        CVPixelBufferUnlockBaseAddress(a1, 0);
        return v2;
      }
    }
    else
    {
      if (PixelFormatType > 1380410944)
      {
        switch(PixelFormatType)
        {
          case 1815491698:
            if (v15)
            {
              uint64_t v51 = 0;
              uint64_t v52 = v64[0] + 6;
              while (!v14)
              {
LABEL_79:
                ++v51;
                v52 += v63[0];
                if (v51 == v15) {
                  goto LABEL_88;
                }
              }
              float v53 = (__int16 *)v52;
              unint64_t v54 = v14;
              while (1)
              {
                int v55 = *v53;
                v53 += 4;
                if (v55 != -1) {
                  goto LABEL_91;
                }
                if (!--v54) {
                  goto LABEL_79;
                }
              }
            }
            goto LABEL_88;
          case 1380411457:
            if (v15)
            {
              uint64_t v56 = 0;
              uint64_t v57 = v64[0] + 6;
              while (!v14)
              {
LABEL_87:
                ++v56;
                v57 += v63[0];
                if (v56 == v15) {
                  goto LABEL_88;
                }
              }
              int v58 = (short float *)v57;
              unint64_t v59 = v14;
              while (*v58 == COERCE_SHORT_FLOAT(COERCE_UNSIGNED_INT(1.0)))
              {
                v58 += 4;
                if (!--v59) {
                  goto LABEL_87;
                }
              }
              goto LABEL_91;
            }
            goto LABEL_88;
          case 1380410945:
            if (v15)
            {
              uint64_t v22 = 0;
              uint64_t v23 = v64[0] + 12;
              while (!v14)
              {
LABEL_30:
                ++v22;
                v23 += v63[0];
                if (v22 == v15) {
                  goto LABEL_88;
                }
              }
              uint64_t v24 = (float *)v23;
              unint64_t v25 = v14;
              while (*v24 == 1.0)
              {
                v24 += 4;
                if (!--v25) {
                  goto LABEL_30;
                }
              }
              goto LABEL_91;
            }
            goto LABEL_88;
        }
        goto LABEL_94;
      }
      if (PixelFormatType == 1278226742)
      {
        if (v15)
        {
          uint64_t v36 = 0;
          float v37 = (__int16 *)v64[0];
          while (1)
          {
            unint64_t v38 = v14;
            int v39 = v37;
            if (v14) {
              break;
            }
LABEL_56:
            ++v36;
            float v37 = (__int16 *)((char *)v37 + v63[0]);
            if (v36 == v15) {
              goto LABEL_88;
            }
          }
          while (1)
          {
            int v40 = *v39++;
            if (v40 != -1) {
              goto LABEL_91;
            }
            if (!--v38) {
              goto LABEL_56;
            }
          }
        }
        goto LABEL_88;
      }
      if (PixelFormatType != 1279340600)
      {
        int v16 = 1279340854;
        goto LABEL_34;
      }
    }
    if (v15)
    {
      uint64_t v31 = 0;
      uint64_t v32 = v64[0] + 1;
      while (!v14)
      {
LABEL_49:
        ++v31;
        v32 += v63[0];
        if (v31 == v15) {
          goto LABEL_88;
        }
      }
      uint64_t v33 = (unsigned __int8 *)v32;
      unint64_t v34 = v14;
      while (1)
      {
        int v35 = *v33;
        v33 += 2;
        if (v35 != 255) {
          goto LABEL_91;
        }
        if (!--v34) {
          goto LABEL_49;
        }
      }
    }
LABEL_88:
    char v60 = 1;
LABEL_89:
    CVPixelBufferUnlockBaseAddress(a1, 0);
    uint64_t v2 = 0;
    *a2 = v60;
  }
  return v2;
}

uint64_t CMPhotoGetPixelBufferDataPointers(__CVBuffer *a1, unint64_t a2, unint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  signed int PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (CMPhotoGetPixelFormatCompressionType(PixelFormatType)) {
    return 4294950306;
  }
  PlaneCFIndex Count = CVPixelBufferGetPlaneCount(a1);
  if (PlaneCount <= 1) {
    uint64_t v16 = 1;
  }
  else {
    uint64_t v16 = PlaneCount;
  }
  if (PlaneCount >= 2 && v16 != 2) {
    return 4294950301;
  }
  double PixelBufferSize = CMPhotoGetPixelBufferSize(a1);
  unint64_t v19 = vcvtad_u64_f64(v18);
  if (a2 >= vcvtad_u64_f64(PixelBufferSize) || a3 >= v19) {
    return 4294950306;
  }
  uint64_t v36 = a4;
  uint64_t BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(PixelFormatType);
  size_t extraRowsOnBottom = 0;
  CVPixelBufferGetExtendedPixels(a1, 0, 0, 0, &extraRowsOnBottom);
  size_t v22 = 0;
  unint64_t v41 = a3;
  uint64_t v39 = 2 * a2;
  unint64_t v40 = (a3 + 1) >> 1;
  unint64_t v37 = a2;
  unint64_t v38 = BytesPerPixelForPixelFormat * a2;
  do
  {
    BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, v22);
    size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, v22);
    size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, v22);
    size_t v26 = extraRowsOnBottom + HeightOfPlane;
    if (!v22)
    {
      unint64_t v28 = v41;
      uint64_t v29 = v38;
LABEL_55:
      size_t v32 = v29 + BytesPerRowOfPlane * v28;
      goto LABEL_56;
    }
    size_t v27 = HeightOfPlane;
    if (PixelFormatType <= 1937126451)
    {
      if (PixelFormatType > 1751527983)
      {
        if (PixelFormatType > 1936077875)
        {
          if (PixelFormatType == 1936077876) {
            goto LABEL_54;
          }
          if (PixelFormatType != 1937125936)
          {
            int v30 = 1937125938;
LABEL_46:
            if (PixelFormatType != v30) {
              return 4294950301;
            }
LABEL_47:
            size_t v32 = v39 + BytesPerRowOfPlane * v40;
            goto LABEL_56;
          }
        }
        else if (PixelFormatType != 1751527984 && PixelFormatType != 1936077360)
        {
          int v30 = 1936077362;
          goto LABEL_46;
        }
      }
      else
      {
        if (PixelFormatType > 875704949)
        {
          if (PixelFormatType == 875704950) {
            goto LABEL_47;
          }
          if (PixelFormatType == 875836518) {
            goto LABEL_54;
          }
          int v31 = 875836534;
LABEL_53:
          if (PixelFormatType != v31) {
            return 4294950301;
          }
LABEL_54:
          unint64_t v28 = v41;
          uint64_t v29 = v39;
          goto LABEL_55;
        }
        if (PixelFormatType != 875704422 && PixelFormatType != 875704438)
        {
          int v30 = 875704934;
          goto LABEL_46;
        }
      }
    }
    else if (PixelFormatType <= 1953903667)
    {
      if (PixelFormatType > 1952855091)
      {
        if (PixelFormatType == 1952855092) {
          goto LABEL_54;
        }
        if (PixelFormatType != 1953903152)
        {
          int v30 = 1953903154;
          goto LABEL_46;
        }
      }
      else
      {
        if (PixelFormatType == 1937126452) {
          goto LABEL_54;
        }
        if (PixelFormatType != 1952854576)
        {
          int v30 = 1952854578;
          goto LABEL_46;
        }
      }
    }
    else
    {
      if (PixelFormatType > 2016687155)
      {
        if (PixelFormatType <= 2019963441)
        {
          if (PixelFormatType == 2016687156) {
            goto LABEL_54;
          }
          if (PixelFormatType != 2019963440) {
            return 4294950301;
          }
          goto LABEL_48;
        }
        if (PixelFormatType == 2019963442) {
          goto LABEL_47;
        }
        int v31 = 2019963956;
        goto LABEL_53;
      }
      if (PixelFormatType == 1953903668) {
        goto LABEL_54;
      }
      if (PixelFormatType != 2016686640)
      {
        int v30 = 2016686642;
        goto LABEL_46;
      }
    }
LABEL_48:
    size_t v33 = CVPixelBufferGetHeightOfPlane(a1, 0);
    size_t v32 = v37 + BytesPerRowOfPlane * v40;
    size_t v34 = v33 + extraRowsOnBottom + 1;
    if (v27 <= v34 >> 1) {
      size_t v26 = v34 >> 1;
    }
    else {
      size_t v26 = v27;
    }
LABEL_56:
    if (a5) {
      *(void *)(a5 + 8 * v22) = &BaseAddressOfPlane[v32];
    }
    if (a6) {
      *(void *)(a6 + 8 * v22) = BytesPerRowOfPlane;
    }
    if (a7) {
      *(void *)(a7 + 8 * v22) = v26 * BytesPerRowOfPlane - v32;
    }
    ++v22;
  }
  while (v16 != v22);
  uint64_t result = 0;
  if (v36) {
    *uint64_t v36 = v16;
  }
  return result;
}

uint64_t CMPhotoPixelBufferGetAlphaMode(__CVBuffer *a1)
{
  if (!a1) {
    return 2;
  }
  CFTypeRef v1 = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E4F249D8], 0);
  if (!v1) {
    return 2;
  }
  uint64_t v2 = v1;
  if (FigCFEqual()) {
    uint64_t v3 = 1;
  }
  else {
    uint64_t v3 = 2 * (FigCFEqual() == 0);
  }
  CFRelease(v2);
  return v3;
}

void CMPhotoPixelBufferSetAlphaOpaquenessAndAlphaMode(__CVBuffer *a1, int a2, int a3)
{
  if (a1)
  {
    CFRange v5 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
    if (!a2) {
      CFRange v5 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
    }
    CVBufferSetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F249D0], *v5, kCVAttachmentMode_ShouldPropagate);
    CFStringRef v6 = (const __CFString *)*MEMORY[0x1E4F249D8];
    CVBufferRemoveAttachment(a1, (CFStringRef)*MEMORY[0x1E4F249D8]);
    if (a3 != 2)
    {
      char v7 = (const void **)MEMORY[0x1E4F249E8];
      if (a3) {
        char v7 = (const void **)MEMORY[0x1E4F249E0];
      }
      double v8 = *v7;
      CVBufferSetAttachment(a1, v6, v8, kCVAttachmentMode_ShouldPropagate);
    }
  }
}

uint64_t CMPhotoLeastCommonMultiple(uint64_t a1, uint64_t a2)
{
  if (a1 >= 0) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = -a1;
  }
  if (a2 >= 0) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = -a2;
  }
  if (v2 <= v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = v2;
  }
  if (v2 >= v3) {
    uint64_t v2 = v3;
  }
  if (v2)
  {
    if (v2 < 1)
    {
      uint64_t v5 = v4;
    }
    else
    {
      do
      {
        uint64_t v5 = v2;
        uint64_t v2 = v4 % v2;
        uint64_t v4 = v5;
      }
      while (v2 > 0);
    }
  }
  else if ((unint64_t)v4 <= 1)
  {
    uint64_t v5 = 1;
  }
  else
  {
    uint64_t v5 = v4;
  }
  return a2 * a1 / v5;
}

uint64_t CMPhotoGetFullRangeForPixelFormat(uint64_t a1)
{
  uint64_t result = CMPhotoPixelFormatContainsYCbCr(a1);
  if (result)
  {
    if (CMPhotoPixelFormatIsPacked(a1) || CMPhotoPixelFormatIsCompressed(a1)) {
      return 0;
    }
    uint64_t result = CMPhotoPixelFormatIsFullRange(a1);
    if (result) {
      return a1;
    }
    if ((int)a1 > 1953903151)
    {
      if ((int)a1 > 2016686639)
      {
        if (a1 == 2016686640) {
          return 2019963440;
        }
        if (a1 != 2016686642)
        {
          if (a1 != 2016687156) {
            return result;
          }
          int v3 = 2019963440;
          return (v3 + 516);
        }
        int v4 = 2019963440;
      }
      else
      {
        if (a1 == 1953903152) {
          return 1952854576;
        }
        if (a1 != 1953903154)
        {
          if (a1 != 1953903668) {
            return result;
          }
          int v3 = 1952854576;
          return (v3 + 516);
        }
        int v4 = 1952854576;
      }
    }
    else
    {
      if ((int)a1 <= 1937125935)
      {
        switch(a1)
        {
          case 0x34323076:
            return 875704422;
          case 0x34323276:
            return 875704934;
          case 0x34343476:
            return 875836518;
        }
        return result;
      }
      if (a1 == 1937125936) {
        return 1936077360;
      }
      if (a1 != 1937125938)
      {
        if (a1 != 1937126452) {
          return result;
        }
        int v3 = 1936077360;
        return (v3 + 516);
      }
      int v4 = 1936077360;
    }
    return v4 | 2u;
  }
  return result;
}

uint64_t CMPhotoGetVideoRangeForPixelFormat(uint64_t a1)
{
  uint64_t result = CMPhotoPixelFormatContainsYCbCr(a1);
  if (result)
  {
    if (CMPhotoPixelFormatIsPacked(a1) || CMPhotoPixelFormatIsCompressed(a1)) {
      return 0;
    }
    if (!CMPhotoPixelFormatIsFullRange(a1)) {
      return a1;
    }
    uint64_t result = 0;
    if ((int)a1 > 1952854575)
    {
      if ((int)a1 > 2019963439)
      {
        if (a1 == 2019963440) {
          return 2016686640;
        }
        if (a1 != 2019963442)
        {
          if (a1 != 2019963956) {
            return result;
          }
          int v3 = 2016686640;
          return (v3 + 516);
        }
        int v4 = 2016686640;
      }
      else
      {
        if (a1 == 1952854576) {
          return 1953903152;
        }
        if (a1 != 1952854578)
        {
          if (a1 != 1952855092) {
            return result;
          }
          int v3 = 1953903152;
          return (v3 + 516);
        }
        int v4 = 1953903152;
      }
    }
    else
    {
      if ((int)a1 <= 1936077359)
      {
        switch(a1)
        {
          case 0x34323066:
            return 875704438;
          case 0x34323266:
            return 875704950;
          case 0x34343466:
            return 875836534;
        }
        return result;
      }
      if (a1 == 1936077360) {
        return 1937125936;
      }
      if (a1 != 1936077362)
      {
        if (a1 != 1936077876) {
          return result;
        }
        int v3 = 1937125936;
        return (v3 + 516);
      }
      int v4 = 1937125936;
    }
    return v4 | 2u;
  }
  return result;
}

uint64_t CMPhotoGetSurfaceElementWidthForPixelFormat(int a1)
{
  if (a1 == 1647719528) {
    return 2;
  }
  else {
    return 1;
  }
}

uint64_t CMPhotoGetFixedPointDescriptionFromPixelFormat(int a1, int *a2, int *a3, char *a4)
{
  uint64_t result = 4294950301;
  if (a1 <= 1278226735)
  {
    if (a1 != 825306677)
    {
      if (a1 == 825437747)
      {
        char v7 = 0;
        int v8 = 13;
        int v6 = 3;
        if (!a2) {
          goto LABEL_20;
        }
      }
      else
      {
        if (a1 != 1278226488) {
          return result;
        }
        int v6 = 0;
        char v7 = 0;
        int v8 = 8;
        if (!a2) {
          goto LABEL_20;
        }
      }
      goto LABEL_19;
    }
    char v7 = 0;
    int v8 = 11;
  }
  else
  {
    if (a1 <= 1278226741)
    {
      if (a1 == 1278226736)
      {
        int v6 = 0;
        char v7 = 0;
        int v8 = 10;
        if (!a2) {
          goto LABEL_20;
        }
      }
      else
      {
        if (a1 != 1278226738) {
          return result;
        }
        int v6 = 0;
        char v7 = 0;
        int v8 = 12;
        if (!a2) {
          goto LABEL_20;
        }
      }
      goto LABEL_19;
    }
    if (a1 == 1278226742)
    {
      int v6 = 0;
      char v7 = 0;
      int v8 = 16;
      if (!a2) {
        goto LABEL_20;
      }
      goto LABEL_19;
    }
    if (a1 != 1932996149) {
      return result;
    }
    char v7 = 1;
    int v8 = 7;
  }
  int v6 = 5;
  if (a2) {
LABEL_19:
  }
    *a2 = v6;
LABEL_20:
  if (a3) {
    *a3 = v8;
  }
  uint64_t result = 0;
  if (a4) {
    *a4 = v7;
  }
  return result;
}

void CMPhotoPropagateChromaLocationFromSourceBuffer(CVBufferRef buffer, __CVBuffer *a2)
{
  v10[3] = *MEMORY[0x1E4F143B8];
  if (buffer && a2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *MEMORY[0x1E4F24A08];
    v10[0] = *MEMORY[0x1E4F24A10];
    v10[1] = v5;
    v10[2] = *MEMORY[0x1E4F24AF8];
    do
    {
      CFStringRef v6 = (const __CFString *)v10[v4];
      CVAttachmentMode attachmentMode = kCVAttachmentMode_ShouldNotPropagate;
      CFTypeRef v7 = CVBufferCopyAttachment(buffer, v6, &attachmentMode);
      if (v7)
      {
        int v8 = v7;
        CVBufferSetAttachment(a2, v6, v7, attachmentMode);
        CFRelease(v8);
      }
      ++v4;
    }
    while (v4 != 3);
  }
}

void CMPhotoRemoveColorPropertiesFromBuffer(__CVBuffer *a1)
{
  if (a1)
  {
    CVBufferRemoveAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24A00]);
    CVBufferRemoveAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24B70]);
    CVBufferRemoveAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24C18]);
    CVBufferRemoveAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24A90]);
    CFStringRef v2 = (const __CFString *)*MEMORY[0x1E4F24BC8];
    CVBufferRemoveAttachment(a1, v2);
  }
}

void CMPhotoRemoveColorPropertiesFromBufferExcludingMatrix(__CVBuffer *a1)
{
  if (a1)
  {
    CVBufferRemoveAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24A00]);
    CVBufferRemoveAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24B70]);
    CVBufferRemoveAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24A90]);
    CFStringRef v2 = (const __CFString *)*MEMORY[0x1E4F24BC8];
    CVBufferRemoveAttachment(a1, v2);
  }
}

void CMPhotoRemoveChromaInformationFromBuffer(__CVBuffer *a1)
{
  if (a1)
  {
    CVBufferRemoveAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24A10]);
    CVBufferRemoveAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24A08]);
    CFStringRef v2 = (const __CFString *)*MEMORY[0x1E4F24AF8];
    CVBufferRemoveAttachment(a1, v2);
  }
}

void CMPhotoRemoveAndPropagateColorPropertiesFromSourceBuffer(__CVBuffer *a1, __CVBuffer *a2)
{
  if (a1 && a2)
  {
    CMPhotoRemoveColorPropertiesFromBuffer(a2);
    CMPhotoPropagateColorPropertiesFromSourceBuffer(a1, a2);
  }
}

void CMPhotoRemoveAndPropagateAlphaFromSourceBuffer(__CVBuffer *a1, CVBufferRef buffer)
{
  if (a1 && buffer)
  {
    CVBufferRemoveAttachment(buffer, (CFStringRef)*MEMORY[0x1E4F249D0]);
    CVBufferRemoveAttachment(buffer, (CFStringRef)*MEMORY[0x1E4F249D8]);
    int HasOpaqueAlphaFromAttachment = CMPhotoPixelBufferHasOpaqueAlphaFromAttachment(a1, 1);
    int AlphaMode = CMPhotoPixelBufferGetAlphaMode(a1);
    CMPhotoPixelBufferSetAlphaOpaquenessAndAlphaMode(buffer, HasOpaqueAlphaFromAttachment, AlphaMode);
  }
}

uint64_t CMPhotoGetMatchingFullPrecisionPixelFormat(int a1)
{
  if (a1 > 1751410031)
  {
    uint64_t result = 1717855600;
    if (a1 != 1751411059)
    {
      if (a1 == 1751410032) {
        return result;
      }
      return 0;
    }
    return 1717856627;
  }
  else
  {
    if (a1 != 16)
    {
      if (a1 == 1278226536) {
        return 1278226534;
      }
      return 0;
    }
    return 1111970369;
  }
}

uint64_t CMPhotoFormatFourCharCodeString(unsigned int a1)
{
  return bswap32(a1);
}

double CMPhotoGetSurfaceSize(__IOSurface *a1)
{
  if (!a1) {
    return 0.0;
  }
  double Width = (double)IOSurfaceGetWidth(a1);
  IOSurfaceGetHeight(a1);
  return Width;
}

uint64_t CMPhotoCreatePixelbufferFromAuxiliaryDataDictionary(const __CFDictionary *a1, int a2, CVPixelBufferRef *a3)
{
  CVPixelBufferRef pixelBuffer = 0;
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E4F2F370]);
  if (!Value) {
    goto LABEL_32;
  }
  CFDataRef v7 = Value;
  CFTypeID v8 = CFGetTypeID(Value);
  if (v8 != CFDataGetTypeID()) {
    goto LABEL_32;
  }
  CFDictionaryRef v9 = (const __CFDictionary *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E4F2F378]);
  if (!v9) {
    goto LABEL_32;
  }
  CFDictionaryRef v10 = v9;
  CFTypeID v11 = CFGetTypeID(v9);
  if (v11 != CFDictionaryGetTypeID()) {
    goto LABEL_32;
  }
  size_t v28 = 0;
  size_t v29 = 0;
  size_t bytesPerRow = 0;
  OSType pixelFormatType = 0;
  BOOL v12 = !CMPhotoCFDictionaryGetSizeIfPresent(v10, (const void *)*MEMORY[0x1E4F2FDD8], &v29) || v29 == 0;
  if (v12
    || (CMPhotoCFDictionaryGetSizeIfPresent(v10, (const void *)*MEMORY[0x1E4F2FB48], &v28)
      ? (BOOL v13 = v28 == 0)
      : (BOOL v13 = 1),
        v13
     || !CMPhotoCFDictionaryGetSizeIfPresent(v10, (const void *)*MEMORY[0x1E4F2F538], &bytesPerRow)
     || !bytesPerRow
     || !CMPhotoCFDictionaryGetInt32IfPresent(v10, (const void *)*MEMORY[0x1E4F2FCE0], &pixelFormatType)
     || (BytePtr = CFDataGetBytePtr(v7)) == 0
     || (unint64_t v15 = (UInt8 *)BytePtr, Length = CFDataGetLength(v7), Length < bytesPerRow * v28)))
  {
LABEL_32:
    uint64_t v17 = FigSignalErrorAt();
    goto LABEL_33;
  }
  if (a2)
  {
    if (!CMPhotoSurfacePoolCreatePixelBuffer(@"SurfacePoolOneShot", pixelFormatType, v29, v28, 1, 0, 0, 1, 64, 0, &pixelBuffer))
    {
      uint64_t v17 = CVPixelBufferLockBaseAddress(pixelBuffer, 0);
      if (v17) {
        goto LABEL_33;
      }
      size_t v18 = CVPixelBufferGetBytesPerRow(pixelBuffer);
      size_t v19 = v18;
      if (bytesPerRow >= v18) {
        size_t v20 = v18;
      }
      else {
        size_t v20 = bytesPerRow;
      }
      BaseAddress = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
      if (v28)
      {
        size_t v22 = BaseAddress;
        for (size_t i = 0; i < v28; ++i)
        {
          memcpy(v22, v15, v20);
          v22 += v19;
          v15 += bytesPerRow;
        }
      }
      uint64_t v17 = CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
      if (v17) {
        goto LABEL_33;
      }
LABEL_30:
      uint64_t v24 = 0;
      *a3 = pixelBuffer;
      return v24;
    }
    goto LABEL_32;
  }
  CFRetain(v7);
  uint64_t v17 = CVPixelBufferCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v29, v28, pixelFormatType, v15, bytesPerRow, (CVPixelBufferReleaseBytesCallback)_auxDataPixelBufferReleaseCallback, v7, 0, &pixelBuffer);
  if (!v17) {
    goto LABEL_30;
  }
LABEL_33:
  uint64_t v24 = v17;
  if (pixelBuffer) {
    CFRelease(pixelBuffer);
  }
  return v24;
}

void _auxDataPixelBufferReleaseCallback(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t CMPhotoCreateAuxiliaryDataDictionaryFromPixelbuffer(__CVBuffer *a1, __CFData **a2, __CFDictionary **a3)
{
  if (!a1) {
    return 4294950306;
  }
  size_t Width = CVPixelBufferGetWidth(a1);
  size_t Height = CVPixelBufferGetHeight(a1);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDataRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], BytesPerRow * Height);
  if (!Mutable) {
    return 4294950305;
  }
  BOOL v12 = Mutable;
  uint64_t v13 = CVPixelBufferLockBaseAddress(a1, 1uLL);
  if (v13
    || (BaseAddress = (const UInt8 *)CVPixelBufferGetBaseAddress(a1),
        CFDataAppendBytes(v12, BaseAddress, BytesPerRow * Height),
        uint64_t v13 = CVPixelBufferUnlockBaseAddress(a1, 1uLL),
        v13))
  {
    uint64_t v18 = v13;
    uint64_t v16 = 0;
  }
  else
  {
    CFMutableDictionaryRef v15 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v16 = v15;
    if (v15)
    {
      uint64_t v17 = CMPhotoCFDictionarySetSize(v15, *MEMORY[0x1E4F2FDD8], Width);
      if (v17
        || (uint64_t v17 = CMPhotoCFDictionarySetSize(v16, *MEMORY[0x1E4F2FB48], Height), v17)
        || (uint64_t v17 = CMPhotoCFDictionarySetSize(v16, *MEMORY[0x1E4F2F538], BytesPerRow), v17)
        || (uint64_t v17 = CMPhotoCFDictionarySetInt32(v16, (const void *)*MEMORY[0x1E4F2FCE0], PixelFormatType), v17))
      {
        uint64_t v18 = v17;
      }
      else
      {
        if (a2)
        {
          *a2 = v12;
          BOOL v12 = 0;
        }
        if (a3)
        {
          *a3 = v16;
          uint64_t v16 = 0;
        }
        uint64_t v18 = 0;
        if (!v12) {
          goto LABEL_16;
        }
      }
    }
    else
    {
      uint64_t v18 = 4294950305;
    }
  }
  CFRelease(v12);
LABEL_16:
  if (v16) {
    CFRelease(v16);
  }
  return v18;
}

uint64_t CMPhotoPixelBufferCopyCropRectToOffset(__CVBuffer *a1, int a2, uint64_t *a3, __CVBuffer *a4, int a5, unint64_t a6, uint64_t a7, int a8)
{
  if (a1)
  {
    CFTypeID v8 = a4;
    if (a4)
    {
      uint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
      uint64_t v16 = CVPixelBufferGetPixelFormatType(v8);
      uint64_t v17 = v16;
      if (a8)
      {
        if (PixelFormatType != v16)
        {
          uint64_t BitDepthForPixelFormat = CMPhotoGetBitDepthForPixelFormat(PixelFormatType);
          if (BitDepthForPixelFormat != CMPhotoGetBitDepthForPixelFormat(v17)) {
            goto LABEL_69;
          }
          if (!CMPhotoPixelFormatContainsYCbCr(PixelFormatType)) {
            goto LABEL_69;
          }
          if (!CMPhotoPixelFormatContainsYCbCr(v17)) {
            goto LABEL_69;
          }
          int ChromaSubsamplingFromPixelFormat = CMPhotoGetChromaSubsamplingFromPixelFormat(PixelFormatType);
          if (ChromaSubsamplingFromPixelFormat != CMPhotoGetChromaSubsamplingFromPixelFormat(v17)) {
            goto LABEL_69;
          }
        }
      }
      else if (PixelFormatType != v16)
      {
        goto LABEL_69;
      }
      double Width = (double)CVPixelBufferGetWidth(v8);
      size_t Height = CVPixelBufferGetHeight(v8);
      if (a3[2] > (unint64_t)Width - a6) {
        goto LABEL_69;
      }
      if (a3[3] > (unint64_t)(double)Height - a7) {
        goto LABEL_69;
      }
      long long v22 = *((_OWORD *)a3 + 1);
      v82[0] = *(_OWORD *)a3;
      v82[1] = v22;
      if (!CMPhotoPixelBufferMemcpySupportedForBuffer(a1, v82, a6, a7)) {
        goto LABEL_69;
      }
      if (a2)
      {
        uint64_t v23 = CVPixelBufferLockBaseAddress(a1, 1uLL);
        if (v23) {
          return v23;
        }
      }
      if (a5)
      {
        uint64_t v24 = CVPixelBufferLockBaseAddress(v8, 0);
        if (v24)
        {
          uint64_t v62 = v24;
          a5 = 0;
          goto LABEL_63;
        }
        a5 = 1;
      }
      unint64_t v25 = *a3;
      unint64_t v71 = a3[1];
      uint64_t BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(PixelFormatType);
      __int16 v81 = 0;
      uint64_t IsSubsampled = CMPhotoPixelFormatIsSubsampled(PixelFormatType, (unsigned char *)&v81 + 1, &v81, 0, 0);
      if (IsSubsampled)
      {
        uint64_t v62 = IsSubsampled;
        goto LABEL_63;
      }
      int v65 = a5;
      int v27 = HIBYTE(v81);
      int v28 = v81;
      CVPixelBufferRef pixelBuffer = v8;
      if (CVPixelBufferGetPlaneCount(a1) < 2)
      {
        uint64_t v68 = a7;
        int v64 = a2;
        BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
        size_t v29 = (char *)CVPixelBufferGetBaseAddress(v8);
        size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
        size_t v31 = CVPixelBufferGetBytesPerRow(v8);
        size_t v32 = a3[3];
        if (v32 >= CVPixelBufferGetHeight(a1)) {
          size_t v33 = CVPixelBufferGetHeight(a1);
        }
        else {
          size_t v33 = a3[3];
        }
        size_t v57 = a3[2];
        if (v57 >= CVPixelBufferGetWidth(a1))
        {
          size_t v58 = CVPixelBufferGetWidth(a1);
          if (v33)
          {
LABEL_57:
            unint64_t v59 = &BaseAddress[BytesPerPixelForPixelFormat * v25 + BytesPerRow * v71];
            char v60 = &v29[BytesPerPixelForPixelFormat * a6 + v31 * v68];
            size_t v61 = v58 * BytesPerPixelForPixelFormat;
            do
            {
              memcpy(v60, v59, v61);
              v59 += BytesPerRow;
              v60 += v31;
              --v33;
            }
            while (v33);
            uint64_t v62 = 0;
            CFTypeID v8 = pixelBuffer;
            goto LABEL_62;
          }
        }
        else
        {
          size_t v58 = a3[2];
          if (v33) {
            goto LABEL_57;
          }
        }
LABEL_61:
        uint64_t v62 = 0;
LABEL_62:
        a2 = v64;
        a5 = v65;
LABEL_63:
        if (a2) {
          CVPixelBufferUnlockBaseAddress(a1, 1uLL);
        }
        if (a5) {
          CVPixelBufferUnlockBaseAddress(v8, 0);
        }
        return v62;
      }
      if (!CVPixelBufferGetPlaneCount(a1))
      {
        uint64_t v62 = 0;
        a5 = v65;
        goto LABEL_63;
      }
      int v64 = a2;
      size_t v34 = 0;
      char v35 = v28 != 0;
      unint64_t v36 = v71;
      if (v28) {
        unint64_t v36 = v71 + 1;
      }
      uint64_t v69 = a7;
      if (v28) {
        unint64_t v37 = a7 + 1;
      }
      else {
        unint64_t v37 = a7;
      }
      char v38 = v27 != 0;
      if (v27) {
        unint64_t v39 = v25 + 1;
      }
      else {
        unint64_t v39 = v25;
      }
      unint64_t v40 = v39 >> v38;
      if (v27) {
        unint64_t v41 = a6 + 1;
      }
      else {
        unint64_t v41 = a6;
      }
      uint64_t v76 = v27 != 0;
      uint64_t v77 = v28 != 0;
      uint64_t v75 = 2 * BytesPerPixelForPixelFormat * v40;
      unint64_t v73 = v36 >> v35;
      uint64_t v74 = 2 * BytesPerPixelForPixelFormat * (v41 >> v38);
      unint64_t v72 = v37 >> v35;
      uint64_t v66 = BytesPerPixelForPixelFormat * a6;
      uint64_t v67 = BytesPerPixelForPixelFormat * v25;
      while (1)
      {
        BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, v34);
        unsigned int v43 = (char *)CVPixelBufferGetBaseAddressOfPlane(v8, v34);
        size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, v34);
        size_t v45 = CVPixelBufferGetBytesPerRowOfPlane(v8, v34);
        if (v34)
        {
          uint64_t v46 = a3[2];
          size_t HeightOfPlane = (unint64_t)(v77 + a3[3]) >> v77;
          if (HeightOfPlane >= CVPixelBufferGetHeightOfPlane(a1, v34)) {
            size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, v34);
          }
          size_t WidthOfPlane = (unint64_t)(v76 + v46) >> v76;
          if (WidthOfPlane >= CVPixelBufferGetWidthOfPlane(a1, v34)) {
            size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, v34);
          }
          size_t v49 = v75 + BytesPerRowOfPlane * v73;
          size_t v50 = 2 * WidthOfPlane;
          size_t v51 = v74 + v45 * v72;
          if (!HeightOfPlane) {
            goto LABEL_52;
          }
        }
        else
        {
          size_t v52 = a3[3];
          if (v52 >= CVPixelBufferGetHeightOfPlane(a1, 0)) {
            size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
          }
          else {
            size_t HeightOfPlane = a3[3];
          }
          size_t v49 = v67 + BytesPerRowOfPlane * v71;
          size_t v53 = a3[2];
          size_t v51 = v66 + v45 * v69;
          if (v53 >= CVPixelBufferGetWidthOfPlane(a1, 0)) {
            size_t v50 = CVPixelBufferGetWidthOfPlane(a1, 0);
          }
          else {
            size_t v50 = a3[2];
          }
          CFTypeID v8 = pixelBuffer;
          if (!HeightOfPlane) {
            goto LABEL_52;
          }
        }
        unint64_t v54 = &BaseAddressOfPlane[v49];
        int v55 = &v43[v51];
        size_t v56 = v50 * BytesPerPixelForPixelFormat;
        do
        {
          memcpy(v55, v54, v56);
          v54 += BytesPerRowOfPlane;
          v55 += v45;
          --HeightOfPlane;
        }
        while (HeightOfPlane);
LABEL_52:
        if (CVPixelBufferGetPlaneCount(a1) <= ++v34) {
          goto LABEL_61;
        }
      }
    }
  }
LABEL_69:
  return FigSignalErrorAt();
}

uint64_t CMPhotoCreateCVPixelBufferNotBackedByIOSurface(uint64_t a1, OSType a2, size_t a3, size_t a4, unint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, CVPixelBufferRef *a9)
{
  CVPixelBufferRef pixelBufferOut = 0;
  if (!a9) {
    return 4294950306;
  }
  CFMutableDictionaryRef MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy) {
    return 4294950305;
  }
  CFDictionaryRef v16 = MutableCopy;
  if (a5 <= 1) {
    unint64_t v17 = 1;
  }
  else {
    unint64_t v17 = a5;
  }
  if (a6 <= 1) {
    unint64_t v18 = 1;
  }
  else {
    unint64_t v18 = a6;
  }
  unint64_t v19 = v17 + a3 + ~((a3 - 1) % v17);
  unint64_t v20 = v18 + a4 + ~((a4 - 1) % v18);
  CFDictionaryRemoveValue(MutableCopy, (const void *)*MEMORY[0x1E4F24D20]);
  if (a7 || v19 != a3 || v20 != a4)
  {
    unint64_t v27 = 0;
    unint64_t v28 = 0;
    uint64_t v21 = *MEMORY[0x1E4F24CE8];
    CMPhotoCFDictionaryGetSizeIfPresent(v16, (const void *)*MEMORY[0x1E4F24CE8], &v28);
    uint64_t v22 = *MEMORY[0x1E4F24CD0];
    CMPhotoCFDictionaryGetSizeIfPresent(v16, (const void *)*MEMORY[0x1E4F24CD0], &v27);
    unint64_t v23 = v28 <= v19 - a3 ? v19 - a3 : v28;
    unint64_t v24 = v27 <= v20 - a4 ? v20 - a4 : v27;
    CMPhotoCFDictionarySetSize(v16, v21, v23);
    CMPhotoCFDictionarySetSize(v16, v22, v24);
    if (a7) {
      CMPhotoCFDictionarySetSize(v16, *MEMORY[0x1E4F24C98], a7);
    }
  }
  uint64_t v25 = CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a3, a4, a2, v16, &pixelBufferOut);
  if (v25)
  {
    if (pixelBufferOut) {
      CFRelease(pixelBufferOut);
    }
  }
  else
  {
    *a9 = pixelBufferOut;
    CVPixelBufferRef pixelBufferOut = 0;
  }
  CFRelease(v16);
  return v25;
}

uint64_t CMPhotoCreateCGImageWithSurface(const __CFAllocator *a1, __IOSurface *a2, int a3, CGImageRef *a4)
{
  CFTypeRef cf = 0;
  uint64_t PixelBufferWithSurface = CMPhotoCreatePixelBufferWithSurface(a1, a2, 0, (CVPixelBufferRef *)&cf);
  if (!PixelBufferWithSurface) {
    uint64_t PixelBufferWithSurface = CMPhotoCreateCGImageWithPixelBuffer(a1, (CVPixelBufferRef)cf, a3, a4);
  }
  uint64_t v8 = PixelBufferWithSurface;
  if (cf) {
    CFRelease(cf);
  }
  return v8;
}

uint64_t CMPhotoModifyColorExtensionsForCompression(uint64_t a1, const __CFDictionary *a2, CFMutableDictionaryRef theDict, int a4, int a5, uint64_t a6, const void *a7)
{
  CGColorSpaceRef space = 0;
  if (!theDict) {
    return 0;
  }
  uint64_t v13 = (void *)*MEMORY[0x1E4F1EDF0];
  CFDictionaryRemoveValue(theDict, (const void *)*MEMORY[0x1E4F1EDF0]);
  unint64_t v14 = (void *)*MEMORY[0x1E4F24A90];
  CFDictionaryRemoveValue(theDict, (const void *)*MEMORY[0x1E4F24A90]);
  CFMutableDictionaryRef v15 = (void *)*MEMORY[0x1E4F24BC8];
  CFDictionaryRemoveValue(theDict, (const void *)*MEMORY[0x1E4F24BC8]);
  CFDictionaryRef v16 = (void *)*MEMORY[0x1E4F24C18];
  CFDictionaryRemoveValue(theDict, (const void *)*MEMORY[0x1E4F24C18]);
  if (a4) {
    return 0;
  }
  size_t v52 = v13;
  uint64_t v17 = FigCFDictionaryGetValue();
  int v55 = v15;
  uint64x2_t value = (void *)FigCFDictionaryGetValue();
  uint64_t v18 = FigCFDictionaryGetValue();
  size_t v53 = v16;
  key = v14;
  if (a7 && !v18) {
    uint64_t v18 = (uint64_t)CFRetain(a7);
  }
  BOOL v19 = 1;
  if ((int)a1 <= 1278226735)
  {
    uint64_t v21 = a1;
    uint64_t v22 = (const void *)v18;
    uint64_t v20 = v21;
    if ((v21 - 1278226488) > 0x30 || ((1 << (v21 - 56)) & 0x1400000000001) == 0) {
      goto LABEL_15;
    }
  }
  else
  {
    if ((a1 - 1278226736) <= 6 && ((1 << (a1 - 48)) & 0x45) != 0)
    {
      uint64_t v20 = a1;
LABEL_22:
      uint64_t v22 = (const void *)v18;
      goto LABEL_23;
    }
    uint64_t v23 = a1;
    if (a1 == 1717855600)
    {
      uint64_t v20 = a1;
      goto LABEL_22;
    }
    uint64_t v22 = (const void *)v18;
    uint64_t v20 = v23;
    if (v23 != 1751410032) {
LABEL_15:
    }
      BOOL v19 = v20 == 1751411059 || v20 == 1717856627;
  }
LABEL_23:
  uint64_t v25 = FigCFDictionaryGetValue();
  uint64_t v26 = FigCFDictionaryGetValue();
  unint64_t v27 = (const void *)v17;
  if (v17) {
    BOOL v28 = value == 0;
  }
  else {
    BOOL v28 = 1;
  }
  int v29 = !v28;
  if (v22) {
    char v30 = 1;
  }
  else {
    char v30 = v19;
  }
  if (v29 != 1) {
    char v30 = 0;
  }
  char v56 = v30;
  if ((a5 & 0xFFFFFFFD) != 1 || !value || !FigCFEqual() && !FigCFEqual())
  {
    char v32 = v56 ^ 1;
    if (a5 != 2) {
      char v32 = 1;
    }
    if ((v32 & 1) == 0)
    {
      CFDictionarySetValue(theDict, key, v27);
      CFDictionarySetValue(theDict, v55, value);
      FigCFDictionarySetValue();
      return 0;
    }
    uint64_t v34 = CMPhotoCreateColorSpaceFromPixelBufferAttachments(a2, v19, &space, 1, 0);
    CGColorSpaceRef v35 = space;
    if (v34)
    {
      uint64_t v33 = v34;
      unint64_t v37 = space;
      if (!space) {
        return v33;
      }
      goto LABEL_89;
    }
    if (v26) {
      int v36 = 1;
    }
    else {
      int v36 = v29;
    }
    if (v25) {
      int v36 = 1;
    }
    if (v36 != 1 || space)
    {
      unint64_t v37 = space;
      char v38 = v27;
      if (!space)
      {
        unint64_t v37 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC98]);
        CGColorSpaceRef space = v37;
        if (!v37) {
          return 4294950305;
        }
      }
      CGColorSpaceGetName(v37);
      CFTypeRef v39 = v22;
      if (a5 == 1)
      {
        char v42 = 0;
        int v41 = 1;
        uint64_t v40 = v20;
      }
      else
      {
        uint64_t v40 = v20;
        if (a5 == 2) {
          goto LABEL_65;
        }
        if (a5 == 3)
        {
          int v41 = 0;
          char v42 = 1;
        }
        else
        {
          unsigned int v43 = v37;
          if (FigCFEqual())
          {
            if (!CMPhotoPixelFormatIsFullRange(v40) && !v39)
            {
              if (*MEMORY[0x1E4F24C48]) {
                CFTypeRef v39 = CFRetain((CFTypeRef)*MEMORY[0x1E4F24C48]);
              }
              else {
                CFTypeRef v39 = 0;
              }
            }
            _setVUITripletsIfMatching(v37, theDict, v40, v38, value, (uint64_t)v39);
            if (v35)
            {
              if (!FigCFEqual())
              {
LABEL_114:
                uint64_t v33 = FigSignalErrorAt();
                goto LABEL_106;
              }
              FigCFDictionarySetValue();
            }
            uint64_t v33 = 0;
LABEL_106:
            unint64_t v37 = v43;
            goto LABEL_89;
          }
          if (FigCFEqual())
          {
            char v42 = 0;
            int v41 = 1;
          }
          else
          {
            if (!FigCFEqual()
              && !FigCFEqual()
              && (FigCFEqual()
               || FigCFEqual()
               || FigCFEqual()
               || FigCFEqual()))
            {
              goto LABEL_65;
            }
            char v42 = 0;
            int v41 = 1;
          }
        }
      }
      unsigned int v43 = v37;
      CFDataRef v44 = CGColorSpaceCopyICCData(v37);
      if (v44)
      {
        CFDataRef v45 = v44;
        CFDictionarySetValue(theDict, v52, v44);
        CFRelease(v45);
        unint64_t v37 = v43;
        if (v41) {
          _setVUITripletsIfMatching(v43, theDict, v40, v38, value, (uint64_t)v39);
        }
        if ((v42 & 1) == 0)
        {
LABEL_88:
          uint64_t v33 = 0;
LABEL_89:
          CFRelease(v37);
          return v33;
        }
LABEL_65:
        int v46 = CMPhotoPixelFormatContainsRGB(v40);
        int v47 = CMPhotoPixelFormatContainsGrayScale(v40);
        int v48 = v47;
        if ((v56 & 1) == 0
          && (!v38 || !v46 || !value)
          && (v47 ? (BOOL v49 = value == 0) : (BOOL v49 = 1), v49 ? (v50 = 0) : (v50 = 1), !v35 && (v50 & 1) == 0)
          || (v59 = 0, v60 = 0, size_t v58 = 0, CMPhotoGetTripletsForColorSpace(v37, v40, &v60, &v59, &v58)))
        {
          uint64_t v33 = FigSignalErrorAt();
          goto LABEL_89;
        }
        if (v38 || (char v38 = v60) != 0) {
          CFDictionarySetValue(theDict, key, v38);
        }
        size_t v51 = value;
        if (value || (size_t v51 = v59) != 0) {
          CFDictionarySetValue(theDict, v55, v51);
        }
        if (!(v46 | v48) && (v39 || (CFTypeRef v39 = v58) != 0)) {
          CFDictionarySetValue(theDict, v53, v39);
        }
        goto LABEL_88;
      }
      goto LABEL_114;
    }
  }
  return FigSignalErrorAt();
}

void _setVUITripletsIfMatching(CGColorSpace *a1, __CFDictionary *a2, uint64_t a3, const void *a4, const void *a5, uint64_t a6)
{
  if (a2)
  {
    if (a6) {
      FigCFDictionarySetValue();
    }
    CFArrayRef theArray = 0;
    uint64_t v14 = 0;
    CMPhotoGetTripletsForColorSpace(a1, a3, &v14, 0, 0);
    CMPhotoCreateAllowedTransferArrayForColorSpace(a1, &theArray);
    if (a4 && FigCFEqual()) {
      CFDictionarySetValue(a2, (const void *)*MEMORY[0x1E4F24A90], a4);
    }
    if (a5)
    {
      CFIndex v11 = 0;
      while (1)
      {
        CFIndex Count = (CFIndex)theArray;
        if (theArray) {
          CFIndex Count = CFArrayGetCount(theArray);
        }
        if (v11 >= Count) {
          break;
        }
        CFArrayGetValueAtIndex(theArray, v11++);
        if (FigCFEqual())
        {
          CFDictionarySetValue(a2, (const void *)*MEMORY[0x1E4F24BC8], a5);
          break;
        }
      }
    }
    if (theArray) {
      CFRelease(theArray);
    }
  }
}

uint64_t CMPhotoCreateFormatDescriptionForHEIFWriter(CFAllocatorRef allocator, CVImageBufferRef imageBuffer, int a3, double a4, double a5, double a6, double a7, uint64_t a8, int a9, CMVideoFormatDescriptionRef *a10, const void *a11)
{
  CMVideoFormatDescriptionRef formatDescriptionOut = 0;
  CMVideoFormatDescriptionRef v35 = 0;
  uint64x2_t value = 0;
  if (!a10) {
    return 0;
  }
  double v17 = a5;
  double v18 = a4;
  if (a4 == *MEMORY[0x1E4F1DB30] && a5 == *(double *)(MEMORY[0x1E4F1DB30] + 8))
  {
    CMPhotoGetPixelBufferCLAPAsRect(imageBuffer);
    double v18 = v22;
    double v17 = v23;
  }
  uint64_t v24 = CMVideoFormatDescriptionCreateForImageBuffer(allocator, imageBuffer, &formatDescriptionOut);
  if (v24)
  {
    uint64_t v31 = v24;
    CFMutableDictionaryRef MutableCopy = 0;
    CFDictionaryRef v28 = 0;
  }
  else
  {
    CFDictionaryRef Extensions = CMFormatDescriptionGetExtensions(formatDescriptionOut);
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(allocator, 0, Extensions);
    if (MutableCopy
      || (CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) != 0)
    {
      uint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(imageBuffer);
      CFDictionaryRef v28 = CVBufferCopyAttachments(imageBuffer, kCVAttachmentMode_ShouldPropagate);
      uint64_t PixelBufferCLAPDictionaryFromRect = CMPhotoModifyColorExtensionsForCompression(PixelFormatType, v28, MutableCopy, a3, a9, 0, a11);
      if (!PixelBufferCLAPDictionaryFromRect)
      {
        if (v18 == a6 && v17 == a7)
        {
          CFDictionaryRemoveValue(MutableCopy, (const void *)*MEMORY[0x1E4F24A78]);
          goto LABEL_17;
        }
        uint64_t PixelBufferCLAPDictionaryFromRect = CMPhotoCreatePixelBufferCLAPDictionaryFromRect(allocator, (__CFDictionary **)&value, v18, v17, 0.0, 0.0, a6, a7);
        if (!PixelBufferCLAPDictionaryFromRect)
        {
          CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E4F24A78], value);
LABEL_17:
          CMVideoCodecType MediaSubType = CMFormatDescriptionGetMediaSubType(formatDescriptionOut);
          uint64_t v31 = CMVideoFormatDescriptionCreate(allocator, MediaSubType, (int)v18, (int)v17, MutableCopy, &v35);
          if (v31)
          {
            if (v35) {
              CFRelease(v35);
            }
          }
          else
          {
            *a10 = v35;
            CMVideoFormatDescriptionRef v35 = 0;
          }
          goto LABEL_19;
        }
      }
      uint64_t v31 = PixelBufferCLAPDictionaryFromRect;
    }
    else
    {
      CFDictionaryRef v28 = 0;
      uint64_t v31 = 4294950305;
    }
  }
LABEL_19:
  if (formatDescriptionOut) {
    CFRelease(formatDescriptionOut);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (value) {
    CFRelease(value);
  }
  if (v28) {
    CFRelease(v28);
  }
  return v31;
}

uint64_t CMPhotoGetPixelFormatCompressionType(int a1)
{
  if (CMPhotoPixelFormatIsLossyCompressed50(a1)) {
    return 3;
  }
  if (CMPhotoPixelFormatIsLossyCompressed62(a1)) {
    return 4;
  }
  if (CMPhotoPixelFormatIsLossyCompressed75(a1)) {
    return 5;
  }
  return 2 * (CMPhotoPixelFormatIsAGXCompressed(a1) != 0);
}

uint64_t CMPhotoWritePixelBufferToY4MURL(__CVBuffer *a1, uint64_t a2, int a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v24 = 0;
  uint64_t v3 = 4294950306;
  if (a1 && a2)
  {
    double PixelBufferCLAPAsRect = CMPhotoGetPixelBufferCLAPAsRect(a1);
    double v8 = v7;
    double v10 = v9;
    double v12 = v11;
    if (CVPixelBufferGetPixelFormatType(a1) != 875704422 || (vcvtad_u64_f64(PixelBufferCLAPAsRect) & 1) != 0) {
      return FigSignalErrorAt();
    }
    unint64_t v13 = vcvtad_u64_f64(v10);
    unint64_t v14 = vcvtad_u64_f64(v12);
    BOOL v15 = (vcvtad_u64_f64(v8) & 1) == 0 && (v13 & 1) == 0;
    if (!v15 || (v14 & 1) != 0) {
      return FigSignalErrorAt();
    }
    uint64_t LengthAtOffset = FigFileForkOpenMainByCFURL();
    if (LengthAtOffset) {
      return LengthAtOffset;
    }
    uint64_t v23 = 0;
    uint64_t LengthAtOffset = FigFileForkGetLengthAtOffset();
    if (LengthAtOffset) {
      return LengthAtOffset;
    }
    uint64_t v22 = 0;
    if (!a3)
    {
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      *(_OWORD *)__str = 0u;
      long long v26 = 0u;
      unsigned int v18 = snprintf(__str, 0x80uLL, "YUV4MPEG2 W%zd H%zd F25:1 Ip C420jpeg XYSCSS=420JPEG\n", v13, v14);
      if (v18 - 128 < 0xFFFFFF81) {
        return 4294950302;
      }
      uint64_t v19 = v18;
      uint64_t LengthAtOffset = FigFileForkWrite();
      if (LengthAtOffset) {
        return LengthAtOffset;
      }
      if (v22 != v19) {
        return 4294950304;
      }
      v23 += v19;
    }
    strcpy(v21, "FRAME\n");
    uint64_t LengthAtOffset = FigFileForkWrite();
    if (LengthAtOffset) {
      return LengthAtOffset;
    }
    return 4294950304;
  }
  return v3;
}

uint64_t CMPhotoWritePixelBufferToURL(__CVBuffer *a1, const __CFURL *a2)
{
  return _cmphotoWritePixelBufferToURL(a1, a2, 0);
}

uint64_t _cmphotoWritePixelBufferToURL(__CVBuffer *a1, CFURLRef url, int a3)
{
  uint64_t v12 = 0;
  uint64_t v3 = 4294950306;
  if (!a1 || !url) {
    return v3;
  }
  CFStringRef v7 = CFURLCopyPathExtension(url);
  CFStringRef v8 = v7;
  if (v7 && CFStringCompare(v7, @"y4m", 1uLL) == kCFCompareEqualTo)
  {
    uint64_t v3 = CMPhotoWritePixelBufferToY4MURL(a1, (uint64_t)url, 0);
  }
  else
  {
    uint64_t v9 = FigFileForkOpenMainByCFURL();
    if (!v9)
    {
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = *(void *)"";
      v11[2] = ___cmphotoWritePixelBufferToURL_block_invoke;
      v11[3] = &__block_descriptor_tmp_401;
      v11[4] = v12;
      uint64_t v9 = _writePixelBufferWithBlock(a1, a3, (uint64_t)v11);
    }
    uint64_t v3 = v9;
    if (!v8) {
      goto LABEL_11;
    }
  }
  CFRelease(v8);
LABEL_11:
  if (v12) {
    FigFileForkClose();
  }
  return v3;
}

uint64_t _writePixelBufferWithBlock(__CVBuffer *a1, int a2, uint64_t a3)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v4 = a1;
  uint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  double PixelBufferCLAPAsRect = CMPhotoGetPixelBufferCLAPAsRect(v4);
  double v8 = v7;
  double v10 = v9;
  double v12 = v11;
  uint64_t v13 = CVPixelBufferLockBaseAddress(v4, 1uLL);
  if (v13) {
    return v13;
  }
  unint64_t v14 = vcvtad_u64_f64(PixelBufferCLAPAsRect);
  unint64_t v15 = vcvtad_u64_f64(v8);
  unint64_t v47 = vcvtad_u64_f64(v10);
  unint64_t v48 = vcvtad_u64_f64(v12);
  uint64_t BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(PixelFormatType);
  if (CVPixelBufferGetPlaneCount(v4) >= 2 && CVPixelBufferGetPlaneCount(v4) != 1)
  {
    if (CVPixelBufferGetPlaneCount(v4))
    {
      unsigned int v45 = PixelFormatType;
      size_t v24 = 0;
      uint64_t v25 = 0;
      unint64_t v43 = v15 & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = v15 >> 1;
      CVPixelBufferRef pixelBuffer = v4;
      while (1)
      {
        BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(v4, v24);
        size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v4, v24);
        __int16 v49 = 0;
        uint64_t IsSubsampled = CMPhotoPixelFormatIsSubsampled(v45, (unsigned char *)&v49 + 1, &v49, 0, 0);
        if (IsSubsampled) {
          goto LABEL_38;
        }
        BOOL v29 = (_BYTE)v49 != 0;
        unint64_t v30 = v47 + (v47 | 0xFFFFFFFFFFFFFFFELL) + 2;
        if (!HIBYTE(v49)) {
          unint64_t v30 = 2 * v47;
        }
        BOOL v31 = v24 != 0;
        if (v24) {
          unint64_t v32 = v30;
        }
        else {
          unint64_t v32 = v47;
        }
        BOOL v33 = !v31 || !v29;
        if (v31 && v29) {
          unint64_t v34 = (v48 + 1) >> 1;
        }
        else {
          unint64_t v34 = v48;
        }
        unint64_t v35 = v43;
        if (!v33) {
          unint64_t v35 = v42;
        }
        int v36 = &BaseAddressOfPlane[BytesPerPixelForPixelFormat * (v14 & 0xFFFFFFFFFFFFFFFELL) + v35 * BytesPerRowOfPlane];
        if (CMPhotoPixelFormatIsPackedYUV(v45)) {
          uint64_t v37 = (2 * (((v32 + 2) * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64)) & 0xFFFFFFFFFFFFFFFCLL;
        }
        else {
          uint64_t v37 = v32 * BytesPerPixelForPixelFormat;
        }
        if (a2)
        {
          uint64_t v38 = (*(uint64_t (**)(uint64_t, char *, unint64_t, uint64_t))(a3 + 16))(a3, v36, v34 * BytesPerRowOfPlane, v25);
          if (v38) {
            goto LABEL_46;
          }
          v25 += v34 * BytesPerRowOfPlane;
        }
        else if (v34)
        {
          while (1)
          {
            uint64_t v38 = (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(a3 + 16))(a3, v36, v37, v25);
            if (v38) {
              break;
            }
            v36 += BytesPerRowOfPlane;
            v25 += v37;
            if (!--v34) {
              goto LABEL_33;
            }
          }
LABEL_46:
          uint64_t v39 = v38;
          uint64_t v4 = pixelBuffer;
          goto LABEL_44;
        }
LABEL_33:
        ++v24;
        uint64_t v4 = pixelBuffer;
        if (CVPixelBufferGetPlaneCount(pixelBuffer) <= v24) {
          goto LABEL_43;
        }
      }
    }
    goto LABEL_43;
  }
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(v4);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(v4);
  uint64_t v19 = &BaseAddress[BytesPerPixelForPixelFormat * v14 + BytesPerRow * v15];
  if (CMPhotoPixelFormatIsPackedRAW(PixelFormatType))
  {
    if (CMPhotoGetBitDepthForPixelFormat(PixelFormatType) == 12)
    {
      unint64_t v20 = v48;
      uint64_t v21 = (unint64_t)((double)v47 * 1.5);
    }
    else
    {
      uint64_t v21 = CMPhotoAlignValue(5 * ((v47 + 3) >> 2), 0x140uLL);
      unint64_t v20 = v48;
    }
  }
  else
  {
    uint64_t v22 = BytesPerPixelForPixelFormat * v47;
    uint64_t v23 = 2 * BytesPerPixelForPixelFormat * v47;
    unint64_t v20 = v48;
    if (PixelFormatType == 1647719528)
    {
      unint64_t v20 = v48 >> 1;
      uint64_t v21 = v23;
    }
    else
    {
      uint64_t v21 = v22;
    }
  }
  if (!a2)
  {
    if (v20)
    {
      uint64_t v40 = 0;
      do
      {
        uint64_t IsSubsampled = (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(a3 + 16))(a3, v19, v21, v40);
        if (IsSubsampled) {
          goto LABEL_38;
        }
        v19 += BytesPerRow;
        v40 += v21;
      }
      while (--v20);
    }
LABEL_43:
    uint64_t v39 = 0;
    goto LABEL_44;
  }
  uint64_t IsSubsampled = (*(uint64_t (**)(uint64_t, char *, unint64_t, void))(a3 + 16))(a3, v19, v20 * BytesPerRow, 0);
LABEL_38:
  uint64_t v39 = IsSubsampled;
LABEL_44:
  CVPixelBufferUnlockBaseAddress(v4, 1uLL);
  return v39;
}

BOOL CMPhotoIsOutputFormatSupportedForNativeFloatingPoint(int a1, int a2)
{
  BOOL result = 0;
  if (a1 > 1717856626)
  {
    if (a1 > 1751411058)
    {
      if (a1 != 1751411059) {
        return a1 == 1751527984 && a2 == 1751527984;
      }
    }
    else if (a1 != 1717856627)
    {
      int v4 = 1751410032;
LABEL_8:
      if (a1 != v4) {
        return result;
      }
      BOOL v5 = a2 == 1717855600;
      int v6 = 1751410032;
      return v5 || a2 == v6;
    }
    BOOL v5 = a2 == 1717856627;
    int v6 = 1751411059;
    return v5 || a2 == v6;
  }
  if (a1 != 16 && a1 != 1111970369)
  {
    int v4 = 1717855600;
    goto LABEL_8;
  }
  BOOL result = 1;
  if (a2 <= 1651926375)
  {
    if (a2 <= 1380410944)
    {
      if (a2 == 1278226534) {
        return result;
      }
      int v7 = 1278226536;
    }
    else
    {
      if (a2 == 1380410945 || a2 == 1380411457) {
        return result;
      }
      int v7 = 1647719528;
    }
  }
  else if (a2 > 1751410031)
  {
    if (a2 == 1751410032 || a2 == 1751411059) {
      return result;
    }
    int v7 = 1751527984;
  }
  else
  {
    if (a2 == 1651926376 || a2 == 1717855600) {
      return result;
    }
    int v7 = 1717856627;
  }
  if (a2 != v7) {
    return 0;
  }
  return result;
}

uint64_t CMPhotoPixelBufferIsHLG(__CVBuffer *a1)
{
  CGColorSpaceRef s = 0;
  if (!a1) {
    return 0;
  }
  CFTypeRef v2 = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24BC8], 0);
  if (v2) {
    uint64_t v3 = FigCFEqual();
  }
  else {
    uint64_t v3 = 0;
  }
  int v4 = CMPhotoCreateColorSpaceFromPixelBuffer(a1, &s, 1, 0);
  CGColorSpaceRef v5 = s;
  if (!v4 && s) {
    uint64_t v3 = v3 | CGColorSpaceIsHLGBased(s);
  }
  if (v2) {
    CFRelease(v2);
  }
  if (v5) {
    CFRelease(v5);
  }
  return v3;
}

uint64_t CMPhotoPixelBufferIsPQ(__CVBuffer *a1)
{
  CGColorSpaceRef s = 0;
  if (!a1) {
    return 0;
  }
  CFTypeRef v2 = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24BC8], 0);
  if (v2) {
    uint64_t v3 = FigCFEqual();
  }
  else {
    uint64_t v3 = 0;
  }
  int v4 = CMPhotoCreateColorSpaceFromPixelBuffer(a1, &s, 1, 0);
  CGColorSpaceRef v5 = s;
  if (!v4 && s) {
    uint64_t v3 = v3 | CGColorSpaceIsPQBased(s);
  }
  if (v2) {
    CFRelease(v2);
  }
  if (v5) {
    CFRelease(v5);
  }
  return v3;
}

uint64_t CMPhotoPixelBufferHasDisplayP3Primaries(__CVBuffer *a1)
{
  CFTypeRef v6 = 0;
  CFTypeRef cf = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24A90], 0);
  if (!cf)
  {
    if (CMPhotoCreateColorSpaceFromPixelBuffer(a1, (CGColorSpace **)&v6, 1, 0))
    {
      uint64_t v4 = 0;
      goto LABEL_6;
    }
    CFTypeRef v2 = (CGColorSpace *)v6;
    uint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
    CMPhotoGetTripletsForColorSpace(v2, PixelFormatType, &cf, 0, 0);
  }
  uint64_t v4 = FigCFEqual();
  if (cf) {
    CFRelease(cf);
  }
LABEL_6:
  if (v6) {
    CFRelease(v6);
  }
  return v4;
}

uint64_t CMPhotoPixelBufferHasSRGBPrimaries(__CVBuffer *a1)
{
  CFTypeRef v7 = 0;
  CFTypeRef cf = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24A90], 0);
  CFTypeRef v2 = (CFTypeRef *)MEMORY[0x1E4F24AB0];
  if (!cf)
  {
    if (CMPhotoCreateColorSpaceFromPixelBuffer(a1, (CGColorSpace **)&v7, 1, 0))
    {
      uint64_t v5 = 0;
      goto LABEL_8;
    }
    uint64_t v3 = (CGColorSpace *)v7;
    if (v7)
    {
      uint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
      CMPhotoGetTripletsForColorSpace(v3, PixelFormatType, &cf, 0, 0);
    }
    else
    {
      CFTypeRef cf = CFRetain(*v2);
    }
  }
  uint64_t v5 = FigCFEqual();
  if (cf) {
    CFRelease(cf);
  }
LABEL_8:
  if (v7) {
    CFRelease(v7);
  }
  return v5;
}

uint64_t CMPhotoPixelBufferIsLinear(__CVBuffer *a1)
{
  uint64_t v13 = 0;
  if (!a1) {
    return 0;
  }
  CFTypeRef v2 = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24BC8], 0);
  if (v2) {
    uint64_t v3 = FigCFEqual();
  }
  else {
    uint64_t v3 = 0;
  }
  CFDictionaryRef v4 = CVBufferCopyAttachments(a1, kCVAttachmentMode_ShouldPropagate);
  int v5 = CMPhotoCreateColorSpaceFromPixelBufferAttachments(v4, 0, &v13, 1, 1);
  CGColorSpaceRef v6 = 0;
  CFTypeRef v7 = v13;
  if (v5 || !v13)
  {
    CGColorSpaceRef v8 = 0;
    CGColorSpaceRef v9 = 0;
    CGColorSpaceRef v10 = 0;
    CGColorSpaceRef v11 = 0;
    goto LABEL_13;
  }
  CGColorSpaceRef v6 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC88]);
  if (CGColorSpaceEqualToColorSpace())
  {
    CGColorSpaceRef v8 = 0;
LABEL_10:
    CGColorSpaceRef v9 = 0;
LABEL_11:
    CGColorSpaceRef v10 = 0;
    goto LABEL_12;
  }
  CGColorSpaceRef v8 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC78]);
  if (CGColorSpaceEqualToColorSpace()) {
    goto LABEL_10;
  }
  CGColorSpaceRef v9 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC18]);
  if (CGColorSpaceEqualToColorSpace()) {
    goto LABEL_11;
  }
  CGColorSpaceRef v10 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC80]);
  if (!CGColorSpaceEqualToColorSpace())
  {
    CGColorSpaceRef v11 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC70]);
    uint64_t v3 = v3 | CGColorSpaceEqualToColorSpace();
    goto LABEL_13;
  }
LABEL_12:
  CGColorSpaceRef v11 = 0;
  uint64_t v3 = v3 | 1;
LABEL_13:
  if (v2) {
    CFRelease(v2);
  }
  if (v4) {
    CFRelease(v4);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (v6) {
    CFRelease(v6);
  }
  if (v8) {
    CFRelease(v8);
  }
  if (v9) {
    CFRelease(v9);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (v11) {
    CFRelease(v11);
  }
  return v3;
}

uint64_t CMPhotoPixelBufferIsExtendedLinear(__CVBuffer *a1)
{
  CFTypeRef cf = 0;
  if (!a1) {
    return 0;
  }
  CFDictionaryRef v1 = CVBufferCopyAttachments(a1, kCVAttachmentMode_ShouldPropagate);
  int ColorSpaceFromPixelBufferAttachments = CMPhotoCreateColorSpaceFromPixelBufferAttachments(v1, 0, (CGColorSpace **)&cf, 1, 1);
  CGColorSpaceRef v3 = 0;
  uint64_t v4 = 0;
  CFTypeRef v5 = cf;
  CGColorSpaceRef v6 = 0;
  CGColorSpaceRef v7 = 0;
  CGColorSpaceRef v8 = 0;
  if (!ColorSpaceFromPixelBufferAttachments && cf)
  {
    CGColorSpaceRef v3 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DBE0]);
    if (CGColorSpaceEqualToColorSpace())
    {
      CGColorSpaceRef v6 = 0;
    }
    else
    {
      CGColorSpaceRef v6 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DBD0]);
      if ((CGColorSpaceEqualToColorSpace() & 1) == 0)
      {
        CGColorSpaceRef v7 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DBD8]);
        if ((CGColorSpaceEqualToColorSpace() & 1) == 0)
        {
          CGColorSpaceRef v8 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DBC8]);
          uint64_t v4 = CGColorSpaceEqualToColorSpace();
          if (!v1) {
            goto LABEL_11;
          }
          goto LABEL_10;
        }
        goto LABEL_8;
      }
    }
    CGColorSpaceRef v7 = 0;
LABEL_8:
    CGColorSpaceRef v8 = 0;
    uint64_t v4 = 1;
  }
  if (v1) {
LABEL_10:
  }
    CFRelease(v1);
LABEL_11:
  if (v5) {
    CFRelease(v5);
  }
  if (v3) {
    CFRelease(v3);
  }
  if (v6) {
    CFRelease(v6);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (v8) {
    CFRelease(v8);
  }
  return v4;
}

uint64_t CMPhotoGetDefaultImageSubsamplingForEncodeFromPixelFormat(uint64_t a1, int a2, int a3)
{
  int UncompressedPixelFormatFromCompressedPixelFormat = CMPhotoGetUncompressedPixelFormatFromCompressedPixelFormat(a1);
  uint64_t result = 5;
  if (UncompressedPixelFormatFromCompressedPixelFormat > 1717855599)
  {
    if (UncompressedPixelFormatFromCompressedPixelFormat <= 1952854577)
    {
      if (UncompressedPixelFormatFromCompressedPixelFormat <= 1932996148)
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat > 1751410031)
        {
          if (UncompressedPixelFormatFromCompressedPixelFormat == 1751410032) {
            goto LABEL_65;
          }
          int v11 = 1751411059;
        }
        else
        {
          if (UncompressedPixelFormatFromCompressedPixelFormat == 1717855600) {
            goto LABEL_65;
          }
          int v11 = 1717856627;
        }
        goto LABEL_64;
      }
      if (UncompressedPixelFormatFromCompressedPixelFormat <= 1936077875)
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat == 1932996149) {
          goto LABEL_65;
        }
        int v8 = 1936077362;
        goto LABEL_52;
      }
      if (UncompressedPixelFormatFromCompressedPixelFormat == 1936077876) {
        goto LABEL_56;
      }
      if (UncompressedPixelFormatFromCompressedPixelFormat == 1937125938) {
        goto LABEL_53;
      }
      int v9 = 1937126452;
    }
    else
    {
      if (UncompressedPixelFormatFromCompressedPixelFormat > 2016687155)
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat <= 2019963955)
        {
          if (UncompressedPixelFormatFromCompressedPixelFormat == 2016687156) {
            goto LABEL_56;
          }
          int v8 = 2019963442;
        }
        else
        {
          if (UncompressedPixelFormatFromCompressedPixelFormat == 2019963956) {
            goto LABEL_56;
          }
          if (UncompressedPixelFormatFromCompressedPixelFormat == 2037741171) {
            goto LABEL_53;
          }
          int v8 = 2037741158;
        }
LABEL_52:
        if (UncompressedPixelFormatFromCompressedPixelFormat != v8) {
          return result;
        }
        goto LABEL_53;
      }
      if (UncompressedPixelFormatFromCompressedPixelFormat > 1953903153)
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat == 1953903154) {
          goto LABEL_53;
        }
        if (UncompressedPixelFormatFromCompressedPixelFormat == 1953903668) {
          goto LABEL_56;
        }
        int v8 = 2016686642;
        goto LABEL_52;
      }
      if (UncompressedPixelFormatFromCompressedPixelFormat == 1952854578) {
        goto LABEL_53;
      }
      int v9 = 1952855092;
    }
LABEL_44:
    if (UncompressedPixelFormatFromCompressedPixelFormat != v9) {
      return result;
    }
    goto LABEL_56;
  }
  if (UncompressedPixelFormatFromCompressedPixelFormat > 1111970368)
  {
    if (UncompressedPixelFormatFromCompressedPixelFormat <= 1278226735)
    {
      if ((UncompressedPixelFormatFromCompressedPixelFormat - 1278226488) <= 0x30
        && ((1 << (UncompressedPixelFormatFromCompressedPixelFormat - 56)) & 0x1400000000001) != 0)
      {
        goto LABEL_65;
      }
      int v10 = 1111970369;
    }
    else
    {
      if (UncompressedPixelFormatFromCompressedPixelFormat <= 1279340599)
      {
        unsigned int v7 = UncompressedPixelFormatFromCompressedPixelFormat - 1278226736;
        if (v7 > 6 || ((1 << v7) & 0x45) == 0) {
          return result;
        }
LABEL_65:
        if (CMPhotoIs400EncodeAvailable(a2)) {
          return 6;
        }
        else {
          return 5;
        }
      }
      if (UncompressedPixelFormatFromCompressedPixelFormat == 1279340600
        || UncompressedPixelFormatFromCompressedPixelFormat == 1279340854)
      {
        goto LABEL_65;
      }
      int v10 = 1380401729;
    }
    if (UncompressedPixelFormatFromCompressedPixelFormat != v10) {
      return result;
    }
    goto LABEL_41;
  }
  if (UncompressedPixelFormatFromCompressedPixelFormat <= 843264309)
  {
    if (UncompressedPixelFormatFromCompressedPixelFormat > 825437746)
    {
      if (UncompressedPixelFormatFromCompressedPixelFormat == 825437747) {
        goto LABEL_65;
      }
      int v11 = 843264056;
    }
    else
    {
      if (UncompressedPixelFormatFromCompressedPixelFormat == 32)
      {
LABEL_41:
        BOOL IsRGBEncodeAvailable = CMPhotoIsRGBEncodeAvailable(a2);
        goto LABEL_57;
      }
      int v11 = 825306677;
    }
LABEL_64:
    if (UncompressedPixelFormatFromCompressedPixelFormat != v11) {
      return result;
    }
    goto LABEL_65;
  }
  if (UncompressedPixelFormatFromCompressedPixelFormat <= 875704949)
  {
    if (UncompressedPixelFormatFromCompressedPixelFormat == 843264310) {
      goto LABEL_65;
    }
    int v8 = 875704934;
    goto LABEL_52;
  }
  if (UncompressedPixelFormatFromCompressedPixelFormat != 875704950)
  {
    if (UncompressedPixelFormatFromCompressedPixelFormat != 875836518)
    {
      int v9 = 875836534;
      goto LABEL_44;
    }
LABEL_56:
    BOOL IsRGBEncodeAvailable = CMPhotoIs444EncodeAvailable(a2, a3);
LABEL_57:
    if (IsRGBEncodeAvailable) {
      return 1;
    }
    else {
      return 5;
    }
  }
LABEL_53:
  if (CMPhotoIs422EncodeAvailable(a2, a3)) {
    return 3;
  }
  else {
    return 5;
  }
}

uint64_t CMPhotoSubsamplingIsSupportedForCodec(int a1, int a2, int a3)
{
  switch(a1)
  {
    case 1:
      BOOL v4 = CMPhotoIs444EncodeAvailable(a2, a3);
      goto LABEL_7;
    case 2:
    case 4:
      return a2 == 1785750887;
    case 3:
      BOOL v4 = CMPhotoIs422EncodeAvailable(a2, a3);
      goto LABEL_7;
    case 5:
      return 1;
    case 6:
      BOOL v4 = CMPhotoIs400EncodeAvailable(a2);
LABEL_7:
      uint64_t result = v4;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

vImage_Error CMPhotoCreateHalfPrecisionPixelBufferFromFullPrecisionSource(__CVBuffer *a1, const void *a2, int a3, int a4, int a5, __int16 a6, __CVBuffer **a7)
{
  CVPixelBufferRef v40 = 0;
  vImage_Error v7 = 4294950306;
  if (!a1 || !a7) {
    return v7;
  }
  signed int PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  signed int v16 = PixelFormatType;
  vImage_Error v7 = 4294950301;
  if (PixelFormatType > 1717855599)
  {
    if (PixelFormatType == 1717856627) {
      goto LABEL_9;
    }
    int v17 = 1717855600;
  }
  else
  {
    if (PixelFormatType == 1278226534) {
      goto LABEL_9;
    }
    int v17 = 1380410945;
  }
  if (PixelFormatType != v17) {
    return v7;
  }
LABEL_9:
  unint64_t v34 = a2;
  size_t Width = CVPixelBufferGetWidth(a1);
  size_t Height = CVPixelBufferGetHeight(a1);
  uint64_t v20 = CVPixelBufferLockBaseAddress(a1, 1uLL);
  if (v20) {
    return v20;
  }
  int v36 = a4;
  uint64_t v37 = a7;
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  BaseAddresCGColorSpaceRef s = (char *)CVPixelBufferGetBaseAddress(a1);
  if (v16 == 1278226534)
  {
    uint64_t v23 = 1278226536;
  }
  else
  {
    uint64_t v23 = 1751410032;
    if (v16 == 1717856627)
    {
      uint64_t v23 = 1751411059;
    }
    else if (v16 != 1717855600)
    {
      uint64_t v23 = 0;
    }
  }
  size_t v24 = *v37;
  if (*v37)
  {
    CVPixelBufferRef v40 = *v37;
    if (_verifyEqualPixelBufferFormatSizeClap(v24, v23, Width, Height))
    {
      int v25 = 0;
      goto LABEL_24;
    }
    int v32 = 0;
    int v25 = 0;
    vImage_Error v7 = 4294950306;
  }
  else
  {
    if (a3) {
      uint64_t v26 = CMPhotoSurfacePoolCreatePixelBuffer(v34, v23, Width, Height, 1, 0, 0, 0, 64, 0, &v40);
    }
    else {
      uint64_t v26 = CMPhotoCreateCVPixelBufferNotBackedByIOSurface(*MEMORY[0x1E4F1CF80], v23, Width, Height, 0, 0, 64, 0, &v40);
    }
    vImage_Error v7 = v26;
    if (!v26)
    {
      int v25 = 1;
      size_t v24 = v40;
LABEL_24:
      vImage_Error v27 = CVPixelBufferLockBaseAddress(v24, 0);
      if (v27)
      {
        vImage_Error v7 = v27;
        int v32 = 0;
      }
      else
      {
        int v35 = v25;
        size_t v28 = CVPixelBufferGetBytesPerRow(v40);
        BOOL v29 = (char *)CVPixelBufferGetBaseAddress(v40);
        src.data = BaseAddress;
        src.double height = Height;
        src.double width = Width;
        src.rowByteCGColorSpaceRef s = BytesPerRow;
        dest.data = v29;
        dest.double height = Height;
        dest.double width = Width;
        dest.rowByteCGColorSpaceRef s = v28;
        vImage_Error v7 = vImageConvert_PlanarFtoPlanar16F(&src, &dest, 0);
        if (v7)
        {
          int v32 = 1;
        }
        else
        {
          if (v36 && Height)
          {
            for (uint64_t i = 0; i != Height; ++i)
            {
              if (Width)
              {
                for (uint64_t j = 0; j != Width; ++j)
                {
                  if (*(_DWORD *)&BaseAddress[4 * j] == a5) {
                    *(_WORD *)&v29[2 * j] = a6;
                  }
                }
              }
              BaseAddress += BytesPerRow;
              v29 += v28;
            }
          }
          CVPixelBufferUnlockBaseAddress(v40, 0);
          vImage_Error v7 = 0;
          int v32 = 0;
          *uint64_t v37 = v40;
          CVPixelBufferRef v40 = 0;
        }
        int v25 = v35;
      }
      goto LABEL_37;
    }
    int v32 = 0;
    int v25 = 1;
  }
LABEL_37:
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  if (v32 && v40) {
    CVPixelBufferUnlockBaseAddress(v40, 0);
  }
  if (v25 && v40) {
    CFRelease(v40);
  }
  return v7;
}

BOOL _verifyEqualPixelBufferFormatSizeClap(__CVBuffer *a1, int a2, uint64_t a3, uint64_t a4)
{
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  BOOL v9 = CVPixelBufferGetWidth(a1) == a3 && CVPixelBufferGetHeight(a1) == a4;
  int HasAttachment = CVBufferHasAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24A78]);
  BOOL v11 = PixelFormatType == a2 && v9;
  return !HasAttachment && v11;
}

uint64_t CMPhotoCreateFullPrecisionPixelBufferFromHalfPrecisionSource(__CVBuffer *a1, const void *a2, int a3, int a4, int a5, __CVBuffer **a6)
{
  CVPixelBufferRef v35 = 0;
  vImage_Error v6 = 4294950306;
  if (!a1 || !a6) {
    return v6;
  }
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  OSType v14 = PixelFormatType;
  if (PixelFormatType == 1278226536 || PixelFormatType == 1751410032 || PixelFormatType == 1751411059)
  {
    size_t Width = CVPixelBufferGetWidth(a1);
    size_t Height = CVPixelBufferGetHeight(a1);
    uint64_t v17 = CVPixelBufferLockBaseAddress(a1, 1uLL);
    if (!v17)
    {
      int v30 = a3;
      int v32 = a6;
      size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
      BaseAddresCGColorSpaceRef s = (unsigned __int16 *)CVPixelBufferGetBaseAddress(a1);
      if (v14 == 1278226536)
      {
        uint64_t v20 = 1278226534;
      }
      else
      {
        uint64_t v20 = 1717855600;
        if (v14 == 1751411059)
        {
          uint64_t v20 = 1717856627;
        }
        else if (v14 != 1751410032)
        {
          uint64_t v20 = 0;
        }
      }
      uint64_t v22 = *v32;
      if (*v32)
      {
        CVPixelBufferRef v35 = *v32;
        if (!_verifyEqualPixelBufferFormatSizeClap(v22, v20, Width, Height))
        {
          int v29 = 0;
          int v31 = 0;
          vImage_Error v6 = 4294950306;
          goto LABEL_33;
        }
        int v31 = 0;
      }
      else
      {
        uint64_t v23 = CMPhotoSurfacePoolCreatePixelBuffer(a2, v20, Width, Height, 1, 0, 0, 0, 0, 0, &v35);
        if (v23)
        {
          vImage_Error v6 = v23;
          int v31 = 1;
LABEL_45:
          int v29 = 0;
LABEL_33:
          CVPixelBufferUnlockBaseAddress(a1, 1uLL);
          if (v29 && v35) {
            CVPixelBufferUnlockBaseAddress(v35, 0);
          }
          if (v31)
          {
            if (v35) {
              CFRelease(v35);
            }
          }
          return v6;
        }
        int v31 = 1;
        uint64_t v22 = v35;
      }
      vImage_Error v24 = CVPixelBufferLockBaseAddress(v22, 0);
      if (!v24)
      {
        size_t v25 = CVPixelBufferGetBytesPerRow(v35);
        uint64_t v26 = (char *)CVPixelBufferGetBaseAddress(v35);
        src.data = BaseAddress;
        src.double height = Height;
        src.double width = Width;
        src.rowByteCGColorSpaceRef s = BytesPerRow;
        dest.data = v26;
        dest.double height = Height;
        dest.double width = Width;
        dest.rowByteCGColorSpaceRef s = v25;
        vImage_Error v6 = vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
        if (v6)
        {
          int v29 = 1;
        }
        else
        {
          if (v30 && Height)
          {
            for (uint64_t i = 0; i != Height; ++i)
            {
              if (Width)
              {
                for (uint64_t j = 0; j != Width; ++j)
                {
                  if (BaseAddress[j] == a4) {
                    *(_DWORD *)&v26[4 * j] = a5;
                  }
                }
              }
              BaseAddresCGColorSpaceRef s = (unsigned __int16 *)((char *)BaseAddress + BytesPerRow);
              v26 += v25;
            }
          }
          CVPixelBufferUnlockBaseAddress(v35, 0);
          CMPhotoPropagateColorPropertiesFromSourceBuffer(a1, v35);
          vImage_Error v6 = 0;
          int v29 = 0;
          *int v32 = v35;
          CVPixelBufferRef v35 = 0;
        }
        goto LABEL_33;
      }
      vImage_Error v6 = v24;
      goto LABEL_45;
    }
    return v17;
  }
  return FigSignalErrorAt();
}

uint64_t CMPhotoCreateYUVPixelBufferWithDithering(__CVBuffer *a1, uint64_t a2, int a3, void *a4)
{
  CVPixelBufferRef v159 = 0;
  if (a3 == 875704422)
  {
    CFTypeRef v5 = a1;
    size_t Width = CVPixelBufferGetWidth(a1);
    size_t Height = CVPixelBufferGetHeight(v5);
    uint64_t v8 = CMPhotoSurfacePoolCreatePixelBuffer(0, 875704422, Width, Height, 1, 0, 0, 0, 0, 0, &v159);
    CVPixelBufferRef v9 = v159;
    if (v8) {
      goto LABEL_88;
    }
    uint64_t v10 = CVPixelBufferLockBaseAddress(v159, 0);
    if (v10)
    {
      uint64_t v8 = v10;
      goto LABEL_87;
    }
    int v11 = 1;
    uint64_t v12 = CVPixelBufferLockBaseAddress(v5, 1uLL);
    if (v12)
    {
      uint64_t v8 = v12;
      goto LABEL_84;
    }
    uint64_t v13 = v159;
    size_t v14 = CVPixelBufferGetWidth(v5);
    size_t v15 = CVPixelBufferGetHeight(v5);
    size_t v143 = v14;
    if (((v14 | v15) & 1) == 0)
    {
      size_t BytesPerRow = CVPixelBufferGetBytesPerRow(v5);
      OSType PixelFormatType = CVPixelBufferGetPixelFormatType(v5);
      size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v13, 0);
      size_t v135 = CVPixelBufferGetBytesPerRowOfPlane(v13, 1uLL);
      switch(PixelFormatType)
      {
        case 0x18u:
          uint64_t v146 = 0;
          uint64_t v18 = 3;
          goto LABEL_11;
        case 0x42475241u:
          uint64_t v144 = 0;
          uint64_t v145 = 4;
          uint64_t v146 = 2;
          goto LABEL_13;
        case 0x52474241u:
          uint64_t v146 = 0;
          uint64_t v18 = 4;
LABEL_11:
          uint64_t v145 = v18;
          uint64_t v144 = 2;
LABEL_13:
          size_t v153 = v143 >> 1;
          float v130 = malloc_type_calloc(3 * v143 + 4 * (v143 >> 1) + 14, 4uLL, 0x100004052888210uLL);
          if (v130)
          {
            double v128 = a4;
            float v129 = v5;
            BaseAddresCGColorSpaceRef s = (char *)CVPixelBufferGetBaseAddress(v5);
            BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(v13, 0);
            uint64_t v19 = (char *)CVPixelBufferGetBaseAddressOfPlane(v13, 1uLL);
            unint64_t v134 = v15 - 1;
            if (v15 != 1)
            {
              uint64_t v20 = v19;
              uint64_t v21 = 0;
              uint64_t v141 = v130 + 1;
              uint64_t v140 = (uint64_t)&v130[v143 + 1];
              uint64_t v22 = v140 + 8 + 4 * v143 + 8;
              uint64_t v23 = (_DWORD *)(v22 + 4 * v143 + 8);
              uint64_t v24 = (uint64_t)&v23[v153 + 2];
              size_t v25 = (_DWORD *)(v24 + 4 * v153 + 8);
              float v157 = (char *)&v130[v143];
              uint64_t v133 = 4 * v153;
              uint64_t v26 = &BaseAddressOfPlane[BytesPerRowOfPlane];
              uint64_t v132 = 4 * v143;
              uint64_t v27 = (uint64_t)&v25[v153 + 2];
              unint64_t v158 = v143 - 1;
              uint64_t v131 = 2 * BytesPerRowOfPlane;
              size_t v155 = v143 - 2;
              size_t v142 = v153 - 2;
              do
              {
                uint64_t v136 = v21;
                size_t v28 = (_DWORD *)v22;
                int v29 = (_DWORD *)v24;
                int v30 = (_DWORD *)v27;
                if (v143 != 1)
                {
                  unint64_t v31 = 0;
                  uint64_t v32 = 0;
                  uint64_t v33 = 0;
                  uint64_t v138 = v29 - 1;
                  uint64_t v139 = v27 - 4;
                  uint64_t v154 = v22 + 4;
                  unint64_t v34 = v141 + 1;
                  float v35 = 0.0;
                  uint64_t v36 = 1;
                  uint64_t v37 = BaseAddress;
                  uint64_t v151 = v23;
                  int v152 = v20;
                  uint64_t v149 = v29;
                  uint64_t v150 = v25;
                  uint64_t v148 = (_DWORD *)v27;
                  do
                  {
                    uint64_t v38 = v26;
                    int v39 = v37[v146];
                    int v40 = v37[1];
                    int v41 = v37[v144];
                    int v42 = v37[v145 + v146];
                    int v43 = v37[v145 + 1];
                    int v44 = v37[v145 + v144];
                    int v45 = v37[BytesPerRow + v146];
                    int v46 = v37[BytesPerRow + 1];
                    int v47 = v37[BytesPerRow + v144];
                    int v48 = v37[BytesPerRow + v145 + v146];
                    int v49 = v37[BytesPerRow + 1 + v145];
                    int v50 = 19595 * v39 + 38470 * v40 + 7471 * v41 + v34[v31 / 4 - 1];
                    int v51 = v50 + 0x8000;
                    int v52 = v50 - ((v50 + 0x8000) & 0xFFFF0000);
                    int v53 = v37[BytesPerRow + v145 + v144];
                    if (v33)
                    {
                      v34[v31 / 4] += 7 * v52 / 16;
                      unint64_t v54 = (char *)&v130[v143];
                      *(_DWORD *)&v54[v31 + 8] += 3 * v52 / 16;
                      int v55 = 5 * v52;
                      char v56 = &v157[v31 + 12];
                      int v57 = 16;
                    }
                    else
                    {
                      if (v52 >= 0) {
                        int v58 = v52;
                      }
                      else {
                        int v58 = v52 + 1;
                      }
                      v141[1] += v58 >> 1;
                      int v55 = 6 * v52;
                      int v57 = 8;
                      char v56 = (char *)(v140 + 8);
                      unint64_t v54 = (char *)&v130[v143];
                    }
                    *(_DWORD *)v56 += v55 / 16;
                    int v59 = v52 / v57;
                    char v60 = &v54[v31];
                    *(_DWORD *)&v54[v31 + 16] += v59;
                    int v61 = (v51 >> 16) & ~(v51 >> 31);
                    if (v61 >= 255) {
                      LOBYTE(v61) = -1;
                    }
                    BaseAddressOfPlane[v33] = v61;
                    int v62 = 19595 * v42 + 38470 * v43 + 7471 * v44 + v34[v31 / 4];
                    int v63 = v62 + 0x8000;
                    signed int v64 = v62 - ((v62 + 0x8000) & 0xFFFF0000);
                    int v65 = 7 * v64 / 16;
                    if (v155 == v33)
                    {
                      *((_DWORD *)v60 + 3) += v65;
                      v64 *= 9;
                      size_t v66 = v143 - 1;
                    }
                    else
                    {
                      v34[v31 / 4 + 1] += v65;
                      int v67 = *((_DWORD *)v60 + 4);
                      size_t v66 = v33 + 2;
                      *(_DWORD *)&v54[v31 + 12] += 3 * v64 / 16;
                      *(_DWORD *)&v54[v31 + 16] = v67 + 5 * v64 / 16;
                    }
                    int v68 = 19595 * v45 + 38470 * v46 + 7471 * v47;
                    uint64_t v69 = v154;
                    *(_DWORD *)(v140 + 8 + 4 * v66) += v64 / 16;
                    int v70 = (v63 >> 16) & ~(v63 >> 31);
                    if (v70 >= 255) {
                      LOBYTE(v70) = -1;
                    }
                    BaseAddressOfPlane[v33 + 1] = v70;
                    if (v33)
                    {
                      int v71 = *(_DWORD *)&v157[v31 + 8] + (int)v35;
                      int v72 = v71 + 0x8000;
                      signed int v73 = v71 - ((v71 + 0x8000) & 0xFFFF0000);
                      int v74 = 7 * v73 / 16;
                      if (v143 == v33)
                      {
                        uint64_t v75 = v33 - 1;
                        v28[v155] += v74;
                        v73 *= 9;
                      }
                      else
                      {
                        *(_DWORD *)&v157[v31 + 12] += v74;
                        unint64_t v82 = v154 + v31;
                        int v83 = 5 * v73 + 15;
                        if (5 * v73 >= 0) {
                          int v83 = 5 * v73;
                        }
                        int v84 = *(_DWORD *)(v154 + v31 - 8) + (v83 >> 4);
                        uint64_t v69 = v154;
                        *(_DWORD *)(v82 - 12) = *(_DWORD *)(v154 + v31 - 12) + 3 * v73 / 16;
                        *(_DWORD *)(v82 - 8) = v84;
                        uint64_t v75 = v33;
                      }
                      v28[v75] += v73 / 16;
                      int v85 = (v72 >> 16) & ~(v72 >> 31);
                      if (v85 >= 255) {
                        LOBYTE(v85) = -1;
                      }
                      uint64_t v26 = v38;
                      v38[v33 - 1] = v85;
                      int v86 = *(_DWORD *)&v157[v31 + 12] + v68;
                      int v77 = v86 + 0x8000;
                      signed int v87 = v86 - ((v86 + 0x8000) & 0xFFFF0000);
                      *((_DWORD *)v60 + 4) += 7 * v87 / 16;
                      uint64_t v79 = v69;
                      *(_DWORD *)(v69 + v31 - 8) += 3 * v87 / 16;
                      v28[v31 / 4] += 5 * v87 / 16;
                      int v81 = v87 / 16;
                    }
                    else
                    {
                      int v76 = *(_DWORD *)(v140 + 8) + v68;
                      int v77 = v76 + 0x8000;
                      int v78 = v76 - ((v76 + 0x8000) & 0xFFFF0000);
                      uint64_t v79 = v154;
                      if (v78 >= 0) {
                        int v80 = v78;
                      }
                      else {
                        int v80 = v78 + 1;
                      }
                      *(_DWORD *)(v140 + 12) += v80 >> 1;
                      *v28 += 6 * v78 / 16;
                      int v81 = v78 / 8;
                    }
                    int v88 = 19595 * v48 + 38470 * v49 + 7471 * v53;
                    *(_DWORD *)(v79 + v31) += v81;
                    int v89 = (v77 >> 16) & ~(v77 >> 31);
                    if (v89 >= 255) {
                      LOBYTE(v89) = -1;
                    }
                    v26[v33] = v89;
                    unint64_t v90 = v33 + 2;
                    if (v33 + 2 >= v158)
                    {
                      int v91 = *((_DWORD *)v60 + 4) + v88;
                      int v92 = v91 + 0x8000;
                      signed int v93 = v91 - ((v91 + 0x8000) & 0xFFFF0000);
                      int v94 = 7 * v93 / 16;
                      if (v155 == v33)
                      {
                        *(_DWORD *)(v79 + v31 - 4) += v94;
                        v93 *= 9;
                        size_t v95 = v143 - 1;
                      }
                      else
                      {
                        *(_DWORD *)&v157[v31 + 20] += v94;
                        float v96 = (int *)(v79 + v31);
                        int v97 = *(_DWORD *)(v79 + v31) + 5 * v93 / 16;
                        *(v96 - 1) = *(_DWORD *)(v79 + v31 - 4) + 3 * v93 / 16;
                        *float v96 = v97;
                        size_t v95 = v33 + 2;
                      }
                      v28[v95] += v93 / 16;
                      int v98 = (v92 >> 16) & ~(v92 >> 31);
                      if (v98 >= 255) {
                        LOBYTE(v98) = -1;
                      }
                      v26[v33 + 1] = v98;
                    }
                    else
                    {
                      float v35 = (float)v88;
                    }
                    uint64_t v23 = v151;
                    uint64_t v20 = v152;
                    size_t v25 = v150;
                    unint64_t v34 = v141 + 1;
                    int v99 = v44 + v41 + v47 + v53;
                    int v100 = v43 + v40 + v46 + v49;
                    int v101 = v45 + v42 + v39 + v48;
                    unsigned int v102 = v151[v32] + ((-21709 * v100 - 11057 * v101 + (v99 << 15) + 0x2000000) >> 2);
                    int v103 = v102 + 0x8000;
                    int v104 = v102 - ((v102 + 0x8000) & 0xFFFF0000);
                    int v30 = v148;
                    int v29 = v149;
                    if (v33)
                    {
                      int v105 = 7 * v104 / 16;
                      if (v153 == v36)
                      {
                        v149[v142] += v105;
                        int v106 = 9 * v104 / 16;
                        uint64_t v107 = v153 - 1;
                      }
                      else
                      {
                        v151[v32 + 1] += v105;
                        int v109 = v138[v32 + 1];
                        v138[v32] += 3 * v104 / 16;
                        v138[v32 + 1] = v109 + 5 * v104 / 16;
                        int v106 = v104 / 16;
                        uint64_t v107 = v36;
                      }
                    }
                    else
                    {
                      if (v104 >= 0) {
                        int v108 = v104;
                      }
                      else {
                        int v108 = v104 + 1;
                      }
                      v151[1] += v108 >> 1;
                      *v149 += 6 * v104 / 16;
                      int v106 = v104 / 8;
                      uint64_t v107 = 1;
                    }
                    unsigned int v110 = (-27438 * v100 + (v101 << 15) - 5328 * v99 + 0x2000000) >> 2;
                    v149[v107] += v106;
                    int v111 = (v103 >> 16) & ~(v103 >> 31);
                    if (v111 >= 255) {
                      LOBYTE(v111) = -1;
                    }
                    v152[v33] = v111;
                    unsigned int v112 = v150[v32] + v110;
                    int v113 = v112 + 0x8000;
                    int v114 = v112 - ((v112 + 0x8000) & 0xFFFF0000);
                    if (v33)
                    {
                      int v115 = 7 * v114 / 16;
                      if (v153 == v36)
                      {
                        v148[v142] += v115;
                        int v116 = 9 * v114 / 16;
                        uint64_t v117 = v153 - 1;
                      }
                      else
                      {
                        v150[v32 + 1] += v115;
                        uint64_t v119 = (_DWORD *)(v139 + v32 * 4);
                        int v120 = *(_DWORD *)(v139 + v32 * 4 + 4);
                        *uint64_t v119 = *(_DWORD *)(v139 + v32 * 4) + 3 * v114 / 16;
                        v119[1] = v120 + 5 * v114 / 16;
                        int v116 = v114 / 16;
                        uint64_t v117 = v36;
                      }
                    }
                    else
                    {
                      if (v114 >= 0) {
                        int v118 = v114;
                      }
                      else {
                        int v118 = v114 + 1;
                      }
                      v150[1] += v118 >> 1;
                      *v148 += 6 * v114 / 16;
                      int v116 = v114 / 8;
                      uint64_t v117 = 1;
                    }
                    v37 += 2 * v145;
                    v148[v117] += v116;
                    int v121 = (v113 >> 16) & ~(v113 >> 31);
                    if (v121 >= 255) {
                      LOBYTE(v121) = -1;
                    }
                    v152[v33 + 1] = v121;
                    ++v32;
                    ++v36;
                    v31 += 8;
                    v33 += 2;
                  }
                  while (v90 < v158);
                }
                bzero(v23, v133);
                bzero(v25, v133);
                bzero((void *)(v140 + 8), v132);
                uint64_t v22 = (uint64_t)v141;
                bzero(v141, v132);
                BaseAddressOfPlane += v131;
                v26 += v131;
                v20 += v135;
                BaseAddress += 2 * BytesPerRow;
                uint64_t v21 = v136 + 2;
                uint64_t v27 = (uint64_t)v25;
                size_t v25 = v30;
                uint64_t v24 = (uint64_t)v23;
                uint64_t v23 = v29;
                uint64_t v141 = v28;
              }
              while (v136 + 2 < v134);
            }
            free(v130);
            a4 = v128;
            CFTypeRef v5 = v129;
            goto LABEL_78;
          }
          uint64_t v8 = 4294967293;
          goto LABEL_99;
      }
    }
    uint64_t v122 = FigSignalErrorAt();
    if (!v122)
    {
LABEL_78:
      CVPixelBufferUnlockBaseAddress(v159, 0);
      CFDictionaryRef v123 = CVBufferCopyAttachments(v5, kCVAttachmentMode_ShouldPropagate);
      if (v123)
      {
        CFDictionaryRef v124 = v123;
        CVBufferSetAttachments(v159, v123, kCVAttachmentMode_ShouldPropagate);
        CFRelease(v124);
      }
      CFDictionaryRef v125 = CVBufferCopyAttachments(v5, kCVAttachmentMode_ShouldNotPropagate);
      if (v125)
      {
        CFDictionaryRef v126 = v125;
        CVBufferSetAttachments(v159, v125, kCVAttachmentMode_ShouldNotPropagate);
        CFRelease(v126);
      }
      int v11 = 0;
      uint64_t v8 = 0;
      *a4 = v159;
      CVPixelBufferRef v159 = 0;
      goto LABEL_83;
    }
    uint64_t v8 = v122;
LABEL_99:
    int v11 = 1;
LABEL_83:
    CVPixelBufferUnlockBaseAddress(v5, 1uLL);
LABEL_84:
    CVPixelBufferRef v9 = v159;
    if (v11 && v159)
    {
      CVPixelBufferUnlockBaseAddress(v159, 0);
LABEL_87:
      CVPixelBufferRef v9 = v159;
    }
LABEL_88:
    if (v9) {
      CFRelease(v9);
    }
    return v8;
  }
  return FigSignalErrorAt();
}

uint64_t CMPhotoPixelBufferPremultiplyWithAlpha(__CVBuffer *a1)
{
  if (a1)
  {
    if (CMPhotoPixelBufferHasOpaqueAlphaFromAttachment(a1, 0)) {
      return 0;
    }
    int AlphaMode = CMPhotoPixelBufferGetAlphaMode(a1);
    OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
    if (PixelFormatType != 1815491698 && PixelFormatType != 1111970369) {
      return 0;
    }
    OSType v5 = CVPixelBufferGetPixelFormatType(a1);
    OSType v6 = v5;
    if (v5 != 1815491698 && v5 != 1111970369) {
      return 0;
    }
    src.data = 0;
    *(_OWORD *)&src.double width = 0u;
    memset(&v16, 0, sizeof(v16));
    unint64_t v7 = vcvtad_u64_f64(CMPhotoGetPixelBufferCLAPAsRect(a1));
    unint64_t v9 = vcvtad_u64_f64(v8);
    src.double height = vcvtad_u64_f64(v11);
    src.double width = vcvtad_u64_f64(v10);
    CVPixelBufferLockBaseAddress(a1, 0);
    uint64_t PixelBufferDataPointers = CMPhotoGetPixelBufferDataPointers(a1, v7, v9, 0, (uint64_t)&src, (uint64_t)&src.rowBytes, 0);
    if (PixelBufferDataPointers)
    {
      vImage_Error v14 = PixelBufferDataPointers;
    }
    else
    {
      vImage_Buffer v16 = src;
      if (v6 == 1815491698)
      {
        if (AlphaMode == 1)
        {
          vImage_Error v14 = vImageUnpremultiplyData_RGBA16U(&src, &v16, 0);
          if (v14) {
            goto LABEL_20;
          }
        }
        vImage_Error v14 = vImagePremultiplyData_RGBA16U(&src, &v16, 0);
        if (v14) {
          goto LABEL_20;
        }
      }
      else if (v6 == 1111970369)
      {
        vImage_Error v13 = AlphaMode == 1 ? vImageClipToAlpha_RGBA8888(&src, &v16, 0) : vImagePremultiplyData_RGBA8888(&src, &v16, 0);
        vImage_Error v14 = v13;
        if (v13) {
          goto LABEL_20;
        }
      }
      CMPhotoPixelBufferSetAlphaOpaquenessAndAlphaMode(a1, 0, 1);
      vImage_Error v14 = 0;
    }
LABEL_20:
    CVPixelBufferUnlockBaseAddress(a1, 0);
    return v14;
  }
  return FigSignalErrorAt();
}

uint64_t CMPhotoPixelBufferBlendAlphaWithWhite(__CVBuffer *a1)
{
  if (CVPixelBufferGetPixelFormatType(a1) != 1111970369
    || CMPhotoPixelBufferHasOpaqueAlphaFromAttachment(a1, 0))
  {
    return 0;
  }
  double PixelBufferCLAPAsRect = CMPhotoGetPixelBufferCLAPAsRect(a1);
  double v4 = v3;
  double v6 = v5;
  unint64_t v7 = vcvtad_u64_f64(PixelBufferCLAPAsRect);
  unint64_t v9 = vcvtad_u64_f64(v8);
  CVPixelBufferLockBaseAddress(a1, 0);
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t PixelBufferDataPointers = CMPhotoGetPixelBufferDataPointers(a1, v7, v9, 0, (uint64_t)&v24, (uint64_t)&v23, 0);
  if (PixelBufferDataPointers)
  {
    uint64_t v21 = PixelBufferDataPointers;
  }
  else
  {
    unint64_t v11 = vcvtad_u64_f64(v6);
    if (v11)
    {
      uint64_t v12 = 0;
      unint64_t v13 = vcvtad_u64_f64(v4);
      do
      {
        if (v13)
        {
          vImage_Error v14 = (unsigned char *)(v24 + v23 * v12 + 3);
          unint64_t v15 = v13;
          do
          {
            int v16 = *v14;
            int v17 = v16 ^ 0xFF;
            unsigned int v18 = (v16 ^ 0xFF) + (unsigned __int16)(*(v14 - 3) * (_WORD)v16 + 127) / 0xFFu;
            if (v18 >= 0xFF) {
              LOBYTE(v18) = -1;
            }
            *(v14 - 3) = v18;
            unsigned int v19 = v17 + (unsigned __int16)(*(v14 - 2) * (_WORD)v16 + 127) / 0xFFu;
            if (v19 >= 0xFF) {
              LOBYTE(v19) = -1;
            }
            *(v14 - 2) = v19;
            unsigned int v20 = v17 + (unsigned __int16)(*(v14 - 1) * (_WORD)v16 + 127) / 0xFFu;
            if (v20 >= 0xFF) {
              LOBYTE(v20) = -1;
            }
            *(v14 - 1) = v20;
            unsigned char *v14 = -1;
            v14 += 4;
            --v15;
          }
          while (v15);
        }
        ++v12;
      }
      while (v12 != v11);
    }
    CMPhotoPixelBufferSetAlphaOpaquenessAndAlphaMode(a1, 1, 1);
    uint64_t v21 = 0;
  }
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return v21;
}

vImage_Error CMPhotoCreateImageFromAlphaAndMainBuffer(__CVBuffer *a1, __CVBuffer *a2, int a3, int a4, int a5, int a6, CGImageRef *a7)
{
  double PixelBufferCLAPAsRect = CMPhotoGetPixelBufferCLAPAsRect(a1);
  double v16 = v15;
  double v18 = v17;
  double v20 = v19;
  double v21 = CMPhotoGetPixelBufferCLAPAsRect(a2);
  double v23 = v22;
  double v25 = v24;
  double v27 = v26;
  CFTypeRef cf = 0;
  signed int PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  uint64_t v29 = CVPixelBufferGetPixelFormatType(a2);
  if (PixelFormatType > 1279340599)
  {
    if (PixelFormatType != 1815491698 && PixelFormatType != 1279340854)
    {
      int v32 = 1279340600;
LABEL_8:
      if (PixelFormatType != v32)
      {
LABEL_62:
        uint64_t WrappedPixelBufferForType = FigSignalErrorAt();
        goto LABEL_73;
      }
      goto LABEL_9;
    }
  }
  else
  {
    if (PixelFormatType == 843264056)
    {
LABEL_9:
      int v33 = 1278226488;
      goto LABEL_11;
    }
    if (PixelFormatType != 843264310)
    {
      int v32 = 1111970369;
      goto LABEL_8;
    }
  }
  int v33 = 1278226742;
LABEL_11:
  if (v29 != v33) {
    goto LABEL_62;
  }
  int v80 = a3;
  int v34 = a5;
  int v79 = a6;
  unint64_t v35 = vcvtad_u64_f64(PixelBufferCLAPAsRect);
  unint64_t v36 = vcvtad_u64_f64(v16);
  vImagePixelCount v37 = vcvtad_u64_f64(v18);
  vImagePixelCount v38 = vcvtad_u64_f64(v20);
  unint64_t v39 = vcvtad_u64_f64(v23);
  unint64_t v40 = vcvtad_u64_f64(v25);
  unint64_t v41 = vcvtad_u64_f64(v27);
  if (v35 == vcvtad_u64_f64(v21) && v36 == v39 && v37 == v40 && v38 == v41)
  {
    unint64_t v52 = v38;
    unint64_t v50 = v37;
    unint64_t v48 = v36;
    unint64_t v46 = v35;
  }
  else
  {
    uint64_t WrappedPixelBufferForType = CMPhotoScaleAndRotateSessionTransformForSize(0, a2, 1, 1, v29, 0, 0, 1u, *MEMORY[0x1E4F1DB20], *(CGFloat *)(MEMORY[0x1E4F1DB20] + 8), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 16), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 24), (double)v37, (double)v38, v30, v31, 0, 1u, (__CVBuffer **)&cf);
    if (WrappedPixelBufferForType) {
      goto LABEL_73;
    }
    a2 = (__CVBuffer *)cf;
    unint64_t v46 = vcvtad_u64_f64(CMPhotoGetPixelBufferCLAPAsRect((__CVBuffer *)cf));
    unint64_t v48 = vcvtad_u64_f64(v47);
    unint64_t v50 = vcvtad_u64_f64(v49);
    unint64_t v52 = vcvtad_u64_f64(v51);
  }
  if (v46 != v35 || v48 != v36 || v50 != v37 || v52 != v38) {
    goto LABEL_62;
  }
  uint64_t WrappedPixelBufferForType = CVPixelBufferLockBaseAddress(a1, 0);
  if (WrappedPixelBufferForType)
  {
LABEL_73:
    vImage_Error v60 = WrappedPixelBufferForType;
    goto LABEL_74;
  }
  vImage_Error v56 = CVPixelBufferLockBaseAddress(a2, 1uLL);
  if (v56)
  {
    vImage_Error v60 = v56;
    int v77 = a1;
    CVPixelBufferLockFlags v78 = 0;
    goto LABEL_80;
  }
  if (PixelFormatType > 1279340599)
  {
    if (PixelFormatType != 1279340600 && PixelFormatType != 1279340854)
    {
      int v57 = 1815491698;
LABEL_45:
      if (PixelFormatType == v57)
      {
        origSrc.data = 0;
        origSrc.double height = v38;
        origSrc.double width = v37;
        origSrc.rowByteCGColorSpaceRef s = 0;
        uint64_t PixelBufferDataPointers = CMPhotoGetPixelBufferDataPointers(a1, v35, v36, 0, (uint64_t)&origSrc, (uint64_t)&origSrc.rowBytes, 0);
        if (!PixelBufferDataPointers)
        {
          newSrc.data = 0;
          newSrc.double height = v38;
          newSrc.double width = v37;
          newSrc.rowByteCGColorSpaceRef s = 0;
          uint64_t PixelBufferDataPointers = CMPhotoGetPixelBufferDataPointers(a2, v35, v36, 0, (uint64_t)&newSrc, (uint64_t)&newSrc.rowBytes, 0);
          if (!PixelBufferDataPointers)
          {
            vImage_Buffer dest = origSrc;
            int v59 = a7;
            if (PixelFormatType == 1111970369)
            {
              vImage_Error v60 = vImageOverwriteChannels_ARGB8888(&newSrc, &origSrc, &dest, 1u, 0);
              int v61 = v80;
              if (v60) {
                goto LABEL_79;
              }
            }
            else
            {
              vImage_Error v60 = vImageOverwriteChannels_ARGB16U();
              int v61 = v80;
              if (v60) {
                goto LABEL_79;
              }
            }
LABEL_70:
            CMPhotoPixelBufferSetAlphaOpaquenessAndAlphaMode(a1, 0, v61);
            CVPixelBufferUnlockBaseAddress(a1, 0);
            CVPixelBufferUnlockBaseAddress(a2, 1uLL);
            if (!a4
              || (uint64_t WrappedPixelBufferForType = CMPhotoPixelBufferPremultiplyWithAlpha(a1),
                  !WrappedPixelBufferForType))
            {
              uint64_t WrappedPixelBufferForType = CMPhotoCreateWrappedPixelBufferForType((const __CFAllocator *)*MEMORY[0x1E4F1CF80], a1, v34, v79, v59);
            }
            goto LABEL_73;
          }
        }
      }
      else
      {
        uint64_t PixelBufferDataPointers = FigSignalErrorAt();
      }
      goto LABEL_78;
    }
  }
  else if (PixelFormatType != 843264056 && PixelFormatType != 843264310)
  {
    int v57 = 1111970369;
    goto LABEL_45;
  }
  origSrc.data = 0;
  newSrc.data = 0;
  uint64_t PixelBufferDataPointers = CMPhotoGetPixelBufferDataPointers(a1, v35, v36, 0, (uint64_t)&newSrc, (uint64_t)&origSrc, 0);
  if (!PixelBufferDataPointers)
  {
    uint64_t v81 = 0;
    dest.data = 0;
    uint64_t PixelBufferDataPointers = CMPhotoGetPixelBufferDataPointers(a2, v35, v36, 0, (uint64_t)&v81, (uint64_t)&dest, 0);
    if (!PixelBufferDataPointers)
    {
      if (PixelFormatType == 843264056 || PixelFormatType == 1279340600)
      {
        if (v38)
        {
          for (uint64_t i = 0; i != v38; ++i)
          {
            if (v37)
            {
              int v63 = (char *)(v81 + (uint64_t)dest.data * i);
              signed int v64 = (char *)newSrc.data + (uint64_t)origSrc.data * i + 1;
              vImagePixelCount v65 = v37;
              do
              {
                char v66 = *v63++;
                *signed int v64 = v66;
                v64 += 2;
                --v65;
              }
              while (v65);
            }
          }
        }
      }
      else if (v38)
      {
        uint64_t v67 = 0;
        data = (char *)origSrc.data;
        uint64_t v69 = v81;
        int v70 = dest.data;
        int v71 = (char *)newSrc.data + 2;
        do
        {
          if (v37)
          {
            int v72 = (__int16 *)(v69 + (void)v70 * v67);
            signed int v73 = v71;
            vImagePixelCount v74 = v37;
            do
            {
              __int16 v75 = *v72++;
              *(_WORD *)signed int v73 = v75;
              v73 += 4;
              --v74;
            }
            while (v74);
          }
          ++v67;
          int v71 = &data[(void)v71];
        }
        while (v67 != v38);
      }
      int v59 = a7;
      int v61 = v80;
      goto LABEL_70;
    }
  }
LABEL_78:
  vImage_Error v60 = PixelBufferDataPointers;
LABEL_79:
  CVPixelBufferUnlockBaseAddress(a1, 0);
  int v77 = a2;
  CVPixelBufferLockFlags v78 = 1;
LABEL_80:
  CVPixelBufferUnlockBaseAddress(v77, v78);
LABEL_74:
  if (cf) {
    CFRelease(cf);
  }
  return v60;
}

vImage_Error CMPhotoCreateAlphaFromMainBuffer(__CVBuffer *a1, int a2, CVPixelBufferRef *a3)
{
  CVPixelBufferRef pixelBuffer = 0;
  if (!a1) {
    goto LABEL_52;
  }
  uint64_t v6 = 1278226488;
  signed int PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  size_t Width = CVPixelBufferGetWidth(a1);
  size_t Height = CVPixelBufferGetHeight(a1);
  if (PixelFormatType <= 1279340599)
  {
    if (PixelFormatType == 843264056) {
      goto LABEL_20;
    }
    if (PixelFormatType == 843264310)
    {
LABEL_16:
      uint64_t v6 = 1278226736;
      goto LABEL_20;
    }
    if (PixelFormatType != 1111970369) {
      goto LABEL_52;
    }
    goto LABEL_17;
  }
  if (PixelFormatType > 1380401728)
  {
    if (PixelFormatType != 1380401729)
    {
      if (PixelFormatType != 1815491698)
      {
LABEL_52:
        uint64_t v10 = FigSignalErrorAt();
LABEL_53:
        vImage_Error v13 = v10;
LABEL_62:
        CVPixelBufferRef v36 = pixelBuffer;
        goto LABEL_63;
      }
      if (a2) {
        uint64_t v6 = 1936077360;
      }
      else {
        uint64_t v6 = 1278226742;
      }
      goto LABEL_20;
    }
LABEL_17:
    if (a2) {
      uint64_t v6 = 875704422;
    }
    else {
      uint64_t v6 = 1278226488;
    }
    goto LABEL_20;
  }
  if (PixelFormatType != 1279340600)
  {
    if (PixelFormatType != 1279340854) {
      goto LABEL_52;
    }
    goto LABEL_16;
  }
LABEL_20:
  uint64_t v10 = CMPhotoSurfacePoolCreatePixelBuffer(@"SurfacePoolOneShot", v6, Width, Height, 1, 0, 0, 1, 0, 0, &pixelBuffer);
  if (v10) {
    goto LABEL_53;
  }
  uint64_t v10 = CVPixelBufferLockBaseAddress(a1, 0);
  if (v10) {
    goto LABEL_53;
  }
  vImage_Error v11 = CVPixelBufferLockBaseAddress(pixelBuffer, 0);
  int v12 = v11;
  vImage_Error v13 = v11;
  if (!v11)
  {
    BaseAddresCGColorSpaceRef s = (char *)CVPixelBufferGetBaseAddress(a1);
    if (a2)
    {
      BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
      size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
      size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
    }
    else
    {
      BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
      size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
      size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRow(pixelBuffer);
    }
    src.data = BaseAddress;
    src.double height = Height;
    src.double width = Width;
    src.rowByteCGColorSpaceRef s = BytesPerRow;
    dest.data = BaseAddressOfPlane;
    dest.double height = Height;
    dest.double width = Width;
    dest.rowByteCGColorSpaceRef s = BytesPerRowOfPlane;
    if (PixelFormatType <= 1279340599)
    {
      if (PixelFormatType == 843264056) {
        goto LABEL_38;
      }
      if (PixelFormatType == 843264310) {
        goto LABEL_45;
      }
      int v18 = 1111970369;
    }
    else
    {
      if (PixelFormatType <= 1380401728)
      {
        if (PixelFormatType != 1279340600)
        {
LABEL_45:
          if (Height)
          {
            uint64_t v25 = 0;
            double v26 = (__int16 *)(BaseAddress + 2);
            do
            {
              if (Width)
              {
                double v27 = &BaseAddressOfPlane[v25 * BytesPerRowOfPlane];
                size_t v28 = v26;
                size_t v29 = Width;
                do
                {
                  __int16 v30 = *v28;
                  v28 += 2;
                  *(_WORD *)double v27 = v30 & 0xFFC0;
                  v27 += 2;
                  --v29;
                }
                while (v29);
              }
              ++v25;
              double v26 = (__int16 *)((char *)v26 + BytesPerRow);
            }
            while (v25 != Height);
          }
LABEL_55:
          if (a2)
          {
            size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(pixelBuffer, 1uLL);
            size_t v32 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
            int v33 = CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
            bzero(v33, v32 * HeightOfPlane);
          }
          int v34 = pixelBuffer;
          int AlphaMode = CMPhotoPixelBufferGetAlphaMode(a1);
          CMPhotoPixelBufferSetAlphaOpaquenessAndAlphaMode(v34, 0, AlphaMode);
          vImage_Error v13 = 0;
          if (a3)
          {
            *a3 = pixelBuffer;
            CVPixelBufferRef pixelBuffer = 0;
          }
          goto LABEL_59;
        }
LABEL_38:
        if (Height)
        {
          uint64_t v19 = 0;
          double v20 = BaseAddress + 1;
          do
          {
            if (Width)
            {
              double v21 = &BaseAddressOfPlane[v19 * BytesPerRowOfPlane];
              double v22 = v20;
              size_t v23 = Width;
              do
              {
                char v24 = *v22;
                v22 += 2;
                *v21++ = v24;
                --v23;
              }
              while (v23);
            }
            ++v19;
            v20 += BytesPerRow;
          }
          while (v19 != Height);
        }
        goto LABEL_55;
      }
      if (PixelFormatType == 1815491698)
      {
        vImage_Error v13 = vImageExtractChannel_ARGB16U(&src, &dest, 3, 0);
        if (v13) {
          goto LABEL_59;
        }
        goto LABEL_55;
      }
      int v18 = 1380401729;
    }
    if (PixelFormatType != v18)
    {
      vImage_Error v13 = FigSignalErrorAt();
      goto LABEL_59;
    }
    vImage_Error v13 = vImageExtractChannel_ARGB8888(&src, &dest, 3, 0);
    if (v13) {
      goto LABEL_59;
    }
    goto LABEL_55;
  }
LABEL_59:
  CVPixelBufferUnlockBaseAddress(a1, 0);
  CVPixelBufferRef v36 = pixelBuffer;
  if (!v12 && pixelBuffer)
  {
    CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
    goto LABEL_62;
  }
LABEL_63:
  if (v36) {
    CFRelease(v36);
  }
  return v13;
}

uint64_t CMPhotoSurfacePoolCreatePixelBufferWithAttributes(const void *a1, uint64_t a2, size_t a3, size_t a4, const __CFDictionary *a5, CVPixelBufferRef *a6)
{
  uint64_t v23 = 64;
  CVPixelBufferRef pixelBuffer = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  if (!a6) {
    return 4294950306;
  }
  CMPhotoCFDictionaryGetSizeIfPresent(a5, (const void *)*MEMORY[0x1E4F24C98], &v23);
  CMPhotoPixelBufferAttributesGetExtendedPixels(a5, &v21, &v22, &v20, &v19);
  if (v21 || v20) {
    return FigSignalErrorAt();
  }
  uint64_t v12 = v22 + a3;
  uint64_t v13 = v19 + a4;
  uint64_t v14 = CMPhotoSurfacePoolCreatePixelBuffer(a1, a2, a3, a4, 1, v22 + a3, v19 + a4, 1, v23, a5, &pixelBuffer);
  CVPixelBufferRef v15 = pixelBuffer;
  if (!v14)
  {
    if (!pixelBuffer) {
      return 4294950194;
    }
    DataSizeFromWidthAndsize_t Height = CMPhotoGetDataSizeFromWidthAndHeight(a2, v12, v13);
    DataCFNumberRef Size = CVPixelBufferGetDataSize(pixelBuffer);
    CVPixelBufferRef v15 = pixelBuffer;
    if (DataSize >= DataSizeFromWidthAndHeight)
    {
      uint64_t v14 = 0;
      *a6 = pixelBuffer;
      return v14;
    }
    uint64_t v14 = 4294950194;
  }
  if (v15) {
    CFRelease(v15);
  }
  return v14;
}

uint64_t CMPhotoPixelBufferConvertRGBToYCbCrIdentityMatrix(const void *a1, int a2, CVPixelBufferRef pixelBuffer, CVPixelBufferRef *a4)
{
  v37[2] = *MEMORY[0x1E4F143B8];
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  CVPixelBufferRef pixelBuffera = 0;
  double PixelBufferSize = CMPhotoGetPixelBufferSize(pixelBuffer);
  if (!a4) {
    return 4294950306;
  }
  *a4 = 0;
  if (PixelFormatType == 1111970369) {
    uint64_t v11 = 875836518;
  }
  else {
    uint64_t v11 = 0;
  }
  if (!PixelFormatType)
  {
    uint64_t v14 = FigSignalErrorAt();
    goto LABEL_32;
  }
  double v12 = PixelBufferSize;
  double v13 = v10;
  if (a2)
  {
    uint64_t v14 = CMPhotoSurfacePoolCreatePixelBuffer(a1, v11, (unint64_t)PixelBufferSize, (unint64_t)v10, 1, 0, 0, 0, 0, 0, &pixelBuffera);
    if (v14) {
      goto LABEL_32;
    }
  }
  else
  {
    uint64_t v14 = CMPhotoCreateCVPixelBufferNotBackedByIOSurface(*MEMORY[0x1E4F1CF80], v11, (unint64_t)PixelBufferSize, (unint64_t)v10, 0, 0, 0, 0, &pixelBuffera);
    if (v14) {
      goto LABEL_32;
    }
  }
  uint64_t v14 = CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
  if (!v14)
  {
    uint64_t v15 = CVPixelBufferLockBaseAddress(pixelBuffera, 0);
    if (v15)
    {
      uint64_t v26 = v15;
    }
    else
    {
      int v30 = 0;
      v37[0] = 0;
      v37[1] = 0;
      v36[0] = 0;
      v36[1] = 0;
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t PixelBufferDataPointers = CMPhotoGetPixelBufferDataPointers(pixelBuffer, 0, 0, &v30, (uint64_t)v37, (uint64_t)v36, 0);
      if (PixelBufferDataPointers
        || (uint64_t PixelBufferDataPointers = CMPhotoGetPixelBufferDataPointers(pixelBuffera, 0, 0, &v30, (uint64_t)&v34, (uint64_t)&v32, 0), PixelBufferDataPointers))
      {
        uint64_t v26 = PixelBufferDataPointers;
        CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
        double v27 = pixelBuffera;
        CVPixelBufferLockFlags v28 = 0;
        goto LABEL_25;
      }
      if (PixelFormatType == 1111970369 && v13 > 0.0)
      {
        uint64_t v17 = 0;
        do
        {
          if (v12 > 0.0)
          {
            uint64_t v18 = 0;
            uint64_t v19 = (unsigned char *)(v37[0] + v36[0] * v17);
            uint64_t v20 = (unsigned char *)(v35 + v33 * v17);
            uint64_t v21 = v34 + v32 * v17;
            do
            {
              *uint64_t v20 = *v19;
              *(unsigned char *)(v21 + v18) = v19[1];
              v20[1] = v19[2];
              ++v18;
              v19 += 4;
              v20 += 2;
            }
            while (v12 > (double)(int)v18);
          }
          ++v17;
        }
        while (v13 > (double)(int)v17);
      }
      CMPhotoPropagateColorPropertiesFromSourceBuffer(pixelBuffer, pixelBuffera);
      CFStringRef v22 = (const __CFString *)*MEMORY[0x1E4F24C18];
      CVBufferRemoveAttachment(pixelBuffera, (CFStringRef)*MEMORY[0x1E4F24C18]);
      CVBufferSetAttachment(pixelBuffera, v22, (CFTypeRef)*MEMORY[0x1E4F24C50], kCVAttachmentMode_ShouldPropagate);
      CFStringRef v23 = (const __CFString *)*MEMORY[0x1E4F24A78];
      CFTypeRef v24 = CVBufferCopyAttachment(pixelBuffer, (CFStringRef)*MEMORY[0x1E4F24A78], 0);
      if (v24)
      {
        uint64_t v25 = v24;
        CVBufferSetAttachment(pixelBuffera, v23, v24, kCVAttachmentMode_ShouldPropagate);
        CFRelease(v25);
      }
      CVPixelBufferUnlockBaseAddress(pixelBuffera, 0);
      uint64_t v26 = 0;
      *a4 = pixelBuffera;
      CVPixelBufferRef pixelBuffera = 0;
    }
    double v27 = pixelBuffer;
    CVPixelBufferLockFlags v28 = 1;
LABEL_25:
    CVPixelBufferUnlockBaseAddress(v27, v28);
    goto LABEL_26;
  }
LABEL_32:
  uint64_t v26 = v14;
LABEL_26:
  if (pixelBuffera) {
    CFRelease(pixelBuffera);
  }
  return v26;
}

uint64_t CMPhotoGetChromaLocationCodePointForString(uint64_t a1)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (FigCFEqual()) {
    return 0;
  }
  if (FigCFEqual()) {
    return 1;
  }
  if (FigCFEqual()) {
    return 2;
  }
  if (FigCFEqual()) {
    return 3;
  }
  uint64_t v1 = 4;
  if (!FigCFEqual())
  {
    if (FigCFEqual()) {
      return 4;
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
  return v1;
}

void CMPhotoRemoveColorInformationGuessedBy(__CVBuffer *a1)
{
  if (a1)
  {
    CFTypeRef v2 = CVBufferCopyAttachment(a1, @"ColorInfoGuessedBy", 0);
    if (v2)
    {
      double v3 = v2;
      CVBufferRemoveAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24C18]);
      CVBufferRemoveAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24A90]);
      CVBufferRemoveAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24BC8]);
      CVBufferRemoveAttachment(a1, (CFStringRef)*MEMORY[0x1E4F24A00]);
      CVBufferRemoveAttachment(a1, @"ColorInfoGuessedBy");
      CFRelease(v3);
    }
  }
}

uint64_t CMPhotoPixelFormatToAppleJPEGFormat(int a1, int *a2)
{
  uint64_t result = 4294950301;
  if (a1 > 1278226735)
  {
    if (a1 > 1380401728)
    {
      if (a1 <= 1815491697)
      {
        if (a1 == 1380401729)
        {
          int v4 = 3;
        }
        else
        {
          if (a1 != 1647589490) {
            return result;
          }
          int v4 = 20;
        }
        goto LABEL_27;
      }
      if (a1 != 1932996149)
      {
        if (a1 != 1815491698) {
          return result;
        }
        int v4 = 16;
        goto LABEL_27;
      }
    }
    else if ((a1 - 1278226736) > 6 || ((1 << (a1 - 48)) & 0x45) == 0)
    {
      if (a1 != 1278555701) {
        return result;
      }
      int v4 = 1;
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  if (a1 > 875704421)
  {
    if (a1 > 1111970368)
    {
      if (a1 == 1111970369)
      {
        int v4 = 4;
      }
      else
      {
        if (a1 != 1278226488) {
          return result;
        }
        int v4 = 5;
      }
    }
    else if (a1 == 875704422)
    {
      int v4 = 10;
    }
    else
    {
      if (a1 != 875704934) {
        return result;
      }
      int v4 = 8;
    }
    goto LABEL_27;
  }
  if (a1 == 24)
  {
    int v4 = 0;
    goto LABEL_27;
  }
  if (a1 == 825306677 || a1 == 825437747)
  {
LABEL_26:
    int v4 = 18;
LABEL_27:
    uint64_t result = 0;
    *a2 = v4;
  }
  return result;
}

void _wrappingBufferReleaseCallback(__CVBuffer *a1)
{
  if (a1)
  {
    CVPixelBufferUnlockBaseAddress(a1, 0);
    CFRelease(a1);
  }
}

uint64_t CMPhotoCreateOtherRangePixelBufferWithBacking(__CVBuffer *a1, CVPixelBufferRef *a2)
{
  planeBaseAddress[2] = *(void **)MEMORY[0x1E4F143B8];
  CVPixelBufferRef pixelBufferOut = 0;
  if (!a1) {
    return 4294950306;
  }
  PlaneCFIndex Count = CVPixelBufferGetPlaneCount(a1);
  CFMutableDictionaryRef MutableCopy = 0;
  uint64_t v6 = 4294950306;
  if (!a2 || PlaneCount != 2) {
    goto LABEL_23;
  }
  uint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (!CMPhotoPixelFormatContainsYCbCr(PixelFormatType)
    || (!CMPhotoPixelFormatIsFullRange(PixelFormatType)
      ? (OSType FullRangeForPixelFormat = CMPhotoGetFullRangeForPixelFormat(PixelFormatType))
      : (OSType FullRangeForPixelFormat = CMPhotoGetVideoRangeForPixelFormat(PixelFormatType)),
        (OSType v9 = FullRangeForPixelFormat) == 0))
  {
    CFMutableDictionaryRef MutableCopy = 0;
    goto LABEL_23;
  }
  size_t Width = CVPixelBufferGetWidth(a1);
  size_t Height = CVPixelBufferGetHeight(a1);
  size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  size_t v13 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
  DataCFNumberRef Size = CVPixelBufferGetDataSize(a1);
  IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(a1);
  if (!IOSurface)
  {
    CFMutableDictionaryRef MutableCopy = 0;
    goto LABEL_20;
  }
  size_t v24 = DataSize;
  double v16 = a2;
  CFTypeRef v17 = IOSurfaceCopyValue(IOSurface, (CFStringRef)*MEMORY[0x1E4F2F080]);
  if (!v17)
  {
    CFMutableDictionaryRef MutableCopy = 0;
LABEL_19:
    a2 = v16;
    DataCFNumberRef Size = v24;
LABEL_20:
    uint64_t v22 = CVPixelBufferLockBaseAddress(a1, 0);
    if (v22)
    {
      uint64_t v6 = v22;
    }
    else
    {
      planeBaseAddress[0] = CVPixelBufferGetBaseAddressOfPlane(a1, 0);
      planeBaseAddress[1] = CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
      planeWidth[0] = (unint64_t)(double)Width;
      planeWidth[1] = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
      v27[0] = (unint64_t)(double)Height;
      v27[1] = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
      planeBytesPerRow[0] = BytesPerRowOfPlane;
      planeBytesPerRow[1] = v13;
      uint64_t v6 = CVPixelBufferCreateWithPlanarBytes(0, (unint64_t)(double)Width, (unint64_t)(double)Height, v9, 0, DataSize, 2uLL, planeBaseAddress, planeWidth, v27, planeBytesPerRow, (CVPixelBufferReleasePlanarBytesCallback)_wrappingBufferReleaseCallback, a1, 0, &pixelBufferOut);
      if (!v6)
      {
        CFRetain(a1);
        uint64_t v21 = pixelBufferOut;
        goto LABEL_26;
      }
      CVPixelBufferUnlockBaseAddress(a1, 0);
    }
LABEL_23:
    if (pixelBufferOut) {
      CFRelease(pixelBufferOut);
    }
    goto LABEL_27;
  }
  uint64_t v18 = v17;
  CFMutableDictionaryRef MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  CFRelease(v18);
  if (!MutableCopy) {
    goto LABEL_19;
  }
  CMPhotoCFDictionarySetInt32(MutableCopy, (const void *)*MEMORY[0x1E4F2F150], v9);
  ChildSurface = (__IOSurface *)IOSurfaceCreateChildSurface();
  if (!ChildSurface) {
    goto LABEL_19;
  }
  uint64_t v20 = ChildSurface;
  uint64_t v6 = CVPixelBufferCreateWithIOSurface(0, ChildSurface, 0, &pixelBufferOut);
  CFRelease(v20);
  uint64_t v21 = pixelBufferOut;
  if (!pixelBufferOut) {
    goto LABEL_19;
  }
  a2 = v16;
LABEL_26:
  CMPhotoPropagateColorPropertiesFromSourceBuffer(a1, v21);
  *a2 = pixelBufferOut;
  CVPixelBufferRef pixelBufferOut = 0;
LABEL_27:
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  return v6;
}

uint64_t CMPhotoPixelFormatIsWrappableAsGrayscale(int a1, int *a2)
{
  uint64_t result = 0;
  int v4 = 1278226488;
  if (a1 > 1952854575)
  {
    if (a1 > 2019963439)
    {
      if (a1 == 2019963440 || a1 == 2019963956 || a1 == 2019963442)
      {
        int v4 = 1278226736;
        if (!a2) {
          return 1;
        }
        goto LABEL_18;
      }
    }
    else if (a1 == 1952854576 || a1 == 1952854578 || a1 == 1952855092)
    {
      int v4 = 1278226738;
      if (!a2) {
        return 1;
      }
      goto LABEL_18;
    }
  }
  else
  {
    if (a1 <= 1936077359)
    {
      if (a1 != 875704422 && a1 != 875704934 && a1 != 875836518) {
        return result;
      }
LABEL_17:
      if (!a2) {
        return 1;
      }
LABEL_18:
      *a2 = v4;
      return 1;
    }
    if (a1 == 1936077360 || a1 == 1936077362 || a1 == 1936077876)
    {
      int v4 = 1278226742;
      goto LABEL_17;
    }
  }
  return result;
}

uint64_t CMPhotoWrapLumaPlaneAsGrayscale(__CVBuffer *a1, CVPixelBufferRef *a2)
{
  CVPixelBufferRef pixelBufferOut = 0;
  uint64_t v2 = 4294950306;
  if (!a1 || !a2) {
    return v2;
  }
  if (CMPhotoPixelBufferHasUnhandledIdentityMatrix(a1))
  {
    CFDictionaryRef MutableCopy = 0;
    uint64_t v2 = 4294950302;
    goto LABEL_31;
  }
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  OSType v31 = 0;
  if (!CMPhotoPixelFormatIsWrappableAsGrayscale(PixelFormatType, (int *)&v31))
  {
    CFDictionaryRef MutableCopy = 0;
    goto LABEL_31;
  }
  size_t Width = CVPixelBufferGetWidth(a1);
  size_t Height = (unint64_t)(double)CVPixelBufferGetHeight(a1);
  size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(a1);
  uint64_t v2 = (uint64_t)IOSurface;
  if (!IOSurface)
  {
    CFDictionaryRef MutableCopy = 0;
    goto LABEL_23;
  }
  CFTypeRef v10 = IOSurfaceCopyValue(IOSurface, (CFStringRef)*MEMORY[0x1E4F2F080]);
  if (v10)
  {
    uint64_t v11 = v10;
    CFDictionaryRef MutableCopy = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
    CFRelease(v11);
    if (!MutableCopy)
    {
LABEL_34:
      uint64_t v2 = 4294950305;
      goto LABEL_23;
    }
    size_t v13 = (const void *)*MEMORY[0x1E4F2F238];
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(MutableCopy, (const void *)*MEMORY[0x1E4F2F238]);
    if (Value)
    {
      CFArrayRef v15 = Value;
      if (CFArrayGetCount(Value) == 2)
      {
        CFMutableArrayRef v16 = CFArrayCreateMutableCopy(0, 0, v15);
        if (v16)
        {
          CFMutableArrayRef v17 = v16;
          CFDictionarySetValue(MutableCopy, v13, v16);
          CFRelease(v17);
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v17, 0);
          if (!ValueAtIndex)
          {
            uint64_t v2 = 4294950304;
            goto LABEL_31;
          }
          CFDictionaryRef v19 = ValueAtIndex;
          CFArrayRemoveValueAtIndex(v17, 1);
          CMPhotoCFDictionarySetSize(MutableCopy, *MEMORY[0x1E4F2EFB8], BytesPerRowOfPlane * Height);
          CMPhotoCFDictionarySetInt32(MutableCopy, (const void *)*MEMORY[0x1E4F2F150], v31);
          uint64_t v20 = CFDictionaryGetValue(v19, (const void *)*MEMORY[0x1E4F2F178]);
          if (v20) {
            CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E4F2EFE0], v20);
          }
          uint64_t v21 = CFDictionaryGetValue(v19, (const void *)*MEMORY[0x1E4F2F170]);
          if (v21) {
            CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E4F2EFD8], v21);
          }
          uint64_t v22 = CFDictionaryGetValue(v19, (const void *)*MEMORY[0x1E4F2F1F0]);
          if (v22) {
            CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E4F2F0A0], v22);
          }
          CFStringRef v23 = CFDictionaryGetValue(v19, (const void *)*MEMORY[0x1E4F2F1E8]);
          if (v23) {
            CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E4F2F098], v23);
          }
          ChildSurface = (__IOSurface *)IOSurfaceCreateChildSurface();
          if (ChildSurface)
          {
            uint64_t v25 = ChildSurface;
            uint64_t v2 = CVPixelBufferCreateWithIOSurface(0, ChildSurface, 0, &pixelBufferOut);
            CFRelease(v25);
            goto LABEL_23;
          }
        }
        goto LABEL_34;
      }
    }
  }
  else
  {
    CFDictionaryRef MutableCopy = 0;
  }
  uint64_t v2 = 4294950304;
LABEL_23:
  uint64_t v26 = pixelBufferOut;
  if (!pixelBufferOut)
  {
    uint64_t v28 = CVPixelBufferLockBaseAddress(a1, 0);
    if (v28)
    {
      uint64_t v2 = v28;
    }
    else
    {
      OSType v29 = v31;
      BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(a1, 0);
      uint64_t v2 = CVPixelBufferCreateWithBytes(0, (unint64_t)(double)Width, Height, v29, BaseAddressOfPlane, BytesPerRowOfPlane, (CVPixelBufferReleaseBytesCallback)_wrappingLumaBufferReleaseCallback, a1, 0, &pixelBufferOut);
      if (!v2)
      {
        CFRetain(a1);
        uint64_t v26 = pixelBufferOut;
        goto LABEL_24;
      }
      CVPixelBufferUnlockBaseAddress(a1, 0);
    }
LABEL_31:
    if (pixelBufferOut) {
      CFRelease(pixelBufferOut);
    }
    goto LABEL_25;
  }
LABEL_24:
  CVBufferPropagateAttachments(a1, v26);
  CMPhotoRemoveChromaInformationFromBuffer(pixelBufferOut);
  CVBufferRemoveAttachment(pixelBufferOut, (CFStringRef)*MEMORY[0x1E4F24C18]);
  *a2 = pixelBufferOut;
  CVPixelBufferRef pixelBufferOut = 0;
LABEL_25:
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  return v2;
}

void _wrappingLumaBufferReleaseCallback(__CVBuffer *a1)
{
  if (a1)
  {
    CVPixelBufferUnlockBaseAddress(a1, 0);
    CFRelease(a1);
  }
}

uint64_t CMPhotoApplyMagmaMap(__CVBuffer *a1, __CVBuffer *a2)
{
  CVPixelBufferRef pixelBufferOut = 0;
  if (a1)
  {
    if (a2)
    {
      OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
      if (PixelFormatType == CVPixelBufferGetPixelFormatType(a2) && PixelFormatType == 1919365990)
      {
        uint64_t v5 = CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0x100uLL, 1uLL, 0x72673366u, 0, &pixelBufferOut);
        if (v5)
        {
LABEL_30:
          uint64_t v40 = v5;
LABEL_25:
          if (pixelBufferOut) {
            CFRelease(pixelBufferOut);
          }
          return v40;
        }
        uint64_t v6 = pixelBufferOut;
        if (pixelBufferOut
          && CVPixelBufferGetPixelFormatType(pixelBufferOut) == 1919365990
          && (CMPhotoGetPixelBufferCLAPAsRect(v6), (unint64_t)v8 == 256)
          && (unint64_t)v7 == 1)
        {
          CVPixelBufferLockBaseAddress(v6, 0);
          BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(v6, 0);
          CFTypeRef v10 = (char *)CVPixelBufferGetBaseAddressOfPlane(v6, 1uLL);
          uint64_t v11 = (char *)CVPixelBufferGetBaseAddressOfPlane(v6, 2uLL);
          uint64_t v12 = 0;
          size_t v13 = &dword_1AB9D7888;
          do
          {
            *(_DWORD *)&BaseAddressOfPlane[v12] = *(v13 - 1);
            *(_DWORD *)&v10[v12] = *v13;
            *(_DWORD *)&v11[v12] = v13[1];
            v12 += 4;
            v13 += 3;
          }
          while (v12 != 1024);
          CVPixelBufferUnlockBaseAddress(v6, 0);
          unsigned int v14 = 0;
        }
        else
        {
          unsigned int v14 = FigSignalErrorAt();
        }
        CMPhotoGetPixelBufferCLAPAsRect(a1);
        unint64_t v16 = (unint64_t)v15;
        unint64_t v18 = (unint64_t)v17;
        CMPhotoGetPixelBufferCLAPAsRect(a2);
        if (v16 == (unint64_t)v20 && v18 == (unint64_t)v19)
        {
          unsigned int v44 = v14;
          CMPhotoGetPixelBufferCLAPAsRect(pixelBufferOut);
          double v23 = v22;
          CVPixelBufferLockBaseAddress(a1, 0);
          CVPixelBufferLockBaseAddress(a2, 0);
          CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
          int BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
          size_t v24 = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
          int v42 = CVPixelBufferGetBytesPerRowOfPlane(a2, 0);
          uint64_t v25 = (char *)CVPixelBufferGetBaseAddressOfPlane(a2, 0);
          uint64_t v26 = CVPixelBufferGetBaseAddressOfPlane(pixelBufferOut, 0);
          double v27 = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
          unint64_t v46 = a1;
          uint64_t v28 = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, 2uLL);
          OSType v29 = (char *)CVPixelBufferGetBaseAddressOfPlane(a2, 1uLL);
          CVPixelBufferRef pixelBuffer = a2;
          int v30 = (char *)CVPixelBufferGetBaseAddressOfPlane(a2, 2uLL);
          OSType v31 = CVPixelBufferGetBaseAddressOfPlane(pixelBufferOut, 1uLL);
          uint64_t v32 = CVPixelBufferGetBaseAddressOfPlane(pixelBufferOut, 2uLL);
          if (v18)
          {
            uint64_t v33 = 0;
            unint64_t v34 = (unint64_t)v23;
            uint64_t v35 = 4 * (BytesPerRowOfPlane / 4);
            uint64_t v36 = 4 * (v42 / 4);
            do
            {
              if (v16)
              {
                for (uint64_t i = 0; i != v16; ++i)
                {
                  float v38 = v27[i];
                  double v39 = (float)(v28[i] * 255.0) + 0.5;
                  *(_DWORD *)&v25[4 * i] = v26[(int)((int)((float)(v24[i] * 255.0) + 0.5) % v34)];
                  *(_DWORD *)&v29[4 * i] = v31[(int)((int)((float)(v38 * 255.0) + 0.5) % v34)];
                  *(_DWORD *)&v30[4 * i] = v32[(int)((int)v39 % v34)];
                }
              }
              ++v33;
              size_t v24 = (float *)((char *)v24 + v35);
              double v27 = (float *)((char *)v27 + v35);
              uint64_t v28 = (float *)((char *)v28 + v35);
              v25 += v36;
              v29 += v36;
              v30 += v36;
            }
            while (v33 != v18);
          }
          CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
          CVPixelBufferUnlockBaseAddress(v46, 0);
          CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
          uint64_t v40 = v44;
          goto LABEL_25;
        }
      }
    }
    uint64_t v5 = FigSignalErrorAt();
    goto LABEL_30;
  }
  return FigSignalErrorAt();
}

pthread_mutex_t **_callbackDataProviderReleaseBytePointer(pthread_mutex_t **result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = result;
    uint64_t result = (pthread_mutex_t **)pthread_mutex_lock(*result);
    if (!result)
    {
      int v3 = *((_DWORD *)v2 + 7);
      if (v3)
      {
        int v4 = (__CVBuffer *)v2[2];
        if (v4)
        {
          int v5 = v3 - 1;
          *((_DWORD *)v2 + 7) = v5;
          if (!v5)
          {
            CVPixelBufferUnlockBaseAddress(v4, 0);
            uint64_t v6 = v2[2];
            if (v6)
            {
              CFRelease(v6);
              v2[2] = 0;
            }
          }
        }
      }
      double v7 = *v2;
      return (pthread_mutex_t **)pthread_mutex_unlock(v7);
    }
  }
  return result;
}

uint64_t _dataProviderReleasePixelBufferBacking()
{
  return CGBitmapFreeData();
}

uint64_t _callbackDataProviderReleaseImage()
{
  return CGBitmapFreeData();
}

uint64_t ___cmphotoWritePixelBufferToURL_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = FigFileForkWrite();
  if (!result)
  {
    if (a3) {
      return FigSignalErrorAt();
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t VTCompressionPluginClass_create(uint64_t a1, const __CFDictionary *a2)
{
  pthread_once(&_checkFigNoteTraceOnce_onceToken, (void (*)(void))_registerFigNoteTrace);
  char v23 = 1;
  __int16 v22 = 0;
  __int8 v21 = 0;
  int v20 = 0;
  int v4 = *(_DWORD *)(a1 + 40);
  if (v4 != 1752589105 && v4 != 1635148593) {
    return 4294950298;
  }
  int v19 = 1;
  uint64_t v6 = (char *)malloc_type_calloc(1uLL, 0xB8uLL, 0x10E0040D7759597uLL);
  if (!v6) {
    return 4294950305;
  }
  double v7 = (uint64x2_t *)v6;
  long long v8 = *(_OWORD *)(a1 + 84);
  *((void *)v6 + 19) = *(void *)(a1 + 100);
  *(_OWORD *)(v6 + 136) = v8;
  *((_OWORD *)v6 + 3) = kCMPhotoMinimumSourceAlignment;
  if (a2)
  {
    CMPhotoCFDictionaryGetBooleanIfPresent(a2, @"UseCodecSessionPool", &v22);
    CMPhotoCFDictionaryGetBooleanIfPresent(a2, @"ForceHighSpeedEncode", &v21);
    CMPhotoCFDictionaryGetInt32IfPresent(a2, @"Priority", &v20);
    CMPhotoCFDictionaryGetBooleanIfPresent(a2, @"AllowPixelTransfer", &v23);
    CMPhotoCFDictionaryGetBooleanIfPresent(a2, @"UsePixelsOutsideCrop", (unsigned char *)&v22 + 1);
    if (CMPhotoCFDictionaryGetIntIfPresent(a2, @"QualityControllerType", &v19)) {
      CFArrayRef Value = CFDictionaryGetValue(a2, @"QualityControllerParameters");
    }
    else {
      CFArrayRef Value = 0;
    }
    CFDictionaryRef v11 = (const __CFDictionary *)CFDictionaryGetValue(a2, @"CustomMinimumSourceAlignment");
    if (v11)
    {
      CFDictionaryRef v12 = v11;
      CFTypeID v13 = CFGetTypeID(v11);
      if (v13 == CFDictionaryGetTypeID())
      {
        v18[0] = 0uLL;
        CGPointMakeWithDictionaryRepresentation(v12, v18);
        if (v18[0].x > 0.0 && v18[0].y > 0.0) {
          v7[3] = vcvtq_u64_f64(vrndaq_f64((float64x2_t)v18[0]));
        }
      }
    }
    if (CFDictionaryContainsKey(a2, @"SyncEncode"))
    {
      uint64_t v10 = FigSignalErrorAt();
      v7->i8[0] = (v7->u8[0] | v10) != 0;
      memset(v18, 0, 144);
      v18[9] = (CGPoint)(unint64_t)v7;
      VTCompressionPluginClass_dispose((uint64_t)v18);
      return v10;
    }
  }
  else
  {
    CFArrayRef Value = 0;
  }
  v7[2].i32[1] = _getAccelerationMode(a2);
  v7[2].i8[9] = (_BYTE)v22 != 0;
  v7[2].i8[10] = v21;
  v7[2].i8[8] = HIBYTE(v22);
  v7[2].i8[0] = v23;
  v7[10].i32[0] = v19;
  if (Value) {
    CFTypeRef v14 = CFRetain(Value);
  }
  else {
    CFTypeRef v14 = 0;
  }
  v7[10].i64[1] = (uint64_t)v14;
  LODWORD(v18[0].x) = 0;
  CMPhotoCFDictionaryGetInt32IfPresent(a2, @"Priority", v18);
  uint64_t v10 = 0;
  if (LODWORD(v18[0].x) == 1) {
    int v15 = -20;
  }
  else {
    int v15 = 0;
  }
  if (LODWORD(v18[0].x) == 2) {
    int v16 = 90;
  }
  else {
    int v16 = v15;
  }
  v7[4].i32[2] = v16;
  v7[7].i8[0] = 0;
  *(void *)(a1 + 144) = v7;
  return v10;
}

uint64_t VTCompressionPluginClass_canBeReused(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, CFDictionaryRef theDict, const __CFDictionary *a6, unsigned char *a7)
{
  uint64_t v7 = *(void *)(a1 + 144);
  long long v8 = *(const void **)a1;
  v39[0] = 9;
  float v38 = 0;
  unsigned int v9 = a2[1];
  if (v9 == 1752589105 || v9 == 1635148593)
  {
    v39[0] = 1;
    if (CMPhotoCFDictionaryGetIntIfPresent(theDict, @"QualityControllerType", v39)) {
      CFArrayRef Value = CFDictionaryGetValue(theDict, @"QualityControllerParameters");
    }
    else {
      CFArrayRef Value = 0;
    }
    uint64_t EncoderPropertiesFromSource = CMPhotoVideoQualityControllerCreate(v8, a2[11], v39[0], a3, a4, *((void *)a2 + 6), *((void *)a2 + 7), (uint64_t)Value, a2[1], *((unsigned char *)a2 + 8), &v38);
    if (!EncoderPropertiesFromSource)
    {
      __int8 v21 = a7;
      memset(v37, 0, sizeof(v37));
      CMPhotoVideoQualityControllerGetPoolingKey((uint64_t)v38, (uint64_t)v37);
      char AccelerationMode = _getAccelerationMode(theDict);
      char v36 = 1;
      CMPhotoCFDictionaryGetBooleanIfPresent(theDict, @"AllowPixelTransfer", &v36);
      *(_DWORD *)OSType v31 = 0;
      CMPhotoCFDictionaryGetInt32IfPresent(theDict, @"Priority", v31);
      int v22 = *(_DWORD *)v31 == 1 ? -20 : 0;
      int v23 = *(_DWORD *)v31 == 2 ? 90 : v22;
      char v35 = 0;
      CMPhotoCFDictionaryGetBooleanIfPresent(theDict, @"ForceHighSpeedEncode", &v35);
      int v34 = 2;
      uint64_t v32 = -1;
      uint64_t v33 = 0x200000002;
      uint64_t EncoderPropertiesFromSource = (uint64_t)_getEncoderPropertiesFromSource(a6, *a2, 0, *((unsigned __int8 *)a2 + 8), (uint64_t)&v33, (uint64_t)&v32);
      if (!EncoderPropertiesFromSource)
      {
        uint64_t v24 = *(void *)(a1 + 24);
        uint64_t v25 = *(const void **)(v7 + 24);
        int v26 = *a2;
        char v27 = v36;
        char v28 = v35;
        if (!*(unsigned char *)(a1 + 48) && _sourceFrameCountEnabled_onceToken != -1) {
          dispatch_once(&_sourceFrameCountEnabled_onceToken, &__block_literal_global_0);
        }
        *(_OWORD *)OSType v31 = *(_OWORD *)v37;
        *(void *)&v31[13] = *(void *)&v37[13];
        uint64_t EncoderPropertiesFromSource = CMPhotoCodecSessionPoolCheckIfCompressionSessionReusable(v24, v25, (uint64_t)v31, a3, a4, v26, AccelerationMode, 0, v27, v23, v28, v33, v34, v32, 0, v21);
      }
    }
    uint64_t v19 = EncoderPropertiesFromSource;
  }
  else
  {
    uint64_t v19 = 4294950298;
  }
  CMPhotoVideoQualityControllerDispose(v38);
  return v19;
}

void VTCompressionPluginClass_dispose(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(unsigned __int8 **)(a1 + 144);
    if (v2)
    {
      int v3 = (OpaqueVTCompressionSession *)*((void *)v2 + 3);
      if (v3)
      {
        CMTime v7 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA10];
        VTCompressionSessionCompleteFrames(v3, &v7);
        if (v2[41]) {
          CMPhotoCodecSessionPoolRecycleSession(*(void *)(a1 + 24), *((CFTypeRef *)v2 + 3), *v2);
        }
        else {
          VTCompressionSessionInvalidate(*((VTCompressionSessionRef *)v2 + 3));
        }
      }
      int v4 = (void *)*((void *)v2 + 15);
      if (v4)
      {
        if (!v2[128]
          || (CVPixelBufferUnlockBaseAddress((CVPixelBufferRef)v4, 1uLL),
              v2[128] = 0,
              (int v4 = (void *)*((void *)v2 + 15)) != 0))
        {
          CFRelease(v4);
          *((void *)v2 + 15) = 0;
        }
      }
      int v5 = (const void *)*((void *)v2 + 3);
      if (v5)
      {
        CFRelease(v5);
        *((void *)v2 + 3) = 0;
      }
      CMPhotoVideoQualityControllerDispose(*((CFTypeRef **)v2 + 22));
      uint64_t v6 = (const void *)*((void *)v2 + 21);
      if (v6) {
        CFRelease(v6);
      }
      free(v2);
    }
  }
}

uint64_t VTCompressionPluginClass_prepare(uint64_t a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4)
{
  CFAllocatorRef v4 = *(const __CFAllocator **)a1;
  VTCompressionSessionRef v50 = 0;
  compressionSessionOut[0] = 0;
  CFDictionaryRef propertyValueOut = 0;
  CFDictionaryRef v49 = 0;
  double v47 = 0;
  char v46 = 1;
  if (!(a2 | a3))
  {
    CFDictionaryRef v22 = 0;
    CFMutableDataRef Mutable = 0;
    uint64_t v23 = 4294950306;
    goto LABEL_62;
  }
  uint64_t v6 = *(unsigned __int8 **)(a1 + 144);
  if (!v6)
  {
    CFDictionaryRef v22 = 0;
    CFMutableDataRef Mutable = 0;
    uint64_t v23 = 4294950195;
    goto LABEL_62;
  }
  uint64_t v10 = (OpaqueVTCompressionSession *)*((void *)v6 + 3);
  if (v10)
  {
    CMTime completeUntilPresentationTimeStamp = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA10];
    VTCompressionSessionCompleteFrames(v10, &completeUntilPresentationTimeStamp);
    if (v6[41]) {
      CMPhotoCodecSessionPoolRecycleSession(*(void *)(a1 + 24), *((CFTypeRef *)v6 + 3), *v6);
    }
    CFDictionaryRef v11 = (const void *)*((void *)v6 + 3);
    if (v11)
    {
      CFRelease(v11);
      *((void *)v6 + 3) = 0;
    }
  }
  CMPhotoVideoQualityControllerDispose(*((CFTypeRef **)v6 + 22));
  *((void *)v6 + 22) = 0;
  *uint64_t v6 = 0;
  CFMutableDataRef Mutable = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    CFDictionaryRef v22 = 0;
    goto LABEL_81;
  }
  LODWORD(v44) = 2;
  uint64_t v42 = -1;
  uint64_t v43 = 0x200000002;
  uint64_t EncoderPropertiesFromSource = (uint64_t)_getEncoderPropertiesFromSource(a4, *(unsigned int *)(a1 + 44), (uint64_t)Mutable, *(unsigned __int8 *)(a1 + 48), (uint64_t)&v43, (uint64_t)&v42);
  if (EncoderPropertiesFromSource
    || (uint64_t EncoderPropertiesFromSource = CMPhotoVideoQualityControllerCreate(v4, *(_DWORD *)(a1 + 60), *((_DWORD *)v6 + 40), a2, a3, *(void *)(a1 + 64), *(void *)(a1 + 72), *((void *)v6 + 21), *(_DWORD *)(a1 + 40), *(unsigned char *)(a1 + 48), &v50), EncoderPropertiesFromSource)|| (uint64_t EncoderPropertiesFromSource = CMPhotoVideoQualityControllerSetSessionProperties((uint64_t)v50), EncoderPropertiesFromSource))
  {
LABEL_75:
    uint64_t v23 = EncoderPropertiesFromSource;
    CFDictionaryRef v22 = 0;
    goto LABEL_76;
  }
  memset(v41, 0, sizeof(v41));
  CMPhotoVideoQualityControllerGetPoolingKey((uint64_t)v50, (uint64_t)v41);
  CFTypeRef v14 = (int *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  if (!v6[41])
  {
    uint64_t EncoderPropertiesFromSource = CMPhotoCodecSessionPoolCreateEncoderSpecification(v4, *((_DWORD *)v6 + 9), &v47);
    if (!EncoderPropertiesFromSource)
    {
      uint64_t v25 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionaryRef v22 = v25;
      if (v25)
      {
        uint64_t v26 = CMPhotoCFDictionarySetInt32(v25, (const void *)*MEMORY[0x1E4F24D70], *(_DWORD *)(a1 + 44));
        if (!v26)
        {
          uint64_t v26 = VTCompressionSessionCreate(v4, a2, a3, *(_DWORD *)(a1 + 40), v47, v22, v4, (VTCompressionOutputCallback)VTCompressionPluginClass_VideoToolbox_callback, (void *)a1, compressionSessionOut);
          if (!v26)
          {
LABEL_21:
            if (!v46)
            {
              URNFromAuxiliaryint ImageType = 0;
              goto LABEL_36;
            }
            char v27 = (const void *)*MEMORY[0x1E4F447E8];
            char v28 = (const void **)MEMORY[0x1E4F447D0];
            OSType v29 = (const void **)MEMORY[0x1E4F449C8];
            if (*(unsigned char *)(a1 + 48))
            {
              CMPhotoCFDictionarySetBoolean(Mutable, v27, 1);
              CMPhotoCFDictionarySetBoolean(Mutable, *v28, 0);
              CMPhotoCFDictionarySetInt(Mutable, *v29, *(_DWORD *)(a1 + 52));
              CMPhotoCFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E4F448F0], *(_DWORD *)(a1 + 52));
              CMPhotoCFDictionarySetBoolean(Mutable, (const void *)*MEMORY[0x1E4F448A8], *(unsigned __int8 *)(a1 + 56));
              int v30 = *(_DWORD *)(a1 + 80);
              if (v30)
              {
                URNFromAuxiliaryint ImageType = CMPhotoCreateURNFromAuxiliaryImageType(v30);
                if (URNFromAuxiliaryImageType) {
                  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F44808], URNFromAuxiliaryImageType);
                }
                goto LABEL_29;
              }
            }
            else
            {
              CMPhotoCFDictionarySetBoolean(Mutable, v27, 0);
              CMPhotoCFDictionarySetBoolean(Mutable, *v28, 0);
              CMPhotoCFDictionarySetInt(Mutable, *v29, 1);
            }
            URNFromAuxiliaryint ImageType = 0;
LABEL_29:
            FigCFDictionarySetInt32();
            int v31 = *(_DWORD *)(a1 + 40);
            if (v31 == 1635148593)
            {
              CMPhotoGetAVCProfileForPixelFormat(*(unsigned int *)(a1 + 44));
              FigCFDictionarySetValue();
            }
            else
            {
              if (v31 != 1752589105)
              {
                uint64_t v23 = 4294950298;
                goto LABEL_58;
              }
              CMPhotoGetHEVCProfileForPixelFormat(*(unsigned int *)(a1 + 44), *(unsigned __int8 *)(a1 + 48));
            }
            FigCFDictionarySetValue();
            uint64_t v32 = (const void **)MEMORY[0x1E4F1CFD0];
            if (!v6[32]) {
              uint64_t v32 = (const void **)MEMORY[0x1E4F1CFC8];
            }
            CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F447E0], *v32);
            FigCFDictionarySetInt32();
            CMPhotoCFDictionarySetBoolean(Mutable, (const void *)*MEMORY[0x1E4F44AC0], v6[42]);
            CMPhotoCFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E4F44980], *(_DWORD *)(a1 + 44));
LABEL_36:
            if (CFDictionaryGetCount(Mutable) >= 1)
            {
              uint64_t v33 = VTSessionSetProperties(compressionSessionOut[0], Mutable);
              if (v33) {
                goto LABEL_77;
              }
            }
            if (!VTSessionCopyProperty(compressionSessionOut[0], (CFStringRef)*MEMORY[0x1E4F44B48], v4, &propertyValueOut))
            {
              CMPhotoCFDictionaryGetSizeIfPresent(propertyValueOut, (const void *)*MEMORY[0x1E4F45550], (void *)v6 + 6);
              CMPhotoCFDictionaryGetSizeIfPresent(propertyValueOut, (const void *)*MEMORY[0x1E4F455A8], (void *)v6 + 7);
              CMPhotoCFDictionaryGetBooleanIfPresent(propertyValueOut, (const void *)*MEMORY[0x1E4F45548], v6 + 64);
            }
            uint64_t v33 = VTSessionCopyProperty(compressionSessionOut[0], (CFStringRef)*MEMORY[0x1E4F44B88], v4, &v49);
            if (v33)
            {
LABEL_77:
              uint64_t v23 = v33;
              goto LABEL_58;
            }
            CMPhotoCFDictionaryGetSizeIfPresent(v49, (const void *)*MEMORY[0x1E4F24C98], (void *)v6 + 10);
            CMPhotoCFDictionaryGetSizeIfPresent(v49, (const void *)*MEMORY[0x1E4F24D78], (void *)v6 + 11);
            CMPhotoPixelBufferAttributesGetExtendedPixels(v49, 0, (void *)v6 + 12, 0, (void *)v6 + 13);
            *((void *)v6 + 1) = a2;
            *((void *)v6 + 2) = a3;
            VTCompressionSessionRef v35 = v50;
            int v34 = compressionSessionOut[0];
            *((VTCompressionSessionRef *)v6 + 3) = compressionSessionOut[0];
            *((void *)v6 + 22) = v35;
            VTCompressionSessionRef v50 = 0;
            compressionSessionOut[0] = 0;
            int v36 = *v14;
            if (v46)
            {
              if (v36 == 1)
              {
                kdebug_trace();
                int v34 = (OpaqueVTCompressionSession *)*((void *)v6 + 3);
              }
              unsigned int v37 = VTCompressionSessionPrepareToEncodeFrames(v34);
              unsigned int v38 = v37;
              if (*v14 != 1)
              {
                if (v37 == -12782) {
                  uint64_t v23 = 0;
                }
                else {
                  uint64_t v23 = v37;
                }
                goto LABEL_58;
              }
              kdebug_trace();
              if (v38 == -12782) {
                uint64_t v23 = 0;
              }
              else {
                uint64_t v23 = v38;
              }
              if (v23 || *v14 != 1) {
                goto LABEL_58;
              }
            }
            else if (v36 != 1)
            {
LABEL_53:
              uint64_t v23 = 0;
              goto LABEL_58;
            }
            kdebug_trace();
            goto LABEL_53;
          }
        }
        uint64_t v23 = v26;
LABEL_76:
        URNFromAuxiliaryint ImageType = 0;
        goto LABEL_58;
      }
LABEL_81:
      URNFromAuxiliaryint ImageType = 0;
      uint64_t v23 = 4294950305;
      goto LABEL_58;
    }
    goto LABEL_75;
  }
  int v15 = *(const void **)(a1 + 24);
  unsigned int v16 = *(_DWORD *)(a1 + 44);
  unsigned int v17 = *((_DWORD *)v6 + 9);
  char v18 = v6[32];
  int v19 = *((_DWORD *)v6 + 18);
  char v20 = v6[42];
  *(_OWORD *)&completeUntilPresentationTimeStamp.uint64x2_t value = *(_OWORD *)v41;
  *(void *)((char *)&completeUntilPresentationTimeStamp.flags + 1) = *(void *)&v41[13];
  uint64_t v21 = CMPhotoCodecSessionPoolCreateCompressionSession(v15, (uint64_t)&completeUntilPresentationTimeStamp, a2, a3, v16, v17, 0, v18, v19, v20, v43, v44, v42, 0, (uint64_t)VTCompressionPluginClass_VideoToolbox_callback, a1, compressionSessionOut, &v46);
  CFDictionaryRef v22 = 0;
  if (!v21) {
    goto LABEL_21;
  }
  uint64_t v23 = v21;
  URNFromAuxiliaryint ImageType = 0;
LABEL_58:
  BOOL v39 = (v23 | *v6) != 0;
  *uint64_t v6 = v39;
  if (v6[41]) {
    CMPhotoCodecSessionPoolRecycleSession(*(void *)(a1 + 24), compressionSessionOut[0], v39);
  }
  if (URNFromAuxiliaryImageType) {
    CFRelease(URNFromAuxiliaryImageType);
  }
LABEL_62:
  if (compressionSessionOut[0]) {
    CFRelease(compressionSessionOut[0]);
  }
  if (v49) {
    CFRelease(v49);
  }
  if (v47) {
    CFRelease(v47);
  }
  if (v22) {
    CFRelease(v22);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (propertyValueOut) {
    CFRelease(propertyValueOut);
  }
  CMPhotoVideoQualityControllerDispose((CFTypeRef *)v50);
  return v23;
}

uint64_t VTCompressionPluginClass_encode(uint64_t a1, CVBufferRef buffer, uint64_t a3, _OWORD *a4, uint64_t a5, uint64_t a6, void *a7)
{
  unsigned int v9 = buffer;
  uint64_t v11 = *(void *)(a1 + 144);
  unsigned int v37 = 0;
  size_t v12 = *(void *)(v11 + 8);
  size_t v13 = *(void *)(v11 + 16);
  __int16 v36 = 0;
  if (*(void *)(a5 + 16) != v12 || *(void *)(a5 + 24) != v13)
  {
    CFDictionaryRef v15 = CVBufferCopyAttachments(buffer, kCVAttachmentMode_ShouldPropagate);
    uint64_t v16 = VTCompressionPluginClass_prepare(a1, *(void *)(a5 + 16), *(void *)(a5 + 24), v15);
    if (v15) {
      CFRelease(v15);
    }
    if (v16)
    {
      CFMutableDataRef Mutable = 0;
      CFDictionaryRef v18 = 0;
LABEL_9:
      *(unsigned char *)uint64_t v11 = 1;
      goto LABEL_34;
    }
  }
  CFMutableDataRef Mutable = CFDictionaryCreateMutable(*(CFAllocatorRef *)a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    CFDictionaryRef v18 = 0;
    goto LABEL_43;
  }
  CFDictionaryRef v18 = CFDictionaryCreateMutable(*(CFAllocatorRef *)a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v18)
  {
LABEL_43:
    uint64_t v16 = 4294950305;
    goto LABEL_9;
  }
  long long v19 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)presentationTimeStamp = *(_OWORD *)a5;
  *(_OWORD *)&presentationTimeStamp[16] = v19;
  long long v20 = a4[1];
  *(_OWORD *)duration = *a4;
  *(_OWORD *)&duration[16] = v20;
  uint64_t v21 = _needsPixelBufferCopy(v9, v11, presentationTimeStamp, duration, 0, 0, (BOOL *)&v36 + 1, (BOOL *)&v36, 0, 0);
  if (v21)
  {
LABEL_41:
    uint64_t v16 = v21;
    goto LABEL_9;
  }
  if (*(void *)(a5 + 16) != vcvtad_u64_f64(CMPhotoGetPixelBufferSize(v9))
    || *(void *)(a5 + 24) != vcvtad_u64_f64(v22))
  {
    if (*MEMORY[0x1E4F1EBA8] == 1) {
      kdebug_trace();
    }
    long long v25 = a4[1];
    *(_OWORD *)presentationTimeStamp = *a4;
    *(_OWORD *)&presentationTimeStamp[16] = v25;
    long long v26 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)duration = *(_OWORD *)a5;
    *(_OWORD *)&duration[16] = v26;
    uint64_t v16 = _performTileCopy(a1, v9, v12, v13, presentationTimeStamp, (unint64_t *)duration, HIBYTE(v36), v36, (CFTypeRef *)&v37);
    uint64_t v24 = a7;
    if (*MEMORY[0x1E4F1EBA8] == 1) {
      kdebug_trace();
    }
    if (v16) {
      goto LABEL_9;
    }
    unsigned int v9 = v37;
    if (v37)
    {
      uint64_t v21 = CMPhotoCFDictionarySetInt(Mutable, @"StillOffsetW", 0);
      if (v21) {
        goto LABEL_41;
      }
      uint64_t v21 = CMPhotoCFDictionarySetInt(Mutable, @"StillOffsetH", 0);
      if (v21) {
        goto LABEL_41;
      }
      goto LABEL_26;
    }
    goto LABEL_43;
  }
  uint64_t v23 = *(void *)(a5 + 8);
  uint64_t v21 = CMPhotoCFDictionarySetInt(Mutable, @"StillOffsetW", *(_DWORD *)a5);
  if (v21) {
    goto LABEL_41;
  }
  uint64_t v21 = CMPhotoCFDictionarySetInt(Mutable, @"StillOffsetH", v23);
  uint64_t v24 = a7;
  if (v21) {
    goto LABEL_41;
  }
LABEL_26:
  uint64_t v21 = CMPhotoVideoQualityControllerAnalyzeTile(*(void *)(v11 + 176));
  if (v21) {
    goto LABEL_41;
  }
  uint64_t v21 = CMPhotoVideoQualityControllerSetTileProperties(*(void *)(v11 + 176));
  if (v21) {
    goto LABEL_41;
  }
  if (CFDictionaryGetCount(v18) >= 1)
  {
    uint64_t v21 = VTSessionSetProperties(*(VTSessionRef *)(v11 + 24), v18);
    if (v21) {
      goto LABEL_41;
    }
  }
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  memset(&v33, 0, sizeof(v33));
  CMTimeMake(&v33, 1, 24);
  char v27 = *(OpaqueVTCompressionSession **)(v11 + 24);
  *(_OWORD *)presentationTimeStamp = *(_OWORD *)(v11 + 136);
  *(void *)&presentationTimeStamp[16] = *(void *)(v11 + 152);
  *(CMTime *)duration = v33;
  uint64_t v16 = VTCompressionSessionEncodeFrame(v27, v9, (CMTime *)presentationTimeStamp, (CMTime *)duration, Mutable, v24, 0);
  if (v16) {
    goto LABEL_9;
  }
  long long v29 = *(_OWORD *)(v11 + 136);
  uint64_t v28 = v11 + 136;
  *(_OWORD *)duration = v29;
  *(void *)&duration[16] = *(void *)(v28 + 16);
  rhCGColorSpaceRef s = v33;
  CMTimeAdd((CMTime *)presentationTimeStamp, (CMTime *)duration, &rhs);
  *(_OWORD *)uint64_t v28 = *(_OWORD *)presentationTimeStamp;
  *(void *)(v28 + 16) = *(void *)&presentationTimeStamp[16];
LABEL_34:
  if (v37) {
    CFRelease(v37);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v18) {
    CFRelease(v18);
  }
  return v16;
}

uint64_t VTCompressionPluginClass_completeEncodes(uint64_t a1)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v1 = *(void *)(a1 + 144);
  if (!v1) {
    return 4294950195;
  }
  uint64_t v2 = *(OpaqueVTCompressionSession **)(v1 + 24);
  CMTime v4 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  return VTCompressionSessionCompleteFrames(v2, &v4);
}

uint64_t VTTileCompressionPluginClass_create(uint64_t a1, const __CFDictionary *a2)
{
  pthread_once(&_checkFigNoteTraceOnce_onceToken, (void (*)(void))_registerFigNoteTrace);
  char v23 = 1;
  __int16 v22 = 0;
  __int8 v21 = 0;
  int v20 = 0;
  int v4 = *(_DWORD *)(a1 + 40);
  if (v4 != 1752589105 && v4 != 1635148593) {
    return 4294950298;
  }
  int v19 = 1;
  uint64_t v6 = (char *)malloc_type_calloc(1uLL, 0xB8uLL, 0x10E0040D7759597uLL);
  if (!v6) {
    return 4294950305;
  }
  CMTime v7 = (uint64x2_t *)v6;
  uint64_t v8 = MEMORY[0x1E4F1FA48];
  *(_OWORD *)(v6 + 136) = *MEMORY[0x1E4F1FA48];
  *((void *)v6 + 19) = *(void *)(v8 + 16);
  *((_OWORD *)v6 + 3) = kCMPhotoMinimumSourceAlignment;
  if (a2)
  {
    CMPhotoCFDictionaryGetBooleanIfPresent(a2, @"UseCodecSessionPool", &v22);
    CMPhotoCFDictionaryGetBooleanIfPresent(a2, @"ForceHighSpeedEncode", &v21);
    CMPhotoCFDictionaryGetInt32IfPresent(a2, @"Priority", &v20);
    CMPhotoCFDictionaryGetBooleanIfPresent(a2, @"AllowPixelTransfer", &v23);
    CMPhotoCFDictionaryGetBooleanIfPresent(a2, @"UsePixelsOutsideCrop", (unsigned char *)&v22 + 1);
    if (CMPhotoCFDictionaryGetIntIfPresent(a2, @"QualityControllerType", &v19)) {
      CFArrayRef Value = CFDictionaryGetValue(a2, @"QualityControllerParameters");
    }
    else {
      CFArrayRef Value = 0;
    }
    CFDictionaryRef v11 = (const __CFDictionary *)CFDictionaryGetValue(a2, @"CustomMinimumSourceAlignment");
    if (v11)
    {
      CFDictionaryRef v12 = v11;
      CFTypeID v13 = CFGetTypeID(v11);
      if (v13 == CFDictionaryGetTypeID())
      {
        v18[0] = 0uLL;
        CGPointMakeWithDictionaryRepresentation(v12, v18);
        if (v18[0].x > 0.0 && v18[0].y > 0.0) {
          v7[3] = vcvtq_u64_f64(vrndaq_f64((float64x2_t)v18[0]));
        }
      }
    }
    if (CFDictionaryContainsKey(a2, @"SyncEncode"))
    {
      uint64_t v10 = FigSignalErrorAt();
      v7->i8[0] = (v7->u8[0] | v10) != 0;
      memset(v18, 0, 144);
      v18[9] = (CGPoint)(unint64_t)v7;
      VTTileCompressionPluginClass_dispose((uint64_t)v18);
      return v10;
    }
  }
  else
  {
    CFArrayRef Value = 0;
  }
  v7[2].i32[1] = _getAccelerationMode(a2);
  v7[2].i8[9] = (_BYTE)v22 != 0;
  v7[2].i8[10] = v21;
  v7[2].i8[8] = HIBYTE(v22);
  v7[2].i8[0] = v23;
  v7[10].i32[0] = v19;
  if (Value) {
    CFTypeRef v14 = CFRetain(Value);
  }
  else {
    CFTypeRef v14 = 0;
  }
  v7[10].i64[1] = (uint64_t)v14;
  v7[7].i8[0] = 1;
  LODWORD(v18[0].x) = 0;
  CMPhotoCFDictionaryGetInt32IfPresent(a2, @"Priority", v18);
  uint64_t v10 = 0;
  if (LODWORD(v18[0].x) == 1) {
    int v15 = -20;
  }
  else {
    int v15 = 0;
  }
  if (LODWORD(v18[0].x) == 2) {
    int v16 = 90;
  }
  else {
    int v16 = v15;
  }
  v7[4].i32[2] = v16;
  *(void *)(a1 + 144) = v7;
  return v10;
}

void VTTileCompressionPluginClass_dispose(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(unsigned __int8 **)(a1 + 144);
    if (v2)
    {
      if (*((void *)v2 + 3))
      {
        VTTileCompressionSessionCompleteTiles();
        if (v2[41])
        {
          VTSessionSetProperty(*((VTSessionRef *)v2 + 3), (CFStringRef)*MEMORY[0x1E4F44908], (CFTypeRef)*MEMORY[0x1E4F1CFD0]);
          CMPhotoCodecSessionPoolRecycleSession(*(void *)(a1 + 24), *((CFTypeRef *)v2 + 3), *v2);
        }
        else
        {
          VTTileCompressionSessionInvalidate();
        }
      }
      int v3 = (void *)*((void *)v2 + 15);
      if (v3)
      {
        if (!v2[128]
          || (CVPixelBufferUnlockBaseAddress((CVPixelBufferRef)v3, 1uLL),
              v2[128] = 0,
              (int v3 = (void *)*((void *)v2 + 15)) != 0))
        {
          CFRelease(v3);
          *((void *)v2 + 15) = 0;
        }
      }
      int v4 = (const void *)*((void *)v2 + 3);
      if (v4)
      {
        CFRelease(v4);
        *((void *)v2 + 3) = 0;
      }
      CMPhotoVideoQualityControllerDispose(*((CFTypeRef **)v2 + 22));
      int v5 = (const void *)*((void *)v2 + 21);
      if (v5) {
        CFRelease(v5);
      }
      free(v2);
    }
  }
}

uint64_t VTTileCompressionPluginClass_prepare(uint64_t a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4)
{
  CFAllocatorRef v4 = *(const __CFAllocator **)a1;
  uint64_t v42 = 0;
  v43[0] = 0;
  CFDictionaryRef propertyValueOut = 0;
  CFDictionaryRef v41 = 0;
  unint64_t v38 = 0;
  BOOL v39 = 0;
  char v37 = 1;
  if (!(a2 | a3))
  {
    __int8 v21 = 0;
    CFMutableDataRef Mutable = 0;
    uint64_t v28 = 4294950306;
    goto LABEL_55;
  }
  uint64_t v6 = *(unsigned __int8 **)(a1 + 144);
  if (!v6)
  {
    __int8 v21 = 0;
    CFMutableDataRef Mutable = 0;
    uint64_t v28 = 4294950195;
    goto LABEL_55;
  }
  if (*((void *)v6 + 3))
  {
    VTTileCompressionSessionCompleteTiles();
    if (v6[41]) {
      CMPhotoCodecSessionPoolRecycleSession(*(void *)(a1 + 24), *((CFTypeRef *)v6 + 3), *v6);
    }
    uint64_t v10 = (const void *)*((void *)v6 + 3);
    if (v10)
    {
      CFRelease(v10);
      *((void *)v6 + 3) = 0;
    }
  }
  CMPhotoVideoQualityControllerDispose(*((CFTypeRef **)v6 + 22));
  *((void *)v6 + 22) = 0;
  *uint64_t v6 = 0;
  CFMutableDataRef Mutable = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    __int8 v21 = 0;
    goto LABEL_71;
  }
  unsigned int v36 = 2;
  uint64_t v34 = -1;
  uint64_t v35 = 0x200000002;
  uint64_t EncoderPropertiesFromSource = (uint64_t)_getEncoderPropertiesFromSource(a4, *(unsigned int *)(a1 + 44), (uint64_t)Mutable, *(unsigned __int8 *)(a1 + 48), (uint64_t)&v35, (uint64_t)&v34);
  if (EncoderPropertiesFromSource
    || (uint64_t EncoderPropertiesFromSource = CMPhotoVideoQualityControllerCreate(v4, *(_DWORD *)(a1 + 60), *((_DWORD *)v6 + 40), a2, a3, *(void *)(a1 + 64), *(void *)(a1 + 72), *((void *)v6 + 21), *(_DWORD *)(a1 + 40), *(unsigned char *)(a1 + 48), &v42), EncoderPropertiesFromSource)|| (uint64_t EncoderPropertiesFromSource = CMPhotoVideoQualityControllerSetSessionProperties((uint64_t)v42), EncoderPropertiesFromSource))
  {
LABEL_66:
    uint64_t v28 = EncoderPropertiesFromSource;
    __int8 v21 = 0;
    goto LABEL_51;
  }
  memset(v33, 0, sizeof(v33));
  CMPhotoVideoQualityControllerGetPoolingKey((uint64_t)v42, (uint64_t)v33);
  CFTypeID v13 = (int *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  if (_sourceFrameCountEnabled_onceToken != -1) {
    dispatch_once(&_sourceFrameCountEnabled_onceToken, &__block_literal_global_0);
  }
  if (!v6[41])
  {
    uint64_t EncoderPropertiesFromSource = CMPhotoCodecSessionPoolCreateEncoderSpecification(v4, *((_DWORD *)v6 + 9), &v39);
    if (!EncoderPropertiesFromSource)
    {
      __int16 v22 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      __int8 v21 = v22;
      if (v22)
      {
        uint64_t v20 = CMPhotoCFDictionarySetInt32(v22, (const void *)*MEMORY[0x1E4F24D70], *(_DWORD *)(a1 + 44));
        if (v20) {
          goto LABEL_67;
        }
        unint64_t v38 = __PAIR64__(a3, a2);
        uint64_t v20 = VTTileCompressionSessionCreate();
        if (v20) {
          goto LABEL_67;
        }
        goto LABEL_23;
      }
LABEL_71:
      uint64_t v28 = 4294950305;
      goto LABEL_51;
    }
    goto LABEL_66;
  }
  CFTypeRef v14 = *(const void **)(a1 + 24);
  unsigned int v15 = *(_DWORD *)(a1 + 44);
  unsigned int v16 = *((_DWORD *)v6 + 9);
  char v17 = v6[32];
  int v18 = *((_DWORD *)v6 + 18);
  char v19 = v6[42];
  *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
  *(void *)&v32[13] = *(void *)&v33[13];
  uint64_t v20 = CMPhotoCodecSessionPoolCreateCompressionSession(v14, (uint64_t)v32, a2, a3, v15, v16, 1, v17, v18, v19, v35, v36, v34, 0, (uint64_t)VTTileCompressionPluginClass_VideoToolbox_callback, a1, v43, &v37);
  __int8 v21 = 0;
  if (v20)
  {
LABEL_67:
    uint64_t v28 = v20;
    goto LABEL_51;
  }
LABEL_23:
  if (v37)
  {
    CMPhotoCFDictionarySetBoolean(Mutable, (const void *)*MEMORY[0x1E4F447E8], 0);
    CMPhotoCFDictionarySetBoolean(Mutable, (const void *)*MEMORY[0x1E4F447D0], 0);
    CMPhotoCFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E4F449C8], 1);
    CMPhotoCFDictionarySetSize(Mutable, *MEMORY[0x1E4F44B18], 0);
    FigCFDictionarySetInt32();
    int v23 = *(_DWORD *)(a1 + 40);
    if (v23 == 1635148593)
    {
      CMPhotoGetAVCProfileForPixelFormat(*(unsigned int *)(a1 + 44));
      FigCFDictionarySetValue();
    }
    else
    {
      if (v23 != 1752589105)
      {
        uint64_t v28 = 4294950298;
        goto LABEL_51;
      }
      CMPhotoGetHEVCProfileForPixelFormat(*(unsigned int *)(a1 + 44), *(unsigned __int8 *)(a1 + 48));
    }
    FigCFDictionarySetValue();
    CMPhotoCFDictionarySetBoolean(Mutable, (const void *)*MEMORY[0x1E4F447E0], v6[32]);
    FigCFDictionarySetInt32();
    CMPhotoCFDictionarySetBoolean(Mutable, (const void *)*MEMORY[0x1E4F44AC0], v6[42]);
    CMPhotoCFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E4F44980], *(_DWORD *)(a1 + 44));
  }
  if (CFDictionaryGetCount(Mutable) >= 1)
  {
    uint64_t v20 = VTSessionSetProperties(v43[0], Mutable);
    if (v20) {
      goto LABEL_67;
    }
  }
  if (!VTSessionCopyProperty(v43[0], (CFStringRef)*MEMORY[0x1E4F44B48], v4, &propertyValueOut))
  {
    CMPhotoCFDictionaryGetSizeIfPresent(propertyValueOut, (const void *)*MEMORY[0x1E4F45550], (void *)v6 + 6);
    CMPhotoCFDictionaryGetSizeIfPresent(propertyValueOut, (const void *)*MEMORY[0x1E4F455A8], (void *)v6 + 7);
    CMPhotoCFDictionaryGetBooleanIfPresent(propertyValueOut, (const void *)*MEMORY[0x1E4F45548], v6 + 64);
  }
  uint64_t v20 = VTSessionCopyProperty(v43[0], (CFStringRef)*MEMORY[0x1E4F44B88], v4, &v41);
  if (v20) {
    goto LABEL_67;
  }
  CMPhotoCFDictionaryGetSizeIfPresent(v41, (const void *)*MEMORY[0x1E4F24C98], (void *)v6 + 10);
  CMPhotoCFDictionaryGetSizeIfPresent(v41, (const void *)*MEMORY[0x1E4F24D78], (void *)v6 + 11);
  CMPhotoPixelBufferAttributesGetExtendedPixels(v41, 0, (void *)v6 + 12, 0, (void *)v6 + 13);
  *((void *)v6 + 1) = a2;
  *((void *)v6 + 2) = a3;
  uint64_t v24 = v42;
  *((CFTypeRef *)v6 + 3) = v43[0];
  *((void *)v6 + 22) = v24;
  uint64_t v42 = 0;
  v43[0] = 0;
  int v25 = *v13;
  if (v37)
  {
    if (v25 == 1) {
      kdebug_trace();
    }
    unsigned int v26 = VTTileCompressionSessionPrepareToEncodeTiles();
    unsigned int v27 = v26;
    if (*v13 != 1)
    {
      if (v26 == -12782) {
        uint64_t v28 = 0;
      }
      else {
        uint64_t v28 = v26;
      }
      goto LABEL_51;
    }
    kdebug_trace();
    if (v27 == -12782) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = v27;
    }
    if (v28 || *v13 != 1) {
      goto LABEL_51;
    }
    goto LABEL_45;
  }
  if (v25 == 1) {
LABEL_45:
  }
    kdebug_trace();
  uint64_t v28 = 0;
LABEL_51:
  BOOL v29 = (v28 | *v6) != 0;
  *uint64_t v6 = v29;
  CFTypeRef v30 = v43[0];
  if (v6[41])
  {
    CMPhotoCodecSessionPoolRecycleSession(*(void *)(a1 + 24), v43[0], v29);
    CFTypeRef v30 = v43[0];
  }
  if (v30) {
    CFRelease(v30);
  }
LABEL_55:
  if (v41) {
    CFRelease(v41);
  }
  if (v39) {
    CFRelease(v39);
  }
  if (v21) {
    CFRelease(v21);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (propertyValueOut) {
    CFRelease(propertyValueOut);
  }
  CMPhotoVideoQualityControllerDispose(v42);
  return v28;
}

uint64_t VTTileCompressionPluginClass_encode(uint64_t a1, CVBufferRef buffer, uint64_t a3, long long *a4, long long *a5, uint64_t a6)
{
  unsigned int v9 = buffer;
  uint64_t v11 = *(void *)(a1 + 144);
  size_t v12 = *(void *)(v11 + 8);
  size_t v13 = *(void *)(v11 + 16);
  v32[1] = 0;
  CMTime v33 = 0;
  v32[0] = 0;
  __int16 v31 = 0;
  __int16 v30 = 0;
  *(void *)(a1 + 152) = a3;
  if (*((void *)a5 + 2) == v12 && *((void *)a5 + 3) == v13) {
    goto LABEL_9;
  }
  CFDictionaryRef v15 = CVBufferCopyAttachments(buffer, kCVAttachmentMode_ShouldPropagate);
  uint64_t v16 = VTTileCompressionPluginClass_prepare(a1, *((void *)a5 + 2), *((void *)a5 + 3), v15);
  if (v15) {
    CFRelease(v15);
  }
  if (!v16)
  {
LABEL_9:
    if (a6) {
      uint64_t Value = FigCFDictionaryGetValue();
    }
    else {
      uint64_t Value = 0;
    }
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(*(CFAllocatorRef *)a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      CFDictionaryRef v17 = CFDictionaryCreateMutable(*(CFAllocatorRef *)a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (v17)
      {
        long long v19 = a5[1];
        long long v28 = *a5;
        long long v29 = v19;
        long long v20 = a4[1];
        long long v26 = *a4;
        long long v27 = v20;
        uint64_t v21 = _needsPixelBufferCopy(v9, v11, &v28, &v26, 1, v32, (BOOL *)&v30 + 1, (BOOL *)&v30, (BOOL *)&v31 + 1, &v31);
        if (v21) {
          goto LABEL_46;
        }
        if (HIBYTE(v31))
        {
          if (!*(unsigned char *)(v11 + 32))
          {
            uint64_t v16 = FigSignalErrorAt();
            goto LABEL_36;
          }
        }
        else if (!(_BYTE)v31)
        {
          goto LABEL_25;
        }
        if (*MEMORY[0x1E4F1EBA8] == 1) {
          kdebug_trace();
        }
        long long v22 = a4[1];
        long long v28 = *a4;
        long long v29 = v22;
        long long v23 = a5[1];
        long long v26 = *a5;
        long long v27 = v23;
        uint64_t v16 = _performTileCopy(a1, v9, v12, v13, &v28, (unint64_t *)&v26, HIBYTE(v30), v30, (CFTypeRef *)&v33);
        if (*MEMORY[0x1E4F1EBA8] == 1) {
          kdebug_trace();
        }
        if (v16) {
          goto LABEL_37;
        }
        unsigned int v9 = v33;
        if (v33)
        {
LABEL_25:
          CMPhotoVideoQualityControllerAnalyzeTile(*(void *)(v11 + 176));
          uint64_t v21 = CMPhotoVideoQualityControllerSetTileProperties(*(void *)(v11 + 176));
          if (!v21)
          {
            if (CFDictionaryGetCount(v17) < 1
              || (uint64_t v21 = VTSessionSetProperties(*(VTSessionRef *)(v11 + 24), v17), !v21))
            {
              if (*MEMORY[0x1E4F1EBA8] == 1) {
                kdebug_trace();
              }
              CMPhotoGetPixelBufferSize(v9);
              CVPixelBufferGetPixelFormatType(v9);
              if (Value) {
                FigCFDictionarySetValue();
              }
              if (*MEMORY[0x1E4F1EBA8] == 1) {
                kdebug_trace();
              }
              uint64_t v16 = VTTileCompressionSessionEncodeTile();
              if (*MEMORY[0x1E4F1EBA8] == 1) {
                kdebug_trace();
              }
LABEL_36:
              if (!v16) {
                goto LABEL_38;
              }
              goto LABEL_37;
            }
          }
LABEL_46:
          uint64_t v16 = v21;
          goto LABEL_37;
        }
      }
    }
    else
    {
      CFDictionaryRef v17 = 0;
    }
    uint64_t v16 = 4294950305;
    goto LABEL_37;
  }
  CFDictionaryRef v17 = 0;
  CFMutableDictionaryRef Mutable = 0;
LABEL_37:
  *(unsigned char *)uint64_t v11 = 1;
LABEL_38:
  if (v33) {
    CFRelease(v33);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v17) {
    CFRelease(v17);
  }
  return v16;
}

uint64_t VTTileCompressionPluginClass_completeEncodes(uint64_t a1)
{
  if (!a1) {
    return 4294950306;
  }
  if (!*(void *)(a1 + 144)) {
    return 4294950195;
  }
  uint64_t v1 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  uint64_t v2 = VTTileCompressionSessionCompleteTiles();
  if (*v1 == 1) {
    kdebug_trace();
  }
  return v2;
}

uint64_t VTTileCompressionPluginClass_pixelTransfer(uint64_t a1, __CVBuffer *a2, _OWORD *a3, unint64_t *a4, CVPixelBufferRef *a5)
{
  uint64_t v10 = *(unsigned char **)(a1 + 144);
  __int16 v33 = 0;
  long long v11 = a3[1];
  v32[0] = *a3;
  v32[1] = v11;
  long long v12 = *((_OWORD *)a4 + 1);
  v31[0] = *(_OWORD *)a4;
  v31[1] = v12;
  uint64_t v13 = _needsPixelBufferCopy(a2, (uint64_t)v10, v32, v31, 1, 0, 0, 0, (BOOL *)&v33 + 1, &v33);
  if (v13)
  {
    uint64_t v15 = v13;
    if (!v10) {
      return v15;
    }
LABEL_19:
    if (v15) {
      *uint64_t v10 = 1;
    }
    return v15;
  }
  if (!(HIBYTE(v33) | v33)) {
    return 0;
  }
  CFTypeRef v14 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  uint64_t v15 = 4294950306;
  if (a2 && a5)
  {
    __int16 v30 = v10;
    unint64_t v16 = a4[1];
    unint64_t v29 = *a4;
    unint64_t v18 = a4[2];
    unint64_t v17 = a4[3];
    uint64_t v21 = a3 + 1;
    uint64_t v20 = *((void *)a3 + 2);
    uint64_t v19 = *((void *)v21 + 1);
    uint64_t v22 = *(void *)(a1 + 144);
    uint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(a2);
    size_t v24 = *(void *)(v22 + 96) + v20;
    size_t v25 = *(void *)(v22 + 104) + v19;
    uint64_t PixelBuffer = CMPhotoSurfacePoolCreatePixelBuffer(*(const void **)(a1 + 8), PixelFormatType, v24, v25, 1, 0, 0, 1, *(void *)(v22 + 80), 0, a5);
    if (PixelBuffer
      || (uint64_t PixelBuffer = CMPhotoScaleAndRotateSessionTransformWithRect(*(void *)(a1 + 16), a2, 1, 1, *a5, 0, 0, 1u, (double)v29, (double)v16, (double)v18, (double)v17, 0.0, 0.0, (double)v18, (double)v17), PixelBuffer))
    {
      uint64_t v15 = PixelBuffer;
      uint64_t v10 = v30;
    }
    else
    {
      unint64_t v27 = v17;
      uint64_t v10 = v30;
      if (v24 == v18 && v25 == v27)
      {
        uint64_t v15 = 0;
      }
      else
      {
        uint64_t v15 = VTFillPixelBufferBorderWithBlack();
        if (!v15) {
          *(unsigned char *)(v22 + 40) = 1;
        }
      }
    }
    CFTypeRef v14 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  }
  if (*v14 == 1) {
    kdebug_trace();
  }
  if (v10) {
    goto LABEL_19;
  }
  return v15;
}

uint64_t VTTileCompressionPluginClass_CopyReconstructionPixelBufferAttributes(uint64_t a1, void *propertyValueOut)
{
  return VTSessionCopyProperty(*(VTSessionRef *)(*(void *)(a1 + 144) + 24), @"ReconstructedPixelBufferAttributes", *(CFAllocatorRef *)a1, propertyValueOut);
}

uint64_t _getAccelerationMode(const __CFDictionary *a1)
{
  char v7 = 0;
  if (CMPhotoCFDictionaryGetBooleanIfPresent(a1, @"RequireHardwareCodec", &v7)) {
    BOOL v3 = v7 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    if (CMPhotoCFDictionaryGetBooleanIfPresent(a1, @"PreferSoftwareCodec", &v7)) {
      BOOL v4 = v7 == 0;
    }
    else {
      BOOL v4 = 1;
    }
    uint64_t v5 = !v4;
  }
  else
  {
    uint64_t v5 = 2;
  }
  return CMPhotoGetEncodeAccelerationModeOverride(v5, v2);
}

CFDictionaryRef _getEncoderPropertiesFromSource(const __CFDictionary *result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  *(void *)a5 = 0x200000002;
  *(_DWORD *)(a5 + 8) = 2;
  *(void *)a6 = -1;
  if (!result) {
    return result;
  }
  CFDictionaryRef v10 = result;
  CFStringRef colorPrimariesString = (CFStringRef)CFDictionaryGetValue(result, (const void *)*MEMORY[0x1E4F24A90]);
  CFStringRef transferFunctionString = (CFStringRef)CFDictionaryGetValue(v10, (const void *)*MEMORY[0x1E4F24BC8]);
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v10, (const void *)*MEMORY[0x1E4F24C18]);
  CFStringRef v19 = Value;
  long long v12 = CFDictionaryGetValue(v10, (const void *)*MEMORY[0x1E4F24A10]);
  uint64_t v13 = CFDictionaryGetValue(v10, (const void *)*MEMORY[0x1E4F24A08]);
  if (a4)
  {
    CFTypeRef v14 = _copyColorSpaceFromSource(v10);
    CFDictionaryRef v15 = v14;
    if (v14)
    {
      uint64_t TripletsForColorSpace = CMPhotoGetTripletsForColorSpace(v14, a2, &colorPrimariesString, &transferFunctionString, 0);
      if (TripletsForColorSpace)
      {
        uint64_t v17 = TripletsForColorSpace;
        if (TripletsForColorSpace != -16993)
        {
LABEL_24:
          CFRelease(v15);
          return (const __CFDictionary *)v17;
        }
      }
    }
    if (Value) {
      goto LABEL_13;
    }
  }
  else
  {
    CFDictionaryRef v15 = 0;
    if (Value) {
      goto LABEL_13;
    }
  }
  if (v15 || (CFDictionaryRef v15 = _copyColorSpaceFromSource(v10)) != 0)
  {
    uint64_t v18 = CMPhotoGetTripletsForColorSpace(v15, a2, 0, 0, &v19);
    if (v18)
    {
      uint64_t v17 = v18;
      if (v18 != -16993) {
        goto LABEL_24;
      }
    }
  }
LABEL_13:
  if (colorPrimariesString)
  {
    *(_DWORD *)a5 = CVColorPrimariesGetIntegerCodePointForString(colorPrimariesString);
    FigCFDictionarySetValue();
  }
  if (transferFunctionString)
  {
    *(_DWORD *)(a5 + 4) = CVTransferFunctionGetIntegerCodePointForString(transferFunctionString);
    FigCFDictionarySetValue();
  }
  if (v19)
  {
    *(_DWORD *)(a5 + 8) = CMPhotoCVYCbCrMatrixGetIntegerCodePointForString(v19);
    FigCFDictionarySetValue();
  }
  if (v12)
  {
    *(_DWORD *)a6 = CMPhotoGetChromaLocationCodePointForString((uint64_t)v12);
    FigCFDictionarySetValue();
  }
  if (v13)
  {
    *(_DWORD *)(a6 + 4) = CMPhotoGetChromaLocationCodePointForString((uint64_t)v13);
    FigCFDictionarySetValue();
  }
  uint64_t v17 = 0;
  uint64_t result = 0;
  if (v15) {
    goto LABEL_24;
  }
  return result;
}

CFDictionaryRef _copyColorSpaceFromSource(const __CFDictionary *result)
{
  if (result)
  {
    CFDictionaryRef v1 = result;
    CFStringRef Value = CFDictionaryGetValue(result, (const void *)*MEMORY[0x1E4F24A00]);
    if (!Value || (uint64_t result = (const __CFDictionary *)CFRetain(Value)) == 0)
    {
      uint64_t result = (const __CFDictionary *)CFDictionaryGetValue(v1, (const void *)*MEMORY[0x1E4F24B70]);
      if (result)
      {
        JUMPOUT(0x1AD10E420);
      }
    }
  }
  return result;
}

uint64_t VTCompressionPluginClass_VideoToolbox_callback(uint64_t a1, uint64_t a2, int a3, char a4)
{
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  if ((a4 & 2) != 0) {
    int v7 = -17104;
  }
  else {
    int v7 = a3;
  }
  if (v7) {
    **(unsigned char **)(a1 + 144) = 1;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t))(a1 + 128);
  return v8(a1);
}

uint64_t _needsPixelBufferCopy(__CVBuffer *a1, uint64_t a2, void *a3, void *a4, int a5, void *a6, BOOL *a7, BOOL *a8, BOOL *a9, unsigned char *a10)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v82 = a3[3];
  uint64_t v83 = a3[2];
  double PixelBufferSize = CMPhotoGetPixelBufferSize(a1);
  double v18 = v17;
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  size_t extraColumnsOnRight = 0;
  size_t v92 = 0;
  CFStringRef v19 = &v92;
  CVPixelBufferGetExtendedPixels(a1, 0, &extraColumnsOnRight, 0, &v92);
  if (CVPixelBufferIsPlanar(a1)) {
    size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  }
  else {
    size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRow(a1);
  }
  size_t v21 = BytesPerRowOfPlane;
  unint64_t v22 = vcvtad_u64_f64(PixelBufferSize);
  OSType v23 = CVPixelBufferGetPixelFormatType(a1);
  if (!(CMPhotoPixelFormatIsPackedYUV(v23) | a5))
  {
    OSType v24 = CVPixelBufferGetPixelFormatType(a1);
    unint64_t BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(v24);
    size_t v26 = v21 / BytesPerPixelForPixelFormat - v22;
    if (v21 / BytesPerPixelForPixelFormat > v22)
    {
      if (extraColumnsOnRight > v26) {
        size_t v26 = extraColumnsOnRight;
      }
      size_t extraColumnsOnRight = v26;
    }
  }
  int v84 = a8;
  unint64_t v27 = vcvtad_u64_f64(v18);
  size_t v29 = *(void *)(a2 + 96);
  size_t v28 = *(void *)(a2 + 104);
  size_t v30 = a3[2] + *a3 + v29;
  size_t v31 = a3[3] + a3[1] + v28;
  if (*(unsigned char *)(a2 + 40))
  {
    size_t v32 = extraColumnsOnRight + v22;
    unint64_t v33 = v27;
  }
  else
  {
    unint64_t v33 = a4[1];
    size_t v32 = a4[2] + *a4;
    CFStringRef v19 = a4 + 3;
  }
  BOOL v80 = v30 > v32;
  size_t v89 = *v19 + v33;
  BOOL v81 = v31 > v89;
  if (!a5)
  {
    int v78 = 0;
    goto LABEL_26;
  }
  if (*(unsigned char *)(a2 + 112))
  {
    BOOL v34 = v22 >= 0x80 && v27 >= 0x40;
    goto LABEL_22;
  }
  if (extraColumnsOnRight >= v29)
  {
    BOOL v34 = v92 >= v28;
LABEL_22:
    int v35 = !v34;
    goto LABEL_25;
  }
  int v35 = 1;
LABEL_25:
  int v78 = v35;
LABEL_26:
  unint64_t v36 = *(void *)(a2 + 80);
  if (v36) {
    BOOL v37 = v21 % v36 != 0;
  }
  else {
    BOOL v37 = 0;
  }
  size_t v90 = v32;
  int v79 = a5;
  BOOL v77 = v37;
  if (!*(void *)(a2 + 88)) {
    goto LABEL_33;
  }
  IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(a1);
  if (!IOSurface)
  {
    char v41 = 1;
    goto LABEL_38;
  }
  BOOL v39 = IOSurface;
  if (IOSurfaceGetPlaneCount(IOSurface))
  {
    PlaneCFIndex Count = IOSurfaceGetPlaneCount(v39);
    if (!PlaneCount)
    {
LABEL_33:
      char v41 = 0;
      goto LABEL_38;
    }
  }
  else
  {
    PlaneCFIndex Count = 1;
  }
  size_t v42 = 0;
  char v41 = 0;
  do
    v41 |= (unint64_t)IOSurfaceGetBaseAddressOfPlane(v39, v42++) % *(void *)(a2 + 88) != 0;
  while (PlaneCount != v42);
LABEL_38:
  unint64_t v43 = *(void *)(a2 + 48);
  if (!v43) {
    return 4294950306;
  }
  unint64_t v44 = *(void *)(a2 + 56);
  if (!v44) {
    return 4294950306;
  }
  BOOL v45 = 0;
  unint64_t v46 = a3[1];
  if (*a3 == *a4)
  {
    uint64_t v47 = PixelFormatType;
    if (v46 == a4[1]) {
      BOOL v45 = a3[2] == a4[2] && a3[3] == a4[3];
    }
  }
  else
  {
    uint64_t v47 = PixelFormatType;
  }
  if (*a3 % v43 || v46 % v44) {
    goto LABEL_51;
  }
  if (v79)
  {
    int v54 = !v45;
    if (*(unsigned char *)(a2 + 112)) {
      int v54 = 0;
    }
    if (((v54 | v78) & 1) != 0 || v77)
    {
LABEL_51:
      BOOL v49 = v30 > v90 || v31 > v89;
      LOBYTE(v50) = v49;
      BOOL v51 = 1;
      goto LABEL_58;
    }
  }
  else
  {
    int v55 = v78;
    if (v77) {
      int v55 = 1;
    }
    if (v55 == 1) {
      goto LABEL_51;
    }
  }
  BOOL v51 = v41 != 0;
  BOOL v50 = v30 > v90 || v31 > v89;
  if (!v41 && v50)
  {
    size_t v57 = v30;
    int v58 = *(unsigned __int8 *)(a2 + 64);
    if (CMPhotoPixelFormatIsAGXCompressed(v47) || CMPhotoPixelFormatIsLossyCompressed(v47))
    {
      unsigned int v59 = vcvtad_u64_f64(CMPhotoGetPixelBufferSize(a1));
      unsigned int v61 = vcvtad_u64_f64(v60);
      unsigned int v62 = *((_DWORD *)a4 + 4) + *(_DWORD *)a4;
      size_t v86 = v31;
      size_t v63 = v57;
      unsigned int v64 = *((_DWORD *)a4 + 6) + *((_DWORD *)a4 + 2);
      int ChromaSubsamplingFromPixelFormat = CMPhotoGetChromaSubsamplingFromPixelFormat(v47);
      char v66 = ChromaSubsamplingFromPixelFormat == 5;
      char v67 = ChromaSubsamplingFromPixelFormat == 3 || ChromaSubsamplingFromPixelFormat == 5;
      uint32x2_t v68 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v59, v59 >> v67), (int32x2_t)0x1F0000000FLL);
      int32x2_t v69 = vadd_s32((int32x2_t)__PAIR64__(v61, v61 >> v66), (int32x2_t)0x1F0000000FLL);
      int32x2_t v70 = (int32x2_t)vand_s8((int8x8_t)vmin_u32((uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32((uint32x2_t)v69, (uint32x2_t)0xFFFFFFFBFFFFFFFCLL), (int32x2_t)-1))), (uint32x2_t)vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v68, (uint32x2_t)0xFFFFFFFBFFFFFFFCLL), (int32x2_t)-1))), (int8x8_t)vcgt_u32((uint32x2_t)0x4000000020, v68))),
                         (int8x8_t)vcgt_u32((uint32x2_t)v69, (uint32x2_t)0x3F0000001FLL));
      v69.i32[0] = v62 >> v67;
      v69.i32[1] = v62;
      uint32x2_t v71 = (uint32x2_t)vadd_s32(v69, (int32x2_t)0x1F0000000FLL);
      v72.i32[0] = v64 >> v66;
      v72.i32[1] = v64;
      size_t v57 = v63;
      size_t v31 = v86;
      uint32x2_t v73 = (uint32x2_t)vadd_s32(v72, (int32x2_t)0x1F0000000FLL);
      int32x2_t v74 = vceq_s32(v70, (int32x2_t)vand_s8((int8x8_t)vmin_u32((uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v73, (uint32x2_t)0xFFFFFFFBFFFFFFFCLL), (int32x2_t)-1))), (uint32x2_t)vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v71, (uint32x2_t)0xFFFFFFFBFFFFFFFCLL), (int32x2_t)-1))), (int8x8_t)vcgt_u32((uint32x2_t)0x4000000020, v71))),
                           (int8x8_t)vcgt_u32(v73, (uint32x2_t)0x3F0000001FLL)));
      v58 &= v74.i32[1] & v74.i32[0] & 1;
    }
    if (v58)
    {
      if (v57 <= v90) {
        uint64_t v75 = a3[2];
      }
      else {
        uint64_t v75 = a4[2] + *a4 - *a3;
      }
      uint64_t v83 = v75;
      BOOL v49 = v31 > v89;
      unint64_t v52 = v84;
      LOBYTE(v50) = 0;
      if (v49) {
        uint64_t v76 = a4[3] + a4[1] - a3[1];
      }
      else {
        uint64_t v76 = a3[3];
      }
      uint64_t v82 = v76;
      goto LABEL_59;
    }
    LOBYTE(v50) = 1;
  }
LABEL_58:
  unint64_t v52 = v84;
LABEL_59:
  if ((CMPhotoPixelFormatIsLossyCompressed(v47) || CMPhotoPixelFormatIsAGXCompressed(v47))
    && (a3[2] < 0xA0uLL || a3[3] <= 0x3FuLL))
  {
    LOBYTE(v50) = 1;
  }
  if (a6)
  {
    *a6 = v83;
    a6[1] = v82;
  }
  if (a7) {
    *a7 = v80;
  }
  if (v52) {
    *unint64_t v52 = v81;
  }
  if (a9) {
    *a9 = v51;
  }
  uint64_t result = 0;
  if (a10) {
    *a10 = v50;
  }
  return result;
}

uint64_t _performTileCopy(uint64_t a1, __CVBuffer *a2, size_t a3, size_t a4, void *a5, unint64_t *a6, int a7, int a8, CFTypeRef *a9)
{
  uint64_t v16 = *(void *)(a1 + 144);
  CFTypeRef cf = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(*(CFAllocatorRef *)a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return 4294950305;
  }
  CFDictionaryRef v18 = Mutable;
  size_t v19 = a3;
  if (a7) {
    size_t v19 = a5[2] + *a5 - *a6;
  }
  unint64_t v20 = a4;
  if (a8) {
    unint64_t v20 = a5[3] + a5[1] - a6[1];
  }
  uint64_t v21 = *(void *)(v16 + 96);
  if (v21)
  {
    uint64_t v22 = CMPhotoAlignValue(v21 + a3, *(void *)(v16 + 80));
    uint64_t v23 = *(void *)(v16 + 96);
    CFDictionaryRef v24 = v18;
    if (v23) {
      CMPhotoCFDictionarySetSize(v18, *MEMORY[0x1E4F24CE8], v23);
    }
  }
  else
  {
    uint64_t v22 = *(void *)(v16 + 80);
    CFDictionaryRef v24 = Mutable;
  }
  unint64_t v25 = v19;
  uint64_t v26 = *(void *)(v16 + 104);
  if (v26) {
    CMPhotoCFDictionarySetSize(v24, *MEMORY[0x1E4F24CD0], v26);
  }
  CMPhotoCFDictionarySetSize(v24, *MEMORY[0x1E4F24C98], v22);
  uint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(a2);
  size_t v28 = *(const void **)(a1 + 8);
  uint64_t UncompressedPixelFormatFromCompressedPixelFormat = CMPhotoGetUncompressedPixelFormatFromCompressedPixelFormat(PixelFormatType);
  PixelBufferWithCFDictionaryRef Attributes = CMPhotoSurfacePoolCreatePixelBufferWithAttributes(v28, UncompressedPixelFormatFromCompressedPixelFormat, a3, a4, v24, (CVPixelBufferRef *)&cf);
  if (PixelBufferWithAttributes) {
    goto LABEL_55;
  }
  unint64_t v32 = *a6;
  unint64_t v31 = a6[1];
  signed int v33 = CVPixelBufferGetPixelFormatType(a2);
  if (v33 <= 1380401728)
  {
    if (v33 <= 1278226487)
    {
      if (v33 == 875704422 || v33 == 875704438) {
        goto LABEL_33;
      }
      int v34 = 1111970369;
    }
    else
    {
      if ((v33 - 1278226736) <= 6 && ((1 << (v33 - 48)) & 0x45) != 0) {
        goto LABEL_33;
      }
      int v34 = 1278226488;
    }
  }
  else if (v33 > 1952854575)
  {
    if (v33 > 2016686639)
    {
      if (v33 == 2019963440) {
        goto LABEL_33;
      }
      int v34 = 2016686640;
    }
    else
    {
      if (v33 == 1952854576) {
        goto LABEL_33;
      }
      int v34 = 1953903152;
    }
  }
  else if (v33 > 1936077359)
  {
    if (v33 == 1936077360) {
      goto LABEL_33;
    }
    int v34 = 1937125936;
  }
  else
  {
    if (v33 == 1380401729) {
      goto LABEL_33;
    }
    int v34 = 1751527984;
  }
  if (v33 != v34)
  {
LABEL_41:
    PixelBufferWithCFDictionaryRef Attributes = CMPhotoSetPixelBufferCLAP((__CVBuffer *)cf, 0, 0, v25, v20, 0, 1);
    if (!PixelBufferWithAttributes)
    {
      CGFloat v37 = (double)v25;
      uint64_t v38 = *(void *)(a1 + 16);
      uint64_t v39 = CVPixelBufferGetPixelFormatType((CVPixelBufferRef)cf);
      PixelBufferWithCFDictionaryRef Attributes = CMPhotoScaleAndRotateSessionTransformForSize(v38, a2, 1, 1, v39, 0, 0, 1u, (double)v32, (double)v31, v37, (double)v20, *MEMORY[0x1E4F1DB30], *(double *)(MEMORY[0x1E4F1DB30] + 8), v40, v41, *(void *)(v16 + 80), 1u, (__CVBuffer **)&cf);
      if (!PixelBufferWithAttributes)
      {
        PixelBufferWithCFDictionaryRef Attributes = CMPhotoRemovePixelBufferCLAP((__CVBuffer *)cf);
        if (!PixelBufferWithAttributes)
        {
LABEL_49:
          CMPhotoPropagateColorPropertiesFromSourceBuffer(a2, (__CVBuffer *)cf);
          CMPhotoPropagateChromaLocationFromSourceBuffer(a2, (__CVBuffer *)cf);
          uint64_t v42 = VTFillPixelBufferBorderWithBlack();
          uint64_t v43 = v42;
          if (a9 && !v42)
          {
            *a9 = cf;
            CFTypeRef cf = 0;
          }
          goto LABEL_52;
        }
      }
    }
    goto LABEL_55;
  }
LABEL_33:
  unint64_t v47 = v32;
  unint64_t v48 = v31;
  unint64_t v49 = v25;
  unint64_t v50 = v20;
  if (!CMPhotoPixelBufferMemcpySupportedForBuffer(a2, &v47, 0, 0)) {
    goto LABEL_41;
  }
  int v35 = *(__CVBuffer **)(v16 + 120);
  if (v35 != a2)
  {
    if (v35)
    {
      if (!*(unsigned char *)(v16 + 128)
        || (CVPixelBufferUnlockBaseAddress(v35, 1uLL),
            *(unsigned char *)(v16 + 128) = 0,
            (int v35 = *(__CVBuffer **)(v16 + 120)) != 0))
      {
        CFRelease(v35);
        *(void *)(v16 + 120) = 0;
      }
    }
    if (a2) {
      unint64_t v36 = (__CVBuffer *)CFRetain(a2);
    }
    else {
      unint64_t v36 = 0;
    }
    *(void *)(v16 + 120) = v36;
    PixelBufferWithCFDictionaryRef Attributes = CVPixelBufferLockBaseAddress(v36, 1uLL);
    if (PixelBufferWithAttributes) {
      goto LABEL_55;
    }
    *(unsigned char *)(v16 + 128) = 1;
  }
  unint64_t v47 = v32;
  unint64_t v48 = v31;
  unint64_t v49 = v25;
  unint64_t v50 = v20;
  PixelBufferWithCFDictionaryRef Attributes = CMPhotoPixelBufferCopyCropRectToOffset(a2, 0, (uint64_t *)&v47, (__CVBuffer *)cf, 1, 0, 0, 0);
  if (!PixelBufferWithAttributes) {
    goto LABEL_49;
  }
LABEL_55:
  uint64_t v43 = PixelBufferWithAttributes;
LABEL_52:
  CFRelease(v24);
  if (cf) {
    CFRelease(cf);
  }
  return v43;
}

uint64_t VTTileCompressionPluginClass_VideoToolbox_callback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, char a6)
{
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  if ((a6 & 2) != 0) {
    int v9 = -17104;
  }
  else {
    int v9 = a5;
  }
  if (v9) {
    **(unsigned char **)(a1 + 144) = 1;
  }
  CFDictionaryRef v10 = *(uint64_t (**)(uint64_t))(a1 + 128);
  return v10(a1);
}

uint64_t CMPhotoParavirtualizedHostJPEGHardwareCopyCapabilities(CFAllocatorRef allocator, CFDictionaryRef *a2)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = *(void *)"";
  block[2] = __CMPhotoParavirtualizedHostJPEGHardwareCopyCapabilities_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  void block[4] = allocator;
  if (CMPhotoParavirtualizedHostJPEGHardwareCopyCapabilities_onceToken != -1) {
    dispatch_once(&CMPhotoParavirtualizedHostJPEGHardwareCopyCapabilities_onceToken, block);
  }
  uint64_t result = CMPhotoParavirtualizedHostJPEGHardwareCopyCapabilities_err;
  if (a2 && !CMPhotoParavirtualizedHostJPEGHardwareCopyCapabilities_err)
  {
    if (CMPhotoParavirtualizedHostJPEGHardwareCopyCapabilities_sCapabilities)
    {
      *a2 = CFDictionaryCreateCopy(allocator, (CFDictionaryRef)CMPhotoParavirtualizedHostJPEGHardwareCopyCapabilities_sCapabilities);
      return CMPhotoParavirtualizedHostJPEGHardwareCopyCapabilities_err;
    }
  }
  return result;
}

void __CMPhotoParavirtualizedHostJPEGHardwareCopyCapabilities_block_invoke(uint64_t a1)
{
  CFAllocatorRef v1 = *(const __CFAllocator **)(a1 + 32);
  uint64_t v2 = JPEGDeviceInterface_openDriverConnection();
  if (!v2)
  {
    int v11 = -16994;
    goto LABEL_11;
  }
  uint64_t v3 = v2;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    int v11 = -16991;
    goto LABEL_10;
  }
  uint64_t v5 = Mutable;
  int v6 = JPEGDeviceInterface_numberOfJPEGCores();
  int v7 = JPEGDeviceInterface_supportsAppleInterchangeFormats();
  int v8 = JPEGDeviceInterface_supportsMissingEOI();
  int v9 = JPEGDeviceInterface_supportsRSTLogging();
  int v10 = CMPhotoCFDictionarySetInt32(v5, @"Version", 1);
  if (v10
    || (int v10 = CMPhotoCFDictionarySetInt32(v5, @"NumberOfCores", v6)) != 0
    || (int v10 = CMPhotoCFDictionarySetBoolean(v5, @"SupportsInterchangeFormats", v7)) != 0
    || (int v10 = CMPhotoCFDictionarySetBoolean(v5, @"SupportsMissingEOI", v8)) != 0
    || (int v10 = CMPhotoCFDictionarySetBoolean(v5, @"SupportsRSTLogging", v9)) != 0)
  {
    int v11 = v10;
    goto LABEL_13;
  }
  int v11 = CMPhotoCFDictionarySetBoolean(v5, @"Supports16BitQuantizationTables", 1);
  if (v11)
  {
LABEL_13:
    JPEGDeviceInterface_closeDriverConnection(v3);
    CFRelease(v5);
    goto LABEL_11;
  }
  CMPhotoParavirtualizedHostJPEGHardwareCopyCapabilities_suint64_t Capabilities = (uint64_t)v5;
LABEL_10:
  JPEGDeviceInterface_closeDriverConnection(v3);
LABEL_11:
  CMPhotoParavirtualizedHostJPEGHardwareCopyCapabilities_err = v11;
}

uint64_t CMPhotoParavirtualizedGuestJPEGHardwareGetCapabilities(_DWORD *a1, _DWORD *a2, unsigned char *a3, unsigned char *a4, unsigned char *a5, unsigned char *a6)
{
  CFTypeRef cf = 0;
  CFTypeRef v17 = 0;
  uint64_t v12 = VTParavirtualizedJPEGSessionCreate();
  if (v12 || (uint64_t v12 = VTParavirtualizedJPEGSessionCopyCapabilities(), v12))
  {
    uint64_t v13 = v12;
  }
  else
  {
    int v15 = 0;
    if (CMPhotoCFDictionaryGetInt32IfPresent((CFDictionaryRef)cf, @"Version", &v15))
    {
      if (a1) {
        *a1 = v15;
      }
      if (a2)
      {
        *a2 = 1;
        CMPhotoCFDictionaryGetInt32IfPresent((CFDictionaryRef)cf, @"NumberOfCores", a2);
      }
      if (a3)
      {
        *a3 = 0;
        CMPhotoCFDictionaryGetBooleanIfPresent((CFDictionaryRef)cf, @"SupportsInterchangeFormats", a3);
      }
      if (a4)
      {
        *a4 = 0;
        CMPhotoCFDictionaryGetBooleanIfPresent((CFDictionaryRef)cf, @"SupportsMissingEOI", a4);
      }
      if (a5)
      {
        *a5 = 0;
        CMPhotoCFDictionaryGetBooleanIfPresent((CFDictionaryRef)cf, @"SupportsRSTLogging", a5);
      }
      if (a6)
      {
        *a6 = 0;
        CMPhotoCFDictionaryGetBooleanIfPresent((CFDictionaryRef)cf, @"Supports16BitQuantizationTables", a6);
      }
      uint64_t v13 = 0;
    }
    else
    {
      uint64_t v13 = 4294950302;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v17) {
    CFRelease(v17);
  }
  return v13;
}

uint64_t CMPhotoParavirtualizedHostJPEGHardwareEncode()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  uint64_t v2 = v1;
  BOOL v4 = v3;
  int v6 = v5;
  int v7 = (__IOSurface *)v0;
  bzero(inputStruct, 0xDA0uLL);
  bzero(outputStruct, 0xDA0uLL);
  uint64_t v8 = 0;
  uint64_t v9 = 4294950306;
  if (!v7 || !v6 || !v4) {
    goto LABEL_20;
  }
  CFTypeID v10 = CFGetTypeID(v4);
  if (v10 != CFDictionaryGetTypeID())
  {
    uint64_t v8 = 0;
    goto LABEL_20;
  }
  uint64_t v8 = JPEGDeviceInterface_openDriverConnection();
  if (!v8)
  {
    QuantizationValuesFromCFDataRef Data = FigSignalErrorAt();
    goto LABEL_24;
  }
  v23[11] = 1;
  v21[1] = 0;
  v23[8] = 0;
  inputStruct[0] = IOSurfaceGetID(v7);
  inputStruct[1] = IOSurfaceGetAllocSize(v7);
  inputStruct[2] = IOSurfaceGetID(v6);
  inputStruct[3] = IOSurfaceGetAllocSize(v6);
  if (!CMPhotoCFDictionaryGetInt32IfPresent((CFDictionaryRef)v4, @"PixelsX", &v20)
    || !CMPhotoCFDictionaryGetInt32IfPresent((CFDictionaryRef)v4, @"PixelsY", v21)
    || !CMPhotoCFDictionaryGetInt32IfPresent((CFDictionaryRef)v4, @"XOffset", (char *)&v22 + 4)
    || !CMPhotoCFDictionaryGetInt32IfPresent((CFDictionaryRef)v4, @"YOffset", v23)
    || (int v16 = 0, !CMPhotoCFDictionaryGetInt32IfPresent((CFDictionaryRef)v4, @"Subsampling", &v16))
    || (v23[1] = v16, !CMPhotoCFDictionaryGetInt32IfPresent((CFDictionaryRef)v4, @"Flags", &v22))
    || !CMPhotoCFDictionaryGetInt32IfPresent((CFDictionaryRef)v4, @"RecordRSTOffsets", &v24))
  {
    uint64_t v9 = 4294950306;
    goto LABEL_20;
  }
  if (v24 && !JPEGDeviceInterface_supportsRSTLogging())
  {
    uint64_t v9 = 4294950302;
    goto LABEL_20;
  }
  CFStringRef Value = CFDictionaryGetValue((CFDictionaryRef)v4, @"LumaQuant");
  QuantizationValuesFromCFDataRef Data = _extractQuantizationValuesFromData(Value, v25);
  if (QuantizationValuesFromData
    || (uint64_t v13 = CFDictionaryGetValue((CFDictionaryRef)v4, @"ChromaQuant"),
        QuantizationValuesFromCFDataRef Data = _extractQuantizationValuesFromData(v13, v26),
        QuantizationValuesFromData))
  {
LABEL_24:
    uint64_t v9 = QuantizationValuesFromData;
    goto LABEL_20;
  }
  uint64_t v14 = JPEGDeviceInterface_encodeJPEG2024(v8, inputStruct, outputStruct);
  uint64_t v9 = v14;
  if (v2 && !v14) {
    _DWORD *v2 = v18;
  }
LABEL_20:
  JPEGDeviceInterface_closeDriverConnection(v8);
  return v9;
}

uint64_t _extractQuantizationValuesFromData(const void *a1, UInt8 *a2)
{
  if (!a1) {
    return 4294950306;
  }
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 == CFDataGetTypeID())
  {
    if (CFDataGetLength((CFDataRef)a1) == 64)
    {
      BytePtr = CFDataGetBytePtr((CFDataRef)a1);
      for (uint64_t i = 0; i != 64; ++i)
        *(_WORD *)&a2[2 * i] = BytePtr[i];
      return 0;
    }
    if (CFDataGetLength((CFDataRef)a1) == 128)
    {
      v8.location = 0;
      v8.length = 128;
      CFDataGetBytes((CFDataRef)a1, v8, a2);
      return 0;
    }
  }
  return 4294950306;
}

uint64_t CMPhotoParavirtualizedGuestJPEGHardwareEncode(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, unsigned __int8 a10, UInt8 *bytes, UInt8 *a12, uint64_t a13)
{
  uint64_t v18 = VTParavirtualizedJPEGSessionCreate();
  if (v18)
  {
    uint64_t v24 = v18;
    CFDataRef v23 = 0;
    CFDataRef v22 = 0;
  }
  else
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      int v20 = Mutable;
      uint64_t v21 = CMPhotoCFDictionarySetInt32(Mutable, @"PixelsX", a4);
      if (!v21)
      {
        uint64_t v21 = CMPhotoCFDictionarySetInt32(v20, @"PixelsY", a5);
        if (!v21)
        {
          uint64_t v21 = CMPhotoCFDictionarySetInt32(v20, @"XOffset", a6);
          if (!v21)
          {
            uint64_t v21 = CMPhotoCFDictionarySetInt32(v20, @"YOffset", a7);
            if (!v21)
            {
              uint64_t v21 = CMPhotoCFDictionarySetInt32(v20, @"Subsampling", a8);
              if (!v21)
              {
                uint64_t v21 = CMPhotoCFDictionarySetInt32(v20, @"Flags", a9);
                if (!v21)
                {
                  uint64_t v21 = CMPhotoCFDictionarySetSize(v20, @"RecordRSTOffsets", a10);
                  if (!v21)
                  {
                    CFDataRef v22 = CFDataCreate(0, bytes, 64);
                    if (v22)
                    {
                      CFDataRef v23 = CFDataCreate(0, a12, 64);
                      if (v23)
                      {
                        CFDictionarySetValue(v20, @"LumaQuant", v22);
                        CFDictionarySetValue(v20, @"ChromaQuant", v23);
                        uint64_t v24 = VTParavirtualizedJPEGSessionEncodeImage();
LABEL_13:
                        CFRelease(v20);
                        goto LABEL_14;
                      }
                    }
                    else
                    {
                      CFDataRef v23 = 0;
                    }
                    uint64_t v24 = 4294950305;
                    goto LABEL_13;
                  }
                }
              }
            }
          }
        }
      }
      uint64_t v24 = v21;
      CFDataRef v22 = 0;
      CFDataRef v23 = 0;
      goto LABEL_13;
    }
    CFDataRef v23 = 0;
    CFDataRef v22 = 0;
    uint64_t v24 = 4294950305;
  }
LABEL_14:
  if (v22) {
    CFRelease(v22);
  }
  if (v23) {
    CFRelease(v23);
  }
  return v24;
}

uint64_t CMPhotoParavirtualizedHostJPEGHardwareDecode(__IOSurface *a1, uint64_t a2, CFTypeRef cf)
{
  IOSurfaceRef v31 = 0;
  uint64_t v3 = 4294950306;
  if (a1 && a2 && cf)
  {
    CFTypeID v7 = CFGetTypeID(cf);
    if (v7 == CFDictionaryGetTypeID())
    {
      uint64_t v30 = 0;
      CMPhotoCFDictionaryGetSizeIfPresent((const __CFDictionary *)cf, @"InputSize", &v30);
      unsigned int v29 = 0;
      if (CMPhotoCFDictionaryGetInt32IfPresent((CFDictionaryRef)cf, @"Width", &v29))
      {
        unsigned int v28 = 0;
        if (CMPhotoCFDictionaryGetInt32IfPresent((CFDictionaryRef)cf, @"Height", &v28))
        {
          unsigned int v27 = 0;
          if (CMPhotoCFDictionaryGetInt32IfPresent((CFDictionaryRef)cf, @"Subsampling", &v27))
          {
            unsigned int v26 = 0;
            if (CMPhotoCFDictionaryGetInt32IfPresent((CFDictionaryRef)cf, @"MCUsHor", &v26))
            {
              int v25 = 0;
              if (CMPhotoCFDictionaryGetInt32IfPresent((CFDictionaryRef)cf, @"MCUsVer", &v25))
              {
                int v24 = 0;
                if (CMPhotoCFDictionaryGetInt32IfPresent((CFDictionaryRef)cf, @"Flags", &v24))
                {
                  uint64_t v23 = 0;
                  if (CMPhotoCFDictionaryGetSizeIfPresent((const __CFDictionary *)cf, @"DecodeWidth", &v23))
                  {
                    uint64_t v22 = 0;
                    if (CMPhotoCFDictionaryGetSizeIfPresent((const __CFDictionary *)cf, @"DecodeHeight", &v22))
                    {
                      uint64x2_t v20 = 0u;
                      uint64x2_t v21 = 0u;
                      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)cf, @"CropRect");
                      CFDictionaryRef v9 = Value;
                      if (!Value)
                      {
LABEL_16:
                        AllocCFNumberRef Size = IOSurfaceGetAllocSize(a1);
                        uint64_t v12 = CMPhotoSurfacePoolCreateMemorySurface(0, AllocSize, 0, &v31);
                        if (v12)
                        {
LABEL_22:
                          uint64_t v3 = v12;
                          goto LABEL_23;
                        }
                        IOSurfaceLock(a1, 1u, 0);
                        IOSurfaceLock(v31, 0, 0);
                        BaseAddresCGColorSpaceRef s = IOSurfaceGetBaseAddress(a1);
                        if (BaseAddress)
                        {
                          uint64_t v14 = BaseAddress;
                          int v15 = IOSurfaceGetBaseAddress(v31);
                          if (v15)
                          {
                            memcpy(v15, v14, AllocSize);
                            IOSurfaceUnlock(v31, 0, 0);
                            IOSurfaceUnlock(a1, 1u, 0);
                            int v16 = &v20;
                            if (!v9) {
                              int v16 = 0;
                            }
                            uint64_t v12 = JPEGDecompressSurfaceHelper(0, (uint64_t)v31, v30, a2, v29, v28, v27, v26, v25, v24, 0, v18, v23, SHIDWORD(v23), v22, v16->i64, 0, 0);
                            goto LABEL_22;
                          }
                        }
                        goto LABEL_26;
                      }
                      CGSize v10 = *(CGSize *)(MEMORY[0x1E4F1DB20] + 16);
                      rect.origin = (CGPoint)*MEMORY[0x1E4F1DB20];
                      rect.CGSize size = v10;
                      if (CGRectMakeWithDictionaryRepresentation(Value, &rect))
                      {
                        uint64x2_t v20 = vcvtq_u64_f64(vrndaq_f64((float64x2_t)rect.origin));
                        uint64x2_t v21 = vcvtq_u64_f64(vrndaq_f64((float64x2_t)rect.size));
                        goto LABEL_16;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_26:
    uint64_t v3 = 4294950306;
  }
LABEL_23:
  if (v31) {
    CFRelease(v31);
  }
  return v3;
}

uint64_t CMPhotoParavirtualizedGuestJPEGHardwareDecode(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8, int a9, uint64_t a10, uint64_t a11, unint64_t *a12)
{
  uint64_t v18 = VTParavirtualizedJPEGSessionCreate();
  if (v18) {
    return v18;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return 4294950305;
  }
  uint64x2_t v20 = Mutable;
  if (!a2 || (uint64_t v21 = CMPhotoCFDictionarySetSize(Mutable, @"InputSize", a2), !v21))
  {
    uint64_t v21 = CMPhotoCFDictionarySetInt32(v20, @"Width", a4);
    if (!v21)
    {
      uint64_t v21 = CMPhotoCFDictionarySetInt32(v20, @"Height", a5);
      if (!v21)
      {
        uint64_t v21 = CMPhotoCFDictionarySetInt32(v20, @"Subsampling", a6);
        if (!v21)
        {
          uint64_t v21 = CMPhotoCFDictionarySetInt32(v20, @"MCUsHor", a7);
          if (!v21)
          {
            uint64_t v21 = CMPhotoCFDictionarySetInt32(v20, @"MCUsVer", a8);
            if (!v21)
            {
              uint64_t v21 = CMPhotoCFDictionarySetInt32(v20, @"Flags", a9);
              if (!v21)
              {
                uint64_t v21 = CMPhotoCFDictionarySetSize(v20, @"DecodeWidth", a10);
                if (!v21)
                {
                  uint64_t v21 = CMPhotoCFDictionarySetSize(v20, @"DecodeHeight", a11);
                  if (!v21)
                  {
                    if (a12)
                    {
                      v26.origin.x = (double)*a12;
                      v26.origin.y = (double)a12[1];
                      v26.size.double width = (double)a12[2];
                      v26.size.double height = (double)a12[3];
                      CFDictionaryRef DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v26);
                      if (!DictionaryRepresentation)
                      {
                        uint64_t v24 = 4294950305;
                        goto LABEL_18;
                      }
                      CFDictionaryRef v23 = DictionaryRepresentation;
                      CFDictionarySetValue(v20, @"CropRect", DictionaryRepresentation);
                      CFRelease(v23);
                    }
                    uint64_t v21 = VTParavirtualizedJPEGSessionDecodeImage();
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  uint64_t v24 = v21;
LABEL_18:
  CFRelease(v20);
  return v24;
}

CFTypeID _once_CMPhotoGetImageType()
{
  sTypeCGColorSpaceRef s = 0;
  qword_1EB3D2568 = IOSurfaceGetTypeID();
  qword_1EB3D2570 = CVPixelBufferGetTypeID();
  qword_1EB3D2578 = CMSampleBufferGetTypeID();
  CFTypeID result = CGImageGetTypeID();
  qword_1EB3D2580 = result;
  return result;
}

uint64_t CMPhotoGetCMPhotoAuxiliaryImageTypeAndFinalURNFromURN(uint64_t result, __CFString **a2)
{
  if (!result)
  {
    uint64_t v3 = 0;
    goto LABEL_6;
  }
  uint64_t v3 = @"urn:mpeg:hevc:2015:auxid:2";
  if (FigCFEqual()
    || (uint64_t v3 = @"urn:mpeg:mpegB:cicp:systems:auxiliary:depth", FigCFEqual()))
  {
    CFTypeID result = 2;
    goto LABEL_6;
  }
  if (FigCFEqual())
  {
    uint64_t v3 = @"urn:mpeg:hevc:2015:auxid:2";
LABEL_12:
    CFTypeID result = 1;
    goto LABEL_6;
  }
  if (FigCFEqual()) {
    goto LABEL_12;
  }
  uint64_t v3 = @"urn:mpeg:hevc:2015:auxid:1";
  if (FigCFEqual()
    || (uint64_t v3 = @"urn:mpeg:mpegB:cicp:systems:auxiliary:alpha", FigCFEqual()))
  {
    CFTypeID result = 3;
  }
  else
  {
    uint64_t v3 = @"urn:com:apple:photo:2018:aux:portraiteffectsmatte";
    if (FigCFEqual())
    {
      CFTypeID result = 5;
    }
    else
    {
      uint64_t v3 = @"urn:com:apple:photo:2019:aux:semanticskinmatte";
      if (FigCFEqual()) {
        goto LABEL_27;
      }
      uint64_t v3 = @"urn:com:apple:photo:2019:aux:semantichairmatte";
      if (FigCFEqual()
        || (uint64_t v3 = @"urn:com:apple:photo:2019:aux:semanticteethmatte", FigCFEqual())
        || (uint64_t v3 = @"urn:com:apple:photo:2020:aux:semanticskymatte", FigCFEqual())
        || (uint64_t v3 = @"urn:com:apple:photo:2020:aux:semanticglassesmatte", FigCFEqual())
        || (uint64_t v3 = @"urn:com:apple:photo:2020:aux:hdrgainmap", FigCFEqual())
        || (uint64_t v3 = @"tag:apple.com,2023:photo:aux:linearthumbnail", FigCFEqual())
        || (uint64_t v3 = @"tag:apple.com,2023:photo:aux:deltamap", FigCFEqual())
        || (uint64_t v3 = @"tag:apple.com,2023:photo:aux:styledeltamap", FigCFEqual()))
      {
LABEL_27:
        CFTypeID result = 4;
      }
      else
      {
        uint64_t v3 = @"tag:apple.com,2023:photo:aux:constantcolorconfidencemap";
        int v4 = FigCFEqual();
        BOOL v5 = v4 == 0;
        CFTypeID result = 4 * (v4 != 0);
        if (v5) {
          uint64_t v3 = 0;
        }
      }
    }
  }
LABEL_6:
  if (a2) {
    *a2 = v3;
  }
  return result;
}

__CFString *CMPhotoGetContainerFormatString(unsigned int a1)
{
  if (a1 > 2) {
    return 0;
  }
  else {
    return off_1E5E2E168[a1];
  }
}

uint64_t CMPhotoGetContainerFormatFromFormatString(uint64_t a1, int *a2)
{
  if (FigCFEqual())
  {
    int v3 = 0;
    if (!a2) {
      return 0;
    }
    goto LABEL_6;
  }
  if (FigCFEqual())
  {
    int v3 = 1;
    if (!a2) {
      return 0;
    }
LABEL_6:
    *a2 = v3;
    return 0;
  }
  if (FigCFEqual())
  {
    int v3 = 2;
    if (!a2) {
      return 0;
    }
    goto LABEL_6;
  }
  return FigSignalErrorAt();
}

uint64_t CMPhotoCreatePixelBufferFromCGImage(CGImage *a1, const __CFString *a2, unsigned int a3, uint64_t a4, void *a5)
{
  CVBufferRef buffer = 0;
  uint32x2_t v68 = 0;
  if (a1)
  {
    unint64_t Width = CGImageGetWidth(a1);
    unint64_t Height = CGImageGetHeight(a1);
    size_t v12 = CGImageGetBitsPerComponent(a1);
    CGColorSpaceRef ColorSpace = CGImageGetColorSpace(a1);
    uint64_t v14 = (CFStringRef *)MEMORY[0x1E4F1DC98];
    if (!ColorSpace || (int v15 = (void *)CFRetain(ColorSpace)) == 0)
    {
      int v15 = CGColorSpaceCreateWithName(*v14);
      if (!v15)
      {
        uint64_t v38 = FigSignalErrorAt();
LABEL_93:
        if (buffer) {
          CFRelease(buffer);
        }
        return v38;
      }
    }
    unsigned int v62 = a3;
    uint64_t v60 = a4;
    if (CGColorSpaceGetModel((CGColorSpaceRef)v15) == kCGColorSpaceModelIndexed)
    {
      uint64_t v16 = CGColorSpaceCopyBaseColorSpace();
      CFRelease(v15);
      int v15 = (void *)v16;
    }
    CGImageAlphaInfo AlphaInfo = CGImageGetAlphaInfo(a1);
    __int16 BitmapInfo = CGImageGetBitmapInfo(a1);
    unsigned int v19 = AlphaInfo - 1;
    BOOL v21 = !CMPhotoExtensionIsPNG(a2) && v19 < 2;
    CGColorSpaceModel Model = CGColorSpaceGetModel((CGColorSpaceRef)v15);
    int v23 = BitmapInfo & 0x100;
    uint64_t v24 = 16;
    if (v12 > 0x10) {
      uint64_t v24 = 32;
    }
    if (v12 <= 8) {
      uint64_t v24 = 8;
    }
    size_t bitsPerComponent = v24;
    if (v12 >= 0x11 && !v23) {
      goto LABEL_96;
    }
    if (v12 <= 0xA) {
      int v25 = 1278226736;
    }
    else {
      int v25 = 1278226742;
    }
    if (v12 <= 0x10) {
      int v26 = 1380411457;
    }
    else {
      int v26 = 1380410945;
    }
    if (!v23) {
      int v26 = 1815491698;
    }
    int v27 = v12 <= 8 ? 1278226488 : v25;
    int v28 = v12 <= 8 ? 1111970369 : v26;
    uint64_t v29 = Model ? v28 : v27;
    if (CMPhotoSurfacePoolCreatePixelBuffer(@"SurfacePoolOneShot", v29, Width, Height, 1, 0, 0, 1, 0, 0, &buffer))
    {
LABEL_96:
      uint64_t v38 = FigSignalErrorAt();
      CFTypeRef cf = 0;
      CGFloat v37 = 0;
      uint64_t v39 = 0;
    }
    else
    {
      unsigned int v61 = a5;
      if (Model) {
        CVBufferSetAttachment(buffer, (CFStringRef)*MEMORY[0x1E4F24A00], v15, kCVAttachmentMode_ShouldPropagate);
      }
      if (v19 >= 4) {
        int v30 = 2;
      }
      else {
        int v30 = v21;
      }
      CMPhotoPixelBufferSetAlphaOpaquenessAndAlphaMode(buffer, v19 > 3, v30);
      size_t BytesPerRow = CVPixelBufferGetBytesPerRow(buffer);
      CVPixelBufferLockBaseAddress(buffer, 0);
      BaseAddresCGColorSpaceRef s = (char *)CVPixelBufferGetBaseAddress(buffer);
      if (v12 <= 0x10) {
        int v33 = 4101;
      }
      else {
        int v33 = 8197;
      }
      if (v12 <= 8) {
        int v33 = 8198;
      }
      if (Model) {
        int v34 = v33;
      }
      else {
        int v34 = 0;
      }
      if (CGColorSpaceSupportsOutput((CGColorSpaceRef)v15))
      {
        if (v15) {
          CGColorSpaceRef space = (CGColorSpace *)CFRetain(v15);
        }
        else {
          CGColorSpaceRef space = 0;
        }
        CopyWithCGColorSpaceRef ColorSpace = (CGImage *)CFRetain(a1);
LABEL_58:
        image = CopyWithColorSpace;
        double v40 = CGBitmapContextCreate(BaseAddress, Width, Height, bitsPerComponent, BytesPerRow, space, v34 | v23);
        CFTypeRef cf = v40;
        if (v40)
        {
          v70.origin.x = 0.0;
          v70.origin.y = 0.0;
          v70.size.double width = (double)Width;
          v70.size.double height = (double)Height;
          CGContextDrawImage(v40, v70, image);
          CGFloat v37 = 0;
          if (v19 > 3 || v23) {
            goto LABEL_77;
          }
          if (v12 <= 8) {
            uint32_t v41 = 7;
          }
          else {
            uint32_t v41 = 4097;
          }
          if (v12 <= 8) {
            uint64_t v42 = 0;
          }
          else {
            uint64_t v42 = (CGColorSpace *)v15;
          }
          uint64_t v43 = CGBitmapContextCreate(0, Width, Height, bitsPerComponent, BytesPerRow, v42, v41);
          CGFloat v37 = v43;
          if (v43)
          {
            v71.origin.x = 0.0;
            v71.origin.y = 0.0;
            v71.size.double width = (double)Width;
            v71.size.double height = (double)Height;
            CGContextDrawImage(v43, v71, a1);
            if (Height)
            {
              for (uint64_t i = 0; i != Height; ++i)
              {
                CFDataRef Data = (char *)CGBitmapContextGetData(v37);
                if (Width)
                {
                  unint64_t v46 = &Data[i * BytesPerRow];
                  unint64_t v47 = &BaseAddress[i * BytesPerRow];
                  unint64_t v48 = Width;
                  unint64_t v49 = v46;
                  unint64_t v50 = v47;
                  do
                  {
                    if (v12 < 9)
                    {
                      char v51 = *v49++;
                      v50[3] = v51;
                      v50 += 4;
                    }
                    else
                    {
                      *((_WORD *)v47 + 3) = *((_WORD *)v46 + 3);
                      v47 += 8;
                      v46 += 8;
                    }
                    --v48;
                  }
                  while (v48);
                }
              }
            }
LABEL_77:
            CVPixelBufferUnlockBaseAddress(buffer, 0);
            unint64_t v52 = buffer;
            if (v62)
            {
              uint64_t DefaultTripletsForTransfer = CMPhotoCreateDefaultTripletsForTransfer(buffer, v62);
              uint64_t v57 = CMPhotoScaleAndRotateSessionTransformForSize(0, buffer, 1, 1, v62, DefaultTripletsForTransfer, v54, 0, *MEMORY[0x1E4F1DB20], *(CGFloat *)(MEMORY[0x1E4F1DB20] + 8), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 16), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 24), *MEMORY[0x1E4F1DB30], *(double *)(MEMORY[0x1E4F1DB30] + 8), v55, v56, v60, 1u, &v68);
              int v58 = v61;
              uint64_t v39 = space;
              if (v57)
              {
                uint64_t v38 = v57;
                FigSignalErrorAt();
                goto LABEL_83;
              }
            }
            else
            {
              CVBufferRef buffer = 0;
              uint32x2_t v68 = v52;
              int v58 = v61;
              uint64_t v39 = space;
            }
            uint64_t v38 = 0;
            if (v58)
            {
              *int v58 = v68;
              uint32x2_t v68 = 0;
            }
            goto LABEL_83;
          }
          uint64_t v38 = FigSignalErrorAt();
        }
        else
        {
          uint64_t v38 = FigSignalErrorAt();
          CGFloat v37 = 0;
        }
        uint64_t v39 = space;
LABEL_83:
        if (image) {
          CFRelease(image);
        }
        goto LABEL_85;
      }
      int v35 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC98]);
      if (v35)
      {
        CGColorSpaceRef space = v35;
        CopyWithCGColorSpaceRef ColorSpace = CGImageCreateCopyWithColorSpace(a1, v35);
        if (CopyWithColorSpace) {
          goto LABEL_58;
        }
        CFTypeRef cf = 0;
        CGFloat v37 = 0;
        uint64_t v38 = 4294950305;
        uint64_t v39 = space;
      }
      else
      {
        CFTypeRef cf = 0;
        CGFloat v37 = 0;
        uint64_t v39 = 0;
        uint64_t v38 = 4294950305;
      }
    }
LABEL_85:
    if (v15) {
      CFRelease(v15);
    }
    if (v39) {
      CFRelease(v39);
    }
    if (cf) {
      CFRelease(cf);
    }
    if (v37) {
      CFRelease(v37);
    }
    goto LABEL_93;
  }
  return FigSignalErrorAt();
}

uint64_t CMPhotoGetTripletsForColorSpaceUsingColorSync(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  OSType v8 = a2;
  CMPhotoPixelFormatIsFullRange(a2);
  CMPhotoPixelFormatContainsRGB(v8);
  CGColorSpaceGetCICPInfo();
  uint64_t result = FigSignalErrorAt();
  if (a3) {
    *a3 = 0;
  }
  if (a4) {
    *a4 = 0;
  }
  if (a5) {
    *a5 = 0;
  }
  return result;
}

uint64_t CMPhotoGetTripletsForColorSpace(CGColorSpace *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v22 = 0;
  int IsFullRange = CMPhotoPixelFormatIsFullRange(a2);
  BOOL v11 = 1;
  if ((int)a2 <= 1278226735)
  {
    if ((a2 - 1278226488) <= 0x30 && ((1 << (a2 - 56)) & 0x1400000000001) != 0) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  if (((a2 - 1278226736) > 6 || ((1 << (a2 - 48)) & 0x45) == 0)
    && a2 != 1717855600
    && a2 != 1751410032)
  {
LABEL_9:
    BOOL v11 = a2 == 1751411059 || a2 == 1717856627;
  }
LABEL_15:
  if (CMPhotoPixelFormatContainsRGB(a2)) {
    char v13 = 1;
  }
  else {
    char v13 = v11;
  }
  if (!a1)
  {
    uint64_t result = FigSignalErrorAt();
    goto LABEL_67;
  }
  if (!a3 && !a4 && !a5) {
    return 0;
  }
  if (!CGColorSpaceGetName(a1)) {
    goto LABEL_66;
  }
  if (FigCFEqual())
  {
    uint64_t v14 = (uint64_t *)MEMORY[0x1E4F24AB0];
LABEL_27:
    uint64_t v24 = *v14;
    int v15 = (uint64_t *)MEMORY[0x1E4F24C10];
    goto LABEL_28;
  }
  if (FigCFEqual())
  {
    uint64_t v14 = (uint64_t *)MEMORY[0x1E4F24AC0];
    goto LABEL_27;
  }
  if (FigCFEqual())
  {
    uint64_t v24 = *MEMORY[0x1E4F24AB0];
    uint64_t v18 = (uint64_t *)MEMORY[0x1E4F24BE0];
LABEL_35:
    uint64_t v23 = *v18;
    if (v13) {
      goto LABEL_29;
    }
    uint64_t result = 0;
    CFTypeRef v17 = (uint64_t *)MEMORY[0x1E4F24C48];
LABEL_32:
    uint64_t v22 = *v17;
    goto LABEL_67;
  }
  if (FigCFEqual() || FigCFEqual())
  {
    unsigned int v19 = (uint64_t *)MEMORY[0x1E4F24AB0];
LABEL_40:
    uint64_t v24 = *v19;
    int v15 = (uint64_t *)MEMORY[0x1E4F24BE8];
    goto LABEL_28;
  }
  if (FigCFEqual() || FigCFEqual())
  {
    unsigned int v19 = (uint64_t *)MEMORY[0x1E4F24AC0];
    goto LABEL_40;
  }
  if (FigCFEqual() || FigCFEqual())
  {
    uint64_t v24 = *MEMORY[0x1E4F24AA8];
    uint64x2_t v20 = (uint64_t *)MEMORY[0x1E4F24BE8];
LABEL_47:
    uint64_t v23 = *v20;
    if (v13) {
      goto LABEL_29;
    }
    uint64_t result = 0;
    CFTypeRef v17 = (uint64_t *)MEMORY[0x1E4F24C30];
    goto LABEL_32;
  }
  if (FigCFEqual())
  {
    uint64_t result = 0;
    BOOL v21 = (uint64_t *)MEMORY[0x1E4F24BE8];
LABEL_53:
    uint64_t v23 = *v21;
    goto LABEL_67;
  }
  if (FigCFEqual())
  {
    uint64_t v24 = *MEMORY[0x1E4F24AB0];
    uint64_t v18 = (uint64_t *)MEMORY[0x1E4F24BF8];
    goto LABEL_35;
  }
  if (FigCFEqual())
  {
    uint64_t v24 = *MEMORY[0x1E4F24AC0];
    int v15 = (uint64_t *)MEMORY[0x1E4F24BF8];
    goto LABEL_28;
  }
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      uint64_t v24 = *MEMORY[0x1E4F24AA8];
      uint64x2_t v20 = (uint64_t *)MEMORY[0x1E4F24BF8];
      goto LABEL_47;
    }
    if (FigCFEqual())
    {
      uint64_t v24 = *MEMORY[0x1E4F24AA8];
      uint64x2_t v20 = (uint64_t *)MEMORY[0x1E4F24BD8];
      goto LABEL_47;
    }
    if (FigCFEqual())
    {
      uint64_t result = 0;
      BOOL v21 = (uint64_t *)MEMORY[0x1E4F24C10];
      goto LABEL_53;
    }
LABEL_66:
    uint64_t result = CMPhotoGetTripletsForColorSpaceUsingColorSync((uint64_t)a1, a2, &v24, &v23, &v22);
    goto LABEL_67;
  }
  uint64_t v24 = *MEMORY[0x1E4F24AC0];
  int v15 = (uint64_t *)MEMORY[0x1E4F24BD8];
LABEL_28:
  uint64_t v23 = *v15;
  if ((v13 & 1) == 0)
  {
    uint64_t result = 0;
    CFTypeRef v17 = (uint64_t *)MEMORY[0x1E4F24C40];
    if (!IsFullRange) {
      CFTypeRef v17 = (uint64_t *)MEMORY[0x1E4F24C48];
    }
    goto LABEL_32;
  }
LABEL_29:
  uint64_t result = 0;
LABEL_67:
  if (a3) {
    *a3 = v24;
  }
  if (a4) {
    *a4 = v23;
  }
  if (a5) {
    *a5 = v22;
  }
  return result;
}

uint64_t CMPhotoCreateAllowedTransferArrayForColorSpace(CGColorSpace *a1, __CFArray **a2)
{
  if (!a1)
  {
    uint64_t v7 = FigSignalErrorAt();
    if (!a2) {
      return v7;
    }
    goto LABEL_27;
  }
  if (!a2) {
    return 0;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
    uint64_t v7 = FigSignalErrorAt();
LABEL_27:
    *a2 = 0;
    return v7;
  }
  BOOL v5 = Mutable;
  if (CGColorSpaceGetName(a1))
  {
    if (FigCFEqual() || FigCFEqual())
    {
      CFArrayAppendValue(v5, (const void *)*MEMORY[0x1E4F24C10]);
LABEL_8:
      int v6 = (const void **)MEMORY[0x1E4F24BE0];
LABEL_9:
      CFArrayAppendValue(v5, *v6);
      uint64_t v7 = 0;
      goto LABEL_10;
    }
    if (FigCFEqual()) {
      goto LABEL_8;
    }
    if (FigCFEqual()
      || FigCFEqual()
      || FigCFEqual()
      || FigCFEqual()
      || FigCFEqual()
      || FigCFEqual()
      || FigCFEqual())
    {
      int v6 = (const void **)MEMORY[0x1E4F24BE8];
      goto LABEL_9;
    }
    if (FigCFEqual())
    {
LABEL_30:
      int v6 = (const void **)MEMORY[0x1E4F24BF8];
      goto LABEL_9;
    }
    if (FigCFEqual()) {
      goto LABEL_32;
    }
    if (FigCFEqual()) {
      goto LABEL_30;
    }
    if (FigCFEqual())
    {
LABEL_32:
      int v6 = (const void **)MEMORY[0x1E4F24BD8];
      goto LABEL_9;
    }
    if (FigCFEqual())
    {
      int v6 = (const void **)MEMORY[0x1E4F24C10];
      goto LABEL_9;
    }
    uint64_t v7 = FigSignalErrorAt();
  }
  else
  {
    uint64_t v7 = 4294950303;
  }
LABEL_10:
  if (CFArrayGetCount(v5))
  {
    *a2 = v5;
  }
  else
  {
    *a2 = 0;
    CFRelease(v5);
  }
  return v7;
}

__CFString *CMPhotoGetCGImageAuxiliaryDataTypeFromCMPhotoAuxiliaryImageType(int a1)
{
  switch(a1)
  {
    case 1:
      uint64_t v1 = MEMORY[0x1E4F2F3B8];
      return *(__CFString **)v1;
    case 2:
      uint64_t v1 = MEMORY[0x1E4F2F3B0];
      return *(__CFString **)v1;
    case 3:
      uint64_t v1 = MEMORY[0x1E4F2F3A8];
      return *(__CFString **)v1;
    case 4:
      if (FigCFEqual())
      {
        uint64_t v2 = (__CFString **)MEMORY[0x1E4F2F3D0];
        goto LABEL_21;
      }
      if (FigCFEqual())
      {
        uint64_t v2 = (__CFString **)MEMORY[0x1E4F2F3E8];
        goto LABEL_21;
      }
      if (FigCFEqual())
      {
        uint64_t v2 = (__CFString **)MEMORY[0x1E4F2F3E0];
        goto LABEL_21;
      }
      if (FigCFEqual())
      {
        uint64_t v2 = (__CFString **)MEMORY[0x1E4F2F3F8];
        goto LABEL_21;
      }
      if (FigCFEqual())
      {
        uint64_t v2 = (__CFString **)MEMORY[0x1E4F2F3F0];
        goto LABEL_21;
      }
      if (FigCFEqual())
      {
        uint64_t v2 = (__CFString **)MEMORY[0x1E4F2F3D8];
        goto LABEL_21;
      }
      if (FigCFEqual())
      {
        uint64_t v2 = (__CFString **)MEMORY[0x1E4F2F3C0];
LABEL_21:
        uint64_t result = *v2;
        if (*v2) {
          return result;
        }
        goto LABEL_22;
      }
      if (FigCFEqual()) {
        return @"kCGImageAuxiliaryDataTypeLinearThumbnail";
      }
      if (FigCFEqual()) {
        return @"kCGImageAuxiliaryDataTypeDeltaMap";
      }
      if (FigCFEqual()) {
        return @"kCGImageAuxiliaryDataTypeStyleDeltaMap";
      }
      if (!FigCFEqual())
      {
LABEL_22:
        FigSignalErrorAt();
        return 0;
      }
      return @"kCGImageAuxiliaryDataTypeConstantColorConfidenceMap";
    case 5:
      uint64_t v1 = MEMORY[0x1E4F2F3D0];
      return *(__CFString **)v1;
    default:
      goto LABEL_22;
  }
}

uint64_t CMPhotoGetCMPhotoAuxiliaryImageTypeFromCGImageAuxiliaryDataType(uint64_t result, __CFString **a2, int *a3)
{
  if (result)
  {
    uint64_t result = FigCFEqual();
    if (result)
    {
      BOOL v5 = @"urn:mpeg:hevc:2015:auxid:2";
      int v6 = 1;
      if (!a2) {
        goto LABEL_36;
      }
LABEL_35:
      *a2 = v5;
      goto LABEL_36;
    }
    uint64_t result = FigCFEqual();
    if (result)
    {
      BOOL v5 = @"urn:mpeg:hevc:2015:auxid:2";
      int v6 = 2;
      if (a2) {
        goto LABEL_35;
      }
    }
    else
    {
      uint64_t result = FigCFEqual();
      if (result)
      {
        BOOL v5 = @"urn:mpeg:hevc:2015:auxid:1";
        int v6 = 3;
        if (a2) {
          goto LABEL_35;
        }
      }
      else
      {
        uint64_t result = FigCFEqual();
        if (!result)
        {
          uint64_t result = FigCFEqual();
          if (result)
          {
            uint64_t v7 = kCMPhotoAuxiliaryImageTypeURN_SemanticSkinMatte;
          }
          else
          {
            uint64_t result = FigCFEqual();
            if (result)
            {
              uint64_t v7 = kCMPhotoAuxiliaryImageTypeURN_SemanticHairMatte;
            }
            else
            {
              uint64_t result = FigCFEqual();
              if (result)
              {
                uint64_t v7 = kCMPhotoAuxiliaryImageTypeURN_SemanticTeethMatte;
              }
              else
              {
                uint64_t result = FigCFEqual();
                if (result)
                {
                  uint64_t v7 = kCMPhotoAuxiliaryImageTypeURN_SemanticSkyMatte;
                }
                else
                {
                  uint64_t result = FigCFEqual();
                  if (result)
                  {
                    uint64_t v7 = kCMPhotoAuxiliaryImageTypeURN_SemanticGlassesMatte;
                  }
                  else
                  {
                    uint64_t result = FigCFEqual();
                    if (result)
                    {
                      uint64_t v7 = kCMPhotoAuxiliaryImageTypeURN_HDRGainMap;
                    }
                    else
                    {
                      uint64_t result = FigCFEqual();
                      if (result)
                      {
                        uint64_t v7 = kCMPhotoAuxiliaryImageTypeURN_LinearThumbnail;
                      }
                      else
                      {
                        uint64_t result = FigCFEqual();
                        if (result)
                        {
                          uint64_t v7 = kCMPhotoAuxiliaryImageTypeURN_DeltaMap;
                        }
                        else
                        {
                          uint64_t result = FigCFEqual();
                          if (!result)
                          {
                            uint64_t result = FigCFEqual();
                            BOOL v5 = @"tag:apple.com,2023:photo:aux:constantcolorconfidencemap";
                            if (!result) {
                              BOOL v5 = 0;
                            }
                            int v6 = 4 * (result != 0);
                            if (a2) {
                              goto LABEL_35;
                            }
                            goto LABEL_36;
                          }
                          uint64_t v7 = kCMPhotoAuxiliaryImageTypeURN_StyleDeltaMap;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          BOOL v5 = *v7;
          int v6 = 4;
          if (!a2) {
            goto LABEL_36;
          }
          goto LABEL_35;
        }
        BOOL v5 = @"urn:com:apple:photo:2018:aux:portraiteffectsmatte";
        int v6 = 5;
        if (a2) {
          goto LABEL_35;
        }
      }
    }
  }
  else
  {
    BOOL v5 = 0;
    int v6 = 0;
    if (a2) {
      goto LABEL_35;
    }
  }
LABEL_36:
  if (a3) {
    *a3 = v6;
  }
  return result;
}

uint64_t CMPhotoAddValueToCGMutableImageMetadata(CGImageMetadata *a1, CFTypeRef value, CFStringRef xmlns, CFStringRef prefix, CFStringRef name)
{
  if (!value) {
    return 4294950306;
  }
  CGImageMetadataTagRef v8 = CGImageMetadataTagCreate(xmlns, prefix, name, kCGImageMetadataTypeDefault, value);
  if (!v8) {
    return 4294950306;
  }
  CFDictionaryRef v9 = v8;
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFArrayAppendValue(Mutable, prefix);
  CFArrayAppendValue(Mutable, name);
  CFStringRef v12 = CFStringCreateByCombiningStrings(v10, Mutable, @":");
  if (CGImageMetadataSetTagWithPath(a1, 0, v12, v9)) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = 4294950306;
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  CFRelease(v9);
  if (v12) {
    CFRelease(v12);
  }
  return v13;
}

uint64_t CMPhotoAddMeteorPlusGainMapMetadata(const CGImageMetadata *a1, CGMutableImageMetadataRef metadata)
{
  CFTypeRef cf = 0;
  CFTypeRef v21 = 0;
  if (!CGImageMetadataRegisterNamespaceForPrefix(metadata, @"http://ns.apple.com/HDRGainMap/1.0/", @"HDRGainMap", 0))
  {
    uint64_t v18 = 4294950304;
    goto LABEL_27;
  }
  uint64_t CFNumberFormatter = CMPhotoMetadataCreateCFNumberFormatter((const __CFAllocator *)*MEMORY[0x1E4F1CF80], (CFNumberFormatterRef *)&v21);
  if (CFNumberFormatter)
  {
    uint64_t v18 = CFNumberFormatter;
    goto LABEL_27;
  }
  CFArrayRef v5 = CGImageMetadataCopyTags(a1);
  if (!v5)
  {
    uint64_t v18 = 4294950194;
    goto LABEL_27;
  }
  CFArrayRef v6 = v5;
  CFIndex Count = CFArrayGetCount(v5);
  if (Count < 1)
  {
    uint64_t v18 = 0;
    goto LABEL_26;
  }
  CFIndex v8 = Count;
  CFIndex v9 = 0;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (CGImageMetadataTag *)CFArrayGetValueAtIndex(v6, v9);
    CFStringRef v11 = CGImageMetadataTagCopyNamespace(ValueAtIndex);
    if (v11) {
      break;
    }
LABEL_17:
    if (v8 == ++v9)
    {
      uint64_t v18 = 0;
      CFStringRef v12 = 0;
      CFStringRef v13 = 0;
      goto LABEL_19;
    }
  }
  CFStringRef v12 = v11;
  CFStringRef v13 = CGImageMetadataTagCopyName(ValueAtIndex);
  if (v13)
  {
    if (FigCFEqual())
    {
      uint64_t v14 = CMPhotoCopyMetadataTagValue(ValueAtIndex, (__CFNumberFormatter *)v21, 0, (__CFArray **)&cf);
      if (v14) {
        goto LABEL_30;
      }
      if (FigCFEqual())
      {
        CFTypeRef v15 = cf;
        uint64_t v16 = metadata;
        CFStringRef v17 = @"HDRGainMapHeadroom";
        goto LABEL_14;
      }
      if (FigCFEqual())
      {
        CFStringRef v17 = @"HDRGainMapVersion";
        CFTypeRef v15 = cf;
        uint64_t v16 = metadata;
LABEL_14:
        uint64_t v14 = CMPhotoAddValueToCGMutableImageMetadata(v16, v15, @"http://ns.apple.com/HDRGainMap/1.0/", @"HDRGainMap", v17);
        if (v14)
        {
LABEL_30:
          uint64_t v18 = v14;
          goto LABEL_19;
        }
      }
    }
    CFRelease(v12);
    CFRelease(v13);
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    goto LABEL_17;
  }
  uint64_t v18 = 4294950194;
LABEL_19:
  if (cf) {
    CFRelease(cf);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v12) {
    CFRelease(v12);
  }
LABEL_26:
  CFRelease(v6);
LABEL_27:
  if (v21) {
    CFRelease(v21);
  }
  return v18;
}

uint64_t CMPhotoScaleAndRotateSessionGetTypeID()
{
  return sCMPhotoScaleAndRotateSessionTypeID;
}

uint64_t CMPhotoScaleAndRotateSessionSetSurfacePool(uint64_t a1, CFTypeRef cf)
{
  uint64_t v3 = a1;
  if (!a1)
  {
    pthread_once(&CMPhotoScaleAndRotateSessionGetDefault_onceToken, _once_CMPhotoScaleAndRotateSessionGetDefault);
    uint64_t v3 = defaultSession;
  }
  CFTypeRef v4 = *(CFTypeRef *)(v3 + 16);
  if (cf)
  {
    CFRetain(cf);
    CFTypeRef v5 = v4;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v3 + 16), (unint64_t *)&v5, (unint64_t)cf, memory_order_relaxed, memory_order_relaxed);
    if (v5 != v4)
    {
      uint64_t v6 = 4294950304;
      CFTypeRef v4 = cf;
LABEL_8:
      CFRelease(v4);
      return v6;
    }
LABEL_7:
    uint64_t v6 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
    goto LABEL_8;
  }
  CFTypeRef v7 = *(CFTypeRef *)(v3 + 16);
  atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v3 + 16), (unint64_t *)&v7, 0, memory_order_relaxed, memory_order_relaxed);
  if (v7 == v4) {
    goto LABEL_7;
  }
  return 4294950304;
}

uint64_t CMPhotoScaleAndRotateSessionGetSurfacePool(uint64_t result)
{
  if (result) {
    return *(void *)(result + 16);
  }
  return result;
}

uint64_t CMPhotoScaleAndRotateSessionTransformForSize(uint64_t a1, __CVBuffer *a2, int a3, int a4, uint64_t a5, uint64_t a6, int a7, unsigned __int8 a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12, double a13, double a14, double a15, double a16, uint64_t a17, unsigned __int8 a18, __CVBuffer **a19)
{
  return _scaleAndRotateSessionTransformForSizeWithOptions(a1, a2, 0, a3, a4, a5, a6, a7, a9, a10, a11, a12, a13, a14, a15, a16, a8, a17, a18,
           0,
           0,
           a19);
}

uint64_t CMPhotoScaleAndRotateSessionTransformForSizeWithHW(uint64_t a1, __CVBuffer *a2, int a3, int a4, uint64_t a5, uint64_t a6, int a7, unsigned __int8 a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12, double a13, double a14, double a15, double a16, uint64_t a17, unsigned __int8 a18, char a19, char a20,char a21,unsigned int a22,__CVBuffer **a23)
{
  if (!a23) {
    return 4294950306;
  }
  unsigned __int8 v23 = a8;
  uint64_t v24 = a6;
  uint64_t v34 = a1;
  if (!a1)
  {
    int v35 = a2;
    int v38 = a7;
    pthread_once(&CMPhotoScaleAndRotateSessionGetDefault_onceToken, _once_CMPhotoScaleAndRotateSessionGetDefault);
    a7 = v38;
    a2 = v35;
    unsigned __int8 v23 = a8;
    uint64_t v24 = a6;
    uint64_t v34 = defaultSession;
  }
  if (a13 == *MEMORY[0x1E4F1DB30] && a14 == *(double *)(MEMORY[0x1E4F1DB30] + 8))
  {
    int v45 = a7;
    unint64_t v46 = a2;
    unsigned __int8 v48 = v23;
    int v47 = a4;
    uint64_t v40 = a5;
    uint64_t v41 = v24;
    v49.origin.x = a9;
    v49.origin.y = a10;
    v49.size.double width = a11;
    v49.size.double height = a12;
    if (CGRectIsNull(v49))
    {
      CMPhotoGetPixelBufferCLAPAsRect(v46);
      a2 = v46;
      a13 = v42;
      a14 = v43;
      uint64_t v24 = v41;
      a5 = v40;
      a4 = v47;
      unsigned __int8 v23 = v48;
    }
    else
    {
      a13 = a11;
      a14 = a12;
      uint64_t v24 = v41;
      a5 = v40;
      a4 = v47;
      unsigned __int8 v23 = v48;
      a2 = v46;
    }
    a7 = v45;
  }
  return _convertAndScalePixelBufferOddSafe(v34, a2, 0, a3, a4, a5, v24, a7, a9, a10, a11, a12, a13, a14, a15, a16, *MEMORY[0x1E4F1DB20], *(double *)(MEMORY[0x1E4F1DB20] + 8), *(double *)(MEMORY[0x1E4F1DB20] + 16),
           *(double *)(MEMORY[0x1E4F1DB20] + 24),
           v23,
           a17,
           a18,
           a19,
           a21,
           a22,
           a23);
}

uint64_t CMPhotoScaleAndRotateSessionTransformForMaxSideLength(uint64_t a1, __CVBuffer *a2, int a3, int a4, unsigned int a5, int a6, unint64_t a7, unsigned __int8 a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12, unsigned __int8 a13, unsigned __int8 a14, uint64_t a15, unsigned __int8 a16, __CVBuffer **a17)
{
  return CMPhotoScaleAndRotateSessionTransformForMaxSideLengthWithOptions(a1, a2, 0, a3, a4, a5, a6, a7, a9, a10, a11, a12, a8, a13, a14, a15, a16, 0, 0,
           0,
           a17);
}

uint64_t CMPhotoScaleAndRotateSessionTransformForMaxSideLengthWithOptions(uint64_t a1, __CVBuffer *a2, const __CFDictionary *a3, int a4, int a5, unsigned int a6, int a7, unint64_t a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12, unsigned __int8 a13, unsigned __int8 a14, unsigned __int8 a15, uint64_t a16, unsigned __int8 a17, char a18, char a19, char a20,__CVBuffer **a21)
{
  if (CGRectIsNull(*(CGRect *)&a9))
  {
    CMPhotoGetPixelBufferCLAPAsRect(a2);
  }
  else
  {
    double v28 = a12;
    double v27 = a11;
  }
  unint64_t v38 = 0;
  unint64_t v39 = 0;
  CMPhotoPixelBufferConstrainSizeToMaxSideLength(vcvtad_u64_f64(v27), vcvtad_u64_f64(v28), a8, 0, 0, a13, a15, &v38, 0, 0);
  return _scaleAndRotateSessionTransformForSizeWithOptions(a1, a2, a3, a4, a5, a6, 0, a7, a9, a10, a11, a12, (double)v38, (double)v39, v29, v30, a14, a16, a17,
           a18,
           a20,
           a21);
}

uint64_t CMPhotoScaleAndRotateSessionTransformIntoCanvas(uint64_t a1, __CVBuffer *a2, int a3, int a4, __CVBuffer *a5, int a6, unsigned __int8 a7, double a8, CGFloat a9, CGFloat a10, CGFloat a11, double a12, CGFloat a13, CGFloat a14, CGFloat a15)
{
  return CMPhotoScaleAndRotateSessionTransformWithRect(a1, a2, a3, a4, a5, 0, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

void CMPhotoScaleAndRotateSessionDiscardCaches(uint64_t a1, uint64_t a2)
{
}

uint64_t CMPhotoScaleAndRotateSessionBakeInCLAPIfNeeded(uint64_t a1, char a2, uint64_t a3, char a4, __CVBuffer **a5)
{
  if (!a5 || !*a5) {
    return 4294950306;
  }
  if (!CMPhotoPixelBufferHasCLAP(*a5)) {
    return 0;
  }
  uint64_t v18 = 0;
  uint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(*a5);
  uint64_t DefaultTripletsForTransfer = CMPhotoCreateDefaultTripletsForTransfer(*a5, PixelFormatType);
  int v12 = v11;
  BOOL v13 = CVPixelBufferGetIOSurface(*a5) != 0;
  uint64_t v16 = _scaleAndRotateSessionTransformForSizeWithOptions(a1, *a5, 0, v13, 1, PixelFormatType, DefaultTripletsForTransfer, v12, *MEMORY[0x1E4F1DB20], *(CGFloat *)(MEMORY[0x1E4F1DB20] + 8), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 16), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 24), *MEMORY[0x1E4F1DB30], *(double *)(MEMORY[0x1E4F1DB30] + 8), v14, v15, 1u, 0, 0,
          a2,
          a4,
          &v18);
  if (!v16)
  {
    if (*a5) {
      CFRelease(*a5);
    }
    *a5 = v18;
  }
  return v16;
}

void CMPhotoScaleAndRotateSessionClass_Finalize(void *a1)
{
  uint64_t v2 = (const void *)a1[2];
  if (v2)
  {
    CFRelease(v2);
    a1[2] = 0;
  }
  uint64_t v3 = a1[4];
  if (v3)
  {
    dispatch_release(v3);
    a1[4] = 0;
  }
  CFTypeRef v4 = (const void *)a1[5];
  if (v4)
  {
    CFRelease(v4);
    a1[5] = 0;
  }
  CFTypeRef v5 = a1[7];
  if (v5)
  {
    dispatch_release(v5);
    a1[7] = 0;
  }
  uint64_t v6 = (const void *)a1[8];
  if (v6)
  {
    CFRelease(v6);
    a1[8] = 0;
  }
}

CFTypeRef CMPhotoScaleAndRotateSessionClass_CopyFormattingDesc()
{
  return CFRetain(@"[CMPhotoScaleAndRotateSession]");
}

uint64_t JPEGDecompressionPluginClass_create(uint64_t a1, const void *a2, const void *a3, uint64_t a4)
{
  CFTypeRef v4 = 0;
  uint64_t v5 = 4294950306;
  if (!a1 || !a4) {
    goto LABEL_17;
  }
  CFIndex v9 = malloc_type_calloc(1uLL, 0x20uLL, 0x1060040DC7B7DF3uLL);
  CFTypeRef v4 = v9;
  if (!v9)
  {
    uint64_t v5 = 4294950305;
    goto LABEL_17;
  }
  if (a3)
  {
    *(void *)CFIndex v9 = CFRetain(a3);
    v4[5] = 0;
    CMPhotoCFDictionaryGetBooleanIfPresent((CFDictionaryRef)a3, @"SyncDecode", (unsigned char *)v4 + 16);
    char v15 = 0;
    CMPhotoCFDictionaryGetBooleanIfPresent((CFDictionaryRef)a3, @"PreferSoftwareCodec", &v15);
    char v14 = 0;
    CMPhotoCFDictionaryGetBooleanIfPresent((CFDictionaryRef)a3, @"RequireHardwareCodec", &v14);
    if (v15)
    {
      int v10 = 1;
LABEL_10:
      v4[5] = v10;
      goto LABEL_11;
    }
    if (v14)
    {
      int v10 = 2;
      goto LABEL_10;
    }
  }
  else
  {
    *(void *)CFIndex v9 = 0;
    v9[5] = 0;
  }
LABEL_11:
  if (*((unsigned char *)v4 + 16)
    || (dispatch_queue_t v11 = dispatch_queue_create("com.apple.coremedia.jpeg-decoder", 0), (*((void *)v4 + 3) = v11) != 0))
  {
    if (a2) {
      CFTypeRef v12 = CFRetain(a2);
    }
    else {
      CFTypeRef v12 = 0;
    }
    uint64_t v5 = 0;
    *((void *)v4 + 1) = v12;
    *(void *)(a1 + 64) = v4;
    CFTypeRef v4 = 0;
  }
  else
  {
    uint64_t v5 = FigSignalErrorAt();
  }
LABEL_17:
  PluginInstance_Dispose((const void **)v4);
  return v5;
}

void JPEGDecompressionPluginClass_dispose(uint64_t a1)
{
  if (a1)
  {
    PluginInstance_Dispose(*(const void ***)(a1 + 64));
    *(void *)(a1 + 64) = 0;
  }
}

uint64_t JPEGDecompressionPluginClass_supportsNativeTiling()
{
  return 0;
}

uint64_t JPEGDecompressionPluginClass_decode(uint64_t a1, const __CFDictionary *a2, opaqueCMSampleBuffer *a3, uint64_t a4)
{
  CMBlockBufferRef blockBufferOut = 0;
  if (!a1) {
    return 4294950306;
  }
  uint64_t v5 = *(void *)(a1 + 64);
  if (v5)
  {
    if (a3)
    {
      uint64x2_t v47 = 0u;
      long long v48 = 0u;
      int v46 = 0;
      char v45 = 0;
      char DecodeHighSpeedDefault = CMPhotoGetDecodeHighSpeedDefault();
      CMBlockBufferRef DataBuffer = CMSampleBufferGetDataBuffer(a3);
      if (DataBuffer)
      {
        int v10 = DataBuffer;
        CFDictionaryRef Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension(*(CMFormatDescriptionRef *)(v5 + 8), (CFStringRef)*MEMORY[0x1E4F1EE20]);
        if (Extension)
        {
          CFDataRef Value = (const __CFData *)CFDictionaryGetValue(Extension, @"jpgC");
          if (Value)
          {
            CFDataRef v13 = Value;
            CFIndex Length = CFDataGetLength(Value);
            if (Length)
            {
              size_t v15 = Length;
              CFAllocatorRef v16 = *(const __CFAllocator **)a1;
              BytePtr = (UInt8 *)CFDataGetBytePtr(v13);
              uint64_t appended = CMBlockBufferCreateWithMemoryBlock(v16, BytePtr, v15, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0], 0, 0, v15, 0, &blockBufferOut);
              if (appended) {
                goto LABEL_18;
              }
              uint64_t appended = CMBlockBufferAppendBufferReference(blockBufferOut, v10, 0, 0, 0);
              if (appended) {
                goto LABEL_18;
              }
              int v10 = blockBufferOut;
            }
          }
        }
        if (a2)
        {
          CFDictionaryRef v19 = (const __CFDictionary *)CFDictionaryGetValue(a2, @"SourceCropRect");
          if (v19
            && ((CFDictionaryRef v20 = v19, v21 = CFGetTypeID(v19), v21 != CFDictionaryGetTypeID())
             || !CMPhotoRectMakeWithDictionaryRepresentation(v20, &v47))
            || (FigCFDictionaryGetIntIfPresent(),
                CMPhotoCFDictionaryGetBooleanIfPresent(a2, @"ForceHighSpeedDecode", &DecodeHighSpeedDefault),
                CMPhotoCFDictionaryGetBooleanIfPresent(a2, @"RestrictedDecoding", &v45),
                char v22 = v45,
                *(_DWORD *)(v5 + 20) == 2)
            && v45)
          {
            uint64_t appended = FigSignalErrorAt();
LABEL_18:
            uint64_t v23 = appended;
            goto LABEL_31;
          }
        }
        else
        {
          char v22 = 0;
        }
        if (*(unsigned char *)(v5 + 16))
        {
          v34[0] = 0;
          uint64_t v35 = a1;
          if (v10)
          {
            CFTypeRef v24 = CFRetain(v10);
            char v22 = v45;
          }
          else
          {
            CFTypeRef v24 = 0;
          }
          CFTypeRef v36 = v24;
          uint64x2_t v37 = v47;
          long long v38 = v48;
          int v39 = v46;
          char v40 = v22;
          int v41 = *(_DWORD *)(v5 + 20);
          char v42 = DecodeHighSpeedDefault;
          uint64_t v43 = a4;
          _dispatch_decode(v34);
LABEL_30:
          uint64_t v23 = 0;
          goto LABEL_31;
        }
        int v25 = (char *)malloc_type_calloc(1uLL, 0x50uLL, 0x10A00404598759DuLL);
        if (v25)
        {
          int v26 = v25;
          if (v10) {
            CFTypeRef v27 = CFRetain(v10);
          }
          else {
            CFTypeRef v27 = 0;
          }
          int v28 = *(_DWORD *)(v5 + 20);
          long long v29 = v48;
          *(uint64x2_t *)(v26 + 24) = v47;
          int v30 = v46;
          char v31 = v45;
          char v32 = DecodeHighSpeedDefault;
          *int v26 = 1;
          *((void *)v26 + 1) = a1;
          *((void *)v26 + 2) = v27;
          *(_OWORD *)(v26 + 40) = v29;
          *((_DWORD *)v26 + 14) = v30;
          v26[60] = v31;
          *((_DWORD *)v26 + 16) = v28;
          v26[68] = v32;
          *((void *)v26 + 9) = a4;
          dispatch_async_f(*(dispatch_queue_t *)(v5 + 24), v26, (dispatch_function_t)_dispatch_decode);
          goto LABEL_30;
        }
        uint64_t v23 = 4294950305;
      }
      else
      {
        uint64_t v23 = 4294950194;
      }
    }
    else
    {
      uint64_t v23 = 4294950306;
    }
  }
  else
  {
    uint64_t v23 = 4294950195;
  }
LABEL_31:
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  return v23;
}

void PluginInstance_Dispose(const void **a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (v2)
    {
      CFRelease(v2);
      *a1 = 0;
    }
    uint64_t v3 = a1[3];
    if (v3)
    {
      dispatch_release(v3);
      a1[3] = 0;
    }
    CFTypeRef v4 = a1[1];
    if (v4) {
      CFRelease(v4);
    }
    free(a1);
  }
}

void _dispatch_decode(char *a1)
{
  uint64_t v2 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  uint64_t v4 = *((void *)a1 + 1);
  CFDataRef v3 = (const __CFData *)*((void *)a1 + 2);
  CFTypeRef v35 = 0;
  long long v5 = *(_OWORD *)(a1 + 40);
  long long v33 = *(_OWORD *)(a1 + 24);
  long long v34 = v5;
  unsigned int v6 = *((_DWORD *)a1 + 14);
  uint64_t v7 = *((void *)a1 + 9);
  int v24 = a1[60];
  int v8 = *((_DWORD *)a1 + 16);
  char v9 = a1[68];
  if (*a1) {
    free(a1);
  }
  uint64_t v10 = *(void *)(v4 + 64);
  uint64_t v32 = 0;
  CFTypeRef cf = 0;
  uint64_t v11 = CMPhotoByteStreamCreateFromSource(v3, 0, 0, 0, &v35, 0);
  if (v11) {
    goto LABEL_22;
  }
  uint64_t v30 = 0;
  CFTypeRef v12 = v35;
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  size_t v15 = *(uint64_t (**)(CFTypeRef, void, uint64_t *))(v14 + 24);
  if (v15)
  {
    uint64_t ImageInformationFromJFIFByteStream = v15(v12, 0, &v30);
    if (!ImageInformationFromJFIFByteStream)
    {
      uint64_t v17 = v30;
      if (v30 < 0)
      {
        uint64_t v23 = 4294950190;
        goto LABEL_24;
      }
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      uint64_t v27 = 0;
      uint64_t ImageInformationFromJFIFByteStream = CMPhotoGetImageInformationFromJFIFByteStream((uint64_t)v35, 0, &v28, (int *)&v27 + 1, 0, 0, &v27, 0);
      if (!ImageInformationFromJFIFByteStream)
      {
        unsigned int v26 = 0;
        uint64_t ImageInformationFromJFIFByteStream = CMPhotoGetYUVPixelFormatForParameters(SHIDWORD(v27), v27, 1, 0, 0, 0, 1, (int *)&v26);
        if (!ImageInformationFromJFIFByteStream)
        {
          uint64_t ImageInformationFromJFIFByteStream = CMPhotoUnifiedJPEGDecoderCreate(*(const void **)(v4 + 32), *(CFAllocatorRef *)v4, v28, v29, v35, 0, v17, v3, 2, &v32);
          if (!ImageInformationFromJFIFByteStream)
          {
            uint64_t v18 = *(const opaqueCMFormatDescription **)(v10 + 8);
            uint64_t v2 = (_DWORD *)MEMORY[0x1E4F1EBA8];
            if (!v18
              || (uint64_t Dimensions = (uint64_t)CMVideoFormatDescriptionGetDimensions(v18), v28 == (int)Dimensions)
              && v29 == Dimensions >> 32)
            {
              if (v6) {
                uint64_t v20 = v6;
              }
              else {
                uint64_t v20 = v26;
              }
              uint64_t v21 = *(void *)(v4 + 8);
              uint64_t v22 = *(void *)(v4 + 16);
              v25[0] = v33;
              v25[1] = v34;
              uint64_t v11 = CMPhotoUnifiedJPEGDecoderDecode(v32, v21, v22, v8, v20, v24, v25, 0, v9, (uint64_t)a1, 0, 0, 0, (CVPixelBufferRef *)&cf);
            }
            else
            {
              uint64_t v11 = FigSignalErrorAt();
            }
LABEL_22:
            uint64_t v23 = v11;
            goto LABEL_25;
          }
        }
      }
    }
    uint64_t v23 = ImageInformationFromJFIFByteStream;
  }
  else
  {
    uint64_t v23 = 4294954514;
  }
LABEL_24:
  uint64_t v2 = (_DWORD *)MEMORY[0x1E4F1EBA8];
LABEL_25:
  CMPhotoUnifiedJPEGDecoderDestroy(v32);
  (*(void (**)(uint64_t, uint64_t, CFTypeRef, void, uint64_t))(v4 + 48))(v4, v23, cf, *(void *)(v4 + 56), v7);
  if (cf) {
    CFRelease(cf);
  }
  if (v3) {
    CFRelease(v3);
  }
  if (v35) {
    CFRelease(v35);
  }
  if (*v2 == 1) {
    kdebug_trace();
  }
}

intptr_t SurfacePool_CleanupTimerCanceled(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 344));
}

uint64_t __CMPhotoSurfacePoolCreate_block_invoke(uint64_t a1)
{
  return CMPhotoSurfacePoolHandleBackgroundNotification(*(void *)(a1 + 32));
}

uint64_t CMPhotoSurfacePoolHandleBackgroundNotification(uint64_t a1)
{
  uint64_t result = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 312));
  if (!result)
  {
    SurfacePool_PerformFullClean(a1);
    CFDataRef v3 = *(pthread_mutex_t **)(a1 + 312);
    return pthread_mutex_unlock(v3);
  }
  return result;
}

uint64_t CMPhotoSurfacePoolDetachMemorySurface(uint64_t a1, void *a2)
{
  return SurfacePool_DetachSurface(a1, a2, 0);
}

uint64_t CMPhotoSurfacePoolCreateImageSurface(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unint64_t a6, unint64_t a7, int a8, uint64_t a9, int a10, unsigned __int8 a11, IOSurfaceRef *a12, unsigned char *a13)
{
  return CMPhotoSurfacePoolCreateImageSurfaceWithAlignment(a1, a2, a3, a4, a5, a6, a7, a8, a9, 0, a10, a11, a12, a13);
}

uint64_t CMPhotoSurfacePoolFlushCaches(uint64_t result, int a2)
{
  uint64_t v3 = result;
  if (!result)
  {
    uint64_t result = pthread_once(&CMPhotoSurfacePoolGetDefault_onceToken, _once_CMPhotoSurfacePoolGetDefault);
    uint64_t v3 = defaultSurfacePool;
  }
  if ((__CFString *)v3 != @"SurfacePoolOneShot")
  {
    uint64_t result = pthread_mutex_lock(*(pthread_mutex_t **)(v3 + 312));
    if (!result)
    {
      BOOL v4 = a2 == 0;
      Pool_DropBuffers(v3 + 24, v4);
      Pool_DropBuffers(v3 + 168, v4);
      if (!*(void *)(v3 + 144) && !*(void *)(v3 + 288))
      {
        long long v5 = *(void **)(v3 + 352);
        if (v5)
        {
          [v5 unregisterBackgroundNotificationForContext:v3];
          [*(id *)(v3 + 352) releaseAssertionForContext:v3];
        }
      }
      unsigned int v6 = *(pthread_mutex_t **)(v3 + 312);
      return pthread_mutex_unlock(v6);
    }
  }
  return result;
}

void Pool_DropBuffers(uint64_t a1, int a2)
{
  uint64_t v2 = *(void **)a1;
  if (*(void *)a1)
  {
    while (1)
    {
      long long v5 = (void *)v2[7];
      unsigned int v6 = v5;
      if (!a2) {
        goto LABEL_5;
      }
      if (!IOSurfaceIsInUse((IOSurfaceRef)*v2)) {
        break;
      }
LABEL_16:
      uint64_t v2 = v5;
      if (!v5) {
        return;
      }
    }
    unsigned int v6 = (void *)v2[7];
LABEL_5:
    uint64_t v7 = (void *)v2[8];
    if (v6)
    {
      v6[8] = v7;
      uint64_t v7 = (void *)v2[8];
    }
    else
    {
      *(void *)(a1 + 8) = v7;
    }
    *uint64_t v7 = v6;
    uint64_t v8 = v2[5];
    char v9 = (void *)v2[6];
    if (v8)
    {
      *(void *)(v8 + 48) = v9;
      char v9 = (void *)v2[6];
    }
    else
    {
      *(void *)(v2[4] + 8) = v9;
    }
    void *v9 = v8;
    CMPhotoGetEncodeAccelerationModeOverride(*v2, @"CMPhoto dropped");
    if (*v2) {
      CFRelease((CFTypeRef)*v2);
    }
    uint64_t v10 = (const void *)v2[2];
    if (v10) {
      CFRelease(v10);
    }
    int64x2_t v11 = *(int64x2_t *)(a1 + 112);
    v12.i64[1] = -1;
    v12.i64[0] = v2[1];
    v12.i64[0] = vsubq_s64(v11, v12).u64[0];
    v13.i64[0] = -1;
    v13.i64[1] = -1;
    v12.i64[1] = vaddq_s64(v11, v13).i64[1];
    *(int64x2_t *)(a1 + 112) = v12;
    uint64_t v14 = v2[4];
    --*(void *)(v14 + 24);
    ++*(void *)(v14 + 48);
    free(v2);
    goto LABEL_16;
  }
}

uint64_t CMPhotoSurfacePoolDiscardCaches(uint64_t a1)
{
  return CMPhotoSurfacePoolFlushCaches(a1, 0);
}

uint64_t CMPhotoSurfacePoolGetStats(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  if (!a1)
  {
    pthread_once(&CMPhotoSurfacePoolGetDefault_onceToken, _once_CMPhotoSurfacePoolGetDefault);
    uint64_t v5 = defaultSurfacePool;
  }
  if ((__CFString *)v5 == @"SurfacePoolOneShot") {
    return 4294950303;
  }
  uint64_t result = pthread_mutex_lock(*(pthread_mutex_t **)(v5 + 312));
  if (!result)
  {
    if (a3)
    {
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      Pool_TallySubPoolStats(v5 + 24, (int64x2_t *)a3);
    }
    if (a2)
    {
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      Pool_TallySubPoolStats(v5 + 168, (int64x2_t *)a2);
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)(v5 + 312));
    return 0;
  }
  return result;
}

void Pool_TallySubPoolStats(uint64_t a1, int64x2_t *context)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if (v2 == 1)
  {
    CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 24), (CFDictionaryApplierFunction)_tallyStatsApplier, context);
  }
  else if (!v2)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    if (v3)
    {
      uint64_t v4 = 0;
      int64x2_t v5 = *context;
      uint64_t v7 = context[1].i64[0];
      uint64_t v6 = context[1].i64[1];
      do
      {
        uint64_t v8 = *(void *)(a1 + 24) + v4;
        v6 += *(void *)(v8 + 48);
        context[1].i64[1] = v6;
        int64x2_t v5 = vaddq_s64(v5, *(int64x2_t *)(v8 + 24));
        *uint64_t context = v5;
        v7 += *(void *)(v8 + 40);
        context[1].i64[0] = v7;
        v4 += 88;
        --v3;
      }
      while (v3);
    }
  }
}

void *SurfacePool_PerformFullClean(uint64_t a1)
{
  ++*(void *)(a1 + 408);
  Pool_DropBuffers(a1 + 24, 0);
  Pool_DropBuffers(a1 + 168, 0);
  if (!*(unsigned char *)(a1 + 320) && !*(unsigned char *)(a1 + 16))
  {
    dispatch_suspend(*(dispatch_object_t *)(a1 + 328));
    *(unsigned char *)(a1 + 320) = 1;
  }
  uint64_t result = *(void **)(a1 + 352);
  if (result)
  {
    [result unregisterBackgroundNotificationForContext:a1];
    uint64_t v3 = *(void **)(a1 + 352);
    return (void *)[v3 releaseAssertionForContext:a1];
  }
  return result;
}

uint64_t CMPhotoSurfacePoolClass_Finalize(uint64_t a1)
{
  CFAllocatorRef v2 = CFGetAllocator((CFTypeRef)a1);
  uint64_t v3 = *(NSObject **)(a1 + 336);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __CMPhotoSurfacePoolClass_Finalize_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  void block[4] = a1;
  dispatch_sync(v3, block);
  uint64_t v4 = *(NSObject **)(a1 + 344);
  if (v4)
  {
    dispatch_semaphore_wait(v4, 0xFFFFFFFFFFFFFFFFLL);
    int64x2_t v5 = *(NSObject **)(a1 + 328);
    if (v5)
    {
      dispatch_release(v5);
      *(void *)(a1 + 328) = 0;
    }
    uint64_t v6 = *(NSObject **)(a1 + 344);
    if (v6) {
      dispatch_release(v6);
    }
  }
  uint64_t v7 = *(NSObject **)(a1 + 336);
  if (v7) {
    dispatch_release(v7);
  }
  uint64_t v8 = *(void **)(a1 + 352);
  if (v8)
  {
    [v8 unregisterBackgroundNotificationForContext:a1];
    [*(id *)(a1 + 352) releaseAssertionForContext:a1];
    [*(id *)(a1 + 352) waitForPendingNotifications];
  }
  Pool_FreeAllSubPools(v2, a1 + 24);
  Pool_FreeAllSubPools(v2, a1 + 168);
  uint64_t result = FigSimpleMutexDestroy();
  *(void *)(a1 + 312) = 0;
  return result;
}

__CFString *CMPhotoSurfacePoolClass_CopyDebugDesc(void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v2, 0);
  uint64_t v4 = Mutable;
  if (Mutable)
  {
    CFStringAppendFormat(Mutable, 0, @"<CMPhotoSurfacePool %p> {\n", a1);
    Pool_AppendDebugDesc(v4, (uint64_t)(a1 + 3));
    Pool_AppendDebugDesc(v4, (uint64_t)(a1 + 21));
    CFStringAppendFormat(v4, 0, @"  Shallow cleanup count:   %d\n  Full cleanup count:      %d\n", a1[50], a1[51]);
    CFStringAppendFormat(v4, 0, @"}");
  }
  return v4;
}

void Pool_FreeAllSubPools(CFAllocatorRef allocator, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 16);
  if (v3 == 1)
  {
    CFDictionaryApplyFunction(*(CFDictionaryRef *)(a2 + 24), (CFDictionaryApplierFunction)Pool_DestroySubPool, 0);
    uint64_t v8 = *(const void **)(a2 + 24);
    if (v8) {
      CFRelease(v8);
    }
  }
  else if (!v3)
  {
    if (*(void *)(a2 + 40))
    {
      uint64_t v5 = 0;
      unint64_t v6 = 0;
      do
      {
        Pool_DestroySubPool(0, (uint64_t *)(*(void *)(a2 + 24) + v5));
        ++v6;
        v5 += 88;
      }
      while (*(void *)(a2 + 40) > v6);
    }
    uint64_t v7 = *(void **)(a2 + 24);
    if (v7) {
      CFAllocatorDeallocate(allocator, v7);
    }
  }
  if (*(unsigned char *)(a2 + 48))
  {
    char v9 = *(void **)(a2 + 32);
    free(v9);
  }
}

void Pool_DestroySubPool(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if (*a2)
  {
    do
    {
      uint64_t v5 = *(void *)(v4 + 40);
      if (*(void *)v4) {
        CFRelease(*(CFTypeRef *)v4);
      }
      unint64_t v6 = *(const void **)(v4 + 16);
      if (v6) {
        CFRelease(v6);
      }
      free((void *)v4);
      uint64_t v4 = v5;
    }
    while (v5);
  }
  if (a1)
  {
    free(a2);
  }
}

void Pool_AppendDebugDesc(__CFString *a1, uint64_t a2)
{
  long long context = 0u;
  long long v12 = 0u;
  int64x2_t v13 = a1;
  int v4 = *(_DWORD *)(a2 + 16);
  if (v4 == 1)
  {
    CFDictionaryApplyFunction(*(CFDictionaryRef *)(a2 + 24), (CFDictionaryApplierFunction)_collectStatistics, &context);
    uint64_t v7 = "Image pool";
  }
  else if (v4)
  {
    uint64_t v7 = 0;
  }
  else if (*(void *)(a2 + 40))
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    uint64_t v7 = "Memory pool";
    do
    {
      _collectStatistics(0, (int64x2_t *)(*(void *)(a2 + 24) + v5), (uint64_t)&context);
      ++v6;
      v5 += 88;
    }
    while (*(void *)(a2 + 40) > v6);
  }
  else
  {
    uint64_t v7 = "Memory pool";
  }
  uint64_t v8 = *((void *)&context + 1);
  uint64_t v9 = atomic_load((unsigned int *)(a2 + 132));
  if (v8) {
    double v10 = (double)*((unint64_t *)&context + 1)
  }
        * 100.0
        / (double)(unint64_t)(v12 + *((void *)&context + 1));
  else {
    double v10 = 0.0;
  }
  CFStringAppendFormat(a1, 0, @"  %s: {\n    Subpool count:         %d\n    Total size:            %d bytes\n    Total IOSurface count: %d\n    One-shot allocations:  %d\n    Allocations:           %d\n    Total hits:            %d\n    Total misses:          %d\n    Total deletes:         %d\n    Hit ratio:             %.2f%%\n  },\n", v7, (void)context, *(void *)(a2 + 112), *(void *)(a2 + 120), v9, (void)v12 + *((void *)&context + 1), *((void *)&context + 1), v12, *(void *)&v10);
}

int64x2_t _collectStatistics(uint64_t a1, int64x2_t *a2, uint64_t a3)
{
  CFStringAppendFormat(*(CFMutableStringRef *)(a3 + 32), 0, @"    subpool: %d\n", *(void *)a3);
  unint64_t v6 = *(__CFString **)(a3 + 32);
  if (a1)
  {
    uint64_t v7 = a2[4].u32[1];
    uint64_t v8 = a2[3].u32[2];
    uint64_t v9 = a2[3].u32[3];
    uint64_t v10 = a2[4].u32[0];
    uint64_t v11 = CMPhotoFormatFourCharCodeString(a2[4].u32[2]);
    LODWORD(v17) = v11;
    BYTE4(v17) = BYTE4(v11);
    CFStringAppendFormat(v6, 0, @"    image:   %d x %d, (%d x %d padded), %s\n", v8, v9, v10, v7, &v17, v17);
  }
  else
  {
    CFStringAppendFormat(v6, 0, @"    size:    %d\n", a2[1].i64[0], v13, v14, v15, v16, v17);
  }
  CFStringAppendFormat(*(CFMutableStringRef *)(a3 + 32), 0, @"    count:   %d\n    hits:    %d\n    misses:  %d\n    deletes: %d\n\n", a2[1].i64[1], a2[2].i64[0], a2[2].i64[1], a2[3].i64[0]);
  ++*(void *)a3;
  int64x2_t result = vaddq_s64(*(int64x2_t *)(a3 + 8), a2[2]);
  *(int64x2_t *)(a3 + 8) = result;
  *(void *)(a3 + 24) += a2[3].i64[0];
  return result;
}

int64x2_t _tallyStatsApplier(uint64_t a1, uint64_t a2, int64x2_t *a3)
{
  uint64_t v3 = a3[1].i64[0];
  a3[1].i64[1] += *(void *)(a2 + 48);
  int64x2_t result = vaddq_s64(*a3, *(int64x2_t *)(a2 + 24));
  *a3 = result;
  a3[1].i64[0] = v3 + *(void *)(a2 + 40);
  return result;
}

double CMPhotoComputePSNRForPixelBuffer(__CVBuffer *a1, __CVBuffer *a2, int a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  double v19 = 0.0;
  if (CGRectIsNull(*(CGRect *)&a4))
  {
    CGFloat v14 = *MEMORY[0x1E4F1DB20];
    CGFloat v15 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
    CGFloat v16 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
    CGFloat v17 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
  }
  else
  {
    CGFloat v14 = 0.0;
    CGFloat v15 = 0.0;
    CGFloat v16 = a6;
    CGFloat v17 = a7;
  }
  _computeMinimumBlockPSNRForPixelBuffer(a1, a2, a3, 0, 0, 0, 0, &v19, v14, v15, v16, v17, a4, a5, a6, a7, 0);
  return v19;
}

uint64_t _computeMinimumBlockPSNRForPixelBuffer(__CVBuffer *a1, __CVBuffer *a2, int a3, unsigned int a4, unint64_t a5, uint64_t a6, double *a7, double *a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12, CGFloat a13, CGFloat a14, CGFloat a15, CGFloat a16, double *a17)
{
  signed int PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  BOOL v30 = 0;
  int v310 = PixelFormatType;
  if (PixelFormatType > 1717856626)
  {
    if (PixelFormatType <= 1936077875)
    {
      if (PixelFormatType <= 1815162993)
      {
        if (PixelFormatType <= 1735549751)
        {
          if (PixelFormatType > 1734505011)
          {
            if (PixelFormatType == 1734505012) {
              goto LABEL_101;
            }
            int v31 = 1735549492;
          }
          else
          {
            if (PixelFormatType == 1717856627) {
              goto LABEL_101;
            }
            int v31 = 1734501176;
          }
          goto LABEL_94;
        }
        if (PixelFormatType <= 1751411058)
        {
          if (PixelFormatType == 1735549752) {
            goto LABEL_101;
          }
          int v31 = 1751410032;
          goto LABEL_94;
        }
        if (PixelFormatType == 1751411059) {
          goto LABEL_101;
        }
        int v39 = 1751527984;
        goto LABEL_83;
      }
      if (PixelFormatType <= 1919381559)
      {
        if (PixelFormatType > 1919378231)
        {
          if (PixelFormatType == 1919378232) {
            goto LABEL_101;
          }
          int v31 = 1919379252;
        }
        else
        {
          if (PixelFormatType == 1815162994) {
            goto LABEL_101;
          }
          int v31 = 1815491698;
        }
        goto LABEL_94;
      }
      if (PixelFormatType <= 1936077359)
      {
        if (PixelFormatType == 1919381560) {
          goto LABEL_101;
        }
        int v31 = 1932996149;
        goto LABEL_94;
      }
      if (PixelFormatType != 1936077360)
      {
        int v33 = 1936077362;
        goto LABEL_99;
      }
LABEL_100:
      BOOL v30 = a3 == 0;
      goto LABEL_101;
    }
    if (PixelFormatType > 1953903153)
    {
      if (PixelFormatType > 2016687155)
      {
        if (PixelFormatType > 2019963441)
        {
          if (PixelFormatType == 2019963956) {
            goto LABEL_100;
          }
          unsigned __int16 v38 = 12850;
        }
        else
        {
          if (PixelFormatType == 2016687156) {
            goto LABEL_100;
          }
          unsigned __int16 v38 = 12848;
        }
        int v33 = v38 | 0x78660000;
LABEL_99:
        int v36 = 0;
        if (PixelFormatType != v33)
        {
LABEL_482:
          uint64_t v45 = FigSignalErrorAt();
          CVPixelBufferRef v286 = 0;
          CVPixelBufferRef v285 = 0;
          double v42 = 0.0;
          int v295 = v36;
          goto LABEL_483;
        }
        goto LABEL_100;
      }
      if (PixelFormatType > 2016686639)
      {
        if (PixelFormatType != 2016686640)
        {
          int v33 = 2016686642;
          goto LABEL_99;
        }
        goto LABEL_100;
      }
      if (PixelFormatType == 1953903154) {
        goto LABEL_100;
      }
      unsigned __int16 v35 = 13364;
    }
    else
    {
      if (PixelFormatType <= 1952854575)
      {
        if (PixelFormatType > 1937125937)
        {
          if (PixelFormatType == 1937125938) {
            goto LABEL_100;
          }
          unsigned __int16 v32 = 13364;
        }
        else
        {
          if (PixelFormatType == 1936077876) {
            goto LABEL_100;
          }
          unsigned __int16 v32 = 12848;
        }
        int v33 = v32 | 0x73760000;
        goto LABEL_99;
      }
      if (PixelFormatType <= 1952855091)
      {
        if (PixelFormatType != 1952854576)
        {
          int v33 = 1952854578;
          goto LABEL_99;
        }
        goto LABEL_100;
      }
      if (PixelFormatType == 1952855092) {
        goto LABEL_100;
      }
      unsigned __int16 v35 = 12848;
    }
    int v33 = v35 | 0x74760000;
    goto LABEL_99;
  }
  if (PixelFormatType > 1278226735)
  {
    if (PixelFormatType > 1647719527)
    {
      if (PixelFormatType <= 1651847471)
      {
        if (PixelFormatType > 1650943795)
        {
          if (PixelFormatType == 1650943796) {
            goto LABEL_101;
          }
          int v31 = 1651519798;
        }
        else
        {
          if (PixelFormatType == 1647719528) {
            goto LABEL_101;
          }
          int v31 = 1650942776;
        }
      }
      else if (PixelFormatType <= 1651926375)
      {
        if (PixelFormatType == 1651847472) {
          goto LABEL_101;
        }
        int v31 = 1651925816;
      }
      else
      {
        if (PixelFormatType == 1651926376 || PixelFormatType == 1652056888) {
          goto LABEL_101;
        }
        int v31 = 1717855600;
      }
      goto LABEL_94;
    }
    if (PixelFormatType > 1380401728)
    {
      if (PixelFormatType > 1380411456)
      {
        if (PixelFormatType == 1380411457) {
          goto LABEL_101;
        }
        int v31 = 1647589490;
      }
      else
      {
        if (PixelFormatType == 1380401729) {
          goto LABEL_101;
        }
        int v31 = 1380410945;
      }
LABEL_94:
      int v36 = 0;
      if (PixelFormatType != v31) {
        goto LABEL_482;
      }
      goto LABEL_101;
    }
    if ((PixelFormatType - 1278226736) <= 6 && ((1 << (PixelFormatType - 48)) & 0x45) != 0) {
      goto LABEL_101;
    }
    int v34 = 1278555701;
    goto LABEL_41;
  }
  if (PixelFormatType <= 875836533)
  {
    if (PixelFormatType <= 875704437)
    {
      if (PixelFormatType == 825306677 || PixelFormatType == 825437747) {
        goto LABEL_101;
      }
      int v39 = 875704422;
LABEL_83:
      int v36 = 0;
      if (PixelFormatType != v39) {
        goto LABEL_482;
      }
      goto LABEL_100;
    }
    if (PixelFormatType > 875704949)
    {
      if (PixelFormatType != 875704950)
      {
        int v33 = 875836518;
        goto LABEL_99;
      }
    }
    else if (PixelFormatType != 875704438)
    {
      int v33 = 875704934;
      goto LABEL_99;
    }
    goto LABEL_100;
  }
  if (PixelFormatType > 1111970368)
  {
    if ((PixelFormatType - 1278226488) <= 0x30
      && ((1 << (PixelFormatType - 56)) & 0x1400000000001) != 0)
    {
      goto LABEL_101;
    }
    int v34 = 1111970369;
LABEL_41:
    int v36 = 0;
    signed int v37 = PixelFormatType;
    goto LABEL_66;
  }
  if (PixelFormatType == 875836534) {
    goto LABEL_100;
  }
  signed int v37 = PixelFormatType;
  if (PixelFormatType == 1094862674) {
    goto LABEL_101;
  }
  int v34 = 1095911234;
  int v36 = 0;
LABEL_66:
  if (v37 != v34) {
    goto LABEL_482;
  }
LABEL_101:
  OSType v40 = CVPixelBufferGetPixelFormatType(a1);
  int v36 = 0;
  if (v40 != CVPixelBufferGetPixelFormatType(a2) || (a5 & 1) != 0) {
    goto LABEL_482;
  }
  CGFloat v329 = a16;
  uint64_t v41 = CVPixelBufferLockBaseAddress(a1, 1uLL);
  double v42 = 0.0;
  if (v41)
  {
    uint64_t v45 = v41;
    int v36 = 0;
LABEL_478:
    int v295 = 0;
    CVPixelBufferRef v286 = 0;
    CVPixelBufferRef v285 = 0;
LABEL_483:
    double v289 = 0.0;
    goto LABEL_466;
  }
  int v36 = 1;
  uint64_t v43 = CVPixelBufferLockBaseAddress(a2, 1uLL);
  if (v43)
  {
    uint64_t v45 = v43;
    goto LABEL_478;
  }
  uint64x2_t v346 = 0u;
  long long v347 = 0u;
  _computeCropRectForPixelBuffer(a1, &v346, a9, a10, a11, a12);
  uint64x2_t v344 = 0u;
  long long v345 = 0u;
  _computeCropRectForPixelBuffer(a2, &v344, a13, a14, a15, v329);
  uint64_t v44 = v347;
  uint64_t v45 = 4294950194;
  int v36 = 1;
  if ((void)v347 != (void)v345)
  {
    int v295 = 1;
    double v289 = 0.0;
    CVPixelBufferRef v286 = 0;
    CVPixelBufferRef v285 = 0;
    goto LABEL_466;
  }
  uint64_t v294 = a8;
  uint64_t v46 = *((void *)&v347 + 1);
  if (*((void *)&v347 + 1) != *((void *)&v345 + 1))
  {
    int v295 = 1;
    double v289 = 0.0;
    CVPixelBufferRef v286 = 0;
    CVPixelBufferRef v285 = 0;
    goto LABEL_487;
  }
  if (a5)
  {
    if (*((void *)&v347 + 1) / a5 <= 1) {
      uint64_t v47 = 1;
    }
    else {
      uint64_t v47 = *((void *)&v347 + 1) / a5;
    }
    if ((unint64_t)v347 / a5 <= 1) {
      unint64_t v48 = 1;
    }
    else {
      unint64_t v48 = (unint64_t)v347 / a5;
    }
  }
  else
  {
    if ((unint64_t)v347 <= *((void *)&v347 + 1)) {
      a5 = *((void *)&v347 + 1);
    }
    else {
      a5 = v347;
    }
    uint64_t v47 = 1;
    unint64_t v48 = 1;
  }
  unint64_t v309 = v48;
  uint64_t v49 = 3;
  if (!v30) {
    uint64_t v49 = 1;
  }
  unint64_t v296 = v48 * v47;
  size_t v50 = v48 * v47 * v49;
  if (!a7)
  {
    size_t v51 = v50;
    unint64_t v52 = (double *)malloc_type_calloc(v50, 8uLL, 0x100004000313F17uLL);
    size_t v50 = v51;
    a7 = v52;
    float v293 = v52;
    if (v52) {
      goto LABEL_124;
    }
    CVPixelBufferRef v286 = 0;
    CVPixelBufferRef v285 = 0;
    uint64_t v45 = 4294950305;
    int v36 = 1;
    double v289 = 0.0;
    int v295 = 1;
LABEL_487:
    a8 = v294;
    goto LABEL_466;
  }
  if (a6 != 8 * v50)
  {
    int v36 = 1;
    a8 = v294;
    goto LABEL_482;
  }
  float v293 = 0;
LABEL_124:
  unint64_t v292 = v50;
  int v295 = 1;
  int16x8_t v302 = (double *)malloc_type_calloc(v50, 8uLL, 0x100004000313F17uLL);
  if (!v302)
  {
    CVPixelBufferRef v286 = 0;
    uint64_t v45 = 4294950305;
    int v36 = 1;
    double v289 = 0.0;
    a8 = v294;
    uint64_t v290 = a17;
    CVPixelBufferRef v285 = v293;
    goto LABEL_467;
  }
  uint64_t v299 = 0;
  int v326 = 0;
  uint64_t v53 = 0;
  uint64_t v308 = v44 + v346.i64[0];
  uint64_t v307 = v46 + v346.i64[1];
  unint64_t v54 = v309;
  uint64_t v306 = v47 - 1;
  unsigned int v298 = v310 - 1278226488;
  unsigned int v297 = v310 - 1278226736;
  int16x8_t v304 = a7;
  unint64_t v305 = a5;
  uint64_t v303 = v47;
  do
  {
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    unint64_t v313 = v53 * a5;
    uint64_t v314 = v53;
    unint64_t v312 = v53 * v54;
    do
    {
      uint64_t v328 = v55;
      uint64x2_t v57 = v346;
      uint64_t v58 = v346.i64[0] + v56 * a5;
      unint64_t v59 = v346.i64[1] + v313;
      uint64x2_t v60 = v344;
      uint64_t v61 = v344.i64[0] + v56 * a5;
      if (v314 == v306) {
        unint64_t v62 = v307 - (v346.i64[1] + v313);
      }
      else {
        unint64_t v62 = a5;
      }
      if (v56 == v309 - 1) {
        a5 = v308 - v58;
      }
      uint64_t v330 = v56;
      uint64_t v327 = v56 + v312;
      BOOL v63 = 1;
      if (v310 > 1380410944)
      {
        if (v310 > 1647589489)
        {
          if (v310 == 1647589490) {
            goto LABEL_148;
          }
          if (v310 == 1647719528)
          {
            unint64_t v113 = v344.i64[1] + v313;
            uint64_t v320 = v61;
            unint64_t v114 = v62;
            uint64_t v115 = CVPixelBufferGetPixelFormatType(a1);
            uint64_t BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(v115);
            uint64_t BitDepthForPixelFormat = CMPhotoGetBitDepthForPixelFormat(v115);
            int v118 = -16995;
            double v119 = 0.0;
            double v120 = 0.0;
            if (BytesPerPixelForPixelFormat && BitDepthForPixelFormat)
            {
              size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
              size_t v122 = CVPixelBufferGetBytesPerRow(a2);
              BaseAddresCGColorSpaceRef s = (char *)CVPixelBufferGetBaseAddress(a1);
              CFDictionaryRef v124 = (char *)CVPixelBufferGetBaseAddress(a2);
              if (v114 >= 2)
              {
                uint64_t v189 = 0;
                uint64_t v190 = 2 * a5;
                double v191 = &v124[2 * BytesPerPixelForPixelFormat * v320 + v122 * (v113 >> 1)];
                int v192 = &BaseAddress[2 * BytesPerPixelForPixelFormat * v58 + BytesPerRow * (v59 >> 1)];
                if (v114 >> 1 <= 1) {
                  uint64_t v193 = 1;
                }
                else {
                  uint64_t v193 = v114 >> 1;
                }
                double v194 = 0.0;
                double v195 = 0.0;
                double v196 = 0.0;
                do
                {
                  if (v190)
                  {
                    for (uint64_t i = 0; i != v190; ++i)
                    {
                      _H1 = *(short float *)&v192[2 * i] - *(short float *)&v191[2 * i];
                      __asm { FCVT            D1, H1 }
                      double v200 = _D1 * _D1;
                      if (!v189 || 2 * a5 - 1 == i || (v114 >> 1) - 1 == v189 || !i)
                      {
                        double v196 = v196 + v200;
                        double v195 = v195 + 1.0;
                      }
                      double v194 = v194 + v200;
                    }
                  }
                  v192 += BytesPerRow;
                  v191 += v122;
                  ++v189;
                }
                while (v189 != v193);
                if (v194 == 0.0) {
                  double v120 = INFINITY;
                }
                else {
                  double v120 = log10(v194 / (double)((v114 >> 1) * v190)) * -10.0 + 0.0;
                }
                uint64_t v56 = v330;
                if (v196 == 0.0)
                {
                  int v118 = 0;
                  double v119 = INFINITY;
                }
                else
                {
                  long double v224 = log10(v196 / v195);
                  int v118 = 0;
                  double v119 = v224 * -10.0 + 0.0;
                }
              }
              else
              {
                int v118 = 0;
                double v119 = INFINITY;
                double v120 = INFINITY;
                uint64_t v56 = v330;
              }
            }
            int v91 = v304;
            v304[v327] = v120;
            v302[v327] = v119;
            v326 |= v118;
            goto LABEL_369;
          }
          int v64 = 1815491698;
          goto LABEL_147;
        }
        if (v310 == 1380410945) {
          goto LABEL_143;
        }
        unsigned __int16 v65 = 26689;
LABEL_146:
        int v64 = v65 | 0x52470000;
LABEL_147:
        if (v310 == v64) {
          goto LABEL_148;
        }
        goto LABEL_185;
      }
      if (v310 > 1111970368)
      {
        if (v310 == 1111970369) {
          goto LABEL_148;
        }
        unsigned __int16 v65 = 16961;
        goto LABEL_146;
      }
      if (v310 == 1094862674 || v310 == 1095911234)
      {
LABEL_143:
        BOOL v63 = v310 == 1380410945;
LABEL_148:
        int v316 = v63;
        unint64_t v319 = v62;
        unint64_t v322 = v344.i64[1] + v313;
        uint64_t v66 = v61;
        unint64_t v317 = a5;
        uint64_t v67 = v58;
        uint64_t v68 = CVPixelBufferGetPixelFormatType(a1);
        unint64_t v69 = CMPhotoGetBytesPerPixelForPixelFormat(v68);
        int v70 = v68;
        unint64_t v71 = CMPhotoGetBitDepthForPixelFormat(v68);
        size_t v72 = CVPixelBufferGetBytesPerRow(a1);
        size_t v73 = CVPixelBufferGetBytesPerRow(a2);
        int32x2_t v74 = (char *)CVPixelBufferGetBaseAddress(a1);
        uint64_t v75 = (char *)CVPixelBufferGetBaseAddress(a2);
        double v76 = 0.0;
        int v77 = -16995;
        if (!v69 || !v71)
        {
          double v147 = 0.0;
          int v91 = v304;
          a5 = v305;
          uint64_t v90 = v303;
          uint64_t v92 = v328;
          uint64_t v56 = v330;
          uint64_t v93 = v327;
          goto LABEL_405;
        }
        unint64_t v78 = v71;
        int v79 = &v74[v69 * v67 + v72 * v59];
        size_t v80 = v73;
        BOOL v81 = &v75[v69 * v66 + v73 * v322];
        __asm { FMOV            V0.2D, #3.0 }
        unint64_t v87 = v69 / (v71 >> 3);
        if (v71 != 32)
        {
          unint64_t v88 = v319;
          int v89 = v68;
          if (v71 != 16)
          {
            uint64_t v90 = v303;
            int v91 = v304;
            uint64_t v93 = v327;
            uint64_t v92 = v328;
            unint64_t v94 = v317;
            if (v78 != 8) {
              goto LABEL_231;
            }
            if (!v319)
            {
              int v77 = 0;
              double v76 = INFINITY;
              double v147 = INFINITY;
              goto LABEL_236;
            }
            uint64_t v95 = 0;
            if (v87 == 4) {
              int v96 = v316;
            }
            else {
              int v96 = 0;
            }
            if (v87 == 3) {
              int v96 = 1;
            }
            float64x2_t v97 = 0uLL;
            double v98 = 0.0;
            uint64_t v56 = v330;
            do
            {
              if (v317)
              {
                for (uint64_t j = 0; j != v317; ++j)
                {
                  unint64_t v100 = j * v87;
                  if (v96)
                  {
                    double v101 = (double)(v79[v100 + 2] - v81[v100 + 2]);
                    double v102 = v101 * v101;
                    int v103 = v79[v100 + 1] - v81[v100 + 1];
                    double v104 = (double)v103 * (double)v103;
                  }
                  else
                  {
                    if (((v87 == 4) & ~v316) == 0) {
                      goto LABEL_339;
                    }
                    double v105 = (double)(v79[v100 + 1] - v81[v100 + 1]);
                    double v102 = v105 * v105;
                    int v106 = v79[v100 + 2] - v81[v100 + 2];
                    double v104 = (double)v106 * (double)v106;
                    v100 += 3;
                  }
                  int v107 = v79[v100] - v81[v100];
                  double v108 = v102 + v104 + (double)v107 * (double)v107;
                  if (!v95 || v317 - 1 == j || v319 - 1 == v95 || !j)
                  {
                    v109.f64[1] = *((float64_t *)&_Q0 + 1);
                    v109.f64[0] = v108;
                    float64x2_t v97 = vaddq_f64(v97, v109);
                  }
                  double v98 = v98 + v108;
                }
              }
              v79 += v72;
              v81 += v80;
              ++v95;
            }
            while (v95 != v319);
LABEL_173:
            float v110 = 0.0;
LABEL_230:
            float v146 = 0.0;
LABEL_288:
            double v148 = (double)(3 * v88 * v94);
            double v149 = v97.f64[1];
            if (v78 != 32)
            {
              a5 = v305;
              if (v78 != 16)
              {
                if (v98 == 0.0)
                {
                  double v76 = INFINITY;
                }
                else
                {
                  float64_t v335 = v97.f64[0];
                  long double v233 = log10(v98 / v148);
                  v97.f64[0] = v335;
                  double v76 = v233 * -10.0 + 48.1308036;
                }
                if (v97.f64[0] != 0.0)
                {
                  long double v234 = log10(v97.f64[0] / v149);
                  int v77 = 0;
                  double v228 = v234 * -10.0;
                  double v229 = 48.1308036;
LABEL_404:
                  double v147 = v228 + v229;
LABEL_405:
                  v91[v93] = v76;
                  v302[v93] = v147;
                  v326 |= v77;
                  unint64_t v54 = v309;
                  goto LABEL_406;
                }
LABEL_357:
                int v77 = 0;
                double v147 = INFINITY;
                goto LABEL_405;
              }
LABEL_341:
              if (v89 <= 1651926375)
              {
                if (v89 == 1278226536 || v89 == 1380411457) {
                  goto LABEL_352;
                }
                int v219 = 1647719528;
              }
              else
              {
                if (v89 <= 1751411058)
                {
                  if (v89 != 1651926376)
                  {
                    unsigned __int16 v218 = 25968;
                    goto LABEL_350;
                  }
LABEL_352:
                  long double v202 = v146;
LABEL_353:
                  if (v98 == 0.0)
                  {
                    double v76 = INFINITY;
                  }
                  else
                  {
                    float64_t v331 = v97.f64[0];
                    double v220 = log10(v202);
                    long double v221 = log10(v98 / v148);
                    v97.f64[0] = v331;
                    double v76 = v221 * -10.0 + v220 * 20.0;
                  }
                  if (v97.f64[0] != 0.0)
                  {
                    double v332 = v97.f64[0];
                    double v222 = log10(v202);
                    long double v223 = log10(v332 / v149);
                    int v77 = 0;
                    double v147 = v223 * -10.0 + v222 * 20.0;
                    goto LABEL_405;
                  }
                  goto LABEL_357;
                }
                if (v89 == 1751527984) {
                  goto LABEL_352;
                }
                unsigned __int16 v218 = 26995;
LABEL_350:
                int v219 = v218 | 0x68640000;
              }
              if (v89 != v219)
              {
                if (v98 == 0.0)
                {
                  double v76 = INFINITY;
                }
                else
                {
                  float64_t v334 = v97.f64[0];
                  long double v231 = log10(v98 / v148);
                  v97.f64[0] = v334;
                  double v76 = v231 * -10.0 + 96.3294661;
                }
                if (v97.f64[0] != 0.0)
                {
                  long double v232 = log10(v97.f64[0] / v149);
                  int v77 = 0;
                  double v228 = v232 * -10.0;
                  double v229 = 96.3294661;
                  goto LABEL_404;
                }
                goto LABEL_357;
              }
              goto LABEL_352;
            }
LABEL_238:
            if (v89 > 1717855599)
            {
              a5 = v305;
              uint64_t v56 = v330;
              if (v89 != 1717856627)
              {
                int v150 = 1717855600;
                goto LABEL_316;
              }
            }
            else
            {
              a5 = v305;
              uint64_t v56 = v330;
              if (v89 != 1278226534)
              {
                int v150 = 1380410945;
LABEL_316:
                if (v89 != v150)
                {
                  if (v98 == 0.0)
                  {
                    double v76 = INFINITY;
                  }
                  else
                  {
                    float64_t v333 = v97.f64[0];
                    long double v226 = log10(v98 / v148);
                    v97.f64[0] = v333;
                    double v76 = v226 * -10.0 + 192.659197;
                  }
                  if (v97.f64[0] != 0.0)
                  {
                    long double v227 = log10(v97.f64[0] / v149);
                    int v77 = 0;
                    double v228 = v227 * -10.0;
                    double v229 = 192.659197;
                    goto LABEL_404;
                  }
                  goto LABEL_357;
                }
              }
            }
            long double v202 = v110;
            goto LABEL_353;
          }
          uint64_t v90 = v303;
          int v91 = v304;
          uint64_t v93 = v327;
          uint64_t v92 = v328;
          unint64_t v94 = v317;
          if (v70 <= 1651926375)
          {
            if (v70 == 1278226536 || v70 == 1380411457) {
              goto LABEL_244;
            }
            int v112 = 1647719528;
          }
          else
          {
            if (v70 <= 1751411058)
            {
              if (v70 != 1651926376)
              {
                int v112 = 1751410032;
                goto LABEL_243;
              }
LABEL_244:
              if (v319)
              {
                uint64_t v151 = 0;
                if (v87 == 4) {
                  int v152 = v316;
                }
                else {
                  int v152 = 0;
                }
                if (v87 == 3) {
                  int v152 = 1;
                }
                float64x2_t v97 = 0uLL;
                double v98 = 0.0;
                float v146 = 0.0;
                uint64_t v56 = v330;
                do
                {
                  if (v317)
                  {
                    for (uint64_t k = 0; k != v317; ++k)
                    {
                      unint64_t v154 = k * v87;
                      if (v152)
                      {
                        uint64_t v155 = 2 * v154 + 4;
                        short float v156 = *(short float *)&v79[v155];
                        uint64_t v157 = 2 * v154 + 2;
                        short float v158 = *(short float *)&v79[v157];
                        _H4 = *(short float *)&v79[2 * v154];
                        if (v156 <= v158) {
                          _H5 = *(short float *)&v79[v157];
                        }
                        else {
                          _H5 = *(short float *)&v79[v155];
                        }
                        if (_H5 <= _H4) {
                          __asm { FCVT            S5, H4 }
                        }
                        else {
                          __asm { FCVT            S5, H5 }
                        }
                        if (v146 <= _S5) {
                          float v146 = _S5;
                        }
                        _H6 = *(short float *)&v81[v155];
                        _H2 = v156 - _H6;
                        __asm { FCVT            D2, H2 }
                        short float v173 = *(short float *)&v81[v157];
                        double v174 = _D2 * _D2;
                        _H3 = v158 - v173;
                        __asm { FCVT            D3, H3 }
                        double v177 = _D3 * _D3;
                        _H5 = *(short float *)&v81[2 * v154];
                      }
                      else
                      {
                        if (((v87 == 4) & ~v316) == 0) {
                          goto LABEL_339;
                        }
                        uint64_t v162 = 2 * v154;
                        uint64_t v163 = v162 + 2;
                        short float v164 = *(short float *)&v79[v162 + 2];
                        uint64_t v165 = v162 + 4;
                        short float v166 = *(short float *)&v79[v162 + 4];
                        uint64_t v167 = v162 + 6;
                        _H4 = *(short float *)&v79[v167];
                        if (v164 <= v166) {
                          _H5 = v166;
                        }
                        else {
                          _H5 = v164;
                        }
                        if (_H5 <= _H4) {
                          __asm { FCVT            S5, H4 }
                        }
                        else {
                          __asm { FCVT            S5, H5 }
                        }
                        if (v146 <= _S5) {
                          float v146 = _S5;
                        }
                        _H6 = *(short float *)&v81[v163];
                        _H2 = v164 - _H6;
                        __asm { FCVT            D2, H2 }
                        short float v173 = *(short float *)&v81[v165];
                        double v174 = _D2 * _D2;
                        _H3 = v166 - v173;
                        __asm { FCVT            D3, H3 }
                        double v177 = _D3 * _D3;
                        _H5 = *(short float *)&v81[v167];
                      }
                      _H4 = _H4 - _H5;
                      __asm { FCVT            D4, H4 }
                      double v185 = _D4 * _D4;
                      if (_H6 <= v173) {
                        _H6 = v173;
                      }
                      if (_H6 <= _H5) {
                        __asm { FCVT            S5, H5 }
                      }
                      else {
                        __asm { FCVT            S5, H6 }
                      }
                      if (v146 <= _S5) {
                        float v146 = _S5;
                      }
                      double v187 = v174 + v177 + v185;
                      if (!v151 || v317 - 1 == k || v319 - 1 == v151 || !k)
                      {
                        v188.f64[1] = *((float64_t *)&_Q0 + 1);
                        v188.f64[0] = v187;
                        float64x2_t v97 = vaddq_f64(v97, v188);
                      }
                      double v98 = v98 + v187;
                    }
                  }
                  v79 += v72;
                  v81 += v80;
                  ++v151;
                }
                while (v151 != v319);
                float v110 = 0.0;
                goto LABEL_288;
              }
LABEL_340:
              float v146 = 0.0;
              double v148 = 0.0;
              double v98 = 0.0;
              double v149 = 0.0;
              v97.f64[0] = 0.0;
              a5 = v305;
              uint64_t v56 = v330;
              goto LABEL_341;
            }
            if (v70 == 1751411059) {
              goto LABEL_244;
            }
            int v112 = 1751527984;
          }
LABEL_243:
          if (v70 == v112) {
            goto LABEL_244;
          }
          if (v319)
          {
            uint64_t v203 = 0;
            if (v87 == 4) {
              int v204 = v316;
            }
            else {
              int v204 = 0;
            }
            if (v87 == 3) {
              int v204 = 1;
            }
            float64x2_t v97 = 0uLL;
            double v98 = 0.0;
            uint64_t v56 = v330;
            do
            {
              if (v317)
              {
                for (uint64_t m = 0; m != v317; ++m)
                {
                  unint64_t v206 = m * v87;
                  if (v204)
                  {
                    double v207 = (double)(*(unsigned __int16 *)&v79[2 * v206 + 4] - *(unsigned __int16 *)&v81[2 * v206 + 4]);
                    double v208 = v207 * v207;
                    double v209 = (double)(*(unsigned __int16 *)&v79[2 * v206 + 2] - *(unsigned __int16 *)&v81[2 * v206 + 2]);
                    double v210 = v209 * v209;
                    int v211 = *(unsigned __int16 *)&v79[2 * v206];
                    int v212 = *(unsigned __int16 *)&v81[2 * v206];
                  }
                  else
                  {
                    if (((v87 == 4) & ~v316) == 0) {
                      goto LABEL_339;
                    }
                    uint64_t v213 = 2 * v206;
                    double v214 = (double)(*(unsigned __int16 *)&v79[v213 + 2] - *(unsigned __int16 *)&v81[v213 + 2]);
                    double v208 = v214 * v214;
                    double v215 = (double)(*(unsigned __int16 *)&v79[v213 + 4] - *(unsigned __int16 *)&v81[v213 + 4]);
                    double v210 = v215 * v215;
                    v213 += 6;
                    int v211 = *(unsigned __int16 *)&v79[v213];
                    int v212 = *(unsigned __int16 *)&v81[v213];
                  }
                  double v216 = v208 + v210 + (double)(v211 - v212) * (double)(v211 - v212);
                  if (!v203 || v317 - 1 == m || v319 - 1 == v203 || !m)
                  {
                    v217.f64[1] = *((float64_t *)&_Q0 + 1);
                    v217.f64[0] = v216;
                    float64x2_t v97 = vaddq_f64(v97, v217);
                  }
                  double v98 = v98 + v216;
                }
              }
              v79 += v72;
              v81 += v80;
              ++v203;
            }
            while (v203 != v319);
            goto LABEL_173;
          }
          goto LABEL_340;
        }
        int v89 = v68;
        unint64_t v88 = v319;
        if ((int)v68 > 1717855599)
        {
          uint64_t v90 = v303;
          int v91 = v304;
          uint64_t v93 = v327;
          uint64_t v92 = v328;
          unint64_t v94 = v317;
          if (v70 != 1717856627)
          {
            int v111 = 1717855600;
            goto LABEL_190;
          }
        }
        else
        {
          uint64_t v90 = v303;
          int v91 = v304;
          uint64_t v93 = v327;
          uint64_t v92 = v328;
          unint64_t v94 = v317;
          if (v70 != 1278226534)
          {
            int v111 = 1380410945;
LABEL_190:
            if (v70 != v111)
            {
LABEL_231:
              FigSignalErrorAt();
              int v77 = 0;
              double v147 = 0.0;
LABEL_236:
              a5 = v305;
              uint64_t v56 = v330;
              goto LABEL_405;
            }
          }
        }
        if (v319)
        {
          uint64_t v126 = 0;
          if (v87 == 4) {
            int v127 = v316;
          }
          else {
            int v127 = 0;
          }
          if (v87 == 3) {
            int v127 = 1;
          }
          float64x2_t v97 = 0uLL;
          double v98 = 0.0;
          float v110 = 0.0;
          uint64_t v56 = v330;
          do
          {
            if (v94)
            {
              for (uint64_t n = 0; v94 != n; ++n)
              {
                unint64_t v129 = n * v87;
                if (v127)
                {
                  uint64_t v130 = 4 * v129 + 8;
                  float v131 = *(float *)&v79[v130];
                  float v132 = *(float *)&v81[v130];
                  double v133 = (float)(v131 - v132) * (float)(v131 - v132);
                  uint64_t v134 = 4 * v129 + 4;
                  float v135 = *(float *)&v79[v134];
                  float v136 = *(float *)&v81[v134];
                  double v137 = (float)(v135 - v136) * (float)(v135 - v136);
                  float v138 = *(float *)&v79[4 * v129];
                  float v139 = *(float *)&v81[4 * v129];
                }
                else
                {
                  if (((v87 == 4) & ~v316) == 0)
                  {
LABEL_339:
                    FigSignalErrorAt();
                    int v77 = 0;
                    double v76 = 0.0;
                    double v147 = 0.0;
                    a5 = v305;
                    goto LABEL_405;
                  }
                  uint64_t v140 = 4 * v129;
                  float v131 = *(float *)&v79[v140 + 4];
                  float v132 = *(float *)&v81[v140 + 4];
                  float v135 = *(float *)&v79[v140 + 8];
                  double v133 = (float)(v131 - v132) * (float)(v131 - v132);
                  float v136 = *(float *)&v81[v140 + 8];
                  double v137 = (float)(v135 - v136) * (float)(v135 - v136);
                  v140 += 12;
                  float v138 = *(float *)&v79[v140];
                  float v139 = *(float *)&v81[v140];
                }
                if (v131 <= v135) {
                  float v131 = v135;
                }
                if (v110 <= v138) {
                  float v141 = v138;
                }
                else {
                  float v141 = v110;
                }
                if (v110 <= v131) {
                  float v110 = v131;
                }
                if (v131 <= v138) {
                  float v110 = v141;
                }
                if (v132 <= v136) {
                  float v142 = v136;
                }
                else {
                  float v142 = v132;
                }
                if (v110 <= v139) {
                  float v143 = v139;
                }
                else {
                  float v143 = v110;
                }
                if (v110 <= v142) {
                  float v110 = v142;
                }
                if (v142 <= v139) {
                  float v110 = v143;
                }
                double v144 = v133 + v137 + (float)(v138 - v139) * (float)(v138 - v139);
                if (!v126 || v94 - 1 == n || v319 - 1 == v126 || !n)
                {
                  v145.f64[1] = *((float64_t *)&_Q0 + 1);
                  v145.f64[0] = v144;
                  float64x2_t v97 = vaddq_f64(v97, v145);
                }
                double v98 = v98 + v144;
              }
            }
            v79 += v72;
            v81 += v80;
            ++v126;
          }
          while (v126 != v319);
          goto LABEL_230;
        }
        float v110 = 0.0;
        double v148 = 0.0;
        double v98 = 0.0;
        double v149 = 0.0;
        v97.f64[0] = 0.0;
        goto LABEL_238;
      }
LABEL_185:
      if (a3) {
        goto LABEL_186;
      }
      if (v310 > 1651925815)
      {
        if (v310 <= 1735549491)
        {
          if (v310 <= 1717855599)
          {
            if (v310 == 1651925816 || v310 == 1651926376) {
              goto LABEL_186;
            }
            int v201 = 1652056888;
          }
          else if (v310 > 1734501175)
          {
            if (v310 == 1734501176) {
              goto LABEL_186;
            }
            int v201 = 1734505012;
          }
          else
          {
            if (v310 == 1717855600) {
              goto LABEL_186;
            }
            int v201 = 1717856627;
          }
          goto LABEL_417;
        }
        if (v310 <= 1815162993)
        {
          if (v310 > 1751410031)
          {
            if (v310 == 1751410032) {
              goto LABEL_186;
            }
            int v201 = 1751411059;
          }
          else
          {
            if (v310 == 1735549492) {
              goto LABEL_186;
            }
            int v201 = 1735549752;
          }
          goto LABEL_417;
        }
        if (v310 > 1919379251)
        {
          if (v310 == 1932996149) {
            goto LABEL_186;
          }
          unsigned __int16 v230 = 26420;
LABEL_416:
          int v201 = v230 | 0x72670000;
LABEL_417:
          if (v310 != v201)
          {
LABEL_418:
            uint64_t v340 = v58;
            unint64_t v341 = v346.i64[1] + v313;
            unint64_t v342 = a5;
            unint64_t v343 = v62;
            uint64_t v336 = v61;
            unint64_t v337 = v344.i64[1] + v313;
            unint64_t v338 = a5;
            unint64_t v339 = v62;
            unint64_t v235 = v62;
            uint64_t v236 = v61;
            unint64_t v237 = v344.i64[1] + v313;
            unint64_t v323 = v344.i64[1] + v313;
            int v321 = _computePSNRForPlane(a1, (unint64_t *)&v340, a2, &v336, 0, &v304[v327], &v302[v327]);
            uint64_t v340 = v58;
            unint64_t v341 = v59;
            unint64_t v342 = a5;
            unint64_t v343 = v235;
            uint64_t v336 = v236;
            unint64_t v337 = v237;
            unint64_t v338 = a5;
            unint64_t v339 = v235;
            int v318 = _computePSNRForPlane(a1, (unint64_t *)&v340, a2, &v336, 1u, &v304[v327 + v296], &v302[v327 + v296]);
            uint64_t v340 = v58;
            unint64_t v341 = v59;
            int v91 = v304;
            unint64_t v342 = a5;
            unint64_t v343 = v235;
            uint64_t v336 = v236;
            unint64_t v337 = v323;
            unint64_t v338 = a5;
            unint64_t v339 = v235;
            int v125 = v321 | v318 | _computePSNRForPlane(a1, (unint64_t *)&v340, a2, &v336, 2u, &v304[2 * v296 + v327], &v302[2 * v296 + v327]) | v326;
            goto LABEL_187;
          }
LABEL_186:
          uint64_t v340 = v58;
          unint64_t v341 = v346.i64[1] + v313;
          int v91 = v304;
          unint64_t v342 = a5;
          unint64_t v343 = v62;
          uint64_t v336 = v61;
          unint64_t v337 = v344.i64[1] + v313;
          unint64_t v338 = a5;
          unint64_t v339 = v62;
          int v125 = _computePSNRForPlane(a1, (unint64_t *)&v340, a2, &v336, a4, &v304[v327], &v302[v327]) | v326;
LABEL_187:
          int v326 = v125;
LABEL_369:
          a5 = v305;
          uint64_t v90 = v303;
          unint64_t v54 = v309;
          uint64_t v92 = v328;
          goto LABEL_406;
        }
        if (v310 != 1815162994)
        {
          unsigned __int16 v230 = 25400;
          goto LABEL_416;
        }
        unint64_t v238 = v62;
        int v239 = (char *)CVPixelBufferGetBaseAddress(a1);
        uint16x8_t v240 = (char *)CVPixelBufferGetBaseAddress(a2);
        uint64_t v241 = CVPixelBufferGetPixelFormatType(a1);
        uint64_t v242 = CMPhotoGetBytesPerPixelForPixelFormat(v241);
        uint64_t v243 = CMPhotoGetBitDepthForPixelFormat(v241);
        int v244 = -16995;
        double v245 = 0.0;
        double v246 = 0.0;
        if (v242 && v243)
        {
          char v324 = v243;
          size_t v247 = CVPixelBufferGetBytesPerRow(a1);
          size_t v248 = CVPixelBufferGetBytesPerRow(a2);
          if (v238)
          {
            uint64_t v249 = 0;
            double v250 = 0.0;
            double v251 = 0.0;
            double v252 = 0.0;
            do
            {
              if (a5)
              {
                uint64_t v253 = 0;
                do
                {
                  unsigned int v254 = *(_DWORD *)&v239[4 * v253 + v242 * (v57.i64[0] + v328) + v247 * (v299 + v57.i64[1])];
                  unsigned int v255 = *(_DWORD *)&v240[4 * v253 + v242 * (v60.i64[0] + v328) + v248 * (v299 + v60.i64[1])];
                  int32x2_t v256 = vsub_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v254), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003), (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v255), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003));
                  v257.i64[0] = v256.i32[0];
                  v257.i64[1] = v256.i32[1];
                  float64x2_t v258 = vcvtq_f64_s64(v257);
                  double v259 = (double)(int)((v254 & 0x3FF) - (v255 & 0x3FF)) * (double)(int)((v254 & 0x3FF) - (v255 & 0x3FF))
                       + vaddvq_f64(vmulq_f64(v258, v258));
                  if (!v249 || a5 - 1 == v253 || v238 - 1 == v249 || !v253)
                  {
                    double v252 = v252 + v259;
                    double v251 = v251 + 3.0;
                  }
                  double v250 = v250 + v259;
                  ++v253;
                }
                while (a5 != v253);
              }
              ++v249;
            }
            while (v249 != v238);
            double v260 = (double)~(-1 << v324);
            if (v250 == 0.0)
            {
              double v246 = INFINITY;
            }
            else
            {
              double v325 = log10((double)~(-1 << v324));
              double v246 = log10(v250 / ((double)(v238 * a5) * 3.0)) * -10.0 + v325 * 20.0;
            }
            if (v252 == 0.0)
            {
              int v244 = 0;
              double v245 = INFINITY;
            }
            else
            {
              double v283 = log10(v260);
              long double v284 = log10(v252 / v251);
              int v244 = 0;
              double v245 = v284 * -10.0 + v283 * 20.0;
            }
          }
          else
          {
            int v244 = 0;
            double v245 = INFINITY;
            double v246 = INFINITY;
          }
        }
        int v91 = v304;
        a5 = v305;
        uint64_t v92 = v328;
        v304[v327] = v246;
        uint64_t v90 = v303;
        v302[v327] = v245;
        v326 |= v244;
        unint64_t v54 = v309;
        uint64_t v56 = v330;
      }
      else
      {
        if (v310 <= 1278555700)
        {
          if (v310 > 1278226735)
          {
            if (v297 > 6 || ((1 << v297) & 0x45) == 0) {
              goto LABEL_418;
            }
            goto LABEL_186;
          }
          if (v298 <= 0x30 && ((1 << v298) & 0x1400000000001) != 0 || v310 == 825306677) {
            goto LABEL_186;
          }
          int v201 = 825437747;
          goto LABEL_417;
        }
        if (v310 > 1650943795)
        {
          if (v310 > 1651519797)
          {
            if (v310 == 1651519798) {
              goto LABEL_186;
            }
            int v201 = 1651847472;
            goto LABEL_417;
          }
          if (v310 == 1650943796) {
            goto LABEL_186;
          }
          unsigned __int16 v225 = 28722;
          goto LABEL_397;
        }
        if (v310 != 1278555701)
        {
          if (v310 == 1647392369) {
            goto LABEL_186;
          }
          unsigned __int16 v225 = 25400;
LABEL_397:
          int v201 = v225 | 0x62670000;
          goto LABEL_417;
        }
        unint64_t v261 = v344.i64[1] + v313;
        uint64_t v262 = v61;
        unint64_t v263 = v62;
        int16x8_t v264 = (char *)CVPixelBufferGetBaseAddress(a1);
        int v265 = (char *)CVPixelBufferGetBaseAddress(a2);
        size_t v266 = CVPixelBufferGetBytesPerRow(a1);
        size_t v267 = CVPixelBufferGetBytesPerRow(a2);
        if (v263)
        {
          uint64_t v268 = 0;
          size_t v269 = &v265[2 * v262 + v267 * v261];
          size_t v270 = &v264[2 * v58 + v266 * v59];
          double v271 = 0.0;
          do
          {
            if (a5)
            {
              uint64_t v272 = 0;
              unint64_t v273 = a5;
              do
              {
                int v274 = v270[v272];
                unsigned int v275 = v270[v272 + 1];
                int v276 = v269[v272];
                unsigned int v277 = v269[v272 + 1];
                double v278 = (double)(int)((((v274 | (v275 << 8)) >> 5) & 0x3F) - (((v276 | (v277 << 8)) >> 5) & 0x3F));
                double v279 = v271
                     + (double)(int)(((v275 >> 2) & 0x3E) - ((v277 >> 2) & 0x3E))
                     * (double)(int)(((v275 >> 2) & 0x3E) - ((v277 >> 2) & 0x3E))
                     + v278 * v278;
                int v280 = 2 * (v274 & 0x1F) - 2 * (v276 & 0x1F);
                double v271 = (double)v280 * (double)v280 + v279;
                v272 += 2;
                --v273;
              }
              while (v273);
            }
            v270 += v266;
            v269 += v267;
            ++v268;
          }
          while (v268 != v263);
          uint64_t v90 = v303;
          int v91 = v304;
          uint64_t v92 = v328;
          uint64_t v56 = v330;
          uint64_t v281 = v327;
          if (v271 <= 0.0) {
            double v282 = INFINITY;
          }
          else {
            double v282 = log10(v271 / (double)(3 * v263 * a5)) * -10.0 + 35.986811;
          }
          unint64_t v54 = v309;
        }
        else
        {
          double v282 = INFINITY;
          uint64_t v90 = v303;
          int v91 = v304;
          unint64_t v54 = v309;
          uint64_t v92 = v328;
          uint64_t v56 = v330;
          uint64_t v281 = v327;
        }
        v91[v281] = v282;
        a5 = v305;
      }
LABEL_406:
      ++v56;
      uint64_t v55 = v92 + a5;
    }
    while (v56 != v54);
    uint64_t v53 = v314 + 1;
    v299 += a5;
  }
  while (v314 + 1 != v90);
  CVPixelBufferRef v285 = v293;
  a8 = v294;
  if (v326)
  {
    uint64_t v45 = 0;
    double v42 = 0.0;
    int v36 = 1;
    int v295 = 1;
    double v289 = 0.0;
    uint64_t v290 = a17;
    CVPixelBufferRef v286 = v302;
  }
  else
  {
    CVPixelBufferRef v286 = v302;
    if (v296)
    {
      uint64_t v287 = 0;
      uint64_t v288 = v292;
      if (v292 <= 1) {
        uint64_t v288 = 1;
      }
      double v289 = INFINITY;
      double v42 = INFINITY;
      do
      {
        if (v289 >= v91[v287]) {
          double v289 = v91[v287];
        }
        if (v42 >= v302[v287]) {
          double v42 = v302[v287];
        }
        ++v287;
      }
      while (v288 != v287);
      uint64_t v45 = 0;
      int v36 = 1;
      int v295 = 1;
    }
    else
    {
      uint64_t v45 = 0;
      int v36 = 1;
      double v42 = INFINITY;
      int v295 = 1;
      double v289 = INFINITY;
    }
LABEL_466:
    uint64_t v290 = a17;
  }
LABEL_467:
  if (a8) {
    *a8 = v289;
  }
  if (v290) {
    *uint64_t v290 = v42;
  }
  if (v36) {
    CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  }
  if (v295) {
    CVPixelBufferUnlockBaseAddress(a2, 1uLL);
  }
  free(v285);
  free(v286);
  return v45;
}

double CMPhotoComputeMinimumBlockPSNRForPixelBuffer(__CVBuffer *a1, __CVBuffer *a2, int a3, unint64_t a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  double v21 = 0.0;
  if (CGRectIsNull(*(CGRect *)&a5))
  {
    CGFloat v16 = *MEMORY[0x1E4F1DB20];
    CGFloat v17 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
    CGFloat v18 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
    CGFloat v19 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
  }
  else
  {
    CGFloat v16 = 0.0;
    CGFloat v17 = 0.0;
    CGFloat v18 = a7;
    CGFloat v19 = a8;
  }
  _computeMinimumBlockPSNRForPixelBuffer(a1, a2, a3, 0, a4, 0, 0, &v21, v16, v17, v18, v19, a5, a6, a7, a8, 0);
  return v21;
}

uint64_t CMPhotoComputePSNRForPixelBufferBlockBased(__CVBuffer *a1, __CVBuffer *a2, unsigned int a3, unint64_t a4, uint64_t a5, double *a6)
{
  uint64_t v15 = 0;
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (CVPixelBufferGetPixelFormatType(a2) == PixelFormatType)
  {
    if (a6)
    {
      double v13 = log2((double)a4);
      if ((unint64_t)exp2(ceil(v13)) == a4) {
        return _computeMinimumBlockPSNRForPixelBuffer(a1, a2, 1, a3, a4, a5, a6, (double *)&v15, *MEMORY[0x1E4F1DB20], *(CGFloat *)(MEMORY[0x1E4F1DB20] + 8), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 16), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 24), *MEMORY[0x1E4F1DB20], *(CGFloat *)(MEMORY[0x1E4F1DB20] + 8), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 16), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 24), 0);
      }
    }
  }
  return FigSignalErrorAt();
}

void CMPhotoComputePSNRForFloatingPointPixelBuffer(__CVBuffer *a1, __CVBuffer *a2, int a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, float a8)
{
  uint64_t v15 = a1;
  CVPixelBufferRef v55 = 0;
  CVPixelBufferRef pixelBuffer = 0;
  signed int PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  signed int v17 = PixelFormatType;
  if (PixelFormatType > 1651926375)
  {
    if (PixelFormatType <= 1751410031)
    {
      if (PixelFormatType == 1651926376 || PixelFormatType == 1717855600) {
        goto LABEL_21;
      }
      int v18 = 1717856627;
    }
    else if (PixelFormatType > 1751527983)
    {
      if (PixelFormatType == 1751527984) {
        goto LABEL_21;
      }
      int v18 = 1932996149;
    }
    else
    {
      if (PixelFormatType == 1751410032) {
        goto LABEL_21;
      }
      int v18 = 1751411059;
    }
  }
  else if (PixelFormatType <= 1278226535)
  {
    if (PixelFormatType == 825306677 || PixelFormatType == 825437747) {
      goto LABEL_21;
    }
    int v18 = 1278226534;
  }
  else if (PixelFormatType > 1380411456)
  {
    if (PixelFormatType == 1380411457) {
      goto LABEL_21;
    }
    int v18 = 1647719528;
  }
  else
  {
    if (PixelFormatType == 1278226536) {
      goto LABEL_21;
    }
    int v18 = 1380410945;
  }
  if (PixelFormatType != v18)
  {
LABEL_95:
    FigSignalErrorAt();
    goto LABEL_98;
  }
LABEL_21:
  signed int v19 = CVPixelBufferGetPixelFormatType(a2);
  signed int v20 = v19;
  if (v19 <= 1651926375)
  {
    if (v19 <= 1380410944)
    {
      if (v19 == 1278226534) {
        goto LABEL_36;
      }
      int v21 = 1278226536;
    }
    else
    {
      if (v19 == 1380410945 || v19 == 1380411457) {
        goto LABEL_36;
      }
      int v21 = 1647719528;
    }
  }
  else if (v19 > 1751410031)
  {
    if (v19 == 1751410032 || v19 == 1751411059) {
      goto LABEL_36;
    }
    int v21 = 1751527984;
  }
  else
  {
    if (v19 == 1651926376 || v19 == 1717855600) {
      goto LABEL_36;
    }
    int v21 = 1717856627;
  }
  if (v19 != v21 && v19 != 825306677 && v19 != 825437747 && v19 != 1932996149) {
    goto LABEL_95;
  }
LABEL_36:
  if (v17 <= 1651926375)
  {
    if (v17 != 1278226536 && v17 != 1380411457)
    {
      int v23 = 1647719528;
      goto LABEL_46;
    }
  }
  else if (v17 > 1751411058)
  {
    if (v17 != 1751527984)
    {
      unsigned __int16 v22 = 26995;
      goto LABEL_45;
    }
  }
  else if (v17 != 1651926376)
  {
    unsigned __int16 v22 = 25968;
LABEL_45:
    int v23 = v22 | 0x68640000;
LABEL_46:
    if (v17 != v23) {
      goto LABEL_49;
    }
  }
  if (CMPhotoCreateFullPrecisionPixelBufferFromHalfPrecisionSource(v15, 0, a3, 0x7FFF, 2143289344, &pixelBuffer))goto LABEL_98; {
  uint64_t v15 = pixelBuffer;
  }
  signed int v17 = CVPixelBufferGetPixelFormatType(pixelBuffer);
LABEL_49:
  if (v20 <= 1651926375)
  {
    if (v20 != 1278226536 && v20 != 1380411457)
    {
      int v25 = 1647719528;
      goto LABEL_59;
    }
  }
  else if (v20 > 1751411058)
  {
    if (v20 != 1751527984)
    {
      unsigned __int16 v24 = 26995;
      goto LABEL_58;
    }
  }
  else if (v20 != 1651926376)
  {
    unsigned __int16 v24 = 25968;
LABEL_58:
    int v25 = v24 | 0x68640000;
LABEL_59:
    if (v20 != v25) {
      goto LABEL_62;
    }
  }
  if (CMPhotoCreateFullPrecisionPixelBufferFromHalfPrecisionSource(a2, 0, a3, 0x7FFF, 2143289344, &v55)) {
    goto LABEL_98;
  }
  a2 = v55;
  signed int v20 = CVPixelBufferGetPixelFormatType(v55);
LABEL_62:
  if (v17 != v20) {
    goto LABEL_95;
  }
  if (!CVPixelBufferLockBaseAddress(v15, 1uLL))
  {
    if (CVPixelBufferLockBaseAddress(a2, 1uLL))
    {
      CVPixelBufferUnlockBaseAddress(v15, 1uLL);
      goto LABEL_98;
    }
    v61.origin.x = a4;
    v61.origin.y = a5;
    v61.size.double width = a6;
    v61.size.double height = a7;
    if (CGRectIsNull(v61))
    {
      CGFloat v26 = *MEMORY[0x1E4F1DB20];
      CGFloat v27 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
      CGFloat v28 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
      CGFloat v29 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
    }
    else
    {
      CGFloat v26 = 0.0;
      CGFloat v27 = 0.0;
      CGFloat v28 = a6;
      CGFloat v29 = a7;
    }
    if (v17 == 825306677 || v17 == 1932996149 || v17 == 825437747)
    {
      uint64x2_t v59 = 0u;
      long long v60 = 0u;
      _computeCropRectForPixelBuffer(v15, &v59, v26, v27, v28, v29);
      uint64x2_t v57 = 0u;
      long long v58 = 0u;
      _computeCropRectForPixelBuffer(a2, &v57, a4, a5, a6, a7);
      uint64_t v30 = v60;
      if ((void)v60 != (void)v58) {
        goto LABEL_97;
      }
      uint64_t v31 = *((void *)&v60 + 1);
      if (*((void *)&v60 + 1) != *((void *)&v58 + 1)) {
        goto LABEL_97;
      }
      BaseAddresCGColorSpaceRef s = (char *)CVPixelBufferGetBaseAddress(v15);
      int v33 = (char *)CVPixelBufferGetBaseAddress(a2);
      size_t BytesPerRow = CVPixelBufferGetBytesPerRow(v15);
      size_t v35 = CVPixelBufferGetBytesPerRow(a2);
      if (!v31) {
        goto LABEL_97;
      }
      uint64_t v36 = 0;
      unint64_t v37 = 0;
      unsigned __int16 v38 = &v33[2 * v57.i64[0] + v57.i64[1] * v35];
      int v39 = &BaseAddress[2 * v59.i64[0] + v59.i64[1] * BytesPerRow];
      do
      {
        if (v30)
        {
          for (uint64_t i = 0; i != v30; ++i)
          {
            int v41 = *(unsigned __int16 *)&v39[2 * i] - *(unsigned __int16 *)&v38[2 * i];
            v37 += (v41 * v41);
          }
        }
        v39 += BytesPerRow;
        v38 += v35;
        ++v36;
      }
      while (v36 != v31);
      if (!v37) {
        goto LABEL_97;
      }
      log10(a8);
      double v42 = (double)v37 / (double)(unint64_t)(v31 * v30);
    }
    else
    {
      uint64x2_t v59 = 0u;
      long long v60 = 0u;
      _computeCropRectForPixelBuffer(v15, &v59, v26, v27, v28, v29);
      uint64x2_t v57 = 0u;
      long long v58 = 0u;
      _computeCropRectForPixelBuffer(a2, &v57, a4, a5, a6, a7);
      uint64_t v43 = v60;
      if ((void)v60 != (void)v58) {
        goto LABEL_97;
      }
      uint64_t v44 = *((void *)&v60 + 1);
      if (*((void *)&v60 + 1) != *((void *)&v58 + 1)) {
        goto LABEL_97;
      }
      uint64_t v45 = (char *)CVPixelBufferGetBaseAddress(v15);
      uint64_t v46 = (char *)CVPixelBufferGetBaseAddress(a2);
      size_t v47 = CVPixelBufferGetBytesPerRow(v15);
      size_t v48 = CVPixelBufferGetBytesPerRow(a2);
      if (!v44) {
        goto LABEL_97;
      }
      uint64_t v49 = 0;
      unsigned int v50 = 0;
      size_t v51 = &v46[4 * v57.i64[0] + v57.i64[1] * v48];
      unint64_t v52 = &v45[4 * v59.i64[0] + v59.i64[1] * v47];
      double v53 = 0.0;
      do
      {
        if (v43)
        {
          for (uint64_t j = 0; j != v43; ++j)
          {
            double v53 = v53
                + (float)(*(float *)&v52[4 * j] - *(float *)&v51[4 * j])
                * (float)(*(float *)&v52[4 * j] - *(float *)&v51[4 * j]);
            ++v50;
          }
        }
        v52 += v47;
        v51 += v48;
        ++v49;
      }
      while (v49 != v44);
      if (v53 <= 0.0) {
        goto LABEL_97;
      }
      log10(a8);
      double v42 = v53 / (double)v50;
    }
    log10(v42);
LABEL_97:
    CVPixelBufferUnlockBaseAddress(v15, 1uLL);
    CVPixelBufferUnlockBaseAddress(a2, 1uLL);
  }
LABEL_98:
  if (pixelBuffer) {
    CFRelease(pixelBuffer);
  }
  if (v55) {
    CFRelease(v55);
  }
}

void CMPhotoComputeSSIMForPixelBuffer(__CVBuffer *a1, __CVBuffer *a2, __CVBuffer *a3, int a4, double *a5, double *a6, double *a7, CGFloat a8, CGFloat a9, CGFloat a10, CGFloat a11)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  double v64 = 0.0;
  float64x2_t v63 = 0u;
  memset(v62, 0, sizeof(v62));
  v59[0] = 0;
  v59[1] = v59;
  v59[2] = 0x2000000000;
  v59[3] = v62;
  signed int PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  int v23 = PixelFormatType;
  if (PixelFormatType <= 1380411456)
  {
    if (PixelFormatType > 1278226487)
    {
      if ((PixelFormatType - 1278226736) <= 6 && ((1 << (PixelFormatType - 48)) & 0x45) != 0
        || PixelFormatType == 1278226488)
      {
        a4 = 1;
        goto LABEL_24;
      }
      int v24 = 1380410945;
    }
    else
    {
      if (PixelFormatType == 875704422 || PixelFormatType == 875704438) {
        goto LABEL_24;
      }
      int v24 = 1111970369;
    }
  }
  else if (PixelFormatType <= 1937125935)
  {
    if (PixelFormatType > 1815491697)
    {
      if (PixelFormatType == 1815491698) {
        goto LABEL_24;
      }
      int v24 = 1936077360;
    }
    else
    {
      if (PixelFormatType == 1380411457) {
        goto LABEL_24;
      }
      int v24 = 1751527984;
    }
  }
  else if (PixelFormatType <= 1953903151)
  {
    if (PixelFormatType == 1937125936) {
      goto LABEL_24;
    }
    int v24 = 1952854576;
  }
  else
  {
    if (PixelFormatType == 1953903152 || PixelFormatType == 2016686640) {
      goto LABEL_24;
    }
    int v24 = 2019963440;
  }
  if (PixelFormatType != v24)
  {
    int v25 = FigSignalErrorAt();
LABEL_72:
    int v33 = v25;
    if (!a5) {
      goto LABEL_59;
    }
    goto LABEL_56;
  }
LABEL_24:
  int v25 = CVPixelBufferLockBaseAddress(a1, 1uLL);
  if (v25) {
    goto LABEL_72;
  }
  CVReturn v26 = CVPixelBufferLockBaseAddress(a2, 1uLL);
  if (v26)
  {
    int v33 = v26;
    size_t v48 = a1;
    CVPixelBufferLockFlags v49 = 1;
    goto LABEL_54;
  }
  BOOL v27 = a3 != 0;
  if (a3)
  {
    CVReturn v28 = CVPixelBufferLockBaseAddress(a3, 0);
    if (v28)
    {
      int v33 = v28;
      BOOL v27 = 0;
      goto LABEL_52;
    }
  }
  v66.origin.x = a8;
  v66.origin.y = a9;
  v66.size.double width = a10;
  v66.size.double height = a11;
  CGFloat v29 = 0.0;
  CGFloat v30 = 0.0;
  CGFloat v31 = a10;
  CGFloat v32 = a11;
  if (CGRectIsNull(v66))
  {
    CGFloat v29 = *MEMORY[0x1E4F1DB20];
    CGFloat v30 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
    CGFloat v31 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
    CGFloat v32 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
  }
  if (!a4)
  {
    if (v23 > 1380411456)
    {
      if (v23 == 1815491698) {
        goto LABEL_38;
      }
      unsigned __int16 v34 = 26689;
    }
    else
    {
      if (v23 == 1111970369) {
        goto LABEL_38;
      }
      unsigned __int16 v34 = 26177;
    }
    if (v23 != (v34 | 0x52470000))
    {
      double v53 = CMPhotoComputeSSIMForPixelBuffer_queue;
      if (!CMPhotoComputeSSIMForPixelBuffer_queue)
      {
        double v53 = dispatch_queue_create("com.apple.coremedia.psnr", MEMORY[0x1E4F14430]);
        CMPhotoComputeSSIMForPixelBuffer_queue = (uint64_t)v53;
        if (!v53)
        {
          int v33 = -16991;
          goto LABEL_52;
        }
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = *(void *)"";
      block[2] = __CMPhotoComputeSSIMForPixelBuffer_block_invoke;
      block[3] = &unk_1E5E2E440;
      *(CGFloat *)&void block[6] = v29;
      *(CGFloat *)&block[7] = v30;
      *(CGFloat *)&void block[8] = v31;
      *(CGFloat *)&block[9] = v32;
      void block[10] = a2;
      *(CGFloat *)&block[11] = a8;
      *(CGFloat *)&block[12] = a9;
      *(CGFloat *)&block[13] = a10;
      *(CGFloat *)&block[14] = a11;
      block[15] = a3;
      void block[4] = v59;
      void block[5] = a1;
      dispatch_async(v53, block);
      v57[0] = MEMORY[0x1E4F143A8];
      v57[1] = *(void *)"";
      v57[2] = __CMPhotoComputeSSIMForPixelBuffer_block_invoke_2;
      v57[3] = &unk_1E5E2E468;
      *(CGFloat *)&v57[6] = v29;
      *(CGFloat *)&v57[7] = v30;
      *(CGFloat *)&v57[8] = v31;
      *(CGFloat *)&v57[9] = v32;
      v57[10] = a2;
      *(CGFloat *)&v57[11] = a8;
      *(CGFloat *)&v57[12] = a9;
      *(CGFloat *)&v57[13] = a10;
      *(CGFloat *)&v57[14] = a11;
      v57[15] = a3;
      v57[4] = v59;
      v57[5] = a1;
      dispatch_async((dispatch_queue_t)CMPhotoComputeSSIMForPixelBuffer_queue, v57);
      v56[0] = MEMORY[0x1E4F143A8];
      v56[1] = *(void *)"";
      v56[2] = __CMPhotoComputeSSIMForPixelBuffer_block_invoke_3;
      v56[3] = &unk_1E5E2E490;
      *(CGFloat *)&v56[6] = v29;
      *(CGFloat *)&v56[7] = v30;
      *(CGFloat *)&v56[8] = v31;
      *(CGFloat *)&v56[9] = v32;
      v56[10] = a2;
      *(CGFloat *)&v56[11] = a8;
      *(CGFloat *)&v56[12] = a9;
      *(CGFloat *)&v56[13] = a10;
      *(CGFloat *)&v56[14] = a11;
      v56[15] = a3;
      v56[4] = v59;
      v56[5] = a1;
      dispatch_async((dispatch_queue_t)CMPhotoComputeSSIMForPixelBuffer_queue, v56);
      dispatch_barrier_sync((dispatch_queue_t)CMPhotoComputeSSIMForPixelBuffer_queue, &__block_literal_global_2);
      int v33 = 0;
      __asm
      {
        FMOV            V2.2D, #6.0
        FMOV            V1.2D, #0.125
      }
      v62[0] = vmulq_f64(vaddq_f64(vmlaq_f64(*(float64x2_t *)((char *)&v62[1] + 8), _Q2, v62[0]), v63), _Q1);
      double v47 = (v62[2].f64[1] + v62[1].f64[0] * 6.0 + v64) * 0.125;
      goto LABEL_51;
    }
LABEL_38:
    CVPixelBufferRef v60 = 0;
    CVPixelBufferRef v61 = 0;
    if (!_createMonochromeBufferFromRGB(a1, a2, &v61, &v60, v29, v30, v31, v32, a8, a9, a10, a11)
      && !CVPixelBufferLockBaseAddress(v61, 0))
    {
      if (CVPixelBufferLockBaseAddress(v60, 0))
      {
        int v41 = &v61;
      }
      else
      {
        uint64_t v35 = 0;
        CGFloat v36 = *MEMORY[0x1E4F1DB20];
        CGFloat v37 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
        CGFloat v38 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
        CGFloat v39 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
        OSType v40 = v62;
        do
        {
          if (_extractRGBComponentAndCopyIntoMonochromeBuffer(a1, a2, v61, v60, v35)) {
            break;
          }
          _computeSSIMForPlane(v61, v60, 0, 0, (uint64_t)v40, v36, v37, v38, v39, v36, v37, v38, v39);
          ++v35;
          OSType v40 = (float64x2_t *)((char *)v40 + 24);
        }
        while (v35 != 3);
        CVPixelBufferUnlockBaseAddress(v61, 0);
        int v41 = &v60;
      }
      CVPixelBufferUnlockBaseAddress(*v41, 0);
    }
    if (v61) {
      CFRelease(v61);
    }
    if (v60) {
      CFRelease(v60);
    }
    int v33 = 0;
    __asm { FMOV            V1.2D, #3.0 }
    v62[0] = vdivq_f64(vaddq_f64(vaddq_f64(v62[0], *(float64x2_t *)((char *)&v62[1] + 8)), v63), _Q1);
    double v47 = (v62[1].f64[0] + v62[2].f64[1] + v64) / 3.0;
LABEL_51:
    v62[1].f64[0] = v47;
    goto LABEL_52;
  }
  _computeSSIMForPlane(a1, a2, 0, 0, (uint64_t)v62, v29, v30, v31, v32, a8, a9, a10, a11);
  int v33 = 0;
LABEL_52:
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(a2, 1uLL);
  if (!v27) {
    goto LABEL_55;
  }
  size_t v48 = a3;
  CVPixelBufferLockFlags v49 = 0;
LABEL_54:
  CVPixelBufferUnlockBaseAddress(v48, v49);
LABEL_55:
  if (!a5) {
    goto LABEL_59;
  }
LABEL_56:
  double v50 = v62[0].f64[0];
  if (v33) {
    double v50 = 0.0;
  }
  *a5 = v50;
LABEL_59:
  if (a6)
  {
    double v51 = v62[0].f64[1];
    if (v33) {
      double v51 = 0.0;
    }
    *a6 = v51;
  }
  if (a7)
  {
    double v52 = v62[1].f64[0];
    if (v33) {
      double v52 = 0.0;
    }
    *a7 = v52;
  }
  _Block_object_dispose(v59, 8);
}

void _computeSSIMForPlane(__CVBuffer *a1, __CVBuffer *a2, __CVBuffer *a3, unsigned int a4, uint64_t a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12, CGFloat a13)
{
  uint64_t v163 = *MEMORY[0x1E4F143B8];
  uint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  int v27 = PixelFormatType;
  uint64_t BitDepthForPixelFormat = CMPhotoGetBitDepthForPixelFormat(PixelFormatType);
  LODWORD(v154) = 1;
  if (v27 <= 1651926375)
  {
    if (v27 == 1278226536 || v27 == 1380411457) {
      goto LABEL_12;
    }
    int v29 = 1647719528;
  }
  else if (v27 > 1751411058)
  {
    if (v27 == 1751411059) {
      goto LABEL_12;
    }
    int v29 = 1751527984;
  }
  else
  {
    if (v27 == 1651926376) {
      goto LABEL_12;
    }
    int v29 = 1751410032;
  }
  if (v27 != v29) {
    LODWORD(v154) = 0;
  }
LABEL_12:
  HIDWORD(v154) = 1;
  unint64_t v153 = BitDepthForPixelFormat;
  if (v27 > 1717855599)
  {
    if (v27 == 1717855600) {
      goto LABEL_19;
    }
    int v30 = 1717856627;
  }
  else
  {
    if (v27 == 1278226534) {
      goto LABEL_19;
    }
    int v30 = 1380410945;
  }
  if (v27 != v30) {
    HIDWORD(v154) = 0;
  }
LABEL_19:
  size_t v31 = a4 != 0;
  if (a4) {
    uint64_t v32 = 2;
  }
  else {
    uint64_t v32 = 1;
  }
  uint64_t v162 = 0;
  BOOL v152 = a4 > 1;
  memset(v161, 0, sizeof(v161));
  if (a4 > 2) {
    goto LABEL_88;
  }
  int64x2_t v159 = 0uLL;
  long long v160 = 0uLL;
  _computeCropRectForPixelBuffer(a1, (uint64x2_t *)&v159, a6, a7, a8, a9);
  int64x2_t v157 = 0u;
  long long v158 = 0u;
  _computeCropRectForPixelBuffer(a2, (uint64x2_t *)&v157, a10, a11, a12, a13);
  unint64_t v33 = v160;
  if ((void)v160 != (void)v158) {
    goto LABEL_88;
  }
  unint64_t v34 = *((void *)&v160 + 1);
  if (*((void *)&v160 + 1) != *((void *)&v158 + 1)) {
    goto LABEL_88;
  }
  if (a3)
  {
    BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(a3, 0);
    size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a3, 0);
    uint64x2_t v155 = 0u;
    long long v156 = 0u;
    _computeCropRectForPixelBuffer(a3, &v155, *MEMORY[0x1E4F1DB20], *(CGFloat *)(MEMORY[0x1E4F1DB20] + 8), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 16), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 24));
    if (v156 != __PAIR128__(v34, v33))
    {
LABEL_88:
      *(void *)(a5 + 8) = 0;
      *(void *)(a5 + 16) = 0;
      double v139 = 0.0;
      goto LABEL_89;
    }
    if (!a4) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  size_t BytesPerRowOfPlane = 0;
  BaseAddressOfPlane = 0;
  if (a4)
  {
LABEL_28:
    unint64_t v33 = (v33 + 1) >> 1;
    unint64_t v34 = (v34 + 1) >> 1;
    *(void *)&long long v160 = v33;
    *((void *)&v160 + 1) = v34;
    int64x2_t v36 = vdupq_n_s64(1uLL);
    int64x2_t v159 = (int64x2_t)vshrq_n_u64((uint64x2_t)vaddq_s64(v159, v36), 1uLL);
    int64x2_t v157 = (int64x2_t)vshrq_n_u64((uint64x2_t)vaddq_s64(v157, v36), 1uLL);
  }
LABEL_29:
  uint64_t v150 = a5;
  size_t v148 = CVPixelBufferGetBytesPerRowOfPlane(a1, a4 != 0);
  size_t v149 = CVPixelBufferGetBytesPerRowOfPlane(a2, a4 != 0);
  CGFloat v37 = (char *)malloc_type_calloc(360 * v33 + 2880, 1uLL, 0x927E5FDuLL);
  uint64_t v38 = 0;
  CGFloat v39 = v37 + 320;
  do
  {
    *(void *)((char *)v161 + v38) = v39;
    v38 += 8;
    v39 += 40 * v33 + 320;
  }
  while (v38 != 72);
  OSType v40 = CVPixelBufferGetPixelFormatType(a1);
  unint64_t BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(v40);
  uint64_t v41 = CVPixelBufferGetPixelFormatType(a1);
  uint64_t v42 = CMPhotoGetBitDepthForPixelFormat(v41);
  int64x2_t v145 = v159;
  int64x2_t v43 = v157;
  float v146 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, v31);
  double v144 = (char *)CVPixelBufferGetBaseAddressOfPlane(a2, v31);
  float v143 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, v31);
  float v142 = (char *)CVPixelBufferGetBaseAddressOfPlane(a2, v31);
  float v141 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, v31);
  uint64_t v44 = (char *)CVPixelBufferGetBaseAddressOfPlane(a2, v31);
  uint64_t v45 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, v31);
  uint64_t v46 = (char *)CVPixelBufferGetBaseAddressOfPlane(a2, v31);
  if (!v34)
  {
    free(v37);
    a5 = v150;
    goto LABEL_88;
  }
  uint64_t v140 = v37;
  unint64_t v49 = 0;
  unint64_t v50 = 0;
  size_t v51 = (v43.i64[0] << v31) + v152 + v43.i64[1] * v149 / BytesPerPixelForPixelFormat;
  double v52 = &v46[2 * v51];
  size_t v53 = (v145.i64[0] << v31) + v152 + v145.i64[1] * v148 / BytesPerPixelForPixelFormat;
  unint64_t v54 = &v45[2 * v53];
  CVPixelBufferRef v55 = (float *)&v44[4 * v51];
  uint64_t v56 = (float *)&v141[4 * v53];
  uint64x2_t v57 = &v142[2 * v51];
  long long v58 = &v143[2 * v53];
  uint64x2_t v59 = &v144[v51];
  CVPixelBufferRef v60 = &v146[v53];
  double v61 = (double)(1 << (16 - v42));
  double v62 = dbl_1AB9D8540[v153 > 8];
  double v63 = dbl_1AB9D8550[v153 > 8];
  size_t v64 = v148 / BytesPerPixelForPixelFormat;
  size_t v65 = BytesPerRowOfPlane << v31;
  double v66 = 0.0;
  double v67 = 0.0;
  size_t v68 = v149 / BytesPerPixelForPixelFormat;
  do
  {
    unsigned int v69 = ((int)v49 + 8) % 9u;
    unsigned int v70 = v49 % 9;
    if (HIDWORD(v154))
    {
      if (v33)
      {
        unint64_t v71 = (double *)*((void *)v161 + v70);
        size_t v72 = (double *)*((void *)v161 + v69);
        unint64_t v73 = v33;
        int32x2_t v74 = v56;
        uint64_t v75 = v55;
        do
        {
          double v76 = *v74;
          _D16 = *v75;
          double *v71 = *v72 + v76;
          v71[1] = v72[1] + _D16;
          v71[2] = v72[2] + v76 * v76;
          v71[3] = v72[3] + _D16 * _D16;
          double v47 = v72[4] + v76 * _D16;
          v71[4] = v47;
          v74 += v32;
          v75 += v32;
          v72 += 5;
          v71 += 5;
          --v73;
        }
        while (v73);
      }
    }
    else if (v154)
    {
      if (v33)
      {
        int v77 = (double *)*((void *)v161 + v70);
        unint64_t v78 = (double *)*((void *)v161 + v69);
        unint64_t v79 = v33;
        size_t v80 = v54;
        BOOL v81 = v52;
        do
        {
          _H7 = *(_WORD *)v80;
          __asm { FCVT            D7, H7 }
          _H16 = *(_WORD *)v81;
          __asm { FCVT            D16, H16 }
          *int v77 = *v78 + _D7;
          v77[1] = v78[1] + _D16;
          v77[2] = v78[2] + _D7 * _D7;
          v77[3] = v78[3] + _D16 * _D16;
          double v47 = v78[4] + _D7 * _D16;
          v77[4] = v47;
          v80 += 2 * v32;
          v81 += 2 * v32;
          v78 += 5;
          v77 += 5;
          --v79;
        }
        while (v79);
      }
    }
    else if (v153 < 9)
    {
      if (v33)
      {
        uint64_t v95 = (double *)*((void *)v161 + v70);
        int v96 = (double *)*((void *)v161 + v69);
        unint64_t v97 = v33;
        double v98 = v60;
        int v99 = v59;
        do
        {
          LOBYTE(v47) = *v98;
          double v100 = (double)*(unint64_t *)&v47;
          LOBYTE(_D16) = *v99;
          _D16 = (double)*(unint64_t *)&_D16;
          *uint64_t v95 = *v96 + v100;
          v95[1] = v96[1] + _D16;
          v95[2] = v96[2] + v100 * v100;
          v95[3] = v96[3] + _D16 * _D16;
          v98 += v32;
          double v47 = v96[4] + v100 * _D16;
          v95[4] = v47;
          v99 += v32;
          v96 += 5;
          v95 += 5;
          --v97;
        }
        while (v97);
      }
    }
    else if (v33)
    {
      int v89 = (double *)*((void *)v161 + v70);
      uint64_t v90 = (double *)*((void *)v161 + v69);
      unint64_t v91 = v33;
      uint64_t v92 = v57;
      uint64_t v93 = v58;
      do
      {
        LOWORD(v47) = *(_WORD *)v93;
        double v94 = (double)*(unint64_t *)&v47;
        LOWORD(_D16) = *(_WORD *)v92;
        _D16 = (double)*(unint64_t *)&_D16;
        if (v42 != 16)
        {
          double v94 = v94 / v61;
          _D16 = _D16 / v61;
        }
        *int v89 = v94 + *v90;
        v89[1] = _D16 + v90[1];
        unint64_t v89[2] = v90[2] + v94 * v94;
        v89[3] = v90[3] + _D16 * _D16;
        double v47 = v90[4] + v94 * _D16;
        v89[4] = v47;
        v93 += 2 * v32;
        v92 += 2 * v32;
        v90 += 5;
        v89 += 5;
        --v91;
      }
      while (v91);
    }
    unint64_t v101 = v49 + 1;
    if (v49 >= 7)
    {
      uint64_t v102 = *((void *)v161 + v101 % 9);
      if (v154)
      {
        if (v33)
        {
          int v103 = (float64x2_t *)*((void *)v161 + v70);
          unint64_t v104 = v33;
          double v105 = (float64x2_t *)*((void *)v161 + v101 % 9);
          do
          {
            float64x2_t v106 = v105[1];
            *double v105 = vsubq_f64(*v103, *v105);
            v105[1] = vsubq_f64(v103[1], v106);
            v105[2].f64[0] = v103[2].f64[0] - v105[2].f64[0];
            int v103 = (float64x2_t *)((char *)v103 + 40);
            double v105 = (float64x2_t *)((char *)v105 + 40);
            --v104;
          }
          while (v104);
          unint64_t v107 = 0;
          uint64_t v108 = v102 - 320;
          _Q18 = 0uLL;
          double v47 = 0.0;
          _D16 = 0.0;
          double v110 = 0.0;
          double v111 = 0.0;
          int v112 = BaseAddressOfPlane;
          _Q20 = 0uLL;
          do
          {
            double v111 = v111 + *(double *)(v108 + 320) - *(double *)v108;
            _Q20 = vaddq_f64(_Q20, vsubq_f64(*(float64x2_t *)(v108 + 344), *(float64x2_t *)(v108 + 24)));
            _Q18 = vaddq_f64(_Q18, vsubq_f64(*(float64x2_t *)(v108 + 328), *(float64x2_t *)(v108 + 8)));
            if (v107 >= 7)
            {
              _D25 = 0x4050000000000000;
              __asm
              {
                FMLA            D24, D25, V18.D[1]
                FMLA            D27, D25, V20.D[1]
              }
              double v117 = (v111 * _Q18.f64[0] * 2.0 + 0.4096)
                   / (v111 * v111 + vmuld_n_f64(_Q18.f64[0], _Q18.f64[0]) + 0.4096);
              double v118 = _D24 + vmlad_n_f64(-(_Q18.f64[0] * _Q18.f64[0]), 64.0, _Q20.f64[0]) + 3.6864;
              double v119 = (_D27 * 2.0 + 3.6864) / v118;
              if (v112)
              {
                LOBYTE(v118) = *v112;
                double v120 = (double)*(unint64_t *)&v118;
                _D16 = _D16 + v120 * v117;
                double v47 = v47 + v120 * v119;
                double v110 = v110 + v120;
                v112 += v32;
              }
              else
              {
                _D16 = _D16 + v117;
                double v47 = v47 + v119;
              }
            }
            v108 += 40;
            ++v107;
          }
          while (v33 != v107);
          goto LABEL_76;
        }
      }
      else if (v33)
      {
        int v121 = (float64x2_t *)*((void *)v161 + v70);
        unint64_t v122 = v33;
        CFDictionaryRef v123 = (float64x2_t *)*((void *)v161 + v101 % 9);
        do
        {
          float64x2_t v124 = v123[1];
          *CFDictionaryRef v123 = vsubq_f64(*v121, *v123);
          v123[1] = vsubq_f64(v121[1], v124);
          v123[2].f64[0] = v121[2].f64[0] - v123[2].f64[0];
          int v121 = (float64x2_t *)((char *)v121 + 40);
          CFDictionaryRef v123 = (float64x2_t *)((char *)v123 + 40);
          --v122;
        }
        while (v122);
        unint64_t v125 = 0;
        uint64_t v126 = v102 - 320;
        _Q18 = 0uLL;
        double v47 = 0.0;
        _D16 = 0.0;
        double v110 = 0.0;
        double v128 = 0.0;
        int v112 = BaseAddressOfPlane;
        _Q20 = 0uLL;
        do
        {
          double v128 = v128 + *(double *)(v126 + 320) - *(double *)v126;
          _Q20 = vaddq_f64(_Q20, vsubq_f64(*(float64x2_t *)(v126 + 344), *(float64x2_t *)(v126 + 24)));
          _Q18 = vaddq_f64(_Q18, vsubq_f64(*(float64x2_t *)(v126 + 328), *(float64x2_t *)(v126 + 8)));
          if (v125 >= 7)
          {
            _D25 = 0x4050000000000000;
            __asm
            {
              FMLA            D24, D25, V18.D[1]
              FMLA            D27, D25, V20.D[1]
            }
            double v133 = (v62 + v128 * _Q18.f64[0] * 2.0) / (v62 + v128 * v128 + vmuld_n_f64(_Q18.f64[0], _Q18.f64[0]));
            double v134 = v63 + _D24 + vmlad_n_f64(-(_Q18.f64[0] * _Q18.f64[0]), 64.0, _Q20.f64[0]);
            double v135 = (v63 + _D27 * 2.0) / v134;
            if (v112)
            {
              LOBYTE(v134) = *v112;
              double v136 = (double)*(unint64_t *)&v134;
              _D16 = _D16 + v136 * v133;
              double v47 = v47 + v136 * v135;
              double v110 = v110 + v136;
              v112 += v32;
            }
            else
            {
              _D16 = _D16 + v133;
              double v47 = v47 + v135;
            }
          }
          v126 += 40;
          ++v125;
        }
        while (v33 != v125);
        goto LABEL_76;
      }
      double v110 = 0.0;
      int v112 = BaseAddressOfPlane;
      _D16 = 0.0;
      double v47 = 0.0;
LABEL_76:
      if (!v112) {
        double v110 = (double)(v33 - 7);
      }
      unint64_t v50 = (unint64_t)(v110 + (double)v50);
      double v67 = v67 + _D16;
      double v66 = v66 + v47;
    }
    v58 += 2 * v64;
    v57 += 2 * v68;
    v56 += v64;
    v55 += v68;
    v60 += v64;
    v59 += v68;
    v54 += 2 * v64;
    if (BaseAddressOfPlane) {
      BaseAddressOfPlane += v65;
    }
    else {
      BaseAddressOfPlane = 0;
    }
    unint64_t v49 = v101;
    v52 += 2 * v68;
  }
  while (v101 != v34);
  free(v140);
  a5 = v150;
  if (!v50) {
    goto LABEL_88;
  }
  double v137 = v67 / (double)v50;
  double v138 = v66 / (double)v50;
  *(double *)(v150 + 8) = v137;
  *(double *)(v150 + 16) = v138;
  double v139 = v137 * v138;
LABEL_89:
  *(double *)a5 = v139;
}

void __CMPhotoComputeSSIMForPixelBuffer_block_invoke(uint64_t a1)
{
}

void __CMPhotoComputeSSIMForPixelBuffer_block_invoke_2(uint64_t a1)
{
}

void __CMPhotoComputeSSIMForPixelBuffer_block_invoke_3(uint64_t a1)
{
}

uint64_t CMPhotoComputeSSIMForPixelBufferBlockBased(__CVBuffer *a1, __CVBuffer *a2, unsigned int a3, unint64_t a4, size_t a5, double *a6)
{
  uint64_t v11 = a1;
  v48[3] = *(double *)MEMORY[0x1E4F143B8];
  signed int PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (CVPixelBufferGetPixelFormatType(a2) != PixelFormatType) {
    goto LABEL_58;
  }
  if (PixelFormatType > 1380410944)
  {
    if (PixelFormatType != 1380410945 && PixelFormatType != 1380411457)
    {
      int v13 = 1815491698;
LABEL_9:
      if (PixelFormatType != v13) {
        goto LABEL_58;
      }
    }
  }
  else if (PixelFormatType != 875704422 && PixelFormatType != 875704438)
  {
    int v13 = 1111970369;
    goto LABEL_9;
  }
  if (a6)
  {
    double v14 = log2((double)a4);
    if ((unint64_t)exp2(ceil(v14)) == a4)
    {
      uint64_t v15 = CVPixelBufferLockBaseAddress(v11, 1uLL);
      if (v15) {
        return v15;
      }
      uint64_t v16 = CVPixelBufferLockBaseAddress(a2, 1uLL);
      if (v16)
      {
        uint64_t v27 = v16;
        CVReturn v28 = v11;
        goto LABEL_43;
      }
      unint64_t v44 = 0;
      unint64_t v45 = 0;
      CMPhotoGetPixelBufferCLAP(v11, 0, 0, &v45, &v44);
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      CMPhotoGetPixelBufferCLAP(a2, 0, 0, &v43, &v42);
      unint64_t v41 = v45;
      if (v45 != v43 || (unint64_t v17 = v44, v44 != v42) || (v18 = v45 / a4, v19 = v44 / a4, a5 < 8 * v45 / a4 * (v44 / a4)))
      {
        uint64_t v27 = FigSignalErrorAt();
        goto LABEL_42;
      }
      CGFloat v39 = v11;
      OSType v40 = a2;
      if (PixelFormatType > 1380411456)
      {
        if (PixelFormatType == 1380411457) {
          goto LABEL_23;
        }
        int v20 = 1815491698;
      }
      else
      {
        if (PixelFormatType == 1111970369) {
          goto LABEL_23;
        }
        int v20 = 1380410945;
      }
      if (PixelFormatType != v20)
      {
        if (v44 >= a4)
        {
          uint64_t v38 = 0;
          if (v18 <= 1) {
            uint64_t v30 = 1;
          }
          else {
            uint64_t v30 = v45 / a4;
          }
          if (v19 <= 1) {
            uint64_t v31 = 1;
          }
          else {
            uint64_t v31 = v44 / a4;
          }
          uint64_t v35 = v30;
          uint64_t v36 = v31;
          do
          {
            if (v41 >= a4)
            {
              unint64_t v32 = 0;
              uint64_t v33 = 0;
              uint64_t v34 = v35;
              do
              {
                _computeSSIMForPlane(v39, v40, 0, a3, (uint64_t)v48, (double)v32, (double)(v38 * a4), (double)a4, (double)a4, (double)v32, (double)(v38 * a4), (double)a4, (double)a4);
                a6[v33 + v38 * v18] = v48[0];
                ++v33;
                v32 += a4;
                --v34;
              }
              while (v34);
            }
            ++v38;
          }
          while (v38 != v36);
          uint64_t v27 = 0;
          uint64_t v11 = v39;
          a2 = v40;
          goto LABEL_42;
        }
        goto LABEL_41;
      }
LABEL_23:
      bzero(a6, a5);
      memset(v48, 0, 24);
      CVPixelBufferRef v46 = 0;
      CVPixelBufferRef pixelBuffer = 0;
      if (!_createMonochromeBufferFromRGB(v11, a2, &pixelBuffer, &v46, *MEMORY[0x1E4F1DB20], *(CGFloat *)(MEMORY[0x1E4F1DB20] + 8), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 16), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 24), *MEMORY[0x1E4F1DB20], *(CGFloat *)(MEMORY[0x1E4F1DB20] + 8), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 16), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 24))&& !CVPixelBufferLockBaseAddress(pixelBuffer, 0))
      {
        if (CVPixelBufferLockBaseAddress(v46, 0))
        {
          p_CVPixelBufferRef pixelBuffer = &pixelBuffer;
        }
        else
        {
          int v21 = 0;
          unint64_t v37 = v17;
          do
          {
            if (_extractRGBComponentAndCopyIntoMonochromeBuffer(v11, a2, pixelBuffer, v46, v21)) {
              break;
            }
            if (v17 >= a4)
            {
              uint64_t v22 = 0;
              do
              {
                if (v41 >= a4)
                {
                  unint64_t v23 = 0;
                  uint64_t v24 = 0;
                  unint64_t v25 = v18;
                  do
                  {
                    _computeSSIMForPlane(pixelBuffer, v46, 0, 0, (uint64_t)v48, (double)v23, (double)(v22 * a4), (double)a4, (double)a4, (double)v23, (double)(v22 * a4), (double)a4, (double)a4);
                    a6[v24 + v22 * v18] = a6[v24 + v22 * v18] + v48[0] / 3.0;
                    ++v24;
                    v23 += a4;
                    --v25;
                  }
                  while (v25);
                }
                ++v22;
              }
              while (v22 != v19);
            }
            ++v21;
            uint64_t v11 = v39;
            a2 = v40;
            unint64_t v17 = v37;
          }
          while (v21 != 3);
          CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
          p_CVPixelBufferRef pixelBuffer = &v46;
        }
        CVPixelBufferUnlockBaseAddress(*p_pixelBuffer, 0);
      }
      if (pixelBuffer) {
        CFRelease(pixelBuffer);
      }
      if (v46) {
        CFRelease(v46);
      }
LABEL_41:
      uint64_t v27 = 0;
LABEL_42:
      CVPixelBufferUnlockBaseAddress(v11, 1uLL);
      CVReturn v28 = a2;
LABEL_43:
      CVPixelBufferUnlockBaseAddress(v28, 1uLL);
      return v27;
    }
  }
LABEL_58:
  return FigSignalErrorAt();
}

uint64_t CMPhotoCompare(void *a1, void *a2, int a3, CFDictionaryRef theDict, double *a5, CGImageRef *a6, __CFDictionary *a7)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  unsigned int v76 = 8;
  signed int v77 = 8;
  int v75 = 2;
  double v73 = 2.22507386e-308;
  double v74 = 1.79769313e308;
  CVPixelBufferRef v71 = 0;
  CVPixelBufferRef pixelBuffer = 0;
  CVPixelBufferRef v69 = 0;
  CVPixelBufferRef v70 = 0;
  unsigned int v68 = 0;
  __int16 v67 = 0;
  uint64x2_t value = 0;
  if (!a1)
  {
    uint64_t v52 = FigSignalErrorAt();
    goto LABEL_154;
  }
  if (!a2) {
    goto LABEL_35;
  }
  if (theDict)
  {
    CMPhotoCFDictionaryGetInt32IfPresent(theDict, @"BlockSize", &v77);
    CMPhotoCFDictionaryGetInt32IfPresent(theDict, @"diffImageType", &v75);
    CMPhotoCFDictionaryGetInt32IfPresent(theDict, @"OutputPixelFormat", &v68);
    CMPhotoCFDictionaryGetInt32IfPresent(theDict, @"BlockStride", &v76);
    CMPhotoCFDictionaryGetBooleanIfPresent(theDict, @"UseMagma", (unsigned char *)&v67 + 1);
    CMPhotoCFDictionaryGetBooleanIfPresent(theDict, @"UseMinMaxForDiffMap", &v67);
  }
  PixelBufferFromCMPhotoint ImageType = _getPixelBufferFromCMPhotoImageType(a1, (CFTypeRef *)&pixelBuffer);
  if (PixelBufferFromCMPhotoImageType) {
    goto LABEL_105;
  }
  PixelBufferFromCMPhotoint ImageType = _getPixelBufferFromCMPhotoImageType(a2, (CFTypeRef *)&v71);
  if (PixelBufferFromCMPhotoImageType) {
    goto LABEL_105;
  }
  if ((size_t Width = CVPixelBufferGetWidth(pixelBuffer),
        size_t Height = CVPixelBufferGetHeight(pixelBuffer),
        uint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer),
        Width == CVPixelBufferGetWidth(v71))
    && Height == CVPixelBufferGetHeight(v71)
    && PixelFormatType == CVPixelBufferGetPixelFormatType(v71)
    && (!a6 || (Width >= Height ? (unint64_t v21 = Height) : (unint64_t v21 = Width), v77 >= 2 && v21 > v77)))
  {
    switch(a3)
    {
      case 1:
        unint64_t v78 = 0;
        unint64_t v23 = v71;
        uint64_t v22 = pixelBuffer;
        double v24 = *MEMORY[0x1E4F1DB20];
        double v25 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
        CGFloat v26 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
        CGFloat v27 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
        v82.origin.x = *(CGFloat *)MEMORY[0x1E4F1DB20];
        v82.origin.y = v25;
        v82.size.double width = v26;
        v82.size.double height = v27;
        BOOL IsNull = CGRectIsNull(v82);
        double v29 = 0.0;
        if (IsNull) {
          double v30 = v24;
        }
        else {
          double v30 = 0.0;
        }
        if (IsNull) {
          double v29 = v25;
        }
        if (_computeMinimumBlockPSNRForPixelBuffer(v22, v23, 0, 0, 0, 0, 0, a5, v30, v29, v26, v27, v24, v25, v26, v27, (double *)&v78))
        {
          uint64_t v33 = 0;
          goto LABEL_147;
        }
        if (!a7
          || (PixelBufferFromCMPhotoint ImageType = CMPhotoCFDictionarySetDouble(a7, @"Edges", *(double *)&v78),
              !PixelBufferFromCMPhotoImageType))
        {
          if (!a6)
          {
LABEL_131:
            uint64_t v33 = 0;
LABEL_132:
            if (a3 != 8)
            {
              if (HIBYTE(v67))
              {
                CGImageWithuint64_t PixelBuffer = CMPhotoApplyMagmaMap(v70, v70);
                if (CGImageWithPixelBuffer) {
                  goto LABEL_148;
                }
              }
            }
            if (a6)
            {
              unsigned int v60 = v68;
              if (v68)
              {
                if (v60 != CVPixelBufferGetPixelFormatType(v70))
                {
                  unint64_t v78 = 0;
                  CGImageWithuint64_t PixelBuffer = CMPhotoScaleAndRotateSessionTransformForSizeWithOptions(0, v70, 0, 1, 1, v68, 0, 0, *MEMORY[0x1E4F1DB20], *(CGFloat *)(MEMORY[0x1E4F1DB20] + 8), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 16), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 24), *MEMORY[0x1E4F1DB30], *(double *)(MEMORY[0x1E4F1DB30] + 8), v61, v62, 0, 0, 1u,
                                             0,
                                             0,
                                             0,
                                             &v78);
                  if (CGImageWithPixelBuffer) {
                    goto LABEL_148;
                  }
                  if (v70) {
                    CFRelease(v70);
                  }
                  CVPixelBufferRef v70 = v78;
                }
LABEL_143:
                if (v75 != 4)
                {
                  if (v75 == 2)
                  {
                    uint64_t v52 = 0;
                    *a6 = v70;
                    CVPixelBufferRef v70 = 0;
                    goto LABEL_150;
                  }
                  goto LABEL_147;
                }
                CGImageWithuint64_t PixelBuffer = CMPhotoCreateCGImageWithPixelBuffer((const __CFAllocator *)*MEMORY[0x1E4F1CF80], v70, 1, a6);
LABEL_148:
                uint64_t v52 = CGImageWithPixelBuffer;
                goto LABEL_150;
              }
            }
            if (a6) {
              goto LABEL_143;
            }
            uint64_t v52 = 0;
            goto LABEL_150;
          }
          if (Width / v77 <= 1) {
            unint64_t v31 = 1;
          }
          else {
            unint64_t v31 = Width / v77;
          }
          if (Height / v77 <= 1) {
            unint64_t v32 = 1;
          }
          else {
            unint64_t v32 = Height / v77;
          }
          uint64_t v33 = malloc_type_malloc(8 * v31 * v32, 0x8FA4386FuLL);
          bzero(v33, 8 * v31 * v32);
          if (v33
            && !CMPhotoComputePSNRForPixelBufferBlockBased(pixelBuffer, v71, 0, v77, 8 * v31 * v32, (double *)v33))
          {
            CGImageWithuint64_t PixelBuffer = _copyAndNormalizeArrayToPixelBuffer(&v70, (uint64_t)v33, 1, v67, PixelFormatType, Width, Height, v31, v32, v77, &v74, &v73);
LABEL_46:
            if (CGImageWithPixelBuffer) {
              goto LABEL_148;
            }
            if (a7)
            {
              CGImageWithuint64_t PixelBuffer = CMPhotoCFDictionarySetDouble(a7, @"Min", v74);
              if (CGImageWithPixelBuffer) {
                goto LABEL_148;
              }
              CGImageWithuint64_t PixelBuffer = CMPhotoCFDictionarySetDouble(a7, @"Max", v73);
              if (CGImageWithPixelBuffer) {
                goto LABEL_148;
              }
            }
            goto LABEL_132;
          }
LABEL_147:
          CGImageWithuint64_t PixelBuffer = FigSignalErrorAt();
          goto LABEL_148;
        }
        break;
      case 2:
        CMPhotoComputeSSIMForPixelBuffer(pixelBuffer, v71, 0, 0, a5, 0, 0, *MEMORY[0x1E4F1DB20], *(CGFloat *)(MEMORY[0x1E4F1DB20] + 8), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 16), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 24));
        if (!a6) {
          goto LABEL_131;
        }
        if (Width / v77 <= 1) {
          unint64_t v35 = 1;
        }
        else {
          unint64_t v35 = Width / v77;
        }
        if (Height / v77 <= 1) {
          unint64_t v36 = 1;
        }
        else {
          unint64_t v36 = Height / v77;
        }
        uint64_t v33 = malloc_type_malloc(8 * v35 * v36, 0xABD3AA1DuLL);
        bzero(v33, 8 * v35 * v36);
        if (!v33
          || CMPhotoComputeSSIMForPixelBufferBlockBased(pixelBuffer, v71, 0, v77, 8 * v35 * v36, (double *)v33))
        {
          goto LABEL_147;
        }
        CGImageWithuint64_t PixelBuffer = _copyAndNormalizeArrayToPixelBuffer(&v70, (uint64_t)v33, 2, v67, PixelFormatType, Width, Height, v35, v36, v77, &v74, &v73);
        goto LABEL_46;
      case 5:
        if (a6) {
          unint64_t v37 = &v69;
        }
        else {
          unint64_t v37 = 0;
        }
        if (CMPhotoComputeWPSNRForPixelBuffer(pixelBuffer, v71, (double *)v77, 0, v76, a5, v37, 0, 0))goto LABEL_35; {
        if (!a6)
        }
          goto LABEL_131;
        if (CVPixelBufferGetPixelFormatType(v69) != 1919365990) {
          goto LABEL_35;
        }
        int v38 = Height - (v77 - 1);
        if (v38 < 1)
        {
          unsigned int v39 = 0;
        }
        else
        {
          unsigned int v39 = 0;
          if ((int)v76 > v38) {
            int v38 = v76;
          }
          unsigned int v40 = (v38 - 1) / v76 + 1;
          do
            ++v39;
          while (v40 != v39);
        }
        int v54 = Width - (v77 - 1);
        if (v54 < 1)
        {
          unint64_t v55 = 0;
        }
        else
        {
          LODWORD(v55) = 0;
          if ((int)v76 > v54) {
            int v54 = v76;
          }
          unsigned int v56 = (v54 - 1) / v76 + 1;
          do
            unint64_t v55 = (v55 + 1);
          while (v56 != v55);
        }
        PixelBufferFromCMPhotoint ImageType = _copyAndNormalizePixelBufferToPixelBuffer(v69, &v70, 5, v67, PixelFormatType, Width, Height, v55, v39, v77, &v74, &v73);
        goto LABEL_126;
      case 6:
        if (a6) {
          unint64_t v41 = &v69;
        }
        else {
          unint64_t v41 = 0;
        }
        if (CMPhotoComputePSNRHVSForPixelBuffer(pixelBuffer, v71, 0, v77, a5, v41)) {
          goto LABEL_35;
        }
        if (!a6) {
          goto LABEL_131;
        }
        if (CVPixelBufferGetPixelFormatType(v69) != 1919365990) {
          goto LABEL_35;
        }
        if (Width / v77 <= 1) {
          unint64_t v42 = 1;
        }
        else {
          unint64_t v42 = Width / v77;
        }
        unint64_t v43 = Height / v77;
        if (v43 <= 1) {
          unint64_t v43 = 1;
        }
        PixelBufferFromCMPhotoint ImageType = _copyAndNormalizePixelBufferToPixelBuffer(v69, &v70, 6, v67, PixelFormatType, Width, Height, v42, v43, v77, &v74, &v73);
        goto LABEL_126;
      case 7:
        if (a6) {
          unint64_t v44 = &v69;
        }
        else {
          unint64_t v44 = 0;
        }
        if (CMPhotoComputeMSEForPixelBuffer(pixelBuffer, v71, v77, 0, v76, a5, v44)) {
          goto LABEL_35;
        }
        if (!a6) {
          goto LABEL_131;
        }
        if (CVPixelBufferGetPixelFormatType(v69) != 1919365990) {
          goto LABEL_35;
        }
        int v45 = Height - (v77 - 1);
        if (v45 < 1)
        {
          unsigned int v46 = 0;
        }
        else
        {
          unsigned int v46 = 0;
          if ((int)v76 > v45) {
            int v45 = v76;
          }
          unsigned int v47 = (v45 - 1) / v76 + 1;
          do
            ++v46;
          while (v47 != v46);
        }
        int v57 = Width - (v77 - 1);
        if (v57 < 1)
        {
          unint64_t v58 = 0;
        }
        else
        {
          LODWORD(v58) = 0;
          if ((int)v76 > v57) {
            int v57 = v76;
          }
          unsigned int v59 = (v57 - 1) / v76 + 1;
          do
            unint64_t v58 = (v58 + 1);
          while (v59 != v58);
        }
        PixelBufferFromCMPhotoint ImageType = _copyAndNormalizePixelBufferToPixelBuffer(v69, &v70, 7, v67, PixelFormatType, Width, Height, v58, v46, v77, &v74, &v73);
LABEL_126:
        if (PixelBufferFromCMPhotoImageType) {
          break;
        }
        if (!a7) {
          goto LABEL_131;
        }
        PixelBufferFromCMPhotoint ImageType = CMPhotoCFDictionarySetDouble(a7, @"Min", v74);
        if (PixelBufferFromCMPhotoImageType) {
          break;
        }
        CGImageWithuint64_t PixelBuffer = CMPhotoCFDictionarySetDouble(a7, @"Max", v73);
        uint64_t v33 = 0;
        if (CGImageWithPixelBuffer) {
          goto LABEL_148;
        }
        goto LABEL_132;
      case 8:
        uint64_t v64 = 0;
        uint64_t v65 = 0;
        if (theDict)
        {
          CMPhotoCFDictionaryGetFloatIfPresent(theDict, @"MonitorDistance", (char *)&v65 + 4);
          CMPhotoCFDictionaryGetFloatIfPresent(theDict, @"MonitorWidth", &v65);
          CMPhotoCFDictionaryGetFloatIfPresent(theDict, @"monitorResolutionX", (char *)&v64 + 4);
          CMPhotoCFDictionaryGetIntIfPresent(theDict, @"HistogramSize", &v64);
          v18.n128_u32[0] = HIDWORD(v65);
          v19.n128_u32[0] = v65;
          v20.n128_u32[0] = HIDWORD(v64);
          int v48 = v64;
        }
        else
        {
          int v48 = 0;
          v20.n128_u64[0] = 0;
          v19.n128_u64[0] = 0;
          v18.n128_u64[0] = 0;
        }
        unint64_t v78 = 0;
        uint64_t v79 = 0;
        float v80 = 0.0;
        if (a6) {
          unint64_t v49 = &v69;
        }
        else {
          unint64_t v49 = 0;
        }
        if (CMPhotoComputeFLIPForPixelBufferWithPooling(pixelBuffer, v71, HIBYTE(v67), v49, &v78, v48, &value, v18, v19, v20))goto LABEL_35; {
        if (a5)
        }
          *a5 = *(float *)&v79;
        if (a7)
        {
          CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 5, MEMORY[0x1E4F1D510]);
          for (uint64_t i = 0; i != 20; i += 4)
            FigCFArrayAppendDouble();
          CFDictionaryAddValue(a7, @"FlipWeightedPercentiles", Mutable);
          if (Mutable) {
            CFRelease(Mutable);
          }
          if (v64) {
            CFDictionaryAddValue(a7, @"Histogram", value);
          }
          PixelBufferFromCMPhotoint ImageType = CMPhotoCFDictionarySetDouble(a7, @"Min", *(float *)&v78);
          if (PixelBufferFromCMPhotoImageType) {
            break;
          }
          PixelBufferFromCMPhotoint ImageType = CMPhotoCFDictionarySetDouble(a7, @"Max", v80);
          if (PixelBufferFromCMPhotoImageType) {
            break;
          }
        }
        if (a6)
        {
          size_t v53 = v69;
          CVPixelBufferRef v69 = 0;
          CVPixelBufferRef v70 = v53;
        }
        goto LABEL_131;
      default:
        goto LABEL_35;
    }
  }
  else
  {
LABEL_35:
    PixelBufferFromCMPhotoint ImageType = FigSignalErrorAt();
  }
LABEL_105:
  uint64_t v52 = PixelBufferFromCMPhotoImageType;
  uint64_t v33 = 0;
LABEL_150:
  if (value) {
    CFRelease(value);
  }
  if (v33) {
    free(v33);
  }
LABEL_154:
  if (v69) {
    CFRelease(v69);
  }
  if (v70) {
    CFRelease(v70);
  }
  if (pixelBuffer) {
    CFRelease(pixelBuffer);
  }
  if (v71) {
    CFRelease(v71);
  }
  return v52;
}

uint64_t _getPixelBufferFromCMPhotoImageType(void *a1, CFTypeRef *a2)
{
  if (!a1 || !a2)
  {
LABEL_9:
    return FigSignalErrorAt();
  }
  int ImageType = CMPhotoGetImageType(a1);
  if (ImageType != 4)
  {
    if (ImageType == 2)
    {
      *a2 = CFRetain(a1);
      return 0;
    }
    goto LABEL_9;
  }
  return CMPhotoCreatePixelBufferFromCGImage((CGImage *)a1, 0, 0, 64, a2);
}

uint64_t _copyAndNormalizePixelBufferToPixelBuffer(__CVBuffer *a1, CVPixelBufferRef *a2, int a3, int a4, uint64_t a5, size_t a6, size_t a7, unint64_t a8, unint64_t a9, unint64_t a10, double *a11, double *a12)
{
  if (a1 && a2)
  {
    CMPhotoGetBitDepthForPixelFormat(a5);
    if ((a3 - 1) > 6) {
      double v19 = 2.22507386e-308;
    }
    else {
      double v19 = dbl_1AB9D8588[a3 - 1];
    }
    unint64_t BitDepthForPixelFormat = CMPhotoGetBitDepthForPixelFormat(a5);
    double MaxSNRThatMakesSense = _findMaxSNRThatMakesSense(a3, BitDepthForPixelFormat);
    uint64_t result = CMPhotoSurfacePoolCreatePixelBuffer(@"SurfacePoolOneShot", 1919365990, a6, a7, 1, 0, 0, 1, 64, 0, a2);
    if (result) {
      return result;
    }
    int v48 = a3;
    int v49 = a4;
    size_t v50 = a7;
    unint64_t v51 = a8;
    CVPixelBufferLockBaseAddress(a1, 0);
    CVPixelBufferLockBaseAddress(*a2, 0);
    BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
    size_t v53 = CVPixelBufferGetBytesPerRowOfPlane(a1, 0) >> 2;
    unint64_t v23 = (float *)CVPixelBufferGetBaseAddressOfPlane(*a2, 0);
    double v24 = (float *)CVPixelBufferGetBaseAddressOfPlane(*a2, 1uLL);
    double v25 = (float *)CVPixelBufferGetBaseAddressOfPlane(*a2, 2uLL);
    uint64_t v52 = a2;
    size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(*a2, 0);
    if (CVPixelBufferGetHeight(a1))
    {
      size_t v26 = 0;
      CGFloat v27 = BaseAddressOfPlane;
      do
      {
        if (CVPixelBufferGetWidth(a1))
        {
          size_t v28 = 0;
          do
          {
            double v29 = *(float *)&v27[4 * v28];
            double v30 = *a12;
            if (*a12 < v29) {
              double v30 = *(float *)&v27[4 * v28];
            }
            *a12 = v30;
            if (*a11 <= v29) {
              double v29 = *a11;
            }
            *a11 = v29;
            ++v28;
          }
          while (CVPixelBufferGetWidth(a1) > v28);
        }
        ++v26;
        v27 += 4 * v53;
      }
      while (CVPixelBufferGetHeight(a1) > v26);
    }
    if (!v49)
    {
      unint64_t v32 = v51;
      unint64_t v36 = v52;
      size_t v33 = v50;
      unint64_t v34 = a9;
LABEL_28:
      if (v33)
      {
        unint64_t v38 = 0;
        uint64_t v39 = 4 * (BytesPerRowOfPlane >> 2);
        do
        {
          if (v38 / a10 >= v34) {
            unint64_t v40 = v34 - 1;
          }
          else {
            unint64_t v40 = v38 / a10;
          }
          if (a6)
          {
            unint64_t v41 = 0;
            unint64_t v42 = &BaseAddressOfPlane[4 * v40 * v53];
            do
            {
              unint64_t v43 = v41 / a10;
              if (v41 / a10 >= v32) {
                unint64_t v43 = v32 - 1;
              }
              float v44 = *(float *)&v42[4 * v43];
              if (v19 >= v44) {
                float v44 = v19;
              }
              if (MaxSNRThatMakesSense <= v44) {
                float v44 = MaxSNRThatMakesSense;
              }
              float v45 = (v44 - v19) / (MaxSNRThatMakesSense - v19);
              float v46 = 1.0 - v45;
              v23[v41] = v46;
              v24[v41] = v46;
              v25[v41++] = v46;
            }
            while (a6 != v41);
          }
          ++v38;
          double v25 = (float *)((char *)v25 + v39);
          double v24 = (float *)((char *)v24 + v39);
          unint64_t v23 = (float *)((char *)v23 + v39);
        }
        while (v38 != v33);
      }
      CVPixelBufferUnlockBaseAddress(a1, 0);
      CVPixelBufferUnlockBaseAddress(*v36, 0);
      return 0;
    }
    double v31 = *a11;
    size_t v33 = v50;
    unint64_t v32 = v51;
    unint64_t v34 = a9;
    if (v48 == 7)
    {
      double v37 = 4.0;
    }
    else
    {
      if (v48 != 2)
      {
        double v35 = fmax(v31, 10.0);
        if (v48 == 1) {
          double v19 = v35;
        }
        else {
          double v19 = *a11;
        }
        goto LABEL_27;
      }
      double v37 = 0.1;
    }
    double v19 = fmax(v31, v37);
LABEL_27:
    unint64_t v36 = v52;
    double MaxSNRThatMakesSense = _limitMaxSNR(v48, *a12);
    goto LABEL_28;
  }
  return FigSignalErrorAt();
}

uint64_t _copyAndNormalizeArrayToPixelBuffer(CVPixelBufferRef *a1, uint64_t a2, int a3, int a4, uint64_t a5, size_t a6, size_t a7, unint64_t a8, unint64_t a9, unint64_t a10, double *a11, double *a12)
{
  if (a1)
  {
    CMPhotoGetBitDepthForPixelFormat(a5);
    double v19 = (a3 - 1) > 6 ? 2.22507386e-308 : dbl_1AB9D8588[a3 - 1];
    unint64_t BitDepthForPixelFormat = CMPhotoGetBitDepthForPixelFormat(a5);
    double MaxSNRThatMakesSense = _findMaxSNRThatMakesSense(a3, BitDepthForPixelFormat);
    if (!CMPhotoSurfacePoolCreatePixelBuffer(@"SurfacePoolOneShot", 1919365990, a6, a7, 1, 0, 0, 1, 64, 0, a1))
    {
      if (a7)
      {
        unint64_t v22 = 0;
        do
        {
          if (a6)
          {
            unint64_t v23 = 0;
            unint64_t v24 = v22 / a10;
            if (v22 / a10 >= a9) {
              unint64_t v24 = a9 - 1;
            }
            uint64_t v25 = v24 * a8;
            do
            {
              unint64_t v26 = v23 / a10;
              if (v23 / a10 >= a8) {
                unint64_t v26 = a8 - 1;
              }
              unint64_t v27 = v26 + v25;
              double v28 = *(double *)(a2 + 8 * v27);
              double v29 = *a12;
              if (v28 > *a12) {
                double v29 = *(double *)(a2 + 8 * v27);
              }
              *a12 = v29;
              if (v28 >= *a11) {
                double v28 = *a11;
              }
              *a11 = v28;
              ++v23;
            }
            while (a6 != v23);
          }
          ++v22;
        }
        while (v22 != a7);
      }
      if (!a4) {
        goto LABEL_29;
      }
      double v19 = *a11;
      switch(a3)
      {
        case 7:
          double v30 = 4.0;
          break;
        case 2:
          double v30 = 0.1;
          break;
        case 1:
          double v30 = 10.0;
          break;
        default:
LABEL_28:
          double MaxSNRThatMakesSense = _limitMaxSNR(a3, *a12);
LABEL_29:
          CVPixelBufferLockBaseAddress(*a1, 0);
          BaseAddressOfPlane = (float *)CVPixelBufferGetBaseAddressOfPlane(*a1, 0);
          unint64_t v32 = (float *)CVPixelBufferGetBaseAddressOfPlane(*a1, 1uLL);
          size_t v33 = (float *)CVPixelBufferGetBaseAddressOfPlane(*a1, 2uLL);
          size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(*a1, 0);
          size_t v35 = CVPixelBufferGetBytesPerRowOfPlane(*a1, 1uLL);
          size_t v36 = CVPixelBufferGetBytesPerRowOfPlane(*a1, 2uLL);
          if (a7)
          {
            unint64_t v37 = 0;
            do
            {
              if (a6)
              {
                unint64_t v38 = 0;
                unint64_t v39 = v37 / a10;
                if (v37 / a10 >= a9) {
                  unint64_t v39 = a9 - 1;
                }
                uint64_t v40 = v39 * a8;
                do
                {
                  unint64_t v41 = v38 / a10;
                  if (v38 / a10 >= a8) {
                    unint64_t v41 = a8 - 1;
                  }
                  float v42 = *(double *)(a2 + 8 * (v41 + v40));
                  if (v19 >= v42) {
                    float v42 = v19;
                  }
                  if (MaxSNRThatMakesSense <= v42) {
                    float v42 = MaxSNRThatMakesSense;
                  }
                  float v43 = (v42 - v19) / (MaxSNRThatMakesSense - v19);
                  float v44 = 1.0 - v43;
                  BaseAddressOfPlane[v38] = v44;
                  v32[v38] = v44;
                  v33[v38++] = v44;
                }
                while (a6 != v38);
              }
              BaseAddressOfPlane = (float *)((char *)BaseAddressOfPlane + BytesPerRowOfPlane);
              unint64_t v32 = (float *)((char *)v32 + v35);
              size_t v33 = (float *)((char *)v33 + v36);
              ++v37;
            }
            while (v37 != a7);
          }
          CVPixelBufferUnlockBaseAddress(*a1, 0);
          return 0;
      }
      double v19 = fmax(v19, v30);
      goto LABEL_28;
    }
  }
  return FigSignalErrorAt();
}

CFStringRef CMPhotoCompareMethodToStringCopy(unsigned int a1)
{
  if (a1 > 8) {
    uint64_t v1 = "Unrecognized";
  }
  else {
    uint64_t v1 = off_1E5E2E4D0[a1];
  }
  return CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v1, 0x8000100u);
}

__CFDictionary *CMPhotoCompareCopySupportedMetricList()
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    uint64_t v1 = 0;
    while (1)
    {
      int v2 = dword_1AB9D8570[v1];
      CFNumberRef Int = CMPhotoCFNumberCreateInt(v2);
      CFStringRef v4 = CMPhotoCompareMethodToStringCopy(v2);
      CFStringRef v5 = v4;
      if (Int && v4 != 0) {
        break;
      }
      if (Int) {
        goto LABEL_13;
      }
      if (v4) {
        goto LABEL_10;
      }
LABEL_11:
      if (++v1 == 6) {
        return Mutable;
      }
    }
    CFDictionarySetValue(Mutable, Int, v4);
LABEL_13:
    CFRelease(Int);
    if (!v5) {
      goto LABEL_11;
    }
LABEL_10:
    CFRelease(v5);
    goto LABEL_11;
  }
  return Mutable;
}

uint64x2_t _computeCropRectForPixelBuffer@<Q0>(__CVBuffer *a1@<X0>, uint64x2_t *a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>)
{
  float64_t PixelBufferCLAPAsRect = CMPhotoGetPixelBufferCLAPAsRect(a1);
  float64_t v20 = v12;
  double v21 = PixelBufferCLAPAsRect;
  v24.f64[0] = PixelBufferCLAPAsRect;
  v24.f64[1] = v12;
  double v22 = v14;
  double v23 = v13;
  v25.f64[0] = v13;
  v25.f64[1] = v14;
  v26.origin.x = a3;
  v26.origin.y = a4;
  v26.size.double width = a5;
  v26.size.double height = a6;
  if (CGRectIsNull(v26))
  {
    v15.f64[0] = v21;
    v15.f64[1] = v20;
    v16.f64[0] = v23;
    v16.f64[1] = v22;
  }
  else
  {
    if (a5 >= v23 - a3) {
      double v17 = v23 - a3;
    }
    else {
      double v17 = a5;
    }
    if (a6 >= v22 - a4) {
      double v18 = v22 - a4;
    }
    else {
      double v18 = a6;
    }
    CMPhotoApplyCropRectToRect(v24.f64, a3, a4, v17, v18);
    float64x2_t v15 = v24;
    float64x2_t v16 = v25;
  }
  uint64x2_t result = vcvtq_u64_f64(vrndaq_f64(v15));
  *a2 = result;
  a2[1] = vcvtq_u64_f64(vrndaq_f64(v16));
  return result;
}

uint64_t _computePSNRForPlane(__CVBuffer *a1, unint64_t *a2, __CVBuffer *a3, _DWORD *a4, unsigned int a5, double *a6, double *a7)
{
  uint64_t v8 = a6;
  double v9 = 0.0;
  if (a5 > 2)
  {
    uint64_t result = 4294950306;
    double v23 = 0.0;
    if (a6) {
      goto LABEL_73;
    }
    goto LABEL_74;
  }
  uint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  uint64_t BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(PixelFormatType);
  unint64_t BitDepthForPixelFormat = CMPhotoGetBitDepthForPixelFormat(PixelFormatType);
  char v16 = 0;
  int v54 = v8;
  if ((int)PixelFormatType <= 1734505011)
  {
    if (PixelFormatType == 1650943796) {
      goto LABEL_12;
    }
    int v17 = 1651847472;
  }
  else
  {
    if (PixelFormatType == 1734505012 || PixelFormatType == 1735549492) {
      goto LABEL_12;
    }
    int v17 = 1919379252;
  }
  if (PixelFormatType != v17)
  {
    if (BitDepthForPixelFormat <= 8) {
      char v16 = 0;
    }
    else {
      char v16 = 16 - BitDepthForPixelFormat;
    }
  }
LABEL_12:
  size_t v18 = a5 != 0;
  BOOL v19 = a5 > 1;
  __int16 v57 = 0;
  uint64_t result = CMPhotoPixelFormatIsSubsampled(PixelFormatType, &v57, (unsigned char *)&v57 + 1, 0, 0);
  if (result || (uint64_t result = 4294950301, !BytesPerPixelForPixelFormat) || !BitDepthForPixelFormat)
  {
LABEL_22:
    double v23 = 0.0;
    uint64_t v8 = v54;
    if (!v54) {
      goto LABEL_74;
    }
    goto LABEL_73;
  }
  if (a5)
  {
    if ((_BYTE)v57)
    {
      unint64_t v21 = *a2;
      if ((*a2 | *a4))
      {
LABEL_21:
        uint64_t result = 4294950306;
        goto LABEL_22;
      }
      a2[2] = (a2[2] + 1) >> 1;
      *a2 = (v21 + 1) >> 1;
      *(void *)a4 = (unint64_t)(*(void *)a4 + 1) >> 1;
    }
    if (HIBYTE(v57))
    {
      unint64_t v22 = a2[1];
      if ((v22 | a4[2])) {
        goto LABEL_21;
      }
      a2[3] = (a2[3] + 1) >> 1;
      a2[1] = (v22 + 1) >> 1;
      *((void *)a4 + 1) = (unint64_t)(*((void *)a4 + 1) + 1) >> 1;
    }
  }
  size_t v53 = a7;
  size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, a5 != 0);
  size_t v25 = CVPixelBufferGetBytesPerRowOfPlane(a3, v18);
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, v18);
  unint64_t v27 = (char *)CVPixelBufferGetBaseAddressOfPlane(a3, v18);
  unint64_t v28 = a2[3];
  if (v28)
  {
    uint64_t v29 = 0;
    double v30 = &v27[*((void *)a4 + 1) * v25 + ((*(void *)a4 << v18) + v19) * BytesPerPixelForPixelFormat];
    double v31 = &BaseAddressOfPlane[a2[1] * BytesPerRowOfPlane + ((*a2 << v18) + v19) * BytesPerPixelForPixelFormat];
    unint64_t v32 = a2[2];
    double v33 = 0.0;
    double v34 = 0.0;
    double v35 = 0.0;
    uint64_t v8 = v54;
    while (!v32)
    {
LABEL_52:
      v31 += BytesPerRowOfPlane;
      v30 += v25;
      if (++v29 == v28) {
        goto LABEL_55;
      }
    }
    uint64_t v36 = 0;
    while (1)
    {
      uint64_t v37 = v36 << v18;
      if (BytesPerPixelForPixelFormat == 1) {
        break;
      }
      if ((int)PixelFormatType <= 1651926375)
      {
        if (PixelFormatType != 1278226536
          && PixelFormatType != 1380411457
          && PixelFormatType != 1647719528)
        {
LABEL_51:
          int v38 = *(unsigned __int16 *)&v31[2 * v37] >> v16;
          int v39 = *(unsigned __int16 *)&v30[2 * v37] >> v16;
          goto LABEL_31;
        }
      }
      else if ((int)PixelFormatType > 1751411058)
      {
        if (PixelFormatType != 1751527984 && PixelFormatType != 1751411059) {
          goto LABEL_51;
        }
      }
      else if (PixelFormatType != 1651926376 && PixelFormatType != 1751410032)
      {
        goto LABEL_51;
      }
      _H1 = *(short float *)&v31[2 * v37] - *(short float *)&v30[2 * v37];
      __asm { FCVT            D1, H1 }
LABEL_44:
      double v46 = _D1 * _D1;
      if (!v29 || v28 - 1 == v29 || !v36 || v32 - 1 == v36)
      {
        double v35 = v35 + v46;
        double v34 = v34 + 1.0;
      }
      double v33 = v33 + v46;
      if (v32 == ++v36) {
        goto LABEL_52;
      }
    }
    int v38 = v31[v37];
    int v39 = v30[v37];
LABEL_31:
    _D1 = (double)(v38 - v39);
    goto LABEL_44;
  }
  double v35 = 0.0;
  double v34 = 0.0;
  double v33 = 0.0;
  uint64_t v8 = v54;
LABEL_55:
  double v47 = (double)~(-1 << BitDepthForPixelFormat);
  if ((int)PixelFormatType <= 1651926375)
  {
    a7 = v53;
    if (PixelFormatType == 1278226536 || PixelFormatType == 1380411457) {
      goto LABEL_65;
    }
    int v48 = 1647719528;
    goto LABEL_64;
  }
  a7 = v53;
  if ((int)PixelFormatType > 1751411058)
  {
    if (PixelFormatType == 1751411059) {
      goto LABEL_65;
    }
    int v48 = 1751527984;
LABEL_64:
    if (PixelFormatType != v48) {
      goto LABEL_66;
    }
    goto LABEL_65;
  }
  if (PixelFormatType != 1651926376)
  {
    int v48 = 1751410032;
    goto LABEL_64;
  }
LABEL_65:
  double v47 = 1.0;
LABEL_66:
  if (v33 == 0.0)
  {
    double v9 = INFINITY;
  }
  else
  {
    double v49 = (double)(a2[2] * v28);
    double v50 = log10(v47);
    double v9 = log10(v33 / v49) * -10.0 + v50 * 20.0;
  }
  if (v35 != 0.0)
  {
    double v51 = log10(v47);
    long double v52 = log10(v35 / v34);
    uint64_t result = 0;
    double v23 = v52 * -10.0 + v51 * 20.0;
    if (!v8) {
      goto LABEL_74;
    }
    goto LABEL_73;
  }
  uint64_t result = 0;
  double v23 = INFINITY;
  if (v8) {
LABEL_73:
  }
    double *v8 = v9;
LABEL_74:
  if (a7) {
    *a7 = v23;
  }
  return result;
}

uint64_t _createMonochromeBufferFromRGB(__CVBuffer *a1, __CVBuffer *a2, CVPixelBufferRef *a3, CVPixelBufferRef *a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12)
{
  uint64x2_t v44 = 0u;
  long long v45 = 0u;
  _computeCropRectForPixelBuffer(a1, &v44, a5, a6, a7, a8);
  uint64x2_t v42 = 0u;
  long long v43 = 0u;
  _computeCropRectForPixelBuffer(a2, &v42, a9, a10, a11, a12);
  unint64_t v21 = *((void *)&v45 + 1);
  unint64_t v20 = v45;
  if ((void)v45 != (void)v43 || *((void *)&v45 + 1) != *((void *)&v43 + 1)) {
    goto LABEL_15;
  }
  size_t Width = CVPixelBufferGetWidth(a1);
  if (Width != CVPixelBufferGetWidth(a2)) {
    goto LABEL_15;
  }
  size_t Height = CVPixelBufferGetHeight(a1);
  if (Height != CVPixelBufferGetHeight(a2)) {
    goto LABEL_15;
  }
  uint64_t v25 = 1278226488;
  signed int PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (PixelFormatType > 1380411456)
  {
    if (PixelFormatType == 1380411457)
    {
      uint64_t v25 = 1278226536;
      goto LABEL_22;
    }
    if (PixelFormatType == 1815491698)
    {
      uint64_t v25 = 1278226742;
      goto LABEL_22;
    }
    goto LABEL_15;
  }
  if (PixelFormatType != 1111970369)
  {
    if (PixelFormatType == 1380410945)
    {
      uint64_t v25 = 1278226534;
      goto LABEL_22;
    }
LABEL_15:
    uint64_t PixelBuffer = FigSignalErrorAt();
LABEL_16:
    uint64_t v28 = PixelBuffer;
    goto LABEL_17;
  }
LABEL_22:
  if (CVPixelBufferGetWidth(a1) < 9) {
    size_t v29 = 8;
  }
  else {
    size_t v29 = CVPixelBufferGetWidth(a1);
  }
  if (CVPixelBufferGetHeight(a1) < 9) {
    size_t v30 = 8;
  }
  else {
    size_t v30 = CVPixelBufferGetHeight(a1);
  }
  uint64_t PixelBuffer = CMPhotoSurfacePoolCreatePixelBuffer(@"SurfacePoolOneShot", v25, v29, v30, 1, 0, 0, 1, 0, 0, a3);
  if (PixelBuffer) {
    goto LABEL_16;
  }
  size_t v31 = CVPixelBufferGetWidth(a1) < 9 ? 8 : CVPixelBufferGetWidth(a1);
  size_t v32 = CVPixelBufferGetHeight(a1) < 9 ? 8 : CVPixelBufferGetHeight(a1);
  uint64_t PixelBuffer = CMPhotoSurfacePoolCreatePixelBuffer(@"SurfacePoolOneShot", v25, v31, v32, 1, 0, 0, 1, 0, 0, a4);
  if (PixelBuffer) {
    goto LABEL_16;
  }
  if (CVPixelBufferGetWidth(a1) < 8 || CVPixelBufferGetHeight(a1) <= 7)
  {
    if (v20 <= 8) {
      unint64_t v20 = 8;
    }
    if (v21 <= 8) {
      unint64_t v21 = 8;
    }
  }
  uint64x2_t v33 = v44;
  CMPhotoSetPixelBufferCLAP(*a3, v44.u64[0], v44.u64[1], v20, v21, 0, 1);
  CMPhotoSetPixelBufferCLAP(*a4, v33.u64[0], v33.u64[1], v20, v21, 0, 1);
  if (CVPixelBufferGetWidth(a1) >= 8 && CVPixelBufferGetHeight(a1) > 7) {
    return 0;
  }
  uint64_t PixelBuffer = CVPixelBufferLockBaseAddress(*a3, 0);
  if (PixelBuffer) {
    goto LABEL_16;
  }
  uint64_t v28 = CVPixelBufferLockBaseAddress(*a4, 0);
  double v34 = *a3;
  if (!v28)
  {
    BaseAddresCGColorSpaceRef s = (char *)CVPixelBufferGetBaseAddress(v34);
    uint64_t v36 = (char *)CVPixelBufferGetBaseAddress(*a4);
    if (CVPixelBufferGetWidth(a1) < 9) {
      size_t v37 = 8;
    }
    else {
      size_t v37 = CVPixelBufferGetWidth(a1);
    }
    size_t v38 = 0;
    size_t v39 = CMPhotoGetBytesPerPixelForPixelFormat(v25) * v37;
    while (1)
    {
      size_t v40 = CVPixelBufferGetHeight(a1) < 9 ? 8 : CVPixelBufferGetHeight(a1);
      if (v40 <= v38) {
        break;
      }
      bzero(BaseAddress, v39);
      bzero(v36, v39);
      BaseAddress += CVPixelBufferGetBytesPerRow(*a3);
      v36 += CVPixelBufferGetBytesPerRow(*a4);
      ++v38;
    }
    CVPixelBufferUnlockBaseAddress(*a3, 0);
    CVPixelBufferUnlockBaseAddress(*a4, 0);
    return 0;
  }
  CVPixelBufferUnlockBaseAddress(v34, 0);
LABEL_17:
  if (*a3)
  {
    CFRelease(*a3);
    *a3 = 0;
  }
  if (*a4)
  {
    CFRelease(*a4);
    *a4 = 0;
  }
  return v28;
}

uint64_t _extractRGBComponentAndCopyIntoMonochromeBuffer(__CVBuffer *a1, __CVBuffer *a2, __CVBuffer *a3, __CVBuffer *a4, int a5)
{
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (PixelFormatType == CVPixelBufferGetPixelFormatType(a2))
  {
    OSType v10 = CVPixelBufferGetPixelFormatType(a3);
    if (v10 == CVPixelBufferGetPixelFormatType(a4))
    {
      signed int v11 = CVPixelBufferGetPixelFormatType(a1);
      if (v11 > 1380411456)
      {
        if (v11 == 1815491698)
        {
          if (CVPixelBufferGetPixelFormatType(a3) == 1278226742)
          {
            size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
            size_t v47 = CVPixelBufferGetBytesPerRow(a2);
            BaseAddresCGColorSpaceRef s = (char *)CVPixelBufferGetBaseAddress(a1);
            double v49 = (char *)CVPixelBufferGetBaseAddress(a2);
            size_t v50 = CVPixelBufferGetBytesPerRow(a3);
            size_t v51 = CVPixelBufferGetBytesPerRow(a4);
            long double v52 = (char *)CVPixelBufferGetBaseAddress(a3);
            size_t v53 = (char *)CVPixelBufferGetBaseAddress(a4);
            if (CVPixelBufferGetHeight(a1))
            {
              size_t v54 = 0;
              size_t v55 = BytesPerRow >> 1;
              uint64_t v68 = 2 * (v50 >> 1);
              uint64_t v75 = 2 * (v51 >> 1);
              uint64_t v56 = 2 * v55;
              uint64_t v64 = 2 * a5;
              uint64_t v57 = 2 * (v47 >> 1);
              do
              {
                if (CVPixelBufferGetWidth(a2))
                {
                  size_t v58 = 0;
                  uint64_t v59 = v64;
                  do
                  {
                    *(_WORD *)&v52[2 * v58] = *(_WORD *)&BaseAddress[v59];
                    *(_WORD *)&v53[2 * v58++] = *(_WORD *)&v49[v59];
                    v59 += 8;
                  }
                  while (CVPixelBufferGetWidth(a2) > v58);
                }
                ++v54;
                v53 += v75;
                v52 += v68;
                BaseAddress += v56;
                v49 += v57;
              }
              while (CVPixelBufferGetHeight(a1) > v54);
            }
            return 0;
          }
        }
        else if (v11 == 1380411457 && CVPixelBufferGetPixelFormatType(a3) == 1278226536)
        {
          size_t v71 = CVPixelBufferGetBytesPerRow(a1);
          size_t v25 = CVPixelBufferGetBytesPerRow(a2);
          CGRect v26 = (char *)CVPixelBufferGetBaseAddress(a1);
          unint64_t v27 = (char *)CVPixelBufferGetBaseAddress(a2);
          size_t v28 = CVPixelBufferGetBytesPerRow(a3);
          size_t v29 = CVPixelBufferGetBytesPerRow(a4);
          size_t v30 = (char *)CVPixelBufferGetBaseAddress(a3);
          size_t v31 = (char *)CVPixelBufferGetBaseAddress(a4);
          if (CVPixelBufferGetHeight(a1))
          {
            size_t v32 = 0;
            size_t v33 = v71 >> 1;
            uint64_t v66 = 2 * (v28 >> 1);
            uint64_t v72 = 2 * (v29 >> 1);
            uint64_t v34 = 2 * v33;
            uint64_t v62 = 2 * a5;
            uint64_t v35 = 2 * (v25 >> 1);
            do
            {
              if (CVPixelBufferGetWidth(a2))
              {
                size_t v36 = 0;
                uint64_t v37 = v62;
                do
                {
                  *(_WORD *)&v30[2 * v36] = *(_WORD *)&v26[v37];
                  *(_WORD *)&v31[2 * v36++] = *(_WORD *)&v27[v37];
                  v37 += 8;
                }
                while (CVPixelBufferGetWidth(a2) > v36);
              }
              ++v32;
              v31 += v72;
              v30 += v66;
              v26 += v34;
              v27 += v35;
            }
            while (CVPixelBufferGetHeight(a1) > v32);
          }
          return 0;
        }
      }
      else if (v11 == 1111970369)
      {
        if (CVPixelBufferGetPixelFormatType(a3) == 1278226488)
        {
          size_t v73 = CVPixelBufferGetBytesPerRow(a1);
          size_t v67 = CVPixelBufferGetBytesPerRow(a2);
          size_t v38 = CVPixelBufferGetBaseAddress(a1);
          size_t v39 = CVPixelBufferGetBaseAddress(a2);
          size_t v40 = CVPixelBufferGetBytesPerRow(a3);
          size_t v41 = CVPixelBufferGetBytesPerRow(a4);
          uint64x2_t v42 = CVPixelBufferGetBaseAddress(a3);
          long long v43 = CVPixelBufferGetBaseAddress(a4);
          if (CVPixelBufferGetHeight(a1))
          {
            size_t v44 = 0;
            uint64_t v63 = a5;
            do
            {
              if (CVPixelBufferGetWidth(a2))
              {
                size_t v45 = 0;
                uint64_t v46 = v63;
                do
                {
                  v42[v45] = v38[v46];
                  v43[v45++] = v39[v46];
                  v46 += 4;
                }
                while (CVPixelBufferGetWidth(a2) > v45);
              }
              v38 += v73;
              v39 += v67;
              v42 += v40;
              v43 += v41;
              ++v44;
            }
            while (CVPixelBufferGetHeight(a1) > v44);
          }
          return 0;
        }
      }
      else if (v11 == 1380410945 && CVPixelBufferGetPixelFormatType(a3) == 1278226534)
      {
        size_t v69 = CVPixelBufferGetBytesPerRow(a1);
        size_t v12 = CVPixelBufferGetBytesPerRow(a2);
        double v13 = (char *)CVPixelBufferGetBaseAddress(a1);
        double v14 = (char *)CVPixelBufferGetBaseAddress(a2);
        size_t v15 = CVPixelBufferGetBytesPerRow(a3);
        size_t v16 = CVPixelBufferGetBytesPerRow(a4);
        int v17 = (char *)CVPixelBufferGetBaseAddress(a3);
        size_t v18 = (char *)CVPixelBufferGetBaseAddress(a4);
        if (CVPixelBufferGetHeight(a1))
        {
          size_t v19 = 0;
          size_t v20 = v69 >> 2;
          uint64_t v65 = 4 * (v15 >> 2);
          uint64_t v70 = 4 * (v16 >> 2);
          uint64_t v21 = 4 * v20;
          uint64_t v61 = 4 * a5;
          uint64_t v22 = 4 * (v12 >> 2);
          do
          {
            if (CVPixelBufferGetWidth(a2))
            {
              size_t v23 = 0;
              uint64_t v24 = v61;
              do
              {
                *(_DWORD *)&v17[4 * v23] = *(_DWORD *)&v13[v24];
                *(_DWORD *)&v18[4 * v23++] = *(_DWORD *)&v14[v24];
                v24 += 16;
              }
              while (CVPixelBufferGetWidth(a2) > v23);
            }
            ++v19;
            v18 += v70;
            v17 += v65;
            v13 += v21;
            v14 += v22;
          }
          while (CVPixelBufferGetHeight(a1) > v19);
        }
        return 0;
      }
    }
  }
  return FigSignalErrorAt();
}

double _findMaxSNRThatMakesSense(int a1, unint64_t a2)
{
  double result = 1.79769313e308;
  switch(a1)
  {
    case 1:
    case 5:
      if (a2 < 9)
      {
        double v3 = 50.0;
        goto LABEL_9;
      }
      if (a2 < 0xB) {
        double result = 52.5;
      }
      else {
        double result = dbl_1AB9D8560[a2 > 0xC];
      }
      break;
    case 2:
      double result = 0.998;
      break;
    case 6:
      double v3 = 80.0;
      goto LABEL_9;
    case 7:
      double v3 = 2048.0;
LABEL_9:
      double result = v3;
      break;
    default:
      return result;
  }
  return result;
}

double _limitMaxSNR(int a1, double result)
{
  switch(a1)
  {
    case 1:
    case 5:
      uint64_t v2 = 0x4054000000000000;
      goto LABEL_5;
    case 2:
      double v3 = 1.0;
      goto LABEL_6;
    case 6:
      uint64_t v2 = 0x4059000000000000;
LABEL_5:
      double v3 = *(double *)&v2;
LABEL_6:
      double result = fmin(result, v3);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t VideoQualityControllerClass_create()
{
  return 0;
}

uint64_t VideoQualityControllerClass_setTileProperties()
{
  return 0;
}

uint64_t CMPhotoVTPixelTransferWorkaround(__CVBuffer *a1, uint64_t a2, unint64_t a3, int a4, int a5, int a6, int a7, int a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12, double a13, double a14, CVPixelBufferRef *a15)
{
  size_t v29 = a15;
  uint64_t v619 = *MEMORY[0x1E4F143B8];
  signed int PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  CVPixelBufferRef v611 = 0;
  CVPixelBufferRef buffer = 0;
  size_t v609 = 0;
  size_t v610 = 0;
  v620.origin.x = a9;
  v620.origin.y = a10;
  v620.size.double width = a11;
  v620.size.double height = a12;
  if (!CGRectIsNull(v620) || a4 != 1) {
    goto LABEL_606;
  }
  if (a13 != *MEMORY[0x1E4F1DB30] || a14 != *(double *)(MEMORY[0x1E4F1DB30] + 8)) {
    goto LABEL_606;
  }
  CVPixelBufferRef pixelBuffer = a1;
  CMPhotoGetPixelBufferCLAP(a1, 0, 0, &v609, &v610);
  size_t v32 = *a15;
  if (*a15)
  {
    uint64_t v613 = 0;
    uint64_t v614 = 0;
    CMPhotoGetPixelBufferCLAP(v32, 0, 0, &v613, &v614);
    if (v609 != v613
      || v610 != v614
      || CVPixelBufferGetPixelFormatType(*a15) != a2
      || a3 && CVPixelBufferGetBytesPerRow(*a15) % a3)
    {
      goto LABEL_606;
    }
    CVPixelBufferRef buffer = *a15;
  }
  else
  {
    uint64_t v33 = _vtWorkaroundCreatePixelBufferHelper(a5, a2, v609, v610, a3, &buffer);
    if (v33) {
      goto LABEL_607;
    }
  }
  if (PixelFormatType > 1651519797)
  {
    if (PixelFormatType > 1751411058)
    {
      if (PixelFormatType > 1919378231)
      {
        if (PixelFormatType > 1952854575)
        {
          if (PixelFormatType <= 2016686639)
          {
            if (PixelFormatType != 1952854576 && PixelFormatType != 1953903152) {
              goto LABEL_606;
            }
            if (a2 != 1278226742)
            {
              if (a2 == 1278226488)
              {
                uint64_t v33 = _vtWorkaroundCreatePixelBufferHelper(a5, 875704422, v609, v610, a3, &v611);
                if (!v33) {
                  goto LABEL_100;
                }
                goto LABEL_607;
              }
LABEL_606:
              uint64_t v33 = FigSignalErrorAt();
              goto LABEL_607;
            }
            unint64_t v113 = buffer;
            uint64_t v114 = v609;
            uint64_t v115 = v610;
            int v116 = pixelBuffer;
            goto LABEL_441;
          }
          if (PixelFormatType != 2016686640 && PixelFormatType != 2019963440) {
            goto LABEL_606;
          }
          if ((int)a2 <= 1882468911)
          {
            uint64_t v68 = pixelBuffer;
            if (a2 == 1278226488)
            {
              uint64_t v33 = _vtWorkaroundCreatePixelBufferHelper(a5, 875704422, v609, v610, a3, &v611);
              if (!v33)
              {
LABEL_100:
                uint64_t v33 = _vtTransferHelperForWorkaround(a6, a7, a8, a5, pixelBuffer, v611);
                if (v33) {
                  goto LABEL_607;
                }
                goto LABEL_353;
              }
LABEL_607:
              uint64_t v374 = v33;
              goto LABEL_608;
            }
            if (a2 != 1278226742)
            {
              if (a2 != 1751527984 || PixelFormatType != 2019963440) {
                goto LABEL_606;
              }
              CVPixelBufferLockBaseAddress(pixelBuffer, 0);
              CVPixelBufferLockBaseAddress(buffer, 0);
              size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
              size_t v119 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
              BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
              int v121 = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
              size_t v122 = CVPixelBufferGetBytesPerRowOfPlane(buffer, 0);
              size_t v123 = CVPixelBufferGetBytesPerRowOfPlane(buffer, 1uLL);
              float64x2_t v124 = (char *)CVPixelBufferGetBaseAddressOfPlane(buffer, 0);
              unint64_t v125 = (char *)CVPixelBufferGetBaseAddressOfPlane(buffer, 1uLL);
              size_t v126 = v610;
              if (v610)
              {
                uint64_t v127 = 0;
                size_t v128 = v609;
                do
                {
                  if (v128)
                  {
                    unint64_t v129 = &v124[v127 * v122];
                    size_t v130 = v128;
                    float v131 = &BaseAddressOfPlane[v127 * BytesPerRowOfPlane];
                    do
                    {
                      unsigned int v132 = *(unsigned __int16 *)v131;
                      v131 += 2;
                      _S2 = fminf((float)(v132 >> 6) / 1023.0, 1.0);
                      __asm { FCVT            H2, S2 }
                      *(_WORD *)unint64_t v129 = LOWORD(_S2);
                      v129 += 2;
                      --v130;
                    }
                    while (v130);
                  }
                  ++v127;
                }
                while (v127 != v126);
                size_t v137 = 0;
                size_t v138 = v609;
                do
                {
                  if (v138)
                  {
                    for (size_t i = 0; i < v138; i += 2)
                    {
                      uint64_t v140 = &v121[2 * i];
                      float v141 = &v125[2 * i];
                      _S2 = fminf((float)(*(unsigned __int16 *)v140 >> 6) / 1023.0, 1.0);
                      __asm { FCVT            H2, S2 }
                      float v143 = (float)(*((unsigned __int16 *)v140 + 1) >> 6);
                      *(_WORD *)float v141 = LOWORD(_S2);
                      _S2 = fminf(v143 / 1023.0, 1.0);
                      __asm { FCVT            H2, S2 }
                      *((_WORD *)v141 + 1) = LOWORD(_S2);
                    }
                  }
                  v137 += 2;
                  v125 += v123;
                  v121 += v119;
                }
                while (v126 > v137);
              }
              goto LABEL_524;
            }
            unint64_t v113 = buffer;
            uint64_t v114 = v609;
            uint64_t v115 = v610;
            int v116 = pixelBuffer;
LABEL_441:
            uint64_t v117 = 0;
            goto LABEL_442;
          }
          if (a2 == 1882468912) {
            goto LABEL_292;
          }
          if (a2 != 1919365990)
          {
            if (a2 != 1885745712) {
              goto LABEL_606;
            }
LABEL_292:
            if (PixelFormatType == 2019963440) {
              int v195 = 1885745712;
            }
            else {
              int v195 = 1882468912;
            }
            if (v195 != a2) {
              goto LABEL_606;
            }
            CVPixelBufferLockBaseAddress(pixelBuffer, 0);
            CVPixelBufferLockBaseAddress(buffer, 0);
            int WidthOfPlane = CVPixelBufferGetWidthOfPlane(pixelBuffer, 0);
            int v596 = CVPixelBufferGetWidthOfPlane(pixelBuffer, 1uLL);
            int HeightOfPlane = CVPixelBufferGetHeightOfPlane(pixelBuffer, 0);
            int v586 = CVPixelBufferGetHeightOfPlane(pixelBuffer, 1uLL);
            int v196 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
            int v197 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
            int v198 = CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
            double v199 = CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
            size_t v36 = pixelBuffer;
            double v200 = CVPixelBufferGetBaseAddressOfPlane(buffer, 0);
            int v201 = CVPixelBufferGetBaseAddressOfPlane(buffer, 1uLL);
            int v202 = CVPixelBufferGetBytesPerRowOfPlane(buffer, 0);
            int v203 = CVPixelBufferGetBytesPerRowOfPlane(buffer, 1uLL);
            _frameLinear2Packed((uint64_t)v198, (uint64_t)v200, WidthOfPlane, HeightOfPlane, v196, v202, 0);
            _frameLinear2Packed((uint64_t)v199, (uint64_t)v201, v596, v586, v197, v203, 1);
            goto LABEL_476;
          }
          uint64_t v33 = _vtWorkaroundCreatePixelBufferHelper(a5, 1815491698, v609, v610, a3, &v611);
          if (v33) {
            goto LABEL_607;
          }
          float v293 = a15;
          uint64_t v348 = _vtTransferHelperForWorkaround(a6, a7, a8, a5, pixelBuffer, v611);
          if (!v348)
          {
            CVPixelBufferLockBaseAddress(v611, 0);
            CVPixelBufferLockBaseAddress(buffer, 0);
            uint64_t v349 = 0;
            for (size_t j = 0; j != 3; ++j)
            {
              size_t v351 = CVPixelBufferGetBytesPerRowOfPlane(buffer, j);
              int16x8_t v352 = (float *)CVPixelBufferGetBaseAddressOfPlane(buffer, j);
              size_t BytesPerRow = CVPixelBufferGetBytesPerRow(v611);
              BaseAddresCGColorSpaceRef s = (char *)CVPixelBufferGetBaseAddress(v611);
              size_t v355 = v610;
              if (v610)
              {
                uint64_t v356 = 0;
                size_t v357 = v609;
                int16x8_t v358 = &BaseAddress[v349];
                do
                {
                  int16x8_t v359 = v352;
                  size_t v360 = v357;
                  for (uint64_t k = v358; v360; --v360)
                  {
                    unsigned int v362 = *(unsigned __int16 *)k;
                    k += 8;
                    float v363 = (double)v362 / 65535.0;
                    *v359++ = v363;
                  }
                  ++v356;
                  v358 += BytesPerRow;
                  int16x8_t v352 = (float *)((char *)v352 + v351);
                }
                while (v356 != v355);
              }
              v349 += 2;
            }
LABEL_506:
            int8x16_t v426 = v611;
            CVPixelBufferLockFlags v427 = 0;
LABEL_537:
            CVPixelBufferUnlockBaseAddress(v426, v427);
            CVPixelBufferUnlockBaseAddress(buffer, 0);
            uint64_t v340 = v611;
            unint64_t v339 = buffer;
            goto LABEL_538;
          }
          goto LABEL_615;
        }
        if (PixelFormatType != 1919378232)
        {
          if (PixelFormatType != 1919379252)
          {
            if (PixelFormatType != 1919381552 || a2 != 1919378232) {
              goto LABEL_606;
            }
            size_t v51 = pixelBuffer;
            CVPixelBufferLockBaseAddress(pixelBuffer, 0);
            CVPixelBufferLockBaseAddress(buffer, 0);
            size_t Width = CVPixelBufferGetWidth(pixelBuffer);
            size_t Height = CVPixelBufferGetHeight(pixelBuffer);
            size_t v54 = CVPixelBufferGetBytesPerRow(pixelBuffer);
            size_t v55 = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
            uint64_t v56 = CVPixelBufferGetBaseAddress(buffer);
            size_t v57 = CVPixelBufferGetBytesPerRow(buffer);
            if (Height)
            {
              for (uint64_t m = 0; m != Height; ++m)
              {
                if (Width + 3 >= 4)
                {
                  unint64_t v59 = 0;
                  uint64_t v60 = 0;
                  uint64_t v61 = &v55[m * v54];
                  do
                  {
                    uint64_t v62 = 0;
                    unsigned int v63 = v61[v59 + 4];
                    LOWORD(v613) = v63 & 3 | (4 * v61[v59]);
                    WORD1(v613) = (v63 >> 2) & 3 | (4 * v61[v59 + 1]);
                    WORD2(v613) = (v63 >> 4) & 3 | (4 * v61[v59 + 2]);
                    HIWORD(v613) = (v63 >> 6) | (4 * v61[v59 + 3]);
                    do
                    {
                      __int16 v64 = *((_WORD *)&v613 + v62);
                      *((_WORD *)&v613 + v62) = 4 * v64;
                      v56[v60 + v62++] = LUT_compand_12b_to_8b[4 * (v64 & 0x3FFF)];
                    }
                    while (v62 != 4);
                    v59 += 5;
                    v60 += 4;
                  }
                  while (5 * ((Width + 3) >> 2) > v59);
                }
                v56 += v57;
              }
            }
            goto LABEL_381;
          }
          goto LABEL_166;
        }
        if ((int)a2 > 1278226487)
        {
          size_t v51 = pixelBuffer;
          if (a2 != 1278226488)
          {
            if (a2 != 1919381552) {
              goto LABEL_606;
            }
            CVPixelBufferLockBaseAddress(pixelBuffer, 0);
            CVPixelBufferLockBaseAddress(buffer, 0);
            size_t v255 = CVPixelBufferGetWidth(pixelBuffer);
            size_t v256 = CVPixelBufferGetHeight(pixelBuffer);
            size_t v257 = CVPixelBufferGetBytesPerRow(pixelBuffer);
            float64x2_t v258 = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
            double v259 = (char *)CVPixelBufferGetBaseAddress(buffer);
            size_t v260 = CVPixelBufferGetBytesPerRow(buffer);
            if (v256)
            {
              for (uint64_t n = 0; n != v256; ++n)
              {
                if (v255)
                {
                  size_t v262 = 0;
                  uint64_t v263 = 0;
                  int16x8_t v264 = v258;
                  do
                  {
                    int v265 = 0;
                    uint64_t v266 = 0;
                    BYTE4(v613) = 0;
                    do
                    {
                      unsigned int v267 = LUT_expand_8b_to_12b[v264[v266]];
                      *((unsigned char *)&v613 + v266) = v267 >> 4;
                      BYTE4(v613) |= ((v267 >> 2) & 3) << v265;
                      ++v266;
                      v265 += 2;
                    }
                    while (v266 != 4);
                    uint64_t v268 = &v259[v260 * n + v263];
                    *(_DWORD *)uint64_t v268 = v613;
                    v268[4] = BYTE4(v613);
                    v263 += 5;
                    v262 += 4;
                    v264 += 4;
                  }
                  while (v255 > v262);
                }
                v258 += v257;
              }
            }
LABEL_381:
            CVPixelBufferUnlockBaseAddress(v51, 0);
            CVPixelBufferUnlockBaseAddress(buffer, 0);
            goto LABEL_602;
          }
        }
        else
        {
          size_t v51 = pixelBuffer;
          if (a2 != 875704422 && a2 != 1111970369) {
            goto LABEL_606;
          }
        }
        unint64_t v107 = buffer;
        int v108 = a6;
        int v109 = a7;
        int v110 = a8;
        double v111 = v51;
        goto LABEL_164;
      }
      if (PixelFormatType <= 1882468911)
      {
        if (PixelFormatType != 1751411059)
        {
          if (PixelFormatType != 1751527984)
          {
            if (PixelFormatType != 1815491698) {
              goto LABEL_606;
            }
            if (a2 != 1919365990)
            {
              size_t v36 = pixelBuffer;
              if (a2 != 1647589490) {
                goto LABEL_606;
              }
              CVPixelBufferLockBaseAddress(pixelBuffer, 0);
              CVPixelBufferLockBaseAddress(buffer, 0);
              size_t v37 = CVPixelBufferGetBytesPerRow(pixelBuffer);
              size_t v38 = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
              size_t v39 = CVPixelBufferGetBytesPerRow(buffer);
              size_t v40 = (char *)CVPixelBufferGetBaseAddress(buffer);
              size_t v41 = v610;
              if (v610)
              {
                uint64_t v42 = 0;
                size_t v43 = v609;
                do
                {
                  if (v43)
                  {
                    size_t v44 = &v40[v42 * v39];
                    size_t v45 = v43;
                    uint64_t v46 = &v38[v42 * v37];
                    do
                    {
                      *(_WORD *)size_t v44 = *(_WORD *)v46;
                      *((_WORD *)v44 + 1) = *((_WORD *)v46 + 1);
                      *((_WORD *)v44 + 2) = *((_WORD *)v46 + 2);
                      v46 += 8;
                      v44 += 6;
                      --v45;
                    }
                    while (v45);
                  }
                  ++v42;
                }
                while (v42 != v41);
              }
              goto LABEL_476;
            }
            float v293 = a15;
            uint64_t v294 = pixelBuffer;
            CVPixelBufferLockBaseAddress(pixelBuffer, 0);
            CVPixelBufferLockBaseAddress(buffer, 0);
            uint64_t v295 = 0;
            for (isize_t i = 0; ii != 3; ++ii)
            {
              size_t v297 = CVPixelBufferGetBytesPerRowOfPlane(buffer, ii);
              unsigned int v298 = (float *)CVPixelBufferGetBaseAddressOfPlane(buffer, ii);
              size_t v299 = CVPixelBufferGetBytesPerRow(pixelBuffer);
              uint64_t v300 = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
              size_t v301 = v610;
              if (v610)
              {
                uint64_t v302 = 0;
                size_t v303 = v609;
                int16x8_t v304 = &v300[v295];
                do
                {
                  unint64_t v305 = v298;
                  size_t v306 = v303;
                  for (jsize_t j = v304; v306; --v306)
                  {
                    unsigned int v308 = *(unsigned __int16 *)jj;
                    jj += 8;
                    float v309 = (double)v308 / 65535.0;
                    *v305++ = v309;
                  }
                  ++v302;
                  v304 += v299;
                  unsigned int v298 = (float *)((char *)v298 + v297);
                }
                while (v302 != v301);
              }
              v295 += 2;
            }
            int v310 = pixelBuffer;
            CVPixelBufferLockFlags v311 = 0;
LABEL_430:
            CVPixelBufferUnlockBaseAddress(v310, v311);
            CVPixelBufferUnlockBaseAddress(buffer, 0);
            unint64_t v339 = buffer;
            uint64_t v340 = v294;
LABEL_538:
            CMPhotoRemoveAndPropagateColorPropertiesFromSourceBuffer(v340, v339);
            size_t v29 = v293;
            goto LABEL_602;
          }
          if ((int)a2 > 1647589489)
          {
            uint64_t v68 = pixelBuffer;
            if (a2 != 2019963440)
            {
              int v152 = 1647589490;
LABEL_367:
              if (a2 == v152)
              {
                CFDictionaryRef v252 = CVBufferCopyAttachments(v68, kCVAttachmentMode_ShouldPropagate);
                if (v252)
                {
                  CFDictionaryRef v253 = v252;
                  CMPhotoGetMatrixFromPixelBufferAttachments(v252);
                  if (FigCFEqual()) {
                    int v254 = 2;
                  }
                  else {
                    int v254 = FigCFEqual() != 0;
                  }
                  int8x16_t v464 = a15;
                  CFRelease(v253);
                }
                else
                {
                  int8x16_t v464 = a15;
                  int v254 = 0;
                }
                CVPixelBufferLockBaseAddress(v68, 0);
                CVPixelBufferLockBaseAddress(buffer, 0);
                size_t v465 = CVPixelBufferGetBytesPerRowOfPlane(v68, 0);
                size_t v466 = CVPixelBufferGetBytesPerRowOfPlane(v68, 1uLL);
                int8x16_t v467 = (char *)CVPixelBufferGetBaseAddressOfPlane(v68, 0);
                unsigned __int32 v468 = (char *)CVPixelBufferGetBaseAddressOfPlane(v68, 1uLL);
                size_t v469 = CVPixelBufferGetBytesPerRow(buffer);
                uint64_t v470 = (char *)CVPixelBufferGetBaseAddress(buffer);
                size_t v471 = v610;
                if (v610)
                {
                  uint64_t v472 = 0;
                  uint64_t v473 = 0;
                  size_t v474 = v609;
                  do
                  {
                    if ((int)v473 >= 0) {
                      int v475 = v473;
                    }
                    else {
                      int v475 = v473 + 1;
                    }
                    if (v474)
                    {
                      char v476 = 0;
                      uint64_t v477 = 0;
                      int v478 = 2 * (v473 & 1) + (v475 >> 1) - 1;
                      int8x16_t v479 = &v468[(v466 * ((uint64_t)v475 >> 1)) & 0xFFFFFFFFFFFFFFFELL];
                      int8x16_t v480 = &v468[(v466 * v478) & 0xFFFFFFFFFFFFFFFELL];
                      int8x16_t v481 = &v470[(v473 * v469) & 0xFFFFFFFFFFFFFFFELL];
                      int8x16_t v482 = v481;
                      do
                      {
                        if ((int)v477 >= 0) {
                          int v483 = v477;
                        }
                        else {
                          int v483 = v477 + 1;
                        }
                        int v484 = (v476 & 2) + (v483 >> 1);
                        _H21 = *(_WORD *)&v467[2 * v477 + (v472 & 0xFFFFFFFFFFFFFFFELL)];
                        uint64_t v486 = (uint64_t)v483 >> 1;
                        signed int v487 = v483 & 0xFFFFFFFE;
                        _H22 = *(_WORD *)&v479[2 * v487];
                        __asm { FCVT            S22, H22 }
                        v484 *= 2;
                        _H23 = *(_WORD *)&v479[2 * v484 - 4];
                        __asm { FCVT            S23, H23 }
                        _H24 = *(_WORD *)&v480[2 * v487];
                        float v493 = (float)(_S23 * 3.0) + (float)(_S22 * 9.0);
                        __asm { FCVT            S23, H24 }
                        float v495 = v493 + (float)(_S23 * 3.0);
                        LOWORD(_S23) = *(_WORD *)&v480[2 * v484 - 4];
                        __asm { FCVT            S23, H23 }
                        _S22 = (float)(v495 + _S23) * 0.0625;
                        uint64_t v498 = (4 * v486) | 2;
                        _H24 = *(_WORD *)&v479[v498];
                        __asm
                        {
                          FCVT            H22, S22
                          FCVT            S24, H24
                        }
                        _H25 = *(_WORD *)&v479[2 * --v484];
                        __asm { FCVT            S25, H25 }
                        float v503 = (float)(_S25 * 3.0) + (float)(_S24 * 9.0);
                        LOWORD(_S25) = *(_WORD *)&v480[v498];
                        __asm { FCVT            S25, H25 }
                        float v505 = v503 + (float)(_S25 * 3.0);
                        LOWORD(_S25) = *(_WORD *)&v480[2 * v484];
                        __asm { FCVT            S25, H25 }
                        _S23 = (float)(v505 + _S25) * 0.0625;
                        __asm
                        {
                          FCVT            H23, S23
                          FCVT            S21, H21
                          FCVT            S24, H22
                          FCVT            S22, H23
                        }
                        float v511 = (float)(_S24 * 0.0) + _S21;
                        if (v254 == 2)
                        {
                          float v512 = v511 + (float)(_S22 * 1.5748);
                          _S23 = (float)(_S21 + (float)(_S24 * -0.18732)) + (float)(_S22 * -0.46812);
                          float v514 = 1.8556;
                        }
                        else
                        {
                          float v512 = v511 + (float)(_S22 * 1.402);
                          _S23 = (float)(_S21 + (float)(_S24 * -0.34414)) + (float)(_S22 * -0.71414);
                          float v514 = 1.772;
                        }
                        _S21 = (float)((float)(v514 * _S24) + _S21) + (float)(_S22 * 0.0);
                        if (v512 >= 0.0) {
                          _S22 = v512;
                        }
                        else {
                          _S22 = 0.0;
                        }
                        if (_S22 > 1.0) {
                          _S22 = 1.0;
                        }
                        __asm { FCVT            H22, S22 }
                        if (a2 == 1380411457)
                        {
                          *(_WORD *)int8x16_t v482 = _H22;
                          if (_S23 >= 0.0) {
                            _S22 = _S23;
                          }
                          else {
                            _S22 = 0.0;
                          }
                          if (_S22 > 1.0) {
                            _S22 = 1.0;
                          }
                          __asm { FCVT            H22, S22 }
                          *((_WORD *)v482 + 1) = _H22;
                          if (_S21 < 0.0) {
                            _S21 = 0.0;
                          }
                          if (_S21 > 1.0) {
                            _S21 = 1.0;
                          }
                          __asm { FCVT            H21, S21 }
                          *((_WORD *)v482 + 2) = _H21;
                          v482 += 8;
                        }
                        else
                        {
                          if (_S23 < 0.0) {
                            _S23 = 0.0;
                          }
                          if (_S23 > 1.0) {
                            _S23 = 1.0;
                          }
                          __asm { FCVT            H23, S23 }
                          if (_S21 < 0.0) {
                            _S21 = 0.0;
                          }
                          if (_S21 > 1.0) {
                            _S21 = 1.0;
                          }
                          __asm
                          {
                            FCVT            H21, S21
                            FCVT            D22, H22
                          }
                          *(_WORD *)int8x16_t v481 = (int)(_D22 * 65535.0);
                          __asm { FCVT            D22, H23 }
                          *((_WORD *)v481 + 1) = (int)(_D22 * 65535.0);
                          __asm { FCVT            D21, H21 }
                          *((_WORD *)v481 + 2) = (int)(_D21 * 65535.0);
                          v481 += 6;
                        }
                        ++v477;
                        v476 += 2;
                      }
                      while (v474 != v477);
                    }
                    ++v473;
                    v472 += v465;
                  }
                  while (v473 != v471);
                }
                CVPixelBufferUnlockBaseAddress(v68, 0);
                CVPixelBufferUnlockBaseAddress(buffer, 0);
                CMPhotoRemoveAndPropagateColorPropertiesFromSourceBuffer(v68, buffer);
                size_t v29 = v464;
                goto LABEL_602;
              }
              goto LABEL_606;
            }
            CVPixelBufferLockBaseAddress(pixelBuffer, 0);
            CVPixelBufferLockBaseAddress(buffer, 0);
            size_t v428 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
            size_t v429 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
            int32x4_t v430 = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
            int32x4_t v431 = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
            size_t v432 = CVPixelBufferGetBytesPerRowOfPlane(buffer, 0);
            size_t v433 = CVPixelBufferGetBytesPerRowOfPlane(buffer, 1uLL);
            uint16x8_t v434 = (char *)CVPixelBufferGetBaseAddressOfPlane(buffer, 0);
            uint16x8_t v435 = (char *)CVPixelBufferGetBaseAddressOfPlane(buffer, 1uLL);
            size_t v436 = v610;
            if (v610)
            {
              uint64_t v437 = 0;
              size_t v438 = v609;
              do
              {
                if (v438)
                {
                  uint16x8_t v439 = &v434[v437 * v432];
                  size_t v440 = v438;
                  int8x16_t v441 = &v430[v437 * v428];
                  do
                  {
                    v441 += 2;
                    __asm { FCMP            H2, #0 }
                    if (_NF) {
                      _H2 = COERCE_SHORT_FLOAT(0);
                    }
                    *(_WORD *)uint16x8_t v439 = (unsigned __int16)(int)_H2 << 6;
                    v439 += 2;
                    --v440;
                  }
                  while (v440);
                }
                ++v437;
              }
              while (v437 != v436);
              size_t v443 = 0;
              size_t v444 = v609;
              do
              {
                if (v444)
                {
                  for (kuint64_t k = 0; kk < v444; kk += 2)
                  {
                    uint16x8_t v446 = &v435[2 * kk];
                    __asm { FCMP            H2, #0 }
                    if (_NF) {
                      _H2 = COERCE_SHORT_FLOAT(0);
                    }
                    *(_WORD *)uint16x8_t v446 = (unsigned __int16)(int)_H2 << 6;
                    __asm { FCMP            H2, #0 }
                    if (_NF) {
                      _H2 = COERCE_SHORT_FLOAT(0);
                    }
                    *((_WORD *)v446 + 1) = (unsigned __int16)(int)_H2 << 6;
                  }
                }
                v443 += 2;
                v435 += v433;
                v431 += v429;
              }
              while (v436 > v443);
            }
          }
          else
          {
            uint64_t v68 = pixelBuffer;
            if (a2 != 875704422)
            {
              int v152 = 1380411457;
              goto LABEL_367;
            }
            CVPixelBufferLockBaseAddress(pixelBuffer, 0);
            CVPixelBufferLockBaseAddress(buffer, 0);
            size_t v396 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
            size_t v397 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
            int16x8_t v398 = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
            int16x8_t v399 = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
            size_t v400 = CVPixelBufferGetBytesPerRowOfPlane(buffer, 0);
            size_t v401 = CVPixelBufferGetBytesPerRowOfPlane(buffer, 1uLL);
            uint16x8_t v402 = CVPixelBufferGetBaseAddressOfPlane(buffer, 0);
            uint16x8_t v403 = (char *)CVPixelBufferGetBaseAddressOfPlane(buffer, 1uLL);
            size_t v404 = v610;
            if (v610)
            {
              size_t v405 = 0;
              size_t v406 = v609;
              do
              {
                if (v406)
                {
                  size_t v407 = 0;
                  do
                  {
                    __asm { FCMP            H2, #0 }
                    if (_NF) {
                      _H2 = COERCE_SHORT_FLOAT(0);
                    }
                    v402[v407++] = (int)_H2;
                    size_t v406 = v609;
                  }
                  while (v609 > v407);
                  size_t v404 = v610;
                }
                ++v405;
                v402 += v400;
                v398 += v396;
              }
              while (v404 > v405);
              if (v404)
              {
                size_t v409 = 0;
                size_t v410 = v609;
                do
                {
                  if (v410)
                  {
                    size_t v411 = 0;
                    do
                    {
                      int8x16_t v412 = &v403[v411];
                      __asm { FCMP            H2, #0 }
                      if (_NF) {
                        _H2 = COERCE_SHORT_FLOAT(0);
                      }
                      *int8x16_t v412 = (int)_H2;
                      __asm { FCMP            H2, #0 }
                      if (_NF) {
                        _H2 = COERCE_SHORT_FLOAT(0);
                      }
                      v412[1] = (int)_H2;
                      v411 += 2;
                      size_t v410 = v609;
                    }
                    while (v609 > v411);
                    size_t v404 = v610;
                  }
                  v409 += 2;
                  v403 += v401;
                  v399 += v397;
                }
                while (v404 > v409);
              }
            }
          }
LABEL_524:
          uint64x2_t v346 = v68;
          CVPixelBufferLockFlags v347 = 0;
LABEL_525:
          CVPixelBufferUnlockBaseAddress(v346, v347);
          CVPixelBufferUnlockBaseAddress(buffer, 0);
          double v105 = buffer;
          float64x2_t v106 = v68;
          goto LABEL_526;
        }
        goto LABEL_141;
      }
      if (PixelFormatType != 1882468912 && PixelFormatType != 1885745712)
      {
        if (PixelFormatType != 1919365990 || a2 != 1815491698 && a2 != 1111970369) {
          goto LABEL_606;
        }
        uint64_t v68 = pixelBuffer;
        size_t v69 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
        unint64_t v70 = v69 / CMPhotoGetBytesPerPixelForPixelFormat(1919365990);
        size_t v71 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
        unint64_t BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(1919365990);
        size_t v73 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 2uLL);
        unint64_t v74 = CMPhotoGetBytesPerPixelForPixelFormat(1919365990);
        if (v70 % CMPhotoGetBytesPerPixelForPixelFormat(1919365990)) {
          goto LABEL_606;
        }
        size_t v75 = v71 / BytesPerPixelForPixelFormat;
        if (v71 / BytesPerPixelForPixelFormat % CMPhotoGetBytesPerPixelForPixelFormat(1919365990)) {
          goto LABEL_606;
        }
        size_t v76 = v73 / v74;
        if (v73 / v74 % CMPhotoGetBytesPerPixelForPixelFormat(1919365990)) {
          goto LABEL_606;
        }
        size_t v77 = CVPixelBufferGetBytesPerRow(buffer);
        CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
        CVPixelBufferLockBaseAddress(buffer, 0);
        unint64_t v78 = (float *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
        uint64_t v79 = (float *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
        float v80 = (float *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 2uLL);
        uint64_t v81 = (char *)CVPixelBufferGetBaseAddress(buffer);
        size_t v82 = v610;
        if (a2 == 1111970369)
        {
          if (v610)
          {
            size_t v83 = 0;
            size_t v84 = v609;
            do
            {
              if (v84)
              {
                size_t v85 = 0;
                size_t v86 = &v81[v83 * v77];
                do
                {
                  *size_t v86 = (int)fmin(v80[v85 + v83 * v76] * 255.0 + 0.5, 255.0);
                  v86[1] = (int)fmin(v79[v85 + v83 * v75] * 255.0 + 0.5, 255.0);
                  v86[2] = (int)fmin(v78[v85 + v83 * v70] * 255.0 + 0.5, 255.0);
                  v86[3] = -1;
                  v86 += 4;
                  ++v85;
                  size_t v84 = v609;
                }
                while (v609 > v85);
                size_t v82 = v610;
              }
              ++v83;
            }
            while (v82 > v83);
          }
        }
        else if (v610)
        {
          uint64_t v341 = 0;
          size_t v342 = v609;
          do
          {
            if (v342)
            {
              uint64_t v343 = 0;
              uint64x2_t v344 = &v81[v341 * v77];
              size_t v345 = v342;
              do
              {
                *(_WORD *)uint64x2_t v344 = (int)fmin(v80[v343 + v341 * v76] * 65535.0 + 0.5, 65535.0);
                *((_WORD *)v344 + 1) = (int)fmin(v79[v343 + v341 * v75] * 65535.0 + 0.5, 65535.0);
                *((_WORD *)v344 + 2) = (int)fmin(v78[v343 + v341 * v70] * 65535.0 + 0.5, 65535.0);
                *((_WORD *)v344 + 3) = -1;
                ++v343;
                v344 += 8;
                --v345;
              }
              while (v345);
            }
            ++v341;
          }
          while (v341 != v82);
        }
        uint64x2_t v346 = pixelBuffer;
        CVPixelBufferLockFlags v347 = 1;
        goto LABEL_525;
      }
      if ((int)a2 <= 1815491697)
      {
        float v146 = pixelBuffer;
        if (a2 != 875704422 && a2 != 875704438 && a2 != 1111970369) {
          goto LABEL_606;
        }
        goto LABEL_309;
      }
      float v146 = pixelBuffer;
      if (a2 == 1815491698)
      {
LABEL_309:
        if (PixelFormatType == 1885745712) {
          uint64_t v214 = 2019963440;
        }
        else {
          uint64_t v214 = 2016686640;
        }
        uint64_t v33 = _vtWorkaroundCreatePixelBufferHelper(a5, v214, v609, v610, a3, &v611);
        if (v33) {
          goto LABEL_607;
        }
        CVPixelBufferLockBaseAddress(v146, 0);
        CVPixelBufferLockBaseAddress(v611, 0);
        int v598 = CVPixelBufferGetWidthOfPlane(v146, 0);
        int pixelBuffera = CVPixelBufferGetWidthOfPlane(v146, 1uLL);
        unsigned int v588 = CVPixelBufferGetHeightOfPlane(v146, 0);
        unsigned int v593 = CVPixelBufferGetHeightOfPlane(v146, 1uLL);
        int v580 = CVPixelBufferGetBytesPerRowOfPlane(v146, 0);
        int v583 = CVPixelBufferGetBytesPerRowOfPlane(v146, 1uLL);
        uint64_t v577 = CVPixelBufferGetBaseAddressOfPlane(v146, 0);
        int8x16_t v579 = CVPixelBufferGetBaseAddressOfPlane(v146, 1uLL);
        double v215 = CVPixelBufferGetBaseAddressOfPlane(v611, 0);
        double v216 = CVPixelBufferGetBaseAddressOfPlane(v611, 1uLL);
        int v217 = CVPixelBufferGetBytesPerRowOfPlane(v611, 0);
        int v218 = CVPixelBufferGetBytesPerRowOfPlane(v611, 1uLL);
        _framePacked2Linear((uint64_t)v577, (uint64_t)v215, v598, v588, v580, v217, 0);
        _framePacked2Linear((uint64_t)v579, (uint64_t)v216, pixelBuffera, v593, v583, v218, 1);
        CVPixelBufferUnlockBaseAddress(v146, 0);
        CVPixelBufferUnlockBaseAddress(v611, 0);
        CMPhotoRemoveAndPropagateColorPropertiesFromSourceBuffer(v146, v611);
        goto LABEL_353;
      }
      if (a2 != 2019963440 && a2 != 2016686640) {
        goto LABEL_606;
      }
      int v205 = PixelFormatType == 1885745712 ? 2019963440 : 2016686640;
      if (v205 != a2) {
        goto LABEL_606;
      }
      CVPixelBufferLockBaseAddress(pixelBuffer, 0);
      CVPixelBufferLockBaseAddress(buffer, 0);
      int v592 = CVPixelBufferGetWidthOfPlane(pixelBuffer, 0);
      int v597 = CVPixelBufferGetWidthOfPlane(pixelBuffer, 1uLL);
      unsigned int v582 = CVPixelBufferGetHeightOfPlane(pixelBuffer, 0);
      unsigned int v587 = CVPixelBufferGetHeightOfPlane(pixelBuffer, 1uLL);
      int v206 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
      int v207 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
      double v208 = CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
      double v209 = CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
      size_t v36 = pixelBuffer;
      double v210 = CVPixelBufferGetBaseAddressOfPlane(buffer, 0);
      int v211 = CVPixelBufferGetBaseAddressOfPlane(buffer, 1uLL);
      int v212 = CVPixelBufferGetBytesPerRowOfPlane(buffer, 0);
      int v213 = CVPixelBufferGetBytesPerRowOfPlane(buffer, 1uLL);
      _framePacked2Linear((uint64_t)v208, (uint64_t)v210, v592, v582, v206, v212, 0);
      _framePacked2Linear((uint64_t)v209, (uint64_t)v211, v597, v587, v207, v213, 1);
LABEL_476:
      CVPixelBufferUnlockBaseAddress(v36, 0);
      CVPixelBufferUnlockBaseAddress(buffer, 0);
      double v105 = buffer;
      float64x2_t v106 = v36;
      goto LABEL_526;
    }
    if (PixelFormatType <= 1717856626)
    {
      if (PixelFormatType <= 1651926375)
      {
        if (PixelFormatType != 1651519798)
        {
          if (PixelFormatType == 1651847472)
          {
            if (a2 != 1815491698 && a2 != 1278226742) {
              goto LABEL_606;
            }
            uint64_t v33 = _vtWorkaroundCreatePixelBufferHelper(a5, 1278226736, v609, v610, a3, &v611);
            if (v33) {
              goto LABEL_607;
            }
            uint64_t v88 = v610;
            unint64_t v87 = v611;
            uint64_t v89 = v609;
            uint64_t v90 = pixelBuffer;
            uint64_t v147 = 6;
            goto LABEL_351;
          }
          if (PixelFormatType != 1651925816) {
            goto LABEL_606;
          }
          goto LABEL_160;
        }
        int64x2_t v145 = pixelBuffer;
        if ((int)a2 > 1651519797)
        {
          if (a2 != 2019963440 && a2 != 1815491698)
          {
            int v204 = 1651519798;
            goto LABEL_345;
          }
          goto LABEL_347;
        }
        if (a2 != 1278226488)
        {
          int v151 = 1278226736;
          goto LABEL_299;
        }
        goto LABEL_347;
      }
      if (PixelFormatType == 1651926376)
      {
        int64x2_t v145 = pixelBuffer;
        if (a2 != 1815491698 && a2 != 1278226742) {
          goto LABEL_606;
        }
        size_t v180 = v609;
        size_t v181 = v610;
        uint64_t v182 = 1278226536;
        int v183 = a5;
        goto LABEL_348;
      }
      if (PixelFormatType == 1652056888) {
        goto LABEL_160;
      }
      int v65 = 1717855600;
      goto LABEL_132;
    }
    if (PixelFormatType > 1735549491)
    {
      if (PixelFormatType != 1735549492)
      {
        if (PixelFormatType != 1735549752)
        {
          if (PixelFormatType != 1751410032) {
            goto LABEL_606;
          }
LABEL_141:
          if (a2 != 1278226488) {
            goto LABEL_606;
          }
          uint64_t v33 = _vtWorkaroundCreatePixelBufferHelper(a5, 1278226536, v609, v610, a3, &v611);
          if (v33) {
            goto LABEL_607;
          }
          uint64_t v88 = v610;
          unint64_t v87 = v611;
          uint64_t v89 = v609;
          uint64_t v90 = pixelBuffer;
          goto LABEL_350;
        }
LABEL_160:
        if (a2 != 875704422 && a2 != 1278226488 && a2 != 1111970369) {
          goto LABEL_606;
        }
        unint64_t v107 = buffer;
        int v108 = a6;
        int v109 = a7;
        int v110 = a8;
        double v111 = pixelBuffer;
LABEL_164:
        uint64_t v33 = _convert8bitsRAWTo8BitsReadableFormat(v108, v109, v110, v111, v107, a5);
        if (v33) {
          goto LABEL_607;
        }
        goto LABEL_602;
      }
    }
    else
    {
      if (PixelFormatType == 1717856627)
      {
LABEL_133:
        if ((int)a2 > 1278226741)
        {
          if (a2 != 1278226742)
          {
            if (a2 == 2019963440)
            {
              uint64_t v291 = _vtWorkaroundCreatePixelBufferHelper(a5, 1278226736, v609, v610, a3, &v611);
              if (v291
                || (uint64_t v291 = CMPhotoCreateIntegerPixelBufferFromFullPrecisionSource(pixelBuffer, 0, 1278226534, 0xAu, 1, 0, 0, 0, &v611, 0), v291))
              {
                uint64_t v374 = v291;
                goto LABEL_608;
              }
              if (!v32)
              {
                if (buffer) {
                  CFRelease(buffer);
                }
                unint64_t v292 = v611;
                CVPixelBufferRef v611 = 0;
                CVPixelBufferRef buffer = v292;
                goto LABEL_602;
              }
              goto LABEL_353;
            }
            if (a2 == 1815491698)
            {
              uint64_t v148 = _vtWorkaroundCreatePixelBufferHelper(a5, 1278226742, v609, v610, a3, &v611);
              if (v148
                || (unsigned __int8 BitDepthForPixelFormat = CMPhotoGetBitDepthForPixelFormat(1278226742),
                    uint64_t v148 = CMPhotoCreateIntegerPixelBufferFromFullPrecisionSource(pixelBuffer, 0, 1278226534, BitDepthForPixelFormat, 1, 0, 0, 0, &v611, 0), v148))
              {
                uint64_t v374 = v148;
                goto LABEL_608;
              }
              uint64_t v33 = _vtTransferHelperForWorkaround(a6, a7, a8, a5, v611, buffer);
              if (v33) {
                goto LABEL_607;
              }
              goto LABEL_602;
            }
            goto LABEL_606;
          }
        }
        else if (a2 != 1278226488)
        {
          if (a2 == 1278226536)
          {
            uint64_t v33 = CMPhotoCreateHalfPrecisionPixelBufferFromFullPrecisionSource(pixelBuffer, 0, a5, 0, 0, 0, &buffer);
            if (v33) {
              goto LABEL_607;
            }
            goto LABEL_602;
          }
          if (a2 != 1278226736) {
            goto LABEL_606;
          }
        }
        unsigned __int8 v150 = CMPhotoGetBitDepthForPixelFormat(a2);
        uint64_t v33 = CMPhotoCreateIntegerPixelBufferFromFullPrecisionSource(pixelBuffer, 0, 1278226534, v150, 1, 0, 0, 0, &buffer, 0);
        if (v33) {
          goto LABEL_607;
        }
LABEL_602:
        uint64_t v374 = 0;
        *size_t v29 = buffer;
        CVPixelBufferRef buffer = 0;
        goto LABEL_603;
      }
      if (PixelFormatType == 1734501176) {
        goto LABEL_160;
      }
      if (PixelFormatType != 1734505012) {
        goto LABEL_606;
      }
    }
LABEL_166:
    if ((int)a2 > 1815162993)
    {
      int v112 = pixelBuffer;
      if (a2 != 1815162994 && a2 != 1815491698) {
        goto LABEL_606;
      }
    }
    else
    {
      int v112 = pixelBuffer;
      if (a2 != 1111970369)
      {
        if (a2 != 1278226742) {
          goto LABEL_606;
        }
        unint64_t v113 = buffer;
        uint64_t v114 = v609;
        uint64_t v115 = v610;
        int v116 = pixelBuffer;
        uint64_t v117 = 2;
LABEL_442:
        uint64_t v33 = _directPixelBufferCopy(v116, v113, v117, 0, v114, v115);
        if (v33) {
          goto LABEL_607;
        }
        goto LABEL_602;
      }
    }
    uint64_t v33 = _vtWorkaroundCreatePixelBufferHelper(a5, 1278226742, v609, v610, a3, &v611);
    if (v33) {
      goto LABEL_607;
    }
    uint64_t v88 = v610;
    unint64_t v87 = v611;
    uint64_t v89 = v609;
    uint64_t v90 = v112;
    uint64_t v147 = 2;
    goto LABEL_351;
  }
  if (PixelFormatType <= 1278226535)
  {
    if (PixelFormatType > 875704949)
    {
      if (PixelFormatType <= 1111970368)
      {
        if (PixelFormatType == 875704950 || PixelFormatType == 875836518)
        {
LABEL_98:
          if (a2 == 1278226488)
          {
            uint64_t v33 = _vtWorkaroundCreatePixelBufferHelper(a5, 875704422, v609, v610, a3, &v611);
            if (!v33) {
              goto LABEL_100;
            }
            goto LABEL_607;
          }
          goto LABEL_606;
        }
        int v47 = 875836534;
LABEL_97:
        if (PixelFormatType != v47) {
          goto LABEL_606;
        }
        goto LABEL_98;
      }
      if (PixelFormatType == 1111970369)
      {
        if (a2 != 1919365990)
        {
          size_t v36 = pixelBuffer;
          if (a2 != 1380401729) {
            goto LABEL_606;
          }
          CVPixelBufferLockBaseAddress(pixelBuffer, 0);
          CVPixelBufferLockBaseAddress(buffer, 0);
          size_t v184 = CVPixelBufferGetBytesPerRow(pixelBuffer);
          double v185 = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
          uint64_t v186 = (char *)CVPixelBufferGetBaseAddress(buffer);
          size_t v187 = CVPixelBufferGetBytesPerRow(buffer);
          size_t v188 = v610;
          if (v610)
          {
            size_t v189 = 0;
            size_t v190 = v609;
            double v191 = v185 + 1;
            do
            {
              if (v190)
              {
                size_t v192 = 0;
                uint64_t v193 = &v186[v189 * v187];
                double v194 = v191;
                do
                {
                  *uint64_t v193 = v194[1];
                  v193[1] = *v194;
                  v193[2] = *(v194 - 1);
                  v193[3] = v194[2];
                  v193 += 4;
                  ++v192;
                  size_t v190 = v609;
                  v194 += 4;
                }
                while (v609 > v192);
                size_t v188 = v610;
              }
              ++v189;
              v191 += v184;
            }
            while (v188 > v189);
          }
          goto LABEL_476;
        }
        float v293 = a15;
        uint64_t v294 = pixelBuffer;
        CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
        CVPixelBufferLockBaseAddress(buffer, 0);
        size_t v324 = 0;
        uint64_t v325 = 2;
        do
        {
          size_t v326 = CVPixelBufferGetBytesPerRowOfPlane(buffer, v324);
          uint64_t v327 = (float *)CVPixelBufferGetBaseAddressOfPlane(buffer, v324);
          size_t v328 = CVPixelBufferGetBytesPerRow(pixelBuffer);
          CGFloat v329 = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
          size_t v330 = v610;
          if (v610)
          {
            uint64_t v331 = 0;
            size_t v332 = v609;
            float64_t v333 = &v329[v325];
            do
            {
              float64_t v334 = v333;
              float64_t v335 = v327;
              for (muint64_t m = v332; mm; --mm)
              {
                unsigned int v337 = *v334;
                v334 += 4;
                float v338 = (double)v337 / 255.0;
                *v335++ = v338;
              }
              ++v331;
              uint64_t v327 = (float *)((char *)v327 + v326);
              v333 += v328;
            }
            while (v331 != v330);
          }
          ++v324;
          --v325;
        }
        while (v324 != 3);
        int v310 = pixelBuffer;
        CVPixelBufferLockFlags v311 = 1;
        goto LABEL_430;
      }
      if (PixelFormatType != 1278226488)
      {
        int v65 = 1278226534;
LABEL_132:
        if (PixelFormatType != v65) {
          goto LABEL_606;
        }
        goto LABEL_133;
      }
      size_t v36 = pixelBuffer;
      if (a2 != 1279340600)
      {
        if (a2 == 1278226742)
        {
          CVPixelBufferLockBaseAddress(pixelBuffer, 0);
          CVPixelBufferLockBaseAddress(buffer, 0);
          size_t v385 = CVPixelBufferGetBytesPerRow(pixelBuffer);
          int32x4_t v386 = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
          size_t v387 = CVPixelBufferGetBytesPerRow(buffer);
          uint16x8_t v388 = (char *)CVPixelBufferGetBaseAddress(buffer);
          size_t v389 = v610;
          if (v610)
          {
            uint64_t v390 = 0;
            size_t v391 = v609;
            do
            {
              if (v391)
              {
                uint16x8_t v392 = &v388[v390 * v387];
                size_t v393 = v391;
                uint16x8_t v394 = &v386[v390 * v385];
                do
                {
                  __int16 v395 = *v394++;
                  *(_WORD *)uint16x8_t v392 = v395 | (v395 << 8);
                  v392 += 2;
                  --v393;
                }
                while (v393);
              }
              ++v390;
            }
            while (v390 != v389);
          }
          goto LABEL_476;
        }
        if (a2 != 843264056) {
          goto LABEL_606;
        }
      }
      uint64_t v66 = buffer;
      size_t v67 = pixelBuffer;
LABEL_287:
      uint64_t v33 = _pixelBufferCopyForMonochromeAndMonochromeWithAlpha(v67, v66);
      if (v33) {
        goto LABEL_607;
      }
      goto LABEL_602;
    }
    if (PixelFormatType <= 843264309)
    {
      if (PixelFormatType == 825306677 || PixelFormatType == 825437747)
      {
        if ((int)a2 > 1278226741)
        {
          int64x2_t v145 = pixelBuffer;
          if (a2 != 1815491698)
          {
            int v151 = 1815162994;
LABEL_299:
            if (a2 != v151)
            {
              int v204 = 1278226742;
LABEL_345:
              if (a2 != v204) {
                goto LABEL_606;
              }
              unint64_t v113 = buffer;
              uint64_t v114 = v609;
              uint64_t v115 = v610;
              int v116 = v145;
              goto LABEL_441;
            }
          }
        }
        else
        {
          int64x2_t v145 = pixelBuffer;
          if (a2 != 1111970369 && a2 != 1278226488 && a2 != 1278226736) {
            goto LABEL_606;
          }
        }
LABEL_347:
        size_t v180 = v609;
        size_t v181 = v610;
        int v183 = a5;
        uint64_t v182 = 1278226742;
LABEL_348:
        uint64_t v33 = _vtWorkaroundCreatePixelBufferHelper(v183, v182, v180, v181, a3, &v611);
        if (v33) {
          goto LABEL_607;
        }
        uint64_t v88 = v610;
        unint64_t v87 = v611;
        uint64_t v89 = v609;
        uint64_t v90 = v145;
LABEL_350:
        uint64_t v147 = 0;
LABEL_351:
        int v238 = 0;
LABEL_352:
        uint64_t v33 = _directPixelBufferCopy(v90, v87, v147, v238, v89, v88);
        if (v33) {
          goto LABEL_607;
        }
LABEL_353:
        uint64_t v33 = _vtTransferHelperForWorkaround(a6, a7, a8, a5, v611, buffer);
        if (v33) {
          goto LABEL_607;
        }
        goto LABEL_602;
      }
      if (PixelFormatType != 843264056) {
        goto LABEL_606;
      }
      goto LABEL_194;
    }
    if (PixelFormatType != 843264310)
    {
      if (PixelFormatType != 875704422)
      {
        int v47 = 875704934;
        goto LABEL_97;
      }
      if ((int)a2 <= 1751527983)
      {
        if (a2 == 1278226738)
        {
          uint64_t v33 = _vtWorkaroundCreatePixelBufferHelper(a5, 1278226742, v609, v610, a3, &v611);
          if (v33) {
            goto LABEL_607;
          }
          float v293 = a15;
          uint64_t v348 = _vtTransferHelperForWorkaround(a6, a7, a8, a5, pixelBuffer, v611);
          if (!v348)
          {
            CVPixelBufferLockBaseAddress(v611, 0);
            CVPixelBufferLockBaseAddress(buffer, 0);
            size_t v415 = CVPixelBufferGetBytesPerRow(v611);
            int16x8_t v416 = (char *)CVPixelBufferGetBaseAddress(v611);
            size_t v417 = CVPixelBufferGetBytesPerRow(buffer);
            uint16x8_t v418 = (char *)CVPixelBufferGetBaseAddress(buffer);
            size_t v419 = v610;
            if (v610)
            {
              uint64_t v420 = 0;
              size_t v421 = v609;
              do
              {
                if (v421)
                {
                  uint16x8_t v422 = &v418[v420 * v417];
                  size_t v423 = v421;
                  uint16x8_t v424 = &v416[v420 * v415];
                  do
                  {
                    __int16 v425 = *(_WORD *)v424;
                    v424 += 2;
                    *(_WORD *)uint16x8_t v422 = v425 & 0xFFF0;
                    v422 += 2;
                    --v423;
                  }
                  while (v423);
                }
                ++v420;
              }
              while (v420 != v419);
            }
            goto LABEL_506;
          }
LABEL_615:
          uint64_t v374 = v348;
          size_t v29 = v293;
          goto LABEL_608;
        }
        if (a2 != 1278555701) {
          goto LABEL_606;
        }
        uint64_t v33 = _vtWorkaroundCreatePixelBufferHelper(a5, 1111970369, v609, v610, a3, &v611);
        if (v33) {
          goto LABEL_607;
        }
        uint64_t v33 = _vtTransferHelperForWorkaround(a6, a7, a8, a5, pixelBuffer, v611);
        if (v33) {
          goto LABEL_607;
        }
        uint64_t v33 = _convertBGRAToL565(v611, buffer);
        if (v33) {
          goto LABEL_607;
        }
        float64x2_t v106 = v611;
        double v105 = buffer;
LABEL_526:
        CMPhotoRemoveAndPropagateColorPropertiesFromSourceBuffer(v106, v105);
        goto LABEL_602;
      }
      if (a2 == 1919365990)
      {
        uint64_t v33 = _vtWorkaroundCreatePixelBufferHelper(a5, 1111970369, v609, v610, a3, &v611);
        if (v33) {
          goto LABEL_607;
        }
        float v293 = a15;
        uint64_t v348 = _vtTransferHelperForWorkaround(a6, a7, a8, a5, pixelBuffer, v611);
        if (!v348)
        {
          CVPixelBufferLockBaseAddress(v611, 1uLL);
          CVPixelBufferLockBaseAddress(buffer, 0);
          size_t v449 = 0;
          uint64_t v450 = 2;
          do
          {
            size_t v451 = CVPixelBufferGetBytesPerRowOfPlane(buffer, v449);
            uint16x8_t v452 = (float *)CVPixelBufferGetBaseAddressOfPlane(buffer, v449);
            size_t v453 = CVPixelBufferGetBytesPerRow(v611);
            uint64_t v454 = (char *)CVPixelBufferGetBaseAddress(v611);
            size_t v455 = v610;
            if (v610)
            {
              uint64_t v456 = 0;
              size_t v457 = v609;
              int v458 = &v454[v450];
              do
              {
                uint16x8_t v459 = v458;
                int8x16_t v460 = v452;
                for (nuint64_t n = v457; nn; --nn)
                {
                  unsigned int v462 = *v459;
                  v459 += 4;
                  float v463 = (double)v462 / 255.0;
                  *v460++ = v463;
                }
                ++v456;
                uint16x8_t v452 = (float *)((char *)v452 + v451);
                v458 += v453;
              }
              while (v456 != v455);
            }
            ++v449;
            --v450;
          }
          while (v449 != 3);
          int8x16_t v426 = v611;
          CVPixelBufferLockFlags v427 = 1;
          goto LABEL_537;
        }
        goto LABEL_615;
      }
      if (a2 != 1751527984) {
        goto LABEL_606;
      }
      CVPixelBufferLockBaseAddress(pixelBuffer, 0);
      CVPixelBufferLockBaseAddress(buffer, 0);
      size_t v269 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
      size_t v270 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
      double v271 = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
      uint64_t v272 = CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
      size_t v273 = CVPixelBufferGetBytesPerRowOfPlane(buffer, 0);
      size_t v274 = CVPixelBufferGetBytesPerRowOfPlane(buffer, 1uLL);
      unsigned int v275 = (char *)CVPixelBufferGetBaseAddressOfPlane(buffer, 0);
      int v276 = (char *)CVPixelBufferGetBaseAddressOfPlane(buffer, 1uLL);
      size_t v279 = v610;
      if (v610)
      {
        uint64_t v280 = 0;
        size_t v281 = v609;
        do
        {
          if (v281)
          {
            double v282 = &v275[v280 * v273];
            size_t v283 = v281;
            long double v284 = &v271[v280 * v269];
            do
            {
              unsigned int v285 = *v284++;
              _S1 = fminf((float)v285 / 255.0, 1.0);
              __asm { FCVT            H1, S1 }
              *(_WORD *)double v282 = LOWORD(_S1);
              v282 += 2;
              --v283;
            }
            while (v283);
          }
          ++v280;
        }
        while (v280 != v279);
        size_t v286 = 0;
        size_t v287 = v609;
        do
        {
          if (v287)
          {
            for (size_t i1 = 0; i1 < v287; i1 += 2)
            {
              double v289 = &v276[2 * i1];
              LOBYTE(_S1) = v272[i1];
              _S1 = fminf((float)LODWORD(_S1) / 255.0, 1.0);
              __asm { FCVT            H1, S1 }
              LOBYTE(v278) = v272[i1 + 1];
              *(_WORD *)double v289 = LOWORD(_S1);
              _S1 = fminf((float)v278 / 255.0, 1.0);
              __asm { FCVT            H1, S1 }
              *((_WORD *)v289 + 1) = LOWORD(_S1);
            }
          }
          v286 += 2;
          v276 += v274;
          v272 += v270;
        }
        while (v279 > v286);
      }
LABEL_159:
      CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
      CVPixelBufferUnlockBaseAddress(buffer, 0);
      double v105 = buffer;
      float64x2_t v106 = pixelBuffer;
      goto LABEL_526;
    }
LABEL_108:
    if (a2 != 1278226736)
    {
      if (a2 == 1815491698)
      {
        uint64_t v33 = _vtWorkaroundCreatePixelBufferHelper(a5, 1278226742, v609, v610, a3, &v611);
        if (v33) {
          goto LABEL_607;
        }
        uint64_t v33 = _pixelBufferCopyForMonochromeAndMonochromeWithAlpha(pixelBuffer, v611);
        if (v33) {
          goto LABEL_607;
        }
        uint64_t v33 = _vtTransferHelperForWorkaround(a6, a7, a8, a5, v611, buffer);
        if (v33) {
          goto LABEL_607;
        }
        CVPixelBufferLockBaseAddress(pixelBuffer, 0);
        CVPixelBufferLockBaseAddress(buffer, 0);
        size_t v239 = CVPixelBufferGetBytesPerRow(pixelBuffer);
        uint16x8_t v240 = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
        size_t v241 = CVPixelBufferGetBytesPerRow(buffer);
        uint64_t v242 = (char *)CVPixelBufferGetBaseAddress(buffer);
        size_t v243 = v610;
        if (v610)
        {
          uint64_t v244 = 0;
          size_t v245 = v609;
          double v246 = (__int16 *)(v240 + 2);
          size_t v247 = v242 + 6;
          do
          {
            size_t v248 = v247;
            uint64_t v249 = v246;
            for (size_t i2 = v245; i2; --i2)
            {
              __int16 v251 = *v249;
              v249 += 2;
              *size_t v248 = v251;
              v248 += 4;
            }
            ++v244;
            double v246 = (__int16 *)((char *)v246 + v239);
            size_t v247 = (_WORD *)((char *)v247 + v241);
          }
          while (v244 != v243);
        }
LABEL_325:
        CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
        CVPixelBufferUnlockBaseAddress(buffer, 0);
        CMPhotoRemoveAndPropagateColorPropertiesFromSourceBuffer(pixelBuffer, buffer);
        long double v232 = buffer;
        long double v233 = pixelBuffer;
LABEL_361:
        CMPhotoRemoveAndPropagateAlphaFromSourceBuffer(v233, v232);
        goto LABEL_602;
      }
      if (a2 != 1278226742) {
        goto LABEL_606;
      }
    }
    uint64_t v66 = buffer;
    size_t v67 = pixelBuffer;
    goto LABEL_287;
  }
  if (PixelFormatType <= 1380401728)
  {
    if (PixelFormatType > 1278226741)
    {
      if (PixelFormatType != 1278226742)
      {
        if (PixelFormatType == 1279340600)
        {
LABEL_194:
          if (a2 != 1111970369)
          {
            size_t v67 = pixelBuffer;
            if (a2 != 1278226488) {
              goto LABEL_606;
            }
            uint64_t v66 = buffer;
            goto LABEL_287;
          }
          uint64_t v33 = _vtWorkaroundCreatePixelBufferHelper(a5, 1278226488, v609, v610, a3, &v611);
          if (v33) {
            goto LABEL_607;
          }
          uint64_t v33 = _pixelBufferCopyForMonochromeAndMonochromeWithAlpha(pixelBuffer, v611);
          if (v33) {
            goto LABEL_607;
          }
          uint64_t v33 = _vtTransferHelperForWorkaround(a6, a7, a8, a5, v611, buffer);
          if (v33) {
            goto LABEL_607;
          }
          CVPixelBufferLockBaseAddress(pixelBuffer, 0);
          CVPixelBufferLockBaseAddress(buffer, 0);
          size_t v219 = CVPixelBufferGetBytesPerRow(pixelBuffer);
          double v220 = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
          size_t v221 = CVPixelBufferGetBytesPerRow(buffer);
          double v222 = (char *)CVPixelBufferGetBaseAddress(buffer);
          size_t v223 = v610;
          if (v610)
          {
            size_t v224 = 0;
            size_t v225 = v609;
            long double v226 = v220 + 1;
            long double v227 = v222 + 3;
            do
            {
              if (v225)
              {
                size_t v228 = 0;
                double v229 = v227;
                unsigned __int16 v230 = v226;
                do
                {
                  char v231 = *v230;
                  v230 += 2;
                  *double v229 = v231;
                  v229 += 4;
                  ++v228;
                  size_t v225 = v609;
                }
                while (v609 > v228);
                size_t v223 = v610;
              }
              ++v224;
              v226 += v219;
              v227 += v221;
            }
            while (v223 > v224);
          }
          goto LABEL_325;
        }
        if (PixelFormatType != 1279340854) {
          goto LABEL_606;
        }
        goto LABEL_108;
      }
      if ((a2 | 2) != 0x4C303132) {
        goto LABEL_606;
      }
      goto LABEL_362;
    }
    if (PixelFormatType == 1278226536)
    {
      if (a2 != 1278226534) {
        goto LABEL_606;
      }
      uint64_t v33 = CMPhotoCreateFullPrecisionPixelBufferFromHalfPrecisionSource(pixelBuffer, 0, 0, 0, 0, &buffer);
      if (v33) {
        goto LABEL_607;
      }
      goto LABEL_602;
    }
    if (PixelFormatType != 1278226736)
    {
      if (PixelFormatType != 1278226738) {
        goto LABEL_606;
      }
      if ((int)a2 > 1278226741)
      {
        uint64_t v34 = pixelBuffer;
        if (a2 != 1815491698 && a2 != 1815162994)
        {
          unsigned __int16 v35 = 12598;
          goto LABEL_329;
        }
      }
      else
      {
        uint64_t v34 = pixelBuffer;
        if (a2 != 1111970369 && a2 != 1278226488)
        {
          unsigned __int16 v35 = 12592;
LABEL_329:
          if (a2 != (v35 | 0x4C300000)) {
            goto LABEL_606;
          }
          long double v234 = buffer;
          uint64_t v235 = v609;
          uint64_t v236 = v610;
          unint64_t v237 = v34;
LABEL_363:
          uint64_t v33 = _directPixelBufferCopyForMonochrome16(v237, v234, v235, v236);
          if (v33) {
            goto LABEL_607;
          }
          goto LABEL_602;
        }
      }
      uint64_t v33 = _vtWorkaroundCreatePixelBufferHelper(a5, 1278226742, v609, v610, a3, &v611);
      if (v33) {
        goto LABEL_607;
      }
      uint64_t v88 = v610;
      unint64_t v87 = v611;
      uint64_t v89 = v609;
      uint64_t v90 = v34;
      uint64_t v147 = 0;
      int v238 = 65472;
      goto LABEL_352;
    }
    if ((int)a2 > 1278226741)
    {
      if (a2 == 1278226742)
      {
LABEL_362:
        long double v234 = buffer;
        uint64_t v235 = v609;
        uint64_t v236 = v610;
        unint64_t v237 = pixelBuffer;
        goto LABEL_363;
      }
      if (a2 != 1279340854) {
        goto LABEL_606;
      }
    }
    else if (a2 != 843264310)
    {
      if (a2 != 1278226738) {
        goto LABEL_606;
      }
      goto LABEL_362;
    }
    uint64_t v33 = _vtWorkaroundCreatePixelBufferHelper(a5, 1278226742, v609, v610, a3, &v611);
    if (v33) {
      goto LABEL_607;
    }
    uint64_t v33 = _vtTransferHelperForWorkaround(a6, a7, a8, a5, pixelBuffer, v611);
    if (v33) {
      goto LABEL_607;
    }
    uint64_t v33 = _pixelBufferCopyForMonochromeAndMonochromeWithAlpha(v611, buffer);
    if (v33) {
      goto LABEL_607;
    }
    CMPhotoRemoveAndPropagateColorPropertiesFromSourceBuffer(pixelBuffer, buffer);
    long double v232 = buffer;
    long double v233 = pixelBuffer;
    goto LABEL_361;
  }
  if (PixelFormatType > 1650942775)
  {
    if (PixelFormatType == 1650942776) {
      goto LABEL_160;
    }
    if (PixelFormatType == 1650943796) {
      goto LABEL_166;
    }
    if (PixelFormatType != 1650946098 || (a2 - 1278226736) > 6 || ((1 << (a2 - 48)) & 0x45) == 0) {
      goto LABEL_606;
    }
    CVPixelBufferLockBaseAddress(pixelBuffer, 0);
    CVPixelBufferLockBaseAddress(buffer, 0);
    size_t v91 = CVPixelBufferGetHeight(pixelBuffer);
    uint64_t v92 = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
    uint64_t v93 = (char *)CVPixelBufferGetBaseAddress(buffer);
    size_t v94 = CVPixelBufferGetBytesPerRow(pixelBuffer);
    size_t v95 = CVPixelBufferGetBytesPerRow(buffer);
    if (v91)
    {
      uint64_t v96 = 0;
      if (a2 == 1278226736) {
        char v97 = 6;
      }
      else {
        char v97 = 4;
      }
      do
      {
        if (v94)
        {
          size_t v98 = 0;
          uint64_t v99 = 0;
          double v100 = &v92[v96 * v94];
          do
          {
            uint64_t v101 = 0;
            unsigned int v102 = v100[v98 + 2];
            LOWORD(v613) = v102 & 0xF | (16 * v100[v98]);
            WORD1(v613) = (v102 >> 4) | (16 * v100[v98 + 1]);
            char v103 = 1;
            do
            {
              char v104 = v103;
              *(_WORD *)&v93[2 * v99++] = *((unsigned __int16 *)&v613 + v101) << v97;
              uint64_t v101 = 1;
              char v103 = 0;
            }
            while ((v104 & 1) != 0);
            v98 += 3;
          }
          while (v94 > v98);
        }
        ++v96;
        v93 += v95;
      }
      while (v96 != v91);
    }
    goto LABEL_159;
  }
  switch(PixelFormatType)
  {
    case 1380401729:
      if (a2 != 875704422)
      {
        size_t v36 = pixelBuffer;
        if (a2 != 1111970369) {
          goto LABEL_606;
        }
        CVPixelBufferLockBaseAddress(pixelBuffer, 0);
        CVPixelBufferLockBaseAddress(buffer, 0);
        size_t v153 = CVPixelBufferGetBytesPerRow(pixelBuffer);
        uint64_t v154 = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
        uint64x2_t v155 = (char *)CVPixelBufferGetBaseAddress(buffer);
        size_t v156 = CVPixelBufferGetBytesPerRow(buffer);
        size_t v157 = v610;
        if (v610)
        {
          size_t v158 = 0;
          size_t v159 = v609;
          long long v160 = v154 + 1;
          do
          {
            if (v159)
            {
              size_t v161 = 0;
              uint64_t v162 = &v155[v158 * v156];
              uint64_t v163 = v160;
              do
              {
                *uint64_t v162 = v163[1];
                v162[1] = *v163;
                v162[2] = *(v163 - 1);
                v162[3] = v163[2];
                v162 += 4;
                ++v161;
                size_t v159 = v609;
                v163 += 4;
              }
              while (v609 > v161);
              size_t v157 = v610;
            }
            ++v158;
            v160 += v153;
          }
          while (v157 > v158);
        }
        goto LABEL_476;
      }
      uint64_t v33 = _vtWorkaroundCreatePixelBufferHelper(a5, 1111970369, v609, v610, a3, &v611);
      unint64_t v312 = pixelBuffer;
      if (v33) {
        goto LABEL_607;
      }
      CVPixelBufferLockBaseAddress(pixelBuffer, 0);
      CVPixelBufferLockBaseAddress(v611, 0);
      size_t v313 = CVPixelBufferGetBytesPerRow(pixelBuffer);
      uint64_t v314 = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
      int8x16_t v315 = (char *)CVPixelBufferGetBaseAddress(v611);
      size_t v316 = CVPixelBufferGetBytesPerRow(v611);
      size_t v317 = v610;
      if (v610)
      {
        size_t v318 = 0;
        size_t v319 = v609;
        uint64_t v320 = v314 + 1;
        do
        {
          if (v319)
          {
            size_t v321 = 0;
            unint64_t v322 = &v315[v318 * v316];
            unint64_t v323 = v320;
            do
            {
              *unint64_t v322 = v323[1];
              v322[1] = *v323;
              v322[2] = *(v323 - 1);
              v322[3] = v323[2];
              v322 += 4;
              ++v321;
              size_t v319 = v609;
              v323 += 4;
            }
            while (v609 > v321);
            size_t v317 = v610;
          }
          ++v318;
          v320 += v313;
        }
        while (v317 > v318);
      }
      break;
    case 1380411457:
      if a2 != 1751527984 || (v609) {
        goto LABEL_606;
      }
      uint64_t v578 = a15;
      if ((v610 & 1) == 0)
      {
        CVPixelBufferLockBaseAddress(pixelBuffer, 0);
        CVPixelBufferLockBaseAddress(buffer, 0);
        size_t v164 = CVPixelBufferGetBytesPerRow(pixelBuffer);
        int8x16_t v590 = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
        size_t v165 = CVPixelBufferGetBytesPerRowOfPlane(buffer, 0);
        size_t v585 = CVPixelBufferGetBytesPerRowOfPlane(buffer, 1uLL);
        short float v166 = (char *)CVPixelBufferGetBaseAddressOfPlane(buffer, 0);
        uint64_t v167 = (char *)CVPixelBufferGetBaseAddressOfPlane(buffer, 1uLL);
        size_t v168 = v610;
        if (v610)
        {
          float v169 = v167;
          uint64_t v170 = 0;
          size_t v171 = v609;
          do
          {
            if (v171)
            {
              double v172 = &v166[v170 * v165];
              size_t v173 = v171;
              double v174 = (__int16 *)&v590[v170 * v164];
              do
              {
                _convert_one_Color_to_YCC_half(0, &v613, v174);
                *(_WORD *)double v172 = v613;
                v172 += 2;
                v174 += 4;
                --v173;
              }
              while (v173);
            }
            ++v170;
          }
          while (v170 != v168);
          size_t v595 = 0;
          size_t v175 = v609;
          LOWORD(v176) = COERCE_UNSIGNED_INT(0.25);
          do
          {
            if (v175)
            {
              size_t v177 = 0;
              uint64_t v178 = (__int16 *)&v590[v595 * v164];
              do
              {
                uint64_t v179 = (short float *)&v169[2 * v177];
                _convert_one_Color_to_YCC_half(0, &v613, v178);
                _convert_one_Color_to_YCC_half(0, (_WORD *)&v613 + 3, v178 + 4);
                _convert_one_Color_to_YCC_half(0, (_WORD *)&v614 + 2, (__int16 *)((char *)v178 + v164));
                _convert_one_Color_to_YCC_half(0, &v616, (__int16 *)((char *)v178 + v164 + 8));
                short float *v179 = (short float)((short float)((short float)(*((short float *)&v613 + 1) + *(short float *)&v614)
                                                  + *((short float *)&v614 + 3))
                                    + v617)
                      * v176;
                v179[1] = (short float)((short float)((short float)(*((short float *)&v613 + 2)
                                                                  + *((short float *)&v614 + 1))
                                                    + v615)
                                      + v618)
                        * v176;
                v178 += 8;
                v177 += 2;
              }
              while (v175 > v177);
            }
            v169 += v585;
            v595 += 2;
          }
          while (v168 > v595);
        }
        goto LABEL_601;
      }
LABEL_614:
      uint64_t v374 = FigSignalErrorAt();
      size_t v29 = v578;
      goto LABEL_608;
    case 1647589490:
      if (a2 != 2019963440)
      {
        size_t v36 = pixelBuffer;
        if (a2 == 1815491698)
        {
          CVPixelBufferLockBaseAddress(pixelBuffer, 0);
          CVPixelBufferLockBaseAddress(buffer, 0);
          size_t v375 = CVPixelBufferGetBytesPerRow(pixelBuffer);
          int16x8_t v376 = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
          size_t v377 = CVPixelBufferGetBytesPerRow(buffer);
          int8x16_t v378 = (char *)CVPixelBufferGetBaseAddress(buffer);
          size_t v379 = v610;
          if (v610)
          {
            uint64_t v380 = 0;
            size_t v381 = v609;
            do
            {
              if (v381)
              {
                int32x4_t v382 = &v378[v380 * v377];
                size_t v383 = v381;
                int32x4_t v384 = &v376[v380 * v375];
                do
                {
                  *(_WORD *)int32x4_t v382 = *(_WORD *)v384;
                  *((_WORD *)v382 + 1) = *((_WORD *)v384 + 1);
                  *((_WORD *)v382 + 2) = *((_WORD *)v384 + 2);
                  *((_WORD *)v382 + 3) = -1;
                  v384 += 6;
                  v382 += 8;
                  --v383;
                }
                while (v383);
              }
              ++v380;
            }
            while (v380 != v379);
          }
          goto LABEL_476;
        }
        if (a2 != 1751527984) {
          goto LABEL_606;
        }
        CFDictionaryRef v48 = CVBufferCopyAttachments(pixelBuffer, kCVAttachmentMode_ShouldPropagate);
        if (v48)
        {
          CFDictionaryRef v49 = v48;
          CMPhotoGetMatrixFromPixelBufferAttachments(v48);
          int v50 = FigCFEqual() ? 2 : FigCFEqual() != 0;
          CFRelease(v49);
        }
        else
        {
          int v50 = 0;
        }
        if (v609) {
          goto LABEL_606;
        }
        uint64_t v578 = a15;
        if ((v610 & 1) == 0)
        {
          CVPixelBufferLockBaseAddress(pixelBuffer, 0);
          CVPixelBufferLockBaseAddress(buffer, 0);
          size_t v526 = CVPixelBufferGetBytesPerRow(pixelBuffer);
          int8x16_t v599 = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
          size_t v527 = CVPixelBufferGetBytesPerRowOfPlane(buffer, 0);
          int8x16_t v528 = (char *)CVPixelBufferGetBaseAddressOfPlane(buffer, 0);
          size_t v529 = v610;
          if (v610)
          {
            int8x16_t v530 = v528;
            uint64_t v531 = 0;
            size_t v532 = v609;
            do
            {
              if (v532)
              {
                int8x16_t v533 = &v530[v531 * v527];
                size_t v534 = v532;
                int8x16_t v535 = (unsigned __int16 *)&v599[v531 * v526];
                do
                {
                  _H0 = (short float)*v535;
                  __asm { FCVT            D0, H0 }
                  _D0 = _D0 / 65535.0;
                  __asm { FCVT            H0, D0 }
                  __int16 v606 = LOWORD(_D0);
                  *(short float *)&_D0 = (short float)v535[1];
                  __asm { FCVT            D0, H0 }
                  _D0 = _D0 / 65535.0;
                  __asm { FCVT            H0, D0 }
                  __int16 v607 = LOWORD(_D0);
                  *(short float *)&_D0 = (short float)v535[2];
                  __asm { FCVT            D0, H0 }
                  _D0 = _D0 / 65535.0;
                  __asm { FCVT            H0, D0 }
                  __int16 v608 = LOWORD(_D0);
                  _convert_one_Color_to_YCC_half(v50, &v613, &v606);
                  *(_WORD *)int8x16_t v533 = v613;
                  v533 += 2;
                  v535 += 3;
                  --v534;
                }
                while (v534);
              }
              ++v531;
            }
            while (v531 != v529);
          }
          size_t v589 = CVPixelBufferGetBytesPerRowOfPlane(buffer, 1uLL);
          int8x16_t v543 = (char *)CVPixelBufferGetBaseAddressOfPlane(buffer, 1uLL);
          unint64_t v584 = v610;
          if (v610)
          {
            int8x16_t v544 = v543;
            uint64_t v545 = 0;
            size_t v546 = v609;
            int8x16_t v600 = (unsigned __int16 *)(v599 + 6);
            LOWORD(v547) = COERCE_UNSIGNED_INT(0.25);
            do
            {
              uint64_t v594 = v545;
              if (v546)
              {
                size_t v548 = 0;
                int8x16_t v549 = v600;
                do
                {
                  int8x16_t v550 = (short float *)&v544[2 * v548];
                  _H0 = (short float)*(v549 - 3);
                  __asm { FCVT            D0, H0 }
                  _D0 = _D0 / 65535.0;
                  __asm { FCVT            H0, D0 }
                  __int16 v606 = LOWORD(_D0);
                  *(short float *)&_D0 = (short float)*(v549 - 2);
                  __asm { FCVT            D0, H0 }
                  _D0 = _D0 / 65535.0;
                  __asm { FCVT            H0, D0 }
                  __int16 v607 = LOWORD(_D0);
                  *(short float *)&_D0 = (short float)*(v549 - 1);
                  __asm { FCVT            D0, H0 }
                  _D0 = _D0 / 65535.0;
                  __asm { FCVT            H0, D0 }
                  __int16 v608 = LOWORD(_D0);
                  *(short float *)&_D0 = (short float)*v549;
                  __asm { FCVT            D0, H0 }
                  _D0 = _D0 / 65535.0;
                  __asm { FCVT            H0, D0 }
                  v605[0] = LOWORD(_D0);
                  *(short float *)&_D0 = (short float)v549[1];
                  __asm { FCVT            D0, H0 }
                  _D0 = _D0 / 65535.0;
                  __asm { FCVT            H0, D0 }
                  v605[1] = LOWORD(_D0);
                  *(short float *)&_D0 = (short float)v549[2];
                  __asm { FCVT            D0, H0 }
                  _D0 = _D0 / 65535.0;
                  __asm { FCVT            H0, D0 }
                  v605[2] = LOWORD(_D0);
                  *(short float *)&_D0 = (short float)*(unsigned __int16 *)((char *)v549 + v526 - 6);
                  __asm { FCVT            D0, H0 }
                  _D0 = _D0 / 65535.0;
                  __asm { FCVT            H0, D0 }
                  v604[0] = LOWORD(_D0);
                  *(short float *)&_D0 = (short float)*(unsigned __int16 *)((char *)v549 + v526 - 4);
                  __asm { FCVT            D0, H0 }
                  _D0 = _D0 / 65535.0;
                  __asm { FCVT            H0, D0 }
                  v604[1] = LOWORD(_D0);
                  *(short float *)&_D0 = (short float)*(unsigned __int16 *)((char *)v549 + v526 - 2);
                  __asm { FCVT            D0, H0 }
                  _D0 = _D0 / 65535.0;
                  __asm { FCVT            H0, D0 }
                  v604[2] = LOWORD(_D0);
                  *(short float *)&_D0 = (short float)*(unsigned __int16 *)((char *)v549 + v526);
                  __asm { FCVT            D0, H0 }
                  _D0 = _D0 / 65535.0;
                  __asm { FCVT            H0, D0 }
                  v603[0] = LOWORD(_D0);
                  *(short float *)&_D0 = (short float)*(unsigned __int16 *)((char *)v549 + v526 + 2);
                  __asm { FCVT            D0, H0 }
                  _D0 = _D0 / 65535.0;
                  __asm { FCVT            H0, D0 }
                  v603[1] = LOWORD(_D0);
                  *(short float *)&_D0 = (short float)*(unsigned __int16 *)((char *)v549 + v526 + 4);
                  __asm { FCVT            D0, H0 }
                  _D0 = _D0 / 65535.0;
                  __asm { FCVT            H0, D0 }
                  v603[2] = LOWORD(_D0);
                  _convert_one_Color_to_YCC_half(v50, &v613, &v606);
                  _convert_one_Color_to_YCC_half(v50, (_WORD *)&v613 + 3, v605);
                  _convert_one_Color_to_YCC_half(v50, (_WORD *)&v614 + 2, v604);
                  _convert_one_Color_to_YCC_half(v50, &v616, v603);
                  *int8x16_t v550 = (short float)((short float)((short float)(*((short float *)&v613 + 1) + *(short float *)&v614)
                                                    + *((short float *)&v614 + 3))
                                      + v617)
                        * v547;
                  v550[1] = (short float)((short float)((short float)(*((short float *)&v613 + 2)
                                                                    + *((short float *)&v614 + 1))
                                                      + v615)
                                        + v618)
                          * v547;
                  v548 += 2;
                  v549 += 6;
                }
                while (v546 > v548);
              }
              uint64_t v545 = v594 + 2;
              v544 += v589;
              v600 += v526;
            }
            while (v584 > v594 + 2);
          }
LABEL_601:
          CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
          CVPixelBufferUnlockBaseAddress(buffer, 0);
          CMPhotoRemoveAndPropagateColorPropertiesFromSourceBuffer(pixelBuffer, buffer);
          size_t v29 = v578;
          goto LABEL_602;
        }
        goto LABEL_614;
      }
      uint64_t v33 = _vtWorkaroundCreatePixelBufferHelper(a5, 1815491698, v609, v610, a3, &v611);
      unint64_t v312 = pixelBuffer;
      if (v33) {
        goto LABEL_607;
      }
      CVPixelBufferLockBaseAddress(pixelBuffer, 0);
      CVPixelBufferLockBaseAddress(v611, 0);
      size_t v364 = CVPixelBufferGetBytesPerRow(pixelBuffer);
      int16x8_t v365 = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
      size_t v366 = CVPixelBufferGetBytesPerRow(v611);
      uint16x8_t v367 = (char *)CVPixelBufferGetBaseAddress(v611);
      size_t v368 = v610;
      if (v610)
      {
        uint64_t v369 = 0;
        size_t v370 = v609;
        do
        {
          if (v370)
          {
            uint16x8_t v371 = &v367[v369 * v366];
            size_t v372 = v370;
            uint16x8_t v373 = &v365[v369 * v364];
            do
            {
              *(_WORD *)uint16x8_t v371 = *(_WORD *)v373;
              *((_WORD *)v371 + 1) = *((_WORD *)v373 + 1);
              *((_WORD *)v371 + 2) = *((_WORD *)v373 + 2);
              *((_WORD *)v371 + 3) = -1;
              v373 += 6;
              v371 += 8;
              --v372;
            }
            while (v372);
          }
          ++v369;
        }
        while (v369 != v368);
      }
      break;
    default:
      goto LABEL_606;
  }
  CVPixelBufferUnlockBaseAddress(v312, 0);
  CVPixelBufferUnlockBaseAddress(v611, 0);
  CMPhotoRemoveAndPropagateColorPropertiesFromSourceBuffer(v312, v611);
  uint64_t v374 = _vtTransferHelperForWorkaround(a6, a7, a8, a5, v611, buffer);
  if (!v374) {
    goto LABEL_602;
  }
LABEL_608:
  if (buffer && buffer != *v29) {
    CFRelease(buffer);
  }
LABEL_603:
  if (v611) {
    CFRelease(v611);
  }
  return v374;
}

uint64_t _vtWorkaroundCreatePixelBufferHelper(int a1, uint64_t a2, size_t a3, size_t a4, uint64_t a5, CVPixelBufferRef *a6)
{
  if (a1) {
    return CMPhotoSurfacePoolCreatePixelBuffer(@"SurfacePoolOneShot", a2, a3, a4, 1, 0, 0, 1, a5, 0, a6);
  }
  else {
    return CMPhotoCreateCVPixelBufferNotBackedByIOSurface(0, a2, a3, a4, 0, 0, a5, 0, a6);
  }
}

uint64_t _pixelBufferCopyForMonochromeAndMonochromeWithAlpha(__CVBuffer *a1, __CVBuffer *a2)
{
  if (a1 && a2)
  {
    signed int PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
    uint64_t v5 = CVPixelBufferGetPixelFormatType(a2);
    unint64_t v53 = 0;
    unint64_t v54 = 0;
    CMPhotoGetPixelBufferCLAP(a1, 0, 0, &v53, &v54);
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    CMPhotoGetPixelBufferCLAP(a2, 0, 0, &v51, &v52);
    if (v53 != v51 || v54 != v52) {
      return FigSignalErrorAt();
    }
    CVPixelBufferLockBaseAddress(a1, 0);
    CVPixelBufferLockBaseAddress(a2, 0);
    if (PixelFormatType > 1278226741)
    {
      if (PixelFormatType == 1278226742)
      {
        if (v5 == 1279340854 || v5 == 843264310)
        {
          size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
          BaseAddresCGColorSpaceRef s = (char *)CVPixelBufferGetBaseAddress(a1);
          size_t v29 = CVPixelBufferGetBytesPerRow(a2);
          size_t v30 = (char *)CVPixelBufferGetBaseAddress(a2);
          unint64_t v31 = v54;
          if (v54)
          {
            uint64_t v32 = 0;
            unint64_t v33 = v53;
            do
            {
              if (v33)
              {
                uint64_t v34 = &v30[v32 * v29];
                unint64_t v35 = v33;
                size_t v36 = &BaseAddress[v32 * BytesPerRow];
                do
                {
                  __int16 v37 = *(_WORD *)v36;
                  v36 += 2;
                  *(_WORD *)uint64_t v34 = v37;
                  *((_WORD *)v34 + 1) = -1;
                  v34 += 4;
                  --v35;
                }
                while (v35);
              }
              ++v32;
            }
            while (v32 != v31);
          }
          goto LABEL_52;
        }
        goto LABEL_39;
      }
      if (PixelFormatType != 1279340854)
      {
LABEL_39:
        BOOL v38 = PixelFormatType == 1279340600 || PixelFormatType == 843264056;
        if (!v38 || v5 != 1278226488)
        {
          uint64_t v49 = FigSignalErrorAt();
          goto LABEL_54;
        }
        size_t v39 = CVPixelBufferGetBytesPerRow(a1);
        size_t v40 = (char *)CVPixelBufferGetBaseAddress(a1);
        size_t v41 = CVPixelBufferGetBytesPerRow(a2);
        uint64_t v42 = CVPixelBufferGetBaseAddress(a2);
        unint64_t v43 = v54;
        if (v54)
        {
          unint64_t v44 = 0;
          unint64_t v45 = v53;
          do
          {
            if (v45)
            {
              unint64_t v46 = 0;
              int v47 = &v40[v44 * v39];
              do
              {
                char v48 = *v47;
                v47 += 2;
                v42[v46++] = v48;
                unint64_t v45 = v53;
              }
              while (v53 > v46);
              unint64_t v43 = v54;
            }
            ++v44;
            v42 += v41;
          }
          while (v43 > v44);
        }
LABEL_52:
        CMPhotoRemoveAndPropagateColorPropertiesFromSourceBuffer(a1, a2);
        CMPhotoRemoveAndPropagateAlphaFromSourceBuffer(a1, a2);
        uint64_t v49 = 0;
LABEL_54:
        CVPixelBufferUnlockBaseAddress(a1, 0);
        CVPixelBufferUnlockBaseAddress(a2, 0);
        return v49;
      }
    }
    else if (PixelFormatType != 843264310)
    {
      if (PixelFormatType == 1278226488 && (v5 == 1279340600 || v5 == 843264056))
      {
        size_t v6 = CVPixelBufferGetBytesPerRow(a1);
        uint64_t v7 = CVPixelBufferGetBaseAddress(a1);
        size_t v8 = CVPixelBufferGetBytesPerRow(a2);
        double v9 = (char *)CVPixelBufferGetBaseAddress(a2);
        unint64_t v10 = v54;
        if (v54)
        {
          unint64_t v11 = 0;
          unint64_t v12 = v53;
          do
          {
            if (v12)
            {
              unint64_t v13 = 0;
              double v14 = &v9[v11 * v8];
              do
              {
                char *v14 = v7[v13];
                v14[1] = -1;
                v14 += 2;
                ++v13;
                unint64_t v12 = v53;
              }
              while (v53 > v13);
              unint64_t v10 = v54;
            }
            ++v11;
            v7 += v6;
          }
          while (v10 > v11);
        }
        goto LABEL_52;
      }
      goto LABEL_39;
    }
    if (v5 == 1278226742 || v5 == 1278226736)
    {
      size_t v15 = CVPixelBufferGetBytesPerRow(a1);
      size_t v16 = (char *)CVPixelBufferGetBaseAddress(a1);
      size_t v17 = CVPixelBufferGetBytesPerRow(a2);
      size_t v18 = (char *)CVPixelBufferGetBaseAddress(a2);
      char BitDepthForPixelFormat = CMPhotoGetBitDepthForPixelFormat(v5);
      unint64_t v20 = v54;
      if (v54)
      {
        uint64_t v21 = 0;
        unint64_t v22 = v53;
        do
        {
          if (v22)
          {
            size_t v23 = &v18[v21 * v17];
            unint64_t v24 = v22;
            size_t v25 = &v16[v21 * v15];
            do
            {
              __int16 v26 = *(_WORD *)v25;
              v25 += 4;
              *(_WORD *)size_t v23 = v26 & (-1 << (16 - BitDepthForPixelFormat));
              v23 += 2;
              --v24;
            }
            while (v24);
          }
          ++v21;
        }
        while (v21 != v20);
      }
      goto LABEL_52;
    }
    goto LABEL_39;
  }
  return FigSignalErrorAt();
}

uint64_t _vtTransferHelperForWorkaround(int a1, int a2, int a3, int a4, __CVBuffer *a5, __CVBuffer *a6)
{
  VTPixelTransferSessionRef pixelTransferSessionOut = 0;
  if (a5)
  {
    if (a6)
    {
      uint64_t v12 = VTPixelTransferSessionCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], &pixelTransferSessionOut);
      if (!v12)
      {
        uint64_t v12 = VTSessionSetProperty(pixelTransferSessionOut, (CFStringRef)*MEMORY[0x1E4F45168], (CFTypeRef)*MEMORY[0x1E4F45450]);
        if (!v12)
        {
          CFTypeRef v13 = CVBufferCopyAttachment(a6, (CFStringRef)*MEMORY[0x1E4F24A78], 0);
          uint64_t v14 = VTSessionSetProperty(pixelTransferSessionOut, (CFStringRef)*MEMORY[0x1E4F450D8], v13);
          if (!v14)
          {
            VTPixelTransferSessionRef v15 = pixelTransferSessionOut;
            double PixelBufferSize = CMPhotoGetPixelBufferSize(a5);
            double v18 = v17;
            double v19 = CMPhotoGetPixelBufferSize(a6);
            uint64_t v14 = CMPhotoVTPixelTransferSetHWAndSWAndGPUProperties(v15, a1, a2, a3, a4, 0, PixelBufferSize, v18, v19, v20);
            if (!v14) {
              uint64_t v14 = VTPixelTransferSessionTransferImage(pixelTransferSessionOut, a5, a6);
            }
          }
          uint64_t v21 = v14;
          goto LABEL_9;
        }
      }
    }
    else
    {
      uint64_t v12 = FigSignalErrorAt();
    }
    uint64_t v21 = v12;
    CFTypeRef v13 = 0;
LABEL_9:
    if (pixelTransferSessionOut) {
      CFRelease(pixelTransferSessionOut);
    }
    if (v13) {
      CFRelease(v13);
    }
    return v21;
  }
  return FigSignalErrorAt();
}

uint64_t _convert8bitsRAWTo8BitsReadableFormat(int a1, int a2, int a3, CVPixelBufferRef pixelBuffer, __CVBuffer *a5, int a6)
{
  size_t v27 = 0;
  CVPixelBufferRef pixelBuffera = 0;
  __uint64_t n = 0;
  if (!pixelBuffer || !a5) {
    goto LABEL_19;
  }
  signed int PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  OSType v13 = CVPixelBufferGetPixelFormatType(a5);
  CMPhotoGetPixelBufferCLAP(pixelBuffer, 0, 0, &__n, &v27);
  if (PixelFormatType > 1734501175)
  {
    if (PixelFormatType == 1734501176 || PixelFormatType == 1735549752) {
      goto LABEL_11;
    }
    int v14 = 1919378232;
  }
  else
  {
    if (PixelFormatType == 1650942776 || PixelFormatType == 1651925816) {
      goto LABEL_11;
    }
    int v14 = 1652056888;
  }
  if (PixelFormatType != v14)
  {
LABEL_19:
    uint64_t v15 = FigSignalErrorAt();
    goto LABEL_20;
  }
LABEL_11:
  if (v13 != 875704422 && v13 != 1278226488 && v13 != 1111970369) {
    goto LABEL_19;
  }
  uint64_t v15 = _vtWorkaroundCreatePixelBufferHelper(a6, 1278226488, __n, v27, 64, &pixelBuffera);
  if (!v15)
  {
    int v25 = a6;
    int v16 = a3;
    CVPixelBufferLockBaseAddress(pixelBuffer, 0);
    CVPixelBufferLockBaseAddress(pixelBuffera, 0);
    size_t BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffer);
    BaseAddresCGColorSpaceRef s = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
    size_t v19 = CVPixelBufferGetBytesPerRow(pixelBuffera);
    double v20 = (char *)CVPixelBufferGetBaseAddress(pixelBuffera);
    if (v27)
    {
      uint64_t v21 = v20;
      for (size_t i = 0; i < v27; ++i)
      {
        memcpy(v21, BaseAddress, __n);
        v21 += v19;
        BaseAddress += BytesPerRow;
      }
    }
    CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
    CVPixelBufferUnlockBaseAddress(pixelBuffera, 0);
    uint64_t v15 = _vtTransferHelperForWorkaround(a1, a2, v16, v25, pixelBuffera, a5);
  }
LABEL_20:
  uint64_t v23 = v15;
  if (pixelBuffera) {
    CFRelease(pixelBuffera);
  }
  return v23;
}

uint64_t _directPixelBufferCopy(CVPixelBufferRef pixelBuffer, __CVBuffer *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = 4294950306;
  if (pixelBuffer && a2)
  {
    if (a3 && a4)
    {
      return FigSignalErrorAt();
    }
    else
    {
      CVPixelBufferLockBaseAddress(pixelBuffer, 0);
      CVPixelBufferLockBaseAddress(a2, 0);
      if (CVPixelBufferIsPlanar(pixelBuffer)) {
        size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
      }
      else {
        size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRow(pixelBuffer);
      }
      size_t v14 = BytesPerRowOfPlane;
      if (CVPixelBufferIsPlanar(pixelBuffer)) {
        BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
      }
      else {
        BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
      }
      int v16 = BaseAddressOfPlane;
      if (CVPixelBufferIsPlanar(a2)) {
        size_t BytesPerRow = CVPixelBufferGetBytesPerRowOfPlane(a2, 0);
      }
      else {
        size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a2);
      }
      size_t v18 = BytesPerRow;
      if (CVPixelBufferIsPlanar(a2)) {
        BaseAddresCGColorSpaceRef s = (char *)CVPixelBufferGetBaseAddressOfPlane(a2, 0);
      }
      else {
        BaseAddresCGColorSpaceRef s = (char *)CVPixelBufferGetBaseAddress(a2);
      }
      double v20 = BaseAddress;
      if (a3)
      {
        if (a6)
        {
          uint64_t v21 = 0;
          do
          {
            if (a5)
            {
              unint64_t v22 = &BaseAddress[v21 * v18];
              uint64_t v23 = a5;
              unint64_t v24 = &v16[v21 * v14];
              do
              {
                int v25 = *(unsigned __int16 *)v24;
                v24 += 2;
                *(_WORD *)unint64_t v22 = v25 << a3;
                v22 += 2;
                --v23;
              }
              while (v23);
            }
            ++v21;
          }
          while (v21 != a6);
        }
      }
      else if (a4)
      {
        if (a6)
        {
          uint64_t v26 = 0;
          do
          {
            if (a5)
            {
              size_t v27 = &BaseAddress[v26 * v18];
              uint64_t v28 = a5;
              size_t v29 = &v16[v26 * v14];
              do
              {
                __int16 v30 = *(_WORD *)v29;
                v29 += 2;
                *(_WORD *)size_t v27 = v30 & a4;
                v27 += 2;
                --v28;
              }
              while (v28);
            }
            ++v26;
          }
          while (v26 != a6);
        }
      }
      else
      {
        OSType PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
        uint64_t BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(PixelFormatType);
        if (a6)
        {
          size_t v33 = BytesPerPixelForPixelFormat * a5;
          do
          {
            memcpy(v20, v16, v33);
            v16 += v14;
            v20 += v18;
            --a6;
          }
          while (a6);
        }
      }
      CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
      CVPixelBufferUnlockBaseAddress(a2, 0);
      CMPhotoRemoveAndPropagateColorPropertiesFromSourceBuffer(pixelBuffer, a2);
      return 0;
    }
  }
  return result;
}

uint64_t _directPixelBufferCopyForMonochrome16(CVPixelBufferRef pixelBuffer, __CVBuffer *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = 4294950306;
  if (pixelBuffer && a2)
  {
    if ((CVPixelBufferGetPixelFormatType(pixelBuffer) == 1278226488
       || CVPixelBufferGetPixelFormatType(pixelBuffer) == 1278226736
       || CVPixelBufferGetPixelFormatType(pixelBuffer) == 1278226738
       || CVPixelBufferGetPixelFormatType(pixelBuffer) == 1278226742)
      && (CVPixelBufferGetPixelFormatType(a2) == 1278226488
       || CVPixelBufferGetPixelFormatType(a2) == 1278226736
       || CVPixelBufferGetPixelFormatType(a2) == 1278226738
       || CVPixelBufferGetPixelFormatType(a2) == 1278226742))
    {
      uint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
      unint64_t BitDepthForPixelFormat = CMPhotoGetBitDepthForPixelFormat(PixelFormatType);
      uint64_t v11 = CVPixelBufferGetPixelFormatType(a2);
      unint64_t v12 = CMPhotoGetBitDepthForPixelFormat(v11);
      uint64_t result = 4294950306;
      if (BitDepthForPixelFormat >= 9 && v12 >= 9)
      {
        CVPixelBufferLockBaseAddress(pixelBuffer, 0);
        CVPixelBufferLockBaseAddress(a2, 0);
        if (CVPixelBufferIsPlanar(pixelBuffer)) {
          size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
        }
        else {
          size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRow(pixelBuffer);
        }
        size_t v14 = BytesPerRowOfPlane;
        if (CVPixelBufferIsPlanar(pixelBuffer)) {
          BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
        }
        else {
          BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
        }
        int v16 = BaseAddressOfPlane;
        if (CVPixelBufferIsPlanar(a2)) {
          size_t BytesPerRow = CVPixelBufferGetBytesPerRowOfPlane(a2, 0);
        }
        else {
          size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a2);
        }
        size_t v18 = BytesPerRow;
        unint64_t v19 = v12;
        char v20 = 16 - v12;
        CVPixelBufferRef pixelBuffera = a2;
        if (CVPixelBufferIsPlanar(a2)) {
          BaseAddresCGColorSpaceRef s = (char *)CVPixelBufferGetBaseAddressOfPlane(a2, 0);
        }
        else {
          BaseAddresCGColorSpaceRef s = (char *)CVPixelBufferGetBaseAddress(a2);
        }
        unint64_t v22 = BaseAddress;
        int v23 = -1 << v20;
        if (v19 <= BitDepthForPixelFormat)
        {
          if (v19 >= BitDepthForPixelFormat)
          {
            OSType v34 = CVPixelBufferGetPixelFormatType(pixelBuffer);
            uint64_t BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(v34);
            if (a4)
            {
              size_t v36 = BytesPerPixelForPixelFormat * a3;
              do
              {
                memcpy(v22, v16, v36);
                v16 += v14;
                v22 += v18;
                --a4;
              }
              while (a4);
            }
          }
          else if (a4)
          {
            uint64_t v29 = 0;
            do
            {
              if (a3)
              {
                __int16 v30 = &BaseAddress[v29 * v18];
                uint64_t v31 = a3;
                uint64_t v32 = &v16[v29 * v14];
                do
                {
                  __int16 v33 = *(_WORD *)v32;
                  v32 += 2;
                  *(_WORD *)__int16 v30 = v33 & v23;
                  v30 += 2;
                  --v31;
                }
                while (v31);
              }
              ++v29;
            }
            while (v29 != a4);
          }
        }
        else if (a4)
        {
          uint64_t v24 = 0;
          do
          {
            if (a3)
            {
              int v25 = &BaseAddress[v24 * v18];
              uint64_t v26 = a3;
              size_t v27 = &v16[v24 * v14];
              do
              {
                unsigned int v28 = *(unsigned __int16 *)v27;
                v27 += 2;
                *(_WORD *)int v25 = ((((~(-1 << (v19 - BitDepthForPixelFormat)) << (16 - (v19 - BitDepthForPixelFormat))) & (-1 << (16 - BitDepthForPixelFormat)) & v28) >> BitDepthForPixelFormat) | (-1 << (16 - BitDepthForPixelFormat)) & v28) & v23;
                v25 += 2;
                --v26;
              }
              while (v26);
            }
            ++v24;
          }
          while (v24 != a4);
        }
        CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
        CVPixelBufferUnlockBaseAddress(pixelBuffera, 0);
        CMPhotoRemoveAndPropagateColorPropertiesFromSourceBuffer(pixelBuffer, pixelBuffera);
        return 0;
      }
    }
    else
    {
      return 4294950306;
    }
  }
  return result;
}

__int16 _convert_one_Color_to_YCC_half@<H0>(int a1@<W0>, _WORD *a2@<X1>, __int16 *a3@<X2>)
{
  _H6 = *a3;
  __asm { FCVT            S4, H6 }
  _H0 = a3[1];
  __asm { FCVT            S1, H0 }
  _H3 = a3[2];
  __asm { FCVT            S2, H3 }
  if (a1 == 2)
  {
    _S0 = (float)((float)(_S1 * 0.7152) + (float)(_S4 * 0.2126)) + (float)(_S2 * 0.0722);
    float v14 = (float)((float)(_S1 * -0.38543) + (float)(_S4 * -0.11457)) + (float)(_S2 * 0.5);
    __asm { FCVT            D2, H3 }
    double v16 = (float)((float)(_S1 * -0.45415) + (float)(_S4 * 0.5)) + _D2 * -0.045847;
  }
  else
  {
    _S0 = (float)((float)(_S1 * 0.587) + (float)(_S4 * 0.299)) + (float)(_S2 * 0.114);
    __asm { FCVT            D3, H3 }
    float v14 = (float)((float)(_S1 * -0.33126) + (float)(_S4 * -0.16874)) + _D3 * 0.5;
    __asm { FCVT            D3, H6 }
    double v16 = (float)(_S1 * -0.41869) + _D3 * 0.5 + (float)(_S2 * -0.081312);
  }
  float v19 = v16;
  if (_S0 < 0.0) {
    _S0 = 0.0;
  }
  if (_S0 > 1.0) {
    _S0 = 1.0;
  }
  __asm { FCVT            H0, S0 }
  *a2 = _H0;
  _D0 = v14;
  if (v14 < -0.5) {
    _D0 = -0.5;
  }
  if (_D0 >= 0.5) {
    _D0 = 0.5;
  }
  __asm { FCVT            H0, D0 }
  a2[1] = _H0;
  _D0 = v19;
  if (v19 < -0.5) {
    _D0 = -0.5;
  }
  if (_D0 >= 0.5) {
    _D0 = 0.5;
  }
  __asm { FCVT            H0, D0 }
  a2[2] = result;
  return result;
}

void _framePacked2Linear(uint64_t a1, uint64_t a2, int a3, unsigned int a4, int a5, int a6, char a7)
{
  if (a4)
  {
    unsigned int v10 = 0;
    unsigned int v11 = 0;
    uint64_t v12 = 0;
    unsigned int v13 = a3 << a7;
    LODWORD(v14) = (a3 << a7) / 3u;
    signed int v15 = (a3 << a7) % 3u;
    if (v14 <= 1) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = v14;
    }
    uint64_t v26 = v14;
    uint64_t v16 = a4;
    uint64_t v24 = a2 + 4;
    __uint64_t n = 2 * (v15 - 1) + 2;
    do
    {
      if (v13 >= 3)
      {
        size_t v18 = (unsigned int *)(a1 + v11);
        uint64_t v19 = v26;
        char v20 = (_WORD *)(v24 + v10);
        do
        {
          unsigned int v21 = *v18++;
          *char v20 = (v21 >> 14) & 0xFFC0;
          *(v20 - 1) = (v21 >> 4) & 0xFFC0;
          *(v20 - 2) = (_WORD)v21 << 6;
          v20 += 3;
          --v19;
        }
        while (v19);
        unsigned int v17 = v26;
        if (v15)
        {
LABEL_12:
          if (v15 >= 1) {
            bzero(__src, __n);
          }
          unsigned int v22 = *(_DWORD *)(a1 + (v12 * a5) + 4 * v17);
          __src[2] = (v22 >> 14) & 0xFFC0;
          __src[1] = (v22 >> 4) & 0xFFC0;
          __src[0] = (_WORD)v22 << 6;
          if (v15 >= 1) {
            memcpy((void *)(a2 + (v12 * a6) + 6 * v17), __src, __n);
          }
        }
      }
      else
      {
        unsigned int v17 = 0;
        if (v15) {
          goto LABEL_12;
        }
      }
      ++v12;
      v11 += a5;
      v10 += a6;
    }
    while (v12 != v16);
  }
}

uint64_t _frameLinear2Packed(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6, char a7)
{
  if (a4)
  {
    unsigned int v7 = 0;
    unsigned int v8 = 0;
    uint64_t v9 = 0;
    unsigned int v10 = a3 << a7;
    LODWORD(v11) = (a3 << a7) / 3u;
    int v12 = 3 * v11;
    signed int v13 = (a3 << a7) % 3u;
    if (v11 <= 1) {
      uint64_t v11 = 1;
    }
    else {
      uint64_t v11 = v11;
    }
    uint64_t v14 = 3 * (((a3 << a7) * (unsigned __int128)0x5555555555555556uLL) >> 64);
    do
    {
      if (v10 >= 3)
      {
        uint64_t v16 = (int *)(a2 + v8);
        uint64_t v17 = v11;
        size_t v18 = (unsigned __int16 *)(result + 4 + v7);
        do
        {
          *v16++ = (*v18 << 14) & 0x3FF00000 | (((*(v18 - 1) >> 6) & 0x3FF) << 10) | (*(v18 - 2) >> 6);
          v18 += 3;
          --v17;
        }
        while (v17);
        unsigned int v15 = v11;
      }
      else
      {
        unsigned int v15 = 0;
      }
      if (v10 != v12)
      {
        unsigned __int16 v24 = 0;
        int v23 = 0;
        if (v13 < 1)
        {
          unsigned int v22 = 0;
          unsigned __int16 v21 = 0;
          int v20 = 0;
        }
        else
        {
          uint64_t v19 = 0;
          do
          {
            *((_WORD *)&v23 + v19) = *(_WORD *)(result + (v9 * a5) + 2 * (v14 + v19));
            ++v19;
          }
          while (v14 - v10 + v19);
          int v20 = v24;
          unsigned __int16 v21 = HIWORD(v23);
          unsigned int v22 = (unsigned __int16)v23;
        }
        *(_DWORD *)(a2 + (v9 * a6) + 4 * v15) = (v20 << 14) & 0x3FF00000 | (v21 >> 6 << 10) | (v22 >> 6);
      }
      ++v9;
      v8 += a6;
      v7 += a5;
    }
    while (v9 != a4);
  }
  return result;
}

uint64_t _convertBGRAToL565(__CVBuffer *a1, __CVBuffer *a2)
{
  _OWORD v25[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 4294950306;
  if (a1
    && a2
    && CVPixelBufferGetPixelFormatType(a1) == 1111970369
    && CVPixelBufferGetPixelFormatType(a2) == 1278555701)
  {
    unint64_t v5 = vcvtad_u64_f64(CMPhotoGetPixelBufferSize(a1));
    unint64_t v7 = vcvtad_u64_f64(v6);
    double PixelBufferSize = CMPhotoGetPixelBufferSize(a2);
    unint64_t v10 = vcvtad_u64_f64(v9);
    if (v5 == vcvtad_u64_f64(PixelBufferSize) && v7 == v10)
    {
      CVPixelBufferLockBaseAddress(a1, 0);
      CVPixelBufferLockBaseAddress(a2, 0);
      v25[0] = 0;
      v25[1] = 0;
      v24[0] = 0;
      v24[1] = 0;
      uint64_t PixelBufferDataPointers = CMPhotoGetPixelBufferDataPointers(a1, 0, 0, 0, (uint64_t)v25, (uint64_t)v24, 0);
      if (PixelBufferDataPointers
        || (v23[0] = 0,
            v23[1] = 0,
            v22[0] = 0,
            v22[1] = 0,
            uint64_t PixelBufferDataPointers = CMPhotoGetPixelBufferDataPointers(a2, 0, 0, 0, (uint64_t)v23, (uint64_t)v22, 0), PixelBufferDataPointers))
      {
        uint64_t v2 = PixelBufferDataPointers;
      }
      else
      {
        if (v7)
        {
          for (uint64_t i = 0; i != v7; ++i)
          {
            if (v5)
            {
              uint64_t v14 = (unsigned char *)(v23[0] + v22[0] * i);
              unsigned int v15 = (unsigned int *)(v25[0] + v24[0] * i);
              unint64_t v16 = v5;
              do
              {
                unsigned int v17 = *v15++;
                unsigned int v18 = ((v17 & 0xFC) + 4) >> 3;
                unsigned int v19 = (((v17 >> 8) & 0xFE) + 2) >> 2;
                unsigned int v20 = ((HIWORD(v17) & 0xFC) + 4) >> 3;
                if (v18 >= 0x1F) {
                  LOBYTE(v18) = 31;
                }
                if (v19 >= 0x3F) {
                  LOWORD(v19) = 63;
                }
                if (v20 >= 0x1F) {
                  LOWORD(v20) = 31;
                }
                unsigned char *v14 = v18 | (32 * v19);
                v14[1] = (unsigned __int16)(((_WORD)v20 << 11) | (32 * v19)) >> 8;
                v14 += 2;
                --v16;
              }
              while (v16);
            }
          }
        }
        uint64_t v2 = 0;
      }
      CVPixelBufferUnlockBaseAddress(a1, 0);
      CVPixelBufferUnlockBaseAddress(a2, 0);
    }
  }
  return v2;
}

uint64_t CMPhotoCodecSessionPool_CleanupTimerHandler(uint64_t a1)
{
  uint64_t result = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 24));
  if (!result)
  {
    if (*(void *)(a1 + 152) != -1)
    {
      dispatch_time_t v10 = dispatch_time(0, 0);
      CodecSessionPool_PurgeSessionsWithCriteria((CFAllocatorRef *)(a1 + 48), (unsigned int (*)(const void *, const void *, uint64_t))_callback_CodecSessionPool_PurgeStaleSessions_CriteriaIsStale, (uint64_t)&v10, 0);
      dispatch_time_t v10 = dispatch_time(0, 0);
      CodecSessionPool_PurgeSessionsWithCriteria((CFAllocatorRef *)(a1 + 88), (unsigned int (*)(const void *, const void *, uint64_t))_callback_CodecSessionPool_PurgeStaleSessions_CriteriaIsStale, (uint64_t)&v10, 0);
      CFArrayRef v3 = *(const __CFArray **)(a1 + 56);
      if (v3 && CFArrayGetCount(v3))
      {
        BOOL v4 = 0;
      }
      else
      {
        CFArrayRef v5 = *(const __CFArray **)(a1 + 96);
        if (v5) {
          BOOL v4 = CFArrayGetCount(v5) == 0;
        }
        else {
          BOOL v4 = 1;
        }
      }
      int v6 = *(unsigned __int8 *)(a1 + 128);
      if (!*(unsigned char *)(a1 + 128))
      {
        if (*(unsigned char *)(a1 + 16)) {
          BOOL v7 = 0;
        }
        else {
          BOOL v7 = v4;
        }
        if (v7)
        {
          dispatch_suspend(*(dispatch_object_t *)(a1 + 136));
          int v6 = 1;
          *(unsigned char *)(a1 + 128) = 1;
        }
        else
        {
          int v6 = 0;
        }
      }
      unsigned int v8 = *(void **)(a1 + 176);
      if (v8) {
        BOOL v9 = v4;
      }
      else {
        BOOL v9 = 0;
      }
      if (v9)
      {
        [v8 unregisterBackgroundNotificationForContext:a1];
        [*(id *)(a1 + 176) releaseAssertionForContext:a1];
      }
      else if (v8)
      {
        if (!v6)
        {
          objc_msgSend(*(id *)(a1 + 176), "takeAssertionUntilTime:forContext:", dispatch_time(0, *(void *)(a1 + 152) + 5000000000), a1);
          [*(id *)(a1 + 176) registerBackgroundNotificationHandlerForContext:a1 handler:*(void *)(a1 + 184)];
        }
      }
    }
    return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 24));
  }
  return result;
}

intptr_t CMPhotoCodecSessionPool_CleanupTimerCanceled(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 168));
}

uint64_t __CMPhotoCodecSessionPoolCreate_block_invoke(uint64_t a1)
{
  CMPhotoCodecSessionPoolFlush(*(void *)(a1 + 32), 3);
  uint64_t result = pthread_mutex_lock(*(pthread_mutex_t **)(*(void *)(a1 + 32) + 24));
  if (!result)
  {
    objc_msgSend(*(id *)(*(void *)(a1 + 32) + 176), "unregisterBackgroundNotificationForContext:");
    objc_msgSend(*(id *)(*(void *)(a1 + 32) + 176), "releaseAssertionForContext:");
    CFArrayRef v3 = *(pthread_mutex_t **)(*(void *)(a1 + 32) + 24);
    return pthread_mutex_unlock(v3);
  }
  return result;
}

uint64_t CMPhotoCodecSessionPoolFlush(uint64_t a1, char a2)
{
  uint64_t v3 = a1;
  if (!a1)
  {
    pthread_once(&CMPhotoCodecSessionPoolGetDefault_onceToken, _once_setDefaultPool);
    uint64_t v3 = defaultPool;
    if (!defaultPool) {
      return 4294950305;
    }
  }
  uint64_t v4 = pthread_mutex_lock(*(pthread_mutex_t **)(v3 + 24));
  if (v4) {
    return v4;
  }
  if ((a2 & 1) == 0) {
    goto LABEL_7;
  }
  uint64_t v5 = CodecSessionPool_PurgeSessionsWithCriteria((CFAllocatorRef *)(v3 + 48), (unsigned int (*)(const void *, const void *, uint64_t))_callback_CodecSessionPool_PurgeIdleSessions_CriteriaIsIdle, 0, 0);
  if (!v5)
  {
    CodecSessionPool_MarkAllSessionsForNonReuse(v3 + 48);
LABEL_7:
    if ((a2 & 2) != 0)
    {
      uint64_t v6 = CodecSessionPool_PurgeSessionsWithCriteria((CFAllocatorRef *)(v3 + 88), (unsigned int (*)(const void *, const void *, uint64_t))_callback_CodecSessionPool_PurgeIdleSessions_CriteriaIsIdle, 0, 0);
      if (!v6) {
        CodecSessionPool_MarkAllSessionsForNonReuse(v3 + 88);
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
    goto LABEL_11;
  }
  uint64_t v6 = v5;
LABEL_11:
  pthread_mutex_unlock(*(pthread_mutex_t **)(v3 + 24));
  return v6;
}

uint64_t CodecSessionPool_MarkAllSessionsForNonReuse(uint64_t a1)
{
  uint64_t result = CFArrayGetCount(*(CFArrayRef *)(a1 + 8));
  if (result >= 1)
  {
    uint64_t v3 = result;
    for (CFIndex i = 0; i != v3; ++i)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), i);
      uint64_t result = (uint64_t)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), ValueAtIndex);
      if (result) {
        *(unsigned char *)(result + 49) = 1;
      }
    }
  }
  return result;
}

uint64_t CMPhotoCodecSessionPoolCreateEncoderSpecification(const __CFAllocator *a1, int a2, __CFDictionary **a3)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(a1, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return 4294950305;
  }
  uint64_t v6 = Mutable;
  BOOL v7 = a2 == 2 || a2 == 0;
  unsigned int v8 = (const void *)*MEMORY[0x1E4F1CFD0];
  if (v7) {
    BOOL v9 = (const void *)*MEMORY[0x1E4F1CFD0];
  }
  else {
    BOOL v9 = (const void *)*MEMORY[0x1E4F1CFC8];
  }
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F45648], v9);
  if (a2 == 2) {
    CFDictionarySetValue(v6, (const void *)*MEMORY[0x1E4F45660], v8);
  }
  uint64_t result = 0;
  *a3 = v6;
  return result;
}

uint64_t CMPhotoCodecSessionPoolCreateCompressionSession(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, char a7, char a8, int a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, unsigned char *a18)
{
  if (cf)
  {
    CFTypeRef v25 = cf;
    CFDictionaryRef supportedPropertyDictionaryOut = 0;
    VTSessionRef session = 0;
    char v39 = 0;
  }
  else
  {
    pthread_once(&CMPhotoCodecSessionPoolGetDefault_onceToken, _once_setDefaultPool);
    CFTypeRef v25 = (CFTypeRef)defaultPool;
    CFDictionaryRef supportedPropertyDictionaryOut = 0;
    VTSessionRef session = 0;
    char v39 = 0;
    if (!defaultPool)
    {
      CFDataRef v27 = 0;
      uint64_t v30 = 4294950305;
      goto LABEL_25;
    }
  }
  if (!a15)
  {
    CFDataRef v27 = 0;
    uint64_t v30 = 4294950306;
    goto LABEL_23;
  }
  if (!a17)
  {
    CFDataRef v27 = 0;
LABEL_22:
    uint64_t v30 = 0;
    goto LABEL_23;
  }
  uint64_t v34 = (uint64_t)v25;
  CFAllocatorRef v26 = CFGetAllocator(v25);
  *(_OWORD *)UInt8 bytes = *(_OWORD *)a2;
  *(void *)&bytes[13] = *(void *)(a2 + 13);
  int v43 = a3;
  int v44 = a4;
  unsigned int v45 = a5;
  char v46 = a6;
  char v33 = a7;
  char v47 = a7;
  char v48 = a8;
  int v49 = a9;
  char v50 = a10;
  uint64_t v51 = a11;
  int v52 = a12;
  uint64_t v53 = a13;
  uint64_t v54 = a14;
  CFDataRef v27 = CFDataCreate(v26, bytes, 69);
  if (v27)
  {
    long long v36 = 0u;
    long long v37 = 0u;
    uint64_t v38 = 0;
    CFAllocatorRef v35 = v26;
    LODWORD(v36) = *(_DWORD *)a2;
    *((void *)&v36 + 1) = a3;
    *(void *)&long long v37 = a4;
    *((void *)&v37 + 1) = __PAIR64__(a6, a5);
    LOBYTE(v38) = v33;
    uint64_t v28 = CMPhotoCodecSessionPool_CreateSession(v34, 0, v27, a15, a16, (uint64_t (*)(void *, uint64_t, void **))_callback_CreateCompressionSession, (uint64_t)&v35, (void **)&session, &v39);
    if (!v28)
    {
      VTSessionRef v29 = session;
      if (v39
        || (OSStatus v31 = VTSessionCopySupportedPropertyDictionary(session, &supportedPropertyDictionaryOut), v31 == -12900)
        || !v31)
      {
LABEL_9:
        *a17 = v29;
        VTSessionRef session = 0;
        if (a18)
        {
          uint64_t v30 = 0;
          *a18 = v39;
          goto LABEL_23;
        }
        goto LABEL_22;
      }
      uint64_t v28 = CMPhotoCodecSessionPoolRecycleSession(v34, v29, 1);
      if (!v28)
      {
        if (v29)
        {
          CFRelease(v29);
          VTSessionRef session = 0;
        }
        uint64_t v28 = CMPhotoCodecSessionPoolFlush(v34, 3);
        if (!v28)
        {
          uint64_t v28 = CMPhotoCodecSessionPool_CreateSession(v34, 0, v27, a15, a16, (uint64_t (*)(void *, uint64_t, void **))_callback_CreateCompressionSession, (uint64_t)&v35, (void **)&session, &v39);
          if (!v28)
          {
            VTSessionRef v29 = session;
            goto LABEL_9;
          }
        }
      }
    }
    uint64_t v30 = v28;
    goto LABEL_23;
  }
  uint64_t v30 = 4294950305;
LABEL_23:
  if (supportedPropertyDictionaryOut) {
    CFRelease(supportedPropertyDictionaryOut);
  }
LABEL_25:
  if (session) {
    CFRelease(session);
  }
  if (v27) {
    CFRelease(v27);
  }
  return v30;
}

uint64_t _callback_CreateCompressionSession(void *a1, uint64_t a2, VTCompressionSessionRef *a3)
{
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  encoderSpecificatiouint64_t n = 0;
  CFAllocatorRef v6 = *(const __CFAllocator **)a2;
  CMVideoCodecType v7 = *(_DWORD *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  int v10 = *(_DWORD *)(a2 + 32);
  uint64_t v11 = CMPhotoCodecSessionPoolCreateEncoderSpecification(*(const __CFAllocator **)a2, *(_DWORD *)(a2 + 36), &encoderSpecification);
  if (v11)
  {
    uint64_t v18 = v11;
  }
  else
  {
    int valuePtr = v10;
    CFNumberRef v12 = CFNumberCreate(v6, kCFNumberSInt32Type, &valuePtr);
    if (v12)
    {
      CFNumberRef v13 = v12;
      uint64_t v14 = (void *)*MEMORY[0x1E4F24D70];
      valueCGColorSpaceRef s = v12;
      keys[0] = v14;
      CFDictionaryRef v15 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFRelease(v13);
      if (v15)
      {
        unint64_t v16 = (_DWORD *)MEMORY[0x1E4F1EBA8];
        int v17 = *MEMORY[0x1E4F1EBA8];
        if (*(unsigned char *)(a2 + 40))
        {
          if (v17 == 1) {
            kdebug_trace();
          }
          uint64_t v18 = VTTileCompressionSessionCreate();
          if (*v16 != 1) {
            goto LABEL_13;
          }
        }
        else
        {
          if (v17 == 1) {
            kdebug_trace();
          }
          uint64_t v18 = VTCompressionSessionCreate(v6, v8, v9, v7, encoderSpecification, v15, v6, (VTCompressionOutputCallback)VTCompressionOutputCallback_Gateway, a1, a3);
          if (*v16 != 1) {
            goto LABEL_13;
          }
        }
        kdebug_trace();
LABEL_13:
        CFRelease(v15);
        goto LABEL_14;
      }
    }
    uint64_t v18 = 4294950305;
  }
LABEL_14:
  if (encoderSpecification) {
    CFRelease(encoderSpecification);
  }
  return v18;
}

uint64_t CMPhotoCodecSessionPoolCheckIfCompressionSessionReusable(uint64_t a1, const void *a2, uint64_t a3, int a4, int a5, int a6, char a7, char a8, char a9, int a10, char a11, uint64_t a12, int a13, uint64_t a14, uint64_t a15, unsigned char *a16)
{
  uint64_t v16 = 4294950306;
  if (a1 && a2)
  {
    CFAllocatorRef v24 = CFGetAllocator((CFTypeRef)a1);
    *(_OWORD *)UInt8 bytes = *(_OWORD *)a3;
    *(void *)&bytes[13] = *(void *)(a3 + 13);
    int v33 = a4;
    int v34 = a5;
    int v35 = a6;
    char v36 = a7;
    char v37 = a8;
    char v38 = a9;
    int v39 = a10;
    char v40 = a11;
    uint64_t v41 = a12;
    int v42 = a13;
    uint64_t v43 = a14;
    uint64_t v44 = a15;
    CFDataRef v25 = CFDataCreate(v24, bytes, 69);
    if (v25)
    {
      CFDataRef v26 = v25;
      uint64_t v27 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 24));
      if (v27)
      {
        uint64_t v16 = v27;
      }
      else
      {
        CFDataRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 72), a2);
        if (Value && Value[4])
        {
          char v29 = FigCFEqual();
          pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 24));
          uint64_t v16 = 0;
          if (a16) {
            *a16 = v29;
          }
        }
        else
        {
          uint64_t v16 = FigSignalErrorAt();
          pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 24));
        }
      }
      CFRelease(v26);
    }
    else
    {
      return 4294950305;
    }
  }
  return v16;
}

uint64_t CMPhotoCodecSessionPoolSetDecompressionSessionAttachment(uint64_t a1, const void *a2, const void *a3, const void *a4)
{
  if (!a3) {
    return 4294950306;
  }
  uint64_t result = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 24));
  if (!result)
  {
    CFDataRef Value = (__CFDictionary **)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 112), a2);
    if (Value)
    {
      int v10 = Value;
      MutableCopyWithCFTypeCallbackCGColorSpaceRef s = Value[5];
      if (MutableCopyWithCFTypeCallbacks
        || (CFGetAllocator((CFTypeRef)a1),
            MutableCopyWithCFTypeCallbackCGColorSpaceRef s = (__CFDictionary *)FigCFDictionaryCreateMutableCopyWithCFTypeCallbacks(),
            (v10[5] = MutableCopyWithCFTypeCallbacks) != 0))
      {
        if (a4) {
          CFDictionarySetValue(MutableCopyWithCFTypeCallbacks, a3, a4);
        }
        else {
          CFDictionaryRemoveValue(MutableCopyWithCFTypeCallbacks, a3);
        }
        pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 24));
        return 0;
      }
      else
      {
        return 4294950305;
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t CMPhotoCodecSessionPoolCopyDecompressionSessionAttachments(uint64_t a1, const void *a2, CFDictionaryRef *a3)
{
  if (!a3) {
    return 0;
  }
  uint64_t result = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 24));
  if (!result)
  {
    CFDataRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 112), a2);
    if (Value)
    {
      uint64_t v8 = Value;
      if (Value[5])
      {
        CFAllocatorRef v9 = CFGetAllocator((CFTypeRef)a1);
        CFDictionaryRef Copy = CFDictionaryCreateCopy(v9, (CFDictionaryRef)v8[5]);
      }
      else
      {
        CFDictionaryRef Copy = 0;
      }
      pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 24));
      uint64_t result = 0;
      *a3 = Copy;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t CMPhotoCodecSessionPoolClass_Finalize(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 144);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __CMPhotoCodecSessionPoolClass_Finalize_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  void block[4] = a1;
  dispatch_sync(v2, block);
  if (*(void *)(a1 + 136))
  {
    dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 168), 0xFFFFFFFFFFFFFFFFLL);
    uint64_t v3 = *(NSObject **)(a1 + 136);
    if (v3)
    {
      dispatch_release(v3);
      *(void *)(a1 + 136) = 0;
    }
  }
  uint64_t v4 = *(NSObject **)(a1 + 168);
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v5 = *(NSObject **)(a1 + 144);
  if (v5) {
    dispatch_release(v5);
  }
  CFAllocatorRef v6 = *(void **)(a1 + 176);
  if (v6)
  {
    [v6 unregisterBackgroundNotificationForContext:a1];
    [*(id *)(a1 + 176) releaseAssertionForContext:a1];
    [*(id *)(a1 + 176) waitForPendingNotifications];
  }
  CodecSessionPool_Destroy((CFTypeRef *)(a1 + 48));
  CodecSessionPool_Destroy((CFTypeRef *)(a1 + 88));
  uint64_t result = FigSimpleMutexDestroy();
  *(void *)(a1 + 24) = 0;
  return result;
}

CFTypeRef CMPhotoCodecSessionPoolClass_CopyFormattingDesc()
{
  return CFRetain(@"[CMPhotoCodecSessionPool]");
}

__CFString *CMPhotoCodecSessionPool_CopyDebugDesc(uint64_t a1)
{
  CFAllocatorRef v2 = CFGetAllocator((CFTypeRef)a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v2, 0);
  uint64_t v4 = Mutable;
  if (Mutable)
  {
    CFStringAppendFormat(Mutable, 0, @"<CMPhotoCodecSessionPool %p> {\n", a1);
    if (!pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 24)))
    {
      CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 96));
      uint64_t context = 0;
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 104), (CFDictionaryApplierFunction)CodecSessionPool_GetIdleSessionCountApplier, &context);
      uint64_t v6 = context;
      CFIndex v7 = CFArrayGetCount(*(CFArrayRef *)(a1 + 120));
      CFStringAppendFormat(v4, 0, @"\tDecompressionPool: { allSessions: %zd; idleSessions: %zd; waitingClients: %zd }\n",
        Count,
        v6,
        v7);
      CFIndex v8 = CFArrayGetCount(*(CFArrayRef *)(a1 + 56));
      uint64_t context = 0;
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 64), (CFDictionaryApplierFunction)CodecSessionPool_GetIdleSessionCountApplier, &context);
      uint64_t v9 = context;
      CFIndex v10 = CFArrayGetCount(*(CFArrayRef *)(a1 + 80));
      CFStringAppendFormat(v4, 0, @"\tCompressionPool: { allSessions: %zd; idleSessions: %zd; waitingClients: %zd }\n",
        v8,
        v9,
        v10);
      dispatch_time_t v11 = dispatch_time(0, 0);
      CFStringAppendFormat(v4, 0, @"\tStatus { invalid: %d; maxCompressionSessions: %zd; maxDecompressionSessions: %zd; timeout: %lld; lastActivity: %.1lf ms ago }\n",
        *(unsigned __int8 *)(a1 + 16),
        *(void *)(a1 + 32),
        *(void *)(a1 + 40),
        *(void *)(a1 + 152),
        (double)(v11 - *(void *)(a1 + 160)) / 1000000000.0 * 1000.0);
      pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 24));
      CFStringAppendFormat(v4, 0, @"}");
    }
  }
  return v4;
}

void CodecSessionPool_Destroy(CFTypeRef *a1)
{
  if (a1)
  {
    v7.length = CFArrayGetCount((CFArrayRef)a1[4]);
    v7.locatiouint64_t n = 0;
    CFArrayApplyFunction((CFArrayRef)a1[4], v7, (CFArrayApplierFunction)CodecSessionPool_DestroyApplier_NotifyAndDestroyWaitingClients, a1);
    CFTypeRef v2 = a1[4];
    if (v2)
    {
      CFRelease(v2);
      a1[4] = 0;
    }
    CFArrayRef v3 = (const __CFArray *)a1[1];
    if (v3)
    {
      v8.length = CFArrayGetCount(v3);
      v8.locatiouint64_t n = 0;
      CFArrayApplyFunction((CFArrayRef)a1[1], v8, (CFArrayApplierFunction)CodecSessionPool_DestroyApplier_DestroyGateway, a1);
      CFTypeRef v4 = a1[1];
      if (v4)
      {
        CFRelease(v4);
        a1[1] = 0;
      }
    }
    if (*a1)
    {
      CFRelease(*a1);
      *a1 = 0;
    }
    CFTypeRef v5 = a1[2];
    if (v5)
    {
      CFRelease(v5);
      a1[2] = 0;
    }
    CFTypeRef v6 = a1[3];
    if (v6)
    {
      CFRelease(v6);
      a1[3] = 0;
    }
  }
}

void CodecSessionPool_DestroyApplier_NotifyAndDestroyWaitingClients(uint64_t a1)
{
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 8));
  WaitingClient_Destroy((const void **)a1);
}

void CodecSessionPool_DestroyApplier_DestroyGateway(const void *a1, uint64_t a2)
{
}

void CodecSessionPool_DestroyGatewayForSession(uint64_t a1, const void *a2)
{
  CFDataRef Value = (const void **)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), a2);
  CFArrayRef v5 = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), Value[4]);
  if (v5)
  {
    CFArrayRef v6 = v5;
    CFIndex Count = CFArrayGetCount(v5);
    v10.locatiouint64_t n = 0;
    v10.length = Count;
    FirstIndexOfCFDataRef Value = CFArrayGetFirstIndexOfValue(v6, v10, a2);
    if ((FirstIndexOfValue & 0x8000000000000000) == 0) {
      CFArrayRemoveValueAtIndex(v6, FirstIndexOfValue);
    }
    if (Count == 1) {
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 16), Value[4]);
    }
  }
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 24), a2);
  CodecGateway_Destroy(Value);
}

CFIndex CodecSessionPool_GetIdleSessionCountApplier(int a1, CFArrayRef theArray, void *a3)
{
  if (theArray) {
    CFIndex result = CFArrayGetCount(theArray);
  }
  else {
    CFIndex result = 0;
  }
  *a3 += result;
  return result;
}

uint64_t CodecSessionPool_PurgeSessionsWithCriteria(CFAllocatorRef *a1, unsigned int (*a2)(const void *, const void *, uint64_t), uint64_t a3, int a4)
{
  CFIndex Count = CFArrayGetCount(a1[1]);
  if (Count < 1) {
    return 0;
  }
  CFIndex v9 = Count;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(*a1, 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    dispatch_time_t v11 = Mutable;
    CFIndex v12 = 0;
    CFIndex v13 = 0;
    int v14 = 1;
    do
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a1[1], v12);
      CFDataRef Value = CFDictionaryGetValue(a1[3], ValueAtIndex);
      if (a2(ValueAtIndex, Value, a3)) {
        BOOL v17 = v14 == 0;
      }
      else {
        BOOL v17 = 1;
      }
      if (v17)
      {
        CFArrayAppendValue(v11, ValueAtIndex);
      }
      else
      {
        CodecSessionPool_DestroyGatewayForSession((uint64_t)a1, ValueAtIndex);
        ++v13;
        if (a4) {
          int v14 = 0;
        }
      }
      ++v12;
    }
    while (v9 != v12);
    CFAllocatorRef v18 = a1[1];
    if (v18) {
      CFRelease(v18);
    }
    a1[1] = v11;
    if (v13 >= CFArrayGetCount(a1[4])) {
      CFIndex v13 = CFArrayGetCount(a1[4]);
    }
    if (v13 >= 1)
    {
      do
      {
        unsigned int v19 = (dispatch_semaphore_t *)CFArrayGetValueAtIndex(a1[4], 0);
        dispatch_semaphore_signal(v19[1]);
        CodecSessionPool_DequeueWaitingClient((uint64_t)a1, v19);
        --v13;
      }
      while (v13);
    }
    return 0;
  }
  return 4294950305;
}

BOOL _callback_CodecSessionPool_PurgeStaleSessions_CriteriaIsStale(uint64_t a1, uint64_t a2, void *a3)
{
  return *(unsigned char *)(a2 + 48) && *(void *)(a2 + 56) < *a3;
}

void CodecSessionPool_DequeueWaitingClient(uint64_t a1, const void *a2)
{
  v7.length = CFArrayGetCount(*(CFArrayRef *)(a1 + 32));
  v7.locatiouint64_t n = 0;
  FirstIndexOfCFDataRef Value = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(a1 + 32), v7, a2);
  CFArrayRef v5 = *(__CFArray **)(a1 + 32);
  CFArrayRemoveValueAtIndex(v5, FirstIndexOfValue);
}

uint64_t _callback_CodecSessionPool_PurgeIdleSessions_CriteriaIsIdle(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 48);
}

uint64_t VTTileCompressionOutputCallback_Gateway(uint64_t a1)
{
  if (a1 && !*(_DWORD *)a1 && (uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 16)) != 0)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    return v1(v2);
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

uint64_t VTCompressionOutputCallback_Gateway(uint64_t a1)
{
  if (a1 && !*(_DWORD *)a1 && (uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 16)) != 0)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    return v1(v2);
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

uint64_t VTDecompressionOutputCallback_Gateway(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, long long *a7)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a1
    && *(_DWORD *)a1 == 1
    && (CFRange v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, long long *, long long *))(a1 + 16)) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 8);
    long long v13 = *a6;
    uint64_t v14 = *((void *)a6 + 2);
    long long v11 = *a7;
    uint64_t v12 = *((void *)a7 + 2);
    return v7(v8, a2, a3, a4, a5, &v13, &v11);
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

CFIndex CodecSessionPool_PurgeIdleSessionFromLargestGroupApplier(int a1, CFArrayRef theArray, CFIndex *a3)
{
  CFIndex result = CFArrayGetCount(theArray);
  if (result > *a3)
  {
    *a3 = result;
    a3[1] = (CFIndex)theArray;
  }
  return result;
}

uint64_t CMPhotoScalingUtilitiesScaleBuffer_U8(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, unint64_t a8, double a9, double a10, double a11, double a12, unsigned char *a13)
{
  unint64_t v70 = (unint64_t *)a4;
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  bzero(&v73, 0x218uLL);
  bzero(v71, 0x218uLL);
  size_t v67 = 0;
  uint64_t v64 = a2;
  uint64_t v22 = 4294950306;
  if ((a2 - 5) >= 0xFFFFFFFC)
  {
    if (a1)
    {
      unsigned int v63 = a13;
      if (a13)
      {
        size_t v67 = 0;
        if (a3)
        {
          if (v70)
          {
            size_t v67 = 0;
            if (a6)
            {
              if (a7)
              {
                size_t v67 = 0;
                unint64_t v23 = a3 * v64;
                if (v23 <= a5 && a6 * v64 <= a8)
                {
                  uint64_t v24 = CMPhotoScalingUtilitiesInitializeFilter(a3, a6, (uint64_t)v71);
                  if (v24
                    || (uint64_t v24 = CMPhotoScalingUtilitiesInitializeFilter((unint64_t)v70, a7, (uint64_t)&v73),
                        v24))
                  {
                    uint64_t v22 = v24;
                    size_t v67 = 0;
                  }
                  else
                  {
                    CFDataRef v25 = (char *)malloc_type_calloc(v23 * a7, 4uLL, 0x100004052888210uLL);
                    size_t v67 = v25;
                    if (v25)
                    {
                      uint64_t v65 = v64;
                      unint64_t v66 = a3;
                      unint64_t v61 = a6;
                      unint64_t v62 = a8;
                      uint64_t v26 = 0;
                      double v27 = a9 * 0.5 + a12 + -0.5;
                      int v28 = v70 - 1;
                      for (i = a7; i != v26; unint64_t v50 = i)
                      {
                        unint64_t v70 = &v61;
                        int v29 = v74;
                        int v30 = v73;
                        signed int v69 = llround((v27 + a9 * (double)(int)v26) * (double)v74);
                        int v31 = v69 / v74;
                        MEMORY[0x1F4188790](v25);
                        int v33 = (char *)&v61 - ((v32 + 15) & 0xFFFFFFFF0);
                        if (v32 >= 0x200) {
                          size_t v34 = 512;
                        }
                        else {
                          size_t v34 = v32;
                        }
                        bzero((char *)&v61 - ((v32 + 15) & 0xFFFFFFFF0), v34);
                        int v36 = v73;
                        if (v73 >= 1)
                        {
                          if (v30 >= 0) {
                            int v37 = v30;
                          }
                          else {
                            int v37 = v30 + 1;
                          }
                          int v38 = v31 - (v37 >> 1) + 1;
                          uint64_t v39 = v73;
                          char v40 = v33;
                          do
                          {
                            int v41 = v38 & ~(v38 >> 31);
                            if (v41 >= v28) {
                              int v41 = v28;
                            }
                            *v40++ = a1 + v41 * a5;
                            ++v38;
                            --v39;
                          }
                          while (v39);
                        }
                        if (v23)
                        {
                          uint64_t v42 = 0;
                          uint64_t v43 = (_DWORD *)v75[(v29 & ((v69 - v31 * v29) >> 31)) + v69 - v31 * v29];
                          uint64_t v44 = (float *)&v67[4 * v66 * v26 * v65];
                          do
                          {
                            float v45 = 0.0;
                            if (v36)
                            {
                              char v46 = (uint64_t *)v33;
                              char v47 = v43;
                              uint64_t v48 = v36;
                              do
                              {
                                uint64_t v49 = *v46++;
                                LOBYTE(v35) = *(unsigned char *)(v49 + v42);
                                float v35 = (float)LODWORD(v35);
                                LODWORD(v49) = *v47++;
                                float v45 = v45 + (float)(v35 * *(float *)&v49);
                                --v48;
                              }
                              while (v48);
                            }
                            *v44++ = v45;
                            ++v42;
                          }
                          while (v42 != v23);
                        }
                        ++v26;
                      }
                      int v52 = v63;
                      uint64_t v51 = v64;
                      uint64_t v54 = v66;
                      uint64_t v53 = v67;
                      unint64_t v55 = 4 * v66 * (int)v64;
                      uint64_t v57 = v61;
                      unint64_t v56 = v62;
                      do
                      {
                        CMPhotoConvolveRowHorizontally_F_to_U8((uint64_t)v71, v51, v54, (uint64_t)v53, v57, v52);
                        v52 += v56;
                        v53 += v55;
                        --v50;
                      }
                      while (v50);
                      uint64_t v22 = 0;
                    }
                    else
                    {
                      size_t v67 = 0;
                      uint64_t v22 = 4294950305;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  size_t v58 = v76;
  if (v76)
  {
    size_t v76 = 0;
    free(v58);
  }
  unint64_t v59 = v72;
  if (v72)
  {
    uint64_t v72 = 0;
    free(v59);
  }
  free(v67);
  return v22;
}

uint64_t CMPhotoScalingUtilitiesInitializeFilter(unint64_t a1, unint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 4294950306;
  }
  double v4 = (double)a2 / (double)a1;
  float v5 = 1.0 / v4;
  int v6 = 133 - (LODWORD(v5) >> 23);
  if (v6 >= 6) {
    int v6 = 6;
  }
  double v7 = 3.0;
  double v8 = 1.0 / v4 * 3.0;
  if (v4 >= 1.0) {
    double v8 = 3.0;
  }
  uint64_t v9 = (int)fmin(v8 * 2.0 + 0.5, 64.0);
  uint64_t v10 = (1 << v6);
  *(_DWORD *)a3 = v9;
  *(_DWORD *)(a3 + 4) = v10;
  *(_DWORD *)(a3 + 8) = v6;
  *(_DWORD *)(a3 + 12) = ~(-1 << v6);
  long long v11 = malloc_type_malloc(4 * (int)(v9 << v6), 0x100004052888210uLL);
  *(void *)(a3 + 528) = v11;
  if (!v11) {
    return 4294950305;
  }
  v33[1] = v33;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  double v14 = 1.0 / (double)(int)v10;
  float v15 = fmin(v4, 1.0);
  if ((int)v9 >= 0) {
    int v16 = v9;
  }
  else {
    int v16 = v9 + 1;
  }
  double v17 = 1.0 - (double)(v16 >> 1);
  double v18 = v15;
  v33[2] = 0x400921FB54442D18;
  double v19 = -3.0;
  do
  {
    uint64_t v20 = *(void *)(a3 + 528);
    *(void *)(a3 + 8 * v13 + 16) = v20 + 4 * v13 * (int)v9;
    if ((int)v9 >= 1)
    {
      uint64_t v21 = 0;
      double v22 = 0.0;
      do
      {
        double v23 = (v17 + (double)(int)v21 + -(double)(int)v13 * v14) * v18;
        BOOL v24 = v23 > v19 && v23 < v7;
        double v25 = 0.0;
        if (v24)
        {
          double v25 = 1.0;
          if (v23 != 0.0)
          {
            double v26 = v14;
            double v27 = v18;
            double v34 = sin(v23 * 3.14159265) / (v23 * 3.14159265);
            long double v28 = sin(v23 / 3.0 * 3.14159265);
            double v19 = -3.0;
            double v18 = v27;
            double v14 = v26;
            double v25 = v34 * (v28 / (v23 / 3.0 * 3.14159265));
            double v7 = 3.0;
          }
        }
        float v29 = v25;
        *(float *)(v20 + v12 + 4 * v21) = v29;
        double v22 = v25 + v22;
        ++v21;
      }
      while (v9 != v21);
      uint64_t v30 = v9;
      do
      {
        float v31 = *(float *)(v20 + v12) / v22;
        *(float *)(v20 + v12) = v31;
        v20 += 4;
        --v30;
      }
      while (v30);
    }
    ++v13;
    v12 += 4 * (int)v9;
  }
  while (v13 != v10);
  return 0;
}

uint64_t CMPhotoConvolveRowHorizontally_F_to_U8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned char *a6)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (a5)
  {
    double v7 = (int *)result;
    uint64_t v8 = 4 * (int)a2;
    uint64_t v9 = a2;
    uint64_t v10 = -4 * (int)a2;
    v38[2] = a4;
    uint64_t v39 = a5;
    v38[0] = a2;
    v38[1] = a3;
    do
    {
      CFIndex result = MEMORY[0x1F4188790](v38);
      uint64_t v21 = (float *)((char *)v38 - v20);
      int v23 = (v17 >> 31) & ~v22;
      int v24 = *v7;
      if (*v7 + v17 <= v12) {
        int v25 = 0;
      }
      else {
        int v25 = *v7 + v17 - v12;
      }
      if (v23 | v25)
      {
        int v41 = v16;
        int v42 = v15;
        int v43 = v19;
        uint64_t v44 = result;
        uint64_t v45 = v18;
        uint64_t v26 = (v23 * v11);
        uint64_t v40 = (v24 - v23 - v25);
        memcpy(&v21[(int)v26], (const void *)(v13 + 4 * (v23 + v17) * v11), v8 * (int)v40);
        int v11 = v38[0];
        if ((int)v26 >= 1)
        {
          int v27 = LODWORD(v38[0]) + LODWORD(v38[0]) * v23 - 1;
          do
          {
            float v28 = v21[v27--];
            v21[(int)--v26] = v28;
          }
          while (v26);
        }
        uint64_t v29 = (v25 * v11);
        if ((int)v29 < 1)
        {
          uint64_t v14 = v39;
          CFIndex result = v44;
          uint64_t v18 = v45;
          int v15 = v42;
          int v19 = v43;
          int v16 = v41;
        }
        else
        {
          uint64_t v14 = v39;
          uint64_t v30 = (char *)&v21[((int)v40 + v23) * v11];
          CFIndex result = v44;
          uint64_t v18 = v45;
          int v15 = v42;
          int v19 = v43;
          int v16 = v41;
          do
          {
            *(_DWORD *)uint64_t v30 = *(_DWORD *)&v30[v10];
            v30 += 4;
            --v29;
          }
          while (v29);
        }
      }
      else
      {
        uint64_t v21 = (float *)(v13 + 4 * v17 * v11);
      }
      if (v11 >= 1)
      {
        uint64_t v31 = 0;
        do
        {
          uint64_t v32 = *v7;
          if (v32)
          {
            int v33 = *(float **)&v7[2 * (v19 & ((v15 - v16 * v19) >> 31)) + 4 + 2 * (v15 - v16 * v19)];
            float v34 = 0.0;
            float v35 = v21;
            do
            {
              float v36 = *v33++;
              float v34 = v34 + (float)(*v35 * v36);
              float v35 = (float *)((char *)v35 + v8);
              --v32;
            }
            while (v32);
          }
          else
          {
            float v34 = 0.0;
          }
          int v37 = llroundf(v34);
          if (v37 >= 255) {
            int v37 = 255;
          }
          *a6++ = v37 & ~(v37 >> 31);
          ++v31;
          ++v21;
        }
        while (v31 != v9);
      }
    }
    while (v18 + 1 != v14);
  }
  return result;
}

uint64_t CMPhotoScalingUtilitiesLinear2XUpscaleBuffer_U8(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9)
{
  if (a2 - 5 < 0xFFFFFFFC || a1 == 0 || a9 == 0) {
    return 4294950306;
  }
  uint64_t v11 = 4294950306;
  if (!a3 || !a4 || a6 != 2 * a3 || a7 != 2 * a4) {
    return v11;
  }
  uint64_t v12 = a2;
  if (a3 * (unint64_t)a2 > a5 || a6 * (unint64_t)a2 > a8) {
    return 4294950306;
  }
  if (a7)
  {
    uint64_t v14 = 0;
    signed int v15 = a4 - 1;
    int32x2_t v16 = vdup_n_s32((int)a3 - 1);
    int32x2_t v17 = vdup_n_s32(a2);
    do
    {
      signed int v18 = v14 >> 1;
      if (v14) {
        signed int v19 = v18 + 1;
      }
      else {
        signed int v19 = (v14 >> 1) - 1;
      }
      if (v18 >= v15) {
        signed int v20 = a4 - 1;
      }
      else {
        signed int v20 = v14 >> 1;
      }
      if (v19 >= v15) {
        signed int v19 = a4 - 1;
      }
      if (a6)
      {
        uint64_t v21 = 0;
        uint64_t v22 = a1 + (v20 & ~(v20 >> 31)) * a5;
        uint64_t v23 = a1 + (v19 & ~(v19 >> 31)) * a5;
        uint64_t v24 = a9 + v14 * a8;
        do
        {
          unint64_t v25 = 0;
          unsigned int v26 = v21 >> 1;
          unsigned int v27 = (v21 >> 1) - 1;
          if (v21) {
            unsigned int v27 = v26 + 1;
          }
          int32x2_t v28 = vmul_s32(vmax_s32(vmin_s32((int32x2_t)__PAIR64__(v27, v26), v16), 0), v17);
          v29.i64[0] = v28.i32[0];
          v29.i64[1] = v28.i32[1];
          int64x2_t v30 = v29;
          do
          {
            int64x2_t v31 = vaddq_s64(vdupq_n_s64(v25), v30);
            *(unsigned char *)(v24 + v25++) = (9 * *(unsigned __int8 *)(v22 + v31.i64[0])
                                     + *(unsigned __int8 *)(v23 + v31.i64[1])
                                     + 3
                                     * (*(unsigned __int8 *)(v23 + v31.i64[0])
                                      + *(unsigned __int8 *)(v22 + v31.i64[1]))
                                     + 8) >> 4;
          }
          while (v12 != v25);
          ++v21;
          v24 += v25;
        }
        while (v21 != a6);
      }
      ++v14;
    }
    while (v14 != a7);
  }
  return 0;
}

uint64_t CMPhotoScalingUtilitiesNearest2XUpscaleBuffer_U8(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9)
{
  if (a2 - 5 < 0xFFFFFFFC || a1 == 0 || a9 == 0) {
    return 4294950306;
  }
  uint64_t v11 = 4294950306;
  if (!a3 || !a4 || !a6 || !a7) {
    return v11;
  }
  if (a3 * (unint64_t)a2 > a5 || a6 * (unint64_t)a2 > a8) {
    return 4294950306;
  }
  for (uint64_t i = 0; i != a7; ++i)
  {
    uint64_t v14 = 0;
    signed int v15 = i >> 1;
    if ((int)(i >> 1) >= (int)a4 - 1) {
      signed int v15 = a4 - 1;
    }
    uint64_t v16 = v15 & ~(v15 >> 31);
    int32x2_t v17 = (unsigned char *)(a9 + i * a8);
    uint64_t v18 = a1 + a5 * v16;
    do
    {
      signed int v19 = v14 >> 1;
      if ((int)(v14 >> 1) >= (int)a3 - 1) {
        signed int v19 = a3 - 1;
      }
      signed int v20 = (char *)(v18 + (int)(a2 * (v19 & ~(v19 >> 31))));
      uint64_t v21 = a2;
      do
      {
        char v22 = *v20++;
        *v17++ = v22;
        --v21;
      }
      while (v21);
      ++v14;
    }
    while (v14 != a6);
  }
  return 0;
}

uint64_t CMPhotoScalingUtilitiesNearest2XDownscaleBuffer_U8(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9)
{
  if (a2 - 5 < 0xFFFFFFFC || a1 == 0 || a9 == 0) {
    return 4294950306;
  }
  uint64_t v11 = 4294950306;
  if (!a3 || !a4 || !a6 || !a7) {
    return v11;
  }
  if (a3 * (unint64_t)a2 > a5 || a6 * (unint64_t)a2 > a8) {
    return 4294950306;
  }
  int v13 = 0;
  uint64_t v14 = 0;
  int v15 = a4 - 1;
  int v16 = a3 - 1;
  do
  {
    int v17 = 0;
    uint64_t v18 = 0;
    if (v13 >= v15) {
      int v19 = v15;
    }
    else {
      int v19 = v13;
    }
    uint64_t v20 = v19 & ~(v19 >> 31);
    uint64_t v21 = (unsigned char *)(a9 + v14 * a8);
    uint64_t v22 = a1 + a5 * v20;
    do
    {
      if (v17 >= v16) {
        int v23 = v16;
      }
      else {
        int v23 = v17;
      }
      uint64_t v24 = (char *)(v22 + (int)(a2 * (v23 & ~(v23 >> 31))));
      uint64_t v25 = a2;
      do
      {
        char v26 = *v24++;
        *v21++ = v26;
        --v25;
      }
      while (v25);
      ++v18;
      v17 += 2;
    }
    while (v18 != a6);
    ++v14;
    v13 += 2;
  }
  while (v14 != a7);
  return 0;
}

uint64_t VideoQualityControllerClass_create_0(uint64_t a1, int a2, int a3, int a4, const __CFDictionary *cf)
{
  if (cf && (CFTypeID v9 = CFGetTypeID(cf), v9 == CFDictionaryGetTypeID()))
  {
    uint64_t v10 = malloc_type_calloc(1uLL, 0x10uLL, 0x1000040F7F8B94BuLL);
    if (!v10) {
      return 4294950305;
    }
    uint64_t v11 = v10;
    *(_DWORD *)uint64_t v10 = a2;
    v10[1] = 0;
    if (CFDictionaryContainsKey(cf, @"ByteBudget")
      && (uint64_t v13 = 0, CMPhotoCFDictionaryGetInt64IfPresent(cf, @"ByteBudget", &v13)))
    {
      uint64_t v12 = 0;
      v11[1] = v13;
      *(void *)(a1 + 56) = v11;
    }
    else
    {
      uint64_t v12 = FigSignalErrorAt();
      free(v11);
    }
    return v12;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void VideoQualityControllerClass_dispose(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 56);
  if (v1) {
    free(v1);
  }
}

uint64_t VideoQualityControllerClass_setSessionProperties(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (!v1) {
    return 4294950194;
  }
  if ((*(void *)(v1 + 8) & 0x8000000000000000) == 0) {
    FigCFDictionarySetInt64();
  }
  return 0;
}

uint64_t CMPhotoDecompressionCreateNativePixelFormatArray()
{
  return FigSignalErrorAt();
}

BOOL CMPhotoDecompressionDetectContainerFormat(const __CFData *a1, _DWORD *a2)
{
  CFTypeRef cf = 0;
  int v7 = -1;
  int v3 = CMPhotoByteStreamCreateFromSource(a1, 0, 0, 0, &cf, 0);
  if (v3)
  {
    int v5 = v3;
  }
  else
  {
    int v4 = CMPhotoImageContainerFormatDetectFromBytestream((uint64_t)cf, &v7);
    int v5 = v4;
    if (a2 && !v4) {
      *a2 = v7;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  return v5 == 0;
}

uint64_t CMPhotoDecompressionDetectContainerFormatAndCodec(const __CFData *a1, _DWORD *a2, _DWORD *a3)
{
  CFTypeRef v14 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v13 = 0;
  int v11 = -1;
  int v12 = -1;
  BrandsFromByteStreauint64_t m = CMPhotoByteStreamCreateFromSource(a1, 0, 0, 0, &cf, 0);
  if (BrandsFromByteStream) {
    goto LABEL_28;
  }
  BrandsFromByteStreauint64_t m = CMPhotoImageContainerFormatDetectFromBytestream((uint64_t)cf, &v12);
  if (BrandsFromByteStream) {
    goto LABEL_28;
  }
  if (v12 == 2)
  {
    int v6 = 1786276896;
    goto LABEL_7;
  }
  if (v12 != 1)
  {
    if (!a3) {
      goto LABEL_8;
    }
    BrandsFromByteStreauint64_t m = FigPictureCollectionCreateBrandsFromByteStream();
    if (!BrandsFromByteStream)
    {
      int Int32 = CMPhotoCFNumberGetInt32((const __CFNumber *)v14);
      if (_getCodecForBrand(Int32, &v11)) {
        goto LABEL_8;
      }
      CFIndex v10 = 0;
      while (v13 && CFArrayGetCount((CFArrayRef)v13) > v10)
      {
        FigCFArrayGetInt32AtIndex();
        ++v10;
        if (_getCodecForBrand(0, &v11)) {
          goto LABEL_8;
        }
      }
      BrandsFromByteStreauint64_t m = FigSignalErrorAt();
    }
LABEL_28:
    uint64_t v7 = BrandsFromByteStream;
    goto LABEL_12;
  }
  int v6 = 1785750887;
LABEL_7:
  int v11 = v6;
LABEL_8:
  if (a2) {
    *a2 = v12;
  }
  uint64_t v7 = 0;
  if (a3) {
    *a3 = v11;
  }
LABEL_12:
  if (cf) {
    CFRelease(cf);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v14) {
    CFRelease(v14);
  }
  return v7;
}

uint64_t _getCodecForBrand(int a1, int *a2)
{
  uint64_t result = 0;
  int v4 = 1752589105;
  if (a1 <= 1635150181)
  {
    if (a1 > 1298745408)
    {
      if ((a1 - 1298745409) <= 4 && ((1 << (a1 - 65)) & 0x13) != 0) {
        goto LABEL_28;
      }
      if (a1 == 1635148649) {
        goto LABEL_26;
      }
      int v5 = 1635148659;
LABEL_25:
      if (a1 != v5) {
        return result;
      }
LABEL_26:
      unsigned __int16 v7 = 25393;
      goto LABEL_27;
    }
    if ((a1 - 1296118081) >= 2)
    {
      int v5 = 1298743618;
      goto LABEL_25;
    }
LABEL_16:
    unsigned __int16 v7 = 12337;
LABEL_27:
    int v4 = v7 | 0x61760000;
    goto LABEL_28;
  }
  if (a1 > 1751479906)
  {
    if (a1 > 1785750886)
    {
      if (a1 != 1785750887 && a1 != 1785751411) {
        return result;
      }
      int v4 = 1785750887;
LABEL_28:
      *a2 = v4;
      return 1;
    }
    if (a1 == 1751479907) {
      goto LABEL_28;
    }
    unsigned __int16 v6 = 30328;
LABEL_19:
    if (a1 != (v6 | 0x68650000)) {
      return result;
    }
    goto LABEL_28;
  }
  if (a1 > 1751476578)
  {
    if (a1 == 1751476579) {
      goto LABEL_28;
    }
    unsigned __int16 v6 = 27000;
    goto LABEL_19;
  }
  if (a1 == 1635150182 || a1 == 1635150195) {
    goto LABEL_16;
  }
  return result;
}

uint64_t CMPhotoDecompressionGetImageCount(const __CFData *a1, void *a2)
{
  CFTypeRef cf = 0;
  if (!a1)
  {
    uint64_t v7 = FigSignalErrorAt();
LABEL_12:
    int v5 = 0;
    goto LABEL_7;
  }
  if (!a2)
  {
    uint64_t v7 = 0;
    goto LABEL_12;
  }
  CFTypeRef DecompressionSession = CMPhotoOneShotSessionPoolGetDecompressionSession();
  int v5 = DecompressionSession;
  if (DecompressionSession)
  {
    uint64_t Container = CMPhotoDecompressionSessionCreateContainer(DecompressionSession, 0, a1, 0, (uint64_t *)&cf);
    if (!Container) {
      uint64_t Container = CMPhotoDecompressionContainerGetImageCountWithOptions((uint64_t)cf, 0, a2);
    }
    uint64_t v7 = Container;
  }
  else
  {
    uint64_t v7 = 4294950195;
  }
LABEL_7:
  CMPhotoOneShotSessionPoolRecycleSession(v5);
  if (cf) {
    CFRelease(cf);
  }
  return v7;
}

CFDataRef CMPhotoDecompressionDetectSourceIsMIAF(const __CFData *a1)
{
  CFDataRef IsMIAF = a1;
  CFTypeRef cf = 0;
  if (a1)
  {
    CFTypeRef DecompressionSession = CMPhotoOneShotSessionPoolGetDecompressionSession();
    int v3 = DecompressionSession;
    if (!DecompressionSession
      || CMPhotoDecompressionSessionCreateContainer(DecompressionSession, 0, IsMIAF, 0, (uint64_t *)&cf))
    {
      CFDataRef IsMIAF = 0;
    }
    else
    {
      CFDataRef IsMIAF = (const __CFData *)CMPhotoDecompressionContainerDetectSourceIsMIAF((uint64_t)cf);
    }
  }
  else
  {
    FigSignalErrorAt();
    int v3 = 0;
  }
  CMPhotoOneShotSessionPoolRecycleSession(v3);
  if (cf) {
    CFRelease(cf);
  }
  return IsMIAF;
}

uint64_t CMPhotoDecompressionGetImageGeometryForIndex(const __CFData *a1, const __CFNumber *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFTypeRef cf = 0;
  if (!a1)
  {
    uint64_t v13 = FigSignalErrorAt();
LABEL_14:
    int v11 = 0;
    goto LABEL_9;
  }
  if (!a3 && !a4 && !a5)
  {
    uint64_t v13 = 0;
    goto LABEL_14;
  }
  CFTypeRef DecompressionSession = CMPhotoOneShotSessionPoolGetDecompressionSession();
  int v11 = DecompressionSession;
  if (DecompressionSession)
  {
    uint64_t Container = CMPhotoDecompressionSessionCreateContainer(DecompressionSession, 0, a1, 0, (uint64_t *)&cf);
    if (!Container) {
      uint64_t Container = CMPhotoDecompressionContainerGetImageGeometryForIndexWithOptions(cf, a2, 0, a3, a4, a5);
    }
    uint64_t v13 = Container;
  }
  else
  {
    uint64_t v13 = 4294950195;
  }
LABEL_9:
  CMPhotoOneShotSessionPoolRecycleSession(v11);
  if (cf) {
    CFRelease(cf);
  }
  return v13;
}

uint64_t CMPhotoDecompressionCreateCGImageForIndex(const __CFData *a1, const __CFNumber *a2, const __CFDictionary *a3, uint64_t a4)
{
  CFTypeRef cf = 0;
  if (!a1)
  {
    uint64_t v11 = FigSignalErrorAt();
LABEL_12:
    CFTypeID v9 = 0;
    goto LABEL_7;
  }
  if (!a4)
  {
    uint64_t v11 = 0;
    goto LABEL_12;
  }
  CFTypeRef DecompressionSession = CMPhotoOneShotSessionPoolGetDecompressionSession();
  CFTypeID v9 = DecompressionSession;
  if (DecompressionSession)
  {
    uint64_t Container = CMPhotoDecompressionSessionCreateContainer(DecompressionSession, 0, a1, 0, (uint64_t *)&cf);
    if (!Container) {
      uint64_t Container = CMPhotoDecompressionContainerCreateImageForIndex((char *)cf, a2, a3, 4, a4);
    }
    uint64_t v11 = Container;
  }
  else
  {
    uint64_t v11 = 4294950195;
  }
LABEL_7:
  CMPhotoOneShotSessionPoolRecycleSession(v9);
  if (cf) {
    CFRelease(cf);
  }
  return v11;
}

uint64_t CMPhotoDecompressionCreateCVPixelBufferForIndex(const __CFData *a1, const __CFNumber *a2, const __CFDictionary *a3, uint64_t a4)
{
  CFTypeRef cf = 0;
  if (!a1)
  {
    uint64_t v11 = FigSignalErrorAt();
LABEL_12:
    CFTypeID v9 = 0;
    goto LABEL_7;
  }
  if (!a4)
  {
    uint64_t v11 = 0;
    goto LABEL_12;
  }
  CFTypeRef DecompressionSession = CMPhotoOneShotSessionPoolGetDecompressionSession();
  CFTypeID v9 = DecompressionSession;
  if (DecompressionSession)
  {
    uint64_t Container = CMPhotoDecompressionSessionCreateContainer(DecompressionSession, a3, a1, 0, (uint64_t *)&cf);
    if (!Container) {
      uint64_t Container = CMPhotoDecompressionContainerCreateImageForIndex((char *)cf, a2, a3, 2, a4);
    }
    uint64_t v11 = Container;
  }
  else
  {
    uint64_t v11 = 4294950195;
  }
LABEL_7:
  CMPhotoOneShotSessionPoolRecycleSession(v9);
  if (cf) {
    CFRelease(cf);
  }
  return v11;
}

uint64_t CMPhotoDecompressionCreateCVPixelBufferForThumbnailIndexAndImageIndex(const __CFData *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5)
{
  CFTypeRef cf = 0;
  if (!a1)
  {
    uint64_t v13 = FigSignalErrorAt();
LABEL_12:
    uint64_t v11 = 0;
    goto LABEL_7;
  }
  if (!a5)
  {
    uint64_t v13 = 0;
    goto LABEL_12;
  }
  CFTypeRef DecompressionSession = CMPhotoOneShotSessionPoolGetDecompressionSession();
  uint64_t v11 = DecompressionSession;
  if (DecompressionSession)
  {
    uint64_t Container = CMPhotoDecompressionSessionCreateContainer(DecompressionSession, a4, a1, 0, (uint64_t *)&cf);
    if (!Container) {
      uint64_t Container = CMPhotoDecompressionContainerCreateThumbnailImageForIndex((char *)cf, a2, a3, a4, 2, a5);
    }
    uint64_t v13 = Container;
  }
  else
  {
    uint64_t v13 = 4294950195;
  }
LABEL_7:
  CMPhotoOneShotSessionPoolRecycleSession(v11);
  if (cf) {
    CFRelease(cf);
  }
  return v13;
}

uint64_t CMPhotoDecompressionDecodeIntoRGBSurfaceForIndex(const __CFData *a1, const __CFNumber *a2, const __CFDictionary *a3, IOSurfaceRef buffer)
{
  uint64x2_t value = 0;
  CFTypeRef cf = 0;
  if (!a1
    || !buffer
    || (OSType PixelFormat = IOSurfaceGetPixelFormat(buffer), PixelFormat != 1111970369) && PixelFormat != 1380401729)
  {
    uint64_t ImageForIndex = FigSignalErrorAt();
    CFIndex v10 = 0;
LABEL_11:
    CFDictionaryRef v14 = 0;
    goto LABEL_12;
  }
  CFTypeRef DecompressionSession = CMPhotoOneShotSessionPoolGetDecompressionSession();
  CFIndex v10 = DecompressionSession;
  if (!DecompressionSession)
  {
    CFDictionaryRef v14 = 0;
    uint64_t ImageForIndex = 4294950195;
    goto LABEL_12;
  }
  uint64_t Container = CMPhotoDecompressionSessionCreateContainer(DecompressionSession, 0, a1, 0, (uint64_t *)&cf);
  if (Container
    || (CFAllocatorRef v12 = CFGetAllocator(buffer),
        uint64_t Container = CMPhotoCreatePixelBufferWithSurface(v12, buffer, 0, (CVPixelBufferRef *)&value),
        Container))
  {
    uint64_t ImageForIndex = Container;
    goto LABEL_11;
  }
  CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, a3);
  CFDictionaryRef v14 = MutableCopy;
  if (MutableCopy)
  {
    CFDictionarySetValue(MutableCopy, @"UseProvidedPixelBuffer", value);
    uint64_t ImageForIndex = CMPhotoDecompressionContainerCreateImageForIndex((char *)cf, a2, v14, 2, (uint64_t)&value);
  }
  else
  {
    uint64_t ImageForIndex = 4294950305;
  }
LABEL_12:
  CMPhotoOneShotSessionPoolRecycleSession(v10);
  if (cf) {
    CFRelease(cf);
  }
  if (value) {
    CFRelease(value);
  }
  if (v14) {
    CFRelease(v14);
  }
  return ImageForIndex;
}

uint64_t pack_bgg4_arm(__n128 a1, __n128 a2, __n128 a3, __n128 a4)
{
  return bitstream_write_start_bgg4(a1, a2, a3, a4, (__n128)vdupq_n_s16(0x3FFu));
}

uint64_t bitstream_write_start_bgg4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return first_pixel_bgg4(a1, a2, a3, a4, a5, a6, 0, 32);
}

uint64_t first_pixel_bgg4(void *a1, void *a2, int a3, int16x8_t a4, double a5, double a6, double a7, int8x16_t a8)
{
  uint16x4_t v9 = *(uint16x4_t *)a1;
  uint64_t v8 = (uint16x8_t *)(a1 + 1);
  *(uint16x4_t *)a4.i8 = vshr_n_u16(v9, 4uLL);
  *a2 = a4.i64[0];
  uint64_t v10 = (uint64_t)(a2 + 1);
  int v11 = a3 - 4;
  if ((v11 & 7) != 0) {
    return sub_1AB93EA60();
  }
  else {
    return sub_1AB93EA80(v8, v10, v11, a4, a5, a6, a7, a8);
  }
}

uint64_t sub_1AB93EA60(uint16x4_t *a1, uint64_t a2, int a3, uint64_t a4, int16x4_t a5, double a6, double a7, double a8, int8x8_t a9)
{
  int16x4_t v9 = (int16x4_t)vshr_n_u16(*a1, 4uLL);
  return process_pixel_blue0_4((uint64_t)&a1[1], a2, (a3 - 4), a4, *(double *)&v9, *(double *)&v9, a7, *(float *)vshll_n_u16((uint16x4_t)vand_s8((int8x8_t)vsub_s16(v9, a5), a9), 2uLL).i32);
}

uint64_t sub_1AB93EA80(uint16x8_t *a1, uint64_t a2, int a3, int16x8_t a4, double a5, double a6, double a7, int8x16_t a8)
{
  __n128 v8 = (__n128)vshrq_n_u16(*a1, 4uLL);
  a4.i64[1] = v8.n128_u64[0];
  uint16x8_t v9 = (uint16x8_t)vandq_s8((int8x16_t)vsubq_s16((int16x8_t)v8, a4), a8);
  return process_pixel_blue0(&a1[1], a2, (a3 - 8), v8.n128_f64[1], v8, (__n128)vshll_n_u16(*(uint16x4_t *)v9.i8, 2uLL), (__n128)vshll_high_n_u16(v9, 2uLL));
}

uint64_t process_pixel_blue0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, float a7)
{
  return bitstream_write_code_blue0(a1, a2, a3, a4, (*(int *)(a4 + LODWORD(a7)) >> 16), *(_DWORD *)(a4 + LODWORD(a7)));
}

uint64_t bitstream_write_code_blue0(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, double a9, double a10, double a11)
{
  BOOL v11 = __OFSUB__(a8, a6);
  int v12 = a8 - a6;
  if ((v12 < 0) ^ v11 | (v12 == 0)) {
    return full_buffer_blue0(a1, a2, a3, a4, a5, a6, a7, v12);
  }
  else {
    return process_pixel_green0(a1, (uint64_t)a2, a3, a4, a5, a9, a10, a11, a6, a7, v12);
  }
}

uint64_t full_buffer_blue0(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, char a8)
{
  *a2 = a7 | (a5 >> -a8);
  return process_pixel_green0(a1, a2 + 1);
}

uint64_t process_pixel_green0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, double a8, uint64_t a9, int a10, char a11)
{
  return bitstream_write_code_green0(a1, a2, a3, a4, (*(int *)(a4 + HIDWORD(a8)) >> 16), *(_DWORD *)(a4 + HIDWORD(a8)), a10 | (a5 << a11));
}

uint64_t bitstream_write_code_green0(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, double a9, double a10, __n128 a11)
{
  BOOL v11 = __OFSUB__(a8, a6);
  int v12 = a8 - a6;
  if ((v12 < 0) ^ v11 | (v12 == 0)) {
    return full_buffer_green0(a1, a2, a3, a4, a5, a6, a7, v12);
  }
  else {
    return process_pixel_green1(a1, (uint64_t)a2, a3, a4, a5, a9, a10, a11, a6, a7, v12);
  }
}

uint64_t full_buffer_green0(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, char a8)
{
  *a2 = a7 | (a5 >> -a8);
  return process_pixel_green1(a1, a2 + 1);
}

uint64_t process_pixel_green1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, __n128 a8, uint64_t a9, int a10, char a11)
{
  return bitstream_write_code_green1(a1, a2, a3, a4, (*(int *)(a4 + a8.n128_u32[2]) >> 16), *(_DWORD *)(a4 + a8.n128_u32[2]), a10 | (a5 << a11));
}

uint64_t bitstream_write_code_green1(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, double a9, double a10, __n128 a11)
{
  BOOL v11 = __OFSUB__(a8, a6);
  int v12 = a8 - a6;
  if ((v12 < 0) ^ v11 | (v12 == 0)) {
    return full_buffer_green1(a1, a2, a3, a4, a5, a6, a7, v12);
  }
  else {
    return process_pixel_red0(a1, (uint64_t)a2, a3, a4, a5, a9, a10, a11, a6, a7, v12);
  }
}

uint64_t full_buffer_green1(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, char a8)
{
  *a2 = a7 | (a5 >> -a8);
  return process_pixel_red0(a1, a2 + 1);
}

uint64_t process_pixel_red0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, __n128 a8, uint64_t a9, int a10, char a11)
{
  return bitstream_write_code_red0(a1, a2, a3, a4, (*(int *)(a4 + a8.n128_u32[3]) >> 16), *(_DWORD *)(a4 + a8.n128_u32[3]), a10 | (a5 << a11));
}

uint64_t bitstream_write_code_red0(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, int a8)
{
  BOOL v8 = __OFSUB__(a8, a6);
  int v9 = a8 - a6;
  if ((v9 < 0) ^ v8 | (v9 == 0)) {
    return full_buffer_red0(a1, a2, a3, a4, a5, a6, a7, v9);
  }
  else {
    return process_pixel_blue1();
  }
}

uint64_t full_buffer_red0(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, char a8)
{
  *a2 = a7 | (a5 >> -a8);
  return process_pixel_blue1(a1, a2 + 1);
}

uint64_t process_pixel_blue1()
{
  return process_pixel_blue0_4();
}

uint64_t process_pixel_blue0_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7, float a8)
{
  return bitstream_write_code_blue1(a1, a2, a3, a4, (*(int *)(a4 + LODWORD(a8)) >> 16), *(_DWORD *)(a4 + LODWORD(a8)));
}

uint64_t bitstream_write_code_blue1(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, double a9, double a10, double a11, double a12)
{
  BOOL v12 = __OFSUB__(a8, a6);
  int v13 = a8 - a6;
  if ((v13 < 0) ^ v12 | (v13 == 0)) {
    return full_buffer_blue1(a1, a2, a3, a4, a5, a6, a7, v13);
  }
  else {
    return process_pixel_green2(a1, (uint64_t)a2, a3, a4, a5, a9, a10, a11, a12, a6, a7, v13);
  }
}

uint64_t full_buffer_blue1(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, char a8)
{
  *a2 = a7 | (a5 >> -a8);
  return process_pixel_green2(a1, a2 + 1);
}

uint64_t process_pixel_green2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, double a8, double a9, uint64_t a10, int a11, char a12)
{
  return bitstream_write_code_green2(a1, a2, a3, a4, (*(int *)(a4 + HIDWORD(a9)) >> 16), *(_DWORD *)(a4 + HIDWORD(a9)), a11 | (a5 << a12));
}

uint64_t bitstream_write_code_green2(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, double a9, double a10, double a11, __n128 a12)
{
  BOOL v12 = __OFSUB__(a8, a6);
  int v13 = a8 - a6;
  if ((v13 < 0) ^ v12 | (v13 == 0)) {
    return full_buffer_green2(a1, a2, a3, a4, a5, a6, a7, v13);
  }
  else {
    return process_pixel_green3(a1, (uint64_t)a2, a3, a4, a5, a9, a10, a11, a12, a6, a7, v13);
  }
}

uint64_t full_buffer_green2(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, char a8)
{
  *a2 = a7 | (a5 >> -a8);
  return process_pixel_green3(a1, a2 + 1);
}

uint64_t process_pixel_green3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, double a8, __n128 a9, uint64_t a10, int a11, char a12)
{
  return bitstream_write_code_green3(a1, a2, a3, a4, (*(int *)(a4 + a9.n128_u32[2]) >> 16), *(_DWORD *)(a4 + a9.n128_u32[2]), a11 | (a5 << a12));
}

uint64_t bitstream_write_code_green3(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, double a9, double a10, double a11, __n128 a12)
{
  BOOL v12 = __OFSUB__(a8, a6);
  int v13 = a8 - a6;
  if ((v13 < 0) ^ v12 | (v13 == 0)) {
    return full_buffer_green3(a1, a2, a3, a4, a5, a6, a7, v13);
  }
  else {
    return process_pixel_red1(a1, (uint64_t)a2, a3, a4, a5, a9, a10, a11, a12, a6, a7, v13);
  }
}

uint64_t full_buffer_green3(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, char a8)
{
  *a2 = a7 | (a5 >> -a8);
  return process_pixel_red1(a1, a2 + 1);
}

uint64_t process_pixel_red1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, double a8, __n128 a9, uint64_t a10, int a11, char a12)
{
  return bitstream_write_code_red1(a1, a2, a3, a4, (*(int *)(a4 + a9.n128_u32[3]) >> 16), *(_DWORD *)(a4 + a9.n128_u32[3]), a11 | (a5 << a12));
}

uint64_t bitstream_write_code_red1(uint16x8_t *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, int16x8_t a9, double a10, double a11, double a12, int8x16_t a13)
{
  BOOL v13 = __OFSUB__(a8, a6);
  int v14 = a8 - a6;
  if ((v14 < 0) ^ v13 | (v14 == 0)) {
    return full_buffer_red1((uint64_t)a1, a2, a3, a4, a5, a6, a7, v14);
  }
  else {
    return finish_quad_bgg4(a1, (uint64_t)a2, a3, a4, a5, a6, a7, v14, a9, a10, a11, a12, a13);
  }
}

uint64_t full_buffer_red1(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, char a8)
{
  *a2 = a7 | (a5 >> -a8);
  return finish_quad_bgg4(a1, a2 + 1);
}

uint64_t finish_quad_bgg4(uint16x8_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, char a8, int16x8_t a9, double a10, double a11, double a12, int8x16_t a13)
{
  uint64_t v13 = a7 | (a5 << a8);
  if (a3) {
    return sub_1AB93EA80(a1, a2, a3, a9, a10, a11, a12, a13);
  }
  else {
    return bitstream_write_flush_bgg4(a1, a2, a3, a4, a5, a6, v13);
  }
}

uint64_t bitstream_write_flush_bgg4@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, int a9@<W8>)
{
  if (a8 < 8) {
    return bitstream_write_quad_bgg4(a1, a2, a3, a4, a5, a6, a7);
  }
  int v10 = a9 - a8;
  if (v10) {
    return flush_loop_bgg4(a1, a2, a3, a4, a5, a6, a7, v10);
  }
  else {
    return done_bgg4(a1, (uint64_t)a2);
  }
}

uint64_t flush_loop_bgg4(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  do
  {
    HIDWORD(v8) = a7;
    LODWORD(v8) = a7;
    a7 = v8 >> 24;
    *a2++ = BYTE3(v8);
    BOOL v9 = __OFSUB__(a8, 8);
    a8 -= 8;
  }
  while (!((a8 < 0) ^ v9 | (a8 == 0)));
  return done_bgg4();
}

uint64_t done_bgg4(uint64_t a1, uint64_t a2)
{
  return a2 - v2;
}

uint64_t bitstream_write_quad_bgg4(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  *a2 = a7;
  return done_bgg4(a1, (uint64_t)(a2 + 1));
}

uint64_t CMPhotoInterchangeCompactEncode(__CVBuffer *a1, unsigned int *a2, uint64_t a3)
{
  pixelBufferOut[0] = 0;
  id v6 = MTLCreateSystemDefaultDevice();
  CFTypeRef v94 = 0;
  CFDictionaryRef v7 = CFDictionaryCreate(0, 0, 0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionaryRef v8 = v7;
  if (!v7)
  {
    CFDictionaryRef v9 = 0;
    goto LABEL_12;
  }
  keyCGColorSpaceRef s = (void *)*MEMORY[0x1E4F24D20];
  valueCGColorSpaceRef s = v7;
  CFDictionaryRef v9 = CFDictionaryCreate(0, (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v9)
  {
LABEL_12:
    uint64_t v11 = 4294951895;
    goto LABEL_13;
  }
  int v10 = a2[8];
  uint64_t v11 = 4294951891;
  if (v10 <= 1651519797)
  {
    if (v10 == 1278226488)
    {
      if (!CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *a2, a2[1], 0x264C3038u, v9, pixelBufferOut))
      {
        uint64_t v13 = [CMPhotoInterchangeCompactMetal alloc];
        goto LABEL_33;
      }
      goto LABEL_12;
    }
    if (v10 != 1278226536) {
      goto LABEL_13;
    }
    goto LABEL_26;
  }
  if (v10 == 1651519798)
  {
    if (!CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (unint64_t)*a2 >> 1, (unint64_t)a2[1] >> 1, 0x26526841u, v9, pixelBufferOut))
    {
      uint64_t v13 = [CMPhotoInterchangeCompactMetal alloc];
      id v14 = v6;
      uint64_t v15 = 1;
      goto LABEL_30;
    }
    goto LABEL_12;
  }
  if (v10 == 1751411059)
  {
LABEL_26:
    if (!CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *a2, a2[1], 0x264C3068u, v9, pixelBufferOut))
    {
      uint64_t v13 = [CMPhotoInterchangeCompactMetal alloc];
      id v14 = v6;
      uint64_t v15 = 0;
LABEL_30:
      uint64_t v16 = 0;
      uint64_t v18 = 16;
      goto LABEL_36;
    }
    goto LABEL_12;
  }
  if (v10 != 1652056888) {
    goto LABEL_13;
  }
  if (CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (unint64_t)*a2 >> 1, (unint64_t)a2[1] >> 1, 0x26424741u, v9, pixelBufferOut))
  {
    goto LABEL_12;
  }
  int v12 = a2[2090];
  if (v12 != 8 && v12 != 5)
  {
    uint64_t v13 = [CMPhotoInterchangeCompactMetal alloc];
    if (v12 <= 3)
    {
      id v14 = v6;
      uint64_t v15 = 1;
      goto LABEL_34;
    }
LABEL_33:
    id v14 = v6;
    uint64_t v15 = 0;
LABEL_34:
    uint64_t v16 = 0;
    goto LABEL_35;
  }
  uint64_t v13 = [CMPhotoInterchangeCompactMetal alloc];
  id v14 = v6;
  uint64_t v15 = 0;
  uint64_t v16 = 1;
LABEL_35:
  uint64_t v18 = 8;
LABEL_36:
  int v19 = [(CMPhotoInterchangeCompactMetal *)v13 initWithDevice:v14 encode:1 bayer:v15 quadra:v16 depth:v18];
  uint64_t v11 = IOSurfaceAcceleratorCreate();
  if (!v11)
  {
    [(CMPhotoInterchangeCompactMetal *)v19 prepareSrc:CVPixelBufferGetIOSurface(a1)];
    [(CMPhotoInterchangeCompactMetal *)v19 prepareDst:CVPixelBufferGetIOSurface(pixelBufferOut[0])];
    [(CMPhotoInterchangeCompactMetal *)v19 prepareData];
    float v80 = v19;
    [(CMPhotoInterchangeCompactMetal *)v19 sendRenderCommand];
    CVPixelBufferGetIOSurface(pixelBufferOut[0]);
    size_t v82 = *(uint8x8_t **)(a3 + 16);
    unint64_t WidthInCompressedTilesOfPlane = IOSurfaceGetWidthInCompressedTilesOfPlane();
    uint64_t HeightInCompressedTilesOfPlane = IOSurfaceGetHeightInCompressedTilesOfPlane();
    unint64_t BytesPerTileDataOfPlane = IOSurfaceGetBytesPerTileDataOfPlane();
    CompressedTileint WidthOfPlane = IOSurfaceGetCompressedTileWidthOfPlane();
    unint64_t v23 = (unint64_t)(IOSurfaceGetCompressedTileHeightOfPlane() * CompressedTileWidthOfPlane) >> 5;
    uint64_t BaseAddressOfCompressedTileHeaderRegionOfPlane = IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane();
    uint64_t BaseAddressOfCompressedTileDataRegionOfPlane = IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfPlane();
    uint64_t v25 = malloc_type_malloc(2 * HeightInCompressedTilesOfPlane * WidthInCompressedTilesOfPlane, 0x1000040BDFB0063uLL);
    uint64_t v26 = HeightInCompressedTilesOfPlane;
    unint64_t v83 = v23 * HeightInCompressedTilesOfPlane * WidthInCompressedTilesOfPlane;
    unsigned int v27 = 32 - __clz(WidthInCompressedTilesOfPlane - 1);
    if (WidthInCompressedTilesOfPlane >= 2) {
      unint64_t v28 = v27;
    }
    else {
      unint64_t v28 = 0;
    }
    unsigned int v29 = 32 - __clz(HeightInCompressedTilesOfPlane - 1);
    if (HeightInCompressedTilesOfPlane >= 2) {
      unint64_t v30 = v29;
    }
    else {
      unint64_t v30 = 0;
    }
    unint64_t v88 = HeightInCompressedTilesOfPlane;
    int64x2_t v31 = v25;
    uint64_t v81 = a3;
    if (v23 == 8)
    {
      if (v26)
      {
        CFDictionaryRef v77 = v9;
        id v78 = v6;
        CFDictionaryRef v79 = v8;
        unint64_t v32 = 0;
        int v33 = 0;
        int v34 = 0;
        float v35 = v82;
        float v36 = v25;
        int8x16_t v89 = (int8x16_t)vdupq_n_s16((BytesPerTileDataOfPlane >> 3) - 1);
        do
        {
          int v86 = v34;
          if (WidthInCompressedTilesOfPlane)
          {
            unint64_t v37 = 0;
            unsigned int v38 = 1;
            do
            {
              unint64_t v39 = _agxXBiasedTwiddle(v37, v32, v28, v30);
              v40.i64[0] = 0x1000100010001;
              v40.i64[1] = 0x1000100010001;
              uint8x8_t v41 = *(uint8x8_t *)(BaseAddressOfCompressedTileHeaderRegionOfPlane + 8 * v39);
              int16x8_t v42 = (int16x8_t)vmovl_u8(v41);
              int8x16_t v43 = vbicq_s8((int8x16_t)vaddq_s16((int16x8_t)vandq_s8(v89, (int8x16_t)v42), v40), (int8x16_t)vceqzq_s16(v42));
              *(int16x4_t *)v43.i8 = vadd_s16(*(int16x4_t *)v43.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL));
              int8x16_t v44 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v43.i8);
              uint32x4_t v45 = vaddw_u16((uint32x4_t)vextq_s8(v44, v44, 8uLL), *(uint16x4_t *)v43.i8);
              v33 += (unsigned __int16)(v45.i16[0] + v45.i16[2]);
              *v36++ = v45.i16[0] + v45.i16[2];
              *v35++ = v41;
              unint64_t v37 = v38;
              BOOL v46 = WidthInCompressedTilesOfPlane > v38++;
            }
            while (v46);
          }
          unint64_t v32 = (v86 + 1);
          int v34 = v86 + 1;
          unint64_t v47 = v88;
        }
        while (v88 > v32);
        goto LABEL_59;
      }
    }
    else if (v26)
    {
      CFDictionaryRef v77 = v9;
      id v78 = v6;
      CFDictionaryRef v79 = v8;
      unint64_t v48 = 0;
      int v33 = 0;
      int v49 = 0;
      unint64_t v50 = v82;
      uint64_t v51 = v25;
      int8x16_t v90 = (int8x16_t)vdupq_n_s16((BytesPerTileDataOfPlane >> 5) - 1);
      do
      {
        int v87 = v49;
        if (WidthInCompressedTilesOfPlane)
        {
          unint64_t v52 = 0;
          unsigned int v53 = 1;
          do
          {
            unint64_t v54 = _agxXBiasedTwiddle(v52, v48, v28, v30);
            v55.i64[0] = 0x1000100010001;
            v55.i64[1] = 0x1000100010001;
            unint64_t v56 = BaseAddressOfCompressedTileHeaderRegionOfPlane + 32 * v54;
            long long v57 = *(_OWORD *)v56;
            uint8x16_t v58 = *(uint8x16_t *)(v56 + 16);
            int16x8_t v59 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v58.i8);
            int16x8_t v60 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v56);
            int16x8_t v61 = (int16x8_t)vmovl_high_u8(v58);
            int16x8_t v62 = (int16x8_t)vmovl_high_u8(*(uint8x16_t *)v56);
            int8x16_t v63 = (int8x16_t)vaddq_s16(vaddq_s16((int16x8_t)vbicq_s8((int8x16_t)vaddq_s16((int16x8_t)vandq_s8(v90, (int8x16_t)v60), v55), (int8x16_t)vceqzq_s16(v60)), (int16x8_t)vbicq_s8((int8x16_t)vaddq_s16((int16x8_t)vandq_s8(v90, (int8x16_t)v59), v55), (int8x16_t)vceqzq_s16(v59))), vaddq_s16((int16x8_t)vbicq_s8((int8x16_t)vaddq_s16((int16x8_t)vandq_s8(v90, (int8x16_t)v62), v55), (int8x16_t)vceqzq_s16(v62)), (int16x8_t)vbicq_s8((int8x16_t)vaddq_s16((int16x8_t)vandq_s8(v90, (int8x16_t)v61), v55), (int8x16_t)vceqzq_s16(v61))));
            *(int16x4_t *)v63.i8 = vadd_s16(*(int16x4_t *)v63.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL));
            int8x16_t v64 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v63.i8);
            uint32x4_t v65 = vaddw_u16((uint32x4_t)vextq_s8(v64, v64, 8uLL), *(uint16x4_t *)v63.i8);
            v33 += (unsigned __int16)(v65.i16[0] + v65.i16[2]);
            *v51++ = v65.i16[0] + v65.i16[2];
            unint64_t v66 = v50 + 4;
            *(_OWORD *)v50->i8 = v57;
            *(uint8x16_t *)v50[2].i8 = v58;
            unint64_t v52 = v53;
            BOOL v46 = WidthInCompressedTilesOfPlane > v53++;
            v50 += 4;
          }
          while (v46);
        }
        else
        {
          unint64_t v66 = v50;
        }
        unint64_t v48 = (v87 + 1);
        unint64_t v50 = v66;
        int v49 = v87 + 1;
        unint64_t v47 = v88;
      }
      while (v88 > v48);
LABEL_59:
      if (v47)
      {
        unint64_t v67 = 0;
        int v68 = 0;
        uint64_t v69 = 0;
        unint64_t v70 = (char *)v82 + v83;
        uint64_t v25 = v31;
        do
        {
          int v91 = v68;
          if (WidthInCompressedTilesOfPlane)
          {
            uint64_t v71 = 0;
            unint64_t v72 = v67 * WidthInCompressedTilesOfPlane;
            unsigned int v73 = 1;
            do
            {
              uint64_t v74 = v71 + v72;
              size_t v75 = (unsigned __int16)v25[v74];
              memcpy(v70, (const void *)(BaseAddressOfCompressedTileDataRegionOfPlane + v74 * BytesPerTileDataOfPlane), v75);
              uint64_t v25 = v31;
              v70 += v75;
              v69 += v75;
              uint64_t v71 = v73;
              BOOL v46 = WidthInCompressedTilesOfPlane > v73++;
            }
            while (v46);
          }
          unint64_t v67 = (v91 + 1);
          int v68 = v91 + 1;
        }
        while (v88 > v67);
        id v6 = v78;
        CFDictionaryRef v8 = v79;
        CFDictionaryRef v9 = v77;
      }
      else
      {
        uint64_t v69 = 0;
        id v6 = v78;
        CFDictionaryRef v8 = v79;
        CFDictionaryRef v9 = v77;
        uint64_t v25 = v31;
      }
      goto LABEL_68;
    }
    int v33 = 0;
    uint64_t v69 = 0;
LABEL_68:
    free(v25);
    if (v69 != v33) {
      CMPhotoInterchangeCompactEncode_cold_1();
    }
    uint64_t v11 = 0;
    uint64_t v76 = v69 + v83;
    int v19 = v80;
    *(void *)(v81 + 16) += v76;
  }
  if (v19) {

  }
LABEL_13:
  if (v6) {

  }
  if (v94) {
    CFRelease(v94);
  }
  if (pixelBufferOut[0]) {
    CFRelease(pixelBufferOut[0]);
  }
  if (v9) {
    CFRelease(v9);
  }
  if (v8) {
    CFRelease(v8);
  }
  return v11;
}

uint64_t CMPhotoInterchangeCompactDecode(__CVBuffer *a1, unsigned int *a2, uint64_t a3)
{
  pixelBufferOut[0] = 0;
  id v6 = MTLCreateSystemDefaultDevice();
  CFTypeRef v96 = 0;
  CFDictionaryRef v7 = CFDictionaryCreate(0, 0, 0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionaryRef v8 = v7;
  if (!v7)
  {
    CFDictionaryRef v10 = 0;
    goto LABEL_12;
  }
  CFDictionaryRef v9 = (void *)*MEMORY[0x1E4F24D20];
  valueCGColorSpaceRef s = v7;
  keyCGColorSpaceRef s = v9;
  CFDictionaryRef v10 = CFDictionaryCreate(0, (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v10)
  {
LABEL_12:
    uint64_t v12 = 4294951895;
    goto LABEL_13;
  }
  int v11 = a2[8];
  uint64_t v12 = 4294951891;
  if (v11 <= 1651519797)
  {
    if (v11 == 1278226488)
    {
      if (!CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *a2, a2[1], 0x264C3038u, v10, pixelBufferOut))
      {
        CVPixelBufferRef pixelBuffer = a1;
        id v14 = [CMPhotoInterchangeCompactMetal alloc];
        goto LABEL_33;
      }
      goto LABEL_12;
    }
    if (v11 != 1278226536) {
      goto LABEL_13;
    }
    goto LABEL_26;
  }
  if (v11 == 1651519798)
  {
    if (!CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (unint64_t)*a2 >> 1, (unint64_t)a2[1] >> 1, 0x26526841u, v10, pixelBufferOut))
    {
      CVPixelBufferRef pixelBuffer = a1;
      id v14 = [CMPhotoInterchangeCompactMetal alloc];
      id v15 = v6;
      uint64_t v16 = 1;
      goto LABEL_30;
    }
    goto LABEL_12;
  }
  if (v11 == 1751411059)
  {
LABEL_26:
    if (!CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *a2, a2[1], 0x264C3068u, v10, pixelBufferOut))
    {
      CVPixelBufferRef pixelBuffer = a1;
      id v14 = [CMPhotoInterchangeCompactMetal alloc];
      id v15 = v6;
      uint64_t v16 = 0;
LABEL_30:
      uint64_t v17 = 0;
      uint64_t v19 = 16;
      goto LABEL_36;
    }
    goto LABEL_12;
  }
  if (v11 != 1652056888) {
    goto LABEL_13;
  }
  if (CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (unint64_t)*a2 >> 1, (unint64_t)a2[1] >> 1, 0x26424741u, v10, pixelBufferOut))
  {
    goto LABEL_12;
  }
  int v13 = a2[2090];
  CVPixelBufferRef pixelBuffer = a1;
  if (v13 != 8 && v13 != 5)
  {
    id v14 = [CMPhotoInterchangeCompactMetal alloc];
    if (v13 <= 3)
    {
      id v15 = v6;
      uint64_t v16 = 1;
      goto LABEL_34;
    }
LABEL_33:
    id v15 = v6;
    uint64_t v16 = 0;
LABEL_34:
    uint64_t v17 = 0;
    goto LABEL_35;
  }
  id v14 = [CMPhotoInterchangeCompactMetal alloc];
  id v15 = v6;
  uint64_t v16 = 0;
  uint64_t v17 = 1;
LABEL_35:
  uint64_t v19 = 8;
LABEL_36:
  unint64_t v83 = [(CMPhotoInterchangeCompactMetal *)v14 initWithDevice:v15 encode:0 bayer:v16 quadra:v17 depth:v19];
  CVPixelBufferGetIOSurface(pixelBufferOut[0]);
  uint64_t v84 = a3;
  size_t v85 = *(uint8x8_t **)(a3 + 16);
  unint64_t WidthInCompressedTilesOfPlane = IOSurfaceGetWidthInCompressedTilesOfPlane();
  uint64_t HeightInCompressedTilesOfPlane = IOSurfaceGetHeightInCompressedTilesOfPlane();
  unint64_t BytesPerTileDataOfPlane = IOSurfaceGetBytesPerTileDataOfPlane();
  CompressedTileint WidthOfPlane = IOSurfaceGetCompressedTileWidthOfPlane();
  unint64_t v23 = (unint64_t)(IOSurfaceGetCompressedTileHeightOfPlane() * CompressedTileWidthOfPlane) >> 5;
  uint64_t BaseAddressOfCompressedTileHeaderRegionOfPlane = IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane();
  uint64_t BaseAddressOfCompressedTileDataRegionOfPlane = IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfPlane();
  uint64_t v25 = malloc_type_malloc(2 * HeightInCompressedTilesOfPlane * WidthInCompressedTilesOfPlane, 0x1000040BDFB0063uLL);
  uint64_t v26 = HeightInCompressedTilesOfPlane;
  unint64_t v27 = v23 * HeightInCompressedTilesOfPlane * WidthInCompressedTilesOfPlane;
  unsigned int v28 = 32 - __clz(WidthInCompressedTilesOfPlane - 1);
  if (WidthInCompressedTilesOfPlane >= 2) {
    unint64_t v29 = v28;
  }
  else {
    unint64_t v29 = 0;
  }
  unsigned int v30 = 32 - __clz(v26 - 1);
  if (v26 >= 2) {
    unint64_t v31 = v30;
  }
  else {
    unint64_t v31 = 0;
  }
  unint64_t v90 = v26;
  unint64_t v32 = v25;
  if (v23 == 8)
  {
    if (v26)
    {
      CFDictionaryRef v81 = v8;
      unint64_t v82 = v27;
      CFDictionaryRef v79 = v10;
      id v80 = v6;
      unint64_t v33 = 0;
      int v34 = 0;
      int v35 = 0;
      float v36 = v25;
      unint64_t v37 = v85;
      int8x16_t v91 = (int8x16_t)vdupq_n_s16((BytesPerTileDataOfPlane >> 3) - 1);
      do
      {
        int v88 = v35;
        if (WidthInCompressedTilesOfPlane)
        {
          unint64_t v38 = 0;
          unsigned int v39 = 1;
          do
          {
            unint64_t v40 = _agxXBiasedTwiddle(v38, v33, v29, v31);
            v41.i64[0] = 0x1000100010001;
            v41.i64[1] = 0x1000100010001;
            unint64_t v42 = v40;
            uint8x8_t v43 = *v37++;
            int16x8_t v44 = (int16x8_t)vmovl_u8(v43);
            int8x16_t v45 = vbicq_s8((int8x16_t)vaddq_s16((int16x8_t)vandq_s8(v91, (int8x16_t)v44), v41), (int8x16_t)vceqzq_s16(v44));
            *(int16x4_t *)v45.i8 = vadd_s16(*(int16x4_t *)v45.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL));
            int8x16_t v46 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v45.i8);
            uint32x4_t v47 = vaddw_u16((uint32x4_t)vextq_s8(v46, v46, 8uLL), *(uint16x4_t *)v45.i8);
            *v36++ = v47.i16[0] + v47.i16[2];
            v34 += (unsigned __int16)(v47.i16[0] + v47.i16[2]);
            unint64_t v38 = v39;
            BOOL v48 = WidthInCompressedTilesOfPlane > v39++;
            *(uint8x8_t *)(BaseAddressOfCompressedTileHeaderRegionOfPlane + 8 * v42) = v43;
          }
          while (v48);
        }
        unint64_t v33 = (v88 + 1);
        int v35 = v88 + 1;
        unint64_t v49 = v90;
      }
      while (v90 > v33);
      goto LABEL_58;
    }
  }
  else if (v26)
  {
    CFDictionaryRef v81 = v8;
    unint64_t v82 = v27;
    CFDictionaryRef v79 = v10;
    id v80 = v6;
    unint64_t v50 = 0;
    int v34 = 0;
    int v51 = 0;
    unint64_t v52 = v25;
    unsigned int v53 = v85;
    int8x16_t v92 = (int8x16_t)vdupq_n_s16((BytesPerTileDataOfPlane >> 5) - 1);
    do
    {
      int v89 = v51;
      if (WidthInCompressedTilesOfPlane)
      {
        unint64_t v54 = 0;
        unsigned int v55 = 1;
        do
        {
          unint64_t v56 = _agxXBiasedTwiddle(v54, v50, v29, v31);
          v57.i64[0] = 0x1000100010001;
          v57.i64[1] = 0x1000100010001;
          long long v58 = *(_OWORD *)v53->i8;
          uint8x16_t v59 = *(uint8x16_t *)v53[2].i8;
          int16x8_t v60 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v59.i8);
          int16x8_t v61 = (int16x8_t)vmovl_u8(*v53);
          int16x8_t v62 = (int16x8_t)vmovl_high_u8(v59);
          int16x8_t v63 = (int16x8_t)vmovl_high_u8(*(uint8x16_t *)v53->i8);
          int8x16_t v64 = (int8x16_t)vaddq_s16(vaddq_s16((int16x8_t)vbicq_s8((int8x16_t)vaddq_s16((int16x8_t)vandq_s8(v92, (int8x16_t)v61), v57), (int8x16_t)vceqzq_s16(v61)), (int16x8_t)vbicq_s8((int8x16_t)vaddq_s16((int16x8_t)vandq_s8(v92, (int8x16_t)v60), v57), (int8x16_t)vceqzq_s16(v60))), vaddq_s16((int16x8_t)vbicq_s8((int8x16_t)vaddq_s16((int16x8_t)vandq_s8(v92, (int8x16_t)v63), v57), (int8x16_t)vceqzq_s16(v63)), (int16x8_t)vbicq_s8((int8x16_t)vaddq_s16((int16x8_t)vandq_s8(v92, (int8x16_t)v62), v57), (int8x16_t)vceqzq_s16(v62))));
          *(int16x4_t *)v64.i8 = vadd_s16(*(int16x4_t *)v64.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v64, v64, 8uLL));
          int8x16_t v65 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v64.i8);
          uint32x4_t v66 = vaddw_u16((uint32x4_t)vextq_s8(v65, v65, 8uLL), *(uint16x4_t *)v64.i8);
          unint64_t v67 = v53 + 4;
          int v68 = (_OWORD *)(BaseAddressOfCompressedTileHeaderRegionOfPlane + 32 * v56);
          unint64_t v54 = v55;
          *v52++ = v66.i16[0] + v66.i16[2];
          v34 += (unsigned __int16)(v66.i16[0] + v66.i16[2]);
          BOOL v48 = WidthInCompressedTilesOfPlane > v55++;
          v53 += 4;
          *int v68 = v58;
          v68[1] = v59;
        }
        while (v48);
      }
      else
      {
        unint64_t v67 = v53;
      }
      unint64_t v50 = (v89 + 1);
      unsigned int v53 = v67;
      int v51 = v89 + 1;
      unint64_t v49 = v90;
    }
    while (v90 > v50);
LABEL_58:
    if (v49)
    {
      unint64_t v69 = 0;
      int v70 = 0;
      uint64_t v71 = 0;
      unint64_t v72 = (char *)v85 + v82;
      uint64_t v25 = v32;
      do
      {
        int v93 = v70;
        if (WidthInCompressedTilesOfPlane)
        {
          uint64_t v73 = 0;
          unint64_t v74 = v69 * WidthInCompressedTilesOfPlane;
          unsigned int v75 = 1;
          do
          {
            uint64_t v76 = v73 + v74;
            size_t v77 = (unsigned __int16)v25[v76];
            memcpy((void *)(BaseAddressOfCompressedTileDataRegionOfPlane + v76 * BytesPerTileDataOfPlane), v72, v77);
            uint64_t v25 = v32;
            v72 += v77;
            v71 += v77;
            uint64_t v73 = v75;
            BOOL v48 = WidthInCompressedTilesOfPlane > v75++;
          }
          while (v48);
        }
        unint64_t v69 = (v93 + 1);
        int v70 = v93 + 1;
      }
      while (v90 > v69);
      id v6 = v80;
      CFDictionaryRef v8 = v81;
      unint64_t v27 = v82;
      CFDictionaryRef v10 = v79;
    }
    else
    {
      uint64_t v71 = 0;
      id v6 = v80;
      CFDictionaryRef v8 = v81;
      CFDictionaryRef v10 = v79;
      unint64_t v27 = v82;
      uint64_t v25 = v32;
    }
    goto LABEL_67;
  }
  int v34 = 0;
  uint64_t v71 = 0;
LABEL_67:
  free(v25);
  if (v71 != v34) {
    CMPhotoInterchangeCompactDecode_cold_1();
  }
  if (*(void *)(v84 + 24) - *(void *)(v84 + 16) == v71 + v27)
  {
    uint64_t v12 = IOSurfaceAcceleratorCreate();
    if (!v12)
    {
      [(CMPhotoInterchangeCompactMetal *)v83 prepareSrc:CVPixelBufferGetIOSurface(pixelBufferOut[0])];
      [(CMPhotoInterchangeCompactMetal *)v83 prepareDst:CVPixelBufferGetIOSurface(pixelBuffer)];
      [(CMPhotoInterchangeCompactMetal *)v83 sendRenderCommand];
    }
  }
  else
  {
    uint64_t v12 = 4294951889;
  }
  if (v83) {

  }
LABEL_13:
  if (v6) {

  }
  if (v96) {
    CFRelease(v96);
  }
  if (pixelBufferOut[0]) {
    CFRelease(pixelBufferOut[0]);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (v8) {
    CFRelease(v8);
  }
  return v12;
}

unint64_t _agxXBiasedTwiddle(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if (a3 >= a4) {
    unint64_t v4 = a4;
  }
  else {
    unint64_t v4 = a3;
  }
  if (v4)
  {
    uint64x2_t v5 = (uint64x2_t)vdupq_n_s64(v4 - 1);
    uint64x2_t v6 = (uint64x2_t)vdupq_n_s64(a1);
    unint64_t v7 = (v4 + 1) & 0xFFFFFFFFFFFFFFFELL;
    int64x2_t v8 = (int64x2_t)xmmword_1AB9DCA60;
    uint64x2_t v9 = (uint64x2_t)vdupq_n_s64(a2);
    int8x16_t v10 = 0uLL;
    int8x16_t v11 = (int8x16_t)vdupq_n_s64(1uLL);
    int64x2_t v12 = vdupq_n_s64(2uLL);
    do
    {
      int8x16_t v13 = v10;
      int64x2_t v14 = v8;
      uint64x2_t v15 = (uint64x2_t)vnegq_s64(v8);
      int8x16_t v16 = (int8x16_t)vaddq_s64(v14, v14);
      int8x16_t v10 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vandq_s8((int8x16_t)vshlq_u64(v6, v15), v11), (uint64x2_t)v16), (int8x16_t)vshlq_u64((uint64x2_t)vandq_s8((int8x16_t)vshlq_u64(v9, v15), v11), (uint64x2_t)vorrq_s8(v16, v11))), v13);
      int64x2_t v8 = vaddq_s64(v8, v12);
      v7 -= 2;
    }
    while (v7);
    int8x16_t v17 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v14, v5), v13, v10);
    int8x8_t v18 = vorr_s8(*(int8x8_t *)v17.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL));
  }
  else
  {
    int8x8_t v18 = 0;
  }
  return *(void *)&v18 | ((a2 | a1) >> v4 << (2 * v4));
}

uint64_t CMPhotoDecompressionContainerJFIF_pixelFormatToAppleJPEGFormat(int a1, int a2, int *a3)
{
  uint64_t result = 4294950301;
  if (a1 <= 1278226735)
  {
    if (a1 > 875704933)
    {
      if (a1 > 1111970368)
      {
        if (a1 == 1111970369)
        {
          int v6 = 4;
        }
        else
        {
          if (a1 != 1278226488) {
            return result;
          }
          int v6 = 5;
        }
      }
      else if (a1 == 875704934)
      {
        int v6 = 8;
      }
      else
      {
        if (a1 != 875836518) {
          return result;
        }
        int v6 = 24;
      }
      goto LABEL_21;
    }
    if (a1 != 825306677 && a1 != 825437747)
    {
      if (a1 != 875704422) {
        return result;
      }
      int v6 = 10;
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (a1 <= 1815491697)
  {
    if (a1 > 1278555700)
    {
      if (a1 == 1278555701)
      {
        int v6 = 2;
      }
      else
      {
        if (a1 != 1380401729) {
          return result;
        }
        int v6 = 3;
      }
      goto LABEL_21;
    }
    if (a1 == 1278226736) {
      goto LABEL_20;
    }
    int v5 = 1278226742;
LABEL_14:
    if (a1 != v5) {
      return result;
    }
LABEL_20:
    int v6 = 18;
    goto LABEL_21;
  }
  if (a1 <= 1952854575)
  {
    if (a1 != 1815491698)
    {
      int v5 = 1932996149;
      goto LABEL_14;
    }
    int v6 = 16;
LABEL_21:
    uint64_t result = 0;
    if (a3) {
      *a3 = v6;
    }
    return result;
  }
  if ((a1 == 1952854576 || a1 == 2019963440) && !a2)
  {
    int v6 = 19;
    goto LABEL_21;
  }
  return result;
}

uint64_t _copyFormatDescriptionForIndex(uint64_t a1, unint64_t a2, uint64_t a3, CMVideoFormatDescriptionRef *a4)
{
  unint64_t v21 = a2;
  uint64_t v6 = a1 + 40;
  unsigned __int8 v20 = 0;
  uint64_t v7 = _checkImageIndex(a1 + 40, &v21, &v20);
  if (v7) {
    return v7;
  }
  int v8 = v20;
  CGColorSpaceRef space = 0;
  CMVideoFormatDescriptionRef formatDescriptionOut = 0;
  CFAllocatorRef v9 = CFGetAllocator((CFTypeRef)a1);
  uint64_t v10 = _parseImageSizeAndTypeIfNeeded(v6);
  if (!v10)
  {
    uint64_t v11 = _parseICCProfileIfNeeded(v6);
    if (v11)
    {
      uint64_t v18 = v11;
      int8x16_t v13 = 0;
      goto LABEL_17;
    }
    if (*(unsigned char *)(a1 + 457))
    {
      CFDictionaryRef MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
      int8x16_t v13 = MutableCopy;
      if (!MutableCopy) {
        goto LABEL_27;
      }
      if (v8)
      {
        uint64_t v14 = _copyColorSpaceForIndex(a1, 1uLL, &space);
        if (v14)
        {
          uint64_t v18 = v14;
LABEL_17:
          if (space) {
            CFRelease(space);
          }
          goto LABEL_19;
        }
        CFDataRef v15 = CGColorSpaceCopyICCData(space);
        if (v15)
        {
          CFDataRef v16 = v15;
          CFDictionarySetValue(v13, (const void *)*MEMORY[0x1E4F1EDF0], v15);
          CFRelease(v16);
          goto LABEL_12;
        }
LABEL_27:
        uint64_t v18 = 4294950305;
        goto LABEL_17;
      }
      CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E4F1EDF0], *(const void **)(a1 + 464));
    }
    else
    {
      int8x16_t v13 = 0;
    }
LABEL_12:
    if (v8) {
      CMVideoCodecType v17 = 1953325424;
    }
    else {
      CMVideoCodecType v17 = 1785750887;
    }
    uint64_t v18 = CMVideoFormatDescriptionCreate(v9, v17, *(_DWORD *)(a1 + 112), *(_DWORD *)(a1 + 120), v13, &formatDescriptionOut);
    if (!v18)
    {
      *a4 = formatDescriptionOut;
      CMVideoFormatDescriptionRef formatDescriptionOut = 0;
    }
    goto LABEL_17;
  }
  uint64_t v18 = v10;
  int8x16_t v13 = 0;
LABEL_19:
  if (formatDescriptionOut) {
    CFRelease(formatDescriptionOut);
  }
  if (v13) {
    CFRelease(v13);
  }
  return v18;
}

uint64_t _getThumbnailCountForIndex(uint64_t a1, unint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v8 = a2;
  uint64_t v6 = a1 + 40;
  uint64_t result = _checkImageIndex(a1 + 40, &v8, 0);
  if (!result)
  {
    uint64_t result = _parseExifIfNeeded(v6, 0);
    if (a4)
    {
      if (!result) {
        *a4 = *(unsigned char *)(a1 + 312) != 0;
      }
    }
  }
  return result;
}

uint64_t _createThumbnailImageForIndex(uint64_t a1, unint64_t a2, uint64_t a3, const __CFDictionary *a4, int a5, CFTypeRef *a6)
{
  CFTypeRef cf = 0;
  unint64_t v16 = a2;
  uint64_t v11 = a1 + 40;
  uint64_t v12 = _checkImageIndex(a1 + 40, &v16, 0);
  if (v12) {
    return v12;
  }
  uint64_t v12 = _parseExifIfNeeded(v11, 0);
  if (v12) {
    return v12;
  }
  if (*(unsigned char *)(a1 + 312) && !a3)
  {
    uint64_t v13 = _decodeImage(*(const __CFAllocator **)(a1 + 40), a1, *(const void **)(a1 + 64), 1, 0, a4, 0, 0, a5, 0, (CGImageRef *)&cf);
    if (v13)
    {
      if (cf) {
        CFRelease(cf);
      }
    }
    else
    {
      *a6 = cf;
    }
    return v13;
  }
  return FigSignalErrorAt();
}

uint64_t _decodeThumbnailForIndexAsync(uint64_t a1, unint64_t a2, uint64_t a3, const void *a4, int a5, void *a6, uint64_t a7, uint64_t a8)
{
  unint64_t v16 = a2;
  uint64_t result = _checkImageIndex(a1 + 40, &v16, 0);
  if (!result)
  {
    if (a3)
    {
      return FigSignalErrorAt();
    }
    else
    {
      return _queueAsyncImageDecode(a1, 1, 0, a4, 0, a5, a6, a7, a8);
    }
  }
  return result;
}

uint64_t _decodeAuxiliaryImageForIndexAsync(uint64_t a1, unint64_t a2, unint64_t a3, const __CFDictionary *a4, int a5, void *a6, uint64_t a7, uint64_t a8)
{
  unint64_t v17 = a2;
  uint64_t v15 = a1 + 40;
  uint64_t result = _checkImageIndex(a1 + 40, &v17, 0);
  if (!result)
  {
    if ((a3 & 0x8000000000000000) != 0)
    {
      return FigSignalErrorAt();
    }
    else
    {
      uint64_t result = (uint64_t)_checkForbiddenAuxOptions(a4);
      if (!result)
      {
        uint64_t result = _parseMPOIfNeeded(v15);
        if (!result)
        {
          if (*(void *)(a1 + 264) <= a3) {
            return 4294950303;
          }
          else {
            return _queueAsyncImageDecode(a1, 2, a3, a4, 0, a5, a6, a7, a8);
          }
        }
      }
    }
  }
  return result;
}

uint64_t _cancelAsyncRequest(uint64_t a1, const void *a2)
{
  return 0;
}

uint64_t _getAuxiliaryImageGeometryForIndex(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, void *a5, void *a6, _DWORD *a7)
{
  unint64_t v17 = a2;
  uint64_t v12 = a1 + 40;
  unsigned __int8 v16 = 0;
  uint64_t result = _checkImageIndex(a1 + 40, &v17, &v16);
  if (!result)
  {
    uint64_t v15 = 0;
    uint64_t result = _getAuxiliaryImageStorageForIndex(v12, v16, a3, &v15);
    if (!result)
    {
      uint64_t result = _getImageGeometryForIndex(a1, v17, v14, 0, 0, a7);
      if (!result)
      {
        if (a5) {
          *a5 = *v15;
        }
        uint64_t result = 0;
        if (a6) {
          *a6 = v15[1];
        }
      }
    }
  }
  return result;
}

uint64_t _getAuxiliaryImageTypeForIndex(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, _DWORD *a5, _DWORD *a6)
{
  unint64_t v13 = a2;
  uint64_t v9 = a1 + 40;
  unsigned __int8 v12 = 0;
  uint64_t result = _checkImageIndex(a1 + 40, &v13, &v12);
  if (!result)
  {
    uint64_t v11 = 0;
    uint64_t result = _getAuxiliaryImageStorageForIndex(v9, v12, a3, &v11);
    if (!result)
    {
      if (a5) {
        *a5 = *(_DWORD *)(v11 + 16);
      }
      uint64_t result = 0;
      if (a6) {
        *a6 = *(_DWORD *)(v11 + 20);
      }
    }
  }
  return result;
}

uint64_t _copyAuxiliaryImageMetadataForIndex(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  unint64_t v13 = a2;
  uint64_t v7 = a1 + 40;
  unsigned __int8 v12 = 0;
  uint64_t result = _checkImageIndex(a1 + 40, &v13, &v12);
  if (!result)
  {
    uint64_t v11 = 0;
    uint64_t result = _getAuxiliaryImageStorageForIndex(v7, v12, a3, &v11);
    if (a5)
    {
      if (!result)
      {
        uint64_t v9 = *(const void **)(v11 + 24);
        if (v9) {
          CFTypeRef v10 = CFRetain(v9);
        }
        else {
          CFTypeRef v10 = 0;
        }
        uint64_t result = 0;
        *a5 = v10;
      }
    }
  }
  return result;
}

uint64_t _createAuxiliaryImageForIndex(uint64_t a1, unint64_t a2, uint64_t a3, const __CFDictionary *a4, int a5, uint64_t a6)
{
  unint64_t v14 = a2;
  unsigned __int8 v13 = 0;
  uint64_t result = _checkImageIndex(a1 + 40, &v14, &v13);
  if (!result)
  {
    uint64_t result = (uint64_t)_checkForbiddenAuxOptions(a4);
    if (!result)
    {
      BYTE4(v12) = 0;
      LODWORD(v12) = a5;
      return _decodeImage(*(void *)(a1 + 40), a1, *(void *)(a1 + 64), 2, a3, a4, v13, 0, v12, a6);
    }
  }
  return result;
}

uint64_t _copyAuxiliaryColorSpaceForIndex(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t *a4)
{
  unint64_t v12 = a2;
  uint64_t v6 = a1 + 40;
  unsigned __int8 v11 = 0;
  uint64_t result = _checkImageIndex(a1 + 40, &v12, &v11);
  if (!result)
  {
    uint64_t v10 = 0;
    uint64_t result = _getAuxiliaryImageStorageForIndex(v6, v11, a3, &v10);
    if (a4)
    {
      if (!result)
      {
        if (*(void *)(v10 + 72) && (uint64_t v8 = MEMORY[0x1AD10E420]()) != 0)
        {
          uint64_t v9 = v8;
          uint64_t result = 0;
          *a4 = v9;
        }
        else
        {
          return 4294950303;
        }
      }
    }
  }
  return result;
}

uint64_t _createOutputBufferAttributesForImageIndex(uint64_t a1, unint64_t a2, const __CFDictionary *a3, CFDictionaryRef *a4)
{
  unint64_t v9 = 0;
  unint64_t v10 = 0;
  int v8 = 1;
  uint64_t result = _getImageGeometryForIndex(a1, a2, (uint64_t)a3, &v9, &v10, &v8);
  if (!result)
  {
    uint64_t result = _parseImageSizeAndTypeIfNeeded(a1 + 40);
    if (!result) {
      return _createOutputBufferAttributesForImageGeometry(a1, 0, v9, v10, *(unsigned char *)(a1 + 133), a3, a4);
    }
  }
  return result;
}

uint64_t _createOutputBufferAttributesForThumbnailIndex(uint64_t a1, unint64_t a2, uint64_t a3, const __CFDictionary *a4, CFDictionaryRef *a5)
{
  unint64_t v10 = 0;
  unint64_t v11 = 0;
  int v9 = 1;
  uint64_t result = _getThumbnailGeometryForIndex(a1, a2, a3, &v10, &v11, &v9);
  if (!result) {
    return _createOutputBufferAttributesForImageGeometry(a1, 1, v10, v11, 0, a4, a5);
  }
  return result;
}

uint64_t _createOutputBufferAttributesForAuxiliaryIndex(uint64_t a1, unint64_t a2, unint64_t a3, const __CFDictionary *a4, CFDictionaryRef *a5)
{
  unint64_t v10 = 0;
  unint64_t v11 = 0;
  int v9 = 1;
  uint64_t result = _getAuxiliaryImageGeometryForIndex(a1, a2, a3, (uint64_t)a4, &v10, &v11, &v9);
  if (!result) {
    return _createOutputBufferAttributesForImageGeometry(a1, 2, v10, v11, 0, a4, a5);
  }
  return result;
}

uint64_t _transcodeToJFIF(uint64_t a1, const __CFDictionary *a2, unint64_t a3, uint64_t a4, __CFData **a5)
{
  v99[0] = a3;
  uint64_t v8 = a1 + 40;
  CFAllocatorRef allocator = CFGetAllocator((CFTypeRef)a1);
  CFTypeRef v97 = 0;
  CFTypeRef v98 = 0;
  CFDictionaryRef v96 = 0;
  int v95 = 1;
  memset(v94, 0, 32);
  int8x16_t v92 = 0;
  uint64_t v93 = 0;
  int8x16_t v91 = 0;
  __int16 v90 = 0;
  __int16 v89 = 1;
  unsigned __int8 v88 = 1;
  char v87 = 1;
  unsigned int v86 = 875704422;
  unint64_t v85 = 0;
  __int16 v84 = 0;
  uint64_t v82 = 0;
  CFNumberRef Int = 0;
  uint64_t PictureCollectionCodecPool = _checkImageIndex(v8, v99, 0);
  if (PictureCollectionCodecPool) {
    goto LABEL_127;
  }
  v99[0] = 0;
  if (!a5)
  {
    CFDictionaryRef MutableCopy = 0;
    int16x8_t v41 = 0;
    uint64_t v36 = 0;
    goto LABEL_129;
  }
  uint64_t PictureCollectionCodecPool = CMPhotoDecompressionSessionGetPictureCollectionCodecPool(*(void *)(a1 + 16), &v93);
  if (PictureCollectionCodecPool) {
    goto LABEL_127;
  }
  uint64_t PictureCollectionCodecPool = CMPhotoDecompressionSessionCopyScaler(*(void *)(a1 + 16), &v92);
  if (PictureCollectionCodecPool) {
    goto LABEL_127;
  }
  uint64_t PictureCollectionCodecPool = CMPhotoDecompressionSessionCopySurfacePool(*(void *)(a1 + 16), &v91);
  if (PictureCollectionCodecPool) {
    goto LABEL_127;
  }
  long long v81 = 0uLL;
  uint64_t PictureCollectionCodecPool = _getImageGeometryForIndex(a1, 0, v10, &v81, (void *)&v81 + 1, 0);
  if (PictureCollectionCodecPool) {
    goto LABEL_127;
  }
  uint64_t v64 = v8;
  int8x16_t v65 = a5;
  if (!a2)
  {
    unint64_t v25 = 0;
    unint64_t v24 = 0;
    CGFloat v28 = 0.0;
    unsigned __int8 v16 = 0;
    CFDictionaryRef v19 = 0;
    unint64_t v12 = 0;
    CGFloat v26 = 0.0;
    goto LABEL_41;
  }
  CMPhotoCFDictionaryGetInt32IfPresent(a2, @"OutputPixelFormat", &v86);
  CMPhotoCFDictionaryGetBooleanIfPresent(a2, @"IncludeThumbnail", &v89);
  CMPhotoCFDictionaryGetBooleanIfPresent(a2, @"IncludeAuxiliaryImages", &v88);
  CFDataRef Value = (__CFDictionary *)CFDictionaryGetValue(a2, @"PreserveAndModifyGainMap");
  unint64_t v12 = Value;
  if (Value)
  {
    CFTypeID v13 = CFGetTypeID(Value);
    if (v13 != CFDictionaryGetTypeID()) {
      goto LABEL_126;
    }
  }
  CMPhotoCFDictionaryGetBooleanIfPresent(a2, @"IncludeMetadata", &v87);
  if (CMPhotoCFDictionaryGetSizeIfPresent(a2, @"MaxPixelSize", &v85))
  {
    if (!v85) {
      goto LABEL_126;
    }
    CMPhotoCFDictionaryGetBooleanIfPresent(a2, @"UseMaxPixelSizeForShortEdge", &v84);
    CMPhotoCFDictionaryGetBooleanIfPresent(a2, @"AllowMaxPixelSizeUpscale", (unsigned char *)&v84 + 1);
  }
  CMPhotoCFDictionaryGetBooleanIfPresent(a2, @"UseEvenScalingMode", (unsigned char *)&v90 + 1);
  HIBYTE(v90) = CMPhotoGetEvenScalingModeDefault(0, HIBYTE(v90));
  CMPhotoCFDictionaryGetBooleanIfPresent(a2, @"ApplyTransform", (unsigned char *)&v89 + 1);
  if (CMPhotoCFDictionaryGetIntIfPresent(a2, @"QualityControllerType", (char *)&v82 + 4)) {
    LOBYTE(v82) = 1;
  }
  unint64_t v14 = CFDictionaryGetValue(a2, @"QualityControllerParameters");
  if (v14) {
    unint64_t v14 = CFRetain(v14);
  }
  CFNumberRef Int = (CFNumberRef)v14;
  uint64_t v15 = CFDictionaryGetValue(a2, @"ReplacementImageProperties");
  unsigned __int8 v16 = v15;
  if (v15 && (CFTypeID v17 = CFGetTypeID(v15), v17 != CFDictionaryGetTypeID())
    || (CFDictionaryRef v18 = (const __CFDictionary *)CFDictionaryGetValue(a2, @"ColorConverter"), (v19 = v18) != 0)
    && (CFTypeID v20 = CFGetTypeID(v18), v20 != CFDictionaryGetTypeID()))
  {
    CFDictionaryRef MutableCopy = 0;
    int16x8_t v41 = 0;
    uint64_t v36 = 4294950306;
    goto LABEL_129;
  }
  CFDictionaryRef v21 = (const __CFDictionary *)CFDictionaryGetValue(a2, @"SourceCropRect");
  if (v21)
  {
    CGSize v22 = *(CGSize *)(MEMORY[0x1E4F1DB20] + 16);
    rect.origiuint64_t n = (CGPoint)*MEMORY[0x1E4F1DB20];
    rect.CGSize size = v22;
    if (CGRectMakeWithDictionaryRepresentation(v21, &rect))
    {
      unint64_t v23 = 0;
      unint64_t v24 = vcvtad_u64_f64(rect.origin.x);
      unint64_t v25 = vcvtad_u64_f64(rect.origin.y);
      *(void *)&CGFloat v26 = vcvtad_u64_f64(rect.size.width);
      unint64_t v27 = *(void *)&v26 + v24;
      *(void *)&CGFloat v28 = vcvtad_u64_f64(rect.size.height);
      if ((unint64_t)v81 < *(void *)&v26 + v24) {
        unint64_t v27 = v81;
      }
      if (*((void *)&v81 + 1) >= *(void *)&v28 + v25) {
        unint64_t v29 = *(void *)&v28 + v25;
      }
      else {
        unint64_t v29 = *((void *)&v81 + 1);
      }
      unint64_t v30 = v27 - v24;
      if (v27 <= v24)
      {
        unint64_t v31 = 0;
        unint64_t v32 = 0;
        unint64_t v33 = 0;
      }
      else
      {
        unint64_t v31 = 0;
        unint64_t v32 = 0;
        unint64_t v33 = 0;
        BOOL v34 = v29 > v25;
        unint64_t v35 = v29 - v25;
        if (v34)
        {
          unint64_t v23 = v35;
          unint64_t v31 = v30;
          unint64_t v32 = v25;
          unint64_t v33 = v24;
        }
      }
      uint64_t v36 = 4294950306;
      if (v33 != v24 || v32 != v25 || v31 != *(void *)&v26 || v23 != *(void *)&v28) {
        goto LABEL_128;
      }
      if (v81 != __PAIR128__(*(unint64_t *)&v28, *(unint64_t *)&v26)) {
        goto LABEL_40;
      }
      goto LABEL_39;
    }
LABEL_126:
    uint64_t PictureCollectionCodecPool = FigSignalErrorAt();
    goto LABEL_127;
  }
LABEL_39:
  unint64_t v25 = 0;
  unint64_t v24 = 0;
  CGFloat v28 = 0.0;
  CGFloat v26 = 0.0;
LABEL_40:
  CMPhotoCFDictionaryGetBooleanIfPresent(a2, @"RestrictedTranscoding", &v90);
LABEL_41:
  unsigned __int8 v79 = 0;
  unint64_t v78 = -1;
  uint64_t PictureCollectionCodecPool = CMPhotoDecompressionContainerFindFirstAuxiliaryOfTypeForInternalIndexWithOptions((void *)a1, 0, 0, 4, @"urn:com:apple:photo:2020:aux:hdrgainmap", (char *)&v79, (uint64_t *)&v78);
  if (PictureCollectionCodecPool) {
    goto LABEL_127;
  }
  if (v16)
  {
    CFDictionaryRef v96 = (const __CFDictionary *)CFRetain(v16);
  }
  else
  {
    uint64_t PictureCollectionCodecPool = CMPhotoDecompressionContainerCopyImagePropertiesForInternalIndex(a1, 0, 0, 0, 0, (CFTypeRef *)&v96);
    if (PictureCollectionCodecPool) {
      goto LABEL_127;
    }
  }
  uint64_t v37 = _copyColorSpaceForIndex(a1, 0, &v98);
  if (v37)
  {
    uint64_t v36 = v37;
    if (v37 != -16993) {
      goto LABEL_128;
    }
  }
  unint64_t v38 = (void *)v98;
  if (!v98)
  {
    uint64_t PictureCollectionCodecPool = _parseICCProfileIfNeeded(v64);
    if (!PictureCollectionCodecPool)
    {
      unint64_t v38 = (void *)v98;
      goto LABEL_50;
    }
LABEL_127:
    uint64_t v36 = PictureCollectionCodecPool;
LABEL_128:
    CFDictionaryRef MutableCopy = 0;
    int16x8_t v41 = 0;
    goto LABEL_129;
  }
LABEL_50:
  uint64_t PictureCollectionCodecPool = CMPhotoDecompressionContainerInitColorController(v94, v19, v38, *(void *)(a1 + 464));
  if (PictureCollectionCodecPool) {
    goto LABEL_127;
  }
  if (!(_BYTE)v82)
  {
    if (Int)
    {
      CFRelease(Int);
      CFNumberRef Int = 0;
    }
    HIDWORD(v82) = 4;
    CFNumberRef Int = CMPhotoCFNumberCreateInt(2);
  }
  if (!CMPhotoCFDictionaryGetIntIfPresent(v96, (const void *)*MEMORY[0x1E4F2FCA0], &v95))
  {
    CFDictionaryRef v40 = (const __CFDictionary *)CFDictionaryGetValue(v96, (const void *)*MEMORY[0x1E4F2FD40]);
    CMPhotoCFDictionaryGetIntIfPresent(v40, (const void *)*MEMORY[0x1E4F2FD70], &v95);
  }
  if (!v87 && v96)
  {
    CFRelease(v96);
    CFDictionaryRef v96 = 0;
  }
  if ((_BYTE)v89)
  {
    if (!*(unsigned char *)(a1 + 312) || v24 | v25 || *(void *)&v26 | *(void *)&v28)
    {
      int16x8_t v41 = 0;
      char v42 = 1;
    }
    else
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      int16x8_t v41 = Mutable;
      if (!Mutable)
      {
        CFDictionaryRef MutableCopy = 0;
LABEL_149:
        uint64_t v36 = 4294950305;
        goto LABEL_129;
      }
      CMPhotoCFDictionarySetSize(Mutable, @"MaxPixelSize", 160);
      CMPhotoCFDictionarySetBoolean(v41, @"ApplyTransform", HIBYTE(v89));
      if (a2 && v19 && CFDictionaryContainsKey(a2, @"OutputPixelFormat"))
      {
        int16x8_t v44 = CFDictionaryGetValue(a2, @"OutputPixelFormat");
        CFDictionarySetValue(v41, @"OutputPixelFormat", v44);
      }
      Thumbnailuint64_t ImageForIndex = CMPhotoDecompressionContainerCreateThumbnailImageForIndex((char *)a1, 0, 0, v41, 2, (uint64_t)&v97);
      if (ThumbnailImageForIndex) {
        goto LABEL_125;
      }
      char v42 = 0;
    }
  }
  else
  {
    char v42 = 0;
    int16x8_t v41 = 0;
  }
  long long v77 = v81;
  if (v24 | v25 || *(void *)&v26 | *(void *)&v28)
  {
    *(CGFloat *)&long long v77 = v26;
    *((CGFloat *)&v77 + 1) = v28;
    *(void *)&rect.origin.x = v24;
    *(void *)&rect.origin.y = v25;
    rect.size.double width = v26;
    rect.size.double height = v28;
    Thumbnailuint64_t ImageForIndex = CMPhotoGetTwoPassCropRects(v86, (unint64_t *)&rect, v81, *((unint64_t *)&v81 + 1), 0, 0);
    if (ThumbnailImageForIndex) {
      goto LABEL_125;
    }
  }
  unint64_t v46 = v85;
  if (v85 && (_BYTE)v84)
  {
    unint64_t v47 = v77;
    if ((unint64_t)v77 <= *((void *)&v77 + 1)) {
      unint64_t v48 = *((void *)&v77 + 1);
    }
    else {
      unint64_t v48 = v77;
    }
    if ((unint64_t)v77 >= *((void *)&v77 + 1)) {
      unint64_t v47 = *((void *)&v77 + 1);
    }
    int v49 = vcvtps_s32_f32((float)((float)v48 / (float)v47) * (float)v85);
    int v50 = (v49 - 1) & 1;
    if (v49 < 1) {
      int v50 = -v50;
    }
    int v51 = v49 - v50 + 1;
    unint64_t v46 = v51;
    unint64_t v85 = v51;
  }
  if (v46)
  {
    unint64_t v52 = (unint64_t)v77 <= *((void *)&v77 + 1) ? *((void *)&v77 + 1) : v77;
    if (v46 < v52 || HIBYTE(v84)) {
      CMPhotoPixelBufferConstrainSizeToMaxSideLength(v77, *((unint64_t *)&v77 + 1), v46, 0, 0, HIBYTE(v84), HIBYTE(v90), (unint64_t *)&v77, 0, 0);
    }
  }
  if (v96)
  {
    Thumbnailuint64_t ImageForIndex = CMPhotoUpdateImageProperties(&v96, HIBYTE(v89), 0, (double)(unint64_t)v77, (double)*((unint64_t *)&v77 + 1));
    if (ThumbnailImageForIndex) {
      goto LABEL_125;
    }
  }
  CFIndex v76 = 0;
  if (v88)
  {
    Thumbnailuint64_t ImageForIndex = _getAuxiliaryImageCountForIndex(a1, 0, v46, &v76);
    if (ThumbnailImageForIndex) {
      goto LABEL_125;
    }
    int v53 = v79;
    int v54 = v88;
  }
  else
  {
    int v54 = 0;
    int v53 = v79;
    if (v12 && v79)
    {
      int v54 = 0;
      int v53 = 1;
      CFIndex v76 = 1;
    }
  }
  uint64_t v72 = a1;
  uint64_t v73 = 0;
  unint64_t v74 = v78;
  uint64_t v75 = 0;
  unsigned __int8 v55 = v90;
  BYTE1(v75) = v90;
  if (v12)
  {
    if (v53)
    {
      uint64_t v73 = v12;
      if (!v54) {
        LOBYTE(v75) = 1;
      }
    }
  }
  CFDictionaryRef MutableCopy = 0;
  if (v12) {
    BOOL v57 = 0;
  }
  else {
    BOOL v57 = v54 == 0;
  }
  int v58 = !v57;
  if (!v53 || !v58) {
    goto LABEL_121;
  }
  if (!(v24 | v25) && !(*(void *)&v26 | *(void *)&v28))
  {
    CFDictionaryRef MutableCopy = 0;
    goto LABEL_121;
  }
  memset(&rect, 0, sizeof(rect));
  uint64_t v70 = 0;
  uint64_t v71 = 0;
  Thumbnailuint64_t ImageForIndex = _getAuxiliaryImageGeometryForIndex(a1, 0, v78, v39, &v70, &v71, 0);
  if (ThumbnailImageForIndex
    || (v67.i64[0] = v24,
        v67.i64[1] = v25,
        CGFloat v68 = v26,
        CGFloat v69 = v28,
        Thumbnailuint64_t ImageForIndex = CMPhotoTranslateAndScalePreOrientationCrop(v81, *((uint64_t *)&v81 + 1), &v67, 1, v70, v71, 1, &rect, 0), ThumbnailImageForIndex))
  {
LABEL_125:
    uint64_t v36 = ThumbnailImageForIndex;
    CFDictionaryRef MutableCopy = 0;
    goto LABEL_129;
  }
  CFDictionaryRef MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy) {
    goto LABEL_149;
  }
  v100.origin.x = (double)*(unint64_t *)&rect.origin.x;
  v100.origin.y = (double)*(unint64_t *)&rect.origin.y;
  v100.size.double width = (double)*(unint64_t *)&rect.size.width;
  v100.size.double height = (double)*(unint64_t *)&rect.size.height;
  CFDictionaryRef DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v100);
  if (!DictionaryRepresentation) {
    goto LABEL_149;
  }
  CFDictionaryRef v60 = DictionaryRepresentation;
  CFDictionarySetValue(MutableCopy, @"SourceCropRect", DictionaryRepresentation);
  CFRelease(v60);
  uint64_t v73 = MutableCopy;
  unsigned __int8 v55 = v90;
LABEL_121:
  if (HIBYTE(v89)) {
    int v61 = v95;
  }
  else {
    int v61 = 1;
  }
  uint64_t v62 = *(void *)(a1 + 64);
  *(void *)&rect.origin.x = v24;
  *(void *)&rect.origin.y = v25;
  rect.size.double width = v26;
  rect.size.double height = v28;
  uint64_t v36 = CMPhotoJFIFTranscodeFromJFIF(allocator, v81, *((uint64_t *)&v81 + 1), (uint64_t *)&rect, v61, v77, *((unint64_t *)&v77 + 1), v86, HIDWORD(v82), Int, v42, (uint64_t)v97, v76, (uint64_t (*)(uint64_t, uint64_t, const void **, const __CFDictionary **, int *, const void **, __CVBuffer **, CFTypeRef *, CFTypeRef *))_transcodeAuxiliaryImageCallback, (uint64_t)&v72, v62, v96, (uint64_t)v94, v91,
          v92,
          v93,
          0,
          v55,
          0,
          v65);
LABEL_129:
  if (v98) {
    CFRelease(v98);
  }
  if (v97) {
    CFRelease(v97);
  }
  if (v96) {
    CFRelease(v96);
  }
  if (v41) {
    CFRelease(v41);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (Int) {
    CFRelease(Int);
  }
  if (v92) {
    CFRelease(v92);
  }
  if (v91) {
    CFRelease(v91);
  }
  return v36;
}

uint64_t _copyExifForIndex(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, CFTypeRef *a6)
{
  CFTypeRef cf = 0;
  unint64_t v14 = a2;
  uint64_t v9 = a1 + 40;
  uint64_t v10 = _checkImageIndex(a1 + 40, &v14, 0);
  if (v10) {
    return v10;
  }
  uint64_t v10 = _parseExifIfNeeded(v9, 0);
  if (v10) {
    return v10;
  }
  if (!*(unsigned char *)(a1 + 281)) {
    return 4294950303;
  }
  if (!a6) {
    goto LABEL_7;
  }
  uint64_t Data = CMPhotoByteStreamReadAndCreateData(*(void *)(a1 + 64), *(void *)(a1 + 296), *(void *)(a1 + 288), (CFDataRef *)&cf, 0);
  if (!Data)
  {
    *a6 = cf;
LABEL_7:
    uint64_t Data = 0;
    if (a5) {
      *a5 = 6;
    }
    return Data;
  }
  if (cf) {
    CFRelease(cf);
  }
  return Data;
}

uint64_t _copyXMPForIndex(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, CFDataRef *a5)
{
  unint64_t v12 = a2;
  uint64_t v7 = a1 + 40;
  uint64_t result = _checkImageIndex(a1 + 40, &v12, 0);
  if (!result)
  {
    uint64_t result = _parseXMPIfNeeded(v7);
    if (!result)
    {
      if (*(unsigned char *)(a1 + 369))
      {
        uint64_t v9 = *(void *)(a1 + 64);
        uint64_t v11 = *(void *)(a1 + 376);
        unint64_t v10 = *(void *)(a1 + 384);
        return CMPhotoByteStreamReadAndCreateData(v9, v10, v11, a5, 0);
      }
      else
      {
        return 4294950303;
      }
    }
  }
  return result;
}

uint64_t _getDebugMetadataCountForIndex(uint64_t a1, unint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v8 = a2;
  uint64_t v6 = a1 + 40;
  uint64_t result = _checkImageIndex(a1 + 40, &v8, 0);
  if (!result)
  {
    uint64_t result = _parseDebugMetadataIfNeeded(v6);
    if (a4)
    {
      if (!result) {
        *a4 = *(unsigned char *)(a1 + 393) != 0;
      }
    }
  }
  return result;
}

uint64_t _copyDebugMetadataForIndex(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  unint64_t v11 = a2;
  uint64_t v7 = a1 + 40;
  uint64_t result = _checkImageIndex(a1 + 40, &v11, 0);
  if (!result)
  {
    uint64_t result = _parseDebugMetadataIfNeeded(v7);
    if (!result)
    {
      if (*(unsigned char *)(a1 + 393))
      {
        if (a5)
        {
          uint64_t v9 = *(const void **)(a1 + 416);
          if (v9) {
            CFTypeRef v10 = CFRetain(v9);
          }
          else {
            CFTypeRef v10 = 0;
          }
          uint64_t result = 0;
          *a5 = v10;
        }
        else
        {
          return 0;
        }
      }
      else
      {
        return 4294950303;
      }
    }
  }
  return result;
}

uint64_t _getCustomMetadataCountForIndex(uint64_t a1, unint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v8 = a2;
  uint64_t v6 = a1 + 40;
  uint64_t result = _checkImageIndex(a1 + 40, &v8, 0);
  if (!result)
  {
    uint64_t result = _parseCustomMetadataIfNeeded(v6);
    if (a4)
    {
      if (!result) {
        *a4 = *(unsigned char *)(a1 + 425) != 0;
      }
    }
  }
  return result;
}

uint64_t _copyCustomMetadataForIndex(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, CFTypeRef *a5)
{
  unint64_t v10 = a2;
  uint64_t v7 = a1 + 40;
  uint64_t result = _checkImageIndex(a1 + 40, &v10, 0);
  if (!result)
  {
    uint64_t result = _parseCustomMetadataIfNeeded(v7);
    if (!result)
    {
      if (*(unsigned char *)(a1 + 425))
      {
        CFDataRef v9 = *(const __CFData **)(a1 + 448);
        return CMPhotoJFIFCopyCustomMetadataFromCFData(v9, a5);
      }
      else
      {
        return 4294950303;
      }
    }
  }
  return result;
}

uint64_t _copyImageSubsamplingForIndex(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v7 = a2;
  if (!a3) {
    return 0;
  }
  uint64_t v5 = a1 + 40;
  uint64_t result = _checkImageIndex(a1 + 40, &v7, 0);
  if (!result)
  {
    uint64_t result = _parseImageSizeAndTypeIfNeeded(v5);
    if (!result) {
      *a3 = *(_DWORD *)(a1 + 128);
    }
  }
  return result;
}

uint64_t _copyImageIsRGBForIndex(uint64_t a1, unint64_t a2, unsigned char *a3)
{
  unint64_t v7 = a2;
  if (!a3) {
    return 0;
  }
  uint64_t v5 = a1 + 40;
  uint64_t result = _checkImageIndex(a1 + 40, &v7, 0);
  if (!result)
  {
    uint64_t result = _parseImageSizeAndTypeIfNeeded(v5);
    if (!result) {
      *a3 = *(unsigned char *)(a1 + 132);
    }
  }
  return result;
}

uint64_t _getThumbnailGeometryForIndex(uint64_t a1, unint64_t a2, uint64_t a3, void *a4, void *a5, _DWORD *a6)
{
  unint64_t v15 = a2;
  if (!a4 && !a5 && !a6) {
    return 0;
  }
  uint64_t result = _checkImageIndex(a1 + 40, &v15, 0);
  if (result) {
    return result;
  }
  if (a3)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t result = _parseExifIfNeeded(a1 + 40, 0);
    if (!result)
    {
      if (!*(unsigned char *)(a1 + 312)) {
        return 4294950306;
      }
      uint64_t v14 = *(void *)(a1 + 320);
      uint64_t v13 = *(void *)(a1 + 328);
      uint64_t result = _getImageGeometryForIndex(a1, v15, v12, 0, 0, a6);
      if (!result)
      {
        if (a4) {
          *a4 = v14;
        }
        if (a5)
        {
          uint64_t result = 0;
          *a5 = v13;
          return result;
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t _copyThumbnailBitDepthForIndex(uint64_t a1, unint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  CFTypeRef cf = 0;
  unint64_t v12 = a2;
  if (!a4) {
    return 0;
  }
  uint64_t v7 = a1 + 40;
  uint64_t v8 = _checkImageIndex(a1 + 40, &v12, 0);
  if (v8) {
    return v8;
  }
  if (!a3)
  {
    uint64_t v8 = _parseExifIfNeeded(v7, 0);
    if (!v8)
    {
      if (!*(unsigned char *)(a1 + 312)) {
        return 4294950303;
      }
      uint64_t BitDepthArray = _createBitDepthArray(*(const __CFAllocator **)(a1 + 40), *(_DWORD *)(a1 + 336), *(_DWORD *)(a1 + 360), (__CFArray **)&cf);
      if (BitDepthArray)
      {
        if (cf) {
          CFRelease(cf);
        }
      }
      else
      {
        *a4 = cf;
      }
      return BitDepthArray;
    }
    return v8;
  }
  return FigSignalErrorAt();
}

uint64_t _copyAuxiliaryImageBitDepthForIndex(uint64_t a1, unint64_t a2, unint64_t a3, CFTypeRef *a4)
{
  CFTypeRef cf = 0;
  unint64_t v15 = a2;
  char v13 = 0;
  if (!a4) {
    return 0;
  }
  uint64_t v7 = a1 + 40;
  uint64_t BitDepthArray = _checkImageIndex(a1 + 40, &v15, &v13);
  if (BitDepthArray) {
    goto LABEL_16;
  }
  uint64_t BitDepthArray = _parseMPOIfNeeded(v7);
  if (BitDepthArray) {
    goto LABEL_16;
  }
  if (v13)
  {
    if (!*(unsigned char *)(a1 + 153))
    {
      uint64_t v11 = 4294950304;
      goto LABEL_17;
    }
    CFAllocatorRef v9 = *(const __CFAllocator **)(a1 + 40);
    int v10 = *(_DWORD *)(a1 + 228);
    goto LABEL_10;
  }
  if ((a3 & 0x8000000000000000) != 0)
  {
    uint64_t BitDepthArray = FigSignalErrorAt();
LABEL_16:
    uint64_t v11 = BitDepthArray;
    goto LABEL_17;
  }
  if (*(void *)(a1 + 264) > a3)
  {
    CFAllocatorRef v9 = *(const __CFAllocator **)(a1 + 40);
    int v10 = *(_DWORD *)(*(void *)(a1 + 272) + 96 * a3 + 68);
LABEL_10:
    uint64_t BitDepthArray = _createBitDepthArray(v9, 6, v10, (__CFArray **)&cf);
    if (!BitDepthArray)
    {
      uint64_t v11 = 0;
      *a4 = cf;
      return v11;
    }
    goto LABEL_16;
  }
  uint64_t v11 = 4294950303;
LABEL_17:
  if (cf) {
    CFRelease(cf);
  }
  return v11;
}

uint64_t _copyColorSpaceForIndex(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v11 = a2;
  if (!a3) {
    return 0;
  }
  uint64_t v5 = a1 + 40;
  char v10 = 0;
  uint64_t result = _checkImageIndex(a1 + 40, &v11, &v10);
  if (!result)
  {
    uint64_t result = _parseICCProfileIfNeeded(v5);
    if (!result)
    {
      if (v10)
      {
        if (!*(unsigned char *)(a1 + 153)) {
          return 4294950304;
        }
        uint64_t v7 = *(void *)(a1 + 232);
        if (!v7)
        {
          uint64_t v8 = *(const void **)(a1 + 240);
          if (v8)
          {
            CFTypeRef v9 = CFRetain(v8);
LABEL_12:
            uint64_t result = 0;
            *a3 = v9;
            return result;
          }
          return FigSignalErrorAt();
        }
      }
      else
      {
        if (!*(unsigned char *)(a1 + 457)) {
          return 4294950303;
        }
        uint64_t v7 = *(void *)(a1 + 464);
      }
      CFTypeRef v9 = (CFTypeRef)MEMORY[0x1AD10E420](v7);
      if (v9) {
        goto LABEL_12;
      }
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t _copyIPTCForIndex(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v9 = a2;
  uint64_t v5 = _checkImageIndex(a1 + 40, &v9, 0);
  if (v5) {
    return v5;
  }
  CFTypeRef cf = 0;
  uint64_t v5 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 72));
  if (v5) {
    return v5;
  }
  if (*(unsigned char *)(a1 + 472))
  {
    uint64_t v6 = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 472) = 1;
    uint64_t v6 = CMPhotoCopyIPTCFromJFIFByteStream(*(const __CFAllocator **)(a1 + 40), *(void *)(a1 + 64), 0, (unsigned char *)(a1 + 473), (__CFData **)&cf);
    if (!v6)
    {
      *(void *)(a1 + 480) = cf;
      CFTypeRef cf = 0;
    }
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 72));
  if (cf) {
    CFRelease(cf);
  }
  if (!v6)
  {
    if (*(unsigned char *)(a1 + 473))
    {
      if (a3)
      {
        CFTypeRef v7 = *(CFTypeRef *)(a1 + 480);
        if (v7) {
          CFTypeRef v7 = CFRetain(v7);
        }
        uint64_t v6 = 0;
        *a3 = v7;
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 4294950303;
    }
  }
  return v6;
}

CFDictionaryRef _checkForbiddenAuxOptions(const __CFDictionary *theDict)
{
  v3[4] = *MEMORY[0x1E4F143B8];
  if (theDict)
  {
    CFDictionaryRef v1 = theDict;
    uint64_t v2 = 0;
    v3[0] = @"BackCGImageWithIOSurface";
    v3[1] = @"UseProvidedPixelBuffer";
    v3[2] = @"TiledDownsampling";
    v3[3] = @"DryRun";
    while (!CFDictionaryContainsKey(v1, (const void *)v3[v2]))
    {
      if (++v2 == 4) {
        return 0;
      }
    }
    return (const __CFDictionary *)FigSignalErrorAt();
  }
  return theDict;
}

uint64_t _createOutputBufferAttributesForImageGeometry(uint64_t a1, int a2, unint64_t a3, unint64_t a4, char a5, const __CFDictionary *a6, CFDictionaryRef *a7)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  uint64_t v30 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v21 = 0u;
  uint64_t v11 = _parseOptionsForJPEGDecoding(a1, a6, a3, a4, a2, a5, (uint64_t)&v21);
  if (v11) {
    goto LABEL_17;
  }
  uint64_t v11 = CMPhotoDecompressionSessionCopySurfacePool(*(void *)(a1 + 16), &cf);
  if (v11) {
    goto LABEL_17;
  }
  int8x16_t v20 = 0uLL;
  long long v39 = v27;
  long long v40 = v28;
  long long v41 = v29;
  uint64_t v42 = v30;
  long long v35 = v23;
  long long v36 = v24;
  long long v37 = v25;
  long long v38 = v26;
  *(_OWORD *)keyCGColorSpaceRef s = v21;
  long long v34 = v22;
  uint64_t v11 = _determineDecodeStrategy(a1, 0, (uint64_t)keys, a3, a4, (uint64_t)cf, 0, 0, &v20, 0, 0);
  if (v11)
  {
LABEL_17:
    uint64_t v16 = v11;
  }
  else
  {
    unint64_t v12 = (void *)*MEMORY[0x1E4F24D08];
    keys[0] = *(void **)MEMORY[0x1E4F24E10];
    keys[1] = v12;
    *(void *)&long long v34 = *MEMORY[0x1E4F24C98];
    values[0] = CMPhotoCFNumberCreateSize(v20.i64[0]);
    values[1] = CMPhotoCFNumberCreateSize(v20.i64[1]);
    CFNumberRef Size = CMPhotoCFNumberCreateSize(16);
    uint64_t v14 = 0;
    values[2] = Size;
    while (values[v14])
    {
      if (++v14 == 3)
      {
        CFDictionaryRef v15 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)values, 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        *a7 = v15;
        if (v15)
        {
          uint64_t v16 = 0;
          goto LABEL_9;
        }
        break;
      }
    }
    uint64_t v16 = FigSignalErrorAt();
LABEL_9:
    for (uint64_t i = 0; i != 3; ++i)
    {
      CFDictionaryRef v18 = values[i];
      if (v18) {
        CFRelease(v18);
      }
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  return v16;
}

uint64_t _transcodeAuxiliaryImageCallback(unint64_t a1, uint64_t a2, CFTypeRef *a3, void *a4, _DWORD *a5, CFTypeRef *a6, CFTypeRef *a7, CFDataRef *a8, void *a9)
{
  CFTypeID v17 = *(void **)a2;
  CFAllocatorRef v19 = CFGetAllocator(*(CFTypeRef *)a2);
  CFTypeRef v36 = 0;
  CFTypeRef v37 = 0;
  CFTypeRef cf = 0;
  int v34 = 0;
  unint64_t v31 = a5;
  if (*(unsigned char *)(a2 + 24))
  {
    if (a1)
    {
      uint64_t AuxiliaryImageTypeForIndex = FigSignalErrorAt();
      goto LABEL_43;
    }
    a1 = *(void *)(a2 + 16);
  }
  int v33 = 0;
  uint64_t AuxiliaryImageTypeForIndex = _getAuxiliaryImageTypeForIndex((uint64_t)v17, 0, a1, v18, &v34, &v33);
  if (AuxiliaryImageTypeForIndex)
  {
LABEL_43:
    uint64_t v23 = AuxiliaryImageTypeForIndex;
    goto LABEL_33;
  }
  uint64_t v22 = _copyAuxiliaryImageMetadataForIndex((uint64_t)v17, 0, a1, v21, &v36);
  if (v22)
  {
    uint64_t v23 = v22;
    if (v22 != -16993) {
      goto LABEL_33;
    }
  }
  if (v34 == 4)
  {
    if (*(void *)(a2 + 16) == a1 && *(void *)(a2 + 8))
    {
      MutableCopyWithCFTypeCallbackCGColorSpaceRef s = (const void *)FigCFDictionaryCreateMutableCopyWithCFTypeCallbacks();
      if (!MutableCopyWithCFTypeCallbacks) {
        goto LABEL_44;
      }
    }
    else
    {
      MutableCopyWithCFTypeCallbackCGColorSpaceRef s = 0;
    }
  }
  else
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v19, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!Mutable)
    {
LABEL_44:
      uint64_t v23 = 4294950305;
      goto LABEL_33;
    }
    MutableCopyWithCFTypeCallbackCGColorSpaceRef s = Mutable;
    uint64_t v26 = FigCFDictionarySetInt();
    if (v26)
    {
      uint64_t v23 = v26;
      goto LABEL_32;
    }
  }
  if (*(unsigned char *)(a2 + 25) && (Auxiliaryuint64_t ImageForIndex = FigCFDictionarySetInt(), AuxiliaryImageForIndex)
    || (Auxiliaryuint64_t ImageForIndex = _createAuxiliaryImageForIndex((uint64_t)v17, 0, a1, (const __CFDictionary *)MutableCopyWithCFTypeCallbacks, 2, (uint64_t)&v37), AuxiliaryImageForIndex))
  {
    uint64_t v23 = AuxiliaryImageForIndex;
    if (!MutableCopyWithCFTypeCallbacks) {
      goto LABEL_33;
    }
LABEL_32:
    CFRelease(MutableCopyWithCFTypeCallbacks);
    goto LABEL_33;
  }
  if (a6) {
    _copyAuxiliaryImageTypeInfoForIndex((uint64_t)v17, 0, a1, v28, &cf);
  }
  if (a8)
  {
    CGColorSpaceRef space = 0;
    if (!_copyAuxiliaryColorSpaceForIndex((uint64_t)v17, 0, a1, (uint64_t *)&space))
    {
      *a8 = CGColorSpaceCopyICCData(space);
      if (space) {
        CFRelease(space);
      }
    }
  }
  if (a9)
  {
    CFTypeRef v29 = *(CFTypeRef *)(v17[34] + 96 * a1 + 88);
    if (v29) {
      CFTypeRef v29 = CFRetain(v29);
    }
    *a9 = v29;
  }
  *a7 = v37;
  *a3 = v36;
  CFTypeRef v36 = 0;
  CFTypeRef v37 = 0;
  *a4 = 0;
  if (a6)
  {
    *a6 = cf;
    CFTypeRef cf = 0;
  }
  uint64_t v23 = 0;
  *unint64_t v31 = v34;
  if (MutableCopyWithCFTypeCallbacks) {
    goto LABEL_32;
  }
LABEL_33:
  if (cf) {
    CFRelease(cf);
  }
  if (v37) {
    CFRelease(v37);
  }
  if (v36) {
    CFRelease(v36);
  }
  return v23;
}

uint64_t _parseXMPIfNeeded(uint64_t a1)
{
  uint64_t v2 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 32));
  if (v2) {
    return v2;
  }
  if (*(unsigned char *)(a1 + 328))
  {
    XMPLocationFromJFIFByteStreauint64_t m = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 328) = 1;
    unsigned __int8 v9 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    XMPLocationFromJFIFByteStreauint64_t m = CMPhotoGetXMPLocationFromJFIFByteStream(*(void *)(a1 + 24), 0, &v9, &v8, &v7);
    if (!XMPLocationFromJFIFByteStream)
    {
      int v4 = v9;
      *(unsigned char *)(a1 + 329) = v9;
      if (v4)
      {
        uint64_t v5 = v7;
        *(void *)(a1 + 336) = v8;
        *(void *)(a1 + 344) = v5;
      }
    }
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 32));
  return XMPLocationFromJFIFByteStream;
}

uint64_t _parseDebugMetadataIfNeeded(uint64_t a1)
{
  uint64_t v2 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 32));
  if (v2) {
    return v2;
  }
  if (*(unsigned char *)(a1 + 352))
  {
    uint64_t v3 = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 352) = 1;
    uint64_t v3 = CMPhotoCopyDebugMetadataFromJFIFByteStream(*(void *)a1, *(void *)(a1 + 24), 0, (unsigned char *)(a1 + 353), (_OWORD *)(a1 + 360), (CFDataRef *)(a1 + 376));
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 32));
  return v3;
}

uint64_t _parseCustomMetadataIfNeeded(uint64_t a1)
{
  uint64_t v2 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 32));
  if (v2) {
    return v2;
  }
  if (*(unsigned char *)(a1 + 384))
  {
    uint64_t v3 = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 384) = 1;
    uint64_t v3 = CMPhotoCopyCustomMetadataFromJFIFByteStream(*(void *)a1, *(void *)(a1 + 24), 0, (unsigned char *)(a1 + 385), (_OWORD *)(a1 + 392), (void *)(a1 + 408));
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 32));
  return v3;
}

uint64_t _createMainImageDescription(uint64_t a1, const __CFNumber *a2, __CFDictionary **a3)
{
  CFTypeRef v71 = 0;
  CFNumberRef v72 = a2;
  CFAllocatorRef v3 = *(const __CFAllocator **)(a1 + 40);
  uint64_t v64 = a1 + 40;
  CFTypeRef v69 = 0;
  CFTypeRef v70 = 0;
  uint64x2_t value = 0;
  CFTypeRef v68 = 0;
  int v66 = 0;
  if (!a3)
  {
    CFMutableDictionaryRef Mutable = 0;
    uint64_t v16 = 0;
    uint64_t v15 = 4294950306;
    goto LABEL_150;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    uint64_t v16 = 0;
    CFMutableArrayRef v17 = 0;
    uint64_t v18 = 0;
    uint64_t v15 = 4294950305;
    goto LABEL_144;
  }
  if (a2 != (const __CFNumber *)-1
    || (uint64_t v8 = CMPhotoDecompressionContainerExternalToInternalIndex((void *)a1, 0, -1, 0, &v72, 0, 0),
        !v8))
  {
    *(void *)&long long v78 = 0;
    if (*(void *)(a1 + 264))
    {
      *(void *)&long long v78 = *(void *)(*(void *)(a1 + 272) + 48);
    }
    else
    {
      uint64_t v19 = *(void *)(a1 + 64);
      uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v20) {
        uint64_t v21 = v20;
      }
      else {
        uint64_t v21 = 0;
      }
      CFTypeRef v29 = *(uint64_t (**)(uint64_t, void, long long *))(v21 + 24);
      if (!v29)
      {
        long long v24 = 0;
        uint64_t v15 = 4294954514;
        goto LABEL_49;
      }
      uint64_t ImageGeometryForIndex = v29(v19, 0, &v78);
      if (ImageGeometryForIndex) {
        goto LABEL_47;
      }
    }
    uint64_t ImageGeometryForIndex = CMPhotoCFDictionarySetInt64(Mutable, @"DataOffset", 0);
    if (!ImageGeometryForIndex)
    {
      if ((v78 & 0x8000000000000000) != 0)
      {
        long long v24 = 0;
        uint64_t v15 = 4294950190;
        goto LABEL_49;
      }
      uint64_t ImageGeometryForIndex = CMPhotoCFDictionarySetSize(Mutable, @"DataLength", v78);
      if (!ImageGeometryForIndex)
      {
        v84.double width = (double)*(unint64_t *)(a1 + 112);
        v84.double height = (double)*(unint64_t *)(a1 + 120);
        CFDictionaryRef DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v84);
        if (!DictionaryRepresentation)
        {
          long long v24 = 0;
          goto LABEL_175;
        }
        CFDictionaryRef v11 = DictionaryRepresentation;
        CFDictionarySetValue(Mutable, @"Dimensions", DictionaryRepresentation);
        CFRelease(v11);
        uint64_t ImageGeometryForIndex = _getImageGeometryForIndex(a1, 0, v12, 0, 0, &v66);
        if (!ImageGeometryForIndex)
        {
          uint64_t ImageGeometryForIndex = FigCFDictionarySetInt();
          if (!ImageGeometryForIndex)
          {
            uint64_t ImageGeometryForIndex = CMPhotoCFDictionarySetInt64(Mutable, @"ItemID", 1);
            if (!ImageGeometryForIndex)
            {
              uint64_t ImageGeometryForIndex = _createBitDepthArray(v3, *(_DWORD *)(a1 + 128), *(_DWORD *)(a1 + 136), (__CFArray **)&value);
              if (!ImageGeometryForIndex)
              {
                char v13 = value;
                CFDictionarySetValue(Mutable, @"BitDepth", value);
                if (v13)
                {
                  CFRelease(v13);
                  uint64x2_t value = 0;
                }
                if (a2 != (const __CFNumber *)-1)
                {
                  if (v72) {
                    int v14 = 1953325424;
                  }
                  else {
                    int v14 = 1785750887;
                  }
                  uint64_t ImageGeometryForIndex = CMPhotoCFDictionarySetInt32(Mutable, @"CodecType", v14);
                  if (!ImageGeometryForIndex)
                  {
                    uint64_t v8 = FigCFDictionarySetCFIndex();
                    if (v8) {
                      goto LABEL_23;
                    }
                    goto LABEL_40;
                  }
                  goto LABEL_47;
                }
                uint64_t ImageGeometryForIndex = CMPhotoCFDictionarySetInt32(Mutable, @"CodecType", 1785750887);
                if (!ImageGeometryForIndex)
                {
                  int v22 = *(unsigned __int8 *)(a1 + 153);
                  CFIndex v23 = *(unsigned char *)(a1 + 153) ? 2 : 1;
                  uint64_t ImageGeometryForIndex = FigCFDictionarySetInt();
                  if (!ImageGeometryForIndex)
                  {
                    if (!v22)
                    {
LABEL_40:
                      long long v24 = 0;
                      goto LABEL_41;
                    }
                    long long v24 = CFArrayCreateMutable(v3, v23, MEMORY[0x1E4F1D510]);
                    if (v24)
                    {
                      cf[0] = 0;
                      uint64_t MainImageDescription = _createMainImageDescription(a1, 1, cf);
                      if (MainImageDescription) {
                        goto LABEL_169;
                      }
                      CFArrayAppendValue(v24, cf[0]);
                      if (cf[0])
                      {
                        CFRelease(cf[0]);
                        cf[0] = 0;
                      }
                      uint64_t MainImageDescription = _createMainImageDescription(a1, 0, cf);
                      if (MainImageDescription)
                      {
LABEL_169:
                        uint64_t v15 = MainImageDescription;
                        goto LABEL_49;
                      }
                      CFArrayAppendValue(v24, cf[0]);
                      if (cf[0])
                      {
                        CFRelease(cf[0]);
                        cf[0] = 0;
                      }
                      CFDictionarySetValue(Mutable, @"AlternateImages", v24);
LABEL_41:
                      cf[0] = 0;
                      if (!_copyColorSpaceForIndex(a1, (unint64_t)v72, cf))
                      {
                        CFStringRef v27 = CGColorSpaceCopyName((CGColorSpaceRef)cf[0]);
                        if (v27)
                        {
                          CFStringRef v28 = v27;
                          CFDictionarySetValue(Mutable, @"NamedColorSpace", v27);
                          CFRelease(v28);
                        }
                        else
                        {
                          CFDictionarySetValue(Mutable, @"ColorSpace", cf[0]);
                        }
                        if (cf[0]) {
                          CFRelease(cf[0]);
                        }
                      }
                      BOOL v63 = v72 == (const __CFNumber *)1;
                      if (v72 != (const __CFNumber *)1)
                      {
LABEL_71:
                        if (!*(unsigned char *)(a1 + 281)
                          || (uint64_t MainImageDescription = _createMetadataDescriptionArray(v3, *(void *)(a1 + 288), *(void *)(a1 + 296), (__CFArray **)&v71), !MainImageDescription))
                        {
                          if (!*(unsigned char *)(a1 + 369)
                            || (uint64_t MainImageDescription = _createMetadataDescriptionArray(v3, *(void *)(a1 + 376), *(void *)(a1 + 384), (__CFArray **)&v70), !MainImageDescription))
                          {
                            if (!*(unsigned char *)(a1 + 393)
                              || (uint64_t MainImageDescription = _createMetadataDescriptionArray(v3, *(void *)(a1 + 400), *(void *)(a1 + 408), (__CFArray **)&v69), !MainImageDescription))
                            {
                              if (*(unsigned char *)(a1 + 425))
                              {
                                uint64_t v16 = CFArrayCreateMutable(v3, 1, MEMORY[0x1E4F1D510]);
                                if (!v16)
                                {
                                  uint64_t v18 = 0;
                                  goto LABEL_179;
                                }
                                uint64_t v39 = _copyCustomMetadataForIndex(a1, (unint64_t)v72, v37, v38, &v68);
                                if (v39)
                                {
                                  uint64_t v15 = v39;
                                  uint64_t v18 = 0;
                                  goto LABEL_168;
                                }
                                CFArrayAppendValue(v16, v68);
                              }
                              else
                              {
                                uint64_t v16 = 0;
                              }
                              if (!*(unsigned char *)(a1 + 312))
                              {
                                uint64_t v62 = 0;
                                uint64_t v46 = 2;
                                goto LABEL_96;
                              }
                              uint64_t v18 = CFArrayCreateMutable(v3, 1, MEMORY[0x1E4F1D510]);
                              if (v18)
                              {
                                CFMutableDictionaryRef v40 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                                if (v40)
                                {
                                  CFMutableDictionaryRef v41 = v40;
                                  CFArrayAppendValue(v18, v40);
                                  CFRelease(v41);
                                  uint64_t BitDepthArray = CMPhotoCFDictionarySetInt64(v41, @"DataOffset", *(void *)(a1 + 344) + *(void *)(a1 + 288));
                                  if (BitDepthArray
                                    || (uint64_t BitDepthArray = CMPhotoCFDictionarySetSize(v41, @"DataLength", *(void *)(a1 + 352)), BitDepthArray))
                                  {
LABEL_167:
                                    uint64_t v15 = BitDepthArray;
LABEL_168:
                                    CFMutableArrayRef v17 = 0;
                                    goto LABEL_142;
                                  }
                                  v86.double width = (double)*(unint64_t *)(a1 + 320);
                                  v86.double height = (double)*(unint64_t *)(a1 + 328);
                                  CFDictionaryRef v43 = CGSizeCreateDictionaryRepresentation(v86);
                                  if (v43)
                                  {
                                    CFDictionaryRef v44 = v43;
                                    CFDictionarySetValue(v41, @"Dimensions", v43);
                                    CFRelease(v44);
                                    uint64_t BitDepthArray = FigCFDictionarySetInt();
                                    if (!BitDepthArray)
                                    {
                                      uint64_t BitDepthArray = CMPhotoCFDictionarySetInt64(v41, @"ItemID", 2);
                                      if (!BitDepthArray)
                                      {
                                        uint64_t BitDepthArray = _createBitDepthArray(v3, *(_DWORD *)(a1 + 336), *(_DWORD *)(a1 + 360), (__CFArray **)&value);
                                        if (!BitDepthArray)
                                        {
                                          int8x16_t v45 = value;
                                          CFDictionarySetValue(v41, @"BitDepth", value);
                                          if (v45)
                                          {
                                            CFRelease(v45);
                                            uint64x2_t value = 0;
                                          }
                                          uint64_t BitDepthArray = CMPhotoCFDictionarySetInt32(v41, @"CodecType", 1785750887);
                                          if (!BitDepthArray)
                                          {
                                            uint64_t v62 = v18;
                                            uint64_t v46 = 3;
LABEL_96:
                                            CFIndex capacity = 0;
                                            uint64_t AuxiliaryImageCountForIndex = _getAuxiliaryImageCountForIndex(a1, (unint64_t)v72, v26, &capacity);
                                            if (AuxiliaryImageCountForIndex)
                                            {
                                              uint64_t v15 = AuxiliaryImageCountForIndex;
                                              CFMutableArrayRef v17 = 0;
                                            }
                                            else
                                            {
                                              CFDictionaryRef v60 = a3;
                                              int v61 = v24;
                                              if (capacity < 1)
                                              {
                                                CFMutableArrayRef v17 = 0;
LABEL_127:
                                                if (v71) {
                                                  CFDictionarySetValue(Mutable, @"ExifPayloads", v71);
                                                }
                                                long long v24 = v61;
                                                uint64_t v18 = v62;
                                                if (v70) {
                                                  CFDictionarySetValue(Mutable, @"XMPPayloads", v70);
                                                }
                                                if (v69) {
                                                  CFDictionarySetValue(Mutable, @"DebugPayloads", v69);
                                                }
                                                if (v16) {
                                                  CFDictionarySetValue(Mutable, @"CustomMetadataPayloads", v16);
                                                }
                                                if (v62)
                                                {
                                                  CFDictionarySetValue(Mutable, @"ThumbnailImages", v62);
                                                  CFArrayGetCount(v62);
                                                }
                                                uint64_t v58 = FigCFDictionarySetInt();
                                                if (v58)
                                                {
                                                  uint64_t v15 = v58;
                                                }
                                                else
                                                {
                                                  if (v17)
                                                  {
                                                    CFDictionarySetValue(Mutable, @"AuxiliaryImages", v17);
                                                    CFArrayGetCount(v17);
                                                  }
                                                  uint64_t v15 = FigCFDictionarySetInt();
                                                  if (!v15)
                                                  {
                                                    *CFDictionaryRef v60 = Mutable;
                                                    CFMutableDictionaryRef Mutable = 0;
                                                  }
                                                }
                                                goto LABEL_142;
                                              }
                                              unint64_t v48 = 0;
                                              CFMutableArrayRef v17 = 0;
                                              while (1)
                                              {
                                                *(void *)&long long v78 = 0;
                                                uint64_t AuxiliaryImageStorageForIndex = _getAuxiliaryImageStorageForIndex(v64, v63, v48, &v78);
                                                if (AuxiliaryImageStorageForIndex)
                                                {
LABEL_163:
                                                  uint64_t v15 = AuxiliaryImageStorageForIndex;
                                                  goto LABEL_165;
                                                }
                                                if (!v17)
                                                {
                                                  CFMutableArrayRef v17 = CFArrayCreateMutable(v3, capacity, MEMORY[0x1E4F1D510]);
                                                  if (!v17) {
                                                    break;
                                                  }
                                                }
                                                CFMutableDictionaryRef v50 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                                                if (!v50) {
                                                  break;
                                                }
                                                CFMutableDictionaryRef v51 = v50;
                                                CFArrayAppendValue(v17, v50);
                                                CFRelease(v51);
                                                uint64_t AuxiliaryImageStorageForIndex = CMPhotoCFDictionarySetInt64(v51, @"DataOffset", *(void *)(v78 + 48));
                                                if (AuxiliaryImageStorageForIndex) {
                                                  goto LABEL_163;
                                                }
                                                uint64_t AuxiliaryImageStorageForIndex = CMPhotoCFDictionarySetSize(v51, @"DataLength", *(void *)(v78 + 56));
                                                if (AuxiliaryImageStorageForIndex) {
                                                  goto LABEL_163;
                                                }
                                                v87.double width = (double)*(unint64_t *)v78;
                                                v87.double height = (double)*(unint64_t *)(v78 + 8);
                                                CFDictionaryRef v52 = CGSizeCreateDictionaryRepresentation(v87);
                                                if (!v52) {
                                                  break;
                                                }
                                                CFDictionaryRef v53 = v52;
                                                CFDictionarySetValue(v51, @"Dimensions", v52);
                                                CFRelease(v53);
                                                uint64_t AuxiliaryImageStorageForIndex = FigCFDictionarySetInt();
                                                if (AuxiliaryImageStorageForIndex) {
                                                  goto LABEL_163;
                                                }
                                                uint64_t AuxiliaryImageStorageForIndex = CMPhotoCFDictionarySetInt64(v51, @"ItemID", v46 + v48);
                                                if (AuxiliaryImageStorageForIndex) {
                                                  goto LABEL_163;
                                                }
                                                uint64_t AuxiliaryImageStorageForIndex = CMPhotoCFDictionarySetInt(v51, @"AuxiliaryType", *(_DWORD *)(v78 + 16));
                                                if (AuxiliaryImageStorageForIndex) {
                                                  goto LABEL_163;
                                                }
                                                uint64_t AuxiliaryImageStorageForIndex = CMPhotoCFDictionarySetInt32(v51, @"AuxiliaryNativePixelFormat", *(_DWORD *)(v78 + 20));
                                                if (AuxiliaryImageStorageForIndex) {
                                                  goto LABEL_163;
                                                }
                                                int v54 = *(const void **)(v78 + 32);
                                                if (v54)
                                                {
                                                  CFDictionarySetValue(v51, @"AuxiliaryTypeURN", v54);
                                                  if (*(_DWORD *)(v78 + 16) == 4)
                                                  {
                                                    if (FigCFEqual()) {
                                                      CMPhotoDecompressionContainerAddMeteorHeadroomToDescriptionForInternalIndex((uint64_t *)a1, 0, v48, v51);
                                                    }
                                                  }
                                                }
                                                uint64_t AuxiliaryImageStorageForIndex = _createBitDepthArray(v3, 6, *(_DWORD *)(v78 + 68), (__CFArray **)&value);
                                                if (AuxiliaryImageStorageForIndex) {
                                                  goto LABEL_163;
                                                }
                                                unsigned __int8 v55 = value;
                                                CFDictionarySetValue(v51, @"BitDepth", value);
                                                if (v55)
                                                {
                                                  CFRelease(v55);
                                                  uint64x2_t value = 0;
                                                }
                                                uint64_t AuxiliaryImageStorageForIndex = CMPhotoCFDictionarySetInt32(v51, @"CodecType", 1785750887);
                                                if (AuxiliaryImageStorageForIndex) {
                                                  goto LABEL_163;
                                                }
                                                cf[0] = 0;
                                                if (!_copyAuxiliaryColorSpaceForIndex(a1, (unint64_t)v72, v48, (uint64_t *)cf))
                                                {
                                                  CFStringRef v56 = CGColorSpaceCopyName((CGColorSpaceRef)cf[0]);
                                                  if (v56)
                                                  {
                                                    CFStringRef v57 = v56;
                                                    CFDictionarySetValue(v51, @"NamedColorSpace", v56);
                                                    CFRelease(v57);
                                                  }
                                                  else
                                                  {
                                                    CFDictionarySetValue(v51, @"ColorSpace", cf[0]);
                                                  }
                                                  if (cf[0]) {
                                                    CFRelease(cf[0]);
                                                  }
                                                }
                                                if ((uint64_t)++v48 >= capacity) {
                                                  goto LABEL_127;
                                                }
                                              }
                                              uint64_t v15 = 4294950305;
LABEL_165:
                                              long long v24 = v61;
                                            }
                                            uint64_t v18 = v62;
LABEL_142:
                                            if (v24) {
                                              CFRelease(v24);
                                            }
                                            goto LABEL_144;
                                          }
                                        }
                                      }
                                    }
                                    goto LABEL_167;
                                  }
                                }
                              }
LABEL_179:
                              CFMutableArrayRef v17 = 0;
                              uint64_t v15 = 4294950305;
                              goto LABEL_142;
                            }
                          }
                        }
                        goto LABEL_169;
                      }
                      unint64_t v83 = 0;
                      if (!*(unsigned char *)(a1 + 153))
                      {
                        uint64_t v18 = 0;
                        CFMutableArrayRef v17 = 0;
                        uint64_t v16 = 0;
                        uint64_t v15 = 4294950304;
                        goto LABEL_142;
                      }
                      uint64_t v30 = FigCFDictionarySetInt();
                      if (!v30)
                      {
                        uint64_t v30 = CMPhotoCFDictionarySetInt32(Mutable, @"DerivationGainMapPixelFormat", *(_DWORD *)(a1 + 180));
                        if (!v30)
                        {
                          int ChromaSubsamplingFromPixelFormat = CMPhotoGetChromaSubsamplingFromPixelFormat(*(unsigned int *)(a1 + 180));
                          uint64_t v30 = CMPhotoCFDictionarySetInt32(Mutable, @"DerivationGainMapChromaFormat", ChromaSubsamplingFromPixelFormat);
                          if (!v30)
                          {
                            v85.double width = (double)*(unint64_t *)(a1 + 160);
                            v85.double height = (double)*(unint64_t *)(a1 + 168);
                            CFDictionaryRef v32 = CGSizeCreateDictionaryRepresentation(v85);
                            if (!v32)
                            {
                              uint64_t v15 = 4294950305;
LABEL_68:
                              if (v83) {
                                CFRelease(v83);
                              }
                              if (v15) {
                                goto LABEL_49;
                              }
                              goto LABEL_71;
                            }
                            CFDictionaryRef v33 = v32;
                            CFDictionarySetValue(Mutable, @"DerivationGainMapDimension", v32);
                            CFRelease(v33);
                            int v34 = *(const void **)(a1 + 248);
                            if (v34)
                            {
                              long long v35 = (__CFDictionary *)CFRetain(v34);
                              unint64_t v83 = v35;
LABEL_67:
                              CFDictionarySetValue(Mutable, @"DerivationDetails", v35);
                              uint64_t v15 = 0;
                              goto LABEL_68;
                            }
                            long long v81 = 0u;
                            long long v82 = 0u;
                            long long v79 = 0u;
                            long long v80 = 0u;
                            long long v78 = 0u;
                            if (ChromaSubsamplingFromPixelFormat == 6) {
                              int v36 = 1;
                            }
                            else {
                              int v36 = 3;
                            }
                            uint64_t v30 = CMPhotoParseFlexRangeMetadataFromAuxiliaryXMPMetadata(*(const CGImageMetadata **)(a1 + 184), v36, (uint64_t)&v78);
                            if (!v30)
                            {
                              long long v75 = v80;
                              long long v76 = v81;
                              long long v77 = v82;
                              *(_OWORD *)CFTypeRef cf = v78;
                              long long v74 = v79;
                              uint64_t v30 = CMPhotoCreateFlexRangeMetadataDictionaryFromParsedMetadata((uint64_t)cf, &v83);
                              if (!v30)
                              {
                                long long v35 = v83;
                                goto LABEL_67;
                              }
                            }
                          }
                        }
                      }
                      uint64_t v15 = v30;
                      goto LABEL_68;
                    }
LABEL_175:
                    uint64_t v15 = 4294950305;
                    goto LABEL_49;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_47:
    uint64_t v15 = ImageGeometryForIndex;
    long long v24 = 0;
LABEL_49:
    uint64_t v18 = 0;
    CFMutableArrayRef v17 = 0;
    uint64_t v16 = 0;
    goto LABEL_142;
  }
LABEL_23:
  uint64_t v15 = v8;
  uint64_t v16 = 0;
  CFMutableArrayRef v17 = 0;
  uint64_t v18 = 0;
LABEL_144:
  if (value) {
    CFRelease(value);
  }
  if (v18) {
    CFRelease(v18);
  }
  if (v17) {
    CFRelease(v17);
  }
LABEL_150:
  if (v71) {
    CFRelease(v71);
  }
  if (v70) {
    CFRelease(v70);
  }
  if (v69) {
    CFRelease(v69);
  }
  if (v68) {
    CFRelease(v68);
  }
  if (v16) {
    CFRelease(v16);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v15;
}

uint64_t _createMetadataDescriptionArray(const __CFAllocator *a1, uint64_t a2, uint64_t a3, __CFArray **a4)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 1, MEMORY[0x1E4F1D510]);
  if (!Mutable) {
    return 4294950305;
  }
  unsigned __int8 v9 = Mutable;
  CFMutableDictionaryRef v10 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v10)
  {
    uint64_t v13 = 4294950305;
    goto LABEL_10;
  }
  CFMutableDictionaryRef v11 = v10;
  CFArrayAppendValue(v9, v10);
  CFRelease(v11);
  uint64_t v12 = CMPhotoCFDictionarySetInt64(v11, @"DataOffset", a2);
  if (v12)
  {
    uint64_t v13 = v12;
    goto LABEL_10;
  }
  uint64_t v13 = CMPhotoCFDictionarySetSize(v11, @"DataLength", a3);
  if (v13)
  {
LABEL_10:
    CFRelease(v9);
    return v13;
  }
  *a4 = v9;
  return v13;
}

uint64_t CMPhotoSampleBufferCreateFromSource(const __CFAllocator *a1, const __CFData *a2, CFIndex a3, size_t a4, void *a5, char *a6)
{
  CFDataRef v6 = a2;
  CMBlockBufferRef blockBufferOut = 0;
  size_t sampleSizeArray = a4;
  CFTypeRef v29 = 0;
  CMSampleBufferRef v30 = 0;
  char v28 = 0;
  if (!a2)
  {
    uint64_t v18 = 4294950306;
    goto LABEL_34;
  }
  if (!a5)
  {
    CFDataRef v6 = 0;
    uint64_t v18 = 0;
    goto LABEL_34;
  }
  versiouint64_t n = a4;
  switch(CMPhotoGetStorageType(a2))
  {
    case 1u:
      if (version + a3 > CFDataGetLength(v6)) {
        goto LABEL_13;
      }
      if (!version)
      {
        if (CFDataGetLength(v6) < a3) {
          goto LABEL_52;
        }
        CFDataGetLength(v6);
        size_t sampleSizeArray = CFDataGetLength(v6) - a3;
      }
      BytePtr = CFDataGetBytePtr(v6);
      if (!BytePtr)
      {
        CFDataRef v6 = 0;
        uint64_t v18 = 4294950194;
        goto LABEL_34;
      }
      uint64_t v13 = BytePtr;
      int v14 = (void *)CFRetain(v6);
      context.versiouint64_t n = 0;
      context.info = v14;
      memset(&context.retain, 0, 24);
      context.allocate = (CFAllocatorAllocateCallBack)_cfTypeDeallocator_allocate;
      context.reallocate = 0;
      context.deallocate = (CFAllocatorDeallocateCallBack)_cfTypeDeallocator_deallocate;
      context.preferredCFNumberRef Size = 0;
      CFDataRef v6 = CFAllocatorCreate(0, &context);
      if (v6)
      {
        uint64_t v15 = CMBlockBufferCreateWithMemoryBlock(a1, (void *)&v13[a3], sampleSizeArray, v6, 0, 0, sampleSizeArray, 0, &blockBufferOut);
        if (!v15)
        {
          uint64_t v16 = CMSampleBufferCreate(a1, blockBufferOut, 1u, 0, 0, 0, 1, 0, 0, 1, &sampleSizeArray, &v30);
          if (!v16) {
            goto LABEL_31;
          }
LABEL_51:
          uint64_t v18 = v16;
LABEL_34:
          if (v30) {
            CFRelease(v30);
          }
          goto LABEL_36;
        }
        uint64_t v18 = v15;
      }
      else
      {
        uint64_t v18 = 4294950305;
      }
      if (v14) {
        CFRelease(v14);
      }
      goto LABEL_34;
    case 2u:
      uint64_t v16 = CMSampleBufferCreate(a1, v6, 1u, 0, 0, 0, 1, 0, 0, 1, &sampleSizeArray, &v30);
      goto LABEL_30;
    case 3u:
      uint64_t v17 = CMByteStreamCreateForFileURL();
      if (v17) {
        goto LABEL_14;
      }
      uint64_t v16 = CMPhotoSampleBufferCreateFromSource(a1, v29, a3, sampleSizeArray, &v30, &v28);
      goto LABEL_30;
    case 4u:
      if ((a3 & 0x8000000000000000) == 0)
      {
        SampleBufferWrappingIOSurfaceRef IOSurface = CMPhotoCreateSampleBufferWrappingIOSurface(a1, v6, a3, version, 0, 1u);
        CFDataRef v6 = 0;
        CMSampleBufferRef v30 = SampleBufferWrappingIOSurface;
        goto LABEL_31;
      }
LABEL_52:
      CFDataRef v6 = 0;
      uint64_t v18 = 4294950190;
      goto LABEL_34;
    case 5u:
      if (version) {
        goto LABEL_22;
      }
      context.versiouint64_t n = 0;
      uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v22) {
        uint64_t v23 = v22;
      }
      else {
        uint64_t v23 = 0;
      }
      uint64_t v26 = *(uint64_t (**)(const __CFData *, void, CFAllocatorContext *))(v23 + 24);
      if (!v26)
      {
        uint64_t v18 = 4294954514;
        goto LABEL_15;
      }
      uint64_t v17 = v26(v6, 0, &context);
      if (v17) {
        goto LABEL_14;
      }
      versiouint64_t n = context.version;
      if (context.version < 0)
      {
        uint64_t v18 = 4294950190;
        goto LABEL_15;
      }
      size_t sampleSizeArray = context.version;
LABEL_22:
      char v28 = 1;
      uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v20) {
        uint64_t v21 = v20;
      }
      else {
        uint64_t v21 = 0;
      }
      long long v24 = *(uint64_t (**)(const __CFData *, size_t, CFIndex, CMBlockBufferRef *, size_t *))(v21 + 32);
      if (!v24)
      {
        CFDataRef v6 = 0;
        uint64_t v18 = 4294954514;
        goto LABEL_34;
      }
      uint64_t v17 = v24(v6, version, a3, &blockBufferOut, &sampleSizeArray);
      if (v17)
      {
LABEL_14:
        uint64_t v18 = v17;
LABEL_15:
        CFDataRef v6 = 0;
        goto LABEL_34;
      }
      uint64_t v16 = CMSampleBufferCreate(a1, blockBufferOut, 1u, 0, 0, 0, 1, 0, 0, 1, &sampleSizeArray, &v30);
LABEL_30:
      CFDataRef v6 = 0;
      if (v16) {
        goto LABEL_51;
      }
LABEL_31:
      *a5 = v30;
      CMSampleBufferRef v30 = 0;
      uint64_t v18 = 0;
      if (a6) {
        *a6 = v28;
      }
LABEL_36:
      if (blockBufferOut) {
        CFRelease(blockBufferOut);
      }
      if (v29) {
        CFRelease(v29);
      }
      if (v6) {
        CFRelease(v6);
      }
      return v18;
    default:
LABEL_13:
      uint64_t v17 = FigSignalErrorAt();
      goto LABEL_14;
  }
}

uint64_t _cfTypeDeallocator_allocate()
{
  return 0;
}

void _cfTypeDeallocator_deallocate(int a1, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t CMPhotoDataCreateFromSampleBuffer(const __CFAllocator *a1, CMSampleBufferRef sbuf, int a3, CFDataRef *a4)
{
  int v4 = 0;
  uint64_t v5 = 4294950306;
  if (!sbuf || !a4) {
    goto LABEL_23;
  }
  CMBlockBufferRef DataBuffer = CMSampleBufferGetDataBuffer(sbuf);
  if (!DataBuffer)
  {
    int v4 = 0;
    uint64_t v5 = 4294950194;
    goto LABEL_23;
  }
  CFMutableDictionaryRef v10 = DataBuffer;
  DataCFIndex Length = CMBlockBufferGetDataLength(DataBuffer);
  if (a3 || !CMBlockBufferIsRangeContiguous(v10, 0, DataLength))
  {
    uint64_t v12 = (UInt8 *)malloc_type_malloc(DataLength, 0xC1325B46uLL);
    int v4 = v12;
    if (!v12) {
      goto LABEL_25;
    }
    if (DataLength)
    {
      size_t v13 = 0;
      unint64_t v14 = DataLength;
      uint64_t v15 = v12;
      while (1)
      {
        lengthAtOffsetOut.versiouint64_t n = 0;
        dataPointerOut = 0;
        uint64_t DataPointer = CMBlockBufferGetDataPointer(v10, v13, (size_t *)&lengthAtOffsetOut, 0, &dataPointerOut);
        if (DataPointer) {
          break;
        }
        if (v14 >= lengthAtOffsetOut.version) {
          versiouint64_t n = lengthAtOffsetOut.version;
        }
        else {
          versiouint64_t n = v14;
        }
        lengthAtOffsetOut.versiouint64_t n = version;
        memcpy(v15, dataPointerOut, version);
        v13 += version;
        v15 += version;
        v14 -= version;
        if (!v14) {
          goto LABEL_13;
        }
      }
      uint64_t v5 = DataPointer;
      goto LABEL_23;
    }
LABEL_13:
    CFDataRef v18 = CFDataCreateWithBytesNoCopy(a1, v4, DataLength, (CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
    if (!v18)
    {
LABEL_25:
      uint64_t v5 = 4294950305;
      goto LABEL_23;
    }
    int v4 = 0;
  }
  else
  {
    size_t v23 = 0;
    dataPointerOut = 0;
    uint64_t v19 = CMBlockBufferGetDataPointer(v10, 0, &v23, 0, &dataPointerOut);
    if (v19)
    {
      uint64_t v5 = v19;
      goto LABEL_22;
    }
    if (v23 != DataLength)
    {
      uint64_t v5 = 4294950194;
      goto LABEL_22;
    }
    uint64_t v20 = (void *)CFRetain(v10);
    lengthAtOffsetOut.versiouint64_t n = 0;
    lengthAtOffsetOut.info = v20;
    memset(&lengthAtOffsetOut.retain, 0, 24);
    lengthAtOffsetOut.allocate = (CFAllocatorAllocateCallBack)_cfTypeDeallocator_allocate;
    lengthAtOffsetOut.reallocate = 0;
    lengthAtOffsetOut.deallocate = (CFAllocatorDeallocateCallBack)_cfTypeDeallocator_deallocate;
    lengthAtOffsetOut.preferredCFNumberRef Size = 0;
    int v4 = (UInt8 *)CFAllocatorCreate(0, &lengthAtOffsetOut);
    if (!v4 || (CFDataRef v18 = CFDataCreateWithBytesNoCopy(a1, (const UInt8 *)dataPointerOut, v23, (CFAllocatorRef)v4)) == 0)
    {
      if (v20) {
        CFRelease(v20);
      }
      uint64_t v5 = 4294950305;
      if (v4) {
        goto LABEL_21;
      }
      goto LABEL_23;
    }
  }
  uint64_t v5 = 0;
  *a4 = v18;
  if (v4)
  {
LABEL_21:
    CFRelease(v4);
LABEL_22:
    int v4 = 0;
  }
LABEL_23:
  free(v4);
  return v5;
}

uint64_t CMPhotoCreateAV1CodecConfigFromSampleBuffer(opaqueCMSampleBuffer *a1, CFMutableDataRef *a2)
{
  CFMutableDataRef Mutable = CFDataCreateMutable(0, 4);
  if (!Mutable) {
    return 4294950305;
  }
  CFMutableDataRef v5 = Mutable;
  uint64_t v16 = 0;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v13 = 0u;
  uint64_t v6 = CMPhotoReadAV1SequenceHeaderInfoFromSampleBuffer(a1, &v13);
  if (v6)
  {
LABEL_8:
    uint64_t v8 = v6;
    CFRelease(v5);
    return v8;
  }
  if (HIDWORD(v16))
  {
    uint64_t v6 = FigSignalErrorAt();
    goto LABEL_8;
  }
  CFDataSetLength(v5, 4);
  MutableBytePtr = CFDataGetMutableBytePtr(v5);
  uint64_t v8 = 0;
  UInt8 *MutableBytePtr = -127;
  MutableBytePtr[1] = BYTE4(v14) | (32 * v14);
  UInt8 v9 = (BYTE12(v14) << 6) | (BYTE8(v14) << 7);
  MutableBytePtr[2] = v9;
  UInt8 v10 = (32 * v15) | (16 * BYTE4(v15)) | v9;
  MutableBytePtr[2] = v10;
  UInt8 v11 = (8 * BYTE8(v15)) | (4 * BYTE12(v15)) | v10;
  MutableBytePtr[2] = v11;
  MutableBytePtr[2] = v11 | v16;
  MutableBytePtr[3] = 16 * BYTE4(v16);
  *a2 = v5;
  return v8;
}

uint64_t CMPhotoReadAV1SequenceHeaderInfoFromSampleBuffer(opaqueCMSampleBuffer *a1, _DWORD *a2)
{
  dataPointerOut = 0;
  uint64_t AV1SequenceHeaderInfo = 4294950306;
  if (a1 && a2)
  {
    CMBlockBufferRef DataBuffer = CMSampleBufferGetDataBuffer(a1);
    if (DataBuffer)
    {
      CFMutableDataRef v5 = DataBuffer;
      uint64_t DataPointer = CMBlockBufferGetDataPointer(DataBuffer, 0, 0, 0, &dataPointerOut);
      if (DataPointer)
      {
        return DataPointer;
      }
      else
      {
        CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        uint64_t v8 = dataPointerOut;
        if (CMBlockBufferGetDataLength(v5) > 0x1F) {
          DataCFIndex Length = 32;
        }
        else {
          DataCFIndex Length = CMBlockBufferGetDataLength(v5);
        }
        CFDataRef v10 = CFDataCreateWithBytesNoCopy(v7, (const UInt8 *)v8, DataLength, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
        uint64_t AV1SequenceHeaderInfo = CMPhotoReadAV1SequenceHeaderInfo((uint64_t)v10, a2);
        if (v10) {
          CFRelease(v10);
        }
      }
    }
    else
    {
      return 4294950303;
    }
  }
  return AV1SequenceHeaderInfo;
}

uint64_t CMPhotoReadAV1SequenceHeaderInfo(uint64_t a1, _DWORD *a2)
{
  CFTypeRef v32 = 0;
  memset(v31, 0, sizeof(v31));
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  int v28 = 0;
  uint64_t v26 = 0;
  unint64_t v27 = 0;
  if (a2)
  {
    *(void *)&long long v3 = 0x200000002;
    *((void *)&v3 + 1) = 0x200000002;
    *(_OWORD *)a2 = v3;
    int v4 = a2 + 3;
    BitCGColorSpaceRef s = FigByteStreamCreateWithCFData();
    if (Bits) {
      goto LABEL_140;
    }
    CMPhotoBitStreamReadInit((uint64_t)v31, (uint64_t)v32, 0);
    BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, (_DWORD *)&v30 + 1);
    if (Bits) {
      goto LABEL_140;
    }
    BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 4uLL, &v30);
    if (Bits) {
      goto LABEL_140;
    }
    uint64_t v6 = a2 + 1;
    while (v30 == 2)
    {
      uint64_t v37 = 0;
      int v36 = 0;
      unint64_t v34 = 0;
      uint64_t v35 = 0;
      int v33 = 0;
      BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v37);
      if (Bits) {
        goto LABEL_140;
      }
      BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v36);
      if (Bits) {
        goto LABEL_140;
      }
      BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v33);
      if (Bits) {
        goto LABEL_140;
      }
      if (v37)
      {
        BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 3uLL, &v33);
        if (Bits) {
          goto LABEL_140;
        }
        BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 2uLL, &v33);
        if (Bits) {
          goto LABEL_140;
        }
        BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 3uLL, &v33);
        if (Bits) {
          goto LABEL_140;
        }
      }
      if (v36)
      {
        BitCGColorSpaceRef s = CMPhotoBitStreamRead_leb128((uint64_t)v31, &v34);
        if (Bits) {
          goto LABEL_140;
        }
      }
      BitCGColorSpaceRef s = CMPhotoBitStreamReadGetBitsRead((uint64_t)v31, &v35);
      if (Bits) {
        goto LABEL_140;
      }
      if ((v35 & 7) != 0) {
        goto LABEL_165;
      }
      BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, (_DWORD *)&v37 + 1);
      if (!Bits)
      {
        BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 4uLL, &v30);
        if (!Bits) {
          continue;
        }
      }
      goto LABEL_140;
    }
    if (v30 != 1) {
      goto LABEL_165;
    }
    BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, (_DWORD *)&v29 + 1);
    if (Bits) {
      goto LABEL_140;
    }
    BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v29);
    if (Bits) {
      goto LABEL_140;
    }
    BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v28);
    if (Bits) {
      goto LABEL_140;
    }
    if (HIDWORD(v29))
    {
      BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 3uLL, &v28);
      if (Bits) {
        goto LABEL_140;
      }
      BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 2uLL, &v28);
      if (Bits) {
        goto LABEL_140;
      }
      BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 3uLL, &v28);
      if (Bits) {
        goto LABEL_140;
      }
    }
    if (v29)
    {
      BitCGColorSpaceRef s = CMPhotoBitStreamRead_leb128((uint64_t)v31, &v27);
      if (Bits) {
        goto LABEL_140;
      }
    }
    BitCGColorSpaceRef s = CMPhotoBitStreamReadGetBitsRead((uint64_t)v31, &v26);
    if (Bits) {
      goto LABEL_140;
    }
    if ((v26 & 7) != 0) {
      goto LABEL_165;
    }
    int v25 = 0;
    CFAllocatorRef v7 = a2 + 4;
    BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 3uLL, a2 + 4);
    if (Bits) {
      goto LABEL_140;
    }
    if (*v7 > 2)
    {
LABEL_165:
      uint64_t v13 = 4294950194;
      goto LABEL_141;
    }
    BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v28);
    if (Bits || (BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v25), Bits))
    {
LABEL_140:
      uint64_t v13 = Bits;
      goto LABEL_141;
    }
    int v24 = 0;
    uint64_t v23 = 0;
    int v22 = 0;
    if (!v25)
    {
      BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v24);
      if (Bits) {
        goto LABEL_140;
      }
      if (v24)
      {
        LODWORD(v35) = 0;
        BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 0x20uLL, &v28);
        if (Bits) {
          goto LABEL_140;
        }
        BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 0x20uLL, &v28);
        if (Bits) {
          goto LABEL_140;
        }
        BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v35);
        if (Bits) {
          goto LABEL_140;
        }
        if (v35)
        {
          BitCGColorSpaceRef s = CMPhotoBitStreamReadUVLC((uint64_t)v31, &v28);
          if (Bits) {
            goto LABEL_140;
          }
        }
        BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, (_DWORD *)&v23 + 1);
        if (Bits) {
          goto LABEL_140;
        }
        if (HIDWORD(v23))
        {
          BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 5uLL, &v22);
          if (Bits) {
            goto LABEL_140;
          }
          BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 0x20uLL, &v28);
          if (Bits) {
            goto LABEL_140;
          }
          BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 5uLL, &v28);
          if (Bits) {
            goto LABEL_140;
          }
          BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 5uLL, &v28);
          if (Bits) {
            goto LABEL_140;
          }
        }
      }
      else
      {
        HIDWORD(v23) = 0;
      }
      BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, a2 + 13);
      if (!Bits)
      {
        BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 5uLL, &v23);
        if (!Bits)
        {
          int v8 = -1;
          while (1)
          {
            LODWORD(v35) = 0;
            BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 0xCuLL, &v28);
            if (Bits) {
              break;
            }
            BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 5uLL, &v35);
            if (Bits) {
              break;
            }
            unsigned int v9 = v35;
            if (v8 == -1) {
              a2[5] = v35;
            }
            if (v9 >= 8)
            {
              BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v28);
              if (Bits) {
                goto LABEL_140;
              }
              if (v8 == -1) {
                a2[6] = v28;
              }
            }
            if (HIDWORD(v23))
            {
              LODWORD(v34) = 0;
              BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v34);
              if (Bits) {
                break;
              }
              if (v34)
              {
                BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, (v22 + 1), &v28);
                if (Bits) {
                  break;
                }
                BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, (v22 + 1), &v28);
                if (Bits) {
                  break;
                }
                BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v28);
                if (Bits) {
                  break;
                }
              }
            }
            if (a2[13])
            {
              LODWORD(v34) = 0;
              BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v34);
              if (Bits) {
                break;
              }
              if (v34)
              {
                BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 4uLL, &v28);
                if (Bits) {
                  break;
                }
              }
            }
            if (++v8 >= v23) {
              goto LABEL_77;
            }
          }
        }
      }
      goto LABEL_140;
    }
    uint64_t v23 = 0;
    a2[13] = 0;
    a2[6] = 0;
    BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 5uLL, a2 + 5);
    if (Bits) {
      goto LABEL_140;
    }
LABEL_77:
    int v20 = 0;
    int v21 = 0;
    BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 4uLL, &v21);
    if (Bits) {
      goto LABEL_140;
    }
    BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 4uLL, &v20);
    if (Bits) {
      goto LABEL_140;
    }
    BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, (v21 + 1), &v28);
    if (Bits) {
      goto LABEL_140;
    }
    BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, (v20 + 1), &v28);
    if (Bits) {
      goto LABEL_140;
    }
    int v19 = 0;
    if (!v25)
    {
      BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v19);
      if (Bits) {
        goto LABEL_140;
      }
      if (v19)
      {
        BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 4uLL, &v28);
        if (Bits) {
          goto LABEL_140;
        }
        BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 3uLL, &v28);
        if (Bits) {
          goto LABEL_140;
        }
      }
    }
    BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v28);
    if (Bits) {
      goto LABEL_140;
    }
    BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v28);
    if (Bits) {
      goto LABEL_140;
    }
    BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v28);
    if (Bits) {
      goto LABEL_140;
    }
    uint64_t v18 = 0;
    if (v25)
    {
      LODWORD(v18) = 2;
      goto LABEL_109;
    }
    BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v28);
    if (Bits) {
      goto LABEL_140;
    }
    BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v28);
    if (Bits) {
      goto LABEL_140;
    }
    BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v28);
    if (Bits) {
      goto LABEL_140;
    }
    BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v28);
    if (Bits) {
      goto LABEL_140;
    }
    BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, (_DWORD *)&v18 + 1);
    if (Bits) {
      goto LABEL_140;
    }
    if (HIDWORD(v18))
    {
      BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v28);
      if (Bits) {
        goto LABEL_140;
      }
      BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v28);
      if (Bits) {
        goto LABEL_140;
      }
    }
    LODWORD(v35) = 0;
    BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v35);
    if (Bits) {
      goto LABEL_140;
    }
    if (v35)
    {
      LODWORD(v18) = 2;
    }
    else
    {
      BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v18);
      if (Bits) {
        goto LABEL_140;
      }
      if (!v18) {
        goto LABEL_107;
      }
    }
    LODWORD(v34) = 0;
    BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v34);
    if (Bits) {
      goto LABEL_140;
    }
    if (!v34)
    {
      BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v28);
      if (Bits) {
        goto LABEL_140;
      }
    }
LABEL_107:
    if (HIDWORD(v18))
    {
      BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 3uLL, &v28);
      if (Bits) {
        goto LABEL_140;
      }
    }
LABEL_109:
    BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v28);
    if (Bits) {
      goto LABEL_140;
    }
    BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v28);
    if (Bits) {
      goto LABEL_140;
    }
    BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v28);
    if (Bits) {
      goto LABEL_140;
    }
    CFDataRef v10 = a2 + 7;
    BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, a2 + 7);
    if (Bits) {
      goto LABEL_140;
    }
    a2[8] = 0;
    unsigned int v11 = a2[4];
    if (v11 == 2)
    {
      if (*v10)
      {
        BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, a2 + 8);
        if (Bits) {
          goto LABEL_140;
        }
        if (a2[8]) {
          int v12 = 12;
        }
        else {
          int v12 = 10;
        }
        unsigned int v11 = *v7;
LABEL_124:
        if (v11 == 1)
        {
          a2[9] = 0;
          goto LABEL_128;
        }
LABEL_127:
        BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, a2 + 9);
        if (Bits) {
          goto LABEL_140;
        }
LABEL_128:
        int v17 = 0;
        BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v17);
        if (Bits) {
          goto LABEL_140;
        }
        if (v17)
        {
          BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 8uLL, a2 + 1);
          if (Bits) {
            goto LABEL_140;
          }
          BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 8uLL, a2 + 2);
          if (Bits) {
            goto LABEL_140;
          }
          BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 8uLL, v4);
          if (Bits) {
            goto LABEL_140;
          }
        }
        else
        {
          *uint64_t v6 = 0x200000002;
          *int v4 = 2;
        }
        a2[12] = 0;
        if (a2[9])
        {
          BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, a2);
          if (Bits) {
            goto LABEL_140;
          }
          *((void *)a2 + 5) = 0x100000001;
          goto LABEL_138;
        }
        if (*(_DWORD *)v6 == 1 && a2[2] == 13 && !*v4)
        {
          *a2 = 1;
        }
        else
        {
          BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, a2);
          if (Bits) {
            goto LABEL_140;
          }
          if (*v7 != 1)
          {
            if (*v7)
            {
              if (v12 == 12)
              {
                BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, a2 + 10);
                if (Bits) {
                  goto LABEL_140;
                }
                uint64_t v16 = a2 + 11;
                if (!a2[10])
                {
                  *uint64_t v16 = 0;
                  goto LABEL_138;
                }
                BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, v16);
                if (Bits) {
                  goto LABEL_140;
                }
                if (!a2[10]) {
                  goto LABEL_138;
                }
LABEL_159:
                if (a2[11])
                {
                  BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, a2 + 12);
                  if (Bits) {
                    goto LABEL_140;
                  }
                }
LABEL_138:
                BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v28);
                if (!Bits) {
                  BitCGColorSpaceRef s = CMPhotoBitStreamReadBits((uint64_t)v31, 1uLL, &v28);
                }
                goto LABEL_140;
              }
              int v15 = 0;
            }
            else
            {
              int v15 = 1;
            }
            a2[10] = 1;
            a2[11] = v15;
            goto LABEL_159;
          }
        }
        *((void *)a2 + 5) = 0;
        goto LABEL_138;
      }
    }
    else
    {
      if (v11 > 2)
      {
        int v12 = 0;
        goto LABEL_127;
      }
      if (*v10)
      {
        int v12 = 10;
        goto LABEL_124;
      }
    }
    int v12 = 8;
    goto LABEL_124;
  }
  uint64_t v13 = 4294950306;
LABEL_141:
  if (v32) {
    CFRelease(v32);
  }
  return v13;
}

uint64_t CMPhotoGetSlimPixelFormatFromFormatDescription(CMFormatDescriptionRef desc, _DWORD *a2)
{
  uint64_t result = 4294950306;
  if (desc && a2)
  {
    if (CMFormatDescriptionGetMediaSubType(desc) != 1936484717) {
      return 0;
    }
    CFDictionaryRef Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension(desc, (CFStringRef)*MEMORY[0x1E4F1EE20]);
    if (!Extension) {
      return 4294950303;
    }
    uint64_t result = (uint64_t)CFDictionaryGetValue(Extension, @"slmC");
    if (result)
    {
      CFDataRef v6 = (const __CFData *)result;
      unint64_t Length = CFDataGetLength((CFDataRef)result);
      BytePtr = CFDataGetBytePtr(v6);
      if (Length >= 4 && BytePtr != 0)
      {
        unsigned int v10 = *(_DWORD *)BytePtr;
        int v11 = 0;
        int v12 = 6;
        uint64_t result = Slim_GetPixelBufferInfoFromVersion(v10, &v12, &v11, 0, 0, 0);
        if (!result) {
          *a2 = v11;
        }
        return result;
      }
      return 0;
    }
  }
  return result;
}

uint64_t CMPhotoCopyImageBitDepthFromFormatDescription(const opaqueCMFormatDescription *a1, CFMutableArrayRef *a2)
{
  __int16 v12 = 0;
  int v11 = 0;
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (!Mutable) {
    return 4294950305;
  }
  CFMutableArrayRef v5 = Mutable;
  uint64_t InfoFromFormatDescription = CMPhotoGetInfoFromFormatDescription(a1, 0, 0, 0, 0, &v11, (char *)&v12 + 1, (char *)&v12, 0, 0, 0, 0);
  if (InfoFromFormatDescription) {
    goto LABEL_7;
  }
  CMFormatDescriptionGetMediaSubType(a1);
  if (!v11 && HIBYTE(v12) == 255 && v12 == 255)
  {
    uint64_t InfoFromFormatDescription = FigSignalErrorAt();
LABEL_7:
    uint64_t v7 = InfoFromFormatDescription;
LABEL_15:
    CFRelease(v5);
    return v7;
  }
  uint64_t InfoFromFormatDescription = FigCFArrayAppendInt();
  if (InfoFromFormatDescription) {
    goto LABEL_7;
  }
  if ((v11 - 1) <= 4)
  {
    char v8 = 1;
    do
    {
      char v9 = v8;
      uint64_t InfoFromFormatDescription = FigCFArrayAppendInt();
      if (InfoFromFormatDescription) {
        goto LABEL_7;
      }
      char v8 = 0;
    }
    while ((v9 & 1) != 0);
  }
  uint64_t v7 = 0;
  if (!a2) {
    goto LABEL_15;
  }
  *a2 = v5;
  return v7;
}

uint64_t CMPhotoCompressionSessionGetTypeID()
{
  return sCMPhotoCompressionSessionTypeID;
}

uint64_t RegisterCMPhotoCompressionSession()
{
  sCMPhotoCompressionSessionClasCGColorSpaceRef s = 0;
  unk_1EB3D2170 = "CMPhotoCompressionSession";
  qword_1EB3D2178 = (uint64_t)CMPhotoCompressionSessionClass_Init;
  unk_1EB3D2180 = 0;
  qword_1EB3D2190 = 0;
  unk_1EB3D2198 = 0;
  qword_1EB3D2188 = (uint64_t)CMPhotoCompressionSessionClass_Finalize;
  qword_1EB3D21A0 = (uint64_t)CMPhotoCompressionSessionClass_CopyFormattingDesc;
  unk_1EB3D21A8 = 0;
  uint64_t result = _CFRuntimeRegisterClass();
  sCMPhotoCompressionSessionCFTypeID TypeID = result;
  return result;
}

uint64_t CMPhotoCompressionSessionCloseContainer(uint64_t a1)
{
  if (!a1) {
    return 4294950306;
  }
  if (!*(unsigned char *)(a1 + 72)) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 16)) {
    return 4294950195;
  }
  uint64_t v1 = *(void *)(a1 + 80);
  *(unsigned char *)(a1 + 72) = 0;
  if (!v1) {
    return 4294950195;
  }
  uint64_t v2 = *(uint64_t (**)(void))(v1 + 24);
  if (v2) {
    return v2();
  }
  else {
    return 4294950302;
  }
}

uint64_t CMPhotoCompressionSessionOpenExistingContainer(uint64_t a1, const __CFDictionary *a2, const void *a3, uint64_t a4)
{
  CFTypeRef cf = 0;
  uint64_t v8 = _copyByteStreamAndSetVTableFromExistingContainer(a1, a2, a3, &cf, 0);
  if (v8)
  {
    uint64_t v11 = v8;
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 80);
    if (v9)
    {
      unsigned int v10 = *(uint64_t (**)(uint64_t, const __CFDictionary *, CFTypeRef, const void *, uint64_t))(v9 + 8);
      if (v10)
      {
        uint64_t v11 = v10(a1, a2, cf, a3, a4);
        if (!v11) {
          *(unsigned char *)(a1 + 72) = 1;
        }
      }
      else
      {
        uint64_t v11 = 4294950302;
      }
    }
    else
    {
      uint64_t v11 = 4294950195;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  return v11;
}

uint64_t _copyByteStreamAndSetVTableFromExistingContainer(uint64_t a1, const __CFDictionary *a2, CFTypeRef cf, CFTypeRef *a4, int *a5)
{
  uint64_t v21 = 0;
  CFTypeRef cfa = 0;
  int v20 = 0;
  if (!a1) {
    goto LABEL_29;
  }
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v17 = 4294950195;
    goto LABEL_25;
  }
  if (!cf)
  {
LABEL_29:
    uint64_t v17 = 4294950306;
    goto LABEL_25;
  }
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v10 = CMPhotoCompressionSessionCloseContainer(a1);
    if (v10) {
      goto LABEL_28;
    }
  }
  CFTypeID v11 = CFGetTypeID(cf);
  if (v11 == CFURLGetTypeID())
  {
    int v19 = 0;
    CMPhotoCFDictionaryGetIntIfPresent(a2, @"BackingType", &v19);
    if (v19 == 3 && (!CFDictionaryGetValue(a2, @"BackingFileURL") || FigCFEqual()))
    {
      uint64_t v10 = FigSignalErrorAt();
LABEL_28:
      uint64_t v17 = v10;
      goto LABEL_25;
    }
    goto LABEL_13;
  }
  CFTypeID v12 = CFGetTypeID(cf);
  if (v12 != IOSurfaceGetTypeID())
  {
LABEL_13:
    uint64_t v13 = 0;
    goto LABEL_14;
  }
  CMPhotoCFDictionaryGetSizeIfPresent(a2, @"BackingIOSurfaceSourceSize", &v21);
  uint64_t v13 = v21;
LABEL_14:
  uint64_t v10 = CMPhotoByteStreamCreateFromSource((const __CFData *)cf, v13, 0, 0, &cfa, 0);
  if (v10) {
    goto LABEL_28;
  }
  uint64_t v10 = CMPhotoImageContainerFormatDetectFromBytestream((uint64_t)cfa, &v20);
  if (v10) {
    goto LABEL_28;
  }
  int v14 = v20;
  if (v20 == 1)
  {
    int v15 = (uint64_t (***)())(a1 + 80);
    uint64_t v16 = (uint64_t (**)())&CMPhotoCompressionSessionVTableJFIF;
    goto LABEL_20;
  }
  if (!v20)
  {
    int v15 = (uint64_t (***)())(a1 + 80);
    uint64_t v16 = CMPhotoCompressionSessionVTableHEIF;
LABEL_20:
    UInt8 *v15 = v16;
  }
  if (a4)
  {
    *a4 = cfa;
    CFTypeRef cfa = 0;
  }
  uint64_t v17 = 0;
  if (a5) {
    *a5 = v14;
  }
LABEL_25:
  if (cfa) {
    CFRelease(cfa);
  }
  return v17;
}

uint64_t CMPhotoCompressionSessionOpenExistingContainerForModificationF(uint64_t a1, const __CFDictionary *a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v18 = 0;
  CFTypeRef cf = 0;
  uint64_t v12 = _copyByteStreamAndSetVTableFromExistingContainer(a1, a2, a3, &cf, &v18);
  if (v12)
  {
    uint64_t v15 = v12;
  }
  else
  {
    uint64_t v13 = *(void *)(a1 + 80);
    if (v13)
    {
      int v14 = *(uint64_t (**)(uint64_t, const __CFDictionary *, CFTypeRef, const void *, uint64_t, uint64_t, uint64_t))(v13 + 16);
      if (v14)
      {
        uint64_t v15 = v14(a1, a2, cf, a3, a4, a5, a6);
        if (!v15) {
          *(unsigned char *)(a1 + 72) = 1;
        }
      }
      else
      {
        uint64_t v15 = 4294950302;
      }
    }
    else
    {
      uint64_t v15 = 4294950195;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  return v15;
}

uint64_t CMPhotoCompressionSessionOpenExistingContainerForModification(uint64_t a1, const __CFDictionary *a2, const void *a3, uint64_t a4, uint64_t a5)
{
  return CMPhotoCompressionSessionOpenExistingContainerForModificationF(a1, a2, a3, a4, (uint64_t)_callbackModificationHandlerWrapper, a5);
}

uint64_t _callbackModificationHandlerWrapper(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

BOOL CMPhotoCompressionSessionIsContainerOpen(BOOL result)
{
  if (result) {
    return !*(unsigned char *)(result + 16) && *(unsigned char *)(result + 72) != 0;
  }
  return result;
}

uint64_t CMPhotoCompressionSessionAddImageAsync(uint64_t a1, const __CFDictionary *a2, opaqueCMSampleBuffer *a3, CFIndex *a4, uint64_t a5)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t result = _verifyMainImageOptions(a1, a2, (uint64_t)a3);
  if (!result)
  {
    if (*(unsigned char *)(a1 + 72))
    {
      uint64_t v11 = *(void *)(a1 + 80);
      if (!v11) {
        return 4294950195;
      }
      uint64_t v12 = *(uint64_t (**)(uint64_t, const __CFDictionary *, opaqueCMSampleBuffer *, CFIndex *, uint64_t))(v11 + 216);
      if (v12)
      {
        return v12(a1, a2, a3, a4, a5);
      }
      return 4294950302;
    }
    uint64_t v13 = (uint64_t (*)(uint64_t, const __CFDictionary *, opaqueCMSampleBuffer *, CFIndex *, uint64_t))off_1EB3D1930;
    if (!off_1EB3D1930) {
      return 4294950302;
    }
    return v13(a1, a2, a3, a4, a5);
  }
  return result;
}

uint64_t CMPhotoCompressionSessionAddCompressedImage(uint64_t a1, CFDictionaryRef theDict, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294950306;
  }
  if (theDict)
  {
    CFDataRef Value = CFDictionaryGetValue(theDict, @"DryRun");
    if (a3 && !Value)
    {
LABEL_5:
      if (*(unsigned char *)(a1 + 16)) {
        return 4294950195;
      }
      if (!*(unsigned char *)(a1 + 72)) {
        return 4294950195;
      }
      uint64_t v9 = *(void *)(a1 + 80);
      if (!v9) {
        return 4294950195;
      }
      uint64_t v10 = *(uint64_t (**)(uint64_t, CFDictionaryRef, uint64_t, uint64_t))(v9 + 72);
      if (!v10) {
        return 4294950302;
      }
      return v10(a1, theDict, a3, a4);
    }
  }
  else if (a3)
  {
    goto LABEL_5;
  }
  return FigSignalErrorAt();
}

uint64_t CMPhotoCompressionSessionAddCompressedThumbnail(uint64_t a1, uint64_t a2, CFDictionaryRef theDict, uint64_t a4)
{
  if (!a1) {
    return 4294950306;
  }
  if (theDict)
  {
    CFDataRef Value = CFDictionaryGetValue(theDict, @"DryRun");
    if (a4 && !Value)
    {
LABEL_5:
      if (*(unsigned char *)(a1 + 16)) {
        return 4294950195;
      }
      if (!*(unsigned char *)(a1 + 72)) {
        return 4294950195;
      }
      uint64_t v9 = *(void *)(a1 + 80);
      if (!v9) {
        return 4294950195;
      }
      uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, CFDictionaryRef, uint64_t))(v9 + 80);
      if (!v10) {
        return 4294950302;
      }
      return v10(a1, a2, theDict, a4);
    }
  }
  else if (a4)
  {
    goto LABEL_5;
  }
  return FigSignalErrorAt();
}

uint64_t CMPhotoCompressionSessionAddCompressedAuxiliaryImage(uint64_t a1, CFIndex a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5, const void *a6, CFDictionaryRef theDict, const void *a8, uint64_t a9)
{
  if (!a1) {
    return 4294950306;
  }
  if (!theDict)
  {
    if (!a8) {
      goto LABEL_21;
    }
    goto LABEL_9;
  }
  CFDataRef Value = CFDictionaryGetValue(theDict, @"DryRun");
  if ((a8 != 0) != (Value == 0))
  {
LABEL_21:
    return FigSignalErrorAt();
  }
  if (!Value)
  {
LABEL_9:
    if (*(unsigned char *)(a1 + 16) || !*(unsigned char *)(a1 + 72)) {
      return 4294950195;
    }
    goto LABEL_11;
  }
  CFTypeID v18 = CFGetTypeID(Value);
  if (v18 != CMFormatDescriptionGetTypeID()) {
    goto LABEL_21;
  }
  if (*(unsigned char *)(a1 + 16)) {
    return 4294950195;
  }
LABEL_11:
  if ((a3 - 1) >= 5
    || a3 != 4 && theDict && CFDictionaryContainsKey(theDict, @"AuxiliaryImageCustomTypeURN"))
  {
    goto LABEL_21;
  }
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v19 = *(void *)(a1 + 80);
    if (!v19) {
      return 4294950195;
    }
    int v20 = *(uint64_t (**)(uint64_t, CFIndex, uint64_t, const void *, uint64_t, const __CFDictionary *, CFDictionaryRef, const void *, uint64_t))(v19 + 88);
    if (v20)
    {
      return v20(a1, a2, a3, a6, a4, a5, theDict, a8, a9);
    }
    return 4294950302;
  }
  int v22 = (uint64_t (*)(uint64_t, CFIndex, int, const void *, uint64_t, const __CFDictionary *, const __CFDictionary *, const void *))off_1EB3D18B0[0];
  if (!off_1EB3D18B0[0]) {
    return 4294950302;
  }
  return v22(a1, a2, a3, a6, a4, a5, theDict, a8);
}

uint64_t CMPhotoCompressionSessionAddCompressedMovie(uint64_t a1, uint64_t a2, const void *a3)
{
  if (!a1) {
    return 4294950306;
  }
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v3 = *(void *)(a1 + 80);
    if (!v3) {
      return 4294950195;
    }
    int v4 = *(uint64_t (**)(void))(v3 + 96);
    if (v4) {
      return v4();
    }
  }
  else if (off_1EB3D18B8[0])
  {
    return ((uint64_t (*)(uint64_t, uint64_t, const void *))off_1EB3D18B8[0])(a1, a2, a3);
  }
  return 4294950302;
}

uint64_t CMPhotoCompressionSessionAddThumbnail(uint64_t a1, CFIndex a2, CFDictionaryRef theDict, opaqueCMSampleBuffer *a4)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t result = _verifyMainImageOptions(a1, theDict, (uint64_t)a4);
  if (!result)
  {
    if (*(unsigned char *)(a1 + 72))
    {
      uint64_t v9 = *(void *)(a1 + 80);
      if (!v9) {
        return 4294950195;
      }
      uint64_t v10 = *(uint64_t (**)(uint64_t, CFIndex, CFDictionaryRef, opaqueCMSampleBuffer *))(v9 + 56);
      if (v10)
      {
        return v10(a1, a2, theDict, a4);
      }
      return 4294950302;
    }
    uint64_t v11 = (uint64_t (*)(uint64_t, CFIndex, const __CFDictionary *, opaqueCMSampleBuffer *))off_1EB3D1890;
    if (!off_1EB3D1890) {
      return 4294950302;
    }
    return v11(a1, a2, theDict, a4);
  }
  return result;
}

uint64_t CMPhotoCompressionSessionAddThumbnailAsync(uint64_t a1, CFIndex a2, CFDictionaryRef theDict, opaqueCMSampleBuffer *a4, uint64_t a5)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t result = _verifyMainImageOptions(a1, theDict, (uint64_t)a4);
  if (!result)
  {
    if (*(unsigned char *)(a1 + 72))
    {
      uint64_t v11 = *(void *)(a1 + 80);
      if (!v11) {
        return 4294950195;
      }
      uint64_t v12 = *(uint64_t (**)(uint64_t, CFIndex, CFDictionaryRef, opaqueCMSampleBuffer *, uint64_t))(v11 + 232);
      if (v12)
      {
        return v12(a1, a2, theDict, a4, a5);
      }
      return 4294950302;
    }
    uint64_t v13 = (uint64_t (*)(uint64_t, CFIndex, const __CFDictionary *, opaqueCMSampleBuffer *, uint64_t))off_1EB3D1940;
    if (!off_1EB3D1940) {
      return 4294950302;
    }
    return v13(a1, a2, theDict, a4, a5);
  }
  return result;
}

uint64_t CMPhotoCompressionSessionAddAuxiliaryImage(uint64_t a1, CFIndex a2, uint64_t a3, uint64_t a4, CFDictionaryRef theDict, opaqueCMSampleBuffer *a6, CFIndex *a7)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t result = _verifyAuxiliaryOptions(a1, a3, theDict, (uint64_t)a6);
  if (!result)
  {
    if (*(unsigned char *)(a1 + 72))
    {
      uint64_t v15 = *(void *)(a1 + 80);
      if (!v15) {
        return 4294950195;
      }
      uint64_t v16 = *(uint64_t (**)(uint64_t, CFIndex, uint64_t, uint64_t, CFDictionaryRef, opaqueCMSampleBuffer *, CFIndex *))(v15 + 64);
      if (v16)
      {
        return v16(a1, a2, a3, a4, theDict, a6, a7);
      }
      return 4294950302;
    }
    uint64_t v17 = (uint64_t (*)(uint64_t, CFIndex, unsigned int, uint64_t, const __CFDictionary *, opaqueCMSampleBuffer *, CFIndex *))off_1EB3D1898;
    if (!off_1EB3D1898) {
      return 4294950302;
    }
    return v17(a1, a2, a3, a4, theDict, a6, a7);
  }
  return result;
}

uint64_t _verifyAuxiliaryOptions(uint64_t a1, int a2, CFDictionaryRef theDict, uint64_t a4)
{
  if (!theDict)
  {
    if (!a4) {
      goto LABEL_14;
    }
    goto LABEL_8;
  }
  CFDataRef Value = CFDictionaryGetValue(theDict, @"DryRun");
  if ((a4 != 0) != (Value == 0)) {
    goto LABEL_14;
  }
  if (!Value)
  {
LABEL_8:
    if (*(unsigned char *)(a1 + 16) || !*(unsigned char *)(a1 + 72)) {
      return 4294950195;
    }
    goto LABEL_10;
  }
  CFTypeID v9 = CFGetTypeID(Value);
  if (v9 == CMFormatDescriptionGetTypeID())
  {
    if (*(unsigned char *)(a1 + 16)) {
      return 4294950195;
    }
LABEL_10:
    if ((a2 - 1) <= 4)
    {
      uint64_t result = 0;
      if (a2 == 4) {
        return result;
      }
      if (!theDict) {
        return result;
      }
      uint64_t result = CFDictionaryContainsKey(theDict, @"AuxiliaryImageCustomTypeURN");
      if (!result) {
        return result;
      }
    }
  }
LABEL_14:
  return FigSignalErrorAt();
}

uint64_t CMPhotoCompressionSessionAddAuxiliaryImageMetadata(uint64_t a1, int a2, uint64_t a3, uint64_t a4, CFTypeRef cf)
{
  if (!a1) {
    return 4294950306;
  }
  if (cf && (CFTypeID v9 = CFGetTypeID(cf), v9 != CFDictionaryGetTypeID()))
  {
    return FigSignalErrorAt();
  }
  else if (!*(unsigned char *)(a1 + 16) && *(unsigned char *)(a1 + 72) && (uint64_t v10 = *(void *)(a1 + 80)) != 0)
  {
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFTypeRef))(v10 + 144);
    if (v11)
    {
      return v11(a1, a3, a4, cf);
    }
    else
    {
      return 4294950302;
    }
  }
  else
  {
    return 4294950195;
  }
}

uint64_t CMPhotoCompressionSessionAddAuxiliaryImageAsync(uint64_t a1, CFIndex a2, uint64_t a3, uint64_t a4, CFDictionaryRef theDict, opaqueCMSampleBuffer *a6, CFIndex *a7, uint64_t a8)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t result = _verifyAuxiliaryOptions(a1, a3, theDict, (uint64_t)a6);
  if (!result)
  {
    if (*(unsigned char *)(a1 + 72))
    {
      uint64_t v17 = *(void *)(a1 + 80);
      if (!v17) {
        return 4294950195;
      }
      CFTypeID v18 = *(uint64_t (**)(uint64_t, CFIndex, uint64_t, uint64_t, CFDictionaryRef, opaqueCMSampleBuffer *, CFIndex *, uint64_t))(v17 + 224);
      if (v18)
      {
        return v18(a1, a2, a3, a4, theDict, a6, a7, a8);
      }
      return 4294950302;
    }
    uint64_t v19 = (uint64_t (*)(uint64_t, CFIndex, unsigned int, uint64_t, const __CFDictionary *, opaqueCMSampleBuffer *, CFIndex *, uint64_t))off_1EB3D1938;
    if (!off_1EB3D1938) {
      return 4294950302;
    }
    return v19(a1, a2, a3, a4, theDict, a6, a7, a8);
  }
  return result;
}

uint64_t CMPhotoCompressionSessionAddAuxiliaryImageFromDictionaryRepresentation(uint64_t a1, CFIndex a2, uint64_t a3, const __CFDictionary *a4, CFDictionaryRef theDict, CFIndex *a6)
{
  CFTypeRef cf = 0;
  uint64_t v6 = 4294950306;
  if (!a1 || !theDict) {
    return v6;
  }
  CFDataRef Value = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F2F380]);
  uint64_t v14 = (uint64_t)Value;
  if (!Value || (CFTypeID v15 = CFGetTypeID(Value), v15 == CGImageMetadataGetTypeID()))
  {
    uint64_t PixelbufferFromAuxiliaryDataDictionary = CMPhotoCreatePixelbufferFromAuxiliaryDataDictionary(theDict, 0, (CVPixelBufferRef *)&cf);
    CFTypeRef v17 = cf;
    if (PixelbufferFromAuxiliaryDataDictionary)
    {
      uint64_t v6 = PixelbufferFromAuxiliaryDataDictionary;
      if (!cf) {
        return v6;
      }
    }
    else
    {
      uint64_t v6 = CMPhotoCompressionSessionAddAuxiliaryImage(a1, a2, a3, v14, a4, (opaqueCMSampleBuffer *)cf, a6);
      CFTypeRef v17 = cf;
      if (!cf) {
        return v6;
      }
    }
    CFRelease(v17);
    return v6;
  }
  return FigSignalErrorAt();
}

uint64_t CMPhotoCompressionSessionAddExif (uint64_t a1, uint64_t a2, uint64_t a3, CFDataRef theData)
{
  if (!a1) {
    return 4294950306;
  }
  if (*(unsigned char *)(a1 + 16) || !*(unsigned char *)(a1 + 72)) {
    return 4294950195;
  }
  if (theData)
  {
    unint64_t Length = CFDataGetLength(theData);
    if (CFDataGetBytePtr(theData))
    {
      if (Length > 4)
      {
        uint64_t v9 = *(void *)(a1 + 80);
        if (v9)
        {
          uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFDataRef))(v9 + 104);
          if (!v10) {
            return 4294950302;
          }
          return v10(a1, a2, a3, theData);
        }
        return 4294950195;
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t CMPhotoCompressionSessionAddXMP(unsigned char *cf, uint64_t a2, uint64_t a3, const __CFString *a4)
{
  if (!cf) {
    return 4294950306;
  }
  if (cf[16] || !cf[72]) {
    return 4294950195;
  }
  if (a4)
  {
    CFAllocatorRef v8 = CFGetAllocator(cf);
    CFTypeID v9 = CFGetTypeID(a4);
    if (v9 == CFDataGetTypeID())
    {
      ExternalRepresentatiouint64_t n = (const __CFData *)CFRetain(a4);
      goto LABEL_9;
    }
    if (v9 == CFStringGetTypeID())
    {
      ExternalRepresentatiouint64_t n = CFStringCreateExternalRepresentation(v8, a4, 0x8000100u, 0);
      if (ExternalRepresentation)
      {
LABEL_9:
        CFIndex Length = CFDataGetLength(ExternalRepresentation);
        if (CFDataGetBytePtr(ExternalRepresentation) && Length)
        {
          uint64_t v12 = *((void *)cf + 10);
          if (v12)
          {
            uint64_t v13 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, const __CFData *))(v12 + 112);
            if (v13)
            {
              uint64_t v14 = v13(cf, a2, a3, ExternalRepresentation);
              goto LABEL_14;
            }
            uint64_t v15 = 4294950302;
            if (!ExternalRepresentation) {
              return v15;
            }
          }
          else
          {
            uint64_t v15 = 4294950195;
            if (!ExternalRepresentation) {
              return v15;
            }
          }
LABEL_22:
          CFRelease(ExternalRepresentation);
          return v15;
        }
        uint64_t v14 = FigSignalErrorAt();
LABEL_14:
        uint64_t v15 = v14;
        if (!ExternalRepresentation) {
          return v15;
        }
        goto LABEL_22;
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t CMPhotoCompressionSessionAddDebugMetadata(uint64_t a1, uint64_t a2, uint64_t a3, CFDataRef theData)
{
  if (!a1) {
    return 4294950306;
  }
  if (*(unsigned char *)(a1 + 16) || !*(unsigned char *)(a1 + 72)) {
    return 4294950195;
  }
  if (theData)
  {
    CFIndex Length = CFDataGetLength(theData);
    if (CFDataGetBytePtr(theData))
    {
      if (Length)
      {
        uint64_t v9 = *(void *)(a1 + 80);
        if (v9)
        {
          uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFDataRef))(v9 + 120);
          if (!v10) {
            return 4294950302;
          }
          return v10(a1, a2, a3, theData);
        }
        return 4294950195;
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t CMPhotoCompressionSessionAddCustomMetadata(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef cf)
{
  if (!a1) {
    return 4294950306;
  }
  if (*(unsigned char *)(a1 + 16) || !*(unsigned char *)(a1 + 72)) {
    return 4294950195;
  }
  if (cf)
  {
    CFTypeID v8 = CFGetTypeID(cf);
    if (v8 == CFDictionaryGetTypeID() && (unint64_t)CFDictionaryGetCount((CFDictionaryRef)cf) > 1)
    {
      uint64_t v9 = *(void *)(a1 + 80);
      if (v9)
      {
        uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFTypeRef))(v9 + 128);
        if (!v10) {
          return 4294950302;
        }
        return v10(a1, a2, a3, cf);
      }
      return 4294950195;
    }
  }
  return FigSignalErrorAt();
}

uint64_t CMPhotoCompressionSessionAddStereoMetadata()
{
  return FigSignalErrorAt();
}

uint64_t CMPhotoCompressionSessionAddMetadataFromImageProperties(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 4294950306;
  }
  if (*(unsigned char *)(a1 + 16) || !*(unsigned char *)(a1 + 72)) {
    return 4294950195;
  }
  if (!a4) {
    return FigSignalErrorAt();
  }
  uint64_t v4 = *(void *)(a1 + 80);
  if (!v4) {
    return 4294950195;
  }
  CFMutableArrayRef v5 = *(uint64_t (**)(void))(v4 + 136);
  if (v5) {
    return v5();
  }
  else {
    return 4294950302;
  }
}

uint64_t CMPhotoCompressionSessionStartImageSequence(uint64_t a1)
{
  if (!a1) {
    return 4294950306;
  }
  if (*(unsigned char *)(a1 + 16)) {
    return 4294950195;
  }
  if (!*(unsigned char *)(a1 + 72)) {
    return 4294950195;
  }
  uint64_t v1 = *(void *)(a1 + 80);
  if (!v1) {
    return 4294950195;
  }
  uint64_t v2 = *(uint64_t (**)(void))(v1 + 152);
  if (v2) {
    return v2();
  }
  else {
    return 4294950302;
  }
}

uint64_t CMPhotoCompressionSessionAddImageToSequence(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a1) {
    return 4294950306;
  }
  if (*(unsigned char *)(a1 + 16) || !*(unsigned char *)(a1 + 72)) {
    return 4294950195;
  }
  if (a4)
  {
    CFDataRef Value = (const void *)FigCFDictionaryGetValue();
    if ((a5 != 0) == (Value == 0))
    {
      if (!Value || (CFTypeID v13 = CFGetTypeID(Value), v13 == CMFormatDescriptionGetTypeID()))
      {
LABEL_8:
        uint64_t v14 = *(void *)(a1 + 80);
        if (v14)
        {
          uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, uint64_t, uint64_t))(v14 + 160);
          if (!v15) {
            return 4294950302;
          }
          long long v17 = *a3;
          uint64_t v18 = *((void *)a3 + 2);
          return v15(a1, a2, &v17, a4, a5, a6);
        }
        return 4294950195;
      }
    }
  }
  else if (a5)
  {
    goto LABEL_8;
  }
  return FigSignalErrorAt();
}

uint64_t CMPhotoCompressionSessionEndImageSequence(uint64_t a1)
{
  if (!a1) {
    return 4294950306;
  }
  if (*(unsigned char *)(a1 + 16)) {
    return 4294950195;
  }
  if (!*(unsigned char *)(a1 + 72)) {
    return 4294950195;
  }
  uint64_t v1 = *(void *)(a1 + 80);
  if (!v1) {
    return 4294950195;
  }
  uint64_t v2 = *(uint64_t (**)(void))(v1 + 168);
  if (v2) {
    return v2();
  }
  else {
    return 4294950302;
  }
}

uint64_t CMPhotoCompressionSessionAddGroup(uint64_t a1, uint64_t a2, int a3)
{
  if (!a1 || *(unsigned char *)(a1 + 16) || !*(unsigned char *)(a1 + 72) || a3 != 1634497650 && a3 != 1937007986) {
    return FigSignalErrorAt();
  }
  uint64_t v3 = *(void *)(a1 + 80);
  if (!v3) {
    return 4294950195;
  }
  uint64_t v4 = *(uint64_t (**)(void))(v3 + 176);
  if (v4) {
    return v4();
  }
  else {
    return 4294950302;
  }
}

uint64_t CMPhotoCompressionSessionAddGroupProperties(uint64_t a1)
{
  if (!a1 || *(unsigned char *)(a1 + 16) || !*(unsigned char *)(a1 + 72)) {
    return FigSignalErrorAt();
  }
  uint64_t v1 = *(void *)(a1 + 80);
  if (!v1) {
    return 4294950195;
  }
  uint64_t v2 = *(uint64_t (**)(void))(v1 + 184);
  if (v2) {
    return v2();
  }
  else {
    return 4294950302;
  }
}

uint64_t CMPhotoCompressionSessionAddImageHandleToGroup(uint64_t a1)
{
  if (!a1 || *(unsigned char *)(a1 + 16) || !*(unsigned char *)(a1 + 72)) {
    return FigSignalErrorAt();
  }
  uint64_t v1 = *(void *)(a1 + 80);
  if (!v1) {
    return 4294950195;
  }
  uint64_t v2 = *(uint64_t (**)(void))(v1 + 192);
  if (v2) {
    return v2();
  }
  else {
    return 4294950302;
  }
}

uint64_t CMPhotoCompressionSessionAddGroupHandleToGroup(uint64_t a1)
{
  if (!a1 || *(unsigned char *)(a1 + 16) || !*(unsigned char *)(a1 + 72)) {
    return FigSignalErrorAt();
  }
  uint64_t v1 = *(void *)(a1 + 80);
  if (!v1) {
    return 4294950195;
  }
  uint64_t v2 = *(uint64_t (**)(void))(v1 + 200);
  if (v2) {
    return v2();
  }
  else {
    return 4294950302;
  }
}

uint64_t CMPhotoCompressionSessionAddTmapImageOneShot(uint64_t a1)
{
  if (!a1 || *(unsigned char *)(a1 + 16) || !*(unsigned char *)(a1 + 72)) {
    return FigSignalErrorAt();
  }
  uint64_t v1 = *(void *)(a1 + 80);
  if (!v1) {
    return 4294950195;
  }
  uint64_t v2 = *(uint64_t (**)(void))(v1 + 208);
  if (v2) {
    return v2();
  }
  else {
    return 4294950302;
  }
}

uint64_t CMPhotoCompressionSessionReleaseHardwareResources(uint64_t a1)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t result = CMPhotoCodecSessionPoolFlush(*(void *)(a1 + 40), 1);
  if (!result)
  {
    uint64_t result = *(void *)(a1 + 48);
    if (result)
    {
      return CMPhotoCodecSessionPoolFlush(result, 1);
    }
  }
  return result;
}

uint64_t CMPhotoCompressionSessionDiscardCaches(uint64_t a1, uint64_t a2)
{
  return CMPhotoCompressionSessionFlushCachedBuffers(a1, a2, 1);
}

uint64_t CMPhotoCompressionSessionFlushCachedBuffers(uint64_t a1, uint64_t a2, int a3)
{
  if (!a1) {
    return 4294950306;
  }
  if (*(unsigned char *)(a1 + 16)) {
    return 4294950195;
  }
  CMPhotoScaleAndRotateSessionDiscardCaches(*(void *)(a1 + 32), a2);
  BOOL v5 = CMPhotoUsePurgeableIOSurfaces();
  uint64_t v6 = *(void *)(a1 + 24);
  if (a3 || !v5) {
    CMPhotoSurfacePoolFlushCaches(v6, a3);
  }
  else {
    CMPhotoSurfacePoolMarkCachesVolatile(v6, 1);
  }
  uint64_t result = *(unsigned int *)(a1 + 396);
  if (result)
  {
    JPEGDeviceInterface_closeDriverConnection(result);
    uint64_t result = 0;
    *(_DWORD *)(a1 + 396) = 0;
  }
  return result;
}

uint64_t CMPhotoCompressionSessionInvalidate(uint64_t a1)
{
  if (!a1) {
    return 4294950306;
  }
  if (*(unsigned char *)(a1 + 16)) {
    return 0;
  }
  CMPhotoCompressionSessionCloseContainer(a1);
  if (off_1EB3D1880[0]) {
    ((void (*)(uint64_t))off_1EB3D1880[0])(a1);
  }
  if (off_1EB3D1970[0]) {
    ((void (*)(uint64_t))off_1EB3D1970[0])(a1);
  }
  uint64_t result = 0;
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

CFArrayRef CMPhotoCompressionSessionCheckForIllegalModification(const __CFDictionary *a1, const __CFDictionary *a2)
{
  v18[4] = *MEMORY[0x1E4F143B8];
  uint64x2_t value = 0;
  uint64_t v16 = 0;
  v18[0] = @"CodecType";
  v18[1] = @"TileDimensions";
  v18[2] = @"PixelInformation";
  v18[3] = @"ColorSpace";
  CFArrayRef result = (const __CFArray *)CFDictionaryGetValue(a1, @"ImageList");
  if (result)
  {
    CFArrayRef v4 = result;
    CFTypeID v5 = CFGetTypeID(result);
    if (v5 != CFArrayGetTypeID()) {
      goto LABEL_25;
    }
    CFArrayRef result = (const __CFArray *)CFDictionaryGetValue(a2, @"ImageList");
    if (result)
    {
      CFArrayRef v6 = result;
      CFTypeID v7 = CFGetTypeID(result);
      if (v7 == CFArrayGetTypeID())
      {
        if (CFArrayGetCount(v6) < 1)
        {
LABEL_23:
          LOBYTE(result) = 1;
          return (const __CFArray *)result;
        }
        CFIndex v8 = 0;
LABEL_7:
        uint64_t v15 = 0;
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v6, v8);
        if (!CMPhotoCFDictionaryGetIntIfPresent(ValueAtIndex, @"ImageHandle", (char *)&v15 + 4)) {
          goto LABEL_22;
        }
        CFDictionaryRef v10 = (const __CFDictionary *)CFArrayGetValueAtIndex(v4, v8);
        if (!CMPhotoCFDictionaryGetIntIfPresent(v10, @"ImageHandle", &v15)) {
          goto LABEL_22;
        }
        if (v15 != HIDWORD(v15))
        {
          if (CFArrayGetCount(v4) >= 1)
          {
            CFIndex v14 = 0;
            do
            {
              CFDictionaryRef v10 = (const __CFDictionary *)CFArrayGetValueAtIndex(v4, v14);
              if (!CMPhotoCFDictionaryGetIntIfPresent(v10, @"ImageHandle", &v15)) {
                break;
              }
              if (v15 == HIDWORD(v15)) {
                goto LABEL_10;
              }
              ++v14;
            }
            while (v14 < CFArrayGetCount(v4));
          }
          goto LABEL_22;
        }
LABEL_10:
        if (v10)
        {
          uint64_t v11 = 0;
          while (1)
          {
            uint64_t v12 = (const void *)v18[v11];
            int ValueIfPresent = CFDictionaryGetValueIfPresent(v10, v12, (const void **)&value);
            if (ValueIfPresent != CFDictionaryGetValueIfPresent(ValueAtIndex, v12, (const void **)&v16)
              || !FigCFEqual())
            {
              break;
            }
            if (++v11 == 4)
            {
              if (++v8 < CFArrayGetCount(v6)) {
                goto LABEL_7;
              }
              goto LABEL_23;
            }
          }
LABEL_22:
          LOBYTE(result) = FigSignalErrorAt();
          return (const __CFArray *)result;
        }
      }
LABEL_25:
      LOBYTE(result) = 0;
    }
  }
  return (const __CFArray *)result;
}

void CMPhotoCompressionSessionClass_Finalize(void *a1)
{
  CMPhotoCompressionSessionInvalidate((uint64_t)a1);
  uint64_t v2 = (const void *)a1[4];
  if (v2)
  {
    CFRelease(v2);
    a1[4] = 0;
  }
  uint64_t v3 = (const void *)a1[3];
  if (v3)
  {
    CFRelease(v3);
    a1[3] = 0;
  }
  CFArrayRef v4 = (const void *)a1[5];
  if (v4)
  {
    CMPhotoCodecSessionPoolFlush((uint64_t)v4, 1);
    CFArrayRef v4 = (const void *)a1[5];
  }
  if (v4)
  {
    CFRelease(v4);
    a1[5] = 0;
  }
  CFTypeID v5 = (const void *)a1[6];
  if (v5)
  {
    CFRelease(v5);
    a1[6] = 0;
  }
  CFArrayRef v6 = (const void *)a1[7];
  if (v6)
  {
    CFRelease(v6);
    a1[7] = 0;
  }
}

CFTypeRef CMPhotoCompressionSessionClass_CopyFormattingDesc()
{
  return CFRetain(@"[CMPhotoCompressionSession]");
}

void *CMPhotoBitStreamWriteInit(void *result, uint64_t a2, uint64_t a3)
{
  *CFArrayRef result = 0;
  result[1] = 0;
  result[2] = a2;
  result[3] = a3;
  return result;
}

uint64_t CMPhotoBitStreamReadInit(uint64_t result, uint64_t a2, char a3)
{
  *(void *)CFArrayRef result = 0;
  *(_DWORD *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(unsigned char *)(result + 24) = a3;
  *(void *)(result + 32) = a2;
  *(void *)(result + 40) = 0;
  return result;
}

uint64_t CMPhotoBitStreamWriteFlushBytes(unint64_t *a1)
{
  char v19 = 3;
  uint64_t v18 = 0;
  unsigned int v1 = *((_DWORD *)a1 + 2);
  if (v1 < 8) {
    return 0;
  }
  unsigned int v3 = v1 >> 3;
  unint64_t v4 = *a1;
  int v5 = *((_DWORD *)a1 + 3);
  while (1)
  {
    unint64_t v17 = HIBYTE(v4);
    if (v5 != 2) {
      goto LABEL_13;
    }
    if (!(v4 >> 58)) {
      break;
    }
LABEL_12:
    *((_DWORD *)a1 + 3) = 0;
LABEL_13:
    unint64_t v12 = a1[2];
    unint64_t v13 = a1[3];
    uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v14) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = *(uint64_t (**)(unint64_t, uint64_t, unint64_t, unint64_t *, uint64_t *))(v15 + 16);
    if (!v16) {
      return 4294954514;
    }
    uint64_t result = v16(v12, 1, v13, &v17, &v18);
    if (result) {
      return result;
    }
    if (v18 != 1) {
      return FigSignalErrorAt();
    }
    if (v17) {
      int v5 = 0;
    }
    else {
      int v5 = *((_DWORD *)a1 + 3) + 1;
    }
    unint64_t v4 = *a1 << 8;
    *a1 = v4;
    ++a1[3];
    *((_DWORD *)a1 + 2) -= 8;
    *((_DWORD *)a1 + 3) = v5;
    if (!--v3) {
      return 0;
    }
  }
  unint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  CFDictionaryRef v10 = *(uint64_t (**)(unint64_t, uint64_t, unint64_t, char *, uint64_t *))(v9 + 16);
  if (!v10) {
    return 4294954514;
  }
  uint64_t result = v10(v6, 1, v7, &v19, &v18);
  if (result) {
    return result;
  }
  if (v18 == 1)
  {
    ++a1[3];
    goto LABEL_12;
  }
  return FigSignalErrorAt();
}

uint64_t CMPhotoBitStreamWriteBits(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = 64 - v6;
  if (64 - v6 < a3)
  {
    uint64_t result = CMPhotoBitStreamWriteFlushBytes((unint64_t *)a1);
    if (result) {
      return result;
    }
    int v6 = *(_DWORD *)(a1 + 8);
    unsigned int v7 = 64 - v6;
  }
  BOOL v9 = v7 >= a3;
  char v10 = v7 - a3;
  if (!v9) {
    return 4294950304;
  }
  uint64_t result = 0;
  *(void *)a1 |= a2 << v10;
  *(_DWORD *)(a1 + 8) = v6 + a3;
  return result;
}

uint64_t CMPhotoBitStreamWriteExpGolomb(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 1;
  unsigned int v3 = -1;
  unint64_t v4 = v2;
  do
  {
    v3 += 2;
    BOOL v5 = v4 > 1;
    v4 >>= 1;
  }
  while (v5);
  return CMPhotoBitStreamWriteBits(a1, v2, v3);
}

uint64_t CMPhotoBitStreamWriteFlush(uint64_t a1)
{
  unsigned int v2 = -*(_DWORD *)(a1 + 8) & 7;
  if (!v2 || (uint64_t result = CMPhotoBitStreamWriteBits(a1, (1 << (v2 - 1)), v2), !result))
  {
    return CMPhotoBitStreamWriteFlushBytes((unint64_t *)a1);
  }
  return result;
}

uint64_t CMPhotoBitStreamReadBytes(void *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v13 = 0;
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  char v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *, uint64_t *))(v9 + 8);
  if (!v10) {
    return 4294954514;
  }
  uint64_t result = v10(v6, a2, v7, a3, &v13);
  if (!result)
  {
    uint64_t v12 = v13;
    a1[5] += v13;
    a1[2] += 8 * v12;
    if (a2 == 2)
    {
      uint64_t result = 0;
      *(_WORD *)a3 = bswap32(*(unsigned __int16 *)a3) >> 16;
    }
    else
    {
      uint64_t result = 0;
      if (a2 == 4) {
        *a3 = bswap32(*a3);
      }
    }
  }
  return result;
}

uint64_t CMPhotoBitStreamReadVariableLengthEntry(void *a1, _DWORD *a2)
{
  unsigned __int8 v12 = 0;
  uint64_t v11 = 0;
  uint64_t v4 = a1[5];
  while (1)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v7 = v6 ? v6 : 0;
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(v7 + 8);
    if (!v8) {
      break;
    }
    uint64_t result = v8(v5, 1, v4, &v12, &v11);
    if (result) {
      return result;
    }
    uint64_t v10 = v11;
    uint64_t v4 = a1[5] + v11;
    a1[5] = v4;
    a1[2] += 8 * v10;
    LODWORD(v10) = v12;
    *a2 += v12;
    if (v10 != 255) {
      return 0;
    }
  }
  return 4294954514;
}

uint64_t CMPhotoBitStreamReadBits(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  if (a2 > 0x20) {
    return 4294950190;
  }
  v30[7] = v3;
  v30[8] = v4;
  *(void *)(a1 + 16) += a2;
  unint64_t v8 = *(unsigned int *)(a1 + 4);
  if (v8 > 0x17 || v8 >= a2)
  {
    if (a2)
    {
LABEL_8:
      uint64_t result = 0;
      *a3 = *(_DWORD *)a1 >> -(char)a2;
      int v11 = *(_DWORD *)(a1 + 4) - a2;
      *(_DWORD *)a1 <<= a2;
      *(_DWORD *)(a1 + 4) = v11;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 40);
    while (1)
    {
      v30[0] = 0;
      unsigned __int8 v29 = 0;
      uint64_t v13 = *(void *)(a1 + 32);
      uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v15 = v14 ? v14 : 0;
      uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned __int8 *, void *))(v15 + 8);
      if (!v16) {
        return 4294954514;
      }
      uint64_t result = v16(v13, 1, v12, &v29, v30);
      if (result) {
        return result;
      }
      int v17 = v29;
      if (*(unsigned char *)(a1 + 24))
      {
        int v18 = *(_DWORD *)(a1 + 8);
        if (v18 == 2 && v29 == 3)
        {
          uint64_t v28 = 0;
          uint64_t v19 = *(void *)(a1 + 32);
          uint64_t v20 = *(void *)(a1 + 40);
          uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v21) {
            uint64_t v22 = v21;
          }
          else {
            uint64_t v22 = 0;
          }
          uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(v22 + 8);
          if (!v23) {
            return 4294954514;
          }
          uint64_t result = v23(v19, 1, v20, &v29, &v28);
          if (result) {
            return result;
          }
          int v18 = 0;
          *(void *)(a1 + 40) += v28;
          int v17 = v29;
        }
        if (v17) {
          int v24 = 0;
        }
        else {
          int v24 = v18 + 1;
        }
        *(_DWORD *)(a1 + 8) = v24;
      }
      uint64_t v12 = *(void *)(a1 + 40) + v30[0];
      *(void *)(a1 + 40) = v12;
      int v25 = *(_DWORD *)(a1 + 4);
      int v26 = (v17 << (24 - v25)) | *(_DWORD *)a1;
      unint64_t v27 = (v25 + 8);
      *(_DWORD *)a1 = v26;
      *(_DWORD *)(a1 + 4) = v27;
      if (v27 > 0x17 || v27 >= a2) {
        goto LABEL_8;
      }
    }
  }
  return result;
}

uint64_t CMPhotoBitStreamReadUVLC(uint64_t a1, _DWORD *a2)
{
  int v6 = 0;
  uint64_t result = CMPhotoBitStreamReadBits(a1, 1uLL, &v6);
  if (!result)
  {
    unsigned int v5 = 0;
    while (!v6)
    {
      ++v5;
      int v6 = 0;
      uint64_t result = CMPhotoBitStreamReadBits(a1, 1uLL, &v6);
      if (result) {
        return result;
      }
    }
    int v7 = 0;
    if (v5 >= 0x20) {
      int v7 = -1;
    }
    uint64_t result = CMPhotoBitStreamReadBits(a1, v5, &v7);
    if (!result) {
      *a2 = v7 + ~(-1 << v5);
    }
  }
  return result;
}

uint64_t CMPhotoBitStreamRead_leb128(uint64_t a1, unint64_t *a2)
{
  int v4 = 0;
  unint64_t v5 = 0;
  while (1)
  {
    int v8 = 0;
    uint64_t result = CMPhotoBitStreamReadBits(a1, 8uLL, &v8);
    if (result) {
      break;
    }
    v5 |= (v8 & 0x7F) << v4;
    if ((v8 & 0x80) != 0)
    {
      BOOL v7 = v4 == 49;
      v4 += 7;
      if (!v7) {
        continue;
      }
    }
    if (HIDWORD(v5)) {
      uint64_t result = 4294950194;
    }
    else {
      uint64_t result = 0;
    }
    *a2 = v5;
    return result;
  }
  return result;
}

uint64_t CMPhotoBitStreamReadGetBitsRead(uint64_t a1, void *a2)
{
  *a2 = *(void *)(a1 + 16);
  return 0;
}

uint64_t RegisterCMPhotoCache()
{
  sCMPhotoCacheClasCGColorSpaceRef s = 0;
  *(void *)algn_1E98CFB08 = "CMPhotoCache";
  qword_1E98CFB10 = (uint64_t)CMPhotoCacheClass_Init;
  unk_1E98CFB18 = 0;
  qword_1E98CFB28 = 0;
  unk_1E98CFB30 = 0;
  qword_1E98CFB20 = (uint64_t)CMPhotoCacheClass_Finalize;
  qword_1E98CFB38 = (uint64_t)CMPhotoCacheClass_CopyFormattingDesc;
  unk_1E98CFB40 = 0;
  uint64_t result = _CFRuntimeRegisterClass();
  sCMPhotoCacheCFTypeID TypeID = result;
  return result;
}

uint64_t CMPhotoCacheCreate(const __CFAllocator *a1, CFIndex a2, void *a3)
{
  uint64_t result = 4294950306;
  if (a2 >= 1 && a3)
  {
    pthread_once(&CMPhotoCacheGetTypeID_onceToken, (void (*)(void))RegisterCMPhotoCache);
    uint64_t Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      int v8 = (void *)Instance;
      uint64_t v9 = FigSimpleMutexCreate();
      v8[2] = v9;
      if (v9)
      {
        v8[5] = 0;
        v8[6] = v8 + 5;
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, a2, MEMORY[0x1E4F1D530], 0);
        v8[4] = Mutable;
        if (Mutable)
        {
          uint64_t result = 0;
          v8[3] = a2;
          *a3 = v8;
          return result;
        }
      }
      CFRelease(v8);
    }
    return 4294950305;
  }
  return result;
}

uint64_t CMPhotoCacheAddItemForKey(uint64_t a1, const void *a2, const void *a3)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t result = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 16));
  if (result) {
    return result;
  }
  CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 32));
  int v8 = CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 32), a2);
  if (Count == *(void *)(a1 + 24) && v8 == 0)
  {
    uint64_t v14 = *(void *)(a1 + 40);
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 32), *(const void **)v14);
    uint64_t v15 = *(const void **)(v14 + 8);
    if (v15) {
      CFRelease(v15);
    }
    uint64_t v16 = *(void *)(v14 + 16);
    int v17 = *(void **)(v14 + 24);
    if (v16)
    {
      *(void *)(v16 + 24) = v17;
      int v17 = *(void **)(v14 + 24);
    }
    else
    {
      *(void *)(a1 + 48) = v17;
    }
    *int v17 = v16;
    free((void *)v14);
  }
  else if (v8)
  {
    CFDataRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), a2);
    int v11 = Value;
    uint64_t v12 = Value[2];
    uint64_t v13 = (void *)Value[3];
    if (v12)
    {
      *(void *)(v12 + 24) = v13;
      uint64_t v13 = (void *)Value[3];
    }
    else
    {
      *(void *)(a1 + 48) = v13;
    }
    *uint64_t v13 = v12;
    goto LABEL_23;
  }
  int v18 = malloc_type_calloc(1uLL, 0x20uLL, 0xE0040F8A157B5uLL);
  if (!v18) {
    return 4294950305;
  }
  int v11 = v18;
  *int v18 = a2;
  if (a3) {
    CFTypeRef v19 = CFRetain(a3);
  }
  else {
    CFTypeRef v19 = 0;
  }
  v11[1] = v19;
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), a2, v11);
LABEL_23:
  v11[2] = 0;
  uint64_t v20 = *(void **)(a1 + 48);
  v11[3] = v20;
  *uint64_t v20 = v11;
  *(void *)(a1 + 48) = v11 + 2;
  uint64_t v21 = *(pthread_mutex_t **)(a1 + 16);
  return pthread_mutex_unlock(v21);
}

uint64_t CMPhotoCacheGetItemForKey(uint64_t result, const void *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    if (pthread_mutex_lock(*(pthread_mutex_t **)(result + 16)))
    {
      return 0;
    }
    else
    {
      CFDataRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 32), a2);
      if (Value)
      {
        uint64_t v5 = Value[2];
        uint64_t v6 = Value[1];
        BOOL v7 = (void *)Value[3];
        if (v5)
        {
          *(void *)(v5 + 24) = v7;
          BOOL v7 = (void *)Value[3];
        }
        else
        {
          *(void *)(v3 + 48) = v7;
        }
        *BOOL v7 = v5;
        int v8 = *(void **)(v3 + 48);
        Value[2] = 0;
        Value[3] = v8;
        void *v8 = Value;
        *(void *)(v3 + 48) = Value + 2;
      }
      else
      {
        uint64_t v6 = 0;
      }
      if (pthread_mutex_unlock(*(pthread_mutex_t **)(v3 + 16))) {
        return 0;
      }
      else {
        return v6;
      }
    }
  }
  return result;
}

uint64_t CMPhotoCacheRemoveAllItems(uint64_t a1)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t result = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 16));
  if (!result)
  {
    CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 32));
    uint64_t v3 = *(void **)(a1 + 40);
    if (v3)
    {
      do
      {
        int v4 = (const void *)v3[1];
        uint64_t v5 = (void *)v3[2];
        uint64_t v6 = v5;
        if (v4)
        {
          CFRelease(v4);
          uint64_t v6 = (void *)v3[2];
        }
        BOOL v7 = (void *)v3[3];
        if (v6)
        {
          v6[3] = v7;
          BOOL v7 = (void *)v3[3];
        }
        else
        {
          *(void *)(a1 + 48) = v7;
        }
        *BOOL v7 = v6;
        free(v3);
        uint64_t v3 = v5;
      }
      while (v5);
    }
    int v8 = *(pthread_mutex_t **)(a1 + 16);
    return pthread_mutex_unlock(v8);
  }
  return result;
}

double CMPhotoCacheClass_Init(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void CMPhotoCacheClass_Finalize(uint64_t a1)
{
  CMPhotoCacheRemoveAllItems(a1);
  FigSimpleMutexDestroy();
  unsigned int v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRelease(v2);
  }
}

CFTypeRef CMPhotoCacheClass_CopyFormattingDesc()
{
  return CFRetain(@"[CMPhotoCache]");
}

uint64_t CMPhotoCreateIntegerPixelBufferFromFullPrecisionSource(__CVBuffer *a1, const void *a2, uint64_t a3, unsigned int a4, int a5, int a6, int a7, uint64_t a8, CVPixelBufferRef *a9, CFMutableDictionaryRef *a10)
{
  uint64_t v10 = 0;
  CVPixelBufferRef pixelBuffer = 0;
  uint64_t v11 = 4294950306;
  if (!a1 || !a9) {
    goto LABEL_119;
  }
  uint64_t v16 = a1;
  signed int PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  uint64_t v10 = 0;
  uint64_t v11 = 4294950301;
  if (PixelFormatType > 1717855599)
  {
    if (PixelFormatType == 1717856627) {
      goto LABEL_9;
    }
    int v18 = 1717855600;
  }
  else
  {
    if (PixelFormatType == 1278226534) {
      goto LABEL_9;
    }
    int v18 = 1380410945;
  }
  if (PixelFormatType != v18) {
    goto LABEL_119;
  }
LABEL_9:
  size_t Width = CVPixelBufferGetWidth(v16);
  size_t Height = CVPixelBufferGetHeight(v16);
  uint64_t v21 = CVPixelBufferLockBaseAddress(v16, 1uLL);
  if (v21)
  {
    uint64_t v11 = v21;
    uint64_t v10 = 0;
    goto LABEL_119;
  }
  int v88 = a5;
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(v16);
  BaseAddresCGColorSpaceRef s = (float *)CVPixelBufferGetBaseAddress(v16);
  dispatch_queue_t v89 = dispatch_queue_create("com.apple.coremedia.auximage", MEMORY[0x1E4F14430]);
  if (v89)
  {
    if (a4 <= 8) {
      int v24 = 1278226488;
    }
    else {
      int v24 = 1278226736;
    }
    if (a4 <= 0xA) {
      int v25 = v24;
    }
    else {
      int v25 = 1278226742;
    }
    int v26 = *a9;
    CGSize v87 = v16;
    if (!*a9)
    {
      int v86 = 1;
LABEL_21:
      unsigned int v90 = v25;
      unsigned int v84 = (v25 - 1278226736) & 0xFFFFFF0C;
      BOOL v27 = v84 == 0;
      uint64_t v28 = (float *)malloc_type_calloc(1uLL, 0x50uLL, 0x10100403B4AD1A7uLL);
      uint64_t v10 = v28;
      if (!v28)
      {
        CFMutableDictionaryRef Mutable = 0;
        int v81 = 0;
        uint64_t v11 = 4294950305;
        goto LABEL_126;
      }
      *((void *)v28 + 2) = Height;
      if (Height)
      {
        uint64_t v29 = 0;
        float v30 = 3.4028e38;
        float v31 = 1.1755e-38;
        CFTypeRef v32 = BaseAddress;
        do
        {
          if (Width)
          {
            for (uint64_t i = 0; i != Width; ++i)
            {
              float v34 = v32[i];
              if (a6 && LODWORD(v34) == a7) {
                goto LABEL_31;
              }
              if (v34 > v31) {
                float v31 = v32[i];
              }
              if (v34 >= v30) {
LABEL_31:
              }
                float v34 = v30;
              float v30 = v34;
            }
          }
          else
          {
            float v34 = v30;
          }
          CFTypeRef v32 = (float *)((char *)v32 + BytesPerRow);
          ++v29;
          float v30 = v34;
        }
        while (v29 != Height);
      }
      else
      {
        float v31 = 1.1755e-38;
        float v34 = 3.4028e38;
      }
      v28[17] = v34;
      v28[18] = v31;
      *((_DWORD *)v28 + 13) = a7;
      *((unsigned char *)v28 + 48) = a6;
      *((void *)v28 + 3) = Width;
      *((void *)v28 + 4) = BytesPerRow;
      *(void *)uint64_t v28 = BaseAddress;
      int v35 = v88;
      *((unsigned char *)v28 + 76) = v88;
      if (a6) {
        int v36 = 65534;
      }
      else {
        int v36 = 0xFFFF;
      }
      *((unsigned char *)v28 + 77) = v27;
      if (!v26)
      {
        uint64_t v37 = CMPhotoSurfacePoolCreatePixelBuffer(a2, v90, Width, Height, 1, 0, 0, 0, 64, 0, &pixelBuffer);
        if (v37)
        {
LABEL_122:
          uint64_t v11 = v37;
          CFMutableDictionaryRef Mutable = 0;
          int v81 = 0;
LABEL_126:
          uint64_t v16 = v87;
          goto LABEL_127;
        }
        int v26 = pixelBuffer;
      }
      uint64_t v37 = CVPixelBufferLockBaseAddress(v26, 0);
      if (!v37)
      {
        float v38 = fminf(v34, 3.4028e38);
        float v39 = fmaxf(v31, 1.1755e-38);
        int v40 = v36 + (1 << a4);
        size_t v41 = CVPixelBufferGetBytesPerRow(pixelBuffer);
        uint64_t v42 = CVPixelBufferGetBaseAddress(pixelBuffer);
        float v44 = v39 - v38;
        v10[17] = v38;
        v10[18] = v39;
        *((void *)v10 + 1) = v42;
        *((void *)v10 + 5) = v41;
        *((_DWORD *)v10 + 14) = (unsigned __int16)(v40 + 1);
        *((_DWORD *)v10 + 15) = (unsigned __int16)v40;
        *((_DWORD *)v10 + 16) = v90;
        *((unsigned char *)v10 + 76) = v88;
        *((unsigned char *)v10 + 77) = v27;
        uint64_t v45 = *(void *)v10;
        if (v90 == 1278226488)
        {
          unint64_t v46 = *((void *)v10 + 2);
          if (v88)
          {
            uint64_t v16 = v87;
            if (v46)
            {
              unint64_t v47 = 0;
              unint64_t v48 = *((void *)v10 + 3);
              do
              {
                if (v48)
                {
                  for (unint64_t j = 0; j < v48; ++j)
                  {
                    float v50 = *(float *)(v45 + 4 * j);
                    if (*((unsigned char *)v10 + 48) && *((_DWORD *)v10 + 13) == LODWORD(v50))
                    {
                      int v51 = *((_DWORD *)v10 + 14);
                    }
                    else
                    {
                      *(float *)&double v43 = v10[15];
                      double v43 = (double)*(unint64_t *)&v43;
                      float v52 = fmax(fmin(v50, 1.0), 0.0) * v43;
                      LOBYTE(v51) = llroundf(v52);
                    }
                    v42[j] = v51;
                    unint64_t v48 = *((void *)v10 + 3);
                  }
                  unint64_t v46 = *((void *)v10 + 2);
                  size_t v41 = *((void *)v10 + 5);
                }
                v45 += *((void *)v10 + 4);
                v42 += v41;
                ++v47;
              }
              while (v47 < v46);
            }
          }
          else
          {
            uint64_t v16 = v87;
            if (v46)
            {
              unint64_t v54 = 0;
              unint64_t v55 = *((void *)v10 + 3);
              do
              {
                if (v55)
                {
                  for (unint64_t k = 0; k < v55; ++k)
                  {
                    float v57 = *(float *)(v45 + 4 * k);
                    if (*((unsigned char *)v10 + 48) && *((_DWORD *)v10 + 13) == LODWORD(v57)) {
                      int v58 = *((_DWORD *)v10 + 14);
                    }
                    else {
                      LOBYTE(v58) = llroundf((float)((float)(v57 - v10[17]) / v44) * (float)*((unsigned int *)v10 + 15));
                    }
                    v42[k] = v58;
                    unint64_t v55 = *((void *)v10 + 3);
                  }
                  unint64_t v46 = *((void *)v10 + 2);
                  size_t v41 = *((void *)v10 + 5);
                }
                v45 += *((void *)v10 + 4);
                v42 += v41;
                ++v54;
              }
              while (v54 < v46);
            }
          }
        }
        else
        {
          if (v84)
          {
            char v53 = 0;
          }
          else
          {
            char v53 = 16 - CMPhotoGetBitDepthForPixelFormat(v90);
            int v35 = *((unsigned __int8 *)v10 + 76);
          }
          uint64_t v16 = v87;
          uint64_t v59 = *((void *)v10 + 2);
          if (v35)
          {
            if (v59)
            {
              uint64_t v60 = 0;
              uint64_t v61 = *((void *)v10 + 3);
              uint64_t v62 = *((void *)v10 + 4);
              uint64_t v63 = *((void *)v10 + 5);
              do
              {
                if (v61)
                {
                  uint64_t v64 = 0;
                  int v65 = *((unsigned __int8 *)v10 + 48);
                  do
                  {
                    float v66 = *(float *)(v45 + 4 * v64);
                    if (v65 && *((_DWORD *)v10 + 13) == LODWORD(v66))
                    {
                      unsigned int v67 = *((_DWORD *)v10 + 14);
                    }
                    else
                    {
                      *(float *)&double v43 = v10[15];
                      double v43 = (double)*(unint64_t *)&v43;
                      float v68 = fmax(fmin(v66, 1.0), 0.0) * v43;
                      unsigned int v67 = llroundf(v68);
                    }
                    *(_WORD *)&v42[2 * v64++] = v67 << v53;
                  }
                  while (v61 != v64);
                }
                v45 += v62;
                v42 += v63;
                ++v60;
              }
              while (v60 != v59);
            }
          }
          else if (v59)
          {
            uint64_t v69 = 0;
            uint64_t v70 = *((void *)v10 + 3);
            uint64_t v71 = *((void *)v10 + 4);
            uint64_t v72 = *((void *)v10 + 5);
            do
            {
              if (v70)
              {
                uint64_t v73 = 0;
                int v74 = *((unsigned __int8 *)v10 + 48);
                do
                {
                  float v75 = *(float *)(v45 + 4 * v73);
                  if (v74 && *((_DWORD *)v10 + 13) == LODWORD(v75)) {
                    unsigned int v76 = *((_DWORD *)v10 + 14);
                  }
                  else {
                    unsigned int v76 = llroundf((float)((float)(v75 - v10[17]) / v44) * (float)*((unsigned int *)v10 + 15));
                  }
                  *(_WORD *)&v42[2 * v73++] = v76 << v53;
                }
                while (v70 != v73);
              }
              v45 += v71;
              v42 += v72;
              ++v69;
            }
            while (v69 != v59);
          }
        }
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (Mutable)
        {
          uint64_t v78 = FigCFDictionarySetFloat();
          if (!v78)
          {
            uint64_t v78 = FigCFDictionarySetFloat();
            if (!v78)
            {
              uint64_t v78 = FigCFDictionarySetInt16();
              if (!v78)
              {
                uint64_t v78 = FigCFDictionarySetInt16();
                if (!v78)
                {
                  if (!a6
                    || (uint64_t v78 = FigCFDictionarySetInt16(), !v78)
                    && (uint64_t v78 = FigCFDictionarySetInt32(), !v78))
                  {
                    uint64_t v78 = FigCFDictionarySetInt();
                    if (!v78)
                    {
                      uint64_t v79 = FigCFDictionarySetInt();
                      long long v80 = v89;
                      if (v79)
                      {
                        uint64_t v11 = v79;
                        int v81 = 1;
                      }
                      else
                      {
                        CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
                        CMPhotoPropagateColorPropertiesFromSourceBuffer(v16, pixelBuffer);
                        *a9 = pixelBuffer;
                        CVPixelBufferRef pixelBuffer = 0;
                        int v81 = 0;
                        uint64_t v11 = 0;
                        if (a10)
                        {
                          *a10 = Mutable;
                          CFMutableDictionaryRef Mutable = 0;
                        }
                      }
                      goto LABEL_108;
                    }
                  }
                }
              }
            }
          }
          uint64_t v11 = v78;
        }
        else
        {
          uint64_t v11 = 4294950305;
        }
        int v81 = 1;
LABEL_127:
        long long v80 = v89;
LABEL_108:
        int v82 = v86;
        goto LABEL_109;
      }
      goto LABEL_122;
    }
    CVPixelBufferRef pixelBuffer = *a9;
    if (_isPixelBufferValid(v26, v25, Width, Height))
    {
      int v86 = 0;
      goto LABEL_21;
    }
    CFMutableDictionaryRef Mutable = 0;
    int v81 = 0;
    int v82 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 4294950306;
  }
  else
  {
    CFMutableDictionaryRef Mutable = 0;
    int v81 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 4294950194;
    int v82 = 1;
  }
  long long v80 = v89;
LABEL_109:
  CVPixelBufferUnlockBaseAddress(v16, 1uLL);
  if (v81 && pixelBuffer) {
    CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
  }
  if (v82 && pixelBuffer) {
    CFRelease(pixelBuffer);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v80) {
    dispatch_release(v80);
  }
LABEL_119:
  free(v10);
  return v11;
}