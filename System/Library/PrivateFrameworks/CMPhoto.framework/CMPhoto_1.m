BOOL _isPixelBufferValid(__CVBuffer *a1, int a2, uint64_t a3, uint64_t a4)
{
  OSType PixelFormatType;
  BOOL v9;
  int HasCLAP;
  BOOL v11;

  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  v9 = CVPixelBufferGetWidth(a1) == a3 && CVPixelBufferGetHeight(a1) == a4;
  HasCLAP = CMPhotoPixelBufferHasCLAP(a1);
  v11 = PixelFormatType == a2 && v9;
  return !HasCLAP && v11;
}

uint64_t CMPhotoCreateCompressionCompatiblePixelBuffer(__CVBuffer *a1, const void *a2, unsigned int a3, const __CFNumber *a4, int a5, CFTypeRef *a6, void *a7)
{
  return CMPhotoCreateCompressionCompatiblePixelBufferWithAuxType(a1, a2, 0, a3, a4, a5, a6, a7);
}

uint64_t CMPhotoCreateCompressionCompatiblePixelBufferWithAuxType(CVPixelBufferRef pixelBuffer, const void *a2, int a3, unsigned int a4, const __CFNumber *a5, int a6, CFTypeRef *a7, void *a8)
{
  v102 = 0;
  CFTypeRef v100 = 0;
  CFTypeRef cf = 0;
  uint64_t v8 = 4294950306;
  int v9 = 1;
  if (!pixelBuffer) {
    goto LABEL_167;
  }
  if (!a7) {
    goto LABEL_167;
  }
  if ((a4 - 17) < 0xF7u) {
    goto LABEL_167;
  }
  v12 = a8;
  if (!a8) {
    goto LABEL_167;
  }
  v17 = (__CVBuffer *)*a7;
  if (*a7)
  {
    CFTypeRef cf = *a7;
    size_t Width = CVPixelBufferGetWidth(pixelBuffer);
    size_t Height = CVPixelBufferGetHeight(pixelBuffer);
    int v20 = a4 <= 8 ? 1278226488 : 1278226736;
    int v21 = a4 <= 0xA ? v20 : 1278226742;
    int v9 = 0;
    if (!_isPixelBufferValid(v17, v21, Width, Height)) {
      goto LABEL_75;
    }
  }
  int v95 = a6;
  unsigned int v99 = 0;
  pixelBuffera = pixelBuffer;
  uint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  uint64_t v25 = PixelFormatType;
  if (!a5)
  {
    int v27 = 0;
    uint64_t v26 = 0;
    goto LABEL_34;
  }
  uint64_t v26 = 0;
  int v27 = 1;
  if ((int)PixelFormatType > 1717855599)
  {
    if ((int)PixelFormatType <= 1751410031)
    {
      if (PixelFormatType != 1717855600)
      {
        int v28 = 1717856627;
LABEL_31:
        if (PixelFormatType != v28) {
          goto LABEL_34;
        }
      }
LABEL_32:
      if (!CFNumberGetValue(a5, kCFNumberSInt32Type, &v99)) {
        goto LABEL_75;
      }
      uint64_t v26 = v99;
      goto LABEL_34;
    }
    if (PixelFormatType == 1751410032 || PixelFormatType == 1932996149) {
      goto LABEL_27;
    }
    int v29 = 1751411059;
LABEL_26:
    if (PixelFormatType != v29) {
      goto LABEL_34;
    }
    goto LABEL_27;
  }
  if ((int)PixelFormatType <= 1278226533)
  {
    if (PixelFormatType == 825306677) {
      goto LABEL_27;
    }
    int v29 = 825437747;
    goto LABEL_26;
  }
  if (PixelFormatType == 1278226534) {
    goto LABEL_32;
  }
  if (PixelFormatType != 1278226536)
  {
    int v28 = 1380410945;
    goto LABEL_31;
  }
LABEL_27:
  LOWORD(valuePtr) = 0;
  if (!CFNumberGetValue(a5, kCFNumberSInt16Type, &valuePtr)) {
    goto LABEL_75;
  }
  uint64_t v26 = (unsigned __int16)valuePtr;
  unsigned int v99 = (unsigned __int16)valuePtr;
LABEL_34:
  v94 = a7;
  if (v25 == 1278226536 || v25 == 1751411059 || v25 == 1751410032)
  {
    int v30 = 2143289344;
    uint64_t IntegerPixelBufferFromFullPrecisionSource = CMPhotoCreateFullPrecisionPixelBufferFromHalfPrecisionSource(pixelBuffera, a2, v27, (unsigned __int16)v26, 2143289344, &v102);
    if (IntegerPixelBufferFromFullPrecisionSource)
    {
LABEL_180:
      uint64_t v8 = IntegerPixelBufferFromFullPrecisionSource;
      goto LABEL_167;
    }
    pixelBuffera = v102;
    signed int v32 = CVPixelBufferGetPixelFormatType(v102);
    unsigned int v99 = 2143289344;
  }
  else
  {
    int v30 = v26;
    signed int v32 = v25;
  }
  if (v32 <= 1380410944)
  {
    if (v32 != 825306677 && v32 != 825437747)
    {
      int v34 = 1278226534;
      goto LABEL_50;
    }
    goto LABEL_54;
  }
  if (v32 <= 1717856626)
  {
    if (v32 == 1380410945)
    {
LABEL_51:
      uint64_t IntegerPixelBufferFromFullPrecisionSource = CMPhotoCreateIntegerPixelBufferFromFullPrecisionSource(pixelBuffera, a2, v25, a4, 0, v27, v30, v26, (CVPixelBufferRef *)&cf, (CFMutableDictionaryRef *)&v100);
      goto LABEL_52;
    }
    unsigned __int16 v33 = 25968;
    goto LABEL_49;
  }
  if (v32 == 1932996149)
  {
LABEL_54:
    CVPixelBufferRef valuePtr = 0;
    v37 = pixelBuffera;
    if (pixelBuffera)
    {
      size_t v38 = CVPixelBufferGetWidth(pixelBuffera);
      size_t v93 = CVPixelBufferGetHeight(pixelBuffera);
      int v39 = 1278226736;
      if (a4 <= 8) {
        int v39 = 1278226488;
      }
      int v40 = a4 <= 0xA ? v39 : 1278226742;
      CFTypeRef v41 = cf;
      if (!cf
        || (CVPixelBufferRef valuePtr = (CVPixelBufferRef)cf,
            int v42 = v40,
            BOOL isPixelBufferValid = _isPixelBufferValid((__CVBuffer *)cf, v40, v38, v93),
            int v40 = v42,
            isPixelBufferValid))
      {
        CFTypeRef v92 = v41;
        if (a4 == 16)
        {
          OSType v44 = CVPixelBufferGetPixelFormatType(pixelBuffera);
          *(void *)v105 = 0;
          char v104 = 0;
          uint64_t FixedPointDescriptionFromPixelFormat = CMPhotoGetFixedPointDescriptionFromPixelFormat(v44, &v105[1], v105, &v104);
          if (FixedPointDescriptionFromPixelFormat)
          {
            uint64_t v8 = FixedPointDescriptionFromPixelFormat;
          }
          else
          {
            CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            if (Mutable)
            {
              CFMutableDictionaryRef v47 = Mutable;
              uint64_t v48 = FigCFDictionarySetInt();
              if (!v48)
              {
                uint64_t v48 = FigCFDictionarySetInt();
                if (!v48)
                {
                  uint64_t v48 = FigCFDictionarySetInt();
                  if (!v48)
                  {
                    uint64_t v48 = FigCFDictionarySetInt();
                    if (!v48)
                    {
                      uint64_t v48 = FigCFDictionarySetInt();
                      if (!v48)
                      {
                        if (!a5
                          || (uint64_t v48 = FigCFDictionarySetInt16(), !v48)
                          && (uint64_t v48 = FigCFDictionarySetInt16(), !v48))
                        {
                          if (!valuePtr)
                          {
                            v49 = (__CVBuffer *)CFRetain(pixelBuffera);
                            int v50 = 0;
                            CVPixelBufferRef valuePtr = v49;
                            v35 = v94;
LABEL_145:
                            CMPhotoPropagateColorPropertiesFromSourceBuffer(v37, v49);
                            uint64_t v8 = 0;
                            int v85 = 0;
                            CFTypeRef v100 = v47;
                            CFTypeRef cf = valuePtr;
                            CVPixelBufferRef valuePtr = 0;
                            CFMutableDictionaryRef v47 = 0;
                            goto LABEL_146;
                          }
                          uint64_t v8 = 4294950302;
LABEL_152:
                          v35 = v94;
                          goto LABEL_153;
                        }
                      }
                    }
                  }
                }
              }
              uint64_t v8 = v48;
              v35 = v94;
              int v36 = v95;
              CFRelease(v47);
LABEL_187:
              CFMutableDictionaryRef v47 = 0;
              goto LABEL_154;
            }
            uint64_t v8 = 4294950305;
          }
          v35 = v94;
          int v36 = v95;
          goto LABEL_187;
        }
        unsigned int v91 = v40;
        OSType v51 = CVPixelBufferGetPixelFormatType(pixelBuffera);
        if (v51 != 825306677 && v51 != 1932996149 && v51 != 825437747)
        {
          CFMutableDictionaryRef v47 = 0;
          uint64_t v8 = 4294950301;
          goto LABEL_152;
        }
        v105[1] = 0;
        LOBYTE(v105[0]) = 0;
        uint64_t v52 = CMPhotoGetFixedPointDescriptionFromPixelFormat(v51, &v105[1], 0, (char *)v105);
        if (!v52)
        {
          if (LOBYTE(v105[0]))
          {
            uint64_t v52 = FigSignalErrorAt();
          }
          else
          {
            uint64_t v52 = CVPixelBufferLockBaseAddress(pixelBuffera, 1uLL);
            if (!v52)
            {
              v90 = v12;
              size_t BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffera);
              BaseAddress = (unsigned __int16 *)CVPixelBufferGetBaseAddress(pixelBuffera);
              v55 = BaseAddress;
              if (v93)
              {
                uint64_t v56 = 0;
                unsigned __int16 v57 = 0;
                unsigned __int16 v58 = -1;
                v59 = BaseAddress;
                do
                {
                  if (v38)
                  {
                    for (uint64_t i = 0; i != v38; ++i)
                    {
                      unsigned int v61 = v59[i];
                      BOOL v62 = v61 == (unsigned __int16)v30;
                      unsigned __int16 v63 = v57;
                      if (v61 > v57) {
                        unsigned __int16 v63 = v59[i];
                      }
                      if (v61 >= v58) {
                        LOWORD(v61) = v58;
                      }
                      if (a5 == 0 || !v62)
                      {
                        unsigned __int16 v58 = v61;
                        unsigned __int16 v57 = v63;
                      }
                    }
                  }
                  v59 = (unsigned __int16 *)((char *)v59 + BytesPerRow);
                  ++v56;
                }
                while (v56 != v93);
              }
              else
              {
                unsigned __int16 v57 = 0;
                unsigned __int16 v58 = -1;
              }
              if (a5) {
                int v66 = 65534;
              }
              else {
                int v66 = 0xFFFF;
              }
              int v89 = v66;
              v67 = valuePtr;
              if (!valuePtr)
              {
                uint64_t v68 = CMPhotoSurfacePoolCreatePixelBuffer(a2, v91, v38, v93, 1, 0, 0, 0, 64, 0, &valuePtr);
                if (v68)
                {
                  uint64_t v8 = v68;
                  CFMutableDictionaryRef v47 = 0;
                  int v85 = 0;
                  v12 = v90;
                  v35 = v94;
                  v37 = pixelBuffera;
                  int v50 = 1;
                  goto LABEL_146;
                }
                v67 = valuePtr;
              }
              uint64_t v69 = CVPixelBufferLockBaseAddress(v67, 0);
              if (v69)
              {
                uint64_t v8 = v69;
                CFMutableDictionaryRef v47 = 0;
                int v85 = 0;
                int v50 = 1;
              }
              else
              {
                int v97 = v89 + (1 << a4);
                size_t v70 = CVPixelBufferGetBytesPerRow(valuePtr);
                v71 = CVPixelBufferGetBaseAddress(valuePtr);
                if (v93)
                {
                  uint64_t v72 = 0;
                  float v73 = (float)(unsigned __int16)(v57 - v58);
                  float v74 = (float)(unsigned __int16)v97;
                  do
                  {
                    if (v91 == 1278226488)
                    {
                      if (v38)
                      {
                        for (uint64_t j = 0; j != v38; ++j)
                        {
                          int v76 = v55[j];
                          if (!a5 || (char v77 = v97 + 1, v76 != (unsigned __int16)v30)) {
                            char v77 = llroundf((float)((float)(v76 - v58) / v73) * v74);
                          }
                          v71[j] = v77;
                        }
                      }
                    }
                    else if (v38)
                    {
                      for (uint64_t k = 0; k != v38; ++k)
                      {
                        int v79 = v55[k];
                        if (!a5 || (__int16 v80 = v97 + 1, v79 != (unsigned __int16)v30)) {
                          __int16 v80 = llroundf((float)((float)(v79 - v58) / v73) * v74);
                        }
                        *(_WORD *)&v71[2 * k] = v80;
                      }
                    }
                    v55 = (unsigned __int16 *)((char *)v55 + BytesPerRow);
                    v71 += v70;
                    ++v72;
                  }
                  while (v72 != v93);
                }
                CFMutableDictionaryRef v47 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                int v50 = 1;
                if (v47)
                {
                  uint64_t v81 = FigCFDictionarySetFloat();
                  v37 = pixelBuffera;
                  if (v81)
                  {
                    uint64_t v8 = v81;
                    int v85 = 1;
                    v12 = v90;
                  }
                  else
                  {
                    uint64_t v82 = FigCFDictionarySetFloat();
                    v12 = v90;
                    if (v82)
                    {
                      uint64_t v8 = v82;
                      int v85 = 1;
                    }
                    else
                    {
                      uint64_t v83 = FigCFDictionarySetInt16();
                      if (!v83)
                      {
                        uint64_t v83 = FigCFDictionarySetInt16();
                        if (!v83)
                        {
                          if (!a5
                            || (uint64_t v83 = FigCFDictionarySetInt16(), !v83)
                            && (uint64_t v83 = FigCFDictionarySetInt16(), !v83))
                          {
                            uint64_t v83 = FigCFDictionarySetInt();
                            if (!v83)
                            {
                              uint64_t v84 = FigCFDictionarySetInt();
                              v35 = v94;
                              if (!v84)
                              {
                                CVPixelBufferUnlockBaseAddress(valuePtr, 0);
                                v49 = valuePtr;
                                goto LABEL_145;
                              }
                              uint64_t v8 = v84;
                              int v85 = 1;
LABEL_146:
                              if (v50) {
                                CVPixelBufferUnlockBaseAddress(v37, 1uLL);
                              }
                              if (v85)
                              {
                                int v36 = v95;
                                if (valuePtr) {
                                  CVPixelBufferUnlockBaseAddress(valuePtr, 0);
                                }
LABEL_154:
                                if (!v92 && valuePtr) {
                                  CFRelease(valuePtr);
                                }
                                if (v47) {
                                  CFRelease(v47);
                                }
                                if (v8) {
                                  goto LABEL_167;
                                }
                                goto LABEL_160;
                              }
LABEL_153:
                              int v36 = v95;
                              goto LABEL_154;
                            }
                          }
                        }
                      }
                      uint64_t v8 = v83;
                      int v85 = 1;
                    }
                  }
LABEL_196:
                  v35 = v94;
                  goto LABEL_146;
                }
                uint64_t v8 = 4294950305;
                int v85 = 1;
              }
              v12 = v90;
              v35 = v94;
              v37 = pixelBuffera;
              goto LABEL_146;
            }
          }
        }
        uint64_t v8 = v52;
        CFMutableDictionaryRef v47 = 0;
        int v50 = 0;
        int v85 = 0;
        goto LABEL_196;
      }
    }
LABEL_75:
    uint64_t v8 = 4294950306;
    goto LABEL_167;
  }
  unsigned __int16 v33 = 26995;
LABEL_49:
  int v34 = v33 | 0x66640000;
LABEL_50:
  if (v32 == v34) {
    goto LABEL_51;
  }
  BOOL v64 = v32 == 1279340600 || v32 == 1279340854;
  char v65 = v64;
  if (a3 != 3
    || !(vmaxv_u16((uint16x4_t)vmovn_s32(vceqq_s32(vdupq_n_s32(v32), (int32x4_t)xmmword_1AB9DCA90))) & 1 | (v32 == 843264310) | v65 & 1))
  {
    BOOL v64 = a3 == 4;
    v35 = v94;
    int v36 = v95;
    if (v64 && v32 == 1751527984)
    {
      uint64_t IntegerPixelBufferFromFullPrecisionSource = CMPhotoScaleAndRotateSessionTransformForSize(0, pixelBuffera, 1, 1, 2019963440, 0, 0, 1u, *MEMORY[0x1E4F1DB20], *(CGFloat *)(MEMORY[0x1E4F1DB20] + 8), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 16), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 24), *MEMORY[0x1E4F1DB30], *(double *)(MEMORY[0x1E4F1DB30] + 8), v23, v24, 0, 1u, (__CVBuffer **)&cf);
      if (IntegerPixelBufferFromFullPrecisionSource) {
        goto LABEL_180;
      }
    }
    else
    {
      if (cf)
      {
        uint64_t v8 = 4294950302;
        goto LABEL_167;
      }
      if (pixelBuffera) {
        CFTypeRef v88 = CFRetain(pixelBuffera);
      }
      else {
        CFTypeRef v88 = 0;
      }
      CFTypeRef cf = v88;
    }
    goto LABEL_160;
  }
  uint64_t IntegerPixelBufferFromFullPrecisionSource = CMPhotoCreateAlphaFromMainBuffer(pixelBuffera, 0, (CVPixelBufferRef *)&cf);
LABEL_52:
  v35 = v94;
  int v36 = v95;
  if (IntegerPixelBufferFromFullPrecisionSource) {
    goto LABEL_180;
  }
LABEL_160:
  CFTypeRef v86 = v100;
  if (!v36 || v100) {
    goto LABEL_166;
  }
  CFTypeRef v100 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v100)
  {
    CVPixelBufferGetPixelFormatType(pixelBuffera);
    uint64_t IntegerPixelBufferFromFullPrecisionSource = FigCFDictionarySetInt();
    if (IntegerPixelBufferFromFullPrecisionSource) {
      goto LABEL_180;
    }
    CVPixelBufferGetPixelFormatType((CVPixelBufferRef)cf);
    uint64_t IntegerPixelBufferFromFullPrecisionSource = FigCFDictionarySetInt();
    if (IntegerPixelBufferFromFullPrecisionSource) {
      goto LABEL_180;
    }
    CFTypeRef v86 = v100;
LABEL_166:
    uint64_t v8 = 0;
    CFTypeRef *v35 = cf;
    CFTypeRef v100 = 0;
    CFTypeRef cf = 0;
    void *v12 = v86;
    goto LABEL_167;
  }
  uint64_t v8 = 4294950305;
LABEL_167:
  if (v102) {
    CFRelease(v102);
  }
  if (v9 && cf) {
    CFRelease(cf);
  }
  if (v100) {
    CFRelease(v100);
  }
  return v8;
}

uint64_t CMPhotoCreateFractionalPixelBuffer(__CVBuffer *a1, const void *a2, uint64_t a3, int a4, const __CFDictionary *a5, CFTypeRef *a6)
{
  CFTypeRef cf = 0;
  CFTypeRef v74 = 0;
  uint64_t v6 = 4294950306;
  if (!a1) {
    goto LABEL_133;
  }
  if (!a5) {
    goto LABEL_133;
  }
  uint64_t v8 = a6;
  if (!a6) {
    goto LABEL_133;
  }
  signed int PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  uint64_t v6 = 4294950301;
  if (PixelFormatType <= 1278226735)
  {
    if (PixelFormatType == 875704422) {
      goto LABEL_11;
    }
    unsigned __int16 v13 = 12344;
  }
  else
  {
    if (PixelFormatType == 1278226736 || PixelFormatType == 2019963440) {
      goto LABEL_11;
    }
    unsigned __int16 v13 = 12598;
  }
  if (PixelFormatType != (v13 | 0x4C300000)) {
    goto LABEL_133;
  }
LABEL_11:
  if (CFDictionaryContainsKey(a5, @"IntInvalidValue")) {
    BOOL v16 = CFDictionaryContainsKey(a5, @"NativeInvalidValue") != 0;
  }
  else {
    BOOL v16 = 0;
  }
  if ((int)a3 <= 1717855599)
  {
    if ((int)a3 <= 1278226533)
    {
      if (a3 != 825306677 && a3 != 825437747)
      {
        if (a3 != 1278226488) {
          goto LABEL_113;
        }
LABEL_47:
        uint64_t HalfPrecisionPixelBufferFromFullPrecisionSource = CMPhotoScaleAndRotateSessionTransformForSizeWithHW(0, a1, a4 == 0, 1, a3, 0, 0, 1u, *MEMORY[0x1E4F1DB20], *(CGFloat *)(MEMORY[0x1E4F1DB20] + 8), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 16), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 24), *MEMORY[0x1E4F1DB30], *(double *)(MEMORY[0x1E4F1DB30] + 8), v14, v15, 0, 1u, a4,
                                                            0,
                                                            a4,
                                                            0xFFFFFFFF,
                                                            (__CVBuffer **)&cf);
        if (!HalfPrecisionPixelBufferFromFullPrecisionSource)
        {
          uint64_t v25 = (__CVBuffer *)cf;
LABEL_132:
          CMPhotoPropagateColorPropertiesFromSourceBuffer(a1, v25);
          uint64_t v6 = 0;
          *uint64_t v8 = cf;
          CFTypeRef cf = 0;
          goto LABEL_133;
        }
LABEL_114:
        uint64_t v6 = HalfPrecisionPixelBufferFromFullPrecisionSource;
        goto LABEL_133;
      }
      goto LABEL_49;
    }
    if ((a3 - 1278226736) <= 6 && ((1 << (a3 - 48)) & 0x45) != 0) {
      goto LABEL_47;
    }
    OSType MatchingFullPrecisionPixelFormat = a3;
    if (a3 == 1278226534)
    {
LABEL_34:
      OSType v71 = MatchingFullPrecisionPixelFormat;
      uint64_t v79 = 0;
      CVPixelBufferRef pixelBuffer = 0;
      int v78 = 0;
      HIWORD(v77) = 0;
      float v76 = 0.0;
      BOOL v68 = a4 == 0;
      if (FigCFDictionaryGetFloatIfPresent()
        && FigCFDictionaryGetFloatIfPresent()
        && FigCFDictionaryGetInt16IfPresent()
        && FigCFDictionaryGetInt16IfPresent()
        && *((float *)&v79 + 1) >= *(float *)&v79
        && HIWORD(v78) > (unsigned __int16)v78
        && (!v16 || FigCFDictionaryGetInt16IfPresent() && FigCFDictionaryGetInt32IfPresent()))
      {
        OSType v20 = CVPixelBufferGetPixelFormatType(a1);
        OSType v21 = v20;
        if (v20 == 875704422)
        {
          unsigned __int16 v67 = HIWORD(v78) - v78;
          size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
          size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
        }
        else
        {
          if (v20 != 1278226742 && v20 != 1278226488)
          {
            uint64_t v25 = 0;
            int v50 = 0;
            uint64_t v6 = 4294950301;
            goto LABEL_105;
          }
          unsigned __int16 v67 = HIWORD(v78) - v78;
          size_t WidthOfPlane = CVPixelBufferGetWidth(a1);
          size_t HeightOfPlane = CVPixelBufferGetHeight(a1);
        }
        size_t v34 = HeightOfPlane;
        uint64_t v35 = CVPixelBufferLockBaseAddress(a1, 1uLL);
        if (!v35)
        {
          size_t v70 = v8;
          if (v21 - 1278226488 <= 0x30 && ((1 << (v21 - 56)) & 0x1400000000001) != 0
            || v21 - 1278226736 <= 6 && ((1 << (v21 - 48)) & 0x45) != 0)
          {
            size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
            BaseAddress = (unsigned __int8 *)CVPixelBufferGetBaseAddress(a1);
          }
          else
          {
            size_t BytesPerRow = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
            BaseAddress = (unsigned __int8 *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
          }
          size_t v38 = BaseAddress;
          if (a4) {
            uint64_t v39 = CMPhotoCreateCVPixelBufferNotBackedByIOSurface(*MEMORY[0x1E4F1CF80], v71, WidthOfPlane, v34, 0, 0, 64, 0, &pixelBuffer);
          }
          else {
            uint64_t v39 = CMPhotoSurfacePoolCreatePixelBuffer(a2, v71, WidthOfPlane, v34, 1, 0, 0, 0, 64, 0, &pixelBuffer);
          }
          uint64_t v6 = v39;
          if (!v39)
          {
            uint64_t v40 = CVPixelBufferLockBaseAddress(pixelBuffer, 0);
            if (!v40)
            {
              size_t v41 = CVPixelBufferGetBytesPerRow(pixelBuffer);
              int v42 = (float *)CVPixelBufferGetBaseAddress(pixelBuffer);
              float v43 = (float)(*((float *)&v79 + 1) - *(float *)&v79) / (float)v67;
              if (v21 == 875704422 || v21 == 1278226488)
              {
                if (v34)
                {
                  uint64_t v44 = 0;
                  int v45 = BYTE2(v77);
                  int v46 = (unsigned __int16)v78;
                  do
                  {
                    if (WidthOfPlane)
                    {
                      for (uint64_t i = 0; i != WidthOfPlane; ++i)
                      {
                        int v48 = v38[i];
                        if (v16 && v48 == v45) {
                          float v49 = v76;
                        }
                        else {
                          float v49 = *(float *)&v79 + (float)((float)(v48 - v46) * v43);
                        }
                        v42[i] = v49;
                      }
                    }
                    v38 += BytesPerRow;
                    int v42 = (float *)((char *)v42 + v41);
                    ++v44;
                  }
                  while (v44 != v34);
                }
              }
              else if (v34)
              {
                uint64_t v51 = 0;
                int v52 = HIWORD(v77);
                int v53 = (unsigned __int16)v78;
                do
                {
                  if (WidthOfPlane)
                  {
                    for (uint64_t j = 0; j != WidthOfPlane; ++j)
                    {
                      int v55 = *(unsigned __int16 *)&v38[2 * j];
                      if (v16 && v55 == v52) {
                        float v56 = v76;
                      }
                      else {
                        float v56 = *(float *)&v79 + (float)((float)(v55 - v53) * v43);
                      }
                      v42[j] = v56;
                    }
                  }
                  v38 += BytesPerRow;
                  int v42 = (float *)((char *)v42 + v41);
                  ++v51;
                }
                while (v51 != v34);
              }
              CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
              CMPhotoPropagateColorPropertiesFromSourceBuffer(a1, pixelBuffer);
              uint64_t v6 = 0;
              uint64_t v25 = pixelBuffer;
              CFTypeRef cf = pixelBuffer;
              CVPixelBufferRef pixelBuffer = 0;
              if (v16) {
                int v50 = LODWORD(v76);
              }
              else {
                int v50 = 0;
              }
              goto LABEL_104;
            }
            uint64_t v6 = v40;
          }
          uint64_t v25 = 0;
          int v50 = 0;
LABEL_104:
          uint64_t v8 = v70;
          CVPixelBufferUnlockBaseAddress(a1, 1uLL);
          goto LABEL_105;
        }
      }
      else
      {
        uint64_t v35 = FigSignalErrorAt();
      }
      uint64_t v6 = v35;
      uint64_t v25 = 0;
      int v50 = 0;
LABEL_105:
      if (pixelBuffer) {
        CFRelease(pixelBuffer);
      }
      if (!v6)
      {
        if (v71 == a3) {
          goto LABEL_132;
        }
        uint64_t HalfPrecisionPixelBufferFromFullPrecisionSource = CMPhotoCreateHalfPrecisionPixelBufferFromFullPrecisionSource(v25, a2, v68, v16, v50, v50, (__CVBuffer **)&v74);
        if (!HalfPrecisionPixelBufferFromFullPrecisionSource)
        {
          if (cf) {
            CFRelease(cf);
          }
          uint64_t v25 = (__CVBuffer *)v74;
          CFTypeRef cf = v74;
          CFTypeRef v74 = 0;
          goto LABEL_132;
        }
        goto LABEL_114;
      }
      goto LABEL_133;
    }
    int v19 = 1278226536;
LABEL_32:
    if (a3 != v19)
    {
LABEL_113:
      uint64_t HalfPrecisionPixelBufferFromFullPrecisionSource = FigSignalErrorAt();
      goto LABEL_114;
    }
    OSType MatchingFullPrecisionPixelFormat = CMPhotoGetMatchingFullPrecisionPixelFormat(a3);
    goto LABEL_34;
  }
  if ((int)a3 <= 1751411058)
  {
    OSType MatchingFullPrecisionPixelFormat = a3;
    if (a3 == 1717855600) {
      goto LABEL_34;
    }
    OSType MatchingFullPrecisionPixelFormat = a3;
    if (a3 == 1717856627) {
      goto LABEL_34;
    }
    unsigned __int16 v18 = 25968;
    goto LABEL_31;
  }
  if (a3 != 1932996149)
  {
    if (a3 == 1751527984) {
      goto LABEL_47;
    }
    unsigned __int16 v18 = 26995;
LABEL_31:
    int v19 = v18 | 0x68640000;
    goto LABEL_32;
  }
LABEL_49:
  CVPixelBufferRef pixelBuffer = 0;
  int v77 = 0;
  uint64_t v79 = 0;
  int v78 = 0;
  if (FigCFDictionaryGetFloatIfPresent())
  {
    if (FigCFDictionaryGetFloatIfPresent())
    {
      if (FigCFDictionaryGetInt16IfPresent())
      {
        if (FigCFDictionaryGetInt16IfPresent())
        {
          uint64_t v26 = v79;
          if (*((float *)&v79 + 1) >= *(float *)&v79)
          {
            unsigned __int16 v27 = HIWORD(v78) - v78;
            if (HIWORD(v78) > (unsigned __int16)v78
              && (!v16
               || FigCFDictionaryGetInt16IfPresent() && FigCFDictionaryGetInt16IfPresent()))
            {
              if (CVPixelBufferGetPixelFormatType(a1) != 1278226488) {
                goto LABEL_133;
              }
              float v76 = 0.0;
              char v75 = 0;
              uint64_t HalfPrecisionPixelBufferFromFullPrecisionSource = CMPhotoGetFixedPointDescriptionFromPixelFormat(a3, (int *)&v76, 0, &v75);
              if (HalfPrecisionPixelBufferFromFullPrecisionSource) {
                goto LABEL_114;
              }
              if (!v75)
              {
                unsigned __int16 v28 = v27;
                uint64_t v69 = v8;
                size_t Width = CVPixelBufferGetWidth(a1);
                size_t Height = CVPixelBufferGetHeight(a1);
                uint64_t HalfPrecisionPixelBufferFromFullPrecisionSource = CVPixelBufferLockBaseAddress(a1, 1uLL);
                if (HalfPrecisionPixelBufferFromFullPrecisionSource) {
                  goto LABEL_114;
                }
                size_t v31 = CVPixelBufferGetBytesPerRow(a1);
                signed int v32 = (unsigned __int8 *)CVPixelBufferGetBaseAddress(a1);
                if (a4) {
                  uint64_t v33 = CMPhotoCreateCVPixelBufferNotBackedByIOSurface(*MEMORY[0x1E4F1CF80], a3, Width, Height, 0, 0, 64, 0, &pixelBuffer);
                }
                else {
                  uint64_t v33 = CMPhotoSurfacePoolCreatePixelBuffer(a2, a3, Width, Height, 1, 0, 0, 0, 64, 0, &pixelBuffer);
                }
                uint64_t v6 = v33;
                if (!v33)
                {
                  uint64_t v57 = CVPixelBufferLockBaseAddress(pixelBuffer, 0);
                  if (!v57)
                  {
                    size_t v58 = CVPixelBufferGetBytesPerRow(pixelBuffer);
                    v59 = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
                    if (Height)
                    {
                      for (uint64_t k = 0; k != Height; ++k)
                      {
                        if (Width)
                        {
                          uint64_t v61 = 0;
                          float v62 = *(float *)&v79;
                          float v63 = (float)(1 << SLOBYTE(v76));
                          do
                          {
                            int v64 = v32[v61];
                            if (v16 && v64 == BYTE2(v77)) {
                              __int16 v65 = v77;
                            }
                            else {
                              __int16 v65 = llroundf((float)(v62+ (float)((float)(v64 - (unsigned __int16)v78)* (float)((float)(*((float *)&v26 + 1) - *(float *)&v26) / (float)v28)))* v63);
                            }
                            *(_WORD *)&v59[2 * v61++] = v65;
                          }
                          while (Width != v61);
                        }
                        v32 += v31;
                        v59 += v58;
                      }
                    }
                    CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
                    CMPhotoPropagateColorPropertiesFromSourceBuffer(a1, pixelBuffer);
                    uint64_t v6 = 0;
                    uint64_t v25 = pixelBuffer;
                    CFTypeRef cf = pixelBuffer;
                    CVPixelBufferRef pixelBuffer = 0;
LABEL_129:
                    uint64_t v8 = v69;
                    CVPixelBufferUnlockBaseAddress(a1, 1uLL);
                    if (pixelBuffer) {
                      CFRelease(pixelBuffer);
                    }
                    if (!v6) {
                      goto LABEL_132;
                    }
                    goto LABEL_133;
                  }
                  uint64_t v6 = v57;
                }
                uint64_t v25 = 0;
                goto LABEL_129;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v6 = FigSignalErrorAt();
  uint64_t v25 = 0;
  if (!v6) {
    goto LABEL_132;
  }
LABEL_133:
  if (v74) {
    CFRelease(v74);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

uint64_t CMPhotoAuxiliaryImageMetadataCreateXMPData(int a1, CGImageMetadataRef metadata, const __CFDictionary *a3, int a4, __CFString *a5, CFDataRef *a6)
{
  CFErrorRef err = 0;
  if (!a6) {
    return 0;
  }
  if (metadata) {
    MutableCopy = CGImageMetadataCreateMutableCopy(metadata);
  }
  else {
    MutableCopy = CGImageMetadataCreateMutable();
  }
  v11 = MutableCopy;
  if (!MutableCopy) {
    return 4294950305;
  }
  if (CGImageMetadataRegisterNamespaceForPrefix(MutableCopy, @"http://ns.apple.com/pixeldatainfo/1.0/", @"apdi", &err))
  {
    if (!a3
      || CFDictionaryGetCount(a3) < 1
      || (context[0] = v11,
          context[1] = @"http://ns.apple.com/pixeldatainfo/1.0/",
          context[2] = @"apdi",
          uint64_t v19 = 0,
          CFDictionaryApplyFunction(a3, (CFDictionaryApplierFunction)_addMetadataApplierFunction, context),
          uint64_t v12 = v19,
          !v19))
    {
      unsigned __int16 v13 = @"disparity";
      switch(a4)
      {
        case 1:
          goto LABEL_15;
        case 2:
          unsigned __int16 v13 = @"depth";
          goto LABEL_15;
        case 3:
          unsigned __int16 v13 = @"alpha";
          goto LABEL_15;
        case 4:
          unsigned __int16 v13 = a5;
          if (a5) {
            goto LABEL_15;
          }
          goto LABEL_17;
        case 5:
          uint64_t v15 = _addValueToMetadata(v11, @"depth", @"AuxiliaryImageType", @"http://ns.apple.com/pixeldatainfo/1.0/", @"apdi");
          if (v15) {
            goto LABEL_28;
          }
          CFStringRef v14 = @"AuxiliaryImageSubType";
          unsigned __int16 v13 = @"portraiteffectsmatte";
          break;
        default:
          unsigned __int16 v13 = @"unknown";
LABEL_15:
          CFStringRef v14 = @"AuxiliaryImageType";
          break;
      }
      uint64_t v15 = _addValueToMetadata(v11, v13, v14, @"http://ns.apple.com/pixeldatainfo/1.0/", @"apdi");
      if (v15)
      {
LABEL_28:
        uint64_t v12 = v15;
      }
      else
      {
LABEL_17:
        CFDataRef XMPData = CGImageMetadataCreateXMPData(v11, 0);
        if (XMPData)
        {
          uint64_t v12 = 0;
          *a6 = XMPData;
        }
        else
        {
          uint64_t v12 = 4294950305;
        }
      }
    }
  }
  else
  {
    uint64_t v12 = 4294950304;
  }
  CFRelease(v11);
  if (err) {
    CFRelease(err);
  }
  return v12;
}

CFStringRef _addMetadataApplierFunction(const __CFString *result, const void *a2, uint64_t a3)
{
  if (!*(_DWORD *)(a3 + 24))
  {
    result = (const __CFString *)_addValueToMetadata(*(CGImageMetadata **)a3, a2, result, *(CFStringRef *)(a3 + 8), *(CFStringRef *)(a3 + 16));
    *(_DWORD *)(a3 + 24) = result;
  }
  return result;
}

uint64_t _addValueToMetadata(CGImageMetadata *a1, CFTypeRef value, const __CFString *a3, CFStringRef xmlns, CFStringRef prefix)
{
  CGImageMetadataTagRef v8 = CGImageMetadataTagCreate(xmlns, prefix, a3, kCGImageMetadataTypeDefault, value);
  if (!v8) {
    return 4294950305;
  }
  int v9 = v8;
  CFStringRef v10 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%@:%@", prefix, a3);
  if (v10)
  {
    CFStringRef v11 = v10;
    if (CGImageMetadataSetTagWithPath(a1, 0, v10, v9)) {
      uint64_t v12 = 0;
    }
    else {
      uint64_t v12 = 4294950305;
    }
    CFRelease(v11);
  }
  else
  {
    uint64_t v12 = 4294950305;
  }
  CFRelease(v9);
  return v12;
}

__CFString *CMPhotoCreateURNFromAuxiliaryImageType(int a1)
{
  int v1 = a1 - 1;
  if ((a1 - 1) > 4 || ((0x17u >> v1) & 1) == 0)
  {
    result = @"unknown";
    return (__CFString *)CFRetain(result);
  }
  result = *off_1E5E2E5E8[v1];
  if (result) {
    return (__CFString *)CFRetain(result);
  }
  return result;
}

uint64_t CMPhotoCreateDeltaPixelBuffer(__CVBuffer *a1, __CVBuffer *a2, uint64_t a3, CVPixelBufferRef *a4, __CFDictionary *a5)
{
  v5 = a4;
  v133[2] = *MEMORY[0x1E4F143B8];
  CVPixelBufferRef v127 = 0;
  int v126 = 0;
  if (!a1) {
    goto LABEL_48;
  }
  uint64_t v6 = a2;
  if (!a2) {
    goto LABEL_48;
  }
  if (!a4) {
    goto LABEL_48;
  }
  int v9 = a1;
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (PixelFormatType != CVPixelBufferGetPixelFormatType(v6)
    || !a3
    || (FigCFDictionaryGetIntIfPresent(), (v126 - 6) <= 0xFFFFFFFA)
    || CVPixelBufferGetPixelFormatType(v9) != 875704422
    || (size_t v124 = 0,
        size_t v125 = 0,
        CMPhotoGetPixelBufferCLAP(v9, 0, 0, &v124, &v125),
        uint64_t v122 = 0,
        uint64_t v123 = 0,
        CMPhotoGetPixelBufferCLAP(v6, 0, 0, &v122, &v123),
        v124 != v122)
    || v125 != v123)
  {
LABEL_48:
    uint64_t v59 = FigSignalErrorAt();
    goto LABEL_90;
  }
  char v11 = 1;
  CVPixelBufferLockBaseAddress(v9, 1uLL);
  CVPixelBufferLockBaseAddress(v6, 1uLL);
  unint64_t BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(875704422);
  int v121 = 0;
  v133[0] = 0;
  v133[1] = 0;
  unint64_t v131 = 0;
  unint64_t v132 = 0;
  v130[0] = 0;
  v130[1] = 0;
  unint64_t v128 = 0;
  unint64_t v129 = 0;
  uint64_t PixelBufferDataPointers = CMPhotoGetPixelBufferDataPointers(v9, 0, 0, &v121, (uint64_t)v133, (uint64_t)&v131, 0);
  if (PixelBufferDataPointers)
  {
    uint64_t v59 = PixelBufferDataPointers;
    goto LABEL_88;
  }
  if (v121 == 2)
  {
    uint64_t v14 = CMPhotoGetPixelBufferDataPointers(v6, 0, 0, &v121, (uint64_t)v130, (uint64_t)&v128, 0);
    if (v14)
    {
      uint64_t v59 = v14;
      goto LABEL_94;
    }
    if (v121 == 2)
    {
      v106 = a5;
      v107 = v6;
      CVPixelBufferRef pixelBuffer = v9;
      v108 = v5;
      size_t v15 = 0;
      v131 /= BytesPerPixelForPixelFormat;
      v132 /= BytesPerPixelForPixelFormat;
      int v16 = 0x80000000;
      int v17 = 0x7FFFFFFF;
      char v18 = 1;
      v128 /= BytesPerPixelForPixelFormat;
      v129 /= BytesPerPixelForPixelFormat;
      do
      {
        char v19 = v18;
        uint64_t v20 = v133[v15];
        uint64_t v21 = v130[v15];
        size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(pixelBuffer, v15);
        size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(pixelBuffer, v15);
        if (HeightOfPlane)
        {
          for (uint64_t i = 0; i != HeightOfPlane; ++i)
          {
            if (WidthOfPlane << v15)
            {
              uint64_t v25 = (unsigned __int8 *)(v21 + *(&v128 + v15) * i);
              uint64_t v26 = (unsigned __int8 *)(v20 + *(&v131 + v15) * i);
              size_t v27 = WidthOfPlane << v15;
              do
              {
                int v29 = *v26++;
                int v28 = v29;
                int v30 = *v25++;
                int v31 = v28 - v30;
                if (v17 >= v31) {
                  int v17 = v31;
                }
                if (v16 <= v31) {
                  int v16 = v31;
                }
                --v27;
              }
              while (v27);
            }
          }
        }
        char v18 = 0;
        size_t v15 = 1;
      }
      while ((v19 & 1) != 0);
      switch(v126)
      {
        case 1:
          BOOL v113 = v17 > -129 && v16 < 128;
          if (v113) {
            uint64_t v32 = 875704422;
          }
          else {
            uint64_t v32 = 2019963440;
          }
          char v11 = 1;
          int v111 = v32;
          uint64_t v33 = CMPhotoSurfacePoolCreatePixelBuffer(@"SurfacePoolOneShot", v32, v124, v125, 1, 0, 0, 1, 0, 0, &v127);
          if (v33) {
            goto LABEL_95;
          }
          CMPhotoRemoveAndPropagateColorPropertiesFromSourceBuffer(pixelBuffer, v127);
          CVPixelBufferLockBaseAddress(v127, 0);
          size_t v34 = 0;
          char v35 = 1;
          do
          {
            char v116 = v35;
            unint64_t v36 = CMPhotoGetBytesPerPixelForPixelFormat(v111);
            size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v127, v34);
            uint64_t v38 = v133[v34];
            uint64_t v39 = v130[v34];
            size_t v40 = BytesPerRowOfPlane / v36;
            BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(v127, v34);
            int v42 = CVPixelBufferGetBaseAddressOfPlane(v127, v34);
            size_t v43 = CVPixelBufferGetWidthOfPlane(pixelBuffer, v34) << v34;
            size_t v44 = CVPixelBufferGetHeightOfPlane(pixelBuffer, v34);
            if (v113)
            {
              char v45 = v116;
              if (v44)
              {
                for (uint64_t j = 0; j != v44; ++j)
                {
                  if (v43)
                  {
                    uint64_t v47 = 0;
                    uint64_t v48 = v38;
                    uint64_t v49 = v39;
                    size_t v50 = v43;
                    do
                    {
                      BaseAddressOfPlane[v47 + j * v40] = (*(unsigned char *)(v48 + j * *(&v131 + v34))
                                                         - *(unsigned char *)(v49 + j * *(&v128 + v34))) ^ 0x80;
                      ++v47;
                      ++v49;
                      ++v48;
                      --v50;
                    }
                    while (v50);
                  }
                }
              }
            }
            else
            {
              char v45 = v116;
              if (v44)
              {
                for (uint64_t k = 0; k != v44; ++k)
                {
                  if (v43)
                  {
                    uint64_t v52 = 0;
                    int v53 = (unsigned __int8 *)(v39 + *(&v128 + v34) * k);
                    v54 = (unsigned __int8 *)(v38 + *(&v131 + v34) * k);
                    size_t v55 = v43;
                    do
                    {
                      __int16 v57 = *v54++;
                      __int16 v56 = v57;
                      __int16 v58 = *v53++;
                      v42[v52 + k * v40] = ((v56 - v58) << 6) ^ 0x8000;
                      ++v52;
                      --v55;
                    }
                    while (v55);
                  }
                }
              }
            }
            char v35 = 0;
            size_t v34 = 1;
          }
          while ((v45 & 1) != 0);
          goto LABEL_86;
        case 2:
          char v11 = 1;
          uint64_t v33 = CMPhotoSurfacePoolCreatePixelBuffer(@"SurfacePoolOneShot", 875704422, v124, v125, 1, 0, 0, 1, 0, 0, &v127);
          if (v33) {
            goto LABEL_95;
          }
          CMPhotoRemoveAndPropagateColorPropertiesFromSourceBuffer(pixelBuffer, v127);
          CVPixelBufferLockBaseAddress(v127, 0);
          size_t v60 = 0;
          char v61 = 1;
          do
          {
            char v117 = v61;
            OSType v62 = CVPixelBufferGetPixelFormatType(v127);
            unint64_t v63 = CMPhotoGetBytesPerPixelForPixelFormat(v62);
            size_t v64 = CVPixelBufferGetBytesPerRowOfPlane(v127, v60);
            uint64_t v65 = v133[v60];
            uint64_t v66 = v130[v60];
            unsigned __int16 v67 = CVPixelBufferGetBaseAddressOfPlane(v127, v60);
            size_t v68 = CVPixelBufferGetWidthOfPlane(pixelBuffer, v60);
            size_t v69 = CVPixelBufferGetHeightOfPlane(pixelBuffer, v60);
            if (v69)
            {
              for (uint64_t m = 0; m != v69; ++m)
              {
                if (v68 << v60)
                {
                  uint64_t v71 = 0;
                  uint64_t v72 = v65;
                  uint64_t v73 = v66;
                  size_t v74 = v68 << v60;
                  do
                  {
                    int v75 = *(unsigned __int8 *)(v72 + m * *(&v131 + v60))
                        - *(unsigned __int8 *)(v73 + m * *(&v128 + v60));
                    v67[v71 + m * (v64 / v63)] = ((v75 + ((unsigned __int16)(v75 & 0x8000) >> 15)) >> 1) ^ 0x80;
                    ++v71;
                    ++v73;
                    ++v72;
                    --v74;
                  }
                  while (v74);
                }
              }
            }
            char v61 = 0;
            size_t v60 = 1;
          }
          while ((v117 & 1) != 0);
          goto LABEL_86;
        case 3:
          char v11 = 1;
          uint64_t v33 = CMPhotoSurfacePoolCreatePixelBuffer(@"SurfacePoolOneShot", 875704422, v124, v125, 1, 0, 0, 1, 0, 0, &v127);
          if (v33) {
            goto LABEL_95;
          }
          CMPhotoRemoveAndPropagateColorPropertiesFromSourceBuffer(pixelBuffer, v127);
          CVPixelBufferLockBaseAddress(v127, 0);
          size_t v76 = 0;
          char v77 = 1;
          do
          {
            char v118 = v77;
            OSType v78 = CVPixelBufferGetPixelFormatType(v127);
            unint64_t v114 = CMPhotoGetBytesPerPixelForPixelFormat(v78);
            size_t v79 = CVPixelBufferGetBytesPerRowOfPlane(v127, v76);
            uint64_t v80 = v133[v76];
            uint64_t v81 = v130[v76];
            uint64_t v82 = CVPixelBufferGetBaseAddressOfPlane(v127, v76);
            size_t v83 = CVPixelBufferGetWidthOfPlane(pixelBuffer, v76);
            size_t v84 = CVPixelBufferGetHeightOfPlane(pixelBuffer, v76);
            if (v84)
            {
              for (uint64_t n = 0; n != v84; ++n)
              {
                if (v83 << v76)
                {
                  uint64_t v86 = 0;
                  uint64_t v87 = v80;
                  uint64_t v88 = v81;
                  size_t v89 = v83 << v76;
                  do
                  {
                    v82[v86 + n * (v79 / v114)] = LUT_compand_9b_to_8b_diff[*(unsigned __int8 *)(v87 + n * *(&v131 + v76))
                                                                          - (unint64_t)*(unsigned __int8 *)(v88 + n * *(&v128 + v76))
                                                                          + 255];
                    ++v86;
                    ++v88;
                    ++v87;
                    --v89;
                  }
                  while (v89);
                }
              }
            }
            char v77 = 0;
            size_t v76 = 1;
          }
          while ((v118 & 1) != 0);
          goto LABEL_86;
        case 4:
          char v11 = 1;
          uint64_t v33 = CMPhotoSurfacePoolCreatePixelBuffer(@"SurfacePoolOneShot", 875704422, v124, v125, 1, 0, 0, 1, 0, 0, &v127);
          if (v33)
          {
LABEL_95:
            uint64_t v59 = v33;
          }
          else
          {
            CMPhotoRemoveAndPropagateColorPropertiesFromSourceBuffer(pixelBuffer, v127);
            CVPixelBufferLockBaseAddress(v127, 0);
            size_t v90 = 0;
            int v91 = v16 - v17;
            char v92 = 1;
            do
            {
              char v119 = v92;
              OSType v93 = CVPixelBufferGetPixelFormatType(v127);
              unint64_t v112 = CMPhotoGetBytesPerPixelForPixelFormat(v93);
              size_t v110 = CVPixelBufferGetBytesPerRowOfPlane(v127, v90);
              uint64_t v115 = v133[v90];
              uint64_t v94 = v130[v90];
              int v95 = CVPixelBufferGetBaseAddressOfPlane(v127, v90);
              size_t v109 = CVPixelBufferGetWidthOfPlane(pixelBuffer, v90);
              size_t v96 = CVPixelBufferGetHeightOfPlane(pixelBuffer, v90);
              if (v96)
              {
                for (iuint64_t i = 0; ii != v96; ++ii)
                {
                  if (v109 << v90)
                  {
                    uint64_t v98 = 0;
                    uint64_t v99 = v115;
                    uint64_t v100 = v94;
                    size_t v101 = v109 << v90;
                    do
                    {
                      int v102 = *(unsigned __int8 *)(v99 + ii * *(&v131 + v90))
                           - (v17
                            + *(unsigned __int8 *)(v100 + ii * *(&v128 + v90)));
                      if (v91 >= 256) {
                        int v102 = llroundf((float)((float)v102 / (float)v91) * 255.0);
                      }
                      ++v100;
                      ++v99;
                      unsigned int v103 = v102 & ~(v102 >> 31);
                      if (v103 >= 0xFF) {
                        LOBYTE(v103) = -1;
                      }
                      v95[v98 + ii * (v110 / v112)] = v103;
                      ++v98;
                      --v101;
                    }
                    while (v101);
                  }
                }
              }
              char v92 = 0;
              size_t v90 = 1;
            }
            while ((v119 & 1) != 0);
            if (v106
              && ((uint64_t v104 = CMPhotoCFDictionarySetInt(v106, @"Min", v17), v104)
               || (uint64_t v104 = CMPhotoCFDictionarySetInt(v106, @"Max", v16), v104)))
            {
              uint64_t v59 = v104;
              char v11 = 0;
            }
            else
            {
LABEL_86:
              char v11 = 0;
              uint64_t v59 = 0;
            }
          }
LABEL_87:
          uint64_t v6 = v107;
          v5 = v108;
          int v9 = pixelBuffer;
          break;
        default:
          uint64_t v59 = FigSignalErrorAt();
          char v11 = 1;
          goto LABEL_87;
      }
      goto LABEL_88;
    }
  }
  uint64_t v59 = 0;
LABEL_94:
  char v11 = 1;
LABEL_88:
  CVPixelBufferUnlockBaseAddress(v9, 1uLL);
  CVPixelBufferUnlockBaseAddress(v6, 1uLL);
  if ((v11 & 1) == 0) {
    CVPixelBufferUnlockBaseAddress(v127, 0);
  }
LABEL_90:
  CVPixelBufferRef *v5 = v127;
  return v59;
}

uint64_t CMPhotoApplyDeltaPixelBuffer(__CVBuffer *a1, __CVBuffer *a2, CFDictionaryRef theDict, CVPixelBufferRef *a4)
{
  v4 = a4;
  v107[2] = *MEMORY[0x1E4F143B8];
  CVPixelBufferRef v101 = 0;
  int v100 = 0;
  if (!a1 || (v5 = a2) == 0)
  {
    uint64_t v33 = FigSignalErrorAt();
    if (!v4) {
      goto LABEL_85;
    }
    goto LABEL_82;
  }
  if (a4)
  {
    if (theDict)
    {
      CMPhotoCFDictionaryGetIntIfPresent(theDict, @"Mode", &v100);
      if ((v100 - 6) >= 0xFFFFFFFB)
      {
        OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
        OSType v84 = CVPixelBufferGetPixelFormatType(v5);
        if (PixelFormatType == 875704422)
        {
          size_t v98 = 0;
          size_t v99 = 0;
          CMPhotoGetPixelBufferCLAP(a1, 0, 0, &v98, &v99);
          uint64_t v96 = 0;
          uint64_t v97 = 0;
          CMPhotoGetPixelBufferCLAP(v5, 0, 0, &v96, &v97);
          if (v98 == v96 && v99 == v97)
          {
            char v8 = 1;
            CVPixelBufferLockBaseAddress(a1, 1uLL);
            CVPixelBufferLockBaseAddress(v5, 1uLL);
            unint64_t BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(875704422);
            unint64_t v10 = CMPhotoGetBytesPerPixelForPixelFormat(v84);
            int v95 = 0;
            v107[0] = 0;
            v107[1] = 0;
            unint64_t v105 = 0;
            unint64_t v106 = 0;
            v104[0] = 0;
            v104[1] = 0;
            unint64_t v102 = 0;
            unint64_t v103 = 0;
            uint64_t PixelBufferDataPointers = CMPhotoGetPixelBufferDataPointers(a1, 0, 0, &v95, (uint64_t)v107, (uint64_t)&v105, 0);
            if (PixelBufferDataPointers) {
              goto LABEL_88;
            }
            if (v95 == 2)
            {
              uint64_t v12 = CMPhotoGetPixelBufferDataPointers(v5, 0, 0, &v95, (uint64_t)v104, (uint64_t)&v102, 0);
              if (v12)
              {
                uint64_t v33 = v12;
                goto LABEL_93;
              }
              if (v95 == 2)
              {
                v105 /= BytesPerPixelForPixelFormat;
                v106 /= BytesPerPixelForPixelFormat;
                v102 /= v10;
                v103 /= v10;
                char v8 = 1;
                uint64_t PixelBufferDataPointers = CMPhotoSurfacePoolCreatePixelBuffer(@"SurfacePoolOneShot", 875704422, v98, v99, 1, 0, 0, 1, 0, 0, &v101);
                if (!PixelBufferDataPointers)
                {
                  CMPhotoRemoveAndPropagateColorPropertiesFromSourceBuffer(a1, v101);
                  CVPixelBufferLockBaseAddress(v101, 0);
                  size_t v79 = v5;
                  uint64_t v80 = v4;
                  switch(v100)
                  {
                    case 1:
                      size_t v13 = 0;
                      char v14 = 1;
                      do
                      {
                        char v88 = v14;
                        uint64_t v15 = v107[v13];
                        uint64_t v16 = v104[v13];
                        unint64_t v17 = CMPhotoGetBytesPerPixelForPixelFormat(875704422);
                        size_t v18 = CVPixelBufferGetBytesPerRowOfPlane(v101, v13) / v17;
                        BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(v101, v13);
                        size_t v20 = CVPixelBufferGetWidthOfPlane(a1, v13) << v13;
                        size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, v13);
                        if (v84 == 875704422)
                        {
                          if (HeightOfPlane)
                          {
                            for (uint64_t i = 0; i != HeightOfPlane; ++i)
                            {
                              if (v20)
                              {
                                uint64_t v23 = 0;
                                uint64_t v24 = v15;
                                uint64_t v25 = v16;
                                size_t v26 = v20;
                                do
                                {
                                  int v27 = *(unsigned __int8 *)(v24 + i * *(&v105 + v13))
                                      + *(unsigned __int8 *)(v25 + i * *(&v102 + v13))
                                      - 128;
                                  unsigned int v28 = v27 & ~(v27 >> 31);
                                  if (v28 >= 0xFF) {
                                    LOBYTE(v28) = -1;
                                  }
                                  BaseAddressOfPlane[v23 + i * v18] = v28;
                                  ++v23;
                                  ++v25;
                                  ++v24;
                                  --v26;
                                }
                                while (v26);
                              }
                            }
                          }
                        }
                        else if (HeightOfPlane)
                        {
                          for (uint64_t j = 0; j != HeightOfPlane; ++j)
                          {
                            if (v20)
                            {
                              for (uint64_t k = 0; k != v20; ++k)
                              {
                                int v31 = *(unsigned __int8 *)(v15 + j * *(&v105 + v13) + k)
                                    + (*(unsigned __int16 *)(v16 + 2 * (k + j * *(&v102 + v13))) >> 6)
                                    - 512;
                                unsigned int v32 = v31 & ~(v31 >> 31);
                                if (v32 >= 0xFF) {
                                  LOBYTE(v32) = -1;
                                }
                                BaseAddressOfPlane[k + j * v18] = v32;
                              }
                            }
                          }
                        }
                        char v14 = 0;
                        size_t v13 = 1;
                      }
                      while ((v88 & 1) != 0);
                      goto LABEL_61;
                    case 2:
                      if (v84 != 875704422) {
                        goto LABEL_37;
                      }
                      size_t v34 = 0;
                      char v35 = 1;
                      do
                      {
                        char v89 = v35;
                        uint64_t v36 = v107[v34];
                        uint64_t v37 = v104[v34];
                        unint64_t v85 = CMPhotoGetBytesPerPixelForPixelFormat(875704422);
                        size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v101, v34);
                        uint64_t v39 = CVPixelBufferGetBaseAddressOfPlane(v101, v34);
                        size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, v34);
                        size_t v41 = CVPixelBufferGetHeightOfPlane(a1, v34);
                        if (v41)
                        {
                          for (uint64_t m = 0; m != v41; ++m)
                          {
                            if (WidthOfPlane << v34)
                            {
                              uint64_t v43 = 0;
                              uint64_t v44 = v36;
                              uint64_t v45 = v37;
                              size_t v46 = WidthOfPlane << v34;
                              do
                              {
                                int v47 = *(unsigned __int8 *)(v44 + m * *(&v105 + v34))
                                    + 2 * *(unsigned __int8 *)(v45 + m * *(&v102 + v34))
                                    - 256;
                                unsigned int v48 = v47 & ~(v47 >> 31);
                                if (v48 >= 0xFF) {
                                  LOBYTE(v48) = -1;
                                }
                                v39[v43 + m * (BytesPerRowOfPlane / v85)] = v48;
                                ++v43;
                                ++v45;
                                ++v44;
                                --v46;
                              }
                              while (v46);
                            }
                          }
                        }
                        char v35 = 0;
                        size_t v34 = 1;
                      }
                      while ((v89 & 1) != 0);
                      goto LABEL_61;
                    case 3:
                      if (v84 != 875704422) {
                        goto LABEL_37;
                      }
                      size_t v49 = 0;
                      char v50 = 1;
                      do
                      {
                        char v90 = v50;
                        uint64_t v51 = v107[v49];
                        uint64_t v52 = v104[v49];
                        unint64_t v86 = CMPhotoGetBytesPerPixelForPixelFormat(875704422);
                        size_t v82 = CVPixelBufferGetBytesPerRowOfPlane(v101, v49);
                        int v53 = CVPixelBufferGetBaseAddressOfPlane(v101, v49);
                        size_t v54 = CVPixelBufferGetWidthOfPlane(a1, v49);
                        size_t v55 = CVPixelBufferGetHeightOfPlane(a1, v49);
                        if (v55)
                        {
                          for (uint64_t n = 0; n != v55; ++n)
                          {
                            if (v54 << v49)
                            {
                              uint64_t v57 = 0;
                              uint64_t v58 = v51;
                              uint64_t v59 = v52;
                              size_t v60 = v54 << v49;
                              do
                              {
                                int v61 = *(unsigned __int8 *)(v58 + n * *(&v105 + v49))
                                    + LUT_expand_8b_to_9b_diff[*(unsigned __int8 *)(v59 + n * *(&v102 + v49))]
                                    - 255;
                                unsigned int v62 = v61 & ~(v61 >> 31);
                                if (v62 >= 0xFF) {
                                  LOBYTE(v62) = -1;
                                }
                                v53[v57 + n * (v82 / v86)] = v62;
                                ++v57;
                                ++v59;
                                ++v58;
                                --v60;
                              }
                              while (v60);
                            }
                          }
                        }
                        char v50 = 0;
                        size_t v49 = 1;
                      }
                      while ((v90 & 1) != 0);
LABEL_61:
                      char v8 = 0;
                      uint64_t v33 = 0;
                      v5 = v79;
                      v4 = v80;
                      break;
                    case 4:
                      unsigned int v93 = 0x80000000;
                      int v94 = 0x7FFFFFFF;
                      if (!CMPhotoCFDictionaryGetIntIfPresent(theDict, @"Min", &v94)
                        || !CMPhotoCFDictionaryGetIntIfPresent(theDict, @"Max", &v93)
                        || v84 != 875704422)
                      {
                        goto LABEL_37;
                      }
                      size_t v63 = 0;
                      int v64 = v93 - v94;
                      char v65 = 1;
                      do
                      {
                        char v91 = v65;
                        uint64_t v66 = v107[v63];
                        uint64_t v67 = v104[v63];
                        unint64_t v87 = CMPhotoGetBytesPerPixelForPixelFormat(875704422);
                        size_t v83 = CVPixelBufferGetBytesPerRowOfPlane(v101, v63);
                        size_t v68 = CVPixelBufferGetBaseAddressOfPlane(v101, v63);
                        size_t v81 = CVPixelBufferGetWidthOfPlane(a1, v63);
                        size_t v69 = CVPixelBufferGetHeightOfPlane(a1, v63);
                        if (v69)
                        {
                          for (iuint64_t i = 0; ii != v69; ++ii)
                          {
                            if (v81 << v63)
                            {
                              uint64_t v71 = 0;
                              uint64_t v72 = v66;
                              uint64_t v73 = v67;
                              size_t v74 = v81 << v63;
                              do
                              {
                                unsigned int v75 = *(unsigned __int8 *)(v73 + ii * *(&v102 + v63));
                                if (v64 >= 256) {
                                  unsigned int v75 = llroundf((float)((float)v64 * (float)v75) / 255.0);
                                }
                                int v76 = *(unsigned __int8 *)(v72 + ii * *(&v105 + v63));
                                ++v73;
                                ++v72;
                                unsigned int v77 = (v75 + v94 + v76) & ~((int)(v75 + v94 + v76) >> 31);
                                if (v77 >= 0xFF) {
                                  LOBYTE(v77) = -1;
                                }
                                v68[v71 + ii * (v83 / v87)] = v77;
                                ++v71;
                                --v74;
                              }
                              while (v74);
                            }
                          }
                        }
                        char v65 = 0;
                        size_t v63 = 1;
                      }
                      while ((v91 & 1) != 0);
                      uint64_t v33 = 0;
                      goto LABEL_78;
                    default:
LABEL_37:
                      uint64_t v33 = FigSignalErrorAt();
LABEL_78:
                      char v8 = 0;
                      break;
                  }
LABEL_79:
                  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
                  CVPixelBufferUnlockBaseAddress(v5, 1uLL);
                  if ((v8 & 1) == 0) {
                    CVPixelBufferUnlockBaseAddress(v101, 0);
                  }
                  if (v4) {
                    goto LABEL_82;
                  }
LABEL_85:
                  if (v101) {
                    CFRelease(v101);
                  }
                  return v33;
                }
LABEL_88:
                uint64_t v33 = PixelBufferDataPointers;
                goto LABEL_79;
              }
            }
            uint64_t v33 = 0;
LABEL_93:
            char v8 = 1;
            goto LABEL_79;
          }
        }
      }
    }
    uint64_t v33 = FigSignalErrorAt();
LABEL_82:
    CVPixelBufferRef *v4 = v101;
    return v33;
  }
  return FigSignalErrorAt();
}

uint64_t CMPhotoSoftwareJFIFTileIteratorCreate()
{
  return FigSignalErrorAt();
}

uint64_t _copyFormatDescriptionForIndex_0(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  if (!a2)
  {
    if (*(void *)(a1 + 296))
    {
      uint64_t v6 = (void *)*MEMORY[0x1E4F1EDF0];
      values = *(void **)(a1 + 296);
      keys[0] = v6;
      CFDictionaryRef v7 = CFDictionaryCreate(*(CFAllocatorRef *)(a1 + 40), (const void **)keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (!v7) {
        return 4294950305;
      }
    }
    else
    {
      CFDictionaryRef v7 = 0;
    }
    uint64_t v8 = CMVideoFormatDescriptionCreate(*(CFAllocatorRef *)(a1 + 40), 0x6A786C20u, *(_DWORD *)(a1 + 88), *(_DWORD *)(a1 + 92), v7, (CMVideoFormatDescriptionRef *)&cf);
    if (v8)
    {
      if (cf) {
        CFRelease(cf);
      }
    }
    else
    {
      *a4 = cf;
      CFTypeRef cf = 0;
    }
    if (v7) {
      CFRelease(v7);
    }
    return v8;
  }
  return FigSignalErrorAt();
}

uint64_t _getThumbnailCountForIndex_0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a4) {
    *a4 = 0;
  }
  return 0;
}

uint64_t _cancelAsyncRequest_0(uint64_t a1, const void *a2)
{
  return 0;
}

uint64_t _getAuxiliaryImageGeometryForIndex_0(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, _DWORD *a7)
{
  if (a2 || a3 < 0 || (a1[36] != 0) <= a3) {
    return FigSignalErrorAt();
  }
  if (a5) {
    *a5 = a1[22];
  }
  if (a6) {
    *a6 = a1[23];
  }
  if (a7) {
    *a7 = a1[33];
  }
  return 0;
}

uint64_t _getAuxiliaryImageTypeForIndex_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, int *a6)
{
  if (!a2)
  {
    if (!(a5 | (unint64_t)a6)) {
      return 0;
    }
    if ((a3 & 0x8000000000000000) == 0 && (*(_DWORD *)(a1 + 144) != 0) > a3)
    {
      if (a5) {
        *(_DWORD *)a5 = 3;
      }
      if (a6)
      {
        if (*(_DWORD *)(a1 + 144) <= 8u) {
          int v6 = 1278226488;
        }
        else {
          int v6 = 1278226742;
        }
        *a6 = v6;
      }
      return 0;
    }
  }
  return FigSignalErrorAt();
}

uint64_t _copyAuxiliaryImageMetadataForIndex_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 || a3 < 0 || (*(_DWORD *)(a1 + 144) != 0) <= a3) {
    return FigSignalErrorAt();
  }
  else {
    return 4294950303;
  }
}

uint64_t _createOutputBufferAttributesForImageIndex_0(uint64_t a1, uint64_t a2, const __CFDictionary *a3, CFMutableDictionaryRef *a4)
{
  if (!a2)
  {
    uint64_t v19 = v4;
    uint64_t v20 = v5;
    uint64_t v10 = *(unsigned int *)(a1 + 88);
    uint64_t v9 = *(unsigned int *)(a1 + 92);
    uint64_t v18 = 0;
    long long v17 = 0u;
    memset(v16, 0, sizeof(v16));
    if (!a4) {
      return 0;
    }
    uint64_t v11 = _determineDecodeStrategy_0(a1, a3, v10, v9, (uint64_t)v16);
    if (v11) {
      return v11;
    }
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(*(CFAllocatorRef *)(a1 + 40), 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!Mutable) {
      return 4294950305;
    }
    CFMutableDictionaryRef v13 = Mutable;
    uint64_t v14 = CMPhotoCFDictionarySetSize(Mutable, *MEMORY[0x1E4F24E10], *((void *)&v17 + 1));
    if (v14 || (uint64_t v14 = CMPhotoCFDictionarySetSize(v13, *MEMORY[0x1E4F24D08], v18), v14))
    {
      uint64_t v15 = v14;
    }
    else
    {
      uint64_t v15 = CMPhotoCFDictionarySetSize(v13, *MEMORY[0x1E4F24C98], 16);
      if (!v15)
      {
        *a4 = v13;
        return v15;
      }
    }
    CFRelease(v13);
    return v15;
  }
  return FigSignalErrorAt();
}

uint64_t _copyExifForIndex_0(uint64_t a1, uint64_t a2, CFIndex idx, uint64_t a4, _DWORD *a5, void *a6)
{
  if (a2)
  {
    return FigSignalErrorAt();
  }
  else
  {
    CFArrayRef Count = *(const __CFArray **)(a1 + 320);
    if (Count) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if ((uint64_t)Count <= idx)
    {
      return 4294950303;
    }
    else
    {
      if (a5) {
        *a5 = 0;
      }
      if (a6)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 320), idx);
        if (ValueAtIndex) {
          CFTypeRef v13 = CFRetain(ValueAtIndex);
        }
        else {
          CFTypeRef v13 = 0;
        }
        uint64_t result = 0;
        *a6 = v13;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t _copyXMPForIndex_0(uint64_t a1, uint64_t a2, CFIndex idx, uint64_t a4, void *a5)
{
  if (a2)
  {
    return FigSignalErrorAt();
  }
  else
  {
    CFArrayRef Count = *(const __CFArray **)(a1 + 328);
    if (Count) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if ((uint64_t)Count <= idx)
    {
      return 4294950303;
    }
    else if (a5)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 328), idx);
      if (ValueAtIndex) {
        CFTypeRef v11 = CFRetain(ValueAtIndex);
      }
      else {
        CFTypeRef v11 = 0;
      }
      uint64_t result = 0;
      *a5 = v11;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t _getTileSizeForIndex(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4, void *a5, void *a6)
{
  if (a4) {
    *a4 = 0;
  }
  if (a5) {
    *a5 = 0;
  }
  if (a6) {
    *a6 = 0;
  }
  return 0;
}

uint64_t _copyImageSubsamplingForIndex_0(uint64_t a1, uint64_t a2, int *a3)
{
  if (!a3) {
    return 0;
  }
  if (!a2)
  {
    if (*(_DWORD *)(a1 + 136) == 3) {
      int v3 = 1;
    }
    else {
      int v3 = 6;
    }
    *a3 = v3;
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t _copyImageIsRGBForIndex_0(uint64_t a1, uint64_t a2, BOOL *a3)
{
  if (!a3) {
    return 0;
  }
  if (!a2)
  {
    *a3 = *(_DWORD *)(a1 + 136) == 3;
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t _copyColorSpaceForIndex_0(uint64_t a1, uint64_t a2, void *a3)
{
  if (a2)
  {
    return FigSignalErrorAt();
  }
  else if (a3)
  {
    uint64_t v5 = *(const void **)(a1 + 288);
    if (v5)
    {
      CFTypeRef v6 = CFRetain(v5);
      uint64_t result = 0;
      *a3 = v6;
    }
    else
    {
      return 4294950303;
    }
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t _createPreparedJXLDecoder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  if (!a5) {
    goto LABEL_18;
  }
  uint64_t v9 = JxlDecoderCreate();
  if (!v9) {
    goto LABEL_19;
  }
  if (!a6)
  {
    uint64_t v10 = 0;
    goto LABEL_8;
  }
  uint64_t v10 = JxlThreadParallelRunnerCreate();
  if (!v10)
  {
LABEL_19:
    uint64_t v11 = 4294950305;
    goto LABEL_16;
  }
  if (JxlDecoderSetParallelRunner())
  {
    uint64_t v11 = 4294950304;
    goto LABEL_16;
  }
LABEL_8:
  if (JxlDecoderSetKeepOrientation()) {
    goto LABEL_17;
  }
  if (JxlDecoderSetUnpremultiplyAlpha()) {
    goto LABEL_17;
  }
  if (JxlDecoderSetDecompressBoxes()) {
    goto LABEL_17;
  }
  CFDataGetBytePtr(*(CFDataRef *)(a1 + 72));
  CFDataGetLength(*(CFDataRef *)(a1 + 72));
  if (JxlDecoderSetInput()) {
    goto LABEL_17;
  }
  if (JxlDecoderSubscribeEvents())
  {
LABEL_18:
    uint64_t v11 = 4294950306;
    goto LABEL_16;
  }
  uint64_t v12 = JxlDecoderProcessInput();
  if (v12 == 2)
  {
LABEL_17:
    uint64_t v11 = 4294950194;
    goto LABEL_16;
  }
  uint64_t v11 = v12;
  *a5 = v9;
  if (a6) {
    *a6 = v10;
  }
LABEL_16:
  JxlThreadParallelRunnerDestroy();
  JxlDecoderDestroy();
  return v11;
}

uint64_t _configureJXLColor(const __CFAllocator *a1, uint64_t a2, int a3, unint64_t a4, CFStringRef *a5, __CFData **a6)
{
  if (CMPhotoIsMatchedJxlDecodeAPI())
  {
    int transferFunctionCodePoint = 0;
    long long v18 = 0u;
    if (JxlDecoderGetColorAsEncodedProfile())
    {
      if (!a3)
      {
        int transferFunctionCodePoint = 0;
        long long v18 = 0u;
        if (!JxlDecoderGetColorAsEncodedProfile())
        {
          int transferFunctionCodePoint = 13;
          JxlDecoderSetPreferredColorProfile();
        }
      }
    }
    else if (JxlDecoderSetPreferredColorProfile())
    {
      return 4294950194;
    }
    if (!(a4 | (unint64_t)a5) || JxlDecoderGetColorAsEncodedProfile())
    {
      uint64_t v11 = 0;
      CFStringRef StringForIntegerCodePoint = 0;
      goto LABEL_10;
    }
    switch(DWORD2(v18))
    {
      case 0xB:
        uint64_t v16 = (uint64_t *)MEMORY[0x1E4F24AC0];
        break;
      case 9:
        uint64_t v16 = (uint64_t *)MEMORY[0x1E4F24AA8];
        break;
      case 1:
        uint64_t v16 = (uint64_t *)MEMORY[0x1E4F24AB0];
        break;
      default:
        uint64_t v11 = 0;
        goto LABEL_30;
    }
    uint64_t v11 = *v16;
LABEL_30:
    CFStringRef StringForIntegerCodePoint = CVTransferFunctionGetStringForIntegerCodePoint(transferFunctionCodePoint);
LABEL_10:
    if (a6)
    {
      if (JxlDecoderGetICCProfileSize())
      {
        uint64_t v14 = 0;
      }
      else
      {
        CFMutableDictionaryRef Mutable = CFDataCreateMutable(a1, 0);
        uint64_t v14 = Mutable;
        if (!Mutable)
        {
          uint64_t v15 = 4294950305;
          goto LABEL_37;
        }
        CFDataSetLength(Mutable, 0);
        CFDataGetMutableBytePtr(v14);
        if (!JxlDecoderGetColorAsICCProfile())
        {
          if (!a4) {
            goto LABEL_16;
          }
          goto LABEL_15;
        }
      }
      uint64_t v15 = 4294950194;
      goto LABEL_37;
    }
    uint64_t v14 = 0;
    if (!a4)
    {
LABEL_16:
      if (a5) {
        *a5 = StringForIntegerCodePoint;
      }
      uint64_t v15 = 0;
      if (a6)
      {
        *a6 = v14;
        return v15;
      }
LABEL_37:
      if (v14) {
        CFRelease(v14);
      }
      return v15;
    }
LABEL_15:
    *(void *)a4 = v11;
    goto LABEL_16;
  }
  return FigSignalErrorAt();
}

void *_jxlOutputCallback(void *result, uint64_t a2, uint64_t a3, unint64_t a4, char *__src)
{
  if (!result) {
    return (void *)FigSignalErrorAt();
  }
  uint64_t v5 = a3 - result[3];
  if (v5 >= 0 && (unint64_t)v5 < result[5])
  {
    uint64_t v6 = a2 - result[2];
    if (v6 < 0)
    {
      a4 = (v6 + a4) & ~((uint64_t)(v6 + a4) >> 63);
      __src -= v6 * result[6];
      uint64_t v6 = 0;
      if (!a4) {
        return result;
      }
    }
    else if (!a4)
    {
      return result;
    }
    unint64_t v7 = result[4];
    if (a4 + v6 <= v7 || (a4 = v7 - v6, (uint64_t)(v7 - v6) >= 1))
    {
      if (!*((_DWORD *)result + 16))
      {
        uint64_t v8 = result[6];
        uint64_t v9 = result[7] * v5;
        uint64_t v10 = v8 * v6;
        if (v8 == 8) {
          return memcpy((void *)(result[10] + v9 + v10), __src, 8 * a4);
        }
        unint64_t v11 = 0;
        uint64_t v12 = v10 + v9;
        do
        {
          *(_DWORD *)(result[10] + v12 + 4 * v11) = *(_DWORD *)&__src[4 * v11] & 0xFF00FF00 | BYTE2(*(_DWORD *)&__src[4 * v11]) | (*(_DWORD *)&__src[4 * v11] << 16);
          ++v11;
        }
        while (v11 < a4);
        return result;
      }
      return (void *)FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t _createMetadataDescriptionArray_0(const __CFAllocator *a1, uint64_t a2, uint64_t a3, CFArrayRef theArray, __CFArray **a5)
{
  if (theArray) {
    CFIndex Count = CFArrayGetCount(theArray);
  }
  else {
    CFIndex Count = 0;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, Count, MEMORY[0x1E4F1D510]);
  if (!Mutable) {
    return 4294950305;
  }
  uint64_t v12 = Mutable;
  uint64_t v20 = a5;
  CFTypeRef v13 = 0;
  unint64_t v14 = 0;
  if (!theArray) {
    goto LABEL_7;
  }
LABEL_6:
  for (unint64_t i = CFArrayGetCount(theArray); ; unint64_t i = 0)
  {
    if (v14 >= i)
    {
      uint64_t v18 = 0;
      *uint64_t v20 = v12;
      if (!v13) {
        return v18;
      }
      goto LABEL_17;
    }
    if (v13) {
      CFRelease(v13);
    }
    uint64_t v16 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFTypeRef v13 = v16;
    if (!v16) {
      break;
    }
    uint64_t v17 = CMPhotoCFDictionarySetInt64(v16, @"DataOffset", a2);
    if (v17 || (uint64_t v17 = CMPhotoCFDictionarySetSize(v13, @"DataLength", a3), v17))
    {
      uint64_t v18 = v17;
      goto LABEL_21;
    }
    CFArrayAppendValue(v12, v13);
    ++v14;
    if (theArray) {
      goto LABEL_6;
    }
LABEL_7:
    ;
  }
  uint64_t v18 = 4294950305;
LABEL_21:
  CFRelease(v12);
  if (v13) {
LABEL_17:
  }
    CFRelease(v13);
  return v18;
}

uint64_t SlimDecompressionPluginClass_create(uint64_t a1, const opaqueCMFormatDescription *a2, const __CFDictionary *a3, uint64_t a4)
{
  pthread_once(&_checkFigNoteTraceOnce_onceToken_0, (void (*)(void))_registerFigNoteTrace_0);
  int v21 = 0;
  if (*(_DWORD *)(a1 + 72) == 1936484717)
  {
    uint64_t v8 = 4294950306;
    if (a2 && a4)
    {
      uint64_t v9 = malloc_type_calloc(1uLL, 0x40uLL, 0x10600402F076322uLL);
      if (v9)
      {
        uint64_t v10 = v9;
        if (a3)
        {
          CMPhotoCFDictionaryGetBooleanIfPresent(a3, @"SyncDecode", v9 + 8);
          CMPhotoCFDictionaryGetInt32IfPresent(a3, @"ThreadPriority", &v21);
        }
        if (v10[8]
          || (uint64_t TargetingPThreadRootQueueWithPriority = FigDispatchQueueCreateTargetingPThreadRootQueueWithPriority(),
              (*((void *)v10 + 2) = TargetingPThreadRootQueueWithPriority) != 0))
        {
          uint64_t v12 = 24;
          while (1)
          {
            Sessiouint64_t n = SlimVideoDecoder_CreateSession(*(void *)a1, (uint64_t *)&v10[v12]);
            if (Session) {
              break;
            }
            Sessiouint64_t n = SlimVideoDecoder_StartSessionInternal(*(void *)&v10[v12], a2);
            if (Session) {
              break;
            }
            v12 += 8;
            if (v12 == 56)
            {
              *((_DWORD *)v10 + 14) = 0;
              BOOL IsSlimX = SlimVideoDecoder_SessionIsSlimX(*((void *)v10 + 3));
              BOOL IsSlimYzip = SlimVideoDecoder_SessionIsSlimYzip(*((void *)v10 + 3));
              BOOL IsSlimHrlc = SlimVideoDecoder_SessionIsSlimHrlc(*((void *)v10 + 3));
              BOOL IsSlimIntc = SlimVideoDecoder_SessionIsSlimIntc(*((void *)v10 + 3));
              BOOL IsSlimUncompressed = SlimVideoDecoder_SessionIsSlimUncompressed(*((void *)v10 + 3));
              if (IsSlimX || IsSlimYzip || IsSlimHrlc || IsSlimIntc || IsSlimUncompressed)
              {
                uint64_t v8 = 0;
                *(void *)(a1 + 64) = v10;
                return v8;
              }
              Sessiouint64_t n = FigSignalErrorAt();
              break;
            }
          }
          uint64_t v8 = Session;
        }
        else
        {
          uint64_t v8 = 4294950305;
        }
        v20[5] = 0u;
        memset(v20, 0, 64);
        v20[4] = (unint64_t)v10;
        SlimDecompressionPluginClass_dispose((uint64_t)v20);
      }
      else
      {
        return 4294950305;
      }
    }
    return v8;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void SlimDecompressionPluginClass_dispose(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 64);
    if (v2)
    {
      uint64_t v3 = *(NSObject **)(v2 + 16);
      if (v3)
      {
        dispatch_barrier_sync(v3, &__block_literal_global_4);
        uint64_t v4 = *(NSObject **)(v2 + 16);
        if (v4) {
          dispatch_release(v4);
        }
      }
      for (uint64_t i = 24; i != 56; i += 8)
      {
        uint64_t v6 = *(const void **)(v2 + i);
        if (v6) {
          CFRelease(v6);
        }
      }
      if (*(void *)v2) {
        CFRelease(*(CFTypeRef *)v2);
      }
      free((void *)v2);
      *(void *)(a1 + 64) = 0;
    }
  }
}

uint64_t SlimDecompressionPluginClass_supportsNativeTiling()
{
  return 1;
}

uint64_t SlimDecompressionPluginClass_copyPixelBufferAttributes(uint64_t a1, _DWORD *a2, CFTypeRef *a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  CFTypeRef cf = 0;
  uint64_t v6 = SlimVideoDecoder_CopyPixelBufferAttributesInternal(*(void *)(v5 + 24), &cf);
  if (v6)
  {
    uint64_t v7 = v6;
  }
  else if (FigCFDictionaryGetInt32IfPresent())
  {
    if (a2) {
      *a2 = 0;
    }
    uint64_t v7 = 0;
    if (a3)
    {
      *a3 = cf;
      return v7;
    }
  }
  else
  {
    uint64_t v7 = 4294950301;
  }
  if (cf) {
    CFRelease(cf);
  }
  return v7;
}

uint64_t SlimDecompressionPluginClass_decode(uint64_t a1, CFDictionaryRef theDict, opaqueCMSampleBuffer *a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 64);
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  if (theDict)
  {
    Value = (__CVBuffer *)CFDictionaryGetValue(theDict, @"CanvasPixelBuffer");
    CFDictionaryRef v10 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"CanvasOrigin");
    if (v10) {
      theDict = CFDictionaryCreateCopy(*(CFAllocatorRef *)a1, v10);
    }
    else {
      theDict = 0;
    }
  }
  else
  {
    Value = 0;
  }
  if (*(unsigned char *)(v8 + 8))
  {
    CFIndex v11 = SlimVideoDecoder_DecodeFrameInternal(*(void *)(v8 + 8 * *(int *)(v8 + 56) + 24), a3, Value, theDict, (void (*)(uint64_t, uint64_t, CFIndex, CVPixelBufferRef))SlimDecompressionPluginClass_callback, a1, a4);
    if (v11)
    {
      uint64_t v12 = v11;
      if (!theDict) {
        return v12;
      }
      goto LABEL_24;
    }
  }
  else
  {
    CFTypeRef v13 = (uint64_t *)malloc_type_calloc(1uLL, 0x30uLL, 0xE004023F974B1uLL);
    if (!v13)
    {
      uint64_t v12 = 4294950305;
      if (!theDict) {
        return v12;
      }
      goto LABEL_24;
    }
    unint64_t v14 = v13;
    uint64_t v15 = *(void *)(v8 + 8 * *(int *)(v8 + 56) + 24);
    if (a3) {
      a3 = (opaqueCMSampleBuffer *)CFRetain(a3);
    }
    if (Value) {
      Value = (__CVBuffer *)CFRetain(Value);
    }
    if (theDict) {
      CFTypeRef v16 = CFRetain(theDict);
    }
    else {
      CFTypeRef v16 = 0;
    }
    *unint64_t v14 = a1;
    v14[1] = v15;
    v14[2] = (uint64_t)a3;
    v14[3] = a4;
    v14[4] = (uint64_t)Value;
    v14[5] = (uint64_t)v16;
    dispatch_async_f(*(dispatch_queue_t *)(v8 + 16), v14, (dispatch_function_t)_dispatch_decodeAsync);
  }
  uint64_t v12 = 0;
  int v17 = *(_DWORD *)(v8 + 56) + 1;
  BOOL v18 = -v17 < 0;
  int v19 = -v17 & 3;
  int v20 = v17 & 3;
  if (!v18) {
    int v20 = -v19;
  }
  *(_DWORD *)(v8 + 56) = v20;
  if (theDict) {
LABEL_24:
  }
    CFRelease(theDict);
  return v12;
}

uint64_t SlimDecompressionPluginClass_getDecoderRestrictions(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  uint64_t v3 = *(void *)(a1 + 64);
  *(void *)a2 = 0x1000000010;
  *(_DWORD *)(a2 + 56) = 0x7FFFFFFF;
  *(void *)(a2 + 48) = 0x7FFFFFFF00000002;
  *(_OWORD *)(a2 + 16) = xmmword_1AB9DD6A0;
  *(_OWORD *)(a2 + 32) = xmmword_1AB9DD6B0;
  uint64_t v4 = SlimVideoDecoder_CopyDecoderRestrictionsInternal(*(void *)(v3 + 24), (CFMutableDictionaryRef *)&cf);
  CFTypeRef v5 = cf;
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = cf == 0;
  }
  if (!v6)
  {
    CMPhotoCFDictionaryGetIntIfPresent((CFDictionaryRef)cf, (const void *)*MEMORY[0x1E4F45538], (void *)a2);
    CMPhotoCFDictionaryGetIntIfPresent((CFDictionaryRef)cf, (const void *)*MEMORY[0x1E4F45530], (void *)(a2 + 4));
    CFTypeRef v5 = cf;
  }
  if (v5) {
    CFRelease(v5);
  }
  return v4;
}

uint64_t SlimDecompressionPluginClass_getDecoderRestrictionsOverlay(uint64_t a1, const opaqueCMFormatDescription *a2, uint64_t a3)
{
  CFTypeRef cf = 0;
  uint64_t DecoderRestrictions = SlimDecompressionPluginClass_getDecoderRestrictions(a1, a3);
  if (DecoderRestrictions) {
    return DecoderRestrictions;
  }
  uint64_t v6 = SlimVideoDecoder_CopyDecoderRestrictionsFromFormatDescript(a2, (CFMutableDictionaryRef *)&cf);
  CFTypeRef v7 = cf;
  if (!v6 && cf)
  {
    CMPhotoCFDictionaryGetIntIfPresent((CFDictionaryRef)cf, (const void *)*MEMORY[0x1E4F45538], (void *)(a3 + 8));
    CMPhotoCFDictionaryGetIntIfPresent((CFDictionaryRef)cf, (const void *)*MEMORY[0x1E4F45530], (void *)(a3 + 12));
    CFTypeRef v7 = cf;
  }
  if (v7) {
    CFRelease(v7);
  }
  return v6;
}

uint64_t SlimDecompressionPluginClass_callback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 56);
  return v8(a1, a3, a4, v9, a2);
}

void _dispatch_decodeAsync(void *a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  SlimVideoDecoder_DecodeFrameInternal(*((void *)a1 + 1), *((opaqueCMSampleBuffer **)a1 + 2), *((__CVBuffer **)a1 + 4), *((const __CFDictionary **)a1 + 5), (void (*)(uint64_t, uint64_t, CFIndex, CVPixelBufferRef))SlimDecompressionPluginClass_callback, v2, *((void *)a1 + 3));
  if (*v3 == 1) {
    kdebug_trace();
  }
  uint64_t v4 = (const void *)*((void *)a1 + 2);
  if (v4) {
    CFRelease(v4);
  }
  CFTypeRef v5 = (const void *)*((void *)a1 + 4);
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = (const void *)*((void *)a1 + 5);
  if (v6) {
    CFRelease(v6);
  }
  free(a1);
}

unint64_t *vectorWritePacked(unint64_t *result, uint64_t a2, int a3)
{
  uint64_t v3 = 0;
  int v4 = 0;
  unint64_t v5 = 0;
  do
  {
    unint64_t v6 = *(unsigned __int16 *)(a2 + v3);
    v5 += v6 << v4;
    v4 += a3;
    if (v4 >= 64)
    {
      *result++ = v5;
      unint64_t v5 = v6 >> (a3 - (v4 - 64));
      v4 -= 64;
    }
    v3 += 2;
  }
  while (v3 != 16);
  if (v4 >= 1)
  {
    unsigned int v7 = v4 + 8;
    do
    {
      *(unsigned char *)uint64_t result = v5;
      uint64_t result = (unint64_t *)((char *)result + 1);
      v5 >>= 8;
      v7 -= 8;
    }
    while (v7 > 8);
  }
  return result;
}

uint64_t YZipEncodeFindFormat(uint64_t a1, int *a2)
{
  if (!a1)
  {
    int v5 = 17;
    uint64_t result = 4294951896;
    goto LABEL_66;
  }
  int v3 = *(_DWORD *)(a1 + 32);
  if (v3 > 1936077361)
  {
    if (v3 <= 1953903151)
    {
      if (v3 > 1937126451)
      {
        if (v3 <= 1952854577)
        {
          if (v3 != 1937126452)
          {
            int v6 = 1952854576;
            goto LABEL_53;
          }
          goto LABEL_60;
        }
        if (v3 == 1952854578) {
          goto LABEL_61;
        }
        int v7 = 1952855092;
        goto LABEL_59;
      }
      if (v3 <= 1937125935)
      {
        if (v3 == 1936077362) {
          goto LABEL_61;
        }
        int v7 = 1936077876;
        goto LABEL_59;
      }
      if (v3 == 1937125936) {
        goto LABEL_54;
      }
      int v8 = 1937125938;
    }
    else
    {
      if (v3 > 2016686641)
      {
        if (v3 > 2019963439)
        {
          if (v3 != 2019963440)
          {
            if (v3 != 2019963442)
            {
              int v7 = 2019963956;
              goto LABEL_59;
            }
LABEL_61:
            uint64_t result = 0;
            int v5 = 11;
            goto LABEL_66;
          }
LABEL_54:
          uint64_t result = 0;
          int v5 = 10;
          goto LABEL_66;
        }
        if (v3 == 2016686642) {
          goto LABEL_61;
        }
        int v7 = 2016687156;
LABEL_59:
        if (v3 != v7) {
          goto LABEL_64;
        }
LABEL_60:
        uint64_t result = 0;
        int v5 = 12;
        goto LABEL_66;
      }
      if (v3 > 1953903667)
      {
        if (v3 != 1953903668)
        {
          int v6 = 2016686640;
          goto LABEL_53;
        }
        goto LABEL_60;
      }
      if (v3 == 1953903152) {
        goto LABEL_54;
      }
      int v8 = 1953903154;
    }
    if (v3 != v8) {
      goto LABEL_64;
    }
    goto LABEL_61;
  }
  uint64_t result = 0;
  if (v3 > 1278226535)
  {
    if (v3 > 1651925815)
    {
      if (v3 > 1751410031)
      {
        if (v3 != 1751410032)
        {
          int v5 = 0;
          if (v3 == 1751411059) {
            goto LABEL_66;
          }
          int v6 = 1936077360;
LABEL_53:
          if (v3 == v6) {
            goto LABEL_54;
          }
          goto LABEL_64;
        }
LABEL_27:
        int v5 = 0;
        goto LABEL_66;
      }
      if (v3 == 1651925816 || v3 == 1652056888)
      {
        uint64_t v9 = *(int *)(a1 + 8360);
        if (v9 < 9)
        {
          uint64_t result = dword_1AB9DD6F0[v9];
          int v5 = dword_1AB9DD714[v9];
          goto LABEL_66;
        }
      }
LABEL_64:
      int v5 = 17;
      uint64_t result = 4294951891;
      goto LABEL_66;
    }
    if ((v3 - 1278226736) <= 6 && ((1 << (v3 - 48)) & 0x45) != 0) {
      goto LABEL_27;
    }
    unsigned __int16 v10 = 12392;
LABEL_63:
    int v5 = 0;
    if (v3 == (v10 | 0x4C300000)) {
      goto LABEL_66;
    }
    goto LABEL_64;
  }
  if (v3 <= 875836517)
  {
    if (v3 > 875704933)
    {
      if (v3 == 875704934 || v3 == 875704950)
      {
        uint64_t result = 0;
        int v5 = 8;
        goto LABEL_66;
      }
    }
    else if (v3 == 875704422 || v3 == 875704438)
    {
      uint64_t result = 0;
      int v5 = 7;
      goto LABEL_66;
    }
    goto LABEL_64;
  }
  if (v3 <= 1111970368)
  {
    if (v3 == 875836518 || v3 == 875836534)
    {
      uint64_t result = 0;
      int v5 = 9;
      goto LABEL_66;
    }
    goto LABEL_64;
  }
  if (v3 != 1111970369)
  {
    unsigned __int16 v10 = 12344;
    goto LABEL_63;
  }
  uint64_t result = 0;
  int v5 = 14;
LABEL_66:
  if (a2) {
    *a2 = v5;
  }
  return result;
}

uint64_t YZipEncodeFindDataLength(uint64_t a1, uint64_t *a2)
{
  uint64_t max_payload_size = a1;
  int v9 = 17;
  if (a1)
  {
    uint64_t Format = YZipEncodeFindFormat(a1, &v9);
    if (Format)
    {
      uint64_t v5 = Format;
      uint64_t max_payload_size = 0;
    }
    else
    {
      CMPhotoGetBitDepthForPixelFormat(*(unsigned int *)(max_payload_size + 32));
      if (yzip_codec_create())
      {
        uint64_t v6 = yzip_image_create();
        if (v6)
        {
          uint64_t v7 = v6;
          uint64_t max_payload_size = yzip_image_get_max_payload_size();
          if (max_payload_size) {
            uint64_t v5 = 0;
          }
          else {
            uint64_t v5 = 4294951893;
          }
          MEMORY[0x1AD110EE0](v7);
        }
        else
        {
          uint64_t max_payload_size = 0;
          uint64_t v5 = 4294951895;
        }
        yzip_codec_destroy();
      }
      else
      {
        uint64_t max_payload_size = 0;
        uint64_t v5 = 4294951895;
      }
    }
  }
  else
  {
    uint64_t v5 = 4294951896;
  }
  if (a2) {
    *a2 = max_payload_size;
  }
  return v5;
}

uint64_t YZipEncodeFrame(uint64_t a1, uint64_t *a2)
{
  int v10 = 17;
  if (!a1
    || (unint64_t)(*(void *)(a1 + 40) - 3) < 0xFFFFFFFFFFFFFFFELL
    || (*(_DWORD *)(a1 + 48) - 3) < 0xFFFFFFFE)
  {
    return 4294951896;
  }
  uint64_t Format = YZipEncodeFindFormat(a1, &v10);
  if (!Format)
  {
    CMPhotoGetBitDepthForPixelFormat(*(unsigned int *)(a1 + 32));
    if (yzip_codec_create())
    {
      uint64_t v6 = yzip_image_create();
      if (v6)
      {
        uint64_t v7 = v6;
        if (yzip_image_get_max_payload_size())
        {
          if (*(void *)(a1 + 40))
          {
            unint64_t v8 = 0;
            do
            {
              yzip_image_set_plane_data();
              ++v8;
            }
            while (*(void *)(a1 + 40) > v8);
          }
          uint64_t v9 = yzip_image_encode();
          *a2 = v9;
          if (v9) {
            uint64_t Format = 0;
          }
          else {
            uint64_t Format = 4294951894;
          }
        }
        else
        {
          uint64_t Format = 4294951893;
        }
        MEMORY[0x1AD110EE0](v7);
      }
      else
      {
        uint64_t Format = 4294951895;
      }
      yzip_codec_destroy();
    }
    else
    {
      return 4294951895;
    }
  }
  return Format;
}

uint64_t UncompressedCopyFrame(unsigned int *a1, CVPixelBufferRef pixelBuffer, OpaqueCMBlockBuffer *a3, size_t *a4)
{
  if (!pixelBuffer) {
    return 4294951896;
  }
  uint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  uint64_t BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(PixelFormatType);
  if (CVPixelBufferGetPlaneCount(pixelBuffer) >= 2 && CVPixelBufferGetPlaneCount(pixelBuffer) != 1)
  {
    if (!CVPixelBufferGetPlaneCount(pixelBuffer)) {
      goto LABEL_37;
    }
    uint64_t v30 = BytesPerPixelForPixelFormat;
    uint64_t v20 = 0;
    size_t v19 = 0;
    CFAllocatorRef v21 = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
    int v29 = a4;
    while (1)
    {
      size_t v31 = v19;
      v22 = *(char **)&a1[2 * v20 + 16];
      uint64_t v23 = a1[v20 + 2];
      __int16 v32 = 0;
      if (CMPhotoPixelFormatIsSubsampled(PixelFormatType, (unsigned char *)&v32 + 1, &v32, 0, 0)) {
        return 4294951894;
      }
      uint64_t v24 = a1[1];
      if (v20)
      {
        if ((_BYTE)v32) {
          break;
        }
      }
      if (v20) {
        goto LABEL_23;
      }
      unsigned int v26 = *a1;
LABEL_27:
      uint64_t v27 = v26;
      if (CMPhotoPixelFormatIsPackedYUV(PixelFormatType)) {
        size_t v28 = 4 * (((unint64_t)(v27 + 2) * (unsigned __int128)0x5555555555555556uLL) >> 64);
      }
      else {
        size_t v28 = v30 * v27;
      }
      if (v24)
      {
        v31 += v24 * v28;
        while (!CMBlockBufferAppendMemoryBlock(a3, v22, v28, v21, 0, 0, v28, 0))
        {
          v22 += v23;
          if (!--v24) {
            goto LABEL_34;
          }
        }
        return 4294951894;
      }
LABEL_34:
      a4 = v29;
      size_t v19 = v31;
      if (CVPixelBufferGetPlaneCount(pixelBuffer) <= ++v20) {
        goto LABEL_38;
      }
    }
    uint64_t v24 = (v24 + 1) >> 1;
LABEL_23:
    unsigned int v25 = *a1;
    if (HIBYTE(v32)) {
      unsigned int v26 = v25 + (v25 | 0xFFFFFFFE) + 2;
    }
    else {
      unsigned int v26 = 2 * v25;
    }
    goto LABEL_27;
  }
  int v10 = (char *)*((void *)a1 + 8);
  unint64_t v12 = a1[1];
  uint64_t v11 = a1[2];
  int IsPackedRAW = CMPhotoPixelFormatIsPackedRAW(PixelFormatType);
  uint64_t v14 = *a1;
  if (IsPackedRAW)
  {
    size_t v15 = CMPhotoAlignValue(5 * ((v14 + 3) >> 2), 0x140uLL);
    if (!v12) {
      goto LABEL_37;
    }
  }
  else
  {
    size_t v17 = BytesPerPixelForPixelFormat * v14;
    if (PixelFormatType == 1647719528)
    {
      v12 >>= 1;
      size_t v15 = 2 * v17;
    }
    else
    {
      size_t v15 = v17;
    }
    if (!v12)
    {
LABEL_37:
      size_t v19 = 0;
LABEL_38:
      uint64_t result = 0;
      if (a4) {
        *a4 = v19;
      }
      return result;
    }
  }
  CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
  size_t v19 = v15 * v12;
  while (!CMBlockBufferAppendMemoryBlock(a3, v10, v15, v18, 0, 0, v15, 0))
  {
    v10 += v11;
    if (!--v12) {
      goto LABEL_38;
    }
  }
  return 4294951894;
}

uint64_t HrlcEncodeFrame(uint64_t a1, void *a2)
{
  int v4 = *(_DWORD *)(a1 + 32);
  uint64_t v19 = 0;
  memset(v18, 0, sizeof(v18));
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v11 = 0u;
  uint64_t v5 = setjmp((int *)v18 + 1);
  if (!v5)
  {
    uint64_t v6 = *(void *)(a1 + 88);
    unint64_t v7 = *(void *)(a1 + 56);
    *((void *)&v12 + 1) = v6 + v7;
    HIDWORD(v11) = *(_DWORD *)(a1 + 8);
    if (v7 >= 0x10)
    {
      uint64_t v8 = v6;
      *(_DWORD *)uint64_t v6 = 1399614808;
      *(_DWORD *)(v6 + 4) = v4;
      *(_WORD *)(v6 + 8) = *(_DWORD *)a1;
      *(_WORD *)(v6 + 10) = *(_DWORD *)(a1 + 4);
      *(_WORD *)(v6 + 12) = 0;
      *(_WORD *)(v6 + 14) = *(_DWORD *)(a1 + 8356);
      uint64_t v9 = v6 + 16;
      *(void *)&long long v12 = v6 + 16;
      *(void *)&long long v16 = a1;
      DWORD1(v13) = 0;
      BYTE8(v13) = 0;
      if (*(_DWORD *)(a1 + 120))
      {
        uint64_t v5 = 0;
      }
      else
      {
        HIDWORD(v17) = 0;
        LODWORD(v18[0]) = 0;
        if (v4 == 1278226488)
        {
          uint64_t v5 = SlimHrlcEncode_C(a1, (uint64_t)&v11);
          uint64_t v9 = v12;
          uint64_t v8 = *(void *)(a1 + 88);
        }
        else
        {
          uint64_t v5 = 4294951891;
        }
      }
      *a2 = v9 - v8;
    }
    else
    {
      return 4294951888;
    }
  }
  return v5;
}

uint64_t IntcEncodeFrame(__CVBuffer *a1, uint64_t a2, void *a3)
{
  int v6 = *(_DWORD *)(a2 + 32);
  uint64_t v23 = 0;
  memset(v22, 0, sizeof(v22));
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v15 = 0u;
  uint64_t v7 = setjmp((int *)v22 + 1);
  if (!v7)
  {
    uint64_t v8 = *(void *)(a2 + 88);
    unint64_t v9 = *(void *)(a2 + 56);
    *((void *)&v16 + 1) = v8 + v9;
    HIDWORD(v15) = *(_DWORD *)(a2 + 8);
    if (v9 >= 0x10)
    {
      uint64_t v10 = v8;
      *(_DWORD *)uint64_t v8 = 1399614808;
      *(_DWORD *)(v8 + 4) = v6;
      *(_WORD *)(v8 + 8) = *(_DWORD *)a2;
      *(_WORD *)(v8 + 10) = *(_DWORD *)(a2 + 4);
      *(_WORD *)(v8 + 12) = 0;
      uint64_t v11 = v8 + 14;
      *(void *)&long long v16 = v11;
      *(void *)&long long v20 = a2;
      DWORD1(v17) = 0;
      BYTE8(v17) = 0;
      if (*(_DWORD *)(a2 + 120))
      {
        uint64_t v12 = 0;
        uint64_t v13 = v11;
      }
      else
      {
        HIDWORD(v21) = 0;
        LODWORD(v22[0]) = 0;
        uint64_t v12 = CMPhotoInterchangeCompactEncode(a1, (unsigned int *)a2, (uint64_t)&v15);
        uint64_t v13 = v16;
        uint64_t v10 = *(void *)(a2 + 88);
      }
      *a3 = v13 - v10;
      return v12;
    }
    else
    {
      return 4294951888;
    }
  }
  return v7;
}

uint64_t SlimXEncodeFrame(unint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 64);
  int v5 = *(_DWORD *)a1;
  int v6 = *(_DWORD *)(a1 + 4);
  unsigned int v7 = *(_DWORD *)(a1 + 8352);
  unsigned int v8 = *(_DWORD *)(a1 + 8360);
  uint64_t v9 = *(unsigned int *)(a1 + 32);
  uint64_t v131 = 0;
  memset(v130, 0, sizeof(v130));
  long long v128 = 0u;
  long long v129 = 0u;
  long long v126 = 0u;
  long long v127 = 0u;
  long long v124 = 0u;
  long long v125 = 0u;
  long long v123 = 0u;
  uint64_t v10 = setjmp((int *)v130 + 1);
  if (!v10)
  {
    uint64_t v122 = a2;
    int v119 = v5;
    uint64_t v11 = *(void *)(a1 + 88);
    *((void *)&v124 + 1) = v11 + *(void *)(a1 + 56);
    HIDWORD(v123) = *(_DWORD *)(a1 + 8);
    *(_DWORD *)uint64_t v11 = 1399614808;
    *(_DWORD *)(v11 + 4) = v9;
    *(_WORD *)(v11 + 8) = *(_DWORD *)a1;
    *(_WORD *)(v11 + 10) = *(_DWORD *)(a1 + 4);
    *(_WORD *)(v11 + 12) = 0;
    *(void *)&long long v124 = v11 + 14;
    long long v128 = a1;
    unint64_t BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(v9);
    DWORD1(v125) = 0;
    BYTE8(v125) = 0;
    LODWORD(v129) = 64;
    DWORD1(v129) = v5;
    unsigned int v13 = *(_DWORD *)(a1 + 120);
    unsigned int v14 = v13;
    if (v13 <= 7)
    {
      if (v13) {
        unsigned int v15 = 10 - v13;
      }
      else {
        unsigned int v15 = 0;
      }
      HIDWORD(v129) = v14;
      LODWORD(v130[0]) = v15;
LABEL_10:
      uint64_t v121 = v4;
      int v16 = v6;
      if ((int)v9 <= 1651926375)
      {
        if ((int)v9 > 1278226535)
        {
          if ((int)v9 <= 1647719527)
          {
            if ((int)v9 > 1278226741)
            {
              if (v9 != 1278226742)
              {
                if (v9 == 1380411457)
                {
                  uint64_t v10 = 4294951892;
                  if ((int)((v119 + 3) & 0xFFFFFFFC) > (int)(HIDWORD(v123) / BytesPerPixelForPixelFormat)
                    || (int)((v6 + 3) & 0xFFFFFFFC) > v6 + *(_DWORD *)(a1 + 24))
                  {
                    goto LABEL_377;
                  }
                  LODWORD(v125) = 12;
                  if (v7 == -1)
                  {
                    unsigned __int16 v55 = 0;
                  }
                  else
                  {
                    if (v7 > 0xF) {
                      goto LABEL_271;
                    }
                    unsigned __int16 v55 = v7;
                  }
                  *(_WORD *)(v11 + 12) = v55;
                  DWORD1(v125) = v55;
                  if (v6 >= 1)
                  {
                    int v92 = 0;
                    while (1)
                    {
                      encodeStripStart((uint64_t)&v123, v92);
                      if (v119 >= 1) {
                        break;
                      }
LABEL_309:
                      v92 += 4;
                      uint64_t v10 = 0;
                      if (v92 >= v6) {
                        goto LABEL_377;
                      }
                    }
                    int v93 = 0;
                    int v94 = 0;
                    while (1)
                    {
                      *(void *)&long long v123 = v4 + (v94 & 0xFFFFFFE0) + (HIDWORD(v123) * v92);
                      uint64_t v27 = SlimXEncodeBlocks_NEON((uint64_t *)&v123);
                      if (v27) {
                        goto LABEL_375;
                      }
                      v94 += 32;
                      v93 += 4;
                      if (v119 <= v93) {
                        goto LABEL_309;
                      }
                    }
                  }
                  goto LABEL_376;
                }
                uint64_t v10 = 4294951891;
                if (v9 != 1647589490) {
                  goto LABEL_377;
                }
                uint64_t v10 = 4294951892;
                if ((int)((v119 + 3) & 0xFFFFFFFC) > (int)(HIDWORD(v123) / BytesPerPixelForPixelFormat)
                  || (int)((v6 + 3) & 0xFFFFFFFC) > v6 + *(_DWORD *)(a1 + 24))
                {
                  goto LABEL_377;
                }
                LODWORD(v125) = 19;
                if (v7 == -1)
                {
                  unsigned __int16 v21 = 0;
                }
                else
                {
                  if (v7 > 0xF) {
                    goto LABEL_271;
                  }
                  unsigned __int16 v21 = v7;
                }
                *(_WORD *)(v11 + 12) = v21;
                DWORD1(v125) = v21;
                if (v6 >= 1)
                {
                  int v86 = 0;
                  while (1)
                  {
                    encodeStripStart((uint64_t)&v123, v86);
                    if (v119 >= 1) {
                      break;
                    }
LABEL_291:
                    v86 += 4;
                    uint64_t v10 = 0;
                    if (v86 >= v6) {
                      goto LABEL_377;
                    }
                  }
                  int v87 = 0;
                  int v88 = 0;
                  while (1)
                  {
                    *(void *)&long long v123 = v4 + (v88 & 0xFFFFFFF8) + (HIDWORD(v123) * v86);
                    uint64_t v27 = SlimXEncodeBlocks_NEON((uint64_t *)&v123);
                    if (v27) {
                      goto LABEL_375;
                    }
                    v88 += 24;
                    v87 += 4;
                    if (v119 <= v87) {
                      goto LABEL_291;
                    }
                  }
                }
                goto LABEL_376;
              }
            }
            else if (v9 != 1278226536)
            {
              if (v9 != 1278226736)
              {
                int v17 = 1278226738;
                goto LABEL_97;
              }
LABEL_98:
              uint64_t v32 = v11;
              unint64_t v33 = BytesPerPixelForPixelFormat;
              if (CMPhotoGetBitDepthForPixelFormat(v9) == 8) {
                LOWORD(v34) = 0;
              }
              else {
                uint64_t v34 = 16 - CMPhotoGetBitDepthForPixelFormat(v9);
              }
              unint64_t BytesPerPixelForPixelFormat = v33;
              if (v7 == -1)
              {
                unsigned __int16 v35 = v34;
                goto LABEL_105;
              }
              if (v7 <= 0xF)
              {
                unsigned __int16 v35 = v7;
LABEL_105:
                *(_WORD *)(v32 + 12) = v35;
                DWORD1(v125) = v35;
                goto LABEL_106;
              }
LABEL_271:
              uint64_t v10 = 4294951896;
              goto LABEL_377;
            }
            goto LABEL_118;
          }
          if ((int)v9 <= 1651519797)
          {
            if (v9 == 1647719528)
            {
              uint64_t v10 = 4294951892;
              if ((int)((v119 + 7) & 0xFFFFFFF8) > (int)(((unint64_t)HIDWORD(v123) >> 1)
                                                        / BytesPerPixelForPixelFormat)
                || (int)((v6 + 7) & 0xFFFFFFF8) > v6 + *(_DWORD *)(a1 + 24))
              {
                goto LABEL_377;
              }
              if ((v8 & 0xFFFFFFFE) == 6)
              {
                LODWORD(v125) = 23;
                if (v7 == -1)
                {
                  unsigned __int16 v54 = 0;
                }
                else
                {
                  if (v7 > 0xF) {
                    goto LABEL_271;
                  }
                  unsigned __int16 v54 = v7;
                }
                *(_WORD *)(v11 + 12) = v54;
                DWORD1(v125) = v54;
                if (v6 >= 1)
                {
                  uint64_t v103 = 16 * BytesPerPixelForPixelFormat;
                  int v104 = 0;
                  int v105 = 0;
                  while (1)
                  {
                    encodeStripStart((uint64_t)&v123, v104);
                    if (v119 >= 1) {
                      break;
                    }
LABEL_339:
                    v104 += 8;
                    v105 += 4;
                    uint64_t v10 = 0;
                    if (v104 >= v6) {
                      goto LABEL_377;
                    }
                  }
                  int v106 = 0;
                  uint64_t v107 = v121;
                  while (1)
                  {
                    *(void *)&long long v123 = v107 + (v105 * HIDWORD(v123));
                    uint64_t v27 = SlimXEncodeBlocks_NEON((uint64_t *)&v123);
                    if (v27) {
                      goto LABEL_375;
                    }
                    v107 += v103;
                    v106 += 8;
                    if (v119 <= v106) {
                      goto LABEL_339;
                    }
                  }
                }
                goto LABEL_376;
              }
              goto LABEL_119;
            }
            if (v9 != 1650942776)
            {
              int v20 = 1650943796;
              goto LABEL_65;
            }
            goto LABEL_71;
          }
          if (v9 == 1651519798 || v9 == 1651847472) {
            goto LABEL_128;
          }
          int v31 = 1651925816;
          goto LABEL_127;
        }
        if ((int)v9 > 875704949)
        {
          if ((int)v9 <= 1111970368)
          {
            if (v9 != 875704950 && v9 != 875836518)
            {
              int v18 = 875836534;
              goto LABEL_46;
            }
            goto LABEL_106;
          }
          int v28 = v119;
          if (v9 == 1111970369)
          {
            uint64_t v10 = 4294951892;
            if ((int)((v119 + 3) & 0xFFFFFFFC) > (int)(HIDWORD(v123) / BytesPerPixelForPixelFormat)
              || (int)((v6 + 3) & 0xFFFFFFFC) > v6 + *(_DWORD *)(a1 + 24))
            {
              goto LABEL_377;
            }
            LODWORD(v125) = 6;
            if (v7 == -1)
            {
              unsigned __int16 v56 = 0;
            }
            else
            {
              if (v7 > 0xF) {
                goto LABEL_271;
              }
              unsigned __int16 v56 = v7;
            }
            *(_WORD *)(v11 + 12) = v56;
            DWORD1(v125) = v56;
            if (v6 >= 1)
            {
              int v95 = 0;
              while (1)
              {
                encodeStripStart((uint64_t)&v123, v95);
                if (v119 >= 1) {
                  break;
                }
LABEL_318:
                v95 += 4;
                uint64_t v10 = 0;
                if (v95 >= v6) {
                  goto LABEL_377;
                }
              }
              int v96 = 0;
              int v97 = 0;
              while (1)
              {
                *(void *)&long long v123 = v4 + (v97 & 0xFFFFFFF0) + (HIDWORD(v123) * v95);
                uint64_t v27 = SlimXEncodeBlocks_NEON((uint64_t *)&v123);
                if (v27) {
                  goto LABEL_375;
                }
                v97 += 16;
                v96 += 4;
                if (v119 <= v96) {
                  goto LABEL_318;
                }
              }
            }
            goto LABEL_376;
          }
          float v29 = 1.0;
          if (v9 == 1278226488) {
            goto LABEL_110;
          }
          uint64_t v10 = 4294951891;
          if (v9 != 1278226534) {
            goto LABEL_377;
          }
LABEL_84:
          if (!v14)
          {
            while ((v6 & ~(v6 >> 31)) != v14)
            {
              *(void *)&long long v123 = v4 + HIDWORD(v123) * v14;
              unsigned int v30 = v14 + 1;
              uint64_t v10 = SlimXEncodeF32Row((unsigned int **)&v123, v6 - 1 == v14);
              unsigned int v14 = v30;
              if (v10) {
                goto LABEL_377;
              }
            }
            goto LABEL_376;
          }
          goto LABEL_119;
        }
        if ((int)v9 > 875704421)
        {
          if (v9 != 875704422 && v9 != 875704438)
          {
            int v18 = 875704934;
LABEL_46:
            uint64_t v10 = 4294951891;
            if (v9 != v18) {
              goto LABEL_377;
            }
          }
LABEL_106:
          if ((v9 & 0xFFFFFFFD) == 0x4C303130) {
            float v29 = 1.0;
          }
          else {
            float v29 = 0.8;
          }
          int v28 = v119;
LABEL_110:
          uint64_t v10 = 4294951892;
          if ((int)((v28 + 15) & 0xFFFFFFF0) > (int)(HIDWORD(v123) / BytesPerPixelForPixelFormat)
            || (int)((v6 + 3) & 0xFFFFFFFC) > v6 + *(_DWORD *)(a1 + 24))
          {
            goto LABEL_377;
          }
          unint64_t v120 = BytesPerPixelForPixelFormat;
          if (CMPhotoGetBitDepthForPixelFormat(v9) == 8)
          {
            LODWORD(v125) = 0;
          }
          else
          {
            if (CMPhotoGetBitDepthForPixelFormat(v9) == 10)
            {
              int v36 = 10;
            }
            else if (v9 == 1751527984)
            {
              int v36 = 15;
            }
            else
            {
              int v36 = 24;
            }
            LODWORD(v125) = v36;
          }
          if (v6 >= 1)
          {
            int v57 = 0;
            while (1)
            {
              encodeStripStart((uint64_t)&v123, (int)(float)(v29 * (float)v57));
              if (v119 >= 1) {
                break;
              }
LABEL_199:
              v57 += 4;
              if (v57 >= v16) {
                goto LABEL_200;
              }
            }
            int v58 = 0;
            uint64_t v59 = v4;
            while (1)
            {
              *(void *)&long long v123 = v59 + (v57 * HIDWORD(v123));
              uint64_t v27 = SlimXEncodeBlocks_NEON((uint64_t *)&v123);
              if (v27) {
                goto LABEL_375;
              }
              v59 += 16 * v120;
              v58 += 16;
              if (v119 <= v58) {
                goto LABEL_199;
              }
            }
          }
LABEL_200:
          uint64_t v10 = 0;
          if ((int)v9 <= 1278226735)
          {
            if ((v9 - 1278226488) <= 0x30
              && ((1 << (v9 - 56)) & 0x1400000000001) != 0)
            {
              goto LABEL_377;
            }
            int v60 = 825437747;
          }
          else if ((int)v9 > 1717856626)
          {
            if ((int)v9 > 1751411058) {
              int v60 = 1932996149;
            }
            else {
              int v60 = 1751410032;
            }
          }
          else
          {
            if ((v9 - 1278226736) <= 6 && ((1 << (v9 - 48)) & 0x45) != 0) {
              goto LABEL_377;
            }
            int v60 = 1717855600;
          }
          if (v9 != v60)
          {
            uint64_t v77 = *(void *)(a1 + 72);
            HIDWORD(v123) = *(_DWORD *)(a1 + 12);
            if (BYTE8(v129)) {
              HIDWORD(v129) = 0;
            }
            if (CMPhotoGetBitDepthForPixelFormat(v9) == 8)
            {
              int v78 = 1;
            }
            else
            {
              if (CMPhotoGetBitDepthForPixelFormat(v9) != 10)
              {
                unint64_t v98 = v120;
                int v99 = v119;
                if (v9 == 1751527984)
                {
                  LODWORD(v125) = 16;
                  goto LABEL_347;
                }
                LODWORD(v125) = 25;
LABEL_327:
                int v100 = 2;
                int v101 = 1;
                if ((int)v9 > 1952854577)
                {
                  if ((int)v9 > 2016686641)
                  {
                    if ((int)v9 > 2019963441)
                    {
                      if (v9 == 2019963956) {
                        goto LABEL_367;
                      }
                      int v102 = 2019963442;
LABEL_365:
                      if (v9 == v102) {
                        goto LABEL_366;
                      }
LABEL_347:
                      int v100 = 1;
                      int v101 = 2;
                      goto LABEL_367;
                    }
                    if (v9 == 2016686642)
                    {
LABEL_366:
                      int v100 = 1;
                      int v101 = 1;
LABEL_367:
                      int v109 = v16 / v101;
                      if (v16 / v101 >= 1)
                      {
                        uint64_t v110 = v77;
                        int v118 = 41 * v16;
                        int v111 = v101 | (8 * v101);
                        int v112 = v100 * v99;
                        uint64_t v113 = 16 * v98;
                        int v114 = 0;
                        while (1)
                        {
                          encodeStripStart((uint64_t)&v123, (v118 + v111 * v114) / 50);
                          if (v112 >= 1) {
                            break;
                          }
LABEL_373:
                          v114 += 4;
                          uint64_t v10 = 0;
                          if (v114 >= v109) {
                            goto LABEL_377;
                          }
                        }
                        int v115 = 0;
                        uint64_t v116 = v110;
                        while (1)
                        {
                          *(void *)&long long v123 = v116 + (v114 * HIDWORD(v123));
                          uint64_t v27 = SlimXEncodeBlocks_NEON((uint64_t *)&v123);
                          if (v27) {
                            break;
                          }
                          v116 += v113;
                          v115 += 16;
                          if (v112 <= v115) {
                            goto LABEL_373;
                          }
                        }
LABEL_375:
                        uint64_t v10 = v27;
                        goto LABEL_377;
                      }
LABEL_376:
                      uint64_t v10 = 0;
                      goto LABEL_377;
                    }
                    int v108 = 2016687156;
                  }
                  else if ((int)v9 > 1953903153)
                  {
                    if (v9 == 1953903154) {
                      goto LABEL_366;
                    }
                    int v108 = 1953903668;
                  }
                  else
                  {
                    if (v9 == 1952854578) {
                      goto LABEL_366;
                    }
                    int v108 = 1952855092;
                  }
                }
                else if ((int)v9 > 1936077361)
                {
                  if ((int)v9 > 1937125937)
                  {
                    if (v9 == 1937125938) {
                      goto LABEL_366;
                    }
                    int v108 = 1937126452;
                  }
                  else
                  {
                    if (v9 == 1936077362) {
                      goto LABEL_366;
                    }
                    int v108 = 1936077876;
                  }
                }
                else
                {
                  if ((int)v9 <= 875836517)
                  {
                    if (v9 != 875704934)
                    {
                      int v102 = 875704950;
                      goto LABEL_365;
                    }
                    goto LABEL_366;
                  }
                  if (v9 == 875836518) {
                    goto LABEL_367;
                  }
                  int v108 = 875836534;
                }
                if (v9 == v108) {
                  goto LABEL_367;
                }
                goto LABEL_347;
              }
              int v78 = 11;
            }
            LODWORD(v125) = v78;
            unint64_t v98 = v120;
            int v99 = v119;
            goto LABEL_327;
          }
LABEL_377:
          *uint64_t v122 = v124 - *(void *)(a1 + 88);
          return v10;
        }
        if (v9 != 825306677)
        {
          uint64_t v10 = 4294951891;
          if (v9 != 825437747) {
            goto LABEL_377;
          }
        }
LABEL_118:
        if (!v14)
        {
          uint64_t v10 = 4294951892;
          if ((int)((v119 + 15) & 0xFFFFFFF0) > (int)(HIDWORD(v123) / BytesPerPixelForPixelFormat)
            || (int)((v6 + 3) & 0xFFFFFFFC) > v6 + *(_DWORD *)(a1 + 24))
          {
            goto LABEL_377;
          }
          LODWORD(v125) = 24;
          if (v7 == -1)
          {
            *(_WORD *)(v11 + 12) = 4;
            DWORD1(v125) = 4;
            BYTE8(v125) = 1;
          }
          else
          {
            if (v7 > 0xF) {
              goto LABEL_271;
            }
            *(_WORD *)(v11 + 12) = v7;
            DWORD1(v125) = v7;
          }
          if (v6 >= 1)
          {
            uint64_t v69 = 0;
            uint64_t v70 = v4;
            while (1)
            {
              int v71 = 0;
              while (1)
              {
                uint64_t v72 = v11;
                uint64_t v73 = v69;
                encodeStripStart((uint64_t)&v123, v71);
                uint64_t v69 = v73;
                if (v119 >= 1) {
                  break;
                }
LABEL_251:
                v71 += 4;
                uint64_t v10 = v69;
                uint64_t v11 = v72;
                if (v71 >= v16) {
                  goto LABEL_377;
                }
              }
              int v74 = 0;
              uint64_t v75 = v70;
              while (1)
              {
                *(void *)&long long v123 = v75 + (v71 * HIDWORD(v123));
                uint64_t v76 = SlimXEncodeBlocks_NEON((uint64_t *)&v123);
                if (v76) {
                  break;
                }
                v75 += 32;
                v74 += 16;
                if (v119 <= v74)
                {
                  uint64_t v69 = 0;
                  goto LABEL_251;
                }
              }
              uint64_t v10 = v76;
              if (v76 != -15409 || !BYTE8(v125)) {
                goto LABEL_377;
              }
              uint64_t v11 = v72;
              uint64_t v70 = *(void *)(a1 + 64);
              *(void *)&long long v124 = *(void *)(a1 + 88) + 14;
              DWORD1(v125) = 0;
              *(_WORD *)(v72 + 12) = 0;
              BYTE8(v125) = 0;
              uint64_t v69 = 4294951887;
            }
          }
          goto LABEL_376;
        }
LABEL_119:
        uint64_t v10 = 4294951891;
        goto LABEL_377;
      }
      if ((int)v9 > 1815162993)
      {
        if ((int)v9 <= 1936077359)
        {
          if ((int)v9 > 1885745711)
          {
            if (v9 != 1885745712)
            {
              if (v9 != 1919378232)
              {
                int v20 = 1919379252;
LABEL_65:
                uint64_t v10 = 4294951891;
                if (v9 != v20) {
                  goto LABEL_377;
                }
LABEL_66:
                uint64_t v10 = 4294951892;
                if ((int)((v119 + 7) & 0xFFFFFFF8) > (int)(HIDWORD(v123) / BytesPerPixelForPixelFormat)
                  || (int)((v6 + 7) & 0xFFFFFFF8) > v6 + *(_DWORD *)(a1 + 24))
                {
                  goto LABEL_377;
                }
                LODWORD(v125) = 17;
                if (v7 == -1)
                {
                  unsigned __int16 v22 = 4;
                }
                else
                {
                  if (v7 > 0xF) {
                    goto LABEL_271;
                  }
                  unsigned __int16 v22 = v7;
                }
                *(_WORD *)(v11 + 12) = v22;
                DWORD1(v125) = v22;
                if (v6 >= 1)
                {
                  int v61 = 0;
                  while (1)
                  {
                    encodeStripStart((uint64_t)&v123, v61);
                    if (v119 >= 1) {
                      break;
                    }
LABEL_217:
                    v61 += 8;
                    uint64_t v10 = 0;
                    if (v61 >= v6) {
                      goto LABEL_377;
                    }
                  }
                  int v62 = 0;
                  uint64_t v63 = v121;
                  while (1)
                  {
                    *(void *)&long long v123 = v63 + (v61 * HIDWORD(v123));
                    uint64_t v27 = SlimXEncodeBlocks_NEON((uint64_t *)&v123);
                    if (v27) {
                      goto LABEL_375;
                    }
                    v63 += 16;
                    v62 += 8;
                    if (v119 <= v62) {
                      goto LABEL_217;
                    }
                  }
                }
                goto LABEL_376;
              }
LABEL_71:
              uint64_t v10 = 4294951892;
              if ((int)((v119 + 7) & 0xFFFFFFF8) > (int)(HIDWORD(v123) / BytesPerPixelForPixelFormat)
                || (int)((v6 + 7) & 0xFFFFFFF8) > v6 + *(_DWORD *)(a1 + 24))
              {
                goto LABEL_377;
              }
              *(void *)&long long v125 = 2;
              *(_WORD *)(v11 + 12) = 0;
              if (v6 >= 1)
              {
                int v23 = 0;
                uint64_t v24 = 8 * BytesPerPixelForPixelFormat;
                while (1)
                {
                  encodeStripStart((uint64_t)&v123, v23);
                  if (v119 >= 1) {
                    break;
                  }
LABEL_79:
                  v23 += 8;
                  uint64_t v10 = 0;
                  if (v23 >= v6) {
                    goto LABEL_377;
                  }
                }
                int v25 = 0;
                uint64_t v26 = v121;
                while (1)
                {
                  *(void *)&long long v123 = v26 + (v23 * HIDWORD(v123));
                  uint64_t v27 = SlimXEncodeBlocks_NEON((uint64_t *)&v123);
                  if (v27) {
                    goto LABEL_375;
                  }
                  v26 += v24;
                  v25 += 8;
                  if (v119 <= v25) {
                    goto LABEL_79;
                  }
                }
              }
              goto LABEL_376;
            }
          }
          else
          {
            if (v9 == 1815162994)
            {
              uint64_t v10 = 4294951892;
              if ((int)((v119 + 3) & 0xFFFFFFFC) > (int)(HIDWORD(v123) / BytesPerPixelForPixelFormat)
                || (int)((v6 + 3) & 0xFFFFFFFC) > v6 + *(_DWORD *)(a1 + 24))
              {
                goto LABEL_377;
              }
              *(void *)&long long v125 = 9;
              *(_WORD *)(v11 + 12) = 0;
              if (v6 >= 1)
              {
                int v50 = 0;
                while (1)
                {
                  encodeStripStart((uint64_t)&v123, v50);
                  if (v119 >= 1) {
                    break;
                  }
LABEL_167:
                  v50 += 4;
                  uint64_t v10 = 0;
                  if (v50 >= v6) {
                    goto LABEL_377;
                  }
                }
                int v51 = 0;
                uint64_t v52 = v121;
                while (1)
                {
                  *(void *)&long long v123 = v52 + (v50 * HIDWORD(v123));
                  uint64_t v27 = SlimXEncodeBlocks_C((uint64_t)&v123);
                  if (v27) {
                    goto LABEL_375;
                  }
                  v52 += 16;
                  v51 += 4;
                  if (v119 <= v51) {
                    goto LABEL_167;
                  }
                }
              }
              goto LABEL_376;
            }
            if (v9 == 1815491698)
            {
              uint64_t v10 = 4294951892;
              if ((int)((v119 + 3) & 0xFFFFFFFC) > (int)(HIDWORD(v123) / BytesPerPixelForPixelFormat)
                || (int)((v6 + 3) & 0xFFFFFFFC) > v6 + *(_DWORD *)(a1 + 24))
              {
                goto LABEL_377;
              }
              LODWORD(v125) = 18;
              if (v7 == -1)
              {
                unsigned __int16 v53 = 0;
              }
              else
              {
                if (v7 > 0xF) {
                  goto LABEL_271;
                }
                unsigned __int16 v53 = v7;
              }
              *(_WORD *)(v11 + 12) = v53;
              DWORD1(v125) = v53;
              if (v6 >= 1)
              {
                int v89 = 0;
                while (1)
                {
                  encodeStripStart((uint64_t)&v123, v89);
                  if (v119 >= 1) {
                    break;
                  }
LABEL_300:
                  v89 += 4;
                  uint64_t v10 = 0;
                  if (v89 >= v6) {
                    goto LABEL_377;
                  }
                }
                int v90 = 0;
                int v91 = 0;
                while (1)
                {
                  *(void *)&long long v123 = v4 + (v91 & 0xFFFFFFE0) + (HIDWORD(v123) * v89);
                  uint64_t v27 = SlimXEncodeBlocks_NEON((uint64_t *)&v123);
                  if (v27) {
                    goto LABEL_375;
                  }
                  v91 += 32;
                  v90 += 4;
                  if (v119 <= v90) {
                    goto LABEL_300;
                  }
                }
              }
              goto LABEL_376;
            }
            uint64_t v10 = 4294951891;
            if (v9 != 1882468912) {
              goto LABEL_377;
            }
          }
          uint64_t v10 = 4294951892;
          if ((int)((v119 + 15) & 0xFFFFFFF0) > SHIDWORD(v123)
            || (int)((v6 + 3) & 0xFFFFFFFC) > v6 + *(_DWORD *)(a1 + 24))
          {
            goto LABEL_377;
          }
          LODWORD(v125) = 7;
          if (v6 >= 1)
          {
            for (int i = 0; i < v6; i += 4)
            {
              encodeStripStart((uint64_t)&v123, 4 * i / 5u);
              if (v119 >= 1)
              {
                for (unsigned int j = 0; (int)j < v119; j += 16)
                {
                  *(void *)&long long v123 = v4 + 4 * (j / 3) + (HIDWORD(v123) * i);
                  DWORD2(v123) = j % 3;
                  uint64_t v27 = SlimXEncodeBlocks_NEON((uint64_t *)&v123);
                  if (v27) {
                    goto LABEL_375;
                  }
                }
              }
            }
            uint64_t v42 = *(void *)(a1 + 72);
            HIDWORD(v123) = *(_DWORD *)(a1 + 12);
            LODWORD(v125) = 8;
            if (v6 < 2) {
              goto LABEL_376;
            }
            int v43 = 0;
            while (1)
            {
              encodeStripStart((uint64_t)&v123, (41 * v6 + 18 * v43) / 50);
              if (v119 >= 1) {
                break;
              }
LABEL_148:
              v43 += 4;
              uint64_t v10 = 0;
              if (v43 >= v6 >> 1) {
                goto LABEL_377;
              }
            }
            unsigned int v44 = 0;
            while (1)
            {
              *(void *)&long long v123 = v42 + 4 * (v44 / 3) + (HIDWORD(v123) * v43);
              DWORD2(v123) = v44 % 3;
              uint64_t v27 = SlimXEncodeBlocks_NEON((uint64_t *)&v123);
              if (v27) {
                goto LABEL_375;
              }
              v44 += 16;
              if ((int)v44 >= v119) {
                goto LABEL_148;
              }
            }
          }
          goto LABEL_376;
        }
        if ((int)v9 > 1953903151)
        {
          if (v9 == 1953903152 || v9 == 2019963440) {
            goto LABEL_98;
          }
          int v17 = 2016686640;
        }
        else
        {
          if (v9 == 1936077360 || v9 == 1937125936) {
            goto LABEL_98;
          }
          int v17 = 1952854576;
        }
        goto LABEL_97;
      }
      if ((int)v9 <= 1734505011)
      {
        if ((int)v9 <= 1717855599)
        {
          if (v9 == 1651926376)
          {
LABEL_128:
            uint64_t v10 = 4294951891;
            switch(v8)
            {
              case 0u:
              case 1u:
              case 2u:
              case 3u:
                unsigned int v37 = 8;
                if ((int)v9 <= 1651925815)
                {
                  int v49 = 20;
                  goto LABEL_227;
                }
                int v38 = 2;
                if (v9 == 1651925816) {
                  goto LABEL_223;
                }
                if (v9 == 1651926376)
                {
                  int v39 = 13;
                  goto LABEL_265;
                }
                goto LABEL_155;
              case 4u:
                unsigned int v37 = 4;
                int v47 = 16;
                if ((int)v9 > 1651925815)
                {
                  int v38 = 0;
                  if (v9 == 1651925816) {
                    goto LABEL_224;
                  }
                  if (v9 != 1651926376)
                  {
                    int v45 = 16;
                    int v46 = 4;
                    goto LABEL_156;
                  }
                  int v39 = 15;
                  int v68 = 4;
                  unsigned int v37 = 16;
                  goto LABEL_266;
                }
                int v49 = 24;
                if (v9 != 1651519798)
                {
                  int v66 = 16;
                  int v67 = 4;
                  int v45 = 16;
                  goto LABEL_229;
                }
                int v66 = 16;
                goto LABEL_232;
              case 5u:
              case 8u:
                unsigned int v37 = 8;
                if ((int)v9 > 1651925815)
                {
                  int v38 = 3;
                  if (v9 == 1651925816)
                  {
LABEL_223:
                    int v47 = 8;
LABEL_224:
                    int v48 = v119;
                  }
                  else
                  {
                    if (v9 == 1651926376)
                    {
                      int v39 = 14;
LABEL_265:
                      int v68 = 8;
LABEL_266:
                      int v48 = v119;
                      goto LABEL_267;
                    }
LABEL_155:
                    int v45 = 8;
                    int v46 = 8;
                    int v47 = 8;
LABEL_156:
                    int v48 = v119;
                    if (v9 != 1652056888) {
                      goto LABEL_234;
                    }
                  }
                  unsigned int v64 = v37;
                  LODWORD(v125) = v38;
                  unsigned int v37 = v47;
                  unsigned int v65 = v64;
                  goto LABEL_239;
                }
                int v49 = 22;
LABEL_227:
                if (v9 == 1651519798)
                {
                  int v66 = 8;
LABEL_232:
                  int v67 = v37;
                  int v48 = v119;
                }
                else
                {
                  int v66 = 8;
                  int v67 = 8;
                  int v45 = 8;
LABEL_229:
                  int v46 = v37;
                  int v48 = v119;
                  if (v9 != 1651847472) {
                    goto LABEL_234;
                  }
                }
                LODWORD(v125) = v49;
                int v45 = v66;
                int v46 = v67;
LABEL_234:
                if (v9 == 1651519798)
                {
                  unsigned int v65 = v46;
                  unsigned int v37 = v45;
                  if ((*(unsigned char *)(a1 + 8364) & 1) == 0) {
                    goto LABEL_268;
                  }
                  unsigned int v37 = 16;
                  if (v8 < 4)
                  {
                    int v68 = 4;
                    int v39 = 21;
LABEL_267:
                    LODWORD(v125) = v39;
                    unsigned int v65 = v68;
                    goto LABEL_268;
                  }
                  unsigned int v65 = v8;
                  if (v8 != 4) {
                    goto LABEL_119;
                  }
LABEL_268:
                  if (v7 == -1)
                  {
                    unsigned __int16 v79 = 0;
                  }
                  else
                  {
                    if (v7 > 0xF) {
                      goto LABEL_271;
                    }
                    unsigned __int16 v79 = v7;
                  }
                  *(_WORD *)(v11 + 12) = v79;
                  DWORD1(v125) = v79;
LABEL_274:
                  unsigned int v80 = v65;
                  uint64_t v10 = 4294951892;
                  if ((int)((v48 + v37 - 1) & -v37) <= (int)(HIDWORD(v123) / BytesPerPixelForPixelFormat)
                    && (int)((v6 + v80 - 1) & -v80) <= v6 + *(_DWORD *)(a1 + 24))
                  {
                    if (v6 < 1) {
                      goto LABEL_376;
                    }
                    int v81 = 0;
                    uint64_t v82 = v37;
                    unint64_t v83 = BytesPerPixelForPixelFormat * v37;
                    do
                    {
                      encodeStripStart((uint64_t)&v123, v81);
                      if (v119 >= 1)
                      {
                        uint64_t v84 = 0;
                        uint64_t v85 = v121;
                        do
                        {
                          *(void *)&long long v123 = v85 + (v81 * HIDWORD(v123));
                          uint64_t v27 = SlimXEncodeBlocks_NEON((uint64_t *)&v123);
                          if (v27) {
                            goto LABEL_375;
                          }
                          v84 += v82;
                          v85 += v83;
                        }
                        while (v84 < v119);
                      }
                      v81 += v80;
                      uint64_t v10 = 0;
                    }
                    while (v81 < v16);
                  }
                  goto LABEL_377;
                }
                unsigned int v37 = v45;
                unsigned int v65 = v46;
LABEL_239:
                if (v9 == 1652056888 || v9 == 1651925816)
                {
                  DWORD1(v125) = 0;
                  *(_WORD *)(v11 + 12) = 0;
                  goto LABEL_274;
                }
                goto LABEL_268;
              default:
                goto LABEL_377;
            }
          }
          int v31 = 1652056888;
LABEL_127:
          uint64_t v10 = 4294951891;
          if (v9 != v31) {
            goto LABEL_377;
          }
          goto LABEL_128;
        }
        if (v9 == 1717855600 || v9 == 1717856627) {
          goto LABEL_84;
        }
        int v19 = 1734501176;
      }
      else
      {
        if ((int)v9 > 1751410031)
        {
          if (v9 == 1751410032 || v9 == 1751411059) {
            goto LABEL_118;
          }
          int v17 = 1751527984;
LABEL_97:
          uint64_t v10 = 4294951891;
          if (v9 != v17) {
            goto LABEL_377;
          }
          goto LABEL_98;
        }
        if (v9 == 1734505012 || v9 == 1735549492) {
          goto LABEL_66;
        }
        int v19 = 1735549752;
      }
      uint64_t v10 = 4294951891;
      if (v9 != v19) {
        goto LABEL_377;
      }
      goto LABEL_71;
    }
    if (v13 == -1)
    {
      BYTE8(v129) = 1;
      goto LABEL_10;
    }
    return 4294951896;
  }
  return v10;
}

uint64_t encodeStripStart(uint64_t result, int a2)
{
  *(_OWORD *)(result + 58) = xmmword_1AB9DD6E0;
  *(_OWORD *)(result + 42) = xmmword_1AB9DD6E0;
  int v2 = *(_DWORD *)(result + 108);
  if (*(unsigned char *)(result + 104))
  {
    uint64_t v3 = *(void *)(result + 80);
    float v4 = (double)(uint64_t)(*(void *)(result + 16) - *(void *)(v3 + 88)) * 100.0 / (double)*(uint64_t *)(v3 + 128);
    unsigned int v5 = *(_DWORD *)(v3 + 4);
    float v6 = (double)(a2 + 32) * 100.0 / (double)(v5 + 32);
    float v7 = -400.0 / (double)v5;
    if ((float)(v6 + (float)(v7 * (float)(7 - v2))) >= v4)
    {
      int v9 = (float)(v6 + (float)(v7 * (float)(9 - v2))) > v4 && v2 > 0;
      v2 -= v9;
    }
    else if (v2 < 7)
    {
      ++v2;
    }
  }
  int v10 = 10 - v2;
  if (!v2) {
    int v10 = 0;
  }
  *(_DWORD *)(result + 108) = v2;
  *(_DWORD *)(result + 112) = v10;
  if (v2 >= 1)
  {
    uint64_t v11 = *(unsigned char **)(result + 16);
    *(void *)(result + 16) = v11 + 1;
    unsigned char *v11 = v2 + 96;
  }
  return result;
}

uint64_t YZipDecodeFrame(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v10 = 17;
  if (a1
    && (unint64_t)(*(void *)(a1 + 40) - 3) >= 0xFFFFFFFFFFFFFFFELL
    && (*(_DWORD *)(a1 + 48) - 3) >= 0xFFFFFFFE)
  {
    uint64_t Format = YZipEncodeFindFormat(a1, &v10);
    if (Format) {
      return Format;
    }
    CMPhotoGetBitDepthForPixelFormat(*(unsigned int *)(a1 + 32));
    if (!yzip_codec_create()) {
      return 4294951895;
    }
    uint64_t v4 = yzip_image_create();
    if (!v4)
    {
      uint64_t Format = 4294951895;
LABEL_24:
      yzip_codec_destroy();
      return Format;
    }
    uint64_t v5 = v4;
    if (*(void *)(a1 + 40))
    {
      unint64_t v6 = 0;
      do
      {
        yzip_image_set_plane_data();
        ++v6;
        unint64_t v7 = *(void *)(a1 + 40);
      }
      while (v7 > v6);
      long long v13 = 0u;
      long long v14 = 0u;
      long long v11 = 0u;
      long long v12 = 0u;
      if (v7)
      {
        unint64_t v8 = 0;
        int v9 = &v11;
        while (!yzip_image_get_plane_descriptor())
        {
          ++v8;
          v9 += 2;
          if (*(void *)(a1 + 40) <= v8) {
            goto LABEL_20;
          }
        }
        uint64_t Format = 4294951893;
        goto LABEL_23;
      }
    }
    else
    {
      long long v13 = 0u;
      long long v14 = 0u;
      long long v11 = 0u;
      long long v12 = 0u;
    }
LABEL_20:
    if (yzip_image_decode() == *((void *)&v13 + 1) + *((void *)&v11 + 1)) {
      uint64_t Format = 0;
    }
    else {
      uint64_t Format = 4294951889;
    }
LABEL_23:
    MEMORY[0x1AD110EE0](v5);
    goto LABEL_24;
  }
  return 4294951896;
}

uint64_t HrlcDecodeFrame(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 32);
  uint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  uint64_t v3 = setjmp((int *)v6 + 1);
  if (!v3)
  {
    uint64_t v4 = *(void *)(a1 + 64);
    if (*(void *)(a1 + 56) >= 0x10uLL
      && *(_DWORD *)v4 == 1399614808
      && *(_DWORD *)(v4 + 4) == v2
      && *(_DWORD *)a1 == *(unsigned __int16 *)(v4 + 8)
      && *(_DWORD *)(a1 + 4) == *(unsigned __int16 *)(v4 + 10))
    {
      *(_DWORD *)(a1 + 8356) = *(unsigned __int16 *)(v4 + 14);
      if (v2 == 1278226488) {
        return SlimHrlcDecode_C(a1);
      }
      else {
        return 4294951891;
      }
    }
    else
    {
      return 4294951890;
    }
  }
  return v3;
}

uint64_t IntcDecodeFrame(__CVBuffer *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 32);
  uint64_t v17 = 0;
  memset(v16, 0, sizeof(v16));
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v9 = 0u;
  uint64_t v5 = setjmp((int *)v16 + 1);
  if (!v5)
  {
    unint64_t v7 = *(void *)(a2 + 56);
    uint64_t v6 = *(void *)(a2 + 64);
    *((void *)&v10 + 1) = v6 + v7;
    if (v7 >= 0xE
      && *(_DWORD *)v6 == 1399614808
      && *(_DWORD *)(v6 + 4) == v4
      && *(_DWORD *)a2 == *(unsigned __int16 *)(v6 + 8)
      && *(_DWORD *)(a2 + 4) == *(unsigned __int16 *)(v6 + 10))
    {
      *(void *)&long long v10 = v6 + 14;
      DWORD1(v11) = *(unsigned __int16 *)(v6 + 12);
      *(void *)&long long v14 = a2;
      return CMPhotoInterchangeCompactDecode(a1, (unsigned int *)a2, (uint64_t)&v9);
    }
    else
    {
      return 4294951890;
    }
  }
  return v5;
}

size_t UncompressedDecodeFrame(uint64_t a1, __CVBuffer *a2, uint64_t a3)
{
  double v35 = 0.0;
  __int16 v34 = 0;
  uint64_t v33 = 0;
  if (CMPhotoGetSizeInfoForPixelFormat(*(unsigned int *)(a1 + 32), &v35, &v34, (unsigned char *)&v34 + 1, &v33)) {
    return 4294951894;
  }
  if (CMPhotoPixelFormatIsPackedYUV(*(_DWORD *)(a1 + 32))
    || CMPhotoPixelFormatIsPackedRAW(*(_DWORD *)(a1 + 32)))
  {
    BOOL IsPackedYUV = CMPhotoPixelFormatIsPackedYUV(*(_DWORD *)(a1 + 32));
    unsigned int v8 = *(_DWORD *)a1;
    if (IsPackedYUV) {
      unint64_t v9 = (3
    }
          * *(unsigned int *)(a1 + 4)
          * (unint64_t)((2 * ((2863311531u * (unint64_t)(v8 + 2)) >> 32)) & 0xFFFFFFFC)) >> 1;
    else {
      unint64_t v9 = CMPhotoAlignValue(5 * ((v8 + 3) >> 2), 0x140uLL) * *(unsigned int *)(a1 + 4);
    }
  }
  else
  {
    unsigned int v29 = *(_DWORD *)a1;
    unsigned int v30 = *(_DWORD *)(a1 + 4);
    if (v34)
    {
      if ((_BYTE)v34) {
        unsigned int v31 = v29 + (v29 | 0xFFFFFFFE) + 2;
      }
      else {
        unsigned int v31 = 2 * v29;
      }
      if (HIBYTE(v34)) {
        unsigned int v32 = (v30 + 1) >> 1;
      }
      else {
        unsigned int v32 = *(_DWORD *)(a1 + 4);
      }
      unint64_t v9 = v33 * (v30 * (unint64_t)v29 + v32 * (unint64_t)v31);
    }
    else
    {
      unint64_t v9 = (unint64_t)(v35 * (double)(v30 * v29));
    }
  }
  if (v9 != a3) {
    return 4294951889;
  }
  if (CVPixelBufferGetPlaneCount(a2))
  {
    size_t result = CVPixelBufferGetPlaneCount(a2);
    uint64_t v10 = result;
    if (!result) {
      return result;
    }
  }
  else
  {
    uint64_t v10 = 1;
  }
  uint64_t v11 = 0;
  do
  {
    if (v11 && !CMPhotoPixelFormatContainsRGB(*(_DWORD *)(a1 + 32)))
    {
      unsigned int v15 = *(_DWORD *)a1;
      if ((_BYTE)v34) {
        unsigned int v12 = v15 + (v15 | 0xFFFFFFFE) + 2;
      }
      else {
        unsigned int v12 = 2 * v15;
      }
    }
    else
    {
      unsigned int v12 = *(_DWORD *)a1;
    }
    uint64_t v13 = v12;
    if (CMPhotoPixelFormatIsPackedYUV(*(_DWORD *)(a1 + 32)))
    {
      uint64_t v14 = 4 * (((unint64_t)(v13 + 2) * (unsigned __int128)0x5555555555555556uLL) >> 64);
    }
    else if (CMPhotoPixelFormatIsPackedRAW(*(_DWORD *)(a1 + 32)))
    {
      uint64_t v14 = CMPhotoAlignValue(5 * ((unint64_t)(v13 + 3) >> 2), 0x140uLL);
    }
    else
    {
      uint64_t v14 = v33 * v13;
    }
    if (HIBYTE(v34)) {
      BOOL v16 = v11 == 0;
    }
    else {
      BOOL v16 = 1;
    }
    unsigned int v17 = *(_DWORD *)(a1 + 4);
    if (v16) {
      unint64_t v18 = v17;
    }
    else {
      unint64_t v18 = (v17 + 1) >> 1;
    }
    int v19 = *(char **)(a1 + 8 * v11 + 88);
    uint64_t v20 = *(unsigned int *)(a1 + 4 * v11 + 8);
    BOOL v21 = CMPhotoPixelFormatIsPackedYUV(*(_DWORD *)(a1 + 32));
    unsigned int v23 = *(_DWORD *)a1;
    int v22 = *(_DWORD *)(a1 + 4);
    if (v21) {
      uint64_t v24 = 4 * v11 * v22 * ((v23 + 2) / 3);
    }
    else {
      uint64_t v24 = v33 * v22 * v11 * v23;
    }
    char v25 = *(_DWORD *)(a1 + 32) == 1647719528;
    unint64_t v26 = v18 >> v25;
    if (v18 >> v25)
    {
      size_t v27 = v14 << v25;
      int v28 = (char *)(*(void *)(a1 + 64) + v24);
      do
      {
        memcpy(v19, v28, v27);
        v28 += v27;
        v19 += v20;
        --v26;
      }
      while (v26);
    }
    ++v11;
  }
  while (v11 != v10);
  return 0;
}

uint64_t SlimXDecodeFrame(unint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 88);
  int v5 = *(_DWORD *)a1;
  uint64_t v6 = *(unsigned int *)(a1 + 4);
  uint64_t v7 = *(unsigned int *)(a1 + 32);
  unint64_t BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(*(_DWORD *)(a1 + 32));
  uint64_t v143 = 0;
  memset(v142, 0, sizeof(v142));
  long long v140 = 0u;
  long long v141 = 0u;
  long long v138 = 0u;
  memset(v139, 0, sizeof(v139));
  long long v137 = 0u;
  uint64_t v9 = setjmp((int *)v142 + 1);
  if (v9) {
    return v9;
  }
  unint64_t v13 = *(void *)(a1 + 56);
  uint64_t v12 = *(void *)(a1 + 64);
  *((void *)&v138 + 1) = v12 + v13;
  if (v13 < 0xE
    || *(_DWORD *)v12 != 1399614808
    || *(_DWORD *)(v12 + 4) != v7
    || *(_DWORD *)a1 != *(unsigned __int16 *)(v12 + 8)
    || *(_DWORD *)(a1 + 4) != *(unsigned __int16 *)(v12 + 10))
  {
    return 4294951890;
  }
  uint64_t v135 = v4;
  *(void *)&long long v138 = v12 + 14;
  DWORD1(v139[0]) = *(unsigned __int16 *)(v12 + 12);
  long long v140 = a1;
  LODWORD(v141) = 64;
  DWORD1(v141) = v5;
  if ((int)v7 > 1651926375)
  {
    if ((int)v7 <= 1815162993)
    {
      if ((int)v7 <= 1734505011)
      {
        if ((int)v7 <= 1717855599)
        {
          if (v7 == 1651926376)
          {
LABEL_122:
            unint64_t v48 = *(unsigned int *)(a1 + 8);
            HIDWORD(v137) = *(_DWORD *)(a1 + 8);
            unsigned int v49 = *(_DWORD *)(a1 + 8360);
            int v50 = 8;
            int v51 = 8;
            switch(v49)
            {
              case 0u:
              case 1u:
              case 2u:
              case 3u:
                if ((int)v7 <= 1651925815)
                {
                  int v68 = 20;
                  goto LABEL_228;
                }
                int v52 = 2;
                if (v7 == 1651925816 || v7 == 1652056888) {
                  goto LABEL_151;
                }
                int v51 = 8;
                if (v7 != 1651926376) {
                  goto LABEL_235;
                }
                int v51 = 8;
                int v53 = 13;
                goto LABEL_150;
              case 4u:
                int v50 = 4;
                int v51 = 16;
                if ((int)v7 <= 1651925815)
                {
                  int v68 = 24;
                  if (v7 != 1651519798)
                  {
                    int v111 = 16;
                    int v112 = 4;
                    goto LABEL_230;
                  }
                  int v111 = 16;
                  goto LABEL_233;
                }
                if (v7 == 1651925816 || v7 == 1652056888)
                {
                  int v53 = 0;
                  goto LABEL_152;
                }
                if (v7 != 1651926376) {
                  goto LABEL_235;
                }
                int v67 = 4;
                int v53 = 15;
                goto LABEL_239;
              case 5u:
              case 8u:
                if ((int)v7 > 1651925815)
                {
                  int v52 = 3;
                  if (v7 == 1651925816 || v7 == 1652056888)
                  {
LABEL_151:
                    int v53 = v52;
                    int v51 = 8;
LABEL_152:
                    int v67 = v50;
                    goto LABEL_239;
                  }
                  int v51 = 8;
                  if (v7 == 1651926376)
                  {
                    int v51 = 8;
                    int v53 = 14;
LABEL_150:
                    int v67 = 8;
                    goto LABEL_239;
                  }
LABEL_235:
                  if (v7 == 1651519798)
                  {
                    unsigned int v113 = v51;
                    int v67 = v50;
                    if ((*(unsigned char *)(a1 + 8364) & 1) == 0) {
                      goto LABEL_241;
                    }
                    int v51 = 16;
                    if (v49 < 4)
                    {
                      int v67 = 4;
                      int v53 = 21;
LABEL_239:
                      LODWORD(v139[0]) = v53;
                      unsigned int v113 = v51;
                      goto LABEL_241;
                    }
                    int v67 = v49;
                    unsigned int v113 = 16;
                    if (v49 != 4) {
                      return 4294951891;
                    }
                  }
                  else
                  {
                    unsigned int v113 = v51;
                    int v67 = v50;
                  }
LABEL_241:
                  uint64_t v9 = 4294951892;
                  if ((int)((v5 + v113 - 1) & -v113) <= (int)(v48 / BytesPerPixelForPixelFormat)
                    && ((v6 + v67 - 1) & -v67) <= (int)v6 + *(_DWORD *)(a1 + 24))
                  {
                    v136 = a2;
                    if ((int)v6 >= 1)
                    {
                      int v114 = 0;
                      uint64_t v115 = v113;
                      unint64_t v116 = BytesPerPixelForPixelFormat * v113;
                      int v134 = v6;
                      do
                      {
                        uint64_t v117 = 5;
                        *(_OWORD *)((char *)&v139[1] + 10) = xmmword_1AB9DD6E0;
                        *(_OWORD *)((char *)v139 + 10) = xmmword_1AB9DD6E0;
                        LODWORD(v142[0]) = 0;
                        HIDWORD(v141) = 0;
                        if (v5 >= 1)
                        {
                          uint64_t v118 = v4;
                          uint64_t v119 = 0;
                          do
                          {
                            uint64_t v120 = v119;
                            *(void *)&long long v137 = v118 + (v114 * HIDWORD(v137));
                            SlimXDecodeBlocks_NEON((int *)&v137, *(double *)&v117, v10, v11);
                            uint64_t v119 = v120 + v115;
                            v118 += v116;
                          }
                          while (v120 + v115 < v5);
                        }
                        v114 += v67;
                      }
                      while (v114 < v134);
                    }
                    goto LABEL_249;
                  }
                  return v9;
                }
                int v68 = 22;
LABEL_228:
                if (v7 == 1651519798)
                {
                  int v111 = 8;
LABEL_233:
                  int v112 = v50;
                }
                else
                {
                  int v111 = 8;
                  int v112 = 8;
                  int v51 = 8;
LABEL_230:
                  if (v7 != 1651847472) {
                    goto LABEL_235;
                  }
                }
                LODWORD(v139[0]) = v68;
                int v51 = v111;
                int v50 = v112;
                goto LABEL_235;
              case 6u:
              case 7u:
                goto LABEL_235;
              default:
                int v51 = 8;
                goto LABEL_235;
            }
          }
          int v38 = 1652056888;
LABEL_121:
          uint64_t v9 = 4294951891;
          if (v7 != v38) {
            return v9;
          }
          goto LABEL_122;
        }
        if (v7 == 1717855600 || v7 == 1717856627) {
          goto LABEL_88;
        }
        int v16 = 1734501176;
      }
      else
      {
        if ((int)v7 > 1751410031)
        {
          if (v7 == 1751410032 || v7 == 1751411059) {
            goto LABEL_110;
          }
          int v14 = 1751527984;
          goto LABEL_101;
        }
        if (v7 == 1734505012 || v7 == 1735549492)
        {
LABEL_67:
          HIDWORD(v137) = *(_DWORD *)(a1 + 8);
          LODWORD(v139[0]) = 17;
          uint64_t v9 = 4294951892;
          if ((int)((v5 + 7) & 0xFFFFFFF8) <= (int)(HIDWORD(v137) / BytesPerPixelForPixelFormat)
            && ((v6 + 7) & 0xFFFFFFF8) <= (int)v6 + *(_DWORD *)(a1 + 24))
          {
            v136 = a2;
            if ((int)v6 >= 1)
            {
              int v24 = 0;
              do
              {
                uint64_t v25 = 5;
                *(_OWORD *)((char *)&v139[1] + 10) = xmmword_1AB9DD6E0;
                *(_OWORD *)((char *)v139 + 10) = xmmword_1AB9DD6E0;
                LODWORD(v142[0]) = 0;
                HIDWORD(v141) = 0;
                if (v5 >= 1)
                {
                  int v26 = 0;
                  uint64_t v27 = v135;
                  do
                  {
                    uint64_t v28 = v27;
                    int v29 = v26;
                    *(void *)&long long v137 = v27 + (v24 * HIDWORD(v137));
                    SlimXDecodeBlocks_NEON((int *)&v137, *(double *)&v25, v10, v11);
                    uint64_t v27 = v28 + 16;
                    int v26 = v29 + 8;
                  }
                  while (v5 > v29 + 8);
                }
                v24 += 8;
              }
              while (v24 < (int)v6);
            }
            goto LABEL_249;
          }
          return v9;
        }
        int v16 = 1735549752;
      }
      uint64_t v9 = 4294951891;
      if (v7 != v16) {
        return v9;
      }
      goto LABEL_76;
    }
    if ((int)v7 <= 1936077359)
    {
      if ((int)v7 > 1885745711)
      {
        if (v7 != 1885745712)
        {
          if (v7 != 1919378232)
          {
            int v17 = 1919379252;
LABEL_66:
            uint64_t v9 = 4294951891;
            if (v7 != v17) {
              return v9;
            }
            goto LABEL_67;
          }
LABEL_76:
          HIDWORD(v137) = *(_DWORD *)(a1 + 8);
          LODWORD(v139[0]) = 2;
          uint64_t v9 = 4294951892;
          if ((int)((v5 + 7) & 0xFFFFFFF8) <= (int)(HIDWORD(v137) / BytesPerPixelForPixelFormat)
            && ((v6 + 7) & 0xFFFFFFF8) <= (int)v6 + *(_DWORD *)(a1 + 24))
          {
            v136 = a2;
            if ((int)v6 >= 1)
            {
              int v30 = 0;
              do
              {
                uint64_t v31 = 5;
                *(_OWORD *)((char *)&v139[1] + 10) = xmmword_1AB9DD6E0;
                *(_OWORD *)((char *)v139 + 10) = xmmword_1AB9DD6E0;
                LODWORD(v142[0]) = 0;
                HIDWORD(v141) = 0;
                if (v5 >= 1)
                {
                  int v32 = 0;
                  uint64_t v33 = v135;
                  do
                  {
                    uint64_t v34 = v33;
                    int v35 = v32;
                    *(void *)&long long v137 = v33 + (v30 * HIDWORD(v137));
                    SlimXDecodeBlocks_NEON((int *)&v137, *(double *)&v31, v10, v11);
                    uint64_t v33 = v34 + 8 * BytesPerPixelForPixelFormat;
                    int v32 = v35 + 8;
                  }
                  while (v5 > v35 + 8);
                }
                v30 += 8;
              }
              while (v30 < (int)v6);
            }
            goto LABEL_249;
          }
          return v9;
        }
      }
      else
      {
        if (v7 == 1815162994)
        {
          HIDWORD(v137) = *(_DWORD *)(a1 + 8);
          LODWORD(v139[0]) = 9;
          uint64_t v9 = 4294951892;
          if ((int)((v5 + 3) & 0xFFFFFFFC) <= (int)(HIDWORD(v137) / BytesPerPixelForPixelFormat)
            && ((v6 + 3) & 0xFFFFFFFC) <= (int)v6 + *(_DWORD *)(a1 + 24))
          {
            v136 = a2;
            if ((int)v6 >= 1)
            {
              int v69 = 0;
              do
              {
                *(_OWORD *)((char *)&v139[1] + 10) = xmmword_1AB9DD6E0;
                *(_OWORD *)((char *)v139 + 10) = xmmword_1AB9DD6E0;
                LODWORD(v142[0]) = 0;
                HIDWORD(v141) = 0;
                if (v5 >= 1)
                {
                  int v70 = 0;
                  uint64_t v71 = v135;
                  do
                  {
                    uint64_t v72 = v71;
                    int v73 = v70;
                    *(void *)&long long v137 = v71 + (v69 * HIDWORD(v137));
                    SlimXDecodeBlocks_C((uint64_t)&v137);
                    uint64_t v71 = v72 + 16;
                    int v70 = v73 + 4;
                  }
                  while (v5 > v73 + 4);
                }
                v69 += 4;
              }
              while (v69 < (int)v6);
            }
            goto LABEL_249;
          }
          return v9;
        }
        if (v7 == 1815491698)
        {
          HIDWORD(v137) = *(_DWORD *)(a1 + 8);
          LODWORD(v139[0]) = 18;
          uint64_t v9 = 4294951892;
          if ((int)((v5 + 3) & 0xFFFFFFFC) <= (int)(HIDWORD(v137) / BytesPerPixelForPixelFormat)
            && ((v6 + 3) & 0xFFFFFFFC) <= (int)v6 + *(_DWORD *)(a1 + 24))
          {
            v136 = a2;
            if ((int)v6 >= 1)
            {
              int v74 = 0;
              do
              {
                uint64_t v75 = 5;
                *(_OWORD *)((char *)&v139[1] + 10) = xmmword_1AB9DD6E0;
                *(_OWORD *)((char *)v139 + 10) = xmmword_1AB9DD6E0;
                LODWORD(v142[0]) = 0;
                HIDWORD(v141) = 0;
                if (v5 >= 1)
                {
                  int v76 = 0;
                  uint64_t v77 = 0;
                  do
                  {
                    uint64_t v78 = v77;
                    int v79 = v76;
                    *(void *)&long long v137 = v4 + (HIDWORD(v137) * v74) + 2 * (v77 & 0xFFFFFFF0);
                    SlimXDecodeBlocks_NEON((int *)&v137, *(double *)&v75, v10, v11);
                    uint64_t v77 = v78 + 16;
                    int v76 = v79 + 4;
                  }
                  while (v5 > v79 + 4);
                }
                v74 += 4;
              }
              while (v74 < (int)v6);
            }
            goto LABEL_249;
          }
          return v9;
        }
        uint64_t v9 = 4294951891;
        if (v7 != 1882468912) {
          return v9;
        }
      }
      HIDWORD(v137) = *(_DWORD *)(a1 + 8);
      uint64_t v9 = 4294951892;
      if ((int)((v5 + 15) & 0xFFFFFFF0) <= SHIDWORD(v137) && ((v6 + 3) & 0xFFFFFFFC) <= (int)v6 + *(_DWORD *)(a1 + 24))
      {
        v136 = a2;
        LODWORD(v139[0]) = 7;
        if ((int)v6 >= 1)
        {
          int v54 = 0;
          do
          {
            uint64_t v55 = 5;
            *(_OWORD *)((char *)&v139[1] + 10) = xmmword_1AB9DD6E0;
            *(_OWORD *)((char *)v139 + 10) = xmmword_1AB9DD6E0;
            LODWORD(v142[0]) = 0;
            HIDWORD(v141) = 0;
            if (v5 >= 1)
            {
              unsigned int v56 = 0;
              do
              {
                unsigned int v57 = v56;
                unsigned int v58 = v56 / 3;
                *(void *)&long long v137 = v4 + 4 * v58 + (HIDWORD(v137) * v54);
                DWORD2(v137) = v57 - 3 * v58;
                SlimXDecodeBlocks_NEON((int *)&v137, *(double *)&v55, v10, v11);
                unsigned int v56 = v57 + 16;
              }
              while ((int)(v57 + 16) < v5);
            }
            v54 += 4;
          }
          while (v54 < (int)v6);
          uint64_t v59 = *(void *)(a1 + 96);
          int v60 = *(_DWORD *)(a1 + 12);
          LODWORD(v139[0]) = 8;
          HIDWORD(v137) = v60;
          if ((int)v6 >= 2)
          {
            int v61 = (int)v6 >> 1;
            int v62 = 0;
            do
            {
              uint64_t v63 = 5;
              *(_OWORD *)((char *)&v139[1] + 10) = xmmword_1AB9DD6E0;
              *(_OWORD *)((char *)v139 + 10) = xmmword_1AB9DD6E0;
              LODWORD(v142[0]) = 0;
              HIDWORD(v141) = 0;
              if (v5 >= 1)
              {
                unsigned int v64 = 0;
                do
                {
                  unsigned int v65 = v64;
                  unsigned int v66 = v64 / 3;
                  *(void *)&long long v137 = v59 + 4 * v66 + (HIDWORD(v137) * v62);
                  DWORD2(v137) = v65 - 3 * v66;
                  SlimXDecodeBlocks_NEON((int *)&v137, *(double *)&v63, v10, v11);
                  unsigned int v64 = v65 + 16;
                }
                while ((int)(v65 + 16) < v5);
              }
              v62 += 4;
            }
            while (v62 < v61);
          }
        }
        goto LABEL_249;
      }
      return v9;
    }
    if ((int)v7 > 1953903151)
    {
      if (v7 == 1953903152 || v7 == 2019963440) {
        goto LABEL_102;
      }
      int v14 = 2016686640;
    }
    else
    {
      if (v7 == 1936077360 || v7 == 1937125936) {
        goto LABEL_102;
      }
      int v14 = 1952854576;
    }
LABEL_101:
    uint64_t v9 = 4294951891;
    if (v7 != v14) {
      return v9;
    }
    goto LABEL_102;
  }
  if ((int)v7 <= 1278226535)
  {
    if ((int)v7 > 875704949)
    {
      if ((int)v7 <= 1111970368)
      {
        if (v7 == 875704950 || v7 == 875836518) {
          goto LABEL_102;
        }
        int v14 = 875836534;
        goto LABEL_101;
      }
      if (v7 == 1111970369)
      {
        HIDWORD(v137) = *(_DWORD *)(a1 + 8);
        LODWORD(v139[0]) = 6;
        uint64_t v9 = 4294951892;
        if ((int)((v5 + 3) & 0xFFFFFFFC) <= (int)(HIDWORD(v137) / BytesPerPixelForPixelFormat)
          && ((v6 + 3) & 0xFFFFFFFC) <= (int)v6 + *(_DWORD *)(a1 + 24))
        {
          v136 = a2;
          if ((int)v6 >= 1)
          {
            int v95 = 0;
            do
            {
              uint64_t v96 = 5;
              *(_OWORD *)((char *)&v139[1] + 10) = xmmword_1AB9DD6E0;
              *(_OWORD *)((char *)v139 + 10) = xmmword_1AB9DD6E0;
              LODWORD(v142[0]) = 0;
              HIDWORD(v141) = 0;
              if (v5 >= 1)
              {
                int v97 = 0;
                uint64_t v98 = 0;
                do
                {
                  uint64_t v99 = v98;
                  int v100 = v97;
                  *(void *)&long long v137 = v4 + (v98 & 0xFFFFFFF0) + (HIDWORD(v137) * v95);
                  SlimXDecodeBlocks_NEON((int *)&v137, *(double *)&v96, v10, v11);
                  uint64_t v98 = v99 + 16;
                  int v97 = v100 + 4;
                }
                while (v5 > v100 + 4);
              }
              v95 += 4;
            }
            while (v95 < (int)v6);
          }
          goto LABEL_249;
        }
        return v9;
      }
      if (v7 == 1278226488) {
        goto LABEL_102;
      }
      uint64_t v9 = 4294951891;
      if (v7 != 1278226534) {
        return v9;
      }
LABEL_88:
      v136 = a2;
      HIDWORD(v137) = *(_DWORD *)(a1 + 8);
      if ((int)v6 >= 1)
      {
        int v36 = 0;
        do
        {
          int v37 = v36;
          *(void *)&long long v137 = v4 + (HIDWORD(v137) * v36);
          SlimXDecodeF32Row((uint64_t)&v137);
          int v36 = v37 + 1;
        }
        while (v6 != v37 + 1);
      }
      goto LABEL_249;
    }
    if ((int)v7 <= 875704421)
    {
      if (v7 != 825306677)
      {
        uint64_t v9 = 4294951891;
        if (v7 != 825437747) {
          return v9;
        }
      }
      goto LABEL_110;
    }
    if (v7 == 875704422 || v7 == 875704438) {
      goto LABEL_102;
    }
    int v14 = 875704934;
    goto LABEL_101;
  }
  if ((int)v7 > 1647719527)
  {
    if ((int)v7 <= 1651519797)
    {
      if (v7 == 1647719528)
      {
        unint64_t v80 = *(unsigned int *)(a1 + 8);
        HIDWORD(v137) = *(_DWORD *)(a1 + 8);
        if ((*(_DWORD *)(a1 + 8360) & 0xFFFFFFFE) != 6) {
          return 4294951891;
        }
        LODWORD(v139[0]) = 23;
        uint64_t v9 = 4294951892;
        if ((int)((v5 + 7) & 0xFFFFFFF8) <= (int)((v80 >> 1) / BytesPerPixelForPixelFormat)
          && ((v6 + 7) & 0xFFFFFFF8) <= (int)v6 + *(_DWORD *)(a1 + 24))
        {
          v136 = a2;
          if ((int)v6 >= 1)
          {
            int v81 = 0;
            int v82 = 0;
            do
            {
              uint64_t v83 = v6;
              uint64_t v84 = 5;
              *(_OWORD *)((char *)&v139[1] + 10) = xmmword_1AB9DD6E0;
              *(_OWORD *)((char *)v139 + 10) = xmmword_1AB9DD6E0;
              LODWORD(v142[0]) = 0;
              HIDWORD(v141) = 0;
              if (v5 >= 1)
              {
                int v85 = 0;
                uint64_t v86 = v135;
                do
                {
                  uint64_t v87 = v86;
                  int v88 = v85;
                  *(void *)&long long v137 = v86 + (v82 * HIDWORD(v137));
                  SlimXDecodeBlocks_NEON((int *)&v137, *(double *)&v84, v10, v11);
                  uint64_t v86 = v87 + 16 * BytesPerPixelForPixelFormat;
                  int v85 = v88 + 8;
                }
                while (v5 > v88 + 8);
              }
              v81 += 8;
              v82 += 4;
              uint64_t v6 = v83;
            }
            while (v81 < (int)v83);
          }
          goto LABEL_249;
        }
        return v9;
      }
      if (v7 != 1650942776)
      {
        int v17 = 1650943796;
        goto LABEL_66;
      }
      goto LABEL_76;
    }
    if (v7 == 1651519798 || v7 == 1651847472) {
      goto LABEL_122;
    }
    int v38 = 1651925816;
    goto LABEL_121;
  }
  if ((int)v7 > 1278226741)
  {
    if (v7 != 1278226742)
    {
      if (v7 == 1380411457)
      {
        HIDWORD(v137) = *(_DWORD *)(a1 + 8);
        LODWORD(v139[0]) = 12;
        uint64_t v9 = 4294951892;
        if ((int)((v5 + 3) & 0xFFFFFFFC) <= (int)(HIDWORD(v137) / BytesPerPixelForPixelFormat)
          && ((v6 + 3) & 0xFFFFFFFC) <= (int)v6 + *(_DWORD *)(a1 + 24))
        {
          v136 = a2;
          if ((int)v6 >= 1)
          {
            int v89 = 0;
            do
            {
              uint64_t v90 = 5;
              *(_OWORD *)((char *)&v139[1] + 10) = xmmword_1AB9DD6E0;
              *(_OWORD *)((char *)v139 + 10) = xmmword_1AB9DD6E0;
              LODWORD(v142[0]) = 0;
              HIDWORD(v141) = 0;
              if (v5 >= 1)
              {
                int v91 = 0;
                uint64_t v92 = 0;
                do
                {
                  uint64_t v93 = v92;
                  int v94 = v91;
                  *(void *)&long long v137 = v4 + (HIDWORD(v137) * v89) + 2 * (v92 & 0xFFFFFFF0);
                  SlimXDecodeBlocks_NEON((int *)&v137, *(double *)&v90, v10, v11);
                  uint64_t v92 = v93 + 16;
                  int v91 = v94 + 4;
                }
                while (v5 > v94 + 4);
              }
              v89 += 4;
            }
            while (v89 < (int)v6);
          }
          goto LABEL_249;
        }
      }
      else
      {
        uint64_t v9 = 4294951891;
        if (v7 == 1647589490)
        {
          HIDWORD(v137) = *(_DWORD *)(a1 + 8);
          LODWORD(v139[0]) = 19;
          uint64_t v9 = 4294951892;
          if ((int)((v5 + 3) & 0xFFFFFFFC) <= (int)(HIDWORD(v137) / BytesPerPixelForPixelFormat)
            && ((v6 + 3) & 0xFFFFFFFC) <= (int)v6 + *(_DWORD *)(a1 + 24))
          {
            v136 = a2;
            if ((int)v6 >= 1)
            {
              int v18 = 0;
              do
              {
                uint64_t v19 = 5;
                *(_OWORD *)((char *)&v139[1] + 10) = xmmword_1AB9DD6E0;
                *(_OWORD *)((char *)v139 + 10) = xmmword_1AB9DD6E0;
                LODWORD(v142[0]) = 0;
                HIDWORD(v141) = 0;
                if (v5 >= 1)
                {
                  int v20 = 0;
                  uint64_t v21 = 0;
                  do
                  {
                    uint64_t v22 = v21;
                    int v23 = v20;
                    *(void *)&long long v137 = v4 + (HIDWORD(v137) * v18) + 2 * (v21 & 0xFFFFFFFC);
                    SlimXDecodeBlocks_NEON((int *)&v137, *(double *)&v19, v10, v11);
                    uint64_t v21 = v22 + 12;
                    int v20 = v23 + 4;
                  }
                  while (v5 > v23 + 4);
                }
                v18 += 4;
              }
              while (v18 < (int)v6);
            }
            goto LABEL_249;
          }
        }
      }
      return v9;
    }
    goto LABEL_110;
  }
  if (v7 == 1278226536)
  {
LABEL_110:
    HIDWORD(v137) = *(_DWORD *)(a1 + 8);
    LODWORD(v139[0]) = 24;
    uint64_t v9 = 4294951892;
    if ((signed int)((v5 + 15) & 0xFFFFFFF0) <= (signed int)(HIDWORD(v137) >> 1)
      && ((v6 + 3) & 0xFFFFFFFC) <= (int)v6 + *(_DWORD *)(a1 + 24))
    {
      v136 = a2;
      if ((int)v6 >= 1)
      {
        int v42 = 0;
        do
        {
          uint64_t v43 = 5;
          *(_OWORD *)((char *)&v139[1] + 10) = xmmword_1AB9DD6E0;
          *(_OWORD *)((char *)v139 + 10) = xmmword_1AB9DD6E0;
          LODWORD(v142[0]) = 0;
          HIDWORD(v141) = 0;
          if (v5 >= 1)
          {
            int v44 = 0;
            uint64_t v45 = v135;
            do
            {
              uint64_t v46 = v45;
              int v47 = v44;
              *(void *)&long long v137 = v45 + (v42 * HIDWORD(v137));
              SlimXDecodeBlocks_NEON((int *)&v137, *(double *)&v43, v10, v11);
              uint64_t v45 = v46 + 32;
              int v44 = v47 + 16;
            }
            while (v5 > v47 + 16);
          }
          v42 += 4;
        }
        while (v42 < (int)v6);
      }
      goto LABEL_249;
    }
    return v9;
  }
  if (v7 != 1278226736)
  {
    int v14 = 1278226738;
    goto LABEL_101;
  }
LABEL_102:
  HIDWORD(v137) = *(_DWORD *)(a1 + 8);
  uint64_t v9 = 4294951892;
  if ((int)((v5 + 15) & 0xFFFFFFF0) <= (int)(HIDWORD(v137) / BytesPerPixelForPixelFormat)
    && ((v6 + 3) & 0xFFFFFFFC) <= (int)v6 + *(_DWORD *)(a1 + 24))
  {
    v136 = a2;
    if (CMPhotoGetBitDepthForPixelFormat(v7) == 8)
    {
      LODWORD(v139[0]) = 0;
    }
    else
    {
      if (CMPhotoGetBitDepthForPixelFormat(v7) == 10)
      {
        int v41 = 10;
      }
      else if (v7 == 1751527984)
      {
        int v41 = 15;
      }
      else
      {
        int v41 = 24;
      }
      LODWORD(v139[0]) = v41;
    }
    if ((int)v6 >= 1)
    {
      int v101 = 0;
      do
      {
        uint64_t v102 = 5;
        *(_OWORD *)((char *)&v139[1] + 10) = xmmword_1AB9DD6E0;
        *(_OWORD *)((char *)v139 + 10) = xmmword_1AB9DD6E0;
        LODWORD(v142[0]) = 0;
        HIDWORD(v141) = 0;
        if (v5 >= 1)
        {
          int v103 = 0;
          uint64_t v104 = v135;
          do
          {
            uint64_t v105 = v104;
            *(void *)&long long v137 = v104 + (v101 * HIDWORD(v137));
            SlimXDecodeBlocks_NEON((int *)&v137, *(double *)&v102, v39, v40);
            uint64_t v104 = v105 + 16 * BytesPerPixelForPixelFormat;
            v103 += 16;
          }
          while (v5 > v103);
        }
        v101 += 4;
      }
      while (v101 < (int)v6);
    }
    if ((int)v7 <= 1278226735)
    {
      uint64_t v106 = v7;
      if ((v7 - 1278226488) <= 0x30 && ((1 << (v7 - 56)) & 0x1400000000001) != 0) {
        goto LABEL_249;
      }
      int v107 = 825437747;
    }
    else
    {
      uint64_t v106 = v7;
      if ((int)v7 > 1717856626)
      {
        if ((int)v7 > 1751411058) {
          int v107 = 1932996149;
        }
        else {
          int v107 = 1751410032;
        }
      }
      else
      {
        if ((v7 - 1278226736) <= 6 && ((1 << (v7 - 48)) & 0x45) != 0) {
          goto LABEL_249;
        }
        int v107 = 1717855600;
      }
    }
    if (v7 != v107)
    {
      if (CMPhotoGetBitDepthForPixelFormat(v106) == 8)
      {
        int v110 = 1;
      }
      else if (CMPhotoGetBitDepthForPixelFormat(v106) == 10)
      {
        int v110 = 11;
      }
      else
      {
        if (v7 == 1751527984)
        {
          LODWORD(v139[0]) = 16;
          goto LABEL_260;
        }
        int v110 = 25;
      }
      LODWORD(v139[0]) = v110;
      int v121 = 2;
      int v122 = 1;
      if ((int)v7 > 1952854577)
      {
        if ((int)v7 > 2016686641)
        {
          if ((int)v7 > 2019963441)
          {
            if (v7 == 2019963956) {
              goto LABEL_290;
            }
            int v123 = 2019963442;
LABEL_288:
            if (v7 == v123) {
              goto LABEL_289;
            }
LABEL_260:
            int v121 = 1;
            int v122 = 2;
            goto LABEL_290;
          }
          if (v7 == 2016686642)
          {
LABEL_289:
            int v121 = 1;
            int v122 = 1;
LABEL_290:
            uint64_t v125 = *(void *)(a1 + 96);
            HIDWORD(v137) = *(_DWORD *)(a1 + 12);
            int v126 = (int)v6 / v122;
            if ((int)v6 / v122 >= 1)
            {
              int v127 = v121 * v5;
              int v128 = 0;
              do
              {
                uint64_t v129 = 5;
                *(_OWORD *)((char *)&v139[1] + 10) = xmmword_1AB9DD6E0;
                *(_OWORD *)((char *)v139 + 10) = xmmword_1AB9DD6E0;
                LODWORD(v142[0]) = 0;
                HIDWORD(v141) = 0;
                if (v127 >= 1)
                {
                  int v130 = 0;
                  uint64_t v131 = v125;
                  do
                  {
                    uint64_t v132 = v131;
                    int v133 = v130;
                    *(void *)&long long v137 = v131 + (v128 * HIDWORD(v137));
                    SlimXDecodeBlocks_NEON((int *)&v137, *(double *)&v129, v108, v109);
                    uint64_t v131 = v132 + 16 * BytesPerPixelForPixelFormat;
                    int v130 = v133 + 16;
                  }
                  while (v127 > v133 + 16);
                }
                v128 += 4;
              }
              while (v128 < v126);
            }
            goto LABEL_249;
          }
          int v124 = 2016687156;
        }
        else if ((int)v7 > 1953903153)
        {
          if (v7 == 1953903154) {
            goto LABEL_289;
          }
          int v124 = 1953903668;
        }
        else
        {
          if (v7 == 1952854578) {
            goto LABEL_289;
          }
          int v124 = 1952855092;
        }
      }
      else if ((int)v7 > 1936077361)
      {
        if ((int)v7 > 1937125937)
        {
          if (v7 == 1937125938) {
            goto LABEL_289;
          }
          int v124 = 1937126452;
        }
        else
        {
          if (v7 == 1936077362) {
            goto LABEL_289;
          }
          int v124 = 1936077876;
        }
      }
      else
      {
        if ((int)v7 <= 875836517)
        {
          if (v7 != 875704934)
          {
            int v123 = 875704950;
            goto LABEL_288;
          }
          goto LABEL_289;
        }
        if (v7 == 875836518) {
          goto LABEL_290;
        }
        int v124 = 875836534;
      }
      if (v7 == v124) {
        goto LABEL_290;
      }
      goto LABEL_260;
    }
LABEL_249:
    void *v136 = v138 - *(void *)(a1 + 64);
    return 0;
  }
  return v9;
}

uint64_t CMPhotoDecompressionTileIteratorStepAndReportPosition(uint64_t a1)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v1 = *(void *)(a1 + 48);
  if (v1) {
    uint64_t v2 = *(void *)(a1 + 48);
  }
  else {
    uint64_t v2 = 0;
  }
  if (!*(void *)(v2 + 8)) {
    return 4294950302;
  }
  if (v1) {
    uint64_t v3 = *(void *)(a1 + 48);
  }
  else {
    uint64_t v3 = 0;
  }
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t CMPhotoDecompressionTileIteratorMoveToPosition(uint64_t a1)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v1 = *(void *)(a1 + 48);
  if (v1) {
    uint64_t v2 = *(void *)(a1 + 48);
  }
  else {
    uint64_t v2 = 0;
  }
  if (!*(void *)(v2 + 16)) {
    return 4294950302;
  }
  if (v1) {
    uint64_t v3 = *(void *)(a1 + 48);
  }
  else {
    uint64_t v3 = 0;
  }
  return (*(uint64_t (**)(void))(v3 + 16))();
}

uint64_t CMPhotoDecompressionTileIteratorGetTileSourceRect(uint64_t a1)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v1 = *(void *)(a1 + 48);
  if (v1) {
    uint64_t v2 = *(void *)(a1 + 48);
  }
  else {
    uint64_t v2 = 0;
  }
  if (!*(void *)(v2 + 24)) {
    return 4294950302;
  }
  if (v1) {
    uint64_t v3 = *(void *)(a1 + 48);
  }
  else {
    uint64_t v3 = 0;
  }
  return (*(uint64_t (**)(void))(v3 + 24))();
}

uint64_t CMPhotoDecompressionTileIteratorGetTileItemType(uint64_t a1)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v1 = *(void *)(a1 + 48);
  if (v1) {
    uint64_t v2 = *(void *)(a1 + 48);
  }
  else {
    uint64_t v2 = 0;
  }
  if (!*(void *)(v2 + 40)) {
    return 4294950302;
  }
  if (v1) {
    uint64_t v3 = *(void *)(a1 + 48);
  }
  else {
    uint64_t v3 = 0;
  }
  return (*(uint64_t (**)(void))(v3 + 40))();
}

uint64_t CMPhotoDecompressionTileIteratorDecodeTileAsyncF(uint64_t a1)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v1 = *(void *)(a1 + 48);
  if (v1) {
    uint64_t v2 = *(void *)(a1 + 48);
  }
  else {
    uint64_t v2 = 0;
  }
  if (!*(void *)(v2 + 48)) {
    return 4294950302;
  }
  if (v1) {
    uint64_t v3 = *(void *)(a1 + 48);
  }
  else {
    uint64_t v3 = 0;
  }
  return (*(uint64_t (**)(void))(v3 + 48))();
}

uint64_t CMPhotoDecompressionTileIteratorDecodeTileAsync(uint64_t a1, int a2, int a3, int a4, void *aBlock)
{
  uint64_t v6 = _Block_copy(aBlock);
  uint64_t v7 = CMPhotoDecompressionTileIteratorDecodeTileAsyncF(a1);
  uint64_t v8 = v7;
  if (v6 && v7) {
    _Block_release(v6);
  }
  return v8;
}

uint64_t CMPhotoDecompressionTileIteratorCancelAsyncRequest(uint64_t a1)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v1 = *(void *)(a1 + 48);
  if (v1) {
    uint64_t v2 = *(void *)(a1 + 48);
  }
  else {
    uint64_t v2 = 0;
  }
  if (!*(void *)(v2 + 56)) {
    return 4294950302;
  }
  if (v1) {
    uint64_t v3 = *(void *)(a1 + 48);
  }
  else {
    uint64_t v3 = 0;
  }
  return (*(uint64_t (**)(void))(v3 + 56))();
}

uint64_t JPEGDecompressSurfaceAsync(mach_port_t a1, IOSurfaceRef buffer, __IOSurface *a3, uint64_t a4, int a5, unsigned int a6, unsigned int a7, int a8, long long a9, uint64_t a10)
{
  uint64_t v28 = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v25 = 0u;
  long long v24 = 0u;
  uint64_t v22 = 0;
  memset(outputStruct, 0, sizeof(outputStruct));
  inputStruct[0] = IOSurfaceGetID(buffer);
  inputStruct[2] = IOSurfaceGetID(a3);
  *(void *)((char *)&v24 + 4) = *(void *)a4;
  inputStruct[1] = IOSurfaceGetAllocSize(buffer);
  inputStruct[3] = IOSurfaceGetAllocSize(a3);
  LODWORD(v25) = a5;
  HIDWORD(v25) = *(_DWORD *)(a4 + 16);
  *((void *)&v27 + 1) = __PAIR64__(a7, a6);
  LODWORD(v28) = a8;
  long long v26 = a9;
  *(void *)&long long v27 = a10;
  uint64_t v18 = JPEGDeviceInterface_decodeJPEG(a1, inputStruct, outputStruct);
  uint64_t v19 = v18;
  if (v18) {
    syslog(5, "JPEGDecompressSurfaceAsync : Picture decode failed: %08x", v18);
  }
  return v19;
}

unint64_t JPEGCalculateOutputDimensions(unint64_t result, unint64_t a2, int a3, int a4, int a5, int a6, void *a7, void *a8, void *a9, _DWORD *a10, _DWORD *a11)
{
  unint64_t v12 = a2;
  unint64_t v13 = result;
  LODWORD(v14) = 0;
  if (result <= a2) {
    unint64_t v15 = a2;
  }
  else {
    unint64_t v15 = result;
  }
  if (result >= a2) {
    unint64_t v16 = a2;
  }
  else {
    unint64_t v16 = result;
  }
  if (a3 && v15 > a3)
  {
    int v37 = a5;
    int v38 = a6;
    uint32x4_t v39 = a7;
    unint64_t v18 = 0;
    unint64_t v19 = (int)(a3 & 0xFFFFFFFE);
    do
    {
      unint64_t v14 = v18++;
      size_t result = JPEGDeviceInterface_supportsAppleInterchangeFormats();
      if (result) {
        BOOL v20 = v15 >> v18 << v18 == v15;
      }
      else {
        BOOL v20 = 1;
      }
      if (v20) {
        unint64_t v21 = v15 >> v18;
      }
      else {
        unint64_t v21 = (v15 >> v18) + 1;
      }
      if (v21 < v19) {
        break;
      }
      size_t result = JPEGDeviceInterface_supportsAppleInterchangeFormats();
      BOOL v22 = !result || v16 >> v18 << v18 == v16;
      uint64_t v23 = !v22;
    }
    while (v14 <= 2 && v16 >> v18 != v23 << 63 >> 63);
    if (v14)
    {
      if (JPEGDeviceInterface_supportsAppleInterchangeFormats()) {
        BOOL v24 = v13 >> v14 << v14 == v13;
      }
      else {
        BOOL v24 = 1;
      }
      if (v24) {
        v13 >>= v14;
      }
      else {
        unint64_t v13 = (v13 >> v14) + 1;
      }
      size_t result = JPEGDeviceInterface_supportsAppleInterchangeFormats();
      if (result) {
        BOOL v25 = v12 >> v14 << v14 == v12;
      }
      else {
        BOOL v25 = 1;
      }
      if (v25) {
        v12 >>= v14;
      }
      else {
        unint64_t v12 = (v12 >> v14) + 1;
      }
      if (v13 <= v12) {
        unint64_t v15 = v12;
      }
      else {
        unint64_t v15 = v13;
      }
    }
    float v26 = (float)a3 / (float)v15;
    if (v26 > 1.0) {
      float v26 = 1.0;
    }
    a7 = v39;
    a6 = v38;
    if (a4 && v26 > 0.79)
    {
      unint64_t v27 = v13;
      unint64_t v28 = v12;
      a5 = v37;
    }
    else
    {
      unint64_t v27 = (unint64_t)((float)(v26 * (float)v13) + 0.5);
      unint64_t v28 = (unint64_t)(float)((float)(v26 * (float)v12) + 0.5);
      BOOL v29 = v13 > v27 || v12 > v28;
      a5 = v37;
      if (v29)
      {
        v27 &= ~1uLL;
        v28 &= ~1uLL;
      }
    }
  }
  else
  {
    unint64_t v27 = result;
    unint64_t v28 = a2;
  }
  if (a5)
  {
    if ((a6 - 1) > 7) {
      int v30 = 0;
    }
    else {
      int v30 = transformMap[a6 - 1];
    }
    unint64_t v32 = v27 & 0xFFFFFFFFFFFFFFFELL;
    if (v30) {
      v28 &= ~1uLL;
    }
    else {
      unint64_t v32 = v27;
    }
    if ((v30 & 4) != 0) {
      unint64_t v27 = v28;
    }
    else {
      unint64_t v27 = v32;
    }
    if ((v30 & 4) != 0)
    {
      unint64_t v28 = v32;
      int v31 = 0;
    }
    else
    {
      int v31 = 1;
    }
  }
  else
  {
    int v30 = 0;
    int v31 = 1;
  }
  if (v27) {
    int v33 = v27;
  }
  else {
    int v33 = 2;
  }
  if (!v28) {
    LODWORD(v28) = 2;
  }
  if (a8)
  {
    *a8 = v33;
    a8[1] = (int)v28;
  }
  if (a9)
  {
    BOOL v34 = v31 == 0;
    if (v31) {
      int v35 = v33;
    }
    else {
      int v35 = v28;
    }
    if (v34) {
      LODWORD(v28) = v33;
    }
    *a9 = v35;
    a9[1] = (int)v28;
  }
  if (a7)
  {
    *a7 = (int)v13;
    a7[1] = (int)v12;
  }
  if (a10) {
    *a10 = v30;
  }
  if (a11) {
    *a11 = v14;
  }
  return result;
}

void _stripDecodeCompleteCallback(dispatch_group_t group, int a2, _DWORD *a3)
{
  if (a2) {
    *a3 = a2;
  }
  dispatch_group_leave(group);
}

uint64_t SlimHrlcGetSize_C(uint64_t result)
{
  uint64_t v1 = 0;
  uint64_t v2 = (_DWORD *)(result + 20472);
  uint64_t v3 = (uint64_t **)(result + 20480);
  *(void *)(result + 20512) = -1;
  *(unsigned char *)(result + 20508) = -1;
  *(_DWORD *)(result + 20504) = 0;
  *(_OWORD *)(result + 20480) = 0u;
  do
  {
    uint64_t v4 = result + v1;
    *(void *)(v4 + 32) = 0xFFFFFFFF00000000;
    *(unsigned char *)(v4 + 28) = 0;
    *(_DWORD *)(v4 + 24) = 0;
    v1 += 40;
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
  }
  while (v1 != 20480);
  int v5 = *(unsigned __int16 *)(result + 20534);
  int v6 = *(unsigned __int16 *)(result + 20528);
  if (!*(_WORD *)(result + 20534))
  {
    unsigned int v8 = 0;
    int v13 = -1;
LABEL_24:
    uint64_t v19 = v13;
    goto LABEL_25;
  }
  int v7 = 0;
  unsigned int v8 = 0;
  uint64_t v9 = *(unsigned __int8 **)(result + 20520);
  uint64_t v10 = *(unsigned __int16 *)(result + 20532);
  uint64_t v11 = *(unsigned __int16 *)(result + 20530) - v10;
  unint64_t v12 = (_DWORD *)(result + 40 * *(unsigned __int16 *)(result + 20528) + 32);
  int v13 = -1;
  do
  {
    for (int i = v10; i; --i)
    {
      int v16 = *v9++;
      int v15 = v16;
      if (v13 == v16)
      {
        ++v8;
      }
      else
      {
        if (v13 == v6)
        {
          *v12 += v8;
          unsigned int v17 = v8 - 256;
          if (v8 >= 0x100)
          {
            unsigned int v8 = v8;
            *v2 += (v17 >> 8) + 1;
          }
          if (v8) {
            ++*(_DWORD *)(result + 40 * (v8 + 255) + 32);
          }
        }
        else if (v13 != -1)
        {
          *(_DWORD *)(result + 40 * v13 + 32) += v8;
        }
        unsigned int v8 = 1;
        int v13 = v15;
      }
    }
    v9 += v11;
    ++v7;
  }
  while (v7 != v5);
  if (v13 != v6) {
    goto LABEL_24;
  }
  *v12 += v8;
  unsigned int v18 = v8 - 256;
  if (v8 >= 0x100)
  {
    unsigned int v8 = v8;
    *v2 += (v18 >> 8) + 1;
  }
  if (v8)
  {
    uint64_t v19 = v8 + 255;
    unsigned int v8 = 1;
LABEL_25:
    *(_DWORD *)(result + 40 * v19 + 32) += v8;
  }
  int v20 = 0;
  int v21 = 0;
  uint64_t v22 = result;
  do
  {
    unsigned int v23 = *(_DWORD *)(v22 + 32);
    if (v23)
    {
      if (v20 == v6)
      {
        *(_DWORD *)(v22 + 32) = 0;
      }
      else
      {
        *(_DWORD *)(v22 + 36) = v23;
        BOOL v24 = (uint64_t *)(result + 20480);
        do
        {
          BOOL v25 = v24;
          BOOL v24 = (uint64_t *)*v24;
        }
        while (v24 && v23 > *((_DWORD *)v24 + 9));
        *BOOL v25 = v22;
        *(void *)uint64_t v22 = v24;
        ++v21;
      }
    }
    v22 += 40;
    ++v20;
  }
  while (v20 != 256);
  for (int j = 0; j != 256; ++j)
  {
    unsigned int v27 = *(_DWORD *)(v22 + 32);
    if (v27)
    {
      *(_DWORD *)(v22 + 36) = v27;
      unint64_t v28 = (uint64_t *)(result + 20480);
      do
      {
        BOOL v29 = v28;
        unint64_t v28 = (uint64_t *)*v28;
      }
      while (v28 && v27 > *((_DWORD *)v28 + 9));
      *BOOL v29 = v22;
      *(void *)uint64_t v22 = v28;
      ++v21;
    }
    v22 += 40;
  }
  int v30 = v21 - 1;
  if (v21 != 1)
  {
    int v31 = 0;
    do
    {
      unint64_t v32 = *v3;
      uint64_t v33 = **v3;
      uint64_t v34 = *(void *)(v33 + 8);
      *uint64_t v3 = *(uint64_t **)v33;
      unsigned int v35 = *(_DWORD *)(v33 + 36) + *((_DWORD *)v32 + 9);
      *(_DWORD *)(v33 + 36) = v35;
      ++*(unsigned char *)(v33 + 28);
      for (k = v33; v34; uint64_t v34 = *(void *)(v34 + 8))
      {
        uint64_t k = v34;
        ++*(unsigned char *)(v34 + 28);
      }
      *(void *)(k + 8) = v32;
      *unint64_t v32 = 0;
      do
      {
        ++*((unsigned char *)v32 + 28);
        unint64_t v32 = (uint64_t *)v32[1];
      }
      while (v32);
      int v37 = (uint64_t *)(result + 20480);
      do
      {
        int v38 = v37;
        int v37 = (uint64_t *)*v37;
      }
      while (v37 && v35 > *((_DWORD *)v37 + 9));
      *int v38 = v33;
      *(void *)uint64_t v33 = v37;
      ++v31;
    }
    while (v31 != v30);
  }
  uint32x4_t v39 = *v3;
  if (*v3)
  {
    unsigned int v40 = 0;
    uint64_t v41 = 0;
    do
    {
      unsigned int v42 = *((unsigned __int8 *)v39 + 28);
      v41 += *((_DWORD *)v39 + 8) * v42;
      if (v40 <= v42) {
        unsigned int v40 = *((unsigned __int8 *)v39 + 28);
      }
      uint32x4_t v39 = (uint64_t *)v39[1];
    }
    while (v39);
    uint32x4_t v39 = (uint64_t *)((unint64_t)(v41 + 7) >> 3);
  }
  else
  {
    unsigned int v40 = 0;
  }
  *(_DWORD *)(result + 20536) = v40;
  *(void *)(result + 20544) = v39;
  return result;
}

uint64_t SlimHrlcEncodeRun_C(uint64_t a1, unsigned char *a2, uint64_t a3, void *a4)
{
  uint64_t v4 = (unsigned int *)(a1 + 20464);
  int v5 = *(_DWORD *)(a1 + 20536);
  if (v5)
  {
    unsigned int v6 = 0;
    int v7 = 1;
    do
    {
      if (v6 >= ~(-1 << v7)) {
        return 4294951894;
      }
      int v8 = 256;
      uint64_t v9 = (unsigned __int8 *)(a1 + 68);
      uint64_t v10 = a1;
      do
      {
        uint64_t v11 = v9;
        if (*(_DWORD *)(v10 + 32) && v7 == *(unsigned __int8 *)(v10 + 28)) {
          *(_DWORD *)(v10 + 24) = v6++;
        }
        v10 += 40;
        v9 += 40;
        --v8;
      }
      while (v8);
      int v12 = 256;
      do
      {
        if (v7 == *v11) {
          *((_DWORD *)v11 - 1) = v6++;
        }
        v11 += 40;
        --v12;
      }
      while (v12);
      v6 *= 2;
      BOOL v37 = v7++ == v5;
    }
    while (!v37);
  }
  unsigned int v13 = 0;
  unint64_t v14 = 0;
  int v15 = 0;
  unint64_t v16 = (unint64_t)&a2[a3];
  uint64_t v17 = *(unsigned __int16 *)(a1 + 20528) + 1;
  int v18 = 1;
  uint64_t v19 = a2;
LABEL_16:
  unsigned int v20 = -5;
  do
  {
    if (v18 + v20 == 251)
    {
      int v15 = *(unsigned __int8 *)(a1 + 108 + 40 * v17);
      uint64_t v17 = 256;
    }
    int v21 = *(unsigned __int8 *)(a1 + 40 * v17 + 28);
    if (*(unsigned char *)(a1 + 40 * v17 + 28))
    {
      if (v20 != -5)
      {
        if (v20 >= 0xFFFFFFFB)
        {
          BOOL v24 = (char *)&_encodeHuffmanTable_symbolArray + 16 * v20 + 224;
          v13 += v24[12];
          v14 += (unint64_t)*((unsigned int *)v24 + 2) << -(char)v13;
        }
        else
        {
          unint64_t v22 = (255 << (56 - v13)) + v14;
          char v23 = 48 - v13;
          v13 += 16;
          unint64_t v14 = v22 + ((unint64_t)v20 << v23);
        }
      }
      int v25 = v21 - v15;
      if (v21 - v15 > -5)
      {
        if (v25 < 5)
        {
          BOOL v29 = (char *)&_encodeHuffmanTable_symbolArray + 16 * (v25 + 4);
          v13 += v29[12];
          unint64_t v26 = (unint64_t)*((unsigned int *)v29 + 2) << -(char)v13;
        }
        else
        {
          unint64_t v26 = (254 << (56 - v13)) + v14;
          char v28 = 48 - v13;
          v13 += 16;
          unint64_t v14 = (unint64_t)(v25 - 5) << v28;
        }
      }
      else
      {
        unint64_t v26 = (254 << (56 - v13)) + v14;
        char v27 = 48 - v13;
        v13 += 16;
        unint64_t v14 = (unint64_t)(v25 + 4) << v27;
      }
      v14 += v26;
      if ((unint64_t)v19 < v16 && v13 >= 8)
      {
        do
        {
          *v19++ = HIBYTE(v14);
          v14 <<= 8;
          v13 -= 8;
        }
        while ((unint64_t)v19 < v16 && v13 > 7);
      }
      if (v13 >= 8) {
        return 4294951888;
      }
      if (v17 == 255) {
        uint64_t v17 = 0;
      }
      else {
        ++v17;
      }
      unsigned int v31 = v18 + v20;
      int v18 = v31 + 6;
      int v15 = v21;
      if (v31 == 506) {
        goto LABEL_50;
      }
      goto LABEL_16;
    }
    if (v17 == 255) {
      uint64_t v17 = 0;
    }
    else {
      ++v17;
    }
    ++v20;
  }
  while (v18 + v20 != 507);
  if (v18 != 512)
  {
    if ((v18 - 513) > 0xFFFFFFFA)
    {
      uint64_t v34 = (char *)&_encodeHuffmanTable_symbolArray + 16 * (521 - v18);
      v13 += v34[12];
      v14 += (unint64_t)*((unsigned int *)v34 + 2) << -(char)v13;
    }
    else
    {
      unint64_t v32 = (255 << (56 - v13)) + v14;
      char v33 = 48 - v13;
      v13 += 16;
      unint64_t v14 = v32 + ((unint64_t)(507 - v18) << v33);
    }
  }
LABEL_50:
  unsigned int v35 = (v13 + 7) & 0xFFFFFFF8;
  if ((unint64_t)v19 >= v16 || !v35)
  {
    if (!v35) {
      goto LABEL_61;
    }
    return 4294951888;
  }
  do
  {
    *v19++ = HIBYTE(v14);
    v14 <<= 8;
    unsigned int v36 = v35 - 8;
    BOOL v37 = (unint64_t)v19 >= v16 || v35 == 8;
    v35 -= 8;
  }
  while (!v37);
  if (v36) {
    return 4294951888;
  }
LABEL_61:
  if (v19 - a2 > 128) {
    return 4294951894;
  }
  int v39 = *(unsigned __int16 *)(a1 + 20534);
  unsigned int v40 = v19;
  if (!*(_WORD *)(a1 + 20534)) {
    goto LABEL_135;
  }
  int v41 = 0;
  unsigned int v42 = 0;
  uint64_t v43 = 0;
  unsigned int v44 = 0;
  uint64_t v45 = &a2[a3];
  int v46 = *(unsigned __int16 *)(a1 + 20528);
  int v47 = *(unsigned __int8 **)(a1 + 20520);
  uint64_t v48 = *(unsigned __int16 *)(a1 + 20532);
  uint64_t v49 = *(unsigned __int16 *)(a1 + 20530) - v48;
  int v50 = -1;
  unsigned int v40 = v19;
  while (2)
  {
    if (v48)
    {
      int v51 = 0;
      while (1)
      {
        int v53 = *v47++;
        int v52 = v53;
        if (v50 != v53) {
          break;
        }
        ++v44;
LABEL_100:
        if (v42 >= 8) {
          return 4294951888;
        }
        if (++v51 == v48) {
          goto LABEL_102;
        }
      }
      if (v50 == v46)
      {
        while (v44 >= 0x100)
        {
          v42 += *(unsigned __int8 *)(a1 + 20468);
          v43 += (unint64_t)*v4 << -(char)v42;
          if (v40 < v45 && v42 >= 8)
          {
            do
            {
              *v40++ = HIBYTE(v43);
              v43 <<= 8;
              v42 -= 8;
            }
            while (v40 < v45 && v42 > 7);
          }
          v44 -= 256;
        }
        if (v44)
        {
          uint64_t v59 = a1 + 40 * (v44 + 255);
          v42 += *(unsigned __int8 *)(v59 + 28);
          v43 += (unint64_t)*(unsigned int *)(v59 + 24) << -(char)v42;
          unsigned int v44 = 1;
          if (v40 >= v45 || v42 < 8) {
            goto LABEL_98;
          }
          do
          {
            *v40++ = HIBYTE(v43);
            v43 <<= 8;
            v42 -= 8;
          }
          while (v40 < v45 && v42 > 7);
        }
      }
      else
      {
        if (v50 == -1 || !v44)
        {
          int v50 = v52;
          unsigned int v44 = 1;
          goto LABEL_100;
        }
        uint64_t v55 = a1 + 40 * v50;
        unsigned int v56 = (unsigned __int8 *)(v55 + 28);
        unsigned int v57 = (unsigned int *)(v55 + 24);
        do
        {
          v42 += *v56;
          v43 += (unint64_t)*v57 << -(char)v42;
          if (v40 < v45 && v42 >= 8)
          {
            do
            {
              *v40++ = HIBYTE(v43);
              v43 <<= 8;
              v42 -= 8;
            }
            while (v40 < v45 && v42 > 7);
          }
          --v44;
        }
        while (v44);
      }
      unsigned int v44 = 1;
LABEL_98:
      int v50 = v52;
      goto LABEL_100;
    }
LABEL_102:
    v47 += v49;
    if (++v41 != v39) {
      continue;
    }
    break;
  }
  if (v50 == v46)
  {
    while (v44 >= 0x100)
    {
      v42 += *(unsigned __int8 *)(a1 + 20468);
      v43 += (unint64_t)*v4 << -(char)v42;
      if (v40 < v45 && v42 >= 8)
      {
        do
        {
          *v40++ = HIBYTE(v43);
          v43 <<= 8;
          v42 -= 8;
        }
        while (v40 < v45 && v42 > 7);
      }
      v44 -= 256;
    }
    if (v44)
    {
      uint64_t v66 = a1 + 40 * (v44 + 255);
      v42 += *(unsigned __int8 *)(v66 + 28);
      v43 += (unint64_t)*(unsigned int *)(v66 + 24) << -(char)v42;
      if (v40 < v45 && v42 >= 8)
      {
        do
        {
          *v40++ = HIBYTE(v43);
          v43 <<= 8;
          v42 -= 8;
        }
        while (v40 < v45 && v42 > 7);
      }
    }
  }
  else if (v44)
  {
    uint64_t v62 = a1 + 40 * v50;
    uint64_t v63 = (unsigned __int8 *)(v62 + 28);
    unsigned int v64 = (unsigned int *)(v62 + 24);
    do
    {
      v42 += *v63;
      v43 += (unint64_t)*v64 << -(char)v42;
      if (v40 < v45 && v42 >= 8)
      {
        do
        {
          *v40++ = HIBYTE(v43);
          v43 <<= 8;
          v42 -= 8;
        }
        while (v40 < v45 && v42 > 7);
      }
      --v44;
    }
    while (v44);
  }
  if (v42 > 7 || v40 == v45 && v42) {
    return 4294951888;
  }
  if (v40 < v45 && v42) {
    *v40++ = HIBYTE(v43);
  }
LABEL_135:
  if (*(void *)(a1 + 20544) == v40 - v19) {
    uint64_t result = 0;
  }
  else {
    uint64_t result = 4294951894;
  }
  if (a4) {
    *a4 = v40;
  }
  return result;
}

uint64_t SlimHrlcDecodeRun_C(uint64_t a1)
{
  int v1 = MEMORY[0x1F4188790](a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  int v7 = v6;
  int v9 = v8;
  unsigned int v11 = v10;
  uint64_t v13 = v12;
  int v14 = v1;
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  memcpy(v98, &unk_1AB9DD7A8, sizeof(v98));
  bzero(v71, 0x10200uLL);
  unsigned int v15 = 0;
  int v16 = 0;
  int v17 = 0;
  unsigned int v18 = 0;
  uint64_t v19 = 1;
  v71[0] = 1;
  v71[2] = 1;
  v72[0] = v98;
  *(void *)((char *)&v72[256] + 4) = 0x200000002;
  v72[514] = 0x400000002;
  int v73 = 6;
  int v74 = &v98[16];
  uint64_t v75 = &v98[32];
  uint64_t v76 = 0xC00000002;
  int v77 = 14;
  uint64_t v78 = &v98[48];
  int v79 = &v98[64];
  uint64_t v80 = 0x1C00000002;
  int v81 = 30;
  int v82 = &v98[80];
  uint64_t v83 = &v98[96];
  uint64_t v84 = 0x3C00000002;
  int v85 = 62;
  uint64_t v86 = &v98[112];
  uint64_t v87 = &v98[128];
  uint64_t v88 = 0x7C00000002;
  int v89 = 126;
  uint64_t v90 = &v98[144];
  int v91 = &v98[160];
  uint64_t v92 = 0xFC00000004;
  int v93 = 256;
  int v94 = &v98[176];
  unint64_t v20 = (unint64_t)&v7[v5];
  int v95 = &v98[192];
  int v21 = v69;
  uint64_t v96 = &v98[208];
  int v97 = &v98[224];
  unint64_t v22 = v7;
  char v68 = 0;
  do
  {
    if (v19 == 256) {
      unsigned int v15 = v69[1];
    }
    if ((unint64_t)v22 >= v20)
    {
LABEL_14:
      uint64_t v28 = v19;
      goto LABEL_15;
    }
    unsigned int v23 = 1;
    BOOL v24 = v72;
    int v25 = v16;
    while (1)
    {
      unsigned int v26 = *v22;
      if (v25 == 7)
      {
        if ((unint64_t)++v22 >= v20) {
          return 4294951889;
        }
        int v16 = 0;
      }
      else
      {
        int v16 = v25 + 1;
      }
      unsigned int v27 = (v26 >> (7 - v25)) & 1 | (2 * v17);
      if (v27 < *((_DWORD *)v24 - 2)) {
        break;
      }
      if (v23 <= 7)
      {
        ++v23;
        v24 += 258;
        int v25 = v16;
        int v17 = v27;
        if ((unint64_t)v22 < v20) {
          continue;
        }
      }
      int v17 = v27;
      goto LABEL_14;
    }
    unsigned int v29 = v27 - *((_DWORD *)v24 - 3);
    if (v29 >= *((_DWORD *)v24 - 4)) {
      return 4294951894;
    }
    int v30 = (int *)v24[v29];
    int v31 = *v30;
    if (*v30 == 0x10000)
    {
      char v33 = v22 + 1;
      if ((unint64_t)(v22 + 1) >= v20) {
        return 4294951889;
      }
      int v34 = (v22[1] >> (8 - v16)) + (*v22 << v16);
      if ((v34 & 0x80) != 0) {
        int v35 = -4;
      }
      else {
        int v35 = 5;
      }
      int v31 = v35 + (char)v34;
      unint64_t v22 = v33;
LABEL_34:
      int v17 = 0;
      v15 += v31;
      *v21++ = v15;
      if (v18 <= v15) {
        unsigned int v18 = v15;
      }
      uint64_t v28 = (v19 + 1);
      goto LABEL_15;
    }
    if (v31 != 0x8000) {
      goto LABEL_34;
    }
    int v17 = v30[1];
    if (!v17)
    {
      if ((unint64_t)(v22 + 1) >= v20) {
        return 4294951889;
      }
      int v17 = ((v22[1] >> (8 - v16)) + (*v22 << v16)) + 5;
      ++v22;
    }
    uint64_t v28 = (v17 + v19);
    if (v28 > 0x200) {
      return 4294951889;
    }
    int v32 = v19 - 255;
    do
    {
      *v21++ = 0;
      if (!v32) {
        unsigned int v15 = v69[1];
      }
      ++v32;
      --v17;
    }
    while (v17);
LABEL_15:
    uint64_t v19 = v28;
  }
  while (v28 < 0x200);
  if (v16) {
    unsigned int v36 = v22 + 1;
  }
  else {
    unsigned int v36 = v22;
  }
  if (v36 - v7 > 128) {
    return 4294951894;
  }
  if (v7 - v36 + v5 < 1) {
    return 4294951889;
  }
  int v38 = 0;
  int v39 = v98;
  do
  {
    if (256 - v14 + v38 <= 0) {
      int v40 = -(v14 - v38);
    }
    else {
      int v40 = (v38 - v14);
    }
    v39[12] = v69[v40 - 1];
    *(_DWORD *)int v39 = v38;
    *((_DWORD *)v39 + 1) = 1;
    v39 += 16;
    ++v38;
  }
  while (v38 != 256);
  uint64_t v41 = 0;
  do
  {
    v39[12] = v70[v41++];
    *(_DWORD *)int v39 = v14;
    *((_DWORD *)v39 + 1) = v41;
    v39 += 16;
  }
  while (v41 != 256);
  if (v18)
  {
    unsigned int v42 = 0;
    uint64_t v43 = v71;
    unsigned int v44 = 1;
    while (v42 < ~(-1 << v44))
    {
      uint64_t v45 = 0;
      int v46 = 0;
      v43[1] = v42;
      do
      {
        int v47 = &v98[v45];
        if (v44 == v98[v45 + 12])
        {
          *((_DWORD *)v47 + 2) = v42;
          uint64_t v48 = &v43[2 * v46++];
          *((void *)v48 + 2) = v47;
          ++v42;
        }
        v45 += 16;
      }
      while (v45 != 4096);
      uint64_t v49 = 0;
      int v50 = &v98[v45];
      do
      {
        int v51 = &v50[v49];
        if (v44 == v50[v49 + 12])
        {
          *((_DWORD *)v51 + 2) = v42;
          int v52 = &v43[2 * v46++];
          *((void *)v52 + 2) = v51;
          ++v42;
        }
        v49 += 16;
      }
      while (v49 != 4096);
      v43[2] = v42;
      *uint64_t v43 = v46;
      ++v44;
      v42 *= 2;
      v43 += 516;
      if (v44 > v18) {
        goto LABEL_62;
      }
    }
    return 4294951894;
  }
LABEL_62:
  int v53 = 0;
  unsigned int v54 = 0;
  __int16 v55 = 0;
  __int16 v56 = 0;
  unint64_t v57 = (unint64_t)&v7[v5];
  do
  {
    if (!v18) {
      goto LABEL_84;
    }
    unsigned int v58 = 1;
    uint64_t v59 = v72;
    while (1)
    {
      unsigned int v54 = (*v36 >> (7 - v53)) & 1 | (2 * v54);
      if (v53 == 7)
      {
        ++v36;
        int v53 = 0;
      }
      else
      {
        ++v53;
      }
      if (v54 < *((_DWORD *)v59 - 2)) {
        break;
      }
      ++v58;
      v59 += 258;
      if (v58 > v18) {
        goto LABEL_84;
      }
    }
    unsigned int v60 = v54 - *((_DWORD *)v59 - 3);
    if (v60 >= *((_DWORD *)v59 - 4)) {
      return 4294951894;
    }
    int v61 = (int *)v59[v60];
    unsigned int v54 = v61[1];
    if (v54)
    {
      int v62 = 0;
      int v63 = *v61;
      do
      {
        *v3++ = v63;
        unsigned __int16 v64 = v56 + 1;
        if (v9 == (unsigned __int16)(v55 + 1)) {
          int v65 = 1;
        }
        else {
          int v65 = v62;
        }
        if (v11 == v64)
        {
          v3 += v13 - v11;
          __int16 v56 = 0;
        }
        else
        {
          ++v56;
        }
        if (v11 == v64)
        {
          ++v55;
          int v62 = v65;
        }
        --v54;
      }
      while (v54);
    }
    else
    {
LABEL_84:
      int v62 = 0;
    }
  }
  while ((unint64_t)v36 < v57 && !v62);
  if (v53) {
    uint64_t v66 = v36 + 1;
  }
  else {
    uint64_t v66 = v36;
  }
  if (v66 == (unsigned __int8 *)v57 && v62 == 1) {
    return 0;
  }
  else {
    return 4294951889;
  }
}

uint64_t _modifyInPlace(void *a1, void *a2, void *a3)
{
  uint64_t v169 = *MEMORY[0x1E4F143B8];
  CFDataRef v5 = a1;
  id v6 = a2;
  id v126 = a3;
  CMBlockBufferRef blockBufferOut = 0;
  CFTypeRef v136 = 0;
  CFDataRef v120 = v5;
  int v121 = v6;
  if (!v5 || v6 || !v126)
  {
    uint64_t ImageCountWithOptions = FigSignalErrorAt();
    goto LABEL_183;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t ImageCountWithOptions = CMPhotoByteStreamCreateFromSource(v5, 0, 1, 0, &v136, 0);
    if (!ImageCountWithOptions) {
      goto LABEL_9;
    }
LABEL_183:
    uint64_t v96 = 0;
    int v123 = 0;
    goto LABEL_139;
  }
  CFDataRef v7 = v5;
  int v8 = (void *)[(__CFData *)v7 mutableBytes];
  size_t v9 = [(__CFData *)v7 length];
  uint64_t ImageCountWithOptions = CMBlockBufferCreateWithMemoryBlock(0, v8, v9, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0], 0, 0, [(__CFData *)v7 length], 0, &blockBufferOut);
  if (ImageCountWithOptions
    || (uint64_t ImageCountWithOptions = CMPhotoByteStreamCreateFromSource(blockBufferOut, 0, 1, 0, &v136, 0),
        ImageCountWithOptions))
  {

    goto LABEL_183;
  }

LABEL_9:
  context = (void *)MEMORY[0x1AD1109A0]();
  CFDataRef v11 = (const __CFData *)v136;
  v149[0] = 0;
  *(void *)&long long cf = 0;
  uint64_t ImageCountWithOptions = CMPhotoDecompressionSessionCreate(0, 0, v149);
  if (ImageCountWithOptions
    || (LODWORD(v141) = 0,
        uint64_t ImageCountWithOptions = CMPhotoDecompressionSessionCreateContainer(v149[0], 0, v11, &v141, (uint64_t *)&cf),
        ImageCountWithOptions))
  {
LABEL_186:
    uint64_t v12 = 0;
    id v14 = 0;
    goto LABEL_20;
  }
  if (!v141)
  {
    v158 = 0;
    uint64_t ImageCountWithOptions = CMPhotoDecompressionContainerGetImageCountWithOptions(cf, 0, &v158);
    if (!ImageCountWithOptions)
    {
      if (v158 == (void *)1)
      {
        v163 = 0;
        uint64_t ImageCountWithOptions = CMPhotoDecompressionContainerCreateDictionaryDescription(cf, (uint64_t)&v163);
        if (!ImageCountWithOptions)
        {
          uint64_t v12 = v163;
          v163 = 0;
          id v145 = 0;
          unsigned int v13 = CMPhotoDecompressionContainerCopyHEIFItemPropertiesForIndexWithOptions((void *)cf, 0, 0, (uint64_t)&v145);
          if (v13)
          {
            id v14 = 0;
            if (v13 >> 1 == 2147475151) {
              uint64_t ImageCountWithOptions = 0;
            }
            else {
              uint64_t ImageCountWithOptions = v13;
            }
          }
          else
          {
            id v14 = v145;
            uint64_t ImageCountWithOptions = 0;
          }
          goto LABEL_20;
        }
      }
      else
      {
        uint64_t ImageCountWithOptions = FigSignalErrorAt();
      }
    }
    goto LABEL_186;
  }
  uint64_t v12 = 0;
  id v14 = 0;
  uint64_t ImageCountWithOptions = 4294950300;
LABEL_20:
  if ((void)cf) {
    CFRelease((CFTypeRef)cf);
  }
  if (v149[0]) {
    CFRelease(v149[0]);
  }
  int v123 = v12;
  id v124 = v14;
  if (ImageCountWithOptions) {
    goto LABEL_138;
  }
  if ((objc_opt_respondsToSelector() & 1) == 0) {
    goto LABEL_93;
  }
  CFTypeRef v129 = v136;
  unsigned int v15 = v123;
  id v128 = v126;
  unsigned int v113 = v15;
  int v16 = [(__CFString *)v15 objectForKeyedSubscript:@"MainImages"];
  int v122 = [v16 objectAtIndexedSubscript:0];

  v163 = @"ExifPayloads";
  v164 = @"XMPPayloads";
  v158 = &unk_1F02E50C0;
  uint64_t v159 = (uint64_t)&unk_1F02E50D8;
  uint64_t v165 = @"DebugPayloads";
  v166 = @"CustomMetadataPayloads";
  v160 = (uint64_t (*)(uint64_t, long long *))&unk_1F02E50F0;
  v161 = &unk_1F02E5108;
  int v17 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v158 forKeys:&v163 count:4];
  char v127 = objc_opt_respondsToSelector();
  long long v152 = 0u;
  long long v153 = 0u;
  long long cf = 0u;
  long long v151 = 0u;
  obint j = v17;
  uint64_t v117 = [obj countByEnumeratingWithState:&cf objects:v149 count:16];
  if (!v117)
  {
    uint64_t ImageCountWithOptions = 0;
    goto LABEL_92;
  }
  uint64_t v116 = *(void *)v151;
  do
  {
    uint64_t v18 = 0;
    do
    {
      if (*(void *)v151 != v116)
      {
        uint64_t v19 = v18;
        objc_enumerationMutation(obj);
        uint64_t v18 = v19;
      }
      uint64_t v118 = v18;
      uint64_t v20 = *(void *)(*((void *)&cf + 1) + 8 * v18);
      int v21 = [obj objectForKeyedSubscript:v20];
      int v22 = [v21 intValue];

      uint64_t v132 = [v122 objectForKeyedSubscript:v20];
      if ([v132 count])
      {
        uint64_t v23 = 0;
        uint64_t v131 = v22;
        while (2)
        {
          if (v131 == 3)
          {
            BOOL v24 = [MEMORY[0x1E4F1CA60] dictionary];
            int v25 = [v132 objectAtIndexedSubscript:v23];
            unsigned int v26 = [v25 objectForKeyedSubscript:@"URI"];

            if (v26) {
              [v24 setObject:v26 forKeyedSubscript:@"URI"];
            }
            unsigned int v27 = [v132 objectAtIndexedSubscript:v23];
            uint64_t v28 = [v27 objectForKeyedSubscript:@"Name"];

            if (v28) {
              [v24 setObject:v28 forKeyedSubscript:@"Name"];
            }
          }
          else
          {
            BOOL v24 = 0;
          }
          if ((v127 & 1) != 0
            && ![v128 shouldModifyMetadataForImageIndex:0 payloadIndex:v23 withType:v131 customMetadataIdentifier:v24])
          {
            goto LABEL_60;
          }
          id v29 = [v132 objectAtIndexedSubscript:v23];
          id v130 = v24;
          id v30 = v128;
          int v31 = [v29 objectForKeyedSubscript:@"DataIsContiguous"];
          char v32 = [v31 BOOLValue];

          if ((v32 & 1) == 0) {
            goto LABEL_78;
          }
          char v33 = [v29 objectForKeyedSubscript:@"DataOffset"];
          uint64_t v34 = [v33 longValue];

          int v35 = [v29 objectForKeyedSubscript:@"DataLength"];
          unsigned int v36 = (char *)[v35 longValue];

          if (!v34 || !v36)
          {
LABEL_78:
            uint64_t ImageCountWithOptions = FigSignalErrorAt();
            id v44 = 0;
            id v38 = 0;
            goto LABEL_59;
          }
          BOOL v37 = [MEMORY[0x1E4F1CA58] dataWithCapacity:v36];
          [v37 setLength:v36];
          id v145 = 0;
          id v38 = v37;
          uint64_t v39 = [v38 mutableBytes];
          uint64_t v40 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v40) {
            uint64_t v41 = v40;
          }
          else {
            uint64_t v41 = 0;
          }
          unsigned int v42 = *(uint64_t (**)(CFTypeRef, char *, uint64_t, uint64_t, id *))(v41 + 8);
          if (v42)
          {
            uint64_t ImageCountWithOptions = v42(v129, v36, v34, v39, &v145);
            if (ImageCountWithOptions)
            {
              id v44 = 0;
              goto LABEL_59;
            }
            if (v145 != v36)
            {
              id v44 = 0;
              goto LABEL_80;
            }
            id v141 = 0;
            uint64_t ImageCountWithOptions = [v30 metadataPayload:v38 forImageIndex:0 payloadIndex:v23 withType:v131 customMetadataIdentifier:v130 modifiedData:&v141];
            id v43 = v141;
            id v44 = v43;
            if (ImageCountWithOptions) {
              goto LABEL_59;
            }
            if (!v43)
            {
              FigSignalErrorAt();
              id v44 = 0;
              goto LABEL_82;
            }
            if ([v43 isEqualToData:v38]) {
              goto LABEL_82;
            }
            if ([v44 length] > (unint64_t)v36)
            {
              uint64_t ImageCountWithOptions = FigSignalErrorAt();
              goto LABEL_59;
            }
            uint64_t v45 = [v44 length];
            id v44 = v44;
            uint64_t v46 = [v44 bytes];
            uint64_t v47 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v47) {
              uint64_t v48 = v47;
            }
            else {
              uint64_t v48 = 0;
            }
            uint64_t v49 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, uint64_t, id *))(v48 + 16);
            if (v49)
            {
              uint64_t ImageCountWithOptions = v49(v129, v45, v34, v46, &v145);
              if (ImageCountWithOptions) {
                goto LABEL_59;
              }
              id v50 = v145;
              if (v50 == (id)[v44 length])
              {
                if ([v44 length] < (unint64_t)v36)
                {
                  uint64_t v51 = [v44 length];
                  int v52 = [MEMORY[0x1E4F1CA58] dataWithLength:&v36[-v51]];
                  int v53 = v52;
                  if (v52)
                  {
                    uint64_t v115 = [v52 length];
                    uint64_t v114 = [v44 length];
                    id v54 = v53;
                    uint64_t v55 = [v54 bytes];
                    uint64_t v56 = *(void *)(CMBaseObjectGetVTable() + 16);
                    if (v56) {
                      uint64_t v57 = v56;
                    }
                    else {
                      uint64_t v57 = 0;
                    }
                    unsigned int v58 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, uint64_t, id *))(v57 + 16);
                    if (v58)
                    {
                      uint64_t ImageCountWithOptions = v58(v129, v115, v114 + v34, v55, &v145);
                      if (!ImageCountWithOptions)
                      {
                        id v59 = v145;
                        if (v59 == (id)[v54 length]) {
                          uint64_t ImageCountWithOptions = 0;
                        }
                        else {
                          uint64_t ImageCountWithOptions = 4294950194;
                        }
                      }
                    }
                    else
                    {
                      uint64_t ImageCountWithOptions = 4294954514;
                    }
                  }
                  else
                  {
                    uint64_t ImageCountWithOptions = 4294950305;
                  }

                  goto LABEL_59;
                }
LABEL_82:
                uint64_t ImageCountWithOptions = 0;
LABEL_59:

                if (ImageCountWithOptions)
                {

                  goto LABEL_92;
                }
LABEL_60:

                if (++v23 >= (unint64_t)[v132 count]) {
                  goto LABEL_86;
                }
                continue;
              }
LABEL_80:
              uint64_t ImageCountWithOptions = 4294950194;
              goto LABEL_59;
            }
          }
          else
          {
            id v44 = 0;
          }
          break;
        }
        uint64_t ImageCountWithOptions = 4294954514;
        goto LABEL_59;
      }
LABEL_86:

      uint64_t v18 = v118 + 1;
    }
    while (v118 + 1 != v117);
    uint64_t v117 = [obj countByEnumeratingWithState:&cf objects:v149 count:16];
    uint64_t ImageCountWithOptions = 0;
  }
  while (v117);
LABEL_92:

  if (!ImageCountWithOptions)
  {
LABEL_93:
    char v60 = objc_opt_respondsToSelector();
    if ((objc_opt_respondsToSelector() & (v124 != 0)) != 1
      || ([v124 objectForKeyedSubscript:@"CameraExtrinsics"],
          int v61 = objc_claimAutoreleasedReturnValue(),
          BOOL v62 = v61 == 0,
          v61,
          v62)
      || (v60 & 1) != 0
      && ![v126 shouldModifyMetadataForImageIndex:0 payloadIndex:0 withType:4 customMetadataIdentifier:0])
    {
      uint64_t ImageCountWithOptions = 0;
    }
    else
    {
      int v63 = [v124 objectForKeyedSubscript:@"CameraExtrinsics"];
      id v134 = 0;
      uint64_t ImageCountWithOptions = [v126 extrinsics:v63 forIndex:0 modifiedExtrinsics:&v134];
      id v64 = v134;
      if (!ImageCountWithOptions)
      {
        int v133 = v64;
        if ([v63 isEqual:v64]) {
          goto LABEL_99;
        }
        CFTypeRef v65 = v136;
        id v66 = v133;
        long long v151 = 0u;
        long long v152 = 0u;
        long long cf = 0u;
        long long v167 = xmmword_1AB9DF8A8;
        uint64_t v168 = 1768973167;
        v163 = 0;
        v164 = (__CFString *)&v163;
        uint64_t v165 = 0x2020000000;
        LODWORD(v166) = 0;
        id v145 = 0;
        v146 = &v145;
        uint64_t v147 = 0x2020000000;
        uint64_t v148 = 0;
        id v141 = 0;
        v142 = &v141;
        uint64_t v143 = 0x2020000000;
        uint64_t v144 = 0;
        while (1)
        {
          int length = v164->length;
          if (length > 2) {
            break;
          }
          uint64_t v68 = (uint64_t)v146[3];
          unint64_t v69 = (unint64_t)v142[3];
          v149[0] = (CFTypeRef)MEMORY[0x1E4F143A8];
          v149[1] = (CFTypeRef)3221225472;
          v149[2] = ___findExtrinsicsBox_block_invoke;
          v149[3] = &unk_1E5E2E7C8;
          v149[4] = &v163;
          v149[5] = &v145;
          v149[6] = &v141;
          v149[7] = &v167;
          uint64_t ImageCountWithOptions = _enumerateBoxes((uint64_t)v65, v68, v69, v149);
          if (ImageCountWithOptions) {
            goto LABEL_107;
          }
        }
        if (length == 3)
        {
          uint64_t v70 = (uint64_t)v146[3];
          unint64_t v71 = (unint64_t)v142[3];
          v158 = (void *)MEMORY[0x1E4F143A8];
          uint64_t v159 = 3221225472;
          v160 = ___findExtrinsicsBox_block_invoke_2;
          v161 = &__block_descriptor_40_e21_B16__0____IqQ_16C_Q_8l;
          p_long long cf = &cf;
          uint64_t ImageCountWithOptions = _enumerateBoxes((uint64_t)v65, v70, v71, &v158);
        }
        else
        {
          uint64_t ImageCountWithOptions = 4294950194;
        }
LABEL_107:
        _Block_object_dispose(&v141, 8);
        _Block_object_dispose(&v145, 8);
        _Block_object_dispose(&v163, 8);
        if (ImageCountWithOptions) {
          goto LABEL_135;
        }
        uint64_t v72 = [v66 objectForKeyedSubscript:@"CoordinateSystemID"];
        unsigned int v73 = [v72 unsignedIntValue];

        uint64_t v74 = 0;
        unsigned int v140 = bswap32(v73);
        uint64_t v156 = 0;
        int v157 = 0;
        do
        {
          uint64_t v75 = [v66 objectForKeyedSubscript:@"Position"];
          uint64_t v76 = [v75 objectAtIndexedSubscript:v74];
          [v76 doubleValue];
          double v78 = v77;

          *((_DWORD *)&v156 + v74++) = bswap32(llround(v78 * 1000000.0));
        }
        while (v74 != 3);
        CFMutableArrayRef v139 = 0;
        uint64_t v154 = 0;
        int v155 = 0;
        int v79 = [v66 objectForKeyedSubscript:@"Rotation"];
        uint64_t ImageCountWithOptions = CMPhotoCreateQuaternionArrayFromRotationMatrix(0, v79, 1, &v139);

        if (ImageCountWithOptions) {
          goto LABEL_135;
        }
        uint64_t v80 = 0;
        LOBYTE(v81) = 1;
        CFMutableArrayRef v82 = v139;
        do
        {
          uint64_t v83 = [(__CFArray *)v82 objectAtIndexedSubscript:v80];
          unsigned int v84 = [v83 intValue];

          *((_DWORD *)&v154 + v80) = bswap32(v84);
          int v81 = v81 & (v84 == 0);
          ++v80;
        }
        while (v80 != 3);

        unsigned int v138 = 0;
        uint64_t v137 = 0;
        uint64_t v85 = *((void *)&cf + 1);
        uint64_t v86 = *((void *)&v152 + 1);
        uint64_t v87 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v87) {
          uint64_t v88 = v87;
        }
        else {
          uint64_t v88 = 0;
        }
        int v89 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, unsigned int *, uint64_t *))(v88 + 8);
        if (!v89)
        {
          uint64_t ImageCountWithOptions = 4294950194;
          goto LABEL_135;
        }
        int v90 = v89(v65, 4, v86 + v85, &v138, &v137);
        uint64_t ImageCountWithOptions = 4294950194;
        if (v90 || v137 != 4)
        {
LABEL_135:
        }
        else
        {
          unsigned int v91 = bswap32(v138);
          unsigned int v138 = v91;
          if (HIBYTE(v91)
            || (v91 & 1) == 0 && v156
            || (char v92 = v91, (v91 & 2) == 0) && HIDWORD(v156)
            || (v91 & 4) == 0 && v157
            || (v91 & 0x10) == 0 && (v91 & 8) != 0
            || (((v91 & 8) == 0) & ~v81) != 0)
          {
            uint64_t ImageCountWithOptions = FigSignalErrorAt();
          }
          else
          {
            if (v73 && (v91 & 0x20) == 0) {
              goto LABEL_135;
            }
            uint64_t v93 = *((void *)&cf + 1) + *((void *)&v152 + 1) + 4;
            if ((v91 & 1) == 0) {
              goto LABEL_149;
            }
            uint64_t v94 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v95 = v94 ? v94 : 0;
            int v100 = *(unsigned int (**)(CFTypeRef, uint64_t, uint64_t, uint64_t *, uint64_t *))(v95 + 16);
            if (!v100 || v100(v65, 4, v93, &v156, &v137) || v137 != 4) {
              goto LABEL_135;
            }
            v93 += 4;
LABEL_149:
            if ((v92 & 2) != 0)
            {
              uint64_t v101 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v101) {
                uint64_t v102 = v101;
              }
              else {
                uint64_t v102 = 0;
              }
              int v103 = *(unsigned int (**)(CFTypeRef, uint64_t, uint64_t, char *, uint64_t *))(v102 + 16);
              if (v103 && !v103(v65, 4, v93, (char *)&v156 + 4, &v137) && v137 == 4)
              {
                v93 += 4;
                goto LABEL_157;
              }
              goto LABEL_135;
            }
LABEL_157:
            if ((v92 & 4) != 0)
            {
              uint64_t v104 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v104) {
                uint64_t v105 = v104;
              }
              else {
                uint64_t v105 = 0;
              }
              uint64_t v106 = *(unsigned int (**)(CFTypeRef, uint64_t, uint64_t, int *, uint64_t *))(v105 + 16);
              if (!v106 || v106(v65, 4, v93, &v157, &v137) || v137 != 4) {
                goto LABEL_135;
              }
              v93 += 4;
            }
            if ((v92 & 8) != 0)
            {
              uint64_t v107 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v107) {
                uint64_t v108 = v107;
              }
              else {
                uint64_t v108 = 0;
              }
              uint32x4_t v109 = *(unsigned int (**)(CFTypeRef, uint64_t, uint64_t, uint64_t *, uint64_t *))(v108 + 16);
              if (!v109 || v109(v65, 12, v93, &v154, &v137) || v137 != 12) {
                goto LABEL_135;
              }
              v93 += 12;
            }
            if ((v92 & 0x20) != 0)
            {
              uint64_t v110 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v111 = v110 ? v110 : 0;
              int v112 = *(unsigned int (**)(CFTypeRef, uint64_t, uint64_t, unsigned int *, uint64_t *))(v111 + 16);
              if (!v112 || v112(v65, 4, v93, &v140, &v137) || v137 != 4) {
                goto LABEL_135;
              }
            }

LABEL_99:
            uint64_t ImageCountWithOptions = 0;
          }
        }
        id v64 = v133;
      }
    }
  }
LABEL_138:
  uint64_t v96 = v124;
LABEL_139:
  if (v136)
  {
    int v97 = v96;
    CFRelease(v136);
    uint64_t v96 = v97;
  }
  if (blockBufferOut)
  {
    uint64_t v98 = v96;
    CFRelease(blockBufferOut);
    uint64_t v96 = v98;
  }

  return ImageCountWithOptions;
}

void sub_1AB953BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  _Block_object_dispose(&a43, 8);
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose((const void *)(v47 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t _enumerateBoxes(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  CFDataRef v7 = a4;
  if (a3) {
    unint64_t v8 = a3;
  }
  else {
    unint64_t v8 = 0x7FFFFFFFLL;
  }
  if (v8 >= 8)
  {
    while (1)
    {
      v29[0] = 0;
      long long v30 = 0u;
      uint64_t v28 = 0;
      uint64_t v31 = 0;
      unint64_t v32 = 8;
      v29[1] = a2;
      LODWORD(v27) = 0;
      uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v9) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = 0;
      }
      CFDataRef v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, unint64_t *, uint64_t *))(v10 + 8);
      if (!v11
        || v11(a1, 4, a2, &v27, &v28)
        || v28 != 4
        || ((*(void *)&long long v30 = bswap32(v27), (v12 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0)
          ? (uint64_t v13 = 0)
          : (uint64_t v13 = v12),
            (id v14 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, void *, uint64_t *))(v13 + 8)) == 0
         || v14(a1, 4, a2 + 4, v29, &v28)
         || v28 != 4))
      {
LABEL_42:
        uint64_t v22 = 4294950194;
        goto LABEL_43;
      }
      uint64_t v15 = a2 + 8;
      unsigned int v16 = bswap32(v29[0]);
      LODWORD(v29[0]) = v16;
      unint64_t v17 = v8 - 8;
      unint64_t v18 = v30;
      if ((void)v30 == 1)
      {
        if (v17 < 8) {
          goto LABEL_42;
        }
        unint64_t v27 = 0;
        uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v20 = v19 ? v19 : 0;
        int v21 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, unint64_t *, uint64_t *))(v20 + 8);
        if (!v21) {
          goto LABEL_42;
        }
        uint64_t v22 = 4294950194;
        if (v21(a1, 8, a2 + 8, &v27, &v28) || v28 != 8) {
          goto LABEL_43;
        }
        unint64_t v18 = bswap64(v27);
        if (v18 >= 0xFFFFFFFF)
        {
          uint64_t v22 = 4294950300;
          goto LABEL_43;
        }
        uint64_t v15 = a2 + 16;
        *(void *)&long long v30 = v18;
        v32 += 8;
        unint64_t v17 = v8 - 16;
        unsigned int v16 = v29[0];
      }
      if (v16 != 1835295092)
      {
        if (v18 <= v32) {
          goto LABEL_42;
        }
        if (v16 == 1970628964)
        {
          uint64_t v22 = 4294950194;
          if (v17 < 0x10 || v18 <= v32 + 16) {
            goto LABEL_43;
          }
          uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v24 = v23 ? v23 : 0;
          int v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, char *, uint64_t *))(v24 + 8);
          if (!v25 || v25(a1, 16, v15, (char *)&v30 + 8, &v28) || v28 != 16) {
            goto LABEL_43;
          }
          v32 += 16;
        }
      }
      if (!v7[2](v7, v29))
      {
        v8 -= v30;
        a2 += v30;
        if (v8 > 7) {
          continue;
        }
      }
      break;
    }
  }
  uint64_t v22 = 0;
LABEL_43:

  return v22;
}

BOOL ___findExtrinsicsBox_block_invoke(void *a1, int *a2)
{
  int v2 = *a2;
  uint64_t v3 = a1[7];
  uint64_t v4 = *(int *)(*(void *)(a1[4] + 8) + 24);
  int v5 = *(_DWORD *)(v3 + 8 * v4);
  if (*a2 == v5)
  {
    uint64_t v6 = *((void *)a2 + 5) + *(int *)(v3 + 8 * v4 + 4);
    *(void *)(*(void *)(a1[5] + 8) + 24) = v6 + *((void *)a2 + 1);
    *(void *)(*(void *)(a1[6] + 8) + 24) = *((void *)a2 + 2) - v6;
    ++*(_DWORD *)(*(void *)(a1[4] + 8) + 24);
  }
  return v2 == v5;
}

uint64_t ___findExtrinsicsBox_block_invoke_2(uint64_t a1, long long *a2)
{
  if (*(_DWORD *)a2 != 1668113784)
  {
    if (*(_DWORD *)a2 != 1970628964) {
      return 0;
    }
    if (*((void *)a2 + 3) != 0xAB4A7D5B14E96343 || *((void *)a2 + 4) != 0x34B40398A6BEAE97) {
      return 0;
    }
  }
  uint64_t v4 = *(_OWORD **)(a1 + 32);
  long long v5 = *a2;
  long long v6 = a2[2];
  v4[1] = a2[1];
  v4[2] = v6;
  _OWORD *v4 = v5;
  return 1;
}

IOSurfaceRef CMPhotoJPEGCreateJPEGOutputIOSurface(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  if ((sCMPhotoJPEGDecoderTraceInitialized & 1) == 0) {
    sCMPhotoJPEGDecoderTraceInitialized = 1;
  }
  IOSurfaceRef v5 = 0;
  char v6 = 0;
  if (!CMPhotoSurfacePoolCreateImageSurface(@"SurfacePoolOneShot", 875704422, a1, a2, 1, a3, a4, 1, 0, 0, 1u, &v5, &v6))IOSurfaceDecrementUseCount(v5); {
  return v5;
  }
}

uint64_t CMPhotoJPEGCreateIOSurfaceFromJPEG(const __CFData *a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  keys[2] = *(void **)MEMORY[0x1E4F143B8];
  CVPixelBufferRef pixelBuffer = 0;
  unint64_t v37 = 0;
  unint64_t v38 = 0;
  int v35 = 1;
  int v36 = 0;
  int v34 = 1;
  if ((sCMPhotoJPEGDecoderTraceInitialized & 1) == 0) {
    sCMPhotoJPEGDecoderTraceInitialized = 1;
  }
  if (!jpegService()) {
    return 4294954514;
  }
  int FourCCValue = 875704422;
  if (a2)
  {
    int IntValue = getIntValue(a2, @"JPEGCacheInputSurface", 0);
    int v8 = getIntValue(a2, @"JPEGHighSpeedDecode", 0);
    int FourCCValue = getFourCCValue(a2, @"JPEGOutputPixelFormat", 875704422);
    BOOL v9 = CFDictionaryContainsKey(a2, @"JPEGOutputBytesPerRowAlignment") != 0;
    int v10 = getIntValue(a2, @"JPEGOutputBytesPerRowAlignment", 1);
    int v34 = v10;
  }
  else
  {
    int IntValue = 0;
    BOOL v9 = 0;
    int v10 = 1;
    int v8 = 1;
  }
  if (*a3 && (CFTypeID v12 = CFGetTypeID(*a3), v12 == IOSurfaceGetTypeID())) {
    uint64_t v13 = (__IOSurface *)*a3;
  }
  else {
    uint64_t v13 = 0;
  }
  unint64_t v41 = 0;
  unint64_t v42 = 0;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v11 = _createPixelBufferFromJPEG(a1, a2, IntValue != 0, v8 != 0, &v35, &v41, v13, (CFTypeRef *)&pixelBuffer);
  if (!v11)
  {
    id v14 = pixelBuffer;
    OSType PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
    calculateOutputDimensions(v41, v42, a2, v35, &v39, &v37, &v36);
    if (v9)
    {
      IOSurface = CVPixelBufferGetIOSurface(v14);
      PlaneCFIndex Count = IOSurfaceGetPlaneCount(IOSurface);
      if (PlaneCount == 1)
      {
        size_t BytesPerRow = IOSurfaceGetBytesPerRow(IOSurface);
        if (!v10 || BytesPerRow % v10)
        {
LABEL_25:
          int v23 = 1;
LABEL_26:
          if (v39 == v37 && v40 == v38)
          {
            if (FourCCValue != PixelFormatType || v36 != 0) {
              int v23 = 1;
            }
            if (v23 != 1) {
              goto LABEL_47;
            }
          }
          uint64_t v33 = 0;
          keys[0] = 0;
          keys[1] = 0;
          values[0] = 0;
          values[1] = 0;
          int valuePtr = 0;
          if (!v9)
          {
            FigGetAlignmentForIOSurfaceOutput();
            int v10 = 1;
            int v34 = 1;
          }
          if (v10 <= 1)
          {
            CFDictionaryRef v28 = 0;
          }
          else
          {
            CFAllocatorRef v26 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
            CFNumberRef v27 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &v34);
            keys[0] = *(void **)MEMORY[0x1E4F24C98];
            values[0] = v27;
            CFDictionaryRef v28 = CFDictionaryCreate(v26, (const void **)keys, (const void **)values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            if (v27) {
              CFRelease(v27);
            }
          }
          uint64_t v11 = scaleAndConvertPixelBuffer(v14, v37, v38, FourCCValue, v36, v28, &v33);
          CFRelease(v14);
          if (v28) {
            CFRelease(v28);
          }
          if (!v11)
          {
            id v14 = v33;
LABEL_47:
            IOSurfaceRef v29 = CVPixelBufferGetIOSurface(v14);
            *a3 = CFRetain(v29);
            CFRelease(v14);
            return 0;
          }
          return v11;
        }
      }
      else
      {
        size_t v19 = PlaneCount;
        if (PlaneCount)
        {
          OSType v31 = PixelFormatType;
          BOOL v20 = 0;
          size_t v21 = 0;
          do
          {
            size_t BytesPerRowOfPlane = IOSurfaceGetBytesPerRowOfPlane(IOSurface, v21);
            if (!v10)
            {
              int v23 = 1;
              OSType PixelFormatType = v31;
              goto LABEL_26;
            }
            if (BytesPerRowOfPlane % v10) {
              break;
            }
            BOOL v20 = ++v21 >= v19;
          }
          while (v19 != v21);
          OSType PixelFormatType = v31;
          if (!v20) {
            goto LABEL_25;
          }
        }
      }
    }
    int v23 = 0;
    goto LABEL_26;
  }
  return v11;
}

uint64_t getIntValue(const __CFDictionary *a1, const void *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  unsigned int valuePtr = a3;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (Value)
  {
    CFNumberRef v5 = Value;
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v5))
    {
      CFNumberGetValue(v5, kCFNumberIntType, &valuePtr);
      return valuePtr;
    }
    else
    {
      CFTypeID v7 = CFBooleanGetTypeID();
      if (v7 == CFGetTypeID(v5)) {
        return CFBooleanGetValue(v5);
      }
    }
  }
  return v3;
}

uint64_t getFourCCValue(const __CFDictionary *a1, const void *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  unsigned int valuePtr = a3;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (Value)
  {
    CFNumberRef v5 = Value;
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v5))
    {
      CFNumberGetValue(v5, kCFNumberSInt32Type, &valuePtr);
      return valuePtr;
    }
  }
  return v3;
}

uint64_t _createPixelBufferFromJPEG(const __CFData *a1, const __CFDictionary *a2, int a3, int a4, int *a5, void *a6, __IOSurface *a7, CFTypeRef *a8)
{
  unint64_t v115 = 0;
  CVPixelBufferRef v116 = 0;
  unint64_t v114 = 0;
  int v14 = JPEGDeviceInterface_supportsMissingEOI();
  uint64_t v102 = @"SurfacePoolOneShot";
  uint64_t v113 = 0;
  memset(v112, 0, sizeof(v112));
  long long v110 = 0u;
  long long v111 = 0u;
  int v97 = a8;
  if (!a2)
  {
    int v99 = 0;
    int v107 = 0;
    uint64_t v98 = 0;
    BOOL v20 = 0;
    int v22 = 17;
    BOOL v23 = 1;
    if (a1) {
      goto LABEL_28;
    }
    goto LABEL_12;
  }
  CFDataRef theData = a7;
  CFDataRef v15 = a1;
  CFNumberRef Value = CFDictionaryGetValue(a2, @"JPEGCacheInputSurface");
  if (!Value || (unint64_t v17 = Value, TypeID = IOSurfaceGetTypeID(), TypeID != CFGetTypeID(v17)))
  {
    int v107 = 0;
    uint64_t v98 = 0;
    goto LABEL_9;
  }
  size_t v19 = (__IOSurface *)CFRetain(v17);
  BOOL v20 = v19;
  if (a1)
  {
    size_t Length = CFDataGetLength(a1);
    if (Length > IOSurfaceGetAllocSize(v20))
    {
      if (!v20)
      {
        int v107 = 0;
        uint64_t v98 = 0;
        goto LABEL_10;
      }
      uint64_t v98 = v20;
      CFRelease(v20);
      int v107 = 0;
LABEL_9:
      BOOL v20 = 0;
LABEL_10:
      int v22 = 17;
      goto LABEL_17;
    }
    int v107 = 0;
    int v22 = 21;
LABEL_16:
    uint64_t v98 = v20;
LABEL_17:
    int v99 = 2 * (getIntValue(a2, @"JPEGSingleShotDecode", 0) != 0);
    BOOL v23 = getIntValue(a2, @"JPEGColorSpaceAware", 1) != 0;
    long long v30 = (__CFString *)CFDictionaryGetValue(a2, @"JPEGSurfacePool");
    if (v30)
    {
      OSType v31 = v30;
      CFTypeID v32 = CFGetTypeID(v30);
      uint64_t v33 = CMPhotoSurfacePoolGetTypeID();
      int v34 = @"SurfacePoolOneShot";
      if (v31 == @"SurfacePoolOneShot" || v32 == v33) {
        int v34 = v31;
      }
      uint64_t v102 = v34;
    }
    int v36 = CFDictionaryGetValue(a2, @"JPEGProvidedPixelBuffer");
    if (v36)
    {
      unint64_t v37 = v36;
      CFTypeID v38 = CVPixelBufferGetTypeID();
      if (v38 == CFGetTypeID(v37)) {
        CVPixelBufferRef v116 = (CVPixelBufferRef)CFRetain(v37);
      }
    }
    a1 = v15;
    a7 = theData;
    if (a1)
    {
LABEL_28:
      uint64_t v39 = JPEGParseJPEGInfo(a1, (uint64_t)&v110, 1, v23);
      if (v39)
      {
        uint64_t v25 = v39;
        int v24 = 0;
      }
      else
      {
        if (!BYTE12(v112[1]))
        {
          CFDataRef theDataa = a1;
          *a5 = DWORD1(v111);
          int v40 = a4 | 4;
          if (!v14) {
            int v40 = a4;
          }
          BOOL v41 = (BYTE13(v112[1]) | v14) == 0;
          if (BYTE13(v112[1])) {
            int v42 = a4;
          }
          else {
            int v42 = v40;
          }
          int v101 = v42;
          BOOL v43 = v22 == 3;
          int v44 = v107;
          if (v22 == 3) {
            int v44 = 0;
          }
          int v107 = v44;
          if (v22 == 3) {
            int v22 = 20;
          }
          if (v43) {
            uint64_t v45 = 0;
          }
          else {
            uint64_t v45 = v20;
          }
          if (v43 && BYTE13(v112[1]) | v14)
          {
            IOSurfaceUnlock(v20, 1u, 0);
            int v107 = 0;
            int v22 = 3;
            uint64_t v45 = v20;
          }
          int v24 = 0;
          uint64_t v25 = 4294954516;
          if (DWORD2(v110) && HIDWORD(v110))
          {
            uint64_t v46 = v110;
            uint64_t v47 = DWORD1(v110);
            unint64_t v114 = v110;
            unint64_t v115 = DWORD1(v110);
            *a6 = v110;
            a6[1] = v47;
            int v103 = v22;
            if (!a2)
            {
              BOOL v49 = 0;
              int IntValue = 1;
              unint64_t v54 = v47;
              unint64_t v55 = v46;
              uint64_t v52 = 875704422;
              int v56 = 1;
              goto LABEL_85;
            }
            LODWORD(v117) = 0;
            IOSurfaceRef buffer = 0;
            uint64_t v109 = 0;
            uint64_t FourCCValue = getFourCCValue(a2, @"JPEGOutputPixelFormat", 875704422);
            BOOL v49 = CFDictionaryContainsKey(a2, @"JPEGOutputBytesPerRowAlignment") != 0;
            int IntValue = getIntValue(a2, @"JPEGOutputBytesPerRowAlignment", 1);
            calculateOutputDimensions(v110, DWORD1(v110), a2, *a5, &v114, &buffer, &v117);
            if (a7 || FourCCValue == 875704422) {
              goto LABEL_73;
            }
            int v51 = v111;
            if ((IOSurfaceRef)v114 != buffer || v115 != v109 || v117)
            {
              if ((v111 - 1) > 1
                || FourCCValue != 1380401729 && FourCCValue != 1111970369
                || !JPEGDeviceInterface_supportsAppleInterchangeFormats())
              {
                goto LABEL_73;
              }
              if (v51 == 2) {
                unsigned int v57 = 875836518;
              }
              else {
                unsigned int v57 = 875704422;
              }
              if (v51 == 1) {
                uint64_t v52 = 875704934;
              }
              else {
                uint64_t v52 = v57;
              }
              goto LABEL_74;
            }
            uint64_t v52 = FourCCValue;
            if ((int)FourCCValue <= 1111970368)
            {
              if (FourCCValue != 875704934)
              {
                int v53 = 875836518;
LABEL_71:
                if (FourCCValue != v53)
                {
LABEL_73:
                  uint64_t v52 = 875704422;
                  goto LABEL_74;
                }
              }
            }
            else if (FourCCValue != 1111970369)
            {
              if (FourCCValue == 2037741158) {
                goto LABEL_74;
              }
              int v53 = 1380401729;
              goto LABEL_71;
            }
            if (!JPEGDeviceInterface_supportsAppleInterchangeFormats()) {
              goto LABEL_73;
            }
LABEL_74:
            unint64_t v55 = v114;
            unint64_t v54 = v115;
            if ((IOSurfaceRef)v114 == buffer && v115 == v109)
            {
              if (v117) {
                BOOL v58 = 0;
              }
              else {
                BOOL v58 = FourCCValue == v52;
              }
              if (!v58 && IntValue <= 1) {
                goto LABEL_81;
              }
            }
            else if (IntValue < 2)
            {
LABEL_81:
              int v56 = 0;
LABEL_84:
              uint64_t v46 = v110;
              uint64_t v47 = DWORD1(v110);
LABEL_85:
              if (!JPEGDeviceInterface_supportsDecodeSize(v46, v47, v111, v55, v54))
              {
                int v24 = 0;
                uint64_t v25 = 4294954514;
                goto LABEL_194;
              }
              if (a7)
              {
                size_t Width = IOSurfaceGetWidth(a7);
                size_t Height = IOSurfaceGetHeight(a7);
                if (Width != v114 || Height != v115)
                {
                  uint64_t v25 = FigSignalErrorAt();
                  int v24 = 0;
                  goto LABEL_194;
                }
              }
              if (v45)
              {
                int v24 = 0;
                goto LABEL_118;
              }
              unsigned __int8 BytePtr = CFDataGetBytePtr(theDataa);
              int v62 = a3;
              if ((BytePtr & 0x1F) != 0) {
                int v62 = 1;
              }
              if (((v41 | v62) & 1) == 0)
              {
                CFDataGetLength(theDataa);
                uint64_t v63 = IOSurfaceWrapClientImage();
                if (v63)
                {
                  uint64_t v45 = (__IOSurface *)v63;
                  int v24 = 0;
                  int v103 = 2;
                  goto LABEL_118;
                }
              }
              CFIndex v64 = CFDataGetLength(theDataa);
              uint64_t v65 = 8;
              if (!v41) {
                uint64_t v65 = 0;
              }
              unint64_t v66 = v64 + v65;
              IOSurfaceRef buffer = 0;
              pthread_mutex_lock(&_surfaceLock);
              if (_createJPEGInputSurface_cachedSurface_0)
              {
                UseCFIndex Count = IOSurfaceGetUseCount((IOSurfaceRef)_createJPEGInputSurface_cachedSurface_0);
                int v68 = a3;
                char v69 = a3 ^ 1;
                if (((a3 ^ 1) & 1) == 0
                  && UseCount <= 1
                  && _createJPEGInputSurface_cachedSurface_1 >= v66)
                {
                  IOSurfaceRef buffer = (IOSurfaceRef)CFRetain((CFTypeRef)_createJPEGInputSurface_cachedSurface_0);
                  IOSurfaceIncrementUseCount(buffer);
LABEL_116:
                  pthread_mutex_unlock(&_surfaceLock);
                  uint64_t v45 = buffer;
                  if (buffer)
                  {
                    int v24 = 1;
LABEL_118:
                    unint64_t v72 = HIDWORD(v110);
                    if (v56)
                    {
                      LODWORD(buffer) = 0;
                      LODWORD(v117) = 1;
                      FigGetAlignmentForIOSurfaceOutput();
                      if (IntValue <= 1) {
                        unsigned int v73 = 1;
                      }
                      else {
                        unsigned int v73 = IntValue;
                      }
                      unsigned int v74 = v117;
                      if ((int)v117 <= 0)
                      {
                        LODWORD(v117) = 1;
                        unsigned int v74 = 1;
                      }
                      if (v49) {
                        uint64_t v75 = v73;
                      }
                      else {
                        uint64_t v75 = v74;
                      }
                      unsigned int v76 = CMPhotoLeastCommonMultiple(4, v75);
                    }
                    else
                    {
                      unsigned int v76 = DWORD2(v110);
                    }
                    int v77 = v107;
                    int v78 = v101;
                    if (a7)
                    {
                      if (v116)
                      {
                        CVPixelBufferGetIOSurface(v116);
                        int v22 = v103;
                        if (!FigCFEqual())
                        {
                          uint64_t v25 = 4294950306;
LABEL_148:
                          a1 = theDataa;
                          goto LABEL_169;
                        }
                      }
                      else
                      {
                        uint64_t v81 = CMPhotoCreatePixelBufferWithSurface((const __CFAllocator *)*MEMORY[0x1E4F1CF80], a7, 0, &v116);
                        int v22 = v103;
                        if (v81)
                        {
                          uint64_t v25 = v81;
                          goto LABEL_148;
                        }
                      }
                      goto LABEL_149;
                    }
                    IOSurfaceRef buffer = 0;
                    CVPixelBufferRef v117 = 0;
                    v118[0] = 0;
                    uint64_t v79 = CMPhotoSurfacePoolCreateImageSurface((uint64_t)v102, v52, v114, v115, 1, v76, v72, 1, 0, v99, 0, &buffer, v118);
                    if (v79)
                    {
                      uint64_t v25 = v79;
                    }
                    else
                    {
                      int v82 = v118[0];
                      uint64_t v25 = CMPhotoCreatePixelBufferWithSurface((const __CFAllocator *)*MEMORY[0x1E4F1CF80], buffer, 0, &v117);
                      if (!v25)
                      {
                        BOOL v80 = v82 == 0;
                        CVPixelBufferRef v116 = v117;
                        CVPixelBufferRef v117 = 0;
                        goto LABEL_140;
                      }
                    }
                    BOOL v80 = 0;
LABEL_140:
                    int v22 = v103;
                    if (buffer)
                    {
                      IOSurfaceDecrementUseCount(buffer);
                      if (buffer) {
                        CFRelease(buffer);
                      }
                    }
                    if (v117) {
                      CFRelease(v117);
                    }
                    if (v80) {
                      int v78 = v101 | 2;
                    }
                    if (v25) {
                      goto LABEL_148;
                    }
LABEL_149:
                    IOSurface = CVPixelBufferGetIOSurface(v116);
                    if ((v22 & 0x10) != 0)
                    {
                      IOSurfaceLock(v45, 0, 0);
                      BaseAddress = IOSurfaceGetBaseAddress(v45);
                      uint64_t v85 = CFDataGetBytePtr(theDataa);
                      size_t v86 = CFDataGetLength(theDataa);
                      memcpy(BaseAddress, v85, v86);
                      if (v41)
                      {
                        uint64_t v87 = IOSurfaceGetBaseAddress(v45);
                        CFIndex v88 = (CFIndex)v87 + CFDataGetLength(theDataa);
                        BOOL v89 = *(unsigned __int8 *)(v88 - 1) == 255;
                        if (*(unsigned __int8 *)(v88 - 1) == 255) {
                          char v90 = -39;
                        }
                        else {
                          char v90 = -1;
                        }
                        *(unsigned char *)CFIndex v88 = v90;
                        if (v89) {
                          char v91 = -1;
                        }
                        else {
                          char v91 = -39;
                        }
                        *(unsigned char *)(v88 + 1) = v91;
                        if (v89) {
                          char v92 = -39;
                        }
                        else {
                          char v92 = 0;
                        }
                        *(unsigned char *)(v88 + 2) = v92;
                        *(_DWORD *)(v88 + 3) = 0;
                        *(unsigned char *)(v88 + 7) = 0;
                      }
                      IOSurfaceUnlock(v45, 0, 0);
                      int v22 = v103;
                    }
                    if (v107) {
                      IOSurfaceUnlock(v45, 1u, 0);
                    }
                    size_t v93 = IOSurfaceGetWidth(IOSurface);
                    size_t v94 = IOSurfaceGetHeight(IOSurface);
                    uint64_t v95 = JPEGDecompressSurface(0, 0, (uint64_t)v45, 0, (uint64_t)IOSurface, (unsigned int *)&v110, v78, 0, v93, v94, 0, 0);
                    a1 = theDataa;
                    if (v95)
                    {
                      uint64_t v25 = v95;
                      int v77 = 0;
                    }
                    else
                    {
                      if (*(void *)((char *)v112 + 12)) {
                        CVBufferSetAttachment(v116, (CFStringRef)*MEMORY[0x1E4F24A00], *(CFTypeRef *)((char *)v112 + 12), kCVAttachmentMode_ShouldPropagate);
                      }
                      int v77 = 0;
                      uint64_t v25 = 0;
                      *int v97 = CFRetain(v116);
                    }
LABEL_169:
                    if (v22 != 3)
                    {
                      if (v22 != 20) {
                        goto LABEL_175;
                      }
                      IOSurfaceUnlock(v98, 1u, 0);
                      if (v98) {
                        CFRelease(v98);
                      }
                    }
                    if (a1) {
                      CFRelease(a1);
                    }
LABEL_175:
                    if (!v45) {
                      goto LABEL_181;
                    }
                    if (!v77) {
                      goto LABEL_178;
                    }
                    goto LABEL_177;
                  }
                  uint64_t v25 = FigSignalErrorAt();
                  int v24 = 1;
LABEL_194:
                  a1 = theDataa;
                  int v77 = v107;
                  int v22 = v103;
                  goto LABEL_169;
                }
                if (a3) {
                  unint64_t v66 = (unint64_t)(float)((float)v66 * 1.1);
                }
                if (_createJPEGInputSurface_cachedSurface_0)
                {
                  IOSurfaceDecrementUseCount((IOSurfaceRef)_createJPEGInputSurface_cachedSurface_0);
                  CFRelease((CFTypeRef)_createJPEGInputSurface_cachedSurface_0);
                  int v68 = a3;
                  _createJPEGInputSurface_cachedSurface_0 = 0;
                  _createJPEGInputSurface_cachedSurface_1 = 0;
                }
              }
              else
              {
                int v68 = a3;
                char v69 = a3 ^ 1;
                if (a3) {
                  unint64_t v66 = (unint64_t)(float)((float)v66 * 1.1);
                }
              }
              if (v68) {
                int v70 = 0;
              }
              else {
                int v70 = v99;
              }
              int v71 = CMPhotoSurfacePoolCreateMemorySurface((uint64_t)v102, v66, v70, &buffer);
              if ((v69 & 1) == 0 && !v71)
              {
                IOSurfaceIncrementUseCount(buffer);
                _createJPEGInputSurface_cachedSurface_0 = (uint64_t)CFRetain(buffer);
                _createJPEGInputSurface_cachedSurface_1 = v66;
              }
              goto LABEL_116;
            }
            int v56 = 1;
            goto LABEL_84;
          }
LABEL_190:
          int v77 = v107;
          goto LABEL_169;
        }
        int v24 = 0;
        uint64_t v25 = 4294954386;
      }
LABEL_189:
      uint64_t v45 = v20;
      goto LABEL_190;
    }
LABEL_12:
    int v24 = 0;
    uint64_t v25 = 4294954516;
    goto LABEL_189;
  }
  int v107 = 1;
  IOSurfaceLock(v19, 1u, 0);
  CFAllocatorRef v26 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFNumberRef v27 = (const UInt8 *)IOSurfaceGetBaseAddress(v20);
  size_t AllocSize = IOSurfaceGetAllocSize(v20);
  CFDataRef v29 = CFDataCreateWithBytesNoCopy(v26, v27, AllocSize, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
  if (v29)
  {
    CFDataRef v15 = v29;
    int v22 = 3;
    goto LABEL_16;
  }
  uint64_t v25 = 4294954510;
  if (!v20) {
    goto LABEL_181;
  }
  uint64_t v45 = v20;
  int v24 = 0;
LABEL_177:
  IOSurfaceUnlock(v45, 1u, 0);
LABEL_178:
  if (v24) {
    IOSurfaceDecrementUseCount(v45);
  }
  CFRelease(v45);
LABEL_181:
  if (v116) {
    CFRelease(v116);
  }
  if (*(void *)((char *)v112 + 12)) {
    CFRelease(*(CFTypeRef *)((char *)v112 + 12));
  }
  return v25;
}

unint64_t calculateOutputDimensions(unint64_t a1, unint64_t a2, const __CFDictionary *a3, int a4, void *a5, void *a6, _DWORD *a7)
{
  if (a3)
  {
    int IntValue = getIntValue(a3, (const void *)*MEMORY[0x1E4F2FF68], 0);
    unsigned __int8 v15 = getIntValue(a3, @"JPEGRelaxMaxPixelSize", 0);
    unsigned __int8 v16 = getIntValue(a3, (const void *)*MEMORY[0x1E4F2FE48], 0);
  }
  else
  {
    int IntValue = 0;
    unsigned __int8 v15 = 0;
    unsigned __int8 v16 = 0;
  }
  return JPEGCalculateOutputDimensions(a1, a2, IntValue, v15, v16, a4, a5, a6, 0, a7, 0);
}

uint64_t scaleAndConvertPixelBuffer(__CVBuffer *a1, unint64_t a2, unint64_t a3, int a4, int a5, const __CFDictionary *a6, __CVBuffer **a7)
{
  uint64_t v13 = a1;
  VTPixelTransferSessionRef pixelTransferSessionOut = 0;
  destinationBuffer = 0;
  int v44 = *a7;
  size_t Width = CVPixelBufferGetWidth(a1);
  size_t Height = CVPixelBufferGetHeight(v13);
  BOOL v41 = a7;
  unint64_t v45 = a3;
  if (a5)
  {
    int v16 = a4;
    CFDictionaryRef v17 = a6;
    unint64_t v18 = Height;
    if (JPEGDeviceInterface_supportsAppleInterchangeFormats()) {
      unint64_t v19 = 0x4000;
    }
    else {
      unint64_t v19 = 4092;
    }
    BOOL v20 = JPEGDeviceInterface_supportsAppleInterchangeFormats() == 0;
    LODWORD(Height) = v18;
    if (v20) {
      unint64_t v21 = 4092;
    }
    else {
      unint64_t v21 = 0x4000;
    }
    unint64_t v22 = a3;
    if ((a5 & 4) != 0) {
      unint64_t v23 = a3;
    }
    else {
      unint64_t v23 = a2;
    }
    if ((a5 & 4) != 0) {
      unint64_t v22 = a2;
    }
    if (Width > v19
      || v18 > v21
      || ((float)((float)v23 / (float)Width) >= 0.25 ? (BOOL v24 = (float)((float)v22 / (float)v18) < 0.25) : (BOOL v24 = 1), v24))
    {
      int v40 = 1;
      unint64_t v45 = v22;
      a2 = v23;
    }
    else
    {
      int v40 = 0;
    }
    a6 = v17;
    a4 = v16;
  }
  else
  {
    int v40 = 0;
  }
  int v42 = Height;
  int v43 = Width;
  if (a4 == 1380401729)
  {
    if (a6) {
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, a6);
    }
    else {
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    }
    a6 = MutableCopy;
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    setIntValue(Mutable, (const void *)*MEMORY[0x1E4F24E90], 1380401729);
    setIntValue(Mutable, (const void *)*MEMORY[0x1E4F24E18], 32);
    CFNumberRef v27 = (const void *)*MEMORY[0x1E4F24E28];
    CFDataRef v28 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], scaleAndConvertPixelBuffer_kBlack_32RGBA, 4);
    CFDictionarySetValue(Mutable, v27, v28);
    if (v28) {
      CFRelease(v28);
    }
    CFDictionarySetValue(a6, (const void *)*MEMORY[0x1E4F24D68], Mutable);
    CFRelease(Mutable);
  }
  char v29 = v40 ^ 1;
  if (!a5) {
    char v29 = 0;
  }
  if (v29)
  {
    int v40 = 0;
    goto LABEL_39;
  }
  uint64_t v30 = VTPixelTransferSessionCreate(0, &pixelTransferSessionOut);
  if (v30)
  {
LABEL_40:
    uint64_t v31 = v30;
    goto LABEL_41;
  }
  if (a5 || !v44)
  {
    uint64_t IOSurfaceBackedCVPixelBufferWithAttributes = FigCreateIOSurfaceBackedCVPixelBufferWithAttributes();
    if (IOSurfaceBackedCVPixelBufferWithAttributes)
    {
      uint64_t v31 = IOSurfaceBackedCVPixelBufferWithAttributes;
      VTPixelTransferSessionInvalidate(pixelTransferSessionOut);
      if (pixelTransferSessionOut) {
        CFRelease(pixelTransferSessionOut);
      }
LABEL_41:
      if (a4 != 1380401729) {
        return v31;
      }
LABEL_42:
      CFRelease(a6);
      return v31;
    }
  }
  else
  {
    destinationBuffer = v44;
  }
  VTSessionSetProperty(pixelTransferSessionOut, (CFStringRef)*MEMORY[0x1E4F45128], (CFTypeRef)*MEMORY[0x1E4F1CFD0]);
  uint64_t v37 = VTPixelTransferSessionTransferImage(pixelTransferSessionOut, v13, destinationBuffer);
  uint64_t v31 = v37;
  if (v37
    && v37 >> 26 == 56
    && CVPixelBufferGetWidth(v13) == a2
    && CVPixelBufferGetHeight(v13) == v45)
  {
    CFTypeID v38 = (const void *)*MEMORY[0x1E4F1CFC8];
    VTSessionSetProperty(pixelTransferSessionOut, (CFStringRef)*MEMORY[0x1E4F45120], (CFTypeRef)*MEMORY[0x1E4F1CFC8]);
    VTSessionSetProperty(pixelTransferSessionOut, (CFStringRef)*MEMORY[0x1E4F45118], v38);
    uint64_t v31 = VTPixelTransferSessionTransferImage(pixelTransferSessionOut, v13, destinationBuffer);
  }
  VTPixelTransferSessionInvalidate(pixelTransferSessionOut);
  if (pixelTransferSessionOut) {
    CFRelease(pixelTransferSessionOut);
  }
  if (v40) {
    uint64_t v13 = destinationBuffer;
  }
  if (a5)
  {
LABEL_39:
    uint64_t v30 = VTImageRotationSessionCreate();
    if (!v30)
    {
      uint64_t v33 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
      if (a5) {
        VTSessionSetProperty(0, (CFStringRef)*MEMORY[0x1E4F45000], (CFTypeRef)*MEMORY[0x1E4F1CFD0]);
      }
      if ((a5 & 2) != 0) {
        VTSessionSetProperty(0, (CFStringRef)*MEMORY[0x1E4F44FF8], *v33);
      }
      int v34 = v44;
      if (v44)
      {
        destinationBuffer = v44;
      }
      else
      {
        uint64_t v39 = FigCreateIOSurfaceBackedCVPixelBufferWithAttributes();
        if (v39)
        {
          uint64_t v31 = v39;
          MEMORY[0x1AD10FE70](0);
          if (a4 != 1380401729) {
            return v31;
          }
          goto LABEL_42;
        }
      }
      VTSessionSetProperty(0, (CFStringRef)*MEMORY[0x1E4F44FF0], *v33);
      if ((v43 | v42)) {
        uint64_t v35 = VTPixelRotationSessionRotateSubImage();
      }
      else {
        uint64_t v35 = MEMORY[0x1AD10FE80](0, v13, destinationBuffer);
      }
      uint64_t v31 = v35;
      MEMORY[0x1AD10FE70](0);
      goto LABEL_68;
    }
    goto LABEL_40;
  }
  int v34 = v44;
LABEL_68:
  if (a4 == 1380401729) {
    CFRelease(a6);
  }
  if (v31)
  {
    if (destinationBuffer != v34) {
      CVPixelBufferRelease(destinationBuffer);
    }
  }
  else
  {
    if (v40) {
      CFRelease(v13);
    }
    uint64_t v31 = 0;
    *BOOL v41 = destinationBuffer;
  }
  return v31;
}

uint64_t CMPhotoJPEGCreateCGImageFromJPEG(const __CFData *a1, const __CFDictionary *a2, CGImageRef *a3)
{
  CFTypeRef cf = 0;
  CFTypeRef v23 = 0;
  unint64_t v18 = 0;
  unint64_t v19 = 0;
  int v16 = 1;
  int v17 = 0;
  if ((sCMPhotoJPEGDecoderTraceInitialized & 1) == 0) {
    sCMPhotoJPEGDecoderTraceInitialized = 1;
  }
  if (!jpegService())
  {
    uint64_t v13 = 4294954514;
    goto LABEL_19;
  }
  if (a2)
  {
    int IntValue = getIntValue(a2, @"JPEGCacheInputSurface", 0);
    unsigned __int8 v7 = getIntValue(a2, @"JPEGBackCGImageWithIOSurface", 0);
    int v8 = getIntValue(a2, @"JPEGHighSpeedDecode", 0);
  }
  else
  {
    unsigned __int8 v7 = 0;
    int IntValue = 0;
    int v8 = 1;
  }
  if (!JPEGDeviceInterface_supportsAppleInterchangeFormats() || _needsTransformAfterDecode(a1, a2))
  {
    BOOL v9 = 0;
LABEL_10:
    int v10 = 1;
    goto LABEL_11;
  }
  ModifiedOptionsWithPixeluint64_t Format = _createModifiedOptionsWithPixelFormat(a2, 1111970369);
  BOOL v9 = ModifiedOptionsWithPixelFormat;
  if (!ModifiedOptionsWithPixelFormat) {
    goto LABEL_10;
  }
  int v10 = 0;
  a2 = ModifiedOptionsWithPixelFormat;
LABEL_11:
  unint64_t v20 = 0;
  unint64_t v21 = 0;
  uint64_t CGImageWithPixelBuffer = _createPixelBufferFromJPEG(a1, a2, IntValue != 0, v8 != 0, &v16, &v20, 0, &cf);
  if (CGImageWithPixelBuffer) {
    goto LABEL_17;
  }
  if (v10)
  {
    calculateOutputDimensions(v20, v21, a2, v16, 0, &v18, &v17);
    uint64_t CGImageWithPixelBuffer = scaleAndConvertPixelBuffer((__CVBuffer *)cf, v18, v19, 1111970369, v17, 0, (__CVBuffer **)&v23);
    if (CGImageWithPixelBuffer) {
      goto LABEL_17;
    }
    CFTypeID v12 = (void *)v23;
  }
  else
  {
    CFTypeID v12 = (void *)CFRetain(cf);
    CFTypeRef v23 = v12;
  }
  uint64_t CGImageWithPixelBuffer = CMPhotoCreateCGImageWithPixelBuffer((const __CFAllocator *)*MEMORY[0x1E4F1CF80], (CVPixelBufferRef)v12, v7, a3);
LABEL_17:
  uint64_t v13 = CGImageWithPixelBuffer;
  if (v9) {
    CFRelease(v9);
  }
LABEL_19:
  if (cf) {
    CFRelease(cf);
  }
  if (v23) {
    CFRelease(v23);
  }
  return v13;
}

BOOL _needsTransformAfterDecode(const __CFData *a1, const __CFDictionary *a2)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  int v10 = 0;
  if (!a2) {
    return 0;
  }
  int IntValue = getIntValue(a2, (const void *)*MEMORY[0x1E4F2FF68], 0);
  int v5 = getIntValue(a2, (const void *)*MEMORY[0x1E4F2FE48], 0);
  BOOL result = 0;
  if (IntValue | v5)
  {
    uint64_t v17 = 0;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    JPEGParseJPEGInfo(a1, (uint64_t)&v13, 0, 0);
    calculateOutputDimensions(v13, DWORD1(v13), a2, SDWORD1(v14), &v8, &v11, &v10);
    return v10 || v8 != v11 || v9 != v12;
  }
  return result;
}

__CFDictionary *_createModifiedOptionsWithPixelFormat(const void *a1, int a2)
{
  if (a1)
  {
    if (getFourCCValue((const __CFDictionary *)a1, @"JPEGOutputPixelFormat", 0) == a2)
    {
      return (__CFDictionary *)CFRetain(a1);
    }
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, (CFDictionaryRef)a1);
  }
  else
  {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  char v6 = MutableCopy;
  if (MutableCopy) {
    setIntValue(MutableCopy, @"JPEGOutputPixelFormat", a2);
  }
  return v6;
}

uint64_t CMPhotoJPEGDecodeJPEGIntoSurface(const __CFData *a1, const __CFDictionary *a2, __IOSurface *a3)
{
  CFTypeRef cf = 0;
  CFTypeRef v22 = 0;
  int v18 = 1;
  if ((sCMPhotoJPEGDecoderTraceInitialized & 1) == 0) {
    sCMPhotoJPEGDecoderTraceInitialized = 1;
  }
  if (!jpegService())
  {
    uint64_t v8 = 4294954514;
    goto LABEL_20;
  }
  if (!a3)
  {
    uint64_t v8 = 4294954516;
    goto LABEL_20;
  }
  Pixeluint64_t Format = IOSurfaceGetPixelFormat(a3);
  int v7 = PixelFormat;
  uint64_t v8 = 4294954516;
  if (PixelFormat > 1380401728)
  {
    if (PixelFormat != 1999843442)
    {
      int v9 = 1380401729;
LABEL_10:
      if (PixelFormat != v9) {
        goto LABEL_20;
      }
    }
  }
  else if (PixelFormat != 875704422)
  {
    int v9 = 1111970369;
    goto LABEL_10;
  }
  unint64_t v19 = 0;
  unint64_t v20 = 0;
  if (!JPEGDeviceInterface_supportsAppleInterchangeFormats()
    || (BOOL v10 = _needsTransformAfterDecode(a1, a2), v7 == 1999843442)
    || v10)
  {
    uint64_t PixelBufferWithSurface = _createPixelBufferFromJPEG(a1, a2, 0, 1, &v18, &v19, 0, &v22);
    if (!PixelBufferWithSurface)
    {
      size_t Width = IOSurfaceGetWidth(a3);
      size_t Height = IOSurfaceGetHeight(a3);
      int v17 = 0;
      calculateOutputDimensions(v19, v20, a2, v18, 0, 0, &v17);
      uint64_t PixelBufferWithSurface = CMPhotoCreatePixelBufferWithSurface((const __CFAllocator *)*MEMORY[0x1E4F1CF80], a3, 0, (CVPixelBufferRef *)&cf);
      if (!PixelBufferWithSurface) {
        uint64_t PixelBufferWithSurface = scaleAndConvertPixelBuffer((__CVBuffer *)v22, Width, Height, v7, v17, 0, (__CVBuffer **)&cf);
      }
    }
    uint64_t v8 = PixelBufferWithSurface;
  }
  else
  {
    ModifiedOptionsWithPixeluint64_t Format = _createModifiedOptionsWithPixelFormat(a2, v7);
    if (ModifiedOptionsWithPixelFormat)
    {
      uint64_t v12 = ModifiedOptionsWithPixelFormat;
      uint64_t v8 = _createPixelBufferFromJPEG(a1, ModifiedOptionsWithPixelFormat, 0, 1, &v18, &v19, a3, &v22);
      CFRelease(v12);
    }
    else
    {
      uint64_t v8 = 4294954510;
    }
  }
LABEL_20:
  if (cf) {
    CFRelease(cf);
  }
  if (v22) {
    CFRelease(v22);
  }
  return v8;
}

uint64_t CMPhotoJPEGCreateCGImageFromIOSurface(__IOSurface *a1, int a2, CGImageRef *a3)
{
  if ((sCMPhotoJPEGDecoderTraceInitialized & 1) == 0) {
    sCMPhotoJPEGDecoderTraceInitialized = 1;
  }
  if (a1) {
    return CMPhotoCreateCGImageWithSurface((const __CFAllocator *)*MEMORY[0x1E4F1CF80], a1, a2, a3);
  }
  else {
    return 4294954516;
  }
}

unint64_t CMPhotoJPEGCalculateOutputDimensions(unint64_t a1, unint64_t a2, const __CFDictionary *a3, int a4, void *a5, void *a6)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unint64_t result = calculateOutputDimensions(a1, a2, a3, a4, 0, &v10, 0);
  uint64_t v9 = v11;
  *a5 = v10;
  *a6 = v9;
  return result;
}

__CFArray *CMPhotoJPEGCreateNativeDecodePixelFormatArray()
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  arrayAppendPixelFormatValue(Mutable, 875704422);
  arrayAppendPixelFormatValue(Mutable, 2037741158);
  if (JPEGDeviceInterface_supportsAppleInterchangeFormats())
  {
    arrayAppendPixelFormatValue(Mutable, 1111970369);
    arrayAppendPixelFormatValue(Mutable, 1380401729);
    arrayAppendPixelFormatValue(Mutable, 875704934);
    arrayAppendPixelFormatValue(Mutable, 875836518);
  }
  return Mutable;
}

void arrayAppendPixelFormatValue(__CFArray *a1, int a2)
{
  int valuePtr = a2;
  CFNumberRef v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  CFArrayAppendValue(a1, v3);
  if (v3) {
    CFRelease(v3);
  }
}

double CMPhotoJPEGGetMaximumHardwareOutputDimensions()
{
  return 16384.0;
}

uint64_t CMPhotoJPEGShouldUseHardwareDecode(int a1, const __CFDictionary *a2, double a3, double a4)
{
  uint64_t result = jpegService();
  if (result)
  {
    if (!a2) {
      goto LABEL_22;
    }
    int IntValue = getIntValue(a2, (const void *)*MEMORY[0x1E4F2FF68], 0);
    uint64_t result = 0;
    if (!IntValue || IntValue >= 16)
    {
      CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(a2, @"JPEGRequireForegroundRunning");
      if (!Value
        || (v12 = Value, CFTypeID v13 = CFGetTypeID(Value), v13 != CFBooleanGetTypeID())
        || !CFBooleanGetValue(v12)
        || (pthread_once(&sLoadPretendForegroundOnce, (void (*)(void))_loadPretendForegroundOnce),
            (sPretendForeground & 1) != 0)
        || (getpid(), can_use_foreground_hw = proc_can_use_foreground_hw(), uint64_t result = 0, can_use_foreground_hw == 1))
      {
LABEL_22:
        if (JPEGDeviceInterface_supportsAppleInterchangeFormats())
        {
          if (a1) {
            int v15 = 0xFFFF;
          }
          else {
            int v15 = 92415;
          }
        }
        else if (a1)
        {
          int v15 = 92415;
        }
        else
        {
          int v15 = 0x3FFFF;
        }
        return v15 < (int)(a3 * a4);
      }
    }
  }
  return result;
}

uint64_t CMPhotoJPEGGetDecodeTiming()
{
  return 0;
}

void setIntValue(__CFDictionary *a1, const void *a2, int a3)
{
  int valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFDictionarySetValue(a1, a2, v5);
  if (v5) {
    CFRelease(v5);
  }
}

const char *_loadPretendForegroundOnce()
{
  uint64_t result = getenv("JPEG_PRETEND_FOREGROUND_APP");
  if (result)
  {
    uint64_t result = (const char *)atoi(result);
    if (result) {
      sPretendForeground = 1;
    }
  }
  return result;
}

uint64_t CMPhotoUpdateImageProperties(CFDictionaryRef *a1, int a2, int a3, double a4, double a5)
{
  if (!a1) {
    return 4294950306;
  }
  CFDictionaryRef v6 = *a1;
  if (!*a1) {
    return 4294950306;
  }
  uint64_t v11 = (double *)MEMORY[0x1E4F1DB30];
  if (!(a3 | a2) && a4 == *MEMORY[0x1E4F1DB30] && a5 == *(double *)(MEMORY[0x1E4F1DB30] + 8)) {
    return 0;
  }
  CFTypeID v13 = (const void *)*MEMORY[0x1E4F2FD40];
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*a1, (const void *)*MEMORY[0x1E4F2FD40]);
  CFAllocatorRef v15 = CFGetAllocator(v6);
  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v15, 0, v6);
  if (!MutableCopy) {
    return 4294950305;
  }
  int v17 = MutableCopy;
  if (Value)
  {
    CFDictionaryRef Value = CFDictionaryCreateMutableCopy(v15, 0, Value);
    if (!Value)
    {
      uint64_t v20 = 4294950305;
      goto LABEL_30;
    }
    CFDictionarySetValue(v17, v13, Value);
  }
  if (a2)
  {
    CFDictionaryRemoveValue(v17, (const void *)*MEMORY[0x1E4F2FCA0]);
    if (!Value) {
      goto LABEL_18;
    }
    CFDictionaryRemoveValue(Value, (const void *)*MEMORY[0x1E4F2FD70]);
  }
  if (a3 && Value)
  {
    CFDictionaryRemoveValue(Value, (const void *)*MEMORY[0x1E4F2FD98]);
    CFDictionaryRemoveValue(Value, (const void *)*MEMORY[0x1E4F2FD90]);
  }
LABEL_18:
  if (a4 != *v11 || a5 != v11[1])
  {
    uint64_t updated = _updateImagePropertiesWithGivenDimensions(v17, a4, a5);
    if (updated)
    {
      uint64_t v20 = updated;
LABEL_30:
      CFRelease(v17);
      if (!Value) {
        return v20;
      }
      goto LABEL_24;
    }
  }
  CFRelease(v6);
  uint64_t v20 = 0;
  *a1 = v17;
  if (Value) {
LABEL_24:
  }
    CFRelease(Value);
  return v20;
}

uint64_t _updateImagePropertiesWithGivenDimensions(const __CFDictionary *a1, double a2, double a3)
{
  int v6 = (int)a2;
  uint64_t result = FigCFDictionarySetInt32();
  if (!result)
  {
    uint64_t result = FigCFDictionarySetInt32();
    if (!result)
    {
      uint64_t v8 = (const void *)*MEMORY[0x1E4F2F800];
      uint64_t result = (uint64_t)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E4F2F800]);
      if (result)
      {
        CFDictionaryRef v9 = (const __CFDictionary *)result;
        uint64_t v14 = 0;
        uint64_t v10 = (const void *)*MEMORY[0x1E4F2F8D8];
        CMPhotoCFDictionaryGetInt32IfPresent((CFDictionaryRef)result, (const void *)*MEMORY[0x1E4F2F8D8], (char *)&v14 + 4);
        uint64_t v11 = (const void *)*MEMORY[0x1E4F2F8E0];
        CMPhotoCFDictionaryGetInt32IfPresent(v9, (const void *)*MEMORY[0x1E4F2F8E0], &v14);
        if (a2 != (double)SHIDWORD(v14) || a3 != (double)(int)v14)
        {
          CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v9);
          if (!MutableCopy) {
            return 4294950305;
          }
          CFTypeID v13 = MutableCopy;
          CMPhotoCFDictionarySetInt32(MutableCopy, v10, v6);
          CMPhotoCFDictionarySetInt32(v13, v11, (int)a3);
          CFDictionarySetValue(a1, v8, v13);
          CFRelease(v13);
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t CMPhotoCreateImagePropertiesFromData(const __CFAllocator *a1, double *a2, void *a3, uint64_t a4, const __CFData *a5, const __CFData *a6, const void *a7, CGMutableImageMetadataRef *a8, __CFDictionary **a9)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  CFTypeRef v33 = 0;
  cf[0] = 0;
  CGMutableImageMetadataRef v31 = 0;
  CFMutableDictionaryRef Mutable = 0;
  if (!((unint64_t)a8 | (unint64_t)a9))
  {
    uint64_t v20 = 0;
    uint64_t v19 = 4294950306;
    goto LABEL_42;
  }
  if (!a5)
  {
    if (!a6) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  uint64_t DataWithPrefix = _createDataWithPrefix(a1, (const UInt8 *)"http://ns.adobe.com/xap/1.0/", 29, a5, (__CFData **)cf);
  if (DataWithPrefix) {
    goto LABEL_40;
  }
  if (a6)
  {
LABEL_9:
    uint64_t DataWithPrefix = _createDataWithPrefix(a1, (const UInt8 *)"Photoshop 3.0", 14, a6, (__CFData **)&v33);
    if (!DataWithPrefix) {
      goto LABEL_10;
    }
LABEL_40:
    uint64_t v19 = DataWithPrefix;
LABEL_41:
    uint64_t v20 = 0;
    goto LABEL_42;
  }
  *(_DWORD *)&bytes[8] = 0;
  *(void *)bytes = 0x4044D494238;
  CFDataRef v17 = CFDataCreate(0, bytes, 12);
  if (!v17)
  {
    uint64_t v19 = 4294950305;
    goto LABEL_41;
  }
  CFDataRef v18 = v17;
  uint64_t v19 = _createDataWithPrefix(a1, (const UInt8 *)"Photoshop 3.0", 14, v17, (__CFData **)&v33);
  CFRelease(v18);
  if (v19) {
    goto LABEL_41;
  }
LABEL_10:
  if (!a7 && !a4 && !v33 && !cf[0])
  {
    if (a9 && (CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) == 0
      || a8 && (CGMutableImageMetadataRef v31 = CGImageMetadataCreateMutable()) == 0)
    {
      uint64_t v20 = 0;
LABEL_53:
      uint64_t v19 = 4294950305;
      goto LABEL_42;
    }
    goto LABEL_20;
  }
  uint64_t DataWithPrefix = CGImageCreateMetadataFromData();
  if (DataWithPrefix) {
    goto LABEL_40;
  }
LABEL_20:
  if (!a9) {
    goto LABEL_38;
  }
  CFDictionaryRef MutableCopy = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
  uint64_t v20 = MutableCopy;
  if (!MutableCopy) {
    goto LABEL_53;
  }
  if (!a2 || (uint64_t updated = _updateImagePropertiesWithGivenDimensions(MutableCopy, *a2, a2[1]), !updated))
  {
    if (!a3 || (uint64_t updated = CMPhotoCFDictionarySetSize(v20, *MEMORY[0x1E4F2F6B8], *a3), !updated))
    {
      if (a7) {
        CFDictionarySetValue(v20, (const void *)*MEMORY[0x1E4F2F420], a7);
      }
      *(_OWORD *)bytes = 0u;
      long long v36 = 0u;
      CFTypeRef v23 = (const void *)*MEMORY[0x1E4F2FB88];
      cf[1] = *(CFTypeRef *)MEMORY[0x1E4F2FB78];
      cf[2] = v23;
      BOOL v24 = (const void *)*MEMORY[0x1E4F2FBD0];
      cf[3] = *(CFTypeRef *)MEMORY[0x1E4F2FB90];
      cf[4] = v24;
      uint64_t v25 = (const void *)*MEMORY[0x1E4F2FB80];
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v20, (const void *)*MEMORY[0x1E4F2FB80]);
      if (Value)
      {
        CFDictionaryRef v27 = Value;
        if (CFDictionaryGetCount(Value) == 4)
        {
          CFDictionaryGetKeysAndValues(v27, (const void **)bytes, 0);
          for (uint64_t i = 0; i != 4; ++i)
          {
            uint64_t v29 = 0;
            while (!FigCFEqual())
            {
              v29 += 8;
              if (v29 == 32) {
                goto LABEL_37;
              }
            }
          }
          CFDictionaryRemoveValue(v20, v25);
        }
      }
LABEL_37:
      *a9 = v20;
LABEL_38:
      uint64_t v19 = 0;
      if (a8)
      {
        uint64_t v20 = 0;
        *a8 = v31;
        CGMutableImageMetadataRef v31 = 0;
        goto LABEL_42;
      }
      goto LABEL_41;
    }
  }
  uint64_t v19 = updated;
LABEL_42:
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (v33) {
    CFRelease(v33);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v31) {
    CFRelease(v31);
  }
  if (v20) {
    CFRelease(v20);
  }
  return v19;
}

uint64_t _createDataWithPrefix(const __CFAllocator *a1, const UInt8 *a2, CFIndex a3, const __CFData *a4, __CFData **a5)
{
  CFMutableDictionaryRef Mutable = CFDataCreateMutable(a1, 0);
  if (!Mutable) {
    return 4294950305;
  }
  uint64_t v10 = Mutable;
  CFDataAppendBytes(Mutable, a2, a3);
  unsigned __int8 BytePtr = CFDataGetBytePtr(a4);
  CFIndex Length = CFDataGetLength(a4);
  CFDataAppendBytes(v10, BytePtr, Length);
  uint64_t result = 0;
  *a5 = v10;
  return result;
}

uint64_t CMPhotoImagePropertiesCreateDataRepresentation(const __CFAllocator *a1, uint64_t a2, uint64_t a3)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return 4294950305;
  }
  CFMutableDictionaryRef v6 = Mutable;
  uint64_t DataFromMetadata = CMPhotoCFDictionarySetSize(Mutable, *MEMORY[0x1E4F2F8D8], a2);
  if (!DataFromMetadata)
  {
    uint64_t DataFromMetadata = CMPhotoCFDictionarySetSize(v6, *MEMORY[0x1E4F2F8E0], a3);
    if (!DataFromMetadata) {
      uint64_t DataFromMetadata = CGImageCreateDataFromMetadata();
    }
  }
  uint64_t v8 = DataFromMetadata;
  CFRelease(v6);
  return v8;
}

uint64_t CMPhotoExifDetectTIFFHeaderOffset(const __CFData *a1, unsigned char *a2, _DWORD *a3)
{
  if ((unint64_t)CFDataGetLength(a1) > 3)
  {
    unsigned __int8 BytePtr = CFDataGetBytePtr(a1);
    if (*(_DWORD *)(BytePtr + 6) == 2771273 || *(_DWORD *)(BytePtr + 6) == 704662861)
    {
      *a3 = 6;
    }
    else
    {
      if (*(_DWORD *)BytePtr != 2771273 && *(_DWORD *)BytePtr != 704662861)
      {
        *a2 = 0;
        return 0;
      }
      *a3 = 0;
    }
    *a2 = 1;
    return 0;
  }
  return FigSignalErrorAt();
}

BOOL CMPhotoParseExifOrientationFromTIFF(OpaqueCMBlockBuffer *a1, size_t a2, unint64_t a3, int *a4)
{
  BOOL v6 = 0;
  if (CMPhotoParseExifFromTIFF(a1, a2, a3, &v6, a4, 0, 0, 0, 0)) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = !v6;
  }
  return !v4;
}

uint64_t CMPhotoCreateFigIntrinsicsDictFromIntrinsicsMatrix(int a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (!a7) {
    return 0;
  }
  if (cf)
  {
    CFTypeID v8 = CFGetTypeID(cf);
    if (v8 == CFArrayGetTypeID() && CFArrayGetCount((CFArrayRef)cf) == 9)
    {
      if (FigCFArrayGetDoubleAtIndex() && FigCFArrayGetDoubleAtIndex()) {
        return FigSignalErrorAt();
      }
      else {
        return 4294950306;
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t CMPhotoCreateIntrinsicsArrayFromHorizontalFOV(const __CFAllocator *a1, unint64_t a2, unint64_t a3, int a4, __CFArray **a5)
{
  if (!a5) {
    return 0;
  }
  uint64_t v6 = 4294950306;
  if (a4 <= 0x2BF20 && a2 && a3)
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 9, MEMORY[0x1E4F1D510]);
    if (!Mutable) {
      return 4294950305;
    }
    uint64_t v11 = Mutable;
    double v12 = __tanpi((double)a4 / 1000.0 / 360.0);
    double v13 = (double)a2 / (v12 + v12);
    uint64_t appended = CMPhotoCFArrayAppendDouble(v11, v13);
    if (appended
      || (uint64_t appended = CMPhotoCFArrayAppendDouble(v11, 0.0), appended)
      || (uint64_t appended = CMPhotoCFArrayAppendDouble(v11, (double)a2 * 0.5), appended)
      || (uint64_t appended = CMPhotoCFArrayAppendDouble(v11, 0.0), appended)
      || (uint64_t appended = CMPhotoCFArrayAppendDouble(v11, v13), appended)
      || (uint64_t appended = CMPhotoCFArrayAppendDouble(v11, (double)a3 * 0.5), appended)
      || (uint64_t appended = CMPhotoCFArrayAppendDouble(v11, 0.0), appended)
      || (uint64_t appended = CMPhotoCFArrayAppendDouble(v11, 0.0), appended))
    {
      uint64_t v6 = appended;
    }
    else
    {
      uint64_t v6 = CMPhotoCFArrayAppendDouble(v11, 1.0);
      if (!v6)
      {
        *a5 = v11;
        return v6;
      }
    }
    CFRelease(v11);
  }
  return v6;
}

uint64_t CMPhotoGetHorizontalFOVFromIntrinsicsArray(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a4) {
    return 0;
  }
  if (cf && (CFTypeID v5 = CFGetTypeID(cf), v5 == CFArrayGetTypeID()) && CFArrayGetCount((CFArrayRef)cf) == 9)
  {
    if (!FigCFArrayGetDoubleAtIndex() || !FigCFArrayGetDoubleAtIndex()) {
      return 4294950306;
    }
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  return FigSignalErrorAt();
}

uint64_t CMPhotoCreateFigExtrinsicsDictFromExtrinsics(const __CFAllocator *a1, unint64_t a2, unint64_t a3, int a4, int a5, __CFDictionary **a6)
{
  value = 0;
  if (!a6) {
    return 0;
  }
  if (a2 | a3)
  {
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      double v13 = Mutable;
      uint64_t v14 = CMPhotoCFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E4F327A8], 0);
      if (v14)
      {
        uint64_t v25 = v14;
        CFAllocatorRef v15 = 0;
        goto LABEL_36;
      }
      CFAllocatorRef v15 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
      if (!v15)
      {
        uint64_t v25 = 4294950305;
        goto LABEL_36;
      }
      CFDictionaryRef v27 = a6;
      if (a2)
      {
        CFTypeID v16 = CFGetTypeID((CFTypeRef)a2);
        if (v16 == CFArrayGetTypeID() && CFArrayGetCount((CFArrayRef)a2) == 3)
        {
          int v17 = a5;
          uint64_t v18 = 0;
          while (FigCFArrayGetDoubleAtIndex())
          {
            double v19 = round(0.0 * 1000000.0);
            if (v19 < -2147483650.0 || v19 > 2147483650.0) {
              goto LABEL_34;
            }
            uint64_t appended = CMPhotoCFArrayAppendInt32(v15, (int)v19);
            if (appended) {
              goto LABEL_35;
            }
            if (++v18 == 3) {
              goto LABEL_19;
            }
          }
          uint64_t v25 = 4294950306;
LABEL_36:
          CFRelease(v13);
          if (v15) {
LABEL_29:
          }
            CFRelease(v15);
          goto LABEL_30;
        }
LABEL_34:
        uint64_t appended = FigSignalErrorAt();
LABEL_35:
        uint64_t v25 = appended;
        goto LABEL_36;
      }
      int v17 = a5;
      int v21 = 3;
      do
      {
        uint64_t appended = CMPhotoCFArrayAppendInt32(v15, 0);
        if (appended) {
          goto LABEL_35;
        }
        --v21;
      }
      while (v21);
LABEL_19:
      CFDictionarySetValue(v13, (const void *)*MEMORY[0x1E4F32790], v15);
      if (a3)
      {
        if (CMPhotoCreateFigExtrinsicsDictFromExtrinsics_onceToken != -1) {
          dispatch_once(&CMPhotoCreateFigExtrinsicsDictFromExtrinsics_onceToken, &__block_literal_global_5);
        }
        uint64_t appended = CMPhotoCreateQuaternionArrayFromRotationMatrix(a1, (CFTypeRef)a3, 1, (CFMutableArrayRef *)&value);
        if (appended) {
          goto LABEL_35;
        }
        CFDictionarySetValue(v13, (const void *)*MEMORY[0x1E4F327A0], value);
      }
      CFTypeRef v22 = (const void **)MEMORY[0x1E4F1CFD0];
      if (a4)
      {
        CFTypeRef v23 = cmpweak_kFigCameraExtrinsics_WriteAllFields();
        CFDictionarySetValue(v13, v23, *v22);
      }
      if (v17)
      {
        BOOL v24 = cmpweak_kFigCameraExtrinsics_OfficialBox();
        CFDictionarySetValue(v13, v24, *v22);
      }
      uint64_t v25 = 0;
      *CFDictionaryRef v27 = v13;
      goto LABEL_29;
    }
    uint64_t v25 = 4294950305;
  }
  else
  {
    uint64_t v25 = 4294950306;
  }
LABEL_30:
  if (value) {
    CFRelease(value);
  }
  return v25;
}

uint64_t CMPhotoCreateQuaternionArrayFromRotationMatrix(const __CFAllocator *a1, CFTypeRef cf, int a3, CFMutableArrayRef *a4)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  if (cf && (CFTypeID v8 = CFGetTypeID(cf), v8 == CFArrayGetTypeID()) && CFArrayGetCount((CFArrayRef)cf) == 9)
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 3, MEMORY[0x1E4F1D510]);
    if (!Mutable) {
      return 4294950305;
    }
    CFMutableArrayRef v10 = Mutable;
    uint64_t v11 = 0;
    double v12 = &v55;
    while (2)
    {
      uint64_t v13 = 0;
      uint64_t v14 = v12;
      do
      {
        if (!FigCFArrayGetDoubleAtIndex())
        {
          uint64_t v19 = 4294950306;
          goto LABEL_14;
        }
        v13 += 3;
        ++v14;
      }
      while (v13 != 9);
      ++v11;
      v12 += 3;
      if (v11 != 3) {
        continue;
      }
      break;
    }
    float64x2_t v53 = 0u;
    float64x2_t v54 = 0u;
    if (v63 >= 0.0)
    {
      if (v55 >= -v59)
      {
        double v17 = v63 + v55 + 1.0 + v59;
        double v15 = v60 - v62;
        double v16 = v61 - v57;
        v53.f64[0] = v60 - v62;
        v53.f64[1] = v61 - v57;
        v54.f64[0] = v56 - v58;
        v54.f64[1] = v17;
        double v18 = v17;
      }
      else
      {
        double v18 = v63 + 1.0 - v55 - v59;
        double v15 = v61 + v57;
        double v16 = v60 + v62;
        v53.f64[0] = v61 + v57;
        v53.f64[1] = v60 + v62;
        double v17 = v56 - v58;
        v54.f64[0] = v18;
        v54.f64[1] = v56 - v58;
      }
    }
    else if (v55 <= v59)
    {
      double v16 = 1.0 - v55 + v59 - v63;
      double v15 = v56 + v58;
      double v17 = v61 - v57;
      v53.f64[0] = v56 + v58;
      v53.f64[1] = v16;
      v54.f64[0] = v60 + v62;
      v54.f64[1] = v61 - v57;
      double v18 = v16;
    }
    else
    {
      double v15 = v55 + 1.0 - v59 - v63;
      double v16 = v56 + v58;
      double v17 = v60 - v62;
      v53.f64[0] = v15;
      v53.f64[1] = v56 + v58;
      v54.f64[0] = v61 + v57;
      v54.f64[1] = v60 - v62;
      double v18 = v15;
    }
    if (v17 < 0.0)
    {
      float64x2_t v53 = vnegq_f64(v53);
      float64x2_t v54 = vnegq_f64(v54);
      double v16 = v53.f64[1];
      double v15 = v53.f64[0];
    }
    double v21 = fabs(v15);
    double v22 = fabs(v16);
    BOOL v23 = v21 > v22 && v21 > fabs(v54.f64[0]) && v21 > fabs(v54.f64[1]);
    v49[0] = v23;
    if (v22 <= v21)
    {
      BOOL v27 = 0;
      double v25 = v54.f64[1];
      double v24 = fabs(v54.f64[0]);
    }
    else
    {
      double v24 = fabs(v54.f64[0]);
      double v25 = v54.f64[1];
      BOOL v26 = v22 > fabs(v54.f64[1]);
      BOOL v27 = v22 > v24 && v26;
    }
    uint64_t v28 = 0;
    v49[1] = v27;
    BOOL v29 = v24 > v21;
    if (v24 <= v22) {
      BOOL v29 = 0;
    }
    double v30 = fabs(v25);
    if (v24 <= v30) {
      BOOL v29 = 0;
    }
    v49[2] = v29;
    BOOL v31 = v30 > v21;
    if (v30 <= v22) {
      BOOL v31 = 0;
    }
    if (v30 <= v24) {
      BOOL v31 = 0;
    }
    v49[3] = v31;
    if (a3) {
      char v32 = 30;
    }
    else {
      char v32 = 14;
    }
    double v33 = 0.5 / sqrt(v18) * (double)(1 << v32);
    v52[0] = 0;
    v52[1] = 0;
    long long v50 = 0u;
    long long v51 = 0u;
    do
    {
      double v34 = v33 * v53.f64[v28];
      unint64_t v35 = llround(v34);
      if (v49[v28]) {
        unint64_t v36 = (int)v34;
      }
      else {
        unint64_t v36 = v35;
      }
      *((_DWORD *)v52 + v28) = v36;
      *((void *)&v50 + v28++) = v36 * v36;
    }
    while (v28 != 4);
    uint64_t v37 = 1 << (2 * v32);
    uint64_t v38 = v37 - v51 - (v50 + *((void *)&v50 + 1));
    if ((v38 & 0x8000000000000000) == 0)
    {
      uint64_t v39 = 1 << (v32 + 7);
      if (v38 - *((void *)&v51 + 1) >= -v39 && v38 - *((void *)&v51 + 1) <= v39) {
        goto LABEL_58;
      }
    }
    uint64_t v41 = 0;
    double v42 = sqrt((double)(uint64_t)v50 / (double)(unint64_t)v37+ (double)*((uint64_t *)&v50 + 1) / (double)(unint64_t)v37+ (double)(uint64_t)v51 / (double)(unint64_t)v37+ (double)*((uint64_t *)&v51 + 1) / (double)(unint64_t)v37);
    uint64_t v43 = v37;
    do
    {
      unsigned int v44 = llround(v33 * v53.f64[v41] / v42);
      *((_DWORD *)v52 + v41) = v44;
      v43 -= v44 * v44;
      ++v41;
    }
    while (v41 != 3);
    if ((v43 & 0x8000000000000000) == 0) {
      goto LABEL_58;
    }
    for (uint64_t i = 0; i != 3; ++i)
    {
      double v46 = v33 * v53.f64[i] / v42;
      *((_DWORD *)v52 + i) = (int)v46;
      v37 -= ((int)v46 * (int)v46);
    }
    if (v37 < 0)
    {
      uint64_t appended = FigSignalErrorAt();
    }
    else
    {
LABEL_58:
      uint64_t v47 = 0;
      while (1)
      {
        uint64_t appended = FigCFArrayAppendInt32();
        if (appended) {
          break;
        }
        v47 += 4;
        if (v47 == 12)
        {
          uint64_t v19 = 0;
          *a4 = v10;
          return v19;
        }
      }
    }
    uint64_t v19 = appended;
LABEL_14:
    CFRelease(v10);
    return v19;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t CMPhotoCreateExtrinsicsPositionArrayFromExtrinsicsValues(const __CFAllocator *a1, int a2, int a3, int a4, __CFArray **a5)
{
  if (!a5) {
    return 0;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 3, MEMORY[0x1E4F1D510]);
  if (!Mutable) {
    return 4294950305;
  }
  CFMutableArrayRef v10 = Mutable;
  uint64_t appended = CMPhotoCFArrayAppendDouble(Mutable, (double)a2 / 1000000.0);
  if (appended || (uint64_t appended = CMPhotoCFArrayAppendDouble(v10, (double)a3 / 1000000.0), appended))
  {
    uint64_t v12 = appended;
    goto LABEL_9;
  }
  uint64_t v12 = CMPhotoCFArrayAppendDouble(v10, (double)a4 / 1000000.0);
  if (v12)
  {
LABEL_9:
    CFRelease(v10);
    return v12;
  }
  *a5 = v10;
  return v12;
}

uint64_t CMPhotoCreateIntrinsicsMatrixFromFigIntrinsicsDict(const __CFAllocator *a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, BOOL *a7, __CFArray **a8)
{
  if (!((unint64_t)a7 | (unint64_t)a8)) {
    return 0;
  }
  if (!cf) {
    return 4294950306;
  }
  CFTypeID v15 = CFGetTypeID(cf);
  if (v15 != CFDictionaryGetTypeID()) {
    return 4294950306;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 3, MEMORY[0x1E4F1D510]);
  if (!Mutable) {
    return 4294950305;
  }
  double v17 = Mutable;
  int v38 = 0;
  if (!FigCFDictionaryGetIntIfPresent()) {
    goto LABEL_44;
  }
  int v37 = 0;
  if (!FigCFDictionaryGetInt32IfPresent()) {
    goto LABEL_44;
  }
  int v36 = 0;
  if (!FigCFDictionaryGetInt32IfPresent()) {
    goto LABEL_44;
  }
  int v35 = 0;
  if (!FigCFDictionaryGetInt32IfPresent()) {
    goto LABEL_44;
  }
  unint64_t v18 = 1 << v38;
  char v34 = 0;
  uint64_t v19 = cmpweak_kFigCameraIntrinsics_OfficialBox();
  CMPhotoCFDictionaryGetBooleanIfPresent((CFDictionaryRef)cf, v19, &v34);
  if (v34)
  {
    uint64_t v20 = a5;
  }
  else
  {
    a6 = a4;
    uint64_t v20 = a3;
  }
  uint64_t v22 = v36;
  uint64_t v21 = v37;
  uint64_t v23 = v35;
  BOOL v25 = v18 >> 1 == v36 && v18 >> 1 == v35;
  if (FigCFDictionaryGetInt32IfPresent())
  {
    if (FigCFDictionaryGetInt32IfPresent())
    {
      double v26 = (double)0 / (double)1uLL;
      goto LABEL_22;
    }
LABEL_44:
    uint64_t v31 = 4294950306;
    goto LABEL_41;
  }
  double v26 = 0.0;
LABEL_22:
  double v27 = (double)v18;
  double v28 = (double)(unint64_t)(v20 * v21) / (double)v18;
  if (FigCFDictionaryGetInt32IfPresent())
  {
    double v29 = (double)0 / v27;
    if (v29 != v28) {
      BOOL v25 = 0;
    }
  }
  else
  {
    double v29 = (double)(unint64_t)(v20 * v21) / (double)v18;
  }
  uint64_t appended = CMPhotoCFArrayAppendDouble(v17, v28);
  if (appended) {
    goto LABEL_43;
  }
  uint64_t appended = CMPhotoCFArrayAppendDouble(v17, v26);
  if (appended
    || (uint64_t appended = CMPhotoCFArrayAppendDouble(v17, (double)(unint64_t)(v20 * v22) / v27), appended)
    || (uint64_t appended = CMPhotoCFArrayAppendDouble(v17, 0.0), appended)
    || (uint64_t appended = CMPhotoCFArrayAppendDouble(v17, v29), appended)
    || (uint64_t appended = CMPhotoCFArrayAppendDouble(v17, (double)(unint64_t)(a6 * v23) / v27), appended)
    || (uint64_t appended = CMPhotoCFArrayAppendDouble(v17, 0.0), appended)
    || (uint64_t appended = CMPhotoCFArrayAppendDouble(v17, 0.0), appended)
    || (uint64_t appended = CMPhotoCFArrayAppendDouble(v17, 1.0), appended))
  {
LABEL_43:
    uint64_t v31 = appended;
    goto LABEL_41;
  }
  if (a7) {
    *a7 = v25;
  }
  if (!a8)
  {
    uint64_t v31 = 0;
LABEL_41:
    CFRelease(v17);
    return v31;
  }
  uint64_t v31 = 0;
  *a8 = v17;
  return v31;
}

uint64_t CMPhotoCreateRotationMatrixFromQuaternionArray(const __CFAllocator *a1, const void *a2, int a3, __CFArray **a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (!a4) {
    return 0;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 9, MEMORY[0x1E4F1D510]);
  if (!Mutable) {
    return 4294950305;
  }
  CFDictionaryRef v9 = Mutable;
  if (a2)
  {
    CFTypeID v10 = CFGetTypeID(a2);
    if (v10 == CFArrayGetTypeID() && CFArrayGetCount((CFArrayRef)a2) == 3)
    {
      uint64_t v11 = 0;
      int v22 = 0;
      uint64_t valuePtr = 0;
      p_uint64_t valuePtr = &valuePtr;
      while (FigCFArrayGetInt32AtIndex())
      {
        ++v11;
        p_uint64_t valuePtr = (uint64_t *)((char *)p_valuePtr + 4);
        if (v11 == 3)
        {
          double v13 = 16384.0;
          if (a3) {
            double v13 = 1073741820.0;
          }
          if ((double)(int)valuePtr / v13 * ((double)(int)valuePtr / v13)
             + (double)SHIDWORD(valuePtr) / v13 * ((double)SHIDWORD(valuePtr) / v13)
             + (double)v22 / v13 * ((double)v22 / v13) <= 1.00001)
          {
            FigCFArrayAppendDouble();
            FigCFArrayAppendDouble();
            FigCFArrayAppendDouble();
            FigCFArrayAppendDouble();
            FigCFArrayAppendDouble();
            FigCFArrayAppendDouble();
            FigCFArrayAppendDouble();
            FigCFArrayAppendDouble();
            FigCFArrayAppendDouble();
            uint64_t v14 = 0;
            *a4 = v9;
            return v14;
          }
          break;
        }
      }
    }
    uint64_t v14 = FigSignalErrorAt();
    CFNumberRef v15 = 0;
  }
  else
  {
    uint64_t valuePtr = 0;
    CFNumberRef v15 = CFNumberCreate(a1, kCFNumberDoubleType, &valuePtr);
    if (v15 && (uint64_t valuePtr = 0x3FF0000000000000, (v16 = CFNumberCreate(a1, kCFNumberDoubleType, &valuePtr)) != 0))
    {
      CFNumberRef v17 = v16;
      for (int i = 0; i != 9; ++i)
      {
        if ((i & 3) != 0) {
          CFNumberRef v19 = v15;
        }
        else {
          CFNumberRef v19 = v17;
        }
        CFArrayAppendValue(v9, v19);
      }
      uint64_t v14 = 0;
      *a4 = v9;
      CFDictionaryRef v9 = v17;
    }
    else
    {
      uint64_t v14 = 4294950305;
    }
  }
  CFRelease(v9);
  if (v15) {
    CFRelease(v15);
  }
  return v14;
}

uint64_t CMPhotoCompressDataWithContentEncoding(const __CFAllocator *a1, CFDataRef theData, uint64_t a3, __CFData **a4)
{
  uint64_t result = 4294950306;
  if (!theData || !a3 || !a4) {
    return result;
  }
  CFIndex Length = CFDataGetLength(theData);
  int v9 = FigCFEqual();
  if (v9)
  {
    Length += 6;
    compression_algorithm v10 = COMPRESSION_ZLIB;
    goto LABEL_8;
  }
  if (FigCFEqual())
  {
    compression_algorithm v10 = COMPRESSION_BROTLI;
LABEL_8:
    CFMutableArrayRef Mutable = CFDataCreateMutable(a1, Length);
    if (!Mutable) {
      return 4294950305;
    }
    uint64_t v12 = Mutable;
    CFDataSetLength(Mutable, Length);
    Mutableunsigned __int8 BytePtr = CFDataGetMutableBytePtr(v12);
    uint64_t v14 = MutableBytePtr;
    if (v9)
    {
      *(_WORD *)Mutableunsigned __int8 BytePtr = -25480;
      uint64_t v14 = MutableBytePtr + 2;
      unsigned __int8 BytePtr = CFDataGetBytePtr(theData);
      uInt v16 = CFDataGetLength(theData);
      unsigned int v17 = adler32(1uLL, BytePtr, v16);
      Length -= 6;
    }
    else
    {
      unsigned int v17 = 0;
    }
    unint64_t v18 = CFDataGetBytePtr(theData);
    size_t v19 = CFDataGetLength(theData);
    size_t v20 = compression_encode_buffer(v14, Length, v18, v19, 0, v10);
    CFIndex v21 = v20;
    if (v20)
    {
      if (v9)
      {
        *(_DWORD *)&v14[v20] = bswap32(v17);
        CFIndex v21 = v20 + 6;
      }
      CFDataSetLength(v12, v21);
      uint64_t result = 0;
      *a4 = v12;
    }
    else
    {
      uint64_t v22 = FigSignalErrorAt();
      CFRelease(v12);
      return v22;
    }
    return result;
  }
  return FigSignalErrorAt();
}

uint64_t CMPhotoCreateMdcvDictionary(const __CFData *a1, const __CFAllocator *a2, __CFDictionary **a3)
{
  uint64_t v3 = 4294950306;
  if (a1 && a3)
  {
    if (CFDataGetLength(a1) != 24) {
      return 4294950194;
    }
    unsigned __int8 BytePtr = CFDataGetBytePtr(a1);
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(a2, 10, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!Mutable) {
      return 4294950305;
    }
    int v9 = Mutable;
    uint64_t v10 = CMPhotoCFDictionarySetInt32(Mutable, @"DisplayPrimariesXG", bswap32(*(unsigned __int16 *)BytePtr) >> 16);
    if (v10) {
      goto LABEL_17;
    }
    uint64_t v10 = CMPhotoCFDictionarySetInt32(v9, @"DisplayPrimariesYG", bswap32(*((unsigned __int16 *)BytePtr + 1)) >> 16);
    if (v10
      || (uint64_t v10 = CMPhotoCFDictionarySetInt32(v9, @"DisplayPrimariesXB", bswap32(*((unsigned __int16 *)BytePtr + 2)) >> 16), v10)|| (uint64_t v10 = CMPhotoCFDictionarySetInt32(v9, @"DisplayPrimariesYB", bswap32(*((unsigned __int16 *)BytePtr + 3)) >> 16), v10)|| (uint64_t v10 = CMPhotoCFDictionarySetInt32(v9, @"DisplayPrimariesXR", bswap32(*((unsigned __int16 *)BytePtr + 4)) >> 16), v10)|| (uint64_t v10 = CMPhotoCFDictionarySetInt32(v9, @"DisplayPrimariesYR", bswap32(*((unsigned __int16 *)BytePtr + 5)) >> 16), v10)
      || (uint64_t v10 = CMPhotoCFDictionarySetInt32(v9, @"WhitePointX", bswap32(*((unsigned __int16 *)BytePtr + 6)) >> 16),
          v10)
      || (uint64_t v10 = CMPhotoCFDictionarySetInt32(v9, @"WhitePointY", bswap32(*((unsigned __int16 *)BytePtr + 7)) >> 16),
          v10)
      || (uint64_t v10 = CMPhotoCFDictionarySetInt32(v9, @"MaxDisplayMasteringLuminance", bswap32(*((_DWORD *)BytePtr + 4))), v10))
    {
LABEL_17:
      uint64_t v3 = v10;
    }
    else
    {
      uint64_t v3 = CMPhotoCFDictionarySetInt32(v9, @"MinDisplayMasteringLuminance", bswap32(*((_DWORD *)BytePtr + 5)));
      if (!v3)
      {
        *a3 = v9;
        return v3;
      }
    }
    CFRelease(v9);
  }
  return v3;
}

uint64_t CMPhotoCreateCclvDictionary(const __CFData *a1, const __CFAllocator *a2, __CFDictionary **a3)
{
  uint64_t v3 = 4294950306;
  if (a1 && a3)
  {
    if (CFDataGetLength(a1) < 2) {
      return 4294950194;
    }
    unsigned __int8 BytePtr = CFDataGetBytePtr(a1);
    uint64_t v8 = (((*BytePtr << 26 >> 31) & 0x18) + ((*BytePtr >> 1) & 4) + ((*BytePtr >> 2) & 4) + (*BytePtr & 4)) | 1u;
    if (CFDataGetLength(a1) != v8) {
      return 4294950194;
    }
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(a2, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!Mutable) {
      return 4294950305;
    }
    uint64_t v10 = Mutable;
    if ((*BytePtr & 0x20) != 0)
    {
      uint64_t v12 = CMPhotoCFDictionarySetInt32(Mutable, @"ContentPrimariesXG", bswap32(*(_DWORD *)(BytePtr + 1)));
      if (v12) {
        goto LABEL_23;
      }
      uint64_t v12 = CMPhotoCFDictionarySetInt32(v10, @"ContentPrimariesYG", bswap32(*(_DWORD *)(BytePtr + 5)));
      if (v12) {
        goto LABEL_23;
      }
      uint64_t v12 = CMPhotoCFDictionarySetInt32(v10, @"ContentPrimariesXB", bswap32(*(_DWORD *)(BytePtr + 9)));
      if (v12) {
        goto LABEL_23;
      }
      uint64_t v12 = CMPhotoCFDictionarySetInt32(v10, @"ContentPrimariesYB", bswap32(*(_DWORD *)(BytePtr + 13)));
      if (v12) {
        goto LABEL_23;
      }
      uint64_t v12 = CMPhotoCFDictionarySetInt32(v10, @"ContentPrimariesXR", bswap32(*(_DWORD *)(BytePtr + 17)));
      if (v12) {
        goto LABEL_23;
      }
      uint64_t v12 = CMPhotoCFDictionarySetInt32(v10, @"ContentPrimariesYR", bswap32(*(_DWORD *)(BytePtr + 21)));
      if (v12) {
        goto LABEL_23;
      }
      unsigned int v11 = 6;
      if (!*BytePtr)
      {
LABEL_21:
        uint64_t v3 = 0;
        *a3 = v10;
        return v3;
      }
    }
    else
    {
      unsigned int v11 = 0;
      if (!*BytePtr) {
        goto LABEL_21;
      }
    }
    uint64_t v12 = CMPhotoCFDictionarySetInt32(v10, @"ContentMinLuminanceValue", bswap32(*(_DWORD *)&BytePtr[4 * v11 + 1]));
    if (!v12)
    {
      if (!*BytePtr) {
        goto LABEL_21;
      }
      uint64_t v12 = CMPhotoCFDictionarySetInt32(v10, @"ContentMaxLuminanceValue", bswap32(*(_DWORD *)&BytePtr[4 * (v11 | 1) + 1]));
      if (!v12)
      {
        if (!*BytePtr) {
          goto LABEL_21;
        }
        uint64_t v12 = CMPhotoCFDictionarySetInt32(v10, @"ContentAvgLuminanceValue", bswap32(*(_DWORD *)&BytePtr[4 * v11 + 9]));
        if (!v12) {
          goto LABEL_21;
        }
      }
    }
LABEL_23:
    uint64_t v3 = v12;
    CFRelease(v10);
  }
  return v3;
}

uint64_t CMPhotoCreateAmveDictionary(const __CFData *a1, const __CFAllocator *a2, __CFDictionary **a3)
{
  uint64_t v3 = 4294950306;
  if (a1 && a3)
  {
    if (CFDataGetLength(a1) != 8) {
      return 4294950194;
    }
    unsigned __int8 BytePtr = CFDataGetBytePtr(a1);
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(a2, 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!Mutable) {
      return 4294950305;
    }
    int v9 = Mutable;
    uint64_t v10 = CMPhotoCFDictionarySetInt32(Mutable, @"AmbientIlluminance", bswap32(*(_DWORD *)BytePtr));
    if (v10
      || (uint64_t v10 = CMPhotoCFDictionarySetInt32(v9, @"AmbientLightX", bswap32(*((unsigned __int16 *)BytePtr + 2)) >> 16), v10))
    {
      uint64_t v3 = v10;
    }
    else
    {
      uint64_t v3 = CMPhotoCFDictionarySetInt32(v9, @"AmbientLightY", bswap32(*((unsigned __int16 *)BytePtr + 3)) >> 16);
      if (!v3)
      {
        *a3 = v9;
        return v3;
      }
    }
    CFRelease(v9);
  }
  return v3;
}

__CFArray *CMPhotoArrayCreateDeepCopy(const __CFAllocator *a1, const __CFArray *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t Count = CFArrayGetCount(a2);
  CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, Count, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    uint64_t v6 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
    if (v6)
    {
      int v7 = v6;
      v16.locatiouint64_t n = 0;
      v16.int length = Count;
      CFArrayGetValues(a2, v16, v6);
      if (Count >= 1)
      {
        uint64_t v8 = v7;
        while (1)
        {
          CFTypeID v9 = CFGetTypeID(*v8);
          if (v9 == CFDictionaryGetTypeID()) {
            break;
          }
          CFTypeID v11 = CFGetTypeID(*v8);
          CFTypeID TypeID = CFArrayGetTypeID();
          CFTypeRef v13 = *v8;
          if (v11 != TypeID)
          {
            CFArrayAppendValue(Mutable, v13);
            goto LABEL_13;
          }
          DeepCopy = (const void *)CMPhotoArrayCreateDeepCopy(a1, v13);
          if (DeepCopy) {
            goto LABEL_11;
          }
LABEL_13:
          ++v8;
          if (!--Count) {
            goto LABEL_14;
          }
        }
        DeepCopy = (const void *)CMPhotoDictionaryCreateDeepCopy(a1, *v8);
        if (!DeepCopy) {
          goto LABEL_13;
        }
LABEL_11:
        uint64_t v14 = DeepCopy;
        CFArrayAppendValue(Mutable, DeepCopy);
        CFRelease(v14);
        goto LABEL_13;
      }
LABEL_14:
      free(v7);
    }
  }
  return Mutable;
}

uint64_t CMPhotoJPEGEncodeSessionGetTypeID()
{
  return sCMPhotoJPEGEncodeSessionID;
}

uint64_t fjes_register()
{
  sCMPhotoJPEGEncodeSessionClass = 0;
  *(void *)algn_1E98CFB98 = "CMPhotoJPEGEncodeSession";
  qword_1E98CFBA0 = (uint64_t)fjes_init;
  unk_1E98CFBA8 = 0;
  qword_1E98CFBB8 = 0;
  unk_1E98CFBC0 = 0;
  qword_1E98CFBB0 = (uint64_t)fjes_finalize;
  qword_1E98CFBC8 = (uint64_t)fjes_copyFormattingDesc;
  unk_1E98CFBD0 = 0;
  uint64_t result = _CFRuntimeRegisterClass();
  sCMPhotoJPEGEncodeSessionID = result;
  return result;
}

uint64_t CMPhotoJPEGEncodeSessionCreate(const __CFAllocator *a1, uint64_t a2, uint64_t *a3)
{
  if (!a3) {
    return 4294950306;
  }
  pthread_once(&CMPhotoJPEGEncodeSessionGetTypeID_sRegisterCMPhotoJPEGEncodeSessionOnce, (void (*)(void))fjes_register);
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance) {
    return 4294950305;
  }
  uint64_t v6 = Instance;
  int v7 = JPEGDeviceInterface_numberOfJPEGCores();
  *(_DWORD *)(v6 + 16) = v7;
  *(_DWORD *)(v6 + 32) = 0;
  *(void *)(v6 + 40) = dispatch_semaphore_create(v7);
  CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, *(int *)(v6 + 16), 0);
  *(void *)(v6 + 24) = Mutable;
  if (!Mutable)
  {
    uint64_t v11 = 4294950305;
LABEL_11:
    CFRelease((CFTypeRef)v6);
    return v11;
  }
  if (*(int *)(v6 + 16) >= 1)
  {
    int v9 = 0;
    while (1)
    {
      unsigned int v10 = JPEGDeviceInterface_openDriverConnection();
      if (!v10) {
        break;
      }
      CFArrayAppendValue(*(CFMutableArrayRef *)(v6 + 24), (const void *)v10);
      if (++v9 >= *(_DWORD *)(v6 + 16)) {
        goto LABEL_8;
      }
    }
    uint64_t v11 = FigSignalErrorAt();
    goto LABEL_11;
  }
LABEL_8:
  uint64_t v11 = 0;
  *a3 = v6;
  return v11;
}

uint64_t CMPhotoJPEGEncodeSessionCreateJPEGSbufFromBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a1) {
    return 4294950306;
  }
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 40), 0xFFFFFFFFFFFFFFFFLL);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 32));
  CFArrayRef v10 = *(const __CFArray **)(a1 + 24);
  if (!v10 || CFArrayGetCount(v10) < 1)
  {
    uint64_t JPEGSbufFromBuffer = 4294950306;
    goto LABEL_7;
  }
  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 0);
  CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 24), 0);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 32));
  uint64_t JPEGSbufFromBuffer = CMPhotoJPEGCachedConnectionCreateJPEGSbufFromBuffer(ValueAtIndex, a2, a3, a4, a5);
  if (ValueAtIndex)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 32));
    CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(a1 + 24), 0, (const void *)ValueAtIndex);
LABEL_7:
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 32));
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
  }
  return JPEGSbufFromBuffer;
}

double fjes_init(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void fjes_finalize(uint64_t a1)
{
  int v2 = (os_unfair_lock_s *)(a1 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 32));
  CFArrayRef v3 = *(const __CFArray **)(a1 + 24);
  if (v3)
  {
    CFIndex v4 = 0;
    while (1)
    {
      CFIndex Count = CFArrayGetCount(v3);
      CFArrayRef v6 = *(const __CFArray **)(a1 + 24);
      if (Count <= v4) {
        break;
      }
      ValueAtIndex = CFArrayGetValueAtIndex(v6, v4);
      JPEGDeviceInterface_closeDriverConnection((uint64_t)ValueAtIndex);
      ++v4;
      CFArrayRef v3 = *(const __CFArray **)(a1 + 24);
      if (!v3) {
        goto LABEL_8;
      }
    }
    if (v6)
    {
      CFRelease(v6);
      *(void *)(a1 + 24) = 0;
    }
  }
LABEL_8:
  os_unfair_lock_unlock(v2);
  uint64_t v8 = *(NSObject **)(a1 + 40);
  if (v8)
  {
    dispatch_release(v8);
  }
}

CFTypeRef fjes_copyFormattingDesc()
{
  return CFRetain(@"[CMPhotoJPEGEncodeSession]");
}

uint64_t CMPhotoUnifiedJPEGDecoderPrepare(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return _prepare(a1, a2, a4, a5, a7, 1, a8, 0);
}

uint64_t CMPhotoUnifiedJPEGDecoderCreateClone(uint64_t a1, uint64_t a2, void *a3)
{
  CFTypeID v5 = *(const void **)a1;
  CFAllocatorRef v6 = *(const __CFAllocator **)(a1 + 8);
  int v7 = *(const void **)(a1 + 16);
  int v8 = *(_DWORD *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v11 = *(void *)(a1 + 24);
  uint64_t v12 = *(void *)(a1 + 32);
  CFTypeRef v13 = *(const void **)(a1 + 40);
  uint64_t v21 = 0;
  uint64_t v14 = CMPhotoUnifiedJPEGDecoderCreate(v5, v6, v9, v10, v7, v11, v12, v13, v8, &v21);
  uint64_t v15 = v21;
  if (v14)
  {
    uint64_t v19 = v14;
    goto LABEL_11;
  }
  uint64_t SWDecoderIfNeeded = _createSWDecoderIfNeeded(v21, 0);
  if (SWDecoderIfNeeded)
  {
    uint64_t v19 = SWDecoderIfNeeded;
    uint64_t v15 = v21;
    goto LABEL_11;
  }
  if (*(void *)(a1 + 72))
  {
    int v22 = 16;
    int v23 = 1;
    int ra_table_sz = applejpeg_decode_get_ra_table_sz();
    if (ra_table_sz < 1)
    {
      unint64_t v18 = 0;
    }
    else
    {
      unint64_t v18 = malloc_type_malloc(ra_table_sz, 0x7F70CCC0uLL);
      if (!v18 || !applejpeg_decode_dump_ra_table() && !applejpeg_decode_set_ra_table()) {
        goto LABEL_10;
      }
    }
    FigSignalErrorAt();
  }
  else
  {
    unint64_t v18 = 0;
  }
LABEL_10:
  free(v18);
  uint64_t v15 = 0;
  uint64_t v19 = 0;
  *a3 = v21;
  uint64_t v21 = 0;
LABEL_11:
  CMPhotoUnifiedJPEGDecoderDestroy(v15);
  return v19;
}

uint64_t _createSWDecoderIfNeeded(uint64_t a1, int a2)
{
  dataPointerOut = 0;
  CFIndex v33 = 0;
  long long v30 = xmmword_1F02DE3F8;
  uint64_t v31 = qword_1F02DE408;
  if (*(void *)(a1 + 72))
  {
    CFDataRef DataWrappingIOSurface = 0;
    uint64_t v20 = 0;
    goto LABEL_52;
  }
  int v4 = *(_DWORD *)(a1 + 48);
  switch(v4)
  {
    case 1:
      CFDataRef DataWrappingIOSurface = *(const __CFData **)(a1 + 88);
      if (!DataWrappingIOSurface) {
        CFDataRef DataWrappingIOSurface = *(const __CFData **)(a1 + 40);
      }
LABEL_12:
      dataPointerOut = (char *)CFDataGetBytePtr(DataWrappingIOSurface);
      CFIndex Length = CFDataGetLength(DataWrappingIOSurface);
      CFDataRef DataWrappingIOSurface = 0;
      CFIndex v33 = Length;
      int v4 = 1;
      int IsRangeContiguous = 1;
      goto LABEL_33;
    case 2:
      CFAllocatorRef v6 = *(void **)(a1 + 40);
      CFDataRef DataWrappingIOSurface = (const __CFData *)malloc_type_calloc(1uLL, 0x30uLL, 0x10200401705F15EuLL);
      if (!DataWrappingIOSurface)
      {
LABEL_56:
        uint64_t v20 = 4294950305;
        goto LABEL_52;
      }
      if (v6) {
        CFTypeRef v7 = CFRetain(v6);
      }
      else {
        CFTypeRef v7 = 0;
      }
      *(void *)CFDataRef DataWrappingIOSurface = v7;
      DataCFIndex Length = CMBlockBufferGetDataLength((CMBlockBufferRef)v6);
      *((void *)DataWrappingIOSurface + 5) = DataLength;
      int IsRangeContiguous = CMBlockBufferIsRangeContiguous(*(CMBlockBufferRef *)(a1 + 40), 0, DataLength);
      uint64_t DataPointer = CMBlockBufferGetDataPointer(*(CMBlockBufferRef *)(a1 + 40), 0, (size_t *)&v33, 0, &dataPointerOut);
      if (DataPointer)
      {
        uint64_t v20 = DataPointer;
        goto LABEL_52;
      }
      int v4 = 2;
LABEL_33:
      int v22 = (_DWORD *)MEMORY[0x1E4F1EBA8];
      if (*MEMORY[0x1E4F1EBA8] == 1) {
        kdebug_trace();
      }
      uint64_t v23 = applejpeg_decode_create();
      if (*v22 == 1) {
        kdebug_trace();
      }
      applejpeg_decode_set_parse_option_use_first_sof();
      if (*v22 == 1) {
        kdebug_trace();
      }
      if (IsRangeContiguous)
      {
        int v24 = applejpeg_decode_open_mem();
      }
      else
      {
        BOOL v25 = _applejpeg_read_stream;
        if (v4 == 2) {
          BOOL v25 = _applejpeg_read_bbuf;
        }
        v29[0] = v25;
        v29[1] = 0;
        void v29[2] = _applejpeg_skip;
        v29[3] = _applejpeg_rewind;
        v29[4] = DataWrappingIOSurface;
        v29[5] = 0;
        v29[6] = *((void *)DataWrappingIOSurface + 5);
        int v24 = applejpeg_decode_open_file();
      }
      int v26 = v24;
      if (*v22 == 1) {
        kdebug_trace();
      }
      if (v26)
      {
        int image_info = v26;
      }
      else
      {
        int image_info = applejpeg_decode_get_image_info();
        if (!image_info)
        {
          *(_DWORD *)(a1 + 140) = applejpeg_decode_get_precision();
          *(_DWORD *)(a1 + 136) = applejpeg_decode_get_chroma_subsampling();
          if (a2)
          {
            applejpeg_decode_set_option_buildindex();
            applejpeg_decode_build_index();
          }
          uint64_t v20 = 0;
          *(void *)(a1 + 72) = v23;
          *(void *)(a1 + 80) = DataWrappingIOSurface;
          goto LABEL_51;
        }
      }
      uint64_t v20 = CMPhotoAppleJPEGErrorToCMPhotoError(image_info);
      goto LABEL_52;
    case 4:
      CFDataRef DataWrappingIOSurface = CMPhotoCreateDataWrappingIOSurface(*(const __CFAllocator **)(a1 + 8), *(IOSurfaceRef *)(a1 + 40), 0, 0);
      *(void *)(a1 + 88) = DataWrappingIOSurface;
      if (!DataWrappingIOSurface) {
        goto LABEL_56;
      }
      goto LABEL_12;
  }
  uint64_t v11 = *(const void **)(a1 + 16);
  uint64_t v10 = *(void *)(a1 + 24);
  unint64_t v12 = *(void *)(a1 + 32);
  CFDataRef DataWrappingIOSurface = (const __CFData *)malloc_type_calloc(1uLL, 0x30uLL, 0x10200401705F15EuLL);
  if (!DataWrappingIOSurface)
  {
    uint64_t v20 = 4294950305;
    goto LABEL_26;
  }
  v29[0] = 0;
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  unsigned int v17 = *(uint64_t (**)(const void *, uint64_t, void *))(v14 + 24);
  if (!v17)
  {
    uint64_t v20 = 4294954514;
    goto LABEL_26;
  }
  uint64_t v18 = v17(v11, v10, v29);
  if (v18)
  {
    uint64_t v20 = v18;
    goto LABEL_26;
  }
  unint64_t v19 = v29[0];
  if (v10 | v12)
  {
    unint64_t v19 = v12;
    if (v29[0] < v12)
    {
      uint64_t v20 = 4294950194;
      goto LABEL_26;
    }
    goto LABEL_29;
  }
  if ((v29[0] & 0x8000000000000000) == 0)
  {
LABEL_29:
    if (v11) {
      CFTypeRef v21 = CFRetain(v11);
    }
    else {
      CFTypeRef v21 = 0;
    }
    *((void *)DataWrappingIOSurface + 1) = v21;
    *((void *)DataWrappingIOSurface + 2) = v10;
    *((void *)DataWrappingIOSurface + 3) = v19;
    *((void *)DataWrappingIOSurface + 5) = v19;
    InputWrapper_destroy(0);
    int IsRangeContiguous = 0;
    goto LABEL_33;
  }
  uint64_t v20 = 4294950190;
LABEL_26:
  InputWrapper_destroy((const void **)DataWrappingIOSurface);
LABEL_51:
  CFDataRef DataWrappingIOSurface = 0;
LABEL_52:
  applejpeg_decode_destroy();
  InputWrapper_destroy((const void **)DataWrappingIOSurface);
  return v20;
}

void *_applejpeg_alloc(size_t a1)
{
  return malloc_type_malloc(a1, 0xC914A812uLL);
}

uint64_t _applejpeg_read_bbuf(char *a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 4294967294;
  }
  uint64_t v4 = a2;
  size_t v5 = (int)a2;
  size_t v6 = *(void *)(a3 + 32);
  if (*(void *)(a3 + 40) - v6 >= v5) {
    size_t v7 = v5;
  }
  else {
    size_t v7 = *(void *)(a3 + 40) - v6;
  }
  if (v7)
  {
    size_t v11 = 0;
    dataPointerOut = 0;
    while (!CMBlockBufferGetDataPointer(*(CMBlockBufferRef *)a3, v6, &v11, 0, &dataPointerOut))
    {
      size_t v9 = v7 >= v11 ? v11 : v7;
      if (!v9) {
        break;
      }
      memcpy(a1, dataPointerOut, v9);
      a1 += v9;
      size_t v6 = *(void *)(a3 + 32) + v9;
      *(void *)(a3 + 32) = v6;
      v7 -= v9;
      if (!v7) {
        return v4;
      }
    }
    return 4294967294;
  }
  return v4;
}

uint64_t _applejpeg_read_stream(uint64_t a1, int a2, void *a3)
{
  if (!a3) {
    return 4294967294;
  }
  uint64_t v4 = a3[4];
  if (a3[5] - v4 >= (unint64_t)a2) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = a3[5] - v4;
  }
  if (!v5) {
    return 4294967294;
  }
  uint64_t v7 = a3[1];
  uint64_t v8 = a3[2];
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v10 = v9 ? v9 : 0;
  size_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(v10 + 8);
  if (!v11) {
    return 4294967294;
  }
  uint64_t v13 = 0;
  if (v11(v7, v5, v8 + v4, a1, &v13)) {
    return 4294967294;
  }
  uint64_t result = v13;
  if (!v13) {
    return 4294967294;
  }
  a3[4] += v13;
  return result;
}

uint64_t _applejpeg_skip(int a1, uint64_t a2)
{
  if (!a2) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v2 = *(void *)(a2 + 32) + a1;
  if (v2 >= *(void *)(a2 + 40))
  {
    if (FigSignalErrorAt()) {
      return 0xFFFFFFFFLL;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t result = 0;
    *(void *)(a2 + 32) = v2;
  }
  return result;
}

uint64_t _applejpeg_rewind(uint64_t a1)
{
  if (a1) {
    *(void *)(a1 + 32) = 0;
  }
  return 0;
}

uint64_t CMPhotoSupportsHEVCHWEncode()
{
  if (CMPhotoSupportsHEVCHWEncode_onceToken != -1) {
    dispatch_once(&CMPhotoSupportsHEVCHWEncode_onceToken, &__block_literal_global_7);
  }
  return CMPhotoSupportsHEVCHWEncode_hwSupported;
}

void __CMPhotoSupportsHEVCHWEncode_block_invoke()
{
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  v0 = (void *)*MEMORY[0x1E4F45648];
  values = (void *)*MEMORY[0x1E4F1CFD0];
  keys[0] = v0;
  CFDictionaryRef v1 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v1)
  {
    CFDictionaryRef v2 = v1;
    CMPhotoSupportsHEVCHWEncode_hwSupported = VTSelectAndCreateVideoEncoderInstance() == 0;
    CFRelease(v2);
  }
}

uint64_t CMPhotoMutableDataWriteStreamCreate(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return CFWriteStreamCreate();
  }
  else {
    return 0;
  }
}

CFTypeRef _streamCreate(int a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  return cf;
}

void _streamFinalize(int a1, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

__CFString *_streamCopyDescription()
{
  return @"CMPhotoMutableDataWriteStream";
}

uint64_t _streamOpen(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  *a3 = 1;
  return 1;
}

uint64_t _streamOpenCompleted()
{
  return 1;
}

CFIndex _streamWrite(int a1, const UInt8 *a2, CFIndex a3, int a4, CFMutableDataRef theData)
{
  return a3;
}

uint64_t _streamCanWrite()
{
  return 1;
}

uint64_t CMPhotoJPEGQualityControllerDecrementQuality(long long *a1, _OWORD *a2)
{
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v2 = 4294950306;
  if (!a1 || !a2) {
    goto LABEL_21;
  }
  uint64_t v5 = 0;
  while (_jpegQualityLevels[v5] <= *((float *)a1 + 12))
  {
    if (++v5 == 20) {
      goto LABEL_8;
    }
  }
  if ((int)v5 < 1)
  {
LABEL_20:
    uint64_t v2 = FigSignalErrorAt();
    goto LABEL_21;
  }
LABEL_8:
  long long v6 = a1[3];
  long long v19 = a1[2];
  long long v20 = v6;
  long long v21 = a1[4];
  unint64_t v7 = *((void *)a1 + 10);
  long long v8 = a1[1];
  long long v17 = *a1;
  long long v18 = v8;
  long long v22 = v7;
  CFTypeRef v9 = (CFTypeRef)*((void *)a1 + 7);
  if (v9) {
    CFTypeRef v9 = CFRetain(v9);
  }
  *((void *)&v20 + 1) = v9;
  unsigned int v10 = *((_DWORD *)a1 + 5);
  if (v10 > 0xA || ((1 << v10) & 0x418) == 0) {
    goto LABEL_20;
  }
  int v11 = v5 - 3;
  if (v5 == 20) {
    int v11 = 19;
  }
  if (v11 < 1)
  {
    float v12 = 0.01;
  }
  else
  {
    float v12 = 1.0;
    if (v11 <= 0x13) {
      float v12 = (_jpegQualityLevels[v11 - 1] + _jpegQualityLevels[v11]) * 0.5;
    }
  }
  uint64_t v2 = _parseQualityParameters_QValue_float((uint64_t)&v17, v12);
  if (!v2)
  {
    long long v13 = v20;
    a2[2] = v19;
    a2[3] = v13;
    long long v14 = v22;
    a2[4] = v21;
    a2[5] = v14;
    long long v15 = v18;
    *a2 = v17;
    a2[1] = v15;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
  }
LABEL_21:
  CMPhotoJPEGQualitySettingsReleaseStorage(&v17);
  return v2;
}

uint64_t CMPhotoJPEGQualityControllerDecrementByteBudgetQualityGivenSize(long long *a1, unint64_t a2, int a3, _OWORD *a4)
{
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  uint64_t v4 = 4294950306;
  if (!a1 || !a2 || !a4 || *((_DWORD *)a1 + 5) != 10) {
    goto LABEL_18;
  }
  uint64_t v9 = 0;
  double v10 = *((float *)a1 + 12);
  while (_jpegQualityLevels[v9] <= v10)
  {
    if (++v9 == 20) {
      goto LABEL_10;
    }
  }
  if ((int)v9 <= 0)
  {
LABEL_19:
    uint64_t v4 = FigSignalErrorAt();
    goto LABEL_18;
  }
LABEL_10:
  long long v11 = a1[3];
  long long v25 = a1[2];
  long long v26 = v11;
  long long v27 = a1[4];
  unint64_t v12 = *((void *)a1 + 10);
  long long v13 = a1[1];
  long long v23 = *a1;
  long long v24 = v13;
  long long v28 = v12;
  CFTypeRef v14 = (CFTypeRef)*((void *)a1 + 7);
  if (v14)
  {
    CFTypeRef v14 = CFRetain(v14);
    double v10 = *((float *)a1 + 12);
  }
  *((void *)&v26 + 1) = v14;
  if (a3 == 2) {
    long long v15 = &_relativeSizeHW;
  }
  else {
    long long v15 = &_relativeSizeSW;
  }
  char v22 = 0;
  double v16 = _estimateNewQuality(a2, *((void *)a1 + 5), (uint64_t)v15, &v22, v10);
  if (!v22) {
    goto LABEL_19;
  }
  float v17 = v16;
  uint64_t v4 = _parseQualityParameters_QValue_float((uint64_t)&v23, v17);
  if (!v4)
  {
    long long v18 = v26;
    a4[2] = v25;
    a4[3] = v18;
    long long v19 = v28;
    a4[4] = v27;
    a4[5] = v19;
    long long v20 = v24;
    *a4 = v23;
    a4[1] = v20;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
  }
LABEL_18:
  CMPhotoJPEGQualitySettingsReleaseStorage(&v23);
  return v4;
}

uint64_t _copyQTableFromData(const void *a1, _OWORD *a2)
{
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 == CFDataGetTypeID() && CFDataGetLength((CFDataRef)a1) == 64)
  {
    unsigned __int8 BytePtr = CFDataGetBytePtr((CFDataRef)a1);
    long long v6 = *((_OWORD *)BytePtr + 3);
    long long v8 = *(_OWORD *)BytePtr;
    long long v7 = *((_OWORD *)BytePtr + 1);
    a2[2] = *((_OWORD *)BytePtr + 2);
    a2[3] = v6;
    *a2 = v8;
    a2[1] = v7;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t _copyFormatDescriptionForIndex_1(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  CFTypeRef cf = 0;
  uint64_t v20 = 0;
  if (!a4) {
    return 0;
  }
  uint64_t v7 = a1[6];
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  long long v11 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, void))(v9 + 16);
  if (!v11)
  {
LABEL_14:
    uint64_t v10 = 4294954514;
    goto LABEL_15;
  }
  uint64_t v12 = v11(v7, a2, &cf, 0);
  if (!v12)
  {
    CFAllocatorRef v13 = CFGetAllocator(a1);
    uint64_t FigBaseObject = FigPictureReaderGetFigBaseObject();
    uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v15) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    float v17 = *(uint64_t (**)(uint64_t, void, CFAllocatorRef, uint64_t *))(v16 + 48);
    if (v17)
    {
      uint64_t v10 = v17(FigBaseObject, *MEMORY[0x1E4F333D0], v13, &v20);
      if (!v10) {
        *a4 = v20;
      }
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  uint64_t v10 = v12;
LABEL_15:
  if (cf) {
    CFRelease(cf);
  }
  return v10;
}

uint64_t _getImageIdentifierForIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v7 + 16);
  if (!v8) {
    return 4294954514;
  }
  return v8(v5, a2, 0, a3);
}

uint64_t _getThumbnailCountForIndex_1(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  CFTypeRef cf = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v17 = 0;
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, void))(v8 + 16);
  if (!v9) {
    goto LABEL_13;
  }
  uint64_t v10 = v9(v6, a2, &cf, 0);
  uint64_t v11 = v10;
  if (!a4 || v10) {
    goto LABEL_14;
  }
  CFTypeRef v12 = cf;
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v14 = v13 ? v13 : 0;
  uint64_t v15 = *(uint64_t (**)(CFTypeRef, uint64_t *))(v14 + 16);
  if (!v15)
  {
LABEL_13:
    uint64_t v11 = 4294954514;
    goto LABEL_14;
  }
  uint64_t v11 = v15(v12, &v17);
  if (!v11) {
    *a4 = v17;
  }
LABEL_14:
  if (cf) {
    CFRelease(cf);
  }
  return v11;
}

uint64_t _createThumbnailImageForIndex_0(void *a1, uint64_t a2, uint64_t a3, CFDictionaryRef theDict, int a5, CFTypeRef *a6)
{
  CFTypeRef cf = 0;
  CFTypeRef v25 = 0;
  CFTypeRef v23 = 0;
  if (theDict && CFDictionaryContainsKey(theDict, @"UseProvidedPixelBuffer"))
  {
    uint64_t v16 = FigSignalErrorAt();
    goto LABEL_22;
  }
  uint64_t v12 = a1[6];
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, void))(v14 + 16);
  if (!v15) {
    goto LABEL_15;
  }
  uint64_t v16 = v15(v12, a2, &cf, 0);
  if (v16)
  {
LABEL_22:
    uint64_t v21 = v16;
    goto LABEL_16;
  }
  CFTypeRef v17 = cf;
  uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v19 = v18 ? v18 : 0;
  uint64_t v20 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *))(v19 + 24);
  if (!v20)
  {
LABEL_15:
    uint64_t v21 = 4294954514;
    goto LABEL_16;
  }
  uint64_t v16 = v20(v17, a3, &v23);
  if (v16) {
    goto LABEL_22;
  }
  uint64_t v21 = _decodeImage_1(a1, v23, cf, -1, theDict, 0, a5, 0, (CGImageRef *)&v25);
  if (v21)
  {
    if (v25) {
      CFRelease(v25);
    }
  }
  else
  {
    *a6 = v25;
    CFTypeRef v25 = 0;
  }
LABEL_16:
  if (cf) {
    CFRelease(cf);
  }
  if (v23) {
    CFRelease(v23);
  }
  return v21;
}

uint64_t _decodeThumbnailForIndexAsync_0(uint64_t *a1, uint64_t a2, uint64_t a3, CFDictionaryRef theDict, int a5, void *a6, uint64_t a7, uint64_t a8)
{
  return _decodeImageAsync(a1, a2, a3, 1, theDict, a5, a6, a7, a8);
}

CFDictionaryRef _decodeAuxiliaryImageForIndexAsync_0(uint64_t *a1, uint64_t a2, uint64_t a3, CFDictionaryRef theDict, int a5, void *a6, uint64_t a7, uint64_t a8)
{
  CFDictionaryRef result = _checkForbiddenAuxOptions_0(theDict);
  if (!result) {
    return (const __CFDictionary *)_decodeImageAsync(a1, a2, a3, 2, theDict, a5, a6, a7, a8);
  }
  return result;
}

uint64_t _cancelAsyncRequest_1(uint64_t a1, const void *a2)
{
  return 0;
}

uint64_t _getAuxiliaryImageGeometryForIndex_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, int *a7)
{
  CFTypeRef v27 = 0;
  CFTypeRef cf = 0;
  long long v25 = 0u;
  long long v26 = 0u;
  int v24 = 1;
  uint64_t v13 = *(void *)(a1 + 48);
  uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v14) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, void))(v15 + 16);
  if (!v16) {
    goto LABEL_19;
  }
  uint64_t ImageGeometryFromPictureReader = v16(v13, a2, &cf, 0);
  if (ImageGeometryFromPictureReader) {
    goto LABEL_25;
  }
  CFTypeRef v18 = cf;
  uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v20 = v19 ? v19 : 0;
  uint64_t v21 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *))(v20 + 40);
  if (!v21)
  {
LABEL_19:
    uint64_t v22 = 4294954514;
    goto LABEL_20;
  }
  uint64_t ImageGeometryFromPictureReader = v21(v18, a3, &v27);
  if (ImageGeometryFromPictureReader) {
    goto LABEL_25;
  }
  uint64_t ImageGeometryFromPictureReader = CMPhotoPictureReaderGetImageGeometryFromPictureReader(v27, *(unsigned __int8 *)(a1 + 28), (unint64_t)&v25, 0);
  if (ImageGeometryFromPictureReader) {
    goto LABEL_25;
  }
  if (a7)
  {
    uint64_t ImageGeometryFromPictureReader = _getImageOrientation(a1, v27, cf, &v24);
    if (!ImageGeometryFromPictureReader)
    {
      *a7 = v24;
      goto LABEL_15;
    }
LABEL_25:
    uint64_t v22 = ImageGeometryFromPictureReader;
    goto LABEL_20;
  }
LABEL_15:
  if (a5) {
    *a5 = v26;
  }
  uint64_t v22 = 0;
  if (a6) {
    *a6 = *((void *)&v26 + 1);
  }
LABEL_20:
  if (cf) {
    CFRelease(cf);
  }
  if (v27) {
    CFRelease(v27);
  }
  return v22;
}

uint64_t _getAuxiliaryImageTypeForIndex_1(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  uint64_t v6 = a1[5];
  CFTypeRef v31 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v29 = 0;
  CFTypeRef v30 = 0;
  uint64_t v28 = 0;
  if (!(a5 | a6))
  {
    uint64_t AuxiliaryEncodedPixelFormatForIndex = 0;
    goto LABEL_34;
  }
  uint64_t v12 = _copyAuxiliaryImageMetadataFromCacheForIndex((uint64_t)a1, a2, a3, 0, 0, 0, &cf, (_DWORD *)&v28 + 1);
  uint64_t AuxiliaryEncodedPixelFormatForIndex = v12;
  if (!v12 || v12 == -16993)
  {
    if (!v12 && cf)
    {
      if (a6 && !FigCFDictionaryGetInt32IfPresent())
      {
        uint64_t AuxiliaryEncodedPixelFormatForIndex = 4294950303;
        goto LABEL_34;
      }
      uint64_t AuxiliaryEncodedPixelFormatForIndex = 0;
LABEL_29:
      if (a5) {
        *(_DWORD *)a5 = HIDWORD(v28);
      }
      if (a6) {
        *(_DWORD *)a6 = v28;
      }
      goto LABEL_34;
    }
    if (!a5)
    {
LABEL_27:
      if (a6)
      {
        uint64_t AuxiliaryEncodedPixelFormatForIndex = _getAuxiliaryEncodedPixelFormatForIndex(a1, a2, a3, (int *)&v28);
        if (AuxiliaryEncodedPixelFormatForIndex) {
          goto LABEL_34;
        }
      }
      goto LABEL_29;
    }
    uint64_t v14 = a1[6];
    uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v15) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    CFTypeRef v17 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, void))(v16 + 16);
    if (v17)
    {
      uint64_t v18 = v17(v14, a2, &v31, 0);
      if (v18) {
        goto LABEL_44;
      }
      CFTypeRef v19 = v31;
      uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v20) {
        uint64_t v21 = v20;
      }
      else {
        uint64_t v21 = 0;
      }
      uint64_t v22 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *))(v21 + 40);
      if (!v22) {
        goto LABEL_33;
      }
      uint64_t v18 = v22(v19, a3, &v30);
      if (v18)
      {
LABEL_44:
        uint64_t AuxiliaryEncodedPixelFormatForIndex = v18;
        goto LABEL_34;
      }
      uint64_t FigBaseObject = FigPictureReaderGetFigBaseObject();
      uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v24) {
        uint64_t v25 = v24;
      }
      else {
        uint64_t v25 = 0;
      }
      long long v26 = *(uint64_t (**)(uint64_t, void, uint64_t, CFTypeRef *))(v25 + 48);
      if (v26)
      {
        uint64_t AuxiliaryEncodedPixelFormatForIndex = v26(FigBaseObject, *MEMORY[0x1E4F33390], v6, &v29);
        if (AuxiliaryEncodedPixelFormatForIndex) {
          goto LABEL_34;
        }
        HIDWORD(v28) = CMPhotoGetAuxiliaryImageTypeFromURN();
        goto LABEL_27;
      }
    }
LABEL_33:
    uint64_t AuxiliaryEncodedPixelFormatForIndex = 4294954514;
  }
LABEL_34:
  if (cf) {
    CFRelease(cf);
  }
  if (v31) {
    CFRelease(v31);
  }
  if (v30) {
    CFRelease(v30);
  }
  if (v29) {
    CFRelease(v29);
  }
  return AuxiliaryEncodedPixelFormatForIndex;
}

uint64_t _copyAuxiliaryImageMetadataForIndex_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a5) {
    return _copyAuxiliaryImageMetadataFromCacheForIndex(a1, a2, a3, 0, 0, a5, 0, 0);
  }
  else {
    return 4294950306;
  }
}

uint64_t _copyAuxiliaryFormatInfoForIndex(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a4) {
    return _copyAuxiliaryImageMetadataFromCacheForIndex(a1, a2, a3, 0, 0, 0, a4, 0);
  }
  else {
    return 4294950306;
  }
}

uint64_t _copyAuxiliaryImageFormatDescriptionForIndex(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  CFTypeRef cf = 0;
  uint64_t v27 = 0;
  CFTypeRef v25 = 0;
  if (!a5) {
    return 0;
  }
  uint64_t v9 = a1[6];
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, void))(v11 + 16);
  if (v13)
  {
    uint64_t v14 = v13(v9, a2, &cf, 0);
    if (v14) {
      goto LABEL_25;
    }
    CFTypeRef v15 = cf;
    uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v16) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = 0;
    }
    uint64_t v18 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *))(v17 + 40);
    if (v18)
    {
      uint64_t v14 = v18(v15, a3, &v25);
      if (!v14)
      {
        CFAllocatorRef v19 = CFGetAllocator(a1);
        uint64_t FigBaseObject = FigPictureReaderGetFigBaseObject();
        uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v21) {
          uint64_t v22 = v21;
        }
        else {
          uint64_t v22 = 0;
        }
        CFTypeRef v23 = *(uint64_t (**)(uint64_t, void, CFAllocatorRef, uint64_t *))(v22 + 48);
        if (v23)
        {
          uint64_t v12 = v23(FigBaseObject, *MEMORY[0x1E4F333D0], v19, &v27);
          if (!v12) {
            *a5 = v27;
          }
          goto LABEL_20;
        }
        goto LABEL_19;
      }
LABEL_25:
      uint64_t v12 = v14;
      goto LABEL_20;
    }
  }
LABEL_19:
  uint64_t v12 = 4294954514;
LABEL_20:
  if (cf) {
    CFRelease(cf);
  }
  if (v25) {
    CFRelease(v25);
  }
  return v12;
}

CFDictionaryRef _createAuxiliaryImageForIndex_0(void *a1, uint64_t a2, uint64_t a3, CFDictionaryRef theDict, int a5, CGImageRef *a6)
{
  CFTypeRef cf = 0;
  CFTypeRef v27 = 0;
  CFDictionaryRef v12 = _checkForbiddenAuxOptions_0(theDict);
  if (v12) {
    return v12;
  }
  uint64_t v13 = a1[6];
  uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v14) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, void))(v15 + 16);
  if (!v16) {
    goto LABEL_14;
  }
  uint64_t v17 = v16(v13, a2, &v27, 0);
  if (v17)
  {
    uint64_t v24 = v17;
    goto LABEL_15;
  }
  CFTypeRef v18 = v27;
  uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v20 = v19 ? v19 : 0;
  uint64_t v21 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *))(v20 + 40);
  if (!v21)
  {
LABEL_14:
    uint64_t v24 = 4294954514;
    goto LABEL_15;
  }
  uint64_t v22 = v21(v18, a3, &cf);
  CFTypeRef v23 = cf;
  if (!v22)
  {
    uint64_t v24 = _decodeAuxiliaryImage(a1, cf, v27, a2, a3, theDict, 0, a5, a6);
    CFTypeRef v23 = cf;
    if (!cf) {
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  uint64_t v24 = v22;
  if (cf) {
LABEL_13:
  }
    CFRelease(v23);
LABEL_15:
  if (v27) {
    CFRelease(v27);
  }
  return (const __CFDictionary *)v24;
}

uint64_t _copyAuxiliaryColorSpaceForIndex_0(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  CFTypeRef v20 = 0;
  CFTypeRef cf = 0;
  if (!a4) {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, void))(v10 + 16);
  if (v11)
  {
    uint64_t v12 = v11(v8, a2, &cf, 0);
    if (v12)
    {
LABEL_22:
      uint64_t v18 = v12;
      goto LABEL_16;
    }
    CFTypeRef v13 = cf;
    uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v14) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *))(v15 + 40);
    if (v16)
    {
      uint64_t v12 = v16(v13, a3, &v20);
      if (!v12)
      {
        unsigned int v17 = _copyColorInfoForItem((unsigned char *)a1, v20, 0, 1, 0, 0, a4, 0, 0, 0, 0, 0, 0);
        if (v17 == -16993) {
          uint64_t v18 = 0;
        }
        else {
          uint64_t v18 = v17;
        }
        goto LABEL_16;
      }
      goto LABEL_22;
    }
  }
  uint64_t v18 = 4294954514;
LABEL_16:
  if (cf) {
    CFRelease(cf);
  }
  if (v20) {
    CFRelease(v20);
  }
  return v18;
}

uint64_t _createOutputBufferAttributesForImageIndex_1(void *a1, uint64_t a2, const __CFDictionary *a3, CFMutableDictionaryRef *a4)
{
  CFTypeRef cf = 0;
  uint64_t v8 = a1[6];
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, void))(v10 + 16);
  if (!v11) {
    return 4294954514;
  }
  uint64_t v12 = v11(v8, a2, &cf, 0);
  CFTypeRef v13 = cf;
  if (v12)
  {
    uint64_t OutputBufferAttributesForReader = v12;
    if (!cf) {
      return OutputBufferAttributesForReader;
    }
    goto LABEL_7;
  }
  uint64_t OutputBufferAttributesForReader = _createOutputBufferAttributesForReader(a1, cf, 0, 0, a3, a4);
  CFTypeRef v13 = cf;
  if (cf) {
LABEL_7:
  }
    CFRelease(v13);
  return OutputBufferAttributesForReader;
}

uint64_t _createOutputBufferAttributesForThumbnailIndex_0(void *a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4, CFMutableDictionaryRef *a5)
{
  CFTypeRef v21 = 0;
  CFTypeRef cf = 0;
  uint64_t v10 = a1[6];
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  CFTypeRef v13 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, void))(v12 + 16);
  if (v13)
  {
    uint64_t OutputBufferAttributesForReader = v13(v10, a2, &cf, 0);
    if (OutputBufferAttributesForReader)
    {
LABEL_12:
      uint64_t v19 = OutputBufferAttributesForReader;
      goto LABEL_14;
    }
    CFTypeRef v15 = cf;
    uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v16) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = 0;
    }
    uint64_t v18 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *))(v17 + 24);
    if (v18)
    {
      uint64_t OutputBufferAttributesForReader = v18(v15, a3, &v21);
      if (!OutputBufferAttributesForReader) {
        uint64_t OutputBufferAttributesForReader = _createOutputBufferAttributesForReader(a1, v21, cf, 0, a4, a5);
      }
      goto LABEL_12;
    }
  }
  uint64_t v19 = 4294954514;
LABEL_14:
  if (cf) {
    CFRelease(cf);
  }
  if (v21) {
    CFRelease(v21);
  }
  return v19;
}

uint64_t _createOutputBufferAttributesForAuxiliaryIndex_0(void *a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4, CFMutableDictionaryRef *a5)
{
  CFTypeRef v21 = 0;
  CFTypeRef cf = 0;
  uint64_t v10 = a1[6];
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  CFTypeRef v13 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, void))(v12 + 16);
  if (v13)
  {
    uint64_t OutputBufferAttributesForReader = v13(v10, a2, &cf, 0);
    if (OutputBufferAttributesForReader)
    {
LABEL_12:
      uint64_t v19 = OutputBufferAttributesForReader;
      goto LABEL_14;
    }
    CFTypeRef v15 = cf;
    uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v16) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = 0;
    }
    uint64_t v18 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *))(v17 + 40);
    if (v18)
    {
      uint64_t OutputBufferAttributesForReader = v18(v15, a3, &v21);
      if (!OutputBufferAttributesForReader) {
        uint64_t OutputBufferAttributesForReader = _createOutputBufferAttributesForReader(a1, v21, cf, 1, a4, a5);
      }
      goto LABEL_12;
    }
  }
  uint64_t v19 = 4294954514;
LABEL_14:
  if (cf) {
    CFRelease(cf);
  }
  if (v21) {
    CFRelease(v21);
  }
  return v19;
}

uint64_t _transcodeToJFIF_0(uint64_t *a1, const void *a2, uint64_t a3, uint64_t a4, CFTypeRef *a5)
{
  CFDictionaryRef theDict = 0;
  long long v171 = 0uLL;
  CFTypeRef v170 = 0;
  memset(__src, 0, sizeof(__src));
  CFAllocatorRef allocator = CFGetAllocator(a1);
  memset(v168, 0, sizeof(v168));
  uint64_t v167 = 0;
  v166 = 0;
  long long v164 = 0u;
  long long v165 = 0u;
  long long v163 = 0u;
  uint64_t v162 = 0;
  long long v160 = 0u;
  long long v161 = 0u;
  long long v159 = 0u;
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  if (a2)
  {
    CFTypeID v10 = CFGetTypeID(a2);
    if (v10 != CFDictionaryGetTypeID())
    {
LABEL_312:
      uint64_t v37 = 4294950306;
LABEL_313:
      _freeTranscodeAuxiliaryEntries(0, 0);
      int v133 = 0;
      CFIndex v33 = 0;
      char v32 = 0;
      Int = 0;
      goto LABEL_286;
    }
  }
  LODWORD(v163) = 65793;
  *(void *)&long long v165 = 0;
  *(void *)&long long v164 = 0;
  *((void *)&v163 + 1) = 0;
  DWORD2(v164) = 0;
  id v130 = a5;
  if (!a2) {
    goto LABEL_18;
  }
  CMPhotoCFDictionaryGetBooleanIfPresent((CFDictionaryRef)a2, @"IncludeThumbnail", &v163);
  CMPhotoCFDictionaryGetBooleanIfPresent((CFDictionaryRef)a2, @"IncludeAuxiliaryImages", (unsigned char *)&v163 + 1);
  CFDictionaryRef Value = CFDictionaryGetValue((CFDictionaryRef)a2, @"PreserveAndModifyGainMap");
  *(void *)&long long v165 = Value;
  if (!Value || (CFTypeID v12 = CFGetTypeID(Value), v12 == CFDictionaryGetTypeID()) && !FigCFDictionaryGetValue())
  {
    CMPhotoCFDictionaryGetBooleanIfPresent((CFDictionaryRef)a2, @"IncludeMetadata", (unsigned char *)&v163 + 2);
    CMPhotoCFDictionaryGetBooleanIfPresent((CFDictionaryRef)a2, @"PreferSoftwareEncode", (unsigned char *)&v163 + 3);
    BYTE9(v164) = CMPhotoCFDictionaryGetBooleanIfPresent((CFDictionaryRef)a2, @"ApplyAlpha", (unsigned char *)&v164 + 8);
    if (CMPhotoCFDictionaryGetIntIfPresent((CFDictionaryRef)a2, @"QualityControllerType", (char *)&v165 + 12))BYTE8(v165) = 1; {
    CFTypeRef v13 = CFDictionaryGetValue((CFDictionaryRef)a2, @"QualityControllerParameters");
    }
    if (v13) {
      CFTypeRef v13 = CFRetain(v13);
    }
    v166 = v13;
    CMPhotoCFDictionaryGetBooleanIfPresent((CFDictionaryRef)a2, @"AllowITUR_2100TFToSDRTransformBeforeEncode", (unsigned char *)&v164 + 10);
    uint64_t v14 = CFDictionaryGetValue((CFDictionaryRef)a2, @"ReplacementImageProperties");
    *((void *)&v163 + 1) = v14;
    if (!v14 || (CFTypeID v15 = CFGetTypeID(v14), v15 == CFDictionaryGetTypeID()))
    {
      uint64_t v16 = CFDictionaryGetValue((CFDictionaryRef)a2, @"ColorConverter");
      *(void *)&long long v164 = v16;
      if (!v16 || (CFTypeID v17 = CFGetTypeID(v16), v17 == CFDictionaryGetTypeID()))
      {
        CMPhotoCFDictionaryGetBooleanIfPresent((CFDictionaryRef)a2, @"RestrictedTranscoding", (unsigned char *)&v164 + 11);
        goto LABEL_18;
      }
    }
    goto LABEL_312;
  }
  uint64_t v129 = FigSignalErrorAt();
  if (v129)
  {
    uint64_t v37 = v129;
    goto LABEL_313;
  }
LABEL_18:
  v184 = 0;
  v185 = 0;
  CFTypeRef v182 = 0;
  v183 = 0;
  CFTypeRef v180 = 0;
  v181 = 0;
  CFTypeRef v179 = 0;
  uint64_t v18 = a1[6];
  uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v19) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = 0;
  }
  CFTypeRef v21 = *(uint64_t (**)(uint64_t, uint64_t, const void **, void))(v20 + 16);
  if (!v21)
  {
    id v134 = 0;
    CFTypeRef v136 = 0;
    char v32 = 0;
    CFIndex v33 = 0;
    CFTypeRef v34 = 0;
    CFDictionaryRef MutableCopy = 0;
LABEL_36:
    int v35 = 0;
    int v36 = 0;
    uint64_t v37 = 4294954514;
    goto LABEL_141;
  }
  uint64_t ItemTypeFromReader = v21(v18, a3, &v183, 0);
  if (ItemTypeFromReader
    || (v178 = 0, uint64_t ItemTypeFromReader = CMPhotoPictureReaderGetItemTypeFromReader(v183, &v178),
                  ItemTypeFromReader)
    || (int v23 = v178,
        char v177 = 0,
        uint64_t v176 = -1,
        uint64_t ItemTypeFromReader = CMPhotoDecompressionContainerFindFirstAuxiliaryOfTypeForInternalIndexWithOptions(a1, a3, 0, 4, @"urn:com:apple:photo:2020:aux:hdrgainmap", &v177, &v176), ItemTypeFromReader))
  {
    uint64_t v37 = ItemTypeFromReader;
    id v134 = 0;
    CFTypeRef v136 = 0;
    char v32 = 0;
    CFIndex v33 = 0;
    CFTypeRef v34 = 0;
    CFDictionaryRef MutableCopy = 0;
    goto LABEL_321;
  }
  CFDictionaryRef MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy)
  {
    id v134 = 0;
    CFTypeRef v136 = 0;
    char v32 = 0;
    CFIndex v33 = 0;
    CFTypeRef v34 = 0;
    int v35 = 0;
    int v36 = 0;
    uint64_t v37 = 4294950305;
    goto LABEL_141;
  }
  int v138 = v23;
  if (v23 == 1953325424)
  {
    memset(v175, 0, sizeof(v175));
    uint64_t v25 = _copyFlexRangeDetails(a1[5], (uint64_t)v183, 0, v175, 0, &v182, &v185, &v184);
    if (!v25)
    {
      BOOL v26 = *((float *)v175 + 2) == 0.0;
      if (*((float *)v175 + 3) <= 0.0) {
        BOOL v26 = 0;
      }
      BOOL v135 = v26;
      int v174 = 1;
      int v173 = 1;
      ImageOrientatiouint64_t n = _getImageOrientation((uint64_t)a1, v185, 0, &v174);
      if (ImageOrientation
        || (ImageOrientatiouint64_t n = _getImageOrientation((uint64_t)a1, v184, 0, &v173), ImageOrientation))
      {
        uint64_t v37 = ImageOrientation;
        CFTypeRef v34 = 0;
        int v36 = 0;
LABEL_340:
        id v134 = 0;
        CFTypeRef v136 = 0;
        char v32 = 0;
        CFIndex v33 = 0;
        int v35 = 0;
        goto LABEL_141;
      }
      CFNumberRef v188 = 0;
      CFTypeRef v132 = (CFTypeRef)a3;
      if (!v185)
      {
        uint64_t v45 = a3;
        uint64_t v62 = a4;
        BOOL v63 = 0;
LABEL_77:
        uint64_t v64 = _copyColorInfoForItem(a1, v185, 0, 0, 0, 0, (CFTypeRef *)&v181, 0, 0, 0, 0, 0, 0);
        if (v64
          || (uint64_t v64 = _copyColorInfoForItem(a1, v183, 0, 0, 0, 0, &v180, 0, 0, 0, 0, 0, 0), v64))
        {
          uint64_t v37 = v64;
          CFTypeRef v34 = 0;
          int v36 = 0;
          a4 = v62;
LABEL_339:
          a3 = (uint64_t)v132;
          goto LABEL_340;
        }
        uint64_t v65 = FigCFDictionaryGetValue();
        if (v63)
        {
          unint64_t v66 = (const void *)v65;
          if (v185)
          {
            CFTypeRef v34 = CFRetain(v185);
            int v67 = v185;
          }
          else
          {
            int v67 = 0;
            CFTypeRef v34 = 0;
          }
          a4 = v62;
          uint64_t v68 = _translateCropForTranscodeIfNeeded((uint64_t)a1, MutableCopy, v66, v183, v67);
          int v36 = 0;
          if (!v68)
          {
            BOOL v46 = 0;
            goto LABEL_95;
          }
LABEL_333:
          uint64_t v37 = v68;
          goto LABEL_339;
        }
        if (v183) {
          CFTypeRef v34 = CFRetain(v183);
        }
        else {
          CFTypeRef v34 = 0;
        }
        a4 = v62;
        char v69 = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
        int v36 = v69;
        if (!v69)
        {
          uint64_t v37 = 4294950305;
          goto LABEL_339;
        }
        uint64_t v68 = CMPhotoCFDictionarySetInt32(v69, @"DecodeToHDROutputMode", 2);
        if (v68) {
          goto LABEL_333;
        }
        CFDictionarySetValue(MutableCopy, @"DecodeToHDROutput", v36);
        CFDictionarySetValue(MutableCopy, @"ApplyTransform", (const void *)*MEMORY[0x1E4F1CFD0]);
        if (v135)
        {
          BOOL v46 = (void)v165 != 0;
        }
        else
        {
          CFDictionaryRemoveValue(MutableCopy, @"PreserveAndModifyGainMap");
          *(void *)&long long v165 = 0;
          if (v181) {
            CFRelease(v181);
          }
          BOOL v46 = 0;
          CFTypeRef v70 = v180;
          CFTypeRef v180 = 0;
          v181 = (void *)v70;
        }
LABEL_95:
        *(void *)&long long v160 = 0;
        if (!BYTE1(v163) && !(void)v165)
        {
          uint64_t v37 = 0;
          int v35 = 0;
LABEL_115:
          id v134 = 0;
LABEL_140:
          CFIndex v33 = MutableCopy;
          CFIndex v88 = (CGColorSpace *)v181;
          v181 = 0;
          CFTypeRef v136 = v34;
          a3 = v45;
          char v32 = v88;
          CFTypeRef v34 = 0;
          CFDictionaryRef MutableCopy = 0;
          goto LABEL_141;
        }
        *(void *)&v175[0] = 0;
        uint64_t AuxiliaryImageCountForIndex_1 = _getAuxiliaryImageCountForIndex_1((uint64_t)a1, v45, v40, v175);
        if (AuxiliaryImageCountForIndex_1)
        {
          uint64_t v37 = AuxiliaryImageCountForIndex_1;
          int v35 = 0;
LABEL_337:
          a3 = (uint64_t)v132;
          id v134 = 0;
          CFTypeRef v136 = 0;
          char v32 = 0;
          CFIndex v33 = 0;
          goto LABEL_141;
        }
        uint64_t v72 = FigCFDictionaryGetValue();
        int v35 = 0;
        BOOL v73 = !v46 && v177 == 0;
        if (!v73 || v138 == 1953325424)
        {
          uint64_t v75 = (const void *)v72;
          if (v72)
          {
            unsigned int v76 = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
            int v35 = v76;
            if (!v76)
            {
LABEL_335:
              uint64_t v37 = 4294950305;
              goto LABEL_337;
            }
            *(void *)&long long v165 = v76;
            CFDictionarySetValue(MutableCopy, @"PreserveAndModifyGainMap", v76);
            if (v46) {
              CMPhotoCFDictionarySetBoolean(v35, @"ApplyTransform", 1);
            }
            uint64_t v77 = _translateCropForTranscodeIfNeeded((uint64_t)a1, v35, v75, v34, v184);
            if (v77)
            {
              uint64_t v37 = v77;
              goto LABEL_337;
            }
          }
        }
        if (*(uint64_t *)&v175[0] <= 0 && !v135)
        {
          uint64_t v37 = 0;
          goto LABEL_115;
        }
        int v78 = malloc_type_calloc(*(void *)&v175[0] + 1, 0x20uLL, 0x1062040D23FC1D2uLL);
        if (v78)
        {
          BOOL v80 = v78;
          *(void *)&long long v159 = a1;
          *((void *)&v159 + 1) = v45;
          LOBYTE(v162) = BYTE11(v164);
          *(void *)&long long v161 = v165;
          *((void *)&v160 + 1) = v78;
          id v134 = v78;
          if (v135)
          {
            *int v78 = 1;
            CFTypeRef v81 = v184;
            if (v184) {
              CFTypeRef v81 = CFRetain(v184);
            }
            v80[1] = v81;
            CFTypeRef v82 = v182;
            if (v182) {
              CFTypeRef v82 = CFRetain(v182);
            }
            v80[2] = v82;
            CFTypeRef v83 = v180;
            if (v180) {
              CFTypeRef v83 = CFRetain(v180);
            }
            v80[3] = v83;
            *((void *)&v161 + 1) = 0;
            uint64_t v84 = 1;
          }
          else
          {
            uint64_t v84 = 0;
          }
          if (*(uint64_t *)&v175[0] < 1)
          {
            uint64_t v37 = 0;
          }
          else
          {
            uint64_t v85 = 0;
            do
            {
              if (v179)
              {
                CFRelease(v179);
                CFTypeRef v179 = 0;
              }
              uint64_t v37 = _copyAuxiliaryImageTypeInfo((uint64_t)a1, v45, v85, v79, (uint64_t)&v179, 0);
              if (!v37 && CMPhotoGetAuxiliaryImageTypeFromURN() != 3)
              {
                int v86 = FigCFEqual();
                if (!v86 || v138 != 1953325424)
                {
                  if (v86 | BYTE1(v163))
                  {
                    uint64_t v87 = &v134[32 * v84];
                    *uint64_t v87 = 0;
                    *((void *)v87 + 1) = v85;
                    ++v84;
                  }
                }
              }
              ++v85;
            }
            while (v85 < *(uint64_t *)&v175[0]);
          }
          *(void *)&long long v160 = v84;
          goto LABEL_140;
        }
        goto LABEL_335;
      }
      CFAllocatorRef v28 = CFGetAllocator(a1);
      uint64_t FigBaseObject = FigPictureReaderGetFigBaseObject();
      uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v30) {
        uint64_t v31 = v30;
      }
      else {
        uint64_t v31 = 0;
      }
      uint64_t v47 = *(uint64_t (**)(uint64_t, void, CFAllocatorRef, const __CFNumber **))(v31 + 48);
      if (v47)
      {
        int v48 = v47(FigBaseObject, *MEMORY[0x1E4F333E8], v28, &v188);
        if (v48) {
          goto LABEL_341;
        }
        unsigned int Int32 = CMPhotoCFNumberGetInt32(v188);
        uint64_t v187 = 0;
        uint64_t v50 = a1[6];
        uint64_t v51 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v51) {
          uint64_t v52 = v51;
        }
        else {
          uint64_t v52 = 0;
        }
        double v55 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(v52 + 8);
        if (v55)
        {
          int v48 = v55(v50, 1, &v187);
          if (!v48)
          {
            if (v187 >= 1)
            {
              uint64_t v56 = 0;
              uint64_t v45 = -1;
              while (1)
              {
                int v186 = 0;
                uint64_t v57 = a1[6];
                uint64_t v58 = *(void *)(CMBaseObjectGetVTable() + 16);
                if (v58) {
                  uint64_t v59 = v58;
                }
                else {
                  uint64_t v59 = 0;
                }
                double v60 = *(uint64_t (**)(uint64_t, uint64_t, void, int *))(v59 + 16);
                if (!v60)
                {
                  int v61 = -12782;
                  goto LABEL_69;
                }
                int v48 = v60(v57, v56, 0, &v186);
                if (v48) {
                  goto LABEL_341;
                }
                if (v186 == Int32) {
                  break;
                }
                ++v56;
                int v61 = -16993;
                if (v56 >= v187) {
                  goto LABEL_70;
                }
              }
              int v61 = 0;
              uint64_t v45 = v56;
              goto LABEL_70;
            }
            goto LABEL_68;
          }
LABEL_341:
          int v61 = v48;
          goto LABEL_69;
        }
      }
LABEL_68:
      int v61 = -16993;
LABEL_69:
      uint64_t v45 = -1;
LABEL_70:
      if (v188) {
        CFRelease(v188);
      }
      uint64_t v62 = a4;
      if (v61)
      {
        BOOL v63 = 0;
        uint64_t v45 = (uint64_t)v132;
      }
      else
      {
        BOOL v63 = v174 == v173 && v135;
      }
      goto LABEL_77;
    }
    uint64_t v37 = v25;
    id v134 = 0;
    CFTypeRef v136 = 0;
    char v32 = 0;
    CFIndex v33 = 0;
    CFTypeRef v34 = 0;
LABEL_321:
    int v35 = 0;
    int v36 = 0;
    goto LABEL_141;
  }
  if (v183)
  {
    CFTypeRef v34 = CFRetain(v183);
    int v38 = v183;
  }
  else
  {
    int v38 = 0;
    CFTypeRef v34 = 0;
  }
  uint64_t v39 = _copyColorInfoForItem(a1, v38, 0, 0, 0, 0, (CFTypeRef *)&v181, 0, 0, 0, 0, 0, 0);
  if (v39)
  {
    uint64_t v37 = v39;
    id v134 = 0;
    CFTypeRef v136 = 0;
    char v32 = 0;
    CFIndex v33 = 0;
    goto LABEL_321;
  }
  if (!v177)
  {
    int v36 = 0;
    BOOL v135 = 0;
    uint64_t v45 = a3;
    BOOL v46 = 0;
    CFTypeRef v132 = (CFTypeRef)v45;
    goto LABEL_95;
  }
  uint64_t v41 = v183;
  uint64_t v42 = v176;
  uint64_t v43 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v43) {
    uint64_t v44 = v43;
  }
  else {
    uint64_t v44 = 0;
  }
  float64x2_t v53 = *(uint64_t (**)(const void *, uint64_t, const void **))(v44 + 40);
  if (!v53)
  {
    id v134 = 0;
    CFTypeRef v136 = 0;
    char v32 = 0;
    CFIndex v33 = 0;
    goto LABEL_36;
  }
  CFTypeRef v132 = (CFTypeRef)a3;
  uint64_t v54 = v53(v41, v42, &v184);
  int v36 = 0;
  if (!v54)
  {
    BOOL v135 = 0;
    BOOL v46 = 0;
    uint64_t v45 = (uint64_t)v132;
    goto LABEL_95;
  }
  uint64_t v37 = v54;
  char v32 = 0;
  CFIndex v33 = 0;
  id v134 = 0;
  CFTypeRef v136 = 0;
  int v35 = 0;
LABEL_141:
  if (v179) {
    CFRelease(v179);
  }
  if (v185) {
    CFRelease(v185);
  }
  if (v184) {
    CFRelease(v184);
  }
  if (v183) {
    CFRelease(v183);
  }
  if (v34) {
    CFRelease(v34);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (v35) {
    CFRelease(v35);
  }
  BOOL v89 = v136;
  if (v36) {
    CFRelease(v36);
  }
  if (v182) {
    CFRelease(v182);
  }
  if (v181) {
    CFRelease(v181);
  }
  if (v180) {
    CFRelease(v180);
  }
  if (!v37)
  {
    uint64_t PictureCollectionCodecPool = CMPhotoDecompressionSessionGetPictureCollectionCodecPool(a1[2], &v167);
    if (!PictureCollectionCodecPool)
    {
      uint64_t PictureCollectionCodecPool = CMPhotoDecompressionSessionCopyScaler(a1[2], (void *)&v171 + 1);
      if (!PictureCollectionCodecPool)
      {
        uint64_t PictureCollectionCodecPool = CMPhotoDecompressionSessionCopySurfacePool(a1[2], &v171);
        if (!PictureCollectionCodecPool)
        {
          char v158 = 0;
          uint64_t v157 = 0;
          uint64_t PictureCollectionCodecPool = CMPhotoDecompressionContainerFindFirstAuxiliaryOfTypeForInternalIndexWithOptions(a1, a3, 0, 3, 0, &v158, &v157);
          if (!PictureCollectionCodecPool)
          {
            if (!v158 || BYTE9(v164))
            {
              if (v158 && BYTE8(v164))
              {
                char v91 = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
                if (!v91)
                {
                  Int = 0;
                  int v133 = 0;
                  uint64_t v37 = 4294950305;
                  goto LABEL_325;
                }
                CFDictionaryRef v92 = v91;
                CMPhotoCFDictionarySetInt(v91, @"OutputPixelFormat", 1111970369);
                if (v33) {
                  CFRelease(v33);
                }
              }
              else
              {
                CFDictionaryRef v92 = v33;
              }
              uint64_t inited = CMPhotoDecompressionContainerCopyImagePropertiesForInternalIndex((uint64_t)a1, a3, 0, 0, 0, (CFTypeRef *)&theDict);
              if (inited) {
                goto LABEL_310;
              }
              if (v32)
              {
                BOOL v94 = CGColorSpaceUsesITUR_2100TF(v32);
                if (v94 && BYTE10(v164))
                {
                  CFRelease(v32);
                  char v32 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DB90]);
                  LOBYTE(v94) = 1;
                }
              }
              else
              {
                LOBYTE(v94) = 0;
              }
              _determineDecodeStrategy_1((uint64_t)a1, v136, 0, v92, 0, 0, 1, (uint64_t)__src);
              if (inited) {
                goto LABEL_310;
              }
              if (!LOBYTE(__src[1]) && (BYTE10(v164) || !v94))
              {
                LOBYTE(__src[1]) = 1;
                HIDWORD(__src[0]) = 875704422;
              }
              uint64_t inited = CMPhotoDecompressionContainerInitColorController(v168, (CFDictionaryRef)v164, v32, 0);
              if (inited)
              {
LABEL_310:
                uint64_t v37 = inited;
                Int = 0;
                goto LABEL_311;
              }
              if (BYTE8(v165))
              {
                Int = 0;
              }
              else
              {
                v166 = 0;
                CFDictionaryRef v98 = (const __CFDictionary *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F2FC20]);
                if (!v98
                  || (CFStringRef v99 = (const __CFString *)CFDictionaryGetValue(v98, @"26")) == 0
                  || (CFStringRef v100 = v99,
                      CFDictionaryRef v101 = v92,
                      CFTypeID v102 = CFGetTypeID(v99),
                      BOOL v73 = v102 == CFStringGetTypeID(),
                      CFDictionaryRef v92 = v101,
                      !v73)
                  || CFStringCompare(v100, @"q900n", 0)
                  && CFStringCompare(v100, @"q900s", 0)
                  && CFStringCompare(v100, @"q850s", 0)
                  && CFStringCompare(v100, @"q825s", 0)
                  && CFStringCompare(v100, @"q800n", 0)
                  && CFStringCompare(v100, @"q750n", 0))
                {
                  HIDWORD(v165) = 4;
                  Int = CMPhotoCFNumberCreateInt(2);
                }
                else
                {
                  Int = (const void *)FigCFNumberCreateSInt32();
                  if (!Int)
                  {
LABEL_322:
                    int v133 = 0;
                    uint64_t v37 = 4294950305;
                    goto LABEL_324;
                  }
                  HIDWORD(v165) = 4;
                }
                v166 = Int;
              }
              int v103 = (const void *)*((void *)&v163 + 1);
              CFDictionaryRef v104 = theDict;
              if (*((void *)&v163 + 1))
              {
                if (theDict
                  && (CFRelease(theDict), theDict = 0, (int v103 = (const void *)*((void *)&v163 + 1)) == 0))
                {
                  CFDictionaryRef v104 = 0;
                }
                else
                {
                  CFDictionaryRef v104 = (const __CFDictionary *)CFRetain(v103);
                }
                CFDictionaryRef theDict = v104;
              }
              if (!BYTE2(v163) && v104)
              {
                CFRelease(v104);
                CFDictionaryRef theDict = 0;
              }
              uint64_t v156 = 0;
              if ((_BYTE)v163)
              {
                uint64_t ThumbnailCountForIndex_1 = _getThumbnailCountForIndex_1((uint64_t)a1, a3, v96, &v156);
                if (ThumbnailCountForIndex_1)
                {
LABEL_242:
                  uint64_t v37 = ThumbnailCountForIndex_1;
LABEL_311:
                  int v133 = 0;
LABEL_324:
                  CFIndex v33 = v92;
                  goto LABEL_325;
                }
                if ((_BYTE)v163) {
                  BOOL v106 = v156 <= a4;
                }
                else {
                  BOOL v106 = 0;
                }
                char v107 = v106;
                char v139 = v107;
                if ((_BYTE)v163 && v156 > a4)
                {
                  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                  if (Mutable)
                  {
                    uint64_t v109 = Mutable;
                    uint64_t v110 = CMPhotoCFDictionarySetSize(Mutable, @"MaxPixelSize", 160);
                    if (v110
                      || (uint64_t v110 = CMPhotoCFDictionarySetBoolean(v109, @"ApplyTransform", HIBYTE(__src[8])),
                          v110)
                      || LOBYTE(__src[15])
                      && (uint64_t v110 = CMPhotoCFDictionarySetBoolean(v109, @"UseVTDecompression", 1), v110)
                      || (void)v164
                      && LOBYTE(__src[1])
                      && (uint64_t v110 = CMPhotoCFDictionarySetInt32(v109, @"OutputPixelFormat", SHIDWORD(__src[0])),
                          v110)
                      || BYTE11(v164)
                      && (uint64_t v110 = CMPhotoCFDictionarySetBoolean(v109, @"RestrictedDecoding", BYTE11(v164)),
                          v110))
                    {
                      uint64_t v37 = v110;
                      int v133 = v109;
                    }
                    else
                    {
                      if (!BYTE5(__src[2]))
                      {
                        uint64_t v137 = _transcodeThumbnailCallback;
                        goto LABEL_244;
                      }
                      int v133 = v109;
                      uint64_t v37 = FigSignalErrorAt();
                    }
                    goto LABEL_324;
                  }
                  goto LABEL_322;
                }
              }
              else
              {
                char v139 = 0;
              }
              uint64_t v109 = 0;
              if (BYTE1(v163) && (uint64_t)v160 >= 1)
              {
                uint64_t v137 = 0;
                if (BYTE5(__src[2]))
                {
                  uint64_t ThumbnailCountForIndex_1 = FigSignalErrorAt();
                  goto LABEL_242;
                }
              }
              else
              {
                uint64_t v137 = 0;
              }
LABEL_244:
              uint64_t v131 = Int;
              int v111 = BYTE4(__src[38]);
              if (BYTE4(__src[38]))
              {
                int v112 = 0;
                int v113 = 1;
                if (LODWORD(__src[23]) > 8)
                {
                  int v111 = 0;
                }
                else if (((1 << SLOBYTE(__src[23])) & 0x18) != 0)
                {
                  int v113 = 0;
                  int v112 = 1;
                  int v111 = 1;
                }
                else if (((1 << SLOBYTE(__src[23])) & 0x60) != 0)
                {
                  int v113 = 0;
                  int v112 = 0;
                  int v111 = 2;
                }
                else
                {
                  int v111 = 0;
                  if (((1 << SLOBYTE(__src[23])) & 0x180) != 0)
                  {
                    int v113 = 0;
                    int v112 = 0;
                    int v111 = 3;
                  }
                }
              }
              else
              {
                int v112 = 0;
                int v113 = 1;
              }
              long long v153 = 0u;
              long long v154 = 0u;
              long long v151 = 0u;
              long long v152 = 0u;
              long long v149 = 0u;
              long long v150 = 0u;
              long long v147 = 0u;
              long long v148 = 0u;
              long long v145 = 0u;
              long long v146 = 0u;
              long long v144 = 0u;
              unint64_t v155 = 0;
              v142[0] = a1;
              LODWORD(v144) = v111;
              memcpy(v143, __src, sizeof(v143));
              v142[1] = v136;
              if (v158) {
                BOOL v114 = BYTE8(v164) == 0;
              }
              else {
                BOOL v114 = 1;
              }
              char v115 = !v114;
              LOBYTE(v152) = v115;
              if (!v114)
              {
                *((void *)&v152 + 1) = a3;
                *(void *)&long long v153 = v92;
              }
              *((void *)&v144 + 1) = 0;
              *(void *)&long long v145 = a1;
              long long v146 = v171;
              *((void *)&v145 + 1) = v167;
              BYTE8(v147) = BYTE1(__src[0]);
              LOBYTE(v147) = BYTE6(__src[38]);
              DWORD1(v147) = __src[9];
              BYTE9(v147) = BYTE1(__src[13]);
              WORD5(v147) = WORD1(__src[8]);
              BYTE12(v147) = BYTE4(__src[8]);
              BYTE13(v147) = __src[15];
              *(void *)&long long v148 = __src[16];
              DWORD2(v148) = __src[17];
              WORD6(v148) = WORD2(__src[17]);
              *((void *)&v149 + 1) = __src[12];
              *(void *)&long long v149 = __src[18];
              if (BYTE5(__src[38]) || vabdd_f64(floor((double)__src[24] * 0.5), (double)__src[24] * 0.5) >= 0.000001) {
                goto LABEL_266;
              }
              if (vabdd_f64(floor((double)__src[25] * 0.5), (double)__src[25] * 0.5) >= 0.000001) {
                char v115 = 1;
              }
              if (v115)
              {
LABEL_266:
                unint64_t v116 = 1;
              }
              else
              {
                *((void *)&v153 + 1) = __src[3] / __src[24];
                *(void *)&long long v154 = __src[4] / __src[25];
                unint64_t v128 = __src[6] + __src[4] - 1;
                unint64_t v116 = (__src[5] + __src[3] + __src[24] + ~((unint64_t)(__src[5] + __src[3] - 1) % __src[24]))
                     / __src[24]
                     - __src[3] / __src[24];
                *((void *)&v154 + 1) = v116;
                unint64_t v155 = (__src[6] + __src[4] + __src[25] + ~(v128 % __src[25])) / __src[25] - __src[4] / __src[25];
                if ((v113 | v112) == 1)
                {
                  *((void *)&v151 + 1) = (__src[6] + __src[4] + __src[25] + ~(v128 % __src[25])) / __src[25]
                                         - __src[4] / __src[25];
LABEL_268:
                  v141[2] = a3;
                  v141[3] = a4;
                  v141[0] = a1;
                  v141[1] = v109;
                  int v133 = v109;
                  if (theDict)
                  {
                    uint64_t v117 = __src[28];
                    uint64_t v118 = __src[29];
                    uint64_t updated = CMPhotoUpdateImageProperties(&theDict, HIBYTE(__src[8]), 1, (double)__src[28], (double)__src[29]);
                    if (updated)
                    {
                      uint64_t v37 = updated;
                      CFIndex v33 = v92;
                      CFDataRef v120 = v134;
                      Int = v131;
                      goto LABEL_284;
                    }
                  }
                  else
                  {
                    uint64_t v117 = __src[28];
                    uint64_t v118 = __src[29];
                  }
                  unsigned int v121 = HIDWORD(__src[0]);
                  int v122 = -2;
                  unsigned __int8 v123 = BYTE3(v163);
                  while (1)
                  {
                    *((void *)&v150 + 1) = 0;
                    *(void *)&long long v151 = 0;
                    id v124 = (uint64_t (*)(uint64_t, void **))_transcodeSourceCallbackFullImageWithAlpha;
                    if (!(_BYTE)v152) {
                      id v124 = (uint64_t (*)(uint64_t, void **))_transcodeSourceCallback;
                    }
                    uint64_t v125 = CMPhotoJFIFTranscodeStrips(allocator, v117, v118, *((void *)&v151 + 1) > 1uLL, v121, SHIDWORD(v165), v166, v123, BYTE11(v164), SBYTE10(v164), v124, (uint64_t)v142, v139, v137, (uint64_t)v141, v160, (uint64_t (*)(uint64_t, uint64_t, const void **, const __CFDictionary **, int *, const void **, __CVBuffer **, CFTypeRef *, CFTypeRef *))_transcodeAuxiliaryImageCallback_0, (uint64_t)&v159, theDict,
                             (uint64_t)v168,
                             (const void *)v171,
                             *((const void **)&v171 + 1),
                             v167,
                             (const __CFData **)&v170);
                    uint64_t v37 = v125;
                    if (!v125 || BYTE3(v163)) {
                      break;
                    }
                    if (CMPhotoUnifiedJPEGEncoderIsHardwareAvailable())
                    {
                      unsigned __int8 v123 = 1;
                      BYTE3(v163) = 1;
                      if (!__CFADD__(v122++, 1)) {
                        continue;
                      }
                    }
                    CFIndex v33 = v92;
                    Int = v131;
                    CFDataRef v120 = v134;
                    BOOL v89 = v136;
                    goto LABEL_284;
                  }
                  CFDataRef v120 = v134;
                  BOOL v89 = v136;
                  Int = v131;
                  if (!v125)
                  {
                    *id v130 = v170;
                    CFTypeRef v170 = 0;
                  }
                  CFIndex v33 = v92;
                  goto LABEL_284;
                }
              }
              *((void *)&v151 + 1) = v116;
              goto LABEL_268;
            }
            uint64_t PictureCollectionCodecPool = FigSignalErrorAt();
          }
        }
      }
    }
    uint64_t v37 = PictureCollectionCodecPool;
  }
  Int = 0;
  int v133 = 0;
LABEL_325:
  CFDataRef v120 = v134;
LABEL_284:
  _freeTranscodeAuxiliaryEntries(v160, v120);
  if (v89) {
    CFRelease(v89);
  }
LABEL_286:
  if (theDict) {
    CFRelease(theDict);
  }
  if (v33) {
    CFRelease(v33);
  }
  if (v32) {
    CFRelease(v32);
  }
  if (*((void *)&v171 + 1)) {
    CFRelease(*((CFTypeRef *)&v171 + 1));
  }
  if (v170) {
    CFRelease(v170);
  }
  if (v133) {
    CFRelease(v133);
  }
  if (Int) {
    CFRelease(Int);
  }
  CMPhotoSurfacePoolMarkCachesVolatile(v171, 0);
  if ((void)v171) {
    CFRelease((CFTypeRef)v171);
  }
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  return v37;
}

uint64_t _copyExifForIndex_1(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __CFData **a6)
{
  return _copyMetadataForIndex(a1, 0, a2, a3, a5, a6);
}

uint64_t _copyXMPForIndex_1(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, __CFData **a5)
{
  return _copyMetadataForIndex(a1, 1, a2, a3, 0, a5);
}

uint64_t _getDebugMetadataCountForIndex_0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _getMetadataCountForIndex(a1, 2, a2, a4);
}

uint64_t _copyDebugMetadataForIndex_0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, __CFData **a5)
{
  return _copyMetadataForIndex(a1, 2, a2, a3, 0, a5);
}

uint64_t _getCustomMetadataCountForIndex_0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _getMetadataCountForIndex(a1, 4, a2, a4);
}

uint64_t _copyCustomMetadataForIndex_0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, __CFData **a5)
{
  return _copyMetadataForIndex(a1, 4, a2, a3, 0, a5);
}

uint64_t _getTileSizeForIndex_0(uint64_t a1, uint64_t a2, uint64_t a3, BOOL *a4, void *a5, void *a6)
{
  CFTypeRef v26 = 0;
  CFTypeRef cf = 0;
  unint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  CFTypeRef v13 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, void))(v12 + 16);
  if (!v13)
  {
    uint64_t v18 = 4294954514;
    goto LABEL_22;
  }
  uint64_t TileGeometryFromPictureTileCursorService = v13(v10, a2, &cf, 0);
  if (TileGeometryFromPictureTileCursorService) {
    goto LABEL_27;
  }
  CFTypeRef v15 = cf;
  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v16) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v19 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(v17 + 8);
  if (!v19)
  {
LABEL_21:
    uint64_t v18 = 0;
    goto LABEL_22;
  }
  uint64_t v20 = v19(v15, &v26);
  uint64_t v18 = v20;
  if (v20)
  {
    BOOL v21 = 0;
    if (v20 == -17161) {
      goto LABEL_15;
    }
    goto LABEL_21;
  }
  uint64x2_t v23 = 0uLL;
  uint64_t TileGeometryFromPictureTileCursorService = _getTileGeometryFromPictureTileCursorService(v26, &v23, &v24, 0);
  if (TileGeometryFromPictureTileCursorService)
  {
LABEL_27:
    uint64_t v18 = TileGeometryFromPictureTileCursorService;
    goto LABEL_22;
  }
  BOOL v21 = v23.i64[1] * v23.i64[0] > 1uLL;
LABEL_15:
  if (a4) {
    *a4 = v21;
  }
  if (a5) {
    *a5 = v24;
  }
  if (a6) {
    *a6 = v25;
  }
LABEL_22:
  if (cf) {
    CFRelease(cf);
  }
  if (v26) {
    CFRelease(v26);
  }
  return v18;
}

uint64_t _createSequenceContainer(uint64_t a1, uint64_t a2, CFIndex a3, uint64_t *a4)
{
  if (!a4) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 120)
    || (*(unsigned char *)(a1 + 120) = 1,
        uint64_t result = CMPhotoDecompressionContainerHEICS_GetSequenceInfoFromSource(*(const void **)(a1 + 56), (__CFArray **)(a1 + 128)), !result))
  {
    if (a3 < 0) {
      return 4294950306;
    }
    CFArrayRef Count = *(const __CFArray **)(a1 + 128);
    if (Count) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if ((uint64_t)Count <= a3)
    {
      return 4294950306;
    }
    else
    {
      uint64_t MutableCopy = FigCFDictionaryCreateMutableCopy();
      if (MutableCopy)
      {
        uint64_t v10 = (__CFDictionary *)MutableCopy;
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 128), a3);
        CFDictionarySetValue(v10, @"SequenceInfo", ValueAtIndex);
        if (!FigCFDictionaryGetValue())
        {
          if (*(unsigned char *)(a1 + 28)) {
            CFDictionarySetValue(v10, @"UseLenientParsingMode", (const void *)*MEMORY[0x1E4F1CFD0]);
          }
        }
        uint64_t v12 = CMPhotoDecompressionContainerCreate(*(void *)(a1 + 40), 0, v10, *(void *)(a1 + 16), 0, a4);
        CFRelease(v10);
        return v12;
      }
      else
      {
        return 4294950305;
      }
    }
  }
  return result;
}

uint64_t _copyImageSubsamplingForIndex_1(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  CFTypeRef v13 = 0;
  uint64_t v14 = 0;
  CFTypeRef cf = 0;
  if (!a3)
  {
    uint64_t v9 = 0;
    goto LABEL_15;
  }
  InfoFromFormatDescriptiouint64_t n = _copyFormatDescriptionForIndex_1((void *)a1, a2, (uint64_t)a3, &v13);
  if (!InfoFromFormatDescription)
  {
    if (CMFormatDescriptionGetMediaSubType(v13) != 1735551332)
    {
      uint64_t v8 = 0;
      FormatDescriptiouint64_t n = v13;
LABEL_12:
      InfoFromFormatDescriptiouint64_t n = CMPhotoGetInfoFromFormatDescription(FormatDescription, v8, *(unsigned __int8 *)(a1 + 28), 0, 0, a3, 0, 0, 0, 0, 0, 0);
      goto LABEL_13;
    }
    uint64_t v11 = -1;
    InfoFromFormatDescriptiouint64_t n = CMPhotoDecompressionContainerInternalToExternalIndexAndCopyAlternateOptions((void *)a1, a2, &v11, 0, (CFMutableDictionaryRef *)&cf);
    if (!InfoFromFormatDescription)
    {
      InfoFromFormatDescriptiouint64_t n = CMPhotoDecompressionContainerCopySampleBufferForIndexWithOptions((void *)a1, (const __CFNumber *)v11, (const __CFDictionary *)cf, (uint64_t)&v14);
      if (!InfoFromFormatDescription)
      {
        if (v13)
        {
          CFRelease(v13);
          CFTypeRef v13 = 0;
        }
        FormatDescriptiouint64_t n = CMSampleBufferGetFormatDescription(v14);
        if (FormatDescription) {
          FormatDescriptiouint64_t n = (const opaqueCMFormatDescription *)CFRetain(FormatDescription);
        }
        CFTypeRef v13 = FormatDescription;
        uint64_t v8 = v14;
        goto LABEL_12;
      }
    }
  }
LABEL_13:
  uint64_t v9 = InfoFromFormatDescription;
  if (v13) {
    CFRelease(v13);
  }
LABEL_15:
  if (v14) {
    CFRelease(v14);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v9;
}

uint64_t _copyImageIsRGBForIndex_1(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  CFTypeRef v15 = 0;
  CFTypeRef cf = 0;
  if (!a3) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const void **, void))(v8 + 16);
  if (v9)
  {
    uint64_t v10 = v9(v6, a2, &v15, 0);
    if (v10)
    {
      uint64_t v12 = v10;
    }
    else
    {
      uint64_t v11 = _copyColorInfoForItem((unsigned char *)a1, v15, 0, 0, 0, 0, 0, 0, 0, &cf, 0, 0, 0);
      if (!v11 || (uint64_t v12 = v11, v11 == -16993))
      {
        uint64_t v12 = 0;
        *a3 = FigCFEqual();
      }
    }
  }
  else
  {
    uint64_t v12 = 4294954514;
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v15) {
    CFRelease(v15);
  }
  return v12;
}

uint64_t _copyThumbnailFormatDescriptionForIndex(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  CFTypeRef cf = 0;
  uint64_t v26 = 0;
  CFTypeRef v24 = 0;
  if (!a4) {
    return 0;
  }
  uint64_t v8 = a1[6];
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, void))(v10 + 16);
  if (v12)
  {
    uint64_t v13 = v12(v8, a2, &cf, 0);
    if (v13) {
      goto LABEL_25;
    }
    CFTypeRef v14 = cf;
    uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v15) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v17 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *))(v16 + 24);
    if (v17)
    {
      uint64_t v13 = v17(v14, a3, &v24);
      if (!v13)
      {
        CFAllocatorRef v18 = CFGetAllocator(a1);
        uint64_t FigBaseObject = FigPictureReaderGetFigBaseObject();
        uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v20) {
          uint64_t v21 = v20;
        }
        else {
          uint64_t v21 = 0;
        }
        uint64_t v22 = *(uint64_t (**)(uint64_t, void, CFAllocatorRef, uint64_t *))(v21 + 48);
        if (v22)
        {
          uint64_t v11 = v22(FigBaseObject, *MEMORY[0x1E4F333D0], v18, &v26);
          if (!v11) {
            *a4 = v26;
          }
          goto LABEL_20;
        }
        goto LABEL_19;
      }
LABEL_25:
      uint64_t v11 = v13;
      goto LABEL_20;
    }
  }
LABEL_19:
  uint64_t v11 = 4294954514;
LABEL_20:
  if (cf) {
    CFRelease(cf);
  }
  if (v24) {
    CFRelease(v24);
  }
  return v11;
}

uint64_t _getThumbnailGeometryForIndex_0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, int *a6)
{
  CFTypeRef v26 = 0;
  CFTypeRef cf = 0;
  long long v24 = 0u;
  long long v25 = 0u;
  int v23 = 1;
  uint64_t v12 = *(void *)(a1 + 48);
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, void))(v14 + 16);
  if (!v15) {
    goto LABEL_19;
  }
  uint64_t ImageGeometryFromPictureReader = v15(v12, a2, &cf, 0);
  if (ImageGeometryFromPictureReader) {
    goto LABEL_25;
  }
  CFTypeRef v17 = cf;
  uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v19 = v18 ? v18 : 0;
  uint64_t v20 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *))(v19 + 24);
  if (!v20)
  {
LABEL_19:
    uint64_t v21 = 4294954514;
    goto LABEL_20;
  }
  uint64_t ImageGeometryFromPictureReader = v20(v17, a3, &v26);
  if (ImageGeometryFromPictureReader) {
    goto LABEL_25;
  }
  uint64_t ImageGeometryFromPictureReader = CMPhotoPictureReaderGetImageGeometryFromPictureReader(v26, *(unsigned __int8 *)(a1 + 28), (unint64_t)&v24, 0);
  if (ImageGeometryFromPictureReader) {
    goto LABEL_25;
  }
  if (a6)
  {
    uint64_t ImageGeometryFromPictureReader = _getImageOrientation(a1, v26, cf, &v23);
    if (!ImageGeometryFromPictureReader)
    {
      *a6 = v23;
      goto LABEL_15;
    }
LABEL_25:
    uint64_t v21 = ImageGeometryFromPictureReader;
    goto LABEL_20;
  }
LABEL_15:
  if (a4) {
    *a4 = v25;
  }
  uint64_t v21 = 0;
  if (a5) {
    *a5 = *((void *)&v25 + 1);
  }
LABEL_20:
  if (cf) {
    CFRelease(cf);
  }
  if (v26) {
    CFRelease(v26);
  }
  return v21;
}

uint64_t _copyThumbnailBitDepthForIndex_0(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  CFTypeRef cf = 0;
  CFTypeRef v20 = 0;
  if (!a4) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, void))(v9 + 16);
  if (!v10)
  {
LABEL_15:
    uint64_t v16 = 4294954514;
    goto LABEL_16;
  }
  uint64_t v11 = v10(v7, a2, &v20, 0);
  if (!v11)
  {
    CFTypeRef v12 = v20;
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *))(v14 + 24);
    if (v15)
    {
      uint64_t v16 = v15(v12, a3, &cf);
      CFTypeRef v17 = cf;
      if (!v16)
      {
        uint64_t v16 = CMPhotoPictureReaderCopyImageBitDepth(cf, a4);
        CFTypeRef v17 = cf;
      }
      if (v17) {
        CFRelease(v17);
      }
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  uint64_t v16 = v11;
LABEL_16:
  if (v20) {
    CFRelease(v20);
  }
  return v16;
}

uint64_t _getThumbnailEncodedPixelFormatForIndex(void *a1, uint64_t a2, uint64_t a3, int *a4)
{
  CFTypeRef v23 = 0;
  CMSampleBufferRef sbuf = 0;
  CFTypeRef v21 = 0;
  CFTypeRef cf = 0;
  if (!a4)
  {
    uint64_t v13 = 0;
    goto LABEL_24;
  }
  if (a1[6])
  {
    uint64_t v20 = -1;
    uint64_t YUVPixelFormatForJPEG = CMPhotoDecompressionContainerInternalToExternalIndexAndCopyAlternateOptions(a1, a2, &v20, 0, (CFMutableDictionaryRef *)&v23);
    if (!YUVPixelFormatForJPEG)
    {
      uint64_t YUVPixelFormatForJPEG = CMPhotoDecompressionContainerCopyThumbnailSampleBufferForIndexWithOptions(a1, (const __CFNumber *)v20, a3, (const __CFDictionary *)v23, (uint64_t)&sbuf);
      if (!YUVPixelFormatForJPEG)
      {
        FormatDescriptiouint64_t n = CMSampleBufferGetFormatDescription(sbuf);
        if (CMFormatDescriptionGetMediaSubType(FormatDescription) == 1785750887)
        {
          uint64_t v10 = a1[6];
          uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v11) {
            uint64_t v12 = v11;
          }
          else {
            uint64_t v12 = 0;
          }
          uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, void))(v12 + 16);
          if (!v14) {
            goto LABEL_19;
          }
          uint64_t YUVPixelFormatForJPEG = v14(v10, a2, &cf, 0);
          if (!YUVPixelFormatForJPEG)
          {
            CFTypeRef v15 = cf;
            uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v16) {
              uint64_t v17 = v16;
            }
            else {
              uint64_t v17 = 0;
            }
            uint64_t v18 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *))(v17 + 24);
            if (v18)
            {
              uint64_t YUVPixelFormatForJPEG = v18(v15, a3, &v21);
              if (!YUVPixelFormatForJPEG) {
                uint64_t YUVPixelFormatForJPEG = CMPhotoPictureReaderGetYUVPixelFormatForJPEG((uint64_t)v21, a4);
              }
              goto LABEL_9;
            }
LABEL_19:
            uint64_t v13 = 4294954514;
            goto LABEL_20;
          }
        }
        else
        {
          uint64_t YUVPixelFormatForJPEG = CMPhotoDecompressionUtilityGetNativePixelFormatFromFormatDescription(FormatDescription, (uint64_t)sbuf, a4);
        }
      }
    }
  }
  else
  {
    uint64_t YUVPixelFormatForJPEG = FigSignalErrorAt();
  }
LABEL_9:
  uint64_t v13 = YUVPixelFormatForJPEG;
LABEL_20:
  if (cf) {
    CFRelease(cf);
  }
  if (v21) {
    CFRelease(v21);
  }
LABEL_24:
  if (sbuf) {
    CFRelease(sbuf);
  }
  if (v23) {
    CFRelease(v23);
  }
  return v13;
}

uint64_t _copyAuxiliaryImageBitDepthForIndex_0(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  CFTypeRef cf = 0;
  CFTypeRef v20 = 0;
  if (!a4) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, void))(v9 + 16);
  if (!v10)
  {
LABEL_15:
    uint64_t v16 = 4294954514;
    goto LABEL_16;
  }
  uint64_t v11 = v10(v7, a2, &v20, 0);
  if (!v11)
  {
    CFTypeRef v12 = v20;
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    CFTypeRef v15 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *))(v14 + 40);
    if (v15)
    {
      uint64_t v16 = v15(v12, a3, &cf);
      CFTypeRef v17 = cf;
      if (!v16)
      {
        uint64_t v16 = CMPhotoPictureReaderCopyImageBitDepth(cf, a4);
        CFTypeRef v17 = cf;
      }
      if (v17) {
        CFRelease(v17);
      }
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  uint64_t v16 = v11;
LABEL_16:
  if (v20) {
    CFRelease(v20);
  }
  return v16;
}

uint64_t _getAuxiliaryEncodedPixelFormatForIndex(void *a1, uint64_t a2, uint64_t a3, int *a4)
{
  CFTypeRef cf = 0;
  CMSampleBufferRef sbuf = 0;
  if (!a4) {
    return 0;
  }
  if (a1[6])
  {
    uint64_t v12 = -1;
    uint64_t v7 = CMPhotoDecompressionContainerInternalToExternalIndexAndCopyAlternateOptions(a1, a2, &v12, 0, (CFMutableDictionaryRef *)&cf);
    if (!v7)
    {
      NativePixelFormatFromFormatDescriptiouint64_t n = CMPhotoDecompressionContainerCopyAuxiliaryImageSampleBufferForIndexWithOptions(a1, (const __CFNumber *)v12, a3, (const __CFDictionary *)cf, (uint64_t)&sbuf);
      CMSampleBufferRef v9 = sbuf;
      if (!NativePixelFormatFromFormatDescription)
      {
        FormatDescriptiouint64_t n = CMSampleBufferGetFormatDescription(sbuf);
        NativePixelFormatFromFormatDescriptiouint64_t n = CMPhotoDecompressionUtilityGetNativePixelFormatFromFormatDescription(FormatDescription, (uint64_t)sbuf, a4);
        CMSampleBufferRef v9 = sbuf;
      }
      if (v9) {
        CFRelease(v9);
      }
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v7 = FigSignalErrorAt();
  }
  NativePixelFormatFromFormatDescriptiouint64_t n = v7;
LABEL_8:
  if (cf) {
    CFRelease(cf);
  }
  return NativePixelFormatFromFormatDescription;
}

uint64_t _copyColorSpaceForIndex_1(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  CFTypeRef cf = 0;
  if (!a3) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  CMSampleBufferRef v9 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, void))(v8 + 16);
  if (!v9) {
    return 4294954514;
  }
  uint64_t v10 = v9(v6, a2, &cf, 0);
  CFTypeRef v11 = cf;
  if (v10)
  {
    uint64_t v13 = v10;
    if (!cf) {
      return v13;
    }
    goto LABEL_11;
  }
  unsigned int v12 = _copyColorInfoForItem((unsigned char *)a1, cf, 0, 0, 0, 0, a3, 0, 0, 0, 0, 0, 0);
  if (v12 == -16993) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = v12;
  }
  CFTypeRef v11 = cf;
  if (cf) {
LABEL_11:
  }
    CFRelease(v11);
  return v13;
}

uint64_t _readAlphaInfoSEIPayload(uint64_t a1, _DWORD *a2)
{
  CFTypeRef v13 = 0;
  memset(v12, 0, sizeof(v12));
  uint64_t v11 = 0;
  unsigned __int16 v10 = 0;
  int v9 = 0;
  uint64_t v8 = 0;
  uint64_t Bytes = FigByteStreamCreateWithCFData();
  if (Bytes) {
    goto LABEL_17;
  }
  CMPhotoBitStreamReadInit((uint64_t)v12, (uint64_t)v13, 1);
  uint64_t Bytes = CMPhotoBitStreamReadBytes(v12, 4, (unsigned int *)&v11 + 1);
  if (Bytes) {
    goto LABEL_17;
  }
  uint64_t Bytes = CMPhotoBitStreamReadBytes(v12, 4, (unsigned int *)&v11);
  if (Bytes) {
    goto LABEL_17;
  }
  uint64_t Bytes = CMPhotoBitStreamReadBytes(v12, 2, (unsigned int *)&v10);
  if (Bytes) {
    goto LABEL_17;
  }
  int v4 = (v10 >> 9) & 0x3F;
  unsigned __int16 v10 = (v10 >> 9) & 0x3F;
  if (v4 != 39) {
    goto LABEL_18;
  }
  uint64_t Bytes = CMPhotoBitStreamReadVariableLengthEntry(v12, &v9);
  if (Bytes)
  {
LABEL_17:
    uint64_t v5 = Bytes;
    goto LABEL_14;
  }
  if (v9 != 165)
  {
LABEL_18:
    uint64_t v5 = 4294950194;
    goto LABEL_14;
  }
  uint64_t Bytes = CMPhotoBitStreamReadVariableLengthEntry(v12, (_DWORD *)&v8 + 1);
  if (Bytes) {
    goto LABEL_17;
  }
  uint64_t Bytes = CMPhotoBitStreamReadBits((uint64_t)v12, 1uLL, &v8);
  if (Bytes) {
    goto LABEL_17;
  }
  if (v8) {
    goto LABEL_18;
  }
  int v7 = 0;
  uint64_t v5 = CMPhotoBitStreamReadBits((uint64_t)v12, 3uLL, &v7);
  if (!v5 && *a2) {
    *a2 = v7;
  }
LABEL_14:
  if (v13) {
    CFRelease(v13);
  }
  return v5;
}

uint64_t ___decodeItem_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  int v3 = *(unsigned __int8 *)(a1 + 89);
  char v4 = *(unsigned char *)(a1 + 88);
  char v5 = *(unsigned char *)(a1 + 90);
  char v6 = *(unsigned char *)(a1 + 91);
  unsigned __int8 v7 = *(unsigned char *)(a1 + 92);
  uint64_t v8 = *(unsigned int *)(a1 + 128);
  int v9 = *(__CVBuffer **)(a1 + 136);
  int v10 = *(_DWORD *)(a1 + 288);
  uint64_t v12 = *(void *)(a1 + 272);
  uint64_t v11 = *(void *)(a1 + 280);
  CFTypeRef v13 = *(__CVBuffer **)v11;
  long long v14 = *(_OWORD *)(a1 + 256);
  v21[6] = *(_OWORD *)(a1 + 240);
  v21[7] = v14;
  uint64_t v22 = v12;
  long long v15 = *(_OWORD *)(a1 + 192);
  v21[2] = *(_OWORD *)(a1 + 176);
  v21[3] = v15;
  long long v16 = *(_OWORD *)(a1 + 224);
  v21[4] = *(_OWORD *)(a1 + 208);
  v21[5] = v16;
  long long v17 = *(_OWORD *)(a1 + 160);
  v21[0] = *(_OWORD *)(a1 + 144);
  v21[1] = v17;
  long long v18 = *(_OWORD *)(v11 + 24);
  v20[0] = *(_OWORD *)(v11 + 8);
  v20[1] = v18;
  uint64_t result = _transferToCanvas(v2, v3, v4, v5, v6, v7, v8, v9, (uint64_t)v21, v10, (unint64_t *)v20, v13, *(void *)(a1 + 292), *(unsigned int *)(a1 + 300));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t ___copyColorInfoForItem_block_invoke(uint64_t a1, void *a2)
{
  return _createSampleBufferFromPictureReader(*(CFTypeRef *)(a1 + 32), *(const void **)(a1 + 40), a2, 0);
}

uint64_t _copyMultilayerProperties(uint64_t a1, uint64_t a2, CFTypeRef *a3, void *a4, void *a5, BOOL *a6)
{
  CFTypeRef v33 = 0;
  long long v32 = 0uLL;
  uint64_t FigBaseObject = FigPictureReaderGetFigBaseObject();
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  long long v14 = *(uint64_t (**)(uint64_t, void, uint64_t, CFTypeRef *))(v13 + 48);
  if (!v14) {
    goto LABEL_21;
  }
  uint64_t v15 = v14(FigBaseObject, *MEMORY[0x1E4F33400], a1, &v33);
  if ((v15 + 12784) >= 2 && v15 != 0) {
    goto LABEL_27;
  }
  uint64_t v17 = FigPictureReaderGetFigBaseObject();
  uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v19 = v18 ? v18 : 0;
  CFTypeRef v20 = *(uint64_t (**)(uint64_t, void, uint64_t, char *))(v19 + 48);
  if (!v20)
  {
LABEL_21:
    uint64_t v25 = 4294954514;
    goto LABEL_22;
  }
  uint64_t v15 = v20(v17, *MEMORY[0x1E4F33418], a1, (char *)&v32 + 8);
  if ((v15 + 12784) >= 2 && v15 != 0)
  {
LABEL_27:
    uint64_t v25 = v15;
    goto LABEL_22;
  }
  uint64_t v22 = FigPictureReaderGetFigBaseObject();
  uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v23) {
    uint64_t v24 = v23;
  }
  else {
    uint64_t v24 = 0;
  }
  CFTypeRef v27 = *(uint64_t (**)(uint64_t, void, uint64_t, long long *))(v24 + 48);
  if (v27)
  {
    uint64_t v28 = v27(v22, *MEMORY[0x1E4F33408], a1, &v32);
    if ((v28 + 12784) < 2 || (uint64_t v25 = v28, !v28))
    {
      uint64_t v30 = *((void *)&v32 + 1);
      CFTypeRef v29 = (const void *)v32;
      BOOL v31 = v32 != 0 || v33 != 0;
      if (a5)
      {
        *a5 = v32;
        *(void *)&long long v32 = 0;
        CFTypeRef v29 = 0;
      }
      if (a4)
      {
        *a4 = v30;
        *((void *)&v32 + 1) = 0;
      }
      if (a3)
      {
        *a3 = v33;
        CFTypeRef v33 = 0;
      }
      uint64_t v25 = 0;
      if (a6) {
        *a6 = v31;
      }
      goto LABEL_45;
    }
  }
  else
  {
    uint64_t v25 = 4294954514;
  }
  CFTypeRef v29 = (const void *)v32;
LABEL_45:
  if (v29) {
    CFRelease(v29);
  }
LABEL_22:
  if (*((void *)&v32 + 1)) {
    CFRelease(*((CFTypeRef *)&v32 + 1));
  }
  if (v33) {
    CFRelease(v33);
  }
  return v25;
}

uint64_t _logHang(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    int v23 = 134219008;
    uint64_t v24 = a1;
    __int16 v25 = 1024;
    *(_DWORD *)CFTypeRef v26 = a2;
    *(_WORD *)&v26[4] = 2048;
    *(void *)&v26[6] = a3;
    __int16 v27 = 2048;
    uint64_t v28 = a4;
    __int16 v29 = 1024;
    int v30 = a5;
    _os_log_impl(&dword_1AB8D3000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "CMPhoto: HangLog: Request ID = %zd; Hang reason code = %d; total tile count = %zd; unfinished tile count = %zd; pl"
      "ugin status = %d",
      (uint8_t *)&v23,
      0x2Cu);
  }
  if (a6 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v16 = *a6;
    uint64_t v17 = a6[1];
    int v23 = 134218240;
    uint64_t v24 = v16;
    __int16 v25 = 2048;
    *(void *)CFTypeRef v26 = v17;
    _os_log_impl(&dword_1AB8D3000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "CMPhoto: HangLog: imageSize = %zdx%zd", (uint8_t *)&v23, 0x16u);
  }
  if (a7 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v18 = *a7;
    uint64_t v19 = a7[1];
    int v23 = 134218240;
    uint64_t v24 = v18;
    __int16 v25 = 2048;
    *(void *)CFTypeRef v26 = v19;
    _os_log_impl(&dword_1AB8D3000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "CMPhoto: HangLog: tileSize = %zdx%zd", (uint8_t *)&v23, 0x16u);
  }
  if (a8 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v20 = *a8;
    uint64_t v21 = a8[1];
    int v23 = 134218240;
    uint64_t v24 = v20;
    __int16 v25 = 2048;
    *(void *)CFTypeRef v26 = v21;
    _os_log_impl(&dword_1AB8D3000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "CMPhoto: HangLog: scaledTileSize = %zdx%zd", (uint8_t *)&v23, 0x16u);
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT)) {
    _logHang_cold_1();
  }
  getpid();
  return WriteStackshotReportWithPID();
}

uint64_t _getLayerReaderAtPosition(const __CFArray *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  unint64_t v7 = a2 + *a4 * a3;
  if (v7 < CFArrayGetCount(a1) && (ValueAtIndex = CFArrayGetValueAtIndex(a1, v7)) != 0)
  {
    if (a5) {
      *a5 = ValueAtIndex;
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t _getDecoderReusableInfoForOverlay(const void *a1, CMFormatDescriptionRef desc, uint64_t a3)
{
  *(_DWORD *)a3 = CMFormatDescriptionGetMediaSubType(desc);
  CFGetAllocator(a1);
  CMFormatDescriptionGetExtensions(desc);
  uint64_t MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy) {
    return 4294950305;
  }
  unint64_t v7 = MutableCopy;
  CFDictionaryRemoveValue(MutableCopy, (const void *)*MEMORY[0x1E4F24A78]);
  CFDictionaryRemoveValue(v7, (const void *)*MEMORY[0x1E4F1EE20]);
  uint64_t v8 = *(const void **)(a3 + 8);
  if (v8) {
    CFRelease(v8);
  }
  *(void *)(a3 + 8) = v7;
  if (*(_DWORD *)a3 != 1936484717) {
    return 4294950298;
  }
  unsigned int v11 = 0;
  VersionFromFormatDescriptiouint64_t n = SlimVideoDecoder_GetVersionFromFormatDescription(desc, &v11);
  if (!VersionFromFormatDescription) {
    *(_DWORD *)(a3 + 16) = Slim_GetEquivalentBlockSizeVersion(v11);
  }
  return VersionFromFormatDescription;
}

uint64_t _copyFlexRangeDetails(uint64_t a1, uint64_t a2, uint64x2_t *a3, _OWORD *a4, __CFDictionary **a5, CFTypeRef *a6, void *a7, void *a8)
{
  CFTypeRef cf = 0;
  uint64_t FigBaseObject = FigPictureReaderGetFigBaseObject();
  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v16) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v18 = *(uint64_t (**)(uint64_t, void, uint64_t, CFTypeRef *))(v17 + 48);
  if (!v18)
  {
    uint64_t v29 = 4294954514;
    goto LABEL_32;
  }
  uint64_t FlexRangeMetadataDictionary = v18(FigBaseObject, *MEMORY[0x1E4F333A0], a1, &cf);
  if (FlexRangeMetadataDictionary) {
    goto LABEL_36;
  }
  CFDictionaryRef Value = (const void *)FigCFDictionaryGetValue();
  if (!Value) {
    goto LABEL_35;
  }
  uint64_t v21 = Value;
  CFTypeID v22 = CFGetTypeID(Value);
  if (v22 != CFDictionaryGetTypeID()) {
    goto LABEL_35;
  }
  CFArrayRef v23 = (const __CFArray *)FigCFDictionaryGetValue();
  if (!v23) {
    goto LABEL_35;
  }
  CFArrayRef v24 = v23;
  CFTypeID v25 = CFGetTypeID(v23);
  if (v25 != CFArrayGetTypeID() || CFArrayGetCount(v24) != 2) {
    goto LABEL_35;
  }
  ValueAtIndex = CFArrayGetValueAtIndex(v24, 0);
  __int16 v27 = CFArrayGetValueAtIndex(v24, 1);
  if (!a3) {
    goto LABEL_14;
  }
  float64x2_t v32 = *(float64x2_t *)MEMORY[0x1E4F1DB30];
  if (!FigCFDictionaryGetCGSizeIfPresent())
  {
LABEL_35:
    uint64_t FlexRangeMetadataDictionary = FigSignalErrorAt();
LABEL_36:
    uint64_t v29 = FlexRangeMetadataDictionary;
    goto LABEL_32;
  }
  *a3 = vcvtq_u64_f64(vrndaq_f64(v32));
LABEL_14:
  if (a4)
  {
    uint64_t FlexRangeMetadataDictionary = CMPhotoParseFlexRangeMetadataDictionary(v21, a4);
    if (FlexRangeMetadataDictionary) {
      goto LABEL_36;
    }
  }
  if (a5)
  {
    uint64_t FlexRangeMetadataDictionary = CMPhotoCreateFlexRangeMetadataDictionary((const __CFDictionary *)v21, a5);
    if (FlexRangeMetadataDictionary) {
      goto LABEL_36;
    }
  }
  if (a6) {
    *a6 = CFRetain(v21);
  }
  if (a7)
  {
    if (ValueAtIndex) {
      CFTypeRef v28 = CFRetain(ValueAtIndex);
    }
    else {
      CFTypeRef v28 = 0;
    }
    *a7 = v28;
  }
  if (a8)
  {
    if (v27) {
      CFTypeRef v30 = CFRetain(v27);
    }
    else {
      CFTypeRef v30 = 0;
    }
    uint64_t v29 = 0;
    *a8 = v30;
  }
  else
  {
    uint64_t v29 = 0;
  }
LABEL_32:
  if (cf) {
    CFRelease(cf);
  }
  return v29;
}

CFDictionaryRef _checkForbiddenAuxOptions_0(const __CFDictionary *theDict)
{
  v3[3] = *MEMORY[0x1E4F143B8];
  if (theDict)
  {
    CFDictionaryRef v1 = theDict;
    uint64_t v2 = 0;
    v3[0] = @"BackCGImageWithIOSurface";
    v3[1] = @"UseProvidedPixelBuffer";
    v3[2] = @"DryRun";
    while (!CFDictionaryContainsKey(v1, (const void *)v3[v2]))
    {
      if (++v2 == 3) {
        return 0;
      }
    }
    return (const __CFDictionary *)FigSignalErrorAt();
  }
  return theDict;
}

uint64_t _decodeAuxiliaryImage(void *a1, const void *a2, const void *a3, uint64_t a4, uint64_t a5, CFDictionaryRef theDict, BOOL a7, int a8, CGImageRef *a9)
{
  CFAllocatorRef v17 = (const __CFAllocator *)a1[5];
  CFTypeRef v37 = 0;
  CVPixelBufferRef pixelBuffer = 0;
  CFTypeRef v35 = 0;
  CFTypeRef cf = 0;
  int v34 = 0;
  unsigned __int8 v33 = 0;
  unsigned int v32 = 0;
  if (theDict)
  {
    BOOL v18 = CMPhotoCFDictionaryGetInt32IfPresent(theDict, @"OutputPixelFormat", &v32) != 0;
    CMPhotoCFDictionaryGetBooleanIfPresent(theDict, @"RestrictedDecoding", &v33);
    if (v33 && !VTAreVideoDecodersRunningInProcess())
    {
      uint64_t v20 = FigSignalErrorAt();
LABEL_16:
      CFDictionaryRef v21 = 0;
LABEL_36:
      CFDictionaryRef MutableCopy = 0;
      goto LABEL_37;
    }
    v33 &= CMPhotoRestrictedDecodingDisabled() == 0;
  }
  else
  {
    BOOL v18 = 0;
  }
  uint64_t v19 = _copyAuxiliaryImageMetadataFromCacheForIndex((uint64_t)a1, a4, a5, (uint64_t)a3, (uint64_t)a2, &cf, &v35, &v34);
  uint64_t v20 = v19;
  if (v19 && v19 != -16993) {
    goto LABEL_16;
  }
  int v30 = 0;
  unsigned int v31 = 0;
  if (v19 || !FigCFDictionaryGetInt32IfPresent())
  {
    if (theDict) {
      CFDictionaryRef v21 = (const __CFDictionary *)CFRetain(theDict);
    }
    else {
      CFDictionaryRef v21 = 0;
    }
  }
  else
  {
    CFDictionaryRef MutableCopy = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
    if (!MutableCopy)
    {
      CFDictionaryRef v21 = 0;
      uint64_t v20 = 4294950305;
      goto LABEL_37;
    }
    FigCFDictionaryGetInt32IfPresent();
    if (!v18) {
      unsigned int v32 = v31;
    }
    uint64_t v23 = FigCFDictionarySetInt();
    if (v23)
    {
      uint64_t v20 = v23;
      CFDictionaryRef v21 = 0;
      goto LABEL_37;
    }
    CFDictionaryRef v21 = MutableCopy;
  }
  uint64_t WrappedPixelBufferForType = _decodeImage_1(a1, a2, a3, -1, v21, a7, 2, 1, &pixelBuffer);
  if (WrappedPixelBufferForType)
  {
LABEL_35:
    uint64_t v20 = WrappedPixelBufferForType;
    goto LABEL_36;
  }
  CFTypeID v25 = pixelBuffer;
  if (!v32)
  {
LABEL_34:
    uint64_t WrappedPixelBufferForType = CMPhotoCreateWrappedPixelBufferForType(v17, v25, 0, a8, a9);
    goto LABEL_35;
  }
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  if (PixelFormatType == v32)
  {
    CFTypeID v25 = pixelBuffer;
    if (!PixelFormatType) {
      goto LABEL_34;
    }
  }
  else
  {
    uint64_t v29 = 0;
    uint64_t WrappedPixelBufferForType = CMPhotoDecompressionSessionCopySurfacePool(a1[2], &v37);
    if (WrappedPixelBufferForType) {
      goto LABEL_35;
    }
    uint64_t WrappedPixelBufferForType = CMPhotoCreateFractionalPixelBuffer(pixelBuffer, v37, v32, v33, (const __CFDictionary *)v35, (CFTypeRef *)&v29);
    if (WrappedPixelBufferForType) {
      goto LABEL_35;
    }
    if (pixelBuffer) {
      CFRelease(pixelBuffer);
    }
    CFTypeID v25 = v29;
    CVPixelBufferRef pixelBuffer = v29;
    if (!v32) {
      goto LABEL_34;
    }
  }
  OSType v27 = CVPixelBufferGetPixelFormatType(v25);
  if (v27 == v32)
  {
    CFTypeID v25 = pixelBuffer;
    goto LABEL_34;
  }
  CFDictionaryRef MutableCopy = 0;
  uint64_t v20 = 4294950304;
LABEL_37:
  if (cf) {
    CFRelease(cf);
  }
  if (v35) {
    CFRelease(v35);
  }
  if (v37) {
    CFRelease(v37);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (v21) {
    CFRelease(v21);
  }
  if (pixelBuffer) {
    CFRelease(pixelBuffer);
  }
  return v20;
}

uint64_t _copyAuxiliaryImageMetadataFromCacheForIndex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, _DWORD *a8)
{
  uint64_t v31 = 0;
  unsigned int v32 = &v31;
  uint64_t v33 = 0x2000000000;
  int v34 = 0;
  uint64_t v27 = 0;
  CFTypeRef v28 = &v27;
  uint64_t v29 = 0x2000000000;
  uint64_t v30 = 0;
  uint64_t v23 = 0;
  CFArrayRef v24 = &v23;
  uint64_t v25 = 0x2000000000;
  uint64_t v26 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = &v19;
  uint64_t v21 = 0x2000000000;
  int v22 = 0;
  unsigned int v11 = *(NSObject **)(a1 + 64);
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = *(void *)"";
  v18[2] = ___copyAuxiliaryImageMetadataFromCacheForIndex_block_invoke;
  v18[3] = &unk_1E5E2EA20;
  v18[8] = a1 + 40;
  v18[9] = a2;
  v18[10] = a3;
  v18[11] = a1;
  _OWORD v18[12] = a4;
  v18[13] = a5;
  v18[4] = &v31;
  v18[5] = &v27;
  v18[6] = &v23;
  v18[7] = &v19;
  dispatch_sync(v11, v18);
  if (!*((_DWORD *)v32 + 6))
  {
    if (a6)
    {
      uint64_t v12 = v28;
      *a6 = v28[3];
      _OWORD v12[3] = 0;
    }
    if (a7)
    {
      uint64_t v13 = v24;
      *a7 = v24[3];
      v13[3] = 0;
    }
    if (a8) {
      *a8 = *((_DWORD *)v20 + 6);
    }
  }
  long long v14 = (const void *)v28[3];
  if (v14) {
    CFRelease(v14);
  }
  uint64_t v15 = (const void *)v24[3];
  if (v15) {
    CFRelease(v15);
  }
  uint64_t v16 = *((unsigned int *)v32 + 6);
  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(&v23, 8);
  _Block_object_dispose(&v27, 8);
  _Block_object_dispose(&v31, 8);
  return v16;
}

uint64_t ___copyAuxiliaryImageMetadataFromCacheForIndex_block_invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 64);
  if (!*(unsigned char *)(result + 32)
    || *(void *)(result + 40) != *(void *)(a1 + 72)
    || *(void *)(result + 48) != *(void *)(a1 + 80))
  {
    _destroyAuxMetadataCache(result);
    uint64_t result = _parseAuxiliaryImageMetadataForIndex(*(void **)(a1 + 88), *(void *)(a1 + 72), *(void *)(a1 + 80), *(CFTypeRef *)(a1 + 96), *(CFTypeRef *)(a1 + 104), (int *)(*(void *)(a1 + 64) + 72), (CGImageMetadata **)(*(void *)(a1 + 64) + 56), (const __CFDictionary **)(*(void *)(a1 + 64) + 64));
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
    {
      uint64_t v3 = *(void *)(a1 + 64);
      uint64_t v4 = *(void *)(a1 + 72);
      *(unsigned char *)(v3 + 32) = 1;
      *(void *)(v3 + 40) = v4;
      *(void *)(v3 + 48) = *(void *)(a1 + 80);
    }
  }
  if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    CFTypeRef v5 = *(CFTypeRef *)(*(void *)(a1 + 64) + 56);
    if (v5) {
      CFTypeRef v5 = CFRetain(v5);
    }
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v5;
    uint64_t result = *(void *)(*(void *)(a1 + 64) + 64);
    if (result) {
      uint64_t result = (uint64_t)CFRetain((CFTypeRef)result);
    }
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = result;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = *(_DWORD *)(*(void *)(a1 + 64) + 72);
  }
  return result;
}

uint64_t _parseAuxiliaryImageMetadataForIndex(void *a1, uint64_t a2, uint64_t a3, CFTypeRef a4, CFTypeRef a5, int *a6, CGImageMetadata **a7, const __CFDictionary **a8)
{
  CFAllocatorRef v16 = CFGetAllocator(a1);
  CFTypeRef v44 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v42 = 0;
  CFTypeRef v43 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  CFTypeRef v39 = 0;
  if (!a5)
  {
    if (!a4)
    {
      uint64_t v25 = a1[6];
      uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v26) {
        uint64_t v27 = v26;
      }
      else {
        uint64_t v27 = 0;
      }
      CFTypeRef v35 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, void))(v27 + 16);
      if (!v35) {
        goto LABEL_36;
      }
      uint64_t ContiguousDataFromChunks = v35(v25, a2, &cf, 0);
      if (ContiguousDataFromChunks) {
        goto LABEL_49;
      }
      a4 = cf;
    }
    uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v19) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = 0;
    }
    CFTypeRef v28 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *))(v20 + 40);
    if (!v28)
    {
LABEL_36:
      uint64_t v34 = 4294954514;
      goto LABEL_37;
    }
    uint64_t ContiguousDataFromChunks = v28(a4, a3, &v44);
    if (ContiguousDataFromChunks) {
      goto LABEL_49;
    }
    a5 = v44;
  }
  uint64_t v38 = 0;
  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v17) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  uint64_t v21 = *(uint64_t (**)(CFTypeRef, uint64_t *))(v18 + 64);
  if (!v21) {
    goto LABEL_36;
  }
  uint64_t ContiguousDataFromChunks = v21(a5, &v38);
  if (ContiguousDataFromChunks) {
    goto LABEL_49;
  }
  if (v38 < 1)
  {
LABEL_48:
    uint64_t v34 = 4294950303;
    goto LABEL_37;
  }
  uint64_t v37 = 0;
  uint64_t v23 = *(void **)(CMBaseObjectGetVTable() + 16);
  if (v23) {
    CFArrayRef v24 = v23;
  }
  else {
    CFArrayRef v24 = 0;
  }
  if (*v24 >= 3uLL)
  {
    uint64_t v29 = (uint64_t (*)(CFTypeRef, void, uint64_t *, void **, void **, CFTypeRef *, void, CFTypeRef *))v24[16];
    if (v29)
    {
      uint64_t v30 = v29(a5, 0, &v37, &v41, &v40, &v43, 0, &v39);
      goto LABEL_28;
    }
  }
  uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v32 = v31 ? v31 : 0;
  uint64_t v33 = *(uint64_t (**)(CFTypeRef, void, uint64_t *, void **, void **, CFTypeRef *, void))(v32 + 72);
  if (!v33) {
    goto LABEL_36;
  }
  uint64_t v30 = v33(a5, 0, &v37, &v41, &v40, &v43, 0);
LABEL_28:
  uint64_t v34 = v30;
  if (v30) {
    goto LABEL_37;
  }
  uint64_t ContiguousDataFromChunks = CMPhotoPictureReaderCreateContiguousDataFromChunks((uint64_t)v16, v37, (uint64_t)v41, (uint64_t)v40, (uint64_t)v43, 0, (uint64_t)v39, 0, (__CFData **)&v42);
  if (!ContiguousDataFromChunks)
  {
    if (!CMPhotoAuxiliaryImageMetadataCreateFromXMPData(v16, (const __CFData *)v42, a6, a7, 0, a8))
    {
      uint64_t v34 = 0;
      goto LABEL_37;
    }
    goto LABEL_48;
  }
LABEL_49:
  uint64_t v34 = ContiguousDataFromChunks;
LABEL_37:
  if (cf) {
    CFRelease(cf);
  }
  if (v44) {
    CFRelease(v44);
  }
  if (v43) {
    CFRelease(v43);
  }
  if (v42) {
    CFRelease(v42);
  }
  if (v39) {
    CFRelease(v39);
  }
  free(v41);
  free(v40);
  return v34;
}

uint64_t _createOutputBufferAttributesForReader(const void *a1, const void *a2, const void *a3, int a4, const __CFDictionary *a5, CFMutableDictionaryRef *a6)
{
  uint64_t v30 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v23 = 0u;
  memset(v22, 0, sizeof(v22));
  _determineDecodeStrategy_1((uint64_t)a1, a2, a3, a5, 1, a4, 0, (uint64_t)v22);
  if (v9) {
    return v9;
  }
  CFAllocatorRef v10 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return 4294950305;
  }
  CFMutableDictionaryRef v12 = Mutable;
  unint64_t v13 = v25;
  uint64_t v14 = CMPhotoCFDictionarySetSize(Mutable, *MEMORY[0x1E4F24E10], v25);
  if (v14) {
    goto LABEL_16;
  }
  unint64_t v15 = *((void *)&v25 + 1);
  uint64_t v14 = CMPhotoCFDictionarySetSize(v12, *MEMORY[0x1E4F24D08], *((void *)&v25 + 1));
  if (v14) {
    goto LABEL_16;
  }
  unint64_t v16 = v23 + v13 + ~((v13 - 1) % (unint64_t)v23);
  unint64_t v17 = *((void *)&v23 + 1) + v15 + ~((v15 - 1) % *((void *)&v23 + 1));
  if (v23 != __PAIR128__(v15, v13)) {
    goto LABEL_11;
  }
  int v21 = 0;
  CMPhotoPictureReaderGetItemTypeFromReader(a2, &v21);
  if (v21 == 1752589105)
  {
    uint64_t v18 = 16;
    goto LABEL_10;
  }
  if (v21 == 1635135537)
  {
    uint64_t v18 = 128;
LABEL_10:
    v16 += v18 + ~((v18 - 1) & (v16 - 1));
    v17 += (-(int)v17 | 0xFFFFFFFFFFFFFFF0) + 16;
  }
LABEL_11:
  uint64_t v14 = CMPhotoCFDictionarySetSize(v12, *MEMORY[0x1E4F24CE8], v16 - v13);
  if (v14 || (uint64_t v14 = CMPhotoCFDictionarySetSize(v12, *MEMORY[0x1E4F24CD0], v17 - v15), v14))
  {
LABEL_16:
    uint64_t v19 = v14;
    goto LABEL_17;
  }
  uint64_t v19 = CMPhotoCFDictionarySetSize(v12, *MEMORY[0x1E4F24C98], 16);
  if (v19)
  {
LABEL_17:
    CFRelease(v12);
    return v19;
  }
  *a6 = v12;
  return v19;
}

uint64_t _transcodeSourceCallback(uint64_t a1, CVPixelBufferRef *a2)
{
  v57[0] = 0;
  unint64_t v3 = *(void *)(a1 + 440);
  unint64_t v2 = *(void *)(a1 + 448);
  if (v3 >= v2 || (uint64_t v4 = (unint64_t *)a1, *(unsigned char *)(a1 + 456)))
  {
    uint64_t v45 = 4294950304;
    goto LABEL_49;
  }
  char v6 = (const void *)(a1 + 16);
  if (v2 < 2)
  {
    uint64_t v37 = *(const void **)(a1 + 8);
    long long v38 = *(_OWORD *)(a1 + 384);
    __dst[2] = *(_OWORD *)(a1 + 368);
    __dst[3] = v38;
    long long v39 = *(_OWORD *)(a1 + 416);
    __dst[4] = *(_OWORD *)(a1 + 400);
    __dst[5] = v39;
    long long v40 = *(_OWORD *)(a1 + 352);
    __dst[0] = *(_OWORD *)(a1 + 336);
    __dst[1] = v40;
    uint64_t v36 = _applyDecodeStrategy(__dst, (uint64_t)v6, v37, 0, 0, 0, v57);
    if (!v36)
    {
      ++v4[55];
      goto LABEL_42;
    }
LABEL_47:
    uint64_t v45 = v36;
    goto LABEL_49;
  }
  uint64_t v47 = a2;
  int v7 = *(_DWORD *)(a1 + 328);
  unint64_t v8 = *(void *)(a1 + 208);
  unint64_t v9 = *(void *)(a1 + 216);
  uint64_t v53 = *(void *)(a1 + 488);
  uint64_t v54 = *(void *)(a1 + 480);
  unint64_t v51 = *(void *)(a1 + 304) + *(void *)(a1 + 288);
  unint64_t v52 = *(void *)(a1 + 288);
  unint64_t v49 = *(void *)(a1 + 296);
  unint64_t v50 = *(void *)(a1 + 312) + v49;
  unint64_t v10 = ~v3 + v2;
  unint64_t v11 = *(void *)(a1 + 272);
  unint64_t v12 = *(void *)(a1 + 280);
  while (1)
  {
    unint64_t v13 = v6;
    memcpy(__dst, v6, 0x138uLL);
    switch(v7)
    {
      case 0:
        unint64_t v14 = *((void *)&__dst[12] + 1);
        unint64_t v15 = *((void *)&__dst[12] + 1) * v3;
        goto LABEL_9;
      case 1:
        unint64_t v14 = *((void *)&__dst[12] + 1);
        unint64_t v15 = v10 * *((void *)&__dst[12] + 1);
LABEL_9:
        char v16 = 1;
        unint64_t v17 = &__dst[2];
        uint64_t v18 = &__dst[3];
        goto LABEL_13;
      case 2:
        char v16 = 0;
        unint64_t v14 = *(void *)&__dst[12];
        unint64_t v15 = *(void *)&__dst[12] * v3;
        goto LABEL_12;
      case 3:
        char v16 = 0;
        unint64_t v14 = *(void *)&__dst[12];
        unint64_t v15 = v10 * *(void *)&__dst[12];
LABEL_12:
        unint64_t v17 = (long long *)((char *)&__dst[1] + 8);
        uint64_t v18 = (long long *)((char *)&__dst[2] + 8);
LABEL_13:
        char v6 = v13;
        *(void *)v17 += v15;
        unint64_t v19 = *(void *)v18 - v15;
        if (v14 >= v19) {
          unint64_t v14 = v19;
        }
        *(void *)uint64_t v18 = v14;
        break;
      default:
        char v16 = 1;
        char v6 = v13;
        break;
    }
    unint64_t v20 = 0;
    unint64_t v21 = v11 * (*((void *)&__dst[1] + 1) / v8 - v54);
    unint64_t v22 = v12 * (*(void *)&__dst[2] / v9 - v53);
    if (v21 <= v52) {
      unint64_t v21 = v52;
    }
    if (v22 <= v49) {
      unint64_t v22 = v49;
    }
    unint64_t v23 = v11
        * ((v8
          + *((void *)&__dst[2] + 1)
          + *((void *)&__dst[1] + 1)
          + ~((*((void *)&__dst[2] + 1) + *((void *)&__dst[1] + 1) - 1) % v8))
         / v8
         - v54);
    if (v23 >= v51) {
      unint64_t v23 = v51;
    }
    if (v12
       * ((v9 + *(void *)&__dst[3] + *(void *)&__dst[2] + ~((*(void *)&__dst[3] + *(void *)&__dst[2] - 1) % v9))
        / v9
        - v53) >= v50)
      unint64_t v24 = v50;
    else {
      unint64_t v24 = v12
    }
          * ((v9
            + *(void *)&__dst[3]
            + *(void *)&__dst[2]
            + ~((*(void *)&__dst[3] + *(void *)&__dst[2] - 1) % v9))
           / v9
           - v53);
    unint64_t v25 = v23 - v21;
    if (v23 <= v21)
    {
      unint64_t v26 = 0;
      unint64_t v27 = 0;
      unint64_t v28 = 0;
    }
    else
    {
      unint64_t v26 = 0;
      unint64_t v27 = 0;
      unint64_t v28 = 0;
      BOOL v29 = v24 > v22;
      unint64_t v30 = v24 - v22;
      if (v29)
      {
        unint64_t v20 = v30;
        unint64_t v26 = v25;
        unint64_t v27 = v22;
        unint64_t v28 = v21;
      }
    }
    *(void *)&__dst[17] = v28 % v11;
    *((void *)&__dst[17] + 1) = v27 % v12;
    *(void *)&__dst[18] = v26;
    *((void *)&__dst[18] + 1) = v20;
    __dst[15] = __dst[18];
    __dst[13] = __dst[18];
    if (v16) {
      __dst[14] = __dst[18];
    }
    else {
      __dst[14] = (__int128)vextq_s8((int8x16_t)__dst[13], (int8x16_t)__dst[13], 8uLL);
    }
    ++v3;
    long long v31 = __dst[15];
    if (v3 >= v2) {
      break;
    }
    --v10;
    if (*(void *)&__dst[15])
    {
      if (*((void *)&__dst[15] + 1)) {
        break;
      }
    }
  }
  uint64_t v4 = (unint64_t *)a1;
  *(void *)(a1 + 440) = v3;
  if (!(void)v31 || !*((void *)&v31 + 1)) {
    goto LABEL_46;
  }
  uint64_t v32 = *(const void **)(a1 + 8);
  long long v33 = *(_OWORD *)(a1 + 384);
  v55[2] = *(_OWORD *)(a1 + 368);
  v55[3] = v33;
  long long v34 = *(_OWORD *)(a1 + 416);
  v55[4] = *(_OWORD *)(a1 + 400);
  v55[5] = v34;
  long long v35 = *(_OWORD *)(a1 + 352);
  v55[0] = *(_OWORD *)(a1 + 336);
  v55[1] = v35;
  uint64_t v36 = _applyDecodeStrategy(v55, (uint64_t)__dst, v32, 0, 0, 0, v57);
  if (v36) {
    goto LABEL_47;
  }
  a2 = v47;
LABEL_42:
  CVPixelBufferRef v41 = v57[0];
  CMPhotoGetPixelBufferCLAPAsRect(v57[0]);
  unint64_t v44 = (unint64_t)(v43 + (double)v4[54]);
  v4[54] = v44;
  if (v4[31] < v44 || v42 != (double)v4[30])
  {
LABEL_46:
    uint64_t v36 = FigSignalErrorAt();
    goto LABEL_47;
  }
  uint64_t v45 = 0;
  if (a2)
  {
    *a2 = v41;
    return v45;
  }
LABEL_49:
  if (v57[0]) {
    CFRelease(v57[0]);
  }
  return v45;
}

uint64_t _transcodeSourceCallbackFullImageWithAlpha(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef cf = 0;
  if (*(void *)(a1 + 448) != 1) {
    return 4294950304;
  }
  uint64_t ImageForIndex_1 = 4294950304;
  if (a2 && *(unsigned char *)(a1 + 456))
  {
    uint64_t ImageForIndex_1 = _createImageForIndex_1(*(void **)a1, *(void *)(a1 + 464), *(CFDictionaryRef *)(a1 + 472), 2, (CGImageRef *)&cf);
    CFTypeRef v4 = cf;
    if (ImageForIndex_1
      || (ImageForIndex_1 = CMPhotoPixelBufferBlendAlphaWithWhite((__CVBuffer *)cf), CFTypeRef v4 = cf, ImageForIndex_1))
    {
      if (v4) {
        CFRelease(v4);
      }
    }
    else
    {
      *a2 = cf;
    }
  }
  return ImageForIndex_1;
}

uint64_t _transcodeThumbnailCallback(uint64_t a1, CFTypeRef *a2)
{
  return _createThumbnailImageForIndex_0(*(void **)a1, *(void *)(a1 + 16), *(void *)(a1 + 24), *(CFDictionaryRef *)(a1 + 8), 2, a2);
}

uint64_t _transcodeAuxiliaryImageCallback_0(uint64_t a1, uint64_t a2, CFTypeRef *a3, CFTypeRef *a4, _DWORD *a5, CFTypeRef *a6, CFTypeRef *a7, CFDataRef *a8, void *a9)
{
  if (*(void *)(a2 + 16) <= a1) {
    return 4294950304;
  }
  unint64_t v14 = *(void **)a2;
  uint64_t v15 = *(void *)(a2 + 24) + 32 * a1;
  if (*(unsigned char *)v15)
  {
    if (!*(void *)(a2 + 32) || *(void *)(a2 + 40) == a1)
    {
      int v17 = *(unsigned __int8 *)(a2 + 48);
      uint64_t v18 = *(const void **)(v15 + 8);
      CFTypeRef cf = *(CFTypeRef *)(v15 + 16);
      unint64_t v19 = *(CGColorSpace **)(v15 + 24);
      int v71 = 0;
      CGImageRef v72 = 0;
      CFDictionaryRef MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
      if (MutableCopy)
      {
        CFDictionaryRef v21 = MutableCopy;
        space = v19;
        unint64_t v22 = a8;
        if (v17) {
          CFDictionarySetValue(MutableCopy, @"RestrictedDecoding", (const void *)*MEMORY[0x1E4F1CFD0]);
        }
        uint64_t v23 = _decodeImage_1(v14, v18, 0, -1, v21, 0, 2, 1, &v72);
        if (v23)
        {
          uint64_t v25 = v23;
        }
        else
        {
          uint64_t v24 = _parseAuxiliaryImageMetadataForIndex(v14, -1, -1, 0, v18, 0, &v71, 0);
          uint64_t v25 = v24;
          if (v24) {
            BOOL v26 = v24 == -16993;
          }
          else {
            BOOL v26 = 1;
          }
          if (v26)
          {
            *a7 = v72;
            *a3 = v71;
            int v71 = 0;
            CGImageRef v72 = 0;
            *a4 = 0;
            *a5 = 4;
            if (a6)
            {
              unint64_t v27 = kCMPhotoAuxiliaryImageTypeURN_HDRGainMap;
              if (v24) {
                unint64_t v27 = kCMPhotoAuxiliaryImageTypeURL_NonStandardizedJPEGFlexRangeNamespace;
              }
              *a6 = CFRetain(*v27);
            }
            if (v22 && space) {
              CFDataRef *v22 = CGColorSpaceCopyICCData(space);
            }
            if (a9)
            {
              CFTypeRef v28 = cf;
              if (cf) {
                CFTypeRef v28 = CFRetain(cf);
              }
              uint64_t v25 = 0;
              *a9 = v28;
            }
            else
            {
              uint64_t v25 = 0;
            }
          }
        }
        CFRelease(v21);
        if (v71) {
          CFRelease(v71);
        }
      }
      else
      {
        uint64_t v25 = 4294950305;
      }
      CGImageRef v38 = v72;
      if (!v72) {
        return v25;
      }
LABEL_81:
      CFRelease(v38);
      return v25;
    }
    return 4294950304;
  }
  uint64_t v29 = *(void *)(a2 + 8);
  uint64_t v30 = *(void *)(v15 + 8);
  uint64_t v32 = *(void *)(a2 + 32);
  uint64_t v31 = *(void *)(a2 + 40);
  int spacea = *(unsigned __int8 *)(a2 + 48);
  CFAllocatorRef v33 = (const __CFAllocator *)v14[5];
  int v71 = 0;
  CGImageRef v72 = 0;
  CFTypeRef v69 = 0;
  CFTypeRef v70 = 0;
  CFTypeRef v68 = 0;
  int v67 = 0;
  uint64_t AuxiliaryImageTypeForIndex_1 = _getAuxiliaryImageTypeForIndex_1(v14, v29, v30, (uint64_t)a4, (unint64_t)&v67, 0);
  if (AuxiliaryImageTypeForIndex_1) {
    goto LABEL_49;
  }
  uint64_t AuxiliaryImageTypeForIndex_1 = _copyAuxiliaryImageMetadataFromCacheForIndex((uint64_t)v14, v29, v30, 0, 0, &v69, 0, 0);
  if (AuxiliaryImageTypeForIndex_1 && AuxiliaryImageTypeForIndex_1 != -16993) {
    goto LABEL_49;
  }
  if (v67 != 4)
  {
    uint64_t v37 = v29;
    uint64_t AuxiliaryImageTypeForIndex_1 = _copyAuxiliaryImageMetadataFromCacheForIndex((uint64_t)v14, v29, v30, 0, 0, 0, &v68, 0);
    if (AuxiliaryImageTypeForIndex_1) {
      BOOL v39 = AuxiliaryImageTypeForIndex_1 == -16993;
    }
    else {
      BOOL v39 = 1;
    }
    if (!v39)
    {
LABEL_49:
      uint64_t v25 = AuxiliaryImageTypeForIndex_1;
      goto LABEL_72;
    }
    uint64_t v57 = a3;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v33, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!Mutable) {
      goto LABEL_98;
    }
    MutableCopyWithCFTypeCallbacks = Mutable;
    LODWORD(v66) = 0;
    if (!FigCFDictionaryGetInt32IfPresent()) {
      LODWORD(v66) = 1278226488;
    }
    uint64_t v25 = FigCFDictionarySetInt();
    if (v25)
    {
LABEL_71:
      CFRelease(MutableCopyWithCFTypeCallbacks);
      goto LABEL_72;
    }
    goto LABEL_53;
  }
  uint64_t v57 = a3;
  MutableCopyWithCFTypeCallbacks = 0;
  if (v31 != a1)
  {
    uint64_t v37 = v29;
    goto LABEL_53;
  }
  uint64_t v37 = v29;
  if (!v32
    || (MutableCopyWithCFTypeCallbacks = (const void *)FigCFDictionaryCreateMutableCopyWithCFTypeCallbacks()) != 0)
  {
LABEL_53:
    if (spacea)
    {
      uint64_t v41 = FigCFDictionarySetInt();
      if (v41) {
        goto LABEL_99;
      }
    }
    uint64_t v42 = v14[6];
    uint64_t v43 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v43) {
      uint64_t v44 = v43;
    }
    else {
      uint64_t v44 = 0;
    }
    uint64_t v45 = *(uint64_t (**)(uint64_t, uint64_t, CGImageRef *, void))(v44 + 16);
    if (v45)
    {
      uint64_t v41 = v45(v42, v37, &v72, 0);
      if (v41) {
        goto LABEL_99;
      }
      CGImageRef v46 = v72;
      uint64_t v47 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v47) {
        uint64_t v48 = v47;
      }
      else {
        uint64_t v48 = 0;
      }
      unint64_t v49 = *(uint64_t (**)(CGImageRef, uint64_t, CGImageMetadata **))(v48 + 40);
      if (v49)
      {
        uint64_t v41 = v49(v46, v30, &v71);
        if (!v41)
        {
          uint64_t v41 = _decodeImage_1(v14, v71, v72, -1, (const __CFDictionary *)MutableCopyWithCFTypeCallbacks, 0, 2, 1, (CGImageRef *)&v70);
          if (!v41)
          {
            *a7 = v70;
            *uint64_t v57 = v69;
            CFTypeRef v69 = 0;
            CFTypeRef v70 = 0;
            *a4 = v68;
            CFTypeRef v68 = 0;
            *a5 = v67;
            if (a6)
            {
              CFAllocatorRef v50 = CFGetAllocator(v71);
              uint64_t FigBaseObject = FigPictureReaderGetFigBaseObject();
              uint64_t v52 = *(void *)(CMBaseObjectGetVTable() + 8);
              uint64_t v53 = v52 ? v52 : 0;
              double v55 = *(void (**)(uint64_t, void, CFAllocatorRef, CFTypeRef *))(v53 + 48);
              if (v55) {
                v55(FigBaseObject, *MEMORY[0x1E4F33390], v50, a6);
              }
            }
            if (a8)
            {
              CGColorSpaceRef v66 = 0;
              if (!_copyAuxiliaryColorSpaceForIndex_0((uint64_t)v14, v37, v30, (CFTypeRef *)&v66))
              {
                CGColorSpaceGetName(v66);
                if (FigCFEqual() || FigCFEqual()) {
                  CFDataRef v56 = 0;
                }
                else {
                  CFDataRef v56 = CGColorSpaceCopyICCData(v66);
                }
                *a8 = v56;
                if (v66) {
                  CFRelease(v66);
                }
              }
            }
            uint64_t v25 = 0;
LABEL_70:
            if (!MutableCopyWithCFTypeCallbacks) {
              goto LABEL_72;
            }
            goto LABEL_71;
          }
        }
LABEL_99:
        uint64_t v25 = v41;
        goto LABEL_70;
      }
    }
    uint64_t v25 = 4294954514;
    goto LABEL_70;
  }
LABEL_98:
  uint64_t v25 = 4294950305;
LABEL_72:
  if (v72) {
    CFRelease(v72);
  }
  if (v71) {
    CFRelease(v71);
  }
  if (v70) {
    CFRelease(v70);
  }
  if (v69) {
    CFRelease(v69);
  }
  CGImageRef v38 = (CGImageRef)v68;
  if (v68) {
    goto LABEL_81;
  }
  return v25;
}

void _freeTranscodeAuxiliaryEntries(uint64_t a1, char *a2)
{
  if (a2)
  {
    uint64_t v3 = a1;
    if (a1 >= 1)
    {
      CFTypeRef v4 = a2 + 16;
      do
      {
        if (*(v4 - 16))
        {
          CFTypeRef v5 = (const void *)*((void *)v4 - 1);
          if (v5)
          {
            CFRelease(v5);
            *((void *)v4 - 1) = 0;
          }
          if (*(void *)v4)
          {
            CFRelease(*(CFTypeRef *)v4);
            *(void *)CFTypeRef v4 = 0;
          }
          char v6 = (const void *)*((void *)v4 + 1);
          if (v6)
          {
            CFRelease(v6);
            *((void *)v4 + 1) = 0;
          }
        }
        v4 += 32;
        --v3;
      }
      while (v3);
    }
    free(a2);
  }
}

uint64_t _translateCropForTranscodeIfNeeded(uint64_t a1, __CFDictionary *a2, const void *a3, const void *a4, const void *a5)
{
  if (!a3) {
    return 0;
  }
  long long v23 = 0u;
  long long v24 = 0u;
  uint64_t result = CMPhotoPictureReaderGetImageGeometryFromPictureReader(a4, 0, (unint64_t)&v23, 0);
  if (!result)
  {
    long long v11 = v24;
    uint64_t result = CMPhotoPictureReaderGetImageGeometryFromPictureReader(a5, 0, (unint64_t)&v23, 0);
    if (!result)
    {
      long long v12 = v24;
      char v22 = 0;
      uint64x2_t v20 = 0u;
      uint64x2_t v21 = 0u;
      uint64_t result = CMPhotoDecompressionContainerValidateSourceCropRect(a3, v11, *((uint64_t *)&v11 + 1), &v22, (int64x2_t *)&v20);
      if (!result)
      {
        if (v22)
        {
          CFDictionaryRemoveValue(a2, @"SourceCropRect");
          return 0;
        }
        int v18 = 1;
        int v19 = 1;
        uint64_t result = _getImageOrientation(a1, a4, 0, &v19);
        if (!result)
        {
          uint64_t result = _getImageOrientation(a1, a5, 0, &v18);
          if (!result)
          {
            long long v16 = 0u;
            long long v17 = 0u;
            v15[0] = v20;
            v15[1] = v21;
            uint64_t result = CMPhotoTranslateAndScalePreOrientationCrop(v11, *((uint64_t *)&v11 + 1), v15, v19, v12, *((uint64_t *)&v12 + 1), v18, &v16, 0);
            if (!result)
            {
              v25.origin.x = (double)(unint64_t)v16;
              v25.origin.y = (double)*((unint64_t *)&v16 + 1);
              v25.size.width = (double)(unint64_t)v17;
              v25.size.height = (double)*((unint64_t *)&v17 + 1);
              DictionaryRepresentatiouint64_t n = CGRectCreateDictionaryRepresentation(v25);
              if (!DictionaryRepresentation) {
                return 4294950305;
              }
              CFDictionaryRef v14 = DictionaryRepresentation;
              CFDictionarySetValue(a2, @"SourceCropRect", DictionaryRepresentation);
              CFRelease(v14);
              return 0;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t TileIterator_stepAndReportPosition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = **(void **)(a1 + 56);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  unint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  if (!v8) {
    return 4294954514;
  }
  return v8(v5, a2, a3);
}

uint64_t TileIterator_moveToPosition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = **(void **)(a1 + 56);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  unint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  if (!v8) {
    return 4294954514;
  }
  return v8(v5, a2, a3);
}

uint64_t TileIterator_getTileSourceRect(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  unint64_t v10 = (uint64_t *)a1[7];
  CFTypeRef cf = 0;
  uint64_t v11 = *v10;
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  CFDictionaryRef v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 32);
  if (!v14) {
    goto LABEL_17;
  }
  uint64_t v15 = v14(v11, a2, a3);
  if (!v15)
  {
    CFAllocatorRef v16 = CFGetAllocator(a1);
    uint64_t CMBaseObject = FigPictureTileCursorGetCMBaseObject();
    uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v18) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0;
    }
    uint64x2_t v20 = *(uint64_t (**)(uint64_t, void, CFAllocatorRef, CFTypeRef *))(v19 + 48);
    if (v20)
    {
      uint64_t v15 = v20(CMBaseObject, *MEMORY[0x1E4F33480], v16, &cf);
      if (!v15)
      {
        if (a4
          && !CMPhotoCFDictionaryGetSizeIfPresent((const __CFDictionary *)cf, (const void *)*MEMORY[0x1E4F334A0], a4))
        {
          uint64_t v21 = 4294950304;
        }
        else if (a5)
        {
          if (CMPhotoCFDictionaryGetSizeIfPresent((const __CFDictionary *)cf, (const void *)*MEMORY[0x1E4F33488], a5))uint64_t v21 = 0; {
          else
          }
            uint64_t v21 = 4294950304;
        }
        else
        {
          uint64_t v21 = 0;
        }
        goto LABEL_18;
      }
      goto LABEL_23;
    }
LABEL_17:
    uint64_t v21 = 4294954514;
    goto LABEL_18;
  }
LABEL_23:
  uint64_t v21 = v15;
LABEL_18:
  if (cf) {
    CFRelease(cf);
  }
  return v21;
}

uint64_t TileIterator_getTileItemType(uint64_t a1, void *a2)
{
  CFTypeRef cf = 0;
  uint64_t CMBaseObject = FigPictureTileCursorGetCMBaseObject();
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, void, void, CFTypeRef *))(v5 + 48);
  if (!v6) {
    return 4294954514;
  }
  uint64_t ItemTypeFromReader = v6(CMBaseObject, *MEMORY[0x1E4F33478], *MEMORY[0x1E4F1CF80], &cf);
  CFTypeRef v8 = cf;
  if (!ItemTypeFromReader)
  {
    uint64_t ItemTypeFromReader = CMPhotoPictureReaderGetItemTypeFromReader(cf, a2);
    CFTypeRef v8 = cf;
  }
  if (v8) {
    CFRelease(v8);
  }
  return ItemTypeFromReader;
}

uint64_t TileIterator_decodeTileAsync(uint64_t a1, const __CFDictionary *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  CFAllocatorRef v12 = CFGetAllocator((CFTypeRef)a1);
  CFTypeRef v35 = 0;
  CFTypeRef cf = 0;
  CFAllocatorRef v13 = CFGetAllocator((CFTypeRef)a1);
  uint64_t CMBaseObject = FigPictureTileCursorGetCMBaseObject();
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  int v34 = 0;
  long long v17 = *(uint64_t (**)(uint64_t, void, CFAllocatorRef, CFTypeRef *))(v16 + 48);
  if (v17)
  {
    uint64_t v18 = v17(CMBaseObject, *MEMORY[0x1E4F33480], v13, &cf);
    if (v18)
    {
      uint64_t v24 = v18;
    }
    else if (CMPhotoCFDictionaryGetIntIfPresent((CFDictionaryRef)cf, (const void *)*MEMORY[0x1E4F334A0], &v34)&& (v19 = v34, CMPhotoCFDictionaryGetIntIfPresent((CFDictionaryRef)cf, (const void *)*MEMORY[0x1E4F33488], &v34))&& (int v20 = v34, CMPhotoCFDictionaryGetIntIfPresent((CFDictionaryRef)cf, (const void *)*MEMORY[0x1E4F33490], &v34))&& (v32 = a4, v21 = v34, CMPhotoCFDictionaryGetIntIfPresent((CFDictionaryRef)cf, (const void *)*MEMORY[0x1E4F33498], &v34)))
    {
      int v22 = v34;
      if (a2) {
        CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v12, 0, a2);
      }
      else {
        CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable(v12, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      }
      CGRect v25 = MutableCopy;
      CFTypeRef v35 = MutableCopy;
      if (MutableCopy
        && (v37.size.width = (double)v19,
            v37.size.height = (double)v20,
            v37.origin.x = (double)v21,
            v37.origin.y = (double)v22,
            (DictionaryRepresentatiouint64_t n = CGRectCreateDictionaryRepresentation(v37)) != 0))
      {
        CFDictionaryRef v27 = DictionaryRepresentation;
        CFDictionarySetValue(v25, @"SourceCropRect", DictionaryRepresentation);
        CFNumberRef v33 = (const __CFNumber *)-1;
        uint64_t v28 = CMPhotoDecompressionContainerInternalToExternalIndexAndCopyAlternateOptions(*(void **)(a1 + 16), *(void *)(a1 + 24), &v33, 0, (CFMutableDictionaryRef *)&v35);
        if (v28)
        {
          uint64_t v24 = v28;
        }
        else
        {
          uint64_t v29 = malloc_type_calloc(1uLL, 0x28uLL, 0x10A00407034790EuLL);
          if (v29)
          {
            uint64_t v30 = (uint64_t)v29;
            *uint64_t v29 = CFRetain((CFTypeRef)a1);
            *(double *)(v30 + 8) = (double)v21;
            *(double *)(v30 + 16) = (double)v22;
            *(void *)(v30 + 24) = a5;
            *(void *)(v30 + 32) = a6;
            uint64_t v24 = CMPhotoDecompressionContainerDecodeImageForIndexAsyncF(*(char **)(a1 + 16), v33, (const __CFDictionary *)v35, a3, v32, (uint64_t)_callback_TileIterator_decodeTileAsync, v30);
            if (v24)
            {
              if (*(void *)v30) {
                CFRelease(*(CFTypeRef *)v30);
              }
              free((void *)v30);
            }
          }
          else
          {
            uint64_t v24 = 4294950305;
          }
        }
        CFRelease(v27);
      }
      else
      {
        uint64_t v24 = 4294950305;
      }
    }
    else
    {
      uint64_t v24 = 4294950304;
    }
  }
  else
  {
    uint64_t v24 = 4294954514;
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v35) {
    CFRelease(v35);
  }
  return v24;
}

uint64_t TileIterator_cancelAsyncRequest(uint64_t a1, uint64_t a2)
{
  return CMPhotoDecompressionContainerCancelAsyncRequest(*(void *)(a1 + 16), a2);
}

void _callback_TileIterator_decodeTileAsync(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double *a6)
{
  unint64_t v10 = *(const void **)a6;
  double v11 = a6[1];
  double v12 = a6[2];
  CFDictionaryRef v14 = (void (*)(const void *, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t))*((void *)a6 + 3);
  uint64_t v13 = *((void *)a6 + 4);
  free(a6);
  v14(v10, a2, a3, (unint64_t)v11, (unint64_t)v12, a4, a5, v13);
  if (v10)
  {
    CFRelease(v10);
  }
}

uint64_t _createDummyReaderDescription(const __CFAllocator *a1, __CFDictionary **a2)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    uint64_t v4 = Mutable;
    v8.width = 0.0;
    v8.height = 0.0;
    DictionaryRepresentatiouint64_t n = CGSizeCreateDictionaryRepresentation(v8);
    if (DictionaryRepresentation)
    {
      CFDictionaryRef v6 = DictionaryRepresentation;
      CFDictionarySetValue(v4, @"Dimensions", DictionaryRepresentation);
      CFRelease(v6);
      uint64_t result = 0;
      *a2 = v4;
      return result;
    }
    CFRelease(v4);
  }
  return 4294950305;
}

uint64_t CMPhotoAnalyzeImageAndCreateUpdatedQualityParameters(const __CFAllocator *a1, __CVBuffer *a2, CFTypeRef cf, __CFDictionary **a4, double a5, double a6, double a7, double a8)
{
  if (!a2) {
    return 4294950194;
  }
  if (cf)
  {
    CFGetTypeID(cf);
    CFDictionaryGetTypeID();
  }
  uint64_t MutableCopy = FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy) {
    return 4294950305;
  }
  uint64_t v16 = (__CFDictionary *)MutableCopy;
  size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a2, 0);
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a2);
  if (PixelFormatType != 875704422 && PixelFormatType != 1278226488 && PixelFormatType != 875704438) {
    goto LABEL_28;
  }
  CFAllocatorRef v61 = a1;
  CFDictionaryRef theDict = v16;
  unint64_t v19 = vcvtad_u64_f64(a5 + a7);
  unint64_t v20 = vcvtad_u64_f64(a6 + a8);
  unint64_t v21 = (v19 + 63) >> 6;
  unint64_t v22 = (v20 + 63) >> 6;
  unint64_t v23 = v21 * v22;
  uint64_t v24 = malloc_type_calloc(85 * v21 * v22, 1uLL, 0x100004077774924uLL);
  if (!v24) {
    goto LABEL_41;
  }
  CFIndex v60 = 85 * v21 * v22;
  uint64_t v25 = CVPixelBufferLockBaseAddress(a2, 0);
  if (v25) {
    goto LABEL_40;
  }
  uint64_t v59 = a4;
  BOOL v26 = &v24[v23];
  CFDictionaryRef v27 = &v24[4 * v23 + v23];
  uint64_t v28 = &v27[16 * v23];
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a2, 0);
  unint64_t v30 = 0;
  unint64_t v31 = 8 * v21;
  uint64_t v32 = v28;
  do
  {
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    do
    {
      int v35 = 0;
      int v36 = 0;
      int v37 = 0;
      CGImageRef v38 = &BaseAddressOfPlane[v34];
      do
      {
        for (uint64_t i = 0; i != 8; ++i)
        {
          int v40 = v38[i];
          v37 += v40;
          v36 += v40 * v40;
        }
        v38 += BytesPerRowOfPlane;
        ++v35;
      }
      while (v35 != 8);
      float v41 = sqrt((float)v36 + (double)(v37 * v37) * -0.015625);
      float v42 = 8.0 / ((double)v37 + 1.0) * v41;
      float v43 = v42 + -0.05;
      double v44 = (float)(v43 * 48.0);
      if (v44 < 0.0) {
        double v44 = 0.0;
      }
      float v45 = v44;
      int v46 = (int)v45;
      if (v44 >= 12.0) {
        LOBYTE(v46) = 12;
      }
      v32[v33] = v46;
      v34 += 8;
    }
    while (v33++ != (v19 - 8) >> 3);
    v32 += v31;
    BaseAddressOfPlane += 8 * BytesPerRowOfPlane;
    v30 += 8;
  }
  while (v20 - 8 >= v30);
  _convergeQPMapForLargerCUSize(v28, v31, 8 * v22, v27);
  _convergeQPMapForLargerCUSize(v27, 4 * v21, 4 * v22, v26);
  _convergeQPMapForLargerCUSize(v26, 2 * v21, 2 * v22, v24);
  uint64_t v25 = CVPixelBufferUnlockBaseAddress(a2, 0);
  if (v25)
  {
LABEL_40:
    uint64_t v51 = v25;
LABEL_42:
    uint64_t v16 = theDict;
    free(v24);
LABEL_43:
    CFRelease(v16);
    return v51;
  }
  v63.width = (double)v21;
  v63.height = (double)v22;
  DictionaryRepresentatiouint64_t n = CGSizeCreateDictionaryRepresentation(v63);
  if (!DictionaryRepresentation)
  {
LABEL_41:
    uint64_t v51 = 4294950305;
    goto LABEL_42;
  }
  CFDictionaryRef v49 = DictionaryRepresentation;
  a1 = v61;
  CFDataRef v50 = CFDataCreate(v61, v24, v60);
  uint64_t v16 = theDict;
  if (v50)
  {
    CFDictionarySetValue(theDict, @"QPMap", v50);
    CFDictionarySetValue(theDict, @"QPMapSize", v49);
    CFRelease(v50);
    uint64_t v51 = 0;
  }
  else
  {
    uint64_t v51 = 4294950305;
  }
  a4 = v59;
  CFRelease(v49);
  free(v24);
  if (!v50) {
    goto LABEL_43;
  }
LABEL_28:
  CVPixelBufferGetBytesPerRowOfPlane(a2, 0);
  OSType v52 = CVPixelBufferGetPixelFormatType(a2);
  if (v52 == 875704422 || v52 == 1278226488 || v52 == 875704438)
  {
    uint64_t v53 = malloc_type_calloc(0x3E8uLL, 1uLL, 0x100004077774924uLL);
    if (!v53) {
      goto LABEL_46;
    }
    uint64_t v54 = CVPixelBufferLockBaseAddress(a2, 0);
    if (v54) {
      goto LABEL_45;
    }
    CVPixelBufferGetBaseAddressOfPlane(a2, 0);
    *(void *)&long long v55 = 0x1010101010101010;
    *((void *)&v55 + 1) = 0x1010101010101010;
    *uint64_t v53 = v55;
    v53[1] = v55;
    v53[2] = v55;
    v53[3] = v55;
    v53[4] = v55;
    v53[5] = v55;
    v53[6] = *(long long *)((char *)&HEVCDefault8x8IntraScalingListZigZag + 1);
    v53[7] = unk_1AB9E2BD1;
    v53[8] = *(long long *)((char *)&xmmword_1AB9E2BE0 + 1);
    v53[9] = unk_1AB9E2BF1;
    v53[12] = *(long long *)((char *)&xmmword_1AB9E2BE0 + 1);
    v53[13] = unk_1AB9E2BF1;
    v53[10] = *(long long *)((char *)&HEVCDefault8x8IntraScalingListZigZag + 1);
    v53[11] = unk_1AB9E2BD1;
    v53[14] = *(long long *)((char *)&HEVCDefault8x8IntraScalingListZigZag + 1);
    v53[15] = unk_1AB9E2BD1;
    v53[16] = *(long long *)((char *)&xmmword_1AB9E2BE0 + 1);
    v53[17] = unk_1AB9E2BF1;
    v53[18] = *(long long *)((char *)&HEVCDefault8x8InterScalingListZigZag + 1);
    v53[19] = unk_1AB9E2C12;
    v53[20] = *(long long *)((char *)&xmmword_1AB9E2C21 + 1);
    v53[21] = unk_1AB9E2C32;
    v53[24] = *(long long *)((char *)&xmmword_1AB9E2C21 + 1);
    v53[25] = unk_1AB9E2C32;
    v53[22] = *(long long *)((char *)&HEVCDefault8x8InterScalingListZigZag + 1);
    v53[23] = unk_1AB9E2C12;
    v53[28] = *(long long *)((char *)&xmmword_1AB9E2C21 + 1);
    v53[29] = unk_1AB9E2C32;
    v53[26] = *(long long *)((char *)&HEVCDefault8x8InterScalingListZigZag + 1);
    v53[27] = unk_1AB9E2C12;
    *((unsigned char *)v53 + 544) = 115;
    v53[32] = xmmword_1AB9E2BE0;
    v53[33] = unk_1AB9E2BF0;
    v53[30] = HEVCDefault8x8IntraScalingListZigZag;
    v53[31] = unk_1AB9E2BD0;
    *((unsigned char *)v53 + 609) = 115;
    *(_OWORD *)((char *)v53 + 545) = HEVCDefault8x8IntraScalingListZigZag;
    *(_OWORD *)((char *)v53 + 561) = unk_1AB9E2BD0;
    *(_OWORD *)((char *)v53 + 577) = xmmword_1AB9E2BE0;
    *(_OWORD *)((char *)v53 + 593) = unk_1AB9E2BF0;
    *((unsigned char *)v53 + 674) = 115;
    *(_OWORD *)((char *)v53 + 642) = xmmword_1AB9E2BE0;
    *(_OWORD *)((char *)v53 + 658) = unk_1AB9E2BF0;
    *(_OWORD *)((char *)v53 + 610) = HEVCDefault8x8IntraScalingListZigZag;
    *(_OWORD *)((char *)v53 + 626) = unk_1AB9E2BD0;
    *((unsigned char *)v53 + 739) = 91;
    *(_OWORD *)((char *)v53 + 707) = xmmword_1AB9E2C21;
    *(_OWORD *)((char *)v53 + 723) = unk_1AB9E2C31;
    *(_OWORD *)((char *)v53 + 675) = HEVCDefault8x8InterScalingListZigZag;
    *(_OWORD *)((char *)v53 + 691) = unk_1AB9E2C11;
    *((unsigned char *)v53 + 804) = 91;
    *(_OWORD *)((char *)v53 + 772) = xmmword_1AB9E2C21;
    *(_OWORD *)((char *)v53 + 788) = unk_1AB9E2C31;
    *(_OWORD *)((char *)v53 + 740) = HEVCDefault8x8InterScalingListZigZag;
    *(_OWORD *)((char *)v53 + 756) = unk_1AB9E2C11;
    *((unsigned char *)v53 + 869) = 91;
    *(_OWORD *)((char *)v53 + 837) = xmmword_1AB9E2C21;
    *(_OWORD *)((char *)v53 + 853) = unk_1AB9E2C31;
    *(_OWORD *)((char *)v53 + 805) = HEVCDefault8x8InterScalingListZigZag;
    *(_OWORD *)((char *)v53 + 821) = unk_1AB9E2C11;
    *((unsigned char *)v53 + 934) = 115;
    *(_OWORD *)((char *)v53 + 902) = xmmword_1AB9E2BE0;
    *(_OWORD *)((char *)v53 + 918) = unk_1AB9E2BF0;
    *(_OWORD *)((char *)v53 + 870) = HEVCDefault8x8IntraScalingListZigZag;
    *(_OWORD *)((char *)v53 + 886) = unk_1AB9E2BD0;
    *((unsigned char *)v53 + 999) = 91;
    *(_OWORD *)((char *)v53 + 967) = xmmword_1AB9E2C21;
    *(_OWORD *)((char *)v53 + 983) = unk_1AB9E2C31;
    *(_OWORD *)((char *)v53 + 935) = HEVCDefault8x8InterScalingListZigZag;
    *(_OWORD *)((char *)v53 + 951) = unk_1AB9E2C11;
    uint64_t v54 = CVPixelBufferUnlockBaseAddress(a2, 0);
    if (v54)
    {
LABEL_45:
      uint64_t v51 = v54;
      goto LABEL_37;
    }
    CFDataRef v56 = CFDataCreate(a1, (const UInt8 *)v53, 1000);
    if (!v56)
    {
LABEL_46:
      uint64_t v51 = 4294950305;
      goto LABEL_37;
    }
    CFDataRef v57 = v56;
    CFDictionarySetValue(v16, @"QuantizationScalingLists", v56);
    CFRelease(v57);
    uint64_t v51 = 0;
  }
  else
  {
    uint64_t v51 = 0;
    uint64_t v53 = 0;
  }
LABEL_37:
  free(v53);
  if (!a4 || v51) {
    goto LABEL_43;
  }
  *a4 = v16;
  return v51;
}

char *_convergeQPMapForLargerCUSize(char *result, unint64_t a2, unint64_t a3, unsigned char *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = a2 >> 1;
    if (a2 >> 1 <= 1) {
      uint64_t v5 = 1;
    }
    do
    {
      uint64_t v6 = v5;
      uint64_t v7 = result;
      if (a2 >= 2)
      {
        do
        {
          int v8 = *v7;
          int v9 = v7[1];
          int v10 = v7[a2 + 1];
          if (v7[a2] < v10) {
            int v10 = v7[a2];
          }
          if (v9 >= v10) {
            int v9 = v10;
          }
          if (v9 < v8) {
            LOBYTE(v8) = v9;
          }
          *a4++ = v8;
          v7 += 2;
          --v6;
        }
        while (v6);
      }
      ++v4;
      result += 2 * a2;
    }
    while (v4 != a3 >> 1);
  }
  return result;
}

unint64_t CMPhotoGetDataSizeFromWidthAndHeight(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(a1);
  unint64_t result = 0;
  if (a1 > 1734505011)
  {
    if (a1 > 1937125935)
    {
      if (a1 <= 1953903667)
      {
        if (a1 > 1952854577)
        {
          if (a1 > 1953903151)
          {
            if (a1 == 1953903152) {
              return BytesPerPixelForPixelFormat
            }
                   * (a3 * a2 + ((a2 + 1) & 0xFFFFFFFFFFFFFFFELL) * ((unint64_t)(a3 + 1) >> 1));
            int v10 = 1953903154;
            goto LABEL_107;
          }
          if (a1 == 1952854578)
          {
LABEL_108:
            unint64_t v12 = (((a2 + 1) & 0xFFFFFFFFFFFFFFFELL) + a2) * a3;
            return v12 * BytesPerPixelForPixelFormat;
          }
          int v8 = 1952855092;
LABEL_93:
          if (a1 != v8) {
            return result;
          }
          return 3 * a3 * a2 * BytesPerPixelForPixelFormat;
        }
        if (a1 <= 1937126451)
        {
          if (a1 == 1937125936) {
            return BytesPerPixelForPixelFormat
          }
                 * (a3 * a2 + ((a2 + 1) & 0xFFFFFFFFFFFFFFFELL) * ((unint64_t)(a3 + 1) >> 1));
          int v10 = 1937125938;
          goto LABEL_107;
        }
        if (a1 == 1937126452) {
          return 3 * a3 * a2 * BytesPerPixelForPixelFormat;
        }
        int v11 = 1952854576;
      }
      else
      {
        if (a1 > 2019963439)
        {
          if (a1 <= 2019963955)
          {
            if (a1 == 2019963440) {
              return BytesPerPixelForPixelFormat
            }
                   * (a3 * a2 + ((a2 + 1) & 0xFFFFFFFFFFFFFFFELL) * ((unint64_t)(a3 + 1) >> 1));
            int v10 = 2019963442;
            goto LABEL_107;
          }
          if (a1 == 2019963956) {
            return 3 * a3 * a2 * BytesPerPixelForPixelFormat;
          }
          if (a1 != 2037741158)
          {
            int v9 = 2037741171;
            goto LABEL_101;
          }
LABEL_102:
          unint64_t v12 = a3 * a2;
          return v12 * BytesPerPixelForPixelFormat;
        }
        if (a1 > 2016686641)
        {
          if (a1 == 2016686642) {
            goto LABEL_108;
          }
          int v8 = 2016687156;
          goto LABEL_93;
        }
        if (a1 == 1953903668) {
          return 3 * a3 * a2 * BytesPerPixelForPixelFormat;
        }
        int v11 = 2016686640;
      }
    }
    else
    {
      if (a1 > 1815491697)
      {
        if (a1 <= 1919379251)
        {
          if (a1 > 1885745711)
          {
            if (a1 != 1885745712)
            {
              int v9 = 1919378232;
              goto LABEL_101;
            }
          }
          else
          {
            if (a1 == 1815491698) {
              goto LABEL_102;
            }
            if (a1 != 1882468912) {
              return result;
            }
          }
          return 4
               * ((a2 + 2) / 3uLL * a3 + (((a2 + 1) & 0xFFFFFFFFFFFFFFFELL) + 2) / 3 * ((unint64_t)(a3 + 1) >> 1));
        }
        if (a1 <= 1936077359)
        {
          if (a1 == 1919379252) {
            goto LABEL_102;
          }
          int v9 = 1932996149;
          goto LABEL_101;
        }
        if (a1 == 1936077360) {
          return BytesPerPixelForPixelFormat
        }
               * (a3 * a2 + ((a2 + 1) & 0xFFFFFFFFFFFFFFFELL) * ((unint64_t)(a3 + 1) >> 1));
        if (a1 == 1936077362) {
          goto LABEL_108;
        }
        int v8 = 1936077876;
        goto LABEL_93;
      }
      if (a1 <= 1751411058)
      {
        if (a1 > 1735549751)
        {
          if (a1 == 1735549752) {
            goto LABEL_102;
          }
          int v9 = 1751410032;
          goto LABEL_101;
        }
        if (a1 != 1734505012)
        {
          int v9 = 1735549492;
          goto LABEL_101;
        }
        goto LABEL_102;
      }
      if (a1 > 1815162993)
      {
        if (a1 == 1815162994) {
          goto LABEL_102;
        }
        int v9 = 1815361650;
        goto LABEL_101;
      }
      if (a1 == 1751411059) {
        goto LABEL_102;
      }
      int v11 = 1751527984;
    }
LABEL_85:
    if (a1 != v11) {
      return result;
    }
    return BytesPerPixelForPixelFormat
         * (a3 * a2 + ((a2 + 1) & 0xFFFFFFFFFFFFFFFELL) * ((unint64_t)(a3 + 1) >> 1));
  }
  if (a1 > 1279340599)
  {
    if (a1 <= 1650943795)
    {
      if (a1 > 1380411456)
      {
        if (a1 > 1647719527)
        {
          if (a1 == 1647719528) {
            goto LABEL_102;
          }
          int v9 = 1650942776;
          goto LABEL_101;
        }
        if (a1 != 1380411457)
        {
          int v9 = 1647589490;
          goto LABEL_101;
        }
      }
      else
      {
        if (a1 > 1380401728)
        {
          if (a1 == 1380401729) {
            goto LABEL_102;
          }
          int v9 = 1380410945;
          goto LABEL_101;
        }
        if (a1 != 1279340600)
        {
          int v9 = 1279340854;
          goto LABEL_101;
        }
      }
    }
    else
    {
      if (a1 > 1651926375)
      {
        if (a1 > 1717855599)
        {
          if (a1 != 1717855600 && a1 != 1717856627)
          {
            int v9 = 1734501176;
            goto LABEL_101;
          }
          goto LABEL_102;
        }
        if (a1 == 1651926376) {
          goto LABEL_102;
        }
        int v9 = 1652056888;
        goto LABEL_101;
      }
      if (a1 > 1651847471)
      {
        if (a1 == 1651847472) {
          goto LABEL_102;
        }
        int v9 = 1651925816;
        goto LABEL_101;
      }
      if (a1 != 1650943796)
      {
        int v9 = 1651519798;
        goto LABEL_101;
      }
    }
    goto LABEL_102;
  }
  if (a1 <= 875836517)
  {
    if (a1 <= 875704421)
    {
      if (a1 <= 843264055)
      {
        if (a1 != 825306677)
        {
          int v9 = 825437747;
          goto LABEL_101;
        }
        goto LABEL_102;
      }
      if (a1 == 843264056) {
        goto LABEL_102;
      }
      int v9 = 843264310;
LABEL_101:
      if (a1 != v9) {
        return result;
      }
      goto LABEL_102;
    }
    if (a1 <= 875704933)
    {
      if (a1 == 875704422) {
        return BytesPerPixelForPixelFormat
      }
             * (a3 * a2 + ((a2 + 1) & 0xFFFFFFFFFFFFFFFELL) * ((unint64_t)(a3 + 1) >> 1));
      int v11 = 875704438;
      goto LABEL_85;
    }
    if (a1 != 875704934)
    {
      int v10 = 875704950;
LABEL_107:
      if (a1 != v10) {
        return result;
      }
      goto LABEL_108;
    }
    goto LABEL_108;
  }
  if (a1 <= 1278226487)
  {
    if (a1 != 875836518 && a1 != 875836534)
    {
      int v9 = 1111970369;
      goto LABEL_101;
    }
    return 3 * a3 * a2 * BytesPerPixelForPixelFormat;
  }
  if ((a1 - 1278226488) <= 0x30 && ((1 << (a1 - 56)) & 0x1400000000001) != 0
    || (a1 - 1278226736) <= 6 && ((1 << (a1 - 48)) & 0x45) != 0)
  {
    goto LABEL_102;
  }
  return result;
}

uint64_t CMPhotoPixelFormatIsPackedRAW(int a1)
{
  uint64_t result = 1;
  if (a1 <= 1734504495)
  {
    if (a1 == 1650946096) {
      return result;
    }
    int v3 = 1650946098;
    goto LABEL_7;
  }
  if (a1 != 1734504496 && a1 != 1735553072)
  {
    int v3 = 1919381552;
LABEL_7:
    if (a1 != v3) {
      return 0;
    }
  }
  return result;
}

uint64_t CMPhotoGetSizeInfoForPixelFormat(uint64_t a1, double *a2, unsigned char *a3, unsigned char *a4, uint64_t *a5)
{
  uint64_t BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(a1);
  uint64_t v15 = 0;
  __int16 v14 = 0;
  uint64_t result = CMPhotoPixelFormatIsSubsampled(a1, &v14, (unsigned char *)&v14 + 1, 0, &v15);
  if (result) {
    return result;
  }
  if (v15 == 3)
  {
    if (CMPhotoPixelFormatContainsRGB(a1))
    {
      double v12 = (double)(unint64_t)(v15 * BytesPerPixelForPixelFormat);
      goto LABEL_13;
    }
    return 4294950301;
  }
  if (v15 == 2)
  {
    if ((_BYTE)v14) {
      int v13 = 2;
    }
    else {
      int v13 = 1;
    }
    double v12 = ((double)(v13 << (HIBYTE(v14) != 0)) + 2.0)
        / (double)(v13 << (HIBYTE(v14) != 0))
        * (double)(unint64_t)BytesPerPixelForPixelFormat;
    goto LABEL_13;
  }
  if (v15 != 1) {
    return 4294950301;
  }
  double v12 = (double)(unint64_t)BytesPerPixelForPixelFormat;
LABEL_13:
  if (a2) {
    *a2 = v12;
  }
  if (a3) {
    *a3 = v14;
  }
  if (a4) {
    *a4 = HIBYTE(v14);
  }
  uint64_t result = 0;
  if (a5) {
    *a5 = BytesPerPixelForPixelFormat;
  }
  return result;
}

void *CMPhotoCascadingDownscaleCreate(uint64_t a1, int a2, const void *a3, const void *a4, int a5, int a6)
{
  int valuePtr = 2;
  double v12 = (char *)malloc_type_calloc(1uLL, 0x68uLL, 0x1030040F0A01298uLL);
  int v13 = v12;
  if (v12)
  {
    *(void *)(v12 + 4) = a1;
    *(_DWORD *)double v12 = a2;
    if (a3 && a5 >= 1)
    {
      __int16 v14 = malloc_type_malloc(8 * a5, 0x100004000313F17uLL);
      *((void *)v13 + 2) = v14;
      memcpy(v14, a3, 8 * a5);
    }
    if (a4 && a5 >= 1)
    {
      uint64_t v15 = malloc_type_malloc(4 * a5, 0x100004052888210uLL);
      *((void *)v13 + 3) = v15;
      memcpy(v15, a4, 4 * a5);
    }
    *((_DWORD *)v13 + 8) = a5;
    if (a6 == 892679473)
    {
      char v28 = 0;
      getScalerCapabilities(0, &v28, 0);
      if (v28) {
        a6 = 892679473;
      }
      else {
        a6 = 1278555701;
      }
    }
    *((_DWORD *)v13 + 3) = a6;
    CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    IOSurfaceAcceleratorCreate();
    if (*((void *)v13 + 9))
    {
      *((void *)v13 + 10) = IOSurfaceAcceleratorGetRunLoopSource();
      long long v17 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
      uint64_t v18 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      *((void *)v13 + 11) = Mutable;
      unint64_t v20 = (const void *)*MEMORY[0x1E4F6EC80];
      unint64_t v21 = (const void *)*MEMORY[0x1E4F1CFD0];
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F6EC80], (const void *)*MEMORY[0x1E4F1CFD0]);
      *((void *)v13 + 12) = CFDictionaryCreateMutable(0, 0, v17, v18);
      CFNumberRef v22 = CFNumberCreate(v16, kCFNumberSInt32Type, &valuePtr);
      CFDictionarySetValue(*((CFMutableDictionaryRef *)v13 + 12), v20, v21);
      CFDictionarySetValue(*((CFMutableDictionaryRef *)v13 + 12), @"DitherControl", v22);
      CFRelease(v22);
      if (a3 && a2 && a1 && HIDWORD(a1) && a6) {
        buildTopRectAndSurface(*((_DWORD *)v13 + 1), *((_DWORD *)v13 + 2), *(_DWORD *)v13, 1, *((int **)v13 + 2), *((_DWORD *)v13 + 8), (char **)v13 + 6, (int *)v13 + 14, (IOSurfaceRef *)v13 + 5);
      }
      uint64_t v23 = *((void *)v13 + 2);
      if (v23)
      {
        int v24 = *((_DWORD *)v13 + 3);
        if (v24) {
          *((void *)v13 + 8) = buildDestSurface(v24, v23, *((_DWORD *)v13 + 8));
        }
      }
      getScalerCapabilities(0, 0, 0);
    }
    else
    {
      uint64_t v25 = (void *)*((void *)v13 + 2);
      if (v25) {
        free(v25);
      }
      free(v13);
      return 0;
    }
  }
  return v13;
}

void buildTopRectAndSurface(int a1, int a2, OSType a3, int a4, int *a5, int a6, char **a7, int *a8, IOSurfaceRef *a9)
{
  char v10 = a4;
  uint64_t v15 = a5 + 1;
  int v14 = a5[1];
  if (*a5 <= v14) {
    int v16 = a5[1];
  }
  else {
    int v16 = *a5;
  }
  if (a1 > a2) {
    int v17 = v16;
  }
  else {
    int v17 = *a5 * a2 / a1;
  }
  if (a1 > a2) {
    int v18 = v14 * a1 / a2;
  }
  else {
    int v18 = v16;
  }
  if (a6 >= 2)
  {
    unint64_t v19 = a5 + 3;
    uint64_t v20 = a6 - 1;
    do
    {
      int v22 = *(v19 - 1);
      int v21 = *v19;
      if (v22 > v18 || v21 > v17)
      {
        if (v22 <= v21) {
          int v24 = *v19;
        }
        else {
          int v24 = *(v19 - 1);
        }
        int v25 = v22 * a2;
        int v26 = v21 * a1 / a2;
        if (a1 <= a2) {
          int v26 = v24;
        }
        int v27 = v25 / a1;
        if (a1 > a2) {
          int v27 = v24;
        }
        if (v26 > v18 || v27 > v17)
        {
          int v17 = v27;
          int v18 = v26;
        }
      }
      v19 += 2;
      --v20;
    }
    while (v20);
  }
  if ((a4 & 1) == 0 && v18 >= (a1 + 3) >> 2 && v17 >= (a2 + 3) >> 2)
  {
    if (a6 <= 1) {
      return;
    }
LABEL_57:
    int v38 = 0;
    int v39 = *a5;
    int v40 = a5[1];
LABEL_58:
    float v41 = &a5[2 * (a6 - 1)];
    int v44 = *v41;
    float v42 = v41 + 1;
    int v43 = v44;
    while (v39 > v43 || v40 > *v42)
    {
      int v39 = (v39 + 3) >> 2;
      int v40 = (v40 + 3) >> 2;
      if (v39 <= v43 && v40 <= *v42) {
        break;
      }
      ++v38;
    }
    goto LABEL_64;
  }
  int v30 = 1;
  int v31 = a1;
  int v32 = a2;
  do
  {
    int v32 = (v32 + 3) >> 2;
    int v31 = (v31 + 3) >> 2;
    --v30;
  }
  while (v31 > v18 || v32 > v17);
  if (v30) {
    BOOL v34 = v31 == v18;
  }
  else {
    BOOL v34 = 1;
  }
  int v36 = !v34 && v32 != v17;
  int v37 = v36 - v30;
  if (v37) {
    int v38 = v37;
  }
  else {
    int v38 = a4;
  }
  if (a6 > 1)
  {
    int v39 = v18;
    int v40 = v17;
    if (v38) {
      goto LABEL_58;
    }
    goto LABEL_57;
  }
LABEL_64:
  if (v38 < 1) {
    return;
  }
  uint64_t v45 = v38;
  unsigned int v76 = malloc_type_calloc(1uLL, 24 * v38, 0x1000040504FFAC1uLL);
  int v46 = (a1 + 3) >> 2;
  if ((v10 & 1) != 0 || v46 > v18 || v17 < (a2 + 3) >> 2)
  {
    int v47 = (a2 + 3) >> 2;
    if (v46 > v18 || v47 > v17)
    {
      int v49 = 0;
      int v48 = 0;
      CFDataRef v50 = (char *)v76;
      uint64_t v51 = v76 + 2;
      do
      {
        do
        {
          *uint64_t v51 = v46;
          v51[1] = v47;
          *(v51 - 1) = v48;
          v48 += v47;
          int v47 = (v47 + 3) >> 2;
          int v46 = (v46 + 3) >> 2;
          v51 += 6;
          ++v49;
        }
        while (v46 > v18);
      }
      while (v47 > v17);
    }
    else
    {
      int v48 = 0;
      int v49 = 0;
      CFDataRef v50 = (char *)v76;
    }
    if (!v49 && (v10 & 1) != 0 || v49 && v46 != v18 && v47 != v17)
    {
      OSType v52 = &v50[24 * v49];
      *((_DWORD *)v52 + 2) = v18;
      *((_DWORD *)v52 + 3) = v17;
      *((_DWORD *)v52 + 1) = v48;
      v48 += v17;
      ++v49;
    }
  }
  else
  {
    int v48 = 0;
    int v49 = 0;
    CFDataRef v50 = (char *)v76;
  }
  if (v49 < v38)
  {
    uint64_t v53 = &v50[24 * (v49 - 1)];
    uint64_t v54 = (int *)(v53 + 8);
    if (v49 <= 0) {
      uint64_t v54 = a5;
    }
    int v55 = *v54;
    CFDataRef v56 = (int *)(v53 + 12);
    if (v49 <= 0) {
      CFDataRef v56 = v15;
    }
    int v57 = *v56;
    uint64_t v58 = (int *)&v50[24 * v49 + 8];
    uint64_t v59 = v38 - (uint64_t)v49;
    do
    {
      int v55 = (v55 + 3) >> 2;
      int v57 = (v57 + 3) >> 2;
      *uint64_t v58 = v55;
      v58[1] = v57;
      *(v58 - 1) = v48;
      v48 += v57;
      v58 += 6;
      --v59;
    }
    while (v59);
  }
  if (a3 == 875836518 || a3 == 875704934) {
    goto LABEL_104;
  }
  if (a3 == 875704422)
  {
    char v60 = 0;
    CFAllocatorRef v61 = v50 + 12;
    do
    {
      if (*(v61 - 4)) {
        char v60 = 1;
      }
      v61 += 24;
      --v45;
    }
    while (v45);
    if (v60)
    {
      char v77 = 0;
      getScalerCapabilities(0, 0, &v77);
      if (v77)
      {
        a3 = 1111970369;
        goto LABEL_98;
      }
    }
LABEL_104:
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!Mutable) {
      goto LABEL_114;
    }
    int v67 = Mutable;
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    CFMutableArrayRef v68 = CFArrayCreateMutable(0, 2, MEMORY[0x1E4F1D510]);
    if (v68)
    {
      CFTypeRef v69 = v68;
      CFMutableDictionaryRef v70 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (v70)
      {
        CFMutableDictionaryRef v71 = v70;
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        CFArrayAppendValue(v69, v71);
        CFRelease(v71);
      }
      CFMutableDictionaryRef v72 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (v72)
      {
        CFMutableDictionaryRef v73 = v72;
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        CFArrayAppendValue(v69, v73);
        CFRelease(v73);
      }
      CFDictionarySetValue(v67, (const void *)*MEMORY[0x1E4F2F238], v69);
      CFRelease(v69);
    }
    FigCFDictionarySetInt32();
    IOSurfaceRef v65 = IOSurfaceCreate(v67);
    CFRelease(v67);
    CFDataRef v50 = (char *)v76;
    if (!v65) {
      goto LABEL_114;
    }
LABEL_113:
    *a8 = v38;
    *a7 = v50;
    *a9 = v65;
    return;
  }
LABEL_98:
  int v78 = 0;
  CFDictionaryRef v62 = CVPixelFormatDescriptionCreateWithPixelFormatType((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a3);
  if (v62)
  {
    FigCFDictionaryGetInt32IfPresent();
    CFRelease(v62);
    if (v78)
    {
      CFMutableDictionaryRef v63 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (v63)
      {
        CFDictionaryRef v64 = v63;
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        CFDataRef v50 = (char *)v76;
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        IOSurfaceRef v65 = IOSurfaceCreate(v64);
        CFRelease(v64);
        if (v65) {
          goto LABEL_113;
        }
      }
    }
  }
LABEL_114:
  free(v50);
}

IOSurfaceRef buildDestSurface(int a1, uint64_t a2, int a3)
{
  if (a1 != 1278555701 && a1 != 1111970369 && a1 != 892679473) {
    return 0;
  }
  if (a3 >= 1)
  {
    int v3 = 0;
    uint64_t v4 = a3;
    uint64_t v5 = (int *)(a2 + 4);
    do
    {
      int v6 = *v5;
      v5 += 2;
      v3 += v6;
      --v4;
    }
    while (v4);
  }
  CFDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  IOSurfaceRef v8 = IOSurfaceCreate(Mutable);
  CFRelease(Mutable);
  return v8;
}

int *getScalerCapabilities(int *result, unsigned char *a2, unsigned char *a3)
{
  uint64_t v5 = result;
  if ((getScalerCapabilities_checked & 1) == 0)
  {
    mach_port_t v6 = *MEMORY[0x1E4F2EEF0];
    CFDictionaryRef v7 = IOServiceMatching("AppleM2ScalerCSCDriver");
    uint64_t result = (int *)IOServiceGetMatchingService(v6, v7);
    if (result)
    {
      io_object_t v8 = result;
      uint64_t valuePtr = 0;
      int v18 = 0;
      CFDictionaryRef v9 = (const __CFDictionary *)IORegistryEntrySearchCFProperty((io_registry_entry_t)result, "IOService", @"IOSurfaceAcceleratorCapabilitiesDict", 0, 0);
      if (v9)
      {
        CFDictionaryRef v10 = v9;
        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v9, @"IOSurfaceAcceleratorScalerVersion");
        if (Value)
        {
          CFNumberRef v12 = Value;
          CFTypeID v13 = CFGetTypeID(Value);
          if (v13 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v12, kCFNumberLongLongType, &valuePtr);
            if (valuePtr >= 262151) {
              getScalerCapabilities__numberOfScalerCores = 1;
            }
            if (valuePtr == 131079 || valuePtr == 131074) {
              getScalerCapabilities__isH3Platforuint64_t m = 1;
            }
          }
        }
        CFNumberRef v14 = (const __CFNumber *)CFDictionaryGetValue(v10, @"IOSurfaceAcceleratorFormatInARGB1555");
        if (v14)
        {
          CFNumberRef v15 = v14;
          CFTypeID v16 = CFGetTypeID(v14);
          if (v16 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v15, kCFNumberIntType, &v18);
            if (v18 == 1) {
              getScalerCapabilities__supports5551 = 1;
            }
          }
        }
        CFRelease(v10);
      }
      uint64_t result = (int *)IOObjectRelease(v8);
    }
    getScalerCapabilities_checked = 1;
  }
  if (v5)
  {
    if (getScalerCapabilities__numberOfScalerCores) {
      int v17 = 2;
    }
    else {
      int v17 = 1;
    }
    int *v5 = v17;
  }
  if (a2) {
    *a2 = getScalerCapabilities__supports5551;
  }
  if (a3) {
    *a3 = getScalerCapabilities__isH3Platform;
  }
  return result;
}

void CMPhotoCascadingDownscaleDestroy(void *a1)
{
  if (a1)
  {
    unint64_t v2 = (void *)a1[6];
    if (v2)
    {
      free(v2);
      a1[6] = 0;
    }
    int v3 = (const void *)a1[5];
    if (v3)
    {
      CFRelease(v3);
      a1[5] = 0;
    }
    uint64_t v4 = (void *)a1[2];
    if (v4)
    {
      free(v4);
      a1[2] = 0;
    }
    uint64_t v5 = (void *)a1[3];
    if (v5)
    {
      free(v5);
      a1[3] = 0;
    }
    mach_port_t v6 = (const void *)a1[8];
    if (v6)
    {
      CFRelease(v6);
      a1[8] = 0;
    }
    CFDictionaryRef v7 = (const void *)a1[9];
    if (v7)
    {
      CFRelease(v7);
      a1[9] = 0;
    }
    io_object_t v8 = (const void *)a1[11];
    if (v8)
    {
      CFRelease(v8);
      a1[11] = 0;
    }
    CFDictionaryRef v9 = (const void *)a1[12];
    if (v9) {
      CFRelease(v9);
    }
    free(a1);
  }
}

uint64_t CMPhotoCascadingDownscale(uint64_t a1, IOSurfaceRef buffer, int a3, int a4, int *a5, uint64_t a6, uint64_t a7, int a8)
{
  long long v145 = 0;
  v146[0] = 0;
  int v144 = 0;
  CFTypeRef v143 = 0;
  if (buffer && a5 && a6)
  {
    if (!a8) {
      return 0;
    }
    Pixeluint64_t Format = IOSurfaceGetPixelFormat(buffer);
    OSType v18 = PixelFormat;
    if (PixelFormat != 875704422 && PixelFormat != 1111970369) {
      goto LABEL_12;
    }
    if (a3 != 892679473 && a3 != 1111970369 && a3 != 1278555701) {
      goto LABEL_12;
    }
    if (a4 >= 2)
    {
      v17.i32[0] = a4;
      uint8x8_t v19 = (uint8x8_t)vcnt_s8(v17);
      v19.i16[0] = vaddlv_u8(v19);
      if (v19.i32[0] > 1u) {
        goto LABEL_12;
      }
    }
    if (a8 >= 2)
    {
      int v22 = a5 + 3;
      int v23 = *a5;
      uint64_t v24 = a8 - 1;
      do
      {
        int v25 = *(v22 - 1);
        if (v25 > v23 || v25 < 16 || *v22 <= 15) {
          goto LABEL_12;
        }
        v22 += 2;
        int v23 = v25;
      }
      while (--v24);
    }
    uint64_t v134 = a6;
    int v135 = a4;
    if (a1)
    {
      BOOL v26 = (a3 != 892679473
          || (LOBYTE(valuePtr) = 0, getScalerCapabilities(0, &valuePtr, 0), (_BYTE)valuePtr)
          || *(_DWORD *)(a1 + 12) != 1278555701)
         && *(_DWORD *)(a1 + 12) != a3
         || *(_DWORD *)(a1 + 32) != a8
         || memcmp(a5, *(const void **)(a1 + 16), 8 * a8) != 0;
      int v27 = v18 != *(_DWORD *)a1
         || IOSurfaceGetWidth(buffer) != *(_DWORD *)(a1 + 4)
         || IOSurfaceGetHeight(buffer) != *(_DWORD *)(a1 + 8)
         || v26;
      if (!v26)
      {
LABEL_41:
        uint64_t v130 = a1;
        int v131 = a8;
        if (a3 == 1111970369)
        {
          BOOL v28 = 0;
          BOOL v29 = 0;
          int v125 = 4;
          int v30 = 1111970369;
          goto LABEL_64;
        }
        if (a3 != 1278555701)
        {
          LOBYTE(valuePtr) = 0;
          getScalerCapabilities(0, &valuePtr, 0);
          BOOL v28 = (_BYTE)valuePtr == 0;
          if ((_BYTE)valuePtr) {
            int v31 = 892679473;
          }
          else {
            int v31 = 1278555701;
          }
          int v140 = v31;
          if (a8 < 2)
          {
            BOOL v29 = 0;
            int v125 = 2;
LABEL_63:
            int v30 = v140;
            goto LABEL_64;
          }
          BOOL v29 = 0;
          int v125 = 2;
          int v30 = v31;
          if (v18 == 892679473 || v18 == 1278555701)
          {
LABEL_64:
            BOOL v133 = v28;
            if (v27)
            {
              if (!a1)
              {
                int Width = IOSurfaceGetWidth(buffer);
                int Height = IOSurfaceGetHeight(buffer);
                int v45 = Width;
                a1 = v130;
                buildTopRectAndSurface(v45, Height, v18, v29, a5, v131, &v145, &v144, v146);
                int v36 = v135;
                if (v26)
                {
                  buffera = buildDestSurface(v30, (uint64_t)a5, v131);
                  goto LABEL_79;
                }
                goto LABEL_78;
              }
              *(_DWORD *)(a1 + 56) = 0;
              BOOL v34 = *(void **)(a1 + 48);
              if (v34)
              {
                free(v34);
                *(void *)(a1 + 48) = 0;
              }
              int v35 = *(const void **)(a1 + 40);
              int v36 = v135;
              if (v35)
              {
                CFRelease(v35);
                *(void *)(a1 + 40) = 0;
              }
              int v37 = IOSurfaceGetWidth(buffer);
              int v38 = IOSurfaceGetHeight(buffer);
              int v39 = v37;
              a1 = v130;
              buildTopRectAndSurface(v39, v38, v18, v29, a5, v131, &v145, &v144, v146);
              *(_DWORD *)(v130 + 56) = v144;
              int v40 = v145;
              *(IOSurfaceRef *)(v130 + 40) = v146[0];
              *(void *)(v130 + 48) = v40;
              *(_DWORD *)(v130 + 4) = IOSurfaceGetWidth(buffer);
              *(_DWORD *)(v130 + 8) = IOSurfaceGetHeight(buffer);
              *(_DWORD *)uint64_t v130 = v18;
              if (!v26)
              {
LABEL_78:
                buffera = *(__IOSurface **)(a1 + 64);
                goto LABEL_79;
              }
            }
            else
            {
              int v144 = *(_DWORD *)(a1 + 56);
              float v41 = *(__IOSurface **)(a1 + 40);
              long long v145 = *(char **)(a1 + 48);
              v146[0] = v41;
              int v36 = v135;
              if (!v26) {
                goto LABEL_78;
              }
            }
            float v42 = *(const void **)(a1 + 64);
            if (v42) {
              CFRelease(v42);
            }
            buffera = buildDestSurface(v30, (uint64_t)a5, v131);
            *(void *)(a1 + 64) = buffera;
LABEL_79:
            LODWORD(valuePtr) = 0;
            getScalerCapabilities((int *)&valuePtr, 0, 0);
            CFTypeRef v132 = 0;
            int v46 = valuePtr == 1 || v29;
            int v138 = v46;
            if (v46 == 1)
            {
              int v47 = malloc_type_malloc(0x40uLL, 0x10A0040517A9223uLL);
              if (!v47)
              {
                CFStringRef v99 = 0;
                CFTypeRef cf = 0;
                int v48 = 0;
                uint64_t v21 = 4294950305;
LABEL_203:
                CFStringRef v100 = buffera;
                goto LABEL_187;
              }
              *int v47 = 0;
              v47[1] = v131;
              v47[2] = 1;
              *((void *)v47 + 2) = a5;
              *((void *)v47 + 3) = v134;
              v47[8] = v125;
              v47[9] = v36;
              v47[10] = v133;
              *((void *)v47 + 6) = buffera;
              CFTypeRef v132 = v47;
              v47[14] = 0;
            }
            if (a1)
            {
              CFTypeRef v143 = *(CFTypeRef *)(a1 + 72);
              int v48 = *(__CFDictionary **)(a1 + 88);
              CFTypeRef cf = *(__CFDictionary **)(a1 + 96);
            }
            else
            {
              CFAllocatorRef v49 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
              uint64_t v50 = IOSurfaceAcceleratorCreate();
              if (v50)
              {
                uint64_t v21 = v50;
                int v48 = 0;
                CFTypeRef cf = 0;
                CFStringRef v99 = v132;
                CFStringRef v100 = buffera;
                goto LABEL_188;
              }
              CFDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              OSType v52 = (const void *)*MEMORY[0x1E4F6EC80];
              uint64_t v53 = (const void *)*MEMORY[0x1E4F1CFD0];
              uint64_t v54 = Mutable;
              CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F6EC80], (const void *)*MEMORY[0x1E4F1CFD0]);
              if (a3 == 1111970369)
              {
                CFTypeRef cf = 0;
              }
              else
              {
                LODWORD(valuePtr) = 2;
                int v55 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                CFNumberRef v56 = CFNumberCreate(v49, kCFNumberSInt32Type, &valuePtr);
                CFDictionarySetValue(v55, v52, v53);
                CFTypeRef cf = v55;
                CFDictionarySetValue(v55, @"DitherControl", v56);
                CFRelease(v56);
              }
              int v48 = v54;
            }
            if (v144 >= 1)
            {
              unsigned int v57 = IOSurfaceGetWidth(buffer);
              unsigned int v58 = IOSurfaceGetHeight(buffer);
              uint64_t v59 = v145;
              uint64_t v60 = v144;
              *(void *)&long long v61 = 0;
              *((void *)&v61 + 1) = __PAIR64__(v58, v57);
              for (uint64_t i = 1; ; ++i)
              {
                long long valuePtr = v61;
                uint64_t v142 = 0;
                uint64_t v63 = IOSurfaceAcceleratorBlitSurface();
                if (v63) {
                  break;
                }
                if (i >= v60) {
                  goto LABEL_97;
                }
                long long v64 = *(_OWORD *)v59;
                v59 += 24;
                long long v61 = v64;
              }
              uint64_t v21 = v63;
              CFStringRef v99 = v132;
              goto LABEL_203;
            }
LABEL_97:
            uint64_t v129 = v48;
            if (v130) {
              RunLoopSource = *(__CFRunLoopSource **)(v130 + 80);
            }
            else {
              RunLoopSource = (__CFRunLoopSource *)IOSurfaceAcceleratorGetRunLoopSource();
            }
            Current = CFRunLoopGetCurrent();
            CFStringRef mode = (const __CFString *)*MEMORY[0x1E4F1D410];
            char v127 = RunLoopSource;
            CFRunLoopAddSource(Current, RunLoopSource, (CFRunLoopMode)*MEMORY[0x1E4F1D410]);
            unsigned int v67 = IOSurfaceGetWidth(buffer);
            unsigned int v68 = IOSurfaceGetHeight(buffer);
            if (v138) {
              IOSurfaceLock(buffera, 1u, 0);
            }
            if (v131 < 1)
            {
LABEL_145:
              int v48 = v129;
              if (!v138) {
                goto LABEL_150;
              }
              if (*v132 < v131)
              {
                CFStringRef v96 = (const __CFString *)*MEMORY[0x1E4F1D418];
                do
                  CFRunLoopRunInMode(v96, 1.0, 1u);
                while (*v132 < v131);
              }
              uint64_t v21 = v132[14];
              if (!v21)
              {
LABEL_150:
                int v97 = CFRunLoopGetCurrent();
                CFRunLoopRemoveSource(v97, v127, mode);
                if (!v130)
                {
                  if (v129) {
                    CFRelease(v129);
                  }
                  if (cf) {
                    CFRelease(cf);
                  }
                  if (v143)
                  {
                    CFRelease(v143);
                    int v48 = 0;
                    CFTypeRef cf = 0;
                    CFTypeRef v143 = 0;
                  }
                  else
                  {
                    int v48 = 0;
                    CFTypeRef cf = 0;
                  }
                }
                if (v138)
                {
                  free(v132);
                  CFStringRef v99 = 0;
                }
                else
                {
                  size_t BytesPerRow = IOSurfaceGetBytesPerRow(buffera);
                  IOSurfaceLock(buffera, 1u, 0);
                  BaseAddress = (char *)IOSurfaceGetBaseAddress(buffera);
                  if (v131 < 1)
                  {
                    CFStringRef v99 = v132;
                  }
                  else
                  {
                    int v103 = BaseAddress;
                    for (uint64_t j = 0; j != v131; ++j)
                    {
                      uint64_t v105 = *(char **)(v134 + 8 * j);
                      BOOL v106 = &a5[2 * j];
                      size_t v107 = *v106 * (uint64_t)v125;
                      if (v135) {
                        int v108 = (v135 - 1 + v107) & -v135;
                      }
                      else {
                        int v108 = *v106 * v125;
                      }
                      int v111 = v106[1];
                      uint64_t v110 = v106 + 1;
                      int v109 = v111;
                      if (v133)
                      {
                        if (v109 >= 1)
                        {
                          int v112 = 0;
                          int v113 = (int)v107 >> 1;
                          do
                          {
                            if ((int)v107 < 15)
                            {
                              unsigned int v119 = 0;
                              uint64_t v118 = v103;
                              uint64_t v117 = v105;
                            }
                            else
                            {
                              uint64_t v114 = 0;
                              int v115 = 0;
                              v116.i64[0] = 0x1F001F001F001FLL;
                              v116.i64[1] = 0x1F001F001F001FLL;
                              do
                              {
                                *(_OWORD *)&v105[v114] = *(_OWORD *)&vorrq_s8(vandq_s8(*(int8x16_t *)&v103[v114], v116), (int8x16_t)(*(_OWORD *)&vshrq_n_u16(*(uint16x8_t *)&v103[v114], 1uLL) & __PAIR128__(0xFFE0FFE0FFE0FFE0, 0xFFE0FFE0FFE0FFE0))) | __PAIR128__(0x8000800080008000, 0x8000800080008000);
                                v115 += 8;
                                v114 += 16;
                              }
                              while (v115 < ((int)v107 >> 1) - 7);
                              uint64_t v117 = &v105[v114];
                              uint64_t v118 = &v103[v114];
                              unsigned int v119 = v113 & 0xFFFFFFF8;
                            }
                            BOOL v120 = __OFSUB__(v113, v119);
                            int v121 = v113 - v119;
                            if (!((v121 < 0) ^ v120 | (v121 == 0)))
                            {
                              do
                              {
                                unsigned __int16 v122 = *(_WORD *)v118;
                                v118 += 2;
                                *(_WORD *)uint64_t v117 = v122 & 0x1F | (32 * (v122 >> 6)) | 0x8000;
                                v117 += 2;
                                --v121;
                              }
                              while (v121);
                            }
                            v103 += BytesPerRow;
                            v105 += v108;
                            ++v112;
                          }
                          while (v112 < *v110);
                        }
                      }
                      else if (v109 >= 1)
                      {
                        int v123 = 0;
                        uint64_t v124 = v108;
                        do
                        {
                          memcpy(v105, v103, v107);
                          v103 += BytesPerRow;
                          v105 += v124;
                          ++v123;
                        }
                        while (v123 < *v110);
                      }
                    }
                    CFStringRef v99 = v132;
                  }
                }
                CFStringRef v100 = buffera;
                IOSurfaceUnlock(buffera, 1u, 0);
                uint64_t v21 = 0;
                goto LABEL_187;
              }
            }
            else
            {
              uint64_t v69 = 0;
              uint64_t v139 = 0;
              int v70 = 0;
              uint64_t v136 = 0;
              while (1)
              {
                if (v146[0])
                {
                  unsigned int v71 = a5[2 * v69];
                  if (*((_DWORD *)v145 + 2) >= v71)
                  {
                    int v72 = a5[2 * v69 + 1];
                    if (*((_DWORD *)v145 + 3) >= v72)
                    {
                      if (v144 < 1)
                      {
                        LODWORD(v73) = 0;
                      }
                      else
                      {
                        uint64_t v73 = 0;
                        float v74 = (float)(int)v71 / (float)v72;
                        uint64_t v75 = v145 + 12;
                        while (1)
                        {
                          unsigned int v76 = *((_DWORD *)v75 - 1);
                          unsigned int v77 = *(_DWORD *)v75;
                          if (a7 && *(_DWORD *)(a7 + 4 * v69) == 2)
                          {
                            float v78 = (float)v76 / (float)v77;
                            if (v78 <= v74)
                            {
                              if (v78 < v74)
                              {
                                float v82 = (float)v77 - (float)((float)(v76 * v72) / (float)(int)v71);
                                unsigned int v83 = llroundf(v82);
                                if ((int)vcvtmd_s64_f64(v82 * 0.5 + 0.5) <= 0) {
                                  unsigned int v84 = 0;
                                }
                                else {
                                  unsigned int v84 = v83;
                                }
                                v77 -= v84;
                              }
                            }
                            else
                            {
                              float v79 = (float)v76 - (float)((float)(v77 * v71) / (float)v72);
                              unsigned int v80 = llroundf(v79);
                              if ((int)vcvtmd_s64_f64(v79 * 0.5 + 0.5) <= 0) {
                                unsigned int v81 = 0;
                              }
                              else {
                                unsigned int v81 = v80;
                              }
                              v76 -= v81;
                            }
                          }
                          if (v76 < v71 && v77 < v72) {
                            break;
                          }
                          v75 += 24;
                          if (v144 == ++v73)
                          {
                            LODWORD(v73) = v144;
                            break;
                          }
                        }
                      }
                      int v86 = &v145[24 * (int)v73 - 24];
                      HIDWORD(v139) = *(_DWORD *)v86;
                      unsigned int v67 = *((_DWORD *)v86 + 2);
                      LODWORD(v139) = *((_DWORD *)v86 + 1);
                      unsigned int v68 = *((_DWORD *)v86 + 3);
                      uint64_t v136 = *((void *)v86 + 2);
                    }
                  }
                }
                else
                {
                  unsigned int v71 = a5[2 * v69];
                }
                unsigned int v87 = a5[2 * v69 + 1];
                float v88 = (float)v67 / (float)v68;
                float v89 = (float)v71 / (float)v87;
                if (a7 && *(_DWORD *)(a7 + 4 * v69) == 2)
                {
                  if (v88 <= v89)
                  {
                    if (v88 < v89)
                    {
                      float v92 = (float)v68 - (float)((float)(v87 * v67) / (float)v71);
                      int v93 = vcvtmd_s64_f64(v92 * 0.5 + 0.5);
                      unsigned int v94 = llroundf(v92);
                      LODWORD(v139) = (v93 & ~(v93 >> 31)) + v139;
                      if (v93 <= 0) {
                        unsigned int v95 = 0;
                      }
                      else {
                        unsigned int v95 = v94;
                      }
                      v68 -= v95;
                    }
                  }
                  else
                  {
                    float v90 = (float)v67 - (float)((float)(v71 * v68) / (float)v87);
                    int v91 = vcvtmd_s64_f64(v90 * 0.5 + 0.5);
                    if (v91 >= 1)
                    {
                      v67 -= llroundf(v90);
                      HIDWORD(v139) += v91;
                    }
                  }
                }
                *(void *)&long long valuePtr = __PAIR64__(v139, HIDWORD(v139));
                *((void *)&valuePtr + 1) = __PAIR64__(v68, v67);
                uint64_t v142 = v136;
                uint64_t v21 = IOSurfaceAcceleratorBlitSurface();
                if (v21) {
                  break;
                }
                v70 += v87;
                if (++v69 == v131) {
                  goto LABEL_145;
                }
              }
            }
            if (v127)
            {
              CFDictionaryRef v98 = CFRunLoopGetCurrent();
              CFRunLoopRemoveSource(v98, v127, mode);
            }
            CFStringRef v99 = v132;
            CFStringRef v100 = buffera;
            int v48 = v129;
LABEL_187:
            if (v130)
            {
LABEL_200:
              if (v99) {
                free(v99);
              }
              return v21;
            }
LABEL_188:
            if (v146[0]) {
              CFRelease(v146[0]);
            }
            if (v100) {
              CFRelease(v100);
            }
            if (v48) {
              CFRelease(v48);
            }
            if (cf) {
              CFRelease(cf);
            }
            if (v143) {
              CFRelease(v143);
            }
            if (v145) {
              free(v145);
            }
            goto LABEL_200;
          }
          BOOL v32 = (_BYTE)valuePtr == 0;
          if (IOSurfaceGetWidth(buffer) == *a5)
          {
            BOOL v29 = 0;
LABEL_62:
            int v125 = 2;
            BOOL v28 = v32;
            goto LABEL_63;
          }
LABEL_61:
          BOOL v29 = IOSurfaceGetWidth(buffer) != a5[1];
          goto LABEL_62;
        }
        if (a8 < 2)
        {
          BOOL v28 = 0;
          BOOL v29 = 0;
          int v125 = 2;
          int v30 = 1278555701;
          goto LABEL_64;
        }
        BOOL v28 = 0;
        int v125 = 2;
        int v30 = 1278555701;
        if (v18 != 892679473 && v18 != 1278555701)
        {
          size_t v33 = IOSurfaceGetWidth(buffer);
          BOOL v28 = 0;
          if (v33 != *a5)
          {
            int v140 = 1278555701;
            BOOL v32 = 0;
            goto LABEL_61;
          }
          int v125 = 2;
        }
        BOOL v29 = 0;
        goto LABEL_64;
      }
      *(_DWORD *)(a1 + 12) = a3;
    }
    else
    {
      int v27 = 1;
    }
    BOOL v26 = 1;
    goto LABEL_41;
  }
LABEL_12:
  return FigSignalErrorAt();
}

size_t completionCallback(size_t result, int a2, int a3)
{
  size_t v3 = result;
  if (a2)
  {
    *(_DWORD *)(result + 56) = a2;
  }
  else if (*(_DWORD *)(result + 8))
  {
    uint64_t v5 = a3;
    uint64_t v6 = 8 * a3;
    CFDictionaryRef v7 = *(char **)(*(void *)(result + 24) + v6);
    BaseAddress = (char *)IOSurfaceGetBaseAddress(*(IOSurfaceRef *)(result + 48));
    uint64_t result = IOSurfaceGetBytesPerRow(*(IOSurfaceRef *)(v3 + 48));
    size_t v9 = result;
    uint64_t v10 = *(void *)(v3 + 16);
    size_t v11 = *(int *)(v3 + 32) * (uint64_t)*(int *)(v10 + v6);
    if (a3 >= 1)
    {
      uint64_t v12 = a3;
      CFTypeID v13 = (int *)(v10 + 4);
      do
      {
        uint64_t v14 = *v13;
        v13 += 2;
        BaseAddress += result * v14;
        --v12;
      }
      while (v12);
    }
    int v15 = *(_DWORD *)(v3 + 36);
    if (v15) {
      int v16 = (v11 + v15 - 1) & -v15;
    }
    else {
      int v16 = v11;
    }
    int v17 = *(_DWORD *)(v10 + 8 * v5 + 4);
    if (*(_DWORD *)(v3 + 40))
    {
      if (v17 >= 1)
      {
        int v18 = 0;
        int v19 = (int)v11 >> 1;
        v20.i64[0] = 0x1F001F001F001FLL;
        v20.i64[1] = 0x1F001F001F001FLL;
        do
        {
          if ((int)v11 < 16)
          {
            unsigned int v25 = 0;
            uint64_t v24 = BaseAddress;
            int v23 = v7;
          }
          else
          {
            uint64_t v21 = 0;
            int v22 = 0;
            do
            {
              *(_OWORD *)&v7[v21] = *(_OWORD *)&vorrq_s8(vandq_s8(*(int8x16_t *)&BaseAddress[v21], v20), (int8x16_t)(*(_OWORD *)&vshrq_n_u16(*(uint16x8_t *)&BaseAddress[v21], 1uLL) & __PAIR128__(0xFFE0FFE0FFE0FFE0, 0xFFE0FFE0FFE0FFE0))) | __PAIR128__(0x8000800080008000, 0x8000800080008000);
              v22 += 8;
              v21 += 16;
            }
            while (v22 < ((int)v11 >> 1) - 7);
            int v23 = &v7[v21];
            uint64_t v24 = &BaseAddress[v21];
            unsigned int v25 = v19 & 0xFFFFFFF8;
          }
          BOOL v26 = __OFSUB__(v19, v25);
          int v27 = v19 - v25;
          if (!((v27 < 0) ^ v26 | (v27 == 0)))
          {
            do
            {
              unsigned __int16 v28 = *(_WORD *)v24;
              v24 += 2;
              *(_WORD *)int v23 = v28 & 0x1F | (32 * (v28 >> 6)) | 0x8000;
              v23 += 2;
              --v27;
            }
            while (v27);
          }
          BaseAddress += result;
          v7 += v16;
          ++v18;
        }
        while (v18 < *(_DWORD *)(*(void *)(v3 + 16) + 8 * v5 + 4));
      }
    }
    else if (v17 >= 1)
    {
      int v29 = 0;
      uint64_t v30 = v16;
      do
      {
        uint64_t result = (size_t)memcpy(v7, BaseAddress, v11);
        BaseAddress += v9;
        v7 += v30;
        ++v29;
      }
      while (v29 < *(_DWORD *)(*(void *)(v3 + 16) + 8 * v5 + 4));
    }
  }
  atomic_fetch_add_explicit((atomic_uint *volatile)v3, 1u, memory_order_relaxed);
  return result;
}

uint64_t CMPhotoFixedPatternNoiseEncoderAnalyzeAndCreateContext(__CVBuffer *a1, unsigned int a2, uint64_t a3, void *a4, void *a5)
{
  int v11 = 0;
  uint64_t v12 = 0;
  long long v6 = xmmword_1AB9E2C50;
  int v7 = 1065353216;
  uint64_t v9 = 0;
  uint64_t v8 = 0;
  uint64_t v10 = 0xBD0108000020001;
  uint64_t v13 = a3;
  return CMPhotoFixedPatternNoiseEncoderAnalyzeAndCreateContext2(a1, a2, 1, (uint64_t)&v6, a4, a5);
}

uint64_t CMPhotoFixedPatternNoiseEncoderAnalyzeAndCreateContext2(__CVBuffer *a1, unsigned int a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  uint64_t v12 = malloc_type_calloc(1uLL, 0x5048uLL, 0x1030040F2A0CDD9uLL);
  if (!v12) {
    return 4294950305;
  }
  uint64_t v13 = v12;
  uint64_t v14 = 4294950306;
  if (a2 > 0xFF || !a1 || !a3 || !a4) {
    goto LABEL_37;
  }
  if (CVPixelBufferGetPixelFormatType(a1) != 1278226488)
  {
    uint64_t v14 = 4294950301;
LABEL_37:
    free(v13);
    return v14;
  }
  unsigned __int16 Width = CVPixelBufferGetWidth(a1);
  unsigned __int16 Height = CVPixelBufferGetHeight(a1);
  if (!(Height * Width) || *(_WORD *)(a4 + 36) != 1) {
    goto LABEL_37;
  }
  unsigned __int16 v29 = Width;
  __int16 v30 = a2;
  int v31 = a6;
  BOOL v32 = a5;
  unsigned int v16 = 0;
  unsigned int v17 = 0;
  unsigned int v18 = 0;
  BOOL v34 = v13;
  int v19 = v13 + 10264;
  int8x16_t v20 = (unsigned __int16 *)(a4 + 36);
  uint64_t v21 = v20;
  do
  {
    int v22 = *v21;
    v21 += 32;
    if (v22)
    {
      if (!v20[2] || !v20[3] || !v20[1] || *((float *)v20 - 5) < *((float *)v20 - 6) || v20[4] && !*(void *)(v20 + 6)) {
        goto LABEL_33;
      }
      int v23 = *(__CVBuffer **)(v20 + 10);
      if (!v23) {
        goto LABEL_33;
      }
      if (CVPixelBufferGetPixelFormatType(*(CVPixelBufferRef *)(v20 + 10)) != 1278226488)
      {
        uint64_t v14 = 4294950301;
        goto LABEL_36;
      }
      if (CVPixelBufferGetWidth(v23) > 0xFF || CVPixelBufferGetHeight(v23) > 0xFF) {
        goto LABEL_34;
      }
      v18 += 32;
      v16 += 4 * v20[4];
      int v24 = CVPixelBufferGetWidth(v23);
      v17 += CVPixelBufferGetHeight(v23) * v24;
    }
    int8x16_t v20 = v21;
    --a3;
  }
  while (a3);
  if (!v17)
  {
LABEL_33:
    uint64_t v14 = 4294950306;
LABEL_36:
    uint64_t v13 = v34;
    goto LABEL_37;
  }
  unint64_t v25 = v17 + (unint64_t)v18;
  if (v25 + v16 + 92 > 0xFFFE)
  {
LABEL_34:
    uint64_t v14 = 4294950190;
    goto LABEL_36;
  }
  uint64_t v26 = CVPixelBufferLockBaseAddress(a1, 1uLL);
  if (v26)
  {
    uint64_t v14 = v26;
    goto LABEL_36;
  }
  __int16 BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  v34[2565] = CVPixelBufferGetBaseAddress(a1);
  *int v19 = v30;
  v19[1] = BytesPerRow;
  v19[2] = v29;
  v19[3] = Height;
  SlimHrlcGetSize_C((uint64_t)v34);
  if (v31) {
    *int v31 = v25 + v16 + v34[2568] + 252;
  }
  if (v32) {
    *BOOL v32 = v34;
  }
  else {
    free(v34);
  }
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  return 0;
}

uint64_t CMPhotoFixedPatternNoiseEncoderRun(uint64_t a1, __CVBuffer *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, void *a7)
{
  *(void *)&v19[4] = 0;
  uint64_t v20 = 0;
  uint64_t v15 = *(void *)(a4 + 20);
  int v16 = *(_DWORD *)(a4 + 28);
  __asm { FMOV            V1.2S, #16.0 }
  float32x2_t v17 = vrnda_f32(vmul_f32(*(float32x2_t *)(a4 + 40), _D1));
  v12.i32[0] = *(_DWORD *)(a4 + 48);
  v12.i32[1] = *(_DWORD *)(a4 + 60);
  *(float32x2_t *)v13.i8 = vrnda_f32(vmul_f32(vadd_f32(*(float32x2_t *)(a4 + 52), v12), (float32x2_t)0x4100000041000000));
  v13.i64[1] = v13.i64[0];
  int32x4_t v18 = vrev64q_s32(v13);
  *(void *)int v19 = 0xBD0108000020001;
  uint64_t v21 = a3;
  return CMPhotoFixedPatternNoiseEncoderRun2(a1, a2, 1, (uint64_t)&v15, (unsigned char *)a4, a5, a6, a7);
}

uint64_t CMPhotoFixedPatternNoiseEncoderRun2(uint64_t a1, CVPixelBufferRef pixelBuffer, uint64_t a3, uint64_t a4, unsigned char *a5, uint64_t a6, unint64_t a7, void *a8)
{
  uint64_t v8 = 4294950306;
  if (a1 && pixelBuffer && a3 && a4 && a5 && a6)
  {
    if (*a5 == 6)
    {
      int32x4_t v13 = (_WORD *)(a1 + 20528);
      unsigned __int16 Width = CVPixelBufferGetWidth(pixelBuffer);
      unsigned __int16 Height = CVPixelBufferGetHeight(pixelBuffer);
      if (__PAIR64__((unsigned __int16)v13[3], (unsigned __int16)v13[2]) == __PAIR64__(Height, Width)
        && *(_WORD *)(a4 + 36) == 1)
      {
        float v79 = a5;
        unsigned __int16 v73 = Height;
        unsigned __int16 v74 = Width;
        uint64_t v75 = pixelBuffer;
        unsigned int v76 = v13;
        int v72 = a8;
        unsigned int v16 = 0;
        unsigned int v17 = 0;
        unsigned int v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = (unsigned __int16 *)(a4 + 36);
        uint64_t v21 = a3;
        int v22 = (unsigned __int16 *)(a4 + 36);
        do
        {
          int v23 = *v22;
          v22 += 32;
          if (v23)
          {
            if (!v20[2]
              || !v20[3]
              || !v20[1]
              || *((float *)v20 - 5) < *((float *)v20 - 6)
              || v20[4] && !*(void *)(v20 + 6))
            {
              return 4294950306;
            }
            int v24 = *(__CVBuffer **)(v20 + 10);
            if (!v24) {
              return 4294950306;
            }
            if (CVPixelBufferGetPixelFormatType(*(CVPixelBufferRef *)(v20 + 10)) != 1278226488) {
              return 4294950301;
            }
            if (CVPixelBufferGetWidth(v24) > 0xFF || CVPixelBufferGetHeight(v24) > 0xFF) {
              return 4294950190;
            }
            ++v19;
            v18 += 32;
            v16 += 4 * v20[4];
            int v25 = CVPixelBufferGetWidth(v24);
            v17 += CVPixelBufferGetHeight(v24) * v25;
          }
          uint64_t v20 = v22;
          --v21;
        }
        while (v21);
        if (!v17) {
          return 4294950306;
        }
        unint64_t v26 = v17 + (unint64_t)v18;
        if (v26 + v16 + 92 > 0xFFFE || v26 + v16 + *(void *)(a1 + 20544) + 252 > a7) {
          return 4294950190;
        }
        uint64_t v27 = 0;
        *(_DWORD *)a6 = 1111904334;
        *(_WORD *)(a6 + 4) = *(_WORD *)v79;
        *(int16x4_t *)(a6 + 14) = vmovn_s32((int32x4_t)vcvtq_u32_f32(vrndaq_f32(vmulq_f32(*(float32x4_t *)(v79 + 4), (float32x4_t)vdupq_n_s32(0x47800000u)))));
        float v28 = *((float *)v79 + 6);
        *(_WORD *)(a6 + 22) = llroundf(*((float *)v79 + 5) * 256.0);
        __int16 v29 = llroundf(*((float *)v79 + 7) * 256.0);
        *(_WORD *)(a6 + 24) = llroundf(v28 * 256.0);
        *(_WORD *)(a6 + 26) = v29;
        float32x4_t v30 = (float32x4_t)vdupq_n_s32(0x42800000u);
        *(int16x8_t *)(a6 + 28) = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vrndaq_f32(vmulq_f32(*((float32x4_t *)v79 + 3), v30))), (int16x8_t)vcvtq_s32_f32(vrndaq_f32(vmulq_f32(*((float32x4_t *)v79 + 4), v30))));
        *(int16x8_t *)(a6 + 44) = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(*((float32x4_t *)v79 + 5)), (int16x8_t)vcvtq_s32_f32(*((float32x4_t *)v79 + 6)));
        *(void *)(a6 + 60) = *((void *)v79 + 4);
        float v31 = *((float *)v79 + 29);
        *(_WORD *)(a6 + 68) = llroundf(*((float *)v79 + 28) * 4.0);
        *(_WORD *)(a6 + 70) = llroundf(v31 * 4.0);
        *(_WORD *)(a6 + 72) = *((_WORD *)v79 + 60);
        uint64_t v32 = *(void *)(v79 + 122);
        *(_WORD *)(a6 + 82) = *((_WORD *)v79 + 65);
        *(void *)(a6 + 74) = v32;
        *(void *)(a6 + 84) = *(void *)(v79 + 132);
        *(_WORD *)(a6 + 12) = v19;
        __asm { FMOV            V0.4S, #16.0 }
        float32x4_t v80 = _Q0;
        uint64_t v38 = a4;
        uint64_t v39 = a3;
        do
        {
          __int16 v40 = *(_WORD *)(v38 + 36);
          if (v40)
          {
            float v41 = *(float *)(v38 + 4);
            uint64_t v42 = v27 + 1;
            int v43 = (int16x4_t *)(a6 + 32 * v27);
            v43[11].i16[2] = llroundf(*(float *)v38 * 256.0);
            int v44 = *(__CVBuffer **)(v38 + 56);
            v43[11].i16[3] = llroundf(v41 * 256.0);
            v43[12].i16[0] = llroundf(*(float *)(v38 + 8) * 256.0);
            v43[12].i16[1] = v40;
            v43[12].i32[1] = *(_DWORD *)(v38 + 40);
            v43[13].i8[0] = *(unsigned char *)(v38 + 38);
            v43[13].i8[1] = CVPixelBufferGetWidth(v44);
            __int8 v45 = CVPixelBufferGetHeight(v44);
            __int8 v46 = *(unsigned char *)(v38 + 44);
            v43[13].i32[1] = 0;
            v43[14] = vmovn_s32(vcvtq_s32_f32(vrndaq_f32(vmulq_f32(*(float32x4_t *)(v38 + 12), v80))));
            float v47 = *(float *)(v38 + 32);
            __int16 v48 = llroundf(*(float *)(v38 + 28) * 16.0);
            v43[13].i8[2] = v45;
            v43[13].i8[3] = v46;
            v43[15].i16[0] = v48;
            v43[15].i16[1] = llroundf(v47 * 16.0);
            uint64_t v27 = v42;
          }
          v38 += 64;
          --v39;
        }
        while (v39);
        uint64_t v49 = 0;
        uint64_t v50 = (void *)(a6 + 92 + 32 * v19);
        uint64_t v51 = a3;
        OSType v52 = (const void **)(a4 + 48);
        do
        {
          if (*((_WORD *)v52 - 6))
          {
            uint64_t v53 = v49 + 1;
            uint64_t v54 = *((unsigned __int16 *)v52 - 2);
            if (*((_WORD *)v52 - 2))
            {
              *(_WORD *)(a6 + 32 * v49 + 108) = (_WORD)v50 - a6;
              memcpy(v50, *v52, 4 * v54);
              uint64_t v50 = (void *)((char *)v50 + 4 * v54);
            }
          }
          else
          {
            uint64_t v53 = v49;
          }
          v52 += 8;
          uint64_t v49 = v53;
          --v51;
        }
        while (v51);
        uint64_t v55 = 0;
        uint64_t v56 = a4;
        do
        {
          uint64_t v57 = v56 + (v55 << 6);
          if (*(_WORD *)(v57 + 36))
          {
            uint64_t v58 = v51 + 1;
            uint64_t v59 = *(__CVBuffer **)(v57 + 56);
            size_t v60 = CVPixelBufferGetWidth(v59);
            size_t v61 = CVPixelBufferGetHeight(v59);
            size_t BytesPerRow = CVPixelBufferGetBytesPerRow(v59);
            if (v61 * v60)
            {
              size_t v63 = BytesPerRow;
              *(_WORD *)(a6 + 32 * v51 + 110) = (_WORD)v50 - a6;
              uint64_t v64 = CVPixelBufferLockBaseAddress(v59, 1uLL);
              if (v64) {
                return v64;
              }
              BaseAddress = (char *)CVPixelBufferGetBaseAddress(v59);
              if (v61)
              {
                CGColorSpaceRef v66 = BaseAddress;
                do
                {
                  memcpy(v50, v66, v60);
                  v66 += v63;
                  uint64_t v50 = (void *)((char *)v50 + v60);
                  --v61;
                }
                while (v61);
              }
              CVPixelBufferUnlockBaseAddress(v59, 1uLL);
            }
            uint64_t v56 = a4;
          }
          else
          {
            uint64_t v58 = v51;
          }
          ++v55;
          uint64_t v51 = v58;
        }
        while (v55 != a3);
        *(_WORD *)(a6 + 6) = (_WORD)v50 - a6;
        *uint64_t v50 = 196623;
        int v67 = (unsigned __int16)v76[3];
        *((_DWORD *)v50 + 2) = (unsigned __int16)v76[2];
        *((_DWORD *)v50 + 3) = v67;
        v50[2] = 0x4C303038536C6D58;
        *((_WORD *)v50 + 12) = v74;
        *((_WORD *)v50 + 13) = v73;
        *((_WORD *)v50 + 14) = 0;
        *((_WORD *)v50 + 15) = *v76;
        uint64_t v64 = CVPixelBufferLockBaseAddress(v75, 1uLL);
        if (v64) {
          return v64;
        }
        size_t v68 = CVPixelBufferGetBytesPerRow(v75);
        uint64_t v69 = CVPixelBufferGetBaseAddress(v75);
        if (v68 == (unsigned __int16)v76[1] && *(void **)(a1 + 20520) == v69)
        {
          uint64_t v83 = 0;
          uint64_t v8 = SlimHrlcEncodeRun_C(a1, (unsigned char *)v50 + 32, a6 + a7 - (void)(v50 + 4), &v83);
          uint64_t v70 = v83 - a6;
          *(_DWORD *)(a6 + 8) = v83 - a6 - *(unsigned __int16 *)(a6 + 6);
          if (v72) {
            *int v72 = v70;
          }
        }
        else
        {
          uint64_t v8 = 4294950306;
        }
        CVPixelBufferUnlockBaseAddress(v75, 1uLL);
      }
      else
      {
        return 4294950306;
      }
    }
    else
    {
      return 4294950302;
    }
  }
  return v8;
}

uint64_t CMPhotoFixedPatternNoiseDecoderGetFpnImageDimensions2(uint64_t a1, unint64_t a2, void *a3, void *a4)
{
  if (*(_DWORD *)a1 != 1111904334) {
    return 4294950194;
  }
  uint64_t v8 = 0;
  switch(*(unsigned char *)(a1 + 4))
  {
    case 1:
      if (*(unsigned char *)(a1 + 5) != 3) {
        goto LABEL_6;
      }
      uint64_t result = CheckFileV1P3(a1, a2, &v8);
      if (!result) {
        goto LABEL_16;
      }
      break;
    case 2:
      uint64_t result = CheckFileV1P3(a1, a2, &v8);
      if (!result) {
        goto LABEL_16;
      }
      break;
    case 3:
      uint64_t result = CheckFileV3(a1, a2, &v8);
      if (!result) {
        goto LABEL_16;
      }
      break;
    case 4:
      uint64_t result = CheckFileV4(a1, a2, &v8);
      if (!result) {
        goto LABEL_16;
      }
      break;
    case 5:
      uint64_t result = CheckFileV5(a1, a2, &v8);
      if (!result) {
        goto LABEL_16;
      }
      break;
    case 6:
      uint64_t result = CheckFileV6(a1, a2, &v8);
      if (!result)
      {
LABEL_16:
        uint64_t v7 = v8;
        if (v8)
        {
          if (a3) {
            *a3 = *(unsigned __int16 *)(v8 + 24);
          }
          uint64_t result = 0;
          if (a4) {
            *a4 = *(unsigned __int16 *)(v7 + 26);
          }
        }
        else
        {
          uint64_t result = 4294950304;
        }
      }
      break;
    default:
LABEL_6:
      uint64_t result = 4294950299;
      break;
  }
  return result;
}

uint64_t CMPhotoFixedPatternNoiseDecoderGetShadingThumbDimensions(uint64_t a1, unint64_t a2, void *a3, void *a4)
{
  return CMPhotoFixedPatternNoiseDecoderGetShadingThumbDimensions2(a1, a2, 1, a3, a4);
}

uint64_t CMPhotoFixedPatternNoiseDecoderGetShadingThumbDimensions2(uint64_t a1, unint64_t a2, int a3, void *a4, void *a5)
{
  if (*(_DWORD *)a1 != 1111904334) {
    return 4294950194;
  }
  switch(*(unsigned char *)(a1 + 4))
  {
    case 1:
      if (*(unsigned char *)(a1 + 5) != 3) {
        goto LABEL_7;
      }
      if (a3 != 1) {
        goto LABEL_35;
      }
      uint64_t result = CheckFileV1P3(a1, a2, 0);
      if (!result) {
        goto LABEL_10;
      }
      break;
    case 2:
      if (a3 != 1) {
        goto LABEL_35;
      }
      uint64_t result = CheckFileV1P3(a1, a2, 0);
      if (!result)
      {
LABEL_10:
        uint64_t v10 = (unsigned __int8 *)(a1 + 48);
        int v11 = (unsigned __int8 *)(a1 + 49);
        goto LABEL_20;
      }
      break;
    case 3:
      if (a3 != 1) {
        goto LABEL_35;
      }
      uint64_t result = CheckFileV3(a1, a2, 0);
      if (!result)
      {
        uint64_t v10 = (unsigned __int8 *)(a1 + 56);
        int v11 = (unsigned __int8 *)(a1 + 57);
        goto LABEL_20;
      }
      break;
    case 4:
      if (a3 != 1) {
        goto LABEL_35;
      }
      uint64_t result = CheckFileV4(a1, a2, 0);
      if (!result) {
        goto LABEL_19;
      }
      break;
    case 5:
      if (a3 != 1) {
        goto LABEL_35;
      }
      uint64_t result = CheckFileV5(a1, a2, 0);
      if (!result)
      {
LABEL_19:
        uint64_t v10 = (unsigned __int8 *)(a1 + 58);
        int v11 = (unsigned __int8 *)(a1 + 59);
LABEL_20:
        unsigned int v12 = *v10;
        unsigned int v13 = *v11;
        goto LABEL_21;
      }
      break;
    case 6:
      uint64_t result = CheckFileV6(a1, a2, 0);
      if (!result)
      {
        uint64_t v14 = *(unsigned __int16 *)(a1 + 12);
        if (*(_WORD *)(a1 + 12))
        {
          uint64_t v15 = (unsigned __int8 *)(a1 + 106);
          unsigned int v12 = 0xFFFF;
          unsigned int v13 = 0xFFFF;
          do
          {
            if (*((unsigned __int16 *)v15 - 4) == a3)
            {
              unsigned int v12 = *(v15 - 1);
              unsigned int v13 = *v15;
            }
            v15 += 32;
            --v14;
          }
          while (v14);
          uint64_t result = 4294950303;
          if (v12 != 0xFFFF && v13 != 0xFFFF)
          {
LABEL_21:
            if (a4) {
              *a4 = v12;
            }
            uint64_t result = 0;
            if (a5) {
              *a5 = v13;
            }
          }
        }
        else
        {
LABEL_35:
          uint64_t result = 4294950303;
        }
      }
      break;
    default:
LABEL_7:
      uint64_t result = 4294950299;
      break;
  }
  return result;
}

uint64_t CMPhotoFixedPatternNoiseDecoderRun(uint64_t a1, unint64_t a2, __CVBuffer *a3, uint64_t a4, uint64_t a5)
{
  long long v7 = 0u;
  memset(v6, 0, sizeof(v6));
  WORD2(v7) = 1;
  uint64_t v8 = 0;
  uint64_t v9 = a4;
  return CMPhotoFixedPatternNoiseDecoderRun2(a1, a2, a3, 1, (uint64_t)v6, a5);
}

uint64_t CMPhotoFixedPatternNoiseDecoderRun2(uint64_t a1, unint64_t a2, __CVBuffer *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  uint64_t v74 = 0;
  if (*(_DWORD *)a1 != 1111904334) {
    return 4294950194;
  }
  uint64_t v91 = 0;
  __int16 v92 = 0;
  switch(*(unsigned char *)(a1 + 4))
  {
    case 1:
      if (*(unsigned char *)(a1 + 5) != 3) {
        return 4294950299;
      }
      uint64_t v8 = CheckFileV1P3(a1, a2, &v74);
      if (!v8) {
        goto LABEL_8;
      }
      return v8;
    case 2:
      uint64_t v8 = CheckFileV1P3(a1, a2, &v74);
      if (v8) {
        return v8;
      }
LABEL_8:
      uint64_t v11 = 0;
      char v12 = *(unsigned char *)(a1 + 4);
      char v13 = *(unsigned char *)(a1 + 5);
      *(_WORD *)unsigned __int16 v73 = *(_WORD *)(a1 + 12);
      *(_DWORD *)&v73[2] = *(_DWORD *)(a1 + 14);
      *(_WORD *)&v73[6] = 9896;
      *(_DWORD *)&v73[8] = *(_DWORD *)(a1 + 18);
      *(_WORD *)&v73[12] = *(_WORD *)(a1 + 22);
      *(_OWORD *)&v73[22] = *(_OWORD *)(a1 + 24);
      *(void *)&v73[38] = *(void *)(a1 + 40);
      long long v77 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      long long v80 = 0u;
      long long v81 = 0u;
      long long v82 = 0u;
      long long v83 = 0u;
      long long v84 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      long long v89 = 0u;
      long long v90 = 0u;
      LODWORD(v75) = *(_DWORD *)&v73[8];
      float v14 = *(float *)(a1 + 64);
      __int16 v15 = llroundf(*(float *)(a1 + 60) * 16.0);
      uint64_t v16 = *(void *)(a1 + 52);
      uint64_t v91 = 0;
      __int16 v92 = 0;
      WORD2(v75) = *(_WORD *)&v73[12];
      *(_DWORD *)((char *)&v75 + 6) = 276824065;
      WORD5(v75) = 3024;
      BYTE12(v75) = 2;
      *(_WORD *)((char *)&v75 + 13) = *(_WORD *)(a1 + 48);
      HIBYTE(v75) = 0;
      LODWORD(v76) = 4456448;
      WORD2(v76) = v15;
      WORD3(v76) = llroundf(v14 * 16.0);
      __int16 v17 = 5;
      unsigned int v18 = 8000;
      unsigned int v19 = 1000;
      *((void *)&v76 + 1) = 0;
      goto LABEL_24;
    case 3:
      uint64_t v8 = CheckFileV3(a1, a2, &v74);
      if (v8) {
        return v8;
      }
      uint64_t v11 = 0;
      char v12 = *(unsigned char *)(a1 + 4);
      char v13 = *(unsigned char *)(a1 + 5);
      *(_WORD *)unsigned __int16 v73 = *(_WORD *)(a1 + 12);
      *(_DWORD *)&v73[2] = *(_DWORD *)(a1 + 14);
      *(_WORD *)&v73[6] = 9896;
      *(_DWORD *)&v73[8] = *(_DWORD *)(a1 + 18);
      *(_OWORD *)&v73[12] = *(_OWORD *)(a1 + 22);
      *(_OWORD *)&v73[28] = *(_OWORD *)(a1 + 38);
      *(_WORD *)&v73[44] = *(_WORD *)(a1 + 54);
      long long v77 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      long long v80 = 0u;
      long long v81 = 0u;
      long long v82 = 0u;
      long long v83 = 0u;
      long long v84 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      long long v89 = 0u;
      long long v90 = 0u;
      float v20 = *(float *)(a1 + 72);
      __int16 v21 = llroundf(*(float *)(a1 + 68) * 16.0);
      uint64_t v16 = *(void *)(a1 + 60);
      uint64_t v91 = 0;
      __int16 v92 = 0;
      LODWORD(v75) = *(_DWORD *)&v73[8];
      WORD2(v75) = *(_WORD *)&v73[12];
      *(_DWORD *)((char *)&v75 + 6) = 276824065;
      WORD5(v75) = 3024;
      BYTE12(v75) = 2;
      *(_WORD *)((char *)&v75 + 13) = *(_WORD *)(a1 + 56);
      HIBYTE(v75) = 0;
      LODWORD(v76) = 4980736;
      WORD2(v76) = v21;
      WORD3(v76) = llroundf(v20 * 16.0);
      v22.i32[0] = *(unsigned __int16 *)&v73[18];
      v22.i32[1] = *(unsigned __int16 *)&v73[16];
      v9.i32[0] = *(unsigned __int16 *)&v73[20];
      v9.i32[1] = *(unsigned __int16 *)&v73[14];
      int16x4_t v23 = (int16x4_t)vcvt_s32_f32(vrnda_f32(vmul_f32(vcvt_f32_s32(vsra_n_s32(vshr_n_s32(vshl_n_s32(v22, 0x10uLL), 0x10uLL), vshl_n_s32(v9, 0x10uLL), 0x10uLL)), (float32x2_t)0x3E0000003E000000)));
      *((int16x4_t *)&v76 + 1) = vuzp1_s16(v23, v23);
      __int16 v17 = 5;
      unsigned int v18 = 8000;
      unsigned int v19 = 1000;
      goto LABEL_24;
    case 4:
      uint64_t v8 = CheckFileV4(a1, a2, &v74);
      if (v8) {
        return v8;
      }
      uint64_t v11 = 0;
      char v12 = *(unsigned char *)(a1 + 4);
      char v13 = *(unsigned char *)(a1 + 5);
      *(_OWORD *)unsigned __int16 v73 = *(_OWORD *)(a1 + 12);
      *(_OWORD *)&v73[16] = *(_OWORD *)(a1 + 28);
      *(void *)&v73[32] = *(void *)(a1 + 44);
      *(_WORD *)&v73[40] = *(_WORD *)(a1 + 52);
      *(_DWORD *)&v73[42] = *(_DWORD *)(a1 + 54);
      long long v89 = 0u;
      long long v90 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v83 = 0u;
      long long v84 = 0u;
      long long v81 = 0u;
      long long v82 = 0u;
      long long v79 = 0u;
      long long v80 = 0u;
      long long v77 = 0u;
      long long v78 = 0u;
      float v24 = *(float *)(a1 + 72);
      __int16 v25 = llroundf(*(float *)(a1 + 68) * 16.0);
      uint64_t v16 = *(void *)(a1 + 60);
      unsigned int v19 = *(unsigned __int16 *)(a1 + 76);
      LODWORD(v75) = *(_DWORD *)&v73[8];
      unsigned int v18 = *(unsigned __int16 *)(a1 + 78);
      WORD2(v75) = *(_WORD *)&v73[12];
      *(_DWORD *)((char *)&v75 + 6) = 276824065;
      WORD5(v75) = 3024;
      BYTE12(v75) = 2;
      *(_WORD *)((char *)&v75 + 13) = *(_WORD *)(a1 + 58);
      LODWORD(v76) = 5505024;
      __int16 v17 = *(_WORD *)(a1 + 80);
      __int16 v92 = 0;
      uint64_t v91 = 0;
      WORD2(v76) = v25;
      WORD3(v76) = llroundf(v24 * 16.0);
      HIBYTE(v75) = 0;
      v26.i32[0] = *(unsigned __int16 *)&v73[18];
      v26.i32[1] = *(unsigned __int16 *)&v73[16];
      int32x2_t v9 = vshl_n_s32(v26, 0x10uLL);
      v27.i32[0] = *(unsigned __int16 *)&v73[20];
      v27.i32[1] = *(unsigned __int16 *)&v73[14];
      float32x2_t v28 = vcvt_f32_s32(vsra_n_s32(vshr_n_s32(v9, 0x10uLL), vshl_n_s32(v27, 0x10uLL), 0x10uLL));
      goto LABEL_15;
    case 5:
      uint64_t v8 = CheckFileV5(a1, a2, &v74);
      if (v8) {
        return v8;
      }
      char v12 = *(unsigned char *)(a1 + 4);
      char v13 = *(unsigned char *)(a1 + 5);
      *(_OWORD *)unsigned __int16 v73 = *(_OWORD *)(a1 + 12);
      uint64_t v29 = *(void *)(a1 + 20);
      *(_OWORD *)&v73[16] = *(_OWORD *)(a1 + 28);
      *(void *)&v73[32] = *(void *)(a1 + 44);
      *(_WORD *)&v73[40] = *(_WORD *)(a1 + 52);
      *(_DWORD *)&v73[42] = *(_DWORD *)(a1 + 54);
      float v30 = *(float *)(a1 + 72);
      __int16 v31 = llroundf(*(float *)(a1 + 68) * 16.0);
      long long v77 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      long long v80 = 0u;
      long long v81 = 0u;
      long long v82 = 0u;
      long long v83 = 0u;
      long long v84 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      long long v89 = 0u;
      long long v90 = 0u;
      uint64_t v16 = *(void *)(a1 + 60);
      unsigned int v19 = *(unsigned __int16 *)(a1 + 76);
      unsigned int v18 = *(unsigned __int16 *)(a1 + 78);
      __int16 v17 = *(_WORD *)(a1 + 80);
      uint64_t v32 = *(void *)(a1 + 82);
      __int16 v92 = *(_WORD *)(a1 + 90);
      uint64_t v91 = v32;
      LODWORD(v75) = v29;
      WORD2(v75) = WORD2(v29);
      uint64_t v11 = *(void *)(a1 + 92);
      *(_DWORD *)((char *)&v75 + 6) = 276824065;
      WORD5(v75) = 3024;
      BYTE12(v75) = 2;
      *(_WORD *)((char *)&v75 + 13) = *(_WORD *)(a1 + 58);
      HIBYTE(v75) = 0;
      LODWORD(v76) = 6553600;
      WORD2(v76) = v31;
      WORD3(v76) = llroundf(v30 * 16.0);
      v33.i32[0] = *(unsigned __int16 *)&v73[18];
      v33.i32[1] = *(unsigned __int16 *)&v73[16];
      v34.i32[0] = *(unsigned __int16 *)&v73[20];
      v34.i32[1] = HIWORD(v29);
      int32x2_t v9 = vsra_n_s32(vshr_n_s32(vshl_n_s32(v33, 0x10uLL), 0x10uLL), vshl_n_s32(v34, 0x10uLL), 0x10uLL);
      float32x2_t v28 = vcvt_f32_s32(v9);
LABEL_15:
      int16x4_t v35 = (int16x4_t)vcvt_s32_f32(vrnda_f32(vmul_f32(v28, (float32x2_t)0x3E0000003E000000)));
      *((int16x4_t *)&v76 + 1) = vuzp1_s16(v35, v35);
      goto LABEL_24;
    case 6:
      uint64_t v8 = CheckFileV6(a1, a2, &v74);
      if (v8) {
        return v8;
      }
      char v12 = *(unsigned char *)(a1 + 4);
      char v13 = *(unsigned char *)(a1 + 5);
      *(_OWORD *)unsigned __int16 v73 = *(_OWORD *)(a1 + 14);
      *(_OWORD *)&v73[16] = *(_OWORD *)(a1 + 30);
      *(void *)&v73[32] = *(void *)(a1 + 46);
      *(_WORD *)&v73[40] = *(_WORD *)(a1 + 54);
      *(_DWORD *)&v73[42] = *(_DWORD *)(a1 + 56);
      uint64_t v16 = *(void *)(a1 + 60);
      unsigned int v19 = *(unsigned __int16 *)(a1 + 68);
      unsigned int v18 = *(unsigned __int16 *)(a1 + 70);
      __int16 v17 = *(_WORD *)(a1 + 72);
      uint64_t v36 = *(void *)(a1 + 74);
      __int16 v92 = *(_WORD *)(a1 + 82);
      uint64_t v91 = v36;
      uint64_t v11 = *(void *)(a1 + 84);
      if (*(unsigned __int16 *)(a1 + 12) >= 8u) {
        uint64_t v37 = 8;
      }
      else {
        uint64_t v37 = *(unsigned __int16 *)(a1 + 12);
      }
      long long v75 = 0u;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      long long v80 = 0u;
      long long v81 = 0u;
      long long v82 = 0u;
      long long v83 = 0u;
      long long v84 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      long long v89 = 0u;
      long long v90 = 0u;
      if (!v37) {
        return 4294950194;
      }
      uint64_t v38 = 0;
      uint64_t v39 = 32 * v37;
      do
      {
        __int16 v40 = (char *)&v75 + v38;
        *(void *)__int16 v40 = *(void *)(a1 + v38 + 92);
        *((_DWORD *)v40 + 2) = *(_DWORD *)(a1 + v38 + 100);
        *((_DWORD *)v40 + 3) = *(_DWORD *)(a1 + v38 + 104);
        *((_OWORD *)v40 + 1) = *(_OWORD *)(a1 + v38 + 108);
        v38 += 32;
      }
      while (v39 != v38);
      if (WORD3(v75) != 1) {
        return 4294950194;
      }
LABEL_24:
      *(unsigned char *)a6 = v12;
      *(unsigned char *)(a6 + 1) = v13;
      float32x4_t v41 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v73)), (float32x4_t)vdupq_n_s32(0x37800000u));
      *(float32x4_t *)(a6 + 4) = v41;
      v41.i16[0] = *(_WORD *)&v73[8];
      v41.f32[0] = (float)v41.u32[0] * 0.0039062;
      v9.i16[0] = *(_WORD *)&v73[10];
      *(_DWORD *)(a6 + 20) = v41.i32[0];
      *(float *)(a6 + 24) = (float)v9.u32[0] * 0.0039062;
      v41.i16[0] = *(_WORD *)&v73[12];
      *(float *)(a6 + 28) = (float)v41.u32[0] * 0.0039062;
      v41.f32[0] = (float)SWORD5(v76) * 0.0625;
      *(_DWORD *)(a6 + 48) = v41.i32[0];
      *(_DWORD *)(a6 + 52) = v41.i32[0];
      v41.i64[0] = *((void *)&v76 + 1);
      v41.i16[1] = *(_WORD *)&v73[22];
      float32x4_t v42 = vmulq_f32(vcvtq_f32_s32(vmovl_s16((int16x4_t)vzip1_s32(*(int32x2_t *)v41.f32, *(int32x2_t *)&v73[24]))), (float32x4_t)xmmword_1AB9E2C60);
      *(_DWORD *)(a6 + 56) = v42.i32[0];
      *(float32x4_t *)(a6 + 60) = v42;
      *(float *)(a6 + 76) = (float)*(__int16 *)&v73[28] * 0.015625;
      *(float32x4_t *)(a6 + 80) = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)&v73[30]));
      *(float32x4_t *)(a6 + 96) = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)&v73[38]));
      *(void *)(a6 + 32) = v16;
      v42.f32[0] = (float)SWORD3(v76) * 0.0625;
      *(float *)(a6 + 40) = (float)SWORD2(v76) * 0.0625;
      *(_DWORD *)(a6 + 44) = v42.i32[0];
      *(float *)(a6 + 112) = (float)v19 * 0.25;
      *(float *)(a6 + 116) = (float)v18 * 0.25;
      *(_WORD *)(a6 + 120) = v17;
      *(void *)(a6 + 122) = v91;
      *(_WORD *)(a6 + 130) = v92;
      *(void *)(a6 + 132) = v11;
      if (!a4) {
        goto LABEL_42;
      }
      uint64_t v43 = 0;
      float32x4_t v70 = (float32x4_t)vdupq_n_s32(0x3D800000u);
      break;
    default:
      return 4294950299;
  }
  while (2)
  {
    int v44 = (float32x4_t *)(a5 + (v43 << 6));
    __int8 v45 = &v44[2].i16[2];
    int v46 = v44[2].u16[2];
    if (v44[2].i16[2])
    {
      uint64_t v68 = v43;
      uint64_t v47 = 0;
      *__int8 v45 = 0;
      unsigned int v71 = (CVPixelBufferRef *)&v44[3].i64[1];
      int v72 = (void **)&v44[3];
      do
      {
        unint64_t v48 = (unint64_t)(&v75 + 2 * v47);
        if (*(unsigned __int16 *)(v48 + 6) == v46)
        {
          v49.i16[0] = *(_WORD *)v48;
          v49.i16[1] = *(_WORD *)(v48 | 2);
          v49.i16[2] = *(_WORD *)(v48 | 4);
          v49.i16[3] = *(_WORD *)(v48 + 20);
          float32x4_t v50 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)v49));
          v50.i32[3] = vcvtq_f32_s32(vmovl_s16(v49)).i32[3];
          *int v44 = vmulq_f32(v50, (float32x4_t)xmmword_1AB9E2C70);
          v44[1] = vmulq_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)(v48 + 22))), v70);
          v44[2].f32[0] = (float)*(__int16 *)(v48 + 30) * 0.0625;
          *__int8 v45 = v46;
          v44[2].i16[3] = *(unsigned __int8 *)(v48 + 12);
          v44[2].i16[4] = *(_WORD *)(v48 + 8);
          v44[2].i16[5] = *(_WORD *)(v48 + 10);
          uint64_t v51 = *(unsigned __int8 *)(v48 + 15);
          v44[2].i16[6] = v51;
          if (*v72 && *((_WORD *)&v75 + 16 * v47 + 8)) {
            memcpy(*v72, (const void *)(a1 + *((unsigned __int16 *)&v75 + 16 * v47 + 8)), 4 * v51);
          }
          OSType v52 = *v71;
          if (*v71)
          {
            uint64_t v53 = &v75 + 2 * v47;
            size_t v54 = *((unsigned __int8 *)v53 + 13);
            uint64_t v55 = *((unsigned __int8 *)v53 + 14);
            if (CVPixelBufferGetWidth(*v71) != v54 || CVPixelBufferGetHeight(v52) != v55) {
              return 4294950306;
            }
            uint64_t v8 = CVPixelBufferLockBaseAddress(v52, 1uLL);
            if (v8) {
              return v8;
            }
            uint64_t v56 = v45;
            size_t BytesPerRow = CVPixelBufferGetBytesPerRow(v52);
            BaseAddress = (char *)CVPixelBufferGetBaseAddress(v52);
            if (v55)
            {
              uint64_t v59 = BaseAddress;
              size_t v60 = (char *)(a1 + *((unsigned __int16 *)&v76 + 16 * v47 + 1));
              do
              {
                memcpy(v59, v60, v54);
                v59 += BytesPerRow;
                v60 += v54;
                LODWORD(v55) = v55 - 1;
              }
              while (v55);
            }
            CVPixelBufferUnlockBaseAddress(v52, 1uLL);
            __int8 v45 = v56;
          }
        }
        ++v47;
      }
      while (v47 != 8);
      uint64_t v43 = v68 + 1;
      if (v68 + 1 != a4) {
        continue;
      }
LABEL_42:
      if (*(_DWORD *)v74 == 196623 && *(_DWORD *)(v74 + 16) == 1399614808 && *(_DWORD *)(v74 + 20) == 1278226488)
      {
        uint64_t v61 = *(unsigned __int16 *)(v74 + 24);
        if (*(_DWORD *)(v74 + 8) == v61)
        {
          uint64_t v62 = *(unsigned __int16 *)(v74 + 26);
          if (*(_DWORD *)(v74 + 12) == v62)
          {
            uint64_t v63 = *(unsigned __int16 *)(v74 + 30);
            if (CVPixelBufferGetWidth(a3) == v61 && CVPixelBufferGetHeight(a3) == v62)
            {
              uint64_t v8 = CVPixelBufferLockBaseAddress(a3, 1uLL);
              if (!v8)
              {
                CVPixelBufferGetBytesPerRow(a3);
                CVPixelBufferGetBaseAddress(a3);
                uint64_t v10 = SlimHrlcDecodeRun_C(v63);
                CVPixelBufferUnlockBaseAddress(a3, 1uLL);
                return v10;
              }
              return v8;
            }
            return 4294950306;
          }
        }
      }
      return 4294950194;
    }
    break;
  }
  return 4294950306;
}

uint64_t CMPhotoFixedPatternNoiseDecoderGetShadingThumbTypes2(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t *a4, _DWORD *a5)
{
  uint64_t result = 4294950306;
  if (a3)
  {
    if (a4)
    {
      uint64_t v8 = a5;
      if (a5)
      {
        if (*(_DWORD *)a1 == 1111904334)
        {
          switch(*(unsigned char *)(a1 + 4))
          {
            case 1:
              if (*(unsigned char *)(a1 + 5) != 3) {
                goto LABEL_9;
              }
              uint64_t result = CheckFileV1P3(a1, a2, 0);
              if (!result) {
                goto LABEL_17;
              }
              break;
            case 2:
              uint64_t result = CheckFileV1P3(a1, a2, 0);
              if (!result) {
                goto LABEL_17;
              }
              break;
            case 3:
              uint64_t result = CheckFileV3(a1, a2, 0);
              if (!result) {
                goto LABEL_17;
              }
              break;
            case 4:
              uint64_t result = CheckFileV4(a1, a2, 0);
              if (!result) {
                goto LABEL_17;
              }
              break;
            case 5:
              uint64_t result = CheckFileV5(a1, a2, 0);
              if (!result)
              {
LABEL_17:
                *a4 = 1;
                bzero(v8, 4 * a3);
                uint64_t result = 0;
                *uint64_t v8 = 1;
              }
              break;
            case 6:
              uint64_t result = CheckFileV6(a1, a2, 0);
              if (!result)
              {
                bzero(v8, 4 * a3);
                unint64_t v10 = *(unsigned __int16 *)(a1 + 12);
                if (v10 >= a3) {
                  unint64_t v10 = a3;
                }
                if (v10)
                {
                  uint64_t v11 = (unsigned __int16 *)(a1 + 98);
                  unint64_t v12 = v10;
                  do
                  {
                    int v13 = *v11;
                    v11 += 16;
                    *v8++ = v13;
                    --v12;
                  }
                  while (v12);
                }
                uint64_t result = 0;
                *a4 = v10;
              }
              break;
            default:
LABEL_9:
              uint64_t result = 4294950299;
              break;
          }
        }
        else
        {
          return 4294950194;
        }
      }
    }
  }
  return result;
}

uint64_t CheckFileV1P3(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v3 = *(unsigned __int8 *)(a1 + 49) * (unint64_t)*(unsigned __int8 *)(a1 + 48);
  unint64_t v4 = v3 + 68;
  unint64_t v5 = v3 + 100;
  if (*(unsigned __int16 *)(a1 + 6) != (unsigned __int16)v4 || v5 >= a2) {
    return 4294950194;
  }
  uint64_t v7 = a1 + v4;
  if (*(_DWORD *)v7 != 196623
    || *(_DWORD *)(v7 + 16) != 1399614808
    || *(_DWORD *)(v7 + 20) != 1278226488
    || *(_DWORD *)(v7 + 8) != *(unsigned __int16 *)(v7 + 24)
    || *(_DWORD *)(v7 + 12) != *(unsigned __int16 *)(v7 + 26))
  {
    return 4294950194;
  }
  uint64_t result = 0;
  if (a3) {
    *a3 = v7;
  }
  return result;
}

uint64_t CheckFileV3(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v3 = *(unsigned __int8 *)(a1 + 57) * (unint64_t)*(unsigned __int8 *)(a1 + 56);
  unint64_t v4 = v3 + 76;
  unint64_t v5 = v3 + 108;
  if (*(unsigned __int16 *)(a1 + 6) != (unsigned __int16)v4 || v5 >= a2) {
    return 4294950194;
  }
  uint64_t v7 = a1 + v4;
  if (*(_DWORD *)v7 != 196623
    || *(_DWORD *)(v7 + 16) != 1399614808
    || *(_DWORD *)(v7 + 20) != 1278226488
    || *(_DWORD *)(v7 + 8) != *(unsigned __int16 *)(v7 + 24)
    || *(_DWORD *)(v7 + 12) != *(unsigned __int16 *)(v7 + 26))
  {
    return 4294950194;
  }
  uint64_t result = 0;
  if (a3) {
    *a3 = v7;
  }
  return result;
}

uint64_t CheckFileV4(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v3 = *(unsigned __int8 *)(a1 + 59) * (unint64_t)*(unsigned __int8 *)(a1 + 58);
  unint64_t v4 = v3 + 84;
  unint64_t v5 = v3 + 116;
  if (*(unsigned __int16 *)(a1 + 6) != (unsigned __int16)v4 || v5 >= a2) {
    return 4294950194;
  }
  uint64_t v7 = a1 + v4;
  if (*(_DWORD *)v7 != 196623
    || *(_DWORD *)(v7 + 16) != 1399614808
    || *(_DWORD *)(v7 + 20) != 1278226488
    || *(_DWORD *)(v7 + 8) != *(unsigned __int16 *)(v7 + 24)
    || *(_DWORD *)(v7 + 12) != *(unsigned __int16 *)(v7 + 26))
  {
    return 4294950194;
  }
  uint64_t result = 0;
  if (a3) {
    *a3 = v7;
  }
  return result;
}

uint64_t CheckFileV5(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v3 = *(unsigned __int8 *)(a1 + 59) * (unint64_t)*(unsigned __int8 *)(a1 + 58);
  unint64_t v4 = v3 + 100;
  unint64_t v5 = v3 + 132;
  if (*(unsigned __int16 *)(a1 + 6) != (unsigned __int16)v4 || v5 >= a2) {
    return 4294950194;
  }
  uint64_t v7 = a1 + v4;
  if (*(_DWORD *)v7 != 196623
    || *(_DWORD *)(v7 + 16) != 1399614808
    || *(_DWORD *)(v7 + 20) != 1278226488
    || *(_DWORD *)(v7 + 8) != *(unsigned __int16 *)(v7 + 24)
    || *(_DWORD *)(v7 + 12) != *(unsigned __int16 *)(v7 + 26))
  {
    return 4294950194;
  }
  uint64_t result = 0;
  if (a3) {
    *a3 = v7;
  }
  return result;
}

uint64_t CheckFileV6(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *(unsigned __int16 *)(a1 + 12);
  uint64_t v4 = a1 + 32 * v3 + 92;
  if (*(_WORD *)(a1 + 12))
  {
    unint64_t v5 = (unsigned __int8 *)(a1 + 107);
    do
    {
      v4 += 4 * *v5 + *(v5 - 1) * (unint64_t)*(v5 - 2);
      v5 += 32;
      --v3;
    }
    while (v3);
  }
  uint64_t v6 = 4294950194;
  if (v4 - a1 + 32 < a2 && *(unsigned __int16 *)(a1 + 6) == (unsigned __int16)(v4 - a1))
  {
    if (*(_DWORD *)v4 == 196623
      && *(_DWORD *)(v4 + 16) == 1399614808
      && *(_DWORD *)(v4 + 20) == 1278226488
      && *(_DWORD *)(v4 + 8) == *(unsigned __int16 *)(v4 + 24)
      && *(_DWORD *)(v4 + 12) == *(unsigned __int16 *)(v4 + 26))
    {
      uint64_t v6 = 0;
      if (a3) {
        *a3 = v4;
      }
    }
    else
    {
      return 4294950194;
    }
  }
  return v6;
}

uint64_t CMPhotoFixedPatternNoiseDecoderGetNCorrectionPairs2(uint64_t a1, unint64_t a2, int a3, void *a4)
{
  if (*(_DWORD *)a1 != 1111904334) {
    return 4294950194;
  }
  switch(*(unsigned char *)(a1 + 4))
  {
    case 1:
      if (*(unsigned char *)(a1 + 5) != 3) {
        goto LABEL_7;
      }
      if (a3 != 1) {
        goto LABEL_30;
      }
      uint64_t result = CheckFileV1P3(a1, a2, 0);
      if (!result) {
        goto LABEL_19;
      }
      break;
    case 2:
      if (a3 != 1) {
        goto LABEL_30;
      }
      uint64_t result = CheckFileV1P3(a1, a2, 0);
      if (!result) {
        goto LABEL_19;
      }
      break;
    case 3:
      if (a3 != 1) {
        goto LABEL_30;
      }
      uint64_t result = CheckFileV3(a1, a2, 0);
      if (!result) {
        goto LABEL_19;
      }
      break;
    case 4:
      if (a3 != 1) {
        goto LABEL_30;
      }
      uint64_t result = CheckFileV4(a1, a2, 0);
      if (!result) {
        goto LABEL_19;
      }
      break;
    case 5:
      if (a3 != 1) {
        goto LABEL_30;
      }
      uint64_t result = CheckFileV5(a1, a2, 0);
      if (!result)
      {
LABEL_19:
        unsigned int v8 = 0;
        goto LABEL_20;
      }
      break;
    case 6:
      uint64_t result = CheckFileV6(a1, a2, 0);
      if (!result)
      {
        uint64_t v9 = *(unsigned __int16 *)(a1 + 12);
        if (!*(_WORD *)(a1 + 12)) {
          goto LABEL_30;
        }
        unint64_t v10 = (unsigned __int16 *)(a1 + 98);
        unsigned int v8 = 0xFFFF;
        uint64_t v11 = (unsigned __int16 *)(a1 + 98);
        do
        {
          int v12 = *v11;
          v11 += 16;
          if (v12 == a3) {
            unsigned int v8 = *((unsigned __int8 *)v10 + 9);
          }
          unint64_t v10 = v11;
          --v9;
        }
        while (v9);
        if (v8 != 0xFFFF)
        {
LABEL_20:
          uint64_t result = 0;
          if (a4) {
            *a4 = v8;
          }
        }
        else
        {
LABEL_30:
          uint64_t result = 4294950303;
        }
      }
      break;
    default:
LABEL_7:
      uint64_t result = 4294950299;
      break;
  }
  return result;
}

BOOL cmpweak_exists_kVTPixelTransferPropertyKey_UseOptimalMSRCoefficients()
{
  return MEMORY[0x1E4F45180] != 0;
}

__CFString *cmpweak_kFigPictureCollectionWriterOption_OverlayItemCount()
{
  if (MEMORY[0x1E4F332C8]) {
    return (__CFString *)*MEMORY[0x1E4F332C8];
  }
  else {
    return @"OverlayItemCount";
  }
}

BOOL cmpweak_exists_kFigPictureCollectionWriterOption_OverlayItemCount()
{
  return MEMORY[0x1E4F332C8] != 0;
}

__CFString *cmpweak_kFigPictureCollectionWriterOption_OverlayCanvasFillValues()
{
  if (MEMORY[0x1E4F332C0]) {
    return (__CFString *)*MEMORY[0x1E4F332C0];
  }
  else {
    return @"OverlayCanvasFillValues";
  }
}

BOOL cmpweak_exists_kFigPictureCollectionWriterOption_OverlayCanvasFillValues()
{
  return MEMORY[0x1E4F332C0] != 0;
}

__CFString *cmpweak_kFigPictureCollectionWriterOption_OverlayItemIndex()
{
  if (MEMORY[0x1E4F332D0]) {
    return (__CFString *)*MEMORY[0x1E4F332D0];
  }
  else {
    return @"OverlayItemIndex";
  }
}

BOOL cmpweak_exists_kFigPictureCollectionWriterOption_OverlayItemIndex()
{
  return MEMORY[0x1E4F332D0] != 0;
}

__CFString *cmpweak_kFigPictureCollectionWriterOption_OverlayItemOffset()
{
  if (MEMORY[0x1E4F332D8]) {
    return (__CFString *)*MEMORY[0x1E4F332D8];
  }
  else {
    return @"OverlayItemOffset";
  }
}

BOOL cmpweak_exists_kFigPictureCollectionWriterOption_OverlayItemOffset()
{
  return MEMORY[0x1E4F332D8] != 0;
}

__CFString *cmpweak_kFigPictureCollection_Group_LowestMemberIDKey()
{
  if (MEMORY[0x1E4F33370]) {
    return (__CFString *)*MEMORY[0x1E4F33370];
  }
  else {
    return @"LowestMemberID";
  }
}

BOOL cmpweak_exists_kFigPictureCollection_Group_LowestMemberIDKey()
{
  return MEMORY[0x1E4F33370] != 0;
}

__CFString *cmpweak_kFigPictureCollectionProperty_SourceSpecifiesOrientation()
{
  if (MEMORY[0x1E4F33278]) {
    return (__CFString *)*MEMORY[0x1E4F33278];
  }
  else {
    return @"SourceSpecifiesOrientation";
  }
}

BOOL cmpweak_exists_kFigPictureCollectionProperty_SourceSpecifiesOrientation()
{
  return MEMORY[0x1E4F33278] != 0;
}

__CFString *cmpweak_kFigCameraExtrinsics_WriteAllFields()
{
  if (MEMORY[0x1E4F327B0]) {
    return (__CFString *)*MEMORY[0x1E4F327B0];
  }
  else {
    return @"WriteAllFields";
  }
}

BOOL cmpweak_exists_kFigCameraExtrinsics_WriteAllFields()
{
  return MEMORY[0x1E4F327B0] != 0;
}

__CFString *cmpweak_kFigEditCursorProperty_RepeatsEdits()
{
  if (MEMORY[0x1E4F328B8]) {
    return (__CFString *)*MEMORY[0x1E4F328B8];
  }
  else {
    return @"RepeatEdits";
  }
}

BOOL cmpweak_exists_kFigEditCursorProperty_RepeatsEdits()
{
  return MEMORY[0x1E4F328B8] != 0;
}

__CFString *cmpweak_kFigTrackProperty_EditedDuration()
{
  if (MEMORY[0x1E4F349C8]) {
    return (__CFString *)*MEMORY[0x1E4F349C8];
  }
  else {
    return @"TrackDuration";
  }
}

BOOL cmpweak_exists_kFigTrackProperty_EditedDuration()
{
  return MEMORY[0x1E4F349C8] != 0;
}

__CFString *cmpweak_kFigTrackProperty_HasEditListBox()
{
  if (MEMORY[0x1E4F34A28]) {
    return (__CFString *)*MEMORY[0x1E4F34A28];
  }
  else {
    return @"HasEditListBox";
  }
}

BOOL cmpweak_exists_kFigTrackProperty_HasEditListBox()
{
  return MEMORY[0x1E4F34A28] != 0;
}

__CFString *cmpweak_kFigPictureProperty_TonemapBaseColorIsWorkingColor()
{
  if (MEMORY[0x1E4F33458]) {
    return (__CFString *)*MEMORY[0x1E4F33458];
  }
  else {
    return @"TonemapBaseColorIsWorkingColor";
  }
}

BOOL cmpweak_exists_kFigPictureProperty_TonemapBaseColorIsWorkingColor()
{
  return MEMORY[0x1E4F33458] != 0;
}

__CFString *cmpweak_kFigPictureProperty_TonemapBaseHDRHeadroom()
{
  if (MEMORY[0x1E4F33460]) {
    return (__CFString *)*MEMORY[0x1E4F33460];
  }
  else {
    return @"TonemapBaseHDRHeadroom";
  }
}

BOOL cmpweak_exists_kFigPictureProperty_TonemapBaseHDRHeadroom()
{
  return MEMORY[0x1E4F33460] != 0;
}

__CFString *cmpweak_kFigPictureProperty_TonemapAlternateHDRHeadroom()
{
  if (MEMORY[0x1E4F33450]) {
    return (__CFString *)*MEMORY[0x1E4F33450];
  }
  else {
    return @"TonemapAlternateHDRHeadroom";
  }
}

BOOL cmpweak_exists_kFigPictureProperty_TonemapAlternateHDRHeadroom()
{
  return MEMORY[0x1E4F33450] != 0;
}

__CFString *cmpweak_kFigPictureProperty_TonemapChannelMetadata()
{
  if (MEMORY[0x1E4F33468]) {
    return (__CFString *)*MEMORY[0x1E4F33468];
  }
  else {
    return @"TonemapChannelMetadata";
  }
}

BOOL cmpweak_exists_kFigPictureProperty_TonemapChannelMetadata()
{
  return MEMORY[0x1E4F33468] != 0;
}

__CFString *cmpweak_kFigTonemapChannel_BaseOffset()
{
  if (MEMORY[0x1E4F34970]) {
    return (__CFString *)*MEMORY[0x1E4F34970];
  }
  else {
    return @"BaseOffset";
  }
}

BOOL cmpweak_exists_kFigTonemapChannel_BaseOffset()
{
  return MEMORY[0x1E4F34970] != 0;
}

__CFString *cmpweak_kFigTonemapChannel_AlternateOffset()
{
  if (MEMORY[0x1E4F34968]) {
    return (__CFString *)*MEMORY[0x1E4F34968];
  }
  else {
    return @"AlternateOffset";
  }
}

BOOL cmpweak_exists_kFigTonemapChannel_AlternateOffset()
{
  return MEMORY[0x1E4F34968] != 0;
}

__CFString *cmpweak_kFigTonemapChannel_Gamma()
{
  if (MEMORY[0x1E4F34988]) {
    return (__CFString *)*MEMORY[0x1E4F34988];
  }
  else {
    return @"Gamma";
  }
}

BOOL cmpweak_exists_kFigTonemapChannel_Gamma()
{
  return MEMORY[0x1E4F34988] != 0;
}

__CFString *cmpweak_kFigTonemapChannel_GainMapMin()
{
  if (MEMORY[0x1E4F34980]) {
    return (__CFString *)*MEMORY[0x1E4F34980];
  }
  else {
    return @"GainMapMin";
  }
}

BOOL cmpweak_exists_kFigTonemapChannel_GainMapMin()
{
  return MEMORY[0x1E4F34980] != 0;
}

__CFString *cmpweak_kFigTonemapChannel_GainMapMax()
{
  if (MEMORY[0x1E4F34978]) {
    return (__CFString *)*MEMORY[0x1E4F34978];
  }
  else {
    return @"GainMapMax";
  }
}

BOOL cmpweak_exists_kFigTonemapChannel_GainMapMax()
{
  return MEMORY[0x1E4F34978] != 0;
}

__CFString *cmpweak_kFigPictureCollectionWriterOption_TonemapInputItemIDs()
{
  if (MEMORY[0x1E4F33308]) {
    return (__CFString *)*MEMORY[0x1E4F33308];
  }
  else {
    return @"TonemapInputItemIDs";
  }
}

BOOL cmpweak_exists_kFigPictureCollectionWriterOption_TonemapInputItemIDs()
{
  return MEMORY[0x1E4F33308] != 0;
}

__CFString *cmpweak_kFigPictureCollectionWriterOption_TonemapMetadata()
{
  if (MEMORY[0x1E4F33310]) {
    return (__CFString *)*MEMORY[0x1E4F33310];
  }
  else {
    return @"TonemapMetadata";
  }
}

BOOL cmpweak_exists_kFigPictureCollectionWriterOption_TonemapMetadata()
{
  return MEMORY[0x1E4F33310] != 0;
}

__CFString *cmpweak_kFigPictureCollectionWriterOption_IdentityInputItemID()
{
  if (MEMORY[0x1E4F332B0]) {
    return (__CFString *)*MEMORY[0x1E4F332B0];
  }
  else {
    return @"IdentityInputItemID";
  }
}

BOOL cmpweak_exists_kFigPictureCollectionWriterOption_IdentityInputItemID()
{
  return MEMORY[0x1E4F332B0] != 0;
}

__CFString *cmpweak_kFigCameraIntrinsics_OfficialBox()
{
  if (MEMORY[0x1E4F327D0]) {
    return (__CFString *)*MEMORY[0x1E4F327D0];
  }
  else {
    return @"OfficialBox";
  }
}

BOOL cmpweak_exists_kFigCameraIntrinsics_OfficialBox()
{
  return MEMORY[0x1E4F327D0] != 0;
}

__CFString *cmpweak_kFigCameraExtrinsics_OfficialBox()
{
  if (MEMORY[0x1E4F32788]) {
    return (__CFString *)*MEMORY[0x1E4F32788];
  }
  else {
    return @"OfficialBox";
  }
}

BOOL cmpweak_exists_kFigCameraExtrinsics_OfficialBox()
{
  return MEMORY[0x1E4F32788] != 0;
}

uint64_t SlimVideoDecoder_CreateSession(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    return 4294951896;
  }
  pthread_once(&SlimVideoDecoderSessionGetTypeID_onceToken, (void (*)(void))RegisterSlimVideoDecoderSessionClass);
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance) {
    return 4294951894;
  }
  uint64_t v4 = Instance;
  uint64_t result = 0;
  *a2 = v4;
  return result;
}

uint64_t SlimVideoDecoder_StartSessionInternal(uint64_t a1, const opaqueCMFormatDescription *a2)
{
  return _startDecoderSession(a1 + 16, 0, a2);
}

uint64_t _startDecoderSession(uint64_t a1, uint64_t a2, const opaqueCMFormatDescription *a3)
{
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 60) = 6;
  unint64_t v5 = (int *)(a1 + 60);
  FigFormatDescriptionRelease();
  *(void *)(a1 + 8) = FigFormatDescriptionRetain();
  VersionFromFormatDescriptiouint64_t n = _getVersionFromFormatDescription(a3, &v30);
  if (VersionFromFormatDescription) {
    return VersionFromFormatDescription;
  }
  CMVideoDimensions Dimensions = CMVideoFormatDescriptionGetDimensions(*(CMVideoFormatDescriptionRef *)(a1 + 8));
  VersionFromFormatDescriptiouint64_t n = Slim_GetPixelBufferInfoFromVersion(v30, v5, (int *)&v30 + 1, (int *)&v29 + 1, (char *)(a1 + 56), (int *)&v29);
  if (VersionFromFormatDescription) {
    return VersionFromFormatDescription;
  }
  int v8 = HIDWORD(v30);
  *(_DWORD *)(a1 + 64) = HIDWORD(v30);
  unsigned int v9 = *(_DWORD *)(a1 + 60);
  char v10 = v29;
  int valuePtr = v8;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    goto LABEL_68;
  }
  CFMutableDictionaryRef v12 = Mutable;
  CFNumberRef v13 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  if (!v13)
  {
    CFRelease(v12);
LABEL_68:
    __int16 v21 = 0;
    goto LABEL_49;
  }
  CFNumberRef v14 = v13;
  CFDictionaryAddValue(v12, (const void *)*MEMORY[0x1E4F24D70], v13);
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  if (v9 > 5) {
    goto LABEL_48;
  }
  if (((1 << v9) & 0x26) == 0)
  {
    if (((1 << v9) & 0x18) == 0) {
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  unsigned int v15 = (Dimensions.width + 15) & 0xFFFFFFF0;
  unsigned int v16 = (Dimensions.height + 3) & 0xFFFFFFFC;
  if (valuePtr > 1651925815)
  {
    if (valuePtr > 1735549491)
    {
      if (valuePtr <= 1815491697)
      {
        if (valuePtr != 1735549492 && valuePtr != 1735549752)
        {
          int v17 = 1815162994;
          goto LABEL_33;
        }
        goto LABEL_43;
      }
      if (valuePtr != 1919379252 && valuePtr != 1919378232)
      {
        int v17 = 1815491698;
        goto LABEL_33;
      }
LABEL_43:
      unsigned int v15 = (Dimensions.width + 7) & 0xFFFFFFF8;
      unsigned int v16 = (Dimensions.height + 7) & 0xFFFFFFF8;
      goto LABEL_44;
    }
    if (valuePtr > 1652056887)
    {
      if (valuePtr != 1652056888)
      {
        if (valuePtr == 1734501176) {
          goto LABEL_43;
        }
        int v19 = 1734505012;
LABEL_42:
        if (valuePtr != v19) {
          goto LABEL_44;
        }
        goto LABEL_43;
      }
      goto LABEL_38;
    }
    if (valuePtr == 1651925816) {
      goto LABEL_38;
    }
    int v18 = 1651926376;
LABEL_37:
    if (valuePtr != v18) {
      goto LABEL_44;
    }
    goto LABEL_38;
  }
  if (valuePtr <= 1650942775)
  {
    if (valuePtr <= 1647392368)
    {
      if (valuePtr != 1111970369)
      {
        int v17 = 1380411457;
LABEL_33:
        if (valuePtr != v17) {
          goto LABEL_44;
        }
      }
    }
    else
    {
      if (valuePtr == 1647392369) {
        goto LABEL_38;
      }
      if (valuePtr != 1647589490)
      {
        int v18 = 1647719528;
        goto LABEL_37;
      }
    }
    unsigned int v15 = (Dimensions.width + 3) & 0xFFFFFFFC;
    goto LABEL_44;
  }
  if (valuePtr <= 1650946097)
  {
    if (valuePtr == 1650942776) {
      goto LABEL_43;
    }
    int v19 = 1650943796;
    goto LABEL_42;
  }
  if (valuePtr != 1650946098 && valuePtr != 1651519798)
  {
    int v18 = 1651847472;
    goto LABEL_37;
  }
LABEL_38:
  if ((v10 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_44:
  CMPhotoGetBytesPerPixelForPixelFormat(valuePtr);
  FigCFDictionarySetInt32();
  if (v15 != Dimensions.width) {
    FigCFDictionarySetInt32();
  }
  if (v16 != Dimensions.height) {
LABEL_47:
  }
    FigCFDictionarySetInt32();
LABEL_48:
  __int16 v31 = 0;
  uint64_t PixelBufferAttributesWithIOSurfaceSupport = FigCreatePixelBufferAttributesWithIOSurfaceSupport();
  __int16 v21 = v31;
  CFRelease(v12);
  CFRelease(v14);
  if (PixelBufferAttributesWithIOSurfaceSupport) {
    return PixelBufferAttributesWithIOSurfaceSupport;
  }
LABEL_49:
  if (*(void *)a1)
  {
    VTDecoderSessionSetPixelBufferAttributes();
  }
  else
  {
    int32x2_t v22 = *(const void **)(a1 + 72);
    if (v22) {
      CFRelease(v22);
    }
    if (v21) {
      CFTypeRef v23 = CFRetain(v21);
    }
    else {
      CFTypeRef v23 = 0;
    }
    *(void *)(a1 + 72) = v23;
  }
  float v24 = malloc_type_calloc(1uLL, 0x20B0uLL, 0x1030040868D5BD5uLL);
  *(void *)(a1 + 48) = v24;
  if (!v24) {
    goto LABEL_61;
  }
  *(CMVideoDimensions *)float v24 = Dimensions;
  v24[8] = 0;
  v24[2090] = HIDWORD(v29);
  v24[2091] = v29;
  *((void *)v24 + 7) = 0;
  if (*(unsigned char *)(a1 + 56))
  {
    CreateTreeLeaves((void *)v24 + 19, 1024);
    __int16 v25 = malloc_type_malloc(0x20uLL, 0x102004084B5A0ACuLL);
    *(void *)(*(void *)(a1 + 48) + 8344) = v25;
    if (!v25) {
      _startDecoderSession_cold_1();
    }
    v25[3] = 0;
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8344) + 16) = 0;
    uint64_t v26 = *(void *)(a1 + 48);
    uint64_t v27 = *(void *)(v26 + 8344);
    *(void *)(v27 + 8) = 0;
    *(_WORD *)uint64_t v27 = 0;
    if (CreateHuffTree((uint64_t)&bgg4, 1024, v26 + 152, v27))
    {
LABEL_61:
      uint64_t PixelBufferAttributesWithIOSurfaceSupport = FigSignalErrorAt();
      if (!v21) {
        return PixelBufferAttributesWithIOSurfaceSupport;
      }
      goto LABEL_64;
    }
  }
  uint64_t PixelBufferAttributesWithIOSurfaceSupport = 0;
  if (v21) {
LABEL_64:
  }
    CFRelease(v21);
  return PixelBufferAttributesWithIOSurfaceSupport;
}

BOOL SlimVideoDecoder_SessionIsSlimX(BOOL result)
{
  if (result) {
    return *(_DWORD *)(result + 76) == 1;
  }
  return result;
}

BOOL SlimVideoDecoder_SessionIsSlimYzip(BOOL result)
{
  if (result) {
    return *(_DWORD *)(result + 76) == 2;
  }
  return result;
}

BOOL SlimVideoDecoder_SessionIsSlimHrlc(BOOL result)
{
  if (result) {
    return *(_DWORD *)(result + 76) == 3;
  }
  return result;
}

BOOL SlimVideoDecoder_SessionIsSlimUncompressed(BOOL result)
{
  if (result) {
    return *(_DWORD *)(result + 76) == 4;
  }
  return result;
}

BOOL SlimVideoDecoder_SessionIsSlimIntc(BOOL result)
{
  if (result) {
    return *(_DWORD *)(result + 76) == 5;
  }
  return result;
}

CFIndex SlimVideoDecoder_DecodeFrameInternal(uint64_t a1, opaqueCMSampleBuffer *a2, __CVBuffer *a3, const __CFDictionary *a4, void (*a5)(uint64_t, uint64_t, CFIndex, CVPixelBufferRef), uint64_t a6, uint64_t a7)
{
  CVPixelBufferRef v16 = a3;
  CFIndex v11 = _decodeFrame(a1 + 16, a2, a4, &v16);
  CVPixelBufferRef v12 = v16;
  if (v11) {
    CVPixelBufferRef v13 = 0;
  }
  else {
    CVPixelBufferRef v13 = v16;
  }
  a5(a6, a7, v11, v13);
  if (v12 != a3 && v12 != 0) {
    CFRelease(v12);
  }
  return v11;
}

CFIndex _decodeFrame(uint64_t a1, CMSampleBufferRef sbuf, const __CFDictionary *a3, CVPixelBufferRef *a4)
{
  unint64_t v5 = sbuf;
  CVPixelBufferRef pixelBufferOut = *a4;
  CMBlockBufferRef blockBufferOut = 0;
  size_t totalLengthOut = 0;
  dataPointerOut = 0;
  unint64_t v66 = 0;
  OSType pixelFormatType = 0;
  CFErrorRef error = 0;
  if (!sbuf)
  {
    CFDataRef v11 = 0;
    CFIndex Code = 4294951896;
    goto LABEL_205;
  }
  DataBuffer = CMSampleBufferGetDataBuffer(sbuf);
  DataCFIndex Length = CMBlockBufferGetDataLength(DataBuffer);
  FigCFDictionaryGetInt32IfPresent();
  if (CMBlockBufferIsRangeContiguous(DataBuffer, 0, 0))
  {
    CMBlockBufferRef blockBufferOut = (CMBlockBufferRef)CFRetain(DataBuffer);
  }
  else
  {
    CFIndex v10 = CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E4F1CF80], DataBuffer, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, DataLength, 0, &blockBufferOut);
    if (v10) {
      goto LABEL_225;
    }
  }
  if (HIDWORD(DataLength))
  {
    CFDataRef v11 = 0;
    unint64_t v5 = 0;
    CFIndex Code = 4294954385;
    goto LABEL_205;
  }
  CMBlockBufferGetDataPointer(blockBufferOut, 0, 0, &totalLengthOut, &dataPointerOut);
  FormatDescriptiouint64_t n = CMSampleBufferGetFormatDescription(v5);
  if (!FormatDescription) {
    FormatDescriptiouint64_t n = *(const opaqueCMFormatDescription **)(a1 + 8);
  }
  uint64_t Dimensions = (uint64_t)CMVideoFormatDescriptionGetDimensions(FormatDescription);
  uint64_t v61 = FormatDescription;
  CMVideoDimensions v62 = (CMVideoDimensions)Dimensions;
  if (*(void *)a1)
  {
    PixelBufferPool = (__CVPixelBufferPool *)VTDecoderSessionGetPixelBufferPool();
    CFIndex v10 = CVPixelBufferPoolCreatePixelBuffer(0, PixelBufferPool, &pixelBufferOut);
    if (!v10) {
      goto LABEL_11;
    }
LABEL_225:
    CFIndex Code = v10;
    goto LABEL_41;
  }
  float v20 = pixelBufferOut;
  size_t v21 = (int)Dimensions;
  size_t v22 = Dimensions >> 32;
  OSType v23 = pixelFormatType;
  if (pixelBufferOut)
  {
    size_t Width = CVPixelBufferGetWidth(pixelBufferOut);
    size_t Height = CVPixelBufferGetHeight(v20);
    OSType v26 = CVPixelBufferGetPixelFormatType(v20);
    CFNumberRef valuePtr = 0;
    CFNumberRef number = 0;
    if (a3
      && CFDictionaryGetValueIfPresent(a3, @"Y", (const void **)&valuePtr)
      && CFDictionaryGetValueIfPresent(a3, @"Height", (const void **)&number))
    {
      uint64_t v71 = 0;
      CFNumberGetValue(valuePtr, kCFNumberSInt32Type, (char *)&v71 + 4);
      CFNumberGetValue(number, kCFNumberSInt32Type, &v71);
      BOOL v27 = Height >= (int)v71 + (uint64_t)SHIDWORD(v71);
    }
    else
    {
      BOOL v27 = Height == v22;
    }
    if (v26 == pixelFormatType && Width == v21 && v27) {
      goto LABEL_11;
    }
    OSType v23 = pixelFormatType;
  }
  if (CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v21, v22, v23, *(CFDictionaryRef *)(a1 + 72), &pixelBufferOut))
  {
    CFIndex Code = 0;
LABEL_41:
    CFDataRef v11 = 0;
    unint64_t v5 = 0;
    goto LABEL_205;
  }
LABEL_11:
  if (!pixelBufferOut)
  {
    CFDataRef v11 = 0;
    unint64_t v5 = 0;
    CFIndex Code = 4294951894;
    goto LABEL_205;
  }
  *(_DWORD *)(*(void *)(a1 + 48) + 32) = CVPixelBufferGetPixelFormatType(pixelBufferOut);
  CFIndex v10 = CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
  if (v10) {
    goto LABEL_225;
  }
  value = 0;
  *(void *)(*(void *)(a1 + 48) + 64) = dataPointerOut;
  *(_DWORD *)(*(void *)(a1 + 48) + 112) = 0;
  if (a3 && CFDictionaryGetValueIfPresent(a3, @"Y", (const void **)&value))
  {
    LODWORD(valuePtr) = 0;
    CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr);
    *(_DWORD *)(*(void *)(a1 + 48) + 112) = valuePtr;
  }
  if (CVPixelBufferGetPlaneCount(pixelBufferOut) < 2) {
    PlaneCFArrayRef Count = 1;
  }
  else {
    PlaneCFArrayRef Count = CVPixelBufferGetPlaneCount(pixelBufferOut);
  }
  uint64_t v17 = *(void *)(a1 + 48);
  *(void *)(v17 + 40) = PlaneCount;
  *(_DWORD *)(v17 + 48) = 1;
  if (CMPhotoPixelFormatContainsYCbCr(pixelFormatType))
  {
    uint64_t v18 = *(void *)(a1 + 48);
    *(_DWORD *)(v18 + 48) = 2;
    if ((int)pixelFormatType > 1952854577)
    {
      if ((int)pixelFormatType > 2016686641)
      {
        if ((int)pixelFormatType > 2019963441)
        {
          if (pixelFormatType == 2019963956) {
            goto LABEL_57;
          }
          int v19 = 2019963442;
        }
        else
        {
          if (pixelFormatType == 2016686642) {
            goto LABEL_57;
          }
          int v19 = 2016687156;
        }
      }
      else if ((int)pixelFormatType > 1953903153)
      {
        if (pixelFormatType == 1953903154) {
          goto LABEL_57;
        }
        int v19 = 1953903668;
      }
      else
      {
        if (pixelFormatType == 1952854578) {
          goto LABEL_57;
        }
        int v19 = 1952855092;
      }
    }
    else if ((int)pixelFormatType > 1936077361)
    {
      if ((int)pixelFormatType > 1937125937)
      {
        if (pixelFormatType == 1937125938) {
          goto LABEL_57;
        }
        int v19 = 1937126452;
      }
      else
      {
        if (pixelFormatType == 1936077362) {
          goto LABEL_57;
        }
        int v19 = 1936077876;
      }
    }
    else
    {
      if ((int)pixelFormatType <= 875836517)
      {
        if (pixelFormatType != 875704934)
        {
          int v19 = 875704950;
          goto LABEL_56;
        }
LABEL_57:
        *(_DWORD *)(v18 + 48) = 1;
        goto LABEL_58;
      }
      if (pixelFormatType == 875836518) {
        goto LABEL_57;
      }
      int v19 = 875836534;
    }
LABEL_56:
    if (pixelFormatType != v19) {
      goto LABEL_58;
    }
    goto LABEL_57;
  }
LABEL_58:
  if (!CVPixelBufferIsPlanar(pixelBufferOut))
  {
    *(void *)(*(void *)(a1 + 48) + 88) = CVPixelBufferGetBaseAddress(pixelBufferOut);
    int BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBufferOut);
    uint64_t v42 = *(void *)(a1 + 48);
    *(_DWORD *)(v42 + 8) = BytesPerRow;
    int v43 = *(_DWORD *)(v42 + 112);
    int v44 = *(_DWORD *)(v42 + 32);
    if (v43)
    {
      if (v44 <= 1651847471)
      {
        if (v44 <= 1278226735)
        {
          if (v44 > 1278226487)
          {
            unsigned int v49 = v44 - 1278226488;
            if (v49 <= 0x30 && ((1 << v49) & 0x1400000000001) != 0) {
              goto LABEL_170;
            }
            goto LABEL_217;
          }
          if (v44 == 825306677 || v44 == 825437747) {
            goto LABEL_170;
          }
          int v45 = 1111970369;
        }
        else if (v44 <= 1647589489)
        {
          if ((v44 - 1278226736) <= 6 && ((1 << (v44 - 48)) & 0x45) != 0) {
            goto LABEL_170;
          }
          int v45 = 1380411457;
        }
        else
        {
          if (v44 <= 1650942775)
          {
            if (v44 != 1647589490)
            {
              if (v44 == 1647719528)
              {
                uint64_t v50 = *(void *)(v42 + 88);
                uint64_t v51 = (v43 * BytesPerRow) >> 1;
LABEL_171:
                *(void *)(v42 + 88) = v50 + v51;
                goto LABEL_172;
              }
              goto LABEL_217;
            }
            goto LABEL_170;
          }
          if (v44 == 1650942776 || v44 == 1650943796) {
            goto LABEL_170;
          }
          int v45 = 1651519798;
        }
      }
      else if (v44 > 1735549491)
      {
        if (v44 > 1815162993)
        {
          if (v44 > 1919378231)
          {
            if (v44 == 1919379252) {
              goto LABEL_170;
            }
            int v45 = 1919378232;
          }
          else
          {
            if (v44 == 1815162994) {
              goto LABEL_170;
            }
            int v45 = 1815491698;
          }
        }
        else if (v44 > 1751410031)
        {
          if (v44 == 1751410032) {
            goto LABEL_170;
          }
          int v45 = 1751411059;
        }
        else
        {
          if (v44 == 1735549492) {
            goto LABEL_170;
          }
          int v45 = 1735549752;
        }
      }
      else if (v44 > 1717855599)
      {
        if (v44 > 1734501175)
        {
          if (v44 == 1734501176) {
            goto LABEL_170;
          }
          int v45 = 1734505012;
        }
        else
        {
          if (v44 == 1717855600) {
            goto LABEL_170;
          }
          int v45 = 1717856627;
        }
      }
      else
      {
        if (v44 <= 1651926375)
        {
          if (v44 != 1651847472)
          {
            int v45 = 1651925816;
            goto LABEL_169;
          }
LABEL_170:
          uint64_t v50 = *(void *)(v42 + 88);
          uint64_t v51 = (v43 * BytesPerRow);
          goto LABEL_171;
        }
        if (v44 == 1651926376) {
          goto LABEL_170;
        }
        int v45 = 1652056888;
      }
LABEL_169:
      if (v44 == v45) {
        goto LABEL_170;
      }
LABEL_217:
      size_t v54 = FigSignalErrorAt();
LABEL_218:
      CFIndex Code = v54;
      goto LABEL_219;
    }
    if (v44 > 1651847471)
    {
      if (v44 > 1651926375)
      {
        if (v44 == 1652056888) {
          goto LABEL_145;
        }
        unsigned __int16 v47 = 25960;
      }
      else
      {
        if (v44 == 1651847472) {
          goto LABEL_145;
        }
        unsigned __int16 v47 = 25400;
      }
      int v46 = v47 | 0x62760000;
    }
    else if (v44 > 1650946097)
    {
      if (v44 == 1650946098) {
        goto LABEL_145;
      }
      int v46 = 1651519798;
    }
    else
    {
      if (v44 == 1647392369) {
        goto LABEL_145;
      }
      int v46 = 1647719528;
    }
    if (v44 != v46) {
      goto LABEL_172;
    }
LABEL_145:
    CFNumberRef v48 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, (const void *)(v42 + 8360));
    CVBufferSetAttachment(pixelBufferOut, (CFStringRef)*MEMORY[0x1E4F24E08], v48, kCVAttachmentMode_ShouldPropagate);
    CFRelease(v48);
    goto LABEL_172;
  }
  if (*(void *)(*(void *)(a1 + 48) + 40))
  {
    size_t v28 = 0;
    uint64_t v29 = 22;
    uint64_t v30 = 2;
    do
    {
      *(void *)(*(void *)(a1 + 48) + v29 * 4) = CVPixelBufferGetBaseAddressOfPlane(pixelBufferOut, v28);
      int BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBufferOut, v28);
      uint64_t v32 = *(_DWORD **)(a1 + 48);
      v32[v30] = BytesPerRowOfPlane;
      unsigned int v33 = v32[28];
      if (!v33) {
        goto LABEL_109;
      }
      int v34 = v32[8];
      if (v34 <= 1937125937)
      {
        if (v34 <= 1751527983)
        {
          if (v34 > 875704949)
          {
            BOOL v35 = v34 == 875704950 || v34 == 875836518;
            int v37 = 875836534;
          }
          else
          {
            BOOL v35 = v34 == 875704422 || v34 == 875704438;
            int v37 = 875704934;
          }
        }
        else if (v34 <= 1936077359)
        {
          BOOL v35 = v34 == 1751527984 || v34 == 1882468912;
          int v37 = 1885745712;
        }
        else if (v34 > 1936077875)
        {
          BOOL v35 = v34 == 1936077876;
          int v37 = 1937125936;
        }
        else
        {
          BOOL v35 = v34 == 1936077360;
          int v37 = 1936077362;
        }
        goto LABEL_100;
      }
      if (v34 > 1953903667)
      {
        if (v34 <= 2016687155)
        {
          BOOL v35 = v34 == 1953903668 || v34 == 2016686640;
          int v37 = 2016686642;
        }
        else
        {
          if (v34 > 2019963441)
          {
            BOOL v35 = v34 == 2019963956;
            unsigned __int16 v38 = 12850;
          }
          else
          {
            BOOL v35 = v34 == 2016687156;
            unsigned __int16 v38 = 12848;
          }
          int v37 = v38 | 0x78660000;
        }
        goto LABEL_100;
      }
      if (v34 <= 1952854577)
      {
        BOOL v35 = v34 == 1937125938 || v34 == 1937126452;
        unsigned __int16 v36 = 12848;
      }
      else
      {
        if (v34 > 1953903151)
        {
          BOOL v35 = v34 == 1953903152;
          int v37 = 1953903154;
          goto LABEL_100;
        }
        BOOL v35 = v34 == 1952854578;
        unsigned __int16 v36 = 13364;
      }
      int v37 = v36 | 0x74660000;
LABEL_100:
      if (!v35 && v34 != v37)
      {
        unint64_t v5 = 0;
        CFDataRef v11 = 0;
        CFIndex Code = 4294951891;
        int v60 = 1;
        goto LABEL_202;
      }
      if (v28)
      {
        __int16 v40 = &v32[v29];
        v33 /= v32[12];
      }
      else
      {
        __int16 v40 = v32 + 22;
      }
      *v40 += v33 * BytesPerRowOfPlane;
LABEL_109:
      ++v28;
      v29 += 2;
      ++v30;
    }
    while (*(void *)(*(void *)(a1 + 48) + 40) > v28);
  }
LABEL_172:
  CVPixelBufferGetExtendedPixels(pixelBufferOut, 0, 0, 0, (size_t *)(*(void *)(a1 + 48) + 24));
  uint64_t v52 = *(void *)(a1 + 48);
  *(CMVideoDimensions *)uint64_t v52 = v62;
  *(void *)(v52 + 56) = DataLength;
  if (*(_DWORD *)(v52 + 32) == 1651519798)
  {
    LODWORD(valuePtr) = 0;
    VersionFromFormatDescriptiouint64_t n = _getVersionFromFormatDescription(v61, &valuePtr);
    if (VersionFromFormatDescription
      || (VersionFromFormatDescriptiouint64_t n = Slim_GetPixelBufferInfoFromVersion(valuePtr, 0, 0, 0, 0, (int *)(*(void *)(a1 + 48) + 8364)), VersionFromFormatDescription))
    {
      CFIndex Code = VersionFromFormatDescription;
LABEL_219:
      unint64_t v5 = 0;
      CFDataRef v11 = 0;
      int v60 = 1;
      goto LABEL_202;
    }
  }
  switch(*(_DWORD *)(a1 + 60))
  {
    case 1:
      size_t v54 = SlimXDecodeFrame(*(void *)(a1 + 48), &v66);
      if (v54) {
        goto LABEL_218;
      }
      break;
    case 2:
      size_t v54 = YZipDecodeFrame(*(void *)(a1 + 48));
      if (v54) {
        goto LABEL_218;
      }
      goto LABEL_186;
    case 3:
      size_t v54 = HrlcDecodeFrame(*(void *)(a1 + 48));
      if (v54) {
        goto LABEL_218;
      }
      goto LABEL_186;
    case 4:
      size_t v54 = UncompressedDecodeFrame(*(void *)(a1 + 48), pixelBufferOut, DataLength);
      if (v54) {
        goto LABEL_218;
      }
      goto LABEL_186;
    case 5:
      size_t v54 = IntcDecodeFrame(pixelBufferOut, *(void *)(a1 + 48));
      if (v54) {
        goto LABEL_218;
      }
LABEL_186:
      unint64_t v66 = DataLength;
      break;
    default:
      unint64_t v66 = (int)SlimDecodeFrame(*(int **)(a1 + 48));
      break;
  }
  if (pixelBufferOut)
  {
    CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
    int v60 = 0;
  }
  else
  {
    int v60 = 1;
  }
  if (v66 + 4 < DataLength
    && (uint64_t v55 = &dataPointerOut[v66], dataPointerOut[v66] == 109)
    && v55[1] == 101
    && v55[2] == 116
    && v55[3] == 97)
  {
    CFAllocatorRef v56 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFDataRef v11 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)v55 + 4, DataLength - v66 - 4, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
    if (v11)
    {
      uint64_t v57 = (opaqueCMSampleBuffer *)CFPropertyListCreateWithData(v56, v11, 0, 0, &error);
      if (v57)
      {
        unint64_t v5 = v57;
        if (*(unsigned char *)(a1 + 56)) {
          CFStringRef v58 = @"RawImageMetadata";
        }
        else {
          CFStringRef v58 = @"MetadataDictionary";
        }
        CMSetAttachment(pixelBufferOut, v58, v57, 1u);
        goto LABEL_200;
      }
      if (error)
      {
        CFIndex Code = CFErrorGetCode(error);
        unint64_t v5 = 0;
        goto LABEL_201;
      }
    }
    unint64_t v5 = 0;
  }
  else
  {
    unint64_t v5 = 0;
    CFDataRef v11 = 0;
  }
LABEL_200:
  CFIndex Code = 0;
LABEL_201:
  *a4 = pixelBufferOut;
  CVPixelBufferRef pixelBufferOut = 0;
LABEL_202:
  if (v60 && pixelBufferOut) {
    CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
  }
LABEL_205:
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (v5) {
    CFRelease(v5);
  }
  if (error) {
    CFRelease(error);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (*a4 != pixelBufferOut && pixelBufferOut) {
    CFRelease(pixelBufferOut);
  }
  return Code;
}

uint64_t SlimVideoDecoder_CopyPixelBufferAttributesInternal(uint64_t a1, void *a2)
{
  unint64_t v2 = *(const void **)(a1 + 88);
  if (!v2) {
    return 4294951893;
  }
  CFTypeRef v4 = CFRetain(v2);
  uint64_t result = 0;
  *a2 = v4;
  return result;
}

uint64_t SlimVideoDecoder_CopyDecoderRestrictionsInternal(uint64_t a1, CFMutableDictionaryRef *a2)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableDictionaryRef v5 = Mutable;
    uint64_t v7 = 0;
    _getAlignmentRestrictionUtility(*(unsigned int *)(a1 + 80), *(_DWORD *)(*(void *)(a1 + 64) + 8364), (int *)&v7 + 1, (int *)&v7);
    FigCFDictionarySetInt();
    FigCFDictionarySetInt();
    if (a2) {
      *a2 = v5;
    }
    else {
      CFRelease(v5);
    }
  }
  return 0;
}

uint64_t _getAlignmentRestrictionUtility(uint64_t result, char a2, int *a3, int *a4)
{
  if (a3 && a4)
  {
    int v4 = 4;
    if ((int)result <= 1651925815)
    {
      if ((int)result > 1650942775)
      {
        if ((int)result <= 1650946097)
        {
          if (result == 1650942776) {
            goto LABEL_37;
          }
          int v8 = 1650943796;
LABEL_36:
          if (result == v8) {
            goto LABEL_37;
          }
          goto LABEL_33;
        }
        if (result == 1650946098 || result == 1651519798)
        {
LABEL_32:
          if ((a2 & 1) == 0) {
            goto LABEL_37;
          }
LABEL_33:
          int v6 = 4;
          int v4 = 16;
          goto LABEL_38;
        }
        int v7 = 1651847472;
      }
      else
      {
        if ((int)result <= 1647392368)
        {
          if (result == 1111970369)
          {
            int v6 = 4;
            goto LABEL_38;
          }
          int v5 = 1380411457;
LABEL_27:
          int v6 = 4;
          if (result != v5) {
            goto LABEL_33;
          }
LABEL_38:
          *a3 = v4;
          *a4 = v6;
          return result;
        }
        if (result == 1647392369) {
          goto LABEL_32;
        }
        int v6 = 4;
        if (result == 1647589490) {
          goto LABEL_38;
        }
        int v7 = 1647719528;
      }
    }
    else
    {
      if ((int)result > 1735549491)
      {
        if ((int)result <= 1815491697)
        {
          if (result != 1735549492 && result != 1735549752)
          {
            int v5 = 1815162994;
            goto LABEL_27;
          }
LABEL_37:
          int v4 = 8;
          int v6 = 8;
          goto LABEL_38;
        }
        int v6 = 4;
        if (result == 1815491698) {
          goto LABEL_38;
        }
        if (result == 1919378232) {
          goto LABEL_37;
        }
        int v8 = 1919379252;
        goto LABEL_36;
      }
      if ((int)result > 1652056887)
      {
        if (result != 1652056888)
        {
          if (result == 1734501176) {
            goto LABEL_37;
          }
          int v8 = 1734505012;
          goto LABEL_36;
        }
        goto LABEL_32;
      }
      if (result == 1651925816) {
        goto LABEL_32;
      }
      int v7 = 1651926376;
    }
    if (result != v7) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  return result;
}

uint64_t SlimVideoDecoder_CopyDecoderRestrictionsFromFormatDescript(const opaqueCMFormatDescription *a1, CFMutableDictionaryRef *a2)
{
  unsigned int v13 = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return 0;
  }
  CFMutableDictionaryRef v5 = Mutable;
  VersionFromFormatDescriptiouint64_t n = _getVersionFromFormatDescription(a1, &v13);
  if (VersionFromFormatDescription
    || (int v11 = 0,
        unsigned int v12 = 0,
        VersionFromFormatDescriptiouint64_t n = Slim_GetPixelBufferInfoFromVersion(v13, 0, (int *)&v12, 0, 0, &v11),
        VersionFromFormatDescription))
  {
    uint64_t v7 = VersionFromFormatDescription;
    goto LABEL_7;
  }
  int v9 = 0;
  int v10 = 0;
  _getAlignmentRestrictionUtility(v12, v11, &v10, &v9);
  FigCFDictionarySetInt();
  FigCFDictionarySetInt();
  uint64_t v7 = 0;
  if (!a2)
  {
LABEL_7:
    CFRelease(v5);
    return v7;
  }
  *a2 = v5;
  return v7;
}

uint64_t _getVersionFromFormatDescription(const opaqueCMFormatDescription *a1, _DWORD *a2)
{
  int valuePtr = 0;
  Extensiouint64_t n = (const __CFDictionary *)CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E4F1EE20]);
  if (Extension
    && (CFDataRef Value = (const __CFData *)CFDictionaryGetValue(Extension, @"slmC")) != 0
    && ((CFDataRef v6 = Value, Length = CFDataGetLength(Value), BytePtr = CFDataGetBytePtr(v6), Length >= 4)
      ? (BOOL v9 = BytePtr == 0)
      : (BOOL v9 = 1),
        !v9))
  {
    int v11 = *(_DWORD *)BytePtr;
    int valuePtr = v11;
    if (!v11) {
      return 4294951893;
    }
  }
  else
  {
    CFNumberRef v10 = (const __CFNumber *)CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E4F1EE60]);
    if (!v10) {
      return 4294951893;
    }
    CFNumberGetValue(v10, kCFNumberIntType, &valuePtr);
    int v11 = valuePtr;
    if (!valuePtr) {
      return 4294951893;
    }
  }
  if ((v11 & 0xFFFCu) >= 0x64) {
    return FigSignalErrorAt();
  }
  uint64_t result = 0;
  if (a2) {
    *a2 = v11;
  }
  return result;
}

uint64_t RegisterSlimVideoDecoderSessionClass()
{
  sSlimVideoDecoderSessionClass = 0;
  *(void *)algn_1E98CF9D8 = "SlimVideoDecoderSessionClass";
  qword_1E98CF9E0 = (uint64_t)SlimVideoDecoderSessionClass_Init;
  unk_1E98CF9E8 = 0;
  qword_1E98CF9F8 = 0;
  unk_1E98CFA00 = 0;
  qword_1E98CF9F0 = (uint64_t)SlimVideoDecoderSessionClass_Finalize;
  qword_1E98CFA08 = (uint64_t)SlimVideoDecoderSessionClass_CopyFormattingDesc;
  unk_1E98CFA10 = 0;
  uint64_t result = _CFRuntimeRegisterClass();
  sSlimVideoDecoderSessionCFTypeID TypeID = result;
  return result;
}

double SlimVideoDecoderSessionClass_Init(_OWORD *a1)
{
  double result = 0.0;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

void SlimVideoDecoderSessionClass_Finalize(uint64_t a1)
{
}

__CFString *SlimVideoDecoderSessionClass_CopyFormattingDesc(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<SlimVideoDecoder %p>", a1);
  return Mutable;
}

void _finalizeDecoderStorage(uint64_t a1)
{
  unint64_t v2 = *(const void **)(a1 + 24);
  if (v2) {
    CFRelease(v2);
  }
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = 0;
  uint64_t v3 = *(const void **)(a1 + 72);
  if (v3) {
    CFRelease(v3);
  }
  FigFormatDescriptionRelease();
  *(void *)(a1 + 8) = 0;
  if (*(unsigned char *)(a1 + 56)) {
    DestroyHuffTree(*(void **)(*(void *)(a1 + 48) + 8344));
  }
  int v4 = *(void **)(a1 + 48);
  free(v4);
}

uint64_t CMPhotoGetAPIVersion()
{
  return 143;
}

uint64_t CMPhotoCompiledWithExperimentsOn()
{
  return 0;
}

char *CMPhotoGetSCMVersionString()
{
  return kCMPhotoSCMVersion;
}

uint64_t CMPhotoByteStreamWriteStreamCreate(uint64_t a1, uint64_t a2, const void *a3)
{
  if (!a3) {
    return 0;
  }
  CFMutableDictionaryRef v5 = malloc_type_calloc(1uLL, 0x10uLL, 0x10200405730B0C9uLL);
  if (!v5 || (CFTypeRef v6 = CFRetain(a3), *v5 = a2, v5[1] = v6, (result = CFWriteStreamCreate()) == 0))
  {
    free(v5);
    CFRelease(a3);
    return 0;
  }
  return result;
}

void _streamFinalize_0(int a1, void *a2)
{
  uint64_t v3 = (const void *)a2[1];
  if (v3) {
    CFRelease(v3);
  }
  free(a2);
}

__CFString *_streamCopyDescription_0()
{
  return @"CMPhotoByteStreamWriteStream";
}

uint64_t _streamOpen_0(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  *a3 = 1;
  return 1;
}

uint64_t _streamOpenCompleted_0()
{
  return 1;
}

uint64_t _streamWrite_0(uint64_t a1, uint64_t a2, uint64_t a3, CFErrorRef *a4, uint64_t *a5)
{
  if (a3)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *a5;
    uint64_t v11 = a3;
    while (1)
    {
      uint64_t v19 = 0;
      uint64_t v12 = a5[1];
      uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v14 = v13 ? v13 : 0;
      unsigned int v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(v14 + 16);
      if (!v15) {
        break;
      }
      int v16 = v15(v12, a3, v10, a2, &v19);
      if (v16) {
        goto LABEL_12;
      }
      uint64_t v17 = v19;
      if (!v19)
      {
        int v16 = -12873;
        if (!a4) {
          return v9;
        }
LABEL_13:
        *a4 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFErrorDomain)*MEMORY[0x1E4F1D158], v16, 0);
        return v9;
      }
      uint64_t v10 = *a5 + v19;
      *a5 = v10;
      v9 += v17;
      v11 -= v17;
      if (!v11) {
        return v9;
      }
    }
    int v16 = -12782;
LABEL_12:
    if (!a4) {
      return v9;
    }
    goto LABEL_13;
  }
  return 0;
}

uint64_t _streamCanWrite_0()
{
  return 1;
}

uint64_t CMPhotoFloatFromRationalArray(const void *a1, int a2, _DWORD *a3, _DWORD *a4, float *a5)
{
  if (!a1) {
    return 4294950306;
  }
  CFTypeID v10 = CFGetTypeID(a1);
  if (v10 != CFArrayGetTypeID()
    || CFArrayGetCount((CFArrayRef)a1) != 2
    || !FigCFArrayGetInt32AtIndex()
    || !FigCFArrayGetInt32AtIndex())
  {
    return 4294950306;
  }
  if (a3) {
    *a3 = 0;
  }
  if (a4) {
    *a4 = 0;
  }
  uint64_t result = 0;
  if (a5)
  {
    double v12 = (double)0 / (double)0;
    if (a2) {
      double v12 = (double)0 / (double)0;
    }
    float v13 = v12;
    *a5 = v13;
  }
  return result;
}

uint64_t CMPhotoParseFlexRangeMetadataDictionary(const void *a1, _OWORD *a2)
{
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v25 = 0u;
  if (!a1) {
    return 4294950306;
  }
  CFTypeID v4 = CFGetTypeID(a1);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  uint64_t result = 4294950306;
  if (!a2 || v4 != TypeID) {
    return result;
  }
  uint64_t v7 = cmpweak_kFigPictureProperty_TonemapBaseColorIsWorkingColor();
  if (!CMPhotoCFDictionaryGetBooleanIfPresent((CFDictionaryRef)a1, v7, (unsigned char *)&v25 + 4)) {
    return 4294950306;
  }
  cmpweak_kFigPictureProperty_TonemapBaseHDRHeadroom();
  CFDataRef Value = (const void *)FigCFDictionaryGetValue();
  uint64_t result = CMPhotoFloatFromRationalArray(Value, 1, 0, 0, (float *)&v25 + 2);
  if (result) {
    return result;
  }
  cmpweak_kFigPictureProperty_TonemapAlternateHDRHeadroom();
  uint64_t v9 = (const void *)FigCFDictionaryGetValue();
  uint64_t result = CMPhotoFloatFromRationalArray(v9, 1, 0, 0, (float *)((unint64_t)&v25 | 0xC));
  if (result) {
    return result;
  }
  cmpweak_kFigPictureProperty_TonemapChannelMetadata();
  CFArrayRef v10 = (const __CFArray *)FigCFDictionaryGetValue();
  if (!v10) {
    return 4294950306;
  }
  CFArrayRef v11 = v10;
  CFTypeID v12 = CFGetTypeID(v10);
  if (v12 != CFArrayGetTypeID()) {
    return 4294950306;
  }
  LODWORD(v26) = CFArrayGetCount(v11);
  if ((v26 & 0xFFFFFFFD) != 1) {
    return 4294950306;
  }
  CFIndex v13 = 0;
  for (uint64_t i = (float *)&v29 + 1; ; ++i)
  {
    CFArrayGetValueAtIndex(v11, v13);
    cmpweak_kFigTonemapChannel_BaseOffset();
    unsigned int v15 = (const void *)FigCFDictionaryGetValue();
    uint64_t result = CMPhotoFloatFromRationalArray(v15, 0, 0, 0, i - 3);
    if (result) {
      break;
    }
    cmpweak_kFigTonemapChannel_AlternateOffset();
    int v16 = (const void *)FigCFDictionaryGetValue();
    uint64_t result = CMPhotoFloatFromRationalArray(v16, 0, 0, 0, i);
    if (result) {
      break;
    }
    cmpweak_kFigTonemapChannel_Gamma();
    uint64_t v17 = (const void *)FigCFDictionaryGetValue();
    uint64_t result = CMPhotoFloatFromRationalArray(v17, 1, 0, 0, i - 12);
    if (result) {
      break;
    }
    cmpweak_kFigTonemapChannel_GainMapMin();
    uint64_t v18 = (const void *)FigCFDictionaryGetValue();
    uint64_t result = CMPhotoFloatFromRationalArray(v18, 0, 0, 0, i - 9);
    if (result) {
      break;
    }
    cmpweak_kFigTonemapChannel_GainMapMax();
    uint64_t v19 = (const void *)FigCFDictionaryGetValue();
    uint64_t result = CMPhotoFloatFromRationalArray(v19, 0, 0, 0, i - 6);
    if (result) {
      break;
    }
    if (++v13 >= (unint64_t)(int)v26)
    {
      if (v26 == 1)
      {
        uint64_t v20 = 0;
        int v21 = DWORD1(v26);
        do
        {
          size_t v22 = (_DWORD *)((char *)&v29 + v20 + 8);
          *(v22 - 3) = DWORD2(v28);
          _DWORD *v22 = DWORD1(v29);
          *(v22 - 12) = v21;
          *(v22 - 9) = v27;
          *(v22 - 6) = HIDWORD(v27);
          v20 += 4;
        }
        while (v20 != 8);
      }
      uint64_t result = 0;
      long long v23 = v28;
      a2[2] = v27;
      a2[3] = v23;
      a2[4] = v29;
      long long v24 = v26;
      *a2 = v25;
      a2[1] = v24;
      return result;
    }
  }
  return result;
}

uint64_t CMPhotoWriteFlexRangeBinaryMetadata(const void *a1, void *a2)
{
  if (!a1) {
    return 4294950306;
  }
  CFTypeID v4 = CFGetTypeID(a1);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  uint64_t result = 4294950306;
  if (a2 && v4 == TypeID)
  {
    CFTypeID v7 = CFGetTypeID(a2);
    if (v7 == CFDataGetTypeID()
      && (char v23 = 0,
          int v8 = cmpweak_kFigPictureProperty_TonemapBaseColorIsWorkingColor(),
          CMPhotoCFDictionaryGetBooleanIfPresent((CFDictionaryRef)a1, v8, &v23))
      && (cmpweak_kFigPictureProperty_TonemapChannelMetadata(),
          (CFArrayRef Value = (const __CFArray *)FigCFDictionaryGetValue()) != 0)
      && (CFArrayRef v10 = Value, v11 = CFGetTypeID(Value), v11 == CFArrayGetTypeID())
      && (unint64_t Count = CFArrayGetCount(v10), (Count & 0xFFFFFFFFFFFFFFFDLL) == 1))
    {
      unint64_t v13 = Count;
      *(_DWORD *)bytes = 0;
      char v22 = ((Count > 1) << 7) | ((v23 != 0) << 6);
      CFDataAppendBytes((CFMutableDataRef)a2, bytes, 5);
      uint64_t result = _appendKeyAsBigEndianRational((const __CFDictionary *)a1, (const void *)*MEMORY[0x1E4F33460], (__CFData *)a2);
      if (!result)
      {
        uint64_t result = _appendKeyAsBigEndianRational((const __CFDictionary *)a1, (const void *)*MEMORY[0x1E4F33450], (__CFData *)a2);
        if (!result)
        {
          uint64_t v14 = 0;
          unsigned int v15 = (const void *)*MEMORY[0x1E4F34980];
          int v16 = (const void *)*MEMORY[0x1E4F34978];
          uint64_t v17 = (const void *)*MEMORY[0x1E4F34988];
          uint64_t v18 = (const void *)*MEMORY[0x1E4F34970];
          uint64_t v19 = (const void *)*MEMORY[0x1E4F34968];
          while (1)
          {
            CFDictionaryRef ValueAtIndex = (const __CFDictionary *)FigCFArrayGetValueAtIndex();
            uint64_t result = _appendKeyAsBigEndianRational(ValueAtIndex, v15, (__CFData *)a2);
            if (result) {
              break;
            }
            uint64_t result = _appendKeyAsBigEndianRational(ValueAtIndex, v16, (__CFData *)a2);
            if (result) {
              break;
            }
            uint64_t result = _appendKeyAsBigEndianRational(ValueAtIndex, v17, (__CFData *)a2);
            if (result) {
              break;
            }
            uint64_t result = _appendKeyAsBigEndianRational(ValueAtIndex, v18, (__CFData *)a2);
            if (result) {
              break;
            }
            uint64_t result = _appendKeyAsBigEndianRational(ValueAtIndex, v19, (__CFData *)a2);
            if (result) {
              break;
            }
            if (v13 == ++v14) {
              return 0;
            }
          }
        }
      }
    }
    else
    {
      return 4294950306;
    }
  }
  return result;
}

uint64_t _appendKeyAsBigEndianRational(const __CFDictionary *a1, const void *a2, __CFData *a3)
{
  *(void *)bytes = 0;
  CFArrayRef Value = CFDictionaryGetValue(a1, a2);
  uint64_t v5 = CMPhotoFloatFromRationalArray(Value, 1, bytes, &bytes[4], 0);
  if (!v5)
  {
    *(int8x8_t *)bytes = vrev32_s8(*(int8x8_t *)bytes);
    CFDataAppendBytes(a3, bytes, 8);
  }
  return v5;
}

uint64_t CMPhotoCreateFlexRangeMetadataDictionary(const __CFDictionary *a1, __CFDictionary **a2)
{
  uint64_t result = 4294950306;
  if (a1 && a2)
  {
    CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CMPhotoCFDictionarySetInt(Mutable, @"TonemapVersion", 0);
    CMPhotoCFDictionarySetInt(Mutable, @"TonemapWriterVersion", 0);
    unsigned __int8 v19 = 0;
    CFTypeRef v6 = cmpweak_kFigPictureProperty_TonemapBaseColorIsWorkingColor();
    if (CMPhotoCFDictionaryGetBooleanIfPresent(a1, v6, &v19)) {
      CMPhotoCFDictionarySetBoolean(Mutable, @"TonemapBaseColorIsWorkingColor", v19);
    }
    cmpweak_kFigPictureProperty_TonemapBaseHDRHeadroom();
    if (FigCFDictionaryGetValue()) {
      FigCFDictionarySetValue();
    }
    cmpweak_kFigPictureProperty_TonemapAlternateHDRHeadroom();
    if (FigCFDictionaryGetValue()) {
      FigCFDictionarySetValue();
    }
    cmpweak_kFigPictureProperty_TonemapChannelMetadata();
    CFArrayRef Value = (const __CFArray *)FigCFDictionaryGetValue();
    if (Value && (CFArrayRef v8 = Value, v9 = CFGetTypeID(Value), v9 == CFArrayGetTypeID()))
    {
      uint64_t v17 = a2;
      CFIndex Count = CFArrayGetCount(v8);
      CFIndex v11 = Count << 32;
      unint64_t v12 = (int)Count;
      unint64_t v13 = CFArrayCreateMutable(allocator, (int)Count, MEMORY[0x1E4F1D510]);
      if (v11)
      {
        CFIndex v14 = 0;
        if (v12 <= 1) {
          uint64_t v15 = 1;
        }
        else {
          uint64_t v15 = v12;
        }
        do
        {
          CFArrayGetValueAtIndex(v8, v14);
          CFMutableDictionaryRef v16 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          cmpweak_kFigTonemapChannel_BaseOffset();
          if (FigCFDictionaryGetValue()) {
            FigCFDictionarySetValue();
          }
          cmpweak_kFigTonemapChannel_AlternateOffset();
          if (FigCFDictionaryGetValue()) {
            FigCFDictionarySetValue();
          }
          cmpweak_kFigTonemapChannel_Gamma();
          if (FigCFDictionaryGetValue()) {
            FigCFDictionarySetValue();
          }
          cmpweak_kFigTonemapChannel_GainMapMin();
          if (FigCFDictionaryGetValue()) {
            FigCFDictionarySetValue();
          }
          cmpweak_kFigTonemapChannel_GainMapMax();
          if (FigCFDictionaryGetValue()) {
            FigCFDictionarySetValue();
          }
          CFArrayAppendValue(v13, v16);
          if (v16) {
            CFRelease(v16);
          }
          ++v14;
        }
        while (v15 != v14);
      }
      FigCFDictionarySetValue();
      if (v13) {
        CFRelease(v13);
      }
      uint64_t result = 0;
      const void *v17 = Mutable;
    }
    else
    {
      if (Mutable) {
        CFRelease(Mutable);
      }
      return 4294950306;
    }
  }
  return result;
}

uint64_t CMPhotoCreateFlexRangeMetadataDictionaryFromParsedMetadata(uint64_t a1, __CFDictionary **a2)
{
  if (!a2) {
    return 4294950306;
  }
  uint64_t MutableCopy = FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy) {
    return 4294950305;
  }
  uint64_t v5 = (__CFDictionary *)MutableCopy;
  Sunsigned int Int32 = FigCFNumberCreateSInt32();
  if (SInt32)
  {
    CFTypeID v7 = (void *)SInt32;
    FigCFDictionarySetInt32();
    FigCFDictionarySetBoolean();
    uint64_t v8 = _setRationalForKey(@"TonemapBaseHDRHeadroom", v7, v5);
    if (v8 || (uint64_t v8 = _setRationalForKey(@"TonemapAlternateHDRHeadroom", v7, v5), v8))
    {
      uint64_t v16 = v8;
    }
    else
    {
      uint64_t v9 = FigCFArrayCreateMutableCopy();
      if (v9)
      {
        uint64_t v20 = a1;
        CFMutableArrayRef theArray = (CFMutableArrayRef)v9;
        uint64_t v18 = a2;
        CFDictionaryRef theDict = v5;
        if (*(int *)(a1 + 16) < 1)
        {
LABEL_16:
          CFMutableArrayRef v15 = theArray;
          CFDictionarySetValue(theDict, @"TonemapChannelMetadata", theArray);
          uint64_t v16 = 0;
          *uint64_t v18 = theDict;
          uint64_t v5 = (__CFDictionary *)v7;
        }
        else
        {
          uint64_t v10 = 0;
          uint64_t v11 = a1 + 44;
          while (1)
          {
            unint64_t v12 = (void *)FigCFDictionaryCreateMutableCopy();
            if (!v12) {
              break;
            }
            unint64_t v13 = v12;
            CFArrayAppendValue(theArray, v12);
            CFRelease(v13);
            uint64_t v14 = _setRationalForKey(@"Gamma", v7, (__CFDictionary *)v13);
            if (v14
              || (uint64_t v14 = _setRationalForKey(@"GainMapMin", v7, (__CFDictionary *)v13), v14)
              || (uint64_t v14 = _setRationalForKey(@"GainMapMax", v7, (__CFDictionary *)v13), v14)
              || (uint64_t v14 = _setRationalForKey(@"BaseOffset", v7, (__CFDictionary *)v13), v14)
              || (uint64_t v14 = _setRationalForKey(@"AlternateOffset", v7, (__CFDictionary *)v13), v14))
            {
              uint64_t v16 = v14;
              goto LABEL_18;
            }
            ++v10;
            v11 += 4;
            if (v10 >= *(int *)(v20 + 16)) {
              goto LABEL_16;
            }
          }
          uint64_t v16 = 4294950305;
LABEL_18:
          CFRelease(v7);
          uint64_t v5 = theDict;
          CFMutableArrayRef v15 = theArray;
        }
        goto LABEL_19;
      }
      uint64_t v16 = 4294950305;
    }
    CFRelease(v7);
    CFMutableArrayRef v15 = 0;
  }
  else
  {
    CFMutableArrayRef v15 = 0;
    uint64_t v16 = 4294950305;
  }
LABEL_19:
  CFRelease(v5);
  if (v15) {
    CFRelease(v15);
  }
  return v16;
}

uint64_t _setRationalForKey(const void *a1, const void *a2, __CFDictionary *a3)
{
  uint64_t MutableCopy = FigCFArrayCreateMutableCopy();
  if (!MutableCopy) {
    return 4294950305;
  }
  CFTypeID v7 = (__CFArray *)MutableCopy;
  uint64_t appended = FigCFArrayAppendInt();
  if (!appended)
  {
    CFArrayAppendValue(v7, a2);
    CFDictionarySetValue(a3, a1, v7);
  }
  CFRelease(v7);
  return appended;
}

uint64_t CMPhotoCreateFlexRangeMetadataDictionaryFromBinaryMetadata(const void *a1, int a2, __CFDictionary **a3)
{
  if (!a1) {
    return 4294950306;
  }
  CFGetAllocator(a1);
  uint64_t MutableCopy = FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy) {
    return 4294950305;
  }
  CFTypeID v7 = (__CFDictionary *)MutableCopy;
  *(_DWORD *)IOSurfaceRef buffer = 0;
  CFIndex v22 = 0;
  if ((unint64_t)CFDataGetLength((CFDataRef)a1) <= 3) {
    goto LABEL_43;
  }
  v24.locatiouint64_t n = 0;
  v24.int length = 4;
  CFDataGetBytes((CFDataRef)a1, v24, buffer);
  CFIndex v22 = 4;
  int v8 = *(unsigned __int16 *)buffer;
  *(_WORD *)IOSurfaceRef buffer = __rev16(*(unsigned __int16 *)buffer);
  *(_WORD *)&buffer[2] = bswap32(*(unsigned __int16 *)&buffer[2]) >> 16;
  if (v8) {
    goto LABEL_43;
  }
  uint64_t v9 = FigCFDictionarySetUInt32();
  if (v9) {
    goto LABEL_44;
  }
  uint64_t v9 = FigCFDictionarySetUInt32();
  if (v9) {
    goto LABEL_44;
  }
  if (!a2)
  {
    UInt8 v21 = 0;
    if (CFDataGetLength((CFDataRef)a1) != 4)
    {
      v25.locatiouint64_t n = 4;
      v25.int length = 1;
      CFDataGetBytes((CFDataRef)a1, v25, &v21);
      CFIndex v22 = 5;
      signed __int8 v12 = v21;
      uint64_t v9 = CMPhotoCFDictionarySetBoolean(v7, @"TonemapBaseColorIsWorkingColor", (v21 >> 6) & 1);
      if (!v9)
      {
        uint64_t v9 = _extractAndSetRationalForKey((const __CFData *)a1, 5, 0, @"TonemapBaseHDRHeadroom", v7, &v22);
        if (!v9)
        {
          uint64_t v9 = _extractAndSetRationalForKey((const __CFData *)a1, v22, 0, @"TonemapAlternateHDRHeadroom", v7, &v22);
          if (!v9)
          {
            CFGetAllocator(a1);
            uint64_t v13 = FigCFArrayCreateMutableCopy();
            if (v13)
            {
              unsigned __int8 v19 = v7;
              CFMutableArrayRef theArray = (__CFArray *)v13;
              unint64_t v14 = 0;
              uint64_t v11 = 0;
              while (1)
              {
                if (v11) {
                  CFRelease(v11);
                }
                CFGetAllocator(a1);
                uint64_t v11 = (void *)FigCFDictionaryCreateMutableCopy();
                if (!v11) {
                  break;
                }
                uint64_t v15 = _extractAndSetRationalForKey((const __CFData *)a1, v22, 1, @"GainMapMin", (__CFDictionary *)v11, &v22);
                if (v15
                  || (uint64_t v15 = _extractAndSetRationalForKey((const __CFData *)a1, v22, 1, @"GainMapMax", (__CFDictionary *)v11, &v22), v15)|| (uint64_t v15 = _extractAndSetRationalForKey((const __CFData *)a1, v22, 0, @"Gamma", (__CFDictionary *)v11, &v22), v15)|| (uint64_t v15 = _extractAndSetRationalForKey((const __CFData *)a1, v22, 1,
                              @"BaseOffset",
                              (__CFDictionary *)v11,
                              &v22),
                      v15)
                  || (uint64_t v15 = _extractAndSetRationalForKey((const __CFData *)a1, v22, 1, @"AlternateOffset", (__CFDictionary *)v11, &v22), v15))
                {
                  uint64_t v17 = v15;
                  goto LABEL_36;
                }
                CFArrayAppendValue(theArray, v11);
                if (v12 < 0 && v14++ < 2) {
                  continue;
                }
                CFTypeID v7 = v19;
                uint64_t v10 = theArray;
                CFDictionarySetValue(v19, @"TonemapChannelMetadata", theArray);
                goto LABEL_29;
              }
              uint64_t v17 = 4294950305;
LABEL_36:
              CFTypeID v7 = v19;
              uint64_t v10 = theArray;
            }
            else
            {
              uint64_t v11 = 0;
              uint64_t v10 = 0;
              uint64_t v17 = 4294950305;
            }
            goto LABEL_37;
          }
        }
      }
LABEL_44:
      uint64_t v17 = v9;
      uint64_t v11 = 0;
      uint64_t v10 = 0;
      goto LABEL_37;
    }
LABEL_43:
    uint64_t v9 = FigSignalErrorAt();
    goto LABEL_44;
  }
  if ((unint64_t)CFDataGetLength((CFDataRef)a1) >= 5) {
    FigSignalErrorAt();
  }
  uint64_t v10 = 0;
  uint64_t v11 = 0;
LABEL_29:
  uint64_t v17 = 0;
  if (a3)
  {
    *a3 = v7;
    if (!v10) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
LABEL_37:
  CFRelease(v7);
  if (v10) {
LABEL_31:
  }
    CFRelease(v10);
LABEL_32:
  if (v11) {
    CFRelease(v11);
  }
  return v17;
}

uint64_t _extractAndSetRationalForKey(const __CFData *a1, CFIndex a2, int a3, const void *a4, __CFDictionary *a5, void *a6)
{
  uint64_t MutableCopy = FigCFArrayCreateMutableCopy();
  if (MutableCopy)
  {
    uint64_t v13 = (const void *)MutableCopy;
    if (!a1)
    {
      uint64_t v15 = 4294950306;
LABEL_16:
      CFRelease(v13);
      return v15;
    }
    *(void *)IOSurfaceRef buffer = 0;
    if ((unint64_t)(CFDataGetLength(a1) - a2) < 8)
    {
      uint64_t appended = FigSignalErrorAt();
      if (appended) {
        goto LABEL_18;
      }
      if (a3) {
        goto LABEL_7;
      }
    }
    else
    {
      v18.locatiouint64_t n = a2;
      v18.int length = 8;
      CFDataGetBytes(a1, v18, buffer);
      if (a6) {
        *a6 = a2 + 8;
      }
      if (a3)
      {
LABEL_7:
        uint64_t appended = FigCFArrayAppendInt32();
        if (appended) {
          goto LABEL_18;
        }
LABEL_14:
        uint64_t v15 = FigCFArrayAppendInt64();
        if (!v15) {
          CFDictionarySetValue(a5, a4, v13);
        }
        goto LABEL_16;
      }
    }
    uint64_t appended = FigCFArrayAppendInt64();
    if (!appended) {
      goto LABEL_14;
    }
LABEL_18:
    uint64_t v15 = appended;
    goto LABEL_16;
  }
  return 4294950305;
}

uint64_t CMPhotoParseFlexRangeMetadataFromAuxiliaryXMPMetadata(const CGImageMetadata *a1, int a2, uint64_t a3)
{
  uint64_t v42 = 0;
  int v43 = &v42;
  uint64_t v44 = 0x2000000000;
  int v45 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = &v38;
  uint64_t v40 = 0x2000000000;
  char v41 = 0;
  CFNumberFormatterRef v37 = 0;
  uint64_t v33 = 0;
  int v34 = (float *)&v33;
  uint64_t v35 = 0x2000000000;
  int v36 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = &v29;
  uint64_t v31 = 0x2000000000;
  char v32 = 0;
  uint64_t v25 = 0;
  long long v26 = &v25;
  uint64_t v27 = 0x2000000000;
  char v28 = 0;
  uint64_t v21 = 0;
  CFIndex v22 = &v21;
  uint64_t v23 = 0x2000000000;
  char v24 = 0;
  if (a1 && a3)
  {
    int v6 = CMPhotoMetadataCreateCFNumberFormatter((const __CFAllocator *)*MEMORY[0x1E4F1CF80], &v37);
    CFTypeID v7 = v43;
    *((_DWORD *)v43 + 6) = v6;
    if (!v6)
    {
      *(_DWORD *)(a3 + 64) = 0;
      *(void *)(a3 + 56) = 0;
      *(void *)(a3 + 68) = 0;
      *(_DWORD *)(a3 + 76) = 0;
      *(_DWORD *)(a3 + 28) = 1065353216;
      __asm { FMOV            V0.2S, #1.0 }
      *(void *)(a3 + 20) = _D0;
      *(void *)(a3 + 8) = 0x3F80000000000000;
      *(unsigned char *)(a3 + 4) = 1;
      int v13 = a2 ? a2 : 3;
      *(_DWORD *)(a3 + 16) = v13;
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = *(void *)"";
      block[2] = __CMPhotoParseFlexRangeMetadataFromAuxiliaryXMPMetadata_block_invoke;
      block[3] = &unk_1E5E2EA68;
      block[4] = &v21;
      block[5] = &v42;
      block[10] = v37;
      block[11] = a3;
      block[6] = &v38;
      block[7] = &v25;
      block[8] = &v29;
      block[9] = &v33;
      CGImageMetadataEnumerateTagsUsingBlock(a1, 0, 0, block);
      CFTypeID v7 = v43;
      if (!*((_DWORD *)v43 + 6))
      {
        if (*((unsigned char *)v22 + 24))
        {
          if (v34[6] == 1.0 && *((unsigned char *)v26 + 24) && *((unsigned char *)v30 + 24))
          {
            if (*((unsigned char *)v39 + 24))
            {
              uint64_t v14 = 0;
              *(int32x2_t *)(a3 + 8) = vrev64_s32(*(int32x2_t *)(a3 + 8));
              do
              {
                uint64_t v15 = a3 + v14;
                int v16 = *(_DWORD *)(a3 + v14 + 56);
                *(_DWORD *)(v15 + 56) = *(_DWORD *)(a3 + v14 + 68);
                *(_DWORD *)(v15 + 68) = v16;
                v14 += 4;
              }
              while (v14 != 12);
            }
          }
          else
          {
            int v19 = FigSignalErrorAt();
            CFTypeID v7 = v43;
            *((_DWORD *)v43 + 6) = v19;
          }
        }
        else
        {
          *((_DWORD *)v43 + 6) = -16993;
        }
      }
    }
  }
  else
  {
    int v45 = -16990;
    CFTypeID v7 = &v42;
  }
  if (v37)
  {
    CFRelease(v37);
    CFTypeID v7 = v43;
  }
  uint64_t v17 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v21, 8);
  _Block_object_dispose(&v25, 8);
  _Block_object_dispose(&v29, 8);
  _Block_object_dispose(&v33, 8);
  _Block_object_dispose(&v38, 8);
  _Block_object_dispose(&v42, 8);
  return v17;
}

BOOL __CMPhotoParseFlexRangeMetadataFromAuxiliaryXMPMetadata_block_invoke(uint64_t a1, int a2, CGImageMetadataTagRef tag)
{
  CFStringRef v5 = CGImageMetadataTagCopyNamespace(tag);
  CFTypeRef cf = 0;
  if (FigCFEqual())
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    CFStringRef v6 = CGImageMetadataTagCopyName(tag);
    if (v6)
    {
      *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = CMPhotoCopyMetadataTagValue(tag, *(__CFNumberFormatter **)(a1 + 80), 0, (__CFArray **)&cf);
      if (*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) {
        goto LABEL_12;
      }
      if (FigCFEqual())
      {
        *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = FigCFEqual();
        goto LABEL_12;
      }
      if (FigCFEqual())
      {
        CFTypeRef v7 = cf;
        int v8 = (char *)(*(void *)(a1 + 88) + 56);
LABEL_10:
        unsigned int v9 = 3;
LABEL_11:
        *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = _extractFloatValuesFromAuxMetaTagValue(v7, v9, v8);
        goto LABEL_12;
      }
      if (FigCFEqual())
      {
        CFTypeRef v7 = cf;
        int v8 = (char *)(*(void *)(a1 + 88) + 68);
        goto LABEL_10;
      }
      if (FigCFEqual())
      {
        CFTypeRef v7 = cf;
        int v8 = (char *)(*(void *)(a1 + 88) + 8);
LABEL_21:
        unsigned int v9 = 1;
        goto LABEL_11;
      }
      if (FigCFEqual())
      {
        *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = _extractFloatValuesFromAuxMetaTagValue(cf, 1u, (char *)(*(void *)(a1 + 88) + 12));
        if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) {
          *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
        }
      }
      else
      {
        if (FigCFEqual())
        {
          CFTypeRef v7 = cf;
          int v8 = (char *)(*(void *)(a1 + 88) + 32);
          goto LABEL_10;
        }
        if (FigCFEqual())
        {
          *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = _extractFloatValuesFromAuxMetaTagValue(cf, 3u, (char *)(*(void *)(a1 + 88) + 44));
          if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) {
            *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 1;
          }
        }
        else
        {
          if (FigCFEqual())
          {
            CFTypeRef v7 = cf;
            int v8 = (char *)(*(void *)(a1 + 88) + 20);
            goto LABEL_10;
          }
          if (FigCFEqual())
          {
            CFTypeRef v7 = cf;
            int v8 = (char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24);
            goto LABEL_21;
          }
        }
      }
    }
    else
    {
      *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = -17102;
    }
  }
  else
  {
    CFStringRef v6 = 0;
  }
LABEL_12:
  if (v5) {
    CFRelease(v5);
  }
  if (v6) {
    CFRelease(v6);
  }
  if (cf) {
    CFRelease(cf);
  }
  return *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) == 0;
}

uint64_t _extractFloatValuesFromAuxMetaTagValue(const void *a1, unsigned int a2, char *a3)
{
  if (!a1) {
    goto LABEL_14;
  }
  CFTypeID v6 = CFGetTypeID(a1);
  if (v6 != CFArrayGetTypeID())
  {
    CFTypeID v12 = CFGetTypeID(a1);
    if (v12 == CFNumberGetTypeID())
    {
      CFNumberGetValue((CFNumberRef)a1, kCFNumberFloatType, a3);
      unint64_t v10 = a2;
      unint64_t v8 = 1;
LABEL_10:
      uint64_t v13 = v10 - v8;
      if (v10 > v8)
      {
        uint64_t v14 = &a3[4 * v8];
        int v15 = *((_DWORD *)v14 - 1);
        do
        {
          *(_DWORD *)uint64_t v14 = v15;
          v14 += 4;
          --v13;
        }
        while (v13);
      }
      return 0;
    }
LABEL_14:
    FigSignalErrorAt();
    return 0;
  }
  CFIndex Count = CFArrayGetCount((CFArrayRef)a1);
  if (Count - 1 >= (unint64_t)a2) {
    goto LABEL_14;
  }
  unint64_t v8 = Count;
  uint64_t v9 = 0;
  unint64_t v10 = a2;
  uint64_t v11 = a3;
  while (FigCFArrayGetFloatAtIndex())
  {
    ++v9;
    v11 += 4;
    if (v8 == v9) {
      goto LABEL_10;
    }
  }
  return 4294950194;
}

uint64_t CMPhotoCreateXMPMetadataFromMetadata(float *a1, uint64_t a2, CGImageMetadata **a3)
{
  uint64_t v3 = 4294950306;
  if (a1 && a3)
  {
    CFMutableDictionaryRef Mutable = CGImageMetadataCreateMutable();
    if (!Mutable) {
      return 4294950305;
    }
    unint64_t v8 = Mutable;
    if (CGImageMetadataRegisterNamespaceForPrefix(Mutable, @"http://ns.adobe.com/hdr-gain-map/1.0/", @"HDRToneMap", 0))
    {
      uint64_t v9 = _addIntToCGMetadata(v8, 1, @"Version", @"http://ns.adobe.com/hdr-gain-map/1.0/");
      if (v9
        || (uint64_t v9 = _addIntToCGMetadata(v8, a2, @"BaseRenditionIsHDR", @"http://ns.adobe.com/hdr-gain-map/1.0/"), v9)|| (uint64_t v9 = _addFloatToCGMetadata(v8, @"HDRCapacityMin", @"http://ns.adobe.com/hdr-gain-map/1.0/", a1[2]), v9)|| (uint64_t v9 = _addFloatToCGMetadata(v8, @"HDRCapacityMax", @"http://ns.adobe.com/hdr-gain-map/1.0/", a1[3]), v9)|| (uint64_t v9 = _addFloatToCGMetadata(v8, @"Gamma", @"http://ns.adobe.com/hdr-gain-map/1.0/", a1[5]), v9)
        || (uint64_t v9 = _addFloatToCGMetadata(v8, @"GainMapMin", @"http://ns.adobe.com/hdr-gain-map/1.0/", a1[8]),
            v9)
        || (uint64_t v9 = _addFloatToCGMetadata(v8, @"GainMapMax", @"http://ns.adobe.com/hdr-gain-map/1.0/", a1[11]),
            v9)
        || (uint64_t v9 = _addFloatToCGMetadata(v8, @"OffsetSDR", @"http://ns.adobe.com/hdr-gain-map/1.0/", a1[14]),
            v9))
      {
        uint64_t v3 = v9;
      }
      else
      {
        uint64_t v3 = _addFloatToCGMetadata(v8, @"OffsetHDR", @"http://ns.adobe.com/hdr-gain-map/1.0/", a1[17]);
        if (!v3)
        {
          *a3 = v8;
          return v3;
        }
      }
    }
    else
    {
      uint64_t v3 = 4294950305;
    }
    CFRelease(v8);
  }
  return v3;
}

uint64_t _addIntToCGMetadata(CGImageMetadata *a1, uint64_t a2, const __CFString *a3, const __CFString *a4)
{
  CFStringRef v7 = CFStringCreateWithFormat(0, 0, @"%d", a2);
  if (!v7) {
    return 4294950305;
  }
  CFStringRef v8 = v7;
  uint64_t v9 = _addValueToCGMetadata(a1, v7, a3, a4);
  CFRelease(v8);
  return v9;
}

uint64_t _addFloatToCGMetadata(CGImageMetadata *a1, const __CFString *a2, const __CFString *a3, float a4)
{
  CFStringRef v7 = CFStringCreateWithFormat(0, 0, @"%f", a4);
  if (!v7) {
    return 4294950305;
  }
  CFStringRef v8 = v7;
  uint64_t v9 = _addValueToCGMetadata(a1, v7, a2, a3);
  CFRelease(v8);
  return v9;
}

uint64_t CMPhotoHeadroomFromMeteorPlusMetadataMakerNote(uint64_t a1, _DWORD *a2)
{
  uint64_t result = 4294950306;
  if (a1 && a2)
  {
    if ((FigCFDictionaryGetFloatIfPresent() || FigCFDictionaryGetFloatIfPresent())
      && FigCFDictionaryGetFloatIfPresent())
    {
      uint64_t result = 0;
      *a2 = 0;
    }
    else
    {
      return 4294950303;
    }
  }
  return result;
}

uint64_t CMPhotoGainMapCreateOutputFromConstituents(int a1, const void *a2, int a3, uint64_t a4, int a5, CFTypeRef cf, int a7, int a8, float a9, unsigned __int8 a10, unsigned __int8 a11, char a12, uint64_t a13, __CVBuffer **a14, CFTypeRef *a15)
{
  CFTypeRef cfa = 0;
  CFTypeRef v98 = 0;
  if (!cf) {
    return 4294950306;
  }
  int v15 = a7;
  uint64_t v17 = a14;
  CFRange v18 = a15;
  if (a7 == 6)
  {
    if (a15)
    {
      *a15 = CFRetain(cf);
      if (a14)
      {
        CFArrayRef Value = (void *)FigCFDictionaryGetValue();
        if (Value) {
          CFArrayRef Value = (void *)CFRetain(Value);
        }
        CFRange v18 = 0;
        uint64_t v20 = 0;
        CGColorSpaceRef v21 = 0;
        uint64_t v22 = 0;
        *a14 = (__CVBuffer *)Value;
LABEL_152:
        if (cfa) {
          CFRelease(cfa);
        }
        if (!v20) {
          goto LABEL_156;
        }
        goto LABEL_155;
      }
LABEL_151:
      CFRange v18 = 0;
      uint64_t v20 = 0;
      CGColorSpaceRef v21 = 0;
      uint64_t v22 = 0;
      goto LABEL_152;
    }
LABEL_174:
    uint64_t v20 = 0;
    CGColorSpaceRef v21 = 0;
    uint64_t v22 = 4294950306;
    goto LABEL_152;
  }
  if (!CFDictionaryContainsKey((CFDictionaryRef)cf, @"FlexRangeGainMap"))
  {
    buffer[0] = 0;
    if (!a14) {
      goto LABEL_173;
    }
    uint64_t v44 = (__CVBuffer *)FigCFDictionaryGetValue();
    if (!v44
      || (int v45 = v44, v46 = CFGetTypeID(v44), v46 != CVPixelBufferGetTypeID())
      || (unsigned __int16 v47 = (const void *)FigCFDictionaryGetValue()) == 0
      || (v94 = a4, CFTypeID v48 = CFGetTypeID(v47), v48 != CVPixelBufferGetTypeID()))
    {
      uint64_t v22 = 4294950306;
      goto LABEL_137;
    }
    if (v15 == 1) {
      int v15 = 3;
    }
    if (v15 == 5) {
      uint64_t v49 = 1380411457;
    }
    else {
      uint64_t v49 = 2019963440;
    }
    CMPhotoGetPixelBufferCLAPAsRect(v45);
    size_t v51 = vcvtad_u64_f64(v50);
    size_t v53 = vcvtad_u64_f64(v52);
    if (a3)
    {
      CFAllocatorRef v54 = CFGetAllocator(cf);
      uint64_t CVPixelBufferNotBackedByIOSurface = CMPhotoCreateCVPixelBufferNotBackedByIOSurface((uint64_t)v54, v49, v51, v53, 0, 0, 0, 0, buffer);
      if (CVPixelBufferNotBackedByIOSurface) {
        goto LABEL_178;
      }
    }
    else
    {
      uint64_t CVPixelBufferNotBackedByIOSurface = CMPhotoSurfacePoolCreatePixelBuffer(a2, v49, v51, v53, 1, 0, 0, 1, 0, 0, buffer);
      if (CVPixelBufferNotBackedByIOSurface) {
        goto LABEL_178;
      }
    }
    uint64_t v17 = a14;
    if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"ColorSpace"))
    {
      uint64_t v57 = (const void *)FigCFDictionaryGetValue();
      if (!v57) {
        goto LABEL_118;
      }
      int v58 = a11;
      uint64_t v59 = (CGColorSpace *)CFRetain(v57);
      goto LABEL_112;
    }
    int v58 = a11;
    switch(v15)
    {
      case 3:
        if (CMPhotoPixelBufferHasDisplayP3Primaries(v45))
        {
          uint64_t v63 = (CFStringRef *)MEMORY[0x1E4F1DBA0];
        }
        else if (CMPhotoPixelBufferHasSRGBPrimaries(v45))
        {
          uint64_t v63 = (CFStringRef *)MEMORY[0x1E4F1DC68];
        }
        else
        {
          uint64_t v63 = (CFStringRef *)MEMORY[0x1E4F1DC50];
        }
        break;
      case 4:
        if (CMPhotoPixelBufferHasDisplayP3Primaries(v45))
        {
          uint64_t v63 = (CFStringRef *)MEMORY[0x1E4F1DB98];
        }
        else if (CMPhotoPixelBufferHasSRGBPrimaries(v45))
        {
          uint64_t v63 = (CFStringRef *)MEMORY[0x1E4F1DC60];
        }
        else
        {
          uint64_t v63 = (CFStringRef *)MEMORY[0x1E4F1DC48];
        }
        break;
      case 5:
        v105[0] = 0;
        uint64_t CVPixelBufferNotBackedByIOSurface = CMPhotoCreateColorSpaceFromPixelBuffer(v45, v105, 1, 0);
        if (!CVPixelBufferNotBackedByIOSurface)
        {
          if (!v105[0])
          {
            uint64_t v22 = 4294950303;
            goto LABEL_179;
          }
          CGColorSpaceRef ExtendedLinearized = CGColorSpaceCreateExtendedLinearized(v105[0]);
          int v58 = a11;
          if (v105[0]) {
            CFRelease(v105[0]);
          }
LABEL_113:
          if (ExtendedLinearized)
          {
            CVBufferSetAttachment(buffer[0], (CFStringRef)*MEMORY[0x1E4F24A00], ExtendedLinearized, kCVAttachmentMode_ShouldPropagate);
            BOOL v73 = CGColorSpaceUsesITUR_2100TF(ExtendedLinearized);
            uint64_t v74 = (const void **)MEMORY[0x1E4F24C30];
            if (!v73) {
              uint64_t v74 = (const void **)MEMORY[0x1E4F24C40];
            }
            CMPhotoAddMatrixToBufferIfAllowed(buffer[0], *v74);
            if (a13)
            {
              uint64_t MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
            }
            else
            {
              if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"MeteorMakerNote"))
              {
                FigCFDictionaryGetValue();
                uint64_t MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
              }
              else
              {
                uint64_t MutableCopy = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                if (!MutableCopy)
                {
                  uint64_t v22 = 4294950305;
                  uint64_t v17 = a14;
LABEL_136:
                  CFRelease(ExtendedLinearized);
                  goto LABEL_137;
                }
              }
              uint64_t v17 = a14;
              if (!a8 && CFDictionaryContainsKey((CFDictionaryRef)cf, @"MeteorXMPMetadata"))
              {
                long long v76 = (const void *)*MEMORY[0x1E4F2F380];
                long long v77 = (const void *)FigCFDictionaryGetValue();
                long long v78 = v76;
                uint64_t v17 = a14;
                CFDictionaryAddValue(MutableCopy, v78, v77);
              }
            }
            if (!v94)
            {
              if (v58 | a10)
              {
                char v79 = CGColorSpaceContainsFlexGTCInfo();
                if (v58 || (v79 & 1) == 0) {
                  FigCFDictionarySetBoolean();
                }
              }
            }
            if (a3) {
              FigCFDictionarySetBoolean();
            }
            uint64_t v22 = CGImageApplyHDRGainMap();
            if (!v22)
            {
              const void *v17 = buffer[0];
              buffer[0] = 0;
            }
            if (MutableCopy) {
              CFRelease(MutableCopy);
            }
            goto LABEL_136;
          }
LABEL_118:
          uint64_t v22 = 4294950302;
          goto LABEL_137;
        }
LABEL_178:
        uint64_t v22 = CVPixelBufferNotBackedByIOSurface;
LABEL_179:
        uint64_t v17 = a14;
LABEL_137:
        CVBufferRef v68 = buffer[0];
        if (!buffer[0]) {
          goto LABEL_139;
        }
        goto LABEL_138;
      default:
        goto LABEL_118;
    }
    uint64_t v59 = CGColorSpaceCreateWithName(*v63);
LABEL_112:
    CGColorSpaceRef ExtendedLinearized = v59;
    goto LABEL_113;
  }
  CFDictionaryRef v104 = 0;
  v105[0] = 0;
  if (!a14)
  {
LABEL_173:
    CFRange v18 = 0;
    goto LABEL_174;
  }
  long long v26 = (const void *)FigCFDictionaryGetValue();
  if (!v26)
  {
    CFAllocatorRef v56 = 0;
    uint64_t v35 = 0;
    char v32 = 0;
    char v28 = 0;
LABEL_54:
    uint64_t v22 = 4294950306;
    goto LABEL_86;
  }
  uint64_t v27 = (__CVBuffer *)CFRetain(v26);
  char v28 = v27;
  if (!v27
    || (CFTypeID v29 = CFGetTypeID(v27), v29 != CVPixelBufferGetTypeID())
    || (uint64_t v30 = (const void *)FigCFDictionaryGetValue()) == 0)
  {
    CFAllocatorRef v56 = 0;
    uint64_t v35 = 0;
    char v32 = 0;
    goto LABEL_54;
  }
  uint64_t v31 = (__CVBuffer *)CFRetain(v30);
  char v32 = v31;
  if (!v31
    || (CFTypeID v33 = CFGetTypeID(v31), v33 != CVPixelBufferGetTypeID())
    || (int v34 = (const void *)FigCFDictionaryGetValue()) == 0)
  {
    CFAllocatorRef v56 = 0;
    uint64_t v35 = 0;
    goto LABEL_54;
  }
  uint64_t v93 = a4;
  uint64_t v35 = (CGColorSpace *)CFRetain(v34);
  if (!v35)
  {
    CFAllocatorRef v56 = 0;
    uint64_t v22 = 4294950306;
LABEL_191:
    uint64_t v17 = a14;
    goto LABEL_86;
  }
  if (v15 == 2) {
    unsigned int v36 = 875704422;
  }
  else {
    unsigned int v36 = 2019963440;
  }
  if (v15 == 5) {
    uint64_t v37 = 1380411457;
  }
  else {
    uint64_t v37 = v36;
  }
  CMPhotoGetPixelBufferCLAPAsRect(v28);
  size_t v39 = vcvtad_u64_f64(v38);
  size_t v41 = vcvtad_u64_f64(v40);
  if (a3)
  {
    CFAllocatorRef v42 = CFGetAllocator(cf);
    uint64_t PixelBuffer = CMPhotoCreateCVPixelBufferNotBackedByIOSurface((uint64_t)v42, v37, v39, v41, 0, 0, 0, 0, v105);
    if (PixelBuffer)
    {
LABEL_189:
      uint64_t v22 = PixelBuffer;
LABEL_190:
      CFAllocatorRef v56 = 0;
      goto LABEL_191;
    }
  }
  else
  {
    uint64_t PixelBuffer = CMPhotoSurfacePoolCreatePixelBuffer(a2, v37, v39, v41, 1, 0, 0, 1, 0, 0, v105);
    if (PixelBuffer) {
      goto LABEL_189;
    }
  }
  uint64_t v17 = a14;
  uint64_t v61 = v93;
  switch(v15)
  {
    case 0:
    case 1:
      goto LABEL_78;
    case 2:
      if (CGColorSpaceUsesITUR_2100TF(v35)) {
        goto LABEL_69;
      }
      CMVideoDimensions v62 = (const void *)FigCFDictionaryGetValue();
      if (!v62)
      {
        CFAllocatorRef v56 = 0;
        goto LABEL_54;
      }
      long long v102 = 0u;
      long long v103 = 0u;
      long long v100 = 0u;
      long long v101 = 0u;
      *(_OWORD *)IOSurfaceRef buffer = 0u;
      uint64_t PixelBuffer = CMPhotoParseFlexRangeMetadataDictionary(v62, buffer);
      if (PixelBuffer) {
        goto LABEL_189;
      }
      if (*((float *)&buffer[1] + 1) == 0.0)
      {
        uint64_t v61 = v93;
        goto LABEL_78;
      }
      uint64_t PixelBuffer = FigSignalErrorAt();
      goto LABEL_189;
    case 3:
      if (!CGColorSpaceIsPQBased(v35)) {
        goto LABEL_69;
      }
      goto LABEL_78;
    case 4:
      if (!CGColorSpaceIsHLGBased(v35)) {
        goto LABEL_69;
      }
      goto LABEL_78;
    case 5:
      CGColorSpaceRef v64 = CGColorSpaceCreateExtendedLinearized(v35);
      if (!v64)
      {
LABEL_69:
        CFAllocatorRef v56 = 0;
        uint64_t v22 = 4294950302;
        break;
      }
      IOSurfaceRef v65 = v64;
      CFRelease(v35);
      uint64_t v35 = v65;
LABEL_78:
      CVBufferSetAttachment(v105[0], (CFStringRef)*MEMORY[0x1E4F24A00], v35, kCVAttachmentMode_ShouldPropagate);
      BOOL v66 = CGColorSpaceUsesITUR_2100TF(v35);
      int v67 = (const void **)MEMORY[0x1E4F24C30];
      if (!v66) {
        int v67 = (const void **)MEMORY[0x1E4F24C40];
      }
      CMPhotoAddMatrixToBufferIfAllowed(v105[0], *v67);
      if (a13)
      {
        CFAllocatorRef v56 = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
      }
      else
      {
        if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"FlexRangeMetadata"))
        {
          uint64_t v69 = (const void *)FigCFDictionaryGetValue();
          long long v102 = 0u;
          long long v103 = 0u;
          long long v100 = 0u;
          long long v101 = 0u;
          *(_OWORD *)IOSurfaceRef buffer = 0u;
          uint64_t PixelBuffer = CMPhotoParseFlexRangeMetadataDictionary(v69, buffer);
          if (PixelBuffer) {
            goto LABEL_189;
          }
          uint64_t PixelBuffer = CGImageCreateFlexRangeMetadata();
          if (PixelBuffer) {
            goto LABEL_189;
          }
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          if (!Mutable)
          {
            uint64_t v22 = 4294950305;
            goto LABEL_190;
          }
          CFAllocatorRef v56 = Mutable;
          CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F2F380], v104);
          int v71 = a11;
          uint64_t v61 = v93;
        }
        else
        {
          CFAllocatorRef v56 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          int v71 = a11;
          if (!v56)
          {
            uint64_t v22 = 4294950305;
            break;
          }
        }
        CFDictionaryAddValue(v56, (const void *)*MEMORY[0x1E4F2F358], v35);
        if (!v61)
        {
          if (v71 | a10)
          {
            char v72 = CGColorSpaceContainsFlexGTCInfo();
            if (v71 || (v72 & 1) == 0) {
              FigCFDictionarySetBoolean();
            }
          }
        }
      }
      if (a3) {
        FigCFDictionarySetBoolean();
      }
      uint64_t v22 = CGImageApplyHDRGainMap();
      if (!v22)
      {
        *a14 = v105[0];
        v105[0] = 0;
      }
      break;
    default:
      uint64_t v22 = FigSignalErrorAt();
      CFAllocatorRef v56 = 0;
      break;
  }
LABEL_86:
  if (v104) {
    CFRelease(v104);
  }
  if (v56) {
    CFRelease(v56);
  }
  if (v35) {
    CFRelease(v35);
  }
  if (v28) {
    CFRelease(v28);
  }
  if (v105[0]) {
    CFRelease(v105[0]);
  }
  if (v32)
  {
    CVBufferRef v68 = v32;
LABEL_138:
    CFRelease(v68);
  }
LABEL_139:
  if (v22)
  {
LABEL_177:
    CFRange v18 = 0;
    uint64_t v20 = 0;
LABEL_182:
    CGColorSpaceRef v21 = 0;
    goto LABEL_152;
  }
  if (a15) {
    *a15 = 0;
  }
  if (!a12) {
    goto LABEL_151;
  }
  ColorSpaceFromuint64_t PixelBuffer = CMPhotoCreateColorSpaceFromPixelBuffer(*v17, (CGColorSpace **)&v98, 1, 0);
  if (ColorSpaceFromPixelBuffer)
  {
    uint64_t v22 = ColorSpaceFromPixelBuffer;
    goto LABEL_177;
  }
  if (!CGColorSpaceContainsFlexGTCInfo()) {
    goto LABEL_151;
  }
  uint64_t v20 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v20)
  {
    CFRange v18 = 0;
    CGColorSpaceRef v21 = 0;
    uint64_t v22 = 4294950305;
    goto LABEL_152;
  }
  CFRange v18 = (const void *)CGColorSpaceCopyFlexGTCInfo();
  CFDictionaryAddValue(v20, (const void *)*MEMORY[0x1E4F2F350], v18);
  if (a9 >= 0.0) {
    FigCFDictionarySetFloat();
  }
  uint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(*v17);
  long long v82 = v17;
  CMPhotoGetPixelBufferCLAPAsRect(*v17);
  size_t v84 = vcvtad_u64_f64(v83);
  size_t v86 = vcvtad_u64_f64(v85);
  if (a3)
  {
    CFAllocatorRef v87 = CFGetAllocator(cf);
    uint64_t v88 = CMPhotoCreateCVPixelBufferNotBackedByIOSurface((uint64_t)v87, PixelFormatType, v84, v86, 0, 0, 0, 0, (CVPixelBufferRef *)&cfa);
    if (!v88)
    {
      FigCFDictionarySetBoolean();
      goto LABEL_164;
    }
    goto LABEL_181;
  }
  uint64_t v88 = CMPhotoSurfacePoolCreatePixelBuffer(a2, PixelFormatType, v84, v86, 1, 0, 0, 1, 0, 0, (CVPixelBufferRef *)&cfa);
  if (v88)
  {
LABEL_181:
    uint64_t v22 = v88;
    goto LABEL_182;
  }
LABEL_164:
  if (!CMPhotoPixelBufferIsITUR_2100TF(*v82))
  {
    CGColorSpaceRef v21 = 0;
    uint64_t v22 = 4294950302;
    goto LABEL_152;
  }
  int HasDisplayP3Primaries = CMPhotoPixelBufferHasDisplayP3Primaries(*v82);
  uint64_t v91 = (CFStringRef *)MEMORY[0x1E4F1DC98];
  if (HasDisplayP3Primaries) {
    uint64_t v91 = (CFStringRef *)MEMORY[0x1E4F1DB90];
  }
  CGColorSpaceRef v21 = CGColorSpaceCreateWithName(*v91);
  CMPhotoAddColorInformationToPixelBufferAccordingToFormat(v21, 0, 0, (const void *)*MEMORY[0x1E4F24C40], (CVBufferRef)cfa);
  uint64_t v92 = CGImageConvertHDRPixelBufferToSDR();
  if (v92)
  {
    uint64_t v22 = v92;
    goto LABEL_152;
  }
  if (*v82) {
    CFRelease(*v82);
  }
  uint64_t v22 = 0;
  *long long v82 = (__CVBuffer *)cfa;
  CFTypeRef cfa = 0;
LABEL_155:
  CFRelease(v20);
LABEL_156:
  if (v18) {
    CFRelease(v18);
  }
  if (v98) {
    CFRelease(v98);
  }
  if (v21) {
    CFRelease(v21);
  }
  return v22;
}

uint64_t _addValueToCGMetadata(CGImageMetadata *a1, CFTypeRef value, const __CFString *a3, CFStringRef xmlns)
{
  CGImageMetadataTagRef v6 = CGImageMetadataTagCreate(xmlns, @"HDRToneMap", a3, kCGImageMetadataTypeDefault, value);
  if (!v6) {
    return 4294950305;
  }
  CFStringRef v7 = v6;
  CFStringRef v8 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%@:%@", @"HDRToneMap", a3);
  if (v8)
  {
    CFStringRef v9 = v8;
    if (CGImageMetadataSetTagWithPath(a1, 0, v8, v7)) {
      uint64_t v10 = 0;
    }
    else {
      uint64_t v10 = 4294950305;
    }
    CFRelease(v9);
  }
  else
  {
    uint64_t v10 = 4294950305;
  }
  CFRelease(v7);
  return v10;
}

uint64_t SlimVideoEncoder_CreateSession(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    return 4294951896;
  }
  pthread_once(&SlimVideoEncoderSessionGetTypeID_onceToken, (void (*)(void))RegisterSlimVideoEncoderSessionClass);
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance) {
    return 4294951894;
  }
  uint64_t v4 = Instance;
  uint64_t result = 0;
  *a2 = v4;
  return result;
}

uint64_t SlimVideoEncoder_StartSessionInternal(const void *a1, unint64_t a2, uint64_t a3)
{
  return _startEncodeSession(a1, 0, a2, a3 + 16);
}

uint64_t _startEncodeSession(CFTypeRef cf, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v7 = HIDWORD(a3);
  CFTypeRef cfa = 0;
  *(void *)a4 = a2;
  *(void *)(a4 + 12) = a3;
  CFStringRef v8 = *(const void **)(a4 + 24);
  if (v8) {
    CFRelease(v8);
  }
  *(void *)(a4 + 24) = cf;
  if (cf) {
    CFRetain(cf);
  }
  FigFormatDescriptionRelease();
  *(void *)(a4 + 32) = 0;
  uint64_t result = _createPixelBufferAttributesDictionaryForEncoder(*(const __CFAllocator **)(a4 + 24), a3, v7, 0, 1, &cfa);
  if (!result)
  {
    if (*(void *)a4)
    {
      VTEncoderSessionSetPixelBufferAttributes();
    }
    else
    {
      uint64_t v10 = *(const void **)(a4 + 96);
      if (v10) {
        CFRelease(v10);
      }
      CFTypeRef v11 = cfa;
      if (cfa) {
        CFTypeRef v11 = CFRetain(cfa);
      }
      *(void *)(a4 + 96) = v11;
    }
    if (cfa) {
      CFRelease(cfa);
    }
    CMMemoryPoolRef v12 = CMMemoryPoolCreate(0);
    *(void *)(a4 + 56) = v12;
    if (v12
      && (*(void *)(a4 + 48) = 0,
          uint64_t v13 = malloc_type_calloc(1uLL, 0x20B0uLL, 0x1030040868D5BD5uLL),
          (*(void *)(a4 + 64) = v13) != 0))
    {
      uint64_t v14 = v13;
      uint64_t result = 0;
      *uint64_t v14 = a3;
      v14[1] = v7;
      *((_OWORD *)v14 + 522) = xmmword_1AB9E2CE0;
      *((void *)v14 + 7) = 3 * *(_DWORD *)(a4 + 12) * *(_DWORD *)(a4 + 16) + 0x20000;
      *((void *)v14 + 17) = 0;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t SlimVideoEncoder_EncodeFrameInternal(uint64_t a1, __CVBuffer *a2, CMTime *a3, long long *a4, uint64_t a5, void (*a6)(uint64_t, uint64_t, uint64_t, CFTypeRef), uint64_t a7, uint64_t a8)
{
  CFTypeRef v16 = 0;
  CMTime v15 = *a3;
  long long v13 = *a4;
  uint64_t v14 = *((void *)a4 + 2);
  uint64_t v11 = _encodeFrame(a1 + 16, a2, &v15, (uint64_t)&v13, a5, &v16);
  a6(a7, a8, v11, v16);
  if (v16) {
    CFRelease(v16);
  }
  return v11;
}

uint64_t _encodeFrame(uint64_t a1, CVPixelBufferRef pixelBuffer, CMTime *a3, uint64_t a4, uint64_t a5, CFTypeRef *a6)
{
  unint64_t v7 = pixelBuffer;
  CMBlockBufferRef v124 = 0;
  CMBlockBufferRef blockBufferOut = 0;
  dataPointerOut = 0;
  datasize_t Length = 0;
  CFTypeRef cf = 0;
  signed int PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  CFErrorRef error = 0;
  CFDictionaryRef v10 = CVBufferCopyAttachments(v7, kCVAttachmentMode_ShouldPropagate);
  if (CFDictionaryContainsKey(v10, @"StreamName"))
  {
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v10, @"StreamName");
    if (CFStringCompare(Value, @"Depth", 1uLL))
    {
      char v12 = 1;
      if (CFStringCompare(Value, @"IR", 1uLL)) {
        goto LABEL_7;
      }
    }
    else
    {
      char v12 = 0;
    }
    *(unsigned char *)(*(void *)(a1 + 64) + 144) = v12;
  }
LABEL_7:
  memset(&sampleTimingArray, 0, sizeof(sampleTimingArray));
  uint64_t v13 = *(void *)(a1 + 64);
  CFDictionaryRef v118 = v10;
  if (!*(_DWORD *)(v13 + 116))
  {
    *(_DWORD *)(v13 + 32) = PixelFormatType;
    if (PixelFormatType == 1650943796)
    {
      CFTypeRef v22 = CMGetAttachment(v7, @"RawImageMetadata", 0);
      uint64_t v13 = *(void *)(a1 + 64);
      if (v22)
      {
        *(void *)(v13 + 56) = 2 * *(_DWORD *)(a1 + 12) * *(_DWORD *)(a1 + 16) + 0x10000;
        uint64_t v23 = @"RawImageMetadata";
      }
      else
      {
        uint64_t v23 = @"MetadataDictionary";
      }
      CFStringRef key = v23;
      signed int PixelFormatType = 1650943796;
      goto LABEL_19;
    }
LABEL_16:
    CFStringRef key = @"MetadataDictionary";
    goto LABEL_19;
  }
  CFDictionaryRef v14 = (const __CFDictionary *)CMGetAttachment(v7, @"RawImage", 0);
  if (!v14)
  {
    uint64_t v13 = *(void *)(a1 + 64);
    goto LABEL_16;
  }
  CFDictionaryRef v15 = v14;
  CFTypeRef v16 = (__CVBuffer *)CFDictionaryGetValue(v14, @"RawImageData");
  if (!v16) {
    goto LABEL_352;
  }
  uint64_t v17 = v16;
  CFRange v18 = CFDictionaryGetValue(v15, @"RawImageMetadata");
  if (!v18) {
    goto LABEL_352;
  }
  int v19 = v18;
  signed int PixelFormatType = 1650943796;
  int Width = CVPixelBufferGetWidth(v17);
  int Height = CVPixelBufferGetHeight(v17);
  CFStringRef key = @"RawImageMetadata";
  CMSetAttachment(v17, @"RawImageMetadata", v19, 1u);
  uint64_t v13 = *(void *)(a1 + 64);
  *(_DWORD *)uint64_t v13 = Width;
  *(_DWORD *)(v13 + 4) = Height;
  *(void *)(v13 + 56) = 2 * Width * Height + 0x10000;
  *(_DWORD *)(v13 + 32) = 1650943796;
  unint64_t v7 = v17;
LABEL_19:
  *(_DWORD *)(v13 + 112) = 0;
  if (a5)
  {
    unsigned int v24 = *(_DWORD *)(a1 + 72);
    if (v24 <= 5)
    {
      int v25 = 1 << v24;
      if ((v25 & 0x26) != 0)
      {
        size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(v7, 0);
        LODWORD(values[0]) = 0;
        if (!FigCFDictionaryGetIntIfPresent()) {
          goto LABEL_47;
        }
        if (HeightOfPlane <= SLODWORD(values[0])) {
          goto LABEL_355;
        }
        int v27 = 3;
        if (PixelFormatType <= 1734505011)
        {
          if (PixelFormatType > 1647589489)
          {
            if (PixelFormatType == 1647589490) {
              goto LABEL_45;
            }
            int v28 = 1650943796;
LABEL_43:
            if (PixelFormatType == v28) {
              goto LABEL_44;
            }
            goto LABEL_233;
          }
          if (PixelFormatType != 1111970369 && PixelFormatType != 1380411457)
          {
LABEL_233:
            int32x4_t v79 = vdupq_n_s32(PixelFormatType);
            if (((PixelFormatType != 1651519798) & vmaxv_u8((uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vceqq_s32(v79, (int32x4_t)xmmword_1AB9E2CF0), (int16x8_t)vceqq_s32(v79, (int32x4_t)xmmword_1AB9E2D00))))) == 0)
            {
              if (PixelFormatType > 1735549751)
              {
                if (PixelFormatType == 1919378232) {
                  goto LABEL_44;
                }
                int v80 = 1735549752;
              }
              else
              {
                if (PixelFormatType == 1650942776) {
                  goto LABEL_44;
                }
                int v80 = 1734501176;
              }
              if (PixelFormatType != v80)
              {
LABEL_46:
                *(_DWORD *)(*(void *)(a1 + 64) + 112) = values[0];
LABEL_47:
                LODWORD(keys) = 0;
                if (!FigCFDictionaryGetIntIfPresent()) {
                  goto LABEL_71;
                }
                if (PixelFormatType <= 1734505011)
                {
                  if (PixelFormatType <= 1647589489)
                  {
                    if (PixelFormatType == 1111970369) {
                      goto LABEL_64;
                    }
                    int v30 = 1380411457;
                    goto LABEL_56;
                  }
                  if (PixelFormatType == 1647589490) {
                    goto LABEL_64;
                  }
                  int v31 = 1650943796;
                }
                else
                {
                  if (PixelFormatType > 1815162993)
                  {
                    if (PixelFormatType == 1815162994) {
                      goto LABEL_64;
                    }
                    if (PixelFormatType == 1919379252) {
                      goto LABEL_63;
                    }
                    int v30 = 1815491698;
LABEL_56:
                    if (PixelFormatType != v30)
                    {
LABEL_237:
                      int32x4_t v81 = vdupq_n_s32(PixelFormatType);
                      if (((PixelFormatType != 1651519798) & vmaxv_u8((uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vceqq_s32(v81, (int32x4_t)xmmword_1AB9E2CF0), (int16x8_t)vceqq_s32(v81, (int32x4_t)xmmword_1AB9E2D00))))) == 0)
                      {
                        if (PixelFormatType > 1735549751)
                        {
                          if (PixelFormatType != 1735549752)
                          {
                            int v82 = 1919378232;
LABEL_350:
                            if (PixelFormatType != v82)
                            {
                              int v32 = (int)keys;
LABEL_69:
                              if (HeightOfPlane >= SLODWORD(values[0]) + (uint64_t)v32)
                              {
                                *(_DWORD *)(*(void *)(a1 + 64) + 4) = v32;
                                goto LABEL_71;
                              }
LABEL_355:
                              uint64_t Code = FigSignalErrorAt();
                              CFDictionaryRef v43 = 0;
LABEL_356:
                              CFDataRef v100 = 0;
                              LODWORD(Mutable) = 0;
                              goto LABEL_320;
                            }
                          }
                        }
                        else if (PixelFormatType != 1650942776)
                        {
                          int v82 = 1734501176;
                          goto LABEL_350;
                        }
                      }
LABEL_63:
                      int v32 = (int)keys;
                      BOOL v33 = -(int)keys < 0;
                      int v34 = -(int)keys & 7;
                      int v35 = keys & 7;
                      goto LABEL_65;
                    }
LABEL_64:
                    int v32 = (int)keys;
                    BOOL v33 = -(int)keys < 0;
                    int v34 = -(int)keys & 3;
                    int v35 = keys & 3;
LABEL_65:
                    if (v33) {
                      int v36 = v35;
                    }
                    else {
                      int v36 = -v34;
                    }
                    if (v36) {
                      goto LABEL_355;
                    }
                    goto LABEL_69;
                  }
                  if (PixelFormatType == 1734505012) {
                    goto LABEL_63;
                  }
                  int v31 = 1735549492;
                }
                if (PixelFormatType == v31) {
                  goto LABEL_63;
                }
                goto LABEL_237;
              }
            }
LABEL_44:
            int v27 = 7;
          }
        }
        else
        {
          if (PixelFormatType <= 1815162993)
          {
            if (PixelFormatType == 1734505012) {
              goto LABEL_44;
            }
            int v28 = 1735549492;
            goto LABEL_43;
          }
          if (PixelFormatType != 1815162994 && PixelFormatType != 1815491698)
          {
            int v28 = 1919379252;
            goto LABEL_43;
          }
        }
LABEL_45:
        if (((uint64_t)values[0] & v27) != 0) {
          goto LABEL_355;
        }
        goto LABEL_46;
      }
      if ((v25 & 0x18) != 0)
      {
        size_t v29 = CVPixelBufferGetHeightOfPlane(v7, 0);
        LODWORD(values[0]) = 0;
        if (FigCFDictionaryGetIntIfPresent()) {
          *(_DWORD *)(*(void *)(a1 + 64) + 112) = values[0];
        }
        LODWORD(keys) = 0;
        if (FigCFDictionaryGetIntIfPresent())
        {
          if (v29 >= (int)keys + (uint64_t)SLODWORD(values[0]))
          {
            *(_DWORD *)(*(void *)(a1 + 64) + 4) = keys;
            goto LABEL_71;
          }
          goto LABEL_355;
        }
      }
    }
  }
LABEL_71:
  CVPixelBufferGetExtendedPixels(v7, 0, 0, 0, (size_t *)(*(void *)(a1 + 64) + 24));
  if (PixelFormatType > 1651847471)
  {
    if (PixelFormatType > 1651926375)
    {
      if (PixelFormatType == 1652056888) {
        goto LABEL_84;
      }
      unsigned __int16 v38 = 25960;
    }
    else
    {
      if (PixelFormatType == 1651847472) {
        goto LABEL_84;
      }
      unsigned __int16 v38 = 25400;
    }
    int v37 = v38 | 0x62760000;
  }
  else if (PixelFormatType > 1650946097)
  {
    if (PixelFormatType == 1650946098) {
      goto LABEL_84;
    }
    int v37 = 1651519798;
  }
  else
  {
    if (PixelFormatType == 1647392369) {
      goto LABEL_84;
    }
    int v37 = 1647719528;
  }
  if (PixelFormatType != v37) {
    goto LABEL_89;
  }
LABEL_84:
  CFTypeRef v39 = CVBufferCopyAttachment(v7, (CFStringRef)*MEMORY[0x1E4F24E08], 0);
  if (!v39)
  {
LABEL_352:
    CFDictionaryRef v43 = 0;
    CFDataRef v100 = 0;
    LODWORD(Mutable) = 0;
    uint64_t Code = 4294951893;
LABEL_320:
    char v59 = 1;
    goto LABEL_321;
  }
  double v40 = v39;
  *(_DWORD *)(*(void *)(a1 + 64) + 8360) = FigCFNumberGetSInt32();
  CFRelease(v40);
  if (*(_DWORD *)(a1 + 72) != 4)
  {
    uint64_t v41 = *(void *)(a1 + 64);
    uint64_t v42 = *(unsigned int *)(v41 + 4);
    if (*(void *)(v41 + 24) + v42 < (unint64_t)(int)((v42 + 3) & 0xFFFFFFFC))
    {
      CFDictionaryRef v43 = 0;
      CFDataRef v100 = 0;
      LODWORD(Mutable) = 0;
      uint64_t Code = 4294951891;
      goto LABEL_320;
    }
    if ((((_BYTE)v42 + 3) & 4) != 0) {
      *(_DWORD *)(v41 + 8364) |= 1u;
    }
  }
LABEL_89:
  if (*(void *)(a1 + 32))
  {
    CFDictionaryRef v43 = 0;
    goto LABEL_117;
  }
  CFAllocatorRef v44 = *(const __CFAllocator **)(a1 + 24);
  uint64_t v45 = *(void *)(a1 + 64);
  unsigned int v46 = *(_DWORD *)(v45 + 8360);
  int v47 = *(_DWORD *)(v45 + 8364);
  int v48 = *(_DWORD *)(a1 + 8);
  int v49 = *(_DWORD *)(a1 + 72);
  values[0] = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v44, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    CFDictionaryRef v43 = 0;
    CFDataRef v100 = 0;
LABEL_364:
    uint64_t Code = 4294951895;
    goto LABEL_320;
  }
  int v128 = 0;
  uint64_t VersionFromPixelBufferInfo = Slim_GetVersionFromPixelBufferInfo(PixelFormatType, v46, v47, v49, &v128);
  if (VersionFromPixelBufferInfo)
  {
    uint64_t Code = VersionFromPixelBufferInfo;
    CFDictionaryRef v43 = 0;
    goto LABEL_107;
  }
  Sunsigned int Int32 = (const void *)FigCFNumberCreateSInt32();
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F1EE60], SInt32);
  if ((v49 - 1) > 4)
  {
    CFDictionaryRef v53 = 0;
    goto LABEL_98;
  }
  *(_DWORD *)bytes = v128;
  values[0] = CFDataCreate(v44, bytes, 4);
  if (values[0])
  {
    keys = @"slmC";
    CFDictionaryRef v53 = CFDictionaryCreate(v44, (const void **)&keys, (const void **)values, 1, MEMORY[0x1E4F1D048], MEMORY[0x1E4F1D540]);
    if (v53)
    {
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F1EE20], v53);
LABEL_98:
      CFAllocatorRef v54 = (const void **)MEMORY[0x1E4F1EDA8];
      if (v48)
      {
        uint64_t v55 = (const void *)FigCFNumberCreateSInt32();
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F1ED90], v55);
        CFDictionarySetValue(Mutable, *v54, @"Slim");
        if (v55) {
          CFRelease(v55);
        }
      }
      else
      {
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F1EDA8], @"Slim");
      }
      uint64_t Code = 0;
      CFDictionaryRef v43 = Mutable;
      CFMutableDictionaryRef Mutable = 0;
      goto LABEL_103;
    }
    CFDictionaryRef v43 = 0;
    uint64_t Code = 4294951895;
  }
  else
  {
    CFDictionaryRef v43 = 0;
    CFDictionaryRef v53 = 0;
    uint64_t Code = 0;
  }
LABEL_103:
  if (SInt32) {
    CFRelease(SInt32);
  }
  if (v53) {
    CFRelease(v53);
  }
LABEL_107:
  if (values[0]) {
    CFRelease(values[0]);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (Code) {
    goto LABEL_356;
  }
  if (!v43)
  {
    CFDataRef v100 = 0;
    LODWORD(Mutable) = 0;
    goto LABEL_364;
  }
  if (*(void *)a1) {
    VideoFormatDescriptiouint64_t n = VTEncoderSessionCreateVideoFormatDescription();
  }
  else {
    VideoFormatDescriptiouint64_t n = CMVideoFormatDescriptionCreate(*(CFAllocatorRef *)(a1 + 24), 0x736C696Du, *(_DWORD *)(a1 + 12), *(_DWORD *)(*(void *)(a1 + 64) + 4), v43, (CMVideoFormatDescriptionRef *)(a1 + 32));
  }
  uint64_t Code = VideoFormatDescription;
  if (VideoFormatDescription) {
    goto LABEL_356;
  }
LABEL_117:
  if ((*(_DWORD *)(a1 + 72) - 1) >= 5 && !*(void *)(*(void *)(a1 + 64) + 136))
  {
    int v58 = malloc_type_calloc(1uLL, 0x50uLL, 0x101004022E95A03uLL);
    *(void *)(*(void *)(a1 + 64) + 136) = v58;
    CreateThreadContext(2, *(void *)(a1 + 12), v58);
  }
  char v59 = 1;
  uint64_t v60 = CVPixelBufferLockBaseAddress(v7, 1uLL);
  if (v60)
  {
    uint64_t Code = v60;
    CFDataRef v100 = 0;
    LODWORD(Mutable) = 0;
    goto LABEL_321;
  }
  if (CVPixelBufferGetPlaneCount(v7) < 2) {
    PlaneCFIndex Count = 1;
  }
  else {
    PlaneCFIndex Count = CVPixelBufferGetPlaneCount(v7);
  }
  uint64_t v62 = *(void *)(a1 + 64);
  *(void *)(v62 + 40) = PlaneCount;
  *(_DWORD *)(v62 + 48) = 1;
  if (CMPhotoPixelFormatContainsYCbCr(PixelFormatType))
  {
    uint64_t v63 = *(void *)(a1 + 64);
    *(_DWORD *)(v63 + 48) = 2;
    if (PixelFormatType > 1952854577)
    {
      if (PixelFormatType > 2016686641)
      {
        if (PixelFormatType > 2019963441)
        {
          if (PixelFormatType == 2019963956) {
            goto LABEL_149;
          }
          int v64 = 2019963442;
        }
        else
        {
          if (PixelFormatType == 2016686642) {
            goto LABEL_149;
          }
          int v64 = 2016687156;
        }
      }
      else if (PixelFormatType > 1953903153)
      {
        if (PixelFormatType == 1953903154) {
          goto LABEL_149;
        }
        int v64 = 1953903668;
      }
      else
      {
        if (PixelFormatType == 1952854578) {
          goto LABEL_149;
        }
        int v64 = 1952855092;
      }
    }
    else if (PixelFormatType > 1936077361)
    {
      if (PixelFormatType > 1937125937)
      {
        if (PixelFormatType == 1937125938) {
          goto LABEL_149;
        }
        int v64 = 1937126452;
      }
      else
      {
        if (PixelFormatType == 1936077362) {
          goto LABEL_149;
        }
        int v64 = 1936077876;
      }
    }
    else
    {
      if (PixelFormatType <= 875836517)
      {
        if (PixelFormatType != 875704934)
        {
          int v64 = 875704950;
          goto LABEL_148;
        }
LABEL_149:
        *(_DWORD *)(v63 + 48) = 1;
        goto LABEL_150;
      }
      if (PixelFormatType == 875836518) {
        goto LABEL_149;
      }
      int v64 = 875836534;
    }
LABEL_148:
    if (PixelFormatType != v64) {
      goto LABEL_150;
    }
    goto LABEL_149;
  }
LABEL_150:
  if (!CVPixelBufferIsPlanar(v7))
  {
    *(void *)(*(void *)(a1 + 64) + 64) = CVPixelBufferGetBaseAddress(v7);
    int BytesPerRow = CVPixelBufferGetBytesPerRow(v7);
    uint64_t v76 = *(void *)(a1 + 64);
    *(_DWORD *)(v76 + 8) = BytesPerRow;
    int v77 = *(_DWORD *)(v76 + 112);
    if (!v77) {
      goto LABEL_255;
    }
    if (PixelFormatType <= 1651847471)
    {
      if (PixelFormatType <= 1278226735)
      {
        if (PixelFormatType > 1278226487)
        {
          if ((PixelFormatType - 1278226488) <= 0x30
            && ((1 << (PixelFormatType - 56)) & 0x1400000000001) != 0)
          {
            goto LABEL_253;
          }
          goto LABEL_341;
        }
        if (PixelFormatType == 825306677 || PixelFormatType == 825437747) {
          goto LABEL_253;
        }
        int v78 = 1111970369;
      }
      else if (PixelFormatType <= 1647589489)
      {
        if ((PixelFormatType - 1278226736) <= 6 && ((1 << (PixelFormatType - 48)) & 0x45) != 0) {
          goto LABEL_253;
        }
        int v78 = 1380411457;
      }
      else
      {
        if (PixelFormatType <= 1650942775)
        {
          if (PixelFormatType != 1647589490)
          {
            if (PixelFormatType == 1647719528)
            {
              unsigned int v83 = (v77 * BytesPerRow) >> 1;
LABEL_254:
              *(void *)(v76 + 64) += v83;
              goto LABEL_255;
            }
            goto LABEL_341;
          }
          goto LABEL_253;
        }
        if (PixelFormatType == 1650942776 || PixelFormatType == 1650943796) {
          goto LABEL_253;
        }
        int v78 = 1651519798;
      }
    }
    else if (PixelFormatType > 1735549491)
    {
      if (PixelFormatType > 1815162993)
      {
        if (PixelFormatType > 1919378231)
        {
          if (PixelFormatType == 1919379252) {
            goto LABEL_253;
          }
          int v78 = 1919378232;
        }
        else
        {
          if (PixelFormatType == 1815162994) {
            goto LABEL_253;
          }
          int v78 = 1815491698;
        }
      }
      else if (PixelFormatType > 1751410031)
      {
        if (PixelFormatType == 1751410032) {
          goto LABEL_253;
        }
        int v78 = 1751411059;
      }
      else
      {
        if (PixelFormatType == 1735549492) {
          goto LABEL_253;
        }
        int v78 = 1735549752;
      }
    }
    else if (PixelFormatType > 1717855599)
    {
      if (PixelFormatType > 1734501175)
      {
        if (PixelFormatType == 1734501176) {
          goto LABEL_253;
        }
        int v78 = 1734505012;
      }
      else
      {
        if (PixelFormatType == 1717855600) {
          goto LABEL_253;
        }
        int v78 = 1717856627;
      }
    }
    else
    {
      if (PixelFormatType <= 1651926375)
      {
        if (PixelFormatType != 1651847472)
        {
          int v78 = 1651925816;
          goto LABEL_252;
        }
LABEL_253:
        unsigned int v83 = v77 * BytesPerRow;
        goto LABEL_254;
      }
      if (PixelFormatType == 1651926376) {
        goto LABEL_253;
      }
      int v78 = 1652056888;
    }
LABEL_252:
    if (PixelFormatType == v78) {
      goto LABEL_253;
    }
LABEL_341:
    uint64_t v94 = FigSignalErrorAt();
LABEL_342:
    uint64_t Code = v94;
    CFDataRef v100 = 0;
    LODWORD(Mutable) = 0;
    goto LABEL_343;
  }
  if (*(void *)(*(void *)(a1 + 64) + 40))
  {
    size_t v65 = 0;
    uint64_t v66 = 64;
    uint64_t v67 = 8;
    while (1)
    {
      *(void *)(*(void *)(a1 + 64) + v66) = CVPixelBufferGetBaseAddressOfPlane(v7, v65);
      int BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v7, v65);
      uint64_t v69 = *(void *)(a1 + 64);
      *(_DWORD *)(v69 + v67) = BytesPerRowOfPlane;
      unsigned int v70 = *(_DWORD *)(v69 + 112);
      if (v70) {
        break;
      }
LABEL_198:
      ++v65;
      v66 += 8;
      v67 += 4;
      if (*(void *)(*(void *)(a1 + 64) + 40) <= v65) {
        goto LABEL_255;
      }
    }
    if (PixelFormatType <= 1937125937)
    {
      if (PixelFormatType <= 1751527983)
      {
        if (PixelFormatType <= 875704949)
        {
          if (PixelFormatType != 875704422 && PixelFormatType != 875704438)
          {
            int v72 = 875704934;
            goto LABEL_193;
          }
          goto LABEL_194;
        }
        if (PixelFormatType == 875704950 || PixelFormatType == 875836518) {
          goto LABEL_194;
        }
        int v72 = 875836534;
      }
      else if (PixelFormatType <= 1936077359)
      {
        if (PixelFormatType == 1751527984 || PixelFormatType == 1882468912) {
          goto LABEL_194;
        }
        int v72 = 1885745712;
      }
      else
      {
        if (PixelFormatType <= 1936077875)
        {
          if (PixelFormatType != 1936077360)
          {
            int v72 = 1936077362;
            goto LABEL_193;
          }
          goto LABEL_194;
        }
        if (PixelFormatType == 1936077876) {
          goto LABEL_194;
        }
        int v72 = 1937125936;
      }
    }
    else if (PixelFormatType > 1953903667)
    {
      if (PixelFormatType <= 2016687155)
      {
        if (PixelFormatType == 1953903668 || PixelFormatType == 2016686640) {
          goto LABEL_194;
        }
        int v72 = 2016686642;
      }
      else
      {
        if (PixelFormatType > 2019963441)
        {
          if (PixelFormatType == 2019963956) {
            goto LABEL_194;
          }
          unsigned __int16 v73 = 12850;
        }
        else
        {
          if (PixelFormatType == 2016687156) {
            goto LABEL_194;
          }
          unsigned __int16 v73 = 12848;
        }
        int v72 = v73 | 0x78660000;
      }
    }
    else
    {
      if (PixelFormatType <= 1952854577)
      {
        if (PixelFormatType != 1937125938 && PixelFormatType != 1937126452)
        {
          unsigned __int16 v71 = 12848;
          goto LABEL_176;
        }
LABEL_194:
        if (v65)
        {
          uint64_t v74 = (void *)(v69 + v66);
          v70 /= *(_DWORD *)(v69 + 48);
        }
        else
        {
          uint64_t v74 = (void *)(v69 + 64);
        }
        *v74 += v70 * BytesPerRowOfPlane;
        goto LABEL_198;
      }
      if (PixelFormatType <= 1953903151)
      {
        if (PixelFormatType != 1952854578)
        {
          unsigned __int16 v71 = 13364;
LABEL_176:
          int v72 = v71 | 0x74660000;
          goto LABEL_193;
        }
        goto LABEL_194;
      }
      if (PixelFormatType == 1953903152) {
        goto LABEL_194;
      }
      int v72 = 1953903154;
    }
LABEL_193:
    if (PixelFormatType != v72)
    {
      CFDataRef v100 = 0;
      LODWORD(Mutable) = 0;
      char v59 = 0;
      uint64_t Code = 4294951891;
      goto LABEL_321;
    }
    goto LABEL_194;
  }
LABEL_255:
  switch(*(_DWORD *)(a1 + 72))
  {
    case 1:
    case 3:
    case 5:
      uint64_t v84 = *(void *)(a1 + 64);
      uint64_t v85 = *(void *)(v84 + 128);
      if (v85)
      {
        *(void *)(v84 + 56) = v85 + 0x80000;
      }
      else
      {
        OSType v86 = CVPixelBufferGetPixelFormatType(v7);
        int v87 = *(_DWORD *)(a1 + 12);
        int v88 = *(_DWORD *)(a1 + 16);
        int v89 = (v87 - 1) & 0xF;
        if (1 - v87 >= 0) {
          int v89 = -((1 - v87) & 0xF);
        }
        uint64_t v90 = v87 - v89 + 15;
        int v91 = (v88 - 1) & 7;
        if (1 - v88 >= 0) {
          int v91 = -((1 - v88) & 7);
        }
        DataSizeFromWidthAndint Height = CMPhotoGetDataSizeFromWidthAndHeight(v86, v90, v88 - v91 + 7);
        if (DataSizeFromWidthAndHeight)
        {
          uint64_t v93 = (void *)(DataSizeFromWidthAndHeight + 0x80000);
LABEL_266:
          *(void *)(*(void *)(a1 + 64) + 56) = v93;
        }
      }
LABEL_268:
      unsigned int v95 = *(__CVBuffer **)(a1 + 48);
      if (v95)
      {
        LODWORD(Mutable) = 1;
        uint64_t v94 = CVPixelBufferLockBaseAddress(v95, 1uLL);
        if (v94) {
          goto LABEL_342;
        }
      }
      else
      {
        LODWORD(Mutable) = 0;
      }
      size_t v96 = *(void *)(*(void *)(a1 + 64) + 56);
      if (!v96) {
        goto LABEL_276;
      }
      CFAllocatorRef v97 = *(const __CFAllocator **)(a1 + 24);
      CFAllocatorRef Allocator = CMMemoryPoolGetAllocator(*(CMMemoryPoolRef *)(a1 + 56));
      uint64_t v99 = CMBlockBufferCreateWithMemoryBlock(v97, 0, v96, Allocator, 0, 0, *(void *)(*(void *)(a1 + 64) + 56), 1u, &blockBufferOut);
      if (v99)
      {
LABEL_288:
        uint64_t Code = v99;
        CFDataRef v100 = 0;
LABEL_343:
        char v59 = 0;
        break;
      }
      CMBlockBufferGetDataPointer(blockBufferOut, 0, 0, 0, &dataPointerOut);
      if (dataPointerOut)
      {
        *(void *)(*(void *)(a1 + 64) + 88) = dataPointerOut;
LABEL_276:
        switch(*(_DWORD *)(a1 + 72))
        {
          case 1:
            uint64_t v99 = SlimXEncodeFrame(*(void *)(a1 + 64), &dataLength);
            if (v99) {
              goto LABEL_288;
            }
            goto LABEL_291;
          case 2:
            uint64_t v99 = YZipEncodeFrame(*(void *)(a1 + 64), (uint64_t *)&dataLength);
            if (v99) {
              goto LABEL_288;
            }
            goto LABEL_291;
          case 3:
            uint64_t v99 = HrlcEncodeFrame(*(void *)(a1 + 64), &dataLength);
            if (v99) {
              goto LABEL_288;
            }
            goto LABEL_291;
          case 4:
            uint64_t v99 = CMBlockBufferCreateEmpty(*(CFAllocatorRef *)(a1 + 24), 0, 0, &v124);
            if (v99) {
              goto LABEL_288;
            }
            uint64_t v99 = UncompressedCopyFrame(*(unsigned int **)(a1 + 64), v7, v124, &dataLength);
            if (v99) {
              goto LABEL_288;
            }
            goto LABEL_291;
          case 5:
            uint64_t v101 = *(void *)(a1 + 64);
            if (!*(_DWORD *)(v101 + 112))
            {
              uint64_t v99 = IntcEncodeFrame(v7, v101, &dataLength);
              if (v99) {
                goto LABEL_288;
              }
LABEL_291:
              CFTypeRef v102 = CMGetAttachment(v7, key, 0);
              if (v102)
              {
                CFDataRef v103 = CFPropertyListCreateData(*(CFAllocatorRef *)(a1 + 24), v102, kCFPropertyListXMLFormat_v1_0, 0, &error);
                if (v103)
                {
                  CFDataRef v100 = v103;
                  unsigned __int8 BytePtr = (UInt8 *)CFDataGetBytePtr(v103);
                  size_t Length = CFDataGetLength(v100);
                  if (*(_DWORD *)(a1 + 72) == 4)
                  {
                    LODWORD(values[0]) = 1635018093;
                    if (!v124)
                    {
                      uint64_t Code = 4294951894;
                      goto LABEL_343;
                    }
                    CFAllocatorRef v106 = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
                    uint64_t appended = CMBlockBufferAppendMemoryBlock(v124, values, 4uLL, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0], 0, 0, 4uLL, 2u);
                    if (appended
                      || (dataLength += 4,
                          uint64_t appended = CMBlockBufferAppendMemoryBlock(v124, BytePtr, Length, v106, 0, 0, Length, 2u),
                          appended))
                    {
LABEL_357:
                      uint64_t Code = appended;
                      goto LABEL_343;
                    }
                  }
                  else
                  {
                    int v108 = dataPointerOut;
                    if (!dataPointerOut)
                    {
LABEL_358:
                      char v59 = 0;
                      uint64_t Code = 4294951894;
                      goto LABEL_321;
                    }
                    dataPointerOut += dataLength;
                    v108[dataLength] = 109;
                    dataPointerOut[1] = 101;
                    dataPointerOut[2] = 116;
                    dataPointerOut[3] = 97;
                    dataPointerOut += 4;
                    dataLength += 4;
                    memcpy(dataPointerOut, BytePtr, Length);
                  }
                  dataLength += Length;
LABEL_305:
                  if (*(_DWORD *)(a1 + 72) == 4)
                  {
LABEL_308:
                    int v109 = *(__CVBuffer **)(a1 + 48);
                    if (v109)
                    {
                      CVPixelBufferUnlockBaseAddress(v109, 1uLL);
                      uint64_t v110 = *(const void **)(a1 + 48);
                      if (v110) {
                        CFRelease(v110);
                      }
                      LODWORD(Mutable) = 0;
                    }
                    CVPixelBufferUnlockBaseAddress(v7, 1uLL);
                    if (*(unsigned char *)(a1 + 40))
                    {
                      if (v7) {
                        CFTypeRef v111 = CFRetain(v7);
                      }
                      else {
                        CFTypeRef v111 = 0;
                      }
                      *(void *)(a1 + 48) = v111;
                    }
                    sampleTimingArray.presentationTimeStamp = *a3;
                    sampleTimingArray.decodeTimeStamp = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
                    *(_OWORD *)&sampleTimingArray.duration.value = *(_OWORD *)a4;
                    sampleTimingArray.duration.epoch = *(void *)(a4 + 16);
                    char v59 = 1;
                    uint64_t v112 = CMSampleBufferCreate(*(CFAllocatorRef *)(a1 + 24), v124, 1u, 0, 0, *(CMFormatDescriptionRef *)(a1 + 32), 1, 1, &sampleTimingArray, 1, &dataLength, (CMSampleBufferRef *)&cf);
                    if (v112)
                    {
                      uint64_t Code = v112;
                      goto LABEL_321;
                    }
                    uint64_t Code = 0;
                    if (a6)
                    {
                      *a6 = cf;
                      CFTypeRef cf = 0;
                    }
                    goto LABEL_320;
                  }
                  if (blockBufferOut)
                  {
                    uint64_t appended = CMBlockBufferCreateWithBufferReference(*(CFAllocatorRef *)(a1 + 24), blockBufferOut, 0, dataLength, 1u, &v124);
                    if (appended) {
                      goto LABEL_357;
                    }
                    goto LABEL_308;
                  }
                  goto LABEL_358;
                }
                if (error)
                {
                  uint64_t Code = CFErrorGetCode(error);
                  CFDataRef v100 = 0;
                  if (Code) {
                    goto LABEL_343;
                  }
                  goto LABEL_305;
                }
              }
              CFDataRef v100 = 0;
              goto LABEL_305;
            }
            CFDataRef v100 = 0;
            char v59 = 0;
            uint64_t Code = 4294951891;
            break;
          default:
            uint64_t v99 = SlimEncodeFrame(*(void *)(a1 + 64));
            if (v99) {
              goto LABEL_288;
            }
            if (dataLength) {
              goto LABEL_291;
            }
            CFDataRef v100 = 0;
            goto LABEL_358;
        }
      }
      else
      {
        CFDataRef v100 = 0;
        char v59 = 0;
        uint64_t Code = 4294951893;
      }
      break;
    case 2:
      values[0] = 0;
      uint64_t v94 = YZipEncodeFindDataLength(*(void *)(a1 + 64), (uint64_t *)values);
      if (v94) {
        goto LABEL_342;
      }
      uint64_t v93 = values[0];
      goto LABEL_266;
    case 4:
      *(void *)(*(void *)(a1 + 64) + 56) = 0;
      goto LABEL_268;
    default:
      goto LABEL_268;
  }
LABEL_321:
  if (error) {
    CFRelease(error);
  }
  if (v100) {
    CFRelease(v100);
  }
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (v124) {
    CFRelease(v124);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v43) {
    CFRelease(v43);
  }
  if (v118) {
    CFRelease(v118);
  }
  if ((v59 & 1) == 0) {
    CVPixelBufferUnlockBaseAddress(v7, 1uLL);
  }
  if (Mutable) {
    CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 48), 1uLL);
  }
  return Code;
}

void SlimVideoEncoder_SetPropertyInternal(uint64_t a1, uint64_t a2, const void *a3)
{
}

void _setProperty(uint64_t a1, uint64_t a2, const void *a3)
{
  if (FigCFEqual())
  {
    if (a3)
    {
      CFTypeID v5 = CFGetTypeID(a3);
      if (v5 == CFBooleanGetTypeID())
      {
        *(_DWORD *)(*(void *)(a1 + 64) + 116) = CFBooleanGetValue((CFBooleanRef)a3);
        return;
      }
    }
    goto LABEL_37;
  }
  if (FigCFEqual())
  {
    if (a3)
    {
      CFTypeID v6 = CFGetTypeID(a3);
      if (v6 == CFNumberGetTypeID())
      {
        CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, (void *)(a1 + 72));
        if (*(void *)a1)
        {
          CFTypeRef cf = 0;
          if (!_createPixelBufferAttributesDictionaryForEncoder(*(const __CFAllocator **)(a1 + 24), *(unsigned int *)(a1 + 12), *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 76), *(_DWORD *)(a1 + 72), &cf))
          {
            VTEncoderSessionSetPixelBufferAttributes();
            if (cf) {
              CFRelease(cf);
            }
          }
        }
        return;
      }
    }
LABEL_37:
    FigSignalErrorAt();
    return;
  }
  if (FigCFEqual())
  {
    if (!a3) {
      goto LABEL_37;
    }
    CFTypeID v7 = CFGetTypeID(a3);
    if (v7 != CFNumberGetTypeID()) {
      goto LABEL_37;
    }
    LODWORD(cf) = 0;
    CFNumberGetValue((CFNumberRef)a3, kCFNumberIntType, &cf);
    if (cf <= 0xF)
    {
      *(_DWORD *)(*(void *)(a1 + 64) + 8352) = cf;
      return;
    }
    goto LABEL_28;
  }
  if (FigCFEqual())
  {
    if (!a3) {
      goto LABEL_37;
    }
    CFTypeID v8 = CFGetTypeID(a3);
    if (v8 != CFNumberGetTypeID()) {
      goto LABEL_37;
    }
    LODWORD(cf) = 0;
    CFNumberGetValue((CFNumberRef)a3, kCFNumberIntType, &cf);
    if (cf <= 0xFF)
    {
      *(_DWORD *)(*(void *)(a1 + 64) + 8356) = cf;
      return;
    }
LABEL_28:
    FigSignalErrorAt();
    return;
  }
  if (FigCFEqual())
  {
    _setPropertyInputPixelFormat(a1, (const __CFNumber *)a3);
  }
  else if (FigCFEqual())
  {
    _setPropertyQuality(a1, (const __CFNumber *)a3);
  }
  else
  {
    if (!FigCFEqual()) {
      goto LABEL_37;
    }
    _setPropertyTotalByteBudget(a1, (const __CFNumber *)a3);
  }
}

uint64_t SlimVideoEncoder_CopyPixelBufferAttributesInternal(uint64_t a1, CFTypeRef *a2)
{
  unint64_t v2 = *(const void **)(a1 + 112);
  if (v2)
  {
    *a2 = CFRetain(v2);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t RegisterSlimVideoEncoderSessionClass()
{
  sSlimVideoEncoderSessionClass = 0;
  *(void *)algn_1E98CFA48 = "SlimVideoEncoderSessionClass";
  qword_1E98CFA50 = (uint64_t)SlimVideoEncoderSessionClass_Init;
  unk_1E98CFA58 = 0;
  qword_1E98CFA68 = 0;
  unk_1E98CFA70 = 0;
  qword_1E98CFA60 = (uint64_t)SlimVideoEncoderSessionClass_Finalize;
  qword_1E98CFA78 = (uint64_t)SlimVideoEncoderSessionClass_CopyFormattingDesc;
  unk_1E98CFA80 = 0;
  uint64_t result = _CFRuntimeRegisterClass();
  sSlimVideoEncoderSessionCFTypeID TypeID = result;
  return result;
}

double SlimVideoEncoderSessionClass_Init(uint64_t a1)
{
  *(void *)(a1 + 112) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void SlimVideoEncoderSessionClass_Finalize(uint64_t a1)
{
}

__CFString *SlimVideoEncoderSessionClass_CopyFormattingDesc(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<SlimVideoEncoder %p>", a1);
  return Mutable;
}

void _finalizeEncoderStorage(uint64_t a1)
{
  unint64_t v2 = *(uint64_t **)(a1 + 64);
  if (v2)
  {
    if (v2[17])
    {
      DestroyThreadContext(v2[17]);
      free(*(void **)(*(void *)(a1 + 64) + 136));
      unint64_t v2 = *(uint64_t **)(a1 + 64);
      v2[17] = 0;
    }
    free(v2);
    *(void *)(a1 + 64) = 0;
  }
  uint64_t v3 = *(OpaqueCMMemoryPool **)(a1 + 56);
  if (v3)
  {
    CMMemoryPoolFlush(v3);
    CMMemoryPoolInvalidate(*(CMMemoryPoolRef *)(a1 + 56));
    uint64_t v4 = *(const void **)(a1 + 56);
    if (v4) {
      CFRelease(v4);
    }
    *(void *)(a1 + 56) = 0;
  }
  CFTypeID v5 = *(const void **)(a1 + 96);
  if (v5) {
    CFRelease(v5);
  }
  CFTypeID v6 = *(const void **)(a1 + 88);
  if (v6) {
    CFRelease(v6);
  }
  *(void *)a1 = 0;
  CFTypeID v7 = *(const void **)(a1 + 32);
  if (v7) {
    CFRelease(v7);
  }
  *(void *)(a1 + 32) = 0;
  CFTypeID v8 = *(const void **)(a1 + 48);
  if (v8) {
    CFRelease(v8);
  }
  *(void *)(a1 + 48) = 0;
}

uint64_t _createPixelBufferAttributesDictionaryForEncoder(const __CFAllocator *a1, uint64_t a2, int a3, int a4, int a5, void *a6)
{
  if (a5 < 6)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!Mutable) {
      return 0;
    }
    CFMutableDictionaryRef v12 = Mutable;
    CFMutableArrayRef v13 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    if (!v13)
    {
      uint64_t v21 = 0;
LABEL_31:
      CFRelease(v12);
      return v21;
    }
    CFMutableArrayRef v14 = v13;
    for (uint64_t i = 0; i != 248; i += 4)
    {
      CFNumberRef v16 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)&slimPixelFormatList + i);
      if (!v16)
      {
        CFRelease(v12);
        CFRelease(v14);
        return 0;
      }
      CFNumberRef v17 = v16;
      CFArrayAppendValue(v14, v16);
      CFRelease(v17);
    }
    CFDictionaryAddValue(v12, (const void *)*MEMORY[0x1E4F24D70], v14);
    CFRelease(v14);
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    if (a5 > 5)
    {
LABEL_28:
      uint64_t PixelBufferAttributesWithIOSurfaceSupport = FigCreatePixelBufferAttributesWithIOSurfaceSupport();
      uint64_t v21 = PixelBufferAttributesWithIOSurfaceSupport;
      if (a6)
      {
        if (!PixelBufferAttributesWithIOSurfaceSupport) {
          *a6 = 0;
        }
      }
      goto LABEL_31;
    }
    if (((1 << a5) & 0x26) == 0)
    {
      if (((1 << a5) & 0x18) == 0) {
        goto LABEL_28;
      }
LABEL_27:
      FigCFDictionarySetInt32();
      goto LABEL_28;
    }
    unsigned int v18 = (a3 + 3) & 0xFFFFFFFC;
    if (a4 <= 1734505011)
    {
      if (a4 <= 1647589489)
      {
        if (a4 == 1111970369 || a4 == 1380411457) {
          goto LABEL_26;
        }
        goto LABEL_33;
      }
      if (a4 == 1647589490) {
        goto LABEL_26;
      }
      int v19 = 1650943796;
    }
    else if (a4 <= 1815162993)
    {
      if (a4 == 1734505012)
      {
LABEL_25:
        unsigned int v18 = (a3 + 7) & 0xFFFFFFF8;
        goto LABEL_26;
      }
      int v19 = 1735549492;
    }
    else
    {
      if (a4 == 1815162994 || a4 == 1815491698) {
        goto LABEL_26;
      }
      int v19 = 1919379252;
    }
    if (a4 == v19) {
      goto LABEL_25;
    }
LABEL_33:
    if (a4 != 1651519798)
    {
      int32x4_t v23 = vdupq_n_s32(a4);
      if (vaddvq_s16((int16x8_t)vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v23, (int32x4_t)xmmword_1AB9E2CF0), (int16x8_t)vceqq_s32(v23, (int32x4_t)xmmword_1AB9E2D00)), (int8x16_t)xmmword_1AB9E2D10)))goto LABEL_25; {
    }
      }
    if (a4 > 1735549751)
    {
      if (a4 == 1919378232) {
        goto LABEL_25;
      }
      int v24 = 1735549752;
    }
    else
    {
      if (a4 == 1650942776) {
        goto LABEL_25;
      }
      int v24 = 1734501176;
    }
    if (a4 == v24) {
      goto LABEL_25;
    }
LABEL_26:
    CMPhotoGetBytesPerPixelForPixelFormat(a4);
    FigCFDictionarySetInt32();
    if (v18 == a3) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  return FigSignalErrorAt();
}

uint64_t _setPropertyInputPixelFormat(uint64_t a1, const __CFNumber *cf)
{
  if (cf && (CFTypeID v4 = CFGetTypeID(cf), v4 == CFNumberGetTypeID()))
  {
    CFNumberGetValue(cf, kCFNumberSInt32Type, (void *)(a1 + 76));
    if (!*(void *)a1) {
      return 0;
    }
    CFTypeRef cfa = 0;
    uint64_t v5 = _createPixelBufferAttributesDictionaryForEncoder(*(const __CFAllocator **)(a1 + 24), *(unsigned int *)(a1 + 12), *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 76), *(_DWORD *)(a1 + 72), &cfa);
    if (!v5)
    {
      VTEncoderSessionSetPixelBufferAttributes();
      if (cfa) {
        CFRelease(cfa);
      }
    }
    return v5;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

double _setPropertyQuality(uint64_t a1, const __CFNumber *cf)
{
  if (cf && (CFTypeID v4 = CFGetTypeID(cf), v4 == CFNumberGetTypeID()))
  {
    double valuePtr = 0.0;
    CFNumberGetValue(cf, kCFNumberDoubleType, &valuePtr);
    double v5 = valuePtr;
    if (valuePtr < 0.0 || valuePtr > 1.0)
    {
      FigSignalErrorAt();
    }
    else
    {
      *(double *)(a1 + 80) = valuePtr;
      double result = 7.0 - floor(v5 * 7.0);
      *(_DWORD *)(*(void *)(a1 + 64) + 120) = (int)result;
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  return result;
}

uint64_t _setPropertyTotalByteBudget(uint64_t a1, const __CFNumber *cf)
{
  if (cf && (CFTypeID v4 = CFGetTypeID(cf), v4 == CFNumberGetTypeID()))
  {
    CFNumberGetValue(cf, kCFNumberSInt64Type, (void *)(*(void *)(a1 + 64) + 128));
    *(_DWORD *)(*(void *)(a1 + 64) + 120) = -1;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t CMPhotoCompressionPluginCreate(const void *a1, const void *a2, const void *a3, const void *a4, uint64_t a5, const __CFDictionary *a6, uint64_t a7, uint64_t a8, void *a9)
{
  pthread_once(&_checkFigNoteTraceOnce_onceToken_1, (void (*)(void))_registerFigNoteTrace_1);
  CFDictionaryRef v15 = 0;
  uint64_t v16 = 4294950306;
  if (!a7 || !a9) {
    goto LABEL_38;
  }
  CFDictionaryRef v15 = (char *)malloc_type_calloc(1uLL, 0xA0uLL, 0x10E0040AB781B01uLL);
  if (!v15)
  {
    uint64_t v16 = 4294950305;
    goto LABEL_38;
  }
  int v17 = *(_DWORD *)(a5 + 4);
  int IsTileEncoderAvailable = CMPhotoIsTileEncoderAvailable(v17);
  __int16 v35 = 0;
  char v34 = 0;
  if (!a6) {
    goto LABEL_10;
  }
  CMPhotoCFDictionaryGetBooleanIfPresent(a6, @"PreferSoftwareCodec", (unsigned char *)&v35 + 1);
  CMPhotoCFDictionaryGetBooleanIfPresent(a6, @"RequireHardwareCodec", &v35);
  CMPhotoCFDictionaryGetBooleanIfPresent(a6, @"UseVTCompression", &v34);
  int v33 = 0;
  int IntIfPresent = CMPhotoCFDictionaryGetIntIfPresent(a6, @"QualityControllerType", &v33);
  if ((_BYTE)v35 && IntIfPresent && v33 == 5) {
    goto LABEL_40;
  }
  if ((_BYTE)v35)
  {
    char v20 = 0;
    HIBYTE(v35) = 0;
  }
  else
  {
LABEL_10:
    char v20 = 1;
  }
  switch(v17)
  {
    case 1936484717:
      if ((v20 & 1) == 0) {
        goto LABEL_37;
      }
      CFTypeRef v22 = &CMPhotoCompressionPluginClassSlim;
      break;
    case 1785750887:
      CFTypeRef v22 = &CMPhotoCompressionPluginClassJPEG;
      break;
    case 1752589105:
      if (CMPhotoSupportsHEVCEncode())
      {
        if (v34) {
          BOOL v21 = 1;
        }
        else {
          BOOL v21 = IsTileEncoderAvailable == 0;
        }
        if (v21) {
          CFTypeRef v22 = &CMPhotoCompressionPluginClassVideoToolbox;
        }
        else {
          CFTypeRef v22 = &CMPhotoCompressionPluginClassVideoToolbox_Tile;
        }
        break;
      }
LABEL_40:
      uint64_t v30 = FigSignalErrorAt();
      if (v30)
      {
        uint64_t v16 = v30;
        goto LABEL_38;
      }
      CFTypeRef v22 = 0;
      int32x4_t v23 = (uint64_t (***)())(v15 + 32);
      goto LABEL_25;
    default:
LABEL_37:
      uint64_t v16 = 4294950298;
      goto LABEL_38;
  }
  int32x4_t v23 = (uint64_t (***)())(v15 + 32);
LABEL_25:
  *int32x4_t v23 = v22;
  if (a1) {
    CFTypeRef v24 = CFRetain(a1);
  }
  else {
    CFTypeRef v24 = 0;
  }
  *(void *)CFDictionaryRef v15 = v24;
  if (a2) {
    CFTypeRef v25 = CFRetain(a2);
  }
  else {
    CFTypeRef v25 = 0;
  }
  *((void *)v15 + 1) = v25;
  CFTypeRef v26 = a3;
  if (a3) {
    CFTypeRef v26 = CFRetain(a3);
  }
  *((void *)v15 + 2) = v26;
  CFTypeRef v27 = a4;
  if (a4) {
    CFTypeRef v27 = CFRetain(a4);
  }
  *((void *)v15 + 3) = v27;
  v15[48] = *(unsigned char *)(a5 + 8);
  *((int32x2_t *)v15 + 5) = vrev64_s32(*(int32x2_t *)a5);
  *((void *)v15 + 16) = a7;
  *((void *)v15 + 17) = a8;
  long long v28 = *(_OWORD *)(a5 + 12);
  *(void *)(v15 + 100) = *(void *)(a5 + 28);
  *(_OWORD *)(v15 + 84) = v28;
  *((_DWORD *)v15 + 13) = *(_DWORD *)(a5 + 36);
  v15[56] = *(unsigned char *)(a5 + 40);
  *((_DWORD *)v15 + 20) = *(_DWORD *)(a5 + 64);
  *((_DWORD *)v15 + 15) = *(_DWORD *)(a5 + 44);
  *((_OWORD *)v15 + 4) = *(_OWORD *)(a5 + 48);
  *((void *)v15 + 14) = *(void *)(a5 + 72);
  v15[120] = *(unsigned char *)(a5 + 80);
  uint64_t v16 = (**((uint64_t (***)(void *, const __CFDictionary *))v15 + 4))(v15, a6);
  if (!v16)
  {
    *a9 = v15;
    CFDictionaryRef v15 = 0;
  }
LABEL_38:
  CMPhotoCompressionPluginDispose((CFTypeRef *)v15);
  return v16;
}

void CMPhotoCompressionPluginDispose(CFTypeRef *a1)
{
  if (a1)
  {
    unint64_t v2 = (void (**)(CFTypeRef *))a1[4];
    if (v2) {
      v2[2](a1);
    }
    if (*a1) {
      CFRelease(*a1);
    }
    CFTypeRef v3 = a1[1];
    if (v3) {
      CFRelease(v3);
    }
    CFTypeRef v4 = a1[2];
    if (v4) {
      CFRelease(v4);
    }
    CFTypeRef v5 = a1[3];
    if (v5) {
      CFRelease(v5);
    }
    free(a1);
  }
}

uint64_t CMPhotoCompressionPluginPrepare(uint64_t a1)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1) {
    uint64_t v2 = *(void *)(a1 + 32);
  }
  else {
    uint64_t v2 = 0;
  }
  if (!*(void *)(v2 + 24)) {
    return 0;
  }
  if (v1) {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  else {
    uint64_t v3 = 0;
  }
  return (*(uint64_t (**)(void))(v3 + 24))();
}

uint64_t CMPhotoCompressionPluginEncode(uint64_t a1, __CVBuffer *a2, uint64_t a3, void *a4, uint64_t *a5, int a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    return 4294950306;
  }
  if (*((_OWORD *)a4 + 1) == 0)
  {
    *a4 = vcvtad_u64_f64(CMPhotoGetPixelBufferCLAPAsRect(a2));
    a4[1] = vcvtad_u64_f64(v16);
    a4[2] = vcvtad_u64_f64(v17);
    a4[3] = vcvtad_u64_f64(v18);
  }
  uint64_t v19 = *a5;
  if (a6)
  {
    v19 += *a4;
    uint64_t v20 = a5[1] + a4[1];
    *a5 = v19;
    a5[1] = v20;
  }
  else
  {
    uint64_t v20 = a5[1];
  }
  if (!(v19 | v20) && *((_OWORD *)a5 + 1) == 0)
  {
    long long v21 = *((_OWORD *)a4 + 1);
    *(_OWORD *)a5 = *(_OWORD *)a4;
    *((_OWORD *)a5 + 1) = v21;
  }
  if (*(void *)(a1 + 32)) {
    uint64_t v22 = *(void *)(a1 + 32);
  }
  else {
    uint64_t v22 = 0;
  }
  int32x4_t v23 = *(uint64_t (**)(uint64_t, __CVBuffer *, uint64_t, _OWORD *, _OWORD *, uint64_t, uint64_t))(v22 + 32);
  long long v24 = *((_OWORD *)a4 + 1);
  v28[0] = *(_OWORD *)a4;
  v28[1] = v24;
  long long v25 = *((_OWORD *)a5 + 1);
  v27[0] = *(_OWORD *)a5;
  v27[1] = v25;
  return v23(a1, a2, a3, v28, v27, a7, a8);
}

uint64_t CMPhotoCompressionPluginCompleteEncodes(uint64_t a1)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1) {
    uint64_t v2 = *(void *)(a1 + 32);
  }
  else {
    uint64_t v2 = 0;
  }
  if (!*(void *)(v2 + 40)) {
    return 4294950302;
  }
  if (v1) {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  else {
    uint64_t v3 = 0;
  }
  return (*(uint64_t (**)(void))(v3 + 40))();
}

uint64_t CMPhotoCompressionPluginPixelTransfer(uint64_t a1, uint64_t a2, _OWORD *a3, _OWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8) {
    uint64_t v9 = *(void *)(a1 + 32);
  }
  else {
    uint64_t v9 = 0;
  }
  if (!*(void *)(v9 + 48)) {
    return 4294950302;
  }
  CFDictionaryRef v10 = *(uint64_t (**)(uint64_t, uint64_t, _OWORD *, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 48);
  long long v11 = a3[1];
  v15[0] = *a3;
  v15[1] = v11;
  long long v12 = a4[1];
  v14[0] = *a4;
  v14[1] = v12;
  return v10(a1, a2, v15, v14, a5, a6, a7, a8);
}

uint64_t CMPhotoCompressionPluginCanBeReused(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7, uint64_t a8)
{
  char v16 = 0;
  if (!a1) {
    return 4294950306;
  }
  uint64_t v8 = *(void *)(a1 + 32);
  if (!v8) {
    return 4294950306;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t))(v8 + 8);
  if (!v9) {
    return 4294950302;
  }
  long long v11 = *(_OWORD *)(a2 + 48);
  _OWORD v14[2] = *(_OWORD *)(a2 + 32);
  v14[3] = v11;
  v14[4] = *(_OWORD *)(a2 + 64);
  uint64_t v15 = *(void *)(a2 + 80);
  long long v12 = *(_OWORD *)(a2 + 16);
  v14[0] = *(_OWORD *)a2;
  v14[1] = v12;
  uint64_t result = v9(a1, v14, a3, a4, a5, a6, &v16, a8);
  if (a7)
  {
    if (!result) {
      *a7 = v16;
    }
  }
  return result;
}

uint64_t CMPhotoCompressionPluginCopyReconstructionPixelBufferAttributes(uint64_t a1)
{
  if (a1 && (uint64_t v1 = *(void *)(a1 + 32)) != 0) {
    return (*(uint64_t (**)(void))(v1 + 56))();
  }
  else {
    return 4294950306;
  }
}

uint64_t SlimCompressionPluginClass_create(uint64_t a1, const __CFDictionary *a2)
{
  pthread_once(&_checkFigNoteTraceOnce_onceToken_2, (void (*)(void))_registerFigNoteTrace_2);
  int v20 = -1;
  int v21 = -1;
  int v18 = 9;
  unsigned int v19 = 2;
  int v17 = 0;
  if (*(_DWORD *)(a1 + 40) == 1936484717)
  {
    CFTypeRef v4 = (char *)malloc_type_calloc(1uLL, 0x88uLL, 0x10E0040A9A32FFAuLL);
    if (!v4) {
      return 4294950305;
    }
    CFTypeRef v5 = v4;
    uint64_t v6 = 0;
    unint64_t v7 = *(void *)(a1 + 112);
    if (v7 >= 4) {
      LODWORD(v7) = 4;
    }
    if (v7 <= 1) {
      LODWORD(v7) = 1;
    }
    *((_DWORD *)v4 + 12) = v7;
    uint64_t v8 = (uint64_t *)(v4 + 16);
    do
    {
      Sessiouint64_t n = SlimVideoEncoder_CreateSession(*(void *)a1, v8);
      if (Session)
      {
        uint64_t v14 = Session;
        goto LABEL_26;
      }
      ++v6;
      ++v8;
    }
    while (v6 < *((int *)v5 + 12));
    *((_DWORD *)v5 + 13) = 0;
    if (a2)
    {
      if (CMPhotoCFDictionaryGetIntIfPresent(a2, @"QualityControllerType", &v18)) {
        CFStringRef Value = CFDictionaryGetValue(a2, @"QualityControllerParameters");
      }
      else {
        CFStringRef Value = 0;
      }
      CMPhotoCFDictionaryGetIntIfPresent(a2, @"SlimCodecFlavor", &v19);
      if (v19 > 6
        || (CMPhotoCFDictionaryGetIntIfPresent(a2, @"SlimXBitShift", &v21), (v21 - 16) < 0xFFFFFFEF)
        || (CMPhotoCFDictionaryGetIntIfPresent(a2, @"SlimHrlcRunLengthValue", &v20),
            (v20 - 256) < 0xFFFFFEFF))
      {
        uint64_t v14 = 4294950306;
LABEL_26:
        memset(v16, 0, 144);
        v16[9] = (unint64_t)v5;
        SlimCompressionPluginClass_dispose((uint64_t)v16);
        return v14;
      }
      CMPhotoCFDictionaryGetBooleanIfPresent(a2, @"SyncEncode", v5 + 72);
      CMPhotoCFDictionaryGetInt32IfPresent(a2, @"ThreadPriority", &v17);
      *((_DWORD *)v5 + 28) = v18;
      if (Value) {
        CFTypeRef v11 = CFRetain(Value);
      }
      else {
        CFTypeRef v11 = 0;
      }
    }
    else
    {
      CFTypeRef v11 = 0;
      *((_DWORD *)v5 + 28) = 9;
    }
    *((void *)v5 + 15) = v11;
    unsigned int v12 = v19;
    *((_DWORD *)v5 + 15) = v20;
    *((_DWORD *)v5 + 16) = v12;
    *((_DWORD *)v5 + 14) = v21;
    if (v5[72]
      || (uint64_t TargetingPThreadRootQueueWithPriority = FigDispatchQueueCreateTargetingPThreadRootQueueWithPriority(),
          (*((void *)v5 + 10) = TargetingPThreadRootQueueWithPriority) != 0))
    {
      uint64_t v14 = 0;
      *(void *)(a1 + 144) = v5;
      return v14;
    }
    uint64_t v14 = 4294950305;
    goto LABEL_26;
  }
  return FigSignalErrorAt();
}

void SlimCompressionPluginClass_dispose(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(void *)(a1 + 144);
    uint64_t v2 = *(NSObject **)(v1 + 80);
    if (v2)
    {
      dispatch_barrier_sync(v2, &__block_literal_global_9);
      uint64_t v3 = *(NSObject **)(v1 + 80);
      if (v3) {
        dispatch_release(v3);
      }
    }
    for (uint64_t i = 16; i != 48; i += 8)
    {
      CFTypeRef v5 = *(const void **)(v1 + i);
      if (v5) {
        CFRelease(v5);
      }
    }
    CMPhotoVideoQualityControllerDispose(*(CFTypeRef **)(v1 + 128));
    uint64_t v6 = *(const void **)(v1 + 120);
    if (v6) {
      CFRelease(v6);
    }
    free((void *)v1);
  }
}

uint64_t SlimCompressionPluginClass_prepare(uint64_t a1, unint64_t a2, unint64_t a3)
{
  CFTypeRef cf = 0;
  unsigned int v19 = 0;
  if (!a1)
  {
    uint64_t v8 = 4294950306;
    goto LABEL_39;
  }
  if (a2 | a3)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(*(CFAllocatorRef *)a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      uint64_t v7 = *(void *)(a1 + 144);
      if (v7)
      {
        CMPhotoVideoQualityControllerDispose(*(CFTypeRef **)(v7 + 128));
        *(void *)(v7 + 128) = 0;
        uint64_t v8 = 4294950190;
        if (!(a2 >> 31) && !(a3 >> 31))
        {
          uint64_t v9 = (_DWORD *)MEMORY[0x1E4F1EBA8];
          if (*MEMORY[0x1E4F1EBA8] == 1) {
            kdebug_trace();
          }
          if (*(int *)(v7 + 48) < 1)
          {
LABEL_13:
            uint64_t started = CMPhotoVideoQualityControllerCreate(*(const void **)a1, *(_DWORD *)(a1 + 60), *(_DWORD *)(v7 + 112), a2, a3, *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(v7 + 120), *(_DWORD *)(a1 + 40), *(unsigned char *)(a1 + 48), &v19);
            if (!started)
            {
              uint64_t started = CMPhotoVideoQualityControllerSetSessionProperties((uint64_t)v19);
              if (!started)
              {
                int v12 = *(_DWORD *)(v7 + 56);
                if (v12 != -1) {
                  CMPhotoCFDictionarySetInt(Mutable, @"SlimXBitShift", v12);
                }
                int v13 = *(_DWORD *)(v7 + 60);
                if (v13 != -1) {
                  CMPhotoCFDictionarySetInt(Mutable, @"SlimHrlcRunLengthValue", v13);
                }
                CMPhotoCFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E4F44980], *(_DWORD *)(a1 + 44));
                int v14 = 0;
                switch(*(_DWORD *)(v7 + 64))
                {
                  case 0:
                  case 2:
                    int v14 = 1;
                    goto LABEL_26;
                  case 1:
                    goto LABEL_26;
                  case 3:
                    int v14 = 2;
                    goto LABEL_26;
                  case 4:
                    CMPhotoCFDictionarySetInt(Mutable, @"InternalCodecType", 3);
                    if (*(_DWORD *)(v7 + 60) == -1) {
                      goto LABEL_43;
                    }
                    goto LABEL_27;
                  case 5:
                    int v14 = 4;
                    goto LABEL_26;
                  case 6:
                    int v14 = 5;
LABEL_26:
                    CMPhotoCFDictionarySetInt(Mutable, @"InternalCodecType", v14);
LABEL_27:
                    if (*(int *)(v7 + 48) < 1) {
                      goto LABEL_31;
                    }
                    uint64_t v15 = 0;
                    break;
                  default:
                    goto LABEL_43;
                }
                while (1)
                {
                  uint64_t v16 = *(void *)(v7 + 16 + 8 * v15);
                  context[0] = 0;
                  context[1] = v16;
                  CFDictionaryApplyFunction(Mutable, (CFDictionaryApplierFunction)_slimEncoderSessionSetOneProperty, context);
                  uint64_t v8 = LODWORD(context[0]);
                  if (LODWORD(context[0])) {
                    goto LABEL_35;
                  }
                  if (++v15 >= *(int *)(v7 + 48))
                  {
LABEL_31:
                    uint64_t started = SlimVideoEncoder_CopyPixelBufferAttributesInternal(*(void *)(v7 + 16), &cf);
                    if (started) {
                      break;
                    }
                    if (*v9 == 1) {
                      kdebug_trace();
                    }
                    CMPhotoCFDictionaryGetSizeIfPresent((const __CFDictionary *)cf, (const void *)*MEMORY[0x1E4F24C98], (void *)(v7 + 88));
                    CMPhotoPixelBufferAttributesGetExtendedPixels((const __CFDictionary *)cf, 0, (void *)(v7 + 96), 0, (void *)(v7 + 104));
                    uint64_t v8 = 0;
                    *(void *)uint64_t v7 = a2;
                    *(void *)(v7 + 8) = a3;
                    *(void *)(v7 + 128) = v19;
                    unsigned int v19 = 0;
                    goto LABEL_35;
                  }
                }
              }
            }
          }
          else
          {
            uint64_t v10 = 0;
            while (1)
            {
              uint64_t started = SlimVideoEncoder_StartSessionInternal(*(const void **)a1, a2 | (a3 << 32), *(void *)(v7 + 16 + 8 * v10));
              if (started) {
                break;
              }
              if (++v10 >= *(int *)(v7 + 48)) {
                goto LABEL_13;
              }
            }
          }
          uint64_t v8 = started;
        }
      }
      else
      {
        uint64_t v8 = 4294950194;
      }
    }
    else
    {
      uint64_t v8 = 4294950305;
    }
  }
  else
  {
    CFMutableDictionaryRef Mutable = 0;
LABEL_43:
    uint64_t v8 = 4294950306;
  }
LABEL_35:
  if (cf) {
    CFRelease(cf);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
LABEL_39:
  CMPhotoVideoQualityControllerDispose((CFTypeRef *)v19);
  return v8;
}

uint64_t SlimCompressionPluginClass_encode(uint64_t a1, __CVBuffer *a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7)
{
  CFTypeRef cf = 0;
  if (!a1) {
    return 4294950306;
  }
  uint64_t v8 = *(void *)(a1 + 144);
  if (!v8)
  {
    uint64_t v24 = 4294950194;
    goto LABEL_29;
  }
  unint64_t v12 = *(void *)(v8 + 8);
  unint64_t v13 = a5[2];
  unint64_t v14 = a5[3];
  if (*(void *)v8 != v13 || v12 != v14)
  {
    uint64_t v16 = a4[1];
    uint64_t v17 = a5[1];
    if (*a4 != *a5 || v16 != v17)
    {
      unint64_t v19 = v16 + a4[3] - v17;
      if (*(void *)v8 == v13 && v19 <= v12 && v14 < v12) {
        goto LABEL_21;
      }
      uint64_t v22 = FigSignalErrorAt();
LABEL_25:
      uint64_t v24 = v22;
      goto LABEL_29;
    }
    uint64_t v22 = SlimCompressionPluginClass_prepare(a1, v13, v14);
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_21:
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  if (*(unsigned char *)(v8 + 72))
  {
    _createSlimEncodeFrameProperties(a5[1], a5[3], *(CFAllocatorRef *)a1, (__CFDictionary **)&cf);
    uint64_t v23 = *(void *)(v8 + 8 * *(int *)(v8 + 52) + 16);
    CMTime v33 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    CMTime v32 = v33;
    uint64_t v22 = SlimVideoEncoder_EncodeFrameInternal(v23, a2, &v33, (long long *)&v32.value, (uint64_t)cf, (void (*)(uint64_t, uint64_t, uint64_t, CFTypeRef))SlimCompressionPluginClass_callback, a1, a7);
    if (v22) {
      goto LABEL_25;
    }
    goto LABEL_28;
  }
  long long v25 = (char *)malloc_type_calloc(1uLL, 0x68uLL, 0x10A00401229A369uLL);
  if (v25)
  {
    uint64_t v26 = a5[3];
    uint64_t v27 = a5[1];
    *(void *)long long v25 = *(void *)(v8 + 8 * *(int *)(v8 + 52) + 16);
    *((void *)v25 + 1) = a2;
    *((void *)v25 + 2) = v26;
    uint64_t v28 = MEMORY[0x1E4F1F9F8];
    long long v29 = *MEMORY[0x1E4F1F9F8];
    *(_OWORD *)(v25 + 24) = *MEMORY[0x1E4F1F9F8];
    uint64_t v30 = *(void *)(v28 + 16);
    *((void *)v25 + 5) = v30;
    *((_OWORD *)v25 + 3) = v29;
    *((void *)v25 + 8) = v30;
    *((void *)v25 + 9) = v27;
    *((void *)v25 + 10) = SlimCompressionPluginClass_callback;
    *((void *)v25 + 11) = a1;
    *((void *)v25 + 12) = a7;
    dispatch_async_f(*(dispatch_queue_t *)(v8 + 80), v25, (dispatch_function_t)_dispatch_tileEncodeAsync);
LABEL_28:
    uint64_t v24 = 0;
    *(_DWORD *)(v8 + 52) = (*(_DWORD *)(v8 + 52) + 1) % *(_DWORD *)(v8 + 48);
    goto LABEL_29;
  }
  uint64_t v24 = 4294950305;
LABEL_29:
  if (cf) {
    CFRelease(cf);
  }
  return v24;
}

uint64_t SlimCompressionPluginClass_completeEncodes(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 144);
  if (!*(unsigned char *)(v1 + 72)) {
    dispatch_barrier_sync(*(dispatch_queue_t *)(v1 + 80), &__block_literal_global_17_0);
  }
  return 0;
}

void _slimEncoderSessionSetOneProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  SlimVideoEncoder_SetPropertyInternal(*(void *)(a3 + 8), a1, a2);
  if (!*(_DWORD *)a3) {
    *(_DWORD *)a3 = v4;
  }
}

void _createSlimEncodeFrameProperties(uint64_t a1, uint64_t a2, CFAllocatorRef allocator, __CFDictionary **a4)
{
  if (!(a2 | a1))
  {
    if (!a4) {
      return;
    }
    uint64_t v8 = 0;
    goto LABEL_12;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return;
  }
  uint64_t v8 = Mutable;
  if (a1 && CMPhotoCFDictionarySetInt(Mutable, @"StillOffsetH", a1)) {
    goto LABEL_14;
  }
  if (!a2)
  {
    if (!a4) {
      goto LABEL_14;
    }
LABEL_12:
    *a4 = v8;
    return;
  }
  int v9 = CMPhotoCFDictionarySetInt(v8, @"EncodeHeight", a2);
  if (a4 && !v9) {
    goto LABEL_12;
  }
LABEL_14:
  CFRelease(v8);
}

uint64_t SlimCompressionPluginClass_callback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 128);
  uint64_t v9 = *(void *)(a1 + 136);
  return v8(a1, a3, a4, v9, a2);
}

void _dispatch_tileEncodeAsync(void *a1)
{
  uint64_t v10 = 0;
  _createSlimEncodeFrameProperties(*((void *)a1 + 9), *((void *)a1 + 2), 0, &v10);
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = (__CVBuffer *)*((void *)a1 + 1);
  int v4 = (void (*)(uint64_t, uint64_t, uint64_t, CFTypeRef))*((void *)a1 + 10);
  uint64_t v5 = *((void *)a1 + 11);
  uint64_t v6 = *((void *)a1 + 12);
  CMTime v9 = *(CMTime *)((unsigned char *)a1 + 1);
  long long v7 = *((_OWORD *)a1 + 3);
  uint64_t v8 = *((void *)a1 + 8);
  if (!SlimVideoEncoder_EncodeFrameInternal(v2, v3, &v9, &v7, (uint64_t)v10, v4, v5, v6)) {
    free(a1);
  }
  if (v10) {
    CFRelease(v10);
  }
}

CFTypeRef CMPhotoOneShotSessionPoolGetCompressionSession()
{
  return _copySession(0);
}

CFTypeRef _copySession(unsigned int a1)
{
  CFTypeRef cf = 0;
  pthread_once(&_createGlobalPoolIfNeeded_onceToken, _once_createGlobalPoolIfNeeded);
  if (!globalPool || !*(unsigned char *)globalPool) {
    goto LABEL_11;
  }
  int v2 = pthread_mutex_lock(*(pthread_mutex_t **)(globalPool + 8));
  if (v2) {
    goto LABEL_16;
  }
  if (CFArrayGetCount(*(CFArrayRef *)(globalPool + 8 * a1 + 16)) < 1)
  {
    CFTypeRef v4 = 0;
  }
  else
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(globalPool + 8 * a1 + 16), 0);
    CFTypeRef v4 = ValueAtIndex ? CFRetain(ValueAtIndex) : 0;
    CFTypeRef cf = v4;
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(globalPool + 8 * a1 + 16), 0);
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(globalPool + 8));
  if (!v4)
  {
LABEL_11:
    if (a1 == 1)
    {
      int v2 = CMPhotoDecompressionSessionCreate((const __CFAllocator *)*MEMORY[0x1E4F1CF80], 0, &cf);
    }
    else if (a1)
    {
      int v2 = -16990;
    }
    else
    {
      int v2 = CMPhotoCompressionSessionCreate((const __CFAllocator *)*MEMORY[0x1E4F1CF80], 0, &cf);
    }
LABEL_16:
    CFTypeRef v4 = cf;
    if (v2) {
      BOOL v5 = cf == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
      CFRelease(cf);
      return 0;
    }
  }
  return v4;
}

CFTypeRef CMPhotoOneShotSessionPoolGetDecompressionSession()
{
  return _copySession(1u);
}

void CMPhotoOneShotSessionPoolRecycleSession(const void *a1)
{
  if (!a1) {
    return;
  }
  CFTypeID v2 = CFGetTypeID(a1);
  if (v2 == CMPhotoCompressionSessionGetTypeID())
  {
    uint64_t v3 = 0;
  }
  else
  {
    if (v2 != CMPhotoDecompressionSessionGetTypeID()) {
      goto LABEL_16;
    }
    uint64_t v3 = 1;
  }
  if (globalPool && *(unsigned char *)globalPool)
  {
    dispatch_time_t valuePtr = dispatch_time(0, 60000000000);
    CFNumberRef v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &valuePtr);
    if (v4)
    {
      CFNumberRef v5 = v4;
      if (!pthread_mutex_lock(*(pthread_mutex_t **)(globalPool + 8)))
      {
        CFArrayAppendValue(*(CFMutableArrayRef *)(globalPool + 8 * v3 + 16), a1);
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(globalPool + 32), a1, v5);
        uint64_t v6 = globalPool;
        if (*(unsigned char *)(globalPool + 40))
        {
          dispatch_resume(*(dispatch_object_t *)(globalPool + 48));
          uint64_t v6 = globalPool;
          *(unsigned char *)(globalPool + 40) = 0;
        }
        pthread_mutex_unlock(*(pthread_mutex_t **)(v6 + 8));
      }
      CFRelease(a1);
      CFNumberRef v7 = v5;
    }
    else
    {
      CFNumberRef v7 = (CFNumberRef)a1;
    }
    CFRelease(v7);
    return;
  }
LABEL_16:
  CFRelease(a1);
}

uint64_t CMPhotoOneShotSessionPoolDiscardCompressionCaches()
{
  return _clearTimerRecord(0);
}

void _once_createGlobalPoolIfNeeded()
{
  globalPool = (uint64_t)malloc_type_calloc(1uLL, 0x38uLL, 0x10200404B17195AuLL);
  if (globalPool)
  {
    uint64_t v0 = FigSimpleMutexCreate();
    *(void *)(globalPool + 8) = v0;
    if (v0)
    {
      uint64_t v1 = 0;
      CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      char v3 = 1;
      CFNumberRef v4 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
      while (1)
      {
        char v5 = v3;
        CFMutableArrayRef Mutable = CFArrayCreateMutable(v2, 0, v4);
        *(void *)(globalPool + 8 * v1 + 16) = Mutable;
        if (!Mutable) {
          break;
        }
        char v3 = 0;
        uint64_t v1 = 1;
        if ((v5 & 1) == 0)
        {
          CFMutableDictionaryRef v7 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          *(void *)(globalPool + 32) = v7;
          if (v7)
          {
            global_queue = dispatch_get_global_queue(0, 0);
            CMTime v9 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, global_queue);
            uint64_t v10 = (void *)globalPool;
            *(void *)(globalPool + 48) = v9;
            if (v9)
            {
              dispatch_set_context(v9, v10);
              dispatch_source_set_event_handler_f(*(dispatch_source_t *)(globalPool + 48), (dispatch_function_t)_performCleanup);
              dispatch_time_t v11 = dispatch_time(0, 60000000000);
              dispatch_source_set_timer(*(dispatch_source_t *)(globalPool + 48), v11, 0xDF8475800uLL, 0x1BF08EB00uLL);
              unint64_t v12 = (unsigned char *)globalPool;
              *(unsigned char *)(globalPool + 40) = 1;
              unsigned char *v12 = 1;
            }
          }
          return;
        }
      }
    }
  }
}

uint64_t _performCleanup(uint64_t a1)
{
  uint64_t result = pthread_mutex_lock(*(pthread_mutex_t **)(globalPool + 8));
  if (!result)
  {
    CFIndex v3 = _performCleanupByType(a1, 0);
    if (!(v3 + _performCleanupByType(a1, 1u)))
    {
      dispatch_suspend(*(dispatch_object_t *)(a1 + 48));
      *(unsigned char *)(a1 + 40) = 1;
    }
    CFNumberRef v4 = *(pthread_mutex_t **)(globalPool + 8);
    return pthread_mutex_unlock(v4);
  }
  return result;
}

CFIndex _performCleanupByType(uint64_t a1, unsigned int a2)
{
  dispatch_time_t v4 = dispatch_time(0, 0);
  CFArrayRef v5 = *(const __CFArray **)(a1 + 8 * a2 + 16);
  CFIndex Count = CFArrayGetCount(v5);
  if (Count >= 1)
  {
    unint64_t v7 = Count + 1;
    do
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v5, v7 - 2);
      dispatch_time_t v10 = 0;
      CMPhotoCFDictionaryGetInt64IfPresent(*(CFDictionaryRef *)(a1 + 32), ValueAtIndex, &v10);
      if (v10 < v4)
      {
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 32), ValueAtIndex);
        CFArrayRemoveValueAtIndex(v5, v7 - 2);
      }
      --v7;
    }
    while (v7 > 1);
  }
  return CFArrayGetCount(v5);
}

void _clearTimeRecordApplier(void *key, CFMutableDictionaryRef theDict)
{
}

uint64_t CMPhotoHEIFFileWriterCreate(const __CFAllocator *a1, const __CFDictionary *a2, void *a3)
{
  CFTypeRef v36 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v35 = 0;
  if (!a3)
  {
    unint64_t v7 = 0;
    uint64_t v32 = 4294950306;
    goto LABEL_46;
  }
  pthread_once(&_checkFigNoteTraceOnce_onceToken_3, (void (*)(void))_registerFigNoteTrace_3);
  uint64_t v6 = (char *)malloc_type_calloc(1uLL, 0x100uLL, 0x10E0040BC676932uLL);
  unint64_t v7 = v6;
  if (!v6)
  {
LABEL_54:
    uint64_t v32 = 4294950305;
    goto LABEL_46;
  }
  *((void *)v6 + 23) = 26214400;
  *((_DWORD *)v6 + 32) = 2;
  uint64_t v8 = (int *)(v6 + 128);
  v6[176] = 0;
  CMTime v9 = v6 + 176;
  if (a2)
  {
    CMPhotoCFDictionaryGetIntIfPresent(a2, @"BackingType", v6 + 128);
    int v10 = *v8;
    if (*v8)
    {
      if (v10 == 4)
      {
        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a2, @"BackingIOSurfaceDestinationSize");
        CFNumberRef v12 = Value;
        if (Value)
        {
          CFTypeID v15 = CFGetTypeID(Value);
          if (v15 != CFNumberGetTypeID()) {
            goto LABEL_57;
          }
          valuePtr.versiouint64_t n = 0;
          if (!CFNumberGetValue(v12, kCFNumberLongType, &valuePtr) || valuePtr.version < 1) {
            goto LABEL_57;
          }
          CFNumberRef v12 = 0;
          *((void *)v7 + 18) = valuePtr.version;
        }
      }
      else if (v10 == 3)
      {
        CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue(a2, @"BackingFileURL");
        if (!v11) {
          goto LABEL_57;
        }
        CFNumberRef v12 = v11;
        CFTypeID v13 = CFGetTypeID(v11);
        if (v13 != CFURLGetTypeID()) {
          goto LABEL_57;
        }
      }
      else
      {
        CFNumberRef v12 = 0;
      }
    }
    else
    {
      CFNumberRef v12 = 0;
      *uint64_t v8 = 2;
    }
    CMPhotoCFDictionaryGetSizeIfPresent(a2, @"MaxOutputBufferSize", (void *)v7 + 23);
    CMPhotoCFDictionaryGetBooleanIfPresent(a2, @"DisableFastStartFiles", v7 + 176);
    if (*v9)
    {
      if (*v8 == 4)
      {
LABEL_57:
        uint64_t v17 = FigSignalErrorAt();
        goto LABEL_58;
      }
      char v34 = 0;
      uint64_t v16 = (void (__cdecl *)(CFAllocatorRef, const void *))*((void *)v7 + 18);
      valuePtr.versiouint64_t n = *((void *)v7 + 16);
      valuePtr.retaiuint64_t n = (CFArrayRetainCallBack)v12;
      valuePtr.release = v16;
      uint64_t v17 = _createByteStreamAndBacking(a1, (uint64_t)&valuePtr, &cf, &v36);
      if (!v17)
      {
        int v18 = (const void **)MEMORY[0x1E4F33320];
        goto LABEL_24;
      }
LABEL_58:
      uint64_t v32 = v17;
      goto LABEL_46;
    }
  }
  else
  {
    CFNumberRef v12 = 0;
  }
  char v34 = 0;
  uint64_t v17 = _createByteStreamAndBacking(a1, (uint64_t)&unk_1AB9E2E18, &cf, &v36);
  if (v17) {
    goto LABEL_58;
  }
  int v18 = (const void **)MEMORY[0x1E4F33328];
LABEL_24:
  char v34 = *v18;
  CFDictionaryRef v19 = CFDictionaryCreate(a1, MEMORY[0x1E4F33318], &v34, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v19) {
    goto LABEL_54;
  }
  CFDictionaryRef v20 = v19;
  uint64_t v21 = FigIFFPictureCollectionWriterCreateWithByteStream();
  if (v21)
  {
    uint64_t v32 = v21;
  }
  else
  {
    valuePtr.equal = 0;
    *(_OWORD *)&valuePtr.versiouint64_t n = 0u;
    valuePtr.copyDescriptiouint64_t n = 0;
    valuePtr.release = (CFArrayReleaseCallBack)_imageRecordReleaseCallback;
    CFMutableArrayRef v22 = CFArrayCreateMutable(a1, 0, &valuePtr);
    *((void *)v7 + 5) = v22;
    if (!v22) {
      goto LABEL_53;
    }
    valuePtr.equal = 0;
    *(_OWORD *)&valuePtr.versiouint64_t n = 0u;
    *(_OWORD *)&valuePtr.release = MEMORY[0x1E4F1C1D8];
    CFMutableArrayRef v23 = CFArrayCreateMutable(a1, 0, &valuePtr);
    *((void *)v7 + 6) = v23;
    if (!v23) {
      goto LABEL_53;
    }
    CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
    *((void *)v7 + 25) = Mutable;
    if (!Mutable) {
      goto LABEL_53;
    }
    CFMutableArrayRef v25 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
    *((void *)v7 + 26) = v25;
    if (v25
      && (CFMutableArrayRef v26 = CFArrayCreateMutable(a1, 0, 0), (*((void *)v7 + 27) = v26) != 0)
      && (uint64_t v27 = CFSetCreateMutable(a1, 0, 0), (*((void *)v7 + 13) = v27) != 0))
    {
      *((_DWORD *)v7 + 24) = 1835623985;
      CFSetAddValue(v27, (const void *)0x6D696631);
      *((_WORD *)v7 + 16) = 0;
      v7[34] = 0;
      v7[152] = 0;
      if (v12) {
        CFTypeRef v28 = CFRetain(v12);
      }
      else {
        CFTypeRef v28 = 0;
      }
      *((void *)v7 + 17) = v28;
      *((void *)v7 + 1) = FigSimpleMutexCreate();
      if (a1) {
        CFTypeRef v29 = CFRetain(a1);
      }
      else {
        CFTypeRef v29 = 0;
      }
      *(void *)unint64_t v7 = v29;
      CFTypeRef v30 = v36;
      *((void *)v7 + 2) = v35;
      CFTypeRef v35 = 0;
      CFTypeRef v36 = 0;
      CFTypeRef v31 = cf;
      CFTypeRef cf = 0;
      *((void *)v7 + 20) = v31;
      *((void *)v7 + 21) = v30;
      if (v7[176])
      {
        if (v31)
        {
          CFTypeRef v31 = CFRetain(v31);
          CFTypeRef v30 = (CFTypeRef)*((void *)v7 + 21);
        }
        *((void *)v7 + 14) = v31;
        if (v30) {
          CFTypeRef v30 = CFRetain(v30);
        }
        *((void *)v7 + 15) = v30;
      }
      uint64_t v32 = 0;
      *((void *)v7 + 9) = -1;
      *((_WORD *)v7 + 112) = 0;
      *((void *)v7 + 30) = 0;
      v7[248] = 1;
      *a3 = v7;
      unint64_t v7 = 0;
    }
    else
    {
LABEL_53:
      uint64_t v32 = 4294950305;
    }
  }
  CFRelease(v20);
LABEL_46:
  if (cf) {
    CFRelease(cf);
  }
  if (v36) {
    CFRelease(v36);
  }
  if (v35) {
    CFRelease(v35);
  }
  CMPhotoHEIFFileWriterDispose((const void **)v7);
  return v32;
}

uint64_t _createByteStreamAndBacking(CFAllocatorRef structureAllocator, uint64_t a2, CFTypeRef *a3, void *a4)
{
  CMBlockBufferRef blockBufferOut = 0;
  CFTypeRef cf = 0;
  IOSurfaceRef buffer = 0;
  switch(*(_DWORD *)a2)
  {
    case 1:
      CFMutableArrayRef Mutable = CFDataCreateMutable(structureAllocator, 0);
      if (Mutable)
      {
        uint64_t WritableWithCFMutableData = FigByteStreamCreateWritableWithCFMutableData();
        if (!WritableWithCFMutableData) {
          goto LABEL_21;
        }
        uint64_t v9 = WritableWithCFMutableData;
      }
      else
      {
        uint64_t v9 = 4294950305;
      }
      goto LABEL_7;
    case 2:
      uint64_t WritableForBlockBuffer = CMBlockBufferCreateEmpty(structureAllocator, 0, 0, &blockBufferOut);
      if (WritableForBlockBuffer) {
        goto LABEL_6;
      }
      uint64_t WritableForBlockBuffer = CMByteStreamCreateWritableForBlockBuffer();
      if (WritableForBlockBuffer) {
        goto LABEL_6;
      }
      CFMutableArrayRef Mutable = blockBufferOut;
      CMBlockBufferRef blockBufferOut = 0;
      goto LABEL_21;
    case 3:
      if (!*(void *)(a2 + 8)) {
        goto LABEL_29;
      }
      uint64_t WritableForBlockBuffer = CMByteStreamCreateForFileURL();
      if (WritableForBlockBuffer) {
        goto LABEL_6;
      }
      CFNumberRef v11 = *(const void **)(a2 + 8);
      if (v11) {
        CFMutableArrayRef Mutable = CFRetain(v11);
      }
      else {
        CFMutableArrayRef Mutable = 0;
      }
      goto LABEL_21;
    case 4:
      unint64_t v12 = *(void *)(a2 + 16);
      if (!v12)
      {
LABEL_29:
        CFMutableArrayRef Mutable = 0;
        uint64_t v9 = 4294950306;
LABEL_7:
        if (cf) {
          CFRelease(cf);
        }
        goto LABEL_22;
      }
      uint64_t WritableForBlockBuffer = CMPhotoSurfacePoolCreateMemorySurface(@"SurfacePoolOneShot", v12, 1, &buffer);
      if (WritableForBlockBuffer
        || (IOSurfaceDecrementUseCount(buffer),
            uint64_t WritableForBlockBuffer = FigByteStreamCreateWritableWithIOSurface(),
            WritableForBlockBuffer))
      {
LABEL_6:
        uint64_t v9 = WritableForBlockBuffer;
        CFMutableArrayRef Mutable = 0;
        goto LABEL_7;
      }
      CFMutableArrayRef Mutable = buffer;
      IOSurfaceRef buffer = 0;
LABEL_21:
      uint64_t v9 = 0;
      *a3 = cf;
      CFTypeRef cf = 0;
      *a4 = Mutable;
      CFMutableArrayRef Mutable = 0;
LABEL_22:
      if (blockBufferOut) {
        CFRelease(blockBufferOut);
      }
      if (Mutable) {
        CFRelease(Mutable);
      }
      if (buffer) {
        CFRelease(buffer);
      }
      return v9;
    default:
      uint64_t WritableForBlockBuffer = FigSignalErrorAt();
      goto LABEL_6;
  }
}

void _imageRecordReleaseCallback(CFAllocatorRef allocator, void *ptr)
{
  dispatch_time_t v4 = (const void *)ptr[6];
  if (v4) {
    CFRelease(v4);
  }
  CFArrayRef v5 = (const void *)ptr[15];
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = (const void *)ptr[16];
  if (v6) {
    CFRelease(v6);
  }
  unint64_t v7 = (const void *)ptr[18];
  if (v7) {
    CFRelease(v7);
  }
  uint64_t v8 = (const void *)ptr[17];
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v9 = (const void *)ptr[19];
  if (v9) {
    CFRelease(v9);
  }
  CFAllocatorDeallocate(allocator, ptr);
}

void CMPhotoHEIFFileWriterDispose(const void **a1)
{
  if (a1)
  {
    CFAllocatorRef v2 = *a1;
    if (v2) {
      CFRelease(v2);
    }
    CFIndex v3 = a1[2];
    if (v3) {
      CFRelease(v3);
    }
    dispatch_time_t v4 = a1[3];
    if (v4) {
      CFRelease(v4);
    }
    CFArrayRef v5 = a1[6];
    if (v5) {
      CFRelease(v5);
    }
    uint64_t v6 = a1[5];
    if (v6) {
      CFRelease(v6);
    }
    unint64_t v7 = a1[7];
    if (v7) {
      CFRelease(v7);
    }
    uint64_t v8 = a1[10];
    if (v8) {
      CFRelease(v8);
    }
    uint64_t v9 = a1[11];
    if (v9) {
      CFRelease(v9);
    }
    int v10 = a1[13];
    if (v10) {
      CFRelease(v10);
    }
    CFNumberRef v11 = a1[29];
    if (v11) {
      CFRelease(v11);
    }
    unint64_t v12 = a1[27];
    if (v12) {
      CFRelease(v12);
    }
    CFTypeID v13 = a1[25];
    if (v13) {
      CFRelease(v13);
    }
    unint64_t v14 = a1[26];
    if (v14) {
      CFRelease(v14);
    }
    CFTypeID v15 = a1[20];
    if (v15) {
      CFRelease(v15);
    }
    uint64_t v16 = a1[21];
    if (v16) {
      CFRelease(v16);
    }
    uint64_t v17 = a1[17];
    if (v17) {
      CFRelease(v17);
    }
    int v18 = a1[14];
    if (v18) {
      CFRelease(v18);
    }
    CFDictionaryRef v19 = a1[15];
    if (v19) {
      CFRelease(v19);
    }
    FigSimpleMutexDestroy();
    free(a1);
  }
}

uint64_t CMPhotoHEIFFileWriterCloseAndCopyBacking(uint64_t a1, _DWORD *a2, void *a3, void *a4)
{
  uint64_t v8 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  if (v8) {
    return v8;
  }
  if (!a4 && !*(void *)(a1 + 64))
  {
LABEL_86:
    uint64_t v9 = 0;
    goto LABEL_84;
  }
  CFMutableArrayRef context = (CFMutableArrayRef)a1;
  if (!FigCFDictionaryGetCount())
  {
LABEL_7:
    CFTypeRef cf = 0;
    p_CFTypeRef cf = &cf;
    uint64_t v58 = 0x2000000000;
    int v59 = 0;
    CFArrayRef v10 = *(const __CFArray **)(a1 + 88);
    if (v10 && CFArrayGetCount(v10) >= 1)
    {
      CFMutableArrayRef context = (CFMutableArrayRef)MEMORY[0x1E4F143A8];
      uint64_t v46 = *(void *)"";
      int v47 = ___writePendingReferencesIfNeeded_block_invoke;
      int v48 = &unk_1E5E2EB10;
      int v49 = &cf;
      double v50 = (CFTypeRef *)a1;
      FigCFArrayApplyBlock();
    }
    uint64_t v9 = *((unsigned int *)p_cf + 6);
    _Block_object_dispose(&cf, 8);
    if (v9) {
      goto LABEL_84;
    }
    CFTypeRef cf = 0;
    p_CFTypeRef cf = &cf;
    uint64_t v58 = 0x2000000000;
    int v59 = 0;
    CFTypeRef v52 = 0;
    CFDictionaryRef v53 = &v52;
    uint64_t v54 = 0x2000000000;
    char v55 = 0;
    CFMutableArrayRef context = (CFMutableArrayRef)MEMORY[0x1E4F143A8];
    uint64_t v46 = *(void *)"";
    int v47 = ___addBackwardsCompatibleStereoGroupsIfNeeded_block_invoke;
    int v48 = &unk_1E5E2EB38;
    double v50 = &v52;
    uint64_t v51 = a1;
    int v49 = &cf;
    FigCFDictionaryApplyBlock();
    if (*((unsigned char *)v53 + 24)) {
      CFSetAddValue(*(CFMutableSetRef *)(a1 + 104), (const void *)0x756E6966);
    }
    uint64_t v9 = *((unsigned int *)p_cf + 6);
    _Block_object_dispose(&v52, 8);
    _Block_object_dispose(&cf, 8);
    if (v9) {
      goto LABEL_84;
    }
    uint64_t IsFinal = _ensureBackingIsFinal(a1);
    if (IsFinal) {
      goto LABEL_87;
    }
    if (!*(void *)(a1 + 24)) {
      goto LABEL_70;
    }
    CFMutableArrayRef context = 0;
    CFTypeRef cf = 0;
    CFTypeRef v52 = 0;
    CFAllocatorRef v12 = *(const __CFAllocator **)a1;
    CFArrayRef v13 = *(const __CFArray **)(a1 + 48);
    if (v13 && (CFIndex Count = CFArrayGetCount(v13), Count >= 1))
    {
      CFIndex v15 = Count;
      CFIndex v16 = 0;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = (int *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 48), v16);
        uint64_t appended = _appendTrackReferenceIfValid(ValueAtIndex[12], *ValueAtIndex, v12, &context);
        if (appended) {
          break;
        }
        uint64_t appended = _appendTrackReferenceIfValid(ValueAtIndex[24], *ValueAtIndex, v12, (CFMutableArrayRef *)&cf);
        if (appended) {
          break;
        }
        uint64_t appended = _appendTrackReferenceIfValid(ValueAtIndex[36], *ValueAtIndex, v12, (CFMutableArrayRef *)&v52);
        if (appended) {
          break;
        }
        if (v15 == ++v16)
        {
          CFMutableArrayRef v19 = context;
          CFTypeRef v20 = cf;
          uint64_t v9 = (uint64_t)v52;
          if (!context) {
            goto LABEL_26;
          }
          goto LABEL_28;
        }
      }
      uint64_t v9 = appended;
      CFMutableArrayRef v19 = context;
      if (context) {
        goto LABEL_44;
      }
    }
    else
    {
      uint64_t v9 = 0;
      CFTypeRef v20 = 0;
      CFMutableArrayRef v19 = 0;
LABEL_26:
      if (v20 || v9)
      {
LABEL_28:
        CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v12, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (Mutable)
        {
          CFMutableArrayRef v22 = Mutable;
          if (v19) {
            CFDictionaryAddValue(Mutable, @"thmb", v19);
          }
          if (v20) {
            CFDictionaryAddValue(v22, @"auxl", v20);
          }
          if (v9) {
            CFDictionaryAddValue(v22, @"cdsc", (const void *)v9);
          }
          uint64_t FigBaseObject = FigFormatWriterGetFigBaseObject();
          uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v24) {
            uint64_t v25 = v24;
          }
          else {
            uint64_t v25 = 0;
          }
          CFMutableArrayRef v26 = *(uint64_t (**)(uint64_t, void, __CFDictionary *))(v25 + 56);
          if (v26) {
            uint64_t v9 = v26(FigBaseObject, *MEMORY[0x1E4F32D58], v22);
          }
          else {
            uint64_t v9 = 4294954514;
          }
          CFRelease(v22);
          if (!v19) {
            goto LABEL_45;
          }
        }
        else
        {
          uint64_t v9 = 4294950305;
          if (!v19) {
            goto LABEL_45;
          }
        }
LABEL_44:
        CFRelease(v19);
      }
    }
LABEL_45:
    if (cf) {
      CFRelease(cf);
    }
    if (v52) {
      CFRelease(v52);
    }
    if (v9) {
      goto LABEL_84;
    }
    uint64_t v27 = *(void *)(a1 + 24);
    uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v28) {
      uint64_t v29 = v28;
    }
    else {
      uint64_t v29 = 0;
    }
    CFTypeRef v30 = *(uint64_t (**)(uint64_t, void))(v29 + 40);
    if (!v30) {
      goto LABEL_83;
    }
    uint64_t IsFinal = v30(v27, 0);
    if (IsFinal) {
      goto LABEL_87;
    }
    for (CFIndex i = 0; ; ++i)
    {
      CFArrayRef v32 = *(const __CFArray **)(a1 + 48);
      if (v32) {
        CFArrayRef v32 = (const __CFArray *)CFArrayGetCount(v32);
      }
      if (i >= (uint64_t)v32) {
        break;
      }
      CMTime v33 = (uint64_t *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 48), i);
      uint64_t IsFinal = _updateSampleDescriptionExtensions(a1, *(unsigned int *)v33);
      if (IsFinal) {
        goto LABEL_87;
      }
      if (v33[7] >= 1)
      {
        uint64_t IsFinal = _updateSampleDescriptionExtensions(a1, *((unsigned int *)v33 + 12));
        if (IsFinal) {
          goto LABEL_87;
        }
      }
      if (v33[13] >= 1)
      {
        uint64_t IsFinal = _updateSampleDescriptionExtensions(a1, *((unsigned int *)v33 + 24));
        if (IsFinal) {
          goto LABEL_87;
        }
      }
    }
    uint64_t v34 = *(void *)(a1 + 24);
    uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v36 = v35 ? v35 : 0;
    int v37 = *(uint64_t (**)(uint64_t, void))(v36 + 48);
    if (!v37) {
      goto LABEL_83;
    }
    uint64_t IsFinal = v37(v34, 0);
    if (IsFinal) {
      goto LABEL_87;
    }
LABEL_70:
    uint64_t v44 = 0;
    uint64_t v38 = *(void *)(a1 + 112);
    uint64_t v39 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v39) {
      uint64_t v40 = v39;
    }
    else {
      uint64_t v40 = 0;
    }
    uint64_t v41 = *(uint64_t (**)(uint64_t, void, uint64_t *))(v40 + 24);
    if (v41)
    {
      uint64_t IsFinal = v41(v38, 0, &v44);
      if (!IsFinal)
      {
        if (a3) {
          *a3 = v44;
        }
        if (a2) {
          *a2 = *(_DWORD *)(a1 + 128);
        }
        if (a4)
        {
          CFTypeRef v42 = *(CFTypeRef *)(a1 + 120);
          if (v42) {
            CFTypeRef v42 = CFRetain(v42);
          }
          uint64_t v9 = 0;
          *a4 = v42;
          goto LABEL_84;
        }
        goto LABEL_86;
      }
LABEL_87:
      uint64_t v9 = IsFinal;
      goto LABEL_84;
    }
LABEL_83:
    uint64_t v9 = 4294954514;
    goto LABEL_84;
  }
  uint64_t v46 = 0;
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 80), (CFDictionaryApplierFunction)_pendingGroupPropertiesApplier, &context);
  uint64_t v9 = v46;
  if (!v46)
  {
    CFSetAddValue(*(CFMutableSetRef *)(a1 + 104), (const void *)0x756E6966);
    goto LABEL_7;
  }
LABEL_84:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  return v9;
}

uint64_t _ensureBackingIsFinal(uint64_t a1)
{
  while (1)
  {
    CFArrayRef v2 = *(const __CFArray **)(a1 + 200);
    if (!v2 || CFArrayGetCount(v2) < 1) {
      break;
    }
    uint64_t Sample = _reorderingBufferDequeueFirstSample(a1);
    if (Sample) {
      return Sample;
    }
  }
  if (*(unsigned char *)(a1 + 152)) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 176))
  {
    *(void *)&long long v162 = 0;
    unint64_t v176 = 0;
    if (*(_DWORD *)(a1 + 128) == 4)
    {
      uint64_t v4 = 4294950304;
LABEL_30:
      if (v176) {
        CFRelease((CFTypeRef)v176);
      }
      return v4;
    }
    uint64_t appended = _createByteStreamAndBacking(*(CFAllocatorRef *)a1, (uint64_t)&unk_1AB9E2E18, (CFTypeRef *)&v162, &v176);
    unint64_t v7 = (const void *)v162;
    if (!appended)
    {
      uint64_t v8 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v9) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = 0;
      }
      CFIndex v15 = *(uint64_t (**)(uint64_t, const void *, void))(v10 + 16);
      if (!v15)
      {
        uint64_t v4 = 4294954514;
        goto LABEL_28;
      }
      uint64_t appended = v15(v8, v7, 0);
      if (!appended)
      {
        v175 = 0;
        Datasize_t Length = (void *)CMBlockBufferGetDataLength((CMBlockBufferRef)v176);
        uint64_t appended = CMByteStreamAppendBlockBuffer();
        if (!appended)
        {
          if (v175 == DataLength)
          {
            uint64_t v17 = *(const void **)(a1 + 16);
            if (v17)
            {
              CFRelease(v17);
              *(void *)(a1 + 16) = 0;
            }
            int v18 = *(const void **)(a1 + 168);
            if (v18)
            {
              CFRelease(v18);
              *(void *)(a1 + 168) = 0;
            }
            CFMutableArrayRef v19 = *(const void **)(a1 + 160);
            if (v19)
            {
              CFRelease(v19);
              *(void *)(a1 + 160) = 0;
            }
            uint64_t v4 = 0;
            *(unsigned char *)(a1 + 32) = 1;
            *(unsigned char *)(a1 + 152) = 1;
          }
          else
          {
            uint64_t v4 = 4294950190;
          }
          goto LABEL_28;
        }
      }
    }
    uint64_t v4 = appended;
LABEL_28:
    if (v7) {
      CFRelease(v7);
    }
    goto LABEL_30;
  }
  v175 = 0;
  CFTypeRef v172 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v170 = 0;
  CFTypeRef v171 = 0;
  CFNumberRef v11 = (long long *)(a1 + 128);
  int v12 = *(_DWORD *)(a1 + 128);
  CFAllocatorRef v13 = *(const __CFAllocator **)a1;
  if (v12 == 4)
  {
    unint64_t v14 = (long long *)&unk_1AB9E2E18;
  }
  else
  {
    long long v162 = *v11;
    size_t v163 = *(void *)(a1 + 144);
    unint64_t v14 = &v162;
  }
  uint64_t v20 = _createByteStreamAndBacking(v13, (uint64_t)v14, (CFTypeRef *)&v175, &cf);
  if (!v20)
  {
    if (*MEMORY[0x1E4F1EBA8] == 1) {
      kdebug_trace();
    }
    *(unsigned char *)(a1 + 248) &= *(unsigned char *)(a1 + 224);
    CFArrayRef v21 = *(const __CFArray **)(a1 + 48);
    if (v21 && CFArrayGetCount(v21) == 1)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 48), 0);
      if (ValueAtIndex[7]) {
        BOOL v23 = 0;
      }
      else {
        BOOL v23 = ValueAtIndex[13] < 2;
      }
      char v24 = v23;
      *(unsigned char *)(a1 + 247) = v24;
    }
    if (*(unsigned char *)(a1 + 225))
    {
      if (!*(void *)(a1 + 232))
      {
        CFMutableArrayRef Mutable = 0;
        uint64_t v4 = 4294950306;
        goto LABEL_152;
      }
      CFMutableArrayRef Mutable = CFArrayCreateMutable(*(CFAllocatorRef *)a1, 0, 0);
      if (!Mutable) {
        goto LABEL_309;
      }
      CFSetApplyFunction(*(CFSetRef *)(a1 + 232), (CFSetApplierFunction)_addNumberToArray, Mutable);
      CFIndex Count = CFArrayGetCount((CFArrayRef)Mutable);
      if (Count >= 1)
      {
        CFIndex v27 = Count;
        CFIndex v28 = 0;
        while (1)
        {
          CFIndex v29 = (CFIndex)CFArrayGetValueAtIndex((CFArrayRef)Mutable, v28);
          if (v29 < 0) {
            break;
          }
          CFIndex v30 = v29;
          CFArrayRef v31 = *(const __CFArray **)(a1 + 40);
          if (v31) {
            CFArrayRef v31 = (const __CFArray *)CFArrayGetCount(v31);
          }
          if ((uint64_t)v31 < v30) {
            break;
          }
          CFArrayRef v32 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), v30);
          CFArrayRef v33 = (const __CFArray *)*((void *)v32 + 16);
          if (v33)
          {
            CFIndex v34 = CFArrayGetCount(v33);
            if (v34 >= 1)
            {
              CFIndex v35 = v34;
              CFIndex v36 = 0;
              do
              {
                CFIndex v37 = (CFIndex)CFArrayGetValueAtIndex(*((CFArrayRef *)v32 + 16), v36);
                if (v37 < 0) {
                  goto LABEL_179;
                }
                CFIndex v38 = v37;
                CFArrayRef v39 = *(const __CFArray **)(a1 + 40);
                if (v39) {
                  CFArrayRef v39 = (const __CFArray *)CFArrayGetCount(v39);
                }
                if ((uint64_t)v39 < v38) {
                  goto LABEL_179;
                }
                uint64_t v40 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), v38);
                unint64_t v41 = v40[2];
                if (HIDWORD(v41)
                  || (unint64_t v42 = v40[3], HIDWORD(v42))
                  || (unint64_t v43 = *((void *)v32 + 2), HIDWORD(v43))
                  || (unint64_t v44 = *((void *)v32 + 3), HIDWORD(v44)))
                {
                  uint64_t v4 = 4294950190;
                  goto LABEL_150;
                }
                uint64_t v45 = (v41 * v42);
                if (v45 << 32)
                {
                  unint64_t v46 = (int)v43 * (int)v44 / (unint64_t)(int)v45;
                  LOBYTE(v162) = v46 < 0xC9;
                  if (v46 >= 0xC9)
                  {
                    uint64_t v48 = _areSiblingThumbnailsMIAFCompliant(a1, (uint64_t)v32, (int)v45, (char *)&v162);
                    if (v48) {
                      goto LABEL_222;
                    }
                    char v47 = v162;
                  }
                  else
                  {
                    char v47 = 1;
                  }
                  *(unsigned char *)(a1 + 248) &= v47;
                }
              }
              while (v35 != ++v36);
            }
          }
          if (++v28 == v27) {
            goto LABEL_73;
          }
        }
LABEL_179:
        uint64_t v4 = 4294950306;
        goto LABEL_150;
      }
LABEL_73:
      CFRelease(Mutable);
    }
    if (!*(unsigned char *)(a1 + 248))
    {
LABEL_130:
      if (*MEMORY[0x1E4F1EBA8] == 1) {
        kdebug_trace();
      }
      CFMutableArrayRef Mutable = (void *)FigCFNumberCreateUInt32();
      if (!Mutable) {
        goto LABEL_309;
      }
      uint64_t CMBaseObject = FigPictureCollectionWriterGetCMBaseObject();
      uint64_t v74 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v74) {
        uint64_t v75 = v74;
      }
      else {
        uint64_t v75 = 0;
      }
      uint64_t v76 = *(uint64_t (**)(uint64_t, void, void *))(v75 + 56);
      if (v76)
      {
        uint64_t v48 = v76(CMBaseObject, *MEMORY[0x1E4F33338], Mutable);
        if (v48) {
          goto LABEL_222;
        }
        CFRelease(Mutable);
        CFMutableArrayRef Mutable = (void *)FigCFNumberCreateUInt32();
        if (!Mutable) {
          goto LABEL_309;
        }
        uint64_t v77 = FigPictureCollectionWriterGetCMBaseObject();
        uint64_t v78 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v78) {
          uint64_t v79 = v78;
        }
        else {
          uint64_t v79 = 0;
        }
        int v80 = *(uint64_t (**)(uint64_t, void, void *))(v79 + 56);
        if (v80)
        {
          uint64_t v48 = v80(v77, *MEMORY[0x1E4F33340], Mutable);
          if (!v48)
          {
            if (CFSetGetCount(*(CFSetRef *)(a1 + 104)) <= 0)
            {
              CFRelease(Mutable);
              goto LABEL_191;
            }
            CFMutableArrayRef v81 = CFArrayCreateMutable(*(CFAllocatorRef *)a1, 0, MEMORY[0x1E4F1D510]);
            if (v81)
            {
              CFMutableArrayRef v82 = v81;
              CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)_addValueToArray, v81);
              uint64_t v83 = FigPictureCollectionWriterGetCMBaseObject();
              uint64_t v84 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v84) {
                uint64_t v85 = v84;
              }
              else {
                uint64_t v85 = 0;
              }
              CFDataRef v103 = *(uint64_t (**)(uint64_t, void, CFMutableArrayRef))(v85 + 56);
              if (v103) {
                uint64_t v4 = v103(v83, *MEMORY[0x1E4F33330], v82);
              }
              else {
                uint64_t v4 = 4294954514;
              }
              CFRelease(Mutable);
              CFRelease(v82);
              if (v4) {
                goto LABEL_151;
              }
LABEL_191:
              CFMutableArrayRef Mutable = CFDictionaryCreate(*(CFAllocatorRef *)a1, MEMORY[0x1E4F33288], MEMORY[0x1E4F1CFD0], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              if (Mutable)
              {
                uint64_t v104 = *(void *)(a1 + 16);
                CFTypeRef v105 = v175;
                uint64_t v106 = *(void *)(CMBaseObjectGetVTable() + 16);
                if (v106) {
                  uint64_t v107 = v106;
                }
                else {
                  uint64_t v107 = 0;
                }
                int v108 = *(uint64_t (**)(uint64_t, CFTypeRef, void *))(v107 + 16);
                if (v108)
                {
                  uint64_t v109 = v108(v104, v105, Mutable);
                  if (v109) {
                    goto LABEL_328;
                  }
                  CFAllocatorRef v110 = *(CFAllocatorRef *)a1;
                  uint64_t v111 = FigPictureCollectionWriterGetCMBaseObject();
                  uint64_t v112 = *(void *)(CMBaseObjectGetVTable() + 8);
                  if (v112) {
                    uint64_t v113 = v112;
                  }
                  else {
                    uint64_t v113 = 0;
                  }
                  uint64_t v114 = *(uint64_t (**)(uint64_t, void, CFAllocatorRef, CFTypeRef *))(v113 + 48);
                  if (v114)
                  {
                    uint64_t v109 = v114(v111, *MEMORY[0x1E4F33348], v110, &v170);
                    if (!v109)
                    {
                      unint64_t v176 = 0;
                      uint64_t v169 = 0;
                      FigCFArrayGetInt64AtIndex();
                      FigCFArrayGetInt64AtIndex();
                      uint64_t v4 = 4294950190;
                      if (v169 < 0 || (v176 & 0x8000000000000000) != 0) {
                        goto LABEL_152;
                      }
                      if (v12 == 4)
                      {
                        CFTypeRef v115 = cf;
                        size_t v116 = CMBlockBufferGetDataLength((CMBlockBufferRef)cf);
                        size_t v117 = v169 + v116;
                        long long v162 = *v11;
                        if (*(void *)(a1 + 144) > v169 + v116) {
                          size_t v117 = *(void *)(a1 + 144);
                        }
                        CFAllocatorRef v118 = *(const __CFAllocator **)a1;
                        size_t v163 = v117;
                        uint64_t v109 = _createByteStreamAndBacking(v118, (uint64_t)&v162, &v172, &v171);
                        if (v109) {
                          goto LABEL_328;
                        }
                        *(void *)&long long v162 = 0;
                        unsigned int v119 = v172;
                        uint64_t v109 = CMByteStreamAppendBlockBuffer();
                        if (v109) {
                          goto LABEL_328;
                        }
                        if ((void)v162 != v116) {
                          goto LABEL_327;
                        }
                        if (v105)
                        {
                          CFRelease(v105);
                          v175 = 0;
                        }
                        if (v115) {
                          CFRelease(v115);
                        }
                        v175 = v119;
                        CFTypeRef v172 = 0;
                        CFTypeRef cf = v171;
                        CFTypeRef v171 = 0;
                      }
                      else
                      {
                        unsigned int v119 = v105;
                      }
                      *(void *)&long long v162 = 0;
                      uint64_t v109 = CMByteStreamAppendBlockBuffer();
                      if (!v109)
                      {
                        if ((void)v162 == v169)
                        {
                          CMBlockBufferRef v124 = *(const void **)(a1 + 16);
                          if (v124)
                          {
                            CFRelease(v124);
                            *(void *)(a1 + 16) = 0;
                          }
                          int v125 = *(const void **)(a1 + 168);
                          if (v125)
                          {
                            CFRelease(v125);
                            *(void *)(a1 + 168) = 0;
                          }
                          id v126 = *(const void **)(a1 + 160);
                          if (v126)
                          {
                            CFRelease(v126);
                            *(void *)(a1 + 160) = 0;
                          }
                          uint64_t v4 = 0;
                          *(unsigned char *)(a1 + 32) = 1;
                          *(unsigned char *)(a1 + 152) = 1;
                          v175 = 0;
                          CFTypeRef v127 = cf;
                          *(void *)(a1 + 112) = v119;
                          *(void *)(a1 + 120) = v127;
                          CFTypeRef cf = 0;
                          goto LABEL_156;
                        }
LABEL_327:
                        uint64_t v109 = FigSignalErrorAt();
                      }
                    }
LABEL_328:
                    uint64_t v4 = v109;
                    goto LABEL_152;
                  }
                }
                uint64_t v4 = 4294954514;
                goto LABEL_152;
              }
LABEL_309:
              uint64_t v4 = 4294950305;
              goto LABEL_152;
            }
            uint64_t v4 = 4294950305;
LABEL_150:
            CFRelease(Mutable);
            goto LABEL_151;
          }
LABEL_222:
          uint64_t v4 = v48;
          goto LABEL_150;
        }
      }
      uint64_t v4 = 4294954514;
      goto LABEL_150;
    }
    CFSetAddValue(*(CFMutableSetRef *)(a1 + 104), (const void *)0x6D696166);
    if (*(unsigned char *)(a1 + 242)) {
      CFSetAddValue(*(CFMutableSetRef *)(a1 + 104), (const void *)0x4D694842);
    }
    if (*(unsigned char *)(a1 + 243)) {
      CFSetAddValue(*(CFMutableSetRef *)(a1 + 104), (const void *)0x4D694841);
    }
    if (*(unsigned char *)(a1 + 244)) {
      CFSetAddValue(*(CFMutableSetRef *)(a1 + 104), (const void *)0x4D694845);
    }
    if (*(unsigned char *)(a1 + 245)) {
      CFSetAddValue(*(CFMutableSetRef *)(a1 + 104), (const void *)0x4D694142);
    }
    if (*(unsigned char *)(a1 + 247))
    {
      int v49 = *(_DWORD *)(a1 + 96);
      if (v49 == 1836279345 || v49 == 1635148659) {
        CFSetAddValue(*(CFMutableSetRef *)(a1 + 104), (const void *)0x4D69416E);
      }
    }
    double v50 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), *(void *)(a1 + 72));
    *(void *)&long long v162 = 0;
    unint64_t v176 = 0;
    uint64_t v51 = _createByteStreamAndBacking(*(CFAllocatorRef *)a1, (uint64_t)&unk_1AB9E2E18, (CFTypeRef *)&v162, &v176);
    if (v51)
    {
      uint64_t v4 = v51;
      size_t v58 = 0;
      CFDictionaryRef v52 = 0;
      CFDictionaryRef v53 = (const void *)v162;
    }
    else
    {
      CFDictionaryRef v52 = CFDictionaryCreate(*(CFAllocatorRef *)a1, MEMORY[0x1E4F33288], MEMORY[0x1E4F1CFD0], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionaryRef v53 = (const void *)v162;
      if (v52)
      {
        uint64_t v54 = *(void *)(a1 + 16);
        uint64_t v55 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v55) {
          uint64_t v56 = v55;
        }
        else {
          uint64_t v56 = 0;
        }
        uint64_t v57 = *(uint64_t (**)(uint64_t, const void *, CFDictionaryRef))(v56 + 16);
        if (v57)
        {
          uint64_t v4 = v57(v54, v53, v52);
          if (v4) {
            size_t v58 = 0;
          }
          else {
            size_t v58 = CMBlockBufferGetDataLength((CMBlockBufferRef)v176);
          }
        }
        else
        {
          size_t v58 = 0;
          uint64_t v4 = 4294954514;
        }
      }
      else
      {
        size_t v58 = 0;
        uint64_t v4 = 4294950305;
      }
    }
    if (v53) {
      CFRelease(v53);
    }
    if (v52) {
      CFRelease(v52);
    }
    if (v176) {
      CFRelease((CFTypeRef)v176);
    }
    if (v4) {
      goto LABEL_151;
    }
    CFSetRef v59 = *(const __CFSet **)(a1 + 104);
    if (v59) {
      v58 += 4 * CFSetGetCount(v59);
    }
    if (*(void *)(a1 + 64) == 1)
    {
      unint64_t v60 = *((void *)v50 + 8) + v58;
      CFArrayRef v61 = (const __CFArray *)*((void *)v50 + 16);
      if (v61 && CFArrayGetCount(v61))
      {
        uint64_t v62 = CFArrayGetValueAtIndex(*((CFArrayRef *)v50 + 16), 0);
        if (*((void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), (CFIndex)v62) + 8) + v58 >= 0x1F400
          || v60 >= *(void *)(a1 + 184))
        {
LABEL_128:
          if (*(unsigned char *)(a1 + 246)) {
            CFSetAddValue(*(CFMutableSetRef *)(a1 + 104), (const void *)0x4D695072);
          }
          goto LABEL_130;
        }
      }
      else if (v60 >= 0x1F400)
      {
        goto LABEL_128;
      }
    }
    else
    {
      CFArrayRef v63 = *(const __CFArray **)(a1 + 40);
      if (!v63) {
        goto LABEL_128;
      }
      CFIndex v64 = CFArrayGetCount(v63);
      if (!v64) {
        goto LABEL_128;
      }
      unint64_t v65 = v64;
      CFIndex v66 = 0;
      char v67 = 0;
      unint64_t v68 = 0;
      BOOL v69 = 1;
      do
      {
        unsigned int v70 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), v66);
        unint64_t v71 = v70[8];
        if (*((_DWORD *)v70 + 1) == 1)
        {
          v58 += v71;
          if (v70[14] == *(void *)(a1 + 72)) {
            break;
          }
        }
        else
        {
          v68 += v71;
          if (v71 > *(void *)(a1 + 184)) {
            char v67 = 1;
          }
        }
        BOOL v69 = ++v66 < v65;
      }
      while (v65 != v66);
      if (v67) {
        goto LABEL_128;
      }
      unint64_t v72 = *(void *)(a1 + 184);
      if (v68 <= v72) {
        unint64_t v72 = 0;
      }
      if ((v72 + v58) >> 10 > 0x7C || !v69) {
        goto LABEL_128;
      }
    }
    *(unsigned char *)(a1 + 246) = 1;
    goto LABEL_128;
  }
  uint64_t v4 = v20;
LABEL_151:
  CFMutableArrayRef Mutable = 0;
LABEL_152:
  if (v175) {
    CFRelease(v175);
  }
  if (cf) {
    CFRelease(cf);
  }
LABEL_156:
  if (v172) {
    CFRelease(v172);
  }
  if (v171) {
    CFRelease(v171);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v170) {
    CFRelease(v170);
  }
  if (v4) {
    return v4;
  }
  CFArrayRef v86 = *(const __CFArray **)(a1 + 48);
  if (!v86 || CFArrayGetCount(v86) != 1) {
    return 0;
  }
  int v87 = (unsigned int *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 48), 0);
  if (*((void *)v87 + 1) != 1) {
    return FigSignalErrorAt();
  }
  int v88 = v87;
  if (!*((void *)v87 + 2)) {
    return 0;
  }
  uint64_t Sample = _createMovieWriterIfNeeded(a1);
  if (Sample) {
    return Sample;
  }
  uint64_t v165 = 0;
  uint64_t v166 = 0;
  uint64_t v164 = 0;
  CFAllocatorRef v89 = *(CFAllocatorRef *)a1;
  uint64_t v90 = v88[6];
  CFTypeRef v172 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v170 = 0;
  CFTypeRef v171 = 0;
  uint64_t v91 = FigPictureCollectionCreateFromByteStream();
  if (v91) {
    goto LABEL_325;
  }
  uint64_t v169 = 0;
  CFTypeRef v92 = cf;
  uint64_t v93 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v93) {
    uint64_t v94 = v93;
  }
  else {
    uint64_t v94 = 0;
  }
  unsigned int v95 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))(v94 + 8);
  if (!v95) {
    goto LABEL_253;
  }
  uint64_t v91 = v95(v92, 1, &v169);
  if (v91) {
    goto LABEL_325;
  }
  if (v169 <= 0)
  {
    uint64_t v91 = FigSignalErrorAt();
    goto LABEL_325;
  }
  CFTypeRef v96 = cf;
  uint64_t v97 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v98 = v97 ? v97 : 0;
  uint64_t v99 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *))(v98 + 24);
  if (!v99) {
    goto LABEL_253;
  }
  uint64_t v91 = v99(v96, v90, &v172);
  if (v91) {
    goto LABEL_325;
  }
  _getSampleOffsetFromPictureReader((uint64_t)v89, (uint64_t)v172, &v166);
  uint64_t v168 = 0;
  CFTypeRef v100 = v172;
  uint64_t v101 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v102 = v101 ? v101 : 0;
  BOOL v120 = *(uint64_t (**)(CFTypeRef, uint64_t *))(v102 + 16);
  if (!v120) {
    goto LABEL_253;
  }
  uint64_t v91 = v120(v100, &v168);
  if (v91) {
    goto LABEL_325;
  }
  if (v168 >= 1)
  {
    CFTypeRef v121 = v172;
    uint64_t v122 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v122) {
      uint64_t v123 = v122;
    }
    else {
      uint64_t v123 = 0;
    }
    int v128 = *(uint64_t (**)(CFTypeRef, void, CFTypeRef *))(v123 + 24);
    if (!v128) {
      goto LABEL_253;
    }
    uint64_t v91 = v128(v121, 0, &v171);
    if (v91) {
      goto LABEL_325;
    }
    _getSampleOffsetFromPictureReader((uint64_t)v89, (uint64_t)v171, &v165);
  }
  uint64_t v167 = 0;
  CFTypeRef v129 = v172;
  uint64_t v130 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v131 = v130 ? v130 : 0;
  CFTypeRef v132 = *(uint64_t (**)(CFTypeRef, uint64_t *))(v131 + 32);
  if (!v132) {
    goto LABEL_253;
  }
  uint64_t v91 = v132(v129, &v167);
  if (v91) {
    goto LABEL_325;
  }
  if (v167 < 1) {
    goto LABEL_251;
  }
  CFTypeRef v133 = v172;
  uint64_t v134 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v135 = v134 ? v134 : 0;
  uint64_t v136 = *(uint64_t (**)(CFTypeRef, void, CFTypeRef *))(v135 + 40);
  if (!v136)
  {
LABEL_253:
    uint64_t v140 = 0;
    uint64_t v4 = 4294954514;
    goto LABEL_254;
  }
  uint64_t v91 = v136(v133, 0, &v170);
  if (!v91)
  {
    _getSampleOffsetFromPictureReader((uint64_t)v89, (uint64_t)v170, &v164);
LABEL_251:
    CFTypeRef v137 = v172;
    *(void *)&long long v162 = 0;
    v175 = 0;
    unint64_t v176 = 0;
    unsigned int v174 = 0;
    uint64_t v138 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v138) {
      uint64_t v139 = v138;
    }
    else {
      uint64_t v139 = 0;
    }
    uint64_t v157 = *(uint64_t (**)(CFTypeRef, long long *))(v139 + 48);
    if (v157)
    {
      uint64_t v158 = v157(v137, &v162);
      if (v158) {
        goto LABEL_330;
      }
      if ((uint64_t)v162 < 1)
      {
        uint64_t v140 = 0;
        uint64_t v4 = 0;
LABEL_322:
        free(v175);
        goto LABEL_254;
      }
      uint64_t v159 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v159) {
        uint64_t v160 = v159;
      }
      else {
        uint64_t v160 = 0;
      }
      long long v161 = *(uint64_t (**)(CFTypeRef, void, unsigned int *, unint64_t *, void **, void, void, void))(v160 + 56);
      if (v161)
      {
        uint64_t v4 = v161(v137, 0, &v174, &v176, &v175, 0, 0, 0);
        uint64_t v140 = 0;
        if (v4 || (uint64_t)v162 < 1) {
          goto LABEL_322;
        }
        if (v176 == 1)
        {
          uint64_t v4 = 0;
          uint64_t v140 = *v175 + v174;
          goto LABEL_322;
        }
        uint64_t v158 = FigSignalErrorAt();
LABEL_330:
        uint64_t v4 = v158;
        uint64_t v140 = 0;
        goto LABEL_322;
      }
    }
    uint64_t v140 = 0;
    uint64_t v4 = 4294954514;
    goto LABEL_322;
  }
LABEL_325:
  uint64_t v4 = v91;
  uint64_t v140 = 0;
LABEL_254:
  if (cf) {
    CFRelease(cf);
  }
  if (v172) {
    CFRelease(v172);
  }
  if (v171) {
    CFRelease(v171);
  }
  if (v170) {
    CFRelease(v170);
  }
  if (!v4)
  {
    if (!*v88)
    {
      uint64_t v141 = *(void *)(a1 + 24);
      uint64_t v142 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v142) {
        uint64_t v143 = v142;
      }
      else {
        uint64_t v143 = 0;
      }
      long long v150 = *(uint64_t (**)(uint64_t, uint64_t, void, unsigned int *))(v143 + 8);
      if (!v150) {
        return 4294954514;
      }
      uint64_t Sample = v150(v141, 1885954932, 0, v88);
      if (Sample) {
        return Sample;
      }
    }
    if (*((void *)v88 + 8) && !v88[12])
    {
      uint64_t v144 = *(void *)(a1 + 24);
      uint64_t v145 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v145) {
        uint64_t v146 = v145;
      }
      else {
        uint64_t v146 = 0;
      }
      long long v154 = *(uint64_t (**)(uint64_t, uint64_t, void, unsigned int *))(v146 + 8);
      if (!v154) {
        return 4294954514;
      }
      uint64_t Sample = v154(v144, 1885954932, 0, v88 + 12);
      if (Sample) {
        return Sample;
      }
    }
    if (*((void *)v88 + 14) && !v88[24])
    {
      uint64_t v147 = *(void *)(a1 + 24);
      uint64_t v148 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v148) {
        uint64_t v149 = v148;
      }
      else {
        uint64_t v149 = 0;
      }
      unint64_t v155 = *(uint64_t (**)(uint64_t, uint64_t, void, unsigned int *))(v149 + 8);
      if (!v155) {
        return 4294954514;
      }
      uint64_t Sample = v155(v147, 1635088502, 0, v88 + 24);
      if (Sample) {
        return Sample;
      }
    }
    if (!*((void *)v88 + 20) || v88[36]) {
      goto LABEL_270;
    }
    uint64_t v151 = *(void *)(a1 + 24);
    uint64_t v152 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v152) {
      uint64_t v153 = v152;
    }
    else {
      uint64_t v153 = 0;
    }
    uint64_t v156 = *(uint64_t (**)(uint64_t, uint64_t, void, unsigned int *))(v153 + 8);
    if (v156)
    {
      uint64_t Sample = v156(v151, 1835365473, 0, v88 + 36);
      if (!Sample)
      {
LABEL_270:
        uint64_t Sample = _addFirstSampleReferenceToTrack(a1, v88, v166);
        if (Sample) {
          return Sample;
        }
        if (*((void *)v88 + 8))
        {
          uint64_t Sample = _addFirstSampleReferenceToTrack(a1, v88 + 12, v165);
          if (Sample) {
            return Sample;
          }
        }
        if (*((void *)v88 + 14))
        {
          uint64_t Sample = _addFirstSampleReferenceToTrack(a1, v88 + 24, v164);
          if (Sample) {
            return Sample;
          }
        }
        if (*((void *)v88 + 20))
        {
          uint64_t Sample = _addFirstSampleReferenceToTrack(a1, v88 + 36, v140);
          if (Sample) {
            return Sample;
          }
        }
        return 0;
      }
      return Sample;
    }
    return 4294954514;
  }
  return v4;
}

uint64_t CMPhotoHEIFFileWriterAddSequence(uint64_t a1, uint64_t a2, void *a3)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v5 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  if (v5) {
    return v5;
  }
  if (*(unsigned char *)(a1 + 33) || *(unsigned char *)(a1 + 34) || *(unsigned char *)(a1 + 176))
  {
    uint64_t v6 = FigSignalErrorAt();
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v6 = _dataBlobArrayNewEntry(*(void **)(a1 + 48), 0xC0uLL, &v9, a3);
    if (!v6)
    {
      unint64_t v7 = v9;
      *uint64_t v9 = 0;
      *(_OWORD *)(v7 + 2) = 0u;
      *(_OWORD *)(v7 + 6) = 0u;
      *(_OWORD *)(v7 + 9) = 0u;
      *(_OWORD *)(v7 + 14) = 0u;
      *(_OWORD *)(v7 + 18) = 0u;
      *(_OWORD *)(v7 + 21) = 0u;
      *(_OWORD *)(v7 + 26) = 0u;
      *(_OWORD *)(v7 + 30) = 0u;
      *(_OWORD *)(v7 + 33) = 0u;
      *(_OWORD *)(v7 + 38) = 0u;
      *(_OWORD *)(v7 + 42) = 0u;
      *((void *)v7 + 23) = 0;
    }
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  return v6;
}

uint64_t CMPhotoHEIFFileWriterAddImageToSequence(uint64_t a1, const __CFDictionary *a2, int a3, CFIndex a4, int a5, const opaqueCMFormatDescription *a6, uint64_t *a7)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v14 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  if (v14) {
    return v14;
  }
  if (a4 < 0) {
    goto LABEL_24;
  }
  CFArrayRef Count = *(const __CFArray **)(a1 + 48);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  if ((uint64_t)Count <= a4)
  {
LABEL_24:
    uint64_t v21 = 4294950306;
    goto LABEL_22;
  }
  if (*(unsigned char *)(a1 + 176))
  {
    uint64_t IsFinal = FigSignalErrorAt();
    goto LABEL_28;
  }
  CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 48), a4);
  if (ValueAtIndex[1]
    || (uint64_t Dimensions = (uint64_t)CMVideoFormatDescriptionGetDimensions(a6),
        *((_DWORD *)ValueAtIndex + 7) = a5,
        ValueAtIndex[4] = (int)Dimensions,
        ValueAtIndex[5] = Dimensions >> 32,
        !a3)
    || ValueAtIndex[1]
    || *(unsigned char *)(a1 + 32))
  {
    BOOL v23 = 0;
    uint64_t IsFinal = _addNewImageRecord(a1, 0, a2, a5, a6, 1, a7, &v23);
    if (IsFinal) {
      goto LABEL_28;
    }
    int v18 = v23;
    *BOOL v23 = 1;
    *((void *)v18 + 10) = a4;
  }
  else
  {
    uint64_t IsFinal = _addNewImageRecordForDeferredSequence(a1, 0, a2, a5, a6, a4, (const void *)0xFFFFFFFFFFFFFFFFLL, a7);
    if (IsFinal) {
      goto LABEL_28;
    }
  }
  uint64_t v19 = ValueAtIndex[1];
  if (v19 == 1)
  {
    if (!ValueAtIndex[2])
    {
      uint64_t v19 = 1;
      goto LABEL_21;
    }
    uint64_t IsFinal = _ensureBackingIsFinal(a1);
    if (!IsFinal)
    {
      uint64_t v19 = ValueAtIndex[1];
      goto LABEL_21;
    }
LABEL_28:
    uint64_t v21 = IsFinal;
    goto LABEL_22;
  }
LABEL_21:
  uint64_t v21 = 0;
  ValueAtIndex[1] = v19 + 1;
LABEL_22:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  return v21;
}

uint64_t _addNewImageRecordForDeferredSequence(uint64_t a1, int a2, const __CFDictionary *a3, int a4, const opaqueCMFormatDescription *a5, uint64_t a6, const void *a7, uint64_t *a8)
{
  uint64_t v20 = 0;
  uint64_t result = _addNewImageRecord(a1, a2, a3, a4, a5, 0, a8, &v20);
  if (!result)
  {
    uint64_t v17 = v20;
    *uint64_t v20 = 2;
    v17[10] = a6;
    v17[14] = a7;
    v17[15] = CMPhotoDictionaryCreateDeepCopy(*(const __CFAllocator **)a1, a3);
    if (a5) {
      CFTypeRef v18 = CFRetain(a5);
    }
    else {
      CFTypeRef v18 = 0;
    }
    v17[17] = v18;
    if (!a2) {
      ++*(void *)(a1 + 64);
    }
    uint64_t v19 = (_DWORD *)MEMORY[0x1E4F1EBA8];
    if (*MEMORY[0x1E4F1EBA8] == 1) {
      kdebug_trace();
    }
    uint64_t result = _checkForMIAFConstraints(a1, a2, a3, a4, a5, *a8, a7);
    if (!result && *v19 == 1)
    {
      kdebug_trace();
      return 0;
    }
  }
  return result;
}

uint64_t CMPhotoHEIFFileWriterAddImageToCollection(uint64_t a1, const __CFDictionary *a2, uint64_t a3, const opaqueCMFormatDescription *a4, uint64_t *a5)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v10 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  if (v10) {
    return v10;
  }
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v15 = FigSignalErrorAt();
  }
  else
  {
    int v18 = 0;
    uint64_t v11 = *(void *)(a1 + 16);
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, const opaqueCMFormatDescription *, const __CFDictionary *, int *))(v13 + 24);
    if (!v14)
    {
      uint64_t v16 = 4294954514;
      goto LABEL_12;
    }
    uint64_t v15 = v14(v11, a3, a4, a2, &v18);
    if (!v15) {
      uint64_t v15 = _addNewImageRecordForCollection(a1, 0, a2, a3, a4, (const void *)0xFFFFFFFFFFFFFFFFLL, v18, a5);
    }
  }
  uint64_t v16 = v15;
LABEL_12:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  return v16;
}

uint64_t _addNewImageRecordForCollection(uint64_t a1, int a2, const __CFDictionary *a3, int a4, const opaqueCMFormatDescription *a5, const void *a6, int a7, uint64_t *a8)
{
  uint64_t v20 = 0;
  char v19 = 0;
  uint64_t result = _addNewImageRecord(a1, a2, a3, a4, a5, 0, a8, &v20);
  if (!result)
  {
    uint64_t v17 = v20;
    *uint64_t v20 = 0;
    v17[18] = a7;
    *((void *)v17 + 14) = a6;
    if (!a2) {
      ++*(void *)(a1 + 64);
    }
    int v18 = (_DWORD *)MEMORY[0x1E4F1EBA8];
    if (*MEMORY[0x1E4F1EBA8] == 1) {
      kdebug_trace();
    }
    uint64_t result = _checkForMIAFConstraints(a1, a2, a3, a4, a5, *a8, a6);
    if (!result)
    {
      if (*v18 == 1) {
        kdebug_trace();
      }
      CMPhotoCFDictionaryGetBooleanIfPresent(a3, @"ReserveImageHandle", &v19);
      if (v19) {
        return _createHEIFWriterImageHandleConfigurationKey(a3, a4, a5, (__CFData **)v17 + 19);
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

uint64_t CMPhotoHEIFFileWriterAddDerivedImageToCollection(uint64_t a1, int a2, void *a3, int a4, int32_t a5, int32_t a6, int a7, CGColorSpace *a8, const void *a9, const void *a10, const void *a11, CFArrayRef theArray, char a13, uint64_t *a14)
{
  CMVideoFormatDescriptionRef formatDescriptionOut = 0;
  if (!a1) {
    return 4294950306;
  }
  if (a4 == 1)
  {
    if (!theArray || CFArrayGetCount(theArray) != 2) {
      goto LABEL_19;
    }
LABEL_9:
    uint64_t v56 = a3;
    if (a8)
    {
      CFMutableArrayRef Mutable = CFDictionaryCreateMutable(*(CFAllocatorRef *)a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (Mutable)
      {
        uint64_t v62 = 0;
        value = 0;
        CFArrayRef v61 = 0;
        int TripletsForColorSpace = CMPhotoGetTripletsForColorSpace(a8, 875704422, &value, &v62, &v61);
        char v22 = CGColorSpaceContainsFlexGTCInfo();
        if (TripletsForColorSpace || (v22 & 1) != 0)
        {
          CFDataRef v25 = CGColorSpaceCopyICCData(a8);
          if (!v25)
          {
            uint64_t v26 = FigSignalErrorAt();
            uint64_t MutableCopy = 0;
            CFMutableArrayRef v24 = 0;
            goto LABEL_86;
          }
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F1EDF0], v25);
          CFRelease(v25);
        }
        else
        {
          if (value) {
            CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F24A90], value);
          }
          if (v62) {
            CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F24BC8], v62);
          }
          if (v61) {
            CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F24C18], v61);
          }
        }
LABEL_34:
        uint64_t v28 = CMVideoFormatDescriptionCreate(*(CFAllocatorRef *)a1, 0x64696D67u, a5, a6, Mutable, &formatDescriptionOut);
        if (v28 || (uint64_t v28 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8)), v28))
        {
          uint64_t v26 = v28;
          uint64_t MutableCopy = 0;
          CFMutableArrayRef v24 = 0;
          CFDataRef v25 = 0;
          goto LABEL_86;
        }
        if (!*(unsigned char *)(a1 + 32))
        {
          int v60 = -1;
          if (!FigCFArrayGetInt32AtIndex()) {
            goto LABEL_98;
          }
          uint64_t ValueAtIndex = FigCFArrayGetValueAtIndex();
          if (!ValueAtIndex) {
            goto LABEL_98;
          }
          uint64_t v30 = ValueAtIndex;
          CFArrayRef v31 = *(const __CFArray **)(ValueAtIndex + 48);
          if (v31)
          {
            unint64_t Count = CFArrayGetCount(v31);
            unint64_t v59 = 0;
            if (CMPhotoCFArrayGetSizeAtIndex(*(void *)(v30 + 48), 0, &v59))
            {
              uint64_t MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
              if (MutableCopy)
              {
                int v58 = -1;
                if (a4 != 1)
                {
                  cmpweak_kFigPictureCollectionWriterOption_IdentityInputItemID();
                  uint64_t v41 = FigCFDictionarySetInt64();
                  CFMutableArrayRef v24 = 0;
                  if (v41)
                  {
                    uint64_t v26 = v41;
                    CFDataRef v25 = 0;
                    goto LABEL_80;
                  }
LABEL_60:
                  CFDataRef v25 = CFArrayCreateMutable(*(CFAllocatorRef *)a1, Count, MEMORY[0x1E4F1D510]);
                  if (!v25) {
                    goto LABEL_105;
                  }
                  CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E4F332E0], v25);
                  if (Count)
                  {
                    do
                    {
                      uint64_t appended = FigCFArrayAppendInt64();
                      if (appended) {
                        goto LABEL_97;
                      }
                    }
                    while (--Count);
                  }
                  int v57 = 0;
                  uint64_t v46 = *(void *)(a1 + 16);
                  CMVideoFormatDescriptionRef v47 = formatDescriptionOut;
                  uint64_t v48 = *(void *)(CMBaseObjectGetVTable() + 16);
                  if (v48) {
                    uint64_t v49 = v48;
                  }
                  else {
                    uint64_t v49 = 0;
                  }
                  double v50 = *(uint64_t (**)(uint64_t, uint64_t, CMVideoFormatDescriptionRef, __CFDictionary *, int *))(v49 + 24);
                  if (v50)
                  {
                    uint64_t appended = v50(v46, 1684630887, v47, MutableCopy, &v57);
                    if (appended
                      || (uint64_t appended = _addNewImageRecordForCollection(a1, 0, MutableCopy, 1684630887, formatDescriptionOut, (const void *)v60, v57, a14), appended))
                    {
LABEL_97:
                      uint64_t v26 = appended;
                      goto LABEL_80;
                    }
                    if (!a13)
                    {
                      CFDictionaryRef v53 = 0;
                      goto LABEL_82;
                    }
                    if (*(void *)(a1 + 88)
                      || (uint64_t v51 = FigCFArrayCreateMutableCopy(), (*(void *)(a1 + 88) = v51) != 0))
                    {
                      uint64_t v52 = FigCFArrayCreateMutableCopy();
                      if (v52)
                      {
                        CFDictionaryRef v53 = (const void *)v52;
                        uint64_t v54 = FigCFArrayAppendInt32();
                        if (v54
                          || (uint64_t v54 = FigCFArrayAppendInt32(), v54)
                          || v58 != -1 && (uint64_t v54 = FigCFArrayAppendInt32(), v54))
                        {
                          uint64_t v26 = v54;
                          pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
LABEL_85:
                          CFRelease(v53);
                          goto LABEL_86;
                        }
                        CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 88), v53);
LABEL_82:
                        if (a4 == 1) {
                          CFSetAddValue(*(CFMutableSetRef *)(a1 + 104), (const void *)0x746D6170);
                        }
                        pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
                        uint64_t v26 = 0;
                        if (!v53) {
                          goto LABEL_86;
                        }
                        goto LABEL_85;
                      }
                    }
LABEL_105:
                    uint64_t v26 = 4294950305;
                    goto LABEL_80;
                  }
                  uint64_t v26 = 4294954514;
LABEL_80:
                  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
                  goto LABEL_86;
                }
                CFAllocatorRef v33 = *(const __CFAllocator **)a1;
                CFIndex v34 = CFArrayGetCount(theArray);
                CFMutableArrayRef v24 = CFArrayCreateMutable(v33, v34, MEMORY[0x1E4F1D510]);
                if (v24)
                {
                  if (!FigCFArrayGetInt32AtIndex()) {
                    goto LABEL_99;
                  }
                  uint64_t v35 = FigCFArrayGetValueAtIndex();
                  if (!v35) {
                    goto LABEL_99;
                  }
                  uint64_t v36 = v35;
                  uint64_t v37 = FigCFArrayAppendInt64();
                  if (!v37)
                  {
                    uint64_t v37 = FigCFArrayAppendInt64();
                    if (!v37)
                    {
                      CFArrayRef v38 = *(const __CFArray **)(v36 + 48);
                      if (!v38)
                      {
LABEL_59:
                        unint64_t v43 = cmpweak_kFigPictureCollectionWriterOption_TonemapMetadata();
                        CFDictionarySetValue(MutableCopy, v43, v56);
                        unint64_t v44 = cmpweak_kFigPictureCollectionWriterOption_TonemapInputItemIDs();
                        CFDictionarySetValue(MutableCopy, v44, v24);
                        goto LABEL_60;
                      }
                      unint64_t v39 = CFArrayGetCount(v38);
                      CFArrayRef v40 = *(const __CFArray **)(v36 + 48);
                      if (Count <= v39)
                      {
                        if (v40)
                        {
                          unint64_t Count = CFArrayGetCount(v40);
                          CFArrayRef v40 = *(const __CFArray **)(v36 + 48);
                        }
                        else
                        {
                          unint64_t Count = 0;
                        }
                      }
                      value = 0;
                      if (CMPhotoCFArrayGetSizeAtIndex(v40, 0, &value))
                      {
                        unint64_t v42 = v59;
                        if (v59 <= (unint64_t)value) {
                          unint64_t v42 = (unint64_t)value;
                        }
                        unint64_t v59 = v42;
                        goto LABEL_59;
                      }
LABEL_99:
                      CFDataRef v25 = 0;
                      uint64_t v26 = 4294950306;
                      goto LABEL_80;
                    }
                  }
                  uint64_t v26 = v37;
LABEL_107:
                  CFDataRef v25 = 0;
                  goto LABEL_80;
                }
              }
              else
              {
                CFMutableArrayRef v24 = 0;
              }
              CFDataRef v25 = 0;
              goto LABEL_105;
            }
LABEL_98:
            uint64_t MutableCopy = 0;
            CFMutableArrayRef v24 = 0;
            goto LABEL_99;
          }
        }
        uint64_t v26 = FigSignalErrorAt();
        uint64_t MutableCopy = 0;
        CFMutableArrayRef v24 = 0;
        goto LABEL_107;
      }
    }
    else
    {
      if (!a9 && !a10 && !a11)
      {
        CFMutableArrayRef Mutable = 0;
        goto LABEL_34;
      }
      CFIndex v27 = CFDictionaryCreateMutable(*(CFAllocatorRef *)a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFMutableArrayRef Mutable = v27;
      if (v27)
      {
        if (a9) {
          CFDictionarySetValue(v27, (const void *)*MEMORY[0x1E4F24A90], a9);
        }
        if (a10) {
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F24BC8], a10);
        }
        if (a11) {
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F24C18], a11);
        }
        goto LABEL_34;
      }
    }
    uint64_t MutableCopy = 0;
    CFMutableArrayRef v24 = 0;
    CFDataRef v25 = 0;
    uint64_t v26 = 4294950305;
    goto LABEL_86;
  }
  if (a4 != 2)
  {
    uint64_t MutableCopy = 0;
    CFMutableArrayRef Mutable = 0;
    CFMutableArrayRef v24 = 0;
    CFDataRef v25 = 0;
    uint64_t v26 = 4294950300;
    goto LABEL_86;
  }
  if (theArray && CFArrayGetCount(theArray) == 1) {
    goto LABEL_9;
  }
LABEL_19:
  uint64_t MutableCopy = 0;
  CFMutableArrayRef Mutable = 0;
  CFMutableArrayRef v24 = 0;
  CFDataRef v25 = 0;
  uint64_t v26 = 4294950306;
LABEL_86:
  if (formatDescriptionOut) {
    CFRelease(formatDescriptionOut);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (v24) {
    CFRelease(v24);
  }
  if (v25) {
    CFRelease(v25);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v26;
}

uint64_t CMPhotoHEIFFileWriterAddThumbnailToImage(uint64_t a1, const __CFDictionary *a2, CFIndex a3, uint64_t a4, const opaqueCMFormatDescription *a5, uint64_t *a6)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v12 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  if (v12) {
    return v12;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  CFArrayRef Count = *(const __CFArray **)(a1 + 40);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  if ((uint64_t)Count <= a3)
  {
LABEL_36:
    uint64_t v25 = 4294950306;
    goto LABEL_32;
  }
  uint64_t ValueAtIndex = (unsigned int *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), a3);
  if (ValueAtIndex[1])
  {
    uint64_t v25 = 4294950302;
    goto LABEL_32;
  }
  uint64_t v15 = ValueAtIndex;
  if (!*ValueAtIndex)
  {
    if (!*(unsigned char *)(a1 + 32))
    {
      int v33 = 0;
      uint64_t v26 = *(void *)(a1 + 16);
      uint64_t v27 = ValueAtIndex[18];
      uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v28) {
        uint64_t v29 = v28;
      }
      else {
        uint64_t v29 = 0;
      }
      uint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const opaqueCMFormatDescription *, const __CFDictionary *, int *))(v29 + 48);
      if (!v30)
      {
        uint64_t v25 = 4294954514;
        goto LABEL_32;
      }
      uint64_t v23 = v30(v26, v27, a4, a5, a2, &v33);
      if (!v23)
      {
        uint64_t v23 = _addNewImageRecordForCollection(a1, 1, a2, a4, a5, (const void *)a3, v33, a6);
        if (!v23)
        {
          CFArrayRef v31 = (__CFArray *)*((void *)v15 + 16);
          if (v31)
          {
            CFArrayAppendValue(v31, (const void *)*a6);
            uint64_t v25 = 0;
          }
          else
          {
            uint64_t v25 = 4294950305;
          }
          goto LABEL_32;
        }
      }
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  CFIndex v16 = *((void *)ValueAtIndex + 10);
  if (v16 < 0
    || (CFArrayRef v17 = *(const __CFArray **)(a1 + 48)) == 0
    || v16 >= CFArrayGetCount(v17)
    || (int v18 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 48), *((void *)v15 + 10)), v19 = v18[7], v18[1] != v19 + 1))
  {
LABEL_23:
    uint64_t v23 = FigSignalErrorAt();
    goto LABEL_24;
  }
  uint64_t v20 = v18;
  if (!v19)
  {
    uint64_t Dimensions = (uint64_t)CMVideoFormatDescriptionGetDimensions(a5);
    *((_DWORD *)v20 + 19) = a4;
    v20[10] = (int)Dimensions;
    v20[11] = Dimensions >> 32;
  }
  if (*v15 == 2 && !*(unsigned char *)(a1 + 32))
  {
    uint64_t v23 = _addNewImageRecordForDeferredSequence(a1, 1, a2, a4, a5, *((void *)v15 + 10), (const void *)a3, a6);
    if (!v23) {
      goto LABEL_19;
    }
LABEL_24:
    uint64_t v25 = v23;
    goto LABEL_32;
  }
  uint64_t v22 = *((void *)v15 + 10);
  CFIndex v34 = 0;
  uint64_t v23 = _addNewImageRecord(a1, 1, a2, a4, a5, 1, a6, &v34);
  if (v23) {
    goto LABEL_24;
  }
  CFMutableArrayRef v24 = v34;
  *CFIndex v34 = 1;
  *((void *)v24 + 10) = v22;
LABEL_19:
  uint64_t v25 = 0;
  ++v20[7];
LABEL_32:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  return v25;
}

uint64_t CMPhotoHEIFFileWriterAddAuxiliaryImageToImage(uint64_t a1, const __CFDictionary *a2, CFIndex a3, uint64_t a4, const opaqueCMFormatDescription *a5, uint64_t *a6)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v12 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  if (v12) {
    return v12;
  }
  if (a3 < 0) {
    goto LABEL_34;
  }
  CFArrayRef Count = *(const __CFArray **)(a1 + 40);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  if ((uint64_t)Count <= a3)
  {
LABEL_34:
    uint64_t v25 = 4294950306;
    goto LABEL_30;
  }
  uint64_t ValueAtIndex = (unsigned int *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), a3);
  if (ValueAtIndex[1])
  {
    uint64_t v25 = 4294950302;
    goto LABEL_30;
  }
  uint64_t v15 = ValueAtIndex;
  if (!*ValueAtIndex)
  {
    if (!*(unsigned char *)(a1 + 32))
    {
      int v32 = 0;
      uint64_t v26 = *(void *)(a1 + 16);
      uint64_t v27 = ValueAtIndex[18];
      uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v28) {
        uint64_t v29 = v28;
      }
      else {
        uint64_t v29 = 0;
      }
      uint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const opaqueCMFormatDescription *, const __CFDictionary *, int *))(v29 + 56);
      if (!v30)
      {
        uint64_t v25 = 4294954514;
        goto LABEL_30;
      }
      uint64_t v23 = v30(v26, v27, a4, a5, a2, &v32);
      if (!v23) {
        uint64_t v23 = _addNewImageRecordForCollection(a1, 2, a2, a4, a5, (const void *)a3, v32, a6);
      }
      goto LABEL_28;
    }
    goto LABEL_23;
  }
  CFIndex v16 = *((void *)ValueAtIndex + 10);
  if (v16 < 0
    || (CFArrayRef v17 = *(const __CFArray **)(a1 + 48)) == 0
    || v16 >= CFArrayGetCount(v17)
    || (int v18 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 48), *((void *)v15 + 10)), v19 = v18[13], v18[1] != v19 + 1))
  {
LABEL_23:
    uint64_t v23 = FigSignalErrorAt();
    goto LABEL_28;
  }
  uint64_t v20 = v18;
  if (!v19)
  {
    uint64_t Dimensions = (uint64_t)CMVideoFormatDescriptionGetDimensions(a5);
    *((_DWORD *)v20 + 31) = a4;
    v20[16] = (int)Dimensions;
    v20[17] = Dimensions >> 32;
  }
  if (*v15 == 2 && !*(unsigned char *)(a1 + 32))
  {
    uint64_t v23 = _addNewImageRecordForDeferredSequence(a1, 2, a2, a4, a5, *((void *)v15 + 10), (const void *)a3, a6);
    if (!v23) {
      goto LABEL_19;
    }
LABEL_28:
    uint64_t v25 = v23;
    goto LABEL_30;
  }
  uint64_t v22 = *((void *)v15 + 10);
  int v33 = 0;
  uint64_t v23 = _addNewImageRecord(a1, 2, a2, a4, a5, 1, a6, &v33);
  if (v23) {
    goto LABEL_28;
  }
  CFMutableArrayRef v24 = v33;
  *int v33 = 1;
  *((void *)v24 + 10) = v22;
LABEL_19:
  uint64_t v25 = 0;
  ++v20[13];
LABEL_30:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  return v25;
}

uint64_t CMPhotoHEIFFileWriterAddAuxiliaryReferenceToImage(uint64_t a1, CFIndex a2, CFIndex a3)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v6 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  if (v6) {
    return v6;
  }
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v12 = FigSignalErrorAt();
    goto LABEL_17;
  }
  if (a2 < 0) {
    goto LABEL_20;
  }
  CFArrayRef Count = *(const __CFArray **)(a1 + 40);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  if ((uint64_t)Count <= a2) {
    goto LABEL_20;
  }
  uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), a2);
  if (ValueAtIndex[1] != 2) {
    goto LABEL_21;
  }
  uint64_t v9 = ValueAtIndex;
  if (*ValueAtIndex) {
    goto LABEL_21;
  }
  if (a3 < 0) {
    goto LABEL_20;
  }
  CFArrayRef v10 = *(const __CFArray **)(a1 + 40);
  if (v10) {
    CFArrayRef v10 = (const __CFArray *)CFArrayGetCount(v10);
  }
  if ((uint64_t)v10 <= a3)
  {
LABEL_20:
    uint64_t v13 = 4294950306;
    goto LABEL_18;
  }
  uint64_t v11 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), a3);
  if (v11[1] || *v11)
  {
LABEL_21:
    uint64_t v13 = 4294950302;
    goto LABEL_18;
  }
  uint64_t v12 = _addItemReference(a1, v11[18], v9[18], 1635088492);
LABEL_17:
  uint64_t v13 = v12;
LABEL_18:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  return v13;
}

uint64_t _addItemReference(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t MutableCopy = (__CFArray *)FigCFArrayCreateMutableCopy();
  if (!MutableCopy) {
    return 4294950305;
  }
  uint64_t v9 = MutableCopy;
  uint64_t appended = CMPhotoCFArrayAppendInt32(MutableCopy, a2);
  if (!appended)
  {
    uint64_t v11 = *(void *)(a1 + 16);
    uint64_t v12 = *(void **)(CMBaseObjectGetVTable() + 16);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    if (*v13 < 5uLL || (uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, __CFArray *, uint64_t, void))v13[17]) == 0)
    {
      uint64_t v15 = 4294954514;
      goto LABEL_11;
    }
    uint64_t appended = v14(v11, a3, v9, a4, 0);
  }
  uint64_t v15 = appended;
LABEL_11:
  CFRelease(v9);
  return v15;
}

uint64_t CMPhotoHEIFFileWriterAddMetadataReferenceToImage(uint64_t a1, uint64_t a2, CFIndex a3)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v6 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  if (v6) {
    return v6;
  }
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v9 = FigSignalErrorAt();
  }
  else
  {
    if (a3 < 0) {
      goto LABEL_13;
    }
    CFArrayRef Count = *(const __CFArray **)(a1 + 40);
    if (Count) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if ((uint64_t)Count <= a3)
    {
LABEL_13:
      uint64_t v10 = 4294950306;
      goto LABEL_11;
    }
    uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), a3);
    if (*ValueAtIndex)
    {
      uint64_t v10 = 4294950302;
      goto LABEL_11;
    }
    uint64_t v9 = _addItemReference(a1, ValueAtIndex[18], a2, 1667527523);
  }
  uint64_t v10 = v9;
LABEL_11:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  return v10;
}

uint64_t CMPhotoHEIFFileWriterAddSampleBufferToImage(uint64_t a1, const void *a2, CFIndex a3, opaqueCMSampleBuffer *a4)
{
  if (!a1) {
    return 4294950306;
  }
  if (!a4) {
    return 4294950194;
  }
  uint64_t v8 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  if (v8) {
    return v8;
  }
  if (a3 < 0) {
    goto LABEL_134;
  }
  CFArrayRef Count = *(const __CFArray **)(a1 + 40);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  if ((uint64_t)Count <= a3)
  {
LABEL_134:
    uint64_t v47 = 4294950306;
    goto LABEL_148;
  }
  uint64_t ValueAtIndex = (unsigned int *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), a3);
  uint64_t v11 = ValueAtIndex[2];
  FormatDescriptiouint64_t n = CMSampleBufferGetFormatDescription(a4);
  int v13 = *ValueAtIndex;
  if (!*(unsigned char *)(a1 + 32))
  {
    unsigned int v14 = v13 - 1;
    if (a3) {
      BOOL v15 = *((unsigned char *)ValueAtIndex + 56) == 0;
    }
    else {
      BOOL v15 = 0;
    }
    int v17 = !v15 || v14 < 2;
    LOBYTE(time1.value) = 8;
    if (v11 == 1635148593)
    {
      uint64_t v21 = *(__CFSet **)(a1 + 104);
      uint64_t v18 = 1635148649;
      uint64_t v22 = 1635148659;
    }
    else
    {
      if (v11 != 1785750887)
      {
        LODWORD(v18) = 1835623985;
        if (v11 == 1752589105)
        {
          InfoFromFormatDescriptiouint64_t n = CMPhotoGetInfoFromFormatDescription(FormatDescription, 0, 0, 0, 0, 0, (char *)&time1, 0, 0, 0, 0, 0);
          if (InfoFromFormatDescription) {
            goto LABEL_133;
          }
          if (LOBYTE(time1.value) <= 8u) {
            uint64_t v18 = 1751476579;
          }
          else {
            uint64_t v18 = 1751476600;
          }
          if (v14 >= 2) {
            uint64_t v20 = v18;
          }
          else {
            uint64_t v20 = 1751479907;
          }
          CFSetAddValue(*(CFMutableSetRef *)(a1 + 104), (const void *)v20);
        }
        goto LABEL_35;
      }
      uint64_t v21 = *(__CFSet **)(a1 + 104);
      uint64_t v18 = 1785750887;
      uint64_t v22 = 1785751411;
    }
    if (v14 >= 2) {
      uint64_t v23 = (const void *)v18;
    }
    else {
      uint64_t v23 = (const void *)v22;
    }
    CFSetAddValue(v21, v23);
LABEL_35:
    CFSetAddValue(*(CFMutableSetRef *)(a1 + 104), (const void *)0x6D696631);
    if (v14 <= 1)
    {
      CFSetAddValue(*(CFMutableSetRef *)(a1 + 104), (const void *)0x6D736631);
      CFSetAddValue(*(CFMutableSetRef *)(a1 + 104), (const void *)0x69736F38);
      CFSetAddValue(*(CFMutableSetRef *)(a1 + 104), (const void *)0x68656963);
    }
    if (v17)
    {
      int v24 = 1836279345;
      if (v14 >= 2) {
        int v24 = v18;
      }
      *(_DWORD *)(a1 + 96) = v24;
    }
    int v13 = *ValueAtIndex;
  }
  if (v13 == 2)
  {
    if (!*(void *)(a1 + 16))
    {
      uint64_t v47 = 4294950304;
      goto LABEL_148;
    }
    LODWORD(time1.value) = 0;
    uint64_t v29 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 48), *((void *)ValueAtIndex + 10));
    if (ValueAtIndex[1])
    {
      uint64_t v30 = (unsigned int *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), *((void *)ValueAtIndex + 14));
      unsigned int v31 = ValueAtIndex[1];
      if (v31 == 2)
      {
        uint64_t v49 = *(void *)(a1 + 16);
        uint64_t v50 = v30[18];
        uint64_t v51 = *((void *)ValueAtIndex + 17);
        uint64_t v52 = *((void *)ValueAtIndex + 15);
        uint64_t v53 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v53) {
          uint64_t v54 = v53;
        }
        else {
          uint64_t v54 = 0;
        }
        CFMutableArrayRef v82 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, CMTime *))(v54 + 56);
        if (v82) {
          uint64_t v47 = v82(v49, v50, v11, v51, v52, &time1);
        }
        else {
          uint64_t v47 = 4294954514;
        }
        v29 += 12;
      }
      else
      {
        if (v31 != 1)
        {
          if (v31) {
            goto LABEL_132;
          }
          goto LABEL_55;
        }
        uint64_t v55 = *(void *)(a1 + 16);
        uint64_t v56 = v30[18];
        uint64_t v57 = *((void *)ValueAtIndex + 17);
        uint64_t v58 = *((void *)ValueAtIndex + 15);
        uint64_t v59 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v59) {
          uint64_t v60 = v59;
        }
        else {
          uint64_t v60 = 0;
        }
        uint64_t v83 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, CMTime *))(v60 + 48);
        if (v83) {
          uint64_t v47 = v83(v55, v56, v11, v57, v58, &time1);
        }
        else {
          uint64_t v47 = 4294954514;
        }
        v29 += 6;
      }
LABEL_121:
      if (v47) {
        goto LABEL_148;
      }
      ValueAtIndex[18] = time1.value;
      void v29[2] = CFRetain(a4);
      *((_DWORD *)v29 + 6) = time1.value;
      goto LABEL_123;
    }
LABEL_55:
    uint64_t v32 = *(void *)(a1 + 16);
    uint64_t v33 = *((void *)ValueAtIndex + 17);
    uint64_t v34 = *((void *)ValueAtIndex + 15);
    uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v35) {
      uint64_t v36 = v35;
    }
    else {
      uint64_t v36 = 0;
    }
    uint64_t v46 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, CMTime *))(v36 + 24);
    if (!v46) {
      goto LABEL_147;
    }
    uint64_t v47 = v46(v32, v11, v33, v34, &time1);
    goto LABEL_121;
  }
  if (!v13)
  {
LABEL_123:
    InfoFromFormatDescriptiouint64_t n = _addSampleBufferToCollection(a1, (uint64_t)ValueAtIndex, a2, a4);
    if (InfoFromFormatDescription) {
      goto LABEL_133;
    }
LABEL_124:
    memset(&v98, 0, sizeof(v98));
    CMSampleBufferGetPresentationTimeStamp(&v98, a4);
    if (ValueAtIndex[1]
      || (ValueAtIndex[25] & 1) == 0
      || (time1 = v98, CMTime time2 = *(CMTime *)(ValueAtIndex + 22), !CMTimeCompare(&time1, &time2)))
    {
      uint64_t v47 = 0;
      *(CMTime *)(ValueAtIndex + 22) = v98;
      goto LABEL_148;
    }
LABEL_132:
    InfoFromFormatDescriptiouint64_t n = FigSignalErrorAt();
    goto LABEL_133;
  }
  uint64_t v25 = (unsigned int *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 48), *((void *)ValueAtIndex + 10));
  InfoFromFormatDescriptiouint64_t n = _ensureBackingIsFinal(a1);
  if (InfoFromFormatDescription
    || (InfoFromFormatDescriptiouint64_t n = _createMovieWriterIfNeeded(a1), InfoFromFormatDescription))
  {
LABEL_133:
    uint64_t v47 = InfoFromFormatDescription;
    goto LABEL_148;
  }
  uint64_t v26 = 1885954932;
  unsigned int v27 = ValueAtIndex[1];
  uint64_t v28 = v25;
  if (v27)
  {
    if (v27 == 2)
    {
      uint64_t v26 = 1635088502;
      uint64_t v28 = v25 + 24;
    }
    else
    {
      if (v27 != 1) {
        goto LABEL_132;
      }
      uint64_t v28 = v25 + 12;
    }
  }
  uint64_t v37 = *v28;
  if (v37)
  {
LABEL_59:
    uint64_t v38 = *(void *)(a1 + 24);
    uint64_t v39 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v39) {
      uint64_t v40 = v39;
    }
    else {
      uint64_t v40 = 0;
    }
    uint64_t v48 = *(uint64_t (**)(uint64_t, uint64_t, opaqueCMSampleBuffer *))(v40 + 32);
    if (!v48) {
      goto LABEL_147;
    }
    uint64_t v47 = v48(v38, v37, a4);
    if (v47) {
      goto LABEL_148;
    }
    goto LABEL_124;
  }
  if (*(unsigned char *)(a1 + 33)) {
    goto LABEL_132;
  }
  if (*v25) {
    goto LABEL_132;
  }
  uint64_t v41 = v25 + 12;
  if (v25[12]) {
    goto LABEL_132;
  }
  unint64_t v42 = v25 + 24;
  if (v25[24] || v25[36]) {
    goto LABEL_132;
  }
  uint64_t v43 = *(void *)(a1 + 24);
  uint64_t v44 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v44) {
    uint64_t v45 = v44;
  }
  else {
    uint64_t v45 = 0;
  }
  CFArrayRef v61 = *(uint64_t (**)(uint64_t, uint64_t, void, unsigned int *))(v45 + 8);
  if (!v61) {
    goto LABEL_147;
  }
  InfoFromFormatDescriptiouint64_t n = v61(v43, v26, 0, v28);
  if (InfoFromFormatDescription) {
    goto LABEL_133;
  }
  int v62 = 0;
  uint64_t v95 = *MEMORY[0x1E4F32E28];
  uint64_t v94 = *MEMORY[0x1E4F1CFC8];
  while (1)
  {
    if (v62 == ValueAtIndex[1]) {
      goto LABEL_109;
    }
    if (v62) {
      break;
    }
    if (!*v25)
    {
      uint64_t v66 = *(void *)(a1 + 24);
      uint64_t v67 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v67) {
        uint64_t v68 = v67;
      }
      else {
        uint64_t v68 = 0;
      }
      uint64_t v74 = *(uint64_t (**)(uint64_t, uint64_t, void, unsigned int *))(v68 + 8);
      if (!v74) {
        goto LABEL_147;
      }
      InfoFromFormatDescriptiouint64_t n = v74(v66, 1885954932, 0, v25);
      if (InfoFromFormatDescription) {
        goto LABEL_133;
      }
      uint64_t v75 = *(void *)(a1 + 24);
      uint64_t v76 = *v25;
      uint64_t v77 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v78 = v77 ? v77 : 0;
      uint64_t v79 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v78 + 24);
      if (!v79) {
        goto LABEL_147;
      }
      uint64_t v80 = v75;
      uint64_t v81 = v76;
      goto LABEL_108;
    }
LABEL_109:
    if (++v62 == 3) {
      goto LABEL_110;
    }
  }
  if (v62 == 1)
  {
    if (!*v41)
    {
      uint64_t v63 = *(void *)(a1 + 24);
      uint64_t v64 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v64) {
        uint64_t v65 = v64;
      }
      else {
        uint64_t v65 = 0;
      }
      BOOL v69 = *(uint64_t (**)(uint64_t, uint64_t, void, unsigned int *))(v65 + 8);
      if (!v69) {
        goto LABEL_147;
      }
      InfoFromFormatDescriptiouint64_t n = v69(v63, 1885954932, 0, v25 + 12);
      if (InfoFromFormatDescription) {
        goto LABEL_133;
      }
      uint64_t v70 = *(void *)(a1 + 24);
      uint64_t v71 = *v41;
      uint64_t v72 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v73 = v72 ? v72 : 0;
      uint64_t v79 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v73 + 24);
      if (!v79) {
        goto LABEL_147;
      }
      uint64_t v80 = v70;
      uint64_t v81 = v71;
LABEL_108:
      InfoFromFormatDescriptiouint64_t n = v79(v80, v81, v95, v94);
      if (InfoFromFormatDescription) {
        goto LABEL_133;
      }
      goto LABEL_109;
    }
    goto LABEL_109;
  }
  if (v62 != 2) {
    goto LABEL_132;
  }
  if (*v42) {
    goto LABEL_110;
  }
  uint64_t v84 = *(void *)(a1 + 24);
  uint64_t v85 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v85) {
    uint64_t v86 = v85;
  }
  else {
    uint64_t v86 = 0;
  }
  int v87 = *(uint64_t (**)(uint64_t, uint64_t, void, _DWORD *))(v86 + 8);
  if (v87)
  {
    InfoFromFormatDescriptiouint64_t n = v87(v84, 1635088502, 0, v42);
    if (InfoFromFormatDescription) {
      goto LABEL_133;
    }
    uint64_t v88 = *(void *)(a1 + 24);
    uint64_t v89 = *v42;
    uint64_t v90 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v91 = v90 ? v90 : 0;
    CFTypeRef v92 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v91 + 24);
    if (v92)
    {
      InfoFromFormatDescriptiouint64_t n = v92(v88, v89, v95, v94);
      if (InfoFromFormatDescription) {
        goto LABEL_133;
      }
LABEL_110:
      uint64_t v37 = *v28;
      goto LABEL_59;
    }
  }
LABEL_147:
  uint64_t v47 = 4294954514;
LABEL_148:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  return v47;
}

uint64_t _addSampleBufferToCollection(uint64_t a1, uint64_t a2, const void *a3, void *value)
{
  if ((*(_DWORD *)(a2 + 4) | 2) == 2)
  {
    uint64_t v8 = (const void *)*(unsigned int *)(a2 + 72);
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 200), value);
    if (a3) {
      uint64_t v9 = a3;
    }
    else {
      uint64_t v9 = (const void *)*MEMORY[0x1E4F1D260];
    }
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 208), v9);
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 216), v8);
    *(void *)(a1 + 192) += CMSampleBufferGetTotalSampleSize((CMSampleBufferRef)value);
    while (*(void *)(a1 + 192) > *(void *)(a1 + 184))
    {
      uint64_t result = _reorderingBufferDequeueFirstSample(a1);
      if (result) {
        return result;
      }
    }
LABEL_14:
    size_t TotalSampleSize = CMSampleBufferGetTotalSampleSize((CMSampleBufferRef)value);
    uint64_t result = 0;
    *(void *)(a2 + 64) += TotalSampleSize;
    return result;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(unsigned int *)(a2 + 72);
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  BOOL v15 = *(uint64_t (**)(uint64_t, uint64_t, const void *, void *))(v14 + 64);
  if (!v15) {
    return 4294954514;
  }
  uint64_t result = v15(v11, v12, a3, value);
  if (!result) {
    goto LABEL_14;
  }
  return result;
}

uint64_t _createMovieWriterIfNeeded(uint64_t a1)
{
  if (*(void *)(a1 + 24)) {
    return 0;
  }
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(*(CFAllocatorRef *)a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return 4294950305;
  }
  CFIndex v3 = Mutable;
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F32C10], (const void *)*MEMORY[0x1E4F32C50]);
  CFDictionarySetValue(v3, (const void *)*MEMORY[0x1E4F32CA0], (const void *)*MEMORY[0x1E4F32CA8]);
  uint64_t v4 = FigMovieFormatWriterCreateWithByteStream();
  CFRelease(v3);
  return v4;
}

uint64_t CMPhotoHEIFFileWriterAddMetadataToImage(uint64_t a1, uint64_t a2, CFIndex a3, int a4, const void *a5, uint64_t a6, uint64_t a7, _DWORD *a8)
{
  if (!a1) {
    return 4294950306;
  }
  if (!*(unsigned char *)(a1 + 32))
  {
    if (!*(void *)(a1 + 16)) {
      return 4294950304;
    }
    uint64_t v15 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
    if (v15) {
      return v15;
    }
    if (a3 < 0) {
      goto LABEL_20;
    }
    CFArrayRef Count = *(const __CFArray **)(a1 + 40);
    if (Count) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if ((uint64_t)Count <= a3)
    {
LABEL_20:
      uint64_t v20 = 4294950306;
    }
    else
    {
      uint64_t ValueAtIndex = (CFMutableArrayRef *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), a3);
      uint64_t v18 = ValueAtIndex;
      int v19 = *((_DWORD *)ValueAtIndex + 1);
      if (!v19 || (uint64_t v20 = 4294950302, a4 == 1) && v19 == 2)
      {
        if (*(_DWORD *)ValueAtIndex)
        {
          uint64_t appended = FigSignalErrorAt();
LABEL_14:
          uint64_t v20 = appended;
        }
        else if (ValueAtIndex[18] {
               || (uint64_t MutableCopy = FigCFArrayCreateMutableCopy(), (v18[18] = (CFMutableArrayRef)MutableCopy) != 0))
        }
        {
          int v54 = 0;
          switch(a4)
          {
            case 0:
              uint64_t v23 = *(void *)(a1 + 16);
              uint64_t v24 = *((unsigned int *)v18 + 18);
              uint64_t v25 = *(void **)(CMBaseObjectGetVTable() + 16);
              if (v25) {
                uint64_t v26 = v25;
              }
              else {
                uint64_t v26 = 0;
              }
              if (*v26 < 8uLL) {
                goto LABEL_56;
              }
              uint64_t v46 = (uint64_t (*)(uint64_t, uint64_t, const void *, uint64_t, uint64_t, int *))v26[20];
              if (!v46) {
                goto LABEL_56;
              }
              uint64_t appended = v46(v23, v24, a5, a6, a7, &v54);
              if (appended) {
                goto LABEL_14;
              }
              goto LABEL_53;
            case 1:
              uint64_t v27 = *(void *)(a1 + 16);
              uint64_t v28 = *((unsigned int *)v18 + 18);
              uint64_t v29 = *(void **)(CMBaseObjectGetVTable() + 16);
              if (v29) {
                uint64_t v30 = v29;
              }
              else {
                uint64_t v30 = 0;
              }
              if (*v30 < 8uLL) {
                goto LABEL_56;
              }
              uint64_t v47 = (uint64_t (*)(uint64_t, uint64_t, const void *, uint64_t, int *))v30[21];
              if (!v47) {
                goto LABEL_56;
              }
              uint64_t appended = v47(v27, v28, a5, a7, &v54);
              if (appended) {
                goto LABEL_14;
              }
              goto LABEL_53;
            case 2:
              uint64_t v31 = *(void *)(a1 + 16);
              uint64_t v32 = *((unsigned int *)v18 + 18);
              uint64_t v33 = *(void **)(CMBaseObjectGetVTable() + 16);
              if (v33) {
                uint64_t v34 = v33;
              }
              else {
                uint64_t v34 = 0;
              }
              if (*v34 < 8uLL) {
                goto LABEL_56;
              }
              uint64_t v48 = (uint64_t (*)(uint64_t, uint64_t, const void *, int *))v34[22];
              if (!v48) {
                goto LABEL_56;
              }
              uint64_t appended = v48(v31, v32, a5, &v54);
              if (appended) {
                goto LABEL_14;
              }
              goto LABEL_53;
            case 3:
              uint64_t v35 = *(void *)(a1 + 16);
              uint64_t v36 = *((unsigned int *)v18 + 18);
              uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v37) {
                uint64_t v38 = v37;
              }
              else {
                uint64_t v38 = 0;
              }
              uint64_t v49 = *(uint64_t (**)(uint64_t, uint64_t, void, const void *))(v38 + 40);
              if (!v49) {
                goto LABEL_56;
              }
              uint64_t appended = v49(v35, v36, *MEMORY[0x1E4F33448], a5);
              if (appended) {
                goto LABEL_14;
              }
              DeepCopy = CMPhotoDictionaryCreateDeepCopy(*(const __CFAllocator **)a1, a5);
              if (!DeepCopy) {
                goto LABEL_65;
              }
              uint64_t v51 = DeepCopy;
              CFArrayAppendValue(v18[18], DeepCopy);
              CFRelease(v51);
              goto LABEL_54;
            case 4:
              CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)a5, @"Data");
              uint64_t v40 = CFDictionaryGetValue((CFDictionaryRef)a5, @"URI");
              uint64_t v41 = CFDictionaryGetValue((CFDictionaryRef)a5, @"Name");
              uint64_t v42 = *(void *)(a1 + 16);
              uint64_t v43 = *((unsigned int *)v18 + 18);
              uint64_t v44 = *(void **)(CMBaseObjectGetVTable() + 16);
              if (v44) {
                uint64_t v45 = v44;
              }
              else {
                uint64_t v45 = 0;
              }
              if (*v45 < 8uLL
                || (uint64_t v52 = (uint64_t (*)(uint64_t, uint64_t, const void *, const void *, const void *, int *))v45[23]) == 0)
              {
LABEL_56:
                uint64_t v20 = 4294954514;
                break;
              }
              uint64_t appended = v52(v42, v43, Value, v40, v41, &v54);
              if (appended) {
                goto LABEL_14;
              }
LABEL_53:
              uint64_t appended = FigCFArrayAppendInt32();
              if (appended) {
                goto LABEL_14;
              }
LABEL_54:
              uint64_t v20 = 0;
              if (a8) {
                *a8 = v54;
              }
              break;
            default:
              goto LABEL_20;
          }
        }
        else
        {
LABEL_65:
          uint64_t v20 = 4294950305;
        }
      }
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
    return v20;
  }
  return FigSignalErrorAt();
}

uint64_t CMPhotoHEIFFileWriterGetMetadataCount(uint64_t a1, CFIndex a2, const __CFArray **a3)
{
  if (!a1) {
    return 4294950306;
  }
  if (!*(void *)(a1 + 16)) {
    return 4294950304;
  }
  uint64_t v6 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  if (v6) {
    return v6;
  }
  if (a2 < 0) {
    goto LABEL_16;
  }
  CFArrayRef Count = *(const __CFArray **)(a1 + 40);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  if ((uint64_t)Count <= a2)
  {
LABEL_16:
    uint64_t v10 = 4294950306;
  }
  else
  {
    uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), a2);
    if (*(_DWORD *)ValueAtIndex)
    {
      CFArrayRef v9 = 0;
    }
    else
    {
      CFArrayRef v9 = (const __CFArray *)*((void *)ValueAtIndex + 18);
      if (v9) {
        CFArrayRef v9 = (const __CFArray *)CFArrayGetCount(v9);
      }
    }
    uint64_t v10 = 0;
    if (a3) {
      *a3 = v9;
    }
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  return v10;
}

uint64_t CMPhotoHEIFFileWriterAddCompressedMovie(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v292 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = 4294950306;
  if (!a1 || !a3) {
    goto LABEL_328;
  }
  uint64_t v5 = a1;
  uint64_t v6 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  if (v6)
  {
    uint64_t v3 = v6;
LABEL_328:
    _trackRelease(0);
    return v3;
  }
  CFIndex capacity = 0;
  if (*(void *)(v5 + 24)
    || *(unsigned char *)(v5 + 34)
    || CFArrayGetCount(*(CFArrayRef *)(v5 + 48))
    || (unint64_t v7 = (unsigned int *)malloc_type_calloc(1uLL, 0x20uLL, 0x1020040E72D6CFBuLL)) == 0)
  {
    uint64_t v3 = FigSignalErrorAt();
    _trackRelease(0);
    goto LABEL_61;
  }
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, CFIndex *))(v10 + 8);
  if (!v11)
  {
    int v17 = 0;
LABEL_50:
    uint64_t v3 = 4294954514;
    goto LABEL_51;
  }
  uint64_t IsFinal = v11(a3, &capacity);
  if (IsFinal) {
    goto LABEL_332;
  }
  if (capacity < 1) {
    goto LABEL_331;
  }
  uint64_t IsFinal = _ensureBackingIsFinal(v5);
  if (IsFinal) {
    goto LABEL_332;
  }
  uint64_t IsFinal = _createMovieWriterIfNeeded(v5);
  if (IsFinal) {
    goto LABEL_332;
  }
  CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], capacity, 0);
  *((void *)v8 + 2) = Mutable;
  if (!Mutable)
  {
LABEL_331:
    uint64_t IsFinal = FigSignalErrorAt();
    goto LABEL_332;
  }
  if (capacity < 1)
  {
    CFArrayRef v41 = Mutable;
  }
  else
  {
    CFIndex v15 = 0;
    uint64_t v16 = *MEMORY[0x1E4F32EE8];
    do
    {
      int v17 = (char *)malloc_type_calloc(1uLL, 0x90uLL, 0x102004016B32722uLL);
      if (!v17)
      {
LABEL_325:
        uint64_t v21 = FigSignalErrorAt();
LABEL_326:
        uint64_t v3 = v21;
        goto LABEL_51;
      }
      uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v18) {
        uint64_t v19 = v18;
      }
      else {
        uint64_t v19 = 0;
      }
      uint64_t v20 = *(uint64_t (**)(uint64_t, CFIndex, void *, void *, char *))(v19 + 48);
      if (!v20) {
        goto LABEL_50;
      }
      uint64_t v21 = v20(a3, v15, (void *)v17 + 3, (void *)v17 + 1, v17 + 12);
      if (v21) {
        goto LABEL_326;
      }
      *(void *)int v17 = v8;
      uint64_t v22 = *((void *)v17 + 3);
      uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v24 = v23 ? v23 : 0;
      uint64_t v25 = *(uint64_t (**)(uint64_t, void *))(v24 + 32);
      if (!v25) {
        goto LABEL_50;
      }
      uint64_t v21 = v25(v22, (void *)v17 + 4);
      if (v21) {
        goto LABEL_326;
      }
      uint64_t v21 = FigSampleGeneratorCreateForFormatReaderUsingByteStreams();
      if (v21) {
        goto LABEL_326;
      }
      uint64_t v26 = *((void *)v17 + 4);
      uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v28 = v27 ? v27 : 0;
      uint64_t v29 = *(uint64_t (**)(uint64_t, void *))(v28 + 24);
      if (!v29) {
        goto LABEL_50;
      }
      uint64_t v21 = v29(v26, (void *)v17 + 6);
      if (v21) {
        goto LABEL_326;
      }
      uint64_t v30 = *(void *)(v5 + 24);
      uint64_t v31 = *((unsigned int *)v17 + 2);
      uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v33 = v32 ? v32 : 0;
      uint64_t v34 = *(uint64_t (**)(uint64_t, uint64_t, void, void *))(v33 + 8);
      if (!v34) {
        goto LABEL_50;
      }
      uint64_t v21 = v34(v30, v31, 0, (void *)v17 + 2);
      if (v21) {
        goto LABEL_326;
      }
      uint64_t v35 = *(void *)(v5 + 24);
      uint64_t v36 = *((unsigned int *)v17 + 4);
      uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v38 = v37 ? v37 : 0;
      uint64_t v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const __CFAllocator *, void *))(v38 + 16);
      if (!v39) {
        goto LABEL_50;
      }
      uint64_t v21 = v39(v35, v36, v16, v13, (void *)v17 + 7);
      if (v21) {
        goto LABEL_326;
      }
      dispatch_queue_t v40 = dispatch_queue_create("com.apple.coremedia.CMPhoto.videoTrackWriter", 0);
      *((void *)v17 + 9) = v40;
      if (!v40) {
        goto LABEL_325;
      }
      CFArrayAppendValue(*((CFMutableArrayRef *)v8 + 2), v17);
      ++v15;
    }
    while (v15 < capacity);
    CFArrayRef v41 = (const __CFArray *)*((void *)v8 + 2);
  }
  CFIndex v48 = 0;
  CMTimeValue v256 = *MEMORY[0x1E4F34AB8];
  uint64_t v254 = *MEMORY[0x1E4F32E68];
  CMTimeEpoch v252 = *MEMORY[0x1E4F349D8];
  uint64_t v251 = *MEMORY[0x1E4F32DD0];
  uint64_t v249 = *MEMORY[0x1E4F34A38];
  uint64_t v248 = *MEMORY[0x1E4F32E50];
  uint64_t v247 = *MEMORY[0x1E4F34A00];
  uint64_t v246 = *MEMORY[0x1E4F32DF0];
  uint64_t v245 = *MEMORY[0x1E4F34AE0];
  uint64_t v244 = *MEMORY[0x1E4F32F18];
  uint64_t v243 = *MEMORY[0x1E4F34A68];
  uint64_t v242 = *MEMORY[0x1E4F32F08];
  uint64_t v241 = *MEMORY[0x1E4F349B0];
  uint64_t v240 = *MEMORY[0x1E4F32EF8];
  uint64_t v239 = *MEMORY[0x1E4F34998];
  uint64_t v238 = *MEMORY[0x1E4F32DB0];
  uint64_t v237 = *MEMORY[0x1E4F34A98];
  uint64_t v236 = *MEMORY[0x1E4F32EB8];
  uint64_t v235 = *MEMORY[0x1E4F349E0];
  uint64_t v234 = *MEMORY[0x1E4F32DE0];
  uint64_t v233 = *MEMORY[0x1E4F34A58];
  uint64_t v232 = *MEMORY[0x1E4F34898];
  uint64_t v229 = *MEMORY[0x1E4F34A80];
  uint64_t v219 = *MEMORY[0x1E4F32E70];
  uint64_t v228 = *MEMORY[0x1E4F349C0];
  CFStringRef key = (void *)*MEMORY[0x1E4F32D78];
  v224 = (void *)*MEMORY[0x1E4F32D68];
  v223 = (void *)*MEMORY[0x1E4F32DA0];
  v222 = (void *)*MEMORY[0x1E4F32D90];
  uint64_t v218 = *MEMORY[0x1E4F32DC0];
  uint64_t v226 = *MEMORY[0x1E4F32EA8];
  uint64_t v227 = *MEMORY[0x1E4F32EA0];
  uint64_t v220 = *MEMORY[0x1E4F32E90];
  uint64_t v221 = v5;
  uint64_t v217 = *MEMORY[0x1E4F32E38];
  uint64_t v49 = *(void *)(v5 + 24);
  v230 = v8;
  CFArrayRef v231 = v41;
LABEL_65:
  if (v41) {
    CFIndex Count = CFArrayGetCount(v41);
  }
  else {
    CFIndex Count = 0;
  }
  if (v48 < Count)
  {
    uint64_t v51 = 0;
    uint64_t v52 = *((unsigned int *)CFArrayGetValueAtIndex(v41, v48) + 4);
    v272.CMTimeValue value = v256;
    *(void *)&v272.timescale = v254;
    v272.epoch = v252;
    uint64_t v273 = v251;
    uint64_t v274 = v249;
    uint64_t v275 = v248;
    uint64_t v276 = v247;
    uint64_t v277 = v246;
    uint64_t v278 = v245;
    uint64_t v279 = v244;
    uint64_t v280 = v243;
    uint64_t v281 = v242;
    uint64_t v282 = v241;
    uint64_t v283 = v240;
    uint64_t v284 = v239;
    uint64_t v285 = v238;
    uint64_t v286 = v237;
    uint64_t v287 = v236;
    uint64_t v288 = v235;
    uint64_t v289 = v234;
    uint64_t v290 = v233;
    uint64_t v291 = v232;
    cf[0] = 0;
    while (1)
    {
      uint64_t v53 = *(CMTimeValue *)((char *)&v272.value + v51);
      uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject();
      uint64_t v55 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v55) {
        uint64_t v56 = v55;
      }
      else {
        uint64_t v56 = 0;
      }
      uint64_t v57 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(v56 + 48);
      if (v57) {
        v57(FigBaseObject, v53, v13, cf);
      }
      CFTypeRef v58 = cf[0];
      if (cf[0])
      {
        uint64_t v59 = *(void *)((char *)&v272.timescale + v51);
        uint64_t v60 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v60) {
          uint64_t v61 = v60;
        }
        else {
          uint64_t v61 = 0;
        }
        int v62 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFTypeRef))(v61 + 24);
        if (!v62)
        {
          uint64_t v3 = 4294954514;
          goto LABEL_86;
        }
        uint64_t v63 = v62(v49, v52, v59, v58);
        if (v63)
        {
          uint64_t v3 = v63;
LABEL_86:
          if (cf[0]) {
            CFRelease(cf[0]);
          }
          if (v3) {
            goto LABEL_206;
          }
          cf[0] = 0;
          uint64_t v64 = FigTrackReaderGetFigBaseObject();
          uint64_t v65 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v66 = v65 ? v65 : 0;
          uint64_t v67 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(v66 + 48);
          if (v67)
          {
            v67(v64, v229, v13, cf);
            if (cf[0])
            {
              CFIndex v68 = CFArrayGetCount((CFArrayRef)cf[0]);
              if (v68 < 1)
              {
                uint64_t v3 = 0;
              }
              else
              {
                CFIndex v69 = v68;
                CFMutableArrayRef v70 = CFArrayCreateMutable(v13, 0, MEMORY[0x1E4F1D510]);
                if (v70)
                {
                  uint64_t v71 = v70;
                  for (CFIndex i = 0; i != v69; ++i)
                  {
                    values[0] = 0;
                    values[0] = (void *)CFArrayGetValueAtIndex((CFArrayRef)cf[0], i);
                    CFDictionaryRef v73 = CFDictionaryCreate(v13, MEMORY[0x1E4F32BD0], (const void **)values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                    if (!v73)
                    {
                      uint64_t v3 = FigSignalErrorAt();
                      uint64_t v8 = v230;
                      goto LABEL_106;
                    }
                    CFDictionaryRef v74 = v73;
                    CFArrayAppendValue(v71, v73);
                    CFRelease(v74);
                  }
                  uint64_t v75 = *(void *)(CMBaseObjectGetVTable() + 16);
                  uint64_t v76 = v75 ? v75 : 0;
                  uint64_t v77 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __CFArray *))(v76 + 24);
                  uint64_t v8 = v230;
                  uint64_t v3 = v77 ? v77(v49, v52, v219, v71) : 4294954514;
LABEL_106:
                  CFRelease(v71);
                }
                else
                {
                  uint64_t v3 = FigSignalErrorAt();
                }
              }
              if (cf[0]) {
                CFRelease(cf[0]);
              }
              if (v3) {
                goto LABEL_206;
              }
            }
          }
          v269.CMTimeValue value = 0;
          CFTypeRef v268 = 0;
          uint64_t v78 = FigTrackReaderGetFigBaseObject();
          uint64_t v79 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v79) {
            uint64_t v80 = v79;
          }
          else {
            uint64_t v80 = 0;
          }
          uint64_t v81 = *(uint64_t (**)(uint64_t, uint64_t, const __CFAllocator *, CMTime *))(v80 + 48);
          if (!v81) {
            goto LABEL_121;
          }
          uint64_t v82 = v81(v78, v228, v13, &v269);
          if (v82) {
            goto LABEL_202;
          }
          CMTimeValue value = v269.value;
          uint64_t v84 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v85 = v84 ? v84 : 0;
          uint64_t v86 = *(uint64_t (**)(CMTimeValue, CFTypeRef *, CFTypeRef *))(v85 + 8);
          if (!v86)
          {
LABEL_121:
            uint64_t v3 = 4294954514;
            goto LABEL_122;
          }
          *(_OWORD *)CFTypeRef cf = *MEMORY[0x1E4F1FA48];
          *(void *)&long long v263 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
          uint64_t v87 = v86(value, cf, &v268);
          if (v87 == -12521)
          {
            uint64_t v3 = 0;
            goto LABEL_122;
          }
          uint64_t v3 = v87;
          if (!v87)
          {
            CFMutableArrayRef v104 = CFArrayCreateMutable(v13, 0, MEMORY[0x1E4F1D510]);
            if (!v104)
            {
              uint64_t v82 = FigSignalErrorAt();
LABEL_202:
              uint64_t v3 = v82;
              goto LABEL_122;
            }
            while (2)
            {
              long long v266 = 0u;
              long long v267 = 0u;
              long long v264 = 0u;
              long long v265 = 0u;
              *(_OWORD *)CFTypeRef cf = 0u;
              long long v263 = 0u;
              CFTypeRef v105 = v268;
              uint64_t v106 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v106) {
                uint64_t v107 = v106;
              }
              else {
                uint64_t v107 = 0;
              }
              int v108 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(v107 + 24);
              if (!v108)
              {
LABEL_182:
                uint64_t v3 = 4294954514;
LABEL_183:
                CFRelease(v104);
                goto LABEL_122;
              }
              uint64_t v109 = v108(v105, cf);
              if (v109) {
                goto LABEL_181;
              }
              *(_OWORD *)&v259[16] = v264;
              long long v260 = v265;
              *(_OWORD *)v261 = v266;
              *(_OWORD *)&v261[16] = v267;
              *(_OWORD *)values = *(_OWORD *)cf;
              *(_OWORD *)v259 = v263;
              CFMutableDictionaryRef v110 = CFDictionaryCreateMutable(v13, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              if (v110)
              {
                uint64_t v111 = v110;
                *(_OWORD *)&lhs.CMTimeValue value = *(_OWORD *)values;
                lhs.epoch = *(void *)v259;
                CFDictionaryRef v112 = CMTimeCopyAsDictionary(&lhs, v13);
                if (v112)
                {
                  CFDictionaryRef v113 = v112;
                  CFDictionaryAddValue(v111, key, v112);
                  CFRelease(v113);
                  CMTime lhs = *(CMTime *)&v259[8];
                  CFDictionaryRef v114 = CMTimeCopyAsDictionary(&lhs, v13);
                  if (v114)
                  {
                    CFDictionaryRef v115 = v114;
                    CFDictionaryAddValue(v111, v224, v114);
                    CFRelease(v115);
                    *(_OWORD *)&lhs.CMTimeValue value = v260;
                    lhs.epoch = *(void *)v261;
                    CFDictionaryRef v116 = CMTimeCopyAsDictionary(&lhs, v13);
                    if (v116)
                    {
                      CFDictionaryRef v117 = v116;
                      CFDictionaryAddValue(v111, v223, v116);
                      CFRelease(v117);
                      CMTime lhs = *(CMTime *)&v261[8];
                      CFDictionaryRef v118 = CMTimeCopyAsDictionary(&lhs, v13);
                      if (v118)
                      {
                        CFDictionaryRef v119 = v118;
                        CFDictionaryAddValue(v111, v222, v118);
                        CFRelease(v119);
                        CFArrayAppendValue(v104, v111);
                        CFRelease(v111);
LABEL_158:
                        CFTypeRef v120 = v268;
                        uint64_t v121 = *(void *)(CMBaseObjectGetVTable() + 16);
                        if (v121) {
                          uint64_t v122 = v121;
                        }
                        else {
                          uint64_t v122 = 0;
                        }
                        uint64_t v123 = *(uint64_t (**)(CFTypeRef, uint64_t))(v122 + 16);
                        if (!v123) {
                          goto LABEL_182;
                        }
                        uint64_t v124 = v123(v120, 1);
                        if (v124 == -12520)
                        {
                          uint64_t v125 = *(void *)(CMBaseObjectGetVTable() + 16);
                          if (v125) {
                            uint64_t v126 = v125;
                          }
                          else {
                            uint64_t v126 = 0;
                          }
                          CFTypeRef v133 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFMutableArrayRef))(v126 + 24);
                          if (v133)
                          {
                            uint64_t v109 = v133(v49, v52, v218, v104);
LABEL_181:
                            uint64_t v3 = v109;
                            goto LABEL_183;
                          }
                          goto LABEL_182;
                        }
                        uint64_t v3 = v124;
                        if (v124) {
                          goto LABEL_183;
                        }
                        continue;
                      }
                    }
                  }
                }
                uint64_t v3 = FigSignalErrorAt();
                CFRelease(v111);
              }
              else
              {
                uint64_t v3 = FigSignalErrorAt();
              }
              break;
            }
            if (v3) {
              goto LABEL_183;
            }
            CFArrayAppendValue(v104, 0);
            goto LABEL_158;
          }
LABEL_122:
          if (v268) {
            CFRelease(v268);
          }
          if (v269.value) {
            CFRelease((CFTypeRef)v269.value);
          }
          if (v3) {
            goto LABEL_206;
          }
          CMTimeMake(&time, 1, 1);
          CFDictionaryRef v88 = CMTimeCopyAsDictionary(&time, v13);
          if (!v88)
          {
            uint64_t v3 = FigSignalErrorAt();
            CFArrayRef v41 = v231;
            goto LABEL_192;
          }
          CFDictionaryRef v89 = v88;
          uint64_t v90 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v90) {
            uint64_t v91 = v90;
          }
          else {
            uint64_t v91 = 0;
          }
          CFTypeRef v92 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFDictionaryRef))(v91 + 24);
          if (!v92)
          {
            uint64_t v3 = 4294954514;
            CFArrayRef v41 = v231;
            goto LABEL_191;
          }
          uint64_t v93 = v92(v49, v52, v227, v89);
          if (v93) {
            goto LABEL_197;
          }
          Sunsigned int Int32 = FigCFNumberCreateSInt32();
          if (!SInt32)
          {
            uint64_t v93 = FigSignalErrorAt();
LABEL_197:
            uint64_t v3 = v93;
            uint64_t v8 = v230;
            CFArrayRef v41 = v231;
            goto LABEL_191;
          }
          uint64_t v95 = (const void *)SInt32;
          uint64_t v96 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v96) {
            uint64_t v97 = v96;
          }
          else {
            uint64_t v97 = 0;
          }
          CMTime v98 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const void *))(v97 + 24);
          if (!v98)
          {
            uint64_t v3 = 4294954514;
            goto LABEL_144;
          }
          uint64_t v99 = v98(v49, v52, v226, v95);
          if (v99) {
            goto LABEL_200;
          }
          uint64_t v100 = FigCFNumberCreateSInt32();
          if (!v100)
          {
            uint64_t v99 = FigSignalErrorAt();
LABEL_200:
            uint64_t v3 = v99;
LABEL_144:
            CFArrayRef v41 = v231;
            goto LABEL_190;
          }
          uint64_t v101 = (const void *)v100;
          uint64_t v102 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v102) {
            uint64_t v103 = v102;
          }
          else {
            uint64_t v103 = 0;
          }
          CFTypeRef v127 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const void *))(v103 + 24);
          if (!v127)
          {
            uint64_t v3 = 4294954514;
            goto LABEL_189;
          }
          uint64_t v128 = v127(v49, v52, v220, v101);
          if (v128) {
            goto LABEL_204;
          }
          *(_OWORD *)CFTypeRef cf = *MEMORY[0x1E4F1FA48];
          *(void *)&long long v263 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
          CFDictionaryRef v129 = CMTimeCopyAsDictionary((CMTime *)cf, v13);
          if (!v129)
          {
            uint64_t v128 = FigSignalErrorAt();
LABEL_204:
            uint64_t v3 = v128;
            goto LABEL_189;
          }
          CFDictionaryRef v130 = v129;
          uint64_t v131 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v131) {
            uint64_t v132 = v131;
          }
          else {
            uint64_t v132 = 0;
          }
          uint64_t v134 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFDictionaryRef))(v132 + 24);
          if (v134) {
            uint64_t v3 = v134(v49, v52, v217, v130);
          }
          else {
            uint64_t v3 = 4294954514;
          }
          CFRelease(v130);
LABEL_189:
          CFArrayRef v41 = v231;
          CFRelease(v101);
LABEL_190:
          CFRelease(v95);
          uint64_t v8 = v230;
LABEL_191:
          CFRelease(v89);
LABEL_192:
          ++v48;
          if (v3)
          {
LABEL_206:
            int v17 = 0;
            uint64_t v5 = v221;
            goto LABEL_51;
          }
          goto LABEL_65;
        }
        if (cf[0])
        {
          CFRelease(cf[0]);
          cf[0] = 0;
        }
      }
      v51 += 16;
      if (v51 == 176)
      {
        uint64_t v3 = 0;
        goto LABEL_86;
      }
    }
  }
  uint64_t v135 = 0;
  uint64_t v5 = v221;
  CFArrayRef v136 = (const __CFArray *)*((void *)v8 + 2);
  uint64_t v137 = *MEMORY[0x1E4F32D20];
  v272.CMTimeValue value = *MEMORY[0x1E4F32B98];
  *(void *)&v272.timescale = v137;
  uint64_t v138 = *MEMORY[0x1E4F32D10];
  v272.epoch = *MEMORY[0x1E4F32B68];
  uint64_t v273 = v138;
  uint64_t v139 = *MEMORY[0x1E4F32D30];
  uint64_t v274 = *MEMORY[0x1E4F32B88];
  uint64_t v275 = v139;
  uint64_t v140 = *MEMORY[0x1E4F34808];
  uint64_t v276 = *MEMORY[0x1E4F32B70];
  uint64_t v277 = v140;
  cf[0] = 0;
  while (1)
  {
    uint64_t v141 = *(CMTimeValue *)((char *)&v272.value + v135);
    uint64_t v142 = FigFormatReaderGetFigBaseObject();
    uint64_t v143 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v143) {
      uint64_t v144 = v143;
    }
    else {
      uint64_t v144 = 0;
    }
    uint64_t v145 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(v144 + 48);
    if (v145) {
      v145(v142, v141, v13, cf);
    }
    CFTypeRef v146 = cf[0];
    if (!cf[0]) {
      goto LABEL_221;
    }
    uint64_t v147 = *(void *)((char *)&v272.timescale + v135);
    uint64_t v148 = FigFormatWriterGetFigBaseObject();
    uint64_t v149 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v149) {
      uint64_t v150 = v149;
    }
    else {
      uint64_t v150 = 0;
    }
    uint64_t v151 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef))(v150 + 56);
    if (!v151)
    {
      uint64_t v3 = 4294954514;
      goto LABEL_224;
    }
    uint64_t v152 = v151(v148, v147, v146);
    if (v152) {
      break;
    }
    if (cf[0])
    {
      CFRelease(cf[0]);
      cf[0] = 0;
    }
LABEL_221:
    v135 += 16;
    if (v135 == 64)
    {
      uint64_t v3 = 0;
      goto LABEL_224;
    }
  }
  uint64_t v3 = v152;
LABEL_224:
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (v3) {
    goto LABEL_315;
  }
  cf[0] = 0;
  uint64_t v153 = FigFormatReaderGetFigBaseObject();
  uint64_t v154 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v154) {
    uint64_t v155 = v154;
  }
  else {
    uint64_t v155 = 0;
  }
  uint64_t v156 = *(void (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v155 + 48);
  if (!v156) {
    goto LABEL_272;
  }
  v156(v153, *MEMORY[0x1E4F32BB0], v13, cf);
  CFDictionaryRef v157 = (const __CFDictionary *)cf[0];
  if (!cf[0]) {
    goto LABEL_272;
  }
  CFIndex v158 = FigCFDictionaryGetCount();
  if (!v158)
  {
    unsigned int v174 = 0;
    uint64_t v160 = 0;
    int v173 = 0;
    long long v161 = 0;
    uint64_t v3 = 0;
    goto LABEL_258;
  }
  int64_t v159 = v158;
  uint64_t v160 = CFDictionaryCreateMutable(v13, v158, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v160)
  {
    uint64_t v3 = FigSignalErrorAt();
    unsigned int v174 = 0;
    int v173 = 0;
    long long v161 = 0;
    goto LABEL_258;
  }
  long long v161 = (const void **)malloc_type_calloc(v159, 8uLL, 0x6004044C4A2DFuLL);
  if (!v161)
  {
    uint64_t v3 = FigSignalErrorAt();
    unsigned int v174 = 0;
    int v173 = 0;
    goto LABEL_258;
  }
  long long v162 = (const void **)malloc_type_calloc(v159, 8uLL, 0x6004044C4A2DFuLL);
  if (!v162)
  {
    uint64_t v3 = FigSignalErrorAt();
    unsigned int v174 = 0;
    int v173 = 0;
    goto LABEL_255;
  }
  size_t v163 = v162;
  CFDictionaryGetKeysAndValues(v157, v161, v162);
  uint64_t v164 = v163;
  if (v159 < 1)
  {
    int v173 = v163;
    uint64_t v3 = 0;
    unsigned int v174 = v160;
    uint64_t v160 = 0;
LABEL_255:
    uint64_t v5 = v221;
    goto LABEL_258;
  }
  uint64_t v165 = 0;
  v250 = v160;
  v253 = v161;
  int64_t v255 = v159;
  while (1)
  {
    uint64_t v166 = v161[v165];
    if (!v164[v165])
    {
      CFMutableArrayRef v169 = CFArrayCreateMutable(v13, 0, MEMORY[0x1E4F1D510]);
      if (!v169)
      {
LABEL_333:
        uint64_t v215 = FigSignalErrorAt();
        int v173 = v164;
        uint64_t v3 = v215;
        unsigned int v174 = 0;
        uint64_t v5 = v221;
        uint64_t v8 = v230;
        goto LABEL_258;
      }
      goto LABEL_250;
    }
    CFIndex v167 = CFArrayGetCount((CFArrayRef)v164[v165]);
    if (v167)
    {
      uint64_t v216 = FigSignalErrorAt();
      int v173 = v164;
      uint64_t v3 = v216;
      unsigned int v174 = 0;
      goto LABEL_252;
    }
    CFMutableArrayRef v168 = CFArrayCreateMutable(v13, 0, MEMORY[0x1E4F1D510]);
    if (!v168) {
      goto LABEL_333;
    }
    CFMutableArrayRef v169 = v168;
    if (v167 >= 1) {
      break;
    }
LABEL_250:
    CFDictionaryAddValue(v160, v166, v169);
    CFRelease(v169);
    ++v165;
    uint64_t v8 = v230;
    if (v165 == v255)
    {
      int v173 = v164;
      uint64_t v3 = 0;
      unsigned int v174 = v160;
      uint64_t v160 = 0;
LABEL_252:
      uint64_t v5 = v221;
      goto LABEL_258;
    }
  }
  uint64_t v170 = 0;
  while (1)
  {
    LODWORD(values[0]) = 0;
    LODWORD(lhs.value) = 0;
    FigCFArrayGetInt32AtIndex();
    uint64_t v171 = v170 + 1;
    FigCFArrayGetInt32AtIndex();
    if (!_getDestinationTrackIDFromSourceTrackID((int)values[0], v136)
      || !_getDestinationTrackIDFromSourceTrackID(lhs.value, v136))
    {
      break;
    }
    uint64_t appended = FigCFArrayAppendInt32();
    if (appended) {
      goto LABEL_257;
    }
    uint64_t appended = FigCFArrayAppendInt32();
    if (appended) {
      goto LABEL_257;
    }
    v170 += 2;
    if (v171 + 1 >= v167)
    {
      uint64_t v160 = v250;
      uint64_t v164 = v163;
      long long v161 = v253;
      goto LABEL_250;
    }
  }
  uint64_t appended = FigSignalErrorAt();
LABEL_257:
  uint64_t v3 = appended;
  uint64_t v160 = v250;
  CFRelease(v169);
  unsigned int v174 = 0;
  uint64_t v5 = v221;
  uint64_t v8 = v230;
  int v173 = v163;
  long long v161 = v253;
LABEL_258:
  free(v173);
  free(v161);
  if (v160) {
    CFRelease(v160);
  }
  if (!v3)
  {
    uint64_t v175 = FigFormatWriterGetFigBaseObject();
    uint64_t v176 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v176) {
      uint64_t v177 = v176;
    }
    else {
      uint64_t v177 = 0;
    }
    int v178 = *(uint64_t (**)(uint64_t, void, __CFDictionary *))(v177 + 56);
    if (v178) {
      uint64_t v3 = v178(v175, *MEMORY[0x1E4F32D58], v174);
    }
    else {
      uint64_t v3 = 4294954514;
    }
  }
  if (v174) {
    CFRelease(v174);
  }
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (!v3)
  {
LABEL_272:
    cf[0] = 0;
    uint64_t v179 = FigFormatReaderGetFigBaseObject();
    uint64_t v180 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v180) {
      uint64_t v181 = v180;
    }
    else {
      uint64_t v181 = 0;
    }
    CFTypeRef v182 = *(void (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v181 + 48);
    if (!v182) {
      goto LABEL_293;
    }
    v182(v179, *MEMORY[0x1E4F32B48], v13, cf);
    if (!cf[0]) {
      goto LABEL_293;
    }
    CFIndex v183 = CFArrayGetCount((CFArrayRef)cf[0]);
    if (v183 < 1)
    {
      uint64_t v3 = 0;
    }
    else
    {
      CFIndex v184 = v183;
      CFMutableArrayRef v185 = CFArrayCreateMutable(v13, 0, MEMORY[0x1E4F1D510]);
      if (v185)
      {
        int v186 = v185;
        CFIndex v187 = 0;
        CFNumberRef v188 = (const void **)MEMORY[0x1E4F32BD0];
        v189 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
        v190 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
        do
        {
          values[0] = 0;
          values[0] = (void *)CFArrayGetValueAtIndex((CFArrayRef)cf[0], v187);
          CFDictionaryRef v191 = CFDictionaryCreate(v13, v188, (const void **)values, 1, v189, v190);
          if (!v191)
          {
            uint64_t v3 = FigSignalErrorAt();
            uint64_t v5 = v221;
            goto LABEL_289;
          }
          CFDictionaryRef v192 = v191;
          CFArrayAppendValue(v186, v191);
          CFRelease(v192);
          ++v187;
        }
        while (v184 != v187);
        uint64_t v193 = FigFormatWriterGetFigBaseObject();
        uint64_t v194 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v195 = v194 ? v194 : 0;
        uint64_t v5 = v221;
        v196 = *(uint64_t (**)(uint64_t, void, __CFArray *))(v195 + 56);
        uint64_t v3 = v196 ? v196(v193, *MEMORY[0x1E4F32CE0], v186) : 4294954514;
LABEL_289:
        CFRelease(v186);
      }
      else
      {
        uint64_t v3 = FigSignalErrorAt();
        uint64_t v5 = v221;
      }
    }
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    if (!v3)
    {
LABEL_293:
      CMNotificationCenterGetDefaultLocalCenter();
      uint64_t IsFinal = CMNotificationCenterAddListener();
      if (!IsFinal)
      {
        dispatch_group_t v197 = dispatch_group_create();
        *((void *)v8 + 3) = v197;
        if (v197)
        {
          CFTypeRef v198 = *(CFTypeRef *)(v5 + 24);
          if (v198) {
            CFTypeRef v198 = CFRetain(v198);
          }
          CFIndex v199 = 0;
          *((void *)v8 + 1) = v198;
          uint64_t v200 = *MEMORY[0x1E4F32CD0];
          v201 = (CMTime *)MEMORY[0x1E4F1F9F8];
          while (1)
          {
            CFArrayRef v202 = (const __CFArray *)*((void *)v8 + 2);
            if (v202) {
              CFArrayRef v202 = (const __CFArray *)CFArrayGetCount(v202);
            }
            if (v199 >= (uint64_t)v202) {
              break;
            }
            uint64_t ValueAtIndex = (char *)CFArrayGetValueAtIndex(*((CFArrayRef *)v8 + 2), v199);
            dispatch_group_enter(*((dispatch_group_t *)v8 + 3));
            ValueAtIndex[104] = 1;
            CMTime v272 = *v201;
            lhs.CMTimeValue value = 0;
            uint64_t v204 = FigFormatWriterGetFigBaseObject();
            uint64_t v205 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v205) {
              uint64_t v206 = v205;
            }
            else {
              uint64_t v206 = 0;
            }
            v207 = *(uint64_t (**)(uint64_t, uint64_t, const __CFAllocator *, CMTime *))(v206 + 48);
            if (!v207)
            {
              uint64_t v3 = 4294954514;
              goto LABEL_313;
            }
            uint64_t v3 = v207(v204, v200, v13, &lhs);
            v208 = (const void *)lhs.value;
            if (!v3)
            {
              CMTimeMakeFromDictionary(&v272, (CFDictionaryRef)lhs.value);
              v208 = (const void *)lhs.value;
            }
            if (v208) {
              CFRelease(v208);
            }
            if (v3) {
              goto LABEL_313;
            }
            cf[0] = 0;
            cf[1] = 0;
            *(void *)&long long v263 = 0;
            CMTimeMake((CMTime *)values, 1, 2);
            CMTime lhs = v272;
            CMTimeAdd((CMTime *)cf, &lhs, (CMTime *)values);
            CMTimeMake(&time, 1, 1);
            *(_OWORD *)&v269.CMTimeValue value = *(_OWORD *)cf;
            v269.epoch = v263;
            CMTimeAdd(&lhs, &v269, &time);
            *(CMTime *)(ValueAtIndex + 80) = lhs;
            v209 = (opaqueCMBufferQueue *)*((void *)ValueAtIndex + 7);
            *(_OWORD *)&lhs.CMTimeValue value = *(_OWORD *)cf;
            lhs.epoch = v263;
            uint64_t v210 = CMBufferQueueInstallTrigger(v209, (CMBufferQueueTriggerCallback)_lowWaterLevelTriggerFunction, ValueAtIndex, 1, &lhs, (CMBufferQueueTriggerToken *)ValueAtIndex + 8);
            ++v199;
            if (v210)
            {
              uint64_t v3 = v210;
LABEL_313:
              uint64_t v5 = v221;
              goto LABEL_314;
            }
          }
          dispatch_group_wait(*((dispatch_group_t *)v8 + 3), 0xFFFFFFFFFFFFFFFFLL);
          uint64_t v3 = *v8;
          if (v3) {
            goto LABEL_313;
          }
          uint64_t v5 = v221;
          uint64_t v211 = *(void *)(v221 + 24);
          uint64_t v212 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v212) {
            uint64_t v213 = v212;
          }
          else {
            uint64_t v213 = 0;
          }
          v214 = *(uint64_t (**)(uint64_t, void))(v213 + 40);
          if (v214)
          {
            uint64_t v3 = v214(v211, 0);
            if (!v3) {
              *(unsigned char *)(v221 + 34) = 1;
            }
          }
          else
          {
            uint64_t v3 = 4294954514;
          }
        }
        else
        {
          uint64_t v3 = FigSignalErrorAt();
        }
LABEL_314:
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterRemoveListener();
        goto LABEL_315;
      }
LABEL_332:
      uint64_t v3 = IsFinal;
    }
  }
LABEL_315:
  int v17 = 0;
LABEL_51:
  _trackRelease(v17);
  uint64_t v42 = (const void *)*((void *)v8 + 1);
  if (v42) {
    CFRelease(v42);
  }
  CFArrayRef v43 = (const __CFArray *)*((void *)v8 + 2);
  if (v43)
  {
    if (CFArrayGetCount(*((CFArrayRef *)v8 + 2)) >= 1)
    {
      CFIndex v44 = 0;
      do
      {
        uint64_t v45 = (void *)CFArrayGetValueAtIndex(v43, v44);
        _trackRelease(v45);
        ++v44;
      }
      while (v44 < CFArrayGetCount(v43));
    }
    CFRelease(v43);
  }
  uint64_t v46 = *((void *)v8 + 3);
  if (v46) {
    dispatch_release(v46);
  }
  free(v8);
LABEL_61:
  pthread_mutex_unlock(*(pthread_mutex_t **)(v5 + 8));
  return v3;
}

uint64_t _formatWriterNotificationErrorCallback(uint64_t a1, uint64_t a2)
{
  uint64_t result = FigCFDictionaryGetInt32IfPresent();
  if (result)
  {
    if (!*(_DWORD *)a2)
    {
      *(_DWORD *)a2 = 0;
      uint64_t result = CFArrayGetCount(*(CFArrayRef *)(a2 + 16));
      if (result >= 1)
      {
        for (CFIndex i = 0; i < result; ++i)
        {
          uint64_t ValueAtIndex = (dispatch_queue_t *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 16), i);
          dispatch_async_f(ValueAtIndex[9], ValueAtIndex, (dispatch_function_t)_readWriteSamplesUntilSampleBufferQueueIsFull);
          uint64_t result = CFArrayGetCount(*(CFArrayRef *)(a2 + 16));
        }
      }
    }
  }
  return result;
}

void _trackRelease(void *a1)
{
  if (a1)
  {
    CFArrayRef v2 = (const void *)*((void *)a1 + 3);
    if (v2) {
      CFRelease(v2);
    }
    uint64_t v3 = (const void *)*((void *)a1 + 4);
    if (v3) {
      CFRelease(v3);
    }
    uint64_t v4 = (const void *)*((void *)a1 + 5);
    if (v4) {
      CFRelease(v4);
    }
    uint64_t v5 = (const void *)*((void *)a1 + 6);
    if (v5) {
      CFRelease(v5);
    }
    uint64_t v6 = (opaqueCMBufferQueue *)*((void *)a1 + 7);
    if (v6)
    {
      CMBufferQueueRemoveTrigger(v6, *((CMBufferQueueTriggerToken *)a1 + 8));
      unint64_t v7 = (const void *)*((void *)a1 + 7);
      if (v7) {
        CFRelease(v7);
      }
    }
    uint64_t v8 = *((void *)a1 + 9);
    if (v8) {
      dispatch_release(v8);
    }
    free(a1);
  }
}

uint64_t CMPhotoHEIFFileWriterAddGroup(uint64_t a1, int a2, void *a3)
{
  if (!a1) {
    return 4294950306;
  }
  if (!*(void *)(a1 + 16)) {
    return 4294950304;
  }
  uint64_t v6 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  if (v6) {
    return v6;
  }
  if (*(unsigned char *)(a1 + 32)) {
    goto LABEL_12;
  }
  if (a2 == 1634497650)
  {
    unint64_t v7 = (const void **)MEMORY[0x1E4F33350];
  }
  else
  {
    if (a2 != 1937007986)
    {
LABEL_12:
      uint64_t v12 = FigSignalErrorAt();
      goto LABEL_13;
    }
    unint64_t v7 = (const void **)MEMORY[0x1E4F33358];
  }
  uint64_t v8 = *v7;
  if (!*v7) {
    goto LABEL_12;
  }
  unsigned int v21 = 0;
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = *(void **)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  if (*v11 < 2uLL || (uint64_t v14 = (uint64_t (*)(uint64_t, const void *, void, unsigned int *))v11[12]) == 0)
  {
    uint64_t v13 = 4294954514;
    goto LABEL_30;
  }
  uint64_t v12 = v14(v9, v8, 0, &v21);
  if (v12)
  {
LABEL_13:
    uint64_t v13 = v12;
LABEL_30:
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
    return v13;
  }
  if (!*(void *)(a1 + 56)
    && (CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(*(CFAllocatorRef *)a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]),
        (*(void *)(a1 + 56) = Mutable) == 0)
    || (uint64_t MutableCopy = FigCFDictionaryCreateMutableCopy()) == 0)
  {
    uint64_t v13 = 4294950305;
    goto LABEL_30;
  }
  int v17 = (__CFDictionary *)MutableCopy;
  CFMutableArrayRef v18 = CFArrayCreateMutable(*(CFAllocatorRef *)a1, 0, MEMORY[0x1E4F1D510]);
  if (v18)
  {
    CFDictionarySetValue(v17, (const void *)*MEMORY[0x1E4F33378], v18);
    CFDictionarySetValue(v17, (const void *)*MEMORY[0x1E4F33380], v8);
    CFNumberRef Int = CMPhotoCFNumberCreateInt(v21);
    if (Int)
    {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 56), Int, v17);
      uint64_t v13 = 0;
      if (a3) {
        *a3 = v21;
      }
      goto LABEL_25;
    }
  }
  else
  {
    CFNumberRef Int = 0;
  }
  uint64_t v13 = 4294950305;
LABEL_25:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  CFRelease(v17);
  if (v18) {
    CFRelease(v18);
  }
  if (Int) {
    CFRelease(Int);
  }
  return v13;
}

uint64_t CMPhotoHEIFFileWriterAddGroupProperties(uint64_t a1, int a2, const void *a3)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v6 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  if (v6) {
    return v6;
  }
  if (FigCFDictionaryGetCount() <= 0)
  {
    uint64_t v10 = FigSignalErrorAt();
    goto LABEL_13;
  }
  if (!*(void *)(a1 + 80)
    && (CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(*(CFAllocatorRef *)a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]),
        (*(void *)(a1 + 80) = Mutable) == 0)
    || (CFNumberRef Int = CMPhotoCFNumberCreateInt(a2)) == 0)
  {
    uint64_t v10 = 4294950305;
LABEL_13:
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
    return v10;
  }
  CFNumberRef v9 = Int;
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 80), Int, a3);
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  CFRelease(v9);
  return 0;
}

uint64_t CMPhotoHEIFFileWriterAddImageToGroup(uint64_t a1, CFIndex a2, uint64_t a3)
{
  if (!a1) {
    return 4294950306;
  }
  if (!*(void *)(a1 + 16)) {
    return 4294950304;
  }
  uint64_t v6 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  if (v6) {
    return v6;
  }
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v15 = FigSignalErrorAt();
    goto LABEL_29;
  }
  if (a2 < 0) {
    goto LABEL_24;
  }
  CFArrayRef Count = *(const __CFArray **)(a1 + 40);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  if ((uint64_t)Count <= a2)
  {
LABEL_24:
    uint64_t appended = 4294950306;
    goto LABEL_22;
  }
  uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), a2);
  if (ValueAtIndex[1])
  {
    uint64_t appended = 4294950302;
    goto LABEL_22;
  }
  CFNumberRef v9 = ValueAtIndex;
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = ValueAtIndex[18];
  uint64_t v12 = *(void **)(CMBaseObjectGetVTable() + 16);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  if (*v13 < 2uLL || (uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))v13[13]) == 0)
  {
    uint64_t appended = 4294954514;
LABEL_22:
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
    return appended;
  }
  uint64_t v15 = v14(v10, v11, a3, 0);
  if (v15)
  {
LABEL_29:
    uint64_t appended = v15;
    goto LABEL_22;
  }
  CFNumberRef Int = CMPhotoCFNumberCreateInt(a3);
  if (!Int)
  {
    uint64_t appended = 4294950305;
    goto LABEL_22;
  }
  CFNumberRef v17 = Int;
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 56), Int);
  if (Value && (uint64_t v19 = (__CFArray *)CFDictionaryGetValue(Value, (const void *)*MEMORY[0x1E4F33378])) != 0) {
    uint64_t appended = CMPhotoCFArrayAppendInt32(v19, v9[18]);
  }
  else {
    uint64_t appended = 4294950304;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  CFRelease(v17);
  return appended;
}

uint64_t CMPhotoHEIFFileWriterAddGroupToGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1) {
    return 4294950306;
  }
  if (!*(void *)(a1 + 16)) {
    return 4294950304;
  }
  if (a2 == a3) {
    return 4294950306;
  }
  uint64_t v6 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  if (v6) {
    return v6;
  }
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t appended = FigSignalErrorAt();
    goto LABEL_29;
  }
  CFNumberRef Int = CMPhotoCFNumberCreateInt(a3);
  if (!Int) {
    goto LABEL_23;
  }
  CFNumberRef v8 = Int;
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 56), Int);
  if (!Value)
  {
LABEL_24:
    uint64_t v18 = FigSignalErrorAt();
LABEL_25:
    uint64_t appended = v18;
    goto LABEL_20;
  }
  CFDictionaryRef v10 = Value;
  CFRelease(v8);
  CFNumberRef v11 = CMPhotoCFNumberCreateInt(a2);
  if (!v11)
  {
LABEL_23:
    uint64_t appended = 4294950305;
LABEL_29:
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
    return appended;
  }
  CFNumberRef v8 = v11;
  if (!CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 56), v11)) {
    goto LABEL_24;
  }
  uint64_t v12 = (__CFArray *)CFDictionaryGetValue(v10, (const void *)*MEMORY[0x1E4F33378]);
  if (!v12)
  {
    uint64_t appended = 4294950304;
    goto LABEL_20;
  }
  uint64_t v13 = v12;
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void **)(CMBaseObjectGetVTable() + 16);
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  if (*v16 >= 7uLL)
  {
    CFNumberRef v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))v16[19];
    if (v17)
    {
      uint64_t v18 = v17(v14, a2, a3, 0);
      if (!v18)
      {
        uint64_t appended = CMPhotoCFArrayAppendInt32(v13, a2);
        if (!appended) {
          CFSetAddValue(*(CFMutableSetRef *)(a1 + 104), (const void *)0x756E6966);
        }
        goto LABEL_20;
      }
      goto LABEL_25;
    }
  }
  uint64_t appended = 4294954514;
LABEL_20:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  CFRelease(v8);
  return appended;
}

uint64_t CMPhotoHEIFFileWriterGetPropertiesForImage(uint64_t a1, CFIndex a2, _OWORD *a3, _DWORD *a4)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v8 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  if (v8) {
    return v8;
  }
  if (a2 < 0) {
    goto LABEL_13;
  }
  CFArrayRef Count = *(const __CFArray **)(a1 + 40);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  if ((uint64_t)Count <= a2)
  {
LABEL_13:
    uint64_t v11 = 4294950306;
  }
  else
  {
    uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), a2);
    if (a3) {
      *a3 = ValueAtIndex[1];
    }
    uint64_t v11 = 0;
    if (a4) {
      *a4 = *((_DWORD *)ValueAtIndex + 2);
    }
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  return v11;
}

uint64_t CMPhotoHEIFFileWriterGetPropertiesForSequence(uint64_t a1, CFIndex a2, int a3, _OWORD *a4, _DWORD *a5)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v10 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  if (v10) {
    return v10;
  }
  if (a2 < 0) {
    goto LABEL_21;
  }
  CFArrayRef Count = *(const __CFArray **)(a1 + 48);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  if ((uint64_t)Count <= a2)
  {
LABEL_21:
    uint64_t v13 = 4294950306;
  }
  else
  {
    uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 48), a2);
    switch(a3)
    {
      case 0:
LABEL_12:
        if (!*((_DWORD *)ValueAtIndex + 7) || ValueAtIndex[2] == 0)
        {
          uint64_t v13 = 4294950303;
        }
        else
        {
          if (a4) {
            *a4 = ValueAtIndex[2];
          }
          uint64_t v13 = 0;
          if (a5) {
            *a5 = *((_DWORD *)ValueAtIndex + 7);
          }
        }
        goto LABEL_19;
      case 2:
        ValueAtIndex += 6;
        goto LABEL_12;
      case 1:
        ValueAtIndex += 3;
        goto LABEL_12;
    }
    uint64_t v13 = FigSignalErrorAt();
  }
LABEL_19:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  return v13;
}

uint64_t CMPhotoHEIFFileWriterGetOrientationTransformsForImage(uint64_t a1, CFIndex a2, unsigned char *a3, _DWORD *a4, unsigned char *a5, _DWORD *a6)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v12 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  if (v12) {
    return v12;
  }
  if (a2 < 0) {
    goto LABEL_17;
  }
  CFArrayRef Count = *(const __CFArray **)(a1 + 40);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  if ((uint64_t)Count <= a2)
  {
LABEL_17:
    uint64_t v15 = 4294950306;
  }
  else
  {
    uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), a2);
    if (a3) {
      *a3 = ValueAtIndex[32];
    }
    if (a4) {
      *a4 = *((_DWORD *)ValueAtIndex + 9);
    }
    if (a5) {
      *a5 = ValueAtIndex[40];
    }
    uint64_t v15 = 0;
    if (a6) {
      *a6 = *((_DWORD *)ValueAtIndex + 11);
    }
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  return v15;
}

uint64_t CMPhotoHEIFFileWriterGetSequenceHandleForImage(uint64_t a1, CFIndex a2, char *a3, uint64_t *a4)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v8 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  if (v8) {
    return v8;
  }
  if ((a2 & 0x8000000000000000) == 0)
  {
    CFArrayRef Count = *(const __CFArray **)(a1 + 40);
    if (Count) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if ((uint64_t)Count > a2)
    {
      uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), a2);
      if ((*(_DWORD *)ValueAtIndex - 1) > 1)
      {
        char v12 = 0;
        uint64_t v11 = -1;
        if (!a3) {
          goto LABEL_12;
        }
      }
      else
      {
        uint64_t v11 = ValueAtIndex[10];
        char v12 = 1;
        if (!a3)
        {
LABEL_12:
          uint64_t v13 = 0;
          if (a4) {
            *a4 = v11;
          }
          goto LABEL_14;
        }
      }
      *a3 = v12;
      goto LABEL_12;
    }
  }
  uint64_t v13 = 4294950306;
LABEL_14:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  return v13;
}

uint64_t CMPhotoHEIFFileWriterGetTimeStampForImage(uint64_t a1, CFIndex a2, uint64_t a3)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v6 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  if (v6) {
    return v6;
  }
  if (a2 < 0) {
    goto LABEL_11;
  }
  CFArrayRef Count = *(const __CFArray **)(a1 + 40);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  if ((uint64_t)Count <= a2)
  {
LABEL_11:
    uint64_t v9 = 4294950306;
  }
  else
  {
    uint64_t ValueAtIndex = (char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), a2);
    uint64_t v9 = 0;
    if (a3)
    {
      long long v10 = *(_OWORD *)(ValueAtIndex + 88);
      *(void *)(a3 + 16) = *((void *)ValueAtIndex + 13);
      *(_OWORD *)a3 = v10;
    }
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  return v9;
}

uint64_t CMPhotoHEIFFileWriterSetTimeStampForImage(uint64_t a1, CFIndex a2, uint64_t a3)
{
  if (!a1 || (*(unsigned char *)(a3 + 12) & 1) == 0) {
    return 4294950306;
  }
  uint64_t v6 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  if (v6) {
    return v6;
  }
  if (a2 < 0) {
    goto LABEL_12;
  }
  CFArrayRef Count = *(const __CFArray **)(a1 + 40);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  if ((uint64_t)Count <= a2)
  {
LABEL_12:
    uint64_t v9 = 4294950306;
  }
  else
  {
    uint64_t ValueAtIndex = (char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), a2);
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(a3 + 16);
    *(_OWORD *)(ValueAtIndex + 88) = *(_OWORD *)a3;
    *((void *)ValueAtIndex + 13) = v10;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  return v9;
}

uint64_t CMPhotoHEIFFileWriterCompareReservedImageHandleWithOptions(uint64_t a1, const __CFDictionary *a2, int a3, const opaqueCMFormatDescription *a4, CFIndex a5)
{
  CFTypeRef cf = 0;
  if (!a1) {
    return 0;
  }
  if (CMPhotoHEIFFileWriterCompareReservedImageHandleWithOptions_onceToken != -1) {
    dispatch_once(&CMPhotoHEIFFileWriterCompareReservedImageHandleWithOptions_onceToken, &__block_literal_global_10);
  }
  if (pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8))) {
    return 0;
  }
  CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), a5);
  if (_createHEIFWriterImageHandleConfigurationKey(a2, a3, a4, (__CFData **)&cf)) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = FigCFEqual();
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  if (cf) {
    CFRelease(cf);
  }
  return v10;
}

uint64_t _createHEIFWriterImageHandleConfigurationKey(const __CFDictionary *a1, int a2, CMVideoFormatDescriptionRef videoDesc, __CFData **a4)
{
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  CGRect CleanAperture = CMVideoFormatDescriptionGetCleanAperture(videoDesc, 1u);
  double width = CleanAperture.size.width;
  double height = CleanAperture.size.height;
  CMVideoDimensions Dimensions = CMVideoFormatDescriptionGetDimensions(videoDesc);
  CFMutableDataRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (!Mutable) {
    return 4294950305;
  }
  char v12 = Mutable;
  *(_DWORD *)bytes = a2;
  unint64_t v24 = vcvtad_u64_f64(width);
  unint64_t v25 = vcvtad_u64_f64(height);
  CMVideoDimensions v26 = Dimensions;
  if (a1)
  {
    BYTE4(v29) = 0;
    LODWORD(v29) = FigCFDictionaryGetIntIfPresent();
    *(_DWORD *)((char *)&v29 + 6) = -1;
    BYTE5(v29) = FigCFDictionaryGetIntIfPresent();
    BYTE10(v29) = 0;
    CMPhotoCFDictionaryGetBooleanIfPresent(a1, (const void *)*MEMORY[0x1E4F332E8], (unsigned char *)&v29 + 10);
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E4F332E0]);
    FigCFArrayGetIntAtIndex();
    if (Value) {
      int Count = CFArrayGetCount(Value);
    }
    else {
      int Count = 0;
    }
    HIDWORD(v30) = Count;
  }
  if (videoDesc)
  {
    Extensiouint64_t n = (const __CFString *)CMFormatDescriptionGetExtension(videoDesc, (CFStringRef)*MEMORY[0x1E4F24A90]);
    CFStringRef v16 = (const __CFString *)CMFormatDescriptionGetExtension(videoDesc, (CFStringRef)*MEMORY[0x1E4F24BC8]);
    CFStringRef v17 = (const __CFString *)CMFormatDescriptionGetExtension(videoDesc, (CFStringRef)*MEMORY[0x1E4F24C18]);
    CMFormatDescriptionGetExtension(videoDesc, (CFStringRef)*MEMORY[0x1E4F1EDB0]);
    BYTE11(v29) = FigCFEqual();
    HIDWORD(v29) = CVColorPrimariesGetIntegerCodePointForString(Extension);
    LODWORD(v30) = CMPhotoCVYCbCrMatrixGetIntegerCodePointForString(v17);
    DWORD1(v30) = CVTransferFunctionGetIntegerCodePointForString(v16);
    if (v30 == 2 && FigCFEqual()) {
      LODWORD(v30) = 0;
    }
    CFDictionaryRef v18 = (const __CFDictionary *)CMFormatDescriptionGetExtension(videoDesc, (CFStringRef)*MEMORY[0x1E4F24A78]);
    *(void *)&long long v27 = CMPhotoGetCropRectFromCLAPDict(v18, (double)Dimensions.width, (double)Dimensions.height);
    *((void *)&v27 + 1) = v19;
    *(void *)&long long v28 = v20;
    *((void *)&v28 + 1) = v21;
  }
  CFDataAppendBytes(v12, bytes, 92);
  if (a4)
  {
    uint64_t result = 0;
    *a4 = v12;
  }
  else
  {
    CFRelease(v12);
    return 0;
  }
  return result;
}

BOOL CMPhotoHEIFFileWriterImageSequenceFirstFrameCompleted(uint64_t a1, int a2, CFIndex idx)
{
  BOOL result = 0;
  if (a1 && (idx & 0x8000000000000000) == 0)
  {
    CFArrayRef Count = *(const __CFArray **)(a1 + 48);
    if (Count) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    return (uint64_t)Count > idx && *((void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 48), idx) + 1) > 1;
  }
  return result;
}

uint64_t _pendingGroupPropertiesApplier(uint64_t key, uint64_t a2, _DWORD *a3)
{
  if (!a3[2])
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(*(void *)a3 + 56), (const void *)key);
    if (Value && CFDictionaryGetValue(Value, (const void *)*MEMORY[0x1E4F33378]))
    {
      Uunsigned int Int32 = FigCFNumberGetUInt32();
      uint64_t v7 = *(void *)(*(void *)a3 + 16);
      uint64_t v8 = *(void **)(CMBaseObjectGetVTable() + 16);
      if (v8) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = 0;
      }
      if (*v9 >= 6uLL && (uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))v9[18]) != 0) {
        CFStringRef key = v10(v7, UInt32, a2, 0);
      }
      else {
        CFStringRef key = 4294954514;
      }
    }
    else
    {
      CFStringRef key = FigSignalErrorAt();
    }
    a3[2] = key;
  }
  return key;
}

uint64_t ___writePendingReferencesIfNeeded_block_invoke(uint64_t a1, const __CFArray *a2)
{
  uint64_t result = FigCFArrayGetInt32AtIndex();
  if (!result
    || (uint64_t result = FigCFArrayGetInt32AtIndex(), !result)
    || a2 && CFArrayGetCount(a2) >= 3 && (uint64_t result = FigCFArrayGetInt32AtIndex(), !result))
  {
    uint64_t v8 = (uint64_t *)(a1 + 32);
    int v22 = -16992;
LABEL_37:
    *(_DWORD *)(*(void *)(*v8 + 8) + 24) = v22;
    return result;
  }
  uint64_t result = FigCFArrayGetValueAtIndex();
  if (!result || (uint64_t v5 = result, (result = FigCFArrayGetValueAtIndex()) == 0))
  {
    uint64_t v8 = (uint64_t *)(a1 + 32);
LABEL_36:
    int v22 = -16990;
    goto LABEL_37;
  }
  uint64_t v6 = result;
  uint64_t v7 = 0;
  uint64_t v8 = (uint64_t *)(a1 + 32);
  while (1)
  {
    CFArrayRef Count = *(const __CFArray **)(*(void *)(a1 + 40) + 40);
    if (Count) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if (v7 >= (uint64_t)Count) {
      break;
    }
    uint64_t result = FigCFArrayGetValueAtIndex();
    if (!result) {
      goto LABEL_36;
    }
    if (v7 != -1 && *(_DWORD *)(result + 4) == 2 && *(void *)(result + 112) == -1)
    {
      uint64_t result = _addItemReference(*(void *)(a1 + 40), *(_DWORD *)(v6 + 72), *(unsigned int *)(result + 72), 1635088492);
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
      if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
        return result;
      }
    }
    ++v7;
  }
  uint64_t v10 = 0;
  uint64_t v11 = *MEMORY[0x1E4F33448];
  while (1)
  {
    uint64_t result = *(void *)(v5 + 144);
    if (result) {
      uint64_t result = CFArrayGetCount((CFArrayRef)result);
    }
    if (v10 >= result) {
      break;
    }
    uint64_t ValueAtIndex = (const void *)FigCFArrayGetValueAtIndex();
    uint64_t v13 = ValueAtIndex;
    if (ValueAtIndex && (CFTypeID v14 = CFGetTypeID(ValueAtIndex), v14 == CFNumberGetTypeID()))
    {
      Sunsigned int Int32 = FigCFNumberGetSInt32();
      uint64_t result = _addItemReference(*(void *)(a1 + 40), *(_DWORD *)(v6 + 72), SInt32, 1667527523);
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
      uint64_t v16 = *(void *)(a1 + 32);
    }
    else
    {
      uint64_t v17 = *(void *)(*(void *)(a1 + 40) + 16);
      uint64_t v18 = *(unsigned int *)(v6 + 72);
      uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v20 = v19 ? v19 : 0;
      uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const void *))(v20 + 40);
      uint64_t result = v21 ? v21(v17, v18, v11, v13) : 4294954514;
      *(_DWORD *)(*(void *)(*v8 + 8) + 24) = result;
      uint64_t v16 = *v8;
    }
    if (*(_DWORD *)(*(void *)(v16 + 8) + 24)) {
      break;
    }
    ++v10;
  }
  return result;
}

uint64_t ___addBackwardsCompatibleStereoGroupsIfNeeded_block_invoke(uint64_t result)
{
  if (!*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24))
  {
    uint64_t v1 = (void *)result;
    FigCFDictionaryGetValue();
    uint64_t v2 = *MEMORY[0x1E4F33358];
    uint64_t result = FigCFEqual();
    if (result)
    {
      uint64_t result = FigCFDictionaryGetValue();
      if (result)
      {
        uint64_t result = CFArrayGetCount((CFArrayRef)result);
        if (result == 3)
        {
          Uunsigned int Int32 = FigCFNumberGetUInt32();
          unsigned int v34 = 0;
          uint64_t v4 = *(void *)(v1[6] + 16);
          uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v6 = v5 ? (void *)v5 : 0;
          if (*v6 >= 2uLL && (uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, void, unsigned int *))v6[12]) != 0) {
            uint64_t result = v7(v4, v2, 0, &v34);
          }
          else {
            uint64_t result = 4294954514;
          }
          *(_DWORD *)(*(void *)(v1[4] + 8) + 24) = result;
          if (!*(_DWORD *)(*(void *)(v1[4] + 8) + 24))
          {
            unsigned int v33 = 0;
            uint64_t v8 = *(void *)(v1[6] + 16);
            uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v10 = v9 ? (void *)v9 : 0;
            if (*v10 >= 2uLL && (uint64_t v11 = (uint64_t (*)(uint64_t, void, void, unsigned int *))v10[12]) != 0) {
              uint64_t result = v11(v8, *MEMORY[0x1E4F33350], 0, &v33);
            }
            else {
              uint64_t result = 4294954514;
            }
            *(_DWORD *)(*(void *)(v1[4] + 8) + 24) = result;
            if (!*(_DWORD *)(*(void *)(v1[4] + 8) + 24))
            {
              uint64_t result = FigCFArrayGetInt32AtIndex();
              if (result)
              {
                uint64_t result = FigCFArrayGetInt32AtIndex();
                if (result)
                {
                  uint64_t v12 = *(void *)(v1[6] + 16);
                  uint64_t v13 = v34;
                  uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
                  uint64_t v15 = v14 ? (void *)v14 : 0;
                  if (*v15 >= 2uLL && (uint64_t v16 = (uint64_t (*)(uint64_t, void, uint64_t, void))v15[13]) != 0) {
                    uint64_t result = v16(v12, 0, v13, 0);
                  }
                  else {
                    uint64_t result = 4294954514;
                  }
                  *(_DWORD *)(*(void *)(v1[4] + 8) + 24) = result;
                  if (!*(_DWORD *)(*(void *)(v1[4] + 8) + 24))
                  {
                    uint64_t v17 = *(void *)(v1[6] + 16);
                    uint64_t v18 = v34;
                    uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
                    uint64_t v20 = v19 ? (void *)v19 : 0;
                    if (*v20 >= 2uLL
                      && (uint64_t v21 = (uint64_t (*)(uint64_t, void, uint64_t, void))v20[13]) != 0)
                    {
                      uint64_t result = v21(v17, 0, v18, 0);
                    }
                    else
                    {
                      uint64_t result = 4294954514;
                    }
                    *(_DWORD *)(*(void *)(v1[4] + 8) + 24) = result;
                    if (!*(_DWORD *)(*(void *)(v1[4] + 8) + 24))
                    {
                      uint64_t v22 = *(void *)(v1[6] + 16);
                      uint64_t v23 = v33;
                      uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
                      unint64_t v25 = v24 ? (void *)v24 : 0;
                      if (*v25 >= 7uLL
                        && (CMVideoDimensions v26 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))v25[19]) != 0)
                      {
                        uint64_t result = v26(v22, UInt32, v23, 0);
                      }
                      else
                      {
                        uint64_t result = 4294954514;
                      }
                      *(_DWORD *)(*(void *)(v1[4] + 8) + 24) = result;
                      if (!*(_DWORD *)(*(void *)(v1[4] + 8) + 24))
                      {
                        uint64_t v27 = *(void *)(v1[6] + 16);
                        uint64_t v29 = v33;
                        uint64_t v28 = v34;
                        long long v30 = *(void **)(CMBaseObjectGetVTable() + 16);
                        if (v30) {
                          uint64_t v31 = v30;
                        }
                        else {
                          uint64_t v31 = 0;
                        }
                        if (*v31 >= 7uLL
                          && (uint64_t v32 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))v31[19]) != 0)
                        {
                          uint64_t result = v32(v27, v28, v29, 0);
                        }
                        else
                        {
                          uint64_t result = 4294954514;
                        }
                        *(_DWORD *)(*(void *)(v1[4] + 8) + 24) = result;
                        if (!*(_DWORD *)(*(void *)(v1[4] + 8) + 24)) {
                          *(unsigned char *)(*(void *)(v1[5] + 8) + 24) = 1;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        *(_DWORD *)(*(void *)(v1[4] + 8) + 24) = -16992;
      }
    }
  }
  return result;
}

uint64_t _reorderingBufferDequeueFirstSample(uint64_t a1)
{
  uint64_t ValueAtIndex = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 200), 0);
  uint64_t v3 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 216), 0);
  uint64_t v4 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 208), 0);
  if (v4 == (const void *)*MEMORY[0x1E4F1D260]) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, const void *, const void *, opaqueCMSampleBuffer *))(v8 + 64);
  if (!v9) {
    return 4294954514;
  }
  uint64_t result = v9(v6, v3, v5, ValueAtIndex);
  if (!result)
  {
    size_t TotalSampleSize = CMSampleBufferGetTotalSampleSize(ValueAtIndex);
    uint64_t v12 = *(__CFArray **)(a1 + 200);
    *(void *)(a1 + 192) -= TotalSampleSize;
    CFArrayRemoveValueAtIndex(v12, 0);
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 208), 0);
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 216), 0);
    return 0;
  }
  return result;
}

void _addValueToArray(uint64_t a1, __CFArray *a2)
{
  Uunsigned int Int32 = (const void *)FigCFNumberCreateUInt32();
  if (UInt32)
  {
    uint64_t v4 = UInt32;
    CFArrayAppendValue(a2, UInt32);
    CFRelease(v4);
  }
}

void _addNumberToArray(void *value, CFMutableArrayRef theArray)
{
  if (theArray) {
    CFArrayAppendValue(theArray, value);
  }
}

uint64_t _areSiblingThumbnailsMIAFCompliant(uint64_t a1, uint64_t a2, unint64_t a3, char *a4)
{
  CFArrayRef v6 = *(const __CFArray **)(a2 + 128);
  if (v6 && (CFIndex v9 = CFArrayGetCount(v6), v9 >= 1))
  {
    CFIndex v10 = v9;
    CFIndex v11 = 0;
    while (1)
    {
      CFIndex ValueAtIndex = (CFIndex)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 128), v11);
      if (ValueAtIndex < 0) {
        return 4294950306;
      }
      CFIndex v13 = ValueAtIndex;
      CFArrayRef Count = *(const __CFArray **)(a1 + 40);
      if (Count) {
        CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
      }
      if ((uint64_t)Count < v13) {
        return 4294950306;
      }
      uint64_t v15 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), v13);
      unint64_t v16 = v15[3] * v15[2];
      if (v16 > a3 && v16 / a3 < 0xC9)
      {
        char v17 = 1;
        goto LABEL_12;
      }
      if (v10 == ++v11) {
        goto LABEL_11;
      }
    }
  }
  else
  {
LABEL_11:
    char v17 = 0;
LABEL_12:
    uint64_t result = 0;
    if (a4) {
      *a4 = v17;
    }
  }
  return result;
}

uint64_t _addFirstSampleReferenceToTrack(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t valuePtr = a3;
  uint64_t CopyWithNoData = FigSampleBufferCreateCopyWithNoData();
  if (CopyWithNoData) {
    return CopyWithNoData;
  }
  CFNumberRef v6 = CFNumberCreate(*(CFAllocatorRef *)a1, kCFNumberSInt64Type, &valuePtr);
  if (!v6) {
    return 4294950305;
  }
  CFNumberRef v7 = v6;
  CMSetAttachment(0, (CFStringRef)*MEMORY[0x1E4F1F2D0], v6, 1u);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *a2;
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, void))(v11 + 32);
  if (v12)
  {
    uint64_t v13 = v12(v8, v9, 0);
    if (v13)
    {
      uint64_t v15 = v13;
    }
    else
    {
      uint64_t v14 = (const void *)*((void *)a2 + 2);
      if (v14)
      {
        CFRelease(v14);
        uint64_t v15 = 0;
        *((void *)a2 + 2) = 0;
      }
      else
      {
        uint64_t v15 = 0;
      }
    }
  }
  else
  {
    uint64_t v15 = 4294954514;
  }
  CFRelease(v7);
  return v15;
}

void _getSampleOffsetFromPictureReader(uint64_t a1, uint64_t a2, void *a3)
{
  CFTypeRef v27 = 0;
  CFDictionaryRef dict = 0;
  CFTypeRef cf = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(unsigned int (**)(uint64_t, CFTypeRef *))(v7 + 8);
  if (v8 && !v8(a2, &v27))
  {
    uint64_t CMBaseObject = FigPictureTileCursorServiceGetCMBaseObject();
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v11 = v10 ? v10 : 0;
    uint64_t v12 = *(unsigned int (**)(uint64_t, void, uint64_t, CFDictionaryRef *))(v11 + 48);
    if (v12)
    {
      if (!v12(CMBaseObject, *MEMORY[0x1E4F334B0], a1, &dict))
      {
        size.double width = 0.0;
        size.double height = 0.0;
        if (!CGSizeMakeWithDictionaryRepresentation(dict, &size)
          || vcvtad_u64_f64(size.width) != 1
          || vcvtad_u64_f64(size.height) != 1)
        {
LABEL_33:
          FigSignalErrorAt();
          goto LABEL_26;
        }
        CFTypeRef v13 = v27;
        uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v14) {
          uint64_t v15 = v14;
        }
        else {
          uint64_t v15 = 0;
        }
        unint64_t v16 = *(unsigned int (**)(CFTypeRef, CFTypeRef *))(v15 + 8);
        if (v16 && !v16(v13, &cf))
        {
          uint64_t v21 = 0;
          CFTypeRef v17 = cf;
          uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v19 = v18 ? v18 : 0;
          uint64_t v20 = *(unsigned int (**)(CFTypeRef, uint64_t *, void **, void **, void, void))(v19 + 40);
          if (v20)
          {
            if (!v20(v17, &v21, &v24, &v23, 0, 0))
            {
              if (v21 == 1)
              {
                *a3 = *(void *)v24;
                goto LABEL_26;
              }
              goto LABEL_33;
            }
          }
        }
      }
    }
  }
LABEL_26:
  if (v27) {
    CFRelease(v27);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (dict) {
    CFRelease(dict);
  }
  free(v24);
  free(v23);
}

uint64_t _appendTrackReferenceIfValid(int a1, int a2, CFAllocatorRef allocator, CFMutableArrayRef *a4)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    if (*a4 || (CFMutableArrayRef Mutable = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]), (*a4 = Mutable) != 0))
    {
      uint64_t result = FigCFArrayAppendInt32();
      if (!result)
      {
        return FigCFArrayAppendInt32();
      }
    }
    else
    {
      return 4294950305;
    }
  }
  return result;
}

uint64_t _updateSampleDescriptionExtensions(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  CFArrayRef theArray = 0;
  uint64_t v4 = *(void *)(a1 + 24);
  CFAllocatorRef v5 = *(CFAllocatorRef *)a1;
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, void, CFAllocatorRef, CFArrayRef *))(v7 + 16);
  if (!v8)
  {
    uint64_t v15 = 0;
    uint64_t v12 = 0;
    unint64_t v16 = 0;
    goto LABEL_15;
  }
  uint64_t v9 = v8(v4, a2, *MEMORY[0x1E4F32E08], v5, &theArray);
  if (v9) {
    goto LABEL_38;
  }
  if (!theArray
    || CFArrayGetCount(theArray) != 1
    || (CFIndex ValueAtIndex = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(theArray, 0),
        !CMFormatDescriptionGetExtensions(ValueAtIndex)))
  {
    uint64_t v9 = FigSignalErrorAt();
LABEL_38:
    uint64_t v17 = v9;
    uint64_t v15 = 0;
    uint64_t v12 = 0;
    goto LABEL_43;
  }
  CFDictionaryRef MutableCopy = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
  uint64_t v12 = MutableCopy;
  if (MutableCopy)
  {
    CFTypeRef v13 = (const void *)*MEMORY[0x1E4F1EE20];
    if (CFDictionaryGetValue(MutableCopy, (const void *)*MEMORY[0x1E4F1EE20]))
    {
      CFDictionaryRef v14 = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
      uint64_t v15 = v14;
      if (v14)
      {
        if (CFDictionaryContainsKey(v14, @"ccst"))
        {
          unint64_t v16 = 0;
          uint64_t v17 = 0;
          goto LABEL_16;
        }
        *(_DWORD *)bytes = 0;
        CFMutableArrayRef Mutable = CFDataCreateMutable(*(CFAllocatorRef *)a1, 0);
        if (Mutable)
        {
          uint64_t v20 = Mutable;
          *(_DWORD *)unsigned int v34 = 132;
          CFDataAppendBytes(Mutable, bytes, 4);
          CFDataAppendBytes(v20, v34, 4);
          CFDictionarySetValue(v15, @"ccst", v20);
          CFRelease(v20);
          goto LABEL_29;
        }
        uint64_t v25 = FigSignalErrorAt();
        if (!v25)
        {
LABEL_29:
          CFDictionarySetValue(v12, v13, v15);
          CFDictionaryRemoveValue(v12, (const void *)*MEMORY[0x1E4F1EE58]);
          CFDictionaryRemoveValue(v12, (const void *)*MEMORY[0x1E4F1EE50]);
          CFAllocatorRef v21 = *(const __CFAllocator **)a1;
          CMVideoCodecType MediaSubType = CMFormatDescriptionGetMediaSubType(ValueAtIndex);
          int32_t width = CMVideoFormatDescriptionGetDimensions(ValueAtIndex).width;
          CMVideoDimensions Dimensions = CMVideoFormatDescriptionGetDimensions(ValueAtIndex);
          uint64_t v25 = CMVideoFormatDescriptionCreate(v21, MediaSubType, width, Dimensions.height, v12, (CMVideoFormatDescriptionRef *)&cf);
          if (!v25)
          {
            CMVideoDimensions v26 = CFArrayCreateMutable(*(CFAllocatorRef *)a1, 0, MEMORY[0x1E4F1D510]);
            unint64_t v16 = v26;
            if (!v26)
            {
              uint64_t v31 = FigSignalErrorAt();
              goto LABEL_36;
            }
            CFArrayAppendValue(v26, cf);
            uint64_t v27 = *(void *)(a1 + 24);
            uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v28) {
              uint64_t v29 = v28;
            }
            else {
              uint64_t v29 = 0;
            }
            long long v30 = *(uint64_t (**)(uint64_t, uint64_t, void, __CFArray *))(v29 + 24);
            if (v30)
            {
              uint64_t v31 = v30(v27, a2, *MEMORY[0x1E4F32ED0], v16);
LABEL_36:
              uint64_t v17 = v31;
              goto LABEL_16;
            }
LABEL_15:
            uint64_t v17 = 4294954514;
            goto LABEL_16;
          }
        }
      }
      else
      {
        uint64_t v25 = FigSignalErrorAt();
      }
      uint64_t v17 = v25;
      goto LABEL_43;
    }
  }
  uint64_t v17 = FigSignalErrorAt();
  uint64_t v15 = 0;
LABEL_43:
  unint64_t v16 = 0;
LABEL_16:
  if (theArray) {
    CFRelease(theArray);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v16) {
    CFRelease(v16);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (v15) {
    CFRelease(v15);
  }
  return v17;
}

uint64_t _dataBlobArrayNewEntry(void *a1, size_t a2, void *a3, void *a4)
{
  CFAllocatorRef v8 = CFGetAllocator(a1);
  uint64_t v9 = CFAllocatorAllocate(v8, a2, 0);
  if (!v9) {
    return 4294950305;
  }
  uint64_t v10 = v9;
  bzero(v9, a2);
  CFArrayAppendValue((CFMutableArrayRef)a1, v10);
  if (a4) {
    *a4 = CFArrayGetCount((CFArrayRef)a1) - 1;
  }
  uint64_t result = 0;
  if (a3) {
    *a3 = v10;
  }
  return result;
}

uint64_t _addNewImageRecord(uint64_t a1, int a2, const __CFDictionary *a3, int a4, const opaqueCMFormatDescription *a5, int a6, void *a7, void *a8)
{
  uint64_t v29 = 0;
  uint64_t result = _dataBlobArrayNewEntry(*(void **)(a1 + 40), 0xA0uLL, &v29, a7);
  if (!result)
  {
    CGRect CleanAperture = CMVideoFormatDescriptionGetCleanAperture(a5, 1u);
    uint64_t v17 = v29;
    *(_DWORD *)(v29 + 4) = a2;
    *(_DWORD *)(v17 + 8) = a4;
    *(void *)(v17 + 16) = vcvtad_u64_f64(CleanAperture.size.width);
    *(void *)(v17 + 24) = vcvtad_u64_f64(CleanAperture.size.height);
    uint64_t v18 = MEMORY[0x1E4F1F9F8];
    *(_OWORD *)(v17 + 88) = *MEMORY[0x1E4F1F9F8];
    *(void *)(v17 + 104) = *(void *)(v18 + 16);
    CFDictionaryRef Value = (const void *)FigCFDictionaryGetValue();
    if (Value) {
      CFDictionaryRef Value = CFRetain(Value);
    }
    uint64_t v20 = v29;
    *(_DWORD *)(v29 + 36) = 0;
    *(void *)(v20 + 48) = Value;
    char IntIfPresent = FigCFDictionaryGetIntIfPresent();
    uint64_t v22 = v29;
    *(_DWORD *)(v29 + 44) = -1;
    *(unsigned char *)(v22 + 32) = IntIfPresent;
    char v23 = FigCFDictionaryGetIntIfPresent();
    uint64_t v24 = v29;
    *(unsigned char *)(v29 + 56) = 0;
    v24 += 56;
    *(unsigned char *)(v24 - 16) = v23;
    *(void *)(v24 + 8) = 0;
    CMPhotoCFDictionaryGetBooleanIfPresent(a3, (const void *)*MEMORY[0x1E4F332E8], (unsigned char *)v24);
    if (a2)
    {
      uint64_t v25 = (unsigned char *)v29;
    }
    else
    {
      CFMutableArrayRef Mutable = CFArrayCreateMutable(*(CFAllocatorRef *)a1, 0, 0);
      uint64_t v25 = (unsigned char *)v29;
      *(void *)(v29 + 128) = Mutable;
      if (!Mutable) {
        return 4294950305;
      }
    }
    int v27 = v25[56];
    *(unsigned char *)(a1 + 224) |= v27;
    if (v27) {
      *(void *)(a1 + 72) = *a7;
    }
    if (!a6)
    {
      if (v25[32]) {
        BOOL v28 = 1;
      }
      else {
        BOOL v28 = v25[40] != 0;
      }
      *(unsigned char *)(a1 + 248) &= v28;
    }
    uint64_t result = 0;
    *a8 = v25;
  }
  return result;
}

uint64_t _checkForMIAFConstraints(uint64_t a1, int a2, const __CFDictionary *a3, int a4, CMVideoFormatDescriptionRef videoDesc, uint64_t a6, const void *a7)
{
  unint64_t Dimensions = (unint64_t)CMVideoFormatDescriptionGetDimensions(videoDesc);
  unint64_t v14 = HIDWORD(Dimensions);
  CGRect CleanAperture = CMVideoFormatDescriptionGetCleanAperture(videoDesc, 1u);
  double x = CleanAperture.origin.x;
  double y = CleanAperture.origin.y;
  double width = CleanAperture.size.width;
  double height = CleanAperture.size.height;
  char v67 = 0;
  *(void *)&long long v61 = 0;
  uint64_t v66 = 0;
  __int16 v65 = 0;
  unsigned __int8 v64 = 1;
  uint64_t MediaSubType = CMFormatDescriptionGetMediaSubType(videoDesc);
  CFDictionaryRef v60 = a3;
  if (!CVPixelFormatDescriptionGetDescriptionWithPixelFormatType())
  {
    if (a4 == 1635148593)
    {
      Extensiouint64_t n = (const __CFDictionary *)CMFormatDescriptionGetExtension(videoDesc, (CFStringRef)*MEMORY[0x1E4F1EE20]);
      if (Extension)
      {
        CFDataRef Value = (const __CFData *)CFDictionaryGetValue(Extension, @"avcC");
        if (Value)
        {
          CFDataRef v31 = Value;
          CFDataGetBytePtr(Value);
          CFDataGetLength(v31);
          if (!FigH264Bridge_GetSPSFromAVCC()
            && !FigH264Bridge_GetSPSChromaFormatAndBitDepths())
          {
            int32_t v20 = HIDWORD(Dimensions);
            int v22 = a2;
            char v23 = a7;
            if (HIBYTE(v65) == v65) {
              goto LABEL_62;
            }
            BOOL v32 = 0;
            a2 = v22;
            goto LABEL_127;
          }
        }
      }
    }
    else
    {
      if (a4 != 1752589105)
      {
        int32_t v20 = HIDWORD(Dimensions);
        int v22 = a2;
        char v23 = a7;
        BOOL v26 = 0;
        goto LABEL_44;
      }
      CFDictionaryRef v24 = (const __CFDictionary *)CMFormatDescriptionGetExtension(videoDesc, (CFStringRef)*MEMORY[0x1E4F1EE20]);
      if (v24)
      {
        if (CFDictionaryGetValue(v24, @"hvcC"))
        {
          if (!FigHEVCBridge_GetHEVCParameterSetAtIndex()
            && !FigHEVCBridge_GetSPSChromaFormatAndBitDepths())
          {
            int v25 = v64;
            if (HIBYTE(v65) == v65)
            {
              int32_t v20 = HIDWORD(Dimensions);
              int v22 = a2;
              char v23 = a7;
              BOOL v26 = HIBYTE(v65) == 10;
LABEL_47:
              BOOL v34 = v25 == 3 || v25 == 0;
              *(unsigned char *)(a1 + 244) |= v34;
              BOOL v35 = v25 == 1;
              BOOL v36 = v26 && v25 == 1;
              if (v26) {
                BOOL v35 = 0;
              }
              char v37 = v25 == 2 || v36;
              *(unsigned char *)(a1 + 243) |= v37;
              *(unsigned char *)(a1 + 242) |= v35;
              goto LABEL_63;
            }
          }
        }
      }
    }
LABEL_124:
    BOOL v32 = 0;
    goto LABEL_80;
  }
  int32_t v20 = HIDWORD(Dimensions);
  LOBYTE(cf) = 0;
  char v63 = 0;
  BOOL v21 = 1;
  int v22 = a2;
  if ((int)MediaSubType <= 1278226735)
  {
    char v23 = a7;
    if ((MediaSubType - 1278226488) <= 0x30
      && ((1 << (MediaSubType - 56)) & 0x1400000000001) != 0)
    {
      goto LABEL_25;
    }
    goto LABEL_19;
  }
  if ((MediaSubType - 1278226736) > 6 || ((1 << (MediaSubType - 48)) & 0x45) == 0)
  {
    char v23 = a7;
    if (MediaSubType == 1717855600 || MediaSubType == 1751410032) {
      goto LABEL_25;
    }
LABEL_19:
    BOOL v21 = MediaSubType == 1751411059 || MediaSubType == 1717856627;
    goto LABEL_25;
  }
  char v23 = a7;
LABEL_25:
  BOOL v26 = CMPhotoGetBitDepthForPixelFormat(MediaSubType) == 10;
  if (!CMPhotoPixelFormatIsSubsampled(MediaSubType, &cf, &v63, &v67, 0))
  {
    if (v21)
    {
      unsigned __int8 v64 = 0;
      goto LABEL_44;
    }
    if (!v67)
    {
      unsigned __int8 v64 = 3;
      goto LABEL_44;
    }
    if ((_BYTE)cf && v63)
    {
      char v28 = 1;
    }
    else
    {
      if (!(_BYTE)cf || v63)
      {
LABEL_44:
        if (a4 != 1635148593)
        {
          if (a4 == 1752589105)
          {
            int v25 = v64;
            goto LABEL_47;
          }
LABEL_63:
          a7 = v23;
          a2 = v22;
          LODWORD(v14) = v20;
          a3 = v60;
          if (!videoDesc)
          {
LABEL_79:
            BOOL v32 = v64 - 3 < 0xFFFFFFFE;
            goto LABEL_80;
          }
          CFDictionaryRef Extensions = CMFormatDescriptionGetExtensions(videoDesc);
          CFTypeRef cf = 0;
          if (!CMPhotoCreateColorSpaceFromPixelBufferAttachments(Extensions, v64 == 0, (CGColorSpace **)&cf, 1, 0)&& (cf|| (CFStringRef v39 = (const __CFString *)FigCFDictionaryGetValue()) == 0|| (cf = CGColorSpaceCreateWithName(v39)) != 0))
          {
            char v63 = 1;
            if (v60)
            {
              FigCFDictionaryGetBooleanIfPresent();
              BOOL v40 = v63 == 0;
            }
            else
            {
              BOOL v40 = 0;
            }
            if (a2) {
              BOOL v40 = 0;
            }
            if (a2 == 2 || cf || v40)
            {
              if (cf) {
                CFRelease(cf);
              }
            }
            else
            {
              *(unsigned char *)(a1 + 248) = 0;
            }
            goto LABEL_79;
          }
          goto LABEL_124;
        }
LABEL_62:
        *(unsigned char *)(a1 + 245) |= 1u;
        goto LABEL_63;
      }
      char v28 = 2;
    }
    unsigned __int8 v64 = v28;
    goto LABEL_44;
  }
  BOOL v32 = 0;
  a7 = v23;
  a2 = v22;
LABEL_127:
  LODWORD(v14) = v20;
  a3 = v60;
LABEL_80:
  char v41 = ((v14 | Dimensions) & 1) == 0 || v32;
  char v42 = v41 & *(unsigned char *)(a1 + 248);
  if (((int)x | (int)width)) {
    char v43 = 0;
  }
  else {
    char v43 = v41 & *(unsigned char *)(a1 + 248);
  }
  BOOL v44 = ((int)y & 1) == 0 && ((int)height & 1) == 0;
  if (v32)
  {
    char v45 = 1;
  }
  else
  {
    char v42 = v43;
    char v45 = v44;
  }
  if ((int)v14 * (int)Dimensions >= 128000001) {
    char v45 = 0;
  }
  *(unsigned char *)(a1 + 248) = v42 & v45;
  if (a2 != 1) {
    goto LABEL_107;
  }
  CFIndex ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), (CFIndex)a7);
  unint64_t v47 = ValueAtIndex[2];
  if (HIDWORD(v47)) {
    return 4294950190;
  }
  unint64_t v48 = ValueAtIndex[3];
  if (HIDWORD(v48)) {
    return 4294950190;
  }
  unint64_t v49 = (int)Dimensions * (uint64_t)SHIDWORD(Dimensions);
  if (v49)
  {
    unint64_t v50 = v48 * v47 / v49;
    LOBYTE(v61) = v50 < 0xC9;
    if (v50 < 0xC9)
    {
      int v51 = 1;
LABEL_106:
      *(unsigned char *)(a1 + 225) |= v51 == 0;
      goto LABEL_107;
    }
    uint64_t result = _areSiblingThumbnailsMIAFCompliant(a1, (uint64_t)ValueAtIndex, v49, (char *)&v61);
    if (result) {
      return result;
    }
    int v51 = v61;
    if ((_BYTE)v61) {
      goto LABEL_106;
    }
    CFMutableArrayRef Mutable = *(__CFSet **)(a1 + 232);
    if (!Mutable)
    {
      CFMutableArrayRef Mutable = CFSetCreateMutable(*(CFAllocatorRef *)a1, 0, 0);
      *(void *)(a1 + 232) = Mutable;
      if (!Mutable) {
        return 4294950305;
      }
    }
    if (a7 == (const void *)(int)a7)
    {
      CFSetAddValue(Mutable, a7);
      int v51 = v61;
      goto LABEL_106;
    }
    return 4294950190;
  }
LABEL_107:
  if (a3)
  {
    LOBYTE(v66) = 1;
    FigCFDictionaryGetBooleanIfPresent();
    if ((_BYTE)v66)
    {
      *(unsigned char *)(a1 + 248) &= CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E4F332E0]) != 0;
      if (!a2 && !*(unsigned char *)(a1 + 224))
      {
        *(unsigned char *)(a1 + 224) = 1;
        *(void *)(a1 + 72) = a6;
      }
    }
    long long v61 = *MEMORY[0x1E4F1DB30];
    if (FigCFDictionaryGetCGSizeIfPresent())
    {
      BOOL v54 = *(double *)&v61 >= 64.0;
      if (*((double *)&v61 + 1) < 64.0) {
        BOOL v54 = 0;
      }
      char v55 = *(unsigned char *)(a1 + 248) & v54;
      char v56 = ((int)*(double *)&v61 & 1) == 0 || v32;
      char v57 = v55 & v56;
      char v58 = ((int)*((double *)&v61 + 1) & 1) == 0 || v32;
      *(unsigned char *)(a1 + 248) = v57 & v58;
    }
  }
  return 0;
}

uint64_t _getDestinationTrackIDFromSourceTrackID(int a1, CFArrayRef theArray)
{
  CFIndex v4 = 0;
  while (1)
  {
    CFIndex v5 = theArray ? CFArrayGetCount(theArray) : 0;
    if (v4 >= v5) {
      break;
    }
    CFIndex ValueAtIndex = CFArrayGetValueAtIndex(theArray, v4++);
    if (ValueAtIndex[3] == a1) {
      return ValueAtIndex[4];
    }
  }
  return 0;
}

void _readWriteSamplesUntilSampleBufferQueueIsFull(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (!*(_DWORD *)*a1)
  {
    BOOL v3 = 0;
    CFIndex v5 = a1 + 10;
    uint64_t v6 = (CMTime *)MEMORY[0x1E4F1F9F8];
    while (1)
    {
      if (CMBufferQueueContainsEndOfData((CMBufferQueueRef)a1[7])
        || (memset(&v31, 0, sizeof(v31)),
            CMBufferQueueGetDuration(&v31, (CMBufferQueueRef)a1[7]),
            *(_OWORD *)&time1.CMTimeValue value = *v5,
            time1.epoch = a1[12],
            CMTime time2 = v31,
            CMTimeCompare(&time1, &time2) < 1))
      {
        int v4 = 0;
        goto LABEL_45;
      }
      CMTime time1 = *v6;
      time2.CMTimeValue value = 0;
      uint64_t v32 = 0;
      uint64_t v7 = a1[6];
      uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v9 = v8 ? v8 : 0;
      uint64_t v10 = *(uint64_t (**)(uint64_t, CMTime *))(v9 + 56);
      if (!v10) {
        break;
      }
      int v11 = v10(v7, &time1);
      if (v11) {
        goto LABEL_43;
      }
      if (*((_DWORD *)a1 + 2) == 1936684398)
      {
        if (time1.timescale / time1.value <= 1) {
          CMTimeValue v12 = 1;
        }
        else {
          CMTimeValue v12 = time1.timescale / time1.value;
        }
      }
      else
      {
        CMTimeValue v12 = 1;
      }
      uint64_t v13 = a1[5];
      uint64_t v14 = a1[6];
      uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v15) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = 0;
      }
      uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, CMTimeValue, CMTimeValue, uint64_t, void, uint64_t, void, void, void, void, CMTime *))(v16 + 8);
      if (!v17) {
        break;
      }
      int v11 = v17(v13, v14, v12, v12, 1, 0, 2, 0, 0, 0, 0, &time2);
      if (v11) {
        goto LABEL_43;
      }
      uint64_t v18 = *(void *)(*a1 + 8);
      uint64_t v19 = *((unsigned int *)a1 + 4);
      CMTimeValue value = time2.value;
      uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v21) {
        uint64_t v22 = v21;
      }
      else {
        uint64_t v22 = 0;
      }
      char v23 = *(uint64_t (**)(uint64_t, uint64_t, CMTimeValue))(v22 + 32);
      if (!v23) {
        break;
      }
      int v11 = v23(v18, v19, value);
      if (v11)
      {
LABEL_43:
        int v4 = v11;
      }
      else
      {
        CMItemCount NumSamples = CMSampleBufferGetNumSamples((CMSampleBufferRef)time2.value);
        if (time2.value)
        {
          CFRelease((CFTypeRef)time2.value);
          time2.CMTimeValue value = 0;
        }
        uint64_t v25 = a1[6];
        uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v26) {
          uint64_t v27 = v26;
        }
        else {
          uint64_t v27 = 0;
        }
        char v28 = *(uint64_t (**)(uint64_t, CMItemCount, uint64_t *))(v27 + 168);
        if (!v28) {
          break;
        }
        int v4 = v28(v25, NumSamples, &v32);
        if (!v4) {
          BOOL v3 = v32 != NumSamples;
        }
      }
LABEL_36:
      if (time2.value) {
        CFRelease((CFTypeRef)time2.value);
      }
      if (v4) {
        goto LABEL_45;
      }
      if (v3)
      {
        OSStatus v29 = CMBufferQueueMarkEndOfData((CMBufferQueueRef)a1[7]);
        if (v29)
        {
          int v4 = v29;
          goto LABEL_45;
        }
      }
      if (*(_DWORD *)v2) {
        goto LABEL_3;
      }
    }
    int v4 = -12782;
    goto LABEL_36;
  }
  BOOL v3 = 0;
LABEL_3:
  int v4 = 1;
LABEL_45:
  if (*((unsigned char *)a1 + 104) && (v4 || v3))
  {
    dispatch_group_leave(*(dispatch_group_t *)(v2 + 24));
    *((unsigned char *)a1 + 104) = 0;
  }
}

void _lowWaterLevelTriggerFunction(dispatch_queue_t *context)
{
}

BOOL CMPhotoRectMakeWithDictionaryRepresentation(const __CFDictionary *a1, uint64x2_t *a2)
{
  if (!a2) {
    return 0;
  }
  memset(&v5, 0, sizeof(v5));
  BOOL result = CGRectMakeWithDictionaryRepresentation(a1, &v5);
  if (result)
  {
    uint64x2_t v4 = vcvtq_u64_f64(vrndaq_f64((float64x2_t)v5.size));
    *a2 = vcvtq_u64_f64(vrndaq_f64((float64x2_t)v5.origin));
    a2[1] = v4;
    return 1;
  }
  return result;
}

BOOL CMPhotoSizeMakeWithDictionaryRepresentation(const __CFDictionary *a1, uint64x2_t *a2)
{
  if (!a2) {
    return 0;
  }
  float64x2_t v4 = 0uLL;
  BOOL result = CGSizeMakeWithDictionaryRepresentation(a1, (CGSize *)&v4);
  if (result)
  {
    *a2 = vcvtq_u64_f64(vrndaq_f64(v4));
    return 1;
  }
  return result;
}

uint64_t Slim_GetVersionFromPixelBufferInfo(int a1, unsigned int a2, char a3, int a4, int *a5)
{
  if (a1 > 1735549751)
  {
    if (a1 > 1937126451)
    {
      if (a1 <= 2016686639)
      {
        if (a1 <= 1952855091)
        {
          switch(a1)
          {
            case 1937126452:
              int v5 = 94;
              break;
            case 1952854576:
              int v5 = 24;
              break;
            case 1952854578:
              int v5 = 87;
              break;
            default:
              return FigSignalErrorAt();
          }
        }
        else if (a1 > 1953903153)
        {
          if (a1 == 1953903154)
          {
            int v5 = 88;
          }
          else
          {
            if (a1 != 1953903668) {
              return FigSignalErrorAt();
            }
            int v5 = 90;
          }
        }
        else if (a1 == 1952855092)
        {
          int v5 = 89;
        }
        else
        {
          if (a1 != 1953903152) {
            return FigSignalErrorAt();
          }
          int v5 = 23;
        }
      }
      else if (a1 > 2019963441)
      {
        if (a1 > 2037741157)
        {
          if (a1 == 2037741158)
          {
            int v5 = 7;
          }
          else
          {
            if (a1 != 2037741171) {
              return FigSignalErrorAt();
            }
            int v5 = 1;
          }
        }
        else if (a1 == 2019963442)
        {
          int v5 = 83;
        }
        else
        {
          if (a1 != 2019963956) {
            return FigSignalErrorAt();
          }
          int v5 = 85;
        }
      }
      else if (a1 > 2016687155)
      {
        if (a1 == 2016687156)
        {
          int v5 = 86;
        }
        else
        {
          if (a1 != 2019963440) {
            return FigSignalErrorAt();
          }
          int v5 = 12;
        }
      }
      else if (a1 == 2016686640)
      {
        int v5 = 11;
      }
      else
      {
        if (a1 != 2016686642) {
          return FigSignalErrorAt();
        }
        int v5 = 84;
      }
    }
    else if (a1 <= 1885745711)
    {
      if (a1 <= 1751527983)
      {
        switch(a1)
        {
          case 1735549752:
            int v5 = 46;
            break;
          case 1751410032:
            int v5 = 78;
            break;
          case 1751411059:
            int v5 = 79;
            break;
          default:
            return FigSignalErrorAt();
        }
      }
      else if (a1 > 1815491697)
      {
        if (a1 == 1815491698)
        {
          int v5 = 20;
        }
        else
        {
          if (a1 != 1882468912) {
            return FigSignalErrorAt();
          }
          int v5 = 13;
        }
      }
      else if (a1 == 1751527984)
      {
        int v5 = 74;
      }
      else
      {
        if (a1 != 1815162994) {
          return FigSignalErrorAt();
        }
        int v5 = 19;
      }
    }
    else if (a1 > 1936077361)
    {
      if (a1 > 1937125935)
      {
        if (a1 == 1937125936)
        {
          int v5 = 25;
        }
        else
        {
          if (a1 != 1937125938) {
            return FigSignalErrorAt();
          }
          int v5 = 92;
        }
      }
      else if (a1 == 1936077362)
      {
        int v5 = 91;
      }
      else
      {
        if (a1 != 1936077876) {
          return FigSignalErrorAt();
        }
        int v5 = 93;
      }
    }
    else if (a1 > 1919379251)
    {
      if (a1 == 1919379252)
      {
        int v5 = 10;
      }
      else
      {
        if (a1 != 1936077360) {
          return FigSignalErrorAt();
        }
        int v5 = 26;
      }
    }
    else if (a1 == 1885745712)
    {
      int v5 = 14;
    }
    else
    {
      if (a1 != 1919378232) {
        return FigSignalErrorAt();
      }
      int v5 = 47;
    }
    goto LABEL_167;
  }
  if (a1 > 1380411456)
  {
    if (a1 <= 1651925815)
    {
      if (a1 <= 1650942775)
      {
        if (a1 == 1380411457)
        {
          int v5 = 75;
          goto LABEL_167;
        }
        if (a1 == 1647589490)
        {
          int v5 = 21;
          goto LABEL_167;
        }
        if (a1 != 1647719528) {
          return FigSignalErrorAt();
        }
        if (a2 == 6)
        {
          int v5 = 59;
          goto LABEL_167;
        }
        if (a2 == 7)
        {
          int v5 = 60;
          goto LABEL_167;
        }
      }
      else
      {
        if (a1 <= 1651519797)
        {
          if (a1 == 1650942776)
          {
            int v5 = 45;
          }
          else
          {
            if (a1 != 1650943796) {
              return FigSignalErrorAt();
            }
            int v5 = 3;
          }
          goto LABEL_167;
        }
        if (a1 == 1651519798)
        {
          if (a3)
          {
            if (a2 < 5)
            {
              int v5 = a2 + 62;
              goto LABEL_167;
            }
          }
          else if (a2 < 9 && ((0x13Fu >> a2) & 1) != 0)
          {
            uint64_t v6 = &unk_1AB9E2EC0;
            goto LABEL_156;
          }
        }
        else
        {
          if (a1 != 1651847472) {
            return FigSignalErrorAt();
          }
          if (a2 < 9 && ((0x13Fu >> a2) & 1) != 0)
          {
            uint64_t v6 = &unk_1AB9E2E54;
            goto LABEL_156;
          }
        }
      }
    }
    else
    {
      if (a1 > 1717856626)
      {
        if (a1 > 1734505011)
        {
          if (a1 == 1734505012)
          {
            int v5 = 73;
          }
          else
          {
            if (a1 != 1735549492) {
              return FigSignalErrorAt();
            }
            int v5 = 72;
          }
        }
        else if (a1 == 1717856627)
        {
          int v5 = 81;
        }
        else
        {
          if (a1 != 1734501176) {
            return FigSignalErrorAt();
          }
          int v5 = 48;
        }
        goto LABEL_167;
      }
      if (a1 > 1652056887)
      {
        if (a1 != 1652056888)
        {
          if (a1 != 1717855600) {
            return FigSignalErrorAt();
          }
          int v5 = 80;
          goto LABEL_167;
        }
        if (a2 < 9 && ((0x13Fu >> a2) & 1) != 0)
        {
          uint64_t v6 = &unk_1AB9E2E9C;
          goto LABEL_156;
        }
      }
      else if (a1 == 1651925816)
      {
        if (a2 < 9 && ((0x13Fu >> a2) & 1) != 0)
        {
          uint64_t v6 = &unk_1AB9E2E30;
          goto LABEL_156;
        }
      }
      else
      {
        if (a1 != 1651926376) {
          return FigSignalErrorAt();
        }
        if (a2 < 9 && ((0x13Fu >> a2) & 1) != 0)
        {
          uint64_t v6 = &unk_1AB9E2E78;
LABEL_156:
          int v5 = v6[a2];
          goto LABEL_167;
        }
      }
    }
    return 4294951896;
  }
  if (a1 <= 875836533)
  {
    if (a1 <= 875704437)
    {
      switch(a1)
      {
        case 825306677:
          int v5 = 61;
          break;
        case 825437747:
          int v5 = 9;
          break;
        case 875704422:
          int v5 = 4;
          break;
        default:
          return FigSignalErrorAt();
      }
    }
    else if (a1 > 875704949)
    {
      if (a1 == 875704950)
      {
        int v5 = 77;
      }
      else
      {
        if (a1 != 875836518) {
          return FigSignalErrorAt();
        }
        int v5 = 6;
      }
    }
    else if (a1 == 875704438)
    {
      int v5 = 2;
    }
    else
    {
      if (a1 != 875704934) {
        return FigSignalErrorAt();
      }
      int v5 = 76;
    }
  }
  else if (a1 > 1278226535)
  {
    if (a1 > 1278226737)
    {
      if (a1 == 1278226738)
      {
        int v5 = 22;
      }
      else
      {
        if (a1 != 1278226742) {
          return FigSignalErrorAt();
        }
        int v5 = 8;
      }
    }
    else if (a1 == 1278226536)
    {
      int v5 = 17;
    }
    else
    {
      if (a1 != 1278226736) {
        return FigSignalErrorAt();
      }
      int v5 = 16;
    }
  }
  else if (a1 > 1278226487)
  {
    if (a1 == 1278226488)
    {
      int v5 = 15;
    }
    else
    {
      if (a1 != 1278226534) {
        return FigSignalErrorAt();
      }
      int v5 = 18;
    }
  }
  else
  {
    if (a1 != 875836534)
    {
      if (a1 == 1111970369)
      {
        int v5 = 82;
        goto LABEL_167;
      }
      return FigSignalErrorAt();
    }
    int v5 = 5;
  }
LABEL_167:
  uint64_t result = 0;
  if (a5) {
    *a5 = v5 | (a4 << 16);
  }
  return result;
}

uint64_t Slim_GetPixelBufferInfoFromVersion(unsigned int a1, int *a2, int *a3, int *a4, char *a5, int *a6)
{
  if ((unsigned __int16)a1 - 100 <= 0xFFFFFF9C) {
    return FigSignalErrorAt();
  }
  int v6 = 0;
  int v7 = 0;
  char v8 = 0;
  int v9 = 2037741171;
  switch((__int16)a1)
  {
    case 1:
      break;
    case 2:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      int v10 = 875704422;
      goto LABEL_7;
    case 3:
      int v6 = 0;
      int v7 = 0;
      int v11 = 1650942776;
      goto LABEL_13;
    case 4:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      int v9 = 875704422;
      break;
    case 5:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      int v10 = 875836518;
LABEL_7:
      int v9 = v10 | 0x10;
      break;
    case 6:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      int v9 = 875836518;
      break;
    case 7:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      int v9 = 2037741158;
      break;
    case 8:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      int v9 = 1278226742;
      break;
    case 9:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      int v9 = 825437747;
      break;
    case 10:
      int v6 = 0;
      int v7 = 0;
      int v11 = 1919378232;
LABEL_13:
      int v9 = v11 + 1020;
      goto LABEL_83;
    case 11:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      int v9 = 2016686640;
      break;
    case 12:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      int v12 = 2016686640;
      goto LABEL_18;
    case 13:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      int v9 = 1882468912;
      break;
    case 14:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      int v12 = 1882468912;
LABEL_18:
      int v9 = v12 + 3276800;
      break;
    case 15:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      int v9 = 1278226488;
      break;
    case 16:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      int v9 = 1278226736;
      break;
    case 17:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      int v9 = 1278226536;
      break;
    case 18:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      int v9 = 1278226534;
      break;
    case 19:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      int v9 = 1815162994;
      break;
    case 20:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      int v9 = 1815491698;
      break;
    case 21:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      int v9 = 1647589490;
      break;
    case 22:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      int v9 = 1278226738;
      break;
    case 23:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      int v13 = 1952854576;
      goto LABEL_30;
    case 24:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      int v9 = 1952854576;
      break;
    case 25:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      int v13 = 1936077360;
LABEL_30:
      int v9 = v13 | 0x100000;
      break;
    case 26:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      int v9 = 1936077360;
      break;
    case 27:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      goto LABEL_110;
    case 28:
      int v6 = 0;
      char v8 = 0;
      int v7 = 1;
      goto LABEL_110;
    case 29:
      int v6 = 0;
      char v8 = 0;
      int v7 = 2;
      goto LABEL_110;
    case 30:
      int v6 = 0;
      char v8 = 0;
      int v7 = 3;
      goto LABEL_110;
    case 31:
      char v8 = 0;
      int v7 = 4;
      int v6 = 1;
      goto LABEL_110;
    case 32:
      int v6 = 0;
      char v8 = 0;
      int v7 = 5;
      goto LABEL_110;
    case 33:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      goto LABEL_112;
    case 34:
      int v6 = 0;
      char v8 = 0;
      int v7 = 1;
      goto LABEL_112;
    case 35:
      int v6 = 0;
      char v8 = 0;
      int v7 = 2;
      goto LABEL_112;
    case 36:
      int v6 = 0;
      char v8 = 0;
      int v7 = 3;
      goto LABEL_112;
    case 37:
      char v8 = 0;
      int v7 = 4;
      int v6 = 1;
      goto LABEL_112;
    case 38:
      int v6 = 0;
      char v8 = 0;
      int v7 = 5;
      goto LABEL_112;
    case 39:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      int v9 = 1651926376;
      break;
    case 40:
      int v6 = 0;
      char v8 = 0;
      int v9 = 1651926376;
      goto LABEL_71;
    case 41:
      int v6 = 0;
      char v8 = 0;
      int v9 = 1651926376;
      goto LABEL_57;
    case 42:
      int v6 = 0;
      char v8 = 0;
      int v9 = 1651926376;
      goto LABEL_59;
    case 43:
      char v8 = 0;
      int v9 = 1651926376;
      goto LABEL_61;
    case 44:
      int v6 = 0;
      char v8 = 0;
      int v9 = 1651926376;
      goto LABEL_63;
    case 45:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      int v9 = 1650942776;
      break;
    case 46:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      int v9 = 1735549752;
      break;
    case 47:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      int v9 = 1919378232;
      break;
    case 48:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      int v9 = 1734501176;
      break;
    case 49:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      int v9 = 1652056888;
      break;
    case 50:
      int v6 = 0;
      char v8 = 0;
      int v9 = 1652056888;
      goto LABEL_71;
    case 51:
      int v6 = 0;
      char v8 = 0;
      int v9 = 1652056888;
LABEL_57:
      int v7 = 2;
      break;
    case 52:
      int v6 = 0;
      char v8 = 0;
      int v9 = 1652056888;
LABEL_59:
      int v7 = 3;
      break;
    case 53:
      char v8 = 0;
      int v9 = 1652056888;
LABEL_61:
      int v7 = 4;
      int v6 = 1;
      break;
    case 54:
      int v6 = 0;
      char v8 = 0;
      int v9 = 1652056888;
LABEL_63:
      int v7 = 5;
      break;
    case 59:
      int v6 = 0;
      char v8 = 0;
      int v7 = 6;
      goto LABEL_67;
    case 60:
      int v6 = 0;
      char v8 = 0;
      int v7 = 7;
LABEL_67:
      int v9 = 1647719528;
      break;
    case 61:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      int v9 = 825306677;
      break;
    case 62:
      int v7 = 0;
      char v8 = 0;
      goto LABEL_75;
    case 63:
      char v8 = 0;
      int v6 = 1;
      int v9 = 1651519798;
LABEL_71:
      int v7 = 1;
      break;
    case 64:
      char v8 = 0;
      int v7 = 2;
      goto LABEL_75;
    case 65:
      char v8 = 0;
      int v7 = 3;
      goto LABEL_75;
    case 66:
      char v8 = 0;
      int v7 = 4;
LABEL_75:
      int v6 = 1;
      goto LABEL_117;
    case 67:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      goto LABEL_117;
    case 68:
      int v6 = 0;
      char v8 = 0;
      int v7 = 1;
      goto LABEL_117;
    case 69:
      int v6 = 0;
      char v8 = 0;
      int v7 = 2;
      goto LABEL_117;
    case 70:
      int v6 = 0;
      char v8 = 0;
      int v7 = 3;
      goto LABEL_117;
    case 71:
      int v6 = 0;
      char v8 = 0;
      int v7 = 5;
      goto LABEL_117;
    case 72:
      int v6 = 0;
      int v7 = 0;
      char v8 = 1;
      int v9 = 1735549492;
      break;
    case 73:
      int v6 = 0;
      int v7 = 0;
      int v9 = 1734505012;
LABEL_83:
      char v8 = 1;
      break;
    case 74:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      int v9 = 1751527984;
      break;
    case 75:
      int v6 = 0;
      int v7 = 0;
      char v8 = 1;
      int v9 = 1380411457;
      break;
    case 76:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      int v9 = 875704934;
      break;
    case 77:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      int v9 = 875704950;
      break;
    case 78:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      int v9 = 1751410032;
      break;
    case 79:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      int v15 = 1751410032;
      goto LABEL_92;
    case 80:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      int v9 = 1717855600;
      break;
    case 81:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      int v15 = 1717855600;
LABEL_92:
      int v9 = v15 + 1027;
      break;
    case 82:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      int v9 = 1111970369;
      break;
    case 83:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      int v9 = 2019963442;
      break;
    case 84:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      int v16 = 2016686640;
      goto LABEL_103;
    case 85:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      int v17 = 2019963442;
      goto LABEL_108;
    case 86:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      int v18 = 2016686640;
      goto LABEL_106;
    case 87:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      int v16 = 1952854576;
      goto LABEL_103;
    case 88:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      int v9 = 1953903154;
      break;
    case 89:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      int v18 = 1952854576;
      goto LABEL_106;
    case 90:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      int v17 = 1953903154;
      goto LABEL_108;
    case 91:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      int v16 = 1936077360;
LABEL_103:
      int v9 = v16 | 2;
      break;
    case 92:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      int v9 = 1937125938;
      break;
    case 93:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      int v18 = 1936077360;
LABEL_106:
      int v9 = v18 + 516;
      break;
    case 94:
      int v6 = 0;
      int v7 = 0;
      char v8 = 0;
      int v17 = 1937125938;
LABEL_108:
      int v9 = v17 + 514;
      break;
    case 95:
      int v6 = 0;
      char v8 = 0;
      int v7 = 8;
LABEL_110:
      int v9 = 1651925816;
      break;
    case 96:
      int v6 = 0;
      char v8 = 0;
      int v7 = 8;
LABEL_112:
      int v9 = 1651847472;
      break;
    case 97:
      int v6 = 0;
      char v8 = 0;
      int v9 = 1651926376;
      goto LABEL_115;
    case 98:
      int v6 = 0;
      char v8 = 0;
      int v9 = 1652056888;
LABEL_115:
      int v7 = 8;
      break;
    case 99:
      int v6 = 0;
      char v8 = 0;
      int v7 = 8;
LABEL_117:
      int v9 = 1651519798;
      break;
    default:
      return FigSignalErrorAt();
  }
  if (a2) {
    *a2 = HIWORD(a1) & 0xF;
  }
  if (a3) {
    *a3 = v9;
  }
  if (a6) {
    *a6 = v6;
  }
  if (a4) {
    *a4 = v7;
  }
  if (a5) {
    *a5 = v8;
  }
  return 0;
}

uint64_t Slim_GetEquivalentBlockSizeVersion(unsigned int a1)
{
  unsigned int v1 = (unsigned __int16)(a1 - 62);
  if (v1 >= 5) {
    unsigned int v2 = a1;
  }
  else {
    unsigned int v2 = v1 + 67;
  }
  return v2 | a1 & 0xF0000;
}

uint64_t CMPhotoJPEGPreload()
{
  return pthread_once(&get_ADClientFunctions_once, (void (*)(void))link_AggregateDictionary);
}

void *link_AggregateDictionary()
{
  uint64_t result = dlopen("/System/Library/PrivateFrameworks/AggregateDictionary.framework/AggregateDictionary", 4);
  if (result)
  {
    unsigned int v1 = result;
    _ADClientAddValueForScalarKedouble y = (uint64_t)dlsym(result, "ADClientAddValueForScalarKey");
    uint64_t result = dlsym(v1, "ADClientPushValueForDistributionKey");
    _ADClientPushValueForDistributionKedouble y = (uint64_t)result;
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerGetTypeID()
{
  return sCMPhotoDecompressionContainerTypeID;
}

uint64_t CMPhotoDecompressionTileIteratorGetTypeID()
{
  return sCMPhotoDecompressionTileIteratorTypeID;
}

BOOL CMPhotoDecompressionContainerHasAlternates(uint64_t a1)
{
  return *(void *)(a1 + 544) != 0;
}

uint64_t CMPhotoDecompressionContainerGetContainerFormat(uint64_t a1, _DWORD *a2)
{
  uint64_t result = 4294950306;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = 0;
      *a2 = *(_DWORD *)(a1 + 536);
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerGetImageCount(uint64_t a1, void *a2)
{
  if (!a1) {
    return 4294950306;
  }
  if (!a2) {
    return 0;
  }
  uint64_t result = 0;
  *a2 = *(void *)(a1 + 584);
  return result;
}

uint64_t CMPhotoDecompressionContainerGetAlternatesCountForIndex(void *a1, const __CFNumber *a2, uint64_t a3, uint64_t *a4, CFIndex *a5)
{
  if (!a1) {
    return 4294950306;
  }
  if (!a4) {
    return 0;
  }
  CFArrayRef theArray = 0;
  uint64_t v6 = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, 0, 0, a5, &theArray);
  if (!v6)
  {
    unint64_t Count = (unint64_t)theArray;
    if (theArray) {
      unint64_t Count = CFArrayGetCount(theArray);
    }
    if (Count <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = Count;
    }
    *a4 = v8;
  }
  return v6;
}

uint64_t CMPhotoDecompressionContainerGetLoopCount(uint64_t a1)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1) {
    uint64_t v2 = *(void *)(a1 + 32);
  }
  else {
    uint64_t v2 = 0;
  }
  if (!*(void *)(v2 + 464)) {
    return 4294950302;
  }
  if (v1) {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  else {
    uint64_t v4 = 0;
  }
  return (*(uint64_t (**)(void))(v4 + 464))();
}

uint64_t CMPhotoDecompressionContainerGetPrimaryItemIndex(uint64_t a1, void *a2)
{
  uint64_t result = 4294950306;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = 0;
      *a2 = *(void *)(a1 + 568);
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerCopyFormatDescriptionForIndexWithOptions(void *a1, const __CFNumber *a2, const __CFDictionary *a3, uint64_t a4)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v10 = -1;
  uint64_t result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a3, (const __CFNumber **)&v10, 0, 0);
  if (!result)
  {
    if (a4)
    {
      uint64_t v8 = a1[4];
      if (v8) {
        uint64_t v9 = a1[4];
      }
      else {
        uint64_t v9 = 0;
      }
      if (*(void *)(v9 + 40)) {
        return (*(uint64_t (**)(void *, uint64_t, const __CFDictionary *, uint64_t))(v8 + 40))(a1, v10, a3, a4);
      }
      else {
        return 4294950302;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerCopyFormatDescriptionForIndex(void *a1, const __CFNumber *a2, uint64_t a3)
{
  return CMPhotoDecompressionContainerCopyFormatDescriptionForIndexWithOptions(a1, a2, 0, a3);
}

uint64_t CMPhotoDecompressionContainerCopySampleBufferForIndex(void *a1, const __CFNumber *a2, uint64_t a3)
{
  return CMPhotoDecompressionContainerCopySampleBufferForIndexWithOptions(a1, a2, 0, a3);
}

uint64_t CMPhotoDecompressionContainerCopyImageBitDepthForIndex(void *a1, const __CFNumber *a2, uint64_t a3)
{
  return CMPhotoDecompressionContainerCopyImageBitDepthForIndexWithOptions(a1, a2, 0, a3);
}

uint64_t CMPhotoDecompressionContainerGetEncoderNativePixelFormatForIndexWithOptions(void *a1, const __CFNumber *a2, const __CFDictionary *a3, uint64_t a4)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v10 = -1;
  uint64_t result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a3, (const __CFNumber **)&v10, 0, 0);
  if (!result)
  {
    if (a4)
    {
      uint64_t v7 = a1[4];
      if (v7) {
        uint64_t v8 = a1[4];
      }
      else {
        uint64_t v8 = 0;
      }
      if (*(void *)(v8 + 368))
      {
        if (v7) {
          uint64_t v9 = a1[4];
        }
        else {
          uint64_t v9 = 0;
        }
        return (*(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 368))(a1, v10, a4);
      }
      else
      {
        return 4294950302;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerGetEncoderNativePixelFormatForIndex(void *a1, const __CFNumber *a2, uint64_t a3)
{
  return CMPhotoDecompressionContainerGetEncoderNativePixelFormatForIndexWithOptions(a1, a2, 0, a3);
}

uint64_t CMPhotoDecompressionContainerCopyImageSubsamplingForIndexWithOptions(void *a1, const __CFNumber *a2, const __CFDictionary *a3, uint64_t a4)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v10 = -1;
  uint64_t result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a3, (const __CFNumber **)&v10, 0, 0);
  if (!result)
  {
    if (a4)
    {
      uint64_t v7 = a1[4];
      if (v7) {
        uint64_t v8 = a1[4];
      }
      else {
        uint64_t v8 = 0;
      }
      if (*(void *)(v8 + 376))
      {
        if (v7) {
          uint64_t v9 = a1[4];
        }
        else {
          uint64_t v9 = 0;
        }
        return (*(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 376))(a1, v10, a4);
      }
      else
      {
        return 4294950302;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerCopyImageSubsamplingForIndex(void *a1, const __CFNumber *a2, uint64_t a3)
{
  return CMPhotoDecompressionContainerCopyImageSubsamplingForIndexWithOptions(a1, a2, 0, a3);
}

uint64_t CMPhotoDecompressionContainerCopyImageIsRGBForIndexWithOptions(void *a1, const __CFNumber *a2, const __CFDictionary *a3, uint64_t a4)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v10 = -1;
  uint64_t result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a3, (const __CFNumber **)&v10, 0, 0);
  if (!result)
  {
    if (a4)
    {
      uint64_t v7 = a1[4];
      if (v7) {
        uint64_t v8 = a1[4];
      }
      else {
        uint64_t v8 = 0;
      }
      if (*(void *)(v8 + 384))
      {
        if (v7) {
          uint64_t v9 = a1[4];
        }
        else {
          uint64_t v9 = 0;
        }
        return (*(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 384))(a1, v10, a4);
      }
      else
      {
        return 4294950302;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerCopyImageIsRGBForIndex(void *a1, const __CFNumber *a2, uint64_t a3)
{
  return CMPhotoDecompressionContainerCopyImageIsRGBForIndexWithOptions(a1, a2, 0, a3);
}

uint64_t CMPhotoDecompressionContainerGetThumbnailCountForIndexWithOptions(void *a1, const __CFNumber *a2, const __CFDictionary *a3, uint64_t a4)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v10 = -1;
  uint64_t result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a3, (const __CFNumber **)&v10, 0, 0);
  if (!result)
  {
    uint64_t v8 = a1[4];
    if (v8) {
      uint64_t v9 = a1[4];
    }
    else {
      uint64_t v9 = 0;
    }
    if (*(void *)(v9 + 72)) {
      return (*(uint64_t (**)(void *, uint64_t, const __CFDictionary *, uint64_t))(v8 + 72))(a1, v10, a3, a4);
    }
    else {
      return 4294950302;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerGetThumbnailCountForIndex(void *a1, const __CFNumber *a2, uint64_t a3)
{
  return CMPhotoDecompressionContainerGetThumbnailCountForIndexWithOptions(a1, a2, 0, a3);
}

uint64_t CMPhotoDecompressionContainerGetThumbnailDimensionsForIndex(void *a1, const __CFNumber *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return CMPhotoDecompressionContainerGetThumbnailGeometryForIndexWithOptions(a1, a2, a3, 0, a4, a5, 0);
}

uint64_t CMPhotoDecompressionContainerGetThumbnailGeometryForIndex(void *a1, const __CFNumber *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return CMPhotoDecompressionContainerGetThumbnailGeometryForIndexWithOptions(a1, a2, a3, 0, a4, a5, a6);
}

uint64_t CMPhotoDecompressionContainerGetThumbnailGeometryForIndexWithOptions(void *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v16 = -1;
  uint64_t result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a4, (const __CFNumber **)&v16, 0, 0);
  if (!result)
  {
    if (a5 || a6 || a7)
    {
      uint64_t v13 = a1[4];
      if (v13) {
        uint64_t v14 = a1[4];
      }
      else {
        uint64_t v14 = 0;
      }
      if (*(void *)(v14 + 400))
      {
        if (v13) {
          uint64_t v15 = a1[4];
        }
        else {
          uint64_t v15 = 0;
        }
        return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 400))(a1, v16, a3, a5, a6, a7);
      }
      else
      {
        return 4294950302;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerCopyThumbnailBitDepthForIndexWithOptions(void *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v12 = -1;
  uint64_t result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a4, (const __CFNumber **)&v12, 0, 0);
  if (!result)
  {
    if (a5)
    {
      uint64_t v9 = a1[4];
      if (v9) {
        uint64_t v10 = a1[4];
      }
      else {
        uint64_t v10 = 0;
      }
      if (*(void *)(v10 + 408))
      {
        if (v9) {
          uint64_t v11 = a1[4];
        }
        else {
          uint64_t v11 = 0;
        }
        return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(v11 + 408))(a1, v12, a3, a5);
      }
      else
      {
        return 4294950302;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerCopyThumbnailBitDepthForIndex(void *a1, const __CFNumber *a2, uint64_t a3, uint64_t a4)
{
  return CMPhotoDecompressionContainerCopyThumbnailBitDepthForIndexWithOptions(a1, a2, a3, 0, a4);
}

uint64_t CMPhotoDecompressionContainerGetThumbnailEncodedPixelFormatForIndexWithOptions(void *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v12 = -1;
  uint64_t result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a4, (const __CFNumber **)&v12, 0, 0);
  if (!result)
  {
    if (a5)
    {
      uint64_t v9 = a1[4];
      if (v9) {
        uint64_t v10 = a1[4];
      }
      else {
        uint64_t v10 = 0;
      }
      if (*(void *)(v10 + 416))
      {
        if (v9) {
          uint64_t v11 = a1[4];
        }
        else {
          uint64_t v11 = 0;
        }
        return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(v11 + 416))(a1, v12, a3, a5);
      }
      else
      {
        return 4294950302;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerGetThumbnailEncodedPixelFormatForIndex(void *a1, const __CFNumber *a2, uint64_t a3, uint64_t a4)
{
  return CMPhotoDecompressionContainerGetThumbnailEncodedPixelFormatForIndexWithOptions(a1, a2, a3, 0, a4);
}

uint64_t CMPhotoDecompressionContainerCreateThumbnailImageForIndex(char *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5, uint64_t a6)
{
  CFTypeRef cf = 0;
  if (!a1) {
    return 4294950306;
  }
  uint64_t v17 = -1;
  uint64_t v12 = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a4, (const __CFNumber **)&v17, 0, 0);
  if (v12) {
    goto LABEL_13;
  }
  if (a3 < 0)
  {
    uint64_t v15 = 4294950306;
  }
  else if (a6)
  {
    if (a4 && CFDictionaryContainsKey(a4, @"DryRun"))
    {
      uint64_t v12 = FigSignalErrorAt();
      goto LABEL_13;
    }
    uint64_t v12 = _createModifiedDecodeOptionsIfNeeded(a1, a2, a3, a4, a5, &cf);
    if (v12)
    {
LABEL_13:
      uint64_t v15 = v12;
      goto LABEL_15;
    }
    uint64_t v13 = *((void *)a1 + 4);
    if (v13) {
      uint64_t v14 = *((void *)a1 + 4);
    }
    else {
      uint64_t v14 = 0;
    }
    if (*(void *)(v14 + 88))
    {
      uint64_t v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t, CFTypeRef, uint64_t, uint64_t))(v13 + 88))(a1, v17, a3, cf, a5, a6);
      goto LABEL_13;
    }
    uint64_t v15 = 4294950302;
  }
  else
  {
    uint64_t v15 = 0;
  }
LABEL_15:
  if (cf) {
    CFRelease(cf);
  }
  return v15;
}

uint64_t CMPhotoDecompressionContainerCopyThumbnailFormatDescriptionForIndexWithOptions(void *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v12 = -1;
  uint64_t result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a4, (const __CFNumber **)&v12, 0, 0);
  if (!result)
  {
    if (a3 < 0)
    {
      return 4294950306;
    }
    else if (a5)
    {
      uint64_t v9 = a1[4];
      if (v9) {
        uint64_t v10 = a1[4];
      }
      else {
        uint64_t v10 = 0;
      }
      if (*(void *)(v10 + 392))
      {
        if (v9) {
          uint64_t v11 = a1[4];
        }
        else {
          uint64_t v11 = 0;
        }
        return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(v11 + 392))(a1, v12, a3, a5);
      }
      else
      {
        return 4294950302;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerCopyThumbnailFormatDescriptionForIndex(void *a1, const __CFNumber *a2, uint64_t a3, uint64_t a4)
{
  return CMPhotoDecompressionContainerCopyThumbnailFormatDescriptionForIndexWithOptions(a1, a2, a3, 0, a4);
}

uint64_t CMPhotoDecompressionContainerCopyThumbnailSampleBufferForIndexWithOptions(void *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5)
{
  CFTypeRef cf = 0;
  uint64_t v5 = 4294950306;
  if (a1 && (a3 & 0x8000000000000000) == 0)
  {
    if (a5)
    {
      uint64_t v7 = CMPhotoDecompressionContainerCreateTileIteratorForThumbnailImageIndexWithOptions(a1, a2, a3, a4, &cf);
      CFTypeRef v8 = cf;
      if (!v7) {
        uint64_t v7 = _copySampleBufferFromIterator((uint64_t)cf, a5);
      }
      uint64_t v5 = v7;
      if (v8) {
        CFRelease(v8);
      }
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

uint64_t CMPhotoDecompressionContainerCreateTileIteratorForThumbnailImageIndexWithOptions(void *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, CFTypeRef *a5)
{
  CFTypeRef cf = 0;
  if (!a1) {
    return 4294950306;
  }
  CFNumberRef v18 = 0;
  uint64_t ThumbnailCountForIndexWithOptions = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a4, &v18, 0, 0);
  if (ThumbnailCountForIndexWithOptions) {
    return ThumbnailCountForIndexWithOptions;
  }
  uint64_t v17 = 0;
  uint64_t ThumbnailCountForIndexWithOptions = CMPhotoDecompressionContainerGetThumbnailCountForIndexWithOptions(a1, a2, a4, (uint64_t)&v17);
  if (ThumbnailCountForIndexWithOptions) {
    return ThumbnailCountForIndexWithOptions;
  }
  if (v17 <= a3) {
    return FigSignalErrorAt();
  }
  uint64_t v11 = _allocateTileIterator(a1, &cf);
  uint64_t v12 = cf;
  if (v11)
  {
    uint64_t v15 = v11;
    goto LABEL_19;
  }
  *((void *)cf + 3) = v18;
  v12[5] = a3;
  uint64_t v13 = a1[4];
  if (v13) {
    uint64_t v14 = a1[4];
  }
  else {
    uint64_t v14 = 0;
  }
  if (!*(void *)(v14 + 240))
  {
    uint64_t v15 = 4294950302;
LABEL_13:
    CFRelease(v12);
    return v15;
  }
  uint64_t v15 = (*(uint64_t (**)(void *, void))(v13 + 240))(a1, 0);
  uint64_t v12 = cf;
  if (v15)
  {
LABEL_19:
    if (!v12) {
      return v15;
    }
    goto LABEL_13;
  }
  *a5 = cf;
  return v15;
}

uint64_t CMPhotoDecompressionContainerCopyThumbnailSampleBufferForIndex(void *a1, const __CFNumber *a2, uint64_t a3, uint64_t a4)
{
  return CMPhotoDecompressionContainerCopyThumbnailSampleBufferForIndexWithOptions(a1, a2, a3, 0, a4);
}

uint64_t CMPhotoDecompressionContainerGetAuxiliaryImageCountForIndex(void *a1, const __CFNumber *a2, uint64_t a3)
{
  return CMPhotoDecompressionContainerGetAuxiliaryImageCountForIndexWithOptions(a1, a2, 0, a3);
}

uint64_t CMPhotoDecompressionContainerGetAuxiliaryImageDimensionsForIndex(void *a1, const __CFNumber *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return CMPhotoDecompressionContainerGetAuxiliaryImageGeometryForIndexWithOptions(a1, a2, a3, 0, a4, a5, 0);
}

uint64_t CMPhotoDecompressionContainerGetAuxiliaryImageGeometryForIndexWithOptions(void *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v16 = -1;
  uint64_t result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a4, (const __CFNumber **)&v16, 0, 0);
  if (!result)
  {
    if (a3 < 0)
    {
      return 4294950306;
    }
    else
    {
      uint64_t v14 = a1[4];
      if (v14) {
        uint64_t v15 = a1[4];
      }
      else {
        uint64_t v15 = 0;
      }
      if (*(void *)(v15 + 144)) {
        return (*(uint64_t (**)(void *, uint64_t, uint64_t, const __CFDictionary *, uint64_t, uint64_t, uint64_t))(v14 + 144))(a1, v16, a3, a4, a5, a6, a7);
      }
      else {
        return 4294950302;
      }
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerGetAuxiliaryImageGeometryForIndex(void *a1, const __CFNumber *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return CMPhotoDecompressionContainerGetAuxiliaryImageGeometryForIndexWithOptions(a1, a2, a3, 0, a4, a5, a6);
}

uint64_t CMPhotoDecompressionContainerCopyAuxiliaryImageBitDepthForIndexWithOptions(void *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v12 = -1;
  uint64_t result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a4, (const __CFNumber **)&v12, 0, 0);
  if (!result)
  {
    if (a5)
    {
      uint64_t v9 = a1[4];
      if (v9) {
        uint64_t v10 = a1[4];
      }
      else {
        uint64_t v10 = 0;
      }
      if (*(void *)(v10 + 432))
      {
        if (v9) {
          uint64_t v11 = a1[4];
        }
        else {
          uint64_t v11 = 0;
        }
        return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(v11 + 432))(a1, v12, a3, a5);
      }
      else
      {
        return 4294950302;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerCopyAuxiliaryImageBitDepthForIndex(void *a1, const __CFNumber *a2, uint64_t a3, uint64_t a4)
{
  return CMPhotoDecompressionContainerCopyAuxiliaryImageBitDepthForIndexWithOptions(a1, a2, a3, 0, a4);
}

uint64_t CMPhotoDecompressionContainerGetAuxiliaryEncodedPixelFormatForIndexWithOptions(void *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v12 = -1;
  uint64_t result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a4, (const __CFNumber **)&v12, 0, 0);
  if (!result)
  {
    if (a5)
    {
      uint64_t v9 = a1[4];
      if (v9) {
        uint64_t v10 = a1[4];
      }
      else {
        uint64_t v10 = 0;
      }
      if (*(void *)(v10 + 440))
      {
        if (v9) {
          uint64_t v11 = a1[4];
        }
        else {
          uint64_t v11 = 0;
        }
        return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(v11 + 440))(a1, v12, a3, a5);
      }
      else
      {
        return 4294950302;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerGetAuxiliaryEncodedPixelFormatForIndex(void *a1, const __CFNumber *a2, uint64_t a3, uint64_t a4)
{
  return CMPhotoDecompressionContainerGetAuxiliaryEncodedPixelFormatForIndexWithOptions(a1, a2, a3, 0, a4);
}

uint64_t CMPhotoDecompressionContainerGetAuxiliaryImageTypeForIndexWithOptions(void *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5, uint64_t a6)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v14 = -1;
  uint64_t result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a4, (const __CFNumber **)&v14, 0, 0);
  if (!result)
  {
    if (a3 < 0)
    {
      return 4294950306;
    }
    else
    {
      uint64_t v12 = a1[4];
      if (v12) {
        uint64_t v13 = a1[4];
      }
      else {
        uint64_t v13 = 0;
      }
      if (*(void *)(v13 + 152)) {
        return (*(uint64_t (**)(void *, uint64_t, uint64_t, const __CFDictionary *, uint64_t, uint64_t))(v12 + 152))(a1, v14, a3, a4, a5, a6);
      }
      else {
        return 4294950302;
      }
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerGetAuxiliaryImageTypeForIndex(void *a1, const __CFNumber *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return CMPhotoDecompressionContainerGetAuxiliaryImageTypeForIndexWithOptions(a1, a2, a3, 0, a4, a5);
}

uint64_t CMPhotoDecompressionContainerCopyAuxiliaryImageCGColorSpaceForIndexWithOptions(void *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v11 = -1;
  uint64_t result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a4, (const __CFNumber **)&v11, 0, 0);
  if (!result)
  {
    if (a5)
    {
      uint64_t v9 = a1[4];
      if (v9) {
        uint64_t v10 = a1[4];
      }
      else {
        uint64_t v10 = 0;
      }
      if (*(void *)(v10 + 200)) {
        return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(v9 + 200))(a1, v11, a3, a5);
      }
      else {
        return 4294950302;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerCopyAuxiliaryImageCGColorSpaceForIndex(void *a1, const __CFNumber *a2, uint64_t a3, uint64_t a4)
{
  return CMPhotoDecompressionContainerCopyAuxiliaryImageCGColorSpaceForIndexWithOptions(a1, a2, a3, 0, a4);
}

uint64_t CMPhotoDecompressionContainerFindFirstAuxiliaryOfTypeForIndexWithOptions(void *a1, const __CFNumber *a2, const __CFDictionary *a3, int a4, uint64_t a5, char *a6, uint64_t *a7)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t result = 4294950306;
  if (a6 && a7)
  {
    uint64_t v14 = -1;
    uint64_t result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a3, (const __CFNumber **)&v14, 0, 0);
    if (!result) {
      return CMPhotoDecompressionContainerFindFirstAuxiliaryOfTypeForInternalIndexWithOptions(a1, v14, (uint64_t)a3, a4, a5, a6, a7);
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerCopyAuxiliaryImageTypeURNForIndex(void *a1, const __CFNumber *a2, uint64_t a3, uint64_t a4)
{
  return CMPhotoDecompressionContainerCopyAuxiliaryImageTypeURNForIndexWithOptions(a1, a2, a3, 0, a4);
}

uint64_t CMPhotoDecompressionContainerCopyAuxiliaryImageSubTypeDataForIndexWithOptions(void *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v12 = -1;
  uint64_t result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a4, (const __CFNumber **)&v12, 0, 0);
  if (!result)
  {
    if (a3 < 0)
    {
      return 4294950306;
    }
    else
    {
      uint64_t v10 = a1[4];
      if (v10) {
        uint64_t v11 = a1[4];
      }
      else {
        uint64_t v11 = 0;
      }
      if (*(void *)(v11 + 160)) {
        return (*(uint64_t (**)(void *, uint64_t, uint64_t, const __CFDictionary *, void, uint64_t))(v10 + 160))(a1, v12, a3, a4, 0, a5);
      }
      else {
        return 4294950302;
      }
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerCopyAuxiliaryImageSubTypeDataForIndex(void *a1, const __CFNumber *a2, uint64_t a3, uint64_t a4)
{
  return CMPhotoDecompressionContainerCopyAuxiliaryImageSubTypeDataForIndexWithOptions(a1, a2, a3, 0, a4);
}

uint64_t CMPhotoDecompressionContainerCopyAuxiliaryImageMetadataForIndexWithOptions(void *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v12 = -1;
  uint64_t result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a4, (const __CFNumber **)&v12, 0, 0);
  if (!result)
  {
    if (a3 < 0)
    {
      return 4294950306;
    }
    else
    {
      uint64_t v10 = a1[4];
      if (v10) {
        uint64_t v11 = a1[4];
      }
      else {
        uint64_t v11 = 0;
      }
      if (*(void *)(v11 + 168)) {
        return (*(uint64_t (**)(void *, uint64_t, uint64_t, const __CFDictionary *, uint64_t))(v10 + 168))(a1, v12, a3, a4, a5);
      }
      else {
        return 4294950302;
      }
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerCopyAuxiliaryImageMetadataForIndex(void *a1, const __CFNumber *a2, uint64_t a3, uint64_t a4)
{
  return CMPhotoDecompressionContainerCopyAuxiliaryImageMetadataForIndexWithOptions(a1, a2, a3, 0, a4);
}

uint64_t CMPhotoDecompressionContainerCopyAuxiliaryFormatInfoForIndexWithOptions(void *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v11 = -1;
  uint64_t result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a4, (const __CFNumber **)&v11, 0, 0);
  if (!result)
  {
    if (a3 < 0)
    {
      return 4294950306;
    }
    else
    {
      uint64_t v9 = a1[4];
      if (v9) {
        uint64_t v10 = a1[4];
      }
      else {
        uint64_t v10 = 0;
      }
      if (*(void *)(v10 + 176)) {
        return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(v9 + 176))(a1, v11, a3, a5);
      }
      else {
        return 4294950302;
      }
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerCopyAuxiliaryFormatInfoForIndex(void *a1, const __CFNumber *a2, uint64_t a3, uint64_t a4)
{
  return CMPhotoDecompressionContainerCopyAuxiliaryFormatInfoForIndexWithOptions(a1, a2, a3, 0, a4);
}

uint64_t CMPhotoDecompressionContainerCopyAuxiliaryImageFormatDescriptionForIndexWithOptions(void *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v12 = -1;
  uint64_t result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a4, (const __CFNumber **)&v12, 0, 0);
  if (!result)
  {
    if (a3 < 0)
    {
      return 4294950306;
    }
    else if (a5)
    {
      uint64_t v10 = a1[4];
      if (v10) {
        uint64_t v11 = a1[4];
      }
      else {
        uint64_t v11 = 0;
      }
      if (*(void *)(v11 + 184)) {
        return (*(uint64_t (**)(void *, uint64_t, uint64_t, const __CFDictionary *, uint64_t))(v10 + 184))(a1, v12, a3, a4, a5);
      }
      else {
        return 4294950302;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerCopyAuxiliaryImageFormatDescriptionForIndex(void *a1, const __CFNumber *a2, uint64_t a3, uint64_t a4)
{
  return CMPhotoDecompressionContainerCopyAuxiliaryImageFormatDescriptionForIndexWithOptions(a1, a2, a3, 0, a4);
}

uint64_t CMPhotoDecompressionContainerCopyAuxiliaryImageSampleBufferForIndexWithOptions(void *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5)
{
  CFTypeRef cf = 0;
  uint64_t v5 = 4294950306;
  if (a1 && (a3 & 0x8000000000000000) == 0)
  {
    if (a5)
    {
      uint64_t v7 = CMPhotoDecompressionContainerCreateTileIteratorForAuxiliaryImageIndexWithOptions(a1, a2, a3, a4, &cf);
      CFTypeRef v8 = cf;
      if (!v7) {
        uint64_t v7 = _copySampleBufferFromIterator((uint64_t)cf, a5);
      }
      uint64_t v5 = v7;
      if (v8) {
        CFRelease(v8);
      }
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

uint64_t CMPhotoDecompressionContainerCreateTileIteratorForAuxiliaryImageIndexWithOptions(void *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, CFTypeRef *a5)
{
  CFTypeRef cf = 0;
  if (!a1) {
    return 4294950306;
  }
  CFNumberRef v18 = 0;
  uint64_t AuxiliaryImageCountForIndexWithOptions = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a4, &v18, 0, 0);
  if (AuxiliaryImageCountForIndexWithOptions) {
    return AuxiliaryImageCountForIndexWithOptions;
  }
  uint64_t v17 = 0;
  uint64_t AuxiliaryImageCountForIndexWithOptions = CMPhotoDecompressionContainerGetAuxiliaryImageCountForIndexWithOptions(a1, a2, a4, (uint64_t)&v17);
  if (AuxiliaryImageCountForIndexWithOptions) {
    return AuxiliaryImageCountForIndexWithOptions;
  }
  if (v17 <= a3) {
    return FigSignalErrorAt();
  }
  uint64_t v11 = _allocateTileIterator(a1, &cf);
  uint64_t v12 = cf;
  if (v11)
  {
    uint64_t v15 = v11;
    goto LABEL_19;
  }
  *((void *)cf + 3) = v18;
  v12[4] = a3;
  uint64_t v13 = a1[4];
  if (v13) {
    uint64_t v14 = a1[4];
  }
  else {
    uint64_t v14 = 0;
  }
  if (!*(void *)(v14 + 240))
  {
    uint64_t v15 = 4294950302;
LABEL_13:
    CFRelease(v12);
    return v15;
  }
  uint64_t v15 = (*(uint64_t (**)(void *, void))(v13 + 240))(a1, 0);
  uint64_t v12 = cf;
  if (v15)
  {
LABEL_19:
    if (!v12) {
      return v15;
    }
    goto LABEL_13;
  }
  *a5 = cf;
  return v15;
}

uint64_t CMPhotoDecompressionContainerCopyAuxiliaryImageSampleBufferForIndex(void *a1, const __CFNumber *a2, uint64_t a3, uint64_t a4)
{
  return CMPhotoDecompressionContainerCopyAuxiliaryImageSampleBufferForIndexWithOptions(a1, a2, a3, 0, a4);
}

uint64_t CMPhotoDecompressionContainerCreateAuxiliaryImageForIndex(void *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5, uint64_t a6)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v14 = -1;
  uint64_t result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a4, (const __CFNumber **)&v14, 0, 0);
  if (!result)
  {
    if (a3 < 0)
    {
      return 4294950306;
    }
    else if (a5 == 4)
    {
      return 4294950300;
    }
    else if (a6)
    {
      uint64_t v12 = a1[4];
      if (v12) {
        uint64_t v13 = a1[4];
      }
      else {
        uint64_t v13 = 0;
      }
      if (*(void *)(v13 + 192)) {
        return (*(uint64_t (**)(void *, uint64_t, uint64_t, const __CFDictionary *, uint64_t, uint64_t))(v12 + 192))(a1, v14, a3, a4, a5, a6);
      }
      else {
        return 4294950302;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerCreateAuxiliaryImageDictionaryRepresentation(void *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, __CFDictionary **a5)
{
  CFTypeRef v22 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v20 = 0;
  CMTimeValue value = 0;
  if (a5)
  {
    uint64_t v19 = -1;
    AuxiliaryImageForIndedouble x = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a4, (const __CFNumber **)&v19, 0, 0);
    if (AuxiliaryImageForIndex
      || (AuxiliaryImageForIndedouble x = CMPhotoDecompressionContainerCreateAuxiliaryImageForIndex(a1, a2, a3, a4, 2, (uint64_t)&cf), AuxiliaryImageForIndex))
    {
      uint64_t v16 = AuxiliaryImageForIndex;
LABEL_17:
      CFMutableArrayRef Mutable = 0;
      goto LABEL_18;
    }
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      AuxiliaryDataDictionaryFromPixelIOSurfaceRef buffer = CMPhotoCreateAuxiliaryDataDictionaryFromPixelbuffer((__CVBuffer *)cf, (__CFData **)&value, (__CFDictionary **)&v20);
      if (!AuxiliaryDataDictionaryFromPixelbuffer)
      {
        if (v20)
        {
          int v18 = 0;
          uint64_t v13 = a1[4];
          uint64_t v14 = v13 ? a1[4] : 0;
          if (*(void *)(v14 + 144)
            && !(*(unsigned int (**)(void *, uint64_t, uint64_t, void, void, void, int *))(v13 + 144))(a1, v19, a3, 0, 0, 0, &v18))
          {
            CMPhotoCFDictionarySetInt((__CFDictionary *)v20, (const void *)*MEMORY[0x1E4F2FCA0], v18);
          }
        }
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F2F370], value);
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F2F378], v20);
        uint64_t v15 = CMPhotoDecompressionContainerCopyAuxiliaryImageMetadataForIndexWithOptions(a1, a2, a3, a4, (uint64_t)&v22);
        if (v15)
        {
          uint64_t v16 = v15;
          if (v15 != -16993) {
            goto LABEL_18;
          }
        }
        else
        {
          CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F2F380], v22);
        }
        uint64_t v16 = 0;
        *a5 = Mutable;
        goto LABEL_17;
      }
      uint64_t v16 = AuxiliaryDataDictionaryFromPixelbuffer;
    }
    else
    {
      uint64_t v16 = 4294950305;
    }
  }
  else
  {
    CFMutableArrayRef Mutable = 0;
    uint64_t v16 = 4294950306;
  }
LABEL_18:
  if (cf) {
    CFRelease(cf);
  }
  if (v22) {
    CFRelease(v22);
  }
  if (value) {
    CFRelease(value);
  }
  if (v20) {
    CFRelease(v20);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v16;
}

uint64_t CMPhotoDecompressionContainerCreateOutputBufferAttributesForImageIndex(void *a1, const __CFNumber *a2, const __CFDictionary *a3, uint64_t a4)
{
  uint64_t result = 4294950306;
  if (a1)
  {
    if (a4)
    {
      uint64_t v10 = -1;
      uint64_t result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a3, (const __CFNumber **)&v10, 0, 0);
      if (!result)
      {
        uint64_t v8 = a1[4];
        if (v8) {
          uint64_t v9 = a1[4];
        }
        else {
          uint64_t v9 = 0;
        }
        if (*(void *)(v9 + 208)) {
          return (*(uint64_t (**)(void *, uint64_t, const __CFDictionary *, uint64_t))(v8 + 208))(a1, v10, a3, a4);
        }
        else {
          return 4294950302;
        }
      }
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerCreateOutputBufferAttributesForThumbnailIndex(void *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5)
{
  uint64_t result = 4294950306;
  if (a1)
  {
    if (a5)
    {
      uint64_t v12 = -1;
      uint64_t result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a4, (const __CFNumber **)&v12, 0, 0);
      if (!result)
      {
        uint64_t v10 = a1[4];
        if (v10) {
          uint64_t v11 = a1[4];
        }
        else {
          uint64_t v11 = 0;
        }
        if (*(void *)(v11 + 216)) {
          return (*(uint64_t (**)(void *, uint64_t, uint64_t, const __CFDictionary *, uint64_t))(v10 + 216))(a1, v12, a3, a4, a5);
        }
        else {
          return 4294950302;
        }
      }
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerCreateOutputBufferAttributesForAuxiliaryImageIndex(void *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5)
{
  uint64_t result = 4294950306;
  if (a1)
  {
    if (a5)
    {
      uint64_t v12 = -1;
      uint64_t result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a4, (const __CFNumber **)&v12, 0, 0);
      if (!result)
      {
        uint64_t v10 = a1[4];
        if (v10) {
          uint64_t v11 = a1[4];
        }
        else {
          uint64_t v11 = 0;
        }
        if (*(void *)(v11 + 224)) {
          return (*(uint64_t (**)(void *, uint64_t, uint64_t, const __CFDictionary *, uint64_t))(v10 + 224))(a1, v12, a3, a4, a5);
        }
        else {
          return 4294950302;
        }
      }
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerGetExifCountForIndex(void *a1, const __CFNumber *a2, void *a3)
{
  return CMPhotoDecompressionContainerGetExifCountForIndexWithOptions(a1, a2, 0, a3);
}

uint64_t CMPhotoDecompressionContainerCopyExifForIndexWithOptions(void *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5, uint64_t a6)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v15 = -1;
  uint64_t result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a4, (const __CFNumber **)&v15, 0, 0);
  if (!result)
  {
    if (a5 | a6)
    {
      uint64_t v12 = a1[4];
      if (v12) {
        uint64_t v13 = a1[4];
      }
      else {
        uint64_t v13 = 0;
      }
      if (*(void *)(v13 + 256))
      {
        if (v12) {
          uint64_t v14 = a1[4];
        }
        else {
          uint64_t v14 = 0;
        }
        return (*(uint64_t (**)(void *, uint64_t, uint64_t, const __CFDictionary *, uint64_t, uint64_t))(v14 + 256))(a1, v15, a3, a4, a5, a6);
      }
      else
      {
        return 4294950302;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerCopyExifForIndex(void *a1, const __CFNumber *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return CMPhotoDecompressionContainerCopyExifForIndexWithOptions(a1, a2, a3, 0, a4, a5);
}

uint64_t CMPhotoDecompressionContainerGetXMPCountForIndex(void *a1, const __CFNumber *a2, void *a3)
{
  return CMPhotoDecompressionContainerGetXMPCountForIndexWithOptions(a1, a2, 0, a3);
}

uint64_t CMPhotoDecompressionContainerCopyXMPForIndexWithOptions(void *a1, const __CFNumber *a2, uint64_t a3, int a4, const __CFDictionary *a5, void *a6)
{
  CFTypeRef cf = 0;
  if (!a1) {
    return 4294950306;
  }
  uint64_t v21 = -1;
  uint64_t v11 = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a5, (const __CFNumber **)&v21, 0, 0);
  if (v11) {
    goto LABEL_23;
  }
  if (!a6)
  {
LABEL_20:
    uint64_t v16 = 0;
    goto LABEL_11;
  }
  CFAllocatorRef v12 = CFGetAllocator(a1);
  uint64_t v13 = a1[4];
  if (v13) {
    uint64_t v14 = a1[4];
  }
  else {
    uint64_t v14 = 0;
  }
  if (!*(void *)(v14 + 272))
  {
    uint64_t v16 = 4294950302;
    goto LABEL_11;
  }
  uint64_t v15 = v13 ? a1[4] : 0;
  uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t, const __CFDictionary *, CFTypeRef *))(v15 + 272))(a1, v21, a3, a5, &cf);
  if (v11)
  {
LABEL_23:
    uint64_t v16 = v11;
    goto LABEL_11;
  }
  if (!a4)
  {
    uint64_t v16 = 0;
    *a6 = cf;
    return v16;
  }
  if (a4 != 1) {
    goto LABEL_20;
  }
  unsigned __int8 BytePtr = CFDataGetBytePtr((CFDataRef)cf);
  CFIndex Length = CFDataGetLength((CFDataRef)cf);
  CFStringRef v20 = CFStringCreateWithBytes(v12, BytePtr, Length, 0x8000100u, 0);
  if (v20)
  {
    uint64_t v16 = 0;
    *a6 = v20;
  }
  else
  {
    uint64_t v16 = 4294950305;
  }
LABEL_11:
  if (cf) {
    CFRelease(cf);
  }
  return v16;
}

uint64_t CMPhotoDecompressionContainerCopyXMPForIndex(void *a1, const __CFNumber *a2, uint64_t a3, int a4, void *a5)
{
  return CMPhotoDecompressionContainerCopyXMPForIndexWithOptions(a1, a2, a3, a4, 0, a5);
}

uint64_t CMPhotoDecompressionContainerGetDebugMetadataCountForIndexWithOptions(void *a1, const __CFNumber *a2, const __CFDictionary *a3, void *a4)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v12 = -1;
  uint64_t result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a3, (const __CFNumber **)&v12, 0, 0);
  if (!result)
  {
    uint64_t v8 = a1[4];
    if (v8) {
      uint64_t v9 = a1[4];
    }
    else {
      uint64_t v9 = 0;
    }
    if (*(void *)(v9 + 280))
    {
      if (v8) {
        uint64_t v10 = a1[4];
      }
      else {
        uint64_t v10 = 0;
      }
      if (*(void *)(v10 + 280))
      {
        if (v8) {
          uint64_t v11 = a1[4];
        }
        else {
          uint64_t v11 = 0;
        }
        return (*(uint64_t (**)(void *, uint64_t, const __CFDictionary *, void *))(v11 + 280))(a1, v12, a3, a4);
      }
      else
      {
        return 4294950302;
      }
    }
    else
    {
      uint64_t result = 0;
      if (a4) {
        *a4 = 0;
      }
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerGetDebugMetadataCountForIndex(void *a1, const __CFNumber *a2, void *a3)
{
  return CMPhotoDecompressionContainerGetDebugMetadataCountForIndexWithOptions(a1, a2, 0, a3);
}

uint64_t CMPhotoDecompressionContainerCopyDebugMetadataForIndexWithOptions(void *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v13 = -1;
  uint64_t result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a4, (const __CFNumber **)&v13, 0, 0);
  if (!result)
  {
    if (a5)
    {
      uint64_t v10 = a1[4];
      if (v10) {
        uint64_t v11 = a1[4];
      }
      else {
        uint64_t v11 = 0;
      }
      if (*(void *)(v11 + 288))
      {
        if (v10) {
          uint64_t v12 = a1[4];
        }
        else {
          uint64_t v12 = 0;
        }
        return (*(uint64_t (**)(void *, uint64_t, uint64_t, const __CFDictionary *, uint64_t))(v12 + 288))(a1, v13, a3, a4, a5);
      }
      else
      {
        return 4294950302;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerCopyDebugMetadataForIndex(void *a1, const __CFNumber *a2, uint64_t a3, uint64_t a4)
{
  return CMPhotoDecompressionContainerCopyDebugMetadataForIndexWithOptions(a1, a2, a3, 0, a4);
}

uint64_t CMPhotoDecompressionContainerGetCustomMetadataCountForIndexWithOptions(void *a1, const __CFNumber *a2, const __CFDictionary *a3, void *a4)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v12 = -1;
  uint64_t result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a3, (const __CFNumber **)&v12, 0, 0);
  if (!result)
  {
    uint64_t v8 = a1[4];
    if (v8) {
      uint64_t v9 = a1[4];
    }
    else {
      uint64_t v9 = 0;
    }
    if (*(void *)(v9 + 296))
    {
      if (v8) {
        uint64_t v10 = a1[4];
      }
      else {
        uint64_t v10 = 0;
      }
      if (*(void *)(v10 + 296))
      {
        if (v8) {
          uint64_t v11 = a1[4];
        }
        else {
          uint64_t v11 = 0;
        }
        return (*(uint64_t (**)(void *, uint64_t, const __CFDictionary *, void *))(v11 + 296))(a1, v12, a3, a4);
      }
      else
      {
        return 4294950302;
      }
    }
    else
    {
      uint64_t result = 0;
      if (a4) {
        *a4 = 0;
      }
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerGetCustomMetadataCountForIndex(void *a1, const __CFNumber *a2, void *a3)
{
  return CMPhotoDecompressionContainerGetCustomMetadataCountForIndexWithOptions(a1, a2, 0, a3);
}

uint64_t CMPhotoDecompressionContainerCopyCustomMetadataForIndexWithOptions(void *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v13 = -1;
  uint64_t result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a4, (const __CFNumber **)&v13, 0, 0);
  if (!result)
  {
    if (a5)
    {
      uint64_t v10 = a1[4];
      if (v10) {
        uint64_t v11 = a1[4];
      }
      else {
        uint64_t v11 = 0;
      }
      if (*(void *)(v11 + 304))
      {
        if (v10) {
          uint64_t v12 = a1[4];
        }
        else {
          uint64_t v12 = 0;
        }
        return (*(uint64_t (**)(void *, uint64_t, uint64_t, const __CFDictionary *, uint64_t))(v12 + 304))(a1, v13, a3, a4, a5);
      }
      else
      {
        return 4294950302;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerCopyCustomMetadataForIndex(void *a1, const __CFNumber *a2, uint64_t a3, uint64_t a4)
{
  return CMPhotoDecompressionContainerCopyCustomMetadataForIndexWithOptions(a1, a2, a3, 0, a4);
}

uint64_t CMPhotoDecompressionContainerCopyStereoMetadataForIndex()
{
  return FigSignalErrorAt();
}

uint64_t CMPhotoDecompressionContainerCopyHEIFItemPropertiesForIndex(void *a1, const __CFNumber *a2, uint64_t a3)
{
  return CMPhotoDecompressionContainerCopyHEIFItemPropertiesForIndexWithOptions(a1, a2, 0, a3);
}

uint64_t CMPhotoDecompressionContainerCopyGroupsDescriptionArray(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 4294950306;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  else {
    uint64_t v3 = 0;
  }
  if (!*(void *)(v3 + 320)) {
    return 4294950302;
  }
  if (v2) {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  else {
    uint64_t v4 = 0;
  }
  return (*(uint64_t (**)(void))(v4 + 320))();
}

uint64_t CMPhotoDecompressionContainerCopyCGColorSpaceForIndexWithOptions(void *a1, const __CFNumber *a2, const __CFDictionary *a3, uint64_t a4)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v10 = -1;
  uint64_t result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a3, (const __CFNumber **)&v10, 0, 0);
  if (!result)
  {
    if (a4)
    {
      uint64_t v7 = a1[4];
      if (v7) {
        uint64_t v8 = a1[4];
      }
      else {
        uint64_t v8 = 0;
      }
      if (*(void *)(v8 + 448))
      {
        if (v7) {
          uint64_t v9 = a1[4];
        }
        else {
          uint64_t v9 = 0;
        }
        return (*(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 448))(a1, v10, a4);
      }
      else
      {
        return 4294950302;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerCopyCGColorSpaceForIndex(void *a1, const __CFNumber *a2, uint64_t a3)
{
  return CMPhotoDecompressionContainerCopyCGColorSpaceForIndexWithOptions(a1, a2, 0, a3);
}

uint64_t CMPhotoDecompressionContainerCopyImagePropertiesForInternalIndex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, CFTypeRef *a6)
{
  CFDataRef v77 = 0;
  uint64_t v78 = 0;
  CFDataRef v76 = 0;
  CFTypeRef v74 = 0;
  CFTypeRef v75 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v73 = 0;
  CFTypeRef v70 = 0;
  CFTypeRef v71 = 0;
  char v69 = 0;
  unint64_t v67 = 0;
  unint64_t v68 = 0;
  if (!a1) {
    goto LABEL_143;
  }
  if (!a6)
  {
    uint64_t v17 = 0;
    goto LABEL_65;
  }
  CFAllocatorRef v12 = CFGetAllocator((CFTypeRef)a1);
  if (a3 != -1)
  {
    unsigned int v79 = 0;
    uint64_t v13 = *(void *)(a1 + 32);
    if (v13) {
      uint64_t v14 = *(void *)(a1 + 32);
    }
    else {
      uint64_t v14 = 0;
    }
    if (!*(void *)(v14 + 256)) {
      goto LABEL_64;
    }
    if (v13) {
      uint64_t v15 = *(void *)(a1 + 32);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, unsigned int *, __CFData **))(v15 + 256))(a1, a2, a3, 0, &v79, &v78);
    if (v16 != -16993)
    {
      uint64_t v17 = v16;
      if (v16) {
        goto LABEL_65;
      }
      CFIndex Length = CFDataGetLength(v78);
      if (Length < v79)
      {
        uint64_t v36 = FigSignalErrorAt();
        goto LABEL_146;
      }
      if (v79 != 6)
      {
        CFMutableArrayRef Mutable = CFDataCreateMutable(v12, 0);
        CFDataAppendBytes(Mutable, (const UInt8 *)"Exif", 6);
        unsigned __int8 BytePtr = CFDataGetBytePtr(v78);
        uint64_t v21 = &BytePtr[v79];
        CFIndex v22 = CFDataGetLength(v78);
        CFDataAppendBytes(Mutable, v21, v22 - v79);
        if (v78) {
          CFRelease(v78);
        }
        uint64_t v78 = Mutable;
      }
    }
  }
  if (a4 != -1)
  {
    uint64_t v23 = *(void *)(a1 + 32);
    if (v23) {
      uint64_t v24 = *(void *)(a1 + 32);
    }
    else {
      uint64_t v24 = 0;
    }
    if (!*(void *)(v24 + 272)) {
      goto LABEL_64;
    }
    if (v23) {
      uint64_t v25 = *(void *)(a1 + 32);
    }
    else {
      uint64_t v25 = 0;
    }
    uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, const __CFData **))(v25 + 272))(a1, a2, a4, 0, &v77);
    if (v26)
    {
      uint64_t v17 = v26;
      if (v26 != -16993) {
        goto LABEL_65;
      }
    }
  }
  char v28 = (uint64_t *)(a1 + 32);
  uint64_t v27 = *(void *)(a1 + 32);
  if (v27) {
    uint64_t v29 = *(void *)(a1 + 32);
  }
  else {
    uint64_t v29 = 0;
  }
  if (*(void *)(v29 + 456))
  {
    uint64_t v30 = v27 ? *(void *)(a1 + 32) : 0;
    uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, const __CFData **))(v30 + 456))(a1, a2, &v76);
    if ((v31 + 16994) >= 2)
    {
      uint64_t v17 = v31;
      if (v31) {
        goto LABEL_65;
      }
    }
  }
  uint64_t v32 = *v28 ? *v28 : 0;
  if (*(void *)(v32 + 288))
  {
    uint64_t v33 = *v28 ? *v28 : 0;
    uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, CFTypeRef *))(v33 + 288))(a1, a2, 0, a5, &v75);
    if ((v34 + 16994) >= 2)
    {
      uint64_t v17 = v34;
      if (v34) {
        goto LABEL_65;
      }
    }
  }
  unint64_t v65 = 0;
  unint64_t v66 = 0;
  unsigned int v64 = 0;
  if (*v28) {
    uint64_t v35 = *v28;
  }
  else {
    uint64_t v35 = 0;
  }
  if (!*(void *)(v35 + 56)) {
    goto LABEL_64;
  }
  uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t *, unint64_t *, unsigned int *))(*v28 + 56))(a1, a2, a5, &v66, &v65, &v64);
  if (v36) {
    goto LABEL_146;
  }
  uint64_t v63 = 0;
  if (*v28) {
    uint64_t v37 = *v28;
  }
  else {
    uint64_t v37 = 0;
  }
  if (*(void *)(v37 + 64)
    && !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*v28 + 64))(a1, a2, a5, &v73)
    && !CMPhotoCFArrayGetSizeAtIndex(v73, 0, &v63))
  {
    uint64_t v17 = 4294950304;
    goto LABEL_65;
  }
  v62[0] = (double)v66;
  v62[1] = (double)v65;
  uint64_t v36 = CMPhotoCreateImagePropertiesFromData(v12, v62, &v63, (uint64_t)v78, v77, v76, 0, 0, (__CFDictionary **)&v71);
  if (v36) {
    goto LABEL_146;
  }
  uint64_t v38 = *v28 ? *v28 : 0;
  if (!*(void *)(v38 + 448))
  {
LABEL_64:
    uint64_t v17 = 4294950302;
    goto LABEL_65;
  }
  if (*v28) {
    uint64_t v39 = *v28;
  }
  else {
    uint64_t v39 = 0;
  }
  uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *))(v39 + 448))(a1, a2, &cf);
  if (v41 == -16993)
  {
    CFTypeRef cf = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC98]);
    if (!cf)
    {
      uint64_t v17 = 4294950305;
      goto LABEL_67;
    }
  }
  else
  {
    uint64_t v17 = v41;
    if (v41) {
      goto LABEL_65;
    }
  }
  char v42 = (const void *)CGColorSpaceCopyICCProfileASCIIDescriptionString();
  if (v42)
  {
    char v43 = v42;
    CFDictionarySetValue((CFMutableDictionaryRef)v71, (const void *)*MEMORY[0x1E4F2FD10], v42);
    CFRelease(v43);
  }
  if (v75) {
    CFDictionarySetValue((CFMutableDictionaryRef)v71, @"iOS_Debug", v75);
  }
  if (!*(_DWORD *)(a1 + 536))
  {
    uint64_t v54 = *v28 ? *v28 : 0;
    if (*(void *)(v54 + 312))
    {
      uint64_t v60 = *v28 ? *v28 : 0;
      uint64_t v61 = (*(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(v60 + 312))(a1, a2, 0, &v74);
      if ((v61 + 16994) >= 2)
      {
        uint64_t v17 = v61;
        if (v61) {
          goto LABEL_65;
        }
      }
    }
  }
  CFDictionaryRef v44 = (const __CFDictionary *)v74;
  if (!v74)
  {
LABEL_106:
    if (CFDictionaryGetValue((CFDictionaryRef)v71, (const void *)*MEMORY[0x1E4F2FD40]))
    {
      uint64_t v36 = _createMutableTIFFProperties((int)v12, (CFDictionaryRef)v71, &v70);
      if (v36) {
        goto LABEL_146;
      }
      CFDictionaryRef v53 = (const __CFDictionary *)v70;
    }
    else
    {
      CFDictionaryRef v53 = 0;
    }
    unsigned int v79 = v64;
    char v55 = (const void *)*MEMORY[0x1E4F2FCA0];
    int IntIfPresent = CMPhotoCFDictionaryGetIntIfPresent((CFDictionaryRef)v71, (const void *)*MEMORY[0x1E4F2FCA0], &v79);
    char v57 = (const void **)MEMORY[0x1E4F2FD70];
    if (!IntIfPresent && v53) {
      CMPhotoCFDictionaryGetIntIfPresent(v53, (const void *)*MEMORY[0x1E4F2FD70], &v79);
    }
    uint64_t v36 = CMPhotoCFDictionarySetInt((__CFDictionary *)v71, v55, v64);
    if (!v36)
    {
      if (!v53 || (uint64_t v36 = CMPhotoCFDictionarySetInt(v53, *v57, v64), !v36))
      {
        if (*v28) {
          uint64_t v58 = *v28;
        }
        else {
          uint64_t v58 = 0;
        }
        if (!*(void *)(v58 + 328)
          || (!*v28 ? (uint64_t v59 = 0) : (uint64_t v59 = *v28),
              (*(unsigned int (**)(uint64_t, uint64_t, void, char *, unint64_t *, unint64_t *))(v59 + 328))(a1, a2, 0, &v69, &v68, &v67)))
        {
LABEL_134:
          uint64_t v17 = 0;
          *a6 = v71;
          CFTypeRef v71 = 0;
          goto LABEL_65;
        }
        if (!v69)
        {
          unint64_t v67 = v65;
          unint64_t v68 = v66;
        }
        if (v53) {
          goto LABEL_132;
        }
        uint64_t v36 = _createMutableTIFFProperties((int)v12, (CFDictionaryRef)v71, &v70);
        if (!v36)
        {
          CFDictionaryRef v53 = (const __CFDictionary *)v70;
LABEL_132:
          uint64_t v36 = CMPhotoCFDictionarySetInt64(v53, (const void *)*MEMORY[0x1E4F2FD98], v68);
          if (!v36)
          {
            uint64_t v17 = CMPhotoCFDictionarySetInt64(v53, (const void *)*MEMORY[0x1E4F2FD90], v67);
            if (v17) {
              goto LABEL_65;
            }
            goto LABEL_134;
          }
        }
      }
    }
LABEL_146:
    uint64_t v17 = v36;
    goto LABEL_65;
  }
  char v45 = (__CFDictionary *)v71;
  if (!v71)
  {
LABEL_143:
    uint64_t v17 = 4294950306;
    goto LABEL_65;
  }
  CFMutableDictionaryRef v46 = CFDictionaryCreateMutable(v12, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v46)
  {
    unint64_t v47 = v46;
    unsigned int v79 = 0;
    unint64_t v48 = (const void *)*MEMORY[0x1E4F34948];
    if (!CMPhotoCFDictionaryGetInt32IfPresent(v44, (const void *)*MEMORY[0x1E4F34948], &v79)
      || (LODWORD(v49) = v79, uint64_t v50 = CMPhotoCFDictionarySetDouble(v47, v48, (double)v49 / 1000.0), !v50))
    {
      CFDataRef Value = CFDictionaryGetValue(v44, @"CameraModel");
      if (Value) {
        CFDictionarySetValue(v47, @"CameraModel", Value);
      }
      uint64_t v52 = CFDictionaryGetValue(v44, @"CameraExtrinsics");
      if (v52) {
        CFDictionarySetValue(v47, @"CameraExtrinsics", v52);
      }
      if (CFDictionaryGetCount(v47) >= 1) {
        CFDictionarySetValue(v45, @"{HEIF}", v47);
      }
      CFRelease(v47);
      goto LABEL_106;
    }
    uint64_t v17 = v50;
    CFRelease(v47);
  }
  else
  {
    uint64_t v17 = 4294950305;
  }
LABEL_65:
  if (cf) {
    CFRelease(cf);
  }
LABEL_67:
  if (v73) {
    CFRelease(v73);
  }
  if (v75) {
    CFRelease(v75);
  }
  if (v78) {
    CFRelease(v78);
  }
  if (v77) {
    CFRelease(v77);
  }
  if (v76) {
    CFRelease(v76);
  }
  if (v71) {
    CFRelease(v71);
  }
  if (v70) {
    CFRelease(v70);
  }
  if (v74) {
    CFRelease(v74);
  }
  return v17;
}

uint64_t _createMutableTIFFProperties(int a1, CFDictionaryRef theDict, void *a3)
{
  uint64_t v5 = (const void *)*MEMORY[0x1E4F2FD40];
  CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F2FD40]);
  CFDictionaryRef MutableCopy = (const void *)FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy) {
    return 4294950305;
  }
  uint64_t v7 = MutableCopy;
  CFDictionarySetValue(theDict, v5, MutableCopy);
  uint64_t result = 0;
  *a3 = v7;
  return result;
}

uint64_t CMPhotoDecompressionContainerCopyImagePropertiesForIndexWithOptions(void *a1, const __CFNumber *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5, CFTypeRef *a6)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v12 = -1;
  uint64_t result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a5, (const __CFNumber **)&v12, 0, 0);
  if (!result)
  {
    if (a6) {
      return CMPhotoDecompressionContainerCopyImagePropertiesForInternalIndex((uint64_t)a1, v12, a3, a4, (uint64_t)a5, a6);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerCopyImagePropertiesForIndex(void *a1, const __CFNumber *a2, uint64_t a3, uint64_t a4, CFTypeRef *a5)
{
  return CMPhotoDecompressionContainerCopyImagePropertiesForIndexWithOptions(a1, a2, a3, a4, 0, a5);
}

uint64_t CMPhotoDecompressionContainerDecodeThumbnailForIndexAsyncF(char *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef cf = 0;
  if (!a1) {
    return 4294950306;
  }
  uint64_t v21 = -1;
  uint64_t v16 = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a4, (const __CFNumber **)&v21, 0, 0);
  if (v16) {
    goto LABEL_13;
  }
  uint64_t v17 = 4294950306;
  if ((a3 & 0x8000000000000000) == 0 && a7)
  {
    if (a4 && CFDictionaryContainsKey(a4, @"DryRun"))
    {
      uint64_t v16 = FigSignalErrorAt();
      goto LABEL_13;
    }
    uint64_t v16 = _createModifiedDecodeOptionsIfNeeded(a1, a2, a3, a4, a5, &cf);
    if (v16)
    {
LABEL_13:
      uint64_t v17 = v16;
      goto LABEL_15;
    }
    uint64_t v18 = *((void *)a1 + 4);
    if (v18) {
      uint64_t v19 = *((void *)a1 + 4);
    }
    else {
      uint64_t v19 = 0;
    }
    if (*(void *)(v19 + 104))
    {
      uint64_t v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t, CFTypeRef, uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 104))(a1, v21, a3, cf, a5, a6, a7, a8);
      goto LABEL_13;
    }
    uint64_t v17 = 4294950302;
  }
LABEL_15:
  if (cf) {
    CFRelease(cf);
  }
  return v17;
}

uint64_t CMPhotoDecompressionContainerDecodeAuxiliaryImageForIndexAsyncF(void *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v18 = -1;
  uint64_t result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a4, (const __CFNumber **)&v18, 0, 0);
  if (!result)
  {
    uint64_t result = 4294950306;
    if ((a3 & 0x8000000000000000) == 0)
    {
      if (a7)
      {
        if (a4 && CFDictionaryContainsKey(a4, @"DryRun"))
        {
          return FigSignalErrorAt();
        }
        else
        {
          uint64_t v16 = a1[4];
          if (v16) {
            uint64_t v17 = a1[4];
          }
          else {
            uint64_t v17 = 0;
          }
          if (*(void *)(v17 + 112)) {
            return (*(uint64_t (**)(void *, uint64_t, uint64_t, const __CFDictionary *, uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 112))(a1, v18, a3, a4, a5, a6, a7, a8);
          }
          else {
            return 4294950302;
          }
        }
      }
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerDecodeThumbnailForIndexAsync(char *a1, const __CFNumber *a2, uint64_t a3, CFDictionaryRef theDict, uint64_t a5, uint64_t a6, void *aBlock)
{
  if (theDict && CFDictionaryContainsKey(theDict, @"DryRun"))
  {
    uint64_t v14 = FigSignalErrorAt();
  }
  else
  {
    aBlocuint64_t k = _Block_copy(aBlock);
    uint64_t v14 = CMPhotoDecompressionContainerDecodeThumbnailForIndexAsyncF(a1, a2, a3, theDict, a5, a6, (uint64_t)_callback_CompletionHandlerWrapper_0, (uint64_t)aBlock);
  }
  uint64_t v15 = v14;
  if (aBlock && v14) {
    _Block_release(aBlock);
  }
  return v15;
}

uint64_t CMPhotoDecompressionContainerDecodeAuxiliaryImageForIndexAsync(void *a1, const __CFNumber *a2, uint64_t a3, CFDictionaryRef theDict, uint64_t a5, uint64_t a6, void *aBlock)
{
  if (theDict && CFDictionaryContainsKey(theDict, @"DryRun"))
  {
    uint64_t v14 = FigSignalErrorAt();
  }
  else
  {
    aBlocuint64_t k = _Block_copy(aBlock);
    uint64_t v14 = CMPhotoDecompressionContainerDecodeAuxiliaryImageForIndexAsyncF(a1, a2, a3, theDict, a5, a6, (uint64_t)_callback_CompletionHandlerWrapper_0, (uint64_t)aBlock);
  }
  uint64_t v15 = v14;
  if (aBlock && v14) {
    _Block_release(aBlock);
  }
  return v15;
}

uint64_t CMPhotoDecompressionContainerCancelAsyncRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 4294950306;
  if (!a1 || !a2) {
    return v2;
  }
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  else {
    uint64_t v4 = 0;
  }
  if (!*(void *)(v4 + 120)) {
    return 4294950302;
  }
  if (v3) {
    uint64_t v5 = *(void *)(a1 + 32);
  }
  else {
    uint64_t v5 = 0;
  }
  return (*(uint64_t (**)(void))(v5 + 120))();
}

uint64_t CMPhotoDecompressionContainerCreateSequenceContainer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 4294950306;
  if (!a1 || !a4) {
    return v4;
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    uint64_t v6 = *(void *)(a1 + 32);
  }
  else {
    uint64_t v6 = 0;
  }
  if (!*(void *)(v6 + 360)) {
    return 4294950302;
  }
  if (v5) {
    uint64_t v7 = *(void *)(a1 + 32);
  }
  else {
    uint64_t v7 = 0;
  }
  return (*(uint64_t (**)(void))(v7 + 360))();
}

uint64_t CMPhotoDecompressionContainerGetSequenceCount(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 4294950306;
  if (!a1 || !a2) {
    return v2;
  }
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  else {
    uint64_t v4 = 0;
  }
  if (!*(void *)(v4 + 352)) {
    return 4294950302;
  }
  if (v3) {
    uint64_t v5 = *(void *)(a1 + 32);
  }
  else {
    uint64_t v5 = 0;
  }
  return (*(uint64_t (**)(void))(v5 + 352))();
}

uint64_t CMPhotoDecompressionContainerGetVideoAndAudioCount(uint64_t a1, void *a2, void *a3)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  else {
    uint64_t v4 = 0;
  }
  if (*(void *)(v4 + 472))
  {
    if (v3) {
      uint64_t v5 = *(void *)(a1 + 32);
    }
    else {
      uint64_t v5 = 0;
    }
    if (*(void *)(v5 + 472))
    {
      if (v3) {
        uint64_t v7 = *(void *)(a1 + 32);
      }
      else {
        uint64_t v7 = 0;
      }
      return (*(uint64_t (**)(void))(v7 + 472))();
    }
    else
    {
      return 4294950302;
    }
  }
  else
  {
    if (a2) {
      *a2 = 0;
    }
    uint64_t result = 0;
    if (a3) {
      *a3 = 0;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerCreateTileIteratorForIndex(void *a1, const __CFNumber *a2, CFTypeRef *a3)
{
  return CMPhotoDecompressionContainerCreateTileIteratorForIndexWithOptions(a1, a2, 0, a3);
}

uint64_t CMPhotoDecompressionContainerCreateTileIteratorForAuxiliaryImageIndex(void *a1, const __CFNumber *a2, uint64_t a3, CFTypeRef *a4)
{
  return CMPhotoDecompressionContainerCreateTileIteratorForAuxiliaryImageIndexWithOptions(a1, a2, a3, 0, a4);
}

uint64_t CMPhotoDecompressionContainerCreateTileIteratorForThumbnailImageIndex(void *a1, const __CFNumber *a2, uint64_t a3, CFTypeRef *a4)
{
  return CMPhotoDecompressionContainerCreateTileIteratorForThumbnailImageIndexWithOptions(a1, a2, a3, 0, a4);
}

uint64_t CMPhotoDecompressionContainerInitColorController(void *a1, CFDictionaryRef theDict, void *a3, uint64_t a4)
{
  if (theDict)
  {
    uint64_t v14 = 0;
    CMTimeValue value = 0;
    if (CMPhotoCFDictionaryGetLongIfPresent(theDict, @"ColorConverterCallback", &v14))
    {
      uint64_t v8 = v14;
      int v13 = 0;
      if (CMPhotoCFDictionaryGetIntIfPresent(theDict, @"ColorConverterVersion", &v13)) {
        BOOL v9 = v13 == 1;
      }
      else {
        BOOL v9 = 0;
      }
      if (!v9) {
        return FigSignalErrorAt();
      }
      if (CMPhotoCFDictionaryGetLongIfPresent(theDict, @"ColorConverterUserPointer", &v14)) {
        uint64_t v10 = v14;
      }
      else {
        uint64_t v10 = 0;
      }
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v10 = 0;
    }
    if (CFDictionaryGetValueIfPresent(theDict, @"ColorConverterCGColorSpace", (const void **)&value))
    {
      if (value == (void *)*MEMORY[0x1E4F1D260])
      {
        a3 = 0;
        a4 = 0;
      }
      else
      {
        if (!value) {
          return FigSignalErrorAt();
        }
        CFTypeID v11 = CFGetTypeID(value);
        if (v11 != CGColorSpaceGetTypeID()) {
          return FigSignalErrorAt();
        }
        a4 = 0;
        a3 = value;
      }
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v10 = 0;
  }
  uint64_t result = 0;
  *a1 = a3;
  a1[1] = a4;
  a1[2] = v8;
  a1[3] = v10;
  return result;
}

uint64_t CMPhotoDecompressionContainerCreateAlphaDecodeOptionsForInternalIndex(uint64_t a1, uint64_t a2, uint64_t a3, int a4, void *a5, __CFDictionary **a6)
{
  int v16 = a4;
  if (!a1) {
    return 4294950306;
  }
  if (!a4)
  {
    DefaultFormatWhenDecodingAlphaForInternalIndedouble x = CMPhotoDecompressionContainerGetDefaultFormatWhenDecodingAlphaForInternalIndex(a1, a2, &v16);
    if (DefaultFormatWhenDecodingAlphaForInternalIndex) {
      return DefaultFormatWhenDecodingAlphaForInternalIndex;
    }
    a4 = v16;
  }
  uint64_t v9 = 4294950302;
  if (a4 > 1279340599)
  {
    if (a4 == 1279340600 || a4 == 1815491698) {
      goto LABEL_13;
    }
    int v10 = 1279340854;
  }
  else
  {
    if (a4 == 843264056 || a4 == 843264310) {
      goto LABEL_13;
    }
    int v10 = 1111970369;
  }
  if (a4 != v10) {
    return v9;
  }
LABEL_13:
  uint64_t MutableCopy = FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy) {
    return 4294950305;
  }
  uint64_t v12 = (const void *)MutableCopy;
  int v13 = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (v13)
  {
    FigCFDictionarySetInt();
    FigCFDictionarySetInt();
    CFDictionaryRemoveValue(v13, @"UseProvidedPixelBuffer");
    if (a5)
    {
      *a5 = v12;
      uint64_t v12 = 0;
    }
    if (a6)
    {
      *a6 = v13;
      int v13 = 0;
    }
    uint64_t v14 = 0;
    uint64_t v9 = 0;
    if (!v12) {
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t v14 = 4294950305;
  }
  CFRelease(v12);
  uint64_t v9 = v14;
LABEL_21:
  if (v13) {
    CFRelease(v13);
  }
  return v9;
}

uint64_t CMPhotoDecompressionContainerGetDefaultFormatWhenDecodingAlphaForInternalIndex(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (!a3) {
    return 4294950306;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    uint64_t v5 = *(void *)(a1 + 32);
  }
  else {
    uint64_t v5 = 0;
  }
  if (*(void *)(v5 + 64))
  {
    int v6 = (*(uint64_t (**)(void))(v4 + 64))();
    uint64_t result = 0;
    if (!v6)
    {
      FigCFArrayGetInt32AtIndex();
      uint64_t result = 0;
    }
    *a3 = 1111970369;
  }
  else
  {
    uint64_t result = 0;
    *a3 = 1111970369;
  }
  return result;
}

uint64_t CMPhotoShouldDecodeAlphaAutomatically(CFDictionaryRef theDict, int a2, int *a3)
{
  signed int PixelFormatType = 1111970369;
  int v13 = 1111970369;
  if (!theDict) {
    goto LABEL_5;
  }
  CFDataRef Value = (__CVBuffer *)CFDictionaryGetValue(theDict, @"UseProvidedPixelBuffer");
  if (!Value)
  {
    int IntIfPresent = CMPhotoCFDictionaryGetIntIfPresent(theDict, @"OutputPixelFormat", &v13);
    signed int PixelFormatType = v13;
    int v8 = v13;
    if (IntIfPresent) {
      goto LABEL_6;
    }
LABEL_5:
    int v8 = 0;
    goto LABEL_6;
  }
  signed int PixelFormatType = CVPixelBufferGetPixelFormatType(Value);
  int v8 = PixelFormatType;
LABEL_6:
  *a3 = v8;
  uint64_t v10 = 1;
  if (PixelFormatType != 1111970369 && PixelFormatType != 1815491698)
  {
    if (a2 != 6) {
      return 0;
    }
    if (PixelFormatType > 1279340599)
    {
      if (PixelFormatType == 1279340600) {
        return v10;
      }
      int v11 = 1279340854;
    }
    else
    {
      if (PixelFormatType == 843264056) {
        return v10;
      }
      int v11 = 843264310;
    }
    if (PixelFormatType != v11) {
      return 0;
    }
  }
  return v10;
}

uint64_t CMPhotoDecompressionContainerPredictTranscodedSize(__CFData *a1, uint64_t a2, const __CFNumber *a3, uint64_t *a4)
{
  CFMutableDataRef Mutable = a1;
  desc[0] = 0;
  *a4 = 0;
  unsigned int ImageGeometryForIndexWithOptions = CMPhotoDecompressionContainerCopyFormatDescriptionForIndexWithOptions(a1, a3, 0, (uint64_t)desc);
  if (ImageGeometryForIndexWithOptions) {
    goto LABEL_55;
  }
  FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(desc[0]);
  int v59 = 1785750887;
  FigCFDictionaryGetIntIfPresent();
  if (a3) {
    goto LABEL_14;
  }
  unint64_t v57 = 0;
  unint64_t v58 = 0;
  int v56 = 0;
  if (!Mutable)
  {
    DQTLocationFromJFIFByteStreauint64_t m = -16990;
    goto LABEL_48;
  }
  if (*((uint64_t *)Mutable + 73) < 1)
  {
LABEL_14:
    CFMutableDataRef Mutable = 0;
    goto LABEL_15;
  }
  unsigned int ImageGeometryForIndexWithOptions = CMPhotoDecompressionContainerGetImageGeometryForIndexWithOptions(Mutable, 0, 0, (uint64_t)&v57, (uint64_t)&v58, (uint64_t)&v56);
  if (ImageGeometryForIndexWithOptions)
  {
LABEL_55:
    DQTLocationFromJFIFByteStreauint64_t m = ImageGeometryForIndexWithOptions;
    goto LABEL_56;
  }
  if (v57 <= v58) {
    int v9 = v58;
  }
  else {
    int v9 = v57;
  }
  unint64_t v10 = *((void *)Mutable + 61);
  if (MediaSubType != 1785750887)
  {
    CFMutableDataRef Mutable = 0;
    double v18 = 0.85;
LABEL_31:
    FigCFDictionaryGetIntIfPresent();
    FigCFDictionaryGetIntIfPresent();
    DQTLocationFromJFIFByteStreauint64_t m = 0;
    if (v18 > 0.0 && v18 <= 1.0)
    {
      DQTLocationFromJFIFByteStreauint64_t m = 0;
      if (0.85 > 0.0 && 0.85 <= 1.0)
      {
        DQTLocationFromJFIFByteStreauint64_t m = 0;
        if (v9 >= 1)
        {
          DQTLocationFromJFIFByteStreauint64_t m = 0;
          unint64_t v43 = v58 * v57;
          if (v58 * v57)
          {
            double v44 = (double)v9 / (double)v9 * ((double)v9 / (double)v9 * (double)v43);
            if (v44 > 0.0)
            {
              long double v45 = log2((double)v43) * 0.833 + -1.733 + v18 * 5.366 + v18 * -1.67 * v18;
              long double v46 = log2(v44) * 0.833 + -1.733 + 0.85 * 5.366 + 0.85 * -1.67 * 0.85;
              double v47 = log2((double)v10) - v45 + v46;
              if (MediaSubType == 1785750887 && v59 == 1752589105)
              {
                double v47 = v47 + -1.0;
              }
              else if (v59 == 1785750887 && MediaSubType == 1735551332)
              {
                double v47 = v47 + 1.0;
              }
              DQTLocationFromJFIFByteStreauint64_t m = 0;
              *a4 = (unint64_t)exp2(v47);
            }
          }
        }
      }
    }
    goto LABEL_48;
  }
  uint64_t v11 = *((void *)Mutable + 8);
  char v55 = 0;
  CFIndex length = 0;
  uint64_t v54 = 0;
  DQTLocationFromJFIFByteStreauint64_t m = CMPhotoGetDQTLocationFromJFIFByteStream(v11, 0, &v55, &v54, &length);
  if (DQTLocationFromJFIFByteStream || !v55)
  {
LABEL_56:
    CFMutableDataRef Mutable = 0;
    goto LABEL_48;
  }
  unint64_t v51 = v10;
  CFMutableDataRef Mutable = CFDataCreateMutable(0, 0);
  CFDataSetLength(Mutable, length);
  Mutableunsigned __int8 BytePtr = CFDataGetMutableBytePtr(Mutable);
  unint64_t v52 = 0;
  CFIndex v14 = length;
  uint64_t v15 = v54;
  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v16) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v19 = *(uint64_t (**)(uint64_t, CFIndex, uint64_t, UInt8 *, unint64_t *))(v17 + 8);
  if (!v19)
  {
    DQTLocationFromJFIFByteStreauint64_t m = -12782;
    goto LABEL_48;
  }
  DQTLocationFromJFIFByteStreauint64_t m = v19(v11, v14, v15, MutableBytePtr, &v52);
  if (!DQTLocationFromJFIFByteStream && v52 >= 0x41 && v52 == length)
  {
    if (*MutableBytePtr <= 0xFu)
    {
      uint64_t v20 = 0;
      double v21 = 0.0;
      do
      {
        uint8x16_t v22 = *(uint8x16_t *)&MutableBytePtr[v20 * 16 + 1];
        uint16x8_t v23 = vmovl_high_u8(v22);
        uint16x8_t v24 = vmovl_u8(*(uint8x8_t *)v22.i8);
        uint8x16_t v25 = (uint8x16_t)xmmword_1AB9E2F38[v20];
        uint16x8_t v26 = vmovl_high_u8(v25);
        uint16x8_t v27 = vmovl_u8(*(uint8x8_t *)v25.i8);
        uint32x4_t v28 = vmull_u16(*(uint16x4_t *)v27.i8, *(uint16x4_t *)v24.i8);
        uint32x4_t v29 = vmull_high_u16(v27, v24);
        uint32x4_t v30 = vmull_u16(*(uint16x4_t *)v26.i8, *(uint16x4_t *)v23.i8);
        uint32x4_t v31 = vmull_high_u16(v26, v23);
        v32.i64[0] = v31.i32[2];
        v32.i64[1] = v31.i32[3];
        float64x2_t v33 = vcvtq_f64_s64(v32);
        v32.i64[0] = v31.i32[0];
        v32.i64[1] = v31.i32[1];
        float64x2_t v34 = vcvtq_f64_s64(v32);
        v32.i64[0] = v30.i32[2];
        v32.i64[1] = v30.i32[3];
        float64x2_t v35 = vcvtq_f64_s64(v32);
        v32.i64[0] = v30.i32[0];
        v32.i64[1] = v30.i32[1];
        float64x2_t v36 = vcvtq_f64_s64(v32);
        v32.i64[0] = v29.i32[2];
        v32.i64[1] = v29.i32[3];
        float64x2_t v37 = vcvtq_f64_s64(v32);
        v32.i64[0] = v29.i32[0];
        v32.i64[1] = v29.i32[1];
        float64x2_t v38 = vcvtq_f64_s64(v32);
        v32.i64[0] = v28.i32[2];
        v32.i64[1] = v28.i32[3];
        float64x2_t v39 = vcvtq_f64_s64(v32);
        v32.i64[0] = v28.i32[0];
        v32.i64[1] = v28.i32[1];
        float64x2_t v40 = vcvtq_f64_s64(v32);
        double v21 = v21
            + v40.f64[0]
            + v40.f64[1]
            + v39.f64[0]
            + v39.f64[1]
            + v38.f64[0]
            + v38.f64[1]
            + v37.f64[0]
            + v37.f64[1]
            + v36.f64[0]
            + v36.f64[1]
            + v35.f64[0]
            + v35.f64[1]
            + v34.f64[0]
            + v34.f64[1]
            + v33.f64[0]
            + v33.f64[1];
        ++v20;
      }
      while (v20 != 4);
      double v41 = v21 / 29656.8;
      double v42 = 0.0;
      unint64_t v10 = v51;
      if (v41 < 2.0)
      {
        double v42 = 1.0;
        if (v41 > 0.0606060606) {
          double v42 = pow((2.0 / v41 + -1.0) * 0.03125, 0.33333333);
        }
      }
      if (v42 >= 0.2) {
        double v18 = v42;
      }
      else {
        double v18 = 0.2;
      }
      goto LABEL_31;
    }
LABEL_15:
    DQTLocationFromJFIFByteStreauint64_t m = 0;
  }
LABEL_48:
  uint64_t v49 = *a4;
  if (desc[0]) {
    CFRelease(desc[0]);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v49) {
    return DQTLocationFromJFIFByteStream;
  }
  else {
    return 4294950306;
  }
}

uint64_t CMPhotoDecompressionContainerCreateCorrectedAV1FormatDescription(const opaqueCMFormatDescription *a1, uint64_t a2, int a3, CMVideoFormatDescriptionRef *a4)
{
  char v39 = 1;
  CFTypeRef v37 = 0;
  CFTypeRef v38 = 0;
  CMVideoFormatDescriptionRef formatDescriptionOut = 0;
  CFTypeRef v36 = 0;
  CFTypeRef cf = 0;
  if (!a4)
  {
    uint64_t v25 = 0;
    double v21 = 0;
    goto LABEL_49;
  }
  if (a2)
  {
    CFDictionaryRef Extensions = CMFormatDescriptionGetExtensions(a1);
    CFDictionaryRef v9 = Extensions;
    if (Extensions)
    {
      unint64_t v10 = (unint64_t)CFDictionaryGetValue(Extensions, (const void *)*MEMORY[0x1E4F24A90]);
      unint64_t v11 = (unint64_t)CFDictionaryGetValue(v9, (const void *)*MEMORY[0x1E4F24BC8]);
      BOOL v12 = CMPhotoGetMatrixFromPixelBufferAttachments(v9) != 0;
      BOOL v13 = CFDictionaryGetValue(v9, (const void *)*MEMORY[0x1E4F1EDB0]) != 0;
      unint64_t v14 = (unint64_t)CFDictionaryGetValue(v9, (const void *)*MEMORY[0x1E4F24A00]);
      unint64_t v15 = v14 | v11;
      BOOL v16 = (v14 | v10) != 0;
      BOOL v17 = v15 != 0;
      if (a3) {
        goto LABEL_13;
      }
    }
    else
    {
      BOOL v16 = 0;
      BOOL v17 = 0;
      BOOL v12 = 0;
      BOOL v13 = 0;
      if (a3) {
        goto LABEL_13;
      }
    }
    if (v16 && v17 && v12 && v13)
    {
      if (a1) {
        double v18 = (const opaqueCMFormatDescription *)CFRetain(a1);
      }
      else {
        double v18 = 0;
      }
      uint64_t v25 = 0;
      double v21 = 0;
      *a4 = v18;
LABEL_45:
      if (cf) {
        CFRelease(cf);
      }
      goto LABEL_47;
    }
LABEL_13:
    InfoFromFormatDescriptiouint64_t n = (*(uint64_t (**)(uint64_t, CFTypeRef *))(a2 + 16))(a2, &cf);
    if (InfoFromFormatDescription
      || (InfoFromFormatDescriptiouint64_t n = CMPhotoGetInfoFromFormatDescription(a1, (opaqueCMSampleBuffer *)cf, 1, 0, &v39, 0, 0, 0, 0, &v38, &v37, &v36), InfoFromFormatDescription))
    {
      uint64_t v25 = InfoFromFormatDescription;
      double v21 = 0;
      goto LABEL_45;
    }
    CFGetAllocator(a1);
    CFDictionaryRef MutableCopy = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
    double v21 = MutableCopy;
    if (!MutableCopy) {
      goto LABEL_61;
    }
    if (a3)
    {
      uint8x16_t v22 = (const void *)*MEMORY[0x1E4F1EE20];
      uint16x8_t v23 = (__CFDictionary *)CFDictionaryGetValue(MutableCopy, (const void *)*MEMORY[0x1E4F1EE20]);
      if (v23)
      {
        CFGetAllocator(a1);
        uint64_t v24 = FigCFDictionaryCreateMutableCopy();
        if (v24)
        {
          uint16x8_t v23 = (__CFDictionary *)v24;
          CMTimeValue value = 0;
          if (!CMPhotoCreateAV1CodecConfigFromSampleBuffer((opaqueCMSampleBuffer *)cf, (CFMutableDataRef *)&value))
          {
            CFDictionarySetValue(v23, @"av1C", value);
            if (value) {
              CFRelease(value);
            }
            CFDictionarySetValue(v21, v22, v23);
          }
          goto LABEL_26;
        }
LABEL_61:
        uint64_t v25 = 4294950305;
        goto LABEL_45;
      }
    }
    else
    {
      uint16x8_t v23 = 0;
    }
LABEL_26:
    if (!v16 && v38) {
      CFDictionarySetValue(v21, (const void *)*MEMORY[0x1E4F24A90], v38);
    }
    if (!v17 && v37) {
      CFDictionarySetValue(v21, (const void *)*MEMORY[0x1E4F24BC8], v37);
    }
    if (v36) {
      char v26 = v12;
    }
    else {
      char v26 = 1;
    }
    if ((v26 & 1) == 0) {
      CFDictionarySetValue(v21, (const void *)*MEMORY[0x1E4F24C18], v36);
    }
    if (!v13)
    {
      uint16x8_t v27 = (const void **)MEMORY[0x1E4F1CFD0];
      if (!v39) {
        uint16x8_t v27 = (const void **)MEMORY[0x1E4F1CFC8];
      }
      CFDictionarySetValue(v21, (const void *)*MEMORY[0x1E4F1EDB0], *v27);
    }
    CFAllocatorRef v28 = CFGetAllocator(a1);
    CMVideoCodecType MediaSubType = CMFormatDescriptionGetMediaSubType(a1);
    int32_t width = CMVideoFormatDescriptionGetDimensions(a1).width;
    CMVideoDimensions Dimensions = CMVideoFormatDescriptionGetDimensions(a1);
    uint64_t v25 = CMVideoFormatDescriptionCreate(v28, MediaSubType, width, Dimensions.height, v21, &formatDescriptionOut);
    if (!v25)
    {
      *a4 = formatDescriptionOut;
      CMVideoFormatDescriptionRef formatDescriptionOut = 0;
    }
    if (v23) {
      CFRelease(v23);
    }
    goto LABEL_45;
  }
  double v21 = 0;
  uint64_t v25 = 4294950306;
LABEL_47:
  if (formatDescriptionOut) {
    CFRelease(formatDescriptionOut);
  }
LABEL_49:
  if (v38) {
    CFRelease(v38);
  }
  if (v37) {
    CFRelease(v37);
  }
  if (v36) {
    CFRelease(v36);
  }
  if (v21) {
    CFRelease(v21);
  }
  return v25;
}

uint64_t CMPhotoDecompressionContainerCreateCorrespondingDecodeOptionsForInternalIndexAuxImage(void *a1, uint64_t a2, uint64_t a3, int a4, uint64x2_t *a5, int a6, char a7, __CFDictionary **a8)
{
  CFArrayRef v44 = 0;
  uint64_t v8 = 4294950306;
  if (!a1 || !a8) {
    return v8;
  }
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  int v41 = 1;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  int v38 = 1;
  double v18 = a1 + 4;
  uint64_t v17 = a1[4];
  if (v17) {
    uint64_t v19 = a1[4];
  }
  else {
    uint64_t v19 = 0;
  }
  if (!*(void *)(v19 + 56)) {
    goto LABEL_19;
  }
  uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, void, uint64_t *, uint64_t *, int *))(v17 + 56))(a1, a2, 0, &v42, &v43, &v41);
  if (v20)
  {
LABEL_49:
    uint64_t v8 = v20;
    goto LABEL_20;
  }
  uint64_t v21 = *v18 ? *v18 : 0;
  if (!*(void *)(v21 + 144))
  {
LABEL_19:
    uint64_t v8 = 4294950302;
    goto LABEL_20;
  }
  uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t, void, uint64_t *, uint64_t *, int *))(*v18 + 144))(a1, a2, a3, 0, &v39, &v40, &v38);
  if (v20) {
    goto LABEL_49;
  }
  if (v41 != v38)
  {
    uint64_t v20 = FigSignalErrorAt();
    goto LABEL_49;
  }
  if (!(a6 | a4))
  {
    uint64_t v25 = 0;
LABEL_47:
    uint64_t v8 = 0;
    *a8 = v25;
    goto LABEL_20;
  }
  CFAllocatorRef v22 = CFGetAllocator(a1);
  CFTypeRef cf = CFDictionaryCreateMutable(v22, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (cf)
  {
    if (((v39 | v40) & 1) == 0) {
      goto LABEL_41;
    }
    if (*v18) {
      uint64_t v23 = *v18;
    }
    else {
      uint64_t v23 = 0;
    }
    if (!*(void *)(v23 + 432))
    {
      uint64_t v8 = 4294950302;
      goto LABEL_29;
    }
    uint64_t v26 = *v18 ? *v18 : 0;
    uint64_t YUVPixelFormatForParameters = (*(uint64_t (**)(void *, uint64_t, uint64_t, const __CFArray **))(v26 + 432))(a1, a2, a3, &v44);
    if (!YUVPixelFormatForParameters)
    {
      CFArrayRef v28 = v44;
      if (v44)
      {
        CFIndex Count = CFArrayGetCount(v44);
        CFArrayRef v28 = v44;
      }
      else
      {
        CFIndex Count = 0;
      }
      *(void *)&long long v36 = 0;
      if (!CMPhotoCFArrayGetSizeAtIndex(v28, 0, &v36))
      {
        uint64_t v8 = 4294950194;
        goto LABEL_29;
      }
      int v30 = Count == 1 ? 6 : 1;
      v35[0].i32[0] = 0;
      uint64_t YUVPixelFormatForParameters = CMPhotoGetYUVPixelFormatForParameters(v30, v36, 1, 0, 0, 0, 1, v35[0].i32);
      if (!YUVPixelFormatForParameters)
      {
        uint64_t YUVPixelFormatForParameters = CMPhotoCFDictionarySetInt32(cf, @"OutputPixelFormat", v35[0].i32[0]);
        if (!YUVPixelFormatForParameters)
        {
LABEL_41:
          uint64_t v25 = cf;
          if (a6) {
            CFDictionarySetValue(cf, @"ApplyTransform", (const void *)*MEMORY[0x1E4F1CFD0]);
          }
          if (!a4) {
            goto LABEL_47;
          }
          long long v36 = 0u;
          long long v37 = 0u;
          uint64x2_t v31 = a5[1];
          v35[0] = *a5;
          v35[1] = v31;
          uint64_t YUVPixelFormatForParameters = CMPhotoTranslateAndScalePreOrientationCrop(v42, v43, v35, 1, v39, v40, 1, &v36, a7);
          if (!YUVPixelFormatForParameters)
          {
            v45.origin.double x = (double)(unint64_t)v36;
            v45.origin.double y = (double)*((unint64_t *)&v36 + 1);
            v45.size.int32_t width = (double)(unint64_t)v37;
            v45.size.double height = (double)*((unint64_t *)&v37 + 1);
            DictionaryRepresentatiouint64_t n = CGRectCreateDictionaryRepresentation(v45);
            if (DictionaryRepresentation)
            {
              CFDictionaryRef v33 = DictionaryRepresentation;
              CFDictionaryAddValue(cf, @"SourceCropRect", DictionaryRepresentation);
              CFRelease(v33);
              goto LABEL_47;
            }
            uint64_t v8 = 4294950305;
LABEL_29:
            CFRelease(cf);
            goto LABEL_20;
          }
        }
      }
    }
    uint64_t v8 = YUVPixelFormatForParameters;
    goto LABEL_29;
  }
  uint64_t v8 = 4294950305;
LABEL_20:
  if (v44) {
    CFRelease(v44);
  }
  return v8;
}

uint64_t CMPhotoDecompressionContainerAddMeteorHeadroomToDescriptionForInternalIndex(uint64_t *a1, uint64_t a2, uint64_t a3, __CFDictionary *a4)
{
  uint64_t v5 = a2;
  int v6 = a1;
  CFTypeRef v42 = 0;
  CGImageMetadataRef metadata = 0;
  CFTypeRef v40 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v39 = 0;
  uint64_t v8 = a1 + 4;
  uint64_t v7 = a1[4];
  if (v7) {
    uint64_t v9 = a1[4];
  }
  else {
    uint64_t v9 = 0;
  }
  if (!*(void *)(v9 + 168))
  {
    CFStringRef v10 = 0;
    CFStringRef v11 = 0;
    CFArrayRef v12 = 0;
    goto LABEL_20;
  }
  CFStringRef v10 = 0;
  CFStringRef v11 = 0;
  CFArrayRef v12 = 0;
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t, void, CGImageMetadataRef *))(v7 + 168))(a1, a2, a3, 0, &metadata))
  {
    goto LABEL_20;
  }
  CFAllocatorRef v13 = CFGetAllocator(v6);
  uint64_t CFNumberFormatter = CMPhotoMetadataCreateCFNumberFormatter(v13, (CFNumberFormatterRef *)&v42);
  if (CFNumberFormatter)
  {
    uint64_t MetadataFromData = CFNumberFormatter;
    CFArrayRef v12 = 0;
    CFStringRef v11 = 0;
    CFStringRef v10 = 0;
    goto LABEL_36;
  }
  uint64_t v36 = v5;
  CFArrayRef v15 = CGImageMetadataCopyTags(metadata);
  CFArrayRef v12 = v15;
  if (!v15)
  {
    CFStringRef v11 = 0;
    CFStringRef v10 = 0;
LABEL_72:
    uint64_t MetadataFromData = 4294950194;
    goto LABEL_36;
  }
  CFIndex Count = CFArrayGetCount(v15);
  if (Count < 1)
  {
    CFStringRef v10 = 0;
    CFStringRef v11 = 0;
    goto LABEL_20;
  }
  CFIndex v17 = Count;
  float64x2_t v34 = v6;
  float64x2_t v35 = a4;
  CFIndex v18 = 0;
  BOOL v19 = 1;
  while (1)
  {
    CFIndex ValueAtIndex = (CGImageMetadataTag *)CFArrayGetValueAtIndex(v12, v18);
    CFStringRef v21 = CGImageMetadataTagCopyNamespace(ValueAtIndex);
    if (v21) {
      break;
    }
LABEL_17:
    BOOL v19 = ++v18 < v17;
    if (v17 == v18)
    {
      CFStringRef v10 = 0;
      CFStringRef v11 = 0;
      a4 = v35;
      goto LABEL_67;
    }
  }
  CFStringRef v11 = v21;
  CFStringRef v10 = CGImageMetadataTagCopyName(ValueAtIndex);
  if (!v10) {
    goto LABEL_72;
  }
  if (!FigCFEqual()) {
    goto LABEL_15;
  }
  uint64_t v22 = CMPhotoCopyMetadataTagValue(ValueAtIndex, (__CFNumberFormatter *)v42, 0, (__CFArray **)&cf);
  if (v22) {
    goto LABEL_63;
  }
  if (!FigCFEqual())
  {
LABEL_15:
    CFRelease(v11);
    CFRelease(v10);
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    goto LABEL_17;
  }
  if (!cf) {
    goto LABEL_72;
  }
  CFTypeID v32 = CFGetTypeID(cf);
  a4 = v35;
  if (v32 != CFNumberGetTypeID()) {
    goto LABEL_72;
  }
  float Double = CMPhotoCFNumberGetDouble((const __CFNumber *)cf);
  uint64_t v22 = CMPhotoCFDictionarySetFloat(v35, @"MeteorHeadroomFromProperties", Double);
  if (v22) {
    goto LABEL_63;
  }
LABEL_67:
  if (v19) {
    goto LABEL_68;
  }
  uint64_t v5 = v36;
  int v6 = v34;
LABEL_20:
  uint64_t v38 = 0;
  if (*v8) {
    uint64_t v23 = *v8;
  }
  else {
    uint64_t v23 = 0;
  }
  if (!*(void *)(v23 + 336)) {
    goto LABEL_35;
  }
  if (*v8) {
    uint64_t v24 = *v8;
  }
  else {
    uint64_t v24 = 0;
  }
  uint64_t MetadataFromData = (*(uint64_t (**)(uint64_t *, uint64_t, void, uint64_t *))(v24 + 336))(v6, v5, 0, &v38);
  if (MetadataFromData || !v38) {
    goto LABEL_36;
  }
  uint64_t v26 = *v8 ? *v8 : 0;
  if (!*(void *)(v26 + 256))
  {
LABEL_35:
    uint64_t MetadataFromData = 4294950302;
    goto LABEL_36;
  }
  if (*v8) {
    uint64_t v27 = *v8;
  }
  else {
    uint64_t v27 = 0;
  }
  uint64_t MetadataFromData = (*(uint64_t (**)(uint64_t *, uint64_t, void, void, void, CFTypeRef *))(v27 + 256))(v6, v5, 0, 0, 0, &v40);
  if (!MetadataFromData)
  {
    if (v40)
    {
      uint64_t MetadataFromData = CGImageCreateMetadataFromData();
      if (!MetadataFromData)
      {
        if (v39)
        {
          uint32x4_t v29 = (const void *)*MEMORY[0x1E4F2FC20];
          if (!CFDictionaryContainsKey((CFDictionaryRef)v39, (const void *)*MEMORY[0x1E4F2FC20])
            || (CFDataRef Value = CFDictionaryGetValue((CFDictionaryRef)v39, v29),
                float v37 = 0.0,
                uint64_t v31 = CMPhotoHeadroomFromMeteorPlusMetadataMakerNote((uint64_t)Value, &v37),
                v31 == -16993))
          {
LABEL_68:
            uint64_t MetadataFromData = 0;
          }
          else
          {
            uint64_t MetadataFromData = v31;
            if (!v31)
            {
              uint64_t v22 = CMPhotoCFDictionarySetFloat(a4, @"MeteorHeadroomFromMakerNote", v37);
LABEL_63:
              uint64_t MetadataFromData = v22;
            }
          }
        }
      }
    }
  }
LABEL_36:
  if (metadata) {
    CFRelease(metadata);
  }
  if (v39) {
    CFRelease(v39);
  }
  if (v40) {
    CFRelease(v40);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v42) {
    CFRelease(v42);
  }
  if (v12) {
    CFRelease(v12);
  }
  return MetadataFromData;
}

uint64_t CMPhotoDecompressionContainerCreateMeteorConstituentsForInternalIndex(void *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, __CFDictionary **a6)
{
  int v6 = (__CFDictionary *)a4;
  CFTypeRef v33 = 0;
  CFTypeRef cf = 0;
  CMTimeValue value = 0;
  CFDictionaryRef theDict = 0;
  if (!a4)
  {
    CFDictionaryRef MutableCopy = 0;
    uint64_t v20 = 4294950306;
    goto LABEL_42;
  }
  int v11 = a4[21];
  int v12 = *((unsigned __int8 *)v6 + 71);
  uint64x2_t v13 = *(uint64x2_t *)((char *)v6 + 40);
  v30[0] = *(uint64x2_t *)((char *)v6 + 24);
  v30[1] = v13;
  uint64_t CorrespondingDecodeOptionsForInternalIndexAuxImage = CMPhotoDecompressionContainerCreateCorrespondingDecodeOptionsForInternalIndexAuxImage(a1, a2, a3, v11, v30, v12, 1, (__CFDictionary **)&cf);
  if (CorrespondingDecodeOptionsForInternalIndexAuxImage) {
    goto LABEL_54;
  }
  BOOL v16 = a1 + 4;
  uint64_t v15 = a1[4];
  if (v15) {
    uint64_t v17 = a1[4];
  }
  else {
    uint64_t v17 = 0;
  }
  if (!*(void *)(v17 + 192))
  {
    int v6 = 0;
    CFDictionaryRef MutableCopy = 0;
    uint64_t v20 = 4294950302;
    goto LABEL_42;
  }
  uint64_t CorrespondingDecodeOptionsForInternalIndexAuxImage = (*(uint64_t (**)(void *, uint64_t, uint64_t, CFTypeRef, uint64_t, CFTypeRef *))(v15 + 192))(a1, a2, a3, cf, 2, &v33);
  if (CorrespondingDecodeOptionsForInternalIndexAuxImage)
  {
LABEL_54:
    uint64_t v20 = CorrespondingDecodeOptionsForInternalIndexAuxImage;
    int v6 = 0;
    goto LABEL_41;
  }
  CFGetAllocator(a1);
  CFDictionaryRef MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy)
  {
    int v6 = 0;
    goto LABEL_56;
  }
  FigCFDictionarySetValue();
  v30[0].i32[0] = 1;
  if (*v16) {
    uint64_t v19 = *v16;
  }
  else {
    uint64_t v19 = 0;
  }
  if (*(void *)(v19 + 56))
  {
    if (!(*(unsigned int (**)(void *, uint64_t, void, void, void, uint64x2_t *))(*v16 + 56))(a1, a2, 0, 0, 0, v30))
    {
      uint64_t v21 = FigCFDictionarySetInt();
      if (v21) {
        goto LABEL_57;
      }
    }
  }
  if (*((void *)v6 + 12)) {
    FigCFDictionarySetValue();
  }
  FigCFDictionarySetValue();
  v30[0].i32[0] = 1;
  uint64_t v22 = *v16 ? *v16 : 0;
  if (*(void *)(v22 + 144))
  {
    if (!(*(unsigned int (**)(void *, uint64_t, uint64_t, void, void, void, uint64x2_t *))(*v16 + 144))(a1, a2, a3, 0, 0, 0, v30))
    {
      uint64_t v21 = FigCFDictionarySetInt();
      if (v21)
      {
LABEL_57:
        uint64_t v20 = v21;
        int v6 = 0;
        goto LABEL_42;
      }
    }
  }
  int v6 = 0;
  if (!CMPhotoDecompressionContainerCopyImagePropertiesForInternalIndex((uint64_t)a1, a2, 0, 0, 0, (CFTypeRef *)&theDict))
  {
    if (theDict)
    {
      uint64_t v23 = (const void *)*MEMORY[0x1E4F2FC20];
      if (CFDictionaryContainsKey(theDict, (const void *)*MEMORY[0x1E4F2FC20]))
      {
        uint64_t v24 = (const void *)FigCFDictionaryGetValue();
        CFMutableDataRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        int v6 = Mutable;
        if (Mutable)
        {
          CFDictionaryAddValue(Mutable, v23, v24);
          CFDictionarySetValue(MutableCopy, @"MeteorMakerNote", v6);
          goto LABEL_30;
        }
LABEL_56:
        uint64_t v20 = 4294950305;
        goto LABEL_42;
      }
    }
    int v6 = 0;
  }
LABEL_30:
  if (*v16) {
    uint64_t v26 = *v16;
  }
  else {
    uint64_t v26 = 0;
  }
  if (!*(void *)(v26 + 168))
  {
LABEL_40:
    uint64_t v20 = 0;
    *a6 = MutableCopy;
LABEL_41:
    CFDictionaryRef MutableCopy = 0;
    goto LABEL_42;
  }
  int v27 = (*(uint64_t (**)(void *, uint64_t, uint64_t, CFTypeRef, void **))(*v16 + 168))(a1, a2, a3, cf, &value);
  CFArrayRef v28 = value;
  if (!v27)
  {
    if (value)
    {
      CFDictionarySetValue(MutableCopy, @"MeteorXMPMetadata", value);
      CFArrayRef v28 = value;
      goto LABEL_37;
    }
    goto LABEL_40;
  }
LABEL_37:
  *a6 = MutableCopy;
  if (v28) {
    CFRelease(v28);
  }
  CFDictionaryRef MutableCopy = 0;
  uint64_t v20 = 0;
LABEL_42:
  if (cf) {
    CFRelease(cf);
  }
  if (v33) {
    CFRelease(v33);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (theDict) {
    CFRelease(theDict);
  }
  if (v6) {
    CFRelease(v6);
  }
  return v20;
}

CFTypeRef CMPhotoDecompressionContainerClass_CopyFormattingDesc()
{
  return CFRetain(@"[CMPhotoDecompressionContainer]");
}

CFTypeRef CMPhotoDecompressionTileIteratorClass_CopyFormattingDesc()
{
  return CFRetain(@"[CMPhotoDecompressionTileIterator]");
}

uint64_t _indexMapComparator()
{
  unsigned int Value = FigCFDictionaryGetValue();
  unsigned int v1 = FigCFDictionaryGetValue();
  if (Value < v1) {
    return -1;
  }
  else {
    return Value > v1;
  }
}

uint64_t jpegService()
{
  uint64_t result = _jpegService;
  if (!_jpegService)
  {
    pthread_once(&jpegService_once, (void (*)(void))_initializeService);
    return _jpegService;
  }
  return result;
}

uint64_t JPEGDeviceInterface_decodeJPEG(mach_port_t connection, void *inputStruct, void *outputStruct)
{
  size_t outputStructCnt = 88;
  int v6 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  mach_port_t v7 = connection;
  if (connection || (mach_port_t v7 = _openService()) != 0)
  {
    if (*v6 == 1) {
      kdebug_trace();
    }
    uint64_t v8 = IOConnectCallStructMethod(v7, 1u, inputStruct, 0x58uLL, outputStruct, &outputStructCnt);
  }
  else
  {
    uint64_t v8 = 3758097101;
  }
  if (!*((void *)inputStruct + 6) && *v6 == 1) {
    kdebug_trace();
  }
  if (!connection && v7) {
    _closeService(v7);
  }
  return v8;
}

uint64_t JPEGDeviceInterface_encodeJPEG(uint64_t a1)
{
  mach_port_t v1 = MEMORY[0x1F4188790](a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  mach_port_t v7 = v6;
  uint64_t v9 = v8;
  mach_port_t v10 = v1;
  size_t outputStructCnt = 88;
  BOOL v11 = v8[21]
     && (pthread_once(&JPEGDeviceInterface_supportsRSTLogging_once, (void (*)(void))_checkSupportsRSTLogging),
         _supportsRSTLogging)
     && (v9[6] * v9[5]) > 0x2DC6C0;
  if (v7) {
    BOOL v12 = v5 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  int v13 = !v12;
  mach_port_t v14 = v10;
  if (!v10)
  {
    mach_port_t v14 = _openService();
    if (!v14) {
      return 3758097101;
    }
  }
  if ((v13 | v11))
  {
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    memset(v63, 0, sizeof(v63));
    long long v15 = *((_OWORD *)v9 + 3);
    long long v59 = *((_OWORD *)v9 + 2);
    long long v60 = v15;
    long long v61 = *((_OWORD *)v9 + 4);
    uint64_t v16 = *((void *)v9 + 10);
    uint64_t v64 = 0;
    uint64_t v62 = v16;
    long long v17 = *((_OWORD *)v9 + 1);
    v58[0] = *(_OWORD *)v9;
    v58[1] = v17;
    if (v13)
    {
      long long v18 = v7[1];
      *(_OWORD *)((char *)v63 + 4) = *v7;
      *(_OWORD *)((char *)&v63[1] + 4) = v18;
      long long v19 = v7[3];
      *(_OWORD *)((char *)&v63[2] + 4) = v7[2];
      *(_OWORD *)((char *)&v63[3] + 4) = v19;
      long long v20 = v5[1];
      *(_OWORD *)((char *)&v63[4] + 4) = *v5;
      *(_OWORD *)((char *)&v63[5] + 4) = v20;
      long long v21 = v5[3];
      *(_OWORD *)((char *)&v63[6] + 4) = v5[2];
      *(_OWORD *)((char *)&v63[7] + 4) = v21;
      LODWORD(v59) = v59 | 8;
    }
    LODWORD(v63[0]) = v11;
    size_t outputStructCnt = 4096;
    uint64_t v22 = IOConnectCallStructMethod(v14, 4u, v58, 0x1000uLL, &v26, &outputStructCnt);
    long long v23 = v29;
    v3[2] = v28;
    v3[3] = v23;
    void v3[4] = v30;
    *((void *)v3 + 10) = v31;
    long long v24 = v27;
    *uint64_t v3 = v26;
    v3[1] = v24;
    if (!v10) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v22 = IOConnectCallStructMethod(v14, 3u, v9, 0x58uLL, v3, &outputStructCnt);
    if (!v10) {
LABEL_19:
    }
      _closeService(v14);
  }
  return v22;
}

uint64_t _openService()
{
  if (_jpegSema) {
    FigSemaphoreWaitRelative();
  }
  else {
    pthread_mutex_lock(&_jpegLock);
  }
  uint64_t v0 = _openDriverConnection();
  if (!v0)
  {
    if (_jpegSema) {
      FigSemaphoreSignal();
    }
    else {
      pthread_mutex_unlock(&_jpegLock);
    }
  }
  return v0;
}

uint64_t _closeService(io_connect_t a1)
{
  if (a1) {
    IOServiceClose(a1);
  }
  if (_jpegSema)
  {
    return FigSemaphoreSignal();
  }
  else
  {
    return pthread_mutex_unlock(&_jpegLock);
  }
}

uint64_t JPEGDeviceInterface_supportsMissingEOI()
{
  return _supportsMissingEOI;
}

CFBooleanRef _checkSupportsMissingEOI()
{
  CFBooleanRef result = _checkUInt32DriverProperty(@"AppleJPEGSupportsMissingEOI", (const __CFBoolean *)_supportsMissingEOI);
  _supportsMissingEOI = (char)result;
  return result;
}

uint64_t VTDecompressionPluginClass_create(uint64_t a1, const opaqueCMFormatDescription *a2, const __CFDictionary *a3, uint64_t a4)
{
  keys[2] = *(void **)MEMORY[0x1E4F143B8];
  char DecodeHighSpeedDefault = CMPhotoGetDecodeHighSpeedDefault();
  __int16 v34 = 0;
  int v33 = 0;
  uint64_t v8 = 4294950306;
  char v32 = 1;
  if (!a1 || !a2 || !a4) {
    return v8;
  }
  uint64_t v9 = malloc_type_calloc(1uLL, 0x30uLL, 0x10E2040A0F51DDDuLL);
  if (!v9) {
    return 4294950305;
  }
  mach_port_t v10 = v9;
  long long v36 = 0;
  uint64_t v37 = 0;
  v9[41] = 0;
  BOOL v11 = v9 + 41;
  v9[24] = 1;
  if (a3
    && (CMPhotoCFDictionaryGetBooleanIfPresent(a3, @"SyncDecode", v9 + 25),
        CMPhotoCFDictionaryGetBooleanIfPresent(a3, @"AllowPackedBuffers", v11),
        CMPhotoCFDictionaryGetBooleanIfPresent(a3, @"ForceHighSpeedDecode", &DecodeHighSpeedDefault),
        CMPhotoCFDictionaryGetBooleanIfPresent(a3, @"PreferSoftwareCodec", (unsigned char *)&v34 + 1),
        CMPhotoCFDictionaryGetBooleanIfPresent(a3, @"RequireHardwareCodec", &v34),
        CMPhotoCFDictionaryGetInt32IfPresent(a3, @"ThreadPriority", &v33),
        HIBYTE(v34)))
  {
    int v12 = 0;
    LOBYTE(v34) = 0;
  }
  else
  {
    int v12 = 1;
    if ((_BYTE)v34)
    {
      int v13 = (void **)MEMORY[0x1E4F455E8];
      goto LABEL_11;
    }
  }
  int v13 = (void **)MEMORY[0x1E4F455D0];
LABEL_11:
  mach_port_t v14 = (void *)*MEMORY[0x1E4F455C8];
  keys[0] = *v13;
  keys[1] = v14;
  long long v15 = (const void *)*MEMORY[0x1E4F1CFC8];
  uint64_t v16 = (void *)*MEMORY[0x1E4F1CFD0];
  if (v12) {
    long long v17 = (void *)*MEMORY[0x1E4F1CFD0];
  }
  else {
    long long v17 = (void *)*MEMORY[0x1E4F1CFC8];
  }
  values[0] = v17;
  values[1] = v16;
  CFDictionaryRef v18 = CFDictionaryCreate(*(CFAllocatorRef *)a1, (const void **)keys, (const void **)values, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v18)
  {
    *mach_port_t v10 = 1;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v30 = (unint64_t)v10;
    VTDecompressionPluginClass_dispose((uint64_t)&v26);
    return 4294950305;
  }
  CFDictionaryRef v19 = v18;
  long long v36 = VTDecompressionPluginClass_VideoToolbox_callback;
  uint64_t v37 = a1;
  uint64_t v20 = *(void *)(a1 + 80);
  if (!v20 && ((int v22 = *(_DWORD *)(a1 + 72), v22 == 1635135537) || v22 == 1902212657))
  {
    uint64_t v21 = VTDecompressionSessionCreateWithOptions();
    if (v21) {
      goto LABEL_30;
    }
  }
  else
  {
    uint64_t v21 = CMPhotoCodecSessionPoolCreateDecompressionSession(*(CFTypeRef *)(a1 + 24), 0, v20, a2, v18, (uint64_t)VTDecompressionPluginClass_VideoToolbox_callback, a1, (void *)v10 + 1, &v32);
    if (v21) {
      goto LABEL_30;
    }
  }
  if (DecodeHighSpeedDefault) {
    long long v23 = v16;
  }
  else {
    long long v23 = v15;
  }
  uint64_t v21 = VTSessionSetProperty(*((VTSessionRef *)v10 + 1), (CFStringRef)*MEMORY[0x1E4F44CA8], v23);
  if (!v21)
  {
    if (v10[24] || v10[25] || (uint64_t v24 = FigDispatchQueueCreateWithPriority(), (*((void *)v10 + 4) = v24) != 0))
    {
      *(void *)(a1 + 64) = v10;
      CFRelease(v19);
      return 0;
    }
    uint64_t v8 = 4294950305;
    goto LABEL_31;
  }
LABEL_30:
  uint64_t v8 = v21;
LABEL_31:
  CFRelease(v19);
  *mach_port_t v10 = 1;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v30 = (unint64_t)v10;
  VTDecompressionPluginClass_dispose((uint64_t)&v26);
  if ((v8 | 2) == 0x44E) {
    return 4294951826;
  }
  return v8;
}

void VTDecompressionPluginClass_dispose(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(unsigned __int8 **)(a1 + 64);
    if (v2)
    {
      uint64_t v3 = *((void *)v2 + 4);
      if (v3)
      {
        dispatch_barrier_sync_f(v3, 0, (dispatch_function_t)_dispatch_empty);
        uint64_t v4 = *((void *)v2 + 4);
        if (v4) {
          dispatch_release(v4);
        }
      }
      uint64_t v5 = (OpaqueVTDecompressionSession *)*((void *)v2 + 1);
      if (v5)
      {
        if (v2[24]) {
          VTDecompressionSessionWaitForAsynchronousFrames(v5);
        }
        if (!*(void *)(a1 + 80) && ((int v6 = *(_DWORD *)(a1 + 72), v6 == 1635135537) || v6 == 1902212657)) {
          VTDecompressionSessionInvalidate(*((VTDecompressionSessionRef *)v2 + 1));
        }
        else {
          CMPhotoCodecSessionPoolRecycleSession(*(void *)(a1 + 24), *((CFTypeRef *)v2 + 1), *v2);
        }
        mach_port_t v7 = (const void *)*((void *)v2 + 1);
        if (v7)
        {
          CFRelease(v7);
          *((void *)v2 + 1) = 0;
        }
      }
      uint64_t v8 = (const void *)*((void *)v2 + 2);
      if (v8) {
        CFRelease(v8);
      }
      free(v2);
      *(void *)(a1 + 64) = 0;
    }
  }
}

uint64_t VTDecompressionPluginClass_decode(uint64_t a1, int a2, CMSampleBufferRef sampleBuffer, void *sourceFrameRefCon)
{
  uint64_t v7 = *(void *)(a1 + 64);
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  if (*(unsigned char *)(v7 + 25))
  {
    VTDecodeFrameFlags v8 = 0;
    goto LABEL_7;
  }
  if (!*(unsigned char *)(v7 + 24))
  {
    mach_port_t v10 = malloc_type_calloc(1uLL, 0x20uLL, 0xA0040A3F8AD00uLL);
    if (!v10)
    {
      *(unsigned char *)uint64_t v7 = 1;
      return 4294950305;
    }
    BOOL v11 = v10;
    int v12 = *(const void **)(v7 + 8);
    if (v12)
    {
      CFTypeRef v13 = CFRetain(v12);
      if (sampleBuffer)
      {
LABEL_13:
        CFTypeRef v14 = CFRetain(sampleBuffer);
LABEL_16:
        void *v11 = a1;
        v11[1] = v13;
        v11[2] = v14;
        v11[3] = sourceFrameRefCon;
        dispatch_async_f(*(dispatch_queue_t *)(v7 + 32), v11, (dispatch_function_t)_dispatch_decodeTileAsync);
        return 0;
      }
    }
    else
    {
      CFTypeRef v13 = 0;
      if (sampleBuffer) {
        goto LABEL_13;
      }
    }
    CFTypeRef v14 = 0;
    goto LABEL_16;
  }
  VTDecodeFrameFlags v8 = 1;
LABEL_7:
  uint64_t result = VTDecompressionSessionDecodeFrame(*(VTDecompressionSessionRef *)(v7 + 8), sampleBuffer, v8, sourceFrameRefCon, 0);
  if (result)
  {
    *(unsigned char *)uint64_t v7 = 1;
    if ((result | 2) == 0x44E) {
      return 4294951826;
    }
  }
  return result;
}

uint64_t VTDecompressionPluginClass_setAttachment(uint64_t a1, const void *a2, const void *a3)
{
  if (!*(void *)(a1 + 80) && ((int v4 = *(_DWORD *)(a1 + 72), v4 != 1635135537) ? (v5 = v4 == 1902212657) : (v5 = 1), v5)) {
    return 0;
  }
  else {
    return CMPhotoCodecSessionPoolSetDecompressionSessionAttachment(*(void *)(a1 + 24), *(const void **)(*(void *)(a1 + 64) + 8), a2, a3);
  }
}

uint64_t VTDecompressionPluginClass_copyAttachments(uint64_t a1, CFDictionaryRef *a2)
{
  if (!*(void *)(a1 + 80) && ((v3 = *(_DWORD *)(a1 + 72), v3 != 1635135537) ? (BOOL v4 = v3 == 1902212657) : (BOOL v4 = 1), v4)) {
    return 0;
  }
  else {
    return CMPhotoCodecSessionPoolCopyDecompressionSessionAttachments(*(void *)(a1 + 24), *(const void **)(*(void *)(a1 + 64) + 8), a2);
  }
}

uint64_t VTDecompressionPluginClass_VideoToolbox_callback(void *a1, uint64_t a2, unsigned int a3, char a4, uint64_t a5)
{
  mach_port_t v10 = (unsigned char *)a1[8];
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  if ((a4 & 2) != 0) {
    unsigned int v11 = -17104;
  }
  else {
    unsigned int v11 = a3;
  }
  if (v11)
  {
    *mach_port_t v10 = 1;
    if ((v11 | 2) == 0x44E) {
      uint64_t v12 = 4294951826;
    }
    else {
      uint64_t v12 = v11;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  CFTypeRef v13 = (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t))a1[6];
  uint64_t v14 = a1[7];
  return v13(a1, v12, a5, v14, a2);
}

void _dispatch_decodeTileAsync(void *a1)
{
  uint64_t v2 = *a1;
  mach_port_t v1 = (OpaqueVTDecompressionSession *)a1[1];
  int v3 = *(unsigned char **)(*a1 + 64);
  BOOL v4 = (opaqueCMSampleBuffer *)a1[2];
  BOOL v5 = (void *)a1[3];
  free(a1);
  uint64_t v6 = VTDecompressionSessionDecodeFrame(v1, v4, 0, v5, 0);
  if (v6)
  {
    (*(void (**)(uint64_t, uint64_t, void, void, void *))(v2 + 48))(v2, v6, 0, *(void *)(v2 + 56), v5);
    *int v3 = 1;
  }
  if (v1) {
    CFRelease(v1);
  }
  if (v4)
  {
    CFRelease(v4);
  }
}

void _dispatch_tileDecodeTileAsync(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = (const void *)a1[1];
  BOOL v5 = (const void *)a1[2];
  BOOL v4 = (const void *)a1[3];
  uint64_t v6 = a1[6];
  uint64_t v7 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  uint64_t v8 = VTTileDecompressionSessionDecodeTile();
  if (*v7 == 1) {
    kdebug_trace();
  }
  if (v8) {
    (*(void (**)(uint64_t, uint64_t, void, void, uint64_t))(v3 + 48))(v3, v8, 0, *(void *)(v3 + 56), v6);
  }
  free(a1);
  if (v2) {
    CFRelease(v2);
  }
  if (v5) {
    CFRelease(v5);
  }
  if (v4) {
    CFRelease(v4);
  }
}

uint64_t _addReferencesToItemInfo(__CFDictionary *a1, const __CFDictionary *a2, int a3, const void *a4, unsigned char *a5)
{
  CMTimeValue value = 0;
  *a5 = 1;
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (!Mutable) {
    return 4294950305;
  }
  CFMutableArrayRef v11 = Mutable;
  if (a2 && CFDictionaryGetValueIfPresent(a2, a4, (const void **)&value))
  {
    for (uint64_t i = -1; ; ++i)
    {
      CFIndex Count = (CFIndex)value;
      if (value) {
        CFIndex Count = CFArrayGetCount((CFArrayRef)value);
      }
      if (i + 1 >= Count) {
        break;
      }
      FigCFArrayGetInt32AtIndex();
      if (!a3)
      {
        if ((((_BYTE)i + 1) & 1) == 0)
        {
          *a5 = 0;
          goto LABEL_13;
        }
        FigCFArrayGetInt32AtIndex();
        FigCFArrayAppendInt32();
      }
    }
  }
  CFDictionarySetValue(a1, a4, v11);
LABEL_13:
  CFRelease(v11);
  return 0;
}

uint64_t _copyFormatDescriptionForIndex_2(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _copyFormatDescriptionForTrackReader(*(void *)(*(void *)(a1 + 80) + 8), a4);
}

uint64_t _getThumbnailCountForIndex_2(uint64_t a1, uint64_t a2, uint64_t a3, CFIndex *a4)
{
  if (!a4) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 112))
  {
    *a4 = CFArrayGetCount(*(CFArrayRef *)(a1 + 88));
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t _createThumbnailImageForIndex_1(uint64_t a1, uint64_t a2, CFIndex idx, const __CFDictionary *a4, int a5, CGImageRef *a6)
{
  v19[2] = *(const void **)MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  if (*(unsigned char *)(a1 + 112))
  {
    if (a4)
    {
      v19[0] = @"DryRun";
      v19[1] = @"UseProvidedPixelBuffer";
      uint64_t v12 = _checkForUnsupportedKeys(a4, v19);
      if (v12) {
        return v12;
      }
    }
    if (idx < 0) {
      return 4294950306;
    }
    CFArrayRef Count = *(const __CFArray **)(a1 + 88);
    if (Count) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if ((uint64_t)Count <= idx) {
      return 4294950306;
    }
    CFIndex ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 88), idx);
    uint64_t SampleBuffer = _moveSampleCursorToIndexAndCreateSampleBuffer(*(const __CFAllocator **)(a1 + 40), a2, (uint64_t)ValueAtIndex, (CMSampleBufferRef *)&cf);
    CFTypeRef v16 = cf;
    if (SampleBuffer)
    {
      uint64_t v12 = SampleBuffer;
      if (!cf) {
        return v12;
      }
    }
    else
    {
      uint64_t v12 = _decodePixelBufferForImageIndex(*(const __CFAllocator **)(a1 + 40), (uint64_t *)a1, a2, (uint64_t)cf, (uint64_t)ValueAtIndex, a4, a5, a6);
      CFTypeRef v16 = cf;
      if (!cf) {
        return v12;
      }
    }
    CFRelease(v16);
    return v12;
  }
  return FigSignalErrorAt();
}

uint64_t _getAuxiliaryImageGeometryForIndex_2(uint64_t a1, int a2, CFIndex idx, uint64_t a4, void *a5, void *a6, _DWORD *a7)
{
  if (idx < 0) {
    return 4294950306;
  }
  CFArrayRef Count = *(const __CFArray **)(a1 + 96);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  if ((uint64_t)Count <= idx) {
    return 4294950306;
  }
  CFTypeRef v13 = (const void *)*((void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 96), idx) + 1);
  if (!v13) {
    return 4294950306;
  }
  return _getReferenceSequenceGeometry(v13, a5, a6, a7);
}

uint64_t _getAuxiliaryImageTypeForIndex_2(uint64_t a1, int a2, CFIndex idx, uint64_t a4, _DWORD *a5)
{
  return _getAuxiliaryTypeInfoForIndex(a1, idx, a5, 0);
}

uint64_t _copyAuxiliaryImageFormatDescriptionForIndex_0(uint64_t a1, int a2, CFIndex idx, uint64_t a4, void *a5)
{
  CFArrayRef theArray = 0;
  if (!a5) {
    return 0;
  }
  if (idx < 0) {
    return 4294950306;
  }
  CFArrayRef Count = *(const __CFArray **)(a1 + 96);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  if ((uint64_t)Count <= idx || !*((void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 96), idx) + 1)) {
    return 4294950306;
  }
  uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject();
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  CFTypeRef v13 = *(uint64_t (**)(uint64_t, void, void, CFArrayRef *))(v11 + 48);
  if (!v13) {
    return 4294954514;
  }
  uint64_t v12 = v13(FigBaseObject, *MEMORY[0x1E4F34A08], *MEMORY[0x1E4F1CF80], &theArray);
  CFArrayRef v14 = theArray;
  if (!v12)
  {
    CFIndex v15 = CFArrayGetCount(theArray);
    CFArrayRef v14 = theArray;
    if (v15 != 1)
    {
      uint64_t v12 = 4294950194;
      if (!theArray) {
        return v12;
      }
      goto LABEL_18;
    }
    CFIndex ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
    if (ValueAtIndex) {
      CFIndex ValueAtIndex = CFRetain(ValueAtIndex);
    }
    uint64_t v12 = 0;
    *a5 = ValueAtIndex;
    CFArrayRef v14 = theArray;
  }
  if (v14) {
LABEL_18:
  }
    CFRelease(v14);
  return v12;
}

uint64_t _createAuxiliaryImageForIndex_1(uint64_t a1, uint64_t a2, CFIndex idx, const __CFDictionary *a4, int a5, CGImageRef *a6)
{
  v19[2] = *(const void **)MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  if (*(unsigned char *)(a1 + 112))
  {
    if (a4)
    {
      v19[0] = @"DryRun";
      v19[1] = @"UseProvidedPixelBuffer";
      uint64_t v12 = _checkForUnsupportedKeys(a4, v19);
      if (v12) {
        return v12;
      }
    }
    if (idx < 0) {
      return 4294950306;
    }
    CFArrayRef Count = *(const __CFArray **)(a1 + 96);
    if (Count) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if ((uint64_t)Count <= idx) {
      return 4294950306;
    }
    CFIndex ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 96), idx);
    uint64_t SampleBuffer = _moveSampleCursorToIndexAndCreateSampleBuffer(*(const __CFAllocator **)(a1 + 40), a2, (uint64_t)ValueAtIndex, (CMSampleBufferRef *)&cf);
    CFTypeRef v16 = cf;
    if (SampleBuffer)
    {
      uint64_t v12 = SampleBuffer;
      if (!cf) {
        return v12;
      }
    }
    else
    {
      uint64_t v12 = _decodePixelBufferForImageIndex(*(const __CFAllocator **)(a1 + 40), (uint64_t *)a1, a2, (uint64_t)cf, (uint64_t)ValueAtIndex, a4, a5, a6);
      CFTypeRef v16 = cf;
      if (!cf) {
        return v12;
      }
    }
    CFRelease(v16);
    return v12;
  }
  return FigSignalErrorAt();
}

uint64_t _createOutputBufferAttributesForImageIndex_2(uint64_t a1, uint64_t a2, const __CFDictionary *a3, CFMutableDictionaryRef *a4)
{
  CFTypeRef cf = 0;
  OutputBufferAttributesForFormatDescriptiouint64_t n = _copyFormatDescriptionForTrackReader(*(void *)(*(void *)(a1 + 80) + 8), &cf);
  if (!OutputBufferAttributesForFormatDescription) {
    OutputBufferAttributesForFormatDescriptiouint64_t n = _createOutputBufferAttributesForFormatDescription(a1, (CMVideoFormatDescriptionRef)cf, a3, a4);
  }
  uint64_t v8 = OutputBufferAttributesForFormatDescription;
  if (cf) {
    CFRelease(cf);
  }
  return v8;
}

uint64_t _createOutputBufferAttributesForThumbnailIndex_1(uint64_t a1, int a2, CFIndex a3, const __CFDictionary *a4, CFMutableDictionaryRef *a5)
{
  CFTypeRef cf = 0;
  OutputBufferAttributesForFormatDescriptiouint64_t n = _copyThumbnailFormatDescriptionForIndex_0(a1, a2, a3, &cf);
  if (!OutputBufferAttributesForFormatDescription) {
    OutputBufferAttributesForFormatDescriptiouint64_t n = _createOutputBufferAttributesForFormatDescription(a1, (CMVideoFormatDescriptionRef)cf, a4, a5);
  }
  uint64_t v9 = OutputBufferAttributesForFormatDescription;
  if (cf) {
    CFRelease(cf);
  }
  return v9;
}

uint64_t _createOutputBufferAttributesForAuxiliaryIndex_1(uint64_t a1, int a2, CFIndex a3, const __CFDictionary *a4, CFMutableDictionaryRef *a5)
{
  CFTypeRef cf = 0;
  OutputBufferAttributesForFormatDescriptiouint64_t n = _copyAuxiliaryImageFormatDescriptionForIndex_0(a1, a2, a3, (uint64_t)a4, &cf);
  if (!OutputBufferAttributesForFormatDescription) {
    OutputBufferAttributesForFormatDescriptiouint64_t n = _createOutputBufferAttributesForFormatDescription(a1, (CMVideoFormatDescriptionRef)cf, a4, a5);
  }
  uint64_t v9 = OutputBufferAttributesForFormatDescription;
  if (cf) {
    CFRelease(cf);
  }
  return v9;
}

uint64_t _copyImageIsRGBForIndex_2(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  CFTypeRef cf = 0;
  if (!a3) {
    return 0;
  }
  uint64_t v4 = _copySequenceReaderColor(*(void *)(a1 + 40), *(void *)(a1 + 80), 0, 0, 0, &cf, 0, 0);
  if (!v4) {
    *a3 = FigCFEqual();
  }
  if (cf) {
    CFRelease(cf);
  }
  return v4;
}

uint64_t _copyThumbnailFormatDescriptionForIndex_0(uint64_t a1, int a2, CFIndex idx, void *a4)
{
  CFArrayRef theArray = 0;
  if (!a4) {
    return 0;
  }
  if (idx < 0) {
    return 4294950306;
  }
  CFArrayRef Count = *(const __CFArray **)(a1 + 88);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  if ((uint64_t)Count <= idx || !*((void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 88), idx) + 1)) {
    return 4294950306;
  }
  uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject();
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, void, void, CFArrayRef *))(v10 + 48);
  if (!v12) {
    return 4294954514;
  }
  uint64_t v11 = v12(FigBaseObject, *MEMORY[0x1E4F34A08], *MEMORY[0x1E4F1CF80], &theArray);
  CFArrayRef v13 = theArray;
  if (!v11)
  {
    CFIndex v14 = CFArrayGetCount(theArray);
    CFArrayRef v13 = theArray;
    if (v14 != 1)
    {
      uint64_t v11 = 4294950194;
      if (!theArray) {
        return v11;
      }
      goto LABEL_18;
    }
    CFIndex ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
    if (ValueAtIndex) {
      CFIndex ValueAtIndex = CFRetain(ValueAtIndex);
    }
    uint64_t v11 = 0;
    *a4 = ValueAtIndex;
    CFArrayRef v13 = theArray;
  }
  if (v13) {
LABEL_18:
  }
    CFRelease(v13);
  return v11;
}

uint64_t _getThumbnailGeometryForIndex_1(uint64_t a1, int a2, CFIndex idx, void *a4, void *a5, _DWORD *a6)
{
  if (idx < 0) {
    return 4294950306;
  }
  CFArrayRef Count = *(const __CFArray **)(a1 + 88);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  if ((uint64_t)Count <= idx) {
    return 4294950306;
  }
  uint64_t v12 = (const void *)*((void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 88), idx) + 1);
  if (!v12) {
    return 4294950306;
  }
  return _getReferenceSequenceGeometry(v12, a4, a5, a6);
}

uint64_t _copyThumbnailBitDepthForIndex_1(uint64_t a1, int a2, CFIndex a3, CFTypeRef *a4)
{
  CMFormatDescriptionRef desc = 0;
  CFTypeRef cf = 0;
  if (!a4) {
    return 0;
  }
  uint64_t v5 = _copyThumbnailFormatDescriptionForIndex_0(a1, a2, a3, &desc);
  if (v5)
  {
    uint64_t v6 = v5;
  }
  else if (CMFormatDescriptionGetExtensions(desc))
  {
    uint64_t v6 = CMPhotoCopyImageBitDepthFromFormatDescription(desc, (CFMutableArrayRef *)&cf);
    if (!v6)
    {
      *a4 = cf;
      CFTypeRef cf = 0;
    }
  }
  else
  {
    uint64_t v6 = 4294950303;
  }
  if (desc) {
    CFRelease(desc);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

uint64_t _copyAuxiliaryImageBitDepthForIndex_1(uint64_t a1, int a2, CFIndex a3, CFTypeRef *a4)
{
  CMFormatDescriptionRef desc = 0;
  CFTypeRef cf = 0;
  if (!a4) {
    return 0;
  }
  uint64_t v5 = _copyAuxiliaryImageFormatDescriptionForIndex_0(a1, a2, a3, (uint64_t)a4, &desc);
  if (v5)
  {
    uint64_t v6 = v5;
  }
  else if (CMFormatDescriptionGetExtensions(desc))
  {
    uint64_t v6 = CMPhotoCopyImageBitDepthFromFormatDescription(desc, (CFMutableArrayRef *)&cf);
    if (!v6)
    {
      *a4 = cf;
      CFTypeRef cf = 0;
    }
  }
  else
  {
    uint64_t v6 = 4294950303;
  }
  if (desc) {
    CFRelease(desc);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

uint64_t _copyColorSpaceForIndex_2(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3) {
    return _copySequenceReaderColor(*(void *)(a1 + 40), *(void *)(a1 + 80), a3, 0, 0, 0, 0, 0);
  }
  else {
    return 0;
  }
}

uint64_t _getLoopCount(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 48))
  {
    if (*(unsigned char *)(a1 + 49))
    {
LABEL_4:
      uint64_t result = 0;
      *a2 = *(void *)(a1 + 56);
      return result;
    }
    return 4294950303;
  }
  *(void *)(a1 + 56) = 0;
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(*(void *)(a1 + 80) + 8);
  CFTypeRef v44 = 0;
  CFDictionaryRef v45 = 0;
  CFTypeRef v42 = 0;
  CFTypeRef v43 = 0;
  CFTypeRef v41 = 0;
  if (!v6)
  {
    int v32 = FigSignalErrorAt();
    goto LABEL_50;
  }
  uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject();
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, void, void, CFTypeRef *))(v9 + 48);
  if (!v10) {
    goto LABEL_47;
  }
  int v11 = v10(FigBaseObject, *MEMORY[0x1E4F349C0], 0, &v44);
  if (v11) {
    goto LABEL_64;
  }
  uint64_t v12 = cmpweak_kFigTrackProperty_HasEditListBox();
  uint64_t v13 = FigTrackReaderGetFigBaseObject();
  uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v14) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  CFTypeRef v16 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v15 + 48);
  if (!v16) {
    goto LABEL_47;
  }
  int v11 = v16(v13, v12, 0, &v41);
  if (v11) {
    goto LABEL_64;
  }
  if (!FigCFEqual())
  {
    int v32 = -16993;
    goto LABEL_48;
  }
  CFTypeRef v17 = v44;
  uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v18) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = 0;
  }
  uint64_t v20 = *(uint64_t (**)(CFTypeRef, CMTimeRange *, CFTypeRef *))(v19 + 8);
  if (!v20) {
    goto LABEL_47;
  }
  *(_OWORD *)&v39[0].start.CMTimeValue value = *MEMORY[0x1E4F1FA08];
  v39[0].start.epoch = *(void *)(MEMORY[0x1E4F1FA08] + 16);
  int v11 = v20(v17, v39, &v43);
  if (v11) {
    goto LABEL_64;
  }
  uint64_t v21 = cmpweak_kFigEditCursorProperty_RepeatsEdits();
  uint64_t v22 = FigEditCursorGetFigBaseObject();
  uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v23) {
    uint64_t v24 = v23;
  }
  else {
    uint64_t v24 = 0;
  }
  uint64_t v25 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v24 + 48);
  if (!v25) {
    goto LABEL_47;
  }
  int v11 = v25(v22, v21, 0, &v42);
  if (v11) {
    goto LABEL_64;
  }
  long long v26 = cmpweak_kFigTrackProperty_EditedDuration();
  uint64_t v27 = FigTrackReaderGetFigBaseObject();
  uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v28) {
    uint64_t v29 = v28;
  }
  else {
    uint64_t v29 = 0;
  }
  long long v30 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, const __CFDictionary **))(v29 + 48);
  if (!v30) {
    goto LABEL_47;
  }
  int v11 = v30(v27, v26, v5, &v45);
  if (v11)
  {
LABEL_64:
    int v32 = v11;
    goto LABEL_48;
  }
  memset(&v40, 0, sizeof(v40));
  CMTimeMakeFromDictionary(&v40, v45);
  if ((v40.flags & 1) == 0)
  {
    int v32 = -17102;
    goto LABEL_48;
  }
  if (FigCFEqual())
  {
    unint64_t v31 = 1;
LABEL_37:
    int v32 = 0;
    *(void *)(a1 + 56) = v31;
    goto LABEL_48;
  }
  if ((~v40.flags & 0x11) == 0)
  {
    unint64_t v31 = 0;
    goto LABEL_37;
  }
  memset(v39, 0, sizeof(v39));
  CFTypeRef v33 = v43;
  uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v34) {
    uint64_t v35 = v34;
  }
  else {
    uint64_t v35 = 0;
  }
  long long v36 = *(uint64_t (**)(CFTypeRef, CMTimeRange *))(v35 + 24);
  if (!v36)
  {
LABEL_47:
    int v32 = -12782;
    goto LABEL_48;
  }
  int v11 = v36(v33, v39);
  if (v11) {
    goto LABEL_64;
  }
  CMTimeRange range1 = v39[0];
  CMTimeRange v37 = v39[1];
  if (CMTimeRangeEqual(&range1, &v37))
  {
    memset(&range1, 0, 24);
    v37.start = v39[1].duration;
    CMTimeConvertScale(&range1.start, &v37.start, v40.timescale, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
    unint64_t v31 = 0;
    if (!((unint64_t)(v40.value / range1.start.value) >> 32)) {
      unint64_t v31 = vcvtpd_s64_f64((double)v40.value / (double)range1.start.value);
    }
    goto LABEL_37;
  }
  int v32 = -16994;
LABEL_48:
  if (v41) {
    CFRelease(v41);
  }
LABEL_50:
  if (v45) {
    CFRelease(v45);
  }
  if (v43) {
    CFRelease(v43);
  }
  if (v44) {
    CFRelease(v44);
  }
  if (v42) {
    CFRelease(v42);
  }
  *(unsigned char *)(a1 + 48) = 1;
  *(unsigned char *)(a1 + 49) = v32 == 0;
  if (!v32) {
    goto LABEL_4;
  }
  return 4294950303;
}

uint64_t _createSequenceReader(uint64_t a1, uint64_t a2, int a3, int a4, void *a5)
{
  int v27 = 0;
  CFTypeRef cf = 0;
  if ((int)a2 < 1)
  {
    uint64_t v10 = 0;
    uint64_t v24 = 4294950306;
    goto LABEL_29;
  }
  uint64_t v10 = malloc_type_calloc(1uLL, 0x78uLL, 0x106004017483417uLL);
  if (!v10)
  {
    uint64_t v24 = 4294950305;
    goto LABEL_29;
  }
  uint64_t v11 = FigSimpleMutexCreate();
  v10[4] = v11;
  if (!v11)
  {
    uint64_t v24 = 4294950305;
    goto LABEL_27;
  }
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, void *, int *))(v13 + 56);
  if (!v14) {
    goto LABEL_26;
  }
  uint64_t v15 = v14(a1, a2, v10 + 1, &v27);
  if (!v15)
  {
    if (a3 == 1635088502 && a4 && v27 == 1885954932)
    {
      int v27 = 1635088502;
    }
    else if (v27 != a3)
    {
      uint64_t v24 = 4294950306;
      goto LABEL_27;
    }
    uint64_t v16 = v10[1];
    uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v17) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v19 = *(uint64_t (**)(uint64_t, CFTypeRef *))(v18 + 32);
    if (!v19) {
      goto LABEL_26;
    }
    uint64_t v15 = v19(v16, &cf);
    if (!v15)
    {
      CFTypeRef v20 = cf;
      uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v21) {
        uint64_t v22 = v21;
      }
      else {
        uint64_t v22 = 0;
      }
      uint64_t v23 = *(uint64_t (**)(CFTypeRef, void *))(v22 + 24);
      if (v23)
      {
        uint64_t v15 = v23(v20, v10 + 2);
        if (!v15)
        {
          *(_DWORD *)uint64_t v10 = v27;
          v10[3] = 0;
          v10[5] = 0;
          *((_DWORD *)v10 + 12) = a2;
          *((unsigned char *)v10 + 52) = 0;
          *((unsigned char *)v10 + 60) = 0;
          uint64_t v24 = 0;
          if (a5)
          {
            *a5 = v10;
            uint64_t v10 = 0;
          }
          goto LABEL_27;
        }
        goto LABEL_34;
      }
LABEL_26:
      uint64_t v24 = 4294954514;
      goto LABEL_27;
    }
  }
LABEL_34:
  uint64_t v24 = v15;
LABEL_27:
  if (cf) {
    CFRelease(cf);
  }
LABEL_29:
  _releaseSequenceReader(v10);
  return v24;
}

uint64_t _copyReferenceSequenceReaders(const __CFAllocator *a1, uint64_t a2, const __CFArray *a3, int a4, int a5, __CFArray **a6)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, 0);
  if (!Mutable) {
    return 4294950305;
  }
  uint64_t v12 = Mutable;
  if (CFArrayGetCount(a3) >= 1)
  {
    uint64_t v13 = 0;
    while (1)
    {
      CMTimeValue value = 0;
      if (!FigCFArrayGetInt32AtIndex())
      {
        uint64_t v15 = 4294950306;
        goto LABEL_11;
      }
      uint64_t v14 = _createSequenceReader(a2, 0, a4, a5, &value);
      if (v14) {
        break;
      }
      CFArrayAppendValue(v12, value);
      if (++v13 >= CFArrayGetCount(a3)) {
        goto LABEL_7;
      }
    }
    uint64_t v15 = v14;
    goto LABEL_11;
  }
LABEL_7:
  uint64_t v15 = 0;
  if (!a6)
  {
LABEL_11:
    CFRelease(v12);
    return v15;
  }
  *a6 = v12;
  return v15;
}

void _releaseSequenceReader(void *a1)
{
  if (a1)
  {
    FigSimpleMutexDestroy();
    a1[4] = 0;
    uint64_t v2 = (const void *)a1[2];
    if (v2)
    {
      CFRelease(v2);
      a1[2] = 0;
    }
    uint64_t v3 = (const void *)a1[1];
    if (v3)
    {
      CFRelease(v3);
      a1[1] = 0;
    }
    uint64_t v4 = (const void *)a1[5];
    if (v4)
    {
      CFRelease(v4);
      a1[5] = 0;
    }
    uint64_t v5 = (const void *)a1[9];
    if (v5)
    {
      CFRelease(v5);
      a1[9] = 0;
    }
    uint64_t v6 = (const void *)a1[10];
    if (v6)
    {
      CFRelease(v6);
      a1[10] = 0;
    }
    uint64_t v7 = (const void *)a1[11];
    if (v7)
    {
      CFRelease(v7);
      a1[11] = 0;
    }
    uint64_t v8 = (const void *)a1[12];
    if (v8)
    {
      CFRelease(v8);
      a1[12] = 0;
    }
    uint64_t v9 = (const void *)a1[13];
    if (v9) {
      CFRelease(v9);
    }
    free(a1);
  }
}

CFNumberRef _getImageCountForSequence(uint64_t a1, void *a2)
{
  CFNumberRef number = 0;
  if (!a2) {
    return 0;
  }
  uint64_t v9 = 0;
  CFAllocatorRef v3 = CFGetAllocator(*(CFTypeRef *)(a1 + 8));
  uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject();
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void (**)(uint64_t, void, CFAllocatorRef, CFNumberRef *))(v6 + 48);
  if (v7)
  {
    v7(FigBaseObject, *MEMORY[0x1E4F34AD0], v3, &number);
    if (number)
    {
      CFNumberGetValue(number, kCFNumberSInt64Type, &v9);
      CFNumberRef result = number;
      *a2 = v9;
      if (!result) {
        return result;
      }
      CFRelease(result);
      return 0;
    }
  }
  return (CFNumberRef)4294950194;
}

uint64_t _copyFormatDescriptionForTrackReader(uint64_t a1, void *a2)
{
  CFArrayRef theArray = 0;
  if (!a2) {
    return 0;
  }
  if (a1)
  {
    uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject();
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v7 = *(uint64_t (**)(uint64_t, void, void, CFArrayRef *))(v5 + 48);
    if (!v7) {
      return 4294954514;
    }
    uint64_t v6 = v7(FigBaseObject, *MEMORY[0x1E4F34A08], *MEMORY[0x1E4F1CF80], &theArray);
    CFArrayRef v8 = theArray;
    if (!v6)
    {
      CFIndex Count = CFArrayGetCount(theArray);
      CFArrayRef v8 = theArray;
      if (Count != 1)
      {
        uint64_t v6 = 4294950194;
        if (!theArray) {
          return v6;
        }
        goto LABEL_14;
      }
      CFIndex ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
      if (ValueAtIndex) {
        CFIndex ValueAtIndex = CFRetain(ValueAtIndex);
      }
      uint64_t v6 = 0;
      *a2 = ValueAtIndex;
      CFArrayRef v8 = theArray;
    }
    if (v8) {
LABEL_14:
    }
      CFRelease(v8);
    return v6;
  }
  return FigSignalErrorAt();
}

uint64_t _getImageGeometryFromTrackReader(CFTypeRef cf, void *a2)
{
  size.double height = 0.0;
  CFDictionaryRef dict = 0;
  size.double width = 0.0;
  if (!a2 || !cf) {
    goto LABEL_31;
  }
  CFAllocatorRef v4 = CFGetAllocator(cf);
  uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject();
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  CFArrayRef v8 = *(uint64_t (**)(uint64_t, void, CFAllocatorRef, CFDictionaryRef *))(v7 + 48);
  if (!v8)
  {
LABEL_21:
    uint64_t v16 = 4294954514;
    goto LABEL_22;
  }
  uint64_t v9 = v8(FigBaseObject, *MEMORY[0x1E4F349B0], v4, &dict);
  if (v9)
  {
LABEL_32:
    uint64_t v16 = v9;
    goto LABEL_22;
  }
  if (!CGSizeMakeWithDictionaryRepresentation(dict, &size) || size.width <= 0.0 || size.height <= 0.0)
  {
LABEL_31:
    uint64_t v9 = FigSignalErrorAt();
    goto LABEL_32;
  }
  if (dict)
  {
    CFRelease(dict);
    CFDictionaryRef dict = 0;
  }
  CFAllocatorRef v10 = CFGetAllocator(cf);
  uint64_t v11 = FigTrackReaderGetFigBaseObject();
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(uint64_t (**)(uint64_t, void, CFAllocatorRef, CFDictionaryRef *))(v13 + 48);
  if (!v14) {
    goto LABEL_21;
  }
  uint64_t v15 = v14(v11, *MEMORY[0x1E4F34998], v10, &dict);
  if (!v15 || (uint64_t v16 = v15, v15 == -12783))
  {
    double width = size.width;
    if (dict)
    {
      double CropRectFromCLAPDict = CMPhotoGetCropRectFromCLAPDict(dict, size.width, size.height);
      double width = size.width;
    }
    else
    {
      double height = size.height;
      double CropRectFromCLAPDict = 0.0;
      double v19 = 0.0;
      double v20 = size.width;
    }
    if (CropRectFromCLAPDict >= 0.0 && CropRectFromCLAPDict + v20 <= width && v19 >= 0.0 && v19 + height <= size.height)
    {
      uint64_t v16 = 0;
      *a2 = vcvtad_u64_f64(CropRectFromCLAPDict);
      a2[1] = vcvtad_u64_f64(v19);
      a2[2] = vcvtad_u64_f64(v20);
      a2[3] = vcvtad_u64_f64(height);
      goto LABEL_22;
    }
    goto LABEL_31;
  }
LABEL_22:
  if (dict) {
    CFRelease(dict);
  }
  return v16;
}

uint64_t _checkForUnsupportedKeys(const __CFDictionary *a1, const void **a2)
{
  uint64_t result = CFDictionaryContainsKey(a1, *a2);
  if (result)
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t _moveSampleCursorToIndexAndCreateSampleBuffer(const __CFAllocator *a1, uint64_t a2, uint64_t a3, CMSampleBufferRef *a4)
{
  uint64_t v8 = pthread_mutex_lock(*(pthread_mutex_t **)(a3 + 32));
  if (v8) {
    return v8;
  }
  uint64_t SampleBufferFromSampleCursor = _moveCursorToPosition(*(void *)(a3 + 16), (uint64_t *)(a3 + 24), a2);
  if (!SampleBufferFromSampleCursor) {
    uint64_t SampleBufferFromSampleCursor = _createSampleBufferFromSampleCursor(a1, *(void *)(a3 + 16), a4);
  }
  uint64_t v10 = SampleBufferFromSampleCursor;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a3 + 32));
  return v10;
}

uint64_t ___createImageForIndex_block_invoke(uint64_t a1)
{
  uint64_t result = _createAuxiliaryImageForIndex_1(*(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(const __CFDictionary **)(a1 + 72), 2, (CGImageRef *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t _decodePixelBufferForImageIndex(const __CFAllocator *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, const __CFDictionary *a6, int a7, CGImageRef *a8)
{
  CFTypeRef v152 = 0;
  CFTypeRef v153 = 0;
  CFDictionaryRef v151 = 0;
  long long v13 = 0uLL;
  long long v149 = 0u;
  *(_OWORD *)uint64_t v150 = 0u;
  long long v148 = 0u;
  CFTypeRef v147 = 0;
  if (*MEMORY[0x1E4F1EBA8] == 1)
  {
    kdebug_trace();
    long long v13 = 0uLL;
    if (*MEMORY[0x1E4F1EBA8] == 1)
    {
      kdebug_trace();
      long long v13 = 0uLL;
    }
  }
  uint64_t v146 = 0;
  long long v144 = v13;
  long long v145 = v13;
  *(_OWORD *)CFTypeRef cf = v13;
  long long v143 = v13;
  *(_OWORD *)&v140[32] = v13;
  long long v141 = v13;
  *(_OWORD *)uint64_t v140 = v13;
  *(_OWORD *)&v140[16] = v13;
  long long v139 = v13;
  unint64_t v137 = 0;
  unint64_t v138 = 0;
  CFAllocatorRef v130 = a1;
  uint64_t v134 = a3;
  if (*(unsigned char *)(a5 + 61)) {
    goto LABEL_66;
  }
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  int64_t v159 = 0;
  *(void *)&long long v160 = 0;
  *(void *)&long long value = 0;
  *(void *)&v154[0] = 0;
  *(_WORD *)(a5 + 61) = 1;
  uint64_t ImageCountForSequence = (uint64_t)_getImageCountForSequence(a5, &v159);
  if (ImageCountForSequence) {
    goto LABEL_283;
  }
  uint64_t v15 = *(void *)(a5 + 8);
  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v16) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v18 = *(uint64_t (**)(uint64_t, long long *))(v17 + 32);
  if (v18)
  {
    uint64_t ImageCountForSequence = v18(v15, &v160);
    if (ImageCountForSequence) {
      goto LABEL_283;
    }
    uint64_t v19 = v160;
    uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v20) {
      uint64_t v21 = v20;
    }
    else {
      uint64_t v21 = 0;
    }
    uint64_t v22 = *(uint64_t (**)(uint64_t, long long *))(v21 + 24);
    if (v22)
    {
      uint64_t ImageCountForSequence = v22(v19, &value);
      if (ImageCountForSequence) {
        goto LABEL_283;
      }
      uint64_t v158 = -1;
      uint64_t v23 = value;
      uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v25 = v24 ? v24 : 0;
      long long v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(v25 + 176);
      if (v26)
      {
        uint64_t ImageCountForSequence = v26(v23, -1, &v158);
        if (!ImageCountForSequence)
        {
          if (!v158)
          {
            uint64_t v27 = value;
            uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v28) {
              uint64_t v29 = v28;
            }
            else {
              uint64_t v29 = 0;
            }
            long long v30 = *(uint64_t (**)(uint64_t, _OWORD *))(v29 + 8);
            if (v30)
            {
              uint64_t v31 = v30(v27, v154);
              if (v31)
              {
LABEL_55:
                uint64_t v47 = v31;
              }
              else if ((uint64_t)v159 < 2)
              {
LABEL_177:
                uint64_t v47 = 0;
                *(unsigned char *)(a5 + 62) = 1;
              }
              else
              {
                uint64_t v32 = 0;
                while (1)
                {
                  uint64_t v33 = value;
                  uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 16);
                  if (v34) {
                    uint64_t v35 = v34;
                  }
                  else {
                    uint64_t v35 = 0;
                  }
                  long long v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(v35 + 168);
                  if (!v36)
                  {
LABEL_178:
                    uint64_t v47 = 4294954514;
                    goto LABEL_57;
                  }
                  uint64_t v31 = v36(v33, 1, &v158);
                  if (v31) {
                    goto LABEL_55;
                  }
                  if (v158 != 1) {
                    break;
                  }
                  uint64_t v37 = *(void *)&v154[0];
                  uint64_t v38 = *(void *)(CMBaseObjectGetVTable() + 16);
                  if (v38) {
                    uint64_t v39 = v38;
                  }
                  else {
                    uint64_t v39 = 0;
                  }
                  CMTime v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(v39 + 176);
                  if (!v40) {
                    goto LABEL_178;
                  }
                  uint64_t v31 = v40(v37, 1, &v158);
                  if (v31) {
                    goto LABEL_55;
                  }
                  if (v158 != 1) {
                    break;
                  }
                  uint64_t v41 = value;
                  uint64_t v42 = *(void *)&v154[0];
                  uint64_t v43 = *(void *)(CMBaseObjectGetVTable() + 16);
                  if (v43) {
                    uint64_t v44 = v43;
                  }
                  else {
                    uint64_t v44 = 0;
                  }
                  if (v42) {
                    uint64_t v45 = *(void *)(CMBaseObjectGetVTable() + 16);
                  }
                  else {
                    uint64_t v45 = 0;
                  }
                  if (v44 == v45)
                  {
                    long long v46 = *(uint64_t (**)(uint64_t, uint64_t))(v44 + 32);
                    if (v46)
                    {
                      if (v46(v41, v42))
                      {
                        uint64_t v31 = FigSignalErrorAt();
                        goto LABEL_55;
                      }
                    }
                  }
                  if (++v32 >= (uint64_t)v159 - 1) {
                    goto LABEL_177;
                  }
                }
                uint64_t v47 = 4294950194;
              }
              goto LABEL_57;
            }
            goto LABEL_56;
          }
          uint64_t ImageCountForSequence = FigSignalErrorAt();
        }
LABEL_283:
        uint64_t v47 = ImageCountForSequence;
        goto LABEL_57;
      }
    }
  }
LABEL_56:
  uint64_t v47 = 4294954514;
LABEL_57:
  if ((void)v160) {
    CFRelease((CFTypeRef)v160);
  }
  if ((void)value) {
    CFRelease((CFTypeRef)value);
  }
  if (*(void *)&v154[0]) {
    CFRelease(*(CFTypeRef *)&v154[0]);
  }
  if (v47) {
    goto LABEL_233;
  }
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
LABEL_66:
  if (!*(unsigned char *)(a5 + 62))
  {
    uint64_t ImageGeometryFromTrackReader = FigSignalErrorAt();
    goto LABEL_260;
  }
  long long v48 = *(const void **)(a5 + 8);
  long long v160 = 0u;
  long long v161 = 0u;
  uint64_t ImageGeometryFromTrackReader = _getImageGeometryFromTrackReader(v48, &v160);
  if (ImageGeometryFromTrackReader) {
    goto LABEL_260;
  }
  uint64_t ImageGeometryFromTrackReader = CMPhotoDecompressionContainerParseOptions((uint64_t)a2, a6, v161, *((uint64_t *)&v161 + 1), (uint64_t)&v139);
  if (ImageGeometryFromTrackReader) {
    goto LABEL_260;
  }
  if (!BYTE8(v139))
  {
    DWORD1(v139) = 0;
    goto LABEL_74;
  }
  if (CMPhotoHEIFUtilitiesSupportsOutputPixelFormat(SDWORD1(v139)))
  {
LABEL_74:
    if (!v140[5])
    {
      *(_OWORD *)&v140[8] = v160;
      *(_OWORD *)&v140[24] = v161;
      goto LABEL_78;
    }
    long long value = v160;
    long long v156 = v161;
    v154[0] = *(_OWORD *)&v140[8];
    v154[1] = *(_OWORD *)&v140[24];
    uint64_t ImageGeometryFromTrackReader = CMPhotoApplyCropCMPhotoRectToRect(&value, (unint64_t *)v154);
    if (!ImageGeometryFromTrackReader)
    {
      *(_OWORD *)&v140[8] = value;
      *(_OWORD *)&v140[24] = v156;
LABEL_78:
      CMPhotoPixelBufferConstrainSizeToMaxSideLength(*(unint64_t *)&v140[24], *(unint64_t *)&v140[32], *(unint64_t *)&v140[40], 0, 0, v141, 0, &v137, 0, 0);
      goto LABEL_79;
    }
LABEL_260:
    uint64_t v47 = ImageGeometryFromTrackReader;
    goto LABEL_233;
  }
  uint64_t ImageGeometryFromTrackReader = FigSignalErrorAt();
  if (ImageGeometryFromTrackReader) {
    goto LABEL_260;
  }
LABEL_79:
  uint64_t ImageGeometryFromTrackReader = CMPhotoDecompressionSessionCopyScaler(a2[2], &v153);
  if (ImageGeometryFromTrackReader) {
    goto LABEL_260;
  }
  uint64_t ImageGeometryFromTrackReader = CMPhotoDecompressionSessionCopySurfacePool(a2[2], &v152);
  if (ImageGeometryFromTrackReader) {
    goto LABEL_260;
  }
  CFTypeRef v51 = v152;
  CFTypeRef v50 = v153;
  *(void *)&long long value = 0;
  *(void *)&v154[0] = 0;
  int64_t v159 = 0;
  *(void *)&long long v160 = 0;
  int v52 = _copyFormatDescriptionForTrackReader(*(void *)(a5 + 8), &v160);
  if (v52) {
    FourCharCode MediaSubType = 0;
  }
  else {
    FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType((CMFormatDescriptionRef)v160);
  }
  if ((void)v160) {
    CFRelease((CFTypeRef)v160);
  }
  long long v54 = (const void **)MEMORY[0x1E4F1CFD0];
  if (v52)
  {
    CFDictionaryRef theDict = 0;
    uint64_t v47 = 4294950194;
    goto LABEL_264;
  }
  uint64_t v55 = _copyFormatDescriptionForTrackReader(*(void *)(a5 + 8), &value);
  if (v55
    || (uint64_t v55 = _copySequenceReaderColor(a2[5], a5, (void *)&v148 + 1, &v149, (void *)&v149 + 1, v150, &v150[1], (_DWORD *)&v150[1] + 1), v55))
  {
    uint64_t v47 = v55;
    CFDictionaryRef theDict = 0;
LABEL_264:
    long long v60 = (_DWORD *)MEMORY[0x1E4F1EBA8];
    goto LABEL_266;
  }
  CFDictionaryRef MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  CFDictionaryRef theDict = MutableCopy;
  if (!MutableCopy)
  {
    uint64_t v47 = 4294950305;
    goto LABEL_264;
  }
  unint64_t v58 = *v54;
  CFDictionarySetValue(MutableCopy, @"UseVTDecompression", v58);
  int v59 = DWORD2(v141);
  long long v60 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (DWORD2(v141) == 1)
  {
    CFDictionarySetValue(theDict, @"PreferSoftwareCodec", v58);
    int v59 = DWORD2(v141);
  }
  if (v59 == 2) {
    CFDictionarySetValue(theDict, @"RequireHardwareCodec", v58);
  }
  if (DWORD1(v139) && CMPhotoPixelFormatIsPackedYUV(SDWORD1(v139))) {
    CFDictionaryAddValue(theDict, @"AllowPackedBuffers", v58);
  }
  CFDictionarySetValue(theDict, @"SyncDecode", (const void *)*MEMORY[0x1E4F1CFC8]);
  uint64_t v61 = CMPhotoDecompressionSessionCopySequenceCodecPool(a2[2], &v159);
  if (v61)
  {
    uint64_t v47 = v61;
  }
  else
  {
    uint64_t v47 = CMPhotoDecompressionPluginCreate((const void *)a2[5], v51, v50, v159, MediaSubType, (const void *)a2[2], value, 0, *(int *)(a5 + 48)+ ((unint64_t)(a2[62] + *(int *)(a5 + 48) + (a2[62] + *(int *)(a5 + 48)) * (a2[62] + *(int *)(a5 + 48))) >> 1), theDict, (uint64_t)_decoder_plugin_callback_simple, (uint64_t)&v148, v154);
    if (!v47)
    {
      uint64_t v62 = *(CFTypeRef **)&v154[0];
      *(void *)&v154[0] = 0;
      goto LABEL_99;
    }
  }
LABEL_266:
  if (*((void *)&v148 + 1))
  {
    CFRelease(*((CFTypeRef *)&v148 + 1));
    *((void *)&v148 + 1) = 0;
  }
  if ((void)v149)
  {
    CFRelease((CFTypeRef)v149);
    *(void *)&long long v149 = 0;
  }
  if (*((void *)&v149 + 1))
  {
    CFRelease(*((CFTypeRef *)&v149 + 1));
    *((void *)&v149 + 1) = 0;
  }
  if (v150[0])
  {
    CFRelease(v150[0]);
    v150[0] = 0;
  }
  if (*(void *)&v154[0]) {
    CFRelease(*(CFTypeRef *)&v154[0]);
  }
  uint64_t v62 = 0;
LABEL_99:
  if (v159) {
    CFRelease(v159);
  }
  if (theDict) {
    CFRelease(theDict);
  }
  if ((void)value) {
    CFRelease((CFTypeRef)value);
  }
  if (v47) {
    goto LABEL_255;
  }
  uint64_t v63 = CMPhotoDecompressionPluginCopyAttachments((uint64_t)v62);
  if (v63)
  {
LABEL_258:
    uint64_t v47 = v63;
    goto LABEL_255;
  }
  uint64_t v136 = -1;
  CMPhotoCFDictionaryGetInt64IfPresent(v151, @"LastDecodedFrameNumber", &v136);
  CFTypeRef v133 = v62;
  if (!v134)
  {
    uint64_t v64 = 0;
    BOOL v65 = 0;
    *(unsigned char *)(a5 + 60) = 1;
    goto LABEL_121;
  }
  if (*(unsigned char *)(a5 + 60) && v136 + 1 == v134)
  {
    uint64_t v64 = 0;
    BOOL v65 = 0;
LABEL_121:
    uint64_t v70 = -1;
LABEL_191:
    if (*v60 == 1)
    {
      kdebug_trace();
      if (*v60 == 1) {
        kdebug_trace();
      }
    }
    goto LABEL_194;
  }
  if (*v60 == 1) {
    kdebug_trace();
  }
  *(unsigned char *)(a5 + 60) = 0;
  *(void *)&long long v160 = 0;
  if (!*(unsigned char *)(a5 + 52))
  {
    *(_WORD *)(a5 + 52) = 1;
    *(_DWORD *)(a5 + 56) = -1;
    uint64_t v47 = _copyFormatDescriptionForTrackReader(*(void *)(a5 + 8), &v160);
    if (v47) {
      goto LABEL_127;
    }
    Extensiouint64_t n = (const __CFDictionary *)CMFormatDescriptionGetExtension((CMFormatDescriptionRef)v160, (CFStringRef)*MEMORY[0x1E4F1EE20]);
    if (Extension)
    {
      CFArrayRef v67 = (const __CFArray *)CFDictionaryGetValue(Extension, @"ccst");
      if (!v67) {
        goto LABEL_127;
      }
      CFArrayRef ValueAtIndex = v67;
      CFTypeID v69 = CFGetTypeID(v67);
      if (v69 == CFArrayGetTypeID())
      {
        CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(ValueAtIndex, 0);
        if (!ValueAtIndex)
        {
LABEL_127:
          if ((void)v160) {
            CFRelease((CFTypeRef)v160);
          }
          if (v47) {
            goto LABEL_254;
          }
          goto LABEL_130;
        }
      }
      else
      {
        CFTypeID v73 = CFGetTypeID(ValueAtIndex);
        if (v73 != CFDataGetTypeID()) {
          goto LABEL_127;
        }
      }
      if (CFDataGetLength(ValueAtIndex) != 8) {
        goto LABEL_127;
      }
      unsigned int v74 = bswap32(*((_DWORD *)CFDataGetBytePtr(ValueAtIndex) + 1));
      unsigned int v71 = v74 >> 31;
      int v72 = (v74 >> 26) & 0xF;
    }
    else
    {
      LOBYTE(v71) = 0;
      int v72 = -1;
    }
    *(unsigned char *)(a5 + 53) = v71;
    *(_DWORD *)(a5 + 56) = v72;
    goto LABEL_127;
  }
LABEL_130:
  uint64_t v158 = 0;
  if (!*(void *)(a5 + 40))
  {
    uint64_t appended = (uint64_t)_getImageCountForSequence(a5, &v158);
    if (appended)
    {
LABEL_253:
      uint64_t v47 = appended;
      goto LABEL_254;
    }
    uint64_t v132 = *MEMORY[0x1E4F1CF80];
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    *(void *)(a5 + 40) = Mutable;
    if (!Mutable)
    {
      uint64_t v47 = 4294950305;
      goto LABEL_254;
    }
    if (v158 >= 1)
    {
      uint64_t v77 = 0;
      uint64_t v78 = 0;
      uint64_t v79 = 0;
      uint64_t v131 = *MEMORY[0x1E4F346C0];
      uint64_t v128 = (void *)*MEMORY[0x1E4F1F1F8];
      CFStringRef key = (void *)*MEMORY[0x1E4F1F1A8];
      CFTypeRef v127 = (void *)*MEMORY[0x1E4F1F200];
      while (1)
      {
        *(void *)&long long v160 = 0;
        uint64_t appended = pthread_mutex_lock(*(pthread_mutex_t **)(a5 + 32));
        if (appended) {
          goto LABEL_253;
        }
        uint64_t v80 = _moveCursorToPosition(*(void *)(a5 + 16), (uint64_t *)(a5 + 24), v77);
        if (v80) {
          break;
        }
        uint64_t FigBaseObject = FigSampleCursorGetFigBaseObject();
        uint64_t v82 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v82) {
          uint64_t v83 = v82;
        }
        else {
          uint64_t v83 = 0;
        }
        uint64_t v84 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, long long *))(v83 + 48);
        if (!v84)
        {
          uint64_t v47 = 4294954514;
LABEL_149:
          pthread_mutex_unlock(*(pthread_mutex_t **)(a5 + 32));
          BOOL v85 = 0;
          int v88 = -1;
LABEL_150:
          int v89 = -1;
          goto LABEL_151;
        }
        uint64_t v80 = v84(FigBaseObject, v131, v132, &v160);
        if (v80) {
          break;
        }
        uint64_t v80 = pthread_mutex_unlock(*(pthread_mutex_t **)(a5 + 32));
        if (v80) {
          break;
        }
        *(void *)&long long value = 0;
        *(void *)&v154[0] = 0;
        int64_t v159 = 0;
        if ((void)v160)
        {
          CFDictionaryGetValueIfPresent((CFDictionaryRef)v160, key, (const void **)&value);
          CFDictionaryGetValueIfPresent((CFDictionaryRef)v160, v128, (const void **)v154);
          CFDictionaryGetValueIfPresent((CFDictionaryRef)v160, v127, (const void **)&v159);
        }
        BOOL v85 = FigCFEqual() == 0;
        CFBooleanRef v86 = (const __CFBoolean *)value;
        if ((void)value && (CFTypeID v87 = CFGetTypeID((CFTypeRef)value), v87 == CFBooleanGetTypeID())) {
          int v88 = CMPhotoCFBooleanGetValue(v86) != 0;
        }
        else {
          int v88 = -1;
        }
        uint64_t v47 = *(void *)&v154[0];
        if (!*(void *)&v154[0]) {
          goto LABEL_150;
        }
        CFTypeID v93 = CFGetTypeID(*(CFTypeRef *)&v154[0]);
        if (v93 != CFBooleanGetTypeID())
        {
          uint64_t v47 = 0;
          goto LABEL_150;
        }
        unsigned int v94 = CMPhotoCFBooleanGetValue((const __CFBoolean *)v47);
        uint64_t v47 = 0;
        int v89 = v94 != 0;
LABEL_151:
        if ((void)v160) {
          CFRelease((CFTypeRef)v160);
        }
        if (v47) {
          goto LABEL_254;
        }
        if (v77) {
          int v90 = 1;
        }
        else {
          int v90 = v85;
        }
        if (v90 != 1)
        {
          uint64_t appended = FigSignalErrorAt();
          if (appended) {
            goto LABEL_253;
          }
          goto LABEL_180;
        }
        uint64_t v91 = v77;
        uint64_t v92 = v77;
        if (!v85)
        {
          if (!*(unsigned char *)(a5 + 53) || *(_DWORD *)(a5 + 56) != 1) {
            goto LABEL_165;
          }
          if (v88 == 1)
          {
            uint64_t v91 = v79;
            uint64_t v92 = v78;
            goto LABEL_166;
          }
          if (!v88)
          {
            uint64_t v91 = v79;
            uint64_t v92 = v78;
            if (v89 == 1)
            {
              uint64_t v47 = 4294950194;
              goto LABEL_254;
            }
          }
          else
          {
LABEL_165:
            uint64_t v91 = v79;
            uint64_t v92 = v78;
          }
        }
LABEL_166:
        uint64_t appended = FigCFArrayAppendInt64();
        if (appended) {
          goto LABEL_253;
        }
        ++v77;
        uint64_t v78 = v92;
        uint64_t v79 = v91;
        if (v77 >= v158) {
          goto LABEL_180;
        }
      }
      uint64_t v47 = v80;
      goto LABEL_149;
    }
  }
LABEL_180:
  unint64_t v157 = 0;
  Int64AtIndedouble x = FigCFArrayGetInt64AtIndex();
  long long v60 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (!Int64AtIndex)
  {
    uint64_t v47 = 4294950194;
    goto LABEL_254;
  }
  uint64_t v64 = HIDWORD(v157);
  uint64_t v70 = (int)v157;
  BOOL v65 = (int)v157 != v134 && (v136 != (int)v157 || v136 == -1);
  if (*MEMORY[0x1E4F1EBA8] == 1)
  {
    kdebug_trace();
    goto LABEL_191;
  }
LABEL_194:
  if (v65)
  {
    if (v70 < 0)
    {
      if (v64 < v134)
      {
        do
        {
          uint64_t v97 = _decodeReferencePixelBuffer(v130, (uint64_t)v133, v64, a5);
          if (v97) {
            goto LABEL_197;
          }
        }
        while (v134 != ++v64);
      }
      *(unsigned char *)(a5 + 60) = 1;
    }
    else
    {
      uint64_t v97 = _decodeReferencePixelBuffer(v130, (uint64_t)v133, v70, a5);
      if (v97)
      {
LABEL_197:
        uint64_t v47 = v97;
LABEL_254:
        uint64_t v62 = v133;
        goto LABEL_255;
      }
    }
  }
  uint64_t v62 = v133;
  uint64_t v63 = CMPhotoDecompressionPluginDecode((uint64_t)v133);
  if (v63) {
    goto LABEL_258;
  }
  CFNumberRef Size = CMPhotoCFNumberCreateSize(v134);
  if (!Size)
  {
    uint64_t v47 = 4294950305;
LABEL_255:
    if (v62) {
      CMPhotoDecompressionPluginDispose(v62);
    }
    goto LABEL_233;
  }
  CFNumberRef v99 = Size;
  uint64_t v47 = CMPhotoDecompressionPluginSetAttachment((uint64_t)v133);
  CFRelease(v99);
  if (v47) {
    goto LABEL_255;
  }
  CMPhotoDecompressionPluginDispose(v133);
  if (*v60 == 1)
  {
    kdebug_trace();
    if (*v60 == 1) {
      kdebug_trace();
    }
  }
  uint64_t v47 = v148;
  if (!v148)
  {
    uint64_t v100 = (uint64_t)v153;
    CFTypeRef v135 = v152;
    uint64_t v101 = (__CVBuffer *)v147;
    uint64_t v102 = (const void *)*((void *)&v148 + 1);
    long long v104 = v149;
    CFTypeRef v103 = v150[0];
    unsigned int v105 = v150[1];
    unsigned int v106 = HIDWORD(v150[1]);
    unint64_t v108 = v137;
    unint64_t v107 = v138;
    *(void *)&long long value = 0;
    CMPhotoRemoveColorInformationGuessedBy((__CVBuffer *)v147);
    CMPhotoAddColorInformationToPixelBufferAccordingToFormat(v102, (const void *)v104, *((const void **)&v104 + 1), v103, v101);
    CMPhotoAddChromaLocationToPixelBufferAccordingToFormat(v105, v106, v101);
    uint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(v101);
    uint64_t v110 = PixelFormatType;
    if (BYTE8(v139)) {
      uint64_t v111 = DWORD1(v139);
    }
    else {
      uint64_t v111 = PixelFormatType;
    }
    unsigned int v112 = CMPhotoPixelBufferHasUnhandledIdentityMatrix(v101);
    uint64_t v114 = *(void *)&v140[24];
    uint64_t v113 = *(void *)&v140[32];
    CFTypeRef v115 = cf[1];
    long long v160 = *(_OWORD *)&v140[8];
    long long v161 = *(_OWORD *)&v140[24];
    char v116 = CMPhotoPixelBufferMemcpySupportedForBuffer(v101, &v160, 0, 0);
    if (!v115 && v111 == v110 && !v112 && v108 == v114 && v107 == v113 && (v116 & 1) != 0)
    {
      if (BYTE9(v143)) {
        uint64_t CVPixelBufferNotBackedByIOSurface = CMPhotoCreateCVPixelBufferNotBackedByIOSurface(*MEMORY[0x1E4F1CF80], v110, *(size_t *)&v140[24], *(size_t *)&v140[32], 0, 0, 0, 0, (CVPixelBufferRef *)&value);
      }
      else {
        uint64_t CVPixelBufferNotBackedByIOSurface = CMPhotoSurfacePoolCreatePixelBuffer(v135, v110, *(size_t *)&v140[24], *(size_t *)&v140[32], 1, 0, 0, 0, 0, 0, (CVPixelBufferRef *)&value);
      }
      uint64_t v47 = CVPixelBufferNotBackedByIOSurface;
      CFAllocatorRef v122 = v130;
      if (CVPixelBufferNotBackedByIOSurface) {
        goto LABEL_231;
      }
      long long v160 = *(_OWORD *)&v140[8];
      long long v161 = *(_OWORD *)&v140[24];
      uint64_t WrappedPixelBufferForType = CMPhotoPixelBufferCopyCropRectToOffset(v101, 1, (uint64_t *)&v160, (__CVBuffer *)value, 1, 0, 0, 0);
      if (WrappedPixelBufferForType)
      {
LABEL_230:
        uint64_t v47 = WrappedPixelBufferForType;
        goto LABEL_231;
      }
      CMPhotoPropagateColorPropertiesFromSourceBuffer(v101, (__CVBuffer *)value);
    }
    else
    {
      CFTypeRef v120 = cf[1];
      if (cf[1]) {
        CFTypeRef v120 = CFRetain(cf[1]);
      }
      *(void *)&long long value = v120;
      uint64_t WrappedPixelBufferForType = CMPhotoScaleAndRotateSessionTransformForSizeWithOptions(v100, v101, 0, BYTE9(v143) == 0, 1, v111, 0, 0, (double)*(unint64_t *)&v140[8], (double)*(unint64_t *)&v140[16], (double)*(unint64_t *)&v140[24], (double)*(unint64_t *)&v140[32], (double)v108, (double)v107, v117, v118, 1u, 0, BYTE1(v139),
                                    SBYTE2(v141),
                                    SBYTE3(v141),
                                    SBYTE4(v141),
                                    (__CVBuffer **)&value);
      CFAllocatorRef v122 = v130;
      if (WrappedPixelBufferForType) {
        goto LABEL_230;
      }
    }
    if (a8)
    {
      uint64_t WrappedPixelBufferForType = CMPhotoCreateWrappedPixelBufferForType(v122, (CVPixelBufferRef)value, BYTE8(v143), a7, a8);
      goto LABEL_230;
    }
    uint64_t v47 = 0;
LABEL_231:
    if ((void)value) {
      CFRelease((CFTypeRef)value);
    }
  }
LABEL_233:
  if (*((void *)&v148 + 1)) {
    CFRelease(*((CFTypeRef *)&v148 + 1));
  }
  uint64_t v123 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if ((void)v149) {
    CFRelease((CFTypeRef)v149);
  }
  if (*((void *)&v149 + 1)) {
    CFRelease(*((CFTypeRef *)&v149 + 1));
  }
  if (v150[0]) {
    CFRelease(v150[0]);
  }
  if (v147) {
    CFRelease(v147);
  }
  if (v153) {
    CFRelease(v153);
  }
  if (v152) {
    CFRelease(v152);
  }
  if (v151) {
    CFRelease(v151);
  }
  if (*v123 == 1)
  {
    kdebug_trace();
    if (*v123 == 1) {
      kdebug_trace();
    }
  }
  return v47;
}

uint64_t _moveCursorToPosition(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v12 = 0;
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(v8 + 176);
  if (!v9) {
    return 4294954514;
  }
  uint64_t v10 = a3 - v6;
  uint64_t result = v9(a1, v10, &v12);
  if (!result)
  {
    if (v12 == v10)
    {
      uint64_t result = 0;
      *a2 = a3;
    }
    else
    {
      return 4294950194;
    }
  }
  return result;
}

uint64_t _createSampleBufferFromSampleCursor(const __CFAllocator *a1, uint64_t a2, CMSampleBufferRef *a3)
{
  CFTypeRef v40 = 0;
  uint64_t v41 = 0;
  memset(&sampleTimingArray, 0, sizeof(sampleTimingArray));
  CMSampleBufferRef sbuf = 0;
  CMBlockBufferRef dataBuffer = 0;
  CFDictionaryRef theDict = 0;
  uint64_t v36 = 0;
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v33 = 0;
  sampleSizeArradouble y = 0;
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t *, size_t *, CFTypeRef *, void))(v7 + 144);
  if (!v8)
  {
LABEL_39:
    uint64_t v31 = 4294954514;
    goto LABEL_40;
  }
  uint64_t v9 = v8(a2, &v36, &sampleSizeArray, &v40, 0);
  if (v9) {
    goto LABEL_52;
  }
  if (!v40)
  {
    uint64_t v9 = FigSignalErrorAt();
    goto LABEL_52;
  }
  uint64_t FigBaseObject = FigSampleCursorGetFigBaseObject();
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  long long v13 = *(uint64_t (**)(uint64_t, void, void, CFDictionaryRef *))(v12 + 48);
  if (!v13) {
    goto LABEL_39;
  }
  uint64_t v9 = v13(FigBaseObject, *MEMORY[0x1E4F346C0], *MEMORY[0x1E4F1CF80], &theDict);
  if (v9) {
    goto LABEL_52;
  }
  sampleTimingArray.decodeTimeStamp = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v14) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = *(uint64_t (**)(uint64_t, CMTime *))(v15 + 40);
  if (!v16) {
    goto LABEL_39;
  }
  uint64_t v9 = v16(a2, &sampleTimingArray.presentationTimeStamp);
  if (v9) {
    goto LABEL_52;
  }
  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v17) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  uint64_t v19 = *(uint64_t (**)(uint64_t, CMSampleTimingInfo *))(v18 + 56);
  if (!v19) {
    goto LABEL_39;
  }
  uint64_t v9 = v19(a2, &sampleTimingArray);
  if (v9) {
    goto LABEL_52;
  }
  uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v20) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = 0;
  }
  uint64_t v22 = *(uint64_t (**)(uint64_t, const opaqueCMFormatDescription **))(v21 + 160);
  if (!v22) {
    goto LABEL_39;
  }
  uint64_t v9 = v22(a2, &v41);
  if (v9)
  {
LABEL_52:
    uint64_t v31 = v9;
    goto LABEL_40;
  }
  CFTypeRef v23 = v40;
  size_t v24 = sampleSizeArray;
  uint64_t v25 = v36;
  uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v26) {
    uint64_t v27 = v26;
  }
  else {
    uint64_t v27 = 0;
  }
  uint64_t v28 = *(uint64_t (**)(CFTypeRef, size_t, uint64_t, CMBlockBufferRef *, uint64_t *))(v27 + 32);
  if (!v28) {
    goto LABEL_39;
  }
  uint64_t v9 = v28(v23, v24, v25, &dataBuffer, &v33);
  if (v9) {
    goto LABEL_52;
  }
  uint64_t v9 = CMSampleBufferCreate(a1, dataBuffer, 1u, 0, 0, v41, 1, 1, &sampleTimingArray, 1, &sampleSizeArray, &sbuf);
  if (v9) {
    goto LABEL_52;
  }
  SampleAttachmentsArradouble y = CMSampleBufferGetSampleAttachmentsArray(sbuf, 1u);
  if (SampleAttachmentsArray)
  {
    CFArrayRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
    if (ValueAtIndex && theDict) {
      CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)_appendAttributesToDictionary, ValueAtIndex);
    }
    uint64_t v31 = 0;
    if (a3)
    {
      *a3 = sbuf;
      CMSampleBufferRef sbuf = 0;
    }
  }
  else
  {
    uint64_t v31 = 4294950194;
  }
LABEL_40:
  if (theDict) {
    CFRelease(theDict);
  }
  if (v41) {
    CFRelease(v41);
  }
  if (v40) {
    CFRelease(v40);
  }
  if (dataBuffer) {
    CFRelease(dataBuffer);
  }
  if (sbuf) {
    CFRelease(sbuf);
  }
  return v31;
}

void _appendAttributesToDictionary(void *key, void *value, CFMutableDictionaryRef theDict)
{
  if (theDict) {
    CFDictionarySetValue(theDict, key, value);
  }
}

uint64_t _decodeReferencePixelBuffer(const __CFAllocator *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeRef cf = 0;
  uint64_t SampleBuffer = _moveSampleCursorToIndexAndCreateSampleBuffer(a1, a3, a4, (CMSampleBufferRef *)&cf);
  if (!SampleBuffer) {
    uint64_t SampleBuffer = CMPhotoDecompressionPluginDecode(a2);
  }
  uint64_t v6 = SampleBuffer;
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

uint64_t _copySequenceReaderColor(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, _DWORD *a7, _DWORD *a8)
{
  CMFormatDescriptionRef desc = 0;
  if (!a2) {
    return 4294950306;
  }
  if (*(unsigned char *)(a2 + 64)) {
    goto LABEL_17;
  }
  uint64_t v16 = _copyFormatDescriptionForTrackReader(*(void *)(a2 + 8), &desc);
  if (!v16)
  {
    FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(desc);
    uint64_t v18 = desc;
    if (MediaSubType == 1635135537)
    {
      v26[0] = MEMORY[0x1E4F143A8];
      v26[1] = *(void *)"";
      v26[2] = ___copySequenceReaderColor_block_invoke;
      v26[3] = &__block_descriptor_tmp_23_0;
      v26[4] = a1;
      v26[5] = a2;
      CFMutableArrayRef v28 = 0;
      uint64_t v16 = CMPhotoDecompressionContainerCreateCorrectedAV1FormatDescription(desc, (uint64_t)v26, 0, &v28);
      if (v16) {
        goto LABEL_40;
      }
      if (desc) {
        CFRelease(desc);
      }
      uint64_t v18 = v28;
      CMFormatDescriptionRef desc = v28;
    }
    BOOL v19 = *(_DWORD *)a2 == 1635088502;
    CFMutableArrayRef v28 = 0;
    if (CMPhotoCopyImageBitDepthFromFormatDescription(v18, &v28) != -12783)
    {
      if (!v28)
      {
        BOOL v19 = 0;
        goto LABEL_15;
      }
      BOOL v19 = CFArrayGetCount(v28) == 1;
    }
    if (v28) {
      CFRelease(v28);
    }
LABEL_15:
    uint64_t v16 = CMPhotoDecompressionContainerCopyColorInfoFromFormatDescription(desc, 0, 0, v19, 1, 0, (void *)(a2 + 72), (CFTypeRef *)(a2 + 80), (CFTypeRef *)(a2 + 88), (CFTypeRef *)(a2 + 96), (int *)(a2 + 112), (int *)(a2 + 116), 0);
    if (!v16)
    {
      *(unsigned char *)(a2 + 64) = 1;
LABEL_17:
      if (a3)
      {
        CFTypeRef v20 = *(CFTypeRef *)(a2 + 72);
        if (v20) {
          CFTypeRef v20 = CFRetain(v20);
        }
        *a3 = v20;
      }
      if (a4)
      {
        CFTypeRef v21 = *(CFTypeRef *)(a2 + 80);
        if (v21) {
          CFTypeRef v21 = CFRetain(v21);
        }
        *a4 = v21;
      }
      if (a5)
      {
        CFTypeRef v22 = *(CFTypeRef *)(a2 + 88);
        if (v22) {
          CFTypeRef v22 = CFRetain(v22);
        }
        *a5 = v22;
      }
      if (a6)
      {
        CFTypeRef v23 = *(CFTypeRef *)(a2 + 96);
        if (v23) {
          CFTypeRef v23 = CFRetain(v23);
        }
        *a6 = v23;
      }
      if (a7) {
        *a7 = *(_DWORD *)(a2 + 112);
      }
      uint64_t v24 = 0;
      if (a8) {
        *a8 = *(_DWORD *)(a2 + 116);
      }
      goto LABEL_37;
    }
  }
LABEL_40:
  uint64_t v24 = v16;
LABEL_37:
  if (desc) {
    CFRelease(desc);
  }
  return v24;
}

void _decoder_plugin_callback_simple(int a1, int a2, CFTypeRef cf, _DWORD *a4, void *a5)
{
  *a4 = a2;
  if (!a2 && a5)
  {
    if (cf) {
      CFTypeRef v6 = CFRetain(cf);
    }
    else {
      CFTypeRef v6 = 0;
    }
    *a5 = v6;
  }
}

uint64_t ___copySequenceReaderColor_block_invoke(uint64_t a1, CMSampleBufferRef *a2)
{
  return _moveSampleCursorToIndexAndCreateSampleBuffer(*(const __CFAllocator **)(a1 + 32), 0, *(void *)(a1 + 40), a2);
}

uint64_t _getReferenceSequenceGeometry(const void *a1, void *a2, void *a3, _DWORD *a4)
{
  long long v8 = 0u;
  long long v9 = 0u;
  uint64_t result = _getImageGeometryFromTrackReader(a1, &v8);
  if (!result)
  {
    if (a4) {
      *a4 = 1;
    }
    if (a2) {
      *a2 = v9;
    }
    if (a3) {
      *a3 = *((void *)&v9 + 1);
    }
  }
  return result;
}

uint64_t _getAuxiliaryTypeInfoForIndex(uint64_t a1, CFIndex idx, _DWORD *a3, const __CFString **a4)
{
  CMFormatDescriptionRef desc = 0;
  CFArrayRef Count = *(const __CFArray **)(a1 + 96);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  if ((uint64_t)Count <= idx)
  {
    uint64_t v10 = FigSignalErrorAt();
    goto LABEL_24;
  }
  CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 96), idx);
  uint64_t v10 = _copyFormatDescriptionForTrackReader(ValueAtIndex[1], &desc);
  if (v10)
  {
LABEL_24:
    uint64_t v15 = v10;
LABEL_17:
    CFStringRef v12 = 0;
    goto LABEL_18;
  }
  CFDictionaryRef Extensions = CMFormatDescriptionGetExtensions(desc);
  if (!Extensions
    || (long long value = 0,
        LODWORD(Extensions) = CFDictionaryGetValueIfPresent(Extensions, (const void *)*MEMORY[0x1E4F1EE20], (const void **)&value), !Extensions)|| (CFDataRef data = 0, LODWORD(Extensions) = CFDictionaryGetValueIfPresent((CFDictionaryRef)value, @"auxi", (const void **)&data), !Extensions))
  {
    CFStringRef v12 = 0;
    if (!a3)
    {
LABEL_15:
      uint64_t v15 = 0;
      if (!a4) {
        goto LABEL_18;
      }
      *a4 = v12;
      goto LABEL_17;
    }
LABEL_14:
    *a3 = Extensions;
    goto LABEL_15;
  }
  CFStringRef v12 = CFStringCreateFromExternalRepresentation((CFAllocatorRef)*MEMORY[0x1E4F1CF90], data, 0x8000100u);
  if (v12)
  {
    long long v13 = (UniChar *)malloc_type_calloc(1uLL, 2uLL, 0x1000040BDFB0063uLL);
    *long long v13 = 49;
    v20.locatiouint64_t n = CFStringGetLength(v12) - 1;
    v20.CFIndex length = 1;
    CFStringGetCharacters(v12, v20, v13);
    if (!*v13)
    {
      CFDictionaryRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v12);
      v21.locatiouint64_t n = CFStringGetLength(v12) - 1;
      v21.CFIndex length = 1;
      CFStringDelete(MutableCopy, v21);
      CFRelease(v12);
      CFStringRef v12 = MutableCopy;
    }
    free(v13);
    LODWORD(Extensions) = CMPhotoGetAuxiliaryImageTypeFromURN();
    if (!a3) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  uint64_t v15 = FigSignalErrorAt();
LABEL_18:
  if (desc) {
    CFRelease(desc);
  }
  if (v12) {
    CFRelease(v12);
  }
  return v15;
}

uint64_t _createOutputBufferAttributesForFormatDescription(uint64_t a1, CMVideoFormatDescriptionRef videoDesc, const __CFDictionary *a3, CFMutableDictionaryRef *a4)
{
  if (!videoDesc) {
    return 4294950306;
  }
  uint64_t Dimensions = (uint64_t)CMVideoFormatDescriptionGetDimensions(videoDesc);
  unint64_t v24 = 0;
  uint64_t v25 = 0;
  memset(v15, 0, sizeof(v15));
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  uint64_t v23 = 0;
  uint64_t v8 = CMPhotoDecompressionContainerParseOptions(a1, a3, (int)Dimensions, Dimensions >> 32, (uint64_t)v15);
  if (v8) {
    return v8;
  }
  CMPhotoPixelBufferConstrainSizeToMaxSideLength(*((unint64_t *)&v16 + 1), v17, *((unint64_t *)&v17 + 1), 0, 0, v18, 0, &v24, 0, 0);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return 4294950305;
  }
  CFMutableDictionaryRef v10 = Mutable;
  uint64_t v11 = CMPhotoCFDictionarySetSize(Mutable, *MEMORY[0x1E4F24E10], v24);
  if (v11 || (uint64_t v11 = CMPhotoCFDictionarySetSize(v10, *MEMORY[0x1E4F24D08], v25), v11))
  {
    uint64_t v13 = v11;
LABEL_10:
    CFRelease(v10);
    return v13;
  }
  uint64_t v12 = CMPhotoCFDictionarySetSize(v10, *MEMORY[0x1E4F24C98], 16);
  uint64_t v13 = v12;
  if (!a4 || v12) {
    goto LABEL_10;
  }
  *a4 = v10;
  return v13;
}

uint64_t _createDescriptionOfFrameForIndex(uint64_t a1, uint64_t a2, uint64_t a3, const __CFAllocator *a4, int a5, __CFDictionary **a6, __CFDictionary **a7)
{
  CFTypeRef v75 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v73 = 0;
  CFTypeRef v74 = 0;
  CMFormatDescriptionRef desc = 0;
  CGColorSpaceRef space = 0;
  CFTypeRef v70 = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a4, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    uint64_t v33 = 4294950305;
    goto LABEL_73;
  }
  uint64_t v13 = Mutable;
  CFDictionaryRef v79 = 0;
  memset(&v80, 0, sizeof(v80));
  capacity[1] = 0;
  *(void *)&long long v69 = 0;
  capacity[0] = 0;
  uint64_t v14 = pthread_mutex_lock(*(pthread_mutex_t **)(a2 + 32));
  if (v14)
  {
    uint64_t v33 = v14;
    goto LABEL_32;
  }
  uint64_t v17 = _moveCursorToPosition(*(void *)(a2 + 16), (uint64_t *)(a2 + 24), a3);
  if (v17) {
    goto LABEL_153;
  }
  uint64_t v18 = *(void *)(a2 + 16);
  uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v19) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = 0;
  }
  long long v21 = *(uint64_t (**)(uint64_t, CMTime *))(v20 + 40);
  if (!v21) {
    goto LABEL_30;
  }
  uint64_t v17 = v21(v18, &v80);
  if (v17) {
    goto LABEL_153;
  }
  uint64_t v22 = *(void *)(a2 + 16);
  uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v23) {
    uint64_t v24 = v23;
  }
  else {
    uint64_t v24 = 0;
  }
  uint64_t v25 = *(uint64_t (**)(uint64_t, CFIndex *))(v24 + 56);
  if (!v25) {
    goto LABEL_30;
  }
  uint64_t v17 = v25(v22, capacity);
  if (v17)
  {
LABEL_153:
    uint64_t v33 = v17;
    goto LABEL_31;
  }
  uint64_t FigBaseObject = FigSampleCursorGetFigBaseObject();
  uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v28 = v27 ? v27 : 0;
  uint64_t v29 = *(uint64_t (**)(uint64_t, void, void, const __CFDictionary **))(v28 + 48);
  if (!v29)
  {
LABEL_30:
    uint64_t v33 = 4294954514;
LABEL_31:
    pthread_mutex_unlock(*(pthread_mutex_t **)(a2 + 32));
LABEL_32:
    CFDictionaryRef v32 = 0;
    CFDictionaryRef v31 = 0;
    goto LABEL_33;
  }
  CFAllocatorRef v30 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v17 = v29(FigBaseObject, *MEMORY[0x1E4F346C0], *MEMORY[0x1E4F1CF80], &v79);
  if (v17) {
    goto LABEL_153;
  }
  uint64_t v17 = pthread_mutex_unlock(*(pthread_mutex_t **)(a2 + 32));
  if (v17) {
    goto LABEL_153;
  }
  *(_OWORD *)&time.CFIndex value = *(_OWORD *)capacity;
  time.epoch = v69;
  CFDictionaryRef v31 = CMTimeCopyAsDictionary(&time, v30);
  if (v31) {
    CFDictionarySetValue(v13, @"SequenceSampleDuration", v31);
  }
  CMTime time = v80;
  CFDictionaryRef v32 = CMTimeCopyAsDictionary(&time, v30);
  if (v32) {
    CFDictionarySetValue(v13, @"SequenceSamplePTS", v32);
  }
  if (v79)
  {
    LOBYTE(time.value) = 0;
    if (CMPhotoCFDictionaryGetBooleanIfPresent(v79, (const void *)*MEMORY[0x1E4F1F1A8], &time)) {
      CMPhotoCFDictionarySetBoolean(v13, @"SequenceSampleDependsOnOthers", LOBYTE(time.value));
    }
    unsigned __int8 v77 = 0;
    if (CMPhotoCFDictionaryGetBooleanIfPresent(v79, (const void *)*MEMORY[0x1E4F1F1F8], &v77)) {
      CMPhotoCFDictionarySetBoolean(v13, @"SequenceSampleIsDependedOnByOthers", v77);
    }
    uint64_t v33 = 0;
LABEL_33:
    if (v79) {
      CFRelease(v79);
    }
    if (v31) {
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  uint64_t v33 = 0;
  if (v31) {
LABEL_36:
  }
    CFRelease(v31);
LABEL_37:
  if (v32) {
    CFRelease(v32);
  }
  if (v33)
  {
    CFMutableArrayRef v48 = 0;
    CFMutableArrayRef v47 = 0;
    long long v46 = 0;
    uint64_t v45 = 0;
    uint64_t v34 = 0;
    goto LABEL_62;
  }
  if (a3)
  {
    uint64_t v34 = 0;
    goto LABEL_56;
  }
  uint64_t v34 = CFDictionaryCreateMutable(a4, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v34)
  {
    CFMutableArrayRef v48 = 0;
    CFMutableArrayRef v47 = 0;
    long long v46 = 0;
    uint64_t v45 = 0;
    uint64_t v33 = 4294950305;
    goto LABEL_62;
  }
  *(_OWORD *)CFIndex capacity = 0u;
  long long v69 = 0u;
  uint64_t ImageGeometryFromTrackReader = _getImageGeometryFromTrackReader(*(CFTypeRef *)(a2 + 8), capacity);
  if (ImageGeometryFromTrackReader) {
    goto LABEL_157;
  }
  uint64_t v36 = v34;
  v81.double width = (double)(unint64_t)v69;
  v81.double height = (double)*((unint64_t *)&v69 + 1);
  DictionaryRepresentatiouint64_t n = CGSizeCreateDictionaryRepresentation(v81);
  if (!DictionaryRepresentation)
  {
    uint64_t v33 = 4294950305;
LABEL_161:
    uint64_t v34 = v36;
    goto LABEL_162;
  }
  CFDictionaryRef v38 = DictionaryRepresentation;
  CFDictionarySetValue(v36, @"Dimensions", DictionaryRepresentation);
  CFRelease(v38);
  uint64_t v39 = _copyFormatDescriptionForTrackReader(*(void *)(a2 + 8), &desc);
  if (v39)
  {
    uint64_t v33 = v39;
    goto LABEL_161;
  }
  v80.CFIndex value = 0;
  uint64_t v40 = CMPhotoCopyImageBitDepthFromFormatDescription(desc, (CFMutableArrayRef *)&v80);
  uint64_t v34 = v36;
  if (v40 != -12783)
  {
    uint64_t v33 = v40;
    if (v40)
    {
LABEL_162:
      CFMutableArrayRef v48 = 0;
      CFMutableArrayRef v47 = 0;
      long long v46 = 0;
      uint64_t v45 = 0;
      goto LABEL_62;
    }
    CFDictionarySetValue(v36, @"BitDepth", (const void *)v80.value);
    if (v80.value) {
      CFRelease((CFTypeRef)v80.value);
    }
  }
  uint64_t ImageGeometryFromTrackReader = _copySequenceReaderColor(*(void *)(a1 + 40), a2, &space, 0, 0, 0, 0, 0);
  if (ImageGeometryFromTrackReader) {
    goto LABEL_157;
  }
  CFStringRef v41 = CGColorSpaceCopyName(space);
  if (v41)
  {
    CFStringRef v42 = v41;
    CFDictionarySetValue(v36, @"NamedColorSpace", v41);
    CFStringRef v43 = v42;
    uint64_t v34 = v36;
    CFRelease(v43);
  }
  else
  {
    uint64_t v34 = v36;
    if (space) {
      CFDictionarySetValue(v36, @"ColorSpace", space);
    }
  }
  FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(desc);
  uint64_t ImageGeometryFromTrackReader = CMPhotoCFDictionarySetInt32(v34, @"CodecType", MediaSubType);
  if (ImageGeometryFromTrackReader)
  {
LABEL_157:
    uint64_t v33 = ImageGeometryFromTrackReader;
    goto LABEL_162;
  }
LABEL_56:
  if (a5)
  {
    uint64_t v45 = 0;
    long long v46 = 0;
    CFMutableArrayRef v47 = 0;
    CFMutableArrayRef v48 = 0;
    CFTypeRef v50 = a7;
    long long v49 = a6;
    if (!a7) {
      goto LABEL_59;
    }
    goto LABEL_58;
  }
  capacity[0] = 0;
  uint64_t ThumbnailCountForIndex_2 = _getThumbnailCountForIndex_2(a1, v15, v16, capacity);
  if (ThumbnailCountForIndex_2)
  {
    uint64_t v33 = ThumbnailCountForIndex_2;
    uint64_t v45 = 0;
    long long v46 = 0;
LABEL_150:
    CFMutableArrayRef v47 = 0;
    CFMutableArrayRef v48 = 0;
    goto LABEL_61;
  }
  BOOL v65 = v34;
  CFIndex v54 = capacity[0];
  if (capacity[0] >= 1)
  {
    CFIndex v55 = 0;
    long long v46 = 0;
    uint64_t v45 = 0;
    long long v56 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    while (1)
    {
      if (!v45)
      {
        uint64_t v45 = CFArrayCreateMutable(a4, v54, v56);
        if (!v45) {
          break;
        }
      }
      CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 88), v55);
      if (v74)
      {
        CFRelease(v74);
        CFTypeRef v74 = 0;
      }
      if (v73)
      {
        CFRelease(v73);
        CFTypeRef v73 = 0;
      }
      uint64_t v58 = _createDescriptionOfFrameForIndex(a1, ValueAtIndex, a3, a4, 1, &v73, &v74);
      if (v58)
      {
        uint64_t v33 = v58;
        goto LABEL_149;
      }
      if (v74) {
        CFArrayAppendValue(v45, v74);
      }
      if (!a3)
      {
        CFTypeRef v59 = v73;
        if (v73)
        {
          if (!v46)
          {
            long long v46 = CFArrayCreateMutable(a4, capacity[0], v56);
            if (!v46) {
              break;
            }
            CFTypeRef v59 = v73;
          }
          CFArrayAppendValue(v46, v59);
        }
      }
      ++v55;
      CFIndex v54 = capacity[0];
      if (v55 >= capacity[0]) {
        goto LABEL_109;
      }
    }
    uint64_t v33 = 4294950305;
LABEL_149:
    uint64_t v34 = v65;
    goto LABEL_150;
  }
  uint64_t v45 = 0;
  long long v46 = 0;
LABEL_109:
  v80.CFIndex value = 0;
  uint64_t AuxiliaryImageCountForIndex_2 = _getAuxiliaryImageCountForIndex_2(a1, v54, v53, &v80.value);
  if (AuxiliaryImageCountForIndex_2)
  {
    uint64_t v33 = AuxiliaryImageCountForIndex_2;
    CFMutableArrayRef v47 = 0;
    CFMutableArrayRef v48 = 0;
    uint64_t v34 = v65;
    goto LABEL_61;
  }
  CFIndex value = v80.value;
  if (v80.value < 1)
  {
    CFMutableArrayRef v47 = 0;
    CFMutableArrayRef v48 = 0;
LABEL_133:
    if (v45) {
      CFDictionarySetValue(v13, @"ThumbnailImages", v45);
    }
    CFTypeRef v50 = a7;
    long long v49 = a6;
    if (v47) {
      CFDictionarySetValue(v13, @"AuxiliaryImages", v47);
    }
    if (v46) {
      CFDictionarySetValue(v65, @"ThumbnailImages", v46);
    }
    if (v48)
    {
      uint64_t v34 = v65;
      CFDictionarySetValue(v65, @"AuxiliaryImages", v48);
      if (!a7) {
        goto LABEL_59;
      }
    }
    else
    {
      uint64_t v34 = v65;
      if (!a7)
      {
LABEL_59:
        uint64_t v33 = 0;
        if (v49)
        {
          CFTypeRef *v49 = v34;
          uint64_t v34 = 0;
        }
        goto LABEL_61;
      }
    }
LABEL_58:
    *CFTypeRef v50 = v13;
    uint64_t v13 = 0;
    goto LABEL_59;
  }
  CFIndex v62 = 0;
  CFMutableArrayRef v48 = 0;
  CFMutableArrayRef v47 = 0;
  while (1)
  {
    LODWORD(time.value) = 0;
    if (!v47)
    {
      CFMutableArrayRef v47 = CFArrayCreateMutable(a4, value, MEMORY[0x1E4F1D510]);
      if (!v47) {
        break;
      }
    }
    uint64_t v63 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 96), v62);
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    if (v75)
    {
      CFRelease(v75);
      CFTypeRef v75 = 0;
    }
    AuxiliaryTypeInfoForIndedouble x = _createDescriptionOfFrameForIndex(a1, v63, a3, a4, 2, &v75, &cf);
    if (AuxiliaryTypeInfoForIndex)
    {
LABEL_146:
      uint64_t v33 = AuxiliaryTypeInfoForIndex;
      goto LABEL_152;
    }
    if (cf) {
      CFArrayAppendValue(v47, cf);
    }
    if (!a3 && v75)
    {
      if (!v48)
      {
        CFMutableArrayRef v48 = CFArrayCreateMutable(a4, v80.value, MEMORY[0x1E4F1D510]);
        if (!v48) {
          break;
        }
      }
      AuxiliaryTypeInfoForIndedouble x = _getAuxiliaryTypeInfoForIndex(a1, v62, &time, (const __CFString **)&v70);
      if (AuxiliaryTypeInfoForIndex) {
        goto LABEL_146;
      }
      AuxiliaryTypeInfoForIndedouble x = CMPhotoCFDictionarySetInt((__CFDictionary *)v75, @"AuxiliaryType", time.value);
      if (AuxiliaryTypeInfoForIndex) {
        goto LABEL_146;
      }
      if (v70) {
        CFDictionarySetValue((CFMutableDictionaryRef)v75, @"AuxiliaryTypeURN", v70);
      }
      CFArrayAppendValue(v48, v75);
    }
    ++v62;
    CFIndex value = v80.value;
    if (v62 >= v80.value) {
      goto LABEL_133;
    }
  }
  uint64_t v33 = 4294950305;
LABEL_152:
  uint64_t v34 = v65;
LABEL_61:
  if (v13) {
LABEL_62:
  }
    CFRelease(v13);
  if (v34) {
    CFRelease(v34);
  }
  if (v45) {
    CFRelease(v45);
  }
  if (v46) {
    CFRelease(v46);
  }
  if (v47) {
    CFRelease(v47);
  }
  if (v48) {
    CFRelease(v48);
  }
LABEL_73:
  if (cf) {
    CFRelease(cf);
  }
  if (v75) {
    CFRelease(v75);
  }
  if (v74) {
    CFRelease(v74);
  }
  if (v73) {
    CFRelease(v73);
  }
  if (space) {
    CFRelease(space);
  }
  if (desc) {
    CFRelease(desc);
  }
  if (v70) {
    CFRelease(v70);
  }
  return v33;
}

uint64_t CMPhotoDecompressionPluginSetAttachment(uint64_t a1)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1) {
    uint64_t v2 = *(void *)(a1 + 40);
  }
  else {
    uint64_t v2 = 0;
  }
  if (!*(void *)(v2 + 64)) {
    return 4294950302;
  }
  if (v1) {
    uint64_t v3 = *(void *)(a1 + 40);
  }
  else {
    uint64_t v3 = 0;
  }
  return (*(uint64_t (**)(void))(v3 + 64))();
}

uint64_t CMPhotoDecompressionPluginCopyAttachments(uint64_t a1)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1) {
    uint64_t v2 = *(void *)(a1 + 40);
  }
  else {
    uint64_t v2 = 0;
  }
  if (!*(void *)(v2 + 72)) {
    return 4294950302;
  }
  if (v1) {
    uint64_t v3 = *(void *)(a1 + 40);
  }
  else {
    uint64_t v3 = 0;
  }
  return (*(uint64_t (**)(void))(v3 + 72))();
}

uint64_t __CMPhotoDecompressionUtilityGetNativePixelFormatFromFormatDescription_block_invoke(uint64_t a1, void *a2)
{
  CFTypeRef v3 = *(CFTypeRef *)(a1 + 32);
  if (v3) {
    CFTypeRef v3 = CFRetain(v3);
  }
  *a2 = v3;
  return 0;
}

uint64_t CMPhotoReleaseHardwareResources()
{
  CMPhotoSurfacePoolFlushCaches(0, 1);
  CMPhotoScaleAndRotateSessionDiscardCaches(0, v0);
  return CMPhotoCodecSessionPoolFlush(0, 3);
}

uint64_t CMPhotoComputePSNRHVSForPixelBuffer(__CVBuffer *a1, __CVBuffer *a2, uint64_t a3, unsigned int a4, double *a5, CVPixelBufferRef *a6)
{
  CVPixelBufferRef pixelBufferOut = 0;
  CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v12 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  uint64_t v13 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v15 = CFDictionaryCreateMutable(v11, 0, v12, v13);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24D20], v15);
  uint64_t v114 = a2;
  CVPixelBufferRef pixelBuffer = a1;
  if (CMPhotoPixelBufferHasCLAP(a1) || CMPhotoPixelBufferHasCLAP(a2) || !a4)
  {
    FigSignalErrorAt();
    uint64_t v83 = 0;
    goto LABEL_90;
  }
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (PixelFormatType != CVPixelBufferGetPixelFormatType(a2)
    || (int v17 = CVPixelBufferGetPixelFormatType(a2),
        uint64_t v118 = 0,
        uint64_t v119 = 0,
        CMPhotoGetPixelBufferCLAP(a1, 0, 0, &v118, &v119),
        unint64_t v116 = 0,
        unint64_t v117 = 0,
        CMPhotoGetPixelBufferCLAP(a2, 0, 0, &v116, &v117),
        v118 != v116)
    || v119 != v117)
  {
    uint64_t v83 = FigSignalErrorAt();
LABEL_90:
    long long v21 = 0;
    int v38 = 0;
    int v97 = 0;
    double v22 = 0.0;
    if (v15) {
      goto LABEL_78;
    }
    goto LABEL_79;
  }
  CFAllocatorRef v109 = v11;
  uint64_t v111 = Mutable;
  unsigned int v112 = a5;
  if (v118 / a4 <= 1) {
    size_t v18 = 1;
  }
  else {
    size_t v18 = v118 / a4;
  }
  if (v119 / a4 <= 1) {
    size_t v19 = 1;
  }
  else {
    size_t v19 = v119 / a4;
  }
  uint64_t v20 = (long double *)malloc_type_calloc((v19 * v18), 8uLL, 0x100004000313F17uLL);
  long long v21 = v20;
  double v22 = 0.0;
  if (!v20)
  {
    int v38 = 0;
    int v97 = 0;
    uint64_t v83 = 4294950305;
LABEL_66:
    CFMutableDictionaryRef Mutable = v111;
    a5 = v112;
    if (!v15) {
      goto LABEL_79;
    }
LABEL_78:
    CFRelease(v15);
    goto LABEL_79;
  }
  uint64_t v110 = v15;
  int v23 = 0;
  do
  {
    uint64_t v24 = 0;
    size_t v25 = v18;
    do
    {
      v20[(v23 * v18 + v24++)] = 0.0;
      --v25;
    }
    while (v25);
    ++v23;
  }
  while (v23 != v19);
  unint64_t v108 = a6;
  int v26 = CMPhotoPixelFormatContainsYCbCr(v17);
  int v27 = CMPhotoPixelFormatContainsRGB(v17);
  int v28 = CMPhotoPixelFormatContainsGrayScale(v17);
  uint64_t v29 = CVPixelBufferGetPixelFormatType(a2);
  BitDepthForPixeluint64_t Format = CMPhotoGetBitDepthForPixelFormat(v29);
  OSType v30 = CVPixelBufferGetPixelFormatType(a2);
  int BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(v30);
  uint64_t v32 = CVPixelBufferLockBaseAddress(pixelBuffer, 0);
  if (v32)
  {
    uint64_t v83 = v32;
    int v38 = 0;
    int v97 = 0;
LABEL_77:
    CFMutableDictionaryRef Mutable = v111;
    a5 = v112;
    CFMutableDictionaryRef v15 = v110;
    if (!v110) {
      goto LABEL_79;
    }
    goto LABEL_78;
  }
  uint64_t v33 = CVPixelBufferLockBaseAddress(a2, 0);
  if (v33)
  {
    uint64_t v83 = v33;
    int v38 = 0;
    goto LABEL_76;
  }
  if (v28)
  {
    if ((v17 - 1278226736) <= 6 && ((1 << (v17 - 48)) & 0x45) != 0)
    {
      char v34 = 16 - BitDepthForPixelFormat;
      goto LABEL_31;
    }
    if (v17 == 1278226488)
    {
      char v34 = 0;
LABEL_31:
      uint64_t v36 = CVPixelBufferLockBaseAddress(pixelBuffer, 0);
      if (!v36)
      {
        uint64_t v37 = CVPixelBufferLockBaseAddress(a2, 0);
        int v38 = 1;
        if (!v37)
        {
          size_t v39 = CVPixelBufferGetBytesPerRow(a2) / BytesPerPixelForPixelFormat;
          BaseAddress = CVPixelBufferGetBaseAddress(a2);
          size_t v41 = CVPixelBufferGetBytesPerRow(pixelBuffer) / BytesPerPixelForPixelFormat;
          CFStringRef v42 = CVPixelBufferGetBaseAddress(pixelBuffer);
          double v43 = calc_psnrhvs((uint64_t)BaseAddress, v39, (uint64_t)v42, v41, BitDepthForPixelFormat, v116, v117, a4, 1, v34, (uint64_t)&csf_y, (uint64_t)v21, v18);
          double v44 = log10(v43);
          int v45 = 0;
          long long v46 = v108;
          do
          {
            int v47 = 0;
            size_t v48 = v18;
            do
            {
              v21[(v45 * v18 + v47)] = log10(v21[(v45 * v18 + v47)]) * -10.0;
              ++v47;
              --v48;
            }
            while (v48);
            ++v45;
          }
          while (v45 != v19);
          double v22 = v44 * -10.0;
          goto LABEL_59;
        }
        uint64_t v83 = v37;
        goto LABEL_76;
      }
      goto LABEL_74;
    }
LABEL_72:
    FigSignalErrorAt();
    uint64_t v83 = 0;
LABEL_75:
    int v38 = 1;
LABEL_76:
    int v97 = 1;
    goto LABEL_77;
  }
  if (v26)
  {
    if (v17 > 2016686639)
    {
      if (v17 != 2019963440 && v17 != 2016686640) {
        goto LABEL_72;
      }
      char v35 = 6;
    }
    else
    {
      char v35 = 0;
      if (v17 != 875704422 && v17 != 875704438) {
        goto LABEL_72;
      }
    }
    char v66 = v35;
    unint64_t v103 = v116 >> 1;
    unint64_t v105 = v117 >> 1;
    size_t v101 = CVPixelBufferGetBytesPerRowOfPlane(a2, 0) / BytesPerPixelForPixelFormat;
    unint64_t v67 = 2 * BytesPerPixelForPixelFormat;
    size_t v102 = CVPixelBufferGetBytesPerRowOfPlane(v114, 1uLL) / v67;
    BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(v114, 0);
    uint64_t v100 = CVPixelBufferGetBaseAddressOfPlane(v114, 1uLL);
    size_t v68 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0) / BytesPerPixelForPixelFormat;
    size_t v107 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL) / v67;
    long long v69 = CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
    CFTypeRef v70 = CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
    int v71 = a4;
    uint64_t v72 = (uint64_t)v70;
    uint64_t v73 = (uint64_t)v69;
    LODWORD(v69) = v71;
    double v74 = calc_psnrhvs((uint64_t)BaseAddressOfPlane, v101, v73, v68, BitDepthForPixelFormat, v116, v117, v71, 1, v66, (uint64_t)&csf_y, (uint64_t)v21, v18);
    double v75 = calc_psnrhvs((uint64_t)v100, v102, v72, v107, BitDepthForPixelFormat, v103, v105, (int)v69, 2, v66, (uint64_t)&csf_cb420, 0, 0);
    double v76 = calc_psnrhvs((uint64_t)v100 + BytesPerPixelForPixelFormat, v102, v72 + BytesPerPixelForPixelFormat, v107, BitDepthForPixelFormat, v103, v105, (int)v69, 2, v66, (uint64_t)&csf_cr420, 0, 0);
    double v77 = log10(v74);
    double v78 = log10(v76);
    double v79 = log10(v75);
    int v80 = 0;
    long long v46 = v108;
    do
    {
      int v81 = 0;
      size_t v82 = v18;
      do
      {
        v21[(v80 * v18 + v81)] = log10(v21[(v80 * v18 + v81)]) * -10.0;
        ++v81;
        --v82;
      }
      while (v82);
      ++v80;
    }
    while (v80 != v19);
    double v64 = v78 * -10.0 + v77 * -10.0 * 8.0 + v79 * -10.0;
    double v65 = 10.0;
  }
  else
  {
    if (!v27)
    {
      uint64_t v36 = FigSignalErrorAt();
LABEL_74:
      uint64_t v83 = v36;
      goto LABEL_75;
    }
    if (v17 != 1111970369 && v17 != 1815491698 && v17 != 1380401729) {
      goto LABEL_72;
    }
    size_t v49 = CVPixelBufferGetBytesPerRow(a2) / BytesPerPixelForPixelFormat;
    CFTypeRef v50 = CVPixelBufferGetBaseAddressOfPlane(a2, 0);
    size_t v51 = CVPixelBufferGetBytesPerRow(pixelBuffer) / BytesPerPixelForPixelFormat;
    int v52 = CVPixelBufferGetBaseAddress(pixelBuffer);
    int v104 = v117;
    int v106 = v116;
    double v53 = calc_psnrhvs((uint64_t)v50, v49, (uint64_t)v52, v51, BitDepthForPixelFormat, v116, v117, a4, 4, 0, (uint64_t)&csf_y, 0, v18);
    uint64_t v54 = 1;
    if (BitDepthForPixelFormat <= 8)
    {
      uint64_t v55 = 2;
    }
    else
    {
      uint64_t v54 = 2;
      uint64_t v55 = 4;
    }
    double v56 = calc_psnrhvs((uint64_t)v50 + v54, v49, (uint64_t)v52 + v54, v51, BitDepthForPixelFormat, v106, v104, a4, 4, 0, (uint64_t)&csf_y, (uint64_t)v21, v18);
    double v57 = calc_psnrhvs((uint64_t)v50 + v55, v49, (uint64_t)v52 + v55, v51, BitDepthForPixelFormat, v116, v117, a4, 4, 0, (uint64_t)&csf_y, 0, v18);
    double v58 = log10(v53);
    double v59 = log10(v56);
    double v60 = log10(v57);
    int v61 = 0;
    long long v46 = v108;
    do
    {
      int v62 = 0;
      size_t v63 = v18;
      do
      {
        v21[(v61 * v18 + v62)] = log10(v21[(v61 * v18 + v62)]) * -10.0;
        ++v62;
        --v63;
      }
      while (v63);
      ++v61;
    }
    while (v61 != v19);
    double v64 = v58 * -10.0 + v59 * -10.0 + v60 * -10.0;
    double v65 = 3.0;
  }
  double v22 = v64 / v65;
LABEL_59:
  CFMutableDictionaryRef v15 = v110;
  uint64_t v83 = CVPixelBufferCreate(v109, v18, v19, 0x72673366u, 0, &pixelBufferOut);
  CVPixelBufferRef v84 = pixelBufferOut;
  if (!v83)
  {
    CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
    size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBufferOut, 0);
    CFBooleanRef v86 = (float *)CVPixelBufferGetBaseAddressOfPlane(pixelBufferOut, 0);
    CFTypeID v87 = (float *)CVPixelBufferGetBaseAddressOfPlane(pixelBufferOut, 1uLL);
    int v88 = (float *)CVPixelBufferGetBaseAddressOfPlane(pixelBufferOut, 2uLL);
    uint64_t v89 = 0;
    unint64_t v90 = BytesPerRowOfPlane & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      uint64_t v91 = 0;
      size_t v92 = v18;
      CFTypeID v93 = v86;
      unsigned int v94 = v87;
      uint64_t v95 = v88;
      do
      {
        float v96 = v21[(v18 * v89 + v91)];
        *v93++ = v96;
        *v94++ = v96;
        *v95++ = v96;
        ++v91;
        --v92;
      }
      while (v92);
      ++v89;
      int v88 = (float *)((char *)v88 + v90);
      CFTypeID v87 = (float *)((char *)v87 + v90);
      CFBooleanRef v86 = (float *)((char *)v86 + v90);
    }
    while (v89 != v19);
    CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
    CVPixelBufferRef v84 = pixelBufferOut;
    uint64_t v83 = 0;
    if (v46)
    {
      *long long v46 = pixelBufferOut;
      CVPixelBufferRef pixelBufferOut = 0;
      int v38 = 1;
      int v97 = 1;
      goto LABEL_66;
    }
  }
  CFMutableDictionaryRef Mutable = v111;
  a5 = v112;
  if (v84) {
    CFRelease(v84);
  }
  int v38 = 1;
  int v97 = 1;
  if (v110) {
    goto LABEL_78;
  }
LABEL_79:
  if (Mutable) {
    CFRelease(Mutable);
  }
  free(v21);
  if (a5) {
    *a5 = v22;
  }
  if (v97) {
    CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
  }
  if (v38) {
    CVPixelBufferUnlockBaseAddress(v114, 0);
  }
  return v83;
}

double calc_psnrhvs(uint64_t a1, int a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8, int a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v100 = a3;
  uint64_t v14 = 0;
  uint64_t v126 = *MEMORY[0x1E4F143B8];
  CFMutableDictionaryRef v15 = v123;
  float64x2_t v16 = (float64x2_t)vdupq_n_s64(0x3FD8DE6818051F1BuLL);
  uint64_t v17 = a11;
  do
  {
    for (uint64_t i = 0; i != 64; i += 16)
    {
      float64x2_t v19 = vmulq_f64(*(float64x2_t *)(v17 + i), v16);
      *(float64x2_t *)&v15[i] = vmulq_f64(v19, v19);
    }
    ++v14;
    v17 += 64;
    v15 += 64;
  }
  while (v14 != 8);
  int v20 = ~(-1 << a5);
  if (a7 <= 7)
  {
    int v21 = 0;
    double v25 = (double)v20 * (double)v20;
    double v32 = 0.0;
  }
  else
  {
    uint64_t v99 = 0;
    uint64_t v97 = 0;
    int v21 = 0;
    int v22 = (a6 - 7) * a9;
    uint64_t v23 = a9 * (uint64_t)a2;
    uint64_t v24 = a9 * (uint64_t)a4;
    double v25 = (double)v20 * (double)v20;
    uint64_t v106 = a9 * a8;
    uint64_t v109 = v22;
    uint64_t v92 = a8 * v24;
    uint64_t v93 = a7 - 7;
    uint64_t v105 = 2 * v106;
    uint64_t v26 = 2 * v24;
    uint64_t v94 = a8;
    uint64_t v91 = a8 * v23;
    uint64_t v27 = 2 * v23;
    float64x2_t v28 = (float64x2_t)vdupq_n_s64(0x3FB0000000000000uLL);
    float64x2_t v29 = (float64x2_t)vdupq_n_s64(0x3FF1111120000000uLL);
    uint64_t v30 = a1;
    uint64_t v98 = a3;
    double v31 = 0.0;
    double v32 = 0.0;
    uint64_t v108 = v23;
    uint64_t v107 = v24;
    uint64_t v103 = 2 * v23;
    uint64_t v104 = 2 * v24;
    float64x2_t v101 = v29;
    float64x2_t v102 = v28;
    do
    {
      uint64_t v95 = v30;
      uint64_t v96 = a1;
      if ((int)v109 >= 1)
      {
        uint64_t v33 = 0;
        uint64_t v34 = 0;
        uint64_t v35 = v100;
        uint64_t v36 = v30;
        uint64_t v37 = v98;
        do
        {
          uint64_t v114 = v34;
          uint64_t v115 = v33;
          int v116 = v21;
          uint64_t v38 = 0;
          unint64_t v39 = 0;
          long long v117 = 0u;
          long long v118 = 0u;
          long long v119 = 0u;
          long long v120 = 0u;
          double v40 = 0.0;
          memset(v121, 0, sizeof(v121));
          size_t v41 = v125;
          uint64_t v112 = v36;
          uint64_t v113 = a1;
          uint64_t v42 = a1;
          uint64_t v43 = v36;
          uint64_t v110 = v37;
          uint64_t v111 = v35;
          uint64_t v44 = v35;
          uint64_t v45 = v37;
          double v46 = 0.0;
          memset(v122, 0, sizeof(v122));
          do
          {
            uint64_t v47 = 0;
            for (unint64_t j = 0; j != 8; ++j)
            {
              if (a5 < 9)
              {
                int v49 = *(unsigned __int8 *)(v43 + v47);
                unint64_t v50 = v38 + j;
                v41[j] = v49;
                int v51 = *(unsigned __int8 *)(v45 + v47);
              }
              else
              {
                int v49 = *(unsigned __int16 *)(v42 + 2 * v47) >> a10;
                unint64_t v50 = j + 8 * v39;
                v41[j] = v49;
                int v51 = *(unsigned __int16 *)(v44 + 2 * v47) >> a10;
              }
              v124[v50] = v51;
              double v52 = (double)v49;
              uint64_t v53 = ((j >> 1) & 6) + ((v39 >> 2) & 3);
              double v46 = v46 + v52;
              double v40 = v40 + (double)v51;
              *((double *)v122 + v53) = *((double *)v122 + v53) + v52;
              *((double *)v121 + v53) = *((double *)v121 + v53) + (double)v51;
              v47 += a9;
            }
            ++v39;
            v38 += 8;
            v41 += 8;
            v45 += v24;
            v44 += v26;
            v43 += v23;
            v42 += v27;
          }
          while (v39 != 8);
          uint64_t v54 = 0;
          double v55 = v46 * 0.015625;
          do
          {
            v122[v54] = vmulq_f64((float64x2_t)v122[v54], v28);
            v121[v54] = vmulq_f64((float64x2_t)v121[v54], v28);
            ++v54;
          }
          while (v54 != 2);
          uint64_t v56 = 0;
          unint64_t v57 = 0;
          double v58 = v40 * 0.015625;
          double v59 = 0.0;
          double v60 = 0.0;
          do
          {
            for (unint64_t k = 0; k != 8; ++k)
            {
              uint64_t v62 = ((k >> 1) & 6) + ((v57 >> 2) & 3);
              double v63 = (double)(int)v125[v56 + k];
              double v60 = v60 + (v63 - v55) * (v63 - v55);
              double v64 = (double)(int)v124[v56 + k];
              double v59 = v59 + (v64 - v58) * (v64 - v58);
              *((double *)&v119 + v62) = *((double *)&v119 + v62)
                                       + (v63 - *((double *)v122 + v62)) * (v63 - *((double *)v122 + v62));
              *((double *)&v117 + v62) = *((double *)&v117 + v62)
                                       + (v64 - *((double *)v121 + v62)) * (v64 - *((double *)v121 + v62));
            }
            ++v57;
            v56 += 8;
          }
          while (v57 != 8);
          uint64_t v65 = 0;
          double v66 = v60 * 1.01587307;
          do
          {
            *(long long *)((char *)&v119 + v65) = (__int128)vmulq_f64(*(float64x2_t *)((char *)&v119 + v65), v29);
            *(long long *)((char *)&v117 + v65) = (__int128)vmulq_f64(*(float64x2_t *)((char *)&v117 + v65), v29);
            v65 += 16;
          }
          while (v65 != 32);
          if (v66 > 0.0) {
            double v66 = (*(double *)&v119 + *((double *)&v119 + 1) + *(double *)&v120 + *((double *)&v120 + 1)) / v66;
          }
          double v67 = v59 * 1.01587307;
          if (v59 * 1.01587307 > 0.0) {
            double v67 = (*(double *)&v117 + *((double *)&v117 + 1) + *(double *)&v118 + *((double *)&v118 + 1)) / v67;
          }
          size_t v68 = v125;
          od_bin_fdct8x8(v125, v125);
          long long v69 = v124;
          od_bin_fdct8x8(v124, v124);
          uint64_t v70 = 0;
          double v71 = 0.0;
          uint64_t v72 = v123;
          double v73 = 0.0;
          uint64_t v23 = v108;
          uint64_t v27 = v103;
          uint64_t v26 = v104;
          float64x2_t v28 = v102;
          do
          {
            for (uint64_t m = v70 == 0; m != 8; ++m)
            {
              double v75 = *(double *)&v72[8 * m];
              double v73 = v73 + (double)(int)v68[m] * (double)(int)v68[m] * v75;
              double v71 = v71 + (double)(int)v69[m] * (double)(int)v69[m] * v75;
            }
            ++v70;
            v69 += 8;
            v68 += 8;
            v72 += 64;
          }
          while (v70 != 8);
          uint64_t v76 = 0;
          double v77 = sqrt(v66 * v73) * 0.03125;
          double v78 = sqrt(v67 * v71) * 0.03125;
          if (v78 <= v77) {
            double v78 = v77;
          }
          double v79 = v124;
          int v80 = v125;
          int v81 = v123;
          uint64_t v82 = a11;
          uint64_t v24 = v107;
          float64x2_t v29 = v101;
          do
          {
            for (uint64_t n = 0; n != 8; ++n)
            {
              int v84 = v80[n] - v79[n];
              if (v84 < 0) {
                int v84 = v79[n] - v80[n];
              }
              double v85 = (double)v84;
              if (n | v76)
              {
                double v86 = v78 / *(double *)&v81[8 * n];
                if (v86 <= v85) {
                  double v85 = v85 - v86;
                }
                else {
                  double v85 = 0.0;
                }
              }
              double v87 = v85 * *(double *)(v82 + 8 * n);
              double v32 = v32 + v87 * v87;
              double v31 = v31 + v87 * v87;
            }
            ++v76;
            v79 += 8;
            v80 += 8;
            v82 += 64;
            v81 += 64;
          }
          while (v76 != 8);
          if (a12)
          {
            double v31 = v31 * 0.015625 / v25;
            uint64_t v88 = v115;
            *(double *)(a12 + 8 * (v115 + v99 * a13)) = v31;
            int v89 = v116;
          }
          else
          {
            int v89 = v116;
            uint64_t v88 = v115;
          }
          int v21 = v89 + 64;
          uint64_t v33 = v88 + 1;
          uint64_t v34 = v114 + v106;
          uint64_t v37 = v110 + v106;
          uint64_t v35 = v111 + v105;
          uint64_t v36 = v112 + v106;
          a1 = v113 + v105;
        }
        while (v114 + v106 < v109);
      }
      v98 += v92;
      ++v99;
      v100 += 2 * v92;
      uint64_t v30 = v95 + v91;
      a1 = v96 + 2 * v91;
      v97 += v94;
    }
    while (v97 < v93);
  }
  return v32 / (double)v21 / v25;
}

_DWORD *od_bin_fdct8x8(_DWORD *a1, _DWORD *a2)
{
  uint64_t v4 = 0;
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  do
  {
    od_bin_fdct8(&v7[v4], a2);
    v4 += 32;
    ++a2;
  }
  while (v4 != 256);
  for (uint64_t i = 0; i != 32; i += 4)
  {
    uint64_t result = od_bin_fdct8(a1, &v7[i]);
    a1 += 8;
  }
  return result;
}

_DWORD *od_bin_fdct8(_DWORD *result, _DWORD *a2)
{
  int v2 = a2[16];
  int v3 = a2[32];
  int v4 = a2[48];
  int v5 = *a2 - a2[56];
  int v6 = v4 + a2[8];
  int v7 = v4 - v6 / 2;
  int v8 = v2 - a2[40];
  int v9 = v3 + a2[24];
  int v10 = v3 - v9 / 2;
  int v11 = *a2 - v5 / 2 + v9 / 2;
  int v12 = v6 / 2 - v2 + v8 / 2;
  int v13 = v12 - v6;
  int v14 = v11 - ((13573 * v13 + 0x4000) >> 15);
  int v15 = v13 + ((11585 * v14 + 0x2000) >> 14);
  int v16 = v11 - (v9 + ((21895 * v12 + 0x4000) >> 15));
  int v17 = v12 + ((15137 * v16 + 0x2000) >> 14);
  int v18 = v8 + ((19195 * v7 + 0x4000) >> 15);
  int v19 = v7 + ((11585 * v18 + 0x2000) >> 14);
  int v20 = 7489 * v19 + 4096;
  int v21 = v10 + v19 / 2;
  int v22 = v19 - v21;
  int v23 = v5 / 2 - v18 + (v20 >> 13);
  int v24 = v21 + ((3227 * (v5 - v23) + 0x4000) >> 15);
  int v25 = v5 - v23 - ((6393 * v24 + 0x4000) >> 15);
  int v26 = v22 + ((2485 * v23 + 4096) >> 13);
  int v27 = v23 - ((18205 * v26 + 0x4000) >> 15);
  _DWORD *result = v14 - ((13573 * v15 + 0x4000) >> 15);
  result[1] = v25;
  result[2] = v17;
  result[3] = v27;
  result[4] = v15;
  result[5] = v26 + ((2485 * v27 + 4096) >> 13);
  result[6] = v16 - ((21895 * v17 + 0x4000) >> 15);
  result[7] = v24 + ((3227 * v25 + 0x4000) >> 15);
  return result;
}

uint64_t _NSStringFromCGRect(double a1, double a2, double a3, double a4)
{
  int v7 = NSString;
  if (floor(a1) == a1) {
    uint64_t v8 = objc_msgSend(NSString, "stringWithFormat:", @"%d", (int)a1);
  }
  else {
    uint64_t v8 = objc_msgSend(NSString, "stringWithFormat:", @"%.4f", *(void *)&a1);
  }
  uint64_t v9 = v8;
  if (floor(a2) == a2) {
    uint64_t v10 = objc_msgSend(NSString, "stringWithFormat:", @"%d", (int)a2);
  }
  else {
    uint64_t v10 = objc_msgSend(NSString, "stringWithFormat:", @"%.4f", *(void *)&a2);
  }
  uint64_t v11 = v10;
  if (floor(a3) == a3) {
    uint64_t v12 = objc_msgSend(NSString, "stringWithFormat:", @"%d", (int)a3);
  }
  else {
    uint64_t v12 = objc_msgSend(NSString, "stringWithFormat:", @"%.4f", *(void *)&a3);
  }
  uint64_t v13 = v12;
  if (floor(a4) == a4) {
    uint64_t v14 = objc_msgSend(NSString, "stringWithFormat:", @"%d", (int)a4);
  }
  else {
    uint64_t v14 = objc_msgSend(NSString, "stringWithFormat:", @"%.4f", *(void *)&a4);
  }
  return [v7 stringWithFormat:@"(%@ %@; %@ %@)", v9, v11, v13, v14];
}

void sub_1AB98B9D4(_Unwind_Exception *a1)
{
}

void __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void __CMPhotoDispatchAsync_block_invoke(uint64_t a1)
{
  int v2 = (void *)MEMORY[0x1AD1109A0]();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

dispatch_queue_t ___getDeferredDeallocQueue_block_invoke()
{
  dispatch_queue_t result = dispatch_queue_create("com.apple.coremedia.tiledlayer.deferreddeallocqueue", 0);
  _gDeferredDeallocQueue = (uint64_t)result;
  return result;
}

void __CMPhotoDispatchSync_block_invoke(uint64_t a1)
{
  int v2 = (void *)MEMORY[0x1AD1109A0]();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t SlimXEncodeBlocks_C(uint64_t a1)
{
  uint64_t v450 = *MEMORY[0x1E4F143B8];
  int v2 = *(unsigned char **)(a1 + 16);
  int v3 = *(int16x8_t **)a1;
  uint64_t v4 = *(int *)(a1 + 12);
  unsigned int v5 = *(_DWORD *)(a1 + 36);
  uint64_t v6 = *(int *)(a1 + 32);
  unint64_t v7 = predictionPattern_0[v6];
  uint64_t v8 = *(void *)(a1 + 80);
  uint64_t v9 = *(void *)(v8 + 128);
  if (v9 && *(void *)(v8 + 88) + v9 - (uint64_t)v2 < 160) {
    return 4294951888;
  }
  switch((int)v6)
  {
    case 0:
      for (uint64_t i = 0; i != 8; ++i)
        v444.i16[i] = v3->u8[i];
      for (uint64_t j = 0; j != 8; ++j)
        v447.i16[j] = v3->u8[j + 8];
      uint64_t v29 = 0;
      uint64_t v30 = &v3->i8[v4];
      do
      {
        v445[0].i16[v29] = v30[v29];
        ++v29;
      }
      while (v29 != 8);
      uint64_t v31 = 0;
      double v32 = v30 + 8;
      do
      {
        v448[0].i16[v31] = v32[v31];
        ++v31;
      }
      while (v31 != 8);
      uint64_t v33 = 0;
      uint64_t v34 = &v3->i8[2 * v4];
      do
      {
        v445[1].i16[v33] = v34[v33];
        ++v33;
      }
      while (v33 != 8);
      uint64_t v35 = 0;
      uint64_t v36 = v34 + 8;
      do
      {
        v448[1].i16[v35] = v36[v35];
        ++v35;
      }
      while (v35 != 8);
      uint64_t v37 = 0;
      uint64_t v38 = &v3->i8[3 * v4];
      do
      {
        v446.i16[v37] = v38[v37];
        ++v37;
      }
      while (v37 != 8);
      uint64_t v39 = 0;
      double v40 = v38 + 8;
      do
      {
        v449.i16[v39] = v40[v39];
        ++v39;
      }
      while (v39 != 8);
      goto LABEL_145;
    case 1:
      for (uint64_t k = 0; k != 8; ++k)
        v444.i16[k] = v3->u8[k];
      for (uint64_t m = 0; m != 8; ++m)
        v447.i16[m] = v3->u8[m + 8];
      uint64_t v43 = 0;
      uint64_t v44 = &v3->i8[v4];
      do
      {
        v445[0].i16[v43] = v44[v43];
        ++v43;
      }
      while (v43 != 8);
      uint64_t v45 = 0;
      double v46 = v44 + 8;
      do
      {
        v448[0].i16[v45] = v46[v45];
        ++v45;
      }
      while (v45 != 8);
      uint64_t v47 = 0;
      size_t v48 = &v3->i8[2 * (int)v4];
      do
      {
        v445[1].i16[v47] = v48[v47];
        ++v47;
      }
      while (v47 != 8);
      uint64_t v49 = 0;
      unint64_t v50 = v48 + 8;
      do
      {
        v448[1].i16[v49] = v50[v49];
        ++v49;
      }
      while (v49 != 8);
      uint64_t v51 = 0;
      double v52 = &v3->i8[3 * v4];
      do
      {
        v446.i16[v51] = v52[v51];
        ++v51;
      }
      while (v51 != 8);
      uint64_t v53 = 0;
      uint64_t v54 = v52 + 8;
      do
      {
        v449.i16[v53] = v54[v53];
        ++v53;
      }
      while (v53 != 8);
      goto LABEL_147;
    case 2:
      for (uint64_t n = 0; n != 8; ++n)
        v444.i16[n] = v3->u8[n];
      for (iuint64_t i = 0; ii != 8; ++ii)
        v445[1].i16[ii] = v3->u8[v4 + ii];
      for (juint64_t j = 0; jj != 8; ++jj)
        v445[0].i16[jj] = v3->u8[2 * v4 + jj];
      for (kuint64_t k = 0; kk != 8; ++kk)
        v446.i16[kk] = v3->u8[3 * v4 + kk];
      for (muint64_t m = 0; mm != 8; ++mm)
        v447.i16[mm] = v3->u8[4 * v4 + mm];
      for (nuint64_t n = 0; nn != 8; ++nn)
        v448[1].i16[nn] = v3->u8[5 * v4 + nn];
      for (uint64_t i1 = 0; i1 != 8; ++i1)
        v448[0].i16[i1] = v3->u8[6 * (int)v4 + i1];
      for (uint64_t i2 = 0; i2 != 8; ++i2)
        v449.i16[i2] = v3->u8[8 * v4 - v4 + i2];
      goto LABEL_173;
    case 3:
      for (uint64_t i3 = 0; i3 != 8; ++i3)
        v444.i16[i3] = v3->u8[i3];
      for (uint64_t i4 = 0; i4 != 8; ++i4)
        v445[0].i16[i4] = v3->u8[v4 + i4];
      for (uint64_t i5 = 0; i5 != 8; ++i5)
        v445[1].i16[i5] = v3->u8[2 * v4 + i5];
      for (uint64_t i6 = 0; i6 != 8; ++i6)
        v446.i16[i6] = v3->u8[3 * v4 + i6];
      for (uint64_t i7 = 0; i7 != 8; ++i7)
        v447.i16[i7] = v3->u8[4 * v4 + i7];
      for (uint64_t i8 = 0; i8 != 8; ++i8)
        v448[0].i16[i8] = v3->u8[5 * v4 + i8];
      for (uint64_t i9 = 0; i9 != 8; ++i9)
        v448[1].i16[i9] = v3->u8[6 * (int)v4 + i9];
      for (uint64_t i10 = 0; i10 != 8; ++i10)
        v449.i16[i10] = v3->u8[8 * v4 - v4 + i10];
      goto LABEL_92;
    case 4:
      for (uint64_t i11 = 0; i11 != 8; ++i11)
        v444.i16[i11] = v3->u8[i11];
      for (uint64_t i12 = 0; i12 != 8; ++i12)
        v447.i16[i12] = v3->u8[i12 + 8];
      uint64_t v91 = 0;
      uint64_t v92 = &v3->i8[v4];
      do
      {
        v445[0].i16[v91] = v92[v91];
        ++v91;
      }
      while (v91 != 8);
      uint64_t v93 = 0;
      uint64_t v94 = v92 + 8;
      do
      {
        v448[0].i16[v93] = v94[v93];
        ++v93;
      }
      while (v93 != 8);
      uint64_t v95 = 0;
      uint64_t v96 = &v3->i8[2 * (int)v4];
      do
      {
        v445[1].i16[v95] = v96[v95];
        ++v95;
      }
      while (v95 != 8);
      uint64_t v97 = 0;
      uint64_t v98 = v96 + 8;
      do
      {
        v448[1].i16[v97] = v98[v97];
        ++v97;
      }
      while (v97 != 8);
      uint64_t v99 = 0;
      uint64_t v100 = &v3->i8[3 * v4];
      do
      {
        v446.i16[v99] = v100[v99];
        ++v99;
      }
      while (v99 != 8);
      uint64_t v101 = 0;
      float64x2_t v102 = v100 + 8;
      do
      {
        v449.i16[v101] = v102[v101];
        ++v101;
      }
      while (v101 != 8);
      __int16 v103 = v444.i16[1];
      v444.i16[1] = v445[1].i16[0];
      v445[1].i16[0] = v103;
      __int16 v104 = v444.i16[3];
      v444.i16[3] = v445[1].i16[2];
      __int16 v105 = v444.i16[5];
      v444.i16[5] = v445[1].i16[4];
      v445[1].i16[4] = v105;
      __int16 v106 = v444.i16[7];
      v444.i16[7] = v445[1].i16[6];
      __int16 v107 = v445[0].i16[1];
      v445[0].i16[1] = v446.i16[0];
      v446.i16[0] = v107;
      __int16 v108 = v445[0].i16[3];
      v445[0].i16[3] = v446.i16[2];
      __int16 v109 = v445[0].i16[5];
      v445[0].i16[5] = v446.i16[4];
      v446.i16[4] = v109;
      __int16 v110 = v445[0].i16[7];
      v445[0].i16[7] = v446.i16[6];
      __int16 v111 = v447.i16[1];
      v447.i16[1] = v448[1].i16[0];
      __int16 v112 = v447.i16[3];
      v447.i16[3] = v448[1].i16[2];
      v448[1].i16[2] = v112;
      __int16 v113 = v447.i16[5];
      v447.i16[5] = v448[1].i16[4];
      __int16 v114 = v447.i16[7];
      v447.i16[7] = v448[1].i16[6];
      v448[1].i16[6] = v114;
      __int16 v115 = v448[0].i16[1];
      v448[0].i16[1] = v449.i16[0];
      __int16 v116 = v448[0].i16[3];
      v448[0].i16[3] = v449.i16[2];
      v449.i16[2] = v116;
      __int16 v117 = v448[0].i16[5];
      v448[0].i16[5] = v449.i16[4];
      __int16 v118 = v448[0].i16[7];
      v448[0].i16[7] = v449.i16[6];
      v449.i16[6] = v118;
      v445[1].i16[2] = v111;
      v448[1].i16[0] = v104;
      __int16 v119 = v445[1].i16[3];
      v445[1].i16[3] = v448[1].i16[1];
      v448[1].i16[1] = v119;
      v445[1].i16[6] = v113;
      v448[1].i16[4] = v106;
      __int16 v120 = v445[1].i16[7];
      v445[1].i16[7] = v448[1].i16[5];
      v448[1].i16[5] = v120;
      v446.i16[2] = v115;
      v449.i16[0] = v108;
      __int16 v121 = v446.i16[3];
      v446.i16[3] = v449.i16[1];
      v449.i16[1] = v121;
      v446.i16[6] = v117;
      v449.i16[4] = v110;
      __int16 v122 = v446.i16[7];
      v446.i16[7] = v449.i16[5];
      v449.i16[5] = v122;
      goto LABEL_181;
    case 5:
      for (uint64_t i13 = 0; i13 != 8; ++i13)
        v444.i16[i13] = v3->u8[i13];
      for (uint64_t i14 = 0; i14 != 8; ++i14)
        v447.i16[i14] = v3->u8[i14 + 8];
      uint64_t v125 = 0;
      uint64_t v126 = &v3->i8[v4];
      do
      {
        *((_WORD *)&v444 + v125 + _Block_object_dispose(&STACK[0x280], 8) = v126[v125];
        ++v125;
      }
      while (v125 != 8);
      uint64_t v127 = 0;
      uint64_t v128 = v126 + 8;
      do
      {
        v448[0].i16[v127] = v128[v127];
        ++v127;
      }
      while (v127 != 8);
      uint64_t v129 = 0;
      CFAllocatorRef v130 = &v3->i8[2 * (int)v4];
      do
      {
        v445[1].i16[v129] = v130[v129];
        ++v129;
      }
      while (v129 != 8);
      uint64_t v131 = 0;
      uint64_t v132 = v130 + 8;
      do
      {
        v448[1].i16[v131] = v132[v131];
        ++v131;
      }
      while (v131 != 8);
      uint64_t v133 = 0;
      uint64_t v134 = &v3->i8[3 * v4];
      do
      {
        v446.i16[v133] = v134[v133];
        ++v133;
      }
      while (v133 != 8);
      uint64_t v135 = 0;
      uint64_t v136 = v134 + 8;
      do
      {
        v449.i16[v135] = v136[v135];
        ++v135;
      }
      while (v135 != 8);
      __int16 v137 = v445[1].i16[1];
      v445[1].i16[1] = v444.i16[0];
      v444.i16[0] = v137;
      __int16 v138 = v444.i16[2];
      v444.i16[2] = v445[1].i16[3];
      __int16 v139 = v445[1].i16[5];
      v445[1].i16[5] = v444.i16[4];
      v444.i16[4] = v139;
      __int16 v140 = v444.i16[6];
      v444.i16[6] = v445[1].i16[7];
      __int16 v141 = v446.i16[1];
      v446.i16[1] = v445[0].i16[0];
      v445[0].i16[0] = v141;
      __int16 v142 = v445[0].i16[2];
      v445[0].i16[2] = v446.i16[3];
      __int16 v143 = v446.i16[5];
      v446.i16[5] = v445[0].i16[4];
      v445[0].i16[4] = v143;
      __int16 v144 = v445[0].i16[6];
      v445[0].i16[6] = v446.i16[7];
      __int16 v145 = v447.i16[0];
      v447.i16[0] = v448[1].i16[1];
      __int16 v146 = v448[1].i16[3];
      v448[1].i16[3] = v447.i16[2];
      v447.i16[2] = v146;
      __int16 v147 = v447.i16[4];
      v447.i16[4] = v448[1].i16[5];
      __int16 v148 = v448[1].i16[7];
      v448[1].i16[7] = v447.i16[6];
      v447.i16[6] = v148;
      __int16 v149 = v448[0].i16[0];
      v448[0].i16[0] = v449.i16[1];
      __int16 v150 = v449.i16[3];
      v449.i16[3] = v448[0].i16[2];
      v448[0].i16[2] = v150;
      __int16 v151 = v448[0].i16[4];
      v448[0].i16[4] = v449.i16[5];
      __int16 v152 = v449.i16[7];
      v449.i16[7] = v448[0].i16[6];
      v448[0].i16[6] = v152;
      __int16 v153 = v445[1].i16[2];
      v445[1].i16[2] = v448[1].i16[0];
      v448[1].i16[0] = v153;
      v445[1].i16[3] = v145;
      v448[1].i16[1] = v138;
      __int16 v154 = v445[1].i16[6];
      v445[1].i16[6] = v448[1].i16[4];
      v448[1].i16[4] = v154;
      v445[1].i16[7] = v147;
      v448[1].i16[5] = v140;
      __int16 v155 = v446.i16[2];
      v446.i16[2] = v449.i16[0];
      v449.i16[0] = v155;
      v446.i16[3] = v149;
      v449.i16[1] = v142;
      __int16 v156 = v446.i16[6];
      v446.i16[6] = v449.i16[4];
      v449.i16[4] = v156;
      v446.i16[7] = v151;
      v449.i16[5] = v144;
      goto LABEL_181;
    case 6:
      for (uint64_t i15 = 0; i15 != 8; ++i15)
        v444.i16[i15] = v3->u8[i15];
      for (uint64_t i16 = 0; i16 != 8; ++i16)
        v447.i16[i16] = v3->u8[i16 + 8];
      uint64_t v159 = 0;
      long long v160 = &v3->i8[v4];
      do
      {
        *((_WORD *)&v444 + v159 + _Block_object_dispose(&STACK[0x280], 8) = v160[v159];
        ++v159;
      }
      while (v159 != 8);
      uint64_t v161 = 0;
      long long v162 = v160 + 8;
      do
      {
        v448[0].i16[v161] = v162[v161];
        ++v161;
      }
      while (v161 != 8);
      uint64_t v163 = 0;
      uint64_t v164 = &v3->i8[2 * (int)v4];
      do
      {
        v445[1].i16[v163] = v164[v163];
        ++v163;
      }
      while (v163 != 8);
      uint64_t v165 = 0;
      uint64_t v166 = v164 + 8;
      do
      {
        v448[1].i16[v165] = v166[v165];
        ++v165;
      }
      while (v165 != 8);
      uint64_t v167 = 0;
      CFMutableArrayRef v168 = &v3->i8[3 * v4];
      do
      {
        v446.i16[v167] = v168[v167];
        ++v167;
      }
      while (v167 != 8);
      uint64_t v169 = 0;
      uint64_t v170 = v168 + 8;
      do
      {
        v449.i16[v169] = v170[v169];
        ++v169;
      }
      while (v169 != 8);
      goto LABEL_177;
    case 7:
      vectorload_4x16_packed10((unsigned int *)v3, *(_DWORD *)(a1 + 8), v4, &v444);
      goto LABEL_145;
    case 8:
      vectorload_4x16_packed10((unsigned int *)v3, *(_DWORD *)(a1 + 8), v4, &v444);
      goto LABEL_147;
    case 9:
      uint64_t v190 = 0;
      CFDictionaryRef v191 = v3;
      do
      {
        unsigned int v192 = v191->i32[0];
        CFDictionaryRef v191 = (int16x8_t *)((char *)v191 + 4);
        v444.i16[v190] = v192 & 0x3FF;
        uint64_t v193 = &v447.i16[v190];
        *(v193 - 16) = (v192 >> 10) & 0x3FF;
        *uint64_t v193 = (v192 >> 20) & 0x3FF;
        v193[16] = v192 >> 30;
        if (v190 == 3) {
          CFDictionaryRef v191 = (int16x8_t *)((char *)v3 + v4);
        }
        ++v190;
      }
      while (v190 != 8);
      uint64_t v194 = 0;
      uint64_t v195 = (unsigned int *)((char *)v3 + 2 * (int)v4);
      do
      {
        unsigned int v196 = *v195++;
        dispatch_group_t v197 = &v448[0].i16[v194];
        *(v197 - 32) = v196 & 0x3FF;
        *(v197 - 16) = (v196 >> 10) & 0x3FF;
        *dispatch_group_t v197 = (v196 >> 20) & 0x3FF;
        v197[16] = v196 >> 30;
        if (v194 == 3) {
          uint64_t v195 = (unsigned int *)((char *)v3 + 3 * (int)v4);
        }
        ++v194;
      }
      while (v194 != 8);
      goto LABEL_181;
    case 10:
    case 15:
    case 24:
      int16x8_t v11 = v3[1];
      int16x8_t v444 = *v3;
      int16x8_t v447 = v11;
      v445[0] = *(uint16x8_t *)((char *)v3 + v4);
      v448[0] = *(uint16x8_t *)((char *)&v3[1] + v4);
      uint64_t v12 = (uint16x8_t *)((char *)v3 + 2 * (int)v4);
      v445[1] = *v12;
      v448[1] = v12[1];
      uint64_t v13 = (int16x8_t *)((char *)v3 + 3 * (int)v4);
      int16x8_t v446 = *v13;
      int16x8_t v449 = v13[1];
      if (v6 == 15)
      {
        int16x8_t v444 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v444), vmvnq_s8((int8x16_t)v444), (int8x16_t)(*(_OWORD *)&v444 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        v445[0] = (uint16x8_t)vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)v445[0]), vmvnq_s8((int8x16_t)v445[0]), (int8x16_t)(*(_OWORD *)v445 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        v445[1] = (uint16x8_t)vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)v445[1]), vmvnq_s8((int8x16_t)v445[1]), (int8x16_t)(*(_OWORD *)&v445[1] | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        int16x8_t v446 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v446), vmvnq_s8((int8x16_t)v446), (int8x16_t)(*(_OWORD *)&v446 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        int16x8_t v447 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v447), vmvnq_s8((int8x16_t)v447), (int8x16_t)(*(_OWORD *)&v447 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        v448[0] = (uint16x8_t)vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)v448[0]), vmvnq_s8((int8x16_t)v448[0]), (int8x16_t)(*(_OWORD *)v448 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        v448[1] = (uint16x8_t)vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)v448[1]), vmvnq_s8((int8x16_t)v448[1]), (int8x16_t)(*(_OWORD *)&v448[1] | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        int16x8_t v449 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v449), vmvnq_s8((int8x16_t)v449), (int8x16_t)(*(_OWORD *)&v449 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
      }
      if (*(unsigned char *)(a1 + 40))
      {
        v14.i64[0] = 0xF000F000F000FLL;
        v14.i64[1] = 0xF000F000F000FLL;
        uint16x8_t v15 = (uint16x8_t)vandq_s8(vorrq_s8((int8x16_t)v449, vorrq_s8(vorrq_s8((int8x16_t)v448[1], vorrq_s8((int8x16_t)v448[0], (int8x16_t)v447)), vorrq_s8(vorrq_s8((int8x16_t)v446, (int8x16_t)v445[1]), vorrq_s8((int8x16_t)v445[0], (int8x16_t)v444)))), v14);
        v15.i16[0] = vmaxvq_u16(v15);
        if (v15.i32[0]) {
          return 4294951887;
        }
      }
      if (v5)
      {
        uint32x4_t v26 = (uint32x4_t)vnegq_s32(vdupq_n_s32(v5));
        int16x8_t v444 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v444.i8), v26), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v444), v26));
        v445[0] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v445[0].i8), v26), (int16x8_t)vshlq_u32(vmovl_high_u16(v445[0]), v26));
        v445[1] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v445[1].i8), v26), (int16x8_t)vshlq_u32(vmovl_high_u16(v445[1]), v26));
        int16x8_t v446 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v446.i8), v26), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v446), v26));
        int16x8_t v447 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v447.i8), v26), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v447), v26));
        v448[0] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v448[0].i8), v26), (int16x8_t)vshlq_u32(vmovl_high_u16(v448[0]), v26));
        v448[1] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v448[1].i8), v26), (int16x8_t)vshlq_u32(vmovl_high_u16(v448[1]), v26));
        int16x8_t v449 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v449.i8), v26), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v449), v26));
      }
LABEL_145:
      v171.i64[0] = v446.i64[0];
      v171.i64[1] = v444.i64[1];
      uint64_t v172 = v445[0].i64[1];
      v444.i64[1] = v445[1].i64[0];
      *(uint16x8_t *)((char *)v445 + _Block_object_dispose(&STACK[0x280], 8) = v171;
      uint64_t v173 = v447.i64[1];
      uint64_t v174 = v448[0].i64[1];
      v446.i64[0] = v172;
      v447.i64[1] = v448[1].i64[0];
      v171.i64[0] = v449.i64[0];
      v171.i64[1] = v173;
      *(uint16x8_t *)((char *)v448 + _Block_object_dispose(&STACK[0x280], 8) = v171;
      v449.i64[0] = v174;
LABEL_181:
      uint64_t v281 = a1 + 42;
      if ((int)v6 >= 17)
      {
        if (*(_DWORD *)(a1 + 108))
        {
          unsigned int v282 = *(_DWORD *)(a1 + 112);
          if (v282)
          {
            uint64_t v283 = 0;
            int32x4_t v284 = vdupq_n_s32(v282);
            uint32x4_t v285 = (uint32x4_t)vdupq_n_s32(v282 - 1);
            v286.i64[0] = 0x2000000020;
            v286.i64[1] = 0x2000000020;
            uint32x4_t v287 = (uint32x4_t)vnegq_s32(v284);
            v288.i64[0] = -1;
            v288.i64[1] = -1;
            v289.i64[0] = 0x100000001;
            v289.i64[1] = 0x100000001;
            do
            {
              int16x4_t v290 = *(int16x4_t *)&v444.i8[v283 * 2];
              int32x4_t v291 = (int32x4_t)vmovl_u16((uint16x4_t)v290);
              int32x4_t v292 = (int32x4_t)vbicq_s8((int8x16_t)vsubq_s32(v286, vclzq_s32(v291)), (int8x16_t)vceqzq_s32(v291));
              int16x4_t v293 = vmovn_s32(vcgtq_s32(v292, v284));
              int32x4_t v294 = vsubq_s32(v292, v284);
              int16x4_t v295 = vmovn_s32(vaddq_s32((int32x4_t)vshlq_u32(vmovl_u16((uint16x4_t)vadd_s16(vsub_s16(v290, vmovn_s32((int32x4_t)vshlq_u32((uint32x4_t)v291, v287))), vmovn_s32((int32x4_t)vshlq_u32(v289, (uint32x4_t)vaddq_s32(v294, v288))))), (uint32x4_t)vnegq_s32(v294)), (int32x4_t)vshlq_u32((uint32x4_t)v294, v285)));
              if (v293.i8[0]) {
                v444.i16[v283] = v295.i16[0];
              }
              if (v293.i8[2]) {
                v444.i16[v283 + 1] = v295.i16[1];
              }
              if (v293.i8[4]) {
                v444.i16[v283 + 2] = v295.i16[2];
              }
              if (v293.i8[6]) {
                v444.i16[v283 + 3] = v295.i16[3];
              }
              v283 += 4;
            }
            while (v283 != 8);
            uint64_t v296 = 0;
            v297.i64[0] = 0x2000000020;
            v297.i64[1] = 0x2000000020;
            v298.i64[0] = -1;
            v298.i64[1] = -1;
            v299.i64[0] = 0x100000001;
            v299.i64[1] = 0x100000001;
            do
            {
              int16x4_t v300 = *(int16x4_t *)((char *)&v444 + v296 * 2 + 16);
              int32x4_t v301 = (int32x4_t)vmovl_u16((uint16x4_t)v300);
              int32x4_t v302 = (int32x4_t)vbicq_s8((int8x16_t)vsubq_s32(v297, vclzq_s32(v301)), (int8x16_t)vceqzq_s32(v301));
              int16x4_t v303 = vmovn_s32(vcgtq_s32(v302, v284));
              int32x4_t v304 = vsubq_s32(v302, v284);
              int16x4_t v305 = vmovn_s32(vaddq_s32((int32x4_t)vshlq_u32(vmovl_u16((uint16x4_t)vadd_s16(vsub_s16(v300, vmovn_s32((int32x4_t)vshlq_u32((uint32x4_t)v301, v287))), vmovn_s32((int32x4_t)vshlq_u32(v299, (uint32x4_t)vaddq_s32(v304, v298))))), (uint32x4_t)vnegq_s32(v304)), (int32x4_t)vshlq_u32((uint32x4_t)v304, v285)));
              if (v303.i8[0]) {
                *(_WORD *)((char *)&v444 + v296 * 2 + 16) = v305.i16[0];
              }
              if (v303.i8[2]) {
                v445[0].i16[v296 + 1] = v305.i16[1];
              }
              if (v303.i8[4]) {
                v445[0].i16[v296 + 2] = v305.i16[2];
              }
              if (v303.i8[6]) {
                v445[0].i16[v296 + 3] = v305.i16[3];
              }
              v296 += 4;
            }
            while (v296 != 8);
            uint64_t v306 = 0;
            v307.i64[0] = 0x2000000020;
            v307.i64[1] = 0x2000000020;
            v308.i64[0] = -1;
            v308.i64[1] = -1;
            v309.i64[0] = 0x100000001;
            v309.i64[1] = 0x100000001;
            do
            {
              int16x4_t v310 = *(int16x4_t *)&v445[1].i8[v306 * 2];
              int32x4_t v311 = (int32x4_t)vmovl_u16((uint16x4_t)v310);
              int32x4_t v312 = (int32x4_t)vbicq_s8((int8x16_t)vsubq_s32(v307, vclzq_s32(v311)), (int8x16_t)vceqzq_s32(v311));
              int16x4_t v313 = vmovn_s32(vcgtq_s32(v312, v284));
              int32x4_t v314 = vsubq_s32(v312, v284);
              int16x4_t v315 = vmovn_s32(vaddq_s32((int32x4_t)vshlq_u32(vmovl_u16((uint16x4_t)vadd_s16(vsub_s16(v310, vmovn_s32((int32x4_t)vshlq_u32((uint32x4_t)v311, v287))), vmovn_s32((int32x4_t)vshlq_u32(v309, (uint32x4_t)vaddq_s32(v314, v308))))), (uint32x4_t)vnegq_s32(v314)), (int32x4_t)vshlq_u32((uint32x4_t)v314, v285)));
              if (v313.i8[0]) {
                v445[1].i16[v306] = v315.i16[0];
              }
              if (v313.i8[2]) {
                v445[1].i16[v306 + 1] = v315.i16[1];
              }
              if (v313.i8[4]) {
                v445[1].i16[v306 + 2] = v315.i16[2];
              }
              if (v313.i8[6]) {
                v445[1].i16[v306 + 3] = v315.i16[3];
              }
              v306 += 4;
            }
            while (v306 != 8);
            uint64_t v316 = 0;
            v317.i64[0] = 0x2000000020;
            v317.i64[1] = 0x2000000020;
            v318.i64[0] = -1;
            v318.i64[1] = -1;
            v319.i64[0] = 0x100000001;
            v319.i64[1] = 0x100000001;
            do
            {
              int16x4_t v320 = *(int16x4_t *)&v446.i8[v316 * 2];
              int32x4_t v321 = (int32x4_t)vmovl_u16((uint16x4_t)v320);
              int32x4_t v322 = (int32x4_t)vbicq_s8((int8x16_t)vsubq_s32(v317, vclzq_s32(v321)), (int8x16_t)vceqzq_s32(v321));
              int16x4_t v323 = vmovn_s32(vcgtq_s32(v322, v284));
              int32x4_t v324 = vsubq_s32(v322, v284);
              int16x4_t v325 = vmovn_s32(vaddq_s32((int32x4_t)vshlq_u32(vmovl_u16((uint16x4_t)vadd_s16(vsub_s16(v320, vmovn_s32((int32x4_t)vshlq_u32((uint32x4_t)v321, v287))), vmovn_s32((int32x4_t)vshlq_u32(v319, (uint32x4_t)vaddq_s32(v324, v318))))), (uint32x4_t)vnegq_s32(v324)), (int32x4_t)vshlq_u32((uint32x4_t)v324, v285)));
              if (v323.i8[0]) {
                v446.i16[v316] = v325.i16[0];
              }
              if (v323.i8[2]) {
                v446.i16[v316 + 1] = v325.i16[1];
              }
              if (v323.i8[4]) {
                v446.i16[v316 + 2] = v325.i16[2];
              }
              if (v323.i8[6]) {
                v446.i16[v316 + 3] = v325.i16[3];
              }
              v316 += 4;
            }
            while (v316 != 8);
            uint64_t v326 = 0;
            v327.i64[0] = 0x2000000020;
            v327.i64[1] = 0x2000000020;
            v328.i64[0] = -1;
            v328.i64[1] = -1;
            v329.i64[0] = 0x100000001;
            v329.i64[1] = 0x100000001;
            do
            {
              int16x4_t v330 = *(int16x4_t *)&v447.i8[v326 * 2];
              int32x4_t v331 = (int32x4_t)vmovl_u16((uint16x4_t)v330);
              int32x4_t v332 = (int32x4_t)vbicq_s8((int8x16_t)vsubq_s32(v327, vclzq_s32(v331)), (int8x16_t)vceqzq_s32(v331));
              int16x4_t v333 = vmovn_s32(vcgtq_s32(v332, v284));
              int32x4_t v334 = vsubq_s32(v332, v284);
              int16x4_t v335 = vmovn_s32(vaddq_s32((int32x4_t)vshlq_u32(vmovl_u16((uint16x4_t)vadd_s16(vsub_s16(v330, vmovn_s32((int32x4_t)vshlq_u32((uint32x4_t)v331, v287))), vmovn_s32((int32x4_t)vshlq_u32(v329, (uint32x4_t)vaddq_s32(v334, v328))))), (uint32x4_t)vnegq_s32(v334)), (int32x4_t)vshlq_u32((uint32x4_t)v334, v285)));
              if (v333.i8[0]) {
                v447.i16[v326] = v335.i16[0];
              }
              if (v333.i8[2]) {
                v447.i16[v326 + 1] = v335.i16[1];
              }
              if (v333.i8[4]) {
                v447.i16[v326 + 2] = v335.i16[2];
              }
              if (v333.i8[6]) {
                v447.i16[v326 + 3] = v335.i16[3];
              }
              v326 += 4;
            }
            while (v326 != 8);
            uint64_t v336 = 0;
            v337.i64[0] = 0x2000000020;
            v337.i64[1] = 0x2000000020;
            v338.i64[0] = -1;
            v338.i64[1] = -1;
            v339.i64[0] = 0x100000001;
            v339.i64[1] = 0x100000001;
            do
            {
              int16x4_t v340 = *(int16x4_t *)&v448[0].i8[v336 * 2];
              int32x4_t v341 = (int32x4_t)vmovl_u16((uint16x4_t)v340);
              int32x4_t v342 = (int32x4_t)vbicq_s8((int8x16_t)vsubq_s32(v337, vclzq_s32(v341)), (int8x16_t)vceqzq_s32(v341));
              int16x4_t v343 = vmovn_s32(vcgtq_s32(v342, v284));
              int32x4_t v344 = vsubq_s32(v342, v284);
              int16x4_t v345 = vmovn_s32(vaddq_s32((int32x4_t)vshlq_u32(vmovl_u16((uint16x4_t)vadd_s16(vsub_s16(v340, vmovn_s32((int32x4_t)vshlq_u32((uint32x4_t)v341, v287))), vmovn_s32((int32x4_t)vshlq_u32(v339, (uint32x4_t)vaddq_s32(v344, v338))))), (uint32x4_t)vnegq_s32(v344)), (int32x4_t)vshlq_u32((uint32x4_t)v344, v285)));
              if (v343.i8[0]) {
                v448[0].i16[v336] = v345.i16[0];
              }
              if (v343.i8[2]) {
                v448[0].i16[v336 + 1] = v345.i16[1];
              }
              if (v343.i8[4]) {
                v448[0].i16[v336 + 2] = v345.i16[2];
              }
              if (v343.i8[6]) {
                v448[0].i16[v336 + 3] = v345.i16[3];
              }
              v336 += 4;
            }
            while (v336 != 8);
            uint64_t v346 = 0;
            v347.i64[0] = 0x2000000020;
            v347.i64[1] = 0x2000000020;
            v348.i64[0] = -1;
            v348.i64[1] = -1;
            v349.i64[0] = 0x100000001;
            v349.i64[1] = 0x100000001;
            do
            {
              int16x4_t v350 = *(int16x4_t *)&v448[1].i8[v346 * 2];
              int32x4_t v351 = (int32x4_t)vmovl_u16((uint16x4_t)v350);
              int32x4_t v352 = (int32x4_t)vbicq_s8((int8x16_t)vsubq_s32(v347, vclzq_s32(v351)), (int8x16_t)vceqzq_s32(v351));
              int16x4_t v353 = vmovn_s32(vcgtq_s32(v352, v284));
              int32x4_t v354 = vsubq_s32(v352, v284);
              int16x4_t v355 = vmovn_s32(vaddq_s32((int32x4_t)vshlq_u32(vmovl_u16((uint16x4_t)vadd_s16(vsub_s16(v350, vmovn_s32((int32x4_t)vshlq_u32((uint32x4_t)v351, v287))), vmovn_s32((int32x4_t)vshlq_u32(v349, (uint32x4_t)vaddq_s32(v354, v348))))), (uint32x4_t)vnegq_s32(v354)), (int32x4_t)vshlq_u32((uint32x4_t)v354, v285)));
              if (v353.i8[0]) {
                v448[1].i16[v346] = v355.i16[0];
              }
              if (v353.i8[2]) {
                v448[1].i16[v346 + 1] = v355.i16[1];
              }
              if (v353.i8[4]) {
                v448[1].i16[v346 + 2] = v355.i16[2];
              }
              if (v353.i8[6]) {
                v448[1].i16[v346 + 3] = v355.i16[3];
              }
              v346 += 4;
            }
            while (v346 != 8);
            uint64_t v356 = 0;
            v357.i64[0] = 0x2000000020;
            v357.i64[1] = 0x2000000020;
            v358.i64[0] = -1;
            v358.i64[1] = -1;
            v359.i64[0] = 0x100000001;
            v359.i64[1] = 0x100000001;
            do
            {
              int16x4_t v360 = *(int16x4_t *)&v449.i8[v356 * 2];
              int32x4_t v361 = (int32x4_t)vmovl_u16((uint16x4_t)v360);
              int32x4_t v362 = (int32x4_t)vbicq_s8((int8x16_t)vsubq_s32(v357, vclzq_s32(v361)), (int8x16_t)vceqzq_s32(v361));
              int16x4_t v363 = vmovn_s32(vcgtq_s32(v362, v284));
              int32x4_t v364 = vsubq_s32(v362, v284);
              int16x4_t v365 = vmovn_s32(vaddq_s32((int32x4_t)vshlq_u32(vmovl_u16((uint16x4_t)vadd_s16(vsub_s16(v360, vmovn_s32((int32x4_t)vshlq_u32((uint32x4_t)v361, v287))), vmovn_s32((int32x4_t)vshlq_u32(v359, (uint32x4_t)vaddq_s32(v364, v358))))), (uint32x4_t)vnegq_s32(v364)), (int32x4_t)vshlq_u32((uint32x4_t)v364, v285)));
              if (v363.i8[0]) {
                v449.i16[v356] = v365.i16[0];
              }
              if (v363.i8[2]) {
                v449.i16[v356 + 1] = v365.i16[1];
              }
              if (v363.i8[4]) {
                v449.i16[v356 + 2] = v365.i16[2];
              }
              if (v363.i8[6]) {
                v449.i16[v356 + 3] = v365.i16[3];
              }
              v356 += 4;
            }
            while (v356 != 8);
          }
        }
      }
      uint16x8_t v366 = vminq_u16((uint16x8_t)v444, v445[0]);
      v366.i16[0] = vminvq_u16(v366);
      uint16x8_t v367 = vmaxq_u16((uint16x8_t)v444, v445[0]);
      v367.i16[0] = vmaxvq_u16(v367);
      unsigned int v368 = 32 - __clz(v367.i32[0] - v366.u16[0]);
      v369 = (_WORD *)(v281 + ((v7 >> 9) & 0x7FFFF8));
      if (v367.i32[0] == v366.u16[0]) {
        LOWORD(v36_Block_object_dispose(&STACK[0x280], 8) = 0;
      }
      *(_WORD *)(a1 + 44) = v368 - *v369;
      *(_WORD *)(a1 + 42) = v368;
      unsigned int v370 = (unsigned __int16)v369[2];
      if (v370 > v366.u16[0] || (int)((1 << v368) + v370) <= v367.i32[0])
      {
        __int16 v372 = ((v366.i16[0] - (((1 << v368) - (v367.i32[0] - v366.u16[0])) >> 1)) & ~(unsigned __int16)((int)(v366.i32[0] - (((1 << v368) - (v367.i32[0] - v366.u16[0])) >> 1)) >> 31))
             - v370;
        LOWORD(v370) = (v366.i16[0] - (((1 << v368) - (v367.i32[0] - v366.u16[0])) >> 1)) & ~(unsigned __int16)((int)(v366.i32[0] - (((1 << v368) - (v367.i32[0] - v366.u16[0])) >> 1)) >> 31);
      }
      else
      {
        __int16 v372 = 0;
      }
      uint16x8_t v373 = vminq_u16(v445[1], (uint16x8_t)v446);
      v373.i16[0] = vminvq_u16(v373);
      uint16x8_t v374 = vmaxq_u16(v445[1], (uint16x8_t)v446);
      v374.i16[0] = vmaxvq_u16(v374);
      unsigned int v375 = 32 - __clz(v374.i32[0] - v373.u16[0]);
      *(_WORD *)(a1 + 4_Block_object_dispose(&STACK[0x280], 8) = v372;
      *(_WORD *)(a1 + 46) = v370;
      v376 = (_WORD *)(v281 + 8 * ((v7 >> 8) & 0xF));
      if (v374.i32[0] == v373.u16[0]) {
        LOWORD(v375) = 0;
      }
      *(_WORD *)(a1 + 52) = v375 - *v376;
      *(_WORD *)(a1 + 50) = v375;
      int v377 = 1 << v375;
      unsigned int v378 = (unsigned __int16)v376[2];
      if (v378 > v373.u16[0] || (int)(v377 + v378) <= v374.i32[0])
      {
        unsigned __int32 v380 = (v373.i32[0] - ((v377 - (v374.i32[0] - v373.u16[0])) >> 1)) & ~((int)(v373.i32[0]
                                                                                                 - ((v377 - (v374.i32[0] - v373.u16[0])) >> 1)) >> 31);
        __int16 v379 = v380 - v378;
      }
      else
      {
        __int16 v379 = 0;
        LOWORD(v380) = v378;
      }
      uint16x8_t v381 = vminq_u16((uint16x8_t)v447, v448[0]);
      v381.i16[0] = vminvq_u16(v381);
      uint16x8_t v382 = vmaxq_u16((uint16x8_t)v447, v448[0]);
      v382.i16[0] = vmaxvq_u16(v382);
      unsigned int v383 = 32 - __clz(v382.i32[0] - v381.u16[0]);
      *(_WORD *)(a1 + 56) = v379;
      *(_WORD *)(a1 + 54) = v380;
      v384 = (_WORD *)(v281 + 8 * (v7 >> 4));
      if (v382.i32[0] == v381.u16[0]) {
        unsigned __int16 v385 = 0;
      }
      else {
        unsigned __int16 v385 = v383;
      }
      *(_WORD *)(a1 + 60) = v385 - *v384;
      *(_WORD *)(a1 + 5_Block_object_dispose(&STACK[0x280], 8) = v385;
      int v386 = 1 << v385;
      unsigned int v387 = (unsigned __int16)v384[2];
      if (v387 > v381.u16[0] || (int)(v386 + v387) <= v382.i32[0])
      {
        unsigned __int32 v389 = (v381.i32[0] - ((v386 - (v382.i32[0] - v381.u16[0])) >> 1)) & ~((int)(v381.i32[0]
                                                                                                 - ((v386 - (v382.i32[0] - v381.u16[0])) >> 1)) >> 31);
        __int16 v388 = v389 - v387;
      }
      else
      {
        __int16 v388 = 0;
        LOWORD(v389) = v384[2];
      }
      *(_WORD *)(a1 + 64) = v388;
      *(_WORD *)(a1 + 62) = v389;
      if (v6 == 19)
      {
        __int16 v390 = *(_WORD *)(a1 + 72);
      }
      else
      {
        uint16x8_t v391 = vminq_u16(v448[1], (uint16x8_t)v449);
        v391.i16[0] = vminvq_u16(v391);
        uint16x8_t v392 = vmaxq_u16(v448[1], (uint16x8_t)v449);
        v392.i16[0] = vmaxvq_u16(v392);
        unsigned int v393 = 32 - __clz(v392.i32[0] - v391.u16[0]);
        v394 = (_WORD *)(v281 + 8 * (v7 & 0xF));
        if (v392.i32[0] == v391.u16[0]) {
          LOWORD(v393) = 0;
        }
        *(_WORD *)(a1 + 6_Block_object_dispose(&STACK[0x280], 8) = v393 - *v394;
        *(_WORD *)(a1 + 66) = v393;
        int v395 = 1 << v393;
        unsigned int v396 = (unsigned __int16)v394[2];
        if (v396 > v391.u16[0] || (int)(v395 + v396) <= v392.i32[0])
        {
          unsigned __int32 v397 = (v391.i32[0] - ((v395 - (v392.i32[0] - v391.u16[0])) >> 1)) & ~((int)(v391.i32[0] - ((v395 - (v392.i32[0] - v391.u16[0])) >> 1)) >> 31);
          __int16 v390 = v397 - v396;
        }
        else
        {
          __int16 v390 = 0;
          LOWORD(v397) = v394[2];
        }
        *(_WORD *)(a1 + 72) = v390;
        *(_WORD *)(a1 + 70) = v397;
      }
      uint64_t v398 = 0;
      int v399 = 0;
      unsigned int v400 = 0;
      int v401 = 0;
      unsigned int v402 = v372 != 0;
      if (v379) {
        v402 |= 2u;
      }
      if (v388) {
        v402 |= 4u;
      }
      if (v390) {
        v402 |= 8u;
      }
      v403 = (unsigned __int16 *)(a1 + 44);
      break;
    case 11:
    case 16:
    case 25:
      int16x8_t v16 = v3[1];
      int16x8_t v444 = *v3;
      int16x8_t v447 = v16;
      v445[0] = *(uint16x8_t *)((char *)v3 + v4);
      v448[0] = *(uint16x8_t *)((char *)&v3[1] + v4);
      int v17 = (uint16x8_t *)((char *)v3 + 2 * (int)v4);
      v445[1] = *v17;
      v448[1] = v17[1];
      int v18 = (int16x8_t *)((char *)v3 + 3 * v4);
      int16x8_t v446 = *v18;
      int16x8_t v449 = v18[1];
      if (v6 == 15)
      {
        int16x8_t v444 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v444), vmvnq_s8((int8x16_t)v444), (int8x16_t)(*(_OWORD *)&v444 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        v445[0] = (uint16x8_t)vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)v445[0]), vmvnq_s8((int8x16_t)v445[0]), (int8x16_t)(*(_OWORD *)v445 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        v445[1] = (uint16x8_t)vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)v445[1]), vmvnq_s8((int8x16_t)v445[1]), (int8x16_t)(*(_OWORD *)&v445[1] | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        int16x8_t v446 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v446), vmvnq_s8((int8x16_t)v446), (int8x16_t)(*(_OWORD *)&v446 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        int16x8_t v447 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v447), vmvnq_s8((int8x16_t)v447), (int8x16_t)(*(_OWORD *)&v447 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        v448[0] = (uint16x8_t)vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)v448[0]), vmvnq_s8((int8x16_t)v448[0]), (int8x16_t)(*(_OWORD *)v448 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        v448[1] = (uint16x8_t)vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)v448[1]), vmvnq_s8((int8x16_t)v448[1]), (int8x16_t)(*(_OWORD *)&v448[1] | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        int16x8_t v449 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v449), vmvnq_s8((int8x16_t)v449), (int8x16_t)(*(_OWORD *)&v449 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
      }
      if (v5)
      {
        uint32x4_t v19 = (uint32x4_t)vnegq_s32(vdupq_n_s32(v5));
        int16x8_t v444 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v444.i8), v19), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v444), v19));
        v445[0] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v445[0].i8), v19), (int16x8_t)vshlq_u32(vmovl_high_u16(v445[0]), v19));
        v445[1] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v445[1].i8), v19), (int16x8_t)vshlq_u32(vmovl_high_u16(v445[1]), v19));
        int16x8_t v446 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v446.i8), v19), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v446), v19));
        int16x8_t v447 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v447.i8), v19), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v447), v19));
        v448[0] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v448[0].i8), v19), (int16x8_t)vshlq_u32(vmovl_high_u16(v448[0]), v19));
        v448[1] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v448[1].i8), v19), (int16x8_t)vshlq_u32(vmovl_high_u16(v448[1]), v19));
        int16x8_t v449 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v449.i8), v19), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v449), v19));
      }
LABEL_147:
      __int16 v175 = v444.i16[1];
      v444.i16[1] = v445[1].i16[0];
      v445[1].i16[0] = v175;
      __int16 v176 = v444.i16[3];
      v444.i16[3] = v445[1].i16[2];
      v445[1].i16[2] = v176;
      __int16 v177 = v444.i16[5];
      v444.i16[5] = v445[1].i16[4];
      v445[1].i16[4] = v177;
      __int16 v178 = v444.i16[7];
      v444.i16[7] = v445[1].i16[6];
      v445[1].i16[6] = v178;
      __int16 v179 = v445[0].i16[1];
      v445[0].i16[1] = v446.i16[0];
      v446.i16[0] = v179;
      __int16 v180 = v445[0].i16[3];
      v445[0].i16[3] = v446.i16[2];
      v446.i16[2] = v180;
      __int16 v181 = v445[0].i16[5];
      v445[0].i16[5] = v446.i16[4];
      v446.i16[4] = v181;
      __int16 v182 = v445[0].i16[7];
      v445[0].i16[7] = v446.i16[6];
      v446.i16[6] = v182;
      __int16 v183 = v447.i16[1];
      v447.i16[1] = v448[1].i16[0];
      v448[1].i16[0] = v183;
      __int16 v184 = v447.i16[3];
      v447.i16[3] = v448[1].i16[2];
      v448[1].i16[2] = v184;
      __int16 v185 = v447.i16[5];
      v447.i16[5] = v448[1].i16[4];
      v448[1].i16[4] = v185;
      __int16 v186 = v447.i16[7];
      v447.i16[7] = v448[1].i16[6];
      v448[1].i16[6] = v186;
      __int16 v187 = v448[0].i16[1];
      v448[0].i16[1] = v449.i16[0];
      v449.i16[0] = v187;
      __int16 v188 = v448[0].i16[3];
      v448[0].i16[3] = v449.i16[2];
      v449.i16[2] = v188;
      __int16 v189 = v448[0].i16[5];
      v448[0].i16[5] = v449.i16[4];
      v449.i16[4] = v189;
      goto LABEL_180;
    case 12:
    case 18:
      int16x8_t v20 = v3[1];
      int16x8_t v444 = *v3;
      int16x8_t v447 = v20;
      v445[0] = *(uint16x8_t *)((char *)v3 + v4);
      v448[0] = *(uint16x8_t *)((char *)&v3[1] + v4);
      int v21 = (uint16x8_t *)((char *)v3 + 2 * (int)v4);
      v445[1] = *v21;
      v448[1] = v21[1];
      int v22 = (int16x8_t *)((char *)v3 + 3 * v4);
      int16x8_t v446 = *v22;
      int16x8_t v449 = v22[1];
      if (v6 != 12) {
        goto LABEL_177;
      }
      int8x16_t v23 = vbslq_s8((int8x16_t)vcltzq_s16(v444), vmvnq_s8((int8x16_t)v444), (int8x16_t)(*(_OWORD *)&v444 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
      int8x16_t v24 = vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)v445[0]), vmvnq_s8((int8x16_t)v445[0]), (int8x16_t)(*(_OWORD *)v445 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
      goto LABEL_176;
    case 13:
    case 20:
      int16x8_t v444 = *v3;
      v445[1] = *(uint16x8_t *)((char *)v3 + v4);
      v445[0] = *(uint16x8_t *)((char *)v3 + 2 * (int)v4);
      int16x8_t v446 = *(int16x8_t *)((char *)v3 + 3 * v4);
      int16x8_t v447 = *(int16x8_t *)((char *)v3 + 4 * (int)v4);
      v448[1] = *(uint16x8_t *)((char *)v3 + 5 * v4);
      v448[0] = *(uint16x8_t *)((char *)v3 + 6 * (int)v4);
      int16x8_t v449 = *(int16x8_t *)((char *)v3 + 8 * v4 - v4);
      if (v6 == 13)
      {
        int16x8_t v444 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v444), vmvnq_s8((int8x16_t)v444), (int8x16_t)(*(_OWORD *)&v444 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        v445[0] = (uint16x8_t)vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)v445[0]), vmvnq_s8((int8x16_t)v445[0]), (int8x16_t)(*(_OWORD *)v445 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        v445[1] = (uint16x8_t)vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)v445[1]), vmvnq_s8((int8x16_t)v445[1]), (int8x16_t)(*(_OWORD *)&v445[1] | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        int16x8_t v446 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v446), vmvnq_s8((int8x16_t)v446), (int8x16_t)(*(_OWORD *)&v446 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        int16x8_t v447 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v447), vmvnq_s8((int8x16_t)v447), (int8x16_t)(*(_OWORD *)&v447 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        v448[0] = (uint16x8_t)vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)v448[0]), vmvnq_s8((int8x16_t)v448[0]), (int8x16_t)(*(_OWORD *)v448 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        v448[1] = (uint16x8_t)vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)v448[1]), vmvnq_s8((int8x16_t)v448[1]), (int8x16_t)(*(_OWORD *)&v448[1] | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        int16x8_t v449 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v449), vmvnq_s8((int8x16_t)v449), (int8x16_t)(*(_OWORD *)&v449 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
      }
      goto LABEL_171;
    case 14:
    case 22:
      int16x8_t v444 = *v3;
      v445[0] = *(uint16x8_t *)((char *)v3 + v4);
      v445[1] = *(uint16x8_t *)((char *)v3 + 2 * (int)v4);
      int16x8_t v446 = *(int16x8_t *)((char *)v3 + 3 * v4);
      int16x8_t v447 = *(int16x8_t *)((char *)v3 + 4 * (int)v4);
      v448[0] = *(uint16x8_t *)((char *)v3 + 5 * v4);
      v448[1] = *(uint16x8_t *)((char *)v3 + 6 * (int)v4);
      int16x8_t v449 = *(int16x8_t *)((char *)v3 + 7 * (int)v4);
      if (v6 == 14)
      {
        int16x8_t v444 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v444), vmvnq_s8((int8x16_t)v444), (int8x16_t)(*(_OWORD *)&v444 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        v445[0] = (uint16x8_t)vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)v445[0]), vmvnq_s8((int8x16_t)v445[0]), (int8x16_t)(*(_OWORD *)v445 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        v445[1] = (uint16x8_t)vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)v445[1]), vmvnq_s8((int8x16_t)v445[1]), (int8x16_t)(*(_OWORD *)&v445[1] | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        int16x8_t v446 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v446), vmvnq_s8((int8x16_t)v446), (int8x16_t)(*(_OWORD *)&v446 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        int16x8_t v447 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v447), vmvnq_s8((int8x16_t)v447), (int8x16_t)(*(_OWORD *)&v447 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        v448[0] = (uint16x8_t)vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)v448[0]), vmvnq_s8((int8x16_t)v448[0]), (int8x16_t)(*(_OWORD *)v448 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        v448[1] = (uint16x8_t)vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)v448[1]), vmvnq_s8((int8x16_t)v448[1]), (int8x16_t)(*(_OWORD *)&v448[1] | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        int16x8_t v449 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v449), vmvnq_s8((int8x16_t)v449), (int8x16_t)(*(_OWORD *)&v449 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
      }
      if (v5)
      {
        uint32x4_t v25 = (uint32x4_t)vnegq_s32(vdupq_n_s32(v5));
        int16x8_t v444 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v444.i8), v25), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v444), v25));
        v445[0] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v445[0].i8), v25), (int16x8_t)vshlq_u32(vmovl_high_u16(v445[0]), v25));
        v445[1] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v445[1].i8), v25), (int16x8_t)vshlq_u32(vmovl_high_u16(v445[1]), v25));
        int16x8_t v446 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v446.i8), v25), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v446), v25));
        int16x8_t v447 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v447.i8), v25), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v447), v25));
        v448[0] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v448[0].i8), v25), (int16x8_t)vshlq_u32(vmovl_high_u16(v448[0]), v25));
        v448[1] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v448[1].i8), v25), (int16x8_t)vshlq_u32(vmovl_high_u16(v448[1]), v25));
        int16x8_t v449 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v449.i8), v25), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v449), v25));
      }
LABEL_92:
      __int16 v71 = v444.i16[2];
      __int16 v72 = v444.i16[3];
      __int32 v73 = v444.i32[3];
      v444.i32[1] = v447.i32[0];
      v444.i32[3] = v447.i32[2];
      v447.i32[2] = v73;
      __int16 v74 = v445[0].i16[2];
      LOWORD(v73) = v445[0].i16[3];
      v445[0].i32[1] = v448[0].i32[0];
      __int16 v75 = v445[0].i16[6];
      v445[0].i16[6] = v448[0].i16[4];
      v448[0].i16[4] = v75;
      __int16 v76 = v445[0].i16[7];
      v445[0].i16[7] = v448[0].i16[5];
      v448[0].i16[5] = v76;
      __int16 v77 = v445[1].i16[2];
      v445[1].i16[2] = v448[1].i16[0];
      v448[1].i16[0] = v77;
      __int16 v78 = v445[1].i16[3];
      v445[1].i16[3] = v448[1].i16[1];
      v448[1].i16[1] = v78;
      __int16 v79 = v448[1].i16[4];
      v448[1].i16[4] = v445[1].i16[6];
      __int16 v80 = v448[1].i16[5];
      v448[1].i16[5] = v445[1].i16[7];
      __int16 v81 = v446.i16[2];
      v446.i16[2] = v449.i16[0];
      v449.i16[0] = v81;
      __int16 v82 = v446.i16[3];
      v446.i16[3] = v449.i16[1];
      v449.i16[1] = v82;
      __int16 v83 = v449.i16[4];
      v449.i16[4] = v446.i16[6];
      __int16 v84 = v449.i16[5];
      v449.i16[5] = v446.i16[7];
      __int16 v85 = v445[1].i16[4];
      v445[1].i16[4] = v71;
      v447.i16[0] = v85;
      __int16 v86 = v445[1].i16[5];
      v445[1].i16[5] = v72;
      v447.i16[1] = v86;
      v445[1].i32[3] = v447.i32[1];
      v447.i16[2] = v79;
      v447.i16[3] = v80;
      __int16 v87 = v446.i16[4];
      v446.i16[4] = v74;
      v448[0].i16[0] = v87;
      __int16 v88 = v446.i16[5];
      v446.i16[5] = v73;
      v448[0].i16[1] = v88;
      v446.i16[6] = v448[0].i16[2];
      v448[0].i16[2] = v83;
      goto LABEL_174;
    case 17:
      int16x8_t v444 = *v3;
      int16x8_t v447 = *(int16x8_t *)((char *)v3 + v4);
      v445[0] = *(uint16x8_t *)((char *)v3 + 2 * (int)v4);
      v448[0] = *(uint16x8_t *)((char *)v3 + 3 * v4);
      v445[1] = *(uint16x8_t *)((char *)v3 + 4 * (int)v4);
      v448[1] = *(uint16x8_t *)((char *)v3 + 5 * v4);
      int16x8_t v446 = *(int16x8_t *)((char *)v3 + 6 * (int)v4);
      int16x8_t v449 = *(int16x8_t *)((char *)v3 + 8 * v4 - v4);
      if (v5)
      {
        uint32x4_t v198 = (uint32x4_t)vnegq_s32(vdupq_n_s32(v5));
        int16x8_t v444 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v444.i8), v198), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v444), v198));
        v445[0] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v445[0].i8), v198), (int16x8_t)vshlq_u32(vmovl_high_u16(v445[0]), v198));
        v445[1] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v445[1].i8), v198), (int16x8_t)vshlq_u32(vmovl_high_u16(v445[1]), v198));
        int16x8_t v446 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v446.i8), v198), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v446), v198));
        int16x8_t v447 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v447.i8), v198), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v447), v198));
        v448[0] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v448[0].i8), v198), (int16x8_t)vshlq_u32(vmovl_high_u16(v448[0]), v198));
        v448[1] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v448[1].i8), v198), (int16x8_t)vshlq_u32(vmovl_high_u16(v448[1]), v198));
        int16x8_t v449 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v449.i8), v198), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v449), v198));
      }
      __int16 v199 = v445[1].i16[1];
      v445[1].i16[1] = v444.i16[0];
      v444.i16[0] = v199;
      __int16 v200 = v445[1].i16[3];
      v445[1].i16[3] = v444.i16[2];
      __int16 v201 = v445[1].i16[5];
      v445[1].i16[5] = v444.i16[4];
      v444.i16[4] = v201;
      __int16 v202 = v445[1].i16[7];
      v445[1].i16[7] = v444.i16[6];
      __int16 v203 = v446.i16[1];
      v446.i16[1] = v445[0].i16[0];
      v445[0].i16[0] = v203;
      __int16 v204 = v446.i16[3];
      v446.i16[3] = v445[0].i16[2];
      __int16 v205 = v446.i16[5];
      v446.i16[5] = v445[0].i16[4];
      v445[0].i16[4] = v205;
      __int16 v206 = v446.i16[7];
      v446.i16[7] = v445[0].i16[6];
      __int16 v207 = v448[1].i16[0];
      v448[1].i16[0] = v447.i16[1];
      __int16 v208 = v447.i16[3];
      v447.i16[3] = v448[1].i16[2];
      v448[1].i16[2] = v208;
      __int16 v209 = v448[1].i16[4];
      v448[1].i16[4] = v447.i16[5];
      __int16 v210 = v447.i16[7];
      v447.i16[7] = v448[1].i16[6];
      v448[1].i16[6] = v210;
      __int16 v211 = v449.i16[0];
      v449.i16[0] = v448[0].i16[1];
      __int16 v212 = v448[0].i16[3];
      v448[0].i16[3] = v449.i16[2];
      v449.i16[2] = v212;
      __int16 v213 = v449.i16[4];
      v449.i16[4] = v448[0].i16[5];
      __int16 v214 = v448[0].i16[7];
      v448[0].i16[7] = v449.i16[6];
      v449.i16[6] = v214;
      v444.i16[2] = v447.i16[0];
      v447.i16[0] = v200;
      __int16 v215 = v444.i16[3];
      v444.i16[3] = v207;
      v447.i16[1] = v215;
      v444.i16[6] = v447.i16[4];
      v447.i16[4] = v202;
      __int16 v216 = v444.i16[7];
      v444.i16[7] = v209;
      v447.i16[5] = v216;
      v445[0].i16[2] = v448[0].i16[0];
      v448[0].i16[0] = v204;
      __int16 v217 = v445[0].i16[3];
      v445[0].i16[3] = v211;
      v448[0].i16[1] = v217;
      v445[0].i16[6] = v448[0].i16[4];
      v448[0].i16[4] = v206;
      __int16 v218 = v445[0].i16[7];
      v445[0].i16[7] = v213;
      v448[0].i16[5] = v218;
      goto LABEL_181;
    case 19:
      uint64_t v219 = 0;
      uint64_t v220 = 0;
      int16x8_t v449 = 0u;
      int16x8_t v447 = 0u;
      memset(v448, 0, sizeof(v448));
      int16x8_t v446 = 0u;
      char v221 = 1;
      int16x8_t v444 = 0u;
      memset(v445, 0, sizeof(v445));
      do
      {
        uint64_t v222 = 0;
        char v223 = v221;
        int v224 = 2 * v219;
        uint64_t v225 = 16 * v219;
        do
        {
          uint64_t v226 = 0;
          uint64_t v227 = v225;
          do
          {
            if (!(v222 & 3 | v226)) {
              uint64_t v220 = (__int16 *)((char *)v3->i16 + (int)((v224 + (v222 >> 2)) * v4));
            }
            __int16 v228 = *v220++;
            *(__int16 *)((char *)v444.i16 + v227) = v228;
            ++v226;
            v227 += 32;
          }
          while (v226 != 3);
          ++v222;
          v225 += 2;
        }
        while (v222 != 8);
        char v221 = 0;
        uint64_t v219 = 1;
      }
      while ((v223 & 1) != 0);
      if (v5)
      {
        uint32x4_t v229 = (uint32x4_t)vnegq_s32(vdupq_n_s32(v5));
        int16x8_t v444 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v444.i8), v229), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v444), v229));
        v445[0] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v445[0].i8), v229), (int16x8_t)vshlq_u32(vmovl_high_u16(v445[0]), v229));
        v445[1] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v445[1].i8), v229), (int16x8_t)vshlq_u32(vmovl_high_u16(v445[1]), v229));
        int16x8_t v446 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v446.i8), v229), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v446), v229));
        int16x8_t v447 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v447.i8), v229), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v447), v229));
        v448[0] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v448[0].i8), v229), (int16x8_t)vshlq_u32(vmovl_high_u16(v448[0]), v229));
      }
      goto LABEL_181;
    case 21:
      int16x8_t v230 = v3[1];
      int16x8_t v444 = *v3;
      int16x8_t v447 = v230;
      v445[1] = *(uint16x8_t *)((char *)v3 + v4);
      v448[1] = *(uint16x8_t *)((char *)&v3[1] + v4);
      CFArrayRef v231 = (uint16x8_t *)((char *)v3 + 2 * (int)v4);
      v445[0] = *v231;
      v448[0] = v231[1];
      uint64_t v232 = (int16x8_t *)((char *)v3 + 3 * (int)v4);
      int16x8_t v446 = *v232;
      int16x8_t v449 = v232[1];
LABEL_171:
      if (v5)
      {
        uint32x4_t v233 = (uint32x4_t)vnegq_s32(vdupq_n_s32(v5));
        int16x8_t v444 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v444.i8), v233), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v444), v233));
        v445[0] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v445[0].i8), v233), (int16x8_t)vshlq_u32(vmovl_high_u16(v445[0]), v233));
        v445[1] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v445[1].i8), v233), (int16x8_t)vshlq_u32(vmovl_high_u16(v445[1]), v233));
        int16x8_t v446 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v446.i8), v233), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v446), v233));
        int16x8_t v447 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v447.i8), v233), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v447), v233));
        v448[0] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v448[0].i8), v233), (int16x8_t)vshlq_u32(vmovl_high_u16(v448[0]), v233));
        v448[1] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v448[1].i8), v233), (int16x8_t)vshlq_u32(vmovl_high_u16(v448[1]), v233));
        int16x8_t v449 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v449.i8), v233), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v449), v233));
      }
LABEL_173:
      __int16 v234 = v444.i16[1];
      v444.i16[1] = v447.i16[0];
      __int16 v235 = v444.i16[3];
      v444.i16[3] = v447.i16[2];
      __int16 v236 = v444.i16[5];
      v444.i16[5] = v447.i16[4];
      v447.i16[4] = v236;
      __int16 v237 = v444.i16[7];
      v444.i16[7] = v447.i16[6];
      v447.i16[6] = v237;
      __int16 v238 = v445[0].i16[1];
      v445[0].i16[1] = v448[0].i16[0];
      __int16 v239 = v445[0].i16[3];
      v445[0].i16[3] = v448[0].i16[2];
      __int16 v240 = v445[0].i16[5];
      v445[0].i16[5] = v448[0].i16[4];
      v448[0].i16[4] = v240;
      __int16 v241 = v445[0].i16[7];
      v445[0].i16[7] = v448[0].i16[6];
      v448[0].i16[6] = v241;
      __int16 v242 = v445[1].i16[1];
      v445[1].i16[1] = v448[1].i16[0];
      v448[1].i16[0] = v242;
      __int16 v243 = v445[1].i16[3];
      v445[1].i16[3] = v448[1].i16[2];
      v448[1].i16[2] = v243;
      __int16 v244 = v448[1].i16[4];
      v448[1].i16[4] = v445[1].i16[5];
      __int16 v245 = v448[1].i16[6];
      v448[1].i16[6] = v445[1].i16[7];
      __int16 v246 = v446.i16[1];
      v446.i16[1] = v449.i16[0];
      v449.i16[0] = v246;
      __int16 v247 = v446.i16[3];
      v446.i16[3] = v449.i16[2];
      v449.i16[2] = v247;
      __int16 v248 = v449.i16[4];
      v449.i16[4] = v446.i16[5];
      __int16 v84 = v449.i16[6];
      v449.i16[6] = v446.i16[7];
      __int16 v249 = v445[1].i16[4];
      v445[1].i16[4] = v234;
      v447.i16[0] = v249;
      v445[1].i16[5] = v447.i16[1];
      v447.i16[1] = v244;
      __int16 v250 = v445[1].i16[6];
      v445[1].i16[6] = v235;
      v447.i16[2] = v250;
      v445[1].i16[7] = v447.i16[3];
      v447.i16[3] = v245;
      __int16 v251 = v446.i16[4];
      v446.i16[4] = v238;
      v448[0].i16[0] = v251;
      v446.i16[5] = v448[0].i16[1];
      v448[0].i16[1] = v248;
      __int16 v252 = v446.i16[6];
      v446.i16[6] = v239;
      v448[0].i16[2] = v252;
LABEL_174:
      v446.i16[7] = v448[0].i16[3];
      v448[0].i16[3] = v84;
      goto LABEL_181;
    case 23:
      int16x8_t v253 = v3[1];
      int16x8_t v444 = *v3;
      int16x8_t v447 = v253;
      v445[0] = *(uint16x8_t *)((char *)v3 + v4);
      v448[0] = *(uint16x8_t *)((char *)&v3[1] + v4);
      uint64_t v254 = (uint16x8_t *)((char *)v3 + 2 * (int)v4);
      v445[1] = *v254;
      v448[1] = v254[1];
      int64_t v255 = (int16x8_t *)((char *)v3 + 3 * v4);
      int16x8_t v446 = *v255;
      int16x8_t v449 = v255[1];
      int8x16_t v23 = vbslq_s8((int8x16_t)vcltzq_s16(v444), vmvnq_s8((int8x16_t)v444), (int8x16_t)(*(_OWORD *)&v444 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
      int8x16_t v24 = vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)v445[0]), vmvnq_s8((int8x16_t)v445[0]), (int8x16_t)(*(_OWORD *)v445 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
LABEL_176:
      int16x8_t v444 = (int16x8_t)v23;
      v445[0] = (uint16x8_t)v24;
      v445[1] = (uint16x8_t)vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)v445[1]), vmvnq_s8((int8x16_t)v445[1]), (int8x16_t)(*(_OWORD *)&v445[1] | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
      int16x8_t v446 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v446), vmvnq_s8((int8x16_t)v446), (int8x16_t)(*(_OWORD *)&v446 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
      int16x8_t v447 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v447), vmvnq_s8((int8x16_t)v447), (int8x16_t)(*(_OWORD *)&v447 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
      v448[0] = (uint16x8_t)vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)v448[0]), vmvnq_s8((int8x16_t)v448[0]), (int8x16_t)(*(_OWORD *)v448 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
      v448[1] = (uint16x8_t)vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)v448[1]), vmvnq_s8((int8x16_t)v448[1]), (int8x16_t)(*(_OWORD *)&v448[1] | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
      int16x8_t v449 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v449), vmvnq_s8((int8x16_t)v449), (int8x16_t)(*(_OWORD *)&v449 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
LABEL_177:
      if (v5)
      {
        uint32x4_t v256 = (uint32x4_t)vnegq_s32(vdupq_n_s32(v5));
        int16x8_t v444 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v444.i8), v256), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v444), v256));
        v445[0] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v445[0].i8), v256), (int16x8_t)vshlq_u32(vmovl_high_u16(v445[0]), v256));
        v445[1] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v445[1].i8), v256), (int16x8_t)vshlq_u32(vmovl_high_u16(v445[1]), v256));
        int16x8_t v446 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v446.i8), v256), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v446), v256));
        int16x8_t v447 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v447.i8), v256), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v447), v256));
        v448[0] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v448[0].i8), v256), (int16x8_t)vshlq_u32(vmovl_high_u16(v448[0]), v256));
        v448[1] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v448[1].i8), v256), (int16x8_t)vshlq_u32(vmovl_high_u16(v448[1]), v256));
        int16x8_t v449 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v449.i8), v256), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v449), v256));
      }
      __int16 v257 = v444.i16[2];
      v444.i16[2] = v447.i16[0];
      v447.i16[0] = v257;
      __int16 v258 = v444.i16[3];
      __int16 v259 = v444.i16[6];
      v444.i16[6] = v447.i16[4];
      v447.i16[4] = v259;
      __int16 v260 = v444.i16[7];
      __int16 v261 = v445[0].i16[2];
      v445[0].i16[2] = v448[0].i16[0];
      v448[0].i16[0] = v261;
      __int16 v262 = v445[0].i16[3];
      __int16 v263 = v445[0].i16[6];
      v445[0].i16[6] = v448[0].i16[4];
      v448[0].i16[4] = v263;
      __int16 v264 = v445[0].i16[7];
      __int16 v265 = v445[1].i16[2];
      __int16 v266 = v445[1].i16[3];
      v445[1].i16[3] = v448[1].i16[1];
      v448[1].i16[1] = v266;
      __int16 v267 = v445[1].i16[6];
      __int16 v268 = v445[1].i16[7];
      v445[1].i16[7] = v448[1].i16[5];
      v448[1].i16[5] = v268;
      __int16 v269 = v446.i16[2];
      __int16 v270 = v446.i16[3];
      v446.i16[3] = v449.i16[1];
      v449.i16[1] = v270;
      __int16 v271 = v446.i16[6];
      __int16 v272 = v446.i16[7];
      v446.i16[7] = v449.i16[5];
      v449.i16[5] = v272;
      __int16 v273 = v444.i16[1];
      v444.i16[1] = v445[1].i16[0];
      v445[1].i16[0] = v273;
      v444.i16[3] = v448[1].i16[0];
      v445[1].i16[2] = v447.i16[1];
      __int16 v274 = v444.i16[5];
      v444.i16[5] = v445[1].i16[4];
      v445[1].i16[4] = v274;
      v444.i16[7] = v448[1].i16[4];
      v445[1].i16[6] = v447.i16[5];
      __int16 v275 = v445[0].i16[1];
      v445[0].i16[1] = v446.i16[0];
      v446.i16[0] = v275;
      v445[0].i16[3] = v449.i16[0];
      v446.i16[2] = v448[0].i16[1];
      __int16 v276 = v445[0].i16[5];
      v445[0].i16[5] = v446.i16[4];
      v446.i16[4] = v276;
      v445[0].i16[7] = v449.i16[4];
      v446.i16[6] = v448[0].i16[5];
      v447.i16[1] = v265;
      v448[1].i16[0] = v258;
      __int16 v277 = v447.i16[3];
      v447.i16[3] = v448[1].i16[2];
      v448[1].i16[2] = v277;
      v447.i16[5] = v267;
      v448[1].i16[4] = v260;
      __int16 v278 = v447.i16[7];
      v447.i16[7] = v448[1].i16[6];
      v448[1].i16[6] = v278;
      v448[0].i16[1] = v269;
      v449.i16[0] = v262;
      __int16 v279 = v448[0].i16[3];
      v448[0].i16[3] = v449.i16[2];
      v449.i16[2] = v279;
      v448[0].i16[5] = v271;
      v449.i16[4] = v264;
LABEL_180:
      __int16 v280 = v448[0].i16[7];
      v448[0].i16[7] = v449.i16[6];
      v449.i16[6] = v280;
      goto LABEL_181;
    default:
      return 4294951891;
  }
  do
  {
    int v405 = *v403;
    v403 += 4;
    int v404 = v405;
    if ((unsigned __int16)(v405 + 2) >= 5u)
    {
      int v407 = (unsigned __int16)v368;
      if ((unsigned __int16)v368 <= 0xFu)
      {
        if ((unsigned __int16)v375 <= 0xFu)
        {
          if (v385 <= 0xFu)
          {
            unsigned int v408 = *(unsigned __int16 *)(a1 + 66);
            if (v408 <= 0xF)
            {
              *int v2 = v402 + 64;
              v2[1] = *(unsigned char *)(a1 + 42) + 16 * *(unsigned char *)(a1 + 50);
              v412 = (unint64_t *)(v2 + 3);
              v2[2] = *(unsigned char *)(a1 + 58) + 16 * *(unsigned char *)(a1 + 66);
              goto LABEL_326;
            }
            goto LABEL_316;
          }
          if (v385 != 16) {
            return 4294951894;
          }
LABEL_315:
          unsigned int v408 = *(unsigned __int16 *)(a1 + 66);
LABEL_316:
          if (v408 <= 0x10)
          {
            *int v2 = v402 + 80;
            int v409 = *(unsigned __int16 *)(a1 + 42) + (*(unsigned __int16 *)(a1 + 50) << 6);
            int v410 = v409 + (*(unsigned __int16 *)(a1 + 58) << 12);
            int v411 = v410 + (*(unsigned __int16 *)(a1 + 66) << 18);
            v2[1] = v409;
            v2[2] = BYTE1(v410);
            v412 = (unint64_t *)(v2 + 4);
            v2[3] = BYTE2(v411);
            goto LABEL_326;
          }
          return 4294951894;
        }
        uint64_t v10 = 4294951894;
        if ((unsigned __int16)v375 != 16) {
          return v10;
        }
      }
      else
      {
        uint64_t v10 = 4294951894;
        if (v407 != 16 || (unsigned __int16)v375 > 0x10u) {
          return v10;
        }
      }
      if (v385 > 0x10u) {
        return v10;
      }
      goto LABEL_315;
    }
    if (v404)
    {
      int v399 = v398;
      ++v401;
    }
    unsigned int v400 = 5 * v400 + v404 + 2;
    ++v398;
  }
  while (v398 != 4);
  if (v401 == 1)
  {
    unsigned int v413 = *(unsigned __int16 *)(v281 + 8 * v399 + 2);
    if (v413 != 0xFFFF && v413 != 1) {
      goto LABEL_325;
    }
    int v406 = ((v413 >> 11) & 0x10 | (32 * v399)) + v402 + 128;
LABEL_324:
    *int v2 = v406;
    v412 = (unint64_t *)(v2 + 1);
  }
  else
  {
    if (!v401)
    {
      LOBYTE(v406) = v402 + 48;
      goto LABEL_324;
    }
LABEL_325:
    *int v2 = ((v400 >> 4) & 0xF0) + v402;
    v412 = (unint64_t *)(v2 + 2);
    v2[1] = v400;
  }
LABEL_326:
  uint64_t v415 = 0;
  while (2)
  {
    if (v402)
    {
      uint64_t v416 = a1 + v415;
      if (v6 <= 5)
      {
        LOWORD(v416) = *(_WORD *)(v416 + 46);
        goto LABEL_335;
      }
      int v417 = *(__int16 *)(v416 + 48);
      if (v417 >= 0) {
        LOWORD(v416) = *(_WORD *)(v416 + 48);
      }
      else {
        LODWORD(v416) = -v417;
      }
      int v418 = (v417 >> 9) & 0x40;
      if ((unsigned __int16)v416 > 0x3Fu)
      {
        if ((v416 & 0xC000) != 0)
        {
          unsigned int v421 = *(unsigned __int16 *)(a1 + v415 + 46);
          *(unsigned char *)v412 = 0;
          v420 = (unint64_t *)((char *)v412 + 2);
          *((unsigned char *)v412 + 1) = v421;
          LODWORD(v416) = v421 >> 8;
          uint64_t v419 = 3;
        }
        else
        {
          *(unsigned char *)v412 = v416 & 0x3F | v418 | 0x80;
          v420 = (unint64_t *)((char *)v412 + 1);
          LOWORD(v416) = (unsigned __int16)v416 >> 6;
          uint64_t v419 = 2;
        }
      }
      else
      {
        LOBYTE(v416) = v418 + v416;
LABEL_335:
        uint64_t v419 = 1;
        v420 = v412;
      }
      v412 = (unint64_t *)((char *)v412 + v419);
      *(unsigned char *)v420 = v416;
    }
    v402 >>= 1;
    v415 += 8;
    if (v415 != 32) {
      continue;
    }
    break;
  }
  if (!v412) {
    return 4294951894;
  }
  v422 = (const __int16 *)(a1 + 46);
  int16x8_t v423 = vld1q_dup_s16(v422);
  int16x8_t v444 = vsubq_s16(v444, v423);
  v445[0] = (uint16x8_t)vsubq_s16((int16x8_t)v445[0], v423);
  v424 = (const __int16 *)(a1 + 54);
  int16x8_t v425 = vld1q_dup_s16(v424);
  v445[1] = (uint16x8_t)vsubq_s16((int16x8_t)v445[1], v425);
  int16x8_t v446 = vsubq_s16(v446, v425);
  v426 = (const __int16 *)(a1 + 62);
  int16x8_t v427 = vld1q_dup_s16(v426);
  int16x8_t v447 = vsubq_s16(v447, v427);
  v448[0] = (uint16x8_t)vsubq_s16((int16x8_t)v448[0], v427);
  if (v6 == 19
    || (v428 = (const __int16 *)(a1 + 70),
        int16x8_t v429 = vld1q_dup_s16(v428),
        v448[1] = (uint16x8_t)vsubq_s16((int16x8_t)v448[1], v429),
        int16x8_t v449 = vsubq_s16(v449, v429),
        (int)v6 > 16)
    || !*(_DWORD *)(a1 + 108))
  {
    v436 = vectorWritePacked(v412, (uint64_t)&v444, *(unsigned __int16 *)(a1 + 42));
    v437 = vectorWritePacked(v436, (uint64_t)v445, *(unsigned __int16 *)(a1 + 42));
    v438 = vectorWritePacked(v437, (uint64_t)v445[1].i64, *(unsigned __int16 *)(a1 + 50));
    v439 = vectorWritePacked(v438, (uint64_t)&v446, *(unsigned __int16 *)(a1 + 50));
    v440 = vectorWritePacked(v439, (uint64_t)&v447, *(unsigned __int16 *)(a1 + 58));
    v412 = vectorWritePacked(v440, (uint64_t)v448, *(unsigned __int16 *)(a1 + 58));
    if (v6 != 19)
    {
      v441 = vectorWritePacked(v412, (uint64_t)v448[1].i64, *(unsigned __int16 *)(a1 + 66));
      v412 = vectorWritePacked(v441, (uint64_t)&v449, *(unsigned __int16 *)(a1 + 66));
    }
  }
  else
  {
    uint64_t v430 = 0;
    v431 = (uint16x4_t *)v445;
    do
    {
      int v432 = *(unsigned __int16 *)(v281 + v430);
      int v433 = *(_DWORD *)(a1 + 108) * v432;
      uint32x4_t v443 = (uint32x4_t)vnegq_s32(vdupq_n_s32(v433 / 8));
      *(int16x8_t *)v431[-2].uint64_t i8 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(v431[-2]), v443), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v431[-2].i8), v443));
      int v434 = v432 - v433 / 8;
      v435 = vectorWritePacked(v412, (uint64_t)&v431[-2], v434);
      *(int16x8_t *)v431->uint64_t i8 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*v431), v443), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v431->i8), v443));
      v412 = vectorWritePacked(v435, (uint64_t)v431, v434);
      v431 += 4;
      v430 += 8;
    }
    while (v430 != 32);
  }
  uint64_t v10 = 0;
  *(void *)(a1 + 16) = v412;
  return v10;
}

unsigned int *vectorload_4x16_packed10(unsigned int *a1, int a2, int a3, _WORD *a4)
{
  vectorload_1x16_packed10(a1, a2, a4, a4 + 32);
  vectorload_1x16_packed10((unsigned int *)((char *)a1 + a3), a2, a4 + 8, a4 + 40);
  vectorload_1x16_packed10((unsigned int *)((char *)a1 + 2 * a3), a2, a4 + 16, a4 + 48);
  return vectorload_1x16_packed10((unsigned int *)((char *)a1 + 3 * a3), a2, a4 + 24, a4 + 56);
}

double SlimXDecodeBlocks_C(uint64_t a1)
{
  uint64_t v499 = *MEMORY[0x1E4F143B8];
  int v2 = *(_DWORD *)(a1 + 108);
  if (v2 >= 8) {
    goto LABEL_359;
  }
  unint64_t v3 = *(void *)(a1 + 16);
  unint64_t v4 = *(void *)(a1 + 24);
  if (v3 >= v4) {
    goto LABEL_359;
  }
  unsigned int v5 = *(int16x8_t **)a1;
  uint64_t v6 = *(int *)(a1 + 12);
  uint64_t v7 = a1 + 42;
  unsigned int v490 = *(_DWORD *)(a1 + 36);
  uint64_t v8 = *(unsigned int *)(a1 + 32);
  unint64_t v9 = predictionPattern_0[v8];
  unint64_t v10 = v4 - v3;
  int16x8_t v11 = (unsigned __int8 *)(v3 + 2);
  while (1)
  {
    uint64_t v12 = v11 - 1;
    *(void *)(a1 + 16) = v11 - 1;
    unint64_t v13 = *(v11 - 2);
    unsigned int v14 = v13 & 0xF;
    unsigned int v15 = v13 >> 4;
    if (v13 >> 4 != 6) {
      break;
    }
    if (v14 < 8)
    {
      unsigned int v16 = 10 - v14;
      if ((v13 & 0xF) == 0) {
        unsigned int v16 = 0;
      }
      *(_DWORD *)(a1 + 10_Block_object_dispose(&STACK[0x280], 8) = v14;
      *(_DWORD *)(a1 + 112) = v16;
      ++v11;
      int v2 = v13 & 0xF;
      if (--v10) {
        continue;
      }
    }
    goto LABEL_359;
  }
  switch(v15)
  {
    case 0u:
    case 1u:
    case 2u:
      if ((unint64_t)v12 >= v4) {
        goto LABEL_359;
      }
      *(void *)(a1 + 16) = v11;
      unsigned __int16 v17 = *(v11 - 1) | (unsigned __int16)((_WORD)v15 << 8);
      unsigned int v18 = v17;
      __int16 v19 = v17 % 5u;
      *(_WORD *)(a1 + 6_Block_object_dispose(&STACK[0x280], 8) = v17 % 5u;
      __int16 v20 = (v17 / 5u) % 5u;
      *(_WORD *)(a1 + 60) = v20;
      __int16 v21 = ((((unsigned __int16)(v17 - ((18351 * v18) >> 16)) >> 1) + ((18351 * v18) >> 16)) >> 4)
          % 5u;
      *(_WORD *)(a1 + 52) = v21;
      unsigned int v22 = (((unsigned __int16)(v17 - ((1573 * v18) >> 16)) >> 1) + ((1573 * v18) >> 16)) >> 6;
      if (v18 >= 0x271) {
        LOWORD(v22) = v22 - 5;
      }
      *(_WORD *)(a1 + 44) = v22;
LABEL_25:
      unsigned __int16 v23 = v22 + *(_WORD *)(v7 + ((v9 >> 9) & 0x7FFFF8)) - 2;
      *(_WORD *)(a1 + 42) = v23;
      LOWORD(v24) = v21 + *(_WORD *)(v7 + 8 * ((v9 >> 8) & 0xF)) - 2;
      *(_WORD *)(a1 + 50) = v24;
      LOWORD(v25) = v20 + *(_WORD *)(v7 + 8 * (v9 >> 4)) - 2;
      *(_WORD *)(a1 + 5_Block_object_dispose(&STACK[0x280], 8) = v25;
      LOWORD(v26) = v19 + *(_WORD *)(v7 + 8 * (v9 & 0xF)) - 2;
      *(_WORD *)(a1 + 66) = v26;
      goto LABEL_26;
    case 3u:
      unsigned __int16 v23 = *(_WORD *)(v7 + ((v9 >> 9) & 0x7FFFF8));
      *(_WORD *)(a1 + 42) = v23;
      LOWORD(v24) = *(_WORD *)(v7 + 8 * ((v9 >> 8) & 0xF));
      *(_WORD *)(a1 + 50) = v24;
      LOWORD(v25) = *(_WORD *)(v7 + 8 * (v9 >> 4));
      *(_WORD *)(a1 + 5_Block_object_dispose(&STACK[0x280], 8) = v25;
      LOWORD(v26) = *(_WORD *)(v7 + 8 * (v9 & 0xF));
      goto LABEL_23;
    case 4u:
      if ((unint64_t)v12 >= v4) {
        goto LABEL_359;
      }
      *(void *)(a1 + 16) = v11;
      unsigned int v27 = *(v11 - 1);
      unsigned __int16 v23 = v27 & 0xF;
      *(_WORD *)(a1 + 42) = v23;
      unsigned int v24 = v27 >> 4;
      *(_WORD *)(a1 + 50) = v24;
      if ((unint64_t)v11 >= v4) {
        goto LABEL_359;
      }
      uint64_t v12 = v11 + 1;
      *(void *)(a1 + 16) = v11 + 1;
      unsigned int v28 = *v11;
      LOWORD(v25) = v28 & 0xF;
      *(_WORD *)(a1 + 5_Block_object_dispose(&STACK[0x280], 8) = v25;
      unsigned int v26 = v28 >> 4;
      goto LABEL_23;
    case 5u:
      if ((unint64_t)v12 >= v4) {
        goto LABEL_359;
      }
      *(void *)(a1 + 16) = v11;
      if ((unint64_t)v11 >= v4) {
        goto LABEL_359;
      }
      int v29 = *(v11 - 1);
      *(void *)(a1 + 16) = v11 + 1;
      if ((unint64_t)(v11 + 1) >= v4) {
        goto LABEL_359;
      }
      int v30 = *v11;
      uint64_t v12 = v11 + 2;
      *(void *)(a1 + 16) = v11 + 2;
      unsigned int v31 = v11[1];
      unsigned __int16 v23 = v29 & 0x3F;
      *(_WORD *)(a1 + 42) = v23;
      unsigned int v24 = ((v29 & 0xFFFF00FF | (v30 << 8)) >> 6) & 0x3F;
      *(_WORD *)(a1 + 50) = v24;
      unsigned int v25 = (((v30 << 8) | (v31 << 16)) >> 12) & 0x3F;
      *(_WORD *)(a1 + 5_Block_object_dispose(&STACK[0x280], 8) = (((v30 << 8) | (v31 << 16)) >> 12) & 0x3F;
      unsigned int v26 = v31 >> 2;
LABEL_23:
      *(_WORD *)(a1 + 66) = v26;
      int16x8_t v11 = v12;
LABEL_26:
      if (v8 >= 6) {
        unsigned int v32 = 16;
      }
      else {
        unsigned int v32 = 8;
      }
      if (v32 < v23 || v32 < (unsigned __int16)v24 || v32 < (unsigned __int16)v25 || v32 < (unsigned __int16)v26) {
        goto LABEL_359;
      }
      unsigned int v33 = v23;
      char v34 = 12;
      uint64_t v35 = 46;
      break;
    case 7u:
      goto LABEL_359;
    default:
      *(_WORD *)(a1 + 6_Block_object_dispose(&STACK[0x280], 8) = 2;
      *(_WORD *)(a1 + 60) = 2;
      *(_WORD *)(a1 + 52) = 2;
      *(_WORD *)(a1 + 44) = 2;
      *(_WORD *)(v7 + 8 * ((v13 >> 5) & 3) + 2) = (2 * ((v13 & 0x10) != 0)) ^ 3;
      LOWORD(v22) = *(_WORD *)(a1 + 44);
      __int16 v21 = *(_WORD *)(a1 + 52);
      __int16 v20 = *(_WORD *)(a1 + 60);
      __int16 v19 = *(_WORD *)(a1 + 68);
      --v11;
      goto LABEL_25;
  }
  do
  {
    if ((v14 & 1) == 0)
    {
      LOWORD(v36) = 0;
LABEL_36:
      *(_WORD *)(a1 + v35) = *(_WORD *)(v7 + 8 * ((v9 >> v34) & 3) + 4) + v36;
      uint64_t v37 = v11;
      goto LABEL_49;
    }
    if ((unint64_t)v11 >= v4) {
      goto LABEL_359;
    }
    uint64_t v37 = v11 + 1;
    *(void *)(a1 + 16) = v11 + 1;
    __int16 v38 = *v11;
    if (v8 > 5)
    {
      if (*v11)
      {
        if ((v38 & 0x80) != 0)
        {
          if ((unint64_t)v37 >= v4) {
            goto LABEL_359;
          }
          double v40 = v11 + 2;
          *(void *)(a1 + 16) = v11 + 2;
          int v41 = v38 & 0x3F | (v11[1] << 6);
          if ((v38 & 0x40) != 0) {
            int v36 = -v41;
          }
          else {
            LOWORD(v36) = v41;
          }
          int16x8_t v11 = v40;
        }
        else
        {
          if ((v38 & 0x40) != 0) {
            int v36 = -(v38 & 0x3F);
          }
          else {
            LOWORD(v36) = v38 & 0x3F;
          }
          ++v11;
        }
        goto LABEL_36;
      }
      if ((unint64_t)v37 >= v4) {
        goto LABEL_359;
      }
      *(void *)(a1 + 16) = v11 + 2;
      __int16 v39 = v11[1];
      *(_WORD *)(a1 + v35) = v39;
      if ((unint64_t)(v11 + 2) >= v4) {
        goto LABEL_359;
      }
      uint64_t v37 = v11 + 3;
      *(void *)(a1 + 16) = v11 + 3;
      *(_WORD *)(a1 + v35) = v39 | (v11[2] << 8);
    }
    else
    {
      *(_WORD *)(a1 + v35) = v38;
    }
LABEL_49:
    v14 >>= 1;
    v35 += 8;
    v34 -= 4;
    int16x8_t v11 = v37;
  }
  while (v35 != 78);
  if (v8 <= 0x10 && v2)
  {
    uint64_t v42 = (uint16x4_t *)&v493;
    for (uint64_t i = 42; i != 74; i += 8)
    {
      int v44 = *(unsigned __int16 *)(a1 + i);
      unsigned int v45 = *(_DWORD *)(a1 + 108) * v44 + 7;
      unsigned int v46 = *(_DWORD *)(a1 + 108) * v44 / 8;
      unsigned int v47 = v44 - v46;
      vectorReadPacked(a1, (uint64_t)v42, v44 - v46);
      uint32x4_t v48 = (uint32x4_t)vdupq_n_s32(v46);
      int16x8_t v49 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*v42), v48), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v42->i8), v48));
      if (v45 >= 0xF) {
        unsigned int v50 = 1 << (v46 - 1);
      }
      else {
        unsigned int v50 = 0;
      }
      int16x8_t v491 = vdupq_n_s16(v50);
      uint32x4_t v492 = v48;
      *(int16x8_t *)v42->uint64_t i8 = vaddq_s16(v491, v49);
      vectorReadPacked(a1, (uint64_t)&v42[2], v47);
      *(int16x8_t *)v42[2].uint64_t i8 = vaddq_s16(v491, vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(v42[2]), v492), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v42[2].i8), v492)));
      v42 += 4;
    }
  }
  else
  {
    vectorReadPacked(a1, (uint64_t)&v493, v33);
    vectorReadPacked(a1, (uint64_t)v494, *(unsigned __int16 *)(a1 + 42));
    vectorReadPacked(a1, (uint64_t)&v494[16], *(unsigned __int16 *)(a1 + 50));
    vectorReadPacked(a1, (uint64_t)&v495, *(unsigned __int16 *)(a1 + 50));
    vectorReadPacked(a1, (uint64_t)&v496, *(unsigned __int16 *)(a1 + 58));
    vectorReadPacked(a1, (uint64_t)v497, *(unsigned __int16 *)(a1 + 58));
    if (*(_DWORD *)(a1 + 32) != 19)
    {
      vectorReadPacked(a1, (uint64_t)&v497[16], *(unsigned __int16 *)(a1 + 66));
      vectorReadPacked(a1, (uint64_t)&v498, *(unsigned __int16 *)(a1 + 66));
    }
  }
  uint64_t v51 = (const __int16 *)(a1 + 46);
  int16x8_t v52 = vld1q_dup_s16(v51);
  uint64_t v53 = (const __int16 *)(a1 + 54);
  int16x8_t v54 = vld1q_dup_s16(v53);
  int16x8_t v493 = vaddq_s16(v493, v52);
  *(int16x8_t *)v494 = vaddq_s16(*(int16x8_t *)v494, v52);
  *(int16x8_t *)&v494[16] = vaddq_s16(*(int16x8_t *)&v494[16], v54);
  int16x8_t v495 = vaddq_s16(v495, v54);
  double v55 = (const __int16 *)(a1 + 62);
  int16x8_t v56 = vld1q_dup_s16(v55);
  int16x8_t v57 = vaddq_s16(v496, v56);
  int16x8_t v58 = vaddq_s16(*(int16x8_t *)v497, v56);
  int16x8_t v496 = v57;
  *(int16x8_t *)v497 = v58;
  unsigned int v59 = *(_DWORD *)(a1 + 32);
  if (v59 == 19)
  {
    if (!*(_DWORD *)(a1 + 108))
    {
LABEL_68:
      if (v490)
      {
        uint32x4_t v60 = (uint32x4_t)vdupq_n_s32(v490);
        int16x8_t v493 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v493.i8), v60), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v493), v60));
        *(int16x8_t *)v494 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v494), v60), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v494), v60));
        *(int16x8_t *)&v494[16] = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)&v494[16]), v60), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)&v494[16]), v60));
        int16x8_t v495 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v495.i8), v60), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v495), v60));
        int16x8_t v61 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v496.i8), v60), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v496), v60));
        int16x8_t v58 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v497), v60), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v497), v60));
        int16x8_t v496 = v61;
        *(int16x8_t *)v497 = v58;
      }
      uint64_t v62 = 0;
      double v63 = 0;
      char v64 = 1;
      do
      {
        uint64_t v65 = 0;
        char v66 = v64;
        int v67 = 2 * v62;
        size_t v68 = &v493 + v62;
        do
        {
          uint64_t v69 = 0;
          uint64_t v70 = v68;
          do
          {
            if (!(v65 & 3 | v69)) {
              double v63 = (__int16 *)((char *)v5->i16 + (int)((v67 + (v65 >> 2)) * v6));
            }
            __int16 v71 = v70->i16[0];
            v70 += 2;
            *v63++ = v71;
            ++v69;
          }
          while (v69 != 3);
          ++v65;
          size_t v68 = (int16x8_t *)((char *)v68 + 2);
        }
        while (v65 != 8);
        char v64 = 0;
        uint64_t v62 = 1;
      }
      while ((v66 & 1) != 0);
      return *(double *)v58.i64;
    }
LABEL_102:
    int v81 = *(_DWORD *)(a1 + 112);
    if (v81)
    {
      uint64_t v82 = 0;
      unsigned int v83 = 1 << (v81 - 1);
      *(int16x4_t *)v58.uint64_t i8 = vdup_n_s16(v83 - 1);
      int16x4_t v84 = vdup_n_s16(v83);
      uint32x4_t v85 = (uint32x4_t)vnegq_s32(vdupq_n_s32(v81 - 1));
      v86.i64[0] = 0x100000001;
      v86.i64[1] = 0x100000001;
      v87.i64[0] = -1;
      v87.i64[1] = -1;
      do
      {
        int8x8_t v88 = *(int8x8_t *)&v493.i8[v82 * 2];
        int32x4_t v89 = (int32x4_t)vshlq_u32(vmovl_u16((uint16x4_t)v88), v85);
        int16x4_t v90 = vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)v89, v86));
        uint32x4_t v91 = vshlq_u32(vmovl_u16((uint16x4_t)vadd_s16((int16x4_t)vand_s8(v88, *(int8x8_t *)v58.i8), v84)), (uint32x4_t)vaddq_s32(v89, v87));
        if (v90.i8[0]) {
          v493.i16[v82] = (v91.u16[0] >> v81) + v91.i16[0];
        }
        if (v90.i8[2]) {
          v493.i16[v82 + 1] = (v91.u16[2] >> v81) + v91.i16[2];
        }
        if (v90.i8[4]) {
          v493.i16[v82 + 2] = (v91.u16[4] >> v81) + v91.i16[4];
        }
        if (v90.i8[6]) {
          v493.i16[v82 + 3] = (v91.u16[6] >> v81) + v91.i16[6];
        }
        v82 += 4;
      }
      while (v82 != 8);
      uint64_t v92 = 0;
      v93.i64[0] = 0x100000001;
      v93.i64[1] = 0x100000001;
      v94.i64[0] = -1;
      v94.i64[1] = -1;
      do
      {
        int8x8_t v95 = *(int8x8_t *)((char *)&v493 + v92 + 16);
        int32x4_t v96 = (int32x4_t)vshlq_u32(vmovl_u16((uint16x4_t)v95), v85);
        int16x4_t v97 = vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)v96, v93));
        uint32x4_t v98 = vshlq_u32(vmovl_u16((uint16x4_t)vadd_s16((int16x4_t)vand_s8(v95, *(int8x8_t *)v58.i8), v84)), (uint32x4_t)vaddq_s32(v96, v94));
        if (v97.i8[0]) {
          *(_WORD *)((char *)&v493 + v92 + 16) = (v98.u16[0] >> v81) + v98.i16[0];
        }
        if (v97.i8[2]) {
          *(_WORD *)&v494[v92 + 2] = (v98.u16[2] >> v81) + v98.i16[2];
        }
        if (v97.i8[4]) {
          *(_WORD *)&v494[v92 + 4] = (v98.u16[4] >> v81) + v98.i16[4];
        }
        if (v97.i8[6]) {
          *(_WORD *)&v494[v92 + 6] = (v98.u16[6] >> v81) + v98.i16[6];
        }
        v92 += 8;
      }
      while (v92 != 16);
      uint64_t v99 = 0;
      v100.i64[0] = 0x100000001;
      v100.i64[1] = 0x100000001;
      v101.i64[0] = -1;
      v101.i64[1] = -1;
      do
      {
        int8x8_t v102 = *(int8x8_t *)&v494[v99 + 16];
        int32x4_t v103 = (int32x4_t)vshlq_u32(vmovl_u16((uint16x4_t)v102), v85);
        int16x4_t v104 = vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)v103, v100));
        uint32x4_t v105 = vshlq_u32(vmovl_u16((uint16x4_t)vadd_s16((int16x4_t)vand_s8(v102, *(int8x8_t *)v58.i8), v84)), (uint32x4_t)vaddq_s32(v103, v101));
        if (v104.i8[0]) {
          *(_WORD *)&v494[v99 + 16] = (v105.u16[0] >> v81) + v105.i16[0];
        }
        if (v104.i8[2]) {
          *(_WORD *)&v494[v99 + 18] = (v105.u16[2] >> v81) + v105.i16[2];
        }
        if (v104.i8[4]) {
          *(_WORD *)&v494[v99 + 20] = (v105.u16[4] >> v81) + v105.i16[4];
        }
        if (v104.i8[6]) {
          *(_WORD *)&v494[v99 + 22] = (v105.u16[6] >> v81) + v105.i16[6];
        }
        v99 += 8;
      }
      while (v99 != 16);
      uint64_t v106 = 0;
      v107.i64[0] = 0x100000001;
      v107.i64[1] = 0x100000001;
      v108.i64[0] = -1;
      v108.i64[1] = -1;
      do
      {
        int8x8_t v109 = *(int8x8_t *)&v495.i8[v106 * 2];
        int32x4_t v110 = (int32x4_t)vshlq_u32(vmovl_u16((uint16x4_t)v109), v85);
        int16x4_t v111 = vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)v110, v107));
        uint32x4_t v112 = vshlq_u32(vmovl_u16((uint16x4_t)vadd_s16((int16x4_t)vand_s8(v109, *(int8x8_t *)v58.i8), v84)), (uint32x4_t)vaddq_s32(v110, v108));
        if (v111.i8[0]) {
          v495.i16[v106] = (v112.u16[0] >> v81) + v112.i16[0];
        }
        if (v111.i8[2]) {
          v495.i16[v106 + 1] = (v112.u16[2] >> v81) + v112.i16[2];
        }
        if (v111.i8[4]) {
          v495.i16[v106 + 2] = (v112.u16[4] >> v81) + v112.i16[4];
        }
        if (v111.i8[6]) {
          v495.i16[v106 + 3] = (v112.u16[6] >> v81) + v112.i16[6];
        }
        v106 += 4;
      }
      while (v106 != 8);
      uint64_t v113 = 0;
      v114.i64[0] = 0x100000001;
      v114.i64[1] = 0x100000001;
      v115.i64[0] = -1;
      v115.i64[1] = -1;
      do
      {
        int8x8_t v116 = *(int8x8_t *)&v496.i8[v113 * 2];
        int32x4_t v117 = (int32x4_t)vshlq_u32(vmovl_u16((uint16x4_t)v116), v85);
        int16x4_t v118 = vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)v117, v114));
        uint32x4_t v119 = vshlq_u32(vmovl_u16((uint16x4_t)vadd_s16((int16x4_t)vand_s8(v116, *(int8x8_t *)v58.i8), v84)), (uint32x4_t)vaddq_s32(v117, v115));
        if (v118.i8[0]) {
          v496.i16[v113] = (v119.u16[0] >> v81) + v119.i16[0];
        }
        if (v118.i8[2]) {
          v496.i16[v113 + 1] = (v119.u16[2] >> v81) + v119.i16[2];
        }
        if (v118.i8[4]) {
          v496.i16[v113 + 2] = (v119.u16[4] >> v81) + v119.i16[4];
        }
        if (v118.i8[6]) {
          v496.i16[v113 + 3] = (v119.u16[6] >> v81) + v119.i16[6];
        }
        v113 += 4;
      }
      while (v113 != 8);
      uint64_t v120 = 0;
      v121.i64[0] = 0x100000001;
      v121.i64[1] = 0x100000001;
      v122.i64[0] = -1;
      v122.i64[1] = -1;
      do
      {
        int8x8_t v123 = *(int8x8_t *)&v497[v120];
        int32x4_t v124 = (int32x4_t)vshlq_u32(vmovl_u16((uint16x4_t)v123), v85);
        int16x4_t v125 = vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)v124, v121));
        uint32x4_t v126 = vshlq_u32(vmovl_u16((uint16x4_t)vadd_s16((int16x4_t)vand_s8(v123, *(int8x8_t *)v58.i8), v84)), (uint32x4_t)vaddq_s32(v124, v122));
        if (v125.i8[0]) {
          *(_WORD *)&v497[v120] = (v126.u16[0] >> v81) + v126.i16[0];
        }
        if (v125.i8[2]) {
          *(_WORD *)&v497[v120 + 2] = (v126.u16[2] >> v81) + v126.i16[2];
        }
        if (v125.i8[4]) {
          *(_WORD *)&v497[v120 + 4] = (v126.u16[4] >> v81) + v126.i16[4];
        }
        if (v125.i8[6]) {
          *(_WORD *)&v497[v120 + 6] = (v126.u16[6] >> v81) + v126.i16[6];
        }
        v120 += 8;
      }
      while (v120 != 16);
      uint64_t v127 = 0;
      v128.i64[0] = 0x100000001;
      v128.i64[1] = 0x100000001;
      v129.i64[0] = -1;
      v129.i64[1] = -1;
      do
      {
        int8x8_t v130 = *(int8x8_t *)&v497[v127 + 16];
        int32x4_t v131 = (int32x4_t)vshlq_u32(vmovl_u16((uint16x4_t)v130), v85);
        int16x4_t v132 = vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)v131, v128));
        uint32x4_t v133 = vshlq_u32(vmovl_u16((uint16x4_t)vadd_s16((int16x4_t)vand_s8(v130, *(int8x8_t *)v58.i8), v84)), (uint32x4_t)vaddq_s32(v131, v129));
        if (v132.i8[0]) {
          *(_WORD *)&v497[v127 + 16] = (v133.u16[0] >> v81) + v133.i16[0];
        }
        if (v132.i8[2]) {
          *(_WORD *)&v497[v127 + 18] = (v133.u16[2] >> v81) + v133.i16[2];
        }
        if (v132.i8[4]) {
          *(_WORD *)&v497[v127 + 20] = (v133.u16[4] >> v81) + v133.i16[4];
        }
        if (v132.i8[6]) {
          *(_WORD *)&v497[v127 + 22] = (v133.u16[6] >> v81) + v133.i16[6];
        }
        v127 += 8;
      }
      while (v127 != 16);
      uint64_t v134 = 0;
      v135.i64[0] = 0x100000001;
      v135.i64[1] = 0x100000001;
      v136.i64[0] = -1;
      v136.i64[1] = -1;
      do
      {
        int8x8_t v137 = *(int8x8_t *)&v498.i8[v134 * 2];
        int32x4_t v138 = (int32x4_t)vshlq_u32(vmovl_u16((uint16x4_t)v137), v85);
        int16x4_t v139 = vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)v138, v135));
        uint32x4_t v140 = vshlq_u32(vmovl_u16((uint16x4_t)vadd_s16((int16x4_t)vand_s8(v137, *(int8x8_t *)v58.i8), v84)), (uint32x4_t)vaddq_s32(v138, v136));
        if (v139.i8[0]) {
          v498.i16[v134] = (v140.u16[0] >> v81) + v140.i16[0];
        }
        if (v139.i8[2]) {
          v498.i16[v134 + 1] = (v140.u16[2] >> v81) + v140.i16[2];
        }
        if (v139.i8[4]) {
          v498.i16[v134 + 2] = (v140.u16[4] >> v81) + v140.i16[4];
        }
        if (v139.i8[6]) {
          v498.i16[v134 + 3] = (v140.u16[6] >> v81) + v140.i16[6];
        }
        v134 += 4;
      }
      while (v134 != 8);
    }
  }
  else
  {
    __int16 v72 = (const __int16 *)(a1 + 70);
    int16x8_t v73 = vld1q_dup_s16(v72);
    int16x8_t v74 = vaddq_s16(*(int16x8_t *)&v497[16], v73);
    int16x8_t v58 = vaddq_s16(v498, v73);
    *(int16x8_t *)&v497[16] = v74;
    int16x8_t v498 = v58;
    if (*(_DWORD *)(a1 + 108))
    {
      if (v59 > 0x10) {
        goto LABEL_102;
      }
      uint64_t v75 = 0;
      if (v59 >= 0xC || v59 == 6) {
        unsigned int v77 = -1;
      }
      else {
        unsigned int v77 = 1023;
      }
      if (v59 < 6) {
        unsigned int v77 = 255;
      }
      *(int16x4_t *)v58.uint64_t i8 = vdup_n_s16(v77);
      __int16 v78 = &v493;
      do
      {
        for (uint64_t j = 0; j != 8; j += 4)
        {
          uint16x4_t v80 = vcgt_u16(*(uint16x4_t *)&v78->i8[j * 2], *(uint16x4_t *)v58.i8);
          if (v80.i8[0]) {
            v78->i16[j] = v77;
          }
          if (v80.i8[2]) {
            v78->i16[j + 1] = v77;
          }
          if (v80.i8[4]) {
            v78->i16[j + 2] = v77;
          }
          if (v80.i8[6]) {
            v78->i16[j + 3] = v77;
          }
        }
        ++v75;
        ++v78;
      }
      while (v75 != 8);
    }
  }
  __int16 v141 = v494;
  __int16 v142 = &v494[16];
  __int16 v143 = &v495;
  __int16 v144 = &v496;
  __int16 v145 = v497;
  switch(v59)
  {
    case 0u:
    case 7u:
      *(void *)&long long v234 = v495.i64[0];
      *((void *)&v234 + 1) = v493.i64[1];
      uint64_t v235 = *(void *)&v494[8];
      v493.i64[1] = *(void *)&v494[16];
      *(_OWORD *)&v494[8] = v234;
      v58.i64[0] = v496.i64[1];
      uint64_t v236 = *(void *)&v497[8];
      v495.i64[0] = v235;
      v496.i64[1] = *(void *)&v497[16];
      *(void *)&long long v234 = v498.i64[0];
      *((void *)&v234 + 1) = v58.i64[0];
      *(_OWORD *)&v497[8] = v234;
      v498.i64[0] = v236;
      goto LABEL_247;
    case 1u:
    case 8u:
    case 0xBu:
    case 0x10u:
    case 0x19u:
      __int16 v146 = v493.i16[1];
      v493.i16[1] = *(_WORD *)&v494[16];
      *(_WORD *)&v494[16] = v146;
      __int16 v147 = v493.i16[3];
      v493.i16[3] = *(_WORD *)&v494[20];
      *(_WORD *)&v494[20] = v147;
      __int16 v148 = v493.i16[5];
      v493.i16[5] = *(_WORD *)&v494[24];
      *(_WORD *)&v494[24] = v148;
      __int16 v149 = v493.i16[7];
      v493.i16[7] = *(_WORD *)&v494[28];
      *(_WORD *)&v494[28] = v149;
      __int16 v150 = *(_WORD *)&v494[2];
      *(_WORD *)&v494[2] = v495.i16[0];
      v495.i16[0] = v150;
      __int16 v151 = *(_WORD *)&v494[6];
      *(_WORD *)&v494[6] = v495.i16[2];
      v495.i16[2] = v151;
      __int16 v152 = *(_WORD *)&v494[10];
      *(_WORD *)&v494[10] = v495.i16[4];
      v495.i16[4] = v152;
      __int16 v153 = *(_WORD *)&v494[14];
      *(_WORD *)&v494[14] = v495.i16[6];
      v495.i16[6] = v153;
      __int16 v154 = v496.i16[1];
      v496.i16[1] = *(_WORD *)&v497[16];
      *(_WORD *)&v497[16] = v154;
      __int16 v155 = v496.i16[3];
      v496.i16[3] = *(_WORD *)&v497[20];
      *(_WORD *)&v497[20] = v155;
      __int16 v156 = v496.i16[5];
      v496.i16[5] = *(_WORD *)&v497[24];
      *(_WORD *)&v497[24] = v156;
      __int16 v157 = v496.i16[7];
      v496.i16[7] = *(_WORD *)&v497[28];
      *(_WORD *)&v497[28] = v157;
      __int16 v158 = *(_WORD *)&v497[2];
      *(_WORD *)&v497[2] = v498.i16[0];
      v498.i16[0] = v158;
      __int16 v159 = *(_WORD *)&v497[6];
      *(_WORD *)&v497[6] = v498.i16[2];
      v498.i16[2] = v159;
      __int16 v160 = *(_WORD *)&v497[10];
      *(_WORD *)&v497[10] = v498.i16[4];
      v498.i16[4] = v160;
      __int16 v161 = *(_WORD *)&v497[14];
      *(_WORD *)&v497[14] = v498.i16[6];
      v498.i16[6] = v161;
LABEL_247:
      if (v490)
      {
        uint32x4_t v237 = (uint32x4_t)vdupq_n_s32(v490);
        int16x8_t v493 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v493.i8), v237), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v493), v237));
        *(int16x8_t *)v494 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v494), v237), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v494), v237));
        *(int16x8_t *)&v494[16] = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)&v494[16]), v237), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)&v494[16]), v237));
        int16x8_t v495 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v495.i8), v237), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v495), v237));
        int16x8_t v496 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v496.i8), v237), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v496), v237));
        *(int16x8_t *)v497 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v497), v237), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v497), v237));
        int16x8_t v238 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)&v497[16]), v237), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)&v497[16]), v237));
        int16x8_t v58 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v498.i8), v237), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v498), v237));
        *(int16x8_t *)&v497[16] = v238;
        int16x8_t v498 = v58;
      }
      if (v59 == 15)
      {
        int16x8_t v58 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v493), (int8x16_t)(*(_OWORD *)&v493 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8((int8x16_t)v493));
        int16x8_t v493 = v58;
        *(int8x16_t *)v494 = vbslq_s8((int8x16_t)vcltzq_s16(*(int16x8_t *)v494), (int8x16_t)(*(_OWORD *)v494 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8(*(int8x16_t *)v494));
        *(int8x16_t *)&v494[16] = vbslq_s8((int8x16_t)vcltzq_s16(*(int16x8_t *)&v494[16]), (int8x16_t)(*(_OWORD *)&v494[16] & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8(*(int8x16_t *)&v494[16]));
        int16x8_t v495 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v495), (int8x16_t)(*(_OWORD *)&v495 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8((int8x16_t)v495));
        int16x8_t v496 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v496), (int8x16_t)(*(_OWORD *)&v496 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8((int8x16_t)v496));
        *(int8x16_t *)v497 = vbslq_s8((int8x16_t)vcltzq_s16(*(int16x8_t *)v497), (int8x16_t)(*(_OWORD *)v497 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8(*(int8x16_t *)v497));
        *(int8x16_t *)&v497[16] = vbslq_s8((int8x16_t)vcltzq_s16(*(int16x8_t *)&v497[16]), (int8x16_t)(*(_OWORD *)&v497[16] & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8(*(int8x16_t *)&v497[16]));
        int16x8_t v498 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v498), (int8x16_t)(*(_OWORD *)&v498 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8((int8x16_t)v498));
      }
      if (v59 <= 5)
      {
        uint64_t v239 = 0;
        int v240 = 0;
        __int16 v241 = &v493;
        do
        {
          v5->i8[v239] = v241->i8[0];
          v240 |= v241->u8[1];
          ++v239;
          __int16 v241 = (int16x8_t *)((char *)v241 + 2);
        }
        while (v239 != 8);
        if (!v240)
        {
          uint64_t v242 = 0;
          do
          {
            v5->i8[v242 + 8] = v144->i8[0];
            v240 |= v144->u8[1];
            ++v242;
            __int16 v144 = (int16x8_t *)((char *)v144 + 2);
          }
          while (v242 != 8);
          if (!v240)
          {
            uint64_t v243 = 0;
            int v244 = 0;
            __int16 v245 = &v5->i8[v6];
            do
            {
              v245[v243] = *v141;
              v244 |= v141[1];
              ++v243;
              v141 += 2;
            }
            while (v243 != 8);
            if (!v244)
            {
              uint64_t v246 = 0;
              __int16 v247 = v245 + 8;
              do
              {
                v247[v246] = *v145;
                v244 |= v145[1];
                ++v246;
                v145 += 2;
              }
              while (v246 != 8);
              if (!v244)
              {
                uint64_t v248 = 0;
                __int16 v249 = &v5->i8[2 * v6];
                do
                {
                  v249[v248] = *v142;
                  v244 |= v142[1];
                  ++v248;
                  v142 += 2;
                }
                while (v248 != 8);
                if (!v244)
                {
                  uint64_t v250 = 0;
                  __int16 v251 = &v497[16];
                  __int16 v252 = v249 + 8;
                  do
                  {
                    v252[v250] = *v251;
                    v244 |= v251[1];
                    ++v250;
                    v251 += 2;
                  }
                  while (v250 != 8);
                  if (!v244)
                  {
                    uint64_t v253 = 0;
                    uint64_t v254 = &v5->i8[3 * v6];
                    do
                    {
                      v254[v253] = v143->i8[0];
                      v244 |= v143->u8[1];
                      ++v253;
                      __int16 v143 = (int16x8_t *)((char *)v143 + 2);
                    }
                    while (v253 != 8);
                    if (!v244)
                    {
                      uint64_t v255 = 0;
                      uint32x4_t v256 = &v498;
                      __int16 v257 = v254 + 8;
                      do
                      {
                        v257[v255] = v256->i8[0];
                        v244 |= v256->u8[1];
                        ++v255;
                        uint32x4_t v256 = (int16x8_t *)((char *)v256 + 2);
                      }
                      while (v255 != 8);
                      if (!v244) {
                        return *(double *)v58.i64;
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_359:
        longjmp((int *)(a1 + 116), -15407);
      }
      if (v59 - 7 > 1)
      {
LABEL_279:
        int16x8_t *v5 = v493;
        v5[1] = v496;
        __int16 v259 = &v5->i8[v6];
        *(_OWORD *)__int16 v259 = *(_OWORD *)v494;
        *((_OWORD *)v259 + 1) = *(_OWORD *)v497;
        __int16 v260 = &v5->i8[2 * (int)v6];
        *(_OWORD *)__int16 v260 = *(_OWORD *)&v494[16];
        *((_OWORD *)v260 + 1) = *(_OWORD *)&v497[16];
        __int16 v261 = (int16x8_t *)((char *)v5 + 3 * (int)v6);
        *__int16 v261 = v495;
        int16x8_t v58 = v498;
LABEL_380:
        v261[1] = v58;
      }
      else
      {
        int v258 = *(_DWORD *)(a1 + 8);
        vectorstore_1x16_packed10(v5->i32, v258, (unsigned __int16 *)&v493, (unsigned __int16 *)&v496);
        vectorstore_1x16_packed10((int *)((char *)v5->i32 + v6), v258, (unsigned __int16 *)v494, (unsigned __int16 *)v497);
        vectorstore_1x16_packed10((int *)((char *)v5->i32 + 2 * v6), v258, (unsigned __int16 *)&v494[16], (unsigned __int16 *)&v497[16]);
        vectorstore_1x16_packed10((int *)((char *)v5->i32 + 3 * (int)v6), v258, (unsigned __int16 *)&v495, (unsigned __int16 *)&v498);
      }
      return *(double *)v58.i64;
    case 2u:
    case 0xDu:
    case 0x14u:
      __int16 v162 = *(_WORD *)&v494[24];
      *(_WORD *)&v494[24] = v496.i16[0];
      __int16 v163 = v496.i16[1];
      v496.i16[1] = *(_WORD *)&v494[26];
      __int16 v164 = *(_WORD *)&v494[28];
      *(_WORD *)&v494[28] = v496.i16[2];
      __int16 v165 = v496.i16[3];
      v496.i16[3] = *(_WORD *)&v494[30];
      __int16 v166 = v495.i16[4];
      v495.i16[4] = *(_WORD *)v497;
      __int16 v167 = *(_WORD *)&v497[2];
      *(_WORD *)&v497[2] = v495.i16[5];
      __int16 v168 = v495.i16[6];
      v495.i16[6] = *(_WORD *)&v497[4];
      __int16 v169 = *(_WORD *)&v497[6];
      *(_WORD *)&v497[6] = v495.i16[7];
      __int16 v170 = v493.i16[1];
      v493.i16[1] = v162;
      v496.i16[0] = v170;
      __int16 v171 = v493.i16[3];
      v493.i16[3] = v164;
      v496.i16[2] = v171;
      __int16 v172 = v493.i16[5];
      v493.i16[5] = v496.i16[4];
      v496.i16[4] = v172;
      __int16 v173 = v493.i16[7];
      v493.i16[7] = v496.i16[6];
      v496.i16[6] = v173;
      __int16 v174 = *(_WORD *)&v494[2];
      *(_WORD *)&v494[2] = v166;
      *(_WORD *)v497 = v174;
      __int16 v175 = *(_WORD *)&v494[6];
      *(_WORD *)&v494[6] = v168;
      *(_WORD *)&v497[4] = v175;
      __int16 v176 = *(_WORD *)&v494[10];
      *(_WORD *)&v494[10] = *(_WORD *)&v497[8];
      *(_WORD *)&v497[8] = v176;
      __int16 v177 = *(_WORD *)&v494[14];
      *(_WORD *)&v494[14] = *(_WORD *)&v497[12];
      *(_WORD *)&v497[12] = v177;
      __int16 v178 = *(_WORD *)&v494[18];
      *(_WORD *)&v494[18] = *(_WORD *)&v497[16];
      *(_WORD *)&v497[16] = v178;
      __int16 v179 = *(_WORD *)&v494[22];
      *(_WORD *)&v494[22] = *(_WORD *)&v497[20];
      *(_WORD *)&v497[20] = v179;
      *(_WORD *)&v494[26] = *(_WORD *)&v497[24];
      *(_WORD *)&v497[24] = v163;
      *(_WORD *)&v494[30] = *(_WORD *)&v497[28];
      *(_WORD *)&v497[28] = v165;
      __int16 v180 = v495.i16[1];
      v495.i16[1] = v498.i16[0];
      v498.i16[0] = v180;
      __int16 v181 = v495.i16[3];
      v495.i16[3] = v498.i16[2];
      v498.i16[2] = v181;
      v495.i16[5] = v498.i16[4];
      v498.i16[4] = v167;
      v495.i16[7] = v498.i16[6];
      v498.i16[6] = v169;
      if (v490)
      {
        uint32x4_t v182 = (uint32x4_t)vdupq_n_s32(v490);
        int16x8_t v493 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v493.i8), v182), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v493), v182));
        *(int16x8_t *)v494 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v494), v182), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v494), v182));
        *(int16x8_t *)&v494[16] = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)&v494[16]), v182), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)&v494[16]), v182));
        int16x8_t v495 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v495.i8), v182), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v495), v182));
        int16x8_t v496 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v496.i8), v182), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v496), v182));
        *(int16x8_t *)v497 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v497), v182), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v497), v182));
        int16x8_t v183 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)&v497[16]), v182), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)&v497[16]), v182));
        int16x8_t v58 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v498.i8), v182), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v498), v182));
        *(int16x8_t *)&v497[16] = v183;
        int16x8_t v498 = v58;
      }
      __int16 v184 = &v497[16];
      __int16 v185 = &v498;
      if (v59 == 13)
      {
        int16x8_t v493 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v493), (int8x16_t)(*(_OWORD *)&v493 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8((int8x16_t)v493));
        *(int8x16_t *)v494 = vbslq_s8((int8x16_t)vcltzq_s16(*(int16x8_t *)v494), (int8x16_t)(*(_OWORD *)v494 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8(*(int8x16_t *)v494));
        *(int8x16_t *)&v494[16] = vbslq_s8((int8x16_t)vcltzq_s16(*(int16x8_t *)&v494[16]), (int8x16_t)(*(_OWORD *)&v494[16] & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8(*(int8x16_t *)&v494[16]));
        int16x8_t v495 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v495), (int8x16_t)(*(_OWORD *)&v495 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8((int8x16_t)v495));
        int16x8_t v496 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v496), (int8x16_t)(*(_OWORD *)&v496 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8((int8x16_t)v496));
        *(int8x16_t *)v497 = vbslq_s8((int8x16_t)vcltzq_s16(*(int16x8_t *)v497), (int8x16_t)(*(_OWORD *)v497 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8(*(int8x16_t *)v497));
        *(int8x16_t *)&v497[16] = vbslq_s8((int8x16_t)vcltzq_s16(*(int16x8_t *)&v497[16]), (int8x16_t)(*(_OWORD *)&v497[16] & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8(*(int8x16_t *)&v497[16]));
        int16x8_t v498 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v498), (int8x16_t)(*(_OWORD *)&v498 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8((int8x16_t)v498));
      }
      else if (v59 == 2)
      {
        uint64_t v186 = 0;
        int v187 = 0;
        __int16 v188 = &v493;
        do
        {
          v5->i8[v186] = v188->i8[0];
          v187 |= v188->u8[1];
          ++v186;
          __int16 v188 = (int16x8_t *)((char *)v188 + 2);
        }
        while (v186 != 8);
        if (v187) {
          goto LABEL_359;
        }
        uint64_t v189 = 0;
        do
        {
          v5->i8[v6 + v189] = *v142;
          v187 |= v142[1];
          ++v189;
          v142 += 2;
        }
        while (v189 != 8);
        if (v187) {
          goto LABEL_359;
        }
        uint64_t v190 = 0;
        do
        {
          v5->i8[2 * v6 + v190] = *v141;
          v187 |= v141[1];
          ++v190;
          v141 += 2;
        }
        while (v190 != 8);
        if (v187) {
          goto LABEL_359;
        }
        uint64_t v191 = 0;
        do
        {
          v5->i8[3 * v6 + v191] = v143->i8[0];
          v187 |= v143->u8[1];
          ++v191;
          __int16 v143 = (int16x8_t *)((char *)v143 + 2);
        }
        while (v191 != 8);
        if (v187) {
          goto LABEL_359;
        }
        uint64_t v192 = 0;
        do
        {
          v5->i8[4 * v6 + v192] = v144->i8[0];
          v187 |= v144->u8[1];
          ++v192;
          __int16 v144 = (int16x8_t *)((char *)v144 + 2);
        }
        while (v192 != 8);
        if (v187) {
          goto LABEL_359;
        }
        uint64_t v193 = 0;
        do
        {
          v5->i8[5 * v6 + v193] = *v184;
          v187 |= v184[1];
          ++v193;
          v184 += 2;
        }
        while (v193 != 8);
        if (v187) {
          goto LABEL_359;
        }
        uint64_t v194 = 0;
        do
        {
          v5->i8[6 * (int)v6 + v194] = *v145;
          v187 |= v145[1];
          ++v194;
          v145 += 2;
        }
        while (v194 != 8);
        if (v187) {
          goto LABEL_359;
        }
        uint64_t v195 = 0;
        do
        {
          v5->i8[8 * v6 - v6 + v195] = v185->i8[0];
          v187 |= v185->u8[1];
          ++v195;
          __int16 v185 = (int16x8_t *)((char *)v185 + 2);
        }
        while (v195 != 8);
LABEL_240:
        if (!v187) {
          return *(double *)v58.i64;
        }
        goto LABEL_359;
      }
      int16x8_t *v5 = v493;
      *(int16x8_t *)((char *)v5 + v6) = *(int16x8_t *)&v494[16];
      *(int16x8_t *)((char *)v5 + 2 * (int)v6) = *(int16x8_t *)v494;
      *(int16x8_t *)((char *)v5 + 3 * v6) = v495;
      *(int16x8_t *)((char *)v5 + 4 * (int)v6) = v496;
      *(int16x8_t *)((char *)v5 + 5 * v6) = *(int16x8_t *)&v497[16];
      uint64_t v438 = 6 * (int)v6;
      int16x8_t v58 = *(int16x8_t *)v497;
LABEL_383:
      *(int16x8_t *)((char *)v5 + v43_Block_object_dispose(&STACK[0x280], 8) = v58;
      v58.i64[0] = v498.i64[0];
      *(int16x8_t *)((char *)v5 + 8 * v6 - v6) = v498;
      return *(double *)v58.i64;
    case 3u:
    case 0xEu:
    case 0x16u:
      __int16 v196 = *(_WORD *)&v494[24];
      __int16 v197 = *(_WORD *)&v494[26];
      *(_DWORD *)&v494[24] = v496.i32[0];
      __int16 v198 = v496.i16[2];
      __int16 v199 = v496.i16[3];
      v496.i32[1] = *(_DWORD *)&v494[28];
      __int16 v200 = v495.i16[4];
      __int16 v201 = v495.i16[5];
      v495.i32[2] = *(_DWORD *)v497;
      __int16 v202 = *(_WORD *)&v497[4];
      *(_WORD *)&v497[4] = v495.i16[6];
      __int16 v203 = *(_WORD *)&v497[6];
      *(_WORD *)&v497[6] = v495.i16[7];
      __int16 v204 = v493.i16[2];
      v493.i16[2] = v196;
      v496.i16[0] = v204;
      __int16 v205 = v493.i16[3];
      v493.i16[3] = v197;
      v496.i16[1] = v205;
      __int16 v206 = v493.i16[6];
      v493.i16[6] = v496.i16[4];
      v496.i16[4] = v206;
      __int16 v207 = v493.i16[7];
      v493.i16[7] = v496.i16[5];
      v496.i16[5] = v207;
      __int16 v208 = *(_WORD *)&v494[4];
      *(_WORD *)&v494[4] = v200;
      *(_WORD *)v497 = v208;
      __int16 v209 = *(_WORD *)&v494[6];
      *(_WORD *)&v494[6] = v201;
      *(_WORD *)&v497[2] = v209;
      __int16 v210 = *(_WORD *)&v494[12];
      *(_WORD *)&v494[12] = *(_WORD *)&v497[8];
      *(_WORD *)&v497[8] = v210;
      __int16 v211 = *(_WORD *)&v494[14];
      *(_WORD *)&v494[14] = *(_WORD *)&v497[10];
      *(_WORD *)&v497[10] = v211;
      __int16 v212 = *(_WORD *)&v494[20];
      *(_WORD *)&v494[20] = *(_WORD *)&v497[16];
      *(_WORD *)&v497[16] = v212;
      __int16 v213 = *(_WORD *)&v494[22];
      *(_WORD *)&v494[22] = *(_WORD *)&v497[18];
      *(_WORD *)&v497[18] = v213;
      *(_DWORD *)&v494[28] = *(_DWORD *)&v497[24];
      *(_WORD *)&v497[24] = v198;
      *(_WORD *)&v497[26] = v199;
      __int16 v214 = v495.i16[2];
      v495.i16[2] = v498.i16[0];
      v498.i16[0] = v214;
      __int16 v215 = v495.i16[3];
      v495.i16[3] = v498.i16[1];
      v498.i16[1] = v215;
      v495.i32[3] = v498.i32[2];
      v498.i16[4] = v202;
      v498.i16[5] = v203;
      if (v490)
      {
        uint32x4_t v216 = (uint32x4_t)vdupq_n_s32(v490);
        int16x8_t v493 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v493.i8), v216), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v493), v216));
        *(int16x8_t *)v494 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v494), v216), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v494), v216));
        *(int16x8_t *)&v494[16] = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)&v494[16]), v216), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)&v494[16]), v216));
        int16x8_t v495 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v495.i8), v216), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v495), v216));
        int16x8_t v496 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v496.i8), v216), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v496), v216));
        *(int16x8_t *)v497 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v497), v216), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v497), v216));
        int16x8_t v217 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)&v497[16]), v216), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)&v497[16]), v216));
        int16x8_t v58 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v498.i8), v216), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v498), v216));
        *(int16x8_t *)&v497[16] = v217;
        int16x8_t v498 = v58;
      }
      __int16 v218 = &v497[16];
      uint64_t v219 = &v498;
      if (v59 == 14)
      {
        int16x8_t v493 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v493), (int8x16_t)(*(_OWORD *)&v493 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8((int8x16_t)v493));
        *(int8x16_t *)v494 = vbslq_s8((int8x16_t)vcltzq_s16(*(int16x8_t *)v494), (int8x16_t)(*(_OWORD *)v494 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8(*(int8x16_t *)v494));
        *(int8x16_t *)&v494[16] = vbslq_s8((int8x16_t)vcltzq_s16(*(int16x8_t *)&v494[16]), (int8x16_t)(*(_OWORD *)&v494[16] & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8(*(int8x16_t *)&v494[16]));
        int16x8_t v495 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v495), (int8x16_t)(*(_OWORD *)&v495 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8((int8x16_t)v495));
        int16x8_t v496 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v496), (int8x16_t)(*(_OWORD *)&v496 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8((int8x16_t)v496));
        *(int8x16_t *)v497 = vbslq_s8((int8x16_t)vcltzq_s16(*(int16x8_t *)v497), (int8x16_t)(*(_OWORD *)v497 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8(*(int8x16_t *)v497));
        *(int8x16_t *)&v497[16] = vbslq_s8((int8x16_t)vcltzq_s16(*(int16x8_t *)&v497[16]), (int8x16_t)(*(_OWORD *)&v497[16] & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8(*(int8x16_t *)&v497[16]));
        int16x8_t v498 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v498), (int8x16_t)(*(_OWORD *)&v498 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8((int8x16_t)v498));
      }
      else if (v59 == 3)
      {
        uint64_t v220 = 0;
        int v187 = 0;
        char v221 = &v493;
        do
        {
          v5->i8[v220] = v221->i8[0];
          v187 |= v221->u8[1];
          ++v220;
          char v221 = (int16x8_t *)((char *)v221 + 2);
        }
        while (v220 != 8);
        if (v187) {
          goto LABEL_359;
        }
        uint64_t v222 = 0;
        do
        {
          v5->i8[v6 + v222] = *v141;
          v187 |= v141[1];
          ++v222;
          v141 += 2;
        }
        while (v222 != 8);
        if (v187) {
          goto LABEL_359;
        }
        uint64_t v223 = 0;
        do
        {
          v5->i8[2 * v6 + v223] = *v142;
          v187 |= v142[1];
          ++v223;
          v142 += 2;
        }
        while (v223 != 8);
        if (v187) {
          goto LABEL_359;
        }
        uint64_t v224 = 0;
        do
        {
          v5->i8[3 * v6 + v224] = v143->i8[0];
          v187 |= v143->u8[1];
          ++v224;
          __int16 v143 = (int16x8_t *)((char *)v143 + 2);
        }
        while (v224 != 8);
        if (v187) {
          goto LABEL_359;
        }
        uint64_t v225 = 0;
        do
        {
          v5->i8[4 * v6 + v225] = v144->i8[0];
          v187 |= v144->u8[1];
          ++v225;
          __int16 v144 = (int16x8_t *)((char *)v144 + 2);
        }
        while (v225 != 8);
        if (v187) {
          goto LABEL_359;
        }
        uint64_t v226 = 0;
        do
        {
          v5->i8[5 * v6 + v226] = *v145;
          v187 |= v145[1];
          ++v226;
          v145 += 2;
        }
        while (v226 != 8);
        if (v187) {
          goto LABEL_359;
        }
        uint64_t v227 = 0;
        do
        {
          v5->i8[6 * (int)v6 + v227] = *v218;
          v187 |= v218[1];
          ++v227;
          v218 += 2;
        }
        while (v227 != 8);
        if (v187) {
          goto LABEL_359;
        }
        uint64_t v228 = 0;
        do
        {
          v5->i8[8 * v6 - v6 + v228] = v219->i8[0];
          v187 |= v219->u8[1];
          ++v228;
          uint64_t v219 = (int16x8_t *)((char *)v219 + 2);
        }
        while (v228 != 8);
        goto LABEL_240;
      }
      int16x8_t *v5 = v493;
      *(int16x8_t *)((char *)v5 + v6) = *(int16x8_t *)v494;
      *(int16x8_t *)((char *)v5 + 2 * (int)v6) = *(int16x8_t *)&v494[16];
      *(int16x8_t *)((char *)v5 + 3 * (int)v6) = v495;
      *(int16x8_t *)((char *)v5 + 4 * (int)v6) = v496;
      *(int16x8_t *)((char *)v5 + 5 * (int)v6) = *(int16x8_t *)v497;
      *(int16x8_t *)((char *)v5 + 6 * (int)v6) = *(int16x8_t *)&v497[16];
      v58.i64[0] = v498.i64[0];
      *(int16x8_t *)((char *)v5 + 7 * (int)v6) = v498;
      return *(double *)v58.i64;
    case 4u:
      uint64_t v289 = 0;
      int v290 = 0;
      __int16 v291 = *(_WORD *)&v494[20];
      int32x4_t v292 = &v493;
      int16x4_t v293 = &v497[16];
      __int16 v294 = *(_WORD *)&v494[22];
      *(_WORD *)&v494[22] = *(_WORD *)&v497[18];
      *(_WORD *)&v497[18] = v294;
      __int16 v295 = *(_WORD *)&v494[28];
      __int16 v296 = *(_WORD *)&v494[30];
      *(_WORD *)&v494[30] = *(_WORD *)&v497[26];
      *(_WORD *)&v497[26] = v296;
      int32x4_t v297 = &v498;
      __int16 v298 = v495.i16[2];
      __int16 v299 = v495.i16[3];
      v495.i16[3] = v498.i16[1];
      v498.i16[1] = v299;
      __int16 v300 = v495.i16[7];
      v495.i16[7] = v498.i16[5];
      v498.i16[5] = v300;
      __int16 v301 = v493.i16[1];
      v493.i16[1] = *(_WORD *)&v494[16];
      __int16 v302 = v495.i16[6];
      *(_WORD *)&v494[16] = v301;
      __int16 v303 = v493.i16[3];
      v493.i16[3] = *(_WORD *)&v497[16];
      *(_WORD *)&v494[20] = v303;
      __int16 v304 = v493.i16[5];
      v493.i16[5] = *(_WORD *)&v494[24];
      *(_WORD *)&v494[24] = v304;
      __int16 v305 = v493.i16[7];
      v493.i16[7] = *(_WORD *)&v497[24];
      *(_WORD *)&v494[28] = v305;
      __int16 v306 = *(_WORD *)&v494[2];
      *(_WORD *)&v494[2] = v495.i16[0];
      v495.i16[0] = v306;
      __int16 v307 = *(_WORD *)&v494[6];
      *(_WORD *)&v494[6] = v498.i16[0];
      v495.i16[2] = v307;
      __int16 v308 = *(_WORD *)&v494[10];
      *(_WORD *)&v494[10] = v495.i16[4];
      v495.i16[4] = v308;
      __int16 v309 = *(_WORD *)&v494[14];
      *(_WORD *)&v494[14] = v498.i16[4];
      v495.i16[6] = v309;
      __int16 v310 = v496.i16[1];
      v496.i16[1] = v291;
      *(_WORD *)&v497[16] = v310;
      __int16 v311 = v496.i16[3];
      v496.i16[3] = *(_WORD *)&v497[20];
      *(_WORD *)&v497[20] = v311;
      __int16 v312 = v496.i16[5];
      v496.i16[5] = v295;
      *(_WORD *)&v497[24] = v312;
      __int16 v313 = v496.i16[7];
      v496.i16[7] = *(_WORD *)&v497[28];
      *(_WORD *)&v497[28] = v313;
      __int16 v314 = *(_WORD *)&v497[2];
      *(_WORD *)&v497[2] = v298;
      v498.i16[0] = v314;
      __int16 v315 = *(_WORD *)&v497[6];
      *(_WORD *)&v497[6] = v498.i16[2];
      v498.i16[2] = v315;
      __int16 v316 = *(_WORD *)&v497[10];
      *(_WORD *)&v497[10] = v302;
      v498.i16[4] = v316;
      __int16 v317 = *(_WORD *)&v497[14];
      *(_WORD *)&v497[14] = v498.i16[6];
      v498.i16[6] = v317;
      do
      {
        v5->i8[v289] = v292->i8[0];
        v290 |= v292->u8[1];
        ++v289;
        int32x4_t v292 = (int16x8_t *)((char *)v292 + 2);
      }
      while (v289 != 8);
      if (v290) {
        goto LABEL_359;
      }
      uint64_t v318 = 0;
      do
      {
        v5->i8[v318 + 8] = v144->i8[0];
        v290 |= v144->u8[1];
        ++v318;
        __int16 v144 = (int16x8_t *)((char *)v144 + 2);
      }
      while (v318 != 8);
      if (v290) {
        goto LABEL_359;
      }
      uint64_t v319 = 0;
      int v320 = 0;
      int32x4_t v321 = &v5->i8[v6];
      do
      {
        v321[v319] = *v141;
        v320 |= v141[1];
        ++v319;
        v141 += 2;
      }
      while (v319 != 8);
      if (v320) {
        goto LABEL_359;
      }
      uint64_t v322 = 0;
      int16x4_t v323 = v321 + 8;
      do
      {
        v323[v322] = *v145;
        v320 |= v145[1];
        ++v322;
        v145 += 2;
      }
      while (v322 != 8);
      if (v320) {
        goto LABEL_359;
      }
      uint64_t v324 = 0;
      int16x4_t v325 = &v5->i8[2 * (int)v6];
      do
      {
        v325[v324] = *v142;
        v320 |= v142[1];
        ++v324;
        v142 += 2;
      }
      while (v324 != 8);
      if (v320) {
        goto LABEL_359;
      }
      uint64_t v326 = 0;
      int32x4_t v327 = v325 + 8;
      do
      {
        v327[v326] = *v293;
        v320 |= v293[1];
        ++v326;
        v293 += 2;
      }
      while (v326 != 8);
      if (v320) {
        goto LABEL_359;
      }
      uint64_t v328 = 0;
      int v329 = 0;
      int16x4_t v330 = &v5->i8[3 * v6];
      do
      {
        v330[v328] = v143->i8[0];
        v329 |= v143->u8[1];
        ++v328;
        __int16 v143 = (int16x8_t *)((char *)v143 + 2);
      }
      while (v328 != 8);
      if (v329) {
        goto LABEL_359;
      }
      uint64_t v331 = 0;
      int32x4_t v332 = v330 + 8;
      do
      {
        v332[v331] = v297->i8[0];
        v329 |= v297->u8[1];
        ++v331;
        int32x4_t v297 = (int16x8_t *)((char *)v297 + 2);
      }
      while (v331 != 8);
      goto LABEL_358;
    case 5u:
      uint64_t v333 = 0;
      int v334 = 0;
      __int16 v335 = *(_WORD *)&v494[20];
      uint64_t v336 = &v493;
      int32x4_t v337 = &v497[16];
      *(_WORD *)&v494[20] = *(_WORD *)&v497[16];
      *(_WORD *)&v497[16] = v335;
      __int16 v338 = *(_WORD *)&v494[22];
      __int16 v339 = *(_WORD *)&v494[28];
      *(_WORD *)&v494[28] = *(_WORD *)&v497[24];
      *(_WORD *)&v497[24] = v339;
      __int16 v340 = *(_WORD *)&v494[30];
      int32x4_t v341 = &v498;
      __int16 v342 = v495.i16[2];
      v495.i16[2] = v498.i16[0];
      v498.i16[0] = v342;
      __int16 v343 = v495.i16[3];
      __int16 v344 = v495.i16[6];
      v495.i16[6] = v498.i16[4];
      v498.i16[4] = v344;
      __int16 v345 = *(_WORD *)&v494[18];
      *(_WORD *)&v494[18] = v493.i16[0];
      __int16 v346 = v495.i16[7];
      v493.i16[0] = v345;
      *(_WORD *)&v494[22] = v493.i16[2];
      v493.i16[2] = *(_WORD *)&v497[18];
      __int16 v347 = *(_WORD *)&v494[26];
      *(_WORD *)&v494[26] = v493.i16[4];
      v493.i16[4] = v347;
      *(_WORD *)&v494[30] = v493.i16[6];
      v493.i16[6] = *(_WORD *)&v497[26];
      __int16 v348 = v495.i16[1];
      v495.i16[1] = *(_WORD *)v494;
      *(_WORD *)v494 = v348;
      v495.i16[3] = *(_WORD *)&v494[4];
      *(_WORD *)&v494[4] = v498.i16[1];
      __int16 v349 = v495.i16[5];
      v495.i16[5] = *(_WORD *)&v494[8];
      *(_WORD *)&v494[8] = v349;
      v495.i16[7] = *(_WORD *)&v494[12];
      *(_WORD *)&v494[12] = v498.i16[5];
      *(_WORD *)&v497[18] = v496.i16[0];
      v496.i16[0] = v338;
      __int16 v350 = *(_WORD *)&v497[22];
      *(_WORD *)&v497[22] = v496.i16[2];
      v496.i16[2] = v350;
      *(_WORD *)&v497[26] = v496.i16[4];
      v496.i16[4] = v340;
      __int16 v351 = *(_WORD *)&v497[30];
      *(_WORD *)&v497[30] = v496.i16[6];
      v496.i16[6] = v351;
      v498.i16[1] = *(_WORD *)v497;
      *(_WORD *)v497 = v343;
      __int16 v352 = v498.i16[3];
      v498.i16[3] = *(_WORD *)&v497[4];
      *(_WORD *)&v497[4] = v352;
      v498.i16[5] = *(_WORD *)&v497[8];
      *(_WORD *)&v497[8] = v346;
      __int16 v353 = v498.i16[7];
      v498.i16[7] = *(_WORD *)&v497[12];
      *(_WORD *)&v497[12] = v353;
      do
      {
        v5->i8[v333] = v336->i8[0];
        v334 |= v336->u8[1];
        ++v333;
        uint64_t v336 = (int16x8_t *)((char *)v336 + 2);
      }
      while (v333 != 8);
      if (v334) {
        goto LABEL_359;
      }
      uint64_t v354 = 0;
      do
      {
        v5->i8[v354 + 8] = v144->i8[0];
        v334 |= v144->u8[1];
        ++v354;
        __int16 v144 = (int16x8_t *)((char *)v144 + 2);
      }
      while (v354 != 8);
      if (v334) {
        goto LABEL_359;
      }
      uint64_t v355 = 0;
      int v356 = 0;
      int32x4_t v357 = &v5->i8[v6];
      do
      {
        v357[v355] = *v141;
        v356 |= v141[1];
        ++v355;
        v141 += 2;
      }
      while (v355 != 8);
      if (v356) {
        goto LABEL_359;
      }
      uint64_t v358 = 0;
      uint32x4_t v359 = v357 + 8;
      do
      {
        v359[v358] = *v145;
        v356 |= v145[1];
        ++v358;
        v145 += 2;
      }
      while (v358 != 8);
      if (v356) {
        goto LABEL_359;
      }
      uint64_t v360 = 0;
      int32x4_t v361 = &v5->i8[2 * (int)v6];
      do
      {
        v361[v360] = *v142;
        v356 |= v142[1];
        ++v360;
        v142 += 2;
      }
      while (v360 != 8);
      if (v356) {
        goto LABEL_359;
      }
      uint64_t v362 = 0;
      int16x4_t v363 = v361 + 8;
      do
      {
        v363[v362] = *v337;
        v356 |= v337[1];
        ++v362;
        v337 += 2;
      }
      while (v362 != 8);
      if (v356) {
        goto LABEL_359;
      }
      uint64_t v364 = 0;
      int v329 = 0;
      int16x4_t v365 = &v5->i8[3 * v6];
      do
      {
        v365[v364] = v143->i8[0];
        v329 |= v143->u8[1];
        ++v364;
        __int16 v143 = (int16x8_t *)((char *)v143 + 2);
      }
      while (v364 != 8);
      if (v329) {
        goto LABEL_359;
      }
      uint64_t v366 = 0;
      uint16x8_t v367 = v365 + 8;
      do
      {
        v367[v366] = v341->i8[0];
        v329 |= v341->u8[1];
        ++v366;
        int32x4_t v341 = (int16x8_t *)((char *)v341 + 2);
      }
      while (v366 != 8);
      goto LABEL_358;
    case 6u:
      __int16 v368 = v493.i16[1];
      v493.i16[1] = *(_WORD *)&v494[16];
      *(_WORD *)&v494[16] = v368;
      __int16 v369 = v493.i16[3];
      __int16 v370 = v493.i16[5];
      v493.i16[5] = *(_WORD *)&v494[24];
      *(_WORD *)&v494[24] = v370;
      __int16 v371 = v493.i16[7];
      __int16 v372 = *(_WORD *)&v494[2];
      *(_WORD *)&v494[2] = v495.i16[0];
      v495.i16[0] = v372;
      __int16 v373 = *(_WORD *)&v494[6];
      __int16 v374 = *(_WORD *)&v494[10];
      *(_WORD *)&v494[10] = v495.i16[4];
      v495.i16[4] = v374;
      __int16 v375 = *(_WORD *)&v494[14];
      v376 = &v497[16];
      __int16 v377 = v496.i16[1];
      __int16 v378 = v496.i16[3];
      v496.i16[3] = *(_WORD *)&v497[20];
      *(_WORD *)&v497[20] = v378;
      __int16 v379 = v496.i16[5];
      __int16 v380 = v496.i16[7];
      v496.i16[7] = *(_WORD *)&v497[28];
      *(_WORD *)&v497[28] = v380;
      uint16x8_t v381 = &v498;
      __int16 v382 = *(_WORD *)&v497[2];
      __int16 v383 = *(_WORD *)&v497[6];
      *(_WORD *)&v497[6] = v498.i16[2];
      v498.i16[2] = v383;
      __int16 v384 = *(_WORD *)&v497[10];
      __int16 v385 = *(_WORD *)&v497[14];
      *(_WORD *)&v497[14] = v498.i16[6];
      v498.i16[6] = v385;
      __int16 v386 = v493.i16[2];
      v493.i16[2] = v496.i16[0];
      v496.i16[0] = v386;
      v493.i16[3] = *(_WORD *)&v497[16];
      v496.i16[1] = *(_WORD *)&v494[20];
      __int16 v387 = v493.i16[6];
      v493.i16[6] = v496.i16[4];
      v496.i16[4] = v387;
      v493.i16[7] = *(_WORD *)&v497[24];
      v496.i16[5] = *(_WORD *)&v494[28];
      __int16 v388 = *(_WORD *)&v494[4];
      *(_WORD *)&v494[4] = *(_WORD *)v497;
      *(_WORD *)v497 = v388;
      *(_WORD *)&v494[6] = v498.i16[0];
      *(_WORD *)&v497[2] = v495.i16[2];
      __int16 v389 = *(_WORD *)&v494[12];
      *(_WORD *)&v494[12] = *(_WORD *)&v497[8];
      *(_WORD *)&v497[8] = v389;
      *(_WORD *)&v494[14] = v498.i16[4];
      *(_WORD *)&v497[10] = v495.i16[6];
      *(_WORD *)&v494[20] = v377;
      *(_WORD *)&v497[16] = v369;
      __int16 v390 = *(_WORD *)&v494[22];
      *(_WORD *)&v494[22] = *(_WORD *)&v497[18];
      *(_WORD *)&v497[18] = v390;
      *(_WORD *)&v494[28] = v379;
      *(_WORD *)&v497[24] = v371;
      __int16 v391 = *(_WORD *)&v494[30];
      *(_WORD *)&v494[30] = *(_WORD *)&v497[26];
      *(_WORD *)&v497[26] = v391;
      v495.i16[2] = v382;
      v498.i16[0] = v373;
      __int16 v392 = v495.i16[3];
      v495.i16[3] = v498.i16[1];
      v498.i16[1] = v392;
      v495.i16[6] = v384;
      v498.i16[4] = v375;
      __int16 v393 = v495.i16[7];
      v495.i16[7] = v498.i16[5];
      v498.i16[5] = v393;
      if (v490)
      {
        uint32x4_t v394 = (uint32x4_t)vdupq_n_s32(v490);
        int16x8_t v493 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v493.i8), v394), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v493), v394));
        *(int16x8_t *)v494 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v494), v394), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v494), v394));
        *(int16x8_t *)&v494[16] = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)&v494[16]), v394), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)&v494[16]), v394));
        int16x8_t v495 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v495.i8), v394), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v495), v394));
        int16x8_t v496 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v496.i8), v394), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v496), v394));
        *(int16x8_t *)v497 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v497), v394), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v497), v394));
        int16x8_t v395 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)&v497[16]), v394), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)&v497[16]), v394));
        int16x8_t v58 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v498.i8), v394), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v498), v394));
        *(int16x8_t *)&v497[16] = v395;
        int16x8_t v498 = v58;
      }
      uint64_t v396 = 0;
      int v397 = 0;
      uint64_t v398 = &v493;
      do
      {
        v5->i8[v396] = v398->i8[0];
        v397 |= v398->u8[1];
        ++v396;
        uint64_t v398 = (int16x8_t *)((char *)v398 + 2);
      }
      while (v396 != 8);
      if (v397) {
        goto LABEL_359;
      }
      uint64_t v399 = 0;
      do
      {
        v5->i8[v399 + 8] = v144->i8[0];
        v397 |= v144->u8[1];
        ++v399;
        __int16 v144 = (int16x8_t *)((char *)v144 + 2);
      }
      while (v399 != 8);
      if (v397) {
        goto LABEL_359;
      }
      uint64_t v400 = 0;
      int v401 = 0;
      unsigned int v402 = &v5->i8[v6];
      do
      {
        v402[v400] = *v141;
        v401 |= v141[1];
        ++v400;
        v141 += 2;
      }
      while (v400 != 8);
      if (v401) {
        goto LABEL_359;
      }
      uint64_t v403 = 0;
      int v404 = v402 + 8;
      do
      {
        v404[v403] = *v145;
        v401 |= v145[1];
        ++v403;
        v145 += 2;
      }
      while (v403 != 8);
      if (v401) {
        goto LABEL_359;
      }
      uint64_t v405 = 0;
      int v406 = &v5->i8[2 * (int)v6];
      do
      {
        v406[v405] = *v142;
        v401 |= v142[1];
        ++v405;
        v142 += 2;
      }
      while (v405 != 8);
      if (v401) {
        goto LABEL_359;
      }
      uint64_t v407 = 0;
      unsigned int v408 = v406 + 8;
      do
      {
        v408[v407] = *v376;
        v401 |= v376[1];
        ++v407;
        v376 += 2;
      }
      while (v407 != 8);
      if (v401) {
        goto LABEL_359;
      }
      uint64_t v409 = 0;
      int v329 = 0;
      int v410 = &v5->i8[3 * v6];
      do
      {
        v410[v409] = v143->i8[0];
        v329 |= v143->u8[1];
        ++v409;
        __int16 v143 = (int16x8_t *)((char *)v143 + 2);
      }
      while (v409 != 8);
      if (v329) {
        goto LABEL_359;
      }
      uint64_t v411 = 0;
      v412 = v410 + 8;
      do
      {
        v412[v411] = v381->i8[0];
        v329 |= v381->u8[1];
        ++v411;
        uint16x8_t v381 = (int16x8_t *)((char *)v381 + 2);
      }
      while (v411 != 8);
LABEL_358:
      if (v329) {
        goto LABEL_359;
      }
      return *(double *)v58.i64;
    case 9u:
      uint64_t v413 = 0;
      v414 = v5;
      do
      {
        v414->i32[0] = (v496.u16[v413] << 20)
                     + (*(unsigned __int16 *)&v497[v413 * 2 + 16] << 30)
                     + (*(unsigned __int16 *)&v494[v413 * 2 + 16] << 10)
                     + v493.u16[v413];
        v414 = (int16x8_t *)((char *)v414 + 4);
        if (v413 == 3) {
          v414 = (int16x8_t *)((char *)v5 + v6);
        }
        ++v413;
      }
      while (v413 != 8);
      uint64_t v415 = 0;
      uint64_t v416 = (__int32 *)((char *)v5->i32 + 2 * (int)v6);
      do
      {
        *v416++ = (*(unsigned __int16 *)&v497[v415 * 2] << 20)
                + (*(unsigned __int16 *)&v497[v415 * 2 + 32] << 30)
                + (v495.u16[v415] << 10)
                + *(unsigned __int16 *)&v494[v415 * 2];
        if (v415 == 3) {
          uint64_t v416 = (__int32 *)((char *)v5->i32 + 3 * (int)v6);
        }
        ++v415;
      }
      while (v415 != 8);
      return *(double *)v58.i64;
    case 0xAu:
    case 0xFu:
    case 0x18u:
      *(void *)&long long v229 = v495.i64[0];
      *((void *)&v229 + 1) = v493.i64[1];
      uint64_t v230 = *(void *)&v494[8];
      v493.i64[1] = *(void *)&v494[16];
      *(_OWORD *)&v494[8] = v229;
      uint64_t v231 = v496.i64[1];
      uint64_t v232 = *(void *)&v497[8];
      v495.i64[0] = v230;
      v496.i64[1] = *(void *)&v497[16];
      *(void *)&long long v229 = v498.i64[0];
      *((void *)&v229 + 1) = v231;
      *(_OWORD *)&v497[8] = v229;
      v498.i64[0] = v232;
      if (v490)
      {
        uint32x4_t v233 = (uint32x4_t)vdupq_n_s32(v490);
        int16x8_t v493 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v493.i8), v233), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v493), v233));
        *(int16x8_t *)v494 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v494), v233), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v494), v233));
        *(int16x8_t *)&v494[16] = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)&v494[16]), v233), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)&v494[16]), v233));
        int16x8_t v495 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v495.i8), v233), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v495), v233));
        int16x8_t v496 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v496.i8), v233), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v496), v233));
        *(int16x8_t *)v497 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v497), v233), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v497), v233));
        *(int16x8_t *)&v497[16] = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)&v497[16]), v233), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)&v497[16]), v233));
        int16x8_t v498 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v498.i8), v233), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v498), v233));
      }
      if (v59 == 15)
      {
        int16x8_t v493 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v493), (int8x16_t)(*(_OWORD *)&v493 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8((int8x16_t)v493));
        *(int8x16_t *)v494 = vbslq_s8((int8x16_t)vcltzq_s16(*(int16x8_t *)v494), (int8x16_t)(*(_OWORD *)v494 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8(*(int8x16_t *)v494));
        *(int8x16_t *)&v494[16] = vbslq_s8((int8x16_t)vcltzq_s16(*(int16x8_t *)&v494[16]), (int8x16_t)(*(_OWORD *)&v494[16] & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8(*(int8x16_t *)&v494[16]));
        int16x8_t v495 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v495), (int8x16_t)(*(_OWORD *)&v495 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8((int8x16_t)v495));
        int16x8_t v496 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v496), (int8x16_t)(*(_OWORD *)&v496 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8((int8x16_t)v496));
        *(int8x16_t *)v497 = vbslq_s8((int8x16_t)vcltzq_s16(*(int16x8_t *)v497), (int8x16_t)(*(_OWORD *)v497 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8(*(int8x16_t *)v497));
        *(int8x16_t *)&v497[16] = vbslq_s8((int8x16_t)vcltzq_s16(*(int16x8_t *)&v497[16]), (int8x16_t)(*(_OWORD *)&v497[16] & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8(*(int8x16_t *)&v497[16]));
        int16x8_t v498 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v498), (int8x16_t)(*(_OWORD *)&v498 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8((int8x16_t)v498));
      }
      goto LABEL_279;
    case 0xCu:
    case 0x12u:
      __int16 v262 = v493.i16[1];
      v493.i16[1] = *(_WORD *)&v494[16];
      *(_WORD *)&v494[16] = v262;
      __int16 v263 = v493.i16[3];
      __int16 v264 = v493.i16[5];
      v493.i16[5] = *(_WORD *)&v494[24];
      *(_WORD *)&v494[24] = v264;
      __int16 v265 = v493.i16[7];
      __int16 v266 = *(_WORD *)&v494[2];
      *(_WORD *)&v494[2] = v495.i16[0];
      v495.i16[0] = v266;
      __int16 v267 = *(_WORD *)&v494[6];
      __int16 v268 = *(_WORD *)&v494[10];
      *(_WORD *)&v494[10] = v495.i16[4];
      v495.i16[4] = v268;
      __int16 v269 = *(_WORD *)&v494[14];
      __int16 v270 = v496.i16[1];
      __int16 v271 = v496.i16[3];
      v496.i16[3] = *(_WORD *)&v497[20];
      *(_WORD *)&v497[20] = v271;
      __int16 v272 = v496.i16[5];
      __int16 v273 = v496.i16[7];
      v496.i16[7] = *(_WORD *)&v497[28];
      *(_WORD *)&v497[28] = v273;
      __int16 v274 = *(_WORD *)&v497[2];
      __int16 v275 = *(_WORD *)&v497[6];
      *(_WORD *)&v497[6] = v498.i16[2];
      v498.i16[2] = v275;
      __int16 v276 = *(_WORD *)&v497[10];
      __int16 v277 = *(_WORD *)&v497[14];
      *(_WORD *)&v497[14] = v498.i16[6];
      v498.i16[6] = v277;
      __int16 v278 = v493.i16[2];
      v493.i16[2] = v496.i16[0];
      v496.i16[0] = v278;
      v493.i16[3] = *(_WORD *)&v497[16];
      v496.i16[1] = *(_WORD *)&v494[20];
      __int16 v279 = v493.i16[6];
      v493.i16[6] = v496.i16[4];
      v496.i16[4] = v279;
      v493.i16[7] = *(_WORD *)&v497[24];
      v496.i16[5] = *(_WORD *)&v494[28];
      __int16 v280 = *(_WORD *)&v494[4];
      *(_WORD *)&v494[4] = *(_WORD *)v497;
      *(_WORD *)v497 = v280;
      *(_WORD *)&v494[6] = v498.i16[0];
      *(_WORD *)&v497[2] = v495.i16[2];
      __int16 v281 = *(_WORD *)&v494[12];
      *(_WORD *)&v494[12] = *(_WORD *)&v497[8];
      *(_WORD *)&v497[8] = v281;
      *(_WORD *)&v494[14] = v498.i16[4];
      *(_WORD *)&v497[10] = v495.i16[6];
      *(_WORD *)&v494[20] = v270;
      *(_WORD *)&v497[16] = v263;
      __int16 v282 = *(_WORD *)&v494[22];
      *(_WORD *)&v494[22] = *(_WORD *)&v497[18];
      *(_WORD *)&v497[18] = v282;
      *(_WORD *)&v494[28] = v272;
      *(_WORD *)&v497[24] = v265;
      __int16 v283 = *(_WORD *)&v494[30];
      *(_WORD *)&v494[30] = *(_WORD *)&v497[26];
      *(_WORD *)&v497[26] = v283;
      v495.i16[2] = v274;
      v498.i16[0] = v267;
      __int16 v284 = v495.i16[3];
      v495.i16[3] = v498.i16[1];
      v498.i16[1] = v284;
      v495.i16[6] = v276;
      v498.i16[4] = v269;
      __int16 v285 = v495.i16[7];
      v495.i16[7] = v498.i16[5];
      v498.i16[5] = v285;
      if (v490)
      {
        uint32x4_t v286 = (uint32x4_t)vdupq_n_s32(v490);
        int16x8_t v493 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v493.i8), v286), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v493), v286));
        *(int16x8_t *)v494 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v494), v286), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v494), v286));
        *(int16x8_t *)&v494[16] = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)&v494[16]), v286), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)&v494[16]), v286));
        int16x8_t v495 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v495.i8), v286), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v495), v286));
        int16x8_t v496 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v496.i8), v286), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v496), v286));
        *(int16x8_t *)v497 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v497), v286), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v497), v286));
        *(int16x8_t *)&v497[16] = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)&v497[16]), v286), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)&v497[16]), v286));
        int16x8_t v498 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v498.i8), v286), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v498), v286));
      }
      if (v59 == 12)
      {
        int16x8_t v493 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v493), (int8x16_t)(*(_OWORD *)&v493 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8((int8x16_t)v493));
        *(int8x16_t *)v494 = vbslq_s8((int8x16_t)vcltzq_s16(*(int16x8_t *)v494), (int8x16_t)(*(_OWORD *)v494 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8(*(int8x16_t *)v494));
        *(int8x16_t *)&v494[16] = vbslq_s8((int8x16_t)vcltzq_s16(*(int16x8_t *)&v494[16]), (int8x16_t)(*(_OWORD *)&v494[16] & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8(*(int8x16_t *)&v494[16]));
        int16x8_t v495 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v495), (int8x16_t)(*(_OWORD *)&v495 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8((int8x16_t)v495));
        int16x8_t v496 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v496), (int8x16_t)(*(_OWORD *)&v496 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8((int8x16_t)v496));
        *(int8x16_t *)v497 = vbslq_s8((int8x16_t)vcltzq_s16(*(int16x8_t *)v497), (int8x16_t)(*(_OWORD *)v497 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8(*(int8x16_t *)v497));
        *(int8x16_t *)&v497[16] = vbslq_s8((int8x16_t)vcltzq_s16(*(int16x8_t *)&v497[16]), (int8x16_t)(*(_OWORD *)&v497[16] & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8(*(int8x16_t *)&v497[16]));
        int16x8_t v498 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v498), (int8x16_t)(*(_OWORD *)&v498 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8((int8x16_t)v498));
      }
      int16x8_t *v5 = v493;
      v5[1] = v496;
      uint32x4_t v287 = &v5->i8[v6];
      *(_OWORD *)uint32x4_t v287 = *(_OWORD *)v494;
      *((_OWORD *)v287 + 1) = *(_OWORD *)v497;
      int32x4_t v288 = &v5->i8[2 * (int)v6];
      *(_OWORD *)int32x4_t v288 = *(_OWORD *)&v494[16];
      *((_OWORD *)v288 + 1) = *(_OWORD *)&v497[16];
      goto LABEL_378;
    case 0x11u:
      __int16 v417 = v496.i16[0];
      v496.i16[0] = v493.i16[2];
      __int16 v418 = v493.i16[3];
      v493.i16[3] = v496.i16[1];
      __int16 v419 = v496.i16[4];
      v496.i16[4] = v493.i16[6];
      __int16 v420 = v493.i16[7];
      v493.i16[7] = v496.i16[5];
      __int16 v421 = *(_WORD *)v497;
      *(_WORD *)v497 = *(_WORD *)&v494[4];
      __int16 v422 = *(_WORD *)&v494[6];
      *(_WORD *)&v494[6] = *(_WORD *)&v497[2];
      __int16 v423 = *(_WORD *)&v497[8];
      *(_WORD *)&v497[8] = *(_WORD *)&v494[12];
      __int16 v424 = *(_WORD *)&v494[14];
      *(_WORD *)&v494[14] = *(_WORD *)&v497[10];
      __int16 v425 = *(_WORD *)&v494[18];
      *(_WORD *)&v494[18] = v493.i16[0];
      v493.i16[0] = v425;
      __int16 v426 = *(_WORD *)&v494[22];
      *(_WORD *)&v494[22] = v417;
      v493.i16[2] = v426;
      __int16 v427 = *(_WORD *)&v494[26];
      *(_WORD *)&v494[26] = v493.i16[4];
      v493.i16[4] = v427;
      __int16 v428 = *(_WORD *)&v494[30];
      *(_WORD *)&v494[30] = v419;
      v493.i16[6] = v428;
      __int16 v429 = v495.i16[1];
      v495.i16[1] = *(_WORD *)v494;
      *(_WORD *)v494 = v429;
      __int16 v430 = v495.i16[3];
      v495.i16[3] = v421;
      *(_WORD *)&v494[4] = v430;
      __int16 v431 = v495.i16[5];
      v495.i16[5] = *(_WORD *)&v494[8];
      *(_WORD *)&v494[8] = v431;
      __int16 v432 = v495.i16[7];
      v495.i16[7] = v423;
      *(_WORD *)&v494[12] = v432;
      v496.i16[1] = *(_WORD *)&v497[16];
      *(_WORD *)&v497[16] = v418;
      __int16 v433 = v496.i16[3];
      v496.i16[3] = *(_WORD *)&v497[20];
      *(_WORD *)&v497[20] = v433;
      v496.i16[5] = *(_WORD *)&v497[24];
      *(_WORD *)&v497[24] = v420;
      __int16 v434 = v496.i16[7];
      v496.i16[7] = *(_WORD *)&v497[28];
      *(_WORD *)&v497[28] = v434;
      *(_WORD *)&v497[2] = v498.i16[0];
      v498.i16[0] = v422;
      __int16 v435 = *(_WORD *)&v497[6];
      *(_WORD *)&v497[6] = v498.i16[2];
      v498.i16[2] = v435;
      *(_WORD *)&v497[10] = v498.i16[4];
      v498.i16[4] = v424;
      __int16 v436 = *(_WORD *)&v497[14];
      *(_WORD *)&v497[14] = v498.i16[6];
      v498.i16[6] = v436;
      if (v490)
      {
        uint32x4_t v437 = (uint32x4_t)vdupq_n_s32(v490);
        int16x8_t v493 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v493.i8), v437), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v493), v437));
        *(int16x8_t *)v494 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v494), v437), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v494), v437));
        *(int16x8_t *)&v494[16] = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)&v494[16]), v437), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)&v494[16]), v437));
        int16x8_t v495 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v495.i8), v437), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v495), v437));
        int16x8_t v496 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v496.i8), v437), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v496), v437));
        *(int16x8_t *)v497 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v497), v437), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v497), v437));
        *(int16x8_t *)&v497[16] = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)&v497[16]), v437), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)&v497[16]), v437));
        int16x8_t v498 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v498.i8), v437), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v498), v437));
      }
      int16x8_t *v5 = v493;
      *(int16x8_t *)((char *)v5 + v6) = v496;
      *(int16x8_t *)((char *)v5 + 2 * (int)v6) = *(int16x8_t *)v494;
      *(int16x8_t *)((char *)v5 + 3 * v6) = *(int16x8_t *)v497;
      *(int16x8_t *)((char *)v5 + 4 * (int)v6) = *(int16x8_t *)&v494[16];
      *(int16x8_t *)((char *)v5 + 5 * v6) = *(int16x8_t *)&v497[16];
      uint64_t v438 = 6 * (int)v6;
      int16x8_t v58 = v495;
      goto LABEL_383;
    case 0x13u:
      goto LABEL_68;
    case 0x15u:
      __int16 v439 = *(_WORD *)&v494[24];
      *(_WORD *)&v494[24] = v496.i16[0];
      __int16 v440 = v496.i16[1];
      v496.i16[1] = *(_WORD *)&v494[26];
      __int16 v441 = *(_WORD *)&v494[28];
      *(_WORD *)&v494[28] = v496.i16[2];
      __int16 v442 = v496.i16[3];
      v496.i16[3] = *(_WORD *)&v494[30];
      __int16 v443 = v495.i16[4];
      v495.i16[4] = *(_WORD *)v497;
      __int16 v444 = *(_WORD *)&v497[2];
      *(_WORD *)&v497[2] = v495.i16[5];
      __int16 v445 = v495.i16[6];
      v495.i16[6] = *(_WORD *)&v497[4];
      __int16 v446 = *(_WORD *)&v497[6];
      *(_WORD *)&v497[6] = v495.i16[7];
      __int16 v447 = v493.i16[1];
      v493.i16[1] = v439;
      v496.i16[0] = v447;
      __int16 v448 = v493.i16[3];
      v493.i16[3] = v441;
      v496.i16[2] = v448;
      __int16 v449 = v493.i16[5];
      v493.i16[5] = v496.i16[4];
      v496.i16[4] = v449;
      __int16 v450 = v493.i16[7];
      v493.i16[7] = v496.i16[6];
      v496.i16[6] = v450;
      __int16 v451 = *(_WORD *)&v494[2];
      *(_WORD *)&v494[2] = v443;
      *(_WORD *)v497 = v451;
      __int16 v452 = *(_WORD *)&v494[6];
      *(_WORD *)&v494[6] = v445;
      *(_WORD *)&v497[4] = v452;
      __int16 v453 = *(_WORD *)&v494[10];
      *(_WORD *)&v494[10] = *(_WORD *)&v497[8];
      *(_WORD *)&v497[8] = v453;
      __int16 v454 = *(_WORD *)&v494[14];
      *(_WORD *)&v494[14] = *(_WORD *)&v497[12];
      *(_WORD *)&v497[12] = v454;
      __int16 v455 = *(_WORD *)&v494[18];
      *(_WORD *)&v494[18] = *(_WORD *)&v497[16];
      *(_WORD *)&v497[16] = v455;
      __int16 v456 = *(_WORD *)&v494[22];
      *(_WORD *)&v494[22] = *(_WORD *)&v497[20];
      *(_WORD *)&v497[20] = v456;
      *(_WORD *)&v494[26] = *(_WORD *)&v497[24];
      *(_WORD *)&v497[24] = v440;
      *(_WORD *)&v494[30] = *(_WORD *)&v497[28];
      *(_WORD *)&v497[28] = v442;
      __int16 v457 = v495.i16[1];
      v495.i16[1] = v498.i16[0];
      v498.i16[0] = v457;
      __int16 v458 = v495.i16[3];
      v495.i16[3] = v498.i16[2];
      v498.i16[2] = v458;
      v495.i16[5] = v498.i16[4];
      v498.i16[4] = v444;
      v495.i16[7] = v498.i16[6];
      v498.i16[6] = v446;
      if (v490)
      {
        uint32x4_t v459 = (uint32x4_t)vdupq_n_s32(v490);
        int16x8_t v493 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v493.i8), v459), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v493), v459));
        *(int16x8_t *)v494 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v494), v459), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v494), v459));
        *(int16x8_t *)&v494[16] = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)&v494[16]), v459), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)&v494[16]), v459));
        int16x8_t v495 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v495.i8), v459), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v495), v459));
        int16x8_t v496 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v496.i8), v459), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v496), v459));
        *(int16x8_t *)v497 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v497), v459), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v497), v459));
        *(int16x8_t *)&v497[16] = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)&v497[16]), v459), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)&v497[16]), v459));
        int16x8_t v498 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v498.i8), v459), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v498), v459));
      }
      int16x8_t *v5 = v493;
      v5[1] = v496;
      v460 = &v5->i8[v6];
      *(_OWORD *)v460 = *(_OWORD *)&v494[16];
      *((_OWORD *)v460 + 1) = *(_OWORD *)&v497[16];
      v461 = &v5->i8[2 * (int)v6];
      *(_OWORD *)v461 = *(_OWORD *)v494;
      *((_OWORD *)v461 + 1) = *(_OWORD *)v497;
      __int16 v261 = (int16x8_t *)((char *)v5 + 3 * (int)v6);
      goto LABEL_379;
    case 0x17u:
      __int16 v462 = v493.i16[1];
      v493.i16[1] = *(_WORD *)&v494[16];
      *(_WORD *)&v494[16] = v462;
      __int16 v463 = v493.i16[3];
      __int16 v464 = v493.i16[5];
      v493.i16[5] = *(_WORD *)&v494[24];
      *(_WORD *)&v494[24] = v464;
      __int16 v465 = v493.i16[7];
      __int16 v466 = *(_WORD *)&v494[2];
      *(_WORD *)&v494[2] = v495.i16[0];
      v495.i16[0] = v466;
      __int16 v467 = *(_WORD *)&v494[6];
      __int16 v468 = *(_WORD *)&v494[10];
      *(_WORD *)&v494[10] = v495.i16[4];
      v495.i16[4] = v468;
      __int16 v469 = *(_WORD *)&v494[14];
      __int16 v470 = v496.i16[1];
      __int16 v471 = v496.i16[3];
      v496.i16[3] = *(_WORD *)&v497[20];
      *(_WORD *)&v497[20] = v471;
      __int16 v472 = v496.i16[5];
      __int16 v473 = v496.i16[7];
      v496.i16[7] = *(_WORD *)&v497[28];
      *(_WORD *)&v497[28] = v473;
      __int16 v474 = *(_WORD *)&v497[2];
      __int16 v475 = *(_WORD *)&v497[6];
      *(_WORD *)&v497[6] = v498.i16[2];
      v498.i16[2] = v475;
      __int16 v476 = *(_WORD *)&v497[10];
      __int16 v477 = *(_WORD *)&v497[14];
      *(_WORD *)&v497[14] = v498.i16[6];
      v498.i16[6] = v477;
      __int16 v478 = v493.i16[2];
      v493.i16[2] = v496.i16[0];
      v496.i16[0] = v478;
      v493.i16[3] = *(_WORD *)&v497[16];
      v496.i16[1] = *(_WORD *)&v494[20];
      __int16 v479 = v493.i16[6];
      v493.i16[6] = v496.i16[4];
      v496.i16[4] = v479;
      v493.i16[7] = *(_WORD *)&v497[24];
      v496.i16[5] = *(_WORD *)&v494[28];
      __int16 v480 = *(_WORD *)&v494[4];
      *(_WORD *)&v494[4] = *(_WORD *)v497;
      *(_WORD *)v497 = v480;
      *(_WORD *)&v494[6] = v498.i16[0];
      *(_WORD *)&v497[2] = v495.i16[2];
      __int16 v481 = *(_WORD *)&v494[12];
      *(_WORD *)&v494[12] = *(_WORD *)&v497[8];
      *(_WORD *)&v497[8] = v481;
      *(_WORD *)&v494[14] = v498.i16[4];
      *(_WORD *)&v497[10] = v495.i16[6];
      *(_WORD *)&v494[20] = v470;
      *(_WORD *)&v497[16] = v463;
      __int16 v482 = *(_WORD *)&v494[22];
      *(_WORD *)&v494[22] = *(_WORD *)&v497[18];
      *(_WORD *)&v497[18] = v482;
      *(_WORD *)&v494[28] = v472;
      *(_WORD *)&v497[24] = v465;
      __int16 v483 = *(_WORD *)&v494[30];
      *(_WORD *)&v494[30] = *(_WORD *)&v497[26];
      *(_WORD *)&v497[26] = v483;
      v495.i16[2] = v474;
      v498.i16[0] = v467;
      __int16 v484 = v495.i16[3];
      v495.i16[3] = v498.i16[1];
      v498.i16[1] = v484;
      v495.i16[6] = v476;
      v498.i16[4] = v469;
      __int16 v485 = v495.i16[7];
      v495.i16[7] = v498.i16[5];
      v498.i16[5] = v485;
      if (v490)
      {
        uint32x4_t v486 = (uint32x4_t)vdupq_n_s32(v490);
        int16x8_t v493 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v493.i8), v486), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v493), v486));
        *(int16x8_t *)v494 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v494), v486), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v494), v486));
        *(int16x8_t *)&v494[16] = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)&v494[16]), v486), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)&v494[16]), v486));
        int16x8_t v495 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v495.i8), v486), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v495), v486));
        int16x8_t v496 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v496.i8), v486), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v496), v486));
        *(int16x8_t *)v497 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v497), v486), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v497), v486));
        *(int16x8_t *)&v497[16] = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)&v497[16]), v486), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)&v497[16]), v486));
        int16x8_t v498 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v498.i8), v486), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v498), v486));
      }
      int16x8_t v493 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v493), (int8x16_t)(*(_OWORD *)&v493 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8((int8x16_t)v493));
      *(int8x16_t *)v494 = vbslq_s8((int8x16_t)vcltzq_s16(*(int16x8_t *)v494), (int8x16_t)(*(_OWORD *)v494 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8(*(int8x16_t *)v494));
      *(int8x16_t *)&v494[16] = vbslq_s8((int8x16_t)vcltzq_s16(*(int16x8_t *)&v494[16]), (int8x16_t)(*(_OWORD *)&v494[16] & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8(*(int8x16_t *)&v494[16]));
      int16x8_t v495 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v495), (int8x16_t)(*(_OWORD *)&v495 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8((int8x16_t)v495));
      int16x8_t v496 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v496), (int8x16_t)(*(_OWORD *)&v496 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8((int8x16_t)v496));
      *(int8x16_t *)v497 = vbslq_s8((int8x16_t)vcltzq_s16(*(int16x8_t *)v497), (int8x16_t)(*(_OWORD *)v497 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8(*(int8x16_t *)v497));
      *(int8x16_t *)&v497[16] = vbslq_s8((int8x16_t)vcltzq_s16(*(int16x8_t *)&v497[16]), (int8x16_t)(*(_OWORD *)&v497[16] & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8(*(int8x16_t *)&v497[16]));
      int16x8_t v498 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v498), (int8x16_t)(*(_OWORD *)&v498 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8((int8x16_t)v498));
      int16x8_t *v5 = v493;
      v5[1] = v496;
      v487 = &v5->i8[v6];
      *(_OWORD *)v487 = *(_OWORD *)v494;
      *((_OWORD *)v487 + 1) = *(_OWORD *)v497;
      v488 = &v5->i8[2 * (int)v6];
      *(_OWORD *)v488 = *(_OWORD *)&v494[16];
      *((_OWORD *)v488 + 1) = *(_OWORD *)&v497[16];
LABEL_378:
      __int16 v261 = (int16x8_t *)((char *)v5 + 3 * v6);
LABEL_379:
      *__int16 v261 = v495;
      int16x8_t v58 = v498;
      goto LABEL_380;
    default:
      longjmp((int *)(a1 + 116), -15405);
  }
}

uint64_t vectorReadPacked(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 > 0x10 || (unint64_t v3 = *(unsigned int **)(result + 16), *(void *)(result + 24) - (void)v3 < (uint64_t)a3)) {
    longjmp((int *)(result + 116), -15407);
  }
  if (a3 < 5)
  {
    unsigned int v6 = 0;
    unsigned int v4 = 0;
  }
  else
  {
    unsigned int v5 = *v3++;
    unsigned int v4 = v5;
    unsigned int v6 = 32;
  }
  for (uint64_t i = 0; i != 8; ++i)
  {
    while (v6 < a3)
    {
      int v8 = *(unsigned __int8 *)v3;
      unint64_t v3 = (unsigned int *)((char *)v3 + 1);
      v4 += v8 << v6;
      v6 += 8;
    }
    *(_WORD *)(a2 + 2 * i) = v4 & ~(-1 << a3);
    v4 >>= a3;
    v6 -= a3;
  }
  *(void *)(result + 16) = v3;
  return result;
}

uint64_t SlimHrlcEncode_C(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = malloc_type_malloc(0x5048uLL, 0x1030040F2A0CDD9uLL);
  if (!v4) {
    return 4294951895;
  }
  unsigned int v5 = v4;
  v4[2565] = *(void *)(a1 + 64);
  *((_WORD *)v4 + 10264) = *(_DWORD *)(a1 + 8356);
  *((_WORD *)v4 + 10265) = *(_DWORD *)(a2 + 12);
  int v6 = *(_DWORD *)(a1 + 4);
  *((_WORD *)v4 + 10266) = *(_DWORD *)a1;
  *((_WORD *)v4 + 10267) = v6;
  SlimHrlcGetSize_C((uint64_t)v4);
  uint64_t v7 = *(unsigned char **)(a2 + 16);
  if (v5[2568] > *(void *)(a2 + 24) - (void)v7) {
    return 4294951895;
  }
  uint64_t v10 = 0;
  uint64_t v8 = SlimHrlcEncodeRun_C((uint64_t)v5, v7, *(void *)(a1 + 56), &v10);
  *(void *)(a2 + 16) = v10;
  free(v5);
  return v8;
}

uint64_t SlimHrlcDecode_C(uint64_t a1)
{
  return SlimHrlcDecodeRun_C(*(unsigned __int16 *)(a1 + 8356));
}

uint64_t CMPhotoJFIFTranscodeStrips(const __CFAllocator *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, const void *a7, int a8, unsigned __int8 a9, char a10, uint64_t (*a11)(uint64_t, void **), uint64_t a12, char a13, uint64_t (*a14)(uint64_t, CFTypeRef *), uint64_t a15, CFIndex a16, uint64_t (*a17)(uint64_t, uint64_t, const void **, const __CFDictionary **, int *, const void **, __CVBuffer **, CFTypeRef *, CFTypeRef *), uint64_t a18, const void *a19, uint64_t a20,const void *a21,const void *a22,uint64_t a23,const __CFData **a24)
{
  values[1] = *(void **)MEMORY[0x1E4F143B8];
  CFTypeRef v99 = 0;
  long long v97 = 0u;
  long long v98 = 0u;
  long long v95 = 0u;
  long long v96 = 0u;
  long long v93 = 0u;
  *(_OWORD *)CFDictionaryRef theDict = 0u;
  *(_OWORD *)uint64_t v92 = 0u;
  uint64_t v91 = 0;
  long long v89 = 0u;
  long long v90 = 0u;
  *(_OWORD *)CFTypeRef cf = 0u;
  uint64_t v87 = 0;
  long long v85 = 0u;
  long long v86 = 0u;
  *(_OWORD *)int16x4_t v84 = 0u;
  CFTypeRef v82 = 0;
  CFTypeRef v83 = 0;
  CMSampleBufferRef sbuf = 0;
  if (!a2 || !a3 || !a11 || (int v30 = a17, a16) && !a17)
  {
    uint64_t WritableWithCFMutableData = FigSignalErrorAt();
    goto LABEL_112;
  }
  uint64_t WritableWithCFMutableData = _addColorSpaceToPropertiesIfNeeded((uint64_t)a1, a19, a20, &v82);
  if (WritableWithCFMutableData) {
    goto LABEL_112;
  }
  *((void *)&v98 + 1) = 16;
  LOBYTE(v9_Block_object_dispose(&STACK[0x280], 8) = 1;
  theDict[1] = 0;
  *(void *)&long long v95 = 0;
  *((void *)&v95 + 1) = a2;
  *(void *)&long long v96 = a3;
  *((void *)&v96 + 1) = a2;
  *(void *)&long long v97 = a3;
  *((void *)&v97 + 1) = a3;
  v92[0] = CFDataCreateMutable(a1, 0);
  if (!v92[0])
  {
LABEL_146:
    int16x8_t v73 = 0;
    int16x8_t v74 = 0;
    goto LABEL_147;
  }
  uint64_t WritableWithCFMutableData = FigByteStreamCreateWritableWithCFMutableData();
  if (WritableWithCFMutableData)
  {
LABEL_112:
    uint64_t v52 = WritableWithCFMutableData;
LABEL_113:
    int16x8_t v73 = 0;
    int16x8_t v74 = 0;
LABEL_114:
    CFDataRef v75 = 0;
    goto LABEL_115;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  theDict[0] = Mutable;
  if (!Mutable) {
    goto LABEL_146;
  }
  CMPhotoCFDictionarySetInt(Mutable, @"QualityControllerType", a6);
  if (a7) {
    CFDictionarySetValue(theDict[0], @"QualityControllerParameters", a7);
  }
  DWORD2(v93) = 1;
  if (!a8 && CMPhotoUnifiedJPEGEncoderIsHardwareAvailable()) {
    DWORD2(v93) = 2;
  }
  HIDWORD(v93) = 5;
  uint64_t WritableWithCFMutableData = CMPhotoUnifiedJPEGEncoderCreate(a1, a22, a21, 0, &v93);
  if (WritableWithCFMutableData) {
    goto LABEL_112;
  }
  CGFloat v38 = *MEMORY[0x1E4F1DB20];
  CGFloat v39 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
  CGFloat v40 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
  CGFloat v41 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
  double v42 = *MEMORY[0x1E4F1DB30];
  double v43 = *(double *)(MEMORY[0x1E4F1DB30] + 8);
  uint64_t v44 = *((void *)&v97 + 1);
  while (v44)
  {
    if (!(void)v96) {
      goto LABEL_44;
    }
    keys[0] = 0;
    values[0] = 0;
    if (cf[1])
    {
      CFRelease(cf[1]);
      cf[1] = 0;
    }
    uint64_t v45 = a11(a12, keys);
    if (v45)
    {
      uint64_t v52 = v45;
      FigSignalErrorAt();
      goto LABEL_69;
    }
    unsigned int v46 = (__CVBuffer *)keys[0];
    if (!keys[0])
    {
      uint64_t v50 = FigSignalErrorAt();
LABEL_68:
      uint64_t v52 = v50;
LABEL_69:
      double v55 = 0;
      goto LABEL_30;
    }
    if (a10)
    {
      int IsITUR_2100TF = CMPhotoPixelBufferIsITUR_2100TF((__CVBuffer *)keys[0]);
      unsigned int v46 = (__CVBuffer *)keys[0];
      if (IsITUR_2100TF)
      {
        uint64_t v50 = CMPhotoScaleAndRotateSessionTransformForSize((uint64_t)a22, (__CVBuffer *)keys[0], a9 == 0, 1, 875704422, 0x100000002, 1, 0, v38, v39, v40, v41, v42, v43, v48, v49, 0, 1u, (__CVBuffer **)values);
        if (v50) {
          goto LABEL_68;
        }
        if (keys[0]) {
          CFRelease(keys[0]);
        }
        unsigned int v46 = (__CVBuffer *)values[0];
        keys[0] = values[0];
        values[0] = 0;
      }
    }
    v51.n128_f64[0] = CMPhotoGetPixelBufferCLAPAsRect(v46);
    uint64_t v52 = 0;
    LOBYTE(cf[0]) = 1;
    long long v89 = 0uLL;
    *((void *)&v90 + 1) = vcvtad_u64_f64(v54);
    uint64_t v91 = *((void *)&v90 + 1);
    double v55 = keys[0];
    *(void *)&long long v90 = vcvtad_u64_f64(v53);
    cf[1] = keys[0];
    keys[0] = 0;
    *(void *)&long long v95 = v95 + *((void *)&v90 + 1);
    *(void *)&long long v96 = v96 - *((void *)&v90 + 1);
    BYTE1(v9_Block_object_dispose(&STACK[0x280], 8) = (void)v96 == 0;
LABEL_30:
    if (values[0]) {
      CFRelease(values[0]);
    }
    if (keys[0]) {
      CFRelease(keys[0]);
    }
    if (v52) {
      goto LABEL_113;
    }
    if (a20)
    {
      int16x8_t v56 = *(void (**)(void *, void, void, void, __n128))(a20 + 16);
      if (v56) {
        v56(v55, v95, 0, *(void *)(a20 + 24), v51);
      }
    }
    while (LOBYTE(v84[0]) && LOBYTE(cf[0]) != 0)
    {
      uint64_t WritableWithCFMutableData = _transcodeCopyStripIntoOverflowAndEncodeIfNecessary((uint64_t)v92, a9, (uint64_t)cf, (uint64_t)v84);
      if (WritableWithCFMutableData) {
        goto LABEL_112;
      }
    }
LABEL_44:
    if (BYTE1(v98) || (uint64_t v58 = *((void *)&v90 + 1), !(*((void *)&v90 + 1) % *((void *)&v98 + 1))))
    {
      if (LOBYTE(v84[0]) && (BYTE1(v98) || !v87))
      {
        uint64_t WritableWithCFMutableData = _transcodeEncodeStrip((uint64_t)v92, a9, (uint64_t)v84, v33, v34, v35, v36, v37);
        if (WritableWithCFMutableData) {
          goto LABEL_112;
        }
      }
      if (LOBYTE(cf[0]))
      {
        uint64_t WritableWithCFMutableData = _transcodeEncodeStrip((uint64_t)v92, a9, (uint64_t)cf, v33, v34, v35, v36, v37);
        if (WritableWithCFMutableData) {
          goto LABEL_112;
        }
      }
    }
    else
    {
      if (!v84[1])
      {
        if (!cf[1])
        {
          int16x8_t v73 = 0;
          int16x8_t v74 = 0;
          CFDataRef v75 = 0;
          uint64_t v52 = 4294950306;
          goto LABEL_115;
        }
        uint64_t PixelFormatType = CVPixelBufferGetPixelFormatType((CVPixelBufferRef)cf[1]);
        uint64_t WritableWithCFMutableData = CMPhotoSurfacePoolCreatePixelBuffer(a21, PixelFormatType, *((size_t *)&v96 + 1), *((size_t *)&v98 + 1), 1, 0, 0, 0, 0, 0, (CVPixelBufferRef *)&v84[1]);
        if (WritableWithCFMutableData) {
          goto LABEL_112;
        }
        long long v85 = 0uLL;
        long long v86 = *((unint64_t *)&v96 + 1);
        uint64_t v87 = *((void *)&v98 + 1);
      }
      unint64_t v60 = v58 & 0xFFFFFFFFFFFFFFF0;
      *((void *)&v90 + 1) = v58 & 0xFFFFFFFFFFFFFFF0;
      if ((v58 & 0xFFFFFFFFFFFFFFF0) != 0)
      {
        uint64_t WritableWithCFMutableData = _transcodeEncodeStrip((uint64_t)v92, a9, (uint64_t)cf, v33, v34, v35, v36, v37);
        if (WritableWithCFMutableData) {
          goto LABEL_112;
        }
        unint64_t v60 = *((void *)&v90 + 1);
      }
      *((void *)&v90 + 1) = v60 + (v58 & 0xF);
      LOBYTE(cf[0]) = (v58 & 0xF) != 0;
      while (LOBYTE(cf[0]))
      {
        uint64_t WritableWithCFMutableData = _transcodeCopyStripIntoOverflowAndEncodeIfNecessary((uint64_t)v92, a9, (uint64_t)cf, (uint64_t)v84);
        if (WritableWithCFMutableData) {
          goto LABEL_112;
        }
      }
    }
    uint64_t v44 = *((void *)&v97 + 1);
    if (BYTE1(v98) && *((void *)&v97 + 1))
    {
      int16x8_t v73 = 0;
      int16x8_t v74 = 0;
      CFDataRef v75 = 0;
LABEL_109:
      uint64_t v52 = 4294950304;
      goto LABEL_115;
    }
  }
  if (cf[1])
  {
    CFRelease(cf[1]);
    cf[1] = 0;
  }
  if (v84[1])
  {
    CFRelease(v84[1]);
    v84[1] = 0;
  }
  if (a13 || a14)
  {
    CFDictionaryRef MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
    int16x8_t v74 = MutableCopy;
    if (MutableCopy)
    {
      CMPhotoCFDictionarySetInt(MutableCopy, @"QualityControllerType", 3);
      keys[0] = @"QualityValue";
      values[0] = 0;
      values[0] = CMPhotoCFNumberCreateFloat(0.75);
      CFDictionaryRef v62 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (values[0]) {
        CFRelease(values[0]);
      }
      CFDictionarySetValue(v74, @"QualityControllerParameters", v62);
      if (v62) {
        CFRelease(v62);
      }
      if (a13)
      {
        *(_OWORD *)keys = 0u;
        CMPhotoPixelBufferConstrainSizeToMaxSideLength(*((unint64_t *)&v96 + 1), v97, 0xA0uLL, 0, 0, 0, 1, (unint64_t *)keys, 0, 0);
        unsigned int Value = CFDictionaryGetValue(v74, @"QualityControllerParameters");
        uint64_t v64 = CMPhotoJFIFTranscodeFromJFIF(a1, *((uint64_t *)&v96 + 1), v97, CMPhotoRectZero, 1, (unint64_t)keys[0], (unint64_t)keys[1], a5, 3u, Value, 0, 0, 0, 0, 0, (uint64_t)v92[1], 0, 0, a21,
                a22,
                a23,
                0,
                a9,
                1,
                (__CFData **)&v83);
        if (!v64)
        {
          int v30 = a17;
          if (!v83) {
            goto LABEL_152;
          }
LABEL_96:
          if (a16) {
            goto LABEL_97;
          }
LABEL_77:
          int16x8_t v73 = 0;
          goto LABEL_102;
        }
      }
      else
      {
        if (!a14)
        {
          int v30 = a17;
          if (a16) {
            goto LABEL_97;
          }
          goto LABEL_77;
        }
        uint64_t v64 = a14(a15, &v99);
        int v30 = a17;
        if (!v64)
        {
          uint64_t v65 = (uint64_t)v99;
          if (!v99)
          {
LABEL_152:
            uint64_t v64 = FigSignalErrorAt();
            goto LABEL_153;
          }
          if (a20)
          {
            char v66 = *(void (**)(CFTypeRef, void, uint64_t, void))(a20 + 16);
            if (v66)
            {
              v66(v99, 0, 1, *(void *)(a20 + 24));
              uint64_t v65 = (uint64_t)v99;
            }
          }
          *(_OWORD *)keys = 0u;
          long long v101 = 0u;
          uint64_t v64 = CMPhotoUnifiedJPEGEncoderEncode(v93, (uint64_t)v74, v65, a9, keys, 1, DWORD2(v93), HIDWORD(v93), (uint64_t)v92, &sbuf);
          if (v64) {
            goto LABEL_153;
          }
          DataBuffer = CMSampleBufferGetDataBuffer(sbuf);
          CFDataRef v75 = DataBuffer;
          if (!DataBuffer)
          {
            int16x8_t v73 = 0;
            goto LABEL_109;
          }
          DataCFIndex Length = CMBlockBufferGetDataLength(DataBuffer);
          uint64_t v64 = CMPhotoDataCreateFromSource(a1, v75, 0, DataLength, &v83, 0);
          if (v64) {
            goto LABEL_153;
          }
          goto LABEL_96;
        }
      }
LABEL_153:
      uint64_t v52 = v64;
      int16x8_t v73 = 0;
      goto LABEL_114;
    }
    int16x8_t v73 = 0;
LABEL_147:
    CFDataRef v75 = 0;
LABEL_148:
    uint64_t v52 = 4294950305;
    goto LABEL_115;
  }
  int16x8_t v74 = 0;
  if (!a16) {
    goto LABEL_77;
  }
LABEL_97:
  int16x8_t v73 = CFArrayCreateMutable(a1, a16, 0);
  if (!v73) {
    goto LABEL_147;
  }
  if (a16 >= 1)
  {
    uint64_t v69 = 0;
    while (1)
    {
      uint64_t v70 = _compressAuxImage(a1, v93, v73, v69, a9, v30, a18, (uint64_t)v92);
      if (v70) {
        break;
      }
      if (a16 == ++v69) {
        goto LABEL_102;
      }
    }
    uint64_t v52 = v70;
    goto LABEL_114;
  }
LABEL_102:
  CFDataRef v75 = CFDataCreateMutable(a1, 0);
  if (!v75) {
    goto LABEL_148;
  }
  uint64_t v71 = FigByteStreamCreateWritableWithCFMutableData();
  if (v71)
  {
    uint64_t v52 = v71;
  }
  else
  {
    uint64_t v72 = CMPhotoJFIFUtilitiesMergeImageComponents(a1, 0, (int)v92[0], (int)v83, v73, v82);
    uint64_t v52 = v72;
    if (a24 && !v72)
    {
      *a24 = v75;
      goto LABEL_114;
    }
  }
LABEL_115:
  CFIndex v76 = 0;
  if (v73) {
    goto LABEL_118;
  }
LABEL_119:
  for (CFIndex i = 0; v76 < i; CFIndex i = CFArrayGetCount(v73))
  {
    CFArrayRef ValueAtIndex = (const void **)CFArrayGetValueAtIndex(v73, v76);
    CMPhotoCompressedAuxImageStorageDestroy(ValueAtIndex);
    ++v76;
    if (!v73) {
      goto LABEL_119;
    }
LABEL_118:
    ;
  }
  if (v74) {
    CFRelease(v74);
  }
  if (v73) {
    CFRelease(v73);
  }
  if (v82) {
    CFRelease(v82);
  }
  if (v99) {
    CFRelease(v99);
  }
  if (sbuf) {
    CFRelease(sbuf);
  }
  CMPhotoUnifiedJPEGEncoderDestroy((void *)v93);
  if (theDict[0]) {
    CFRelease(theDict[0]);
  }
  if (v92[0]) {
    CFRelease(v92[0]);
  }
  if (v92[1]) {
    CFRelease(v92[1]);
  }
  if (v83) {
    CFRelease(v83);
  }
  if (cf[1]) {
    CFRelease(cf[1]);
  }
  if (v84[1]) {
    CFRelease(v84[1]);
  }
  if (v75) {
    CFRelease(v75);
  }
  return v52;
}

uint64_t _addColorSpaceToPropertiesIfNeeded(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  if (!a3) {
    goto LABEL_11;
  }
  if (!*(void *)a3)
  {
    uint64_t v10 = *(const void **)(a3 + 8);
    if (v10)
    {
      uint64_t v8 = CFRetain(v10);
      CGColorSpaceRef v7 = 0;
      if (v8) {
        goto LABEL_9;
      }
LABEL_12:
      if (a2) {
        CFTypeRef v12 = CFRetain(a2);
      }
      else {
        CFTypeRef v12 = 0;
      }
      uint64_t v8 = 0;
LABEL_16:
      uint64_t v9 = 0;
      *a4 = v12;
      if (!v7) {
        goto LABEL_18;
      }
      goto LABEL_17;
    }
LABEL_11:
    CGColorSpaceRef v7 = 0;
    goto LABEL_12;
  }
  CGColorSpaceRef v7 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC98]);
  if (!v7 || (CGColorSpaceEqualToColorSpace() & 1) != 0) {
    goto LABEL_12;
  }
  uint64_t v8 = CGColorSpaceCopyICCData(*(CGColorSpaceRef *)a3);
  if (!v8)
  {
    uint64_t v9 = FigSignalErrorAt();
LABEL_17:
    CFRelease(v7);
    goto LABEL_18;
  }
LABEL_9:
  CFDictionaryRef MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (MutableCopy)
  {
    CFTypeRef v12 = MutableCopy;
    CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E4F2F420], v8);
    goto LABEL_16;
  }
  uint64_t v9 = 4294950305;
  if (v7) {
    goto LABEL_17;
  }
LABEL_18:
  if (v8) {
    CFRelease(v8);
  }
  return v9;
}

uint64_t _transcodeCopyStripIntoOverflowAndEncodeIfNecessary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a3 + 40);
  if (v4)
  {
    uint64_t v10 = (void *)(a4 + 16);
    unint64_t v9 = *(void *)(a4 + 16);
    uint64_t v11 = *(void *)(a4 + 40);
    if (v4 >= *(void *)(a4 + 48)) {
      uint64_t v12 = *(void *)(a4 + 48);
    }
    else {
      uint64_t v12 = *(void *)(a3 + 40);
    }
    uint64_t v13 = *(void *)(a3 + 32);
    unsigned int v14 = *(__CVBuffer **)(a3 + 8);
    unsigned int v15 = *(__CVBuffer **)(a4 + 8);
    uint64_t v16 = v11 + v10[1];
    long long v25 = *(_OWORD *)(a3 + 16);
    uint64_t v26 = v13;
    uint64_t v27 = v12;
    uint64_t result = CMPhotoPixelBufferCopyCropRectToOffset(v14, 1, (uint64_t *)&v25, v15, 1, v9, v16, 0);
    if (!result)
    {
      *(unsigned char *)a4 = 1;
      *(void *)(a3 + 24) += v12;
      uint64_t v23 = *(void *)(a3 + 40) - v12;
      *(void *)(a3 + 40) = v23;
      *(unsigned char *)a3 = v23 != 0;
      uint64_t v24 = *(void *)(a4 + 48) - v12;
      *(void *)(a4 + 40) += v12;
      *(void *)(a4 + 4_Block_object_dispose(&STACK[0x280], 8) = v24;
      if (v24)
      {
        return 0;
      }
      else
      {
        uint64_t result = _transcodeEncodeStrip(a1, a2, a4, v18, v19, v20, v21, v22);
        if (!result)
        {
          *uint64_t v10 = 0;
          v10[1] = 0;
          *(void *)(a4 + 40) = 0;
          *(void *)(a4 + 4_Block_object_dispose(&STACK[0x280], 8) = *(void *)(a1 + 104);
          *(unsigned char *)a4 = 0;
        }
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t _transcodeEncodeStrip(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a1 + 80);
  uint64_t v12 = *(void *)(a1 + 72);
  uint64_t v13 = v11 - *(void *)(a1 + 88);
  uint64_t v14 = *(void *)(a3 + 40);
  uint64_t v15 = *(void *)(a1 + 32);
  uint64_t v16 = *(void *)(a3 + 8);
  uint64_t v17 = *(unsigned int *)(a1 + 24);
  uint64_t v18 = *(unsigned int *)(a1 + 28);
  uint64_t v19 = *(void *)(a1 + 16);
  uint64_t v20 = *(__CFData **)(a1 + 8);
  long long v21 = *(_OWORD *)(a3 + 32);
  v28[0] = *(_OWORD *)(a3 + 16);
  v28[1] = v21;
  *(void *)&long long v25 = 0;
  *((void *)&v25 + 1) = v13;
  uint64_t v26 = v12;
  uint64_t v27 = v14;
  *((void *)&v24 + 1) = v11;
  *(void *)&long long v24 = v12;
  uint64_t result = CMPhotoUnifiedJPEGEncoderEncodeStripToStream(v19, v15, v16, a2, v28, v17, v18, a8, v24, &v25, a1, v20);
  if (!result)
  {
    uint64_t v23 = *(void *)(a3 + 40);
    *(void *)(a1 + 88) -= v23;
    *(void *)(a3 + 24) += v23;
    *(void *)(a3 + 40) = 0;
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a1 + 96) = 0;
  }
  return result;
}

uint64_t CMPhotoJFIFTranscodeFromJFIF(const __CFAllocator *a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, unint64_t a6, unint64_t a7, unsigned int a8, unsigned int a9, const void *a10, char a11, uint64_t a12, CFIndex a13, uint64_t (*a14)(uint64_t, uint64_t, const void **, const __CFDictionary **, int *, const void **, __CVBuffer **, CFTypeRef *, CFTypeRef *), uint64_t a15, uint64_t a16, const void *a17, uint64_t a18, const void *a19, const void *a20,uint64_t a21,char a22,unsigned __int8 a23,char a24,__CFData **a25)
{
  uint64_t v182 = *MEMORY[0x1E4F143B8];
  CMSampleBufferRef sbuf = 0;
  __int16 v143 = 0;
  CFTypeRef v140 = 0;
  CFTypeRef v141 = 0;
  CFTypeRef v138 = 0;
  CFTypeRef v139 = 0;
  CMBlockBufferRef theBuffer = 0;
  if (a24)
  {
    int v30 = 0;
    uint64_t v31 = 4294950306;
    if (a5 != 1 || a13 || a11 || a12)
    {
      unsigned int v32 = 0;
      CFMutableDictionaryRef Mutable = 0;
      goto LABEL_217;
    }
    unsigned int v32 = 0;
    CFMutableDictionaryRef Mutable = 0;
    if (a17) {
      goto LABEL_217;
    }
  }
  uint64_t v34 = _addColorSpaceToPropertiesIfNeeded((uint64_t)a1, a17, a18, &v139);
  if (v34) {
    goto LABEL_143;
  }
  long long v135 = xmmword_1F02DE610;
  uint64_t v136 = qword_1F02DE620;
  BOOL v36 = a3 == a7;
  uint64_t v35 = a7;
  BOOL v36 = v36 && a2 == a6;
  if (v36 || !a22)
  {
    uint64_t v40 = *a4;
    uint64_t v39 = a4[1];
    uint64_t v41 = a4[2];
    uint64_t v42 = a4[3];
    uint64_t v127 = v39;
    uint64_t v128 = v41;
    LODWORD(v146) = 0;
    uint64_t __src = 0;
    uint64_t v181 = 0;
    long long v156 = 0u;
    long long v157 = 0u;
    long long v154 = 0u;
    long long v155 = 0u;
    *(_OWORD *)keys = 0u;
    long long v153 = 0u;
    CFMutableDictionaryRef Mutable = CFDataCreateMutable(a1, 0);
    if (!Mutable)
    {
      uint64_t v31 = 4294950305;
      goto LABEL_145;
    }
    CVPixelBufferRef pixelBuffer = 0;
    uint64_t v43 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v43) {
      uint64_t v44 = v43;
    }
    else {
      uint64_t v44 = 0;
    }
    uint64_t v50 = *(uint64_t (**)(uint64_t, void, CVPixelBufferRef *))(v44 + 24);
    if (!v50)
    {
      uint64_t v31 = 4294954514;
      goto LABEL_48;
    }
    uint64_t v51 = v50(a16, 0, &pixelBuffer);
    if (v51)
    {
      uint64_t v31 = v51;
      goto LABEL_48;
    }
    uint64_t v178 = 0;
    uint64_t v179 = a16;
    values[0] = _applejpeg_read;
    values[1] = 0;
    *(void *)&long long v174 = _applejpeg_skip_0;
    *((void *)&v174 + 1) = _applejpeg_rewind_0;
    __int16 v175 = &v178;
    uint64_t v176 = 0;
    CVPixelBufferRef v177 = pixelBuffer;
    dataPointerOut = 0;
    __int16 v150 = Mutable;
    *(void *)&long long v168 = 0;
    *((void *)&v168 + 1) = _applejpeg_write;
    long long v169 = 0uLL;
    p_dataPointerOut = &dataPointerOut;
    uint64_t v171 = 0;
    uint64_t v172 = 0;
    uint64_t v31 = 4294950305;
    if (!applejpeg_recode_open_file()) {
      goto LABEL_48;
    }
    uint64_t v126 = v42;
    if (v146) {
      goto LABEL_48;
    }
    applejpeg_recode_clear_options();
    uint64_t v52 = 0;
    if ((a5 - 5) >= 4) {
      unint64_t v53 = a7;
    }
    else {
      unint64_t v53 = a6;
    }
    char v54 = 1;
    if (v53 < 0x21)
    {
      unint64_t v55 = 0;
      size_t v56 = 0;
      uint64_t v57 = 0;
    }
    else
    {
      unint64_t v55 = 0;
      size_t v56 = 0;
      uint64_t v57 = 0;
      if (a6 * a7 >= 0x2DC6C0)
      {
        unint64_t v58 = v53 + 15;
        if (v58 >= 0x10)
        {
          uint64_t v52 = (v58 >> 4) - 1;
          AROTSegmentCFNumberRef Size = CMPhotoUnifiedJPEGEncoderGetAROTSegmentSize(v52);
          size_t v89 = AROTSegmentSize + 2;
          uint64_t v124 = AROTSegmentSize;
          UInt8 v120 = AROTSegmentSize - 2;
          unint64_t v119 = (unint64_t)(AROTSegmentSize - 2) >> 8;
          CFDataSetLength(Mutable, AROTSegmentSize + 2);
          Mutableunsigned __int8 BytePtr = CFDataGetMutableBytePtr(Mutable);
          size_t v122 = v89;
          bzero(MutableBytePtr, v89);
          *(_DWORD *)Mutableunsigned __int8 BytePtr = -352331521;
          MutableBytePtr[4] = v119;
          MutableBytePtr[5] = v120;
          uint64_t v91 = applejpeg_recode_set_option_skip_app0();
          if (v91)
          {
            uint64_t v31 = v91;
            uint64_t v35 = a7;
            goto LABEL_48;
          }
          uint64_t v92 = applejpeg_recode_set_option_jpeg_format();
          uint64_t v35 = a7;
          if (v92) {
            goto LABEL_134;
          }
          char v54 = 0;
          uint64_t v57 = 2;
          size_t v56 = v122;
          unint64_t v55 = v124;
        }
        else
        {
          uint64_t v52 = 0;
          unint64_t v55 = 0;
          size_t v56 = 0;
          uint64_t v57 = 0;
        }
      }
    }
    uint64_t v121 = v57;
    size_t v123 = v56;
    char v132 = v54;
    unint64_t v125 = v55;
    uint64_t v92 = applejpeg_recode_set_option_hw_accelerated_resize();
    if (!v92)
    {
      uint64_t v92 = applejpeg_recode_set_option_aspect();
      if (!v92)
      {
        uint64_t v92 = applejpeg_recode_set_option_outsize();
        if (!v92)
        {
          if ((v40 | v127 || v128 | v126) && (int v93 = applejpeg_recode_set_option_crop()) != 0)
          {
            uint64_t v92 = CMPhotoAppleJPEGErrorToCMPhotoError(v93);
          }
          else
          {
            uint64_t v92 = CMPhotoJPEGQualityControllerParse((int)a1, a6, v35, 0, a9, a10, 1, keys);
            if (!v92)
            {
              long long __dst = v156;
              uint64_t v166 = v157;
              uint64_t v167 = 0;
              uint64_t v92 = applejpeg_recode_set_option_quantization_tables();
              if (!v92)
              {
                if (a5 == 1 || (uint64_t v92 = applejpeg_recode_set_option_orientation(), !v92))
                {
                  if (!a18
                    || !*(void *)(a18 + 16)
                    || (uint64_t __src = a18,
                        uint64_t v181 = 0,
                        uint64_t v162 = 1,
                        p_src = &__src,
                        __int16 v164 = _applejpeg_converter_callback,
                        uint64_t v92 = applejpeg_recode_set_option_converter(),
                        !v92))
                  {
                    uint64_t v162 = 0;
                    uint64_t v92 = applejpeg_recode_all_file();
                    if (!v92)
                    {
                      applejpeg_recode_close();
                      if (v132)
                      {
                        uint64_t v31 = 0;
LABEL_145:
                        applejpeg_recode_close();
LABEL_146:
                        CMPhotoJPEGQualitySettingsReleaseStorage(keys);
                        if (!v31) {
                          goto LABEL_147;
                        }
LABEL_116:
                        int v30 = 0;
                        unsigned int v32 = 0;
                        goto LABEL_217;
                      }
                      int32x4_t v94 = CFDataGetMutableBytePtr(Mutable);
                      CFIndex Length = CFDataGetLength(Mutable);
                      uint64_t v31 = CMPhotoUnifiedJPEGEncoderWriteAROTTableToPtr(Length - v123, (unint64_t)&v94[v123], v52, v125, (unint64_t)&v94[v121]);
                      if (!v31) {
                        goto LABEL_145;
                      }
LABEL_48:
                      applejpeg_recode_close();
                      CFRelease(Mutable);
                      CFMutableDictionaryRef Mutable = 0;
                      goto LABEL_146;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_134:
    uint64_t v31 = v92;
    goto LABEL_48;
  }
  uint64_t v134 = 0;
  uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v37) {
    uint64_t v38 = v37;
  }
  else {
    uint64_t v38 = 0;
  }
  uint64_t v45 = *(uint64_t (**)(uint64_t, void, uint64_t *))(v38 + 24);
  if (!v45)
  {
    uint64_t v31 = 4294954514;
LABEL_34:
    int v30 = 0;
    unsigned int v32 = 0;
    CFMutableDictionaryRef Mutable = 0;
    goto LABEL_217;
  }
  uint64_t v34 = v45(a16, 0, &v134);
  if (v34)
  {
LABEL_143:
    uint64_t v31 = v34;
    goto LABEL_34;
  }
  if (v134 < 0)
  {
    uint64_t v31 = 4294950190;
    goto LABEL_34;
  }
  CFMutableDictionaryRef Mutable = 0;
  uint64_t v31 = 4294950305;
  if (CMCreateContiguousBlockBufferFromStream() || v134) {
    goto LABEL_116;
  }
  CFTypeRef cf = 0;
  __int16 v146 = 0;
  CFTypeRef v144 = 0;
  if (a18 && *(void *)(a18 + 16))
  {
    uint64_t v31 = FigSignalErrorAt();
    goto LABEL_215;
  }
  dataPointerOut = 0;
  __int16 v150 = 0;
  if (CMBlockBufferGetDataPointer(theBuffer, 0, (size_t *)&v150, 0, &dataPointerOut))
  {
    uint64_t v31 = 4294950194;
LABEL_215:
    CMPhotoUnifiedJPEGEncoderDestroy(0);
    CFMutableDictionaryRef Mutable = 0;
    long long v86 = 0;
    goto LABEL_109;
  }
  __int16 v175 = 0;
  *(_OWORD *)values = 0u;
  long long v174 = 0u;
  uint64_t v161 = 0;
  long long v159 = 0u;
  long long v160 = 0u;
  long long v157 = 0u;
  long long v158 = 0u;
  long long v155 = 0u;
  long long v156 = 0u;
  long long v153 = 0u;
  long long v154 = 0u;
  *(_OWORD *)keys = 0u;
  CVPixelBufferRef pixelBuffer = 0;
  uint64_t v148 = 0;
  if (!applejpeg_decode_create())
  {
LABEL_142:
    CFDataRef v75 = 0;
    int v74 = 0;
    uint64_t v64 = a10;
    goto LABEL_75;
  }
  uint64_t image_info = applejpeg_decode_open_mem();
  if (image_info || (uint64_t image_info = applejpeg_decode_get_image_info(), image_info))
  {
LABEL_141:
    uint64_t v31 = image_info;
    goto LABEL_142;
  }
  unsigned int chroma_subsampling = applejpeg_decode_get_chroma_subsampling();
  if (chroma_subsampling >= 2)
  {
    if (chroma_subsampling == 4)
    {
      unint64_t v129 = 1;
      unint64_t v49 = 1;
      uint64_t v48 = 1278226488;
      goto LABEL_52;
    }
LABEL_51:
    unint64_t v129 = 2;
    unint64_t v49 = 2;
    uint64_t v48 = 875704422;
    goto LABEL_52;
  }
  if ((a5 - 9) > 0xFFFFFFFB) {
    goto LABEL_51;
  }
  uint64_t v48 = 875704934;
  unint64_t v49 = 1;
  unint64_t v129 = 2;
LABEL_52:
  unsigned int v59 = 0;
  do
    unsigned int v60 = v59++;
  while (a6 <= SLODWORD(values[1]) >> v59 && v60 <= 2 && a7 <= SHIDWORD(values[1]) >> v59);
  uint64_t image_info = applejpeg_decode_set_option_outsize();
  if (image_info) {
    goto LABEL_141;
  }
  uint64_t image_info = applejpeg_decode_set_option_outformat();
  if (image_info) {
    goto LABEL_141;
  }
  uint64_t image_info = applejpeg_decode_set_option_multithread();
  if (image_info) {
    goto LABEL_141;
  }
  uint64_t image_info = applejpeg_decode_set_option_orientation();
  if (image_info) {
    goto LABEL_141;
  }
  uint64_t image_info = applejpeg_decode_get_output_dimensions();
  if (image_info) {
    goto LABEL_141;
  }
  uint64_t image_info = CMPhotoSurfacePoolCreatePixelBuffer(0, v48, SHIDWORD(v148), (int)v148, 1, v129, v49, 0, 2, 0, &pixelBuffer);
  if (image_info) {
    goto LABEL_141;
  }
  uint64_t v63 = CVPixelBufferLockBaseAddress(pixelBuffer, 0);
  uint64_t v64 = a10;
  if (v63)
  {
    uint64_t v31 = v63;
    CFDataRef v75 = 0;
    int v74 = 0;
    goto LABEL_75;
  }
  unsigned int v147 = 0;
  p_src = 0;
  uint64_t v162 = 0;
  uint64_t __src = 0;
  uint64_t v181 = 0;
  uint64_t v178 = 0;
  uint64_t v179 = 0;
  uint64_t PixelBufferDataPointers = CMPhotoGetPixelBufferDataPointers(pixelBuffer, 0, 0, &v147, (uint64_t)&v162, (uint64_t)&__src, (uint64_t)&v178);
  if (PixelBufferDataPointers) {
    goto LABEL_192;
  }
  uint64_t v66 = v147;
  if (v147 - 3 < 0xFFFFFFFE)
  {
    CFDataRef v75 = 0;
    uint64_t v31 = 4294950301;
    goto LABEL_211;
  }
  long long v168 = 0u;
  long long v169 = 0u;
  bzero((char *)&__dst + 8 * v147, 32 - 8 * v147);
  memcpy(&__dst, &__src, 8 * v66);
  uint64_t v67 = 0;
  size_t v68 = &v178;
  uint64_t v69 = &v162;
  do
  {
    uint64_t v71 = *v69++;
    uint64_t v70 = v71;
    uint64_t v72 = (void *)((char *)&v168 + v67);
    uint64_t v73 = *v68++;
    *uint64_t v72 = v70;
    v72[1] = v73;
    v67 += 16;
  }
  while (16 * v66 != v67);
  uint64_t PixelBufferDataPointers = applejpeg_decode_set_option_stride();
  if (PixelBufferDataPointers)
  {
LABEL_192:
    uint64_t v31 = PixelBufferDataPointers;
    goto LABEL_193;
  }
  uint64_t v31 = applejpeg_decode_image_all();
  if (v31)
  {
LABEL_193:
    CFDataRef v75 = 0;
LABEL_211:
    int v74 = 1;
    goto LABEL_75;
  }
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
  int v74 = 0;
  CFDataRef v75 = pixelBuffer;
  CVPixelBufferRef pixelBuffer = 0;
LABEL_75:
  applejpeg_decode_destroy();
  CVPixelBufferRef v76 = pixelBuffer;
  if (v74 && pixelBuffer)
  {
    CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
    CVPixelBufferRef v76 = pixelBuffer;
  }
  uint64_t v35 = a7;
  if (v76) {
    CFRelease(v76);
  }
  if (v31) {
    goto LABEL_206;
  }
  if ((a5 - 5) >= 4)
  {
    unint64_t v77 = a6;
  }
  else
  {
    uint64_t v35 = a6;
    unint64_t v77 = a7;
  }
  if (CVPixelBufferGetWidth(v75) == v77 && CVPixelBufferGetHeight(v75) == v35)
  {
    uint64_t v35 = a7;
  }
  else
  {
    keys[0] = 0;
    uint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(v75);
    uint64_t v81 = CMPhotoScaleAndRotateSessionTransformForSize(0, v75, a23 == 0, 1, PixelFormatType, 0, 0, 1u, *MEMORY[0x1E4F1DB20], *(CGFloat *)(MEMORY[0x1E4F1DB20] + 8), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 16), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 24), (double)v77, (double)(unint64_t)v35, v79, v80, 2, 1u, (__CVBuffer **)keys);
    if (v81)
    {
      uint64_t v31 = v81;
      CFMutableDictionaryRef Mutable = 0;
      long long v86 = 0;
      uint64_t v35 = a7;
      goto LABEL_107;
    }
    uint64_t v35 = a7;
    if (v75) {
      CFRelease(v75);
    }
    CFDataRef v75 = (__CVBuffer *)keys[0];
  }
  uint64_t v82 = CMPhotoUnifiedJPEGEncoderCreate(0, 0, 0, 0, &v146);
  if (v82)
  {
    uint64_t v31 = v82;
LABEL_206:
    CFMutableDictionaryRef Mutable = 0;
    long long v86 = 0;
    goto LABEL_107;
  }
  OSType v83 = CVPixelBufferGetPixelFormatType(v75);
  if (v83 == 1278226488) {
    unsigned int v84 = 6;
  }
  else {
    unsigned int v84 = 5;
  }
  if (v83 == 875704934) {
    uint64_t v85 = 3;
  }
  else {
    uint64_t v85 = v84;
  }
  long long v86 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v86)
  {
    if (a9) {
      FigCFDictionarySetInt();
    }
    if (v64) {
      CFDictionarySetValue(v86, @"QualityControllerParameters", v64);
    }
    *(_OWORD *)keys = 0u;
    long long v153 = 0u;
    uint64_t v87 = CMPhotoUnifiedJPEGEncoderEncode((uint64_t)v146, (uint64_t)v86, (uint64_t)v75, a23, keys, 1, 0, v85, 0, (CMSampleBufferRef *)&v144);
    if (v87)
    {
      uint64_t v31 = v87;
      goto LABEL_105;
    }
    uint64_t v31 = CMPhotoDataCreateFromSampleBuffer(a1, (CMSampleBufferRef)v144, 0, (CFDataRef *)&cf);
    if (v31)
    {
LABEL_105:
      CFMutableDictionaryRef Mutable = 0;
      goto LABEL_107;
    }
    CFMutableDictionaryRef Mutable = (__CFData *)cf;
    CFTypeRef cf = 0;
  }
  else
  {
    CFMutableDictionaryRef Mutable = 0;
    uint64_t v31 = 4294950305;
  }
LABEL_107:
  CMPhotoUnifiedJPEGEncoderDestroy(v146);
  if (v75) {
    CFRelease(v75);
  }
LABEL_109:
  if (cf) {
    CFRelease(cf);
  }
  if (v144) {
    CFRelease(v144);
  }
  if (v86) {
    CFRelease(v86);
  }
  if (v31) {
    goto LABEL_116;
  }
LABEL_147:
  long long v96 = a19;
  if (a11 || a12)
  {
    long long v98 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    unsigned int v32 = v98;
    if (!v98)
    {
LABEL_191:
      int v30 = 0;
      uint64_t v31 = 4294950305;
      goto LABEL_217;
    }
    CMPhotoCFDictionarySetInt(v98, @"QualityControllerType", 3);
    keys[0] = @"QualityValue";
    values[0] = 0;
    values[0] = CMPhotoCFNumberCreateFloat(0.75);
    CFDictionaryRef v99 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (values[0]) {
      CFRelease(values[0]);
    }
    CFDictionarySetValue(v32, @"QualityControllerParameters", v99);
    if (v99) {
      CFRelease(v99);
    }
    if (a11)
    {
      keys[0] = 0;
      keys[1] = 0;
      *(void *)&long long v153 = a6;
      *((void *)&v153 + 1) = v35;
      *(_OWORD *)values = 0u;
      long long v174 = v153;
      CropPostOrientatiouint64_t n = CMPhotoGetCropPostOrientation(a6, v35, values, a5, keys);
      if (CropPostOrientation) {
        goto LABEL_190;
      }
      values[0] = 0;
      values[1] = 0;
      CMPhotoPixelBufferConstrainSizeToMaxSideLength(v153, *((unint64_t *)&v153 + 1), 0xA0uLL, 0, 0, 0, 1, (unint64_t *)values, 0, 0);
      CFIndex v101 = CFDataGetLength(Mutable);
      CropPostOrientatiouint64_t n = CMPhotoByteStreamCreateFromSource(Mutable, v101, 0, 0, &v141, 0);
      if (CropPostOrientation) {
        goto LABEL_190;
      }
      unsigned int Value = CFDictionaryGetValue(v32, @"QualityControllerParameters");
      BYTE2(v11_Block_object_dispose(&STACK[0x280], 8) = 1;
      BYTE1(v11_Block_object_dispose(&STACK[0x280], 8) = a23;
      LOBYTE(v11_Block_object_dispose(&STACK[0x280], 8) = 0;
      long long v96 = a19;
      LOBYTE(v117) = 0;
      CropPostOrientatiouint64_t n = CMPhotoJFIFTranscodeFromJFIF(a1, v153, *((void *)&v153 + 1), &CMPhotoRectZero, 1, values[0], values[1], a8, 3, Value, v117, 0, 0, 0, 0, v141, 0, 0, a19,
                              a20,
                              a21,
                              v118,
                              &v140);
      if (CropPostOrientation) {
        goto LABEL_190;
      }
      if (!v140)
      {
        CropPostOrientatiouint64_t n = FigSignalErrorAt();
        goto LABEL_190;
      }
    }
    else
    {
      if (!a12)
      {
        long long v96 = a19;
        if (!a13) {
          goto LABEL_150;
        }
        goto LABEL_171;
      }
      long long v96 = a19;
      CropPostOrientatiouint64_t n = CMPhotoUnifiedJPEGEncoderCreate(a1, a20, a19, 0, &v143);
      if (CropPostOrientation) {
        goto LABEL_190;
      }
      if (a18)
      {
        int32x4_t v103 = *(void (**)(uint64_t, void, uint64_t, void))(a18 + 16);
        if (v103) {
          v103(a12, 0, 1, *(void *)(a18 + 24));
        }
      }
      *(_OWORD *)keys = 0u;
      long long v153 = 0u;
      CropPostOrientatiouint64_t n = CMPhotoUnifiedJPEGEncoderEncode((uint64_t)v143, (uint64_t)v32, a12, a23, keys, 1, 1, 5, 0, &sbuf);
      if (CropPostOrientation) {
        goto LABEL_190;
      }
      DataBuffer = CMSampleBufferGetDataBuffer(sbuf);
      if (!DataBuffer)
      {
        int v30 = 0;
        uint64_t v31 = 4294950304;
LABEL_217:
        CMPhotoUnifiedJPEGEncoderDestroy(v143);
        if (!v32) {
          goto LABEL_219;
        }
        goto LABEL_218;
      }
      CFDataRef v105 = DataBuffer;
      DataCFIndex Length = CMBlockBufferGetDataLength(DataBuffer);
      CropPostOrientatiouint64_t n = CMPhotoDataCreateFromSource(a1, v105, 0, DataLength, &v140, 0);
      if (CropPostOrientation)
      {
LABEL_190:
        uint64_t v31 = CropPostOrientation;
        int v30 = 0;
        goto LABEL_217;
      }
    }
    if (!a13) {
      goto LABEL_150;
    }
    goto LABEL_171;
  }
  unsigned int v32 = 0;
  if (!a13)
  {
LABEL_150:
    long long v97 = 0;
    goto LABEL_178;
  }
LABEL_171:
  if (!v143)
  {
    CropPostOrientatiouint64_t n = CMPhotoUnifiedJPEGEncoderCreate(a1, a20, v96, 0, &v143);
    if (CropPostOrientation) {
      goto LABEL_190;
    }
  }
  CFMutableArrayRef v107 = CFArrayCreateMutable(a1, a13, 0);
  if (!v107) {
    goto LABEL_191;
  }
  long long v97 = v107;
  if (a13 >= 1)
  {
    uint64_t v108 = 0;
    while (1)
    {
      uint64_t v109 = _compressAuxImage(a1, (uint64_t)v143, v97, v108, a23, a14, a15, 0);
      if (v109) {
        break;
      }
      if (a13 == ++v108) {
        goto LABEL_178;
      }
    }
    uint64_t v31 = v109;
    int v30 = 0;
    goto LABEL_197;
  }
LABEL_178:
  if (a24)
  {
    int v30 = 0;
    if (a25)
    {
      int32x4_t v110 = Mutable;
      CFMutableDictionaryRef Mutable = 0;
LABEL_185:
      int v30 = 0;
      uint64_t v31 = 0;
      *a25 = v110;
      goto LABEL_197;
    }
    uint64_t v31 = 0;
  }
  else
  {
    CFMutableDataRef v111 = CFDataCreateMutable(a1, 0);
    if (v111)
    {
      int32x4_t v110 = v111;
      uint64_t WritableWithCFMutableData = FigByteStreamCreateWritableWithCFMutableData();
      if (WritableWithCFMutableData)
      {
        uint64_t v31 = WritableWithCFMutableData;
      }
      else
      {
        uint64_t v113 = CMPhotoJFIFUtilitiesMergeImageComponents(a1, v138, (int)Mutable, (int)v140, v97, v139);
        uint64_t v31 = v113;
        if (a25 && !v113) {
          goto LABEL_185;
        }
      }
      int v30 = v110;
    }
    else
    {
      int v30 = 0;
      uint64_t v31 = 4294950305;
    }
  }
LABEL_197:
  if (!v97) {
    goto LABEL_217;
  }
  if (CFArrayGetCount(v97) >= 1)
  {
    CFIndex v114 = 0;
    do
    {
      CFArrayRef ValueAtIndex = (const void **)CFArrayGetValueAtIndex(v97, v114);
      CMPhotoCompressedAuxImageStorageDestroy(ValueAtIndex);
      ++v114;
    }
    while (v114 < CFArrayGetCount(v97));
  }
  CMPhotoUnifiedJPEGEncoderDestroy(v143);
  CFRelease(v97);
  if (v32) {
LABEL_218:
  }
    CFRelease(v32);
LABEL_219:
  if (sbuf) {
    CFRelease(sbuf);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v141) {
    CFRelease(v141);
  }
  if (v140) {
    CFRelease(v140);
  }
  if (v139) {
    CFRelease(v139);
  }
  if (v30) {
    CFRelease(v30);
  }
  if (v138) {
    CFRelease(v138);
  }
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  return v31;
}

uint64_t _compressAuxImage(const __CFAllocator *a1, uint64_t a2, __CFArray *a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, const void **, const __CFDictionary **, int *, const void **, __CVBuffer **, CFTypeRef *, CFTypeRef *), uint64_t a7, uint64_t a8)
{
  CFDictionaryRef v33 = 0;
  uint64_t v34 = 0;
  uint64_t v31 = 0;
  unsigned int v32 = 0;
  CFIndex value = 0;
  CFTypeRef v30 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v28 = 0;
  long long v25 = 0;
  CFTypeRef v26 = 0;
  int v24 = 0;
  uint64_t v13 = a6(a4, a7, &v34, &v33, &v24, &v31, &v32, &cf, &v26);
  if (v13)
  {
    uint64_t v20 = v13;
LABEL_47:
    CMPhotoCompressedAuxImageStorageDestroy(0);
    goto LABEL_24;
  }
  if (v24 == 3)
  {
    uint64_t v20 = 0;
    goto LABEL_47;
  }
  signed int PixelFormatType = CVPixelBufferGetPixelFormatType(v32);
  if (v33 && CFDictionaryContainsKey(v33, @"IntInvalidValue"))
  {
    int v15 = 1;
    goto LABEL_14;
  }
  int v15 = 1;
  if (PixelFormatType <= 1278226735)
  {
    if (PixelFormatType == 825306677) {
      goto LABEL_14;
    }
    int v16 = 825437747;
  }
  else
  {
    if (PixelFormatType == 1278226736 || PixelFormatType == 1278226742) {
      goto LABEL_14;
    }
    int v16 = 1932996149;
  }
  if (PixelFormatType != v16) {
    int v15 = 0;
  }
LABEL_14:
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    uint64_t v20 = 4294950305;
    goto LABEL_47;
  }
  uint64_t v18 = Mutable;
  uint64_t v19 = CMPhotoQualityControllerCopyDefaultControllerForAuxiliaryImage(1785750887, v15, (CFNumberRef *)&value, (CFNumberRef *)&v28);
  if (v19) {
    goto LABEL_43;
  }
  if (value) {
    CFDictionarySetValue(v18, @"QualityControllerType", value);
  }
  if (v28) {
    CFDictionarySetValue(v18, @"QualityControllerParameters", v28);
  }
  memset(v23, 0, sizeof(v23));
  uint64_t v19 = CMPhotoUnifiedJPEGEncoderEncode(a2, (uint64_t)v18, (uint64_t)v32, a5, v23, 1, 1, 6, a8, (CMSampleBufferRef *)&v30);
  if (v19)
  {
LABEL_43:
    uint64_t v20 = v19;
    long long v21 = 0;
  }
  else
  {
    uint64_t v20 = CMPhotoCompressedAuxImageStorageCreate(v30, 1, v34, v31, v33, 0, v24, cf, v26, &v25);
    long long v21 = (const void **)v25;
    if (!v20)
    {
      CFArrayAppendValue(a3, v25);
      long long v21 = 0;
      long long v25 = 0;
    }
  }
  CMPhotoCompressedAuxImageStorageDestroy(v21);
  CFRelease(v18);
LABEL_24:
  if (cf) {
    CFRelease(cf);
  }
  if (value) {
    CFRelease(value);
  }
  if (v28) {
    CFRelease(v28);
  }
  if (v34) {
    CFRelease(v34);
  }
  if (v33) {
    CFRelease(v33);
  }
  if (v32) {
    CFRelease(v32);
  }
  if (v31) {
    CFRelease(v31);
  }
  if (v30) {
    CFRelease(v30);
  }
  if (v26) {
    CFRelease(v26);
  }
  return v20;
}

void *_applejpeg_alloc_0(size_t a1)
{
  return malloc_type_malloc(a1, 0x9C4D338CuLL);
}

uint64_t _applejpeg_read(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v7 = *a3;
  uint64_t v6 = a3[1];
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(unsigned int (**)(uint64_t, void, uint64_t, uint64_t, uint64_t *))(v9 + 8);
  if (!v10) {
    return 0;
  }
  uint64_t v12 = 0;
  if (v10(v6, a2, v7, a1, &v12)) {
    return 0;
  }
  uint64_t result = v12;
  *a3 += v12;
  return result;
}

uint64_t _applejpeg_skip_0(int a1, void *a2)
{
  *a2 += a1;
  return 0;
}

uint64_t _applejpeg_rewind_0(void *a1)
{
  *a1 = 0;
  return 0;
}

uint64_t _applejpeg_write(UInt8 *bytes, int a2, uint64_t a3)
{
  *(void *)a3 += a2;
  return 0;
}

void _applejpeg_converter_callback(uint64_t *a1, char **a2, char **a3)
{
  uint64_t v3 = *a1;
  CFTypeRef cf = 0;
  if (*((_DWORD *)a2 + 12) == 4 && *((_DWORD *)a3 + 12) == 4)
  {
    size_t v5 = *((int *)a2 + 10);
    if (v5 == *((_DWORD *)a3 + 10))
    {
      int v6 = *((_DWORD *)a2 + 11);
      if (v6 == *((_DWORD *)a3 + 11))
      {
        size_t v8 = v6;
        if (a2[15]) {
          uint64_t v9 = (uint64_t)a2[15];
        }
        else {
          uint64_t v9 = 4 * v5;
        }
        if (a3[15]) {
          size_t v10 = (size_t)a3[15];
        }
        else {
          size_t v10 = 4 * v5;
        }
        uint64_t v11 = *a3;
        if (v6)
        {
          uint64_t v15 = v3;
          uint64_t v12 = *a2;
          do
          {
            memcpy(v11, v12, 4 * v5);
            v12 += v9;
            v11 += v10;
            --v6;
          }
          while (v6);
          uint64_t v11 = *a3;
          uint64_t v3 = v15;
        }
        CVReturn v13 = CVPixelBufferCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v5, v8, 0x42475241u, v11, v10, 0, 0, 0, (CVPixelBufferRef *)&cf);
        CFTypeRef v14 = cf;
        if (!v13)
        {
          (*(void (**)(CFTypeRef, uint64_t, void, void))(v3 + 16))(cf, a1[1], 0, *(void *)(v3 + 24));
          a1[1] += v8;
          CFTypeRef v14 = cf;
        }
        if (v14) {
          CFRelease(v14);
        }
      }
    }
  }
}

uint64_t bitstream_write_start_luma(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return first_pixel_luma(a1, a2, a3, a4, a5, a6, 0, 32);
}

uint64_t first_pixel_luma(_DWORD *a1, __int32 *a2, int a3, int8x8_t a4)
{
  __int32 v5 = *a1;
  unint64_t v4 = (double *)(a1 + 1);
  a4.i32[0] = v5;
  *a2 = v5;
  a4.i8[7] = HIBYTE(v5);
  if (((a3 - 4) & 7) != 0) {
    return process_quad_luma();
  }
  else {
    return process_pixel_luma(v4, a4);
  }
}

uint64_t process_quad_luma(__int32 *a1, uint64_t a2, int a3, uint64_t a4, double a5, int8x8_t a6)
{
  a6.i32[0] = *a1;
  int8x8_t v6 = vext_s8(*(int8x8_t *)&a5, a6, 7uLL);
  HIBYTE(a5) = HIBYTE(*a1);
  v7.n128_u64[0] = vshll_n_u8((uint8x8_t)vsub_s8(a6, v6), 1uLL).u64[0];
  v7.n128_u64[1] = v7.n128_u64[0];
  return process_quad_luma4((uint64_t)(a1 + 1), a2, (a3 - 4), a4, a5, v7);
}

uint64_t process_pixel_luma(double *a1, int8x8_t a2)
{
  double v3 = *a1;
  _X0 = a1 + 1;
  __asm { PRFM            #0, [X0,#0x20] }
  return process_pixel_luma0(v3, (__n128)vshll_n_u8((uint8x8_t)vsub_s8(*(int8x8_t *)&v3, vext_s8(a2, *(int8x8_t *)&v3, 7uLL)), 1uLL));
}

uint64_t process_pixel_luma0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, __n128 a6)
{
  return bitstream_write_code_luma0(a1, a2, a3, a4, HIBYTE(*(unsigned __int16 *)(a4 + a6.n128_u16[0])), *(_WORD *)(a4 + a6.n128_u16[0]));
}

uint64_t bitstream_write_code_luma0(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, double a9, float a10)
{
  BOOL v10 = __OFSUB__(a8, a6);
  int v11 = a8 - a6;
  if ((v11 < 0) ^ v10 | (v11 == 0)) {
    return full_buffer_luma0(a1, a2, a3, a4, a5, a6, a7, v11);
  }
  else {
    return process_pixel_luma1(a1, (uint64_t)a2, a3, a4, a5, a9, a10, a6, a7, v11);
  }
}

uint64_t full_buffer_luma0(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, char a8)
{
  *a2 = a7 | (a5 >> -a8);
  return process_pixel_luma1(a1, a2 + 1);
}

uint64_t process_pixel_luma1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, float a7, uint64_t a8, int a9, char a10)
{
  return bitstream_write_code_luma1(a1, a2, a3, a4, HIBYTE(*(unsigned __int16 *)(a4 + HIWORD(a7))), *(_WORD *)(a4 + HIWORD(a7)), a9 | (a5 << a10));
}

uint64_t bitstream_write_code_luma1(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, double a9, double a10)
{
  BOOL v10 = __OFSUB__(a8, a6);
  int v11 = a8 - a6;
  if ((v11 < 0) ^ v10 | (v11 == 0)) {
    return full_buffer_luma1(a1, a2, a3, a4, a5, a6, a7, v11);
  }
  else {
    return process_pixel_luma2(a1, (uint64_t)a2, a3, a4, a5, a9, a10, a6, a7, v11);
  }
}

uint64_t full_buffer_luma1(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, char a8)
{
  *a2 = a7 | (a5 >> -a8);
  return process_pixel_luma2(a1, a2 + 1);
}

uint64_t process_pixel_luma2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, uint64_t a8, int a9, char a10)
{
  return bitstream_write_code_luma2(a1, a2, a3, a4, HIBYTE(*(unsigned __int16 *)(a4 + WORD2(a7))), *(_WORD *)(a4 + WORD2(a7)), a9 | (a5 << a10));
}

uint64_t bitstream_write_code_luma2(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, double a9, double a10)
{
  BOOL v10 = __OFSUB__(a8, a6);
  int v11 = a8 - a6;
  if ((v11 < 0) ^ v10 | (v11 == 0)) {
    return full_buffer_luma2(a1, a2, a3, a4, a5, a6, a7, v11);
  }
  else {
    return process_pixel_luma3(a1, (uint64_t)a2, a3, a4, a5, a9, a10, a6, a7, v11);
  }
}

uint64_t full_buffer_luma2(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, char a8)
{
  *a2 = a7 | (a5 >> -a8);
  return process_pixel_luma3(a1, a2 + 1);
}

uint64_t process_pixel_luma3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, uint64_t a8, int a9, char a10)
{
  return bitstream_write_code_luma3(a1, a2, a3, a4, HIBYTE(*(unsigned __int16 *)(a4 + HIWORD(a7))), *(_WORD *)(a4 + HIWORD(a7)), a9 | (a5 << a10));
}

uint64_t bitstream_write_code_luma3(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, int a8)
{
  BOOL v8 = __OFSUB__(a8, a6);
  int v9 = a8 - a6;
  if ((v9 < 0) ^ v8 | (v9 == 0)) {
    return full_buffer_luma3(a1, a2, a3, a4, a5, a6, a7, v9);
  }
  else {
    return process_pixel_luma4();
  }
}

uint64_t full_buffer_luma3(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, char a8)
{
  *a2 = a7 | (a5 >> -a8);
  return process_pixel_luma4(a1, a2 + 1);
}

uint64_t process_pixel_luma4()
{
  return process_quad_luma4();
}

uint64_t process_quad_luma4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, __n128 a6)
{
  return bitstream_write_code_luma4(a1, a2, a3, a4, HIBYTE(*(unsigned __int16 *)(a4 + a6.n128_u16[4])), *(_WORD *)(a4 + a6.n128_u16[4]));
}

uint64_t bitstream_write_code_luma4(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, double a9, __n128 a10)
{
  BOOL v10 = __OFSUB__(a8, a6);
  int v11 = a8 - a6;
  if ((v11 < 0) ^ v10 | (v11 == 0)) {
    return full_buffer_luma4(a1, a2, a3, a4, a5, a6, a7, v11);
  }
  else {
    return process_pixel_luma5(a1, (uint64_t)a2, a3, a4, a5, a9, a10, a6, a7, v11);
  }
}

uint64_t full_buffer_luma4(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, char a8)
{
  *a2 = a7 | (a5 >> -a8);
  return process_pixel_luma5(a1, a2 + 1);
}

uint64_t process_pixel_luma5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, __n128 a7, uint64_t a8, int a9, char a10)
{
  return bitstream_write_code_luma5(a1, a2, a3, a4, HIBYTE(*(unsigned __int16 *)(a4 + a7.n128_u16[5])), *(_WORD *)(a4 + a7.n128_u16[5]), a9 | (a5 << a10));
}

uint64_t bitstream_write_code_luma5(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, double a9, __n128 a10)
{
  BOOL v10 = __OFSUB__(a8, a6);
  int v11 = a8 - a6;
  if ((v11 < 0) ^ v10 | (v11 == 0)) {
    return full_buffer_luma5(a1, a2, a3, a4, a5, a6, a7, v11);
  }
  else {
    return process_pixel_luma6(a1, (uint64_t)a2, a3, a4, a5, a9, a10, a6, a7, v11);
  }
}

uint64_t full_buffer_luma5(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, char a8)
{
  *a2 = a7 | (a5 >> -a8);
  return process_pixel_luma6(a1, a2 + 1);
}

uint64_t process_pixel_luma6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, __n128 a7, uint64_t a8, int a9, char a10)
{
  return bitstream_write_code_luma6(a1, a2, a3, a4, HIBYTE(*(unsigned __int16 *)(a4 + a7.n128_u16[6])), *(_WORD *)(a4 + a7.n128_u16[6]), a9 | (a5 << a10));
}

uint64_t bitstream_write_code_luma6(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, double a9, __n128 a10)
{
  BOOL v10 = __OFSUB__(a8, a6);
  int v11 = a8 - a6;
  if ((v11 < 0) ^ v10 | (v11 == 0)) {
    return full_buffer_luma6(a1, a2, a3, a4, a5, a6, a7, v11);
  }
  else {
    return process_pixel_luma7(a1, (uint64_t)a2, a3, a4, a5, a9, a10, a6, a7, v11);
  }
}

uint64_t full_buffer_luma6(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, char a8)
{
  *a2 = a7 | (a5 >> -a8);
  return process_pixel_luma7(a1, a2 + 1);
}

uint64_t process_pixel_luma7(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, __n128 a7, uint64_t a8, int a9, char a10)
{
  return bitstream_write_code_luma7(a1, a2, a3, a4, HIBYTE(*(unsigned __int16 *)(a4 + a7.n128_u16[7])), *(_WORD *)(a4 + a7.n128_u16[7]), a9 | (a5 << a10));
}

uint64_t bitstream_write_code_luma7(double *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, int8x8_t a9)
{
  BOOL v9 = __OFSUB__(a8, a6);
  int v10 = a8 - a6;
  if ((v10 < 0) ^ v9 | (v10 == 0)) {
    return full_buffer_luma7((uint64_t)a1, a2, a3, a4, a5, a6, a7, v10);
  }
  else {
    return finish_quad_luma(a1, (uint64_t)a2, a3, a4, a5, a6, a7, v10, a9);
  }
}

uint64_t full_buffer_luma7(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, char a8)
{
  *a2 = a7 | (a5 >> -a8);
  return finish_quad_luma(a1, a2 + 1);
}

uint64_t finish_quad_luma(double *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, char a8, int8x8_t a9)
{
  uint64_t v9 = a7 | (a5 << a8);
  if (a3) {
    return process_pixel_luma(a1, a9);
  }
  else {
    return bitstream_write_flush_luma(a1, a2, a3, a4, a5, a6, v9);
  }
}

uint64_t bitstream_write_flush_luma@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, int a9@<W8>)
{
  if (a8 < 8) {
    return bitstream_write_quad_luma(a1, a2, a3, a4, a5, a6, a7);
  }
  int v10 = a9 - a8;
  if (v10) {
    return flush_loop_luma(a1, a2, a3, a4, a5, a6, a7, v10);
  }
  else {
    return done_luma(a1, (uint64_t)a2);
  }
}

uint64_t flush_loop_luma(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  do
  {
    HIDWORD(v_Block_object_dispose(&STACK[0x280], 8) = a7;
    LODWORD(v_Block_object_dispose(&STACK[0x280], 8) = a7;
    a7 = v8 >> 24;
    *a2++ = BYTE3(v8);
    BOOL v9 = __OFSUB__(a8, 8);
    a8 -= 8;
  }
  while (!((a8 < 0) ^ v9 | (a8 == 0)));
  return done_luma();
}

uint64_t done_luma(uint64_t a1, uint64_t a2)
{
  return a2 - v2;
}

uint64_t bitstream_write_quad_luma(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  *a2 = a7;
  return done_luma(a1, (uint64_t)(a2 + 1));
}

uint64_t bitstream_write_start_chroma(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return first_pixel_chroma(a1, a2, a3, a4, a5, a6, 0, 32);
}

uint64_t first_pixel_chroma(_DWORD *a1, __int32 *a2, int a3, int8x8_t a4)
{
  __int32 v5 = *a1;
  unint64_t v4 = (double *)(a1 + 1);
  a4.i32[0] = v5;
  *a2 = v5;
  a4.i16[3] = HIWORD(v5);
  if (((a3 - 4) & 7) != 0) {
    return process_quad_chroma();
  }
  else {
    return process_pixel_luma(v4, a4);
  }
}

uint64_t process_quad_chroma(__int32 *a1, uint64_t a2, int a3, uint64_t a4, double a5, int8x8_t a6)
{
  a6.i32[0] = *a1;
  int8x8_t v6 = vext_s8(*(int8x8_t *)&a5, a6, 6uLL);
  HIWORD(a5) = HIWORD(*a1);
  v7.n128_u64[0] = vshll_n_u8((uint8x8_t)vsub_s8(a6, v6), 1uLL).u64[0];
  v7.n128_u64[1] = v7.n128_u64[0];
  return process_quad_chroma4((uint64_t)(a1 + 1), a2, (a3 - 4), a4, a5, v7);
}

uint64_t process_pixel_chroma(double *a1, int8x8_t a2)
{
  double v3 = *a1;
  _X0 = a1 + 1;
  __asm { PRFM            #0, [X0,#0x20] }
  return process_pixel_chroma0(v3, (__n128)vshll_n_u8((uint8x8_t)vsub_s8(*(int8x8_t *)&v3, vext_s8(a2, *(int8x8_t *)&v3, 6uLL)), 1uLL));
}

uint64_t process_pixel_chroma0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, __n128 a6)
{
  return bitstream_write_code_chroma0(a1, a2, a3, a4, HIBYTE(*(unsigned __int16 *)(a4 + a6.n128_u16[0])), *(_WORD *)(a4 + a6.n128_u16[0]));
}

uint64_t bitstream_write_code_chroma0(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, double a9, float a10)
{
  BOOL v10 = __OFSUB__(a8, a6);
  int v11 = a8 - a6;
  if ((v11 < 0) ^ v10 | (v11 == 0)) {
    return full_buffer_chroma0(a1, a2, a3, a4, a5, a6, a7, v11);
  }
  else {
    return process_pixel_chroma1(a1, (uint64_t)a2, a3, a4, a5, a9, a10, a6, a7, v11);
  }
}

uint64_t full_buffer_chroma0(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, char a8)
{
  *a2 = a7 | (a5 >> -a8);
  return process_pixel_chroma1(a1, a2 + 1);
}

uint64_t process_pixel_chroma1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, float a7, uint64_t a8, int a9, char a10)
{
  return bitstream_write_code_chroma1(a1, a2, a3, a4, HIBYTE(*(unsigned __int16 *)(a4 + HIWORD(a7))), *(_WORD *)(a4 + HIWORD(a7)), a9 | (a5 << a10));
}

uint64_t bitstream_write_code_chroma1(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, int a7, int a8, double a9, double a10)
{
  BOOL v10 = __OFSUB__(a8, a6);
  int v11 = a8 - a6;
  if ((v11 < 0) ^ v10 | (v11 == 0)) {
    return full_buffer_chroma1(a1, a2, a3, a4, a5, a6, a7, v11);
  }
  else {
    return process_pixel_chroma2(a1, (uint64_t)a2, a3, a4, a5, a9, a10, a6, a7, v11);
  }
}

uint64_t full_buffer_chroma1(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, int a7, char a8)
{
  *a2 = a7 | (a5 >> -a8);
  return process_pixel_chroma2(a1, a2 + 1);
}

uint64_t process_pixel_chroma2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, uint64_t a8, int a9, char a10)
{
  return bitstream_write_code_chroma2(a1, a2, a3, a4, HIBYTE(*(unsigned __int16 *)(a4 + WORD2(a7))), *(_WORD *)(a4 + WORD2(a7)), a9 | (a5 << a10));
}

uint64_t bitstream_write_code_chroma2(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, double a9, double a10)
{
  BOOL v10 = __OFSUB__(a8, a6);
  int v11 = a8 - a6;
  if ((v11 < 0) ^ v10 | (v11 == 0)) {
    return full_buffer_chroma2(a1, a2, a3, a4, a5, a6, a7, v11);
  }
  else {
    return process_pixel_chroma3(a1, (uint64_t)a2, a3, a4, a5, a9, a10, a6, a7, v11);
  }
}

uint64_t full_buffer_chroma2(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, char a8)
{
  *a2 = a7 | (a5 >> -a8);
  return process_pixel_chroma3(a1, a2 + 1);
}

uint64_t process_pixel_chroma3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, uint64_t a8, int a9, char a10)
{
  return bitstream_write_code_chroma3(a1, a2, a3, a4, HIBYTE(*(unsigned __int16 *)(a4 + HIWORD(a7))), *(_WORD *)(a4 + HIWORD(a7)), a9 | (a5 << a10));
}

uint64_t bitstream_write_code_chroma3(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, int a8)
{
  BOOL v8 = __OFSUB__(a8, a6);
  int v9 = a8 - a6;
  if ((v9 < 0) ^ v8 | (v9 == 0)) {
    return full_buffer_chroma3(a1, a2, a3, a4, a5, a6, a7, v9);
  }
  else {
    return process_pixel_chroma4();
  }
}

uint64_t full_buffer_chroma3(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, char a8)
{
  *a2 = a7 | (a5 >> -a8);
  return process_pixel_chroma4(a1, a2 + 1);
}

uint64_t process_pixel_chroma4()
{
  return process_quad_chroma4();
}

uint64_t process_quad_chroma4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, __n128 a6)
{
  return bitstream_write_code_chroma4(a1, a2, a3, a4, HIBYTE(*(unsigned __int16 *)(a4 + a6.n128_u16[4])), *(_WORD *)(a4 + a6.n128_u16[4]));
}

uint64_t bitstream_write_code_chroma4(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, double a9, __n128 a10)
{
  BOOL v10 = __OFSUB__(a8, a6);
  int v11 = a8 - a6;
  if ((v11 < 0) ^ v10 | (v11 == 0)) {
    return full_buffer_chroma4(a1, a2, a3, a4, a5, a6, a7, v11);
  }
  else {
    return process_pixel_chroma5(a1, (uint64_t)a2, a3, a4, a5, a9, a10, a6, a7, v11);
  }
}

uint64_t full_buffer_chroma4(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, char a8)
{
  *a2 = a7 | (a5 >> -a8);
  return process_pixel_chroma5(a1, a2 + 1);
}

uint64_t process_pixel_chroma5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, __n128 a7, uint64_t a8, int a9, char a10)
{
  return bitstream_write_code_chroma5(a1, a2, a3, a4, HIBYTE(*(unsigned __int16 *)(a4 + a7.n128_u16[5])), *(_WORD *)(a4 + a7.n128_u16[5]), a9 | (a5 << a10));
}

uint64_t bitstream_write_code_chroma5(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, double a9, __n128 a10)
{
  BOOL v10 = __OFSUB__(a8, a6);
  int v11 = a8 - a6;
  if ((v11 < 0) ^ v10 | (v11 == 0)) {
    return full_buffer_chroma5(a1, a2, a3, a4, a5, a6, a7, v11);
  }
  else {
    return process_pixel_chroma6(a1, (uint64_t)a2, a3, a4, a5, a9, a10, a6, a7, v11);
  }
}

uint64_t full_buffer_chroma5(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, char a8)
{
  *a2 = a7 | (a5 >> -a8);
  return process_pixel_chroma6(a1, a2 + 1);
}

uint64_t process_pixel_chroma6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, __n128 a7, uint64_t a8, int a9, char a10)
{
  return bitstream_write_code_chroma6(a1, a2, a3, a4, HIBYTE(*(unsigned __int16 *)(a4 + a7.n128_u16[6])), *(_WORD *)(a4 + a7.n128_u16[6]), a9 | (a5 << a10));
}

uint64_t bitstream_write_code_chroma6(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, double a9, __n128 a10)
{
  BOOL v10 = __OFSUB__(a8, a6);
  int v11 = a8 - a6;
  if ((v11 < 0) ^ v10 | (v11 == 0)) {
    return full_buffer_chroma6(a1, a2, a3, a4, a5, a6, a7, v11);
  }
  else {
    return process_pixel_chroma7(a1, (uint64_t)a2, a3, a4, a5, a9, a10, a6, a7, v11);
  }
}

uint64_t full_buffer_chroma6(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, char a8)
{
  *a2 = a7 | (a5 >> -a8);
  return process_pixel_chroma7(a1, a2 + 1);
}

uint64_t process_pixel_chroma7(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, __n128 a7, uint64_t a8, int a9, char a10)
{
  return bitstream_write_code_chroma7(a1, a2, a3, a4, HIBYTE(*(unsigned __int16 *)(a4 + a7.n128_u16[7])), *(_WORD *)(a4 + a7.n128_u16[7]), a9 | (a5 << a10));
}

uint64_t bitstream_write_code_chroma7(double *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, int8x8_t a9)
{
  BOOL v9 = __OFSUB__(a8, a6);
  int v10 = a8 - a6;
  if ((v10 < 0) ^ v9 | (v10 == 0)) {
    return full_buffer_chroma7((uint64_t)a1, a2, a3, a4, a5, a6, a7, v10);
  }
  else {
    return finish_quad_chroma(a1, (uint64_t)a2, a3, a4, a5, a6, a7, v10, a9);
  }
}

uint64_t full_buffer_chroma7(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, char a8)
{
  *a2 = a7 | (a5 >> -a8);
  return finish_quad_chroma(a1, a2 + 1);
}

uint64_t finish_quad_chroma(double *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, char a8, int8x8_t a9)
{
  uint64_t v9 = a7 | (a5 << a8);
  if (a3) {
    return process_pixel_chroma(a1, a9);
  }
  else {
    return bitstream_write_flush_chroma(a1, a2, a3, a4, a5, a6, v9);
  }
}

uint64_t bitstream_write_flush_chroma@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, int a9@<W8>)
{
  if (a8 < 8) {
    return bitstream_write_quad_chroma(a1, a2, a3, a4, a5, a6, a7);
  }
  int v10 = a9 - a8;
  if (v10) {
    return flush_loop_chroma(a1, a2, a3, a4, a5, a6, a7, v10);
  }
  else {
    return done_chroma(a1, (uint64_t)a2);
  }
}

uint64_t flush_loop_chroma(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  do
  {
    HIDWORD(v_Block_object_dispose(&STACK[0x280], 8) = a7;
    LODWORD(v_Block_object_dispose(&STACK[0x280], 8) = a7;
    a7 = v8 >> 24;
    *a2++ = BYTE3(v8);
    BOOL v9 = __OFSUB__(a8, 8);
    a8 -= 8;
  }
  while (!((a8 < 0) ^ v9 | (a8 == 0)));
  return done_chroma();
}

uint64_t done_chroma(uint64_t a1, uint64_t a2)
{
  return a2 - v2;
}

uint64_t bitstream_write_quad_chroma(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  *a2 = a7;
  return done_chroma(a1, (uint64_t)(a2 + 1));
}

uint64_t CMPhotoByteStreamReadAndCreateData(uint64_t a1, unint64_t a2, uint64_t a3, CFDataRef *a4, CFIndex *a5)
{
  if (!a4)
  {
    CFIndex v12 = 0;
    goto LABEL_22;
  }
  unint64_t v25 = 0;
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  CVReturn v13 = *(uint64_t (**)(uint64_t, uint64_t, unint64_t *))(v11 + 24);
  if (!v13) {
    return 4294954514;
  }
  uint64_t v26 = 0;
  uint64_t v14 = v13(a1, a3, &v25);
  if (v14) {
    return v14;
  }
  if ((v25 & 0x8000000000000000) != 0) {
    return 4294950190;
  }
  if (v25 >= a2) {
    CFIndex v12 = a2;
  }
  else {
    CFIndex v12 = v25;
  }
  CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  int v16 = CFAllocatorAllocate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v12, 0);
  if (!v16) {
    return 4294950305;
  }
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v18) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = 0;
  }
  long long v21 = *(uint64_t (**)(uint64_t, CFIndex, uint64_t, void *, uint64_t *))(v19 + 8);
  if (!v21)
  {
    uint64_t v20 = 4294954514;
LABEL_25:
    CFAllocatorDeallocate(v15, v17);
    return v20;
  }
  uint64_t v22 = v21(a1, v12, a3, v17, &v26);
  if (v22)
  {
    uint64_t v20 = v22;
    goto LABEL_25;
  }
  if (v26 != v12)
  {
    uint64_t v20 = 4294950194;
    goto LABEL_25;
  }
  CFDataRef v23 = CFDataCreateWithBytesNoCopy(v15, (const UInt8 *)v17, v12, v15);
  if (!v23)
  {
    uint64_t v20 = 4294950305;
    goto LABEL_25;
  }
  *a4 = v23;
LABEL_22:
  uint64_t v20 = 0;
  if (a5) {
    *a5 = v12;
  }
  return v20;
}

uint64_t CMPhotoUnifiedJPEGEncoderIsHardwareAvailable()
{
  if (_isHWAvailableHelper_onceToken_0 != -1) {
    dispatch_once(&_isHWAvailableHelper_onceToken_0, &__block_literal_global_15);
  }
  return _isHWAvailableHelper_sHWAvailable_0;
}

uint64_t CMPhotoUnifiedJPEGEncoderGetAROTSegmentSize(uint64_t a1)
{
  if (a1) {
    return 4 * a1 + 14;
  }
  else {
    return 0;
  }
}

uint64_t CMPhotoUnifiedJPEGEncoderWriteAROTTableToPtr(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  int v16 = 0;
  uint64_t v5 = 4294950306;
  if (a1)
  {
    if (a2)
    {
      unsigned __int16 v7 = a3;
      if (a3)
      {
        if (4 * a3 + 14 <= a4 && a5 && (a5 + a4 <= a2 || a2 + a1 < a5))
        {
          v15[0] = 0;
          v15[1] = 1;
          memset(&v15[2], 0, 24);
          v15[5] = a3;
          v15[6] = 0;
          v15[7] = 0;
          v15[8] = a5 + 14;
          v15[9] = 0;
          uint64_t v11 = CMPhotoJFIFScannerCreate((uint64_t)_scannerCallbackMarker, (uint64_t)v15, (uint64_t)_scannerCallbackRestartMarker, (uint64_t)v15, &v16);
          if (v11 || (uint64_t v11 = CMPhotoJFIFScannerRun((uint64_t)v16, a2, a1), v11))
          {
            uint64_t v5 = v11;
          }
          else
          {
            v14[0] = 0;
            v14[1] = v14;
            _OWORD v14[2] = 0x2000000000;
            v14[3] = 0;
            v13[0] = MEMORY[0x1E4F143A8];
            v13[1] = *(void *)"";
            v13[2] = __CMPhotoUnifiedJPEGEncoderWriteAROTTableToPtr_block_invoke;
            v13[3] = &unk_1E5E2F2B0;
            v13[4] = v14;
            v13[5] = a4;
            v13[6] = a5;
            uint64_t v5 = _writeRestartMarkerSegmentWithHandler(0, 0, v7, a5 + 14, 0, 0, (uint64_t)v13);
            _Block_object_dispose(v14, 8);
          }
        }
      }
    }
  }
  CMPhotoJFIFScannerDispose(v16);
  return v5;
}

uint64_t _scannerCallbackMarker(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5)
{
  if ((a3 - 192) < 4)
  {
    uint64_t v6 = *(void *)(a5 + 16);
    if (*(_OWORD *)(a5 + 16) != 0)
    {
      if (a4 > 8)
      {
        sourceBytes[0] = bswap32(*(void *)(a5 + 24)) >> 16;
        sourceBytes[1] = bswap32(v6) >> 16;
        if (*(void *)a5) {
          return CMBlockBufferReplaceDataBytes(sourceBytes, *(CMBlockBufferRef *)a5, a2 + 5, 4uLL);
        }
        return 4294950304;
      }
      return FigSignalErrorAt();
    }
    return 0;
  }
  if (a3 == 217)
  {
    uint64_t result = 0;
    *(void *)(a5 + 56) = a2;
    return result;
  }
  if (a3 != 218) {
    return 0;
  }
  uint64_t v8 = a2 + a4 + 2;
  *(void *)(a5 + 4_Block_object_dispose(&STACK[0x280], 8) = v8;
  if (!*(unsigned char *)(a5 + 12)) {
    goto LABEL_14;
  }
  uint64_t v9 = *(void *)(a5 + 64);
  if (v9)
  {
    *(_DWORD *)(v9 + 4 * (*(void *)(a5 + 72))++) = *(void *)(a5 + 32);
    *(void *)(a5 + 32) += 2;
    uint64_t v8 = *(void *)(a5 + 48);
  }
  size_t v10 = v8 - 2;
  *(void *)(a5 + 4_Block_object_dispose(&STACK[0x280], 8) = v8 - 2;
  v13[0] = -1;
  char v11 = *(unsigned char *)(a5 + 10);
  v13[1] = v11 | 0xD0;
  *(unsigned char *)(a5 + 10) = (v11 + 1) & 7;
  if (!*(void *)a5) {
    return 4294950304;
  }
  uint64_t result = CMBlockBufferReplaceDataBytes(v13, *(CMBlockBufferRef *)a5, v10, 2uLL);
  if (!result)
  {
LABEL_14:
    if (!*(unsigned char *)(a5 + 8) && !*(unsigned char *)(a5 + 11)) {
      return 4294950191;
    }
    return 0;
  }
  return result;
}

uint64_t _scannerCallbackRestartMarker(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a5 + 64);
  if (!v5) {
    goto LABEL_4;
  }
  unint64_t v6 = *(void *)(a5 + 72);
  if (*(void *)(a5 + 40) > v6)
  {
    *(_DWORD *)(v5 + 4 * v6) = *(_DWORD *)(a5 + 32) + a3;
    ++*(void *)(a5 + 72);
LABEL_4:
    if (!*(unsigned char *)(a5 + 9)) {
      return 0;
    }
    char v7 = *(unsigned char *)(a5 + 10);
    sourceuint64_t Bytes = v7 | 0xD0;
    *(unsigned char *)(a5 + 10) = (v7 + 1) & 7;
    if (*(void *)a5) {
      return CMBlockBufferReplaceDataBytes(&sourceBytes, *(CMBlockBufferRef *)a5, a2 + 1, 1uLL);
    }
    else {
      return 4294950304;
    }
  }
  return FigSignalErrorAt();
}

uint64_t _writeRestartMarkerSegmentWithHandler(int a1, int a2, unsigned int a3, uint64_t a4, uint64_t *a5, void *a6, uint64_t a7)
{
  BOOL v12 = a2 != 0;
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  __int16 v16 = 0;
  uint64_t v13 = 4 * a3;
  int v17 = -352331521;
  char v18 = (unsigned __int16)(4 * a3 + 12) >> 8;
  char v19 = (4 * a3 + 12) & 0xFD | (2 * (a2 != 0));
  int v20 = 1414484545;
  int v21 = 0;
  char v22 = BYTE1(a3);
  char v23 = a3;
  uint64_t v14 = 16 - 2 * (a1 == 0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(a7 + 16))(a7, v14, (unint64_t)&v17 | (2 * (a1 == 0)));
  if (!result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a7 + 16))(a7, v13, a4);
    if (!result)
    {
      if (!a2
        || (uint64_t result = (*(uint64_t (**)(uint64_t, void, __int16 *))(a7 + 16))(a7, (2 * v12), &v16), !result))
      {
        if (a5) {
          *a5 = v14;
        }
        uint64_t result = 0;
        if (a6) {
          *a6 = v13 + v14 + (2 * v12);
        }
      }
    }
  }
  return result;
}

uint64_t __CMPhotoUnifiedJPEGEncoderWriteAROTTableToPtr_block_invoke(void *a1, size_t __n, void *__src)
{
  uint64_t v3 = *(void *)(a1[4] + 8);
  uint64_t v4 = *(void *)(v3 + 24);
  size_t v5 = v4 + __n;
  if (v4 + __n > a1[5]) {
    return 4294950304;
  }
  uint64_t v8 = (void *)(a1[6] + v4);
  if (v8 != __src)
  {
    memcpy(v8, __src, __n);
    uint64_t v3 = *(void *)(a1[4] + 8);
    size_t v5 = *(void *)(v3 + 24) + __n;
  }
  uint64_t result = 0;
  *(void *)(v3 + 24) = v5;
  return result;
}

uint64_t CMPhotoUnifiedJPEGEncoderEncodeStripToStream(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, _OWORD *a10, uint64_t a11, __CFData *a12)
{
  if (!a6 || *a10 == 0 && a10[1] == 0)
  {
    return FigSignalErrorAt();
  }
  else
  {
    long long v12 = a5[1];
    v16[0] = *a5;
    v16[1] = v12;
    long long v13 = a10[1];
    v15[0] = *a10;
    v15[1] = v13;
    return _encodeBuffer(a1, a2, a3, a4, (uint64_t)v16, 1, a6, a7, a9, (unint64_t *)v15, a11, 0, a12);
  }
}

uint64_t CMPhotoUnifiedJPEGEncoderDidUseHW(uint64_t result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 73);
  }
  return result;
}

uint64_t _encodeSW(uint64_t a1, __CVBuffer *a2, uint64_t a3, int a4, CFTypeRef *a5, __CFData *a6)
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  CFTypeRef v85 = 0;
  if (a6 && *(void *)(a3 + 160))
  {
    uint64_t v18 = FigSignalErrorAt();
    goto LABEL_112;
  }
  uint64_t v84 = 0;
  if (a6)
  {
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    int v17 = *(uint64_t (**)(__CFData *, void, uint64_t *))(v13 + 24);
    if (!v17)
    {
      char v19 = 0;
      uint64_t v25 = 4294954514;
      goto LABEL_20;
    }
    uint64_t v18 = v17(a6, 0, &v84);
    if (!v18)
    {
      char v19 = 0;
      uint64_t v15 = v84;
      if (v84 < 0)
      {
        uint64_t v25 = 4294950190;
        goto LABEL_20;
      }
      uint64_t v64 = 0;
      CFMutableDataRef v16 = a6;
      goto LABEL_13;
    }
LABEL_112:
    uint64_t v25 = v18;
    char v19 = 0;
    goto LABEL_20;
  }
  CFMutableDataRef Mutable = CFDataCreateMutable(*(CFAllocatorRef *)a1, 0);
  if (!Mutable)
  {
    char v19 = 0;
    uint64_t v25 = 4294950305;
    goto LABEL_20;
  }
  uint64_t v15 = 0;
  uint64_t v64 = Mutable;
  CFMutableDataRef v16 = Mutable;
LABEL_13:
  v82[0] = a6 != 0;
  v82[1] = v16;
  uint64_t v83 = v15;
  long long v80 = xmmword_1F02DE628;
  uint64_t v81 = qword_1F02DE638;
  uint64_t v73 = 0;
  int v74 = _applejpeg_write_0;
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  unint64_t v77 = v82;
  uint64_t v78 = 0;
  uint64_t v79 = 0;
  if (applejpeg_encode_create())
  {
    int pixelBuffer = a4;
    int16x8_t v61 = a5;
    uint64_t v20 = 875704422;
    int v21 = a2;
    uint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(a2);
    int v23 = PixelFormatType;
    if ((int)PixelFormatType <= 1885745711)
    {
      if ((int)PixelFormatType <= 875836533)
      {
        if (PixelFormatType != 875704438)
        {
          int v24 = 875704950;
LABEL_25:
          if (PixelFormatType == v24) {
            goto LABEL_26;
          }
LABEL_32:
          uint64_t v20 = PixelFormatType;
        }
LABEL_34:
        uint64_t v63 = a6;
        unint64_t v29 = *(void *)(a3 + 40);
        unint64_t v28 = *(void *)(a3 + 48);
        uint64_t v30 = *(void *)(a3 + 56);
        uint64_t v31 = *(void *)(a3 + 64);
        char v72 = 0;
        BOOL IsNon601YCbCr = CMPhotoPixelBufferIsNon601YCbCr(v21, &v72);
        if (v20 != v23 || IsNon601YCbCr)
        {
          CFDictionaryRef v33 = (_DWORD *)MEMORY[0x1E4F1EBA8];
          if (*MEMORY[0x1E4F1EBA8] == 1) {
            kdebug_trace();
          }
          if (!*(unsigned char *)(a3 + 9))
          {
            uint64_t v37 = FigSignalErrorAt();
LABEL_118:
            uint64_t v25 = v37;
            goto LABEL_119;
          }
          uint64_t v25 = CMPhotoScaleAndRotateSessionTransformForMaxSideLengthWithOptions(*(void *)(a1 + 16), v21, 0, pixelBuffer == 0, 1, v20, 1, 0, (double)*(unint64_t *)(a3 + 72), (double)*(unint64_t *)(a3 + 80), (double)*(unint64_t *)(a3 + 88), (double)*(unint64_t *)(a3 + 96), 0, 0, 0, 0, 1u, *(_WORD *)(a3 + 10), HIBYTE(*(_WORD *)(a3 + 10)),
                  *(unsigned char *)(a3 + 12),
                  (__CVBuffer **)&v85);
          if (*v33 == 1) {
            kdebug_trace();
          }
          if (v25) {
            goto LABEL_119;
          }
          int v21 = (__CVBuffer *)v85;
          unint64_t v29 = vcvtad_u64_f64(CMPhotoGetPixelBufferCLAPAsRect((__CVBuffer *)v85));
          unint64_t v28 = vcvtad_u64_f64(v34);
          LODWORD(v30) = vcvtad_u64_f64(v35);
          LODWORD(v31) = vcvtad_u64_f64(v36);
        }
        uint64_t v37 = CVPixelBufferLockBaseAddress(v21, 1uLL);
        if (!v37)
        {
          long long v70 = 0u;
          memset(v71, 0, sizeof(v71));
          long long v68 = 0u;
          long long v69 = 0u;
          long long v67 = 0u;
          memset(v66, 0, sizeof(v66));
          long long v91 = 0uLL;
          long long v90 = 0uLL;
          uint64_t PixelBufferDataPointers = CMPhotoGetPixelBufferDataPointers(v21, v29, v28, v66, (uint64_t)&v90, (uint64_t)&v91, 0);
          if (PixelBufferDataPointers
            || (memset(&v66[3], 0, 72),
                long long v68 = 0uLL,
                v66[1] = v30,
                v66[2] = v31,
                long long v67 = v91,
                uint64_t PixelBufferDataPointers = CMPhotoPixelFormatToAppleJPEGFormat(v20, &v66[3]),
                PixelBufferDataPointers))
          {
            uint64_t v25 = PixelBufferDataPointers;
            CFDataRef v26 = 0;
            char v19 = v64;
            goto LABEL_94;
          }
          *(_OWORD *)&v89[52] = *(_OWORD *)&v66[13];
          *(_OWORD *)&v89[68] = *(_OWORD *)&v66[17];
          *(_OWORD *)&v89[84] = v67;
          *(_OWORD *)&v89[100] = v68;
          *(_OWORD *)&v89[4] = *(_OWORD *)&v66[1];
          *(_OWORD *)&v89[20] = *(_OWORD *)&v66[5];
          *(_OWORD *)&v89[36] = *(_OWORD *)&v66[9];
          long long v69 = v90;
          *(_OWORD *)((char *)v71 + 4) = *(_OWORD *)v89;
          *(_OWORD *)((char *)&v71[2] + 4) = *(_OWORD *)&v89[16];
          *(_OWORD *)((char *)&v71[4] + 4) = *(_OWORD *)&v89[32];
          *(_OWORD *)((char *)&v71[12] + 4) = *(_OWORD *)&v89[96];
          *(_OWORD *)((char *)&v71[10] + 4) = *(_OWORD *)&v89[80];
          *(_OWORD *)((char *)&v71[8] + 4) = *(_OWORD *)&v89[64];
          long long v70 = 0uLL;
          LODWORD(v71[0]) = v66[0];
          HIDWORD(v71[14]) = HIDWORD(v68);
          *(_OWORD *)((char *)&v71[6] + 4) = *(_OWORD *)&v89[48];
          if (*(unsigned char *)(a3 + 144))
          {
            uint64_t v39 = v63;
            uint64_t v40 = (_DWORD *)MEMORY[0x1E4F1EBA8];
            char v19 = v64;
            CMPhotoGetBitDepthForPixelFormat(v20);
            reuint64_t started = applejpeg_encode_set_option_type_lossless();
            if (restarted) {
              goto LABEL_87;
            }
          }
          else
          {
            int v41 = applejpeg_encode_set_option_type_baseline();
            uint64_t v39 = v63;
            uint64_t v40 = (_DWORD *)MEMORY[0x1E4F1EBA8];
            if (v41
              || (long long bytes = *(_OWORD *)(a3 + 184),
                  uint64_t v88 = *(void *)(a3 + 200),
                  (int v41 = applejpeg_encode_set_option_q_tables()) != 0))
            {
              uint64_t v25 = CMPhotoAppleJPEGErrorToCMPhotoError(v41);
              CFDataRef v26 = 0;
              goto LABEL_109;
            }
            char v19 = v64;
          }
          reuint64_t started = applejpeg_encode_set_option_restart_markers();
          if (!restarted)
          {
            reuint64_t started = applejpeg_encode_set_option_num_threads();
            if (!restarted)
            {
              if (!*(unsigned char *)(a3 + 4))
              {
                LOBYTE(bytes) = -1;
                int v45 = *(_DWORD *)(a3 + 32);
                BOOL v43 = -v45 < 0;
                int v44 = -v45 & 7;
                LOBYTE(v45) = v45 & 7;
                if (!v43) {
                  int v45 = -v44;
                }
                BYTE1(bytes) = v45 | 0xD0;
                if (_applejpeg_write_0((UInt8 *)&bytes, 2, (uint64_t)v82))
                {
                  CFDataRef v26 = 0;
                  uint64_t v25 = 4294950304;
                  goto LABEL_94;
                }
                if (*(unsigned char *)(a1 + 32)) {
                  *(_DWORD *)(*(void *)(a1 + 64) + 4 * *(int *)(a3 + 32)) = v83 - *(_DWORD *)(a1 + 48) - 2;
                }
              }
              ++*(_DWORD *)(a3 + 32);
              if (!*(unsigned char *)(a1 + 32)) {
                goto LABEL_70;
              }
              reuint64_t started = applejpeg_encode_set_option_record_rst_offsets();
              if (!restarted
                || *(unsigned char *)(a3 + 4)
                && (*(unsigned char *)(a1 + 32) = 0, (reuint64_t started = applejpeg_encode_set_option_record_rst_offsets()) == 0))
              {
                if (*(unsigned char *)(a3 + 4) && *(unsigned char *)(a1 + 32))
                {
                  CFMutableDataRef v46 = CFDataCreateMutable(*(CFAllocatorRef *)a1, 0);
                  CFDataRef v26 = v46;
                  if (!v46)
                  {
LABEL_107:
                    uint64_t v25 = 4294950305;
                    goto LABEL_94;
                  }
                  unsigned int v47 = *(unsigned __int16 *)(a1 + 56);
                  uint64_t v48 = *(void *)(a1 + 64);
                  v65[0] = MEMORY[0x1E4F143A8];
                  v65[1] = *(void *)"";
                  v65[2] = ___encodeSW_block_invoke;
                  v65[3] = &__block_descriptor_tmp_14;
                  v65[4] = v46;
                  uint64_t v49 = _writeRestartMarkerSegmentWithHandler(0, 0, v47, v48, (uint64_t *)(a1 + 40), 0, (uint64_t)v65);
                  if (v49) {
                    goto LABEL_86;
                  }
                  *(void *)&long long bytes = 0;
                  CFDataGetLength(v26);
                  CFDataGetBytePtr(v26);
                  int inserted = applejpeg_encode_set_option_insert_segment();
                  if (inserted) {
                    goto LABEL_85;
                  }
                  *(void *)(a1 + 40) = bytes + 14;
LABEL_71:
                  int inserted = applejpeg_encode_set_option_strip_encode();
                  if (!inserted)
                  {
                    int inserted = applejpeg_encode_commit_options_for_file();
                    if (!inserted)
                    {
                      if (*(unsigned char *)(a3 + 4))
                      {
                        int inserted = applejpeg_encode_image_all_with_bitstream_offset();
                        if (!inserted)
                        {
LABEL_75:
                          if (*v40 == 1) {
                            kdebug_trace();
                          }
                          if (*(unsigned char *)(a3 + 5) && *(unsigned char *)(a1 + 32))
                          {
                            uint64_t v51 = *(void *)(a1 + 56);
                            uint64_t v52 = 4 * v51;
                            if (v39)
                            {
                              *(void *)&long long bytes = 0;
                              uint64_t v53 = *(void *)(a1 + 40);
                              uint64_t v54 = *(void *)(a1 + 64);
                              uint64_t v55 = *(void *)(CMBaseObjectGetVTable() + 16);
                              if (v55) {
                                uint64_t v56 = v55;
                              }
                              else {
                                uint64_t v56 = 0;
                              }
                              unsigned int v59 = *(uint64_t (**)(__CFData *, uint64_t, uint64_t, uint64_t, long long *))(v56 + 16);
                              if (v59)
                              {
                                uint64_t v60 = v59(v39, v52, v53, v54, &bytes);
                                if (!v60)
                                {
                                  char v19 = v64;
                                  if ((void)bytes != v52) {
                                    goto LABEL_107;
                                  }
                                  goto LABEL_91;
                                }
                                uint64_t v25 = v60;
                              }
                              else
                              {
                                uint64_t v25 = 4294954514;
                              }
LABEL_109:
                              char v19 = v64;
                              goto LABEL_94;
                            }
                            v93.locatiouint64_t n = *(void *)(a1 + 40);
                            v93.CFIndex length = 4 * v51;
                            CFDataReplaceBytes(v19, v93, *(const UInt8 **)(a1 + 64), 4 * v51);
                          }
                          else if (v39)
                          {
LABEL_91:
                            if (*v40 == 1) {
                              kdebug_trace();
                            }
                            uint64_t v25 = 0;
                            *(unsigned char *)(a1 + 73) = 0;
                            *int16x8_t v61 = cf;
                            CFTypeRef cf = 0;
LABEL_94:
                            applejpeg_encode_destroy();
                            CVPixelBufferUnlockBaseAddress(v21, 1uLL);
                            if (!v19) {
                              goto LABEL_96;
                            }
                            goto LABEL_95;
                          }
                          CFIndex Length = CFDataGetLength(v19);
                          uint64_t v49 = CMPhotoSampleBufferCreateFromSource(*(const __CFAllocator **)a1, v19, 0, Length, &cf, 0);
                          if (!v49)
                          {
                            _attachSizeHintIfNeeded(a3, Length, (void *)cf);
                            goto LABEL_91;
                          }
LABEL_86:
                          uint64_t v25 = v49;
                          goto LABEL_94;
                        }
                      }
                      else
                      {
                        int inserted = applejpeg_encode_image_all();
                        if (!inserted) {
                          goto LABEL_75;
                        }
                      }
                    }
                  }
LABEL_85:
                  uint64_t v49 = CMPhotoAppleJPEGErrorToCMPhotoError(inserted);
                  goto LABEL_86;
                }
LABEL_70:
                CFDataRef v26 = 0;
                goto LABEL_71;
              }
            }
          }
LABEL_87:
          uint64_t v25 = CMPhotoAppleJPEGErrorToCMPhotoError(restarted);
          CFDataRef v26 = 0;
          goto LABEL_94;
        }
        goto LABEL_118;
      }
      if (PixelFormatType == 875836534)
      {
        uint64_t v20 = 875836518;
        goto LABEL_34;
      }
      int v27 = 1882468912;
    }
    else
    {
      if ((int)PixelFormatType > 2016686641)
      {
        if (PixelFormatType == 2019963442)
        {
LABEL_26:
          uint64_t v20 = 875704934;
          goto LABEL_34;
        }
        if (PixelFormatType != 2019963440)
        {
          int v24 = 2016686642;
          goto LABEL_25;
        }
        goto LABEL_34;
      }
      if (PixelFormatType == 1885745712) {
        goto LABEL_34;
      }
      int v27 = 2016686640;
    }
    if (PixelFormatType == v27) {
      goto LABEL_34;
    }
    goto LABEL_32;
  }
  uint64_t v25 = 4294950305;
LABEL_119:
  char v19 = v64;
LABEL_20:
  applejpeg_encode_destroy();
  CFDataRef v26 = 0;
  if (v19) {
LABEL_95:
  }
    CFRelease(v19);
LABEL_96:
  if (cf) {
    CFRelease(cf);
  }
  if (v26) {
    CFRelease(v26);
  }
  if (v85) {
    CFRelease(v85);
  }
  return v25;
}

xpc_object_t ___encodeHW_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v2 + 140) == 4)
  {
    unsigned int valuePtr = 0;
    CFNumberRef v3 = *(const __CFNumber **)(v2 + 176);
    if (v3)
    {
      CFNumberGetValue(v3, kCFNumberSInt32Type, &valuePtr);
      if (valuePtr >= 6) {
        uint64_t v4 = 6;
      }
      else {
        uint64_t v4 = valuePtr;
      }
    }
    else
    {
      uint64_t v4 = 0;
    }
  }
  else
  {
    float v5 = *(float *)(v2 + 168);
    double v6 = v5;
    BOOL v7 = *(_DWORD *)(v2 + 136) == 1;
    uint64_t v8 = 8;
    if (v7) {
      uint64_t v8 = 12;
    }
    uint64_t v9 = v8 | (v5 >= 0.75);
    if (v6 >= 0.9944) {
      ++v9;
    }
    if (v6 < 0.9) {
      uint64_t v4 = v9;
    }
    else {
      uint64_t v4 = v9 + 1;
    }
  }
  if (*(void *)(a1 + 64) * *(void *)(a1 + 56) >= 0x2E83001uLL) {
    uint64_t v10 = 48771073;
  }
  else {
    uint64_t v10 = *(void *)(a1 + 64) * *(void *)(a1 + 56);
  }
  emptdouble y = xpc_dictionary_create_empty();
  xpc_dictionary_set_uint64(empty, "compressionIterations", *(int *)(a1 + 80));
  xpc_dictionary_set_uint64(empty, "initialQualityEnum", v4);
  xpc_dictionary_set_double(empty, "finalQuality", *(float *)(*(void *)(a1 + 32) + 168));
  xpc_dictionary_set_uint64(empty, "numPixels", v10);
  xpc_dictionary_set_uint64(empty, "surfaceSize", *(void *)(a1 + 72));
  LODWORD(v12) = *(_DWORD *)(a1 + 84);
  xpc_dictionary_set_double(empty, "fillRatio", (double)v12 / (double)*(unint64_t *)(a1 + 72));
  xpc_dictionary_set_uint64(empty, "encodedSize", *(unsigned int *)(a1 + 84));
  return empty;
}

uint64_t ___postProcessStripToStream_block_invoke(uint64_t a1, uint64_t a2)
{
  LODWORD(result) = CMByteStreamAppend();
  if (a2) {
    return 4294950304;
  }
  else {
    return result;
  }
}

void *_applejpeg_alloc_1(size_t a1)
{
  return malloc_type_malloc(a1, 0x67D60E5uLL);
}

BOOL _applejpeg_write_0(UInt8 *bytes, CFIndex length, uint64_t a3)
{
  int v4 = length;
  if ((int)length < 1) {
    goto LABEL_6;
  }
  if (*(_DWORD *)a3 != 1)
  {
    if (!*(_DWORD *)a3) {
      CFDataAppendBytes(*(CFMutableDataRef *)(a3 + 8), bytes, length);
    }
    goto LABEL_6;
  }
  int v5 = CMByteStreamAppend();
  if (!v5)
  {
LABEL_6:
    int v5 = 0;
    *(void *)(a3 + 16) += v4;
  }
  return v5 != 0;
}

uint64_t ___encodeSW_block_invoke(uint64_t a1, CFIndex length, UInt8 *bytes)
{
  return 0;
}

uint64_t CMPhotoDNGCompressLineASM(uint64_t a1, __n128 a2)
{
  a2.n128_u16[0] = *(_DWORD *)(a1 + 40);
  a2.n128_u16[1] = *(_DWORD *)(a1 + 44);
  return sub_1AB996CE8(a2);
}

uint64_t sub_1AB996CE8(uint64_t a1, int16x8_t a2)
{
  do
  {
    int16x8_t v7 = *v3++;
    v6 -= 8;
    int16x8_t v8 = (int16x8_t)vshrq_n_u16((uint16x8_t)vshlq_n_s16(v7, 2uLL), 4uLL);
    a2.i32[1] = v8.i32[0];
    a2.i64[1] = *(uint64_t *)((char *)v8.i64 + 4);
    a2 = vsubq_s16(v8, a2);
    int32x4_t v9 = vshll_n_s16(*(int16x4_t *)a2.i8, 2uLL);
    int32x4_t v10 = vshll_high_n_s16(a2, 2uLL);
    a2.i32[0] = v8.i32[3];
    int v11 = *(_DWORD *)(v2 + v9.i32[0]);
    uint64_t v12 = (*(int *)(v2 + v9.i32[0]) >> 8);
    BOOL v13 = __OFSUB__(v5, v11);
    int v14 = v5 - v11;
    if (v14 < 0 != v13) {
      a1 = write_bitbuffer();
    }
    uint64_t v15 = v4 | (v12 << v14);
    int v16 = *(_DWORD *)(v2 + v9.i32[1]);
    uint64_t v17 = (*(int *)(v2 + v9.i32[1]) >> 8);
    BOOL v13 = __OFSUB__(v14, v16);
    int v18 = v14 - v16;
    if (v18 < 0 != v13) {
      a1 = write_bitbuffer();
    }
    uint64_t v19 = v15 | (v17 << v18);
    int v20 = *(_DWORD *)(v2 + v9.i32[2]);
    uint64_t v21 = (*(int *)(v2 + v9.i32[2]) >> 8);
    BOOL v13 = __OFSUB__(v18, v20);
    int v22 = v18 - v20;
    if (v22 < 0 != v13) {
      a1 = write_bitbuffer();
    }
    uint64_t v23 = v19 | (v21 << v22);
    int v24 = *(_DWORD *)(v2 + v9.i32[3]);
    uint64_t v25 = (*(int *)(v2 + v9.i32[3]) >> 8);
    BOOL v13 = __OFSUB__(v22, v24);
    int v26 = v22 - v24;
    if (v26 < 0 != v13) {
      a1 = write_bitbuffer();
    }
    uint64_t v27 = v23 | (v25 << v26);
    int v28 = *(_DWORD *)(v2 + v10.i32[0]);
    uint64_t v29 = (*(int *)(v2 + v10.i32[0]) >> 8);
    BOOL v13 = __OFSUB__(v26, v28);
    int v30 = v26 - v28;
    if (v30 < 0 != v13) {
      a1 = write_bitbuffer();
    }
    uint64_t v31 = v27 | (v29 << v30);
    int v32 = *(_DWORD *)(v2 + v10.i32[1]);
    uint64_t v33 = (*(int *)(v2 + v10.i32[1]) >> 8);
    BOOL v13 = __OFSUB__(v30, v32);
    int v34 = v30 - v32;
    if (v34 < 0 != v13) {
      a1 = write_bitbuffer();
    }
    uint64_t v35 = v31 | (v33 << v34);
    int v36 = *(_DWORD *)(v2 + v10.i32[2]);
    uint64_t v37 = (*(int *)(v2 + v10.i32[2]) >> 8);
    BOOL v13 = __OFSUB__(v34, v36);
    int v38 = v34 - v36;
    if (v38 < 0 != v13) {
      a1 = write_bitbuffer();
    }
    uint64_t v39 = v35 | (v37 << v38);
    int v40 = *(_DWORD *)(v2 + v10.i32[3]);
    uint64_t v41 = (*(int *)(v2 + v10.i32[3]) >> 8);
    BOOL v13 = __OFSUB__(v38, v40);
    int v5 = v38 - v40;
    if (v5 < 0 != v13) {
      a1 = write_bitbuffer();
    }
    uint64_t v4 = v39 | (v41 << v5);
  }
  while (v6);
  return done(a1);
}

uint64_t done(uint64_t result)
{
  *(void *)(result + _Block_object_dispose(&STACK[0x280], 8) = v1;
  *(void *)(result + 16) = v2;
  *(void *)(result + 24) = v3;
  *(_DWORD *)(result + 32) = v4;
  return result;
}

uint64_t write_bitbuffer()
{
  return byte_0();
}

void byte_0()
{
  unsigned char *v0 = HIBYTE(v1);
  uint64_t v2 = v0 + 1;
  if (HIBYTE(v1) == 255) {
    *uint64_t v2 = 0;
  }
  byte_1();
}

void byte_1()
{
  unsigned char *v0 = HIBYTE(v1);
  uint64_t v2 = v0 + 1;
  if (HIBYTE(v1) == 255) {
    *uint64_t v2 = 0;
  }
  byte_2();
}

void byte_2()
{
  unsigned char *v0 = HIBYTE(v1);
  uint64_t v2 = v0 + 1;
  if (HIBYTE(v1) == 255) {
    *uint64_t v2 = 0;
  }
  byte_3();
}

void byte_3()
{
  unsigned char *v0 = HIBYTE(v1);
  uint64_t v2 = v0 + 1;
  if (HIBYTE(v1) == 255) {
    *uint64_t v2 = 0;
  }
  byte_4();
}

void byte_4()
{
  unsigned char *v0 = HIBYTE(v1);
  uint64_t v2 = v0 + 1;
  if (HIBYTE(v1) == 255) {
    *uint64_t v2 = 0;
  }
  byte_5();
}

void byte_5()
{
  unsigned char *v0 = HIBYTE(v1);
  uint64_t v2 = v0 + 1;
  if (HIBYTE(v1) == 255) {
    *uint64_t v2 = 0;
  }
  byte_6();
}

void byte_6()
{
  unsigned char *v0 = HIBYTE(v1);
  uint64_t v2 = v0 + 1;
  if (HIBYTE(v1) == 255) {
    *uint64_t v2 = 0;
  }
  byte_7();
}

void byte_7()
{
  unsigned char *v0 = HIBYTE(v1);
  uint64_t v2 = v0 + 1;
  if (HIBYTE(v1) == 255) {
    *uint64_t v2 = 0;
  }
  write_bitbuffer_done();
}

uint64_t SlimXEncodeF32Row(unsigned int **a1, int a2)
{
  unsigned int v2 = a1[10][8];
  if (v2 != 1278226534 && v2 != 1717856627 && v2 != 1717855600) {
    return 4294951896;
  }
  uint64_t v5 = (uint64_t)*a1;
  unint64_t v6 = **a1;
  int v7 = *((_DWORD *)a1 + 24);
  int v8 = v7 - 32;
  *((_DWORD *)a1 + 24) = v7 - 32;
  if (v7 <= 31)
  {
    unint64_t v10 = (unint64_t)a1[11] + (v6 >> (32 - v7));
    a1[11] = (unsigned int *)v10;
    int v11 = (char *)a1[2];
    if ((char *)a1[3] - v11 <= 7) {
LABEL_64:
    }
      longjmp((int *)a1 + 29, -15400);
    *(void *)int v11 = bswap64(v10);
    a1[2] += 2;
    int v12 = *((_DWORD *)a1 + 24);
    int v8 = v12 + 64;
    *((_DWORD *)a1 + 24) = v12 + 64;
    unint64_t v9 = v6 << v12;
  }
  else
  {
    unint64_t v9 = (unint64_t)a1[11] + (v6 << v8);
  }
  a1[11] = (unsigned int *)v9;
  if (*((_DWORD *)a1 + 25) > 1u)
  {
    uint64_t v13 = 0;
    int v14 = 16;
    do
    {
      uint64_t v15 = (_DWORD *)(v5 + 4 * v13);
      unint64_t v16 = (*v15 ^ v15[1]);
      unsigned int v17 = 32 - __clz(v16);
      if (v16) {
        signed int v18 = v17;
      }
      else {
        signed int v18 = 0;
      }
      unint64_t v19 = (v18 - v14);
      if (v18 <= v14)
      {
        int v23 = v8 - 3;
        *((_DWORD *)a1 + 24) = v8 - 3;
        if (v8 <= 2)
        {
          int v24 = (unint64_t *)a1[2];
          if ((char *)a1[3] - (char *)v24 <= 7) {
            goto LABEL_64;
          }
          unint64_t v25 = bswap64(v9);
          unint64_t v9 = 0;
          *int v24 = v25;
          a1[2] += 2;
          int v23 = *((_DWORD *)a1 + 24) + 64;
        }
        int v8 = v23 - v14;
        *((_DWORD *)a1 + 24) = v23 - v14;
        if (v23 - v14 < 0)
        {
          unint64_t v28 = v9 + (v16 >> (v14 - v23));
          a1[11] = (unsigned int *)v28;
          uint64_t v29 = (char *)a1[2];
          if ((char *)a1[3] - v29 <= 7) {
            goto LABEL_64;
          }
          *(void *)uint64_t v29 = bswap64(v28);
          a1[2] += 2;
          int v30 = *((_DWORD *)a1 + 24);
          int v8 = v30 + 64;
          *((_DWORD *)a1 + 24) = v30 + 64;
          unint64_t v9 = v16 << v30;
        }
        else
        {
          v9 += v16 << v8;
        }
        a1[11] = (unsigned int *)v9;
        if (v14 <= 0) {
          int v14 = 0;
        }
        else {
          --v14;
        }
      }
      else if (v18 <= v14 + 6)
      {
        int v26 = v8 - 3;
        *((_DWORD *)a1 + 24) = v8 - 3;
        if (v8 < 3)
        {
          unint64_t v32 = v9 + (v19 >> (3 - v8));
          a1[11] = (unsigned int *)v32;
          uint64_t v33 = (char *)a1[2];
          if ((char *)a1[3] - v33 <= 7) {
            goto LABEL_64;
          }
          *(void *)uint64_t v33 = bswap64(v32);
          a1[2] += 2;
          int v34 = *((_DWORD *)a1 + 24);
          int v26 = v34 + 64;
          unint64_t v27 = v19 << v34;
        }
        else
        {
          unint64_t v27 = v9 + (v19 << v26);
        }
        int v35 = v18 - 1;
        unint64_t v36 = (1 << (v18 - 1)) ^ v16;
        *((_DWORD *)a1 + 24) = v26 - (v18 - 1);
        if (v26 - (v18 - 1) < 0)
        {
          unint64_t v37 = v27 + (v36 >> (v18 - 1 - v26));
          a1[11] = (unsigned int *)v37;
          int v38 = (char *)a1[2];
          if ((char *)a1[3] - v38 <= 7) {
            goto LABEL_64;
          }
          *(void *)int v38 = bswap64(v37);
          a1[2] += 2;
          int v39 = *((_DWORD *)a1 + 24);
          int v8 = v39 + 64;
          *((_DWORD *)a1 + 24) = v39 + 64;
          unint64_t v9 = v36 << v39;
          a1[11] = (unsigned int *)v9;
        }
        else
        {
          unint64_t v9 = v27 + (v36 << (v26 - v35));
          a1[11] = (unsigned int *)v9;
          int v8 = v26 - v35;
        }
      }
      else
      {
        int v20 = v14 + 10;
        int v21 = v8 - 4;
        *((_DWORD *)a1 + 24) = v8 - 4;
        if (v18 <= v14 + 10)
        {
          if (v8 < 4)
          {
            unint64_t v44 = v9 + (0xEuLL >> (4 - v8));
            a1[11] = (unsigned int *)v44;
            int v45 = (char *)a1[2];
            if ((char *)a1[3] - v45 <= 7) {
              goto LABEL_64;
            }
            *(void *)int v45 = bswap64(v44);
            a1[2] += 2;
            int v46 = *((_DWORD *)a1 + 24);
            int v21 = v46 + 64;
            uint64_t v31 = 14 << v46;
          }
          else
          {
            uint64_t v31 = v9 + (14 << v21);
          }
          int v8 = v21 - v20;
          *((_DWORD *)a1 + 24) = v21 - v20;
          if (v21 - v20 < 0)
          {
            unint64_t v50 = v31 + (v16 >> (v20 - v21));
            a1[11] = (unsigned int *)v50;
            uint64_t v51 = (char *)a1[2];
            if ((char *)a1[3] - v51 <= 7) {
              goto LABEL_64;
            }
            *(void *)uint64_t v51 = bswap64(v50);
            a1[2] += 2;
            int v52 = *((_DWORD *)a1 + 24);
            int v8 = v52 + 64;
            *((_DWORD *)a1 + 24) = v52 + 64;
            unint64_t v9 = v16 << v52;
          }
          else
          {
            unint64_t v9 = v31 + (v16 << v8);
          }
        }
        else
        {
          if (v8 < 4)
          {
            unint64_t v40 = v9 + (0xFuLL >> (4 - v8));
            a1[11] = (unsigned int *)v40;
            uint64_t v41 = (char *)a1[2];
            if ((char *)a1[3] - v41 <= 7) {
              goto LABEL_64;
            }
            *(void *)uint64_t v41 = bswap64(v40);
            a1[2] += 2;
            int v42 = *((_DWORD *)a1 + 24);
            int v21 = v42 + 64;
            *((_DWORD *)a1 + 24) = v42 + 64;
            uint64_t v22 = 15 << v42;
          }
          else
          {
            uint64_t v22 = v9 + (15 << v21);
          }
          unint64_t v43 = v15[1];
          int v8 = v21 - 32;
          *((_DWORD *)a1 + 24) = v21 - 32;
          if (v21 < 32)
          {
            unint64_t v47 = v22 + (v43 >> (32 - v21));
            a1[11] = (unsigned int *)v47;
            uint64_t v48 = (char *)a1[2];
            if ((char *)a1[3] - v48 <= 7) {
              goto LABEL_64;
            }
            *(void *)uint64_t v48 = bswap64(v47);
            a1[2] += 2;
            int v49 = *((_DWORD *)a1 + 24);
            int v8 = v49 + 64;
            *((_DWORD *)a1 + 24) = v49 + 64;
            unint64_t v9 = v43 << v49;
          }
          else
          {
            unint64_t v9 = v22 + (v43 << v8);
          }
        }
        a1[11] = (unsigned int *)v9;
        if (v14 < 24) {
          ++v14;
        }
      }
      ++v13;
    }
    while ((v13 + 1) < *((_DWORD *)a1 + 25));
  }
  uint64_t v55 = 0;
  if (a2 && v8 <= 63)
  {
    do
    {
      uint64_t v53 = a1[2];
      if (a1[3] == v53) {
        goto LABEL_64;
      }
      a1[2] = (unsigned int *)((char *)v53 + 1);
      *(unsigned char *)uint64_t v53 = HIBYTE(v9);
      unint64_t v9 = (void)a1[11] << 8;
      a1[11] = (unsigned int *)v9;
      int v54 = *((_DWORD *)a1 + 24);
      *((_DWORD *)a1 + 24) = v54 + 8;
    }
    while (v54 < 56);
    return 0;
  }
  return v55;
}

uint64_t SlimXDecodeF32Row(uint64_t a1)
{
  int v1 = *(_DWORD *)(*(void *)(a1 + 80) + 32);
  if (v1 != 1278226534 && v1 != 1717856627 && v1 != 1717855600) {
    return 4294951896;
  }
  int v4 = *(int **)a1;
  int v5 = *(_DWORD *)(a1 + 96);
  int v6 = v5 - 32;
  if (v5 <= 32)
  {
    unint64_t v11 = *(void *)(a1 + 88);
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 16);
    uint64_t v8 = *(void *)(a1 + 24);
    uint64_t v9 = v7 + 4;
    uint64_t v10 = v8 - v7;
    int v5 = v6;
    while (v10 < 5)
    {
      if (v9 - 4 == v8) {
LABEL_84:
      }
        longjmp((int *)(a1 + 116), -15400);
      *(_DWORD *)(a1 + 96) = v5 + 24;
      *(void *)(a1 + 16) = v9 - 3;
      unint64_t v11 = ((unint64_t)*(unsigned __int8 *)(v9 - 4) << (v5 + 24)) + *(void *)(a1 + 88);
      *(void *)(a1 + 8_Block_object_dispose(&STACK[0x280], 8) = v11;
      ++v9;
      --v10;
      int v12 = v5 - 8;
      int v13 = v5 + 32;
      v5 -= 8;
      if (v13 <= 40)
      {
        int v5 = v12 + 32;
        goto LABEL_17;
      }
    }
    *(_DWORD *)(a1 + 96) = v5;
    uint64_t v15 = bswap32(*(_DWORD *)(v9 - 4));
    *(void *)(a1 + 16) = v9;
    unint64_t v11 = (v15 << v5) + *(void *)(a1 + 88);
  }
LABEL_17:
  unint64_t v16 = v11 << 32;
  *(void *)(a1 + 8_Block_object_dispose(&STACK[0x280], 8) = v11 << 32;
  *(_DWORD *)(a1 + 96) = v5 + 32;
  int *v4 = HIDWORD(v11);
  if (*(_DWORD *)(a1 + 100) > 1u)
  {
    int v17 = 16;
    unsigned int v18 = 1;
    do
    {
      unint64_t v19 = v4;
      int v20 = *(_DWORD *)(a1 + 96);
      if (v20 >= 62)
      {
        uint64_t v22 = *(void *)(a1 + 16);
        uint64_t v21 = *(void *)(a1 + 24);
        uint64_t v23 = v22 + 4;
        uint64_t v24 = v21 - v22;
        v20 -= 32;
        while (v24 < 5)
        {
          if (v23 - 4 == v21) {
            goto LABEL_84;
          }
          *(_DWORD *)(a1 + 96) = v20 + 24;
          *(void *)(a1 + 16) = v23 - 3;
          v16 += (unint64_t)*(unsigned __int8 *)(v23 - 4) << (v20 + 24);
          *(void *)(a1 + 8_Block_object_dispose(&STACK[0x280], 8) = v16;
          ++v23;
          --v24;
          int v25 = v20 - 8;
          int v26 = v20 + 32;
          v20 -= 8;
          if (v26 <= 69)
          {
            int v20 = v25 + 32;
            goto LABEL_26;
          }
        }
        *(_DWORD *)(a1 + 96) = v20;
        uint64_t v27 = bswap32(*(_DWORD *)(v23 - 4));
        *(void *)(a1 + 16) = v23;
        v16 += v27 << v20;
      }
LABEL_26:
      int v4 = v19 + 1;
      unint64_t v28 = v16 >> 61;
      unint64_t v29 = 8 * v16;
      *(void *)(a1 + 8_Block_object_dispose(&STACK[0x280], 8) = v29;
      int v30 = v20 + 3;
      *(_DWORD *)(a1 + 96) = v20 + 3;
      if (v28 == 7)
      {
        if (v20 < 61)
        {
          int v42 = v20 + 3;
        }
        else
        {
          uint64_t v38 = *(void *)(a1 + 16);
          uint64_t v39 = *(void *)(a1 + 24);
          uint64_t v40 = v38 + 4;
          uint64_t v41 = v39 - v38;
          int v42 = v20 - 29;
          while (v41 < 5)
          {
            if (v40 - 4 == v39) {
              goto LABEL_84;
            }
            *(_DWORD *)(a1 + 96) = v42 + 24;
            *(void *)(a1 + 16) = v40 - 3;
            v29 += (unint64_t)*(unsigned __int8 *)(v40 - 4) << (v42 + 24);
            *(void *)(a1 + 8_Block_object_dispose(&STACK[0x280], 8) = v29;
            ++v40;
            --v41;
            int v43 = v42 - 8;
            int v44 = v42 + 32;
            v42 -= 8;
            if (v44 <= 71)
            {
              int v42 = v43 + 32;
              goto LABEL_58;
            }
          }
          *(_DWORD *)(a1 + 96) = v42;
          uint64_t v56 = bswap32(*(_DWORD *)(v40 - 4));
          *(void *)(a1 + 16) = v40;
          v29 += v56 << v42;
        }
LABEL_58:
        unint64_t v57 = 2 * v29;
        *(void *)(a1 + 8_Block_object_dispose(&STACK[0x280], 8) = 2 * v29;
        int v58 = v42 + 1;
        *(_DWORD *)(a1 + 96) = v42 + 1;
        if ((v29 & 0x8000000000000000) != 0)
        {
          if (v42 >= 32)
          {
            uint64_t v67 = *(void *)(a1 + 16);
            uint64_t v68 = *(void *)(a1 + 24);
            uint64_t v69 = v67 + 4;
            uint64_t v70 = v68 - v67;
            int v58 = v42 - 31;
            while (v70 < 5)
            {
              if (v69 - 4 == v68) {
                goto LABEL_84;
              }
              *(_DWORD *)(a1 + 96) = v58 + 24;
              *(void *)(a1 + 16) = v69 - 3;
              v57 += (unint64_t)*(unsigned __int8 *)(v69 - 4) << (v58 + 24);
              *(void *)(a1 + 8_Block_object_dispose(&STACK[0x280], 8) = v57;
              ++v69;
              --v70;
              int v71 = v58 - 8;
              int v72 = v58 + 32;
              v58 -= 8;
              if (v72 <= 40)
              {
                int v58 = v71 + 32;
                goto LABEL_79;
              }
            }
            *(_DWORD *)(a1 + 96) = v58;
            uint64_t v77 = bswap32(*(_DWORD *)(v69 - 4));
            *(void *)(a1 + 16) = v69;
            v57 += v77 << v58;
          }
LABEL_79:
          unint64_t v76 = HIDWORD(v57);
          unint64_t v16 = v57 << 32;
          *(void *)(a1 + 8_Block_object_dispose(&STACK[0x280], 8) = v57 << 32;
          *(_DWORD *)(a1 + 96) = v58 + 32;
        }
        else
        {
          int v59 = *v19;
          int v60 = v17 + 10;
          int v61 = 63 - v42;
          if (63 - v42 < v17 + 10)
          {
            uint64_t v62 = *(void *)(a1 + 16);
            uint64_t v63 = *(void *)(a1 + 24);
            uint64_t v64 = v62 + 4;
            uint64_t v65 = v63 - v62;
            int v58 = v42 - 31;
            do
            {
              if (v58 + 32 >= 33 && v65 >= 5)
              {
                *(_DWORD *)(a1 + 96) = v58;
                uint64_t v75 = bswap32(*(_DWORD *)(v64 - 4));
                *(void *)(a1 + 16) = v64;
                v57 += v75 << v58;
                goto LABEL_77;
              }
              if (v64 - 4 == v63) {
                goto LABEL_84;
              }
              *(_DWORD *)(a1 + 96) = v58 + 24;
              *(void *)(a1 + 16) = v64 - 3;
              v57 += (unint64_t)*(unsigned __int8 *)(v64 - 4) << (v58 + 24);
              *(void *)(a1 + 8_Block_object_dispose(&STACK[0x280], 8) = v57;
              ++v64;
              --v65;
              v58 -= 8;
              v61 += 8;
            }
            while (v61 < v60);
            v58 += 32;
          }
LABEL_77:
          unint64_t v16 = v57 << v60;
          *(void *)(a1 + 8_Block_object_dispose(&STACK[0x280], 8) = v57 << v60;
          *(_DWORD *)(a1 + 96) = v58 + v60;
          LODWORD(v76) = v59 ^ (v57 >> (54 - v17));
        }
        int *v4 = v76;
        if (v17 < 24) {
          ++v17;
        }
      }
      else if (v28)
      {
        char v45 = v17 + v28;
        int v46 = v17 + v28 - 1;
        int v47 = *v19;
        int v48 = 61 - v20;
        if (61 - v20 < v46)
        {
          uint64_t v49 = *(void *)(a1 + 16);
          uint64_t v50 = *(void *)(a1 + 24);
          uint64_t v51 = v49 + 4;
          uint64_t v52 = v50 - v49;
          int v30 = v20 - 29;
          do
          {
            if (v30 + 32 >= 33 && v52 >= 5)
            {
              *(_DWORD *)(a1 + 96) = v30;
              uint64_t v73 = bswap32(*(_DWORD *)(v51 - 4));
              *(void *)(a1 + 16) = v51;
              v29 += v73 << v30;
              goto LABEL_75;
            }
            if (v51 - 4 == v50) {
              goto LABEL_84;
            }
            *(_DWORD *)(a1 + 96) = v30 + 24;
            *(void *)(a1 + 16) = v51 - 3;
            v29 += (unint64_t)*(unsigned __int8 *)(v51 - 4) << (v30 + 24);
            *(void *)(a1 + 8_Block_object_dispose(&STACK[0x280], 8) = v29;
            ++v51;
            --v52;
            v30 -= 8;
            v48 += 8;
          }
          while (v48 < v46);
          v30 += 32;
        }
LABEL_75:
        unint64_t v74 = v29 >> (65 - v45);
        unint64_t v16 = v29 << v46;
        *(void *)(a1 + 8_Block_object_dispose(&STACK[0x280], 8) = v16;
        *(_DWORD *)(a1 + 96) = v30 + v46;
        int *v4 = ((1 << v46) + v74) ^ v47;
      }
      else
      {
        int v31 = *v19;
        int v32 = 61 - v20;
        if (61 - v20 < v17)
        {
          uint64_t v33 = *(void *)(a1 + 16);
          uint64_t v34 = *(void *)(a1 + 24);
          uint64_t v35 = v33 + 4;
          uint64_t v36 = v34 - v33;
          int v30 = v20 - 29;
          do
          {
            if (v30 + 32 >= 33 && v36 >= 5)
            {
              *(_DWORD *)(a1 + 96) = v30;
              uint64_t v54 = bswap32(*(_DWORD *)(v35 - 4));
              *(void *)(a1 + 16) = v35;
              v29 += v54 << v30;
              goto LABEL_56;
            }
            if (v35 - 4 == v34) {
              goto LABEL_84;
            }
            *(_DWORD *)(a1 + 96) = v30 + 24;
            *(void *)(a1 + 16) = v35 - 3;
            v29 += (unint64_t)*(unsigned __int8 *)(v35 - 4) << (v30 + 24);
            *(void *)(a1 + 8_Block_object_dispose(&STACK[0x280], 8) = v29;
            ++v35;
            --v36;
            v30 -= 8;
            v32 += 8;
          }
          while (v32 < v17);
          v30 += 32;
        }
LABEL_56:
        unint64_t v55 = v29 >> -(char)v17;
        unint64_t v16 = v29 << v17;
        *(void *)(a1 + 8_Block_object_dispose(&STACK[0x280], 8) = v16;
        *(_DWORD *)(a1 + 96) = v30 + v17;
        int *v4 = v31 ^ v55;
        v17 -= v17 > 0;
      }
      ++v18;
    }
    while (v18 < *(_DWORD *)(a1 + 100));
  }
  return 0;
}

uint64_t VideoQualityControllerClass_create_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = malloc_type_calloc(1uLL, 0x10uLL, 0x1000040451B5BE8uLL);
  if (!v7) {
    return 4294950305;
  }
  uint64_t v8 = v7;
  uint64_t result = 0;
  *uint64_t v8 = a3;
  v8[1] = a4;
  *(void *)(a1 + 56) = v8;
  return result;
}

void VideoQualityControllerClass_dispose_0(uint64_t a1)
{
  int v1 = *(void **)(a1 + 56);
  if (v1) {
    free(v1);
  }
}

uint64_t VideoQualityControllerClass_setSessionProperties_0()
{
  return 0;
}

uint64_t CMPhotoVideoQualityControllerCreate(const void *a1, int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, char a10, void *a11)
{
  unint64_t v19 = malloc_type_calloc(1uLL, 0x40uLL, 0x10E0040DF40DE8BuLL);
  int v20 = v19;
  if (!v19)
  {
    uint64_t v22 = 4294950305;
    goto LABEL_22;
  }
  if (a9 != 1936484717)
  {
    if (a9 != 1752589105) {
      goto LABEL_14;
    }
    if (a3 >= 2)
    {
      if (a3 == 6)
      {
        uint64_t v25 = a7;
        uint64_t v21 = CMPhotoVideoQualityController_Lossless;
        goto LABEL_17;
      }
      if (a3 != 3) {
        goto LABEL_14;
      }
    }
    goto LABEL_13;
  }
  switch(a3)
  {
    case 3u:
LABEL_13:
      uint64_t v25 = a7;
      uint64_t v21 = (uint64_t (**)())&CMPhotoVideoQualityController_StillImageAdaptiveFirmware;
      break;
    case 0xAu:
      uint64_t v25 = a7;
      uint64_t v21 = (uint64_t (**)())&CMPhotoVideoQualityController_ByteBudget;
      break;
    case 9u:
      uint64_t v25 = a7;
      uint64_t v21 = &CMPhotoVideoQualityController_Dummy;
      break;
    default:
LABEL_14:
      uint64_t v22 = FigSignalErrorAt();
      goto LABEL_22;
  }
LABEL_17:
  v19[1] = v21;
  if (a1)
  {
    CFTypeRef v23 = CFRetain(a1);
    uint64_t v21 = (uint64_t (**)())v20[1];
  }
  else
  {
    CFTypeRef v23 = 0;
  }
  *int v20 = v23;
  *((_DWORD *)v20 + 4) = a9;
  *((_DWORD *)v20 + 5) = a3;
  *((_DWORD *)v20 + 6) = a2;
  *((unsigned char *)v20 + 37) = a10;
  v20[5] = a6;
  _OWORD v20[6] = v25;
  uint64_t v22 = ((uint64_t (*)(void *, void, uint64_t, uint64_t, uint64_t))*v21)(v20, a9, a4, a5, a8);
  if (!v22)
  {
    *a11 = v20;
    int v20 = 0;
  }
LABEL_22:
  CMPhotoVideoQualityControllerDispose((CFTypeRef *)v20);
  return v22;
}

void CMPhotoVideoQualityControllerDispose(CFTypeRef *a1)
{
  if (a1)
  {
    unsigned int v2 = a1[1];
    if (v2)
    {
      uint64_t v3 = (void (*)(CFTypeRef *))v2[1];
      if (v3) {
        v3(a1);
      }
    }
    if (*a1) {
      CFRelease(*a1);
    }
    free(a1);
  }
}

uint64_t CMPhotoVideoQualityControllerSetSessionProperties(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1) {
    uint64_t v2 = *(void *)(a1 + 8);
  }
  else {
    uint64_t v2 = 0;
  }
  if (!*(void *)(v2 + 16)) {
    return 0;
  }
  if (v1) {
    uint64_t v3 = *(void *)(a1 + 8);
  }
  else {
    uint64_t v3 = 0;
  }
  return (*(uint64_t (**)(void))(v3 + 16))();
}

uint64_t CMPhotoVideoQualityControllerSetTileProperties(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1) {
    uint64_t v2 = *(void *)(a1 + 8);
  }
  else {
    uint64_t v2 = 0;
  }
  if (!*(void *)(v2 + 24)) {
    return 0;
  }
  if (v1) {
    uint64_t v3 = *(void *)(a1 + 8);
  }
  else {
    uint64_t v3 = 0;
  }
  return (*(uint64_t (**)(void))(v3 + 24))();
}

uint64_t CMPhotoVideoQualityControllerAnalyzeTile(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1) {
    uint64_t v2 = *(void *)(a1 + 8);
  }
  else {
    uint64_t v2 = 0;
  }
  if (!*(void *)(v2 + 32)) {
    return 0;
  }
  if (v1) {
    uint64_t v3 = *(void *)(a1 + 8);
  }
  else {
    uint64_t v3 = 0;
  }
  return (*(uint64_t (**)(void))(v3 + 32))();
}

__n128 CMPhotoVideoQualityControllerGetPoolingKey@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 16);
  *(__n128 *)a2 = result;
  *(void *)(a2 + 13) = *(void *)(a1 + 29);
  return result;
}

uint64_t CMPhotoGetHEVCNALULocationAndSizeFromType(uint64_t a1, unint64_t a2, int a3, void *a4, unint64_t *a5)
{
  BOOL v5 = a3 != 80;
  if (a3 == 78) {
    BOOL v5 = 0;
  }
  if (a3 == 2) {
    BOOL v5 = 0;
  }
  unint64_t v6 = 0;
  if (a2)
  {
    char v7 = 0;
    unint64_t v8 = 0;
    int v9 = -1;
    do
    {
      unint64_t v10 = v8 + 1;
      int v11 = *(unsigned __int8 *)(a1 + v8) | (v9 << 8);
      v6 += v7 & 1;
      if ((v11 & 0xFFFFFF) == 1)
      {
        if (v10 >= a2) {
          return FigSignalErrorAt();
        }
        unsigned int v12 = v9 << 8;
        uint64_t v13 = a1 + v8;
        char v15 = *(unsigned char *)(v13 + 1);
        uint64_t v14 = v13 + 1;
        int v16 = v15 & 0x7E;
        int v18 = v16 == 38 || v16 == 40;
        BOOL v20 = v16 == 78 || v16 == 80;
        BOOL v21 = a3 == 2 && v20;
        BOOL v22 = a3 != 1 && v21;
        if (a3 != 1) {
          int v18 = v21;
        }
        if ((v7 & 1) != 0 && !v22)
        {
          if (v6 > 3)
          {
            uint64_t v23 = -4;
            if (HIBYTE(v12)) {
              uint64_t v23 = -3;
            }
            v6 += v23;
            break;
          }
          return FigSignalErrorAt();
        }
        if (!((v16 != a3) & ~v18 | v7 & 1))
        {
          unint64_t v6 = 0;
          *a4 = v14;
          char v7 = 1;
        }
      }
      int v9 = v11;
      unint64_t v8 = v10;
    }
    while (a2 != v10);
  }
  if (v6) {
    BOOL v5 = 0;
  }
  if (v5) {
    return FigSignalErrorAt();
  }
  *a5 = v6;
  return 0;
}

uint64_t CMPhotoAsyncDispatcherGetTypeID()
{
  if (CMPhotoAsyncDispatcherGetTypeID_onceToken != -1) {
    dispatch_once(&CMPhotoAsyncDispatcherGetTypeID_onceToken, &__block_literal_global_16);
  }
  return sCMPhotoAsyncDispatcherTypeID;
}

uint64_t __CMPhotoAsyncDispatcherGetTypeID_block_invoke()
{
  FigKTraceInit();
  sCMPhotoAsyncDispatcherClass = 0;
  unk_1E98CFC90 = "CMPhotoDNGCompressor";
  qword_1E98CFC98 = (uint64_t)_dispatcherClass_Init;
  unk_1E98CFCA0 = 0;
  qword_1E98CFCB0 = 0;
  unk_1E98CFCB8 = 0;
  qword_1E98CFCA8 = (uint64_t)_dispatcherClass_Finalize;
  qword_1E98CFCC0 = (uint64_t)_dispatcherClass_CopyFormattingDesc;
  qword_1E98CFCC8 = (uint64_t)_dispatcherClass_CopyDebugDesc;
  uint64_t result = _CFRuntimeRegisterClass();
  sCMPhotoAsyncDispatcherCFTypeID TypeID = result;
  return result;
}

double _dispatcherClass_Init(uint64_t a1)
{
  *(void *)(a1 + 80) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x280], 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void _dispatcherClass_Finalize(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v3 = *(const void **)(a1 + 56);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 56) = 0;
  }

  int v4 = *(void **)(a1 + 72);
}

CFTypeRef _dispatcherClass_CopyFormattingDesc()
{
  return CFRetain(@"[CMPhotoAsyncDispatcher]");
}

CFTypeRef _dispatcherClass_CopyDebugDesc()
{
  return CFRetain(@"<CMPhotoAsyncDispatcher %p>");
}

uint64_t CMPhotoAsyncDispatcherCreate(const __CFAllocator *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  if (CMPhotoAsyncDispatcherGetTypeID_onceToken == -1)
  {
    if (!a5) {
      return 4294950306;
    }
  }
  else
  {
    dispatch_once(&CMPhotoAsyncDispatcherGetTypeID_onceToken, &__block_literal_global_16);
    if (!a5) {
      return 4294950306;
    }
  }
  if (a2 - 17 <= 0xFFFFFFFFFFFFFFEFLL || a3 - 1 < a2)
  {
    return FigSignalErrorAt();
  }
  if (a4) {
    return 4294950306;
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v11 = Instance;
    *(void *)(Instance + 24) = a2;
    CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, a2, MEMORY[0x1E4F1D510]);
    *(void *)(v11 + 16) = Mutable;
    if (Mutable)
    {
      while (1)
      {
        dispatch_queue_t v13 = dispatch_queue_create("CMPhotoAsyncDispatcherQueue", 0);
        if (!v13) {
          break;
        }
        dispatch_queue_t v14 = v13;
        CFArrayAppendValue(*(CFMutableArrayRef *)(v11 + 16), v13);
        CFRelease(v14);
        if (!--a2)
        {
          if (!a3) {
            goto LABEL_14;
          }
          *(unsigned char *)(v11 + 40) = 1;
          *(void *)(v11 + 4_Block_object_dispose(&STACK[0x280], 8) = a3;
          dispatch_queue_t v15 = dispatch_queue_create("CMPhotoAsyncDispatcherFunnelQueue", 0);
          *(void *)(v11 + 56) = v15;
          if (v15)
          {
            id v16 = (id)[MEMORY[0x1E4F1CA60] dictionary];
            *(void *)(v11 + 64) = v16;
            if (v16)
            {
              id v17 = (id)[MEMORY[0x1E4F1CA60] dictionary];
              *(void *)(v11 + 72) = v17;
              if (v17)
              {
LABEL_14:
                uint64_t result = 0;
                *a5 = v11;
                return result;
              }
            }
          }
          break;
        }
      }
    }
    CFRelease((CFTypeRef)v11);
  }
  return 4294950305;
}

uint64_t CMPhotoAsyncDispatcherDispatchBlock(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 4294950306;
  if (!a1 || !a2) {
    return v2;
  }
  if (!*(unsigned char *)(a1 + 40))
  {
    unint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v4 + 1;
    CFIndex v5 = v4 % *(void *)(a1 + 24);
    CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), v5);
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    v8[2] = __CMPhotoAsyncDispatcherDispatchBlock_block_invoke;
    v8[3] = &unk_1E5E2F358;
    v8[4] = a2;
    v8[5] = v5;
    dispatch_async(ValueAtIndex, v8);
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t __CMPhotoAsyncDispatcherDispatchBlock_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(a1 + 40));
}

uint64_t CMPhotoAsyncDispatcherDispatchBlockWithOrderedCompletionAndTimeout(uint64_t a1, uint64_t a2, uint64_t a3, dispatch_time_t a4)
{
  unint64_t v4 = 0;
  uint64_t v5 = 4294950306;
  if (a1 && a2 && a3)
  {
    if (!*(unsigned char *)(a1 + 40))
    {
      uint64_t v5 = FigSignalErrorAt();
      unint64_t v4 = 0;
      goto LABEL_13;
    }
    unint64_t v10 = *(void *)(a1 + 24);
    unint64_t v9 = *(void *)(a1 + 32);
    unint64_t v11 = *(void *)(a1 + 48);
    BOOL v12 = v9 >= v11;
    unint64_t v13 = v9 - v11;
    if (v12)
    {
      uint64_t v22 = 0;
      uint64_t v23 = &v22;
      uint64_t v24 = 0x3052000000;
      uint64_t v25 = __Block_byref_object_copy__0;
      int v26 = __Block_byref_object_dispose__0;
      uint64_t v27 = 0;
      dispatch_queue_t v15 = *(NSObject **)(a1 + 56);
      blocuint64_t k = MEMORY[0x1E4F143A8];
      uint64_t v29 = 3221225472;
      int v30 = ___waitForIndexToComplete_block_invoke;
      int v31 = &unk_1E5E2F3A8;
      int v32 = &v22;
      uint64_t v33 = a1;
      unint64_t v34 = v13;
      dispatch_sync(v15, &block);
      id v16 = (void *)v23[5];
      if (v16)
      {
        intptr_t v17 = dispatch_block_wait(v16, a4);

        _Block_object_dispose(&v22, 8);
        if (v17)
        {
          unint64_t v4 = 0;
          uint64_t v5 = 4294950189;
          goto LABEL_13;
        }
      }
      else
      {
        _Block_object_dispose(&v22, 8);
      }
    }
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = __CMPhotoAsyncDispatcherDispatchBlockWithOrderedCompletionAndTimeout_block_invoke;
    v21[3] = &unk_1E5E2F380;
    v21[6] = v9 % v10;
    v21[7] = a1;
    _OWORD v21[8] = v9;
    v21[4] = a2;
    v21[5] = a3;
    unint64_t v4 = (uint64_t *)dispatch_block_create(DISPATCH_BLOCK_ASSIGN_CURRENT, v21);
    if (v4)
    {
      ++*(void *)(a1 + 32);
      CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), v9 % v10);
      unint64_t v19 = *(NSObject **)(a1 + 56);
      blocuint64_t k = MEMORY[0x1E4F143A8];
      uint64_t v29 = 3221225472;
      int v30 = ___addRunningJob_block_invoke;
      int v31 = &unk_1E5E2F3D0;
      uint64_t v33 = a1;
      unint64_t v34 = v9;
      int v32 = v4;
      dispatch_sync(v19, &block);
      dispatch_async(ValueAtIndex, v4);
      uint64_t v5 = 0;
    }
    else
    {
      uint64_t v5 = FigSignalErrorAt();
    }
  }
LABEL_13:

  return v5;
}

void sub_1AB99871C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __CMPhotoAsyncDispatcherDispatchBlockWithOrderedCompletionAndTimeout_block_invoke(void *a1)
{
  (*(void (**)(void))(a1[4] + 16))();
  uint64_t v2 = a1[7];
  uint64_t v3 = a1[8];
  uint64_t v4 = a1[5];
  uint64_t v5 = *(NSObject **)(v2 + 56);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___addToFunnel_block_invoke;
  block[3] = &unk_1E5E2F3D0;
  block[5] = v3;
  block[6] = v2;
  block[4] = v4;
  dispatch_sync(v5, block);
}

uint64_t CMPhotoAsyncDispatcherDispatchBlockWithOrderedCompletion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CMPhotoAsyncDispatcherDispatchBlockWithOrderedCompletionAndTimeout(a1, a2, a3, 0xFFFFFFFFFFFFFFFFLL);
}

CFArrayRef CMPhotoAsyncDispatcherWaitForCompletion(uint64_t a1)
{
  if (!a1) {
    return (const __CFArray *)4294950306;
  }
  CFArrayRef result = *(const __CFArray **)(a1 + 16);
  if (result)
  {
    for (CFIndex i = 0; CFArrayGetCount(result) > i; ++i)
    {
      CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), i);
      dispatch_barrier_sync(ValueAtIndex, &__block_literal_global_5);
      CFArrayRef result = *(const __CFArray **)(a1 + 16);
      if (!result) {
        return result;
      }
    }
    return 0;
  }
  return result;
}

void __Block_byref_object_copy__0(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

id ___waitForIndexToComplete_block_invoke(void *a1)
{
  *(void *)(*(void *)(a1[4] + 8) + 40) = objc_msgSend(*(id *)(a1[5] + 72), "objectForKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F28ED0], "numberWithUnsignedLong:", a1[6]));
  uint64_t v2 = *(void **)(*(void *)(a1[4] + 8) + 40);
  return v2;
}

uint64_t ___addToFunnel_block_invoke(void *a1)
{
  uint64_t v2 = a1[5];
  uint64_t v3 = *(void *)(a1[6] + 80);
  uint64_t v4 = [MEMORY[0x1E4F28ED0] numberWithUnsignedLong:v2];
  uint64_t v5 = a1[4];
  if (v2 == v3)
  {
    (*(void (**)(void))(v5 + 16))(a1[4]);
    [*(id *)(a1[6] + 72) removeObjectForKey:v4];
    ++*(void *)(a1[6] + 80);
    unint64_t v6 = (void *)MEMORY[0x1E4F28ED0];
    while (1)
    {
      uint64_t v7 = objc_msgSend(v6, "numberWithUnsignedLong:");
      uint64_t result = [*(id *)(a1[6] + 64) objectForKeyedSubscript:v7];
      if (!result) {
        break;
      }
      (*(void (**)(void))([*(id *)(a1[6] + 64) objectForKeyedSubscript:v7] + 16))();
      [*(id *)(a1[6] + 64) removeObjectForKey:v7];
      [*(id *)(a1[6] + 72) removeObjectForKey:v7];
      unint64_t v6 = (void *)MEMORY[0x1E4F28ED0];
      ++*(void *)(a1[6] + 80);
    }
  }
  else
  {
    unint64_t v9 = *(void **)(a1[6] + 64);
    return [v9 setObject:v5 forKeyedSubscript:v4];
  }
  return result;
}

uint64_t ___addRunningJob_block_invoke(void *a1)
{
  uint64_t v1 = a1[4];
  uint64_t v2 = *(void **)(a1[5] + 72);
  uint64_t v3 = [MEMORY[0x1E4F28ED0] numberWithUnsignedLong:a1[6]];
  return [v2 setObject:v1 forKeyedSubscript:v3];
}

uint64_t CMPhotoJPEGCreateJPEGFromSbuf(opaqueCMSampleBuffer *a1, const __CFDictionary *a2, void *a3, IOSurfaceRef *a4, _DWORD *a5)
{
  if ((sCMPhotoJPEGEncoderTraceInitialized & 1) == 0) {
    sCMPhotoJPEGEncoderTraceInitialized = 1;
  }
  if (a1 && a4 && a5 && (ImageBuffer = CMSampleBufferGetImageBuffer(a1)) != 0)
  {
    return _createJPEGFromCVPixelBuffer(0, ImageBuffer, a2, a3, 0, a4, a5);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t _createJPEGFromCVPixelBuffer(unsigned int a1, __CVBuffer *a2, const __CFDictionary *a3, void *a4, __CFDictionary **a5, IOSurfaceRef *a6, _DWORD *a7)
{
  uint64_t v181 = 0;
  long long v179 = 0u;
  long long v180 = 0u;
  long long v177 = 0u;
  long long v178 = 0u;
  long long v176 = 0u;
  uint64_t v175 = 0;
  long long v173 = 0u;
  long long v174 = 0u;
  long long v171 = 0u;
  long long v172 = 0u;
  long long v170 = 0u;
  IOSurfaceRef buffer = 0;
  CFTypeRef v169 = 0;
  CGSize v9 = *(CGSize *)(MEMORY[0x1E4F1DB28] + 16);
  rect.origiuint64_t n = (CGPoint)*MEMORY[0x1E4F1DB28];
  rect.CGSize size = v9;
  if ((sCMPhotoJPEGEncoderTraceInitialized & 1) == 0) {
    sCMPhotoJPEGEncoderTraceInitialized = 1;
  }
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  if (!a2)
  {
    uint64_t v63 = FigSignalErrorAt();
    int v67 = 0;
    goto LABEL_437;
  }
  if (!a6 || !a7) {
    goto LABEL_458;
  }
  Boolunsigned int Value = _getBoolValue(a3, @"JPEGSoftwareEncode", 0);
  if (a3 && (unsigned int Value = CFDictionaryGetValue(a3, @"JPEGSoftwareEncode")) != 0)
  {
    CFTypeID v11 = CFGetTypeID(Value);
    BOOL v12 = v11 == CFBooleanGetTypeID();
  }
  else
  {
    BOOL v12 = 0;
  }
  size_t Width = CVPixelBufferGetWidth(a2);
  size_t Height = CVPixelBufferGetHeight(a2);
  signed int PixelFormatType = CVPixelBufferGetPixelFormatType(a2);
  int v14 = PixelFormatType;
  int v15 = 0;
  if (PixelFormatType > 1717855599)
  {
    if (PixelFormatType > 1751410031)
    {
      if (PixelFormatType != 1751411059)
      {
        int v16 = 1751410032;
LABEL_24:
        if (PixelFormatType != v16) {
          goto LABEL_26;
        }
      }
    }
    else if (PixelFormatType != 1717855600)
    {
      int v16 = 1717856627;
      goto LABEL_24;
    }
LABEL_25:
    int v15 = 4;
    goto LABEL_26;
  }
  if ((PixelFormatType - 1278226488) <= 0x30
    && ((1 << (PixelFormatType - 56)) & 0x1400000000001) != 0
    || (PixelFormatType - 1278226736) <= 6 && ((1 << (PixelFormatType - 48)) & 0x45) != 0)
  {
    goto LABEL_25;
  }
LABEL_26:
  unsigned int v166 = v15;
  uint64_t v153 = 0;
  int v17 = !v12;
  uint64_t v18 = 420;
  if (PixelFormatType > 1717855599)
  {
    if (PixelFormatType > 1751410031)
    {
      if (PixelFormatType != 1751411059)
      {
        int v19 = 1751410032;
LABEL_38:
        if (PixelFormatType != v19) {
          goto LABEL_40;
        }
      }
    }
    else if (PixelFormatType != 1717855600)
    {
      int v19 = 1717856627;
      goto LABEL_38;
    }
LABEL_39:
    uint64_t v18 = 400;
    goto LABEL_40;
  }
  if ((PixelFormatType - 1278226488) <= 0x30
    && ((1 << (PixelFormatType - 56)) & 0x1400000000001) != 0
    || (PixelFormatType - 1278226736) <= 6 && ((1 << (PixelFormatType - 48)) & 0x45) != 0)
  {
    goto LABEL_39;
  }
LABEL_40:
  long long v157 = a6;
  unsigned int v20 = 327689;
  CFDictionaryRef theDict = a3;
  unsigned int v158 = v17;
  if (!a3)
  {
    unsigned __int8 BytePtr = 0;
    int v145 = 0;
    int v143 = 0;
    int v165 = 0;
    CFTypeRef cf = 0;
    int v27 = 1;
    int IntValue = -1;
    __int16 v146 = @"SurfacePoolOneShot";
    int v28 = 1;
    int v148 = 0;
    int v149 = 1;
    int v29 = -1;
    int v23 = BoolValue;
    goto LABEL_94;
  }
  int v21 = _getBoolValue(a3, @"JPEGHighSpeedEncode", 1);
  uint64_t v22 = (__CFString *)CFDictionaryGetValue(a3, @"JPEGSurfacePool");
  int v23 = BoolValue;
  if (v22)
  {
    uint64_t v24 = v22;
    CFTypeID v25 = CFGetTypeID(v22);
    int v143 = 1;
    __int16 v146 = v24;
    if (v25 != CMPhotoSurfacePoolGetTypeID() && v24 != @"SurfacePoolOneShot") {
      goto LABEL_458;
    }
  }
  else
  {
    int v143 = 0;
    __int16 v146 = @"SurfacePoolOneShot";
  }
  int v149 = v21;
  int v30 = CFDictionaryGetValue(a3, @"JPEGScaleAndRotateSession");
  if (v30)
  {
    uint64_t v31 = (uint64_t)v30;
    CFTypeID v32 = CFGetTypeID(v30);
    uint64_t v153 = v31;
    if (v32 != CMPhotoScaleAndRotateSessionGetTypeID()) {
      goto LABEL_458;
    }
  }
  uint64_t v33 = CFDictionaryGetValue(a3, @"JPEGProvidedSurface");
  unint64_t v34 = v33;
  if (v33)
  {
    CFTypeID v35 = CFGetTypeID(v33);
    if (v35 != IOSurfaceGetTypeID()) {
      goto LABEL_458;
    }
  }
  CFTypeRef cf = v34;
  CFDataRef v36 = (const __CFData *)CFDictionaryGetValue(a3, @"JPEGCustomLumaQuantTable");
  CFDataRef v37 = v36;
  if (v36 && (CFTypeID v38 = CFGetTypeID(v36), v38 == CFDataGetTypeID()))
  {
    if (CFDataGetLength(v37) != 64) {
      goto LABEL_458;
    }
    unsigned __int8 BytePtr = CFDataGetBytePtr(v37);
  }
  else
  {
    unsigned __int8 BytePtr = 0;
  }
  CFDataRef v39 = (const __CFData *)CFDictionaryGetValue(a3, @"JPEGCustomChromaQuantTable");
  if (!v39 || (CFDataRef v40 = v39, v41 = CFGetTypeID(v39), v41 != CFDataGetTypeID()))
  {
    if (!BytePtr) {
      goto LABEL_62;
    }
LABEL_458:
    uint64_t v63 = FigSignalErrorAt();
    int v67 = 0;
    goto LABEL_437;
  }
  if (CFDataGetLength(v40) != 64 || (BytePtr == 0) == (CFDataGetBytePtr(v40) != 0)) {
    goto LABEL_458;
  }
LABEL_62:
  if (v37) {
    goto LABEL_76;
  }
  int v42 = _getBoolValue(theDict, @"JPEGAppleQuality", 1);
  if (v42) {
    int v43 = 327689;
  }
  else {
    int v43 = 5;
  }
  Floatunsigned int Value = _getFloatValue(theDict, (const void *)*MEMORY[0x1E4F2F430], -1.0);
  if (FloatValue < 0.0)
  {
    unsigned int v20 = v43;
    int v23 = BoolValue;
    goto LABEL_76;
  }
  double v45 = FloatValue;
  if (v45 < 0.05)
  {
    int v46 = 0;
    int v47 = 0;
LABEL_72:
    int v23 = BoolValue;
    goto LABEL_73;
  }
  if (v45 < 0.26)
  {
    int v46 = 1;
    int v47 = 1;
    goto LABEL_72;
  }
  int v23 = BoolValue;
  if (v45 >= 0.31)
  {
    if (v45 >= 0.6)
    {
      if (v45 >= 0.76)
      {
        if (v45 >= 0.83)
        {
          if (v45 >= 0.99) {
            int v47 = 6;
          }
          else {
            int v47 = 5;
          }
          if (v45 >= 0.99) {
            int v46 = 6;
          }
          else {
            int v46 = 327689;
          }
          goto LABEL_73;
        }
        int v46 = 262153;
      }
      else
      {
        int v46 = 4;
      }
      int v47 = 4;
    }
    else
    {
      int v46 = 3;
      int v47 = 3;
    }
  }
  else
  {
    int v46 = 2;
    int v47 = 2;
  }
LABEL_73:
  if (v42) {
    unsigned int v20 = v46;
  }
  else {
    unsigned int v20 = v47;
  }
LABEL_76:
  int IntValue = _getIntValue(theDict, @"JPEGPhotoQuality", 0xFFFFFFFFLL);
  CFDictionaryRef v48 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"JPEGSourceCropRect");
  if (v48 && CGRectMakeWithDictionaryRepresentation(v48, &rect))
  {
    v190.origin.double x = round(rect.origin.x);
    v190.origin.CGFloat y = round(rect.origin.y);
    v190.size.double width = round(rect.size.width);
    v190.size.double height = round(rect.size.height);
    CGRect rect = v190;
    if (CGRectIsEmpty(v190)) {
      goto LABEL_458;
    }
    CGFloat v49 = (double)CVPixelBufferGetWidth(a2);
    v191.size.double height = (double)CVPixelBufferGetHeight(a2);
    double v51 = rect.size.width;
    double v50 = rect.size.height;
    v191.origin.double x = 0.0;
    v191.origin.CGFloat y = 0.0;
    v191.size.double width = v49;
    CGRect v192 = CGRectIntersection(rect, v191);
    if (!CGRectEqualToRect(rect, v192)) {
      goto LABEL_458;
    }
    size_t Height = (unint64_t)v50;
    size_t Width = (unint64_t)v51;
    int v165 = 1;
  }
  else
  {
    int v165 = 0;
  }
  int v52 = _getIntValue(theDict, @"JPEGSubsampling", v18);
  if (v52 > 421)
  {
    if (v52 == 444)
    {
      int v53 = 2;
      goto LABEL_91;
    }
    if (v52 == 422)
    {
      int v53 = 1;
      goto LABEL_91;
    }
LABEL_105:
    unsigned int v166 = 0;
    goto LABEL_92;
  }
  if (v52 == 400)
  {
    int v53 = 4;
    goto LABEL_91;
  }
  if (v52 != 411) {
    goto LABEL_105;
  }
  int v53 = 3;
LABEL_91:
  unsigned int v166 = v53;
LABEL_92:
  unsigned int v158 = _getBoolValue(theDict, @"JPEGSoftwareFallback", v158);
  int v27 = _getBoolValue(theDict, @"JPEGAllowHardwareEvenCrop", 1);
  int v145 = _getBoolValue(theDict, @"JPEGUse601YCbCrMatrix", 0);
  int v28 = _getBoolValue(theDict, @"JPEGIncreaseRoundingPoint", 1);
  int v148 = _getBoolValue(theDict, @"JPEGEnableCompressedSurfacePooling", 0);
  int v29 = _getIntValue(theDict, @"JPEGDestinationSurfaceSize", 0xFFFFFFFFLL);
  if (v29 != -1 && v29 <= 0) {
    goto LABEL_458;
  }
LABEL_94:
  int v147 = v28;
  int v144 = v29;
  if (v23)
  {
    int v54 = 0;
    int v55 = 0;
    uint64_t v56 = 0;
    int v57 = 1;
    goto LABEL_135;
  }
  if (v14 > 875704933)
  {
    if (v14 > 1380401728)
    {
      if (v14 > 2037741170)
      {
        if (v14 == 2084070960) {
          goto LABEL_131;
        }
        unsigned __int16 v59 = 30323;
      }
      else
      {
        if (v14 == 1380401729) {
          goto LABEL_113;
        }
        unsigned __int16 v59 = 30310;
      }
      if (v14 != (v59 | 0x79750000)) {
        goto LABEL_129;
      }
      int v61 = JPEGDeviceInterface_supportsAppleInterchangeFormats();
      BOOL v62 = (Width & 1) != 0 && v61 == 0;
      int v54 = !v62;
      if (!v54) {
        goto LABEL_129;
      }
      goto LABEL_133;
    }
    if (v14 == 875704934 || v14 == 875836518)
    {
LABEL_113:
      int v54 = JPEGDeviceInterface_supportsAppleInterchangeFormats();
      if (!v54) {
        goto LABEL_129;
      }
LABEL_133:
      int v55 = 0;
      uint64_t v56 = 0;
      int v57 = 1;
      goto LABEL_134;
    }
    int v60 = 1111970369;
LABEL_112:
    if (v14 != v60) {
      goto LABEL_129;
    }
    goto LABEL_113;
  }
  if (v14 <= 641230387)
  {
    if (v14 == 32) {
      goto LABEL_113;
    }
    if (v14 == 641230384) {
      goto LABEL_131;
    }
    int v60 = 641230386;
    goto LABEL_112;
  }
  if (v14 > 792225327)
  {
    if (v14 == 792225328) {
      goto LABEL_131;
    }
    int v58 = 875704422;
    goto LABEL_117;
  }
  if (v14 == 641230388) {
    goto LABEL_113;
  }
  int v58 = 758670896;
LABEL_117:
  if (v14 != v58) {
    goto LABEL_129;
  }
LABEL_131:
  if (JPEGDeviceInterface_supportsAppleInterchangeFormats())
  {
    int v54 = 1;
    goto LABEL_133;
  }
  int v54 = ((Width | Height) & 1) == 0;
  if (((Width | Height) & 1) == 0) {
    goto LABEL_133;
  }
LABEL_129:
  if (JPEGDeviceInterface_supportsAppleInterchangeFormats())
  {
    int v55 = 1;
  }
  else
  {
    if (JPEGDeviceInterface_supportsAppleInterchangeFormats()) {
      BOOL v84 = 1;
    }
    else {
      BOOL v84 = v27 == 0;
    }
    int v55 = !v84;
  }
  uint64_t v63 = 3758097095;
  uint64_t v56 = 875704422;
  if (v14 <= 875704933)
  {
    if (v14 > 758674991)
    {
      if (v14 > 846624120)
      {
        if (v14 == 846624121)
        {
          int v100 = 0;
          int v23 = BoolValue;
          if (v166 >= 2) {
            goto LABEL_293;
          }
          int v54 = 0;
          int v57 = 0;
          uint64_t v56 = 2037741171;
          goto LABEL_367;
        }
        int v86 = 875704438;
      }
      else
      {
        if (v14 == 758674992) {
          goto LABEL_345;
        }
        int v86 = 792229424;
      }
    }
    else
    {
      if (v14 > 641234481)
      {
        if (v14 == 641234482)
        {
LABEL_326:
          uint64_t v56 = 2037741158;
          if (v166 == 1)
          {
            int v54 = 0;
            int v57 = 0;
            int v55 = 1;
            goto LABEL_134;
          }
          if (v166) {
            goto LABEL_368;
          }
          int v100 = 0;
          if ((Width & 1) == 0) {
            LOBYTE(v55) = 1;
          }
          int v23 = BoolValue;
          if ((v55 & 1) == 0) {
            goto LABEL_293;
          }
          goto LABEL_331;
        }
        int v85 = 641234484;
LABEL_334:
        if (v14 != v85) {
          goto LABEL_368;
        }
        goto LABEL_335;
      }
      if (v14 == 32) {
        goto LABEL_335;
      }
      int v86 = 641234480;
    }
    if (v14 != v86) {
      goto LABEL_368;
    }
    goto LABEL_345;
  }
  if (v14 <= 1111970368)
  {
    if (v14 <= 875836517)
    {
      if (v14 != 875704934 && v14 != 875704950) {
        goto LABEL_368;
      }
      goto LABEL_326;
    }
    if (v14 == 875836518) {
      goto LABEL_335;
    }
    int v85 = 875836534;
    goto LABEL_334;
  }
  if (v14 > 1380401728)
  {
    if (v14 != 1380401729)
    {
      if (v14 != 2084075056)
      {
        int v85 = 1999843442;
        goto LABEL_334;
      }
LABEL_345:
      if (!v166)
      {
        int v100 = 0;
        if (((Width | Height) & 1) == 0) {
          int v55 = 1;
        }
        int v23 = BoolValue;
        if (v55 == 1)
        {
          int v54 = 0;
          int v57 = 0;
          goto LABEL_135;
        }
        goto LABEL_293;
      }
LABEL_368:
      int v100 = 0;
      int v23 = BoolValue;
      goto LABEL_293;
    }
LABEL_335:
    if (v166)
    {
      if (v166 == 2)
      {
        if (v14 == 1999843442)
        {
          int v23 = BoolValue;
          if (!JPEGDeviceInterface_supportsAppleInterchangeFormats())
          {
            int v100 = 0;
            goto LABEL_293;
          }
          int v54 = 0;
          int v57 = 0;
          uint64_t v56 = 875836518;
          goto LABEL_367;
        }
      }
      else if (v166 == 1)
      {
        int v100 = 0;
        if ((Width & 1) == 0) {
          LOBYTE(v55) = 1;
        }
        int v23 = BoolValue;
        if (v55)
        {
LABEL_366:
          int v54 = 0;
          int v57 = 0;
          uint64_t v56 = 2037741158;
          goto LABEL_367;
        }
LABEL_293:
        if (!v158 && !v23)
        {
          *long long v157 = 0;
          *a7 = 0;
          int v67 = v100;
          goto LABEL_437;
        }
        if (v100 && v169)
        {
          CFRelease(v169);
          CFTypeRef v169 = 0;
        }
        if (*MEMORY[0x1E4F1EBA8] == 1) {
          kdebug_trace();
        }
        __int16 v188 = 0;
        CFIndex v101 = (CGFloat *)MEMORY[0x1E4F1DB20];
        IOSurfaceRef v187 = 0;
        CGSize v102 = *(CGSize *)(MEMORY[0x1E4F1DB20] + 16);
        v186.origiuint64_t n = (CGPoint)*MEMORY[0x1E4F1DB20];
        v186.CGSize size = v102;
        if (!theDict)
        {
          unsigned int v107 = 0;
          int v106 = 5;
          float v104 = 0.85;
          goto LABEL_388;
        }
        int32x4_t v103 = (const void *)*MEMORY[0x1E4F2F430];
        if (CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F2F430]))
        {
          float v104 = _getFloatValue(theDict, v103, 0.85);
          double v105 = v104;
          if (v104 >= 0.05)
          {
            if (v105 >= 0.26)
            {
              if (v105 >= 0.31)
              {
                if (v105 >= 0.6)
                {
                  int v106 = 4;
                  if (v105 >= 0.76 && v105 >= 0.83)
                  {
                    if (v105 >= 0.99) {
                      int v106 = 6;
                    }
                    else {
                      int v106 = 5;
                    }
                  }
                }
                else
                {
                  int v106 = 3;
                }
              }
              else
              {
                int v106 = 2;
              }
            }
            else
            {
              int v106 = 1;
            }
          }
          else
          {
            int v106 = 0;
          }
        }
        else
        {
          int v106 = 5;
          float v104 = 0.85;
        }
        int v108 = _getIntValue(theDict, @"JPEGSubsampling", 420);
        if (v108 > 421)
        {
          if (v108 == 444)
          {
            unsigned int v107 = 2;
            goto LABEL_386;
          }
          if (v108 == 422)
          {
            unsigned int v107 = 1;
            goto LABEL_386;
          }
        }
        else
        {
          if (v108 == 400)
          {
            unsigned int v107 = 4;
            goto LABEL_386;
          }
          if (v108 == 411)
          {
            unsigned int v107 = 3;
            goto LABEL_386;
          }
        }
        unsigned int v107 = 0;
LABEL_386:
        CFDictionaryRef v109 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"JPEGSourceCropRect");
        if (v109) {
          CGRectMakeWithDictionaryRepresentation(v109, &v186);
        }
LABEL_388:
        OSType v110 = CVPixelBufferGetPixelFormatType(a2);
        OSType v113 = v110;
        if (v110 == 1111970369 || v110 == 24)
        {
          CFIndex v114 = a2;
          int32x4_t v115 = CVPixelBufferRetain(a2);
          __int16 v188 = v115;
        }
        else
        {
          uint64_t v116 = CMPhotoScaleAndRotateSessionTransformForSizeWithHW(0, a2, 1, 1, 1111970369, 0, 0, 1u, *v101, v101[1], v101[2], v101[3], *MEMORY[0x1E4F1DB30], *(double *)(MEMORY[0x1E4F1DB30] + 8), v111, v112, 0, 1u, 0,
                   0,
                   0,
                   0xFFFFFFFF,
                   &v188);
          if (v116)
          {
            uint64_t v63 = v116;
            uint64_t v127 = 0;
            goto LABEL_477;
          }
          CFIndex v114 = a2;
          int32x4_t v115 = v188;
        }
        size_t v117 = CVPixelBufferGetWidth(v115);
        size_t v118 = CVPixelBufferGetHeight(v188);
        size_t BytesPerRow = CVPixelBufferGetBytesPerRow(v188);
        UInt8 v120 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC98]);
        if (!v120)
        {
          uint64_t v127 = 0;
          CFTypeRef v138 = 0;
          long long v135 = 0;
          CGImageRef v128 = 0;
LABEL_472:
          uint64_t v124 = 0;
          goto LABEL_473;
        }
        CVPixelBufferLockBaseAddress(v188, 1uLL);
        uint64_t v121 = v188;
        BaseAddress = CVPixelBufferGetBaseAddress(v188);
        DataCFNumberRef Size = CVPixelBufferGetDataSize(v188);
        uint64_t v124 = CGDataProviderCreateWithData(v121, BaseAddress, DataSize, (CGDataProviderReleaseDataCallback)_unlockAndReleasePixelBuffer);
        if (!v124)
        {
          CVPixelBufferUnlockBaseAddress(v188, 1uLL);
          uint64_t v127 = 0;
          CFTypeRef v138 = 0;
          long long v135 = 0;
          CGImageRef v128 = 0;
LABEL_473:
          uint64_t v63 = 4294954510;
          goto LABEL_418;
        }
        __int16 v188 = 0;
        if (v113 == 24) {
          CGBitmapInfo v125 = 0;
        }
        else {
          CGBitmapInfo v125 = 8198;
        }
        if (v113 == 24) {
          size_t v126 = 24;
        }
        else {
          size_t v126 = 32;
        }
        uint64_t v127 = CGImageCreate(v117, v118, 8uLL, v126, BytesPerRow, v120, v125, v124, 0, 0, kCGRenderingIntentDefault);
        if (!v127)
        {
          uint64_t v63 = FigSignalErrorAt();
          CFTypeRef v138 = 0;
          long long v135 = 0;
          CGImageRef v128 = 0;
          goto LABEL_418;
        }
        CGDataProviderRelease(v124);
        CFRelease(v120);
        if (!CGRectIsNull(v186))
        {
          CGImageRef v128 = CGImageCreateWithImageInRect(v127, v186);
          if (!v128)
          {
            uint64_t v63 = FigSignalErrorAt();
            UInt8 v120 = 0;
            CFTypeRef v138 = 0;
            long long v135 = 0;
            goto LABEL_478;
          }
          CFRelease(v127);
          uint64_t v127 = v128;
        }
        size_t v129 = CVPixelBufferGetWidth(v114);
        size_t v130 = 2 * v129 * CVPixelBufferGetHeight(v114);
        if (v106 != 6) {
          v130 /= 3uLL;
        }
        unint64_t v131 = (*MEMORY[0x1E4F14B00] + v130 - 1) & -*MEMORY[0x1E4F14B00];
        if (v131 <= 0x8000) {
          unint64_t v132 = 0x8000;
        }
        else {
          unint64_t v132 = v131;
        }
        uint64_t v133 = CMPhotoSurfacePoolCreateMemorySurface(@"SurfacePoolOneShot", v132, 2, &v187);
        if (!v133)
        {
          IOSurfaceDecrementUseCount(v187);
          IOSurfaceRef info = v187;
          uint64_t v184 = 0;
          size_t AllocSize = IOSurfaceGetAllocSize(v187);
          CGDataConsumerCallbacks cbks = (CGDataConsumerCallbacks)xmmword_1F02DE660;
          uint64_t v134 = CGDataConsumerCreate(&info, &cbks);
          CGImageRef v128 = v134;
          if (v134)
          {
            long long v135 = CGImageDestinationCreateWithDataConsumer(v134, @"public.jpeg", 1uLL, 0);
            if (v135)
            {
              CFAllocatorRef v136 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
              CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              CFTypeRef v138 = Mutable;
              if (Mutable)
              {
                CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F2F470], (const void *)*MEMORY[0x1E4F1CFC8]);
                CFTypeRef v139 = (const void *)*MEMORY[0x1E4F2F430];
                valuePtr[0] = v104;
                CFNumberRef v140 = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
                CFDictionarySetValue(v138, v139, v140);
                CFRelease(v140);
                LODWORD(v139) = dword_1AB9E34E4[v107];
                LODWORD(v140) = dword_1AB9E34F8[v107];
                CFMutableDictionaryRef v141 = CFDictionaryCreateMutable(v136, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                CFDictionaryAddValue(v138, (const void *)*MEMORY[0x1E4F2FC10], v141);
                CMPhotoCFDictionarySetInt(v141, (const void *)*MEMORY[0x1E4F2FC00], (int)v140);
                CMPhotoCFDictionarySetInt(v141, (const void *)*MEMORY[0x1E4F2FC08], (int)v139);
                if (v141) {
                  CFRelease(v141);
                }
                CGImageDestinationAddImage(v135, v127, v138);
                if (CGImageDestinationFinalize(v135))
                {
                  uint64_t v63 = 0;
                  UInt8 v120 = 0;
                  uint64_t v124 = 0;
                  *long long v157 = v187;
                  IOSurfaceRef v187 = 0;
                  *a7 = v184;
LABEL_418:
                  if (v188) {
                    CFRelease(v188);
                  }
                  if (v187) {
                    CFRelease(v187);
                  }
                  if (v127) {
                    CFRelease(v127);
                  }
                  if (v120) {
                    CFRelease(v120);
                  }
                  if (v124) {
                    CFRelease(v124);
                  }
                  if (v128) {
                    CFRelease(v128);
                  }
                  if (v135) {
                    CFRelease(v135);
                  }
                  if (v138) {
                    CFRelease(v138);
                  }
                  if (*MEMORY[0x1E4F1EBA8] == 1) {
                    kdebug_trace();
                  }
                  int v67 = 0;
                  goto LABEL_437;
                }
                uint64_t v63 = FigSignalErrorAt();
                UInt8 v120 = 0;
LABEL_478:
                uint64_t v124 = 0;
                goto LABEL_418;
              }
              UInt8 v120 = 0;
            }
            else
            {
              UInt8 v120 = 0;
              CFTypeRef v138 = 0;
            }
          }
          else
          {
            UInt8 v120 = 0;
            CFTypeRef v138 = 0;
            long long v135 = 0;
          }
          goto LABEL_472;
        }
        uint64_t v63 = v133;
LABEL_477:
        UInt8 v120 = 0;
        CFTypeRef v138 = 0;
        long long v135 = 0;
        CGImageRef v128 = 0;
        goto LABEL_478;
      }
      goto LABEL_368;
    }
    if (((Width | Height) & 1) == 0) {
      LOBYTE(v55) = 1;
    }
    if ((v55 & 1) == 0)
    {
      if ((Width & 1) == 0)
      {
        int v100 = 0;
        int v23 = BoolValue;
        if ((Height & 1) == 0) {
          goto LABEL_293;
        }
        goto LABEL_366;
      }
      goto LABEL_368;
    }
    int v54 = 0;
    int v57 = 0;
    int v55 = 1;
LABEL_134:
    int v23 = BoolValue;
    goto LABEL_135;
  }
  if (v14 == 1111970369) {
    goto LABEL_335;
  }
  int v100 = 0;
  int v23 = BoolValue;
  if (v14 != 1278226488) {
    goto LABEL_293;
  }
LABEL_331:
  int v54 = 0;
  int v57 = 0;
LABEL_367:
  int v55 = 1;
LABEL_135:
  if (v55 | v23)
  {
    uint64_t v63 = 0;
    goto LABEL_160;
  }
  unsigned int v64 = 2;
  if (v14 <= 875836517)
  {
    if (v14 <= 641230387)
    {
      if (v14 == 32) {
        goto LABEL_154;
      }
      int v65 = 641230386;
    }
    else
    {
      if (v14 == 641230388) {
        goto LABEL_154;
      }
      if (v14 == 846820726) {
        goto LABEL_153;
      }
      int v65 = 875704934;
    }
LABEL_152:
    if (v14 != v65) {
      goto LABEL_218;
    }
LABEL_153:
    unsigned int v64 = 1;
    goto LABEL_154;
  }
  if (v14 > 1380401728)
  {
    if (v14 == 1380401729) {
      goto LABEL_154;
    }
    if (v14 == 2037741171) {
      goto LABEL_153;
    }
    int v65 = 2037741158;
    goto LABEL_152;
  }
  if (v14 != 875836518 && v14 != 1111970369)
  {
    if (v14 == 1278226488)
    {
      unsigned int v64 = 4;
      goto LABEL_154;
    }
LABEL_218:
    unsigned int v64 = 0;
  }
LABEL_154:
  if (v166 <= v64 || v166 == 4) {
    uint64_t v63 = 0;
  }
  else {
    uint64_t v63 = 3758097095;
  }
LABEL_160:
  if (v23 | v63)
  {
    int v67 = 0;
    goto LABEL_287;
  }
  if (!v57 || (int v67 = 0, a4) && !v54)
  {
    if (v165)
    {
      double v69 = rect.size.width;
      double v68 = rect.size.height;
      if (a4)
      {
LABEL_166:
        size_t v70 = (unint64_t)v69;
        if (CVPixelBufferGetWidth((CVPixelBufferRef)a4) == (unint64_t)v69
          && CVPixelBufferGetHeight((CVPixelBufferRef)a4) == (unint64_t)v68
          && CVPixelBufferGetIOSurface((CVPixelBufferRef)a4))
        {
          int v67 = 0;
          CFTypeRef v169 = a4;
          goto LABEL_174;
        }
LABEL_173:
        int v67 = 1;
        if (CMPhotoSurfacePoolCreatePixelBuffer(v146, v56, v70, (unint64_t)v68, 1, 0, 0, 0, 0, 0, (CVPixelBufferRef *)&v169))
        {
          int v100 = 0;
          goto LABEL_462;
        }
LABEL_174:
        if (v165)
        {
          p_CGRect rect = &rect;
          CGFloat y = rect.origin.y;
          CGFloat v75 = rect.size.width;
        }
        else
        {
          p_CGRect rect = (CGRect *)MEMORY[0x1E4F1DB20];
          CGFloat y = *(double *)(MEMORY[0x1E4F1DB20] + 8);
          CGFloat v75 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
        }
        if (!CMPhotoScaleAndRotateSessionTransformForMaxSideLength(v153, a2, 1, 1, v56, v145 != 0, 0, 0, p_rect->origin.x, y, v75, p_rect->size.height, 0, 0, 0, 1u, (__CVBuffer **)&v169))
        {
          int v165 = 0;
          unint64_t v76 = (__CVBuffer *)v169;
          goto LABEL_180;
        }
        int v100 = v67;
LABEL_462:
        uint64_t v63 = 3758097084;
        goto LABEL_293;
      }
    }
    else
    {
      CMPhotoGetPixelBufferCLAPAsRect(a2);
      double v69 = v71;
      double v68 = v72;
      if (a4) {
        goto LABEL_166;
      }
    }
    size_t v70 = (unint64_t)v69;
    goto LABEL_173;
  }
  unint64_t v76 = a2;
LABEL_180:
  IOSurface = CVPixelBufferGetIOSurface(v76);
  int v154 = v67;
  if (cf)
  {
    if (!v148)
    {
      IOSurfaceRef buffer = (IOSurfaceRef)CFRetain(cf);
      goto LABEL_241;
    }
    uint64_t v91 = FigSignalErrorAt();
LABEL_464:
    uint64_t v63 = v91;
    goto LABEL_437;
  }
  if (v144 < 1)
  {
    unint64_t v79 = 2 * Height * Width;
    if (BytePtr)
    {
      if (*BytePtr == 1)
      {
        unint64_t v80 = 0;
        do
        {
          unint64_t v81 = v80;
          if (v80 == 63) {
            break;
          }
          int v82 = BytePtr[++v80];
        }
        while (v82 == 1);
        BOOL v83 = v81 > 0x3E;
      }
      else
      {
        BOOL v83 = 0;
      }
      if (v166 == 2) {
        BOOL v83 = 1;
      }
      if (!v83) {
        unint64_t v79 = (3 * Height * Width) >> 1;
      }
    }
    else
    {
      if ((unsigned __int16)v20 == 9) {
        unsigned int v87 = HIWORD(v20);
      }
      else {
        unsigned int v87 = v20;
      }
      if (v87 != 6) {
        v79 /= 3uLL;
      }
    }
    unint64_t v88 = (v79 + *MEMORY[0x1E4F14B00] - 1) & -*MEMORY[0x1E4F14B00];
    if (v88 <= 0x8000) {
      unint64_t v78 = 0x8000;
    }
    else {
      unint64_t v78 = v88;
    }
  }
  else
  {
    unint64_t v78 = v144;
  }
  if (!v148)
  {
    uint64_t v91 = CMPhotoSurfacePoolCreateMemorySurface(@"SurfacePoolOneShot", v78, 2, &buffer);
    if (!v91)
    {
      IOSurfaceDecrementUseCount(buffer);
      goto LABEL_241;
    }
    goto LABEL_464;
  }
  if (v143) {
    uint64_t v89 = (uint64_t)v146;
  }
  else {
    uint64_t v89 = 0;
  }
  uint64_t v90 = CMPhotoSurfacePoolCreateMemorySurface(v89, v78, 2, &buffer);
  if (v90)
  {
    uint64_t v63 = v90;
    goto LABEL_437;
  }
LABEL_241:
  uint64_t v92 = a1;
  if (a1 || (uint64_t v92 = JPEGDeviceInterface_openDriverConnection(), v92))
  {
    if (v57) {
      IOSurfaceBindAccel();
    }
    if (IntValue < 0)
    {
      int v93 = 1;
      goto LABEL_262;
    }
    int v93 = 1;
    if (BytePtr) {
      goto LABEL_262;
    }
    if (IntValue > 943009906)
    {
      switch(IntValue)
      {
        case 943009907:
          int v93 = 0;
          unsigned __int8 BytePtr = (const UInt8 *)&unk_1AB9E32A4;
          goto LABEL_262;
        case 959459438:
          int v93 = 0;
          unsigned __int8 BytePtr = (const UInt8 *)&unk_1AB9E3324;
          goto LABEL_262;
        case 959459443:
          int v93 = 0;
          unsigned __int8 BytePtr = (const UInt8 *)&unk_1AB9E32E4;
          goto LABEL_262;
      }
    }
    else
    {
      switch(IntValue)
      {
        case 926232686:
          int v93 = 0;
          unsigned __int8 BytePtr = (const UInt8 *)&sAppleQualityQMArray_Luma;
          goto LABEL_262;
        case 942682222:
          int v93 = 0;
          unsigned __int8 BytePtr = (const UInt8 *)&unk_1AB9E3224;
          goto LABEL_262;
        case 942814579:
          int v93 = 0;
          unsigned __int8 BytePtr = (const UInt8 *)&unk_1AB9E3264;
          goto LABEL_262;
      }
    }
    unsigned __int8 BytePtr = 0;
LABEL_262:
    if (BytePtr) {
      int v94 = v93 ^ 1;
    }
    else {
      int v94 = 1;
    }
    if (v147) {
      int v95 = (v149 != 0) | 0x10;
    }
    else {
      int v95 = v149 != 0;
    }
    while (1)
    {
      LODWORD(v176) = IOSurfaceGetID(IOSurface);
      DWORD2(v176) = IOSurfaceGetID(buffer);
      DWORD1(v176) = IOSurfaceGetAllocSize(IOSurface);
      HIDWORD(v176) = IOSurfaceGetAllocSize(buffer);
      *(void *)((char *)&v177 + 4) = __PAIR64__(Height, Width);
      if (v165) {
        *(int32x2_t *)((char *)&v178 + 4) = vmovn_s64((int64x2_t)vcvtq_u64_f64((float64x2_t)rect.origin));
      }
      HIDWORD(v177) = v20;
      LODWORD(v17_Block_object_dispose(&STACK[0x280], 8) = v95;
      HIDWORD(v181) = 1;
      HIDWORD(v17_Block_object_dispose(&STACK[0x280], 8) = v166;
      if (*MEMORY[0x1E4F1EBA8] == 1) {
        kdebug_trace();
      }
      uint64_t v63 = JPEGDeviceInterface_encodeJPEG(v92);
      if (*MEMORY[0x1E4F1EBA8] == 1) {
        kdebug_trace();
      }
      int v96 = v63 == -536870168 ? v94 : 0;
      if (cf || !v96) {
        break;
      }
      if ((unsigned __int16)v20 == 9) {
        unsigned int v20 = 4;
      }
      else {
        --v20;
      }
      if (!v20)
      {
        uint64_t v63 = 3758097128;
        break;
      }
    }
    int v23 = BoolValue;
    if (!a1) {
      JPEGDeviceInterface_closeDriverConnection(v92);
    }
    goto LABEL_286;
  }
  uint64_t v63 = FigSignalErrorAt();
LABEL_286:
  int v67 = v154;
LABEL_287:
  if (v23 | v63)
  {
    int v100 = v67;
    goto LABEL_293;
  }
  *long long v157 = buffer;
  IOSurfaceRef buffer = 0;
  *a7 = v171;
  if (!a5)
  {
    uint64_t v63 = 0;
    goto LABEL_439;
  }
  long long v97 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v97)
  {
    long long v98 = v97;
    float v99 = 0.025;
    switch(v20)
    {
      case 0u:
        break;
      case 1u:
        float v99 = 0.15;
        break;
      case 2u:
        float v99 = 0.27;
        break;
      case 3u:
        float v99 = 0.31;
        break;
      case 4u:
        float v99 = 0.6;
        break;
      case 5u:
        goto LABEL_315;
      case 6u:
        float v99 = 1.0;
        break;
      default:
        if (v20 == 262153) {
          float v99 = 0.8;
        }
        else {
LABEL_315:
        }
          float v99 = 0.86;
        break;
    }
    CMPhotoCFDictionarySetFloat(v97, @"ByteBudgetHint_Quality", v99);
    CMPhotoCFDictionarySetInt32(v98, @"ByteBudgetHint_Size", v171);
    uint64_t v63 = 0;
    *a5 = v98;
  }
  else
  {
    uint64_t v63 = 0;
  }
LABEL_437:
  if (buffer) {
    CFRelease(buffer);
  }
LABEL_439:
  if (v67 && v169) {
    CFRelease(v169);
  }
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  return v63;
}

uint64_t CMPhotoJPEGCreateJPEGFromCVPixelBuffer(__CVBuffer *a1, const __CFDictionary *a2, void *a3, IOSurfaceRef *a4, _DWORD *a5)
{
  return _createJPEGFromCVPixelBuffer(0, a1, a2, a3, 0, a4, a5);
}

uint64_t CMPhotoJPEGCreateJPEGFromIOSurface(IOSurfaceRef buffer, const __CFDictionary *a2, IOSurfaceRef *a3, _DWORD *a4)
{
  CFTypeRef cf = 0;
  uint64_t PixelBufferWithSurface = CMPhotoCreatePixelBufferWithSurface((const __CFAllocator *)*MEMORY[0x1E4F1CF80], buffer, 0, (CVPixelBufferRef *)&cf);
  if (!PixelBufferWithSurface) {
    uint64_t PixelBufferWithSurface = _createJPEGFromCVPixelBuffer(0, (__CVBuffer *)cf, a2, 0, 0, a3, a4);
  }
  uint64_t v8 = PixelBufferWithSurface;
  if (cf) {
    CFRelease(cf);
  }
  return v8;
}

uint64_t CMPhotoJPEGCreateJPEGSbufFromBuffer(void *a1, const __CFDictionary *a2, void *a3, opaqueCMSampleBuffer **a4)
{
  return _createJPEGSbufFromBuffer(0, a1, a2, a3, a4);
}

uint64_t _createJPEGSbufFromBuffer(unsigned int a1, void *a2, const __CFDictionary *a3, void *a4, opaqueCMSampleBuffer **a5)
{
  int v23 = 0;
  CFTypeRef value = 0;
  CFTypeRef cf = 0;
  if (a3)
  {
    Boolunsigned int Value = _getBoolValue(a3, @"JPEGEnableCompressedSurfacePooling", 0);
    if (!a2) {
      goto LABEL_14;
    }
  }
  else
  {
    Boolunsigned int Value = 0;
    if (!a2) {
      goto LABEL_14;
    }
  }
  if (!a5) {
    goto LABEL_14;
  }
  CFTypeID v11 = CFGetTypeID(a2);
  if (v11 != CMSampleBufferGetTypeID())
  {
    CFTypeID v14 = CFGetTypeID(a2);
    if (v14 == CVPixelBufferGetTypeID())
    {
      unsigned int v13 = a1;
      ImageBuffer = (__CVBuffer *)a2;
      goto LABEL_11;
    }
LABEL_14:
    uint64_t v15 = FigSignalErrorAt();
    goto LABEL_15;
  }
  ImageBuffer = CMSampleBufferGetImageBuffer((CMSampleBufferRef)a2);
  if (!ImageBuffer) {
    goto LABEL_14;
  }
  unsigned int v13 = a1;
LABEL_11:
  uint64_t v15 = _createJPEGFromCVPixelBuffer(v13, ImageBuffer, a3, a4, (__CFDictionary **)&value, (IOSurfaceRef *)&cf, &v23);
  if (v15)
  {
LABEL_15:
    uint64_t v19 = v15;
    goto LABEL_16;
  }
  SampleBufferWrappingIOSurface = CMPhotoCreateSampleBufferWrappingIOSurface((const __CFAllocator *)*MEMORY[0x1E4F1CF80], (__IOSurface *)cf, 0, v23, BoolValue, 1u);
  if (SampleBufferWrappingIOSurface)
  {
    int v17 = SampleBufferWrappingIOSurface;
    CMSetAttachment(SampleBufferWrappingIOSurface, @"ByteBudgetHint", value, 1u);
    CMBlockBufferRef DataBuffer = CMSampleBufferGetDataBuffer(v17);
    CMPropagateAttachments(v17, DataBuffer);
    uint64_t v19 = 0;
    *a5 = v17;
  }
  else
  {
    uint64_t v19 = 4294950305;
  }
LABEL_16:
  if (cf) {
    CFRelease(cf);
  }
  if (value) {
    CFRelease(value);
  }
  return v19;
}

__CFArray *CMPhotoJPEGCreateJPEGNativePixelFormatArray()
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  _appendPixelFormatValue(Mutable, 875704422);
  if (JPEGDeviceInterface_supportsAppleInterchangeFormats())
  {
    _appendPixelFormatValue(Mutable, 1111970369);
    _appendPixelFormatValue(Mutable, 1380401729);
    _appendPixelFormatValue(Mutable, 32);
    _appendPixelFormatValue(Mutable, 875836518);
    _appendPixelFormatValue(Mutable, 875704934);
  }
  _appendPixelFormatValue(Mutable, 2037741158);
  return Mutable;
}

void _appendPixelFormatValue(__CFArray *a1, int a2)
{
  int valuePtr = a2;
  CFNumberRef v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  CFArrayAppendValue(a1, v3);
  CFRelease(v3);
}

__CFArray *CMPhotoJPEGCreateJPEGNativeSubsamplingArray()
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  _appendIntValue(Mutable, 0);
  _appendIntValue(Mutable, 1);
  if (JPEGDeviceInterface_supportsAppleInterchangeFormats())
  {
    _appendIntValue(Mutable, 2);
    _appendIntValue(Mutable, 4);
  }
  return Mutable;
}

void _appendIntValue(__CFArray *a1, int a2)
{
  int valuePtr = a2;
  CFNumberRef v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
  CFArrayAppendValue(a1, v3);
  CFRelease(v3);
}

uint64_t CMPhotoJPEGGetEncodeTiming()
{
  return 0;
}

uint64_t _getBoolValue(const __CFDictionary *a1, const void *a2, uint64_t a3)
{
  if (!a1) {
    return a3;
  }
  CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(a1, a2);
  if (!Value) {
    return a3;
  }
  CFBooleanRef v5 = Value;
  CFTypeID v6 = CFGetTypeID(Value);
  if (v6 != CFBooleanGetTypeID()) {
    return a3;
  }
  return CFBooleanGetValue(v5);
}

float _getFloatValue(const __CFDictionary *a1, const void *a2, float a3)
{
  float v3 = a3;
  float valuePtr = a3;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (Value)
  {
    CFNumberRef v5 = Value;
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v5))
    {
      CFNumberGetValue(v5, kCFNumberFloatType, &valuePtr);
      return valuePtr;
    }
  }
  return v3;
}

uint64_t _getIntValue(const __CFDictionary *a1, const void *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  unsigned int valuePtr = a3;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (Value)
  {
    CFNumberRef v5 = Value;
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v5))
    {
      CFNumberGetValue(v5, kCFNumberIntType, &valuePtr);
      return valuePtr;
    }
  }
  return v3;
}

void _unlockAndReleasePixelBuffer(__CVBuffer *a1)
{
  if (a1)
  {
    CVPixelBufferUnlockBaseAddress(a1, 1uLL);
    CVPixelBufferRelease(a1);
  }
}

size_t _putBytes(uint64_t a1, const void *a2, size_t a3)
{
  BaseAddress = (char *)IOSurfaceGetBaseAddress(*(IOSurfaceRef *)a1);
  uint64_t v7 = *(void *)(a1 + 8);
  size_t v8 = *(void *)(a1 + 16);
  if (v7 + a3 > v8) {
    a3 = v8 - v7;
  }
  if (a3)
  {
    memcpy(&BaseAddress[v7], a2, a3);
    *(void *)(a1 + 8) += a3;
  }
  return a3;
}

uint64_t CMPhotoGetPreferredHEIFTileSizeForImageSize(unint64_t a1, unint64_t a2, int a3)
{
  BOOL v3 = a2 > 0x1800 || a1 > 0x1800;
  unint64_t v4 = a1 * a2;
  if (v3 && v4 > 0x4000000) {
    return 1024;
  }
  if (a3 == 1882468912 || a3 == 1885745712) {
    uint64_t v8 = 768;
  }
  else {
    uint64_t v8 = 512;
  }
  BOOL v9 = a2 > 0xC00 || a1 > 0xC00;
  if (v9 && v4 >= 0x1000001)
  {
    uint64_t v8 = _calculateTileLengthForImageLengthBasedOnRestrictions(a1, 0x80uLL, 0x400uLL);
    _calculateTileLengthForImageLengthBasedOnRestrictions(a2, 0x40uLL, 0x400uLL);
  }
  return v8;
}

uint64_t CMPhotoGetPreferredDNGTileSizeForImageSize(unint64_t a1, unint64_t a2, int a3)
{
  BOOL v3 = a2 > 0x1800 || a1 > 0x1800;
  unint64_t v4 = a1 * a2;
  if (!v3 || v4 < 0x4000001)
  {
    BOOL v7 = a2 > 0xC00 || a1 > 0xC00;
    if (v7 && v4 >= 0x1000001)
    {
      if (a3 == 5)
      {
        uint64_t v8 = _calculateTileLengthForImageLengthBasedOnRestrictions(a1, 8uLL, 0x800uLL);
        unint64_t v9 = a2;
        unint64_t v10 = 2048;
LABEL_22:
        _calculateTileLengthForImageLengthBasedOnRestrictions(v9, 8uLL, v10);
        return v8;
      }
    }
    else if (a3 != 5)
    {
      uint64_t v8 = _calculateTileLengthForImageLengthBasedOnRestrictions(a1, 8uLL, 0x200uLL);
      unint64_t v9 = a2;
      unint64_t v10 = 512;
      goto LABEL_22;
    }
    uint64_t v8 = _calculateTileLengthForImageLengthBasedOnRestrictions(a1, 8uLL, 0x400uLL);
    unint64_t v9 = a2;
    unint64_t v10 = 1024;
    goto LABEL_22;
  }
  if (a3 == 5) {
    return 2048;
  }
  else {
    return 1024;
  }
}

uint64_t CMPhotoSetDefaultTilingOptionForCodec(int a1, unint64_t a2, unint64_t a3, int a4, uint64_t *a5)
{
  PreferredHEIFTileSizeForImageCFNumberRef Size = a2;
  if (a1 != 1936484717)
  {
    PreferredHEIFTileSizeForImageCFNumberRef Size = CMPhotoGetPreferredHEIFTileSizeForImageSize(a2, a3, a4);
    a3 = v7;
  }
  if (a5)
  {
    *a5 = PreferredHEIFTileSizeForImageSize;
    a5[1] = a3;
  }
  return 0;
}

uint64_t CMPhotoGetTilingOption(const __CFDictionary *a1, unint64_t a2, unint64_t a3, int a4, int a5, unsigned char *a6, char *a7, unint64_t *a8, void *a9)
{
  CFNumberRef Value = CFDictionaryGetValue(a1, @"Tiling");
  int v17 = CFDictionaryGetValue(a1, @"CustomMinimumSourceAlignment");
  if (a5 == 1936484717)
  {
    PreferredHEIFTileSizeForImageCFNumberRef Size = a2;
    unint64_t v19 = a3;
    if (Value) {
      goto LABEL_3;
    }
LABEL_12:
    unint64_t v22 = 0;
    *a6 = 0;
    if (!a8) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  PreferredHEIFTileSizeForImageCFNumberRef Size = CMPhotoGetPreferredHEIFTileSizeForImageSize(a2, a3, a4);
  unint64_t v19 = v25;
  if (!Value) {
    goto LABEL_12;
  }
LABEL_3:
  CFDataRef v37 = a6;
  CFTypeID v20 = CFGetTypeID(Value);
  if (v20 == CFBooleanGetTypeID())
  {
    int v21 = CFBooleanGetValue((CFBooleanRef)Value);
    if (v21)
    {
      unint64_t v22 = 0;
      if (a3 >= 2 * v19 || a2 >= 2 * PreferredHEIFTileSizeForImageSize) {
        char v24 = v21;
      }
      else {
        char v24 = 0;
      }
    }
    else
    {
      char v24 = 0;
      unint64_t v22 = 0;
    }
LABEL_33:
    int v27 = v37;
    CFTypeID v35 = a7;
    goto LABEL_34;
  }
  CFTypeID v26 = CFGetTypeID(Value);
  if (v26 == CFDictionaryGetTypeID())
  {
    size.double width = 0.0;
    size.double height = 0.0;
    if (CGSizeMakeWithDictionaryRepresentation((CFDictionaryRef)Value, &size))
    {
      int v27 = v37;
      if (a5 != 1936484717)
      {
        CGPoint v28 = (CGPoint)xmmword_1AB9E3510;
        CGPoint point = (CGPoint)xmmword_1AB9E3510;
        PreferredHEIFTileSizeForImageCFNumberRef Size = vcvtad_u64_f64(size.width);
        unint64_t v19 = vcvtad_u64_f64(size.height);
        if (a2 == PreferredHEIFTileSizeForImageSize && a3 == v19)
        {
          char v24 = 0;
LABEL_59:
          CFTypeID v35 = a7;
          unint64_t v22 = 0;
LABEL_34:
          *int v27 = 1;
          char *v35 = v24;
          if (!a8) {
            goto LABEL_36;
          }
          goto LABEL_35;
        }
        if (v17)
        {
          CFTypeID v30 = CFGetTypeID(v17);
          if (v30 == CFDictionaryGetTypeID())
          {
            CGPointMakeWithDictionaryRepresentation((CFDictionaryRef)v17, &point);
            double x = point.x;
            double y = point.y;
          }
          else
          {
            double x = 128.0;
            double y = 64.0;
          }
          int v27 = v37;
          CGPoint v28 = (CGPoint)xmmword_1AB9E3510;
        }
        else
        {
          double x = 128.0;
          double y = 64.0;
        }
        if (x <= 0.0 || y <= 0.0)
        {
          CGPoint point = v28;
          double x = 128.0;
          double y = 64.0;
        }
        if ((a2 == PreferredHEIFTileSizeForImageSize
           || PreferredHEIFTileSizeForImageSize >= 0x80 && !(PreferredHEIFTileSizeForImageSize % (int)x))
          && (a3 == v19 || v19 >= 0x40 && !(v19 % (int)y)))
        {
          char v24 = 1;
          goto LABEL_59;
        }
      }
      return FigSignalErrorAt();
    }
    unint64_t v22 = 0;
    unsigned char *v37 = 0;
    if (!a8)
    {
LABEL_36:
      uint64_t result = 0;
      if (a9)
      {
        *a9 = 0;
        a9[1] = v22;
      }
      return result;
    }
LABEL_35:
    *a8 = PreferredHEIFTileSizeForImageSize;
    a8[1] = v19;
    goto LABEL_36;
  }
  CFTypeID v33 = CFGetTypeID(Value);
  if (v33 == CFNumberGetTypeID() && a5 == 1936484717)
  {
    LODWORD(size.width) = 0;
    if (CFNumberGetValue((CFNumberRef)Value, kCFNumberIntType, &size))
    {
      if (SLODWORD(size.width) < 2)
      {
        unint64_t v22 = 0;
        char v24 = 0;
      }
      else
      {
        if (SLODWORD(size.width) >= 4) {
          unint64_t width_low = 4;
        }
        else {
          unint64_t width_low = LODWORD(size.width);
        }
        unint64_t v19 = ((a3 + width_low - 1) / width_low + 7) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v22 = a3 % v19;
        char v24 = 1;
      }
      goto LABEL_33;
    }
    return FigSignalErrorAt();
  }
  return FigSignalErrorAt();
}

uint64_t CMPhotoGetDestinationPixelFormatFromOptions(CFDictionaryRef theDict, int a2, uint64_t a3, unsigned int *a4)
{
  int v33 = 8;
  UncompressedPixelFormatFromCompressedPixeluint64_t Format = 0;
  DefaultImageSubsamplingForEncodeFromPixeluint64_t Format = 0;
  unsigned __int8 v31 = 0;
  uint64_t result = 4294950306;
  if (a3 && a4)
  {
    CMPhotoCFDictionaryGetBooleanIfPresent(theDict, @"PreferSoftwareCodec", &v31);
    if ((int)a3 <= 1717855599)
    {
      if ((int)a3 <= 1650946095)
      {
        if ((int)a3 > 1647719527)
        {
          if (a3 == 1647719528 || a3 == 1650942776) {
            goto LABEL_43;
          }
          int v10 = 1650943796;
        }
        else
        {
          if (a3 == 825306677 || a3 == 825437747) {
            goto LABEL_43;
          }
          int v10 = 1647392369;
        }
      }
      else if ((int)a3 <= 1651847471)
      {
        if (a3 == 1650946096 || a3 == 1650946098) {
          goto LABEL_43;
        }
        int v10 = 1651519798;
      }
      else if ((int)a3 > 1651926375)
      {
        if (a3 == 1651926376) {
          goto LABEL_43;
        }
        int v10 = 1652056888;
      }
      else
      {
        if (a3 == 1651847472) {
          goto LABEL_43;
        }
        int v10 = 1651925816;
      }
      goto LABEL_42;
    }
    if ((int)a3 > 1735553071)
    {
      if ((int)a3 <= 1919378231)
      {
        if (a3 == 1735553072 || a3 == 1751410032) {
          goto LABEL_43;
        }
        int v10 = 1751411059;
      }
      else
      {
        if ((int)a3 > 1919381551)
        {
          if (a3 == 1932996149) {
            goto LABEL_43;
          }
          unsigned __int16 v11 = 28720;
        }
        else
        {
          if (a3 == 1919378232) {
            goto LABEL_43;
          }
          unsigned __int16 v11 = 26420;
        }
        int v10 = v11 | 0x72670000;
      }
    }
    else
    {
      if ((int)a3 <= 1734504495)
      {
        if (a3 == 1717855600 || a3 == 1717856627) {
          goto LABEL_43;
        }
        unsigned __int16 v9 = 25400;
      }
      else
      {
        if ((int)a3 > 1735549491)
        {
          if (a3 == 1735549492) {
            goto LABEL_43;
          }
          int v10 = 1735549752;
          goto LABEL_42;
        }
        if (a3 == 1734504496) {
          goto LABEL_43;
        }
        unsigned __int16 v9 = 29236;
      }
      int v10 = v9 | 0x67620000;
    }
LABEL_42:
    if (a3 == v10)
    {
LABEL_43:
      if (!CMPhotoCFDictionaryGetInt32IfPresent(theDict, @"BitDepth", &v33)
        || (uint64_t v12 = v33, CMPhotoGetBitDepthForPixelFormat(a3) == v12))
      {
        if (!CMPhotoCFDictionaryGetInt32IfPresent(theDict, @"Subsampling", &DefaultImageSubsamplingForEncodeFromPixelFormat)|| (int v13 = DefaultImageSubsamplingForEncodeFromPixelFormat, v13 == CMPhotoGetChromaSubsamplingFromPixelFormat(a3)))
        {
          UncompressedPixelFormatFromCompressedPixeluint64_t Format = a3;
LABEL_48:
          uint64_t result = 0;
          *a4 = UncompressedPixelFormatFromCompressedPixelFormat;
          return result;
        }
      }
      return FigSignalErrorAt();
    }
    if (a2 == 1936484717)
    {
      if (!CMPhotoCFDictionaryGetInt32IfPresent(theDict, @"BitDepth", &v33)
        || (uint64_t v14 = v33, CMPhotoGetBitDepthForPixelFormat(a3) == v14))
      {
        if (!CMPhotoCFDictionaryGetInt32IfPresent(theDict, @"Subsampling", &DefaultImageSubsamplingForEncodeFromPixelFormat)|| (int v15 = DefaultImageSubsamplingForEncodeFromPixelFormat, v15 == CMPhotoGetChromaSubsamplingFromPixelFormat(a3)))
        {
          UncompressedPixelFormatFromCompressedPixeluint64_t Format = CMPhotoGetUncompressedPixelFormatFromCompressedPixelFormat(a3);
          goto LABEL_48;
        }
      }
      return FigSignalErrorAt();
    }
    DefaultImageSubsamplingForEncodeFromPixeluint64_t Format = CMPhotoGetDefaultImageSubsamplingForEncodeFromPixelFormat(a3, a2, v31);
    if (CMPhotoCFDictionaryGetInt32IfPresent(theDict, @"Subsampling", &DefaultImageSubsamplingForEncodeFromPixelFormat)&& !CMPhotoSubsamplingIsSupportedForCodec(DefaultImageSubsamplingForEncodeFromPixelFormat, a2, v31))
    {
      return FigSignalErrorAt();
    }
    BitDepthForPixeluint64_t Format = CMPhotoGetBitDepthForPixelFormat(a3);
    int Int32IfPresent = CMPhotoCFDictionaryGetInt32IfPresent(theDict, @"BitDepth", &v33);
    int IsFullRange = CMPhotoPixelFormatIsFullRange(a3);
    if (Int32IfPresent)
    {
      int v19 = DefaultImageSubsamplingForEncodeFromPixelFormat;
      int v20 = v33;
      BOOL IsPackedYUV = CMPhotoPixelFormatIsPackedYUV(a3);
      int PixelFormatCompressionType = CMPhotoGetPixelFormatCompressionType(a3);
      int v23 = 1;
      if ((int)a3 <= 1380410944)
      {
        if (a3 == 1278226534) {
          goto LABEL_80;
        }
        int v24 = 1278226536;
      }
      else
      {
        if (a3 == 1380410945 || a3 == 1380411457) {
          goto LABEL_80;
        }
        int v24 = 1751527984;
      }
      if (a3 != v24) {
        int v23 = 0;
      }
LABEL_80:
      if (!CMPhotoGetYUVPixelFormatForParameters(v19, v20, IsFullRange, IsPackedYUV, PixelFormatCompressionType, v23, 1, (int *)&UncompressedPixelFormatFromCompressedPixelFormat)&& CMPhotoEncoderSupportsPixelFormat(UncompressedPixelFormatFromCompressedPixelFormat, a2, v31, 0))
      {
        goto LABEL_48;
      }
      return FigSignalErrorAt();
    }
    int v33 = BitDepthForPixelFormat;
    if (BitDepthForPixelFormat < 8) {
      return FigSignalErrorAt();
    }
    while (1)
    {
      int v25 = DefaultImageSubsamplingForEncodeFromPixelFormat;
      BOOL v26 = CMPhotoPixelFormatIsPackedYUV(a3);
      int v27 = CMPhotoGetPixelFormatCompressionType(a3);
      int v28 = 1;
      if ((int)a3 <= 1380410944)
      {
        if (a3 == 1278226534) {
          goto LABEL_72;
        }
        int v29 = 1278226536;
      }
      else
      {
        if (a3 == 1380410945 || a3 == 1380411457) {
          goto LABEL_72;
        }
        int v29 = 1751527984;
      }
      if (a3 != v29) {
        int v28 = 0;
      }
LABEL_72:
      if (!CMPhotoGetYUVPixelFormatForParameters(v25, BitDepthForPixelFormat, IsFullRange, v26, v27, v28, 0, (int *)&UncompressedPixelFormatFromCompressedPixelFormat)&& CMPhotoEncoderSupportsPixelFormat(UncompressedPixelFormatFromCompressedPixelFormat, a2, v31, 0))
      {
        goto LABEL_48;
      }
      int v30 = v33;
      BitDepthForPixeluint64_t Format = --v33;
      if (v30 <= 8) {
        return FigSignalErrorAt();
      }
    }
  }
  return result;
}

uint64_t _calculateTileLengthForImageLengthBasedOnRestrictions(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = (a1 >> 3) / a2 * a2;
  if (v3 > a3) {
    return a3;
  }
  unint64_t v5 = 1024;
  uint64_t v4 = 512;
  do
  {
    unint64_t v6 = v3 - a2;
    if (v3 <= a2) {
      unint64_t v7 = a2;
    }
    else {
      unint64_t v7 = v3;
    }
    while (v7 <= a3)
    {
      unint64_t v8 = (v7 + a1 / v7 * v7 - a1) % v7;
      if (v8 <= v5) {
        uint64_t v4 = v7;
      }
      if (v8 < v5) {
        unint64_t v5 = (v7 + a1 / v7 * v7 - a1) % v7;
      }
      v7 += a2;
    }
    if (v5 <= (unint64_t)(3 * v4) >> 2) {
      break;
    }
    a3 = v4;
    v3 -= a2;
  }
  while (v6 >= 0x200);
  return v4;
}

uint64_t CMPhotoDNGWriteCompressedRaw(_DWORD *a1, CFDataRef theData, __CFData *a3, int a4, int a5, int a6)
{
  unsigned __int8 BytePtr = CFDataGetBytePtr(theData);
  CFIndex Length = CFDataGetLength(theData);
  if (*(void *)BytePtr != 0x163726177
    || *((_DWORD *)BytePtr + 3) != a1[25]
    || *((_DWORD *)BytePtr + 4) != a1[26]
    || *((_DWORD *)BytePtr + 5) != a1[407]
    || *((_DWORD *)BytePtr + 6) != a1[408]
    || *((_DWORD *)BytePtr + 7) != a1[409])
  {
    return 1;
  }
  CFIndex v14 = Length;
  int v15 = BytePtr[32];
  Mutableunsigned __int8 BytePtr = CFDataGetMutableBytePtr(a3);
  int v17 = CFDataGetMutableBytePtr(a3);
  int v18 = *((_DWORD *)BytePtr + 7);
  uint64_t v19 = (8 * v18 + 36);
  if (v18)
  {
    unint64_t v20 = 0;
    unint64_t v34 = &MutableBytePtr[a4];
    uint64_t v21 = (uint64_t)&BytePtr[4 * v18 + 36];
    unint64_t v22 = &v17[a5];
    do
    {
      unsigned int v23 = *(_DWORD *)&BytePtr[4 * v20 + 36];
      unsigned int v24 = bswap32(v23);
      if (v15) {
        unsigned int v23 = v24;
      }
      int v25 = v23 - v19;
      uint64_t v26 = v19;
      int v27 = CFDataGetLength(a3);
      uint64_t v19 = v26;
      unsigned int v28 = v25 + v27;
      unsigned int v29 = bswap32(v25 + v27);
      if (a6) {
        unsigned int v28 = v29;
      }
      *(_DWORD *)&v34[4 * v20] = v28;
      unsigned int v30 = *(_DWORD *)(v21 + 4 * v20);
      unsigned int v31 = bswap32(v30);
      if (v15) {
        unsigned int v30 = v31;
      }
      unsigned int v32 = bswap32(v30);
      if (a6) {
        unsigned int v30 = v32;
      }
      *(_DWORD *)&v22[4 * v20++] = v30;
    }
    while (v20 < *((unsigned int *)BytePtr + 7));
  }
  CFDataAppendBytes(a3, &BytePtr[(int)v19], v14 - (int)v19);
  return 0;
}

uint64_t CMPhotoDNGRead32(unsigned int *a1, int a2)
{
  unsigned int v2 = bswap32(*a1);
  if (a2) {
    return v2;
  }
  else {
    return *a1;
  }
}

unsigned int *CMPhotoDNGWrite32(unsigned int *result, unsigned int a2, int a3)
{
  unsigned int v3 = bswap32(a2);
  if (!a3) {
    unsigned int v3 = a2;
  }
  _DWORD *result = v3;
  return result;
}

uint64_t CMPhotoDNGJPEGXLCompressData(size_t a1, unint64_t a2, int a3, char *a4, uint64_t a5, float a6, uint64_t a7, int a8, CGColorSpace *a9, const __CFData *a10)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  uint64_t v54 = 0;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v65 = 0u;
  memset(v66, 0, sizeof(v66));
  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  BOOL v47 = 0;
  if (a6 < 0.0 || a6 > 1.0 || (unsigned int v18 = CMPhotoDecompressionSupportedForContainerAndCodec(2, 1786276896, 0, &v47), !v47))
  {
    uint64_t v19 = FigSignalErrorAt();
    goto LABEL_82;
  }
  double v45 = a9;
  uint64_t v19 = 4294950746;
  if (a3 > 1815361649)
  {
    if (a3 == 1815491698) {
      goto LABEL_10;
    }
    int v20 = 1815361650;
  }
  else
  {
    if (a3 == 1111970369) {
      goto LABEL_10;
    }
    int v20 = 1278226488;
  }
  uint64_t v21 = 0;
  if (a3 != v20) {
    goto LABEL_86;
  }
LABEL_10:
  if (!a10)
  {
LABEL_82:
    uint64_t v21 = 0;
    goto LABEL_86;
  }
  unsigned int v44 = v18;
  if (!JxlEncoderCreate())
  {
    uint64_t v21 = 0;
    uint64_t v19 = 4294950745;
    goto LABEL_86;
  }
  if (a8 >= 2)
  {
    if (!JxlThreadParallelRunnerCreate())
    {
      uint64_t v21 = 0;
      uint64_t v19 = 4294950305;
      goto LABEL_86;
    }
    if (JxlEncoderSetParallelRunner())
    {
      uint64_t v21 = 0;
      uint64_t v19 = 4294950304;
      goto LABEL_86;
    }
  }
  if (!JxlEncoderFrameSettingsCreate())
  {
    uint64_t v21 = 0;
    goto LABEL_85;
  }
  int v22 = 0;
  int v46 = 0;
  if (a3 > 1815361649)
  {
    if (a3 == 1815361650 || (unsigned int v23 = 0, a3 == 1815491698))
    {
      unsigned int v23 = 0;
      int v46 = 3;
      int v22 = 16;
    }
  }
  else
  {
    if (a3 == 1111970369)
    {
      unsigned int v23 = 0;
      int v46 = 3;
      goto LABEL_25;
    }
    unsigned int v23 = 0;
    if (a3 == 1278226488)
    {
      int v46 = 1;
      unsigned int v23 = 1;
LABEL_25:
      int v22 = 8;
    }
  }
  JxlEncoderInitBasicInfo();
  uint64_t v21 = 0;
  uint64_t v19 = 4294950302;
  if (!HIDWORD(a1) && !HIDWORD(a2))
  {
    *(void *)((char *)&v55 + 4) = __PAIR64__(a2, a1);
    *(void *)&long long v61 = __PAIR64__(a2, a1);
    HIDWORD(v55) = v22;
    DWORD1(v5_Block_object_dispose(&STACK[0x280], 8) = v46;
    if (v45)
    {
      if (a6 == 1.0) {
        goto LABEL_32;
      }
    }
    else
    {
      *(void *)&long long v48 = v23 | 0x100000000;
      DWORD2(v49) = 9;
      LODWORD(v53) = 8;
      LODWORD(v54) = 0;
      if (a6 == 1.0)
      {
LABEL_32:
        DWORD1(v57) = 1;
        goto LABEL_34;
      }
    }
    DWORD1(v57) = 0;
LABEL_34:
    if (!JxlEncoderSetBasicInfo())
    {
      if (v45)
      {
        CFDataRef v24 = CGColorSpaceCopyICCData(v45);
        if (!v24)
        {
          uint64_t v21 = 0;
          uint64_t v19 = 4294950306;
          goto LABEL_86;
        }
        CFDataRef v25 = v24;
        CFDataGetBytePtr(v24);
        CFDataGetLength(v25);
        int v26 = JxlEncoderSetICCProfile();
        CFRelease(v25);
        if (v26) {
          goto LABEL_79;
        }
        goto LABEL_40;
      }
      if (!JxlEncoderSetColorEncoding())
      {
LABEL_40:
        if (a6 == 1.0)
        {
          if (JxlEncoderSetFrameLossless()) {
            goto LABEL_79;
          }
        }
        else if (JxlEncoderSetFrameDistance() {
               || JxlEncoderFrameSettingsSetOption()
        }
               || JxlEncoderFrameSettingsSetOption())
        {
          goto LABEL_79;
        }
        if (JxlEncoderFrameSettingsSetOption())
        {
LABEL_79:
          uint64_t v21 = 0;
          uint64_t v19 = 4294950304;
          goto LABEL_86;
        }
        uint64_t v27 = (v46 * v22);
        unint64_t v28 = v27 >> 3;
        if (!is_mul_ok(v28, a1 * a2))
        {
          uint64_t v19 = FigSignalErrorAt();
          uint64_t v21 = 0;
          goto LABEL_86;
        }
        if (a3 == 1111970369 || a3 == 1815491698 || a3 == 1278226488)
        {
          unsigned int v29 = (char *)malloc_type_malloc(v28 * a1 * a2, 0x171FE66uLL);
          uint64_t v21 = v29;
          if (!v29)
          {
            uint64_t v19 = 4294950745;
            goto LABEL_86;
          }
          if (a3 == 1111970369)
          {
            if (a2)
            {
              uint64_t v31 = 0;
              do
              {
                if (a1)
                {
                  unsigned int v32 = &a4[v31 * a5];
                  int v33 = &v29[((unint64_t)(v31 * v27) >> 3) * a1];
                  size_t v34 = a1;
                  do
                  {
                    *int v33 = *v32;
                    v33[1] = v32[1];
                    v33[2] = v32[2];
                    v33 += 3;
                    v32 += 4;
                    --v34;
                  }
                  while (v34);
                }
                ++v31;
              }
              while (v31 != a2);
            }
          }
          else if (a3 == 1815491698)
          {
            if (a2)
            {
              uint64_t v35 = 0;
              do
              {
                if (a1)
                {
                  CFDataRef v36 = &a4[v35 * a5];
                  CFDataRef v37 = &v29[((unint64_t)(v35 * v27) >> 3) * a1];
                  size_t v38 = a1;
                  do
                  {
                    *(_WORD *)CFDataRef v37 = *(_WORD *)v36;
                    *((_WORD *)v37 + 1) = *((_WORD *)v36 + 1);
                    *((_WORD *)v37 + 2) = *((_WORD *)v36 + 2);
                    v36 += 8;
                    v37 += 6;
                    --v38;
                  }
                  while (v38);
                }
                ++v35;
              }
              while (v35 != a2);
            }
          }
          else if (a2)
          {
            unint64_t v30 = 0;
            do
            {
              memcpy(&v21[(v30 >> 3) * a1], a4, a1);
              a4 += a5;
              v30 += v27;
              --a2;
            }
            while (a2);
          }
        }
        else
        {
          uint64_t v21 = 0;
          if (a1 * v28 != a5)
          {
            uint64_t v19 = v44;
            goto LABEL_86;
          }
        }
        if (!JxlEncoderAddImageFrame())
        {
          JxlEncoderCloseInput();
          CFIndex Length = CFDataGetLength(a10);
          CFIndex v40 = Length + 0x4000;
          CFIndex v41 = Length;
          while (1)
          {
            CFDataSetLength(a10, v40);
            CFDataGetMutableBytePtr(a10);
            int v42 = JxlEncoderProcessOutput();
            if (v42 != 2) {
              break;
            }
            v41 += 0x4000;
            CFIndex Length = v41 - (v40 - Length);
            v40 += 0x4000;
          }
          if (!v42)
          {
            CFDataSetLength(a10, Length);
            uint64_t v19 = v44;
            goto LABEL_86;
          }
        }
LABEL_85:
        uint64_t v19 = 4294950739;
        goto LABEL_86;
      }
    }
    uint64_t v21 = 0;
    uint64_t v19 = 4294950739;
  }
LABEL_86:
  free(v21);
  JxlThreadParallelRunnerDestroy();
  JxlEncoderDestroy();
  return v19;
}

uint64_t CMPhotoDNGCompressLinearDNG(_DWORD *a1, __CVBuffer *a2, const __CFData *a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  pthread_once(&_checkFigNoteTraceOnce_onceToken_4, (void (*)(void))_registerFigNoteTrace_4);
  if (!a2) {
    return 4294950746;
  }
  a1[409] = 0;
  int v12 = (a1[407] + a1[25] + ~((a1[25] - 1) % a1[407])) / a1[407];
  uint64_t v13 = v12;
  int v14 = (a1[408] + a1[26] + ~((a1[26] - 1) % a1[408])) / a1[408];
  uint64_t v15 = v14;
  int v16 = v14 * v12;
  if ((int)CMPhotoGetCPUCount() > 7) {
    CPUCFArrayRef Count = 8;
  }
  else {
    CPUCFArrayRef Count = CMPhotoGetCPUCount();
  }
  int v18 = a1[7];
  if (CPUCount < v18) {
    int v18 = CPUCount;
  }
  if (v18 >= v16) {
    int v18 = v16;
  }
  if (v18 <= 1) {
    uint64_t v19 = 1;
  }
  else {
    uint64_t v19 = v18;
  }
  int v20 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  uint64_t v21 = _compressAllTiles((uint64_t)a1, v13, v15, v19, a2, a3, a4, a5, a6);
  if (*v20 == 1) {
    kdebug_trace();
  }
  return v21;
}

uint64_t _compressAllTiles(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __CVBuffer *a5, const __CFData *a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t v81 = a7;
  uint64_t v82 = a8;
  CVPixelBufferRef v90 = a5;
  v111[3] = *MEMORY[0x1E4F143B8];
  uint64_t v92 = a2;
  uint64_t v93 = a4;
  uint64_t v76 = a2 * a3;
  uint64_t v77 = a3;
  if ((int)a4 >= 4) {
    uint64_t v11 = 4;
  }
  else {
    uint64_t v11 = a4;
  }
  unint64_t v12 = a4;
  size_t v13 = 8 * a4;
  MEMORY[0x1F4188790](a1);
  uint64_t v14 = (v13 + 15) & 0xFFFFFFFF0;
  uint64_t v15 = (CFTypeRef *)((char *)&v74 - v14);
  if (v13 >= 0x200) {
    size_t v16 = 512;
  }
  else {
    size_t v16 = v13;
  }
  bzero((char *)&v74 - v14, v16);
  MEMORY[0x1F4188790](v17);
  int v18 = (CFTypeRef *)((char *)&v74 - v14);
  bzero(v18, v16);
  uint64_t v87 = v11;
  size_t v19 = 8 * v11;
  MEMORY[0x1F4188790](v20);
  int v22 = (char *)&v74 - v21;
  CFTypeRef v109 = 0;
  uint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(v90);
  int v89 = PixelFormatType;
  MEMORY[0x1F4188790](PixelFormatType);
  CFDataRef v25 = (CFTypeRef *)(&v74 - 8 * v24);
  bzero(v25, v26);
  bzero(v15, v13);
  bzero(v18, v13);
  uint64_t v91 = v22;
  bzero(v22, v19);
  if ((int)v93 >= 2
    && (uint64_t v27 = CMPhotoAsyncDispatcherCreate((const __CFAllocator *)*MEMORY[0x1E4F1CF80], v12, 16, 0, (uint64_t *)&v109), v27))
  {
    uint64_t v56 = v27;
  }
  else
  {
    int v28 = *(_DWORD *)(a1 + 8);
    unint64_t v75 = v12;
    unint64_t v88 = v18;
    if (v28 == 5)
    {
      if (*(unsigned char *)(a1 + 24)) {
        BOOL v29 = 0;
      }
      else {
        BOOL v29 = *(_DWORD *)(a1 + 156) == *(_DWORD *)(a1 + 136);
      }
      int v31 = !v29 || v89 == 1751527984;
      int v94 = v31;
      if (_compressAllTiles_onceToken != -1) {
        dispatch_once(&_compressAllTiles_onceToken, &__block_literal_global_18);
      }
      uint64_t v32 = 1815361650;
    }
    else
    {
      if (*(unsigned char *)(a1 + 24)) {
        BOOL v33 = 1;
      }
      else {
        BOOL v33 = v89 == 1751527984;
      }
      int v34 = v33;
      int v94 = v34;
      if (v28 == 2) {
        uint64_t v32 = 1111970369;
      }
      else {
        uint64_t v32 = 1815491698;
      }
    }
    if ((int)v93 >= 1)
    {
      unint64_t v35 = v75;
      CFDataRef v36 = (CVPixelBufferRef *)v15;
      do
      {
        if (v94)
        {
          uint64_t PixelBuffer = CMPhotoSurfacePoolCreatePixelBuffer(@"SurfacePoolOneShot", v32, *(int *)(a1 + 1628), *(int *)(a1 + 1632), 1, 0, 0, 0, 0, 0, v36);
          if (PixelBuffer)
          {
            uint64_t v56 = PixelBuffer;
            int v94 = 1;
            goto LABEL_76;
          }
        }
        ++v36;
        --v35;
      }
      while (v35);
      if (v94)
      {
        if ((int)v87 <= 1) {
          uint64_t v38 = 1;
        }
        else {
          uint64_t v38 = v87;
        }
        CFDataRef v39 = v91;
        do
        {
          id v40 = objc_alloc(getCIContextClass());
          v110[0] = getkCIContextWorkingColorSpace();
          v111[0] = [MEMORY[0x1E4F1CA98] null];
          v110[1] = getkCIContextCacheIntermediates();
          v111[1] = MEMORY[0x1E4F1CC28];
          v110[2] = getkCIContextName();
          v111[2] = @"linearizationTable and shift signal encode";
          *v39++ = objc_msgSend(v40, "initWithOptions:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v111, v110, 3));
          --v38;
        }
        while (v38);
      }
    }
    if (v77)
    {
      uint64_t v41 = 0;
      int v84 = a9;
      BOOL v83 = v102;
      uint64_t v78 = (int)v82;
      uint64_t v79 = (int)v81;
      unint64_t v80 = v96;
      do
      {
        if (v92)
        {
          uint64_t v42 = 0;
          uint64_t v86 = MEMORY[0x1E4F143A8];
          int v85 = ___compressAllTiles_block_invoke_2;
          do
          {
            unint64_t v43 = *(int *)(a1 + 1628);
            uint64_t v44 = v42 * v43 + *(void *)(a1 + 112);
            unint64_t v45 = *(int *)(a1 + 1632);
            uint64_t v46 = v41 * v45 + *(void *)(a1 + 120);
            int v47 = *(_DWORD *)(a1 + 1636);
            uint64_t v48 = v47;
            *(_DWORD *)(a1 + 1636) = v47 + 1;
            long long v49 = &v25[8 * (uint64_t)v47];
            unint64_t v50 = *(int *)(a1 + 104) - v41 * v45;
            unint64_t v51 = *(int *)(a1 + 100) - v42 * v43;
            BOOL v53 = v50 < v45 || v51 < v43;
            if (v53) {
              uint64_t v54 = 0;
            }
            else {
              uint64_t v54 = v44;
            }
            if (v53) {
              uint64_t v55 = 0;
            }
            else {
              uint64_t v55 = v46;
            }
            v101[0] = v86;
            v101[1] = 3221225472;
            v102[0] = v85;
            v102[1] = &__block_descriptor_170_e8_v16__0Q8l;
            BOOL v107 = v53;
            v102[2] = v88;
            v102[3] = &v25[8 * (uint64_t)v47];
            int v103 = v89;
            int v104 = 0;
            v102[4] = a1;
            v102[5] = v90;
            v102[6] = v44;
            v102[7] = v46;
            v102[8] = v50;
            v102[9] = v51;
            char v108 = v94;
            v102[10] = a6;
            v102[11] = v91;
            int v105 = v93;
            int v106 = v87;
            v102[12] = v15;
            v102[13] = v54;
            v102[14] = v55;
            v102[15] = v43;
            v102[16] = v45;
            if ((int)v93 < 2)
            {
              unsigned int Length = CFDataGetLength(a6);
              ((void (*)(void *, void))v102[0])(v101, 0);
              if (*((_DWORD *)v49 + 2)) {
                goto LABEL_75;
              }
              int v58 = CFDataGetLength(a6);
              Mutableunsigned __int8 BytePtr = CFDataGetMutableBytePtr(a6);
              unsigned int v60 = bswap32(Length);
              BOOL v61 = v84 == 0;
              if (!v84) {
                unsigned int v60 = Length;
              }
              *(_DWORD *)&MutableBytePtr[4 * v48 + v79] = v60;
              unsigned int v62 = v58 - Length;
              unsigned int v63 = bswap32(v58 - Length);
              if (!v61) {
                unsigned int v62 = v63;
              }
              *(_DWORD *)&MutableBytePtr[4 * v48 + v78] = v62;
            }
            else
            {
              v95[0] = MEMORY[0x1E4F143A8];
              v95[1] = 3221225472;
              v96[0] = ___compressAllTiles_block_invoke_3;
              v96[1] = &__block_descriptor_61_e5_v8__0l;
              v96[2] = &v25[8 * (uint64_t)v47];
              v96[3] = a6;
              int v97 = v81;
              int v98 = v47;
              char v100 = v84;
              int v99 = v82;
              if (*MEMORY[0x1E4F1EBA8] == 1) {
                kdebug_trace();
              }
              uint64_t v56 = CMPhotoAsyncDispatcherDispatchBlockWithOrderedCompletion((uint64_t)v109, (uint64_t)v101, (uint64_t)v95);
              if (*MEMORY[0x1E4F1EBA8] == 1) {
                kdebug_trace();
              }
              if (v56) {
                goto LABEL_76;
              }
            }
            ++v42;
          }
          while (v92 != v42);
        }
        ++v41;
      }
      while (v41 != v77);
    }
    if ((int)v93 < 2) {
LABEL_75:
    }
      uint64_t v56 = 0;
    else {
      uint64_t v56 = (uint64_t)CMPhotoAsyncDispatcherWaitForCompletion((uint64_t)v109);
    }
LABEL_76:
    unint64_t v12 = v75;
    int v18 = v88;
  }
  uint64_t v64 = v76;
  long long v65 = (void **)v91;
  if (v76)
  {
    uint64_t v66 = (unsigned int *)(v25 + 1);
    uint64_t v67 = v76;
    while (1)
    {
      unsigned int v69 = *v66;
      v66 += 16;
      uint64_t v68 = v69;
      if (v69) {
        break;
      }
      if (!--v67) {
        goto LABEL_81;
      }
    }
    uint64_t v56 = v68;
  }
  else
  {
LABEL_81:
    if ((_BYTE)v94 && (int)v93 >= 1)
    {
      if ((int)v87 <= 1) {
        uint64_t v70 = 1;
      }
      else {
        uint64_t v70 = v87;
      }
      do
      {
        double v71 = *v65++;

        --v70;
      }
      while (v70);
    }
  }
  if (v109) {
    CFRelease(v109);
  }
  for (; v64; --v64)
  {
    if (*v25)
    {
      CFRelease(*v25);
      *CFDataRef v25 = 0;
    }
    v25 += 8;
  }
  if ((int)v93 >= 1)
  {
    unint64_t v72 = v12;
    do
    {
      if (*v15) {
        CFRelease(*v15);
      }
      ++v15;
      --v72;
    }
    while (v72);
    if ((int)v93 >= 1)
    {
      do
      {
        if (*v18) {
          CFRelease(*v18);
        }
        ++v18;
        --v12;
      }
      while (v12);
    }
  }
  return v56;
}

uint64_t CMPhotoDNGCompressRaw(_DWORD *a1, __CVBuffer *a2, const __CFData *a3, int a4, int a5, int a6)
{
  CVPixelBufferRef pixelBufferOut = 0;
  *(_OWORD *)CFIndex length = 0u;
  long long v140 = 0u;
  long long v142 = 0u;
  long long v141 = 0u;
  long long v137 = 0u;
  long long v138 = 0u;
  long long v136 = 0u;
  LODWORD(length[1]) = 2 * a1[407] * a1[408];
  length[0] = (CFIndex)malloc_type_malloc(SLODWORD(length[1]), 0x16D87479uLL);
  int v126 = a1[25];
  int v128 = a1[26];
  DWORD1(v142) = v126;
  DWORD1(v140) = v128;
  *((void *)&v140 + 1) = 0x40000000ALL;
  uint64_t v133 = a1;
  DWORD2(v13_Block_object_dispose(&STACK[0x280], 8) = a1[405];
  long long v135 = malloc_type_malloc(0x7FFCuLL, 0x100004052888210uLL);
  unint64_t v131 = (char *)v135 + 16380;
  for (uint64_t i = -4095; i != 4096; ++i)
  {
    if ((int)i >= 0) {
      unsigned int v9 = i;
    }
    else {
      unsigned int v9 = -(int)i;
    }
    if (i)
    {
      int v10 = 0;
      unsigned int v11 = v9;
      do
      {
        ++v10;
        BOOL v36 = v9 > 1;
        v9 >>= 1;
      }
      while (v36);
    }
    else
    {
      unsigned int v11 = v9;
      int v10 = 0;
    }
    uint64_t v12 = 0;
    int v13 = 0;
    LODWORD(v14) = 0;
    int v15 = 0;
    do
    {
      if (v12 >= (int)v14)
      {
        size_t v16 = &g_huff_n[v15];
        do
        {
          unsigned int v17 = *v16++;
          uint64_t v14 = v17 + (uint64_t)(int)v14;
          v13 *= 2;
          ++v15;
        }
        while (v12 >= v14);
      }
      if (v15 >= 16) {
        printf("ERROR NO HUFFCODE %d %d\n", i, v10);
      }
      if (v10 == g_huff_v[v12]) {
        break;
      }
      ++v12;
      ++v13;
    }
    while (v12 != 16);
    int v18 = (v13 << v10) + ~((-1 << v10) | v11);
    if (i >= 0) {
      int v18 = ((v13 << v10) + i) & 0xFFFFFF;
    }
    *(_DWORD *)&v131[4 * i] = (v15 + v10) | (v18 << 8);
  }
  CVPixelBufferLockBaseAddress(a2, 1uLL);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(a2);
  unsigned int BytesPerRow = CVPixelBufferGetBytesPerRow(a2);
  LODWORD(v20) = 2 * v126;
  if (BytesPerRow) {
    uint64_t v20 = BytesPerRow;
  }
  else {
    uint64_t v20 = v20;
  }
  uint64_t v132 = v20;
  int pixelFormatType = CVPixelBufferGetPixelFormatType(a2);
  unsigned int BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(pixelFormatType);
  uint64_t v21 = v133;
  int v22 = v133[407];
  unsigned int v23 = v133[408];
  v133[409] = 0;
  unsigned int v24 = v128 - 1 + v23;
  int v25 = a6;
  if (!__CFADD__(v128 - 1, v23))
  {
    int v129 = 0;
    unsigned int v26 = v24 / v23;
    CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v122 = a4;
    if (v26 <= 1) {
      unsigned int v26 = 1;
    }
    unsigned int v117 = v26;
    int v127 = (v126 + v22 - 1) / v22;
    while (!v127)
    {
LABEL_103:
      if (++v129 == v117) {
        goto LABEL_104;
      }
    }
    int v27 = 0;
    while (1)
    {
      int v28 = v21[407];
      uint64_t v29 = *((void *)v21 + 15);
      uint64_t v30 = *((void *)v21 + 14) + v28 * v27;
      int v31 = v21[408];
      uint64_t v32 = v29 + v31 * v129;
      int v33 = DWORD1(v140) - v31 * v129;
      int v34 = DWORD1(v142) - v28 * v27;
      if (pixelFormatType > 1735549491)
      {
        if (pixelFormatType == 1919379252) {
          goto LABEL_36;
        }
        int v35 = 1735549492;
      }
      else
      {
        if (pixelFormatType == 1650943796) {
          goto LABEL_36;
        }
        int v35 = 1734505012;
      }
      if (pixelFormatType != v35)
      {
        if (v34 < v28) {
          int v28 = DWORD1(v142) - v28 * v27;
        }
        HIDWORD(v137) = v28;
        if (v33 >= v31) {
          int v48 = v31;
        }
        else {
          int v48 = DWORD1(v140) - v31 * v129;
        }
        LODWORD(v142) = v48;
        *((void *)&v141 + 1) = &BaseAddress[2 * v30 + v32 * DWORD2(v142)];
        goto LABEL_63;
      }
LABEL_36:
      BOOL v36 = v33 < v31 || v34 < v28;
      if (v36)
      {
        CFDataRef v37 = pixelBufferOut;
        if (!pixelBufferOut)
        {
          if (CVPixelBufferCreate(allocator, v28, v31, pixelFormatType, 0, &pixelBufferOut)) {
            goto LABEL_105;
          }
          CFDataRef v37 = pixelBufferOut;
        }
        unsigned int v125 = CVPixelBufferGetBytesPerRow(v37);
        CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
        uint64_t v38 = (char *)CVPixelBufferGetBaseAddress(pixelBufferOut);
        CFDataRef v39 = v133;
        if (v34 >= v133[407]) {
          int v40 = v133[407];
        }
        else {
          int v40 = v34;
        }
        if ((int)v133[408] < 1)
        {
LABEL_55:
          int v47 = v39;
          CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
          *((void *)&v141 + 1) = v38;
          DWORD2(v142) = v125;
          int v28 = v47[407];
          int v31 = v47[408];
          int v25 = a6;
          goto LABEL_56;
        }
        uint64_t v41 = 0;
        uint64_t v42 = v30;
        int v43 = v125 / BytesPerPixelForPixelFormat;
        uint64_t v44 = &BaseAddress[BytesPerPixelForPixelFormat * v42 + v132 * (v29 + v129 * v31)];
        while (2)
        {
          if (v41 >= v33)
          {
            unsigned int v45 = v39[407] * BytesPerPixelForPixelFormat;
            int v46 = v43 * v41;
LABEL_53:
            bzero(&v38[2 * v46], v45);
          }
          else
          {
            unsigned int v45 = (v39[407] - v40) * BytesPerPixelForPixelFormat;
            memcpy(&v38[2 * (v43 * v41)], v44, v40 * BytesPerPixelForPixelFormat);
            if (v45)
            {
              int v46 = v43 * v41 + v40;
              goto LABEL_53;
            }
          }
          ++v41;
          CFDataRef v39 = v133;
          v44 += v132;
          if (v41 >= (int)v133[408]) {
            goto LABEL_55;
          }
          continue;
        }
      }
      DWORD2(v142) = v132;
      *((void *)&v141 + 1) = &BaseAddress[v32 * v132 + v30 * BytesPerPixelForPixelFormat];
LABEL_56:
      HIDWORD(v137) = v28;
      LODWORD(v142) = v31;
LABEL_63:
      *(void *)&long long v137 = 0;
      HIDWORD(length[1]) = 0;
      DWORD2(v137) = 64;
      unsigned int v49 = CFDataGetLength(a3);
      if (v133[2] == 1)
      {
        int v50 = v142;
        if ((int)v142 >= 1)
        {
          int v51 = 0;
          int v52 = HIDWORD(v137);
          do
          {
            if (v52 >= 1)
            {
              uint64_t v53 = 0;
              uint64_t v54 = *((void *)&v141 + 1) + (DWORD2(v142) * v51);
              do
              {
                *(_WORD *)long long bytes = 0;
                *(_WORD *)long long bytes = __rev16((*(unsigned __int16 *)(v54 + 2 * v53) >> SBYTE8(v138)) & 0xFFF);
                CFDataAppendBytes(a3, bytes, 2);
                int v52 = HIDWORD(v137);
                ++v53;
              }
              while ((int)v53 < SHIDWORD(v137));
              int v50 = v142;
            }
            ++v51;
          }
          while (v51 < v50);
        }
      }
      else
      {
        int v55 = v27;
        char v56 = BYTE8(v138);
        uint64_t v57 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(unsigned char *)(length[0] + v57) = -1;
        uint64_t v58 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(unsigned char *)(length[0] + v5_Block_object_dispose(&STACK[0x280], 8) = -40;
        uint64_t v59 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(unsigned char *)(length[0] + v59) = -1;
        uint64_t v60 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(unsigned char *)(length[0] + v60) = -61;
        uint64_t v61 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(unsigned char *)(length[0] + v61) = 0;
        uint64_t v62 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(unsigned char *)(length[0] + v62) = 14;
        uint64_t v63 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(unsigned char *)(length[0] + v63) = 12;
        char v64 = v142;
        uint64_t v65 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(unsigned char *)(length[0] + v65) = BYTE1(v142);
        uint64_t v66 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(unsigned char *)(length[0] + v66) = v64;
        int v67 = SHIDWORD(v137) / 2;
        uint64_t v68 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(unsigned char *)(length[0] + v6_Block_object_dispose(&STACK[0x280], 8) = (unsigned __int16)(SHIDWORD(v137) / 2) >> 8;
        uint64_t v69 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(unsigned char *)(length[0] + v69) = v67;
        uint64_t v70 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(unsigned char *)(length[0] + v70) = 2;
        uint64_t v71 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(unsigned char *)(length[0] + v71) = 0;
        uint64_t v72 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(unsigned char *)(length[0] + v72) = 17;
        uint64_t v73 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(unsigned char *)(length[0] + v73) = 0;
        uint64_t v74 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(unsigned char *)(length[0] + v74) = 1;
        uint64_t v75 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(unsigned char *)(length[0] + v75) = 17;
        uint64_t v76 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(unsigned char *)(length[0] + v76) = 0;
        _encodeWriteHuffTable((uint64_t)&v135, 0);
        _encodeWriteHuffTable((uint64_t)&v135, 1);
        uint64_t v77 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(unsigned char *)(length[0] + v77) = -1;
        uint64_t v78 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(unsigned char *)(length[0] + v7_Block_object_dispose(&STACK[0x280], 8) = -38;
        uint64_t v79 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(unsigned char *)(length[0] + v79) = 0;
        uint64_t v80 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(unsigned char *)(length[0] + v80) = 10;
        uint64_t v81 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(unsigned char *)(length[0] + v81) = 2;
        uint64_t v82 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(unsigned char *)(length[0] + v82) = 0;
        uint64_t v83 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(unsigned char *)(length[0] + v83) = 0;
        uint64_t v84 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(unsigned char *)(length[0] + v84) = 1;
        uint64_t v85 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(unsigned char *)(length[0] + v85) = 16;
        uint64_t v86 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(unsigned char *)(length[0] + v86) = 1;
        uint64_t v87 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(unsigned char *)(length[0] + v87) = 0;
        uint64_t v88 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(unsigned char *)(length[0] + v8_Block_object_dispose(&STACK[0x280], 8) = 0;
        CFDataAppendBytes(a3, (const UInt8 *)length[0], SHIDWORD(length[1]));
        HIDWORD(length[1]) = 0;
        if ((int)v142 >= 1)
        {
          int v90 = 0;
          int v91 = 0;
          do
          {
            uint64_t v92 = (DWORD2(v142) * v91);
            uint64_t v93 = *((void *)&v141 + 1) + v92;
            if (v91)
            {
              uint64_t v94 = DWORD2(v142) >> 1;
              int v95 = (*(unsigned __int16 *)(v93 - 2 * v94) >> v56) & 0xFFF;
              int v96 = (*(unsigned __int16 *)(v93 + 2 * (1 - v94)) >> v56) & 0xFFF;
            }
            else
            {
              int v96 = 2048;
              int v95 = 2048;
            }
            *(void *)&long long v138 = __PAIR64__(v96, v95);
            int v97 = HIDWORD(v137);
            if ((BYTE12(v137) & 7) == 0 && DWORD2(v138) == 2)
            {
              *(void *)&long long v136 = *((void *)&v141 + 1) + v92;
              *((void *)&v136 + 1) = length[0] + v90;
              CMPhotoDNGCompressLineASM((uint64_t)&v135, v89);
              int v97 = HIDWORD(v137);
              int v90 = DWORD2(v136) - LODWORD(length[0]);
              HIDWORD(length[1]) = DWORD2(v136) - LODWORD(length[0]);
            }
            else if (SHIDWORD(v137) >= 1)
            {
              uint64_t v99 = 0;
              uint64_t v100 = *((void *)&v141 + 1) + v92;
              do
              {
                CFIndex v101 = (unsigned __int16 *)(v100 + 2 * v99);
                int v102 = v138;
                LODWORD(v13_Block_object_dispose(&STACK[0x280], 8) = (*v101 >> v56) & 0xFFF;
                _encodeWriteSymbol((uint64_t)&v135, *((_DWORD *)v135 + (int)v138 - v102 + 4095));
                int v103 = DWORD1(v138);
                DWORD1(v13_Block_object_dispose(&STACK[0x280], 8) = (v101[1] >> v56) & 0xFFF;
                _encodeWriteSymbol((uint64_t)&v135, *((_DWORD *)v135 + DWORD1(v138) - v103 + 4095));
                int v97 = HIDWORD(v137);
                v99 += 2;
              }
              while ((int)v99 < SHIDWORD(v137));
              int v90 = HIDWORD(length[1]);
            }
            if (LODWORD(length[1]) - v90 < 4 * v97)
            {
              CFDataAppendBytes(a3, (const UInt8 *)length[0], v90);
              int v90 = 0;
              HIDWORD(length[1]) = 0;
            }
            ++v91;
          }
          while (v91 < (int)v142);
        }
        while ((BYTE8(v137) & 7) != 0)
          _encodeWriteSymbol((uint64_t)&v135, 0x101u);
        int v27 = v55;
        if (SDWORD2(v137) <= 63)
        {
          unint64_t v104 = v137;
          do
          {
            unint64_t v105 = HIBYTE(v104);
            uint64_t v106 = SHIDWORD(length[1]);
            ++HIDWORD(length[1]);
            *(unsigned char *)(length[0] + v106) = v105;
            if (v105 == 255)
            {
              uint64_t v107 = SHIDWORD(length[1]);
              ++HIDWORD(length[1]);
              *(unsigned char *)(length[0] + v107) = 0;
            }
            unint64_t v104 = (void)v137 << 8;
            *(void *)&long long v137 = (void)v137 << 8;
            int v108 = DWORD2(v137);
            DWORD2(v137) += 8;
          }
          while (v108 < 56);
        }
        uint64_t v109 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(unsigned char *)(length[0] + v109) = -1;
        uint64_t v110 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(unsigned char *)(length[0] + v110) = -39;
        CFDataAppendBytes(a3, (const UInt8 *)length[0], SHIDWORD(length[1]));
        HIDWORD(length[1]) = 0;
      }
      int v111 = CFDataGetLength(a3);
      Mutableunsigned __int8 BytePtr = CFDataGetMutableBytePtr(a3);
      uint64_t v21 = v133;
      unsigned int v113 = bswap32(v49);
      if (!v25) {
        unsigned int v113 = v49;
      }
      *(_DWORD *)&MutableBytePtr[4 * v133[409] + v122] = v113;
      unsigned int v114 = bswap32(v111 - v49);
      if (!v25) {
        unsigned int v114 = v111 - v49;
      }
      *(_DWORD *)&MutableBytePtr[4 * v133[409]++ + a5] = v114;
      if (++v27 == v127) {
        goto LABEL_103;
      }
    }
  }
LABEL_104:
  CVPixelBufferUnlockBaseAddress(a2, 1uLL);
LABEL_105:
  free(v135);
  free((void *)length[0]);
  if (pixelBufferOut) {
    CFRelease(pixelBufferOut);
  }
  return 0;
}

uint64_t CMPhotoDNGRead8(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t CMPhotoDNGRead16(unsigned __int16 *a1, int a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = bswap32(v2) >> 16;
  if (a2) {
    LOWORD(v2) = v3;
  }
  return (unsigned __int16)v2;
}

double CMPhotoDNGReadDouble(unint64_t *a1, int a2)
{
  double result = *(double *)a1;
  double v3 = COERCE_DOUBLE(bswap64(*a1));
  if (a2) {
    return v3;
  }
  return result;
}

float CMPhotoDNGReadFloat(unsigned int *a1, int a2)
{
  float result = *(float *)a1;
  float v3 = COERCE_FLOAT(bswap32(*a1));
  if (a2) {
    return v3;
  }
  return result;
}

uint64_t CMPhotoDNGReadRational(unsigned int *a1, int a2)
{
  LODWORD(v2) = *a1;
  LODWORD(v3) = a1[1];
  unsigned int v4 = bswap32(*a1);
  unsigned int v5 = bswap32(v3);
  if (a2) {
    uint64_t v3 = v5;
  }
  else {
    uint64_t v3 = v3;
  }
  if (a2) {
    uint64_t v2 = v4;
  }
  else {
    uint64_t v2 = v2;
  }
  return v2 | (v3 << 32);
}

_WORD *CMPhotoDNGWrite16(_WORD *result, __int16 a2, int a3)
{
  __int16 v3 = __rev16(a2);
  if (!a3) {
    __int16 v3 = a2;
  }
  _DWORD *result = v3;
  return result;
}

unint64_t *CMPhotoDNGWrite64(unint64_t *result, unint64_t a2, int a3)
{
  unint64_t v3 = bswap64(a2);
  if (!a3) {
    unint64_t v3 = a2;
  }
  _DWORD *result = v3;
  return result;
}

double *CMPhotoDNGWriteDouble(double *result, int a2, double a3)
{
  double v3 = a3;
  unint64_t v4 = bswap64(*(unint64_t *)&a3);
  if (a2) {
    double v3 = *(double *)&v4;
  }
  _DWORD *result = v3;
  return result;
}

uint64_t CMPhotoDNGDecompressRawTile(uint64_t a1, int a2, int a3, int a4, int a5, uint64_t a6, char a7)
{
  long long v65 = 0u;
  long long v66 = 0u;
  uint64_t v70 = 0;
  *(_OWORD *)uint64_t v69 = 0u;
  memset(v68, 0, sizeof(v68));
  memset(v67, 0, sizeof(v67));
  *(void *)&long long v66 = __PAIR64__(*(unsigned __int8 *)(a1 + 6), __rev16(*(unsigned __int16 *)(a1 + 9)));
  unsigned int v11 = __rev16(*(unsigned __int16 *)(a1 + 7));
  char v64 = (unsigned __int8 *)(a1 + 20);
  HIDWORD(v65) = v11;
  LODWORD(v65) = a2 - 20;
  _decodeReadHuffTable((uint64_t)&v64);
  int v12 = DWORD2(v65);
  if (DWORD2(v65) == 8)
  {
    int v12 = 0;
    DWORD2(v65) = 0;
    int v13 = v65;
    int v14 = BYTE4(v65) << 8;
    int v15 = v64;
  }
  else
  {
    int v15 = v64 + 1;
    int v13 = v65 - 1;
    int v14 = *v64 << 8;
  }
  int v16 = *v15;
  char v64 = v15 + 1;
  int v17 = v13 - 1;
  LODWORD(v65) = v17;
  if ((v14 | v16) == 0xFFC4)
  {
    _decodeReadHuffTable((uint64_t)&v64);
    int v12 = DWORD2(v65);
    if (DWORD2(v65) == 8)
    {
      int v12 = 0;
      DWORD2(v65) = 0;
      int v15 = v64;
      int v18 = v65;
    }
    else
    {
      int v15 = v64 + 1;
      int v18 = v65 - 1;
    }
    int v17 = v18 - 1;
  }
  LODWORD(v65) = v17 - 4;
  char v64 = v15 + 6;
  DWORD2(v66) = v15[5] >> 4;
  LODWORD(v65) = v17 - 6;
  char v64 = v15 + 8;
  int v19 = v15[7] >> 4;
  char v64 = v15 + 11;
  HIDWORD(v66) = v19;
  LODWORD(v65) = v17 - 10;
  uint64_t result = 4294950743;
  if ((v66 & 1) == 0 && 2 * v66 == a3 && HIDWORD(v65) == a4)
  {
    int v61 = v12;
    int v60 = a5;
    char v21 = 0;
    uint64_t v22 = 0;
    char v23 = 1;
    do
    {
      int v24 = *((_DWORD *)&v66 + v22 + 2);
      if ((v21 & 1) != 0 && v24 == DWORD2(v66)) {
        break;
      }
      char v63 = v23;
      uint64_t v25 = v24;
      unsigned int v26 = (char *)malloc_type_malloc(0x400uLL, 0x100004052888210uLL);
      v69[v25 + 1] = v26;
      if (!v26) {
        return 4294950745;
      }
      uint64_t v27 = 0;
      LODWORD(v2_Block_object_dispose(&STACK[0x280], 8) = 0;
      LODWORD(v29) = 0;
      LODWORD(v30) = 0;
      int v31 = &v67[v25];
      uint64_t v32 = (char *)v68 + 17 * v25;
      LODWORD(v33) = 256;
      do
      {
        uint64_t v33 = v33 >> 1;
        unsigned int v34 = *((unsigned __int8 *)v31 + v27++);
        if (v34)
        {
          unsigned int v35 = 0;
          uint64_t v28 = (int)v28;
          uint64_t v30 = (int)v30;
          do
          {
            int v36 = v32[v30];
            v28 += v33;
            unsigned int v37 = v36 + v27;
            if ((v36 + v27) >= 9) {
              char v38 = v27;
            }
            else {
              char v38 = v36 + v27;
            }
            if (v37 < 9) {
              char v39 = 1;
            }
            else {
              char v39 = 2;
            }
            if (v28 > (int)v29)
            {
              int v40 = 0;
              uint64_t v41 = (int)v29;
              if (v37 >= 9) {
                __int16 v42 = v32[v30];
              }
              else {
                __int16 v42 = 0;
              }
              int v43 = 1 << v36;
              if (1 << v36 >= 0) {
                int v44 = 1 << v36;
              }
              else {
                int v44 = v43 + 1;
              }
              int v45 = v44 >> 1;
              int v46 = &v26[4 * (int)v29 + 2];
              do
              {
                if (v40 < v45) {
                  __int16 v47 = v40 - v43 + 1;
                }
                else {
                  __int16 v47 = v40;
                }
                if (v37 < 9 && (v29 & ~(-1 << (8 - v37))) == 0) {
                  __int16 v42 = v47;
                }
                v40 += v37 < 9 && (v29 & ~(-1 << (8 - v37))) == 0;
                *(v46 - 2) = v38;
                *(v46 - 1) = v39;
                *(_WORD *)int v46 = v42;
                v46 += 4;
                ++v41;
                LODWORD(v29) = v29 + 1;
              }
              while (v41 < v28);
            }
            ++v35;
            ++v30;
          }
          while (v35 < v34);
        }
      }
      while (v27 != 8);
      if ((int)v29 <= 255)
      {
        uint64_t v29 = (int)v29;
        do
          *(_DWORD *)&v26[4 * v29++] = 0;
        while (v29 != 256);
      }
      char v23 = 0;
      char v21 = 1;
      uint64_t v22 = 1;
    }
    while ((v63 & 1) != 0);
    int v48 = HIDWORD(v65);
    int v49 = v61;
    if (SHIDWORD(v65) >= 1)
    {
      uint64_t v50 = 0;
      uint64_t v51 = a6;
      do
      {
        if (v50)
        {
          int v52 = (unsigned __int16 *)(a6 + 2 * (v50 - 1) * v60);
          int v53 = *v52 >> a7;
          int v54 = v52[1] >> a7;
        }
        else
        {
          int v53 = 1 << (BYTE4(v66) - 1);
          int v54 = v53;
        }
        if (a3 >= 1)
        {
          uint64_t v55 = 0;
          do
          {
            v53 += _readHuffFast((uint64_t)&v64, 0);
            char v56 = (_WORD *)(v51 + 2 * v55);
            *char v56 = v53 << a7;
            v54 += _readHuffFast((uint64_t)&v64, 1u);
            v55 += 2;
            v56[1] = v54 << a7;
          }
          while ((int)v55 < a3);
          int v48 = HIDWORD(v65);
        }
        ++v50;
        v51 += 2 * v60;
      }
      while (v50 < v48);
      int v49 = DWORD2(v65);
    }
    if ((v49 & 0xFFFFFFF8) == 8)
    {
      int v57 = BYTE4(v65) << 8;
      uint64_t v58 = v64;
    }
    else
    {
      uint64_t v58 = v64 + 1;
      int v57 = *v64 << 8;
    }
    if ((v57 | *v58) == 0xFFD9)
    {
      uint64_t v59 = v69[1];
      if (v69[1]) {
        free(v69[1]);
      }
      uint64_t result = 0;
      if (v70)
      {
        if (v70 != v59)
        {
          free(v70);
          return 0;
        }
      }
    }
    else
    {
      return 4294950743;
    }
  }
  return result;
}

uint64_t _readHuffFast(uint64_t a1, unsigned int a2)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (v3 >= 8)
  {
    int v8 = *(_DWORD *)(a1 + 12);
    int v9 = *(_DWORD *)(a1 + 16);
    LOBYTE(v3) = v3 - 8;
  }
  else
  {
    unint64_t v4 = *(unsigned __int8 **)a1;
    unsigned int v5 = (unsigned char *)(*(void *)a1 + 1);
    *(void *)a1 = v5;
    int v6 = *v4;
    int v7 = *(_DWORD *)(a1 + 8);
    int v8 = v6 | (*(_DWORD *)(a1 + 12) << 8);
    *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x280], 8) = v7 - 1;
    *(_DWORD *)(a1 + 12) = v8;
    if (v6 == 255 && !*v5)
    {
      *(void *)a1 = v4 + 2;
      *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x280], 8) = v7 - 2;
    }
    int v9 = v3 + 8;
    *(_DWORD *)(a1 + 16) = v3 + 8;
  }
  uint64_t v10 = *(int *)(a1 + 4 * a2 + 32);
  unsigned int v11 = (unsigned __int8 *)(*(void *)(a1 + 8 * v10 + 112) + 4 * (v8 >> v3));
  int v12 = *v11;
  int v13 = v11[1];
  uint64_t result = *((__int16 *)v11 + 1);
  if (v13 == 2)
  {
    int v15 = v9 - v12;
    *(_DWORD *)(a1 + 16) = v15;
    if (v15 >= (int)result)
    {
      int v19 = v8;
    }
    else
    {
      int v16 = *(unsigned __int8 **)a1;
      int v17 = *(_DWORD *)(a1 + 8);
      do
      {
        *(_DWORD *)(a1 + 12) = v8 << 8;
        *(void *)a1 = v16 + 1;
        int v18 = *v16;
        int v19 = v18 | (v8 << 8);
        *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x280], 8) = v17 - 1;
        *(_DWORD *)(a1 + 12) = v19;
        if (v18 == 255)
        {
          v16 += 2;
          *(void *)a1 = v16;
          v17 -= 2;
          *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x280], 8) = v17;
        }
        else
        {
          --v17;
          ++v16;
        }
        v15 += 8;
        *(_DWORD *)(a1 + 16) = v15;
        int v8 = v18 | (v8 << 8);
      }
      while (v15 < (int)result);
    }
    *(_DWORD *)(a1 + 16) = v15 - result;
    int v33 = v19 >> (v15 - result);
    int v34 = -1 << result;
    char v35 = result - 1;
    uint64_t result = v33 & ~(-1 << result);
    if (!(result >> v35)) {
      return (v33 | v34) + 1;
    }
  }
  else if (v13 == 1)
  {
    *(_DWORD *)(a1 + 16) = v9 - v12;
  }
  else
  {
    uint64_t v20 = 0;
    int v21 = 0;
    int v22 = 0;
    int v23 = 0;
    uint64_t v24 = a1 + 16 * v10 + 40;
    while (1)
    {
      int v21 = _decodeReadBit(a1) | (2 * v21);
      v22 *= 2;
      int v25 = *(unsigned __int8 *)(v24 + v20);
      if (*(unsigned char *)(v24 + v20)) {
        break;
      }
LABEL_23:
      ++v20;
    }
    int v26 = v23 + v25;
    while (v21 != v22)
    {
      ++v22;
      ++v23;
      if (!--v25)
      {
        int v23 = v26;
        goto LABEL_23;
      }
    }
    uint64_t v27 = a1 + 17 * v10 + v23;
    int v28 = *(unsigned __int8 *)(v27 + 72);
    if (*(unsigned char *)(v27 + 72))
    {
      int v29 = 0;
      int v30 = 0;
      int v31 = 1;
      do
      {
        int v29 = _decodeReadBit(a1) | (2 * v29);
        if (!v30) {
          int v31 = v29;
        }
        ++v30;
      }
      while (v28 != v30);
      if (v31) {
        int v32 = 0;
      }
      else {
        int v32 = (-1 << v28) + 1;
      }
      return (v32 + v29);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t _decodeReadBit(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if (v1)
  {
    unsigned int v2 = *(_DWORD *)(a1 + 12);
    int v3 = v1 - 1;
  }
  else
  {
    unint64_t v4 = (unsigned __int8 *)(*(void *)a1)++;
    unsigned int v2 = *v4;
    int v5 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x280], 8) = v5 - 1;
    *(_DWORD *)(a1 + 12) = v2;
    if (v2 == 255)
    {
      *(void *)a1 = v4 + 2;
      *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x280], 8) = v5 - 2;
    }
    int v3 = 7;
  }
  *(_DWORD *)(a1 + 16) = v3;
  return (v2 >> v3) & 1;
}

uint64_t CMPhotoDNGDecompressLinearRawTile(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if (a9)
  {
    LOBYTE(v19[0]) = 0;
    uint64_t v13 = CMPhotoDecompressionSupportedForContainerAndCodec(2, 1786276896, 0, (BOOL *)v19);
    if (!LOBYTE(v19[0])) {
      return FigSignalErrorAt();
    }
    uint64_t v14 = v13;
    if (a6 == 1815491698 || a6 == 1647589490)
    {
      if (CMPhotoIsMatchedJxlDecodeAPI())
      {
        if (!JxlDecoderCreate()) {
          return 4294950745;
        }
        if (JxlDecoderSubscribeEvents())
        {
          uint64_t v14 = 4294950739;
          goto LABEL_29;
        }
        if (JxlDecoderSetInput()) {
          goto LABEL_27;
        }
        if (JxlDecoderProcessInput() != 64) {
          goto LABEL_27;
        }
        long long v47 = 0u;
        memset(v48, 0, sizeof(v48));
        long long v45 = 0u;
        long long v46 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        if (JxlDecoderGetBasicInfo()) {
          goto LABEL_27;
        }
        if (JxlDecoderProcessInput() != 256) {
          goto LABEL_27;
        }
        uint64_t v31 = 0;
        long long v29 = 0u;
        long long v30 = 0u;
        long long v28 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v25 = 0u;
        if (!JxlDecoderGetColorAsEncodedProfile())
        {
          if (JxlDecoderSetPreferredColorProfile()) {
            goto LABEL_27;
          }
        }
        long long v23 = 0uLL;
        uint64_t v24 = 0;
        if (a6 == 1647589490) {
          unsigned int v15 = 3;
        }
        else {
          unsigned int v15 = 4;
        }
        *(void *)&long long v23 = v15 | 0x300000000;
        uint64_t v24 = 1;
        uint64_t v36 = a6;
        uint64_t v32 = a3;
        uint64_t v33 = a4;
        uint64_t v34 = a5;
        *(void *)&long long v17 = DWORD1(v37);
        *((void *)&v17 + 1) = DWORD2(v37);
        long long v35 = v17;
        uint64_t v20 = 0;
        if (JxlDecoderImageOutBufferSize() || JxlDecoderSetImageOutCallback())
        {
          uint64_t v14 = 4294950746;
          goto LABEL_29;
        }
        if (JxlDecoderProcessInput() != 4096) {
LABEL_27:
        }
          uint64_t v14 = 4294950743;
LABEL_29:
        JxlDecoderDestroy();
        return v14;
      }
      return FigSignalErrorAt();
    }
    return 4294950746;
  }
  else
  {
    int v22 = -1;
    long long v23 = xmmword_1F02DE670;
    uint64_t v24 = qword_1F02DE680;
    uint64_t v20 = a1;
    uint64_t v21 = a2;
    applejpeg_decode_create();
    output_buffer_CGSize size = applejpeg_decode_open_mem();
    if (!output_buffer_size)
    {
      output_buffer_CGSize size = CMPhotoPixelFormatToAppleJPEGFormat(a6, &v22);
      if (!output_buffer_size)
      {
        output_buffer_CGSize size = applejpeg_decode_set_option_outformat();
        if (!output_buffer_size)
        {
          uint64_t v34 = 0;
          *(void *)&long long v35 = 0;
          uint64_t v32 = a5;
          uint64_t v33 = 0;
          applejpeg_decode_set_option_stride();
          v19[2] = 0;
          v19[3] = 0;
          long long v25 = 0u;
          long long v26 = 0u;
          *(void *)&long long v27 = 0;
          output_buffer_CGSize size = applejpeg_decode_get_output_buffer_size();
          if (!output_buffer_size)
          {
            v19[0] = a3;
            v19[1] = a4;
            long long v37 = 0u;
            long long v38 = 0u;
            long long v39 = 0u;
            long long v40 = 0u;
            long long v41 = 0u;
            long long v42 = 0u;
            long long v43 = 0u;
            long long v44 = 0u;
            long long v45 = 0u;
            *(void *)&long long v46 = 0;
            output_buffer_CGSize size = applejpeg_decode_image_all();
          }
        }
      }
    }
    uint64_t v14 = output_buffer_size;
    applejpeg_decode_destroy();
  }
  return v14;
}

void ___compressAllTiles_block_invoke_2(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = a1;
  uint64_t v193 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 168)) {
    goto LABEL_46;
  }
  unint64_t v4 = (CVPixelBufferRef *)(*(void *)(a1 + 32) + 8 * a2);
  int v5 = *v4;
  if (!*v4)
  {
    *(_DWORD *)(*(void *)(a1 + 40) + _Block_object_dispose(&STACK[0x280], 8) = CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(int *)(*(void *)(a1 + 48) + 1628), *(int *)(*(void *)(a1 + 48) + 1632), *(_DWORD *)(a1 + 152), 0, v4);
    if (*(_DWORD *)(v3 + 156)) {
      return;
    }
    int v5 = *(__CVBuffer **)(*(void *)(v3 + 32) + 8 * v2);
  }
  unint64_t v6 = *(void *)(v3 + 88);
  CFDataRef theData = *(CFDataRef *)(v3 + 80);
  uint64_t v7 = *(void *)(v3 + 48);
  int v8 = *(__CVBuffer **)(v3 + 56);
  unint64_t v9 = *(int *)(v7 + 1628);
  uint64_t v10 = *(unsigned int *)(v7 + 1632);
  uint64_t v11 = *(void *)(v3 + 64);
  unint64_t v12 = *(void *)(v3 + 72);
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(v8);
  unsigned int BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(PixelFormatType);
  if (v9 < v6) {
    unint64_t v6 = v9;
  }
  CVReturn v15 = CVPixelBufferLockBaseAddress(v5, 0);
  if (v15)
  {
    *(_DWORD *)(*(void *)(a1 + 40) + _Block_object_dispose(&STACK[0x280], 8) = v15;
    return;
  }
  uint64_t v150 = v11;
  CVReturn v16 = CVPixelBufferLockBaseAddress(v8, 1uLL);
  if (v16)
  {
    int v37 = v16;
    goto LABEL_43;
  }
  if (PixelFormatType == 1111970369 || PixelFormatType == 1815491698)
  {
    unsigned int v161 = BytesPerPixelForPixelFormat;
    unint64_t v38 = v9;
    BaseAddress = (char *)CVPixelBufferGetBaseAddress(v5);
    int BytesPerRow = CVPixelBufferGetBytesPerRow(v5);
    long long v41 = (char *)CVPixelBufferGetBaseAddress(v8);
    unsigned int v42 = CVPixelBufferGetBytesPerRow(v8);
    if ((int)v10 < 1) {
      goto LABEL_38;
    }
    int v148 = v8;
    int v149 = v5;
    unint64_t v157 = v2;
    unint64_t v43 = v6;
    unsigned int v44 = 0;
    unint64_t v45 = 0;
    unint64_t v46 = v12;
    unint64_t v47 = v38;
    size_t v48 = v38 * v161;
    uint64_t v49 = v42;
    size_t v50 = v161 * v43;
    size_t v51 = v161 * (v47 - v43);
    int v52 = &v41[v46 * v42 + v161 * v150];
    while (v45 < (unint64_t)theData)
    {
      memcpy(&BaseAddress[v44], v52, v50);
      if (v51)
      {
        size_t v53 = v44 + v50;
        size_t v54 = v51;
LABEL_35:
        bzero(&BaseAddress[v53], v54);
      }
      ++v45;
      v44 += BytesPerRow;
      v52 += v49;
      if (v10 == v45)
      {
        int v37 = 0;
        unint64_t v2 = v157;
        goto LABEL_41;
      }
    }
    size_t v53 = v44;
    size_t v54 = v48;
    goto LABEL_35;
  }
  if (PixelFormatType != 1751527984)
  {
    int v37 = -16558;
    goto LABEL_42;
  }
  unint64_t v17 = v9;
  unint64_t v147 = v12;
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(v5, 0);
  long long v156 = (char *)CVPixelBufferGetBaseAddressOfPlane(v5, 1uLL);
  int BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v5, 0);
  int v153 = CVPixelBufferGetBytesPerRowOfPlane(v5, 0);
  __int16 v146 = (char *)CVPixelBufferGetBaseAddressOfPlane(v8, 0);
  uint64_t v20 = (char *)CVPixelBufferGetBaseAddressOfPlane(v8, 1uLL);
  unsigned int v145 = CVPixelBufferGetBytesPerRowOfPlane(v8, 0);
  unsigned int v21 = CVPixelBufferGetBytesPerRowOfPlane(v8, 1uLL);
  if ((int)v10 < 1)
  {
LABEL_38:
    int v37 = 0;
    goto LABEL_42;
  }
  unsigned int v143 = v21;
  int v144 = v20;
  int v148 = v8;
  int v149 = v5;
  unsigned int v22 = 0;
  unint64_t v23 = v6;
  unint64_t v24 = 0;
  size_t v160 = v17 * BytesPerPixelForPixelFormat;
  uint64_t v25 = BytesPerPixelForPixelFormat;
  uint64_t v26 = BytesPerPixelForPixelFormat * v150;
  size_t v27 = BytesPerPixelForPixelFormat * v23;
  size_t v28 = v25 * (v17 - v23);
  uint64_t v151 = v26;
  long long v29 = &v146[v26 + v147 * v145];
  do
  {
    if (v24 >= (unint64_t)theData)
    {
      size_t v30 = v22;
      size_t v31 = v160;
    }
    else
    {
      memcpy(&BaseAddressOfPlane[v22], v29, v27);
      if (!v28) {
        goto LABEL_19;
      }
      size_t v30 = v22 + v27;
      size_t v31 = v28;
    }
    bzero(&BaseAddressOfPlane[v30], v31);
LABEL_19:
    ++v24;
    v22 += BytesPerRowOfPlane;
    v29 += v145;
  }
  while (v10 != v24);
  if ((int)v10 >= 2)
  {
    unsigned int v32 = 0;
    unint64_t v33 = 0;
    int v8 = v148;
    uint64_t v34 = &v144[v151 + (v147 >> 1) * v143];
    while ((unint64_t)theData >> 1 > v33)
    {
      memcpy(&v156[v32], v34, v27);
      if (v28)
      {
        size_t v35 = v32 + v27;
        size_t v36 = v28;
LABEL_26:
        bzero(&v156[v35], v36);
      }
      ++v33;
      v32 += v153;
      v34 += v143;
      if (v10 >> 1 == v33)
      {
        int v37 = 0;
        int v5 = v149;
        goto LABEL_42;
      }
    }
    size_t v35 = v32;
    size_t v36 = v160;
    goto LABEL_26;
  }
  int v37 = 0;
LABEL_41:
  int v8 = v148;
  int v5 = v149;
LABEL_42:
  CVPixelBufferUnlockBaseAddress(v8, 0);
LABEL_43:
  uint64_t v3 = a1;
  CVPixelBufferUnlockBaseAddress(v5, 0);
  *(_DWORD *)(*(void *)(a1 + 40) + _Block_object_dispose(&STACK[0x280], 8) = v37;
  if (v37) {
    return;
  }
  if (*(unsigned char *)(a1 + 168))
  {
    unint64_t v55 = 0;
    unint64_t v56 = 0;
    int v57 = (__CVBuffer **)(*(void *)(a1 + 32) + 8 * v2);
    goto LABEL_47;
  }
LABEL_46:
  int v57 = (__CVBuffer **)(v3 + 56);
  unint64_t v56 = *(void *)(v3 + 64);
  unint64_t v55 = *(void *)(v3 + 72);
LABEL_47:
  uint64_t v58 = *v57;
  if (*(int *)(v3 + 160) < 2)
  {
    uint64_t Mutable = *(void *)(v3 + 96);
  }
  else
  {
    uint64_t Mutable = (uint64_t)CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
    **(void **)(v3 + 40) = Mutable;
    uint64_t v60 = *(void *)(v3 + 40);
    if (!*(void *)v60)
    {
      *(_DWORD *)(v60 + _Block_object_dispose(&STACK[0x280], 8) = -16551;
      return;
    }
  }
  CFDataRef theDataa = (const __CFData *)Mutable;
  int v61 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (!*(unsigned char *)(v3 + 169))
  {
LABEL_84:
    CVReturn v106 = CVPixelBufferLockBaseAddress(v58, 1uLL);
    uint64_t v107 = *(void *)(v3 + 40);
    *(_DWORD *)(v107 + _Block_object_dispose(&STACK[0x280], 8) = v106;
    if (v106) {
      return;
    }
    int PixelBufferDataPointers = CMPhotoGetPixelBufferDataPointers(v58, v56, v55, (_DWORD *)(v107 + 12), v107 + 16, v107 + 32, v107 + 48);
    *(_DWORD *)(*(void *)(v3 + 40) + _Block_object_dispose(&STACK[0x280], 8) = PixelBufferDataPointers;
    if (PixelBufferDataPointers) {
      goto LABEL_141;
    }
    if (*v61 == 1) {
      kdebug_trace();
    }
    uint64_t v109 = *(void *)(v3 + 48);
    signed int v110 = CVPixelBufferGetPixelFormatType(v58);
    uint64_t v111 = *(void *)(v3 + 40);
    int v112 = *(_DWORD *)(v111 + 12);
    unsigned int v113 = (CGFloat *)(v111 + 32);
    size_t v115 = *(void *)(v3 + 136);
    unint64_t v114 = *(void *)(v3 + 144);
    int v116 = *(_DWORD *)(v109 + 8);
    if ((v116 - 2) >= 2)
    {
      if (v116 != 5)
      {
        if (v116 != 1)
        {
          int v117 = -16552;
          goto LABEL_139;
        }
        if (v112 == 1 && *(void *)(v111 + 16) && *(void *)v113)
        {
          int v117 = -16550;
          if (v110 > 1647589489)
          {
            if (v110 == 1647589490)
            {
              uint64_t v119 = 0;
              int v163 = 1;
              uint64_t v159 = 2;
              uint64_t v120 = 3;
            }
            else
            {
              if (v110 != 1815491698) {
                goto LABEL_139;
              }
              uint64_t v119 = 0;
              int v163 = 1;
              uint64_t v159 = 2;
              uint64_t v120 = 4;
            }
            uint64_t v118 = 2;
            goto LABEL_124;
          }
          if (v110 == 24)
          {
            int v163 = 0;
            uint64_t v119 = 0;
            uint64_t v118 = 2;
            uint64_t v159 = 1;
            uint64_t v120 = 3;
            goto LABEL_124;
          }
          if (v110 == 1111970369)
          {
            int v163 = 0;
            uint64_t v118 = 0;
            uint64_t v119 = 2;
            uint64_t v159 = 1;
            uint64_t v120 = 4;
LABEL_124:
            CFIndex Length = CFDataGetLength(theDataa);
            CFDataIncreaseLength(theDataa, 3 * v115 * v114 * v159);
            uint64_t v130 = *(void *)(v111 + 16);
            Mutableunsigned __int8 BytePtr = CFDataGetMutableBytePtr(theDataa);
            if (v163)
            {
              if (v114)
              {
                uint64_t v132 = 0;
                uint64_t v133 = &MutableBytePtr[Length];
                uint64_t v134 = *(void *)v113;
                do
                {
                  uint64_t v135 = v130;
                  size_t v136 = v115;
                  if (v115)
                  {
                    do
                    {
                      *(_WORD *)uint64_t v133 = bswap32(*(unsigned __int16 *)(v135 + 2 * v119)) >> 16;
                      *((_WORD *)v133 + 1) = bswap32(*(unsigned __int16 *)(v135 + 2)) >> 16;
                      long long v137 = v133 + 6;
                      *((_WORD *)v133 + 2) = bswap32(*(unsigned __int16 *)(v135 + 2 * v118)) >> 16;
                      v135 += 2 * v120;
                      v133 += 6;
                      --v136;
                    }
                    while (v136);
                    uint64_t v133 = v137;
                  }
                  v130 += v134;
                  ++v132;
                }
                while (v132 != v114);
              }
            }
            else if (v114)
            {
              uint64_t v138 = 0;
              CFTypeRef v139 = &MutableBytePtr[Length];
              do
              {
                uint64_t v140 = v130;
                size_t v141 = v115;
                if (v115)
                {
                  do
                  {
                    *CFTypeRef v139 = *(unsigned char *)(v140 + v119);
                    v139[1] = *(unsigned char *)(v140 + 1);
                    long long v142 = v139 + 3;
                    v139[2] = *(unsigned char *)(v140 + v118);
                    v140 += v120;
                    v139 += 3;
                    --v141;
                  }
                  while (v141);
                  CFTypeRef v139 = v142;
                }
                v130 += *(void *)v113;
                ++v138;
              }
              while (v138 != v114);
            }
            int v117 = 0;
            uint64_t v3 = a1;
          }
        }
        else
        {
          int v117 = -16550;
        }
LABEL_139:
        *(_DWORD *)(*(void *)(v3 + 40) + _Block_object_dispose(&STACK[0x280], 8) = v117;
        if (*MEMORY[0x1E4F1EBA8] == 1) {
          kdebug_trace();
        }
LABEL_141:
        CVPixelBufferUnlockBaseAddress(v58, 1uLL);
        return;
      }
      int v121 = CMPhotoDNGJPEGXLCompressData(v115, v114, v110, *(char **)(v111 + 16), *(void *)(v111 + 32), *(float *)(v109 + 12), *(unsigned int *)(v109 + 16), *(_DWORD *)(v109 + 20), 0, theDataa);
LABEL_108:
      int v117 = v121;
      goto LABEL_139;
    }
    LODWORD(v178[0]) = 0;
    int v121 = CMPhotoPixelFormatToAppleJPEGFormat(v110, (int *)v178);
    if (v121) {
      goto LABEL_108;
    }
    int v122 = *(_DWORD *)(v109 + 8);
    int v123 = v178[0];
    memset(&v166, 0, 32);
    long long v191 = xmmword_1F02DE670;
    uint64_t v192 = qword_1F02DE680;
    v175.a = 0.0;
    *(void *)&v175.b = _aj_write;
    v175.CGFloat c = 0.0;
    v175.d = 0.0;
    *(void *)&v175.tdouble x = theDataa;
    v175.tdouble y = 0.0;
    uint64_t v176 = 0;
    uint64_t v174 = 0;
    long long v172 = 0u;
    long long v173 = 0u;
    long long v170 = 0u;
    long long v171 = 0u;
    long long v168 = 0u;
    long long v169 = 0u;
    memset(&v167, 0, sizeof(v167));
    if (v122 != 3 && (int v124 = CMPhotoJPEGQualityControllerCopyQTablesForQuality(&v166, *(float *)(v109 + 12))) != 0)
    {
      int v117 = v124;
    }
    else
    {
      LODWORD(v167.tx) = v112;
      *(void *)&v167.tdouble y = __PAIR64__(v114, v115);
      LODWORD(v16_Block_object_dispose(&STACK[0x280], 8) = v123;
      if (v112)
      {
        uint64_t v125 = v112;
        int v126 = &v167;
        do
        {
          *(void *)&v126[2].d = *(int *)v113;
          v126->a = *(v113 - 2);
          int v126 = (CGAffineTransform *)((char *)v126 + 8);
          ++v113;
          --v125;
        }
        while (v125);
      }
      if (applejpeg_encode_create())
      {
        if (v122 == 3)
        {
          int v127 = applejpeg_encode_set_option_type_lossless();
          goto LABEL_112;
        }
        int v128 = applejpeg_encode_set_option_type_baseline();
        if (!v128)
        {
          long long v189 = *(_OWORD *)&v166.a;
          CGFloat c = v166.c;
          int v127 = applejpeg_encode_set_option_q_tables();
LABEL_112:
          uint64_t v3 = a1;
          if (!v127)
          {
            int v127 = applejpeg_encode_commit_options_for_file();
            if (!v127)
            {
              *(void *)&long long v189 = 0;
              int v127 = applejpeg_encode_image_all();
            }
          }
          int v117 = v127;
          goto LABEL_116;
        }
      }
      else
      {
        int v128 = FigSignalErrorAt();
      }
      int v117 = v128;
    }
    uint64_t v3 = a1;
LABEL_116:
    applejpeg_encode_destroy();
    if (*(void *)&v166.d) {
      free(*(void **)&v166.d);
    }
    goto LABEL_139;
  }
  uint64_t v62 = *(void **)(*(void *)(v3 + 104) + 8 * (v2 % *(int *)(v3 + 164)));
  uint64_t v58 = *(__CVBuffer **)(*(void *)(v3 + 112) + 8 * v2);
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    uint64_t Mutable = kdebug_trace();
  }
  if (*(unsigned char *)(v3 + 168)) {
    char v63 = (uint64_t *)(*(void *)(v3 + 32) + 8 * v2);
  }
  else {
    char v63 = (uint64_t *)(v3 + 56);
  }
  char v64 = (void *)(v3 + 48);
  uint64_t v65 = *(void *)(v3 + 48);
  if (v62) {
    BOOL v66 = v58 == 0;
  }
  else {
    BOOL v66 = 1;
  }
  if (v66)
  {
    int v105 = -16557;
  }
  else
  {
    uint64_t v67 = v3;
    uint64_t v68 = *v63;
    unint64_t v69 = v64[9];
    unint64_t v70 = v64[10];
    unint64_t v71 = v64[11];
    unint64_t v72 = v64[12];
    uint64_t v73 = (void *)MEMORY[0x1AD1109A0](Mutable);
    Class CIImageClass = getCIImageClass();
    uint64_t v187 = getkCIImageColorSpace();
    uint64_t v188 = [MEMORY[0x1E4F1CA98] null];
    uint64_t v75 = -[objc_class imageWithCVPixelBuffer:options:](CIImageClass, "imageWithCVPixelBuffer:options:", v68, [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v188 forKeys:&v187 count:1]);
    if (v75)
    {
      uint64_t v76 = (void *)v75;
      double v77 = (double)v69;
      double v78 = (double)v70;
      double v79 = (double)v71;
      double v80 = (double)v72;
      v194.origin.double x = v77;
      v194.origin.double y = v78;
      v194.size.double width = v79;
      v194.size.double height = v80;
      if (!CGRectIsNull(v194))
      {
        CGAffineTransformMakeScale(&v175, 1.0, -1.0);
        [v76 extent];
        CGAffineTransformTranslate(&v167, &v175, 0.0, -v81);
        v195.origin.double x = v77;
        v195.origin.double y = v78;
        v195.size.double width = v79;
        v195.size.double height = v80;
        CGRect v196 = CGRectApplyAffineTransform(v195, &v167);
        uint64_t v82 = objc_msgSend(v76, "imageByCroppingToRect:", v196.origin.x, v196.origin.y, v196.size.width, v196.size.height);
        [v82 extent];
        CGFloat v84 = -v83;
        [v82 extent];
        CGAffineTransformMakeTranslation(&v166, v84, -v85);
        uint64_t v76 = (void *)[v82 imageByApplyingTransform:&v166];
      }
      *(void *)&long long v189 = @"inputRVector";
      *(void *)&long long v191 = [(objc_class *)getCIVectorClass() vectorWithX:*(float *)(v65 + 2076) Y:0.0 Z:0.0 W:0.0];
      *((void *)&v189 + 1) = @"inputGVector";
      *((void *)&v191 + 1) = [(objc_class *)getCIVectorClass() vectorWithX:0.0 Y:*(float *)(v65 + 2080) Z:0.0 W:0.0];
      CGFloat c = COERCE_DOUBLE(@"inputBVector");
      uint64_t v192 = [(objc_class *)getCIVectorClass() vectorWithX:0.0 Y:0.0 Z:*(float *)(v65 + 2084) W:0.0];
      uint64_t v86 = objc_msgSend(v76, "imageByApplyingFilter:withInputParameters:", @"CIColorMatrix", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v191, &v189, 3));
      if (*(unsigned char *)(v65 + 24) && (*(_DWORD *)(v65 + 8) == 2 || *(void *)(v65 + 2048)))
      {
        float v186 = 0.0;
        uint64_t v185 = 0;
        float v184 = 0.0;
        int16x8_t v183 = 0;
        float v182 = 0.0;
        uint64_t v181 = 0;
        float v180 = 0.0;
        uint64_t v179 = 0;
        if (*(int *)(v65 + 1876) < 1)
        {
          double v158 = 0.0;
          double v162 = 0.0;
          double v152 = 0.0;
          double v154 = 0.0;
          double v102 = 0.0;
          double v101 = 0.0;
          double v100 = 0.0;
          double v99 = 0.0;
          double v98 = 0.0;
          double v97 = 0.0;
          double v96 = 0.0;
          double v95 = 0.0;
        }
        else
        {
          uint64_t v88 = 0;
          uint64_t v89 = 1672;
          do
          {
            float v90 = *(double *)(v65 + v89);
            *((float *)&v185 + v8_Block_object_dispose(&STACK[0x280], 8) = v90;
            float v91 = *(double *)(v65 + v89 + 8);
            *((float *)&v183 + v8_Block_object_dispose(&STACK[0x280], 8) = v91;
            double v92 = *(double *)(v65 + v89 + 24);
            float v93 = *(double *)(v65 + v89 + 16);
            *((float *)&v181 + v8_Block_object_dispose(&STACK[0x280], 8) = v93;
            float v94 = v92;
            *((float *)&v179 + v8_Block_object_dispose(&STACK[0x280], 8) = v94;
            *(_DWORD *)(v65 + 4 * v88++ + 1864) = 4;
            v89 += 64;
          }
          while (v88 < *(int *)(v65 + 1876));
          double v95 = *(float *)&v185;
          double v96 = *(float *)&v183;
          double v97 = *(float *)&v181;
          double v98 = *(float *)&v179;
          double v99 = *((float *)&v185 + 1);
          double v100 = *((float *)&v183 + 1);
          double v101 = *((float *)&v181 + 1);
          double v102 = *((float *)&v179 + 1);
          double v152 = v186;
          double v154 = v184;
          double v158 = v182;
          double v162 = v180;
        }
        v177[0] = @"inputRedCoefficients";
        v178[0] = [(objc_class *)getCIVectorClass() vectorWithX:v95 Y:v96 Z:v97 W:v98];
        v177[1] = @"inputGreenCoefficients";
        v178[1] = [(objc_class *)getCIVectorClass() vectorWithX:v99 Y:v100 Z:v101 W:v102];
        v177[2] = @"inputBlueCoefficients";
        v178[2] = [(objc_class *)getCIVectorClass() vectorWithX:v152 Y:v154 Z:v158 W:v162];
        uint64_t v86 = objc_msgSend(v86, "imageByApplyingFilter:withInputParameters:", @"CIColorPolynomialInverse", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v178, v177, 3));
      }
      int v61 = (_DWORD *)MEMORY[0x1E4F1EBA8];
      if (*(_DWORD *)(v65 + 8) == 5)
      {
        float v103 = (float)(*(_DWORD *)(v65 + 156) - *(_DWORD *)(v65 + 136));
        if (!*(unsigned char *)(v65 + 24))
        {
          float v104 = *(float *)(v65 + 32);
          if (v104 != 0.0)
          {
            double v87 = log2(v104) + v103;
            float v103 = v87;
          }
        }
        int16x8_t v183 = @"inputEV";
        *(float *)&double v87 = v103;
        uint64_t v185 = [MEMORY[0x1E4F28ED0] numberWithFloat:v87];
        uint64_t v86 = objc_msgSend(v86, "imageByApplyingFilter:withInputParameters:", @"CIExposureAdjust", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v185, &v183, 1));
      }
      [v86 extent];
      objc_msgSend(v62, "render:toCVPixelBuffer:bounds:colorSpace:", v86, v58, 0);
      int v105 = 0;
    }
    else
    {
      int v105 = -16552;
      int v61 = (_DWORD *)MEMORY[0x1E4F1EBA8];
    }
    uint64_t v3 = v67;
  }
  *(_DWORD *)(*(void *)(v3 + 40) + _Block_object_dispose(&STACK[0x280], 8) = v105;
  if (*v61 == 1)
  {
    kdebug_trace();
    int v105 = *(_DWORD *)(*(void *)(v3 + 40) + 8);
  }
  if (!v105)
  {
    unint64_t v55 = 0;
    unint64_t v56 = 0;
    goto LABEL_84;
  }
}

UInt8 *___compressAllTiles_block_invoke_3(UInt8 *result)
{
  if (!*(_DWORD *)(*((void *)result + 4) + 8))
  {
    int v1 = result;
    unsigned int Length = CFDataGetLength(*((CFDataRef *)result + 5));
    uint64_t v3 = (__CFData *)*((void *)v1 + 5);
    unsigned __int8 BytePtr = CFDataGetBytePtr(**((CFDataRef **)v1 + 4));
    CFIndex v5 = CFDataGetLength(**((CFDataRef **)v1 + 4));
    CFDataAppendBytes(v3, BytePtr, v5);
    unint64_t v6 = (const void *)**((void **)v1 + 4);
    if (v6)
    {
      CFRelease(v6);
      **((void **)v1 + 4) = 0;
    }
    int v7 = CFDataGetLength(*((CFDataRef *)v1 + 5));
    uint64_t result = CFDataGetMutableBytePtr(*((CFMutableDataRef *)v1 + 5));
    unsigned int v8 = bswap32(Length);
    if (v1[60]) {
      unsigned int v9 = v8;
    }
    else {
      unsigned int v9 = Length;
    }
    *(_DWORD *)&result[4 * *((int *)v1 + 13) + *((int *)v1 + 12)] = v9;
    unsigned int v10 = v7 - Length;
    unsigned int v11 = bswap32(v7 - Length);
    if (v1[60]) {
      unsigned int v10 = v11;
    }
    *(_DWORD *)&result[4 * *((int *)v1 + 13) + *((int *)v1 + 14)] = v10;
  }
  return result;
}

Class initCIContext()
{
  if (CoreImageLibrary_sOnce != -1) {
    dispatch_once(&CoreImageLibrary_sOnce, &__block_literal_global_7);
  }
  Class result = objc_getClass("CIContext");
  classCIContext = (uint64_t)result;
  getCIContextClass = CIContextFunction;
  return result;
}

uint64_t CIContextFunction()
{
  return classCIContext;
}

void *__CoreImageLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/Frameworks/CoreImage.framework/CoreImage", 2);
  CoreImageLibrary_sLib = (uint64_t)result;
  return result;
}

uint64_t initValkCIContextWorkingColorSpace()
{
  if (CoreImageLibrary_sOnce != -1) {
    dispatch_once(&CoreImageLibrary_sOnce, &__block_literal_global_7);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)CoreImageLibrary_sLib, "kCIContextWorkingColorSpace");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkCIContextWorkingColorSpace = result;
  }
  else
  {
    uint64_t result = constantValkCIContextWorkingColorSpace;
  }
  getkCIContextWorkingColorSpace = kCIContextWorkingColorSpaceFunction;
  return result;
}

uint64_t kCIContextWorkingColorSpaceFunction()
{
  return constantValkCIContextWorkingColorSpace;
}

uint64_t initValkCIContextCacheIntermediates()
{
  if (CoreImageLibrary_sOnce != -1) {
    dispatch_once(&CoreImageLibrary_sOnce, &__block_literal_global_7);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)CoreImageLibrary_sLib, "kCIContextCacheIntermediates");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkCIContextCacheIntermediates = result;
  }
  else
  {
    uint64_t result = constantValkCIContextCacheIntermediates;
  }
  getkCIContextCacheIntermediates = kCIContextCacheIntermediatesFunction;
  return result;
}

uint64_t kCIContextCacheIntermediatesFunction()
{
  return constantValkCIContextCacheIntermediates;
}

uint64_t initValkCIContextName()
{
  if (CoreImageLibrary_sOnce != -1) {
    dispatch_once(&CoreImageLibrary_sOnce, &__block_literal_global_7);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)CoreImageLibrary_sLib, "kCIContextName");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkCIContextName = result;
  }
  else
  {
    uint64_t result = constantValkCIContextName;
  }
  getkCIContextName = kCIContextNameFunction;
  return result;
}

uint64_t kCIContextNameFunction()
{
  return constantValkCIContextName;
}

Class initCIImage()
{
  if (CoreImageLibrary_sOnce != -1) {
    dispatch_once(&CoreImageLibrary_sOnce, &__block_literal_global_7);
  }
  Class result = objc_getClass("CIImage");
  classCIImage = (uint64_t)result;
  getClass CIImageClass = CIImageFunction;
  return result;
}

uint64_t CIImageFunction()
{
  return classCIImage;
}

uint64_t initValkCIImageColorSpace()
{
  if (CoreImageLibrary_sOnce != -1) {
    dispatch_once(&CoreImageLibrary_sOnce, &__block_literal_global_7);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)CoreImageLibrary_sLib, "kCIImageColorSpace");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkCIImageColorSpace = result;
  }
  else
  {
    uint64_t result = constantValkCIImageColorSpace;
  }
  getkCIImageColorSpace = kCIImageColorSpaceFunction;
  return result;
}

uint64_t kCIImageColorSpaceFunction()
{
  return constantValkCIImageColorSpace;
}

Class initCIVector()
{
  if (CoreImageLibrary_sOnce != -1) {
    dispatch_once(&CoreImageLibrary_sOnce, &__block_literal_global_7);
  }
  Class result = objc_getClass("CIVector");
  classCIVector = (uint64_t)result;
  getCIVectorClass = CIVectorFunction;
  return result;
}

uint64_t CIVectorFunction()
{
  return classCIVector;
}

void *_aj_malloc(size_t a1)
{
  return malloc_type_malloc(a1, 0xDA20D63uLL);
}

uint64_t _aj_write(UInt8 *bytes, int a2, CFMutableDataRef theData)
{
  return 0;
}

uint64_t _encodeWriteSymbol(uint64_t result, unsigned int a2)
{
  int v2 = *(_DWORD *)(result + 32) - a2;
  *(_DWORD *)(result + 32) = v2;
  uint64_t v3 = *(void *)(result + 24);
  if (v2 < 0)
  {
    uint64_t v5 = a2 >> 8;
    unint64_t v6 = v3 + (v5 >> -(char)v2);
    *(void *)(result + 24) = v6;
    v6 >>= 56;
    uint64_t v7 = *(void *)(result + 56);
    uint64_t v8 = *(int *)(result + 68);
    *(_DWORD *)(result + 6_Block_object_dispose(&STACK[0x280], 8) = v8 + 1;
    *(unsigned char *)(v7 + v_Block_object_dispose(&STACK[0x280], 8) = v6;
    if (v6 == 255)
    {
      uint64_t v9 = *(void *)(result + 56);
      uint64_t v10 = *(int *)(result + 68);
      *(_DWORD *)(result + 6_Block_object_dispose(&STACK[0x280], 8) = v10 + 1;
      *(unsigned char *)(v9 + v10) = 0;
    }
    uint64_t v11 = *(void *)(result + 24);
    uint64_t v12 = *(void *)(result + 56);
    uint64_t v13 = *(int *)(result + 68);
    *(_DWORD *)(result + 6_Block_object_dispose(&STACK[0x280], 8) = v13 + 1;
    *(unsigned char *)(v12 + v13) = BYTE6(v11);
    if ((~v11 & 0xFF000000000000) == 0)
    {
      uint64_t v14 = *(void *)(result + 56);
      uint64_t v15 = *(int *)(result + 68);
      *(_DWORD *)(result + 6_Block_object_dispose(&STACK[0x280], 8) = v15 + 1;
      *(unsigned char *)(v14 + v15) = 0;
    }
    uint64_t v16 = *(void *)(result + 24);
    uint64_t v17 = *(void *)(result + 56);
    uint64_t v18 = *(int *)(result + 68);
    *(_DWORD *)(result + 6_Block_object_dispose(&STACK[0x280], 8) = v18 + 1;
    *(unsigned char *)(v17 + v1_Block_object_dispose(&STACK[0x280], 8) = BYTE5(v16);
    if ((~v16 & 0xFF0000000000) == 0)
    {
      uint64_t v19 = *(void *)(result + 56);
      uint64_t v20 = *(int *)(result + 68);
      *(_DWORD *)(result + 6_Block_object_dispose(&STACK[0x280], 8) = v20 + 1;
      *(unsigned char *)(v19 + v20) = 0;
    }
    uint64_t v21 = *(void *)(result + 24);
    uint64_t v22 = *(void *)(result + 56);
    uint64_t v23 = *(int *)(result + 68);
    *(_DWORD *)(result + 6_Block_object_dispose(&STACK[0x280], 8) = v23 + 1;
    *(unsigned char *)(v22 + v23) = BYTE4(v21);
    if ((~v21 & 0xFF00000000) == 0)
    {
      uint64_t v24 = *(void *)(result + 56);
      uint64_t v25 = *(int *)(result + 68);
      *(_DWORD *)(result + 6_Block_object_dispose(&STACK[0x280], 8) = v25 + 1;
      *(unsigned char *)(v24 + v25) = 0;
    }
    int v26 = ~*(_DWORD *)(result + 24);
    uint64_t v27 = *(void *)(result + 24) >> 24;
    uint64_t v28 = *(void *)(result + 56);
    uint64_t v29 = *(int *)(result + 68);
    *(_DWORD *)(result + 6_Block_object_dispose(&STACK[0x280], 8) = v29 + 1;
    *(unsigned char *)(v28 + v29) = v27;
    if ((v26 & 0xFF000000) == 0)
    {
      uint64_t v30 = *(void *)(result + 56);
      uint64_t v31 = *(int *)(result + 68);
      *(_DWORD *)(result + 6_Block_object_dispose(&STACK[0x280], 8) = v31 + 1;
      *(unsigned char *)(v30 + v31) = 0;
    }
    int v32 = ~*(_DWORD *)(result + 24);
    uint64_t v33 = *(void *)(result + 24) >> 16;
    uint64_t v34 = *(void *)(result + 56);
    uint64_t v35 = *(int *)(result + 68);
    *(_DWORD *)(result + 6_Block_object_dispose(&STACK[0x280], 8) = v35 + 1;
    *(unsigned char *)(v34 + v35) = v33;
    if ((*(void *)&v32 & 0xFF0000) == 0)
    {
      uint64_t v36 = *(void *)(result + 56);
      uint64_t v37 = *(int *)(result + 68);
      *(_DWORD *)(result + 6_Block_object_dispose(&STACK[0x280], 8) = v37 + 1;
      *(unsigned char *)(v36 + v37) = 0;
    }
    int v38 = ~*(_DWORD *)(result + 24);
    uint64_t v39 = *(void *)(result + 24) >> 8;
    uint64_t v40 = *(void *)(result + 56);
    uint64_t v41 = *(int *)(result + 68);
    *(_DWORD *)(result + 6_Block_object_dispose(&STACK[0x280], 8) = v41 + 1;
    *(unsigned char *)(v40 + v41) = v39;
    if ((v38 & 0xFF00) == 0)
    {
      uint64_t v42 = *(void *)(result + 56);
      uint64_t v43 = *(int *)(result + 68);
      *(_DWORD *)(result + 6_Block_object_dispose(&STACK[0x280], 8) = v43 + 1;
      *(unsigned char *)(v42 + v43) = 0;
    }
    uint64_t v44 = *(void *)(result + 24);
    int v45 = ~*(_DWORD *)(result + 24);
    uint64_t v46 = *(void *)(result + 56);
    uint64_t v47 = *(int *)(result + 68);
    *(_DWORD *)(result + 6_Block_object_dispose(&STACK[0x280], 8) = v47 + 1;
    *(unsigned char *)(v46 + v47) = v44;
    if (!(_BYTE)v45)
    {
      uint64_t v48 = *(void *)(result + 56);
      uint64_t v49 = *(int *)(result + 68);
      *(_DWORD *)(result + 6_Block_object_dispose(&STACK[0x280], 8) = v49 + 1;
      *(unsigned char *)(v48 + v49) = 0;
    }
    int v50 = *(_DWORD *)(result + 32);
    *(_DWORD *)(result + 32) = v50 + 64;
    uint64_t v4 = v5 << v50;
  }
  else
  {
    uint64_t v4 = v3 + ((unint64_t)(a2 >> 8) << v2);
  }
  *(void *)(result + 24) = v4;
  return result;
}

uint64_t _encodeWriteHuffTable(uint64_t result, char a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *(void *)(result + 56);
  uint64_t v4 = *(int *)(result + 68);
  *(_DWORD *)(result + 6_Block_object_dispose(&STACK[0x280], 8) = v4 + 1;
  *(unsigned char *)(v3 + v4) = -1;
  uint64_t v5 = *(void *)(result + 56);
  uint64_t v6 = *(int *)(result + 68);
  *(_DWORD *)(result + 6_Block_object_dispose(&STACK[0x280], 8) = v6 + 1;
  *(unsigned char *)(v5 + v6) = -60;
  uint64_t v7 = *(void *)(result + 56);
  uint64_t v8 = *(int *)(result + 68);
  *(_DWORD *)(result + 6_Block_object_dispose(&STACK[0x280], 8) = v8 + 1;
  *(unsigned char *)(v7 + v_Block_object_dispose(&STACK[0x280], 8) = 0;
  uint64_t v9 = *(void *)(result + 56);
  uint64_t v10 = *(int *)(result + 68);
  *(_DWORD *)(result + 6_Block_object_dispose(&STACK[0x280], 8) = v10 + 1;
  *(unsigned char *)(v9 + v10) = 32;
  uint64_t v11 = *(int *)(result + 68);
  *(_DWORD *)(result + 6_Block_object_dispose(&STACK[0x280], 8) = v11 + 1;
  *(unsigned char *)(*(void *)(result + 56) + v11) = a2;
  do
  {
    char v12 = g_huff_n[v2];
    uint64_t v13 = *(void *)(result + 56);
    uint64_t v14 = *(int *)(result + 68);
    *(_DWORD *)(result + 6_Block_object_dispose(&STACK[0x280], 8) = v14 + 1;
    *(unsigned char *)(v13 + v14) = v12;
    ++v2;
  }
  while (v2 != 16);
  for (uint64_t i = 0; i != 13; ++i)
  {
    char v16 = g_huff_v[i];
    uint64_t v17 = *(void *)(result + 56);
    uint64_t v18 = *(int *)(result + 68);
    *(_DWORD *)(result + 6_Block_object_dispose(&STACK[0x280], 8) = v18 + 1;
    *(unsigned char *)(v17 + v1_Block_object_dispose(&STACK[0x280], 8) = v16;
  }
  return result;
}

uint64_t _decodeReadHuffTable(uint64_t result)
{
  if (*(_DWORD *)(result + 16) == 8)
  {
    *(_DWORD *)(result + 16) = 0;
    uint64_t v1 = *(void *)result;
    int v2 = *(_DWORD *)(result + 8);
  }
  else
  {
    uint64_t v1 = *(void *)result + 1;
    int v2 = *(_DWORD *)(result + 8) - 1;
  }
  uint64_t v3 = 0;
  LODWORD(v4) = 0;
  *(_DWORD *)(result + _Block_object_dispose(&STACK[0x280], 8) = v2 - 1;
  *(void *)Class result = v1 + 2;
  uint64_t v5 = *(unsigned __int8 *)(v1 + 1);
  *(_DWORD *)(result + _Block_object_dispose(&STACK[0x280], 8) = v2 - 2;
  int v6 = v2 - 3;
  do
  {
    *(void *)Class result = v1 + v3 + 3;
    int v7 = *(unsigned __int8 *)(v1 + v3 + 2);
    *(_DWORD *)(result + _Block_object_dispose(&STACK[0x280], 8) = v6;
    *(unsigned char *)(result + 16 * v5 + 40 + v3) = v7;
    uint64_t v4 = (v4 + v7);
    ++v3;
    --v6;
  }
  while (v3 != 16);
  if (v4)
  {
    uint64_t v8 = v1 + 19;
    uint64_t v9 = 17 * v5 + 72;
    do
    {
      *(void *)Class result = v8;
      char v10 = *(unsigned char *)(v8 - 1);
      *(_DWORD *)(result + _Block_object_dispose(&STACK[0x280], 8) = v6;
      *(unsigned char *)(result + v9) = v10;
      --v6;
      ++v8;
      ++v9;
      --v4;
    }
    while (v4);
  }
  return result;
}

void *_jxlOutputCallback_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *__src)
{
  if (!a1) {
    return (void *)FigSignalErrorAt();
  }
  int v5 = *(_DWORD *)(a1 + 40);
  if (v5 == 1647589490)
  {
    uint64_t v6 = 3;
    return memcpy((void *)(*(void *)a1 + *(void *)(a1 + 16) * a3 + 2 * a2 * v6), __src, 2 * a4 * v6);
  }
  if (v5 != 1815491698) {
    return (void *)FigSignalErrorAt();
  }
  uint64_t v6 = 4;
  return memcpy((void *)(*(void *)a1 + *(void *)(a1 + 16) * a3 + 2 * a2 * v6), __src, 2 * a4 * v6);
}

uint64_t CMPhotoDecompressionContainerJFIFTranscode(uint64_t a1, const __CFDictionary *a2, const __CFNumber *a3, uint64_t a4, uint64_t a5)
{
  CFTypeRef cf = 0;
  if (!a1) {
    return 4294950306;
  }
  uint64_t v9 = CMPhotoDecompressionContainerCopyTranslatedOptionsForAlternates((char *)a1, a3, a2, 1, (__CFDictionary **)&cf);
  if (v9) {
    goto LABEL_10;
  }
  uint64_t v14 = -1;
  uint64_t v9 = CMPhotoDecompressionContainerExternalToInternalIndex((void *)a1, a3, -1, (const __CFDictionary *)cf, (const __CFNumber **)&v14, 0, 0);
  if (v9) {
    goto LABEL_10;
  }
  if (a4 < 0)
  {
    uint64_t v12 = 4294950306;
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 32);
    if (v10) {
      uint64_t v11 = *(void *)(a1 + 32);
    }
    else {
      uint64_t v11 = 0;
    }
    if (*(void *)(v11 + 232))
    {
      uint64_t v9 = (*(uint64_t (**)(uint64_t, CFTypeRef, uint64_t, uint64_t, uint64_t))(v10 + 232))(a1, cf, v14, a4, a5);
LABEL_10:
      uint64_t v12 = v9;
      goto LABEL_12;
    }
    uint64_t v12 = 4294950302;
  }
LABEL_12:
  if (cf) {
    CFRelease(cf);
  }
  return v12;
}

uint64_t CMPhotoDecompressionContainerFlexibleTranscode(void *a1, uint64_t a2, unsigned int a3, uint64_t a4, void *a5)
{
  if (!a1) {
    return 4294950306;
  }
  if (a3 > 1) {
    return 4294950302;
  }
  uint64_t v6 = a5;
  if (!a5) {
    return 4294950306;
  }
  cf[0] = 0;
  CFAllocatorRef v9 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return 4294950305;
  }
  CFMutableDictionaryRef v11 = Mutable;
  uint64_t v45 = a4;
  signed int v42 = a3;
  uint64_t v51 = 0;
  uint64_t ImageCountWithOptions = CMPhotoDecompressionContainerGetImageCountWithOptions((uint64_t)a1, 0, &v51);
  if (ImageCountWithOptions)
  {
    uint64_t v24 = ImageCountWithOptions;
    uint64_t v13 = 0;
    goto LABEL_80;
  }
  uint64_t v13 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E4F1D510]);
  if (!v13) {
    goto LABEL_83;
  }
  uint64_t v43 = v11;
  uint64_t v44 = v6;
  if (v51 < 1)
  {
LABEL_42:
    CFMutableDictionaryRef v11 = v43;
    if (CMPhotoDecompressionContainerCopyGroupsDescriptionArray((uint64_t)a1, (uint64_t)cf))
    {
      uint64_t v25 = 0;
      uint64_t v6 = v44;
LABEL_46:
      FigCFDictionarySetValue();
      uint64_t v24 = 0;
      goto LABEL_47;
    }
    DeepCopdouble y = CMPhotoArrayCreateDeepCopy(v9, (const __CFArray *)cf[0]);
    uint64_t v6 = v44;
    if (DeepCopy)
    {
      uint64_t v25 = DeepCopy;
      FigCFArrayApplyBlock();
      FigCFDictionarySetValue();
      goto LABEL_46;
    }
LABEL_83:
    uint64_t v24 = 4294950305;
    goto LABEL_80;
  }
  CFNumberRef v14 = 0;
  while (1)
  {
    uint64_t v50 = 0;
    CFIndex v46 = 0;
    AlternatesCountForIndedouble x = CMPhotoDecompressionContainerGetAlternatesCountForIndex(a1, v14, 0, &v50, &v46);
    if (AlternatesCountForIndex)
    {
LABEL_78:
      uint64_t v24 = AlternatesCountForIndex;
      goto LABEL_79;
    }
    CFTypeRef v16 = (CFTypeRef)v50;
    if (v50 >= 2) {
      break;
    }
    value[0] = 0;
    AlternatesCountForIndedouble x = _createTranscodePayload(v9, 1, (uint64_t)v14, -1, -1, (__CFDictionary **)value);
    if (AlternatesCountForIndex) {
      goto LABEL_78;
    }
    CFArrayAppendValue(v13, value[0]);
    if (value[0]) {
      CFRelease(value[0]);
    }
    AlternatesCountForIndedouble x = _populateTranscodeDescriptionForMainImage(a1, v14, -1);
    if (AlternatesCountForIndex) {
      goto LABEL_78;
    }
LABEL_35:
    CFNumberRef v14 = (const __CFNumber *)((char *)v14 + 1);
    if ((uint64_t)v14 >= v51) {
      goto LABEL_42;
    }
  }
  uint64_t v17 = v46;
  uint64_t v18 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v20 = CMPhotoCFDictionarySetInt(v18, @"EntryType", 3);
    if (v20)
    {
      uint64_t v24 = v20;
      uint64_t v21 = 0;
    }
    else
    {
      uint64_t v21 = CFArrayCreateMutable(v9, (CFIndex)v16, MEMORY[0x1E4F1D510]);
      if (v21)
      {
        value[0] = 0;
        uint64_t TranscodePayload = _createTranscodePayload(v9, 1, (uint64_t)v14, v17, -1, (__CFDictionary **)value);
        if (!TranscodePayload)
        {
          CFArrayAppendValue(v21, value[0]);
          if (value[0]) {
            CFRelease(value[0]);
          }
          uint64_t TranscodePayload = _populateTranscodeDescriptionForMainImage(a1, v14, v17);
          if (!TranscodePayload)
          {
            uint64_t v23 = 0;
            while (1)
            {
              if (v17 != v23)
              {
                value[0] = 0;
                uint64_t TranscodePayload = _createTranscodePayload(v9, 1, (uint64_t)v14, v23, -1, (__CFDictionary **)value);
                if (TranscodePayload) {
                  break;
                }
                CFArrayAppendValue(v21, value[0]);
                if (value[0]) {
                  CFRelease(value[0]);
                }
                uint64_t TranscodePayload = _populateTranscodeDescriptionForMainImage(a1, v14, v23);
                if (TranscodePayload) {
                  break;
                }
              }
              if (v16 == (CFTypeRef)++v23)
              {
                CFDictionarySetValue(v19, @"Payload", v21);
                uint64_t v24 = 0;
                goto LABEL_31;
              }
            }
          }
        }
        uint64_t v24 = TranscodePayload;
      }
      else
      {
        uint64_t v24 = 4294950305;
      }
    }
    CFRelease(v19);
    uint64_t v19 = 0;
    if (v21) {
LABEL_31:
    }
      CFRelease(v21);
    if (v24) {
      goto LABEL_79;
    }
    CFArrayAppendValue(v13, v19);
    if (v19) {
      CFRelease(v19);
    }
    goto LABEL_35;
  }
  uint64_t v24 = 4294950305;
LABEL_79:
  CFMutableDictionaryRef v11 = v43;
  uint64_t v6 = v44;
LABEL_80:
  CFRelease(v11);
  CFMutableDictionaryRef v11 = 0;
  uint64_t v25 = 0;
  if (v13) {
LABEL_47:
  }
    CFRelease(v13);
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (v25) {
    CFRelease(v25);
  }
  if (v24) {
    goto LABEL_75;
  }
  if (v45)
  {
    uint64_t v27 = (*(uint64_t (**)(void))(v45 + 16))();
    if (v27)
    {
      uint64_t v24 = v27;
      if (v11) {
        goto LABEL_76;
      }
      return v24;
    }
  }
  uint64_t v51 = 0;
  int v52 = &v51;
  uint64_t v53 = 0x2000000000;
  int v54 = 0;
  uint64_t v50 = 0;
  if (!v11)
  {
    CFDictionaryRef v32 = 0;
    uint64_t v41 = &v51;
LABEL_92:
    uint64_t v39 = (int *)(v41 + 3);
    int v38 = -16990;
LABEL_68:
    *uint64_t v39 = v38;
    goto LABEL_69;
  }
  CFTypeID v28 = CFGetTypeID(v11);
  if (v28 != CFDictionaryGetTypeID())
  {
    CFDictionaryRef v32 = 0;
LABEL_91:
    uint64_t v41 = v52;
    goto LABEL_92;
  }
  CFAllocatorRef v29 = CFGetAllocator(a1);
  int v30 = CMPhotoCompressionSessionCreate(v29, 0, &v50);
  *((_DWORD *)v52 + 6) = v30;
  if (v30)
  {
    CFDictionaryRef v32 = 0;
    goto LABEL_69;
  }
  CFMutableDictionaryRef v31 = CFDictionaryCreateMutable(v29, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionaryRef v32 = v31;
  if (!v31)
  {
    uint64_t v39 = (int *)(v52 + 3);
    int v38 = -16991;
    goto LABEL_68;
  }
  int v33 = CMPhotoCFDictionarySetSize(v31, @"ContainerFormat", v42);
  *((_DWORD *)v52 + 6) = v33;
  if (v33) {
    goto LABEL_69;
  }
  int v34 = CMPhotoCFDictionarySetSize(v32, @"BackingType", 1);
  *((_DWORD *)v52 + 6) = v34;
  if (v34) {
    goto LABEL_69;
  }
  int v35 = CMPhotoCompressionSessionOpenEmptyContainer(v50, v32);
  *((_DWORD *)v52 + 6) = v35;
  if (v35) {
    goto LABEL_69;
  }
  uint64_t v36 = CFDictionaryGetValue(v11, @"MainImageList");
  if (!v36) {
    goto LABEL_91;
  }
  CFTypeID v37 = CFGetTypeID(v36);
  if (v37 != CFArrayGetTypeID()) {
    goto LABEL_91;
  }
  value[0] = (void *)MEMORY[0x1E4F143A8];
  value[1] = *(void **)"";
  value[2] = ___writeTranscodeDescriptionToData_block_invoke;
  value[3] = &unk_1E5E2F648;
  value[4] = &v51;
  value[5] = a1;
  value[6] = (void *)v50;
  signed int v49 = v42;
  FigCFArrayApplyBlock();
  if (!*((_DWORD *)v52 + 6))
  {
    if (!CFDictionaryGetValue(v11, @"GroupsDescriptionList")
      || (cf[0] = (CFTypeRef)MEMORY[0x1E4F143A8],
          cf[1] = *(CFTypeRef *)"",
          CFTypeRef cf[2] = ___writeTranscodeDescriptionToData_block_invoke_2,
          cf[3] = &unk_1E5E2F670,
          cf[4] = &v51,
          CFTypeRef cf[5] = (CFTypeRef)v50,
          FigCFArrayApplyBlock(),
          !*((_DWORD *)v52 + 6)))
    {
      int v38 = CMPhotoCompressionSessionCloseContainerAndCopyBacking(v50);
      uint64_t v39 = (int *)(v52 + 3);
      goto LABEL_68;
    }
  }
LABEL_69:
  if (v50) {
    CFRelease((CFTypeRef)v50);
  }
  if (v32) {
    CFRelease(v32);
  }
  uint64_t v24 = *((unsigned int *)v52 + 6);
  _Block_object_dispose(&v51, 8);
  if (!v24) {
    *uint64_t v6 = 0;
  }
LABEL_75:
  if (v11) {
LABEL_76:
  }
    CFRelease(v11);
  return v24;
}

uint64_t _createTranscodePayload(const __CFAllocator *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, __CFDictionary **a6)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return 4294950305;
  }
  uint64_t v13 = Mutable;
  CFMutableDictionaryRef v14 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v14)
  {
    uint64_t v17 = 4294950305;
    goto LABEL_14;
  }
  CFMutableDictionaryRef v15 = v14;
  FigCFDictionarySetValue();
  CFRelease(v15);
  uint64_t v16 = CMPhotoCFDictionarySetInt(v13, @"EntryType", 1);
  if (v16
    || (uint64_t v16 = CMPhotoCFDictionarySetSize(v15, @"MainIndex", a3), v16)
    || a4 != -1 && (uint64_t v16 = CMPhotoCFDictionarySetSize(v15, @"AlternateIndex", a4), v16)
    || a5 != -1 && (uint64_t v16 = CMPhotoCFDictionarySetSize(v15, @"SubIndex", a5), v16))
  {
    uint64_t v17 = v16;
    goto LABEL_14;
  }
  CMPhotoCFDictionarySetInt(v15, @"Type", a2);
  uint64_t v17 = 0;
  if (!a6)
  {
LABEL_14:
    CFRelease(v13);
    return v17;
  }
  *a6 = v13;
  return v17;
}

uint64_t _populateTranscodeDescriptionForMainImage(void *a1, const __CFNumber *a2, uint64_t a3)
{
  CFTypeRef v14 = 0;
  CFTypeRef cf = 0;
  CFAllocatorRef v6 = CFGetAllocator(a1);
  if (a3 == -1)
  {
    CFDictionaryRef Mutable = 0;
    goto LABEL_6;
  }
  CFAllocatorRef v7 = CFGetAllocator(a1);
  CFDictionaryRef Mutable = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    TranscodePayloadArradouble y = FigCFDictionarySetCFIndex();
    if (TranscodePayloadArray)
    {
LABEL_27:
      uint64_t v11 = TranscodePayloadArray;
      goto LABEL_15;
    }
LABEL_6:
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v13 = 0;
      TranscodePayloadArradouble y = (*(uint64_t (**)(void *, const __CFNumber *, const __CFDictionary *, uint64_t *))((char *)&off_1F02DE688 + v10))(a1, a2, Mutable, &v13);
      if (TranscodePayloadArray) {
        goto LABEL_27;
      }
      if (v13 >= 1)
      {
        TranscodePayloadArradouble y = _createTranscodePayloadArray(v6, *(_DWORD *)((char *)&off_1F02DE688 + v10 + 16), v13, (uint64_t)a2, a3, (__CFArray **)&cf);
        if (TranscodePayloadArray) {
          goto LABEL_27;
        }
        FigCFDictionarySetValue();
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0;
        }
      }
      v10 += 24;
      if (v10 == 144)
      {
        if (CMPhotoDecompressionContainerCopyHEIFItemPropertiesForIndexWithOptions(a1, a2, Mutable, (uint64_t)&v14)|| FigCFDictionaryGetCount() < 1)
        {
          uint64_t v11 = 0;
          goto LABEL_15;
        }
        TranscodePayloadArradouble y = _createTranscodePayloadArray(v6, 8, 1, (uint64_t)a2, a3, (__CFArray **)&cf);
        if (!TranscodePayloadArray)
        {
          FigCFDictionarySetValue();
          if (cf)
          {
            CFRelease(cf);
            uint64_t v11 = 0;
            CFTypeRef cf = 0;
          }
          else
          {
            uint64_t v11 = 0;
          }
          goto LABEL_22;
        }
        goto LABEL_27;
      }
    }
  }
  uint64_t v11 = 4294950305;
LABEL_15:
  if (cf) {
    CFRelease(cf);
  }
LABEL_22:
  if (v14) {
    CFRelease(v14);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v11;
}

void ___createTranscodeDescriptionFromContainer_block_invoke(int a1, CFMutableDictionaryRef theDict)
{
}

uint64_t _createTranscodePayloadArray(const __CFAllocator *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, __CFArray **a6)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
  if (!Mutable) {
    return 4294950305;
  }
  uint64_t v13 = Mutable;
  if (a3 >= 1)
  {
    uint64_t v14 = 0;
    while (1)
    {
      CFTypeRef value = 0;
      uint64_t TranscodePayload = _createTranscodePayload(a1, a2, a4, a5, v14, (__CFDictionary **)&value);
      if (TranscodePayload) {
        break;
      }
      CFArrayAppendValue(v13, value);
      if (value) {
        CFRelease(value);
      }
      if (a3 == ++v14) {
        goto LABEL_8;
      }
    }
    uint64_t v16 = TranscodePayload;
    goto LABEL_11;
  }
LABEL_8:
  uint64_t v16 = 0;
  if (!a6)
  {
LABEL_11:
    CFRelease(v13);
    return v16;
  }
  *a6 = v13;
  return v16;
}

uint64_t ___writeTranscodeDescriptionToData_block_invoke(uint64_t result, CFTypeRef cf)
{
  if (!*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24))
  {
    uint64_t v3 = result;
    if (cf)
    {
      uint64_t v4 = *(void **)(result + 40);
      uint64_t v5 = *(void *)(result + 48);
      int v6 = *(_DWORD *)(result + 56);
      CFTypeID v7 = CFGetTypeID(cf);
      if (v7 == CFDictionaryGetTypeID())
      {
        int v16 = 0;
        if (CMPhotoCFDictionaryGetIntIfPresent((CFDictionaryRef)cf, @"EntryType", &v16))
        {
          if (v16 != 3)
          {
            Class result = _writeMainImageToDestination(v4, v5, v6, (const __CFDictionary *)cf, 0);
LABEL_18:
            *(_DWORD *)(*(void *)(*(void *)(v3 + 32) + 8) + 24) = result;
            return result;
          }
          CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)cf, @"Payload");
          if (Value)
          {
            CFArrayRef v9 = Value;
            CFTypeID v10 = CFGetTypeID(Value);
            if (v10 == CFArrayGetTypeID())
            {
              CFIndex Count = CFArrayGetCount(v9);
              if (Count)
              {
                CFIndex v12 = Count;
                v15[1] = 0;
                if (Count == 1 || (Class result = CMPhotoCompressionSessionAddGroup(v5, 0, 1634497650), !result))
                {
                  uint64_t v13 = 0;
                  while (1)
                  {
                    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)FigCFArrayGetValueAtIndex();
                    v15[0] = 0;
                    Class result = _writeMainImageToDestination(v4, v5, v6, ValueAtIndex, v15);
                    if (result) {
                      break;
                    }
                    if (v12 != 1)
                    {
                      Class result = CMPhotoCompressionSessionAddImageHandleToGroup(v5);
                      if (result) {
                        break;
                      }
                    }
                    if (v12 == ++v13)
                    {
                      Class result = 0;
                      goto LABEL_18;
                    }
                  }
                }
                goto LABEL_18;
              }
            }
          }
        }
      }
    }
    Class result = 4294950306;
    goto LABEL_18;
  }
  return result;
}

uint64_t ___writeTranscodeDescriptionToData_block_invoke_2(uint64_t result, CFTypeRef cf)
{
  if (!*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24))
  {
    uint64_t v3 = result;
    if (cf)
    {
      uint64_t v4 = *(void *)(result + 40);
      CFTypeID v5 = CFGetTypeID(cf);
      if (v5 == CFDictionaryGetTypeID())
      {
        int v11 = 0;
        CMPhotoCFDictionaryGetIntIfPresent((CFDictionaryRef)cf, @"GroupType", &v11);
        if (v11)
        {
          v10[1] = -1;
          Class result = CMPhotoCompressionSessionAddGroup(v4, 0, v11);
          if (result) {
            goto LABEL_14;
          }
          CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)cf, @"GroupPictureIndexList");
          if (Value)
          {
            CFArrayRef v7 = Value;
            CFTypeID v8 = CFGetTypeID(Value);
            if (v8 == CFArrayGetTypeID())
            {
              if (CFArrayGetCount(v7) >= 1)
              {
                uint64_t v9 = 0;
                do
                {
                  v10[0] = 0;
                  if (!CMPhotoCFArrayGetSizeAtIndex(v7, v9, v10)) {
                    goto LABEL_16;
                  }
                  Class result = CMPhotoCompressionSessionAddImageHandleToGroup(v4);
                  if (result) {
                    goto LABEL_14;
                  }
                }
                while (++v9 < CFArrayGetCount(v7));
              }
              Class result = CMPhotoCompressionSessionAddGroupProperties(v4);
LABEL_14:
              *(_DWORD *)(*(void *)(*(void *)(v3 + 32) + 8) + 24) = result;
              return result;
            }
          }
        }
      }
    }
LABEL_16:
    Class result = 4294950306;
    goto LABEL_14;
  }
  return result;
}

uint64_t _writeMainImageToDestination(void *a1, uint64_t a2, int a3, const __CFDictionary *a4, void *a5)
{
  uint64_t v46 = 0;
  uint64_t v47 = &v46;
  uint64_t v48 = 0x2000000000;
  int v49 = 0;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  int v8 = _createBufferFromImageDescriptionEntry(a1, a4, a3, 0, 1, (CFTypeRef *)&v45, &v44, 0, 0, 0);
  *((_DWORD *)v47 + 6) = v8;
  if (v8) {
    goto LABEL_60;
  }
  CFIndex v43 = -1;
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a4, @"EncodeOptions");
  CFAllocatorRef v10 = CFGetAllocator(a1);
  int v11 = CMPhotoMergeDictionaryEntries((uint64_t)v10, (uint64_t)v44, Value, 1u);
  *((_DWORD *)v47 + 6) = v11;
  if (v11) {
    goto LABEL_60;
  }
  CFArrayRef v12 = (const __CFArray *)CFDictionaryGetValue(a4, @"HEIFItemPropertiesList");
  if (!v12)
  {
    CFDictionaryRef v21 = v44;
    CFDictionaryRef v27 = a4;
LABEL_44:
    int v32 = CMPhotoCompressionSessionAddImage(a2, v21, v45, &v43);
    *((_DWORD *)v47 + 6) = v32;
    if (v32) {
      goto LABEL_60;
    }
    if (v45)
    {
      CFRelease(v45);
      uint64_t v45 = 0;
    }
    int v33 = CFDictionaryGetValue(v27, @"ThumbnailImageList");
    if (!v33) {
      goto LABEL_50;
    }
    CFTypeID v34 = CFGetTypeID(v33);
    if (v34 == CFArrayGetTypeID())
    {
      FigCFArrayApplyBlock();
      CFDictionaryRef v27 = a4;
      if (*((_DWORD *)v47 + 6)) {
        goto LABEL_60;
      }
LABEL_50:
      int v35 = CFDictionaryGetValue(v27, @"AuxiliaryImageList");
      if (!v35) {
        goto LABEL_53;
      }
      CFTypeID v36 = CFGetTypeID(v35);
      if (v36 == CFArrayGetTypeID())
      {
        FigCFArrayApplyBlock();
        CFDictionaryRef v27 = a4;
        if (!*((_DWORD *)v47 + 6))
        {
LABEL_53:
          uint64_t v37 = 0;
          while (1)
          {
            int v38 = CFDictionaryGetValue(v27, *(__CFString **)((char *)&off_1F02DE718 + v37));
            if (v38)
            {
              CFTypeID v39 = CFGetTypeID(v38);
              if (v39 != CFArrayGetTypeID()) {
                goto LABEL_68;
              }
              FigCFArrayApplyBlock();
              CFDictionaryRef v27 = a4;
              if (*((_DWORD *)v47 + 6)) {
                break;
              }
            }
            v37 += 24;
            if (v37 == 96)
            {
              if (!a5) {
                break;
              }
              CFDictionaryRef v21 = 0;
              *a5 = v43;
              goto LABEL_61;
            }
          }
        }
LABEL_60:
        CFDictionaryRef v21 = 0;
        goto LABEL_61;
      }
    }
LABEL_68:
    CFDictionaryRef v21 = 0;
    *((_DWORD *)v47 + 6) = -16990;
    goto LABEL_61;
  }
  CFArrayRef v13 = v12;
  CFTypeID v14 = CFGetTypeID(v12);
  if (v14 != CFArrayGetTypeID()) {
    goto LABEL_68;
  }
  if (CFArrayGetCount(v13) != 1) {
    goto LABEL_68;
  }
  CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v13, 0);
  int v16 = v44;
  v54[0] = 0;
  if (!ValueAtIndex) {
    goto LABEL_68;
  }
  CFDictionaryRef v17 = ValueAtIndex;
  CFTypeID v18 = CFGetTypeID(ValueAtIndex);
  if (v18 != CFDictionaryGetTypeID()
    || v16 && (CFTypeID v19 = CFGetTypeID(v16), v19 != CFDictionaryGetTypeID())
    || (int v53 = 0, !CMPhotoCFDictionaryGetIntIfPresent(v17, @"EntryType", &v53)))
  {
    CFDictionaryRef v21 = 0;
    CFDictionaryRef MutableCopy = 0;
    CFDictionaryRef v24 = 0;
    int v22 = -16990;
    goto LABEL_36;
  }
  CFDictionaryRef v20 = (const __CFDictionary *)FigCFDictionaryGetValue();
  CFDictionaryRef v21 = 0;
  int v22 = -16990;
  if (!v20)
  {
    CFDictionaryRef MutableCopy = 0;
    CFDictionaryRef v24 = 0;
    goto LABEL_36;
  }
  CFDictionaryRef MutableCopy = 0;
  CFDictionaryRef v24 = 0;
  if (v53 != 1) {
    goto LABEL_36;
  }
  CFDictionaryRef v25 = v20;
  CFNumberRef v52 = (const __CFNumber *)-1;
  if (!CMPhotoCFDictionaryGetSizeIfPresent(v20, @"MainIndex", &v52))
  {
    CFDictionaryRef v21 = 0;
    CFDictionaryRef MutableCopy = 0;
    CFDictionaryRef v24 = 0;
    goto LABEL_36;
  }
  uint64_t v51 = -1;
  CMPhotoCFDictionaryGetSizeIfPresent(v25, @"AlternateIndex", &v51);
  if (v51 == -1)
  {
    CFDictionaryRef MutableCopy = 0;
  }
  else
  {
    CFGetAllocator(a1);
    CFDictionaryRef MutableCopy = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
    if (!MutableCopy)
    {
      CFDictionaryRef v21 = 0;
      CFDictionaryRef v24 = 0;
      goto LABEL_75;
    }
    int v26 = FigCFDictionarySetCFIndex();
    if (v26) {
      goto LABEL_70;
    }
  }
  int v26 = CMPhotoDecompressionContainerCopyHEIFItemPropertiesForIndexWithOptions(a1, v52, MutableCopy, (uint64_t)v54);
  if (v26)
  {
LABEL_70:
    int v22 = v26;
    CFDictionaryRef v21 = 0;
LABEL_35:
    CFDictionaryRef v24 = 0;
    goto LABEL_36;
  }
  CFGetAllocator(a1);
  CFDictionaryRef v24 = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (!v24)
  {
    CFDictionaryRef v21 = 0;
LABEL_75:
    int v22 = -16991;
    goto LABEL_36;
  }
  CFDictionaryRef v28 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v54[0], @"CameraExtrinsics");
  if (!v28)
  {
LABEL_30:
    CFDictionaryRef v30 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v54[0], @"CameraModel");
    if (v30)
    {
      CFDictionaryRef v31 = v30;
      if (!CFDictionaryContainsKey(v24, @"IntrinsicsMatrix"))
      {
        if (CFDictionaryGetValue(v31, @"Intrinsics")) {
          FigCFDictionarySetValue();
        }
      }
    }
    int v22 = 0;
    CFDictionaryRef v21 = v24;
    goto LABEL_35;
  }
  CFDictionaryRef v29 = v28;
  int v50 = 0;
  CMPhotoCFDictionaryGetInt32IfPresent(v28, @"CoordinateSystemID", &v50);
  if (!v50)
  {
    if (!CFDictionaryContainsKey(v24, @"ExtrinsicsPosition") && CFDictionaryGetValue(v29, @"Position")) {
      FigCFDictionarySetValue();
    }
    if (!CFDictionaryContainsKey(v24, @"ExtrinsicsRotation") && CFDictionaryGetValue(v29, @"Rotation")) {
      FigCFDictionarySetValue();
    }
    goto LABEL_30;
  }
  int v22 = FigSignalErrorAt();
  CFDictionaryRef v21 = 0;
LABEL_36:
  if (v54[0]) {
    CFRelease(v54[0]);
  }
  CFDictionaryRef v27 = a4;
  if (v24) {
    CFRelease(v24);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  *((_DWORD *)v47 + 6) = v22;
  if (!v22)
  {
    uint64_t v44 = v21;
    goto LABEL_44;
  }
LABEL_61:
  if (v44) {
    CFRelease(v44);
  }
  if (v45) {
    CFRelease(v45);
  }
  if (v21) {
    CFRelease(v21);
  }
  uint64_t v40 = *((unsigned int *)v47 + 6);
  _Block_object_dispose(&v46, 8);
  return v40;
}

uint64_t _createBufferFromImageDescriptionEntry(void *a1, const __CFDictionary *cf, int a3, int a4, int a5, CFTypeRef *a6, __CFDictionary **a7, CFTypeRef *a8, void *a9, CFTypeRef *a10)
{
  CFDictionaryRef v10 = cf;
  CFTypeRef v40 = 0;
  CFTypeRef cfa = 0;
  CFTypeRef v39 = 0;
  if (!cf) {
    goto LABEL_71;
  }
  CFTypeID v18 = CFGetTypeID(cf);
  if (v18 != CFDictionaryGetTypeID())
  {
    CFDictionaryRef v10 = 0;
LABEL_71:
    CFDictionaryRef MutableCopy = 0;
    goto LABEL_15;
  }
  CFGetAllocator(a1);
  CFDictionaryRef MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy)
  {
    CFDictionaryRef v10 = 0;
    uint64_t v24 = 4294950305;
    goto LABEL_59;
  }
  int v38 = 0;
  if (!CMPhotoCFDictionaryGetIntIfPresent(v10, @"EntryType", &v38)) {
    goto LABEL_14;
  }
  CFDictionaryRef Value = (const __CFDictionary *)FigCFDictionaryGetValue();
  CFDictionaryRef v10 = Value;
  if (!Value)
  {
LABEL_15:
    uint64_t v24 = 4294950306;
    goto LABEL_59;
  }
  uint64_t v21 = (uint64_t)a9;
  if (v38 == 2)
  {
    CFDictionaryRef v25 = CFDictionaryGetValue(Value, @"PixelBuffer");
    if (v25)
    {
      CFTypeRef cfa = CFRetain(v25);
      if (cfa)
      {
        if (a4)
        {
          int v26 = CFDictionaryGetValue(v10, @"AuxiliaryCustomURN");
          if (v26) {
            int v26 = CFRetain(v26);
          }
          CFTypeRef v40 = v26;
          CFDictionaryRef v27 = CFDictionaryGetValue(v10, @"AuxiliaryCGImageMetadata");
          if (v27) {
            CFDictionaryRef v27 = CFRetain(v27);
          }
          CFTypeRef v39 = v27;
          if (a9) {
            CMPhotoCFDictionaryGetIntIfPresent(v10, @"AuxiliaryType", a9);
          }
        }
        CFDictionaryRef v10 = 0;
        goto LABEL_49;
      }
    }
    else
    {
      CFTypeRef cfa = 0;
    }
    uint64_t v24 = FigSignalErrorAt();
    CFDictionaryRef v10 = 0;
    goto LABEL_59;
  }
  if (v38 != 1) {
    goto LABEL_14;
  }
  CFNumberRef v37 = (const __CFNumber *)-1;
  if (!CMPhotoCFDictionaryGetSizeIfPresent(Value, @"MainIndex", &v37)
    || (int v32 = a4,
        uint64_t v36 = -1,
        CMPhotoCFDictionaryGetSizeIfPresent(v10, @"AlternateIndex", &v36),
        uint64_t v35 = -1,
        CMPhotoCFDictionaryGetSizeIfPresent(v10, @"SubIndex", &v35),
        CFDictionaryRef v22 = (const __CFDictionary *)CFDictionaryGetValue(v10, @"DecodeOptions"),
        int v34 = 0,
        !CMPhotoCFDictionaryGetIntIfPresent(v10, @"Type", &v34)))
  {
LABEL_14:
    CFDictionaryRef v10 = 0;
    goto LABEL_15;
  }
  if (v36 == -1)
  {
    CFDictionaryRef v10 = 0;
  }
  else
  {
    CFGetAllocator(a1);
    CFDictionaryRef v10 = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
    if (!v10)
    {
      uint64_t v24 = 4294950305;
      goto LABEL_59;
    }
    uint64_t v23 = FigCFDictionarySetCFIndex();
    if (v23)
    {
      uint64_t v24 = v23;
      goto LABEL_59;
    }
    CFDictionaryRef v22 = v10;
    uint64_t v21 = (uint64_t)a9;
  }
  if (v34 == 3)
  {
    CFDictionaryRef v31 = a8;
    if (v32)
    {
      AuxiliaryImageForIndedouble x = CMPhotoDecompressionContainerCreateAuxiliaryImageForIndex(a1, v37, v35, v22, 2, (uint64_t)&cfa);
      if (!AuxiliaryImageForIndex)
      {
        if (!v21
          || (AuxiliaryImageForIndedouble x = CMPhotoDecompressionContainerGetAuxiliaryImageTypeForIndexWithOptions(a1, v37, v35, v22, v21, 0), !AuxiliaryImageForIndex))
        {
          uint64_t v29 = CMPhotoDecompressionContainerCopyAuxiliaryImageMetadataForIndexWithOptions(a1, v37, v35, v22, (uint64_t)&v39);
          if (v29)
          {
            uint64_t v24 = v29;
            if (v29 != -16993) {
              goto LABEL_59;
            }
          }
          AuxiliaryImageForIndedouble x = CMPhotoDecompressionContainerCopyAuxiliaryImageTypeURNForIndexWithOptions(a1, v37, v35, v22, (uint64_t)&v40);
          if (!AuxiliaryImageForIndex) {
            goto LABEL_48;
          }
        }
      }
      goto LABEL_58;
    }
    goto LABEL_57;
  }
  if (v34 == 2)
  {
    CFDictionaryRef v31 = a8;
    if (!v32)
    {
      AuxiliaryImageForIndedouble x = CMPhotoDecompressionContainerCreateThumbnailImageForIndex((char *)a1, v37, v35, v22, 2, (uint64_t)&cfa);
      if (!AuxiliaryImageForIndex) {
        goto LABEL_48;
      }
LABEL_58:
      uint64_t v24 = AuxiliaryImageForIndex;
      goto LABEL_59;
    }
LABEL_57:
    AuxiliaryImageForIndedouble x = FigSignalErrorAt();
    goto LABEL_58;
  }
  if (v34 != 1) {
    goto LABEL_57;
  }
  CFDictionaryRef v31 = a8;
  if (v32) {
    goto LABEL_57;
  }
  AuxiliaryImageForIndedouble x = CMPhotoDecompressionContainerCreateImageForIndex((char *)a1, v37, v22, 2, (uint64_t)&cfa);
  if (AuxiliaryImageForIndex) {
    goto LABEL_58;
  }
  if (a3 || !a5) {
    goto LABEL_48;
  }
  int v33 = 1;
  AuxiliaryImageForIndedouble x = CMPhotoDecompressionContainerGetImageGeometryForIndexWithOptions(a1, v37, v22, 0, 0, (uint64_t)&v33);
  if (AuxiliaryImageForIndex) {
    goto LABEL_58;
  }
  CMPhotoCFDictionarySetInt(MutableCopy, @"ImageOrientation", v33);
LABEL_48:
  a8 = v31;
LABEL_49:
  if (a6)
  {
    *a6 = cfa;
    CFTypeRef cfa = 0;
  }
  if (a8)
  {
    *a8 = v39;
    CFTypeRef v39 = 0;
  }
  if (a10)
  {
    *a10 = v40;
    CFTypeRef v40 = 0;
  }
  uint64_t v24 = 0;
  if (a7)
  {
    *a7 = MutableCopy;
    CFDictionaryRef MutableCopy = 0;
  }
LABEL_59:
  if (cfa) {
    CFRelease(cfa);
  }
  if (v40) {
    CFRelease(v40);
  }
  if (v39) {
    CFRelease(v39);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  return v24;
}

void ___writeMainImageToDestination_block_invoke(uint64_t a1, const __CFDictionary *a2)
{
  if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    CFTypeRef v6 = 0;
    CFTypeRef cf = 0;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = _createBufferFromImageDescriptionEntry(*(void **)(a1 + 40), a2, *(_DWORD *)(a1 + 64), 0, 0, &cf, (__CFDictionary **)&v6, 0, 0, 0);
    if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
    {
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a2, @"EncodeOptions");
      CFAllocatorRef v5 = CFGetAllocator(*(CFTypeRef *)(a1 + 40));
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CMPhotoMergeDictionaryEntries((uint64_t)v5, (uint64_t)v6, Value, 1u);
      if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
        *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CMPhotoCompressionSessionAddThumbnail(*(void *)(a1 + 48), *(void *)(a1 + 56), (CFDictionaryRef)v6, (opaqueCMSampleBuffer *)cf);
      }
    }
    if (cf) {
      CFRelease(cf);
    }
    if (v6) {
      CFRelease(v6);
    }
  }
}

void ___writeMainImageToDestination_block_invoke_2(uint64_t a1, const __CFDictionary *a2)
{
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    return;
  }
  CFMutableDictionaryRef v15 = 0;
  CFTypeRef v13 = 0;
  CFTypeRef v14 = 0;
  int v12 = 0;
  CFTypeRef cf = 0;
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = _createBufferFromImageDescriptionEntry(*(void **)(a1 + 40), a2, *(_DWORD *)(a1 + 64), 1, 0, (CFTypeRef *)&v15, (__CFDictionary **)&cf, &v13, &v12, &v14);
  if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a2, @"EncodeOptions");
    CFAllocatorRef v5 = CFGetAllocator(*(CFTypeRef *)(a1 + 40));
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CMPhotoMergeDictionaryEntries((uint64_t)v5, (uint64_t)cf, Value, 1u);
    if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
    {
      uint64_t v6 = FigCFDictionaryGetValue();
      uint64_t v7 = v12;
      if (v12 == 4 && v14 && !v6)
      {
        CFGetAllocator(*(CFTypeRef *)(a1 + 40));
        uint64_t MutableCopy = FigCFDictionaryCreateMutableCopy();
        if (!MutableCopy)
        {
          int v10 = -16991;
          goto LABEL_11;
        }
        CFTypeRef v9 = (CFTypeRef)MutableCopy;
        FigCFDictionarySetValue();
        CFTypeRef cf = v9;
        uint64_t v7 = v12;
      }
      else
      {
        CFTypeRef v9 = cf;
      }
      int v10 = CMPhotoCompressionSessionAddAuxiliaryImage(*(void *)(a1 + 48), *(void *)(a1 + 56), v7, (uint64_t)v13, (CFDictionaryRef)v9, v15, 0);
LABEL_11:
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v10;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v15) {
    CFRelease(v15);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v13) {
    CFRelease(v13);
  }
}

void ___writeMainImageToDestination_block_invoke_3(uint64_t a1, CFTypeRef cf)
{
  if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v2 = (uint64_t)cf;
    uint64_t v4 = *(void **)(a1 + 40);
    int v5 = *(_DWORD *)(a1 + 72);
    CFTypeRef cfa = 0;
    if (!cf)
    {
      unint64_t v11 = 0;
      int v12 = -16990;
      goto LABEL_41;
    }
    CFTypeID v6 = CFGetTypeID(cf);
    if (v6 == CFDictionaryGetTypeID())
    {
      int v19 = 0;
      if (CMPhotoCFDictionaryGetIntIfPresent((CFDictionaryRef)v2, @"EntryType", &v19))
      {
        CFDictionaryRef Value = (const __CFDictionary *)FigCFDictionaryGetValue();
        if (Value)
        {
          CFDictionaryRef v8 = Value;
          if (v19 == 2)
          {
            CFTypeRef v13 = CFDictionaryGetValue(Value, @"MetadataPayload");
            if (v13) {
              unint64_t v11 = (unint64_t)CFRetain(v13);
            }
            else {
              unint64_t v11 = 0;
            }
            uint64_t v2 = 0;
            CFTypeRef cfa = (CFTypeRef)v11;
            if (v5 == 4 && !v11)
            {
              CFTypeRef v14 = CFDictionaryGetValue(v8, @"ImageProperties");
              if (v14) {
                uint64_t v2 = (uint64_t)CFRetain(v14);
              }
              else {
                uint64_t v2 = 0;
              }
            }
            if (v11 | v2)
            {
              CFDictionaryRef MutableCopy = 0;
              goto LABEL_37;
            }
            int v12 = FigSignalErrorAt();
            uint64_t v2 = 0;
            unint64_t v11 = 0;
            goto LABEL_39;
          }
          if (v19 == 1)
          {
            CFNumberRef v18 = (const __CFNumber *)-1;
            if (CMPhotoCFDictionaryGetSizeIfPresent(Value, @"MainIndex", &v18))
            {
              uint64_t v17 = -1;
              if (CMPhotoCFDictionaryGetSizeIfPresent(v8, @"SubIndex", &v17))
              {
                uint64_t v16 = -1;
                CMPhotoCFDictionaryGetSizeIfPresent(v8, @"AlternateIndex", &v16);
                int v15 = 0;
                if (CMPhotoCFDictionaryGetIntIfPresent(v8, @"Type", &v15))
                {
                  if (v15 == v5)
                  {
                    if (v16 == -1)
                    {
                      CFDictionaryRef MutableCopy = 0;
                      goto LABEL_25;
                    }
                    CFGetAllocator(v4);
                    CFDictionaryRef MutableCopy = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
                    if (MutableCopy)
                    {
                      int v10 = FigCFDictionarySetCFIndex();
                      if (!v10)
                      {
                        int v5 = v15;
LABEL_25:
                        switch(v5)
                        {
                          case 4:
                            int v10 = CMPhotoDecompressionContainerCopyExifForIndexWithOptions(v4, v18, v17, MutableCopy, 0, (uint64_t)&cfa);
                            if (v10) {
                              goto LABEL_27;
                            }
                            break;
                          case 5:
                            int v10 = CMPhotoDecompressionContainerCopyXMPForIndexWithOptions(v4, v18, v17, 0, MutableCopy, &cfa);
                            if (v10) {
                              goto LABEL_27;
                            }
                            break;
                          case 6:
                            int v10 = CMPhotoDecompressionContainerCopyDebugMetadataForIndexWithOptions(v4, v18, v17, MutableCopy, (uint64_t)&cfa);
                            if (v10) {
                              goto LABEL_27;
                            }
                            break;
                          case 7:
                            int v10 = CMPhotoDecompressionContainerCopyCustomMetadataForIndexWithOptions(v4, v18, v17, MutableCopy, (uint64_t)&cfa);
                            if (v10) {
                              goto LABEL_27;
                            }
                            break;
                          default:
                            break;
                        }
                        uint64_t v2 = 0;
                        unint64_t v11 = (unint64_t)cfa;
LABEL_37:
                        int v12 = 0;
                        CFTypeRef cfa = 0;
                        if (!MutableCopy) {
                          goto LABEL_39;
                        }
                        goto LABEL_38;
                      }
LABEL_27:
                      int v12 = v10;
                    }
                    else
                    {
                      int v12 = -16991;
                    }
                  }
                  else
                  {
                    int v12 = FigSignalErrorAt();
                    CFDictionaryRef MutableCopy = 0;
                  }
                }
                else
                {
                  CFDictionaryRef MutableCopy = 0;
                  int v12 = -16990;
                }
                uint64_t v2 = 0;
                unint64_t v11 = 0;
                if (MutableCopy) {
LABEL_38:
                }
                  CFRelease(MutableCopy);
LABEL_39:
                if (cfa) {
                  CFRelease(cfa);
                }
LABEL_41:
                *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v12;
                if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
                {
                  if (v2) {
                    goto LABEL_44;
                  }
                }
                else
                {
                  if (v2)
                  {
                    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CMPhotoCompressionSessionAddMetadataFromImageProperties(*(void *)(a1 + 48), *(void *)(a1 + 56), 0, v2);
LABEL_44:
                    CFRelease((CFTypeRef)v2);
                    goto LABEL_46;
                  }
                  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = (*(uint64_t (**)(void, void, void, unint64_t))(a1 + 64))(*(void *)(a1 + 48), *(void *)(a1 + 56), 0, v11);
                }
LABEL_46:
                if (v11) {
                  CFRelease((CFTypeRef)v11);
                }
                return;
              }
            }
          }
        }
      }
    }
    uint64_t v2 = 0;
    unint64_t v11 = 0;
    int v12 = -16990;
    goto LABEL_39;
  }
}

uint64_t CMPhotoJPEGDecodeSessionGetTypeID()
{
  return sCMPhotoJPEGDecodeSessionID;
}

uint64_t fjds_register()
{
  sCMPhotoJPEGDecodeSessionClass = 0;
  *(void *)algn_1EB3D20C8 = "CMPhotoJPEGDecodeSession";
  qword_1EB3D20D0 = (uint64_t)fjds_init;
  unk_1EB3D20D8 = 0;
  qword_1EB3D20E8 = 0;
  unk_1EB3D20F0 = 0;
  qword_1EB3D20E0 = (uint64_t)fjds_finalize;
  qword_1EB3D20F8 = (uint64_t)fjds_copyFormattingDesc;
  qword_1EB3D2100 = (uint64_t)fjds_copyDebugDesc;
  uint64_t result = _CFRuntimeRegisterClass();
  sCMPhotoJPEGDecodeSessionID = result;
  return result;
}

uint64_t CMPhotoJPEGDecodeSessionCreate(const __CFAllocator *a1, const __CFDictionary *a2, uint64_t *a3)
{
  if (!a3) {
    return 4294951226;
  }
  pthread_once(&CMPhotoJPEGDecodeSessionGetTypeID_sRegisterCMPhotoJPEGDecodeSessionOnce, (void (*)(void))fjds_register);
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance) {
    return 4294951225;
  }
  uint64_t v7 = Instance;
  *(unsigned char *)(Instance + 160) = 0;
  *(unsigned char *)(Instance + 180) = 1;
  *(void *)(Instance + 200) = 0;
  *(void *)(Instance + 20_Block_object_dispose(&STACK[0x280], 8) = 0;
  if (a2)
  {
    *(unsigned char *)(Instance + 160) = _getBoolValue_0(a2, @"AsyncDecode", *(unsigned char *)(Instance + 160));
    *(unsigned char *)(v7 + 180) = _getBoolValue_0(a2, @"ColorSpaceAware", *(unsigned char *)(v7 + 180));
    CFDictionaryRef Value = (__CFString *)CFDictionaryGetValue(a2, @"SurfacePool");
    if (Value)
    {
      CFTypeRef v9 = Value;
      CFTypeID v10 = CFGetTypeID(Value);
      if (v10 == CMPhotoSurfacePoolGetTypeID() || v9 == @"SurfacePoolOneShot")
      {
        unint64_t v11 = *(const void **)(v7 + 200);
        if (v11)
        {
          CFRelease(v11);
          *(void *)(v7 + 200) = 0;
        }
        *(void *)(v7 + 200) = CFRetain(v9);
      }
    }
    int v12 = CFDictionaryGetValue(a2, @"ScaleAndRotateSession");
    if (v12)
    {
      CFTypeRef v13 = v12;
      CFTypeID v14 = CFGetTypeID(v12);
      if (v14 == CMPhotoScaleAndRotateSessionGetTypeID())
      {
        int v15 = *(const void **)(v7 + 208);
        if (v15)
        {
          CFRelease(v15);
          *(void *)(v7 + 20_Block_object_dispose(&STACK[0x280], 8) = 0;
        }
        *(void *)(v7 + 20_Block_object_dispose(&STACK[0x280], 8) = CFRetain(v13);
      }
    }
  }
  *(_DWORD *)(v7 + 20) = JPEGDeviceInterface_numberOfJPEGCores();
  int NumberOfScalerCores = FigGetNumberOfScalerCores();
  *(_DWORD *)(v7 + 24) = NumberOfScalerCores;
  intptr_t v17 = 2 * *(int *)(v7 + 20);
  intptr_t v18 = NumberOfScalerCores + ((NumberOfScalerCores + 1) >> 1);
  *(void *)(v7 + 56) = dispatch_semaphore_create(v17 + v18);
  *(void *)(v7 + 64) = dispatch_queue_create("com.apple.coremedia.jpegdecodesession.waitqueue", 0);
  *(void *)(v7 + 72) = dispatch_queue_create("com.apple.coremedia.jpegdecodesession.executionqueue", MEMORY[0x1E4F14430]);
  *(void *)(v7 + 80) = dispatch_semaphore_create(v17);
  *(void *)(v7 + 8_Block_object_dispose(&STACK[0x280], 8) = dispatch_semaphore_create(v18);
  *(void *)(v7 + 4_Block_object_dispose(&STACK[0x280], 8) = 0;
  *(_DWORD *)(v7 + 40) = 0;
  CFMutableSetRef Mutable = CFSetCreateMutable(a1, 0, 0);
  *(void *)(v7 + 96) = 0;
  *(void *)(v7 + 32) = Mutable;
  *(_DWORD *)(v7 + 12_Block_object_dispose(&STACK[0x280], 8) = 0;
  *(void *)(v7 + 104) = v7 + 96;
  *(void *)(v7 + 112) = 0;
  *(void *)(v7 + 120) = v7 + 112;
  *(unsigned char *)(v7 + 132) = 1;
  if (*(unsigned char *)(v7 + 160))
  {
    *(void *)(v7 + 16_Block_object_dispose(&STACK[0x280], 8) = 0;
    *(_DWORD *)(v7 + 176) = 0;
    *(void *)(v7 + 184) = FigDispatchQueueCreateWithPriority();
    CFDictionaryRef v20 = IONotificationPortCreate(*MEMORY[0x1E4F2EEF0]);
    *(void *)(v7 + 192) = v20;
    IONotificationPortSetDispatchQueue(v20, *(dispatch_queue_t *)(v7 + 184));
  }
  *(_DWORD *)(v7 + 144) = 0;
  *(void *)(v7 + 152) = dispatch_semaphore_create(*(int *)(v7 + 20));
  *(void *)(v7 + 136) = CFArrayCreateMutable(a1, *(int *)(v7 + 20), 0);
  if (*(int *)(v7 + 20) < 1)
  {
LABEL_23:
    uint64_t result = 0;
    *a3 = v7;
  }
  else
  {
    int v21 = 0;
    while (1)
    {
      uint64_t v22 = JPEGDeviceInterface_openDriverConnection();
      if (!v22) {
        break;
      }
      uint64_t v23 = v22;
      CFArrayAppendValue(*(CFMutableArrayRef *)(v7 + 136), (const void *)v22);
      if (*(unsigned char *)(v7 + 160))
      {
        uint64_t MachPort = IONotificationPortGetMachPort(*(IONotificationPortRef *)(v7 + 192));
        MEMORY[0x1AD10F710](v23, 0, MachPort, 0);
      }
      if (++v21 >= *(_DWORD *)(v7 + 20)) {
        goto LABEL_23;
      }
    }
    uint64_t v26 = FigSignalErrorAt();
    CFRelease((CFTypeRef)v7);
    return v26;
  }
  return result;
}

uint64_t _getBoolValue_0(const __CFDictionary *a1, const void *a2, unsigned __int8 a3)
{
  if (!a1) {
    return a3;
  }
  CFDictionaryRef Value = CFDictionaryGetValue(a1, a2);
  if (!Value) {
    return a3;
  }
  int v5 = Value;
  CFTypeID v6 = CFGetTypeID(Value);
  if (v6 != CFBooleanGetTypeID())
  {
    CFTypeID v8 = CFGetTypeID(v5);
    if (v8 == CFNumberGetTypeID())
    {
      int valuePtr = 0;
      CFNumberGetValue((CFNumberRef)v5, kCFNumberIntType, &valuePtr);
      return valuePtr;
    }
    return a3;
  }
  return CFBooleanGetValue((CFBooleanRef)v5);
}

uint64_t CMPhotoJPEGDecodeSessionCreateCVPixelBufferFromData(uint64_t a1, const __CFData *a2, const __CFDictionary *a3, void *a4)
{
  if (!a1) {
    return FigSignalErrorAt();
  }
  if (*(unsigned char *)(a1 + 16)) {
    return 4294951220;
  }
  return fjds_createPixelBufferFromJPEGData(a1, 0, a2, a3, a4, 0);
}

uint64_t fjds_createPixelBufferFromJPEGData(uint64_t a1, uint64_t a2, const __CFData *a3, const __CFDictionary *a4, void *a5, int a6)
{
  uint64_t v125 = 0;
  memset(v124, 0, sizeof(v124));
  long long v122 = 0u;
  long long v123 = 0u;
  unint64_t v120 = 0;
  unint64_t v121 = 0;
  uint64_t v118 = 0;
  uint64_t v119 = 0;
  unint64_t v116 = 0;
  unint64_t v117 = 0;
  int v115 = 0;
  uint64_t v112 = 0;
  dispatch_semaphore_t dsema = 0;
  uint64_t v114 = 0;
  CFIndex length = 0;
  IOSurfaceRef v111 = 0;
  CFTypeRef v108 = 0;
  CVPixelBufferRef pixelBuffer = 0;
  uint64_t RequestStatus = fjds_getRequestStatus(a1, a2);
  if (RequestStatus) {
    goto LABEL_20;
  }
  uint64_t v13 = 875704422;
  if (!a4)
  {
    int v100 = a6;
    uint64_t v103 = a2;
    CFDataRef cf = 0;
    double v99 = a5;
    int IntValue_0 = 0;
    int v18 = 0;
    int v19 = 0;
    unsigned int v106 = 0;
    IOSurfaceRef buffer = 0;
    int v105 = 0;
    uint64_t v20 = 0;
    BOOL v101 = 1;
    int v102 = 0;
    int v21 = 875704422;
    goto LABEL_31;
  }
  int FourCCValue = _getFourCCValue(a4);
  int v15 = FourCCValue;
  if (FourCCValue > 1111970368)
  {
    if (FourCCValue != 1111970369)
    {
      int v16 = 1278555701;
      goto LABEL_9;
    }
  }
  else if (FourCCValue != 875704422)
  {
    int v16 = 875704438;
LABEL_9:
    if (FourCCValue == v16) {
      goto LABEL_10;
    }
    uint64_t RequestStatus = FigSignalErrorAt();
LABEL_20:
    uint64_t v27 = RequestStatus;
    unsigned int ValueAtIndex = 0;
    IOSurfaceRef buffer = 0;
    CFDataRef v29 = 0;
    int v105 = 0;
LABEL_21:
    char v30 = 1;
LABEL_146:
    char v55 = 1;
    goto LABEL_148;
  }
LABEL_10:
  int v100 = a6;
  uint64_t v103 = a2;
  LODWORD(v20) = _getIntValue_0(a4, @"OutputBytesPerRowAlignment");
  int BoolValue_0 = _getBoolValue_0(a4, @"ApplyTransform", 0);
  int IntValue_0 = _getIntValue_0(a4, @"MaxPixelSize");
  if (IntValue_0) {
    int v97 = _getBoolValue_0(a4, @"RelaxMaxPixelSize", 0);
  }
  else {
    int v97 = 0;
  }
  BOOL v101 = _getBoolValue_0(a4, @"AllowNonExactOutputDimensions", 0) == 0;
  int v102 = _getBoolValue_0(a4, @"ForceHighSpeedDecode", 0);
  unsigned int v106 = _getIntValue_0(a4, @"KTraceArg");
  CFDictionaryRef Value = (__IOSurface *)CFDictionaryGetValue(a4, @"SourceIOSurface");
  IOSurfaceRef buffer = Value;
  double v99 = a5;
  if (Value)
  {
    uint64_t v24 = Value;
    CFTypeID v25 = CFGetTypeID(Value);
    if (v25 != IOSurfaceGetTypeID())
    {
LABEL_17:
      uint64_t v27 = FigSignalErrorAt();
      unsigned int ValueAtIndex = 0;
      CFDataRef v29 = 0;
      int v105 = 0;
LABEL_180:
      char v30 = 1;
      goto LABEL_119;
    }
    size_t AllocSize = IOSurfaceGetAllocSize(v24);
    CMPhotoCFDictionaryGetSizeIfPresent(a4, @"SourceIOSurfaceSize", &length);
    if (length)
    {
      if (length > AllocSize) {
        goto LABEL_17;
      }
    }
    else
    {
      CFIndex length = AllocSize;
    }
    char v30 = 1;
    uint64_t v31 = IOSurfaceLock(buffer, 1u, 0);
    if (v31)
    {
      uint64_t v27 = v31;
      unsigned int ValueAtIndex = 0;
      CFDataRef v29 = 0;
      int v105 = 0;
      goto LABEL_119;
    }
    CFAllocatorRef v32 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    BaseAddress = (const UInt8 *)IOSurfaceGetBaseAddress(buffer);
    CFDataRef v34 = CFDataCreateWithBytesNoCopy(v32, BaseAddress, length, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
    CFDataRef v29 = v34;
    int v105 = 1;
    if (!v34)
    {
      unsigned int ValueAtIndex = 0;
      uint64_t v27 = 4294951225;
      goto LABEL_119;
    }
    a3 = v34;
  }
  else
  {
    CFDataRef v29 = 0;
    int v105 = 0;
  }
  uint64_t v20 = (int)v20;
  uint64_t v35 = CFDictionaryGetValue(a4, @"ProvidedPixelBuffer");
  int v19 = BoolValue_0;
  CFDataRef cf = v29;
  if (v35)
  {
    uint64_t v36 = v35;
    CFTypeID TypeID = CVPixelBufferGetTypeID();
    int v18 = v97;
    if (TypeID == CFGetTypeID(v36)) {
      CVPixelBufferRef pixelBuffer = (CVPixelBufferRef)CFRetain(v36);
    }
    int v21 = v15;
    uint64_t v13 = 875704422;
  }
  else
  {
    int v21 = v15;
    uint64_t v13 = 875704422;
    int v18 = v97;
  }
LABEL_31:
  int v38 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  int v39 = JPEGParseJPEGInfo(a3, (uint64_t)&v122, 1, *(unsigned char *)(a1 + 180) != 0);
  if (*v38 == 1) {
    kdebug_trace();
  }
  if (v39)
  {
    CFDataRef v29 = cf;
    uint64_t v27 = FigSignalErrorAt();
    unsigned int ValueAtIndex = 0;
    goto LABEL_21;
  }
  if (BYTE12(v124[1])
    || ((JPEGCalculateOutputDimensions(v122, DWORD1(v122), IntValue_0, v18, v19, SDWORD1(v123), &v120, &v118, &v116, &v115, 0), !v115)? ((v41 = v121, v120 == v118) ? (v42 = v121 == v119) : (v42 = 0), v42 ? (int v40 = 0) : (int v40 = 1)): (int v40 = 1, v41 = v121), (v43 = JPEGDeviceInterface_supportsDecodeSize(v122, DWORD1(v122), v123, v120, v41)) == 0))
  {
    uint64_t v61 = FigSignalErrorAt();
    goto LABEL_173;
  }
  int v44 = v43;
  if (v21 == 1111970369)
  {
    int v45 = v123;
    int v46 = JPEGDeviceInterface_supportsAppleInterchangeFormats();
    if (v46) {
      int v47 = v40;
    }
    else {
      int v47 = 0;
    }
    if (v46) {
      uint64_t v48 = 1111970369;
    }
    else {
      uint64_t v48 = 875704422;
    }
    if (v47 == 1)
    {
      if (v45 == 2) {
        unsigned int v49 = 875836518;
      }
      else {
        unsigned int v49 = 875704422;
      }
      if (v45 == 1) {
        uint64_t v13 = 2037741158;
      }
      else {
        uint64_t v13 = v49;
      }
    }
    else
    {
      uint64_t v13 = v48;
    }
  }
  unsigned int v98 = v21;
  uint64_t v50 = v13;
  if (v21 == v13) {
    int v51 = v40;
  }
  else {
    int v51 = 1;
  }
  if (pixelBuffer)
  {
    OSType PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
    unsigned int v53 = PixelFormatType == v50 ? v44 : -16990;
    char v54 = PixelFormatType == v50 ? v51 : 1;
    uint64_t v27 = v51 ? 4294950194 : v53;
    if (v54) {
      goto LABEL_75;
    }
  }
  if (v20)
  {
    unint64_t v56 = 4;
    uint64_t v57 = CMPhotoLeastCommonMultiple(4, v20);
    if (v51)
    {
      uint64_t v58 = v57;
    }
    else
    {
      unint64_t v56 = v57;
      uint64_t v58 = 0;
    }
    uint64_t v96 = v58;
    uint64_t v59 = buffer;
  }
  else
  {
    uint64_t v59 = buffer;
    if (v51)
    {
      uint64_t v96 = 0;
      unint64_t v56 = 4;
    }
    else
    {
      unint64_t v56 = CMPhotoLeastCommonMultiple(4, 16);
      uint64_t v96 = 0;
    }
  }
  uint64_t v60 = v103;
  uint64_t v61 = fjds_getRequestStatus(a1, v103);
  if (v61)
  {
LABEL_173:
    uint64_t v27 = v61;
LABEL_75:
    unsigned int ValueAtIndex = 0;
    char v30 = 1;
    char v55 = 1;
LABEL_95:
    CFDataRef v29 = cf;
    goto LABEL_148;
  }
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 80), 0xFFFFFFFFFFFFFFFFLL);
  if (v59 && BYTE13(v124[1]))
  {
    IOSurfaceRef v111 = (IOSurfaceRef)CFRetain(v59);
  }
  else
  {
    CFIndex v62 = CFDataGetLength(a3);
    unint64_t v63 = v62 + 2 * (BYTE13(v124[1]) == 0);
    if (*v38 == 1) {
      kdebug_trace();
    }
    char v64 = *(__CFString **)(a1 + 200);
    char v55 = 1;
    if (v64 == @"SurfacePoolOneShot") {
      int v65 = 2;
    }
    else {
      int v65 = 1;
    }
    uint64_t v66 = CMPhotoSurfacePoolCreateMemorySurface((uint64_t)v64, v63, v65, &v111);
    if (v66)
    {
      uint64_t v27 = v66;
      unsigned int ValueAtIndex = 0;
      char v30 = 0;
      goto LABEL_95;
    }
    if (*v38 == 1) {
      kdebug_trace();
    }
    IOSurfaceLock(v111, 0, 0);
    uint64_t v67 = (char *)IOSurfaceGetBaseAddress(v111);
    unsigned __int8 BytePtr = CFDataGetBytePtr(a3);
    size_t v69 = CFDataGetLength(a3);
    memcpy(v67, BytePtr, v69);
    if (!BYTE13(v124[1])) {
      *(_WORD *)&v67[v63 - 2] = -9729;
    }
    IOSurfaceUnlock(v111, 0, 0);
    uint64_t v59 = buffer;
  }
  if (*v38 == 1) {
    kdebug_trace();
  }
  if (pixelBuffer)
  {
    uint64_t v27 = 0;
  }
  else
  {
    size_t v70 = v120;
    size_t v71 = v121;
    unint64_t v72 = DWORD2(v122);
    unint64_t v73 = HIDWORD(v122);
    uint64_t v74 = *(__CFString **)(a1 + 200);
    if (v74 == @"SurfacePoolOneShot")
    {
      if (v56 <= 1) {
        unint64_t v56 = 1;
      }
      unint64_t v72 = CMPhotoLeastCommonMultiple(DWORD2(v122), v56);
      uint64_t v74 = *(__CFString **)(a1 + 200);
    }
    uint64_t v27 = CMPhotoSurfacePoolCreatePixelBuffer(v74, v50, v70, v71, v101, v72, v73, 0, v56, 0, &pixelBuffer);
    uint64_t v59 = buffer;
  }
  if (*v38 == 1) {
    kdebug_trace();
  }
  CFDataRef v29 = cf;
  if (v27) {
    goto LABEL_175;
  }
  uint64_t v75 = fjds_getRequestStatus(a1, v103);
  if (v75)
  {
    uint64_t v27 = v75;
    goto LABEL_175;
  }
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 152), 0xFFFFFFFFFFFFFFFFLL);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 136)) <= 0)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 144));
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 152));
    unsigned int ValueAtIndex = 0;
    char v30 = 0;
    uint64_t v27 = 4294951226;
LABEL_119:
    char v55 = 1;
    goto LABEL_148;
  }
  unsigned int ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 136), 0);
  CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 136), 0);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 144));
  if (!v100)
  {
    IOSurfaceRef v78 = v111;
    IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(pixelBuffer);
    uint64_t v80 = JPEGDecompressSurface(ValueAtIndex, 0, (uint64_t)v78, 0, (uint64_t)IOSurface, (unsigned int *)&v122, v102 != 0, v106, v120, v121, 0, 0);
    if (!v80)
    {
      fjds_enqueueDriverConnection(a1, ValueAtIndex);
      goto LABEL_126;
    }
    uint64_t v27 = v80;
    goto LABEL_176;
  }
  LODWORD(v114) = v106;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 176));
  uint64_t v76 = *(NSObject ***)(a1 + 168);
  if (v76)
  {
    double v77 = *v76;
    *(void *)(a1 + 16_Block_object_dispose(&STACK[0x280], 8) = v76[1];
    free(v76);
  }
  else
  {
    double v77 = dispatch_semaphore_create(0);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 176));
  dispatch_semaphore_t dsema = v77;
  if (!v77)
  {
    uint64_t v83 = FigSignalErrorAt();
    goto LABEL_183;
  }
  double v81 = v111;
  uint64_t v82 = CVPixelBufferGetIOSurface(pixelBuffer);
  *((void *)&v95 + 1) = &v112;
  *(void *)&long long v95 = _asyncDecodeCompleteCallback;
  uint64_t v83 = JPEGDecompressSurfaceAsync(ValueAtIndex, v81, v82, (uint64_t)&v122, v102 != 0, v106, v120, v121, v95, 0);
  if (v83)
  {
LABEL_183:
    uint64_t v27 = v83;
    char v30 = 0;
    char v55 = 1;
    CFDataRef v29 = cf;
    goto LABEL_148;
  }
  fjds_enqueueDriverConnection(a1, ValueAtIndex);
  dispatch_semaphore_wait(dsema, 0xFFFFFFFFFFFFFFFFLL);
  dispatch_semaphore_t v84 = dsema;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 176));
  double v85 = malloc_type_malloc(0x10uLL, 0x20040A4A59CD2uLL);
  *double v85 = v84;
  v85[1] = *(void *)(a1 + 168);
  *(void *)(a1 + 16_Block_object_dispose(&STACK[0x280], 8) = v85;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 176));
  uint64_t v27 = v112;
  CFDataRef v29 = cf;
  uint64_t v60 = v103;
  if (v112)
  {
LABEL_175:
    unsigned int ValueAtIndex = 0;
LABEL_176:
    char v30 = 0;
    goto LABEL_119;
  }
LABEL_126:
  IOSurfaceRef v86 = v59;
  if (v111 != v59)
  {
    IOSurfaceDecrementUseCount(v111);
    IOSurfaceRef v86 = v111;
  }
  if (v86)
  {
    CFRelease(v86);
    IOSurfaceRef v111 = 0;
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 80));
  CMPhotoAddDefault601709MatrixToBufferIfAllowed(pixelBuffer, 1, 0);
  uint64_t v87 = fjds_getRequestStatus(a1, v60);
  uint64_t v27 = v87;
  if (!v51)
  {
    if (!v87)
    {
      float v93 = pixelBuffer;
      *double v99 = pixelBuffer;
      CVPixelBufferRef pixelBuffer = 0;
      goto LABEL_142;
    }
LABEL_179:
    unsigned int ValueAtIndex = 0;
    goto LABEL_180;
  }
  if (v87) {
    goto LABEL_179;
  }
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 88), 0xFFFFFFFFFFFFFFFFLL);
  if (v115) {
    int v90 = DWORD1(v123);
  }
  else {
    int v90 = 1;
  }
  char v30 = 1;
  uint64_t v91 = CMPhotoScaleAndRotateSessionTransformForSize(*(void *)(a1 + 208), pixelBuffer, 1, v90, v98, 0, 0, v101, *MEMORY[0x1E4F1DB20], *(CGFloat *)(MEMORY[0x1E4F1DB20] + 8), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 16), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 24), (double)v116, (double)v117, v88, v89, v96, v102, (__CVBuffer **)&v108);
  if (v91)
  {
    uint64_t v27 = v91;
    unsigned int ValueAtIndex = 0;
    char v55 = 0;
    goto LABEL_148;
  }
  if (pixelBuffer)
  {
    CFRelease(pixelBuffer);
    CVPixelBufferRef pixelBuffer = 0;
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 88));
  uint64_t v92 = fjds_getRequestStatus(a1, v60);
  if (v92)
  {
    uint64_t v27 = v92;
    unsigned int ValueAtIndex = 0;
    goto LABEL_146;
  }
  float v93 = (__CVBuffer *)v108;
  *double v99 = v108;
  CFTypeRef v108 = 0;
LABEL_142:
  unsigned int ValueAtIndex = 0;
  char v30 = 1;
  if (*(unsigned char *)(a1 + 180) && *(void *)((char *)v124 + 12) && v93)
  {
    CVBufferSetAttachment(v93, (CFStringRef)*MEMORY[0x1E4F24A00], *(CFTypeRef *)((char *)v124 + 12), kCVAttachmentMode_ShouldPropagate);
    unsigned int ValueAtIndex = 0;
    uint64_t v27 = 0;
    goto LABEL_146;
  }
  char v55 = 1;
  uint64_t v27 = 0;
LABEL_148:
  if (*(void *)((char *)v124 + 12)) {
    CFRelease(*(CFTypeRef *)((char *)v124 + 12));
  }
  if (ValueAtIndex) {
    fjds_enqueueDriverConnection(a1, ValueAtIndex);
  }
  if (v111 && v111 != buffer) {
    IOSurfaceDecrementUseCount(v111);
  }
  if (buffer && v105) {
    IOSurfaceUnlock(buffer, 1u, 0);
  }
  if (v111) {
    CFRelease(v111);
  }
  if (v29) {
    CFRelease(v29);
  }
  if ((v30 & 1) == 0) {
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 80));
  }
  if ((v55 & 1) == 0) {
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 88));
  }
  if (pixelBuffer) {
    CFRelease(pixelBuffer);
  }
  if (v108) {
    CFRelease(v108);
  }
  return v27;
}

uint64_t CMPhotoJPEGDecodeSessionCreateCGImageFromData(unsigned char *a1, const __CFData *a2, const __CFDictionary *a3, CGImageRef *a4)
{
  CVPixelBufferRef pixelBuffer = 0;
  unsigned __int8 v14 = 1;
  if (a1)
  {
    if (a1[16]) {
      return 4294951220;
    }
    CFDictionaryRef v8 = unpackCGImageRequestOptions(a3, &v14);
    if (v8) {
      return (uint64_t)v8;
    }
    uint64_t v9 = fjds_createPixelBufferFromJPEGData((uint64_t)a1, 0, a2, a3, &pixelBuffer, 0);
    if (v9)
    {
      uint64_t CGImageWithPixelBuffer = v9;
      CVPixelBufferRef v11 = pixelBuffer;
      if (!pixelBuffer) {
        return CGImageWithPixelBuffer;
      }
    }
    else
    {
      CFAllocatorRef v10 = CFGetAllocator(a1);
      CVPixelBufferRef v11 = pixelBuffer;
      uint64_t CGImageWithPixelBuffer = CMPhotoCreateCGImageWithPixelBuffer(v10, pixelBuffer, v14, a4);
      if (!v11) {
        return CGImageWithPixelBuffer;
      }
    }
    CFRelease(v11);
    return CGImageWithPixelBuffer;
  }
  return FigSignalErrorAt();
}

CFDictionaryRef unpackCGImageRequestOptions(const __CFDictionary *result, unsigned char *a2)
{
  if (!result)
  {
    LOBYTE(BoolValue_0) = 1;
LABEL_7:
    *a2 = BoolValue_0;
    return result;
  }
  CFDictionaryRef v3 = result;
  int BoolValue_0 = _getBoolValue_0(result, @"BackCGImageWithIOSurface", 1u);
  int FourCCValue = _getFourCCValue(v3);
  uint64_t result = (const __CFDictionary *)_getBoolValue_0(v3, @"AllowNonExactOutputDimensions", 0);
  if (BoolValue_0 || FourCCValue == 1111970369)
  {
    if (result) {
      uint64_t result = (const __CFDictionary *)FigSignalErrorAt();
    }
    goto LABEL_7;
  }
  return (const __CFDictionary *)FigSignalErrorAt();
}

const void *CMPhotoJPEGDecodeSessionDecodeDataToCVPixelBufferAsynchronously(uint64_t a1, const void *a2, CFDictionaryRef theDict, uint64_t a4)
{
  if (!a1) {
    goto LABEL_14;
  }
  if (*(unsigned char *)(a1 + 16))
  {
    int v12 = -16076;
    goto LABEL_15;
  }
  if (!a2
    && (!theDict
     || (CFDictionaryRef Value = CFDictionaryGetValue(theDict, @"SourceIOSurface")) == 0
     || (CFTypeID v11 = CFGetTypeID(Value), v11 != IOSurfaceGetTypeID()))
    || !a4)
  {
LABEL_14:
    int v12 = FigSignalErrorAt();
    if (!v12) {
      return 0;
    }
LABEL_15:
    global_queue = dispatch_get_global_queue(0, 0);
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = *(void *)"";
    void v15[2] = __CMPhotoJPEGDecodeSessionDecodeDataToCVPixelBufferAsynchronously_block_invoke_2;
    v15[3] = &unk_1E5E2F7C8;
    v15[4] = a4;
    v15[5] = a1;
    v15[6] = 0;
    int v16 = v12;
    dispatch_async(global_queue, v15);
    return 0;
  }
  unsigned int v8 = _getBoolValue_0(theDict, @"HighPriority", 0) == 0;
  int v18 = 0;
  if (!FigCFDictionaryGetInt64IfPresent())
  {
    RequestIDAndAddToInflightList = fjds_generateRequestIDAndAddToInflightList(a1);
    if (!a2) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  RequestIDAndAddToInflightList = v18;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
  CFSetAddValue(*(CFMutableSetRef *)(a1 + 32), v18);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  if (a2) {
LABEL_7:
  }
    CFRetain(a2);
LABEL_8:
  if (theDict) {
    CFRetain(theDict);
  }
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = *(void *)"";
  v17[2] = __CMPhotoJPEGDecodeSessionDecodeDataToCVPixelBufferAsynchronously_block_invoke;
  v17[3] = &unk_1E5E2F7A0;
  v17[6] = a1;
  v17[7] = RequestIDAndAddToInflightList;
  v17[8] = a2;
  v17[4] = a4;
  v17[5] = theDict;
  fjds_runRequestBlockAsynchronously(a1, v8, v17);
  return RequestIDAndAddToInflightList;
}

const void *fjds_generateRequestIDAndAddToInflightList(uint64_t a1)
{
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 40);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
  CFDictionaryRef v3 = (const void *)(*(void *)(a1 + 48) + 1);
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x280], 8) = v3;
  CFSetAddValue(*(CFMutableSetRef *)(a1 + 32), v3);
  os_unfair_lock_unlock(v2);
  return v3;
}

void fjds_runRequestBlockAsynchronously(uint64_t a1, unsigned int a2, const void *a3)
{
  char v6 = dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 56), 0);
  CFRetain((CFTypeRef)a1);
  if (!v6)
  {
    CFAllocatorRef v10 = *(NSObject **)(a1 + 72);
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = *(void *)"";
    v12[2] = __fjds_runRequestBlockAsynchronously_block_invoke_3;
    _OWORD v12[3] = &unk_1E5E2F8B0;
    v12[4] = a3;
    v12[5] = a1;
    CFTypeID v11 = v12;
LABEL_8:
    dispatch_async(v10, v11);
    return;
  }
  if (!*(unsigned char *)(a1 + 132))
  {
    CFAllocatorRef v10 = *(NSObject **)(a1 + 64);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = *(void *)"";
    block[2] = __fjds_runRequestBlockAsynchronously_block_invoke;
    block[3] = &unk_1E5E2F888;
    block[4] = a3;
    block[5] = a1;
    CFTypeID v11 = block;
    goto LABEL_8;
  }
  uint64_t v7 = malloc_type_malloc(0x10uLL, 0xA0040BD48D6D6uLL);
  *uint64_t v7 = _Block_copy(a3);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 128));
  v7[1] = 0;
  uint64_t v8 = a1 + 16 * a2;
  **(void **)(v8 + 104) = v7;
  *(void *)(v8 + 104) = v7 + 1;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 128));
  uint64_t v9 = *(NSObject **)(a1 + 64);
  dispatch_async_f(v9, (void *)a1, (dispatch_function_t)fjds_scheduleNextRequest);
}

void __CMPhotoJPEGDecodeSessionDecodeDataToCVPixelBufferAsynchronously_block_invoke(uint64_t a1)
{
  int v12 = 0;
  int BoolValue_0 = _getBoolValue_0(*(const __CFDictionary **)(a1 + 40), @"AsyncDecode", 0);
  uint64_t v3 = *(void *)(a1 + 48);
  if (!BoolValue_0)
  {
    uint64_t v4 = *(void *)(a1 + 56);
    CFDataRef v5 = *(const __CFData **)(a1 + 64);
    CFDictionaryRef v6 = *(const __CFDictionary **)(a1 + 40);
    int v7 = 0;
    goto LABEL_5;
  }
  if (*(unsigned char *)(v3 + 160))
  {
    uint64_t v4 = *(void *)(a1 + 56);
    CFDataRef v5 = *(const __CFData **)(a1 + 64);
    CFDictionaryRef v6 = *(const __CFDictionary **)(a1 + 40);
    int v7 = 1;
LABEL_5:
    fjds_createPixelBufferFromJPEGData(v3, v4, v5, v6, &v12, v7);
    goto LABEL_7;
  }
  FigSignalErrorAt();
LABEL_7:
  uint64_t v8 = *(const void **)(a1 + 64);
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v9 = *(const void **)(a1 + 40);
  if (v9) {
    CFRelease(v9);
  }
  fjds_removeRequestIDFromInflightList(*(void *)(a1 + 48), *(const void **)(a1 + 56));
  uint64_t v10 = *(void *)(a1 + 32);
  CFTypeID v11 = v12;
  (*(void (**)(void))(v10 + 16))();
  if (v11)
  {
    CFRelease(v11);
  }
}

void fjds_removeRequestIDFromInflightList(uint64_t a1, const void *a2)
{
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 40);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
  CFSetRemoveValue(*(CFMutableSetRef *)(a1 + 32), a2);
  os_unfair_lock_unlock(v4);
}

uint64_t __CMPhotoJPEGDecodeSessionDecodeDataToCVPixelBufferAsynchronously_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned int *)(a1 + 56), 0);
}

const void *CMPhotoJPEGDecodeSessionDecodeDataToCGImageAsynchronously(uint64_t a1, const void *a2, CFDictionaryRef theDict, uint64_t a4)
{
  char v20 = 1;
  if (!a1) {
    goto LABEL_14;
  }
  if (*(unsigned char *)(a1 + 16))
  {
    int v13 = -16076;
    goto LABEL_15;
  }
  if (!a2
    && (!theDict
     || (CFDictionaryRef Value = CFDictionaryGetValue(theDict, @"SourceIOSurface")) == 0
     || (CFTypeID v12 = CFGetTypeID(Value), v12 != IOSurfaceGetTypeID()))
    || !a4)
  {
LABEL_14:
    int v13 = FigSignalErrorAt();
    if (!v13) {
      return 0;
    }
LABEL_15:
    global_queue = dispatch_get_global_queue(0, 0);
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = *(void *)"";
    _OWORD v16[2] = __CMPhotoJPEGDecodeSessionDecodeDataToCGImageAsynchronously_block_invoke_2;
    v16[3] = &unk_1E5E2F818;
    v16[4] = a4;
    v16[5] = a1;
    v16[6] = 0;
    int v17 = v13;
    dispatch_async(global_queue, v16);
    return 0;
  }
  unsigned int v8 = unpackCGImageRequestOptions(theDict, &v20);
  if (v8)
  {
    int v13 = v8;
    goto LABEL_15;
  }
  unsigned int v9 = _getBoolValue_0(theDict, @"HighPriority", 0) == 0;
  RequestIDAndAddToInflightList = fjds_generateRequestIDAndAddToInflightList(a1);
  if (a2) {
    CFRetain(a2);
  }
  if (theDict) {
    CFRetain(theDict);
  }
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = *(void *)"";
  v18[2] = __CMPhotoJPEGDecodeSessionDecodeDataToCGImageAsynchronously_block_invoke;
  v18[3] = &unk_1E5E2F7F0;
  v18[6] = a1;
  v18[7] = RequestIDAndAddToInflightList;
  v18[8] = a2;
  char v19 = v20;
  v18[4] = a4;
  v18[5] = theDict;
  fjds_runRequestBlockAsynchronously(a1, v9, v18);
  return RequestIDAndAddToInflightList;
}

void __CMPhotoJPEGDecodeSessionDecodeDataToCGImageAsynchronously_block_invoke(uint64_t a1)
{
  CFTypeRef cf = 0;
  CVPixelBufferRef pixelBuffer = 0;
  int BoolValue_0 = _getBoolValue_0(*(const __CFDictionary **)(a1 + 40), @"AsyncDecode", 0);
  uint64_t v3 = *(void *)(a1 + 48);
  if (!BoolValue_0)
  {
    uint64_t v4 = *(void *)(a1 + 56);
    CFDataRef v5 = *(const __CFData **)(a1 + 64);
    CFDictionaryRef v6 = *(const __CFDictionary **)(a1 + 40);
    int v7 = 0;
    goto LABEL_5;
  }
  if (*(unsigned char *)(v3 + 160))
  {
    uint64_t v4 = *(void *)(a1 + 56);
    CFDataRef v5 = *(const __CFData **)(a1 + 64);
    CFDictionaryRef v6 = *(const __CFDictionary **)(a1 + 40);
    int v7 = 1;
LABEL_5:
    int v8 = fjds_createPixelBufferFromJPEGData(v3, v4, v5, v6, &pixelBuffer, v7);
    goto LABEL_7;
  }
  int v8 = FigSignalErrorAt();
LABEL_7:
  int v9 = v8;
  uint64_t v10 = *(const void **)(a1 + 64);
  if (v10) {
    CFRelease(v10);
  }
  CFTypeID v11 = *(const void **)(a1 + 40);
  if (v11) {
    CFRelease(v11);
  }
  if (!v9)
  {
    CFAllocatorRef v12 = CFGetAllocator(*(CFTypeRef *)(a1 + 48));
    CVPixelBufferRef v13 = pixelBuffer;
    CMPhotoCreateCGImageWithPixelBuffer(v12, pixelBuffer, *(unsigned __int8 *)(a1 + 72), (CGImageRef *)&cf);
    if (!v13) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  CVPixelBufferRef v13 = pixelBuffer;
  if (pixelBuffer) {
LABEL_13:
  }
    CFRelease(v13);
LABEL_14:
  fjds_removeRequestIDFromInflightList(*(void *)(a1 + 48), *(const void **)(a1 + 56));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t __CMPhotoJPEGDecodeSessionDecodeDataToCGImageAsynchronously_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned int *)(a1 + 56), 0);
}

uint64_t CMPhotoJPEGDecodeSessionCancelRequest(uint64_t a1, const void *a2)
{
  if (a1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      return 4294951220;
    }
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
    if (CFSetContainsValue(*(CFSetRef *)(a1 + 32), a2))
    {
      CFSetRemoveValue(*(CFMutableSetRef *)(a1 + 32), a2);
      uint64_t v5 = 0;
    }
    else
    {
      uint64_t v5 = 4294951223;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
    return v5;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t CMPhotoJPEGDecodeSessionDiscardCachedBuffers(uint64_t a1)
{
  if (a1)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      return 4294951220;
    }
    else
    {
      CMPhotoSurfacePoolFlushCaches(*(void *)(a1 + 200), 0);
      CMPhotoScaleAndRotateSessionDiscardCaches(*(void *)(a1 + 208), v3);
      return 0;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

CFStringRef CMPhotoJPEGDecodeSessionCopyPoolDebugInfo(uint64_t a1)
{
  CFStringRef v2 = CFCopyDescription(*(CFTypeRef *)(a1 + 200));
  CFStringRef v3 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"CMPhotoJPEGDecodeSession %p pool info: %@", a1, v2);
  if (v2) {
    CFRelease(v2);
  }
  return v3;
}

double fjds_init(uint64_t a1)
{
  *(void *)(a1 + 20_Block_object_dispose(&STACK[0x280], 8) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 12_Block_object_dispose(&STACK[0x280], 8) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x280], 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void fjds_finalize(uint64_t a1)
{
  CFStringRef v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 32) = 0;
  }
  CFStringRef v3 = *(NSObject **)(a1 + 56);
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = *(NSObject **)(a1 + 64);
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v5 = *(NSObject **)(a1 + 72);
  if (v5) {
    dispatch_release(v5);
  }
  CFDictionaryRef v6 = *(NSObject **)(a1 + 80);
  if (v6) {
    dispatch_release(v6);
  }
  int v7 = *(NSObject **)(a1 + 88);
  if (v7) {
    dispatch_release(v7);
  }
  CFArrayRef v8 = *(const __CFArray **)(a1 + 136);
  if (v8)
  {
    if (CFArrayGetCount(v8) >= 1)
    {
      CFIndex v9 = 0;
      do
      {
        unsigned int ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 136), v9);
        JPEGDeviceInterface_closeDriverConnection((uint64_t)ValueAtIndex);
        ++v9;
      }
      while (CFArrayGetCount(*(CFArrayRef *)(a1 + 136)) > v9);
    }
    CFRelease(*(CFTypeRef *)(a1 + 136));
  }
  CFTypeID v11 = *(NSObject **)(a1 + 152);
  if (v11) {
    dispatch_release(v11);
  }
  CFAllocatorRef v12 = *(const void **)(a1 + 200);
  if (v12) {
    CFRelease(v12);
  }
  CVPixelBufferRef v13 = *(const void **)(a1 + 208);
  if (v13) {
    CFRelease(v13);
  }
  if (*(unsigned char *)(a1 + 160))
  {
    while (1)
    {
      unsigned __int8 v14 = *(NSObject ***)(a1 + 168);
      if (!v14) {
        break;
      }
      int v15 = *v14;
      *(void *)(a1 + 16_Block_object_dispose(&STACK[0x280], 8) = v14[1];
      dispatch_release(v15);
      free(v14);
    }
    int v16 = *(NSObject **)(a1 + 184);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = *(void *)"";
    block[2] = __fjds_finalize_block_invoke;
    block[3] = &__block_descriptor_tmp_60;
    block[4] = a1;
    dispatch_sync(v16, block);
    IONotificationPortDestroy(*(IONotificationPortRef *)(a1 + 192));
    dispatch_release(*(dispatch_object_t *)(a1 + 184));
  }
}

__CFString *fjds_copyDebugDesc(unsigned int *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFMutableSetRef Mutable = CFStringCreateMutable(v2, 0);
  CFAllocatorRef v4 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, @"<CMPhotoJPEGDecodeSession %p [%p]>{ JPEG Cores: %i, Scaler Cores: %i, }", a1, v4, a1[5], a1[6]);
  return Mutable;
}

void __fjds_finalize_block_invoke(uint64_t a1)
{
}

uint64_t fjds_getRequestStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (a2)
  {
    CFAllocatorRef v4 = (os_unfair_lock_s *)(a1 + 40);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
    if (CFSetContainsValue(*(CFSetRef *)(a1 + 32), (const void *)v2)) {
      uint64_t v2 = 0;
    }
    else {
      uint64_t v2 = 4294951224;
    }
    os_unfair_lock_unlock(v4);
  }
  return v2;
}

uint64_t _getFourCCValue(const __CFDictionary *a1)
{
  uint64_t v1 = 875704422;
  unsigned int valuePtr = 875704422;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, @"OutputPixelFormat");
  if (Value)
  {
    CFNumberRef v3 = Value;
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v3))
    {
      CFNumberGetValue(v3, kCFNumberSInt32Type, &valuePtr);
      return valuePtr;
    }
  }
  return v1;
}

CFNumberRef _getIntValue_0(const __CFDictionary *a1, const void *a2)
{
  unsigned int valuePtr = 0;
  CFNumberRef result = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (result)
  {
    CFNumberRef v3 = result;
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v3))
    {
      CFNumberGetValue(v3, kCFNumberIntType, &valuePtr);
      return (const __CFNumber *)valuePtr;
    }
    else
    {
      CFTypeID v5 = CFBooleanGetTypeID();
      if (v5 == CFGetTypeID(v3)) {
        return (const __CFNumber *)CFBooleanGetValue(v3);
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

intptr_t _asyncDecodeCompleteCallback(uint64_t a1, int a2)
{
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  *(_DWORD *)a1 = a2;
  CFAllocatorRef v4 = *(NSObject **)(a1 + 8);
  return dispatch_semaphore_signal(v4);
}

intptr_t fjds_enqueueDriverConnection(uint64_t a1, unsigned int a2)
{
  CFAllocatorRef v4 = (os_unfair_lock_s *)(a1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(a1 + 136), 0, (const void *)a2);
  os_unfair_lock_unlock(v4);
  CFTypeID v5 = *(NSObject **)(a1 + 152);
  return dispatch_semaphore_signal(v5);
}

void fjds_scheduleNextRequest(uint64_t a1)
{
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 56), 0xFFFFFFFFFFFFFFFFLL);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 128));
  uint64_t v2 = 0;
  for (char i = 1; ; char i = 0)
  {
    char v4 = i;
    uint64_t v5 = a1 + 16 * v2;
    CFArrayRef v8 = *(uint64_t **)(v5 + 96);
    CFDictionaryRef v6 = (void *)(v5 + 96);
    int v7 = v8;
    if (v8) {
      break;
    }
    uint64_t v2 = 1;
    if ((v4 & 1) == 0)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 128));
      CFIndex v9 = *(NSObject **)(a1 + 56);
      dispatch_semaphore_signal(v9);
      return;
    }
  }
  uint64_t v10 = v7[1];
  *CFDictionaryRef v6 = v10;
  if (!v10) {
    *(void *)(a1 + 16 * v2 + 104) = v6;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 128));
  uint64_t v11 = *v7;
  free(v7);
  CFAllocatorRef v12 = *(NSObject **)(a1 + 72);
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = *(void *)"";
  unsigned char v13[2] = __fjds_scheduleNextRequest_block_invoke;
  v13[3] = &unk_1E5E2F8D8;
  v13[4] = v11;
  v13[5] = a1;
  dispatch_async(v12, v13);
}

void __fjds_runRequestBlockAsynchronously_block_invoke(uint64_t a1)
{
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(void *)(a1 + 40) + 56), 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v2 = *(void *)(a1 + 40);
  CFNumberRef v3 = *(NSObject **)(v2 + 72);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = *(void *)"";
  v4[2] = __fjds_runRequestBlockAsynchronously_block_invoke_2;
  v4[3] = &unk_1E5E2F860;
  v4[4] = *(void *)(a1 + 32);
  v4[5] = v2;
  dispatch_async(v3, v4);
}

void __fjds_runRequestBlockAsynchronously_block_invoke_2(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 40) + 56));
  uint64_t v2 = *(const void **)(a1 + 40);
  CFRelease(v2);
}

void __fjds_runRequestBlockAsynchronously_block_invoke_3(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 40) + 56));
  uint64_t v2 = *(const void **)(a1 + 40);
  CFRelease(v2);
}

void __fjds_scheduleNextRequest_block_invoke(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 40) + 56));
  _Block_release(*(const void **)(a1 + 32));
  uint64_t v2 = *(const void **)(a1 + 40);
  CFRelease(v2);
}

uint64_t JPEGCompressionPluginClass_create(uint64_t a1, const __CFDictionary *a2)
{
  if (!a1)
  {
    uint64_t v5 = 0;
    goto LABEL_26;
  }
  char v4 = (unsigned int *)malloc_type_calloc(1uLL, 0x28uLL, 0x106004064F55C27uLL);
  uint64_t v5 = v4;
  if (!v4)
  {
    uint64_t v11 = 4294950305;
    goto LABEL_24;
  }
  v4[2] = 5;
  unsigned int *v4 = 0;
  if (!a2) {
    goto LABEL_16;
  }
  CMPhotoCFDictionaryGetBooleanIfPresent(a2, @"SyncEncode", (unsigned char *)v4 + 4);
  CMPhotoCFDictionaryGetInt32IfPresent(a2, @"Subsampling", v5 + 2);
  int v14 = 0;
  FigCFDictionaryGetIntIfPresent();
  char v13 = 0;
  if (CMPhotoCFDictionaryGetBooleanIfPresent(a2, @"PreferSoftwareCodec", &v13)) {
    BOOL v6 = v13 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6) {
    unsigned int *v5 = 1;
  }
  if (CMPhotoCFDictionaryGetBooleanIfPresent(a2, @"RequireHardwareCodec", &v13)) {
    BOOL v7 = v13 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    goto LABEL_15;
  }
  if (*v5 == 1)
  {
LABEL_26:
    uint64_t v11 = 4294950306;
    goto LABEL_24;
  }
  unsigned int *v5 = 2;
LABEL_15:
  *((void *)v5 + 2) = CFDictionaryCreateCopy(*(CFAllocatorRef *)a1, a2);
  uint64_t v9 = *v5;
  if (!v9)
  {
LABEL_16:
    if (CMPhotoUnifiedJPEGEncoderIsHardwareAvailable()) {
      uint64_t v9 = 2;
    }
    else {
      uint64_t v9 = 1;
    }
    unsigned int *v5 = v9;
  }
  unsigned int *v5 = CMPhotoGetEncodeAccelerationModeOverride(v9, v8);
  if (*((unsigned char *)v5 + 4)
    || (dispatch_queue_t v10 = dispatch_queue_create("com.apple.coremedia.jpeg-encoder", MEMORY[0x1E4F14430]),
        (*((void *)v5 + 3) = v10) != 0))
  {
    uint64_t v11 = CMPhotoUnifiedJPEGEncoderCreate(*(const __CFAllocator **)a1, *(const void **)(a1 + 16), *(const void **)(a1 + 8), 0, (void *)v5 + 4);
    if (!v11)
    {
      *(void *)(a1 + 144) = v5;
      uint64_t v5 = 0;
    }
  }
  else
  {
    uint64_t v11 = FigSignalErrorAt();
  }
LABEL_24:
  PluginInstance_Dispose_0(v5);
  return v11;
}

void JPEGCompressionPluginClass_dispose(uint64_t a1)
{
  if (a1) {
    PluginInstance_Dispose_0(*(void **)(a1 + 144));
  }
}

uint64_t JPEGCompressionPluginClass_encode(uint64_t a1, CFTypeRef cf, uint64_t a3, long long *a4, long long *a5, uint64_t a6, uint64_t a7)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v8 = *(void *)(a1 + 144);
  if (!v8) {
    return 4294950195;
  }
  if (!cf) {
    return 4294950306;
  }
  if (*(unsigned char *)(v8 + 4))
  {
    LOBYTE(v23[0]) = 0;
    v23[1] = a1;
    _OWORD v23[2] = CFRetain(cf);
    long long v13 = a4[1];
    long long v24 = *a4;
    long long v25 = v13;
    long long v14 = a5[1];
    long long v26 = *a5;
    long long v27 = v14;
    uint64_t v28 = a7;
    uint64_t v29 = 0;
    _dispatch_encode(v23);
  }
  else
  {
    int v15 = (char *)malloc_type_calloc(1uLL, 0x68uLL, 0x10A0040D1AAF97AuLL);
    if (!v15) {
      return 4294950305;
    }
    int v16 = v15;
    CFTypeRef v17 = CFRetain(cf);
    long long v18 = *a4;
    long long v22 = a4[1];
    long long v19 = *a5;
    long long v21 = a5[1];
    *int v16 = 1;
    *((void *)v16 + 1) = a1;
    *((void *)v16 + 2) = v17;
    *(_OWORD *)(v16 + 40) = v22;
    *(_OWORD *)(v16 + 24) = v18;
    *(_OWORD *)(v16 + 72) = v21;
    *(_OWORD *)(v16 + 56) = v19;
    *((void *)v16 + 11) = a7;
    *((void *)v16 + 12) = 0;
    dispatch_async_f(*(dispatch_queue_t *)(v8 + 24), v16, (dispatch_function_t)_dispatch_encode);
  }
  return 0;
}

uint64_t JPEGCompressionPluginClass_completeEncodes(uint64_t a1)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t v1 = *(void *)(a1 + 144);
  if (!v1) {
    return 4294950195;
  }
  if (!*(unsigned char *)(v1 + 4)) {
    dispatch_barrier_sync_f(*(dispatch_queue_t *)(v1 + 24), 0, (dispatch_function_t)_dispatch_empty_0);
  }
  return 0;
}

void PluginInstance_Dispose_0(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (const void *)*((void *)a1 + 2);
    if (v2)
    {
      CFRelease(v2);
      *((void *)a1 + 2) = 0;
    }
    CMPhotoUnifiedJPEGEncoderDestroy(*((void **)a1 + 4));
    *((void *)a1 + 4) = 0;
    CFNumberRef v3 = *((void *)a1 + 3);
    if (v3) {
      dispatch_release(v3);
    }
  }
  free(a1);
}

void _dispatch_encode(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v1 = (__CVBuffer *)a1[2];
  uint64_t v4 = a1[3];
  uint64_t v3 = a1[4];
  uint64_t v6 = a1[5];
  uint64_t v5 = a1[6];
  unint64_t v8 = a1[7];
  unint64_t v7 = a1[8];
  size_t v10 = a1[9];
  size_t v9 = a1[10];
  uint64_t v31 = a1[11];
  if (*(unsigned char *)a1)
  {
    size_t v11 = a1[10];
    free(a1);
    size_t v9 = v11;
  }
  uint64_t v32 = v2;
  CFAllocatorRef v12 = *(unsigned int **)(v2 + 144);
  CFTypeRef v36 = 0;
  CFTypeRef cf = 0;
  size_t v13 = v10;
  size_t v14 = v10 + v8;
  size_t v15 = v6 + v4;
  size_t v16 = v9 + v7;
  size_t v17 = v5 + v3;
  if (v14 <= v15 && v16 <= v17)
  {
    long long v18 = v1;
LABEL_16:
    uint64_t v25 = *((void *)v12 + 4);
    uint64_t v26 = *((void *)v12 + 2);
    uint64_t v27 = *v12;
    uint64_t v28 = v12[2];
    *(void *)&long long v33 = v8;
    *((void *)&v33 + 1) = v7;
    size_t v34 = v13;
    size_t v35 = v9;
    uint64_t v29 = CMPhotoUnifiedJPEGEncoderEncode(v25, v26, (uint64_t)v18, 0, &v33, 1, v27, v28, (uint64_t)v12, (CMSampleBufferRef *)&cf);
    CFTypeRef v30 = cf;
    goto LABEL_17;
  }
  long long v18 = v1;
  long long v19 = v1;
  size_t v20 = v9;
  uint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(v19);
  uint64_t PixelBuffer = CMPhotoSurfacePoolCreatePixelBuffer(*(const void **)(v32 + 8), PixelFormatType, v13, v20, 0, 0, 0, 0, 0, 0, (CVPixelBufferRef *)&v36);
  if (!PixelBuffer)
  {
    unint64_t v23 = v17 - v7;
    if (v16 <= v17) {
      unint64_t v23 = v20;
    }
    unint64_t v24 = v15 - v8;
    if (v14 <= v15) {
      unint64_t v24 = v13;
    }
    uint64_t PixelBuffer = CMPhotoScaleAndRotateSessionTransformWithRect(*(void *)(v32 + 16), v18, 1, 1, (CVPixelBufferRef)v36, 0, 1, 1u, (double)v8, (double)v7, (double)v24, (double)v23, 0.0, 0.0, (double)v24, (double)v23);
    if (!PixelBuffer)
    {
      uint64_t PixelBuffer = VTFillPixelBufferBorderWithBlack();
      if (!PixelBuffer)
      {
        if (v18) {
          CFRelease(v18);
        }
        unint64_t v8 = 0;
        unint64_t v7 = 0;
        long long v18 = (__CVBuffer *)v36;
        CFTypeRef v36 = 0;
        size_t v9 = v20;
        goto LABEL_16;
      }
    }
  }
  uint64_t v29 = PixelBuffer;
  CFTypeRef v30 = 0;
LABEL_17:
  (*(void (**)(uint64_t, uint64_t, CFTypeRef, void, uint64_t))(v32 + 128))(v32, v29, v30, *(void *)(v32 + 136), v31);
  if (cf) {
    CFRelease(cf);
  }
  if (v18) {
    CFRelease(v18);
  }
  if (v36) {
    CFRelease(v36);
  }
}

uint64_t CMPhotoCreateImageSurfaceWrappingPixelBuffer(__CVBuffer *a1, unsigned char *a2, __IOSurface **a3)
{
  uint64_t v3 = 4294950306;
  if (a1 && a2 && a3)
  {
    CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!Mutable) {
      return 4294950305;
    }
    CFMutableDictionaryRef v8 = Mutable;
    int v31 = *a2;
    if (!*a2)
    {
      uint64_t v9 = CVPixelBufferLockBaseAddress(a1, 1uLL);
      if (v9)
      {
        uint64_t v3 = v9;
LABEL_23:
        CFRelease(v8);
        return v3;
      }
      *a2 = 1;
    }
    PixelBufferCFNumberRef Size = CMPhotoGetPixelBufferSize(a1);
    double v12 = v11;
    OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
    unint64_t BaseAddress = (unint64_t)CVPixelBufferGetBaseAddress(a1);
    FigCFDictionarySetInt64();
    unint64_t v41 = (unsigned char *)BaseAddress;
    if ((*MEMORY[0x1E4F14AF0] & BaseAddress) == 0)
    {
      unint64_t v15 = vcvtad_u64_f64(v12);
      CMPhotoCFDictionarySetInt(v8, (const void *)*MEMORY[0x1E4F2EFE8], 0);
      CMPhotoCFDictionarySetSize(v8, *MEMORY[0x1E4F2F2C0], vcvtad_u64_f64(PixelBufferSize));
      CMPhotoCFDictionarySetSize(v8, *MEMORY[0x1E4F2F0E8], v15);
      CMPhotoCFDictionarySetInt32(v8, (const void *)*MEMORY[0x1E4F2F150], PixelFormatType);
      uint64_t BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(PixelFormatType);
      if (CVPixelBufferIsPlanar(a1))
      {
        if (CVPixelBufferGetPlaneCount(a1) != 2)
        {
          CFMutableDictionaryRef v21 = 0;
          size_t v17 = 0;
          uint64_t v3 = 4294950301;
          goto LABEL_29;
        }
        DataCFNumberRef Size = CVPixelBufferGetDataSize(a1);
        size_t v17 = CFArrayCreateMutable(allocator, 2, MEMORY[0x1E4F1D510]);
        if (v17)
        {
          uint64_t v39 = BytesPerPixelForPixelFormat;
          CFDictionaryRef theDict = v8;
          size_t v18 = 0;
          uint64_t v38 = *MEMORY[0x1E4F2F258];
          uint64_t v37 = *MEMORY[0x1E4F2F220];
          uint64_t v36 = *MEMORY[0x1E4F2F170];
          uint64_t v35 = *MEMORY[0x1E4F2F178];
          uint64_t v34 = *MEMORY[0x1E4F2F240];
          uint64_t v33 = *MEMORY[0x1E4F2F248];
          char v19 = 1;
          while (1)
          {
            char v20 = v19;
            CFMutableDictionaryRef v21 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            if (!v21)
            {
              uint64_t v3 = 4294950305;
              CFMutableDictionaryRef v8 = theDict;
              goto LABEL_29;
            }
            CFArrayAppendValue(v17, v21);
            size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, v18);
            size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, v18);
            size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, v18);
            BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, v18);
            uint64_t v26 = (char *)(BaseAddressOfPlane - v41);
            if (BaseAddressOfPlane < v41)
            {
              CFMutableDictionaryRef v8 = theDict;
              goto LABEL_28;
            }
            if ((unint64_t)&v26[BytesPerRowOfPlane * HeightOfPlane] > DataSize) {
              break;
            }
            CMPhotoCFDictionarySetSize(v21, v38, WidthOfPlane);
            CMPhotoCFDictionarySetSize(v21, v37, HeightOfPlane);
            CMPhotoCFDictionarySetSize(v21, v36, v39 << v18);
            CMPhotoCFDictionarySetSize(v21, v35, BytesPerRowOfPlane);
            CMPhotoCFDictionarySetSize(v21, v34, v26);
            CMPhotoCFDictionarySetSize(v21, v33, BytesPerRowOfPlane * HeightOfPlane);
            CFRelease(v21);
            char v19 = 0;
            size_t v18 = 1;
            if ((v20 & 1) == 0)
            {
              CFMutableDictionaryRef v8 = theDict;
              CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E4F2F238], v17);
              goto LABEL_19;
            }
          }
          CFMutableDictionaryRef v8 = theDict;
          goto LABEL_28;
        }
      }
      else
      {
        size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
        CMPhotoCFDictionarySetInt(v8, (const void *)*MEMORY[0x1E4F2F138], 0);
        CMPhotoCFDictionarySetSize(v8, *MEMORY[0x1E4F2EFE0], BytesPerRow);
        CMPhotoCFDictionarySetSize(v8, *MEMORY[0x1E4F2EFD8], BytesPerPixelForPixelFormat);
        CMPhotoCFDictionarySetSize(v8, *MEMORY[0x1E4F2EFB8], BytesPerRow * v15);
        size_t v17 = 0;
LABEL_19:
        uint64_t v28 = IOSurfaceCreate(v8);
        if (v28)
        {
          uint64_t v29 = v28;
          IOSurfaceSetValue(v28, (CFStringRef)*MEMORY[0x1E4F2F128], @"CMPhoto Wrapped Image");
          uint64_t v3 = 0;
          *a3 = v29;
LABEL_21:
          if (v17) {
            CFRelease(v17);
          }
          goto LABEL_23;
        }
      }
      CFMutableDictionaryRef v21 = 0;
      uint64_t v3 = 4294950305;
      goto LABEL_29;
    }
    CFMutableDictionaryRef v21 = 0;
    size_t v17 = 0;
LABEL_28:
    uint64_t v3 = FigSignalErrorAt();
LABEL_29:
    if (!v31) {
      CVPixelBufferUnlockBaseAddress(a1, 1uLL);
    }
    if (v21) {
      CFRelease(v21);
    }
    goto LABEL_21;
  }
  return v3;
}

uint64_t _ioSurfaceDeallocator_allocate()
{
  return 0;
}

void _ioSurfaceDeallocator_deallocateWithContext(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(__IOSurface **)a2;
  IOSurfaceUnlock(*(IOSurfaceRef *)a2, *(_DWORD *)(a2 + 8), 0);
  if (*(unsigned char *)(a2 + 12)) {
    IOSurfaceDecrementUseCount(v3);
  }
  if (v3) {
    CFRelease(v3);
  }
  free((void *)a2);
}

uint64_t CMPhotoSampleBufferCopyIOSurfaceBacking(uint64_t a1, void *a2, void *a3, void *a4)
{
  return 0;
}

uint64_t _copyIOSurfaceBackingFromAttachmentBearer(uint64_t target, void *a2, void *a3, void *a4)
{
  uint64_t v6 = (const void *)target;
  if (a2)
  {
    target = (uint64_t)CMGetAttachment((CMAttachmentBearerRef)target, @"IOSurface", 0);
    if (target) {
      target = (uint64_t)CFRetain((CFTypeRef)target);
    }
    *a2 = target;
  }
  if (a3)
  {
    int valuePtr = 0;
    target = (uint64_t)CMGetAttachment(v6, @"IOSurfaceDataOffset", 0);
    if (target)
    {
      target = CFNumberGetValue((CFNumberRef)target, kCFNumberIntType, &valuePtr);
      uint64_t v8 = valuePtr;
    }
    else
    {
      uint64_t v8 = 0;
    }
    *a3 = v8;
  }
  if (a4)
  {
    int v10 = 0;
    target = (uint64_t)CMGetAttachment(v6, @"IOSurfaceDataSize", 0);
    if (target)
    {
      target = CFNumberGetValue((CFNumberRef)target, kCFNumberIntType, &v10);
      uint64_t v9 = v10;
    }
    else
    {
      uint64_t v9 = 0;
    }
    *a4 = v9;
  }
  return target;
}

uint64_t CMPhotoCopyBackingIOSurfaceFromStorage(uint64_t a1, int a2, void *a3, void *a4, void *a5)
{
  if (a3)
  {
    *a3 = 0;
    if (a2 != 2) {
      return 4294950303;
    }
    _copyIOSurfaceBackingFromAttachmentBearer(a1, a3, a4, a5);
    if (!*a3) {
      return 4294950303;
    }
  }
  else if (a2 == 2)
  {
    _copyIOSurfaceBackingFromAttachmentBearer(a1, 0, a4, a5);
  }
  return 0;
}

uint64_t VideoQualityControllerClass_create_2(uint64_t a1, int a2, uint64_t a3, uint64_t a4, CFTypeRef cf)
{
  if (cf)
  {
    CFTypeID v10 = CFGetTypeID(cf);
    if (v10 != CFDictionaryGetTypeID())
    {
      uint64_t v18 = FigSignalErrorAt();
      goto LABEL_36;
    }
  }
  pthread_once(&_checkFigNoteTraceOnce_onceToken_5, (void (*)(void))_registerFigNoteTrace_5);
  double v11 = (float *)malloc_type_calloc(1uLL, 0x38uLL, 0x106004071E7DF65uLL);
  double v12 = v11;
  if (!v11)
  {
    uint64_t v18 = 4294950305;
    goto LABEL_37;
  }
  *(void *)double v11 = a3;
  *((void *)v11 + 1) = a4;
  *((void *)v11 + 2) = -1;
  v11[6] = -1.0;
  *((unsigned char *)v11 + 40) = 1;
  *((unsigned char *)v11 + 2_Block_object_dispose(&STACK[0x280], 8) = 1;
  *((_DWORD *)v11 + _Block_object_dispose(&STACK[0x280], 8) = a2;
  *((_DWORD *)v11 + 9) = 1;
  if (cf)
  {
    if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"QualityValue"))
    {
      float v22 = -1.0;
      if (!CMPhotoCFDictionaryGetFloatIfPresent((CFDictionaryRef)cf, @"QualityValue", &v22)
        || v22 < 0.0
        || v22 > 1.0)
      {
        goto LABEL_38;
      }
      float v13 = roundf(v22 * 1000.0);
      *(_DWORD *)(a1 + 2_Block_object_dispose(&STACK[0x280], 8) = vcvtas_u32_f32(v22 * 1000.0);
      void v12[6] = (float)v13 / 1000.0;
    }
    else if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"QPValue"))
    {
      int v20 = 2;
      unsigned int v21 = -1;
      if (!CMPhotoCFDictionaryGetIntIfPresent((CFDictionaryRef)cf, @"QPValue", &v21) || v21 > 0x33) {
        goto LABEL_38;
      }
      if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"PFrameQPOffsetValue"))
      {
        if (!CMPhotoCFDictionaryGetIntIfPresent((CFDictionaryRef)cf, @"PFrameQPOffsetValue", &v20)) {
          goto LABEL_38;
        }
        int v14 = v20;
        unsigned int v15 = v21;
        if (v20 + v21 >= 0x34) {
          goto LABEL_38;
        }
      }
      else
      {
        int v14 = 2;
        unsigned int v15 = v21;
      }
      *((_DWORD *)v12 + 4) = v15;
      *((_DWORD *)v12 + 5) = v14;
      *(_DWORD *)(a1 + 2_Block_object_dispose(&STACK[0x280], 8) = v15;
      *((unsigned char *)v12 + 40) = 0;
      *((unsigned char *)v12 + 2_Block_object_dispose(&STACK[0x280], 8) = 0;
    }
    if (a2 != 1635148593)
    {
      if (a2 != 1752589105
        || !CMPhotoReuseCompressionSessionForDifferentQuantizationMatrixPresetDisabled())
      {
LABEL_29:
        CMPhotoCFDictionaryGetBooleanIfPresent((CFDictionaryRef)cf, @"EnableQPMod", (unsigned char *)v12 + 28);
        if (*((_DWORD *)v12 + 4) != -1) {
          goto LABEL_33;
        }
        goto LABEL_30;
      }
      *(float *)(a1 + 32) = v12[9];
LABEL_28:
      FigCFDictionaryGetInt32IfPresent();
      goto LABEL_29;
    }
    if (!CFDictionaryContainsKey((CFDictionaryRef)cf, @"EntropyMode"))
    {
LABEL_27:
      *(_DWORD *)(a1 + 33) = 3;
      goto LABEL_28;
    }
    CFDictionaryGetValue((CFDictionaryRef)cf, @"EntropyMode");
    if (FigCFEqual() || FigCFEqual())
    {
      *(unsigned char *)(a1 + 32) = FigCFEqual();
      goto LABEL_27;
    }
LABEL_38:
    uint64_t v18 = FigSignalErrorAt();
    goto LABEL_37;
  }
LABEL_30:
  if (v12[6] == -1.0)
  {
    float v16 = CMPhotoGetHEIFQualityDefault(*(void *)(a1 + 40), *(void *)(a1 + 48)) * 1000.0;
    *(_DWORD *)(a1 + 2_Block_object_dispose(&STACK[0x280], 8) = vcvtas_u32_f32(v16);
    void v12[6] = (float)roundf(v16) / 1000.0;
  }
  if (!cf)
  {
    CFTypeRef v17 = 0;
    goto LABEL_35;
  }
LABEL_33:
  CFTypeRef v17 = CFRetain(cf);
LABEL_35:
  uint64_t v18 = 0;
  *((void *)v12 + 6) = v17;
  *(void *)(a1 + 56) = v12;
LABEL_36:
  double v12 = 0;
LABEL_37:
  QualityController_dispose(v12);
  return v18;
}

void VideoQualityControllerClass_dispose_1(uint64_t a1)
{
  *(void *)(a1 + 56) = 0;
}

uint64_t VideoQualityControllerClass_setSessionProperties_1(uint64_t a1, __CFDictionary *a2)
{
  uint64_t v4 = *(void *)(a1 + 56);
  if (*(unsigned char *)(v4 + 40))
  {
    FigCFDictionarySetFloat();
  }
  else
  {
    CMPhotoCFDictionarySetInt32(a2, @"InitialQPI", *(_DWORD *)(v4 + 16));
    if (*(unsigned char *)(a1 + 37)) {
      CMPhotoCFDictionarySetInt32(a2, @"InitialQPP", *(_DWORD *)(v4 + 20) + *(_DWORD *)(v4 + 16));
    }
  }
  if (!*(unsigned char *)(v4 + 40) && (*(_DWORD *)(v4 + 32) == 1635148593 || *(unsigned char *)(a1 + 37)))
  {
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
  }
  int v5 = *(_DWORD *)(v4 + 32);
  if (v5 == 1752589105)
  {
    if (!*(unsigned char *)(v4 + 28)) {
      CMPhotoCFDictionarySetBoolean(a2, (const void *)*MEMORY[0x1E4F448B8], 0);
    }
    int v8 = *(_DWORD *)(v4 + 36);
    int v11 = v8;
    CFDictionaryRef v9 = *(const __CFDictionary **)(v4 + 48);
    if (v9 && CFDictionaryContainsKey(v9, @"QuantizationScalingMatrixPreset"))
    {
      CMPhotoCFDictionaryGetIntIfPresent(*(CFDictionaryRef *)(v4 + 48), @"QuantizationScalingMatrixPreset", &v11);
      int v8 = v11;
    }
    if ((v8 - 1) > 3) {
      return 0;
    }
    goto LABEL_22;
  }
  if (v5 == 1635148593)
  {
    int v10 = 3;
    CFDictionaryRef v6 = *(const __CFDictionary **)(v4 + 48);
    if (v6
      && CFDictionaryContainsKey(v6, @"QuantizationScalingMatrixPreset")
      && (!CMPhotoCFDictionaryGetIntIfPresent(*(CFDictionaryRef *)(v4 + 48), @"QuantizationScalingMatrixPreset", &v10)|| (v10 - 1) >= 4))
    {
      return FigSignalErrorAt();
    }
LABEL_22:
    FigCFDictionarySetInt32();
  }
  return 0;
}

uint64_t VideoQualityControllerClass_setTileProperties_0()
{
  return 0;
}

uint64_t CMPhotoCompressionSuggestedPaddingForOptions(CFDictionaryRef theDict, unint64_t *a2, unint64_t *a3, double a4, double a5)
{
  if (!((unint64_t)a2 | (unint64_t)a3)) {
    return 0;
  }
  double v8 = a5;
  uint64_t v43 = 0;
  long long v44 = 0uLL;
  double v45 = 0.0;
  double v46 = 0.0;
  double v47 = a4;
  double v48 = a5;
  if (!theDict)
  {
    double v15 = 0.0;
    BOOL v16 = 1;
    double v17 = a4;
    double v18 = 0.0;
    goto LABEL_11;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"SourceCropRect");
  if (Value)
  {
    memset(&rect, 0, sizeof(rect));
    BOOL v11 = CGRectMakeWithDictionaryRepresentation(Value, &rect);
    double v12 = v8;
    double v13 = a4;
    if (v11)
    {
      uint64_t result = CMPhotoApplyCropRectToRect(&v45, rect.origin.x, rect.origin.y, rect.size.width, rect.size.height);
      if (result) {
        return result;
      }
      double v13 = v47;
      double v12 = v48;
    }
  }
  else
  {
    double v12 = v8;
    double v13 = a4;
  }
  uint64_t result = CMPhotoGetTilingOption(theDict, vcvtad_u64_f64(v13), vcvtad_u64_f64(v12), 0, 0, &v43, (char *)&v43 + 1, (unint64_t *)&v44, 0);
  if (!result)
  {
    double v18 = v45;
    double v15 = v46;
    double v17 = v47;
    a5 = v48;
    BOOL v16 = (_BYTE)v43 == 0;
LABEL_11:
    double v19 = round(v18);
    double v20 = round(v15);
    double v21 = round(v17);
    double v22 = round(a5);
    if (v16)
    {
      long long v44 = kCMPhotoTilingDefaultTileSize;
      if (v22 <= 6144.0 && v21 <= 6144.0 || v21 * v22 <= 67108864.0)
      {
        double v25 = 1024.0;
      }
      else
      {
        long long v44 = kCMPhotoTilingDefaultTileSizeAboveMaxPictureSize;
        double v25 = 2048.0;
      }
      double v26 = v25;
      BOOL v27 = v21 >= v25;
      if (v22 >= v26) {
        BOOL v27 = 1;
      }
      BYTE1(v43) = v27;
    }
    unint64_t v28 = (unint64_t)v19;
    unint64_t v29 = (unint64_t)v20;
    if ((unint64_t)v19 & 0x7F | (unint64_t)v20 & 0x3F)
    {
      unint64_t v37 = 0;
      unint64_t v38 = 0;
      if (!a2)
      {
LABEL_36:
        uint64_t result = 0;
        if (a3) {
          *a3 = v37;
        }
        return result;
      }
    }
    else
    {
      double v30 = round(a4);
      double v31 = round(v8);
      unint64_t v32 = (unint64_t)v21;
      unint64_t v33 = (unint64_t)v22;
      if (BYTE1(v43))
      {
        unint64_t v34 = (v32 + (unint64_t)v44 - 1) / (unint64_t)v44;
        unint64_t v35 = v33 + *((void *)&v44 + 1) - 1;
        unint64_t v33 = *((void *)&v44 + 1);
        unint64_t v32 = v44;
        uint64_t v36 = v35 / *((void *)&v44 + 1);
      }
      else
      {
        unint64_t v34 = 1;
        uint64_t v36 = 1;
      }
      unint64_t v39 = v29 + v36 * v33;
      double v40 = (double)(v28 + v34 * v32) - v30;
      if (v40 < 0.0) {
        double v40 = 0.0;
      }
      unint64_t v38 = (unint64_t)v40;
      double v41 = (double)v39 - v31;
      if (v41 < 0.0) {
        double v41 = 0.0;
      }
      unint64_t v37 = (unint64_t)v41;
      if (!a2) {
        goto LABEL_36;
      }
    }
    *a2 = v38;
    goto LABEL_36;
  }
  return result;
}

uint64_t CMPhotoCompressionCreateNativePixelFormatArray()
{
  return FigSignalErrorAt();
}

uint64_t CMPhotoCompressionWriteFileContainerFromImage(const __CFDictionary *a1, opaqueCMSampleBuffer *a2, uint64_t a3, uint64_t a4, int a5, const void *a6)
{
  if (a2)
  {
    if (!a6) {
      return FigSignalErrorAt();
    }
    CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!Mutable) {
      return 4294950305;
    }
    int v14 = Mutable;
    uint64_t v15 = CMPhotoCFDictionarySetInt(Mutable, @"ContainerFormat", a5);
    if (v15 || (uint64_t v15 = CMPhotoCFDictionarySetInt(v14, @"BackingType", 3), v15))
    {
      uint64_t ContainerFromImageExt = v15;
    }
    else
    {
      CFDictionarySetValue(v14, @"BackingFileURL", a6);
      if (!a3)
      {
        double v17 = 0;
        double v18 = 0;
        goto LABEL_10;
      }
      CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v12, 0, a1);
      if (MutableCopy)
      {
        double v17 = MutableCopy;
        CFDictionaryRemoveValue(MutableCopy, @"Tiling");
        CMPhotoCFDictionarySetInt(v17, @"MaxPixelSize", a3);
        double v18 = a2;
LABEL_10:
        uint64_t ContainerFromImageExt = CMPhotoCompressionCreateContainerFromImageExt(v14, a1, a2, v17, v18, a4);
        CFRelease(v14);
        if (!v17) {
          return ContainerFromImageExt;
        }
        double v20 = v17;
LABEL_12:
        CFRelease(v20);
        return ContainerFromImageExt;
      }
      uint64_t ContainerFromImageExt = 4294950305;
    }
    double v20 = v14;
    goto LABEL_12;
  }
  return FigSignalErrorAt();
}

uint64_t CMPhotoCompressionCreateContainerFromImageExt(const __CFDictionary *a1, CFDictionaryRef theDict, opaqueCMSampleBuffer *a3, const __CFDictionary *a4, opaqueCMSampleBuffer *a5, uint64_t a6)
{
  *(void *)double v19 = 0;
  if (!a3 || !a1 || theDict && CFDictionaryContainsKey(theDict, @"DryRun"))
  {
    uint64_t v17 = FigSignalErrorAt();
    double v13 = 0;
  }
  else
  {
    CompressionSessiouint64_t n = CMPhotoOneShotSessionPoolGetCompressionSession();
    double v13 = CompressionSession;
    if (CompressionSession)
    {
      unsigned int v14 = CMPhotoCompressionSessionOpenEmptyContainer((uint64_t)CompressionSession, a1);
      if (!v14)
      {
        unsigned int v14 = CMPhotoCompressionSessionAddImage((uint64_t)v13, theDict, a3, (CFIndex *)v19);
        if (!v14
          && (!a5 || (unsigned int v14 = CMPhotoCompressionSessionAddThumbnail((uint64_t)v13, *(CFIndex *)v19, a4, a5)) == 0)
          && (!a6
           || (unsigned int v14 = CMPhotoCompressionSessionAddMetadataFromImageProperties((uint64_t)v13, *(uint64_t *)v19, 0, a6)) == 0))
        {
          unsigned int v14 = CMPhotoCompressionSessionCloseContainerAndCopyBacking((uint64_t)v13);
        }
      }
      unsigned int v15 = v14;
      unsigned int v16 = CMPhotoCompressionSessionCloseContainer((uint64_t)v13);
      if (v15) {
        uint64_t v17 = v15;
      }
      else {
        uint64_t v17 = v16;
      }
    }
    else
    {
      uint64_t v17 = 4294950195;
    }
  }
  CMPhotoOneShotSessionPoolRecycleSession(v13);
  return v17;
}

uint64_t CMPhotoCompressionCreateDataContainerFromImage(const __CFDictionary *a1, opaqueCMSampleBuffer *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  if (a2 && a6)
  {
    CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!Mutable) {
      return 4294950305;
    }
    CFDictionaryRef v13 = Mutable;
    uint64_t v14 = CMPhotoCFDictionarySetInt(Mutable, @"ContainerFormat", a5);
    if (v14 || (uint64_t v14 = CMPhotoCFDictionarySetInt(v13, @"BackingType", 1), v14))
    {
      uint64_t ContainerFromImageExt = v14;
    }
    else
    {
      if (!a3)
      {
        CFDictionaryRef v16 = 0;
        uint64_t v17 = 0;
LABEL_13:
        uint64_t ContainerFromImageExt = CMPhotoCompressionCreateContainerFromImageExt(v13, a1, a2, v16, v17, a4);
        CFRelease(v13);
        if (!v16) {
          return ContainerFromImageExt;
        }
        CFDictionaryRef v19 = v16;
LABEL_15:
        CFRelease(v19);
        return ContainerFromImageExt;
      }
      CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v11, 0, a1);
      if (MutableCopy)
      {
        CFDictionaryRef v16 = MutableCopy;
        CFDictionaryRemoveValue(MutableCopy, @"Tiling");
        char v21 = 0;
        if (!CMPhotoCFDictionaryGetBooleanIfPresent(v16, @"ApplyTransform", &v21) || !v21) {
          CFDictionaryRemoveValue(v16, @"ImageOrientation");
        }
        CMPhotoCFDictionarySetInt(v16, @"MaxPixelSize", a3);
        uint64_t v17 = a2;
        goto LABEL_13;
      }
      uint64_t ContainerFromImageExt = 4294950305;
    }
    CFDictionaryRef v19 = v13;
    goto LABEL_15;
  }
  return FigSignalErrorAt();
}

uint64_t CMPhotoDetermineMIAFCompliantThumbnailMaxPixelSize(unint64_t *a1, double a2, double a3)
{
  unint64_t v4 = 0;
  unint64_t v17 = 0;
  unint64_t v18 = 0;
  unint64_t v5 = (unint64_t)(a2 * a3);
  unint64_t v6 = vcvtad_u64_f64(a2);
  unint64_t v7 = vcvtad_u64_f64(a3);
  double v8 = 1.79769313e308;
  unint64_t v9 = 320;
  double v10 = a2 / a3;
  while (1)
  {
    CMPhotoPixelBufferConstrainSizeToMaxSideLength(v6, v7, v9, 0, 0, 0, 1, &v17, 0, 0);
    unint64_t v11 = v18 * v17;
    double v12 = vabdd_f64((double)v17 / (double)v18, v10);
    if (v12 < v8)
    {
      double v8 = v12;
      unint64_t v4 = v9;
    }
    unint64_t v13 = 200 * v11;
    if (200 * v11 >= v5 && v8 == 0.0) {
      break;
    }
    unint64_t v14 = 100 * v11;
    if (v14 >= v5 && v13 < v5) {
      return FigSignalErrorAt();
    }
    if (v14 >= v5)
    {
      unint64_t v9 = v4;
      break;
    }
    v9 += 16;
  }
  uint64_t result = 0;
  if (a1) {
    *a1 = v9;
  }
  return result;
}

uint64_t CMPhotoAppleJPEGErrorToCMPhotoError(int a1)
{
  if ((a1 + 1) > 0xC) {
    return 4294950304;
  }
  else {
    return dword_1AB9E35B8[a1 + 1];
  }
}

uint64_t CMPhotoCreateMPOFromJFIFData(uint64_t a1, int a2, CFDataRef theData, CFDataRef *a4, uint64_t a5, char a6)
{
  if (a1)
  {
    if (theData)
    {
      if (a5)
      {
        if (a4)
        {
          unsigned __int8 BytePtr = CFDataGetBytePtr(theData);
          double v12 = &BytePtr[CFDataGetLength(theData)];
          if (__PAIR64__(*(v12 - 1), *(v12 - 2)) == 0xD9000000FFLL)
          {
            CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
            if (!Mutable) {
              return 4294950305;
            }
            unint64_t v14 = Mutable;
            uint64_t v15 = _storeStreamLengths(a1, Mutable);
            if (!v15)
            {
              uint64_t v54 = a1;
              CFDataRef v55 = theData;
              uint64_t v56 = 16 * (a5 + 1) + 58;
              uint64_t v57 = a4;
              uint64_t v61 = 0;
              uint64_t v58 = a5;
              uint64_t v59 = _writeInitialMPHeaderSegment;
              uint64_t v60 = 0;
              uint64_t v62 = a2;
              *(_DWORD *)((char *)&v62 + 1) = 0;
              BYTE5(v62) = a6;
              CFDictionaryRef v16 = malloc_type_calloc(1uLL, 0x48uLL, 0x10800409512512CuLL);
              unint64_t v17 = v16;
              if (v16)
              {
                v16[5] = _mpoScannerCallback;
                v16[6] = &v54;
                void v16[7] = 0;
                v16[8] = 0;
                unint64_t v18 = CFDataGetBytePtr(theData);
                CFIndex Length = CFDataGetLength(theData);
                uint64_t v20 = CMPhotoJFIFScannerRun((uint64_t)v17, (unint64_t)v18, Length);
                if (!v20)
                {
                  free(v17);
                  uint64_t v21 = v60;
                  uint64_t v22 = v61;
                  uint64_t v15 = _storeStreamLengths(a1, v14);
                  if (!v15)
                  {
                    uint64_t v51 = v22;
                    uint64_t v52 = v21;
                    unint64_t v23 = a4;
                    uint64_t v24 = a5;
                    do
                    {
                      CFDataRef v25 = *v23;
                      if (a2)
                      {
                        CFIndex v26 = CFDataGetLength(*v23);
                        uint64_t v54 = 0;
                        CFDataGetBytePtr(v25);
                        uint64_t v15 = CMByteStreamAppend();
                        if (v15) {
                          goto LABEL_48;
                        }
                        if (v54 != v26) {
                          goto LABEL_47;
                        }
                      }
                      else
                      {
                        uint64_t v54 = a1;
                        CFDataRef v55 = v25;
                        uint64_t v56 = 0;
                        uint64_t v57 = a4;
                        uint64_t v62 = 0x100000000;
                        uint64_t v58 = a5;
                        uint64_t v60 = 0;
                        uint64_t v61 = 0;
                        uint64_t v59 = 0;
                        BOOL v27 = malloc_type_calloc(1uLL, 0x48uLL, 0x10800409512512CuLL);
                        unint64_t v17 = v27;
                        if (!v27) {
                          goto LABEL_49;
                        }
                        v27[5] = _mpoScannerCallback;
                        v27[6] = &v54;
                        v27[7] = 0;
                        v27[8] = 0;
                        unint64_t v28 = CFDataGetBytePtr(v25);
                        CFIndex v29 = CFDataGetLength(v25);
                        uint64_t v20 = CMPhotoJFIFScannerRun((uint64_t)v17, (unint64_t)v28, v29);
                        if (v20) {
                          goto LABEL_50;
                        }
                        free(v17);
                      }
                      uint64_t v15 = _storeStreamLengths(a1, v14);
                      if (v15) {
                        goto LABEL_48;
                      }
                      v23 += 2;
                      --v24;
                    }
                    while (v24);
                    uint64_t v54 = 0;
                    if (CFArrayGetCount(v14) == a5 + 2)
                    {
                      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v14, 0);
                      CFNumberRef Size = CMPhotoCFNumberGetSize(ValueAtIndex);
                      if (((unint64_t)Size & 0x8000000000000000) == 0)
                      {
                        if (a5 == -1)
                        {
LABEL_43:
                          uint64_t v49 = 0;
                          goto LABEL_45;
                        }
                        CFNumberRef v32 = Size;
                        uint64_t v33 = 0;
                        uint64_t v34 = (uint64_t)Size + v51 + 4;
                        CFNumberRef v35 = (const __CFNumber *)((char *)Size + v52);
                        while (1)
                        {
                          uint64_t v36 = v33 + 1;
                          CFNumberRef v37 = (const __CFNumber *)CFArrayGetValueAtIndex(v14, v33 + 1);
                          CFNumberRef v38 = CMPhotoCFNumberGetSize(v37);
                          uint64_t v39 = v38 - v32;
                          if ((uint64_t)v38 <= (uint64_t)v32 || v39 >= 0x7FFFFFFF) {
                            break;
                          }
                          CFNumberRef v40 = v38;
                          unsigned int v64 = bswap32(v39);
                          uint64_t v41 = *(void *)(CMBaseObjectGetVTable() + 16);
                          if (v41) {
                            uint64_t v42 = v41;
                          }
                          else {
                            uint64_t v42 = 0;
                          }
                          uint64_t v43 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *, uint64_t *))(v42 + 16);
                          if (!v43) {
                            goto LABEL_44;
                          }
                          uint64_t v15 = v43(a1, 4, v34, &v64, &v54);
                          if (v15) {
                            goto LABEL_48;
                          }
                          if (v54 != 4) {
                            break;
                          }
                          uint64_t v44 = v32 - v35;
                          if (!v33) {
                            uint64_t v44 = 0;
                          }
                          if (v44 > 2147483646) {
                            break;
                          }
                          unsigned int v63 = bswap32(v44);
                          uint64_t v45 = *(void *)(CMBaseObjectGetVTable() + 16);
                          uint64_t v46 = v45 ? v45 : 0;
                          double v47 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *, uint64_t *))(v46 + 16);
                          if (!v47)
                          {
LABEL_44:
                            uint64_t v49 = 4294954514;
                            goto LABEL_45;
                          }
                          uint64_t v48 = v34 + 4;
                          uint64_t v15 = v47(a1, 4, v48, &v63, &v54);
                          if (v15) {
                            goto LABEL_48;
                          }
                          if (v54 != 4) {
                            break;
                          }
                          uint64_t v34 = v48 + 12;
                          ++v33;
                          CFNumberRef v32 = v40;
                          if (a5 + 1 == v36) {
                            goto LABEL_43;
                          }
                        }
                      }
LABEL_47:
                      uint64_t v15 = FigSignalErrorAt();
                      goto LABEL_48;
                    }
                    uint64_t v49 = 4294950306;
                    goto LABEL_45;
                  }
                  goto LABEL_48;
                }
LABEL_50:
                uint64_t v49 = v20;
              }
              else
              {
LABEL_49:
                uint64_t v49 = 4294950305;
              }
              if (v17) {
                free(v17);
              }
              goto LABEL_45;
            }
LABEL_48:
            uint64_t v49 = v15;
LABEL_45:
            CFRelease(v14);
            return v49;
          }
        }
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t _storeStreamLengths(uint64_t a1, __CFArray *a2)
{
  CFTypeRef value = 0;
  uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  unint64_t v6 = *(uint64_t (**)(uint64_t, void, void, void **))(v5 + 48);
  if (!v6) {
    return 4294954514;
  }
  uint64_t v7 = v6(CMBaseObject, *MEMORY[0x1E4F1EC48], *MEMORY[0x1E4F1CF80], &value);
  double v8 = value;
  if (!v7)
  {
    CFArrayAppendValue(a2, value);
    double v8 = value;
  }
  if (v8) {
    CFRelease(v8);
  }
  return v7;
}

uint64_t _writeInitialMPHeaderSegment(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  unsigned int v6 = 16 * (a4 + 1);
  *(_WORD *)uint64_t result = -7425;
  *(_WORD *)(result + 2) = bswap32(v6 + 56) >> 16;
  *(_DWORD *)(result + 4) = 4608077;
  if (a5) {
    *a5 = a2 + 8;
  }
  *(void *)(result + _Block_object_dispose(&STACK[0x280], 8) = 0x80000002A004D4DLL;
  *(_DWORD *)(result + 16) = 11535104;
  *(_WORD *)(result + 20) = 1792;
  *(void *)(result + 22) = 0x3030313004000000;
  *(void *)(result + 30) = 0x1000000040001B0;
  *(_DWORD *)(result + 3_Block_object_dispose(&STACK[0x280], 8) = bswap32(a4 + 1);
  *(_DWORD *)(result + 42) = 117441200;
  *(_DWORD *)(result + 46) = bswap32(v6);
  *(void *)(result + 50) = 838860800;
  if (a6) {
    *a6 = a2 + 58;
  }
  *(void *)(result + 5_Block_object_dispose(&STACK[0x280], 8) = 768;
  *(void *)(result + 66) = 0;
  if (a4)
  {
    uint64_t v7 = (void *)(result + 74);
    double v8 = (unsigned int *)(a3 + 8);
    do
    {
      unsigned int v9 = *v8;
      v8 += 4;
      *uint64_t v7 = bswap32(v9);
      v7[1] = 0;
      v7 += 2;
      --a4;
    }
    while (a4);
  }
  return result;
}

uint64_t CMPhotoJFIFScannerCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a1 | a3)
  {
    if (a5)
    {
      unint64_t v11 = malloc_type_calloc(1uLL, 0x48uLL, 0x10800409512512CuLL);
      if (v11)
      {
        double v12 = v11;
        uint64_t result = 0;
        v12[5] = a1;
        void v12[6] = a2;
        v12[7] = a3;
        v12[8] = a4;
        *a5 = v12;
      }
      else
      {
        return 4294950305;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t _mpoScannerCallback(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t *a5)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v17 = 0;
  if (!*((unsigned char *)a5 + 68) && (a3 + 30) <= 0xFDu && *((unsigned char *)a5 + 67) != 0)
  {
    MEMORY[0x1F4188790]();
    ((void (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t *))a5[5])((char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a2, a5[3], a5[4], a5 + 6, a5 + 7);
    LODWORD(result) = CMByteStreamAppend();
    if (result) {
      goto LABEL_43;
    }
    if (v17 != a5[2])
    {
LABEL_40:
      LODWORD(result) = FigSignalErrorAt();
      goto LABEL_43;
    }
    *((unsigned char *)a5 + 6_Block_object_dispose(&STACK[0x280], 8) = 1;
    if (*((unsigned char *)a5 + 69))
    {
      uint64_t v12 = *a5;
      int v22 = 0;
      __int16 v19 = -7425;
      char v20 = 0;
      char v21 = 34;
      if (!v12)
      {
        LODWORD(result) = -16990;
        goto LABEL_43;
      }
      uint64_t v18 = 0;
      LODWORD(result) = CMByteStreamAppend();
      if (result) {
        goto LABEL_43;
      }
      if (v18 != 4) {
        goto LABEL_39;
      }
      LODWORD(result) = CMByteStreamAppend();
      if (result) {
        goto LABEL_43;
      }
      if (v18 != 28) {
        goto LABEL_39;
      }
      LODWORD(result) = CMByteStreamAppend();
      if (result) {
        goto LABEL_43;
      }
      if (v18 != 4)
      {
LABEL_39:
        LODWORD(result) = -16991;
        goto LABEL_43;
      }
    }
  }
  unsigned __int8 BytePtr = CFDataGetBytePtr((CFDataRef)a5[1]);
  unint64_t v14 = BytePtr;
  if (a3 == 226 && a4 >= 6uLL && !strcmp((const char *)&BytePtr[a2 + 4], "MPF"))
  {
    if (*((unsigned char *)a5 + 64))
    {
LABEL_34:
      char v15 = 0;
      LODWORD(result) = 0;
      goto LABEL_35;
    }
    goto LABEL_40;
  }
  LODWORD(result) = CMByteStreamAppend();
  if (result)
  {
LABEL_43:
    char v15 = 0;
    goto LABEL_35;
  }
  if (v17 != a4 + 2) {
    goto LABEL_40;
  }
  char v15 = 0;
  LODWORD(result) = 0;
  switch(a3)
  {
    case 216:
      char v15 = 0;
      LODWORD(result) = 0;
      *((unsigned char *)a5 + 67) = 1;
      break;
    case 218:
      if (!*((unsigned char *)a5 + 68)) {
        goto LABEL_40;
      }
      CFIndex v16 = CFDataGetLength((CFDataRef)a5[1]) - (a2 + a4 + 2);
      LODWORD(result) = CMByteStreamAppend();
      if (result) {
        goto LABEL_43;
      }
      if (v17 != v16) {
        goto LABEL_40;
      }
      LODWORD(result) = 0;
      char v15 = 1;
      break;
    case 224:
      if (a4 < 0x10) {
        goto LABEL_34;
      }
      LODWORD(result) = strcmp((const char *)&v14[a2 + 4], "JFIF");
      if (result) {
        goto LABEL_34;
      }
      char v15 = 0;
      *((unsigned char *)a5 + 65) = 1;
      break;
    case 225:
      if (a4 < 0x10uLL) {
        goto LABEL_34;
      }
      LODWORD(result) = memcmp(&v14[a2 + 4], "Exif", 6uLL);
      if (result) {
        goto LABEL_34;
      }
      char v15 = 0;
      *((unsigned char *)a5 + 66) = 1;
      break;
    default:
      break;
  }
LABEL_35:
  if ((v15 & (result == 0)) != 0) {
    return 4294950191;
  }
  else {
    return result;
  }
}

uint64_t CMPhotoJFIFScannerRun(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t result = 4294950306;
  if (!a1 || !a2) {
    return result;
  }
  if (*(_DWORD *)a1) {
    return 0;
  }
  unint64_t v6 = a3;
  if (!a3) {
    goto LABEL_92;
  }
  unint64_t v32 = ~a2;
  uint64_t v7 = (unsigned __int8 *)a2;
  unint64_t v8 = a3;
LABEL_6:
  while (2)
  {
    switch(*(_DWORD *)(a1 + 4))
    {
      case 0:
        if (*v7 != 255) {
          goto LABEL_94;
        }
        --v8;
        ++v7;
        *(_DWORD *)(a1 + 4) = 1;
        if (!v8) {
          goto LABEL_92;
        }
        continue;
      case 1:
        int v10 = *v7++;
        int v9 = v10;
        --v8;
        if (v10 != 216)
        {
          *(unsigned char *)(a1 + 24) = v9;
          *(_DWORD *)(a1 + 4) = 2;
          *(unsigned char *)(a1 + 2_Block_object_dispose(&STACK[0x280], 8) = v9 == 218;
          if (!v8) {
            goto LABEL_92;
          }
          continue;
        }
        *(unsigned char *)(a1 + 24) = -40;
        unint64_t v11 = *(uint64_t (**)(uint64_t, unsigned __int8 *, uint64_t, void, void))(a1 + 40);
        if (v11)
        {
          uint64_t result = v11(a1, &v7[*(void *)(a1 + 16) - a2 - 2], 216, 0, *(void *)(a1 + 48));
          if (result == -17105) {
            goto LABEL_92;
          }
          if (result) {
            goto LABEL_95;
          }
        }
        goto LABEL_79;
      case 2:
        __int16 v12 = *v7++;
        *(_WORD *)(a1 + 26) = v12 << 8;
        --v8;
        *(_DWORD *)(a1 + 4) = 3;
        if (!v8) {
          goto LABEL_92;
        }
        continue;
      case 3:
        unsigned __int16 v13 = *(_WORD *)(a1 + 26) | *v7;
        *(_WORD *)(a1 + 26) = v13;
        if (v13 < 2u)
        {
LABEL_94:
          uint64_t result = 4294950194;
        }
        else
        {
          *(_WORD *)(a1 + 26) = v13 - 2;
          ++v7;
          unint64_t v14 = *(uint64_t (**)(uint64_t, unsigned __int8 *, void, void, void))(a1 + 40);
          if (!v14) {
            goto LABEL_21;
          }
          uint64_t result = v14(a1, &v7[*(void *)(a1 + 16) - a2 - 4], *(unsigned __int8 *)(a1 + 24), v13, *(void *)(a1 + 48));
          if (result == -17105) {
            goto LABEL_92;
          }
          if (!result)
          {
LABEL_21:
            --v8;
            *(_DWORD *)(a1 + 4) = 4;
            if (!v8) {
              goto LABEL_92;
            }
            continue;
          }
        }
        goto LABEL_95;
      case 4:
        unint64_t v15 = *(unsigned __int16 *)(a1 + 26);
        if (v8 >= v15) {
          unint64_t v16 = *(unsigned __int16 *)(a1 + 26);
        }
        else {
          unint64_t v16 = v8;
        }
        v8 -= v16;
        v7 += v16;
        int v17 = v15 - v16;
        *(_WORD *)(a1 + 26) = v17;
        if (v17) {
          goto LABEL_86;
        }
        if (!*(unsigned char *)(a1 + 28)) {
          goto LABEL_79;
        }
        *(void *)(a1 + 32) = &v7[*(void *)(a1 + 16) - a2];
        *(_DWORD *)(a1 + 4) = 5;
        if (!v8) {
          goto LABEL_92;
        }
        continue;
      case 5:
        if (!*(void *)(a1 + 56))
        {
          if (v8 < 2)
          {
            unint64_t v8 = 1;
            goto LABEL_89;
          }
LABEL_71:
          if (v7[v8 - 2] == 255 && v7[v8 - 1] == 217)
          {
            v7 += v8;
            goto LABEL_74;
          }
          if (*v7 == 255)
          {
            int v30 = v7[1];
            if (v30 != 218)
            {
              if (v30 == 217)
              {
                v7 += 2;
                v8 -= 2;
                goto LABEL_83;
              }
              goto LABEL_89;
            }
LABEL_79:
            *(_DWORD *)(a1 + 4) = 0;
            if (!v8) {
              goto LABEL_92;
            }
          }
          else
          {
LABEL_89:
            --v8;
            ++v7;
            if (!v8) {
              goto LABEL_92;
            }
          }
          continue;
        }
        int v18 = 0;
        int v19 = *(_DWORD *)(a1 + 8);
        int v20 = v19;
        break;
      case 6:
        goto LABEL_92;
      default:
        goto LABEL_86;
    }
    break;
  }
  while (2)
  {
    uint64_t v21 = 0;
    uint64_t v22 = 1;
    while (v20 == 1)
    {
      int v23 = v7[v21];
      if (v23 == (*(unsigned __int8 *)(a1 + 12) | 0xD0))
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *, unsigned __int8 *))(a1 + 56))(a1, &v7[v32 + v21 + *(void *)(a1 + 16)], &v7[v32 + v21 + *(void *)(a1 + 16) - *(void *)(a1 + 32)]);
        if (result) {
          goto LABEL_95;
        }
        int v19 = 0;
        CFIndex v26 = &v7[v21];
        *(unsigned char *)(a1 + 12) = (*(unsigned char *)(a1 + 12) + 1) & 7;
LABEL_50:
        *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x280], 8) = v19;
        int v20 = v19;
        goto LABEL_51;
      }
      if (v23 != 217)
      {
        if (v23 == 218) {
          int v19 = 2;
        }
        else {
          int v19 = 0;
        }
        CFIndex v26 = &v7[v21];
        goto LABEL_50;
      }
      *(unsigned char *)(a1 + 12) = 2;
      ++v21;
      --v22;
      int v20 = 1;
      int v18 = 1;
      if (v8 + v22 < 2)
      {
        unint64_t v8 = 0;
        v7 += v21;
LABEL_83:
        double v31 = *(uint64_t (**)(uint64_t, unsigned __int8 *, uint64_t, void, void))(a1 + 40);
        if (v31)
        {
          uint64_t result = v31(a1, &v7[*(void *)(a1 + 16) - a2 - 2], 217, 0, *(void *)(a1 + 48));
          if (result)
          {
LABEL_95:
            *(_DWORD *)a1 = result;
            return result;
          }
        }
        *(_DWORD *)(a1 + 4) = 6;
LABEL_86:
        if (!v8) {
          goto LABEL_92;
        }
        goto LABEL_6;
      }
    }
    if (v20 != 2)
    {
      if (!v20)
      {
        unint64_t v24 = v6;
        CFDataRef v25 = &v7[v21];
        CFIndex v26 = (unsigned __int8 *)memchr(&v7[v21], 255, v8 - v21);
        if (!v26) {
          goto LABEL_62;
        }
        int v19 = 1;
        unint64_t v6 = v24;
        goto LABEL_50;
      }
      CFIndex v26 = &v7[v21];
      if (!&v7[v21])
      {
        unint64_t v24 = v6;
        CFDataRef v25 = 0;
        goto LABEL_62;
      }
LABEL_51:
      unint64_t v27 = v7 - v26 + v8;
      unint64_t v8 = v27 - 1;
      if (v27) {
        uint64_t v7 = v26 + 1;
      }
      else {
        uint64_t v7 = v26;
      }
      if (v27 < 2)
      {
        if (!v18) {
          goto LABEL_92;
        }
LABEL_74:
        unint64_t v8 = 0;
        goto LABEL_83;
      }
      continue;
    }
    break;
  }
  unint64_t v24 = v6;
  CFDataRef v25 = &v7[v21];
LABEL_62:
  v8 -= v21;
  if (v19 == 2) {
    unint64_t v28 = v8;
  }
  else {
    unint64_t v28 = 0;
  }
  if (v19 == 2) {
    unint64_t v29 = 0;
  }
  else {
    unint64_t v29 = v8;
  }
  uint64_t v7 = &v25[v29];
  if (!v18 && v28 > 1)
  {
    unint64_t v6 = v24;
    goto LABEL_71;
  }
  unint64_t v6 = v24;
  if (v18)
  {
    unint64_t v8 = v28;
    goto LABEL_83;
  }
  if (v28) {
    goto LABEL_89;
  }
LABEL_92:
  uint64_t result = 0;
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 16) += v6;
  return result;
}

uint64_t CMPhotoJFIFScannerDispose(void *a1)
{
  return 0;
}

uint64_t CMPhotoCreateDataFromJFIFSampleBufferAndInjectAppMarkers(const __CFAllocator *a1, CMSampleBufferRef sbuf, uint64_t a3, const __CFData **a4, char *a5, CFDataRef *a6)
{
  if (!a4)
  {
    return CMPhotoDataCreateFromSampleBuffer(a1, sbuf, 1, a6);
  }
  uint64_t result = 4294950306;
  if (!a5 || !sbuf || !a6) {
    return result;
  }
  if (a3 >= 1)
  {
    uint64_t v13 = 0;
    unint64_t v14 = a5;
    unint64_t v15 = a4;
    uint64_t v16 = a3;
    while (1)
    {
      char v17 = *v14++;
      if ((v17 & 0xF0) != 0xE0) {
        return 4294950306;
      }
      CFDataRef v18 = *v15++;
      v13 += CFDataGetLength(v18);
      if (!--v16) {
        goto LABEL_14;
      }
    }
  }
  uint64_t v13 = 0;
LABEL_14:
  CMBlockBufferRef DataBuffer = CMSampleBufferGetDataBuffer(sbuf);
  if (!DataBuffer) {
    return 4294950306;
  }
  int v20 = DataBuffer;
  DataCFIndex Length = CMBlockBufferGetDataLength(DataBuffer);
  CFIndex v22 = v13 + 4 * a3 + DataLength;
  CFMutableDictionaryRef Mutable = CFDataCreateMutable(a1, v22);
  if (!Mutable) {
    return 4294950305;
  }
  unint64_t v24 = Mutable;
  CFDataSetLength(Mutable, v22);
  v31[0] = a3;
  v31[1] = a4;
  v31[2] = a5;
  uint64_t v32 = 0;
  long long v33 = 0u;
  long long v34 = 0u;
  Mutableunsigned __int8 BytePtr = CFDataGetMutableBytePtr(v24);
  CFDataRef v25 = malloc_type_calloc(1uLL, 0x48uLL, 0x10800409512512CuLL);
  if (!v25)
  {
    CFRelease(v24);
    return 4294950305;
  }
  CFIndex v26 = v25;
  v25[5] = _appInjectionScannerCallback;
  v25[6] = v31;
  v25[7] = 0;
  v25[8] = 0;
  *a6 = v24;
  if (DataLength)
  {
    size_t v27 = 0;
    do
    {
      int v30 = 0;
      if (CMBlockBufferGetDataPointer(v20, v27, (size_t *)&v34, 0, &v30)) {
        break;
      }
      uint64_t v28 = v33;
      *((void *)&v34 + 1) = v30;
      *((void *)&v33 + 1) = v33;
      size_t v27 = v33;
      if (!(_BYTE)v32)
      {
        if (CMPhotoJFIFScannerRun((uint64_t)v26, (unint64_t)v30, v34)) {
          break;
        }
        uint64_t v28 = *((void *)&v33 + 1);
        size_t v27 = v33;
      }
      size_t v29 = v34 - (v27 - v28);
      if ((void)v34 != v27 - v28)
      {
        memcpy(MutableBytePtr, (const void *)(*((void *)&v34 + 1) + v27 - v28), v34 - (v27 - v28));
        size_t v27 = v33 + v29;
        *(void *)&long long v33 = v33 + v29;
        MutableBytePtr += v29;
      }
    }
    while (v27 < DataLength);
  }
  free(v26);
  return 0;
}

uint64_t _appInjectionScannerCallback(uint64_t a1, unint64_t a2, int a3, unsigned int a4, uint64_t a5)
{
  unint64_t v6 = *(void *)(a5 + 32);
  unint64_t v7 = *(void *)(a5 + 40);
  if (v6 < v7 || v6 >= *(void *)(a5 + 48) + v7)
  {
    uint64_t result = FigSignalErrorAt();
    if (result) {
      return result;
    }
  }
  else
  {
    size_t v11 = a2 - v6;
    if (a2 > v6)
    {
      memcpy(*(void **)(a5 + 64), (const void *)(*(void *)(a5 + 56) + v6 - v7), v11);
      *(void *)(a5 + 64) += v11;
      *(void *)(a5 + 32) += v11;
    }
    if (*(unsigned char *)(a5 + 25) && (a3 + 30) <= 0xFDu && !*(unsigned char *)(a5 + 24))
    {
      if (*(uint64_t *)a5 >= 1)
      {
        uint64_t v12 = 0;
        do
        {
          size_t Length = CFDataGetLength(*(CFDataRef *)(*(void *)(a5 + 8) + 8 * v12));
          unsigned __int8 BytePtr = CFDataGetBytePtr(*(CFDataRef *)(*(void *)(a5 + 8) + 8 * v12));
          **(_WORD **)(a5 + 64) = bswap32(*(unsigned __int8 *)(*(void *)(a5 + 16) + v12) | 0xFF00) >> 16;
          *(_WORD *)(*(void *)(a5 + 64) + 2) = bswap32(Length + 2) >> 16;
          memcpy((void *)(*(void *)(a5 + 64) + 4), BytePtr, Length);
          *(void *)(a5 + 64) += Length + 4;
          ++v12;
        }
        while (v12 < *(void *)a5);
      }
      *(unsigned char *)(a5 + 24) = 1;
    }
    if (a3 == 216) {
      *(unsigned char *)(a5 + 25) = 1;
    }
    uint64_t v15 = *(void *)(a5 + 40);
    uint64_t v16 = *(void *)(a5 + 32);
    if (a2 + a4 - v16 + 2 >= *(void *)(a5 + 48) + v15 - v16) {
      size_t v17 = *(void *)(a5 + 48) + v15 - v16;
    }
    else {
      size_t v17 = a2 + a4 - v16 + 2;
    }
    if (v17)
    {
      memcpy(*(void **)(a5 + 64), (const void *)(*(void *)(a5 + 56) + v16 - v15), v17);
      *(void *)(a5 + 64) += v17;
      *(void *)(a5 + 32) += v17;
    }
  }
  if (*(unsigned char *)(a5 + 24)) {
    return 4294950191;
  }
  else {
    return 0;
  }
}

uint64_t CMPhotoJFIFCreateStrippedBufferFromByteStream(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, void *a6, unint64_t *a7, uint64_t a8)
{
  v37[0] = a8;
  v37[1] = v37;
  blockBufferOut[1] = *(CMBlockBufferRef *)MEMORY[0x1E4F143B8];
  uint64_t v39 = 0;
  blockBufferOut[0] = 0;
  uint64_t v15 = a4;
  uint64_t v16 = (const void *)MEMORY[0x1F4188790]();
  size_t v17 = &v37[-2 * v15];
  CFAllocatorRef v18 = CFGetAllocator(v16);
  Emptdouble y = CMBlockBufferCreateEmpty(v18, a4 + 1, 0, blockBufferOut);
  if (Empty
    || ((Emptdouble y = CMPhotoFindMarkersWithSignaturesInJFIFByteStream(a1, a2, a4, a5, a6, a7, &v37[-2 * v15]), Empty)
      ? (BOOL v20 = Empty == -16993)
      : (BOOL v20 = 1),
        !v20))
  {
    uint64_t v35 = Empty;
    goto LABEL_40;
  }
  if (a4 >= 1)
  {
    uint64_t v21 = v17 + 1;
    uint64_t v22 = v15;
    do
    {
      if (*v21)
      {
        uint64_t v23 = *v21 + 4;
        *(v21 - 1) -= 4;
        *uint64_t v21 = v23;
      }
      v21 += 2;
      --v22;
    }
    while (v22);
  }
  uint64_t v24 = a2 + a3;
  if (a2 >= a2 + a3)
  {
LABEL_35:
    uint64_t v35 = 0;
    *(void *)v37[0] = blockBufferOut[0];
    blockBufferOut[0] = 0;
    return v35;
  }
  CFDataRef v25 = v17 + 1;
  while (1)
  {
    if (a4 < 1)
    {
      uint64_t v26 = 0;
      uint64_t v29 = v24;
    }
    else
    {
      uint64_t v26 = 0;
      uint64_t v27 = v15;
      uint64_t v28 = v25;
      uint64_t v29 = v24;
      do
      {
        if (*v28 && *(v28 - 1) >= a2 && *(v28 - 1) < v29)
        {
          uint64_t v29 = *(v28 - 1);
          uint64_t v26 = *v28;
        }
        v28 += 2;
        --v27;
      }
      while (v27);
    }
    uint64_t v30 = v29 - a2;
    if (v29 - a2 < 0)
    {
      uint64_t v35 = 4294950190;
      goto LABEL_40;
    }
    if (v29 == a2) {
      goto LABEL_34;
    }
    uint64_t v38 = 0;
    uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v31) {
      uint64_t v32 = v31;
    }
    else {
      uint64_t v32 = 0;
    }
    long long v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, OpaqueCMBlockBuffer **, uint64_t *))(v32 + 32);
    if (!v33)
    {
      uint64_t v35 = 4294954514;
      goto LABEL_38;
    }
    uint64_t appended = v33(a1, v30, a2, &v39, &v38);
    if (appended) {
      goto LABEL_45;
    }
    if (v38 != v30) {
      break;
    }
    uint64_t appended = CMBlockBufferAppendBufferReference(blockBufferOut[0], v39, 0, 0, 0);
    if (appended) {
      goto LABEL_45;
    }
    if (v39)
    {
      CFRelease(v39);
      uint64_t v39 = 0;
    }
    a2 += v38;
LABEL_34:
    a2 += v26;
    if (a2 >= v24) {
      goto LABEL_35;
    }
  }
  uint64_t appended = FigSignalErrorAt();
LABEL_45:
  uint64_t v35 = appended;
LABEL_38:
  if (v39) {
    CFRelease(v39);
  }
LABEL_40:
  if (blockBufferOut[0]) {
    CFRelease(blockBufferOut[0]);
  }
  return v35;
}

uint64_t CMPhotoCompressedAuxImageStorageCreate(const void *a1, char a2, const void *a3, const void *a4, const void *a5, char a6, int a7, const void *a8, const void *a9, void *a10)
{
  CFAllocatorRef v18 = malloc_type_malloc(0x38uLL, 0x106004075BB3C11uLL);
  if (!v18) {
    return 4294950305;
  }
  int v19 = v18;
  if (a1) {
    CFTypeRef v20 = CFRetain(a1);
  }
  else {
    CFTypeRef v20 = 0;
  }
  *(void *)int v19 = v20;
  v19[8] = a2;
  v19[9] = a6;
  *((_DWORD *)v19 + 3) = a7;
  if (a3) {
    CFTypeRef v21 = CFRetain(a3);
  }
  else {
    CFTypeRef v21 = 0;
  }
  *((void *)v19 + 2) = v21;
  if (a4) {
    CFTypeRef v22 = CFRetain(a4);
  }
  else {
    CFTypeRef v22 = 0;
  }
  *((void *)v19 + 3) = v22;
  if (a5) {
    CFTypeRef v23 = CFRetain(a5);
  }
  else {
    CFTypeRef v23 = 0;
  }
  *((void *)v19 + 4) = v23;
  if (a8) {
    CFTypeRef v24 = CFRetain(a8);
  }
  else {
    CFTypeRef v24 = 0;
  }
  *((void *)v19 + 5) = v24;
  if (a9) {
    CFTypeRef v25 = CFRetain(a9);
  }
  else {
    CFTypeRef v25 = 0;
  }
  uint64_t result = 0;
  *((void *)v19 + 6) = v25;
  *a10 = v19;
  return result;
}

void CMPhotoCompressedAuxImageStorageDestroy(const void **a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (v2) {
      CFRelease(v2);
    }
    uint64_t v3 = a1[2];
    if (v3) {
      CFRelease(v3);
    }
    uint64_t v4 = a1[3];
    if (v4) {
      CFRelease(v4);
    }
    uint64_t v5 = a1[4];
    if (v5) {
      CFRelease(v5);
    }
    unint64_t v6 = a1[5];
    if (v6) {
      CFRelease(v6);
    }
    unint64_t v7 = a1[6];
    if (v7) {
      CFRelease(v7);
    }
    free(a1);
  }
}

uint64_t CMPhotoJFIFUtilitiesMergeImageComponents(const __CFAllocator *a1, const void *a2, int a3, int a4, CFArrayRef theArray, const void *a6)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  CFDataRef theData = 0;
  if (!theArray || (CFIndex Count = CFArrayGetCount(theArray)) == 0)
  {
    uint64_t v18 = CMPhotoByteStreamWriteStreamCreate((uint64_t)a1, 0, a2);
    if (v18)
    {
      unint64_t v14 = (__CFWriteStream *)v18;
      if (a6)
      {
        CFTypeRef v16 = CFRetain(a6);
        uint64_t v10 = 0;
        CFDataRef v12 = 0;
      }
      else
      {
        uint64_t v10 = 0;
        CFDataRef v12 = 0;
        CFTypeRef v16 = 0;
      }
      char v17 = 1;
      goto LABEL_12;
    }
    return 4294950305;
  }
  uint64_t v10 = Count;
  CFMutableDataRef Mutable = CFDataCreateMutable(a1, 0);
  if (!Mutable) {
    return 4294950305;
  }
  CFDataRef v12 = Mutable;
  uint64_t v13 = CMPhotoMutableDataWriteStreamCreate((uint64_t)a1, (uint64_t)Mutable);
  if (!v13)
  {
    CFTypeRef v16 = 0;
    uint64_t MPOFromJFIFData = 4294950305;
    goto LABEL_62;
  }
  unint64_t v14 = (__CFWriteStream *)v13;
  CFDictionaryRef MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  CFTypeRef v16 = MutableCopy;
  if (!MutableCopy)
  {
LABEL_74:
    uint64_t MPOFromJFIFData = 4294950305;
    goto LABEL_61;
  }
  CFDictionaryAddValue(MutableCopy, @"kCGImageWriteExtendedAPP0", (const void *)*MEMORY[0x1E4F1CFD0]);
  char v17 = 0;
LABEL_12:
  if (!CFWriteStreamOpen(v14) || !CGImageWriteEXIFJPEGWithMetadata())
  {
    uint64_t MPOFromJFIFData = FigSignalErrorAt();
    goto LABEL_61;
  }
  CFWriteStreamClose(v14);
  if (v17)
  {
    uint64_t MPOFromJFIFData = 0;
    goto LABEL_61;
  }
  uint64_t v51 = (CFDataRef *)malloc_type_calloc(v10, 0x10uLL, 0x1060040ADAFC7CAuLL);
  if (!v51) {
    goto LABEL_74;
  }
  double v47 = v14;
  CFTypeRef v48 = v16;
  CFDataRef v49 = v12;
  if (v10 < 1)
  {
    unsigned __int8 v54 = 0;
    char v52 = 0;
LABEL_47:
    CFDataRef v12 = v49;
    uint64_t MPOFromJFIFData = CMPhotoCreateMPOFromJFIFData((uint64_t)a2, v54, v49, v51, v10, v52);
    uint64_t v42 = 0;
    long long v34 = 0;
    uint64_t v28 = 0;
    goto LABEL_48;
  }
  CFIndex v20 = 0;
  char v52 = 0;
  unsigned __int8 v54 = 0;
  CFTypeRef v21 = v51 + 1;
  CFArrayRef v22 = theArray;
  CFAllocatorRef v55 = a1;
  while (1)
  {
    CFDataRef v58 = 0;
    CFNumberRef ValueAtIndex = (CMSampleBufferRef *)CFArrayGetValueAtIndex(v22, v20);
    CFTypeRef v24 = ValueAtIndex;
    if (*((unsigned char *)ValueAtIndex + 9))
    {
      uint64_t v25 = CMPhotoDataCreateFromSampleBuffer(a1, *ValueAtIndex, *((unsigned char *)ValueAtIndex + 8) == 0, &v58);
      if (v25) {
        goto LABEL_66;
      }
      unsigned __int8 v54 = 1;
      goto LABEL_42;
    }
    CFDataRef v61 = 0;
    uint64_t v62 = 0;
    uint64_t v63 = 0;
    char v57 = 0;
    __int16 v56 = 0;
    uint64_t v25 = CMPhotoAuxiliaryImageMetadataCreateXMPData((int)a1, ValueAtIndex[2], ValueAtIndex[4], *((_DWORD *)ValueAtIndex + 3), (__CFString *)ValueAtIndex[3], &theData);
    if (v25)
    {
LABEL_66:
      uint64_t MPOFromJFIFData = v25;
      uint64_t v42 = 0;
      long long v34 = 0;
      uint64_t v28 = 0;
      goto LABEL_71;
    }
    CFIndex Length = CFDataGetLength(theData);
    uint64_t v27 = CFDataCreateMutable(a1, Length + 29);
    uint64_t v28 = v27;
    if (!v27)
    {
      uint64_t v42 = 0;
      long long v34 = 0;
LABEL_69:
      uint64_t MPOFromJFIFData = 4294950305;
      goto LABEL_71;
    }
    CFDataAppendBytes(v27, (const UInt8 *)"http://ns.adobe.com/xap/1.0/", 29);
    unsigned __int8 BytePtr = CFDataGetBytePtr(theData);
    CFIndex v30 = CFDataGetLength(theData);
    CFDataAppendBytes(v28, BytePtr, v30);
    CFDataRef v61 = v28;
    LOBYTE(v56) = -31;
    CMSampleBufferRef v31 = v24[6];
    if (!v31)
    {
      long long v34 = 0;
      uint64_t v36 = 1;
      goto LABEL_29;
    }
    CFAllocatorRef v32 = CFGetAllocator(v24[6]);
    long long v33 = CFDataCreateMutable(v32, 0);
    long long v34 = v33;
    if (!v33)
    {
      uint64_t v42 = 0;
      goto LABEL_69;
    }
    CFDataAppendBytes(v33, (const UInt8 *)"urn:iso:std:iso:ts:21496:-1", 28);
    uint64_t v35 = CMPhotoWriteFlexRangeBinaryMetadata(v31, v34);
    if (v35) {
      break;
    }
    uint64_t v62 = v34;
    HIBYTE(v56) = -30;
    char v52 = 1;
    uint64_t v36 = 2;
LABEL_29:
    CMSampleBufferRef v37 = v24[5];
    if (v37)
    {
      CFIndex v38 = CFDataGetLength(v24[5]);
      if ((unint64_t)(v38 - 65519) < 0xFFFFFFFFFFFF0001)
      {
        uint64_t v44 = FigSignalErrorAt();
        uint64_t v42 = 0;
        if (v44)
        {
LABEL_45:
          uint64_t MPOFromJFIFData = v44;
          goto LABEL_71;
        }
      }
      else
      {
        CFIndex v39 = v38;
        CFAllocatorRef v40 = CFGetAllocator(v37);
        uint64_t v41 = CFDataCreateMutable(v40, 0);
        uint64_t v42 = v41;
        if (!v41) {
          goto LABEL_69;
        }
        CFDataAppendBytes(v41, (const UInt8 *)"ICC_PROFILE", 12);
        *(_WORD *)long long bytes = 257;
        CFDataAppendBytes(v42, bytes, 2);
        uint64_t v43 = CFDataGetBytePtr(v37);
        CFDataAppendBytes(v42, v43, v39);
      }
      CFArrayRef v22 = theArray;
      *(&v61 + v36) = v42;
      *((unsigned char *)&v56 + v36++) = -30;
    }
    else
    {
      uint64_t v42 = 0;
    }
    uint64_t v44 = CMPhotoCreateDataFromJFIFSampleBufferAndInjectAppMarkers(v55, *v24, v36, &v61, (char *)&v56, &v58);
    if (v44) {
      goto LABEL_45;
    }
    if (theData)
    {
      CFRelease(theData);
      CFDataRef theData = 0;
    }
    CFRelease(v28);
    a1 = v55;
    if (v42) {
      CFRelease(v42);
    }
    if (v34) {
      CFRelease(v34);
    }
LABEL_42:
    *((void *)v21 - 1) = v58;
    *CFTypeRef v21 = 0;
    v21 += 4;
    if (v10 == ++v20) {
      goto LABEL_47;
    }
  }
  uint64_t MPOFromJFIFData = v35;
  CFRelease(v34);
  uint64_t v42 = 0;
  long long v34 = 0;
LABEL_71:
  CFDataRef v12 = v49;
LABEL_48:
  unint64_t v14 = v47;
  CFTypeRef v16 = v48;
  if (v10 >= 1)
  {
    uint64_t v45 = (CFTypeRef *)v51;
    do
    {
      if (*v45)
      {
        CFRelease(*v45);
        *uint64_t v45 = 0;
      }
      v45 += 2;
      --v10;
    }
    while (v10);
  }
  free(v51);
  if (theData) {
    CFRelease(theData);
  }
  if (v28) {
    CFRelease(v28);
  }
  if (v42) {
    CFRelease(v42);
  }
  if (v34) {
    CFRelease(v34);
  }
LABEL_61:
  CFRelease(v14);
  if (v12) {
LABEL_62:
  }
    CFRelease(v12);
  if (v16) {
    CFRelease(v16);
  }
  return MPOFromJFIFData;
}

uint64_t CMPhotoCopyDebugMetadataFromJFIFByteStream(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4, _OWORD *a5, CFDataRef *a6)
{
  char v15 = 0;
  long long v14 = 0uLL;
  CFDataRef theData = 0;
  uint64_t v9 = _copyChunkedHeadersFromJFIFByteStream(a1, a2, a3, 227, (uint64_t)"iOS_Debug", 0xCuLL, 2, &v15, &v14, &theData);
  if (v9)
  {
    size_t v11 = 0;
  }
  else
  {
    if (!theData)
    {
      size_t v11 = 0;
      goto LABEL_13;
    }
    unsigned __int8 BytePtr = CFDataGetBytePtr(theData);
    size_t v11 = malloc_type_malloc(0xCuLL, 0xC9EAB29CuLL);
    memcpy(v11, BytePtr, 0xCuLL);
    if (strncmp((const char *)v11, "iOSCustom", 0xCuLL))
    {
      if (a4) {
        *a4 = v15;
      }
      if (a5) {
        *a5 = v14;
      }
      if (a6)
      {
        *a6 = theData;
        CFDataRef theData = 0;
        goto LABEL_13;
      }
    }
  }
  if (theData) {
    CFRelease(theData);
  }
LABEL_13:
  free(v11);
  return v9;
}

uint64_t CMPhotoCopyCustomMetadataFromJFIFByteStream(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4, _OWORD *a5, void *a6)
{
  return _copyChunkedHeadersFromJFIFByteStream(a1, a2, a3, 227, (uint64_t)"iOSCustom", 0xCuLL, 2, a4, a5, a6);
}

uint64_t CMPhotoGetXMPLocationFromJFIFByteStream(uint64_t a1, uint64_t a2, unsigned char *a3, void *a4, void *a5)
{
  unint64_t v23 = 29;
  CFTypeRef v24 = "http://ns.adobe.com/xap/1.0/";
  uint64_t v19 = 0;
  CFIndex v20 = &v19;
  uint64_t v21 = 0x2000000000;
  char v22 = 0;
  uint64_t v14 = 0;
  char v15 = &v14;
  uint64_t v16 = 0x2800000000;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  char v13 = -31;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = *(void *)"";
  v12[2] = __CMPhotoGetXMPLocationFromJFIFByteStream_block_invoke;
  _OWORD v12[3] = &unk_1E5E2FA08;
  v12[4] = &v14;
  v12[5] = &v19;
  uint64_t MarkersWithSignaturesInJFIFByteStreamWithHandler = CMPhotoFindMarkersWithSignaturesInJFIFByteStreamWithHandler(a1, a2, 1, (uint64_t)&v13, &v24, &v23, (uint64_t)v12);
  if (!MarkersWithSignaturesInJFIFByteStreamWithHandler)
  {
    if (a3) {
      *a3 = *((unsigned char *)v20 + 24);
    }
    if (a4)
    {
      if (*((unsigned char *)v20 + 24)) {
        uint64_t v9 = v23 + v15[3];
      }
      else {
        uint64_t v9 = 0;
      }
      *a4 = v9;
    }
    if (a5)
    {
      if (*((unsigned char *)v20 + 24)) {
        uint64_t v10 = v15[4] - v23;
      }
      else {
        uint64_t v10 = 0;
      }
      *a5 = v10;
    }
  }
  _Block_object_dispose(&v14, 8);
  _Block_object_dispose(&v19, 8);
  return MarkersWithSignaturesInJFIFByteStreamWithHandler;
}

uint64_t __CMPhotoGetXMPLocationFromJFIFByteStream_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
  *(void *)(v8 + 24) = a7;
  *(void *)(v8 + 32) = a8;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  return 4294950191;
}

uint64_t CMPhotoGetDQTLocationFromJFIFByteStream(uint64_t a1, uint64_t a2, unsigned char *a3, void *a4, void *a5)
{
  uint64_t v19 = 0;
  CFIndex v20 = &v19;
  uint64_t v21 = 0x2000000000;
  char v22 = 0;
  uint64_t v14 = 0;
  char v15 = &v14;
  uint64_t v16 = 0x2800000000;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  char v13 = -37;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = *(void *)"";
  v12[2] = __CMPhotoGetDQTLocationFromJFIFByteStream_block_invoke;
  _OWORD v12[3] = &unk_1E5E2FA30;
  v12[4] = &v14;
  v12[5] = &v19;
  uint64_t MarkersWithSignaturesInJFIFByteStreamWithHandler = CMPhotoFindMarkersWithSignaturesInJFIFByteStreamWithHandler(a1, a2, 1, (uint64_t)&v13, 0, 0, (uint64_t)v12);
  if (!MarkersWithSignaturesInJFIFByteStreamWithHandler)
  {
    if (a3) {
      *a3 = *((unsigned char *)v20 + 24);
    }
    if (a4)
    {
      if (*((unsigned char *)v20 + 24)) {
        uint64_t v9 = v15[3];
      }
      else {
        uint64_t v9 = 0;
      }
      *a4 = v9;
    }
    if (a5)
    {
      if (*((unsigned char *)v20 + 24)) {
        uint64_t v10 = v15[4];
      }
      else {
        uint64_t v10 = 0;
      }
      *a5 = v10;
    }
  }
  _Block_object_dispose(&v14, 8);
  _Block_object_dispose(&v19, 8);
  return MarkersWithSignaturesInJFIFByteStreamWithHandler;
}

uint64_t __CMPhotoGetDQTLocationFromJFIFByteStream_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
  *(void *)(v8 + 24) = a7;
  *(void *)(v8 + 32) = a8;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  return 4294950191;
}

uint64_t CMPhotoCopyIPTCFromJFIFByteStream(const __CFAllocator *a1, uint64_t a2, uint64_t a3, unsigned char *a4, __CFData **a5)
{
  unint64_t v36 = 14;
  CMSampleBufferRef v37 = "Photoshop 3.0";
  uint64_t v32 = 0;
  long long v33 = &v32;
  uint64_t v34 = 0x2000000000;
  char v35 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = &v27;
  uint64_t v29 = 0x2800000000;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  char v26 = -19;
  v25[0] = MEMORY[0x1E4F143A8];
  v25[1] = *(void *)"";
  v25[2] = __CMPhotoCopyIPTCFromJFIFByteStream_block_invoke;
  v25[3] = &unk_1E5E2FA58;
  v25[4] = &v27;
  v25[5] = &v32;
  uint64_t MarkersWithSignaturesInJFIFByteStreamWithHandler = CMPhotoFindMarkersWithSignaturesInJFIFByteStreamWithHandler(a2, a3, 1, (uint64_t)&v26, &v37, &v36, (uint64_t)v25);
  if (MarkersWithSignaturesInJFIFByteStreamWithHandler)
  {
    uint64_t v22 = MarkersWithSignaturesInJFIFByteStreamWithHandler;
    goto LABEL_17;
  }
  if (*((unsigned char *)v33 + 24))
  {
    uint64_t v10 = v28[4];
    unint64_t v11 = v36;
    CFMutableDataRef Mutable = CFDataCreateMutable(a1, 0);
    if (!Mutable)
    {
      uint64_t v22 = 4294950305;
      goto LABEL_17;
    }
    char v13 = Mutable;
    CFIndex v14 = v10 - v11;
    uint64_t v24 = 0;
    if (v14 < 0)
    {
      uint64_t v22 = 4294950190;
    }
    else
    {
      CFDataSetLength(Mutable, v14);
      Mutableunsigned __int8 BytePtr = CFDataGetMutableBytePtr(v13);
      uint64_t v16 = v28[3];
      unint64_t v17 = v36;
      uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v18) {
        uint64_t v19 = v18;
      }
      else {
        uint64_t v19 = 0;
      }
      CFIndex v20 = *(uint64_t (**)(uint64_t, CFIndex, unint64_t, UInt8 *, uint64_t *))(v19 + 8);
      if (v20)
      {
        uint64_t v21 = v20(a2, v14, v17 + v16, MutableBytePtr, &v24);
        if (v21)
        {
          uint64_t v22 = v21;
        }
        else
        {
          if (v24 == v14)
          {
            if (!a4) {
              goto LABEL_13;
            }
            goto LABEL_12;
          }
          uint64_t v22 = 4294950194;
        }
      }
      else
      {
        uint64_t v22 = 4294954514;
      }
    }
LABEL_16:
    CFRelease(v13);
    goto LABEL_17;
  }
  char v13 = 0;
  if (a4) {
LABEL_12:
  }
    *a4 = *((unsigned char *)v33 + 24);
LABEL_13:
  uint64_t v22 = 0;
  if (!a5)
  {
    if (!v13) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  *a5 = v13;
LABEL_17:
  _Block_object_dispose(&v27, 8);
  _Block_object_dispose(&v32, 8);
  return v22;
}

uint64_t __CMPhotoCopyIPTCFromJFIFByteStream_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
  *(void *)(v8 + 24) = a7;
  *(void *)(v8 + 32) = a8;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  return 4294950191;
}

uint64_t CMPhotoJFIFCopyCustomMetadataFromCFData(const __CFData *a1, CFTypeRef *a2)
{
  unsigned __int8 BytePtr = CFDataGetBytePtr(a1);
  if (!a1) {
    return 4294950306;
  }
  uint64_t v5 = BytePtr;
  unint64_t Length = CFDataGetLength(a1);
  CFIndex v7 = *(void *)v5;
  unint64_t v8 = *(void *)v5 + 8;
  if (v8 > Length) {
    return 4294950194;
  }
  unint64_t v9 = Length;
  CFStringRef v10 = CFStringCreateWithBytes(0, v5 + 8, *(void *)v5, 0x8000100u, 1u);
  if (!v10) {
    return 4294950305;
  }
  CFDataRef v11 = (const __CFData *)v10;
  CFIndex v12 = *(void *)&v5[v8];
  unint64_t v13 = v12 + v7 + 16;
  if (v13 > v9)
  {
    uint64_t v24 = 4294950194;
LABEL_22:
    CFDataRef v21 = v11;
LABEL_15:
    CFRelease(v21);
    return v24;
  }
  CFStringRef v14 = CFStringCreateWithBytes(0, &v5[v7 + 16], v12, 0x8000100u, 1u);
  if (!v14)
  {
    uint64_t v24 = 4294950305;
    goto LABEL_22;
  }
  CFStringRef v15 = v14;
  uint64_t v16 = *(void *)&v5[v13];
  unint64_t v17 = v13 + 8;
  if (v16 + v17 > v9)
  {
    CFDataRef v21 = 0;
    unint64_t v23 = 0;
    uint64_t v24 = 4294950194;
  }
  else
  {
    CFIndex v18 = CFDataGetLength(a1) - v17;
    CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFIndex v20 = CFDataGetBytePtr(a1);
    CFDataRef v21 = CFDataCreateWithBytesNoCopy(v19, &v20[v17], v18, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
    CFMutableDataRef Mutable = CFDictionaryCreateMutable(v19, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    unint64_t v23 = Mutable;
    if (Mutable)
    {
      if (v21) {
        CFDictionarySetValue(Mutable, @"Data", v21);
      }
      CFDictionarySetValue(v23, @"URI", v11);
      CFDictionarySetValue(v23, @"Name", v15);
      uint64_t v24 = 0;
      if (a2) {
        *a2 = CFRetain(v23);
      }
    }
    else
    {
      uint64_t v24 = 4294950305;
    }
  }
  CFRelease(v11);
  CFRelease(v15);
  if (v23) {
    CFRelease(v23);
  }
  if (v21) {
    goto LABEL_15;
  }
  return v24;
}

void *CreateTreeLeaves(void *result, int a2)
{
  if (a2 >= 1)
  {
    uint64_t v2 = result;
    uint64_t v3 = 0;
    uint64_t v4 = a2;
    do
    {
      uint64_t result = malloc_type_malloc(0x20uLL, 0x102004084B5A0ACuLL);
      v2[v3] = result;
      if (!result) {
        CreateTreeLeaves_cold_1();
      }
      *(_WORD *)uint64_t result = v3;
      result[2] = 0;
      *(void *)(v2[v3] + 24) = 0;
      *(void *)(v2[v3++] + _Block_object_dispose(&STACK[0x280], 8) = 0;
    }
    while (v4 != v3);
  }
  return result;
}

uint64_t CreateHuffTree(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (a2 < 1) {
    return 0;
  }
  unint64_t v7 = 0;
  uint64_t v8 = a2;
  while (1)
  {
    unint64_t v9 = (unsigned __int8 *)(a1 + 4 * v7);
    int v10 = *v9;
    if (*v9) {
      break;
    }
LABEL_14:
    if (++v7 == v8) {
      return 0;
    }
  }
  unsigned int v11 = *((unsigned __int16 *)v9 + 1);
  unsigned int v12 = (v11 >> (v10 - 1)) & 1;
  if (v10 == 1)
  {
    uint64_t v13 = a4;
LABEL_10:
    if (v7 >= 0x400) {
      CreateHuffTree_cold_1();
    }
    uint64_t v20 = *(void *)(a3 + 8 * v7);
    if (!v20) {
      CreateHuffTree_cold_2();
    }
    if (!v13) {
      CreateHuffTree_cold_3();
    }
    *(void *)(v13 + 8 * v12 + 16) = v20;
    *(void *)(v20 + _Block_object_dispose(&STACK[0x280], 8) = v13;
    goto LABEL_14;
  }
  int v14 = v10 - 2;
  uint64_t v13 = a4;
  while (1)
  {
    uint64_t v15 = v13 + 8 * v12;
    CFIndex v18 = *(void **)(v15 + 16);
    unint64_t v17 = (uint64_t *)(v15 + 16);
    uint64_t v16 = v18;
    if (!v18)
    {
      uint64_t v19 = 1;
      uint64_t v16 = malloc_type_calloc(0x20uLL, 1uLL, 0xB24F6338uLL);
      uint64_t *v17 = (uint64_t)v16;
      if (!v16) {
        return v19;
      }
    }
    v16[1] = v13;
    uint64_t v13 = *v17;
    unsigned int v12 = (v11 >> v14--) & 1;
    if (v14 == -1) {
      goto LABEL_10;
    }
  }
}

void DestroyHuffTree(void *a1)
{
  if (a1)
  {
    DestroyHuffTree(a1[2]);
    DestroyHuffTree(a1[3]);
    free(a1);
  }
}

uint64_t SlimDecodeFrame(int *a1)
{
  if (*a1 < 0x10 || (unsigned int v1 = a1[1], v1 <= 0xF)) {
    SlimDecodeFrame_cold_4();
  }
  unint64_t v2 = *((void *)a1 + 7);
  int v3 = a1[8];
  if (v3 <= 875836533)
  {
    if (v3 <= 875704421)
    {
      if (v3 == 825437747) {
        goto LABEL_18;
      }
      int v4 = 846624121;
    }
    else
    {
      if (v3 == 875704422 || v3 == 875704438) {
        goto LABEL_18;
      }
      int v4 = 875836518;
    }
  }
  else if (v3 > 1650943795)
  {
    if (v3 == 1650943796 || v3 == 2037741158) {
      goto LABEL_18;
    }
    int v4 = 2037741171;
  }
  else
  {
    if (v3 == 875836534 || v3 == 1278226536) {
      goto LABEL_18;
    }
    int v4 = 1278226742;
  }
  if (v3 != v4) {
    SlimDecodeFrame_cold_1();
  }
LABEL_18:
  LODWORD(v5) = 0;
  unsigned int v6 = 0;
  uint64_t v7 = *((void *)a1 + 8);
  uint64_t v8 = *((void *)a1 + 11);
  int v9 = 2 * *a1 * v1;
  if (v3 <= 875836517)
  {
    if (v3 == 846624121)
    {
      LODWORD(v5) = 0;
      *(unsigned char *)uint64_t v8 = *(unsigned char *)(v7 + 1);
      *(unsigned char *)(v8 + 1) = *(unsigned char *)v7;
      *(unsigned char *)(v8 + 2) = *(unsigned char *)(v7 + 3);
      *(unsigned char *)(v8 + 3) = *(unsigned char *)(v7 + 2);
      unsigned int v11 = (unsigned char *)(v8 + 4);
      goto LABEL_29;
    }
    if (v3 == 875704422) {
      goto LABEL_28;
    }
    int v10 = 875704438;
LABEL_27:
    unsigned int v11 = (unsigned char *)*((void *)a1 + 11);
    if (v3 != v10) {
      goto LABEL_30;
    }
    goto LABEL_28;
  }
  if (v3 <= 1650943795)
  {
    if (v3 != 875836518)
    {
      int v10 = 875836534;
      goto LABEL_27;
    }
LABEL_28:
    LODWORD(v5) = 0;
    *(_DWORD *)uint64_t v8 = *(_DWORD *)v7;
    unsigned int v11 = (unsigned char *)(v8 + 4);
LABEL_29:
    unsigned int v6 = 32;
    goto LABEL_30;
  }
  if (v3 != 1650943796)
  {
    int v10 = 2037741171;
    goto LABEL_27;
  }
  if (!(v7 | v8)) {
    SlimDecodeFrame_cold_2();
  }
  uint64_t v5 = (_DWORD *)(v7 + 8);
  *(_WORD *)uint64_t v8 = *(_WORD *)v7;
  *(_WORD *)(v8 + 2) = *(_WORD *)(v7 + 2);
  *(_WORD *)(v8 + 4) = *(_WORD *)(v7 + 4);
  *(_WORD *)(v8 + 6) = *(_WORD *)(v7 + 6);
  unsigned int v140 = v9 >> 1;
  if (v9 < 9)
  {
    unsigned int v6 = 31;
  }
  else
  {
    uint64_t v141 = *((void *)a1 + 1043);
    uint64_t v142 = *(void *)(v141 + 16);
    if (v140 <= 5) {
      uint64_t v143 = 5;
    }
    else {
      uint64_t v143 = v140;
    }
    uint64_t v144 = 4;
    unsigned int v145 = (__int16 *)v8;
    unsigned int v6 = 31;
    do
    {
      if (!v5) {
        SlimDecodeFrame_cold_3();
      }
      __int16 v146 = v5;
      uint64_t v147 = v141;
      if (v142)
      {
        do
        {
          uint64_t v147 = *(void *)(v147 + 8 * ((*v146 >> v6) & 1) + 16);
          BOOL v148 = v6 == 0;
          if (v6)
          {
            --v6;
          }
          else
          {
            uint64_t v5 = v146 + 1;
            unsigned int v6 = 31;
          }
          if (v148) {
            ++v146;
          }
        }
        while (*(void *)(v147 + 16));
      }
      __int16 v149 = *v145++;
      __int16 v150 = v149 + *(_WORD *)v147;
      uint64_t v151 = (_WORD *)(v8 + 2 * v144);
      if ((v150 & 0xFC00) != 0) {
        v150 -= 1024;
      }
      *uint64_t v151 = v150;
      *(v151 - 4) *= 16;
      ++v144;
    }
    while (v144 != v143);
  }
  uint64_t v152 = 0;
  unsigned int v153 = v140 - 1;
  do
    *(_WORD *)(v8 + 2 * (v153 + v152--)) *= 16;
  while (v152 != -4);
  unsigned int v11 = (unsigned char *)v8;
LABEL_30:
  unint64_t v12 = v2 >> 2;
  int v13 = a1[8];
  if (v13 > 875836517)
  {
    if (v13 != 875836518 && v13 != 875836534)
    {
      if (v13 != 2037741171) {
        goto LABEL_134;
      }
      if (v9 >= 5)
      {
        uint64_t v37 = 0;
        int v38 = v9 - 4;
        do
        {
          unsigned int v39 = *(_DWORD *)(v7 + 4 * (v6 >> 5));
          if ((v6 & 0x1F) != 0)
          {
            unsigned int v40 = (v6 >> 5) + 1;
            if (v40 >= v12) {
              unsigned int v41 = 0;
            }
            else {
              unsigned int v41 = *(_DWORD *)(v7 + 4 * v40);
            }
            unsigned int v39 = (v39 << (v6 & 0x1F)) | (v41 >> 1 >> (v6 & 0x1F ^ 0x1F));
          }
          uint64_t v42 = &v11[v37];
          uint64_t v43 = (char *)&decode_luma12 + 2 * (v39 >> 20);
          if (v39 <= 0xEFFFFF) {
            uint64_t v43 = (char *)&decode_luma17 + 2 * (v39 >> 15);
          }
          uint64_t v44 = v43 + 1;
          uint64_t v45 = (char *)&decode_luma9 + 2 * (v39 >> 23);
          BOOL v46 = v39 > 0x117FFFFF;
          if (v39 > 0x117FFFFF) {
            double v47 = (unsigned __int8 *)&decode_luma9 + 2 * (v39 >> 23);
          }
          else {
            double v47 = (unsigned __int8 *)v43;
          }
          if (v46) {
            uint64_t v44 = v45 + 1;
          }
          unsigned int v48 = v6 + *v47;
          *uint64_t v42 = *v44 + v11[v37 - 2];
          unsigned int v49 = *(_DWORD *)(v7 + 4 * (v48 >> 5));
          if ((v48 & 0x1F) != 0)
          {
            unsigned int v50 = (v48 >> 5) + 1;
            if (v50 >= v12) {
              unsigned int v51 = 0;
            }
            else {
              unsigned int v51 = *(_DWORD *)(v7 + 4 * v50);
            }
            unsigned int v49 = (v49 << (v48 & 0x1F)) | (v51 >> 1 >> (v48 & 0x1F ^ 0x1F));
          }
          char v52 = &v11[v37];
          uint64_t v53 = v37 + 2;
          char v54 = *(v42 - 3);
          unsigned int v55 = HIBYTE(v49);
          __int16 v56 = (char *)&decode_chroma23 + 2 * (v49 >> 9);
          if (v49 >> 10 < 0xD) {
            __int16 v56 = (char *)&decode_chroma26 + 2 * (v49 >> 6);
          }
          char v57 = v56 + 1;
          if (v49 >= 0x40000)
          {
            __int16 v56 = (char *)&decode_chroma16 + 2 * HIWORD(v49);
            char v57 = v56 + 1;
          }
          CFDataRef v58 = (char *)&decode_chroma9 + 2 * (v49 >> 23);
          BOOL v59 = v55 == 0;
          if (v55) {
            uint64_t v60 = (unsigned __int8 *)v58;
          }
          else {
            uint64_t v60 = (unsigned __int8 *)v56;
          }
          if (v59) {
            CFDataRef v61 = v57;
          }
          else {
            CFDataRef v61 = v58 + 1;
          }
          unsigned int v6 = v48 + *v60;
          v52[1] = *v61 + v54;
          uint64_t v37 = v53;
        }
        while ((int)v53 < v38);
      }
      goto LABEL_133;
    }
    goto LABEL_40;
  }
  if (v13 == 846624121)
  {
    if (v9 >= 5)
    {
      uint64_t v116 = 0;
      int v117 = v9 - 4;
      do
      {
        unsigned int v118 = *(_DWORD *)(v7 + 4 * (v6 >> 5));
        if ((v6 & 0x1F) != 0)
        {
          unsigned int v119 = (v6 >> 5) + 1;
          if (v119 >= v12) {
            unsigned int v120 = 0;
          }
          else {
            unsigned int v120 = *(_DWORD *)(v7 + 4 * v119);
          }
          unsigned int v118 = (v118 << (v6 & 0x1F)) | (v120 >> 1 >> (v6 & 0x1F ^ 0x1F));
        }
        unint64_t v121 = &v11[v116];
        long long v122 = (char *)&decode_luma12 + 2 * (v118 >> 20);
        if (v118 <= 0xEFFFFF) {
          long long v122 = (char *)&decode_luma17 + 2 * (v118 >> 15);
        }
        long long v123 = v122 + 1;
        int v124 = (char *)&decode_luma9 + 2 * (v118 >> 23);
        BOOL v125 = v118 > 0x117FFFFF;
        if (v118 > 0x117FFFFF) {
          int v126 = (unsigned __int8 *)&decode_luma9 + 2 * (v118 >> 23);
        }
        else {
          int v126 = (unsigned __int8 *)v122;
        }
        if (v125) {
          long long v123 = v124 + 1;
        }
        unsigned int v127 = v6 + *v126;
        v121[1] = *v123 + v11[v116 - 1];
        unsigned int v128 = *(_DWORD *)(v7 + 4 * (v127 >> 5));
        if ((v127 & 0x1F) != 0)
        {
          unsigned int v129 = (v127 >> 5) + 1;
          if (v129 >= v12) {
            unsigned int v130 = 0;
          }
          else {
            unsigned int v130 = *(_DWORD *)(v7 + 4 * v129);
          }
          unsigned int v128 = (v128 << (v127 & 0x1F)) | (v130 >> 1 >> (v127 & 0x1F ^ 0x1F));
        }
        char v131 = *(v121 - 4);
        unsigned int v132 = HIBYTE(v128);
        uint64_t v133 = (char *)&decode_chroma23 + 2 * (v128 >> 9);
        if (v128 >> 10 < 0xD) {
          uint64_t v133 = (char *)&decode_chroma26 + 2 * (v128 >> 6);
        }
        uint64_t v134 = v133 + 1;
        if (v128 >= 0x40000)
        {
          uint64_t v133 = (char *)&decode_chroma16 + 2 * HIWORD(v128);
          uint64_t v134 = v133 + 1;
        }
        uint64_t v135 = (char *)&decode_chroma9 + 2 * (v128 >> 23);
        BOOL v136 = v132 == 0;
        if (v132) {
          long long v137 = (unsigned __int8 *)v135;
        }
        else {
          long long v137 = (unsigned __int8 *)v133;
        }
        if (v136) {
          uint64_t v138 = v134;
        }
        else {
          uint64_t v138 = v135 + 1;
        }
        int v139 = *v137;
        v11[v116] = *v138 + v131;
        unsigned int v6 = v127 + v139;
        v116 += 2;
      }
      while ((int)v116 < v117);
    }
    goto LABEL_133;
  }
  if (v13 == 875704422 || v13 == 875704438)
  {
LABEL_40:
    int v15 = a1[1];
    if (v15)
    {
      int v16 = 0;
      unsigned int v17 = *a1;
      int v18 = *(v11 - 1);
      unsigned int v19 = v11 - v8;
      uint64_t v20 = a1[2] - *a1;
      do
      {
        BOOL v21 = v17 >= v19;
        unsigned int v22 = v17 - v19;
        if (v22 != 0 && v21)
        {
          do
          {
            unsigned int v23 = *(_DWORD *)(v7 + 4 * (v6 >> 5));
            if ((v6 & 0x1F) != 0)
            {
              unsigned int v24 = (v6 >> 5) + 1;
              if (v24 >= v12) {
                unsigned int v25 = 0;
              }
              else {
                unsigned int v25 = *(_DWORD *)(v7 + 4 * v24);
              }
              unsigned int v23 = (v23 << (v6 & 0x1F)) | (v25 >> 1 >> (v6 & 0x1F ^ 0x1F));
            }
            char v26 = (char *)&decode_luma12 + 2 * (v23 >> 20);
            if (v23 <= 0xEFFFFF) {
              char v26 = (char *)&decode_luma17 + 2 * (v23 >> 15);
            }
            uint64_t v27 = (unsigned __int8 *)(v26 + 1);
            uint64_t v28 = (char *)&decode_luma9 + 2 * (v23 >> 23);
            BOOL v29 = v23 > 0x117FFFFF;
            if (v23 > 0x117FFFFF) {
              uint64_t v30 = (unsigned __int8 *)&decode_luma9 + 2 * (v23 >> 23);
            }
            else {
              uint64_t v30 = (unsigned __int8 *)v26;
            }
            if (v29) {
              uint64_t v27 = (unsigned __int8 *)(v28 + 1);
            }
            v6 += *v30;
            v18 += *v27;
            *v11++ = v18;
            --v22;
          }
          while (v22);
        }
        unsigned int v19 = 0;
        v11 += v20;
        ++v16;
      }
      while (v16 != v15);
    }
    unsigned int v31 = v6 + 31;
    uint64_t v8 = *((void *)a1 + 12);
    unsigned int v32 = *(_DWORD *)(v7 + 4 * (v31 >> 5));
    *(_DWORD *)uint64_t v8 = v32;
    long long v33 = (unsigned char *)(v8 + 4);
    unsigned int v34 = (v31 & 0xFFFFFFE0) + 32;
    if ((a1[8] | 0x10) == 0x34323076)
    {
      unsigned int v35 = *a1;
      unsigned int v36 = a1[1] >> 1;
      if (!v36) {
        goto LABEL_132;
      }
    }
    else
    {
      unsigned int v36 = a1[1];
      unsigned int v35 = 2 * *a1;
      if (!v36)
      {
LABEL_132:
        unsigned int v6 = (v34 + 31) & 0xFFFFFFE0;
LABEL_133:
        int v13 = a1[8];
        goto LABEL_134;
      }
    }
    int v62 = 0;
    unsigned int v63 = HIWORD(v32);
    unsigned int v64 = HIBYTE(v32);
    uint64_t v65 = (int)(a1[3] - v35);
    unsigned int v66 = 4;
    do
    {
      if (v66 >= v35)
      {
        double v88 = v33;
      }
      else
      {
        do
        {
          unsigned int v67 = *(_DWORD *)(v7 + 4 * (v34 >> 5));
          if ((v34 & 0x1F) != 0)
          {
            unsigned int v68 = (v34 >> 5) + 1;
            if (v68 >= v12) {
              unsigned int v69 = 0;
            }
            else {
              unsigned int v69 = *(_DWORD *)(v7 + 4 * v68);
            }
            unsigned int v67 = (v67 << (v34 & 0x1F)) | (v69 >> 1 >> (v34 & 0x1F ^ 0x1F));
          }
          unsigned int v70 = HIBYTE(v67);
          size_t v71 = (char *)&decode_chroma23 + 2 * (v67 >> 9);
          if (v67 >> 10 < 0xD) {
            size_t v71 = (char *)&decode_chroma26 + 2 * (v67 >> 6);
          }
          unint64_t v72 = v71 + 1;
          if (v67 >= 0x40000)
          {
            size_t v71 = (char *)&decode_chroma16 + 2 * HIWORD(v67);
            unint64_t v72 = v71 + 1;
          }
          unint64_t v73 = (char *)&decode_chroma9 + 2 * (v67 >> 23);
          BOOL v74 = v70 == 0;
          if (v70) {
            uint64_t v75 = (unsigned __int8 *)v73;
          }
          else {
            uint64_t v75 = (unsigned __int8 *)v71;
          }
          if (v74) {
            uint64_t v76 = v72;
          }
          else {
            uint64_t v76 = v73 + 1;
          }
          unsigned int v77 = v34 + *v75;
          v63 += *v76;
          *long long v33 = v63;
          unsigned int v78 = *(_DWORD *)(v7 + 4 * (v77 >> 5));
          if ((v77 & 0x1F) != 0)
          {
            unsigned int v79 = (v77 >> 5) + 1;
            if (v79 >= v12) {
              unsigned int v80 = 0;
            }
            else {
              unsigned int v80 = *(_DWORD *)(v7 + 4 * v79);
            }
            unsigned int v78 = (v78 << (v77 & 0x1F)) | (v80 >> 1 >> (v77 & 0x1F ^ 0x1F));
          }
          unsigned int v81 = HIBYTE(v78);
          uint64_t v82 = (char *)&decode_chroma23 + 2 * (v78 >> 9);
          if (v78 >> 10 < 0xD) {
            uint64_t v82 = (char *)&decode_chroma26 + 2 * (v78 >> 6);
          }
          uint64_t v83 = v82 + 1;
          if (v78 >= 0x40000)
          {
            uint64_t v82 = (char *)&decode_chroma16 + 2 * HIWORD(v78);
            uint64_t v83 = v82 + 1;
          }
          dispatch_semaphore_t v84 = (char *)&decode_chroma9 + 2 * (v78 >> 23);
          BOOL v85 = v81 == 0;
          if (v81) {
            IOSurfaceRef v86 = (unsigned __int8 *)v84;
          }
          else {
            IOSurfaceRef v86 = (unsigned __int8 *)v82;
          }
          if (v85) {
            uint64_t v87 = v83;
          }
          else {
            uint64_t v87 = v84 + 1;
          }
          unsigned int v34 = v77 + *v86;
          v64 += *v87;
          double v88 = v33 + 2;
          v33[1] = v64;
          v66 += 2;
          v33 += 2;
        }
        while (v66 < v35);
      }
      unsigned int v66 = 0;
      long long v33 = &v88[v65];
      ++v62;
    }
    while (v62 != v36);
    goto LABEL_132;
  }
LABEL_134:
  if (v13 > 1278226741)
  {
    if (v13 != 1278226742 && v13 != 2037741158)
    {
      if (v13 == 1650943796) {
        return (v5 - v7 + 4);
      }
      return (v6 >> 3) & 0x1FFFFFFC;
    }
    goto LABEL_141;
  }
  if (v13 == 825437747 || v13 == 1278226536)
  {
LABEL_141:
    unsigned int v90 = (*a1 + 15) & 0xFFFFFFF0;
    unsigned int v91 = a1[2] >> 1;
    BOOL v21 = v91 >= v90;
    unsigned int v92 = v91 - v90;
    if (!v21 || (*(_WORD *)v7 & 0xFFFE) != 0x5A02) {
      return 0;
    }
    unint64_t v93 = v7 + a1[14];
    uint64_t v94 = *(unsigned __int16 *)(v7 + 2);
    uint64_t v95 = v7 + 4;
    uint64_t v96 = (unsigned __int8 *)(v95 + 2 * v94);
    LODWORD(v97) = v8;
    if ((unint64_t)v96 >= v93) {
      return (v97 - v8);
    }
    int v98 = 0;
    int v99 = 0;
    int v100 = 0;
    int v97 = (_WORD *)v8;
    while (1)
    {
      unsigned int v101 = *v96;
      if (!v99) {
        break;
      }
      unsigned int v102 = v101 & 0xF;
      if (v102 > 0xC)
      {
        if (v102 != 15)
        {
          if (v102 == 13) {
            return (v97 - v8);
          }
          unsigned int v105 = *++v96;
          int v106 = (v105 >> 4) + 1;
          do
          {
            *int v97 = *(_WORD *)(v95 + 2 * (unsigned __int16)v100);
            if (v98 + 1 == v90) {
              unsigned int v107 = v92;
            }
            else {
              unsigned int v107 = 0;
            }
            v97 += v107 + 1;
            if (v98 + 1 == v90) {
              int v98 = 0;
            }
            else {
              ++v98;
            }
            --v106;
          }
          while ((_BYTE)v106);
LABEL_203:
          int v99 = 1;
          goto LABEL_204;
        }
        int v110 = v96[1];
        if ((v110 & 0x80) != 0)
        {
          int v100 = v100 + v110 - 192;
          uint64_t v111 = 1;
        }
        else
        {
          int v100 = v96[2] | (v110 << 8);
          uint64_t v111 = 2;
        }
        int v99 = 0;
        *int v97 = *(_WORD *)(v95 + 2 * (unsigned __int16)v100);
        if (v98 + 1 == v90) {
          unsigned int v114 = v92;
        }
        else {
          unsigned int v114 = 0;
        }
        v97 += v114 + 1;
        if (v98 + 1 == v90) {
          int v98 = 0;
        }
        else {
          ++v98;
        }
        v96 += v111;
      }
      else
      {
        int v99 = 0;
        int v100 = v100 + v102 - 6;
        *int v97 = *(_WORD *)(v95 + 2 * (unsigned __int16)v100);
        if (v98 + 1 == v90) {
          unsigned int v103 = v92;
        }
        else {
          unsigned int v103 = 0;
        }
        v97 += v103 + 1;
        if (v98 + 1 == v90) {
          int v98 = 0;
        }
        else {
          ++v98;
        }
      }
      ++v96;
LABEL_204:
      if ((unint64_t)v96 >= v93) {
        return (v97 - v8);
      }
    }
    if (v101 <= 0xCF)
    {
      int v100 = v100 + (v101 >> 4) - 6;
      *int v97 = *(_WORD *)(v95 + 2 * (unsigned __int16)v100);
      if (v98 + 1 == v90) {
        unsigned int v104 = v92;
      }
      else {
        unsigned int v104 = 0;
      }
      v97 += v104 + 1;
      if (v98 + 1 == v90) {
        int v98 = 0;
      }
      else {
        ++v98;
      }
      int v99 = 1;
      goto LABEL_204;
    }
    if (v101 <= 0xEF)
    {
      int v108 = (v101 & 0xF) + 1;
      do
      {
        *int v97 = *(_WORD *)(v95 + 2 * (unsigned __int16)v100);
        if (v98 + 1 == v90) {
          unsigned int v109 = v92;
        }
        else {
          unsigned int v109 = 0;
        }
        v97 += v109 + 1;
        if (v98 + 1 == v90) {
          int v98 = 0;
        }
        else {
          ++v98;
        }
        --v108;
      }
      while ((_BYTE)v108);
      int v99 = 0;
      ++v96;
      goto LABEL_204;
    }
    unsigned int v112 = v96[1];
    if ((v101 & 8) != 0)
    {
      int v100 = ((v112 >> 4) & 0xFFFFFF0F | (16 * (v101 & 0xF))) + v100 - 192;
      ++v96;
    }
    else
    {
      unsigned int v113 = v96[2];
      v96 += 2;
      int v100 = (v101 << 12) | (16 * v112) | (v113 >> 4);
    }
    *int v97 = *(_WORD *)(v95 + 2 * (unsigned __int16)v100);
    if (v98 + 1 == v90) {
      unsigned int v115 = v92;
    }
    else {
      unsigned int v115 = 0;
    }
    v97 += v115 + 1;
    if (v98 + 1 == v90) {
      int v98 = 0;
    }
    else {
      ++v98;
    }
    goto LABEL_203;
  }
  return (v6 >> 3) & 0x1FFFFFFC;
}

uint64_t SlimEncodeFrame(uint64_t a1)
{
  unsigned int v1 = (_DWORD *)MEMORY[0x1F4188790](a1);
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  int v7 = *v1;
  if (*v1 < 0x10u) {
    return 4294951896;
  }
  uint64_t v8 = v1;
  unsigned int v9 = v1[1];
  if (v9 < 0x10) {
    return 4294951896;
  }
  int v10 = v2;
  int v11 = v1[8];
  uint64_t result = 4294951896;
  if (v11 <= 875836533)
  {
    if (v11 <= 875704421)
    {
      if (v11 == 825437747) {
        goto LABEL_18;
      }
      int v13 = 846624121;
    }
    else
    {
      if (v11 == 875704422 || v11 == 875704438) {
        goto LABEL_18;
      }
      int v13 = 875836518;
    }
  }
  else if (v11 > 1650943795)
  {
    if (v11 == 1650943796 || v11 == 2037741171) {
      goto LABEL_18;
    }
    int v13 = 2037741158;
  }
  else
  {
    if (v11 == 875836534 || v11 == 1278226536) {
      goto LABEL_18;
    }
    int v13 = 1278226742;
  }
  if (v11 != v13) {
    return result;
  }
LABEL_18:
  int v14 = (unsigned __int8 *)*((void *)v8 + 8);
  uint64_t v15 = *((void *)v8 + 11);
  int v16 = 2 * v9 * v7;
  if (v11 > 875836533)
  {
    if (v11 <= 1650943795)
    {
      if (v11 == 875836534)
      {
LABEL_59:
        int v47 = pack_420v_luma_arm(*((void *)v8 + 8), *((void *)v8 + 11));
        unsigned int v48 = v47;
        uint64_t v49 = v15 + 4 * (v47 >> 2);
        if ((v47 & 3) != 0)
        {
          uint64_t v50 = (uint64_t)v47 >> 2;
          bzero((void *)(v15 + (v47 & 3 | (unint64_t)(4 * v50))), 4 - (v47 & 3u));
          *(_DWORD *)(v15 + 4 * v50) = bswap32(*(_DWORD *)(v15 + 4 * v50));
          v49 += 4;
          unsigned int v48 = (v48 + 3) & 0xFFFFFFFC;
        }
        if ((v8[8] | 0x10) == 0x34323076) {
          uint64_t v51 = (*v8 * v8[1]) >> 1;
        }
        else {
          uint64_t v51 = (2 * v8[1] * *v8);
        }
        int v43 = pack_420v_chroma_arm(*((void *)v8 + 9), v49, v51, chroma) + v48;
        uint64_t v54 = v43 & 3;
        if ((v43 & 3) == 0) {
          goto LABEL_70;
        }
        int v55 = v43 >> 2;
        uint64_t v56 = (uint64_t)v43 >> 2;
LABEL_69:
        bzero((void *)(v15 + (v54 | (4 * v56))), (4 - v54));
        *(_DWORD *)(v15 + 4 * v55) = bswap32(*(_DWORD *)(v15 + 4 * v55));
        int v43 = (v43 + 3) & 0xFFFFFFFC;
        goto LABEL_70;
      }
      if (v11 != 1278226742) {
        goto LABEL_56;
      }
    }
    else
    {
      if (v11 == 1650943796)
      {
        int v57 = pack_bgg4_arm(v3, v4, v5, v6);
        int v43 = v57;
        uint64_t v54 = v57 & 3;
        if ((v57 & 3) == 0) {
          goto LABEL_70;
        }
        int v55 = v57 >> 2;
        uint64_t v56 = (uint64_t)v57 >> 2;
        goto LABEL_69;
      }
      if (v11 != 2037741158)
      {
        if (v11 != 2037741171) {
          goto LABEL_56;
        }
        *(_DWORD *)uint64_t v15 = *(_DWORD *)v14;
        unsigned int v17 = (unsigned int *)(v15 + 4);
        if (v16 >= 5)
        {
          uint64_t v18 = 0;
          unsigned int v19 = 0;
          int v20 = v16 - 4;
          BOOL v21 = v14 + 4;
          int v22 = -32;
          do
          {
            uint64_t v23 = (v21[v18] - v21[v18 - 2]);
            int v24 = luma[2 * v23];
            int v25 = v22 + v24;
            if (v22 + v24 < 0)
            {
              unsigned int v27 = (v19 << v24) | luma[2 * v23 + 1];
            }
            else
            {
              unsigned int v26 = v19 << -(char)v22;
              unsigned int v27 = luma[2 * v23 + 1];
              *v17++ = (v27 >> v25) | v26;
              v25 -= 32;
            }
            uint64_t v28 = (v21[v18 + 1] - v21[v18 - 3]);
            int v29 = chroma[2 * v28];
            int v22 = v25 + v29;
            if (v25 + v29 < 0)
            {
              unsigned int v19 = (v27 << v29) | chroma[2 * v28 + 1];
            }
            else
            {
              unsigned int v30 = v27 << -(char)v25;
              unsigned int v19 = chroma[2 * v28 + 1];
              *v17++ = (v19 >> v22) | v30;
              v22 -= 32;
            }
            v18 += 2;
          }
          while ((int)v18 < v20);
          if (v22 >= -31)
          {
            unsigned int v31 = v19 << -(char)v22;
LABEL_52:
            unsigned int *v17 = v31;
            LODWORD(v17) = v17 + 4;
          }
        }
LABEL_53:
        int v43 = v17 - v15;
        goto LABEL_70;
      }
    }
  }
  else
  {
    if (v11 > 875704421)
    {
      if (v11 != 875704422 && v11 != 875704438 && v11 != 875836518)
      {
LABEL_56:
        if (v11 != 1278226536)
        {
LABEL_58:
          int v43 = 0;
          goto LABEL_70;
        }
        goto LABEL_57;
      }
      goto LABEL_59;
    }
    if (v11 != 825437747)
    {
      if (v11 != 846624121) {
        goto LABEL_56;
      }
      *(_DWORD *)uint64_t v15 = v14[1] | (((v14[2] << 16) | (v14[3] << 8) | *v14) << 8);
      unsigned int v17 = (unsigned int *)(v15 + 4);
      if (v16 >= 5)
      {
        uint64_t v32 = 0;
        unsigned int v33 = 0;
        int v34 = -32;
        do
        {
          uint64_t v35 = (v14[v32 + 5] - v14[v32 + 3]);
          int v36 = luma[2 * v35];
          int v37 = v34 + v36;
          if (v34 + v36 < 0)
          {
            unsigned int v39 = (v33 << v36) | luma[2 * v35 + 1];
          }
          else
          {
            unsigned int v38 = v33 << -(char)v34;
            unsigned int v39 = luma[2 * v35 + 1];
            *v17++ = (v39 >> v37) | v38;
            v37 -= 32;
          }
          uint64_t v40 = (v14[v32 + 4] - v14[v32]);
          int v41 = chroma[2 * v40];
          int v34 = v37 + v41;
          if (v37 + v41 < 0)
          {
            unsigned int v33 = (v39 << v41) | chroma[2 * v40 + 1];
          }
          else
          {
            unsigned int v42 = v39 << -(char)v37;
            unsigned int v33 = chroma[2 * v40 + 1];
            *v17++ = (v33 >> v34) | v42;
            v34 -= 32;
          }
          v32 += 2;
        }
        while ((int)v32 < v16 - 4);
        if (v34 >= -31)
        {
          unsigned int v31 = v33 << -(char)v34;
          goto LABEL_52;
        }
      }
      goto LABEL_53;
    }
  }
LABEL_57:
  unsigned int v44 = (v7 + 15) & 0xFFFFFFF0;
  unsigned int v45 = v8[2];
  unsigned int v46 = (v45 >> 1) - v44;
  if (v45 >> 1 < v44) {
    goto LABEL_58;
  }
  unsigned int v52 = v45 * v9;
  if (*((unsigned char *)v8 + 144))
  {
    uint64_t v53 = *((void *)v8 + 17);
    if (v53)
    {
      int v43 = EncodeFrameThreads(v53, *((unsigned __int16 **)v8 + 8), v52, *((_WORD **)v8 + 11), v44, (v45 >> 1) - v44);
      goto LABEL_70;
    }
    return 4294951896;
  }
  uint64_t v58 = v52 >> 1;
  uint64_t v59 = v15 + 4;
  bzero(v78, 0x1FFFEuLL);
  if (v52 >= 2)
  {
    uint64_t v60 = 2 * v58;
    CFDataRef v61 = (unsigned __int16 *)v14;
    do
    {
      int v62 = *v61++;
      v78[v62] = 1;
      v60 -= 2;
    }
    while (v60);
  }
  uint64_t v63 = 0;
  __int16 v64 = 0;
  do
  {
    if (v78[v63] == 1)
    {
      v78[v63] = v64++;
      *(_WORD *)uint64_t v59 = v63;
      v59 += 2;
    }
    ++v63;
  }
  while (v63 != 0xFFFF);
  *(_WORD *)uint64_t v15 = 23043;
  *(_WORD *)(v15 + 2) = v64;
  unsigned int v65 = (unsigned __int16)v78[*(unsigned __int16 *)v14];
  *(unsigned char *)uint64_t v59 = (v65 >> 12) | 0xF0;
  *(unsigned char *)(v59 + 1) = v65 >> 4;
  unsigned int v66 = (char *)(v59 + 2);
  int v67 = 16 * v65;
  if (v58 == 1)
  {
LABEL_136:
    *unsigned int v66 = v67 + 13;
    LODWORD(v66) = v66 + 1;
    goto LABEL_137;
  }
  int v68 = 0;
  unsigned int v69 = v14 + 2;
  int v70 = 1;
  int v71 = 1;
  do
  {
    unsigned int v72 = (unsigned __int16)v78[*(unsigned __int16 *)v69];
    unsigned int v73 = v72 - v65;
    int v74 = (__int16)(v72 - v65);
    if (v74 < 0) {
      int v74 = -v74;
    }
    if ((unsigned __int16)v74 > 6u)
    {
      if (!(_BYTE)v68)
      {
        if (v71) {
          goto LABEL_110;
        }
        goto LABEL_114;
      }
      if (v68 == 1)
      {
        if (v71)
        {
          *v66++ = v67 + 6;
LABEL_114:
          if ((unsigned __int16)(v73 + 64) > 0x7Fu)
          {
            int v68 = 0;
            *unsigned int v66 = (v72 >> 12) | 0xF0;
            v66[1] = v72 >> 4;
            v66 += 2;
            int v67 = 16 * v72;
LABEL_124:
            int v71 = 1;
            goto LABEL_125;
          }
          int v68 = 0;
          *v66++ = ((v73 + 192) >> 4) - 16;
LABEL_123:
          int v67 = 16 * v73;
          goto LABEL_124;
        }
        int v67 = 96;
      }
      else
      {
        if (!v71)
        {
          *v66++ = v68 - 33;
          goto LABEL_114;
        }
        *unsigned int v66 = v67 + 14;
        int v67 = 16 * v68 - 16;
        ++v66;
      }
LABEL_110:
      v67 += 15;
      *unsigned int v66 = v67;
      int v71 = 0;
      int v68 = 0;
      if ((unsigned __int16)(v73 + 64) > 0x7Fu)
      {
        *(_WORD *)(v66 + 1) = __rev16(v72);
        v66 += 3;
      }
      else
      {
        v66[1] = v73 - 64;
        v66 += 2;
      }
      goto LABEL_125;
    }
    if (v72 != (unsigned __int16)v65)
    {
      if (!(_BYTE)v68)
      {
        v73 += 6;
        if (v71) {
          goto LABEL_119;
        }
        goto LABEL_122;
      }
      if (v68 == 1)
      {
        if (v71)
        {
          char v76 = v67 + 6;
LABEL_121:
          *v66++ = v76;
          v73 += 6;
LABEL_122:
          int v68 = 0;
          goto LABEL_123;
        }
        int v67 = 96;
      }
      else
      {
        if (!v71)
        {
          char v76 = v68 - 33;
          goto LABEL_121;
        }
        *v66++ = v67 + 14;
        int v67 = 16 * v68 - 16;
      }
      v73 += 6;
LABEL_119:
      int v71 = 0;
      int v68 = 0;
      v67 += v73;
      *v66++ = v67;
      goto LABEL_125;
    }
    if (++v68 == 16)
    {
      int v68 = 0;
      char v75 = v67 + 14;
      if (v71) {
        int v67 = -16;
      }
      else {
        char v75 = -17;
      }
      *v66++ = v75;
    }
LABEL_125:
    if (v70 + 1 == v44) {
      unsigned int v77 = v46;
    }
    else {
      unsigned int v77 = 0;
    }
    v69 += 2 * v77 + 2;
    if (v70 + 1 == v44) {
      int v70 = 0;
    }
    else {
      ++v70;
    }
    unsigned int v65 = v72;
  }
  while (v69 != &v14[2 * v58]);
  if (!(_BYTE)v68)
  {
    if (!v71) {
      goto LABEL_137;
    }
    goto LABEL_136;
  }
  if (v71)
  {
    *unsigned int v66 = v67 + 14;
    LOBYTE(v67) = 16 * v68 - 16;
    ++v66;
    goto LABEL_136;
  }
  *unsigned int v66 = v68 - 33;
  LODWORD(v66) = v66 + 1;
LABEL_137:
  int v43 = v66 - v15;
LABEL_70:
  uint64_t result = 0;
  if (v10) {
    *int v10 = v43;
  }
  return result;
}

uint64_t CMPhotoCFDictionarySetInt16(__CFDictionary *a1, const void *a2, __int16 a3)
{
  __int16 valuePtr = a3;
  uint64_t result = 4294950306;
  if (a1 && a2)
  {
    CFNumberRef v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt16Type, &valuePtr);
    if (v6)
    {
      CFNumberRef v7 = v6;
      CFDictionarySetValue(a1, a2, v6);
      CFRelease(v7);
      return 0;
    }
    else
    {
      return 4294950305;
    }
  }
  return result;
}

uint64_t CMPhotoCFDictionarySetDouble(__CFDictionary *a1, const void *a2, double a3)
{
  double valuePtr = a3;
  uint64_t result = 4294950306;
  if (a1 && a2)
  {
    CFNumberRef v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberDoubleType, &valuePtr);
    if (v6)
    {
      CFNumberRef v7 = v6;
      CFDictionarySetValue(a1, a2, v6);
      CFRelease(v7);
      return 0;
    }
    else
    {
      return 4294950305;
    }
  }
  return result;
}

uint64_t CMPhotoCFDictionaryGetLongIfPresent(CFDictionaryRef theDict, const void *a2, void *a3)
{
  uint64_t result = 0;
  CFTypeRef value = 0;
  if (theDict)
  {
    if (a2)
    {
      if (a3)
      {
        uint64_t result = CFDictionaryGetValueIfPresent(theDict, a2, (const void **)&value);
        if (result)
        {
          CFTypeID TypeID = CFNumberGetTypeID();
          if (TypeID == CFGetTypeID(value))
          {
            CFNumberGetValue((CFNumberRef)value, kCFNumberLongType, a3);
            return 1;
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t CMPhotoCFArrayAppendInt32(__CFArray *a1, int a2)
{
  int valuePtr = a2;
  if (!a1) {
    return 4294950306;
  }
  CFNumberRef v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
  if (!v3) {
    return 4294950305;
  }
  CFNumberRef v4 = v3;
  CFArrayAppendValue(a1, v3);
  CFRelease(v4);
  return 0;
}

uint64_t CMPhotoCFArrayAppendFloat(__CFArray *a1, float a2)
{
  float valuePtr = a2;
  if (!a1) {
    return 4294950306;
  }
  CFNumberRef v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloat32Type, &valuePtr);
  if (!v3) {
    return 4294950305;
  }
  CFNumberRef v4 = v3;
  CFArrayAppendValue(a1, v3);
  CFRelease(v4);
  return 0;
}

uint64_t CMPhotoCFArrayAppendDouble(__CFArray *a1, double a2)
{
  double valuePtr = a2;
  if (!a1) {
    return 4294950306;
  }
  CFNumberRef v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberDoubleType, &valuePtr);
  if (!v3) {
    return 4294950305;
  }
  CFNumberRef v4 = v3;
  CFArrayAppendValue(a1, v3);
  CFRelease(v4);
  return 0;
}

uint64_t CMPhotoCFArraySetCFIndexAtIndex(__CFArray *a1, uint64_t a2, CFIndex a3)
{
  uint64_t valuePtr = a2;
  if (!a1) {
    return 4294950306;
  }
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberCFIndexType, &valuePtr);
  if (!v5) {
    return 4294950305;
  }
  CFNumberRef v6 = v5;
  CFArraySetValueAtIndex(a1, a3, v5);
  CFRelease(v6);
  return 0;
}

CFNumberRef CMPhotoCFNumberCreateSize(uint64_t a1)
{
  uint64_t valuePtr = a1;
  return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &valuePtr);
}

CFNumberRef CMPhotoCFNumberCreateInt(int a1)
{
  int valuePtr = a1;
  return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
}

CFNumberRef CMPhotoCFNumberCreateInt16(__int16 a1)
{
  __int16 valuePtr = a1;
  return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt16Type, &valuePtr);
}

CFNumberRef CMPhotoCFNumberCreateInt32(int a1)
{
  int valuePtr = a1;
  return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
}

CFNumberRef CMPhotoCFNumberCreateFloat(float a1)
{
  float valuePtr = a1;
  return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloatType, &valuePtr);
}

CFNumberRef CMPhotoCFNumberGetSize(const __CFNumber *result)
{
  if (result)
  {
    uint64_t valuePtr = 0;
    if (CFNumberGetValue(result, kCFNumberSInt64Type, &valuePtr)) {
      return (const __CFNumber *)valuePtr;
    }
    else {
      return 0;
    }
  }
  return result;
}

double CMPhotoCFNumberGetDouble(const __CFNumber *a1)
{
  if (!a1) {
    return 0.0;
  }
  double valuePtr = 0.0;
  int Value = CFNumberGetValue(a1, kCFNumberDoubleType, &valuePtr);
  double result = valuePtr;
  if (!Value) {
    return 0.0;
  }
  return result;
}

uint64_t CMPhotoDataCreateFromSource(const __CFAllocator *a1, const __CFData *a2, size_t a3, size_t a4, void *a5, char *a6)
{
  CFTypeRef v36 = 0;
  versiouint64_t n = a4;
  char v35 = 0;
  CFTypeRef cf = 0;
  CMBlockBufferRef blockBufferOut = 0;
  if (!a2)
  {
    uint64_t v14 = 4294950306;
    goto LABEL_55;
  }
  if (a5)
  {
    Dataunint64_t Length = a4;
    CFDataRef v10 = a2;
    switch(CMPhotoGetStorageType(a2))
    {
      case 1u:
        if (!DataLength)
        {
          if ((a3 & 0x8000000000000000) != 0) {
            goto LABEL_67;
          }
          Dataunint64_t Length = CFDataGetLength(v10) - a3;
          versiouint64_t n = DataLength;
        }
        if (DataLength + a3 > CFDataGetLength(v10)) {
          goto LABEL_11;
        }
        if (!a3 && DataLength == CFDataGetLength(v10))
        {
          CFAllocatorRef v12 = 0;
          CFTypeRef v36 = CFRetain(v10);
          goto LABEL_45;
        }
        if ((DataLength & 0x8000000000000000) != 0) {
          goto LABEL_67;
        }
        unsigned __int8 BytePtr = CFDataGetBytePtr(v10);
        CFTypeRef v36 = CFDataCreate(a1, &BytePtr[a3], DataLength);
        CFAllocatorRef v12 = 0;
        if (v36)
        {
          char v35 = 1;
          goto LABEL_45;
        }
        CFDataRef v10 = 0;
        goto LABEL_74;
      case 2u:
        dataPointerOut = 0;
        size_t lengthAtOffsetOut = 0;
        if (!DataLength)
        {
          Dataunint64_t Length = CMBlockBufferGetDataLength(v10);
          versiouint64_t n = DataLength;
        }
        if ((a3 & 0x8000000000000000) != 0) {
          goto LABEL_71;
        }
        if (CMBlockBufferIsRangeContiguous(v10, a3, DataLength)) {
          goto LABEL_20;
        }
        uint64_t DataPointer = CMBlockBufferCreateContiguous(a1, v10, a1, 0, a3, DataLength, 2u, &blockBufferOut);
        if (DataPointer) {
          goto LABEL_12;
        }
        a3 = 0;
        CFDataRef v10 = blockBufferOut;
        char v35 = 1;
LABEL_20:
        uint64_t DataPointer = CMBlockBufferGetDataPointer(v10, a3, &lengthAtOffsetOut, 0, &dataPointerOut);
        if (DataPointer) {
          goto LABEL_12;
        }
        if (v10) {
          CFDataRef v10 = (const __CFData *)CFRetain(v10);
        }
        v30.versiouint64_t n = 0;
        v30.IOSurfaceRef info = v10;
        memset(&v30.retain, 0, 24);
        v30.allocate = (CFAllocatorAllocateCallBack)_cfTypeDeallocator_allocate_0;
        v30.reallocate = 0;
        v30.deallocate = (CFAllocatorDeallocateCallBack)_cfTypeDeallocator_deallocate_0;
        v30.preferredCFNumberRef Size = 0;
        CFAllocatorRef v12 = CFAllocatorCreate(0, &v30);
        if (!v12) {
          goto LABEL_74;
        }
        if ((DataLength & 0x8000000000000000) != 0) {
          goto LABEL_68;
        }
        CFTypeRef v36 = CFDataCreateWithBytesNoCopy(a1, (const UInt8 *)dataPointerOut, DataLength, v12);
        if (v36) {
          goto LABEL_45;
        }
LABEL_74:
        uint64_t v14 = 4294950305;
        break;
      case 3u:
        uint64_t DataPointer = CMByteStreamCreateForFileURL();
        if (DataPointer) {
          goto LABEL_12;
        }
        uint64_t v15 = (void *)cf;
        int v16 = &v35;
        CFAllocatorRef v17 = a1;
        size_t v18 = a3;
        size_t v19 = DataLength;
        goto LABEL_44;
      case 4u:
        if ((a3 & 0x8000000000000000) != 0)
        {
LABEL_67:
          CFAllocatorRef v12 = 0;
          CFDataRef v10 = 0;
LABEL_68:
          uint64_t v14 = 4294950190;
          break;
        }
        CFDataRef DataWrappingIOSurface = CMPhotoCreateDataWrappingIOSurface(a1, v10, a3, DataLength);
        CFAllocatorRef v12 = 0;
        CFTypeRef v36 = DataWrappingIOSurface;
        if (DataWrappingIOSurface) {
          goto LABEL_45;
        }
        uint64_t v14 = 4294950305;
        goto LABEL_70;
      case 5u:
        if (DataLength) {
          goto LABEL_33;
        }
        v30.versiouint64_t n = 0;
        uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v24) {
          uint64_t v25 = v24;
        }
        else {
          uint64_t v25 = 0;
        }
        int v29 = *(uint64_t (**)(const __CFData *, void, CFAllocatorContext *))(v25 + 24);
        if (!v29)
        {
          uint64_t v14 = 4294954514;
          goto LABEL_13;
        }
        uint64_t DataPointer = v29(v10, 0, &v30);
        if (DataPointer) {
          goto LABEL_12;
        }
        Dataunint64_t Length = v30.version;
        if (v30.version < 0)
        {
LABEL_71:
          uint64_t v14 = 4294950190;
          goto LABEL_13;
        }
        versiouint64_t n = v30.version;
LABEL_33:
        uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v21) {
          uint64_t v22 = v21;
        }
        else {
          uint64_t v22 = 0;
        }
        unsigned int v26 = *(uint64_t (**)(const __CFData *, size_t, size_t, CMBlockBufferRef *, CFIndex *))(v22 + 32);
        if (v26)
        {
          uint64_t DataPointer = v26(v10, DataLength, a3, &blockBufferOut, &version);
          if (!DataPointer)
          {
            char v35 = 1;
            uint64_t v15 = blockBufferOut;
            size_t v19 = version;
            CFAllocatorRef v17 = a1;
            size_t v18 = 0;
            int v16 = 0;
LABEL_44:
            uint64_t v27 = CMPhotoDataCreateFromSource(v17, v15, v18, v19, &v36, v16);
            CFAllocatorRef v12 = 0;
            if (v27)
            {
              uint64_t v14 = v27;
LABEL_70:
              CFDataRef v10 = 0;
            }
            else
            {
LABEL_45:
              *a5 = v36;
              CFTypeRef v36 = 0;
              uint64_t v14 = 0;
              CFDataRef v10 = 0;
              if (a6) {
                *a6 = v35;
              }
            }
            break;
          }
LABEL_12:
          uint64_t v14 = DataPointer;
          goto LABEL_13;
        }
        CFAllocatorRef v12 = 0;
        CFDataRef v10 = 0;
        uint64_t v14 = 4294954514;
        break;
      default:
LABEL_11:
        uint64_t DataPointer = FigSignalErrorAt();
        goto LABEL_12;
    }
  }
  else
  {
    uint64_t v14 = 0;
LABEL_13:
    CFAllocatorRef v12 = 0;
    CFDataRef v10 = 0;
  }
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v12) {
    CFRelease(v12);
  }
LABEL_55:
  if (v36) {
    CFRelease(v36);
  }
  return v14;
}

uint64_t _cfTypeDeallocator_allocate_0()
{
  return 0;
}

void _cfTypeDeallocator_deallocate_0(int a1, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t CMPhotoMergeDictionaryEntries(uint64_t a1, uint64_t a2, CFDictionaryRef theDict, unsigned __int8 a4)
{
  v5[0] = 0;
  v5[1] = a1;
  v5[2] = a2;
  v5[3] = a4;
  if (!theDict) {
    return 0;
  }
  CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)_mergeDictionaryEntries, v5);
  return LODWORD(v5[0]);
}

void _mergeDictionaryEntries(const void *a1, CFTypeRef cf, uint64_t a3)
{
  if (*(_DWORD *)a3) {
    return;
  }
  CFTypeID v6 = CFGetTypeID(cf);
  if (v6 == CFDictionaryGetTypeID())
  {
    int v7 = CFDictionaryContainsKey(*(CFDictionaryRef *)(a3 + 16), a1);
    CFDictionaryRef v8 = *(const __CFDictionary **)(a3 + 16);
    if (v7)
    {
      int Value = CFDictionaryGetValue(v8, a1);
      CFTypeID v10 = CFGetTypeID(Value);
      if (v10 == CFDictionaryGetTypeID())
      {
        CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(*(CFAllocatorRef *)(a3 + 8), 0, (CFDictionaryRef)Value);
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a3 + 16), a1, MutableCopy);
        long long v12 = 0u;
        long long v13 = 0u;
        LODWORD(v12) = *(_DWORD *)a3;
        *((void *)&v12 + 1) = *(void *)(a3 + 8);
        *(void *)&long long v13 = MutableCopy;
        BYTE8(v13) = *(unsigned char *)(a3 + 24);
        CFDictionaryApplyFunction((CFDictionaryRef)cf, (CFDictionaryApplierFunction)_mergeDictionaryEntries, &v12);
        if (MutableCopy) {
          CFRelease(MutableCopy);
        }
      }
      else
      {
        *(_DWORD *)a3 = -17102;
      }
      return;
    }
    goto LABEL_12;
  }
  CFDictionaryRef v8 = *(const __CFDictionary **)(a3 + 16);
  if (!*(unsigned char *)(a3 + 24))
  {
LABEL_12:
    CFDictionaryAddValue(v8, a1, cf);
    return;
  }
  CFDictionarySetValue(v8, a1, cf);
}

uint64_t CMPhotoPropertyListCopyWithMutableContainers(const __CFAllocator *a1, const void *a2, __CFArray **a3)
{
  CFTypeRef value = 0;
  if (!a2) {
    return 0;
  }
  CFTypeID v6 = CFGetTypeID(a2);
  if (v6 == CFDictionaryGetTypeID())
  {
    CFIndex Count = FigCFDictionaryGetCount();
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, Count, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      unsigned int v9 = Mutable;
      v23[1] = a1;
      uint64_t v24 = 0;
      v23[0] = Mutable;
      CFDictionaryApplyFunction((CFDictionaryRef)a2, (CFDictionaryApplierFunction)_transferDictionaryValue, v23);
      uint64_t v10 = v24;
      if (v24)
      {
        int v11 = v9;
        goto LABEL_23;
      }
      goto LABEL_19;
    }
    return 4294950305;
  }
  CFTypeID v12 = CFGetTypeID(a2);
  if (v12 != CFArrayGetTypeID()) {
    return 0;
  }
  CFIndex v13 = CFArrayGetCount((CFArrayRef)a2);
  CFMutableArrayRef v14 = CFArrayCreateMutable(a1, v13, MEMORY[0x1E4F1D510]);
  if (!v14) {
    return 4294950305;
  }
  unsigned int v9 = v14;
  if (CFArrayGetCount((CFArrayRef)a2) < 1)
  {
LABEL_18:
    uint64_t v10 = 0;
LABEL_19:
    *a3 = v9;
    return v10;
  }
  CFIndex v15 = 0;
  while (1)
  {
    CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, v15);
    CFAllocatorRef v17 = ValueAtIndex;
    if (ValueAtIndex)
    {
      CFTypeID v18 = CFGetTypeID(ValueAtIndex);
      if (v18 == CFDictionaryGetTypeID()) {
        break;
      }
      CFTypeID v19 = CFGetTypeID(v17);
      if (v19 == CFArrayGetTypeID()) {
        break;
      }
    }
    CFArrayAppendValue(v9, v17);
LABEL_17:
    if (++v15 >= CFArrayGetCount((CFArrayRef)a2)) {
      goto LABEL_18;
    }
  }
  uint64_t v20 = CMPhotoPropertyListCopyWithMutableContainers(a1, v17, &value);
  if (!v20)
  {
    uint64_t v21 = value;
    CFArrayAppendValue(v9, value);
    if (v21)
    {
      CFRelease(v21);
      CFTypeRef value = 0;
    }
    goto LABEL_17;
  }
  uint64_t v10 = v20;
  CFRelease(v9);
  int v11 = value;
  if (value) {
LABEL_23:
  }
    CFRelease(v11);
  return v10;
}

void _transferDictionaryValue(void *key, CFTypeRef cf, uint64_t a3)
{
  CFTypeRef value = 0;
  if (*(_DWORD *)(a3 + 16)) {
    return;
  }
  if (!cf || (CFTypeID v6 = CFGetTypeID(cf), v6 != CFDictionaryGetTypeID()) && (v7 = CFGetTypeID(cf), v7 != CFArrayGetTypeID()))
  {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)a3, key, cf);
    goto LABEL_9;
  }
  int v8 = CMPhotoPropertyListCopyWithMutableContainers(*(void *)(a3 + 8), cf, &value);
  if (v8)
  {
    if (!*(_DWORD *)(a3 + 16)) {
      *(_DWORD *)(a3 + 16) = v8;
    }
LABEL_9:
    uint64_t v10 = value;
    if (!value) {
      return;
    }
    goto LABEL_10;
  }
  unsigned int v9 = *(__CFDictionary **)a3;
  uint64_t v10 = value;
  CFDictionarySetValue(v9, key, value);
  if (!v10) {
    return;
  }
LABEL_10:
  CFRelease(v10);
}

uint64_t CMPhotoComputeMSEForPixelBuffer(__CVBuffer *a1, __CVBuffer *a2, unint64_t a3, uint64_t a4, int a5, double *a6, CVPixelBufferRef *a7)
{
  CVPixelBufferRef pixelBufferOut = 0;
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFIndex v13 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  CFMutableArrayRef v14 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v16 = CFDictionaryCreateMutable(v12, 0, v13, v14);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24D20], v16);
  unsigned int v129 = a2;
  if (CMPhotoPixelBufferHasCLAP(a1)
    || CMPhotoPixelBufferHasCLAP(a2)
    || a3 && (a5 < 1 || a5 > a3))
  {
    FigSignalErrorAt();
    uint64_t v30 = 0;
LABEL_99:
    unsigned int v26 = 0;
    int v27 = 0;
    int v28 = 0;
    double v29 = 0.0;
    goto LABEL_80;
  }
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (PixelFormatType != CVPixelBufferGetPixelFormatType(a2)
    || (int v18 = CVPixelBufferGetPixelFormatType(a2),
        uint64_t v133 = 0,
        uint64_t v134 = 0,
        CMPhotoGetPixelBufferCLAP(a1, 0, 0, &v133, &v134),
        unint64_t v131 = 0,
        unint64_t v132 = 0,
        CMPhotoGetPixelBufferCLAP(a2, 0, 0, &v131, &v132),
        v133 != v131)
    || v134 != v132)
  {
    uint64_t v30 = FigSignalErrorAt();
    goto LABEL_99;
  }
  unsigned int v127 = Mutable;
  unsigned int v128 = a6;
  CFTypeRef cf = v16;
  long long v122 = a7;
  CFAllocatorRef allocator = v12;
  if (!a3)
  {
    unsigned int v20 = 0;
    unsigned int v21 = 0;
LABEL_22:
    unsigned int v26 = 0;
    goto LABEL_23;
  }
  unint64_t v19 = (int)v134 - (a3 - 1);
  if (v19)
  {
    unint64_t v22 = 0;
    unsigned int v20 = 0;
    do
    {
      ++v20;
      v22 += a5;
    }
    while (v19 > v22);
  }
  else
  {
    unsigned int v20 = 0;
  }
  unint64_t v23 = (int)v133 - (a3 - 1);
  if (v23)
  {
    unint64_t v24 = 0;
    unsigned int v21 = 0;
    do
    {
      ++v21;
      v24 += a5;
    }
    while (v23 > v24);
  }
  else
  {
    unsigned int v21 = 0;
  }
  size_t v25 = v21 * v20;
  if (!v25) {
    goto LABEL_22;
  }
  unsigned int v26 = (double *)malloc_type_calloc(v25, 8uLL, 0x100004000313F17uLL);
  if (!v26)
  {
    int v27 = 0;
    int v28 = 0;
    double v29 = 0.0;
    uint64_t v30 = 4294950305;
LABEL_79:
    CFMutableDictionaryRef Mutable = v127;
    a6 = v128;
    CFMutableDictionaryRef v16 = cf;
    goto LABEL_80;
  }
LABEL_23:
  unint64_t v125 = a3;
  int v31 = CMPhotoPixelFormatContainsYCbCr(v18);
  int v32 = CMPhotoPixelFormatContainsRGB(v18);
  int v33 = CMPhotoPixelFormatContainsGrayScale(v18);
  uint64_t v34 = CVPixelBufferGetPixelFormatType(a2);
  BitDepthForPixeluint64_t Format = CMPhotoGetBitDepthForPixelFormat(v34);
  OSType v35 = CVPixelBufferGetPixelFormatType(a2);
  int BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(v35);
  uint64_t v37 = CVPixelBufferLockBaseAddress(a1, 0);
  double v29 = 0.0;
  if (v37)
  {
    uint64_t v30 = v37;
    int v27 = 0;
    int v28 = 0;
    goto LABEL_79;
  }
  uint64_t v38 = CVPixelBufferLockBaseAddress(a2, 0);
  if (v38)
  {
    uint64_t v30 = v38;
    int v27 = 0;
    goto LABEL_96;
  }
  if (v33)
  {
    if ((v18 - 1278226736) <= 6 && ((1 << (v18 - 48)) & 0x45) != 0)
    {
      int v40 = BitDepthForPixelFormat;
      unint64_t v39 = v125;
      char v41 = 16 - BitDepthForPixelFormat;
      goto LABEL_36;
    }
    int v40 = BitDepthForPixelFormat;
    unint64_t v39 = v125;
    if (v18 == 1278226488)
    {
      char v41 = 0;
LABEL_36:
      size_t v43 = CVPixelBufferGetBytesPerRow(v129) / BytesPerPixelForPixelFormat;
      unint64_t BaseAddress = CVPixelBufferGetBaseAddress(v129);
      size_t v45 = CVPixelBufferGetBytesPerRow(a1) / BytesPerPixelForPixelFormat;
      unsigned int v46 = CVPixelBufferGetBaseAddress(a1);
      uint64_t v47 = calc_ssd((uint64_t)BaseAddress, v43, (uint64_t)v46, v45, v40, v131, v132, v39, a5, 1u, v41, (uint64_t)v26, v21);
      double v29 = (double)(unint64_t)v47 / ((double)v131 * (double)v132);
      if (v20)
      {
        int v48 = 0;
        for (int i = 0; i != v20; ++i)
        {
          uint64_t v50 = v21;
          int v51 = v48;
          if (v21)
          {
            do
            {
              v26[v51] = v26[v51] / ((double)v39 * (double)v39);
              ++v51;
              --v50;
            }
            while (v50);
          }
          v48 += v21;
        }
      }
      if (!v39) {
        goto LABEL_77;
      }
      goto LABEL_68;
    }
    goto LABEL_76;
  }
  if (!v31)
  {
    if (v32)
    {
      if (v18 != 1111970369 && v18 != 1815491698 && v18 != 1380401729) {
        goto LABEL_76;
      }
      size_t v52 = CVPixelBufferGetBytesPerRow(a2) / BytesPerPixelForPixelFormat;
      BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(a2, 0);
      size_t v54 = CVPixelBufferGetBytesPerRow(a1) / BytesPerPixelForPixelFormat;
      int v55 = CVPixelBufferGetBaseAddress(a1);
      uint64_t v115 = v131;
      uint64_t v117 = v132;
      int v56 = v52;
      int v57 = v52;
      int v110 = v52;
      unsigned int v113 = v55;
      uint64_t v58 = v55;
      unint64_t v59 = v125;
      uint64_t v120 = calc_ssd((uint64_t)BaseAddressOfPlane, v56, (uint64_t)v55, v54, BitDepthForPixelFormat, v131, v132, v125, a5, 4u, 0, 0, v21);
      uint64_t v60 = 1;
      if (BitDepthForPixelFormat > 8) {
        uint64_t v60 = 2;
      }
      uint64_t v61 = (uint64_t)v58 + v60;
      if (BitDepthForPixelFormat <= 8) {
        uint64_t v62 = 2;
      }
      else {
        uint64_t v62 = 4;
      }
      uint64_t v118 = calc_ssd((uint64_t)BaseAddressOfPlane + v60, v57, v61, v54, BitDepthForPixelFormat, v115, v117, v125, a5, 4u, 0, (uint64_t)v26, v21);
      uint64_t v63 = (uint64_t)BaseAddressOfPlane + v62;
      unint64_t v64 = v131;
      unint64_t v65 = v132;
      uint64_t v66 = calc_ssd(v63, v110, (uint64_t)v113 + v62, v54, BitDepthForPixelFormat, v131, v132, v125, a5, 4u, 0, 0, v21);
      double v67 = (double)v64 * (double)v65;
      double v68 = (double)(unint64_t)v120 / v67;
      double v69 = (double)(unint64_t)v118 / v67;
      double v70 = (double)(unint64_t)v66 / v67;
      if (v20)
      {
        int v71 = 0;
        for (int j = 0; j != v20; ++j)
        {
          uint64_t v73 = v21;
          int v74 = v71;
          if (v21)
          {
            do
            {
              v26[v74] = v26[v74] / ((double)v125 * (double)v125);
              ++v74;
              --v73;
            }
            while (v73);
          }
          v71 += v21;
        }
      }
      double v29 = (v70 + v68 + v69) / 3.0;
      goto LABEL_67;
    }
    uint64_t v30 = FigSignalErrorAt();
    int v27 = 1;
LABEL_96:
    int v28 = 1;
    goto LABEL_79;
  }
  if (v18 > 2016686639)
  {
    if (v18 != 2019963440 && v18 != 2016686640) {
      goto LABEL_76;
    }
    char v42 = 6;
  }
  else
  {
    char v42 = 0;
    if (v18 != 875704422 && v18 != 875704438)
    {
LABEL_76:
      FigSignalErrorAt();
      goto LABEL_77;
    }
  }
  unint64_t v119 = v131 >> 1;
  unint64_t v121 = v132 >> 1;
  size_t v111 = CVPixelBufferGetBytesPerRowOfPlane(a2, 0) / BytesPerPixelForPixelFormat;
  unint64_t v75 = 2 * BytesPerPixelForPixelFormat;
  size_t v114 = CVPixelBufferGetBytesPerRowOfPlane(a2, 1uLL) / v75;
  int v116 = BytesPerPixelForPixelFormat;
  unsigned int v107 = CVPixelBufferGetBaseAddressOfPlane(a2, 0);
  unsigned int v109 = CVPixelBufferGetBaseAddressOfPlane(a2, 1uLL);
  size_t v76 = CVPixelBufferGetBytesPerRowOfPlane(a1, 0) / BytesPerPixelForPixelFormat;
  size_t v105 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL) / v75;
  unsigned int v77 = CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  unsigned int v104 = CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
  char v103 = v42;
  uint64_t v78 = (uint64_t)v77;
  LOBYTE(v77) = v42;
  char v106 = v42;
  unint64_t v59 = v125;
  uint64_t v112 = calc_ssd((uint64_t)v107, v111, v78, v76, BitDepthForPixelFormat, v131, v132, v125, a5, 1u, v103, (uint64_t)v26, v21);
  uint64_t v108 = calc_ssd((uint64_t)v109, v114, (uint64_t)v104, v105, BitDepthForPixelFormat, v119, v121, v125, a5, 2u, (char)v77, 0, 0);
  uint64_t v79 = calc_ssd((uint64_t)v109 + v116, v114, (uint64_t)v104 + v116, v105, BitDepthForPixelFormat, v119, v121, v125, a5, 2u, v106, 0, 0);
  double v80 = (double)v131 * (double)v132;
  double v81 = (double)(unint64_t)v112 / v80;
  double v82 = (double)(unint64_t)v79 / v80;
  double v83 = (double)(unint64_t)v108 / v80;
  if (v20)
  {
    int v84 = 0;
    for (int k = 0; k != v20; ++k)
    {
      uint64_t v86 = v21;
      int v87 = v84;
      if (v21)
      {
        do
        {
          v26[v87] = v26[v87] / ((double)v125 * (double)v125);
          ++v87;
          --v86;
        }
        while (v86);
      }
      v84 += v21;
    }
  }
  double v29 = (v83 + v82 + v81 * 6.0) * 0.125;
LABEL_67:
  if (!v59)
  {
LABEL_77:
    uint64_t v30 = 0;
    goto LABEL_78;
  }
LABEL_68:
  uint64_t v30 = CVPixelBufferCreate(allocator, v21, v20, 0x72673366u, 0, &pixelBufferOut);
  CVPixelBufferRef v88 = pixelBufferOut;
  if (!v30)
  {
    CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
    size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBufferOut, 0);
    unsigned int v90 = (float *)CVPixelBufferGetBaseAddressOfPlane(pixelBufferOut, 0);
    unsigned int v91 = (float *)CVPixelBufferGetBaseAddressOfPlane(pixelBufferOut, 1uLL);
    unsigned int v92 = (float *)CVPixelBufferGetBaseAddressOfPlane(pixelBufferOut, 2uLL);
    if (v20)
    {
      int v93 = 0;
      uint64_t v94 = 0;
      uint64_t v95 = 4 * (BytesPerRowOfPlane >> 2);
      do
      {
        uint64_t v96 = v21;
        int v97 = v90;
        int v98 = v91;
        int v99 = v92;
        int v100 = v93;
        if (v21)
        {
          do
          {
            float v101 = v26[v100];
            *v97++ = v101;
            *v98++ = v101;
            *v99++ = v101;
            ++v100;
            --v96;
          }
          while (v96);
        }
        ++v94;
        v93 += v21;
        unsigned int v92 = (float *)((char *)v92 + v95);
        unsigned int v91 = (float *)((char *)v91 + v95);
        unsigned int v90 = (float *)((char *)v90 + v95);
      }
      while (v94 != v20);
    }
    CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
    CVPixelBufferRef v88 = pixelBufferOut;
    if (v122)
    {
      uint64_t v30 = 0;
      *long long v122 = pixelBufferOut;
      CVPixelBufferRef pixelBufferOut = 0;
LABEL_78:
      int v27 = 1;
      int v28 = 1;
      goto LABEL_79;
    }
    uint64_t v30 = 0;
  }
  CFMutableDictionaryRef Mutable = v127;
  a6 = v128;
  CFMutableDictionaryRef v16 = cf;
  if (v88) {
    CFRelease(v88);
  }
  int v27 = 1;
  int v28 = 1;
LABEL_80:
  if (v16) {
    CFRelease(v16);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  free(v26);
  if (a6) {
    *a6 = v29;
  }
  if (v28) {
    CVPixelBufferUnlockBaseAddress(a1, 0);
  }
  if (v27) {
    CVPixelBufferUnlockBaseAddress(v129, 0);
  }
  return v30;
}

uint64_t calc_ssd(uint64_t a1, int a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7, int a8, int a9, unsigned int a10, char a11, uint64_t a12, int a13)
{
  if (a7)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    unint64_t v15 = a6 * a10;
    uint64_t v16 = (int)a10 * (uint64_t)a2;
    uint64_t v17 = (int)a10 * (uint64_t)a4;
    uint64_t v18 = a3;
    uint64_t v19 = a3;
    uint64_t v20 = a1;
    uint64_t v21 = a1;
    do
    {
      if (v15)
      {
        for (unint64_t i = 0; i < v15; i += (int)a10)
        {
          if (a5 < 9)
          {
            int v23 = *(unsigned __int8 *)(v21 + i);
            int v24 = *(unsigned __int8 *)(v18 + i);
          }
          else
          {
            int v23 = *(unsigned __int16 *)(v20 + 2 * i) >> a11;
            int v24 = *(unsigned __int16 *)(v19 + 2 * i) >> a11;
          }
          v14 += (v23 - v24) * (uint64_t)(v23 - v24);
        }
      }
      ++v13;
      v21 += v16;
      v20 += 2 * v16;
      v19 += 2 * v17;
      v18 += v17;
    }
    while (v13 != a7);
  }
  else
  {
    uint64_t v14 = 0;
  }
  if (a12)
  {
    unint64_t v51 = a7 - (a8 - 1);
    if (a7 != a8 - 1)
    {
      uint64_t v57 = 0;
      unint64_t v25 = 0;
      uint64_t v49 = (int)((a8 - 1) * a10);
      uint64_t v50 = a6 * a10;
      uint64_t v26 = (int)a10 * (uint64_t)a2;
      uint64_t v27 = (int)a10 * (uint64_t)a4;
      uint64_t v28 = (int)(a10 * a9);
      uint64_t v48 = a9 * v27;
      uint64_t v29 = 2 * v28;
      uint64_t v47 = a9 * v26;
      uint64_t v55 = a3;
      uint64_t v56 = a1;
      do
      {
        unint64_t v52 = v25;
        uint64_t v53 = a1;
        uint64_t v54 = a3;
        if (v50 != v49)
        {
          uint64_t v30 = 0;
          unint64_t v31 = 0;
          uint64_t v32 = v56;
          uint64_t v34 = a1;
          uint64_t v33 = a3;
          uint64_t v35 = v55;
          do
          {
            if (a8 < 1)
            {
              unint64_t v37 = 0;
            }
            else
            {
              uint64_t v36 = 0;
              unint64_t v37 = 0;
              uint64_t v38 = v34;
              uint64_t v39 = v32;
              uint64_t v40 = v33;
              uint64_t v41 = v35;
              do
              {
                uint64_t v42 = 0;
                uint64_t v43 = a8;
                do
                {
                  if (a5 < 9)
                  {
                    int v44 = *(unsigned __int8 *)(v39 + v42);
                    int v45 = *(unsigned __int8 *)(v41 + v42);
                  }
                  else
                  {
                    int v44 = *(unsigned __int16 *)(v38 + 2 * v42) >> a11;
                    int v45 = *(unsigned __int16 *)(v40 + 2 * v42) >> a11;
                  }
                  v37 += (v44 - v45) * (uint64_t)(v44 - v45);
                  v42 += (int)a10;
                  --v43;
                }
                while (v43);
                ++v36;
                v41 += v27;
                v40 += 2 * v27;
                v39 += v26;
                v38 += 2 * v26;
              }
              while (v36 != a8);
            }
            *(double *)(a12 + 8 * (v30 + v57 * a13)) = (double)v37;
            ++v30;
            v31 += v28;
            v35 += v28;
            v33 += v29;
            v32 += v28;
            v34 += v29;
          }
          while (v50 - v49 > v31);
        }
        ++v57;
        unint64_t v25 = v52 + a9;
        v55 += v48;
        a3 = v54 + 2 * v48;
        v56 += v47;
        a1 = v53 + 2 * v47;
      }
      while (v51 > v25);
    }
  }
  return v14;
}

uint64_t CMPhotoDecompressionSessionGetTypeID()
{
  return sCMPhotoDecompressionSessionTypeID;
}

uint64_t CMPhotoDecompressionSessionSetSurfacePool(uint64_t a1, const void *a2)
{
  CFNumberRef v4 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  CFNumberRef v5 = *(const void **)(a1 + 272);
  if (v5) {
    CFRelease(v5);
  }
  if (a2) {
    CFTypeRef v6 = CFRetain(a2);
  }
  else {
    CFTypeRef v6 = 0;
  }
  *(void *)(a1 + 272) = v6;
  uint64_t v7 = *(void *)(a1 + 280);
  if (v7) {
    goto LABEL_9;
  }
  CFAllocatorRef v8 = CFGetAllocator((CFTypeRef)a1);
  uint64_t v9 = CMPhotoScaleAndRotateSessionCreate(v8, 0, (uint64_t *)(a1 + 280));
  if (!v9)
  {
    uint64_t v7 = *(void *)(a1 + 280);
LABEL_9:
    uint64_t v9 = CMPhotoScaleAndRotateSessionSetSurfacePool(v7, a2);
  }
  uint64_t v10 = v9;
  os_unfair_lock_unlock(v4);
  return v10;
}

uint64_t CMPhotoDecompressionSessionCopySequenceCodecPool(uint64_t a1, void *a2)
{
  uint64_t v2 = 4294950306;
  if (!a1 || !a2) {
    return v2;
  }
  CFNumberRef v5 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  CFTypeRef v6 = *(const void **)(a1 + 296);
  if (v6)
  {
    uint64_t v7 = 0;
LABEL_10:
    CFTypeRef v13 = CFRetain(v6);
    goto LABEL_11;
  }
  CFAllocatorRef v8 = CFGetAllocator((CFTypeRef)a1);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v7 = Mutable;
  if (!Mutable)
  {
    uint64_t v10 = FigSignalErrorAt();
    goto LABEL_16;
  }
  uint64_t v10 = CMPhotoCFDictionarySetInt(Mutable, @"MaxSimultaneousDecompressionSessions", 3);
  if (v10
    || (uint64_t v10 = CMPhotoCFDictionarySetInt64(v7, @"IdleTimeoutMilliseconds", 0), v10)
    || (int v11 = (const void **)(a1 + 296),
        CFAllocatorRef v12 = CFGetAllocator((CFTypeRef)a1),
        uint64_t v10 = CMPhotoCodecSessionPoolCreate(v12, v7, (uint64_t *)(a1 + 296)),
        v10))
  {
LABEL_16:
    uint64_t v2 = v10;
    os_unfair_lock_unlock(v5);
    if (!v7) {
      return v2;
    }
    goto LABEL_12;
  }
  CFTypeRef v6 = *v11;
  if (*v11) {
    goto LABEL_10;
  }
  CFTypeRef v13 = 0;
LABEL_11:
  os_unfair_lock_unlock(v5);
  uint64_t v2 = 0;
  *a2 = v13;
  if (v7) {
LABEL_12:
  }
    CFRelease(v7);
  return v2;
}

void CMPhotoDecompressionSessionFreeAsyncRequest(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (const void *)a1[2];
    if (v2) {
      CFRelease(v2);
    }
    free(a1);
  }
}

void CMPhotoDecompressionSessionCancelAsyncRequest(uint64_t a1, const void *a2)
{
  CFNumberRef v4 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  if (CFSetContainsValue(*(CFSetRef *)(a1 + 32), a2)) {
    CFSetRemoveValue(*(CFMutableSetRef *)(a1 + 32), a2);
  }
  else {
    FigSignalErrorAt();
  }
  os_unfair_lock_unlock(v4);
}

void __CMPhotoDecompressionSessionEnqueueAsynchronousRequest_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v4 = *(void *)(v2 + 16);
    CFNumberRef v5 = *(const void **)v2;
    os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
    uint64_t v6 = *(void *)(v3 + 304);
    if (v6
      && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const void *, void))(v6 + 16))(v6, v3, v4, v5, *(void *)(v3 + 312)))
    {
      CFSetRemoveValue(*(CFMutableSetRef *)(v3 + 32), v5);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
    uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 32) + 16) + 32);
    if (v7) {
      uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 16) + 32);
    }
    else {
      uint64_t v8 = 0;
    }
    if (*(void *)(v8 + 128)) {
      uint64_t v9 = (*(uint64_t (**)(void))(v7 + 128))();
    }
    else {
      uint64_t v9 = FigSignalErrorAt();
    }
    (*(void (**)(void, void, uint64_t, void, void, void))(*(void *)(a1 + 32) + 24))(*(void *)(*(void *)(a1 + 32) + 16), **(void **)(a1 + 32), v9, *(unsigned int *)(*(void *)(a1 + 32) + 40), 0, *(void *)(*(void *)(a1 + 32) + 32));
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 40) + 16));
    CFSetRemoveValue(*(CFMutableSetRef *)(*(void *)(a1 + 40) + 32), **(const void ***)(a1 + 32));
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 40) + 16));
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 48) + 24));
    CMPhotoDecompressionSessionFreeAsyncRequest(*(void **)(a1 + 32));
  }
  else
  {
    FigSignalErrorAt();
  }
  uint64_t v10 = *(const void **)(a1 + 40);
  if (v10) {
    CFRelease(v10);
  }
}

uint64_t CMPhotoDecompressionSetAsyncPreDecodeCallback(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  uint64_t v7 = *(const void **)(a1 + 304);
  if (v7)
  {
    _Block_release(v7);
    *(void *)(a1 + 304) = 0;
  }
  *(void *)(a1 + 312) = 0;
  if (a2)
  {
    *(void *)(a1 + 304) = _Block_copy(a2);
    *(void *)(a1 + 312) = a3;
  }
  os_unfair_lock_unlock(v6);
  return 0;
}

uint64_t CMPhotoDecompressionSessionDiscardCachedBuffers(uint64_t a1)
{
  return CMPhotoDecompressionSessionFlushCachedBuffers(a1, 0, 1);
}

uint64_t CMPhotoDecompressionSessionReleaseHardwareResources(uint64_t a1)
{
  if (!a1) {
    return 4294950306;
  }
  uint64_t result = CMPhotoCodecSessionPoolFlush(*(void *)(a1 + 288), 2);
  if (!result)
  {
    uint64_t result = *(void *)(a1 + 296);
    if (result)
    {
      return CMPhotoCodecSessionPoolFlush(result, 2);
    }
  }
  return result;
}

BOOL CMPhotoDecompressionSessionSupportsCodec(int a1)
{
  return a1 == 1785750887 || VTSelectAndCreateVideoDecoderInstance() == 0;
}

CFTypeRef CMPhotoDecompressionSessionClass_CopyFormattingDesc()
{
  return CFRetain(@"[CMPhotoDecompressionSession]");
}

__CFString *CMPhotoDecompressionSession_CopyDebugDesc(uint64_t a1)
{
  CFAllocatorRef v2 = CFGetAllocator((CFTypeRef)a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v2, 0);
  uint64_t v4 = Mutable;
  if (Mutable)
  {
    CFStringAppendFormat(Mutable, 0, @"<CMPhotoDecompressionSession %p> {\n", a1);
    CFNumberRef v5 = (os_unfair_lock_s *)(a1 + 16);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
    Default = *(const void **)(a1 + 288);
    if (!Default)
    {
      Default = (const void *)CMPhotoCodecSessionPoolGetDefault();
      if (!Default) {
        goto LABEL_10;
      }
    }
    if ((CFStringRef v7 = CFCopyDescription(Default)) != 0
      && ((CFStringRef v8 = v7,
           CFStringAppendFormat(v4, 0, @"\tCodecPool: {\n%@\n}\n", v7),
           CFRelease(v8),
           (uint64_t v9 = *(const void **)(a1 + 272)) != 0)
       || (uint64_t v9 = (const void *)CMPhotoSurfacePoolGetDefault()) != 0)
      && (CFStringRef v10 = CFCopyDescription(v9)) != 0)
    {
      CFStringRef v11 = v10;
      CFStringAppendFormat(v4, 0, @"\tSurfacePool: {\n%@\n}\n", v10);
      os_unfair_lock_unlock(v5);
      CFStringAppendFormat(v4, 0, @"}");
      CFRelease(v11);
    }
    else
    {
LABEL_10:
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
    }
  }
  return v4;
}

uint64_t CMPhotoGetCropPostOrientation(uint64_t a1, uint64_t a2, void *a3, int a4, _OWORD *a5)
{
  if (!a5) {
    return 4294950306;
  }
  if (a4 == 1) {
    goto LABEL_22;
  }
  int v23 = -1;
  int v24 = 0;
  uint64_t result = CMPhotoHEIFRotationCCWAndMirroringFromExifOrientation(a4, &v24, &v23);
  if (result) {
    return result;
  }
  uint64_t v10 = *a3;
  uint64_t v11 = a3[1];
  uint64_t v12 = a3[2];
  uint64_t v13 = a3[3];
  int v14 = (360 - v24) % 360;
  if (v14 == 270)
  {
    uint64_t v10 = a1 - (v10 + v12);
    uint64_t v15 = a3[1];
    goto LABEL_9;
  }
  if (v14 == 180)
  {
    uint64_t v15 = a1 - (v10 + v12);
    uint64_t v10 = a2 - (v11 + v13);
LABEL_12:
    uint64_t v16 = a3[2];
    uint64_t v12 = a3[3];
    goto LABEL_13;
  }
  if (v14 != 90)
  {
    uint64_t v15 = *a3;
    uint64_t v10 = a3[1];
    goto LABEL_12;
  }
  uint64_t v15 = a2 - (v11 + v13);
LABEL_9:
  uint64_t v16 = a3[3];
LABEL_13:
  if (v24 == 270 || v24 == 90)
  {
    uint64_t v17 = a1;
    a1 = a2;
    a2 = v17;
  }
  uint64_t v21 = v10;
  uint64_t v22 = v15;
  if (!v23)
  {
    uint64_t v18 = &v21;
    uint64_t v15 = v10;
    uint64_t v19 = v12;
    a1 = a2;
    goto LABEL_20;
  }
  if (v23 == 1)
  {
    uint64_t v18 = &v22;
    uint64_t v19 = v16;
LABEL_20:
    *uint64_t v18 = a1 - v19 - v15;
    uint64_t v10 = v21;
    uint64_t v15 = v22;
  }
  *a3 = v15;
  a3[1] = v10;
  a3[2] = v16;
  a3[3] = v12;
LABEL_22:
  uint64_t result = 0;
  long long v20 = *((_OWORD *)a3 + 1);
  *a5 = *(_OWORD *)a3;
  a5[1] = v20;
  return result;
}

uint64_t CMPhotoTranslateAndScalePreOrientationCrop(uint64_t a1, uint64_t a2, uint64x2_t *a3, int a4, uint64_t a5, uint64_t a6, int a7, _OWORD *a8, char a9)
{
  if (!a8) {
    return 4294950306;
  }
  long long v54 = 0u;
  uint64x2_t v55 = 0u;
  v53[0] = 0;
  v53[1] = 0;
  v53[2] = a1;
  v53[3] = a2;
  uint64_t result = CMPhotoGetCropPostOrientation(a1, a2, v53, a4, &v54);
  if (!result)
  {
    uint64x2_t v45 = v55;
    v52[0] = 0;
    v52[1] = 0;
    void v52[2] = a5;
    v52[3] = a6;
    uint64_t result = CMPhotoGetCropPostOrientation(a5, a6, v52, a7, &v54);
    if (!result)
    {
      int8x16_t v44 = (int8x16_t)v55;
      uint64x2_t v18 = a3[1];
      int64x2_t v50 = *(int64x2_t *)a3;
      int64x2_t v51 = (int64x2_t)v18;
      uint64x2_t v19 = a3[1];
      uint64x2_t v48 = *a3;
      uint64x2_t v49 = v19;
      uint64_t result = CMPhotoGetCropPostOrientation(a1, a2, &v48, a4, &v50);
      if (!result)
      {
        float32x2_t v20 = vdiv_f32(vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)v44)), vcvt_f32_f64(vcvtq_f64_u64(v45)));
        float64x2_t v21 = vcvtq_f64_f32(v20);
        int64x2_t v22 = v50;
        int64x2_t v23 = v51;
        BOOL v24 = v20.f32[0] == 1.0;
        if (v20.f32[1] != 1.0) {
          BOOL v24 = 0;
        }
        if (a9)
        {
          if (!v24)
          {
            float64x2_t v25 = vmulq_f64(v21, vcvtq_f64_u64((uint64x2_t)v50));
            float64x2_t v26 = vmulq_f64(v21, vcvtq_f64_u64((uint64x2_t)v51));
            __asm { FMOV            V2.2D, #0.5 }
            float64x2_t v32 = vrndaq_f64(vmulq_f64(v25, _Q2));
            float64x2_t v33 = vrndaq_f64(vmulq_f64(v26, _Q2));
            float64x2_t v34 = vaddq_f64(v33, v33);
            float64x2_t v35 = vaddq_f64(v32, v32);
LABEL_12:
            int64x2_t v22 = (int64x2_t)vcvtq_u64_f64(v35);
            int64x2_t v23 = (int64x2_t)vcvtq_u64_f64(v34);
          }
        }
        else if (!v24)
        {
          float64x2_t v34 = vrndaq_f64(vmulq_f64(v21, vcvtq_f64_u64((uint64x2_t)v51)));
          float64x2_t v35 = vrndaq_f64(vmulq_f64(v21, vcvtq_f64_u64((uint64x2_t)v50)));
          goto LABEL_12;
        }
        int8x16_t v36 = (int8x16_t)vaddq_s64(v22, v23);
        uint64x2_t v37 = (uint64x2_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v44, (uint64x2_t)v36), v36, v44);
        int32x2_t v38 = vmovn_s64((int64x2_t)vcgtq_u64(v37, (uint64x2_t)v22));
        if (v38.i32[0] & v38.i32[1])
        {
          uint64_t v39 = v22.i64[1];
          uint64_t v40 = v22.i64[0];
          uint64_t v41 = v37.i64[0] - v22.i64[0];
          uint64_t v42 = v37.i64[1] - v22.i64[1];
        }
        else
        {
          uint64_t v42 = 0;
          uint64_t v41 = 0;
          uint64_t v39 = 0;
          uint64_t v40 = 0;
        }
        long long v46 = 0u;
        long long v47 = 0u;
        v48.i64[0] = v40;
        v48.i64[1] = v39;
        v49.i64[0] = v41;
        v49.i64[1] = v42;
        uint64_t result = CMPhotoGetCropPreOrientation(v44.i64[0], v44.i64[1], &v48, a7, &v46);
        if (!result)
        {
          long long v43 = v47;
          *a8 = v46;
          a8[1] = v43;
        }
      }
    }
  }
  return result;
}

uint64_t CMPhotoPictureReaderCopyByteStreamForFirstTile(uint64_t a1, void *a2, void *a3)
{
  CFTypeRef v28 = 0;
  CFTypeRef v29 = 0;
  float64x2_t v26 = 0;
  uint64_t v27 = 0;
  CFTypeRef cf = 0;
  float64x2_t v25 = 0;
  CFTypeRef v22 = 0;
  CFTypeRef v23 = 0;
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  CFStringRef v8 = *(uint64_t (**)(uint64_t, CFTypeRef *))(v7 + 8);
  if (!v8) {
    goto LABEL_19;
  }
  uint64_t ContiguousBufferFromChunks = v8(a1, &v29);
  if (ContiguousBufferFromChunks) {
    goto LABEL_35;
  }
  CFTypeRef v10 = v29;
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v12 = v11 ? v11 : 0;
  uint64_t v13 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(v12 + 8);
  if (!v13) {
    goto LABEL_19;
  }
  uint64_t ContiguousBufferFromChunks = v13(v10, &v28);
  if (ContiguousBufferFromChunks) {
    goto LABEL_35;
  }
  CFTypeRef v14 = v28;
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v16 = v15 ? v15 : 0;
  uint64_t v17 = *(uint64_t (**)(CFTypeRef, uint64_t *, void **, void **, CFTypeRef *, void))(v16 + 40);
  if (!v17)
  {
LABEL_19:
    uint64_t v20 = 4294954514;
    goto LABEL_20;
  }
  uint64_t ContiguousBufferFromChunks = v17(v14, &v27, &v26, &v25, &cf, 0);
  if (!ContiguousBufferFromChunks)
  {
    if (v27 == 1 && cf)
    {
      CFTypeRef v18 = CFRetain(cf);
      uint64_t v19 = *(void *)v26;
LABEL_34:
      uint64_t v20 = 0;
      *a2 = v18;
      CFTypeRef v23 = 0;
      *a3 = v19;
      goto LABEL_20;
    }
    uint64_t ContiguousBufferFromChunks = _createContiguousBufferFromChunks(*MEMORY[0x1E4F1CF80], v27, (uint64_t)v26, (uint64_t)v25, (uint64_t)cf, 1, 0, 0, 0, (__CFData **)&v22);
    if (!ContiguousBufferFromChunks)
    {
      uint64_t ContiguousBufferFromChunks = FigByteStreamCreateWithCFData();
      if (!ContiguousBufferFromChunks)
      {
        uint64_t v19 = 0;
        CFTypeRef v18 = v23;
        goto LABEL_34;
      }
    }
  }
LABEL_35:
  uint64_t v20 = ContiguousBufferFromChunks;
LABEL_20:
  if (v29) {
    CFRelease(v29);
  }
  if (v28) {
    CFRelease(v28);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v23) {
    CFRelease(v23);
  }
  if (v22) {
    CFRelease(v22);
  }
  free(v26);
  free(v25);
  return v20;
}

uint64_t CMPhotoPictureReaderCreateContiguousDataFromChunks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, __CFData **a9)
{
  return _createContiguousBufferFromChunks(a1, a2, a3, a4, a5, 1, a6, a7, a8, a9);
}

uint64_t CMPhotoPictureReaderCopyImageBitDepthForJPEG(uint64_t a1, CFMutableArrayRef *a2)
{
  int v16 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  int v13 = 0;
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (!Mutable) {
    return 4294950305;
  }
  CFMutableArrayRef v5 = Mutable;
  ImageInformationFromJFIFByteStreauint64_t m = CMPhotoPictureReaderCopyByteStreamForFirstTile(a1, &v15, &v14);
  uint64_t v7 = v15;
  if (!ImageInformationFromJFIFByteStream)
  {
    ImageInformationFromJFIFByteStreauint64_t m = CMPhotoGetImageInformationFromJFIFByteStream((uint64_t)v15, v14, 0, &v16, 0, 0, &v13, 0);
    if (!ImageInformationFromJFIFByteStream)
    {
      unsigned int v8 = 0;
      int v9 = v16;
      while (1)
      {
        ImageInformationFromJFIFByteStreauint64_t m = FigCFArrayAppendInt();
        if (ImageInformationFromJFIFByteStream) {
          break;
        }
        if (v9 != 6 && v8++ <= 1) {
          continue;
        }
        uint64_t v11 = 0;
        if (!a2) {
          goto LABEL_13;
        }
        *a2 = v5;
        if (v7) {
          goto LABEL_14;
        }
        return v11;
      }
    }
  }
  uint64_t v11 = ImageInformationFromJFIFByteStream;
LABEL_13:
  CFRelease(v5);
  if (v7) {
LABEL_14:
  }
    CFRelease(v7);
  return v11;
}

uint64_t CMPhotoPictureReaderGetYUVPixelFormatForJPEG(uint64_t a1, int *a2)
{
  CFTypeRef cf = 0;
  uint64_t v9 = 0;
  if (!a2) {
    return 0;
  }
  if (a1)
  {
    ImageInformationFromJFIFByteStreauint64_t m = CMPhotoPictureReaderCopyByteStreamForFirstTile(a1, &cf, &v9);
    CFTypeRef v4 = cf;
    if (!ImageInformationFromJFIFByteStream)
    {
      uint64_t v7 = 0;
      ImageInformationFromJFIFByteStreauint64_t m = CMPhotoGetImageInformationFromJFIFByteStream((uint64_t)cf, v9, 0, (int *)&v7 + 1, 0, 0, &v7, 0);
      if (!ImageInformationFromJFIFByteStream) {
        ImageInformationFromJFIFByteStreauint64_t m = CMPhotoGetYUVPixelFormatForParameters(SHIDWORD(v7), v7, 1, 0, 0, 0, 1, a2);
      }
    }
    uint64_t v5 = ImageInformationFromJFIFByteStream;
    if (v4) {
      CFRelease(v4);
    }
    return v5;
  }
  return FigSignalErrorAt();
}

uint64_t CMPhotoPictureReaderCopyBaseReaderAndPropertiesForDerivedPicture(const void *a1, void *a2, _OWORD *a3, _DWORD *a4)
{
  CFBooleanRef v82 = 0;
  v83[0] = 0;
  unsigned long long v80 = 0u;
  long long v81 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  uint64_t v76 = 0;
  uint64_t v77 = 0;
  long long v75 = 0uLL;
  int v74 = 1;
  uint64_t ImageGeometryFromPictureReader = CMPhotoPictureReaderGetImageGeometryFromPictureReader(a1, 0, (unint64_t)&v80, (unint64_t)&v76);
  if (ImageGeometryFromPictureReader) {
    goto LABEL_54;
  }
  CFAllocatorRef v9 = CFGetAllocator(a1);
  uint64_t FigBaseObject = FigPictureReaderGetFigBaseObject();
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  int v13 = *(uint64_t (**)(uint64_t, void, CFAllocatorRef, const __CFBoolean **))(v12 + 48);
  if (!v13)
  {
LABEL_45:
    uint64_t v39 = 0;
    uint64_t v26 = 4294954514;
    goto LABEL_46;
  }
  uint64_t v14 = (const void *)*MEMORY[0x1E4F33440];
  uint64_t ImageGeometryFromPictureReader = v13(FigBaseObject, *MEMORY[0x1E4F33440], v9, &v82);
  if (ImageGeometryFromPictureReader) {
    BOOL v15 = ImageGeometryFromPictureReader == -12783;
  }
  else {
    BOOL v15 = 1;
  }
  if (!v15) {
    goto LABEL_54;
  }
  if (v82)
  {
    unsigned int Int = CMPhotoCFNumberGetInt(v82);
    HIDWORD(v17) = -1527099483 * Int + 47721858;
    LODWORD(v17) = HIDWORD(v17);
    if ((v17 >> 1) > 0x2D82D82) {
      goto LABEL_106;
    }
    unsigned int v18 = Int;
    if (v82)
    {
      CFRelease(v82);
      CFBooleanRef v82 = 0;
    }
  }
  else
  {
    unsigned int v18 = 0;
  }
  CFAllocatorRef v19 = CFGetAllocator(a1);
  uint64_t v20 = FigPictureReaderGetFigBaseObject();
  uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v21) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = 0;
  }
  CFTypeRef v23 = *(uint64_t (**)(uint64_t, void, CFAllocatorRef, const __CFBoolean **))(v22 + 48);
  if (!v23) {
    goto LABEL_45;
  }
  BOOL v24 = (const void *)*MEMORY[0x1E4F33410];
  uint64_t v25 = v23(v20, *MEMORY[0x1E4F33410], v19, &v82);
  if (v25)
  {
    uint64_t v26 = v25;
    if (v25 != -12783) {
      goto LABEL_55;
    }
  }
  if (!v82)
  {
    int v28 = -1;
    goto LABEL_27;
  }
  unsigned int v27 = CMPhotoCFNumberGetInt(v82);
  if (v27 > 1)
  {
LABEL_106:
    uint64_t v39 = 0;
LABEL_107:
    uint64_t v26 = 4294950195;
    goto LABEL_46;
  }
  int v28 = v27;
  if (v82)
  {
    CFRelease(v82);
    CFBooleanRef v82 = 0;
  }
LABEL_27:
  CFAllocatorRef v29 = CFGetAllocator(a1);
  uint64_t v30 = FigPictureReaderGetFigBaseObject();
  uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v31) {
    uint64_t v32 = v31;
  }
  else {
    uint64_t v32 = 0;
  }
  float64x2_t v33 = *(uint64_t (**)(uint64_t, void, CFAllocatorRef, CFTypeRef *))(v32 + 48);
  if (!v33) {
    goto LABEL_45;
  }
  uint64_t ImageGeometryFromPictureReader = v33(v30, *MEMORY[0x1E4F333A0], v29, v83);
  if (ImageGeometryFromPictureReader)
  {
LABEL_54:
    uint64_t v26 = ImageGeometryFromPictureReader;
LABEL_55:
    uint64_t v39 = 0;
    goto LABEL_46;
  }
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v83[0], (const void *)*MEMORY[0x1E4F333B8]);
  if (!Value
    || (v35 = Value, CFTypeID v36 = CFGetTypeID(Value), v36 != CFArrayGetTypeID())
    || CFArrayGetCount(v35) != 1
    || (CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v35, 0)) == 0
    || (CFTypeRef v38 = CFRetain(ValueAtIndex)) == 0)
  {
    uint64_t ImageGeometryFromPictureReader = FigSignalErrorAt();
    goto LABEL_54;
  }
  uint64_t v39 = v38;
  uint64_t v40 = CMPhotoPictureReaderGetImageGeometryFromPictureReader(v38, 0, 0, (unint64_t)&v75);
  if (v40)
  {
LABEL_110:
    uint64_t v26 = v40;
    goto LABEL_46;
  }
  long long v79 = v75;
  CFDictionaryRef v41 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v83[0], (const void *)*MEMORY[0x1E4F333B0]);
  if (!v41)
  {
    signed int v49 = 0;
    unsigned int v52 = -1;
    uint64_t v53 = v79;
LABEL_67:
    if (v53 != v76) {
      goto LABEL_107;
    }
    uint64_t v55 = *((void *)&v79 + 1);
    if (*((void *)&v79 + 1) != v77) {
      goto LABEL_107;
    }
    goto LABEL_69;
  }
  CFDictionaryRef v42 = v41;
  CFTypeID v43 = CFGetTypeID(v41);
  if (v43 != CFDictionaryGetTypeID())
  {
    uint64_t v40 = FigSignalErrorAt();
    goto LABEL_110;
  }
  CFDictionaryRef v44 = (const __CFDictionary *)CFDictionaryGetValue(v42, (const void *)*MEMORY[0x1E4F24A78]);
  if (v44)
  {
    *(void *)&long long v78 = vcvtad_u64_f64(CMPhotoGetCropRectFromCLAPDict(v44, (double)(unint64_t)v75, (double)*((unint64_t *)&v75 + 1)));
    *((void *)&v78 + 1) = vcvtad_u64_f64(v45);
    *(void *)&long long v79 = vcvtad_u64_f64(v46);
    *((void *)&v79 + 1) = vcvtad_u64_f64(v47);
  }
  CFBooleanRef v48 = (const __CFBoolean *)CFDictionaryGetValue(v42, v14);
  if (v48)
  {
    signed int v49 = CMPhotoCFNumberGetInt(v48);
    HIDWORD(v50) = -1527099483 * v49 + 47721858;
    LODWORD(v50) = HIDWORD(v50);
    if ((v50 >> 1) > 0x2D82D82) {
      goto LABEL_107;
    }
  }
  else
  {
    signed int v49 = 0;
  }
  CFBooleanRef v54 = (const __CFBoolean *)CFDictionaryGetValue(v42, v24);
  if (v54)
  {
    unsigned int v52 = CMPhotoCFNumberGetInt(v54);
    if (v52 > 1) {
      goto LABEL_107;
    }
  }
  else
  {
    unsigned int v52 = -1;
  }
  uint64_t v55 = v79;
  HIDWORD(v56) = -1527099483 * v49 + 47721856;
  LODWORD(v56) = HIDWORD(v56);
  if ((v56 >> 2) <= 0x16C16C0)
  {
    uint64_t v53 = v79;
    goto LABEL_67;
  }
  if ((void)v79 != v77) {
    goto LABEL_107;
  }
  uint64_t v53 = *((void *)&v79 + 1);
  if (*((void *)&v79 + 1) != v76) {
    goto LABEL_107;
  }
LABEL_69:
  uint64_t v57 = *((void *)&v80 + 1);
  unsigned long long v59 = v80;
  uint64_t v73 = v59 >> 64;
  uint64_t v58 = v59;
  *(void *)&v72[0] = v80;
  uint64_t v61 = *((void *)&v81 + 1);
  uint64_t v60 = v81;
  if (v52 == 1)
  {
    uint64_t v62 = (uint64_t *)v72;
    uint64_t v63 = v81;
    uint64_t v64 = v53;
  }
  else
  {
    if (v52) {
      goto LABEL_74;
    }
    uint64_t v62 = &v73;
    uint64_t v58 = *((void *)&v80 + 1);
    uint64_t v63 = *((void *)&v81 + 1);
    uint64_t v64 = v55;
  }
  *uint64_t v62 = v64 - v63 - v58;
  uint64_t v58 = *(void *)&v72[0];
  uint64_t v57 = v73;
LABEL_74:
  int v65 = v49 % 360;
  if (v49 % 360 == 270)
  {
    uint64_t v58 = v53 - v58 - v60;
    uint64_t v66 = v57;
    goto LABEL_79;
  }
  if (v65 == 180)
  {
    uint64_t v66 = v53 - v58 - v60;
    uint64_t v58 = v55 - v57 - v61;
LABEL_82:
    uint64_t v67 = v60;
    uint64_t v60 = v61;
    goto LABEL_83;
  }
  if (v65 != 90)
  {
    uint64_t v66 = v58;
    uint64_t v58 = v57;
    goto LABEL_82;
  }
  uint64_t v66 = v55 - v57 - v61;
LABEL_79:
  uint64_t v67 = v61;
LABEL_83:
  *(void *)&unsigned long long v80 = v66;
  *((void *)&v80 + 1) = v58;
  *(void *)&long long v81 = v67;
  *((void *)&v81 + 1) = v60;
  if (v52 != -1 && (v18 == 270 || v18 == 90))
  {
    if (v18 < 0xB4) {
      int v68 = 180;
    }
    else {
      int v68 = -180;
    }
    v18 += v68;
  }
  v72[0] = v80;
  v72[1] = v81;
  uint64_t v40 = CMPhotoApplyCropCMPhotoRectToRect(&v78, (unint64_t *)v72);
  if (v40) {
    goto LABEL_110;
  }
  int v69 = (int)(v18 + v49) % 360;
  if (v28 == v52) {
    goto LABEL_98;
  }
  if (v28 == -1) {
    int v70 = v52;
  }
  else {
    int v70 = v28;
  }
  if (v28 != -1 && v52 != -1)
  {
    int v69 = (__int16)(v69 + 180) % 360;
LABEL_98:
    int v70 = -1;
  }
  uint64_t v40 = CMPhotoExifOrientationFromHEIFRotationCCWAndMirroring(v69, v70, &v74);
  if (v40) {
    goto LABEL_110;
  }
  if (a2)
  {
    *a2 = v39;
    uint64_t v39 = 0;
  }
  if (a3)
  {
    long long v71 = v79;
    *a3 = v78;
    a3[1] = v71;
  }
  uint64_t v26 = 0;
  if (a4) {
    *a4 = v74;
  }
LABEL_46:
  if (v83[0]) {
    CFRelease(v83[0]);
  }
  if (v82) {
    CFRelease(v82);
  }
  if (v39) {
    CFRelease(v39);
  }
  return v26;
}

uint64_t CMPhotoPictureReaderCopyFormatDescriptorFromReader(uint64_t a1, uint64_t a2, int a3, CMFormatDescriptionRef *a4)
{
  CFTypeRef cf = 0;
  CFTypeRef v30 = 0;
  CMFormatDescriptionRef desc = 0;
  uint64_t FigBaseObject = FigPictureReaderGetFigBaseObject();
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, void, uint64_t, CMFormatDescriptionRef *))(v10 + 48);
  if (!v11) {
    goto LABEL_30;
  }
  uint64_t v12 = v11(FigBaseObject, *MEMORY[0x1E4F333D0], a2, &desc);
  if (v12) {
    goto LABEL_38;
  }
  FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(desc);
  if (!a3 || MediaSubType != 1735551332)
  {
    if (!a4)
    {
      uint64_t v16 = 0;
      goto LABEL_31;
    }
LABEL_13:
    uint64_t v16 = 0;
    *a4 = desc;
    CMFormatDescriptionRef desc = 0;
    goto LABEL_31;
  }
  if (desc)
  {
    CFRelease(desc);
    CMFormatDescriptionRef desc = 0;
  }
  uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v15 = v14 ? v14 : 0;
  unint64_t v17 = *(uint64_t (**)(uint64_t, CFTypeRef *))(v15 + 8);
  if (!v17)
  {
LABEL_30:
    uint64_t v16 = 4294954514;
    goto LABEL_31;
  }
  uint64_t v12 = v17(a1, &v30);
  if (v12) {
    goto LABEL_38;
  }
  CFTypeRef v18 = v30;
  uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v19) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = 0;
  }
  uint64_t v21 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(v20 + 8);
  if (!v21) {
    goto LABEL_30;
  }
  uint64_t v12 = v21(v18, &cf);
  if (v12)
  {
LABEL_38:
    uint64_t v16 = v12;
    goto LABEL_31;
  }
  uint64_t CMBaseObject = FigPictureTileCursorGetCMBaseObject();
  uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v23) {
    uint64_t v24 = v23;
  }
  else {
    uint64_t v24 = 0;
  }
  uint64_t v25 = *(uint64_t (**)(uint64_t, void, uint64_t, CMFormatDescriptionRef *))(v24 + 48);
  if (!v25) {
    goto LABEL_30;
  }
  uint64_t v26 = v25(CMBaseObject, *MEMORY[0x1E4F33470], a2, &desc);
  uint64_t v16 = v26;
  if (a4 && !v26) {
    goto LABEL_13;
  }
LABEL_31:
  if (cf) {
    CFRelease(cf);
  }
  if (v30) {
    CFRelease(v30);
  }
  if (desc) {
    CFRelease(desc);
  }
  return v16;
}

uint64_t _readBytesFromChunks(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v7 = *(void *)(a1 + 32);
  unint64_t v8 = *(void *)(a1 + 40);
  if (*(_OWORD *)(a1 + 32) == 0)
  {
    unint64_t v8 = **(void **)(a1 + 16);
    *(void *)(a1 + 40) = v8;
  }
  unint64_t v9 = *(void *)(a1 + 48);
  if (v9 >= v8)
  {
    *(void *)(a1 + 32) = ++v7;
    if (v7 >= *(void *)a1) {
      return 4294950194;
    }
    unint64_t v9 = 0;
    unint64_t v8 = *(void *)(*(void *)(a1 + 16) + 8 * v7);
    *(void *)(a1 + 40) = v8;
    *(void *)(a1 + 4_Block_object_dispose(&STACK[0x280], 8) = 0;
  }
  unint64_t v10 = v8 - v9;
  if (v10 >= a2) {
    unint64_t v11 = a2;
  }
  else {
    unint64_t v11 = v10;
  }
  unint64_t v19 = 0;
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v13 = *(void *)(*(void *)(a1 + 8) + 8 * v7);
  uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v14) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = *(uint64_t (**)(uint64_t, unint64_t, unint64_t, uint64_t, unint64_t *))(v15 + 8);
  if (!v16) {
    return 4294954514;
  }
  uint64_t result = v16(v12, v11, v13 + v9, a3, &v19);
  if (!result)
  {
    unint64_t v18 = v19;
    *(int64x2_t *)(a1 + 4_Block_object_dispose(&STACK[0x280], 8) = vaddq_s64(*(int64x2_t *)(a1 + 48), vdupq_n_s64(v19));
    uint64_t result = 0;
    if (a4) {
      *a4 = v18;
    }
  }
  return result;
}

uint64_t _processCompressedData(compression_stream *stream, CFDataRef theData, int flags, unsigned char *a4)
{
  if (!stream->dst_size)
  {
    unint64_t Length = CFDataGetLength(theData);
    unint64_t v9 = (unint64_t)fmin(round((double)Length * 1.25), 10485760.0);
    if (Length >= v9) {
      goto LABEL_8;
    }
    unint64_t v10 = Length;
    CFDataSetLength(theData, v9);
    stream->dst_ptr = &CFDataGetMutableBytePtr(theData)[v10];
    stream->dst_CGSize size = CFDataGetLength(theData) - v10;
  }
  uint64_t result = compression_stream_process(stream, flags);
  if (!result) {
    return result;
  }
  if (result == 1)
  {
    uint64_t result = 0;
    *a4 = 1;
    return result;
  }
LABEL_8:
  return FigSignalErrorAt();
}

uint64_t CMPhotoJPEGWriteMPFWithJPEG(__IOSurface *a1, CFIndex a2, IOSurfaceRef *a3, uint64_t *a4, unsigned int a5, uint64_t a6)
{
  uint64_t v73 = 0;
  BOOLeauint64_t n = 0;
  if (!a1
    || !a2
    || (int)a5 <= 0
    || (uint64_t v7 = a3) == 0
    || (unint64_t v8 = a4) == 0
    || !a6
    || ((CMBaseObject = CMByteStreamGetCMBaseObject(), (uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8)) == 0)
      ? (uint64_t v13 = 0)
      : (uint64_t v13 = v12),
        (uint64_t v14 = *(unsigned int (**)(uint64_t, void))(v13 + 48)) == 0
     || (CFAllocatorRef allocator = (CFAllocatorRef)*MEMORY[0x1E4F1CF80], v14(CMBaseObject, *MEMORY[0x1E4F1EC80]))
     || !CFBooleanGetValue(BOOLean)))
  {
    uint64_t v68 = FigSignalErrorAt();
    uint64_t v16 = 0;
    uint64_t v66 = 0;
    CFDataRef v67 = 0;
    goto LABEL_63;
  }
  IOSurfaceRef buffer = a1;
  uint64_t v15 = a5;
  uint64_t v16 = malloc_type_malloc(4 * a5, 0x100004052888210uLL);
  uint64_t v17 = 0;
  do
  {
    Pixeluint64_t Format = IOSurfaceGetPixelFormat(v7[v17]);
    if (PixelFormat != 875704422 && PixelFormat != 1246774599 && PixelFormat != 875704438)
    {
      uint64_t v66 = 0;
      CFDataRef v67 = 0;
      uint64_t v68 = 4294954516;
      goto LABEL_63;
    }
    v16[v17] = PixelFormat;
    if ((PixelFormat | 0x10) == 0x34323076)
    {
      size_t BytesPerRowOfPlane = IOSurfaceGetBytesPerRowOfPlane(v7[v17], 0);
      v8[v17] = IOSurfaceGetHeightOfPlane(v7[v17], 0) * BytesPerRowOfPlane;
      size_t v22 = IOSurfaceGetBytesPerRowOfPlane(v7[v17], 1uLL);
      v8[v17] += IOSurfaceGetHeightOfPlane(v7[v17], 1uLL) * v22;
    }
    ++v17;
  }
  while (a5 != v17);
  IOSurfaceLock(buffer, 1u, 0);
  unint64_t BaseAddress = (const UInt8 *)IOSurfaceGetBaseAddress(buffer);
  CFAllocatorRef v24 = allocator;
  CFAllocatorRef allocatora = (CFAllocatorRef)a2;
  CFDataRef v25 = CFDataCreateWithBytesNoCopy(v24, BaseAddress, a2, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
  CFDataRef v67 = v25;
  if (!v25)
  {
    uint64_t v66 = 0;
LABEL_74:
    uint64_t v68 = 4294954510;
    goto LABEL_62;
  }
  unsigned __int8 BytePtr = CFDataGetBytePtr(v25);
  CFIndex Length = CFDataGetLength(v67);
  BOOL v28 = 0;
  uint64_t v29 = 0;
LABEL_27:
  uint64_t v30 = v29;
  CFIndex v31 = Length - v29;
  if (Length > v29)
  {
    uint64_t v32 = 0;
    CFIndex v33 = Length;
    float64x2_t v34 = BytePtr;
    do
    {
      int v35 = v34[v30];
      if (v28)
      {
        if ((v35 & 0xF0) == 0xE0)
        {
          if (v31 + v32 >= 8)
          {
            uint64_t v29 = v30 + __rev16(*(unsigned __int16 *)&v34[v30 + 1]) - v32 + 1;
            BOOL v28 = 1;
            if (v29 < Length) {
              goto LABEL_27;
            }
          }
          break;
        }
        if ((v35 | 2) == 0xC2)
        {
          uint64_t v36 = v31 + v32;
          uint64_t v37 = ~v32 + v30;
          if (v36 >= 9) {
            uint64_t v30 = v37;
          }
          break;
        }
      }
      ++v34;
      BOOL v28 = v35 == 255;
      --v32;
      --v33;
    }
    while (v30 != v33);
  }
  if (v30 <= 0)
  {
    uint64_t v68 = FigSignalErrorAt();
  }
  else
  {
    CFRelease(v67);
    CFTypeRef v38 = IOSurfaceGetBaseAddress(buffer);
    uint64_t v39 = byteStreamWrite(a6, (uint64_t)v38, v30, &v73);
    if (!v39)
    {
      size_t v40 = (int)(16 * a5 + 74);
      CFDictionaryRef v41 = (char *)malloc_type_malloc(v40, 0xF5B6BD84uLL);
      uint64_t v66 = v41;
      if (v41)
      {
        uint64_t v42 = 0;
        *(_WORD *)CFDictionaryRef v41 = -7425;
        unsigned int v43 = 16 * (a5 + 1);
        *((_WORD *)v41 + 1) = bswap32(v43 + 56) >> 16;
        *(void *)(v41 + 4) = 0x2A004D4D004D4441;
        *(void *)(v41 + 12) = 0xB0030008000000;
        *((_WORD *)v41 + 10) = 1792;
        *(void *)(v41 + 22) = 0x3030313004000000;
        *(void *)(v41 + 30) = 0x1000000040001B0;
        *(_DWORD *)(v41 + 3_Block_object_dispose(&STACK[0x280], 8) = bswap32(a5 + 1);
        *(_DWORD *)(v41 + 42) = 117441200;
        *(_DWORD *)(v41 + 46) = bswap32(v43);
        *(void *)(v41 + 50) = 838860800;
        unsigned int v44 = v43 + 58 + allocatora - v30 - 8;
        *(_DWORD *)(v41 + 5_Block_object_dispose(&STACK[0x280], 8) = 768;
        *(_DWORD *)(v41 + 62) = bswap32(v43 + 58 + allocatora);
        double v45 = (unsigned int *)v8;
        uint64_t v46 = a5;
        *(void *)(v41 + 66) = 0;
        do
        {
          double v47 = &v66[1 * v42];
          int v48 = v16[v42];
          if (v48 == 875704422) {
            int v49 = 117571586;
          }
          else {
            int v49 = 131074;
          }
          if (v48 == 875704438) {
            unsigned int v50 = 100794370;
          }
          else {
            unsigned int v50 = v49;
          }
          *(_DWORD *)(v47 + 74) = bswap32(v50);
          *(_DWORD *)(v47 + 7_Block_object_dispose(&STACK[0x280], 8) = bswap32(*v45);
          *(void *)(v47 + 82) = bswap32(v44);
          unsigned int v51 = *v45;
          v45 += 2;
          v44 += v51;
          ++v42;
          --v46;
        }
        while (v46);
        if (v43 + 58 == v40)
        {
          uint64_t v52 = byteStreamWrite(a6, (uint64_t)v66, v40, &v73);
          if (!v52)
          {
            uint64_t v53 = IOSurfaceGetBaseAddress(buffer);
            uint64_t v52 = byteStreamWrite(a6, (uint64_t)v53 + v30, (uint64_t)allocatora - v30, &v73);
            if (!v52)
            {
              while (1)
              {
                IOSurfaceLock(*v7, 1u, 0);
                OSType v54 = IOSurfaceGetPixelFormat(*v7) & 0xFFFFFFEF;
                uint64_t v55 = *v7;
                if (v54 == 875704422)
                {
                  size_t v56 = IOSurfaceGetBytesPerRowOfPlane(v55, 0);
                  uint64_t v57 = IOSurfaceGetHeightOfPlane(*v7, 0) * v56;
                  BaseAddressOfPlane = IOSurfaceGetBaseAddressOfPlane(*v7, 0);
                  uint64_t v68 = byteStreamWrite(a6, (uint64_t)BaseAddressOfPlane, v57, &v73);
                  unsigned long long v59 = *v7;
                  if (v68)
                  {
                    IOSurfaceUnlock(v59, 1u, 0);
                    goto LABEL_61;
                  }
                  size_t v60 = IOSurfaceGetBytesPerRowOfPlane(v59, 1uLL);
                  size_t v61 = IOSurfaceGetHeightOfPlane(*v7, 1uLL) * v60;
                  uint64_t v62 = IOSurfaceGetBaseAddressOfPlane(*v7, 1uLL);
                  uint64_t v63 = a6;
                  uint64_t v64 = v61;
                }
                else
                {
                  uint64_t v62 = IOSurfaceGetBaseAddress(v55);
                  uint64_t v64 = *v8;
                  uint64_t v63 = a6;
                }
                uint64_t v68 = byteStreamWrite(v63, (uint64_t)v62, v64, &v73);
                IOSurfaceUnlock(*v7, 1u, 0);
                if (v68) {
                  goto LABEL_61;
                }
                ++v8;
                ++v7;
                if (!--v15)
                {
                  uint64_t v68 = 0;
                  goto LABEL_61;
                }
              }
            }
          }
        }
        else
        {
          uint64_t v52 = FigSignalErrorAt();
        }
        uint64_t v68 = v52;
LABEL_61:
        CFDataRef v67 = 0;
        goto LABEL_62;
      }
      CFDataRef v67 = 0;
      goto LABEL_74;
    }
    uint64_t v68 = v39;
    CFDataRef v67 = 0;
  }
  uint64_t v66 = 0;
LABEL_62:
  IOSurfaceUnlock(buffer, 1u, 0);
LABEL_63:
  free(v66);
  free(v16);
  if (v67) {
    CFRelease(v67);
  }
  if (BOOLean) {
    CFRelease(BOOLean);
  }
  return v68;
}

uint64_t byteStreamWrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = *a4;
  uint64_t v14 = 0;
  uint64_t v9 = v8;
  do
  {
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(v11 + 16);
    if (!v12) {
      return 4294954514;
    }
    uint64_t result = v12(a1, a3, v9, a2 + v9 - v8, &v14);
    if (result) {
      return result;
    }
    v9 += v14;
    a3 -= v14;
  }
  while (v14 && a3);
  if (a3) {
    return 4294954516;
  }
  uint64_t result = 0;
  *a4 = v9;
  return result;
}

uint64_t CMPhotoJPEGAddMPDataToJPEG(__IOSurface *a1, CFIndex a2, IOSurfaceRef *a3, uint64_t *a4, signed int a5, __CFDictionary **a6, CFIndex *a7)
{
  CFIndex v11 = a2 + 16 * a5 + 74;
  if (a5 >= 1)
  {
    uint64_t v12 = a3;
    uint64_t v13 = a4;
    uint64_t v14 = a5;
    do
    {
      if ((IOSurfaceGetPixelFormat(*v12) & 0xFFFFFFEF) == 0x34323066)
      {
        size_t BytesPerRowOfPlane = IOSurfaceGetBytesPerRowOfPlane(*v12, 0);
        size_t v16 = v11 + IOSurfaceGetHeightOfPlane(*v12, 0) * BytesPerRowOfPlane;
        size_t v17 = IOSurfaceGetBytesPerRowOfPlane(*v12, 1uLL);
        CFIndex v11 = v16 + IOSurfaceGetHeightOfPlane(*v12, 1uLL) * v17;
      }
      else
      {
        v11 += *v13;
      }
      ++v13;
      ++v12;
      --v14;
    }
    while (v14);
  }
  JPEGSurface = createJPEGSurface(v11);
  if (JPEGSurface)
  {
    WritableWithIOSurfaceRef IOSurface = FigByteStreamCreateWritableWithIOSurface();
    if (WritableWithIOSurface)
    {
      uint64_t v20 = WritableWithIOSurface;
    }
    else
    {
      uint64_t v20 = CMPhotoJPEGWriteMPFWithJPEG(a1, a2, a3, a4, a5, 0);
      if (!v20)
      {
        *a6 = JPEGSurface;
        *a7 = v11;
        JPEGSurface = 0;
      }
    }
  }
  else
  {
    uint64_t v20 = 4294954510;
  }
  if (JPEGSurface) {
    CFRelease(JPEGSurface);
  }
  return v20;
}

__CFDictionary *createJPEGSurface(int a1)
{
  uint64_t v2 = *MEMORY[0x1E4F14B00];
  uint64_t result = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (result)
  {
    CFTypeRef v4 = result;
    setIntValue_0(result, (const void *)*MEMORY[0x1E4F2EFE8], 0);
    setIntValue_0(v4, (const void *)*MEMORY[0x1E4F2F150], 1246774599);
    setIntValue_0(v4, (const void *)*MEMORY[0x1E4F2EFB8], (a1 + v2 - 1) & -(int)v2);
    IOSurfaceRef v5 = IOSurfaceCreate(v4);
    CFRelease(v4);
    return v5;
  }
  return result;
}

uint64_t CMPhotoJPEGCopyMPDataFromJPEG(IOSurfaceRef buffer, CFIndex a2, int a3, __IOSurface **a4, void *a5)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (buffer && a4 && a5)
  {
    IOSurfaceLock(buffer, 1u, 0);
    CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    unint64_t BaseAddress = (const UInt8 *)IOSurfaceGetBaseAddress(buffer);
    CFDataRef v13 = CFDataCreateWithBytesNoCopy(v11, BaseAddress, a2, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
    CFIndex MPTag = findMPTag(v13);
    if (MPTag)
    {
      CFIndex v15 = MPTag;
      unsigned __int8 BytePtr = CFDataGetBytePtr(v13);
      CFDataRef v25 = 0;
      uint64_t v26 = 0;
      CFAllocatorRef v24 = 0;
      int v23 = 0;
      if (!parseInitialMPFHeader((unsigned __int16 *)&BytePtr[v15], &v26, &v25, (unsigned int **)&v24, &v23))
      {
        JPEGSurface = createJPEGSurface(*((void *)v25 + a3));
        if (JPEGSurface)
        {
          unint64_t v18 = JPEGSurface;
          uint64_t v19 = a3;
          IOSurfaceLock(JPEGSurface, 0, 0);
          CFIndex v20 = v15 + 8;
          if (!a3) {
            CFIndex v20 = 0;
          }
          uint64_t v21 = &BytePtr[*((void *)v26 + a3) + v20];
          size_t v22 = IOSurfaceGetBaseAddress(v18);
          memcpy(v22, v21, *((void *)v25 + v19));
          IOSurfaceUnlock(v18, 0, 0);
          *a4 = v18;
          *a5 = *((void *)v25 + v19);
        }
        free(v26);
        free(v25);
        free(v24);
      }
    }
    CFRelease(v13);
    IOSurfaceUnlock(buffer, 1u, 0);
    return 0;
  }
  return result;
}

CFIndex findMPTag(const __CFData *a1)
{
  unsigned __int8 BytePtr = CFDataGetBytePtr(a1);
  CFIndex Length = CFDataGetLength(a1);
  if (Length < 1) {
    return 0;
  }
  CFIndex v4 = 0;
  BOOL v5 = 0;
  while (1)
  {
    int v6 = BytePtr[v4];
    if (v5) {
      break;
    }
LABEL_10:
    BOOL v5 = v6 == 255;
    ++v4;
LABEL_11:
    if (v4 >= Length) {
      return 0;
    }
  }
  if ((v6 & 0xF0) != 0xE0)
  {
    if ((v6 | 2) == 0xC2) {
      return 0;
    }
    goto LABEL_10;
  }
  if (Length - v4 < 8) {
    return 0;
  }
  if ((v6 & 0xF) != 2)
  {
    v4 += 1 + __rev16(*(unsigned __int16 *)&BytePtr[v4 + 1]);
    if (v4 >= Length) {
      return 0;
    }
    BOOL v5 = 1;
    goto LABEL_11;
  }
  return v4 - 1;
}

uint64_t parseInitialMPFHeader(unsigned __int16 *a1, void *a2, void *a3, unsigned int **a4, int *a5)
{
  if (*a1 != 58111 || *((_DWORD *)a1 + 1) != 5063745) {
    return 0xFFFFFFFFLL;
  }
  int v6 = *((_DWORD *)a1 + 2);
  unsigned int v7 = a1[8];
  unsigned int v8 = bswap32(v7) >> 16;
  if (v6 == 704662861) {
    LOWORD(v7) = v8;
  }
  unsigned int v7 = (unsigned __int16)v7;
  if (!(_WORD)v7) {
    return 0;
  }
  int v13 = 0;
  for (unint64_t i = (unsigned int *)(a1 + 13); ; i += 3)
  {
    unsigned int v15 = *((unsigned __int16 *)i - 4);
    unsigned int v16 = bswap32(v15) >> 16;
    if (v6 == 704662861) {
      LOWORD(v15) = v16;
    }
    if ((unsigned __int16)v15 == 45056)
    {
      unsigned int v17 = *i;
      unsigned int v18 = bswap32(*i);
      if (v6 == 704662861) {
        unsigned int v17 = v18;
      }
      if (v17 != 808529968) {
        return 0xFFFFFFFFLL;
      }
      goto LABEL_20;
    }
    if ((unsigned __int16)v15 == 45057)
    {
      unsigned int v19 = bswap32(*i);
      if (v6 == 704662861) {
        int v13 = v19;
      }
      else {
        int v13 = *i;
      }
      goto LABEL_20;
    }
    if ((unsigned __int16)v15 == 45058) {
      break;
    }
LABEL_20:
    if (!--v7) {
      return 0;
    }
  }
  if (!v13) {
    return 0xFFFFFFFFLL;
  }
  if (a2) {
    uint64_t v21 = malloc_type_malloc(8 * v13, 0x100004000313F17uLL);
  }
  else {
    uint64_t v21 = 0;
  }
  if (a3) {
    size_t v22 = malloc_type_malloc(8 * v13, 0x100004000313F17uLL);
  }
  else {
    size_t v22 = 0;
  }
  if (a4) {
    int v23 = (unsigned int *)malloc_type_malloc(4 * v13, 0x100004052888210uLL);
  }
  else {
    int v23 = 0;
  }
  if (v13 >= 1)
  {
    LODWORD(v24) = bswap32(*i);
    if (v6 == 704662861) {
      uint64_t v24 = v24;
    }
    else {
      uint64_t v24 = *i;
    }
    uint64_t v25 = v13;
    uint64_t v26 = (unsigned int *)((char *)a1 + v24 + 16);
    unsigned int v27 = v21;
    BOOL v28 = v22;
    uint64_t v29 = v23;
    do
    {
      if (v21)
      {
        LODWORD(v30) = *v26;
        unsigned int v31 = bswap32(*v26);
        if (v6 == 704662861) {
          uint64_t v30 = v31;
        }
        else {
          uint64_t v30 = v30;
        }
        *unsigned int v27 = v30;
      }
      if (v22)
      {
        LODWORD(v32) = *(v26 - 1);
        unsigned int v33 = bswap32(v32);
        if (v6 == 704662861) {
          uint64_t v32 = v33;
        }
        else {
          uint64_t v32 = v32;
        }
        *BOOL v28 = v32;
      }
      if (v23)
      {
        unsigned int v34 = *(v26 - 2);
        unsigned int v35 = bswap32(v34);
        if (v6 == 704662861) {
          unsigned int v34 = v35;
        }
        *uint64_t v29 = v34;
      }
      ++v29;
      ++v28;
      ++v27;
      v26 += 4;
      --v25;
    }
    while (v25);
  }
  if (a2) {
    *a2 = v21;
  }
  if (a3) {
    *a3 = v22;
  }
  if (a4) {
    *a4 = v23;
  }
  if (!a5) {
    return 0;
  }
  uint64_t result = 0;
  *a5 = v13;
  return result;
}

uint64_t CMPhotoJPEGGetMPDataCountFromJPEG(IOSurfaceRef buffer, CFIndex a2, _DWORD *a3)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (buffer && a3)
  {
    IOSurfaceLock(buffer, 1u, 0);
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    unint64_t BaseAddress = (const UInt8 *)IOSurfaceGetBaseAddress(buffer);
    CFDataRef v9 = CFDataCreateWithBytesNoCopy(v7, BaseAddress, a2, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
    CFIndex MPTag = findMPTag(v9);
    if (MPTag)
    {
      CFIndex v11 = MPTag;
      unsigned __int8 BytePtr = CFDataGetBytePtr(v9);
      int v13 = 0;
      if (!parseInitialMPFHeader((unsigned __int16 *)&BytePtr[v11], 0, 0, 0, &v13)) {
        *a3 = v13;
      }
    }
    CFRelease(v9);
    IOSurfaceUnlock(buffer, 1u, 0);
    return 0;
  }
  return result;
}

void setIntValue_0(__CFDictionary *a1, const void *a2, int a3)
{
  int valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFDictionarySetValue(a1, a2, v5);
  CFRelease(v5);
}

uint64_t _openContainerWithModificationCallback(uint64_t a1, const __CFDictionary *a2, uint64_t a3, void *a4, CFMutableDictionaryRef *a5, uint64_t (*a6)(CFDictionaryRef, uint64_t), uint64_t a7)
{
  v64[4] = *(CFMutableDictionaryRef *)MEMORY[0x1E4F143B8];
  CFDictionaryRef theDict = 0;
  CFMutableDictionaryRef v61 = 0;
  uint64_t v13 = _parseContainer(a1, a2, a3, a4);
  if (v13) {
    return v13;
  }
  _handleStripping(a1, a2);
  uint64_t v14 = _createDescriptionFromSession(a1, &v61);
  if (v14)
  {
    DescriptionFromSessiouint64_t n = v14;
    CFDictionaryRef v16 = v61;
    goto LABEL_72;
  }
  uint64_t v58 = a3;
  CFAllocatorRef v15 = CFGetAllocator((CFTypeRef)a1);
  CFDictionaryRef v16 = v61;
  uint64_t v17 = CMPhotoPropertyListCopyWithMutableContainers(v15, v61, &theDict);
  if (v17 || (uint64_t v17 = a6(theDict, a7), v17))
  {
LABEL_80:
    DescriptionFromSessiouint64_t n = v17;
    goto LABEL_72;
  }
  if (!CMPhotoCompressionSessionCheckForIllegalModification(v16, theDict))
  {
    uint64_t v17 = FigSignalErrorAt();
    goto LABEL_80;
  }
  unsigned long long v59 = a5;
  v64[0] = (CFMutableDictionaryRef)@"EXIFMetadata";
  v64[1] = (CFMutableDictionaryRef)@"XMPMetadata";
  v64[2] = (CFMutableDictionaryRef)@"DebugMetadata";
  v64[3] = (CFMutableDictionaryRef)@"CustomMetadata";
  v63[0] = a1 + 328;
  v63[1] = a1 + 336;
  v63[2] = a1 + 344;
  v63[3] = a1 + 352;
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(theDict, @"ImageList");
  if (!Value) {
    goto LABEL_65;
  }
  CFArrayRef v19 = Value;
  if (CFArrayGetCount(Value) != 1) {
    goto LABEL_65;
  }
  CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v19, 0);
  if (!ValueAtIndex) {
    goto LABEL_65;
  }
  CFDictionaryRef v21 = ValueAtIndex;
  CFTypeID v22 = CFGetTypeID(ValueAtIndex);
  if (v22 != CFDictionaryGetTypeID()) {
    goto LABEL_65;
  }
  uint64_t v23 = 0;
  char v24 = 1;
  while (2)
  {
    uint64_t v25 = v23;
    while (1)
    {
      uint64_t v26 = (CFTypeRef *)v63[v25];
      CFTypeRef v27 = *v26;
      CFArrayRef v28 = (const __CFArray *)CFDictionaryGetValue(v21, v64[v25]);
      if (v28) {
        break;
      }
      if (v27) {
        goto LABEL_22;
      }
LABEL_20:
      if (++v25 == 4)
      {
        if ((v24 & 1) == 0) {
          goto LABEL_32;
        }
        goto LABEL_37;
      }
    }
    CFArrayRef v29 = v28;
    CFTypeID v30 = CFGetTypeID(v28);
    if (v30 != CFArrayGetTypeID())
    {
LABEL_67:
      DescriptionFromSessiouint64_t n = FigSignalErrorAt();
      unsigned int v34 = v59;
      if (DescriptionFromSession) {
        goto LABEL_72;
      }
      goto LABEL_68;
    }
    if (!v27 || CFArrayGetCount(v29))
    {
      if (CFArrayGetCount(v29) >= 1)
      {
        unsigned int v31 = CFArrayGetValueAtIndex(v29, 0);
        if (!FigCFEqual())
        {
          *(unsigned char *)(a1 + 376) = 1;
          if (*v26) {
            CFRelease(*v26);
          }
          if (v31) {
            CFTypeRef v32 = CFRetain(v31);
          }
          else {
LABEL_28:
          }
            CFTypeRef v32 = 0;
          goto LABEL_29;
        }
      }
      goto LABEL_20;
    }
LABEL_22:
    *(unsigned char *)(a1 + 376) = 1;
    CFTypeRef v32 = *v26;
    if (*v26)
    {
      CFRelease(v32);
      goto LABEL_28;
    }
LABEL_29:
    char v24 = 0;
    *uint64_t v26 = v32;
    uint64_t v23 = v25 + 1;
    if (v25 != 3) {
      continue;
    }
    break;
  }
LABEL_32:
  BOOL v33 = *(void *)(a1 + 328) || *(void *)(a1 + 336) || *(void *)(a1 + 344) || *(void *)(a1 + 352) != 0;
  *(unsigned char *)(a1 + 320) = v33;
LABEL_37:
  unsigned int v34 = v59;
  if (!*(void *)(a1 + 280)) {
    goto LABEL_43;
  }
  CFArrayRef v35 = (const __CFArray *)CFDictionaryGetValue(v21, @"ThumbnailImage");
  if (!v35)
  {
LABEL_41:
    *(unsigned char *)(a1 + 376) = 1;
    CFTypeRef v38 = *(const void **)(a1 + 280);
    if (v38)
    {
      CFRelease(v38);
      *(void *)(a1 + 280) = 0;
    }
    goto LABEL_43;
  }
  CFArrayRef v36 = v35;
  CFTypeID v37 = CFGetTypeID(v35);
  if (v37 != CFArrayGetTypeID()) {
    goto LABEL_81;
  }
  if (!CFArrayGetCount(v36)) {
    goto LABEL_41;
  }
LABEL_43:
  CFArrayRef v39 = *(const __CFArray **)(a1 + 312);
  if (!v39 || CFArrayGetCount(v39) < 1)
  {
LABEL_68:
    uint64_t v56 = _handleRewrite(a1, v58);
    DescriptionFromSessiouint64_t n = v56;
    if (v34)
    {
      if (!v56)
      {
        v64[0] = 0;
        DescriptionFromSessiouint64_t n = _createDescriptionFromSession(a1, v64);
        if (!DescriptionFromSession) {
          *unsigned int v34 = v64[0];
        }
      }
    }
    goto LABEL_72;
  }
  CFArrayRef v40 = (const __CFArray *)CFDictionaryGetValue(v21, @"Auxiliary");
  CFArrayRef v41 = v40;
  if (v40)
  {
    CFTypeID v42 = CFGetTypeID(v40);
    if (v42 != CFArrayGetTypeID())
    {
LABEL_81:
      DescriptionFromSessiouint64_t n = FigSignalErrorAt();
      if (DescriptionFromSession) {
        goto LABEL_72;
      }
      goto LABEL_68;
    }
  }
  CFArrayRef v43 = *(const __CFArray **)(a1 + 312);
  if (!v43) {
    goto LABEL_68;
  }
  CFIndex Count = CFArrayGetCount(v43);
  if (Count < 1)
  {
LABEL_61:
    CFArrayRef v53 = *(const __CFArray **)(a1 + 312);
    unsigned int v34 = v59;
    if (v53)
    {
      if (!CFArrayGetCount(v53))
      {
        OSType v54 = *(const void **)(a1 + 312);
        if (v54)
        {
          CFRelease(v54);
          *(void *)(a1 + 312) = 0;
        }
      }
    }
    goto LABEL_68;
  }
  uint64_t v45 = Count;
  while (1)
  {
    if (v41)
    {
      CFIndex v46 = CFArrayGetCount(v41);
      if (v46 >= 1) {
        break;
      }
    }
LABEL_58:
    *(unsigned char *)(a1 + 376) = 1;
    unsigned int v51 = (const void **)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 312), v45 - 1);
    CMPhotoCompressedAuxImageStorageDestroy(v51);
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 312), v45 - 1);
LABEL_59:
    if (v45-- <= 1) {
      goto LABEL_61;
    }
  }
  CFIndex v47 = v46 + 1;
  while (1)
  {
    CFDictionaryRef v48 = (const __CFDictionary *)CFArrayGetValueAtIndex(v41, v47 - 2);
    if (!v48) {
      break;
    }
    CFDictionaryRef v49 = v48;
    CFTypeID v50 = CFGetTypeID(v48);
    if (v50 != CFDictionaryGetTypeID()) {
      break;
    }
    int v62 = 0;
    if (!CMPhotoCFDictionaryGetIntIfPresent(v49, @"ImageHandle", &v62)) {
      goto LABEL_67;
    }
    if (v45 - 1 == v62) {
      goto LABEL_59;
    }
    if ((unint64_t)--v47 < 2) {
      goto LABEL_58;
    }
  }
LABEL_65:
  DescriptionFromSessiouint64_t n = 4294950306;
LABEL_72:
  if (v16) {
    CFRelease(v16);
  }
  if (theDict) {
    CFRelease(theDict);
  }
  return DescriptionFromSession;
}

uint64_t _addExif (uint64_t a1, uint64_t a2, const __CFDictionary *a3, CFTypeRef a4)
{
  CFAllocatorRef v8 = CFGetAllocator((CFTypeRef)a1);
  if (a4) {
    a4 = CFRetain(a4);
  }
  if (a2 || !*(void *)(a1 + 264) || *(void *)(a1 + 328)) {
    goto LABEL_24;
  }
  uint64_t v18 = 0;
  unint64_t Length = CFDataGetLength((CFDataRef)a4);
  if (!a3 || !CMPhotoCFDictionaryGetInt32IfPresent(a3, @"TIFFHeaderOffset", (char *)&v18 + 4))
  {
    uint64_t v10 = CMPhotoExifDetectTIFFHeaderOffset((const __CFData *)a4, &v18, (_DWORD *)&v18 + 1);
    if (v10)
    {
LABEL_25:
      uint64_t v16 = v10;
      goto LABEL_20;
    }
    if ((_BYTE)v18) {
      goto LABEL_12;
    }
LABEL_24:
    uint64_t v10 = FigSignalErrorAt();
    goto LABEL_25;
  }
  if (Length <= HIDWORD(v18)) {
    goto LABEL_24;
  }
  LOBYTE(v1_Block_object_dispose(&STACK[0x280], 8) = 1;
LABEL_12:
  unsigned __int8 BytePtr = CFDataGetBytePtr((CFDataRef)a4);
  if (!(*(_DWORD *)BytePtr ^ 0x66697845 | *((unsigned __int16 *)BytePtr + 2)))
  {
    if (!a4)
    {
      CFTypeRef v15 = 0;
      goto LABEL_19;
    }
LABEL_18:
    CFTypeRef v15 = CFRetain(a4);
LABEL_19:
    uint64_t v16 = 0;
    *(void *)(a1 + 32_Block_object_dispose(&STACK[0x280], 8) = v15;
    *(unsigned char *)(a1 + 320) = 1;
    goto LABEL_20;
  }
  uint64_t v12 = BytePtr;
  CFMutableArrayRef Mutable = CFDataCreateMutable(v8, 0);
  if (Mutable)
  {
    uint64_t v14 = Mutable;
    CFDataAppendBytes(Mutable, (const UInt8 *)"Exif", 6);
    CFDataAppendBytes(v14, &v12[HIDWORD(v18)], Length - HIDWORD(v18));
    if (a4) {
      CFRelease(a4);
    }
    a4 = v14;
    goto LABEL_18;
  }
  uint64_t v16 = 4294950305;
LABEL_20:
  if (a4) {
    CFRelease(a4);
  }
  return v16;
}

uint64_t _addXMP(uint64_t a1, uint64_t a2, int a3, CFTypeRef cf)
{
  if (a2 || !*(void *)(a1 + 264) || *(void *)(a1 + 336))
  {
    return FigSignalErrorAt();
  }
  else
  {
    if (cf) {
      CFTypeRef v5 = CFRetain(cf);
    }
    else {
      CFTypeRef v5 = 0;
    }
    *(void *)(a1 + 336) = v5;
    *(unsigned char *)(a1 + 320) = 1;
    return 0;
  }
}

uint64_t _addDebugMetadata(uint64_t a1, uint64_t a2, int a3, CFTypeRef cf)
{
  if (a2 || !*(void *)(a1 + 264) || *(void *)(a1 + 344))
  {
    return FigSignalErrorAt();
  }
  else
  {
    if (cf) {
      CFTypeRef v5 = CFRetain(cf);
    }
    else {
      CFTypeRef v5 = 0;
    }
    *(void *)(a1 + 344) = v5;
    *(unsigned char *)(a1 + 320) = 1;
    return 0;
  }
}

uint64_t _addCustomMetadata(uint64_t a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4)
{
  CFAllocatorRef v7 = CFGetAllocator((CFTypeRef)a1);
  if (a2 || !*(void *)(a1 + 264) || *(void *)(a1 + 352))
  {
    uint64_t v22 = FigSignalErrorAt();
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    CFArrayRef v19 = 0;
  }
  else
  {
    CFAllocatorRef v8 = v7;
    CFDataRef Value = (const __CFData *)CFDictionaryGetValue(a4, @"Data");
    CFStringRef v10 = (const __CFString *)CFDictionaryGetValue(a4, @"URI");
    CFStringRef v11 = (const __CFString *)CFDictionaryGetValue(a4, @"Name");
    *(void *)long long bytes = 0;
    CFIndex Length = CFStringGetLength(v10);
    CFIndex v13 = CFStringGetLength(v11);
    CFIndex v14 = CFDataGetLength(Value);
    CFMutableArrayRef Mutable = CFDataCreateMutable(v8, 0);
    uint64_t v16 = Mutable;
    if (Mutable)
    {
      *(void *)long long bytes = Length;
      CFDataAppendBytes(Mutable, bytes, 8);
      uint64_t v17 = malloc_type_malloc(Length, 0x606C25D0uLL);
      CStringPtrMaybeUsingPreallocatedBuffer = (const UInt8 *)FigCFStringGetCStringPtrMaybeUsingPreallocatedBuffer();
      CFDataAppendBytes(v16, CStringPtrMaybeUsingPreallocatedBuffer, Length);
      *(void *)long long bytes = v13;
      CFDataAppendBytes(v16, bytes, 8);
      CFArrayRef v19 = malloc_type_malloc(v13, 0xB992BAD3uLL);
      CFIndex v20 = (const UInt8 *)FigCFStringGetCStringPtrMaybeUsingPreallocatedBuffer();
      CFDataAppendBytes(v16, v20, v13);
      *(void *)long long bytes = v14;
      CFDataAppendBytes(v16, bytes, 8);
      unsigned __int8 BytePtr = CFDataGetBytePtr(Value);
      CFDataAppendBytes(v16, BytePtr, v14);
      uint64_t v22 = 0;
      *(void *)(a1 + 352) = CFRetain(v16);
      *(unsigned char *)(a1 + 320) = 1;
    }
    else
    {
      uint64_t v17 = 0;
      CFArrayRef v19 = 0;
      uint64_t v22 = 4294950305;
    }
  }
  free(v17);
  free(v19);
  if (v16) {
    CFRelease(v16);
  }
  return v22;
}

uint64_t _addMetadataFromImageProperties(uint64_t a1, uint64_t a2, int a3, CFTypeRef cf)
{
  if (a2 || !*(void *)(a1 + 264) || *(void *)(a1 + 360))
  {
    return FigSignalErrorAt();
  }
  else
  {
    if (cf) {
      CFTypeRef v5 = CFRetain(cf);
    }
    else {
      CFTypeRef v5 = 0;
    }
    *(void *)(a1 + 360) = v5;
    *(unsigned char *)(a1 + 320) = 1;
    return 0;
  }
}

uint64_t _addAuxImageMetadata(uint64_t a1, CFIndex a2, CFTypeRef cf, const void *a4)
{
  CFArrayRef Count = *(const __CFArray **)(a1 + 312);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  if ((a2 & 0x8000000000000000) == 0 && (uint64_t)Count > a2)
  {
    if (!cf) {
      return 4294950306;
    }
    CFTypeID v9 = CFGetTypeID(cf);
    if (v9 != CGImageMetadataGetTypeID()) {
      return 4294950306;
    }
    if (!a4)
    {
      CFDataRef v11 = 0;
      goto LABEL_15;
    }
    CFDataRef Value = (const __CFData *)FigCFDictionaryGetValue();
    CFDataRef v11 = Value;
    if (!Value)
    {
LABEL_11:
      CFIndex v13 = (const void *)FigCFDictionaryGetValue();
      a4 = v13;
      if (v13)
      {
        CFTypeID v14 = CFGetTypeID(v13);
        if (v14 != CFDictionaryGetTypeID())
        {
          uint64_t v15 = 4294950306;
LABEL_30:
          if (v11) {
            CFRelease(v11);
          }
          return v15;
        }
      }
LABEL_15:
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 312), a2);
      if (ValueAtIndex)
      {
        uint64_t v17 = ValueAtIndex;
        if (!ValueAtIndex[2])
        {
          ValueAtIndex[2] = CFRetain(cf);
          uint64_t v18 = (const void *)v17[6];
          if (v18)
          {
            CFRelease(v18);
            v17[6] = 0;
          }
          if (a4) {
            CFTypeRef v19 = CFRetain(a4);
          }
          else {
            CFTypeRef v19 = 0;
          }
          v17[6] = v19;
          CFIndex v20 = (const void *)v17[5];
          if (v20) {
            CFRelease(v20);
          }
          uint64_t v15 = 0;
          v17[5] = v11;
          return v15;
        }
        uint64_t v15 = FigSignalErrorAt();
      }
      else
      {
        uint64_t v15 = 4294950304;
      }
      goto LABEL_30;
    }
    CFTypeID v12 = CFGetTypeID(Value);
    if (v12 != CGColorSpaceGetTypeID()) {
      return 4294950306;
    }
    CFDataRef v11 = CGColorSpaceCopyICCData(v11);
    if (v11) {
      goto LABEL_11;
    }
  }
  return FigSignalErrorAt();
}

uint64_t _addTmapImageOneShot(uint64_t a1, uint64_t a2, int a3, CFDictionaryRef theDict, opaqueCMSampleBuffer *a5, const void *a6, int a7, const CGImageMetadata *a8, void *a9)
{
  CGMutableImageMetadataRef v34 = 0;
  CFIndex v35 = -1;
  if (!a2)
  {
    if (!a5 || !a6) {
      goto LABEL_34;
    }
    ColorSpaceFromTriplets = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v30 = 0;
    int CFValueIfPresent = CMPhotoCFDictionaryGetCFValueIfPresent(theDict, @"ColorSpace", (void **)&ColorSpaceFromTriplets);
    int v14 = CMPhotoCFDictionaryGetCFValueIfPresent(theDict, @"Primaries", (void **)&v32);
    int v15 = CMPhotoCFDictionaryGetCFValueIfPresent(theDict, @"Transfer", (void **)&v31);
    int v16 = CMPhotoCFDictionaryGetCFValueIfPresent(theDict, @"Matrix", (void **)&v30);
    if (CFValueIfPresent)
    {
      if (!ColorSpaceFromTriplets)
      {
LABEL_34:
        uint64_t v25 = FigSignalErrorAt();
        CFMutableDictionaryRef MutableCopy = 0;
LABEL_36:
        CGMutableImageMetadataRef v22 = 0;
LABEL_27:
        if (v34) {
          CFRelease(v34);
        }
        if (v22) {
          CFRelease(v22);
        }
        if (MutableCopy) {
          CFRelease(MutableCopy);
        }
        return v25;
      }
    }
    else
    {
      if (v14) {
        BOOL v17 = v15 == 0;
      }
      else {
        BOOL v17 = 1;
      }
      if (v17 || v16 == 0) {
        goto LABEL_34;
      }
      ColorSpaceFromTriplets = CMPhotoCreateColorSpaceFromTriplets(v32, v31, v30, 0);
      if (!ColorSpaceFromTriplets) {
        goto LABEL_34;
      }
    }
    CFMutableDictionaryRef MutableCopy = (const void *)FigCFDictionaryCreateMutableCopy();
    if (MutableCopy)
    {
      memset(v29, 0, sizeof(v29));
      uint64_t v20 = CMPhotoParseFlexRangeMetadataDictionary(a6, v29);
      if (v20
        || (BOOL v21 = CGColorSpaceUsesITUR_2100TF(ColorSpaceFromTriplets),
            uint64_t v20 = CMPhotoCreateXMPMetadataFromMetadata((float *)v29, !v21, &v34),
            v20))
      {
        uint64_t v25 = v20;
        goto LABEL_36;
      }
      if (!a7)
      {
LABEL_24:
        FigCFDictionarySetValue();
        FigCFDictionarySetValue();
        uint64_t v24 = CMPhotoCompressionSessionAddAuxiliaryImage(a1, 0, 4, (uint64_t)v34, (CFDictionaryRef)MutableCopy, a5, &v35);
        uint64_t v25 = v24;
        CGMutableImageMetadataRef v22 = 0;
        if (a9 && !v24)
        {
          CGMutableImageMetadataRef v22 = 0;
          *a9 = v35;
        }
        goto LABEL_27;
      }
      CGMutableImageMetadataRef v22 = CGImageMetadataCreateMutableCopy(v34);
      if (v22)
      {
        uint64_t v23 = CMPhotoAddMeteorPlusGainMapMetadata(a8, v22);
        if (v23)
        {
          uint64_t v25 = v23;
          goto LABEL_27;
        }
        if (v34) {
          CFRelease(v34);
        }
        CGMutableImageMetadataRef v34 = v22;
        goto LABEL_24;
      }
    }
    else
    {
      CGMutableImageMetadataRef v22 = 0;
    }
    uint64_t v25 = 4294950305;
    goto LABEL_27;
  }
  return FigSignalErrorAt();
}

uint64_t _compressImageAsync(void *a1, const __CFDictionary *a2, opaqueCMSampleBuffer *a3, void *a4, uint64_t a5)
{
  uint64_t v10 = -1;
  uint64_t v7 = _compressImageInternal(a1, a2, a3, &v10);
  uint64_t v8 = v7;
  if (a4 && !v7) {
    *a4 = v10;
  }
  if (a5 && !v7) {
    (*(void (**)(uint64_t, void, void, uint64_t, void))(a5 + 16))(a5, 0, 0, v10, 0);
  }
  return v8;
}

uint64_t _compressAuxImageAsync(void *a1, uint64_t a2, unsigned int a3, const void *a4, const __CFDictionary *a5, opaqueCMSampleBuffer *a6, uint64_t *a7, uint64_t a8)
{
  uint64_t v13 = -1;
  uint64_t v10 = _compressAuxImageInternal(a1, a2, a3, a4, a5, a6, &v13);
  uint64_t v11 = v10;
  if (a7 && !v10) {
    *a7 = v13;
  }
  if (a8 && !v10) {
    (*(void (**)(uint64_t, void, uint64_t, uint64_t, void))(a8 + 16))(a8, 0, 2, v13, 0);
  }
  return v11;
}

uint64_t _compressThumbnailAsync(uint64_t a1, uint64_t a2, const __CFDictionary *a3, opaqueCMSampleBuffer *a4, uint64_t a5)
{
  uint64_t v6 = _compressThumbnailInternal(a1, a2, a3, a4);
  uint64_t v7 = v6;
  if (a5 && !v6) {
    (*(void (**)(uint64_t, void, uint64_t, void, void))(a5 + 16))(a5, 0, 1, 0, 0);
  }
  return v7;
}

uint64_t _parseContainer(uint64_t a1, const __CFDictionary *a2, uint64_t a3, void *a4)
{
  size_t v55 = 0;
  CGColorSpaceRef AllocSize = 0;
  CFAllocatorRef v8 = CFGetAllocator((CFTypeRef)a1);
  CFArrayRef v53 = 0;
  OSType v54 = 0;
  CFTypeRef cf = 0;
  CMBlockBufferRef blockBufferOut = 0;
  CFTypeRef v49 = 0;
  CFTypeRef v50 = 0;
  unsigned __int8 v48 = 0;
  if (a2)
  {
    CFTypeID v9 = CFGetTypeID(a4);
    if (v9 == IOSurfaceGetTypeID()
      && !CMPhotoCFDictionaryGetSizeIfPresent(a2, @"BackingIOSurfaceSourceSize", &AllocSize))
    {
      CGColorSpaceRef AllocSize = (CGColorSpaceRef)IOSurfaceGetAllocSize((IOSurfaceRef)a4);
    }
    CMPhotoCFDictionaryGetBooleanIfPresent(a2, @"IgnoreUnsupportedJPEGAuxiliaryImages", &v48);
    if (AllocSize)
    {
LABEL_13:
      ExifLocationFromJFIFByteStreauint64_t m = _newContainer(a1, a2);
      if (ExifLocationFromJFIFByteStream) {
        goto LABEL_101;
      }
      ExifLocationFromJFIFByteStreauint64_t m = CMPhotoCopyImageCountAndRangesFromJFIFByteStream(a3, 0, v48, &v55, &v54, (unsigned char *)(a1 + 377));
      if (ExifLocationFromJFIFByteStream) {
        goto LABEL_101;
      }
      if (v48 && v55 == 1)
      {
        if (*(unsigned char *)(a1 + 377)) {
          *(unsigned char *)(a1 + 376) = 1;
        }
      }
      else if (v55 >= 2)
      {
        if ((unint64_t)AllocSize >= v54[1]) {
          size_t v15 = v54[1];
        }
        else {
          size_t v15 = (size_t)AllocSize;
        }
        goto LABEL_25;
      }
      size_t v15 = (size_t)AllocSize;
LABEL_25:
      *(void *)(a1 + 384) = v15;
      ExifLocationFromJFIFByteStreauint64_t m = CMPhotoSampleBufferCreateFromSource(v8, (const __CFData *)a4, 0, v15, (void *)(a1 + 264), (char *)(a1 + 304));
      if (ExifLocationFromJFIFByteStream) {
        goto LABEL_101;
      }
      CFArrayRef v36 = (CMSampleBufferRef *)(a1 + 264);
      if (v55 >= 2)
      {
        CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
        uint64_t v17 = 2;
        size_t v18 = 1;
        while (1)
        {
          if (v53)
          {
            CFRelease(v53);
            CFArrayRef v53 = 0;
          }
          if (cf)
          {
            CFRelease(cf);
            CFTypeRef cf = 0;
          }
          char v47 = 0;
          ExifLocationFromJFIFByteStreauint64_t m = CMPhotoSampleBufferCreateFromSource(v8, (const __CFData *)a4, v54[v17], v54[v17 + 1], &v53, &v47);
          if (ExifLocationFromJFIFByteStream) {
            goto LABEL_101;
          }
          LODWORD(dataLength) = 0;
          if (!CMPhotoJFIFUtilitiesCreateAuxiliaryPropertiesFromStream(v8, a3, v54[v17], (int *)&dataLength, 0, &cf, 0))goto LABEL_46; {
          v57[0] = 0;
          }
          ImageInformationFromJFIFByteStreauint64_t m = CMPhotoGetImageInformationFromJFIFByteStream(a3, v54[v17], 0, 0, 0, 0, 0, v57);
          if (ImageInformationFromJFIFByteStream)
          {
            uint64_t v14 = ImageInformationFromJFIFByteStream;
          }
          else if (v57[0])
          {
            CFRelease(v57[0]);
            v57[0] = 0;
            LODWORD(dataLength) = 4;
            CFTypeRef cf = CFStringCreateWithCStringNoCopy(v8, "urn:iso:std:iso:ts:21496:-1", 0x8000100u, v16);
            uint64_t v14 = cf ? 0 : 4294950305;
          }
          else
          {
            uint64_t v14 = 4294950300;
          }
          if (!v14 || v48 == 0) {
            break;
          }
          *(unsigned char *)(a1 + 376) = 1;
LABEL_47:
          ++v18;
          v17 += 2;
          if (v18 >= v55) {
            goto LABEL_50;
          }
        }
        if (v14) {
          goto LABEL_85;
        }
LABEL_46:
        ExifLocationFromJFIFByteStreauint64_t m = _saveAuxImage(a1 + 240, v53, v47, 1, dataLength, 0, cf, 0, 0, 0);
        if (ExifLocationFromJFIFByteStream) {
          goto LABEL_101;
        }
        goto LABEL_47;
      }
LABEL_50:
      char v46 = 0;
      unint64_t v44 = 0;
      size_t v45 = 0;
      size_t v43 = 0;
      ExifLocationFromJFIFByteStreauint64_t m = CMPhotoGetExifLocationFromJFIFByteStream(a3, 0, &v46, &v45, &v43, &v44);
      if (ExifLocationFromJFIFByteStream) {
        goto LABEL_101;
      }
      if (v46)
      {
        char v47 = 0;
        v57[0] = 0;
        dataCFIndex Length = 0;
        CMBlockBufferRef DataBuffer = CMSampleBufferGetDataBuffer(*v36);
        if (!DataBuffer)
        {
LABEL_102:
          uint64_t v14 = 4294950304;
          goto LABEL_85;
        }
        CGMutableImageMetadataRef v22 = DataBuffer;
        ExifLocationFromJFIFByteStreauint64_t m = CMPhotoParseExifFromTIFF(DataBuffer, v43, v44, 0, 0, (BOOL *)&v47, (unint64_t)v57, (unint64_t)&dataLength, (char *)(a1 + 368));
        if (ExifLocationFromJFIFByteStream) {
          goto LABEL_101;
        }
        if (v47)
        {
          ExifLocationFromJFIFByteStreauint64_t m = CMBlockBufferCreateWithBufferReference(v8, v22, (size_t)v57[0], dataLength, 0, &blockBufferOut);
          if (ExifLocationFromJFIFByteStream) {
            goto LABEL_101;
          }
          ExifLocationFromJFIFByteStreauint64_t m = CMSampleBufferCreate(v8, blockBufferOut, 1u, 0, 0, 0, 1, 0, 0, 1, &dataLength, (CMSampleBufferRef *)(a1 + 280));
          if (ExifLocationFromJFIFByteStream) {
            goto LABEL_101;
          }
          *(unsigned char *)(a1 + 305) = *(unsigned char *)(a1 + 304);
        }
        ExifLocationFromJFIFByteStreauint64_t m = CMPhotoDataCreateFromSource(v8, v22, v45, v44, &v50, 0);
        if (ExifLocationFromJFIFByteStream)
        {
LABEL_101:
          uint64_t v14 = ExifLocationFromJFIFByteStream;
          goto LABEL_85;
        }
        CFTypeRef v23 = v50;
        if (v50) {
          CFTypeRef v23 = CFRetain(v50);
        }
        *(void *)(a1 + 32_Block_object_dispose(&STACK[0x280], 8) = v23;
        *(unsigned char *)(a1 + 320) = 1;
      }
      char v41 = 0;
      size_t v39 = 0;
      size_t v40 = 0;
      ExifLocationFromJFIFByteStreauint64_t m = CMPhotoGetXMPLocationFromJFIFByteStream(a3, 0, &v41, &v40, &v39);
      if (ExifLocationFromJFIFByteStream) {
        goto LABEL_101;
      }
      if (!v41) {
        goto LABEL_69;
      }
      CFDataRef v24 = CMSampleBufferGetDataBuffer(*v36);
      if (v24)
      {
        ExifLocationFromJFIFByteStreauint64_t m = CMPhotoDataCreateFromSource(v8, v24, v40, v39, &v49, 0);
        if (!ExifLocationFromJFIFByteStream)
        {
          CFTypeRef v25 = v49;
          if (v49) {
            CFTypeRef v25 = CFRetain(v49);
          }
          *(void *)(a1 + 336) = v25;
          *(unsigned char *)(a1 + 320) = 1;
LABEL_69:
          char v38 = 0;
          ExifLocationFromJFIFByteStreauint64_t m = CMPhotoCopyDebugMetadataFromJFIFByteStream((uint64_t)v8, a3, 0, &v38, 0, (CFDataRef *)(a1 + 344));
          if (!ExifLocationFromJFIFByteStream)
          {
            *(unsigned char *)(a1 + 320) |= v38;
            char v37 = 0;
            ExifLocationFromJFIFByteStreauint64_t m = CMPhotoCopyCustomMetadataFromJFIFByteStream((uint64_t)v8, a3, 0, &v37, 0, (void *)(a1 + 352));
            if (!ExifLocationFromJFIFByteStream)
            {
              *(unsigned char *)(a1 + 320) |= v37;
              uint64_t v26 = (CFTypeRef *)(a1 + 288);
              ExifLocationFromJFIFByteStreauint64_t m = CMPhotoCopyICCProfileFromJFIFByteStream((uint64_t)v8, a3, 0, 0, 0, (void *)(a1 + 288));
              if (!ExifLocationFromJFIFByteStream)
              {
                v57[0] = 0;
                if (*v26)
                {
                  CFTypeRef v27 = (CGColorSpace *)MEMORY[0x1AD10E420]();
                  CFArrayRef v28 = v27;
                  if (v27 && CGColorSpaceGetModel(v27) < kCGColorSpaceModelCMYK) {
                    goto LABEL_83;
                  }
                  if (*v26)
                  {
                    CFRelease(*v26);
                    *uint64_t v26 = 0;
                  }
                  if (!v28) {
                    goto LABEL_83;
                  }
                  CFRelease(v28);
                }
                else if (*(unsigned char *)(a1 + 368))
                {
                  if (!CGImageCreateColorSpaceFromExifOrData())
                  {
                    CGColorSpaceRef v30 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC98]);
                    if (v30)
                    {
                      CGColorSpaceRef v31 = v30;
                      char v32 = CGColorSpaceEqualToColorSpace();
                      CGColorSpaceRef v33 = v57[0];
                      if ((v32 & 1) == 0)
                      {
                        *uint64_t v26 = CGColorSpaceCopyICCData(v57[0]);
                        CGColorSpaceRef v33 = v57[0];
                      }
                      *(void *)(a1 + 296) = v33;
                      v57[0] = 0;
                      CFRelease(v31);
                    }
                    else
                    {
                      CFDataRef v34 = CGColorSpaceCopyICCData(v57[0]);
                      CGColorSpaceRef v35 = v57[0];
                      *(void *)(a1 + 28_Block_object_dispose(&STACK[0x280], 8) = v34;
                      *(void *)(a1 + 296) = v35;
                    }
                    goto LABEL_84;
                  }
                  CFArrayRef v28 = v57[0];
LABEL_83:
                  *(void *)(a1 + 296) = v28;
LABEL_84:
                  uint64_t v14 = 0;
                  goto LABEL_85;
                }
                CFArrayRef v28 = 0;
                goto LABEL_83;
              }
            }
          }
          goto LABEL_101;
        }
        goto LABEL_101;
      }
      goto LABEL_102;
    }
  }
  v57[0] = 0;
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  CFTypeID v12 = *(uint64_t (**)(uint64_t, void, CGColorSpaceRef *))(v11 + 24);
  if (!v12)
  {
    uint64_t v14 = 4294954514;
    goto LABEL_85;
  }
  ExifLocationFromJFIFByteStreauint64_t m = v12(a3, 0, v57);
  if (ExifLocationFromJFIFByteStream) {
    goto LABEL_101;
  }
  if (((unint64_t)v57[0] & 0x8000000000000000) == 0)
  {
    CGColorSpaceRef AllocSize = v57[0];
    goto LABEL_13;
  }
  uint64_t v14 = 4294950190;
LABEL_85:
  free(v54);
  if (v53) {
    CFRelease(v53);
  }
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (v50) {
    CFRelease(v50);
  }
  if (v49) {
    CFRelease(v49);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v14;
}

void _handleStripping(uint64_t a1, CFDictionaryRef theDict)
{
  __int16 v11 = 0;
  char v10 = 0;
  if (theDict)
  {
    CMPhotoCFDictionaryGetBooleanIfPresent(theDict, @"StripExistingMetadata", (unsigned char *)&v11 + 1);
    CMPhotoCFDictionaryGetBooleanIfPresent(theDict, @"StripExistingThumbnails", &v11);
    CMPhotoCFDictionaryGetBooleanIfPresent(theDict, @"StripExistingAuxiliaryImages", &v10);
  }
  CFIndex v4 = *(const void **)(a1 + 328);
  if (v4)
  {
    if (!HIBYTE(v11)) {
      goto LABEL_18;
    }
    *(unsigned char *)(a1 + 376) = 1;
    *(unsigned char *)(a1 + 320) = 0;
    CFRelease(v4);
    *(void *)(a1 + 32_Block_object_dispose(&STACK[0x280], 8) = 0;
    CFTypeRef v5 = *(const void **)(a1 + 336);
    if (!v5) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  CFTypeRef v5 = *(const void **)(a1 + 336);
  BOOL v8 = v5 || *(void *)(a1 + 344) || *(void *)(a1 + 352) != 0;
  if (!HIBYTE(v11) || !v8) {
    goto LABEL_18;
  }
  *(unsigned char *)(a1 + 376) = 1;
  *(unsigned char *)(a1 + 320) = 0;
  if (v5)
  {
LABEL_6:
    CFRelease(v5);
    *(void *)(a1 + 336) = 0;
  }
LABEL_7:
  uint64_t v6 = *(const void **)(a1 + 344);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 344) = 0;
  }
  uint64_t v7 = *(const void **)(a1 + 352);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(a1 + 352) = 0;
  }
LABEL_18:
  if (v10 && *(unsigned char *)(a1 + 377))
  {
    *(unsigned char *)(a1 + 376) = 1;
    _releaseAuxImages(a1 + 240);
  }
  if ((_BYTE)v11)
  {
    CFTypeID v9 = *(const void **)(a1 + 280);
    if (v9)
    {
      *(unsigned char *)(a1 + 376) = 1;
      CFRelease(v9);
      *(void *)(a1 + 280) = 0;
    }
  }
}

uint64_t _handleRewrite(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v4 = CFGetAllocator((CFTypeRef)a1);
  if (!*(unsigned char *)(a1 + 376)) {
    return 0;
  }
  CFAllocatorRef v5 = v4;
  __int16 v12 = -7453;
  int v11 = -471735840;
  v14[0] = xmmword_1E5E2FF78;
  v14[1] = *(_OWORD *)&off_1E5E2FF88;
  _OWORD v14[2] = xmmword_1E5E2FF98;
  v13[0] = 5;
  v13[1] = 6;
  unsigned char v13[2] = 29;
  v13[3] = 12;
  v13[4] = 12;
  v13[5] = 4;
  if (*(unsigned char *)(a1 + 377)) {
    int v6 = 6;
  }
  else {
    int v6 = 5;
  }
  CFTypeRef cf = 0;
  uint64_t v7 = CMPhotoJFIFCreateStrippedBufferFromByteStream(a2, 0, *(void *)(a1 + 384), v6, (uint64_t)&v11, v14, v13, (uint64_t)&cf);
  if (v7) {
    return v7;
  }
  uint64_t v8 = CMPhotoSampleBufferCreateFromSource(v5, (const __CFData *)cf, 0, 0, (void *)(a1 + 272), 0);
  if (cf) {
    CFRelease(cf);
  }
  return v8;
}

uint64_t _createDescriptionFromSession(uint64_t a1, CFMutableDictionaryRef *a2)
{
  CFAllocatorRef v4 = CFGetAllocator((CFTypeRef)a1);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return 4294950305;
  }
  CFMutableDictionaryRef v6 = Mutable;
  uint64_t v7 = CFArrayCreateMutable(v4, 0, MEMORY[0x1E4F1D510]);
  if (!v7)
  {
    uint64_t v15 = 0;
    CFMutableArrayRef v21 = 0;
    CFTypeRef cf = 0;
    uint64_t v13 = 0;
    CFTypeID v9 = 0;
    goto LABEL_77;
  }
  uint64_t v8 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFTypeID v9 = v8;
  if (!v8)
  {
    uint64_t v15 = 0;
    CFMutableArrayRef v21 = 0;
    CFTypeRef cf = 0;
    uint64_t v13 = 0;
    goto LABEL_77;
  }
  CFAllocatorRef allocator = v4;
  uint64_t v10 = CMPhotoCFDictionarySetInt(v8, @"ImageHandle", 0);
  if (v10
    || (uint64_t v10 = CMPhotoCFDictionarySetInt64(v9, @"ItemID", 1), v10)
    || (uint64_t v10 = CMPhotoCFDictionarySetInt(v9, @"CodecType", 1785750887), v10))
  {
    uint64_t v39 = v10;
    uint64_t v15 = 0;
    CFMutableArrayRef v21 = 0;
    CFTypeRef cf = 0;
    uint64_t v13 = 0;
    goto LABEL_68;
  }
  int v11 = *(const void **)(a1 + 296);
  if (v11) {
    CFDictionarySetValue(v9, @"ColorSpace", v11);
  }
  CFAllocatorRef v12 = v4;
  if (!*(void *)(a1 + 280))
  {
    size_t v43 = 0;
    uint64_t v15 = 0;
    uint64_t v18 = 2;
    goto LABEL_19;
  }
  uint64_t v13 = CFArrayCreateMutable(v4, 0, MEMORY[0x1E4F1D510]);
  if (!v13)
  {
    uint64_t v15 = 0;
    goto LABEL_76;
  }
  uint64_t v14 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v15 = v14;
  if (!v14)
  {
LABEL_76:
    CFMutableArrayRef v21 = 0;
    CFTypeRef cf = 0;
    goto LABEL_77;
  }
  uint64_t v16 = CMPhotoCFDictionarySetInt(v14, @"ImageHandle", 0);
  if (v16
    || (uint64_t v16 = CMPhotoCFDictionarySetInt64(v9, @"ItemID", 2), v16)
    || (uint64_t v16 = CMPhotoCFDictionarySetInt(v15, @"CodecType", 1785750887), v16))
  {
    uint64_t v39 = v16;
    CFTypeRef cf = v15;
    uint64_t v15 = 0;
    CFMutableArrayRef v21 = 0;
    goto LABEL_68;
  }
  uint64_t v17 = *(const void **)(a1 + 296);
  if (v17) {
    CFDictionarySetValue(v15, @"ColorSpace", v17);
  }
  CFArrayAppendValue(v13, v15);
  size_t v43 = v13;
  CFDictionarySetValue(v9, @"ThumbnailImage", v13);
  uint64_t v18 = 3;
  CFAllocatorRef v12 = v4;
LABEL_19:
  CFArrayRef v19 = *(const __CFArray **)(a1 + 312);
  CFTypeRef cf = v15;
  if (v19 && CFArrayGetCount(v19) >= 1)
  {
    CFMutableArrayRef v20 = CFArrayCreateMutable(v12, 0, MEMORY[0x1E4F1D510]);
    if (v20)
    {
      char v41 = a2;
      CFTypeID v42 = v6;
      CFMutableArrayRef v21 = v20;
      uint64_t v15 = 0;
      CFIndex v22 = 0;
      CFTypeRef v23 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
      CFDataRef v24 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
      while (1)
      {
        CFArrayRef Count = *(const __CFArray **)(a1 + 312);
        if (Count) {
          CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
        }
        if (v22 >= (uint64_t)Count)
        {
          CFDictionarySetValue(v9, @"Auxiliary", v21);
          CFMutableDictionaryRef v6 = v42;
          a2 = v41;
          goto LABEL_35;
        }
        if (v15) {
          CFRelease(v15);
        }
        uint64_t v26 = CFDictionaryCreateMutable(v12, 0, v23, v24);
        uint64_t v15 = v26;
        if (!v26)
        {
          uint64_t v39 = 4294950305;
          goto LABEL_66;
        }
        uint64_t v27 = CMPhotoCFDictionarySetInt(v26, @"ImageHandle", v22);
        if (v27 || (uint64_t v27 = CMPhotoCFDictionarySetInt64(v9, @"ItemID", v18 + v22), v27))
        {
          uint64_t v39 = v27;
          goto LABEL_66;
        }
        CFArrayRef v28 = (const void *)*((void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 312), v22) + 3);
        if (!v28) {
          break;
        }
        CFDictionarySetValue(v15, @"AuxiliaryImageType", v28);
        CFArrayAppendValue(v21, v15);
        ++v22;
        CFAllocatorRef v12 = allocator;
      }
      uint64_t v39 = 4294950194;
LABEL_66:
      CFMutableDictionaryRef v6 = v42;
    }
    else
    {
      uint64_t v15 = 0;
      CFMutableArrayRef v21 = 0;
      uint64_t v39 = 4294950305;
    }
    uint64_t v13 = v43;
LABEL_68:
    CFRelease(v6);
    if (!v7) {
      goto LABEL_52;
    }
    goto LABEL_51;
  }
  CFMutableArrayRef v21 = 0;
  uint64_t v15 = 0;
LABEL_35:
  uint64_t v13 = v43;
  if (*(void *)(a1 + 328))
  {
    CFArrayRef v29 = CFArrayCreate(v12, (const void **)(a1 + 328), 1, MEMORY[0x1E4F1D510]);
    if (!v29) {
      goto LABEL_77;
    }
    CFArrayRef v30 = v29;
    FigCFDictionarySetValue();
    CFRelease(v30);
  }
  if (*(void *)(a1 + 336))
  {
    CFArrayRef v31 = CFArrayCreate(v12, (const void **)(a1 + 336), 1, MEMORY[0x1E4F1D510]);
    if (!v31) {
      goto LABEL_77;
    }
    CFArrayRef v32 = v31;
    FigCFDictionarySetValue();
    CFRelease(v32);
  }
  if (*(void *)(a1 + 344))
  {
    CFArrayRef v33 = CFArrayCreate(v12, (const void **)(a1 + 344), 1, MEMORY[0x1E4F1D510]);
    if (!v33) {
      goto LABEL_77;
    }
    CFArrayRef v34 = v33;
    FigCFDictionarySetValue();
    CFRelease(v34);
  }
  CFDataRef v35 = *(const __CFData **)(a1 + 352);
  if (!v35) {
    goto LABEL_49;
  }
  values = 0;
  uint64_t v36 = CMPhotoJFIFCopyCustomMetadataFromCFData(v35, (CFTypeRef *)&values);
  if (v36)
  {
    uint64_t v39 = v36;
    goto LABEL_68;
  }
  CFArrayRef v37 = CFArrayCreate(allocator, (const void **)&values, 1, MEMORY[0x1E4F1D510]);
  if (!v37)
  {
LABEL_77:
    uint64_t v39 = 4294950305;
    goto LABEL_68;
  }
  CFArrayRef v38 = v37;
  FigCFDictionarySetValue();
  CFRelease(v38);
  if (values) {
    CFRelease(values);
  }
LABEL_49:
  CFArrayAppendValue(v7, v9);
  CFDictionaryAddValue(v6, @"ImageList", v7);
  uint64_t v39 = CMPhotoCFDictionarySetInt(v6, @"PrimaryImageHandle", 0);
  if (v39) {
    goto LABEL_68;
  }
  *a2 = v6;
LABEL_51:
  CFRelease(v7);
LABEL_52:
  if (v9) {
    CFRelease(v9);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v21) {
    CFRelease(v21);
  }
  if (v15) {
    CFRelease(v15);
  }
  return v39;
}

uint64_t _saveAuxImage(uint64_t a1, const void *a2, char a3, char a4, int a5, const void *a6, const void *a7, const void *a8, const void *a9, const void *a10)
{
  CFTypeRef value = 0;
  if (*(void *)(a1 + 72)
    || (CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0),
        (*(void *)(a1 + 72) = Mutable) != 0))
  {
    uint64_t v19 = CMPhotoCompressedAuxImageStorageCreate(a2, a3, a6, a7, a8, a4, a5, a9, a10, &value);
    CFMutableArrayRef v20 = (const void **)value;
    if (!v19)
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 72), value);
      CFMutableArrayRef v20 = 0;
      CFTypeRef value = 0;
    }
  }
  else
  {
    CFMutableArrayRef v20 = 0;
    uint64_t v19 = 4294950305;
  }
  CMPhotoCompressedAuxImageStorageDestroy(v20);
  return v19;
}

uint64_t CMByteStreamWrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void))(v7 + 16);
  if (!v8) {
    return 4294954514;
  }
  return v8(a1, a2, 0, a3, 0);
}

uint64_t _compressThumbnailInternal(uint64_t a1, uint64_t a2, CFDictionaryRef theDict, opaqueCMSampleBuffer *a4)
{
  if (!theDict || (int v8 = CFDictionaryContainsKey(theDict, @"DryRun")) == 0)
  {
    if (a2 || !*(void *)(a1 + 264) || *(void *)(a1 + 280))
    {
      return FigSignalErrorAt();
    }
    int v8 = 0;
  }
  v14[0] = 0;
  v14[1] = 0;
  Sourceuint64_t Dimensions = CMPhotoGetSourceDimensions(a4, theDict, v14);
  if (SourceDimensions) {
    return SourceDimensions;
  }
  int v11 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  uint64_t v12 = _encodeSource((const void *)a1, 1, 0, 0, theDict, a4, 0);
  if (*v11 == 1) {
    kdebug_trace();
  }
  if (!(v8 | v12))
  {
    if (CMSampleBufferGetTotalSampleSize(*(CMSampleBufferRef *)(a1 + 280)) < 0x10000)
    {
      return 0;
    }
    else
    {
      uint64_t v12 = FigSignalErrorAt();
      uint64_t v13 = *(const void **)(a1 + 280);
      if (v13)
      {
        CFRelease(v13);
        *(void *)(a1 + 280) = 0;
      }
    }
  }
  return v12;
}

uint64_t _compressAuxImageInternal(void *a1, uint64_t a2, unsigned int a3, const void *a4, CFDictionaryRef theDict, opaqueCMSampleBuffer *a6, void *a7)
{
  if ((theDict && CFDictionaryContainsKey(theDict, @"DryRun") || !a2 && a1[33])
    && a3 <= 5
    && ((1 << a3) & 0x36) != 0)
  {
    v20[0] = 0;
    v20[1] = 0;
    Sourceuint64_t Dimensions = CMPhotoGetSourceDimensions(a6, theDict, v20);
    if (SourceDimensions) {
      return SourceDimensions;
    }
    uint64_t v16 = (_DWORD *)MEMORY[0x1E4F1EBA8];
    if (*MEMORY[0x1E4F1EBA8] == 1) {
      kdebug_trace();
    }
    uint64_t v17 = _encodeSource(a1, 2, a3, a4, theDict, a6, 0);
    if (*v16 == 1) {
      kdebug_trace();
    }
    if (!v17)
    {
      CFArrayRef v18 = (const __CFArray *)a1[39];
      if (v18 && (CFIndex Count = CFArrayGetCount(v18), Count >= 1))
      {
        uint64_t v17 = 0;
        if (a7) {
          *a7 = Count - 1;
        }
      }
      else
      {
        return 4294950304;
      }
    }
    return v17;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t _openContainerWithModificationCallback_0(const void *a1, const __CFDictionary *a2, uint64_t a3, uint64_t a4, __CFDictionary **a5, uint64_t (*a6)(CFTypeRef, uint64_t), uint64_t a7)
{
  v84[4] = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v13 = CFGetAllocator(a1);
  CFTypeRef v70 = 0;
  CFTypeRef cf = 0;
  uint64_t v14 = _newContainer_0((uint64_t)a1, a2);
  if (v14) {
    return v14;
  }
  ContainerAndCopyDescriptiouint64_t n = _readContainerAndCopyDescription((uint64_t)a1, a3, (__CFDictionary **)&cf);
  if (ContainerAndCopyDescription) {
    goto LABEL_71;
  }
  ContainerAndCopyDescriptiouint64_t n = CMPhotoPropertyListCopyWithMutableContainers(v13, cf, (__CFArray **)&v70);
  if (ContainerAndCopyDescription) {
    goto LABEL_71;
  }
  ContainerAndCopyDescriptiouint64_t n = a6(v70, a7);
  if (ContainerAndCopyDescription) {
    goto LABEL_71;
  }
  CFDictionaryRef v16 = (const __CFDictionary *)v70;
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)cf, @"ImageList");
  CFDataRef v67 = a5;
  if (Value
    && (CFArrayRef v18 = Value, v19 = CFGetTypeID(Value), v19 == CFArrayGetTypeID())
    && (CFArrayRef v20 = (const __CFArray *)CFDictionaryGetValue(v16, @"ImageList")) != 0
    && (CFArrayRef v21 = v20, v22 = CFGetTypeID(v20), v22 == CFArrayGetTypeID()))
  {
    if (CFArrayGetCount(v21) >= 1)
    {
      CFIndex v23 = 0;
      CFArrayRef theArray = v21;
      while (1)
      {
        LODWORD(v75[0]) = 0;
        LODWORD(v80) = 0;
        LODWORD(v84[0]) = 0;
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v21, v23);
        if (!CMPhotoCFDictionaryGetIntIfPresent(ValueAtIndex, @"ImageHandle", v75)) {
          goto LABEL_40;
        }
        CFDictionaryRef v25 = (const __CFDictionary *)CFArrayGetValueAtIndex(v18, v23);
        if (!CMPhotoCFDictionaryGetIntIfPresent(v25, @"ImageHandle", &v80)) {
          goto LABEL_40;
        }
        CMPhotoCFDictionaryGetInt32IfPresent(v25, @"CodecType", v84);
        if (v80 != LODWORD(v75[0]))
        {
          if (CFArrayGetCount(v18) >= 1)
          {
            CFIndex v42 = 0;
            do
            {
              CFDictionaryRef v25 = (const __CFDictionary *)CFArrayGetValueAtIndex(v18, v42);
              if (!CMPhotoCFDictionaryGetIntIfPresent(v25, @"ImageHandle", &v80)) {
                break;
              }
              if (v80 == LODWORD(v75[0])) {
                goto LABEL_14;
              }
              ++v42;
            }
            while (v42 < CFArrayGetCount(v18));
          }
          goto LABEL_40;
        }
LABEL_14:
        LODWORD(v77) = -1;
        int v79 = -1;
        int IntIfPresent = CMPhotoCFDictionaryGetIntIfPresent(v25, @"Orientation", &v77);
        int v27 = CMPhotoCFDictionaryGetIntIfPresent(ValueAtIndex, @"Orientation", &v79);
        int v28 = v27;
        int v29 = v77;
        int v30 = v79;
        BOOL v31 = !IntIfPresent || IntIfPresent == v27;
        BOOL v32 = !v31;
        CFArrayRef v33 = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, @"ThumbnailImage");
        CFArrayRef v34 = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, @"Auxiliary");
        if (v32 || v29 != v30) {
          break;
        }
        if (LODWORD(v84[0]) != 1953325424)
        {
          __int16 v74 = 0;
          int v78 = v79;
          ContainerAndCopyDescriptiouint64_t n = _checkOrientationForImages(v33, v79, v28, (BOOL *)&v74 + 1, (BOOL *)&v74, &v78);
          if (ContainerAndCopyDescription) {
            goto LABEL_71;
          }
          __int16 v73 = 0;
          int v72 = v79;
          ContainerAndCopyDescriptiouint64_t n = _checkOrientationForImages(v34, v79, v28, (BOOL *)&v73 + 1, (BOOL *)&v73, &v72);
          if (ContainerAndCopyDescription) {
            goto LABEL_71;
          }
          if (v74 || v73)
          {
            CFDataRef v35 = &v78;
            if (!HIBYTE(v74)) {
              CFDataRef v35 = &v72;
            }
            int v36 = *v35;
            BOOL v37 = (HIBYTE(v74) | HIBYTE(v73)) != 0;
            BOOL v38 = (v74 | v73) != 0;
            uint64_t v39 = ValueAtIndex;
            CFArrayRef v40 = v33;
            CFArrayRef v41 = v34;
LABEL_37:
            ContainerAndCopyDescriptiouint64_t n = _updateOrRemoveOrientationForImages(v39, v40, v41, v36, v37, v38);
            if (ContainerAndCopyDescription) {
              goto LABEL_71;
            }
          }
        }
        ++v23;
        CFArrayRef v21 = theArray;
        if (v23 >= CFArrayGetCount(theArray)) {
          goto LABEL_41;
        }
      }
      BOOL v37 = v29 != v30;
      int v36 = v79;
      uint64_t v39 = 0;
      CFArrayRef v40 = v33;
      CFArrayRef v41 = v34;
      BOOL v38 = v32;
      goto LABEL_37;
    }
  }
  else
  {
LABEL_40:
    uint64_t v43 = FigSignalErrorAt();
    if (v43) {
      goto LABEL_72;
    }
  }
LABEL_41:
  CFDictionaryRef v45 = (const __CFDictionary *)v70;
  CFDictionaryRef v44 = (const __CFDictionary *)cf;
  uint64_t v80 = 0;
  long long v81 = &v80;
  uint64_t v82 = 0x2000000000;
  int v83 = 0;
  CFArrayRef v46 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v70, @"GroupList");
  if (v46)
  {
    CFArrayRef v47 = v46;
    if (CFArrayGetCount(v46) >= 1)
    {
      unsigned __int8 v48 = CFDictionaryGetValue(v44, @"ImageList");
      CFTypeRef v49 = CFDictionaryGetValue(v45, @"ImageList");
      if (v48)
      {
        CFTypeRef v50 = v49;
        CFTypeID v51 = CFGetTypeID(v48);
        if (v51 == CFArrayGetTypeID())
        {
          if (v50)
          {
            CFTypeID v52 = CFGetTypeID(v50);
            if (v52 == CFArrayGetTypeID())
            {
              if (CFArrayGetCount(v47) < 1) {
                goto LABEL_68;
              }
              uint64_t v53 = 0;
              uint64_t v54 = *MEMORY[0x1E4F1D260];
              CFArrayRef v66 = v47;
              while (1)
              {
                uint64_t v69 = v53;
                CFDictionaryRef v55 = (const __CFDictionary *)FigCFArrayGetValueAtIndex();
                if (!v55) {
                  break;
                }
                CFDictionaryRef v56 = v55;
                CFTypeID v57 = CFGetTypeID(v55);
                if (v57 != CFDictionaryGetTypeID()) {
                  break;
                }
                int v79 = 0;
                if (!CMPhotoCFDictionaryGetInt32IfPresent(v56, @"GroupType", &v79)) {
                  break;
                }
                if (v79 == 1634497650)
                {
                  CFArrayRef v58 = (const __CFArray *)FigCFDictionaryGetValue();
                  if (v58)
                  {
                    CFArrayRef v59 = v58;
                    if (CFArrayGetCount(v58) >= 2)
                    {
                      uint64_t v60 = 0;
                      v84[0] = @"EXIFMetadata";
                      v84[1] = @"XMPMetadata";
                      CFTypeRef v84[2] = @"DebugMetadata";
                      v84[3] = @"CustomMetadata";
                      while (1)
                      {
                        CFMutableDictionaryRef v61 = (const void *)v84[v60];
                        if (CFArrayGetCount(v59) >= 1) {
                          break;
                        }
LABEL_63:
                        if (++v60 == 4)
                        {
                          CFArrayRef v47 = v66;
                          goto LABEL_65;
                        }
                      }
                      uint64_t v62 = 0;
                      while (1)
                      {
                        int v78 = -1;
                        CFDictionaryRef v63 = (const __CFDictionary *)FigCFArrayGetValueAtIndex();
                        if (!CMPhotoCFDictionaryGetInt32IfPresent(v63, @"ImageHandle", &v78)) {
                          break;
                        }
                        uint64_t v77 = v54;
                        int hasMetadataChangedForImageHandle = _hasMetadataChangedForImageHandle((const __CFArray *)v48, (const __CFArray *)v50, v78, v61, &v77);
                        *((_DWORD *)v81 + 6) = hasMetadataChangedForImageHandle;
                        if (hasMetadataChangedForImageHandle) {
                          goto LABEL_68;
                        }
                        if (v77 != v54)
                        {
                          v75[0] = MEMORY[0x1E4F143A8];
                          v75[1] = *(void *)"";
                          v75[2] = ___propagateMetadataChange_block_invoke;
                          v75[3] = &unk_1E5E2FFD8;
                          int v76 = v78;
                          v75[4] = &v80;
                          v75[5] = v48;
                          v75[6] = v50;
                          v75[7] = v61;
                          v75[8] = v77;
                          FigCFArrayApplyBlock();
                          if (*((_DWORD *)v81 + 6)) {
                            goto LABEL_68;
                          }
                        }
                        if (CFArrayGetCount(v59) <= ++v62) {
                          goto LABEL_63;
                        }
                      }
                      *((_DWORD *)v81 + 6) = -16990;
                      goto LABEL_68;
                    }
                  }
                }
LABEL_65:
                uint64_t v53 = v69 + 1;
                if (v69 + 1 >= CFArrayGetCount(v47)) {
                  goto LABEL_68;
                }
              }
            }
          }
        }
      }
      *((_DWORD *)v81 + 6) = FigSignalErrorAt();
    }
  }
LABEL_68:
  uint64_t v43 = *((unsigned int *)v81 + 6);
  _Block_object_dispose(&v80, 8);
  if (!v43)
  {
    if (CMPhotoCompressionSessionCheckForIllegalModification((const __CFDictionary *)cf, (const __CFDictionary *)v70))ContainerAndCopyDescriptiouint64_t n = _initContainerFromDescription(a1, (const __CFDictionary *)v70, v67); {
    else
    }
      ContainerAndCopyDescriptiouint64_t n = FigSignalErrorAt();
LABEL_71:
    uint64_t v43 = ContainerAndCopyDescription;
  }
LABEL_72:
  if (cf) {
    CFRelease(cf);
  }
  if (v70) {
    CFRelease(v70);
  }
  return v43;
}

uint64_t _compressThumbnail_0(uint64_t a1, CFIndex a2, const __CFDictionary *a3, opaqueCMSampleBuffer *a4)
{
  return _compressThumbnailInternal_0(a1, a2, a3, a4, 0, 0);
}

uint64_t _compressAuxImage_1(uint64_t a1, CFIndex a2, unsigned int a3, uint64_t a4, const __CFDictionary *a5, opaqueCMSampleBuffer *a6, CFIndex *a7)
{
  return _compressAuxImageInternal_0(a1, a2, a3, a4, a5, a6, 0, a7, 0);
}

uint64_t _addCompressedImage(uint64_t a1, const __CFDictionary *a2, const void *a3, uint64_t a4)
{
  uint64_t result = _copyMainAndAuxImageSamplesIfNeeded(a1);
  if (!result) {
    return _addCompressedX(a1, a2, a3, 0, 0, 0, 0, 0, 0, a4);
  }
  return result;
}

uint64_t _addCompressedThumbnail(uint64_t a1, CFIndex a2, const __CFDictionary *a3, const void *a4)
{
  uint64_t result = _copyMainAndAuxImageSamplesIfNeeded(a1);
  if (!result) {
    return _addCompressedX(a1, a3, a4, 1, a2, 0, 0, 0, 0, 0);
  }
  return result;
}

uint64_t _addCompressedAux(uint64_t a1, CFIndex a2, int a3, const void *a4, uint64_t a5, const __CFDictionary *a6, const __CFDictionary *a7, const void *a8)
{
  uint64_t result = _copyMainAndAuxImageSamplesIfNeeded(a1);
  if (!result) {
    return _addCompressedX(a1, a7, a8, 2, a2, a3, a4, a5, a6, 0);
  }
  return result;
}

uint64_t _addCompressedMovie(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v6 = _copyMainAndAuxImageSamplesIfNeeded(a1);
  if (v6) {
    return v6;
  }
  if (a3)
  {
    CFTypeID v7 = CFGetTypeID(a3);
    if (v7 == CFURLGetTypeID())
    {
      if (*(unsigned char *)(a1 + 104))
      {
        uint64_t v8 = FigSignalErrorAt();
      }
      else
      {
        uint64_t v8 = CMByteStreamCreateForFileURL();
        if (!v8)
        {
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(*(CFAllocatorRef *)(a1 + 96), 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          if (Mutable)
          {
            if (CMPhotoHEIFUtilitiesByteStreamHasMoovAtom())
            {
              FigCFDictionarySetValue();
              uint64_t v10 = FigFormatReaderCreateForStreamReturningMatchingContainerLabel();
              if (!v10) {
                uint64_t v10 = CMPhotoHEIFFileWriterAddCompressedMovie(*(void *)(a1 + 88), a2, 0);
              }
              uint64_t v11 = v10;
            }
            else
            {
              uint64_t v11 = 4294950194;
            }
          }
          else
          {
            uint64_t v11 = 4294950305;
          }
          goto LABEL_11;
        }
      }
      uint64_t v11 = v8;
      CFMutableDictionaryRef Mutable = 0;
LABEL_11:
      if (Mutable) {
        CFRelease(Mutable);
      }
      return v11;
    }
  }
  return FigSignalErrorAt();
}

uint64_t _addXMP_0(uint64_t a1, CFIndex a2, CFDictionaryRef theDict, CFTypeRef a4)
{
  CFTypeRef cf = 0;
  if (*(unsigned char *)(a1 + 104))
  {
    uint64_t v12 = FigSignalErrorAt();
    goto LABEL_10;
  }
  if (!theDict)
  {
LABEL_8:
    uint64_t v8 = 0;
    goto LABEL_9;
  }
  CFArrayRef Value = CFDictionaryGetValue(theDict, @"UseXMPContentEncoding");
  uint64_t v8 = (uint64_t)Value;
  if (!Value)
  {
LABEL_9:
    uint64_t v12 = CMPhotoHEIFFileWriterAddMetadataToImage(*(void *)(a1 + 88), 0, a2, 1, a4, 0, v8, 0);
LABEL_10:
    uint64_t v11 = v12;
    goto LABEL_11;
  }
  CFTypeID v9 = CFGetTypeID(Value);
  if (v9 == CFStringGetTypeID())
  {
    uint64_t v10 = CMPhotoCompressDataWithContentEncoding(*(const __CFAllocator **)(a1 + 96), (CFDataRef)a4, v8, (__CFData **)&cf);
    if (v10 != -17106)
    {
      uint64_t v11 = v10;
      if (v10) {
        goto LABEL_11;
      }
      a4 = cf;
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  uint64_t v11 = 4294950306;
LABEL_11:
  if (cf) {
    CFRelease(cf);
  }
  return v11;
}

uint64_t _addDebugMetadata_0(uint64_t a1, CFIndex a2, uint64_t a3, const void *a4)
{
  if (*(unsigned char *)(a1 + 104)) {
    return FigSignalErrorAt();
  }
  else {
    return CMPhotoHEIFFileWriterAddMetadataToImage(*(void *)(a1 + 88), 0, a2, 2, a4, 0, 0, 0);
  }
}

uint64_t _addCustomMetadata_0(uint64_t a1, CFIndex a2, uint64_t a3, const void *a4)
{
  if (*(unsigned char *)(a1 + 104)) {
    return FigSignalErrorAt();
  }
  else {
    return CMPhotoHEIFFileWriterAddMetadataToImage(*(void *)(a1 + 88), 0, a2, 4, a4, 0, 0, 0);
  }
}

uint64_t _addMetadataFromImageProperties_0(uint64_t *a1, CFIndex a2, uint64_t a3, const __CFDictionary *a4)
{
  CFAllocatorRef v7 = CFGetAllocator(a1);
  uint64_t v8 = a1 + 11;
  CFTypeRef v26 = 0;
  CFTypeRef cf = 0;
  int v25 = 1;
  CFTypeID v9 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  if (*((unsigned char *)a1 + 104))
  {
    uint64_t PropertiesForImage = FigSignalErrorAt();
LABEL_38:
    uint64_t v17 = PropertiesForImage;
    CFTypeRef v12 = 0;
    goto LABEL_28;
  }
  long long v24 = 0uLL;
  uint64_t PropertiesForImage = CMPhotoHEIFFileWriterGetPropertiesForImage(*v8, a2, &v24, 0);
  if (PropertiesForImage) {
    goto LABEL_38;
  }
  uint64_t PropertiesForImage = CMPhotoImagePropertiesCreateDataRepresentation(v7, v24, *((uint64_t *)&v24 + 1));
  if (PropertiesForImage) {
    goto LABEL_38;
  }
  CFArrayRef Value = CFDictionaryGetValue(a4, @"iOS_Debug");
  if (Value) {
    CFTypeRef v12 = CFRetain(Value);
  }
  else {
    CFTypeRef v12 = 0;
  }
  int IntIfPresent = CMPhotoCFDictionaryGetIntIfPresent(a4, (const void *)*MEMORY[0x1E4F2FCA0], &v25);
  if (!IntIfPresent)
  {
    CFDictionaryRef v14 = (const __CFDictionary *)CFDictionaryGetValue(a4, (const void *)*MEMORY[0x1E4F2FD40]);
    if (v14) {
      int IntIfPresent = CMPhotoCFDictionaryGetIntIfPresent(v14, (const void *)*MEMORY[0x1E4F2FD70], &v25);
    }
    else {
      int IntIfPresent = 0;
    }
  }
  int v23 = 0;
  unsigned __int8 v22 = 0;
  int v21 = -1;
  unsigned __int8 v20 = 0;
  uint64_t OrientationTransformsForImage = CMPhotoHEIFFileWriterGetOrientationTransformsForImage(*v8, a2, &v22, &v23, &v20, &v21);
  if (OrientationTransformsForImage) {
    goto LABEL_26;
  }
  if (IntIfPresent && v22 | v20)
  {
    int v19 = 1;
    uint64_t OrientationTransformsForImage = CMPhotoExifOrientationFromHEIFRotationCCWAndMirroring(v23, v21, &v19);
    if (OrientationTransformsForImage)
    {
LABEL_26:
      uint64_t v17 = OrientationTransformsForImage;
      goto LABEL_28;
    }
    if (v19 != v25)
    {
      uint64_t OrientationTransformsForImage = FigSignalErrorAt();
      goto LABEL_26;
    }
  }
  if (cf)
  {
    uint64_t OrientationTransformsForImage = _addExifInternal((uint64_t)a1, a2, 0, (const __CFData *)cf);
    if (OrientationTransformsForImage) {
      goto LABEL_26;
    }
  }
  if (!v26)
  {
    if (!v12)
    {
      uint64_t v17 = 0;
      goto LABEL_28;
    }
    goto LABEL_25;
  }
  uint64_t v17 = _addXMP_0((uint64_t)a1, a2, 0, v26);
  if (!v17 && v12)
  {
LABEL_25:
    uint64_t OrientationTransformsForImage = _addDebugMetadata_0((uint64_t)a1, a2, v16, v12);
    goto LABEL_26;
  }
LABEL_28:
  if (cf) {
    CFRelease(cf);
  }
  if (v26) {
    CFRelease(v26);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (*v9 == 1) {
    kdebug_trace();
  }
  return v17;
}

uint64_t _addAuxImageMetadata_0(uint64_t a1, CFIndex a2, CGImageMetadataRef metadata)
{
  CFTypeRef cf = 0;
  uint64_t XMPData = CMPhotoAuxiliaryImageMetadataCreateXMPData(*(void *)(a1 + 96), metadata, 0, 4, 0, (CFDataRef *)&cf);
  if (!XMPData)
  {
    CFArrayRef v8 = 0;
    uint64_t XMPData = CMPhotoHEIFFileWriterGetMetadataCount(*(void *)(a1 + 88), a2, &v8);
    if (!XMPData)
    {
      if (v8) {
        uint64_t XMPData = FigSignalErrorAt();
      }
      else {
        uint64_t XMPData = CMPhotoHEIFFileWriterAddMetadataToImage(*(void *)(a1 + 88), 0, a2, 1, cf, 0, 0, 0);
      }
    }
  }
  uint64_t v6 = XMPData;
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

uint64_t _startImageSequence(uint64_t a1, uint64_t a2, void *a3)
{
  if (!*(unsigned char *)(a1 + 104))
  {
    CFAllocatorRef v4 = (uint64_t *)(a1 + 48);
    if (!*(void *)(a1 + 48) && !*(void *)(a1 + 56))
    {
      if (*MEMORY[0x1E4F1EBA8] == 1) {
        kdebug_trace();
      }
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(*(CFAllocatorRef *)(a1 + 96), 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (!Mutable) {
        return 4294950305;
      }
      CFArrayRef v8 = Mutable;
      uint64_t v9 = CMPhotoCFDictionarySetInt(Mutable, @"MaxSimultaneousCompressionSessions", 3);
      if (!v9)
      {
        uint64_t v9 = CMPhotoCFDictionarySetInt64(v8, @"IdleTimeoutMilliseconds", 0);
        if (!v9)
        {
          uint64_t v9 = CMPhotoCodecSessionPoolCreate(*(const __CFAllocator **)(a1 + 96), v8, v4);
          if (!v9)
          {
            CFMutableDictionaryRef v10 = CFDictionaryCreateMutable(*(CFAllocatorRef *)(a1 + 96), 0, MEMORY[0x1E4F1D530], 0);
            *(void *)(a1 + 56) = v10;
            if (!v10)
            {
              uint64_t v11 = 4294950305;
              goto LABEL_13;
            }
            uint64_t v9 = CMPhotoHEIFFileWriterAddSequence(*(void *)(a1 + 88), a2, a3);
          }
        }
      }
      uint64_t v11 = v9;
LABEL_13:
      CFRelease(v8);
      return v11;
    }
  }
  return FigSignalErrorAt();
}

uint64_t _addImageToSequence(uint64_t a1, CFIndex a2, uint64_t a3, CFDictionaryRef theDict, opaqueCMSampleBuffer *a5, CFIndex *a6)
{
  if (!*(unsigned char *)(a1 + 104))
  {
    if (theDict) {
      int v12 = CFDictionaryContainsKey(theDict, @"IncludeAlphaAuxiliaryImageWithOptions");
    }
    else {
      int v12 = 0;
    }
    v24[0] = 0;
    v24[1] = 0;
    Sourceuint64_t Dimensions = CMPhotoGetSourceDimensions(a5, theDict, v24);
    if (SourceDimensions) {
      return SourceDimensions;
    }
    Sourceuint64_t Dimensions = _copyMainAndAuxImageSamplesIfNeeded(a1);
    if (SourceDimensions) {
      return SourceDimensions;
    }
    CFDictionaryRef v14 = (_DWORD *)MEMORY[0x1E4F1EBA8];
    int v15 = *MEMORY[0x1E4F1EBA8];
    if (!v12)
    {
      if (v15 == 1) {
        kdebug_trace();
      }
      blocint k = *(_OWORD *)a3;
      int v28 = *(uint64_t (**)(uint64_t))(a3 + 16);
      uint64_t v19 = _compressX(a1, theDict, a5, 0, 0, 0, 0, 1, a2, &block, 0, 0, a6, 0);
      if (!v19 && *v14 == 1)
      {
        kdebug_trace();
        return 0;
      }
      return v19;
    }
    if (v15 == 1) {
      kdebug_trace();
    }
    long long v22 = *(_OWORD *)a3;
    uint64_t v23 = *(void *)(a3 + 16);
    uint64_t v37 = 0;
    BOOL v38 = &v37;
    uint64_t v39 = 0x2000000000;
    int v40 = 0;
    v36[0] = 0;
    v36[1] = 0;
    uint64_t v16 = CMPhotoGetSourceDimensions(a5, theDict, v36);
    if (v16)
    {
      uint64_t v19 = v16;
      CFArrayRef v18 = 0;
    }
    else
    {
      *(void *)(a1 + 224) = FigSemaphoreCreate();
      *(void *)(a1 + 232) = -1;
      uint64_t v17 = dispatch_queue_create("com.apple.coremedia.asyncauxiliary", 0);
      CFArrayRef v18 = v17;
      if (v17)
      {
        *(void *)&blocint k = MEMORY[0x1E4F143A8];
        *((void *)&block + 1) = *(void *)"";
        int v28 = ___compressMainWithAuxiliaryAsync_block_invoke;
        int v29 = &unk_1E5E300F8;
        int v30 = &v37;
        CFDictionaryRef v31 = theDict;
        BOOL v32 = a5;
        uint64_t v33 = a1;
        uint64_t v34 = a1 + 88;
        int v35 = 0;
        dispatch_async(v17, &block);
        if (*v14 == 1) {
          kdebug_trace();
        }
        long long v25 = v22;
        uint64_t v26 = v23;
        uint64_t v19 = _compressX(a1, theDict, a5, 0, 0, 0, 0, 1, a2, &v25, 0, 0, a6, 0);
        if (*v14 != 1) {
          goto LABEL_19;
        }
        kdebug_trace();
      }
      else
      {
        uint64_t v19 = 4294950194;
      }
    }
    if (*v14 == 1) {
      kdebug_trace();
    }
    if (!v18)
    {
      char v20 = 1;
LABEL_20:
      FigSemaphoreDestroy();
      if (*v14 == 1)
      {
        kdebug_trace();
        if (v20)
        {
LABEL_22:
          if (v19) {
            goto LABEL_23;
          }
          goto LABEL_33;
        }
      }
      else if (v20)
      {
        goto LABEL_22;
      }
      dispatch_release(v18);
      if (v19)
      {
LABEL_23:
        _Block_object_dispose(&v37, 8);
        if (*v14 == 1) {
          kdebug_trace();
        }
        return v19;
      }
LABEL_33:
      if (*((_DWORD *)v38 + 6)) {
        uint64_t v19 = 4294951824;
      }
      else {
        uint64_t v19 = 0;
      }
      goto LABEL_23;
    }
LABEL_19:
    dispatch_sync(v18, &__block_literal_global_35);
    char v20 = 0;
    goto LABEL_20;
  }
  return FigSignalErrorAt();
}

uint64_t _endImageSequence(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 104)) {
    unsigned int v2 = FigSignalErrorAt();
  }
  else {
    unsigned int v2 = 0;
  }
  unsigned int v3 = _disposeCompressionPluginsForSequenceAsyncEncoding(a1);
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  if (v2) {
    return v2;
  }
  else {
    return v3;
  }
}

uint64_t _addGroup(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  if (*(unsigned char *)(a1 + 104)) {
    return FigSignalErrorAt();
  }
  else {
    return CMPhotoHEIFFileWriterAddGroup(*(void *)(a1 + 88), a3, a4);
  }
}

uint64_t _addGroupProperties(uint64_t a1, uint64_t a2, int a3, const void *a4)
{
  if (*(unsigned char *)(a1 + 104)) {
    return FigSignalErrorAt();
  }
  else {
    return CMPhotoHEIFFileWriterAddGroupProperties(*(void *)(a1 + 88), a3, a4);
  }
}

uint64_t _addImageToGroup(uint64_t a1, uint64_t a2, CFIndex a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 104)) {
    return FigSignalErrorAt();
  }
  else {
    return CMPhotoHEIFFileWriterAddImageToGroup(*(void *)(a1 + 88), a3, a4);
  }
}

uint64_t _addGroupToGroup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 104)) {
    return FigSignalErrorAt();
  }
  else {
    return CMPhotoHEIFFileWriterAddGroupToGroup(*(void *)(a1 + 88), a3, a4);
  }
}

uint64_t _addTmapImageOneShot_0(uint64_t a1, CFIndex a2, int a3, CFDictionaryRef theDict, opaqueCMSampleBuffer *a5, uint64_t a6, int a7, uint64_t a8, void *a9)
{
  CFIndex v40 = -1;
  CFIndex v39 = -1;
  if (a5 && a6)
  {
    uint64_t v37 = 0;
    CGColorSpaceRef v38 = 0;
    int v35 = 0;
    int v36 = 0;
    int CFValueIfPresent = CMPhotoCFDictionaryGetCFValueIfPresent(theDict, @"ColorSpace", (void **)&v38);
    int v15 = CMPhotoCFDictionaryGetCFValueIfPresent(theDict, @"Primaries", &v37);
    int v16 = CMPhotoCFDictionaryGetCFValueIfPresent(theDict, @"Transfer", &v36);
    int v17 = CMPhotoCFDictionaryGetCFValueIfPresent(theDict, @"Matrix", &v35);
    if (!CFValueIfPresent)
    {
      BOOL v18 = !v15 || v16 == 0;
      if (v18 || v17 == 0) {
        return FigSignalErrorAt();
      }
    }
    CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t MutableCopy = FigCFDictionaryCreateMutableCopy();
    if (!MutableCopy) {
      return 4294950305;
    }
    CFDictionaryRef v22 = (const __CFDictionary *)MutableCopy;
    if (a7)
    {
      FigCFDictionarySetValue();
      uint64_t v23 = CMPhotoCompressionSessionAddAuxiliaryImage(a1, a2, 4, a8, v22, a5, &v40);
      if (!v23) {
        goto LABEL_14;
      }
    }
    else
    {
      FigCFDictionarySetBoolean();
      uint64_t v23 = CMPhotoCompressionSessionAddImage(a1, v22, a5, &v40);
      if (!v23)
      {
LABEL_14:
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v20, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (Mutable)
        {
          CFDictionaryRef v25 = Mutable;
          CFMutableDictionaryRef v26 = CFDictionaryCreateMutable(v20, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          if (v26)
          {
            CFMutableDictionaryRef v27 = v26;
            FigCFDictionarySetInt();
            FigCFDictionarySetValue();
            FigCFDictionarySetValue();
            if (CFValueIfPresent)
            {
              CGColorSpaceUsesITUR_2100TF(v38);
            }
            else
            {
              if (!FigCFEqual()) {
                FigCFEqual();
              }
              FigCFDictionarySetBoolean();
              FigCFDictionarySetValue();
              FigCFDictionarySetValue();
            }
            FigCFDictionarySetValue();
            FigCFDictionarySetInt();
            CFMutableArrayRef v29 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
            if (v29)
            {
              int v30 = v29;
              FigCFArrayAppendInt32();
              FigCFArrayAppendInt32();
              uint64_t v31 = CMPhotoCompressionSessionAddImage(a1, v25, v30, &v39);
              if (v31
                || (uint64_t v31 = CMPhotoCompressionSessionAddGroup(a1, 0, 1634497650), v31)
                || (uint64_t v31 = CMPhotoCompressionSessionAddImageHandleToGroup(a1), v31))
              {
                uint64_t v28 = v31;
              }
              else
              {
                uint64_t v32 = CMPhotoCompressionSessionAddImageHandleToGroup(a1);
                uint64_t v28 = v32;
                if (a9)
                {
                  if (!v32) {
                    *a9 = v39;
                  }
                }
              }
              CFRelease(v30);
            }
            else
            {
              uint64_t v28 = 4294950305;
            }
            CFRelease(v27);
          }
          else
          {
            uint64_t v28 = 4294950305;
          }
          CFRelease(v25);
        }
        else
        {
          uint64_t v28 = 4294950305;
        }
        goto LABEL_33;
      }
    }
    uint64_t v28 = v23;
LABEL_33:
    CFRelease(v22);
    return v28;
  }
  return FigSignalErrorAt();
}

uint64_t _compressImageAsync_0(uint64_t a1, const __CFDictionary *a2, opaqueCMSampleBuffer *a3, CFIndex *a4, uint64_t a5)
{
  return _compressImageInternal_0(a1, a2, a3, 1, a4, a5);
}

uint64_t _compressAuxImageAsync_0(uint64_t a1, CFIndex a2, unsigned int a3, uint64_t a4, const __CFDictionary *a5, opaqueCMSampleBuffer *a6, CFIndex *a7, uint64_t a8)
{
  return _compressAuxImageInternal_0(a1, a2, a3, a4, a5, a6, 1, a7, a8);
}

uint64_t _compressThumbnailAsync_0(uint64_t a1, CFIndex a2, const __CFDictionary *a3, opaqueCMSampleBuffer *a4, uint64_t a5)
{
  return _compressThumbnailInternal_0(a1, a2, a3, a4, 1, a5);
}

void _destroySequenceGroupReaders(const __CFArray *a1)
{
  if (a1)
  {
    if (CFArrayGetCount(a1) >= 1)
    {
      CFIndex v2 = 0;
      do
      {
        CFDictionaryRef ValueAtIndex = (uint64_t *)CFArrayGetValueAtIndex(a1, v2);
        _destroySequenceGroupReader(ValueAtIndex);
        ++v2;
      }
      while (v2 < CFArrayGetCount(a1));
    }
    CFRelease(a1);
  }
}

void _destroySequenceGroupReader(uint64_t *a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (*a1)
    {
      unsigned int v3 = *(const void **)(v2 + 8);
      if (v3) {
        CFRelease(v3);
      }
      CFAllocatorRef v4 = *(const void **)(v2 + 16);
      if (v4) {
        CFRelease(v4);
      }
      CFAllocatorRef v5 = *(const void **)(v2 + 24);
      if (v5) {
        CFRelease(v5);
      }
      if (*(void *)v2) {
        CFRelease(*(CFTypeRef *)v2);
      }
      free((void *)v2);
    }
    for (CFIndex i = 0; ; ++i)
    {
      CFArrayRef Count = (const __CFArray *)a1[1];
      if (Count) {
        CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
      }
      if (i >= (uint64_t)Count) {
        break;
      }
      CFDictionaryRef ValueAtIndex = (CFTypeRef *)CFArrayGetValueAtIndex((CFArrayRef)a1[1], i);
      if (ValueAtIndex)
      {
        uint64_t v9 = ValueAtIndex;
        CFTypeRef v10 = ValueAtIndex[1];
        if (v10) {
          CFRelease(v10);
        }
        CFTypeRef v11 = v9[2];
        if (v11) {
          CFRelease(v11);
        }
        CFTypeRef v12 = v9[3];
        if (v12) {
          CFRelease(v12);
        }
        if (*v9) {
          CFRelease(*v9);
        }
        free(v9);
      }
    }
    for (CFIndex j = 0; ; ++j)
    {
      CFArrayRef v14 = (const __CFArray *)a1[2];
      if (v14) {
        CFArrayRef v14 = (const __CFArray *)CFArrayGetCount(v14);
      }
      if (j >= (uint64_t)v14) {
        break;
      }
      int v15 = (CFTypeRef *)CFArrayGetValueAtIndex((CFArrayRef)a1[2], j);
      if (v15)
      {
        int v16 = v15;
        CFTypeRef v17 = v15[1];
        if (v17) {
          CFRelease(v17);
        }
        CFTypeRef v18 = v16[2];
        if (v18) {
          CFRelease(v18);
        }
        CFTypeRef v19 = v16[3];
        if (v19) {
          CFRelease(v19);
        }
        if (*v16) {
          CFRelease(*v16);
        }
        free(v16);
      }
    }
    CFAllocatorRef v20 = (const void *)a1[1];
    if (v20) {
      CFRelease(v20);
    }
    int v21 = (const void *)a1[2];
    if (v21) {
      CFRelease(v21);
    }
    free(a1);
  }
}

uint64_t _readContainerAndCopyDescription(uint64_t a1, uint64_t a2, __CFDictionary **a3)
{
  CFArrayRef v171 = 0;
  uint64_t v172 = 0;
  CFTypeRef v5 = (CFTypeRef)*MEMORY[0x1E4F1CFC8];
  CFTypeRef v169 = 0;
  CFTypeRef v170 = v5;
  CFBooleanRef v167 = 0;
  long long v168 = 0;
  CFTypeRef v166 = 0;
  CFArrayRef theArray = CFArrayCreateMutable(*(CFAllocatorRef *)(a1 + 96), 0, MEMORY[0x1E4F1D510]);
  if (!theArray)
  {
    CFDictionaryRef v32 = 0;
    uint64_t v33 = 0;
    CFNumberRef v34 = 0;
    uint64_t v35 = 4294950305;
    if (v5) {
      goto LABEL_39;
    }
    goto LABEL_40;
  }
  uint64_t v6 = FigPictureCollectionCreateFromByteStream();
  if (v6) {
    goto LABEL_286;
  }
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))(v8 + 8);
  if (!v9)
  {
    CFDictionaryRef v32 = 0;
    uint64_t v33 = 0;
    CFNumberRef v34 = 0;
    uint64_t v35 = 4294954514;
    goto LABEL_38;
  }
  uint64_t v6 = v9(v169, 1, &v172);
  if (v6)
  {
LABEL_286:
    uint64_t v35 = v6;
    CFDictionaryRef v32 = 0;
    uint64_t v33 = 0;
    CFNumberRef v34 = 0;
    goto LABEL_38;
  }
  if (v172 < 1)
  {
    uint64_t v6 = FigSignalErrorAt();
    goto LABEL_286;
  }
  uint64_t v159 = a3;
  uint64_t v10 = 0;
  CFNumberRef value = 0;
  CFMutableDictionaryRef v11 = 0;
  uint64_t v164 = a1;
  uint64_t v12 = a1 + 88;
  uint64_t v13 = *MEMORY[0x1E4F333F0];
  CFArrayRef v14 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  int v15 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  do
  {
    if (v168)
    {
      CFRelease(v168);
      long long v168 = 0;
    }
    if (v11) {
      CFRelease(v11);
    }
    if (v170)
    {
      CFRelease(v170);
      CFTypeRef v170 = 0;
    }
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(*(CFAllocatorRef *)(v164 + 96), 0, v14, v15);
    if (!Mutable)
    {
      CFDictionaryRef v32 = 0;
      uint64_t v33 = 0;
      uint64_t v35 = 4294950305;
      goto LABEL_37;
    }
    CFMutableDictionaryRef v11 = Mutable;
    CFTypeRef v17 = v169;
    uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v18) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0;
    }
    CFAllocatorRef v20 = *(uint64_t (**)(CFTypeRef, uint64_t, const void **, void))(v19 + 16);
    if (!v20) {
      goto LABEL_35;
    }
    uint64_t v21 = v20(v17, v10, &v168, 0);
    if (v21) {
      goto LABEL_282;
    }
    uint64_t v21 = _copyPictureReaderToImageDescription(v12, v168, 0, v10, v11);
    if (v21) {
      goto LABEL_282;
    }
    uint64_t v22 = *(void *)(v164 + 96);
    uint64_t FigBaseObject = FigPictureReaderGetFigBaseObject();
    uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v25 = v24 ? v24 : 0;
    CFMutableDictionaryRef v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v25 + 48);
    if (!v26)
    {
LABEL_35:
      CFDictionaryRef v32 = 0;
      uint64_t v35 = 4294954514;
      goto LABEL_36;
    }
    uint64_t v21 = v26(FigBaseObject, v13, v22, &v170);
    if (v21) {
      goto LABEL_282;
    }
    if (FigCFEqual())
    {
      if (value)
      {
        uint64_t v21 = FigSignalErrorAt();
LABEL_282:
        uint64_t v35 = v21;
        CFDictionaryRef v32 = 0;
        goto LABEL_36;
      }
      CFNumberRef value = CMPhotoCFNumberCreateInt(v10);
    }
    CFArrayAppendValue(theArray, v11);
    ++v10;
  }
  while (v10 < v172);
  uint64_t v27 = v164;
  *(unsigned char *)(v164 + 112) = 1;
  *(void *)(v164 + 120) = v169;
  CFTypeRef v169 = 0;
  uint64_t v28 = *(void *)(v164 + 96);
  uint64_t CMBaseObject = FigPictureCollectionGetCMBaseObject();
  uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v30) {
    uint64_t v31 = v30;
  }
  else {
    uint64_t v31 = 0;
  }
  uint64_t v37 = *(unsigned int (**)(uint64_t, void, uint64_t, const __CFBoolean **))(v31 + 48);
  if (v37 && !v37(CMBaseObject, *MEMORY[0x1E4F33280], v28, &v167) && CFBooleanGetValue(v167))
  {
    values = @"video/mp4";
    CFDictionaryRef v154 = CFDictionaryCreate(*(CFAllocatorRef *)(v164 + 96), MEMORY[0x1E4F32BC0], (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!v154) {
      goto LABEL_292;
    }
    uint64_t v46 = FigFormatReaderCreateForStreamReturningMatchingContainerLabel();
    if (v46)
    {
      uint64_t v35 = v46;
      goto LABEL_279;
    }
    uint64_t v47 = (uint64_t)v166;
    CFAllocatorRef v48 = CFGetAllocator((CFTypeRef)v164);
    CFArrayRef v175 = 0;
    v176.CFNumberRef value = 0;
    long long v178 = 0;
    v179[0] = 0;
    CFTypeRef v49 = CFArrayCreateMutable(v48, 0, 0);
    if (v49)
    {
      uint64_t v50 = FigFormatReaderGetFigBaseObject();
      uint64_t v51 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v51) {
        uint64_t v52 = v51;
      }
      else {
        uint64_t v52 = 0;
      }
      int v93 = *(uint64_t (**)(uint64_t, void, const __CFAllocator *, CMTime *))(v52 + 48);
      if (!v93)
      {
        uint64_t v115 = 0;
        uint64_t v35 = 4294954514;
        goto LABEL_213;
      }
      uint64_t hasTrackReferenceOfType = v93(v50, *MEMORY[0x1E4F32BB0], v48, &v176);
      if (!hasTrackReferenceOfType)
      {
        uint64_t v95 = 0;
        unsigned int v174 = 0;
        while (1)
        {
          uint64_t v96 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v96) {
            uint64_t v97 = v96;
          }
          else {
            uint64_t v97 = 0;
          }
          int v98 = *(unsigned int (**)(uint64_t, __CFArray *, uint64_t, void, unsigned int *))(v97 + 64);
          if (!v98 || v98(v47, v95, 1885954932, 0, &v174))
          {
            uint64_t v115 = 0;
            uint64_t v35 = 0;
            *(void *)(v27 + 144) = v49;
            CFTypeRef v49 = 0;
            goto LABEL_213;
          }
          __int16 v173 = 0;
          uint64_t hasTrackReferenceOfType = _hasTrackReferenceOfType((const __CFDictionary *)v176.value, @"thmb", v174, (char *)&v173 + 1);
          if (hasTrackReferenceOfType) {
            goto LABEL_290;
          }
          uint64_t hasTrackReferenceOfType = _hasTrackReferenceOfType((const __CFDictionary *)v176.value, @"auxl", v174, (char *)&v173);
          if (hasTrackReferenceOfType) {
            goto LABEL_290;
          }
          if (!(HIBYTE(v173) | v173)) {
            break;
          }
LABEL_207:
          uint64_t v95 = (__CFArray *)((char *)v95 + 1);
        }
        uint64_t v99 = _copyTrackReferencesOfType((const __CFDictionary *)v176.value, @"thmb", v174, v179);
        if (v99)
        {
          uint64_t v35 = v99;
          if (v99 != -16993) {
            goto LABEL_291;
          }
        }
        uint64_t v100 = _copyTrackReferencesOfType((const __CFDictionary *)v176.value, @"auxl", v174, &v178);
        if (v100)
        {
          uint64_t v35 = v100;
          if (v100 != -16993) {
            goto LABEL_291;
          }
        }
        uint64_t v101 = _copyTrackReferencesOfType((const __CFDictionary *)v176.value, @"cdsc", v174, &v175);
        if (v101)
        {
          uint64_t v35 = v101;
          if (v101 != -16993) {
            goto LABEL_291;
          }
        }
        CFMutableArrayRef v161 = v95;
        unsigned int v102 = v49;
        CFAllocatorRef v103 = v48;
        uint64_t v104 = v174;
        CFArrayRef v105 = v178;
        CFArrayRef v106 = v179[0];
        v177.CFNumberRef value = 0;
        unsigned int v107 = (CFMutableArrayRef *)malloc_type_calloc(1uLL, 0x18uLL, 0x20040960023A9uLL);
        if (!v107)
        {
          uint64_t v115 = 0;
          uint64_t v35 = 4294950305;
          uint64_t v27 = v164;
          CFTypeRef v49 = v102;
          goto LABEL_213;
        }
        uint64_t v108 = v107;
        uint64_t v109 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v109) {
          uint64_t v110 = v109;
        }
        else {
          uint64_t v110 = 0;
        }
        size_t v111 = *(uint64_t (**)(uint64_t, uint64_t, CMTime *, void))(v110 + 56);
        if (v111)
        {
          uint64_t v112 = v111(v47, v104, &v177, 0);
          if (!v112)
          {
            CFAllocatorRef v48 = v103;
            uint64_t SequenceReader_0 = _createSequenceReader_0((uint64_t)v103, v47, (const void *)v177.value, v108);
            if (!SequenceReader_0)
            {
              uint64_t ReferenceSequenceReaders = _createReferenceSequenceReaders(v103, v47, v106, 1885954932, v108 + 1);
              CFTypeRef v49 = v102;
              if (ReferenceSequenceReaders)
              {
                uint64_t v35 = ReferenceSequenceReaders;
                uint64_t v115 = 0;
                uint64_t v27 = v164;
              }
              else
              {
                uint64_t v35 = _createReferenceSequenceReaders(v48, v47, v105, 1635088502, v108 + 2);
                uint64_t v27 = v164;
                if (v35)
                {
                  uint64_t v115 = 0;
                }
                else
                {
                  uint64_t v115 = v108;
                  uint64_t v108 = 0;
                }
              }
              goto LABEL_198;
            }
            uint64_t v35 = SequenceReader_0;
            uint64_t v115 = 0;
            uint64_t v27 = v164;
LABEL_196:
            CFTypeRef v49 = v102;
LABEL_198:
            if (v177.value) {
              CFRelease((CFTypeRef)v177.value);
            }
            _destroySequenceGroupReader((uint64_t *)v108);
            if (v35) {
              goto LABEL_213;
            }
            CFArrayAppendValue(v49, v115);
            if (v179[0])
            {
              CFRelease(v179[0]);
              v179[0] = 0;
            }
            uint64_t v95 = v161;
            if (v178)
            {
              CFRelease(v178);
              long long v178 = 0;
            }
            if (v175)
            {
              CFRelease(v175);
              CFArrayRef v175 = 0;
            }
            goto LABEL_207;
          }
          uint64_t v35 = v112;
          uint64_t v115 = 0;
        }
        else
        {
          uint64_t v115 = 0;
          uint64_t v35 = 4294954514;
        }
        uint64_t v27 = v164;
        CFAllocatorRef v48 = v103;
        goto LABEL_196;
      }
LABEL_290:
      uint64_t v35 = hasTrackReferenceOfType;
LABEL_291:
      uint64_t v115 = 0;
    }
    else
    {
      uint64_t v115 = 0;
      uint64_t v35 = 4294950305;
    }
LABEL_213:
    if (v176.value) {
      CFRelease((CFTypeRef)v176.value);
    }
    _destroySequenceGroupReader((uint64_t *)v115);
    _destroySequenceGroupReaders(v49);
    if (v35) {
      goto LABEL_279;
    }
    CFMutableArrayRef v116 = CFArrayCreateMutable(*(CFAllocatorRef *)(v27 + 96), 0, MEMORY[0x1E4F1D510]);
    if (!v116)
    {
LABEL_292:
      uint64_t v35 = 4294950305;
      goto LABEL_279;
    }
    CFMutableArrayRef v38 = v116;
    CFIndex v117 = 0;
    uint64_t v118 = (CMTime *)MEMORY[0x1E4F1F9F8];
    CFMutableArrayRef v149 = v116;
    while (1)
    {
      CFArrayRef Count = *(const __CFArray **)(v27 + 144);
      if (Count) {
        CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
      }
      if (v117 >= (uint64_t)Count) {
        break;
      }
      CFAllocatorRef v120 = *(const __CFAllocator **)(v27 + 96);
      long long v178 = 0;
      v179[0] = 0;
      CFArrayRef v121 = *(const __CFArray **)(v27 + 144);
      if (!v121)
      {
        uint64_t v35 = 4294950304;
        goto LABEL_278;
      }
      if (CFArrayGetCount(v121) <= v117)
      {
        uint64_t v143 = 0;
        uint64_t v35 = 4294950304;
      }
      else
      {
        CFDictionaryRef ValueAtIndex = (uint64_t *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v27 + 144), v117);
        CFMutableArrayRef v123 = CFArrayCreateMutable(v120, 0, MEMORY[0x1E4F1D510]);
        if (v123)
        {
          int v124 = v123;
          CFIndex v158 = v117;
          uint64_t v125 = *ValueAtIndex;
          uint64_t v126 = _moveCursorToPosition_0(*ValueAtIndex, 0);
          if (v126)
          {
            uint64_t v35 = v126;
            uint64_t v143 = 0;
LABEL_269:
            unsigned int v129 = v124;
            CFMutableArrayRef v38 = v149;
          }
          else
          {
            int v127 = 0;
            do
            {
              CFMutableDictionaryRef v128 = CFDictionaryCreateMutable(v120, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              if (!v128)
              {
                uint64_t v143 = 0;
                uint64_t v35 = 4294950305;
                goto LABEL_269;
              }
              unsigned int v129 = v128;
              CMTime v177 = *v118;
              uint64_t v130 = *(void *)(v125 + 16);
              uint64_t v131 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v131) {
                uint64_t v132 = v131;
              }
              else {
                uint64_t v132 = 0;
              }
              uint64_t v133 = *(uint64_t (**)(uint64_t, CMTime *))(v132 + 40);
              if (!v133)
              {
LABEL_255:
                uint64_t v35 = 4294954514;
                goto LABEL_256;
              }
              uint64_t v134 = v133(v130, &v177);
              if (v134) {
                goto LABEL_254;
              }
              if ((*(void *)(v125 + 32) & 0x8000000000000000) != 0)
              {
                uint64_t v134 = FigSignalErrorAt();
                BOOL v140 = 0;
                if (v134) {
                  goto LABEL_254;
                }
              }
              else
              {
                v176.CFNumberRef value = 0;
                uint64_t v135 = *(void *)(v125 + 16);
                uint64_t v136 = *(void *)(CMBaseObjectGetVTable() + 16);
                if (v136) {
                  uint64_t v137 = v136;
                }
                else {
                  uint64_t v137 = 0;
                }
                uint64_t v138 = *(uint64_t (**)(uint64_t, uint64_t, CMTime *))(v137 + 176);
                if (!v138) {
                  goto LABEL_255;
                }
                uint64_t v134 = v138(v135, 1, &v176);
                if (v134) {
                  goto LABEL_254;
                }
                CMTimeValue v139 = v176.value;
                *(void *)(v125 + 32) += v176.value;
                BOOL v140 = v139 != 1;
              }
              FigCFDictionarySetInt();
              CFArrayRef v141 = (const __CFArray *)ValueAtIndex[1];
              CMTime v176 = v177;
              uint64_t v134 = _createReferenceSequencesDescription(v120, v141, &v176, v179);
              if (v134) {
                goto LABEL_254;
              }
              if (v179[0] && CFArrayGetCount(v179[0]) >= 1) {
                CFDictionaryAddValue(v129, @"ThumbnailImage", v179[0]);
              }
              CFArrayRef v142 = (const __CFArray *)ValueAtIndex[2];
              CMTime v176 = v177;
              uint64_t v134 = _createReferenceSequencesDescription(v120, v142, &v176, &v178);
              if (v134)
              {
LABEL_254:
                uint64_t v35 = v134;
LABEL_256:
                CFMutableArrayRef v38 = v149;
                CFIndex v117 = v158;
                CFRelease(v124);
                uint64_t v143 = 0;
                goto LABEL_257;
              }
              if (v178 && CFArrayGetCount(v178) >= 1) {
                CFDictionaryAddValue(v129, @"Auxiliary", v178);
              }
              CFArrayAppendValue(v124, v129);
              CFRelease(v129);
              if (v179[0])
              {
                CFRelease(v179[0]);
                v179[0] = 0;
              }
              if (v178)
              {
                CFRelease(v178);
                long long v178 = 0;
              }
              ++v127;
            }
            while (!v140);
            CFMutableDictionaryRef v144 = CFDictionaryCreateMutable(v120, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            uint64_t v143 = v144;
            CFMutableArrayRef v38 = v149;
            if (v144)
            {
              CFIndex v117 = v158;
              FigCFDictionarySetInt64();
              CFDictionaryAddValue(v143, @"ImageList", v124);
              uint64_t v35 = 0;
              unsigned int v129 = v124;
              goto LABEL_257;
            }
            uint64_t v35 = 4294950305;
            unsigned int v129 = v124;
          }
          CFIndex v117 = v158;
LABEL_257:
          CFRelease(v129);
          uint64_t v27 = v164;
        }
        else
        {
          uint64_t v143 = 0;
          uint64_t v35 = 4294950305;
          uint64_t v27 = v164;
          CFMutableArrayRef v38 = v149;
        }
      }
      if (v179[0]) {
        CFRelease(v179[0]);
      }
      if (v178) {
        CFRelease(v178);
      }
      if (v35)
      {
        if (v143) {
          CFRelease(v143);
        }
        CFMutableArrayRef v38 = v149;
LABEL_278:
        CFRelease(v38);
LABEL_279:
        CFDictionaryRef v32 = v154;
LABEL_36:
        CFRelease(v11);
        uint64_t v33 = 0;
        goto LABEL_37;
      }
      CFArrayAppendValue(v38, v143);
      if (v143) {
        CFRelease(v143);
      }
      ++v117;
    }
    if (CFArrayGetCount(v38) <= 0)
    {
      CFRelease(v38);
      CFMutableArrayRef v38 = 0;
    }
  }
  else
  {
    CFMutableArrayRef v38 = 0;
    CFDictionaryRef v154 = 0;
  }
  uint64_t v39 = *(void *)(v27 + 96);
  uint64_t v40 = FigPictureCollectionGetCMBaseObject();
  uint64_t v41 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v41) {
    uint64_t v42 = v41;
  }
  else {
    uint64_t v42 = 0;
  }
  uint64_t v43 = *(unsigned int (**)(uint64_t, void, uint64_t, const __CFArray **))(v42 + 48);
  if (!v43 || v43(v40, *MEMORY[0x1E4F33260], v39, &v171) || !v171 || CFArrayGetCount(v171) < 1)
  {
    uint64_t v33 = 0;
    goto LABEL_67;
  }
  BOOL v148 = v38;
  CFMutableArrayRef v53 = CFArrayCreateMutable(*(CFAllocatorRef *)(v27 + 96), 0, MEMORY[0x1E4F1D510]);
  uint64_t v33 = v53;
  if (!v53)
  {
LABEL_287:
    uint64_t v35 = 4294950305;
LABEL_288:
    CFDictionaryRef v32 = v154;
    CFMutableArrayRef v38 = v148;
    goto LABEL_76;
  }
  CFIndex v54 = 0;
  CFStringRef key = (void *)*MEMORY[0x1E4F33380];
  CFDictionaryRef v55 = (const void *)*MEMORY[0x1E4F33368];
  uint64_t v151 = (void *)*MEMORY[0x1E4F33378];
  uint64_t v147 = (void *)*MEMORY[0x1E4F34940];
  __int16 v146 = (void *)*MEMORY[0x1E4F34960];
  unsigned int v145 = (void *)*MEMORY[0x1E4F34950];
  CFMutableArrayRef v150 = v53;
  while (1)
  {
    CFArrayRef v56 = v171;
    if (v171) {
      CFArrayRef v56 = (const __CFArray *)CFArrayGetCount(v171);
    }
    if (v54 >= (uint64_t)v56) {
      break;
    }
    CFDictionaryRef v57 = (const __CFDictionary *)CFArrayGetValueAtIndex(v171, v54);
    CFAllocatorRef v58 = *(const __CFAllocator **)(v27 + 96);
    uint64_t v157 = *(void *)(v27 + 120);
    CFArrayRef v59 = v171;
    CFMutableDictionaryRef v60 = CFDictionaryCreateMutable(v58, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!v60) {
      goto LABEL_287;
    }
    long long v155 = v60;
    long long v156 = (void *)v54;
    CFDictionaryGetValue(v57, key);
    if (FigCFEqual())
    {
      int v61 = 1937007986;
    }
    else
    {
      if (!FigCFEqual()) {
        goto LABEL_160;
      }
      int v61 = 1634497650;
    }
    LODWORD(v176.value) = 0;
    if (!CMPhotoCFDictionaryGetInt32IfPresent(v57, v55, &v176))
    {
LABEL_160:
      uint64_t v35 = FigSignalErrorAt();
      uint64_t v86 = 0;
      CFArrayRef v63 = 0;
LABEL_163:
      int v78 = v155;
      int v79 = v156;
LABEL_149:
      CFRelease(v78);
      goto LABEL_150;
    }
    CFArrayRef v62 = (const __CFArray *)CFDictionaryGetValue(v57, v151);
    CFArrayRef v63 = v62;
    if (!v62)
    {
      uint64_t v86 = 0;
      uint64_t v35 = 4294950304;
      goto LABEL_163;
    }
    uint64_t v64 = CFArrayGetCount(v62);
    if (v64 < 1) {
      goto LABEL_160;
    }
    uint64_t v65 = v64;
    int v153 = v61;
    size_t v160 = CFArrayCreateMutable(v58, v64, MEMORY[0x1E4F1D510]);
    if (!v160)
    {
      uint64_t v86 = 0;
      CFArrayRef v63 = 0;
      uint64_t v35 = 4294950305;
      uint64_t v27 = v164;
      uint64_t v33 = v150;
      goto LABEL_163;
    }
    CFIndex v66 = 0;
    CFDataRef v67 = 0;
    while (1)
    {
      if (v67) {
        CFRelease(v67);
      }
      uint64_t MutableCopy = FigCFDictionaryCreateMutableCopy();
      if (!MutableCopy) {
        break;
      }
      CFDataRef v67 = (void *)MutableCopy;
      uint64_t v69 = CFArrayGetValueAtIndex(v63, v66);
      if (!v69) {
        goto LABEL_127;
      }
      CFTypeRef v70 = v69;
      CFTypeID v71 = CFGetTypeID(v69);
      if (v71 == CFNumberGetTypeID())
      {
        CFDictionarySetValue((CFMutableDictionaryRef)v67, @"ImageHandle", v70);
      }
      else
      {
        CFTypeID v72 = CFGetTypeID(v70);
        if (v72 != CFDictionaryGetTypeID())
        {
LABEL_127:
          uint64_t v86 = 0;
          uint64_t v35 = 4294950194;
          goto LABEL_128;
        }
        CFDictionaryGetValue((CFDictionaryRef)v70, v55);
        CFIndex v73 = 0;
        if (v59)
        {
LABEL_109:
          CFIndex v74 = CFArrayGetCount(v59);
          goto LABEL_111;
        }
        while (1)
        {
          CFIndex v74 = 0;
LABEL_111:
          if (v73 >= v74) {
            break;
          }
          CFDictionaryRef v75 = (const __CFDictionary *)FigCFArrayGetValueAtIndex();
          CFDictionaryGetValue(v75, v55);
          if (FigCFEqual()) {
            goto LABEL_116;
          }
          ++v73;
          if (v59) {
            goto LABEL_109;
          }
        }
        uint64_t v76 = FigSignalErrorAt();
        CFIndex v73 = 0;
        if (v76)
        {
          uint64_t v35 = v76;
          uint64_t v86 = 0;
LABEL_128:
          uint64_t v27 = v164;
          int v78 = v155;
          int v79 = v156;
          CFArrayRef v63 = v160;
LABEL_147:
          CFRelease(v67);
          goto LABEL_148;
        }
LABEL_116:
        CMPhotoCFDictionarySetSize(v67, @"GroupHandle", v73);
      }
      CFArrayAppendValue(v160, v67);
      if (++v66 == v65)
      {
        CFDictionaryRef v77 = (const __CFDictionary *)FigCFDictionaryGetValue();
        uint64_t v27 = v164;
        int v78 = v155;
        int v79 = v156;
        CFArrayRef v63 = v160;
        if (v77)
        {
          CFDictionaryRef v80 = v77;
          long long v81 = CFDictionaryGetValue(v77, v147);
          if (v81) {
            CFDictionaryAddValue(v155, @"DisparityAdjustment", v81);
          }
          uint64_t v82 = CFDictionaryGetValue(v80, v146);
          if (v82) {
            CFDictionaryAddValue(v155, @"StereoAggressors", v82);
          }
          int v83 = CFDictionaryGetValue(v80, v145);
          if (v83) {
            CFDictionaryAddValue(v155, @"MonoImageLocation", v83);
          }
        }
        v177.CFNumberRef value = 0;
        uint64_t v84 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v84) {
          uint64_t v85 = v84;
        }
        else {
          uint64_t v85 = 0;
        }
        int v87 = *(uint64_t (**)(uint64_t, uint64_t, CMTime *))(v85 + 8);
        if (!v87)
        {
          uint64_t v86 = 0;
          uint64_t v35 = 4294954514;
          goto LABEL_147;
        }
        uint64_t v88 = v87(v157, 1, &v177);
        if (v88) {
          goto LABEL_164;
        }
        LODWORD(v89) = v177.value;
        if (v177.value >= 1)
        {
          uint64_t v89 = 0;
          while (1)
          {
            LODWORD(v179[0]) = 0;
            uint64_t v90 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v91 = v90 ? v90 : 0;
            unsigned int v92 = *(uint64_t (**)(uint64_t, uint64_t, void, __CFArray **))(v91 + 16);
            if (!v92) {
              break;
            }
            uint64_t v88 = v92(v157, v89, 0, v179);
            if (v88) {
              goto LABEL_164;
            }
            if (LODWORD(v176.value) < LODWORD(v179[0])) {
              goto LABEL_142;
            }
            if (++v89 >= v177.value)
            {
              LODWORD(v89) = v177.value;
              goto LABEL_142;
            }
          }
          uint64_t v35 = 4294954514;
          goto LABEL_157;
        }
LABEL_142:
        uint64_t v88 = CMPhotoCFDictionarySetInt32(v155, @"GroupType", v153);
        if (v88 || (uint64_t v88 = CMPhotoCFDictionarySetInt32(v155, @"GroupHandle", (int)v156), v88))
        {
LABEL_164:
          uint64_t v35 = v88;
        }
        else
        {
          uint64_t v35 = CMPhotoCFDictionarySetInt32(v155, @"GroupSortOrder", v89);
          if (!v35)
          {
            CFDictionarySetValue(v155, @"ImageList", v160);
            uint64_t v86 = v155;
            int v78 = 0;
            goto LABEL_147;
          }
        }
LABEL_157:
        uint64_t v86 = 0;
        goto LABEL_147;
      }
    }
    uint64_t v86 = 0;
    uint64_t v35 = 4294950305;
    uint64_t v27 = v164;
    int v78 = v155;
    int v79 = v156;
    CFArrayRef v63 = v160;
LABEL_148:
    uint64_t v33 = v150;
    if (v78) {
      goto LABEL_149;
    }
LABEL_150:
    if (v63) {
      CFRelease(v63);
    }
    if (v35) {
      goto LABEL_288;
    }
    CFArrayAppendValue(v33, v86);
    if (v86) {
      CFRelease(v86);
    }
    CFIndex v54 = (CFIndex)v79 + 1;
  }
  CFMutableArrayRef v38 = v148;
LABEL_67:
  CFDictionaryRef v44 = CFDictionaryCreateMutable(*(CFAllocatorRef *)(v27 + 96), 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v44)
  {
    CFDictionaryRef v45 = v44;
    CFDictionaryAddValue(v44, @"PrimaryImageHandle", value);
    CFDictionaryAddValue(v45, @"ImageList", theArray);
    if (v38) {
      CFDictionaryAddValue(v45, @"SequenceList", v38);
    }
    if (v33) {
      CFDictionaryAddValue(v45, @"GroupList", v33);
    }
    *(void *)(v27 + 12_Block_object_dispose(&STACK[0x280], 8) = v166;
    CFTypeRef v166 = 0;
    if (v159)
    {
      uint64_t v35 = 0;
      *uint64_t v159 = v45;
    }
    else
    {
      CFRelease(v45);
      uint64_t v35 = 0;
    }
  }
  else
  {
    uint64_t v35 = 4294950305;
  }
  CFDictionaryRef v32 = v154;
LABEL_76:
  CFRelease(v11);
  if (v38) {
    CFRelease(v38);
  }
LABEL_37:
  CFNumberRef v34 = value;
LABEL_38:
  CFRelease(theArray);
  CFTypeRef v5 = v170;
  if (v170) {
LABEL_39:
  }
    CFRelease(v5);
LABEL_40:
  if (v34) {
    CFRelease(v34);
  }
  if (v169) {
    CFRelease(v169);
  }
  if (v168) {
    CFRelease(v168);
  }
  if (v167) {
    CFRelease(v167);
  }
  if (v166) {
    CFRelease(v166);
  }
  if (v32) {
    CFRelease(v32);
  }
  if (v171) {
    CFRelease(v171);
  }
  if (v33) {
    CFRelease(v33);
  }
  return v35;
}

uint64_t _initContainerFromDescription(const void *a1, const __CFDictionary *a2, __CFDictionary **a3)
{
  CFAllocatorRef v6 = CFGetAllocator(a1);
  uint64_t v47 = 0;
  CFAllocatorRef v48 = 0;
  uint64_t v46 = 0;
  CFArrayRef theArray = 0;
  int key_4 = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v6, 0, 0, 0);
  if (!Mutable)
  {
    CFMutableDictionaryRef v8 = 0;
LABEL_67:
    uint64_t v30 = 4294950305;
    goto LABEL_51;
  }
  CFMutableDictionaryRef v8 = CFDictionaryCreateMutable(v6, 0, 0, 0);
  if (!v8) {
    goto LABEL_67;
  }
  CFMutableDictionaryRef v41 = CFDictionaryCreateMutable(v6, 0, 0, 0);
  if (!v41) {
    goto LABEL_67;
  }
  CFDictionaryRef MutableCopy = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy)
  {
    uint64_t v30 = 4294950305;
    CFRelease(v41);
    goto LABEL_51;
  }
  CFTypeRef cf = (void *)FigCFArrayCreateMutableCopy();
  if (!cf)
  {
LABEL_74:
    uint64_t v30 = 4294950305;
    goto LABEL_50;
  }
  if (!FigCFDictionaryGetIntIfPresent()) {
    goto LABEL_69;
  }
  CFArrayRef v9 = (const __CFArray *)CFDictionaryGetValue(a2, @"ImageList");
  if (!v9)
  {
    uint64_t v30 = 4294950305;
    goto LABEL_49;
  }
  CFArrayRef v10 = v9;
  uint64_t v11 = CMPhotoPropertyListCopyWithMutableContainers(v6, v9, &theArray);
  if (v11
    || (CFDictionaryRef theDict = a2, CFDictionaryGetValue(a2, @"GroupList"))
    && (CFArrayRef v12 = (const __CFArray *)CFDictionaryGetValue(a2, @"GroupList")) != 0
    && (CFArrayRef v13 = v12, CFArrayGetCount(v12) >= 1)
    && (uint64_t v11 = CMPhotoPropertyListCopyWithMutableContainers(v6, v13, &v48), v11))
  {
LABEL_70:
    uint64_t v30 = v11;
LABEL_49:
    CFRelease(cf);
    goto LABEL_50;
  }
  CFIndex Count = CFArrayGetCount(v10);
  if (Count < 1)
  {
LABEL_69:
    uint64_t v11 = FigSignalErrorAt();
    goto LABEL_70;
  }
  CFIndex v15 = Count;
  CFAllocatorRef allocator = v6;
  int v36 = a3;
  uint64_t v16 = (uint64_t)a1;
  CFIndex v17 = 0;
  char v18 = 0;
  uint64_t v37 = v16;
  uint64_t v19 = v16 + 88;
  do
  {
    uint64_t v11 = _addGroupsForCurrentPosition();
    if (v11) {
      goto LABEL_70;
    }
    int key = -1;
    CFNumberRef value = (void *)-1;
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v10, v17);
    if (!ValueAtIndex)
    {
      uint64_t v30 = 4294950304;
      goto LABEL_49;
    }
    CFDictionaryRef v21 = ValueAtIndex;
    uint64_t v22 = v8;
    CFTypeID v23 = CFGetTypeID(ValueAtIndex);
    if (v23 != CFDictionaryGetTypeID() || !CFArrayGetValueAtIndex(theArray, v17))
    {
      uint64_t v30 = 4294950304;
      goto LABEL_48;
    }
    if (!CMPhotoCFDictionaryGetIntIfPresent(v21, @"ImageHandle", &key))
    {
      uint64_t v24 = FigSignalErrorAt();
LABEL_47:
      uint64_t v30 = v24;
LABEL_48:
      CFMutableDictionaryRef v8 = v22;
      goto LABEL_49;
    }
    if (key_4 == key) {
      char v18 = 1;
    }
    uint64_t v24 = _copyImageDescriptionToWriter(v19, v21, 0, 0, key, key_4 == key, v41, MutableCopy, (__CFArray *)cf, &value);
    if (v24) {
      goto LABEL_47;
    }
    uint64_t v24 = FigCFDictionarySetInt();
    if (v24) {
      goto LABEL_47;
    }
    CFDictionaryAddValue(Mutable, (const void *)key, value);
    ++v17;
    CFMutableDictionaryRef v8 = v22;
  }
  while (v15 != v17);
  if (!v18) {
    goto LABEL_69;
  }
  uint64_t v11 = _addGroupsForCurrentPosition();
  if (v11) {
    goto LABEL_70;
  }
  *(void *)(v37 + 152) = Mutable;
  *(void *)(v37 + 160) = v22;
  *(void *)(v37 + 16_Block_object_dispose(&STACK[0x280], 8) = cf;
  if (v48)
  {
    uint64_t v25 = _addGenericListToWriter(v19, (uint64_t (*)(uint64_t, CFIndex, const void *, void **))_addGroupDescriptionToWriter, v48, &v47);
    if (v25) {
      goto LABEL_65;
    }
  }
  CFArrayRef v26 = (const __CFArray *)CFDictionaryGetValue(theDict, @"SequenceList");
  if (!v26)
  {
    uint64_t v31 = v36;
    if (!v36)
    {
      CFMutableDictionaryRef v8 = 0;
      CFMutableDictionaryRef Mutable = 0;
      uint64_t v30 = 0;
      goto LABEL_50;
    }
LABEL_36:
    CFMutableDictionaryRef v32 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (v32)
    {
      uint64_t v33 = v32;
      CFDictionaryGetValue(*(CFDictionaryRef *)(v37 + 152), (const void *)key_4);
      uint64_t v30 = FigCFDictionarySetInt();
      CFDictionarySetValue(v33, @"ImageList", theArray);
      if (v46) {
        CFDictionarySetValue(v33, @"SequenceList", v46);
      }
      if (v47) {
        CFDictionarySetValue(v33, @"GroupList", v47);
      }
      CFMutableDictionaryRef v8 = 0;
      CFMutableDictionaryRef Mutable = 0;
      *uint64_t v31 = v33;
      goto LABEL_50;
    }
    CFMutableDictionaryRef v8 = 0;
    CFMutableDictionaryRef Mutable = 0;
    goto LABEL_74;
  }
  CFArrayRef v27 = v26;
  CFTypeID v28 = CFGetTypeID(v26);
  if (v28 == CFArrayGetTypeID())
  {
    uint64_t v25 = _copyMainAndAuxImageSamplesIfNeeded(v37);
    if (!v25)
    {
      uint64_t v29 = _addGenericListToWriter(v19, (uint64_t (*)(uint64_t, CFIndex, const void *, void **))_addSequenceDescriptionToWriter, v27, &v46);
      uint64_t v30 = v29;
      CFMutableDictionaryRef v8 = 0;
      uint64_t v31 = v36;
      if (!v36)
      {
        CFMutableDictionaryRef Mutable = 0;
        goto LABEL_50;
      }
      CFMutableDictionaryRef Mutable = 0;
      if (v29) {
        goto LABEL_50;
      }
      goto LABEL_36;
    }
LABEL_65:
    uint64_t v30 = v25;
    CFMutableDictionaryRef v8 = 0;
    CFMutableDictionaryRef Mutable = 0;
  }
  else
  {
    CFMutableDictionaryRef v8 = 0;
    CFMutableDictionaryRef Mutable = 0;
    uint64_t v30 = 4294950306;
  }
LABEL_50:
  CFRelease(v41);
  CFRelease(MutableCopy);
LABEL_51:
  if (v48) {
    CFRelease(v48);
  }
  if (v47) {
    CFRelease(v47);
  }
  if (v46) {
    CFRelease(v46);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v8) {
    CFRelease(v8);
  }
  if (theArray) {
    CFRelease(theArray);
  }
  return v30;
}

uint64_t _copyPictureReaderToImageDescription(uint64_t a1, const void *a2, int a3, uint64_t a4, __CFDictionary *a5)
{
  CFTypeRef v121 = 0;
  CFTypeRef v122 = 0;
  uint64_t v119 = 0;
  CFNumberRef number = 0;
  uint64_t v117 = 0;
  uint64_t v118 = 0;
  uint64_t v115 = 0;
  uint64_t v116 = 0;
  uint64_t v114 = 0;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t FigBaseObject = FigPictureReaderGetFigBaseObject();
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  CFArrayRef v14 = *(uint64_t (**)(uint64_t, void, uint64_t, CFNumberRef *))(v13 + 48);
  if (!v14) {
    goto LABEL_221;
  }
  uint64_t v15 = v14(FigBaseObject, *MEMORY[0x1E4F333F8], v10, &number);
  if (v15) {
    goto LABEL_218;
  }
  int valuePtr = 0;
  if (!CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr))
  {
    CFMutableDictionaryRef Mutable = 0;
    uint64_t v64 = 0;
    HEIFOrientatiouint64_t n = 4294950194;
    goto LABEL_222;
  }
  if (valuePtr == 1953325424 || valuePtr == 1768187246)
  {
    cf[0] = 0;
    uint64_t v16 = *(void *)(a1 + 8);
    uint64_t v17 = FigPictureReaderGetFigBaseObject();
    uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v19 = v18 ? v18 : 0;
    CFAllocatorRef v20 = *(uint64_t (**)(uint64_t, void, uint64_t, CFTypeRef *))(v19 + 48);
    if (v20)
    {
      uint64_t v21 = v20(v17, *MEMORY[0x1E4F333A0], v16, cf);
      if (v21)
      {
        HEIFOrientatiouint64_t n = v21;
      }
      else
      {
        uint64_t v22 = (const void *)*MEMORY[0x1E4F333B0];
        CFTypeID v23 = (const void *)FigCFDictionaryGetValue();
        if (v23) {
          CFDictionarySetValue(a5, v22, v23);
        }
        HEIFOrientatiouint64_t n = 0;
      }
    }
    else
    {
      HEIFOrientatiouint64_t n = 4294954514;
    }
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    if (HEIFOrientation) {
      goto LABEL_219;
    }
  }
  _copyPropertyFromReaderToDictionary(a2, *MEMORY[0x1E4F333E8], @"ItemID", a5);
  _copyPropertyFromReaderToDictionary(a2, @"CodecType", @"CodecType", a5);
  cf[0] = 0;
  value[0] = 0;
  v134[0] = 0;
  CFAllocatorRef v25 = CFGetAllocator(a2);
  uint64_t v26 = FigPictureReaderGetFigBaseObject();
  uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v27) {
    uint64_t v28 = v27;
  }
  else {
    uint64_t v28 = 0;
  }
  uint64_t v29 = *(unsigned int (**)(uint64_t, void, CFAllocatorRef, CFTypeRef *))(v28 + 48);
  if (v29)
  {
    if (!v29(v26, *MEMORY[0x1E4F333D0], v25, cf))
    {
      CFDictionaryRef Extensions = CMFormatDescriptionGetExtensions((CMFormatDescriptionRef)cf[0]);
      if (cf[0])
      {
        CFDictionaryRef v31 = Extensions;
        uint64_t v32 = FigPictureReaderGetFigBaseObject();
        uint64_t v33 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v34 = v33 ? v33 : 0;
        uint64_t v35 = *(unsigned int (**)(uint64_t, void, CFAllocatorRef, CFArrayRef *))(v34 + 48);
        if (v35 && !v35(v32, *MEMORY[0x1E4F33438], v25, v134)) {
          BOOL v36 = CFArrayGetCount(v134[0]) == 1;
        }
        else {
          BOOL v36 = a3 == 2;
        }
        int v37 = v36;
        if (!CMPhotoCreateColorSpaceFromPixelBufferAttachments(v31, v37, (CGColorSpace **)value, 1, 1)
          && value[0])
        {
          CFDictionarySetValue(a5, @"ColorSpace", value[0]);
        }
      }
    }
  }
  if (v134[0]) {
    CFRelease(v134[0]);
  }
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (value[0]) {
    CFRelease(value[0]);
  }
  uint64_t v38 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v38) {
    uint64_t v39 = v38;
  }
  else {
    uint64_t v39 = 0;
  }
  uint64_t v40 = *(uint64_t (**)(const void *, CFTypeRef *))(v39 + 8);
  if (!v40) {
    goto LABEL_221;
  }
  uint64_t v15 = v40(a2, &v122);
  if (v15) {
    goto LABEL_218;
  }
  uint64_t v41 = *(void *)(a1 + 8);
  uint64_t CMBaseObject = FigPictureTileCursorServiceGetCMBaseObject();
  uint64_t v43 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v43) {
    uint64_t v44 = v43;
  }
  else {
    uint64_t v44 = 0;
  }
  CFDictionaryRef v45 = *(uint64_t (**)(uint64_t, void, uint64_t, CFTypeRef *))(v44 + 48);
  if (!v45) {
    goto LABEL_221;
  }
  uint64_t v15 = v45(CMBaseObject, *MEMORY[0x1E4F334A8], v41, &v121);
  if (v15)
  {
LABEL_218:
    HEIFOrientatiouint64_t n = v15;
LABEL_219:
    CFMutableDictionaryRef Mutable = 0;
LABEL_220:
    uint64_t v64 = 0;
    goto LABEL_222;
  }
  if (!v121)
  {
    CFMutableDictionaryRef Mutable = 0;
    uint64_t v64 = 0;
    HEIFOrientatiouint64_t n = 4294950304;
    goto LABEL_222;
  }
  CFDictionarySetValue(a5, @"TileDimensions", v121);
  LODWORD(cf[0]) = 1;
  LOBYTE(value[0]) = 0;
  HEIFOrientatiouint64_t n = CMPhotoPictureReaderGetHEIFOrientation(a2, value, (int *)cf);
  if (!HEIFOrientation && LOBYTE(value[0])) {
    HEIFOrientatiouint64_t n = CMPhotoCFDictionarySetInt(a5, @"Orientation", (int)cf[0]);
  }
  if (HEIFOrientation) {
    goto LABEL_219;
  }
  _copyPropertyFromReaderToDictionary(a2, *MEMORY[0x1E4F33438], @"PixelInformation", a5);
  if (a3 == 2)
  {
    _copyPropertyFromReaderToDictionary(a2, *MEMORY[0x1E4F33390], @"AuxiliaryImageType", a5);
    _copyPropertyFromReaderToDictionary(a2, *MEMORY[0x1E4F33388], @"AuxiliaryImageSubType", a5);
    goto LABEL_66;
  }
  if (a3)
  {
    int v48 = 0;
    goto LABEL_72;
  }
  uint64_t v46 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v47 = v46 ? v46 : 0;
  int v61 = *(uint64_t (**)(const void *, uint64_t *))(v47 + 16);
  if (!v61) {
    goto LABEL_221;
  }
  uint64_t v15 = v61(a2, &v119);
  if (v15) {
    goto LABEL_218;
  }
  uint64_t v62 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v63 = v62 ? v62 : 0;
  uint64_t v89 = *(uint64_t (**)(const void *, uint64_t *))(v63 + 32);
  if (!v89) {
    goto LABEL_221;
  }
  uint64_t v15 = v89(a2, &v118);
  if (v15) {
    goto LABEL_218;
  }
  uint64_t v90 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v91 = v90 ? v90 : 0;
  unsigned int v102 = *(uint64_t (**)(const void *, uint64_t *))(v91 + 48);
  if (!v102) {
    goto LABEL_221;
  }
  uint64_t v15 = v102(a2, &v117);
  if (v15) {
    goto LABEL_218;
  }
  uint64_t v103 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v104 = v103 ? v103 : 0;
  CFArrayRef v105 = *(uint64_t (**)(const void *, uint64_t *))(v104 + 80);
  if (!v105) {
    goto LABEL_221;
  }
  uint64_t v15 = v105(a2, &v115);
  if (v15) {
    goto LABEL_218;
  }
  uint64_t v106 = *(void *)(CMBaseObjectGetVTable() + 16);
  unsigned int v107 = v106 ? (void *)v106 : 0;
  if (*v107 < 2uLL || (uint64_t v108 = (uint64_t (*)(const void *, uint64_t *))v107[13]) == 0)
  {
LABEL_221:
    CFMutableDictionaryRef Mutable = 0;
    uint64_t v64 = 0;
    HEIFOrientatiouint64_t n = 4294954514;
    goto LABEL_222;
  }
  uint64_t v15 = v108(a2, &v114);
  if (v15) {
    goto LABEL_218;
  }
LABEL_66:
  int v48 = a3 == 2;
  uint64_t v49 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v49) {
    uint64_t v50 = v49;
  }
  else {
    uint64_t v50 = 0;
  }
  uint64_t v51 = *(uint64_t (**)(const void *, uint64_t *))(v50 + 64);
  if (!v51) {
    goto LABEL_221;
  }
  uint64_t v15 = v51(a2, &v116);
  if (v15) {
    goto LABEL_218;
  }
LABEL_72:
  if (*(unsigned char *)(a1 + 49))
  {
    CFMutableDictionaryRef Mutable = 0;
  }
  else
  {
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable(*(CFAllocatorRef *)(a1 + 8), 0, MEMORY[0x1E4F1D510]);
    if (!Mutable)
    {
      uint64_t v64 = 0;
LABEL_235:
      HEIFOrientatiouint64_t n = 4294950305;
      goto LABEL_222;
    }
    if (v119 >= 1)
    {
      int v110 = v48;
      uint64_t v53 = 0;
      CFIndex v54 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
      CFDictionaryRef v55 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
      do
      {
        cf[0] = 0;
        uint64_t v56 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v56) {
          uint64_t v57 = v56;
        }
        else {
          uint64_t v57 = 0;
        }
        CFAllocatorRef v58 = *(uint64_t (**)(const void *, uint64_t, CFTypeRef *))(v57 + 24);
        if (v58)
        {
          uint64_t v59 = v58(a2, v53, cf);
          if (v59)
          {
            HEIFOrientatiouint64_t n = v59;
            CFMutableDictionaryRef v60 = 0;
          }
          else
          {
            CFMutableDictionaryRef v60 = CFDictionaryCreateMutable(*(CFAllocatorRef *)(a1 + 8), 0, v54, v55);
            if (v60)
            {
              HEIFOrientatiouint64_t n = _copyPictureReaderToImageDescription(a1, cf[0], 1, v53, v60);
              if (!HEIFOrientation) {
                CFArrayAppendValue(Mutable, v60);
              }
            }
            else
            {
              HEIFOrientatiouint64_t n = 4294950305;
            }
          }
        }
        else
        {
          CFMutableDictionaryRef v60 = 0;
          HEIFOrientatiouint64_t n = 4294954514;
        }
        if (cf[0]) {
          CFRelease(cf[0]);
        }
        if (v60) {
          CFRelease(v60);
        }
        ++v53;
      }
      while (v53 < v119);
      int v48 = v110;
      if (HEIFOrientation) {
        goto LABEL_220;
      }
    }
    if (CFArrayGetCount(Mutable) >= 1) {
      CFDictionarySetValue(a5, @"ThumbnailImage", Mutable);
    }
  }
  if (*(unsigned char *)(a1 + 50))
  {
    uint64_t v64 = 0;
    goto LABEL_127;
  }
  uint64_t v64 = CFArrayCreateMutable(*(CFAllocatorRef *)(a1 + 8), 0, MEMORY[0x1E4F1D510]);
  if (!v64) {
    goto LABEL_235;
  }
  if (v118 < 1) {
    goto LABEL_125;
  }
  int v111 = v48;
  uint64_t v65 = 0;
  CFIndex v66 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  do
  {
    cf[0] = 0;
    uint64_t v67 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v67) {
      uint64_t v68 = v67;
    }
    else {
      uint64_t v68 = 0;
    }
    uint64_t v69 = *(uint64_t (**)(const void *, uint64_t, CFTypeRef *))(v68 + 40);
    if (v69)
    {
      uint64_t v70 = v69(a2, v65, cf);
      if (v70)
      {
        HEIFOrientatiouint64_t n = v70;
        CFMutableDictionaryRef v71 = 0;
      }
      else
      {
        CFMutableDictionaryRef v71 = CFDictionaryCreateMutable(*(CFAllocatorRef *)(a1 + 8), 0, MEMORY[0x1E4F1D530], v66);
        if (v71)
        {
          HEIFOrientatiouint64_t n = _copyPictureReaderToImageDescription(a1, cf[0], 2, v65, v71);
          if (!HEIFOrientation) {
            CFArrayAppendValue(v64, v71);
          }
        }
        else
        {
          HEIFOrientatiouint64_t n = 4294950305;
        }
      }
    }
    else
    {
      CFMutableDictionaryRef v71 = 0;
      HEIFOrientatiouint64_t n = 4294954514;
    }
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    if (v71) {
      CFRelease(v71);
    }
    ++v65;
  }
  while (v65 < v118);
  int v48 = v111;
  if (!HEIFOrientation)
  {
LABEL_125:
    if (CFArrayGetCount(v64) >= 1) {
      CFDictionarySetValue(a5, @"Auxiliary", v64);
    }
LABEL_127:
    int v72 = *(unsigned __int8 *)(a1 + 48);
    if (*(unsigned char *)(a1 + 48))
    {
LABEL_204:
      if (((v72 != 0) & ~v48) != 0
        || (uint64_t v73 = _copyMetadataTypeFromReaderToDictionary((uint64_t)a2, *(CFAllocatorRef *)(a1 + 8), v116, 1, a5),
            !v73))
      {
        uint64_t v73 = CMPhotoCFDictionarySetInt(a5, @"ImageHandle", a4);
      }
      goto LABEL_207;
    }
    uint64_t v73 = _copyMetadataTypeFromReaderToDictionary((uint64_t)a2, *(CFAllocatorRef *)(a1 + 8), v117, 0, a5);
    if (v73
      || (uint64_t v73 = _copyMetadataTypeFromReaderToDictionary((uint64_t)a2, *(CFAllocatorRef *)(a1 + 8), v115, 2, a5),
          v73)
      || (int v112 = v48,
          uint64_t v73 = _copyMetadataTypeFromReaderToDictionary((uint64_t)a2, *(CFAllocatorRef *)(a1 + 8), v114, 4, a5),
          v73))
    {
LABEL_207:
      HEIFOrientatiouint64_t n = v73;
      goto LABEL_222;
    }
    CFAllocatorRef v74 = *(const __CFAllocator **)(a1 + 8);
    uint64_t v133 = 0;
    v134[0] = 0;
    uint64_t v131 = 0;
    uint64_t v132 = 0;
    CFTypeRef v129 = 0;
    CFTypeRef v130 = 0;
    uint64_t v75 = FigPictureReaderGetFigBaseObject();
    uint64_t v76 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v76) {
      uint64_t v77 = v76;
    }
    else {
      uint64_t v77 = 0;
    }
    int v78 = *(unsigned int (**)(uint64_t, void, void, CFArrayRef *))(v77 + 48);
    if (v78)
    {
      if (!v78(v75, *MEMORY[0x1E4F33448], 0, v134))
      {
        long long v128 = 0u;
        *(_OWORD *)CFTypeRef cf = 0u;
        if (!CMPhotoPictureReaderGetImageGeometryFromPictureReader(a2, 0, (unint64_t)cf, 0))
        {
          unsigned int v126 = 1;
          if (!CMPhotoPictureReaderGetHEIFOrientation(a2, 0, (int *)&v126))
          {
            int v79 = (const void *)FigCFDictionaryGetValue();
            if (v79) {
              int v79 = CFRetain(v79);
            }
            uint64_t v133 = v79;
            int v125 = 0;
            int Int32IfPresent = FigCFDictionaryGetInt32IfPresent();
            long long v81 = v133;
            if (v133 || !Int32IfPresent)
            {
LABEL_145:
              if (v81)
              {
                CFAllocatorRef v82 = CFGetAllocator(a2);
                int v83 = CFDictionaryCreateMutable(v82, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                if (!v83) {
                  goto LABEL_186;
                }
                *(_OWORD *)CFNumberRef value = v128;
                if (CMPhotoFlipSizeIfNeeded(v126, v128, *((uint64_t *)&v128 + 1), value)) {
                  goto LABEL_186;
                }
                if (v131)
                {
                  CFRelease(v131);
                  uint64_t v131 = 0;
                }
                CFAllocatorRef v84 = CFGetAllocator(a2);
                if (CMPhotoCreateIntrinsicsMatrixFromFigIntrinsicsDict(v84, v133, v128, *((uint64_t *)&v128 + 1), (uint64_t)value[0], (uint64_t)value[1], 0, &v131))
                {
LABEL_186:
                  uint64_t v88 = 0;
                  goto LABEL_187;
                }
                CFDictionarySetValue(v83, @"Intrinsics_Matrix", v131);
                CFDictionarySetValue(v83, @"Intrinsics_Storage", v133);
                CFDictionaryRef v85 = (const __CFDictionary *)v133;
                uint64_t v86 = cmpweak_kFigCameraIntrinsics_OfficialBox();
                int v87 = CFDictionaryGetValue(v85, v86);
                if (v87) {
                  CFDictionarySetValue(v83, @"Intrinsics_OfficialBox", v87);
                }
                CFDictionaryAddValue(a5, @"Intrinsics", v83);
              }
              else
              {
                int v83 = 0;
              }
              unsigned int v92 = (const void *)FigCFDictionaryGetValue();
              if (v92) {
                int v93 = (__CFDictionary *)CFRetain(v92);
              }
              else {
                int v93 = 0;
              }
              uint64_t v132 = v93;
              int v123 = 0;
              int v94 = FigCFDictionaryGetInt32IfPresent();
              if (v93 || !v94)
              {
                if (v93)
                {
LABEL_176:
                  CFAllocatorRef v97 = CFGetAllocator(a2);
                  uint64_t v88 = CFDictionaryCreateMutable(v97, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                  if (v88)
                  {
                    CFAllocatorRef v98 = CFGetAllocator(a2);
                    if (!_createPositionAndRotationFromFigExtrinsics(v98, v132, &v130, &v129, 0, 0))
                    {
                      CFDictionarySetValue(v88, @"Extrinsics_Position", v130);
                      CFDictionarySetValue(v88, @"Extrinsics_Rotation", v129);
                      CFDictionarySetValue(v88, @"Extrinsics_Storage", v132);
                      CFDictionaryRef v99 = v132;
                      uint64_t v100 = cmpweak_kFigCameraExtrinsics_OfficialBox();
                      uint64_t v101 = CFDictionaryGetValue(v99, v100);
                      if (v101) {
                        CFDictionarySetValue(v88, @"Extrinsics_OfficialBox", v101);
                      }
                      CFDictionaryAddValue(a5, @"Extrinsics", v88);
                    }
                  }
                  goto LABEL_187;
                }
              }
              else
              {
                if (a4) {
                  int v95 = v123;
                }
                else {
                  int v95 = 0;
                }
                value[0] = 0;
                if (!CMPhotoCreateExtrinsicsPositionArrayFromExtrinsicsValues(v74, v95, 0, 0, (__CFArray **)value))
                {
                  int v96 = CMPhotoCreateFigExtrinsicsDictFromExtrinsics(v74, (unint64_t)value[0], 0, 0, 0, &v132);
                  if (value[0]) {
                    CFRelease(value[0]);
                  }
                  uint64_t v88 = 0;
                  if (v96 || !v132) {
                    goto LABEL_187;
                  }
                  goto LABEL_176;
                }
              }
              goto LABEL_186;
            }
            if (!CMPhotoCreateIntrinsicsArrayFromHorizontalFOV(v74, v128, *((unint64_t *)&v128 + 1), v125, &v131)&& !CMPhotoCreateFigIntrinsicsDictFromIntrinsicsMatrix((int)v74, v131, v128, *((uint64_t *)&v128 + 1), v126, 0, (uint64_t)&v133))
            {
              long long v81 = v133;
              goto LABEL_145;
            }
          }
        }
      }
    }
    uint64_t v88 = 0;
    int v83 = 0;
LABEL_187:
    if (v131) {
      CFRelease(v131);
    }
    if (v130) {
      CFRelease(v130);
    }
    if (v129) {
      CFRelease(v129);
    }
    if (v133) {
      CFRelease(v133);
    }
    if (v132) {
      CFRelease(v132);
    }
    if (v83) {
      CFRelease(v83);
    }
    if (v88) {
      CFRelease(v88);
    }
    if (v134[0]) {
      CFRelease(v134[0]);
    }
    int v72 = *(unsigned __int8 *)(a1 + 48);
    int v48 = v112;
    goto LABEL_204;
  }
LABEL_222:
  if (number) {
    CFRelease(number);
  }
  if (v122) {
    CFRelease(v122);
  }
  if (v121) {
    CFRelease(v121);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v64) {
    CFRelease(v64);
  }
  return HEIFOrientation;
}

void _copyPropertyFromReaderToDictionary(const void *a1, uint64_t a2, const void *a3, __CFDictionary *a4)
{
  CFNumberRef value = 0;
  CFAllocatorRef v7 = CFGetAllocator(a1);
  uint64_t FigBaseObject = FigPictureReaderGetFigBaseObject();
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, CFAllocatorRef, void **))(v10 + 48);
  if (v11)
  {
    int v12 = v11(FigBaseObject, a2, v7, &value);
    uint64_t v13 = value;
    if (!v12)
    {
      if (!value) {
        return;
      }
      CFDictionarySetValue(a4, a3, value);
      uint64_t v13 = value;
    }
    if (v13) {
      CFRelease(v13);
    }
  }
}

uint64_t _copyMetadataTypeFromReaderToDictionary(uint64_t a1, CFAllocatorRef allocator, uint64_t a3, int a4, __CFDictionary *a5)
{
  int v48 = 0;
  CFTypeRef v46 = 0;
  CFNumberRef value = 0;
  uint64_t v44 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v42 = 0;
  uint64_t v43 = 0;
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    if (a3 >= 1)
    {
      uint64_t v11 = 0;
      while (1)
      {
        CFTypeRef v12 = 0;
        uint64_t v41 = 0;
        int v40 = 0;
        uint64_t v13 = 0;
        switch(a4)
        {
          case 0:
            CFArrayRef v14 = *(void **)(CMBaseObjectGetVTable() + 16);
            if (v14) {
              uint64_t v15 = v14;
            }
            else {
              uint64_t v15 = 0;
            }
            if (*v15 >= 3uLL)
            {
              uint64_t v22 = (uint64_t (*)(uint64_t, uint64_t, int *, uint64_t *, void **, void **, CFTypeRef *, void, CFTypeRef *))v15[15];
              if (v22)
              {
                uint64_t v23 = v22(a1, v11, &v40, &v41, &v44, &v43, &cf, 0, &v42);
                goto LABEL_38;
              }
            }
            uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v24) {
              uint64_t v25 = v24;
            }
            else {
              uint64_t v25 = 0;
            }
            CFDictionaryRef v31 = *(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t *, void **, void **, CFTypeRef *, void))(v25 + 56);
            if (!v31) {
              goto LABEL_67;
            }
            uint64_t v23 = v31(a1, v11, &v40, &v41, &v44, &v43, &cf, 0);
            goto LABEL_38;
          case 1:
            uint64_t v16 = *(void **)(CMBaseObjectGetVTable() + 16);
            if (v16) {
              uint64_t v17 = v16;
            }
            else {
              uint64_t v17 = 0;
            }
            if (*v17 >= 3uLL
              && (uint64_t v26 = (uint64_t (*)(uint64_t, uint64_t, uint64_t *, void **, void **, CFTypeRef *, void, CFTypeRef *))v17[16]) != 0)
            {
              uint64_t v23 = v26(a1, v11, &v41, &v44, &v43, &cf, 0, &v42);
            }
            else
            {
              uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v27) {
                uint64_t v28 = v27;
              }
              else {
                uint64_t v28 = 0;
              }
              uint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t *, void **, void **, CFTypeRef *, void))(v28 + 72);
              if (!v29)
              {
LABEL_67:
                uint64_t v32 = 4294954514;
                goto LABEL_76;
              }
LABEL_37:
              uint64_t v23 = v29(a1, v11, &v41, &v44, &v43, &cf, 0);
            }
LABEL_38:
            uint64_t v32 = v23;
            if (v23) {
              goto LABEL_76;
            }
            uint64_t v13 = v41;
            CFTypeRef v12 = v42;
LABEL_40:
            uint64_t v33 = CMPhotoPictureReaderCreateContiguousDataFromChunks((uint64_t)allocator, v13, (uint64_t)v44, (uint64_t)v43, (uint64_t)cf, 0, (uint64_t)v12, 0, &v48);
            if (v33)
            {
              uint64_t v32 = v33;
              goto LABEL_76;
            }
            if (!v48)
            {
              uint64_t v32 = 4294950194;
              goto LABEL_76;
            }
            if (a4 == 4)
            {
              CFMutableDictionaryRef v34 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              if (!v34) {
                goto LABEL_89;
              }
              CFMutableDictionaryRef v35 = v34;
              CFArrayAppendValue(Mutable, v34);
              CFRelease(v35);
              CFDictionarySetValue(v35, @"Data", v48);
              if (value) {
                CFDictionarySetValue(v35, @"URI", value);
              }
              if (v46) {
                CFDictionarySetValue(v35, @"Name", v46);
              }
            }
            else
            {
              CFArrayAppendValue(Mutable, v48);
            }
            BOOL v36 = v44;
            if (v44)
            {
              uint64_t v44 = 0;
              free(v36);
            }
            int v37 = v43;
            if (v43)
            {
              uint64_t v43 = 0;
              free(v37);
            }
            if (cf)
            {
              CFRelease(cf);
              CFTypeRef cf = 0;
            }
            if (v48)
            {
              CFRelease(v48);
              int v48 = 0;
            }
            if (value)
            {
              CFRelease(value);
              CFNumberRef value = 0;
            }
            if (v46)
            {
              CFRelease(v46);
              CFTypeRef v46 = 0;
            }
            if (v42)
            {
              CFRelease(v42);
              CFTypeRef v42 = 0;
            }
            if (a3 == ++v11) {
              goto LABEL_64;
            }
            break;
          case 2:
            uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v18) {
              uint64_t v19 = v18;
            }
            else {
              uint64_t v19 = 0;
            }
            uint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t *, void **, void **, CFTypeRef *, void))(v19 + 88);
            if (v29) {
              goto LABEL_37;
            }
            goto LABEL_67;
          case 4:
            CFAllocatorRef v20 = *(void **)(CMBaseObjectGetVTable() + 16);
            if (v20) {
              uint64_t v21 = v20;
            }
            else {
              uint64_t v21 = 0;
            }
            if (*v21 < 2uLL) {
              goto LABEL_67;
            }
            uint64_t v30 = (uint64_t (*)(uint64_t, uint64_t, uint64_t *, void **, void **, CFTypeRef *, void, void **, CFTypeRef *))v21[14];
            if (!v30) {
              goto LABEL_67;
            }
            uint64_t v23 = v30(a1, v11, &v41, &v44, &v43, &cf, 0, &value, &v46);
            goto LABEL_38;
          default:
            goto LABEL_40;
        }
      }
    }
LABEL_64:
    uint64_t v32 = 0;
    switch(a4)
    {
      case 0:
        if (CFArrayGetCount(Mutable) < 1) {
          goto LABEL_75;
        }
        uint64_t v38 = &kCMPhotoCompressionContainerDescription_EXIFMetadata;
        break;
      case 1:
        if (CFArrayGetCount(Mutable) < 1) {
          goto LABEL_75;
        }
        uint64_t v38 = &kCMPhotoCompressionContainerDescription_XMPMetadata;
        break;
      case 2:
        if (CFArrayGetCount(Mutable) < 1) {
          goto LABEL_75;
        }
        uint64_t v38 = &kCMPhotoCompressionContainerDescription_DebugMetadata;
        break;
      case 4:
        if (CFArrayGetCount(Mutable) < 1) {
          goto LABEL_75;
        }
        uint64_t v38 = &kCMPhotoCompressionContainerDescription_CustomMetadata;
        break;
      default:
        goto LABEL_76;
    }
    CFDictionarySetValue(a5, *v38, Mutable);
LABEL_75:
    uint64_t v32 = 0;
  }
  else
  {
LABEL_89:
    uint64_t v32 = 4294950305;
  }
LABEL_76:
  free(v44);
  free(v43);
  if (cf) {
    CFRelease(cf);
  }
  if (v48) {
    CFRelease(v48);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (value) {
    CFRelease(value);
  }
  if (v46) {
    CFRelease(v46);
  }
  return v32;
}

uint64_t _createPositionAndRotationFromFigExtrinsics(const __CFAllocator *a1, CFDictionaryRef theDict, CFTypeRef *a3, CFTypeRef *a4, BOOL *a5, BOOL *a6)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  CFTypeRef v26 = 0;
  int v28 = 0;
  uint64_t v27 = 0;
  RotationMatrixFromQuaternionArradouble y = 4294950306;
  if (a3 && a4)
  {
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F32790]);
    if (Value && CFArrayGetCount(Value) == 3)
    {
      uint64_t v14 = 0;
      uint64_t v15 = &v27;
      do
      {
        if (!FigCFArrayGetInt32AtIndex()) {
          goto LABEL_11;
        }
        ++v14;
        uint64_t v15 = (uint64_t *)((char *)v15 + 4);
      }
      while (v14 != 3);
      int v16 = v27;
      if (a5)
      {
        int v17 = HIDWORD(v27);
        if (v27) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v28 == 0;
        }
        *a5 = v18;
      }
      else
      {
        int v17 = HIDWORD(v27);
      }
      uint64_t ExtrinsicsPositionArrayFromExtrinsicsValues = CMPhotoCreateExtrinsicsPositionArrayFromExtrinsicsValues(a1, v16, v17, v28, (__CFArray **)&v26);
      if (ExtrinsicsPositionArrayFromExtrinsicsValues)
      {
        RotationMatrixFromQuaternionArradouble y = ExtrinsicsPositionArrayFromExtrinsicsValues;
        CFTypeRef v23 = v26;
LABEL_27:
        if (v23) {
          CFRelease(v23);
        }
        goto LABEL_12;
      }
      CFAllocatorRef v20 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F327A0]);
      if (v20)
      {
        uint64_t v21 = v20;
        int v22 = 1;
        if (!a6) {
          goto LABEL_21;
        }
      }
      else
      {
        uint64_t v21 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F32798]);
        int v22 = 0;
        if (!a6)
        {
LABEL_21:
          RotationMatrixFromQuaternionArradouble y = CMPhotoCreateRotationMatrixFromQuaternionArray(a1, v21, v22, (__CFArray **)&cf);
          CFTypeRef v23 = v26;
          if (!RotationMatrixFromQuaternionArray)
          {
            *a3 = v26;
            *a4 = cf;
            return RotationMatrixFromQuaternionArray;
          }
          goto LABEL_27;
        }
      }
      *a6 = v21 == 0;
      goto LABEL_21;
    }
LABEL_11:
    RotationMatrixFromQuaternionArradouble y = 4294950304;
  }
LABEL_12:
  if (cf) {
    CFRelease(cf);
  }
  return RotationMatrixFromQuaternionArray;
}

uint64_t _hasTrackReferenceOfType(const __CFDictionary *a1, const void *a2, int a3, char *a4)
{
  if (!a1) {
    goto LABEL_9;
  }
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a1, a2);
  if (!Value) {
    goto LABEL_9;
  }
  CFIndex Count = CFArrayGetCount(Value);
  CFIndex v8 = Count;
  if (Count)
  {
    return FigSignalErrorAt();
  }
  if (Count >= 1)
  {
    CFIndex v9 = 0;
    while (FigCFArrayGetInt32AtIndex())
    {
      if (!a3)
      {
        char v10 = 1;
        goto LABEL_10;
      }
      v9 += 2;
      if (v9 >= v8) {
        goto LABEL_9;
      }
    }
    return 4294950304;
  }
  else
  {
LABEL_9:
    char v10 = 0;
LABEL_10:
    uint64_t result = 0;
    if (a4) {
      *a4 = v10;
    }
  }
  return result;
}

uint64_t _copyTrackReferencesOfType(const __CFDictionary *a1, const void *a2, int a3, const __CFArray **a4)
{
  if (!a1) {
    return 4294950303;
  }
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a1, a2);
  if (!Value) {
    return 4294950303;
  }
  CFArrayRef v7 = Value;
  CFIndex Count = CFArrayGetCount(Value);
  if (Count < 1) {
    return 4294950303;
  }
  CFIndex v9 = Count;
  if (Count)
  {
    return FigSignalErrorAt();
  }
  if ((unint64_t)Count < 2) {
    return 4294950303;
  }
  CFArrayRef Mutable = 0;
  CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v12 = 1;
  uint64_t v13 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
  while (1)
  {
    if (!FigCFArrayGetInt32AtIndex())
    {
      uint64_t v15 = 4294950304;
      if (!Mutable) {
        return v15;
      }
      goto LABEL_20;
    }
    if (!a3) {
      break;
    }
LABEL_12:
    v12 += 2;
    if (v12 >= v9)
    {
      if (!Mutable) {
        return 4294950303;
      }
      if (CFArrayGetCount(Mutable) < 1)
      {
        uint64_t v15 = 4294950303;
      }
      else
      {
        uint64_t v15 = 0;
        if (a4)
        {
          *a4 = Mutable;
          return v15;
        }
      }
LABEL_20:
      CFRelease(Mutable);
      return v15;
    }
  }
  if (Mutable || (CFArrayRef Mutable = CFArrayCreateMutable(v11, 0, v13)) != 0)
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v7, v12 ^ 1);
    CFArrayAppendValue(Mutable, ValueAtIndex);
    goto LABEL_12;
  }
  return 4294950305;
}

uint64_t _createSequenceReader_0(uint64_t a1, uint64_t a2, const void *a3, void *a4)
{
  CFAllocatorRef v6 = (char *)malloc_type_calloc(1uLL, 0x30uLL, 0x10200400824DF26uLL);
  if (!v6) {
    return 4294950305;
  }
  CFArrayRef v7 = v6;
  if (a3) {
    CFTypeRef v8 = CFRetain(a3);
  }
  else {
    CFTypeRef v8 = 0;
  }
  *(void *)CFArrayRef v7 = v8;
  CFIndex v9 = (CFTypeRef *)(v7 + 8);
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(uint64_t (**)(const void *, char *))(v11 + 32);
  if (!v12) {
    goto LABEL_23;
  }
  uint64_t v13 = v12(a3, v7 + 8);
  if (v13) {
    goto LABEL_35;
  }
  uint64_t v14 = *((void *)v7 + 1);
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  int v17 = *(uint64_t (**)(uint64_t, char *))(v16 + 24);
  if (!v17) {
    goto LABEL_23;
  }
  uint64_t v13 = v17(v14, v7 + 16);
  if (v13
    || (*((void *)v7 + 4) = 0, uint64_t v13 = FigSampleGeneratorCreateForFormatReaderUsingByteStreams(), v13))
  {
LABEL_35:
    uint64_t v22 = v13;
    goto LABEL_24;
  }
  uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v18) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = 0;
  }
  CFAllocatorRef v20 = *(uint64_t (**)(const void *, char *, char *))(v19 + 8);
  if (!v20)
  {
LABEL_23:
    uint64_t v22 = 4294954514;
    goto LABEL_24;
  }
  uint64_t v21 = v20(a3, v7 + 44, v7 + 40);
  uint64_t v22 = v21;
  if (a4 && !v21)
  {
    *a4 = v7;
    return v22;
  }
LABEL_24:
  if (*v9) {
    CFRelease(*v9);
  }
  CFTypeRef v23 = (const void *)*((void *)v7 + 2);
  if (v23) {
    CFRelease(v23);
  }
  uint64_t v24 = (const void *)*((void *)v7 + 3);
  if (v24) {
    CFRelease(v24);
  }
  if (*(void *)v7) {
    CFRelease(*(CFTypeRef *)v7);
  }
  free(v7);
  return v22;
}

uint64_t _createReferenceSequenceReaders(const __CFAllocator *a1, uint64_t a2, const __CFArray *a3, int a4, CFMutableArrayRef *a5)
{
  CFTypeRef cf = 0;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, 0);
  if (!Mutable) {
    return 4294950305;
  }
  CFMutableArrayRef v11 = Mutable;
  unint64_t v12 = 0;
  if (!a3) {
    goto LABEL_4;
  }
LABEL_3:
  for (unint64_t i = CFArrayGetCount(a3); v12 < i; unint64_t i = 0)
  {
    unsigned int v23 = 0;
    if (!FigCFArrayGetInt32AtIndex())
    {
      uint64_t v19 = 4294950304;
      goto LABEL_20;
    }
    int v22 = 0;
    uint64_t v14 = v23;
    uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v15) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    int v17 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, int *))(v16 + 56);
    if (!v17)
    {
      uint64_t v19 = 4294954514;
LABEL_20:
      CFRelease(v11);
      goto LABEL_23;
    }
    uint64_t v18 = v17(a2, v14, &cf, &v22);
    if (v18) {
      goto LABEL_27;
    }
    if (v22 == a4)
    {
      CFNumberRef value = 0;
      uint64_t v18 = _createSequenceReader_0((uint64_t)a1, a2, cf, &value);
      if (v18)
      {
LABEL_27:
        uint64_t v19 = v18;
        goto LABEL_20;
      }
      CFArrayAppendValue(v11, value);
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    ++v12;
    if (a3) {
      goto LABEL_3;
    }
LABEL_4:
    ;
  }
  uint64_t v19 = 0;
  if (!a5) {
    goto LABEL_20;
  }
  *a5 = v11;
LABEL_23:
  if (cf) {
    CFRelease(cf);
  }
  return v19;
}

uint64_t _moveCursorToPosition_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v4 = a2 - v2;
    if (a2 == v2)
    {
      return 0;
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v8) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = 0;
      }
      uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(v9 + 176);
      if (v10)
      {
        uint64_t result = v10(v7, v4, &v11);
        if (!result)
        {
          if (v11 == v4)
          {
            uint64_t result = 0;
            *(void *)(a1 + 32) = a2;
          }
          else
          {
            return 4294950194;
          }
        }
      }
      else
      {
        return 4294954514;
      }
    }
  }
  return result;
}

uint64_t _createReferenceSequencesDescription(const __CFAllocator *a1, CFArrayRef theArray, CMTime *a3, __CFArray **a4)
{
  uint64_t v7 = 0;
  CFIndex v8 = 0;
  uint64_t v9 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  uint64_t v10 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  if (!theArray) {
    goto LABEL_3;
  }
LABEL_2:
  for (CFIndex i = CFArrayGetCount(theArray); v8 < i; CFIndex i = 0)
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v8);
    BOOL v19 = 0;
    CMTime v18 = *a3;
    uint64_t v13 = _moveCursorToPresentationTime((uint64_t)ValueAtIndex, &v18, &v19);
    if (v13)
    {
      uint64_t v15 = v13;
      CFMutableDictionaryRef Mutable = 0;
      goto LABEL_16;
    }
    if (v19)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, v9, v10);
      if (!Mutable
        || (FigCFDictionarySetInt(), !v7) && (uint64_t v7 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510])) == 0)
      {
        uint64_t v15 = 4294950305;
        goto LABEL_16;
      }
      CFArrayAppendValue(v7, Mutable);
      CFRelease(Mutable);
    }
    ++v8;
    if (theArray) {
      goto LABEL_2;
    }
LABEL_3:
    ;
  }
  if (a4)
  {
    uint64_t v15 = 0;
    *a4 = v7;
    return v15;
  }
  CFMutableDictionaryRef Mutable = 0;
  uint64_t v15 = 0;
LABEL_16:
  if (v7) {
    CFRelease(v7);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v15;
}

uint64_t _moveCursorToPresentationTime(uint64_t a1, CMTime *a2, BOOL *a3)
{
  memset(&v22, 0, sizeof(v22));
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, CMTime *))(v8 + 40);
  if (!v9) {
    return 4294954514;
  }
  uint64_t result = v9(v6, &v22);
  if (result) {
    return result;
  }
  CMTime time1 = *a2;
  CMTime time2 = v22;
  if (!CMTimeCompare(&time1, &time2))
  {
LABEL_19:
    CMTime time1 = *a2;
    CMTime time2 = v22;
    int32_t v19 = CMTimeCompare(&time1, &time2);
    uint64_t result = 0;
    *a3 = v19 == 0;
    return result;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  CMTime time1 = *a2;
  CMTime time2 = v22;
  CMTimeSubtract(&v20, &time1, &time2);
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v13 = v12 ? v12 : 0;
  uint64_t v14 = *(uint64_t (**)(uint64_t, CMTime *))(v13 + 128);
  if (!v14) {
    return 4294954514;
  }
  CMTime time1 = v20;
  uint64_t result = v14(v11, &time1);
  if (!result || result == -12840)
  {
    uint64_t v15 = *(void *)(a1 + 16);
    uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v16) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = 0;
    }
    CMTime v18 = *(uint64_t (**)(uint64_t, CMTime *))(v17 + 40);
    if (v18)
    {
      uint64_t result = v18(v15, &v22);
      if (result) {
        return result;
      }
      *(void *)(a1 + 32) = -1;
      goto LABEL_19;
    }
    return 4294954514;
  }
  return result;
}

uint64_t _addGroupsForCurrentPosition()
{
  uint64_t v2 = 0;
  unsigned int v3 = &v2;
  uint64_t v4 = 0x2000000000;
  int v5 = 0;
  FigCFArrayApplyBlock();
  uint64_t v0 = *((unsigned int *)v3 + 6);
  _Block_object_dispose(&v2, 8);
  return v0;
}

uint64_t _copyImageDescriptionToWriter(uint64_t a1, const __CFDictionary *a2, CFIndex a3, int a4, uint64_t a5, int a6, const __CFDictionary *a7, const __CFDictionary *a8, __CFArray *a9, void **a10)
{
  uint64_t v208 = *MEMORY[0x1E4F143B8];
  CFTypeRef v184 = 0;
  unsigned int v183 = 0;
  CFTypeRef cf = 0;
  CFNumberRef value = (void *)-1;
  CFTypeRef v179 = 0;
  CFTypeRef v180 = 0;
  CFTypeRef v178 = 0;
  int v177 = 0;
  if (!a7)
  {
    CFMutableDictionaryRef Mutable = 0;
    uint64_t v38 = 4294950304;
    goto LABEL_60;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(*(CFAllocatorRef *)(a1 + 8), 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    goto LABEL_286;
  }
  if (!FigCFDictionaryGetIntIfPresent()
    || !CMPhotoCFDictionaryGetInt32IfPresent(a2, @"CodecType", &v183))
  {
    goto LABEL_195;
  }
  CFDictionaryRef theDict = a8;
  unsigned int v18 = v183;
  BOOL v19 = v183 == 1953325424 || v183 == 1768187246;
  BOOL v20 = !v19;
  if (a4 && !v20) {
    goto LABEL_195;
  }
  uint64_t v164 = (void *)*MEMORY[0x1E4F332F8];
  FigCFDictionarySetValueFromKeyInDict();
  unsigned int v176 = 1;
  if (CMPhotoCFDictionaryGetIntIfPresent(a2, @"Orientation", &v176))
  {
    LODWORD(v185[0]) = 0;
    LODWORD(v199) = 0;
    uint64_t v21 = CMPhotoHEIFRotationCCWAndMirroringFromExifOrientation(v176, v185, (int *)&v199);
    if (v21) {
      goto LABEL_196;
    }
    uint64_t v21 = CMPhotoCFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E4F332F0], (int)v185[0]);
    if (v21) {
      goto LABEL_196;
    }
    if (v199 != -1)
    {
      uint64_t v21 = CMPhotoCFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E4F332B8], (int)v199);
      if (v21) {
        goto LABEL_196;
      }
    }
  }
  int v165 = (void *)*MEMORY[0x1E4F332E0];
  FigCFDictionarySetValueFromKeyInDict();
  if (!a4)
  {
    CFArrayRef v173 = (const __CFArray *)CFDictionaryGetValue(a2, @"ThumbnailImage");
    CFArrayRef v170 = (const __CFArray *)CFDictionaryGetValue(a2, @"Auxiliary");
    CMTime v22 = CFDictionaryGetValue(a2, @"EXIFMetadata");
    CFTypeRef v169 = CFDictionaryGetValue(a2, @"DebugMetadata");
    long long v168 = CFDictionaryGetValue(a2, @"CustomMetadata");
    uint64_t v21 = CMPhotoCFDictionarySetBoolean(Mutable, (const void *)*MEMORY[0x1E4F332E8], a6);
    if (v21) {
      goto LABEL_196;
    }
    CFBooleanRef v167 = v22;
    goto LABEL_24;
  }
  if (a4 == 2)
  {
    if (FigCFDictionarySetValueFromKeyInDict())
    {
      FigCFDictionarySetValueFromKeyInDict();
      CFArrayRef v173 = 0;
      CFArrayRef v170 = 0;
      CFBooleanRef v167 = 0;
      long long v168 = 0;
      CFTypeRef v169 = 0;
LABEL_24:
      int v23 = a4 == 2;
      uint64_t v24 = CFDictionaryGetValue(a2, @"XMPMetadata");
      goto LABEL_26;
    }
LABEL_195:
    uint64_t v21 = FigSignalErrorAt();
    goto LABEL_196;
  }
  int v23 = 0;
  long long v168 = 0;
  CFTypeRef v169 = 0;
  CFBooleanRef v167 = 0;
  CFArrayRef v170 = 0;
  CFArrayRef v173 = 0;
  uint64_t v24 = 0;
LABEL_26:
  uint64_t v25 = *(void *)(a1 + 32);
  uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v26) {
    uint64_t v27 = v26;
  }
  else {
    uint64_t v27 = 0;
  }
  int v28 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, void))(v27 + 16);
  if (!v28) {
    goto LABEL_59;
  }
  int v163 = v24;
  uint64_t v21 = v28(v25, a5, &cf, 0);
  if (v21) {
    goto LABEL_196;
  }
  CFTypeRef v29 = cf;
  uint64_t v30 = v177;
  switch(a4)
  {
    case 2:
      uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v34) {
        uint64_t v35 = v34;
      }
      else {
        uint64_t v35 = 0;
      }
      int v37 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *))(v35 + 40);
      if (!v37) {
        goto LABEL_59;
      }
LABEL_46:
      uint64_t v36 = v37(v29, v30, &v180);
      goto LABEL_47;
    case 1:
      uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v32) {
        uint64_t v33 = v32;
      }
      else {
        uint64_t v33 = 0;
      }
      int v37 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *))(v33 + 24);
      if (!v37) {
        goto LABEL_59;
      }
      goto LABEL_46;
    case 0:
      if (cf) {
        CFTypeRef v31 = CFRetain(cf);
      }
      else {
        CFTypeRef v31 = 0;
      }
      CFTypeRef v180 = v31;
      goto LABEL_51;
  }
  uint64_t v36 = FigSignalErrorAt();
LABEL_47:
  uint64_t v38 = v36;
  if (v36) {
    goto LABEL_60;
  }
LABEL_51:
  uint64_t FigBaseObject = FigPictureReaderGetFigBaseObject();
  uint64_t v40 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v40) {
    uint64_t v41 = v40;
  }
  else {
    uint64_t v41 = 0;
  }
  CFTypeRef v42 = *(uint64_t (**)(uint64_t))(v41 + 48);
  if (!v42)
  {
LABEL_59:
    uint64_t v38 = 4294954514;
    goto LABEL_60;
  }
  uint64_t v160 = *MEMORY[0x1E4F333E8];
  uint64_t v21 = v42(FigBaseObject);
  if (v21) {
    goto LABEL_196;
  }
  unint64_t key = CMPhotoCFNumberGetInt32(0);
  int v162 = CFDictionaryContainsKey(a7, (const void *)key);
  if (((v162 != 0) & ~v23) != 0)
  {
    uint64_t v38 = 4294950300;
    goto LABEL_60;
  }
  uint64_t v43 = *(void *)(a1 + 8);
  uint64_t v44 = FigPictureReaderGetFigBaseObject();
  uint64_t v45 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v45) {
    uint64_t v46 = v45;
  }
  else {
    uint64_t v46 = 0;
  }
  int v48 = *(unsigned int (**)(uint64_t, void, uint64_t, CFTypeRef *))(v46 + 48);
  if (v48 && !v48(v44, *MEMORY[0x1E4F333C8], v43, &v178)) {
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F332A8], v178);
  }
  if (v18 == 1953325424 || v18 == 1768187246)
  {
    CFTypeRef v187 = 0;
    CFNumberRef v188 = 0;
    int valuePtr = 0;
    uint64_t v49 = *(void *)(a1 + 8);
    uint64_t v50 = FigPictureReaderGetFigBaseObject();
    uint64_t v51 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v51) {
      uint64_t v52 = v51;
    }
    else {
      uint64_t v52 = 0;
    }
    CFDictionaryRef v55 = *(uint64_t (**)(uint64_t, void, uint64_t, const __CFNumber **))(v52 + 48);
    CFDictionaryRef v53 = theDict;
    if (v55)
    {
      uint64_t v56 = v55(v50, *MEMORY[0x1E4F333F8], v49, &v188);
      if (v56)
      {
        uint64_t v38 = v56;
        CFAllocatorRef v58 = 0;
        CFArrayRef v59 = 0;
      }
      else
      {
        if (CFNumberGetValue(v188, kCFNumberSInt32Type, &valuePtr))
        {
          uint64_t v54 = a5;
          if (valuePtr == 1953325424)
          {
            int v57 = 1;
          }
          else
          {
            if (valuePtr != 1768187246)
            {
              CFAllocatorRef v58 = 0;
              CFArrayRef v59 = 0;
              uint64_t v38 = 4294950300;
              goto LABEL_216;
            }
            int v57 = 2;
          }
          uint64_t v63 = *(void *)(a1 + 8);
          uint64_t v64 = FigPictureReaderGetFigBaseObject();
          uint64_t v65 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v65) {
            uint64_t v66 = v65;
          }
          else {
            uint64_t v66 = 0;
          }
          uint64_t v67 = *(uint64_t (**)(uint64_t, void, uint64_t, CFTypeRef *))(v66 + 48);
          if (!v67)
          {
            CFAllocatorRef v58 = 0;
            CFArrayRef v59 = 0;
            uint64_t v38 = 4294954514;
            goto LABEL_216;
          }
          uint64_t v68 = v67(v64, *MEMORY[0x1E4F333A0], v63, &v187);
          if (v68)
          {
            uint64_t v38 = v68;
            CFAllocatorRef v58 = 0;
            CFArrayRef v59 = 0;
            goto LABEL_216;
          }
          CFArrayRef v69 = (const __CFArray *)FigCFDictionaryGetValue();
          CFArrayRef v59 = v69;
          if (v69)
          {
            CFTypeID v70 = CFGetTypeID(v69);
            if (v70 == CFArrayGetTypeID() && CFArrayGetCount(v59) >= 1)
            {
              uint64_t MutableCopy = FigCFArrayCreateMutableCopy();
              if (!MutableCopy)
              {
                CFAllocatorRef v58 = 0;
                CFArrayRef v59 = 0;
                uint64_t v38 = 4294950305;
                goto LABEL_216;
              }
              CFArrayRef v156 = (const __CFArray *)MutableCopy;
              if (CFArrayGetCount(v59) >= 1)
              {
                CFIndex v72 = 0;
                CFIndex v158 = 0;
                int v73 = 0;
                CFDictionaryRef v154 = (const void *)*MEMORY[0x1E4F332A8];
                int v153 = (const void *)*MEMORY[0x1E4F1CFC8];
                uint64_t v151 = (const void *)*MEMORY[0x1E4F332F0];
                CFMutableArrayRef v150 = (const void *)*MEMORY[0x1E4F332B8];
                uint64_t v148 = *MEMORY[0x1E4F334A8];
                uint64_t v147 = *MEMORY[0x1E4F33438];
                int v152 = v57;
                CFArrayRef theArray = v59;
                while (1)
                {
                  if (v188)
                  {
                    CFRelease(v188);
                    CFNumberRef v188 = 0;
                  }
                  CFIndex v157 = v72;
                  CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v59, v72);
                  uint64_t v75 = *(void *)(a1 + 8);
                  uint64_t v159 = ValueAtIndex;
                  uint64_t v76 = FigPictureReaderGetFigBaseObject();
                  uint64_t v77 = *(void *)(CMBaseObjectGetVTable() + 8);
                  if (v77) {
                    uint64_t v78 = v77;
                  }
                  else {
                    uint64_t v78 = 0;
                  }
                  int v79 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const __CFNumber **))(v78 + 48);
                  if (!v79)
                  {
                    CFAllocatorRef v58 = 0;
                    uint64_t v38 = 4294954514;
                    goto LABEL_215;
                  }
                  uint64_t v80 = v79(v76, v160, v75, &v188);
                  if (v80)
                  {
                    uint64_t v38 = v80;
                    CFAllocatorRef v58 = 0;
                    goto LABEL_215;
                  }
                  unint64_t Int32 = CMPhotoCFNumberGetInt32(v188);
                  CFArrayRef v59 = v156;
                  if (CFDictionaryContainsKey(a7, (const void *)Int32))
                  {
                    int v82 = CFDictionaryGetValue(a7, (const void *)Int32);
                    goto LABEL_178;
                  }
                  if (!v157)
                  {
                    uint64_t v38 = FigSignalErrorAt();
                    CFAllocatorRef v58 = 0;
                    goto LABEL_296;
                  }
                  int v83 = 0;
                  v185[0] = 0;
                  CFTypeRef v198 = 0;
                  CFTypeRef v199 = 0;
                  int v82 = -1;
                  CFIndex v197 = -1;
                  uint64_t v38 = 4294950306;
                  if (!v158 || !v159) {
                    goto LABEL_169;
                  }
                  uint64_t v84 = _copyFormatDescriptionFromPictureReader(a1, (uint64_t)v159, v185);
                  if (v84) {
                    goto LABEL_184;
                  }
                  uint64_t v85 = *(void *)(a1 + 8);
                  uint64_t v86 = FigPictureReaderGetFigBaseObject();
                  uint64_t v87 = *(void *)(CMBaseObjectGetVTable() + 8);
                  if (v87) {
                    uint64_t v88 = v87;
                  }
                  else {
                    uint64_t v88 = 0;
                  }
                  uint64_t v89 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v88 + 48);
                  if (!v89)
                  {
                    int v83 = 0;
                    uint64_t v38 = 4294954514;
                    goto LABEL_169;
                  }
                  uint64_t v84 = v89(v86, @"CodecType", v85, &v198);
                  if (v84)
                  {
LABEL_184:
                    uint64_t v38 = v84;
                    int v83 = 0;
                    goto LABEL_169;
                  }
                  Uunint64_t Int32 = FigCFNumberGetUInt32();
                  uint64_t v91 = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
                  int v83 = v91;
                  if (!v91)
                  {
                    uint64_t v38 = 4294950305;
                    goto LABEL_168;
                  }
                  CFDictionarySetValue(v91, v154, v153);
                  __int16 v196 = 0;
                  uint64_t v195 = 0xFFFFFFFFLL;
                  uint64_t OrientationTransformsForImage = CMPhotoHEIFFileWriterGetOrientationTransformsForImage(*(void *)a1, v73, (unsigned char *)&v196 + 1, (_DWORD *)&v195 + 1, &v196, &v195);
                  if (OrientationTransformsForImage) {
                    goto LABEL_183;
                  }
                  unsigned int v149 = UInt32;
                  int v194 = 1;
                  if (HIBYTE(v196) | v196)
                  {
                    uint64_t OrientationTransformsForImage = CMPhotoExifOrientationFromHEIFRotationCCWAndMirroring(SHIDWORD(v195), v195, &v194);
                    if (OrientationTransformsForImage) {
                      goto LABEL_183;
                    }
                  }
                  char v193 = 0;
                  int v192 = 1;
                  uint64_t OrientationTransformsForImage = CMPhotoPictureReaderGetHEIFOrientation(v158, &v193, &v192);
                  if (OrientationTransformsForImage) {
                    goto LABEL_183;
                  }
                  char v191 = 0;
                  int v190 = 1;
                  HEIFOrientatiouint64_t n = CMPhotoPictureReaderGetHEIFOrientation(v159, &v191, &v190);
                  if (HEIFOrientation) {
                    goto LABEL_187;
                  }
                  if (v192 != v194) {
                    break;
                  }
                  if (v191)
                  {
                    HEIFOrientatiouint64_t n = CMPhotoHEIFRotationCCWAndMirroringFromExifOrientation(v190, (_DWORD *)&v195 + 1, (int *)&v195);
                    if (HEIFOrientation) {
                      goto LABEL_187;
                    }
                    int v94 = HIDWORD(v195) != 0;
                    int v95 = v195 != -1;
LABEL_146:
                    if (v94)
                    {
                      HEIFOrientatiouint64_t n = CMPhotoCFDictionarySetInt(v83, v151, SHIDWORD(v195));
                      if (HEIFOrientation) {
                        goto LABEL_187;
                      }
                    }
                    if (v95)
                    {
                      HEIFOrientatiouint64_t n = CMPhotoCFDictionarySetInt(v83, v150, v195);
                      if (HEIFOrientation) {
                        goto LABEL_187;
                      }
                    }
                  }
                  uint64_t v96 = *(void *)(CMBaseObjectGetVTable() + 16);
                  if (v96) {
                    uint64_t v97 = v96;
                  }
                  else {
                    uint64_t v97 = 0;
                  }
                  int v57 = v152;
                  CFAllocatorRef v98 = *(uint64_t (**)(const void *, CFTypeRef *))(v97 + 8);
                  if (!v98) {
                    goto LABEL_167;
                  }
                  uint64_t OrientationTransformsForImage = v98(v159, &v199);
                  if (OrientationTransformsForImage) {
                    goto LABEL_183;
                  }
                  long long v189 = 0;
                  uint64_t v99 = *(void *)(a1 + 8);
                  uint64_t CMBaseObject = FigPictureTileCursorServiceGetCMBaseObject();
                  uint64_t v101 = *(void *)(CMBaseObjectGetVTable() + 8);
                  uint64_t v102 = v101 ? v101 : 0;
                  uint64_t v103 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const void **))(v102 + 48);
                  if (!v103)
                  {
LABEL_167:
                    uint64_t v38 = 4294954514;
LABEL_168:
                    int v82 = -1;
                    goto LABEL_169;
                  }
                  uint64_t OrientationTransformsForImage = v103(CMBaseObject, v148, v99, &v189);
                  if (OrientationTransformsForImage) {
                    goto LABEL_183;
                  }
                  if (!v189)
                  {
                    uint64_t v38 = 4294950304;
                    goto LABEL_168;
                  }
                  CFDictionarySetValue(v83, v164, v189);
                  if (v189) {
                    CFRelease(v189);
                  }
                  _copyPropertyFromReaderToDictionary(v159, v147, v165, v83);
                  uint64_t OrientationTransformsForImage = CMPhotoHEIFFileWriterAddImageToCollection(*(void *)a1, v83, v149, v185[0], &v197);
                  if (OrientationTransformsForImage)
                  {
LABEL_183:
                    uint64_t v38 = OrientationTransformsForImage;
                    goto LABEL_168;
                  }
                  uint64_t v38 = _copyReaderTilesToWriter((uint64_t)v159, *(const __CFAllocator **)(a1 + 8), *(void *)a1, v197);
                  if (v38) {
                    int v82 = -1;
                  }
                  else {
                    int v82 = v197;
                  }
LABEL_169:
                  if (v199) {
                    CFRelease(v199);
                  }
                  if (v83) {
                    CFRelease(v83);
                  }
                  if (v185[0]) {
                    CFRelease(v185[0]);
                  }
                  CFArrayRef v59 = v156;
                  if (v198) {
                    CFRelease(v198);
                  }
                  if (v38) {
                    goto LABEL_293;
                  }
LABEL_178:
                  uint64_t appended = CMPhotoCFArrayAppendInt32(v59, v82);
                  if (appended)
                  {
                    uint64_t v38 = appended;
LABEL_293:
                    CFAllocatorRef v58 = 0;
                    uint64_t v54 = a5;
                    goto LABEL_216;
                  }
                  CFArrayRef v105 = v158;
                  if (!v157)
                  {
                    int v73 = v82;
                    CFArrayRef v105 = v159;
                  }
                  CFIndex v158 = v105;
                  CFIndex v72 = v157 + 1;
                  CFArrayRef v59 = theArray;
                  uint64_t v54 = a5;
                  if (v157 + 1 >= CFArrayGetCount(theArray))
                  {
                    CFIndex v108 = v73;
                    goto LABEL_197;
                  }
                }
                if (v190 != v192)
                {
                  HEIFOrientatiouint64_t n = FigSignalErrorAt();
LABEL_187:
                  uint64_t v38 = HEIFOrientation;
                  int v82 = -1;
                  int v57 = v152;
                  goto LABEL_169;
                }
                int v94 = HIBYTE(v196);
                int v95 = v196;
                goto LABEL_146;
              }
              CFIndex v108 = 0;
LABEL_197:
              uint64_t v109 = (void *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F333B0]);
              CFTypeRef v199 = 0;
              int v110 = CFDictionaryGetValue(a2, v165);
              if (v110 && !CMPhotoCFArrayGetSizeAtIndex(v110, 0, &v199))
              {
                CFAllocatorRef v58 = 0;
                uint64_t v38 = 4294950306;
              }
              else
              {
                int v111 = (CGColorSpace *)CFDictionaryGetValue(a2, @"ColorSpace");
                v185[0] = 0;
                v185[1] = 0;
                uint64_t PropertiesForImage = CMPhotoHEIFFileWriterGetPropertiesForImage(*(void *)a1, v108, v185, 0);
                if (!PropertiesForImage)
                {
                  LODWORD(v19_Block_object_dispose(&STACK[0x280], 8) = 0;
                  uint64_t PropertiesForImage = CMPhotoHEIFFileWriterGetOrientationTransformsForImage(*(void *)a1, v108, 0, &v198, 0, 0);
                  if (!PropertiesForImage)
                  {
                    CFTypeRef v166 = v111;
                    uint64_t v54 = a5;
                    if (v198 == 270 || v198 == 90) {
                      *(int8x16_t *)uint64_t v185 = vextq_s8(*(int8x16_t *)v185, *(int8x16_t *)v185, 8uLL);
                    }
                    int v113 = v57;
                    LODWORD(v197) = -1;
                    if (CMPhotoCFDictionaryGetIntIfPresent(a2, @"Orientation", &v197))
                    {
                      CFAllocatorRef v58 = CFDictionaryCreateMutable(*(CFAllocatorRef *)(a1 + 8), 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                      if (v58)
                      {
                        if (v197 == 1)
                        {
                          LODWORD(v189) = -1;
                          HIDWORD(v195) = -1;
                          CMPhotoHEIFRotationCCWAndMirroringFromExifOrientation(1, &v189, (int *)&v195 + 1);
                          uint64_t v114 = CMPhotoCFDictionarySetInt(v58, (const void *)*MEMORY[0x1E4F332F0], (int)v189);
                          if (v114
                            || HIDWORD(v195) != -1
                            && (uint64_t v114 = CMPhotoCFDictionarySetInt(v58, (const void *)*MEMORY[0x1E4F332B8], SHIDWORD(v195)), v114))
                          {
                            uint64_t v38 = v114;
                            CFDictionaryRef v53 = theDict;
LABEL_296:
                            uint64_t v54 = a5;
LABEL_215:
                            CFArrayRef v59 = v156;
LABEL_216:
                            if (v188) {
                              CFRelease(v188);
                            }
                            if (v187) {
                              CFRelease(v187);
                            }
                            if (v59) {
                              CFRelease(v59);
                            }
                            if (v58) {
                              CFRelease(v58);
                            }
                            if (v38) {
                              goto LABEL_60;
                            }
                            goto LABEL_225;
                          }
LABEL_212:
                          uint64_t v115 = v109;
                          CFArrayRef v59 = v156;
                          uint64_t v38 = CMPhotoHEIFFileWriterAddDerivedImageToCollection(*(void *)a1, (int)v58, v115, v113, (int32_t)v185[0], (int32_t)v185[1], (int)v199, v166, 0, 0, 0, v156, 0, (uint64_t *)&value);
                          CFDictionaryRef v53 = theDict;
                          goto LABEL_216;
                        }
                        uint64_t v38 = FigSignalErrorAt();
                      }
                      else
                      {
                        uint64_t v38 = 4294950305;
                      }
                      CFDictionaryRef v53 = theDict;
                      goto LABEL_215;
                    }
                    CFAllocatorRef v58 = 0;
                    goto LABEL_212;
                  }
                }
                uint64_t v38 = PropertiesForImage;
                CFAllocatorRef v58 = 0;
              }
              CFDictionaryRef v53 = theDict;
              uint64_t v54 = a5;
              goto LABEL_215;
            }
            CFAllocatorRef v58 = 0;
            CFArrayRef v59 = 0;
          }
          else
          {
            CFAllocatorRef v58 = 0;
          }
          uint64_t v38 = 4294950194;
          goto LABEL_216;
        }
        CFAllocatorRef v58 = 0;
        CFArrayRef v59 = 0;
        uint64_t v38 = 4294950194;
      }
    }
    else
    {
      CFAllocatorRef v58 = 0;
      CFArrayRef v59 = 0;
      uint64_t v38 = 4294954514;
    }
    uint64_t v54 = a5;
    goto LABEL_216;
  }
  uint64_t v21 = _copyFormatDescriptionFromPictureReader(a1, (uint64_t)v180, (CMFormatDescriptionRef *)&v184);
  if (v21)
  {
LABEL_196:
    uint64_t v38 = v21;
    goto LABEL_60;
  }
  CFDictionaryRef v53 = theDict;
  if (a4)
  {
    if (a4 == 1)
    {
      uint64_t v21 = CMPhotoHEIFFileWriterAddThumbnailToImage(*(void *)a1, Mutable, a3, v183, (const opaqueCMFormatDescription *)v184, (uint64_t *)&value);
      if (!v21)
      {
        uint64_t v21 = _copyReaderTilesToWriter((uint64_t)v180, *(const __CFAllocator **)(a1 + 8), *(void *)a1, (CFIndex)value);
        uint64_t v54 = a5;
        if (!v21)
        {
LABEL_225:
          if (v162) {
            goto LABEL_226;
          }
          CFDictionaryAddValue(a7, (const void *)key, value);
          uint64_t v172 = 0;
          goto LABEL_233;
        }
      }
      goto LABEL_196;
    }
    if (v162)
    {
      CFMutableDictionaryRef v60 = (void *)CFDictionaryGetValue(a7, (const void *)key);
      uint64_t v21 = CMPhotoHEIFFileWriterAddAuxiliaryReferenceToImage(*(void *)a1, (CFIndex)v60, a3);
      if (!v21)
      {
        int v61 = 0;
        uint64_t v62 = 0;
        CFNumberRef value = v60;
        goto LABEL_227;
      }
      goto LABEL_196;
    }
    uint64_t v21 = CMPhotoHEIFFileWriterAddAuxiliaryImageToImage(*(void *)a1, Mutable, a3, v183, (const opaqueCMFormatDescription *)v184, (uint64_t *)&value);
    uint64_t v54 = a5;
    if (v21) {
      goto LABEL_196;
    }
  }
  else
  {
    uint64_t v21 = CMPhotoHEIFFileWriterAddImageToCollection(*(void *)a1, Mutable, v183, (const opaqueCMFormatDescription *)v184, (uint64_t *)&value);
    if (v21) {
      goto LABEL_196;
    }
    uint64_t v54 = a5;
    if (v162)
    {
LABEL_226:
      int v61 = 0;
      uint64_t v62 = 0;
      goto LABEL_227;
    }
  }
  CFDictionaryAddValue(a7, (const void *)key, value);
  uint64_t v106 = (__CFArray *)FigCFArrayCreateMutableCopy();
  if (!v106)
  {
LABEL_286:
    uint64_t v38 = 4294950305;
    goto LABEL_60;
  }
  unsigned int v107 = v106;
  CFArrayAppendValue(v106, v180);
  CMPhotoCFArrayAppendInt32(v107, (int)value);
  uint64_t v172 = v107;
  CFArrayAppendValue(a9, v107);
LABEL_233:
  CFIndex v116 = 0;
  while (1)
  {
    CFIndex v117 = v173 ? CFArrayGetCount(v173) : 0;
    if (v116 >= v117) {
      break;
    }
    v185[0] = 0;
    LODWORD(v199) = 0;
    CFDictionaryRef v118 = (const __CFDictionary *)CFArrayGetValueAtIndex(v173, v116);
    if (!CMPhotoCFDictionaryGetIntIfPresent(v118, @"ImageHandle", &v199))
    {
LABEL_288:
      uint64_t v119 = FigSignalErrorAt();
LABEL_248:
      uint64_t v38 = v119;
      int v61 = v172;
      goto LABEL_249;
    }
    uint64_t v119 = _copyImageDescriptionToWriter(a1, v118, value, 1, v54, 0, a7, v53, a9, v185);
    ++v116;
    if (v119) {
      goto LABEL_248;
    }
  }
  CFIndex v120 = 0;
  while (1)
  {
    CFIndex v121 = v170 ? CFArrayGetCount(v170) : 0;
    if (v120 >= v121) {
      break;
    }
    v185[0] = 0;
    LODWORD(v199) = 0;
    CFDictionaryRef v122 = (const __CFDictionary *)CFArrayGetValueAtIndex(v170, v120);
    if (!CMPhotoCFDictionaryGetIntIfPresent(v122, @"ImageHandle", &v199)) {
      goto LABEL_288;
    }
    uint64_t v119 = _copyImageDescriptionToWriter(a1, v122, value, 2, v54, 0, a7, v53, a9, v185);
    ++v120;
    if (v119) {
      goto LABEL_248;
    }
  }
  __int16 v200 = v167;
  int v201 = 0;
  __int16 v202 = v163;
  int v203 = 1;
  __int16 v204 = v169;
  int v205 = 2;
  __int16 v206 = v168;
  int v207 = 4;
  CFMutableDictionaryRef v123 = CFDictionaryCreateMutable(*(CFAllocatorRef *)(a1 + 8), 0, 0, 0);
  if (v123)
  {
    uint64_t v62 = v123;
    CFArrayRef v124 = 0;
    while (2)
    {
      CFDictionaryRemoveAllValues(v62);
      CFIndex v125 = 0;
      CFArrayRef v174 = v124;
      unsigned int v126 = &v200 + 2 * (void)v124;
      CFArrayRef v129 = (const __CFArray *)*v126;
      int v127 = (int *)(v126 + 1);
      CFArrayRef v128 = v129;
      if (!v129)
      {
LABEL_276:
        CFIndex Count = 0;
        goto LABEL_277;
      }
      while (1)
      {
        CFIndex Count = CFArrayGetCount(v128);
LABEL_277:
        if (v125 >= Count) {
          break;
        }
        CFDataRef v130 = (const __CFData *)CFArrayGetValueAtIndex(v128, v125);
        if (v130)
        {
          CFDataRef v131 = v130;
          CFTypeID v132 = CFGetTypeID(v130);
          if (v132 == CFDataGetTypeID())
          {
            CFIndex Length = CFDataGetLength(v131);
          }
          else
          {
            CFTypeID v134 = CFGetTypeID(v131);
            if (v134 != CFDictionaryGetTypeID()) {
              goto LABEL_284;
            }
            CFIndex Length = CFDictionaryGetCount(v131);
          }
          CFIndex v135 = Length;
          LODWORD(v185[0]) = 0;
          int Int32IfPresent = CMPhotoCFDictionaryGetInt32IfPresent(theDict, v131, v185);
          int v137 = CFDictionaryContainsKey(v62, (const void *)LODWORD(v185[0]));
          if (!Int32IfPresent || v137)
          {
            if (v135)
            {
              uint64_t v139 = 0;
              LODWORD(v199) = 0;
              int v140 = *v127;
              if (!*v127)
              {
                LOBYTE(v19_Block_object_dispose(&STACK[0x280], 8) = 0;
                uint64_t v138 = CMPhotoExifDetectTIFFHeaderOffset(v131, &v198, &v199);
                if (v138) {
                  goto LABEL_285;
                }
                if (!(_BYTE)v198)
                {
LABEL_284:
                  uint64_t v138 = FigSignalErrorAt();
LABEL_285:
                  uint64_t v38 = v138;
                  int v61 = v172;
                  goto LABEL_229;
                }
                uint64_t v139 = v199;
              }
              uint64_t v138 = CMPhotoHEIFFileWriterAddMetadataToImage(*(void *)a1, 0, (CFIndex)value, v140, v131, v139, 0, v185);
              if (v138) {
                goto LABEL_285;
              }
              if (LODWORD(v185[0]))
              {
                uint64_t v138 = CMPhotoCFDictionarySetInt32(theDict, v131, (int)v185[0]);
                if (v138) {
                  goto LABEL_285;
                }
              }
            }
          }
          else
          {
            uint64_t v138 = CMPhotoHEIFFileWriterAddMetadataReferenceToImage(*(void *)a1, LODWORD(v185[0]), (CFIndex)value);
            if (v138) {
              goto LABEL_285;
            }
          }
          if (LODWORD(v185[0])) {
            CFDictionarySetValue(v62, (const void *)LODWORD(v185[0]), 0);
          }
        }
        ++v125;
        if (!v128) {
          goto LABEL_276;
        }
      }
      CFArrayRef v124 = (CFArrayRef)((char *)v174 + 1);
      if (v174 != (CFArrayRef)3) {
        continue;
      }
      break;
    }
    uint64_t v142 = FigCFDictionaryGetValue();
    uint64_t v143 = FigCFDictionaryGetValue();
    if (v142 | v143)
    {
      uint64_t v144 = v143;
      uint64_t Dimensions = (uint64_t)CMVideoFormatDescriptionGetDimensions((CMVideoFormatDescriptionRef)v184);
      uint64_t ItemPropertiesFromIntrinsicsAndExtrinsics = _createItemPropertiesFromIntrinsicsAndExtrinsics(*(const __CFAllocator **)(a1 + 8), (int)Dimensions, Dimensions >> 32, v176, v142, v144, (__CFDictionary **)&v179);
      int v61 = v172;
      if (ItemPropertiesFromIntrinsicsAndExtrinsics
        || CFDictionaryGetCount((CFDictionaryRef)v179) >= 1
        && (uint64_t ItemPropertiesFromIntrinsicsAndExtrinsics = CMPhotoHEIFFileWriterAddMetadataToImage(*(void *)a1, 0, (CFIndex)value, 3, v179, 0, 0, 0), ItemPropertiesFromIntrinsicsAndExtrinsics))
      {
        uint64_t v38 = ItemPropertiesFromIntrinsicsAndExtrinsics;
        goto LABEL_229;
      }
    }
    else
    {
      int v61 = v172;
    }
LABEL_227:
    uint64_t v38 = 0;
    if (a10) {
      *a10 = value;
    }
LABEL_229:
    if (v62)
    {
      CFRelease(v62);
      if (!v61) {
        goto LABEL_60;
      }
    }
    else
    {
LABEL_249:
      if (!v61) {
        goto LABEL_60;
      }
    }
LABEL_250:
    CFRelease(v61);
    goto LABEL_60;
  }
  uint64_t v38 = 4294950305;
  int v61 = v172;
  if (v172) {
    goto LABEL_250;
  }
LABEL_60:
  if (v179) {
    CFRelease(v179);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v180) {
    CFRelease(v180);
  }
  if (v184) {
    CFRelease(v184);
  }
  if (v178) {
    CFRelease(v178);
  }
  return v38;
}

uint64_t _addGenericListToWriter(uint64_t a1, uint64_t (*a2)(uint64_t, CFIndex, const void *, void **), const __CFArray *a3, __CFArray **a4)
{
  CFNumberRef value = 0;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(*(CFAllocatorRef *)(a1 + 8), 0, MEMORY[0x1E4F1D510]);
  if (!Mutable) {
    return 4294950305;
  }
  uint64_t v9 = Mutable;
  CFIndex v10 = 0;
  if (!a3) {
    goto LABEL_4;
  }
LABEL_3:
  for (CFIndex i = CFArrayGetCount(a3); v10 < i; CFIndex i = 0)
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a3, v10);
    uint64_t v13 = a2(a1, v10, ValueAtIndex, &value);
    if (v13)
    {
      uint64_t v14 = v13;
      goto LABEL_13;
    }
    CFArrayAppendValue(v9, value);
    if (value)
    {
      CFRelease(value);
      CFNumberRef value = 0;
    }
    ++v10;
    if (a3) {
      goto LABEL_3;
    }
LABEL_4:
    ;
  }
  uint64_t v14 = 0;
  if (a4)
  {
    *a4 = v9;
    uint64_t v9 = 0;
  }
LABEL_13:
  if (value) {
    CFRelease(value);
  }
  if (v9) {
    CFRelease(v9);
  }
  return v14;
}

uint64_t _addGroupDescriptionToWriter(uint64_t a1, uint64_t a2, const void *a3, CFDictionaryRef *a4)
{
  CFDictionaryRef theDict = 0;
  uint64_t v8 = CMPhotoPropertyListCopyWithMutableContainers(*(const __CFAllocator **)(a1 + 8), a3, &theDict);
  if (v8) {
    goto LABEL_23;
  }
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(theDict, @"ImageList");
  if (!Value) {
    goto LABEL_22;
  }
  CFArrayRef v10 = Value;
  CFTypeID v11 = CFGetTypeID(Value);
  if (v11 != CFArrayGetTypeID()) {
    goto LABEL_22;
  }
  CFIndex Count = CFArrayGetCount(v10);
  if (Count <= 0) {
    goto LABEL_22;
  }
  CFIndex v13 = Count;
  uint64_t v8 = CMPhotoCFDictionarySetSize(theDict, @"GroupHandle", a2);
  if (v8)
  {
LABEL_23:
    uint64_t v21 = v8;
    goto LABEL_24;
  }
  uint64_t v25 = 0;
  if (CMPhotoCFDictionaryGetSizeIfPresent((const __CFDictionary *)a3, @"GroupID", &v25))
  {
    CFDictionaryRemoveValue(theDict, @"GroupID");
    CFIndex v14 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v10, v14);
      if (!ValueAtIndex) {
        break;
      }
      CFDictionaryRef v16 = ValueAtIndex;
      CFTypeID v17 = CFGetTypeID(ValueAtIndex);
      if (v17 != CFDictionaryGetTypeID()) {
        break;
      }
      unint64_t key = 0;
      if (CMPhotoCFDictionaryGetLongIfPresent(v16, @"ImageHandle", &key))
      {
        if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 64), key)) {
          break;
        }
        unsigned int v18 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), key);
        uint64_t v8 = CMPhotoHEIFFileWriterAddImageToGroup(*(void *)a1, (CFIndex)v18, v25);
        if (v8) {
          goto LABEL_23;
        }
        CFDictionaryRef v19 = v16;
        BOOL v20 = @"ImageHandle";
      }
      else
      {
        int v23 = 0;
        if (!CMPhotoCFDictionaryGetLongIfPresent(v16, @"GroupHandle", &v23)
          || !CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 72), v23))
        {
          break;
        }
        unsigned int v18 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 72), v23);
        uint64_t v8 = CMPhotoHEIFFileWriterAddGroupToGroup(*(void *)a1, (uint64_t)v18, v25);
        if (v8) {
          goto LABEL_23;
        }
        CFDictionaryRef v19 = v16;
        BOOL v20 = @"GroupHandle";
      }
      uint64_t v8 = CMPhotoCFDictionarySetSize(v19, v20, v18);
      if (v8) {
        goto LABEL_23;
      }
      if (v13 == ++v14)
      {
        uint64_t v21 = 0;
        if (!a4) {
          goto LABEL_24;
        }
        *a4 = theDict;
        return v21;
      }
    }
LABEL_22:
    uint64_t v8 = FigSignalErrorAt();
    goto LABEL_23;
  }
  uint64_t v21 = 4294950304;
LABEL_24:
  if (theDict) {
    CFRelease(theDict);
  }
  return v21;
}

uint64_t _copyMainAndAuxImageSamplesIfNeeded(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 112) || *(unsigned char *)(a1 + 113)) {
    return 0;
  }
  for (uint64_t i = 0; ; ++i)
  {
    CFArrayRef Count = *(const __CFArray **)(a1 + 168);
    if (Count) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if (i >= (uint64_t)Count)
    {
      uint64_t result = 0;
      *(unsigned char *)(a1 + 113) = 1;
      return result;
    }
    CFArrayRef ValueAtIndex = (const __CFArray *)FigCFArrayGetValueAtIndex();
    if (!ValueAtIndex) {
      break;
    }
    if (CFArrayGetCount(ValueAtIndex) != 2) {
      break;
    }
    uint64_t v5 = FigCFArrayGetValueAtIndex();
    if (!FigCFArrayGetInt32AtIndex()) {
      break;
    }
    uint64_t result = _copyReaderTilesToWriter(v5, *(const __CFAllocator **)(a1 + 96), *(void *)(a1 + 88), 0);
    if (result) {
      goto LABEL_14;
    }
  }
  uint64_t result = 4294950304;
LABEL_14:
  *(unsigned char *)(a1 + 104) = 1;
  return result;
}

uint64_t _addSequenceDescriptionToWriter(uint64_t a1, uint64_t a2, const void *a3, CFDictionaryRef *a4)
{
  CMSampleBufferRef v44 = 0;
  CFIndex v45 = -1;
  CFDictionaryRef theDict = 0;
  uint64_t v7 = CMPhotoPropertyListCopyWithMutableContainers(*(const __CFAllocator **)(a1 + 8), a3, &theDict);
  if (v7) {
    goto LABEL_33;
  }
  iddouble x = 0;
  if (!CMPhotoCFDictionaryGetLongIfPresent((CFDictionaryRef)a3, @"SequenceHandle", &idx)) {
    goto LABEL_32;
  }
  CFIndex v8 = idx;
  if (idx < 0) {
    goto LABEL_32;
  }
  CFArrayRef v9 = *(const __CFArray **)(a1 + 56);
  if (!v9) {
    goto LABEL_32;
  }
  if (v8 >= CFArrayGetCount(v9)) {
    goto LABEL_32;
  }
  CFArrayRef ValueAtIndex = (uint64_t *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), idx);
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)a3, @"ImageList");
  if (!Value) {
    goto LABEL_32;
  }
  CFArrayRef v37 = Value;
  CFTypeID v12 = CFGetTypeID(Value);
  BOOL v13 = v12 == CFArrayGetTypeID();
  CFArrayRef v14 = v37;
  if (!v13) {
    goto LABEL_32;
  }
  CFArrayRef theArray = (const __CFArray *)CFDictionaryGetValue(theDict, @"ImageList");
  uint64_t v7 = CMPhotoHEIFFileWriterAddSequence(*(void *)a1, 0, &v45);
  if (v7) {
    goto LABEL_33;
  }
  uint64_t v7 = FigCFDictionarySetInt();
  if (v7) {
    goto LABEL_33;
  }
  uint64_t v35 = a4;
  if (CFArrayGetCount(v37) >= 1)
  {
    CMSampleBufferRef v15 = 0;
    CFIndex v16 = 0;
    while (1)
    {
      CFDictionaryRef v17 = (const __CFDictionary *)CFArrayGetValueAtIndex(v14, v16);
      if (!v17) {
        break;
      }
      CFDictionaryRef v18 = v17;
      CFTypeID v19 = CFGetTypeID(v17);
      if (v19 != CFDictionaryGetTypeID()) {
        break;
      }
      CFDictionaryRef v20 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v16);
      uint64_t v41 = -1;
      if (!CMPhotoCFDictionaryGetLongIfPresent(v18, @"ImageHandle", &v41))
      {
        uint64_t v33 = 4294950306;
        goto LABEL_35;
      }
      uint64_t v7 = _moveCursorToPosition_0(*ValueAtIndex, v41);
      if (v7) {
        goto LABEL_33;
      }
      if (v15)
      {
        CFRelease(v15);
        CMSampleBufferRef v44 = 0;
      }
      uint64_t v7 = _createSampleBufferAtCursor(*ValueAtIndex, &v44);
      if (v7) {
        goto LABEL_33;
      }
      CMSampleBufferRef v15 = v44;
      FormatDescriptiouint64_t n = CMSampleBufferGetFormatDescription(v44);
      FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(FormatDescription);
      memset(&v40, 0, sizeof(v40));
      CMSampleBufferGetPresentationTimeStamp(&v40, v15);
      CFIndex v39 = 0;
      uint64_t v7 = CMPhotoHEIFFileWriterAddImageToSequence(*(void *)a1, 0, 1, v45, MediaSubType, FormatDescription, &v39);
      if (v7) {
        goto LABEL_33;
      }
      uint64_t v7 = CMPhotoHEIFFileWriterAddSampleBufferToImage(*(void *)a1, 0, v39, v15);
      if (v7) {
        goto LABEL_33;
      }
      uint64_t v7 = FigCFDictionarySetInt();
      if (v7) {
        goto LABEL_33;
      }
      CFArrayRef v23 = (const __CFArray *)CFDictionaryGetValue(v18, @"ThumbnailImage");
      CFArrayRef v24 = v23;
      if (v23)
      {
        CFTypeID v25 = CFGetTypeID(v23);
        if (v25 != CFArrayGetTypeID()) {
          break;
        }
      }
      CFArrayRef v26 = (const __CFArray *)CFDictionaryGetValue(v20, @"ThumbnailImage");
      CFArrayRef v27 = (const __CFArray *)ValueAtIndex[1];
      CMTime v38 = v40;
      uint64_t v7 = _addReferenceSequencesDescriptionToWriter((uint64_t *)a1, 1, v24, v27, &v38, v39, v26);
      if (v7) {
        goto LABEL_33;
      }
      CFArrayRef v28 = (const __CFArray *)CFDictionaryGetValue(v18, @"Auxiliary");
      CFArrayRef v29 = v28;
      if (v28)
      {
        CFTypeID v30 = CFGetTypeID(v28);
        if (v30 != CFArrayGetTypeID()) {
          break;
        }
      }
      CFArrayRef v31 = (const __CFArray *)CFDictionaryGetValue(v20, @"Auxiliary");
      CFArrayRef v32 = (const __CFArray *)ValueAtIndex[2];
      CMTime v38 = v40;
      uint64_t v7 = _addReferenceSequencesDescriptionToWriter((uint64_t *)a1, 2, v29, v32, &v38, v39, v31);
      if (v7) {
        goto LABEL_33;
      }
      ++v16;
      CFArrayRef v14 = v37;
      if (v16 >= CFArrayGetCount(v37)) {
        goto LABEL_30;
      }
    }
LABEL_32:
    uint64_t v7 = FigSignalErrorAt();
LABEL_33:
    uint64_t v33 = v7;
    goto LABEL_35;
  }
LABEL_30:
  if (v35)
  {
    uint64_t v33 = 0;
    CFDictionaryRef *v35 = theDict;
    CFDictionaryRef theDict = 0;
    goto LABEL_37;
  }
  uint64_t v33 = 0;
LABEL_35:
  if (theDict) {
    CFRelease(theDict);
  }
LABEL_37:
  if (v44) {
    CFRelease(v44);
  }
  return v33;
}

void ___addGroupsForCurrentPosition_block_invoke(uint64_t a1, CFDictionaryRef theDict)
{
  if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v17 = 0;
    if (!CMPhotoCFDictionaryGetLongIfPresent(theDict, @"GroupSortOrder", &v17)) {
      goto LABEL_28;
    }
    if (v17 <= *(void *)(a1 + 40)) {
      return;
    }
    uint64_t v4 = *(void *)(a1 + 48);
    if (v4 != 0xFFFFFFFFLL && v17 > v4) {
      return;
    }
    unint64_t key = 0;
    if (!CMPhotoCFDictionaryGetLongIfPresent(theDict, @"GroupHandle", &key)
      || (int v15 = 0, !CMPhotoCFDictionaryGetInt32IfPresent(theDict, @"GroupType", &v15))
      || (CFArrayRef v5 = (const __CFArray *)CFDictionaryGetValue(theDict, @"ImageList")) == 0
      || (CFArrayRef v6 = v5, v7 = CFGetTypeID(v5), v7 != CFArrayGetTypeID())
      || CFArrayGetCount(v6) <= 0)
    {
LABEL_28:
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = FigSignalErrorAt();
      return;
    }
    CFNumberRef value = 0;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CMPhotoHEIFFileWriterAddGroup(**(void **)(a1 + 56), v15, &value);
    if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
    {
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CMPhotoCFDictionarySetSize(theDict, @"GroupID", value);
      if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
      {
        CFIndex v8 = CFDictionaryGetValue(theDict, @"DisparityAdjustment");
        CFArrayRef v9 = CFDictionaryGetValue(theDict, @"StereoAggressors");
        CFArrayRef v10 = CFDictionaryGetValue(theDict, @"MonoImageLocation");
        CFTypeID v11 = v10;
        if (v8 || v9 || v10)
        {
          CFMutableArrayRef Mutable = CFDictionaryCreateMutable(*(CFAllocatorRef *)(*(void *)(a1 + 56) + 8), 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          if (!Mutable)
          {
            *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = -16991;
            return;
          }
          CFTypeID v12 = Mutable;
          if (v8) {
            CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F34940], v8);
          }
          if (v9) {
            CFDictionaryAddValue(v12, (const void *)*MEMORY[0x1E4F34960], v9);
          }
          if (v11) {
            CFDictionaryAddValue(v12, (const void *)*MEMORY[0x1E4F34950], v11);
          }
          *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CMPhotoHEIFFileWriterAddGroupProperties(**(void **)(a1 + 56), (int)value, v12);
          if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
          {
LABEL_26:
            CFRelease(v12);
            return;
          }
        }
        else
        {
          CFTypeID v12 = 0;
        }
        CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 64), key, value);
        if (!v12) {
          return;
        }
        goto LABEL_26;
      }
    }
  }
}

uint64_t _copyFormatDescriptionFromPictureReader(uint64_t a1, uint64_t a2, CMFormatDescriptionRef *a3)
{
  CMFormatDescriptionRef desc = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t FigBaseObject = FigPictureReaderGetFigBaseObject();
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  CFArrayRef v9 = *(uint64_t (**)(uint64_t, void, uint64_t, CMFormatDescriptionRef *))(v8 + 48);
  if (!v9)
  {
    uint64_t v15 = 4294954514;
    goto LABEL_36;
  }
  uint64_t v10 = v9(FigBaseObject, *MEMORY[0x1E4F333D0], v5, &desc);
  if (v10) {
    goto LABEL_39;
  }
  CFTypeRef v33 = 0;
  CFTypeRef cf = 0;
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t CMBaseObject = FigPictureCollectionGetCMBaseObject();
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  CFIndex v16 = *(unsigned int (**)(uint64_t, void, uint64_t, CFTypeRef *))(v14 + 48);
  if (!v16
    || v16(CMBaseObject, *MEMORY[0x1E4F33258], v11, &cf)
    || ((uint64_t v17 = *(void *)(a1 + 8),
         uint64_t v18 = FigPictureCollectionGetCMBaseObject(),
         (uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8)) == 0)
      ? (uint64_t v20 = 0)
      : (uint64_t v20 = v19),
        (uint64_t v21 = *(unsigned int (**)(uint64_t, void, uint64_t, CFTypeRef *))(v20 + 48)) == 0
     || v21(v18, *MEMORY[0x1E4F33250], v17, &v33)))
  {
    int v24 = 0;
    CFNumberRef Int32 = 0;
  }
  else
  {
    CFNumberRef Int32 = CMPhotoCFNumberCreateInt32(1835622758);
    int v23 = FigCFArrayContainsValue();
    int v24 = FigCFEqual() | v23;
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v33) {
    CFRelease(v33);
  }
  if (Int32) {
    CFRelease(Int32);
  }
  CFDictionaryRef Extensions = CMFormatDescriptionGetExtensions(desc);
  CFArrayRef v31 = 0;
  uint64_t v10 = CMPhotoCreateColorSpaceFromPixelBufferAttachments(Extensions, 0, &v31, 1, 0);
  if (v10)
  {
LABEL_39:
    uint64_t v15 = v10;
    goto LABEL_36;
  }
  CFDictionaryRef MutableCopy = 0;
  if (v31 || !v24) {
    goto LABEL_32;
  }
  CFTypeRef cf = 0;
  CFDictionaryRef MutableCopy = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
  FigCFDictionarySetValue();
  CMVideoCodecType MediaSubType = CMFormatDescriptionGetMediaSubType(desc);
  CMVideoDimensions Dimensions = CMVideoFormatDescriptionGetDimensions(desc);
  uint64_t v29 = CMVideoFormatDescriptionCreate(*(CFAllocatorRef *)(a1 + 8), MediaSubType, Dimensions.width, Dimensions.height, MutableCopy, (CMVideoFormatDescriptionRef *)&cf);
  if (!v29)
  {
    if (desc) {
      CFRelease(desc);
    }
    CMFormatDescriptionRef desc = (CMFormatDescriptionRef)cf;
LABEL_32:
    uint64_t v15 = 0;
    if (a3)
    {
      *a3 = desc;
      CMFormatDescriptionRef desc = 0;
    }
    if (MutableCopy) {
      goto LABEL_35;
    }
    goto LABEL_36;
  }
  uint64_t v15 = v29;
  if (MutableCopy) {
LABEL_35:
  }
    CFRelease(MutableCopy);
LABEL_36:
  if (desc) {
    CFRelease(desc);
  }
  return v15;
}

uint64_t _copyReaderTilesToWriter(uint64_t a1, const __CFAllocator *a2, uint64_t a3, CFIndex a4)
{
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  CFTypeRef v60 = 0;
  CFTypeRef v61 = 0;
  CFDictionaryRef v59 = 0;
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, CFTypeRef *))(v9 + 8);
  if (!v10) {
    goto LABEL_63;
  }
  uint64_t v11 = v10(a1, &v61);
  if (v11) {
    goto LABEL_75;
  }
  uint64_t CMBaseObject = FigPictureTileCursorServiceGetCMBaseObject();
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = *(uint64_t (**)(uint64_t, void, const __CFAllocator *, const __CFDictionary **))(v14 + 48);
  if (!v15) {
    goto LABEL_63;
  }
  uint64_t v11 = v15(CMBaseObject, *MEMORY[0x1E4F334A8], a2, &v59);
  if (v11)
  {
LABEL_75:
    uint64_t v44 = v11;
    goto LABEL_64;
  }
  size.double width = 0.0;
  size.double height = 0.0;
  if (!CGSizeMakeWithDictionaryRepresentation(v59, &size)
    || (unint64_t v16 = vcvtad_u64_f64(size.height)) == 0
    || (unint64_t v17 = vcvtad_u64_f64(size.width)) == 0)
  {
    uint64_t v11 = FigSignalErrorAt();
    goto LABEL_75;
  }
  CFTypeRef v18 = v61;
  uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v20 = v19 ? v19 : 0;
  uint64_t v21 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(v20 + 8);
  if (!v21)
  {
LABEL_63:
    uint64_t v44 = 4294954514;
    goto LABEL_64;
  }
  uint64_t v11 = v21(v18, &v60);
  if (v11) {
    goto LABEL_75;
  }
  unint64_t v56 = 0;
  unint64_t v57 = 0;
  CFTypeRef v22 = v60;
  uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v23) {
    uint64_t v24 = v23;
  }
  else {
    uint64_t v24 = 0;
  }
  CFTypeID v25 = *(uint64_t (**)(CFTypeRef, unint64_t *))(v24 + 32);
  if (!v25) {
    goto LABEL_63;
  }
  uint64_t v11 = v25(v22, &v56);
  if (v11) {
    goto LABEL_75;
  }
  CFArrayRef v26 = (void *)*MEMORY[0x1E4F33300];
  CFAllocatorRef v27 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v46 = *MEMORY[0x1E4F33470];
  do
  {
    CFTypeRef v54 = 0;
    CFDictionaryRef v55 = 0;
    formatDescriptiouint64_t n = 0;
    CMSampleBufferRef sampleBufferOut = 0;
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    uint64_t v49 = 0;
    v56 /= v17;
    v57 /= v16;
    v64.double x = (double)v56;
    v64.double y = (double)v57;
    DictionaryRepresentatiouint64_t n = CGPointCreateDictionaryRepresentation(v64);
    CFDictionaryRef v29 = DictionaryRepresentation;
    if (!DictionaryRepresentation)
    {
      CFDictionaryRef v30 = 0;
LABEL_62:
      LODWORD(v44) = -16991;
      goto LABEL_47;
    }
    values = DictionaryRepresentation;
    keys[0] = v26;
    CFDictionaryRef v30 = CFDictionaryCreate(v27, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!v30) {
      goto LABEL_62;
    }
    uint64_t v31 = FigPictureTileCursorGetCMBaseObject();
    uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v32) {
      uint64_t v33 = v32;
    }
    else {
      uint64_t v33 = 0;
    }
    uint64_t v34 = *(uint64_t (**)(uint64_t, uint64_t, const __CFAllocator *, CMFormatDescriptionRef *))(v33 + 48);
    if (v34)
    {
      int v35 = v34(v31, v46, a2, &formatDescription);
      if (v35) {
        goto LABEL_45;
      }
      CFTypeRef v36 = v60;
      uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v38 = v37 ? v37 : 0;
      CFIndex v39 = *(uint64_t (**)(CFTypeRef, uint64_t *, void **, void **, CFTypeRef *, void))(v38 + 40);
      if (v39)
      {
        int v35 = v39(v36, &v49, &v51, &v50, &v54, 0);
        if (v35) {
          goto LABEL_45;
        }
        int v35 = CMPhotoPictureReaderCreateContiguousBlockBufferFromChunks((uint64_t)a2, v49, (uint64_t)v51, (uint64_t)v50, (uint64_t)v54, 0, 0, &v55);
        if (v35) {
          goto LABEL_45;
        }
        memset(&sampleTimingArray, 0, sizeof(sampleTimingArray));
        CMTimeMake(&sampleTimingArray.duration, 1, 1);
        sampleTimingArray.presentationTimeStamp = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
        sampleTimingArray.decodeTimeStamp = sampleTimingArray.presentationTimeStamp;
        sampleSizeArradouble y = 0;
        sampleSizeArradouble y = CMBlockBufferGetDataLength(v55);
        int v35 = CMSampleBufferCreate(a2, v55, 1u, 0, 0, formatDescription, 1, 1, &sampleTimingArray, 1, &sampleSizeArray, &sampleBufferOut);
        if (v35) {
          goto LABEL_45;
        }
        int v35 = CMPhotoHEIFFileWriterAddSampleBufferToImage(a3, v30, a4, sampleBufferOut);
        if (v35) {
          goto LABEL_45;
        }
        CFTypeRef v40 = v60;
        uint64_t v41 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v42 = v41 ? v41 : 0;
        uint64_t v43 = *(uint64_t (**)(CFTypeRef, unint64_t *, unint64_t *))(v42 + 16);
        if (v43)
        {
          int v35 = v43(v40, &v56, &v57);
LABEL_45:
          LODWORD(v44) = v35;
          goto LABEL_47;
        }
      }
    }
    LODWORD(v44) = -12782;
LABEL_47:
    free(v51);
    free(v50);
    if (v29) {
      CFRelease(v29);
    }
    if (v54) {
      CFRelease(v54);
    }
    if (v55) {
      CFRelease(v55);
    }
    if (formatDescription) {
      CFRelease(formatDescription);
    }
    if (sampleBufferOut) {
      CFRelease(sampleBufferOut);
    }
    if (v30) {
      CFRelease(v30);
    }
  }
  while (!v44);
  if (v44 == -17171) {
    uint64_t v44 = 0;
  }
  else {
    uint64_t v44 = v44;
  }
LABEL_64:
  if (v60) {
    CFRelease(v60);
  }
  if (v59) {
    CFRelease(v59);
  }
  if (v61) {
    CFRelease(v61);
  }
  return v44;
}

uint64_t _createItemPropertiesFromIntrinsicsAndExtrinsics(const __CFAllocator *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __CFDictionary **a7)
{
  if (!a7 || !(a5 | a6)) {
    return 4294950306;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return 4294950305;
  }
  uint64_t v13 = Mutable;
  uint64_t v38 = a2;
  uint64_t v39 = a3;
  FigIntrinsicsDictFromIntrinsicsMatridouble x = CMPhotoFlipSizeIfNeeded(a4, a2, a3, &v38);
  if (FigIntrinsicsDictFromIntrinsicsMatrix) {
    goto LABEL_56;
  }
  unsigned __int8 v37 = 0;
  FigCFDictionaryGetBooleanIfPresent();
  uint64_t v15 = (const void *)FigCFDictionaryGetValue();
  unint64_t v16 = (const void *)FigCFDictionaryGetValue();
  unint64_t v17 = v16;
  if (!v16 || v15 == 0)
  {
    if (v16)
    {
LABEL_19:
      CFDictionarySetValue(v13, (const void *)*MEMORY[0x1E4F34938], v17);
      goto LABEL_20;
    }
    if (!v15) {
      goto LABEL_20;
    }
  }
  else
  {
    CFNumberRef value = 0;
    if (!CMPhotoCreateIntrinsicsMatrixFromFigIntrinsicsDict(a1, v16, a2, a3, v38, v39, 0, (__CFArray **)&value))
    {
      int v20 = FigCFEqual();
      if (value) {
        CFRelease(value);
      }
      if (v20) {
        goto LABEL_19;
      }
    }
  }
  CFNumberRef value = 0;
  FigIntrinsicsDictFromIntrinsicsMatridouble x = CMPhotoCreateFigIntrinsicsDictFromIntrinsicsMatrix((int)a1, v15, a2, a3, a4, v37, (uint64_t)&value);
  if (FigIntrinsicsDictFromIntrinsicsMatrix)
  {
LABEL_56:
    uint64_t FigExtrinsicsDictFromExtrinsics = FigIntrinsicsDictFromIntrinsicsMatrix;
    goto LABEL_57;
  }
  CFDictionarySetValue(v13, (const void *)*MEMORY[0x1E4F34938], value);
  CFRelease(value);
LABEL_20:
  unsigned __int8 v35 = 0;
  FigCFDictionaryGetBooleanIfPresent();
  unint64_t v21 = FigCFDictionaryGetValue();
  unint64_t v22 = FigCFDictionaryGetValue();
  CFDictionaryRef v23 = (const __CFDictionary *)FigCFDictionaryGetValue();
  if (v23)
  {
    CFDictionaryRef v24 = v23;
    if (!(v21 | v22)) {
      goto LABEL_48;
    }
    CFNumberRef value = 0;
    CFTypeRef cf = 0;
    __int16 v33 = 0;
    uint64_t v25 = _createPositionAndRotationFromFigExtrinsics(a1, v23, &cf, (CFTypeRef *)&value, (BOOL *)&v33 + 1, (BOOL *)&v33);
    if (v25)
    {
      uint64_t FigExtrinsicsDictFromExtrinsics = v25;
      goto LABEL_50;
    }
    if (FigCFEqual())
    {
      int v27 = 1;
    }
    else
    {
      if ((_BYTE)v33) {
        BOOL v28 = v22 == 0;
      }
      else {
        BOOL v28 = 0;
      }
      int v27 = v28;
    }
    if (FigCFEqual())
    {
      int v29 = 1;
    }
    else
    {
      if (HIBYTE(v33)) {
        BOOL v30 = v21 == 0;
      }
      else {
        BOOL v30 = 0;
      }
      int v29 = v30;
    }
    if (v27) {
      int v31 = v29;
    }
    else {
      int v31 = 0;
    }
    if (cf) {
      CFRelease(cf);
    }
    if (value) {
      CFRelease(value);
    }
    if (v31)
    {
LABEL_48:
      CFDictionarySetValue(v13, (const void *)*MEMORY[0x1E4F34930], v24);
      uint64_t FigExtrinsicsDictFromExtrinsics = 0;
      goto LABEL_53;
    }
  }
  uint64_t FigExtrinsicsDictFromExtrinsics = 0;
LABEL_50:
  if (v21 | v22)
  {
    CFNumberRef value = 0;
    uint64_t FigExtrinsicsDictFromExtrinsics = CMPhotoCreateFigExtrinsicsDictFromExtrinsics(a1, v21, v22, 0, v35, (__CFDictionary **)&value);
    if (!FigExtrinsicsDictFromExtrinsics)
    {
      CFDictionarySetValue(v13, (const void *)*MEMORY[0x1E4F34930], value);
      CFRelease(value);
      goto LABEL_53;
    }
LABEL_57:
    CFRelease(v13);
    return FigExtrinsicsDictFromExtrinsics;
  }
LABEL_53:
  *a7 = v13;
  return FigExtrinsicsDictFromExtrinsics;
}

uint64_t _createSampleBufferAtCursor(uint64_t a1, CMSampleBufferRef *a2)
{
  CMSampleBufferRef sbuf = 0;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, void, void, void, void, CMSampleBufferRef *))(v6 + 8);
  if (!v7) {
    return 4294954514;
  }
  uint64_t v8 = v7(v3, v4, 1, 1, 1, 0, 2, 0, 0, 0, 0, &sbuf);
  CMSampleBufferRef v9 = sbuf;
  if (!v8)
  {
    CMItemCount NumSamples = CMSampleBufferGetNumSamples(sbuf);
    CMSampleBufferRef v9 = sbuf;
    if (NumSamples == 1)
    {
      uint64_t v8 = 0;
      *a2 = sbuf;
      return v8;
    }
    uint64_t v8 = 4294950304;
  }
  if (v9) {
    CFRelease(v9);
  }
  return v8;
}

uint64_t _addReferenceSequencesDescriptionToWriter(uint64_t *a1, int a2, CFArrayRef theArray, const __CFArray *a4, CMTime *a5, CFIndex a6, const __CFArray *a7)
{
  CMSampleBufferRef v11 = 0;
  CFIndex v12 = 0;
  CMSampleBufferRef sbuf = 0;
  while (1)
  {
    if (theArray) {
      CFIndex Count = CFArrayGetCount(theArray);
    }
    else {
      CFIndex Count = 0;
    }
    if (v12 >= Count)
    {
      uint64_t v25 = 0;
      goto LABEL_25;
    }
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v12);
    if (!ValueAtIndex) {
      goto LABEL_23;
    }
    CFDictionaryRef v15 = ValueAtIndex;
    CFTypeID v16 = CFGetTypeID(ValueAtIndex);
    if (v16 != CFDictionaryGetTypeID()) {
      goto LABEL_23;
    }
    unint64_t v17 = (__CFDictionary *)CFArrayGetValueAtIndex(a7, v12);
    iddouble x = -1;
    if (!CMPhotoCFDictionaryGetLongIfPresent(v15, @"ImageHandle", &idx)) {
      break;
    }
    if (!a4) {
      goto LABEL_23;
    }
    CFIndex v18 = idx;
    if (idx < 0 || v18 >= CFArrayGetCount(a4)) {
      goto LABEL_23;
    }
    CFArrayRef v19 = a7;
    int v20 = CFArrayGetValueAtIndex(a4, idx);
    BOOL v31 = 0;
    CMTime v30 = *a5;
    uint64_t v21 = _moveCursorToPresentationTime((uint64_t)v20, &v30, &v31);
    if (v21) {
      goto LABEL_24;
    }
    if (!v31)
    {
LABEL_23:
      uint64_t v21 = FigSignalErrorAt();
LABEL_24:
      uint64_t v25 = v21;
      goto LABEL_25;
    }
    if (v11)
    {
      CFRelease(v11);
      CMSampleBufferRef sbuf = 0;
    }
    uint64_t v21 = _createSampleBufferAtCursor((uint64_t)v20, &sbuf);
    CMSampleBufferRef v11 = sbuf;
    if (v21) {
      goto LABEL_24;
    }
    FormatDescriptiouint64_t n = CMSampleBufferGetFormatDescription(sbuf);
    uint64_t MediaSubType = CMFormatDescriptionGetMediaSubType(FormatDescription);
    v30.CFNumberRef value = 0;
    uint64_t v24 = *a1;
    if (a2 == 1)
    {
      uint64_t v21 = CMPhotoHEIFFileWriterAddThumbnailToImage(v24, 0, a6, MediaSubType, FormatDescription, &v30.value);
      if (v21) {
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v21 = CMPhotoHEIFFileWriterAddAuxiliaryImageToImage(v24, 0, a6, MediaSubType, FormatDescription, &v30.value);
      if (v21) {
        goto LABEL_24;
      }
    }
    uint64_t v21 = CMPhotoHEIFFileWriterAddSampleBufferToImage(*a1, 0, v30.value, v11);
    if (v21) {
      goto LABEL_24;
    }
    CFDictionaryRemoveValue(v17, @"ImageHandle");
    ++v12;
    a7 = v19;
  }
  uint64_t v25 = 4294950306;
LABEL_25:
  if (v11) {
    CFRelease(v11);
  }
  return v25;
}

uint64_t _updateOrRemoveOrientationForImages(__CFDictionary *a1, CFArrayRef theArray, const __CFArray *a3, int a4, int a5, int a6)
{
  if (a6)
  {
    if (a1) {
      CFDictionaryRemoveValue(a1, @"Orientation");
    }
    uint64_t result = _removeOrientation(theArray);
    if (!result)
    {
      return _removeOrientation(a3);
    }
  }
  else if (a5)
  {
    if (a1) {
      CMPhotoCFDictionarySetInt(a1, @"Orientation", a4);
    }
    uint64_t result = _updateOrientation(theArray, a4);
    if (!result)
    {
      return _updateOrientation(a3, a4);
    }
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t _checkOrientationForImages(CFArrayRef theArray, int a2, int a3, BOOL *a4, BOOL *a5, int *a6)
{
  BOOL v12 = 0;
  BOOL v13 = 0;
  CFIndex v14 = 0;
  int v19 = -1;
  do
  {
    if (theArray) {
      CFIndex Count = CFArrayGetCount(theArray);
    }
    else {
      CFIndex Count = 0;
    }
    if (v14 >= Count) {
      break;
    }
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v14);
    if (!ValueAtIndex) {
      return FigSignalErrorAt();
    }
    int IntIfPresent = CMPhotoCFDictionaryGetIntIfPresent(ValueAtIndex, @"Orientation", &v19);
    BOOL v13 = IntIfPresent != a3;
    BOOL v12 = v19 != a2;
    if (v19 != a2) {
      break;
    }
    ++v14;
  }
  while (IntIfPresent == a3);
  if (a6) {
    *a6 = v19;
  }
  if (a4) {
    *a4 = v12;
  }
  uint64_t result = 0;
  if (a5) {
    *a5 = v13;
  }
  return result;
}

uint64_t _removeOrientation(CFArrayRef theArray)
{
  CFIndex v2 = 0;
  if (!theArray) {
    goto LABEL_3;
  }
LABEL_2:
  for (CFIndex i = CFArrayGetCount(theArray); ; CFIndex i = 0)
  {
    if (v2 >= i) {
      return 0;
    }
    CFDictionaryRef ValueAtIndex = (__CFDictionary *)CFArrayGetValueAtIndex(theArray, v2);
    if (!ValueAtIndex) {
      break;
    }
    CFDictionaryRemoveValue(ValueAtIndex, @"Orientation");
    ++v2;
    if (theArray) {
      goto LABEL_2;
    }
LABEL_3:
    ;
  }
  return FigSignalErrorAt();
}

uint64_t _updateOrientation(CFArrayRef theArray, int a2)
{
  CFIndex v4 = 0;
  if (!theArray) {
    goto LABEL_3;
  }
LABEL_2:
  for (CFIndex i = CFArrayGetCount(theArray); ; CFIndex i = 0)
  {
    if (v4 >= i) {
      return 0;
    }
    CFDictionaryRef ValueAtIndex = (__CFDictionary *)CFArrayGetValueAtIndex(theArray, v4);
    if (!ValueAtIndex) {
      break;
    }
    CMPhotoCFDictionarySetInt(ValueAtIndex, @"Orientation", a2);
    ++v4;
    if (theArray) {
      goto LABEL_2;
    }
LABEL_3:
    ;
  }
  return FigSignalErrorAt();
}

uint64_t _hasMetadataChangedForImageHandle(const __CFArray *a1, const __CFArray *a2, int a3, const void *a4, void *a5)
{
  CFDictionaryRef v13 = 0;
  CFDictionaryRef theDict = 0;
  uint64_t result = _getImageWithHandleFromDescriptionList(a1, a3, &theDict);
  if (!result)
  {
    uint64_t result = _getImageWithHandleFromDescriptionList(a2, a3, &v13);
    if (!result)
    {
      CFDictionaryGetValue(theDict, a4);
      CFArrayRef Value = CFDictionaryGetValue(v13, a4);
      int v11 = FigCFEqual();
      uint64_t result = 0;
      if (v11) {
        BOOL v12 = (const void *)*MEMORY[0x1E4F1D260];
      }
      else {
        BOOL v12 = Value;
      }
      *a5 = v12;
    }
  }
  return result;
}

void ___propagateMetadataChange_block_invoke(uint64_t a1, CFDictionaryRef theDict)
{
  if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    int v11 = -1;
    if (CMPhotoCFDictionaryGetInt32IfPresent(theDict, @"ImageHandle", &v11))
    {
      int v3 = v11;
      if (v11 == *(_DWORD *)(a1 + 72)) {
        return;
      }
      CFArrayRef v4 = *(const __CFArray **)(a1 + 40);
      CFArrayRef v5 = *(const __CFArray **)(a1 + 48);
      uint64_t v6 = *(const void **)(a1 + 56);
      uint64_t v7 = *(const void **)(a1 + 64);
      uint64_t v8 = *MEMORY[0x1E4F1D260];
      uint64_t v13 = *MEMORY[0x1E4F1D260];
      int hasMetadataChangedForImageHandle = _hasMetadataChangedForImageHandle(v4, v5, v11, v6, &v13);
      if (!hasMetadataChangedForImageHandle)
      {
        if (v13 == v8)
        {
          CFMutableDictionaryRef theDicta = 0;
          int ImageWithHandleFromDescriptionList = _getImageWithHandleFromDescriptionList(v5, v3, &theDicta);
          if (!ImageWithHandleFromDescriptionList)
          {
            if (v7) {
              CFDictionarySetValue(theDicta, v6, v7);
            }
            else {
              CFDictionaryRemoveValue(theDicta, v6);
            }
          }
        }
        else
        {
          int ImageWithHandleFromDescriptionList = 0;
        }
        goto LABEL_9;
      }
    }
    else
    {
      int hasMetadataChangedForImageHandle = FigSignalErrorAt();
    }
    int ImageWithHandleFromDescriptionList = hasMetadataChangedForImageHandle;
LABEL_9:
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = ImageWithHandleFromDescriptionList;
  }
}

uint64_t _getImageWithHandleFromDescriptionList(CFArrayRef theArray, int a2, const __CFDictionary **a3)
{
  CFIndex v6 = 0;
  while (1)
  {
    CFIndex v7 = theArray ? CFArrayGetCount(theArray) : 0;
    if (v6 >= v7) {
      break;
    }
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)FigCFArrayGetValueAtIndex();
    if (!ValueAtIndex) {
      return 4294950306;
    }
    CFDictionaryRef v9 = ValueAtIndex;
    CFTypeID v10 = CFGetTypeID(ValueAtIndex);
    if (v10 != CFDictionaryGetTypeID()) {
      return 4294950306;
    }
    int v12 = -1;
    if (!CMPhotoCFDictionaryGetIntIfPresent(v9, @"ImageHandle", &v12)) {
      return 4294950306;
    }
    ++v6;
    if (v12 == a2) {
      goto LABEL_12;
    }
  }
  CFDictionaryRef v9 = 0;
LABEL_12:
  if (!v9) {
    return FigSignalErrorAt();
  }
  uint64_t result = 0;
  if (a3) {
    *a3 = v9;
  }
  return result;
}

const void *_finishAsyncEncoding(void *a1)
{
  CFIndex v2 = _disposeCompressionPluginsForSequenceAsyncEncoding((uint64_t)a1);
  if (!v2)
  {
    int v3 = a1[24];
    if (v3)
    {
      if (a1[25])
      {
        if (a1[26])
        {
          unint64_t v4 = 0;
          do
          {
            FigSemaphoreWaitRelative();
            ++v4;
          }
          while (v4 < a1[26]);
          int v3 = a1[24];
        }
        a1[26] = 0;
      }
      dispatch_barrier_sync(v3, &__block_literal_global_22);
    }
  }
  return v2;
}

const void *_disposeCompressionPluginsForSequenceAsyncEncoding(uint64_t a1)
{
  CFDictionaryRef v2 = *(const __CFDictionary **)(a1 + 56);
  if (v2)
  {
    CFDictionaryApplyFunction(v2, (CFDictionaryApplierFunction)_disposePluginFunction, 0);
    int v3 = *(const void **)(a1 + 56);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(a1 + 56) = 0;
    }
  }
  uint64_t result = *(const void **)(a1 + 48);
  if (result)
  {
    uint64_t result = (const void *)CMPhotoCodecSessionPoolFlush((uint64_t)result, 1);
    if (!result)
    {
      uint64_t result = *(const void **)(a1 + 48);
      if (result)
      {
        CFRelease(result);
        uint64_t result = 0;
        *(void *)(a1 + 4_Block_object_dispose(&STACK[0x280], 8) = 0;
      }
    }
  }
  return result;
}

void _disposePluginFunction(int a1, CFTypeRef *a2)
{
}

uint64_t _compressMainImage(uint64_t a1, const __CFDictionary *a2, opaqueCMSampleBuffer *a3, int a4, CFIndex *a5, uint64_t a6)
{
  v17[0] = 0;
  v17[1] = 0;
  SourceCMVideoDimensions Dimensions = CMPhotoGetSourceDimensions(a3, a2, v17);
  if (SourceDimensions) {
    return SourceDimensions;
  }
  SourceCMVideoDimensions Dimensions = _copyMainAndAuxImageSamplesIfNeeded(a1);
  if (SourceDimensions) {
    return SourceDimensions;
  }
  uint64_t v13 = 0;
  CFIndex v14 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (!a3 || !a4) {
    goto LABEL_7;
  }
  uint64_t v13 = (uint64_t)a3 + rand();
  if (*v14 == 1)
  {
    kdebug_trace();
LABEL_7:
    if (*v14 == 1) {
      kdebug_trace();
    }
  }
  uint64_t v15 = _compressX(a1, a2, a3, 0, 0, 0, 0, 1, -1, MEMORY[0x1E4F1F9F8], a4, v13, a5, a6);
  if (*v14 == 1) {
    kdebug_trace();
  }
  return v15;
}

void ___compressMainWithThumbAsync_block_invoke(uint64_t a1)
{
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 48), @"IncludeThumbnailWithOptions");
  if (CFDictionaryGetCount(Value) <= 0
    || (int v3 = CFDictionaryGetValue(Value, @"DryRun"),
        CFDictionaryContainsKey(Value, @"IncludeThumbnailWithOptions")))
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = FigSignalErrorAt();
    return;
  }
  if (Value)
  {
    CFDictionaryRef Value = CFDictionaryCreateMutableCopy(*(CFAllocatorRef *)(*(void *)(a1 + 56) + 8), 0, Value);
    if (!Value)
    {
      *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = -16991;
      return;
    }
  }
  unint64_t v4 = *(opaqueCMSampleBuffer **)(a1 + 64);
  if ((v3 == 0) != (v4 != 0)) {
    goto LABEL_67;
  }
  if (!v3)
  {
    uint64_t v6 = *(void *)(a1 + 72);
    if (!*(unsigned char *)(v6 + 16) && *(unsigned char *)(v6 + 72))
    {
LABEL_12:
      int v7 = 0;
      int v8 = *(unsigned __int8 *)(a1 + 80);
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v46 = 0;
      v47[0] = 0;
      uint64_t v45 = 0;
      unint64_t v44 = 320;
      __int16 v43 = 0;
      unsigned __int8 EvenScalingModeDefault = 1;
      CFTypeID v10 = (_DWORD *)MEMORY[0x1E4F1EBA8];
      if (!v3)
      {
        int v11 = CMPhotoCreatePixelBufferFromImage(*(const __CFAllocator **)(v6 + 96), v4, &v46);
        if (v11) {
          goto LABEL_58;
        }
        double PixelBufferCLAPAsRect = CMPhotoGetPixelBufferCLAPAsRect(v46);
        CGFloat v39 = v12;
        double v40 = v13;
        double v41 = v14;
        uint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(v46);
        if (Value)
        {
          uint64_t v16 = PixelFormatType;
          int v35 = v8;
          uint64_t v36 = v9;
          int Int32IfPresent = CMPhotoCFDictionaryGetInt32IfPresent(Value, @"CodecType", (char *)&v45 + 4);
          int SizeIfPresent = CMPhotoCFDictionaryGetSizeIfPresent(Value, @"MaxPixelSize", &v44);
          CMPhotoCFDictionaryGetBooleanIfPresent(Value, @"UseEvenScalingMode", &EvenScalingModeDefault);
          unsigned __int8 EvenScalingModeDefault = CMPhotoGetEvenScalingModeDefault(1, EvenScalingModeDefault);
          int BooleanIfPresent = CMPhotoCFDictionaryGetBooleanIfPresent(Value, @"AddMIAFCompliantThumbnails", &v43);
          if (v44) {
            CMPhotoCFDictionaryGetBooleanIfPresent(Value, @"AllowMaxPixelSizeUpscale", (unsigned char *)&v43 + 1);
          }
          if (SizeIfPresent == BooleanIfPresent)
          {
            int v11 = FigSignalErrorAt();
            goto LABEL_58;
          }
          CFDictionaryRef v20 = (const __CFDictionary *)CFDictionaryGetValue(Value, @"SourceCropRect");
          if (!v20
            || (memset(&rect, 0, sizeof(rect)), !CGRectMakeWithDictionaryRepresentation(v20, &rect))
            || (int v21 = CMPhotoApplyCropRectToRect(&PixelBufferCLAPAsRect, rect.origin.x, rect.origin.y, rect.size.width, rect.size.height)) == 0)
          {
            if (BooleanIfPresent)
            {
              if ((_BYTE)v43)
              {
                int v11 = CMPhotoDetermineMIAFCompliantThumbnailMaxPixelSize(&v44, v40, v41);
                if (v11) {
                  goto LABEL_58;
                }
              }
            }
            if (Int32IfPresent)
            {
              int v22 = HIDWORD(v45);
            }
            else
            {
              int v22 = 1752589105;
              HIDWORD(v45) = 1752589105;
            }
            int v8 = v35;
            int DestinationPixelFormatFromOptions = CMPhotoGetDestinationPixelFormatFromOptions(Value, v22, v16, (unsigned int *)&v45);
            if (!DestinationPixelFormatFromOptions)
            {
              unint64_t v24 = v44;
              if (!v44)
              {
LABEL_38:
                int v7 = 0;
LABEL_39:
                uint64_t v9 = v36;
                goto LABEL_49;
              }
              int v25 = HIBYTE(v43);
              size_t Width = CVPixelBufferGetWidth(v46);
              size_t Height = CVPixelBufferGetHeight(v46);
              if (v25)
              {
                if (Width > Height) {
                  size_t v28 = CVPixelBufferGetWidth(v46);
                }
                else {
                  size_t v28 = CVPixelBufferGetHeight(v46);
                }
                if (v24 == v28) {
                  goto LABEL_38;
                }
              }
              else
              {
                if (Width > Height) {
                  size_t v29 = CVPixelBufferGetWidth(v46);
                }
                else {
                  size_t v29 = CVPixelBufferGetHeight(v46);
                }
                if (v24 >= v29) {
                  goto LABEL_38;
                }
              }
              if (*v10 == 1) {
                kdebug_trace();
              }
              rect.origin.double x = 0.0;
              rect.origin.double y = 0.0;
              CMPhotoPixelBufferConstrainSizeToMaxSideLength(vcvtad_u64_f64(v40), vcvtad_u64_f64(v41), v44, 0, 0, HIBYTE(v43), EvenScalingModeDefault, (unint64_t *)&rect, 0, 0);
              int DestinationPixelFormatFromOptions = _createPaddedPixelBufferAndClearPadding(*(const void **)(v6 + 24), v45, *(unint64_t *)&rect.origin.x, *(unint64_t *)&rect.origin.y, 0x10uLL, 0x10uLL, 0, (CFTypeRef *)v47);
              if (!DestinationPixelFormatFromOptions)
              {
                int DestinationPixelFormatFromOptions = CMPhotoScaleAndRotateSessionTransformForSize(*(void *)(v6 + 32), v46, 1, 1, v45, 0, 0, 1u, PixelBufferCLAPAsRect, v39, v40, v41, (double)*(unint64_t *)&rect.origin.x, (double)*(unint64_t *)&rect.origin.y, v30, v31, 64, 1u, v47);
                if (!DestinationPixelFormatFromOptions)
                {
                  CFDictionarySetValue(Value, @"UsePixelsOutsideCrop", (const void *)*MEMORY[0x1E4F1CFD0]);
                  CFDictionaryRemoveValue(Value, @"SourceCropRect");
                  CVPixelBufferRelease(v46);
                  uint64_t v46 = v47[0];
                  v47[0] = 0;
                  if (*v10 == 1) {
                    kdebug_trace();
                  }
                  int v7 = 0;
                  uint64_t v9 = v36;
                  goto LABEL_49;
                }
              }
            }
            int v7 = DestinationPixelFormatFromOptions;
            goto LABEL_39;
          }
          int v7 = v21;
          uint64_t v9 = v36;
          int v8 = v35;
        }
        else
        {
          int v7 = 0;
        }
      }
LABEL_49:
      if (*v10 == 1) {
        kdebug_trace();
      }
      FigSemaphoreWaitRelative();
      if (*v10 == 1) {
        kdebug_trace();
      }
      CFIndex v32 = *(void *)(v6 + 232);
      if (v32 < 0) {
        goto LABEL_59;
      }
      if (v8)
      {
        int v33 = 1;
        uint64_t v34 = v9;
      }
      else
      {
        int v33 = 0;
        uint64_t v34 = 0;
      }
      int v11 = _compressThumbnailInternal_0(v6, v32, Value, v46, v33, v34);
LABEL_58:
      int v7 = v11;
LABEL_59:
      if (v47[0]) {
        CFRelease(v47[0]);
      }
      if (v46) {
        CFRelease(v46);
      }
      goto LABEL_63;
    }
    goto LABEL_68;
  }
  CFTypeID v5 = CFGetTypeID(v3);
  if (v5 != CMFormatDescriptionGetTypeID())
  {
LABEL_67:
    int v7 = FigSignalErrorAt();
    goto LABEL_63;
  }
  uint64_t v6 = *(void *)(a1 + 72);
  if (!*(unsigned char *)(v6 + 16))
  {
    unint64_t v4 = *(opaqueCMSampleBuffer **)(a1 + 64);
    goto LABEL_12;
  }
LABEL_68:
  int v7 = -17101;
LABEL_63:
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v7;
  if (Value) {
    CFRelease(Value);
  }
}

uint64_t _createPaddedPixelBufferAndClearPadding(const void *a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, int a7, CFTypeRef *a8)
{
  CFTypeRef cf = 0;
  char v23 = 0;
  unint64_t v14 = 128;
  if (a5 + a3 + ~((a3 - 1) % a5) > 0x80) {
    unint64_t v14 = a5 + a3 + ~((a3 - 1) % a5);
  }
  if (a6 + a4 + ~((a4 - 1) % a6) <= 0x40) {
    unint64_t v15 = 64;
  }
  else {
    unint64_t v15 = a6 + a4 + ~((a4 - 1) % a6);
  }
  if (a7) {
    size_t v16 = a5 + a3 + ~((a3 - 1) % a5);
  }
  else {
    size_t v16 = v14;
  }
  if (a7) {
    size_t v17 = a6 + a4 + ~((a4 - 1) % a6);
  }
  else {
    size_t v17 = v15;
  }
  UncompressedPixelFormatFromCompressedPixeluint64_t Format = CMPhotoGetUncompressedPixelFormatFromCompressedPixelFormat(a2);
  uint64_t v19 = CMPhotoSurfacePoolCreatePixelBufferAndReportOrigin(a1, UncompressedPixelFormatFromCompressedPixelFormat, v16, v17, 1, a5, a6, 1, 64, 0, (CVPixelBufferRef *)&cf, &v23);
  if (v19
    || (a3 == v16 ? (BOOL v20 = a4 == v17) : (BOOL v20 = 0),
        !v20
     && ((uint64_t v19 = VTFillPixelBufferBorderWithBlack(), v19)
      || (uint64_t v19 = CMPhotoSetPixelBufferCLAP((__CVBuffer *)cf, 0, 0, a3, a4, 0, 1), v19))))
  {
    uint64_t v21 = v19;
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    uint64_t v21 = 0;
    *a8 = cf;
  }
  return v21;
}

uint64_t _compressX(uint64_t a1, CFDictionaryRef theDict, const __CFArray *a3, int a4, CFIndex a5, unsigned int a6, uint64_t a7, char a8, CFIndex idx, long long *a10, char a11, uint64_t a12, CFIndex *a13, uint64_t a14)
{
  CFTypeRef cf = 0;
  if (!*(unsigned char *)(a1 + 104))
  {
    unint64_t v15 = a3;
    if (theDict)
    {
      if (a4 == 1)
      {
        CFDictionaryRef Value = CFDictionaryGetValue(theDict, @"Tiling");
        LODWORD(v52) = 0;
        CMPhotoCFDictionaryGetInt32IfPresent(theDict, @"CodecType", &v52);
        if (Value)
        {
          CFTypeID v19 = CFGetTypeID(Value);
          if (v19 != CFBooleanGetTypeID() || CFBooleanGetValue((CFBooleanRef)Value)) {
            return FigSignalErrorAt();
          }
        }
      }
      BOOL v20 = CFDictionaryGetValue(theDict, @"DryRun");
      if ((a3 != 0) != (v20 == 0)) {
        return 4294950306;
      }
      uint64_t v21 = v20;
      int v22 = CFDictionaryGetValue(theDict, @"DerivedImageOptions");
      char v23 = v22 ? 0 : (void *)v21;
      if (v21 && v22 != 0) {
        return 4294950306;
      }
      if (v23)
      {
        long long v52 = *a10;
        *(void *)&long long v53 = *((void *)a10 + 2);
        return _encodePixelBufferForIndex((uint64_t *)a1, a4, a5, theDict, v23, a6, a7, a8, idx, (unsigned int *)&v52, a11, a12, a13, a14);
      }
      unint64_t v15 = a3;
      if (v22)
      {
        uint64_t v77 = 0;
        v78[0] = -1;
        uint64_t v75 = 0;
        uint64_t v76 = 0;
        CFAllocatorRef v74 = 0;
        uint64_t v73 = 0;
        long long v71 = 0u;
        long long v72 = 0u;
        long long v69 = 0u;
        long long v70 = 0u;
        long long v67 = 0u;
        long long v68 = 0u;
        long long v65 = 0u;
        long long v66 = 0u;
        long long v63 = 0u;
        long long v64 = 0u;
        long long v61 = 0u;
        long long v62 = 0u;
        long long v59 = 0u;
        long long v60 = 0u;
        long long v57 = 0u;
        long long v58 = 0u;
        long long v55 = 0u;
        long long v56 = 0u;
        long long v53 = 0u;
        long long v54 = 0u;
        long long v52 = 0u;
        uint64_t PropertiesForImage = _parseOptions(theDict, 0, 0, (uint64_t)&v52, *MEMORY[0x1E4F1DB28], *(double *)(MEMORY[0x1E4F1DB28] + 8), *(double *)(MEMORY[0x1E4F1DB28] + 16), *(double *)(MEMORY[0x1E4F1DB28] + 24));
        if (PropertiesForImage) {
          return PropertiesForImage;
        }
        CFDictionaryRef v27 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"DerivedImageOptions");
        if (!v27) {
          return 4294950306;
        }
        CFDictionaryRef v28 = v27;
        int v51 = 0;
        if (!CMPhotoCFDictionaryGetInt32IfPresent(v27, @"Type", &v51)) {
          return 4294950306;
        }
        size_t v29 = (void *)CFDictionaryGetValue(v28, @"Metadata");
        if (a3)
        {
          double v30 = v29;
          if (CFArrayGetCount(a3) > 0)
          {
            unsigned int v50 = -1;
            if (FigCFArrayGetInt32AtIndex())
            {
              CMPhotoCFDictionaryGetSizeIfPresent(theDict, @"BitDepth", &v77);
              double v31 = (CGColorSpace *)CFDictionaryGetValue(theDict, @"ColorSpace");
              CFIndex v32 = v31;
              if (!v31 || (CFTypeID v33 = CFGetTypeID(v31), v33 == CGColorSpaceGetTypeID()))
              {
                FigCFDictionaryGetValueIfPresent();
                FigCFDictionaryGetValueIfPresent();
                FigCFDictionaryGetValueIfPresent();
                int8x16_t v49 = 0uLL;
                uint64_t PropertiesForImage = CMPhotoHEIFFileWriterGetPropertiesForImage(*(void *)(a1 + 88), v50, &v49, 0);
                if (PropertiesForImage) {
                  return PropertiesForImage;
                }
                int v48 = 0;
                uint64_t PropertiesForImage = CMPhotoHEIFFileWriterGetOrientationTransformsForImage(*(void *)(a1 + 88), v50, 0, &v48, 0, 0);
                if (PropertiesForImage) {
                  return PropertiesForImage;
                }
                if (v48 == 270 || v48 == 90) {
                  int8x16_t v49 = vextq_s8(v49, v49, 8uLL);
                }
                CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(*(CFAllocatorRef *)(a1 + 96), 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                if (!Mutable) {
                  return 4294950305;
                }
                int v35 = Mutable;
                uint64_t v36 = CMPhotoCFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E4F332F0], SHIDWORD(v61));
                if (v36
                  || v62 != -1
                  && (uint64_t v36 = CMPhotoCFDictionarySetInt(v35, (const void *)*MEMORY[0x1E4F332B8], v62), v36))
                {
                  uint64_t v26 = v36;
                }
                else
                {
                  uint64_t v37 = CMPhotoHEIFFileWriterAddDerivedImageToCollection(*(void *)(a1 + 88), (int)v35, v30, v51, v49.i32[0], v49.i32[2], v77, v32, v76, v75, v74, a3, v51 == 1, v78);
                  uint64_t v26 = v37;
                  if (a13)
                  {
                    if (!v37) {
                      *a13 = v78[0];
                    }
                  }
                }
                uint64_t v38 = v35;
LABEL_44:
                CFRelease(v38);
                return v26;
              }
            }
            return 4294950306;
          }
        }
        return FigSignalErrorAt();
      }
    }
    uint64_t PixelBufferFromImage = CMPhotoCreatePixelBufferFromImage(*(const __CFAllocator **)(a1 + 96), v15, (opaqueCMSampleBuffer **)&cf);
    double v40 = (__CFDictionary *)cf;
    if (PixelBufferFromImage)
    {
      uint64_t v26 = PixelBufferFromImage;
      if (!cf) {
        return v26;
      }
    }
    else
    {
      long long v52 = *a10;
      *(void *)&long long v53 = *((void *)a10 + 2);
      uint64_t v26 = _encodePixelBufferForIndex((uint64_t *)a1, a4, a5, theDict, (void *)cf, a6, a7, a8, idx, (unsigned int *)&v52, a11, a12, a13, a14);
      double v40 = (__CFDictionary *)cf;
      if (!cf) {
        return v26;
      }
    }
    uint64_t v38 = v40;
    goto LABEL_44;
  }
  return FigSignalErrorAt();
}

uint64_t _encodePixelBufferForIndex(uint64_t *cf, int a2, CFIndex a3, const __CFDictionary *a4, void *a5, unsigned int a6, uint64_t a7, char a8, CFIndex idx, unsigned int *a10, unsigned __int8 a11, uint64_t a12, CFIndex *a13, uint64_t a14)
{
  LODWORD(v19) = a2;
  uint64_t v443 = *MEMORY[0x1E4F143B8];
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  CFAllocatorRef allocator = CFGetAllocator(cf);
  __int16 v343 = cf + 11;
  CFTypeID v21 = CFGetTypeID(a5);
  CFDictionaryRef Mutable = 0;
  CMVideoFormatDescriptionRef formatDescriptionOut = 0;
  CFTypeID TypeID = CMFormatDescriptionGetTypeID();
  BOOL v314 = v21 == TypeID;
  uint64_t v436 = 0;
  CFDataRef v437 = 0;
  uint64_t v433 = 0;
  __int16 v434 = &v433;
  uint64_t v435 = 0x2000000000;
  uint64_t v429 = 0;
  __int16 v430 = &v429;
  uint64_t v431 = 0x2000000000;
  uint64_t v432 = 0;
  if (_allowHEIFAsynchronousEncodeOverride_onceToken != -1) {
    dispatch_once(&_allowHEIFAsynchronousEncodeOverride_onceToken, &__block_literal_global_26);
  }
  __int16 v335 = cf;
  uint64_t v316 = a12;
  unsigned int v428 = 0;
  CFIndex v427 = -1;
  uint64x2_t v426 = 0uLL;
  uint64_t v401 = 0;
  unsigned int v402 = &v401;
  uint64_t v403 = 0x17000000000;
  long long v419 = 0u;
  long long v420 = 0u;
  long long v421 = 0u;
  long long v422 = 0u;
  long long v423 = 0u;
  long long v424 = 0u;
  long long v404 = 0u;
  long long v405 = 0u;
  long long v406 = 0u;
  long long v407 = 0u;
  long long v408 = 0u;
  long long v409 = 0u;
  long long v410 = 0u;
  long long v411 = 0u;
  long long v412 = 0u;
  long long v413 = 0u;
  long long v414 = 0u;
  long long v415 = 0u;
  long long v416 = 0u;
  long long v417 = 0u;
  long long v418 = 0u;
  uint64_t v425 = 0;
  if (v21 == TypeID)
  {
    uint64_t MediaSubType = CMFormatDescriptionGetMediaSubType((CMFormatDescriptionRef)a5);
    LOBYTE(v441) = 0;
    int BooleanIfPresent = CMPhotoCFDictionaryGetBooleanIfPresent(a4, @"AddMIAFCompliantThumbnails", &v441);
    CGRect CleanAperture = CMVideoFormatDescriptionGetCleanAperture((CMVideoFormatDescriptionRef)a5, 1u);
    double x = CleanAperture.origin.x;
    double y = CleanAperture.origin.y;
    double width = CleanAperture.size.width;
    double height = CleanAperture.size.height;
    if (v19 == 1 && BooleanIfPresent)
    {
      unint64_t v28 = 320;
      *(void *)CFTypeRef cfa = 320;
      *(_OWORD *)CFNumberRef value = 0uLL;
      if ((_BYTE)v441)
      {
        uint64_t SequenceHandleForImage = CMPhotoDetermineMIAFCompliantThumbnailMaxPixelSize((unint64_t *)cfa, CleanAperture.size.width, CleanAperture.size.height);
        if (SequenceHandleForImage) {
          goto LABEL_273;
        }
        unint64_t v28 = *(void *)cfa;
      }
      CMPhotoPixelBufferConstrainSizeToMaxSideLength(vcvtad_u64_f64(width), vcvtad_u64_f64(height), v28, 0, 0, 0, 1, (unint64_t *)value, 0, 0);
      double width = (double)*(unint64_t *)value;
      double height = (double)*(unint64_t *)&value[8];
      double x = 0.0;
      uint64_t MediaSubType = CMPhotoGetUncompressedPixelFormatFromCompressedPixelFormat(MediaSubType);
      double y = 0.0;
    }
    int32x4_t v321 = (const opaqueCMFormatDescription *)a5;
  }
  else
  {
    v434[3] = (uint64_t)a5;
    uint64_t MediaSubType = CVPixelBufferGetPixelFormatType((CVPixelBufferRef)a5);
    double x = CMPhotoGetPixelBufferCLAPAsRect((__CVBuffer *)v434[3]);
    double y = v30;
    double width = v31;
    double height = v32;
    int32x4_t v321 = 0;
  }
  unsigned int v428 = MediaSubType;
  CVPixelBufferRetain((CVPixelBufferRef)v434[3]);
  unsigned int v33 = a6 - 1;
  if (v19 == 2 && v33 <= 1)
  {
    if ((int)MediaSubType > 1380411456)
    {
      if ((int)MediaSubType <= 1717856626)
      {
        if ((int)MediaSubType > 1651926375)
        {
          if (MediaSubType != 1651926376)
          {
            int v34 = 1717855600;
            goto LABEL_37;
          }
        }
        else if (MediaSubType != 1380411457)
        {
          int v34 = 1647719528;
          goto LABEL_37;
        }
      }
      else if ((int)MediaSubType <= 1751411058)
      {
        if (MediaSubType != 1717856627)
        {
          int v34 = 1751410032;
          goto LABEL_37;
        }
      }
      else if (MediaSubType != 1751411059 && MediaSubType != 1751527984)
      {
        int v34 = 1932996149;
        goto LABEL_37;
      }
    }
    else if ((int)MediaSubType > 1278226735)
    {
      if ((MediaSubType - 1278226736) > 6 || ((1 << (MediaSubType - 48)) & 0x45) == 0)
      {
        int v34 = 1380410945;
        goto LABEL_37;
      }
    }
    else if (((MediaSubType - 1278226488) > 0x30 {
            || ((1 << (MediaSubType - 56)) & 0x1400000000001) == 0)
    }
           && MediaSubType != 825306677)
    {
      int v34 = 825437747;
LABEL_37:
      if (MediaSubType == v34) {
        goto LABEL_38;
      }
      uint64_t SequenceHandleForImage = FigSignalErrorAt();
LABEL_273:
      uint64_t PropertiesForSequence = SequenceHandleForImage;
      CFDictionaryRef MutableCopy = 0;
      uint64_t v85 = 0;
      BOOL v315 = 0;
      BOOL v332 = 0;
      goto LABEL_274;
    }
  }
LABEL_38:
  if (v19)
  {
    if (v21 != TypeID)
    {
      uint64_t SequenceHandleForImage = CMPhotoHEIFFileWriterGetSequenceHandleForImage(*v343, a3, 0, &idx);
      if (SequenceHandleForImage) {
        goto LABEL_273;
      }
    }
  }
  CFIndex v342 = idx;
  BOOL v332 = idx != -1;
  CropPreOrientatiouint64_t n = _parseOptions(a4, v19, v332, (uint64_t)(v402 + 3), x, y, width, height);
  if (CropPreOrientation) {
    goto LABEL_687;
  }
  uint64_t v308 = a7;
  int v38 = *((unsigned __int8 *)v402 + 340);
  uint64_t v39 = v402[43];
  if (*((_DWORD *)v402 + 7) != 1936484717
    || MediaSubType == 875704422
    || MediaSubType == 1652056888
    || (v447.origin.double x = x,
        v447.origin.double y = y,
        v447.size.double width = width,
        v447.size.double height = height,
        CGRectEqualToRect(*((CGRect *)v402 + 6), v447)))
  {
    if (v38)
    {
      if (!v19 && v21 == TypeID) {
        goto LABEL_52;
      }
    }
    else if (!v19 || v39 == -1)
    {
      goto LABEL_52;
    }
  }
  CropPreOrientatiouint64_t n = FigSignalErrorAt();
  if (CropPreOrientation) {
    goto LABEL_687;
  }
LABEL_52:
  double v40 = v402;
  if (!*((unsigned char *)v402 + 98) || !*((unsigned char *)v402 + 176) || (int v41 = *((_DWORD *)v402 + 47), v41 == 1))
  {
    int v318 = 0;
    goto LABEL_56;
  }
  if (v21 != TypeID)
  {
    *(void *)CFNumberRef value = 0;
    CropPreOrientatiouint64_t n = CMPhotoScaleAndRotateSessionTransformForSizeWithOptions(v335[4], (__CVBuffer *)v434[3], 0, 1, v41, MediaSubType, 0, 0, *((CGFloat *)v402 + 24), *((CGFloat *)v402 + 25), *((CGFloat *)v402 + 26), *((CGFloat *)v402 + 27), *MEMORY[0x1E4F1DB30], *(double *)(MEMORY[0x1E4F1DB30] + 8), v36, v37, *((unsigned char *)v402 + 304), 64, *((_DWORD *)v402 + 68),
                           BYTE1(*((_DWORD *)v402 + 68)),
                           BYTE2(*((_DWORD *)v402 + 68)),
                           HIBYTE(*((_DWORD *)v402 + 68)),
                           (__CVBuffer **)value);
    if (!CropPreOrientation)
    {
      int8x16_t v49 = v434;
      unsigned int v50 = (const void *)v434[3];
      if (v50)
      {
        CFRelease(v50);
        int8x16_t v49 = v434;
      }
      int v51 = *(__CVBuffer **)value;
      v49[3] = *(void *)value;
      double PixelBufferCLAPAsRect = CMPhotoGetPixelBufferCLAPAsRect(v51);
      double width = v53;
      double height = v54;
      int v318 = 0;
      uint64_t v47 = v402;
      *((double *)v402 + 24) = PixelBufferCLAPAsRect;
      v47[25] = v55;
      *((double *)v47 + 26) = v53;
      *((double *)v47 + 27) = v54;
      goto LABEL_78;
    }
LABEL_687:
    uint64_t PropertiesForSequence = CropPreOrientation;
    CFDictionaryRef MutableCopy = 0;
    uint64_t v85 = 0;
    BOOL v315 = 0;
    goto LABEL_274;
  }
  memset(value, 0, 32);
  v398[0] = vcvtad_u64_f64(x);
  v398[1] = vcvtad_u64_f64(y);
  uint64_t v399 = vcvtad_u64_f64(width);
  uint64_t v400 = vcvtad_u64_f64(height);
  CropPreOrientatiouint64_t n = CMPhotoGetCropPreOrientation(v399, v400, v398, v41, value);
  if (CropPreOrientation) {
    goto LABEL_687;
  }
  double width = (double)*(unint64_t *)&value[16];
  double height = (double)*(unint64_t *)&value[24];
  uint64_t v47 = v402;
  *((float64x2_t *)v402 + 12) = vcvtq_f64_u64(*(uint64x2_t *)value);
  *((double *)v47 + 26) = width;
  *((double *)v47 + 27) = height;
  int v318 = 1;
LABEL_78:
  *((unsigned char *)v47 + 9_Block_object_dispose(&STACK[0x280], 8) = 0;
  int v56 = 1;
  *((_DWORD *)v47 + 47) = 1;
  uint64_t v57 = CMPhotoHEIFRotationCCWAndMirroringFromExifOrientation(1, (_DWORD *)v47 + 45, (int *)v47 + 46);
  if (v57)
  {
    uint64_t PropertiesForSequence = v57;
    CFDictionaryRef MutableCopy = 0;
    uint64_t v85 = 0;
    BOOL v315 = 0;
    uint64_t v322 = 0;
    CFDictionaryRef v66 = 0;
    CFTypeRef URNFromAuxiliaryImageType = 0;
    uint64_t v324 = 0;
    goto LABEL_278;
  }
  double v40 = v402;
LABEL_56:
  if (*((unsigned char *)v40 + 279)) {
    BOOL v42 = 1;
  }
  else {
    BOOL v42 = *((unsigned char *)v40 + 280) != 0;
  }
  BOOL v315 = v42;
  CFDictionaryRef v333 = a4;
  if (*((unsigned char *)v40 + 24) || v21 == TypeID) {
    goto LABEL_86;
  }
  CFIndex v43 = idx;
  int v44 = *((_DWORD *)v40 + 7);
  *(_DWORD *)CFNumberRef value = v44;
  if (idx < 0)
  {
    if (v19)
    {
      uint64_t PropertiesForImage = CMPhotoHEIFFileWriterGetPropertiesForImage(*v343, a3, 0, value);
      if (PropertiesForImage) {
        goto LABEL_143;
      }
    }
    goto LABEL_85;
  }
  switch(v19)
  {
    case 2:
      uint64_t v58 = *v343;
      CFIndex v59 = idx;
      int v60 = 2;
LABEL_82:
      uint64_t PropertiesForSequence = CMPhotoHEIFFileWriterGetPropertiesForSequence(v58, v59, v60, 0, value);
      if (PropertiesForSequence == -16993) {
        uint64_t PropertiesForSequence = CMPhotoHEIFFileWriterGetPropertiesForSequence(*v343, v43, 0, 0, value);
      }
      if (PropertiesForSequence) {
        goto LABEL_144;
      }
LABEL_85:
      *((_DWORD *)v40 + 7) = *(_DWORD *)value;
      a4 = v333;
      goto LABEL_86;
    case 1:
      uint64_t v58 = *v343;
      CFIndex v59 = idx;
      int v60 = 1;
      goto LABEL_82;
    case 0:
      uint64_t v45 = CMPhotoHEIFFileWriterGetPropertiesForSequence(*v343, idx, 0, 0, value);
      if (v45)
      {
        uint64_t PropertiesForSequence = v45;
        if (v45 != -16993)
        {
LABEL_144:
          CFDictionaryRef MutableCopy = 0;
          uint64_t v85 = 0;
LABEL_274:
          uint64_t v322 = 0;
          CFDictionaryRef v66 = 0;
          CFTypeRef URNFromAuxiliaryImageType = 0;
          uint64_t v324 = 0;
LABEL_277:
          int v56 = 1;
LABEL_278:
          uint64_t v118 = (uint64_t)v335;
          goto LABEL_647;
        }
        *(_DWORD *)CFNumberRef value = v44;
      }
      goto LABEL_85;
  }
  uint64_t PropertiesForImage = FigSignalErrorAt();
  a4 = v333;
  if (PropertiesForImage) {
    goto LABEL_143;
  }
LABEL_86:
  uint64_t PropertiesForImage = CMPhotoGetDestinationPixelFormatFromOptions(a4, *((_DWORD *)v402 + 7), MediaSubType, &v428);
  if (PropertiesForImage)
  {
LABEL_143:
    uint64_t PropertiesForSequence = PropertiesForImage;
    goto LABEL_144;
  }
  char v307 = a8;
  unsigned int v334 = a6;
  long long v61 = v402;
  int v62 = *((unsigned __int8 *)v335 + 64);
  int v63 = *((unsigned __int8 *)v335 + 65);
  unsigned int v64 = v428;
  CFDictionaryRef theDict = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!theDict)
  {
    CFDictionaryRef MutableCopy = 0;
    uint64_t v85 = 0;
    uint64_t v322 = 0;
    CFDictionaryRef v66 = 0;
    CFTypeRef URNFromAuxiliaryImageType = 0;
    uint64_t v324 = 0;
    int v56 = 1;
    uint64_t PropertiesForSequence = 4294950305;
    goto LABEL_278;
  }
  long long v65 = (const void **)MEMORY[0x1E4F1CFD0];
  if (v62) {
    CFDictionarySetValue(theDict, @"UseCodecSessionPool", (const void *)*MEMORY[0x1E4F1CFD0]);
  }
  CFDictionaryRef v66 = theDict;
  if (v63) {
    CFDictionarySetValue(theDict, @"ForceHighSpeedEncode", *v65);
  }
  CMPhotoCFDictionarySetInt32(theDict, @"ThreadPriority", *((_DWORD *)v61 + 84));
  long long v67 = (const void *)v61[5];
  if (v67) {
    CFDictionarySetValue(theDict, @"QualityControllerType", v67);
  }
  long long v68 = (const void *)v61[6];
  if (v68) {
    CFDictionarySetValue(theDict, @"QualityControllerParameters", v68);
  }
  int v69 = *((_DWORD *)v61 + 66);
  if (v69 != -1) {
    CMPhotoCFDictionarySetInt(theDict, @"SlimXBitShift", v69);
  }
  int v70 = *((_DWORD *)v61 + 67);
  if (v70 != -1) {
    CMPhotoCFDictionarySetInt(theDict, @"SlimHrlcRunLengthValue", v70);
  }
  CMPhotoCFDictionarySetInt(theDict, @"SlimCodecFlavor", *((_DWORD *)v61 + 65));
  if (*((unsigned char *)v61 + 89))
  {
    if (*((unsigned char *)v61 + 88)) {
      long long v71 = v65;
    }
    else {
      long long v71 = (const void **)MEMORY[0x1E4F1CFC8];
    }
    CFDictionarySetValue(theDict, @"AllowPixelTransfer", *v71);
  }
  if (*((unsigned char *)v61 + 276)) {
    CFDictionarySetValue(theDict, @"RequireHardwareCodec", *v65);
  }
  if (*((unsigned char *)v61 + 277)) {
    CFDictionarySetValue(theDict, @"PreferSoftwareCodec", *v65);
  }
  long long v72 = (const void *)v61[41];
  if (v72) {
    CFDictionarySetValue(theDict, @"CustomMinimumSourceAlignment", v72);
  }
  uint64_t v73 = (const void *)v61[36];
  if (v73)
  {
    CFDictionarySetValue(theDict, @"UseCodecSessionPool", v73);
    if (v342 != -1) {
      FigCFEqual();
    }
  }
  CFAllocatorRef v74 = (const void *)v61[37];
  if (v74) {
    CFDictionarySetValue(theDict, @"Priority", v74);
  }
  uint64_t v75 = (const void *)v61[10];
  if (v75) {
    CFDictionarySetValue(theDict, @"UsePixelsOutsideCrop", v75);
  }
  if (*((unsigned char *)v61 + 305))
  {
    uint64_t v76 = (const void **)MEMORY[0x1E4F1CFC8];
    if (*((unsigned char *)v61 + 304)) {
      uint64_t v76 = v65;
    }
    CFDictionarySetValue(theDict, @"UseVTCompression", *v76);
  }
  if (v342 != -1)
  {
    if (!CFDictionaryContainsKey(theDict, @"UseVTCompression"))
    {
      CFDictionarySetValue(theDict, @"UseVTCompression", *v65);
      *((unsigned char *)v61 + 304) = 1;
    }
    if (!CFDictionaryContainsKey(theDict, @"UseCodecSessionPool"))
    {
      uint64_t v77 = *v65;
      CFDictionarySetValue(theDict, @"UseCodecSessionPool", *v65);
      v61[36] = (uint64_t)v77;
    }
  }
  if (v19 != 2)
  {
    uint64_t v324 = 0;
    CFTypeRef URNFromAuxiliaryImageType = 0;
    int v306 = 0;
    goto LABEL_298;
  }
  if (*((unsigned char *)v61 + 32))
  {
    int v78 = v334;
    CFDictionaryRef v79 = v333;
    goto LABEL_153;
  }
  uint64_t v80 = v61[40];
  BOOL v81 = v80 != 0;
  if (v80 && !*((unsigned char *)v61 + 24)) {
    *((_DWORD *)v61 + 7) = 1785750887;
  }
  if (v64 == 1278226736 || v64 == 1278226742)
  {
    int v82 = *((_DWORD *)v61 + 7);
    if (v80) {
      BOOL v83 = 1;
    }
    else {
      BOOL v83 = v82 == 1785750887;
    }
    BOOL v81 = v83;
  }
  else
  {
    int v82 = *((_DWORD *)v61 + 7);
  }
  *(void *)CFNumberRef value = 0;
  *(void *)CFTypeRef cfa = 0;
  uint64_t v86 = CMPhotoQualityControllerCopyDefaultControllerForAuxiliaryImage(v82, v81, (CFNumberRef *)value, (CFNumberRef *)cfa);
  int v78 = v334;
  CFDictionaryRef v79 = v333;
  if (v86)
  {
    uint64_t PropertiesForSequence = v86;
    CFRelease(theDict);
    goto LABEL_144;
  }
  CFDictionarySetValue(theDict, @"QualityControllerType", *(const void **)value);
  if (*(void *)cfa) {
    CFDictionarySetValue(theDict, @"QualityControllerParameters", *(const void **)cfa);
  }
  if (*(void *)value) {
    CFRelease(*(CFTypeRef *)value);
  }
  if (*(void *)cfa) {
    CFRelease(*(CFTypeRef *)cfa);
  }
LABEL_153:
  int v397 = 0;
  if (FigCFDictionaryGetIntIfPresent()) {
    BOOL v87 = v397 == 5;
  }
  else {
    BOOL v87 = 0;
  }
  int v88 = v87;
  CFNumberRef v89 = (const __CFNumber *)v402[40];
  if (v89 && (v88 & 1) == 0) {
    goto LABEL_269;
  }
  int v306 = v88;
  if (v21 == TypeID)
  {
    if ((int)MediaSubType > 1380411456)
    {
      if ((int)MediaSubType <= 1717856626)
      {
        if ((int)MediaSubType > 1651926375)
        {
          if (MediaSubType == 1651926376) {
            goto LABEL_259;
          }
          int v90 = 1717855600;
        }
        else
        {
          if (MediaSubType == 1380411457) {
            goto LABEL_259;
          }
          int v90 = 1647719528;
        }
      }
      else if ((int)MediaSubType <= 1751411058)
      {
        if (MediaSubType == 1717856627) {
          goto LABEL_259;
        }
        int v90 = 1751410032;
      }
      else
      {
        if (MediaSubType == 1751411059 || MediaSubType == 1932996149) {
          goto LABEL_259;
        }
        int v90 = 1751527984;
      }
    }
    else
    {
      if ((int)MediaSubType <= 1278226735)
      {
        if (((MediaSubType - 1278226488) > 0x30
           || ((1 << (MediaSubType - 56)) & 0x1400000000001) == 0)
          && MediaSubType != 825306677)
        {
          int v90 = 825437747;
          goto LABEL_258;
        }
LABEL_259:
        if (v88) {
          LODWORD(MediaSubType) = 1278226742;
        }
        else {
          LODWORD(MediaSubType) = 1278226488;
        }
        unsigned int v428 = MediaSubType;
LABEL_263:
        if (v78 != 4)
        {
          uint64_t v324 = 0;
          CFTypeRef URNFromAuxiliaryImageType = 0;
          goto LABEL_298;
        }
LABEL_264:
        if (v79)
        {
          uint64_t v115 = CFDictionaryGetValue(v79, @"AuxiliaryImageCustomTypeURN");
          if (v115)
          {
            CFIndex v116 = v115;
            CFTypeID v117 = CFGetTypeID(v115);
            if (v117 == CFStringGetTypeID())
            {
              CFTypeRef URNFromAuxiliaryImageType = CFRetain(v116);
              uint64_t v324 = 0;
              goto LABEL_298;
            }
          }
        }
        goto LABEL_269;
      }
      if ((MediaSubType - 1278226736) <= 6 && ((1 << (MediaSubType - 48)) & 0x45) != 0) {
        goto LABEL_259;
      }
      int v90 = 1380410945;
    }
LABEL_258:
    if (MediaSubType != v90) {
      goto LABEL_263;
    }
    goto LABEL_259;
  }
  int v91 = *((_DWORD *)v402 + 7);
  if (v91 != 1936484717)
  {
    *(void *)CFNumberRef value = 0;
    if (v428 == 1278226742)
    {
      if (!v88 || v91 != 1785750887) {
        goto LABEL_269;
      }
      unsigned int v94 = 16;
    }
    else
    {
      if (v428 == 1278226736)
      {
        if (v91 == 1785750887) {
          unsigned int v94 = 16;
        }
        else {
          unsigned int v94 = 10;
        }
        if (v91 != 1785750887 || (v88 & 1) != 0) {
          goto LABEL_198;
        }
LABEL_269:
        uint64_t v92 = FigSignalErrorAt();
LABEL_270:
        uint64_t PropertiesForSequence = v92;
LABEL_271:
        uint64_t v324 = 0;
        CFTypeRef URNFromAuxiliaryImageType = 0;
        goto LABEL_276;
      }
      if (v88) {
        unsigned int v94 = 16;
      }
      else {
        unsigned int v94 = 8;
      }
    }
LABEL_198:
    BOOL v95 = v91 == 1752589105;
    if (v428 != 1278226736) {
      BOOL v95 = 0;
    }
    if (v428 == 1278226742) {
      int v96 = v88;
    }
    else {
      int v96 = 0;
    }
    BOOL v97 = v94 == 16 && v428 == 1278226736;
    int v98 = v78 == 5 || v95;
    BOOL v83 = v91 == 1785750887;
    int v99 = v96 | v97;
    if (!v83) {
      int v99 = 0;
    }
    int v100 = v98 | v99;
    if (MediaSubType == 1751527984) {
      int v101 = 1;
    }
    else {
      int v101 = v100;
    }
    if (*MEMORY[0x1E4F1EBA8] == 1)
    {
      kdebug_trace();
      CFNumberRef v89 = (const __CFNumber *)v402[40];
    }
    uint64_t PropertiesForSequence = CMPhotoCreateCompressionCompatiblePixelBufferWithAuxType((CVPixelBufferRef)v434[3], (const void *)v335[3], v78, v94, v89, v101, (CFTypeRef *)value, &Mutable);
    if (*MEMORY[0x1E4F1EBA8] == 1) {
      kdebug_trace();
    }
    if (PropertiesForSequence) {
      goto LABEL_271;
    }
    uint64_t v102 = v434;
    uint64_t v103 = (const void *)v434[3];
    CFDictionaryRef v79 = v333;
    if (v103)
    {
      CFRelease(v103);
      uint64_t v102 = v434;
    }
    int v93 = *(__CVBuffer **)value;
    v102[3] = *(void *)value;
    goto LABEL_222;
  }
  CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    uint64_t v324 = 0;
    CFTypeRef URNFromAuxiliaryImageType = 0;
    uint64_t PropertiesForSequence = 4294950305;
    goto LABEL_276;
  }
  CVPixelBufferGetPixelFormatType((CVPixelBufferRef)v434[3]);
  uint64_t v92 = FigCFDictionarySetInt();
  if (v92) {
    goto LABEL_270;
  }
  CVPixelBufferGetPixelFormatType((CVPixelBufferRef)v434[3]);
  uint64_t v92 = FigCFDictionarySetInt();
  if (v92) {
    goto LABEL_270;
  }
  int v93 = (__CVBuffer *)v434[3];
LABEL_222:
  LODWORD(MediaSubType) = CVPixelBufferGetPixelFormatType(v93);
  unsigned int v428 = MediaSubType;
  if (v78 == 4) {
    goto LABEL_264;
  }
  CFDictionaryRef v104 = Mutable;
  CFArrayRef v105 = (__CVBuffer *)v434[3];
  CFTypeRef URNFromAuxiliaryImageType = CMPhotoCreateURNFromAuxiliaryImageType(v78);
  if (v33 < 2)
  {
    *(void *)CFTypeRef cfa = 0;
    memset(value, 0, 32);
    LODWORD(v441) = 0;
    LODWORD(v440) = 0;
    CFAllocatorRef v107 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDataRef v112 = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
    if (v112)
    {
      uint64_t WritableWithCFMutableData = FigByteStreamCreateWritableWithCFMutableData();
      if (WritableWithCFMutableData)
      {
        uint64_t PropertiesForSequence = WritableWithCFMutableData;
      }
      else
      {
        CMPhotoBitStreamWriteInit(value, *(uint64_t *)cfa, 0);
        if (v78 == 1) {
          uint64_t v114 = 1;
        }
        else {
          uint64_t v114 = 2;
        }
        if (v104 && !CFDictionaryContainsKey(v104, @"FloatMaxValue"))
        {
          CMPhotoBitStreamWriteBits((uint64_t)value, 0, 4u);
          CMPhotoBitStreamWriteExpGolomb((uint64_t)value, v114);
        }
        else
        {
          if (!FigCFDictionaryGetFloatIfPresent() || !FigCFDictionaryGetFloatIfPresent())
          {
            CFDataRef v111 = 0;
            char v110 = 0;
            uint64_t PropertiesForSequence = 4294950304;
            goto LABEL_284;
          }
          if (v78 == 2)
          {
            CMPhotoBitStreamWriteBits((uint64_t)value, 3, 2u);
            CMPhotoBitStreamWriteBits((uint64_t)value, 0, 2u);
          }
          else
          {
            CMPhotoBitStreamWriteBits((uint64_t)value, 0, 2u);
            CMPhotoBitStreamWriteBits((uint64_t)value, 3, 2u);
            CMPhotoBitStreamWriteExpGolomb((uint64_t)value, v114);
            uint64_t v114 = 0;
          }
          CMPhotoBitStreamWriteExpGolomb((uint64_t)value, v114);
          _writeDepthRepInfoElement((uint64_t)value, *(float *)&v440);
          _writeDepthRepInfoElement((uint64_t)value, *(float *)&v441);
        }
        uint64_t PropertiesForSequence = CMPhotoBitStreamWriteFlush((uint64_t)value);
        if (!PropertiesForSequence)
        {
          char v110 = -79;
          CFDataRef v111 = v112;
          CFMutableDataRef v112 = 0;
          goto LABEL_284;
        }
      }
      CFDataRef v111 = 0;
      char v110 = 0;
    }
    else
    {
      CFDataRef v111 = 0;
      char v110 = 0;
      uint64_t PropertiesForSequence = 4294950305;
    }
LABEL_284:
    if (*(void *)cfa) {
      CFRelease(*(CFTypeRef *)cfa);
    }
    if (v112) {
      CFRelease(v112);
    }
    if (PropertiesForSequence) {
      goto LABEL_242;
    }
    goto LABEL_289;
  }
  uint64_t v324 = 0;
  if (v78 != 5)
  {
    if (v78 != 3)
    {
      uint64_t PropertiesForSequence = 4294950304;
      goto LABEL_276;
    }
    *(void *)CFTypeRef cfa = 0;
    memset(value, 0, 32);
    BOOL v106 = CMPhotoPixelBufferGetAlphaMode(v105) == 1;
    CFAllocatorRef v107 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDataRef v108 = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
    if (v108)
    {
      uint64_t v109 = FigByteStreamCreateWritableWithCFMutableData();
      if (v109) {
        goto LABEL_720;
      }
      CMPhotoBitStreamWriteInit(value, *(uint64_t *)cfa, 0);
      uint64_t v109 = CMPhotoBitStreamWriteBits((uint64_t)value, 0, 1u);
      if (v109
        || (uint64_t v109 = CMPhotoBitStreamWriteBits((uint64_t)value, v106, 3u), v109)
        || (uint64_t v109 = CMPhotoBitStreamWriteBits((uint64_t)value, 0, 3u), v109)
        || (uint64_t v109 = CMPhotoBitStreamWriteBits((uint64_t)value, 0, 8u), v109)
        || (uint64_t v109 = CMPhotoBitStreamWriteBits((uint64_t)value, 255, 8u), v109)
        || (uint64_t v109 = CMPhotoBitStreamWriteBits((uint64_t)value, 0, 1u), v109)
        || (uint64_t v109 = CMPhotoBitStreamWriteBits((uint64_t)value, 0, 1u), v109))
      {
LABEL_720:
        uint64_t PropertiesForSequence = v109;
      }
      else
      {
        uint64_t PropertiesForSequence = CMPhotoBitStreamWriteFlush((uint64_t)value);
        if (!PropertiesForSequence)
        {
          char v110 = -91;
          CFDataRef v111 = v108;
          CFMutableDataRef v108 = 0;
          goto LABEL_237;
        }
      }
      CFDataRef v111 = 0;
      char v110 = 0;
    }
    else
    {
      CFDataRef v111 = 0;
      char v110 = 0;
      uint64_t PropertiesForSequence = 4294950305;
    }
LABEL_237:
    if (*(void *)cfa) {
      CFRelease(*(CFTypeRef *)cfa);
    }
    if (v108) {
      CFRelease(v108);
    }
    if (PropertiesForSequence)
    {
LABEL_242:
      uint64_t v324 = 0;
      CFDictionaryRef v66 = theDict;
      goto LABEL_295;
    }
LABEL_289:
    if (!v111)
    {
      uint64_t v324 = 0;
      uint64_t PropertiesForSequence = 4294950304;
      CFDictionaryRef v66 = theDict;
      goto LABEL_276;
    }
    unint64_t Length = CFDataGetLength(v111);
    CFIndex v120 = CFDataCreateMutable(v107, 0);
    if (!v120)
    {
      uint64_t v324 = 0;
      uint64_t PropertiesForSequence = 4294950305;
      CFDictionaryRef v66 = theDict;
LABEL_296:
      CFRelease(v111);
LABEL_297:
      if (!PropertiesForSequence) {
        goto LABEL_298;
      }
LABEL_276:
      CFDictionaryRef MutableCopy = 0;
      uint64_t v85 = 0;
      uint64_t v322 = 0;
      goto LABEL_277;
    }
    CFIndex v121 = v120;
    int v122 = Length + Length / 0xFF;
    *(_DWORD *)CFNumberRef value = bswap32(v122 + 8);
    CFDataAppendBytes(v120, value, 4);
    *(_DWORD *)CFNumberRef value = bswap32(v122 + 4);
    CFDataAppendBytes(v121, value, 4);
    *(_WORD *)CFNumberRef value = 334;
    CFDataAppendBytes(v121, value, 2);
    value[0] = v110;
    CFDataAppendBytes(v121, value, 1);
    value[0] = -1;
    CFDictionaryRef v66 = theDict;
    if (Length >= 0xFF)
    {
      unsigned int v123 = Length / 0xFF;
      do
      {
        CFDataAppendBytes(v121, value, 1);
        --v123;
      }
      while (v123);
    }
    cfa[0] = Length + Length / 0xFF;
    CFDataAppendBytes(v121, cfa, 1);
    unsigned __int8 BytePtr = CFDataGetBytePtr(v111);
    CFIndex v125 = CFDataGetLength(v111);
    uint64_t v324 = v121;
    CFDataAppendBytes(v121, BytePtr, v125);
    uint64_t PropertiesForSequence = 0;
LABEL_295:
    if (!v111) {
      goto LABEL_297;
    }
    goto LABEL_296;
  }
LABEL_298:
  unsigned int v396 = v428;
  BOOL v126 = CMPhotoEncoderSupportsPixelFormat(v428, *((_DWORD *)v402 + 7), *((unsigned __int8 *)v402 + 277), &v396);
  if (!v396
    || ((int v127 = v428, !v126) ? (v128 = 1) : (v128 = MediaSubType != v428), MediaSubType != v428 && !v126))
  {
    uint64_t PropertiesForSequence = FigSignalErrorAt();
    goto LABEL_276;
  }
  CFTypeID v339 = v21;
  BOOL v129 = 0;
  CFDataRef v130 = (uint64x2_t *)v402;
  int v131 = *((unsigned __int8 *)v402 + 96);
  int v132 = *((unsigned __int8 *)v402 + 97);
  int v133 = *((_DWORD *)v402 + 7);
  float64x2_t v336 = *((float64x2_t *)v402 + 12);
  float64x2_t v134 = *((float64x2_t *)v402 + 13);
  *(_OWORD *)CFNumberRef value = 0uLL;
  if (v19 == 2 && v334 == 4)
  {
    float64x2_t v325 = v134;
    int v135 = FigCFEqual();
    float64x2_t v134 = v325;
    BOOL v129 = v135 != 0;
  }
  uint64x2_t v136 = vcvtq_u64_f64(vrndaq_f64(v134));
  unint64_t v137 = v130[5].u32[3];
  if ((int)v137 < 1) {
    goto LABEL_318;
  }
  if (v136.i64[0] <= (unint64_t)v136.i64[1]) {
    unint64_t v138 = v136.u64[1];
  }
  else {
    unint64_t v138 = v136.i64[0];
  }
  BOOL v139 = v138 > v137;
  BOOL v140 = v138 != v137;
  int v141 = v139;
  if (!v131) {
    BOOL v140 = v141;
  }
  if (v140)
  {
    CMPhotoPixelBufferConstrainSizeToMaxSideLength(v136.u64[0], v136.u64[1], v137, 0, 0, v131, v132, (unint64_t *)&v426, 0, 0);
    int v142 = 1;
  }
  else
  {
LABEL_318:
    int v142 = 0;
    uint64x2_t v426 = v136;
  }
  if (v19 == 2 && v334 == 3 && v339 != TypeID)
  {
    TilingOptiouint64_t n = CMPhotoHEIFFileWriterGetPropertiesForImage(*v343, a3, value, 0);
    if (TilingOption)
    {
LABEL_678:
      uint64_t PropertiesForSequence = TilingOption;
      CFTypeID v21 = v339;
      goto LABEL_679;
    }
    __int32 v144 = *(_DWORD *)value;
    if (*(_OWORD *)value != *(_OWORD *)&v426)
    {
      int v142 = 0;
      unsigned int v145 = *(_DWORD *)value - v426.i32[0];
      if (*(_DWORD *)value - v426.i32[0] < 0) {
        unsigned int v145 = v426.i32[0] - *(_DWORD *)value;
      }
      unsigned int v146 = *(_DWORD *)&value[8] - v426.i32[2];
      if (*(_DWORD *)&value[8] - v426.i32[2] < 0) {
        unsigned int v146 = v426.i32[2] - *(_DWORD *)&value[8];
      }
      if (v145 <= 1 && v146 <= 1)
      {
        if (*(void *)value <= *(void *)&value[8]) {
          __int32 v144 = *(_DWORD *)&value[8];
        }
        v130[5].i32[3] = v144;
        int v142 = 1;
      }
    }
  }
  if (v333)
  {
    TilingOptiouint64_t n = CMPhotoGetTilingOption(v333, v426.u64[0], v426.u64[1], v127, v133, &v130[6].i8[8], &v130[6].i8[9], (unint64_t *)&v130[8], (uint64x2_t *)v130[9].i64);
    if (TilingOption) {
      goto LABEL_678;
    }
  }
  float64x2_t v147 = vrndaq_f64(v336);
  if (v130[6].i8[8])
  {
    int v148 = v130[6].u8[9];
    unint64_t v149 = v426.i64[0];
    goto LABEL_337;
  }
  float64x2_t v337 = v147;
  if (v129)
  {
    if (*(_OWORD *)value != 0)
    {
LABEL_345:
      int v153 = (unint64_t *)value;
      goto LABEL_347;
    }
    if (v339 == TypeID)
    {
      *(_OWORD *)CFNumberRef value = *((_OWORD *)v335 + 11);
      goto LABEL_345;
    }
    int v153 = (unint64_t *)value;
    TilingOptiouint64_t n = CMPhotoHEIFFileWriterGetPropertiesForImage(*v343, a3, value, 0);
    if (TilingOption) {
      goto LABEL_678;
    }
  }
  else
  {
    int v153 = (unint64_t *)&v426;
  }
LABEL_347:
  TilingOptiouint64_t n = CMPhotoSetDefaultTilingOptionForCodec(v133, *v153, v153[1], v127, v130[8].i64);
  if (TilingOption) {
    goto LABEL_678;
  }
  unint64_t v149 = v426.i64[0];
  int v148 = v426.i64[0] >= (unint64_t)(2 * v130[8].i64[0]) || v426.i64[1] >= (unint64_t)(2 * v130[8].i64[1]);
  float64x2_t v147 = v337;
  if (v19 == 2)
  {
    if (v342 != -1) {
      int v148 = 0;
    }
    int v155 = v148 == 1 && (v426.i64[0] == *(void *)value && v426.i64[1] == *(void *)&value[8] || v129);
    CFTypeID v21 = v339;
    v130[6].i8[9] = v155;
    if (!v155) {
      goto LABEL_367;
    }
    goto LABEL_338;
  }
  if (v19)
  {
    CFTypeID v21 = v339;
LABEL_366:
    v130[6].i8[9] = 0;
    goto LABEL_367;
  }
  if (v342 != -1) {
    int v148 = 0;
  }
  v130[6].i8[9] = v148;
LABEL_337:
  CFTypeID v21 = v339;
  if (v148)
  {
LABEL_338:
    unint64_t v150 = v130[8].u64[0];
    if (v150 < v149 || v130[8].i64[1] < (unint64_t)v426.i64[1])
    {
      char v151 = 0;
      v130[7] = vcvtq_u64_f64(v147);
      char v152 = 1;
      goto LABEL_368;
    }
    goto LABEL_366;
  }
LABEL_367:
  char v152 = 0;
  uint64x2_t v156 = v426;
  v130[7] = vcvtq_u64_f64(v147);
  v130[8] = v156;
  unint64_t v150 = v130[8].u64[0];
  char v151 = 1;
LABEL_368:
  unint64_t v157 = (v149 + v150 - 1) / v150;
  unint64_t v158 = v426.u64[1];
  unint64_t v159 = v130[8].u64[1];
  unint64_t v160 = (v426.i64[1] + v159 - 1) / v159;
  v130[10].i64[0] = v157;
  v130[10].i64[1] = v160;
  if (v133 == 1936484717)
  {
    if (v151) {
      goto LABEL_382;
    }
    uint64_t PropertiesForSequence = 4294950297;
    if (v157 != 1 || v160 > 4) {
      goto LABEL_679;
    }
    unint64_t v161 = v130[9].u64[1];
    if (v161) {
      BOOL v162 = v161 >= v159;
    }
    else {
      BOOL v162 = 1;
    }
    char v163 = !v162;
    v130[6].i8[10] = v163;
  }
  if (v342 == -1) {
    char v152 = 0;
  }
  if (v152)
  {
    uint64_t v295 = FigSignalErrorAt();
    if (!v295)
    {
      unint64_t v158 = v426.u64[1];
      unint64_t v149 = v426.i64[0];
      goto LABEL_382;
    }
    uint64_t PropertiesForSequence = v295;
LABEL_679:
    CFDictionaryRef MutableCopy = 0;
    uint64_t v85 = 0;
    uint64_t v322 = 0;
    int v56 = 1;
    uint64_t v118 = (uint64_t)v335;
    goto LABEL_703;
  }
LABEL_382:
  uint64_t v164 = (__CVBuffer *)v434[3];
  int v165 = v402;
  uint64_t v166 = v396;
  *(void *)CFTypeRef cfa = 0;
  __int16 v440 = 0;
  __int16 v441 = 0;
  double v167 = (double)v149;
  double v168 = (double)v158;
  unsigned int v338 = v19;
  BOOL v169 = (vabdd_f64(floor((double)v149 * 0.5), (double)v149 * 0.5) >= 0.000001
       || vabdd_f64(floor(v168 * 0.5), v168 * 0.5) >= 0.000001)
      && !v142
      && *((unsigned char *)v402 + 105) == 0;
  double v170 = *MEMORY[0x1E4F1DB30];
  double v171 = *(double *)(MEMORY[0x1E4F1DB30] + 8);
  int v172 = v142 | v128;
  if (*((unsigned char *)v402 + 106) && v169 | v172) {
    goto LABEL_712;
  }
  if (!v172)
  {
LABEL_413:
    int v175 = 0;
LABEL_414:
    uint64_t v118 = (uint64_t)v335;
    CFTypeRef v178 = v321;
    if (!v169)
    {
LABEL_447:
      double v170 = *((double *)v165 + 26);
      double v171 = *((double *)v165 + 27);
      double v191 = v171;
      double v327 = v170;
      LODWORD(v19) = v338;
      goto LABEL_448;
    }
LABEL_415:
    int64x2_t v179 = (int64x2_t)vcvtq_u64_f64(vrndaq_f64(*((float64x2_t *)v165 + 13)));
    unint64_t v180 = v179.u64[1];
    unint64_t v181 = v179.i64[0];
    uint64x2_t v182 = (uint64x2_t)vaddq_s64(vaddq_s64(v179, vdupq_n_s64(2uLL)), (int64x2_t)vorrq_s8((int8x16_t)v179, (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFFELL)));
    if (v339 == TypeID)
    {
      float64x2_t v183 = vcvtq_f64_u64(v182);
      LODWORD(v19) = v338;
LABEL_424:
      double v170 = (double)v181;
      double v171 = (double)v180;
      double v191 = v183.f64[1];
      double v327 = v183.f64[0];
      *((uint64x2_t *)v165 + _Block_object_dispose(&STACK[0x280], 8) = v182;
LABEL_448:
      CFTypeID v21 = v339;
      if (v164) {
        CFTypeRef v209 = CFRetain(v164);
      }
      else {
        CFTypeRef v209 = 0;
      }
      uint64_t PropertiesForSequence = 0;
      goto LABEL_452;
    }
    *(uint64x2_t *)int16x4_t v323 = v182;
    LODWORD(v19) = v338;
    if (!v175)
    {
      uint64_t PaddedPixelBufferAndClearPadding = _createPaddedPixelBufferAndClearPadding(*(const void **)(v118 + 24), v166, v179.u64[0], v179.u64[1], 2uLL, 2uLL, *((unsigned __int8 *)v165 + 304), (CFTypeRef *)&v440);
      if (PaddedPixelBufferAndClearPadding
        || (uint64_t PaddedPixelBufferAndClearPadding = CMPhotoScaleAndRotateSessionTransformForSizeWithOptions(*(void *)(v118 + 32), v164, 0, 1, 1, v166, 0, 0, *((CGFloat *)v165 + 24), *((CGFloat *)v165 + 25), *((CGFloat *)v165 + 26), *((CGFloat *)v165 + 27), *((double *)v165 + 26), *((double *)v165 + 27), v185, v186, *((unsigned char *)v165 + 304), 64, *((_DWORD *)v165 + 68),
                                                 BYTE1(*((_DWORD *)v165 + 68)),
                                                 BYTE2(*((_DWORD *)v165 + 68)),
                                                 HIBYTE(*((_DWORD *)v165 + 68)),
                                                 &v440),
            PaddedPixelBufferAndClearPadding))
      {
LABEL_692:
        uint64_t PropertiesForSequence = PaddedPixelBufferAndClearPadding;
        CFTypeRef v209 = 0;
        double v191 = v171;
        double v327 = v170;
LABEL_725:
        CFTypeID v21 = v339;
LABEL_452:
        CFDictionaryRef v66 = theDict;
        goto LABEL_453;
      }
      uint64_t v164 = v440;
    }
    uint64_t PaddedPixelBufferAndClearPadding = CMPhotoRemovePixelBufferCLAP(v164);
    if (!PaddedPixelBufferAndClearPadding)
    {
      float64x2_t v326 = vcvtq_f64_u64(*(uint64x2_t *)v323);
      uint64_t PaddedPixelBufferAndClearPadding = CMPhotoSetPixelBufferCLAPFromRect(v164, 0, 1, 0.0, 0.0, v326.f64[0], v326.f64[1]);
      if (!PaddedPixelBufferAndClearPadding)
      {
        CFDictionarySetValue(theDict, @"UsePixelsOutsideCrop", (const void *)*MEMORY[0x1E4F1CFD0]);
        double v187 = CMPhotoGetPixelBufferCLAPAsRect(v164);
        *((double *)v165 + 24) = v187;
        *((double *)v165 + 25) = v188;
        v165[26] = v189;
        v165[27] = v190;
        v165[14] = vcvtad_u64_f64(v187);
        v165[15] = vcvtad_u64_f64(v188);
        float64x2_t v183 = v326;
        uint64x2_t v182 = *(uint64x2_t *)v323;
        goto LABEL_424;
      }
    }
    goto LABEL_692;
  }
  if (v142)
  {
    if (v128) {
      goto LABEL_392;
    }
LABEL_403:
    if (v339 != TypeID)
    {
      BOOL v174 = 0;
      goto LABEL_410;
    }
LABEL_404:
    int v175 = 0;
    v165[24] = 0;
    v165[25] = 0;
    *((double *)v165 + 26) = v167;
    *((double *)v165 + 27) = v168;
    v165[14] = 0;
    v165[15] = 0;
    goto LABEL_414;
  }
  *((_DWORD *)v402 + 23) = 0;
  if (!v128) {
    goto LABEL_403;
  }
LABEL_392:
  if (*((unsigned char *)v165 + 88))
  {
    if (v339 != TypeID)
    {
      if (*((unsigned char *)v165 + 56))
      {
        if (*MEMORY[0x1E4F1EBA8] == 1) {
          kdebug_trace();
        }
        int YUVPixelBufferWithDithering = CMPhotoCreateYUVPixelBufferWithDithering(v164, v335[3], v166, cfa);
        if (*MEMORY[0x1E4F1EBA8] == 1) {
          kdebug_trace();
        }
        BOOL v83 = YUVPixelBufferWithDithering == 0;
        BOOL v174 = YUVPixelBufferWithDithering != 0;
        if (v83) {
          uint64_t v164 = *(__CVBuffer **)cfa;
        }
      }
      else
      {
        BOOL v174 = 1;
      }
LABEL_410:
      if (v174 | v142)
      {
        if (*((unsigned char *)v165 + 105))
        {
          unint64_t v176 = v165[16];
          unint64_t v177 = v165[17];
        }
        else
        {
          unint64_t v177 = 16;
          unint64_t v176 = 16;
        }
        *(_OWORD *)CFNumberRef value = 0uLL;
        if (v142) {
          BOOL v192 = *((unsigned char *)v165 + 97) != 0;
        }
        else {
          BOOL v192 = 0;
        }
        CMPhotoPixelBufferConstrainSizeToMaxSideLength(v149, v158, *((int *)v165 + 23), 0, 0, *((unsigned __int8 *)v165 + 96), v192, (unint64_t *)value, 0, 0);
        if (*((unsigned char *)v165 + 304))
        {
          int v175 = 0;
        }
        else
        {
          uint64_t v193 = _createPaddedPixelBufferAndClearPadding((const void *)v335[3], v166, *(unint64_t *)value, *(unint64_t *)&value[8], v176, v177, 0, (CFTypeRef *)&v441);
          if (v193)
          {
            uint64_t PropertiesForSequence = v193;
            uint64_t v118 = (uint64_t)v335;
            CFTypeRef v178 = v321;
            goto LABEL_724;
          }
          CFDictionarySetValue(theDict, @"UsePixelsOutsideCrop", (const void *)*MEMORY[0x1E4F1CFD0]);
          double v167 = (double)*(unint64_t *)value;
          double v168 = (double)*(unint64_t *)&value[8];
          int v175 = 1;
        }
        if (*MEMORY[0x1E4F1EBA8] == 1) {
          kdebug_trace();
        }
        uint64_t v194 = v166;
        uint64_t DefaultTripletsForTransfer = CMPhotoCreateDefaultTripletsForTransfer(v164, v166);
        int v197 = v196;
        int IsFullRange = CMPhotoPixelFormatIsFullRange(v194);
        unsigned int v328 = v194;
        ChromaSubsamplingFromPixeluint64_t Format = CMPhotoGetChromaSubsamplingFromPixelFormat(v194);
        OSType PixelFormatType = CVPixelBufferGetPixelFormatType(v164);
        int v201 = CMPhotoPixelFormatContainsRGB(PixelFormatType);
        if (!v142 && v174 && *((unsigned char *)v165 + 57) && ChromaSubsamplingFromPixelFormat == 1 && IsFullRange && v201)
        {
          uint64_t v118 = (uint64_t)v335;
          uint64_t v204 = CMPhotoPixelBufferConvertRGBToYCbCrIdentityMatrix((const void *)v335[3], 1, v164, &v441);
        }
        else
        {
          uint64_t v118 = (uint64_t)v335;
          uint64_t v204 = CMPhotoScaleAndRotateSessionTransformForSizeWithOptions(v335[4], v164, 0, 1, 1, v328, DefaultTripletsForTransfer, v197, *((CGFloat *)v165 + 24), *((CGFloat *)v165 + 25), *((CGFloat *)v165 + 26), *((CGFloat *)v165 + 27), v167, v168, v202, v203, *((unsigned char *)v165 + 304), 64, *((_DWORD *)v165 + 68),
                   BYTE1(*((_DWORD *)v165 + 68)),
                   BYTE2(*((_DWORD *)v165 + 68)),
                   HIBYTE(*((_DWORD *)v165 + 68)),
                   &v441);
        }
        uint64_t PropertiesForSequence = v204;
        CFTypeRef v178 = v321;
        if (*MEMORY[0x1E4F1EBA8] == 1) {
          kdebug_trace();
        }
        if (!PropertiesForSequence)
        {
          uint64_t v164 = v441;
          double v205 = CMPhotoGetPixelBufferCLAPAsRect(v441);
          *((double *)v165 + 24) = v205;
          *((double *)v165 + 25) = v206;
          v165[26] = v207;
          v165[27] = v208;
          v165[14] = vcvtad_u64_f64(v205);
          v165[15] = vcvtad_u64_f64(v206);
          uint64_t v166 = v328;
          if (!v169) {
            goto LABEL_447;
          }
          goto LABEL_415;
        }
LABEL_724:
        CFTypeRef v209 = 0;
        double v191 = v171;
        double v327 = v170;
        LODWORD(v19) = v338;
        goto LABEL_725;
      }
      goto LABEL_413;
    }
    goto LABEL_404;
  }
LABEL_712:
  uint64_t PropertiesForSequence = FigSignalErrorAt();
  CFTypeRef v209 = 0;
  double v191 = v171;
  double v327 = v170;
  LODWORD(v19) = v338;
  uint64_t v118 = (uint64_t)v335;
  CFTypeID v21 = v339;
  CFDictionaryRef v66 = theDict;
  CFTypeRef v178 = v321;
LABEL_453:
  if (v440) {
    CFRelease(v440);
  }
  if (v441) {
    CFRelease(v441);
  }
  if (*(void *)cfa) {
    CFRelease(*(CFTypeRef *)cfa);
  }
  if (PropertiesForSequence) {
    goto LABEL_683;
  }
  __int16 v210 = v434;
  __int16 v211 = (const void *)v434[3];
  if (v211)
  {
    CFRelease(v211);
    __int16 v210 = v434;
  }
  v210[3] = (uint64_t)v209;
  if (*((unsigned char *)v402 + 32))
  {
    CFDictionaryGetValue(v66, @"QualityControllerType");
    __int16 v212 = CFDictionaryGetValue(v66, @"QualityControllerParameters");
    if (CMPhotoQualityControllerNeedsImageAnalysis())
    {
      *(void *)CFNumberRef value = 0;
      uint64_t UpdatedQualityParameters = CMPhotoAnalyzeImageAndCreateUpdatedQualityParameters(allocator, (__CVBuffer *)v434[3], v212, (__CFDictionary **)value, *((double *)v402 + 24), *((double *)v402 + 25), *((double *)v402 + 26), *((double *)v402 + 27));
      if (UpdatedQualityParameters)
      {
LABEL_682:
        uint64_t PropertiesForSequence = UpdatedQualityParameters;
LABEL_683:
        CFDictionaryRef MutableCopy = 0;
        uint64_t v85 = 0;
        uint64_t v322 = 0;
        goto LABEL_697;
      }
      if (*(void *)value)
      {
        CFDictionarySetValue(v66, @"QualityControllerParameters", *(const void **)value);
        if (*(void *)value) {
          CFRelease(*(CFTypeRef *)value);
        }
      }
    }
  }
  __int16 v214 = a10;
  if (v19)
  {
    if (v342 != -1 && (a10[3] & 1) == 0)
    {
      uint64_t UpdatedQualityParameters = CMPhotoHEIFFileWriterGetTimeStampForImage(*v343, a3, (uint64_t)a10);
      if (UpdatedQualityParameters) {
        goto LABEL_682;
      }
    }
  }
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  char v395 = 0;
  __int16 v394 = 0;
  v392[0] = 0;
  *(_DWORD *)((char *)v392 + 3) = 0;
  unsigned int v312 = v396;
  int v317 = *((_DWORD *)v402 + 7);
  uint64_t v215 = *((unsigned __int8 *)v214 + 4);
  unint64_t v216 = (unint64_t)*v214 << 24;
  *(_OWORD *)__int16 v442 = *(_OWORD *)((char *)v214 + 5);
  int v320 = v214;
  *(_DWORD *)&v442[15] = v214[5];
  int v311 = *((_DWORD *)v402 + 77);
  char v310 = *((unsigned char *)v402 + 312);
  uint64x2_t v393 = v426;
  uint64_t v313 = v402[21] * v402[20];
  if (v313 == 1 && v317 == 1936484717) {
    CMPhotoCFDictionarySetBoolean(v66, @"SyncEncode", 1);
  }
  int v217 = a11;
  unint64_t v309 = v216 | (v215 << 56);
  if (v21 == TypeID)
  {
    uint64_t v218 = v118;
    int v219 = v19;
    CMVideoDimensions Dimensions = CMVideoFormatDescriptionGetDimensions(v178);
    if (v318) {
      int v221 = (int)width;
    }
    else {
      int v221 = Dimensions.width;
    }
    if (v318) {
      int v222 = (int)height;
    }
    else {
      int v222 = Dimensions.height;
    }
    CFDictionaryRef Extensions = CMFormatDescriptionGetExtensions(v178);
    CFDictionaryRef MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
    if (MutableCopy)
    {
      uint64_t v224 = CMFormatDescriptionGetMediaSubType(v178);
      uint64_t v225 = CMPhotoModifyColorExtensionsForCompression(v224, Extensions, MutableCopy, *((unsigned __int8 *)v402 + 58), *((_DWORD *)v402 + 15), v219 == 2, 0);
      if (!v225)
      {
        CFDictionaryRef v226 = MutableCopy;
        CFAllocatorRef v227 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CMVideoCodecType v228 = CMFormatDescriptionGetMediaSubType(v178);
        CFAllocatorRef v229 = v227;
        CFDictionaryRef MutableCopy = v226;
        uint64_t v225 = CMVideoFormatDescriptionCreate(v229, v228, v221, v222, v226, &formatDescriptionOut);
        if (!v225)
        {
          int v329 = v226;
          uint64_t v230 = v218;
          if (!v219)
          {
            CGRect v446 = CMVideoFormatDescriptionGetCleanAperture(formatDescriptionOut, 1u);
            *(void *)(v218 + 176) = vcvtad_u64_f64(v446.size.width);
            *(void *)(v218 + 184) = vcvtad_u64_f64(v446.size.height);
          }
          CFDictionaryRef v66 = theDict;
          if (*((unsigned char *)v402 + 58) || (CFDictionaryRef v233 = CMFormatDescriptionGetExtensions(v178)) == 0) {
            CFTypeRef v231 = 0;
          }
          else {
            CFTypeRef v231 = CFRetain(v233);
          }
          uint64_t v85 = 0;
          BOOL v304 = v217 == 0;
LABEL_504:
          memcpy(value, v402 + 3, sizeof(value));
          *(_DWORD *)CFTypeRef cfa = v312;
          *(_DWORD *)&cfa[4] = v317;
          cfa[8] = v332;
          *(void *)&cfa[9] = v309;
          *(_OWORD *)&cfa[17] = *(_OWORD *)v442;
          *(_DWORD *)&cfa[32] = *(_DWORD *)&v442[15];
          int v380 = v311;
          char v381 = v310;
          __int16 v382 = 0;
          char v383 = 0;
          uint64x2_t v385 = v393;
          int v384 = v219;
          unsigned int v386 = v334;
          int v387 = 0;
          uint64_t v388 = v313;
          BOOL v389 = v314;
          memset(v390, 0, sizeof(v390));
          Plugiuint64_t n = _createPlugin(allocator, v230, v219, (uint64_t)value, v66, (long long *)cfa, (uint64_t)v85, idx, v332, (uint64_t)v231, v430 + 3);
          uint64_t v322 = v231;
          if (Plugin)
          {
            uint64_t PropertiesForSequence = Plugin;
            int v56 = 1;
            LODWORD(v19) = v219;
          }
          else
          {
            if (!v219 && v21 == TypeID && !*((unsigned char *)v402 + 340) && (*((unsigned char *)v402 + 279) || *((unsigned char *)v402 + 280)))
            {
              *(void *)(v230 + 232) = 0;
              FigSemaphoreSignal();
              BOOL v315 = 0;
            }
            if (v21 != TypeID || *((unsigned char *)v402 + 340))
            {
              LODWORD(v19) = v219;
              uint64_t v118 = v230;
              CFDictionaryRef MutableCopy = v329;
              if (!v19) {
                goto LABEL_515;
              }
              goto LABEL_514;
            }
            uint64_t PropertiesForSequence = 0;
            int v56 = 1;
            LODWORD(v19) = v219;
          }
          uint64_t v118 = v230;
          goto LABEL_711;
        }
      }
      uint64_t PropertiesForSequence = v225;
      uint64_t v85 = 0;
      uint64_t v322 = 0;
      int v56 = 1;
    }
    else
    {
      uint64_t v85 = 0;
      uint64_t v322 = 0;
      int v56 = 1;
      uint64_t PropertiesForSequence = 4294950305;
    }
    LODWORD(v19) = v219;
    uint64_t v118 = v218;
LABEL_703:
    CFDictionaryRef v66 = theDict;
    goto LABEL_647;
  }
  uint64_t UpdatedQualityParameters = CMPhotoCreateFormatDescriptionForHEIFWriter(allocator, (CVImageBufferRef)v434[3], *((unsigned __int8 *)v402 + 58), v327, v191, v170, v171, v19 == 2, *((_DWORD *)v402 + 15), &formatDescriptionOut, 0);
  if (UpdatedQualityParameters) {
    goto LABEL_682;
  }
  int v56 = 1;
  uint64_t v85 = malloc_type_calloc(1uLL, 0x48uLL, 0x10A00403B6B9398uLL);
  if (!v85)
  {
    CFDictionaryRef MutableCopy = 0;
    uint64_t v322 = 0;
    uint64_t PropertiesForSequence = 4294950305;
    goto LABEL_647;
  }
  if (*((unsigned char *)v402 + 58))
  {
    uint64_t v232 = 0;
  }
  else
  {
    uint64_t v232 = CMFormatDescriptionGetExtensions(formatDescriptionOut);
    if (v232) {
      uint64_t v232 = CFRetain(v232);
    }
  }
  uint64_t v322 = v232;
  CFDictionaryRef MutableCopy = 0;
  if (!v217)
  {
    int v329 = 0;
    BOOL v304 = 1;
    uint64_t v230 = v118;
    int v219 = v19;
    CFTypeRef v231 = v232;
    goto LABEL_504;
  }
  BOOL v304 = 0;
  if (v19)
  {
LABEL_514:
    uint64_t OrientationTransformsForImage = CMPhotoHEIFFileWriterGetOrientationTransformsForImage(*v343, a3, (unsigned char *)v402 + 176, (_DWORD *)v402 + 45, 0, (_DWORD *)v402 + 46);
    if (!OrientationTransformsForImage) {
      goto LABEL_515;
    }
    uint64_t PropertiesForSequence = OrientationTransformsForImage;
LABEL_697:
    int v56 = 1;
    goto LABEL_647;
  }
LABEL_515:
  uint64_t v319 = (uint64_t)v85;
  int v329 = MutableCopy;
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  int v236 = *((unsigned __int8 *)v402 + 99);
  CFIndex v297 = v402[43];
  int v300 = *((unsigned __int8 *)v402 + 340);
  CFIndex v298 = idx;
  __int16 v299 = formatDescriptionOut;
  unsigned int v302 = v396;
  unsigned int v303 = *((_DWORD *)v402 + 7);
  int v301 = *((_DWORD *)v402 + 15);
  int v237 = *((unsigned __int8 *)v402 + 306);
  int v238 = *((_DWORD *)v402 + 46);
  int v305 = *((_DWORD *)v402 + 45);
  int v239 = *((unsigned __int8 *)v402 + 105);
  int v240 = *((unsigned __int8 *)v402 + 106);
  __int16 v241 = (const void *)v118;
  unint64_t v242 = v402[16];
  unint64_t v243 = v402[17];
  uint64_t v244 = v402[20];
  uint64_t v245 = v402[21];
  CFAllocatorRef v246 = CFGetAllocator(v241);
  CFMutableDictionaryRef v247 = CFDictionaryCreateMutable(v246, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v247)
  {
    int v56 = 1;
    uint64_t PropertiesForSequence = 4294950305;
    LODWORD(v19) = v338;
    uint64_t v118 = (uint64_t)v335;
    CFTypeID v21 = v339;
    CFDictionaryRef v66 = theDict;
LABEL_707:
    CFDictionaryRef MutableCopy = v329;
    uint64_t v85 = (void *)v319;
    goto LABEL_647;
  }
  uint64_t v248 = v247;
  if (v239)
  {
    if (v240)
    {
      BOOL exists = cmpweak_exists_kFigPictureCollectionWriterOption_OverlayItemCount();
      uint64_t v250 = (const void **)MEMORY[0x1E4F1CFD0];
      if (exists)
      {
        CFNumberRef Int16 = CMPhotoCFNumberCreateInt16((unsigned __int16)v245 * (unsigned __int16)v244);
        __int16 v252 = cmpweak_kFigPictureCollectionWriterOption_OverlayItemCount();
        CFDictionarySetValue(v248, v252, Int16);
        CFDictionaryRef v253 = 0;
LABEL_525:
        uint64_t v118 = (uint64_t)v335;
        CFDictionaryRef v66 = theDict;
        goto LABEL_526;
      }
      uint64_t PropertiesForSequence = 4294950297;
    }
    else
    {
      v444.double width = (double)v242;
      v444.double height = (double)v243;
      DictionaryRepresentatiouint64_t n = CGSizeCreateDictionaryRepresentation(v444);
      uint64_t v250 = (const void **)MEMORY[0x1E4F1CFD0];
      if (DictionaryRepresentation)
      {
        CFDictionaryRef v253 = DictionaryRepresentation;
        CFDictionarySetValue(v248, (const void *)*MEMORY[0x1E4F332F8], DictionaryRepresentation);
        CFNumberRef Int16 = 0;
        goto LABEL_525;
      }
      uint64_t PropertiesForSequence = 4294950305;
    }
    CFNumberRef Int16 = v248;
    uint64_t v19 = v338;
    uint64_t v118 = (uint64_t)v335;
    CFTypeID v21 = v339;
    CFDictionaryRef v66 = theDict;
    uint32x4_t v256 = v320;
LABEL_571:
    CFRelease(Int16);
    goto LABEL_572;
  }
  CFDictionaryRef v253 = 0;
  CFNumberRef Int16 = 0;
  uint64_t v118 = (uint64_t)v335;
  CFDictionaryRef v66 = theDict;
  uint64_t v250 = (const void **)MEMORY[0x1E4F1CFD0];
LABEL_526:
  if (!v338 && v236) {
    CFDictionarySetValue(v248, (const void *)*MEMORY[0x1E4F332E8], *v250);
  }
  if (v237)
  {
    if (v236)
    {
      uint64_t PropertiesForSequence = FigSignalErrorAt();
      __int16 v261 = 0;
      CFTypeID v21 = v339;
      uint32x4_t v256 = v320;
      goto LABEL_566;
    }
    CFDictionarySetValue(v248, (const void *)*MEMORY[0x1E4F332A8], (const void *)*MEMORY[0x1E4F1CFC8]);
  }
  uint64_t v255 = CMPhotoCFDictionarySetInt(v248, (const void *)*MEMORY[0x1E4F332F0], v305);
  uint32x4_t v256 = v320;
  if (v255) {
    goto LABEL_636;
  }
  if (v238 != -1)
  {
    uint64_t v255 = CMPhotoCFDictionarySetInt(v248, (const void *)*MEMORY[0x1E4F332B8], v238);
    if (v255) {
      goto LABEL_636;
    }
  }
  if (v301 == 3) {
    CFDictionarySetValue(v248, (const void *)*MEMORY[0x1E4F33290], (const void *)*MEMORY[0x1E4F1CFD0]);
  }
  if (URNFromAuxiliaryImageType)
  {
    CFDictionarySetValue(v248, (const void *)*MEMORY[0x1E4F332A0], URNFromAuxiliaryImageType);
    if (v324) {
      CFDictionarySetValue(v248, (const void *)*MEMORY[0x1E4F33298], v324);
    }
  }
  if (v306)
  {
    if (v302 != 1278226742)
    {
      if (v302 == 1278226736)
      {
        if (v303 == 1785750887) {
          BitDepthForPixeluint64_t Format = 16;
        }
        else {
          BitDepthForPixeluint64_t Format = 10;
        }
        goto LABEL_551;
      }
LABEL_550:
      BitDepthForPixeluint64_t Format = 16;
LABEL_551:
      int v259 = 1;
      goto LABEL_552;
    }
    if (v303 == 1785750887) {
      goto LABEL_550;
    }
    uint64_t v255 = FigSignalErrorAt();
LABEL_636:
    uint64_t PropertiesForSequence = v255;
    __int16 v261 = 0;
LABEL_637:
    CFTypeID v21 = v339;
    goto LABEL_566;
  }
  int v258 = CMPhotoGetChromaSubsamplingFromPixelFormat(v302) & 0xFFFFFFFE;
  BitDepthForPixeluint64_t Format = CMPhotoGetBitDepthForPixelFormat(v302);
  if (v258 == 6) {
    int v259 = 1;
  }
  else {
    int v259 = 3;
  }
LABEL_552:
  value[0] = BitDepthForPixelFormat;
  CFAllocatorRef v260 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  __int16 v261 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (!v261)
  {
    uint64_t PropertiesForSequence = FigSignalErrorAt();
    goto LABEL_637;
  }
  CFNumberRef v262 = CFNumberCreate(v260, kCFNumberCharType, value);
  if (v262)
  {
    CFNumberRef v263 = v262;
    do
    {
      CFArrayAppendValue(v261, v263);
      --v259;
    }
    while (v259);
    CFRelease(v263);
  }
  CFDictionaryAddValue(v248, (const void *)*MEMORY[0x1E4F332E0], v261);
  CMPhotoCFDictionarySetBoolean(v248, @"ReserveImageHandle", v300);
  CFTypeID v21 = v339;
  if (v338 == 2)
  {
    uint64_t v264 = CMPhotoHEIFFileWriterAddAuxiliaryImageToImage(*v343, v248, a3, v303, v299, &v427);
    goto LABEL_565;
  }
  if (v338 == 1)
  {
    uint64_t v264 = CMPhotoHEIFFileWriterAddThumbnailToImage(*v343, v248, a3, v303, v299, &v427);
    goto LABEL_565;
  }
  if (v338) {
    goto LABEL_564;
  }
  if (v342 != -1)
  {
    uint64_t v264 = CMPhotoHEIFFileWriterAddImageToSequence(*v343, v248, 1, v298, v303, v299, &v427);
LABEL_565:
    uint64_t PropertiesForSequence = v264;
    goto LABEL_566;
  }
  uint64_t v291 = *v343;
  if (v297 == -1)
  {
    uint64_t v264 = CMPhotoHEIFFileWriterAddImageToCollection(v291, v248, v303, v299, &v427);
    goto LABEL_565;
  }
  if (!CMPhotoHEIFFileWriterCompareReservedImageHandleWithOptions(v291, v248, v303, v299, v297))
  {
LABEL_564:
    uint64_t v264 = FigSignalErrorAt();
    goto LABEL_565;
  }
  uint64_t PropertiesForSequence = 0;
  CFIndex v427 = v297;
LABEL_566:
  CFRelease(v248);
  if (v253) {
    CFRelease(v253);
  }
  uint64_t v19 = v338;
  if (v261) {
    CFRelease(v261);
  }
  if (Int16) {
    goto LABEL_571;
  }
LABEL_572:
  if (PropertiesForSequence) {
    goto LABEL_714;
  }
  BOOL v265 = v342 == -1 || CMPhotoHEIFFileWriterImageSequenceFirstFrameCompleted(*v343, 0, idx);
  CFIndex v266 = v427;
  __int16 v267 = v402;
  if (v402[28] || v402[29] || v402[30] || v402[31])
  {
    __int16 v268 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!v268)
    {
LABEL_706:
      int v56 = 1;
      uint64_t PropertiesForSequence = 4294950305;
      goto LABEL_707;
    }
    __int16 v269 = v268;
    __int16 v270 = (const void *)v267[28];
    if (v270) {
      CFDictionaryAddValue(v268, (const void *)*MEMORY[0x1E4F34948], v270);
    }
    __int16 v271 = (const void *)v267[29];
    if (v271)
    {
      *(void *)CFNumberRef value = 0;
      FigIntrinsicsDictFromIntrinsicsMatridouble x = CMPhotoCreateFigIntrinsicsDictFromIntrinsicsMatrix((int)allocator, v271, vcvtad_u64_f64(v170), vcvtad_u64_f64(v171), *((unsigned int *)v267 + 47), *((unsigned __int8 *)v267 + 257), (uint64_t)value);
      if (FigIntrinsicsDictFromIntrinsicsMatrix) {
        goto LABEL_684;
      }
      CFDictionarySetValue(v269, (const void *)*MEMORY[0x1E4F34938], *(const void **)value);
      if (*(void *)value) {
        CFRelease(*(CFTypeRef *)value);
      }
    }
    unint64_t v273 = v267[30];
    unint64_t v274 = v267[31];
    if (*((_OWORD *)v267 + 15) == 0) {
      goto LABEL_591;
    }
    *(void *)CFNumberRef value = 0;
    FigIntrinsicsDictFromIntrinsicsMatridouble x = CMPhotoCreateFigExtrinsicsDictFromExtrinsics(allocator, v273, v274, *((unsigned __int8 *)v267 + 256), *((unsigned __int8 *)v267 + 257), (__CFDictionary **)value);
    if (!FigIntrinsicsDictFromIntrinsicsMatrix)
    {
      CFDictionarySetValue(v269, (const void *)*MEMORY[0x1E4F34930], *(const void **)value);
      if (*(void *)value) {
        CFRelease(*(CFTypeRef *)value);
      }
LABEL_591:
      uint64_t PropertiesForSequence = CMPhotoHEIFFileWriterAddMetadataToImage(*v343, 0, v266, 3, v269, 0, 0, 0);
      CFRelease(v269);
      if (!PropertiesForSequence) {
        goto LABEL_592;
      }
LABEL_714:
      int v56 = 1;
      goto LABEL_707;
    }
LABEL_684:
    uint64_t PropertiesForSequence = FigIntrinsicsDictFromIntrinsicsMatrix;
    uint64_t v85 = (void *)v319;
    CFRelease(v269);
    int v56 = 1;
    goto LABEL_711;
  }
LABEL_592:
  if (!v19 && v342 != -1 && (v256[3] & 1) != 0)
  {
    uint64_t v275 = *v343;
    *(_OWORD *)CFNumberRef value = *(_OWORD *)v256;
    *(void *)&value[16] = *((void *)v256 + 2);
    uint64_t v276 = CMPhotoHEIFFileWriterSetTimeStampForImage(v275, v427, (uint64_t)value);
    if (v276)
    {
      uint64_t PropertiesForSequence = v276;
      goto LABEL_714;
    }
  }
  uint64_t v85 = (void *)v319;
  if (*((unsigned char *)v402 + 279))
  {
    if (v19) {
      goto LABEL_604;
    }
  }
  else if (v19 || !*((unsigned char *)v402 + 280))
  {
    goto LABEL_604;
  }
  *(void *)(v118 + 232) = v427;
  if (v342 == -1 || v265)
  {
    FigSemaphoreSignal();
    BOOL v315 = 0;
  }
LABEL_604:
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  if (*((unsigned char *)v402 + 340))
  {
    uint64_t PropertiesForSequence = 0;
    int v56 = 1;
    CFDictionaryRef v66 = theDict;
    goto LABEL_711;
  }
  uint64_t v277 = a14;
  if (!v304)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v118 + 216));
    CFDictionaryRef v66 = theDict;
    int v281 = v334;
    if (*(void *)(v118 + 192)
      || (uint64_t TargetingPThreadRootQueueWithPriority = FigDispatchQueueCreateTargetingPThreadRootQueueWithPriority(),
          (*(void *)(v118 + 192) = TargetingPThreadRootQueueWithPriority) != 0))
    {
      if (_allowHEIFAsynchronousCompleteEncodeTilesOverride_onceToken != -1) {
        dispatch_once(&_allowHEIFAsynchronousCompleteEncodeTilesOverride_onceToken, &__block_literal_global_29);
      }
      uint64_t v285 = *(void *)(v118 + 200);
      if (v285 || (_allowHEIFAsynchronousCompleteEncodeTilesOverride_allowAsynchronousComplete & 1) != 0) {
        goto LABEL_618;
      }
      uint64_t v285 = FigSemaphoreCreate();
      *(void *)(v118 + 200) = v285;
      if (*(void *)(v118 + 192))
      {
        *(void *)(v118 + 20_Block_object_dispose(&STACK[0x280], 8) = 0;
LABEL_618:
        if (v285) {
          ++*(void *)(v118 + 208);
        }
        os_unfair_lock_unlock((os_unfair_lock_t)(v118 + 216));
        if (*MEMORY[0x1E4F1EBA8] == 1) {
          kdebug_trace();
        }
        uint32x4_t v286 = *(NSObject **)(v118 + 192);
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = *(void *)"";
        block[2] = ___encodePixelBufferForIndex_block_invoke;
        block[3] = &unk_1E5E30068;
        block[8] = v118;
        block[9] = allocator;
        int v371 = v19;
        block[10] = theDict;
        unsigned int v346 = v312;
        int v347 = v317;
        BOOL v348 = v332;
        unint64_t v349 = v309;
        *(_OWORD *)__int16 v350 = *(_OWORD *)v442;
        *(_DWORD *)&v350[15] = *(_DWORD *)&v442[15];
        int v351 = v311;
        char v352 = v310;
        __int16 v353 = v394;
        char v354 = v395;
        uint64x2_t v356 = v393;
        int v355 = v19;
        unsigned int v357 = v334;
        int v358 = 0;
        uint64_t v359 = v313;
        BOOL v360 = v314;
        *(_DWORD *)int32x4_t v361 = v392[0];
        *(_DWORD *)&v361[3] = *(_DWORD *)((char *)v392 + 3);
        uint64_t v362 = v319;
        CFIndex v363 = idx;
        BOOL v376 = v332;
        uint64x2_t v365 = v426;
        uint64_t v364 = v322;
        CFDictionaryRef v366 = v333;
        unsigned int v372 = v334;
        CFIndex v367 = v427;
        uint64_t v282 = v308;
        uint64_t v368 = v308;
        char v377 = v307;
        long long v373 = *(_OWORD *)v320;
        uint64_t v374 = *((void *)v320 + 2);
        void block[6] = &v429;
        void block[7] = &v433;
        BOOL v378 = v265;
        unsigned int v375 = v428;
        block[4] = v277;
        void block[5] = &v401;
        uint64_t v85 = (void *)v319;
        uint64_t v369 = v316;
        __int16 v370 = v343;
        dispatch_async(v286, block);
LABEL_623:
        if (*MEMORY[0x1E4F1EBA8] == 1) {
          kdebug_trace();
        }
        uint64_t PropertiesForSequence = 0;
        CFDictionaryRef MutableCopy = v329;
        if (v19 != 2 || v342 != -1)
        {
          int v56 = 0;
          goto LABEL_647;
        }
        if (v282 | (unint64_t)Mutable)
        {
          uint64_t v287 = CMPhotoAuxiliaryImageMetadataCreateXMPData(*(void *)(v118 + 96), (CGImageMetadataRef)v282, Mutable, v281, 0, &v437);
          if (v287)
          {
LABEL_645:
            uint64_t PropertiesForSequence = v287;
            goto LABEL_646;
          }
          uint64_t v288 = v402[8];
          CFDataRef v289 = v437;
          if (!v288)
          {
LABEL_644:
            uint64_t v287 = CMPhotoHEIFFileWriterAddMetadataToImage(*v343, 0, v427, 1, v289, 0, v288, 0);
            goto LABEL_645;
          }
          *(void *)CFNumberRef value = 0;
          uint64_t v290 = CMPhotoCompressDataWithContentEncoding(*(const __CFAllocator **)(v118 + 96), v437, v288, (__CFData **)value);
          if (!v290)
          {
            if (v437) {
              CFRelease(v437);
            }
            CFDataRef v289 = *(CFDataRef *)value;
            CFDataRef v437 = *(CFDataRef *)value;
            goto LABEL_644;
          }
          uint64_t PropertiesForSequence = v290;
          if (v290 == -17106)
          {
            uint64_t v288 = 0;
            CFDataRef v289 = v437;
            goto LABEL_644;
          }
        }
        else
        {
          uint64_t PropertiesForSequence = 0;
        }
LABEL_646:
        BOOL v332 = 0;
        int v56 = 0;
        goto LABEL_647;
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(v118 + 216));
    goto LABEL_706;
  }
  uint64_t v278 = v430[3];
  __int16 v279 = (__CVBuffer *)v434[3];
  memcpy(value, v402 + 3, sizeof(value));
  *(_OWORD *)CFTypeRef cfa = *(_OWORD *)v320;
  *(void *)&cfa[16] = *((void *)v320 + 2);
  CFDictionaryRef v66 = theDict;
  uint64_t v85 = (void *)v319;
  __int16 v296 = v279;
  uint64_t v280 = v278;
  int v281 = v334;
  uint64_t v282 = v308;
  uint64_t v283 = _encodeTiles(v118, v280, v333, v19, v427, value, v334, v308, v307, v332, (long long *)cfa, v426.i64[0], v426.i64[1], v296, v265, v319, v428, 0, v316,
           v322,
           theDict,
           a14);
  if (!v283) {
    goto LABEL_623;
  }
  uint64_t PropertiesForSequence = v283;
  int v56 = 0;
LABEL_711:
  CFDictionaryRef MutableCopy = v329;
LABEL_647:
  int32x4_t v292 = a13;
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  if (v85)
  {
    if (*((unsigned char *)v402 + 352))
    {
      int16x4_t v293 = (const void *)v85[8];
      if (v293) {
        _Block_release(v293);
      }
    }
  }
  if (v292 && !PropertiesForSequence) {
    *int32x4_t v292 = v427;
  }
  if (v21 != TypeID && PropertiesForSequence != -15474 && PropertiesForSequence) {
    *(unsigned char *)(v118 + 104) = 1;
  }
  if (v315) {
    FigSemaphoreSignal();
  }
  if (v56) {
    _freeVariablesUsedAcrossAsyncEncodingMethods(PropertiesForSequence, v118, (CFTypeRef *)v430[3], (CFTypeRef)v434[3], v332, v85, 0, v19, v322, v66, v316);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v437) {
    CFRelease(v437);
  }
  if (formatDescriptionOut) {
    CFRelease(formatDescriptionOut);
  }
  if (URNFromAuxiliaryImageType) {
    CFRelease(URNFromAuxiliaryImageType);
  }
  if (v324) {
    CFRelease(v324);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  _Block_object_dispose(&v401, 8);
  _Block_object_dispose(&v429, 8);
  _Block_object_dispose(&v433, 8);
  return PropertiesForSequence;
}

uint64_t _parseOptions(CFDictionaryRef theDict, int a2, int a3, uint64_t a4, double a5, double a6, double a7, double a8)
{
  *(unsigned char *)a4 = 0;
  strcpy((char *)(a4 + 4), "1cvh");
  *(_DWORD *)(a4 + 36) = 0;
  *(void *)(a4 + 40) = 0;
  *(unsigned char *)(a4 + 4_Block_object_dispose(&STACK[0x280], 8) = 0;
  *(void *)(a4 + 56) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = 0;
  *(_WORD *)(a4 + 64) = 1;
  uint64_t v9 = (unsigned char *)(a4 + 64);
  *(_DWORD *)(a4 + 6_Block_object_dispose(&STACK[0x280], 8) = 0;
  *(_DWORD *)(a4 + 31) = 0;
  *(_DWORD *)(a4 + 72) = 256;
  *(_WORD *)(a4 + 80) = 0;
  *(unsigned char *)(a4 + 152) = 0;
  *(_DWORD *)(a4 + 164) = 1;
  CFTypeID v10 = (_DWORD *)(a4 + 164);
  *(void *)(a4 + 156) = 0xFFFFFFFF00000000;
  int v11 = (_DWORD *)(a4 + 156);
  *(double *)(a4 + 16_Block_object_dispose(&STACK[0x280], 8) = a5;
  *(double *)(a4 + 176) = a6;
  *(double *)(a4 + 184) = a7;
  *(_OWORD *)(a4 + 200) = 0u;
  uint64_t v12 = a4 + 200;
  *(double *)(a4 + 192) = a8;
  *(_WORD *)(a4 + 232) = 0;
  *(void *)(a4 + 236) = 0xFFFFFFFF00000002;
  *(_OWORD *)(a4 + 216) = 0u;
  *(void *)(a4 + 244) = 0xFFFFFFFFLL;
  *(_WORD *)(a4 + 252) = 0;
  double v13 = (unsigned char *)(a4 + 252);
  *(_WORD *)(a4 + 255) = 0;
  if (a3) {
    int v14 = 30;
  }
  else {
    int v14 = -1;
  }
  *(_DWORD *)(a4 + 284) = v14;
  int8x16_t v49 = (int *)(a4 + 284);
  *(void *)(a4 + 272) = 0;
  *(void *)(a4 + 264) = 0;
  *(_DWORD *)(a4 + 279) = 0;
  *(unsigned char *)(a4 + 28_Block_object_dispose(&STACK[0x280], 8) = 1;
  *(void *)(a4 + 320) = -1;
  *(void *)(a4 + 304) = 0;
  *(void *)(a4 + 296) = 0;
  *(void *)(a4 + 309) = 0;
  *(unsigned char *)(a4 + 32_Block_object_dispose(&STACK[0x280], 8) = 0;
  if (!theDict) {
    return 0;
  }
  double v40 = (unsigned char *)(a4 + 72);
  int v41 = (double *)(a4 + 168);
  uint64_t v47 = (_DWORD *)(a4 + 236);
  int v48 = (unsigned char *)(a4 + 232);
  uint64_t v45 = (_DWORD *)(a4 + 68);
  uint64_t v46 = (_DWORD *)(a4 + 244);
  int v44 = (unsigned char *)(a4 + 288);
  CFIndex v43 = (unsigned char *)(a4 + 48);
  uint64_t v39 = (_DWORD *)(a4 + 4);
  *(unsigned char *)a4 = CMPhotoCFDictionaryGetInt32IfPresent(theDict, @"CodecType", (void *)(a4 + 4));
  if (*(_DWORD *)(a4 + 4) == 1936484717)
  {
    LOBYTE(rect.origin.x) = 0;
    CMPhotoCFDictionaryGetBooleanIfPresent(theDict, @"AllowExperimentalCodecs", &rect);
    LOBYTE(rect.origin.x) |= FigDebugIsInternalBuild();
    int v17 = CMPhotoAllowExperimentalCodecsOverride(SLOBYTE(rect.origin.x));
    LOBYTE(rect.origin.x) = v17;
    if (!v17) {
      return FigSignalErrorAt();
    }
  }
  BOOL v42 = (void *)(v12 + 120);
  CMPhotoCFDictionaryGetBooleanIfPresent(theDict, @"PrimaryImage", (unsigned char *)(v12 - 125));
  CMPhotoCFDictionaryGetBooleanIfPresent(theDict, @"HiddenImage", (unsigned char *)(v12 + 82));
  CMPhotoCFDictionaryGetInt32IfPresent(theDict, @"ThreadPriority", (void *)(v12 + 112));
  CMPhotoCFDictionaryGetBooleanIfPresent(theDict, @"RequireHardwareCodec", v13);
  CMPhotoCFDictionaryGetBooleanIfPresent(theDict, @"PreferSoftwareCodec", (unsigned char *)(v12 + 53));
  *(unsigned char *)(a4 + 152) = CMPhotoCFDictionaryGetIntIfPresent(theDict, @"ImageOrientation", v10);
  int BooleanIfPresent = CMPhotoCFDictionaryGetBooleanIfPresent(theDict, @"ApplyTransform", (unsigned char *)(v12 - 126));
  if (*(unsigned char *)(a4 + 74))
  {
    int v19 = a2;
    if (!*(unsigned char *)(a4 + 152)) {
      return FigSignalErrorAt();
    }
  }
  else
  {
    int v19 = a2;
    if (!*(unsigned char *)(a4 + 152)) {
      goto LABEL_18;
    }
  }
  uint64_t result = CMPhotoHEIFRotationCCWAndMirroringFromExifOrientation(*v10, v11, (int *)(v12 - 40));
  if (result) {
    return result;
  }
  if (BooleanIfPresent)
  {
    if (v19 && !*(unsigned char *)(v12 - 126)) {
      return FigSignalErrorAt();
    }
  }
  else if (v19)
  {
    return FigSignalErrorAt();
  }
LABEL_18:
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"SourceCropRect");
  if (!Value
    || (memset(&rect, 0, sizeof(rect)), !CGRectMakeWithDictionaryRepresentation(Value, &rect))
    || (uint64_t result = CMPhotoApplyCropRectToRect(v41, rect.origin.x, rect.origin.y, rect.size.width, rect.size.height),
        !result))
  {
    *(void *)(a4 + 200) = CFDictionaryGetValue(theDict, @"HorizontalFOV");
    int v22 = CFDictionaryGetValue(theDict, @"ExtrinsicsPosition");
    *(void *)(a4 + 216) = v22;
    if (!v22
      || (CFTypeID v23 = CFGetTypeID(v22), v23 == CFArrayGetTypeID())
      && (CFArrayRef v24 = *(const __CFArray **)(a4 + 216)) != 0
      && CFArrayGetCount(v24) == 3)
    {
      int v25 = CFDictionaryGetValue(theDict, @"ExtrinsicsRotation");
      *(void *)(a4 + 224) = v25;
      if (!v25
        || (CFTypeID v26 = CFGetTypeID(v25), v26 == CFArrayGetTypeID())
        && (CFArrayRef v27 = *(const __CFArray **)(a4 + 224)) != 0
        && CFArrayGetCount(v27) == 9)
      {
        if (*(void *)(a4 + 216) || *(void *)(a4 + 224)) {
          CMPhotoCFDictionaryGetBooleanIfPresent(theDict, @"WriteFullExtrinsics", v48);
        }
        unint64_t v28 = CFDictionaryGetValue(theDict, @"IntrinsicsMatrix");
        *(void *)(a4 + 20_Block_object_dispose(&STACK[0x280], 8) = v28;
        if (!v28
          || (*(void *)v12 = 0, CFTypeID v29 = CFGetTypeID(v28), v29 == CFArrayGetTypeID())
          && (CFArrayRef v30 = *(const __CFArray **)(a4 + 208)) != 0
          && CFArrayGetCount(v30) == 9)
        {
          if (*(void *)(a4 + 216) || *(void *)(a4 + 224) || *(void *)(a4 + 208)) {
            CMPhotoCFDictionaryGetBooleanIfPresent(theDict, @"WriteOfficialExtrinsicsAndIntrinsicsBoxes", (unsigned char *)(v12 + 33));
          }
          CMPhotoCFDictionaryGetIntIfPresent(theDict, @"SlimCodecFlavor", v47);
          if (*v47 < 7u)
          {
            CMPhotoCFDictionaryGetIntIfPresent(theDict, @"SlimXBitShift", (void *)(v12 + 40));
            if ((*(_DWORD *)(v12 + 40) + 1) < 0x11)
            {
              CMPhotoCFDictionaryGetIntIfPresent(theDict, @"SlimHrlcRunLengthValue", v46);
              if ((*v46 + 1) < 0x101)
              {
                CMPhotoCFDictionaryGetBooleanIfPresent(theDict, @"ForceHighSpeed", (unsigned char *)(v12 + 48));
                CMPhotoCFDictionaryGetBooleanIfPresent(theDict, @"DisableMSRForTransfer", (unsigned char *)(v12 + 49));
                CMPhotoCFDictionaryGetBooleanIfPresent(theDict, @"DisableGPUForTransfer", (unsigned char *)(v12 + 51));
                CMPhotoCFDictionaryGetIntIfPresent(theDict, @"MaxPixelSize", v45);
                CMPhotoCFDictionaryGetBooleanIfPresent(theDict, @"UseEvenScalingMode", (unsigned char *)(v12 - 127));
                *(unsigned char *)(v12 - 127) = CMPhotoGetEvenScalingModeDefault(1, *(unsigned __int8 *)(v12 - 127));
                if (*v45) {
                  CMPhotoCFDictionaryGetBooleanIfPresent(theDict, @"AllowMaxPixelSizeUpscale", v40);
                }
                CMPhotoCFDictionaryGetIntIfPresent(theDict, @"MaxKeyFrameIntervalForSequence", v49);
                if (!a3 || *v49 > 0)
                {
                  CMPhotoCFDictionaryGetBooleanIfPresent(theDict, @"UseDroppablePFramesOnlyForSequence", v44);
                  *(unsigned char *)(a4 + 65) = CMPhotoCFDictionaryGetBooleanIfPresent(theDict, @"AllowPixelTransfer", v9);
                  double v31 = CFDictionaryGetValue(theDict, @"AuxiliaryImagePreserveValue");
                  *(void *)(a4 + 296) = v31;
                  if (!v31 || (CFTypeID v32 = CFGetTypeID(v31), v32 == CFNumberGetTypeID()))
                  {
                    CMPhotoCFDictionaryGetBooleanIfPresent(theDict, @"IgnoreColorSpace", (unsigned char *)(v12 - 166));
                    char v52 = 0;
                    if (CMPhotoCFDictionaryGetBooleanIfPresent(theDict, @"WriteColorAsNCLX", &v52))
                    {
                      if (v52) {
                        int v33 = 2;
                      }
                      else {
                        int v33 = 1;
                      }
                      *(_DWORD *)(a4 + 36) = v33;
                    }
                    char v51 = 0;
                    CMPhotoCFDictionaryGetBooleanIfPresent(theDict, @"WriteColorAsICCAndNCLX", &v51);
                    if (v51) {
                      *(_DWORD *)(a4 + 36) = 3;
                    }
                    if (v19 != 2
                      || !CFDictionaryGetValue(theDict, @"Subsampling")
                      && !CFDictionaryGetValue(theDict, @"BitDepth"))
                    {
                      CMPhotoCFDictionaryGetBooleanIfPresent(theDict, @"RGBToYUVDithering", (unsigned char *)(v12 - 168));
                      CMPhotoCFDictionaryGetBooleanIfPresent(theDict, @"PreferIdentityMatrix", (unsigned char *)(v12 - 167));
                      *(unsigned char *)(a4 + 255) = CFDictionaryContainsKey(theDict, @"IncludeThumbnailWithOptions");
                      int v34 = CFDictionaryContainsKey(theDict, @"IncludeAlphaAuxiliaryImageWithOptions");
                      *(unsigned char *)(a4 + 256) = v34;
                      if (!*(unsigned char *)(a4 + 255) || !v34)
                      {
                        CMPhotoCFDictionaryGetBooleanIfPresent(theDict, @"CreateEncoderFriendlyBuffer", v43);
                        int v35 = CFDictionaryGetValue(theDict, @"QualityControllerType");
                        *(void *)(a4 + 16) = v35;
                        *(unsigned char *)(a4 + _Block_object_dispose(&STACK[0x280], 8) = v35 != 0;
                        *(void *)(a4 + 24) = CFDictionaryGetValue(theDict, @"QualityControllerParameters");
                        *(void *)(a4 + 304) = CFDictionaryGetValue(theDict, @"CustomMinimumSourceAlignment");
                        *(void *)(a4 + 264) = CFDictionaryGetValue(theDict, @"UseCodecSessionPool");
                        *(void *)(a4 + 272) = CFDictionaryGetValue(theDict, @"Priority");
                        *(void *)(a4 + 56) = CFDictionaryGetValue(theDict, @"UsePixelsOutsideCrop");
                        *(unsigned char *)(a4 + 281) = FigCFDictionaryGetBooleanIfPresent();
                        double v36 = CFDictionaryGetValue(theDict, @"UseXMPContentEncoding");
                        *(void *)(a4 + 40) = v36;
                        if (v36)
                        {
                          CFTypeID v37 = CFGetTypeID(v36);
                          if (v37 != CFStringGetTypeID()) {
                            return 4294950306;
                          }
                        }
                        CMPhotoCFDictionaryGetBooleanIfPresent(theDict, @"ReserveImageHandle", (unsigned char *)(v12 + 116));
                        if (!CMPhotoCFDictionaryGetLongIfPresent(theDict, @"ProvidedImageHandle", v42)|| (*v42 & 0x8000000000000000) == 0)
                        {
                          rect.origin.double x = 0.0;
                          uint64_t result = CFDictionaryGetValueIfPresent(theDict, @"ReconstructionPixelBufferHandler", (const void **)&rect);
                          if (!result) {
                            return result;
                          }
                          *(unsigned char *)(a4 + 32_Block_object_dispose(&STACK[0x280], 8) = result;
                          if (*(unsigned char *)(a4 + 252) && *v39 == 1752589105)
                          {
                            int v38 = _Block_copy(*(const void **)&rect.origin.x);
                            uint64_t result = 0;
                            *(void *)(a4 + 336) = v38;
                            return result;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t _createPlugin(const void *a1, uint64_t a2, int a3, uint64_t a4, const __CFDictionary *a5, long long *a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, void *a11)
{
  CFDictionaryRef Value = 0;
  if (a9)
  {
    CFNumberRef Size = CMPhotoCFNumberCreateSize(8 * a8 + a3);
    CFDictionaryRef v18 = *(const __CFDictionary **)(a2 + 56);
    if (!v18)
    {
      uint64_t v34 = 4294950303;
      goto LABEL_22;
    }
    if (CFDictionaryContainsKey(v18, Size))
    {
      CFDictionaryRef Value = (CFTypeRef *)CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 56), Size);
      char v42 = 0;
      long long v19 = a6[3];
      long long v38 = a6[2];
      long long v39 = v19;
      long long v40 = a6[4];
      uint64_t v41 = *((void *)a6 + 10);
      long long v20 = a6[1];
      long long v36 = *a6;
      long long v37 = v20;
      uint64_t CanBeReused = CMPhotoCompressionPluginCanBeReused((uint64_t)Value, (uint64_t)&v36, *(void *)(a4 + 104), *(void *)(a4 + 112), (uint64_t)a5, a10, &v42, v21);
      if (CanBeReused)
      {
LABEL_25:
        uint64_t v34 = CanBeReused;
        goto LABEL_22;
      }
      if (!v42)
      {
        uint64_t CanBeReused = FigSignalErrorAt();
        goto LABEL_25;
      }
      goto LABEL_20;
    }
  }
  else
  {
    CFNumberRef Size = 0;
  }
  CFTypeID v23 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  CFArrayRef v24 = *(const void **)(a2 + 24);
  int v25 = *(const void **)(a2 + 32);
  if (a9)
  {
    CFTypeID v26 = *(const void **)(a2 + 48);
    long long v27 = a6[3];
    long long v38 = a6[2];
    long long v39 = v27;
    long long v40 = a6[4];
    uint64_t v41 = *((void *)a6 + 10);
    long long v28 = a6[1];
    long long v36 = *a6;
    long long v37 = v28;
    uint64_t CanBeReused = CMPhotoCompressionPluginCreate(a1, v24, v25, v26, (uint64_t)&v36, a5, (uint64_t)_compressionPluginSequenceFrameEncodeCallback, 0, &Value);
    if (CanBeReused) {
      goto LABEL_25;
    }
    FigCFDictionarySetValue();
  }
  else
  {
    CFTypeID v29 = *(const void **)(a2 + 40);
    long long v30 = a6[3];
    long long v38 = a6[2];
    long long v39 = v30;
    long long v40 = a6[4];
    uint64_t v41 = *((void *)a6 + 10);
    long long v31 = a6[1];
    long long v36 = *a6;
    long long v37 = v31;
    uint64_t v32 = CMPhotoCompressionPluginCreate(a1, v24, v25, v29, (uint64_t)&v36, a5, (uint64_t)_compressionPluginTileEncodeCallback, a7, &Value);
    if (v32)
    {
      uint64_t v34 = v32;
LABEL_30:
      CMPhotoCompressionPluginDispose(Value);
      goto LABEL_22;
    }
  }
  if (*v23 == 1)
  {
    kdebug_trace();
    if (*v23 == 1) {
      kdebug_trace();
    }
  }
  uint64_t v33 = CMPhotoCompressionPluginPrepare((uint64_t)Value);
  if (v33)
  {
    uint64_t v34 = v33;
    if (a9) {
      goto LABEL_22;
    }
    goto LABEL_30;
  }
  if (*v23 == 1) {
    kdebug_trace();
  }
LABEL_20:
  uint64_t v34 = 0;
  if (a11)
  {
    *a11 = Value;
    CFDictionaryRef Value = 0;
  }
LABEL_22:
  if (Size) {
    CFRelease(Size);
  }
  return v34;
}

uint64_t ___encodePixelBufferForIndex_block_invoke(uint64_t a1)
{
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  uint64_t v3 = *(void *)(a1 + 64);
  CFDictionaryRef v2 = *(const void **)(a1 + 72);
  int v4 = *(_DWORD *)(a1 + 256);
  CFDictionaryRef v5 = *(const __CFDictionary **)(a1 + 80);
  uint64_t v6 = *(void *)(a1 + 176);
  uint64_t v7 = *(void *)(a1 + 184);
  char v8 = *(unsigned char *)(a1 + 292);
  uint64_t v9 = *(void *)(a1 + 192);
  CFTypeID v10 = (void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  memcpy(__dst, (const void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24), 0x158uLL);
  long long v11 = *(_OWORD *)(a1 + 136);
  long long v34 = *(_OWORD *)(a1 + 120);
  long long v35 = v11;
  long long v36 = *(_OWORD *)(a1 + 152);
  uint64_t v37 = *(void *)(a1 + 168);
  long long v12 = *(_OWORD *)(a1 + 104);
  long long v32 = *(_OWORD *)(a1 + 88);
  long long v33 = v12;
  uint64_t result = _createPlugin(v2, v3, v4, (uint64_t)__dst, v5, &v32, v6, v7, v8, v9, v10);
  if (result) {
    goto LABEL_9;
  }
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  uint64_t v31 = *(void *)(a1 + 64);
  unsigned int v30 = *(_DWORD *)(a1 + 256);
  CFDictionaryRef v27 = *(const __CFDictionary **)(a1 + 216);
  uint64_t v28 = *(void *)(a1 + 224);
  uint64_t v29 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  uint64_t v14 = *(void *)(a1 + 32);
  char v25 = *(unsigned char *)(a1 + 293);
  unsigned int v26 = *(_DWORD *)(a1 + 260);
  unsigned __int8 v23 = *(unsigned char *)(a1 + 292);
  unint64_t v15 = *(__CVBuffer **)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
  char v16 = *(unsigned char *)(a1 + 294);
  uint64_t v17 = *(void *)(a1 + 176);
  int v18 = *(_DWORD *)(a1 + 288);
  uint64_t v19 = *(void *)(a1 + 240);
  uint64_t v24 = *(void *)(a1 + 232);
  long long v20 = *(const void **)(a1 + 192);
  uint64_t v21 = *(const void **)(a1 + 80);
  memcpy(__dst, (const void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24), 0x158uLL);
  long long v32 = *(_OWORD *)(a1 + 264);
  *(void *)&long long v33 = *(void *)(a1 + 280);
  uint64_t result = _encodeTiles(v31, v29, v27, v30, v28, __dst, v26, v24, v25, v23, &v32, *(void *)(a1 + 200), *(void *)(a1 + 208), v15, v16, v17, v18, 1u, v19,
             v20,
             v21,
             v14);
  int v22 = result;
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    uint64_t result = kdebug_trace();
  }
  if (v22) {
LABEL_9:
  }
    *(unsigned char *)(*(void *)(a1 + 248) + 16) = 1;
  return result;
}

uint64_t _encodeTiles(uint64_t a1, uint64_t a2, const __CFDictionary *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7, uint64_t a8, char a9, unsigned __int8 a10, long long *a11, uint64_t a12, uint64_t a13, __CVBuffer *a14, char a15, uint64_t a16, int a17, unsigned __int8 a18, uint64_t a19, const void *a20,const void *a21,uint64_t a22)
{
  int v95 = a7;
  uint64_t v23 = a4;
  unsigned int v26 = a20;
  char v25 = a21;
  CFDictionaryRef v27 = a14;
  int v28 = a10;
  uint64_t v29 = a1 + 88;
  BOOL v129 = 0;
  if (a6[48])
  {
    float64x2_t v31 = *(float64x2_t *)(a6 + 168);
    uint64_t v32 = *((void *)a6 + 13) * *((void *)a6 + 17);
    uint64_t v33 = *((void *)a6 + 14) * *((void *)a6 + 18);
    uint64x2_t v34 = vcvtq_u64_f64(vrndaq_f64(*(float64x2_t *)(a6 + 184)));
    v128[0] = vcvtq_u64_f64(vrndaq_f64(v31));
    v128[1] = v34;
    uint64x2_t v134 = vcvtq_u64_f64(v31);
    v135.i64[0] = v32;
    v135.i64[1] = v33;
    long long v35 = (CFTypeRef *)a2;
    uint64_t v36 = a1 + 88;
    uint64_t v37 = CMPhotoCompressionPluginPixelTransfer(a2, (uint64_t)a14, &v134, v128, (uint64_t)&v129, v29, a7, a8);
    if (v37)
    {
      uint64_t v47 = v37;
      BOOL v97 = (void *)a16;
      CFDictionaryRef theDicta = 0;
      int v49 = 1;
      int v48 = a14;
      LODWORD(v23) = a4;
      char v25 = a21;
      uint64_t v38 = a1;
      goto LABEL_98;
    }
    if (v129)
    {
      if (a14) {
        CFRelease(a14);
      }
      CFDictionaryRef v27 = v129;
      uint64_t v29 = v36;
      BOOL v129 = 0;
      *((void *)a6 + 11) = 0;
      *((void *)a6 + 12) = 0;
      *(_OWORD *)(a6 + 16_Block_object_dispose(&STACK[0x280], 8) = *MEMORY[0x1E4F1DAD8];
      uint64_t v23 = a4;
    }
    else
    {
      CFDictionaryRef v27 = a14;
      uint64_t v23 = a4;
      uint64_t v29 = v36;
    }
    char v25 = a21;
    uint64_t v38 = a1;
    int v28 = a10;
  }
  else
  {
    uint64_t v38 = a1;
    long long v35 = (CFTypeRef *)a2;
  }
  *(void *)a16 = v38;
  *(void *)(a16 + _Block_object_dispose(&STACK[0x280], 8) = a5;
  *(unsigned char *)(a16 + 44) = a6[81];
  *(unsigned char *)(a16 + 45) = a9;
  *(_DWORD *)(a16 + 4_Block_object_dispose(&STACK[0x280], 8) = 0;
  *(unsigned char *)(a16 + 16) = v28;
  *(void *)(a16 + 64) = *((void *)a6 + 42);
  CFMutableDataRef v112 = v27;
  if (!v28)
  {
    uint64_t v90 = v29;
    CFDictionaryRef theDicta = (CFDictionaryRef)malloc_type_calloc(*((void *)a6 + 18) * *((void *)a6 + 17), 0x40uLL, 0x1020040330035C4uLL);
    BOOL v97 = (void *)a16;
    if (!theDicta)
    {
      CFDictionaryRef theDicta = 0;
      int v49 = 1;
      uint64_t v47 = 4294950305;
      goto LABEL_96;
    }
    char v51 = (_DWORD *)MEMORY[0x1E4F1EBA8];
    if (*MEMORY[0x1E4F1EBA8] == 1)
    {
      kdebug_trace();
      if (*v51 == 1) {
        kdebug_trace();
      }
    }
    uint64_t v92 = v25;
    uint64_t v93 = v23;
    CFDataRef v111 = v35;
    uint64_t __src = a6;
    if (a6[82])
    {
      if (*((_DWORD *)a6 + 1) == 1936484717)
      {
        uint64_t v52 = *((void *)a6 + 18);
        int v48 = v112;
        if (v52)
        {
          uint64_t v53 = 0;
          uint64_t v54 = 0;
          uint64_t v55 = 0;
          uint64x2_t v104 = vcvtq_u64_f64(vrndaq_f64(*(float64x2_t *)(__src + 184)));
          uint64x2_t v106 = vcvtq_u64_f64(vrndaq_f64(*(float64x2_t *)(__src + 168)));
          uint64_t v101 = *((void *)__src + 11);
          int v56 = (__CVBuffer *)*((void *)__src + 13);
          uint64_t v98 = *((void *)__src + 12);
          uint64_t v57 = *((void *)__src + 14);
          uint64_t v58 = *((void *)__src + 16);
          int v49 = 1;
          while (1)
          {
            uint64_t v59 = (uint64_t)theDicta + v54;
            *((unsigned char *)theDicta + v54 + 32) = 1;
            BOOL v60 = v58 && v52 - 1 == v55;
            long long v61 = (__CVBuffer *)(v60 ? v58 : v57);
            *(void *)uint64_t v59 = 0;
            *(void *)(v59 + _Block_object_dispose(&STACK[0x280], 8) = v55;
            *(void *)(v59 + 16) = v56;
            *(void *)(v59 + 24) = v61;
            *(_WORD *)(v59 + 34) = v55;
            *(void *)(v59 + 40) = 0;
            *(void *)(v59 + 4_Block_object_dispose(&STACK[0x280], 8) = v53;
            uint64x2_t v134 = v106;
            uint64x2_t v135 = v104;
            uint64_t v130 = v101;
            uint64_t v131 = v98 + v53;
            int v132 = v56;
            int v133 = v61;
            uint64_t v62 = CMPhotoCompressionPluginEncode((uint64_t)v111, v48, a5, &v134, &v130, 0, 0, v59);
            if (v62) {
              break;
            }
            ++v55;
            v54 += 64;
            v53 += v57;
            int v48 = v112;
            if (v52 == v55) {
              goto LABEL_74;
            }
          }
          uint64_t v47 = v62;
          char v25 = v92;
          uint64_t v38 = a1;
          long long v35 = v111;
          unsigned int v26 = a20;
          int v28 = a10;
          goto LABEL_96;
        }
        goto LABEL_74;
      }
      uint64_t v47 = FigSignalErrorAt();
      goto LABEL_72;
    }
    float64x2_t v63 = *(float64x2_t *)(a6 + 168);
    float64x2_t v64 = *(float64x2_t *)(a6 + 184);
    long long v65 = (__CVBuffer *)*((void *)a6 + 13);
    uint64_t v87 = *((void *)a6 + 12);
    uint64_t v88 = *((void *)a6 + 11);
    CFDictionaryRef v66 = (__CVBuffer *)*((void *)a6 + 14);
    long long v67 = (__CVBuffer *)*((void *)a6 + 18);
    CFAllocatorRef v107 = (__CVBuffer *)*((void *)a6 + 17);
    int v68 = a6[328];
    BOOL v139 = 0;
    CFDictionaryRef v140 = 0;
    unsigned int v138 = 0;
    size_t v136 = 0;
    size_t v137 = 0;
    CFNumberRef v89 = v67;
    int v105 = v68;
    if (v68)
    {
      float64x2_t v99 = v64;
      float64x2_t v102 = v63;
      uint64_t v69 = CMPhotoCompressionPluginCopyReconstructionPixelBufferAttributes((uint64_t)v35);
      if (v69)
      {
        uint64_t v47 = v69;
LABEL_69:
        int v48 = v112;
LABEL_70:
        if (!v140)
        {
LABEL_73:
          if (!v47)
          {
LABEL_74:
            CFDictionaryRef v79 = (int *)MEMORY[0x1E4F1EBA8];
            char v25 = v92;
            LODWORD(v23) = v93;
            if (*MEMORY[0x1E4F1EBA8] == 1)
            {
              kdebug_trace();
              int v48 = v112;
            }
            uint64_t v38 = a1;
            long long v35 = v111;
            int v80 = *v79;
            if (*(void *)(a1 + 200))
            {
              if (v80 == 1)
              {
                kdebug_trace();
                int v48 = v112;
              }
              BOOL v81 = *(NSObject **)(a1 + 192);
              block[0] = MEMORY[0x1E4F143A8];
              block[1] = *(void *)"";
              block[2] = ___encodeTiles_block_invoke;
              block[3] = &unk_1E5E300D0;
              void block[5] = a1;
              void block[6] = v90;
              int v122 = v93;
              void block[7] = a12;
              block[8] = a13;
              block[9] = v111;
              block[10] = v48;
              void block[11] = theDicta;
              memcpy(v115, __src, sizeof(v115));
              char v125 = 0;
              int v123 = v95;
              int v124 = a17;
              uint64_t v117 = a16;
              uint64_t v118 = a8;
              unsigned __int8 v126 = a18;
              uint64_t v119 = a19;
              unsigned int v26 = a20;
              CFIndex v120 = a20;
              CFIndex v121 = v92;
              uint64_t v116 = a5;
              block[4] = a22;
              int v82 = v81;
              char v25 = v92;
              dispatch_async(v82, block);
              int v48 = v112;
              int v50 = 0;
              int v28 = a10;
              goto LABEL_86;
            }
            if (v80 == 1)
            {
              kdebug_trace();
              int v48 = v112;
            }
            unsigned int v26 = a20;
            uint64_t v47 = _waitForTileEncodingToComplete(a1, v111, v48, theDicta, 0, v93, a5, (_DWORD *)a16, a18, a19, a20, v92, a22);
            if (*v79 == 1) {
              kdebug_trace();
            }
            int v28 = a10;
            if (!v47)
            {
              int v50 = a18;
              int v48 = v112;
LABEL_86:
              uint64_t v47 = 0;
              int v49 = 0;
              goto LABEL_87;
            }
            int v49 = 0;
LABEL_96:
            int v50 = a18;
            int v48 = v112;
            goto LABEL_87;
          }
          int v49 = 1;
          char v25 = v92;
          LODWORD(v23) = v93;
          uint64_t v38 = a1;
          long long v35 = v111;
          unsigned int v26 = a20;
LABEL_98:
          int v50 = a18;
          int v28 = a10;
          goto LABEL_87;
        }
        CFRelease(v140);
LABEL_72:
        int v48 = v112;
        goto LABEL_73;
      }
      CMPhotoCFDictionaryGetCFValueIfPresent(v140, (const void *)*MEMORY[0x1E4F24D70], &v139);
      FigCFArrayGetInt32AtIndex();
      CMPhotoCFDictionaryGetSizeIfPresent(v140, (const void *)*MEMORY[0x1E4F24E10], &v137);
      CMPhotoCFDictionaryGetSizeIfPresent(v140, (const void *)*MEMORY[0x1E4F24D08], &v136);
      long long v67 = v89;
      float64x2_t v64 = v99;
      float64x2_t v63 = v102;
    }
    if (!v67)
    {
      uint64_t v47 = 0;
      goto LABEL_69;
    }
    int v70 = 0;
    CFMutableDictionaryRef Mutable = 0;
    int v72 = 0;
    uint64x2_t v100 = vcvtq_u64_f64(vrndaq_f64(v64));
    uint64x2_t v103 = vcvtq_u64_f64(vrndaq_f64(v63));
    CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v73 = (char *)theDicta + 56;
    int v48 = v112;
    do
    {
      if (v107)
      {
        CFAllocatorRef v74 = 0;
        uint64_t v75 = v88;
        int v86 = v72;
        uint64_t v76 = (CVPixelBufferRef *)&v73[64 * (uint64_t)v72];
        while (1)
        {
          *(v76 - 7) = v74;
          uint64_t v77 = v76 - 7;
          *((unsigned char *)v77 + 32) = 0;
          v77[1] = v70;
          v77[2] = v65;
          v77[3] = v66;
          if (v105)
          {
            uint64_t PixelBufferWithAttributes = CMPhotoSurfacePoolCreatePixelBufferWithAttributes(*(const void **)(a1 + 24), v138, v137, v136, v140, v76);
            if (PixelBufferWithAttributes) {
              goto LABEL_65;
            }
            if (!Mutable)
            {
              CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              if (!Mutable)
              {
                uint64_t v47 = 4294950305;
                goto LABEL_69;
              }
            }
            FigCFDictionarySetValue();
          }
          uint64x2_t v134 = v103;
          uint64x2_t v135 = v100;
          uint64_t v130 = v75;
          uint64_t v131 = v87 + (void)v70 * (void)v66;
          int v132 = v65;
          int v133 = v66;
          uint64_t PixelBufferWithAttributes = CMPhotoCompressionPluginEncode((uint64_t)v111, v112, a5, &v134, &v130, 0, (uint64_t)Mutable, (uint64_t)(v76 - 7));
          if (PixelBufferWithAttributes)
          {
LABEL_65:
            uint64_t v47 = PixelBufferWithAttributes;
            int v48 = v112;
            goto LABEL_66;
          }
          CFAllocatorRef v74 = (__CVBuffer *)((char *)v74 + 1);
          v76 += 8;
          v75 += (uint64_t)v65;
          if (v107 == v74)
          {
            uint64_t v73 = (char *)theDicta + 56;
            int v72 = v86 + v74;
            int v48 = v112;
            long long v67 = v89;
            break;
          }
        }
      }
      int v70 = (__CVBuffer *)((char *)v70 + 1);
    }
    while (v70 != v67);
    uint64_t v47 = 0;
LABEL_66:
    if (Mutable)
    {
      CFRelease(Mutable);
      goto LABEL_69;
    }
    goto LABEL_70;
  }
  if ((*((unsigned char *)a11 + 12) & 1) == 0)
  {
    BOOL v97 = (void *)a16;
    uint64_t v85 = FigSignalErrorAt();
    int v48 = v112;
    uint64_t v47 = v85;
    CFDictionaryRef theDicta = 0;
    goto LABEL_29;
  }
  long long v39 = *a11;
  *(void *)(a16 + 36) = *((void *)a11 + 2);
  *(_OWORD *)(a16 + 20) = v39;
  *(void *)(a16 + 56) = v27;
  long long v40 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1)
  {
    kdebug_trace();
    CFDictionaryRef v27 = v112;
  }
  uint64x2_t v41 = vcvtq_u64_f64(vrndaq_f64(*(float64x2_t *)(a6 + 184)));
  v127[0] = vcvtq_u64_f64(vrndaq_f64(*(float64x2_t *)(a6 + 168)));
  v127[1] = v41;
  uint64x2_t v134 = 0u;
  uint64x2_t v135 = 0u;
  char v42 = v27;
  uint64_t v43 = CMPhotoCompressionPluginEncode((uint64_t)v35, v27, a5, v127, v134.i64, 0, 0, a16);
  if (v43)
  {
    uint64_t v47 = v43;
    BOOL v97 = (void *)a16;
    CFDictionaryRef theDicta = 0;
    int v49 = 1;
    int v50 = a18;
    int v48 = v42;
    goto LABEL_87;
  }
  if (*v40 == 1) {
    kdebug_trace();
  }
  v134.i8[0] = 1;
  CMPhotoCFDictionaryGetBooleanIfPresent(a3, @"AllowAsynchronousEncode", &v134);
  if (a15) {
    BOOL v44 = v134.u8[0] == 0;
  }
  else {
    BOOL v44 = 1;
  }
  char v45 = !v44;
  v134.i8[0] = v45;
  if (!v44) {
    goto LABEL_27;
  }
  uint64_t v46 = CMPhotoCompressionPluginCompleteEncodes((uint64_t)v35);
  if (v46)
  {
LABEL_104:
    uint64_t v47 = v46;
    goto LABEL_28;
  }
  if (*(unsigned char *)(v38 + 104))
  {
    uint64_t v46 = FigSignalErrorAt();
    goto LABEL_104;
  }
LABEL_27:
  uint64_t v47 = 0;
LABEL_28:
  CFDictionaryRef theDicta = 0;
  BOOL v97 = 0;
  int v48 = 0;
LABEL_29:
  int v49 = 1;
  int v50 = a18;
LABEL_87:
  if (v50 && *(void *)(v38 + 200))
  {
    BOOL v83 = v48;
    FigSemaphoreSignal();
    int v48 = v83;
  }
  if (v49) {
    _freeVariablesUsedAcrossAsyncEncodingMethods(v47, v38, v35, v48, v28, v97, theDicta, v23, v26, v25, a19);
  }
  if (v129) {
    CFRelease(v129);
  }
  return v47;
}

uint64_t _freeVariablesUsedAcrossAsyncEncodingMethods(int a1, uint64_t a2, CFTypeRef *a3, CFTypeRef cf, int a5, void *a6, void *a7, int a8, CFTypeRef cfa, const void *a10, uint64_t a11)
{
  if (a5)
  {
    if (!a1) {
      goto LABEL_9;
    }
  }
  else
  {
    CMPhotoCompressionPluginDispose(a3);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (a6) {
    free(a6);
  }
LABEL_9:
  if (a7) {
    free(a7);
  }
  if (cfa) {
    CFRelease(cfa);
  }
  if (a10) {
    CFRelease(a10);
  }
  uint64_t result = CMPhotoSurfacePoolMarkCachesVolatile(*(void *)(a2 + 24), 0);
  if (*MEMORY[0x1E4F1EBA8] == 1)
  {
    return kdebug_trace();
  }
  return result;
}

uint64_t _writeDepthRepInfoElement(uint64_t a1, float a2)
{
  uint64_t result = CMPhotoBitStreamWriteBits(a1, a2 < 0.0, 1u);
  if (!result)
  {
    float v5 = fabsf(a2);
    if (v5 >= 9.3132e-10)
    {
      int v7 = vcvtms_s32_f32(log2f(v5));
      float v8 = ldexpf(1.0, v7);
      uint64_t result = CMPhotoBitStreamWriteBits(a1, v7 + 31, 7u);
      if (result) {
        return result;
      }
      uint64_t result = CMPhotoBitStreamWriteBits(a1, 15, 5u);
      if (result) {
        return result;
      }
      float v9 = ((float)(v5 / v8) + -1.0) * 65536.0;
      LODWORD(v6) = vcvtas_u32_f32(v9);
    }
    else
    {
      uint64_t result = CMPhotoBitStreamWriteBits(a1, 0, 7u);
      if (result) {
        return result;
      }
      uint64_t result = CMPhotoBitStreamWriteBits(a1, 15, 5u);
      if (result) {
        return result;
      }
      uint64_t v6 = 0;
    }
    return CMPhotoBitStreamWriteBits(a1, v6, 0x10u);
  }
  return result;
}

void _compressionPluginSequenceFrameEncodeCallback(int a1, int a2, CMSampleBufferRef sbuf, uint64_t a4, char *a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)a5;
  CMSampleBufferRef sampleBufferOut = 0;
  if (!a2)
  {
    memset(&timingInfoOut, 0, sizeof(timingInfoOut));
    if (!CMSampleBufferGetSampleTimingInfo(sbuf, 0, &timingInfoOut)
      && (timingInfoOut.presentationTimeStamp.flags & 1) != 0
      && (timingInfoOut.decodeTimeStamp.flags & 1) != 0)
    {
      CMTime time1 = timingInfoOut.presentationTimeStamp;
      CMTime time2 = *(CMTime *)(a5 + 20);
      if (!CMTimeCompare(&time1, &time2))
      {
        if (sbuf) {
          float v8 = (opaqueCMSampleBuffer *)CFRetain(sbuf);
        }
        else {
          float v8 = 0;
        }
        CMSampleBufferRef sampleBufferOut = v8;
LABEL_8:
        if (!CMPhotoHEIFFileWriterAddSampleBufferToImage(*(void *)(v6 + 88), 0, *((void *)a5 + 1), v8))goto LABEL_10; {
        goto LABEL_9;
        }
      }
    }
    timingInfoOut.decodeTimeStamp = *(CMTime *)(a5 + 20);
    timingInfoOut.presentationTimeStamp = timingInfoOut.decodeTimeStamp;
    *(_OWORD *)&timingInfoOut.duration.CFNumberRef value = *MEMORY[0x1E4F1F9F8];
    timingInfoOut.duration.epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    if (!CMSampleBufferCreateCopyWithNewTiming((CFAllocatorRef)*MEMORY[0x1E4F1CF80], sbuf, 1, &timingInfoOut, &sampleBufferOut))
    {
      float v8 = sampleBufferOut;
      goto LABEL_8;
    }
  }
LABEL_9:
  *(unsigned char *)(v6 + 104) = 1;
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_10:
  if (sampleBufferOut) {
    CFRelease(sampleBufferOut);
  }
  CFTypeID v10 = (const void *)*((void *)a5 + 7);
  if (v10) {
    CFRelease(v10);
  }
  CMPhotoSurfacePoolMarkCachesVolatile(*(void *)(v6 + 24), 0);
  free(a5);
}

void _compressionPluginTileEncodeCallback(uint64_t a1, int a2, opaqueCMSampleBuffer *a3, uint64_t *a4, uint64_t a5)
{
  if (a2)
  {
    int v18 = a2;
    CFDictionaryRef v12 = 0;
    DictionaryRepresentatiouint64_t n = 0;
    CFMutableDictionaryRef Mutable = 0;
    goto LABEL_30;
  }
  uint64_t v8 = *a4;
  if (!*((unsigned char *)a4 + 44))
  {
    CFDictionaryRef v12 = 0;
    DictionaryRepresentatiouint64_t n = 0;
    CFMutableDictionaryRef Mutable = 0;
    goto LABEL_11;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    CFDictionaryRef v12 = 0;
    goto LABEL_27;
  }
  if (!*(unsigned char *)(a5 + 32))
  {
    v21.double x = (double)*(unint64_t *)a5;
    v21.double y = (double)*(unint64_t *)(a5 + 8);
    DictionaryRepresentatiouint64_t n = CGPointCreateDictionaryRepresentation(v21);
    if (DictionaryRepresentation)
    {
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F33300], DictionaryRepresentation);
      CFDictionaryRef v12 = 0;
      goto LABEL_11;
    }
    CFDictionaryRef v12 = 0;
LABEL_28:
    int v18 = -16991;
    goto LABEL_30;
  }
  CFTypeID v10 = cmpweak_kFigPictureCollectionWriterOption_OverlayItemIndex();
  int v11 = CMPhotoCFDictionarySetInt16(Mutable, v10, *(_WORD *)(a5 + 34));
  if (v11)
  {
    int v18 = v11;
    CFDictionaryRef v12 = 0;
    DictionaryRepresentatiouint64_t n = 0;
    goto LABEL_30;
  }
  v20.double x = (double)*(unint64_t *)(a5 + 40);
  v20.double y = (double)*(unint64_t *)(a5 + 48);
  CFDictionaryRef v12 = CGPointCreateDictionaryRepresentation(v20);
  if (!v12)
  {
LABEL_27:
    DictionaryRepresentatiouint64_t n = 0;
    goto LABEL_28;
  }
  double v13 = cmpweak_kFigPictureCollectionWriterOption_OverlayItemOffset();
  CFDictionarySetValue(Mutable, v13, v12);
  DictionaryRepresentatiouint64_t n = 0;
LABEL_11:
  int v15 = CMPhotoHEIFFileWriterAddSampleBufferToImage(*(void *)(v8 + 88), Mutable, a4[1], a3);
  if (!v15)
  {
    if (!*(void *)(a5 + 56)) {
      goto LABEL_17;
    }
    uint64_t v16 = a4[8];
    if (!v16) {
      goto LABEL_17;
    }
    int v15 = (*(uint64_t (**)(void))(v16 + 16))();
    if (!v15)
    {
      uint64_t v17 = *(const void **)(a5 + 56);
      if (v17)
      {
        CFRelease(v17);
        *(void *)(a5 + 56) = 0;
      }
LABEL_17:
      if (!Mutable) {
        goto LABEL_19;
      }
      goto LABEL_18;
    }
  }
  int v18 = v15;
LABEL_30:
  *((_DWORD *)a4 + 12) = v18;
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (Mutable) {
LABEL_18:
  }
    CFRelease(Mutable);
LABEL_19:
  if (DictionaryRepresentation) {
    CFRelease(DictionaryRepresentation);
  }
  if (v12) {
    CFRelease(v12);
  }
}

void ___allowHEIFAsynchronousCompleteEncodeTilesOverride_block_invoke()
{
  _allowHEIFAsynchronousCompleteEncodeTilesOverride_allowAsynchronousComplete = 1;
}

uint64_t ___encodeTiles_block_invoke(uint64_t a1)
{
  CFDictionaryRef v2 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  if (*(void *)(*(void *)(a1 + 48) + 112)) {
    FigSemaphoreSignal();
  }
  if (*v2 == 1) {
    kdebug_trace();
  }
  uint64_t result = _waitForTileEncodingToComplete(*(void *)(a1 + 40), *(CFTypeRef **)(a1 + 72), *(const void **)(a1 + 80), *(void **)(a1 + 88), *(unsigned __int8 *)(a1 + 500), *(unsigned int *)(a1 + 488), *(void *)(a1 + 440), *(_DWORD **)(a1 + 448), *(unsigned char *)(a1 + 501), *(void *)(a1 + 464), *(const void **)(a1 + 472), *(const void **)(a1 + 480), *(void *)(a1 + 32));
  int v4 = result;
  if (*v2 == 1) {
    uint64_t result = kdebug_trace();
  }
  if (v4) {
    *(unsigned char *)(*(void *)(a1 + 48) + 16) = 1;
  }
  return result;
}

uint64_t _waitForTileEncodingToComplete(uint64_t a1, CFTypeRef *a2, const void *a3, void *a4, int a5, uint64_t a6, uint64_t a7, _DWORD *a8, char a9, uint64_t a10, const void *a11, const void *a12, uint64_t a13)
{
  uint64_t v17 = CMPhotoCompressionPluginCompleteEncodes((uint64_t)a2);
  if (!v17)
  {
    if (*MEMORY[0x1E4F1EBA8] == 1) {
      kdebug_trace();
    }
    if (!a8[12])
    {
      uint64_t v18 = 0;
      goto LABEL_6;
    }
    uint64_t v17 = FigSignalErrorAt();
  }
  uint64_t v18 = v17;
LABEL_6:
  if (a9) {
    BOOL v19 = a13 == 0;
  }
  else {
    BOOL v19 = 1;
  }
  if (!v19) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(a13 + 16))(a13, v18, a6, a7, 0);
  }
  _freeVariablesUsedAcrossAsyncEncodingMethods(v18, a1, a2, a3, a5, a8, a4, a6, a11, a12, a10);
  return v18;
}

uint64_t _compressThumbnailInternal_0(uint64_t a1, CFIndex a2, CFDictionaryRef theDict, opaqueCMSampleBuffer *a4, int a5, uint64_t a6)
{
  v17[0] = 0;
  v17[1] = 0;
  SourceCMVideoDimensions Dimensions = CMPhotoGetSourceDimensions(a4, theDict, v17);
  if (SourceDimensions) {
    return SourceDimensions;
  }
  uint64_t v13 = 0;
  uint64_t v14 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (!a4 || !a5) {
    goto LABEL_6;
  }
  uint64_t v13 = (uint64_t)a4 + rand();
  if (*v14 == 1)
  {
    kdebug_trace();
LABEL_6:
    if (*v14 == 1) {
      kdebug_trace();
    }
  }
  uint64_t v15 = _compressX(a1, theDict, a4, 1, a2, 0, 0, 0, -1, MEMORY[0x1E4F1F9F8], a5, v13, 0, a6);
  if (*v14 == 1) {
    kdebug_trace();
  }
  return v15;
}

uint64_t _compressAuxImageInternal_0(uint64_t a1, CFIndex a2, unsigned int a3, uint64_t a4, CFDictionaryRef theDict, opaqueCMSampleBuffer *a6, int a7, CFIndex *a8, uint64_t a9)
{
  v21[0] = 0;
  v21[1] = 0;
  SourceCMVideoDimensions Dimensions = CMPhotoGetSourceDimensions(a6, theDict, v21);
  if (SourceDimensions) {
    return SourceDimensions;
  }
  SourceCMVideoDimensions Dimensions = _copyMainAndAuxImageSamplesIfNeeded(a1);
  if (SourceDimensions) {
    return SourceDimensions;
  }
  uint64_t v18 = 0;
  if (!a6 || !a7) {
    goto LABEL_7;
  }
  uint64_t v18 = (uint64_t)a6 + rand();
  if (*MEMORY[0x1E4F1EBA8] == 1)
  {
    kdebug_trace();
LABEL_7:
    if (*MEMORY[0x1E4F1EBA8] == 1) {
      kdebug_trace();
    }
  }
  uint64_t v19 = _compressX(a1, theDict, a6, 2, a2, a3, a4, 1, -1, MEMORY[0x1E4F1F9F8], a7, v18, a8, a9);
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  return v19;
}

uint64_t _addCompressedX(uint64_t a1, const __CFDictionary *a2, CFTypeRef cf, int a4, CFIndex a5, int a6, const void *a7, uint64_t a8, const __CFDictionary *a9, uint64_t a10)
{
  *((void *)&v80 + 1) = a8;
  *(void *)&long long v80 = a9;
  uint64_t v109 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 104) || !cf || (CFTypeID v14 = CFGetTypeID(cf), v14 != CFDataGetTypeID()))
  {
    return FigSignalErrorAt();
  }
  int v77 = a6;
  CFAllocatorRef v15 = CFGetAllocator((CFTypeRef)a1);
  CFIndex v102 = -1;
  uint64x2_t v103 = 0;
  CMVideoFormatDescriptionRef v101 = 0;
  CMFormatDescriptionRef formatDescriptionOut = 0;
  float64x2_t v98 = 0u;
  long long v99 = 0u;
  CFTypeRef v97 = 0;
  __int16 v95 = 0;
  CMVideoCodecType codecType = 1752589105;
  int v96 = 1;
  if (a2)
  {
    if (CMPhotoCFDictionaryGetInt32IfPresent(a2, @"CodecType", &codecType)
      && codecType == 1752589105)
    {
      CMPhotoCFDictionaryGetBooleanIfPresent(a2, @"PrimaryImage", (unsigned char *)&v95 + 1);
      CMPhotoCFDictionaryGetBooleanIfPresent(a2, @"HiddenImage", &v95);
      CMPhotoCFDictionaryGetCFValueIfPresent(a2, @"ColorSpace", (void **)&v103);
      CFDictionaryRef v16 = (const __CFDictionary *)CFDictionaryGetValue(a2, @"TiledGrid");
      if (!v16)
      {
        uint64_t v78 = a10;
        BOOL v21 = 0;
        unint64_t v20 = 1;
        unint64_t v19 = 1;
LABEL_23:
        CFIndex v87 = a5;
        uint64_t v90 = v19;
        uint64_t v84 = v20;
        CFDictionaryRef v22 = (const __CFDictionary *)CFDictionaryGetValue(a2, @"SourceCropRect");
        CMPhotoCFDictionaryGetIntIfPresent(a2, @"NumberOfCodecSlices", &v96);
        goto LABEL_24;
      }
      CFDictionaryRef v17 = v16;
      CFTypeID v18 = CFGetTypeID(v16);
      if (v18 == CFDictionaryGetTypeID())
      {
        size.origin.double x = 0.0;
        size.origin.double y = 0.0;
        uint64_t v78 = a10;
        if (CGSizeMakeWithDictionaryRepresentation(v17, (CGSize *)&size))
        {
          unint64_t v19 = vcvtad_u64_f64(size.origin.x);
          unint64_t v20 = vcvtad_u64_f64(size.origin.y);
        }
        else
        {
          unint64_t v20 = 1;
          unint64_t v19 = 1;
        }
        BOOL v21 = v19 > 1 || v20 > 1;
        goto LABEL_23;
      }
    }
    uint64_t HEVCNALULocationAndSizeFromType = FigSignalErrorAt();
    goto LABEL_14;
  }
  CFIndex v87 = a5;
  uint64_t v84 = 1;
  uint64_t v78 = a10;
  BOOL v21 = 0;
  CFDictionaryRef v22 = 0;
  uint64_t v90 = 1;
LABEL_24:
  unsigned __int8 BytePtr = CFDataGetBytePtr((CFDataRef)cf);
  CFIndex Length = CFDataGetLength((CFDataRef)cf);
  memset(&size, 0, sizeof(size));
  *(_OWORD *)parameterSetSizes = 0u;
  long long v107 = 0u;
  uint64_t HEVCNALULocationAndSizeFromType = CMPhotoGetHEVCNALULocationAndSizeFromType((uint64_t)BytePtr, Length, 64, &size, parameterSetSizes);
  if (HEVCNALULocationAndSizeFromType) {
    goto LABEL_14;
  }
  uint64_t HEVCNALULocationAndSizeFromType = CMPhotoGetHEVCNALULocationAndSizeFromType((uint64_t)BytePtr, Length, 66, &size.origin.y, &parameterSetSizes[1]);
  if (HEVCNALULocationAndSizeFromType) {
    goto LABEL_14;
  }
  uint64_t HEVCNALULocationAndSizeFromType = CMPhotoGetHEVCNALULocationAndSizeFromType((uint64_t)BytePtr, Length, 68, &size.size.width, (unint64_t *)&v107);
  if (HEVCNALULocationAndSizeFromType) {
    goto LABEL_14;
  }
  uint64_t HEVCNALULocationAndSizeFromType = CMPhotoGetHEVCNALULocationAndSizeFromType((uint64_t)BytePtr, Length, 2, &size.size.height, (unint64_t *)&v107 + 1);
  if (HEVCNALULocationAndSizeFromType) {
    goto LABEL_14;
  }
  uint64_t HEVCNALULocationAndSizeFromType = CMVideoFormatDescriptionCreateFromHEVCParameterSets(v15, 3uLL, (const uint8_t *const *)&size, parameterSetSizes, 4, 0, &formatDescriptionOut);
  if (HEVCNALULocationAndSizeFromType) {
    goto LABEL_14;
  }
  uint64_t Dimensions = (uint64_t)CMVideoFormatDescriptionGetDimensions(formatDescriptionOut);
  unint64_t v31 = (int)Dimensions;
  uint64_t v32 = Dimensions >> 32;
  uint64_t v33 = v90;
  double v34 = (double)(unint64_t)((int)Dimensions * v90);
  uint64_t v35 = v84;
  double v36 = (double)(unint64_t)((Dimensions >> 32) * v84);
  float64x2_t v98 = 0uLL;
  *(double *)&long long v99 = v34;
  *((double *)&v99 + 1) = v36;
  if (v22)
  {
    memset(&size, 0, sizeof(size));
    if (!CGRectMakeWithDictionaryRepresentation(v22, &size)
      || (uint64_t HEVCNALULocationAndSizeFromType = CMPhotoApplyCropRectToRect(v98.f64, size.origin.x, size.origin.y, size.size.width, size.size.height), !HEVCNALULocationAndSizeFromType))
    {
      float64x2_t v37 = v98;
      double v36 = *((double *)&v99 + 1);
      double v34 = *(double *)&v99;
      goto LABEL_34;
    }
LABEL_14:
    uint64_t v24 = HEVCNALULocationAndSizeFromType;
    DictionaryRepresentatiouint64_t n = 0;
    CFDictionaryRef extensions = 0;
LABEL_15:
    unsigned int v26 = 0;
    goto LABEL_125;
  }
  float64x2_t v37 = 0uLL;
LABEL_34:
  float64x2_t v98 = vrndaq_f64(v37);
  *(void *)&long long v99 = round(v34);
  *((void *)&v99 + 1) = round(v36);
  uint64_t v38 = CMFormatDescriptionGetExtensions(formatDescriptionOut);
  if (v38) {
    uint64_t v38 = CFRetain(v38);
  }
  CFDictionaryRef extensions = (CFDictionaryRef)v38;
  if (v103)
  {
    size.origin.double x = 0.0;
    long long v39 = (const void *)*MEMORY[0x1E4F1EDF0];
    if (!CMPhotoCFDictionaryGetCFValueIfPresent((CFDictionaryRef)v38, (const void *)*MEMORY[0x1E4F1EDF0], (void **)&size))
    {
      CFDataRef v40 = CGColorSpaceCopyICCData(v103);
      if (v40)
      {
        CFDataRef v41 = v40;
        CFDictionaryRef MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
        CFDictionarySetValue(MutableCopy, v39, v41);
        if (extensions) {
          CFRelease(extensions);
        }
        CFRelease(v41);
        CFDictionaryRef extensions = MutableCopy;
        uint64_t v35 = v84;
      }
    }
  }
  uint64_t v43 = CMVideoFormatDescriptionCreate(v15, codecType, vcvtad_u64_f64(*(double *)&v99), vcvtad_u64_f64(*((double *)&v99 + 1)), extensions, &v101);
  if (v43)
  {
    uint64_t v24 = v43;
    DictionaryRepresentatiouint64_t n = 0;
    goto LABEL_15;
  }
  CFDictionaryRef theDict = CFDictionaryCreateMutable(v15, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!theDict)
  {
    DictionaryRepresentatiouint64_t n = 0;
    unsigned int v26 = 0;
    uint64_t v24 = 4294950305;
    goto LABEL_125;
  }
  if (v21)
  {
    v111.double width = (double)v31;
    v111.double height = (double)(unint64_t)v32;
    DictionaryRepresentatiouint64_t n = CGSizeCreateDictionaryRepresentation(v111);
    if (!DictionaryRepresentation)
    {
      uint64_t v24 = 4294950305;
      goto LABEL_117;
    }
    unsigned int v26 = theDict;
    CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E4F332F8], DictionaryRepresentation);
  }
  else
  {
    DictionaryRepresentatiouint64_t n = 0;
    unsigned int v26 = theDict;
  }
  if (HIBYTE(v95)) {
    CFDictionarySetValue(v26, (const void *)*MEMORY[0x1E4F332E8], (const void *)*MEMORY[0x1E4F1CFD0]);
  }
  if ((_BYTE)v95)
  {
    if (HIBYTE(v95)) {
      goto LABEL_122;
    }
    CFDictionarySetValue(v26, (const void *)*MEMORY[0x1E4F332A8], (const void *)*MEMORY[0x1E4F1CFC8]);
  }
  if (a4 == 2)
  {
    CFDictionaryRef v79 = DictionaryRepresentation;
    if (a7) {
      CFDictionarySetValue(v26, (const void *)*MEMORY[0x1E4F332A0], a7);
    }
    uint64_t v44 = CMPhotoHEIFFileWriterAddAuxiliaryImageToImage(*(void *)(a1 + 88), v26, v87, codecType, v101, &v102);
    if (v44) {
      goto LABEL_57;
    }
    goto LABEL_61;
  }
  if (a4 == 1)
  {
    CFDictionaryRef v79 = DictionaryRepresentation;
    uint64_t v44 = CMPhotoHEIFFileWriterAddThumbnailToImage(*(void *)(a1 + 88), v26, v87, codecType, v101, &v102);
    if (v44) {
      goto LABEL_57;
    }
    goto LABEL_61;
  }
  if (a4)
  {
LABEL_122:
    uint64_t XMPData = FigSignalErrorAt();
    goto LABEL_123;
  }
  CFDictionaryRef v79 = DictionaryRepresentation;
  uint64_t v44 = CMPhotoHEIFFileWriterAddImageToCollection(*(void *)(a1 + 88), v26, codecType, v101, &v102);
  if (v44)
  {
LABEL_57:
    uint64_t v24 = v44;
    DictionaryRepresentatiouint64_t n = v79;
    goto LABEL_125;
  }
LABEL_61:
  char v45 = CFDataGetBytePtr((CFDataRef)cf);
  CFIndex v46 = CFDataGetLength((CFDataRef)cf);
  if (!v35)
  {
LABEL_109:
    if (a4 != 2 || v80 == 0)
    {
      CFAllocatorRef v74 = (void *)v78;
      DictionaryRepresentatiouint64_t n = v79;
      unsigned int v26 = theDict;
      if (!v78)
      {
        uint64_t v24 = 0;
        goto LABEL_125;
      }
      goto LABEL_119;
    }
    uint64_t XMPData = CMPhotoAuxiliaryImageMetadataCreateXMPData((int)v15, *((CGImageMetadataRef *)&v80 + 1), a9, v77, 0, (CFDataRef *)&v97);
    CFAllocatorRef v74 = (void *)v78;
    DictionaryRepresentatiouint64_t n = v79;
    unsigned int v26 = theDict;
    if (!XMPData)
    {
      uint64_t v75 = CMPhotoHEIFFileWriterAddMetadataToImage(*(void *)(a1 + 88), 0, v102, 1, v97, 0, 0, 0);
      uint64_t v24 = v75;
      if (!v78 || v75) {
        goto LABEL_125;
      }
LABEL_119:
      uint64_t v24 = 0;
      *CFAllocatorRef v74 = v102;
      goto LABEL_125;
    }
LABEL_123:
    uint64_t v24 = XMPData;
    goto LABEL_125;
  }
  unint64_t v47 = v46;
  int v48 = 0;
  uint64_t v88 = (void *)*MEMORY[0x1E4F33300];
  while (1)
  {
    valuea = v48;
    if (v33) {
      break;
    }
LABEL_108:
    int v48 = valuea + 1;
    if (valuea + 1 == (char *)v84) {
      goto LABEL_109;
    }
  }
  uint64_t v49 = 0;
  double v50 = (double)v48;
  while (1)
  {
    size.origin.double x = 0.0;
    parameterSetSizes[0] = 0;
    dataCFIndex Length = 0;
    if (v96 < 1) {
      break;
    }
    int v51 = 0;
    unint64_t v52 = v47;
    uint64_t v53 = v45;
    while (1)
    {
      __uint64_t n = 0;
      uint64_t __src = 0;
      uint64_t v54 = CMPhotoGetHEVCNALULocationAndSizeFromType((uint64_t)v53, v52, 1, &__src, &__n);
      if (v54) {
        break;
      }
      size_t v55 = __n + dataLength + 4;
      dataCFIndex Length = v55;
      unint64_t v56 = (unsigned char *)__src + __n - v53;
      BOOL v57 = v52 >= v56;
      v52 -= v56;
      if (!v57)
      {
        uint64_t v24 = 4294950306;
        goto LABEL_101;
      }
      ++v51;
      uint64_t v53 = (const UInt8 *)__src + __n;
      if (v51 >= v96) {
        goto LABEL_73;
      }
    }
    uint64_t v24 = v54;
LABEL_101:
    CFDictionaryRef v69 = 0;
    CFDictionaryRef v70 = 0;
LABEL_89:
    if (*(void *)&size.origin.x) {
      CFRelease(*(CFTypeRef *)&size.origin.x);
    }
    if (parameterSetSizes[0]) {
      CFRelease((CFTypeRef)parameterSetSizes[0]);
    }
    if (v69) {
      CFRelease(v69);
    }
    if (v70) {
      CFRelease(v70);
    }
    if (v24) {
      goto LABEL_116;
    }
    if (++v49 == v33) {
      goto LABEL_108;
    }
  }
  size_t v55 = 0;
LABEL_73:
  uint64_t v58 = CFAllocatorAllocate(v15, v55, 0);
  uint64_t v59 = v58;
  if (v96 < 1)
  {
    long long v65 = v45;
    unint64_t v67 = v47;
LABEL_81:
    uint64_t v68 = CMBlockBufferCreateWithMemoryBlock(v15, v59, dataLength, v15, 0, 0, dataLength, 1u, (CMBlockBufferRef *)&size);
    if (v68)
    {
      uint64_t v24 = v68;
      CFAllocatorDeallocate(v15, v59);
      CFDictionaryRef v69 = 0;
      CFDictionaryRef v70 = 0;
      char v45 = v65;
      unint64_t v47 = v67;
LABEL_83:
      uint64_t v33 = v90;
      goto LABEL_89;
    }
    uint64_t v71 = CMSampleBufferCreate(v15, *(CMBlockBufferRef *)&size.origin.x, 1u, 0, 0, formatDescriptionOut, 1, 0, 0, 1, &dataLength, (CMSampleBufferRef *)parameterSetSizes);
    uint64_t v33 = v90;
    if (!v71)
    {
      v112.double x = (double)v49;
      v112.double y = v50;
      CFDictionaryRef v72 = CGPointCreateDictionaryRepresentation(v112);
      CFDictionaryRef v69 = v72;
      if (v72)
      {
        values = v72;
        keys = v88;
        CFDictionaryRef v70 = CFDictionaryCreate(v15, (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (v70)
        {
          uint64_t v24 = CMPhotoHEIFFileWriterAddSampleBufferToImage(*(void *)(a1 + 88), v70, v102, (opaqueCMSampleBuffer *)parameterSetSizes[0]);
LABEL_88:
          char v45 = v65;
          unint64_t v47 = v67;
          goto LABEL_89;
        }
      }
      else
      {
        CFDictionaryRef v70 = 0;
      }
      uint64_t v24 = 4294950305;
      goto LABEL_88;
    }
    uint64_t v24 = v71;
    CFDictionaryRef v69 = 0;
    CFDictionaryRef v70 = 0;
    goto LABEL_88;
  }
  int v60 = 0;
  long long v61 = (char *)v58;
  while (1)
  {
    __uint64_t n = 0;
    uint64_t __src = 0;
    uint64_t v62 = CMPhotoGetHEVCNALULocationAndSizeFromType((uint64_t)v45, v47, 1, &__src, &__n);
    if (v62)
    {
      uint64_t v24 = v62;
LABEL_104:
      CFDictionaryRef v69 = 0;
      CFDictionaryRef v70 = 0;
      goto LABEL_83;
    }
    size_t v63 = __n;
    if (HIDWORD(__n)) {
      break;
    }
    *(_DWORD *)long long v61 = bswap32(__n);
    float64x2_t v64 = v61 + 4;
    memcpy(v64, __src, v63);
    long long v65 = (const UInt8 *)__src + __n;
    unint64_t v66 = (unsigned char *)__src + __n - v45;
    unint64_t v67 = v47 - v66;
    if (v47 < v66)
    {
      uint64_t v24 = 4294950306;
      goto LABEL_104;
    }
    long long v61 = &v64[__n];
    ++v60;
    v47 -= v66;
    char v45 = (const UInt8 *)__src + __n;
    if (v60 >= v96) {
      goto LABEL_81;
    }
  }
  uint64_t v24 = 4294950190;
LABEL_116:
  DictionaryRepresentatiouint64_t n = v79;
LABEL_117:
  unsigned int v26 = theDict;
LABEL_125:
  if (v97) {
    CFRelease(v97);
  }
  if (extensions) {
    CFRelease(extensions);
  }
  if (v103) {
    CFRelease(v103);
  }
  if (v101) {
    CFRelease(v101);
  }
  if (formatDescriptionOut) {
    CFRelease(formatDescriptionOut);
  }
  if (v26) {
    CFRelease(v26);
  }
  if (DictionaryRepresentation) {
    CFRelease(DictionaryRepresentation);
  }
  return v24;
}

uint64_t _addExifInternal(uint64_t a1, CFIndex a2, CFDictionaryRef theDict, const __CFData *a4)
{
  if (!*(unsigned char *)(a1 + 104))
  {
    uint64_t v9 = 0;
    if (theDict
      && CMPhotoCFDictionaryGetInt32IfPresent(theDict, @"TIFFHeaderOffset", (char *)&v9 + 4))
    {
      unint64_t Length = CFDataGetLength(a4);
      if (Length > HIDWORD(v9))
      {
        LOBYTE(v9) = 1;
        return CMPhotoHEIFFileWriterAddMetadataToImage(*(void *)(a1 + 88), 0, a2, 0, a4, HIDWORD(v9), 0, 0);
      }
    }
    else
    {
      uint64_t result = CMPhotoExifDetectTIFFHeaderOffset(a4, &v9, (_DWORD *)&v9 + 1);
      if (result) {
        return result;
      }
      if ((_BYTE)v9) {
        return CMPhotoHEIFFileWriterAddMetadataToImage(*(void *)(a1 + 88), 0, a2, 0, a4, HIDWORD(v9), 0, 0);
      }
    }
    return FigSignalErrorAt();
  }
  return FigSignalErrorAt();
}

uint64_t ___compressMainWithAuxiliaryAsync_block_invoke(uint64_t a1)
{
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), @"IncludeAlphaAuxiliaryImageWithOptions");
  if (CFDictionaryGetCount(Value) <= 0) {
    goto LABEL_20;
  }
  uint64_t v3 = (const void *)FigCFDictionaryGetValue();
  if (CFDictionaryContainsKey(Value, @"IncludeAlphaAuxiliaryImageWithOptions")
    || (v3 != 0) != (*(void *)(a1 + 48) == 0))
  {
    goto LABEL_20;
  }
  if (!v3)
  {
    uint64_t v5 = *(void *)(a1 + 56);
    if (*(unsigned char *)(v5 + 16) || !*(unsigned char *)(v5 + 72)) {
      goto LABEL_19;
    }
    goto LABEL_10;
  }
  CFTypeID v4 = CFGetTypeID(v3);
  if (v4 != CMFormatDescriptionGetTypeID())
  {
LABEL_20:
    uint64_t result = FigSignalErrorAt();
    goto LABEL_16;
  }
  if (*(unsigned char *)(*(void *)(a1 + 56) + 16))
  {
LABEL_19:
    uint64_t result = 4294950195;
    goto LABEL_16;
  }
LABEL_10:
  uint64_t v6 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  FigSemaphoreWaitRelative();
  if (*v6 == 1) {
    kdebug_trace();
  }
  CFIndex v7 = *(void *)(*(void *)(a1 + 64) + 144);
  if (v7 < 0) {
    goto LABEL_20;
  }
  uint64_t result = _compressAuxImageInternal_0(*(void *)(a1 + 56), v7, 3u, 0, Value, *(opaqueCMSampleBuffer **)(a1 + 48), 0, 0, 0);
LABEL_16:
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

BOOL CMPhotoIsMatchedJxlDecodeAPI()
{
  return JxlDecoderVersion() >> 3 > 0x464;
}

uint64_t CMPhotoMSRSupportsHDR()
{
  if (CMPhotoMSRSupportsHDR_onceToken != -1) {
    dispatch_once(&CMPhotoMSRSupportsHDR_onceToken, &__block_literal_global_23);
  }
  return CMPhotoMSRSupportsHDR_sHDRSupported;
}

uint64_t __CMPhotoMSRSupportsHDR_block_invoke()
{
  mach_port_t v0 = *MEMORY[0x1E4F2EEF0];
  CFDictionaryRef v1 = IOServiceMatching("AppleM2ScalerCSCDriver");
  uint64_t result = IOServiceGetMatchingService(v0, v1);
  if (result)
  {
    io_object_t v3 = result;
    int v5 = 0;
    CFDictionaryRef v4 = (const __CFDictionary *)IORegistryEntrySearchCFProperty(result, "IOService", @"IOSurfaceAcceleratorCapabilitiesDict", 0, 0);
    if (CMPhotoCFDictionaryGetIntIfPresent(v4, @"IOSurfaceAcceleratorCapabilitiesHDR", &v5)) {
      CMPhotoMSRSupportsHDR_sHDRSupported = v5 != 0;
    }
    if (v4) {
      CFRelease(v4);
    }
    return IOObjectRelease(v3);
  }
  return result;
}

uint64_t CMPhotoGetHEVCProfileForPixelFormat(uint64_t a1, int a2)
{
  UncompressedPixelFormatFromCompressedPixeluint64_t Format = CMPhotoGetUncompressedPixelFormatFromCompressedPixelFormat(a1);
  BitDepthForPixeluint64_t Format = CMPhotoGetBitDepthForPixelFormat(UncompressedPixelFormatFromCompressedPixelFormat);
  ChromaSubsamplingFromPixeluint64_t Format = CMPhotoGetChromaSubsamplingFromPixelFormat(UncompressedPixelFormatFromCompressedPixelFormat);
  if (BitDepthForPixelFormat < 9)
  {
    if (ChromaSubsamplingFromPixelFormat == 1 || ChromaSubsamplingFromPixelFormat == 3)
    {
      uint64_t v6 = MEMORY[0x1E4F452C0];
    }
    else if (ChromaSubsamplingFromPixelFormat == 6)
    {
      uint64_t v6 = MEMORY[0x1E4F452E0];
    }
    else
    {
      uint64_t v6 = MEMORY[0x1E4F452D0];
      if (!a2) {
        uint64_t v6 = MEMORY[0x1E4F452C8];
      }
    }
  }
  else
  {
    switch(ChromaSubsamplingFromPixelFormat)
    {
      case 1:
        uint64_t v6 = MEMORY[0x1E4F452B8];
        break;
      case 3:
        uint64_t v6 = MEMORY[0x1E4F452B0];
        break;
      case 6:
        uint64_t v6 = MEMORY[0x1E4F452D8];
        break;
      default:
        uint64_t v6 = MEMORY[0x1E4F452A8];
        break;
    }
  }
  return *(void *)v6;
}