double makeSeconds(unint64_t a1)
{
  return (double)a1 / 1000.0 / 1000.0 / 1000.0;
}

uint64_t benchmarkBlock(uint64_t a1)
{
  return MEMORY[0x270ED9268](1, a1);
}

uint64_t benchmarkIterations(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270ED9268](a1, a2);
}

void benchmarkStatsUpdated(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, _OWORD *a4@<X8>, double a5@<D0>)
{
  v9 = a3;
  double v10 = CACurrentMediaTime();
  double v11 = (double)a2 / 1000.0 / 1000.0 / 1000.0;
  unint64_t v12 = *(void *)a1 + a2;
  *(void *)a1 = v12;
  int v13 = *(_DWORD *)(a1 + 8) + 1;
  double v14 = *(double *)(a1 + 32);
  *(_DWORD *)(a1 + 8) = v13;
  *(double *)(a1 + 32) = fmax(v14, v11);
  double v15 = (double)v12 / 1000.0 / 1000.0 / 1000.0 / (double)v13;
  double v16 = fmax(*(double *)(a1 + 48), v11);
  *(double *)(a1 + 40) = v15;
  *(double *)(a1 + 48) = v16;
  if (v10 - *(double *)(a1 + 16) > a5)
  {
    int v17 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v17 + 1;
    if (v17) {
      double v15 = *(double *)(a1 + 56) + (v15 - *(double *)(a1 + 56)) / (double)(v17 + 1);
    }
    *(double *)(a1 + 56) = v15;
    v18 = (void (*)(void *, _OWORD *))v9[2];
    long long v19 = *(_OWORD *)(a1 + 16);
    v23[0] = *(_OWORD *)a1;
    v23[1] = v19;
    long long v20 = *(_OWORD *)(a1 + 48);
    v23[2] = *(_OWORD *)(a1 + 32);
    v23[3] = v20;
    v18(v9, v23);
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    *(double *)(a1 + 16) = v10;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
  }
  long long v21 = *(_OWORD *)(a1 + 16);
  *a4 = *(_OWORD *)a1;
  a4[1] = v21;
  long long v22 = *(_OWORD *)(a1 + 48);
  a4[2] = *(_OWORD *)(a1 + 32);
  a4[3] = v22;
}

uint64_t MeasureUnitsGetSystemDefault()
{
  v0 = [MEMORY[0x263EFF960] currentLocale];
  unsigned int v1 = [v0 usesMetricSystem];

  return v1;
}

__n128 computeTriangulation(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = a2 >> 2;
  v20[0] = 0;
  v20[1] = 0;
  cva::MatrixData<double,0ul,0ul,false>::allocate(v20, a2 & 0xFFFFFFFC);
  unsigned int v21 = v4;
  int v22 = 4;
  if (a2 >= 1)
  {
    uint64_t v5 = 0;
    unsigned int v6 = 1;
    v7 = v20[0];
    do
    {
      if (v4 <= (v6 - 1) >> 2) {
        __assert_rtn("assert_in_bounds", "matrixmixin.h", 2269, "((row < mixed().rows()) && (col < mixed().columns())) || cva::detail::assertMessage(\"Index out of bounds!\")");
      }
      v7[((v6 - 1) >> 2) + ((v6 - 1) & 3) * v4] = *(void *)(a1 + 8 * v5);
      uint64_t v5 = v6++;
    }
    while (v5 < a2);
  }
  cva::SVD<cva::Matrix<double,0u,0u,false>,true>::SVD<cva::Matrix<double,0u,0u,false>>((uint64_t)&v14, v20, 3, 0);
  uint64_t v8 = (HIDWORD(v16) * v16);
  v18[0] = 0;
  v18[1] = 0;
  cva::MatrixData<double,0ul,0ul,false>::allocate(v18, v8);
  if (v8) {
    memcpy(v18[0], __src, 8 * v8);
  }
  uint64_t v19 = v16;
  free(v17);
  free(__src);
  free(v14);
  if (v19 < 4 || HIDWORD(v19) < 4) {
    __assert_rtn("assert_in_bounds", "matrixmixin.h", 2269, "((row < mixed().rows()) && (col < mixed().columns())) || cva::detail::assertMessage(\"Index out of bounds!\")");
  }
  v9.f64[0] = *((float64_t *)v18[0] + 3);
  unsigned int v10 = 2 * v19 + 3;
  v11.f64[0] = *((float64_t *)v18[0] + v10);
  v11.f64[1] = *((float64_t *)v18[0] + v10 + v19);
  v9.f64[1] = *((float64_t *)v18[0] + (v19 + 3));
  float32x4_t v13 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v9), v11);
  free(v18[0]);
  free(v20[0]);
  return (__n128)v13;
}

void sub_22F176918(_Unwind_Exception *a1)
{
  free(*(void **)(v1 - 80));
  free(*(void **)(v1 - 56));
  _Unwind_Resume(a1);
}

void **cva::SVD<cva::Matrix<double,0u,0u,false>,true>::~SVD(void **a1)
{
  return a1;
}

uint64_t cva::MatrixData<double,0ul,0ul,false>::allocate(void **a1, uint64_t a2)
{
  if (*a1) {
    cva::MatrixData<double,0ul,0ul,false>::allocate();
  }
  size_t v3 = (8 * a2 + 31) & 0xFFFFFFFFFFFFFFE0;
  a1[1] = (void *)(v3 >> 3);
  memptr = 0;
  uint64_t result = malloc_type_posix_memalign(&memptr, 0x20uLL, v3, 0x49090899uLL);
  uint64_t v5 = memptr;
  *a1 = memptr;
  if (!v5) {
    cva::MatrixData<double,0ul,0ul,false>::allocate();
  }
  return result;
}

uint64_t cva::SVD<cva::Matrix<double,0u,0u,false>,true>::SVD<cva::Matrix<double,0u,0u,false>>(uint64_t a1, _DWORD *a2, char a3, int a4)
{
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  cva::SVD<cva::Matrix<double,0u,0u,false>,true>::decompose<cva::Matrix<double,0u,0u,false> const&>(a1, a2, a3, a4);
  return a1;
}

void sub_22F176A3C(_Unwind_Exception *a1)
{
  free(v1[6]);
  free(v1[3]);
  free(*v1);
  _Unwind_Resume(a1);
}

void cva::SVD<cva::Matrix<double,0u,0u,false>,true>::decompose<cva::Matrix<double,0u,0u,false> const&>(uint64_t a1, _DWORD *a2, char a3, int a4)
{
  int v5 = a2[4];
  int v6 = a2[5];
  *(_DWORD *)(a1 + 72) = v5;
  *(_DWORD *)(a1 + 76) = v6;
  if (!(v5 | v6))
  {
    *(unsigned char *)(a1 + 80) = 1;
LABEL_8:
    v7 = *(void **)(a1 + 48);
    *(_DWORD *)(a1 + 64) = 0;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    free(v7);
    uint64_t v8 = *(void **)a1;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    free(v8);
    float64x2_t v9 = *(void **)(a1 + 24);
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 24) = 0;
    free(v9);
    return;
  }
  if (a4 && fabsf((float)(v5 - v6)) >= (float)((float)(v6 + v5) * 0.1)) {
    cva::SVD<cva::Matrix<double,0u,0u,false>,true>::decomposeRectangular<cva::Matrix<double,0u,0u,false>>(a1, a2, a3);
  }
  else {
    cva::SVD<cva::Matrix<double,0u,0u,false>,true>::decomposeDirect<cva::Matrix<double,0u,0u,false>>(a1, (uint64_t)a2, a3);
  }
  if (!*(unsigned char *)(a1 + 80)) {
    goto LABEL_8;
  }
}

void cva::SVD<cva::Matrix<double,0u,0u,false>,true>::decomposeDirect<cva::Matrix<double,0u,0u,false>>(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = (*(_DWORD *)(a2 + 20) * *(_DWORD *)(a2 + 16));
  __dst[0] = 0;
  __dst[1] = 0;
  cva::MatrixData<double,0ul,0ul,false>::allocate(__dst, v6);
  if (v6) {
    memcpy(__dst[0], *(const void **)a2, 8 * v6);
  }
  __dst[2] = *(void **)(a2 + 16);
  cva::SVD<cva::Matrix<double,0u,0u,false>,true>::decomposeDirect<0u,0u>(a1, (uint64_t)__dst, a3);
  free(__dst[0]);
}

void sub_22F176BB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
}

void cva::SVD<cva::Matrix<double,0u,0u,false>,true>::decomposeRectangular<cva::Matrix<double,0u,0u,false>>(uint64_t a1, _DWORD *a2, int a3)
{
  char v3 = a3;
  uint64_t v48 = *MEMORY[0x263EF8340];
  if (a2[5] >= a2[4])
  {
    v41 = a2;
    v44 = (void **)a2;
    v45 = &v41;
    cva::SVD<cva::Matrix<double,0u,0u,false>,true>::decomposeDirect<cva::MatrixMultExpr<cva::Matrix<double,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false> const>>>(a1, &v44, a3 != 0);
    if (!*(unsigned char *)(a1 + 80)) {
      return;
    }
    uint64_t v12 = *(unsigned int *)(a1 + 64);
    if (v12)
    {
      float32x4_t v13 = *(double **)(a1 + 48);
      uint64_t v14 = 8 * v12;
      do
      {
        *float32x4_t v13 = sqrt(*v13);
        ++v13;
        v14 -= 8;
      }
      while (v14);
    }
    if ((v3 & 2) == 0) {
      return;
    }
    uint64_t v34 = cva::SVD<cva::Matrix<double,0u,0u,false>,true>::S((_DWORD *)a1);
    v35 = v15;
    v36 = &v34;
    uint64_t v37 = 0x3E112E0BE826D695;
    uint64_t v38 = a1;
    if (*(_DWORD *)(a1 + 20) != v34) {
      cva::SVD<cva::Matrix<double,0u,0u,false>,true>::decomposeRectangular<cva::Matrix<double,0u,0u,false>>();
    }
    v39 = &v36;
    v40 = (uint64_t **)&v38;
    if (*(_DWORD *)(a1 + 16) != a2[4]) {
      cva::SVD<cva::Matrix<double,0u,0u,false>,true>::decomposeRectangular<cva::Matrix<double,0u,0u,false>>();
    }
    uint64_t v16 = (uint64_t *)(a1 + 24);
    int v17 = HIDWORD(v34);
    if (__PAIR64__(a2[5], HIDWORD(v34)) == *(void *)(a1 + 40))
    {
      v45 = (void **)&v39;
      v46 = (uint64_t ***)a2;
LABEL_30:
      uint64_t v47 = 0x3FF0000000000000;
      cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::MatrixMultExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>>>,cva::Matrix<double,0u,0u,false>>(a1 + 24, (uint64_t)&v44);
      return;
    }
    uint64_t v21 = *v16;
    if (*v15 == *v16)
    {
      int v22 = a2[5];
    }
    else
    {
      int v22 = a2[5];
      if (*(void *)a1 != v21 && *(void *)a2 != v21)
      {
        *(_DWORD *)(a1 + 40) = HIDWORD(v34);
        *(_DWORD *)(a1 + 44) = v22;
        cva::MatrixData<double,0ul,0ul,false>::reserve(a1 + 24, (v22 * v17));
        int v23 = a2[4];
        int v24 = *((_DWORD *)*v40 + 4);
        v45 = (void **)&v39;
        v46 = (uint64_t ***)a2;
        if (v24 != v23) {
          cva::SVD<cva::Matrix<double,0u,0u,false>,true>::decomposeRectangular<cva::Matrix<double,0u,0u,false>>();
        }
        goto LABEL_30;
      }
    }
    v41 = 0;
    uint64_t v42 = 0;
    cva::MatrixData<double,0ul,0ul,false>::allocate(&v41, (v22 * HIDWORD(v34)));
    int v31 = a2[4];
    int v30 = a2[5];
    LODWORD(v43) = *((_DWORD *)*v39 + 1);
    HIDWORD(v43) = v30;
    v45 = (void **)&v39;
    v46 = (uint64_t ***)a2;
    if (*((_DWORD *)*v40 + 4) != v31) {
      __assert_rtn("MatrixMultExpr", "matrixmultexpr.h", 100, "((lhs.ref().columns() == rhs.ref().rows())) || cva::detail::assertMessage(\"Matrix sizes are not compatible!\")");
    }
    uint64_t v47 = 0x3FF0000000000000;
    cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::MatrixMultExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>>>,cva::Matrix<double,0u,0u,false>>((uint64_t)&v41, (uint64_t)&v44);
    v27 = *(void **)(a1 + 24);
    uint64_t v32 = *(void *)(a1 + 32);
    uint64_t v33 = v42;
    *(void *)(a1 + 24) = v41;
    *(void *)(a1 + 32) = v33;
    v41 = v27;
    uint64_t v42 = v32;
    *(void *)(a1 + 40) = v43;
LABEL_36:
    uint64_t v43 = 0;
    free(v27);
    return;
  }
  v41 = a2;
  v44 = &v41;
  v45 = (void **)a2;
  cva::SVD<cva::Matrix<double,0u,0u,false>,true>::decomposeDirect<cva::MatrixMultExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false> const>,cva::Matrix<double,0u,0u,false>>>(a1, (uint64_t **)&v44, 2 * (a3 != 0));
  if (*(unsigned char *)(a1 + 80))
  {
    uint64_t v6 = *(unsigned int *)(a1 + 64);
    if (v6)
    {
      v7 = *(double **)(a1 + 48);
      uint64_t v8 = 8 * v6;
      do
      {
        double *v7 = sqrt(*v7);
        ++v7;
        v8 -= 8;
      }
      while (v8);
    }
    if (v3)
    {
      uint64_t v38 = a1 + 24;
      uint64_t v9 = cva::SVD<cva::Matrix<double,0u,0u,false>,true>::S((_DWORD *)a1);
      uint64_t v34 = v9;
      v35 = v10;
      v36 = &v34;
      uint64_t v37 = 0x3E112E0BE826D695;
      if (*(_DWORD *)(a1 + 40) != HIDWORD(v9)) {
        cva::SVD<cva::Matrix<double,0u,0u,false>,true>::decomposeRectangular<cva::Matrix<double,0u,0u,false>>();
      }
      v39 = (uint64_t **)&v38;
      v40 = &v36;
      if (a2[5] != *(_DWORD *)(a1 + 44)) {
        cva::SVD<cva::Matrix<double,0u,0u,false>,true>::decomposeRectangular<cva::Matrix<double,0u,0u,false>>();
      }
      int v11 = a2[4];
      if (v11 == *(_DWORD *)(a1 + 16) && *(_DWORD *)(a1 + 20) == v9)
      {
        v45 = (void **)a2;
        v46 = &v39;
LABEL_25:
        uint64_t v47 = 0x3FF0000000000000;
        cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::Matrix<double,0u,0u,false>,cva::MatrixMultExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>>,cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>>>>(a1, (uint64_t)&v44);
        return;
      }
      v18 = *(void **)a1;
      if (*(void *)a2 != *(void *)a1 && *(void **)(a1 + 24) != v18 && (void *)*v10 != v18)
      {
        *(_DWORD *)(a1 + 16) = v11;
        *(_DWORD *)(a1 + 20) = v9;
        cva::MatrixData<double,0ul,0ul,false>::reserve(a1, (v11 * v9));
        int v19 = a2[5];
        int v20 = *((_DWORD *)*v39 + 5);
        v45 = (void **)a2;
        v46 = &v39;
        if (v19 != v20) {
          cva::SVD<cva::Matrix<double,0u,0u,false>,true>::decomposeRectangular<cva::Matrix<double,0u,0u,false>>();
        }
        goto LABEL_25;
      }
      v41 = 0;
      uint64_t v42 = 0;
      cva::MatrixData<double,0ul,0ul,false>::allocate(&v41, (v11 * v9));
      int v25 = *(_DWORD *)*v40;
      int v26 = a2[5];
      LODWORD(v43) = a2[4];
      HIDWORD(v43) = v25;
      v45 = (void **)a2;
      v46 = &v39;
      if (v26 != *((_DWORD *)*v39 + 5)) {
        __assert_rtn("MatrixMultExpr", "matrixmultexpr.h", 100, "((lhs.ref().columns() == rhs.ref().rows())) || cva::detail::assertMessage(\"Matrix sizes are not compatible!\")");
      }
      uint64_t v47 = 0x3FF0000000000000;
      cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::Matrix<double,0u,0u,false>,cva::MatrixMultExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>>,cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>>>>((uint64_t)&v41, (uint64_t)&v44);
      v27 = *(void **)a1;
      uint64_t v28 = *(void *)(a1 + 8);
      uint64_t v29 = v42;
      *(void *)a1 = v41;
      *(void *)(a1 + 8) = v29;
      v41 = v27;
      uint64_t v42 = v28;
      *(void *)(a1 + 16) = v43;
      goto LABEL_36;
    }
  }
}

void sub_22F177014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
}

void cva::SVD<cva::Matrix<double,0u,0u,false>,true>::decomposeDirect<0u,0u>(uint64_t a1, uint64_t a2, char a3)
{
  unsigned int v6 = *(_DWORD *)(a2 + 16);
  unsigned int v5 = *(_DWORD *)(a2 + 20);
  if ((int)v5 >= (int)v6) {
    unint64_t v7 = v6;
  }
  else {
    unint64_t v7 = v5;
  }
  *(_DWORD *)(a1 + 64) = v7;
  cva::MatrixData<double,0ul,0ul,false>::reserve(a1 + 48, v7);
  if (a3)
  {
    *(_DWORD *)(a1 + 16) = v6;
    *(_DWORD *)(a1 + 20) = v7;
    cva::MatrixData<double,0ul,0ul,false>::reserve(a1, v7 * v6);
  }
  else
  {
    uint64_t v8 = *(void **)a1;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    free(v8);
  }
  uint64_t v9 = (void **)(a1 + 24);
  if ((a3 & 2) != 0)
  {
    *(_DWORD *)(a1 + 40) = v7;
    *(_DWORD *)(a1 + 44) = v5;
    cva::MatrixData<double,0ul,0ul,false>::reserve(a1 + 24, v7 * v5);
  }
  else
  {
    unsigned int v10 = *v9;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    void *v9 = 0;
    free(v10);
  }
  uint64_t v15 = 0;
  int v14 = 0;
  cva::vecLib::gesvd<double>();
  v12[0] = 0;
  v12[1] = 0;
  cva::MatrixData<double,0ul,0ul,false>::allocate(v12, 0.0);
  unsigned int v13 = 0.0;
  int v11 = (cva::Logger *)cva::vecLib::gesvd<double>();
  if (v14 < 0) {
    __assert_rtn("decomposeDirect", "matrixsvd.h", 439, "(info >= 0) || cva::detail::assertMessage(\"gesvd() compute SVD failed!\")");
  }
  if (v14)
  {
    cva::Logger::instance(v11);
    cva::Logger::logInCategory();
  }
  free(v12[0]);
  *(unsigned char *)(a1 + 80) = v14 == 0;
}

void sub_22F17729C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
}

void cva::MatrixData<double,0ul,0ul,false>::reserve(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (*(void *)(a1 + 8) < a2)
    {
      free(*(void **)a1);
      *(void *)a1 = 0;
      cva::MatrixData<double,0ul,0ul,false>::allocate((void **)a1, a2);
    }
  }
  else
  {
    free(*(void **)a1);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
  }
}

void cva::SVD<cva::Matrix<double,0u,0u,false>,true>::decomposeDirect<cva::MatrixMultExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false> const>,cva::Matrix<double,0u,0u,false>>>(uint64_t a1, uint64_t **a2, char a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  unsigned int v6 = a2 + 1;
  uint64_t v7 = (*((_DWORD *)a2[1] + 5) * *(_DWORD *)(**a2 + 20));
  v12[0] = 0;
  v12[1] = 0;
  cva::MatrixData<double,0ul,0ul,false>::allocate(v12, v7);
  uint64_t v8 = *a2;
  uint64_t v9 = **a2;
  unsigned int v10 = *v6;
  int v11 = *((_DWORD *)*v6 + 5);
  int v13 = *(_DWORD *)(v9 + 20);
  int v14 = v11;
  uint64_t v16 = v8;
  int v17 = v10;
  if (*(_DWORD *)(v9 + 16) != v10[4]) {
    __assert_rtn("MatrixMultExpr", "matrixmultexpr.h", 100, "((lhs.ref().columns() == rhs.ref().rows())) || cva::detail::assertMessage(\"Matrix sizes are not compatible!\")");
  }
  uint64_t v18 = 0x3FF0000000000000;
  cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false> const>,cva::Matrix<double,0u,0u,false>>((uint64_t)v12, (uint64_t)v15);
  cva::SVD<cva::Matrix<double,0u,0u,false>,true>::decomposeDirect<0u,0u>(a1, (uint64_t)v12, a3);
  free(v12[0]);
}

void sub_22F177428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
}

uint64_t cva::SVD<cva::Matrix<double,0u,0u,false>,true>::S(_DWORD *a1)
{
  unsigned int v2 = a1[18];
  LODWORD(v1) = a1[19];
  if (v1 >= v2) {
    uint64_t v1 = v2;
  }
  else {
    uint64_t v1 = v1;
  }
  if (v1 > a1[16]) {
    cva::SVD<cva::Matrix<double,0u,0u,false>,true>::S();
  }
  return v1 | (v1 << 32);
}

void cva::SVD<cva::Matrix<double,0u,0u,false>,true>::decomposeDirect<cva::MatrixMultExpr<cva::Matrix<double,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false> const>>>(uint64_t a1, void **a2, char a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  unsigned int v6 = a2 + 1;
  uint64_t v7 = (*(_DWORD *)(*a2[1] + 16) * *((_DWORD *)*a2 + 4));
  v12[0] = 0;
  v12[1] = 0;
  cva::MatrixData<double,0ul,0ul,false>::allocate(v12, v7);
  uint64_t v8 = *a2;
  uint64_t v9 = *v6;
  uint64_t v10 = **v6;
  int v11 = *(_DWORD *)(v10 + 16);
  int v13 = *((_DWORD *)*a2 + 4);
  int v14 = v11;
  uint64_t v16 = v8;
  int v17 = v9;
  if (v8[5] != *(_DWORD *)(v10 + 20)) {
    __assert_rtn("MatrixMultExpr", "matrixmultexpr.h", 100, "((lhs.ref().columns() == rhs.ref().rows())) || cva::detail::assertMessage(\"Matrix sizes are not compatible!\")");
  }
  uint64_t v18 = 0x3FF0000000000000;
  cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::Matrix<double,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false> const>>((uint64_t)v12, (uint64_t)v15);
  cva::SVD<cva::Matrix<double,0u,0u,false>,true>::decomposeDirect<0u,0u>(a1, (uint64_t)v12, a3);
  free(v12[0]);
}

void sub_22F177588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
}

void cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false> const>,cva::Matrix<double,0u,0u,false>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = **(void **)(a2 + 8);
  if (*(void *)v5 == *(void *)a1 || *(void *)v4 == *(void *)a1)
  {
    uint64_t v8 = (*(_DWORD *)(v4 + 20) * *(_DWORD *)(v5 + 20));
    int v14 = 0;
    uint64_t v15 = 0;
    cva::MatrixData<double,0ul,0ul,false>::allocate(&v14, v8);
    int v9 = *(_DWORD *)(*(void *)(a2 + 16) + 20);
    LODWORD(v16) = *(_DWORD *)(**(void **)(a2 + 8) + 20);
    HIDWORD(v16) = v9;
    cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false> const>,cva::Matrix<double,0u,0u,false>>(&v14, a2);
    uint64_t v10 = *(void **)a1;
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v12 = v15;
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v12;
    int v14 = v10;
    uint64_t v15 = v11;
    *(void *)(a1 + 16) = v16;
    uint64_t v16 = 0;
    free(v10);
  }
  else
  {
    int v6 = *(_DWORD *)(a1 + 16);
    if (v6 != *(_DWORD *)(v5 + 20) || (int v7 = *(_DWORD *)(a1 + 20), v7 != *(_DWORD *)(v4 + 20)))
    {
      cva::Logger::instance((cva::Logger *)a1);
      cva::Logger::logInCategory();
      int v6 = *(_DWORD *)(a1 + 16);
      uint64_t v5 = **(void **)(a2 + 8);
      if (v6 != *(_DWORD *)(v5 + 20)
        || (uint64_t v4 = *(void *)(a2 + 16), v7 = *(_DWORD *)(v4 + 20), *(_DWORD *)(a1 + 20) != v7))
      {
        cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false> const>,cva::Matrix<double,0u,0u,false>>();
      }
    }
    if (*(_DWORD *)(v5 + 16) * v6 && v7 * *(_DWORD *)(v4 + 16)) {
      cva::VecLib<double>::gemm();
    }
    if (v6 * v7)
    {
      int v13 = *(void **)a1;
      bzero(v13, 8 * (v6 * v7));
    }
  }
}

void sub_22F177758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

void cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::Matrix<double,0u,0u,false>,cva::MatrixMultExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>>,cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (*(void *)v4 == *(void *)a1)
  {
    uint64_t v12 = (***(_DWORD ***)(*(void *)(a2 + 16) + 8) * *(_DWORD *)(v4 + 16));
    int v17 = 0;
    uint64_t v18 = 0;
    cva::MatrixData<double,0ul,0ul,false>::allocate(&v17, v12);
    int v13 = ***(_DWORD ***)(*(void *)(a2 + 16) + 8);
    LODWORD(v19) = *(_DWORD *)(*(void *)(a2 + 8) + 16);
    HIDWORD(v19) = v13;
    cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::Matrix<double,0u,0u,false>,cva::MatrixMultExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>>,cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>>>>(&v17, a2);
    int v14 = *(void **)a1;
    uint64_t v15 = *(void *)(a1 + 8);
    uint64_t v16 = v18;
    *(void *)a1 = v17;
    *(void *)(a1 + 8) = v16;
    int v17 = v14;
    uint64_t v18 = v15;
    *(void *)(a1 + 16) = v19;
    uint64_t v19 = 0;
    free(v14);
  }
  else
  {
    int v5 = *(_DWORD *)(a1 + 16);
    if (v5 != *(_DWORD *)(v4 + 16)
      || (int v6 = *(_DWORD *)(a1 + 20), v7 = *(uint64_t ***)(a2 + 16), v6 != *(_DWORD *)*v7[1]))
    {
      cva::Logger::instance((cva::Logger *)a1);
      cva::Logger::logInCategory();
      int v5 = *(_DWORD *)(a1 + 16);
      uint64_t v4 = *(void *)(a2 + 8);
      if (v5 != *(_DWORD *)(v4 + 16)
        || (v7 = *(uint64_t ***)(a2 + 16), int v6 = *(_DWORD *)*v7[1], *(_DWORD *)(a1 + 20) != v6))
      {
        cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false> const>,cva::Matrix<double,0u,0u,false>>();
      }
    }
    if (*(_DWORD *)(v4 + 20) * v5)
    {
      uint64_t v8 = (v6 * *(_DWORD *)(**v7 + 20));
      if (v8)
      {
        int v17 = 0;
        uint64_t v18 = 0;
        cva::MatrixData<double,0ul,0ul,false>::allocate(&v17, v8);
        int v9 = *(_DWORD *)*v7[1];
        LODWORD(v19) = *(_DWORD *)(**v7 + 20);
        HIDWORD(v19) = v9;
        cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>>,cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>>>((cva::Logger *)&v17, v7);
        cva::VecLib<double>::gemm();
      }
    }
    unsigned int v10 = v5 * v6;
    if (v10)
    {
      uint64_t v11 = *(void **)a1;
      bzero(v11, 8 * v10);
    }
  }
}

void sub_22F177994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

void cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>>,cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>>>(cva::Logger *a1, uint64_t **a2)
{
  int v4 = *((_DWORD *)a1 + 4);
  int v5 = *a2;
  uint64_t v6 = **a2;
  if (v4 != *(_DWORD *)(v6 + 20) || (v7 = *((_DWORD *)a1 + 5), uint64_t v8 = (unsigned int **)a2[1], v9 = *v8, v7 != **v8))
  {
    cva::Logger::instance(a1);
    cva::Logger::logInCategory();
    int v4 = *((_DWORD *)a1 + 4);
    int v5 = *a2;
    uint64_t v6 = **a2;
    if (v4 != *(_DWORD *)(v6 + 20) || (uint64_t v8 = (unsigned int **)a2[1], v9 = *v8, v7 = **v8, *((_DWORD *)a1 + 5) != v7)) {
      cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false> const>,cva::Matrix<double,0u,0u,false>>();
    }
  }
  uint64_t v34 = v8;
  if (v7 >= v9[1]) {
    unsigned int v7 = v9[1];
  }
  if (v7 > *(_DWORD *)(v6 + 16)) {
    cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>>,cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>>>();
  }
  v30[0] = v4;
  v30[1] = v7;
  int v31 = v5;
  uint64_t v32 = 0;
  int v25 = &v34;
  int v27 = v4;
  unsigned int v28 = v7;
  uint64_t v29 = &v25;
  v33[0] = v30;
  v33[1] = &v26;
  uint64_t v10 = *(void *)a1;
  v21[0] = v4;
  v21[1] = v7;
  uint64_t v22 = v10;
  int v23 = v4;
  int v24 = 0;
  cva::MatrixRef<double,0u,0u,false>::operator=<cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixTransposeExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const> const>,0u,1u>,cva::detail::MulOp>>((uint64_t)v21, v33);
  unsigned int v11 = *(_DWORD *)(*v5 + 16);
  unsigned int v12 = *((_DWORD *)a1 + 5);
  BOOL v13 = v12 >= v11;
  unsigned int v14 = v12 - v11;
  if (v14 != 0 && v13)
  {
    int v15 = *((_DWORD *)a1 + 4);
    uint64_t v16 = *(void *)a1 + 8 * v15 * v11;
    unsigned int v17 = v15 * v14;
    BOOL v18 = v17 == 0;
    if (v17) {
      uint64_t v19 = (unsigned char *)v16;
    }
    else {
      uint64_t v19 = 0;
    }
    int v20 = (unsigned char *)(v16 + 8 * v17);
    if (v18) {
      int v20 = 0;
    }
    if (v19 != v20) {
      bzero(v19, ((v20 - v19 - 8) & 0xFFFFFFFFFFFFFFF8) + 8);
    }
  }
}

uint64_t cva::MatrixRef<double,0u,0u,false>::operator=<cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixTransposeExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const> const>,0u,1u>,cva::detail::MulOp>>(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 8) - 8 * *(unsigned int *)(a1 + 20);
  if (***(void ***)(*a2 + 8) == v4 || **(void **)(****(void ****)(a2[1] + 16) + 8) == v4)
  {
    int v5 = *(_DWORD *)a1;
    int v6 = *(_DWORD *)(a1 + 4);
    v21[0] = 0;
    v21[1] = 0;
    cva::MatrixData<double,0ul,0ul,false>::allocate(v21, (v6 * v5));
    int v22 = v5;
    int v23 = v6;
    cva::detail::assignNoAlias<cva::Matrix<double,0u,0u,false>,cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixTransposeExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const> const>,0u,1u>,cva::detail::MulOp>>((cva::Logger *)v21, a2);
    int v8 = *(_DWORD *)a1;
    if (*(_DWORD *)a1 != v22 || (int v9 = *(_DWORD *)(a1 + 4), v9 != v23))
    {
      cva::Logger::instance(v7);
      cva::Logger::logInCategory();
      int v8 = *(_DWORD *)a1;
      if (*(_DWORD *)a1 != v22 || (int v9 = *(_DWORD *)(a1 + 4), v9 != v23)) {
        __assert_rtn("assert_equal_size", "matrixfun.h", 163, "(lhs.rows() == rhs.rows() && lhs.columns() == rhs.columns()) || cva::detail::assertMessage(\"Matrix sizes are not compatible!\")");
      }
    }
    int v10 = *(_DWORD *)(a1 + 16);
    BOOL v11 = v8 * v9 == 0;
    if (v8 * v9) {
      unsigned int v12 = *(void **)(a1 + 8);
    }
    else {
      unsigned int v12 = 0;
    }
    uint64_t v13 = *(void *)(a1 + 8) + 8 * (v10 * v9);
    if (v11) {
      uint64_t v13 = 0;
    }
    unsigned int v14 = v21[0];
    if (v12 != (void *)v13)
    {
      int v15 = 0;
      unsigned int v16 = v10 - v8;
      unsigned int v17 = (uint64_t *)v21[0];
      do
      {
        uint64_t v18 = *v17++;
        *unsigned int v12 = v18;
        if (v15 + 1 >= v8) {
          unsigned int v19 = v16;
        }
        else {
          unsigned int v19 = 0;
        }
        v12 += v19 + 1;
        if (v15 + 1 < v8) {
          ++v15;
        }
        else {
          int v15 = 0;
        }
      }
      while (v12 != (void *)v13);
    }
    free(v14);
  }
  else
  {
    cva::detail::assignNoAlias<cva::MatrixRef<double,0u,0u,false>,cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixTransposeExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const> const>,0u,1u>,cva::detail::MulOp>>(a1, a2);
  }
  return a1;
}

void sub_22F177CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

void cva::detail::assignNoAlias<cva::Matrix<double,0u,0u,false>,cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixTransposeExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const> const>,0u,1u>,cva::detail::MulOp>>(cva::Logger *a1, void *a2)
{
  unsigned int v4 = *((_DWORD *)a1 + 4);
  int v5 = (_DWORD *)*a2;
  if (v4 != *(_DWORD *)*a2 || (int v6 = *((_DWORD *)a1 + 5), v6 != v5[1]))
  {
    cva::Logger::instance(a1);
    cva::Logger::logInCategory();
    unsigned int v4 = *((_DWORD *)a1 + 4);
    int v5 = (_DWORD *)*a2;
    if (v4 != *(_DWORD *)*a2 || (int v6 = *((_DWORD *)a1 + 5), v6 != v5[1])) {
      cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false> const>,cva::Matrix<double,0u,0u,false>>();
    }
  }
  uint64_t v7 = v6 * v4;
  if (v7)
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0;
    uint64_t v10 = a2[1];
    BOOL v11 = *(double **)a1;
    uint64_t v12 = 8 * v7;
    do
    {
      if (v4 <= v9 || v5[1] <= HIDWORD(v9)) {
        cva::detail::assignNoAlias<cva::Matrix<double,0u,0u,false>,cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixTransposeExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const> const>,0u,1u>,cva::detail::MulOp>>();
      }
      unsigned int v13 = v5[5] + HIDWORD(v9);
      uint64_t v14 = **((void **)v5 + 1);
      unsigned int v15 = *(_DWORD *)(v14 + 16);
      if (v15 <= v13 || (unsigned int v16 = v5[4] + v9, v16 >= *(_DWORD *)(v14 + 20))) {
        cva::detail::assignNoAlias<cva::Matrix<double,0u,0u,false>,cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixTransposeExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const> const>,0u,1u>,cva::detail::MulOp>>();
      }
      double v17 = *(double *)(*(void *)v14 + 8 * (v13 + v15 * v16));
      *v11++ = v17
             * cva::MatrixRepeatExpr<cva::MatrixTransposeExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const> const>,0u,1u>::operator()(v10, v8, HIDWORD(v8));
      uint64_t v18 = (v9 + 1);
      unsigned int v4 = *v5;
      if (*v5 <= (int)v18) {
        unint64_t v9 = (v9 & 0xFFFFFFFF00000000) + 0x100000000;
      }
      else {
        unint64_t v9 = v9 & 0xFFFFFFFF00000000 | v18;
      }
      uint64_t v19 = (v8 + 1);
      if (*(_DWORD *)(v10 + 4) <= (int)v19) {
        unint64_t v8 = (v8 & 0xFFFFFFFF00000000) + 0x100000000;
      }
      else {
        unint64_t v8 = v8 & 0xFFFFFFFF00000000 | v19;
      }
      v12 -= 8;
    }
    while (v12);
  }
}

void cva::detail::assignNoAlias<cva::MatrixRef<double,0u,0u,false>,cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixTransposeExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const> const>,0u,1u>,cva::detail::MulOp>>(uint64_t a1, void *a2)
{
  signed int v4 = *(_DWORD *)a1;
  int v5 = (_DWORD *)*a2;
  if (*(_DWORD *)a1 != *(_DWORD *)*a2 || (int v6 = *(_DWORD *)(a1 + 4), v6 != v5[1]))
  {
    cva::Logger::instance((cva::Logger *)a1);
    cva::Logger::logInCategory();
    signed int v4 = *(_DWORD *)a1;
    int v5 = (_DWORD *)*a2;
    if (*(_DWORD *)a1 != *(_DWORD *)*a2 || (int v6 = *(_DWORD *)(a1 + 4), v6 != v5[1])) {
      cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false> const>,cva::Matrix<double,0u,0u,false>>();
    }
  }
  int v7 = v6 * v4;
  int v8 = *(_DWORD *)(a1 + 16);
  if (v6 * v4) {
    unint64_t v9 = *(double **)(a1 + 8);
  }
  else {
    unint64_t v9 = 0;
  }
  uint64_t v10 = *(void *)(a1 + 8) + 8 * (v8 * v6);
  if (v7) {
    BOOL v11 = (double *)v10;
  }
  else {
    BOOL v11 = 0;
  }
  if (v9 != v11)
  {
    unint64_t v12 = 0;
    unint64_t v13 = 0;
    int v14 = 0;
    uint64_t v15 = a2[1];
    unsigned int v16 = v8 - v4;
    unsigned int v17 = v4;
    do
    {
      if (v17 <= v13 || v5[1] <= HIDWORD(v13)) {
        cva::detail::assignNoAlias<cva::Matrix<double,0u,0u,false>,cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixTransposeExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const> const>,0u,1u>,cva::detail::MulOp>>();
      }
      unsigned int v18 = v5[5] + HIDWORD(v13);
      uint64_t v19 = **((void **)v5 + 1);
      unsigned int v20 = *(_DWORD *)(v19 + 16);
      if (v20 <= v18 || (unsigned int v21 = v5[4] + v13, v21 >= *(_DWORD *)(v19 + 20))) {
        cva::detail::assignNoAlias<cva::Matrix<double,0u,0u,false>,cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixTransposeExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const> const>,0u,1u>,cva::detail::MulOp>>();
      }
      double v22 = *(double *)(*(void *)v19 + 8 * (v18 + v20 * v21));
      double *v9 = v22
          * cva::MatrixRepeatExpr<cva::MatrixTransposeExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const> const>,0u,1u>::operator()(v15, v12, HIDWORD(v12));
      uint64_t v23 = (v13 + 1);
      unsigned int v17 = *v5;
      if (*v5 <= (int)v23) {
        unint64_t v13 = (v13 & 0xFFFFFFFF00000000) + 0x100000000;
      }
      else {
        unint64_t v13 = v13 & 0xFFFFFFFF00000000 | v23;
      }
      uint64_t v24 = (v12 + 1);
      if (*(_DWORD *)(v15 + 4) <= (int)v24) {
        unint64_t v12 = (v12 & 0xFFFFFFFF00000000) + 0x100000000;
      }
      else {
        unint64_t v12 = v12 & 0xFFFFFFFF00000000 | v24;
      }
      if (v14 + 1 >= v4) {
        unsigned int v25 = v16;
      }
      else {
        unsigned int v25 = 0;
      }
      v9 += v25 + 1;
      if (v14 + 1 < v4) {
        ++v14;
      }
      else {
        int v14 = 0;
      }
    }
    while (v9 != v11);
  }
}

double cva::MatrixRepeatExpr<cva::MatrixTransposeExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const> const>,0u,1u>::operator()(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (*(_DWORD *)(a1 + 4) <= a2 || *(_DWORD *)(a1 + 8) <= a3) {
    cva::detail::assignNoAlias<cva::Matrix<double,0u,0u,false>,cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixTransposeExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const> const>,0u,1u>,cva::detail::MulOp>>();
  }
  char v3 = ***(double ****)(a1 + 16);
  unsigned int v4 = *(_DWORD *)(*(void *)v3 + 4);
  if (**(_DWORD **)v3 < v4) {
    unsigned int v4 = **(_DWORD **)v3;
  }
  unsigned int v5 = a3 % v4;
  uint64_t v6 = *(void *)(*(void *)v3 + 8);
  if (*(_DWORD *)(v6 + 16) <= v5) {
    cva::detail::assignNoAlias<cva::Matrix<double,0u,0u,false>,cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixTransposeExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const> const>,0u,1u>,cva::detail::MulOp>>();
  }
  double v7 = *(double *)(*(void *)v6 + 8 * v5);
  double v8 = fabs(v7);
  double result = 1.0 / v7;
  if (v8 < v3[1]) {
    return 0.0;
  }
  return result;
}

void cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::Matrix<double,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false> const>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = **(void **)(a2 + 16);
  if (*(void *)v4 == *(void *)a1 || *(void *)v5 == *(void *)a1)
  {
    uint64_t v8 = (*(_DWORD *)(v5 + 16) * *(_DWORD *)(v4 + 16));
    int v14 = 0;
    uint64_t v15 = 0;
    cva::MatrixData<double,0ul,0ul,false>::allocate(&v14, v8);
    int v9 = *(_DWORD *)(**(void **)(a2 + 16) + 16);
    LODWORD(v16) = *(_DWORD *)(*(void *)(a2 + 8) + 16);
    HIDWORD(v16) = v9;
    cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::Matrix<double,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false> const>>(&v14, a2);
    uint64_t v10 = *(void **)a1;
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v12 = v15;
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v12;
    int v14 = v10;
    uint64_t v15 = v11;
    *(void *)(a1 + 16) = v16;
    uint64_t v16 = 0;
    free(v10);
  }
  else
  {
    int v6 = *(_DWORD *)(a1 + 16);
    if (v6 != *(_DWORD *)(v4 + 16) || (int v7 = *(_DWORD *)(a1 + 20), v7 != *(_DWORD *)(v5 + 16)))
    {
      cva::Logger::instance((cva::Logger *)a1);
      cva::Logger::logInCategory();
      int v6 = *(_DWORD *)(a1 + 16);
      uint64_t v4 = *(void *)(a2 + 8);
      if (v6 != *(_DWORD *)(v4 + 16)
        || (uint64_t v5 = **(void **)(a2 + 16), v7 = *(_DWORD *)(v5 + 16), *(_DWORD *)(a1 + 20) != v7))
      {
        cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false> const>,cva::Matrix<double,0u,0u,false>>();
      }
    }
    if (*(_DWORD *)(v4 + 20) * v6 && v7 * *(_DWORD *)(v5 + 20)) {
      cva::VecLib<double>::gemm();
    }
    if (v6 * v7)
    {
      unint64_t v13 = *(void **)a1;
      bzero(v13, 8 * (v6 * v7));
    }
  }
}

void sub_22F1782C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

void cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::MatrixMultExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>>>,cva::Matrix<double,0u,0u,false>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  if (*(void *)v4 == *(void *)a1)
  {
    uint64_t v12 = (*(_DWORD *)(v4 + 20) * *(_DWORD *)(***(void ***)(a2 + 8) + 4));
    unsigned int v17 = 0;
    uint64_t v18 = 0;
    cva::MatrixData<double,0ul,0ul,false>::allocate(&v17, v12);
    int v13 = *(_DWORD *)(*(void *)(a2 + 16) + 20);
    LODWORD(v19) = *(_DWORD *)(***(void ***)(a2 + 8) + 4);
    HIDWORD(v19) = v13;
    cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::MatrixMultExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>>>,cva::Matrix<double,0u,0u,false>>(&v17, a2);
    int v14 = *(void **)a1;
    uint64_t v15 = *(void *)(a1 + 8);
    uint64_t v16 = v18;
    *(void *)a1 = v17;
    *(void *)(a1 + 8) = v16;
    unsigned int v17 = v14;
    uint64_t v18 = v15;
    *(void *)(a1 + 16) = v19;
    uint64_t v19 = 0;
    free(v14);
  }
  else
  {
    int v5 = *(_DWORD *)(a1 + 16);
    int v6 = *(void ***)(a2 + 8);
    if (v5 != *(_DWORD *)(**v6 + 4) || (int v7 = *(_DWORD *)(a1 + 20), v7 != *(_DWORD *)(v4 + 20)))
    {
      cva::Logger::instance((cva::Logger *)a1);
      cva::Logger::logInCategory();
      int v5 = *(_DWORD *)(a1 + 16);
      int v6 = *(void ***)(a2 + 8);
      if (v5 != *(_DWORD *)(**v6 + 4)
        || (uint64_t v4 = *(void *)(a2 + 16), v7 = *(_DWORD *)(v4 + 20), *(_DWORD *)(a1 + 20) != v7))
      {
        cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false> const>,cva::Matrix<double,0u,0u,false>>();
      }
    }
    uint64_t v8 = (*(_DWORD *)(*v6[1] + 16) * v5);
    if (v8 && v7 * *(_DWORD *)(v4 + 16))
    {
      unsigned int v17 = 0;
      uint64_t v18 = 0;
      cva::MatrixData<double,0ul,0ul,false>::allocate(&v17, v8);
      int v9 = *(_DWORD *)(*v6[1] + 16);
      LODWORD(v19) = *(_DWORD *)(**v6 + 4);
      HIDWORD(v19) = v9;
      cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>>>((cva::Logger *)&v17, (uint64_t)v6);
      cva::VecLib<double>::gemm();
    }
    unsigned int v10 = v5 * v7;
    if (v10)
    {
      uint64_t v11 = *(void **)a1;
      bzero(v11, 8 * v10);
    }
  }
}

void sub_22F178500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

uint64_t cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>>>(cva::Logger *a1, uint64_t a2)
{
  unsigned int v4 = *((_DWORD *)a1 + 4);
  int v5 = *(unsigned int ***)a2;
  int v6 = **(unsigned int ***)a2;
  if (v4 != v6[1] || (v7 = *((_DWORD *)a1 + 5), uint64_t v8 = *(uint64_t **)(a2 + 8), v9 = *v8, v7 != *(_DWORD *)(*v8 + 16)))
  {
    cva::Logger::instance(a1);
    cva::Logger::logInCategory();
    unsigned int v4 = *((_DWORD *)a1 + 4);
    int v5 = *(unsigned int ***)a2;
    int v6 = **(unsigned int ***)a2;
    if (v4 != v6[1] || (uint64_t v8 = *(uint64_t **)(a2 + 8), v9 = *v8, v7 = *(_DWORD *)(*v8 + 16), *((_DWORD *)a1 + 5) != v7)) {
      cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false> const>,cva::Matrix<double,0u,0u,false>>();
    }
  }
  v35 = v5;
  unsigned int v10 = *v6;
  if (*v6 >= v4) {
    unsigned int v10 = v4;
  }
  if (v10 > *(_DWORD *)(v9 + 20)) {
    cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>>,cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>>>();
  }
  v31[0] = v10;
  v31[1] = v7;
  uint64_t v32 = v8;
  uint64_t v33 = 0;
  unsigned int v28 = v10;
  int v29 = v7;
  int v30 = &v35;
  v34[0] = v31;
  v34[1] = &v27;
  uint64_t v11 = *(void *)a1;
  v23[0] = v10;
  v23[1] = v7;
  uint64_t v24 = v11;
  unsigned int v25 = v4;
  int v26 = 0;
  uint64_t result = cva::MatrixRef<double,0u,0u,false>::operator=<cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const>,1u,0u>,cva::detail::MulOp>>((uint64_t)v23, v34);
  uint64_t v13 = *(unsigned int *)(*v8 + 20);
  unsigned int v14 = *((_DWORD *)a1 + 4);
  if (v14 > v13)
  {
    int v15 = v14 - v13;
    int v16 = *((_DWORD *)a1 + 5);
    int v17 = v16 * (v14 - v13);
    BOOL v18 = v17 == 0;
    if (v17) {
      uint64_t v19 = (void *)(*(void *)a1 + 8 * v13);
    }
    else {
      uint64_t v19 = 0;
    }
    uint64_t v20 = *(void *)a1 + 8 * v13 + 8 * v16 * v14;
    if (v18) {
      uint64_t v20 = 0;
    }
    if (v19 != (void *)v20)
    {
      int v21 = 0;
      do
      {
        *uint64_t v19 = 0;
        if (v21 + 1 >= v15) {
          unsigned int v22 = v13;
        }
        else {
          unsigned int v22 = 0;
        }
        v19 += v22 + 1;
        if (v21 + 1 < v15) {
          ++v21;
        }
        else {
          int v21 = 0;
        }
      }
      while (v19 != (void *)v20);
    }
  }
  return result;
}

uint64_t cva::MatrixRef<double,0u,0u,false>::operator=<cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const>,1u,0u>,cva::detail::MulOp>>(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 8) - 8 * *(unsigned int *)(a1 + 20);
  if (***(void ***)(*a2 + 8) == v4 || **(void **)(***(void ***)(a2[1] + 16) + 8) == v4)
  {
    int v5 = *(_DWORD *)a1;
    int v6 = *(_DWORD *)(a1 + 4);
    v21[0] = 0;
    v21[1] = 0;
    cva::MatrixData<double,0ul,0ul,false>::allocate(v21, (v6 * v5));
    int v22 = v5;
    int v23 = v6;
    cva::detail::assignNoAlias<cva::Matrix<double,0u,0u,false>,cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const>,1u,0u>,cva::detail::MulOp>>((cva::Logger *)v21, a2);
    int v8 = *(_DWORD *)a1;
    if (*(_DWORD *)a1 != v22 || (int v9 = *(_DWORD *)(a1 + 4), v9 != v23))
    {
      cva::Logger::instance(v7);
      cva::Logger::logInCategory();
      int v8 = *(_DWORD *)a1;
      if (*(_DWORD *)a1 != v22 || (int v9 = *(_DWORD *)(a1 + 4), v9 != v23)) {
        __assert_rtn("assert_equal_size", "matrixfun.h", 163, "(lhs.rows() == rhs.rows() && lhs.columns() == rhs.columns()) || cva::detail::assertMessage(\"Matrix sizes are not compatible!\")");
      }
    }
    int v10 = *(_DWORD *)(a1 + 16);
    BOOL v11 = v8 * v9 == 0;
    if (v8 * v9) {
      uint64_t v12 = *(void **)(a1 + 8);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = *(void *)(a1 + 8) + 8 * (v10 * v9);
    if (v11) {
      uint64_t v13 = 0;
    }
    unsigned int v14 = v21[0];
    if (v12 != (void *)v13)
    {
      int v15 = 0;
      unsigned int v16 = v10 - v8;
      int v17 = (uint64_t *)v21[0];
      do
      {
        uint64_t v18 = *v17++;
        *uint64_t v12 = v18;
        if (v15 + 1 >= v8) {
          unsigned int v19 = v16;
        }
        else {
          unsigned int v19 = 0;
        }
        v12 += v19 + 1;
        if (v15 + 1 < v8) {
          ++v15;
        }
        else {
          int v15 = 0;
        }
      }
      while (v12 != (void *)v13);
    }
    free(v14);
  }
  else
  {
    cva::detail::assignNoAlias<cva::MatrixRef<double,0u,0u,false>,cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const>,1u,0u>,cva::detail::MulOp>>(a1, a2);
  }
  return a1;
}

void sub_22F178864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

void cva::detail::assignNoAlias<cva::Matrix<double,0u,0u,false>,cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const>,1u,0u>,cva::detail::MulOp>>(cva::Logger *a1, void *a2)
{
  unsigned int v4 = *((_DWORD *)a1 + 4);
  int v5 = (_DWORD *)*a2;
  if (v4 != *(_DWORD *)*a2 || (int v6 = *((_DWORD *)a1 + 5), v6 != v5[1]))
  {
    cva::Logger::instance(a1);
    cva::Logger::logInCategory();
    unsigned int v4 = *((_DWORD *)a1 + 4);
    int v5 = (_DWORD *)*a2;
    if (v4 != *(_DWORD *)*a2 || (int v6 = *((_DWORD *)a1 + 5), v6 != v5[1])) {
      cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false> const>,cva::Matrix<double,0u,0u,false>>();
    }
  }
  uint64_t v7 = v6 * v4;
  if (v7)
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0;
    uint64_t v10 = a2[1];
    BOOL v11 = *(double **)a1;
    uint64_t v12 = 8 * v7;
    do
    {
      if (v4 <= v9 || v5[1] <= HIDWORD(v9)) {
        cva::detail::assignNoAlias<cva::Matrix<double,0u,0u,false>,cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixTransposeExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const> const>,0u,1u>,cva::detail::MulOp>>();
      }
      unsigned int v13 = v5[5] + HIDWORD(v9);
      uint64_t v14 = **((void **)v5 + 1);
      unsigned int v15 = *(_DWORD *)(v14 + 16);
      if (v15 <= v13 || (unsigned int v16 = v5[4] + v9, v16 >= *(_DWORD *)(v14 + 20))) {
        cva::detail::assignNoAlias<cva::Matrix<double,0u,0u,false>,cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixTransposeExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const> const>,0u,1u>,cva::detail::MulOp>>();
      }
      double v17 = *(double *)(*(void *)v14 + 8 * (v13 + v15 * v16));
      *v11++ = v17
             * cva::MatrixRepeatExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const>,1u,0u>::operator()(v10, v8, HIDWORD(v8));
      uint64_t v18 = (v9 + 1);
      unsigned int v4 = *v5;
      if (*v5 <= (int)v18) {
        unint64_t v9 = (v9 & 0xFFFFFFFF00000000) + 0x100000000;
      }
      else {
        unint64_t v9 = v9 & 0xFFFFFFFF00000000 | v18;
      }
      uint64_t v19 = (v8 + 1);
      if (*(_DWORD *)(v10 + 4) <= (int)v19) {
        unint64_t v8 = (v8 & 0xFFFFFFFF00000000) + 0x100000000;
      }
      else {
        unint64_t v8 = v8 & 0xFFFFFFFF00000000 | v19;
      }
      v12 -= 8;
    }
    while (v12);
  }
}

void cva::detail::assignNoAlias<cva::MatrixRef<double,0u,0u,false>,cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const>,1u,0u>,cva::detail::MulOp>>(uint64_t a1, void *a2)
{
  signed int v4 = *(_DWORD *)a1;
  int v5 = (_DWORD *)*a2;
  if (*(_DWORD *)a1 != *(_DWORD *)*a2 || (int v6 = *(_DWORD *)(a1 + 4), v6 != v5[1]))
  {
    cva::Logger::instance((cva::Logger *)a1);
    cva::Logger::logInCategory();
    signed int v4 = *(_DWORD *)a1;
    int v5 = (_DWORD *)*a2;
    if (*(_DWORD *)a1 != *(_DWORD *)*a2 || (int v6 = *(_DWORD *)(a1 + 4), v6 != v5[1])) {
      cva::assign<false,false,cva::Matrix<double,0u,0u,false>,cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false> const>,cva::Matrix<double,0u,0u,false>>();
    }
  }
  int v7 = v6 * v4;
  int v8 = *(_DWORD *)(a1 + 16);
  if (v6 * v4) {
    unint64_t v9 = *(double **)(a1 + 8);
  }
  else {
    unint64_t v9 = 0;
  }
  uint64_t v10 = *(void *)(a1 + 8) + 8 * (v8 * v6);
  if (v7) {
    BOOL v11 = (double *)v10;
  }
  else {
    BOOL v11 = 0;
  }
  if (v9 != v11)
  {
    unint64_t v12 = 0;
    unint64_t v13 = 0;
    int v14 = 0;
    uint64_t v15 = a2[1];
    unsigned int v16 = v8 - v4;
    unsigned int v17 = v4;
    do
    {
      if (v17 <= v13 || v5[1] <= HIDWORD(v13)) {
        cva::detail::assignNoAlias<cva::Matrix<double,0u,0u,false>,cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixTransposeExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const> const>,0u,1u>,cva::detail::MulOp>>();
      }
      unsigned int v18 = v5[5] + HIDWORD(v13);
      uint64_t v19 = **((void **)v5 + 1);
      unsigned int v20 = *(_DWORD *)(v19 + 16);
      if (v20 <= v18 || (unsigned int v21 = v5[4] + v13, v21 >= *(_DWORD *)(v19 + 20))) {
        cva::detail::assignNoAlias<cva::Matrix<double,0u,0u,false>,cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixTransposeExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const> const>,0u,1u>,cva::detail::MulOp>>();
      }
      double v22 = *(double *)(*(void *)v19 + 8 * (v18 + v20 * v21));
      double *v9 = v22
          * cva::MatrixRepeatExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const>,1u,0u>::operator()(v15, v12, HIDWORD(v12));
      uint64_t v23 = (v13 + 1);
      unsigned int v17 = *v5;
      if (*v5 <= (int)v23) {
        unint64_t v13 = (v13 & 0xFFFFFFFF00000000) + 0x100000000;
      }
      else {
        unint64_t v13 = v13 & 0xFFFFFFFF00000000 | v23;
      }
      uint64_t v24 = (v12 + 1);
      if (*(_DWORD *)(v15 + 4) <= (int)v24) {
        unint64_t v12 = (v12 & 0xFFFFFFFF00000000) + 0x100000000;
      }
      else {
        unint64_t v12 = v12 & 0xFFFFFFFF00000000 | v24;
      }
      if (v14 + 1 >= v4) {
        unsigned int v25 = v16;
      }
      else {
        unsigned int v25 = 0;
      }
      v9 += v25 + 1;
      if (v14 + 1 < v4) {
        ++v14;
      }
      else {
        int v14 = 0;
      }
    }
    while (v9 != v11);
  }
}

double cva::MatrixRepeatExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const>,1u,0u>::operator()(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (*(_DWORD *)(a1 + 4) <= a2 || *(_DWORD *)(a1 + 8) <= a3) {
    cva::detail::assignNoAlias<cva::Matrix<double,0u,0u,false>,cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixTransposeExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const> const>,0u,1u>,cva::detail::MulOp>>();
  }
  char v3 = **(double ***)(a1 + 16);
  unsigned int v4 = *(_DWORD *)(*(void *)v3 + 4);
  if (**(_DWORD **)v3 < v4) {
    unsigned int v4 = **(_DWORD **)v3;
  }
  unsigned int v5 = a2 % v4;
  uint64_t v6 = *(void *)(*(void *)v3 + 8);
  if (*(_DWORD *)(v6 + 16) <= v5) {
    cva::detail::assignNoAlias<cva::Matrix<double,0u,0u,false>,cva::MatrixBinaryExpr<cva::MatrixSubExpr<cva::MatrixTransposeExpr<cva::Matrix<double,0u,0u,false>> const,0u,0u>,cva::MatrixRepeatExpr<cva::MatrixTransposeExpr<cva::MatrixDiagonalExpr<cva::DiagonalMatrixInverseExpr<cva::VectorAsDiagonalExpr<cva::Matrix<double,0u,1u,false>,0u,0u>> const> const>,0u,1u>,cva::detail::MulOp>>();
  }
  double v7 = *(double *)(*(void *)v6 + 8 * v5);
  double v8 = fabs(v7);
  double result = 1.0 / v7;
  if (v8 < v3[1]) {
    return 0.0;
  }
  return result;
}

uint64_t zip<A, B, C, D>(_:_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v67 = a3;
  uint64_t v68 = a4;
  uint64_t v64 = a2;
  uint64_t v62 = a1;
  uint64_t v69 = a9;
  uint64_t v73 = a8;
  uint64_t v66 = *(void *)(a8 - 8);
  uint64_t v72 = a12;
  uint64_t v74 = a13;
  ((void (*)(void))MEMORY[0x270FA5388])();
  v65 = (char *)v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = ((uint64_t (*)(void))MEMORY[0x270FA5388])();
  v63 = (char *)v47 - v18;
  uint64_t v61 = *(void *)(a7 - 8);
  MEMORY[0x270FA5388](v17);
  v60 = (char *)v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = a7;
  uint64_t v70 = swift_getAssociatedTypeWitness();
  uint64_t v20 = MEMORY[0x270FA5388](v70);
  v59 = (char *)v47 - v21;
  uint64_t v58 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](v20);
  v57 = (char *)v47 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = a11;
  uint64_t v23 = swift_getAssociatedTypeWitness();
  uint64_t v24 = MEMORY[0x270FA5388](v23);
  v56 = (char *)v47 - v25;
  uint64_t v55 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](v24);
  char v27 = (char *)v47 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47[1] = a10;
  v47[0] = a5;
  uint64_t v28 = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](v28);
  uint64_t v48 = (char *)v47 - v29;
  uint64_t v53 = v28;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v52 = AssociatedConformanceWitness;
  uint64_t v31 = a6;
  uint64_t v32 = v23;
  uint64_t v54 = v23;
  uint64_t v33 = swift_getAssociatedConformanceWitness();
  uint64_t v51 = v33;
  uint64_t v34 = v70;
  uint64_t v35 = swift_getAssociatedConformanceWitness();
  uint64_t v36 = AssociatedTypeWitness;
  uint64_t v37 = swift_getAssociatedConformanceWitness();
  uint64_t v75 = v28;
  uint64_t v76 = v32;
  uint64_t v77 = v34;
  uint64_t v78 = v36;
  uint64_t v79 = AssociatedConformanceWitness;
  uint64_t v80 = v33;
  uint64_t v81 = v35;
  uint64_t v82 = v37;
  uint64_t v38 = type metadata accessor for Zip4Generator();
  MEMORY[0x270FA5388](v38);
  v40 = (char *)v47 - v39;
  (*(void (**)(char *, uint64_t, void))(v55 + 16))(v27, v62, v47[0]);
  uint64_t v41 = (uint64_t)v48;
  sub_22F223BE8();
  (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v57, v64, v31);
  uint64_t v42 = (uint64_t)v56;
  sub_22F223BE8();
  (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v60, v67, v49);
  uint64_t v43 = (uint64_t)v59;
  sub_22F223BE8();
  (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v65, v68, v73);
  uint64_t v44 = (uint64_t)v63;
  sub_22F223BE8();
  Zip4Generator.init(_:_:_:_:)(v41, v42, v43, v44, v53, v54, v70, AssociatedTypeWitness, (uint64_t)v40);
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x230FB2F80](v40, v38, WitnessTable);
}

uint64_t type metadata accessor for Zip4Generator()
{
  return swift_getGenericMetadata();
}

uint64_t Zip4Generator.init(_:_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v18 = (int *)type metadata accessor for Zip4Generator();
  *(void *)(a9 + v18[24]) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(a9, a1, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(a9 + v18[21], a2, a6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a7 - 8) + 32))(a9 + v18[22], a3, a7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a8 - 8) + 32))(a9 + v18[23], a4, a8);
}

uint64_t variable initialization expression of Zip4Generator.index()
{
  return 0;
}

uint64_t Zip4Generator.next()@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v75 = a2;
  uint64_t v3 = a1[5];
  uint64_t v59 = a1[9];
  uint64_t v58 = v3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v54 = sub_22F2241F8();
  uint64_t v53 = *(void *)(v54 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v54);
  v60 = (char *)&v52 - v6;
  uint64_t v78 = AssociatedTypeWitness;
  uint64_t v68 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v55 = (char *)&v52 - v7;
  uint64_t v8 = a1[8];
  uint64_t v63 = a1[4];
  uint64_t v64 = v8;
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v57 = sub_22F2241F8();
  uint64_t v56 = *(void *)(v57 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v57);
  v65 = (char *)&v52 - v11;
  uint64_t v77 = v9;
  uint64_t v66 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v67 = (char *)&v52 - v12;
  uint64_t v13 = a1[7];
  v71 = (char *)a1[3];
  uint64_t v72 = v13;
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v62 = sub_22F2241F8();
  uint64_t v61 = *(void (***)(char *, uint64_t))(v62 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v62);
  uint64_t v73 = (char *)&v52 - v16;
  uint64_t v76 = v14;
  uint64_t v70 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v69 = (char *)&v52 - v17;
  uint64_t v18 = swift_getAssociatedTypeWitness();
  uint64_t v19 = sub_22F2241F8();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v52 - v22;
  MEMORY[0x270FA5388](v21);
  uint64_t v25 = (char *)&v52 - v24;
  uint64_t v27 = v26;
  sub_22F224208();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v23, 1, v18) == 1)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v19);
    uint64_t v29 = v77;
    uint64_t v28 = v78;
    uint64_t v30 = v76;
  }
  else
  {
    uint64_t v31 = *(void (***)(char *, uint64_t))(v27 + 32);
    ((void (*)(char *, char *, uint64_t))v31)(v25, v23, v18);
    uint64_t v32 = v73;
    sub_22F224208();
    uint64_t v33 = v70;
    uint64_t v34 = v32;
    uint64_t v30 = v76;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v34, 1, v76) == 1)
    {
      (*(void (**)(char *, uint64_t))(v27 + 8))(v25, v18);
      v61[1](v73, v62);
      uint64_t v29 = v77;
      uint64_t v28 = v78;
    }
    else
    {
      uint64_t v61 = v31;
      uint64_t v62 = v27;
      v71 = v25;
      uint64_t v72 = v18;
      uint64_t v35 = v69;
      uint64_t v36 = v73;
      uint64_t v73 = *(char **)(v33 + 32);
      ((void (*)(char *, char *, uint64_t))v73)(v69, v36, v30);
      uint64_t v37 = v65;
      sub_22F224208();
      uint64_t v38 = v37;
      uint64_t v39 = v66;
      v40 = v37;
      uint64_t v29 = v77;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v40, 1, v77) == 1)
      {
        (*(void (**)(char *, uint64_t))(v33 + 8))(v35, v30);
        uint64_t v18 = v72;
        (*(void (**)(char *, uint64_t))(v62 + 8))(v71, v72);
        (*(void (**)(char *, uint64_t))(v56 + 8))(v38, v57);
        uint64_t v28 = v78;
      }
      else
      {
        v65 = *(char **)(v39 + 32);
        ((void (*)(char *, char *, uint64_t))v65)(v67, v38, v29);
        uint64_t v41 = v60;
        sub_22F224208();
        uint64_t v42 = v68;
        uint64_t v28 = v78;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v41, 1, v78) != 1)
        {
          v45 = *(void (**)(char *, char *, uint64_t))(v42 + 32);
          uint64_t v68 = v42 + 32;
          v46 = v55;
          v45(v55, v41, v28);
          uint64_t v47 = v72;
          uint64_t v79 = v72;
          uint64_t v80 = v30;
          uint64_t v81 = v29;
          uint64_t v82 = v28;
          TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
          uint64_t v49 = v75;
          uint64_t v50 = v75 + TupleTypeMetadata[12];
          uint64_t v51 = v75 + TupleTypeMetadata[16];
          uint64_t v74 = (char *)(v75 + TupleTypeMetadata[20]);
          ((void (*)(uint64_t, char *, uint64_t))v61)(v75, v71, v47);
          ((void (*)(uint64_t, char *, uint64_t))v73)(v50, v69, v76);
          ((void (*)(uint64_t, char *, uint64_t))v65)(v51, v67, v77);
          v45(v74, v46, v78);
          return (*(uint64_t (**)(uint64_t, void, uint64_t, int *))(*((void *)TupleTypeMetadata - 1) + 56))(v49, 0, 1, TupleTypeMetadata);
        }
        (*(void (**)(char *, uint64_t))(v39 + 8))(v67, v29);
        (*(void (**)(char *, uint64_t))(v33 + 8))(v69, v30);
        uint64_t v18 = v72;
        (*(void (**)(char *, uint64_t))(v62 + 8))(v71, v72);
        (*(void (**)(char *, uint64_t))(v53 + 8))(v41, v54);
      }
    }
  }
  uint64_t v79 = v18;
  uint64_t v80 = v30;
  uint64_t v81 = v29;
  uint64_t v82 = v28;
  uint64_t v43 = swift_getTupleTypeMetadata();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v75, 1, 1, v43);
}

void *variable initialization expression of ADTransformer.texCoordsPortrait()
{
  return &unk_26E291518;
}

void *variable initialization expression of ADTransformer.texCoordsLandscape()
{
  return &unk_26E291558;
}

uint64_t variable initialization expression of ADTransformer.$__lazy_storage_$_cameraToADScale()
{
  return 0;
}

uint64_t variable initialization expression of KernelSimpleSobel.textureCache()
{
  return 0;
}

uint64_t variable initialization expression of Clamped.value@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, 1, 1, a1);
}

uint64_t variable initialization expression of MetalNode.children()
{
  return MEMORY[0x263F8EE78];
}

uint64_t variable initialization expression of MetalNode.shouldUpdate()
{
  return 1;
}

uint64_t variable initialization expression of MetalNode.shouldDraw()
{
  return 1;
}

uint64_t variable initialization expression of MetalNode.isActive()
{
  return 1;
}

uint64_t variable initialization expression of DebugLocalNode.pointCloudSize()
{
  return 0;
}

uint64_t variable initialization expression of EdgePlanesMetrics.bestPlaneType()
{
  return 7;
}

uint64_t variable initialization expression of EdgePlanesMetrics.otherPlaneType()
{
  return 7;
}

uint64_t variable initialization expression of WorldEdge.p1()
{
  return 0;
}

uint64_t variable initialization expression of WorldEdge.p2()
{
  return 0;
}

uint64_t variable initialization expression of WorldEdge.type()
{
  return 4;
}

double variable initialization expression of WorldEdge.typeConfidence()
{
  return 0.0;
}

uint64_t variable initialization expression of WorldEdge.connectedSurfaces()
{
  return MEMORY[0x263F8EE78];
}

uint64_t variable initialization expression of WorldEdge.edgePlanesMetrics()
{
  return 196608;
}

uint64_t variable initialization expression of WorldPerson.timeSuggested@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_22F2237F8();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  return v3(a1, 1, 1, v2);
}

uint64_t variable initialization expression of UncertainValue._confidence@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v22 = a3;
  uint64_t v23 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v6 = *(void *)(a1 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  uint64_t v12 = (char *)&v20 - v11;
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  uint64_t v21 = (char *)&v20 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v20 - v15;
  sub_22F224578();
  sub_22F224578();
  swift_getAssociatedConformanceWitness();
  sub_22F224788();
  sub_22F224728();
  uint64_t v17 = (uint64_t)v21;
  sub_22F224558();
  uint64_t v18 = *(void (**)(char *, uint64_t))(v6 + 8);
  v18(v9, a1);
  v18(v12, a1);
  return Clamped.init(min:max:)((uint64_t)v16, v17, a1, v22);
}

_DWORD *variable initialization expression of Synchronized.lock()
{
  double result = (_DWORD *)swift_slowAlloc();
  *double result = 0;
  return result;
}

uint64_t variable initialization expression of OverlayMetalView.blendingEnabled()
{
  return 0;
}

uint64_t variable initialization expression of OverlayMetalView.depthProcessor()
{
  return 0;
}

uint64_t variable initialization expression of OverlayMetalView.adProcessor()
{
  return 0;
}

uint64_t variable initialization expression of OverlayMetalView.adWindow()
{
  return 0;
}

uint64_t variable initialization expression of OverlayMetalView.scene()
{
  return 0;
}

uint64_t variable initialization expression of OverlayMetalView.demoModes()
{
  return 7;
}

uint64_t variable initialization expression of OverlayMetalView.currentDemoMode()
{
  return 0;
}

uint64_t variable initialization expression of OverlayMetalView.swipeUpRecognizer()
{
  return 0;
}

uint64_t variable initialization expression of OverlayMetalView.swipeDownRecognizer()
{
  return 0;
}

uint64_t variable initialization expression of Histogram.data(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270F9CFB0](a1, MEMORY[0x263F8D5C8], a2);
}

uint64_t _s17MeasureFoundation9HistogramV3maxx3key_Sf5valuetSgvpfi_0@<X0>(uint64_t a1@<X8>)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 56);
  return v3(a1, 1, 1, TupleTypeMetadata2);
}

double variable initialization expression of Histogram.sumOfValues()
{
  return 0.0;
}

double variable initialization expression of Transformer.cameraDepthUnprojection()
{
  return -7.7031728e-27;
}

double variable initialization expression of Transformer.$__lazy_storage_$_clipToView@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(unsigned char *)(a1 + 48) = 1;
  return result;
}

uint64_t variable initialization expression of ImageProcessor.bytesPerPixel()
{
  return 4;
}

uint64_t variable initialization expression of ImageProcessor.bitsPerComponent()
{
  return 8;
}

uint64_t variable initialization expression of ImageProcessor.concurrentSlices()
{
  return 4;
}

uint64_t variable initialization expression of ImageProcessor.bitmapInfo()
{
  return 8194;
}

unint64_t variable initialization expression of ImageProcessor.bufferOptions()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_268694560);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22F2265A0;
  *(void *)(inited + 32) = sub_22F223AC8();
  *(void *)(inited + 40) = v1;
  *(void *)(inited + 48) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithBool_, 1);
  *(void *)(inited + 56) = sub_22F223AC8();
  *(void *)(inited + 64) = v2;
  *(void *)(inited + 72) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithBool_, 1);
  return sub_22F185B64(inited);
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t variable initialization expression of ImageProcessor.lockFlags()
{
  return 0;
}

uint64_t variable initialization expression of ImageProcessor.$__lazy_storage_$_viewportSize()
{
  return 0;
}

uint64_t variable initialization expression of ImageProcessor.$__lazy_storage_$_viewportCenter()
{
  return 0;
}

uint64_t variable initialization expression of ImageProcessor.outputBuffer()
{
  return 0;
}

uint64_t variable initialization expression of ImageProcessor.$__lazy_storage_$_scaledPixels()
{
  return 0;
}

float variable initialization expression of LocalPlaneDetector.defaultPlaneRadius()
{
  return 0.05;
}

uint64_t variable initialization expression of LocalPlaneDetector.$__lazy_storage_$_defaultPlaneExtent()
{
  return 0;
}

float variable initialization expression of LocalPlaneDetector.worldSnapAngleRange()
{
  return 0.087266;
}

uint64_t variable initialization expression of LocalPlaneDetector.$__lazy_storage_$_screenCenter()
{
  return 0;
}

uint64_t variable initialization expression of LocalPlaneDetector.planeSolver()
{
  return sub_22F1D16AC();
}

uint64_t variable initialization expression of LocalPlaneDetector.pointCloud()
{
  return MEMORY[0x263F8EE78];
}

uint64_t variable initialization expression of LocalPlaneDetector.bestPointCloud()
{
  return MEMORY[0x263F8EE78];
}

uint64_t variable initialization expression of LocalPlaneDetector.vergenceAngleCosines()
{
  return MEMORY[0x263F8EE78];
}

float variable initialization expression of LocalPlaneDetector.minJasperConfidence()
{
  return 0.7;
}

float variable initialization expression of LocalPlaneDetector.lerpingRate()
{
  return 0.3;
}

float variable initialization expression of LocalPlaneDetector.centerCorrectionThreshold()
{
  return 0.0001;
}

float variable initialization expression of LocalPlaneDetector.angleThreshold()
{
  return 0.087266;
}

float variable initialization expression of LocalPlaneDetector.cameraTranslationThreshold()
{
  return 0.04;
}

float variable initialization expression of LocalPlaneDetector.cameraRotationThreshold()
{
  return 0.98481;
}

double variable initialization expression of LocalPlaneDetector.localPlane@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(unsigned char *)(a1 + 112) = 1;
  return result;
}

uint64_t variable initialization expression of LocalPlaneDetector.isLocalPlaneInvalidated()
{
  return 1;
}

uint64_t variable initialization expression of LocalPlaneDetector.$__lazy_storage_$_debugOptions()
{
  return 0;
}

double variable initialization expression of LocalPlaneDetector.debugger@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t variable initialization expression of DebugADNode.kShowRGBTexture()
{
  return 0;
}

uint64_t variable initialization expression of DebugADNode.$__lazy_storage_$_imagePlaneVertexBuffer()
{
  return 1;
}

float variable initialization expression of DebugWorldNode.kCameraRotationThreshold()
{
  return 0.99939;
}

uint64_t variable initialization expression of DebugWorldNode.capturedImageTextureY()
{
  return 0;
}

uint64_t variable initialization expression of DebugWorldNode.capturedImageTextureCbCr()
{
  return 0;
}

uint64_t variable initialization expression of DebugWorldNode.worldPointsCurrentIndex()
{
  return 0;
}

uint64_t variable initialization expression of DebugWorldNode.worldPointsNum()
{
  return 0;
}

uint64_t variable initialization expression of MeanShiftPointFilter.minInliners()
{
  return 3;
}

float variable initialization expression of MeanShiftPointFilter.errorPerMeterSquared()
{
  return 0.0001;
}

uint64_t variable initialization expression of MeanShiftPointFilter.weightsEnabled()
{
  return 1;
}

uint64_t variable initialization expression of MeanShiftPointFilter.matlabDebugEnabled()
{
  return 0;
}

uint64_t variable initialization expression of MeasureObject.id()
{
  uint64_t v0 = sub_22F223848();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s17MeasureFoundation11WorldAnchorC10identifier0B04UUIDVvpfi_0();
  uint64_t v4 = sub_22F223808();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

uint64_t variable initialization expression of MeasureObject._state()
{
  return 0;
}

uint64_t variable initialization expression of MeasureObject.$__lazy_storage_$_suggest()
{
  return 0;
}

uint64_t variable initialization expression of MeasureObject.$__lazy_storage_$_isConfirmable()
{
  return 0;
}

uint64_t variable initialization expression of MeasureObject.$__lazy_storage_$_canHandleTouch()
{
  return 0;
}

uint64_t variable initialization expression of MeasureObject.$__lazy_storage_$_confirm()
{
  return 0;
}

uint64_t variable initialization expression of MeasureObject.$__lazy_storage_$_prepareToclear()
{
  return 0;
}

uint64_t variable initialization expression of MeasureObject.$__lazy_storage_$_reconfirm()
{
  return 0;
}

uint64_t variable initialization expression of MeasureObject.$__lazy_storage_$_clear()
{
  return 0;
}

uint64_t variable initialization expression of MeasureObject.$__lazy_storage_$_percentVisible()
{
  return 0;
}

uint64_t variable initialization expression of MeasureObject.$__lazy_storage_$_distanceFromReticle()
{
  return 0;
}

uint64_t variable initialization expression of MeasureObject.$__lazy_storage_$_distanceFromCameraPlane()
{
  return 0;
}

uint64_t variable initialization expression of MeasureObject.$__lazy_storage_$_importanceWeight()
{
  return 0;
}

float variable initialization expression of DepthProcessor.minConfidence()
{
  return 0.9;
}

float variable initialization expression of DepthProcessor.longRange()
{
  return 200.0;
}

float variable initialization expression of DepthProcessor.shortRange()
{
  return 300.0;
}

float variable initialization expression of DepthProcessor.quadTreeCellSize()
{
  return 50.0;
}

uint64_t variable initialization expression of DepthProcessor.orientation()
{
  return 1;
}

uint64_t variable initialization expression of DepthProcessor.allJasperPoints()
{
  return MEMORY[0x263F8EE78];
}

uint64_t variable initialization expression of DepthProcessor.numPointsInMap()
{
  return 0;
}

uint64_t variable initialization expression of DepthProcessor.lastPointCloud()
{
  return 0;
}

uint64_t variable initialization expression of DepthProcessor.$__lazy_storage_$_transformer()
{
  return 0;
}

uint64_t variable initialization expression of DepthProcessor.adProcessor()
{
  return 0;
}

uint64_t variable initialization expression of DepthProcessor.lock()
{
  return 0;
}

uint64_t variable initialization expression of DepthProcessor.numKeyframes()
{
  return 5;
}

float variable initialization expression of DepthProcessor.minCameraTranslation()
{
  return 0.000025;
}

uint64_t variable initialization expression of DepthProcessor.debugOptions()
{
  if (qword_268694430 != -1) {
    swift_once();
  }
  return qword_26869BC80;
}

uint64_t variable initialization expression of OverlayMetalScene.kLocalPointCloudSize()
{
  return 1152;
}

uint64_t variable initialization expression of OverlayMetalScene.kWorldPointCloudSize()
{
  return 100000;
}

uint64_t variable initialization expression of OverlayMetalScene.$__lazy_storage_$_localNode()
{
  return 0;
}

uint64_t variable initialization expression of OverlayMetalScene.$__lazy_storage_$_worldNode()
{
  return 0;
}

uint64_t variable initialization expression of OverlayMetalScene.$__lazy_storage_$_adNode()
{
  return 0;
}

uint64_t variable initialization expression of OverlayMetalScene.orientation()
{
  return 0;
}

uint64_t variable initialization expression of OverlayMetalScene.uniformsBuffer()
{
  return 0;
}

uint64_t variable initialization expression of ObjectPool.lock()
{
  return 0;
}

uint64_t variable initialization expression of PatchTracker.imageScaleFlags()
{
  return 0;
}

uint64_t variable initialization expression of PatchTracker.$__lazy_storage_$_viewportSize()
{
  return 0;
}

uint64_t variable initialization expression of PatchTracker.$__lazy_storage_$_scaledImageSize()
{
  return 0;
}

uint64_t variable initialization expression of PatchTracker.$__lazy_storage_$_imageScaleTempBuffer()
{
  return 0;
}

uint64_t variable initialization expression of PatchTracker.$__lazy_storage_$_frameImageBufferPool()
{
  return 0;
}

uint64_t variable initialization expression of PatchTracker.patchSizeInPixels()
{
  return 11;
}

uint64_t variable initialization expression of PatchTracker.minMatchingPatches()
{
  return 5;
}

uint64_t variable initialization expression of PatchTracker.maxMatchingPatches()
{
  return 8;
}

uint64_t variable initialization expression of PatchTracker.precomputePatchWeights()
{
  return 0;
}

uint64_t variable initialization expression of PatchTracker.patchPlainDetection()
{
  return 1;
}

float variable initialization expression of PatchTracker.patchPlainWeightThreshold()
{
  return 4.0;
}

uint64_t variable initialization expression of PatchTracker.$__lazy_storage_$_patchSize()
{
  return 0;
}

uint64_t variable initialization expression of PatchTracker.$__lazy_storage_$_patchHalfSize()
{
  return 0;
}

uint64_t variable initialization expression of PatchTracker.$__lazy_storage_$_patchUnscaledSize()
{
  return 0;
}

uint64_t variable initialization expression of PatchTracker.$__lazy_storage_$_patchKernel()
{
  return 0;
}

double variable initialization expression of PatchTracker.$__lazy_storage_$_embossBuffer@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 32) = 1;
  return result;
}

uint64_t variable initialization expression of PatchTracker.$__lazy_storage_$_convolveTempBuffer()
{
  return 0;
}

uint64_t variable initialization expression of PatchTracker.$__lazy_storage_$_embossTempBuffer()
{
  return 0;
}

uint64_t variable initialization expression of PatchTracker.numKeyframes()
{
  return 20;
}

uint64_t variable initialization expression of PatchTracker.cameraAnchorEnabled()
{
  return 0;
}

float variable initialization expression of PatchTracker.minCameraTranslation()
{
  return 0.0001;
}

double variable initialization expression of PatchTracker.maxCameraFramerate()
{
  return 60.0;
}

float variable initialization expression of PatchTracker.camerasConsiderAlignedCos()
{
  return 0.96593;
}

float variable initialization expression of PatchTracker.minMatchingThreshold()
{
  return 0.8;
}

float variable initialization expression of PatchTracker.maxMatchingThreshold()
{
  return 0.99;
}

uint64_t variable initialization expression of PatchTracker.maxMatchingSimilarities()
{
  return 3;
}

float variable initialization expression of PatchTracker.bestTriangulatedAngle()
{
  return 0.17453;
}

float variable initialization expression of PatchTracker.minTriangulatedAngleCos()
{
  return 0.99939;
}

float variable initialization expression of PatchTracker.maxTriangulatedAngleCos()
{
  return 0.70711;
}

float variable initialization expression of PatchTracker.maxTriangulatedRaysErrorCos()
{
  return 0.99966;
}

float variable initialization expression of PatchTracker.rayRange()
{
  return 0.15;
}

uint64_t variable initialization expression of PatchTracker.rangeEstimationEnabled()
{
  return 1;
}

float variable initialization expression of PatchTracker.rangeEstimationBiases()
{
  return -0.025;
}

uint64_t variable initialization expression of PatchTracker.checkCameraMotion()
{
  return 1;
}

float variable initialization expression of PatchTracker.maxMotionAcceleration()
{
  return 0.1;
}

uint64_t variable initialization expression of PatchTracker.pointFilterEnabled()
{
  return 1;
}

float variable initialization expression of PatchTracker.pointFilterErrorThreshold()
{
  return 0.5;
}

uint64_t variable initialization expression of PatchTracker.$__lazy_storage_$_pointFilter()
{
  return 0;
}

uint64_t variable initialization expression of PatchTracker.interpolationEnabled()
{
  return 1;
}

float variable initialization expression of PatchTracker.interpolationCameraMaxTranslation()
{
  return 0.0001;
}

float variable initialization expression of PatchTracker.interpolationCameraMaxRotation()
{
  return 0.17453;
}

float variable initialization expression of PatchTracker.deltaRateToConsiderNoise()
{
  return 0.5;
}

uint64_t variable initialization expression of PatchTracker.extrapolationEnabled()
{
  return 1;
}

uint64_t variable initialization expression of PatchTracker.depthMap()
{
  return MEMORY[0x263F8EE80];
}

double variable initialization expression of PatchTracker.depthCellExpiration()
{
  return 0.25;
}

uint64_t variable initialization expression of PatchTracker.depthMinAccumulation()
{
  return 3;
}

uint64_t variable initialization expression of PatchTracker.threePointMatching()
{
  return 0;
}

double variable initialization expression of PatchTracker.threePointOffsets()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_268694568);
  uint64_t v0 = (_OWORD *)swift_allocObject();
  v0[1] = xmmword_22F2265B0;
  v0[2] = xmmword_22F2265C0;
  double result = -15.0;
  __asm { FMOV            V1.2D, #15.0 }
  v0[3] = xmmword_22F2265D0;
  v0[4] = _Q1;
  return result;
}

uint64_t variable initialization expression of PatchTracker.lastKeyframes()
{
  return MEMORY[0x263F8EE78];
}

uint64_t variable initialization expression of PatchTracker.currentKeyframe()
{
  return 0;
}

uint64_t variable initialization expression of PatchTracker.frameIndex()
{
  return 0;
}

uint64_t variable initialization expression of PatchTracker.linePoints()
{
  return MEMORY[0x263F8EE78];
}

uint64_t variable initialization expression of PatchTracker.orientation()
{
  return 1;
}

uint64_t variable initialization expression of PatchTracker.debugOptions()
{
  if (qword_268694448 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return static PatchTracker.DebugOptions.default;
}

double variable initialization expression of PatchTracker.debugger@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t variable initialization expression of PatchTracker.Keyframe.patchTracker()
{
  return 0;
}

double variable initialization expression of PatchTracker.Keyframe.$__lazy_storage_$_weightedImage@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_WORD *)(a1 + 32) = 256;
  return result;
}

uint64_t variable initialization expression of PatchTracker.Patch.$__lazy_storage_$_triangulationMatrix()
{
  return 0;
}

float variable initialization expression of PlaneSelector.planeSelectionDistanceMargin()
{
  return 0.03;
}

float variable initialization expression of PlaneSelector.localPlaneMaxUncertaintyThreshold()
{
  return 0.015;
}

float variable initialization expression of PlaneSelector.hitTestEpsilonSquared()
{
  return 0.000001;
}

float variable initialization expression of PlaneSelector.hitTestEpsilonThreshold()
{
  return 0.0005;
}

float variable initialization expression of PlaneSelector.mlNormalEquivalenceThreshold()
{
  return 0.866;
}

uint64_t variable initialization expression of PlaneSelector.mlLabelKernelRadius()
{
  return 5;
}

uint64_t variable initialization expression of PlaneSelector.adConfidenceToBeFirstChoice()
{
  return 2;
}

uint64_t variable initialization expression of PlaneSelector.adMinConfidence()
{
  return 1;
}

float variable initialization expression of PlaneSelector.edgeHitTestDistanceSquaredThreshold()
{
  return 0.02;
}

float variable initialization expression of PlaneSelector.edgeHitTestCosAngleThreshold()
{
  return 0.95;
}

float variable initialization expression of PlaneSelector.previousPlaneConfidenceDropPerMeter()
{
  return 1.0;
}

float variable initialization expression of PlaneSelector.maxSpeculativeDistanceFromLabeledPlane()
{
  return 0.25;
}

float variable initialization expression of PlaneSelector.maxSpeculativeHitTestDistance()
{
  return 30.0;
}

unint64_t variable initialization expression of PlaneSelector.patchTrackingMode()
{
  id v0 = objc_msgSend(self, sel_standardUserDefaults);
  uint64_t v1 = (void *)sub_22F223A98();
  id v2 = objc_msgSend(v0, sel_integerForKey_, v1);

  unint64_t result = _s17MeasureFoundation18RecordReplayOptionO8rawValueACSgSi_tcfC_0((unint64_t)v2);
  if (result == 5) {
    __break(1u);
  }
  return result;
}

unint64_t variable initialization expression of PlaneSelector.adTestMode()
{
  id v0 = objc_msgSend(self, sel_standardUserDefaults);
  uint64_t v1 = (void *)sub_22F223A98();
  id v2 = objc_msgSend(v0, sel_integerForKey_, v1);

  unint64_t result = _s17MeasureFoundation0A12UnitDetailedO8rawValueACSgSi_tcfC_0((unint64_t)v2);
  if (result == 4) {
    __break(1u);
  }
  return result;
}

float variable initialization expression of PlaneSelector.planeSwitchingThreshold()
{
  return 0.0001;
}

uint64_t variable initialization expression of PlaneSelector.lastLabel()
{
  return 33;
}

float variable initialization expression of PlaneSelector.kernelRadius()
{
  return 20.0;
}

float variable initialization expression of PlaneSelector.kernelAngleStep()
{
  return 0.7854;
}

float variable initialization expression of PlaneSelector.kernelHitsDistanceThreshold()
{
  return 0.000625;
}

uint64_t variable initialization expression of PlaneSelector.$__lazy_storage_$_kernelSamples()
{
  return 0;
}

uint64_t variable initialization expression of PlaneSelector.$__lazy_storage_$_debugOptions()
{
  return 0;
}

double variable initialization expression of PlaneSelector.debugger@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

double variable initialization expression of PlaneSelector._planeSelectionStats@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t _s17MeasureFoundation11ExtremitiesV3topxSgvpfi_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, 1, 1, a1);
}

uint64_t variable initialization expression of PlaneSolver.minInliners()
{
  return 4;
}

uint64_t variable initialization expression of PlaneSolver.maxInliners()
{
  return 50;
}

uint64_t variable initialization expression of PlaneSolver.considerUncertainties()
{
  return 1;
}

uint64_t variable initialization expression of PlaneSolver.minQualifiedInliners()
{
  return 3;
}

uint64_t variable initialization expression of PlaneSolver.maxQualifiedInliners()
{
  return 15;
}

float variable initialization expression of PlaneSolver.errorThreshold()
{
  return 0.000025;
}

float variable initialization expression of PlaneSolver.maxAngleFromCameraForward()
{
  return 1.309;
}

uint64_t variable initialization expression of PlaneSolver.iterationRange()
{
  return 50;
}

float variable initialization expression of PlaneSolver.disparityErrorEstimate()
{
  return 3.0;
}

uint64_t variable initialization expression of PlaneSolver.numPoints()
{
  return 0;
}

void *variable initialization expression of PlaneSolver.indices()
{
  double result = (void *)sub_22F223D48();
  result[2] = 3;
  result[5] = 0;
  result[6] = 0;
  result[4] = 0;
  return result;
}

uint64_t variable initialization expression of PlaneSolver.cameraPosition()
{
  return 0;
}

uint64_t variable initialization expression of PlaneSolver.cameraForward()
{
  return 0;
}

uint64_t variable initialization expression of PlaneSolver.cameraUp()
{
  return 0;
}

uint64_t variable initialization expression of PlaneSolver.pointCloudWithNoise()
{
  return MEMORY[0x263F8EE78];
}

uint64_t variable initialization expression of PlaneSolver.$__lazy_storage_$_ransac()
{
  return 0;
}

uint64_t variable initialization expression of Ransac.solver()
{
  return 0;
}

uint64_t variable initialization expression of Ransac.randomInliners()
{
  swift_getAssociatedTypeWitness();
  return sub_22F223D38();
}

uint64_t variable initialization expression of Ransac.randomInlinerIndices()
{
  return MEMORY[0x263F8EE78];
}

uint64_t variable initialization expression of RingBuffer.indexOffset()
{
  return 0;
}

uint64_t variable initialization expression of MetalScene.rootNode()
{
  type metadata accessor for MetalNode();
  uint64_t result = swift_allocObject();
  uint64_t v1 = MEMORY[0x263F8EE78];
  *(_WORD *)(result + 32) = 257;
  *(unsigned char *)(result + 34) = 1;
  uint64_t v2 = qword_268694990;
  *(void *)(result + 16) = qword_268694990;
  *(void *)(result + 24) = v1;
  if (v2 == -1) {
    __break(1u);
  }
  else {
    qword_268694990 = v2 + 1;
  }
  return result;
}

uint64_t variable initialization expression of MetalScene.currentRenderPassDescriptor()
{
  return 0;
}

uint64_t variable initialization expression of MetalScene.isUpdatedOnce()
{
  return 0;
}

float variable initialization expression of MeasureCore.labelingIdealCoverage()
{
  return 0.3;
}

float variable initialization expression of MeasureCore.localPlaneMaxExtrapolatedSize()
{
  return 0.8;
}

float variable initialization expression of MeasureCore.distanceThresholdForNormalInference()
{
  return 0.0064;
}

unint64_t variable initialization expression of MeasureCore.anchorLabels()
{
  return sub_22F185414(MEMORY[0x263F8EE78]);
}

unint64_t variable initialization expression of MeasureCore.labelAnchors()
{
  return sub_22F186BE8(MEMORY[0x263F8EE78]);
}

_DWORD *variable initialization expression of MeasureCore.allPlanesLock()
{
  uint64_t result = (_DWORD *)swift_slowAlloc();
  *uint64_t result = 0;
  return result;
}

unint64_t variable initialization expression of MeasureCore._allPlaneAnchors()
{
  return sub_22F185618(MEMORY[0x263F8EE78]);
}

id variable initialization expression of MeasureCore.drawDebugPlanes()
{
  return sub_22F17B270();
}

uint64_t variable initialization expression of MeasureCore.segmentationProcessor()
{
  return 0;
}

uint64_t variable initialization expression of MeasureCore.localPlaneDetector()
{
  return 0;
}

uint64_t variable initialization expression of MeasureCore.patchTracker()
{
  return 0;
}

uint64_t variable initialization expression of MeasureCore.planeSelector()
{
  return 0;
}

uint64_t variable initialization expression of MeasureCore.depthProcessor()
{
  return 0;
}

uint64_t variable initialization expression of MeasureCore.sceneView()
{
  return 0;
}

uint64_t variable initialization expression of MeasureCore.isPlaneSelectionEnabled()
{
  return 1;
}

uint64_t variable initialization expression of MeasureCore.shouldUpdateSemantics()
{
  return 1;
}

uint64_t variable initialization expression of SegmentationProcessor.delegate()
{
  return 0;
}

uint64_t variable initialization expression of SegmentationProcessor.labelingSampleCount()
{
  return 200;
}

uint64_t variable initialization expression of SegmentationProcessor.$__lazy_storage_$_debugOptions()
{
  return 0;
}

id variable initialization expression of SegmentationProcessor.lock()
{
  id v0 = objc_allocWithZone(MEMORY[0x263F08AE0]);
  return objc_msgSend(v0, sel_init);
}

uint64_t variable initialization expression of SegmentationProcessor.lastResult()
{
  return 0;
}

uint64_t variable initialization expression of SegmentationProcessor.$__lazy_storage_$_sampleScreenPoints()
{
  return 0;
}

uint64_t variable initialization expression of SegmentationProcessor.lastPlaneLabelHistogram()
{
  return 0;
}

uint64_t variable initialization expression of SegmentationProcessor.isLastPlaneLabelHistogramInvalidated()
{
  return 1;
}

double variable initialization expression of SegmentationProcessor.debugger@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t variable initialization expression of SegmentationProcessor.lastAcceleration()
{
  return 0;
}

double variable initialization expression of SegmentationProcessor.lastSinOffsetAngle()
{
  return 0.0;
}

float variable initialization expression of SegmentationProcessor.lastCosOffsetAngle()
{
  return 1.0;
}

uint64_t variable initialization expression of SegmentationResult.lockFlags()
{
  return 0;
}

uint64_t variable initialization expression of ADProcessor.shouldUse128BitInput()
{
  return 0;
}

uint64_t variable initialization expression of ADProcessor.$__lazy_storage_$_adInputTextureFormat()
{
  return 0;
}

uint64_t variable initialization expression of ADProcessor.$__lazy_storage_$_adInputPixelFormat()
{
  return 0x100000000;
}

uint64_t variable initialization expression of ADProcessor.$__lazy_storage_$_adConfig()
{
  return 0;
}

uint64_t variable initialization expression of ADProcessor.$__lazy_storage_$_transformer()
{
  return 0;
}

uint64_t variable initialization expression of ADProcessor.$__lazy_storage_$_textureCache()
{
  return 0;
}

uint64_t variable initialization expression of ADProcessor.$__lazy_storage_$_mpsYCbCrToRGB()
{
  return 0;
}

uint64_t variable initialization expression of ADProcessor.$__lazy_storage_$_capturedTexture()
{
  return 1;
}

uint64_t variable initialization expression of ADProcessor.$__lazy_storage_$_capturedPixelBuffer()
{
  return 1;
}

uint64_t variable initialization expression of ADProcessor.$__lazy_storage_$_outputDepthTexture()
{
  return 0;
}

uint64_t variable initialization expression of ADProcessor.$__lazy_storage_$_outputConfidenceTexture()
{
  return 0;
}

uint64_t variable initialization expression of ADProcessor.$__lazy_storage_$_outputPersonTexture()
{
  return 0;
}

uint64_t variable initialization expression of ADProcessor.lastDepthOutput()
{
  return 0;
}

uint64_t variable initialization expression of ADProcessor.lastConfidenceOutput()
{
  return 0;
}

uint64_t variable initialization expression of ADProcessor.lastPersonOutput()
{
  return 0;
}

uint64_t variable initialization expression of ADProcessor.lastDepthAddress()
{
  return 0;
}

uint64_t variable initialization expression of ADProcessor.lastConfidenceAddress()
{
  return 0;
}

uint64_t variable initialization expression of ADProcessor.lastPersonAddress()
{
  return 0;
}

double variable initialization expression of ADProcessor.cameraToWorld@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 64) = 1;
  return result;
}

uint64_t variable initialization expression of ADProcessor.isPreProcessed()
{
  return 0;
}

id variable initialization expression of ADProcessor.isGuidedFilterEnabled()
{
  return sub_22F17B270();
}

id sub_22F17B270()
{
  id v0 = objc_msgSend(self, sel_standardUserDefaults);
  uint64_t v1 = (void *)sub_22F223A98();
  id v2 = objc_msgSend(v0, sel_BOOLForKey_, v1);

  return v2;
}

uint64_t variable initialization expression of ADProcessor.isNoiseReductionEnabled()
{
  return 0;
}

uint64_t variable initialization expression of ADProcessor.$__lazy_storage_$_guidedFilter()
{
  return 0;
}

uint64_t variable initialization expression of ADProcessor.guidedDepthTexture()
{
  return 0;
}

uint64_t variable initialization expression of ADProcessor.device()
{
  if (qword_268694378 != -1) {
    swift_once();
  }
  return swift_unknownObjectRetain();
}

uint64_t variable initialization expression of ADProcessor.lock()
{
  return 0;
}

uint64_t variable initialization expression of OptionalSmoothedValue.nilCount()
{
  return 0;
}

uint64_t variable initialization expression of Zip3Generator.index()
{
  return 0;
}

uint64_t variable initialization expression of SurfaceTexture.pixelFormat()
{
  return 80;
}

uint64_t variable initialization expression of SurfaceTexture.bitsPerComponent()
{
  return 8;
}

uint64_t variable initialization expression of SurfaceTexture.width()
{
  return 0;
}

uint64_t variable initialization expression of SurfaceTexture.height()
{
  return 0;
}

uint64_t variable initialization expression of SurfaceTexture.texture()
{
  return 0;
}

uint64_t variable initialization expression of SurfaceTexture.isLocking()
{
  return 0;
}

uint64_t variable initialization expression of SurfaceTexture.backgroundColor()
{
  return 0xFFFFFFFFLL;
}

uint64_t variable initialization expression of SurfaceTexture.color()
{
  return 4278190335;
}

uint64_t variable initialization expression of SurfaceTexture.cursorX()
{
  return 0;
}

uint64_t variable initialization expression of SurfaceTexture.cursorY()
{
  return 0;
}

uint64_t variable initialization expression of SurfaceTexture.bytesPerRow()
{
  return 0;
}

uint64_t variable initialization expression of SurfaceTexture.pixelsPerRow()
{
  return 0;
}

uint64_t variable initialization expression of SurfaceTexture.pixel32s()
{
  return 0;
}

uint64_t variable initialization expression of SurfaceTexture.pixelBytes()
{
  return 0;
}

uint64_t variable initialization expression of SurfaceTexture.bytesPerPixel()
{
  return 4;
}

uint64_t variable initialization expression of SurfaceTexture.pixelsNum()
{
  return 0;
}

uint64_t variable initialization expression of SurfaceTexture.ioSurface()
{
  return 0;
}

uint64_t variable initialization expression of WeakRef.value()
{
  return 0;
}

uint64_t variable initialization expression of HashableWeakRef.value()
{
  return 0;
}

uint64_t variable initialization expression of WorldAnchor._plane()
{
  return 0;
}

float variable initialization expression of WorldAnchor.maxTranslationForPlaneUpgrade()
{
  return 0.003;
}

float variable initialization expression of WorldAnchor.minDotForPlaneUpgrade()
{
  return 0.99619;
}

uint64_t variable initialization expression of WorldAnchor._viewAnchor()
{
  return 0;
}

uint64_t variable initialization expression of WorldAnchor.updateHandler()
{
  return 0;
}

uint64_t variable initialization expression of WorldLine.lineType()
{
  return 1;
}

uint64_t variable initialization expression of WorldLine.isOnVerticalGuide()
{
  return 0;
}

uint64_t variable initialization expression of WorldLine.identifiersOfObjectsComposedInto()
{
  return 0;
}

uint64_t variable initialization expression of WorldLine.isALineMeasurement()
{
  return 0;
}

double variable initialization expression of WorldLine.meanFPSDuringPlacement()
{
  return -1.0;
}

double variable initialization expression of GuideSegments.primary@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 32) = 1;
  return result;
}

uint64_t variable initialization expression of WorldLineGuide.backingPlanes()
{
  return 0;
}

uint64_t variable initialization expression of WorldLineGuide.anchorState()
{
  return 0;
}

double variable initialization expression of WorldLineGuide.segments@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 32) = 1;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(unsigned char *)(a1 + 80) = 1;
  return result;
}

float variable initialization expression of WorldPlane.planeOrientationEquivalenceThreshold()
{
  return 0.996;
}

float variable initialization expression of WorldPlane.planeTranslationEquivalenceThreshold()
{
  return 0.025;
}

float variable initialization expression of WorldPlane.fallbackPlaneConfidence()
{
  return 0.8;
}

float variable initialization expression of WorldPlane.previousPlaneConfidence()
{
  return 0.9;
}

float variable initialization expression of WorldPlane.maxDistanceForPlaneAnchorUpdate()
{
  return 2.0;
}

float variable initialization expression of WorldPlane.minViewpointCosAngleForPlaneAnchorUpdate()
{
  return 0.866;
}

float variable initialization expression of WorldPlaneHitTestResult.defaultHitConfidenceMultiplier()
{
  return 0.5;
}

float variable initialization expression of WorldPlaneHitTestResult.inferredPlaneHitConfidenceMultiplier()
{
  return 0.75;
}

float variable initialization expression of WorldPlaneHitTestResult.planeEdgeUncertaintyThreshold()
{
  return 0.06;
}

float variable initialization expression of WorldPlaneHitTestResult.planeEdgeMinimumFactor()
{
  return 0.2;
}

uint64_t variable initialization expression of WorldPlaneHitTestResult.$__lazy_storage_$_localPosition()
{
  return 0;
}

double variable initialization expression of WorldPlaneHitTestResult.confidence()
{
  return 0.0;
}

uint64_t variable initialization expression of WorldPlaneContext.isFirstPoint()
{
  return 0;
}

uint64_t variable initialization expression of WorldPlaneContext.isMovingPoint()
{
  return 0;
}

double variable initialization expression of WorldPlaneContext.lastHitTestResult@<D0>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 112) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t variable initialization expression of WorldPlaneContext.fallbackPlane()
{
  return 0;
}

uint64_t variable initialization expression of WorldPoint.lines()
{
  return MEMORY[0x263F8EE78];
}

uint64_t variable initialization expression of WorldPoint.parentLine()
{
  return 0;
}

uint64_t variable initialization expression of WorldPoint.snapLine()
{
  return 0;
}

uint64_t variable initialization expression of WorldPoint.partOfRectangleId()
{
  return 0;
}

uint64_t variable initialization expression of WorldPoint.delegate()
{
  return 0;
}

uint64_t variable initialization expression of WorldPoint.triangulationAnchor()
{
  return 0;
}

uint64_t variable initialization expression of WorldRectangleData.points()
{
  return 0;
}

uint64_t variable initialization expression of WorldRectangleData.rawPoints()
{
  return 0;
}

uint64_t variable initialization expression of WorldRectangleData.anchors()
{
  return 0;
}

uint64_t variable initialization expression of WorldRectangleData.baseVectors()
{
  return 0;
}

uint64_t variable initialization expression of WorldRectangleData.forward()
{
  return 0;
}

uint64_t variable initialization expression of WorldRectangleData.size()
{
  return 0;
}

uint64_t variable initialization expression of WorldRectangleData.timestamp()
{
  return 0;
}

uint64_t variable initialization expression of WorldRectangle.edges()
{
  return MEMORY[0x263F8EE78];
}

uint64_t variable initialization expression of WorldRectangle.splitters()
{
  return MEMORY[0x263F8EE78];
}

uint64_t variable initialization expression of WorldRectangle.data@<X0>(uint64_t a1@<X8>)
{
  sub_22F17C028((uint64_t)v3);
  return sub_22F17C080((uint64_t)v3, a1);
}

uint64_t variable initialization expression of WorldRectangle.rectangleDataBuffer()
{
  return 10;
}

double variable initialization expression of WorldRectangle.expirationTime()
{
  return 2.0;
}

uint64_t variable initialization expression of WorldRectangle.expirationTimer()
{
  return 0;
}

uint64_t variable initialization expression of WorldRectangle.expirationAction()
{
  return 0;
}

uint64_t variable initialization expression of NSUserDefaults._DefaultsStore.actions()
{
  return MEMORY[0x263F8EE80];
}

uint64_t variable initialization expression of WorldRectangleGuide.secondEdge()
{
  return 0;
}

uint64_t sub_22F17B6E0(uint64_t a1, uint64_t a2)
{
  return sub_22F17B964(a1, a2, MEMORY[0x263F07B58]);
}

void *sub_22F17B70C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

BOOL sub_22F17B720(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_22F17B750(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_22F17B764(void *result)
{
  *v1 &= *result;
  return result;
}

uint64_t sub_22F17B778()
{
  return sub_22F223888();
}

uint64_t sub_22F17B7C4()
{
  return sub_22F223878();
}

uint64_t sub_22F17B81C()
{
  return sub_22F224818();
}

uint64_t sub_22F17B884(uint64_t a1, uint64_t a2)
{
  return sub_22F17B964(a1, a2, MEMORY[0x263F8D308]);
}

uint64_t sub_22F17B89C()
{
  sub_22F223AC8();
  sub_22F223B28();
  return swift_bridgeObjectRelease();
}

uint64_t sub_22F17B8F0()
{
  sub_22F223AC8();
  sub_22F2247E8();
  sub_22F223B28();
  uint64_t v0 = sub_22F224818();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_22F17B964(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = sub_22F223AC8();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_22F17B9A8(uint64_t a1, id *a2)
{
  uint64_t result = sub_22F223AA8();
  *a2 = 0;
  return result;
}

uint64_t sub_22F17BA20(uint64_t a1, id *a2)
{
  char v3 = sub_22F223AB8();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_22F17BAA0@<X0>(uint64_t *a1@<X8>)
{
  sub_22F223AC8();
  uint64_t v2 = sub_22F223A98();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

void sub_22F17BAE4(void *a1@<X8>)
{
  *a1 = *v1;
}

void *sub_22F17BAF4@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_22F17BB00()
{
  swift_getWitnessTable();
  return sub_22F223868();
}

void *sub_22F17BB6C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void sub_22F17BB7C(void *a1@<X8>)
{
  *a1 = 0;
}

void *sub_22F17BB84@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_22F17BB98@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

void *sub_22F17BBAC@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_22F17BBD8@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *sub_22F17BBFC(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_22F17BC10@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_22F17BC24(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_22F17BC38(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_22F17BC4C(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_22F17BC60()
{
  return *v0 == 0;
}

uint64_t sub_22F17BC70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x270F9E7D8](a1, a4, a2, a5, a3);
}

void *sub_22F17BC88(void *result)
{
  *v1 &= ~*result;
  return result;
}

uint64_t sub_22F17BC9C()
{
  uint64_t v0 = sub_22F223AC8();
  uint64_t v2 = v1;
  if (v0 == sub_22F223AC8() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = sub_22F224738();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_22F17BD2C(uint64_t a1)
{
  uint64_t v2 = sub_22F17D830((unint64_t *)&qword_268694790, type metadata accessor for FileAttributeKey);
  uint64_t v3 = sub_22F17D830(&qword_268694798, type metadata accessor for FileAttributeKey);
  uint64_t v4 = MEMORY[0x263F8D320];
  return MEMORY[0x270F9F1A8](a1, v2, v3, v4);
}

uint64_t sub_22F17BDE8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_22F1B7F94();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_22F17BE28@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_22F223AC8();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_22F17BE54(uint64_t a1)
{
  uint64_t v2 = sub_22F17D830(&qword_268694740, type metadata accessor for URLResourceKey);
  uint64_t v3 = sub_22F17D830(&qword_268694748, type metadata accessor for URLResourceKey);
  uint64_t v4 = MEMORY[0x263F8D320];
  return MEMORY[0x270F9F1A8](a1, v2, v3, v4);
}

uint64_t sub_22F17BF10@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_22F223A98();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_22F17BF58(uint64_t a1)
{
  uint64_t v2 = sub_22F17D830(&qword_2686947A0, type metadata accessor for NSKeyValueChangeKey);
  uint64_t v3 = sub_22F17D830(&qword_2686947A8, type metadata accessor for NSKeyValueChangeKey);
  uint64_t v4 = MEMORY[0x263F8D320];
  return MEMORY[0x270F9F1A8](a1, v2, v3, v4);
}

BOOL sub_22F17C014(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_22F17C028(uint64_t a1)
{
  *(void *)a1 = 1;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t result = a1 + 8;
  *(_OWORD *)(result + 256) = 0u;
  *(_OWORD *)(result + 272) = 0u;
  return result;
}

uint64_t sub_22F17C080(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(qword_268694570);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_22F17C0E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 88);
}

uint64_t sub_22F17C0F0()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        uint64_t result = swift_checkMetadataState();
        if (v4 <= 0x3F)
        {
          swift_initStructMetadata();
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_22F17C24C(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v4 = *(void *)(a3[2] - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = *(void *)(a3[3] - 8);
  uint64_t v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = v5 + v7;
  uint64_t v9 = (v5 + v7) & ~v7;
  uint64_t v10 = *(void *)(v6 + 64);
  uint64_t v11 = *(void *)(a3[4] - 8);
  uint64_t v12 = *(_DWORD *)(v11 + 80);
  uint64_t v13 = v10 + v12;
  uint64_t v14 = (v10 + v12 + v9) & ~v12;
  uint64_t v15 = *(void *)(v11 + 64);
  uint64_t v16 = *(void *)(a3[5] - 8);
  uint64_t v17 = *(_DWORD *)(v16 + 80);
  uint64_t v18 = v15 + v17;
  uint64_t v19 = *(void *)(v16 + 64) + 7;
  unint64_t v20 = ((v19 + ((v15 + v17 + v14) & ~v17)) & 0xFFFFFFFFFFFFFFF8) + 8;
  unsigned int v21 = v7 | *(_DWORD *)(v4 + 80) & 0xF8 | v12 | v17;
  if (v21 > 7
    || ((*(_DWORD *)(v11 + 80) | *(_DWORD *)(v6 + 80) | *(_DWORD *)(v16 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) != 0
    || v20 > 0x18)
  {
    uint64_t v24 = *a2;
    *a1 = *a2;
    uint64_t v30 = (uint64_t *)(v24 + (((v21 | 7) + 16) & ~(unint64_t)(v21 | 7)));
    swift_retain();
  }
  else
  {
    uint64_t v25 = ~v7;
    uint64_t v37 = a3[4];
    uint64_t v38 = ~v12;
    uint64_t v39 = ~v17;
    uint64_t v40 = a3[5];
    uint64_t v36 = a3[3];
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
    uint64_t v41 = a1;
    unint64_t v27 = ((unint64_t)a1 + v8) & v25;
    unint64_t v28 = ((unint64_t)a2 + v8) & v25;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(v27, v28, v36);
    uint64_t v29 = v27 + v13;
    uint64_t v30 = v41;
    uint64_t v31 = v29 & v38;
    unint64_t v32 = (v28 + v13) & v38;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v11 + 16))(v29 & v38, v32, v37);
    uint64_t v33 = (v31 + v18) & v39;
    unint64_t v34 = (v32 + v18) & v39;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v16 + 16))(v33, v34, v40);
    *(void *)((v19 + v33) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v19 + v34) & 0xFFFFFFFFFFFFFFF8);
  }
  return v30;
}

uint64_t sub_22F17C528(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a2[2] - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(v4 + 56) + a1;
  uint64_t v6 = *(void *)(a2[3] - 8);
  uint64_t v7 = v6 + 8;
  unint64_t v8 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v8);
  uint64_t v9 = *(void *)(v7 + 56);
  uint64_t v10 = *(void *)(a2[4] - 8);
  uint64_t v11 = v10 + 8;
  unint64_t v12 = (v8 + v9 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  (*(void (**)(unint64_t))(v10 + 8))(v12);
  uint64_t v13 = *(void *)(a2[5] - 8);
  uint64_t v14 = *(uint64_t (**)(unint64_t))(v13 + 8);
  unint64_t v15 = (v12 + *(void *)(v11 + 56) + *(unsigned __int8 *)(v13 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  return v14(v15);
}

uint64_t sub_22F17C654(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 16;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 48) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v11, v12);
  uint64_t v13 = *(void *)(v8 + 48);
  uint64_t v14 = *(void *)(a3[4] - 8);
  uint64_t v15 = v14 + 16;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = v13 + v16;
  uint64_t v18 = (v17 + v11) & ~v16;
  uint64_t v19 = (v17 + v12) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v14 + 16))(v18, v19);
  uint64_t v20 = *(void *)(v15 + 48);
  uint64_t v21 = *(void *)(a3[5] - 8);
  uint64_t v22 = v21 + 16;
  uint64_t v23 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v24 = v20 + v23;
  uint64_t v25 = (v24 + v18) & ~v23;
  uint64_t v26 = (v24 + v19) & ~v23;
  (*(void (**)(uint64_t, uint64_t))(v21 + 16))(v25, v26);
  *(void *)((*(void *)(v22 + 48) + 7 + v25) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v22 + 48)
                                                                                       + 7
                                                                                       + v26) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_22F17C7CC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 24;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 40) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v11, v12);
  uint64_t v13 = *(void *)(v8 + 40);
  uint64_t v14 = *(void *)(a3[4] - 8);
  uint64_t v15 = v14 + 24;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = v13 + v16;
  uint64_t v18 = (v17 + v11) & ~v16;
  uint64_t v19 = (v17 + v12) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v14 + 24))(v18, v19);
  uint64_t v20 = *(void *)(v15 + 40);
  uint64_t v21 = *(void *)(a3[5] - 8);
  uint64_t v22 = v21 + 24;
  uint64_t v23 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v24 = v20 + v23;
  uint64_t v25 = (v24 + v18) & ~v23;
  uint64_t v26 = (v24 + v19) & ~v23;
  (*(void (**)(uint64_t, uint64_t))(v21 + 24))(v25, v26);
  *(void *)((*(void *)(v22 + 40) + 7 + v25) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v22 + 40)
                                                                                       + 7
                                                                                       + v26) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_22F17C944(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 32;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 32) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v11, v12);
  uint64_t v13 = *(void *)(v8 + 32);
  uint64_t v14 = *(void *)(a3[4] - 8);
  uint64_t v15 = v14 + 32;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = v13 + v16;
  uint64_t v18 = (v17 + v11) & ~v16;
  uint64_t v19 = (v17 + v12) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v14 + 32))(v18, v19);
  uint64_t v20 = *(void *)(v15 + 32);
  uint64_t v21 = *(void *)(a3[5] - 8);
  uint64_t v22 = v21 + 32;
  uint64_t v23 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v24 = v20 + v23;
  uint64_t v25 = (v24 + v18) & ~v23;
  uint64_t v26 = (v24 + v19) & ~v23;
  (*(void (**)(uint64_t, uint64_t))(v21 + 32))(v25, v26);
  *(void *)((*(void *)(v22 + 32) + 7 + v25) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v22 + 32)
                                                                                       + 7
                                                                                       + v26) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_22F17CABC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 40;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 24) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v11, v12);
  uint64_t v13 = *(void *)(v8 + 24);
  uint64_t v14 = *(void *)(a3[4] - 8);
  uint64_t v15 = v14 + 40;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = v13 + v16;
  uint64_t v18 = (v17 + v11) & ~v16;
  uint64_t v19 = (v17 + v12) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v14 + 40))(v18, v19);
  uint64_t v20 = *(void *)(v15 + 24);
  uint64_t v21 = *(void *)(a3[5] - 8);
  uint64_t v22 = v21 + 40;
  uint64_t v23 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v24 = v20 + v23;
  uint64_t v25 = (v24 + v18) & ~v23;
  uint64_t v26 = (v24 + v19) & ~v23;
  (*(void (**)(uint64_t, uint64_t))(v21 + 40))(v25, v26);
  *(void *)((*(void *)(v22 + 24) + 7 + v25) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v22 + 24)
                                                                                       + 7
                                                                                       + v26) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_22F17CC34(_DWORD *a1, unsigned int a2, void *a3)
{
  uint64_t v5 = *(void *)(a3[2] - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(void *)(a3[3] - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= v6) {
    unsigned int v9 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v9 = *(_DWORD *)(v7 + 84);
  }
  uint64_t v10 = *(void *)(a3[4] - 8);
  unsigned int v11 = *(_DWORD *)(v10 + 84);
  uint64_t v12 = *(void *)(a3[5] - 8);
  if (v11 <= v9) {
    unsigned int v13 = v9;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v10 + 84);
  }
  uint64_t v14 = *(unsigned int *)(v12 + 84);
  uint64_t v15 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v16 = *(void *)(*(void *)(a3[3] - 8) + 64);
  uint64_t v17 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v18 = *(void *)(*(void *)(a3[4] - 8) + 64);
  uint64_t v19 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v20 = *(void *)(v12 + 64);
  if (v14 <= v13) {
    unsigned int v21 = v13;
  }
  else {
    unsigned int v21 = *(_DWORD *)(v12 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v22 = *(void *)(*(void *)(a3[2] - 8) + 64) + v15;
  if (v21 < a2)
  {
    unint64_t v23 = ((v20 + ((v18 + v19 + ((v16 + v17 + (v22 & ~v15)) & ~v17)) & ~v19) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 & 0xFFFFFFF8) != 0) {
      unsigned int v24 = 2;
    }
    else {
      unsigned int v24 = a2 - v21 + 1;
    }
    if (v24 >= 0x10000) {
      unsigned int v25 = 4;
    }
    else {
      unsigned int v25 = 2;
    }
    if (v24 < 0x100) {
      unsigned int v25 = 1;
    }
    if (v24 >= 2) {
      uint64_t v26 = v25;
    }
    else {
      uint64_t v26 = 0;
    }
    switch(v26)
    {
      case 1:
        int v27 = *((unsigned __int8 *)a1 + v23);
        if (!*((unsigned char *)a1 + v23)) {
          break;
        }
        goto LABEL_27;
      case 2:
        int v27 = *(unsigned __int16 *)((char *)a1 + v23);
        if (*(_WORD *)((char *)a1 + v23)) {
          goto LABEL_27;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x22F17CFACLL);
      case 4:
        int v27 = *(_DWORD *)((char *)a1 + v23);
        if (!v27) {
          break;
        }
LABEL_27:
        int v28 = v27 - 1;
        if ((v23 & 0xFFFFFFF8) != 0)
        {
          int v28 = 0;
          int v29 = *a1;
        }
        else
        {
          int v29 = 0;
        }
        return v21 + (v29 | v28) + 1;
      default:
        break;
    }
  }
  if (!v21) {
    return 0;
  }
  if (v6 == v21)
  {
    uint64_t v30 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v5 + 48);
    uint64_t v31 = *(unsigned int *)(v5 + 84);
    uint64_t v32 = a3[2];
    return v30(a1, v31, v32);
  }
  unint64_t v34 = ((unint64_t)a1 + v22) & ~v15;
  if (v8 != v21)
  {
    a1 = (_DWORD *)((v34 + v16 + v17) & ~v17);
    if (v11 == v21)
    {
      uint64_t v30 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v10 + 48);
      uint64_t v31 = *(unsigned int *)(v10 + 84);
      uint64_t v32 = a3[4];
    }
    else
    {
      a1 = (_DWORD *)(((unint64_t)a1 + v18 + v19) & ~v19);
      uint64_t v30 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(*(void *)(a3[5] - 8) + 48);
      uint64_t v31 = v14;
      uint64_t v32 = a3[5];
    }
    return v30(a1, v31, v32);
  }
  uint64_t v35 = *(uint64_t (**)(unint64_t))(v7 + 48);
  return v35(v34);
}

void sub_22F17CFC0(unsigned char *a1, unsigned int a2, unsigned int a3, void *a4)
{
  uint64_t v6 = *(void *)(a4[2] - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = a4[4];
  uint64_t v9 = *(void *)(a4[3] - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= v7) {
    unsigned int v11 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v11 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v12 = *(void *)(v8 - 8);
  unsigned int v13 = *(_DWORD *)(v12 + 84);
  if (v13 <= v11) {
    unsigned int v14 = v11;
  }
  else {
    unsigned int v14 = *(_DWORD *)(v12 + 84);
  }
  uint64_t v15 = a4[5];
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void *)(*(void *)(a4[2] - 8) + 64);
  uint64_t v18 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v19 = *(void *)(*(void *)(a4[3] - 8) + 64);
  uint64_t v20 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v21 = *(void *)(*(void *)(v8 - 8) + 64);
  uint64_t v22 = *(unsigned __int8 *)(v16 + 80);
  if (*(_DWORD *)(v16 + 84) <= v14) {
    unsigned int v23 = v14;
  }
  else {
    unsigned int v23 = *(_DWORD *)(v16 + 84);
  }
  uint64_t v24 = v17 + v18;
  size_t v25 = ((*(void *)(*(void *)(v15 - 8) + 64)
        + ((v21 + v22 + ((v19 + v20 + ((v17 + v18) & ~v18)) & ~v20)) & ~v22)
        + 7) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v23 >= a3)
  {
    int v29 = 0;
    int v30 = a2 - v23;
    if (a2 <= v23)
    {
LABEL_23:
      switch(v29)
      {
        case 1:
          a1[v25] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_36;
        case 2:
          *(_WORD *)&a1[v25] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_36;
        case 3:
          goto LABEL_55;
        case 4:
          *(_DWORD *)&a1[v25] = 0;
          goto LABEL_35;
        default:
LABEL_35:
          if (a2)
          {
LABEL_36:
            if (v7 == v23)
            {
              uint64_t v33 = *(void (**)(unsigned char *))(v6 + 56);
              unint64_t v34 = a1;
            }
            else
            {
              unint64_t v34 = (unsigned char *)((unint64_t)&a1[v24] & ~v18);
              if (v10 == v23)
              {
                uint64_t v33 = *(void (**)(unsigned char *))(v9 + 56);
              }
              else
              {
                unint64_t v34 = (unsigned char *)((unint64_t)&v34[v19 + v20] & ~v20);
                if (v13 == v23)
                {
                  uint64_t v33 = *(void (**)(unsigned char *))(v12 + 56);
                }
                else
                {
                  unint64_t v34 = (unsigned char *)((unint64_t)&v34[v21 + v22] & ~v22);
                  uint64_t v33 = *(void (**)(unsigned char *))(v16 + 56);
                }
              }
            }
            v33(v34);
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v26 = a3 - v23;
    if (v25) {
      unsigned int v27 = 2;
    }
    else {
      unsigned int v27 = v26 + 1;
    }
    if (v27 >= 0x10000) {
      int v28 = 4;
    }
    else {
      int v28 = 2;
    }
    if (v27 < 0x100) {
      int v28 = 1;
    }
    if (v27 >= 2) {
      int v29 = v28;
    }
    else {
      int v29 = 0;
    }
    int v30 = a2 - v23;
    if (a2 <= v23) {
      goto LABEL_23;
    }
  }
  if (v25) {
    int v31 = 1;
  }
  else {
    int v31 = v30;
  }
  if (v25)
  {
    unsigned int v32 = ~v23 + a2;
    bzero(a1, v25);
    *(_DWORD *)a1 = v32;
  }
  switch(v29)
  {
    case 1:
      a1[v25] = v31;
      break;
    case 2:
      *(_WORD *)&a1[v25] = v31;
      break;
    case 3:
LABEL_55:
      __break(1u);
      JUMPOUT(0x22F17D3B4);
    case 4:
      *(_DWORD *)&a1[v25] = v31;
      break;
    default:
      return;
  }
}

void type metadata accessor for IOSurfaceRef(uint64_t a1)
{
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t sub_22F17D408(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_22F17D428(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 24) = v3;
  return result;
}

void type metadata accessor for CMAcceleration(uint64_t a1)
{
}

void type metadata accessor for ARConfidenceLevel(uint64_t a1)
{
}

void type metadata accessor for CVPixelBufferLockFlags(uint64_t a1)
{
}

void type metadata accessor for CGColorSpace(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for ConnectedSurface(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 __swift_memcpy48_16(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_22F17D4EC(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_22F17D50C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 48) = v3;
  return result;
}

void type metadata accessor for simd_float3x3(uint64_t a1)
{
}

void type metadata accessor for VTPixelTransferSession(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for CVMetalTextureCache(uint64_t a1)
{
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void type metadata accessor for CGAffineTransform(uint64_t a1)
{
}

void type metadata accessor for UIInterfaceOrientation(uint64_t a1)
{
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_22F17D5DC(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_22F17D5FC(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

__n128 __swift_memcpy64_16(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for PlaneSelector.PlaneSelectionStats(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for PlaneSelector.PlaneSelectionStats(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 64) = v3;
  return result;
}

void type metadata accessor for simd_float4x4(uint64_t a1)
{
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
}

void type metadata accessor for CVBuffer(uint64_t a1)
{
}

void type metadata accessor for CGPoint(uint64_t a1)
{
}

void type metadata accessor for URLResourceKey(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for Segment(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Segment(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for vImage_Buffer(uint64_t a1)
{
}

void type metadata accessor for MTLPixelFormat(uint64_t a1)
{
}

void type metadata accessor for CFString(uint64_t a1)
{
}

uint64_t sub_22F17D7A0()
{
  return sub_22F17D830((unint64_t *)&qword_2686946F8, type metadata accessor for CFString);
}

uint64_t sub_22F17D7E8()
{
  return sub_22F17D830(&qword_268694700, type metadata accessor for URLResourceKey);
}

uint64_t sub_22F17D830(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_22F17D878()
{
  return sub_22F17D830(&qword_268694708, type metadata accessor for URLResourceKey);
}

uint64_t sub_22F17D8C0()
{
  return sub_22F17D830(&qword_268694710, type metadata accessor for URLResourceKey);
}

uint64_t sub_22F17D908()
{
  return sub_22F17D830(&qword_268694718, type metadata accessor for CVPixelBufferLockFlags);
}

uint64_t sub_22F17D950()
{
  return sub_22F17D830(&qword_268694720, type metadata accessor for CVPixelBufferLockFlags);
}

uint64_t sub_22F17D998()
{
  return sub_22F17D830(&qword_268694728, type metadata accessor for CVPixelBufferLockFlags);
}

uint64_t sub_22F17D9E0()
{
  return sub_22F17D830(&qword_268694730, type metadata accessor for CVPixelBufferLockFlags);
}

uint64_t sub_22F17DA28()
{
  return sub_22F17D830(&qword_268694738, type metadata accessor for CFString);
}

void type metadata accessor for FileAttributeKey(uint64_t a1)
{
}

void type metadata accessor for NSKeyValueChangeKey(uint64_t a1)
{
}

void sub_22F17DA98(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_22F17DAE0()
{
  return sub_22F17D830(&qword_268694760, type metadata accessor for NSKeyValueChangeKey);
}

uint64_t sub_22F17DB28()
{
  return sub_22F17D830(&qword_268694768, type metadata accessor for NSKeyValueChangeKey);
}

uint64_t sub_22F17DB70()
{
  return sub_22F17D830(&qword_268694770, type metadata accessor for FileAttributeKey);
}

uint64_t sub_22F17DBB8()
{
  return sub_22F17D830(&qword_268694778, type metadata accessor for FileAttributeKey);
}

uint64_t sub_22F17DC00()
{
  return sub_22F17D830(&qword_268694780, type metadata accessor for FileAttributeKey);
}

uint64_t sub_22F17DC48()
{
  return sub_22F17D830(&qword_268694788, type metadata accessor for NSKeyValueChangeKey);
}

void MetalNode.children.setter()
{
}

id sub_22F17DDAC()
{
  uint64_t v0 = sub_22F223788();
  __swift_allocate_value_buffer(v0, qword_26869BB60);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_26869BB60);
  return sub_22F17DE94(v1);
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

id sub_22F17DE94@<X0>(uint64_t a1@<X8>)
{
  v19[15] = *MEMORY[0x263EF8340];
  uint64_t v2 = sub_22F223788();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22F223728();
  id v6 = objc_msgSend(self, sel_defaultManager);
  unsigned int v7 = (void *)sub_22F223758();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2686948D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22F2265A0;
  uint64_t v9 = (void *)*MEMORY[0x263F08060];
  uint64_t v10 = MEMORY[0x263F8D310];
  *(void *)(inited + 32) = *MEMORY[0x263F08060];
  *(void *)(inited + 40) = 0x656C69626F6DLL;
  *(void *)(inited + 48) = 0xE600000000000000;
  unsigned int v11 = (void *)*MEMORY[0x263F08028];
  *(void *)(inited + 64) = v10;
  *(void *)(inited + 72) = v11;
  *(void *)(inited + 104) = v10;
  *(void *)(inited + 80) = 0x656C69626F6DLL;
  *(void *)(inited + 88) = 0xE600000000000000;
  id v12 = v9;
  id v13 = v11;
  sub_22F1852E4(inited);
  type metadata accessor for FileAttributeKey(0);
  sub_22F17E130();
  unsigned int v14 = (void *)sub_22F223958();
  swift_bridgeObjectRelease();
  v19[0] = 0;
  LODWORD(inited) = objc_msgSend(v6, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v7, 1, v14, v19);

  id v18 = (id)v19[0];
  if (inited)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v5, v2);
    id v15 = v18;
    return v15;
  }
  else
  {
    id v17 = v18;
    sub_22F2236F8();

    swift_willThrow();
    id result = (id)swift_unexpectedError();
    __break(1u);
  }
  return result;
}

unint64_t sub_22F17E130()
{
  unint64_t result = qword_268694790;
  if (!qword_268694790)
  {
    type metadata accessor for FileAttributeKey(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268694790);
  }
  return result;
}

float ARCamera.gravityOffsetAngle.getter()
{
  id v1 = objc_msgSend(self, sel_currentDevice);
  id v2 = objc_msgSend(v1, sel_orientation);

  objc_msgSend(v0, sel_eulerAngles);
  float result = v3;
  switch((unint64_t)v2)
  {
    case 1uLL:
    case 5uLL:
      float v5 = 1.5708;
      goto LABEL_5;
    case 2uLL:
      float v5 = -1.5708;
      goto LABEL_5;
    case 3uLL:
      float v5 = 3.1416;
LABEL_5:
      float result = v3 + v5;
      break;
    default:
      return result;
  }
  return result;
}

Swift::Float __swiftcall ARCamera.gravityOffsetAngle(for:)(UIDeviceOrientation a1)
{
  objc_msgSend(v1, sel_eulerAngles);
  Swift::Float result = v3;
  switch(a1)
  {
    case UIDeviceOrientationPortrait:
    case UIDeviceOrientationFaceUp:
      float v5 = 1.5708;
      goto LABEL_5;
    case UIDeviceOrientationPortraitUpsideDown:
      float v5 = -1.5708;
      goto LABEL_5;
    case UIDeviceOrientationLandscapeLeft:
      float v5 = 3.1416;
LABEL_5:
      Swift::Float result = v3 + v5;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ARCamera.TrackingState.description.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_22F224188();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  id v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = sub_22F224198();
  MEMORY[0x270FA5388](v9 - 8);
  unsigned int v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22F17E62C(v1, (uint64_t)v11);
  int v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v11, 2, v2);
  if (v12)
  {
    if (v12 == 1) {
      return 0x6961764120746F4ELL;
    }
    else {
      return 0x6C616D726F4ELL;
    }
  }
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v8, v11, v2);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
  int v14 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v6, v2);
  if (v14 == *MEMORY[0x263F8C948]) {
    goto LABEL_12;
  }
  if (v14 == *MEMORY[0x263F8C958])
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    return 0xD000000000000021;
  }
  if (v14 == *MEMORY[0x263F8C960])
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    return 0xD000000000000026;
  }
  if (v14 == *MEMORY[0x263F8C950])
  {
LABEL_12:
    unint64_t v13 = 0xD00000000000001DLL;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    return v13;
  }
  uint64_t result = sub_22F224538();
  __break(1u);
  return result;
}

uint64_t sub_22F17E62C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_22F224198();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t ARCamera.TrackingState.analyticsDescription.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_22F224188();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  id v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = sub_22F224198();
  MEMORY[0x270FA5388](v9 - 8);
  unsigned int v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22F17E62C(v1, (uint64_t)v11);
  int v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v11, 2, v2);
  if (!v12)
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v8, v11, v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
    int v14 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v6, v2);
    if (v14 == *MEMORY[0x263F8C948])
    {
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      uint64_t v15 = 0x616974696E69;
    }
    else
    {
      if (v14 == *MEMORY[0x263F8C958])
      {
        (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
        return 0x7669737365637865;
      }
      if (v14 == *MEMORY[0x263F8C960])
      {
        (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
        return 0xD000000000000014;
      }
      if (v14 != *MEMORY[0x263F8C950])
      {
        uint64_t result = sub_22F224538();
        __break(1u);
        return result;
      }
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      uint64_t v15 = 0x61636F6C6572;
    }
    return v15 & 0xFFFFFFFFFFFFLL | 0x696C000000000000;
  }
  if (v12 == 1) {
    return 0x6C69617641746F6ELL;
  }
  else {
    return 0x6C616D726F6ELL;
  }
}

void sub_22F17E9CC()
{
  sub_22F17E9EC();
  static ADTransformer.adImagePlaneVertexDescriptor = v0;
}

void sub_22F17E9EC()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F12A80]), sel_init);
  id v1 = objc_msgSend(v0, sel_attributes);
  id v2 = objc_msgSend(v1, sel_objectAtIndexedSubscript_, 0);

  if (!v2)
  {
    __break(1u);
    goto LABEL_12;
  }
  objc_msgSend(v2, sel_setFormat_, 29);

  id v3 = objc_msgSend(v0, sel_attributes);
  id v4 = objc_msgSend(v3, sel_objectAtIndexedSubscript_, 0);

  if (!v4)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  objc_msgSend(v4, sel_setOffset_, 0);

  id v5 = objc_msgSend(v0, sel_attributes);
  id v6 = objc_msgSend(v5, sel_objectAtIndexedSubscript_, 0);

  if (!v6)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  objc_msgSend(v6, sel_setBufferIndex_, 0);

  id v7 = objc_msgSend(v0, sel_attributes);
  id v8 = objc_msgSend(v7, sel_objectAtIndexedSubscript_, 1);

  if (!v8)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  objc_msgSend(v8, sel_setFormat_, 29);

  id v9 = objc_msgSend(v0, sel_attributes);
  id v10 = objc_msgSend(v9, sel_objectAtIndexedSubscript_, 1);

  if (!v10)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  objc_msgSend(v10, sel_setOffset_, 8);

  id v11 = objc_msgSend(v0, sel_attributes);
  id v12 = objc_msgSend(v11, sel_objectAtIndexedSubscript_, 1);

  if (!v12)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  objc_msgSend(v12, sel_setBufferIndex_, 0);

  id v13 = objc_msgSend(v0, sel_layouts);
  id v14 = objc_msgSend(v13, sel_objectAtIndexedSubscript_, 0);

  if (!v14)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  objc_msgSend(v14, sel_setStride_, 16);

  id v15 = objc_msgSend(v0, sel_layouts);
  id v16 = objc_msgSend(v15, sel_objectAtIndexedSubscript_, 0);

  if (!v16)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  objc_msgSend(v16, sel_setStepRate_, 1);

  id v17 = objc_msgSend(v0, sel_layouts);
  id v18 = objc_msgSend(v17, sel_objectAtIndexedSubscript_, 0);

  if (v18)
  {
    objc_msgSend(v18, sel_setStepFunction_, 1);

    return;
  }
LABEL_19:
  __break(1u);
}

uint64_t *ADTransformer.adImagePlaneVertexDescriptor.unsafeMutableAddressor()
{
  if (qword_268694348 != -1) {
    swift_once();
  }
  return &static ADTransformer.adImagePlaneVertexDescriptor;
}

id static ADTransformer.adImagePlaneVertexDescriptor.getter()
{
  if (qword_268694348 != -1) {
    swift_once();
  }
  id v0 = (void *)static ADTransformer.adImagePlaneVertexDescriptor;
  return v0;
}

uint64_t ADTransformer.adConfig.getter()
{
  return swift_retain();
}

double ADTransformer.viewCropRect.getter()
{
  return *(double *)(v0 + 1024);
}

double ADTransformer.adSize.getter()
{
  return *(double *)(v0 + 1056);
}

uint64_t ADTransformer.adOrientation.getter()
{
  return *(void *)(v0 + 1072);
}

uint64_t ADTransformer.adImagePlane.getter()
{
  return swift_bridgeObjectRetain();
}

CGAffineTransform *ADTransformer.viewToPortraitCamera.getter@<X0>(CGFloat *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 1136))
  {
    CGFloat v4 = *(double *)(v1 + 40);
    CGFloat v3 = *(double *)(v1 + 48);
    CGAffineTransformMakeScale(&t1, 1.0 / *(double *)(v1 + 16), 1.0 / *(double *)(v1 + 24));
    long long v22 = *(_OWORD *)&t1.c;
    long long v24 = *(_OWORD *)&t1.a;
    CGFloat tx = t1.tx;
    CGFloat ty = t1.ty;
    ARViewToCameraImageTransform();
    long long v7 = *(_OWORD *)&t1.a;
    long long v8 = *(_OWORD *)&t1.c;
    long long v9 = *(_OWORD *)&t1.tx;
    *(_OWORD *)&t1.CGFloat a = v24;
    *(_OWORD *)&t1.CGFloat c = v22;
    t1.CGFloat tx = tx;
    t1.CGFloat ty = ty;
    *(_OWORD *)&t2.CGFloat a = v7;
    *(_OWORD *)&t2.CGFloat c = v8;
    *(_OWORD *)&t2.CGFloat tx = v9;
    CGAffineTransformConcat(&v26, &t1, &t2);
    long long v23 = *(_OWORD *)&v26.c;
    long long v25 = *(_OWORD *)&v26.a;
    CGFloat v10 = v26.tx;
    CGFloat v11 = v26.ty;
    CGAffineTransformMakeScale(&t1, v3, v4);
    long long v12 = *(_OWORD *)&t1.a;
    long long v13 = *(_OWORD *)&t1.c;
    long long v14 = *(_OWORD *)&t1.tx;
    *(_OWORD *)&t1.CGFloat a = v25;
    *(_OWORD *)&t1.CGFloat c = v23;
    t1.CGFloat tx = v10;
    t1.CGFloat ty = v11;
    *(_OWORD *)&t2.CGFloat a = v12;
    *(_OWORD *)&t2.CGFloat c = v13;
    *(_OWORD *)&t2.CGFloat tx = v14;
    uint64_t result = CGAffineTransformConcat(&v26, &t1, &t2);
    CGFloat a = v26.a;
    CGFloat b = v26.b;
    CGFloat c = v26.c;
    CGFloat d = v26.d;
    CGFloat v21 = v26.tx;
    CGFloat v20 = v26.ty;
    *(CGFloat *)(v1 + 1088) = v26.a;
    *(CGFloat *)(v1 + 1096) = b;
    *(CGFloat *)(v1 + 1104) = c;
    *(CGFloat *)(v1 + 1112) = d;
    *(CGFloat *)(v1 + 1120) = v21;
    *(CGFloat *)(v1 + 1128) = v20;
    *(unsigned char *)(v1 + 1136) = 0;
  }
  else
  {
    CGFloat v20 = *(double *)(v1 + 1128);
    CGFloat v21 = *(double *)(v1 + 1120);
    CGFloat d = *(double *)(v1 + 1112);
    CGFloat c = *(double *)(v1 + 1104);
    CGFloat b = *(double *)(v1 + 1096);
    CGFloat a = *(double *)(v1 + 1088);
  }
  *a1 = a;
  a1[1] = b;
  a1[2] = c;
  a1[3] = d;
  a1[4] = v21;
  a1[5] = v20;
  return result;
}

double ADTransformer.cameraCropRect.getter()
{
  if ((*(unsigned char *)(v0 + 1176) & 1) == 0) {
    return *(double *)(v0 + 1144);
  }
  sub_22F17EFD8((double *)v0);
  *(double *)(v0 + 1144) = result;
  *(void *)(v0 + 1152) = v2;
  *(void *)(v0 + 1160) = v3;
  *(void *)(v0 + 1168) = v4;
  *(unsigned char *)(v0 + 1176) = 0;
  return result;
}

void sub_22F17EFD8(double *a1)
{
  CGFloat v2 = a1[128];
  CGFloat v3 = a1[129];
  CGFloat v4 = a1[130];
  CGFloat v5 = a1[131];
  BOOL IsPortrait = UIInterfaceOrientationIsPortrait(*((void *)a1 + 134));
  if (IsPortrait) {
    ADTransformer.viewToPortraitCamera.getter(&v10.a);
  }
  else {
    Transformer.viewToCamera.getter(&v10.a);
  }
  CGAffineTransform v9 = v10;
  v11.origin.x = v2;
  v11.origin.y = v3;
  v11.size.width = v4;
  v11.size.height = v5;
  CGRect v12 = CGRectApplyAffineTransform(v11, &v9);
  CGRect v13 = CGRectIntegral(v12);
  uint64_t v7 = 5;
  if (IsPortrait) {
    uint64_t v8 = 6;
  }
  else {
    uint64_t v8 = 5;
  }
  if (!IsPortrait) {
    uint64_t v7 = 6;
  }
  v14.size.height = a1[v7];
  v14.size.width = a1[v8];
  v14.origin.x = 0.0;
  v14.origin.y = 0.0;
  CGRectIntersection(v13, v14);
}

void ADTransformer.cameraToADScale.getter()
{
  if (*(unsigned char *)(v0 + 1200))
  {
    double v1 = *(double *)(v0 + 1056);
    v6.origin.x = ADTransformer.cameraCropRect.getter();
    CGFloat Width = CGRectGetWidth(v6);
    double v3 = *(double *)(v0 + 1064);
    double v4 = v1 / Width;
    double v5 = v3 / CGRectGetHeight(*(CGRect *)(v0 + 1144));
    if (vabdd_f64(v4, v5) >= 0.0001)
    {
      __break(1u);
    }
    else
    {
      *(double *)(v0 + 1184) = v4;
      *(double *)(v0 + 1192) = v5;
      *(unsigned char *)(v0 + 1200) = 0;
    }
  }
}

void ADTransformer.viewToAD.getter(void *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 1256))
  {
    sub_22F17F1C0(&v9);
    uint64_t v3 = *((void *)&v9 + 1);
    uint64_t v4 = v9;
    uint64_t v6 = v10;
    uint64_t v5 = v11;
    uint64_t v8 = v12;
    uint64_t v7 = v13;
    *(void *)(v1 + 1208) = v9;
    *(void *)(v1 + 1216) = v3;
    *(void *)(v1 + 1224) = v6;
    *(void *)(v1 + 1232) = v5;
    *(void *)(v1 + 1240) = v8;
    *(void *)(v1 + 1248) = v7;
    *(unsigned char *)(v1 + 1256) = 0;
  }
  else
  {
    uint64_t v7 = *(void *)(v1 + 1248);
    uint64_t v8 = *(void *)(v1 + 1240);
    uint64_t v5 = *(void *)(v1 + 1232);
    uint64_t v6 = *(void *)(v1 + 1224);
    uint64_t v3 = *(void *)(v1 + 1216);
    uint64_t v4 = *(void *)(v1 + 1208);
  }
  *a1 = v4;
  a1[1] = v3;
  a1[2] = v6;
  a1[3] = v5;
  a1[4] = v8;
  a1[5] = v7;
}

CGFloat sub_22F17F1C0@<D0>(_OWORD *a1@<X8>)
{
  if (UIInterfaceOrientationIsPortrait(*(void *)(v1 + 1072))) {
    ADTransformer.viewToPortraitCamera.getter(v28);
  }
  else {
    Transformer.viewToCamera.getter(v28);
  }
  CGFloat v4 = v28[2];
  CGFloat v3 = v28[3];
  CGFloat v6 = v28[4];
  CGFloat v5 = v28[5];
  CGFloat v8 = v28[0];
  CGFloat v7 = v28[1];
  if ((COERCE_UNSIGNED_INT64(ADTransformer.cameraCropRect.getter()) & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    double v9 = *(double *)(v1 + 1152);
  }
  else
  {
    if ((*(void *)(v1 + 1152) & 0x7FFFFFFFFFFFFFFFLL) == 0)
    {
      ADTransformer.cameraToADScale.getter();
      CGAffineTransformMakeScale(&t1, v22, *(CGFloat *)(v1 + 1192));
      long long v16 = *(_OWORD *)&t1.a;
      long long v17 = *(_OWORD *)&t1.c;
      long long v18 = *(_OWORD *)&t1.tx;
      t1.CGFloat a = v8;
      t1.CGFloat b = v7;
      t1.CGFloat c = v4;
      t1.CGFloat d = v3;
      t1.CGFloat tx = v6;
      t1.CGFloat ty = v5;
      goto LABEL_9;
    }
    double v9 = *(double *)(v1 + 1152);
  }
  CGAffineTransformMakeTranslation(&t1, -*(double *)(v1 + 1144), -v9);
  long long v10 = *(_OWORD *)&t1.a;
  long long v11 = *(_OWORD *)&t1.c;
  long long v12 = *(_OWORD *)&t1.tx;
  t1.CGFloat a = v8;
  t1.CGFloat b = v7;
  t1.CGFloat c = v4;
  t1.CGFloat d = v3;
  t1.CGFloat tx = v6;
  t1.CGFloat ty = v5;
  *(_OWORD *)&t2.CGFloat a = v10;
  *(_OWORD *)&t2.CGFloat c = v11;
  *(_OWORD *)&t2.CGFloat tx = v12;
  CGAffineTransformConcat(&v25, &t1, &t2);
  long long v23 = *(_OWORD *)&v25.c;
  long long v24 = *(_OWORD *)&v25.a;
  CGFloat tx = v25.tx;
  CGFloat ty = v25.ty;
  ADTransformer.cameraToADScale.getter();
  CGAffineTransformMakeScale(&t1, v15, *(CGFloat *)(v1 + 1192));
  long long v16 = *(_OWORD *)&t1.a;
  long long v17 = *(_OWORD *)&t1.c;
  long long v18 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.CGFloat a = v24;
  *(_OWORD *)&t1.CGFloat c = v23;
  t1.CGFloat tx = tx;
  t1.CGFloat ty = ty;
LABEL_9:
  *(_OWORD *)&t2.CGFloat a = v16;
  *(_OWORD *)&t2.CGFloat c = v17;
  *(_OWORD *)&t2.CGFloat tx = v18;
  CGAffineTransformConcat(&v25, &t1, &t2);
  CGFloat result = v25.a;
  long long v20 = *(_OWORD *)&v25.c;
  long long v21 = *(_OWORD *)&v25.tx;
  *a1 = *(_OWORD *)&v25.a;
  a1[1] = v20;
  a1[2] = v21;
  return result;
}

CGAffineTransform *ADTransformer.adToView.getter@<X0>(CGFloat *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 1312))
  {
    ADTransformer.viewToAD.getter(&v12);
    CGAffineTransform v11 = v12;
    CGFloat result = CGAffineTransformInvert(&v10, &v11);
    CGFloat a = v10.a;
    CGFloat b = v10.b;
    CGFloat c = v10.c;
    CGFloat d = v10.d;
    CGFloat tx = v10.tx;
    CGFloat ty = v10.ty;
    *(CGFloat *)(v1 + 1264) = v10.a;
    *(CGFloat *)(v1 + 1272) = b;
    *(CGFloat *)(v1 + 1280) = c;
    *(CGFloat *)(v1 + 1288) = d;
    *(CGFloat *)(v1 + 1296) = tx;
    *(CGFloat *)(v1 + 1304) = ty;
    *(unsigned char *)(v1 + 1312) = 0;
  }
  else
  {
    CGFloat ty = *(double *)(v1 + 1304);
    CGFloat tx = *(double *)(v1 + 1296);
    CGFloat d = *(double *)(v1 + 1288);
    CGFloat c = *(double *)(v1 + 1280);
    CGFloat b = *(double *)(v1 + 1272);
    CGFloat a = *(double *)(v1 + 1264);
  }
  *a1 = a;
  a1[1] = b;
  a1[2] = c;
  a1[3] = d;
  a1[4] = tx;
  a1[5] = ty;
  return result;
}

CGAffineTransform *ADTransformer.adToClip.getter@<X0>(CGFloat *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 1368))
  {
    ADTransformer.adToView.getter((CGFloat *)v17);
    long long v12 = v17[1];
    long long v13 = v17[0];
    CGFloat v3 = v18;
    CGFloat v4 = v19;
    Transformer.viewToClip.getter(&v20.a);
    *(_OWORD *)&t1.CGFloat a = v13;
    *(_OWORD *)&t1.CGFloat c = v12;
    t1.CGFloat tx = v3;
    t1.CGFloat ty = v4;
    CGAffineTransform t2 = v20;
    CGFloat result = CGAffineTransformConcat(&v14, &t1, &t2);
    CGFloat a = v14.a;
    CGFloat b = v14.b;
    CGFloat c = v14.c;
    CGFloat d = v14.d;
    CGFloat tx = v14.tx;
    CGFloat ty = v14.ty;
    *(CGFloat *)(v1 + 1320) = v14.a;
    *(CGFloat *)(v1 + 1328) = b;
    *(CGFloat *)(v1 + 1336) = c;
    *(CGFloat *)(v1 + 1344) = d;
    *(CGFloat *)(v1 + 1352) = tx;
    *(CGFloat *)(v1 + 1360) = ty;
    *(unsigned char *)(v1 + 1368) = 0;
  }
  else
  {
    CGFloat ty = *(double *)(v1 + 1360);
    CGFloat tx = *(double *)(v1 + 1352);
    CGFloat d = *(double *)(v1 + 1344);
    CGFloat c = *(double *)(v1 + 1336);
    CGFloat b = *(double *)(v1 + 1328);
    CGFloat a = *(double *)(v1 + 1320);
  }
  *a1 = a;
  a1[1] = b;
  a1[2] = c;
  a1[3] = d;
  a1[4] = tx;
  a1[5] = ty;
  return result;
}

CGAffineTransform *ADTransformer.clipToAD.getter@<X0>(CGFloat *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 1424))
  {
    ADTransformer.adToClip.getter(&v12.a);
    CGAffineTransform v11 = v12;
    CGFloat result = CGAffineTransformInvert(&v10, &v11);
    CGFloat a = v10.a;
    CGFloat b = v10.b;
    CGFloat c = v10.c;
    CGFloat d = v10.d;
    CGFloat tx = v10.tx;
    CGFloat ty = v10.ty;
    *(CGFloat *)(v1 + 1376) = v10.a;
    *(CGFloat *)(v1 + 1384) = b;
    *(CGFloat *)(v1 + 1392) = c;
    *(CGFloat *)(v1 + 1400) = d;
    *(CGFloat *)(v1 + 1408) = tx;
    *(CGFloat *)(v1 + 1416) = ty;
    *(unsigned char *)(v1 + 1424) = 0;
  }
  else
  {
    CGFloat ty = *(double *)(v1 + 1416);
    CGFloat tx = *(double *)(v1 + 1408);
    CGFloat d = *(double *)(v1 + 1400);
    CGFloat c = *(double *)(v1 + 1392);
    CGFloat b = *(double *)(v1 + 1384);
    CGFloat a = *(double *)(v1 + 1376);
  }
  *a1 = a;
  a1[1] = b;
  a1[2] = c;
  a1[3] = d;
  a1[4] = tx;
  a1[5] = ty;
  return result;
}

CGAffineTransform *ADTransformer.adToCamera.getter@<X0>(CGFloat *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 1480))
  {
    ADTransformer.adToView.getter((CGFloat *)v17);
    long long v12 = v17[1];
    long long v13 = v17[0];
    CGFloat v3 = v18;
    CGFloat v4 = v19;
    Transformer.viewToCamera.getter(&v20.a);
    *(_OWORD *)&t1.CGFloat a = v13;
    *(_OWORD *)&t1.CGFloat c = v12;
    t1.CGFloat tx = v3;
    t1.CGFloat ty = v4;
    CGAffineTransform t2 = v20;
    CGFloat result = CGAffineTransformConcat(&v14, &t1, &t2);
    CGFloat a = v14.a;
    CGFloat b = v14.b;
    CGFloat c = v14.c;
    CGFloat d = v14.d;
    CGFloat tx = v14.tx;
    CGFloat ty = v14.ty;
    *(CGFloat *)(v1 + 1432) = v14.a;
    *(CGFloat *)(v1 + 1440) = b;
    *(CGFloat *)(v1 + 1448) = c;
    *(CGFloat *)(v1 + 1456) = d;
    *(CGFloat *)(v1 + 1464) = tx;
    *(CGFloat *)(v1 + 1472) = ty;
    *(unsigned char *)(v1 + 1480) = 0;
  }
  else
  {
    CGFloat ty = *(double *)(v1 + 1472);
    CGFloat tx = *(double *)(v1 + 1464);
    CGFloat d = *(double *)(v1 + 1456);
    CGFloat c = *(double *)(v1 + 1448);
    CGFloat b = *(double *)(v1 + 1440);
    CGFloat a = *(double *)(v1 + 1432);
  }
  *a1 = a;
  a1[1] = b;
  a1[2] = c;
  a1[3] = d;
  a1[4] = tx;
  a1[5] = ty;
  return result;
}

CGAffineTransform *ADTransformer.cameraToAD.getter@<X0>(CGFloat *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 1536))
  {
    ADTransformer.adToCamera.getter(&v12.a);
    CGAffineTransform v11 = v12;
    CGFloat result = CGAffineTransformInvert(&v10, &v11);
    CGFloat a = v10.a;
    CGFloat b = v10.b;
    CGFloat c = v10.c;
    CGFloat d = v10.d;
    CGFloat tx = v10.tx;
    CGFloat ty = v10.ty;
    *(CGFloat *)(v1 + 1488) = v10.a;
    *(CGFloat *)(v1 + 1496) = b;
    *(CGFloat *)(v1 + 1504) = c;
    *(CGFloat *)(v1 + 1512) = d;
    *(CGFloat *)(v1 + 1520) = tx;
    *(CGFloat *)(v1 + 1528) = ty;
    *(unsigned char *)(v1 + 1536) = 0;
  }
  else
  {
    CGFloat ty = *(double *)(v1 + 1528);
    CGFloat tx = *(double *)(v1 + 1520);
    CGFloat d = *(double *)(v1 + 1512);
    CGFloat c = *(double *)(v1 + 1504);
    CGFloat b = *(double *)(v1 + 1496);
    CGFloat a = *(double *)(v1 + 1488);
  }
  *a1 = a;
  a1[1] = b;
  a1[2] = c;
  a1[3] = d;
  a1[4] = tx;
  a1[5] = ty;
  return result;
}

uint64_t sub_22F17F6FC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t ADTransformer.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ADTransformer.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

double sub_22F17F7C4@<D0>(_OWORD *a1@<X8>)
{
  ADTransformer.viewToPortraitCamera.getter((CGFloat *)v4);
  long long v2 = v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  double result = *(double *)&v5;
  a1[2] = v5;
  return result;
}

__n128 sub_22F17F808(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  long long v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 1088) = *(_OWORD *)a1;
  *(_OWORD *)(v2 + 1104) = v3;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v2 + 1120) = result;
  *(unsigned char *)(v2 + 1136) = 0;
  return result;
}

void sub_22F17F828(uint64_t a1@<X8>)
{
  *(double *)a1 = ADTransformer.cameraCropRect.getter();
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
}

__n128 sub_22F17F858(uint64_t a1, void *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = (_OWORD *)(*a2 + 1144);
  __n128 result = *(__n128 *)a1;
  long long v5 = *(_OWORD *)(a1 + 16);
  *uint64_t v3 = *(_OWORD *)a1;
  v3[1] = v5;
  *(unsigned char *)(v2 + 1176) = 0;
  return result;
}

void sub_22F17F870(void *a1@<X8>)
{
  ADTransformer.cameraToADScale.getter();
  *a1 = v2;
  a1[1] = v3;
}

__n128 sub_22F17F89C(__n128 *a1, __n128 **a2)
{
  uint64_t v2 = *a2;
  __n128 result = *a1;
  v2[74] = *a1;
  v2[75].n128_u8[0] = 0;
  return result;
}

double sub_22F17F8B0@<D0>(_OWORD *a1@<X8>)
{
  ADTransformer.viewToAD.getter(v4);
  long long v2 = v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  double result = *(double *)&v5;
  a1[2] = v5;
  return result;
}

__n128 sub_22F17F8F4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *a2 + 1208;
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v3 = *(_OWORD *)a1;
  *(_OWORD *)(v3 + 16) = v4;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v3 + 32) = result;
  *(unsigned char *)(v2 + 1256) = 0;
  return result;
}

double sub_22F17F914@<D0>(_OWORD *a1@<X8>)
{
  ADTransformer.adToView.getter((CGFloat *)v4);
  long long v2 = v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  double result = *(double *)&v5;
  a1[2] = v5;
  return result;
}

__n128 sub_22F17F958(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  long long v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 1264) = *(_OWORD *)a1;
  *(_OWORD *)(v2 + 1280) = v3;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v2 + 1296) = result;
  *(unsigned char *)(v2 + 1312) = 0;
  return result;
}

double sub_22F17F978@<D0>(_OWORD *a1@<X8>)
{
  ADTransformer.adToClip.getter((CGFloat *)v4);
  long long v2 = v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  double result = *(double *)&v5;
  a1[2] = v5;
  return result;
}

__n128 sub_22F17F9BC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *a2 + 1320;
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v3 = *(_OWORD *)a1;
  *(_OWORD *)(v3 + 16) = v4;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v3 + 32) = result;
  *(unsigned char *)(v2 + 1368) = 0;
  return result;
}

double sub_22F17F9DC@<D0>(_OWORD *a1@<X8>)
{
  ADTransformer.clipToAD.getter((CGFloat *)v4);
  long long v2 = v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  double result = *(double *)&v5;
  a1[2] = v5;
  return result;
}

__n128 sub_22F17FA20(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  long long v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 1376) = *(_OWORD *)a1;
  *(_OWORD *)(v2 + 1392) = v3;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v2 + 1408) = result;
  *(unsigned char *)(v2 + 1424) = 0;
  return result;
}

double sub_22F17FA40@<D0>(_OWORD *a1@<X8>)
{
  ADTransformer.adToCamera.getter((CGFloat *)v4);
  long long v2 = v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  double result = *(double *)&v5;
  a1[2] = v5;
  return result;
}

__n128 sub_22F17FA84(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *a2 + 1432;
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v3 = *(_OWORD *)a1;
  *(_OWORD *)(v3 + 16) = v4;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v3 + 32) = result;
  *(unsigned char *)(v2 + 1480) = 0;
  return result;
}

double sub_22F17FAA4@<D0>(_OWORD *a1@<X8>)
{
  ADTransformer.cameraToAD.getter((CGFloat *)v4);
  long long v2 = v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  double result = *(double *)&v5;
  a1[2] = v5;
  return result;
}

__n128 sub_22F17FAE8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  long long v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 1488) = *(_OWORD *)a1;
  *(_OWORD *)(v2 + 1504) = v3;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v2 + 1520) = result;
  *(unsigned char *)(v2 + 1536) = 0;
  return result;
}

uint64_t type metadata accessor for ADTransformer()
{
  return self;
}

uint64_t sub_22F17FB2C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  *(void *)(v4 + 1000) = &unk_26E291598;
  *(void *)(v4 + 1008) = &unk_26E2915D8;
  *(_OWORD *)(v4 + 1088) = 0u;
  *(_OWORD *)(v4 + 1104) = 0u;
  *(_OWORD *)(v4 + 1120) = 0u;
  *(unsigned char *)(v4 + 1136) = 1;
  *(_OWORD *)(v4 + 1144) = 0u;
  *(_OWORD *)(v4 + 1160) = 0u;
  *(unsigned char *)(v4 + 1176) = 1;
  *(_OWORD *)(v4 + 1184) = 0u;
  *(unsigned char *)(v4 + 1200) = 1;
  *(_OWORD *)(v4 + 1208) = 0u;
  *(_OWORD *)(v4 + 1224) = 0u;
  *(_OWORD *)(v4 + 1240) = 0u;
  *(unsigned char *)(v4 + 1256) = 1;
  *(_OWORD *)(v4 + 1296) = 0u;
  *(_OWORD *)(v4 + 1280) = 0u;
  *(_OWORD *)(v4 + 1264) = 0u;
  *(unsigned char *)(v4 + 1312) = 1;
  *(_OWORD *)(v4 + 1320) = 0u;
  *(_OWORD *)(v4 + 1336) = 0u;
  *(_OWORD *)(v4 + 1352) = 0u;
  *(unsigned char *)(v4 + 1368) = 1;
  *(_OWORD *)(v4 + 1376) = 0u;
  *(_OWORD *)(v4 + 1392) = 0u;
  *(_OWORD *)(v4 + 1408) = 0u;
  *(unsigned char *)(v4 + 1424) = 1;
  *(_OWORD *)(v4 + 1432) = 0u;
  *(_OWORD *)(v4 + 1448) = 0u;
  *(_OWORD *)(v4 + 1464) = 0u;
  *(unsigned char *)(v4 + 1480) = 1;
  *(_OWORD *)(v4 + 1488) = 0u;
  *(_OWORD *)(v4 + 1504) = 0u;
  *(_OWORD *)(v4 + 1520) = 0u;
  *(unsigned char *)(v4 + 1536) = 1;
  *(void *)(v4 + 1016) = a3;
  swift_retain();
  swift_retain();
  v23.origin.CGFloat x = _s17MeasureFoundation15ADConfigurationC12viewCropRectSo6CGRectVvg_0();
  CGFloat x = v23.origin.x;
  CGFloat y = v23.origin.y;
  CGFloat width = v23.size.width;
  CGFloat height = v23.size.height;
  *(CGRect *)(v4 + 1024) = v23;
  *(_OWORD *)(v4 + 1056) = *(_OWORD *)(a3 + 72);
  *(void *)(v4 + 1072) = 3;
  double v12 = *(double *)(a3 + 48);
  double v13 = *(double *)(a3 + 56);
  float v14 = CGRectGetWidth(v23);
  float v15 = v12;
  float v16 = v14 / v15;
  v24.origin.CGFloat x = x;
  v24.origin.CGFloat y = y;
  v24.size.CGFloat width = width;
  v24.size.CGFloat height = height;
  float v17 = CGRectGetHeight(v24);
  float v18 = v13;
  float v19 = v17 / v18;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2686948D8);
  uint64_t result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_22F226FC0;
  *(float *)(result + 32) = -v16;
  *(float *)(result + 36) = -v19;
  unint64_t v21 = qword_26E2915E8;
  if (!qword_26E2915E8)
  {
    __break(1u);
    goto LABEL_13;
  }
  *(_DWORD *)(result + 40) = dword_26E2915F8;
  if (v21 == 1)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  *(_DWORD *)(result + 44) = dword_26E2915FC;
  *(float *)(result + 48) = v16;
  *(float *)(result + 52) = -v19;
  if (v21 < 3)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  *(_DWORD *)(result + 56) = dword_26E291600;
  if (v21 == 3)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  *(_DWORD *)(result + 60) = dword_26E291604;
  *(float *)(result + 64) = -v16;
  *(float *)(result + 68) = v19;
  if (v21 < 5)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  *(_DWORD *)(result + 72) = dword_26E291608;
  if (v21 == 5)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  *(_DWORD *)(result + 76) = dword_26E29160C;
  *(float *)(result + 80) = v16;
  *(float *)(result + 84) = v19;
  if (v21 < 7)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  *(_DWORD *)(result + 88) = dword_26E291610;
  if (v21 == 7)
  {
LABEL_19:
    __break(1u);
    return result;
  }
  *(_DWORD *)(result + 92) = dword_26E291614;
  *(void *)(v4 + 1080) = result;
  swift_release();
  *(_OWORD *)(v4 + 880) = 0u;
  *(_OWORD *)(v4 + 896) = 0u;
  *(_OWORD *)(v4 + 848) = 0u;
  *(_OWORD *)(v4 + 864) = 0u;
  *(unsigned char *)(v4 + 912) = 1;
  *(_OWORD *)(v4 + 928) = 0u;
  *(_OWORD *)(v4 + 944) = 0u;
  *(_OWORD *)(v4 + 960) = 0u;
  *(_OWORD *)(v4 + 976) = 0u;
  *(unsigned char *)(v4 + 992) = 1;
  return sub_22F1A6C10(a1, a2, v12, v13);
}

BOOL UIInterfaceOrientationIsPortrait(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

__n128 ARFrame.getHitRay(cameraPoint:)()
{
  id v1 = objc_msgSend(v0, sel_camera);
  memset(v4, 0, sizeof(v4));
  char v5 = 1;
  __n128 v3 = _sSo7ARFrameC17MeasureFoundationE9getHitRay11cameraPoint0G00G18CorrectedTransforms5SIMD3VySfG6origin_AJ9directionts5SIMD2VySfG_So8ARCameraCSo13simd_float4x4aSgtFZ_0(v1, (uint64_t)v4);

  return v3;
}

__n128 ARFrame.getHitRay()()
{
  id v1 = objc_msgSend(v0, sel_camera);
  memset(v4, 0, sizeof(v4));
  char v5 = 1;
  __n128 v3 = _sSo7ARFrameC17MeasureFoundationE9getHitRay11cameraPoint0G00G18CorrectedTransforms5SIMD3VySfG6origin_AJ9directionts5SIMD2VySfG_So8ARCameraCSo13simd_float4x4aSgtFZ_0(v1, (uint64_t)v4);

  return v3;
}

double ARFrame.viewToCamera(screenPoint:sceneView:orientation:)(double a1, double a2, uint64_t a3, uint64_t a4)
{
  id v8 = objc_msgSend(v4, sel_camera);
  uint64_t ObjectType = swift_getObjectType();
  CGFloat v10 = (*(double (**)(uint64_t, uint64_t, double, double))(a4 + 24))(ObjectType, a4, a1, a2);
  CGFloat v12 = v11;
  (*(void (**)(uint64_t, uint64_t))(a4 + 8))(ObjectType, a4);
  objc_msgSend(v8, sel_imageResolution);
  ARViewToCameraImageTransform();
  v16.CGFloat x = v10;
  v16.CGFloat y = v12;
  *(void *)&double v13 = *(_OWORD *)&CGPointApplyAffineTransform(v16, &v15);

  return v13;
}

void static ARFrame.viewToCamera(screenPoint:sceneView:camera:orientation:)(double a1, double a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t ObjectType = swift_getObjectType();
  CGFloat v10 = (*(double (**)(uint64_t, uint64_t, double, double))(a4 + 24))(ObjectType, a4, a1, a2);
  CGFloat v12 = v11;
  (*(void (**)(uint64_t, uint64_t))(a4 + 8))(ObjectType, a4);
  objc_msgSend(a5, sel_imageResolution);
  ARViewToCameraImageTransform();
  v14.CGFloat x = v10;
  v14.CGFloat y = v12;
  CGPointApplyAffineTransform(v14, &v13);
}

Swift::Bool __swiftcall ARFrame.isVIOTrackingUnacceptable()()
{
  id v1 = objc_msgSend(v0, sel_worldTrackingState);
  if (!v1) {
    return 1;
  }
  uint64_t v2 = v1;
  id v3 = objc_msgSend(v1, sel_vioTrackingState);

  return v3 != 0;
}

__n128 _sSo7ARFrameC17MeasureFoundationE9getHitRay11cameraPoint0G00G18CorrectedTransforms5SIMD3VySfG6origin_AJ9directionts5SIMD2VySfG_So8ARCameraCSo13simd_float4x4aSgtFZ_0(void *a1, uint64_t a2)
{
  sub_22F18032C(a2, (uint64_t)v18);
  uint64_t v5 = v18[6];
  uint64_t v4 = v18[7];
  objc_msgSend(a1, sel_projectionMatrix);
  simd_float4 v15 = v7;
  simd_float4 v16 = v6;
  simd_float4 v13 = v9;
  simd_float4 v14 = v8;
  sub_22F18032C(a2, (uint64_t)v19);
  if (v19[64])
  {
    objc_msgSend(a1, sel_transform);
    long long v17 = v10;
  }
  else
  {
    *(void *)&long long v11 = v5;
    *((void *)&v11 + 1) = v4;
    long long v17 = v11;
  }
  v20.columns[1] = v15;
  v20.columns[0] = v16;
  v20.columns[3] = v13;
  v20.columns[2] = v14;
  __invert_f4(v20);
  return (__n128)v17;
}

uint64_t sub_22F18032C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2686948E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

Swift::Void __swiftcall simd_float3x3.copy(from:)(CGAffineTransform *from)
{
  float a = from->a;
  *(float *)&long long v3 = a;
  float c = from->c;
  *((float *)&v3 + 1) = c;
  *(float *)&unsigned int v5 = from->tx;
  *((void *)&v3 + 1) = v5;
  *(float *)&unsigned int v6 = from->b;
  *(float *)&unsigned int v7 = from->d;
  *(float *)&unsigned int v8 = from->ty;
  *(void *)&long long v9 = __PAIR64__(v7, v6);
  *((void *)&v9 + 1) = v8;
  *id v1 = v3;
  v1[1] = v9;
  v1[2] = xmmword_22F227080;
}

uint64_t ARKeyFrame.interfaceOrientation.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

__n64 convertToDisplayCoordinates(_:forKeyFrame:viewSize:)(void *a1, uint64_t a2, CGFloat a3, double a4, double a5, double a6)
{
  CGFloat v9 = 1.0 - a4;
  objc_msgSend(a1, sel_displayTransformForOrientation_viewportSize_, a2, a5, a6);
  v14.CGFloat x = a3;
  v14.CGFloat y = v9;
  CGPoint v10 = CGPointApplyAffineTransform(v14, &v13);
  result.n64_f32[0] = v10.x * a5;
  float v11 = v10.y * a6;
  result.n64_f32[1] = v11;
  return result;
}

void *initializeBufferWithCopyOfBuffer for ARKeyFrame(void *a1, uint64_t a2)
{
  long long v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v5 = v3;
  return a1;
}

void destroy for ARKeyFrame(id *a1)
{
}

uint64_t assignWithCopy for ARKeyFrame(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for ARKeyFrame(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *a2;

  *(void *)(a1 + 8) = a2[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for ARKeyFrame(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ARKeyFrame(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n64 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n64 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ARKeyFrame()
{
  return &type metadata for ARKeyFrame;
}

uint64_t DepthTransformer.deinit()
{
  return v0;
}

double DepthTransformer.jasperToARKitCamera.getter()
{
  if (*(unsigned char *)(v0 + 912))
  {
    *(double *)&long long v1 = sub_22F180948();
    *(_OWORD *)(v0 + 848) = v1;
    *(_OWORD *)(v0 + 864) = v2;
    *(_OWORD *)(v0 + 880) = v3;
    *(_OWORD *)(v0 + 896) = v4;
    *(unsigned char *)(v0 + 912) = 0;
  }
  else
  {
    *(void *)&long long v1 = *(void *)(v0 + 848);
  }
  return *(double *)&v1;
}

double DepthTransformer.arkitToJasperCamera.getter()
{
  if (*(unsigned char *)(v0 + 992))
  {
    *(double *)v2.columns[0].i64 = DepthTransformer.jasperToARKitCamera.getter();
    simd_float4x4 v3 = __invert_f4(v2);
    *(simd_float4x4 *)(v0 + 928) = v3;
    *(unsigned char *)(v0 + 992) = 0;
  }
  else
  {
    v3.columns[0].i64[0] = *(void *)(v0 + 928);
  }
  return *(double *)v3.columns[0].i64;
}

float32x2_t sub_22F1806D0(uint64_t a1, CGFloat a2, CGFloat a3, float a4)
{
  sub_22F180B70(a1, (uint64_t)v23);
  uint64_t v9 = v23[0];
  uint64_t v8 = v23[1];
  uint64_t v11 = v23[2];
  uint64_t v10 = v23[3];
  uint64_t v13 = v23[4];
  uint64_t v12 = v23[5];
  Transformer.viewToCamera.getter(&v22.a);
  CGAffineTransform v24 = v22;
  v26.float x = a2;
  v26.float y = a3;
  CGPoint v14 = CGPointApplyAffineTransform(v26, &v24);
  sub_22F180B70(a1, (uint64_t)&v24);
  if (v25)
  {
    float32x4_t v15 = v4[7];
    float32x4_t v16 = v4[8];
    float32x4_t v17 = v4[9];
  }
  else
  {
    v15.i64[0] = v9;
    v15.i64[1] = v8;
    v16.i64[0] = v11;
    v16.i64[1] = v10;
    v17.i64[0] = v13;
    v17.i64[1] = v12;
  }
  float y = v14.y;
  float x = v14.x;
  return vmul_n_f32((float32x2_t)*(_OWORD *)&vaddq_f32(v17, vmlaq_n_f32(vmulq_n_f32(v15, x), v16, y)), a4);
}

float32x2_t DepthTransformer.worldPoint(screenPoint:depth:cameraToWorld:cameraIntrinsicsInversed:)(uint64_t a1, CGFloat a2, CGFloat a3, float a4, float32x4_t a5, float32x4_t a6, float32x4_t a7, float32x4_t a8)
{
  *(float32x2_t *)v8.f32 = sub_22F1806D0(a1, a2, a3, a4);
  float32x4_t v16 = v8;
  *(double *)v9.i64 = DepthTransformer.jasperToARKitCamera.getter();
  float32x4_t v13 = vaddq_f32(v12, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v9, v16.f32[0]), v10, *(float32x2_t *)v16.f32, 1), v11, v16, 2));
  int32x4_t v14 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a5, v13.f32[0]), a6, *(float32x2_t *)v13.f32, 1), a7, v13, 2), a8, v13, 3);
  return vdiv_f32(*(float32x2_t *)v14.i8, (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v14, 3));
}

float32x2_t DepthTransformer.worldPoint(localPoint:cameraToWorld:)(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5)
{
  *(double *)v5.i64 = DepthTransformer.jasperToARKitCamera.getter();
  float32x4_t v9 = vaddq_f32(v8, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v5, a1.f32[0]), v6, *(float32x2_t *)a1.f32, 1), v7, a1, 2));
  int32x4_t v10 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a2, v9.f32[0]), a3, *(float32x2_t *)v9.f32, 1), a4, v9, 2), a5, v9, 3);
  return vdiv_f32(*(float32x2_t *)v10.i8, (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v10, 3));
}

float32x2_t DepthTransformer.worldPoint(jasperPoint:cameraToWorld:)(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5)
{
  float v12 = 0.001 * a1.f32[0];
  float v13 = vmuls_lane_f32(0.001, *(float32x2_t *)a1.f32, 1);
  float v14 = vmuls_lane_f32(0.001, a1, 2);
  *(double *)v5.i64 = DepthTransformer.jasperToARKitCamera.getter();
  float32x4_t v9 = vaddq_f32(v8, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v5, v12), v6, v13), v7, v14));
  int32x4_t v10 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a2, v9.f32[0]), a3, *(float32x2_t *)v9.f32, 1), a4, v9, 2), a5, v9, 3);
  return vdiv_f32(*(float32x2_t *)v10.i8, (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v10, 3));
}

double sub_22F180948()
{
  sub_22F219EBC((uint64_t)&unk_26E291618);
  float32x4_t v13 = v0;
  sub_22F219EBC((uint64_t)&unk_26E291648);
  float32x4_t v12 = v1;
  sub_22F219EBC((uint64_t)&unk_26E291678);
  float32x4_t v11 = v2;
  sub_22F219EBC((uint64_t)&unk_26E2916A8);
  float32x4_t v10 = v3;
  uint64_t v4 = ARCameraToDisplayRotation();
  if (qword_2686943C8 != -1) {
    swift_once();
  }
  float32x4_t v9 = (float32x4_t)static SIMD3<>.forward;
  __float2 v5 = __sincosf_stret((float)((float)v4 * 0.017453) * 0.5);
  __n128 v6 = (__n128)vmulq_n_f32(v9, v5.__sinval);
  v6.n128_u32[3] = LODWORD(v5.__cosval);
  *(double *)v7.i64 = MEMORY[0x230FB2B40](v6);
  *(void *)&double result = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v13, v7.f32[0]), v12, *(float32x2_t *)v7.f32, 1), v11, v7, 2), v10, v7, 3).u64[0];
  return result;
}

uint64_t DepthTransformer.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void sub_22F180A98(_OWORD *a1@<X8>)
{
}

__n128 sub_22F180AB0(uint64_t a1, uint64_t *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  long long v4 = *(_OWORD *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v7 = *a2;
  *(_OWORD *)(v7 + 848) = *(_OWORD *)a1;
  *(_OWORD *)(v7 + 864) = v3;
  *(_OWORD *)(v7 + 880) = v4;
  *(void *)(v7 + 896) = v6;
  *(void *)(v7 + 904) = v5;
  *(unsigned char *)(v7 + 912) = 0;
  return result;
}

void sub_22F180AD8(_OWORD *a1@<X8>)
{
}

void keypath_getTm(double (*a1)(void)@<X3>, _OWORD *a2@<X8>)
{
  *(double *)&long long v3 = a1();
  *a2 = v3;
  a2[1] = v4;
  a2[2] = v5;
  a2[3] = v6;
}

__n128 sub_22F180B24(uint64_t a1, uint64_t *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  long long v4 = *(_OWORD *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v7 = *a2;
  *(_OWORD *)(v7 + 928) = *(_OWORD *)a1;
  *(_OWORD *)(v7 + 944) = v3;
  *(_OWORD *)(v7 + 960) = v4;
  *(void *)(v7 + 976) = v6;
  *(void *)(v7 + 984) = v5;
  *(unsigned char *)(v7 + 992) = 0;
  return result;
}

uint64_t type metadata accessor for DepthTransformer()
{
  return self;
}

uint64_t sub_22F180B70(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2686948E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id KernelSimpleSobel.__allocating_init(coder:device:)(void *a1, uint64_t a2)
{
  id v4 = objc_msgSend(objc_allocWithZone(v2), sel_initWithCoder_device_, a1, a2);

  swift_unknownObjectRelease();
  return v4;
}

void KernelSimpleSobel.init(coder:device:)()
{
}

id KernelSimpleSobel.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for KernelSimpleSobel()
{
  return self;
}

id sub_22F180DF0(void *a1)
{
  objc_super v2 = v1;
  v16[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v2[OBJC_IVAR____TtC17MeasureFoundation17KernelSimpleSobel_textureCache] = 0;
  uint64_t v5 = qword_268694380;
  uint64_t v6 = v2;
  if (v5 != -1) {
    swift_once();
  }
  uint64_t v7 = (void *)static MetalBundle.library;
  float32x4_t v8 = (void *)sub_22F223A98();
  id v9 = objc_msgSend(v7, sel_newFunctionWithName_, v8);

  if (!v9) {
    __break(1u);
  }
  v16[0] = 0;
  id v10 = objc_msgSend(a1, sel_newComputePipelineStateWithFunction_error_, v9, v16);
  swift_unknownObjectRelease();
  id v11 = v16[0];
  if (v10)
  {
    *(void *)&v6[OBJC_IVAR____TtC17MeasureFoundation17KernelSimpleSobel_computePipeline] = v10;
    id v12 = v11;

    v15.receiver = v6;
    v15.super_class = ObjectType;
    return objc_msgSendSuper2(&v15, sel_initWithDevice_, a1);
  }
  else
  {
    id v14 = v16[0];
    sub_22F2236F8();

    swift_willThrow();
    id result = (id)swift_unexpectedError();
    __break(1u);
  }
  return result;
}

uint64_t Clamped.min.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Clamped.max.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 36));
}

uint64_t Clamped.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = sub_22F2241F8();
  MEMORY[0x270FA5388](v6);
  float32x4_t v8 = (char *)&v12 - v7;
  (*(void (**)(char *, uint64_t))(v9 + 16))((char *)&v12 - v7, v2 + *(int *)(a1 + 40));
  uint64_t v10 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v5);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a2, v8, v5);
  }
  __break(1u);
  return result;
}

uint64_t Clamped.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  sub_22F181614(a1, a2);
  id v4 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8);
  return v4(a1);
}

void (*Clamped.wrappedValue.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v5 = malloc(0x30uLL);
  *a1 = v5;
  *uint64_t v5 = a2;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a2 + 16);
  v5[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v5[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v5[5] = v9;
  Clamped.wrappedValue.getter(a2, (uint64_t)v9);
  return sub_22F18127C;
}

void sub_22F18127C(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  long long v3 = (void *)(*a1)[4];
  id v4 = (void *)(*a1)[5];
  uint64_t v5 = (*a1)[2];
  uint64_t v6 = (*a1)[3];
  uint64_t v7 = **a1;
  if (a2)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[4], v4, v5);
    sub_22F181614((uint64_t)v3, v7);
    size_t v8 = *(void (**)(void *, uint64_t))(v6 + 8);
    v8(v3, v5);
    v8(v4, v5);
  }
  else
  {
    sub_22F181614((*a1)[5], v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t Clamped.init(min:max:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for Clamped();
  uint64_t v12 = *(void *)(a3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(a4 + *(int *)(v8 + 40), 1, 1, a3);
  id v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32);
  v11(a4, a1, a3);
  uint64_t v9 = a4 + *(int *)(v8 + 36);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v11)(v9, a2, a3);
}

uint64_t Clamped.init(wrappedValue:min:max:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for Clamped();
  uint64_t v11 = a5 + *(int *)(v10 + 40);
  uint64_t v12 = *(void *)(a4 - 8);
  float32x4_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56);
  v16(v11, 1, 1, a4);
  float32x4_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32);
  v13(a5, a2, a4);
  v13(a5 + *(int *)(v10 + 36), a3, a4);
  uint64_t v14 = sub_22F2241F8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v11, v14);
  v13(v11, a1, a4);
  return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v16)(v11, 0, 1, a4);
}

uint64_t sub_22F181614(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = sub_22F2241F8();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v11 - v8;
  clamp<A>(_:min:max:)(a1, v2, v2 + *(int *)(a2 + 36), v5, (uint64_t)&v11 - v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v9, 0, 1, v5);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 40))(v2 + *(int *)(a2 + 40), v9, v6);
}

uint64_t type metadata accessor for Clamped()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_22F181768(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 32);
}

uint64_t sub_22F181770()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t v0 = sub_22F2241F8();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return v0;
}

uint64_t *sub_22F181850(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  int v8 = *(_DWORD *)(v6 + 80);
  uint64_t v9 = v8;
  unint64_t v10 = ~(unint64_t)v8;
  uint64_t v11 = v7 + v8;
  if (*(_DWORD *)(v6 + 84)) {
    size_t v12 = *(void *)(v6 + 64);
  }
  else {
    size_t v12 = v7 + 1;
  }
  unint64_t v13 = ((v7 + v8 + ((v7 + v8) & ~(unint64_t)v8)) & ~(unint64_t)v8)
      + v12;
  int v14 = v8 & 0x100000;
  if (v9 > 7 || v14 != 0 || v13 > 0x18)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    uint64_t v18 = v17 + ((v9 + 16) & v10);
    swift_retain();
  }
  else
  {
    float v19 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v19(a1, a2, v5);
    CGAffineTransform v24 = a1;
    unint64_t v20 = ((unint64_t)a1 + v11) & v10;
    unint64_t v21 = ((unint64_t)a2 + v11) & v10;
    v19((uint64_t *)v20, (uint64_t *)v21, v5);
    CGAffineTransform v22 = (void *)((v11 + v20) & v10);
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))((v11 + v21) & v10, 1, v5))
    {
      memcpy(v22, (const void *)((v11 + v21) & v10), v12);
    }
    else
    {
      v19((uint64_t *)v22, (uint64_t *)((v11 + v21) & v10), v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v22, 0, 1, v5);
    }
    return v24;
  }
  return (uint64_t *)v18;
}

uint64_t sub_22F181A14(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = v4;
  size_t v12 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v12(a1, v3);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = v6 + v7;
  uint64_t v9 = (v6 + v7 + a1) & ~v7;
  v12(v9, v3);
  uint64_t v10 = (v8 + v9) & ~v7;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v10, 1, v3);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v12)(v10, v3);
  }
  return result;
}

uint64_t sub_22F181B54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v7(a1, a2, v5);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  size_t v14 = *(void *)(v6 + 64);
  size_t v9 = v14 + v8;
  size_t v10 = (v14 + v8 + a2) & ~v8;
  v7((v14 + v8 + a1) & ~v8, v10, v5);
  uint64_t v11 = (void *)((v14 + v8 + ((v14 + v8 + a1) & ~v8)) & ~v8);
  if ((*(unsigned int (**)(size_t, uint64_t, uint64_t))(v6 + 48))((v14 + v8 + v10) & ~v8, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84)) {
      size_t v12 = v14;
    }
    else {
      size_t v12 = v14 + 1;
    }
    memcpy(v11, (const void *)((v9 + v10) & ~v8), v12);
  }
  else
  {
    v7((uint64_t)v11, (v9 + v10) & ~v8, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v11, 0, 1, v5);
  }
  return a1;
}

uint64_t sub_22F181CD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24);
  v8(a1, a2, v5);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v18 = *(void *)(v6 + 64);
  size_t v10 = (v18 + v9 + a2) & ~v9;
  v8((v18 + v9 + a1) & ~v9, v10, v5);
  uint64_t v11 = (void *)((v18 + v9 + ((v18 + v9 + a1) & ~v9)) & ~v9);
  size_t v12 = (void *)((v18 + v9 + v10) & ~v9);
  unint64_t v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  LODWORD(v10) = v13(v11, 1, v5);
  int v14 = v13(v12, 1, v5);
  if (v10)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v11, v12, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v5);
      return a1;
    }
    int v15 = *(_DWORD *)(v7 + 84);
  }
  else
  {
    if (!v14)
    {
      v8((uint64_t)v11, (uint64_t)v12, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v11, v5);
    int v15 = *(_DWORD *)(v7 + 84);
  }
  if (v15) {
    size_t v16 = v18;
  }
  else {
    size_t v16 = v18 + 1;
  }
  memcpy(v11, v12, v16);
  return a1;
}

uint64_t sub_22F181EBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  v7(a1, a2, v5);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  size_t v14 = *(void *)(v6 + 64);
  size_t v9 = v14 + v8;
  size_t v10 = (v14 + v8 + a2) & ~v8;
  v7((v14 + v8 + a1) & ~v8, v10, v5);
  uint64_t v11 = (void *)((v14 + v8 + ((v14 + v8 + a1) & ~v8)) & ~v8);
  if ((*(unsigned int (**)(size_t, uint64_t, uint64_t))(v6 + 48))((v14 + v8 + v10) & ~v8, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84)) {
      size_t v12 = v14;
    }
    else {
      size_t v12 = v14 + 1;
    }
    memcpy(v11, (const void *)((v9 + v10) & ~v8), v12);
  }
  else
  {
    v7((uint64_t)v11, (v9 + v10) & ~v8, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v11, 0, 1, v5);
  }
  return a1;
}

uint64_t sub_22F18203C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40);
  v8(a1, a2, v5);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v18 = *(void *)(v6 + 64);
  size_t v10 = (v18 + v9 + a2) & ~v9;
  v8((v18 + v9 + a1) & ~v9, v10, v5);
  uint64_t v11 = (void *)((v18 + v9 + ((v18 + v9 + a1) & ~v9)) & ~v9);
  size_t v12 = (void *)((v18 + v9 + v10) & ~v9);
  unint64_t v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  LODWORD(v10) = v13(v11, 1, v5);
  int v14 = v13(v12, 1, v5);
  if (v10)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v11, v12, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v5);
      return a1;
    }
    int v15 = *(_DWORD *)(v7 + 84);
  }
  else
  {
    if (!v14)
    {
      v8((uint64_t)v11, (uint64_t)v12, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v11, v5);
    int v15 = *(_DWORD *)(v7 + 84);
  }
  if (v15) {
    size_t v16 = v18;
  }
  else {
    size_t v16 = v18 + 1;
  }
  memcpy(v11, v12, v16);
  return a1;
}

uint64_t sub_22F182224(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4;
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v4 + 64);
  if (v6) {
    uint64_t v8 = *(void *)(v4 + 64);
  }
  else {
    uint64_t v8 = v7 + 1;
  }
  if (!a2) {
    return 0;
  }
  unsigned int v9 = a2 - v6;
  if (a2 <= v6) {
    goto LABEL_22;
  }
  uint64_t v10 = v8
      + ((v7
        + *(unsigned __int8 *)(v5 + 80)
        + ((v7 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  char v11 = 8 * v10;
  if (v10 <= 3)
  {
    unsigned int v13 = ((v9 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v13))
    {
      int v12 = *(_DWORD *)((char *)a1 + v10);
      if (!v12) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v13 > 0xFF)
    {
      int v12 = *(unsigned __int16 *)((char *)a1 + v10);
      if (!*(unsigned __int16 *)((char *)a1 + v10)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v13 < 2)
    {
LABEL_22:
      if (v6) {
        return (*(uint64_t (**)(void))(v5 + 48))();
      }
      return 0;
    }
  }
  int v12 = *((unsigned __int8 *)a1 + v10);
  if (!*((unsigned char *)a1 + v10)) {
    goto LABEL_22;
  }
LABEL_14:
  int v14 = (v12 - 1) << v11;
  if (v10 > 3) {
    int v14 = 0;
  }
  if (v10)
  {
    if (v10 > 3) {
      LODWORD(v10) = 4;
    }
    switch((int)v10)
    {
      case 2:
        LODWORD(v10) = *a1;
        break;
      case 3:
        LODWORD(v10) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v10) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v10) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v6 + (v10 | v14) + 1;
}

void sub_22F1823A0(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(v6 + 64);
  unint64_t v9 = (v8
      + *(unsigned __int8 *)(v6 + 80)
      + ((v8 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  if (!v7) {
    ++v8;
  }
  size_t v10 = v8 + v9;
  BOOL v11 = a3 >= v7;
  unsigned int v12 = a3 - v7;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v14 = ~v7 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_36;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_23;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_23;
    case 3:
LABEL_36:
      __break(1u);
      JUMPOUT(0x22F1825D8);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_22;
    default:
LABEL_22:
      if (a2)
      {
LABEL_23:
        size_t v18 = *(void (**)(void))(v6 + 56);
        v18();
      }
      return;
  }
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

uint64_t benchmarkResult<A>(block:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a1;
  uint64_t v7 = sub_22F2241F8();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  size_t v10 = (char *)&v19 - v9;
  uint64_t v11 = swift_allocBox();
  uint64_t v13 = v12;
  uint64_t v14 = *(void *)(a4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, a4);
  int v15 = (void *)swift_allocObject();
  v15[2] = a4;
  v15[3] = v11;
  v15[4] = a2;
  v15[5] = a3;
  aBlock[4] = sub_22F182A14;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_22F182A20;
  aBlock[3] = &block_descriptor;
  unsigned int v16 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  uint64_t v17 = benchmarkBlock((uint64_t)v16);
  _Block_release(v16);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v13, v7);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v10, 1, a4);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v20, v10, a4);
    swift_release();
    return v17;
  }
  return result;
}

uint64_t sub_22F182890(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t v6 = sub_22F2241F8();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  uint64_t v10 = swift_projectBox();
  a2();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a4 - 8) + 56))(v9, 0, 1, a4);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 40))(v10, v9, v6);
}

uint64_t sub_22F1829D4()
{
  swift_release();
  swift_release();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_22F182A14()
{
  return sub_22F182890(*(void *)(v0 + 24), *(void (**)(void))(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 16));
}

uint64_t sub_22F182A20(uint64_t a1)
{
  unint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

Swift::String __swiftcall benchmarkFormat(seconds:)(Swift::Double seconds)
{
  if (seconds >= 1.0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_268694980);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_22F227140;
    uint64_t v5 = MEMORY[0x263F8D5B8];
    *(void *)(v4 + 56) = MEMORY[0x263F8D538];
    *(void *)(v4 + 64) = v5;
    if (seconds >= 60.0) {
      *(Swift::Double *)(v4 + 32) = seconds / 60.0;
    }
    else {
      *(Swift::Double *)(v4 + 32) = seconds;
    }
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_268694980);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_22F227140;
    uint64_t v3 = MEMORY[0x263F8D5B8];
    *(void *)(v2 + 56) = MEMORY[0x263F8D538];
    *(void *)(v2 + 64) = v3;
    *(Swift::Double *)(v2 + 32) = seconds * 1000.0;
  }
  uint64_t v6 = sub_22F223AD8();
  result._object = v7;
  result._countAndFlagsBits = v6;
  return result;
}

Swift::Void __swiftcall BenchmarkStats.prettyPrint(_:)(Swift::String a1)
{
  object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  if (qword_268694540 != -1) {
    swift_once();
  }
  uint64_t v4 = qword_26869BEA8;
  uint64_t v5 = unk_26869BEB0;
  sub_22F2243F8();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_22F223B48();
  Swift::Double v6 = v1[5];
  benchmarkFormat(seconds:)(v6);
  sub_22F223B48();
  swift_bridgeObjectRelease();
  uint64_t v7 = sub_22F2240A8();
  _s17MeasureFoundation3LogV3log_4type9isPrivateySS_So03os_d1_E2_taSbtF_0(countAndFlagsBits, (uint64_t)object, v7, 0, v4, v5);
  swift_bridgeObjectRelease();
  uint64_t v8 = qword_26869BEA8;
  uint64_t v9 = unk_26869BEB0;
  swift_bridgeObjectRetain();
  sub_22F223B48();
  benchmarkFormat(seconds:)(v1[4]);
  sub_22F223B48();
  swift_bridgeObjectRelease();
  uint64_t v10 = sub_22F2240A8();
  _s17MeasureFoundation3LogV3log_4type9isPrivateySS_So03os_d1_E2_taSbtF_0(countAndFlagsBits, (uint64_t)object, v10, 0, v8, v9);
  swift_bridgeObjectRelease();
  uint64_t v11 = qword_26869BEA8;
  uint64_t v12 = unk_26869BEB0;
  sub_22F2243F8();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_22F223B48();
  benchmarkFormat(seconds:)(v6);
  sub_22F223B48();
  swift_bridgeObjectRelease();
  uint64_t v13 = sub_22F2240A8();
  _s17MeasureFoundation3LogV3log_4type9isPrivateySS_So03os_d1_E2_taSbtF_0(countAndFlagsBits, (uint64_t)object, v13, 0, v11, v12);
  swift_bridgeObjectRelease();
  uint64_t v14 = qword_26869BEA8;
  uint64_t v15 = unk_26869BEB0;
  sub_22F2243F8();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_22F223B48();
  benchmarkFormat(seconds:)(v1[6]);
  sub_22F223B48();
  swift_bridgeObjectRelease();
  uint64_t v16 = sub_22F2240A8();
  _s17MeasureFoundation3LogV3log_4type9isPrivateySS_So03os_d1_E2_taSbtF_0(countAndFlagsBits, (uint64_t)object, v16, 0, v14, v15);
  swift_bridgeObjectRelease();
  uint64_t v17 = qword_26869BEA8;
  uint64_t v18 = unk_26869BEB0;
  sub_22F2243F8();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_22F223B48();
  sub_22F182F28();
  sub_22F224258();
  sub_22F223B48();
  swift_bridgeObjectRelease();
  uint64_t v19 = sub_22F2240A8();
  _s17MeasureFoundation3LogV3log_4type9isPrivateySS_So03os_d1_E2_taSbtF_0(countAndFlagsBits, (uint64_t)object, v19, 0, v17, v18);
  swift_bridgeObjectRelease();
}

unint64_t sub_22F182F28()
{
  unint64_t result = qword_268694988;
  if (!qword_268694988)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268694988);
  }
  return result;
}

uint64_t MetalNode.id.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 16);
}

uint64_t MetalNode.shouldUpdate.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t MetalNode.shouldUpdate.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 32) = a1;
  return result;
}

uint64_t (*MetalNode.shouldUpdate.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t MetalNode.shouldDraw.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 33);
}

uint64_t MetalNode.shouldDraw.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 33) = a1;
  return result;
}

uint64_t (*MetalNode.shouldDraw.modify())()
{
  return j__swift_endAccess;
}

uint64_t MetalNode.__allocating_init()()
{
  uint64_t result = swift_allocObject();
  uint64_t v1 = MEMORY[0x263F8EE78];
  *(_WORD *)(result + 32) = 257;
  *(unsigned char *)(result + 34) = 1;
  uint64_t v2 = qword_268694990;
  *(void *)(result + 16) = qword_268694990;
  *(void *)(result + 24) = v1;
  if (v2 == -1) {
    __break(1u);
  }
  else {
    qword_268694990 = v2 + 1;
  }
  return result;
}

uint64_t MetalNode.init()()
{
  uint64_t v1 = MEMORY[0x263F8EE78];
  *(_WORD *)(v0 + 32) = 257;
  *(unsigned char *)(v0 + 34) = 1;
  uint64_t v2 = qword_268694990;
  *(void *)(v0 + 16) = qword_268694990;
  *(void *)(v0 + 24) = v1;
  if (v2 == -1)
  {
    __break(1u);
  }
  else
  {
    qword_268694990 = v2 + 1;
    return v0;
  }
  return result;
}

uint64_t MetalNode.isActive.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 34);
}

uint64_t MetalNode.isActive.setter(char a1)
{
  swift_beginAccess();
  v1[32] = a1;
  swift_beginAccess();
  v1[33] = a1;
  uint64_t result = swift_beginAccess();
  v1[34] = a1;
  return result;
}

void (*MetalNode.isActive.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[15] = v1;
  swift_beginAccess();
  *((unsigned char *)v3 + 128) = *(unsigned char *)(v1 + 34);
  return sub_22F1832F0;
}

void sub_22F1832F0(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void *)(*(void *)a1 + 120);
  char v3 = *(unsigned char *)(*(void *)a1 + 128);
  swift_beginAccess();
  *(unsigned char *)(v2 + 32) = v3;
  swift_beginAccess();
  *(unsigned char *)(v2 + 33) = v3;
  *(unsigned char *)(v1[15] + 34) = v3;
  free(v1);
}

uint64_t MetalNode.addChild(_:at:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5 = (void *)(v3 + 24);
  swift_beginAccess();
  unint64_t v6 = *(void *)(v3 + 24);
  if (v6 >> 62) {
    goto LABEL_25;
  }
  uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  for (; v7; uint64_t v7 = sub_22F2245C8())
  {
    uint64_t v8 = (uint64_t *)(a1 + 16);
    if ((v6 & 0xC000000000000001) != 0)
    {
      swift_beginAccess();
      uint64_t v9 = 0;
      while (1)
      {
        uint64_t v10 = MEMORY[0x230FB2E90](v9, v6);
        uint64_t v11 = v9 + 1;
        if (__OFADD__(v9, 1)) {
          break;
        }
        uint64_t v12 = v10;
        swift_beginAccess();
        uint64_t v13 = *(void *)(v12 + 16);
        uint64_t v14 = *v8;
        swift_unknownObjectRelease();
        if (v13 == v14) {
          goto LABEL_22;
        }
        ++v9;
        if (v11 == v7) {
          goto LABEL_13;
        }
      }
      __break(1u);
    }
    else
    {
      swift_beginAccess();
      uint64_t v15 = 0;
      while (1)
      {
        uint64_t v16 = v15 + 1;
        if (__OFADD__(v15, 1)) {
          break;
        }
        uint64_t v17 = *(void *)(v6 + 8 * v15 + 32);
        swift_beginAccess();
        if (*(void *)(v17 + 16) == *v8)
        {
LABEL_22:
          swift_bridgeObjectRelease_n();
          return 0;
        }
        ++v15;
        if (v16 == v7) {
          goto LABEL_13;
        }
      }
    }
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain_n();
  }
LABEL_13:
  swift_bridgeObjectRelease_n();
  if (a3)
  {
    swift_beginAccess();
    uint64_t v19 = swift_retain();
    MEMORY[0x230FB2700](v19);
    if (*(void *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    {
LABEL_20:
      sub_22F223D68();
      sub_22F223CD8();
      goto LABEL_21;
    }
LABEL_30:
    sub_22F223D18();
    goto LABEL_20;
  }
  swift_beginAccess();
  if (*v5 >> 62)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v18 = sub_22F2245C8();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v18 = *(void *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
  }
  if (v18 < a2)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (a2 < 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  sub_22F183C94(a2, a2, a1);
LABEL_21:
  swift_endAccess();
  return 1;
}

uint64_t MetalNode.removeChild(_:)(uint64_t a1)
{
  swift_beginAccess();
  unint64_t v3 = *(void *)(v1 + 24);
  if (v3 >> 62) {
    goto LABEL_13;
  }
  uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_retain();
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = sub_22F2245C8())
  {
    swift_beginAccess();
    unint64_t v5 = 0;
    while (1)
    {
      if ((v3 & 0xC000000000000001) != 0)
      {
        uint64_t v6 = MEMORY[0x230FB2E90](v5, v3);
      }
      else
      {
        uint64_t v6 = *(void *)(v3 + 8 * v5 + 32);
        swift_retain();
      }
      swift_beginAccess();
      uint64_t v7 = *(void *)(v6 + 16);
      uint64_t v8 = *(void *)(a1 + 16);
      swift_release();
      if (v7 == v8)
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_beginAccess();
        sub_22F183878(v5, (uint64_t (*)(uint64_t))sub_22F20C4D0);
        swift_endAccess();
        swift_release();
        return 1;
      }
      unint64_t v9 = v5 + 1;
      if (__OFADD__(v5, 1)) {
        break;
      }
      ++v5;
      if (v9 == v4) {
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_13:
    swift_retain();
    swift_bridgeObjectRetain();
  }
LABEL_10:
  swift_bridgeObjectRelease();
  swift_release();
  return 0;
}

BOOL static MetalNode.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t v4 = *(void *)(a1 + 16);
  swift_beginAccess();
  return v4 == *(void *)(a2 + 16);
}

uint64_t sub_22F183860(unint64_t a1)
{
  return sub_22F183878(a1, (uint64_t (*)(uint64_t))sub_22F20C4D0);
}

uint64_t sub_22F183878(unint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v5 = *v2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v2 = v5;
  if (!result || v5 < 0 || (v5 & 0x4000000000000000) != 0)
  {
    uint64_t result = a2(v5);
    uint64_t v5 = result;
    *uint64_t v2 = result;
  }
  uint64_t v7 = v5 & 0xFFFFFFFFFFFFFF8;
  unint64_t v8 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v8 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v9 = v8 - 1;
    uint64_t v10 = v7 + 8 * a1;
    uint64_t v11 = *(void *)(v10 + 32);
    memmove((void *)(v10 + 32), (const void *)(v10 + 40), 8 * (v8 - 1 - a1));
    *(void *)(v7 + 16) = v9;
    sub_22F223CD8();
    return v11;
  }
  return result;
}

Swift::Void __swiftcall MetalNode.didUpdate(frame:)(ARFrame frame)
{
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 32) == 1)
  {
    swift_beginAccess();
    unint64_t v3 = *(void *)(v1 + 24);
    if (v3 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v4 = sub_22F2245C8();
      if (v4) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v4)
      {
LABEL_4:
        if (v4 < 1)
        {
          __break(1u);
          return;
        }
        for (uint64_t i = 0; i != v4; ++i)
        {
          if ((v3 & 0xC000000000000001) != 0)
          {
            uint64_t v6 = (unsigned char *)MEMORY[0x230FB2E90](i, v3);
          }
          else
          {
            uint64_t v6 = *(unsigned char **)(v3 + 8 * i + 32);
            swift_retain();
          }
          swift_beginAccess();
          if (v6[32] == 1) {
            (*(void (**)(Class))(*(void *)v6 + 264))(frame.super.isa);
          }
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
  }
}

uint64_t MetalNode.draw(commandBuffer:)(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  if (*(unsigned char *)(v1 + 33) == 1)
  {
    swift_beginAccess();
    unint64_t v4 = *(void *)(v1 + 24);
    if (v4 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = sub_22F2245C8();
      uint64_t v5 = result;
      if (result) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v5)
      {
LABEL_4:
        if (v5 < 1)
        {
          __break(1u);
          return result;
        }
        for (uint64_t i = 0; i != v5; ++i)
        {
          if ((v4 & 0xC000000000000001) != 0)
          {
            uint64_t v7 = (unsigned char *)MEMORY[0x230FB2E90](i, v4);
          }
          else
          {
            uint64_t v7 = *(unsigned char **)(v4 + 8 * i + 32);
            swift_retain();
          }
          swift_beginAccess();
          if (v7[33] == 1) {
            (*(void (**)(uint64_t))(*(void *)v7 + 272))(a1);
          }
          swift_release();
        }
      }
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t MetalNode.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MetalNode.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

BOOL sub_22F183C30(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  uint64_t v4 = *(void *)(v2 + 16);
  swift_beginAccess();
  return v4 == *(void *)(v3 + 16);
}

char *sub_22F183C94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = a3;
    uint64_t v5 = a2;
    uint64_t v6 = a1;
    unint64_t v7 = *v4;
    if (!(*v4 >> 62))
    {
      if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v22 = sub_22F2245C8();
  swift_bridgeObjectRelease();
  if (v22 < v5) {
    goto LABEL_32;
  }
LABEL_4:
  uint64_t v9 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  uint64_t v8 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_34:
    __break(1u);
LABEL_35:
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_22F2245C8();
    swift_bridgeObjectRelease();
    uint64_t v11 = v10 + v8;
    if (!__OFADD__(v10, v8)) {
      goto LABEL_8;
    }
LABEL_37:
    __break(1u);
LABEL_38:
    swift_bridgeObjectRetain();
    uint64_t v14 = sub_22F2245C8();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  unint64_t v7 = *v4;
  if (*v4 >> 62) {
    goto LABEL_35;
  }
  uint64_t v10 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v11 = v10 + v8;
  if (__OFADD__(v10, v8)) {
    goto LABEL_37;
  }
LABEL_8:
  unint64_t v7 = *v4;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v4 = v7;
  uint64_t v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
  {
    uint64_t v13 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v11 <= *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_18;
    }
    uint64_t v10 = 1;
  }
  if (v7 >> 62) {
    goto LABEL_38;
  }
  uint64_t v14 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v14 <= v11) {
    uint64_t v14 = v11;
  }
  swift_bridgeObjectRetain();
  unint64_t v7 = MEMORY[0x230FB2EA0](v10, v14, 1, v7);
  swift_bridgeObjectRelease();
  *uint64_t v4 = v7;
  uint64_t v13 = v7 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  uint64_t v15 = (void *)(v13 + 32 + 8 * v6);
  type metadata accessor for MetalNode();
  swift_arrayDestroy();
  if (v8)
  {
    if (v7 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v23 = sub_22F2245C8();
      swift_bridgeObjectRelease();
      uint64_t v17 = v23 - v5;
      if (!__OFSUB__(v23, v5)) {
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v16 = *(void *)(v13 + 16);
      uint64_t v17 = v16 - v5;
      if (!__OFSUB__(v16, v5))
      {
LABEL_21:
        uint64_t result = (char *)(v15 + 1);
        uint64_t v19 = (char *)(v13 + 32 + 8 * v5);
        if (v15 + 1 != (void *)v19 || result >= &v19[8 * v17]) {
          uint64_t result = (char *)memmove(result, v19, 8 * v17);
        }
        if (!(v7 >> 62))
        {
          uint64_t v20 = *(void *)(v13 + 16);
          uint64_t v21 = v20 + v8;
          if (!__OFADD__(v20, v8))
          {
LABEL_26:
            *(void *)(v13 + 16) = v21;
            goto LABEL_27;
          }
LABEL_44:
          __break(1u);
          return result;
        }
LABEL_42:
        swift_bridgeObjectRetain();
        uint64_t v24 = sub_22F2245C8();
        uint64_t result = (char *)swift_bridgeObjectRelease();
        uint64_t v21 = v24 + v8;
        if (!__OFADD__(v24, v8)) {
          goto LABEL_26;
        }
        goto LABEL_44;
      }
    }
    __break(1u);
    goto LABEL_42;
  }
LABEL_27:
  *uint64_t v15 = v3;
  return (char *)sub_22F223CD8();
}

uint64_t sub_22F183F28@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(void *)(v3 + 16);
  return result;
}

uint64_t sub_22F183F70(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(void *)(v3 + 16) = v2;
  return result;
}

uint64_t type metadata accessor for MetalNode()
{
  return self;
}

unint64_t sub_22F183FD8(unint64_t result, int64_t a2)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v4 = *v2;
  int64_t v5 = *(void *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v6 = result;
  unint64_t v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  unint64_t v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v9 <= *(void *)(v4 + 24) >> 1)
  {
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    if (v5 <= v9) {
      int64_t v10 = v5 + v8;
    }
    else {
      int64_t v10 = v5;
    }
    uint64_t result = (unint64_t)sub_22F19B10C((char *)result, v10, 1, (char *)v4);
    unint64_t v4 = result;
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = *(void *)(v4 + 16);
  BOOL v12 = __OFSUB__(v11, a2);
  uint64_t v13 = v11 - a2;
  if (v12) {
    goto LABEL_26;
  }
  uint64_t result = v4 + 32 + 16 * v6;
  uint64_t v14 = (const void *)(v4 + 32 + 16 * a2);
  if (v6 != a2 || result >= (unint64_t)v14 + 16 * v13) {
    uint64_t result = (unint64_t)memmove((void *)result, v14, 16 * v13);
  }
  uint64_t v15 = *(void *)(v4 + 16);
  BOOL v12 = __OFADD__(v15, v8);
  uint64_t v16 = v15 + v8;
  if (!v12)
  {
    *(void *)(v4 + 16) = v16;
LABEL_20:
    *uint64_t v2 = v4;
    return result;
  }
LABEL_27:
  __break(1u);
  return result;
}

unint64_t sub_22F1840E0(unint64_t result, int64_t a2)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v4 = *v2;
  int64_t v5 = *(void *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v6 = result;
  unint64_t v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  unint64_t v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v9 <= *(void *)(v4 + 24) >> 1)
  {
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    if (v5 <= v9) {
      int64_t v10 = v5 + v8;
    }
    else {
      int64_t v10 = v5;
    }
    uint64_t result = (unint64_t)sub_22F19B630((char *)result, v10, 1, (char *)v4);
    unint64_t v4 = result;
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = *(void *)(v4 + 16);
  BOOL v12 = __OFSUB__(v11, a2);
  uint64_t v13 = v11 - a2;
  if (v12) {
    goto LABEL_26;
  }
  uint64_t result = v4 + 32 + 16 * v6;
  uint64_t v14 = (const void *)(v4 + 32 + 16 * a2);
  if (v6 != a2 || result >= (unint64_t)v14 + 16 * v13) {
    uint64_t result = (unint64_t)memmove((void *)result, v14, 16 * v13);
  }
  uint64_t v15 = *(void *)(v4 + 16);
  BOOL v12 = __OFADD__(v15, v8);
  uint64_t v16 = v15 + v8;
  if (!v12)
  {
    *(void *)(v4 + 16) = v16;
LABEL_20:
    *uint64_t v2 = v4;
    return result;
  }
LABEL_27:
  __break(1u);
  return result;
}

unint64_t sub_22F1841E8(unint64_t result, int64_t a2)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v4 = *v2;
  int64_t v5 = *(void *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v6 = result;
  unint64_t v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  unint64_t v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v9 <= *(void *)(v4 + 24) >> 1)
  {
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    if (v5 <= v9) {
      int64_t v10 = v5 + v8;
    }
    else {
      int64_t v10 = v5;
    }
    uint64_t result = (unint64_t)sub_22F19B63C((char *)result, v10, 1, (char *)v4);
    unint64_t v4 = result;
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = *(void *)(v4 + 16);
  BOOL v12 = __OFSUB__(v11, a2);
  uint64_t v13 = v11 - a2;
  if (v12) {
    goto LABEL_26;
  }
  uint64_t result = v4 + 32 + 4 * v6;
  uint64_t v14 = (const void *)(v4 + 32 + 4 * a2);
  if (v6 != a2 || result >= (unint64_t)v14 + 4 * v13) {
    uint64_t result = (unint64_t)memmove((void *)result, v14, 4 * v13);
  }
  uint64_t v15 = *(void *)(v4 + 16);
  BOOL v12 = __OFADD__(v15, v8);
  uint64_t v16 = v15 + v8;
  if (!v12)
  {
    *(void *)(v4 + 16) = v16;
LABEL_20:
    *uint64_t v2 = v4;
    return result;
  }
LABEL_27:
  __break(1u);
  return result;
}

unint64_t sub_22F1842F0(unint64_t result, int64_t a2)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v4 = *v2;
  int64_t v5 = *(void *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v6 = result;
  unint64_t v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  unint64_t v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v9 <= *(void *)(v4 + 24) >> 1)
  {
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    if (v5 <= v9) {
      int64_t v10 = v5 + v8;
    }
    else {
      int64_t v10 = v5;
    }
    uint64_t result = (unint64_t)sub_22F19B32C((char *)result, v10, 1, (char *)v4);
    unint64_t v4 = result;
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = *(void *)(v4 + 16);
  BOOL v12 = __OFSUB__(v11, a2);
  uint64_t v13 = v11 - a2;
  if (v12) {
    goto LABEL_26;
  }
  uint64_t result = v4 + 32 + 8 * v6;
  uint64_t v14 = (const void *)(v4 + 32 + 8 * a2);
  if (v6 != a2 || result >= (unint64_t)v14 + 8 * v13) {
    uint64_t result = (unint64_t)memmove((void *)result, v14, 8 * v13);
  }
  uint64_t v15 = *(void *)(v4 + 16);
  BOOL v12 = __OFADD__(v15, v8);
  uint64_t v16 = v15 + v8;
  if (!v12)
  {
    *(void *)(v4 + 16) = v16;
LABEL_20:
    *uint64_t v2 = v4;
    return result;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_22F1843F8(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = a2;
    uint64_t v4 = a1;
    unint64_t v5 = *v3;
    if (!(*v3 >> 62))
    {
      if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v19 = sub_22F2245C8();
  swift_bridgeObjectRelease();
  if (v19 < v2) {
    goto LABEL_32;
  }
LABEL_4:
  uint64_t v7 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  uint64_t v6 = v4 - v2;
  if (__OFSUB__(0, v7))
  {
LABEL_34:
    __break(1u);
LABEL_35:
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_22F2245C8();
    swift_bridgeObjectRelease();
    uint64_t v9 = v8 + v6;
    if (!__OFADD__(v8, v6)) {
      goto LABEL_8;
    }
LABEL_37:
    __break(1u);
LABEL_38:
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_22F2245C8();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  unint64_t v5 = *v3;
  if (*v3 >> 62) {
    goto LABEL_35;
  }
  uint64_t v8 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v9 = v8 - v7;
  if (__OFADD__(v8, v6)) {
    goto LABEL_37;
  }
LABEL_8:
  unint64_t v5 = *v3;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v3 = v5;
  uint64_t v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    uint64_t v11 = v5 & 0xFFFFFFFFFFFFFF8;
    if (v9 <= *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_18;
    }
    uint64_t v8 = 1;
  }
  if (v5 >> 62) {
    goto LABEL_38;
  }
  uint64_t v12 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v12 <= v9) {
    uint64_t v12 = v9;
  }
  swift_bridgeObjectRetain();
  unint64_t v5 = MEMORY[0x230FB2EA0](v8, v12, 1, v5);
  swift_bridgeObjectRelease();
  *uint64_t v3 = v5;
  uint64_t v11 = v5 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  type metadata accessor for PatchTracker.Keyframe();
  uint64_t result = swift_arrayDestroy();
  if (v6)
  {
    if (v5 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v20 = sub_22F2245C8();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v15 = v20 - v2;
      if (!__OFSUB__(v20, v2)) {
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v14 = *(void *)(v11 + 16);
      uint64_t v15 = v14 - v2;
      if (!__OFSUB__(v14, v2))
      {
LABEL_21:
        uint64_t v16 = (const void *)(v11 + 32 + 8 * v2);
        if (v4 != v2 || v11 + 32 + 8 * v4 >= (unint64_t)v16 + 8 * v15) {
          uint64_t result = (uint64_t)memmove((void *)(v11 + 32 + 8 * v4), v16, 8 * v15);
        }
        if (!(v5 >> 62))
        {
          uint64_t v17 = *(void *)(v11 + 16);
          uint64_t v18 = v17 + v6;
          if (!__OFADD__(v17, v6))
          {
LABEL_26:
            *(void *)(v11 + 16) = v18;
            goto LABEL_27;
          }
LABEL_44:
          __break(1u);
          return result;
        }
LABEL_42:
        swift_bridgeObjectRetain();
        uint64_t v21 = sub_22F2245C8();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v18 = v21 + v6;
        if (!__OFADD__(v21, v6)) {
          goto LABEL_26;
        }
        goto LABEL_44;
      }
    }
    __break(1u);
    goto LABEL_42;
  }
LABEL_27:
  return sub_22F223CD8();
}

Swift::Void __swiftcall CALayer.pauseAnimations()()
{
  objc_msgSend(v0, sel_speed);
  if (v1 != 0.0)
  {
    objc_msgSend(v0, sel_convertTime_fromLayer_, 0, CACurrentMediaTime());
    double v3 = v2;
    objc_msgSend(v0, sel_setSpeed_, 0.0);
    objc_msgSend(v0, sel_setTimeOffset_, v3);
  }
}

Swift::Bool __swiftcall CALayer.areAnimationsPaused()()
{
  objc_msgSend(v0, sel_speed);
  return v1 == 0.0;
}

Swift::Void __swiftcall CALayer.resumeAnimations()()
{
  objc_msgSend(v0, sel_speed);
  if (v1 == 0.0)
  {
    objc_msgSend(v0, sel_timeOffset);
    double v3 = v2;
    LODWORD(v2) = 1.0;
    objc_msgSend(v0, sel_setSpeed_, v2);
    objc_msgSend(v0, sel_setTimeOffset_, 0.0);
    objc_msgSend(v0, sel_setBeginTime_, 0.0);
    objc_msgSend(v0, sel_convertTime_fromLayer_, 0, CACurrentMediaTime());
    double v5 = v4 - v3;
    objc_msgSend(v0, sel_setBeginTime_, v5);
  }
}

void sub_22F184814()
{
  static CGFloat.pi2 = 0x401921FB54442D18;
}

uint64_t *CGFloat.pi2.unsafeMutableAddressor()
{
  if (qword_268694350 != -1) {
    swift_once();
  }
  return &static CGFloat.pi2;
}

double static CGFloat.pi2.getter()
{
  return sub_22F1849D0(&qword_268694350, (uint64_t)&static CGFloat.pi2);
}

void *CGFloat.piDiv2.unsafeMutableAddressor()
{
  return &static CGFloat.piDiv2;
}

double static CGFloat.piDiv2.getter()
{
  return 1.57079633;
}

void sub_22F1848B8()
{
  static CGFloat.degree2Radian = 0x3F91DF46A2529D39;
}

uint64_t *CGFloat.degree2Radian.unsafeMutableAddressor()
{
  if (qword_268694358 != -1) {
    swift_once();
  }
  return &static CGFloat.degree2Radian;
}

double static CGFloat.degree2Radian.getter()
{
  return sub_22F1849D0(&qword_268694358, (uint64_t)&static CGFloat.degree2Radian);
}

void sub_22F184944()
{
  static CGFloat.radian2Degree = 0x404CA5DC1A63C1F8;
}

uint64_t *CGFloat.radian2Degree.unsafeMutableAddressor()
{
  if (qword_268694360 != -1) {
    swift_once();
  }
  return &static CGFloat.radian2Degree;
}

double static CGFloat.radian2Degree.getter()
{
  return sub_22F1849D0(&qword_268694360, (uint64_t)&static CGFloat.radian2Degree);
}

double sub_22F1849D0(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  return *(double *)a2;
}

float CGFloat.float.getter(double a1)
{
  return a1;
}

float64_t CGPoint.floats.getter(float64x2_t a1, float64_t a2)
{
  a1.f64[1] = a2;
  *(float32x2_t *)&a1.f64[0] = vcvt_f32_f64(a1);
  return a1.f64[0];
}

double CGPoint.init(xz:)(float a1)
{
  return a1;
}

double CGPoint.init(xy:)(float32x2_t a1)
{
  *(void *)&double result = *(_OWORD *)&vcvtq_f64_f32(a1);
  return result;
}

CGPoint __swiftcall CGPoint.add(_:)(CGPoint a1)
{
  double v3 = a1.x + v1;
  double v4 = a1.y + v2;
  result.float y = v4;
  result.float x = v3;
  return result;
}

CGPoint __swiftcall CGPoint.subtract(_:)(CGPoint a1)
{
  double v3 = v1 - a1.x;
  double v4 = v2 - a1.y;
  result.float y = v4;
  result.float x = v3;
  return result;
}

CGPoint __swiftcall CGPoint.multiply(by:)(Swift::Float by)
{
  double v3 = by;
  double v4 = by * v1;
  double v5 = v3 * v2;
  result.float y = v5;
  result.float x = v4;
  return result;
}

CGPoint __swiftcall CGPoint.divide(by:)(Swift::Float by)
{
  double v3 = by;
  double v4 = v1 / by;
  double v5 = v2 / v3;
  result.float y = v5;
  result.float x = v4;
  return result;
}

double static CGPoint.- prefix(_:)(double a1)
{
  return -a1;
}

double static CGPoint.+= infix(_:_:)(double *a1, double a2, double a3)
{
  double result = *a1 + a2;
  double v4 = a1[1] + a3;
  *a1 = result;
  a1[1] = v4;
  return result;
}

float static CGPoint.dot(_:_:)(double a1, double a2, double a3, double a4)
{
  float v4 = a1 * a3;
  float v5 = a2 * a4;
  return v4 + v5;
}

float static CGPoint.distanceSq(_:_:)(double a1, double a2, double a3, double a4)
{
  float v4 = (a3 - a1) * (a3 - a1);
  float v5 = (a4 - a2) * (a4 - a2);
  return v4 + v5;
}

float static CGPoint.distance(_:_:)(double a1, double a2, double a3, double a4)
{
  float v4 = (a3 - a1) * (a3 - a1);
  float v5 = (a4 - a2) * (a4 - a2);
  return sqrtf(v4 + v5);
}

Swift::Float __swiftcall CGPoint.length()()
{
  float v2 = v0 * v0;
  float v3 = v1 * v1;
  return sqrtf(v2 + v3);
}

double static CGPoint.rotatePoint(target:aroundOrigin:byRadians:)(double a1, double a2, double a3, double a4, double a5)
{
  long double v7 = a1 - a3;
  double v8 = sqrt(v7 * v7 + (a2 - a4) * (a2 - a4));
  long double v9 = atan2(a2 - a4, v7);
  return v8 * __sincos_stret(v9 + a5).__cosval + a3;
}

CGPoint __swiftcall CGPoint.normalized()()
{
  float v2 = v0 * v0;
  float v3 = v1 * v1;
  float v4 = sqrtf(v2 + v3);
  double v5 = 0.0;
  double v6 = 0.0;
  if (v4 > 0.0)
  {
    double v5 = v0 / v4;
    double v6 = v1 / v4;
  }
  double v7 = v5;
  double v8 = v6;
  result.float y = v8;
  result.float x = v7;
  return result;
}

Swift::Float __swiftcall CGPoint.lengthSq()()
{
  float v2 = v0 * v0;
  float v3 = v1 * v1;
  return v2 + v3;
}

double CGPoint.elementSum()(double a1, double a2)
{
  return a1 + a2;
}

CGPoint __swiftcall CGPoint.round()()
{
  double v2 = round(v0);
  double v3 = round(v1);
  result.float y = v3;
  result.float x = v2;
  return result;
}

CGPoint __swiftcall CGPoint.ceil()()
{
  double v2 = ceil(v0);
  double v3 = ceil(v1);
  result.float y = v3;
  result.float x = v2;
  return result;
}

CGPoint __swiftcall CGPoint.floor()()
{
  double v2 = floor(v0);
  double v3 = floor(v1);
  result.float y = v3;
  result.float x = v2;
  return result;
}

double CGPoint.init(_:)(float32x2_t a1)
{
  *(void *)&double result = *(_OWORD *)&vcvtq_f64_f32(a1);
  return result;
}

double CGPoint.init(_:)(float a1)
{
  return (double)SLODWORD(a1);
}

double CGPoint.init(_:)(int64x2_t a1)
{
  *(void *)&double result = *(_OWORD *)&vcvtq_f64_s64(a1);
  return result;
}

double CGPoint.lerped<A>(newValue:t:)(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  uint64_t v18 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v11 = *(void *)(a2 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v18 - v15, a1, a2);
  sub_22F184EB8();
  sub_22F223948();
  double v16 = v20 * a3;
  swift_getAssociatedConformanceWitness();
  sub_22F224778();
  sub_22F224708();
  sub_22F224568();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, a2);
  sub_22F223948();
  return v16 + v19 * a5;
}

unint64_t sub_22F184EB8()
{
  unint64_t result = qword_268694998;
  if (!qword_268694998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268694998);
  }
  return result;
}

void sub_22F184F0C(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(double *)a4 = CGPoint.lerped<A>(newValue:t:)(a2, a3, *a1, a1[1], *v4);
  *(void *)(a4 + 8) = v6;
}

__C::CGRect __swiftcall CGRect.init(centerPoint:size:)(CGPoint centerPoint, CGSize size)
{
  double v2 = centerPoint.x - size.width * 0.5;
  double v3 = centerPoint.y - size.height * 0.5;
  result.size.CGFloat height = size.height;
  result.size.CGFloat width = size.width;
  result.origin.float y = v3;
  result.origin.float x = v2;
  return result;
}

__C::CGRect __swiftcall CGRect.init(p1:p2:)(CGPoint p1, CGPoint p2)
{
  if (p2.x >= p1.x) {
    double x = p1.x;
  }
  else {
    double x = p2.x;
  }
  if (p2.y >= p1.y) {
    double y = p1.y;
  }
  else {
    double y = p2.y;
  }
  double v4 = vabdd_f64(p1.x, p2.x);
  double v5 = vabdd_f64(p1.y, p2.y);
  double v6 = x;
  double v7 = y;
  result.size.CGFloat height = v5;
  result.size.CGFloat width = v4;
  result.origin.double y = v7;
  result.origin.double x = v6;
  return result;
}

double CGRect.centerPoint.getter(double a1, double a2, double a3)
{
  return a3 * 0.5 + a1;
}

void CGRect.ints.getter(double a1, double a2, CGFloat a3, CGFloat a4)
{
  double v4 = round(a1);
  if ((~*(void *)&v4 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v4 <= -9.22337204e18)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v4 >= 9.22337204e18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  double v7 = round(a2);
  if ((~*(void *)&v7 & 0x7FF0000000000000) == 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v7 <= -9.22337204e18)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v7 >= 9.22337204e18)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  double v10 = round(CGRectGetWidth(*(CGRect *)&a1));
  if ((~*(void *)&v10 & 0x7FF0000000000000) == 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v10 <= -9.22337204e18)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v10 >= 9.22337204e18)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v12.origin.double x = a1;
  v12.origin.double y = a2;
  v12.size.CGFloat width = a3;
  v12.size.CGFloat height = a4;
  double v11 = round(CGRectGetHeight(v12));
  if ((~*(void *)&v11 & 0x7FF0000000000000) == 0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v11 <= -9.22337204e18)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v11 >= 9.22337204e18) {
LABEL_25:
  }
    __break(1u);
}

double CGRect.floats.getter(float64x2_t a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  CGFloat v9 = a1.f64[0];
  a1.f64[1] = a2;
  int32x2_t v12 = (int32x2_t)vcvt_f32_f64(a1);
  CGFloat Width = CGRectGetWidth(*(CGRect *)a1.f64);
  v13.origin.double x = v9;
  v13.origin.double y = a2;
  v13.size.CGFloat width = a3;
  v13.size.CGFloat height = a4;
  CGFloat Height = CGRectGetHeight(v13);
  v7.f64[0] = Width;
  v7.f64[1] = Height;
  *(void *)&double result = vcvt_hight_f32_f64(v12, v7).u64[0];
  return result;
}

__C::CGRect __swiftcall CGRect.round()()
{
  double v4 = round(v0);
  double v5 = round(v1);
  double v6 = round(v2);
  double v7 = round(v3);
  result.size.CGFloat height = v7;
  result.size.CGFloat width = v6;
  result.origin.double y = v5;
  result.origin.double x = v4;
  return result;
}

__C::CGRect __swiftcall CGRect.ceil()()
{
  double v4 = ceil(v0);
  double v5 = ceil(v1);
  double v6 = ceil(v2);
  double v7 = ceil(v3);
  result.size.CGFloat height = v7;
  result.size.CGFloat width = v6;
  result.origin.double y = v5;
  result.origin.double x = v4;
  return result;
}

void CGRect.rotated(byRadians:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  v14.origin.double x = a2;
  v14.origin.double y = a3;
  v14.size.CGFloat width = a4;
  v14.size.CGFloat height = a5;
  double MidX = CGRectGetMidX(v14);
  v15.origin.double x = a2;
  v15.origin.double y = a3;
  v15.size.CGFloat width = a4;
  v15.size.CGFloat height = a5;
  double MidY = CGRectGetMidY(v15);
  CGAffineTransformMakeTranslation(&v13, MidX, MidY);
  CGAffineTransformRotate(&v12, &v13, a1);
  CGAffineTransform v13 = v12;
  CGAffineTransformTranslate(&v12, &v13, -MidX, -MidY);
  CGAffineTransform v13 = v12;
  v16.origin.double x = a2;
  v16.origin.double y = a3;
  v16.size.CGFloat width = a4;
  v16.size.CGFloat height = a5;
  CGRectApplyAffineTransform(v16, &v13);
}

double CGRect.withWidth(_:)(double a1, double a2)
{
  return a2;
}

double CGRect.withHeight(_:)(double a1, double a2)
{
  return a2;
}

unint64_t sub_22F1852E4(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    double v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_268694A28);
  uint64_t v2 = sub_22F2245F8();
  double v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_22F186CEC(v6, (uint64_t)&v13, &qword_268694A30);
    uint64_t v7 = v13;
    unint64_t result = sub_22F18DD20(v13);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v7;
    unint64_t result = (unint64_t)sub_22F186BD8(&v14, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_22F185414(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2686949D8);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2686949E0);
  uint64_t v6 = sub_22F2245F8();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  char v9 = &v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v24[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_22F186CEC(v12, (uint64_t)v5, &qword_2686949D8);
    unint64_t result = sub_22F18DD24((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = sub_22F223848();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    uint64_t v19 = v7[7] + 8 * v16;
    int v20 = *((_DWORD *)v9 + 1);
    *(unsigned char *)uint64_t v19 = *v9;
    *(_DWORD *)(v19 + 4) = v20;
    uint64_t v21 = v7[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_11;
    }
    v7[2] = v23;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_22F185618(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2686949C0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2686949C8);
  uint64_t v6 = sub_22F2245F8();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_22F186CEC(v12, (uint64_t)v5, &qword_2686949C0);
    unint64_t result = sub_22F18DD24((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = sub_22F223848();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    *(void *)(v7[7] + 8 * v16) = *(void *)&v5[v9];
    uint64_t v19 = v7[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_22F18580C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_268694A38);
  uint64_t v2 = (void *)sub_22F2245F8();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = (id)*(v4 - 1);
    unint64_t result = sub_22F18DEA0((uint64_t)v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v2[6] + v9) = v6;
    *(void *)(v2[7] + v9) = v5;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v4 += 2;
    v2[2] = v12;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_22F18590C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_268694A18);
  uint64_t v2 = sub_22F2245F8();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_22F186CEC(v6, (uint64_t)&v15, &qword_268694A20);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_22F18DE28(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    BOOL v11 = (uint64_t *)(v3[6] + 16 * result);
    *BOOL v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_22F186BD8(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_22F185A44(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_268694A00);
  uint64_t v2 = (void *)sub_22F2245F8();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_22F18DE28(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v10 = (uint64_t *)(v2[6] + 16 * result);
    *char v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_22F185B58(uint64_t a1)
{
  return sub_22F185CB0(a1, &qword_2686949F8);
}

unint64_t sub_22F185B64(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_268694A10);
  uint64_t v2 = (void *)sub_22F2245F8();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v5 = (uint64_t)*(v4 - 2);
    uint64_t v6 = (uint64_t)*(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    id v8 = v7;
    unint64_t result = sub_22F18DE28(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    *(void *)(v2[7] + 8 * result) = v8;
    uint64_t v12 = v2[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_22F185C80(uint64_t a1)
{
  return sub_22F185CB0(a1, &qword_268694A08);
}

unint64_t sub_22F185C8C(uint64_t a1)
{
  return sub_22F185CB0(a1, &qword_2686949F0);
}

unint64_t sub_22F185C98(uint64_t a1)
{
  return sub_22F185CB0(a1, &qword_2686949E8);
}

unint64_t sub_22F185CA4(uint64_t a1)
{
  return sub_22F185CB0(a1, &qword_2686949B8);
}

unint64_t sub_22F185CB0(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v3 = (void *)sub_22F2245F8();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  uint64_t v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v6 = *(v5 - 2);
    uint64_t v7 = *(v5 - 1);
    uint64_t v8 = *v5;
    swift_bridgeObjectRetain();
    unint64_t result = sub_22F18DE28(v6, v7);
    if (v10) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v6;
    v11[1] = v7;
    *(void *)(v3[7] + 8 * result) = v8;
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v5 += 3;
    v3[2] = v14;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_22F185DC0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2686949A8);
  uint64_t v2 = sub_22F2245F8();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_22F186CEC(v6, (uint64_t)&v13, &qword_2686949B0);
    uint64_t v7 = v13;
    unint64_t result = sub_22F18DEA0(v13);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v7;
    unint64_t result = (unint64_t)sub_22F186BD8(&v14, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t makeIOSurfaceTexture(device:width:height:pixelFormat:usage:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  id v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F12A50]), sel_init);
  objc_msgSend(v12, sel_setTextureType_, 2);
  objc_msgSend(v12, sel_setPixelFormat_, a4);
  objc_msgSend(v12, sel_setWidth_, a2);
  objc_msgSend(v12, sel_setHeight_, a3);
  if (a6) {
    uint64_t v13 = 3;
  }
  else {
    uint64_t v13 = a5;
  }
  objc_msgSend(v12, sel_setUsage_, v13);
  objc_msgSend(v12, sel_setSampleCount_, 1);
  uint64_t v14 = bytesPerPixel(of:)(a4);
  uint64_t result = a2 * v14;
  if ((unsigned __int128)(a2 * (__int128)v14) >> 64 != (a2 * v14) >> 63)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t AlignedBytesPerRow = CGBitmapGetAlignedBytesPerRow();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2686949A0);
  uint64_t result = swift_initStackObject();
  *(_OWORD *)(result + 16) = xmmword_22F2271F0;
  long long v17 = (void *)*MEMORY[0x263F0EF50];
  *(void *)(result + 32) = *MEMORY[0x263F0EF50];
  *(void *)(result + 40) = a2;
  uint64_t v18 = (void *)*MEMORY[0x263F0EDF8];
  *(void *)(result + 48) = *MEMORY[0x263F0EDF8];
  *(void *)(result + 56) = a3;
  uint64_t v19 = (void *)*MEMORY[0x263F0ED50];
  BOOL v20 = (void **)MEMORY[0x263F0ED30];
  *(void *)(result + 64) = *MEMORY[0x263F0ED50];
  *(void *)(result + 72) = AlignedBytesPerRow;
  uint64_t v21 = *v20;
  *(void *)(result + 80) = *v20;
  uint64_t v22 = AlignedBytesPerRow * a3;
  if ((unsigned __int128)(AlignedBytesPerRow * (__int128)a3) >> 64 != (AlignedBytesPerRow * a3) >> 63)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  uint64_t v23 = result;
  uint64_t v24 = (void *)*MEMORY[0x263F0ED48];
  *(void *)(result + 88) = v22;
  *(void *)(result + 96) = v24;
  *(void *)(result + 104) = v14;
  id v25 = v17;
  id v26 = v18;
  id v27 = v19;
  id v28 = v21;
  id v29 = v24;
  sub_22F18580C(v23);
  type metadata accessor for CFString(0);
  sub_22F186B80();
  CFDictionaryRef v30 = (const __CFDictionary *)sub_22F223958();
  swift_bridgeObjectRelease();
  IOSurfaceRef v31 = IOSurfaceCreate(v30);
  if (v31)
  {
    IOSurfaceRef v32 = v31;
    id v33 = objc_msgSend(a1, sel_newTextureWithDescriptor_iosurface_plane_, v12, v31, 0);
  }
  else
  {

    return 0;
  }
  return (uint64_t)v33;
}

uint64_t bytesPerPixel(of:)(uint64_t a1)
{
  if (a1 <= 104)
  {
    uint64_t v1 = 4;
    switch(a1)
    {
      case 1:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
        return 1;
      case 55:
      case 80:
        return v1;
      default:
        goto LABEL_10;
    }
  }
  if (a1 == 125)
  {
    return 16;
  }
  else
  {
    if (a1 != 115 && a1 != 105)
    {
LABEL_10:
      sub_22F2243F8();
      sub_22F223B48();
      type metadata accessor for MTLPixelFormat(0);
      sub_22F224508();
      sub_22F224538();
      __break(1u);
      JUMPOUT(0x22F186270);
    }
    return 8;
  }
}

id makeIOSurfaceTexture(device:width:height:pixelFormat:iosurface:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F12A50]), sel_init);
  objc_msgSend(v10, sel_setTextureType_, 2);
  objc_msgSend(v10, sel_setPixelFormat_, a4);
  objc_msgSend(v10, sel_setWidth_, a2);
  objc_msgSend(v10, sel_setHeight_, a3);
  objc_msgSend(v10, sel_setUsage_, 3);
  objc_msgSend(v10, sel_setSampleCount_, 1);
  id v11 = objc_msgSend(a1, sel_newTextureWithDescriptor_iosurface_plane_, v10, a5, 0);

  return v11;
}

uint64_t makeCacheTexture(cache:pixelBuffer:pixelFormat:planeIndex:)(__CVMetalTextureCache *a1, CVPixelBufferRef pixelBuffer, MTLPixelFormat a3, size_t planeIndex)
{
  image[1] = *(CVMetalTextureRef *)MEMORY[0x263EF8340];
  size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(pixelBuffer, planeIndex);
  size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(pixelBuffer, planeIndex);
  image[0] = 0;
  uint64_t result = CVMetalTextureCacheCreateTextureFromImage(0, a1, pixelBuffer, 0, a3, WidthOfPlane, HeightOfPlane, planeIndex, image);
  CVMetalTextureRef v11 = image[0];
  if (result)
  {

    return 0;
  }
  if (image[0])
  {
    id v12 = CVMetalTextureGetTexture(image[0]);

    return (uint64_t)v12;
  }
  __break(1u);
  return result;
}

CVBufferRef_optional __swiftcall makePixelBuffer(width:height:pixelFormat:)(Swift::Int width, Swift::Int height, Swift::UInt32 pixelFormat)
{
  v4[1] = *(CVPixelBufferRef *)MEMORY[0x263EF8340];
  v4[0] = 0;
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], width, height, pixelFormat, 0, v4);
  return (CVBufferRef_optional)v4[0];
}

CVBufferRef_optional __swiftcall makePixelBuffer(from:)(IOSurface from)
{
  v2[1] = *(CVPixelBufferRef *)MEMORY[0x263EF8340];
  v2[0] = 0;
  CVPixelBufferCreateWithIOSurface((CFAllocatorRef)*MEMORY[0x263EFFB08], from.super.isa, 0, v2);
  return (CVBufferRef_optional)v2[0];
}

IOSurface_optional __swiftcall makeIOSurfaceOfFirstPlane(from:)(CVBufferRef from)
{
  size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(from, 0);
  int64_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(from, 0);
  int64_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(from, 0);
  size_t inited = CVPixelBufferGetWidthOfPlane(from, 0);
  if (!inited)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v8 = inited;
  if (BytesPerRowOfPlane == 0x8000000000000000 && inited == -1) {
    goto LABEL_8;
  }
  int64_t BytesPerRow = CVPixelBufferGetBytesPerRow(from);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2686949A0);
  size_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22F2271F0;
  id v10 = (void *)*MEMORY[0x263F0EF50];
  *(void *)(inited + 32) = *MEMORY[0x263F0EF50];
  *(void *)(inited + 40) = WidthOfPlane;
  CVMetalTextureRef v11 = (void *)*MEMORY[0x263F0EDF8];
  *(void *)(inited + 48) = *MEMORY[0x263F0EDF8];
  *(void *)(inited + 56) = HeightOfPlane;
  id v12 = (void *)*MEMORY[0x263F0ED50];
  uint64_t v13 = (void **)MEMORY[0x263F0ED30];
  *(void *)(inited + 64) = *MEMORY[0x263F0ED50];
  *(void *)(inited + 72) = BytesPerRow;
  uint64_t v14 = *v13;
  *(void *)(inited + 80) = *v13;
  int64_t v15 = BytesPerRow * HeightOfPlane;
  if ((unsigned __int128)(BytesPerRow * (__int128)HeightOfPlane) >> 64 != (BytesPerRow * HeightOfPlane) >> 63)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v16 = inited;
  long long v17 = (void *)*MEMORY[0x263F0ED48];
  *(void *)(inited + 88) = v15;
  *(void *)(inited + 96) = v17;
  *(void *)(inited + 104) = BytesPerRowOfPlane / v8;
  id v18 = v10;
  id v19 = v11;
  id v20 = v12;
  id v21 = v14;
  id v22 = v17;
  sub_22F18580C(v16);
  type metadata accessor for CFString(0);
  sub_22F186B80();
  CFDictionaryRef v23 = (const __CFDictionary *)sub_22F223958();
  swift_bridgeObjectRelease();
  IOSurfaceRef v24 = IOSurfaceCreate(v23);

  size_t inited = (size_t)v24;
LABEL_9:
  result.value._impl = v6;
  result.value.super.isfloat a = (Class)inited;
  result.is_nil = v7;
  return result;
}

CGContextRef_optional __swiftcall makeCGContext(ioSurface:bitsPerComponent:)(IOSurface ioSurface, Swift::Int bitsPerComponent)
{
  impl = ioSurface._impl;
  isfloat a = ioSurface.super.isa;
  size_t BytesPerRow = IOSurfaceGetBytesPerRow(ioSurface.super.isa);
  BaseAddress = IOSurfaceGetBaseAddress(isa);
  id v6 = [(__IOSurface *)isa width];
  id v7 = [(__IOSurface *)isa height];
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  CGContextRef v9 = CGBitmapContextCreate(BaseAddress, (size_t)v6, (size_t)v7, (size_t)impl, BytesPerRow, DeviceRGB, 0x2002u);

  return (CGContextRef_optional)v9;
}

Swift::Int __swiftcall fillIOSurface(_:with:at:)(IOSurface _, CVBufferRef with, Swift::Int at)
{
  impl = (__CVBuffer *)_._impl;
  isfloat a = _.super.isa;
  CVPixelBufferLockBaseAddress((CVPixelBufferRef)_._impl, 1uLL);
  BaseAddress = CVPixelBufferGetBaseAddress(impl);
  int64_t BytesPerRow = CVPixelBufferGetBytesPerRow(impl);
  Swift::Int result = CVPixelBufferGetHeight(impl);
  Swift::Int v9 = BytesPerRow * result;
  if ((unsigned __int128)(BytesPerRow * (__int128)result) >> 64 != (BytesPerRow * result) >> 63)
  {
    __break(1u);
    goto LABEL_10;
  }
  Swift::Int result = IOSurfaceGetBytesPerElement(isa);
  Swift::Int v10 = result * (void)with;
  if ((unsigned __int128)(result * (__int128)(uint64_t)with) >> 64 != (result * (uint64_t)with) >> 63)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  int64_t v11 = IOSurfaceGetBytesPerRow(isa);
  Swift::Int result = IOSurfaceGetHeight(isa);
  if ((unsigned __int128)(v11 * (__int128)result) >> 64 != (v11 * result) >> 63)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (__OFADD__(v10, v9))
  {
LABEL_12:
    __break(1u);
    return result;
  }
  if (v11 * result >= v10 + v9)
  {
    id v12 = (char *)IOSurfaceGetBaseAddress(isa);
    memcpy(&v12[v10], BaseAddress, v9);
  }
  else
  {
    Swift::Int v9 = 0;
  }
  CVPixelBufferUnlockBaseAddress(impl, 1uLL);
  return v9;
}

Swift::Int __swiftcall fillIOSurface(_:with:fromPlaneIndex:)(IOSurface _, CVBufferRef with, Swift::Int fromPlaneIndex)
{
  impl = (__CVBuffer *)_._impl;
  isfloat a = _.super.isa;
  CVPixelBufferLockBaseAddress((CVPixelBufferRef)_._impl, 1uLL);
  BaseAddress = CVPixelBufferGetBaseAddress(impl);
  int64_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(impl, (size_t)with);
  Swift::Int result = CVPixelBufferGetHeight(impl);
  Swift::Int v9 = BytesPerRowOfPlane * result;
  if ((unsigned __int128)(BytesPerRowOfPlane * (__int128)result) >> 64 != (BytesPerRowOfPlane * result) >> 63)
  {
    __break(1u);
    goto LABEL_8;
  }
  int64_t BytesPerRow = IOSurfaceGetBytesPerRow(isa);
  Swift::Int result = IOSurfaceGetHeight(isa);
  if ((unsigned __int128)(BytesPerRow * (__int128)result) >> 64 != (BytesPerRow * result) >> 63)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  if (BytesPerRow * result >= v9)
  {
    int64_t v11 = IOSurfaceGetBaseAddress(isa);
    memcpy(v11, BaseAddress, v9);
  }
  else
  {
    Swift::Int v9 = 0;
  }
  CVPixelBufferUnlockBaseAddress(impl, 1uLL);
  return v9;
}

Swift::Int __swiftcall fillIOSurface(_:with:at:)(IOSurface _, IOSurface with, Swift::Int at)
{
  isfloat a = with.super.isa;
  impl = (__IOSurface *)_._impl;
  uint64_t v5 = _.super.isa;
  BaseAddress = IOSurfaceGetBaseAddress((IOSurfaceRef)_._impl);
  int64_t BytesPerRow = IOSurfaceGetBytesPerRow(impl);
  Swift::Int result = IOSurfaceGetHeight(impl);
  Swift::Int v9 = BytesPerRow * result;
  if ((unsigned __int128)(BytesPerRow * (__int128)result) >> 64 != (BytesPerRow * result) >> 63)
  {
    __break(1u);
    goto LABEL_10;
  }
  Swift::Int result = IOSurfaceGetBytesPerElement(v5);
  Swift::Int v10 = result * (void)isa;
  if ((unsigned __int128)(result * (__int128)(uint64_t)isa) >> 64 != (result * (uint64_t)isa) >> 63)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  int64_t v11 = IOSurfaceGetBytesPerRow(v5);
  Swift::Int result = IOSurfaceGetHeight(v5);
  if ((unsigned __int128)(v11 * (__int128)result) >> 64 != (v11 * result) >> 63)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (__OFADD__(v10, v9))
  {
LABEL_12:
    __break(1u);
    return result;
  }
  if (v11 * result < v10 + v9) {
    return 0;
  }
  id v12 = (char *)IOSurfaceGetBaseAddress(v5);
  memcpy(&v12[v10], BaseAddress, v9);
  return v9;
}

unint64_t sub_22F186B80()
{
  unint64_t result = qword_2686946F8;
  if (!qword_2686946F8)
  {
    type metadata accessor for CFString(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2686946F8);
  }
  return result;
}

_OWORD *sub_22F186BD8(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

unint64_t sub_22F186BE8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x263F8EE80];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2686949D0);
  uint64_t v3 = (void *)sub_22F2245F8();
  unsigned __int8 v4 = *(unsigned char *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  unint64_t result = sub_22F18DDBC(v4);
  if (v7)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  uint64_t v8 = (void *)(a1 + 56);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(unsigned char *)(v3[6] + result) = v4;
    *(void *)(v3[7] + 8 * result) = v5;
    uint64_t v9 = v3[2];
    BOOL v10 = __OFADD__(v9, 1);
    uint64_t v11 = v9 + 1;
    if (v10) {
      break;
    }
    v3[2] = v11;
    if (!--v1) {
      goto LABEL_8;
    }
    id v12 = v8 + 2;
    unsigned __int8 v4 = *((unsigned char *)v8 - 8);
    uint64_t v13 = *v8;
    swift_bridgeObjectRetain();
    unint64_t result = sub_22F18DDBC(v4);
    uint64_t v8 = v12;
    uint64_t v5 = v13;
    if (v14) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_22F186CEC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

double CGSize.multiply(by:)(double a1, double a2)
{
  return a1 * a2;
}

CGSize __swiftcall CGSize.round()()
{
  double v2 = round(v0);
  double v3 = round(v1);
  result.CGFloat height = v3;
  result.CGFloat width = v2;
  return result;
}

CGSize __swiftcall CGSize.ceil()()
{
  double v2 = ceil(v0);
  double v3 = ceil(v1);
  result.CGFloat height = v3;
  result.CGFloat width = v2;
  return result;
}

__n128 sub_22F186D7C()
{
  __asm { FMOV            V0.2D, #1.0 }
  static CGSize.one = (__int128)result;
  return result;
}

long long *CGSize.one.unsafeMutableAddressor()
{
  if (qword_268694368 != -1) {
    swift_once();
  }
  return &static CGSize.one;
}

double static CGSize.one.getter()
{
  if (qword_268694368 != -1) {
    swift_once();
  }
  return *(double *)&static CGSize.one;
}

CGSize __swiftcall CGSize.multiply(by:)(CGSize by)
{
  double v3 = by.width * v1;
  double v4 = by.height * v2;
  result.CGFloat height = v4;
  result.CGFloat width = v3;
  return result;
}

float64x2_t static CGSize.*= infix(_:_:)(float64x2_t *a1, float64x2_t a2, float64_t a3)
{
  a2.f64[1] = a3;
  float64x2_t result = vmulq_f64(*a1, a2);
  *a1 = result;
  return result;
}

double CGSize.divide(by:)(double a1, double a2)
{
  return a2 / a1;
}

CGSize __swiftcall CGSize.divide(by:)(CGSize by)
{
  double v3 = v1 / by.width;
  double v4 = v2 / by.height;
  result.CGFloat height = v4;
  result.CGFloat width = v3;
  return result;
}

CGSize __swiftcall CGSize.divide(by:)(Swift::Int by)
{
  double v3 = v1 / (double)by;
  double v4 = v2 / (double)by;
  result.CGFloat height = v4;
  result.CGFloat width = v3;
  return result;
}

float64x2_t static CGSize./= infix(_:_:)(float64x2_t *a1, double a2)
{
  float64x2_t result = vdivq_f64(*a1, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a2, 0));
  *a1 = result;
  return result;
}

CGSize __swiftcall CGSize.add(_:)(CGSize a1)
{
  double v3 = a1.width + v1;
  double v4 = a1.height + v2;
  result.CGFloat height = v4;
  result.CGFloat width = v3;
  return result;
}

double static CGSize.+= infix(_:_:)(double *a1, double a2, double a3)
{
  double result = *a1 + a2;
  double v4 = a1[1] + a3;
  *a1 = result;
  a1[1] = v4;
  return result;
}

CGSize __swiftcall CGSize.subtract(_:)(CGSize a1)
{
  double v3 = v1 - a1.width;
  double v4 = v2 - a1.height;
  result.CGFloat height = v4;
  result.CGFloat width = v3;
  return result;
}

double static CGSize.-= infix(_:_:)(double *a1, double a2, double a3)
{
  double result = *a1 - a2;
  double v4 = a1[1] - a3;
  *a1 = result;
  a1[1] = v4;
  return result;
}

BOOL Optional.exists.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388]();
  double v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  int v5 = (*(uint64_t (**)(char *, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 48))(v4, 1);
  if (v5 != 1) {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  }
  return v5 != 1;
}

BOOL Optional.doesNotExist.getter(uint64_t a1)
{
  return !Optional.exists.getter(a1);
}

id KernelReprojection.__allocating_init(coder:device:)(void *a1, uint64_t a2)
{
  id v4 = objc_msgSend(objc_allocWithZone(v2), sel_initWithCoder_device_, a1, a2);

  swift_unknownObjectRelease();
  return v4;
}

void KernelReprojection.init(coder:device:)()
{
}

id KernelReprojection.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for KernelReprojection()
{
  return self;
}

id sub_22F187228(void *a1)
{
  objc_super v2 = v1;
  v22[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v5 = qword_268694380;
  id v6 = v2;
  if (v5 != -1) {
    swift_once();
  }
  id v7 = (id)static MetalBundle.library;
  uint64_t v8 = (void *)sub_22F223A98();
  id v9 = objc_msgSend(v7, sel_newFunctionWithName_, v8);

  if (!v9)
  {
    __break(1u);
    goto LABEL_10;
  }
  v22[0] = 0;
  id v10 = objc_msgSend(a1, sel_newComputePipelineStateWithFunction_error_, v9, v22);
  swift_unknownObjectRelease();
  id v11 = v22[0];
  if (!v10)
  {
    id v19 = v22[0];
    sub_22F2236F8();

    swift_willThrow();
    swift_unexpectedError();
    __break(1u);
    goto LABEL_13;
  }
  *(void *)&v6[OBJC_IVAR____TtC17MeasureFoundation18KernelReprojection_preprojectionPipeline] = v10;
  id v12 = v11;
  uint64_t v13 = (void *)sub_22F223A98();
  id v14 = objc_msgSend(v7, sel_newFunctionWithName_, v13);

  if (!v14)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v22[0] = 0;
  id v15 = objc_msgSend(a1, sel_newComputePipelineStateWithFunction_error_, v14, v22);
  swift_unknownObjectRelease();
  id v7 = v22[0];
  if (v15)
  {
    *(void *)&v6[OBJC_IVAR____TtC17MeasureFoundation18KernelReprojection_reprojectionPipeline] = v15;
    id v16 = v7;
    id v17 = objc_msgSend(a1, sel_newBufferWithLength_options_, 352, 0);
    if (v17)
    {
      *(void *)&v6[OBJC_IVAR____TtC17MeasureFoundation18KernelReprojection_uniformsBuffer] = v17;

      v21.receiver = v6;
      v21.super_class = ObjectType;
      return objc_msgSendSuper2(&v21, sel_initWithDevice_, a1);
    }
LABEL_11:
    __break(1u);
  }
LABEL_13:
  id v20 = v7;
  sub_22F2236F8();

  swift_willThrow();
  id result = (id)swift_unexpectedError();
  __break(1u);
  return result;
}

Swift::Bool __swiftcall CVBufferRef.copy(from:)(IOSurface from)
{
  isfloat a = from.super.isa;
  if (CVPixelBufferLockBaseAddress(v1, 1uLL))
  {
    BOOL v3 = 0;
  }
  else
  {
    BaseAddress = CVPixelBufferGetBaseAddress(v1);
    BOOL v3 = BaseAddress != 0;
    if (BaseAddress)
    {
      uint64_t v5 = BaseAddress;
      id v6 = IOSurfaceGetBaseAddress(isa);
      int64_t BytesPerRow = IOSurfaceGetBytesPerRow(isa);
      int64_t Height = IOSurfaceGetHeight(isa);
      if ((unsigned __int128)(BytesPerRow * (__int128)Height) >> 64 != (BytesPerRow * Height) >> 63)
      {
        __break(1u);
        return Height;
      }
      memcpy(v5, v6, BytesPerRow * Height);
    }
    CVPixelBufferUnlockBaseAddress(v1, 1uLL);
  }
  LOBYTE(Height) = v3;
  return Height;
}

Swift::Bool __swiftcall CVBufferRef.copy(to:)(IOSurface to)
{
  isfloat a = to.super.isa;
  if (CVPixelBufferLockBaseAddress(v1, 1uLL))
  {
    BOOL v3 = 0;
  }
  else
  {
    BaseAddress = CVPixelBufferGetBaseAddress(v1);
    BOOL v3 = BaseAddress != 0;
    if (BaseAddress)
    {
      uint64_t v5 = BaseAddress;
      id v6 = IOSurfaceGetBaseAddress(isa);
      int64_t BytesPerRow = IOSurfaceGetBytesPerRow(isa);
      int64_t Height = IOSurfaceGetHeight(isa);
      if ((unsigned __int128)(BytesPerRow * (__int128)Height) >> 64 != (BytesPerRow * Height) >> 63)
      {
        __break(1u);
        return Height;
      }
      memcpy(v6, v5, BytesPerRow * Height);
    }
    CVPixelBufferUnlockBaseAddress(v1, 1uLL);
  }
  LOBYTE(Height) = v3;
  return Height;
}

CVBufferRef_optional __swiftcall CVBufferRef.clone()()
{
  v18[1] = *(CVPixelBufferRef *)MEMORY[0x263EF8340];
  size_t Width = CVPixelBufferGetWidth(v0);
  int64_t Height = CVPixelBufferGetHeight(v0);
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(v0);
  v18[0] = 0;
  CVPixelBufferCreate(0, Width, Height, PixelFormatType, 0, v18);
  CVPixelBufferRef v4 = v18[0];
  if (v18[0])
  {
    uint64_t v5 = v18[0];
    CVPixelBufferLockBaseAddress(v0, 1uLL);
    CVPixelBufferLockBaseAddress(v5, 0);
    int64_t PlaneCount = CVPixelBufferGetPlaneCount(v0);
    if (PlaneCount >= 1)
    {
      int64_t v7 = PlaneCount;
      size_t v8 = 0;
      while (1)
      {
        BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(v0, v8);
        id v10 = CVPixelBufferGetBaseAddressOfPlane(v5, v8);
        int64_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(v0, v8);
        int64_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v0, v8);
        if ((unsigned __int128)(HeightOfPlane * (__int128)BytesPerRowOfPlane) >> 64 != (HeightOfPlane
                                                                                       * BytesPerRowOfPlane) >> 63)
          break;
        ++v8;
        memcpy(v10, BaseAddressOfPlane, HeightOfPlane * BytesPerRowOfPlane);
        if (v7 == v8) {
          goto LABEL_9;
        }
      }
      __break(1u);
LABEL_12:
      __break(1u);
    }
    BaseAddress = CVPixelBufferGetBaseAddress(v0);
    id v14 = CVPixelBufferGetBaseAddress(v5);
    int64_t BytesPerRow = CVPixelBufferGetBytesPerRow(v0);
    if ((unsigned __int128)(Height * (__int128)BytesPerRow) >> 64 != (Height * BytesPerRow) >> 63) {
      goto LABEL_12;
    }
    memcpy(v14, BaseAddress, Height * BytesPerRow);
LABEL_9:
    id v16 = v5;
    CVPixelBufferUnlockBaseAddress(v0, 1uLL);
    CVPixelBufferUnlockBaseAddress(v16, 0);
  }
  return (CVBufferRef_optional)v4;
}

CVBufferRef_optional __swiftcall CVBufferRef.copiedPlane(_:with:format:)(Swift::Int _, Swift::tuple_width_Int_height_Int with, Swift::UInt32 format)
{
  Swift::Int height = with.height;
  Swift::Int width = with.width;
  v28[1] = *(CVPixelBufferRef *)MEMORY[0x263EF8340];
  size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(v3, _);
  size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(v3, _);
  if (width + 0x4000000000000000 < 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  BOOL v10 = __OFSUB__(WidthOfPlane, 2 * width);
  size_t v11 = WidthOfPlane - 2 * width;
  if (v10)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (height + 0x4000000000000000 < 0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  size_t v12 = HeightOfPlane - 2 * height;
  if (__OFSUB__(HeightOfPlane, 2 * height))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v28[0] = 0;
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], v11, v12, format, 0, v28);
  uint64_t v13 = v28[0];
  if (!v28[0]) {
    return 0;
  }
  int64_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v3, _);
  int64_t BytesPerRow = CVPixelBufferGetBytesPerRow(v13);
  CVPixelBufferLockBaseAddress(v3, 1uLL);
  CVPixelBufferLockBaseAddress(v13, 0);
  BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(v3, _);
  if (BaseAddressOfPlane && (id v17 = BaseAddressOfPlane, (BaseAddress = (char *)CVPixelBufferGetBaseAddress(v13)) != 0))
  {
    int64_t v19 = BytesPerRowOfPlane * height;
    if ((unsigned __int128)(BytesPerRowOfPlane * (__int128)height) >> 64 != (BytesPerRowOfPlane * height) >> 63)
    {
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
    }
    if ((v12 & 0x8000000000000000) != 0) {
      goto LABEL_27;
    }
    if (v12)
    {
      id v20 = BaseAddress;
      uint64_t v21 = 0;
      Swift::Int v22 = (Swift::Int)v17 + v19 + width;
      while (1)
      {
        int64_t v23 = v21 * BytesPerRow;
        if ((unsigned __int128)(v21 * (__int128)BytesPerRow) >> 64 != (v21 * BytesPerRow) >> 63) {
          break;
        }
        int64_t v24 = BytesPerRowOfPlane * v21;
        if ((unsigned __int128)(BytesPerRowOfPlane * (__int128)v21) >> 64 != (BytesPerRowOfPlane * v21) >> 63) {
          goto LABEL_21;
        }
        ++v21;
        memcpy(&v20[v23], (const void *)(v22 + v24), v11);
        if (v12 == v21) {
          goto LABEL_15;
        }
      }
      __break(1u);
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
LABEL_15:
    id v25 = v13;
    v26.value = v13;
  }
  else
  {
    v26.value = 0;
  }
  CVPixelBufferUnlockBaseAddress(v3, 1uLL);
  CVPixelBufferUnlockBaseAddress(v13, 0);

  return v26;
}

Swift::Void __swiftcall logCVError(_:label:)(Swift::Int32 _, Swift::String label)
{
  if (_)
  {
    object = label._object;
    uint64_t countAndFlagsBits = label._countAndFlagsBits;
    if (qword_268694528 != -1) {
      swift_once();
    }
    uint64_t v4 = qword_26869BE60;
    uint64_t v5 = *(void *)algn_26869BE68;
    sub_22F2243F8();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_22F223B48();
    sub_22F2246D8();
    sub_22F223B48();
    swift_bridgeObjectRelease();
    uint64_t v6 = sub_22F2240A8();
    _s17MeasureFoundation3LogV3log_4type9isPrivateySS_So03os_d1_E2_taSbtF_0(countAndFlagsBits, (uint64_t)object, v6, 0, v4, v5);
    swift_bridgeObjectRelease();
  }
}

Swift::Bool __swiftcall checkCVSuccess(_:label:)(Swift::Int32 _, Swift::String label)
{
  if (_)
  {
    object = label._object;
    uint64_t countAndFlagsBits = label._countAndFlagsBits;
    if (qword_268694528 != -1) {
      swift_once();
    }
    uint64_t v5 = qword_26869BE60;
    uint64_t v6 = *(void *)algn_26869BE68;
    sub_22F2243F8();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_22F223B48();
    sub_22F2246D8();
    sub_22F223B48();
    swift_bridgeObjectRelease();
    uint64_t v7 = sub_22F2240A8();
    _s17MeasureFoundation3LogV3log_4type9isPrivateySS_So03os_d1_E2_taSbtF_0(countAndFlagsBits, (uint64_t)object, v7, 0, v5, v6);
    swift_bridgeObjectRelease();
  }
  return _ == 0;
}

uint64_t *MetalBundle.library.unsafeMutableAddressor()
{
  if (qword_268694380 != -1) {
    swift_once();
  }
  return &static MetalBundle.library;
}

id sub_22F187C78()
{
  type metadata accessor for MetalBundle();
  ObjCClassFromMetadatfloat a = swift_getObjCClassFromMetadata();
  id result = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  qword_268694B20 = (uint64_t)result;
  return result;
}

id sub_22F187CCC()
{
  id result = MTLCreateSystemDefaultDevice();
  if (result) {
    static MetalBundle.device = (uint64_t)result;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t *MetalBundle.device.unsafeMutableAddressor()
{
  if (qword_268694378 != -1) {
    swift_once();
  }
  return &static MetalBundle.device;
}

uint64_t static MetalBundle.device.getter()
{
  return sub_22F187ED0(&qword_268694378);
}

uint64_t sub_22F187D64()
{
  v4[1] = *(id *)MEMORY[0x263EF8340];
  if (qword_268694378 != -1) {
    swift_once();
  }
  double v0 = (void *)static MetalBundle.device;
  if (qword_268694370 != -1) {
    swift_once();
  }
  v4[0] = 0;
  id v1 = objc_msgSend(v0, sel_newDefaultLibraryWithBundle_error_, qword_268694B20, v4);
  if (v1)
  {
    static MetalBundle.librardouble y = (uint64_t)v1;
  }
  else
  {
    id v2 = v4[0];
    sub_22F2236F8();

    swift_willThrow();
    swift_unexpectedError();
    __break(1u);
  }
  return MEMORY[0x270F9A8A0]();
}

uint64_t static MetalBundle.library.getter()
{
  return sub_22F187ED0(&qword_268694380);
}

uint64_t sub_22F187ED0(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }
  return swift_unknownObjectRetain();
}

uint64_t MetalBundle.deinit()
{
  return v0;
}

uint64_t MetalBundle.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MetalBundle()
{
  return self;
}

id sub_22F187F58(uint64_t a1)
{
  *(void *)(v1 + 88) = a1;
  *(void *)(v1 + 96) = 0;
  BOOL v3 = *(void **)(a1 + 32);
  Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  uint64_t v5 = *(void **)(a1 + 40);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  id v6 = sub_22F1885D4(Strong, v5);

  swift_unknownObjectRelease();
  *(void *)(v1 + 48) = v6;
  id result = objc_msgSend(v3, sel_newBufferWithLength_options_, 9216, 0);
  if (!result)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  *(void *)(v1 + 40) = result;
  id result = objc_msgSend(v3, sel_newBufferWithLength_options_, 18432, 0);
  if (!result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  size_t v8 = result;
  *(void *)(v1 + 56) = result;
  id v9 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
  id v10 = v8;
  *(void *)(v1 + 64) = v9;
  id result = objc_msgSend(v3, sel_newBufferWithLength_options_, 4608, 0);
  if (result)
  {
    size_t v11 = result;
    *(void *)(v1 + 72) = result;
    id v12 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    id v13 = v11;
    *(void *)(v1 + 80) = v12;
    id result = (id)swift_release();
    uint64_t v14 = MEMORY[0x263F8EE78];
    *(_WORD *)(v1 + 32) = 257;
    *(unsigned char *)(v1 + 34) = 1;
    uint64_t v15 = qword_268694990;
    *(void *)(v1 + 16) = qword_268694990;
    *(void *)(v1 + 24) = v14;
    if (v15 != -1)
    {
      qword_268694990 = v15 + 1;
      swift_unknownObjectRelease();
      swift_release();
      return (id)v1;
    }
    __break(1u);
    goto LABEL_7;
  }
LABEL_9:
  __break(1u);
  return result;
}

Swift::Void __swiftcall DebugLocalNode.didUpdate(frame:)(ARFrame frame)
{
  uint64_t v2 = v1;
  id v3 = [(objc_class *)frame.super.isa capturedPointCloudData];
  if (!v3) {
    return;
  }
  id v15 = v3;
  id v4 = objc_msgSend(v3, sel_depthPointCloud);
  if (v4)
  {
    uint64_t v5 = v4;
    id v6 = (float64x2_t *)objc_msgSend(v4, sel_cameraPixels);

    if (v6)
    {
      id v7 = objc_msgSend(v15, sel_depthPointCloud);
      if (v7)
      {
        size_t v8 = v7;
        id v9 = objc_msgSend(v7, sel_confidences);

        if (v9)
        {
          uint64_t v10 = *(void *)(sub_22F224088() + 16);
          swift_bridgeObjectRelease();
          *(void *)(v2 + 96) = v10;
          sub_22F18853C(v6, v10, *(void **)(v2 + 40));
          size_t v11 = *(void **)(v2 + 64);
          uint64_t v12 = sub_22F224088();
          uint64_t v13 = *(void *)(v2 + 96);
          if ((unint64_t)(v13 - 0x800000000000000) >> 60 == 15)
          {
            memcpy(v11, (const void *)(v12 + 32), 16 * v13);
            swift_bridgeObjectRelease();
            uint64_t v14 = *(void *)(v2 + 96);
            if ((unint64_t)(v14 - 0x2000000000000000) >> 62 == 3)
            {
              memcpy(*(void **)(v2 + 80), v9, 4 * v14);
              goto LABEL_9;
            }
          }
          else
          {
            __break(1u);
          }
          __break(1u);
          return;
        }
      }
    }
  }
LABEL_9:
}

void DebugLocalNode.draw(commandBuffer:)(void *a1)
{
  uint64_t v2 = v1[6];
  if (v2)
  {
    id v3 = v1;
    uint64_t v5 = v1[11];
    swift_unknownObjectRetain();
    unint64_t v6 = (unint64_t)MetalScene.makeDefaultRenderPassDescriptor()();
    if (v6)
    {
      id v9 = (id)v6;
      id v7 = objc_msgSend(a1, sel_renderCommandEncoderWithDescriptor_);
      if (v7)
      {
        size_t v8 = v7;
        objc_msgSend(v7, sel_setRenderPipelineState_, v2);
        swift_beginAccess();
        objc_msgSend(v8, sel_setVertexBuffer_offset_atIndex_, *(void *)(v5 + 192), 0, 0);
        objc_msgSend(v8, sel_setVertexBuffer_offset_atIndex_, v3[5], 0, 1);
        objc_msgSend(v8, sel_setVertexBuffer_offset_atIndex_, v3[7], 0, 2);
        objc_msgSend(v8, sel_setVertexBuffer_offset_atIndex_, v3[9], 0, 3);
        objc_msgSend(v8, sel_drawPrimitives_vertexStart_vertexCount_, 0, 0, v3[12]);
        objc_msgSend(v8, sel_endEncoding);
        swift_unknownObjectRelease();

        swift_unknownObjectRelease();
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
}

void DebugLocalNode.__allocating_init()()
{
}

void DebugLocalNode.init()()
{
}

uint64_t sub_22F18844C()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t DebugLocalNode.deinit()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  return v0;
}

uint64_t DebugLocalNode.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

id sub_22F18853C(float64x2_t *a1, uint64_t a2, void *a3)
{
  swift_unknownObjectRetain();
  unint64_t v6 = (float32x2_t *)objc_msgSend(a3, sel_contents);
  id result = a3;
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    for (; a2; --a2)
    {
      float64x2_t v8 = *a1++;
      *v6++ = vcvt_f32_f64(v8);
    }
  }
  return result;
}

uint64_t type metadata accessor for DebugLocalNode()
{
  return self;
}

id sub_22F1885D4(void *a1, void *a2)
{
  v23[1] = *(id *)MEMORY[0x263EF8340];
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F129C0]), sel_init);
  objc_msgSend(v4, sel_setAlphaToCoverageEnabled_, 1);
  uint64_t v5 = (void *)sub_22F223A98();
  id v6 = objc_msgSend(a2, sel_newFunctionWithName_, v5);

  if (!v6)
  {
    __break(1u);
    goto LABEL_15;
  }
  objc_msgSend(v4, sel_setVertexFunction_, v6);
  swift_unknownObjectRelease();
  id v7 = (void *)sub_22F223A98();
  id v8 = objc_msgSend(a2, sel_newFunctionWithName_, v7);

  if (!v8)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  objc_msgSend(v4, sel_setFragmentFunction_, v8);
  swift_unknownObjectRelease();
  objc_msgSend(v4, sel_setDepthAttachmentPixelFormat_, objc_msgSend(a1, sel_depthStencilPixelFormat));
  id v9 = objc_msgSend(v4, sel_colorAttachments);
  id v10 = objc_msgSend(v9, sel_objectAtIndexedSubscript_, 0);

  if (!v10)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  objc_msgSend(v10, sel_setPixelFormat_, objc_msgSend(a1, sel_colorPixelFormat));

  id v11 = objc_msgSend(v4, sel_colorAttachments);
  id v12 = objc_msgSend(v11, sel_objectAtIndexedSubscript_, 0);

  if (!v12)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  objc_msgSend(v12, sel_setBlendingEnabled_, 0);

  id v13 = objc_msgSend(v4, sel_colorAttachments);
  id v14 = objc_msgSend(v13, sel_objectAtIndexedSubscript_, 0);

  if (!v14)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }
  objc_msgSend(v14, sel_setDestinationRGBBlendFactor_, 5);

  id v15 = objc_msgSend(v4, sel_colorAttachments);
  id v16 = objc_msgSend(v15, sel_objectAtIndexedSubscript_, 0);

  if (!v16) {
    goto LABEL_19;
  }
  objc_msgSend(v16, sel_setDestinationAlphaBlendFactor_, 5);

  objc_msgSend(v4, sel_setDepthAttachmentPixelFormat_, objc_msgSend(a1, sel_depthStencilPixelFormat));
  id v17 = objc_msgSend(a1, sel_device);
  if (!v17)
  {

    return 0;
  }
  v23[0] = 0;
  id v18 = objc_msgSend(v17, sel_newRenderPipelineStateWithDescriptor_error_, v4, v23);
  swift_unknownObjectRelease();
  id v19 = v23[0];
  if (!v18)
  {
    id v20 = v19;
    uint64_t v21 = (void *)sub_22F2236F8();

    swift_willThrow();
    return 0;
  }

  return v18;
}

void sub_22F188964()
{
  static CVUtil.edgeKernel = (uint64_t)&unk_26E2916D8;
}

uint64_t *CVUtil.edgeKernel.unsafeMutableAddressor()
{
  if (qword_268694388 != -1) {
    swift_once();
  }
  return &static CVUtil.edgeKernel;
}

uint64_t static CVUtil.edgeKernel.getter()
{
  return sub_22F188A6C(&qword_268694388);
}

void sub_22F1889E8()
{
  static CVUtil.embossKernel = (uint64_t)&unk_26E291710;
}

uint64_t *CVUtil.embossKernel.unsafeMutableAddressor()
{
  if (qword_268694390 != -1) {
    swift_once();
  }
  return &static CVUtil.embossKernel;
}

uint64_t static CVUtil.embossKernel.getter()
{
  return sub_22F188A6C(&qword_268694390);
}

uint64_t sub_22F188A6C(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }
  return swift_bridgeObjectRetain();
}

uint64_t static CVUtil.makeWeights(srcBuffer:dstBuffer:tempBuffer:kernel:kernelWidth:kernelHeight:)@<X0>(void *a1@<X0>, int64_t a2@<X1>, vImagePixelCount a3@<X2>, int64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, char a11)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  sub_22F1899D0(a5, (uint64_t)v35, &qword_268694B90);
  id v18 = (void *)v35[0];
  vImagePixelCount v28 = v35[2];
  int64_t v29 = v35[1];
  int64_t v27 = v35[3];
  if (a11) {
    a10 = a8;
  }
  src.datfloat a = a1;
  src.Swift::Int height = a2;
  src.Swift::Int width = a3;
  src.rowBytes = a4;
  sub_22F1899D0(a5, (uint64_t)v39, &qword_268694B90);
  if (v39[32] == 1)
  {
    if (a2 < 0)
    {
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
    }
    if ((unsigned __int128)(a2 * (__int128)a4) >> 64 != (a2 * a4) >> 63) {
      goto LABEL_24;
    }
    id v18 = malloc(a2 * a4);
  }
  else
  {
    a3 = v28;
    a2 = v29;
    a4 = v27;
  }
  dest.datfloat a = v18;
  dest.Swift::Int height = a2;
  dest.Swift::Int width = a3;
  dest.rowBytes = a4;
  if (a10 > 0xFFFFFFFFLL)
  {
    __break(1u);
    goto LABEL_20;
  }
  if ((a10 | a8) < 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (a8 > 0xFFFFFFFFLL)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  unint64_t divisor = *(void *)(a7 + 16);
  if (divisor >> 31)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t result = vImageConvolve_Planar8(&src, &dest, a6, 0, 0, (const int16_t *)(a7 + 32), a10, a8, divisor, 0, 4u);
  uint64_t v21 = result;
  if (!result)
  {
    long long v25 = *(_OWORD *)&dest.data;
    long long v26 = *(_OWORD *)&dest.width;
    goto LABEL_18;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_268694B98);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_22F227140;
  unint64_t v36 = 0;
  unint64_t v37 = 0xE000000000000000;
  sub_22F2243F8();
  swift_bridgeObjectRelease();
  unint64_t v36 = 0xD00000000000001ELL;
  unint64_t v37 = 0x800000022F22DFB0;
  sub_22F2246D8();
  sub_22F223B48();
  swift_bridgeObjectRelease();
  unint64_t v23 = v36;
  unint64_t v24 = v37;
  *(void *)(v22 + 56) = MEMORY[0x263F8D310];
  *(void *)(v22 + 32) = v23;
  *(void *)(v22 + 40) = v24;
  sub_22F2247C8();
  swift_bridgeObjectRelease();
  uint64_t result = sub_22F1899D0(a5, (uint64_t)&v36, &qword_268694B90);
  long long v25 = 0uLL;
  if (v38 != 1)
  {
    long long v26 = 0uLL;
    goto LABEL_18;
  }
  uint64_t result = (uint64_t)dest.data;
  if (dest.data)
  {
    uint64_t result = MEMORY[0x230FB40E0](dest.data, -1, -1);
    long long v26 = 0uLL;
    long long v25 = 0uLL;
LABEL_18:
    *(_OWORD *)a9 = v25;
    *(_OWORD *)(a9 + 16) = v26;
    *(unsigned char *)(a9 + 32) = v21 != 0;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t static CVUtil.emboss(srcBuffer:dstBuffer:tempBuffer:flags:)@<X0>(void *a1@<X0>, int64_t a2@<X1>, vImagePixelCount a3@<X2>, int64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X8>)
{
  sub_22F188E70(a1, a2, a3, a4, a5, a6, a7, (uint64_t)v10);
  return sub_22F1899D0((uint64_t)v10, a8, &qword_268694B90);
}

uint64_t static CVUtil.getImageWeight(image:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_22F189134(a1, a2, a3, a5, a6, a7);
}

uint64_t static CVUtil.matchTemplate(image:template:templateWeight:along:linePoints:minMatchingThreshold:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, double a9@<D0>, double a10@<D1>, double a11@<D2>, double a12@<D3>, float a13@<S4>, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t a18, uint64_t *a19)
{
  sub_22F1893C4(a1, a2, a3, a4, a5, a6, a7, a14, (uint64_t)v21, a9, a10, a11, a12, a13, a16, a17, a18 | ((HIDWORD(a18) & 1) << 32), a19);
  return sub_22F1899D0((uint64_t)v21, a8, &qword_268694BA0);
}

uint64_t CVUtil.deinit()
{
  return v0;
}

uint64_t CVUtil.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_22F188E70@<X0>(void *a1@<X0>, int64_t a2@<X1>, vImagePixelCount a3@<X2>, int64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  sub_22F1899D0(a5, (uint64_t)v29, &qword_268694B90);
  id v14 = (void *)v29[0];
  int64_t v13 = v29[1];
  vImagePixelCount v15 = v29[2];
  int64_t v16 = v29[3];
  src.datfloat a = a1;
  src.Swift::Int height = a2;
  src.Swift::Int width = a3;
  src.rowBytes = a4;
  sub_22F1899D0(a5, (uint64_t)v33, &qword_268694B90);
  if (v33[32] == 1)
  {
    if (a2 < 0)
    {
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
    }
    if ((unsigned __int128)(a2 * (__int128)a4) >> 64 != (a2 * a4) >> 63) {
      goto LABEL_20;
    }
    id v14 = malloc(a2 * a4);
  }
  else
  {
    a2 = v13;
    a3 = v15;
    a4 = v16;
  }
  dest.datfloat a = v14;
  dest.Swift::Int height = a2;
  dest.Swift::Int width = a3;
  dest.rowBytes = a4;
  if (qword_268694390 == -1)
  {
    if ((a7 & 0x8000000000000000) == 0) {
      goto LABEL_8;
    }
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  swift_once();
  if ((a7 & 0x8000000000000000) != 0) {
    goto LABEL_17;
  }
LABEL_8:
  if (HIDWORD(a7))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t result = vImageConvolve_Planar8(&src, &dest, a6, 0, 0, (const int16_t *)(static CVUtil.embossKernel + 32), 3u, 3u, 1, 0, a7);
  uint64_t v18 = result;
  if (!result)
  {
    long long v22 = *(_OWORD *)&dest.data;
    long long v23 = *(_OWORD *)&dest.width;
    goto LABEL_15;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_268694B98);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_22F227140;
  unint64_t v30 = 0;
  unint64_t v31 = 0xE000000000000000;
  sub_22F2243F8();
  swift_bridgeObjectRelease();
  unint64_t v30 = 0xD00000000000001ELL;
  unint64_t v31 = 0x800000022F22DFB0;
  sub_22F2246D8();
  sub_22F223B48();
  swift_bridgeObjectRelease();
  unint64_t v20 = v30;
  unint64_t v21 = v31;
  *(void *)(v19 + 56) = MEMORY[0x263F8D310];
  *(void *)(v19 + 32) = v20;
  *(void *)(v19 + 40) = v21;
  sub_22F2247C8();
  swift_bridgeObjectRelease();
  uint64_t result = sub_22F1899D0(a5, (uint64_t)&v30, &qword_268694B90);
  long long v22 = 0uLL;
  if (v32 != 1)
  {
    long long v23 = 0uLL;
    goto LABEL_15;
  }
  uint64_t result = (uint64_t)dest.data;
  if (dest.data)
  {
    uint64_t result = MEMORY[0x230FB40E0](dest.data, -1, -1);
    long long v23 = 0uLL;
    long long v22 = 0uLL;
LABEL_15:
    *(_OWORD *)a8 = v22;
    *(_OWORD *)(a8 + 16) = v23;
    *(unsigned char *)(a8 + 32) = v18 != 0;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_22F189134(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_22F1899D0(a6, (uint64_t)v32, &qword_268694BA8);
  uint64_t v11 = v32[0];
  uint64_t v12 = v32[1];
  uint64_t v14 = v32[2];
  uint64_t v13 = v32[3];
  uint64_t result = sub_22F1899D0(a4, (uint64_t)v41, &qword_268694B90);
  if (v42 & 1) != 0 || (uint64_t v16 = v41[2], result = sub_22F1899D0(a6, (uint64_t)&v36, &qword_268694BA8), (v40))
  {
    if ((a3 | a2) < 0)
    {
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    if ((unsigned __int128)(a3 * (__int128)a2) >> 64 != (a3 * a2) >> 63)
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    uint64_t v17 = a3 - 1;
    uint64_t v18 = a2 - 1;
    uint64_t result = sub_22F1899D0(a6, (uint64_t)v35, &qword_268694BA8);
    if (v35[32] == 1)
    {
      uint64_t result = sub_22F1899D0(a5, (uint64_t)v33, &qword_268694BA8);
      if (v34)
      {
        uint64_t v20 = 0;
        uint64_t v21 = 0;
LABEL_25:
        if (v18 < v20 || v17 < v21) {
          goto LABEL_46;
        }
        float v28 = 0.0;
        while (1)
        {
          uint64_t v29 = v20 * a3;
          if ((unsigned __int128)(v20 * (__int128)a3) >> 64 != (v20 * a3) >> 63) {
            break;
          }
          if (__OFADD__(v29, v21)) {
            goto LABEL_42;
          }
          LOBYTE(v19) = *(unsigned char *)(a1 + v29 + v21);
          float v19 = (float)LODWORD(v19);
          float v28 = v28 + v19;
          if (v21 != v17)
          {
            if (v21 >= v17) {
              goto LABEL_43;
            }
            uint64_t v30 = v21;
            while (!__OFADD__(v29, ++v30))
            {
              LOBYTE(v19) = *(unsigned char *)(a1 + v29 + v30);
              float v19 = (float)LODWORD(v19);
              float v28 = v28 + v19;
              if (v17 == v30) {
                goto LABEL_35;
              }
            }
            __break(1u);
            break;
          }
LABEL_35:
          if (v20 == v18) {
            return result;
          }
          BOOL v24 = __OFADD__(v20++, 1);
          if (v24)
          {
            __break(1u);
            return result;
          }
        }
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        goto LABEL_44;
      }
      uint64_t v11 = v33[0];
      uint64_t v12 = v33[1];
      uint64_t v14 = v33[2];
      uint64_t v13 = v33[3];
    }
    uint64_t v23 = v11 + v14;
    if (__OFADD__(v11, v14))
    {
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    BOOL v24 = __OFSUB__(v23, 1);
    uint64_t v25 = v23 - 1;
    if (v24)
    {
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
    if (v25 < v17) {
      uint64_t v17 = v25;
    }
    uint64_t v26 = v12 + v13;
    if (__OFADD__(v12, v13)) {
      goto LABEL_49;
    }
    BOOL v24 = __OFSUB__(v26, 1);
    uint64_t v27 = v26 - 1;
    if (v24)
    {
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    if (v27 < v18) {
      uint64_t v18 = v27;
    }
    if ((unsigned __int128)(v14 * (__int128)v13) >> 64 != (v14 * v13) >> 63) {
      goto LABEL_51;
    }
    uint64_t v20 = v12 & ~(v12 >> 63);
    uint64_t v21 = v11 & ~(v11 >> 63);
    goto LABEL_25;
  }
  if (__OFADD__(v36, v38 / 2))
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  uint64_t v22 = v37 + v39 / 2;
  if (__OFADD__(v37, v39 / 2))
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  if (v16 < 0)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  if ((unsigned __int128)(v22 * (__int128)v16) >> 64 != (v22 * v16) >> 63)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  if (__OFADD__(v22 * v16, v36 + v38 / 2)) {
LABEL_56:
  }
    __break(1u);
  return result;
}

uint64_t sub_22F1893C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, double a13@<D3>, float a14@<S4>, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t *a18)
{
  sub_22F1899D0(a16, (uint64_t)v85, &qword_268694BA8);
  uint64_t v29 = v85[1];
  uint64_t v80 = v85[0];
  uint64_t v30 = v85[2];
  uint64_t v31 = v85[3];
  sub_22F1A9CE8((uint64_t)v84, a10, a11, a12, a13);
  uint64_t result = sub_22F1899D0((uint64_t)v84, (uint64_t)v90, &qword_268694BB0);
  if ((v91 & 1) != 0
    || (uint64_t v76 = v90[0],
        uint64_t v77 = v90[1],
        uint64_t v78 = v90[2],
        uint64_t v73 = v90[3],
        uint64_t result = sub_22F1899D0(a16, (uint64_t)v86, &qword_268694BA8),
        (v89 & 1) != 0))
  {
    uint64_t v33 = 0;
    goto LABEL_4;
  }
  if ((a3 | a2) < 0)
  {
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
    return result;
  }
  uint64_t v71 = a5;
  uint64_t v72 = v87;
  uint64_t v75 = v88;
  if ((a17 & 0x100000000) != 0)
  {
    memset(v96, 0, sizeof(v96));
    char v97 = 1;
    sub_22F189134(a6, a7, a8, a15, a16, (uint64_t)v96);
    float v38 = v39;
  }
  else
  {
    float v38 = *(float *)&a17;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v41 = *a18;
  if (isUniquelyReferenced_nonNull_native)
  {
    sub_22F183FD8(0, *(void *)(v41 + 16));
  }
  else
  {
    *a18 = (uint64_t)sub_22F1ACDCC(0, *(void *)(v41 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  sub_22F1A9F10(v76, v77, v78, v73, a18);
  uint64_t result = *a18;
  uint64_t v33 = *(void *)(*a18 + 16);
  if (!v33)
  {
LABEL_4:
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    char v37 = 1;
    goto LABEL_5;
  }
  uint64_t v42 = result + 32;
  uint64_t v74 = *a18;
  uint64_t v70 = *(void *)(*a18 + 16);
  swift_bridgeObjectRetain();
  uint64_t v43 = v70;
  uint64_t v44 = v72;
  uint64_t result = v74;
  uint64_t v69 = 0;
  unint64_t v45 = 0;
  float v46 = -1.0;
  uint64_t v79 = v42;
  do
  {
    if (v45 >= *(void *)(result + 16))
    {
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);
      goto LABEL_79;
    }
    long long v47 = *(_OWORD *)(v42 + 16 * v45);
    uint64_t v48 = *(void *)(v42 + 16 * v45);
    if ((v48 & 0x8000000000000000) == 0)
    {
      if (__OFADD__(v48, v44)) {
        goto LABEL_75;
      }
      if (v48 + v44 < a3)
      {
        uint64_t v49 = *(void *)(v42 + 16 * v45 + 8);
        if ((*((void *)&v47 + 1) & 0x8000000000000000) != 0) {
          goto LABEL_15;
        }
        if (__OFADD__(*((void *)&v47 + 1), v75)) {
          goto LABEL_76;
        }
        if (*((void *)&v47 + 1) + v75 >= a2)
        {
LABEL_15:
          uint64_t v42 = v79;
          goto LABEL_16;
        }
        if (a8 < 0) {
          goto LABEL_77;
        }
        long long v92 = v47;
        uint64_t v93 = v30;
        uint64_t v94 = v31;
        char v95 = 0;
        uint64_t result = sub_22F189134(a1, a2, a3, a4, v71, (uint64_t)&v92);
        if (v31 < 0) {
          goto LABEL_78;
        }
        if (v31)
        {
          if (v30 < 0) {
            goto LABEL_80;
          }
          uint64_t v53 = 0;
          float v54 = 0.0;
          float v55 = 0.0;
          float v56 = 0.0;
          do
          {
            if (v53 == v31) {
              goto LABEL_67;
            }
            uint64_t v57 = v29 + v53;
            if (__OFADD__(v29, v53)) {
              goto LABEL_68;
            }
            uint64_t v58 = v57 * a8;
            if ((unsigned __int128)(v57 * (__int128)a8) >> 64 != (v57 * a8) >> 63) {
              goto LABEL_69;
            }
            BOOL v59 = __OFADD__(v58, v80);
            uint64_t v60 = v58 + v80;
            if (v59) {
              goto LABEL_70;
            }
            uint64_t v61 = v49 + v53;
            if (__OFADD__(v49, v53)) {
              goto LABEL_71;
            }
            uint64_t v62 = v61 * a3;
            if ((unsigned __int128)(v61 * (__int128)a3) >> 64 != (v61 * a3) >> 63) {
              goto LABEL_72;
            }
            if (v30)
            {
              BOOL v59 = __OFADD__(v62, v48);
              uint64_t v63 = v62 + v48;
              if (!v59)
              {
                uint64_t v64 = 0;
                while (1)
                {
                  uint64_t v65 = v60 + v64;
                  if (__OFADD__(v60, v64)) {
                    break;
                  }
                  uint64_t v66 = v63 + v64;
                  if (__OFADD__(v63, v64)) {
                    goto LABEL_66;
                  }
                  ++v64;
                  LOBYTE(v51) = *(unsigned char *)(a6 + v65);
                  float v67 = (float)LODWORD(v51) - v38;
                  LOBYTE(v52) = *(unsigned char *)(a1 + v66);
                  float v52 = (float)LODWORD(v52) - v50;
                  float v56 = v56 + (float)(v67 * v52);
                  float v55 = v55 + (float)(v67 * v67);
                  float v51 = v52 * v52;
                  float v54 = v54 + (float)(v52 * v52);
                  if (v30 == v64) {
                    goto LABEL_29;
                  }
                }
                __break(1u);
LABEL_66:
                __break(1u);
LABEL_67:
                __break(1u);
LABEL_68:
                __break(1u);
LABEL_69:
                __break(1u);
LABEL_70:
                __break(1u);
LABEL_71:
                __break(1u);
LABEL_72:
                __break(1u);
              }
              __break(1u);
              goto LABEL_74;
            }
LABEL_29:
            ++v53;
          }
          while (v53 != v31);
          if (v56 <= 0.0) {
            goto LABEL_48;
          }
          uint64_t v44 = v72;
          uint64_t result = v74;
          uint64_t v43 = v70;
          if (v55 != 0.0 && v54 != 0.0)
          {
            float v68 = v56 / sqrtf(v54 * v55);
            if (v46 < v68) {
              goto LABEL_49;
            }
LABEL_50:
            if (v68 < a14) {
              goto LABEL_15;
            }
LABEL_53:
            BOOL v59 = __OFADD__(v69++, 1);
            uint64_t v42 = v79;
            if (v59) {
              goto LABEL_81;
            }
            goto LABEL_16;
          }
          float v68 = 0.0;
          if (v46 >= 0.0) {
            goto LABEL_52;
          }
        }
        else
        {
LABEL_48:
          float v68 = 0.0;
          uint64_t v44 = v72;
          uint64_t result = v74;
          uint64_t v43 = v70;
          if (v46 >= 0.0)
          {
LABEL_52:
            if (a14 > 0.0) {
              goto LABEL_15;
            }
            goto LABEL_53;
          }
        }
LABEL_49:
        uint64_t v76 = v48;
        uint64_t v77 = v49;
        float v46 = v68;
        goto LABEL_50;
      }
    }
LABEL_16:
    ++v45;
  }
  while (v45 != v43);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v33 = v76;
  uint64_t v34 = v77;
  if (v46 <= 0.0) {
    uint64_t v33 = 0;
  }
  uint64_t v35 = LODWORD(v46);
  if (v46 <= 0.0)
  {
    uint64_t v34 = 0;
    uint64_t v35 = 0;
  }
  uint64_t v36 = v69;
  if (v46 > 0.0)
  {
    char v37 = 0;
  }
  else
  {
    uint64_t v36 = 0;
    char v37 = 1;
  }
LABEL_5:
  *(void *)a9 = v33;
  *(void *)(a9 + 8) = v34;
  *(void *)(a9 + 16) = v35;
  *(void *)(a9 + 24) = v36;
  *(unsigned char *)(a9 + 32) = v37;
  return result;
}

uint64_t _s17MeasureFoundation6CVUtilC14signedDistance5point7contour12CoreGraphics7CGFloatVSo7CGPointV_SayAKGtFZ_0(uint64_t result, double a2, double a3)
{
  uint64_t v3 = *(void *)(result + 16);
  if (!v3) {
    goto LABEL_25;
  }
  uint64_t v4 = 0;
  uint64_t v5 = result + 16 * v3;
  double v6 = *(double *)(v5 + 16);
  double v7 = *(double *)(v5 + 24);
  id v8 = (double *)(result + 40);
  double v9 = 1.0;
  double v10 = INFINITY;
  while (1)
  {
    double v14 = v6;
    double v15 = v7;
    double v6 = *(v8 - 1);
    double v7 = *v8;
    double v16 = v6 - v14;
    double v17 = *v8 - v15;
    double v18 = a2 - v14;
    double v19 = a3 - v15;
    if ((a2 - v14) * (v6 - v14) + (a3 - v15) * v17 <= 0.0)
    {
      double v20 = v19 * v19 + v18 * v18;
LABEL_13:
      double v21 = 1.0;
      goto LABEL_14;
    }
    if ((a2 - v6) * v16 + (a3 - v7) * v17 >= 0.0)
    {
      double v20 = (a2 - v6) * (a2 - v6) + (a3 - v7) * (a3 - v7);
      goto LABEL_13;
    }
    double v20 = (v19 * v16 - v18 * v17) * (v19 * v16 - v18 * v17);
    double v21 = v16 * v16 + v17 * v17;
LABEL_14:
    if (v9 * v20 < v10 * v21)
    {
      double v9 = v21;
      double v10 = v20;
      if (v20 == 0.0) {
        return result;
      }
    }
    if ((v15 > a3 || v7 > a3) && (v15 <= a3 || v7 <= a3) && (v14 >= a2 || v6 >= a2))
    {
      double v11 = v17 >= 0.0 ? v19 * v16 - v18 * v17 : -(v19 * v16 - v18 * v17);
      uint64_t v12 = v11 > 0.0;
      BOOL v13 = __OFADD__(v4, v12);
      v4 += v12;
      if (v13) {
        break;
      }
    }
    v8 += 2;
    if (!--v3) {
      return result;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for CVUtil()
{
  return self;
}

uint64_t sub_22F1899D0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

id _s17MeasureFoundation8ViewportC8portView33_7C22ACC4716B0FDE2A507783D80F08CBLLSo6UIViewCvpfi_0()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82E00]), sel_init);
  id v1 = objc_msgSend(v0, sel_layer);
  id v2 = objc_msgSend(self, sel_whiteColor);
  id v3 = objc_msgSend(v2, sel_CGColor);

  objc_msgSend(v1, sel_setBorderColor_, v3);
  id v4 = objc_msgSend(v0, sel_layer);
  objc_msgSend(v4, sel_setBorderWidth_, 1.0);

  id v5 = objc_msgSend(v0, sel_layer);
  objc_msgSend(v5, sel_setCornerRadius_, 5.0);

  objc_msgSend(v0, sel_setAlpha_, 0.25);
  return v0;
}

void sub_22F189B60()
{
  objc_msgSend(v0, sel_setUserInteractionEnabled_, 0);
  id v1 = *(void **)&v0[OBJC_IVAR____TtC17MeasureFoundation8Viewport_portView];
  objc_msgSend(v0, sel_addSubview_, v1);
  objc_msgSend(v1, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  id v2 = self;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_268695250);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_22F2272D0;
  id v4 = objc_msgSend(v1, sel_widthAnchor);
  id v5 = (double *)&v0[OBJC_IVAR____TtC17MeasureFoundation8Viewport_portSize];
  id v6 = objc_msgSend(v4, sel_constraintEqualToConstant_, *(double *)&v0[OBJC_IVAR____TtC17MeasureFoundation8Viewport_portSize]);

  *(void *)(v3 + 32) = v6;
  id v7 = objc_msgSend(v1, sel_heightAnchor);
  id v8 = objc_msgSend(v7, sel_constraintEqualToConstant_, v5[1]);

  *(void *)(v3 + 40) = v8;
  id v9 = objc_msgSend(v1, sel_centerXAnchor);
  id v10 = objc_msgSend(v0, sel_centerXAnchor);
  id v11 = objc_msgSend(v9, sel_constraintEqualToAnchor_, v10);

  *(void *)(v3 + 48) = v11;
  id v12 = objc_msgSend(v1, sel_centerYAnchor);
  id v13 = objc_msgSend(v0, sel_centerYAnchor);
  id v14 = objc_msgSend(v12, sel_constraintEqualToAnchor_constant_, v13, 0.0);

  *(void *)(v3 + 56) = v14;
  sub_22F223CD8();
  sub_22F189F6C();
  id v15 = (id)sub_22F223CA8();
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_activateConstraints_, v15);
}

id Viewport.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

void Viewport.init(frame:)()
{
}

id Viewport.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for Viewport()
{
  return self;
}

unint64_t sub_22F189F6C()
{
  unint64_t result = qword_268694BC8;
  if (!qword_268694BC8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_268694BC8);
  }
  return result;
}

char *RecordReplayOption.default.unsafeMutableAddressor()
{
  return &static RecordReplayOption.default;
}

uint64_t static RecordReplayOption.default.getter()
{
  return static RecordReplayOption.default;
}

uint64_t static RecordReplayOption.default.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  static RecordReplayOption.default = a1;
  return result;
}

uint64_t (*static RecordReplayOption.default.modify())()
{
  return j__swift_endAccess;
}

uint64_t sub_22F18A09C()
{
  uint64_t v0 = sub_22F223788();
  __swift_allocate_value_buffer(v0, static RecordReplayOption.defaultSessionFile);
  __swift_project_value_buffer(v0, (uint64_t)static RecordReplayOption.defaultSessionFile);
  if (qword_268694340 != -1) {
    swift_once();
  }
  __swift_project_value_buffer(v0, (uint64_t)qword_26869BB60);
  return sub_22F223768();
}

uint64_t RecordReplayOption.defaultSessionFile.unsafeMutableAddressor()
{
  if (qword_268694398 != -1) {
    swift_once();
  }
  uint64_t v0 = sub_22F223788();
  return __swift_project_value_buffer(v0, (uint64_t)static RecordReplayOption.defaultSessionFile);
}

uint64_t static RecordReplayOption.defaultSessionFile.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_268694398 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_22F223788();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static RecordReplayOption.defaultSessionFile);
  id v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  return v4(a1, v3, v2);
}

Swift::Bool __swiftcall RecordReplayOption.isRecording()()
{
  return v0 - 1 < 2;
}

Swift::Bool __swiftcall RecordReplayOption.isReplaying()()
{
  return v0 - 3 < 2;
}

uint64_t RecordReplayOption.recordFile.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_22F2236C8();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  id v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = objc_msgSend(self, sel_standardUserDefaults);
  id v7 = (void *)sub_22F223A98();
  id v8 = objc_msgSend(v6, sel_stringForKey_, v7);

  if (v8)
  {
    uint64_t v9 = sub_22F223AC8();
    unint64_t v11 = v10;
  }
  else
  {
    uint64_t v9 = 0;
    unint64_t v11 = 0xE000000000000000;
  }
  v19[0] = v9;
  v19[1] = v11;
  sub_22F2236B8();
  sub_22F18B724();
  uint64_t v12 = sub_22F224218();
  unint64_t v14 = v13;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  swift_bridgeObjectRelease();
  uint64_t v15 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000) == 0) {
    uint64_t v15 = v12 & 0xFFFFFFFFFFFFLL;
  }
  if (v15)
  {
    sub_22F223738();
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    if (qword_268694398 != -1) {
      swift_once();
    }
    uint64_t v17 = sub_22F223788();
    uint64_t v18 = __swift_project_value_buffer(v17, (uint64_t)static RecordReplayOption.defaultSessionFile);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16))(a1, v18, v17);
  }
}

void *Defaults.recordCustomFile.unsafeMutableAddressor()
{
  return &static Defaults.recordCustomFile;
}

uint64_t RecordReplayOption.replayFile.getter@<X0>(unsigned __int8 a1@<W0>, unint64_t a2@<X8>)
{
  int v3 = a1;
  v116[6] = *(void **)MEMORY[0x263EF8340];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_268694BE8);
  MEMORY[0x270FA5388](v4 - 8);
  id v6 = (char *)&v87 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_268694BF0);
  MEMORY[0x270FA5388](v7 - 8);
  v107 = (char *)&v87 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_268694BF8);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v12 = (char *)&v87 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  unint64_t v14 = (char *)&v87 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_268694C00);
  uint64_t v108 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v113 = (uint64_t)&v87 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_268694C08);
  uint64_t v18 = MEMORY[0x270FA5388](v17 - 8);
  double v20 = (char *)&v87 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  v109 = (char *)&v87 - v21;
  uint64_t v22 = sub_22F223788();
  uint64_t v100 = *(void *)(v22 - 8);
  uint64_t v23 = MEMORY[0x270FA5388](v22);
  v114 = (char *)&v87 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  v102 = (char *)&v87 - v26;
  MEMORY[0x270FA5388](v25);
  uint64_t v94 = (char *)&v87 - v27;
  if (v3 != 3) {
    goto LABEL_41;
  }
  v112 = v14;
  v90 = v20;
  char v91 = v6;
  id v28 = objc_msgSend(self, sel_defaultManager);
  if (qword_268694340 != -1) {
    goto LABEL_45;
  }
LABEL_3:
  __swift_project_value_buffer(v22, (uint64_t)qword_26869BB60);
  uint64_t v29 = (void *)sub_22F223758();
  uint64_t v106 = __swift_instantiateConcreteTypeFromMangledName(&qword_268694C10);
  uint64_t v30 = swift_allocObject();
  long long v105 = xmmword_22F227140;
  *(_OWORD *)(v30 + 16) = xmmword_22F227140;
  uint64_t v31 = (void *)*MEMORY[0x263EFF5F8];
  *(void *)(v30 + 32) = *MEMORY[0x263EFF5F8];
  type metadata accessor for URLResourceKey(0);
  uint64_t v33 = v32;
  id v103 = v31;
  uint64_t v104 = v33;
  uint64_t v34 = (void *)sub_22F223CA8();
  swift_bridgeObjectRelease();
  v116[0] = 0;
  id v35 = objc_msgSend(v28, sel_contentsOfDirectoryAtURL_includingPropertiesForKeys_options_error_, v29, v34, 4, v116);

  uint64_t v36 = v116[0];
  if (!v35)
  {
    float v51 = v36;
    float v52 = (void *)sub_22F2236F8();

    swift_willThrow();
LABEL_41:
    id v83 = objc_msgSend(self, sel_standardUserDefaults);
    v84 = (void *)sub_22F223A98();
    id v85 = objc_msgSend(v83, sel_stringForKey_, v84);

    if (v85)
    {
      sub_22F223AC8();

      sub_22F223738();
      return swift_bridgeObjectRelease();
    }
    else
    {
      __break(1u);
      uint64_t result = swift_release();
      __break(1u);
    }
    return result;
  }
  uint64_t v37 = sub_22F223CB8();

  float v38 = (void *)MEMORY[0x263F8EE78];
  v116[0] = (void *)MEMORY[0x263F8EE78];
  float v39 = *(void (***)(char *, uint64_t))(v37 + 16);
  v111 = v12;
  uint64_t v40 = v22;
  v101 = v39;
  char v89 = (void (**)(void, void))a2;
  uint64_t v115 = v22;
  if (!v39)
  {
    uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v100 + 56);
    uint64_t v22 = (uint64_t)v109;
    v44(v109, 1, 1, v40);
    goto LABEL_20;
  }
  uint64_t v88 = v15;
  a2 = 0;
  v98 = (void *)(v100 + 16);
  uint64_t v96 = v100 + 48;
  uint64_t v15 = v100 + 32;
  long long v92 = (void (**)(char *, uint64_t))(v100 + 8);
  uint64_t v97 = v100 + 56;
  unint64_t v87 = (v100 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  uint64_t v22 = (uint64_t)v109;
  uint64_t v41 = v94;
  uint64_t v95 = v37;
  uint64_t v93 = v100 + 32;
  do
  {
    if (a2 >= *(void *)(v37 + 16))
    {
      __break(1u);
LABEL_45:
      swift_once();
      goto LABEL_3;
    }
    uint64_t v42 = v100;
    unint64_t v43 = (*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80);
    id v28 = *(id *)(v100 + 72);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v100 + 16))(v22, v37 + v43 + (void)v28 * a2, v40);
    uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v42 + 56);
    v44((char *)v22, 0, 1, v40);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v22, 1, v40) == 1)
    {
      a2 = (unint64_t)v89;
      uint64_t v15 = v88;
      uint64_t v12 = v111;
      float v38 = (void *)MEMORY[0x263F8EE78];
      goto LABEL_20;
    }
    unint64_t v110 = v43;
    unint64_t v45 = *(void (**)(char *, char *, uint64_t))v15;
    (*(void (**)(char *, uint64_t, uint64_t))v15)(v41, v22, v40);
    sub_22F223748();
    sub_22F223B08();
    swift_bridgeObjectRelease();
    char v46 = sub_22F223BA8();
    swift_bridgeObjectRelease();
    if (v46)
    {
      v45(v102, v41, v40);
      long long v47 = (char *)v116[0];
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v99 = v44;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_22F18FC48(0, *((void *)v47 + 2) + 1, 1);
        uint64_t v41 = v94;
        long long v47 = (char *)v116[0];
      }
      uint64_t v22 = (uint64_t)v109;
      unint64_t v50 = *((void *)v47 + 2);
      unint64_t v49 = *((void *)v47 + 3);
      uint64_t v15 = v93;
      if (v50 >= v49 >> 1)
      {
        sub_22F18FC48(v49 > 1, v50 + 1, 1);
        uint64_t v41 = v94;
        long long v47 = (char *)v116[0];
      }
      *((void *)v47 + 2) = v50 + 1;
      uint64_t v40 = v115;
      v45(&v47[v110 + v50 * (void)v28], v102, v115);
      v116[0] = v47;
      uint64_t v12 = v111;
      uint64_t v44 = v99;
    }
    else
    {
      (*v92)(v41, v40);
      uint64_t v12 = v111;
      uint64_t v22 = (uint64_t)v109;
    }
    ++a2;
    uint64_t v37 = v95;
  }
  while (v101 != (void (**)(char *, uint64_t))a2);
  a2 = (unint64_t)v89;
  uint64_t v15 = v88;
  float v38 = (void *)MEMORY[0x263F8EE78];
  v44((char *)v22, 1, 1, v40);
LABEL_20:
  v99 = v44;
  swift_bridgeObjectRelease();
  sub_22F196338(v22, &qword_268694C08);
  uint64_t v53 = v116[0];
  int64_t v54 = v116[0][2];
  if (v54)
  {
    v116[0] = v38;
    sub_22F18FC28(0, v54, 0);
    v109 = *(char **)(v100 + 16);
    unint64_t v55 = (*(unsigned __int8 *)(v100 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80);
    v98 = v53;
    float v56 = (char *)v53 + v55;
    v102 = *(char **)(v100 + 72);
    unint64_t v110 = v100 + 16;
    v101 = (void (**)(char *, uint64_t))(v100 + 8);
    while (1)
    {
      uint64_t v57 = v15;
      ((void (*)(char *, char *, uint64_t))v109)(v114, v56, v40);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v105;
      BOOL v59 = v103;
      *(void *)(inited + 32) = v103;
      id v60 = v59;
      sub_22F195A38(inited);
      swift_setDeallocating();
      swift_arrayDestroy();
      uint64_t v61 = (uint64_t)v112;
      sub_22F223718();
      swift_bridgeObjectRelease();
      uint64_t v62 = sub_22F2236E8();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56))(v61, 0, 1, v62);
      uint64_t v63 = v113 + *(int *)(v15 + 48);
      ((void (*)(void))v109)();
      sub_22F186CEC(v61, (uint64_t)v12, &qword_268694BF8);
      sub_22F2236E8();
      uint64_t v64 = *(void *)(v62 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v12, 1, v62) == 1)
      {
        sub_22F196338((uint64_t)v12, &qword_268694BF8);
        uint64_t v65 = sub_22F2237F8();
        uint64_t v66 = (uint64_t)v107;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 56))(v107, 1, 1, v65);
      }
      else
      {
        float v67 = v107;
        sub_22F2236D8();
        (*(void (**)(char *, uint64_t))(v64 + 8))(v111, v62);
        uint64_t v66 = (uint64_t)v67;
        uint64_t v12 = v111;
        uint64_t v68 = sub_22F2237F8();
        uint64_t v69 = *(void *)(v68 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v69 + 48))(v66, 1, v68) != 1)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v69 + 32))(v63, v66, v68);
          goto LABEL_27;
        }
      }
      _s17MeasureFoundation16MeasurementEventV4time0B04DateVvpfi_0();
      sub_22F196338(v66, &qword_268694BF0);
LABEL_27:
      sub_22F196338((uint64_t)v112, &qword_268694BF8);
      (*v101)(v114, v115);
      uint64_t v70 = v116[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_22F18FC28(0, v70[2] + 1, 1);
        uint64_t v70 = v116[0];
      }
      uint64_t v71 = v108;
      unint64_t v73 = v70[2];
      unint64_t v72 = v70[3];
      if (v73 >= v72 >> 1)
      {
        sub_22F18FC28(v72 > 1, v73 + 1, 1);
        uint64_t v71 = v108;
        uint64_t v70 = v116[0];
      }
      v70[2] = v73 + 1;
      sub_22F1899D0(v113, (uint64_t)v70+ ((*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80))+ *(void *)(v71 + 72) * v73, &qword_268694C00);
      float v56 = &v102[(void)v56];
      --v54;
      uint64_t v15 = v57;
      uint64_t v40 = v115;
      if (!v54)
      {
        swift_release();
        a2 = (unint64_t)v89;
        goto LABEL_34;
      }
    }
  }
  swift_release();
  uint64_t v70 = (void *)MEMORY[0x263F8EE78];
LABEL_34:
  uint64_t v74 = v108;
  v116[0] = v70;
  swift_bridgeObjectRetain();
  sub_22F18DC74(v116);
  swift_bridgeObjectRelease();
  if (v116[0][2])
  {
    uint64_t v75 = (uint64_t)v91;
    sub_22F186CEC((uint64_t)v116[0] + ((*(unsigned __int8 *)(v74 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v74 + 80)), (uint64_t)v91, &qword_268694C00);
    uint64_t v76 = 0;
  }
  else
  {
    uint64_t v76 = 1;
    uint64_t v75 = (uint64_t)v91;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v74 + 56))(v75, v76, 1, v15);
  swift_release();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48))(v75, 1, v15) == 1)
  {
    sub_22F196338(v75, &qword_268694BE8);
    uint64_t v77 = (uint64_t)v90;
    v99(v90, 1, 1, v40);
LABEL_40:
    sub_22F196338(v77, &qword_268694C08);
    goto LABEL_41;
  }
  uint64_t v78 = v75 + *(int *)(v15 + 48);
  uint64_t v79 = v100;
  uint64_t v80 = v75;
  uint64_t v81 = *(void (**)(char *, uint64_t, uint64_t))(v100 + 32);
  uint64_t v77 = (uint64_t)v90;
  v81(v90, v80, v40);
  v99((char *)v77, 0, 1, v40);
  uint64_t v82 = sub_22F2237F8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v82 - 8) + 8))(v78, v82);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v79 + 48))(v77, 1, v40) == 1) {
    goto LABEL_40;
  }
  return ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v81)(a2, v77, v40);
}

void *Defaults.replayCustomFile.unsafeMutableAddressor()
{
  return &static Defaults.replayCustomFile;
}

uint64_t static RecordReplayOption.insertTimestamp(to:)()
{
  uint64_t v0 = sub_22F2237F8();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  int v3 = (char *)v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08790]), sel_init);
  uint64_t v5 = (void *)sub_22F223A98();
  objc_msgSend(v4, sel_setDateFormat_, v5);

  _s17MeasureFoundation16MeasurementEventV4time0B04DateVvpfi_0();
  id v6 = (void *)sub_22F2237A8();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  id v7 = objc_msgSend(v4, sel_stringFromDate_, v6);

  uint64_t v8 = sub_22F223AC8();
  uint64_t v10 = v9;

  v13[4] = sub_22F223778();
  v13[5] = v11;
  v13[2] = 2104718459;
  v13[3] = 0xE400000000000000;
  v13[0] = v8;
  v13[1] = v10;
  sub_22F18B724();
  sub_22F224228();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_22F223738();

  return swift_bridgeObjectRelease();
}

uint64_t RecordReplayOption.rawValue.getter(uint64_t result)
{
  return result;
}

BOOL sub_22F18B620(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_22F18B634()
{
  return sub_22F224818();
}

uint64_t sub_22F18B67C()
{
  return sub_22F2247F8();
}

uint64_t sub_22F18B6A8()
{
  return sub_22F224818();
}

unint64_t sub_22F18B6EC@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = _s17MeasureFoundation18RecordReplayOptionO8rawValueACSgSi_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_22F18B718(void *a1@<X8>)
{
  *a1 = *v1;
}

unint64_t sub_22F18B724()
{
  unint64_t result = qword_268695260;
  if (!qword_268695260)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268695260);
  }
  return result;
}

unint64_t sub_22F18B778()
{
  unint64_t result = sub_22F18B798();
  qword_268694BD0 = result;
  return result;
}

unint64_t sub_22F18B798()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_268694CD0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22F2272F0;
  strcpy((char *)(inited + 32), "kADDemoEnabled");
  *(unsigned char *)(inited + 47) = -18;
  uint64_t v1 = MEMORY[0x263F8D4F8];
  *(unsigned char *)(inited + 48) = 0;
  *(void *)(inited + 72) = v1;
  *(void *)(inited + 80) = 0xD000000000000013;
  *(void *)(inited + 88) = 0x800000022F22D520;
  *(unsigned char *)(inited + 96) = 0;
  *(void *)(inited + 120) = v1;
  strcpy((char *)(inited + 128), "kADVGAEnabled");
  *(_WORD *)(inited + 142) = -4864;
  *(unsigned char *)(inited + 144) = 0;
  *(void *)(inited + 168) = v1;
  *(void *)(inited + 176) = 0xD000000000000013;
  *(void *)(inited + 184) = 0x800000022F22D540;
  *(unsigned char *)(inited + 192) = 0;
  *(void *)(inited + 216) = v1;
  *(void *)(inited + 224) = 0xD000000000000012;
  *(void *)(inited + 232) = 0x800000022F22D560;
  *(unsigned char *)(inited + 240) = 0;
  *(void *)(inited + 264) = v1;
  strcpy((char *)(inited + 272), "kADShowDepth");
  *(unsigned char *)(inited + 285) = 0;
  *(_WORD *)(inited + 286) = -5120;
  *(unsigned char *)(inited + 288) = 0;
  *(void *)(inited + 312) = v1;
  *(void *)(inited + 320) = 0xD000000000000011;
  *(void *)(inited + 328) = 0x800000022F22D580;
  *(unsigned char *)(inited + 336) = 0;
  *(void *)(inited + 360) = v1;
  strcpy((char *)(inited + 368), "kADShowNormal");
  *(_WORD *)(inited + 382) = -4864;
  *(unsigned char *)(inited + 384) = 0;
  *(void *)(inited + 408) = v1;
  strcpy((char *)(inited + 416), "kADShowWindow");
  *(_WORD *)(inited + 430) = -4864;
  *(unsigned char *)(inited + 432) = 0;
  *(void *)(inited + 456) = v1;
  strcpy((char *)(inited + 464), "kADBlackMode");
  *(unsigned char *)(inited + 477) = 0;
  *(_WORD *)(inited + 478) = -5120;
  *(unsigned char *)(inited + 480) = 0;
  *(void *)(inited + 504) = v1;
  *(void *)(inited + 512) = 0xD000000000000016;
  *(void *)(inited + 520) = 0x800000022F22D5A0;
  *(void *)(inited + 552) = v1;
  *(unsigned char *)(inited + 528) = 0;
  *(void *)(inited + 560) = 0xD00000000000001DLL;
  *(void *)(inited + 568) = 0x800000022F22E4E0;
  *(void *)(inited + 600) = v1;
  *(unsigned char *)(inited + 576) = 0;
  *(void *)(inited + 608) = 0xD000000000000011;
  *(void *)(inited + 616) = 0x800000022F22E500;
  *(void *)(inited + 648) = v1;
  *(unsigned char *)(inited + 624) = 1;
  *(void *)(inited + 656) = 0xD000000000000017;
  *(void *)(inited + 664) = 0x800000022F22E370;
  *(void *)(inited + 696) = v1;
  strcpy((char *)(inited + 704), "kPEADTestMode");
  *(_WORD *)(inited + 718) = -4864;
  uint64_t v2 = MEMORY[0x263F8D6C8];
  *(unsigned char *)(inited + 672) = 0;
  *(void *)(inited + 744) = v2;
  *(void *)(inited + 720) = 1;
  *(void *)(inited + 752) = 0xD000000000000012;
  *(void *)(inited + 760) = 0x800000022F22E450;
  *(void *)(inited + 792) = v1;
  *(unsigned char *)(inited + 768) = 0;
  *(void *)(inited + 800) = 0xD00000000000001BLL;
  *(void *)(inited + 808) = 0x800000022F22E520;
  *(void *)(inited + 840) = v1;
  *(unsigned char *)(inited + 816) = 0;
  *(void *)(inited + 848) = 0xD000000000000023;
  *(void *)(inited + 856) = 0x800000022F22E540;
  *(void *)(inited + 888) = v1;
  *(unsigned char *)(inited + 864) = 0;
  return sub_22F18590C(inited);
}

const char *Defaults.adDemoEnabled.unsafeMutableAddressor()
{
  return "kADDemoEnabled";
}

void *Defaults.adDirectAPIEnabled.unsafeMutableAddressor()
{
  return &static Defaults.adDirectAPIEnabled;
}

const char *Defaults.adVGAEnabled.unsafeMutableAddressor()
{
  return "kADVGAEnabled";
}

void *Defaults.adShowJasperPoints.unsafeMutableAddressor()
{
  return &static Defaults.adShowJasperPoints;
}

void *Defaults.adShowWorldPoints.unsafeMutableAddressor()
{
  return &static Defaults.adShowWorldPoints;
}

const char *Defaults.adShowDepth.unsafeMutableAddressor()
{
  return "kADShowDepth";
}

void *Defaults.adShowConfidence.unsafeMutableAddressor()
{
  return &static Defaults.adShowConfidence;
}

const char *Defaults.adShowNormal.unsafeMutableAddressor()
{
  return "kADShowNormal";
}

const char *Defaults.adShowWindow.unsafeMutableAddressor()
{
  return "kADShowWindow";
}

const char *Defaults.adBlackMode.unsafeMutableAddressor()
{
  return "kADBlackMode";
}

void *Defaults.adGuidedFilterEnabled.unsafeMutableAddressor()
{
  return &static Defaults.adGuidedFilterEnabled;
}

void *Defaults.personHeightDebugViewEnabled.unsafeMutableAddressor()
{
  return &static Defaults.personHeightDebugViewEnabled;
}

void *Defaults.divisionsEnabled.unsafeMutableAddressor()
{
  return &static Defaults.divisionsEnabled;
}

void *Defaults.adEdgeDetectionEnabled.unsafeMutableAddressor()
{
  return &static Defaults.adEdgeDetectionEnabled;
}

const char *Defaults.peADTestMode.unsafeMutableAddressor()
{
  return "kPEADTestMode";
}

void *Defaults.peShowADIndicator.unsafeMutableAddressor()
{
  return &static Defaults.peShowADIndicator;
}

void *Defaults.semanticMeasurementsEnabled.unsafeMutableAddressor()
{
  return &static Defaults.semanticMeasurementsEnabled;
}

void *Defaults.semanticMeasurementsDebuggerEnabled.unsafeMutableAddressor()
{
  return &static Defaults.semanticMeasurementsDebuggerEnabled;
}

unint64_t sub_22F18BB70()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_268694CD0);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_22F227300;
  *(void *)(v0 + 32) = 0xD000000000000010;
  *(void *)(v0 + 40) = 0x800000022F22D6E0;
  uint64_t v1 = MEMORY[0x263F8D4F8];
  *(unsigned char *)(v0 + 48) = 0;
  *(void *)(v0 + 72) = v1;
  *(void *)(v0 + 80) = 0x617453776F68536BLL;
  *(void *)(v0 + 88) = 0xEF73636974736974;
  *(unsigned char *)(v0 + 96) = 0;
  *(void *)(v0 + 120) = v1;
  *(void *)(v0 + 128) = 0xD000000000000012;
  *(void *)(v0 + 136) = 0x800000022F22E0F0;
  *(unsigned char *)(v0 + 144) = 0;
  *(void *)(v0 + 168) = v1;
  *(void *)(v0 + 176) = 0xD000000000000019;
  *(void *)(v0 + 184) = 0x800000022F22E130;
  *(unsigned char *)(v0 + 192) = 0;
  *(void *)(v0 + 216) = v1;
  *(void *)(v0 + 224) = 0xD000000000000017;
  *(void *)(v0 + 232) = 0x800000022F22E150;
  *(unsigned char *)(v0 + 240) = 0;
  *(void *)(v0 + 264) = v1;
  *(void *)(v0 + 272) = 0x706154656469486BLL;
  *(void *)(v0 + 280) = 0xEF72616461526F54;
  *(unsigned char *)(v0 + 288) = 0;
  *(void *)(v0 + 312) = v1;
  *(void *)(v0 + 320) = 0xD00000000000001CLL;
  *(void *)(v0 + 328) = 0x800000022F22E1B0;
  *(unsigned char *)(v0 + 336) = 0;
  *(void *)(v0 + 360) = v1;
  *(void *)(v0 + 368) = 0xD000000000000019;
  *(void *)(v0 + 376) = 0x800000022F22E200;
  *(unsigned char *)(v0 + 384) = 1;
  *(void *)(v0 + 408) = v1;
  *(void *)(v0 + 416) = 0xD000000000000020;
  *(void *)(v0 + 424) = 0x800000022F22E1D0;
  *(unsigned char *)(v0 + 432) = 0;
  *(void *)(v0 + 456) = v1;
  *(void *)(v0 + 464) = 0xD000000000000016;
  uint64_t v2 = MEMORY[0x263F8D538];
  *(void *)(v0 + 472) = 0x800000022F22E220;
  *(void *)(v0 + 480) = 0x3FE0000000000000;
  *(void *)(v0 + 504) = v2;
  *(void *)(v0 + 512) = 0xD000000000000012;
  *(void *)(v0 + 520) = 0x800000022F22E240;
  *(void *)(v0 + 552) = v2;
  *(void *)(v0 + 528) = 0x4010000000000000;
  *(void *)(v0 + 560) = 0xD000000000000010;
  *(void *)(v0 + 568) = 0x800000022F22E260;
  *(void *)(v0 + 600) = v2;
  *(void *)(v0 + 576) = 0;
  *(void *)(v0 + 608) = 0xD000000000000019;
  *(void *)(v0 + 616) = 0x800000022F22E170;
  *(void *)(v0 + 648) = v1;
  *(unsigned char *)(v0 + 624) = 1;
  *(void *)(v0 + 656) = 0xD000000000000019;
  *(void *)(v0 + 664) = 0x800000022F22E190;
  *(void *)(v0 + 696) = v1;
  *(unsigned char *)(v0 + 672) = 0;
  strcpy((char *)(v0 + 704), "kRecordARKit");
  *(unsigned char *)(v0 + 717) = 0;
  *(_WORD *)(v0 + 718) = -5120;
  swift_beginAccess();
  uint64_t v3 = static RecordReplayOption.default;
  *(void *)(v0 + 744) = MEMORY[0x263F8D9D0];
  *(void *)(v0 + 720) = v3;
  *(void *)(v0 + 752) = 0xD000000000000013;
  *(void *)(v0 + 760) = 0x800000022F22E2C0;
  *(void *)(v0 + 792) = v1;
  *(unsigned char *)(v0 + 768) = 1;
  *(void *)(v0 + 800) = 0xD000000000000015;
  *(void *)(v0 + 808) = 0x800000022F22E2E0;
  *(void *)(v0 + 840) = v1;
  *(unsigned char *)(v0 + 816) = 1;
  *(void *)(v0 + 848) = 0xD000000000000019;
  *(void *)(v0 + 856) = 0x800000022F22E300;
  uint64_t v4 = MEMORY[0x263F8D6C8];
  *(void *)(v0 + 888) = MEMORY[0x263F8D6C8];
  *(void *)(v0 + 864) = 50;
  *(void *)(v0 + 896) = 0xD000000000000021;
  *(void *)(v0 + 904) = 0x800000022F22E320;
  *(void *)(v0 + 936) = v1;
  *(unsigned char *)(v0 + 912) = 0;
  *(void *)(v0 + 944) = 0xD00000000000001CLL;
  *(void *)(v0 + 952) = 0x800000022F22E350;
  *(void *)(v0 + 984) = v1;
  *(unsigned char *)(v0 + 960) = 0;
  *(void *)(v0 + 992) = 0xD000000000000012;
  *(void *)(v0 + 1000) = 0x800000022F22E390;
  *(void *)(v0 + 1032) = v1;
  *(unsigned char *)(v0 + 1008) = 0;
  *(void *)(v0 + 1040) = 0x676445776F68536BLL;
  *(void *)(v0 + 1048) = 0xEA00000000007365;
  *(void *)(v0 + 1080) = v1;
  *(unsigned char *)(v0 + 1056) = 0;
  *(void *)(v0 + 1088) = 0x6E694C776F68536BLL;
  *(void *)(v0 + 1096) = 0xEA00000000007365;
  *(void *)(v0 + 1128) = v1;
  *(unsigned char *)(v0 + 1104) = 0;
  *(void *)(v0 + 1136) = 0xD000000000000012;
  *(void *)(v0 + 1144) = 0x800000022F22E3B0;
  *(void *)(v0 + 1176) = v1;
  *(unsigned char *)(v0 + 1152) = 0;
  *(void *)(v0 + 1184) = 0xD000000000000010;
  *(void *)(v0 + 1192) = 0x800000022F22E3D0;
  *(void *)(v0 + 1224) = v1;
  *(unsigned char *)(v0 + 1200) = 0;
  *(void *)(v0 + 1232) = 0xD000000000000017;
  *(void *)(v0 + 1240) = 0x800000022F22E3F0;
  *(void *)(v0 + 1272) = v1;
  *(unsigned char *)(v0 + 1248) = 0;
  *(void *)(v0 + 1280) = 0xD000000000000012;
  *(void *)(v0 + 1288) = 0x800000022F22E410;
  *(void *)(v0 + 1320) = v1;
  *(unsigned char *)(v0 + 1296) = 0;
  *(void *)(v0 + 1328) = 0xD000000000000011;
  *(void *)(v0 + 1336) = 0x800000022F22E280;
  if (qword_268694398 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_22F223788();
  __swift_project_value_buffer(v5, (uint64_t)static RecordReplayOption.defaultSessionFile);
  uint64_t v6 = sub_22F223778();
  uint64_t v7 = MEMORY[0x263F8D310];
  *(void *)(v0 + 1368) = MEMORY[0x263F8D310];
  *(void *)(v0 + 1344) = v6;
  *(void *)(v0 + 1352) = v8;
  *(void *)(v0 + 1376) = 0xD000000000000011;
  *(void *)(v0 + 1384) = 0x800000022F22E2A0;
  uint64_t v9 = sub_22F223778();
  *(void *)(v0 + 1416) = v7;
  *(void *)(v0 + 1392) = v9;
  *(void *)(v0 + 1400) = v10;
  strcpy((char *)(v0 + 1424), "kLPShowPlane");
  *(unsigned char *)(v0 + 1437) = 0;
  *(_WORD *)(v0 + 1438) = -5120;
  *(void *)(v0 + 1464) = v1;
  *(unsigned char *)(v0 + 1440) = 0;
  strcpy((char *)(v0 + 1472), "kLPShowPoints");
  *(_WORD *)(v0 + 1486) = -4864;
  *(void *)(v0 + 1512) = v1;
  *(unsigned char *)(v0 + 1488) = 0;
  *(void *)(v0 + 1520) = 0xD000000000000017;
  *(void *)(v0 + 1528) = 0x800000022F22D600;
  *(void *)(v0 + 1560) = v1;
  *(unsigned char *)(v0 + 1536) = 0;
  *(void *)(v0 + 1568) = 0xD000000000000014;
  *(void *)(v0 + 1576) = 0x800000022F22D5E0;
  *(void *)(v0 + 1608) = v1;
  *(unsigned char *)(v0 + 1584) = 0;
  *(void *)(v0 + 1616) = 0xD00000000000001ALL;
  *(void *)(v0 + 1624) = 0x800000022F22D620;
  *(void *)(v0 + 1656) = v1;
  *(unsigned char *)(v0 + 1632) = 0;
  *(void *)(v0 + 1664) = 0xD000000000000018;
  *(void *)(v0 + 1672) = 0x800000022F22D640;
  *(void *)(v0 + 1704) = v1;
  *(unsigned char *)(v0 + 1680) = 0;
  strcpy((char *)(v0 + 1712), "kPTShowPoints");
  *(_WORD *)(v0 + 1726) = -4864;
  *(void *)(v0 + 1752) = v1;
  *(unsigned char *)(v0 + 1728) = 0;
  strcpy((char *)(v0 + 1760), "kPTPaintMode");
  *(unsigned char *)(v0 + 1773) = 0;
  *(_WORD *)(v0 + 1774) = -5120;
  *(void *)(v0 + 1800) = v1;
  *(unsigned char *)(v0 + 1776) = 0;
  strcpy((char *)(v0 + 1808), "kPTDrawPatches");
  *(unsigned char *)(v0 + 1823) = -18;
  *(void *)(v0 + 1848) = v1;
  *(unsigned char *)(v0 + 1824) = 0;
  *(void *)(v0 + 1856) = 0xD000000000000010;
  *(void *)(v0 + 1864) = 0x800000022F22D5C0;
  *(void *)(v0 + 1896) = v1;
  *(unsigned char *)(v0 + 1872) = 0;
  strcpy((char *)(v0 + 1904), "kPEShowHitRay");
  *(_WORD *)(v0 + 1918) = -4864;
  *(void *)(v0 + 1944) = v1;
  *(unsigned char *)(v0 + 1920) = 0;
  *(void *)(v0 + 1952) = 0xD000000000000014;
  *(void *)(v0 + 1960) = 0x800000022F22D6C0;
  *(void *)(v0 + 1992) = v4;
  *(void *)(v0 + 1968) = 2;
  *(void *)(v0 + 2000) = 0xD00000000000001DLL;
  *(void *)(v0 + 2008) = 0x800000022F22E430;
  *(void *)(v0 + 2040) = v1;
  *(unsigned char *)(v0 + 2016) = 0;
  *(void *)(v0 + 2048) = 0xD000000000000018;
  *(void *)(v0 + 2056) = 0x800000022F22E470;
  *(void *)(v0 + 2088) = v4;
  *(void *)(v0 + 2064) = 3;
  strcpy((char *)(v0 + 2096), "kHapticEnabled");
  *(unsigned char *)(v0 + 2111) = -18;
  *(void *)(v0 + 2136) = v1;
  *(unsigned char *)(v0 + 2112) = 1;
  *(void *)(v0 + 2144) = 0xD000000000000018;
  *(void *)(v0 + 2152) = 0x800000022F22E490;
  *(void *)(v0 + 2184) = v1;
  *(unsigned char *)(v0 + 2160) = 0;
  *(void *)(v0 + 2192) = 0xD000000000000022;
  *(void *)(v0 + 2200) = 0x800000022F22E4B0;
  *(void *)(v0 + 2232) = v1;
  *(unsigned char *)(v0 + 2208) = 1;
  unint64_t result = sub_22F18590C(v0);
  qword_268694BD8 = result;
  return result;
}

void *Defaults.drawDebugPlanes.unsafeMutableAddressor()
{
  return &static Defaults.drawDebugPlanes;
}

void *Defaults.showStatistics.unsafeMutableAddressor()
{
  return &static Defaults.showStatistics;
}

void *Defaults.showFeaturePoints.unsafeMutableAddressor()
{
  return &static Defaults.showFeaturePoints;
}

void *Defaults.showWorldAnchorDebugInfo.unsafeMutableAddressor()
{
  return &static Defaults.showWorldAnchorDebugInfo;
}

void *Defaults.showRectangleDebugInfo.unsafeMutableAddressor()
{
  return &static Defaults.showRectangleDebugInfo;
}

void *Defaults.hideTapToRadar.unsafeMutableAddressor()
{
  return &static Defaults.hideTapToRadar;
}

void *Defaults.showLightIntensityDebugInfo.unsafeMutableAddressor()
{
  return &static Defaults.showLightIntensityDebugInfo;
}

void *Defaults.coachingCalloutEnabled.unsafeMutableAddressor()
{
  return &static Defaults.coachingCalloutEnabled;
}

void *Defaults.disableAllCoaching.unsafeMutableAddressor()
{
  return &static Defaults.disableAllCoaching;
}

void *Defaults.maxDeviceAcceleration.unsafeMutableAddressor()
{
  return &static Defaults.maxDeviceAcceleration;
}

void *Defaults.maxDeviceRotation.unsafeMutableAddressor()
{
  return &static Defaults.maxDeviceRotation;
}

void *Defaults.measurementBias.unsafeMutableAddressor()
{
  return &static Defaults.measurementBias;
}

void *Defaults.enableRectangleDetection.unsafeMutableAddressor()
{
  return &static Defaults.enableRectangleDetection;
}

void *Defaults.hideRectangleSuggestions.unsafeMutableAddressor()
{
  return &static Defaults.hideRectangleSuggestions;
}

const char *Defaults.recordARKit.unsafeMutableAddressor()
{
  return "kRecordARKit";
}

void *Defaults.snapReticleToEdges.unsafeMutableAddressor()
{
  return &static Defaults.snapReticleToEdges;
}

void *Defaults.edgeDetectionEnabled.unsafeMutableAddressor()
{
  return &static Defaults.edgeDetectionEnabled;
}

void *Defaults.edgeDetectionReticleSize.unsafeMutableAddressor()
{
  return &static Defaults.edgeDetectionReticleSize;
}

void *Defaults.edgeDetectionDebugReticleEnabled.unsafeMutableAddressor()
{
  return &static Defaults.edgeDetectionDebugReticleEnabled;
}

void *Defaults.edgeDetectionUniqueContours.unsafeMutableAddressor()
{
  return &static Defaults.edgeDetectionUniqueContours;
}

void *Defaults.showEdgeDebugView.unsafeMutableAddressor()
{
  return &static Defaults.showEdgeDebugView;
}

const char *Defaults.showEdges.unsafeMutableAddressor()
{
  return "kShowEdges";
}

const char *Defaults.showLines.unsafeMutableAddressor()
{
  return "kShowLines";
}

void *Defaults.showSmoothedLines.unsafeMutableAddressor()
{
  return &static Defaults.showSmoothedLines;
}

void *Defaults.showClosestEdge.unsafeMutableAddressor()
{
  return &static Defaults.showClosestEdge;
}

void *Defaults.showPreciseMeasurement.unsafeMutableAddressor()
{
  return &static Defaults.showPreciseMeasurement;
}

void *Defaults.showOppositeUnits.unsafeMutableAddressor()
{
  return &static Defaults.showOppositeUnits;
}

const char *Defaults.lpShowPlane.unsafeMutableAddressor()
{
  return "kLPShowPlane";
}

const char *Defaults.lpShowPoints.unsafeMutableAddressor()
{
  return "kLPShowPoints";
}

void *Defaults.mlShowUnprojectedTrail.unsafeMutableAddressor()
{
  return &static Defaults.mlShowUnprojectedTrail;
}

void *Defaults.mlShowSampledPoints.unsafeMutableAddressor()
{
  return &static Defaults.mlShowSampledPoints;
}

void *Defaults.mlShowSegmentedBackground.unsafeMutableAddressor()
{
  return &static Defaults.mlShowSegmentedBackground;
}

void *Defaults.mlShowNormalsBackground.unsafeMutableAddressor()
{
  return &static Defaults.mlShowNormalsBackground;
}

const char *Defaults.ptShowPoints.unsafeMutableAddressor()
{
  return "kPTShowPoints";
}

const char *Defaults.ptPaintMode.unsafeMutableAddressor()
{
  return "kPTPaintMode";
}

const char *Defaults.ptDrawPatches.unsafeMutableAddressor()
{
  return "kPTDrawPatches";
}

void *Defaults.peShowHitPoints.unsafeMutableAddressor()
{
  return &static Defaults.peShowHitPoints;
}

const char *Defaults.peShowHitRay.unsafeMutableAddressor()
{
  return "kPEShowHitRay";
}

void *Defaults.pePatchTrackingMode.unsafeMutableAddressor()
{
  return &static Defaults.pePatchTrackingMode;
}

void *Defaults.peShowPatchTrackingIndicator.unsafeMutableAddressor()
{
  return &static Defaults.peShowPatchTrackingIndicator;
}

void *Defaults.peFirstPointMaxDistance.unsafeMutableAddressor()
{
  return &static Defaults.peFirstPointMaxDistance;
}

const char *Defaults.hapticEnabled.unsafeMutableAddressor()
{
  return "kHapticEnabled";
}

void *Defaults.enableRectangleTracking.unsafeMutableAddressor()
{
  return &static Defaults.enableRectangleTracking;
}

void *Defaults.enableRectangleTrackingWorkaround.unsafeMutableAddressor()
{
  return &static Defaults.enableRectangleTrackingWorkaround;
}

void *sub_22F18C50C()
{
  if (qword_2686943A8 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_268694BD8;
  uint64_t v1 = qword_2686943A0;
  swift_bridgeObjectRetain();
  if (v1 != -1) {
    swift_once();
  }
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = sub_22F18C624(v2, v0);
  id v4 = objc_msgSend(self, sel_getDefaultValues);
  uint64_t v5 = sub_22F223968();

  unint64_t result = (void *)sub_22F18C624(v5, v3);
  off_268694BE0 = result;
  return result;
}

uint64_t sub_22F18C624(uint64_t a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = a2;
  sub_22F190BB4(a1, (uint64_t)sub_22F190B60, 0, isUniquelyReferenced_nonNull_native, &v8);
  uint64_t v6 = v8;
  swift_bridgeObjectRelease();
  if (v2) {
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t static DefaultsManager.registerDefaults()()
{
  id v41 = self;
  id v0 = objc_msgSend(v41, sel_standardUserDefaults);
  id v1 = objc_msgSend(v0, sel_dictionaryRepresentation);

  uint64_t v2 = sub_22F223968();
  if (qword_2686943B0 == -1) {
    goto LABEL_2;
  }
  while (1)
  {
    swift_once();
LABEL_2:
    uint64_t v42 = (char *)off_268694BE0 + 64;
    uint64_t v3 = 1 << *((unsigned char *)off_268694BE0 + 32);
    uint64_t v4 = -1;
    if (v3 < 64) {
      uint64_t v4 = ~(-1 << v3);
    }
    unint64_t v5 = v4 & *((void *)off_268694BE0 + 8);
    int64_t v43 = (unint64_t)(v3 + 63) >> 6;
    uint64_t v44 = off_268694BE0;
    swift_bridgeObjectRetain();
    int64_t v6 = 0;
    uint64_t v7 = (void *)MEMORY[0x263F8EE80];
    while (v5)
    {
      while (1)
      {
        unint64_t v8 = __clz(__rbit64(v5));
        v5 &= v5 - 1;
        unint64_t v9 = v8 | (v6 << 6);
LABEL_8:
        uint64_t v10 = v44[7];
        uint64_t v11 = (void *)(v44[6] + 16 * v9);
        uint64_t v12 = v11[1];
        *(void *)&long long v46 = *v11;
        *((void *)&v46 + 1) = v12;
        sub_22F195C78(v10 + 32 * v9, (uint64_t)v47);
        swift_bridgeObjectRetain();
LABEL_27:
        sub_22F1899D0((uint64_t)&v46, (uint64_t)&v48, &qword_268694C18);
        uint64_t v16 = v49;
        if (!v49)
        {
          swift_bridgeObjectRelease();
          swift_release();
          if (v7[2])
          {
            id v33 = objc_msgSend(v41, sel_standardUserDefaults);
            swift_bridgeObjectRetain();
            uint64_t v34 = (void *)sub_22F223958();
            swift_bridgeObjectRelease();
            objc_msgSend(v33, sel_setValuesForKeysWithDictionary_, v34);
          }
          id v35 = objc_msgSend(v41, sel_standardUserDefaults);
          uint64_t v36 = (void *)sub_22F223958();
          objc_msgSend(v35, sel_registerDefaults_, v36);

          uint64_t v48 = 0;
          unint64_t v49 = 0xE000000000000000;
          uint64_t v37 = swift_bridgeObjectRetain();
          sub_22F18CC94(v37);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *(void *)&long long v46 = 0;
          *((void *)&v46 + 1) = 0xE000000000000000;
          sub_22F2243F8();
          swift_bridgeObjectRelease();
          *(void *)&long long v46 = 0xD00000000000002BLL;
          *((void *)&v46 + 1) = 0x800000022F22E590;
          swift_bridgeObjectRetain();
          sub_22F223B48();
          swift_bridgeObjectRelease();
          long long v38 = v46;
          uint64_t v39 = sub_22F2240A8();
          _s17MeasureFoundation3LogV3log_4type9isPrivateySS_So03os_d1_E2_taSbtF_0(v38, *((uint64_t *)&v38 + 1), v39, 0, 0xD000000000000010, 0x800000022F22E570);
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
        uint64_t v17 = v48;
        sub_22F186BD8(&v50, &v46);
        if (!*(void *)(v2 + 16)) {
          break;
        }
        sub_22F18DE28(v17, v16);
        if ((v18 & 1) == 0) {
          break;
        }
        __swift_destroy_boxed_opaque_existential_0((uint64_t)&v46);
        swift_bridgeObjectRelease();
        if (!v5) {
          goto LABEL_9;
        }
      }
      sub_22F195C78((uint64_t)&v46, (uint64_t)v45);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v21 = sub_22F18DE28(v17, v16);
      uint64_t v22 = v7[2];
      BOOL v23 = (v20 & 1) == 0;
      uint64_t v24 = v22 + v23;
      if (__OFADD__(v22, v23))
      {
        __break(1u);
        goto LABEL_47;
      }
      char v25 = v20;
      if (v7[3] >= v24)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          if ((v20 & 1) == 0) {
            goto LABEL_34;
          }
        }
        else
        {
          sub_22F1937E0();
          if ((v25 & 1) == 0) {
            goto LABEL_34;
          }
        }
      }
      else
      {
        sub_22F191128(v24, isUniquelyReferenced_nonNull_native);
        unint64_t v26 = sub_22F18DE28(v17, v16);
        if ((v25 & 1) != (v27 & 1)) {
          goto LABEL_51;
        }
        unint64_t v21 = v26;
        if ((v25 & 1) == 0)
        {
LABEL_34:
          v7[(v21 >> 6) + 8] |= 1 << v21;
          id v28 = (uint64_t *)(v7[6] + 16 * v21);
          *id v28 = v17;
          v28[1] = v16;
          sub_22F186BD8(v45, (_OWORD *)(v7[7] + 32 * v21));
          uint64_t v29 = v7[2];
          BOOL v30 = __OFADD__(v29, 1);
          uint64_t v31 = v29 + 1;
          if (v30) {
            goto LABEL_48;
          }
          v7[2] = v31;
          swift_bridgeObjectRetain();
          goto LABEL_39;
        }
      }
      uint64_t v32 = (_OWORD *)(v7[7] + 32 * v21);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v32);
      sub_22F186BD8(v45, v32);
LABEL_39:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v46);
    }
LABEL_9:
    int64_t v13 = v6 + 1;
    if (!__OFADD__(v6, 1)) {
      break;
    }
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
  }
  if (v13 >= v43) {
    goto LABEL_26;
  }
  unint64_t v14 = *(void *)&v42[8 * v13];
  if (v14)
  {
LABEL_12:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v9 = __clz(__rbit64(v14)) + (v13 << 6);
    int64_t v6 = v13;
    goto LABEL_8;
  }
  int64_t v15 = v6 + 2;
  ++v6;
  if (v13 + 1 >= v43) {
    goto LABEL_26;
  }
  unint64_t v14 = *(void *)&v42[8 * v15];
  if (v14)
  {
LABEL_15:
    int64_t v13 = v15;
    goto LABEL_12;
  }
  int64_t v6 = v13 + 1;
  if (v13 + 2 >= v43) {
    goto LABEL_26;
  }
  unint64_t v14 = *(void *)&v42[8 * v13 + 16];
  if (v14)
  {
    v13 += 2;
    goto LABEL_12;
  }
  int64_t v15 = v13 + 3;
  int64_t v6 = v13 + 2;
  if (v13 + 3 >= v43)
  {
LABEL_26:
    unint64_t v5 = 0;
    memset(v47, 0, sizeof(v47));
    long long v46 = 0u;
    goto LABEL_27;
  }
  unint64_t v14 = *(void *)&v42[8 * v15];
  if (v14) {
    goto LABEL_15;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v13 >= v43)
    {
      int64_t v6 = v43 - 1;
      goto LABEL_26;
    }
    unint64_t v14 = *(void *)&v42[8 * v13];
    ++v15;
    if (v14) {
      goto LABEL_12;
    }
  }
  __break(1u);
LABEL_51:
  uint64_t result = sub_22F2247B8();
  __break(1u);
  return result;
}

uint64_t sub_22F18CC94(uint64_t a1)
{
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v19 = (unint64_t)(v2 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v6 = 0;
  while (1)
  {
    if (v4)
    {
      unint64_t v7 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      unint64_t v8 = v7 | (v6 << 6);
      goto LABEL_5;
    }
    int64_t v12 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v12 >= v19) {
      return swift_release();
    }
    unint64_t v13 = *(void *)(v15 + 8 * v12);
    ++v6;
    if (!v13)
    {
      int64_t v6 = v12 + 1;
      if (v12 + 1 >= v19) {
        return swift_release();
      }
      unint64_t v13 = *(void *)(v15 + 8 * v6);
      if (!v13)
      {
        int64_t v6 = v12 + 2;
        if (v12 + 2 >= v19) {
          return swift_release();
        }
        unint64_t v13 = *(void *)(v15 + 8 * v6);
        if (!v13)
        {
          int64_t v6 = v12 + 3;
          if (v12 + 3 >= v19) {
            return swift_release();
          }
          unint64_t v13 = *(void *)(v15 + 8 * v6);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v4 = (v13 - 1) & v13;
    unint64_t v8 = __clz(__rbit64(v13)) + (v6 << 6);
LABEL_5:
    unint64_t v9 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v8);
    uint64_t v11 = *v9;
    uint64_t v10 = v9[1];
    sub_22F195C78(*(void *)(a1 + 56) + 32 * v8, (uint64_t)v18);
    *(void *)&long long v17 = v11;
    *((void *)&v17 + 1) = v10;
    v16[0] = v17;
    v16[1] = v18[0];
    id v16[2] = v18[1];
    swift_bridgeObjectRetain();
    sub_22F223B48();
    sub_22F223B48();
    sub_22F223B48();
    sub_22F224508();
    sub_22F223B48();
    sub_22F223B48();
    swift_bridgeObjectRelease();
    uint64_t result = sub_22F196338((uint64_t)v16, &qword_268694CC8);
  }
  int64_t v14 = v12 + 4;
  if (v14 >= v19) {
    return swift_release();
  }
  unint64_t v13 = *(void *)(v15 + 8 * v14);
  if (v13)
  {
    int64_t v6 = v14;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v6 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v6 >= v19) {
      return swift_release();
    }
    unint64_t v13 = *(void *)(v15 + 8 * v6);
    ++v14;
    if (v13) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void static DefaultsManager.reset()()
{
  id v0 = objc_msgSend(self, sel_standardUserDefaults);
  if (qword_2686943B0 != -1) {
    swift_once();
  }
  id v1 = (id)sub_22F223958();
  objc_msgSend(v0, sel_setValuesForKeysWithDictionary_, v1);
}

void static DefaultsManager.resetForKeys(_:)(uint64_t a1)
{
  uint64_t v2 = (void *)sub_22F18590C(MEMORY[0x263F8EE78]);
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_39:
    id v35 = objc_msgSend(self, sel_standardUserDefaults);
    uint64_t v36 = (void *)sub_22F223958();
    swift_bridgeObjectRelease();
    objc_msgSend(v35, sel_setValuesForKeysWithDictionary_, v36);

    return;
  }
  swift_bridgeObjectRetain();
  unint64_t v4 = (uint64_t *)(a1 + 40);
  unint64_t v5 = 0x268694000uLL;
  unint64_t v6 = 0x268694000;
  while (1)
  {
    uint64_t v9 = *(v4 - 1);
    uint64_t v8 = *v4;
    uint64_t v10 = *(void *)(v5 + 944);
    swift_bridgeObjectRetain();
    if (v10 != -1) {
      swift_once();
    }
    uint64_t v11 = *(void *)(v6 + 3040);
    if (*(void *)(v11 + 16)) {
      break;
    }
    long long v38 = 0u;
    long long v39 = 0u;
LABEL_4:
    swift_bridgeObjectRelease();
    unint64_t v7 = &v38;
LABEL_5:
    sub_22F196338((uint64_t)v7, &qword_268694C20);
LABEL_6:
    v4 += 2;
    if (!--v3)
    {
      swift_bridgeObjectRelease();
      goto LABEL_39;
    }
  }
  swift_bridgeObjectRetain();
  unint64_t v12 = sub_22F18DE28(v9, v8);
  if (v13)
  {
    sub_22F195C78(*(void *)(v11 + 56) + 32 * v12, (uint64_t)&v38);
  }
  else
  {
    long long v38 = 0u;
    long long v39 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v39 + 1)) {
    goto LABEL_4;
  }
  sub_22F196338((uint64_t)&v38, &qword_268694C20);
  uint64_t v14 = *(void *)(v6 + 3040);
  if (!*(void *)(v14 + 16))
  {
    long long v38 = 0u;
    long long v39 = 0u;
    goto LABEL_25;
  }
  swift_bridgeObjectRetain();
  unint64_t v15 = sub_22F18DE28(v9, v8);
  if (v16)
  {
    sub_22F195C78(*(void *)(v14 + 56) + 32 * v15, (uint64_t)&v38);
  }
  else
  {
    long long v38 = 0u;
    long long v39 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v39 + 1))
  {
LABEL_25:
    sub_22F196338((uint64_t)&v38, &qword_268694C20);
    swift_bridgeObjectRetain();
    unint64_t v27 = sub_22F18DE28(v9, v8);
    char v29 = v28;
    swift_bridgeObjectRelease();
    if (v29)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_22F1937E0();
      }
      swift_bridgeObjectRelease();
      sub_22F186BD8((_OWORD *)(v2[7] + 32 * v27), v37);
      sub_22F194E38(v27, (uint64_t)v2);
      swift_bridgeObjectRelease();
    }
    else
    {
      memset(v37, 0, sizeof(v37));
    }
    swift_bridgeObjectRelease();
    unint64_t v7 = v37;
    goto LABEL_5;
  }
  unint64_t v17 = v5;
  sub_22F186BD8(&v38, v37);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v20 = sub_22F18DE28(v9, v8);
  uint64_t v21 = v2[2];
  BOOL v22 = (v19 & 1) == 0;
  uint64_t v23 = v21 + v22;
  if (!__OFADD__(v21, v22))
  {
    char v24 = v19;
    if (v2[3] >= v23)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if ((v19 & 1) == 0) {
          goto LABEL_35;
        }
      }
      else
      {
        sub_22F1937E0();
        if ((v24 & 1) == 0) {
          goto LABEL_35;
        }
      }
    }
    else
    {
      sub_22F191128(v23, isUniquelyReferenced_nonNull_native);
      unint64_t v25 = sub_22F18DE28(v9, v8);
      if ((v24 & 1) != (v26 & 1)) {
        goto LABEL_42;
      }
      unint64_t v20 = v25;
      if ((v24 & 1) == 0)
      {
LABEL_35:
        v2[(v20 >> 6) + 8] |= 1 << v20;
        uint64_t v31 = (uint64_t *)(v2[6] + 16 * v20);
        *uint64_t v31 = v9;
        v31[1] = v8;
        sub_22F186BD8(v37, (_OWORD *)(v2[7] + 32 * v20));
        uint64_t v32 = v2[2];
        BOOL v33 = __OFADD__(v32, 1);
        uint64_t v34 = v32 + 1;
        if (v33) {
          goto LABEL_41;
        }
        CVPixelBufferRef v2[2] = v34;
        swift_bridgeObjectRetain();
        goto LABEL_37;
      }
    }
    BOOL v30 = (_OWORD *)(v2[7] + 32 * v20);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v30);
    sub_22F186BD8(v37, v30);
LABEL_37:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v5 = v17;
    unint64_t v6 = 0x268694000uLL;
    goto LABEL_6;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  sub_22F2247B8();
  __break(1u);
}

void *Defaults.resetDefaultSettingsOnStart.unsafeMutableAddressor()
{
  return &static Defaults.resetDefaultSettingsOnStart;
}

unint64_t static Defaults.resetDefaultSettingsOnStart.getter()
{
  return 0xD000000000000014;
}

const char *Defaults.dateLastUse.unsafeMutableAddressor()
{
  return "kDateLastUse";
}

uint64_t static Defaults.dateLastUse.getter()
{
  return 0x73614C657461446BLL;
}

unint64_t static Defaults.drawDebugPlanes.getter()
{
  return 0xD000000000000010;
}

uint64_t static Defaults.showStatistics.getter()
{
  return 0x617453776F68536BLL;
}

unint64_t static Defaults.showFeaturePoints.getter()
{
  return 0xD000000000000012;
}

uint64_t static Defaults.hideTapToRadar.getter()
{
  return 0x706154656469486BLL;
}

void *Defaults.exportSceneFilePath.unsafeMutableAddressor()
{
  return &static Defaults.exportSceneFilePath;
}

unint64_t static Defaults.exportSceneFilePath.getter()
{
  return 0xD000000000000014;
}

unint64_t static Defaults.showWorldAnchorDebugInfo.getter()
{
  return 0xD000000000000019;
}

unint64_t static Defaults.showRectangleDebugInfo.getter()
{
  return 0xD000000000000017;
}

unint64_t static Defaults.enableRectangleDetection.getter()
{
  return 0xD000000000000019;
}

unint64_t static Defaults.hideRectangleSuggestions.getter()
{
  return 0xD000000000000019;
}

unint64_t static Defaults.showLightIntensityDebugInfo.getter()
{
  return 0xD00000000000001CLL;
}

unint64_t static Defaults.disableAllCoaching.getter()
{
  return 0xD000000000000020;
}

unint64_t static Defaults.coachingCalloutEnabled.getter()
{
  return 0xD000000000000019;
}

unint64_t static Defaults.maxDeviceAcceleration.getter()
{
  return 0xD000000000000016;
}

unint64_t static Defaults.maxDeviceRotation.getter()
{
  return 0xD000000000000012;
}

unint64_t static Defaults.measurementBias.getter()
{
  return 0xD000000000000010;
}

uint64_t static Defaults.recordARKit.getter()
{
  return 0x4164726F6365526BLL;
}

unint64_t static Defaults.recordCustomFile.getter()
{
  return 0xD000000000000011;
}

unint64_t static Defaults.replayCustomFile.getter()
{
  return 0xD000000000000011;
}

unint64_t static Defaults.snapReticleToEdges.getter()
{
  return 0xD000000000000013;
}

unint64_t static Defaults.edgeDetectionEnabled.getter()
{
  return 0xD000000000000015;
}

unint64_t static Defaults.edgeDetectionReticleSize.getter()
{
  return 0xD000000000000019;
}

unint64_t static Defaults.edgeDetectionDebugReticleEnabled.getter()
{
  return 0xD000000000000021;
}

unint64_t static Defaults.edgeDetectionUniqueContours.getter()
{
  return 0xD00000000000001CLL;
}

unint64_t static Defaults.adEdgeDetectionEnabled.getter()
{
  return 0xD000000000000017;
}

unint64_t static Defaults.showEdgeDebugView.getter()
{
  return 0xD000000000000012;
}

uint64_t static Defaults.showEdges.getter()
{
  return 0x676445776F68536BLL;
}

uint64_t static Defaults.showLines.getter()
{
  return 0x6E694C776F68536BLL;
}

unint64_t static Defaults.showSmoothedLines.getter()
{
  return 0xD000000000000012;
}

unint64_t static Defaults.showClosestEdge.getter()
{
  return 0xD000000000000010;
}

unint64_t static Defaults.showPreciseMeasurement.getter()
{
  return 0xD000000000000017;
}

unint64_t static Defaults.showOppositeUnits.getter()
{
  return 0xD000000000000012;
}

uint64_t static Defaults.lpShowPlane.getter()
{
  return 0x50776F6853504C6BLL;
}

uint64_t static Defaults.lpShowPoints.getter()
{
  return 0x50776F6853504C6BLL;
}

unint64_t static Defaults.mlShowUnprojectedTrail.getter()
{
  return 0xD000000000000017;
}

unint64_t static Defaults.mlShowSampledPoints.getter()
{
  return 0xD000000000000014;
}

unint64_t static Defaults.mlShowSegmentedBackground.getter()
{
  return 0xD00000000000001ALL;
}

unint64_t static Defaults.mlShowNormalsBackground.getter()
{
  return 0xD000000000000018;
}

uint64_t static Defaults.ptShowPoints.getter()
{
  return 0x50776F685354506BLL;
}

uint64_t static Defaults.ptPaintMode.getter()
{
  return 0x746E69615054506BLL;
}

uint64_t static Defaults.ptDrawPatches.getter()
{
  return 0x507761724454506BLL;
}

unint64_t static Defaults.peShowHitPoints.getter()
{
  return 0xD000000000000010;
}

uint64_t static Defaults.peShowHitRay.getter()
{
  return 0x48776F685345506BLL;
}

unint64_t static Defaults.pePatchTrackingMode.getter()
{
  return 0xD000000000000014;
}

unint64_t static Defaults.peShowPatchTrackingIndicator.getter()
{
  return 0xD00000000000001DLL;
}

uint64_t static Defaults.peADTestMode.getter()
{
  return 0x736554444145506BLL;
}

unint64_t static Defaults.peShowADIndicator.getter()
{
  return 0xD000000000000012;
}

unint64_t static Defaults.peFirstPointMaxDistance.getter()
{
  return 0xD000000000000018;
}

uint64_t static Defaults.hapticEnabled.getter()
{
  return 0x456369747061486BLL;
}

unint64_t static Defaults.enableRectangleTracking.getter()
{
  return 0xD000000000000018;
}

unint64_t static Defaults.enableRectangleTrackingWorkaround.getter()
{
  return 0xD000000000000022;
}

uint64_t static Defaults.adDemoEnabled.getter()
{
  return 0x456F6D654444416BLL;
}

unint64_t static Defaults.adDirectAPIEnabled.getter()
{
  return 0xD000000000000013;
}

uint64_t static Defaults.adVGAEnabled.getter()
{
  return 0x6E4541475644416BLL;
}

unint64_t static Defaults.adShowJasperPoints.getter()
{
  return 0xD000000000000013;
}

unint64_t static Defaults.adShowWorldPoints.getter()
{
  return 0xD000000000000012;
}

uint64_t static Defaults.adShowDepth.getter()
{
  return 0x44776F685344416BLL;
}

unint64_t static Defaults.adShowConfidence.getter()
{
  return 0xD000000000000011;
}

uint64_t static Defaults.adShowNormal.getter()
{
  return 0x4E776F685344416BLL;
}

const char *Defaults.adShowPerson.unsafeMutableAddressor()
{
  return "kADShowPerson";
}

uint64_t static Defaults.adShowPerson.getter()
{
  return 0x50776F685344416BLL;
}

const char *Defaults.adShowSpatial.unsafeMutableAddressor()
{
  return "kADShowSpatial";
}

uint64_t static Defaults.adShowSpatial.getter()
{
  return 0x53776F685344416BLL;
}

uint64_t static Defaults.adShowWindow.getter()
{
  return 0x57776F685344416BLL;
}

uint64_t static Defaults.adBlackMode.getter()
{
  return 0x6B63616C4244416BLL;
}

const char *Defaults.adPCDFilePath.unsafeMutableAddressor()
{
  return "kADPCDFilePath";
}

uint64_t static Defaults.adPCDFilePath.getter()
{
  return 0x694644435044416BLL;
}

unint64_t static Defaults.adGuidedFilterEnabled.getter()
{
  return 0xD000000000000016;
}

unint64_t static Defaults.personHeightDebugViewEnabled.getter()
{
  return 0xD00000000000001DLL;
}

unint64_t static Defaults.divisionsEnabled.getter()
{
  return 0xD000000000000011;
}

unint64_t static Defaults.semanticMeasurementsEnabled.getter()
{
  return 0xD00000000000001BLL;
}

unint64_t static Defaults.semanticMeasurementsDebuggerEnabled.getter()
{
  return 0xD000000000000023;
}

uint64_t sub_22F18DC74(void **a1)
{
  uint64_t v2 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_268694C00) - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = (void *)sub_22F195838(v3);
  }
  uint64_t v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  uint64_t result = sub_22F18E90C(v6);
  *a1 = v3;
  return result;
}

unint64_t sub_22F18DD24(uint64_t a1)
{
  sub_22F223848();
  sub_22F196284((unint64_t *)&qword_268694C50, MEMORY[0x263F07508]);
  uint64_t v2 = sub_22F2239E8();
  return sub_22F18E0B4(a1, v2);
}

unint64_t sub_22F18DDBC(unsigned __int8 a1)
{
  sub_22F2247E8();
  sub_22F224808();
  uint64_t v2 = sub_22F224818();
  return sub_22F18E274(a1, v2);
}

unint64_t sub_22F18DE28(uint64_t a1, uint64_t a2)
{
  sub_22F2247E8();
  sub_22F223B28();
  uint64_t v4 = sub_22F224818();
  return sub_22F18E314(a1, a2, v4);
}

unint64_t sub_22F18DEA0(uint64_t a1)
{
  sub_22F2247E8();
  type metadata accessor for CFString(0);
  sub_22F196284(&qword_268694C70, type metadata accessor for CFString);
  sub_22F223878();
  uint64_t v2 = sub_22F224818();
  return sub_22F18E3F8(a1, v2);
}

unint64_t sub_22F18DF54(double a1)
{
  uint64_t v2 = sub_22F2247D8();
  return sub_22F18E554(v2, a1);
}

unint64_t sub_22F18DF9C(uint64_t a1)
{
  uint64_t v2 = sub_22F2247D8();
  return sub_22F18E5EC(a1, v2);
}

unint64_t sub_22F18DFE0(uint64_t a1)
{
  uint64_t v2 = sub_22F2241B8();
  return sub_22F18E688(a1, v2);
}

unint64_t sub_22F18E024(uint64_t a1)
{
  sub_22F223AC8();
  sub_22F2247E8();
  sub_22F223B28();
  uint64_t v2 = sub_22F224818();
  swift_bridgeObjectRelease();
  return sub_22F18E794(a1, v2);
}

unint64_t sub_22F18E0B4(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = a1;
  uint64_t v4 = sub_22F223848();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  uint64_t v18 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    char v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v12 = v5 + 16;
    uint64_t v11 = v13;
    uint64_t v14 = *(void *)(v12 + 56);
    do
    {
      v11(v7, *(void *)(v20 + 48) + v14 * v9, v4);
      sub_22F196284(&qword_268694C78, MEMORY[0x263F07508]);
      char v15 = sub_22F223A68();
      (*(void (**)(char *, uint64_t))(v12 - 8))(v7, v4);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
    }
    while (((*(void *)(v18 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

unint64_t sub_22F18E274(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_22F18E314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_22F224738() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        char v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_22F224738() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_22F18E3F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    type metadata accessor for CFString(0);
    unint64_t v6 = *(void **)(*(void *)(v2 + 48) + 8 * i);
    sub_22F196284(&qword_268694C70, type metadata accessor for CFString);
    id v7 = v6;
    char v8 = sub_22F223868();

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v4;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v11 = sub_22F223868();

        if (v11) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_22F18E554(uint64_t a1, double a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a1 & ~v4;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v6 = *(void *)(v2 + 48);
    if (*(double *)(v6 + 8 * result) != a2)
    {
      uint64_t v7 = ~v4;
      for (unint64_t result = (result + 1) & v7;
            ((*(void *)(v3 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v7)
      {
        if (*(double *)(v6 + 8 * result) == a2) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_22F18E5EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_22F18E688(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    sub_22F195F50();
    id v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = sub_22F2241C8();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        id v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v10 = sub_22F2241C8();

        if (v10) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_22F18E794(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = sub_22F223AC8();
    uint64_t v8 = v7;
    if (v6 == sub_22F223AC8() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = sub_22F224738();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = sub_22F223AC8();
          uint64_t v15 = v14;
          if (v13 == sub_22F223AC8() && v15 == v16) {
            break;
          }
          char v18 = sub_22F224738();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

uint64_t sub_22F18E90C(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v128 = __swift_instantiateConcreteTypeFromMangledName(&qword_268694C00);
  uint64_t v4 = *(void *)(v128 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v128);
  uint64_t v119 = (uint64_t)&v115 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v129 = (uint64_t)&v115 - v8;
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v126 = (uint64_t)&v115 - v10;
  MEMORY[0x270FA5388](v9);
  uint64_t v125 = (uint64_t)&v115 - v11;
  uint64_t v12 = a1[1];
  uint64_t result = sub_22F2246C8();
  if (result >= v12)
  {
    if (v12 < 0) {
      goto LABEL_142;
    }
    if (v12) {
      return sub_22F18F318(0, v12, 1, a1);
    }
    return result;
  }
  if (v12 >= 0) {
    uint64_t v14 = v12;
  }
  else {
    uint64_t v14 = v12 + 1;
  }
  if (v12 < -1) {
    goto LABEL_141;
  }
  uint64_t v123 = v4;
  v127 = a1;
  uint64_t v116 = result;
  if (v12 > 1)
  {
    uint64_t v15 = v14 >> 1;
    uint64_t result = sub_22F223D48();
    *(void *)(result + 16) = v15;
    uint64_t v16 = *(unsigned __int8 *)(v4 + 80);
    uint64_t v115 = result;
    unint64_t v122 = result + ((v16 + 32) & ~v16);
LABEL_12:
    uint64_t v18 = 0;
    uint64_t v17 = MEMORY[0x263F8EE78];
    while (1)
    {
      uint64_t v20 = v18;
      uint64_t v21 = v18 + 1;
      uint64_t v121 = v18;
      if (v18 + 1 >= v12)
      {
        uint64_t v27 = v18 + 1;
        goto LABEL_38;
      }
      uint64_t v117 = v2;
      uint64_t v22 = *v127;
      uint64_t v23 = *(void *)(v123 + 72);
      uint64_t v24 = v125;
      sub_22F186CEC(*v127 + v23 * v21, v125, &qword_268694C00);
      uint64_t v124 = v12;
      uint64_t v25 = v126;
      sub_22F186CEC(v22 + v23 * v20, v126, &qword_268694C00);
      LODWORD(v120) = sub_22F2237B8();
      uint64_t v26 = v25;
      uint64_t v12 = v124;
      sub_22F196338(v26, &qword_268694C00);
      uint64_t result = sub_22F196338(v24, &qword_268694C00);
      uint64_t v27 = v20 + 2;
      uint64_t v118 = v22;
      uint64_t v130 = v23;
      if (v20 + 2 >= v12)
      {
        uint64_t v2 = v117;
        if ((v120 & 1) == 0) {
          goto LABEL_38;
        }
      }
      else
      {
        uint64_t v28 = v23 * v21;
        uint64_t v29 = v22;
        uint64_t v30 = v23 * v27;
        do
        {
          uint64_t v31 = v27;
          uint64_t v32 = v125;
          sub_22F186CEC(v29 + v30, v125, &qword_268694C00);
          uint64_t v33 = v126;
          sub_22F186CEC(v29 + v28, v126, &qword_268694C00);
          int v34 = sub_22F2237B8();
          sub_22F196338(v33, &qword_268694C00);
          uint64_t result = sub_22F196338(v32, &qword_268694C00);
          if ((v120 ^ v34))
          {
            uint64_t v27 = v31;
            uint64_t v2 = v117;
            uint64_t v20 = v121;
            uint64_t v12 = v124;
            if ((v120 & 1) == 0) {
              goto LABEL_38;
            }
            goto LABEL_26;
          }
          uint64_t v27 = v31 + 1;
          v29 += v130;
        }
        while (v124 != v31 + 1);
        uint64_t v12 = v124;
        uint64_t v27 = v124;
        uint64_t v2 = v117;
        uint64_t v20 = v121;
        if ((v120 & 1) == 0) {
          goto LABEL_38;
        }
      }
LABEL_26:
      uint64_t v35 = v130;
      if (v27 < v20) {
        goto LABEL_143;
      }
      if (v20 >= v27)
      {
LABEL_38:
        uint64_t v42 = v127;
        if (v27 >= v12) {
          goto LABEL_58;
        }
      }
      else
      {
        uint64_t v117 = v2;
        uint64_t v36 = 0;
        uint64_t v37 = v130 * (v27 - 1);
        uint64_t v38 = v27 * v130;
        uint64_t v39 = v27;
        uint64_t v40 = v20;
        uint64_t v41 = v20 * v130;
        uint64_t v42 = v127;
        uint64_t v131 = v39;
        do
        {
          if (v40 != v39 + v36 - 1)
          {
            uint64_t v43 = v118;
            if (!v118) {
              goto LABEL_148;
            }
            unint64_t v44 = v118 + v41;
            uint64_t v45 = v118 + v37;
            sub_22F1899D0(v118 + v41, v119, &qword_268694C00);
            if (v41 < v37 || v44 >= v43 + v38)
            {
              swift_arrayInitWithTakeFrontToBack();
              uint64_t v35 = v130;
            }
            else
            {
              uint64_t v35 = v130;
              if (v41 != v37) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            uint64_t result = sub_22F1899D0(v119, v45, &qword_268694C00);
            uint64_t v42 = v127;
          }
          ++v40;
          --v36;
          uint64_t v39 = v131;
          v37 -= v35;
          v38 -= v35;
          v41 += v35;
        }
        while (v40 < v131 + v36);
        uint64_t v2 = v117;
        uint64_t v27 = v131;
        uint64_t v20 = v121;
        uint64_t v12 = v124;
        if (v131 >= v124) {
          goto LABEL_58;
        }
      }
      if (__OFSUB__(v27, v20)) {
        goto LABEL_140;
      }
      if (v27 - v20 < v116)
      {
        if (__OFADD__(v20, v116)) {
          goto LABEL_144;
        }
        if (v20 + v116 >= v12) {
          uint64_t v46 = v12;
        }
        else {
          uint64_t v46 = v20 + v116;
        }
        if (v46 < v20)
        {
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
          return result;
        }
        if (v27 != v46)
        {
          uint64_t v117 = v2;
          uint64_t v118 = v17;
          uint64_t v47 = *(void *)(v123 + 72);
          uint64_t v131 = v47 * (v27 - 1);
          uint64_t v124 = v47;
          uint64_t v130 = v27 * v47;
          uint64_t v120 = v46;
          do
          {
            uint64_t v48 = 0;
            uint64_t v49 = v20;
            while (1)
            {
              uint64_t v50 = v27;
              uint64_t v51 = *v42;
              uint64_t v52 = v125;
              sub_22F186CEC(v130 + v48 + *v42, v125, &qword_268694C00);
              uint64_t v53 = v126;
              sub_22F186CEC(v131 + v48 + v51, v126, &qword_268694C00);
              LOBYTE(v51) = sub_22F2237B8();
              sub_22F196338(v53, &qword_268694C00);
              uint64_t result = sub_22F196338(v52, &qword_268694C00);
              if ((v51 & 1) == 0) {
                break;
              }
              uint64_t v54 = *v42;
              if (!*v42) {
                goto LABEL_146;
              }
              uint64_t v55 = v54 + v131 + v48;
              sub_22F1899D0(v54 + v130 + v48, v129, &qword_268694C00);
              uint64_t v27 = v50;
              swift_arrayInitWithTakeFrontToBack();
              uint64_t result = sub_22F1899D0(v129, v55, &qword_268694C00);
              v48 -= v124;
              ++v49;
              uint64_t v42 = v127;
              if (v50 == v49) {
                goto LABEL_49;
              }
            }
            uint64_t v27 = v50;
LABEL_49:
            ++v27;
            v131 += v124;
            v130 += v124;
            uint64_t v20 = v121;
          }
          while (v27 != v120);
          uint64_t v27 = v120;
          uint64_t v2 = v117;
          uint64_t v17 = v118;
        }
      }
LABEL_58:
      if (v27 < v20) {
        goto LABEL_135;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_22F18FA30(0, *(void *)(v17 + 16) + 1, 1, (char *)v17);
        uint64_t v17 = result;
      }
      unint64_t v57 = *(void *)(v17 + 16);
      unint64_t v56 = *(void *)(v17 + 24);
      unint64_t v19 = v57 + 1;
      uint64_t v131 = v27;
      if (v57 >= v56 >> 1)
      {
        uint64_t result = (uint64_t)sub_22F18FA30((char *)(v56 > 1), v57 + 1, 1, (char *)v17);
        uint64_t v17 = result;
      }
      uint64_t v58 = v2;
      *(void *)(v17 + 16) = v19;
      uint64_t v59 = v17 + 32;
      id v60 = (uint64_t *)(v17 + 32 + 16 * v57);
      uint64_t v61 = v131;
      uint64_t *v60 = v20;
      v60[1] = v61;
      if (v57)
      {
        while (1)
        {
          unint64_t v62 = v19 - 1;
          if (v19 >= 4)
          {
            unint64_t v67 = v59 + 16 * v19;
            uint64_t v68 = *(void *)(v67 - 64);
            uint64_t v69 = *(void *)(v67 - 56);
            BOOL v73 = __OFSUB__(v69, v68);
            uint64_t v70 = v69 - v68;
            if (v73) {
              goto LABEL_124;
            }
            uint64_t v72 = *(void *)(v67 - 48);
            uint64_t v71 = *(void *)(v67 - 40);
            BOOL v73 = __OFSUB__(v71, v72);
            uint64_t v65 = v71 - v72;
            char v66 = v73;
            if (v73) {
              goto LABEL_125;
            }
            unint64_t v74 = v19 - 2;
            uint64_t v75 = (uint64_t *)(v59 + 16 * (v19 - 2));
            uint64_t v77 = *v75;
            uint64_t v76 = v75[1];
            BOOL v73 = __OFSUB__(v76, v77);
            uint64_t v78 = v76 - v77;
            if (v73) {
              goto LABEL_126;
            }
            BOOL v73 = __OFADD__(v65, v78);
            uint64_t v79 = v65 + v78;
            if (v73) {
              goto LABEL_128;
            }
            if (v79 >= v70)
            {
              uint64_t v97 = (uint64_t *)(v59 + 16 * v62);
              uint64_t v99 = *v97;
              uint64_t v98 = v97[1];
              BOOL v73 = __OFSUB__(v98, v99);
              uint64_t v100 = v98 - v99;
              if (v73) {
                goto LABEL_134;
              }
              BOOL v90 = v65 < v100;
              goto LABEL_95;
            }
          }
          else
          {
            if (v19 != 3)
            {
              uint64_t v91 = *(void *)(v17 + 32);
              uint64_t v92 = *(void *)(v17 + 40);
              BOOL v73 = __OFSUB__(v92, v91);
              uint64_t v84 = v92 - v91;
              char v85 = v73;
              goto LABEL_89;
            }
            uint64_t v64 = *(void *)(v17 + 32);
            uint64_t v63 = *(void *)(v17 + 40);
            BOOL v73 = __OFSUB__(v63, v64);
            uint64_t v65 = v63 - v64;
            char v66 = v73;
          }
          if (v66) {
            goto LABEL_127;
          }
          unint64_t v74 = v19 - 2;
          uint64_t v80 = (uint64_t *)(v59 + 16 * (v19 - 2));
          uint64_t v82 = *v80;
          uint64_t v81 = v80[1];
          BOOL v83 = __OFSUB__(v81, v82);
          uint64_t v84 = v81 - v82;
          char v85 = v83;
          if (v83) {
            goto LABEL_129;
          }
          v86 = (uint64_t *)(v59 + 16 * v62);
          uint64_t v88 = *v86;
          uint64_t v87 = v86[1];
          BOOL v73 = __OFSUB__(v87, v88);
          uint64_t v89 = v87 - v88;
          if (v73) {
            goto LABEL_131;
          }
          if (__OFADD__(v84, v89)) {
            goto LABEL_133;
          }
          if (v84 + v89 >= v65)
          {
            BOOL v90 = v65 < v89;
LABEL_95:
            if (v90) {
              unint64_t v62 = v74;
            }
            goto LABEL_97;
          }
LABEL_89:
          if (v85) {
            goto LABEL_130;
          }
          uint64_t v93 = (uint64_t *)(v59 + 16 * v62);
          uint64_t v95 = *v93;
          uint64_t v94 = v93[1];
          BOOL v73 = __OFSUB__(v94, v95);
          uint64_t v96 = v94 - v95;
          if (v73) {
            goto LABEL_132;
          }
          if (v96 < v84) {
            goto LABEL_14;
          }
LABEL_97:
          unint64_t v101 = v62 - 1;
          if (v62 - 1 >= v19)
          {
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
            goto LABEL_145;
          }
          if (!*v127) {
            goto LABEL_147;
          }
          uint64_t v102 = v17;
          id v103 = (uint64_t *)(v59 + 16 * v101);
          uint64_t v104 = *v103;
          long long v105 = (void *)(v59 + 16 * v62);
          uint64_t v106 = v105[1];
          uint64_t result = sub_22F18F5A4(*v127 + *(void *)(v123 + 72) * *v103, *v127 + *(void *)(v123 + 72) * *v105, *v127 + *(void *)(v123 + 72) * v106, v122);
          if (v58) {
            goto LABEL_118;
          }
          if (v106 < v104) {
            goto LABEL_121;
          }
          if (v62 > *(void *)(v102 + 16)) {
            goto LABEL_122;
          }
          *id v103 = v104;
          *(void *)(v59 + 16 * v101 + 8) = v106;
          unint64_t v107 = *(void *)(v102 + 16);
          if (v62 >= v107) {
            goto LABEL_123;
          }
          uint64_t v17 = v102;
          unint64_t v19 = v107 - 1;
          uint64_t result = (uint64_t)memmove((void *)(v59 + 16 * v62), v105 + 2, 16 * (v107 - 1 - v62));
          *(void *)(v102 + 16) = v107 - 1;
          if (v107 <= 2) {
            goto LABEL_14;
          }
        }
      }
      unint64_t v19 = 1;
LABEL_14:
      uint64_t v12 = v127[1];
      uint64_t v18 = v131;
      uint64_t v2 = v58;
      if (v131 >= v12) {
        goto LABEL_107;
      }
    }
  }
  uint64_t v17 = MEMORY[0x263F8EE78];
  unint64_t v122 = MEMORY[0x263F8EE78]
       + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v115 = MEMORY[0x263F8EE78];
  if (v12 == 1) {
    goto LABEL_12;
  }
  unint64_t v19 = *(void *)(MEMORY[0x263F8EE78] + 16);
LABEL_107:
  uint64_t v108 = v17;
  if (v19 >= 2)
  {
    uint64_t v109 = *v127;
    do
    {
      unint64_t v110 = v19 - 2;
      if (v19 < 2) {
        goto LABEL_136;
      }
      if (!v109) {
        goto LABEL_149;
      }
      uint64_t v111 = *(void *)(v108 + 32 + 16 * v110);
      uint64_t v112 = *(void *)(v108 + 32 + 16 * (v19 - 1) + 8);
      uint64_t result = sub_22F18F5A4(v109 + *(void *)(v123 + 72) * v111, v109 + *(void *)(v123 + 72) * *(void *)(v108 + 32 + 16 * (v19 - 1)), v109 + *(void *)(v123 + 72) * v112, v122);
      if (v2) {
        break;
      }
      if (v112 < v111) {
        goto LABEL_137;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_22F18FC14(v108);
        uint64_t v108 = result;
      }
      if (v110 >= *(void *)(v108 + 16)) {
        goto LABEL_138;
      }
      uint64_t v113 = (void *)(v108 + 32 + 16 * v110);
      *uint64_t v113 = v111;
      v113[1] = v112;
      unint64_t v114 = *(void *)(v108 + 16);
      if (v19 > v114) {
        goto LABEL_139;
      }
      uint64_t result = (uint64_t)memmove((void *)(v108 + 32 + 16 * (v19 - 1)), (const void *)(v108 + 32 + 16 * v19), 16 * (v114 - v19));
      *(void *)(v108 + 16) = v114 - 1;
      unint64_t v19 = v114 - 1;
    }
    while (v114 > 2);
  }
LABEL_118:
  swift_bridgeObjectRelease();
  *(void *)(v115 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_22F18F318(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v25 = a1;
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_268694C00);
  uint64_t v7 = MEMORY[0x270FA5388](v29);
  uint64_t v30 = (uint64_t)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v26 = (uint64_t)&v23 - v10;
  uint64_t result = MEMORY[0x270FA5388](v9);
  uint64_t v14 = (char *)&v23 - v13;
  uint64_t v28 = a3;
  uint64_t v24 = a2;
  if (a3 != a2)
  {
    uint64_t v15 = *(void *)(v12 + 72);
    uint64_t v32 = v15 * (v28 - 1);
    uint64_t v27 = v15;
    uint64_t v31 = v15 * v28;
LABEL_5:
    uint64_t v16 = 0;
    uint64_t v17 = v25;
    while (1)
    {
      uint64_t v18 = *a4;
      sub_22F186CEC(v31 + v16 + *a4, (uint64_t)v14, &qword_268694C00);
      uint64_t v19 = v26;
      sub_22F186CEC(v32 + v16 + v18, v26, &qword_268694C00);
      LOBYTE(v18) = sub_22F2237B8();
      sub_22F196338(v19, &qword_268694C00);
      uint64_t result = sub_22F196338((uint64_t)v14, &qword_268694C00);
      if ((v18 & 1) == 0)
      {
LABEL_4:
        v32 += v27;
        v31 += v27;
        if (++v28 == v24) {
          return result;
        }
        goto LABEL_5;
      }
      uint64_t v20 = *a4;
      if (!*a4) {
        break;
      }
      uint64_t v21 = a4;
      uint64_t v22 = v20 + v32 + v16;
      sub_22F1899D0(v20 + v31 + v16, v30, &qword_268694C00);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = sub_22F1899D0(v30, v22, &qword_268694C00);
      v16 -= v27;
      ++v17;
      a4 = v21;
      if (v28 == v17) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_22F18F5A4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_268694C00);
  uint64_t v8 = MEMORY[0x270FA5388](v43);
  uint64_t v42 = (uint64_t)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v39 - v11;
  uint64_t v14 = *(void *)(v13 + 72);
  if (!v14)
  {
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
    return result;
  }
  if (a2 - a1 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_60;
  }
  int64_t v15 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_61;
  }
  uint64_t v16 = (uint64_t)(a2 - a1) / v14;
  unint64_t v46 = a1;
  unint64_t v45 = a4;
  if (v16 >= v15 / v14)
  {
    uint64_t v18 = v15 / v14 * v14;
    if (a4 < a2 || a2 + v18 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a2)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v25 = a4 + v18;
    unint64_t v44 = a4 + v18;
    unint64_t v46 = a2;
    if (v18 >= 1 && a1 < a2)
    {
      uint64_t v27 = -v14;
      unint64_t v40 = a4;
      unint64_t v41 = a1;
      do
      {
        unint64_t v28 = a3 + v27;
        sub_22F186CEC(v25 + v27, (uint64_t)v12, &qword_268694C00);
        unint64_t v29 = a2 + v27;
        unint64_t v30 = a3;
        uint64_t v31 = (uint64_t)v12;
        uint64_t v32 = v42;
        sub_22F186CEC(a2 + v27, v42, &qword_268694C00);
        char v33 = sub_22F2237B8();
        uint64_t v34 = v32;
        uint64_t v12 = (char *)v31;
        sub_22F196338(v34, &qword_268694C00);
        sub_22F196338(v31, &qword_268694C00);
        if (v33)
        {
          if (v30 < a2 || v28 >= a2)
          {
            swift_arrayInitWithTakeFrontToBack();
            unint64_t v37 = v40;
            unint64_t v36 = v41;
          }
          else
          {
            BOOL v35 = v30 == a2;
            unint64_t v37 = v40;
            unint64_t v36 = v41;
            if (!v35) {
              swift_arrayInitWithTakeBackToFront();
            }
          }
          v46 += v27;
        }
        else
        {
          unint64_t v38 = v44;
          v44 += v27;
          if (v30 < v38 || v28 >= v38)
          {
            swift_arrayInitWithTakeFrontToBack();
            unint64_t v29 = a2;
            unint64_t v37 = v40;
            unint64_t v36 = v41;
          }
          else
          {
            BOOL v35 = v30 == v38;
            unint64_t v37 = v40;
            unint64_t v36 = v41;
            if (!v35) {
              swift_arrayInitWithTakeBackToFront();
            }
            unint64_t v29 = a2;
          }
        }
        unint64_t v25 = v44;
        if (v44 <= v37) {
          break;
        }
        a2 = v29;
        a3 = v28;
      }
      while (v29 > v36);
    }
  }
  else
  {
    uint64_t v17 = v16 * v14;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v41 = a4 + v17;
    unint64_t v44 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      uint64_t v20 = v42;
      do
      {
        sub_22F186CEC(a2, (uint64_t)v12, &qword_268694C00);
        sub_22F186CEC(a4, v20, &qword_268694C00);
        char v21 = sub_22F2237B8();
        sub_22F196338(v20, &qword_268694C00);
        sub_22F196338((uint64_t)v12, &qword_268694C00);
        unint64_t v22 = v46;
        if (v21)
        {
          unint64_t v23 = a2 + v14;
          if (v46 < a2 || v46 >= v23)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v46 == a2)
          {
            unint64_t v22 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        else
        {
          unint64_t v24 = v45 + v14;
          if (v46 < v45 || v46 >= v24)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v46 != v45)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          unint64_t v45 = v24;
          unint64_t v23 = a2;
        }
        unint64_t v46 = v22 + v14;
        a4 = v45;
        if (v45 >= v41) {
          break;
        }
        a2 = v23;
      }
      while (v23 < a3);
    }
  }
  sub_22F18FB2C(&v46, &v45, (uint64_t *)&v44);
  return 1;
}

char *sub_22F18FA30(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_268694CE0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_22F18FB2C(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&qword_268694C00);
  uint64_t v7 = *(void *)(*(void *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    return result;
  }
  if (v5 - v4 == 0x8000000000000000 && v7 == -1) {
    goto LABEL_17;
  }
  if (v3 < v4 || v3 >= v4 + (uint64_t)(v5 - v4) / v7 * v7)
  {
    return swift_arrayInitWithTakeFrontToBack();
  }
  else if (v3 != v4)
  {
    return swift_arrayInitWithTakeBackToFront();
  }
  return result;
}

char *sub_22F18FC14(uint64_t a1)
{
  return sub_22F18FA30(0, *(void *)(a1 + 16), 0, (char *)a1);
}

size_t sub_22F18FC28(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_22F18FDA8(a1, a2, a3, (void *)*v3);
  *unint64_t v3 = result;
  return result;
}

size_t sub_22F18FC48(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_22F18FF84(a1, a2, a3, (void *)*v3);
  *unint64_t v3 = result;
  return result;
}

char *sub_22F18FC68(char *a1, int64_t a2, char a3)
{
  size_t result = sub_22F190158(a1, a2, a3, *v3);
  *unint64_t v3 = result;
  return result;
}

char *sub_22F18FC88(char *a1, int64_t a2, char a3)
{
  size_t result = sub_22F19025C(a1, a2, a3, *v3);
  *unint64_t v3 = result;
  return result;
}

char *sub_22F18FCA8(char *a1, int64_t a2, char a3)
{
  size_t result = sub_22F190358(a1, a2, a3, *v3);
  *unint64_t v3 = result;
  return result;
}

char *sub_22F18FCC8(char *a1, int64_t a2, char a3)
{
  size_t result = sub_22F190464(a1, a2, a3, *v3);
  *unint64_t v3 = result;
  return result;
}

char *sub_22F18FCE8(char *a1, int64_t a2, char a3)
{
  size_t result = sub_22F190560(a1, a2, a3, *v3);
  *unint64_t v3 = result;
  return result;
}

char *sub_22F18FD08(char *a1, int64_t a2, char a3)
{
  size_t result = sub_22F19066C(a1, a2, a3, *v3);
  *unint64_t v3 = result;
  return result;
}

char *sub_22F18FD28(char *a1, int64_t a2, char a3)
{
  size_t result = sub_22F190764(a1, a2, a3, *v3);
  *unint64_t v3 = result;
  return result;
}

char *sub_22F18FD48(char *a1, int64_t a2, char a3)
{
  size_t result = sub_22F19086C(a1, a2, a3, *v3);
  *unint64_t v3 = result;
  return result;
}

char *sub_22F18FD68(char *a1, int64_t a2, char a3)
{
  size_t result = sub_22F190968(a1, a2, a3, *v3);
  *unint64_t v3 = result;
  return result;
}

char *sub_22F18FD88(char *a1, int64_t a2, char a3)
{
  size_t result = sub_22F190A64(a1, a2, a3, *v3);
  *unint64_t v3 = result;
  return result;
}

size_t sub_22F18FDA8(size_t result, int64_t a2, char a3, void *a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_268694CE8);
  uint64_t v10 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_268694C00) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t result = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_29;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  uint64_t v15 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_268694C00) - 8);
  if (v5)
  {
    if (v13 < a4
      || (unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(void *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (size_t)v13;
}

size_t sub_22F18FF84(size_t result, int64_t a2, char a3, void *a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_268694CD8);
  uint64_t v10 = *(void *)(sub_22F223788() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t result = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_29;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  uint64_t v15 = *(void *)(sub_22F223788() - 8);
  if (v5)
  {
    if (v13 < a4
      || (unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(void *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (size_t)v13;
}

char *sub_22F190158(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_268694CC0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_22F19025C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_268694CB0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_release();
  return v10;
}

char *sub_22F190358(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_268694CA8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  size_t v14 = 48 * v8;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v14);
  }
  swift_release();
  return v10;
}

char *sub_22F190464(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2686948D8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 29;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8]) {
      memmove(v13, v14, 4 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 4 * v8);
  }
  swift_release();
  return v10;
}

char *sub_22F190560(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_268694CA0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  size_t v14 = 24 * v8;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v14);
  }
  swift_release();
  return v10;
}

char *sub_22F19066C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_268694C98);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  size_t v15 = 32 * v8;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v15);
  }
  swift_release();
  return v10;
}

char *sub_22F190764(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_268694C88);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 80);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  size_t v14 = 80 * v8;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v14);
  }
  swift_release();
  return v10;
}

char *sub_22F19086C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_268694568);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_release();
  return v10;
}

char *sub_22F190968(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_268694C60);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_release();
  return v10;
}

char *sub_22F190A64(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_268694C68);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 + 31;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 6);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[64 * v8]) {
      memmove(v13, v14, v8 << 6);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v8 << 6);
  }
  swift_release();
  return v10;
}

uint64_t sub_22F190B60@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  sub_22F195C78((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  *a2 = v4;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_22F190BB4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = -v7;
  uint64_t v36 = a1;
  uint64_t v37 = a1 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  else {
    uint64_t v11 = -1;
  }
  uint64_t v38 = v8;
  uint64_t v39 = 0;
  uint64_t v40 = v11 & v9;
  uint64_t v41 = a2;
  uint64_t v42 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_22F19584C(&v34);
  uint64_t v12 = *((void *)&v34 + 1);
  if (!*((void *)&v34 + 1))
  {
LABEL_19:
    swift_release();
    swift_bridgeObjectRelease();
    sub_22F196330();
    return swift_release();
  }
  while (1)
  {
    uint64_t v15 = v34;
    sub_22F186BD8(&v35, v33);
    uint64_t v16 = *a5;
    unint64_t v18 = sub_22F18DE28(v15, v12);
    uint64_t v19 = *(void *)(v16 + 16);
    BOOL v20 = (v17 & 1) == 0;
    uint64_t v21 = v19 + v20;
    if (__OFADD__(v19, v20)) {
      break;
    }
    char v22 = v17;
    if (*(void *)(v16 + 24) >= v21)
    {
      if (a4)
      {
        if (v17) {
          goto LABEL_6;
        }
      }
      else
      {
        sub_22F1937E0();
        if (v22) {
          goto LABEL_6;
        }
      }
    }
    else
    {
      sub_22F191128(v21, a4 & 1);
      unint64_t v23 = sub_22F18DE28(v15, v12);
      if ((v22 & 1) != (v24 & 1)) {
        goto LABEL_22;
      }
      unint64_t v18 = v23;
      if (v22)
      {
LABEL_6:
        uint64_t v13 = 32 * v18;
        sub_22F195C78(*(void *)(*a5 + 56) + v13, (uint64_t)v31);
        sub_22F195C78((uint64_t)v31, (uint64_t)v32);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v31);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v33);
        swift_bridgeObjectRelease();
        size_t v14 = (_OWORD *)(*(void *)(*a5 + 56) + v13);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v14);
        sub_22F186BD8(v32, v14);
        goto LABEL_7;
      }
    }
    unint64_t v25 = (void *)*a5;
    *(void *)(*a5 + 8 * (v18 >> 6) + 64) |= 1 << v18;
    uint64_t v26 = (uint64_t *)(v25[6] + 16 * v18);
    *uint64_t v26 = v15;
    v26[1] = v12;
    sub_22F186BD8(v33, (_OWORD *)(v25[7] + 32 * v18));
    uint64_t v27 = v25[2];
    BOOL v28 = __OFADD__(v27, 1);
    uint64_t v29 = v27 + 1;
    if (v28) {
      goto LABEL_21;
    }
    v25[2] = v29;
LABEL_7:
    sub_22F19584C(&v34);
    uint64_t v12 = *((void *)&v34 + 1);
    a4 = 1;
    if (!*((void *)&v34 + 1)) {
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  uint64_t result = sub_22F2247B8();
  __break(1u);
  return result;
}

uint64_t sub_22F190E18(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268694CF8);
  char v38 = a2;
  uint64_t v6 = sub_22F2245E8();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  long long v35 = v2;
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    char v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void **)(*(void *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v33 = v32;
    }
    sub_22F2247E8();
    sub_22F223B28();
    uint64_t result = sub_22F224818();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    void *v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  char v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *char v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_22F191128(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268694A18);
  uint64_t v6 = sub_22F2245E8();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v19 = v34[v13];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v2;
              if (a2)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      int64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      int64_t v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        sub_22F186BD8(v24, v35);
      }
      else
      {
        sub_22F195C78((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      sub_22F2247E8();
      sub_22F223B28();
      uint64_t result = sub_22F224818();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      unint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      *unint64_t v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)sub_22F186BD8(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_22F191428(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268694A00);
  char v37 = a2;
  uint64_t v6 = sub_22F2245E8();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    unint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    sub_22F2247E8();
    sub_22F223B28();
    uint64_t result = sub_22F224818();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    int64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    void *v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  uint64_t v22 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_22F191734(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268694CB8);
  char v36 = a2;
  uint64_t v6 = sub_22F2245E8();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    unint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_22F2247E8();
    sub_22F223B28();
    uint64_t result = sub_22F224818();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    int64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    void *v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_22F191A4C(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = sub_22F223848();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268694C58);
  int v46 = a2;
  uint64_t v10 = sub_22F2245E8();
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v14 = *(void *)(v11 + 64);
  uint64_t v42 = (void *)(v11 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v14;
  uint64_t v40 = v3;
  int64_t v41 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v45 = v6;
  unint64_t v17 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v18 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41) {
      break;
    }
    char v25 = v42;
    unint64_t v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_34;
      }
      unint64_t v26 = v42[v20];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v40;
          if ((v46 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v41) {
              goto LABEL_34;
            }
            unint64_t v26 = v42[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v27;
      }
    }
LABEL_21:
    unint64_t v16 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    uint64_t v28 = *(void *)(v45 + 72);
    unint64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if (v46)
    {
      (*v17)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*v43)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
      swift_bridgeObjectRetain();
    }
    sub_22F196284((unint64_t *)&qword_268694C50, MEMORY[0x263F07508]);
    uint64_t result = sub_22F2239E8();
    uint64_t v31 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 48) + v28 * v21, v8, v5);
    *(void *)(*(void *)(v12 + 56) + 8 * v21) = v30;
    ++*(void *)(v12 + 16);
  }
  swift_release();
  uint64_t v3 = v40;
  char v25 = v42;
  if ((v46 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v11 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *char v25 = -1 << v38;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v12;
  return result;
}

uint64_t sub_22F191E70(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268694C90);
  uint64_t result = sub_22F2245E8();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v51 = -1 << v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    uint64_t v52 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v53 = v3;
    int64_t v54 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v21 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v22 = v21 | (v8 << 6);
        if (a2) {
          goto LABEL_10;
        }
      }
      else
      {
        int64_t v31 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v31 >= v54) {
          goto LABEL_33;
        }
        unint64_t v32 = v9[v31];
        ++v8;
        if (!v32)
        {
          int64_t v8 = v31 + 1;
          if (v31 + 1 >= v54) {
            goto LABEL_33;
          }
          unint64_t v32 = v9[v8];
          if (!v32)
          {
            int64_t v33 = v31 + 2;
            if (v33 >= v54)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v53;
                goto LABEL_40;
              }
              if (v52 >= 64) {
                bzero((void *)(v5 + 64), 8 * v54);
              }
              else {
                uint64_t *v9 = v51;
              }
              uint64_t v3 = v53;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v32 = v9[v33];
            if (!v32)
            {
              while (1)
              {
                int64_t v8 = v33 + 1;
                if (__OFADD__(v33, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v54) {
                  goto LABEL_33;
                }
                unint64_t v32 = v9[v8];
                ++v33;
                if (v32) {
                  goto LABEL_22;
                }
              }
            }
            int64_t v8 = v33;
          }
        }
LABEL_22:
        unint64_t v12 = (v32 - 1) & v32;
        unint64_t v22 = __clz(__rbit64(v32)) + (v8 << 6);
        if (a2)
        {
LABEL_10:
          uint64_t v23 = *(void *)(*(void *)(v5 + 48) + 8 * v22);
          uint64_t v24 = *(void *)(v5 + 56) + 192 * v22;
          long long v25 = *(_OWORD *)(v24 + 144);
          long long v75 = *(_OWORD *)(v24 + 128);
          long long v76 = v25;
          long long v77 = *(_OWORD *)(v24 + 160);
          uint64_t v78 = *(void *)(v24 + 176);
          long long v26 = *(_OWORD *)(v24 + 80);
          long long v71 = *(_OWORD *)(v24 + 64);
          long long v72 = v26;
          long long v27 = *(_OWORD *)(v24 + 112);
          long long v73 = *(_OWORD *)(v24 + 96);
          long long v74 = v27;
          long long v28 = *(_OWORD *)(v24 + 16);
          long long v67 = *(_OWORD *)v24;
          long long v68 = v28;
          long long v29 = *(_OWORD *)(v24 + 32);
          long long v30 = *(_OWORD *)(v24 + 48);
          goto LABEL_24;
        }
      }
      uint64_t v23 = *(void *)(*(void *)(v5 + 48) + 8 * v22);
      uint64_t v34 = *(void *)(v5 + 56) + 192 * v22;
      long long v36 = *(_OWORD *)(v34 + 32);
      long long v35 = *(_OWORD *)(v34 + 48);
      long long v37 = *(_OWORD *)v34;
      long long v56 = *(_OWORD *)(v34 + 16);
      long long v57 = v36;
      long long v55 = v37;
      long long v38 = *(_OWORD *)(v34 + 112);
      long long v40 = *(_OWORD *)(v34 + 64);
      long long v39 = *(_OWORD *)(v34 + 80);
      long long v61 = *(_OWORD *)(v34 + 96);
      long long v62 = v38;
      long long v59 = v40;
      long long v60 = v39;
      long long v42 = *(_OWORD *)(v34 + 144);
      long long v41 = *(_OWORD *)(v34 + 160);
      long long v43 = *(_OWORD *)(v34 + 128);
      uint64_t v66 = *(void *)(v34 + 176);
      long long v64 = v42;
      long long v65 = v41;
      long long v63 = v43;
      long long v58 = v35;
      sub_22F1962F8((uint64_t)&v55);
      long long v75 = v63;
      long long v76 = v64;
      long long v77 = v65;
      uint64_t v78 = v66;
      long long v71 = v59;
      long long v72 = v60;
      long long v73 = v61;
      long long v74 = v62;
      long long v67 = v55;
      long long v68 = v56;
      long long v29 = v57;
      long long v30 = v58;
LABEL_24:
      long long v69 = v29;
      long long v70 = v30;
      uint64_t result = sub_22F2247D8();
      uint64_t v44 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v45 = result & ~v44;
      unint64_t v46 = v45 >> 6;
      if (((-1 << v45) & ~*(void *)(v13 + 8 * (v45 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v45) & ~*(void *)(v13 + 8 * (v45 >> 6)))) | v45 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v47 = 0;
        unint64_t v48 = (unint64_t)(63 - v44) >> 6;
        do
        {
          if (++v46 == v48 && (v47 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v49 = v46 == v48;
          if (v46 == v48) {
            unint64_t v46 = 0;
          }
          v47 |= v49;
          uint64_t v50 = *(void *)(v13 + 8 * v46);
        }
        while (v50 == -1);
        unint64_t v14 = __clz(__rbit64(~v50)) + (v46 << 6);
      }
      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(void *)(*(void *)(v7 + 48) + 8 * v14) = v23;
      uint64_t v15 = *(void *)(v7 + 56) + 192 * v14;
      long long v16 = v76;
      *(_OWORD *)(v15 + 128) = v75;
      *(_OWORD *)(v15 + 144) = v16;
      *(_OWORD *)(v15 + 160) = v77;
      *(void *)(v15 + 176) = v78;
      long long v17 = v72;
      *(_OWORD *)(v15 + 64) = v71;
      *(_OWORD *)(v15 + 80) = v17;
      long long v18 = v74;
      *(_OWORD *)(v15 + 96) = v73;
      *(_OWORD *)(v15 + 112) = v18;
      long long v19 = v68;
      *(_OWORD *)uint64_t v15 = v67;
      *(_OWORD *)(v15 + 16) = v19;
      long long v20 = v70;
      *(_OWORD *)(v15 + 32) = v69;
      *(_OWORD *)(v15 + 48) = v20;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_22F192210(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268694C38);
  uint64_t result = sub_22F2245E8();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v31 = a2;
    int64_t v8 = 0;
    uint64_t v9 = (void *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }
      else
      {
        int64_t v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v18 >= v13) {
          goto LABEL_31;
        }
        unint64_t v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          int64_t v8 = v18 + 1;
          if (v18 + 1 >= v13) {
            goto LABEL_31;
          }
          unint64_t v19 = v9[v8];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_31:
              if ((v31 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_38;
              }
              uint64_t v30 = 1 << *(unsigned char *)(v5 + 32);
              if (v30 >= 64) {
                bzero((void *)(v5 + 64), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                void *v9 = -1 << v30;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v8 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                unint64_t v19 = v9[v8];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v20;
          }
        }
LABEL_21:
        unint64_t v12 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      char v21 = *(unsigned char *)(*(void *)(v5 + 48) + v17);
      int v22 = *(_DWORD *)(*(void *)(v5 + 56) + 4 * v17);
      sub_22F2247E8();
      sub_22F224808();
      uint64_t result = sub_22F224818();
      uint64_t v23 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v24 = result & ~v23;
      unint64_t v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v28 = v25 == v27;
          if (v25 == v27) {
            unint64_t v25 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        unint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(unsigned char *)(*(void *)(v7 + 48) + v15) = v21;
      *(_DWORD *)(*(void *)(v7 + 56) + 4 * v15) = v22;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_22F1924DC(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268694C30);
  char v40 = a2;
  uint64_t v6 = sub_22F2245E8();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  long long v38 = v2;
  uint64_t v39 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v39 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v39 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v38;
          if ((v40 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v39 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v39 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = *(void **)(*(void *)(v5 + 48) + 8 * v21);
    unint64_t v31 = *(void *)(v5 + 56) + (v21 << 6);
    uint64_t v32 = *(void *)v31;
    int v33 = *(_DWORD *)(v31 + 24);
    uint64_t v34 = *(void *)(v31 + 32);
    long long v41 = *(_OWORD *)(v31 + 40);
    long long v42 = *(_OWORD *)(v31 + 8);
    int v35 = *(_DWORD *)(v31 + 56);
    if ((v40 & 1) == 0)
    {
      id v36 = v30;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    uint64_t result = sub_22F2241B8();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(void *)(*(void *)(v7 + 48) + 8 * v18) = v30;
    unint64_t v19 = *(void *)(v7 + 56) + (v18 << 6);
    *(void *)unint64_t v19 = v32;
    *(_OWORD *)(v19 + 8) = v42;
    *(_DWORD *)(v19 + 24) = v33;
    *(void *)(v19 + 32) = v34;
    *(_OWORD *)(v19 + 40) = v41;
    *(_DWORD *)(v19 + 56) = v35;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v38;
  uint64_t v23 = (void *)(v5 + 64);
  if ((v40 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v37 = 1 << *(unsigned char *)(v5 + 32);
  if (v37 >= 64) {
    bzero(v23, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v23 = -1 << v37;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_22F192808(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2686949D0);
  uint64_t result = sub_22F2245E8();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v30 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v29 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        int64_t v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v19 >= v29) {
          goto LABEL_33;
        }
        unint64_t v20 = v30[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v29) {
            goto LABEL_33;
          }
          unint64_t v20 = v30[v8];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v29)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_40;
              }
              uint64_t v28 = 1 << *(unsigned char *)(v5 + 32);
              if (v28 >= 64) {
                bzero(v30, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v30 = -1 << v28;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v30[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v29) {
                  goto LABEL_33;
                }
                unint64_t v20 = v30[v8];
                ++v21;
                if (v20) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_30:
        unint64_t v11 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      char v26 = *(unsigned char *)(*(void *)(v5 + 48) + v18);
      uint64_t v27 = *(void *)(*(void *)(v5 + 56) + 8 * v18);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      sub_22F2247E8();
      sub_22F224808();
      uint64_t result = sub_22F224818();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v24 = v15 == v23;
          if (v15 == v23) {
            unint64_t v15 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v12 + 8 * v15);
        }
        while (v25 == -1);
        unint64_t v16 = __clz(__rbit64(~v25)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(unsigned char *)(*(void *)(v7 + 48) + v16) = v26;
      *(void *)(*(void *)(v7 + 56) + 8 * v16) = v27;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_22F192ADC(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = sub_22F223848();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  int64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2686949E0);
  int v45 = a2;
  uint64_t v10 = sub_22F2245E8();
  uint64_t v11 = v10;
  if (*(void *)(v9 + 16))
  {
    char v40 = v2;
    uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
    uint64_t v13 = *(void *)(v9 + 64);
    long long v42 = (void *)(v9 + 64);
    if (v12 < 64) {
      uint64_t v14 = ~(-1 << v12);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v15 = v14 & v13;
    int64_t v41 = (unint64_t)(v12 + 63) >> 6;
    long long v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    unint64_t v46 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
    uint64_t v16 = v10 + 64;
    uint64_t result = swift_retain();
    int64_t v18 = 0;
    uint64_t v47 = v5;
    for (i = v6; ; uint64_t v6 = i)
    {
      if (v15)
      {
        unint64_t v21 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v22 = v21 | (v18 << 6);
      }
      else
      {
        int64_t v23 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v23 >= v41) {
          goto LABEL_34;
        }
        unint64_t v24 = v42[v23];
        ++v18;
        if (!v24)
        {
          int64_t v18 = v23 + 1;
          if (v23 + 1 >= v41) {
            goto LABEL_34;
          }
          unint64_t v24 = v42[v18];
          if (!v24)
          {
            int64_t v25 = v23 + 2;
            if (v25 >= v41)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v40;
              if (v45)
              {
                uint64_t v39 = 1 << *(unsigned char *)(v9 + 32);
                if (v39 >= 64) {
                  bzero(v42, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *long long v42 = -1 << v39;
                }
                *(void *)(v9 + 16) = 0;
              }
              break;
            }
            unint64_t v24 = v42[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v18 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_41;
                }
                if (v18 >= v41) {
                  goto LABEL_34;
                }
                unint64_t v24 = v42[v18];
                ++v25;
                if (v24) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v18 = v25;
          }
        }
LABEL_21:
        unint64_t v15 = (v24 - 1) & v24;
        unint64_t v22 = __clz(__rbit64(v24)) + (v18 << 6);
      }
      uint64_t v26 = *(void *)(v6 + 72);
      unint64_t v27 = *(void *)(v9 + 48) + v26 * v22;
      if (v45) {
        (*v46)(v8, v27, v47);
      }
      else {
        (*v43)(v8, v27, v47);
      }
      uint64_t v28 = v9;
      uint64_t v29 = *(void *)(v9 + 56) + 8 * v22;
      int v30 = *(_DWORD *)(v29 + 4);
      char v31 = *(unsigned char *)v29;
      sub_22F196284((unint64_t *)&qword_268694C50, MEMORY[0x263F07508]);
      uint64_t result = sub_22F2239E8();
      uint64_t v32 = -1 << *(unsigned char *)(v11 + 32);
      unint64_t v33 = result & ~v32;
      unint64_t v34 = v33 >> 6;
      if (((-1 << v33) & ~*(void *)(v16 + 8 * (v33 >> 6))) != 0)
      {
        unint64_t v19 = __clz(__rbit64((-1 << v33) & ~*(void *)(v16 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v35 = 0;
        unint64_t v36 = (unint64_t)(63 - v32) >> 6;
        do
        {
          if (++v34 == v36 && (v35 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v37 = v34 == v36;
          if (v34 == v36) {
            unint64_t v34 = 0;
          }
          v35 |= v37;
          uint64_t v38 = *(void *)(v16 + 8 * v34);
        }
        while (v38 == -1);
        unint64_t v19 = __clz(__rbit64(~v38)) + (v34 << 6);
      }
      *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v46)(*(void *)(v11 + 48) + v26 * v19, v8, v47);
      uint64_t v20 = *(void *)(v11 + 56) + 8 * v19;
      *(unsigned char *)uint64_t v20 = v31;
      *(_DWORD *)(v20 + 4) = v30;
      ++*(void *)(v11 + 16);
      uint64_t v9 = v28;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

uint64_t sub_22F192F18(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268694C80);
  uint64_t result = sub_22F2245E8();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v29 = -1 << v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    uint64_t v30 = 1 << *(unsigned char *)(v5 + 32);
    int64_t v31 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v15 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v16 = v15 | (v8 << 6);
        if (a2) {
          goto LABEL_10;
        }
      }
      else
      {
        int64_t v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v19 >= v31) {
          goto LABEL_33;
        }
        unint64_t v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v31) {
            goto LABEL_33;
          }
          unint64_t v20 = v9[v8];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v31)
            {
LABEL_33:
              if (a2)
              {
                if (v30 >= 64) {
                  bzero((void *)(v5 + 64), 8 * v31);
                }
                else {
                  uint64_t *v9 = v29;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_41;
                }
                if (v8 >= v31) {
                  goto LABEL_33;
                }
                unint64_t v20 = v9[v8];
                ++v21;
                if (v20) {
                  goto LABEL_22;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_22:
        unint64_t v12 = (v20 - 1) & v20;
        unint64_t v16 = __clz(__rbit64(v20)) + (v8 << 6);
        if (a2)
        {
LABEL_10:
          uint64_t v17 = *(void *)(*(void *)(v5 + 48) + 8 * v16);
          int64_t v18 = (unsigned char *)(*(void *)(v5 + 56) + 496 * v16);
          goto LABEL_24;
        }
      }
      uint64_t v17 = *(void *)(*(void *)(v5 + 48) + 8 * v16);
      memcpy(__dst, (const void *)(*(void *)(v5 + 56) + 496 * v16), sizeof(__dst));
      sub_22F1962CC((uint64_t)__dst);
      int64_t v18 = __dst;
LABEL_24:
      memcpy(__src, v18, sizeof(__src));
      uint64_t result = sub_22F2247D8();
      uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(void *)(*(void *)(v7 + 48) + 8 * v14) = v17;
      uint64_t result = (uint64_t)memcpy((void *)(*(void *)(v7 + 56) + 496 * v14), __src, 0x1F0uLL);
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_22F193208(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = sub_22F223848();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  int64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2686949C8);
  int v46 = a2;
  uint64_t v10 = sub_22F2245E8();
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v14 = *(void *)(v11 + 64);
  long long v42 = (void *)(v11 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v14;
  char v40 = v3;
  int64_t v41 = (unint64_t)(v13 + 63) >> 6;
  long long v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v45 = v6;
  uint64_t v17 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v18 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41) {
      break;
    }
    char v25 = v42;
    unint64_t v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_34;
      }
      unint64_t v26 = v42[v20];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v40;
          if ((v46 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v41) {
              goto LABEL_34;
            }
            unint64_t v26 = v42[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v27;
      }
    }
LABEL_21:
    unint64_t v16 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    uint64_t v28 = *(void *)(v45 + 72);
    unint64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if (v46)
    {
      (*v17)(v8, v29, v5);
      id v30 = *(id *)(*(void *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*v43)(v8, v29, v5);
      id v30 = *(id *)(*(void *)(v11 + 56) + 8 * v23);
    }
    sub_22F196284((unint64_t *)&qword_268694C50, MEMORY[0x263F07508]);
    uint64_t result = sub_22F2239E8();
    uint64_t v31 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 48) + v28 * v21, v8, v5);
    *(void *)(*(void *)(v12 + 56) + 8 * v21) = v30;
    ++*(void *)(v12 + 16);
  }
  swift_release();
  uint64_t v3 = v40;
  char v25 = v42;
  if ((v46 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v11 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *char v25 = -1 << v38;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v12;
  return result;
}

id sub_22F19362C()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268694CF8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_22F2245D8();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    int64_t v20 = *(void **)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = v20;
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_22F1937E0()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268694A18);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_22F2245D8();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    id result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }
  char v25 = v1;
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    sub_22F195C78(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = v19;
    v21[1] = v18;
    sub_22F186BD8(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_22F1939C8()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268694A00);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_22F2245D8();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 8 * v15;
    uint64_t v21 = *(void *)(*(void *)(v2 + 56) + v20);
    int64_t v22 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v22 = v19;
    v22[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v20) = v21;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_22F193B78()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268694CB8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_22F2245D8();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_22F193D30()
{
  uint64_t v1 = sub_22F223848();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_268694C58);
  unint64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = sub_22F2245D8();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    id result = (void *)swift_release();
    *unint64_t v23 = v7;
    return result;
  }
  id result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v24 = v5 + 64;
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v26 = v2 + 32;
  uint64_t v27 = v2 + 16;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    unint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    uint64_t v17 = 8 * v15;
    uint64_t v18 = *(void *)(*(void *)(v5 + 56) + 8 * v15);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v17) = v18;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_22F193FC8()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268694C90);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_22F2245D8();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v39 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v39 >= v13) {
      goto LABEL_26;
    }
    unint64_t v40 = *(void *)(v6 + 8 * v39);
    ++v9;
    if (!v40)
    {
      int64_t v9 = v39 + 1;
      if (v39 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v40 = *(void *)(v6 + 8 * v9);
      if (!v40) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v40 - 1) & v40;
    unint64_t v15 = __clz(__rbit64(v40)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 192 * v15;
    uint64_t v19 = *(void *)(v2 + 56) + v18;
    long long v20 = *(_OWORD *)(v19 + 112);
    long long v22 = *(_OWORD *)(v19 + 64);
    long long v21 = *(_OWORD *)(v19 + 80);
    long long v48 = *(_OWORD *)(v19 + 96);
    long long v49 = v20;
    long long v46 = v22;
    long long v47 = v21;
    long long v24 = *(_OWORD *)(v19 + 144);
    long long v23 = *(_OWORD *)(v19 + 160);
    long long v25 = *(_OWORD *)(v19 + 128);
    uint64_t v53 = *(void *)(v19 + 176);
    long long v51 = v24;
    long long v52 = v23;
    long long v50 = v25;
    long long v27 = *(_OWORD *)v19;
    long long v26 = *(_OWORD *)(v19 + 16);
    long long v28 = *(_OWORD *)(v19 + 48);
    long long v44 = *(_OWORD *)(v19 + 32);
    long long v45 = v28;
    long long v42 = v27;
    long long v43 = v26;
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t v29 = *(void *)(v4 + 56) + v18;
    long long v30 = v42;
    long long v31 = v43;
    long long v32 = v45;
    *(_OWORD *)(v29 + 32) = v44;
    *(_OWORD *)(v29 + 48) = v32;
    *(_OWORD *)uint64_t v29 = v30;
    *(_OWORD *)(v29 + 16) = v31;
    long long v33 = v46;
    long long v34 = v47;
    long long v35 = v49;
    *(_OWORD *)(v29 + 96) = v48;
    *(_OWORD *)(v29 + 112) = v35;
    *(_OWORD *)(v29 + 64) = v33;
    *(_OWORD *)(v29 + 80) = v34;
    long long v36 = v50;
    long long v37 = v51;
    long long v38 = v52;
    *(void *)(v29 + 176) = v53;
    *(_OWORD *)(v29 + 144) = v37;
    *(_OWORD *)(v29 + 160) = v38;
    *(_OWORD *)(v29 + 128) = v36;
    id result = (void *)sub_22F1962F8((uint64_t)&v42);
  }
  int64_t v41 = v39 + 2;
  if (v41 >= v13) {
    goto LABEL_26;
  }
  unint64_t v40 = *(void *)(v6 + 8 * v41);
  if (v40)
  {
    int64_t v9 = v41;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v41 + 1;
    if (__OFADD__(v41, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v40 = *(void *)(v6 + 8 * v9);
    ++v41;
    if (v40) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_22F1941F0()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268694C38);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_22F2245D8();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v20 = __clz(__rbit64(v18));
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = v20 + (v9 << 6);
LABEL_12:
    int v16 = *(_DWORD *)(*(void *)(v2 + 56) + 4 * v15);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    *(_DWORD *)(*(void *)(v4 + 56) + 4 * v15) = v16;
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_22F194380()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268694C30);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_22F2245D8();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v28 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v13) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v6 + 8 * v28);
    ++v9;
    if (!v29)
    {
      int64_t v9 = v28 + 1;
      if (v28 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v29 = *(void *)(v6 + 8 * v9);
      if (!v29) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v29 - 1) & v29;
    unint64_t v15 = __clz(__rbit64(v29)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    int64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    unint64_t v18 = v15 << 6;
    unint64_t v19 = *(void *)(v2 + 56) + v18;
    uint64_t v20 = *(void *)v19;
    int v21 = *(_DWORD *)(v19 + 24);
    uint64_t v22 = *(void *)(v19 + 32);
    int v23 = *(_DWORD *)(v19 + 56);
    long long v24 = *(_OWORD *)(v19 + 8);
    long long v25 = *(_OWORD *)(v19 + 40);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    unint64_t v26 = *(void *)(v4 + 56) + v18;
    *(void *)unint64_t v26 = v20;
    *(_OWORD *)(v26 + 8) = v24;
    *(_DWORD *)(v26 + 24) = v21;
    *(void *)(v26 + 32) = v22;
    *(_OWORD *)(v26 + 40) = v25;
    *(_DWORD *)(v26 + 56) = v23;
    id v27 = v17;
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v30 = v28 + 2;
  if (v30 >= v13) {
    goto LABEL_26;
  }
  unint64_t v29 = *(void *)(v6 + 8 * v30);
  if (v29)
  {
    int64_t v9 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v6 + 8 * v9);
    ++v30;
    if (v29) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_22F194570()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2686949D0);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_22F2245D8();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    *(void *)(*(void *)(v4 + 56) + 8 * v15) = v16;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_22F194714()
{
  uint64_t v1 = sub_22F223848();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2686949E0);
  unint64_t v26 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = sub_22F2245D8();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    id result = (void *)swift_release();
    *unint64_t v26 = v7;
    return result;
  }
  id result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v27 = v5 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v30 = v2 + 16;
  int64_t v28 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v29 = v2 + 32;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v22 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v22 >= v28) {
      goto LABEL_23;
    }
    unint64_t v23 = *(void *)(v27 + 8 * v22);
    ++v10;
    if (!v23)
    {
      int64_t v10 = v22 + 1;
      if (v22 + 1 >= v28) {
        goto LABEL_23;
      }
      unint64_t v23 = *(void *)(v27 + 8 * v10);
      if (!v23) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v10 << 6);
LABEL_9:
    unint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    uint64_t v17 = 8 * v15;
    uint64_t v18 = *(void *)(v5 + 56) + v17;
    char v19 = *(unsigned char *)v18;
    int v20 = *(_DWORD *)(v18 + 4);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    uint64_t v21 = *(void *)(v7 + 56) + v17;
    *(unsigned char *)uint64_t v21 = v19;
    *(_DWORD *)(v21 + 4) = v20;
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v28) {
    goto LABEL_23;
  }
  unint64_t v23 = *(void *)(v27 + 8 * v24);
  if (v23)
  {
    int64_t v10 = v24;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v10 >= v28) {
      goto LABEL_23;
    }
    unint64_t v23 = *(void *)(v27 + 8 * v10);
    ++v24;
    if (v23) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_22F1949C0()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268694C80);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_22F2245D8();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 496 * v15;
    memcpy(v22, (const void *)(*(void *)(v2 + 56) + 496 * v15), sizeof(v22));
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    memcpy((void *)(*(void *)(v4 + 56) + v18), v22, 0x1F0uLL);
    id result = (void *)sub_22F1962CC((uint64_t)v22);
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_22F194BA0()
{
  uint64_t v1 = sub_22F223848();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2686949C8);
  unint64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = sub_22F2245D8();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    id result = (id)swift_release();
    *unint64_t v23 = v7;
    return result;
  }
  id result = (id)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v24 = v5 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v27 = v2 + 16;
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v26 = v2 + 32;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    unint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    uint64_t v17 = 8 * v15;
    uint64_t v18 = *(void **)(*(void *)(v5 + 56) + v17);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v17) = v18;
    id result = v18;
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

unint64_t sub_22F194E38(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    id result = sub_22F2242C8();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_22F2247E8();
        swift_bridgeObjectRetain();
        sub_22F223B28();
        uint64_t v10 = sub_22F224818();
        id result = swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          unint64_t v13 = (_OWORD *)(v12 + 16 * v3);
          unint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            *unint64_t v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          unint64_t v16 = (_OWORD *)(v15 + 32 * v3);
          uint64_t v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 2))
          {
            long long v9 = v17[1];
            *unint64_t v16 = *v17;
            v16[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  uint64_t *v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_22F195010(int64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_22F223848();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = MEMORY[0x270FA5388](v4);
  unint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v34 = a2 + 64;
    unint64_t result = sub_22F2242C8();
    uint64_t v12 = v34;
    if ((*(void *)(v34 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v31 = (result + 1) & v11;
      long long v32 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v33 = v5 + 16;
      unint64_t v13 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
      uint64_t v14 = *(void *)(v5 + 72);
      do
      {
        uint64_t v15 = v14;
        int64_t v16 = v14 * v10;
        v32(v8, *(void *)(a2 + 48) + v14 * v10, v4);
        sub_22F196284((unint64_t *)&qword_268694C50, MEMORY[0x263F07508]);
        uint64_t v17 = sub_22F2239E8();
        unint64_t result = (*v13)(v8, v4);
        unint64_t v18 = v17 & v11;
        if (a1 >= (uint64_t)v31)
        {
          if (v18 >= v31 && a1 >= (uint64_t)v18)
          {
LABEL_16:
            uint64_t v21 = *(void *)(a2 + 48);
            uint64_t v14 = v15;
            unint64_t result = v21 + v15 * a1;
            if (v15 * a1 < v16 || result >= v21 + v16 + v15)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v16)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v22 = *(void *)(a2 + 56);
            uint64_t v23 = (void *)(v22 + 8 * a1);
            uint64_t v24 = (void *)(v22 + 8 * v10);
            uint64_t v12 = v34;
            if (a1 != v10 || (a1 = v10, v23 >= v24 + 1))
            {
              *uint64_t v23 = *v24;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v18 >= v31 || a1 >= (uint64_t)v18)
        {
          goto LABEL_16;
        }
        uint64_t v12 = v34;
        uint64_t v14 = v15;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v12 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    int64_t v25 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v26 = *v25;
    uint64_t v27 = (-1 << a1) - 1;
  }
  else
  {
    int64_t v25 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v27 = *v25;
    uint64_t v26 = (-1 << a1) - 1;
  }
  *int64_t v25 = v27 & v26;
  uint64_t v28 = *(void *)(a2 + 16);
  BOOL v29 = __OFSUB__(v28, 1);
  uint64_t v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_22F195308(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = sub_22F2242C8();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = *(void *)(a2 + 48);
        unint64_t v10 = (void *)(v9 + 8 * v6);
        unint64_t result = sub_22F2247D8();
        unint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            uint64_t v14 = (void *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1) {
              *uint64_t v14 = *v10;
            }
            uint64_t v15 = *(void *)(a2 + 56);
            unint64_t result = v15 + 192 * v3;
            int64_t v16 = (const void *)(v15 + 192 * v6);
            if (192 * v3 < (uint64_t)(192 * v6)
              || result >= (unint64_t)v16 + 192
              || (BOOL v17 = v3 == v6, v3 = v6, !v17))
            {
              unint64_t result = (unint64_t)memmove((void *)result, v16, 0xC0uLL);
              int64_t v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  uint64_t *v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_22F1954B8(unint64_t a1, uint64_t a2)
{
  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = sub_22F2242C8();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        id v13 = *(id *)(*(void *)(a2 + 48) + 8 * v6);
        uint64_t v14 = sub_22F2241B8();

        unint64_t v15 = v14 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v15 >= v9 && v3 >= (uint64_t)v15)
          {
LABEL_16:
            uint64_t v18 = *(void *)(a2 + 48);
            uint64_t v19 = (void *)(v18 + 8 * v3);
            uint64_t v20 = (void *)(v18 + 8 * v6);
            if (v3 != v6 || v19 >= v20 + 1) {
              *uint64_t v19 = *v20;
            }
            uint64_t v21 = *(void *)(a2 + 56);
            BOOL v22 = (long long *)(v21 + (v3 << 6));
            uint64_t v23 = (long long *)(v21 + (v6 << 6));
            if (v3 << 6 != v6 << 6 || (int64_t v3 = v6, v22 >= v23 + 4))
            {
              long long v10 = *v23;
              long long v11 = v23[1];
              long long v12 = v23[3];
              id v22[2] = v23[2];
              v22[3] = v12;
              *BOOL v22 = v10;
              v22[1] = v11;
              int64_t v3 = v6;
            }
          }
        }
        else if (v15 >= v9 || v3 >= (uint64_t)v15)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v24 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v25 = *v24;
    uint64_t v26 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v24 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    uint64_t v26 = *v24;
    uint64_t v25 = (-1 << a1) - 1;
  }
  *uint64_t v24 = v26 & v25;
  uint64_t v27 = *(void *)(a2 + 16);
  BOOL v28 = __OFSUB__(v27, 1);
  uint64_t v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v29;
    ++*(_DWORD *)(a2 + 36);
  }
}

unint64_t sub_22F19567C(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = sub_22F2242C8();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_22F2247E8();
        sub_22F224808();
        unint64_t result = sub_22F224818();
        unint64_t v9 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v9 < v8) {
            goto LABEL_5;
          }
        }
        else if (v9 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v9)
        {
LABEL_11:
          uint64_t v10 = *(void *)(a2 + 48);
          long long v11 = (unsigned char *)(v10 + v3);
          long long v12 = (unsigned char *)(v10 + v6);
          if (v3 != v6 || v11 >= v12 + 1) {
            *long long v11 = *v12;
          }
          uint64_t v13 = *(void *)(a2 + 56);
          uint64_t v14 = (void *)(v13 + 8 * v3);
          unint64_t v15 = (void *)(v13 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v14 >= v15 + 1))
          {
            *uint64_t v14 = *v15;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    int64_t v16 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v17 = *v16;
    uint64_t v18 = (-1 << v3) - 1;
  }
  else
  {
    int64_t v16 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v18 = *v16;
    uint64_t v17 = (-1 << result) - 1;
  }
  *int64_t v16 = v18 & v17;
  uint64_t v19 = *(void *)(a2 + 16);
  BOOL v20 = __OFSUB__(v19, 1);
  uint64_t v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v21;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

size_t sub_22F195838(void *a1)
{
  return sub_22F18FDA8(0, a1[2], 0, a1);
}

uint64_t sub_22F19584C@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    long long v11 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v10);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    sub_22F195C78(*(void *)(v3 + 56) + 32 * v10, (uint64_t)v24);
    *(void *)&long long v23 = v13;
    *((void *)&v23 + 1) = v12;
    swift_bridgeObjectRetain();
    goto LABEL_23;
  }
  int64_t v14 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  int64_t v15 = (unint64_t)(v6 + 64) >> 6;
  if (v14 < v15)
  {
    unint64_t v16 = *(void *)(v4 + 8 * v14);
    if (v16)
    {
LABEL_7:
      uint64_t v9 = (v16 - 1) & v16;
      unint64_t v10 = __clz(__rbit64(v16)) + (v14 << 6);
      int64_t v7 = v14;
      goto LABEL_3;
    }
    int64_t v17 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v15)
    {
      unint64_t v16 = *(void *)(v4 + 8 * v17);
      if (v16)
      {
LABEL_10:
        int64_t v14 = v17;
        goto LABEL_7;
      }
      int64_t v7 = v5 + 2;
      if (v5 + 3 < v15)
      {
        unint64_t v16 = *(void *)(v4 + 8 * (v5 + 3));
        if (v16)
        {
          int64_t v14 = v5 + 3;
          goto LABEL_7;
        }
        int64_t v17 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v15)
        {
          unint64_t v16 = *(void *)(v4 + 8 * v17);
          if (v16) {
            goto LABEL_10;
          }
          int64_t v14 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v15)
          {
            unint64_t v16 = *(void *)(v4 + 8 * v14);
            if (v16) {
              goto LABEL_7;
            }
            int64_t v7 = v15 - 1;
            int64_t v18 = v5 + 6;
            while (v15 != v18)
            {
              unint64_t v16 = *(void *)(v4 + 8 * v18++);
              if (v16)
              {
                int64_t v14 = v18 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v9 = 0;
  memset(v24, 0, sizeof(v24));
  long long v23 = 0u;
LABEL_23:
  *uint64_t v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  uint64_t v19 = (void (*)(_OWORD *))v1[5];
  uint64_t result = sub_22F1899D0((uint64_t)&v23, (uint64_t)v22, &qword_268694C18);
  if (*((void *)&v22[0] + 1))
  {
    v21[0] = v22[0];
    v21[1] = v22[1];
    _DWORD v21[2] = v22[2];
    v19(v21);
    return sub_22F196338((uint64_t)v21, &qword_268694CC8);
  }
  else
  {
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

uint64_t sub_22F195A38(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_268694CF0);
    uint64_t v3 = sub_22F2243E8();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v31 = v1;
    uint64_t v32 = a1 + 32;
    while (1)
    {
      uint64_t v6 = *(void **)(v32 + 8 * v4);
      sub_22F223AC8();
      sub_22F2247E8();
      id v7 = v6;
      sub_22F223B28();
      uint64_t v8 = sub_22F224818();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = v8 & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        uint64_t v15 = sub_22F223AC8();
        uint64_t v17 = v16;
        if (v15 == sub_22F223AC8() && v17 == v18)
        {
LABEL_3:
          swift_bridgeObjectRelease_n();
LABEL_4:

          goto LABEL_5;
        }
        char v20 = sub_22F224738();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        if (v20) {
          goto LABEL_4;
        }
        uint64_t v21 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v21;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          uint64_t v22 = sub_22F223AC8();
          uint64_t v24 = v23;
          if (v22 == sub_22F223AC8() && v24 == v25) {
            goto LABEL_3;
          }
          char v27 = sub_22F224738();
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          if (v27) {
            goto LABEL_4;
          }
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      *(void *)(*(void *)(v3 + 48) + 8 * v11) = v7;
      uint64_t v28 = *(void *)(v3 + 16);
      BOOL v29 = __OFADD__(v28, 1);
      uint64_t v30 = v28 + 1;
      if (v29)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v30;
LABEL_5:
      if (++v4 == v31) {
        return v3;
      }
    }
  }
  return MEMORY[0x263F8EE88];
}

unint64_t _s17MeasureFoundation18RecordReplayOptionO8rawValueACSgSi_tcfC_0(unint64_t result)
{
  if (result >= 5) {
    return 5;
  }
  return result;
}

uint64_t sub_22F195C78(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

unint64_t sub_22F195D28()
{
  unint64_t result = qword_268694C28;
  if (!qword_268694C28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268694C28);
  }
  return result;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for RecordReplayOption(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for RecordReplayOption(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22F195EE4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

uint64_t sub_22F195F0C(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_22F195F18(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for RecordReplayOption()
{
  return &type metadata for RecordReplayOption;
}

ValueMetadata *type metadata accessor for DefaultsManager()
{
  return &type metadata for DefaultsManager;
}

ValueMetadata *type metadata accessor for Defaults()
{
  return &type metadata for Defaults;
}

unint64_t sub_22F195F50()
{
  unint64_t result = qword_268694C40;
  if (!qword_268694C40)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_268694C40);
  }
  return result;
}

unint64_t sub_22F195F94(unint64_t result)
{
  unint64_t v1 = result;
  unint64_t v2 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_22F2245C8();
    unint64_t result = swift_bridgeObjectRelease();
    if (v5)
    {
LABEL_3:
      __swift_instantiateConcreteTypeFromMangledName(&qword_268694C48);
      unint64_t result = sub_22F2243E8();
      unint64_t v3 = result;
      unint64_t v20 = v1;
      if (!v2) {
        goto LABEL_4;
      }
LABEL_8:
      swift_bridgeObjectRetain();
      uint64_t v4 = sub_22F2245C8();
      unint64_t result = swift_bridgeObjectRelease();
      if (!v4) {
        return v3;
      }
      goto LABEL_9;
    }
  }
  else if (*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  unint64_t v3 = MEMORY[0x263F8EE88];
  unint64_t v20 = v1;
  if (v2) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v4 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v4) {
    return v3;
  }
LABEL_9:
  unint64_t v6 = 0;
  unint64_t v7 = v3 + 56;
  while ((v20 & 0xC000000000000001) != 0)
  {
    unint64_t result = MEMORY[0x230FB2E90](v6, v20);
    unint64_t v8 = result;
    BOOL v9 = __OFADD__(v6++, 1);
    if (v9) {
      goto LABEL_27;
    }
LABEL_18:
    sub_22F2247E8();
    sub_22F223848();
    sub_22F196284((unint64_t *)&qword_268694C50, MEMORY[0x263F07508]);
    sub_22F2239F8();
    unint64_t result = sub_22F224818();
    uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
    unint64_t v11 = result & ~v10;
    unint64_t v12 = v11 >> 6;
    uint64_t v13 = *(void *)(v7 + 8 * (v11 >> 6));
    uint64_t v14 = 1 << v11;
    if (((1 << v11) & v13) != 0)
    {
      swift_retain();
      char v15 = sub_22F223818();
      unint64_t result = swift_release();
      if (v15)
      {
LABEL_10:
        unint64_t result = swift_release();
        goto LABEL_11;
      }
      uint64_t v16 = ~v10;
      while (1)
      {
        unint64_t v11 = (v11 + 1) & v16;
        unint64_t v12 = v11 >> 6;
        uint64_t v13 = *(void *)(v7 + 8 * (v11 >> 6));
        uint64_t v14 = 1 << v11;
        if ((v13 & (1 << v11)) == 0) {
          break;
        }
        swift_retain();
        char v17 = sub_22F223818();
        unint64_t result = swift_release();
        if (v17) {
          goto LABEL_10;
        }
      }
    }
    *(void *)(v7 + 8 * v12) = v14 | v13;
    *(void *)(*(void *)(v3 + 48) + 8 * v11) = v8;
    uint64_t v18 = *(void *)(v3 + 16);
    BOOL v9 = __OFADD__(v18, 1);
    uint64_t v19 = v18 + 1;
    if (v9) {
      goto LABEL_28;
    }
    *(void *)(v3 + 16) = v19;
LABEL_11:
    if (v6 == v4) {
      return v3;
    }
  }
  if (v6 >= *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_29;
  }
  unint64_t v8 = *(void *)(v20 + 32 + 8 * v6);
  unint64_t result = swift_retain();
  BOOL v9 = __OFADD__(v6++, 1);
  if (!v9) {
    goto LABEL_18;
  }
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_22F196284(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_22F1962CC(uint64_t a1)
{
  return a1;
}

uint64_t sub_22F1962F8(uint64_t a1)
{
  return a1;
}

uint64_t sub_22F196330()
{
  return swift_release();
}

uint64_t sub_22F196338(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void static NSThread.prettyPrintCallStack(toDepth:)(unint64_t a1, char a2)
{
  id v4 = objc_msgSend(self, sel_callStackSymbols);
  uint64_t v5 = sub_22F223CB8();

  if (a2)
  {
    unint64_t v6 = &qword_268694D00;
    __swift_instantiateConcreteTypeFromMangledName(&qword_268694D00);
    unint64_t v7 = (unint64_t *)&unk_268694D08;
    goto LABEL_6;
  }
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(v5 + 16) >= a1)
  {
    unint64_t v6 = &qword_268694D10;
    __swift_instantiateConcreteTypeFromMangledName(&qword_268694D10);
    unint64_t v7 = (unint64_t *)&unk_268694D18;
LABEL_6:
    sub_22F196514(v7, v6);
    sub_22F223A18();
    swift_bridgeObjectRelease();
    return;
  }
  __break(1u);
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_22F196514(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *Float.piDiv2.unsafeMutableAddressor()
{
  return &static Float.piDiv2;
}

void *Float.degreesToRadians.unsafeMutableAddressor()
{
  return &static Float.degreesToRadians;
}

void *Float.pi2.unsafeMutableAddressor()
{
  return &static Float.pi2;
}

float static Float.pi2.getter()
{
  return 6.2832;
}

float static Float.piDiv2.getter()
{
  return 1.5708;
}

float static Float.degreesToRadians.getter()
{
  return 0.017453;
}

void *Float.radiansToDegrees.unsafeMutableAddressor()
{
  return &static Float.radiansToDegrees;
}

float static Float.radiansToDegrees.getter()
{
  return 57.296;
}

void *Float.completeAngle.unsafeMutableAddressor()
{
  return &static Float.completeAngle;
}

float static Float.completeAngle.getter()
{
  return 360.0;
}

void *Float.zero.unsafeMutableAddressor()
{
  return &static Float.zero;
}

double static Float.zero.getter()
{
  return 0.0;
}

float static Float.radians(fromDegrees:)(float a1)
{
  return a1 * 0.017453;
}

float static Float.degrees(fromRadians:)(float a1)
{
  return a1 * 57.296;
}

float static Float.normalize(degrees:)(float a1)
{
  return a1 / 360.0;
}

float static Float.lerp(value1:value2:t:)(float a1, float a2, float a3)
{
  return (float)((float)(a2 - a1) * a3) + a1;
}

float static Float.random()()
{
  return (float)arc4random() * 2.3283e-10;
}

Swift::Void __swiftcall Float.lerp(to:t:)(Swift::Float to, Swift::Float t)
{
  *unint64_t v2 = *v2 + (float)((float)(to - *v2) * t);
}

float64_t SIMD2<>.init(_:)(float64x2_t a1, float64_t a2)
{
  a1.f64[1] = a2;
  *(float32x2_t *)&a1.f64[0] = vcvt_f32_f64(a1);
  return a1.f64[0];
}

float32x2_t sub_22F196690(uint64_t a1, double a2, double a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    id v4 = (float32x2_t *)(a1 + 32);
    float32x2_t v5 = 0;
    uint64_t v6 = *(void *)(a1 + 16);
    do
    {
      float32x2_t v7 = *v4++;
      HIDWORD(a3) = v7.i32[1];
      float32x2_t v5 = vadd_f32(v5, v7);
      --v6;
    }
    while (v6);
  }
  else
  {
    float32x2_t v5 = 0;
  }
  *(float *)&a3 = (float)v3;
  return vdiv_f32(v5, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a3, 0));
}

long long *SIMD3<>.forward.unsafeMutableAddressor()
{
  if (qword_2686943C8 != -1) {
    swift_once();
  }
  return &static SIMD3<>.forward;
}

float32x2_t static SIMD3<>.* infix(_:_:)(float32x2_t a1, float a2)
{
  return vmul_n_f32(a1, a2);
}

float32x2_t static SIMD3<>./ infix(_:_:)(float32x2_t a1, int32x2_t a2)
{
  return vdiv_f32(a1, (float32x2_t)vdup_lane_s32(a2, 0));
}

double sub_22F196754()
{
  double result = 0.00781250185;
  static SIMD3<>.one = xmmword_22F227580;
  return result;
}

long long *SIMD3<>.one.unsafeMutableAddressor()
{
  if (qword_2686943B8 != -1) {
    swift_once();
  }
  return &static SIMD3<>.one;
}

double static SIMD3<>.one.getter()
{
  *(void *)&double result = sub_22F196998(&qword_2686943B8, (uint64_t)&static SIMD3<>.one).n128_u64[0];
  return result;
}

void sub_22F1967D8()
{
  static SIMD3<>.zero = 0uLL;
}

long long *SIMD3<>.zero.unsafeMutableAddressor()
{
  if (qword_2686943C0 != -1) {
    swift_once();
  }
  return &static SIMD3<>.zero;
}

double static SIMD3<>.zero.getter()
{
  *(void *)&double result = sub_22F196998(&qword_2686943C0, (uint64_t)&static SIMD3<>.zero).n128_u64[0];
  return result;
}

double sub_22F196858()
{
  double result = 0.0;
  static SIMD3<>.forwarCGFloat d = xmmword_22F227080;
  return result;
}

double static SIMD3<>.forward.getter()
{
  *(void *)&double result = sub_22F196998(&qword_2686943C8, (uint64_t)&static SIMD3<>.forward).n128_u64[0];
  return result;
}

double sub_22F196890()
{
  double result = 0.0078125;
  static SIMD3<>.up = xmmword_22F227590;
  return result;
}

long long *SIMD3<>.up.unsafeMutableAddressor()
{
  if (qword_2686943D0 != -1) {
    swift_once();
  }
  return &static SIMD3<>.up;
}

double static SIMD3<>.up.getter()
{
  *(void *)&double result = sub_22F196998(&qword_2686943D0, (uint64_t)&static SIMD3<>.up).n128_u64[0];
  return result;
}

double sub_22F196914()
{
  *(void *)&double result = 1065353216;
  static SIMD3<>.right = xmmword_22F2275A0;
  return result;
}

long long *SIMD3<>.right.unsafeMutableAddressor()
{
  if (qword_2686943D8 != -1) {
    swift_once();
  }
  return &static SIMD3<>.right;
}

double static SIMD3<>.right.getter()
{
  *(void *)&double result = sub_22F196998(&qword_2686943D8, (uint64_t)&static SIMD3<>.right).n128_u64[0];
  return result;
}

__n128 sub_22F196998(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  return *(__n128 *)a2;
}

double SIMD3<>.init(xz:)(int32x4_t a1)
{
  *(void *)&double result = vtrn2q_s32(vzip1q_s32((int32x4_t)0, a1), (int32x4_t)0).u64[0];
  return result;
}

float SIMD3<>.lerp(to:t:)(float32x4_t a1, float a2)
{
  float32x4_t v3 = vsubq_f32(a1, *v2);
  *(float32x2_t *)v4.f32 = vadd_f32(*(float32x2_t *)v2->f32, vmul_n_f32(*(float32x2_t *)v3.f32, a2));
  float result = COERCE_FLOAT(v2->i64[1]) + vmuls_lane_f32(a2, v3, 2);
  v4.i64[1] = __PAIR64__(vextq_s8(*(int8x16_t *)v2, *(int8x16_t *)v2, 8uLL).u32[1], LODWORD(result));
  *unint64_t v2 = v4;
  return result;
}

int32x2_t SIMD3<>.xz.getter(int8x16_t a1)
{
  return vzip1_s32(*(int32x2_t *)a1.i8, (int32x2_t)*(_OWORD *)&vextq_s8(a1, a1, 8uLL));
}

float SIMD3<>.lengthXZ.getter(float32x4_t a1)
{
  float32x4_t v1 = vmulq_f32(a1, a1);
  return sqrtf(vaddq_f32(v1, (float32x4_t)vdupq_laneq_s32((int32x4_t)v1, 2)).f32[0]);
}

double SIMD3<>.lengthXZSquared.getter(float32x4_t a1)
{
  float32x4_t v1 = vmulq_f32(a1, a1);
  *(void *)&double result = vaddq_f32(v1, (float32x4_t)vdupq_laneq_s32((int32x4_t)v1, 2)).u64[0];
  return result;
}

double SIMD3<>.applying(_:)(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5)
{
  *(void *)&double result = vaddq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a1, a5.f32[0]), a2, *(float32x2_t *)a5.f32, 1), a3, a5, 2), a4).u64[0];
  return result;
}

float static SIMD3<>.*= infix(_:_:)(float32x2_t *a1, float32x4_t a2)
{
  *(float32x2_t *)&long long v2 = vmul_f32(*(float32x2_t *)a2.f32, *a1);
  float result = vmuls_lane_f32(a1[1].f32[0], a2, 2);
  *((void *)&v2 + 1) = LODWORD(result);
  *(_OWORD *)a1->f32 = v2;
  return result;
}

float32x2_t static SIMD3<>./ infix(_:_:)(uint64_t a1, float32x2_t a2, double a3, double a4)
{
  *(float *)&a4 = (float)a1;
  return vdiv_f32(a2, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a4, 0));
}

float static SIMD3<>./= infix(_:_:)(float32x2_t *a1, double a2)
{
  *(float32x2_t *)&long long v2 = vdiv_f32(*a1, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a2, 0));
  float result = a1[1].f32[0] / *(float *)&a2;
  *((void *)&v2 + 1) = LODWORD(result);
  *(_OWORD *)a1->f32 = v2;
  return result;
}

double static SIMD3<>.rotateAboutY(_:center:sin:cos:)(float32x4_t a1, float32x4_t a2, float a3, float a4)
{
  float32x4_t v4 = vsubq_f32(a1, a2);
  *(float *)&double v5 = a2.f32[0] + (float)((float)(a4 * v4.f32[0]) - vmuls_lane_f32(a3, v4, 2));
  HIDWORD(v5) = a1.i32[1];
  return v5;
}

__n64 static SIMD3<>.rotateAboutY(_:center:angle:)(float32x4_t a1, float32x4_t a2, float a3)
{
  float v6 = a2.f32[0];
  unsigned __int32 v7 = a1.u32[1];
  float32x4_t v5 = vsubq_f32(a1, a2);
  __float2 v3 = __sincosf_stret(a3);
  result.n64_f32[0] = v6 + (float)((float)(v3.__cosval * v5.f32[0]) - vmuls_lane_f32(v3.__sinval, v5, 2));
  result.n64_u32[1] = v7;
  return result;
}

float32x2_t static SIMD3<>.dotXZ(_:_:)(float32x4_t a1, float32x4_t a2)
{
  int8x16_t v2 = (int8x16_t)vmulq_f32(a1, a2);
  return vadd_f32(*(float32x2_t *)v2.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL));
}

float32x2_t static SIMD3<>.crossXZ(_:_:)(int8x16_t a1, int8x16_t a2)
{
  v2.i32[0] = vextq_s8(a2, a2, 8uLL).u32[0];
  v2.i32[1] = a2.i32[0];
  float32x2_t v3 = vmul_f32((float32x2_t)vzip1_s32(*(int32x2_t *)a1.i8, (int32x2_t)*(_OWORD *)&vextq_s8(a1, a1, 8uLL)), v2);
  return vsub_f32(v3, (float32x2_t)vdup_lane_s32((int32x2_t)v3, 1));
}

float static SIMD3<>.lengthXZ(_:)(float32x4_t a1)
{
  float32x4_t v1 = vmulq_f32(a1, a1);
  return sqrtf(vaddq_f32(v1, (float32x4_t)vdupq_laneq_s32((int32x4_t)v1, 2)).f32[0]);
}

double static SIMD3<>.lengthXZSquared(_:)(float32x4_t a1)
{
  float32x4_t v1 = vmulq_f32(a1, a1);
  *(void *)&double result = vaddq_f32(v1, (float32x4_t)vdupq_laneq_s32((int32x4_t)v1, 2)).u64[0];
  return result;
}

float static SIMD3<>.distanceXZ(_:_:)(float32x4_t a1, float32x4_t a2)
{
  float32x4_t v2 = vsubq_f32(a2, a1);
  int8x16_t v3 = (int8x16_t)vmulq_f32(v2, v2);
  return sqrtf(vadd_f32(*(float32x2_t *)v3.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL)).f32[0]);
}

float32x2_t static SIMD3<>.distanceXZSquared(_:_:)(float32x4_t a1, float32x4_t a2)
{
  float32x4_t v2 = vsubq_f32(a2, a1);
  int8x16_t v3 = (int8x16_t)vmulq_f32(v2, v2);
  return vadd_f32(*(float32x2_t *)v3.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL));
}

float static SIMD3<>.cosXZ(_:_:)(float32x4_t a1, float32x4_t a2)
{
  return (float)(vmulq_f32(a1, a2).f32[0] + vmuls_lane_f32(a1.f32[2], a2, 2))
       / (float)(sqrtf(vmulq_f32(a1, a1).f32[0] + vmuls_lane_f32(a1.f32[2], a1, 2))
               * sqrtf(vmulq_f32(a2, a2).f32[0] + vmuls_lane_f32(a2.f32[2], a2, 2)));
}

uint64_t static SIMD3<>.== infix(_:_:)(float32x4_t a1, float32x4_t a2)
{
  int16x4_t v2 = vmovn_s32(vceqq_f32(a1, a2));
  if (v2.i16[0] & v2.i16[1]) {
    return v2.i8[4] & 1;
  }
  else {
    return 0;
  }
}

float32x2_t static SIMD3<>.lerp(value1:value2:t:)(float32x4_t a1, float32x4_t a2, float a3)
{
  return vadd_f32(*(float32x2_t *)a1.f32, vmul_n_f32((float32x2_t)*(_OWORD *)&vsubq_f32(a2, a1), a3));
}

BOOL SIMD3<>.isAlmostVertical(withinDegrees:)(float a1, float32x4_t a2)
{
  int32x4_t v3 = (int32x4_t)vmulq_f32(a2, a2);
  v3.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v3, 2), vadd_f32(*(float32x2_t *)v3.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v3.i8, 1))).u32[0];
  float32x2_t v4 = vrsqrte_f32((float32x2_t)v3.u32[0]);
  float32x2_t v5 = vmul_f32(v4, vrsqrts_f32((float32x2_t)v3.u32[0], vmul_f32(v4, v4)));
  float32x4_t v6 = vmulq_f32(vmulq_n_f32(a2, vmul_f32(v5, vrsqrts_f32((float32x2_t)v3.u32[0], vmul_f32(v5, v5))).f32[0]), (float32x4_t)xmmword_22F227590);
  return (float)(acosf(fminf(fmaxf(fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2), vaddq_f32(v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1))).f32[0]), 0.0), 1.0))* 57.296) <= a1;
}

BOOL SIMD3<>.isAlmostHorizontal(withinDegrees:)(float a1, float32x4_t a2)
{
  int32x4_t v2 = (int32x4_t)vmulq_f32(a2, a2);
  v2.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v2, 2), vadd_f32(*(float32x2_t *)v2.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v2.i8, 1))).u32[0];
  float32x2_t v3 = vrsqrte_f32((float32x2_t)v2.u32[0]);
  float32x2_t v4 = vmul_f32(v3, vrsqrts_f32((float32x2_t)v2.u32[0], vmul_f32(v3, v3)));
  float32x4_t v5 = vmulq_f32(vmulq_n_f32(a2, vmul_f32(v4, vrsqrts_f32((float32x2_t)v2.u32[0], vmul_f32(v4, v4))).f32[0]), (float32x4_t)xmmword_22F227590);
  return fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2), vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1))).f32[0]) <= cosf((float)(90.0 - a1)* 0.017453);
}

float32x2_t _ss5SIMD3V17MeasureFoundationSfRszrlE7averageyABySfGSayAEGFZ_0(uint64_t a1, double a2, double a3, double a4)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    float32x4_t v5 = (float *)(a1 + 40);
    *(void *)&long long v6 = 0;
    DWORD2(v6) = 0;
    uint64_t v7 = *(void *)(a1 + 16);
    do
    {
      *(float32x2_t *)&long long v9 = vadd_f32(*(float32x2_t *)&v6, *(float32x2_t *)(v5 - 2));
      float v8 = *v5;
      v5 += 4;
      *((float *)&v9 + 2) = *((float *)&v6 + 2) + v8;
      HIDWORD(v9) = 0;
      long long v6 = v9;
      --v7;
    }
    while (v7);
  }
  else
  {
    *(void *)&long long v9 = 0;
  }
  *(float *)&a4 = (float)v4;
  return vdiv_f32(*(float32x2_t *)&v9, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a4, 0));
}

uint64_t static Double.multiArrayDataType.getter()
{
  return 65600;
}

uint64_t Double.toUInt8.getter(double a1)
{
  if ((~*(void *)&a1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a1 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (a1 < 256.0) {
    return (int)a1;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_22F196EB4()
{
  return 65600;
}

double sub_22F196EC0@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double result = *a1 + *a2;
  *a3 = result;
  return result;
}

double sub_22F196ED4@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double result = *a1 - *a2;
  *a3 = result;
  return result;
}

double sub_22F196EE8@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double result = *a1 * *a2;
  *a3 = result;
  return result;
}

double sub_22F196EFC@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double result = *a1 / *a2;
  *a3 = result;
  return result;
}

double sub_22F196F10@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = (double)a1;
  *a2 = (double)a1;
  return result;
}

uint64_t sub_22F196F1C()
{
  double v1 = *v0;
  if ((~*(void *)v0 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v1 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v1 < 256.0) {
    return (int)v1;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t static Float.multiArrayDataType.getter()
{
  return 65568;
}

uint64_t Float.toUInt8.getter(float a1)
{
  if ((~LODWORD(a1) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a1 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (a1 < 256.0) {
    return (int)a1;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_22F196FAC()
{
  return 65568;
}

float sub_22F196FB8@<S0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float result = *a1 + *a2;
  *a3 = result;
  return result;
}

float sub_22F196FCC@<S0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float result = *a1 - *a2;
  *a3 = result;
  return result;
}

float sub_22F196FE0@<S0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float result = *a1 * *a2;
  *a3 = result;
  return result;
}

float sub_22F196FF4@<S0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float result = *a1 / *a2;
  *a3 = result;
  return result;
}

float sub_22F197008@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float result = (float)a1;
  *a2 = (float)a1;
  return result;
}

uint64_t sub_22F197014()
{
  float v1 = *v0;
  if ((~*(_DWORD *)v0 & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v1 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v1 < 256.0) {
    return (int)v1;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t static Int32.multiArrayDataType.getter()
{
  return 131104;
}

uint64_t Int32.toUInt8.getter(uint64_t result)
{
  if ((result & 0x80000000) != 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (result > 0xFF) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t sub_22F19707C()
{
  return 131104;
}

_DWORD *sub_22F197088@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X1>, _DWORD *a3@<X8>)
{
  if (__OFADD__(*result, *a2)) {
    __break(1u);
  }
  else {
    *a3 = *result + *a2;
  }
  return result;
}

_DWORD *sub_22F1970A4@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X1>, _DWORD *a3@<X8>)
{
  if (__OFSUB__(*result, *a2)) {
    __break(1u);
  }
  else {
    *a3 = *result - *a2;
  }
  return result;
}

int *sub_22F1970C0@<X0>(int *result@<X0>, int *a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t v3 = *result * (uint64_t)*a2;
  if (v3 == (int)v3) {
    *a3 = v3;
  }
  else {
    __break(1u);
  }
  return result;
}

_DWORD *sub_22F1970E0@<X0>(_DWORD *result@<X0>, int *a2@<X1>, int *a3@<X8>)
{
  int v3 = *a2;
  if (*a2)
  {
    if (*result != 0x80000000 || v3 != -1)
    {
      *a3 = *result / v3;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_22F197110@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    *a2 = result;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_22F197138()
{
  uint64_t result = *v0;
  if ((result & 0x80000000) != 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (result > 0xFF) {
LABEL_5:
  }
    __break(1u);
  return result;
}

CGImageRef_optional __swiftcall MLMultiArray.cgImage(min:max:channel:axes:clip:)(Swift::Double min, Swift::Double max, Swift::Int_optional channel, Swift::tuple_Int_Int_Int_optional axes, Swift::Double_optional clip)
{
  return (CGImageRef_optional)sub_22F19C4DC(channel.value, channel.is_nil, axes.value._0, axes.value._1, axes.value._2, axes.is_nil, min, max);
}

unint64_t sub_22F197160(int a1, uint64_t a2, uint64_t a3, char a4, unint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, char a10)
{
  uint64_t v11 = (uint64_t)v10;
  LOBYTE(v12) = a8;
  LOBYTE(v91) = a4;
  id v18 = objc_msgSend(v10, sel_shape);
  int64_t v19 = sub_22F19C77C();
  unint64_t v20 = sub_22F223CB8();

  if (v20 >> 62) {
    goto LABEL_145;
  }
  uint64_t v21 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  swift_bridgeObjectRelease();
  if (v21 <= 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_268694B98);
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_22F227140;
    sub_22F2243F8();
    swift_bridgeObjectRelease();
    unint64_t v95 = 0xD000000000000025;
    unint64_t v96 = 0x800000022F22E630;
    id v23 = objc_msgSend((id)v11, sel_shape);
    uint64_t v24 = sub_22F223CB8();

    MEMORY[0x230FB2730](v24, v19);
    sub_22F223B48();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_22F223B48();
LABEL_5:
    unint64_t v25 = v95;
    unint64_t v26 = v96;
LABEL_20:
    *(void *)(v22 + 56) = MEMORY[0x263F8D310];
    *(void *)(v22 + 32) = v25;
    *(void *)(v22 + 40) = v26;
    sub_22F2247C8();
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v27 = (uint64_t)&unk_2649FF000;
  if ((v12 & 1) == 0)
  {
    if ((a5 & 0x8000000000000000) == 0)
    {
      id v28 = objc_msgSend((id)v11, sel_shape);
      unint64_t v29 = sub_22F223CB8();

      if (v29 >> 62)
      {
LABEL_163:
        swift_bridgeObjectRetain();
        uint64_t v30 = sub_22F2245C8();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v30 = *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      if (v30 > (uint64_t)a5 && (a6 & 0x8000000000000000) == 0)
      {
        id v31 = [(id)v11 *(SEL *)(v27 + 2792)];
        unint64_t v32 = sub_22F223CB8();

        if (v32 >> 62)
        {
LABEL_170:
          swift_bridgeObjectRetain();
          uint64_t v33 = sub_22F2245C8();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v33 = *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        swift_bridgeObjectRelease();
        if (v33 > a6 && (a7 & 0x8000000000000000) == 0)
        {
          id v34 = [(id)v11 *(SEL *)(v27 + 2792)];
          unint64_t v35 = sub_22F223CB8();

          if (v35 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v36 = sub_22F2245C8();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v36 = *(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          swift_bridgeObjectRelease();
          if (v36 > a7) {
            goto LABEL_30;
          }
        }
      }
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_268694B98);
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_22F227140;
    sub_22F2243F8();
    sub_22F223B48();
    __swift_instantiateConcreteTypeFromMangledName(&qword_268694D20);
    sub_22F224508();
    sub_22F223B48();
    id v37 = [(id)v11 *(SEL *)(v27 + 2792)];
    uint64_t v38 = sub_22F223CB8();

    MEMORY[0x230FB2730](v38, v19);
    sub_22F223B48();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v25 = 0;
    unint64_t v26 = 0xE000000000000000;
    goto LABEL_20;
  }
  id v40 = objc_msgSend((id)v11, sel_shape);
  unint64_t v41 = sub_22F223CB8();

  if (!(v41 >> 62))
  {
    uint64_t v42 = *(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_24;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v42 = sub_22F2245C8();
    swift_bridgeObjectRelease();
LABEL_24:
    swift_bridgeObjectRelease();
    a6 = v42 != 2;
    a7 = v42 == 2 ? 1 : 2;
    a5 = v42 == 2 ? -1 : 0;
LABEL_30:
    id v43 = objc_msgSend((id)v11, *(SEL *)(v27 + 2792), v89);
    unint64_t v12 = sub_22F223CB8();

    if ((v12 & 0xC000000000000001) != 0)
    {
LABEL_147:
      id v48 = (id)MEMORY[0x230FB2E90](a6, v12, v44, v45, v46, v47);
    }
    else
    {
      if ((unint64_t)a6 >= *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_149:
        unint64_t v12 = a2;
        id v51 = (id)MEMORY[0x230FB2E90](a7, v27);
        goto LABEL_36;
      }
      id v48 = *(id *)(v12 + 8 * a6 + 32);
    }
    long long v49 = v48;
    swift_bridgeObjectRelease();
    int64_t v94 = (int64_t)objc_msgSend(v49, sel_integerValue);

    id v50 = [(id)v11 *(SEL *)(v27 + 2792)];
    uint64_t v27 = sub_22F223CB8();

    if ((v27 & 0xC000000000000001) != 0) {
      goto LABEL_149;
    }
    if ((unint64_t)a7 >= *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_151:
      id v54 = (id)MEMORY[0x230FB2E90](a6, a2);
      goto LABEL_39;
    }
    unint64_t v12 = a2;
    id v51 = *(id *)(v27 + 8 * a7 + 32);
LABEL_36:
    long long v52 = v51;
    swift_bridgeObjectRelease();
    uint64_t v27 = (uint64_t)objc_msgSend(v52, sel_integerValue);

    id v53 = objc_msgSend((id)v11, sel_strides);
    a2 = sub_22F223CB8();

    if ((a2 & 0xC000000000000001) != 0) {
      goto LABEL_151;
    }
    if ((unint64_t)a6 >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_153:
      id v57 = (id)MEMORY[0x230FB2E90](a7, a6);
      a2 = a3;
      goto LABEL_42;
    }
    id v54 = *(id *)(a2 + 8 * a6 + 32);
LABEL_39:
    long long v55 = v54;
    swift_bridgeObjectRelease();
    uint64_t v93 = (uint64_t)objc_msgSend(v55, sel_integerValue);

    id v56 = objc_msgSend((id)v11, sel_strides);
    a6 = sub_22F223CB8();

    if ((a6 & 0xC000000000000001) != 0) {
      goto LABEL_153;
    }
    a2 = a3;
    if ((unint64_t)a7 >= *(void *)((a6 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_155;
    }
    id v57 = *(id *)(a6 + 8 * a7 + 32);
LABEL_42:
    swift_bridgeObjectRelease();
    a7 = (uint64_t)objc_msgSend(v57, sel_integerValue);

    id v58 = objc_msgSend((id)v11, sel_shape);
    unint64_t v59 = sub_22F223CB8();

    if (!(v59 >> 62))
    {
      uint64_t v60 = *(void *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_44;
    }
LABEL_155:
    swift_bridgeObjectRetain();
    uint64_t v60 = sub_22F2245C8();
    swift_bridgeObjectRelease();
LABEL_44:
    swift_bridgeObjectRelease();
    if (v60 == 2)
    {
      a2 = 0;
      a6 = 1;
      uint64_t v89 = 1;
      uint64_t v91 = 0;
      goto LABEL_65;
    }
    id v61 = objc_msgSend((id)v11, sel_shape);
    a6 = sub_22F223CB8();

    if ((a6 & 0xC000000000000001) != 0)
    {
      id v62 = (id)MEMORY[0x230FB2E90](a5, a6);
    }
    else
    {
      if ((a5 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_166:
        __break(1u);
        goto LABEL_167;
      }
      if (a5 >= *(void *)((a6 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_166;
      }
      id v62 = *(id *)(a6 + 8 * a5 + 32);
    }
    long long v63 = v62;
    swift_bridgeObjectRelease();
    a6 = (uint64_t)objc_msgSend(v63, sel_integerValue);

    if ((v91 & 1) == 0) {
      break;
    }
    if ((unint64_t)(a6 - 3) >= 2)
    {
      if (a6 != 1)
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_268694B98);
        uint64_t v22 = swift_allocObject();
        *(_OWORD *)(v22 + 16) = xmmword_22F227140;
        unint64_t v95 = 0;
        unint64_t v96 = 0xE000000000000000;
        sub_22F2243F8();
        sub_22F223B48();
LABEL_121:
        sub_22F2246D8();
        sub_22F223B48();
        swift_bridgeObjectRelease();
        goto LABEL_5;
      }
      a2 = 0;
      id v64 = objc_msgSend((id)v11, sel_strides, 1);
    }
    else
    {
      uint64_t v90 = a6;
      a2 = 0;
      a6 = 4;
      id v64 = objc_msgSend((id)v11, sel_strides, v90);
    }
LABEL_60:
    id v65 = v64;
    int64_t v19 = sub_22F223CB8();

    if ((v19 & 0xC000000000000001) == 0)
    {
      if ((a5 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_169:
        __break(1u);
        goto LABEL_170;
      }
      if (a5 >= *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_169;
      }
      id v66 = *(id *)(v19 + 8 * a5 + 32);
      goto LABEL_64;
    }
LABEL_167:
    id v66 = (id)MEMORY[0x230FB2E90](a5, v19);
LABEL_64:
    long long v67 = v66;
    swift_bridgeObjectRelease();
    uint64_t v91 = (uint64_t)objc_msgSend(v67, sel_integerValue);

LABEL_65:
    int64_t v19 = v94;
    uint64_t v68 = v94 * v27;
    if ((unsigned __int128)(v94 * (__int128)v27) >> 64 != (v94 * v27) >> 63)
    {
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
LABEL_162:
      __break(1u);
      goto LABEL_163;
    }
    size_t v69 = v68 * a6;
    if ((unsigned __int128)(v68 * (__int128)a6) >> 64 != (v68 * a6) >> 63) {
      goto LABEL_159;
    }
    if ((v69 & 0x8000000000000000) != 0) {
      goto LABEL_160;
    }
    if (v69)
    {
      a5 = sub_22F223D48();
      *(void *)(a5 + 16) = v69;
      memset((void *)(a5 + 32), 255, v69);
    }
    else
    {
      a5 = MEMORY[0x263F8EE78];
    }
    long long v70 = (char *)objc_msgSend( (id) v11, sel_dataPointer);
    if ((unsigned __int128)(a2 * (__int128)v91) >> 64 != (a2 * v91) >> 63) {
      goto LABEL_161;
    }
    if (v94 < 0) {
      goto LABEL_162;
    }
    uint64_t v71 = 0;
    long long v72 = &v70[4 * a2 * v91];
    int v73 = v12 - a1;
    BOOL v74 = __OFSUB__(v12, a1);
    LODWORD(a3) = v74;
    double v75 = *(double *)&a9 * 100.0;
    uint64_t v76 = (uint64_t)(*(double *)&a9 * 100.0);
    unint64_t v44 = 0xFFFFFFFF80000000;
    uint64_t v45 = 0x7FFFFFFFLL;
    uint64_t v46 = 0x80000000;
    uint64_t v47 = 255;
    uint64_t v77 = v89;
    while (1)
    {
      if (v71 == v77)
      {
        __break(1u);
        goto LABEL_147;
      }
      if (v19) {
        break;
      }
LABEL_118:
      ++v71;
      uint64_t v77 = v89;
      if (v71 == v89) {
        return a5;
      }
    }
    if ((v27 & 0x8000000000000000) == 0)
    {
      uint64_t v78 = 0;
      uint64_t v79 = v71 * v91;
      while (v78 != v19)
      {
        if (v27)
        {
          if ((unsigned __int128)(v71 * (__int128)v91) >> 64 != (v71 * v91) >> 63) {
            goto LABEL_139;
          }
          uint64_t v80 = v78 * v93;
          uint64_t v11 = (unsigned __int128)(v78 * (__int128)v93) >> 64;
          if (v11 != (v78 * v93) >> 63) {
            goto LABEL_140;
          }
          uint64_t v11 = v79 + v80;
          if (__OFADD__(v79, v80)) {
            goto LABEL_141;
          }
          uint64_t v81 = v78 * v27;
          if ((unsigned __int128)(v78 * (__int128)v27) >> 64 != (v78 * v27) >> 63) {
            goto LABEL_142;
          }
          if (v74) {
            goto LABEL_143;
          }
          if (!v73) {
            goto LABEL_144;
          }
          int64_t v19 = 0;
          while (1)
          {
            int64_t v82 = v19 * a7;
            unint64_t v12 = (unsigned __int128)(v19 * (__int128)a7) >> 64;
            if (v12 != (v19 * a7) >> 63) {
              break;
            }
            BOOL v83 = __OFADD__(v11, v82);
            uint64_t v84 = v11 + v82;
            if (v83) {
              goto LABEL_123;
            }
            a2 = *(unsigned int *)&v72[4 * v84];
            if ((a10 & 1) == 0)
            {
              uint64_t v85 = 100 * (int)a2;
              if (v85 != (int)v85) {
                goto LABEL_131;
              }
              if ((COERCE_UNSIGNED_INT64(*(double *)&a9 * 100.0) & 0x7FF0000000000000) == 0x7FF0000000000000) {
                goto LABEL_132;
              }
              if (v75 <= -9.22337204e18) {
                goto LABEL_133;
              }
              if (v75 >= 9.22337204e18) {
                goto LABEL_134;
              }
              if (v76 < (uint64_t)0xFFFFFFFF80000000) {
                goto LABEL_135;
              }
              if (v76 > 0x7FFFFFFF) {
                goto LABEL_136;
              }
              if ((int)v85 >= (int)v76) {
                a2 = a2;
              }
              else {
                a2 = 0;
              }
            }
            if (__OFSUB__(a2, a1)) {
              goto LABEL_124;
            }
            LOBYTE(v12) = a2 - a1;
            uint64_t v86 = 255 * ((int)a2 - a1);
            if (v86 != (int)v86) {
              goto LABEL_125;
            }
            if (v86 == 0x80000000 && v73 == -1) {
              goto LABEL_137;
            }
            int v88 = (int)v86 / v73;
            if (v88 >= 255) {
              int v88 = 255;
            }
            unint64_t v12 = v81 + v19;
            if (__OFADD__(v81, v19)) {
              goto LABEL_126;
            }
            a2 = v12 * a6;
            unint64_t v12 = (unsigned __int128)((uint64_t)v12 * (__int128)a6) >> 64;
            if (v12 != a2 >> 63) {
              goto LABEL_127;
            }
            BOOL v83 = __OFADD__(a2, v71);
            a2 += v71;
            if (v83) {
              goto LABEL_128;
            }
            if (a2 < 0) {
              goto LABEL_129;
            }
            unint64_t v12 = *(void *)(a5 + 16);
            if (a2 >= v12) {
              goto LABEL_130;
            }
            ++v19;
            *(unsigned char *)(a5 + 32 + a2) = v88 & ~(v88 >> 31);
            if (v27 == v19) {
              goto LABEL_81;
            }
          }
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
          break;
        }
LABEL_81:
        ++v78;
        int64_t v19 = v94;
        if (v78 == v94) {
          goto LABEL_118;
        }
      }
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      swift_bridgeObjectRetain();
      uint64_t v21 = sub_22F2245C8();
      swift_bridgeObjectRelease();
      goto LABEL_3;
    }
    __break(1u);
  }
  if ((a2 & 0x8000000000000000) == 0 && a6 > a2)
  {
    a6 = 1;
    id v64 = objc_msgSend((id)v11, sel_strides, 1);
    goto LABEL_60;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_268694B98);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_22F227140;
  sub_22F2243F8();
  unint64_t result = swift_bridgeObjectRelease();
  unint64_t v95 = 0xD000000000000025;
  unint64_t v96 = 0x800000022F22E600;
  if (!__OFSUB__(a6, 1)) {
    goto LABEL_121;
  }
  __break(1u);
  return result;
}

uint64_t sub_22F197EA0(uint64_t a1, char a2, unint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, char a8, float a9, float a10)
{
  uint64_t v11 = (uint64_t)v10;
  LOBYTE(v14) = a6;
  id v20 = objc_msgSend(v10, sel_shape);
  int64_t v21 = sub_22F19C77C();
  uint64_t v22 = sub_22F223CB8();

  if ((unint64_t)v22 >> 62)
  {
LABEL_131:
    swift_bridgeObjectRetain();
    uint64_t v23 = sub_22F2245C8();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v23 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v23 <= 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_268694B98);
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_22F227140;
    sub_22F2243F8();
    swift_bridgeObjectRelease();
    unint64_t v91 = 0xD000000000000025;
    unint64_t v92 = 0x800000022F22E630;
    id v25 = objc_msgSend((id)v11, sel_shape);
    uint64_t v26 = sub_22F223CB8();

    MEMORY[0x230FB2730](v26, v21);
    sub_22F223B48();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_22F223B48();
LABEL_5:
    unint64_t v27 = v91;
    unint64_t v28 = v92;
    goto LABEL_20;
  }
  if (v14)
  {
    id v41 = objc_msgSend((id)v11, sel_shape);
    unint64_t v42 = sub_22F223CB8();

    if (!(v42 >> 62))
    {
      uint64_t v43 = *(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_24;
    }
    goto LABEL_143;
  }
  if ((a3 & 0x8000000000000000) != 0) {
    goto LABEL_19;
  }
  id v29 = objc_msgSend((id)v11, sel_shape);
  unint64_t v30 = sub_22F223CB8();

  if (v30 >> 62)
  {
LABEL_149:
    swift_bridgeObjectRetain();
    uint64_t v31 = sub_22F2245C8();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v31 = *(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v31 <= (uint64_t)a3 || a4 < 0) {
    goto LABEL_19;
  }
  id v32 = objc_msgSend((id)v11, sel_shape);
  unint64_t v33 = sub_22F223CB8();

  if (v33 >> 62)
  {
LABEL_156:
    swift_bridgeObjectRetain();
    uint64_t v34 = sub_22F2245C8();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v34 = *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v34 <= a4 || a5 < 0) {
    goto LABEL_19;
  }
  id v35 = objc_msgSend((id)v11, sel_shape);
  unint64_t v36 = sub_22F223CB8();

  if (v36 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v37 = sub_22F2245C8();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v37 = *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v37 <= a5)
  {
LABEL_19:
    __swift_instantiateConcreteTypeFromMangledName(&qword_268694B98);
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_22F227140;
    sub_22F2243F8();
    sub_22F223B48();
    __swift_instantiateConcreteTypeFromMangledName(&qword_268694D20);
    sub_22F224508();
    sub_22F223B48();
    id v38 = objc_msgSend((id)v11, sel_shape);
    uint64_t v39 = sub_22F223CB8();

    MEMORY[0x230FB2730](v39, v21);
    sub_22F223B48();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v27 = 0;
    unint64_t v28 = 0xE000000000000000;
LABEL_20:
    *(void *)(v24 + 56) = MEMORY[0x263F8D310];
    *(void *)(v24 + 32) = v27;
    *(void *)(v24 + 40) = v28;
    sub_22F2247C8();
    swift_bridgeObjectRelease();
    return 0;
  }
  while (1)
  {
    id v44 = objc_msgSend((id)v11, sel_shape);
    uint64_t v14 = sub_22F223CB8();

    if ((v14 & 0xC000000000000001) != 0)
    {
LABEL_133:
      id v46 = (id)MEMORY[0x230FB2E90](a4, v14, v45);
    }
    else
    {
      if ((unint64_t)a4 >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_135:
        id v49 = (id)MEMORY[0x230FB2E90](a5, v14);
        goto LABEL_36;
      }
      id v46 = *(id *)(v14 + 8 * a4 + 32);
    }
    uint64_t v47 = v46;
    swift_bridgeObjectRelease();
    uint64_t v22 = (uint64_t)objc_msgSend(v47, sel_integerValue);

    id v48 = objc_msgSend((id)v11, sel_shape);
    uint64_t v14 = sub_22F223CB8();

    double v87 = *(double *)&a7;
    if ((v14 & 0xC000000000000001) != 0) {
      goto LABEL_135;
    }
    if ((unint64_t)a5 >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_137:
      id v52 = (id)MEMORY[0x230FB2E90](a4, v14);
      goto LABEL_39;
    }
    id v49 = *(id *)(v14 + 8 * a5 + 32);
LABEL_36:
    id v50 = v49;
    swift_bridgeObjectRelease();
    a7 = (uint64_t)objc_msgSend(v50, sel_integerValue);

    id v51 = objc_msgSend((id)v11, sel_strides);
    uint64_t v14 = sub_22F223CB8();

    if ((v14 & 0xC000000000000001) != 0) {
      goto LABEL_137;
    }
    if ((unint64_t)a4 >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_139:
      id v55 = (id)MEMORY[0x230FB2E90](a5, v14);
      goto LABEL_42;
    }
    id v52 = *(id *)(v14 + 8 * a4 + 32);
LABEL_39:
    id v53 = v52;
    swift_bridgeObjectRelease();
    a4 = (uint64_t)objc_msgSend(v53, sel_integerValue);

    id v54 = objc_msgSend((id)v11, sel_strides);
    uint64_t v14 = sub_22F223CB8();

    if ((v14 & 0xC000000000000001) != 0) {
      goto LABEL_139;
    }
    if ((unint64_t)a5 >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_141;
    }
    id v55 = *(id *)(v14 + 8 * a5 + 32);
LABEL_42:
    id v56 = v55;
    swift_bridgeObjectRelease();
    a5 = (uint64_t)objc_msgSend(v56, sel_integerValue);

    id v57 = objc_msgSend((id)v11, sel_shape);
    unint64_t v58 = sub_22F223CB8();

    if (!(v58 >> 62))
    {
      uint64_t v59 = *(void *)((v58 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_44;
    }
LABEL_141:
    swift_bridgeObjectRetain();
    uint64_t v59 = sub_22F2245C8();
    swift_bridgeObjectRelease();
LABEL_44:
    swift_bridgeObjectRelease();
    id v88 = (id)v11;
    if (v59 == 2)
    {
      a1 = 0;
      int64_t v21 = 0;
      uint64_t v14 = 1;
      uint64_t v11 = 1;
      goto LABEL_65;
    }
    id v60 = objc_msgSend((id)v11, sel_shape);
    uint64_t v14 = sub_22F223CB8();

    if ((v14 & 0xC000000000000001) != 0)
    {
      id v61 = (id)MEMORY[0x230FB2E90](a3, v14);
    }
    else
    {
      if ((a3 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_152:
        __break(1u);
        goto LABEL_153;
      }
      if (a3 >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_152;
      }
      id v61 = *(id *)(v14 + 8 * a3 + 32);
    }
    id v62 = v61;
    swift_bridgeObjectRelease();
    uint64_t v11 = (uint64_t)objc_msgSend(v62, sel_integerValue);

    if ((a2 & 1) == 0) {
      break;
    }
    if ((unint64_t)(v11 - 3) >= 2)
    {
      if (v11 != 1)
      {
LABEL_121:
        __swift_instantiateConcreteTypeFromMangledName(&qword_268694B98);
        uint64_t v24 = swift_allocObject();
        *(_OWORD *)(v24 + 16) = xmmword_22F227140;
        unint64_t v91 = 0;
        unint64_t v92 = 0xE000000000000000;
        sub_22F2243F8();
        sub_22F223B48();
LABEL_122:
        sub_22F2246D8();
        sub_22F223B48();
        swift_bridgeObjectRelease();
        goto LABEL_5;
      }
      a1 = 0;
      uint64_t v14 = 1;
    }
    else
    {
      a1 = 0;
      uint64_t v14 = 4;
    }
LABEL_60:
    id v63 = objc_msgSend(v88, sel_strides);
    int64_t v21 = sub_22F223CB8();

    if ((v21 & 0xC000000000000001) == 0)
    {
      if ((a3 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_155:
        __break(1u);
        goto LABEL_156;
      }
      if (a3 >= *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_155;
      }
      id v64 = *(id *)(v21 + 8 * a3 + 32);
      goto LABEL_64;
    }
LABEL_153:
    id v64 = (id)MEMORY[0x230FB2E90](a3, v21);
LABEL_64:
    id v65 = v64;
    swift_bridgeObjectRelease();
    int64_t v21 = (int64_t)objc_msgSend(v65, sel_integerValue);

LABEL_65:
    uint64_t v66 = v22 * a7;
    if ((unsigned __int128)(v22 * (__int128)a7) >> 64 != (v22 * a7) >> 63)
    {
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
      goto LABEL_149;
    }
    size_t v67 = v66 * v14;
    if ((unsigned __int128)(v66 * (__int128)v14) >> 64 != (v66 * v14) >> 63) {
      goto LABEL_145;
    }
    if ((v67 & 0x8000000000000000) != 0) {
      goto LABEL_146;
    }
    if (v67)
    {
      a3 = sub_22F223D48();
      *(void *)(a3 + 16) = v67;
      memset((void *)(a3 + 32), 255, v67);
    }
    else
    {
      a3 = MEMORY[0x263F8EE78];
    }
    uint64_t v68 = (float *)objc_msgSend(v88, sel_dataPointer);
    if ((unsigned __int128)(a1 * (__int128)v21) >> 64 != (a1 * v21) >> 63) {
      goto LABEL_147;
    }
    if (v22 < 0) {
      goto LABEL_148;
    }
    uint64_t v69 = 0;
    v45.n128_f32[0] = a10 - a9;
    double v70 = v87 * 100.0;
    while (1)
    {
      if (v69 == v11)
      {
        __break(1u);
        goto LABEL_133;
      }
      if (v22) {
        break;
      }
LABEL_109:
      if (++v69 == v11) {
        return a3;
      }
    }
    if ((a7 & 0x8000000000000000) == 0)
    {
      uint64_t v71 = 0;
      int64_t v72 = v69 * v21;
      while (1)
      {
        if (v71 == v22) {
          goto LABEL_126;
        }
        if (a7) {
          break;
        }
LABEL_78:
        if (++v71 == v22) {
          goto LABEL_109;
        }
      }
      if ((unsigned __int128)(v69 * (__int128)v21) >> 64 != (v69 * v21) >> 63) {
        goto LABEL_127;
      }
      uint64_t v73 = v71 * a4;
      if ((unsigned __int128)(v71 * (__int128)a4) >> 64 == (v71 * a4) >> 63)
      {
        BOOL v74 = __OFADD__(v72, v73);
        int64_t v75 = v72 + v73;
        if (!v74)
        {
          uint64_t v76 = v71 * a7;
          if ((unsigned __int128)(v71 * (__int128)a7) >> 64 == (v71 * a7) >> 63)
          {
            uint64_t v77 = 0;
            while (1)
            {
              uint64_t v78 = v77 * a5;
              if ((unsigned __int128)(v77 * (__int128)a5) >> 64 != (v77 * a5) >> 63)
              {
                __break(1u);
LABEL_112:
                __break(1u);
LABEL_113:
                __break(1u);
LABEL_114:
                __break(1u);
LABEL_115:
                __break(1u);
LABEL_116:
                __break(1u);
LABEL_117:
                __break(1u);
LABEL_118:
                __break(1u);
LABEL_119:
                __break(1u);
LABEL_120:
                __break(1u);
                goto LABEL_121;
              }
              BOOL v74 = __OFADD__(v75, v78);
              uint64_t v79 = v75 + v78;
              if (v74) {
                goto LABEL_112;
              }
              float v80 = v68[a1 * v21 + v79];
              if ((a8 & 1) == 0)
              {
                if ((COERCE_UNSIGNED_INT64(v87 * 100.0) & 0x7FF0000000000000) == 0x7FF0000000000000)
                {
                  __break(1u);
LABEL_124:
                  __break(1u);
LABEL_125:
                  __break(1u);
LABEL_126:
                  __break(1u);
LABEL_127:
                  __break(1u);
                  goto LABEL_128;
                }
                if (v70 <= -9.22337204e18) {
                  goto LABEL_124;
                }
                if (v70 >= 9.22337204e18) {
                  goto LABEL_125;
                }
                if ((float)(v80 * 100.0) < (float)(uint64_t)(v87 * 100.0)) {
                  float v80 = 0.0;
                }
              }
              float v81 = 255.0;
              float v82 = (float)((float)(v80 - a9) * 255.0) / v45.n128_f32[0];
              if (v82 <= 255.0) {
                float v81 = v82;
              }
              if (v82 >= 0.0) {
                float v83 = v81;
              }
              else {
                float v83 = 0.0;
              }
              if ((~LODWORD(v83) & 0x7F800000) == 0) {
                goto LABEL_113;
              }
              if (v83 <= -1.0) {
                goto LABEL_114;
              }
              if (v83 >= 256.0) {
                goto LABEL_115;
              }
              uint64_t v84 = v76 + v77;
              if (__OFADD__(v76, v77)) {
                goto LABEL_116;
              }
              uint64_t v85 = v84 * v14;
              if ((unsigned __int128)(v84 * (__int128)v14) >> 64 != (v84 * v14) >> 63) {
                goto LABEL_117;
              }
              BOOL v74 = __OFADD__(v85, v69);
              unint64_t v86 = v85 + v69;
              if (v74) {
                goto LABEL_118;
              }
              if ((v86 & 0x8000000000000000) != 0) {
                goto LABEL_119;
              }
              if (v86 >= *(void *)(a3 + 16)) {
                goto LABEL_120;
              }
              ++v77;
              *(unsigned char *)(a3 + 32 + v86) = (int)v83;
              if (a7 == v77) {
                goto LABEL_78;
              }
            }
          }
          goto LABEL_130;
        }
      }
      else
      {
LABEL_128:
        __break(1u);
      }
      __break(1u);
LABEL_130:
      __break(1u);
      goto LABEL_131;
    }
    __break(1u);
LABEL_143:
    swift_bridgeObjectRetain();
    uint64_t v43 = sub_22F2245C8();
    swift_bridgeObjectRelease();
LABEL_24:
    swift_bridgeObjectRelease();
    a4 = v43 != 2;
    if (v43 == 2) {
      a5 = 1;
    }
    else {
      a5 = 2;
    }
    if (v43 == 2) {
      a3 = -1;
    }
    else {
      a3 = 0;
    }
  }
  if ((a1 & 0x8000000000000000) == 0 && v11 > a1)
  {
    uint64_t v14 = 1;
    uint64_t v11 = 1;
    goto LABEL_60;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_268694B98);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_22F227140;
  sub_22F2243F8();
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v91 = 0xD000000000000025;
  unint64_t v92 = 0x800000022F22E600;
  if (!__OFSUB__(v11, 1)) {
    goto LABEL_122;
  }
  __break(1u);
  return result;
}

uint64_t sub_22F198BB0(uint64_t a1, char a2, unint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, char a8, double a9, double a10)
{
  uint64_t v11 = (uint64_t)v10;
  LOBYTE(v14) = a6;
  id v20 = objc_msgSend(v10, sel_shape);
  int64_t v21 = sub_22F19C77C();
  uint64_t v22 = sub_22F223CB8();

  if ((unint64_t)v22 >> 62)
  {
LABEL_131:
    swift_bridgeObjectRetain();
    uint64_t v23 = sub_22F2245C8();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v23 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v23 <= 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_268694B98);
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_22F227140;
    sub_22F2243F8();
    swift_bridgeObjectRelease();
    unint64_t v95 = 0xD000000000000025;
    unint64_t v96 = 0x800000022F22E630;
    id v25 = objc_msgSend((id)v11, sel_shape);
    uint64_t v26 = sub_22F223CB8();

    MEMORY[0x230FB2730](v26, v21);
    sub_22F223B48();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_22F223B48();
LABEL_5:
    unint64_t v27 = v95;
    unint64_t v28 = v96;
    goto LABEL_20;
  }
  if (v14)
  {
    id v41 = objc_msgSend((id)v11, sel_shape);
    unint64_t v42 = sub_22F223CB8();

    if (!(v42 >> 62))
    {
      uint64_t v43 = *(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_24;
    }
    goto LABEL_143;
  }
  if ((a3 & 0x8000000000000000) != 0) {
    goto LABEL_19;
  }
  id v29 = objc_msgSend((id)v11, sel_shape);
  unint64_t v30 = sub_22F223CB8();

  if (v30 >> 62)
  {
LABEL_149:
    swift_bridgeObjectRetain();
    uint64_t v31 = sub_22F2245C8();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v31 = *(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v31 <= (uint64_t)a3 || a4 < 0) {
    goto LABEL_19;
  }
  id v32 = objc_msgSend((id)v11, sel_shape);
  unint64_t v33 = sub_22F223CB8();

  if (v33 >> 62)
  {
LABEL_156:
    swift_bridgeObjectRetain();
    uint64_t v34 = sub_22F2245C8();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v34 = *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v34 <= a4 || a5 < 0) {
    goto LABEL_19;
  }
  id v35 = objc_msgSend((id)v11, sel_shape);
  unint64_t v36 = sub_22F223CB8();

  if (v36 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v37 = sub_22F2245C8();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v37 = *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v37 <= a5)
  {
LABEL_19:
    __swift_instantiateConcreteTypeFromMangledName(&qword_268694B98);
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_22F227140;
    sub_22F2243F8();
    sub_22F223B48();
    __swift_instantiateConcreteTypeFromMangledName(&qword_268694D20);
    sub_22F224508();
    sub_22F223B48();
    id v38 = objc_msgSend((id)v11, sel_shape);
    uint64_t v39 = sub_22F223CB8();

    MEMORY[0x230FB2730](v39, v21);
    sub_22F223B48();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v27 = 0;
    unint64_t v28 = 0xE000000000000000;
LABEL_20:
    *(void *)(v24 + 56) = MEMORY[0x263F8D310];
    *(void *)(v24 + 32) = v27;
    *(void *)(v24 + 40) = v28;
    sub_22F2247C8();
    swift_bridgeObjectRelease();
    return 0;
  }
  while (1)
  {
    id v44 = objc_msgSend((id)v11, sel_shape);
    uint64_t v14 = sub_22F223CB8();

    if ((v14 & 0xC000000000000001) != 0)
    {
LABEL_133:
      id v50 = (id)MEMORY[0x230FB2E90](a4, v14, v45, v46, v47, v48, v49);
    }
    else
    {
      if ((unint64_t)a4 >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_135:
        id v53 = (id)MEMORY[0x230FB2E90](a5, v14);
        goto LABEL_36;
      }
      id v50 = *(id *)(v14 + 8 * a4 + 32);
    }
    id v51 = v50;
    swift_bridgeObjectRelease();
    uint64_t v22 = (uint64_t)objc_msgSend(v51, sel_integerValue);

    id v52 = objc_msgSend((id)v11, sel_shape);
    uint64_t v14 = sub_22F223CB8();

    double v91 = *(double *)&a7;
    if ((v14 & 0xC000000000000001) != 0) {
      goto LABEL_135;
    }
    if ((unint64_t)a5 >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_137:
      id v56 = (id)MEMORY[0x230FB2E90](a4, v14);
      goto LABEL_39;
    }
    id v53 = *(id *)(v14 + 8 * a5 + 32);
LABEL_36:
    id v54 = v53;
    swift_bridgeObjectRelease();
    a7 = (uint64_t)objc_msgSend(v54, sel_integerValue);

    id v55 = objc_msgSend((id)v11, sel_strides);
    uint64_t v14 = sub_22F223CB8();

    if ((v14 & 0xC000000000000001) != 0) {
      goto LABEL_137;
    }
    if ((unint64_t)a4 >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_139:
      id v59 = (id)MEMORY[0x230FB2E90](a5, v14);
      goto LABEL_42;
    }
    id v56 = *(id *)(v14 + 8 * a4 + 32);
LABEL_39:
    id v57 = v56;
    swift_bridgeObjectRelease();
    a4 = (uint64_t)objc_msgSend(v57, sel_integerValue);

    id v58 = objc_msgSend((id)v11, sel_strides);
    uint64_t v14 = sub_22F223CB8();

    if ((v14 & 0xC000000000000001) != 0) {
      goto LABEL_139;
    }
    if ((unint64_t)a5 >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_141;
    }
    id v59 = *(id *)(v14 + 8 * a5 + 32);
LABEL_42:
    id v60 = v59;
    swift_bridgeObjectRelease();
    a5 = (uint64_t)objc_msgSend(v60, sel_integerValue);

    id v61 = objc_msgSend((id)v11, sel_shape);
    unint64_t v62 = sub_22F223CB8();

    if (!(v62 >> 62))
    {
      uint64_t v63 = *(void *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_44;
    }
LABEL_141:
    swift_bridgeObjectRetain();
    uint64_t v63 = sub_22F2245C8();
    swift_bridgeObjectRelease();
LABEL_44:
    swift_bridgeObjectRelease();
    id v92 = (id)v11;
    if (v63 == 2)
    {
      a1 = 0;
      int64_t v21 = 0;
      uint64_t v14 = 1;
      uint64_t v11 = 1;
      goto LABEL_65;
    }
    id v64 = objc_msgSend((id)v11, sel_shape);
    uint64_t v14 = sub_22F223CB8();

    if ((v14 & 0xC000000000000001) != 0)
    {
      id v65 = (id)MEMORY[0x230FB2E90](a3, v14);
    }
    else
    {
      if ((a3 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_152:
        __break(1u);
        goto LABEL_153;
      }
      if (a3 >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_152;
      }
      id v65 = *(id *)(v14 + 8 * a3 + 32);
    }
    uint64_t v66 = v65;
    swift_bridgeObjectRelease();
    uint64_t v11 = (uint64_t)objc_msgSend(v66, sel_integerValue);

    if ((a2 & 1) == 0) {
      break;
    }
    if ((unint64_t)(v11 - 3) >= 2)
    {
      if (v11 != 1)
      {
LABEL_121:
        __swift_instantiateConcreteTypeFromMangledName(&qword_268694B98);
        uint64_t v24 = swift_allocObject();
        *(_OWORD *)(v24 + 16) = xmmword_22F227140;
        unint64_t v95 = 0;
        unint64_t v96 = 0xE000000000000000;
        sub_22F2243F8();
        sub_22F223B48();
LABEL_122:
        sub_22F2246D8();
        sub_22F223B48();
        swift_bridgeObjectRelease();
        goto LABEL_5;
      }
      a1 = 0;
      uint64_t v14 = 1;
    }
    else
    {
      a1 = 0;
      uint64_t v14 = 4;
    }
LABEL_60:
    id v67 = objc_msgSend(v92, sel_strides);
    int64_t v21 = sub_22F223CB8();

    if ((v21 & 0xC000000000000001) == 0)
    {
      if ((a3 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_155:
        __break(1u);
        goto LABEL_156;
      }
      if (a3 >= *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_155;
      }
      id v68 = *(id *)(v21 + 8 * a3 + 32);
      goto LABEL_64;
    }
LABEL_153:
    id v68 = (id)MEMORY[0x230FB2E90](a3, v21);
LABEL_64:
    uint64_t v69 = v68;
    swift_bridgeObjectRelease();
    int64_t v21 = (int64_t)objc_msgSend(v69, sel_integerValue);

LABEL_65:
    uint64_t v70 = v22 * a7;
    if ((unsigned __int128)(v22 * (__int128)a7) >> 64 != (v22 * a7) >> 63)
    {
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
      goto LABEL_149;
    }
    size_t v71 = v70 * v14;
    if ((unsigned __int128)(v70 * (__int128)v14) >> 64 != (v70 * v14) >> 63) {
      goto LABEL_145;
    }
    if ((v71 & 0x8000000000000000) != 0) {
      goto LABEL_146;
    }
    if (v71)
    {
      a3 = sub_22F223D48();
      *(void *)(a3 + 16) = v71;
      memset((void *)(a3 + 32), 255, v71);
    }
    else
    {
      a3 = MEMORY[0x263F8EE78];
    }
    int64_t v72 = (char *)objc_msgSend(v92, sel_dataPointer);
    if ((unsigned __int128)(a1 * (__int128)v21) >> 64 != (a1 * v21) >> 63) {
      goto LABEL_147;
    }
    if (v22 < 0) {
      goto LABEL_148;
    }
    uint64_t v73 = 0;
    BOOL v74 = &v72[8 * a1 * v21];
    v45.n128_f64[0] = a10 - a9;
    v46.n128_f64[0] = v91 * 100.0;
    v47.n128_f64[0] = (double)(uint64_t)(v91 * 100.0);
    v48.n128_u64[0] = 0;
    v49.n128_u64[0] = -1.0;
    while (1)
    {
      if (v73 == v11)
      {
        __break(1u);
        goto LABEL_133;
      }
      if (v22) {
        break;
      }
LABEL_109:
      if (++v73 == v11) {
        return a3;
      }
    }
    if ((a7 & 0x8000000000000000) == 0)
    {
      uint64_t v75 = 0;
      int64_t v76 = v73 * v21;
      while (1)
      {
        if (v75 == v22) {
          goto LABEL_126;
        }
        if (a7) {
          break;
        }
LABEL_78:
        if (++v75 == v22) {
          goto LABEL_109;
        }
      }
      if ((unsigned __int128)(v73 * (__int128)v21) >> 64 != (v73 * v21) >> 63) {
        goto LABEL_127;
      }
      uint64_t v77 = v75 * a4;
      if ((unsigned __int128)(v75 * (__int128)a4) >> 64 == (v75 * a4) >> 63)
      {
        BOOL v78 = __OFADD__(v76, v77);
        int64_t v79 = v76 + v77;
        if (!v78)
        {
          uint64_t v80 = v75 * a7;
          if ((unsigned __int128)(v75 * (__int128)a7) >> 64 == (v75 * a7) >> 63)
          {
            uint64_t v81 = 0;
            while (1)
            {
              uint64_t v82 = v81 * a5;
              if ((unsigned __int128)(v81 * (__int128)a5) >> 64 != (v81 * a5) >> 63)
              {
                __break(1u);
LABEL_112:
                __break(1u);
LABEL_113:
                __break(1u);
LABEL_114:
                __break(1u);
LABEL_115:
                __break(1u);
LABEL_116:
                __break(1u);
LABEL_117:
                __break(1u);
LABEL_118:
                __break(1u);
LABEL_119:
                __break(1u);
LABEL_120:
                __break(1u);
                goto LABEL_121;
              }
              BOOL v78 = __OFADD__(v79, v82);
              uint64_t v83 = v79 + v82;
              if (v78) {
                goto LABEL_112;
              }
              double v84 = *(double *)&v74[8 * v83];
              if ((a8 & 1) == 0)
              {
                if ((COERCE_UNSIGNED_INT64(v91 * 100.0) & 0x7FF0000000000000) == 0x7FF0000000000000)
                {
                  __break(1u);
LABEL_124:
                  __break(1u);
LABEL_125:
                  __break(1u);
LABEL_126:
                  __break(1u);
LABEL_127:
                  __break(1u);
                  goto LABEL_128;
                }
                if (v46.n128_f64[0] <= -9.22337204e18) {
                  goto LABEL_124;
                }
                if (v46.n128_f64[0] >= 9.22337204e18) {
                  goto LABEL_125;
                }
                if (v84 * 100.0 < v47.n128_f64[0]) {
                  double v84 = 0.0;
                }
              }
              double v85 = 255.0;
              double v86 = (v84 - a9) * 255.0 / v45.n128_f64[0];
              if (v86 <= 255.0) {
                double v85 = v86;
              }
              if (v86 >= 0.0) {
                double v87 = v85;
              }
              else {
                double v87 = 0.0;
              }
              if ((~*(void *)&v87 & 0x7FF0000000000000) == 0) {
                goto LABEL_113;
              }
              if (v87 <= -1.0) {
                goto LABEL_114;
              }
              if (v87 >= 256.0) {
                goto LABEL_115;
              }
              uint64_t v88 = v80 + v81;
              if (__OFADD__(v80, v81)) {
                goto LABEL_116;
              }
              uint64_t v89 = v88 * v14;
              if ((unsigned __int128)(v88 * (__int128)v14) >> 64 != (v88 * v14) >> 63) {
                goto LABEL_117;
              }
              BOOL v78 = __OFADD__(v89, v73);
              unint64_t v90 = v89 + v73;
              if (v78) {
                goto LABEL_118;
              }
              if ((v90 & 0x8000000000000000) != 0) {
                goto LABEL_119;
              }
              if (v90 >= *(void *)(a3 + 16)) {
                goto LABEL_120;
              }
              ++v81;
              *(unsigned char *)(a3 + 32 + v90) = (int)v87;
              if (a7 == v81) {
                goto LABEL_78;
              }
            }
          }
          goto LABEL_130;
        }
      }
      else
      {
LABEL_128:
        __break(1u);
      }
      __break(1u);
LABEL_130:
      __break(1u);
      goto LABEL_131;
    }
    __break(1u);
LABEL_143:
    swift_bridgeObjectRetain();
    uint64_t v43 = sub_22F2245C8();
    swift_bridgeObjectRelease();
LABEL_24:
    swift_bridgeObjectRelease();
    a4 = v43 != 2;
    if (v43 == 2) {
      a5 = 1;
    }
    else {
      a5 = 2;
    }
    if (v43 == 2) {
      a3 = -1;
    }
    else {
      a3 = 0;
    }
  }
  if ((a1 & 0x8000000000000000) == 0 && v11 > a1)
  {
    uint64_t v14 = 1;
    uint64_t v11 = 1;
    goto LABEL_60;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_268694B98);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_22F227140;
  sub_22F2243F8();
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v95 = 0xD000000000000025;
  unint64_t v96 = 0x800000022F22E600;
  if (!__OFSUB__(v11, 1)) {
    goto LABEL_122;
  }
  __break(1u);
  return result;
}

uint64_t MLMultiArray.toRawBytes<A>(min:max:channel:axes:clip:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, unint64_t a6, unint64_t a7, char a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, double a17, unsigned __int8 a18, SEL *a19, uint64_t a20)
{
  uint64_t v13 = v12;
  LOBYTE(v14) = a8;
  LODWORD(v143) = a4;
  uint64_t v141 = a3;
  uint64_t v127 = a2;
  uint64_t v126 = a1;
  id v18 = a19;
  uint64_t v142 = (uint64_t)*(a19 - 1);
  uint64_t v19 = MEMORY[0x270FA5388](a1);
  uint64_t v125 = (char *)&v103 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v124 = (char *)&v103 - v22;
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  v140 = (char *)&v103 - v24;
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  uint64_t v144 = (uint64_t)&v103 - v26;
  MEMORY[0x270FA5388](v25);
  v136 = (char *)&v103 - v27;
  id v28 = objc_msgSend(v12, sel_shape);
  unint64_t v29 = sub_22F19C77C();
  unint64_t v30 = sub_22F223CB8();

  if (v30 >> 62)
  {
LABEL_119:
    swift_bridgeObjectRetain();
    uint64_t v31 = sub_22F2245C8();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v31 = *(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v31 <= 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_268694B98);
    uint64_t v32 = swift_allocObject();
    *(_OWORD *)(v32 + 16) = xmmword_22F227140;
    unint64_t v145 = 0;
    unint64_t v146 = 0xE000000000000000;
    sub_22F2243F8();
    swift_bridgeObjectRelease();
    unint64_t v145 = 0xD000000000000025;
    unint64_t v146 = 0x800000022F22E630;
    id v33 = objc_msgSend(v13, sel_shape);
    uint64_t v34 = sub_22F223CB8();

    MEMORY[0x230FB2730](v34, v29);
    sub_22F223B48();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_22F223B48();
LABEL_5:
    unint64_t v35 = v145;
    unint64_t v36 = v146;
    *(void *)(v32 + 56) = MEMORY[0x263F8D310];
    *(void *)(v32 + 32) = v35;
    *(void *)(v32 + 40) = v36;
    sub_22F2247C8();
    goto LABEL_20;
  }
  if ((v14 & 1) == 0)
  {
    if ((a5 & 0x8000000000000000) == 0)
    {
      id v37 = objc_msgSend(v13, sel_shape);
      unint64_t v38 = sub_22F223CB8();

      if (!(v38 >> 62))
      {
        uint64_t v39 = *(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_10;
      }
      goto LABEL_137;
    }
LABEL_19:
    __swift_instantiateConcreteTypeFromMangledName(&qword_268694B98);
    uint64_t v46 = swift_allocObject();
    *(_OWORD *)(v46 + 16) = xmmword_22F227140;
    unint64_t v145 = 0;
    unint64_t v146 = 0xE000000000000000;
    sub_22F2243F8();
    uint64_t v148 = v145;
    unint64_t v149 = v146;
    sub_22F223B48();
    unint64_t v145 = a5;
    unint64_t v146 = a6;
    unint64_t v147 = a7;
    __swift_instantiateConcreteTypeFromMangledName(&qword_268694D20);
    sub_22F224508();
    sub_22F223B48();
    id v47 = objc_msgSend(v13, sel_shape);
    uint64_t v48 = sub_22F223CB8();

    MEMORY[0x230FB2730](v48, v29);
    sub_22F223B48();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v49 = v148;
    unint64_t v50 = v149;
    *(void *)(v46 + 56) = MEMORY[0x263F8D310];
    *(void *)(v46 + 32) = v49;
    *(void *)(v46 + 40) = v50;
    sub_22F2247C8();
LABEL_20:
    swift_bridgeObjectRelease();
    return 0;
  }
  id v52 = objc_msgSend(v13, sel_shape);
  unint64_t v53 = sub_22F223CB8();

  if (v53 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v54 = sub_22F2245C8();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v54 = *(void *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  a6 = v54 != 2;
  if (v54 == 2) {
    a7 = 1;
  }
  else {
    a7 = 2;
  }
  if (v54 == 2) {
    a5 = -1;
  }
  else {
    a5 = 0;
  }
LABEL_30:
  id v55 = objc_msgSend(v13, sel_shape, v103);
  uint64_t v14 = sub_22F223CB8();

  if ((v14 & 0xC000000000000001) == 0)
  {
    if (a6 < *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      id v56 = *(id *)(v14 + 8 * a6 + 32);
      goto LABEL_33;
    }
    __break(1u);
LABEL_124:
    id v59 = (id)MEMORY[0x230FB2E90](a7, v14);
    goto LABEL_36;
  }
  while (1)
  {
    id v56 = (id)MEMORY[0x230FB2E90](a6, v14);
LABEL_33:
    id v57 = v56;
    swift_bridgeObjectRelease();
    uint64_t v109 = (uint64_t)objc_msgSend(v57, sel_integerValue);

    id v58 = objc_msgSend(v13, sel_shape);
    uint64_t v14 = sub_22F223CB8();

    id v103 = v18;
    if ((v14 & 0xC000000000000001) != 0) {
      goto LABEL_124;
    }
    if (a7 < *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      id v59 = *(id *)(v14 + 8 * a7 + 32);
LABEL_36:
      unint64_t v60 = (unint64_t)v59;
      swift_bridgeObjectRelease();
      int64_t v122 = (int64_t)objc_msgSend((id)v60, sel_integerValue);

      id v18 = (SEL *)&unk_2649FF000;
      id v61 = objc_msgSend(v13, sel_strides);
      uint64_t v14 = sub_22F223CB8();

      if ((v14 & 0xC000000000000001) != 0) {
        goto LABEL_126;
      }
      if (a6 < *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        unint64_t v60 = a5;
        id v62 = *(id *)(v14 + 8 * a6 + 32);
        goto LABEL_39;
      }
      __break(1u);
LABEL_128:
      id v64 = (id)MEMORY[0x230FB2E90](a7, a6);
LABEL_42:
      id v65 = v64;
      swift_bridgeObjectRelease();
      uint64_t v121 = (uint64_t)[v65 *(SEL *)(a5 + 1784)];

      id v66 = objc_msgSend(v13, sel_shape);
      unint64_t v67 = sub_22F223CB8();

      if (!(v67 >> 62))
      {
        uint64_t v68 = *(void *)((v67 & 0xFFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_44;
      }
      goto LABEL_130;
    }
    __break(1u);
LABEL_126:
    id v62 = (id)MEMORY[0x230FB2E90](a6, v14);
    unint64_t v60 = a5;
LABEL_39:
    swift_bridgeObjectRelease();
    a5 = (uint64_t)&unk_2649FF000;
    uint64_t v106 = (uint64_t)objc_msgSend(v62, sel_integerValue);

    id v63 = [v13 v18[350]];
    a6 = sub_22F223CB8();

    if ((a6 & 0xC000000000000001) != 0) {
      goto LABEL_128;
    }
    if (a7 < *(void *)((a6 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      id v64 = *(id *)(a6 + 8 * a7 + 32);
      goto LABEL_42;
    }
    __break(1u);
LABEL_130:
    swift_bridgeObjectRetain();
    uint64_t v68 = sub_22F2245C8();
    swift_bridgeObjectRelease();
LABEL_44:
    swift_bridgeObjectRelease();
    if (v68 == 2)
    {
      a5 = 0;
      uint64_t v105 = 0;
      uint64_t v123 = 1;
      a7 = 1;
      unint64_t v29 = (unint64_t)v103;
      goto LABEL_65;
    }
    id v69 = objc_msgSend(v13, sel_shape);
    uint64_t v70 = sub_22F223CB8();

    if ((v70 & 0xC000000000000001) != 0)
    {
      a6 = v60;
      id v71 = (id)MEMORY[0x230FB2E90](v60, v70);
    }
    else
    {
      if ((v60 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_140:
        __break(1u);
        goto LABEL_141;
      }
      if (v60 >= *(void *)((v70 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_140;
      }
      a6 = v60;
      id v71 = *(id *)(v70 + 8 * v60 + 32);
    }
    int64_t v72 = v71;
    swift_bridgeObjectRelease();
    uint64_t v14 = (uint64_t)[v72 *(SEL *)(a5 + 1784)];

    if ((v143 & 1) == 0) {
      break;
    }
    if ((unint64_t)(v14 - 3) >= 2)
    {
      if (v14 != 1)
      {
LABEL_109:
        __swift_instantiateConcreteTypeFromMangledName(&qword_268694B98);
        uint64_t v32 = swift_allocObject();
        *(_OWORD *)(v32 + 16) = xmmword_22F227140;
        unint64_t v145 = 0;
        unint64_t v146 = 0xE000000000000000;
        sub_22F2243F8();
        sub_22F223B48();
        uint64_t v148 = v14;
LABEL_110:
        sub_22F2246D8();
        sub_22F223B48();
        swift_bridgeObjectRelease();
        goto LABEL_5;
      }
      a5 = 0;
      a7 = 1;
      uint64_t v123 = 1;
    }
    else
    {
      a7 = v14;
      a5 = 0;
      uint64_t v123 = 4;
    }
LABEL_60:
    id v73 = objc_msgSend(v13, v18[350], v103);
    uint64_t v70 = sub_22F223CB8();

    if ((v70 & 0xC000000000000001) == 0)
    {
      unint64_t v29 = (unint64_t)v103;
      if ((a6 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_143:
        __break(1u);
        goto LABEL_144;
      }
      if (a6 >= *(void *)((v70 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_143;
      }
      id v74 = *(id *)(v70 + 8 * a6 + 32);
      goto LABEL_64;
    }
LABEL_141:
    id v74 = (id)MEMORY[0x230FB2E90](a6, v70);
    unint64_t v29 = (unint64_t)v103;
LABEL_64:
    swift_bridgeObjectRelease();
    uint64_t v105 = (uint64_t)objc_msgSend(v74, sel_integerValue);

LABEL_65:
    unint64_t v104 = a7;
    a6 = v122;
    int64_t v75 = v109 * v122;
    if ((unsigned __int128)(v109 * (__int128)v122) >> 64 != (v109 * v122) >> 63)
    {
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      swift_bridgeObjectRetain();
      uint64_t v39 = sub_22F2245C8();
      swift_bridgeObjectRelease();
LABEL_10:
      swift_bridgeObjectRelease();
      if (v39 <= a5 || (a6 & 0x8000000000000000) != 0) {
        goto LABEL_19;
      }
      id v40 = objc_msgSend(v13, sel_shape);
      unint64_t v41 = sub_22F223CB8();

      if (!(v41 >> 62))
      {
        uint64_t v42 = *(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_14;
      }
LABEL_144:
      swift_bridgeObjectRetain();
      uint64_t v42 = sub_22F2245C8();
      swift_bridgeObjectRelease();
LABEL_14:
      swift_bridgeObjectRelease();
      if (v42 <= (uint64_t)a6 || (a7 & 0x8000000000000000) != 0) {
        goto LABEL_19;
      }
      id v43 = objc_msgSend(v13, sel_shape);
      unint64_t v44 = sub_22F223CB8();

      if (v44 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v45 = sub_22F2245C8();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v45 = *(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      if (v45 <= (uint64_t)a7) {
        goto LABEL_19;
      }
      goto LABEL_30;
    }
    uint64_t v14 = v75 * v123;
    if ((unsigned __int128)(v75 * (__int128)v123) >> 64 != (v75 * v123) >> 63) {
      goto LABEL_133;
    }
    if (v14 < 0) {
      goto LABEL_134;
    }
    if (v14)
    {
      id v18 = (SEL *)sub_22F223D48();
      _OWORD v18[2] = (SEL)v14;
      memset(v18 + 4, 255, v14);
    }
    else
    {
      id v18 = (SEL *)MEMORY[0x263F8EE78];
    }
    int64_t v76 = v136;
    uint64_t v77 = (char *)objc_msgSend(v13, sel_dataPointer);
    uint64_t v78 = a5 * v105;
    if ((unsigned __int128)(a5 * (__int128)v105) >> 64 != (a5 * v105) >> 63) {
      goto LABEL_135;
    }
    uint64_t v79 = v109;
    if (v109 < 0) {
      goto LABEL_136;
    }
    a5 = 0;
    uint64_t v120 = *(void *)(v142 + 72);
    uint64_t v119 = &v77[v120 * v78];
    uint64_t v141 = a20 + 32;
    v143 = (uint64_t *)(a20 + 56);
    v138 = (void (**)(char *, unint64_t, unint64_t, uint64_t))(a20 + 40);
    v134 = (void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(a20 + 48);
    v133 = (uint64_t (**)(unint64_t, uint64_t))(a20 + 64);
    uint64_t v118 = (void (**)(char *, char *, unint64_t))(v142 + 16);
    uint64_t v13 = (void (**)(unint64_t, unint64_t))(v142 + 8);
    double v80 = a17 * 100.0;
    unint64_t v113 = COERCE_UNSIGNED_INT64(a17 * 100.0) & 0x7FF0000000000000;
    uint64_t v112 = (uint64_t)(a17 * 100.0);
    int v117 = a18;
    uint64_t v111 = (void (**)(char *, uint64_t, unint64_t))(v142 + 32);
    unint64_t v114 = (char *)(v18 + 4);
    unint64_t v81 = v104;
    uint64_t v115 = v18;
    uint64_t v135 = a20;
    while (1)
    {
      if (a5 == v81)
      {
        __break(1u);
        goto LABEL_121;
      }
      if (v79) {
        break;
      }
LABEL_74:
      ++a5;
      unint64_t v81 = v104;
      if (a5 == v104) {
        return (uint64_t)v18;
      }
    }
    if ((a6 & 0x8000000000000000) == 0)
    {
      uint64_t v82 = 0;
      uint64_t v107 = a5 * v105;
      BOOL v108 = (unsigned __int128)(a5 * (__int128)v105) >> 64 != (a5 * v105) >> 63;
      uint64_t v116 = a5;
      while (1)
      {
        if (v82 == v79) {
          goto LABEL_114;
        }
        uint64_t v110 = v82;
        if (a6) {
          break;
        }
LABEL_79:
        uint64_t v82 = v110 + 1;
        uint64_t v79 = v109;
        if (v110 + 1 == v109) {
          goto LABEL_74;
        }
      }
      if (v108) {
        goto LABEL_115;
      }
      uint64_t v83 = v110 * v106;
      if ((unsigned __int128)(v110 * (__int128)v106) >> 64 == (v110 * v106) >> 63)
      {
        uint64_t v132 = v107 + v83;
        if (!__OFADD__(v107, v83))
        {
          unint64_t v131 = v110 * a6;
          if ((unsigned __int128)(v110 * (__int128)(uint64_t)a6) >> 64 == (uint64_t)(v110 * a6) >> 63)
          {
            uint64_t v84 = 0;
            uint64_t v130 = *(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))v141;
            uint64_t v142 = *v143;
            v137 = *v138;
            uint64_t v129 = *v134;
            uint64_t v128 = *v133;
            while (1)
            {
              uint64_t v85 = v84 * v121;
              if ((unsigned __int128)(v84 * (__int128)v121) >> 64 != (v84 * v121) >> 63)
              {
                __break(1u);
LABEL_103:
                __break(1u);
LABEL_104:
                __break(1u);
LABEL_105:
                __break(1u);
LABEL_106:
                __break(1u);
LABEL_107:
                __break(1u);
LABEL_108:
                __break(1u);
                goto LABEL_109;
              }
              BOOL v86 = __OFADD__(v132, v85);
              uint64_t v87 = v132 + v85;
              if (v86) {
                goto LABEL_103;
              }
              uint64_t v139 = v84;
              (*v118)(v76, &v119[v87 * v120], v29);
              uint64_t v88 = v135;
              uint64_t v14 = v142;
              if ((v117 & 1) == 0)
              {
                a6 = (unint64_t)v140;
                ((void (*)(uint64_t, unint64_t, uint64_t))v142)(100, v29, v135);
                v137(v76, a6, v29, v88);
                a7 = (unint64_t)*v13;
                (*v13)(a6, v29);
                if (v113 == 0x7FF0000000000000)
                {
                  __break(1u);
LABEL_112:
                  __break(1u);
LABEL_113:
                  __break(1u);
LABEL_114:
                  __break(1u);
LABEL_115:
                  __break(1u);
                  goto LABEL_116;
                }
                if (v80 <= -9.22337204e18) {
                  goto LABEL_112;
                }
                if (v80 >= 9.22337204e18) {
                  goto LABEL_113;
                }
                uint64_t v89 = v140;
                uint64_t v88 = v135;
                uint64_t v14 = v142;
                ((void (*)(uint64_t, unint64_t, uint64_t))v142)(v112, v29, v135);
                uint64_t v90 = v144;
                char v91 = sub_22F223A38();
                ((void (*)(char *, unint64_t))a7)(v89, v29);
                int64_t v76 = v136;
                ((void (*)(uint64_t, unint64_t))a7)(v90, v29);
                if (v91)
                {
                  uint64_t v92 = v144;
                  ((void (*)(void, unint64_t, uint64_t))v14)(0, v29, v88);
                  ((void (*)(char *, unint64_t))a7)(v76, v29);
                  (*v111)(v76, v92, v29);
                }
              }
              uint64_t v93 = (uint64_t)v124;
              int64_t v94 = v76;
              uint64_t v95 = v126;
              unint64_t v96 = v130;
              v130((uint64_t)v94, v126, v29, v88);
              uint64_t v97 = (uint64_t)v125;
              ((void (*)(uint64_t, unint64_t, uint64_t))v14)(255, v29, v88);
              uint64_t v14 = (uint64_t)v140;
              v137((char *)v93, v97, v29, v88);
              a7 = (unint64_t)*v13;
              (*v13)(v97, v29);
              ((void (*)(uint64_t, unint64_t))a7)(v93, v29);
              v96(v127, v95, v29, v88);
              v129(v14, v93, v29, v88);
              ((void (*)(uint64_t, unint64_t))a7)(v93, v29);
              ((void (*)(uint64_t, unint64_t))a7)(v14, v29);
              uint64_t v98 = (void (*)(uint64_t, unint64_t, uint64_t))v142;
              ((void (*)(void, unint64_t, uint64_t))v142)(0, v29, v88);
              v98(255, v29, v88);
              clamp<A>(_:min:max:)(v144, v93, v97, v29, v14);
              ((void (*)(uint64_t, unint64_t))a7)(v97, v29);
              ((void (*)(uint64_t, unint64_t))a7)(v93, v29);
              char v99 = v128(v29, v88);
              ((void (*)(uint64_t, unint64_t))a7)(v14, v29);
              uint64_t v100 = v131 + v139;
              if (__OFADD__(v131, v139)) {
                goto LABEL_104;
              }
              uint64_t v101 = v100 * v123;
              if ((unsigned __int128)(v100 * (__int128)v123) >> 64 != (v100 * v123) >> 63) {
                goto LABEL_105;
              }
              a5 = v116;
              BOOL v86 = __OFADD__(v101, v116);
              unint64_t v102 = v101 + v116;
              if (v86) {
                goto LABEL_106;
              }
              if ((v102 & 0x8000000000000000) != 0) {
                goto LABEL_107;
              }
              id v18 = v115;
              if (v102 >= (unint64_t)v115[2]) {
                goto LABEL_108;
              }
              uint64_t v84 = v139 + 1;
              v114[v102] = v99;
              ((void (*)(uint64_t, unint64_t))a7)(v144, v29);
              int64_t v76 = v136;
              ((void (*)(char *, unint64_t))a7)(v136, v29);
              a6 = v122;
              if (v122 == v84) {
                goto LABEL_79;
              }
            }
          }
          goto LABEL_118;
        }
      }
      else
      {
LABEL_116:
        __break(1u);
      }
      __break(1u);
LABEL_118:
      __break(1u);
      goto LABEL_119;
    }
LABEL_121:
    __break(1u);
  }
  a5 = v141;
  if ((v141 & 0x8000000000000000) == 0 && v14 > v141)
  {
    uint64_t v123 = 1;
    a7 = 1;
    goto LABEL_60;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_268694B98);
  uint64_t v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_22F227140;
  unint64_t v145 = 0;
  unint64_t v146 = 0xE000000000000000;
  sub_22F2243F8();
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v145 = 0xD000000000000025;
  unint64_t v146 = 0x800000022F22E600;
  if (!__OFSUB__(v14, 1))
  {
    uint64_t v148 = v14 - 1;
    goto LABEL_110;
  }
  __break(1u);
  return result;
}

CGImageRef_optional __swiftcall createCGImage(fromFloatArray:min:max:)(MLMultiArray fromFloatArray, Swift::Float min, Swift::Float max)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v7 = fromFloatArray.super.isa;
  float v8 = (char *)objc_msgSend((id)v7, sel_dataPointer);
  vImagePixelCount v9 = (vImagePixelCount)objc_msgSend((id)v7, sel_shape);
  sub_22F19C77C();
  int64_t v10 = sub_22F223CB8();

  if ((v10 & 0xC000000000000001) != 0)
  {
    id v11 = (id)MEMORY[0x230FB2E90](1, v10);
  }
  else
  {
    if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL)
    {
      __break(1u);
      goto LABEL_31;
    }
    id v11 = *(id *)(v10 + 40);
  }
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  int v3 = (SEL *)&unk_2649FF000;
  int64_t v10 = (int64_t)objc_msgSend(v12, sel_integerValue);

  uint64_t v13 = (uint64_t)objc_msgSend((id)v7, sel_shape);
  vImagePixelCount v9 = sub_22F223CB8();

  if ((v9 & 0xC000000000000001) != 0)
  {
LABEL_31:
    id v14 = (id)MEMORY[0x230FB2E90](2, v9);
    goto LABEL_7;
  }
  if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) < 3uLL)
  {
    __break(1u);
    goto LABEL_33;
  }
  id v14 = *(id *)(v9 + 48);
LABEL_7:
  char v15 = v14;
  swift_bridgeObjectRelease();
  vImagePixelCount v9 = (vImagePixelCount)[v15 v3[223]];

  uint64_t v4 = (SEL *)&unk_2649FF000;
  id v16 = objc_msgSend((id)v7, sel_strides);
  uint64_t v13 = sub_22F223CB8();

  if ((v13 & 0xC000000000000001) != 0)
  {
LABEL_33:
    id v17 = (id)MEMORY[0x230FB2E90](0, v13);
    goto LABEL_10;
  }
  if (!*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_35;
  }
  id v17 = *(id *)(v13 + 32);
LABEL_10:
  id v18 = v17;
  swift_bridgeObjectRelease();
  uint64_t v13 = (uint64_t)[v18 v3[223]];

  id v19 = [(id)v7 v4[350]];
  uint64_t v7 = sub_22F223CB8();

  if ((v7 & 0xC000000000000001) != 0)
  {
LABEL_35:
    id v20 = (id)MEMORY[0x230FB2E90](1, v7);
    goto LABEL_13;
  }
  if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL)
  {
    __break(1u);
    goto LABEL_37;
  }
  id v20 = *(id *)(v7 + 40);
LABEL_13:
  uint64_t v21 = v20;
  swift_bridgeObjectRelease();
  unint64_t v22 = (unint64_t)[v21 v3[223]];

  if ((v22 - 0x2000000000000000) >> 62 != 3)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (((v9 | v10) & 0x8000000000000000) != 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  blue.datfloat a = v8;
  blue.Swift::Int height = v10;
  blue.Swift::Int width = v9;
  blue.rowBytes = 4 * v22;
  green.datfloat a = &v8[4 * v13];
  green.Swift::Int height = v10;
  green.Swift::Int width = v9;
  green.rowBytes = 4 * v22;
  if (v13 + 0x4000000000000000 < 0)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  red.datfloat a = &v8[8 * v13];
  red.Swift::Int height = v10;
  red.Swift::Int width = v9;
  red.rowBytes = 4 * v22;
  if ((v9 - 0x2000000000000000) >> 62 != 3)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v23 = v10 * 4 * v9;
  if ((unsigned __int128)(v10 * (__int128)(uint64_t)(4 * v9)) >> 64 != v23 >> 63)
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
  }
  if (v23 < 0) {
    goto LABEL_42;
  }
  if (v23)
  {
    uint64_t v24 = sub_22F223D48();
    *(void *)(v24 + 16) = v23;
    bzero((void *)(v24 + 32), v10 * 4 * v9);
  }
  else
  {
    uint64_t v24 = MEMORY[0x263F8EE78];
  }
  dest.datfloat a = (void *)(v24 + 32);
  dest.Swift::Int height = v10;
  dest.Swift::Int width = v9;
  dest.rowBytes = 4 * v9;
  v31[0] = max;
  v31[1] = max;
  _DWORD v31[2] = max;
  v30[0] = min;
  v30[1] = min;
  _DWORD v30[2] = min;
  if (vImageConvert_PlanarFToBGRX8888(&blue, &green, &red, 0xFFu, &dest, v31, v30, 0))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    DeviceRGB = CGColorSpaceCreateDeviceRGB();
    uint64_t v27 = CGBitmapContextCreate((void *)(v24 + 32), v9, v10, 8uLL, 4 * v9, DeviceRGB, 1u);
    if (v27)
    {
      id v28 = v27;
      CGImageRef Image = CGBitmapContextCreateImage(v27);
    }
    else
    {
      CGImageRef Image = 0;
    }
    swift_bridgeObjectRelease();
  }
  return (CGImageRef_optional)Image;
}

UIImage_optional __swiftcall MLMultiArray.image(min:max:channel:axes:orientation:clip:)(Swift::Double min, Swift::Double max, Swift::Int_optional channel, Swift::tuple_Int_Int_Int_optional axes, UIImageOrientation orientation, Swift::Double_optional clip)
{
  unint64_t v7 = sub_22F19C4DC(channel.value, channel.is_nil, axes.value._0, axes.value._1, axes.value._2, axes.is_nil, min, max);
  if (v7)
  {
    vImagePixelCount v9 = (void *)v7;
    int64_t v10 = (objc_class *)objc_msgSend(objc_allocWithZone(MEMORY[0x263F827E8]), sel_initWithCGImage_scale_orientation_, v7, orientation, 1.0);
  }
  else
  {
    int64_t v10 = 0;
  }
  id v11 = v10;
  result.value.super.isfloat a = v11;
  result.is_nil = v8;
  return result;
}

UIImage_optional __swiftcall createUIImage(fromFloatArray:min:max:)(MLMultiArray fromFloatArray, Swift::Float min, Swift::Float max)
{
  v3.CGImageRef value = createCGImage(fromFloatArray:min:max:)(fromFloatArray, min, max).value;
  if (v3.value)
  {
    CGImageRef value = v3.value;
    long long v6 = (objc_class *)objc_msgSend(objc_allocWithZone(MEMORY[0x263F827E8]), sel_initWithCGImage_, v3.value);
  }
  else
  {
    long long v6 = 0;
  }
  unint64_t v7 = v6;
  result.value.super.isfloat a = v7;
  result.is_nil = v4;
  return result;
}

char *sub_22F19B10C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_268694D90);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  id v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_22F19B208(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_268694D98);
    int64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[2 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_268694DA0);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_22F19B32C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_268694CB0);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  id v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_22F19B428(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_268694568);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  id v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_22F19B524(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_268694D88);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  size_t v14 = 48 * v8;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v14);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_22F19B630(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_22F19BD9C(a1, a2, a3, a4, &qword_268694C60);
}

char *sub_22F19B63C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2686948D8);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 29;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8]) {
      memmove(v13, v14, 4 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 4 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_22F19B738(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_268694D80);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_22F19B834(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_268694D30);
    int64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 176);
  }
  else
  {
    int64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[22 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 176 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_268694D38);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_22F19B970(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_268694D70);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_22F19BA74(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_268694D28);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_22F19BB70(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_268694D78);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 32 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_22F19BC6C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_268694D60);
    int64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[2 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_268694D68);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_22F19BD90(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_22F19BD9C(a1, a2, a3, a4, &qword_268694D58);
}

char *sub_22F19BD9C(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    int64_t v11 = (char *)swift_allocObject();
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x263F8EE78];
  }
  size_t v14 = v11 + 32;
  char v15 = a4 + 32;
  if (v6)
  {
    if (v11 != a4 || v14 >= &v15[16 * v9]) {
      memmove(v14, v15, 16 * v9);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v9);
  }
  swift_bridgeObjectRelease();
  return v11;
}

void *sub_22F19BE94(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_268694D48);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_268694D50);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_22F19BFB8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_268694CC0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_22F19C0BC(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_268694D40);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 304);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[304 * v8]) {
      memmove(v12, v13, 304 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_22F19C1DC(uint64_t a1, char a2, unint64_t a3, uint64_t a4, uint64_t a5, char a6, double a7, double a8)
{
  uint64_t result = sub_22F198BB0(a1, a2 & 1, a3, a4, a5, a6 & 1, 0, 1, a7, a8);
  if (!result) {
    return 0;
  }
  uint64_t v12 = result;
  size_t v13 = v9;
  size_t v14 = v10;
  if (v11 == 1)
  {
    DeviceGradouble y = CGColorSpaceCreateDeviceGray();
    id v16 = CGBitmapContextCreate((void *)(v12 + 32), v13, v14, 8uLL, v13, DeviceGray, 0);
    if (v16)
    {
LABEL_4:
      id v17 = v16;
      CGImageRef Image = CGBitmapContextCreateImage(v16);

LABEL_9:
      swift_bridgeObjectRelease();

      return (uint64_t)Image;
    }
LABEL_8:
    CGImageRef Image = 0;
    goto LABEL_9;
  }
  if ((v9 - 0x2000000000000000) >> 62 == 3)
  {
    DeviceGradouble y = CGColorSpaceCreateDeviceRGB();
    id v16 = CGBitmapContextCreate((void *)(v12 + 32), v13, v14, 8uLL, 4 * v13, DeviceGray, 1u);
    if (v16) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t sub_22F19C2D8(uint64_t a1, char a2, unint64_t a3, uint64_t a4, uint64_t a5, char a6, float a7, float a8)
{
  uint64_t result = sub_22F197EA0(a1, a2 & 1, a3, a4, a5, a6 & 1, 0, 1, a7, a8);
  if (!result) {
    return 0;
  }
  uint64_t v12 = result;
  size_t v13 = v9;
  size_t v14 = v10;
  if (v11 == 1)
  {
    DeviceGradouble y = CGColorSpaceCreateDeviceGray();
    id v16 = CGBitmapContextCreate((void *)(v12 + 32), v13, v14, 8uLL, v13, DeviceGray, 0);
    if (v16)
    {
LABEL_4:
      id v17 = v16;
      CGImageRef Image = CGBitmapContextCreateImage(v16);

LABEL_9:
      swift_bridgeObjectRelease();

      return (uint64_t)Image;
    }
LABEL_8:
    CGImageRef Image = 0;
    goto LABEL_9;
  }
  if ((v9 - 0x2000000000000000) >> 62 == 3)
  {
    DeviceGradouble y = CGColorSpaceCreateDeviceRGB();
    id v16 = CGBitmapContextCreate((void *)(v12 + 32), v13, v14, 8uLL, 4 * v13, DeviceGray, 1u);
    if (v16) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

unint64_t sub_22F19C3D4(int a1, uint64_t a2, uint64_t a3, char a4, unint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  unint64_t result = sub_22F197160(a1, a2, a3, a4 & 1, a5, a6, a7, a8 & 1, 0, 1);
  if (!result) {
    return 0;
  }
  unint64_t v12 = result;
  size_t v13 = v9;
  size_t v14 = v10;
  if (v11 == 1)
  {
    DeviceGradouble y = CGColorSpaceCreateDeviceGray();
    id v16 = CGBitmapContextCreate((void *)(v12 + 32), v13, v14, 8uLL, v13, DeviceGray, 0);
    if (v16)
    {
LABEL_4:
      id v17 = v16;
      CGImageRef Image = CGBitmapContextCreateImage(v16);

LABEL_9:
      swift_bridgeObjectRelease();

      return (unint64_t)Image;
    }
LABEL_8:
    CGImageRef Image = 0;
    goto LABEL_9;
  }
  if ((v9 - 0x2000000000000000) >> 62 == 3)
  {
    DeviceGradouble y = CGColorSpaceCreateDeviceRGB();
    id v16 = CGBitmapContextCreate((void *)(v12 + 32), v13, v14, 8uLL, 4 * v13, DeviceGray, 1u);
    if (v16) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

unint64_t sub_22F19C4DC(uint64_t a1, char a2, unint64_t a3, uint64_t a4, uint64_t a5, char a6, double a7, double a8)
{
  size_t v9 = v8;
  char v16 = a2 & 1;
  char v17 = a6 & 1;
  id v18 = objc_msgSend(v9, sel_dataType);
  if (v18 == (id)65568)
  {
    float v20 = a7;
    float v21 = a8;
    return sub_22F19C2D8(a1, v16, a3, a4, a5, v17, v20, v21);
  }
  else
  {
    if (v18 == (id)131104)
    {
      if (a7 <= -2147483650.0)
      {
        __break(1u);
      }
      else if (a7 < 2147483650.0)
      {
        if ((*(void *)&a7 & 0x7FF0000000000000) != 0x7FF0000000000000
          && (*(void *)&a8 & 0x7FF0000000000000) != 0x7FF0000000000000)
        {
          if (a8 > -2147483650.0)
          {
            if (a8 < 2147483650.0)
            {
              return sub_22F19C3D4((int)a7, (int)a8, a1, v16, a3, a4, a5, v17);
            }
            goto LABEL_23;
          }
LABEL_22:
          __break(1u);
LABEL_23:
          __break(1u);
          goto LABEL_24;
        }
LABEL_21:
        __break(1u);
        goto LABEL_22;
      }
      __break(1u);
      goto LABEL_21;
    }
    if (v18 != (id)65600)
    {
LABEL_24:
      sub_22F2243F8();
      swift_bridgeObjectRelease();
      objc_msgSend(v9, sel_dataType);
      sub_22F2246D8();
      sub_22F223B48();
      swift_bridgeObjectRelease();
      unint64_t result = sub_22F224538();
      __break(1u);
      return result;
    }
    return sub_22F19C1DC(a1, v16, a3, a4, a5, v17, a7, a8);
  }
}

unint64_t sub_22F19C77C()
{
  unint64_t result = qword_268695000;
  if (!qword_268695000)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_268695000);
  }
  return result;
}

uint64_t EdgeType.description.getter(char a1)
{
  uint64_t result = 0x6666696C63;
  switch(a1)
  {
    case 1:
      uint64_t result = 1684828006;
      break;
    case 2:
      uint64_t result = 0x72616E616C70;
      break;
    case 3:
      uint64_t result = 30323;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_22F19C840()
{
  uint64_t result = 0x6666696C63;
  switch(*v0)
  {
    case 1:
      uint64_t result = 1684828006;
      break;
    case 2:
      uint64_t result = 0x72616E616C70;
      break;
    case 3:
      uint64_t result = 30323;
      break;
    default:
      return result;
  }
  return result;
}

double ConnectedSurface.backingPlane.getter(double a1, double a2)
{
  return a2;
}

uint64_t ConnectedSurface.endpointKnown.getter(char a1)
{
  return a1 & 1;
}

uint64_t ConnectedSurface.init(edgeOrthogonalSurfaceVector:endpointKnown:plane:)(char a1)
{
  return a1 & 1;
}

uint64_t EdgePlanesMetrics.bestPlaneType.setter(uint64_t result)
{
  *float v1 = result;
  return result;
}

uint64_t (*EdgePlanesMetrics.bestPlaneType.modify())()
{
  return nullsub_1;
}

uint64_t EdgePlanesMetrics.otherPlaneType.getter(unsigned int a1)
{
  return a1 >> 8;
}

uint64_t EdgePlanesMetrics.otherPlaneType.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 1) = result;
  return result;
}

uint64_t (*EdgePlanesMetrics.otherPlaneType.modify())()
{
  return nullsub_1;
}

uint64_t EdgePlanesMetrics.bestPlaneOrientation.getter(unsigned int a1)
{
  return HIWORD(a1);
}

uint64_t EdgePlanesMetrics.bestPlaneOrientation.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 2) = result;
  return result;
}

uint64_t (*EdgePlanesMetrics.bestPlaneOrientation.modify())()
{
  return nullsub_1;
}

uint64_t EdgePlanesMetrics.otherPlaneOrientation.getter(unsigned int a1)
{
  return HIBYTE(a1);
}

uint64_t EdgePlanesMetrics.otherPlaneOrientation.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 3) = result;
  return result;
}

uint64_t (*EdgePlanesMetrics.otherPlaneOrientation.modify())()
{
  return nullsub_1;
}

void EdgePlanesMetrics.bestPlaneConfidence.setter(float a1)
{
  *(float *)(v1 + 4) = a1;
}

uint64_t (*EdgePlanesMetrics.bestPlaneConfidence.modify())()
{
  return nullsub_1;
}

float EdgePlanesMetrics.otherPlaneConfidence.getter(double a1, float a2)
{
  return a2;
}

void EdgePlanesMetrics.otherPlaneConfidence.setter(float a1)
{
  *(float *)(v1 + 8) = a1;
}

uint64_t (*EdgePlanesMetrics.otherPlaneConfidence.modify())()
{
  return nullsub_1;
}

uint64_t EdgePlanesMetrics.EdgePlaneOrientation.description.getter(char a1)
{
  if (!a1) {
    return 0x746E6F7A69726F48;
  }
  if (a1 == 1) {
    return 0x6C61636974726556;
  }
  return 0;
}

BOOL static EdgePlanesMetrics.EdgePlaneOrientation.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t EdgePlanesMetrics.EdgePlaneOrientation.hash(into:)()
{
  return sub_22F2247F8();
}

uint64_t _s17MeasureFoundation8EdgeTypeO9hashValueSivg_0()
{
  return sub_22F224818();
}

MeasureFoundation::EdgePlanesMetrics __swiftcall EdgePlanesMetrics.init(bestPlaneType:otherPlaneType:bestPlaneOrientation:otherPlaneOrientation:bestPlaneConfidence:otherPlaneConfidence:)(MeasureFoundation::WorldPlaneType_optional bestPlaneType, MeasureFoundation::WorldPlaneType_optional otherPlaneType, MeasureFoundation::EdgePlanesMetrics::EdgePlaneOrientation bestPlaneOrientation, MeasureFoundation::EdgePlanesMetrics::EdgePlaneOrientation otherPlaneOrientation, Swift::Float bestPlaneConfidence, Swift::Float otherPlaneConfidence)
{
  int v6 = bestPlaneType.value | (unsigned __int16)(otherPlaneType.value << 8) | (bestPlaneOrientation << 16) | (otherPlaneOrientation << 24);
  result.otherPlaneConfidence = otherPlaneConfidence;
  result.bestPlaneConfidence = bestPlaneConfidence;
  result.bestPlaneType = (MeasureFoundation::WorldPlaneType_optional)v6;
  result.otherPlaneType = (MeasureFoundation::WorldPlaneType_optional)SBYTE1(v6);
  result.bestPlaneOrientation = BYTE2(v6);
  result.otherPlaneOrientation = HIBYTE(v6);
  return result;
}

Swift::String __swiftcall EdgePlanesMetrics.metricDescriptionForBestPlaneType()()
{
  unint64_t v1 = 0xE500000000000000;
  uint64_t v2 = 0x74694B7261;
  CGImageRef_optional v3 = (void *)0xE400000000000000;
  uint64_t v4 = 1701736270;
  switch(v0)
  {
    case 1:
      unint64_t v1 = 0xE800000000000000;
      uint64_t v2 = 0x6465727265666E69;
      goto LABEL_8;
    case 2:
      unint64_t v1 = 0xE800000000000000;
      uint64_t v2 = 0x6B6361626C6C6166;
      goto LABEL_8;
    case 3:
      uint64_t v2 = 0x6C61636F6CLL;
      goto LABEL_8;
    case 4:
      unint64_t v1 = 0xE800000000000000;
      uint64_t v2 = 0x73756F6976657270;
      goto LABEL_8;
    case 5:
      uint64_t v2 = 0x6863746170;
      goto LABEL_8;
    case 6:
      uint64_t v2 = 0x706544656C707061;
      unint64_t v1 = 0xEA00000000006874;
      goto LABEL_8;
    case 7:
      goto LABEL_9;
    default:
LABEL_8:
      uint64_t v7 = v2;
      swift_bridgeObjectRetain();
      sub_22F223B48();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v4 = v7;
      CGImageRef_optional v3 = (void *)v1;
LABEL_9:
      uint64_t v5 = v4;
      result._object = v3;
      result._uint64_t countAndFlagsBits = v5;
      return result;
  }
}

Swift::String __swiftcall EdgePlanesMetrics.metricDescriptionForOtherPlaneType()()
{
  unint64_t v1 = 0xE500000000000000;
  uint64_t v2 = 0x74694B7261;
  CGImageRef_optional v3 = (void *)0xE400000000000000;
  uint64_t v4 = 1701736270;
  switch(HIBYTE(v0))
  {
    case 1:
      unint64_t v1 = 0xE800000000000000;
      uint64_t v2 = 0x6465727265666E69;
      goto LABEL_8;
    case 2:
      unint64_t v1 = 0xE800000000000000;
      uint64_t v2 = 0x6B6361626C6C6166;
      goto LABEL_8;
    case 3:
      uint64_t v2 = 0x6C61636F6CLL;
      goto LABEL_8;
    case 4:
      unint64_t v1 = 0xE800000000000000;
      uint64_t v2 = 0x73756F6976657270;
      goto LABEL_8;
    case 5:
      uint64_t v2 = 0x6863746170;
      goto LABEL_8;
    case 6:
      uint64_t v2 = 0x706544656C707061;
      unint64_t v1 = 0xEA00000000006874;
      goto LABEL_8;
    case 7:
      goto LABEL_9;
    default:
LABEL_8:
      uint64_t v7 = v2;
      swift_bridgeObjectRetain();
      sub_22F223B48();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v4 = v7;
      CGImageRef_optional v3 = (void *)v1;
LABEL_9:
      uint64_t v5 = v4;
      result._object = v3;
      result._uint64_t countAndFlagsBits = v5;
      return result;
  }
}

__n128 WorldEdge.transform.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_transform;
  swift_beginAccess();
  return *(__n128 *)v1;
}

__n128 WorldEdge.transform.setter(__n128 a1, __n128 a2, __n128 a3, __n128 a4)
{
  uint64_t v5 = (__n128 *)(v4 + OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_transform);
  swift_beginAccess();
  *uint64_t v5 = a1;
  v5[1] = a2;
  __n128 result = a4;
  v5[2] = a3;
  v5[3] = a4;
  return result;
}

uint64_t (*WorldEdge.transform.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t WorldEdge.p1.getter()
{
  return sub_22F19CF7C(&OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_p1);
}

uint64_t WorldEdge.p1.setter(uint64_t a1, uint64_t a2, char a3)
{
  return sub_22F19CFD0(a1, a2, a3, &OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_p1);
}

uint64_t (*WorldEdge.p1.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t WorldEdge.p2.getter()
{
  return sub_22F19CF7C(&OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_p2);
}

uint64_t sub_22F19CF7C(void *a1)
{
  uint64_t v2 = v1 + *a1;
  swift_beginAccess();
  return *(void *)v2;
}

uint64_t WorldEdge.p2.setter(uint64_t a1, uint64_t a2, char a3)
{
  return sub_22F19CFD0(a1, a2, a3, &OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_p2);
}

uint64_t sub_22F19CFD0(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  uint64_t v8 = v4 + *a4;
  uint64_t result = swift_beginAccess();
  *(void *)uint64_t v8 = a1;
  *(void *)(v8 + 8) = a2;
  *(unsigned char *)(v8 + 16) = a3 & 1;
  return result;
}

uint64_t (*WorldEdge.p2.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t WorldEdge.type.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_type);
  swift_beginAccess();
  return *v1;
}

uint64_t WorldEdge.type.setter(char a1)
{
  CGImageRef_optional v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_type);
  uint64_t result = swift_beginAccess();
  *CGImageRef_optional v3 = a1;
  return result;
}

uint64_t (*WorldEdge.type.modify())()
{
  return j_j__swift_endAccess;
}

float WorldEdge.typeConfidence.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_typeConfidence;
  swift_beginAccess();
  return *(float *)v1;
}

uint64_t WorldEdge.typeConfidence.setter(float a1)
{
  CGImageRef_optional v3 = (float *)(v1 + OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_typeConfidence);
  uint64_t result = swift_beginAccess();
  *CGImageRef_optional v3 = a1;
  return result;
}

uint64_t (*WorldEdge.typeConfidence.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t WorldEdge.backingPlanes.getter()
{
  return sub_22F19D2F4();
}

uint64_t WorldEdge.backingPlanes.setter(uint64_t a1)
{
  return sub_22F19D348(a1, &OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_backingPlanes);
}

uint64_t (*WorldEdge.backingPlanes.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t WorldEdge.connectedSurfaces.getter()
{
  return sub_22F19D2F4();
}

uint64_t sub_22F19D2F4()
{
  return swift_bridgeObjectRetain();
}

uint64_t WorldEdge.connectedSurfaces.setter(uint64_t a1)
{
  return sub_22F19D348(a1, &OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_connectedSurfaces);
}

uint64_t sub_22F19D348(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(v2 + *a2);
  swift_beginAccess();
  *uint64_t v4 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*WorldEdge.connectedSurfaces.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t WorldEdge.edgePlanesMetrics.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_edgePlanesMetrics;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t WorldEdge.edgePlanesMetrics.setter(uint64_t a1, int a2)
{
  uint64_t v5 = v2 + OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_edgePlanesMetrics;
  uint64_t result = swift_beginAccess();
  *(void *)uint64_t v5 = a1;
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t (*WorldEdge.edgePlanesMetrics.modify())()
{
  return j_j__swift_endAccess;
}

float WorldEdge.adVariance.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_adVariance;
  swift_beginAccess();
  return *(float *)v1;
}

uint64_t WorldEdge.adVariance.setter(float a1)
{
  CGImageRef_optional v3 = (float *)(v1 + OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_adVariance);
  uint64_t result = swift_beginAccess();
  *CGImageRef_optional v3 = a1;
  return result;
}

uint64_t (*WorldEdge.adVariance.modify())()
{
  return j__swift_endAccess;
}

id WorldEdge.__allocating_init(transform:p1:p2:type:adVariance:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6, char a7, __n128 a8, __n128 a9, __n128 a10, __n128 a11, float a12)
{
  char v19 = a3 & 1;
  char v20 = a6 & 1;
  id v21 = objc_allocWithZone(v12);
  return WorldEdge.init(transform:p1:p2:type:adVariance:)(a1, a2, v19, a4, a5, v20, a7, a8, a9, a10, a11, a12);
}

id WorldEdge.init(transform:p1:p2:type:adVariance:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6, char a7, __n128 a8, __n128 a9, __n128 a10, __n128 a11, float a12)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  char v19 = &v12[OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_p1];
  *(void *)char v19 = 0;
  *((void *)v19 + 1) = 0;
  void v19[16] = 1;
  char v20 = &v12[OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_p2];
  *(void *)char v20 = 0;
  *((void *)v20 + 1) = 0;
  v20[16] = 1;
  id v21 = &v12[OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_type];
  v12[OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_type] = 4;
  *(_DWORD *)&v12[OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_typeConfidence] = 0;
  uint64_t v22 = MEMORY[0x263F8EE78];
  *(void *)&v12[OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_connectedSurfaces] = MEMORY[0x263F8EE78];
  uint64_t v23 = &v12[OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_edgePlanesMetrics];
  *(void *)uint64_t v23 = 196608;
  *((_DWORD *)v23 + 2) = 0;
  uint64_t v24 = (__n128 *)&v12[OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_transform];
  *uint64_t v24 = a8;
  v24[1] = a9;
  _OWORD v24[2] = a10;
  v24[3] = a11;
  swift_beginAccess();
  *(void *)char v19 = a1;
  *((void *)v19 + 1) = a2;
  void v19[16] = a3 & 1;
  swift_beginAccess();
  *(void *)char v20 = a4;
  *((void *)v20 + 1) = a5;
  v20[16] = a6 & 1;
  swift_beginAccess();
  *id v21 = a7;
  *(void *)&v12[OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_backingPlanes] = v22;
  *(float *)&v12[OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_adVariance] = a12;
  v33.receiver = v12;
  v33.super_class = ObjectType;
  return objc_msgSendSuper2(&v33, sel_init);
}

double WorldEdge.projected(for:)(void *a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_p1;
  swift_beginAccess();
  double result = 0.0;
  if ((*(unsigned char *)(v3 + 16) & 1) == 0)
  {
    uint64_t v7 = v3;
    uint64_t v5 = *(void *)v3;
    uint64_t v6 = *(void *)(v7 + 8);
    uint64_t v8 = (float32x4_t *)(v1 + OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_p2);
    swift_beginAccess();
    if (v8[1].i8[0])
    {
      return 0.0;
    }
    else
    {
      v9.i64[0] = v5;
      v9.i64[1] = v6;
      float32x4_t v20 = v9;
      float32x4_t v22 = *v8;
      sub_22F1EE604(a1, (uint64_t)v23);
      float32x4_t v16 = v25;
      float32x4_t v18 = v24;
      float32x4_t v12 = v27;
      float32x4_t v14 = v26;
      sub_22F1EE604(a1, (uint64_t)v28);
      *(float32x2_t *)v10.i8 = _s17MeasureFoundation0A6CameraC12projectPoint_14viewProjection12viewportSizes5SIMD3VySfGAI_So13simd_float4x4as5SIMD2VySfGtFZ_0(v20, v18, v16, v14, v12, v28[0]);
      int64x2_t v21 = v10;
      sub_22F1EE604(a1, (uint64_t)v29);
      float32x4_t v17 = v31;
      float32x4_t v19 = v30;
      float32x4_t v13 = v33;
      float32x4_t v15 = v32;
      sub_22F1EE604(a1, (uint64_t)v34);
      *(float32x2_t *)v11.i8 = _s17MeasureFoundation0A6CameraC12projectPoint_14viewProjection12viewportSizes5SIMD3VySfGAI_So13simd_float4x4as5SIMD2VySfGtFZ_0(v22, v19, v17, v15, v13, v34[0]);
      *(void *)&double result = vzip1q_s64(v21, v11).u64[0];
    }
  }
  return result;
}

uint64_t WorldEdge.getClosestScreenSpacePoint(from:for:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>, float64_t a3@<D0>, float64_t a4@<D1>)
{
  uint64_t v7 = v4 + OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_p1;
  swift_beginAccess();
  float64x2_t v8 = 0uLL;
  if (*(unsigned char *)(v7 + 16))
  {
    uint64_t result = 0;
    uint64_t v10 = 0;
    float v11 = 0.0;
    char v12 = 1;
  }
  else
  {
    uint64_t v14 = *(void *)v7;
    uint64_t v13 = *(void *)(v7 + 8);
    float32x4_t v15 = (float32x4_t *)(v4 + OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_p2);
    swift_beginAccess();
    if (v15[1].i8[0]) {
      goto LABEL_11;
    }
    v16.i64[0] = v14;
    v16.i64[1] = v13;
    float32x4_t v48 = v16;
    float32x4_t v51 = *v15;
    sub_22F1EE604(a1, (uint64_t)v57);
    float32x4_t v42 = v59;
    float32x4_t v45 = v58;
    float32x4_t v36 = v61;
    float32x4_t v39 = v60;
    sub_22F1EE604(a1, (uint64_t)v62);
    *(float32x2_t *)v17.f32 = _s17MeasureFoundation0A6CameraC12projectPoint_14viewProjection12viewportSizes5SIMD3VySfGAI_So13simd_float4x4as5SIMD2VySfGtFZ_0(v48, v45, v42, v39, v36, v62[0]);
    float32x4_t v49 = v17;
    float v18 = v17.f32[1];
    sub_22F1EE604(a1, (uint64_t)v63);
    float32x4_t v43 = v65;
    float32x4_t v46 = v64;
    float32x4_t v37 = v67;
    float32x4_t v40 = v66;
    sub_22F1EE604(a1, (uint64_t)v68);
    *(float32x2_t *)v19.f32 = _s17MeasureFoundation0A6CameraC12projectPoint_14viewProjection12viewportSizes5SIMD3VySfGAI_So13simd_float4x4as5SIMD2VySfGtFZ_0(v51, v46, v43, v40, v37, v68[0]);
    v20.f64[0] = a3;
    v20.f64[1] = a4;
    *(float32x2_t *)&v20.f64[0] = vcvt_f32_f64(v20);
    *(float32x2_t *)v21.f32 = vsub_f32(*(float32x2_t *)&v20.f64[0], *(float32x2_t *)v49.f32);
    v21.i32[2] = 0;
    float32x4_t v22 = vsubq_f32(v19, v49);
    float32x2_t v23 = vmul_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v22.f32);
    v22.i32[2] = 0;
    float32x4_t v24 = vmlaq_f32(vmulq_f32(v22, (float32x4_t)xmmword_22F227620), (float32x4_t)xmmword_22F227080, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v22, (int32x4_t)v22), (int8x16_t)v22, 0xCuLL));
    float32x4_t v25 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v24, (int32x4_t)v24), (int8x16_t)v24, 0xCuLL);
    int32x4_t v26 = (int32x4_t)vmulq_f32(v24, v24);
    v26.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v26.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v26, 2), *(float32x2_t *)v26.i8)).u32[0];
    float32x2_t v27 = vrsqrte_f32((float32x2_t)v26.u32[0]);
    float32x2_t v28 = vmul_f32(v27, vrsqrts_f32((float32x2_t)v26.u32[0], vmul_f32(v27, v27)));
    float32x4_t v29 = vmulq_n_f32(v25, vmul_f32(v28, vrsqrts_f32((float32x2_t)v26.u32[0], vmul_f32(v28, v28))).f32[0]);
    float32x4_t v30 = vmulq_f32(v21, v29);
    LODWORD(v31) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 2), vaddq_f32(v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 1))).u32[0];
    float32x2_t v56 = vsub_f32(*(float32x2_t *)&v20.f64[0], vmul_n_f32(*(float32x2_t *)v29.f32, v31));
    *(int32x2_t *)v30.f32 = vdup_lane_s32((int32x2_t)v23, 0);
    v30.f32[0] = (float)(v19.f32[0] - v56.f32[0]) * (float)(v19.f32[0] - v56.f32[0]);
    v23.f32[0] = (float)(v19.f32[1] - v56.f32[1]) * (float)(v19.f32[1] - v56.f32[1]);
    float32x2_t v32 = vadd_f32(*(float32x2_t *)v30.f32, v23);
    if ((float)((float)((float)(v49.f32[0] - v56.f32[0]) * (float)(v49.f32[0] - v56.f32[0]))
               + (float)((float)(v18 - v56.f32[1]) * (float)(v18 - v56.f32[1]))) >= v32.f32[1]
      || v32.f32[0] >= v32.f32[1])
    {
      goto LABEL_11;
    }
    float v38 = v31;
    uint64_t v34 = (float32x4_t *)(v4 + OBJC_IVAR____TtC17MeasureFoundation9WorldEdge_transform);
    swift_beginAccess();
    float32x4_t v52 = v34[3];
    float32x4_t v54 = v34[1];
    sub_22F1EE604(a1, (uint64_t)v69);
    float32x4_t v47 = v71;
    float32x4_t v50 = v70;
    float32x4_t v41 = v73;
    float32x4_t v44 = v72;
    sub_22F1EE604(a1, (uint64_t)v74);
    uint64_t result = sub_22F1B32A4(*(double *)&v56, v54, v52, v50, v47, v44, v41, v74[0]);
    if (v35)
    {
LABEL_11:
      uint64_t result = 0;
      uint64_t v10 = 0;
      float v11 = 0.0;
      char v12 = 1;
      float64x2_t v8 = 0uLL;
    }
    else
    {
      char v12 = 0;
      float64x2_t v8 = vcvtq_f64_f32(v56);
      float v11 = v38;
    }
  }
  *(float64x2_t *)a2 = v8;
  *(void *)(a2 + 16) = result;
  *(void *)(a2 + 24) = v10;
  *(float *)(a2 + 32) = v11;
  *(unsigned char *)(a2 + 36) = v12;
  return result;
}

id WorldEdge.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void WorldEdge.init()()
{
}

uint64_t sub_22F19DD4C()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

id WorldEdge.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t sub_22F19DE14()
{
  unint64_t result = qword_268694DF0;
  if (!qword_268694DF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268694DF0);
  }
  return result;
}

unint64_t sub_22F19DE6C()
{
  unint64_t result = qword_268694DF8;
  if (!qword_268694DF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268694DF8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for EdgeType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for EdgeType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22F19E01CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EdgeType()
{
  return &type metadata for EdgeType;
}

__n128 __swift_memcpy49_16(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ConnectedSurface(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 48);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ConnectedSurface(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 49) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 48) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConnectedSurface()
{
  return &type metadata for ConnectedSurface;
}

uint64_t __swift_memcpy12_4(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)__n128 result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for EdgePlanesMetrics(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 12)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 2);
  BOOL v4 = v3 >= 3;
  int v5 = v3 - 3;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for EdgePlanesMetrics(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_DWORD *)(result + 8) = 0;
    *(void *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 12) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 12) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 2) = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EdgePlanesMetrics()
{
  return &type metadata for EdgePlanesMetrics;
}

uint64_t getEnumTagSinglePayload for EdgePlanesMetrics.EdgePlaneOrientation(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for EdgePlanesMetrics.EdgePlaneOrientation(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22F19E330);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EdgePlanesMetrics.EdgePlaneOrientation()
{
  return &type metadata for EdgePlanesMetrics.EdgePlaneOrientation;
}

uint64_t type metadata accessor for WorldEdge()
{
  return self;
}

__n128 WorldPerson.face.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC17MeasureFoundation11WorldPerson_face;
  swift_beginAccess();
  return *(__n128 *)v1;
}

unint64_t WorldPerson.height.getter()
{
  uint64_t v1 = (unsigned int *)(v0 + OBJC_IVAR____TtC17MeasureFoundation11WorldPerson_height);
  swift_beginAccess();
  return *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32);
}

uint64_t WorldPerson.timeSuggested.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC17MeasureFoundation11WorldPerson_timeSuggested;
  swift_beginAccess();
  return sub_22F19E49C(v3, a1);
}

uint64_t sub_22F19E49C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_268694BF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t WorldPerson.timeSuggested.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC17MeasureFoundation11WorldPerson_timeSuggested;
  swift_beginAccess();
  sub_22F19E560(a1, v3);
  return swift_endAccess();
}

uint64_t sub_22F19E560(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_268694BF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*WorldPerson.timeSuggested.modify())()
{
  return j__swift_endAccess;
}

char *WorldPerson.__allocating_init(_:)(__n128 a1, __n128 a2, __n128 a3, __n128 a4)
{
  uint64_t v5 = (char *)objc_allocWithZone(v4);
  unsigned int v6 = &v5[OBJC_IVAR____TtC17MeasureFoundation11WorldPerson_height];
  *(_DWORD *)unsigned int v6 = 0;
  v6[4] = 1;
  BOOL v7 = &v5[OBJC_IVAR____TtC17MeasureFoundation11WorldPerson_timeSuggested];
  uint64_t v8 = sub_22F2237F8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  float32x4_t v9 = (__n128 *)&v5[OBJC_IVAR____TtC17MeasureFoundation11WorldPerson_face];
  __n128 *v9 = a1;
  v9[1] = a2;
  v9[2] = a3;
  v9[3] = a4;
  v19.receiver = v5;
  v19.super_class = v4;
  uint64_t v10 = (char *)objc_msgSendSuper2(&v19, sel_init);
  uint64_t v11 = *(void *)&v10[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject__state];
  char v12 = *(os_unfair_lock_s **)(v11 + 24);
  uint64_t v13 = v10;
  swift_retain();
  os_unfair_lock_lock(v12);
  swift_beginAccess();
  *(void *)(v11 + 16) = 0;
  os_unfair_lock_unlock(v12);

  swift_release();
  return v13;
}

char *WorldPerson.init(_:)(__n128 a1, __n128 a2, __n128 a3, __n128 a4)
{
  uint64_t v5 = &v4[OBJC_IVAR____TtC17MeasureFoundation11WorldPerson_height];
  *(_DWORD *)uint64_t v5 = 0;
  v5[4] = 1;
  unsigned int v6 = &v4[OBJC_IVAR____TtC17MeasureFoundation11WorldPerson_timeSuggested];
  uint64_t v7 = sub_22F2237F8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = (__n128 *)&v4[OBJC_IVAR____TtC17MeasureFoundation11WorldPerson_face];
  *uint64_t v8 = a1;
  v8[1] = a2;
  v8[2] = a3;
  v8[3] = a4;
  v18.receiver = v4;
  v18.super_class = (Class)type metadata accessor for WorldPerson();
  float32x4_t v9 = (char *)objc_msgSendSuper2(&v18, sel_init);
  uint64_t v10 = *(void *)&v9[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject__state];
  uint64_t v11 = *(os_unfair_lock_s **)(v10 + 24);
  char v12 = v9;
  swift_retain();
  os_unfair_lock_lock(v11);
  swift_beginAccess();
  *(void *)(v10 + 16) = 0;
  os_unfair_lock_unlock(v11);

  swift_release();
  return v12;
}

id WorldPerson.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void WorldPerson.init()()
{
}

uint64_t sub_22F19E91C()
{
  return sub_22F19EC54(v0 + OBJC_IVAR____TtC17MeasureFoundation11WorldPerson_timeSuggested);
}

id WorldPerson.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for WorldPerson();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for WorldPerson()
{
  uint64_t result = qword_268694E10;
  if (!qword_268694E10) {
    return swift_getSingletonMetadata();
  }
  return result;
}

__n128 sub_22F19E9C0@<Q0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtC17MeasureFoundation11WorldPerson_face;
  swift_beginAccess();
  __n128 result = *(__n128 *)v3;
  long long v5 = *(_OWORD *)(v3 + 16);
  long long v6 = *(_OWORD *)(v3 + 32);
  long long v7 = *(_OWORD *)(v3 + 48);
  *a2 = *(_OWORD *)v3;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  return result;
}

__n128 sub_22F19EA1C(__n128 *a1, void *a2)
{
  __n128 v6 = a1[1];
  __n128 v7 = *a1;
  __n128 v4 = a1[3];
  __n128 v5 = a1[2];
  objc_super v2 = (__n128 *)(*a2 + OBJC_IVAR____TtC17MeasureFoundation11WorldPerson_face);
  swift_beginAccess();
  *objc_super v2 = v7;
  v2[1] = v6;
  __n128 result = v4;
  CVPixelBufferRef v2[2] = v5;
  v2[3] = v4;
  return result;
}

uint64_t sub_22F19EA94@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtC17MeasureFoundation11WorldPerson_height;
  uint64_t result = swift_beginAccess();
  char v5 = *(unsigned char *)(v3 + 4);
  *(_DWORD *)a2 = *(_DWORD *)v3;
  *(unsigned char *)(a2 + 4) = v5;
  return result;
}

uint64_t sub_22F19EAF0(int *a1, void *a2)
{
  int v2 = *a1;
  char v3 = *((unsigned char *)a1 + 4);
  uint64_t v4 = *a2 + OBJC_IVAR____TtC17MeasureFoundation11WorldPerson_height;
  uint64_t result = swift_beginAccess();
  *(_DWORD *)uint64_t v4 = v2;
  *(unsigned char *)(v4 + 4) = v3;
  return result;
}

uint64_t sub_22F19EB50()
{
  return type metadata accessor for WorldPerson();
}

void sub_22F19EB58()
{
  sub_22F19EBFC();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_22F19EBFC()
{
  if (!qword_268694E20[0])
  {
    sub_22F2237F8();
    unint64_t v0 = sub_22F2241F8();
    if (!v1) {
      atomic_store(v0, qword_268694E20);
    }
  }
}

uint64_t sub_22F19EC54(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_268694BF0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t UncertainValue.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t UncertainValue.confidence.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Clamped();
  return Clamped.wrappedValue.getter(v2, a1);
}

uint64_t UncertainValue.init(value:confidence:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v33 = a3;
  uint64_t v35 = a1;
  uint64_t v36 = a2;
  uint64_t v37 = a6;
  uint64_t v31 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  float32x2_t v32 = (char *)&v28 - v9;
  uint64_t v34 = *(void *)(a4 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  char v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  float32x4_t v15 = (char *)&v28 - v14;
  uint64_t v16 = MEMORY[0x270FA5388](v13);
  float32x4_t v29 = (char *)&v28 - v17;
  MEMORY[0x270FA5388](v16);
  objc_super v19 = (char *)&v28 - v18;
  uint64_t v30 = v37 + *(int *)(type metadata accessor for UncertainValue() + 44);
  sub_22F224578();
  sub_22F224578();
  swift_getAssociatedConformanceWitness();
  sub_22F224788();
  sub_22F224728();
  uint64_t v20 = (uint64_t)v29;
  sub_22F224558();
  float32x4_t v21 = *(void (**)(char *, uint64_t))(v34 + 8);
  v21(v12, a4);
  v21(v15, a4);
  Clamped.init(min:max:)((uint64_t)v19, v20, a4, v30);
  uint64_t v22 = v33;
  uint64_t v23 = *(void *)(v33 - 8);
  uint64_t v24 = v35;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v37, v35, v33);
  uint64_t v25 = type metadata accessor for Clamped();
  uint64_t v26 = v36;
  sub_22F181614(v36, v25);
  v21((char *)v26, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v24, v22);
}

uint64_t type metadata accessor for UncertainValue()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_22F19F094(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Clamped();
  return sub_22F181614(a1, v2);
}

uint64_t sub_22F19F0D8@<X0>(uint64_t a1@<X8>)
{
  return UncertainValue.confidence.getter(a1);
}

uint64_t sub_22F19F118(uint64_t a1)
{
  return sub_22F19F094(a1);
}

uint64_t sub_22F19F15C()
{
  return 24;
}

__n128 sub_22F19F168(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_22F19F17C()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Clamped();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_22F19F24C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8;
  int v10 = *(_DWORD *)(v8 + 80);
  uint64_t v11 = v10;
  uint64_t v12 = v6 + v10;
  uint64_t v13 = (v6 + v11) & ~v11;
  uint64_t v14 = *(void *)(v8 + 64);
  uint64_t v15 = v14 + v10;
  if (*(_DWORD *)(v8 + 84)) {
    size_t v16 = *(void *)(v8 + 64);
  }
  else {
    size_t v16 = v14 + 1;
  }
  unint64_t v17 = v16
      + v13
      + ((v14 + v10 + ((v14 + v10) & ~(unint64_t)v10)) & ~(unint64_t)v10);
  int v18 = *(_DWORD *)(v5 + 80) | v10;
  uint64_t v19 = v18;
  int v20 = v18 & 0x100000;
  if (v19 > 7 || v20 != 0 || v17 > 0x18)
  {
    uint64_t v23 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v23 + ((v19 + 16) & ~v19));
    swift_retain();
  }
  else
  {
    size_t __n = v16;
    uint64_t v24 = ~v11;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v25 = ((unint64_t)a2 + v12) & v24;
    uint64_t v26 = *(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16);
    v26(((unint64_t)v4 + v12) & v24, v25, v7);
    unint64_t v27 = (v15 + (((unint64_t)v4 + v12) & v24)) & v24;
    unint64_t v28 = (v15 + v25) & v24;
    v26(v27, v28, v7);
    float32x4_t v29 = (void *)((v15 + v27) & v24);
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))((v15 + v28) & v24, 1, v7))
    {
      memcpy(v29, (const void *)((v15 + v28) & v24), __n);
    }
    else
    {
      v26((unint64_t)v29, (v15 + v28) & v24, v7);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v29, 0, 1, v7);
    }
  }
  return v4;
}

uint64_t sub_22F19F494(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(v4 + 56);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = (v5 + a1 + v9) & ~v9;
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v15(v10, v6);
  uint64_t v11 = *(void *)(v7 + 64) + v9;
  uint64_t v12 = (v11 + v10) & ~v9;
  v15(v12, v6);
  uint64_t v13 = (v11 + v12) & ~v9;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v13, 1, v6);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v15)(v13, v6);
  }
  return result;
}

uint64_t sub_22F19F604(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 48);
  uint64_t v8 = *(void *)(a3 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = v9;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = v7 + v11;
  uint64_t v23 = a1;
  uint64_t v13 = (v12 + a1) & ~v11;
  uint64_t v14 = (v12 + a2) & ~v11;
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  v15(v13, v14, v8);
  size_t v16 = *(void *)(v9 + 64);
  size_t v17 = v16 + v11;
  size_t v18 = (v16 + v11 + v13) & ~v11;
  size_t v19 = (v16 + v11 + v14) & ~v11;
  v15(v18, v19, v8);
  int v20 = (void *)((v16 + v11 + v18) & ~v11);
  if ((*(unsigned int (**)(size_t, uint64_t, uint64_t))(v10 + 48))((v16 + v11 + v19) & ~v11, 1, v8))
  {
    if (*(_DWORD *)(v10 + 84)) {
      size_t v21 = v16;
    }
    else {
      size_t v21 = v16 + 1;
    }
    memcpy(v20, (const void *)((v17 + v19) & ~v11), v21);
  }
  else
  {
    v15((uint64_t)v20, (v17 + v19) & ~v11, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v20, 0, 1, v8);
  }
  return v23;
}

uint64_t sub_22F19F7C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 40);
  uint64_t v8 = *(void *)(a3 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = v9;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = v7 + v11;
  uint64_t v13 = (v12 + a1) & ~v11;
  uint64_t v14 = (v12 + a2) & ~v11;
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 24);
  v15(v13, v14, v8);
  size_t v16 = *(void *)(v9 + 64);
  size_t v17 = (v16 + v11 + v13) & ~v11;
  size_t v18 = (v16 + v11 + v14) & ~v11;
  v15(v17, v18, v8);
  size_t v19 = (void *)((v16 + v11 + v17) & ~v11);
  int v20 = (void *)((v16 + v11 + v18) & ~v11);
  size_t v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  LODWORD(v18) = v21(v19, 1, v8);
  int v22 = v21(v20, 1, v8);
  if (v18)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v19, v20, v8);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v19, 0, 1, v8);
      return a1;
    }
    int v23 = *(_DWORD *)(v10 + 84);
  }
  else
  {
    if (!v22)
    {
      v15((uint64_t)v19, (uint64_t)v20, v8);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v19, v8);
    int v23 = *(_DWORD *)(v10 + 84);
  }
  if (v23) {
    size_t v24 = v16;
  }
  else {
    size_t v24 = v16 + 1;
  }
  memcpy(v19, v20, v24);
  return a1;
}

uint64_t sub_22F19F9E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 32);
  uint64_t v8 = *(void *)(a3 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = v9;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = v7 + v11;
  uint64_t v23 = a1;
  uint64_t v13 = (v12 + a1) & ~v11;
  uint64_t v14 = (v12 + a2) & ~v11;
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32);
  v15(v13, v14, v8);
  size_t v16 = *(void *)(v9 + 64);
  size_t v17 = v16 + v11;
  size_t v18 = (v16 + v11 + v13) & ~v11;
  size_t v19 = (v16 + v11 + v14) & ~v11;
  v15(v18, v19, v8);
  int v20 = (void *)((v16 + v11 + v18) & ~v11);
  if ((*(unsigned int (**)(size_t, uint64_t, uint64_t))(v10 + 48))((v16 + v11 + v19) & ~v11, 1, v8))
  {
    if (*(_DWORD *)(v10 + 84)) {
      size_t v21 = v16;
    }
    else {
      size_t v21 = v16 + 1;
    }
    memcpy(v20, (const void *)((v17 + v19) & ~v11), v21);
  }
  else
  {
    v15((uint64_t)v20, (v17 + v19) & ~v11, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v20, 0, 1, v8);
  }
  return v23;
}

uint64_t sub_22F19FBA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v8 = *(void *)(a3 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = v9;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = v7 + v11;
  uint64_t v13 = (v12 + a1) & ~v11;
  uint64_t v14 = (v12 + a2) & ~v11;
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 40);
  v15(v13, v14, v8);
  size_t v16 = *(void *)(v9 + 64);
  size_t v17 = (v16 + v11 + v13) & ~v11;
  size_t v18 = (v16 + v11 + v14) & ~v11;
  v15(v17, v18, v8);
  size_t v19 = (void *)((v16 + v11 + v17) & ~v11);
  int v20 = (void *)((v16 + v11 + v18) & ~v11);
  size_t v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  LODWORD(v18) = v21(v19, 1, v8);
  int v22 = v21(v20, 1, v8);
  if (v18)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v19, v20, v8);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v19, 0, 1, v8);
      return a1;
    }
    int v23 = *(_DWORD *)(v10 + 84);
  }
  else
  {
    if (!v22)
    {
      v15((uint64_t)v19, (uint64_t)v20, v8);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v19, v8);
    int v23 = *(_DWORD *)(v10 + 84);
  }
  if (v23) {
    size_t v24 = v16;
  }
  else {
    size_t v24 = v16 + 1;
  }
  memcpy(v19, v20, v24);
  return a1;
}

uint64_t sub_22F19FDC4(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  uint64_t v9 = *(unsigned int *)(v7 + 84);
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = *(void *)(v7 + 64);
  if (v9 <= v5) {
    unsigned int v12 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v7 + 84);
  }
  if (v9) {
    uint64_t v13 = *(void *)(v7 + 64);
  }
  else {
    uint64_t v13 = v11 + 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v14 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v10;
  unsigned int v15 = a2 - v12;
  if (a2 <= v12) {
    goto LABEL_27;
  }
  uint64_t v16 = v13 + (v14 & ~v10) + ((v11 + v10 + ((v11 + v10) & ~v10)) & ~v10);
  char v17 = 8 * v16;
  if (v16 <= 3)
  {
    unsigned int v19 = ((v15 + ~(-1 << v17)) >> v17) + 1;
    if (HIWORD(v19))
    {
      int v18 = *(_DWORD *)((char *)a1 + v16);
      if (!v18) {
        goto LABEL_27;
      }
      goto LABEL_17;
    }
    if (v19 > 0xFF)
    {
      int v18 = *(unsigned __int16 *)((char *)a1 + v16);
      if (!*(unsigned __int16 *)((char *)a1 + v16)) {
        goto LABEL_27;
      }
      goto LABEL_17;
    }
    if (v19 < 2)
    {
LABEL_27:
      if (v12)
      {
        if (v5 >= v9) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(((unint64_t)a1 + v14) & ~v10, v9, v6);
        }
      }
      return 0;
    }
  }
  int v18 = *((unsigned __int8 *)a1 + v16);
  if (!*((unsigned char *)a1 + v16)) {
    goto LABEL_27;
  }
LABEL_17:
  int v20 = (v18 - 1) << v17;
  if (v16 > 3) {
    int v20 = 0;
  }
  if (v16)
  {
    if (v16 <= 3) {
      int v21 = v16;
    }
    else {
      int v21 = 4;
    }
    switch(v21)
    {
      case 2:
        int v22 = *a1;
        break;
      case 3:
        int v22 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v22 = *(_DWORD *)a1;
        break;
      default:
        int v22 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v22 = 0;
  }
  return v12 + (v22 | v20) + 1;
}

void sub_22F19FFD8(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(void *)(v6 + 64);
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = *(void *)(v8 + 64);
  if (v9 <= v7) {
    unsigned int v13 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v13 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v14 = v10 + v11;
  uint64_t v15 = (v10 + v11) & ~v11;
  uint64_t v16 = (v12 + v11 + ((v12 + v11) & ~v11)) & ~v11;
  if (!v9) {
    ++v12;
  }
  size_t v17 = v12 + v16;
  size_t v18 = v17 + v15;
  BOOL v19 = a3 >= v13;
  unsigned int v20 = a3 - v13;
  if (v20 != 0 && v19)
  {
    if (v18 <= 3)
    {
      unsigned int v24 = ((v20 + ~(-1 << (8 * v18))) >> (8 * v18)) + 1;
      if (HIWORD(v24))
      {
        int v21 = 4;
      }
      else if (v24 >= 0x100)
      {
        int v21 = 2;
      }
      else
      {
        int v21 = v24 > 1;
      }
    }
    else
    {
      int v21 = 1;
    }
  }
  else
  {
    int v21 = 0;
  }
  if (v13 < a2)
  {
    unsigned int v22 = ~v13 + a2;
    if (v18 < 4)
    {
      int v23 = (v22 >> (8 * v18)) + 1;
      if (v18)
      {
        int v25 = v22 & ~(-1 << (8 * v18));
        bzero(a1, v18);
        if (v18 == 3)
        {
          *(_WORD *)a1 = v25;
          a1[2] = BYTE2(v25);
        }
        else if (v18 == 2)
        {
          *(_WORD *)a1 = v25;
        }
        else
        {
          *a1 = v25;
        }
      }
    }
    else
    {
      bzero(a1, v18);
      *(_DWORD *)a1 = v22;
      int v23 = 1;
    }
    switch(v21)
    {
      case 1:
        a1[v18] = v23;
        return;
      case 2:
        *(_WORD *)&a1[v18] = v23;
        return;
      case 3:
        goto LABEL_56;
      case 4:
        *(_DWORD *)&a1[v18] = v23;
        return;
      default:
        return;
    }
  }
  switch(v21)
  {
    case 1:
      a1[v18] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 2:
      *(_WORD *)&a1[v18] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 3:
LABEL_56:
      __break(1u);
      JUMPOUT(0x22F1A0354);
    case 4:
      *(_DWORD *)&a1[v18] = 0;
      goto LABEL_25;
    default:
LABEL_25:
      if (a2)
      {
LABEL_26:
        if (v7 >= v9)
        {
          uint64_t v30 = *(void (**)(void))(v6 + 56);
          v30();
        }
        else
        {
          unint64_t v26 = (unint64_t)&a1[v14] & ~v11;
          if (v9 >= a2)
          {
            uint64_t v31 = *(void (**)(unint64_t))(v8 + 56);
            unint64_t v32 = (unint64_t)&a1[v14] & ~v11;
            v31(v32);
          }
          else
          {
            if (v17 <= 3) {
              int v27 = ~(-1 << (8 * v17));
            }
            else {
              int v27 = -1;
            }
            if (v17)
            {
              int v28 = v27 & (~v9 + a2);
              if (v17 <= 3) {
                int v29 = v17;
              }
              else {
                int v29 = 4;
              }
              bzero((void *)((unint64_t)&a1[v14] & ~v11), v17);
              switch(v29)
              {
                case 2:
                  *(_WORD *)unint64_t v26 = v28;
                  break;
                case 3:
                  *(_WORD *)unint64_t v26 = v28;
                  *(unsigned char *)(v26 + 2) = BYTE2(v28);
                  break;
                case 4:
                  *(_DWORD *)unint64_t v26 = v28;
                  break;
                default:
                  *(unsigned char *)unint64_t v26 = v28;
                  break;
              }
            }
          }
        }
      }
      return;
  }
}

void Synchronized.wrappedValue.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + *(void *)(*v1 + 96)));
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 88);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 16))(a1, v4);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + *(void *)(*v1 + 96)));
}

uint64_t Synchronized.wrappedValue.setter(uint64_t a1)
{
  uint64_t v3 = *v1;
  sub_22F1A0878(a1);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 8);
  return v4(a1);
}

void (*Synchronized.wrappedValue.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 80);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  unsigned int v7 = malloc(v6);
  v3[4] = v7;
  Synchronized.wrappedValue.getter((uint64_t)v7);
  return sub_22F1A05B8;
}

void sub_22F1A05B8(uint64_t a1, char a2)
{
  unint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 24);
  uint64_t v4 = *(void **)(*(void *)a1 + 32);
  uint64_t v5 = *(void *)(*(void *)a1 + 8);
  uint64_t v6 = *(void *)(*(void *)a1 + 16);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 24), v4, v5);
    sub_22F1A0878((uint64_t)v3);
    unsigned int v7 = *(void (**)(void *, uint64_t))(v6 + 8);
    v7(v3, v5);
    v7(v4, v5);
  }
  else
  {
    sub_22F1A0878(*(void *)(*(void *)a1 + 32));
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t Synchronized.__allocating_init(wrappedValue:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  Synchronized.init(wrappedValue:)(a1);
  return v2;
}

uint64_t *Synchronized.init(wrappedValue:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 96);
  uint64_t v5 = (_DWORD *)swift_slowAlloc();
  *uint64_t v5 = 0;
  *(uint64_t *)((char *)v1 + v4) = (uint64_t)v5;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 32))((uint64_t)v1 + *(void *)(*v1 + 88), a1);
  return v1;
}

uint64_t *Synchronized.deinit()
{
  uint64_t v1 = *v0;
  MEMORY[0x230FB40E0](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 96)), -1, -1);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 88));
  return v0;
}

uint64_t Synchronized.__deallocating_deinit()
{
  Synchronized.deinit();
  return swift_deallocClassInstance();
}

void sub_22F1A0878(uint64_t a1)
{
  uint64_t v3 = *v1;
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + *(void *)(*v1 + 96)));
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 88);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 24))(v4, a1);
  swift_endAccess();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + *(void *)(*v1 + 96)));
}

uint64_t sub_22F1A0960()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for Synchronized()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t OverlayMetalView.scene.getter()
{
  return swift_retain();
}

id sub_22F1A0A8C(uint64_t a1, double a2, double a3, double a4, double a5)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  v5[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_blendingEnabled] = 0;
  swift_weakInit();
  swift_weakInit();
  *(void *)&v5[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_adWindow] = 0;
  *(void *)&v5[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_scene] = 0;
  *(void *)&v5[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_demoModes] = 7;
  *(void *)&v5[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_currentDemoMode] = 0;
  *(void *)&v5[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_swipeUpRecognizer] = 0;
  *(void *)&v5[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_swipeDownRecognizer] = 0;
  if (a1)
  {
    uint64_t v12 = a1;
  }
  else
  {
    if (qword_268694378 != -1) {
      swift_once();
    }
    uint64_t v12 = static MetalBundle.device;
    swift_unknownObjectRetain();
  }
  v17.receiver = v5;
  v17.super_class = ObjectType;
  swift_unknownObjectRetain();
  id v13 = objc_msgSendSuper2(&v17, sel_initWithFrame_device_, v12, a2, a3, a4, a5);
  swift_unknownObjectRelease();
  id v14 = v13;
  objc_msgSend(v14, sel_setOpaque_, 0, v17.receiver, v17.super_class);
  id v15 = v14;
  objc_msgSend(v15, sel_setUserInteractionEnabled_, 0);

  swift_unknownObjectRelease();
  return v15;
}

void OverlayMetalView.populateScene(depthProcessor:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (id *)&v2[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_scene];
  swift_beginAccess();
  if (*v4)
  {
    sub_22F224538();
    __break(1u);
  }
  else
  {
    objc_msgSend(v2, sel_setFrame_, *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72));
    swift_weakAssign();
    swift_beginAccess();
    swift_weakAssign();
    swift_beginAccess();
    uint64_t v5 = *(void *)(a1 + 240);
    uint64_t v6 = self;
    unsigned int v7 = &selRef_clearColor;
    if ((v5 & 0x80) != 0) {
      unsigned int v7 = &selRef_blackColor;
    }
    id v8 = [v6 *v7];
    objc_msgSend(v2, sel_setBackgroundColor_, v8);

    objc_msgSend(v2, sel_setDepthStencilPixelFormat_, 252);
    type metadata accessor for OverlayMetalScene();
    swift_allocObject();
    unsigned int v9 = v2;
    swift_retain();
    *uint64_t v4 = sub_22F1B95B8(v9, a1);
    swift_release();
    uint64_t v10 = *v4;
    if (*v4)
    {
      swift_beginAccess();
      uint64_t v11 = v10[2];
      swift_beginAccess();
      unint64_t v12 = *(void *)(v11 + 24);
      if (v12 >> 62)
      {
        swift_retain();
        swift_bridgeObjectRetain();
        uint64_t v13 = sub_22F2245C8();
        swift_bridgeObjectRelease();
        swift_release();
      }
      else
      {
        uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      BOOL v14 = v13 < 1;
    }
    else
    {
      BOOL v14 = 1;
    }
    objc_msgSend(v9, sel_setHidden_, v14);
    objc_msgSend(v9, sel_setDelegate_, v9);
    if (qword_268694428 != -1) {
      swift_once();
    }
    uint64_t v15 = qword_26869BC78;
    uint64_t v16 = *(void *)(qword_26869BC78 + 16);
    if (v16)
    {
      objc_super v17 = self;
      swift_bridgeObjectRetain();
      uint64_t v18 = v15 + 40;
      do
      {
        swift_bridgeObjectRetain();
        id v19 = objc_msgSend(v17, sel_standardUserDefaults);
        unsigned int v20 = (void *)sub_22F223A98();
        swift_bridgeObjectRelease();
        objc_msgSend(v19, sel_addObserver_forKeyPath_options_context_, v9, v20, 1, 0);

        v18 += 16;
        --v16;
      }
      while (v16);
      swift_bridgeObjectRelease();
    }
    id v21 = objc_msgSend(self, sel_standardUserDefaults);
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v23 = swift_allocObject();
    swift_unknownObjectWeakInit();
    sub_22F1A321C(0, &qword_268694F48);
    unsigned int v24 = (void *)sub_22F224118();
    if (qword_268694550 != -1) {
      swift_once();
    }
    sub_22F1A202C(KeyPath, v24, v21, (uint64_t)sub_22F1A2024, v23);

    swift_release();
    swift_release();
  }
}

id sub_22F1A10FC@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_kADDemoEnabled);
  *a2 = (_BYTE)result;
  return result;
}

id sub_22F1A1130(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setKADDemoEnabled_, *a1);
}

void sub_22F1A1144(unsigned __int8 *a1, uint64_t a2)
{
  int v2 = *a1;
  uint64_t v3 = a2 + 16;
  swift_beginAccess();
  uint64_t v4 = (char *)MEMORY[0x230FB41A0](v3);
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = (char *)objc_msgSend(v4, sel_superview);
    if (!v6)
    {
      unsigned int v7 = v5;
LABEL_11:

      return;
    }
    unsigned int v7 = v6;
    if (v2)
    {
      id v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82C38]), sel_initWithTarget_action_, v5, sel_didSwipeWithSender_);
      objc_msgSend(v8, sel_setNumberOfTouchesRequired_, 2);
      objc_msgSend(v8, sel_setDirection_, 4);
      unsigned int v9 = *(void **)&v5[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_swipeUpRecognizer];
      *(void *)&v5[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_swipeUpRecognizer] = v8;
      id v10 = v8;

      id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82C38]), sel_initWithTarget_action_, v5, sel_didSwipeWithSender_);
      objc_msgSend(v11, sel_setNumberOfTouchesRequired_, 2);
      objc_msgSend(v11, sel_setDirection_, 8);
      unint64_t v12 = *(void **)&v5[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_swipeDownRecognizer];
      *(void *)&v5[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_swipeDownRecognizer] = v11;
      id v13 = v11;

      objc_msgSend(v7, sel_addGestureRecognizer_, v10);
      objc_msgSend(v7, sel_addGestureRecognizer_, v13);
    }
    else
    {
      uint64_t v14 = OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_swipeUpRecognizer;
      uint64_t v15 = *(void **)&v5[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_swipeUpRecognizer];
      if (!v15) {
        goto LABEL_10;
      }
      uint64_t v16 = OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_swipeDownRecognizer;
      objc_super v17 = *(void **)&v5[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_swipeDownRecognizer];
      if (!v17) {
        goto LABEL_10;
      }
      id v10 = v15;
      id v13 = v17;
      objc_msgSend(v7, sel_removeGestureRecognizer_, v10);
      objc_msgSend(v7, sel_removeGestureRecognizer_, v13);
      uint64_t v18 = *(void **)&v5[v16];
      *(void *)&v5[v16] = 0;

      id v19 = *(void **)&v5[v14];
      *(void *)&v5[v14] = 0;

      sub_22F1A27A8();
    }

LABEL_10:
    goto LABEL_11;
  }
}

Swift::Void __swiftcall OverlayMetalView.didUpdate(frame:)(ARFrame frame)
{
  int v2 = v1;
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = Strong;
    if (swift_weakLoadStrong())
    {
      uint64_t v6 = OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_adWindow;
      if (!*(void *)&v1[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_adWindow])
      {
        swift_beginAccess();
        if ((*(unsigned char *)(v5 + 240) & 0x40) != 0)
        {
          uint64_t v7 = ADProcessor.transformer.getter();
          uint64_t v8 = *(void *)(v7 + 1040);
          uint64_t v9 = *(void *)(v7 + 1048);
          swift_release();
          objc_msgSend(v1, sel_bounds);
          double v11 = v10;
          double v13 = v12;
          double v15 = v14;
          double v17 = v16;
          uint64_t v18 = (objc_class *)type metadata accessor for Viewport();
          id v19 = (char *)objc_allocWithZone(v18);
          uint64_t v20 = OBJC_IVAR____TtC17MeasureFoundation8Viewport_portView;
          id v21 = v19;
          *(void *)&v19[v20] = _s17MeasureFoundation8ViewportC8portView33_7C22ACC4716B0FDE2A507783D80F08CBLLSo6UIViewCvpfi_0();
          unsigned int v22 = &v21[OBJC_IVAR____TtC17MeasureFoundation8Viewport_portSize];
          *(void *)unsigned int v22 = v8;
          *((void *)v22 + 1) = v9;

          v37.receiver = v21;
          v37.super_class = v18;
          id v23 = objc_msgSendSuper2(&v37, sel_initWithFrame_, v11, v13, v15, v17);
          sub_22F189B60();

          unsigned int v24 = *(void **)&v2[v6];
          *(void *)&v2[v6] = v23;

          id v25 = objc_msgSend(v2, sel_superview);
          if (v25)
          {
            if (!*(void *)&v2[v6])
            {
              __break(1u);
              return;
            }
            unint64_t v26 = v25;
            objc_msgSend(v25, sel_addSubview_);
          }
        }
      }
      int v27 = &v2[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_scene];
      swift_beginAccess();
      uint64_t v28 = *(void *)v27;
      if (*(void *)v27)
      {
        swift_beginAccess();
        uint64_t v29 = *(void *)(v28 + 16);
        swift_beginAccess();
        unint64_t v30 = *(void *)(v29 + 24);
        if (v30 >> 62)
        {
          swift_retain();
          swift_bridgeObjectRetain();
          uint64_t v31 = sub_22F2245C8();
          swift_bridgeObjectRelease();
          swift_release();
        }
        else
        {
          uint64_t v31 = *(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        BOOL v32 = v31 < 1;
      }
      else
      {
        BOOL v32 = 1;
      }
      objc_msgSend(v2, sel_setHidden_, v32);
      uint64_t v33 = *(void *)v27;
      if (!*(void *)v27) {
        goto LABEL_21;
      }
      swift_beginAccess();
      uint64_t v34 = *(void *)(v33 + 16);
      swift_beginAccess();
      unint64_t v35 = *(void *)(v34 + 24);
      if (v35 >> 62)
      {
        swift_retain();
        swift_bridgeObjectRetain();
        uint64_t v36 = sub_22F2245C8();
        swift_bridgeObjectRelease();
        swift_release();
        if (v36 > 0)
        {
LABEL_19:
          if (*(void *)v27)
          {
            swift_retain();
            sub_22F1B8B18(frame.super.isa);
            swift_release();
          }
        }
      }
      else if (*(uint64_t *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10) > 0)
      {
        goto LABEL_19;
      }
LABEL_21:
      swift_release();
      swift_release();
      return;
    }
    swift_release();
  }
}

id OverlayMetalView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

Swift::Void __swiftcall OverlayMetalView.draw(in:)(MTKView *in)
{
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_scene);
  swift_beginAccess();
  uint64_t v4 = *v3;
  if (*v3)
  {
    swift_beginAccess();
    uint64_t v5 = *(void *)(v4 + 16);
    swift_beginAccess();
    unint64_t v6 = *(void *)(v5 + 24);
    if (v6 >> 62)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v17 = sub_22F2245C8();
      swift_bridgeObjectRelease();
      swift_release();
      if (v17 < 1) {
        return;
      }
    }
    else if (*(uint64_t *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10) < 1)
    {
      return;
    }
    id v7 = [(MTKView *)in superview];
    if (v7)
    {
      uint64_t v8 = v7;
      objc_msgSend(v7, sel_frame);
      double v10 = v9;
      double v12 = v11;
      double v14 = v13;
      double v16 = v15;

      -[MTKView setFrame:](in, sel_setFrame_, v10, v12, v14, v16);
    }
    if (*v3)
    {
      swift_retain();
      sub_22F1DA2C0();
      swift_release();
    }
  }
}

void sub_22F1A196C(void *a1)
{
  if (objc_msgSend(a1, sel_state) == (id)3)
  {
    id v3 = objc_msgSend(a1, sel_direction);
    if (v3 == (id)8)
    {
      uint64_t v4 = OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_currentDemoMode;
      uint64_t v9 = *(void *)(v1 + OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_currentDemoMode);
      uint64_t v10 = v9 - 1;
      BOOL v11 = v9 <= 0;
      uint64_t v8 = 6;
      if (!v11) {
        uint64_t v8 = v10;
      }
    }
    else
    {
      if (v3 != (id)4) {
        return;
      }
      uint64_t v4 = OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_currentDemoMode;
      uint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_currentDemoMode);
      BOOL v6 = __OFADD__(v5, 1);
      uint64_t v7 = v5 + 1;
      if (v6)
      {
        __break(1u);
        JUMPOUT(0x22F1A1D20);
      }
      uint64_t v8 = v7 % 7;
    }
    *(void *)(v1 + v4) = v8;
    sub_22F1A27A8();
    switch(*(void *)(v1 + OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_currentDemoMode))
    {
      case 1:
      case 3:
      case 4:
      case 6:
        id v15 = objc_msgSend(self, sel_standardUserDefaults);
        goto LABEL_12;
      case 2:
      case 5:
        double v12 = self;
        id v13 = objc_msgSend(v12, sel_standardUserDefaults);
        double v14 = (void *)sub_22F223A98();
        objc_msgSend(v13, sel_setBool_forKey_, 1, v14);

        id v15 = objc_msgSend(v12, sel_standardUserDefaults);
LABEL_12:
        id v16 = (id)sub_22F223A98();
        objc_msgSend(v15, sel_setBool_forKey_, 1);

        break;
      default:
        return;
    }
  }
}

id sub_22F1A1DA4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6 = objc_msgSend(self, sel_standardUserDefaults);
  uint64_t v7 = (void *)sub_22F223A98();
  id v8 = objc_msgSend(v6, sel_BOOLForKey_, v7);

  uint64_t v9 = *a1;
  uint64_t v10 = *a1 & a4;
  if (v8)
  {
    if (v10 != a4)
    {
      uint64_t v11 = v9 | a4;
LABEL_6:
      *a1 = v11;
    }
  }
  else if (v10)
  {
    uint64_t v11 = v9 & ~a4;
    goto LABEL_6;
  }
  return v8;
}

char *keypath_get_selector_kADDemoEnabled()
{
  return sel_kADDemoEnabled;
}

id sub_22F1A1FA4@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_kADDemoEnabled);
  *a2 = (_BYTE)result;
  return result;
}

id sub_22F1A1FD8(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setKADDemoEnabled_, *a1);
}

uint64_t sub_22F1A1FEC()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void sub_22F1A2024(unsigned __int8 *a1)
{
  sub_22F1A1144(a1, v1);
}

uint64_t sub_22F1A202C(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v11 = (void *)swift_allocObject();
  v11[2] = a2;
  v11[3] = a4;
  v11[4] = a5;
  swift_retain();
  id v12 = a2;
  uint64_t result = sub_22F224278();
  if (v14)
  {
    uint64_t v15 = result;
    uint64_t v16 = v14;
    uint64_t v31 = (uint64_t)v12;
    uint64_t v17 = (uint64_t *)(v6 + OBJC_IVAR____TtCE17MeasureFoundationCSo14NSUserDefaults14_DefaultsStore_actions);
    swift_beginAccess();
    uint64_t v18 = *v17;
    if (*(void *)(*v17 + 16) && (unint64_t v19 = sub_22F18DE28(v15, v16), (v20 & 1) != 0))
    {
      id v21 = *(void **)(*(void *)(v18 + 56) + 8 * v19);
      swift_endAccess();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_endAccess();
      id v21 = (void *)MEMORY[0x263F8EE78];
    }
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = sub_22F1A3084;
    *(void *)(v22 + 24) = v11;
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      id v21 = sub_22F19B208(0, v21[2] + 1, 1, v21);
    }
    unint64_t v24 = v21[2];
    unint64_t v23 = v21[3];
    if (v24 >= v23 >> 1) {
      id v21 = sub_22F19B208((void *)(v23 > 1), v24 + 1, 1, v21);
    }
    _DWORD v21[2] = v24 + 1;
    id v25 = &v21[2 * v24];
    v25[4] = sub_22F1A30C8;
    v25[5] = v22;
    uint64_t result = sub_22F224278();
    if (v26)
    {
      uint64_t v27 = result;
      uint64_t v28 = v26;
      swift_beginAccess();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v34 = *v17;
      *uint64_t v17 = 0x8000000000000000;
      sub_22F1E7178((uint64_t)v21, v27, v28, isUniquelyReferenced_nonNull_native);
      *uint64_t v17 = v34;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_endAccess();
      uint64_t v34 = (uint64_t)a3;
      uint64_t v33 = MEMORY[0x263F8D4F8];
      id v30 = a3;
      swift_getAtKeyPath();

      sub_22F1A22CC((uint64_t)v32, v31, a4, a5);
      swift_release();
      return __swift_destroy_boxed_opaque_existential_0((uint64_t)v32);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_22F1A22CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_22F2238C8();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_22F2238E8();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22F195C78(a1, (uint64_t)v20);
  uint64_t v15 = swift_allocObject();
  sub_22F186BD8(v20, (_OWORD *)(v15 + 16));
  *(void *)(v15 + 48) = a3;
  *(void *)(v15 + 56) = a4;
  aBlock[4] = sub_22F1A3110;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_22F182A20;
  aBlock[3] = &block_descriptor_0;
  uint64_t v16 = _Block_copy(aBlock);
  swift_retain();
  sub_22F2238D8();
  v18[1] = MEMORY[0x263F8EE78];
  sub_22F1A3134(&qword_268694FE8, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_268694FF0);
  sub_22F1A317C();
  sub_22F2242B8();
  MEMORY[0x230FB2B90](0, v14, v10, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

uint64_t sub_22F1A2588(void *a1, uint64_t (*a2)(id *))
{
  __swift_project_boxed_opaque_existential_0(a1, a1[3]);
  swift_getDynamicType();
  sub_22F1A321C(0, (unint64_t *)&qword_268695000);
  if (swift_dynamicCastMetatype() || (sub_22F1A321C(0, qword_268695008), swift_dynamicCastMetatype()))
  {
    sub_22F195C78((uint64_t)a1, (uint64_t)v9);
    swift_dynamicCast();
    unsigned __int8 v4 = objc_msgSend(v8, sel_BOOLValue);

    unsigned __int8 v7 = v4;
    uint64_t v5 = (id *)&v7;
  }
  else
  {
    sub_22F195C78((uint64_t)a1, (uint64_t)v9);
    swift_dynamicCast();
    uint64_t v5 = &v8;
  }
  return a2(v5);
}

void sub_22F1A26C8()
{
  v0[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_blendingEnabled] = 0;
  swift_weakInit();
  swift_weakInit();
  *(void *)&v0[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_adWindow] = 0;
  *(void *)&v0[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_scene] = 0;
  *(void *)&v0[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_demoModes] = 7;
  *(void *)&v0[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_currentDemoMode] = 0;
  *(void *)&v0[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_swipeUpRecognizer] = 0;
  *(void *)&v0[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_swipeDownRecognizer] = 0;

  sub_22F224538();
  __break(1u);
}

void sub_22F1A27A8()
{
  uint64_t v0 = self;
  id v1 = objc_msgSend(v0, sel_standardUserDefaults);
  objc_super v2 = (void *)sub_22F223A98();
  objc_msgSend(v1, sel_setBool_forKey_, 0, v2);

  id v3 = objc_msgSend(v0, sel_standardUserDefaults);
  unsigned __int8 v4 = (void *)sub_22F223A98();
  objc_msgSend(v3, sel_setBool_forKey_, 0, v4);

  id v5 = objc_msgSend(v0, sel_standardUserDefaults);
  uint64_t v6 = (void *)sub_22F223A98();
  objc_msgSend(v5, sel_setBool_forKey_, 0, v6);

  id v7 = objc_msgSend(v0, sel_standardUserDefaults);
  id v8 = (void *)sub_22F223A98();
  objc_msgSend(v7, sel_setBool_forKey_, 0, v8);

  id v9 = objc_msgSend(v0, sel_standardUserDefaults);
  uint64_t v10 = (void *)sub_22F223A98();
  objc_msgSend(v9, sel_setBool_forKey_, 0, v10);

  id v11 = objc_msgSend(v0, sel_standardUserDefaults);
  uint64_t v12 = (void *)sub_22F223A98();
  objc_msgSend(v11, sel_setBool_forKey_, 0, v12);

  id v13 = objc_msgSend(v0, sel_standardUserDefaults);
  uint64_t v14 = (void *)sub_22F223A98();
  objc_msgSend(v13, sel_setBool_forKey_, 0, v14);

  id v15 = objc_msgSend(v0, sel_standardUserDefaults);
  id v16 = (id)sub_22F223A98();
  objc_msgSend(v15, sel_setBool_forKey_, 0, v16);
}

uint64_t _s17MeasureFoundation16OverlayMetalViewC12observeValue10forKeyPath2of6change7contextySSSg_ypSgSDySo05NSKeyg6ChangeI0aypGSgSvSgtF_0(uint64_t a1, uint64_t a2)
{
  id v3 = v2;
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    return result;
  }
  uint64_t v7 = result;
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v9 = Strong;
    if (a2)
    {
      if (qword_268694420 != -1) {
        swift_once();
      }
      uint64_t v10 = qword_26869BC70;
      if (*(void *)(qword_26869BC70 + 16))
      {
        swift_bridgeObjectRetain();
        unint64_t v11 = sub_22F18DE28(a1, a2);
        if (v12)
        {
          uint64_t v13 = *(void *)(*(void *)(v10 + 56) + 8 * v11);
          swift_bridgeObjectRelease();
          swift_beginAccess();
          unsigned __int8 v14 = sub_22F1A1DA4((uint64_t *)(v7 + 240), a1, a2, v13);
          swift_endAccess();
          if (v13 > 63)
          {
            switch(v13)
            {
              case 64:
                unint64_t v23 = *(void **)&v3[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_adWindow];
                if (v23) {
                  objc_msgSend(v23, sel_setHidden_, (v14 & 1) == 0);
                }
                break;
              case 128:
                unint64_t v24 = self;
                id v25 = &selRef_blackColor;
                if ((v14 & 1) == 0) {
                  id v25 = &selRef_clearColor;
                }
                id v26 = [v24 *v25];
                objc_msgSend(v3, sel_setBackgroundColor_, v26);

                break;
              case 4096:
                swift_beginAccess();
                *(unsigned char *)(v9 + 242) = v14 & 1;
                break;
            }
          }
          else
          {
            switch(v13)
            {
              case 2:
                unint64_t v19 = &v3[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_scene];
                swift_beginAccess();
                if (*(void *)v19)
                {
                  swift_retain();
                  uint64_t v20 = (uint64_t)sub_22F1B93B8();
                  goto LABEL_27;
                }
                break;
              case 4:
                id v21 = &v3[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_scene];
                swift_beginAccess();
                if (*(void *)v21)
                {
                  swift_retain();
                  uint64_t v20 = sub_22F1B92F8();
LABEL_27:
                  uint64_t v22 = (unsigned char *)v20;
                  swift_release();
                  swift_beginAccess();
                  v22[32] = v14 & 1;
                  swift_beginAccess();
                  v22[33] = v14 & 1;
                  swift_beginAccess();
                  v22[34] = v14 & 1;
                  swift_release();
                }
                break;
              case 8:
              case 16:
                uint64_t v15 = *(void *)(v7 + 240);
                id v16 = &v3[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_scene];
                swift_beginAccess();
                if (*(void *)v16)
                {
                  swift_retain();
                  uint64_t v17 = sub_22F1B9478();
                  swift_release();
                  BOOL v18 = (v15 & 0x18) != 0;
                  swift_beginAccess();
                  v17[32] = v18;
                  swift_beginAccess();
                  v17[33] = v18;
                  swift_beginAccess();
                  v17[34] = v18;
                  swift_release();
                }
                break;
              default:
                break;
            }
          }
          uint64_t v27 = &v3[OBJC_IVAR____TtC17MeasureFoundation16OverlayMetalView_scene];
          swift_beginAccess();
          uint64_t v28 = *(void *)v27;
          if (v28)
          {
            swift_beginAccess();
            uint64_t v29 = *(void *)(v28 + 16);
            swift_beginAccess();
            unint64_t v30 = *(void *)(v29 + 24);
            if (v30 >> 62)
            {
              swift_retain();
              swift_bridgeObjectRetain();
              uint64_t v31 = sub_22F2245C8();
              swift_bridgeObjectRelease();
              swift_release();
            }
            else
            {
              uint64_t v31 = *(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
            }
            BOOL v32 = v31 < 1;
          }
          else
          {
            BOOL v32 = 1;
          }
          objc_msgSend(v3, sel_setHidden_, v32);
          swift_release();
          return swift_release();
        }
        else
        {
          swift_release();
          swift_release();
          return swift_bridgeObjectRelease();
        }
      }
    }
    swift_release();
  }
  return swift_release();
}

uint64_t type metadata accessor for OverlayMetalView()
{
  return self;
}

uint64_t sub_22F1A2FE4(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_268694C20);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_22F1A3044()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_22F1A3084(uint64_t a1)
{
  return sub_22F1A22CC(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_22F1A3090()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_22F1A30C8(uint64_t a1)
{
  return sub_22F21C204(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_22F1A30D0()
{
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  swift_release();
  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t sub_22F1A3110()
{
  return sub_22F1A2588((void *)(v0 + 16), *(uint64_t (**)(id *))(v0 + 48));
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t sub_22F1A3134(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_22F1A317C()
{
  unint64_t result = qword_268694FF8;
  if (!qword_268694FF8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_268694FF0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268694FF8);
  }
  return result;
}

void *__swift_project_boxed_opaque_existential_0(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_22F1A321C(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

int32x2_t SIMD4<>.xz.getter(int8x16_t a1)
{
  return vzip1_s32(*(int32x2_t *)a1.i8, (int32x2_t)*(_OWORD *)&vextq_s8(a1, a1, 8uLL));
}

uint64_t SIMD4<>.rgba.getter(float32x4_t a1)
{
  float v1 = 255.0 * a1.f32[0];
  if ((float)(255.0 * a1.f32[0]) <= -1.0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v1 >= 4295000000.0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  float v2 = vmuls_lane_f32(255.0, *(float32x2_t *)a1.f32, 1);
  if (v2 <= -1.0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v2 >= 4295000000.0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  float v3 = vmuls_lane_f32(255.0, a1, 2);
  if (v3 <= -1.0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v3 >= 4295000000.0)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  float v4 = vmuls_lane_f32(255.0, a1, 3);
  if ((~LODWORD(v4) & 0x7F800000) == 0
    || (LODWORD(v3) & 0x7F800000) == 0x7F800000
    || (LODWORD(v1) & 0x7F800000) == 0x7F800000
    || (LODWORD(v2) & 0x7F800000) == 0x7F800000)
  {
    goto LABEL_20;
  }
  if (v4 <= -1.0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v4 < 4295000000.0) {
    return v4 | (v2 << 16) | (v1 << 24) | (v3 << 8);
  }
LABEL_22:
  __break(1u);
  return result;
}

unint64_t static Graphics.blendARGB(srcColor:dstColor:)(unint64_t result, unsigned int a2)
{
  float v2 = (float)a2 / 255.0;
  float v3 = (float)result / 255.0;
  if ((float)(v3 + v2) <= 1.0) {
    float v4 = (float)(v3 + v2) * 255.0;
  }
  else {
    float v4 = 255.0;
  }
  if ((~LODWORD(v4) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v4 <= -9.2234e18)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v4 >= 9.2234e18)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  unsigned int v6 = result;
  float v7 = v3 * (float)(1.0 - v2);
  uint64_t v8 = lroundf(v7 * (float)BYTE1(result));
  uint64_t result = lroundf(v2 * (float)BYTE1(a2));
  unint64_t v9 = v8 + result;
  if (__OFADD__(v8, result))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v10 = lroundf(v7 * (float)BYTE2(v6));
  uint64_t result = lroundf(v2 * (float)BYTE2(a2));
  BOOL v11 = __OFADD__(v10, result);
  unint64_t v12 = v10 + result;
  if (v11)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v13 = lroundf(v7 * (float)HIBYTE(v6));
  uint64_t result = lroundf(v2 * (float)HIBYTE(a2));
  if (__OFADD__(v13, result))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t result = (uint64_t)v4 | (v9 << 8) | (v12 << 16) | ((v13 + result) << 24);
  if ((result & 0x8000000000000000) != 0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (HIDWORD(result)) {
LABEL_20:
  }
    __break(1u);
  return result;
}

uint64_t Graphics.deinit()
{
  return v0;
}

uint64_t Graphics.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

unint64_t _s17MeasureFoundation8GraphicsC9blendBGRA8srcColor03dstG0s6UInt32VAH_AHtFZ_0(unint64_t result, unsigned int a2)
{
  float v2 = (float)HIBYTE(a2) / 255.0;
  float v3 = (float)BYTE3(result) / 255.0;
  if ((float)(v3 + v2) <= 1.0) {
    float v4 = (float)(v3 + v2) * 255.0;
  }
  else {
    float v4 = 255.0;
  }
  if ((~LODWORD(v4) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v4 <= -9.2234e18)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v4 >= 9.2234e18)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  __int16 v6 = result;
  float v7 = v3 * (float)(1.0 - v2);
  uint64_t v8 = lroundf(v7 * (float)BYTE2(result));
  uint64_t result = lroundf(v2 * (float)BYTE2(a2));
  unint64_t v9 = v8 + result;
  if (__OFADD__(v8, result))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v10 = lroundf(v7 * (float)HIBYTE(v6));
  uint64_t result = lroundf(v2 * (float)BYTE1(a2));
  BOOL v11 = __OFADD__(v10, result);
  unint64_t v12 = v10 + result;
  if (v11)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v13 = lroundf(v7 * (float)v6);
  uint64_t result = lroundf(v2 * (float)a2);
  if (__OFADD__(v13, result))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t result = (v9 << 16) | ((uint64_t)v4 << 24) | (v12 << 8) | (v13 + result);
  if ((result & 0x8000000000000000) != 0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (HIDWORD(result)) {
LABEL_20:
  }
    __break(1u);
  return result;
}

unint64_t _s17MeasureFoundation8GraphicsC8multiply5color6normals6UInt32VAH_s5SIMD4VySfGtFZ_0(unsigned int a1, float32x4_t a2)
{
  if ((float)((float)HIBYTE(a1) * a2.f32[0]) <= 255.0) {
    float v3 = (float)HIBYTE(a1) * a2.f32[0];
  }
  else {
    float v3 = 255.0;
  }
  uint64_t v4 = lroundf(v3);
  float v5 = vmuls_lane_f32((float)BYTE2(a1), *(float32x2_t *)a2.f32, 1);
  if (v5 > 255.0) {
    float v5 = 255.0;
  }
  uint64_t v6 = lroundf(v5);
  float v7 = vmuls_lane_f32((float)BYTE1(a1), a2, 2);
  if (v7 > 255.0) {
    float v7 = 255.0;
  }
  uint64_t v8 = lroundf(v7);
  float v9 = vmuls_lane_f32((float)a1, a2, 3);
  if (v9 > 255.0) {
    float v9 = 255.0;
  }
  unint64_t result = (v6 << 16) | (v4 << 24) | (v8 << 8) | lroundf(v9);
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (HIDWORD(result)) {
LABEL_14:
  }
    __break(1u);
  return result;
}

uint64_t type metadata accessor for Graphics()
{
  return self;
}

uint64_t Histogram.data.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Histogram.max.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 36);
  swift_getTupleTypeMetadata2();
  uint64_t v5 = sub_22F2241F8();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t Histogram.min.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 40);
  swift_getTupleTypeMetadata2();
  uint64_t v5 = sub_22F2241F8();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

float Histogram.sumOfValues.getter(uint64_t a1)
{
  return *(float *)(v1 + *(int *)(a1 + 44));
}

float Histogram.getValue(of:)(uint64_t a1, uint64_t a2)
{
  MEMORY[0x230FB2430](&v4, a1, *v2, *(void *)(a2 + 16), MEMORY[0x263F8D5C8], *(void *)(a2 + 24));
  float result = *(float *)&v4;
  if (BYTE4(v4)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_22F1A391C()
{
  swift_getTupleTypeMetadata2();
  uint64_t result = sub_22F2241F8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_22F1A39EC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(unsigned int *)(v5 + 84);
  uint64_t v8 = v6 & 0xFC | 3;
  uint64_t v9 = *(void *)(v5 + 64) + 3;
  unint64_t v10 = (v9 & 0xFFFFFFFFFFFFFFFCLL) + 5;
  if (v7) {
    size_t v11 = (v9 & 0xFFFFFFFFFFFFFFFCLL) + 4;
  }
  else {
    size_t v11 = (v9 & 0xFFFFFFFFFFFFFFFCLL) + 5;
  }
  unint64_t v12 = ((v11 + 3 + ((v11 + v8 + (((v6 & 0xFC) + 11) & ~v8)) & ~v8)) & 0xFFFFFFFFFFFFFFFCLL) + 4;
  int v13 = v6 & 0x100000;
  uint64_t v14 = *a2;
  *a1 = *a2;
  if (v8 <= 7 && v13 == 0 && v12 <= 0x18)
  {
    uint64_t v34 = v9;
    unint64_t v36 = (v9 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    uint64_t v37 = v4;
    uint64_t v18 = ~v8;
    unint64_t v35 = a1;
    uint64_t v19 = (uint64_t)a1 + v8 + 8;
    uint64_t v20 = v19 & ~v8;
    uint64_t v21 = (uint64_t)a2 + v8 + 8;
    uint64_t v22 = (_DWORD *)(v21 & ~v8);
    swift_bridgeObjectRetain();
    if (v7)
    {
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v21 & ~v8, v7, v37))
      {
LABEL_23:
        uint64_t v30 = v21 & ~v8;
        uint64_t v28 = v37;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v19 & ~v8, v30, v37);
        *(_DWORD *)((v34 + v20) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v22 + v34) & 0xFFFFFFFFFFFFFFFCLL);
        if (v7)
        {
          uint64_t v17 = v35;
          unint64_t v27 = v36;
          id v25 = (unsigned char *)((v36 + v8 + v20) & v18);
          id v26 = (int *)(((unint64_t)v22 + v36 + v8) & v18);
LABEL_25:
          if (!(*(unsigned int (**)(int *, uint64_t, uint64_t))(v5 + 48))(v26, v7, v28))
          {
LABEL_33:
            (*(void (**)(unsigned char *, int *, uint64_t))(v5 + 16))(v25, v26, v28);
            *(_DWORD *)((unint64_t)&v25[v34] & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v26 + v34) & 0xFFFFFFFFFFFFFFFCLL);
            if (!v7) {
              v25[v27] = 0;
            }
            goto LABEL_35;
          }
LABEL_32:
          memcpy(v25, v26, v11);
LABEL_35:
          *(_DWORD *)((unint64_t)&v25[v11 + 3] & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v26
                                                                                           + v11
                                                                                           + 3) & 0xFFFFFFFFFFFFFFFCLL);
          return v17;
        }
        uint64_t v17 = v35;
        *(unsigned char *)(v20 + v36) = 0;
        id v25 = (unsigned char *)((v10 + v8 + v20) & v18);
        id v26 = (int *)(((unint64_t)v22 + v10 + v8) & v18);
        unint64_t v27 = v36;
        int v29 = *((unsigned __int8 *)v26 + v36);
        if (!*((unsigned char *)v26 + v36)) {
          goto LABEL_33;
        }
LABEL_28:
        int v31 = v29 - 1;
        if (v27)
        {
          int v31 = 0;
          int v32 = *v26;
        }
        else
        {
          int v32 = 0;
        }
        if ((v32 | v31) == 0xFFFFFFFF) {
          goto LABEL_33;
        }
        goto LABEL_32;
      }
    }
    else
    {
      if (!*((unsigned char *)v22 + v36)) {
        goto LABEL_23;
      }
      int v23 = *((unsigned __int8 *)v22 + v36) - 1;
      int v24 = v36;
      if (v36)
      {
        int v23 = 0;
        int v24 = *v22;
      }
      if ((v24 | v23) == 0xFFFFFFFF) {
        goto LABEL_23;
      }
    }
    memcpy((void *)(v19 & ~v8), (const void *)(v21 & ~v8), v11);
    id v25 = (unsigned char *)(((v19 | v8) + v11) & v18);
    id v26 = (int *)(((v21 | v8) + v11) & v18);
    uint64_t v17 = v35;
    unint64_t v27 = v36;
    uint64_t v28 = v37;
    if (v7) {
      goto LABEL_25;
    }
    int v29 = *((unsigned __int8 *)v26 + v36);
    if (!*((unsigned char *)v26 + v36)) {
      goto LABEL_33;
    }
    goto LABEL_28;
  }
  uint64_t v17 = (uint64_t *)(v14 + ((v8 & 0xF8 ^ 0x1F8) & (v8 + 16)));
  swift_retain();
  return v17;
}

uint64_t sub_22F1A3D0C(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(_DWORD *)(v5 + 80) & 0xFCLL | 3;
  uint64_t v8 = a1 + v7 + 8;
  uint64_t v9 = (_DWORD *)(v8 & ~v7);
  unint64_t v10 = (*(void *)(v5 + 64) + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v11 = v10 + 4;
  uint64_t v22 = v5;
  if (v6)
  {
    int v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v8 & ~v7, v6, v4);
    uint64_t v5 = v22;
    if (v12) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (!*((unsigned char *)v9 + v11)
    || ((int v13 = *((unsigned __int8 *)v9 + v11) - 1, v10 == -4) ? (v14 = 0) : (int v13 = 0, v14 = *v9),
        (v14 | v13) == 0xFFFFFFFF))
  {
LABEL_9:
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v8 & ~v7, v4);
    uint64_t v5 = v22;
  }
LABEL_10:
  unint64_t v15 = v10 + 5;
  if (v6) {
    unint64_t v15 = v10 + 4;
  }
  id v16 = (_DWORD *)(((v8 | v7) + v15) & ~v7);
  if (v6)
  {
    uint64_t result = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v5 + 48))(v16, v6, v4);
    uint64_t v5 = v22;
    if (result) {
      return result;
    }
    goto LABEL_21;
  }
  if (!*((unsigned char *)v16 + v11)
    || ((v18 = *((unsigned __int8 *)v16 + v11) - 1, v10 == -4) ? (int v19 = 0) : (v18 = 0, int v19 = *v16),
        int v20 = v19 | v18,
        uint64_t result = (v20 + 1),
        v20 == -1))
  {
LABEL_21:
    uint64_t v21 = *(uint64_t (**)(_DWORD *, uint64_t))(v5 + 8);
    return v21(v16, v4);
  }
  return result;
}

void *sub_22F1A3F04(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v3 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned int *)(v4 + 84);
  uint64_t v6 = *(_DWORD *)(v4 + 80) & 0xFCLL;
  uint64_t v7 = v6 | 3;
  v6 += 11;
  unint64_t v8 = (unint64_t)a1 + v6;
  unint64_t v9 = ((unint64_t)a1 + v6) & ~v7;
  unint64_t v10 = (unint64_t)a2 + v6;
  unint64_t v11 = (int *)(((unint64_t)a2 + v6) & ~v7);
  uint64_t v25 = *(void *)(v4 + 64) + 3;
  unint64_t v12 = v25 & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v13 = (v25 & 0xFFFFFFFFFFFFFFFCLL) + 4;
  swift_bridgeObjectRetain();
  uint64_t v27 = v3;
  if (v5)
  {
    if (!(*(unsigned int (**)(int *, uint64_t, uint64_t))(v4 + 48))(v11, v5, v3)) {
      goto LABEL_13;
    }
LABEL_9:
    if (v5) {
      size_t v16 = (v25 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    }
    else {
      size_t v16 = v12 + 5;
    }
    memcpy((void *)(v8 & ~v7), v11, v16);
    uint64_t v17 = ~v7;
    goto LABEL_15;
  }
  if (*((unsigned char *)v11 + v13))
  {
    int v14 = *((unsigned __int8 *)v11 + v13) - 1;
    if ((v25 & 0xFFFFFFFC) == 0xFFFFFFFC)
    {
      int v15 = 0;
    }
    else
    {
      int v14 = 0;
      int v15 = *v11;
    }
    if ((v15 | v14) != 0xFFFFFFFF) {
      goto LABEL_9;
    }
  }
LABEL_13:
  (*(void (**)(unint64_t, int *, uint64_t))(v4 + 16))(v8 & ~v7, v11, v3);
  *(_DWORD *)((v25 + v9) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v11 + v25) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v17 = ~v7;
  if (!v5) {
    *(unsigned char *)(v9 + v13) = 0;
  }
LABEL_15:
  if (v5) {
    size_t v18 = (v25 & 0xFFFFFFFFFFFFFFFCLL) + 4;
  }
  else {
    size_t v18 = v12 + 5;
  }
  int v19 = (void *)(((v8 | v7) + v18) & v17);
  int v20 = (_DWORD *)(((v10 | v7) + v18) & v17);
  if (!v5)
  {
    uint64_t v21 = v27;
    if (!*((unsigned char *)v20 + v13)) {
      goto LABEL_27;
    }
    int v22 = *((unsigned __int8 *)v20 + v13) - 1;
    if ((v25 & 0xFFFFFFFC) == 0xFFFFFFFC)
    {
      int v23 = 0;
    }
    else
    {
      int v22 = 0;
      int v23 = *v20;
    }
    if ((v23 | v22) == 0xFFFFFFFF) {
      goto LABEL_27;
    }
LABEL_26:
    memcpy(v19, v20, v18);
    uint64_t result = a1;
    goto LABEL_29;
  }
  uint64_t v21 = v27;
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v4 + 48))(v20, v5, v27)) {
    goto LABEL_26;
  }
LABEL_27:
  (*(void (**)(void *, _DWORD *, uint64_t))(v4 + 16))(v19, v20, v21);
  *(_DWORD *)(((unint64_t)v19 + v25) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v20 + v25) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t result = a1;
  if (!v5) {
    *((unsigned char *)v19 + v13) = 0;
  }
LABEL_29:
  *(_DWORD *)(((unint64_t)v19 + v18 + 3) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v20 + v18 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  return result;
}

float sub_22F1A41A4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(_DWORD *)(v7 + 80) & 0xFCLL;
  uint64_t v10 = v9 | 3;
  v9 += 11;
  unint64_t v11 = (unint64_t)a1 + v9;
  uint64_t v53 = ~v10;
  unint64_t v12 = (_DWORD *)(((unint64_t)a1 + v9) & ~v10);
  unint64_t v13 = (unint64_t)a2 + v9;
  int v14 = (int *)(((unint64_t)a2 + v9) & ~v10);
  uint64_t v15 = *(void *)(v7 + 64) + 3;
  uint64_t v52 = v15;
  unint64_t v16 = v15 & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v17 = (v15 & 0xFFFFFFFFFFFFFFFCLL) + 4;
  uint64_t v54 = v6;
  if (v8)
  {
    uint64_t v50 = v10;
    float32x4_t v51 = (char *)v11;
    unint64_t v49 = v15 & 0xFFFFFFFFFFFFFFFCLL;
    size_t v18 = *(uint64_t (**)(int *, uint64_t, uint64_t))(v7 + 48);
    int v19 = v12;
    int v20 = v18(v12, v8, v6);
    int v21 = v18(v14, v8, v6);
    unint64_t v12 = v19;
    unint64_t v16 = v49;
    uint64_t v10 = v50;
    unint64_t v22 = v17;
    if (v20)
    {
      unint64_t v11 = (unint64_t)v51;
      if (v21)
      {
LABEL_4:
        if (v8) {
          size_t v23 = v22;
        }
        else {
          size_t v23 = v16 + 5;
        }
        int v24 = v12;
LABEL_28:
        memcpy(v24, v14, v23);
        goto LABEL_34;
      }
      goto LABEL_32;
    }
    goto LABEL_23;
  }
  unint64_t v22 = (v15 & 0xFFFFFFFFFFFFFFFCLL) + 4;
  if (!*((unsigned char *)v12 + v17)
    || ((int v25 = *((unsigned __int8 *)v12 + v17) - 1, !v17) ? (v26 = 0) : (int v25 = 0, v26 = *v12),
        (v26 | v25) == 0xFFFFFFFF))
  {
    if (!*((unsigned char *)v14 + v17))
    {
LABEL_29:
      int v32 = v12;
      (*(void (**)(_DWORD *, int *, uint64_t))(v7 + 24))(v12, v14, v54);
      *(_DWORD *)(((unint64_t)v32 + v52) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v14 + v52) & 0xFFFFFFFFFFFFFFFCLL);
      goto LABEL_34;
    }
    int v29 = *((unsigned __int8 *)v14 + v17) - 1;
    if (v17) {
      int v29 = 0;
    }
    float32x4_t v51 = (char *)v11;
    if (v17) {
      int v30 = *v14;
    }
    else {
      int v30 = 0;
    }
    int v21 = (v30 | v29) + 1;
LABEL_23:
    unint64_t v11 = (unint64_t)v51;
    if (v21)
    {
      int v31 = v12;
      (*(void (**)(_DWORD *, uint64_t))(v7 + 8))(v12, v54);
      if (v8) {
        size_t v23 = v22;
      }
      else {
        size_t v23 = v16 + 5;
      }
      int v24 = v31;
      goto LABEL_28;
    }
    goto LABEL_29;
  }
  if (*((unsigned char *)v14 + v17))
  {
    int v27 = *((unsigned __int8 *)v14 + v17) - 1;
    if (v17)
    {
      int v27 = 0;
      int v28 = *v14;
    }
    else
    {
      int v28 = 0;
    }
    if ((v28 | v27) != 0xFFFFFFFF) {
      goto LABEL_4;
    }
  }
LABEL_32:
  uint64_t v33 = v12;
  (*(void (**)(_DWORD *, int *, uint64_t))(v7 + 16))(v12, v14, v54);
  *(_DWORD *)(((unint64_t)v33 + v52) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v14 + v52) & 0xFFFFFFFFFFFFFFFCLL);
  if (!v8) {
    *((unsigned char *)v33 + v22) = 0;
  }
LABEL_34:
  if (v8) {
    size_t v34 = v22;
  }
  else {
    size_t v34 = v16 + 5;
  }
  size_t v35 = ((v11 | v10) + v34) & v53;
  size_t v36 = ((v13 | v10) + v34) & v53;
  if (!v8)
  {
    if (*(unsigned char *)(v35 + v22))
    {
      int v41 = *(unsigned __int8 *)(v35 + v22) - 1;
      if (v22)
      {
        int v41 = 0;
        int v42 = *(_DWORD *)v35;
      }
      else
      {
        int v42 = 0;
      }
      if ((v42 | v41) != 0xFFFFFFFF)
      {
        uint64_t v38 = v54;
        if (!*(unsigned char *)(v36 + v22)) {
          goto LABEL_61;
        }
        int v43 = *(unsigned __int8 *)(v36 + v22) - 1;
        if (v22)
        {
          int v43 = 0;
          int v44 = *(_DWORD *)v36;
        }
        else
        {
          int v44 = 0;
        }
        if ((v44 | v43) == 0xFFFFFFFF) {
          goto LABEL_61;
        }
LABEL_59:
        memcpy((void *)v35, (const void *)v36, v34);
        goto LABEL_60;
      }
    }
    uint64_t v38 = v54;
    if (!*(unsigned char *)(v36 + v22))
    {
LABEL_56:
      (*(void (**)(size_t, size_t, uint64_t))(v7 + 24))(v35, v36, v38);
      *(_DWORD *)((v52 + v35) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)((v52 + v36) & 0xFFFFFFFFFFFFFFFCLL);
      goto LABEL_60;
    }
    int v45 = *(unsigned __int8 *)(v36 + v22) - 1;
    if (v22)
    {
      int v45 = 0;
      int v46 = *(_DWORD *)v36;
    }
    else
    {
      int v46 = 0;
    }
    int v40 = (v46 | v45) + 1;
LABEL_54:
    if (v40)
    {
      (*(void (**)(size_t, uint64_t))(v7 + 8))(v35, v38);
      goto LABEL_59;
    }
    goto LABEL_56;
  }
  uint64_t v37 = *(uint64_t (**)(size_t, uint64_t, uint64_t))(v7 + 48);
  uint64_t v38 = v54;
  int v39 = v37(v35, v8, v54);
  int v40 = v37(v36, v8, v54);
  if (!v39) {
    goto LABEL_54;
  }
  if (v40) {
    goto LABEL_59;
  }
LABEL_61:
  (*(void (**)(size_t, size_t, uint64_t))(v7 + 16))(v35, v36, v38);
  *(_DWORD *)((v52 + v35) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)((v52 + v36) & 0xFFFFFFFFFFFFFFFCLL);
  if (!v8) {
    *(unsigned char *)(v35 + v22) = 0;
  }
LABEL_60:
  float32x4_t v47 = (float *)(((v36 | 3) + v34) & 0xFFFFFFFFFFFFFFFCLL);
  float result = *v47;
  *(float *)(((v35 | 3) + v34) & 0xFFFFFFFFFFFFFFFCLL) = *v47;
  return result;
}

void *sub_22F1A4660(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v4 = *(unsigned int *)(v3 + 84);
  uint64_t v5 = *(_DWORD *)(v3 + 80) & 0xFCLL;
  uint64_t v6 = v5 | 3;
  uint64_t v7 = v5 + 11;
  unint64_t v8 = (unint64_t)a1 + v7;
  uint64_t v9 = ~v6;
  uint64_t v10 = (void *)(((unint64_t)a1 + v7) & ~v6);
  unint64_t v11 = (unint64_t)a2 + v7;
  unint64_t v12 = (int *)(((unint64_t)a2 + v7) & ~v6);
  uint64_t v25 = *(void *)(v3 + 64) + 3;
  unint64_t v13 = v25 & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v14 = (v25 & 0xFFFFFFFFFFFFFFFCLL) + 4;
  uint64_t v27 = *(void *)(a3 + 16);
  if (v4)
  {
    if (!(*(unsigned int (**)(unint64_t, uint64_t, void))(v3 + 48))(((unint64_t)a2 + v7) & ~v6, v4, *(void *)(a3 + 16)))goto LABEL_13; {
LABEL_9:
    }
    if (v4) {
      size_t v17 = (v25 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    }
    else {
      size_t v17 = v13 + 5;
    }
    memcpy(v10, v12, v17);
    goto LABEL_15;
  }
  if (*((unsigned char *)v12 + v14))
  {
    int v15 = *((unsigned __int8 *)v12 + v14) - 1;
    if ((v25 & 0xFFFFFFFC) == 0xFFFFFFFC)
    {
      int v16 = 0;
    }
    else
    {
      int v15 = 0;
      int v16 = *v12;
    }
    if ((v16 | v15) != 0xFFFFFFFF) {
      goto LABEL_9;
    }
  }
LABEL_13:
  (*(void (**)(void *, int *, uint64_t))(v3 + 32))(v10, v12, v27);
  *(_DWORD *)(((unint64_t)v10 + v25) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v12 + v25) & 0xFFFFFFFFFFFFFFFCLL);
  if (!v4) {
    *((unsigned char *)v10 + v14) = 0;
  }
LABEL_15:
  if (v4) {
    size_t v18 = (v25 & 0xFFFFFFFFFFFFFFFCLL) + 4;
  }
  else {
    size_t v18 = v13 + 5;
  }
  int v19 = (void *)(((v8 | v6) + v18) & v9);
  int v20 = (_DWORD *)(((v11 | v6) + v18) & v9);
  if (!v4)
  {
    uint64_t v21 = v27;
    if (!*((unsigned char *)v20 + v14)) {
      goto LABEL_27;
    }
    int v22 = *((unsigned __int8 *)v20 + v14) - 1;
    if ((v25 & 0xFFFFFFFC) == 0xFFFFFFFC)
    {
      int v23 = 0;
    }
    else
    {
      int v22 = 0;
      int v23 = *v20;
    }
    if ((v23 | v22) == 0xFFFFFFFF) {
      goto LABEL_27;
    }
LABEL_26:
    memcpy(v19, v20, v18);
    float result = a1;
    goto LABEL_29;
  }
  uint64_t v21 = v27;
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v3 + 48))(v20, v4, v27)) {
    goto LABEL_26;
  }
LABEL_27:
  (*(void (**)(void *, _DWORD *, uint64_t))(v3 + 32))(v19, v20, v21);
  float result = a1;
  *(_DWORD *)(((unint64_t)v19 + v25) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v20 + v25) & 0xFFFFFFFFFFFFFFFCLL);
  if (!v4) {
    *((unsigned char *)v19 + v14) = 0;
  }
LABEL_29:
  *(_DWORD *)(((unint64_t)v19 + v18 + 3) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v20 + v18 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  return result;
}

float sub_22F1A48E4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(_DWORD *)(v7 + 80) & 0xFCLL;
  uint64_t v10 = v9 | 3;
  v9 += 11;
  unint64_t v11 = (unint64_t)a1 + v9;
  uint64_t v53 = ~v10;
  unint64_t v12 = (_DWORD *)(((unint64_t)a1 + v9) & ~v10);
  unint64_t v13 = (unint64_t)a2 + v9;
  unint64_t v14 = (int *)(((unint64_t)a2 + v9) & ~v10);
  uint64_t v15 = *(void *)(v7 + 64) + 3;
  uint64_t v52 = v15;
  unint64_t v16 = v15 & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v17 = (v15 & 0xFFFFFFFFFFFFFFFCLL) + 4;
  uint64_t v54 = v6;
  if (v8)
  {
    uint64_t v50 = v10;
    float32x4_t v51 = (char *)v11;
    unint64_t v49 = v15 & 0xFFFFFFFFFFFFFFFCLL;
    size_t v18 = *(uint64_t (**)(int *, uint64_t, uint64_t))(v7 + 48);
    int v19 = v12;
    int v20 = v18(v12, v8, v6);
    int v21 = v18(v14, v8, v6);
    unint64_t v12 = v19;
    unint64_t v16 = v49;
    uint64_t v10 = v50;
    unint64_t v22 = v17;
    if (v20)
    {
      unint64_t v11 = (unint64_t)v51;
      if (v21)
      {
LABEL_4:
        if (v8) {
          size_t v23 = v22;
        }
        else {
          size_t v23 = v16 + 5;
        }
        int v24 = v12;
LABEL_28:
        memcpy(v24, v14, v23);
        goto LABEL_34;
      }
      goto LABEL_32;
    }
    goto LABEL_23;
  }
  unint64_t v22 = (v15 & 0xFFFFFFFFFFFFFFFCLL) + 4;
  if (!*((unsigned char *)v12 + v17)
    || ((int v25 = *((unsigned __int8 *)v12 + v17) - 1, !v17) ? (v26 = 0) : (int v25 = 0, v26 = *v12),
        (v26 | v25) == 0xFFFFFFFF))
  {
    if (!*((unsigned char *)v14 + v17))
    {
LABEL_29:
      int v32 = v12;
      (*(void (**)(_DWORD *, int *, uint64_t))(v7 + 40))(v12, v14, v54);
      *(_DWORD *)(((unint64_t)v32 + v52) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v14 + v52) & 0xFFFFFFFFFFFFFFFCLL);
      goto LABEL_34;
    }
    int v29 = *((unsigned __int8 *)v14 + v17) - 1;
    if (v17) {
      int v29 = 0;
    }
    float32x4_t v51 = (char *)v11;
    if (v17) {
      int v30 = *v14;
    }
    else {
      int v30 = 0;
    }
    int v21 = (v30 | v29) + 1;
LABEL_23:
    unint64_t v11 = (unint64_t)v51;
    if (v21)
    {
      int v31 = v12;
      (*(void (**)(_DWORD *, uint64_t))(v7 + 8))(v12, v54);
      if (v8) {
        size_t v23 = v22;
      }
      else {
        size_t v23 = v16 + 5;
      }
      int v24 = v31;
      goto LABEL_28;
    }
    goto LABEL_29;
  }
  if (*((unsigned char *)v14 + v17))
  {
    int v27 = *((unsigned __int8 *)v14 + v17) - 1;
    if (v17)
    {
      int v27 = 0;
      int v28 = *v14;
    }
    else
    {
      int v28 = 0;
    }
    if ((v28 | v27) != 0xFFFFFFFF) {
      goto LABEL_4;
    }
  }
LABEL_32:
  uint64_t v33 = v12;
  (*(void (**)(_DWORD *, int *, uint64_t))(v7 + 32))(v12, v14, v54);
  *(_DWORD *)(((unint64_t)v33 + v52) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v14 + v52) & 0xFFFFFFFFFFFFFFFCLL);
  if (!v8) {
    *((unsigned char *)v33 + v22) = 0;
  }
LABEL_34:
  if (v8) {
    size_t v34 = v22;
  }
  else {
    size_t v34 = v16 + 5;
  }
  size_t v35 = ((v11 | v10) + v34) & v53;
  size_t v36 = ((v13 | v10) + v34) & v53;
  if (!v8)
  {
    if (*(unsigned char *)(v35 + v22))
    {
      int v41 = *(unsigned __int8 *)(v35 + v22) - 1;
      if (v22)
      {
        int v41 = 0;
        int v42 = *(_DWORD *)v35;
      }
      else
      {
        int v42 = 0;
      }
      if ((v42 | v41) != 0xFFFFFFFF)
      {
        uint64_t v38 = v54;
        if (!*(unsigned char *)(v36 + v22)) {
          goto LABEL_61;
        }
        int v43 = *(unsigned __int8 *)(v36 + v22) - 1;
        if (v22)
        {
          int v43 = 0;
          int v44 = *(_DWORD *)v36;
        }
        else
        {
          int v44 = 0;
        }
        if ((v44 | v43) == 0xFFFFFFFF) {
          goto LABEL_61;
        }
LABEL_59:
        memcpy((void *)v35, (const void *)v36, v34);
        goto LABEL_60;
      }
    }
    uint64_t v38 = v54;
    if (!*(unsigned char *)(v36 + v22))
    {
LABEL_56:
      (*(void (**)(size_t, size_t, uint64_t))(v7 + 40))(v35, v36, v38);
      *(_DWORD *)((v52 + v35) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)((v52 + v36) & 0xFFFFFFFFFFFFFFFCLL);
      goto LABEL_60;
    }
    int v45 = *(unsigned __int8 *)(v36 + v22) - 1;
    if (v22)
    {
      int v45 = 0;
      int v46 = *(_DWORD *)v36;
    }
    else
    {
      int v46 = 0;
    }
    int v40 = (v46 | v45) + 1;
LABEL_54:
    if (v40)
    {
      (*(void (**)(size_t, uint64_t))(v7 + 8))(v35, v38);
      goto LABEL_59;
    }
    goto LABEL_56;
  }
  uint64_t v37 = *(uint64_t (**)(size_t, uint64_t, uint64_t))(v7 + 48);
  uint64_t v38 = v54;
  int v39 = v37(v35, v8, v54);
  int v40 = v37(v36, v8, v54);
  if (!v39) {
    goto LABEL_54;
  }
  if (v40) {
    goto LABEL_59;
  }
LABEL_61:
  (*(void (**)(size_t, size_t, uint64_t))(v7 + 32))(v35, v36, v38);
  *(_DWORD *)((v52 + v35) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)((v52 + v36) & 0xFFFFFFFFFFFFFFFCLL);
  if (!v8) {
    *(unsigned char *)(v35 + v22) = 0;
  }
LABEL_60:
  float32x4_t v47 = (float *)(((v36 | 3) + v34) & 0xFFFFFFFFFFFFFFFCLL);
  float result = *v47;
  *(float *)(((v35 | 3) + v34) & 0xFFFFFFFFFFFFFFFCLL) = *v47;
  return result;
}

uint64_t sub_22F1A4D98(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  int v5 = *(_DWORD *)(v4 + 84);
  if (v5) {
    unsigned int v6 = v5 - 1;
  }
  else {
    unsigned int v6 = 0;
  }
  if (v6 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = v6;
  }
  if (v5) {
    uint64_t v9 = 4;
  }
  else {
    uint64_t v9 = 5;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v10 = *(_DWORD *)(v4 + 80) & 0xFCLL;
  uint64_t v11 = v10 | 3;
  if (v7 < a2)
  {
    uint64_t v8 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    unint64_t v12 = ((((v8 + 3) & 0xFFFFFFFFFFFFFFFCLL)
          + v9
          + ((((v8 + 3) & 0xFFFFFFFFFFFFFFFCLL) + v9 + v11 + ((v10 + 11) & ~v11)) & ~v11)
          + 3) & 0xFFFFFFFFFFFFFFFCLL)
        + 4;
    unsigned int v13 = a2 - v7;
    uint64_t v14 = v12 & 0xFFFFFFFC;
    if ((v12 & 0xFFFFFFFC) != 0) {
      unsigned int v15 = 2;
    }
    else {
      unsigned int v15 = v13 + 1;
    }
    if (v15 >= 0x10000) {
      unsigned int v16 = 4;
    }
    else {
      unsigned int v16 = 2;
    }
    if (v15 < 0x100) {
      unsigned int v16 = 1;
    }
    if (v15 >= 2) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = 0;
    }
    switch(v17)
    {
      case 1:
        int v18 = *((unsigned __int8 *)a1 + v12);
        if (!v18) {
          break;
        }
        goto LABEL_27;
      case 2:
        int v18 = *(unsigned __int16 *)((char *)a1 + v12);
        if (v18) {
          goto LABEL_27;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x22F1A4F44);
      case 4:
        int v18 = *(_DWORD *)((char *)a1 + v12);
        if (!v18) {
          break;
        }
LABEL_27:
        int v19 = v18 - 1;
        if (v14)
        {
          int v19 = 0;
          LODWORD(v14) = *a1;
        }
        return v7 + (v14 | v19) + 1;
      default:
        break;
    }
  }
  if ((v6 & 0x80000000) != 0)
  {
    if (v5)
    {
      int v22 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v11 + 8) & ~v11);
      BOOL v23 = v22 != 0;
      uint64_t result = (v22 - 1);
      if (result != 0 && v23) {
        return result;
      }
    }
    return 0;
  }
  uint64_t v21 = *(void *)a1;
  if (*(void *)a1 >= 0xFFFFFFFFuLL) {
    LODWORD(v21) = -1;
  }
  return (v21 + 1);
}

void sub_22F1A4F58(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = v9;
  }
  uint64_t v11 = *(_DWORD *)(v7 + 80) & 0xFC;
  uint64_t v12 = v11 | 3;
  uint64_t v13 = (v11 + 11) & ~(v11 | 3);
  unint64_t v14 = (*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + 3) & 0xFFFFFFFFFFFFFFFCLL;
  size_t v15 = v14 + 4;
  size_t v16 = v14 + 5;
  if (v8) {
    size_t v17 = v15;
  }
  else {
    size_t v17 = v16;
  }
  size_t v18 = ((v17 + ((v17 + v12 + v13) & ~v12) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 4;
  if (v10 < a3)
  {
    unsigned int v19 = a3 - v10;
    if (((v17 + ((v17 + v12 + v13) & ~v12) + 3) & 0xFFFFFFFC) == 0xFFFFFFFC) {
      unsigned int v20 = v19 + 1;
    }
    else {
      unsigned int v20 = 2;
    }
    if (v20 >= 0x10000) {
      int v21 = 4;
    }
    else {
      int v21 = 2;
    }
    if (v20 < 0x100) {
      int v21 = 1;
    }
    if (v20 >= 2) {
      int v6 = v21;
    }
    else {
      int v6 = 0;
    }
  }
  if (a2 > v10)
  {
    if (((v17 + ((v17 + v12 + v13) & ~v12) + 3) & 0xFFFFFFFC) == 0xFFFFFFFC) {
      int v22 = a2 - v10;
    }
    else {
      int v22 = 1;
    }
    if (v18)
    {
      int v23 = ~v10 + a2;
      bzero(a1, v18);
      *(_DWORD *)a1 = v23;
    }
    switch(v6)
    {
      case 1:
        a1[v18] = v22;
        return;
      case 2:
        *(_WORD *)&a1[v18] = v22;
        return;
      case 3:
        goto LABEL_59;
      case 4:
        *(_DWORD *)&a1[v18] = v22;
        return;
      default:
        return;
    }
  }
  switch(v6)
  {
    case 1:
      a1[v18] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_36;
    case 2:
      *(_WORD *)&a1[v18] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_36;
    case 3:
LABEL_59:
      __break(1u);
      JUMPOUT(0x22F1A51F4);
    case 4:
      *(_DWORD *)&a1[v18] = 0;
      goto LABEL_35;
    default:
LABEL_35:
      if (a2)
      {
LABEL_36:
        if ((v9 & 0x80000000) != 0)
        {
          int v25 = (_DWORD *)((unint64_t)&a1[v12 + 8] & ~v12);
          if (v9 >= a2)
          {
            if (a2 + 1 <= v8)
            {
              if (a2 != -1)
              {
                int v29 = *(void (**)(unint64_t, uint64_t))(v7 + 56);
                unint64_t v30 = (unint64_t)&a1[v12 + 8] & ~v12;
                uint64_t v31 = a2 + 1;
                v29(v30, v31);
              }
            }
            else if (v15)
            {
              int v28 = a2 - v8;
              bzero((void *)((unint64_t)&a1[v12 + 8] & ~v12), v15);
              *int v25 = v28;
            }
          }
          else
          {
            if (v17 < 4) {
              int v26 = ~(-1 << (8 * v17));
            }
            else {
              int v26 = -1;
            }
            if (v17)
            {
              int v27 = v26 & (~v9 + a2);
              bzero((void *)((unint64_t)&a1[v12 + 8] & ~v12), v17);
              if (v17 == 1) {
                *(unsigned char *)int v25 = v27;
              }
              else {
                *int v25 = v27;
              }
            }
          }
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v24 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v24 = a2 - 1;
          }
          *(void *)a1 = v24;
        }
      }
      return;
  }
}

uint64_t type metadata accessor for Histogram()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_22F1A5234()
{
  swift_unownedRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DepthAccumulator()
{
  return self;
}

uint64_t sub_22F1A5298()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DepthAccumulator.PointCloud()
{
  return self;
}

uint64_t sub_22F1A52F4()
{
  if (*(unsigned char *)(v0 + 40) != 1) {
    return *(void *)(v0 + 32);
  }
  uint64_t result = 80;
  *(void *)(v0 + 32) = 80;
  *(unsigned char *)(v0 + 40) = 0;
  return result;
}

uint64_t sub_22F1A5318()
{
  if (*(unsigned char *)(v0 + 48) != 1) {
    return *(unsigned int *)(v0 + 44);
  }
  uint64_t result = 1111970369;
  strcpy((char *)(v0 + 44), "ARGB");
  return result;
}

id sub_22F1A5340()
{
  unint64_t v1 = *(void **)(v0 + 56);
  if (v1)
  {
    id v2 = *(id *)(v0 + 56);
  }
  else
  {
    id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F132A8]), sel_initWithDevice_kernelDiameter_, *(void *)(v0 + 128), 3);
    uint64_t v4 = *(void **)(v0 + 56);
    *(void *)(v0 + 56) = v3;
    id v2 = v3;

    unint64_t v1 = 0;
  }
  id v5 = v1;
  return v2;
}

id sub_22F1A53B8()
{
  unint64_t v1 = *(void **)(v0 + 64);
  if (v1)
  {
    id v2 = *(id *)(v0 + 64);
  }
  else
  {
    id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F13290]), sel_initWithDevice_kernelDiameter_, *(void *)(v0 + 128), 9);
    uint64_t v4 = *(void **)(v0 + 64);
    *(void *)(v0 + 64) = v3;
    id v2 = v3;

    unint64_t v1 = 0;
  }
  id v5 = v1;
  return v2;
}

uint64_t sub_22F1A5430()
{
  if (*(void *)(v0 + 72))
  {
    uint64_t v1 = *(void *)(v0 + 72);
LABEL_5:
    swift_unknownObjectRetain();
    return v1;
  }
  id v2 = *(void **)(v0 + 128);
  uint64_t v3 = sub_22F1A52F4();
  uint64_t result = makeIOSurfaceTexture(device:width:height:pixelFormat:usage:)(v2, 256, 192, v3, 0, 1);
  if (result)
  {
    uint64_t v1 = result;
    *(void *)(v0 + 72) = result;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

__CVBuffer *sub_22F1A54B4()
{
  v8[1] = *(CVPixelBufferRef *)MEMORY[0x263EF8340];
  uint64_t v1 = *(void **)(v0 + 80);
  if (v1)
  {
    id v2 = *(__CVBuffer **)(v0 + 80);
LABEL_5:
    id v7 = v1;
    return v2;
  }
  OSType v3 = sub_22F1A5318();
  v8[0] = 0;
  uint64_t result = (__CVBuffer *)CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], 0x100uLL, 0xC0uLL, v3, 0, v8);
  CVPixelBufferRef v5 = v8[0];
  if (v8[0])
  {
    int v6 = *(void **)(v0 + 80);
    *(CVPixelBufferRef *)(v0 + 80) = v8[0];
    id v2 = v5;

    uint64_t v1 = 0;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t sub_22F1A5574()
{
  if (*(void *)(v0 + 88))
  {
    uint64_t v1 = *(void *)(v0 + 88);
LABEL_5:
    swift_unknownObjectRetain();
    return v1;
  }
  id v2 = *(void **)(v0 + 128);
  uint64_t v3 = sub_22F1A52F4();
  uint64_t result = makeIOSurfaceTexture(device:width:height:pixelFormat:usage:)(v2, 512, 384, v3, 0, 1);
  if (result)
  {
    uint64_t v1 = result;
    *(void *)(v0 + 88) = result;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t sub_22F1A55F8()
{
  if (*(void *)(v0 + 96))
  {
    uint64_t v1 = *(void *)(v0 + 96);
LABEL_5:
    swift_unknownObjectRetain();
    return v1;
  }
  id v2 = *(void **)(v0 + 128);
  uint64_t v3 = sub_22F1A52F4();
  uint64_t result = makeIOSurfaceTexture(device:width:height:pixelFormat:usage:)(v2, 512, 384, v3, 0, 1);
  if (result)
  {
    uint64_t v1 = result;
    *(void *)(v0 + 96) = result;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

__CVBuffer *sub_22F1A567C()
{
  v8[1] = *(CVPixelBufferRef *)MEMORY[0x263EF8340];
  uint64_t v1 = *(void **)(v0 + 104);
  if (v1)
  {
    id v2 = *(__CVBuffer **)(v0 + 104);
LABEL_5:
    id v7 = v1;
    return v2;
  }
  OSType v3 = sub_22F1A5318();
  v8[0] = 0;
  uint64_t result = (__CVBuffer *)CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], 0x200uLL, 0x180uLL, v3, 0, v8);
  CVPixelBufferRef v5 = v8[0];
  if (v8[0])
  {
    int v6 = *(void **)(v0 + 104);
    *(CVPixelBufferRef *)(v0 + 104) = v8[0];
    id v2 = v5;

    uint64_t v1 = 0;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t sub_22F1A573C()
{
  if (*(void *)(v0 + 112))
  {
    uint64_t v1 = *(void *)(v0 + 112);
LABEL_5:
    swift_unknownObjectRetain();
    return v1;
  }
  uint64_t result = makeIOSurfaceTexture(device:width:height:pixelFormat:usage:)(*(void **)(v0 + 128), 256, 192, 125, 0, 1);
  if (result)
  {
    uint64_t v1 = result;
    *(void *)(v0 + 112) = result;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t sub_22F1A57B8()
{
  if (*(void *)(v0 + 120))
  {
    uint64_t v1 = *(void *)(v0 + 120);
LABEL_5:
    swift_unknownObjectRetain();
    return v1;
  }
  uint64_t result = makeIOSurfaceTexture(device:width:height:pixelFormat:usage:)(*(void **)(v0 + 128), 512, 384, 55, 0, 1);
  if (result)
  {
    uint64_t v1 = result;
    *(void *)(v0 + 120) = result;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

VTPixelTransferSessionRef sub_22F1A5834()
{
  v6[1] = *(VTPixelTransferSessionRef *)MEMORY[0x263EF8340];
  uint64_t v1 = *(OpaqueVTPixelTransferSession **)(v0 + 152);
  VTPixelTransferSessionRef v2 = v1;
  if (v1 == (OpaqueVTPixelTransferSession *)1)
  {
    v6[0] = 0;
    VTPixelTransferSessionCreate(0, v6);
    VTPixelTransferSessionRef v2 = v6[0];
    OSType v3 = *(void **)(v0 + 152);
    *(VTPixelTransferSessionRef *)(v0 + 152) = v6[0];
    uint64_t v4 = v2;
    sub_22F1A5E04(v3);
  }
  sub_22F1A5E14(v1);
  return v2;
}

int64_t sub_22F1A58D0(uint64_t a1, uint64_t a2, __CVBuffer *a3, char a4)
{
  VTPixelTransferSessionRef v9 = sub_22F1A5834();
  if (!v9) {
    return 0;
  }
  unsigned int v10 = v9;
  uint64_t v11 = sub_22F1A567C();
  VTPixelTransferSessionTransferImage(v10, a3, v11);

  uint64_t v12 = sub_22F1A567C();
  uint64_t v13 = sub_22F1A54B4();
  VTPixelTransferSessionTransferImage(v10, v12, v13);

  id v14 = objc_msgSend((id)sub_22F1A5430(), sel_iosurface);
  swift_unknownObjectRelease();
  if (!v14) {
    goto LABEL_16;
  }
  size_t v15 = sub_22F1A54B4();
  id v16 = v14;
  if (CVPixelBufferLockBaseAddress(v15, 1uLL))
  {
LABEL_4:

    return 0;
  }
  BaseAddress = CVPixelBufferGetBaseAddress(v15);
  if (!BaseAddress)
  {
    CVPixelBufferUnlockBaseAddress(v15, 1uLL);
    goto LABEL_4;
  }
  size_t v18 = BaseAddress;
  unsigned int v19 = IOSurfaceGetBaseAddress((IOSurfaceRef)v16);
  int64_t BytesPerRow = IOSurfaceGetBytesPerRow((IOSurfaceRef)v16);
  int64_t result = IOSurfaceGetHeight((IOSurfaceRef)v16);
  if ((unsigned __int128)(BytesPerRow * (__int128)result) >> 64 != (BytesPerRow * result) >> 63)
  {
    __break(1u);
    goto LABEL_27;
  }
  memcpy(v19, v18, BytesPerRow * result);
  CVPixelBufferUnlockBaseAddress(v15, 1uLL);

  int v22 = *(void **)(v4 + 136);
  id v23 = objc_msgSend(v22, sel_commandBuffer);
  if (!v23)
  {

    goto LABEL_16;
  }
  uint64_t v24 = v23;
  id v45 = v22;
  id v25 = sub_22F1A53B8();
  uint64_t v26 = sub_22F1A5430();
  objc_msgSend(v25, sel_encodeRegressionToCommandBuffer_sourceTexture_guidanceTexture_weightsTexture_destinationCoefficientsTexture_, v24, a1, v26, a2, sub_22F1A573C());

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  objc_msgSend(v24, sel_commit);
  objc_msgSend(v24, sel_waitUntilCompleted);

  swift_unknownObjectRelease();
  uint64_t v27 = sub_22F1A5574();
  if (a4)
  {
    id v28 = objc_msgSend(v22, sel_commandBuffer);
    if (!v28)
    {
LABEL_25:

      swift_unknownObjectRelease();
      return 0;
    }
    int v29 = v28;
    id v30 = sub_22F1A5340();
    uint64_t v31 = sub_22F1A5574();
    objc_msgSend(v30, sel_encodeToCommandBuffer_sourceTexture_destinationTexture_, v29, v31, sub_22F1A55F8());

    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    objc_msgSend(v29, sel_commit);
    objc_msgSend(v29, sel_waitUntilCompleted);
    uint64_t v32 = sub_22F1A55F8();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    uint64_t v27 = v32;
  }
  id v33 = objc_msgSend((id)sub_22F1A5574(), sel_iosurface);
  swift_unknownObjectRelease();
  if (!v33) {
    goto LABEL_25;
  }
  size_t v34 = sub_22F1A567C();
  id v35 = v33;
  if (CVPixelBufferLockBaseAddress(v34, 1uLL))
  {
LABEL_13:
    swift_unknownObjectRelease();

LABEL_16:
    return 0;
  }
  uint64_t v37 = CVPixelBufferGetBaseAddress(v34);
  if (!v37)
  {
    CVPixelBufferUnlockBaseAddress(v34, 1uLL);
    goto LABEL_13;
  }
  uint64_t v38 = v37;
  int v39 = IOSurfaceGetBaseAddress((IOSurfaceRef)v35);
  int64_t v40 = IOSurfaceGetBytesPerRow((IOSurfaceRef)v35);
  int64_t result = IOSurfaceGetHeight((IOSurfaceRef)v35);
  if ((unsigned __int128)(v40 * (__int128)result) >> 64 == (v40 * result) >> 63)
  {
    memcpy(v39, v38, v40 * result);
    CVPixelBufferUnlockBaseAddress(v34, 1uLL);

    id v41 = objc_msgSend(v45, sel_commandBuffer);
    if (v41)
    {
      int v42 = v41;
      id v43 = sub_22F1A53B8();
      uint64_t v44 = sub_22F1A573C();
      objc_msgSend(v43, sel_encodeReconstructionToCommandBuffer_guidanceTexture_coefficientsTexture_destinationTexture_, v42, v27, v44, sub_22F1A57B8());

      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      objc_msgSend(v42, sel_commit);

      swift_unknownObjectRelease();
      uint64_t v36 = sub_22F1A57B8();

      swift_unknownObjectRelease();
      return v36;
    }

    goto LABEL_25;
  }
LABEL_27:
  __break(1u);
  return result;
}

id *sub_22F1A5D2C()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  sub_22F1A5E04(v0[19]);
  return v0;
}

uint64_t sub_22F1A5DAC()
{
  sub_22F1A5D2C();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ADGuidedFilter()
{
  return self;
}

void sub_22F1A5E04(id a1)
{
  if (a1 != (id)1) {
}
  }

id sub_22F1A5E14(id result)
{
  if (result != (id)1) {
    return result;
  }
  return result;
}

id sub_22F1A5E24(uint64_t a1)
{
  *(void *)(v1 + 16) = 2;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)(v1 + 32) = 0;
  *(unsigned char *)(v1 + 40) = 1;
  *(_DWORD *)(v1 + 44) = 0;
  *(unsigned char *)(v1 + 48) = 1;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_OWORD *)(v1 + 72) = 0u;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(void *)(v1 + 120) = 0;
  if (qword_268694378 != -1) {
    swift_once();
  }
  OSType v3 = (void *)static MetalBundle.device;
  *(void *)(v1 + 128) = static MetalBundle.device;
  *(void *)(v1 + 144) = a1;
  *(void *)(v1 + 152) = 1;
  swift_unknownObjectRetain();
  swift_retain();
  id result = objc_msgSend(v3, sel_newCommandQueue);
  if (result)
  {
    *(void *)(v1 + 136) = result;
    return (id)v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

CGAffineTransform *Transformer.cameraToView.getter@<X0>(CGFloat *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 360))
  {
    CGAffineTransformMakeScale(&t1, 1.0 / *(double *)(v1 + 40), 1.0 / *(double *)(v1 + 48));
    long long v22 = *(_OWORD *)&t1.c;
    long long v24 = *(_OWORD *)&t1.a;
    CGFloat tx = t1.tx;
    CGFloat ty = t1.ty;
    CGFloat v5 = *(double *)(v1 + 16);
    CGFloat v6 = *(double *)(v1 + 24);
    ARCameraImageToViewTransform();
    long long v7 = *(_OWORD *)&t1.a;
    long long v8 = *(_OWORD *)&t1.c;
    long long v9 = *(_OWORD *)&t1.tx;
    *(_OWORD *)&t1.CGFloat a = v24;
    *(_OWORD *)&t1.CGFloat c = v22;
    t1.CGFloat tx = tx;
    t1.CGFloat ty = ty;
    *(_OWORD *)&t2.CGFloat a = v7;
    *(_OWORD *)&t2.CGFloat c = v8;
    *(_OWORD *)&t2.CGFloat tx = v9;
    CGAffineTransformConcat(&v26, &t1, &t2);
    long long v23 = *(_OWORD *)&v26.c;
    long long v25 = *(_OWORD *)&v26.a;
    CGFloat v10 = v26.tx;
    CGFloat v11 = v26.ty;
    CGAffineTransformMakeScale(&t1, v5, v6);
    long long v12 = *(_OWORD *)&t1.a;
    long long v13 = *(_OWORD *)&t1.c;
    long long v14 = *(_OWORD *)&t1.tx;
    *(_OWORD *)&t1.CGFloat a = v25;
    *(_OWORD *)&t1.CGFloat c = v23;
    t1.CGFloat tx = v10;
    t1.CGFloat ty = v11;
    *(_OWORD *)&t2.CGFloat a = v12;
    *(_OWORD *)&t2.CGFloat c = v13;
    *(_OWORD *)&t2.CGFloat tx = v14;
    id result = CGAffineTransformConcat(&v26, &t1, &t2);
    CGFloat a = v26.a;
    CGFloat b = v26.b;
    CGFloat c = v26.c;
    CGFloat d = v26.d;
    CGFloat v21 = v26.tx;
    CGFloat v20 = v26.ty;
    *(CGFloat *)(v1 + 312) = v26.a;
    *(CGFloat *)(v1 + 320) = b;
    *(CGFloat *)(v1 + 328) = c;
    *(CGFloat *)(v1 + 336) = d;
    *(CGFloat *)(v1 + 344) = v21;
    *(CGFloat *)(v1 + 352) = v20;
    *(unsigned char *)(v1 + 360) = 0;
  }
  else
  {
    CGFloat v21 = *(double *)(v1 + 344);
    CGFloat v20 = *(double *)(v1 + 352);
    CGFloat c = *(double *)(v1 + 328);
    CGFloat d = *(double *)(v1 + 336);
    CGFloat a = *(double *)(v1 + 312);
    CGFloat b = *(double *)(v1 + 320);
  }
  *a1 = a;
  a1[1] = b;
  a1[2] = c;
  a1[3] = d;
  a1[4] = v21;
  a1[5] = v20;
  return result;
}

CGAffineTransform *Transformer.viewToCamera.getter@<X0>(CGFloat *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 416))
  {
    CGAffineTransformMakeScale(&t1, 1.0 / *(double *)(v1 + 16), 1.0 / *(double *)(v1 + 24));
    long long v22 = *(_OWORD *)&t1.c;
    long long v24 = *(_OWORD *)&t1.a;
    CGFloat tx = t1.tx;
    CGFloat ty = t1.ty;
    CGFloat v5 = *(double *)(v1 + 40);
    CGFloat v6 = *(double *)(v1 + 48);
    ARViewToCameraImageTransform();
    long long v7 = *(_OWORD *)&t1.a;
    long long v8 = *(_OWORD *)&t1.c;
    long long v9 = *(_OWORD *)&t1.tx;
    *(_OWORD *)&t1.CGFloat a = v24;
    *(_OWORD *)&t1.CGFloat c = v22;
    t1.CGFloat tx = tx;
    t1.CGFloat ty = ty;
    *(_OWORD *)&t2.CGFloat a = v7;
    *(_OWORD *)&t2.CGFloat c = v8;
    *(_OWORD *)&t2.CGFloat tx = v9;
    CGAffineTransformConcat(&v26, &t1, &t2);
    long long v23 = *(_OWORD *)&v26.c;
    long long v25 = *(_OWORD *)&v26.a;
    CGFloat v10 = v26.tx;
    CGFloat v11 = v26.ty;
    CGAffineTransformMakeScale(&t1, v5, v6);
    long long v12 = *(_OWORD *)&t1.a;
    long long v13 = *(_OWORD *)&t1.c;
    long long v14 = *(_OWORD *)&t1.tx;
    *(_OWORD *)&t1.CGFloat a = v25;
    *(_OWORD *)&t1.CGFloat c = v23;
    t1.CGFloat tx = v10;
    t1.CGFloat ty = v11;
    *(_OWORD *)&t2.CGFloat a = v12;
    *(_OWORD *)&t2.CGFloat c = v13;
    *(_OWORD *)&t2.CGFloat tx = v14;
    id result = CGAffineTransformConcat(&v26, &t1, &t2);
    CGFloat a = v26.a;
    CGFloat b = v26.b;
    CGFloat c = v26.c;
    CGFloat d = v26.d;
    CGFloat v21 = v26.tx;
    CGFloat v20 = v26.ty;
    *(CGFloat *)(v1 + 368) = v26.a;
    *(CGFloat *)(v1 + 376) = b;
    *(CGFloat *)(v1 + 384) = c;
    *(CGFloat *)(v1 + 392) = d;
    *(CGFloat *)(v1 + 400) = v21;
    *(CGFloat *)(v1 + 408) = v20;
    *(unsigned char *)(v1 + 416) = 0;
  }
  else
  {
    CGFloat v21 = *(double *)(v1 + 400);
    CGFloat v20 = *(double *)(v1 + 408);
    CGFloat c = *(double *)(v1 + 384);
    CGFloat d = *(double *)(v1 + 392);
    CGFloat a = *(double *)(v1 + 368);
    CGFloat b = *(double *)(v1 + 376);
  }
  *a1 = a;
  a1[1] = b;
  a1[2] = c;
  a1[3] = d;
  a1[4] = v21;
  a1[5] = v20;
  return result;
}

CGAffineTransform *Transformer.viewToCameraNormalized.getter@<X0>(CGFloat *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 472))
  {
    CGAffineTransformMakeScale(&t1, 1.0 / *(double *)(v1 + 16), 1.0 / *(double *)(v1 + 24));
    long long v15 = *(_OWORD *)&t1.c;
    long long v16 = *(_OWORD *)&t1.a;
    CGFloat tx = t1.tx;
    CGFloat ty = t1.ty;
    ARViewToCameraImageTransform();
    long long v5 = *(_OWORD *)&t1.a;
    long long v6 = *(_OWORD *)&t1.c;
    long long v7 = *(_OWORD *)&t1.tx;
    *(_OWORD *)&t1.CGFloat a = v16;
    *(_OWORD *)&t1.CGFloat c = v15;
    t1.CGFloat tx = tx;
    t1.CGFloat ty = ty;
    *(_OWORD *)&t2.CGFloat a = v5;
    *(_OWORD *)&t2.CGFloat c = v6;
    *(_OWORD *)&t2.CGFloat tx = v7;
    id result = CGAffineTransformConcat(&v17, &t1, &t2);
    CGFloat a = v17.a;
    CGFloat b = v17.b;
    CGFloat c = v17.c;
    CGFloat d = v17.d;
    CGFloat v14 = v17.tx;
    CGFloat v13 = v17.ty;
    *(CGFloat *)(v1 + 424) = v17.a;
    *(CGFloat *)(v1 + 432) = b;
    *(CGFloat *)(v1 + 440) = c;
    *(CGFloat *)(v1 + 448) = d;
    *(CGFloat *)(v1 + 456) = v14;
    *(CGFloat *)(v1 + 464) = v13;
    *(unsigned char *)(v1 + 472) = 0;
  }
  else
  {
    CGFloat v14 = *(double *)(v1 + 456);
    CGFloat v13 = *(double *)(v1 + 464);
    CGFloat c = *(double *)(v1 + 440);
    CGFloat d = *(double *)(v1 + 448);
    CGFloat a = *(double *)(v1 + 424);
    CGFloat b = *(double *)(v1 + 432);
  }
  *a1 = a;
  a1[1] = b;
  a1[2] = c;
  a1[3] = d;
  a1[4] = v14;
  a1[5] = v13;
  return result;
}

CGAffineTransform *Transformer.viewToClip.getter@<X0>(CGFloat *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 528))
  {
    CGAffineTransformMakeScale(&t1, 1.0 / *(double *)(v1 + 16), 1.0 / *(double *)(v1 + 24));
    long long v20 = *(_OWORD *)&t1.c;
    long long v22 = *(_OWORD *)&t1.a;
    CGFloat tx = t1.tx;
    CGFloat ty = t1.ty;
    CGAffineTransformMakeTranslation(&t1, -0.5, -0.5);
    long long v5 = *(_OWORD *)&t1.a;
    long long v6 = *(_OWORD *)&t1.c;
    long long v7 = *(_OWORD *)&t1.tx;
    *(_OWORD *)&t1.CGFloat a = v22;
    *(_OWORD *)&t1.CGFloat c = v20;
    t1.CGFloat tx = tx;
    t1.CGFloat ty = ty;
    *(_OWORD *)&t2.CGFloat a = v5;
    *(_OWORD *)&t2.CGFloat c = v6;
    *(_OWORD *)&t2.CGFloat tx = v7;
    CGAffineTransformConcat(&v24, &t1, &t2);
    long long v21 = *(_OWORD *)&v24.c;
    long long v23 = *(_OWORD *)&v24.a;
    CGFloat v8 = v24.tx;
    CGFloat v9 = v24.ty;
    CGAffineTransformMakeScale(&t1, 2.0, -2.0);
    long long v10 = *(_OWORD *)&t1.a;
    long long v11 = *(_OWORD *)&t1.c;
    long long v12 = *(_OWORD *)&t1.tx;
    *(_OWORD *)&t1.CGFloat a = v23;
    *(_OWORD *)&t1.CGFloat c = v21;
    t1.CGFloat tx = v8;
    t1.CGFloat ty = v9;
    *(_OWORD *)&t2.CGFloat a = v10;
    *(_OWORD *)&t2.CGFloat c = v11;
    *(_OWORD *)&t2.CGFloat tx = v12;
    id result = CGAffineTransformConcat(&v24, &t1, &t2);
    CGFloat a = v24.a;
    CGFloat b = v24.b;
    CGFloat c = v24.c;
    CGFloat d = v24.d;
    CGFloat v19 = v24.tx;
    CGFloat v18 = v24.ty;
    *(CGFloat *)(v1 + 480) = v24.a;
    *(CGFloat *)(v1 + 488) = b;
    *(CGFloat *)(v1 + 496) = c;
    *(CGFloat *)(v1 + 504) = d;
    *(CGFloat *)(v1 + 512) = v19;
    *(CGFloat *)(v1 + 520) = v18;
    *(unsigned char *)(v1 + 528) = 0;
  }
  else
  {
    CGFloat v18 = *(double *)(v1 + 520);
    CGFloat d = *(double *)(v1 + 504);
    CGFloat v19 = *(double *)(v1 + 512);
    CGFloat b = *(double *)(v1 + 488);
    CGFloat c = *(double *)(v1 + 496);
    CGFloat a = *(double *)(v1 + 480);
  }
  *a1 = a;
  a1[1] = b;
  a1[2] = c;
  a1[3] = d;
  a1[4] = v19;
  a1[5] = v18;
  return result;
}

CGAffineTransform *Transformer.clipToView.getter@<X0>(CGFloat *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 584))
  {
    Transformer.viewToClip.getter(&v12.a);
    CGAffineTransform v11 = v12;
    id result = CGAffineTransformInvert(&v10, &v11);
    CGFloat a = v10.a;
    CGFloat b = v10.b;
    CGFloat c = v10.c;
    CGFloat d = v10.d;
    CGFloat tx = v10.tx;
    CGFloat ty = v10.ty;
    *(CGFloat *)(v1 + 536) = v10.a;
    *(CGFloat *)(v1 + 544) = b;
    *(CGFloat *)(v1 + 552) = c;
    *(CGFloat *)(v1 + 560) = d;
    *(CGFloat *)(v1 + 568) = tx;
    *(CGFloat *)(v1 + 576) = ty;
    *(unsigned char *)(v1 + 584) = 0;
  }
  else
  {
    CGFloat ty = *(double *)(v1 + 576);
    CGFloat tx = *(double *)(v1 + 568);
    CGFloat d = *(double *)(v1 + 560);
    CGFloat c = *(double *)(v1 + 552);
    CGFloat b = *(double *)(v1 + 544);
    CGFloat a = *(double *)(v1 + 536);
  }
  *a1 = a;
  a1[1] = b;
  a1[2] = c;
  a1[3] = d;
  a1[4] = tx;
  a1[5] = ty;
  return result;
}

CGAffineTransform *Transformer.cameraToClip.getter@<X0>(CGFloat *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 640))
  {
    Transformer.cameraToView.getter((CGFloat *)v17);
    long long v12 = v17[1];
    long long v13 = v17[0];
    CGFloat v3 = v18;
    CGFloat v4 = v19;
    Transformer.viewToClip.getter(&v20.a);
    *(_OWORD *)&t1.CGFloat a = v13;
    *(_OWORD *)&t1.CGFloat c = v12;
    t1.CGFloat tx = v3;
    t1.CGFloat ty = v4;
    CGAffineTransform t2 = v20;
    id result = CGAffineTransformConcat(&v14, &t1, &t2);
    CGFloat a = v14.a;
    CGFloat b = v14.b;
    CGFloat c = v14.c;
    CGFloat d = v14.d;
    CGFloat tx = v14.tx;
    CGFloat ty = v14.ty;
    *(CGFloat *)(v1 + 592) = v14.a;
    *(CGFloat *)(v1 + 600) = b;
    *(CGFloat *)(v1 + 608) = c;
    *(CGFloat *)(v1 + 616) = d;
    *(CGFloat *)(v1 + 624) = tx;
    *(CGFloat *)(v1 + 632) = ty;
    *(unsigned char *)(v1 + 640) = 0;
  }
  else
  {
    CGFloat ty = *(double *)(v1 + 632);
    CGFloat tx = *(double *)(v1 + 624);
    CGFloat d = *(double *)(v1 + 616);
    CGFloat c = *(double *)(v1 + 608);
    CGFloat b = *(double *)(v1 + 600);
    CGFloat a = *(double *)(v1 + 592);
  }
  *a1 = a;
  a1[1] = b;
  a1[2] = c;
  a1[3] = d;
  a1[4] = tx;
  a1[5] = ty;
  return result;
}

CGAffineTransform *Transformer.clipToCamera.getter@<X0>(CGFloat *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 696))
  {
    Transformer.cameraToClip.getter(&v12.a);
    CGAffineTransform v11 = v12;
    id result = CGAffineTransformInvert(&v10, &v11);
    CGFloat a = v10.a;
    CGFloat b = v10.b;
    CGFloat c = v10.c;
    CGFloat d = v10.d;
    CGFloat tx = v10.tx;
    CGFloat ty = v10.ty;
    *(CGFloat *)(v1 + 648) = v10.a;
    *(CGFloat *)(v1 + 656) = b;
    *(CGFloat *)(v1 + 664) = c;
    *(CGFloat *)(v1 + 672) = d;
    *(CGFloat *)(v1 + 680) = tx;
    *(CGFloat *)(v1 + 688) = ty;
    *(unsigned char *)(v1 + 696) = 0;
  }
  else
  {
    CGFloat ty = *(double *)(v1 + 688);
    CGFloat tx = *(double *)(v1 + 680);
    CGFloat d = *(double *)(v1 + 672);
    CGFloat c = *(double *)(v1 + 664);
    CGFloat b = *(double *)(v1 + 656);
    CGFloat a = *(double *)(v1 + 648);
  }
  *a1 = a;
  a1[1] = b;
  a1[2] = c;
  a1[3] = d;
  a1[4] = tx;
  a1[5] = ty;
  return result;
}

CGAffineTransform *Transformer.clipToCameraNormalized.getter@<X0>(CGFloat *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 752))
  {
    Transformer.clipToView.getter((CGFloat *)v17);
    long long v12 = v17[1];
    long long v13 = v17[0];
    CGFloat v3 = v18;
    CGFloat v4 = v19;
    Transformer.viewToCameraNormalized.getter(&v20.a);
    *(_OWORD *)&t1.CGFloat a = v13;
    *(_OWORD *)&t1.CGFloat c = v12;
    t1.CGFloat tx = v3;
    t1.CGFloat ty = v4;
    CGAffineTransform t2 = v20;
    id result = CGAffineTransformConcat(&v14, &t1, &t2);
    CGFloat a = v14.a;
    CGFloat b = v14.b;
    CGFloat c = v14.c;
    CGFloat d = v14.d;
    CGFloat tx = v14.tx;
    CGFloat ty = v14.ty;
    *(CGFloat *)(v1 + 704) = v14.a;
    *(CGFloat *)(v1 + 712) = b;
    *(CGFloat *)(v1 + 720) = c;
    *(CGFloat *)(v1 + 728) = d;
    *(CGFloat *)(v1 + 736) = tx;
    *(CGFloat *)(v1 + 744) = ty;
    *(unsigned char *)(v1 + 752) = 0;
  }
  else
  {
    CGFloat ty = *(double *)(v1 + 744);
    CGFloat tx = *(double *)(v1 + 736);
    CGFloat d = *(double *)(v1 + 728);
    CGFloat c = *(double *)(v1 + 720);
    CGFloat b = *(double *)(v1 + 712);
    CGFloat a = *(double *)(v1 + 704);
  }
  *a1 = a;
  a1[1] = b;
  a1[2] = c;
  a1[3] = d;
  a1[4] = tx;
  a1[5] = ty;
  return result;
}

void Transformer.cameraToViewRotation.getter()
{
  if (*(unsigned char *)(v0 + 832))
  {
    float v1 = (float)ARCameraToDisplayRotation() * 0.017453;
    if (qword_2686943C8 != -1) {
      swift_once();
    }
    float32x4_t v8 = (float32x4_t)static SIMD3<>.forward;
    __float2 v2 = __sincosf_stret(v1 * 0.5);
    __n128 v3 = (__n128)vmulq_n_f32(v8, v2.__sinval);
    v3.n128_u32[3] = LODWORD(v2.__cosval);
    *(double *)&long long v4 = MEMORY[0x230FB2B40](v3);
    *(_OWORD *)(v0 + 768) = v4;
    *(_OWORD *)(v0 + 784) = v5;
    *(_OWORD *)(v0 + 800) = v6;
    *(_OWORD *)(v0 + 816) = v7;
    *(unsigned char *)(v0 + 832) = 0;
  }
}

void __swiftcall Transformer.viewMatrix(of:)(simd_float4x4 *__return_ptr retstr, ARCamera of)
{
  [(objc_class *)of.super.isa viewMatrixForOrientation:*(void *)(v2 + 304)];
}

void __swiftcall Transformer.cameraToWorld(of:)(simd_float4x4 *__return_ptr retstr, ARCamera of)
{
  [(objc_class *)of.super.isa viewMatrixForOrientation:*(void *)(v2 + 304)];
  __invert_f4(v3);
}

uint64_t Transformer.deinit()
{
  return v0;
}

double Transformer.viewportSize.getter()
{
  return *(double *)(v0 + 16);
}

double Transformer.viewportRatio.getter()
{
  return *(double *)(v0 + 32);
}

double Transformer.cameraResolution.getter()
{
  return *(double *)(v0 + 40);
}

__n128 Transformer.cameraIntrinsics.getter@<Q0>(uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 64);
  long long v3 = *(_OWORD *)(v1 + 80);
  long long v4 = *(_OWORD *)(v1 + 96);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  return result;
}

__n128 Transformer.cameraIntrinsicsInversed.getter@<Q0>(uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 112);
  long long v3 = *(_OWORD *)(v1 + 128);
  long long v4 = *(_OWORD *)(v1 + 144);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  return result;
}

__n128 Transformer.projectionMatrix.getter()
{
  return v0[10];
}

__n128 Transformer.projectionMatrixInversed.getter()
{
  return v0[14];
}

double Transformer.cameraFoV.getter()
{
  return *(double *)(v0 + 288);
}

double Transformer.cameraDepthUnprojection.getter()
{
  return *(double *)(v0 + 296);
}

uint64_t Transformer.orientation.getter()
{
  return *(void *)(v0 + 304);
}

uint64_t Transformer.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

double sub_22F1A68C4@<D0>(_OWORD *a1@<X8>)
{
  Transformer.cameraToView.getter((CGFloat *)v4);
  long long v2 = v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  double result = *(double *)&v5;
  a1[2] = v5;
  return result;
}

__n128 sub_22F1A6908(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *a2 + 312;
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v3 = *(_OWORD *)a1;
  *(_OWORD *)(v3 + 16) = v4;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v3 + 32) = result;
  *(unsigned char *)(v2 + 360) = 0;
  return result;
}

double sub_22F1A6928@<D0>(_OWORD *a1@<X8>)
{
  Transformer.viewToCamera.getter((CGFloat *)v4);
  long long v2 = v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  double result = *(double *)&v5;
  a1[2] = v5;
  return result;
}

__n128 sub_22F1A696C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  long long v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 368) = *(_OWORD *)a1;
  *(_OWORD *)(v2 + 384) = v3;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v2 + 400) = result;
  *(unsigned char *)(v2 + 416) = 0;
  return result;
}

double sub_22F1A6988@<D0>(_OWORD *a1@<X8>)
{
  Transformer.viewToCameraNormalized.getter((CGFloat *)v4);
  long long v2 = v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  double result = *(double *)&v5;
  a1[2] = v5;
  return result;
}

__n128 sub_22F1A69CC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *a2 + 424;
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v3 = *(_OWORD *)a1;
  *(_OWORD *)(v3 + 16) = v4;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v3 + 32) = result;
  *(unsigned char *)(v2 + 472) = 0;
  return result;
}

CGAffineTransform *sub_22F1A69EC@<X0>(CGFloat *a1@<X8>)
{
  return Transformer.viewToClip.getter(a1);
}

__n128 sub_22F1A6A10(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  long long v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 480) = *(_OWORD *)a1;
  *(_OWORD *)(v2 + 496) = v3;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v2 + 512) = result;
  *(unsigned char *)(v2 + 528) = 0;
  return result;
}

CGAffineTransform *sub_22F1A6A2C@<X0>(CGFloat *a1@<X8>)
{
  return Transformer.clipToView.getter(a1);
}

__n128 sub_22F1A6A50(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *a2 + 536;
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v3 = *(_OWORD *)a1;
  *(_OWORD *)(v3 + 16) = v4;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v3 + 32) = result;
  *(unsigned char *)(v2 + 584) = 0;
  return result;
}

double sub_22F1A6A70@<D0>(_OWORD *a1@<X8>)
{
  Transformer.cameraToClip.getter((CGFloat *)v4);
  long long v2 = v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  double result = *(double *)&v5;
  a1[2] = v5;
  return result;
}

__n128 sub_22F1A6AB4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  long long v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 592) = *(_OWORD *)a1;
  *(_OWORD *)(v2 + 608) = v3;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v2 + 624) = result;
  *(unsigned char *)(v2 + 640) = 0;
  return result;
}

double sub_22F1A6AD0@<D0>(_OWORD *a1@<X8>)
{
  Transformer.clipToCamera.getter((CGFloat *)v4);
  long long v2 = v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  double result = *(double *)&v5;
  a1[2] = v5;
  return result;
}

__n128 sub_22F1A6B14(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *a2 + 648;
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v3 = *(_OWORD *)a1;
  *(_OWORD *)(v3 + 16) = v4;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v3 + 32) = result;
  *(unsigned char *)(v2 + 696) = 0;
  return result;
}

double sub_22F1A6B34@<D0>(_OWORD *a1@<X8>)
{
  Transformer.clipToCameraNormalized.getter((CGFloat *)v4);
  long long v2 = v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  double result = *(double *)&v5;
  a1[2] = v5;
  return result;
}

__n128 sub_22F1A6B78(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  long long v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 704) = *(_OWORD *)a1;
  *(_OWORD *)(v2 + 720) = v3;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v2 + 736) = result;
  *(unsigned char *)(v2 + 752) = 0;
  return result;
}

void sub_22F1A6B94(_OWORD *a1@<X8>)
{
  Transformer.cameraToViewRotation.getter();
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
}

__n128 sub_22F1A6BC4(uint64_t a1, uint64_t *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  long long v4 = *(_OWORD *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v7 = *a2;
  *(_OWORD *)(v7 + 768) = *(_OWORD *)a1;
  *(_OWORD *)(v7 + 784) = v3;
  *(_OWORD *)(v7 + 800) = v4;
  *(void *)(v7 + 816) = v6;
  *(void *)(v7 + 824) = v5;
  *(unsigned char *)(v7 + 832) = 0;
  return result;
}

uint64_t type metadata accessor for Transformer()
{
  return self;
}

uint64_t sub_22F1A6C10(void *a1, uint64_t a2, double a3, double a4)
{
  *(void *)(v4 + 296) = 0xBA8312773F800008;
  *(_OWORD *)(v4 + 312) = 0u;
  *(_OWORD *)(v4 + 328) = 0u;
  *(_OWORD *)(v4 + 344) = 0u;
  *(unsigned char *)(v4 + 360) = 1;
  *(_OWORD *)(v4 + 368) = 0u;
  *(_OWORD *)(v4 + 384) = 0u;
  *(_OWORD *)(v4 + 400) = 0u;
  *(unsigned char *)(v4 + 416) = 1;
  *(_OWORD *)(v4 + 424) = 0u;
  *(_OWORD *)(v4 + 440) = 0u;
  *(_OWORD *)(v4 + 456) = 0u;
  *(unsigned char *)(v4 + 472) = 1;
  *(_OWORD *)(v4 + 480) = 0u;
  *(_OWORD *)(v4 + 496) = 0u;
  *(_OWORD *)(v4 + 512) = 0u;
  *(unsigned char *)(v4 + 528) = 1;
  *(_OWORD *)(v4 + 536) = 0u;
  *(_OWORD *)(v4 + 552) = 0u;
  *(_OWORD *)(v4 + 568) = 0u;
  *(unsigned char *)(v4 + 584) = 1;
  *(_OWORD *)(v4 + 592) = 0u;
  *(_OWORD *)(v4 + 608) = 0u;
  *(_OWORD *)(v4 + 624) = 0u;
  *(unsigned char *)(v4 + 640) = 1;
  *(_OWORD *)(v4 + 648) = 0u;
  *(_OWORD *)(v4 + 664) = 0u;
  *(_OWORD *)(v4 + 680) = 0u;
  *(unsigned char *)(v4 + 696) = 1;
  *(_OWORD *)(v4 + 704) = 0u;
  *(_OWORD *)(v4 + 720) = 0u;
  *(_OWORD *)(v4 + 736) = 0u;
  *(unsigned char *)(v4 + 752) = 1;
  *(_OWORD *)(v4 + 768) = 0u;
  *(_OWORD *)(v4 + 784) = 0u;
  *(_OWORD *)(v4 + 800) = 0u;
  *(_OWORD *)(v4 + 816) = 0u;
  *(unsigned char *)(v4 + 832) = 1;
  *(double *)(v4 + 16) = a3;
  *(double *)(v4 + 24) = a4;
  objc_msgSend(a1, sel_imageResolution);
  *(void *)(v4 + 40) = v9;
  *(void *)(v4 + 48) = v10;
  objc_msgSend(a1, sel_intrinsics);
  *(simd_float3x3 *)(v4 + 64) = v13;
  *(simd_float3x3 *)(v4 + 112) = __invert_f3(v13);
  objc_msgSend(a1, sel_projectionMatrixForOrientation_viewportSize_zNear_zFar_, a2, a3, a4, 0.00100000005, 0.0);
  *(simd_float4x4 *)(v4 + 160) = v14;
  *(simd_float4x4 *)(v4 + 224) = __invert_f4(v14);
  ARCameraFieldOfViewFromIntrinsics();
  *(void *)(v4 + 288) = v11;
  *(void *)(v4 + 304) = a2;
  *(double *)(v4 + 32) = a3 / a4;
  return v4;
}

MLMultiArray __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLMultiArray.reshaped(to:)(Swift::OpaquePointer to)
{
  v29[1] = *(id *)MEMORY[0x263EF8340];
  unint64_t v2 = *((void *)to._rawValue + 2);
  if (!v2)
  {
LABEL_26:
    if (objc_msgSend(v1, sel_count) == (id)1) {
      __break(1u);
    }
    goto LABEL_28;
  }
  uint64_t v4 = 0;
  uint64_t v5 = (uint64_t *)((char *)to._rawValue + 32);
  uint64_t v6 = 1;
  do
  {
    uint64_t v7 = v5[v4];
    uint64_t v8 = v6 * v7;
    if ((unsigned __int128)(v6 * (__int128)v7) >> 64 != (v6 * v7) >> 63)
    {
      __break(1u);
      goto LABEL_23;
    }
    ++v4;
    v6 *= v7;
  }
  while (v2 != v4);
  if ((id)v8 != objc_msgSend(v1, sel_count)) {
LABEL_28:
  }
    __break(1u);
  uint64_t v9 = sub_22F223D48();
  *(void *)(v9 + 16) = v2;
  uint64_t v10 = (uint64_t *)(v9 + 16);
  bzero((void *)(v9 + 32), 8 * v2);
  *(void *)(8 * v2 + v9 + 32 - 8) = 1;
  if (v2 >= 2)
  {
    uint64_t v11 = 1;
    unint64_t v12 = v2;
    while (1)
    {
      unint64_t v13 = v12 - 1;
      if (v12 - 1 >= *v10) {
        break;
      }
      uint64_t v14 = *((void *)to._rawValue + v12 + 3);
      if ((unsigned __int128)(v11 * (__int128)v14) >> 64 != (v11 * v14) >> 63) {
        goto LABEL_24;
      }
      if (v12 - 2 >= *v10) {
        goto LABEL_25;
      }
      v10[v12--] = v11 * v14;
      v11 *= v14;
      if (v13 <= 1) {
        goto LABEL_12;
      }
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
LABEL_12:
  v29[0] = (id)MEMORY[0x263F8EE78];
  sub_22F224498();
  do
  {
    uint64_t v15 = *v5++;
    objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, v15);
    sub_22F224468();
    sub_22F2244A8();
    sub_22F2244B8();
    sub_22F224478();
    --v2;
  }
  while (v2);
  uint64_t v16 = *v10;
  if (*v10)
  {
    v29[0] = (id)MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    sub_22F224498();
    uint64_t v17 = 0;
    do
    {
      uint64_t v18 = v17 + 1;
      objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, *(void *)(v9 + 8 * v17 + 32));
      sub_22F224468();
      sub_22F2244A8();
      sub_22F2244B8();
      sub_22F224478();
      uint64_t v17 = v18;
    }
    while (v16 != v18);
    swift_bridgeObjectRelease();
  }
  id v19 = v1;
  id v20 = objc_msgSend(v19, sel_dataPointer);
  id v21 = objc_msgSend(v19, sel_dataType);
  id v22 = objc_allocWithZone(MEMORY[0x263F00DA8]);
  sub_22F19C77C();
  long long v23 = (void *)sub_22F223CA8();
  swift_bridgeObjectRelease();
  CGAffineTransform v24 = (void *)sub_22F223CA8();
  swift_bridgeObjectRelease();
  v29[0] = 0;
  id v25 = objc_msgSend(v22, sel_initWithDataPointer_shape_dataType_strides_deallocator_error_, v20, v23, v21, v24, 0, v29);

  if (v25)
  {
    id v26 = v29[0];
  }
  else
  {
    id v27 = v29[0];
    sub_22F2236F8();

    swift_willThrow();
  }
  swift_bridgeObjectRelease();
  return (MLMultiArray)v25;
}

MLMultiArray __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLMultiArray.transposed(to:)(Swift::OpaquePointer to)
{
  uint64_t v5 = v2;
  unint64_t v7 = *((void *)to._rawValue + 2);
  if (objc_msgSend(v1, sel_dataType) == (id)65600)
  {
    id v8 = objc_msgSend(v1, sel_strides);
    sub_22F19C77C();
    unint64_t v3 = sub_22F223CB8();

    if (!(v3 >> 62))
    {
      id v9 = *(id *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  else
  {
    __break(1u);
  }
  swift_bridgeObjectRetain();
  id v9 = (id)sub_22F2245C8();
  swift_bridgeObjectRelease();
LABEL_4:
  swift_bridgeObjectRelease();
  if ((id)v7 == v9)
  {
    uint64_t v4 = (SEL *)&unk_2649FF000;
    id v9 = objc_msgSend(v1, sel_shape);
    unint64_t v3 = sub_22F223CB8();

    if (!(v3 >> 62))
    {
      uint64_t v10 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
  }
  else
  {
    __break(1u);
  }
  swift_bridgeObjectRetain();
  uint64_t v10 = sub_22F2245C8();
  swift_bridgeObjectRelease_n();
  if (v10 < 0)
  {
    __break(1u);
    goto LABEL_24;
  }
LABEL_7:
  id v11 = v1;
  swift_bridgeObjectRetain();
  sub_22F1A791C(0, v10, v11, (uint64_t)to._rawValue);
  uint64_t v13 = v12;

  swift_bridgeObjectRelease();
  id v14 = objc_msgSend(v11, sel_dataType);
  id v15 = objc_allocWithZone(MEMORY[0x263F00DA8]);
  id v16 = sub_22F1A7830(v13, (uint64_t)v14);
  if (v2) {
    return (MLMultiArray)v16;
  }
  id v17 = v11;
  float32x4_t v64 = objc_msgSend(v17, sel_dataPointer);
  id v66 = v16;
  id v9 = v16;
  id v63 = objc_msgSend(v9, sel_dataPointer);
  id v65 = v17;
  id v18 = [v17 v4[349]];
  unint64_t v3 = sub_22F223CB8();

  uint64_t v5 = MEMORY[0x263F8EE78];
  rawValue = to._rawValue;
  if (v3 >> 62)
  {
LABEL_24:
    swift_bridgeObjectRetain();
    uint64_t v19 = sub_22F2245C8();
    swift_bridgeObjectRelease();
    if (v19) {
      goto LABEL_10;
    }
LABEL_25:
    swift_bridgeObjectRelease();
    uint64_t v22 = MEMORY[0x263F8EE78];
    goto LABEL_26;
  }
  uint64_t v19 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v19) {
    goto LABEL_25;
  }
LABEL_10:
  id v61 = v9;
  result.super.isCGFloat a = (Class)sub_22F18FC88(0, v19 & ~(v19 >> 63), 0);
  uint64_t v67 = v19;
  if (v19 < 0)
  {
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }
  uint64_t v21 = 0;
  uint64_t v22 = v5;
  unint64_t v23 = v3 & 0xC000000000000001;
  unint64_t v24 = v3;
  do
  {
    if (v23) {
      id v25 = (id)MEMORY[0x230FB2E90](v21, v3);
    }
    else {
      id v25 = *(id *)(v3 + 8 * v21 + 32);
    }
    id v26 = v25;
    id v27 = objc_msgSend(v25, sel_integerValue, v61);

    unint64_t v29 = *(void *)(v22 + 16);
    unint64_t v28 = *(void *)(v22 + 24);
    if (v29 >= v28 >> 1) {
      sub_22F18FC88((char *)(v28 > 1), v29 + 1, 1);
    }
    ++v21;
    *(void *)(v22 + 16) = v29 + 1;
    *(void *)(v22 + 8 * v29 + 32) = v27;
    unint64_t v3 = v24;
  }
  while (v67 != v21);
  swift_bridgeObjectRelease();
  uint64_t v5 = MEMORY[0x263F8EE78];
  id v9 = v61;
LABEL_26:
  id v30 = objc_msgSend(v9, sel_strides);
  unint64_t v31 = sub_22F223CB8();

  id v16 = v66;
  if (v31 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v32 = sub_22F2245C8();
    swift_bridgeObjectRelease();
    if (v32)
    {
LABEL_28:
      result.super.isCGFloat a = (Class)sub_22F18FC88(0, v32 & ~(v32 >> 63), 0);
      uint64_t v68 = v32;
      if (v32 < 0)
      {
LABEL_85:
        __break(1u);
        goto LABEL_86;
      }
      uint64_t v33 = 0;
      uint64_t v34 = v5;
      unint64_t v35 = v31 & 0xC000000000000001;
      unint64_t v36 = v31;
      do
      {
        if (v35) {
          id v37 = (id)MEMORY[0x230FB2E90](v33, v31);
        }
        else {
          id v37 = *(id *)(v31 + 8 * v33 + 32);
        }
        uint64_t v38 = v37;
        id v39 = objc_msgSend(v37, sel_integerValue);

        unint64_t v41 = *(void *)(v34 + 16);
        unint64_t v40 = *(void *)(v34 + 24);
        if (v41 >= v40 >> 1) {
          sub_22F18FC88((char *)(v40 > 1), v41 + 1, 1);
        }
        ++v33;
        *(void *)(v34 + 16) = v41 + 1;
        *(void *)(v34 + 8 * v41 + 32) = v39;
        unint64_t v31 = v36;
      }
      while (v68 != v33);
      swift_bridgeObjectRelease();
      id v16 = v66;
      if (v7) {
        goto LABEL_37;
      }
      goto LABEL_40;
    }
  }
  else
  {
    uint64_t v32 = *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v32) {
      goto LABEL_28;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v34 = MEMORY[0x263F8EE78];
  if (v7)
  {
LABEL_37:
    uint64_t v42 = sub_22F223D48();
    *(void *)(v42 + 16) = v7;
    bzero((void *)(v42 + 32), 8 * v7);
    goto LABEL_41;
  }
LABEL_40:
  uint64_t v42 = MEMORY[0x263F8EE78];
LABEL_41:
  result.super.isCGFloat a = (Class)objc_msgSend(v65, sel_count);
  if (((unint64_t)result.super.isa & 0x8000000000000000) != 0)
  {
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
  if (!result.super.isa)
  {
LABEL_67:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (MLMultiArray)v16;
  }
  if (v7)
  {
    id v43 = 0;
    unint64_t v44 = v7 - 1;
    uint64_t v45 = v42 + 32;
    while (v43 != result.super.isa)
    {
      int v46 = v43;
      if (v7 > *(void *)(v34 + 16)) {
        goto LABEL_78;
      }
      uint64_t v47 = 0;
      uint64_t v48 = 0;
      id v43 = (objc_class *)((char *)v43 + 1);
      do
      {
        unint64_t v49 = rawValue[v48 + 4];
        if (v49 >= *(void *)(v42 + 16))
        {
          __break(1u);
LABEL_70:
          __break(1u);
LABEL_71:
          __break(1u);
LABEL_72:
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
LABEL_75:
          __break(1u);
LABEL_76:
          __break(1u);
          goto LABEL_77;
        }
        uint64_t v50 = *(void *)(v45 + 8 * v49);
        uint64_t v51 = *(void *)(v34 + 32 + 8 * v48);
        uint64_t v52 = v50 * v51;
        if ((unsigned __int128)(v50 * (__int128)v51) >> 64 != (v50 * v51) >> 63) {
          goto LABEL_70;
        }
        BOOL v53 = __OFADD__(v47, v52);
        v47 += v52;
        if (v53) {
          goto LABEL_71;
        }
        ++v48;
      }
      while (v7 != v48);
      v63[v47] = v64[(void)v46];
      if (v7 > *(void *)(v42 + 16)) {
        goto LABEL_79;
      }
      uint64_t v54 = *(void *)(v45 + 8 * v44);
      uint64_t v55 = v54 + 1;
      if (__OFADD__(v54, 1)) {
        goto LABEL_80;
      }
      *(void *)(v45 + 8 * v44) = v55;
      if (v7 >= 2)
      {
        unint64_t v56 = *(void *)(v42 + 16);
        if (v7 > v56) {
          goto LABEL_81;
        }
        if (v7 > *(void *)(v22 + 16)) {
          goto LABEL_82;
        }
        unint64_t v57 = v7 + 2;
        float32x4_t v58 = (uint64_t *)(v42 + 8 * v7 + 16);
        if (v55 >= *(void *)(v22 + 32 + 8 * v44))
        {
          while (v57 - 3 < v56)
          {
            v58[1] = 0;
            if (v57 - 4 >= *(void *)(v42 + 16)) {
              goto LABEL_73;
            }
            uint64_t v59 = *v58 + 1;
            if (__OFADD__(*v58, 1)) {
              goto LABEL_74;
            }
            *float32x4_t v58 = v59;
            if (v57 - 3 < 2) {
              goto LABEL_45;
            }
            unint64_t v56 = *(void *)(v42 + 16);
            if (v57 - 4 >= v56) {
              goto LABEL_75;
            }
            if (v57 - 4 >= *(void *)(v22 + 16)) {
              goto LABEL_76;
            }
            uint64_t v60 = *(void *)(v22 + 8 * v57);
            --v58;
            --v57;
            if (v59 < v60) {
              goto LABEL_45;
            }
          }
          goto LABEL_72;
        }
      }
LABEL_45:
      if (v43 == result.super.isa) {
        goto LABEL_67;
      }
    }
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
    goto LABEL_83;
  }
LABEL_86:
  __break(1u);
  return result;
}

id sub_22F1A7830(uint64_t a1, uint64_t a2)
{
  v9[1] = *(id *)MEMORY[0x263EF8340];
  sub_22F19C77C();
  uint64_t v4 = (void *)sub_22F223CA8();
  swift_bridgeObjectRelease();
  v9[0] = 0;
  id v5 = objc_msgSend(v2, sel_initWithShape_dataType_error_, v4, a2, v9);

  if (v5)
  {
    id v6 = v9[0];
  }
  else
  {
    id v7 = v9[0];
    sub_22F2236F8();

    swift_willThrow();
  }
  return v5;
}

void sub_22F1A791C(unint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    goto LABEL_21;
  }
  if (v4)
  {
    sub_22F224498();
    if (a2 < (uint64_t)a1 || v4 < 0) {
      goto LABEL_22;
    }
    unint64_t v9 = *(void *)(a4 + 16);
    BOOL v10 = v9 >= a1;
    unint64_t v11 = v9 - a1;
    if (v10) {
      unint64_t v12 = v11;
    }
    else {
      unint64_t v12 = 0;
    }
    for (uint64_t i = (unint64_t *)(a4 + 8 * a1 + 32); ; ++i)
    {
      id v14 = objc_msgSend(a3, sel_shape);
      sub_22F19C77C();
      uint64_t v15 = sub_22F223CB8();

      if (!v12) {
        break;
      }
      unint64_t v16 = *i;
      if ((v15 & 0xC000000000000001) != 0)
      {
        MEMORY[0x230FB2E90](v16, v15);
      }
      else
      {
        if ((v16 & 0x8000000000000000) != 0) {
          goto LABEL_19;
        }
        if (v16 >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_20;
        }
        id v17 = *(id *)(v15 + 8 * v16 + 32);
      }
      swift_bridgeObjectRelease();
      sub_22F224468();
      sub_22F2244A8();
      sub_22F2244B8();
      sub_22F224478();
      --v12;
      if (!--v4) {
        return;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
  }
}

void *ImageProcessor.sceneView.getter()
{
  uint64_t v1 = *(void **)(v0 + 72);
  id v2 = v1;
  return v1;
}

double ImageProcessor.viewportSize.getter()
{
  if ((*(unsigned char *)(v0 + 104) & 1) == 0) {
    return *(double *)(v0 + 88);
  }
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(ObjectType, v1);
  double result = v3;
  *(double *)(v0 + 88) = v3;
  *(void *)(v0 + 96) = v5;
  *(unsigned char *)(v0 + 104) = 0;
  return result;
}

void ImageProcessor.viewportSize.setter(double a1, double a2)
{
  *(double *)(v2 + 88) = a1;
  *(double *)(v2 + 96) = a2;
  *(unsigned char *)(v2 + 104) = 0;
}

__n128 (*ImageProcessor.viewportSize.modify(uint64_t a1))(__n128 *a1)
{
  *(void *)(a1 + 16) = v1;
  *(double *)a1 = ImageProcessor.viewportSize.getter();
  *(void *)(a1 + 8) = v3;
  return sub_22F1A7B88;
}

__n128 sub_22F1A7B88(__n128 *a1)
{
  unint64_t v1 = a1[1].n128_u64[0];
  __n128 result = *a1;
  *(__n128 *)(v1 + 88) = *a1;
  *(unsigned char *)(v1 + 104) = 0;
  return result;
}

double ImageProcessor.viewportCenter.getter()
{
  if ((*(unsigned char *)(v0 + 128) & 1) == 0) {
    return *(double *)(v0 + 112);
  }
  double result = ImageProcessor.viewportSize.getter() * 0.5;
  double v2 = *(double *)(v0 + 96) * 0.5;
  *(double *)(v0 + 112) = result;
  *(double *)(v0 + 120) = v2;
  *(unsigned char *)(v0 + 128) = 0;
  return result;
}

void ImageProcessor.viewportCenter.setter(double a1, double a2)
{
  *(double *)(v2 + 112) = a1;
  *(double *)(v2 + 120) = a2;
  *(unsigned char *)(v2 + 128) = 0;
}

__n128 (*ImageProcessor.viewportCenter.modify(uint64_t a1))(__n128 *a1)
{
  *(void *)(a1 + 16) = v1;
  *(double *)a1 = ImageProcessor.viewportCenter.getter();
  *(void *)(a1 + 8) = v3;
  return sub_22F1A7C34;
}

__n128 sub_22F1A7C34(__n128 *a1)
{
  uint64_t v1 = (__n128 *)a1[1].n128_u64[0];
  __n128 result = *a1;
  v1[7] = *a1;
  v1[8].n128_u8[0] = 0;
  return result;
}

double ImageProcessor.outputSize.getter()
{
  return *(double *)(v0 + 136);
}

void sub_22F1A7C50(void **a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  uint64_t v4 = *(void **)(v3 + 152);
  *(void *)(v3 + 152) = v2;
  id v5 = v2;
}

void *ImageProcessor.outputBuffer.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 152);
  id v2 = v1;
  return v1;
}

__CVBuffer *ImageProcessor.scaledPixels.getter()
{
  BaseAddress = *(void **)(v0 + 160);
  if (BaseAddress) {
    return (__CVBuffer *)BaseAddress;
  }
  id v2 = (__CVBuffer **)(v0 + 152);
  swift_beginAccess();
  __n128 result = *(__CVBuffer **)(v0 + 152);
  if (!result)
  {
    __break(1u);
    goto LABEL_8;
  }
  CVPixelBufferLockBaseAddress(result, 0);
  __n128 result = *v2;
  if (!*v2)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  BaseAddress = CVPixelBufferGetBaseAddress(result);
  __n128 result = *v2;
  if (*v2)
  {
    CVPixelBufferUnlockBaseAddress(result, 0);
    *(void *)(v0 + 160) = BaseAddress;
    return (__CVBuffer *)BaseAddress;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t ImageProcessor.scaledPixels.setter(uint64_t result)
{
  *(void *)(v1 + 160) = result;
  return result;
}

void *(*ImageProcessor.scaledPixels.modify(__CVBuffer **a1))(void *result)
{
  a1[1] = v1;
  *a1 = ImageProcessor.scaledPixels.getter();
  return sub_22F1A7DCC;
}

void *sub_22F1A7DCC(void *result)
{
  *(void *)(result[1] + 160) = *result;
  return result;
}

uint64_t sub_22F1A7DD8@<X0>(void *a1@<X8>)
{
  if ((*(unsigned char *)(v1 + 232) & 1) == 0)
  {
    uint64_t v9 = *(void *)(v1 + 216);
    uint64_t v8 = *(void *)(v1 + 224);
    uint64_t v7 = *(void *)(v1 + 200);
    uint64_t v6 = *(void *)(v1 + 208);
    uint64_t v5 = *(void *)(v1 + 184);
    uint64_t v4 = *(void *)(v1 + 192);
    goto LABEL_5;
  }
  sub_22F1A8450((uint64_t)v10);
  uint64_t result = sub_22F1A931C((uint64_t)v10, (uint64_t)v11);
  if ((v12 & 1) == 0)
  {
    uint64_t v5 = v11[0];
    uint64_t v4 = v11[1];
    uint64_t v7 = v11[2];
    uint64_t v6 = v11[3];
    uint64_t v9 = v11[4];
    uint64_t v8 = v11[5];
    uint64_t result = sub_22F1A931C((uint64_t)v10, v1 + 184);
LABEL_5:
    *a1 = v5;
    a1[1] = v4;
    a1[2] = v7;
    a1[3] = v6;
    a1[4] = v9;
    a1[5] = v8;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t ImageProcessor.__allocating_init(sceneView:outputSize:)(void *a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8 = swift_allocObject();
  ImageProcessor.init(sceneView:outputSize:)(a1, a2, a3, a4);
  return v8;
}

unint64_t ImageProcessor.init(sceneView:outputSize:)(void *a1, uint64_t a2, double a3, double a4)
{
  *(void *)(v4 + 16) = CGColorSpaceCreateDeviceRGB();
  *(_OWORD *)(v4 + 24) = xmmword_22F227B00;
  *(void *)(v4 + 40) = 4;
  *(_DWORD *)(v4 + 48) = 8194;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268694560);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22F2265A0;
  *(void *)(inited + 32) = sub_22F223AC8();
  *(void *)(inited + 40) = v10;
  *(void *)(inited + 48) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithBool_, 1);
  *(void *)(inited + 56) = sub_22F223AC8();
  *(void *)(inited + 64) = v11;
  *(void *)(inited + 72) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithBool_, 1);
  unint64_t result = sub_22F185B64(inited);
  *(void *)(v4 + 152) = 0;
  *(void *)(v4 + 56) = result;
  *(void *)(v4 + 64) = 0;
  *(void *)(v4 + 88) = 0;
  *(void *)(v4 + 96) = 0;
  *(unsigned char *)(v4 + 104) = 1;
  *(void *)(v4 + 112) = 0;
  *(void *)(v4 + 120) = 0;
  *(unsigned char *)(v4 + 128) = 1;
  *(void *)(v4 + 160) = 0;
  *(_OWORD *)(v4 + 184) = 0u;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *(unsigned char *)(v4 + 232) = 1;
  *(void *)(v4 + 72) = a1;
  *(void *)(v4 + 80) = a2;
  double v13 = a3 * a4;
  *(double *)(v4 + 136) = a3;
  *(double *)(v4 + 144) = a4;
  if ((~COERCE__INT64(a3 * a4) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v13 <= -9.22337204e18)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (v13 >= 9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  *(void *)(v4 + 168) = (uint64_t)v13;
  id v14 = a1;
  unint64_t result = (unint64_t)MTLCreateSystemDefaultDevice();
  if (result)
  {
    id v15 = objc_msgSend(self, sel_contextWithMTLDevice_, result);
    swift_unknownObjectRelease();
    *(void *)(v4 + 176) = v15;
    sub_22F1A321C(0, (unint64_t *)&qword_268695000);
    CFDictionaryRef v16 = (const __CFDictionary *)sub_22F223958();
    CVBufferRef value = ImageProcessor.createPixelBuffer(pixelFormat:options:)(0x42475241u, v16).value;

    swift_beginAccess();
    id v18 = *(void **)(v4 + 152);
    *(void *)(v4 + 152) = value;

    return v4;
  }
LABEL_9:
  __break(1u);
  return result;
}

CVBufferRef_optional __swiftcall ImageProcessor.createPixelBuffer(pixelFormat:options:)(Swift::UInt32 pixelFormat, CFDictionaryRef options)
{
  v6[1] = *(CVPixelBufferRef *)MEMORY[0x263EF8340];
  v6[0] = 0;
  double v3 = *(double *)(v2 + 136);
  if ((~*(void *)&v3 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v3 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v3 >= 9.22337204e18)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  double v4 = *(double *)(v2 + 144);
  if ((~*(void *)&v4 & 0x7FF0000000000000) == 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v4 <= -9.22337204e18)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
  }
  if (v4 >= 9.22337204e18) {
    goto LABEL_13;
  }
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (uint64_t)v3, (uint64_t)v4, pixelFormat, options, v6);
  return (CVBufferRef_optional)v6[0];
}

CVPixelBufferRef ImageProcessor.createPixelBuffer(pixelFormat:options:baseAddress:)(OSType pixelFormatType, CFDictionaryRef pixelBufferAttributes, void *baseAddress)
{
  v7[1] = *(CVPixelBufferRef *)MEMORY[0x263EF8340];
  v7[0] = 0;
  double v4 = *(double *)(v3 + 136);
  if ((~*(void *)&v4 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v4 <= -9.22337204e18)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v4 >= 9.22337204e18)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  double v5 = *(double *)(v3 + 144);
  if ((~*(void *)&v5 & 0x7FF0000000000000) == 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v5 <= -9.22337204e18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v5 >= 9.22337204e18)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
  }
  if ((unint64_t)((uint64_t)v4 - 0x2000000000000000) >> 62 != 3) {
    goto LABEL_15;
  }
  CVPixelBufferCreateWithBytes((CFAllocatorRef)*MEMORY[0x263EFFB08], (uint64_t)v4, (uint64_t)v5, pixelFormatType, baseAddress, 4 * (uint64_t)v4, 0, 0, pixelBufferAttributes, v7);
  return v7[0];
}

CVBufferRef_optional __swiftcall ImageProcessor.renderInput(frame:)(ARFrame frame)
{
  id v2 = [(objc_class *)frame.super.isa capturedImage];
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F00650]), sel_initWithCVPixelBuffer_, v2);
  sub_22F1A7DD8(v13);
  v12[0] = v13[0];
  v12[1] = v13[1];
  v12[2] = v13[2];
  id v4 = objc_msgSend(v3, sel_imageByApplyingTransform_, v12);

  double v5 = *(void **)(v1 + 176);
  uint64_t v6 = (id *)(v1 + 152);
  result.CVBufferRef value = (CVBufferRef)swift_beginAccess();
  uint64_t v8 = *(void **)(v1 + 152);
  if (v8)
  {
    id v9 = v8;
    objc_msgSend(v5, sel_render_toCVPixelBuffer_, v4, v9);

    id v10 = *v6;
    id v11 = *v6;
    return (CVBufferRef_optional)v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_22F1A8450(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v1 + 80);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(ObjectType, v4);
  id v7 = objc_msgSend(v6, sel_currentFrame);

  if (v7)
  {
    id v8 = objc_msgSend(v7, sel_camera);
    objc_msgSend(v8, sel_imageResolution);
    double v10 = v9;
    objc_msgSend(v8, sel_imageResolution);
    double v12 = v11;
    objc_msgSend(v7, sel_displayTransformForOrientation_viewportSize_, 2, ImageProcessor.viewportSize.getter());
    long long v43 = *(_OWORD *)&t1.c;
    long long v47 = *(_OWORD *)&t1.a;
    CGFloat tx = t1.tx;
    CGFloat ty = t1.ty;
    CGAffineTransformMakeTranslation(&t1, v10 * -0.5, v12 * -0.5);
    *(_OWORD *)&t2.CGFloat a = v47;
    *(_OWORD *)&t2.CGFloat c = v43;
    t2.CGFloat tx = tx;
    t2.CGFloat ty = ty;
    CGAffineTransformConcat(&v51, &t1, &t2);
    long long v44 = *(_OWORD *)&v51.c;
    long long v48 = *(_OWORD *)&v51.a;
    CGFloat v15 = v51.tx;
    CGFloat v16 = v51.ty;
    CGAffineTransformMakeTranslation(&t1, v12 * 0.5, v10 * 0.5);
    long long v17 = *(_OWORD *)&t1.a;
    long long v18 = *(_OWORD *)&t1.c;
    long long v19 = *(_OWORD *)&t1.tx;
    *(_OWORD *)&t1.CGFloat a = v48;
    *(_OWORD *)&t1.CGFloat c = v44;
    t1.CGFloat tx = v15;
    t1.CGFloat ty = v16;
    *(_OWORD *)&t2.CGFloat a = v17;
    *(_OWORD *)&t2.CGFloat c = v18;
    *(_OWORD *)&t2.CGFloat tx = v19;
    CGAffineTransformConcat(&v51, &t1, &t2);
    CGFloat a = v51.a;
    CGFloat c = v51.c;
    CGFloat b = v51.b;
    CGFloat v40 = v51.tx;
    CGFloat d = v51.d;
    CGFloat v39 = v51.ty;
    double v21 = *(double *)(v2 + 136);
    double v22 = *(double *)(v2 + 144);
    double v23 = v12 - v10 * (v21 / v22);
    double v24 = v23 * 0.5;
    double v25 = v12 - v23;
    double v26 = v10 - v12 / (v21 / v22);
    double v27 = v26 * 0.5;
    double v28 = v10 - v26;
    if (v12 / v10 <= v21 / v22) {
      double v29 = 0.0;
    }
    else {
      double v29 = v24;
    }
    if (v12 / v10 <= v21 / v22) {
      double v30 = v27;
    }
    else {
      double v30 = 0.0;
    }
    if (v12 / v10 <= v21 / v22) {
      double v10 = v28;
    }
    else {
      double v12 = v25;
    }
    v54.origin.double x = v29;
    v54.origin.double y = v30;
    v54.size.Swift::Int width = v12;
    v54.size.Swift::Int height = v10;
    double Width = CGRectGetWidth(v54);
    v55.origin.double x = v29;
    v55.origin.double y = v30;
    v55.size.Swift::Int width = v12;
    v55.size.Swift::Int height = v10;
    CGFloat Height = CGRectGetHeight(v55);
    CGAffineTransformMakeScale(&t1, v21 / Width, v22 / Height);
    long long v33 = *(_OWORD *)&t1.a;
    long long v34 = *(_OWORD *)&t1.c;
    long long v35 = *(_OWORD *)&t1.tx;
    t1.CGFloat a = a;
    t1.CGFloat b = b;
    t1.CGFloat c = c;
    t1.CGFloat d = d;
    t1.CGFloat tx = v40;
    t1.CGFloat ty = v39;
    *(_OWORD *)&t2.CGFloat a = v33;
    *(_OWORD *)&t2.CGFloat c = v34;
    *(_OWORD *)&t2.CGFloat tx = v35;
    CGAffineTransformConcat(&v51, &t1, &t2);
    long long v46 = *(_OWORD *)&v51.c;
    long long v50 = *(_OWORD *)&v51.a;
    long long v42 = *(_OWORD *)&v51.tx;

    long long v37 = v42;
    long long v36 = v46;
    long long v38 = v50;
  }
  else
  {
    long long v38 = 0uLL;
    long long v36 = 0uLL;
    long long v37 = 0uLL;
  }
  *(_OWORD *)a1 = v38;
  *(_OWORD *)(a1 + 16) = v36;
  *(_OWORD *)(a1 + 32) = v37;
  *(unsigned char *)(a1 + 48) = v7 == 0;
}

void ImageProcessor.makeSamplePoints(numberOfPoints:)(uint64_t a1)
{
  double v3 = ImageProcessor.viewportSize.getter();
  double v4 = *(double *)(v1 + 96);
  double v5 = sqrt(v3 * v4 / (double)a1);
  double v6 = round(*(double *)(v1 + 88) / v5);
  if ((~*(void *)&v6 & 0x7FF0000000000000) == 0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v6 <= -9.22337204e18)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v6 >= 9.22337204e18)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  double v7 = round(v4 / v5);
  if ((~*(void *)&v7 & 0x7FF0000000000000) == 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v7 <= -9.22337204e18)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v7 >= 9.22337204e18)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v8 = (uint64_t)v7;
  if ((uint64_t)v7 < 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v8)
  {
    uint64_t v9 = (uint64_t)v6;
    if ((uint64_t)v6 < 0)
    {
LABEL_30:
      __break(1u);
      return;
    }
    uint64_t v10 = 0;
    double v11 = (char *)MEMORY[0x263F8EE78];
    while (v10 != v8)
    {
      if (v9)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          double v11 = sub_22F19B428(0, *((void *)v11 + 2) + 1, 1, v11);
        }
        uint64_t v12 = 0;
        uint64_t v13 = *((void *)v11 + 2);
        uint64_t v14 = 16 * v13;
        do
        {
          unint64_t v15 = *((void *)v11 + 3);
          if (v13 + v12 >= v15 >> 1) {
            double v11 = sub_22F19B428((char *)(v15 > 1), v13 + v12 + 1, 1, v11);
          }
          *((void *)v11 + 2) = v13 + v12 + 1;
          CGFloat v16 = &v11[v14];
          *((double *)v16 + 4) = v5 * (double)(v10 & 1) * 0.5 + v5 * ((double)v12 + 0.5);
          *((double *)v16 + 5) = v5 * ((double)v10 + 0.5);
          v14 += 16;
          ++v12;
        }
        while (v9 != v12);
      }
      if (++v10 == v8) {
        return;
      }
    }
    __break(1u);
    goto LABEL_23;
  }
}

id ImageProcessor.createDebugImage(featureProvider:inputBuffer:pixelRenderer:cameraTransform:gravity:)(id result, __CVBuffer *a2)
{
  double v3 = *(double *)(v2 + 136);
  if ((~*(void *)&v3 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (v3 <= -9.22337204e18)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v3 >= 9.22337204e18)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  double v4 = *(double *)(v2 + 144);
  if ((~*(void *)&v4 & 0x7FF0000000000000) == 0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v4 <= -9.22337204e18)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v4 >= 9.22337204e18)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v5 = (uint64_t)v3;
  if ((unint64_t)((uint64_t)v3 - 0x2000000000000000) >> 62 != 3)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  sub_22F1A321C(0, &qword_2686951B0);
  id v7 = objc_msgSend(self, sel_redColor);
  CVBufferRef_optional result = (id)UIImage.init(color:size:)((UIColor)v7, (CGSize)__PAIR128__(*(unint64_t *)&v4, *(unint64_t *)&v3));
  if (!result)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v8 = result;
  uint64_t v9 = (CGContext *)objc_msgSend(result, sel_CGImage);
  if (!v9)
  {
LABEL_18:
    __swift_instantiateConcreteTypeFromMangledName(&qword_268694B98);
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_22F227140;
    *(void *)(v19 + 56) = MEMORY[0x263F8D310];
    *(void *)(v19 + 32) = 0xD000000000000029;
    *(void *)(v19 + 40) = 0x800000022F22F040;
    sub_22F2247C8();

    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v10 = v9;
  double v11 = CGBitmapContextCreate(0, (uint64_t)v3, (uint64_t)v4, 8uLL, 4 * v5, *(CGColorSpaceRef *)(v2 + 16), *(_DWORD *)(v2 + 48));
  if (!v11)
  {
    uint64_t v12 = v10;
LABEL_17:

    goto LABEL_18;
  }
  uint64_t v12 = v11;
  if (!CGBitmapContextGetData(v11))
  {

    goto LABEL_17;
  }
  CVBufferRef_optional result = (id)sub_22F224098();
  if ((unsigned __int128)(v5 * (__int128)(uint64_t)v4) >> 64 != (v5 * (uint64_t)v4) >> 63)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  CVPixelBufferLockBaseAddress(a2, 0);
  CVPixelBufferGetBaseAddress(a2);
  uint64_t v13 = sub_22F1A321C(0, &qword_268694F48);
  MEMORY[0x270FA5388](v13);
  sub_22F224108();
  CVPixelBufferUnlockBaseAddress(a2, 0);
  CVBufferRef_optional result = CGBitmapContextCreateImage(v12);
  if (result)
  {
    uint64_t v14 = result;
    objc_msgSend(v8, sel_scale);
    double v16 = v15;
    id v17 = objc_msgSend(v8, sel_imageOrientation);
    id v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F827E8]), sel_initWithCGImage_scale_orientation_, v14, v17, v16);

    return v18;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t ImageProcessor.renderPixelBuffer(featureProvider:inputBuffer:pixelRenderer:cameraTransform:gravity:outputBuffer:)(uint64_t a1, __CVBuffer *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, CVPixelBufferRef *a10)
{
  double v11 = *(double *)(v10 + 136);
  if ((~*(void *)&v11 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v11 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v11 >= 9.22337204e18)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  double v12 = *(double *)(v10 + 144);
  if ((~*(void *)&v12 & 0x7FF0000000000000) == 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v12 <= -9.22337204e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v12 < 9.22337204e18)
  {
    uint64_t v14 = *a10;
    CVPixelBufferLockBaseAddress(*a10, 0);
    CVPixelBufferGetBaseAddress(v14);
    CVPixelBufferLockBaseAddress(a2, 0);
    CVPixelBufferGetBaseAddress(a2);
    uint64_t v15 = sub_22F1A321C(0, &qword_268694F48);
    MEMORY[0x270FA5388](v15);
    sub_22F224108();
    CVPixelBufferUnlockBaseAddress(a2, 0);
    return CVPixelBufferUnlockBaseAddress(*a10, 0);
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_22F1A8EEC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t), uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = result * a2;
  if ((unsigned __int128)(result * (__int128)a2) >> 64 != (result * a2) >> 63)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v9 = v8 + a2;
  if (__OFADD__(v8, a2))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v11 = v8 * a3;
  if ((unsigned __int128)(v8 * (__int128)a3) >> 64 != v11 >> 63)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v12 = v9 * a3;
  if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v12 < v11)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v11 == v12) {
    return result;
  }
  if (v11 >= v12)
  {
LABEL_16:
    __break(1u);
    return result;
  }
  uint64_t v17 = a3 * a2;
  do
  {
    uint64_t v18 = v11 + 1;
    uint64_t v19 = 4 * v11;
    uint64_t result = a5(*(unsigned int *)(a7 + 4 * v11), a8);
    *(_DWORD *)(a4 + v19) = result;
    uint64_t v11 = v18;
    --v17;
  }
  while (v17);
  return result;
}

void *ImageProcessor.getPixelBufferAddress(pixelBuffer:)(__CVBuffer *a1)
{
  CVPixelBufferLockBaseAddress(a1, 0);
  BaseAddress = CVPixelBufferGetBaseAddress(a1);
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return BaseAddress;
}

Swift::UInt32_optional __swiftcall ImageProcessor.getPixel(imageX:imageY:invertY:)(Swift::Int imageX, Swift::Int imageY, Swift::Bool invertY)
{
  if (imageX < 0) {
    goto LABEL_17;
  }
  double v4 = *(double *)(v3 + 136);
  if ((~*(void *)&v4 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  if (v4 <= -9.22337204e18)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v4 >= 9.22337204e18)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  Swift::Int v5 = imageX;
  uint64_t v6 = 0;
  uint64_t v7 = (uint64_t)v4;
  unsigned __int8 v8 = 1;
  if ((uint64_t)v4 <= imageX || imageY < 0) {
    return (Swift::UInt32_optional)(v6 | ((unint64_t)v8 << 32));
  }
  double v9 = *(double *)(v3 + 144);
  if ((~*(void *)&v9 & 0x7FF0000000000000) == 0) {
    goto LABEL_22;
  }
  if (v9 <= -9.22337204e18)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v9 >= 9.22337204e18)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if ((uint64_t)v9 <= imageY)
  {
LABEL_17:
    uint64_t v6 = 0;
    unsigned __int8 v8 = 1;
    return (Swift::UInt32_optional)(v6 | ((unint64_t)v8 << 32));
  }
  if (invertY) {
    Swift::Int v10 = (uint64_t)v9 + ~imageY;
  }
  else {
    Swift::Int v10 = imageY;
  }
  imageX = (Swift::Int)ImageProcessor.scaledPixels.getter();
  Swift::Int v11 = v10 * v7;
  if ((unsigned __int128)(v10 * (__int128)v7) >> 64 != (v10 * v7) >> 63) {
    goto LABEL_25;
  }
  BOOL v12 = __OFADD__(v11, v5);
  Swift::Int v13 = v11 + v5;
  if (v12)
  {
LABEL_26:
    __break(1u);
    return (Swift::UInt32_optional)imageX;
  }
  unsigned __int8 v8 = 0;
  uint64_t v6 = *(unsigned int *)(imageX + 4 * v13);
  return (Swift::UInt32_optional)(v6 | ((unint64_t)v8 << 32));
}

CGPoint __swiftcall ImageProcessor.frameNormalize(screenPoint:)(CGPoint screenPoint)
{
  double y = screenPoint.y;
  double v3 = screenPoint.x / ImageProcessor.viewportSize.getter();
  double v4 = y / *(double *)(v1 + 96);
  result.double y = v4;
  result.double x = v3;
  return result;
}

id *ImageProcessor.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ImageProcessor.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_22F1A9254(uint64_t a1)
{
  return sub_22F1A8EEC(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(uint64_t (**)(void, uint64_t))(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64));
}

id sub_22F1A929C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  double v4 = *(void **)(v3 + 152);
  *a2 = v4;
  return v4;
}

uint64_t type metadata accessor for ImageProcessor()
{
  return self;
}

uint64_t sub_22F1A931C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2686951B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t static LineUtil.line2i(of:)@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  sub_22F1A9CE8((uint64_t)v7, a2, a3, a4, a5);
  return sub_22F1899D0((uint64_t)v7, a1, &qword_268694BB0);
}

uint64_t static LineUtil.getLinePoints(line:points:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  sub_22F1A9F10(a1, a2, a3, a4, a5);
  return swift_bridgeObjectRetain();
}

double static LineUtil.getIntersection(line1:line2:)(double result, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  double v8 = a3 - result;
  double v9 = a8 - a6;
  double v10 = a4 - a2;
  double v11 = a7 - a5;
  double v12 = v8 * v9 - v10 * v11;
  if (v12 != 0.0)
  {
    double v13 = a5 - result;
    double v14 = a6 - a2;
    double v15 = (v10 * v13 - v8 * v14) / v12;
    if (v15 <= 1.0 && v15 >= 0.0)
    {
      double v16 = (v13 * v9 - v14 * v11) / v12;
      if (v16 >= 0.0 && v16 <= 1.0) {
        return v8 * v16 + result;
      }
    }
  }
  return result;
}

uint64_t static LineUtil.getIntersection(line:rect:)@<X0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>, CGFloat a6@<D4>, CGFloat a7@<D5>, CGFloat a8@<D6>, CGFloat a9@<D7>)
{
  sub_22F1A9FD8((uint64_t)v11, a2, a3, a4, a5, a6, a7, a8, a9);
  return sub_22F1899D0((uint64_t)v11, a1, &qword_2686951C0);
}

uint64_t static LineUtil.drawLine(x0:y0:x1:y1:with:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v5 = a4 - a2;
  if (__OFSUB__(a4, a2))
  {
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = a2;
  uint64_t v7 = result;
  if (v5 < 0)
  {
    BOOL v8 = __OFSUB__(0, v5);
    uint64_t v5 = a2 - a4;
    if (v8) {
      goto LABEL_18;
    }
  }
  uint64_t v9 = a3 - result;
  if (__OFSUB__(a3, result))
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    return result;
  }
  if (v9 < 0)
  {
    BOOL v8 = __OFSUB__(0, v9);
    uint64_t v9 = result - a3;
    if (v8) {
      goto LABEL_19;
    }
  }
  if (v5 >= v9)
  {
    if (a4 < a2)
    {
      CGPoint result = a3;
      a2 = a4;
      a3 = v7;
      a4 = v6;
    }
    return sub_22F1AA458(result, a2, a3, a4, a5);
  }
  else
  {
    if (a3 < result)
    {
      CGPoint result = a3;
      a2 = a4;
      a3 = v7;
      a4 = v6;
    }
    return sub_22F1AA340(result, a2, a3, a4, a5);
  }
}

uint64_t static LineUtil.drawLine(p1:p2:with:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v5 = a4 - a2;
  if (__OFSUB__(a4, a2))
  {
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = a2;
  uint64_t v7 = result;
  if (v5 < 0)
  {
    BOOL v8 = __OFSUB__(0, v5);
    uint64_t v5 = a2 - a4;
    if (v8) {
      goto LABEL_18;
    }
  }
  uint64_t v9 = a3 - result;
  if (__OFSUB__(a3, result))
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    return result;
  }
  if (v9 < 0)
  {
    BOOL v8 = __OFSUB__(0, v9);
    uint64_t v9 = result - a3;
    if (v8) {
      goto LABEL_19;
    }
  }
  if (v5 >= v9)
  {
    if (a4 < a2)
    {
      CGPoint result = a3;
      a2 = a4;
      a3 = v7;
      a4 = v6;
    }
    return sub_22F1AA458(result, a2, a3, a4, a5);
  }
  else
  {
    if (a3 < result)
    {
      CGPoint result = a3;
      a2 = a4;
      a3 = v7;
      a4 = v6;
    }
    return sub_22F1AA340(result, a2, a3, a4, a5);
  }
}

uint64_t static LineUtil.getLinePoints(p1:p2:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 - a2;
  if (__OFSUB__(a4, a2))
  {
LABEL_114:
    __break(1u);
    goto LABEL_115;
  }
  uint64_t v5 = a4;
  uint64_t v6 = a3;
  uint64_t v7 = a2;
  uint64_t v8 = result;
  uint64_t v9 = a4 - a2;
  if (v4 < 0)
  {
    uint64_t v9 = a2 - a4;
    if (__OFSUB__(0, v4)) {
      goto LABEL_116;
    }
  }
  uint64_t v10 = a3 - result;
  if (__OFSUB__(a3, result))
  {
LABEL_115:
    __break(1u);
LABEL_116:
    __break(1u);
LABEL_117:
    __break(1u);
    goto LABEL_118;
  }
  uint64_t v11 = a3 - result;
  if (v10 < 0)
  {
    uint64_t v11 = result - a3;
    if (__OFSUB__(0, v10)) {
      goto LABEL_117;
    }
  }
  if (v9 >= v11)
  {
    if (a4 < a2)
    {
      if (result >= a3)
      {
        if (__OFSUB__(result, a3))
        {
LABEL_130:
          __break(1u);
          goto LABEL_131;
        }
        uint64_t v13 = a2 - a4;
        if (__OFSUB__(a2, a4))
        {
LABEL_131:
          __break(1u);
          goto LABEL_132;
        }
        uint64_t v47 = 1;
        uint64_t v10 = result - a3;
      }
      else
      {
        uint64_t v13 = a2 - a4;
        if (__OFSUB__(a2, a4))
        {
LABEL_127:
          __break(1u);
          goto LABEL_128;
        }
        uint64_t v47 = -1;
      }
      if (v10 + 0x4000000000000000 >= 0)
      {
        uint64_t v16 = 2 * v10;
        uint64_t v17 = 2 * v10 - v13;
        if (!__OFSUB__(2 * v10, v13))
        {
          uint64_t v18 = v13 + 0x4000000000000000;
          uint64_t v19 = 2 * v13;
          uint64_t v20 = MEMORY[0x263F8EE78];
          while (1)
          {
            CGPoint result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              CGPoint result = (uint64_t)sub_22F19B10C(0, *(void *)(v20 + 16) + 1, 1, (char *)v20);
              uint64_t v20 = result;
            }
            unint64_t v22 = *(void *)(v20 + 16);
            unint64_t v21 = *(void *)(v20 + 24);
            if (v22 >= v21 >> 1)
            {
              CGPoint result = (uint64_t)sub_22F19B10C((char *)(v21 > 1), v22 + 1, 1, (char *)v20);
              uint64_t v20 = result;
            }
            *(void *)(v20 + 16) = v22 + 1;
            unint64_t v23 = v20 + 16 * v22;
            *(void *)(v23 + 32) = v6;
            *(void *)(v23 + 40) = v5;
            if (v17 >= 1)
            {
              BOOL v24 = __OFADD__(v6, v47);
              v6 += v47;
              if (v24) {
                goto LABEL_102;
              }
              if (v18 < 0) {
                goto LABEL_103;
              }
              BOOL v24 = __OFSUB__(v17, v19);
              v17 -= v19;
              if (v24) {
                goto LABEL_104;
              }
            }
            BOOL v24 = __OFADD__(v17, v16);
            v17 += v16;
            if (v24) {
              goto LABEL_96;
            }
            if (v7 == v5) {
              return v20;
            }
            BOOL v24 = __OFADD__(v5++, 1);
            if (v24) {
              goto LABEL_98;
            }
          }
        }
        goto LABEL_122;
      }
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
      goto LABEL_123;
    }
    if (a3 >= result)
    {
      uint64_t v15 = 1;
    }
    else
    {
      uint64_t v10 = result - a3;
      if (__OFSUB__(result, a3))
      {
LABEL_129:
        __break(1u);
        goto LABEL_130;
      }
      uint64_t v15 = -1;
    }
    uint64_t v49 = v15;
    if (v10 + 0x4000000000000000 >= 0)
    {
      uint64_t v32 = 2 * v10;
      uint64_t v33 = 2 * v10 - v4;
      if (!__OFSUB__(2 * v10, v4))
      {
        uint64_t v34 = v4 + 0x4000000000000000;
        uint64_t v35 = 2 * v4;
        uint64_t v20 = MEMORY[0x263F8EE78];
        while (1)
        {
          CGPoint result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            CGPoint result = (uint64_t)sub_22F19B10C(0, *(void *)(v20 + 16) + 1, 1, (char *)v20);
            uint64_t v20 = result;
          }
          unint64_t v37 = *(void *)(v20 + 16);
          unint64_t v36 = *(void *)(v20 + 24);
          if (v37 >= v36 >> 1)
          {
            CGPoint result = (uint64_t)sub_22F19B10C((char *)(v36 > 1), v37 + 1, 1, (char *)v20);
            uint64_t v20 = result;
          }
          *(void *)(v20 + 16) = v37 + 1;
          unint64_t v38 = v20 + 16 * v37;
          *(void *)(v38 + 32) = v8;
          *(void *)(v38 + 40) = v7;
          if (v33 >= 1)
          {
            BOOL v24 = __OFADD__(v8, v49);
            v8 += v49;
            if (v24) {
              goto LABEL_108;
            }
            if (v34 < 0) {
              goto LABEL_109;
            }
            BOOL v24 = __OFSUB__(v33, v35);
            v33 -= v35;
            if (v24) {
              goto LABEL_110;
            }
          }
          BOOL v24 = __OFADD__(v33, v32);
          v33 += v32;
          if (v24) {
            goto LABEL_95;
          }
          if (v5 == v7) {
            return v20;
          }
          BOOL v24 = __OFADD__(v7++, 1);
          if (v24) {
            goto LABEL_100;
          }
        }
      }
      goto LABEL_124;
    }
LABEL_120:
    __break(1u);
    goto LABEL_121;
  }
  if (a3 >= result)
  {
    if (a4 >= a2)
    {
      uint64_t v14 = 1;
    }
    else
    {
      uint64_t v4 = a2 - a4;
      if (__OFSUB__(a2, a4))
      {
LABEL_128:
        __break(1u);
        goto LABEL_129;
      }
      uint64_t v14 = -1;
    }
    uint64_t v48 = v14;
    if (v4 + 0x4000000000000000 < 0) {
      goto LABEL_119;
    }
    uint64_t v25 = 2 * v4;
    uint64_t v26 = 2 * v4 - v10;
    if (__OFSUB__(2 * v4, v10))
    {
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
      goto LABEL_125;
    }
    uint64_t v27 = v10 + 0x4000000000000000;
    uint64_t v28 = 2 * v10;
    uint64_t v20 = MEMORY[0x263F8EE78];
    while (1)
    {
      CGPoint result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        CGPoint result = (uint64_t)sub_22F19B10C(0, *(void *)(v20 + 16) + 1, 1, (char *)v20);
        uint64_t v20 = result;
      }
      unint64_t v30 = *(void *)(v20 + 16);
      unint64_t v29 = *(void *)(v20 + 24);
      if (v30 >= v29 >> 1)
      {
        CGPoint result = (uint64_t)sub_22F19B10C((char *)(v29 > 1), v30 + 1, 1, (char *)v20);
        uint64_t v20 = result;
      }
      *(void *)(v20 + 16) = v30 + 1;
      unint64_t v31 = v20 + 16 * v30;
      *(void *)(v31 + 32) = v8;
      *(void *)(v31 + 40) = v7;
      if (v26 >= 1)
      {
        BOOL v24 = __OFADD__(v7, v48);
        v7 += v48;
        if (v24) {
          goto LABEL_105;
        }
        if (v27 < 0) {
          goto LABEL_106;
        }
        BOOL v24 = __OFSUB__(v26, v28);
        v26 -= v28;
        if (v24) {
          goto LABEL_107;
        }
      }
      BOOL v24 = __OFADD__(v26, v25);
      v26 += v25;
      if (v24) {
        break;
      }
      if (v6 == v8) {
        return v20;
      }
      BOOL v24 = __OFADD__(v8++, 1);
      if (v24) {
        goto LABEL_99;
      }
    }
    __break(1u);
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
LABEL_98:
    __break(1u);
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
LABEL_101:
    __break(1u);
LABEL_102:
    __break(1u);
LABEL_103:
    __break(1u);
LABEL_104:
    __break(1u);
LABEL_105:
    __break(1u);
LABEL_106:
    __break(1u);
LABEL_107:
    __break(1u);
LABEL_108:
    __break(1u);
LABEL_109:
    __break(1u);
LABEL_110:
    __break(1u);
LABEL_111:
    __break(1u);
LABEL_112:
    __break(1u);
LABEL_113:
    __break(1u);
    goto LABEL_114;
  }
  uint64_t v12 = result - a3;
  if (__OFSUB__(result, a3))
  {
LABEL_118:
    __break(1u);
LABEL_119:
    __break(1u);
    goto LABEL_120;
  }
  if (a2 < a4)
  {
    uint64_t v46 = -1;
    goto LABEL_77;
  }
  if (!__OFSUB__(a2, a4))
  {
    uint64_t v46 = 1;
    uint64_t v4 = a2 - a4;
LABEL_77:
    if (v4 + 0x4000000000000000 >= 0)
    {
      uint64_t v39 = 2 * v4;
      uint64_t v40 = 2 * v4 - v12;
      if (!__OFSUB__(2 * v4, v12))
      {
        uint64_t v41 = v12 + 0x4000000000000000;
        uint64_t v42 = 2 * v12;
        uint64_t v20 = MEMORY[0x263F8EE78];
        while (1)
        {
          CGPoint result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            CGPoint result = (uint64_t)sub_22F19B10C(0, *(void *)(v20 + 16) + 1, 1, (char *)v20);
            uint64_t v20 = result;
          }
          unint64_t v44 = *(void *)(v20 + 16);
          unint64_t v43 = *(void *)(v20 + 24);
          if (v44 >= v43 >> 1)
          {
            CGPoint result = (uint64_t)sub_22F19B10C((char *)(v43 > 1), v44 + 1, 1, (char *)v20);
            uint64_t v20 = result;
          }
          *(void *)(v20 + 16) = v44 + 1;
          unint64_t v45 = v20 + 16 * v44;
          *(void *)(v45 + 32) = v6;
          *(void *)(v45 + 40) = v5;
          if (v40 >= 1)
          {
            BOOL v24 = __OFADD__(v5, v46);
            v5 += v46;
            if (v24) {
              goto LABEL_111;
            }
            if (v41 < 0) {
              goto LABEL_112;
            }
            BOOL v24 = __OFSUB__(v40, v42);
            v40 -= v42;
            if (v24) {
              goto LABEL_113;
            }
          }
          BOOL v24 = __OFADD__(v40, v39);
          v40 += v39;
          if (v24) {
            goto LABEL_97;
          }
          if (v8 == v6) {
            return v20;
          }
          BOOL v24 = __OFADD__(v6++, 1);
          if (v24) {
            goto LABEL_101;
          }
        }
      }
      goto LABEL_126;
    }
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
    goto LABEL_127;
  }
LABEL_132:
  __break(1u);
  return result;
}

uint64_t static LineUtil.getLinePoints(p1:p2:points:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a4 - a2;
  if (__OFSUB__(a4, a2))
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v6 = a2;
  uint64_t v7 = result;
  if (v5 < 0)
  {
    BOOL v8 = __OFSUB__(0, v5);
    uint64_t v5 = a2 - a4;
    if (v8) {
      goto LABEL_19;
    }
  }
  uint64_t v9 = a3 - result;
  if (__OFSUB__(a3, result))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  if (v9 < 0)
  {
    BOOL v8 = __OFSUB__(0, v9);
    uint64_t v9 = result - a3;
    if (v8) {
      goto LABEL_20;
    }
  }
  if (v5 >= v9)
  {
    if (a4 < a2)
    {
      CGPoint result = a3;
      a2 = a4;
      a3 = v7;
      a4 = v6;
    }
    sub_22F1AA714(result, a2, a3, a4, a5);
  }
  else
  {
    if (a3 < result)
    {
      CGPoint result = a3;
      a2 = a4;
      a3 = v7;
      a4 = v6;
    }
    sub_22F1AA57C(result, a2, a3, a4, a5);
  }
  return swift_bridgeObjectRetain();
}

uint64_t static LineUtil.isParallel(_:_:)(float32x4_t a1, float32x4_t a2)
{
  int32x4_t v2 = (int32x4_t)vmulq_f32(a1, a1);
  v2.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v2, 2), vadd_f32(*(float32x2_t *)v2.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v2.i8, 1))).u32[0];
  float32x2_t v3 = vrsqrte_f32((float32x2_t)v2.u32[0]);
  float32x2_t v4 = vmul_f32(v3, vrsqrts_f32((float32x2_t)v2.u32[0], vmul_f32(v3, v3)));
  float32x4_t v5 = vmulq_n_f32(a1, vmul_f32(v4, vrsqrts_f32((float32x2_t)v2.u32[0], vmul_f32(v4, v4))).f32[0]);
  int32x4_t v6 = (int32x4_t)vmulq_f32(a2, a2);
  v6.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v6, 2), vadd_f32(*(float32x2_t *)v6.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v6.i8, 1))).u32[0];
  float32x2_t v7 = vrsqrte_f32((float32x2_t)v6.u32[0]);
  float32x2_t v8 = vmul_f32(v7, vrsqrts_f32((float32x2_t)v6.u32[0], vmul_f32(v7, v7)));
  float32x4_t v9 = vmulq_f32(v5, vmulq_n_f32(a2, vmul_f32(v8, vrsqrts_f32((float32x2_t)v6.u32[0], vmul_f32(v8, v8))).f32[0]));
  v9.f32[0] = v9.f32[2] + vaddv_f32(*(float32x2_t *)v9.f32);
  float v10 = fabsf(v9.f32[0]);
  if ((float)(v9.f32[0] + 1.0) >= 0.001) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = -1;
  }
  if (v10 > 0.999) {
    return 1;
  }
  else {
    return v11;
  }
}

uint64_t LineUtil.deinit()
{
  return v0;
}

uint64_t LineUtil.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void sub_22F1A9CE8(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  if ((~*(void *)&a2 & 0x7FF0000000000000) == 0) {
    goto LABEL_12;
  }
  double v5 = round(a2);
  BOOL v6 = v5 < -9.22337204e18 || v5 > 9.22337204e18;
  if (v6 || (~*(void *)&a3 & 0x7FF0000000000000) == 0) {
    goto LABEL_12;
  }
  double v7 = round(a3);
  BOOL v8 = v7 < -9.22337204e18 || v7 > 9.22337204e18;
  if (v8 || (~*(void *)&a4 & 0x7FF0000000000000) == 0) {
    goto LABEL_12;
  }
  uint64_t v9 = 0;
  double v14 = round(a4);
  char v13 = 1;
  if (v14 < -9.22337204e18) {
    goto LABEL_32;
  }
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  if (v14 > 9.22337204e18) {
    goto LABEL_13;
  }
  if ((~*(void *)&a5 & 0x7FF0000000000000) == 0)
  {
LABEL_12:
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    char v13 = 1;
LABEL_13:
    *(void *)a1 = v9;
    *(void *)(a1 + 8) = v10;
    *(void *)(a1 + 16) = v11;
    *(void *)(a1 + 24) = v12;
    *(unsigned char *)(a1 + 32) = v13;
    return;
  }
  uint64_t v9 = 0;
  double v15 = round(a5);
  char v13 = 1;
  if (v15 < -9.22337204e18)
  {
LABEL_32:
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    goto LABEL_13;
  }
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  if (v15 > 9.22337204e18) {
    goto LABEL_13;
  }
  if ((~*(void *)&v5 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_34;
  }
  if (v5 <= -9.22337204e18)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v5 >= 9.22337204e18)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if ((~*(void *)&v7 & 0x7FF0000000000000) == 0)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (v7 <= -9.22337204e18)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (v7 >= 9.22337204e18)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if ((~*(void *)&v14 & 0x7FF0000000000000) == 0)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if (v14 <= -9.22337204e18)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v14 >= 9.22337204e18)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if ((~*(void *)&v15 & 0x7FF0000000000000) == 0)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if (v15 <= -9.22337204e18)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  if (v15 < 9.22337204e18)
  {
    char v13 = 0;
    uint64_t v9 = (uint64_t)v5;
    uint64_t v10 = (uint64_t)v7;
    uint64_t v11 = (uint64_t)v14;
    uint64_t v12 = (uint64_t)v15;
    goto LABEL_13;
  }
LABEL_44:
  __break(1u);
}

uint64_t sub_22F1A9F10(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a4 - a2;
  if (__OFSUB__(a4, a2))
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v7 = a2;
  uint64_t v8 = result;
  if (v5 < 0)
  {
    BOOL v9 = __OFSUB__(0, v5);
    uint64_t v5 = a2 - a4;
    if (v9) {
      goto LABEL_17;
    }
  }
  uint64_t v10 = a3 - result;
  if (__OFSUB__(a3, result))
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  if (v10 < 0)
  {
    BOOL v9 = __OFSUB__(0, v10);
    uint64_t v10 = result - a3;
    if (v9) {
      goto LABEL_18;
    }
  }
  if (v5 >= v10)
  {
    if (a4 < a2)
    {
      CGPoint result = a3;
      a2 = a4;
      a3 = v8;
      a4 = v7;
    }
    sub_22F1AA714(result, a2, a3, a4, a5);
  }
  else
  {
    if (a3 < result)
    {
      CGPoint result = a3;
      a2 = a4;
      a3 = v8;
      a4 = v7;
    }
    sub_22F1AA57C(result, a2, a3, a4, a5);
  }
  return *a5;
}

uint64_t sub_22F1A9FD8@<X0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>, CGFloat a6@<D4>, CGFloat a7@<D5>, CGFloat a8@<D6>, CGFloat a9@<D7>)
{
  v58.origin.double x = a6;
  v58.origin.double y = a7;
  v58.size.Swift::Int width = a8;
  v58.size.Swift::Int height = a9;
  v56.double x = a2;
  v56.double y = a3;
  BOOL v16 = CGRectContainsPoint(v58, v56);
  v59.origin.double x = a6;
  v59.origin.double y = a7;
  v59.size.Swift::Int width = a8;
  v59.size.Swift::Int height = a9;
  v57.double y = a5;
  v57.double x = a4;
  uint64_t result = CGRectContainsPoint(v59, v57);
  int v18 = result;
  if (!v16 || !result)
  {
    v60.origin.double x = a6;
    v60.origin.double y = a7;
    v60.size.Swift::Int width = a8;
    v60.size.Swift::Int height = a9;
    CGFloat v52 = CGRectGetWidth(v60) + a6;
    v61.origin.double x = a6;
    v61.origin.double y = a7;
    v61.size.Swift::Int width = a8;
    v61.size.Swift::Int height = a9;
    double Width = CGRectGetWidth(v61);
    v62.origin.double x = a6;
    v62.origin.double y = a7;
    v62.size.Swift::Int width = a8;
    v62.size.Swift::Int height = a9;
    double v22 = Width + a6;
    CGFloat v23 = CGRectGetHeight(v62) + a7;
    v63.origin.double x = a6;
    v63.origin.double y = a7;
    v63.size.Swift::Int width = a8;
    v63.size.Swift::Int height = a9;
    CGFloat v24 = CGRectGetHeight(v63) + a7;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2686951C8);
    uint64_t inited = swift_initStackObject();
    uint64_t v26 = 0;
    *(_OWORD *)(inited + 16) = xmmword_22F227B00;
    *(CGFloat *)(inited + 32) = a6;
    *(CGFloat *)(inited + 40) = a7;
    *(CGFloat *)(inited + 48) = v52;
    *(CGFloat *)(inited + 56) = a7 + 0.0;
    *(CGFloat *)(inited + 64) = v52;
    *(CGFloat *)(inited + 72) = a7 + 0.0;
    *(double *)(inited + 80) = v22;
    *(CGFloat *)(inited + 88) = v23;
    *(double *)(inited + 96) = v22;
    *(CGFloat *)(inited + 104) = v23;
    *(CGFloat *)(inited + 112) = a6 + 0.0;
    *(CGFloat *)(inited + 120) = v24;
    *(CGFloat *)(inited + 128) = a6 + 0.0;
    *(CGFloat *)(inited + 136) = v24;
    double v27 = a4 - a2;
    double v28 = a5 - a3;
    *(CGFloat *)(inited + 144) = a6;
    *(CGFloat *)(inited + 152) = a7;
    unint64_t v29 = (char *)MEMORY[0x263F8EE78];
    do
    {
      double v31 = *(double *)(inited + v26 + 32);
      double v30 = *(double *)(inited + v26 + 40);
      double v32 = *(double *)(inited + v26 + 56) - v30;
      double v33 = *(double *)(inited + v26 + 48) - v31;
      double v34 = v27 * v32 - v28 * v33;
      if (v34 != 0.0)
      {
        double v35 = v31 - a2;
        double v36 = v35 * v32;
        double v37 = v30 - a3;
        double v38 = (v36 - (v30 - a3) * v33) / v34;
        if (v38 >= 0.0 && v38 <= 1.0)
        {
          double v40 = (v28 * v35 - v27 * v37) / v34;
          if (v40 >= 0.0 && v40 <= 1.0)
          {
            double v42 = v27 * v38 + a2;
            double v43 = v28 * v38 + a3;
            uint64_t v44 = *((void *)v29 + 2);
            if (!v44
              || (float v45 = (*((double *)v29 + 4) - v42) * (*((double *)v29 + 4) - v42),
                  float v46 = (*((double *)v29 + 5) - v43) * (*((double *)v29 + 5) - v43),
                  (float)(v45 + v46) > 0.00000011921))
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                unint64_t v29 = sub_22F19B428(0, v44 + 1, 1, v29);
              }
              unint64_t v48 = *((void *)v29 + 2);
              unint64_t v47 = *((void *)v29 + 3);
              if (v48 >= v47 >> 1) {
                unint64_t v29 = sub_22F19B428((char *)(v47 > 1), v48 + 1, 1, v29);
              }
              *((void *)v29 + 2) = v48 + 1;
              uint64_t v49 = &v29[16 * v48];
              *((double *)v49 + 4) = v42;
              *((double *)v49 + 5) = v43;
              if (v48 == 1) {
                break;
              }
            }
          }
        }
      }
      v26 += 32;
    }
    while (v26 != 128);
    swift_bridgeObjectRelease();
    uint64_t v50 = *((void *)v29 + 2);
    if (v50 == 1)
    {
      if ((v16 | v18))
      {
        if (!v16)
        {
          a3 = a5;
          a2 = a4;
        }
        long long v51 = *((_OWORD *)v29 + 2);
        goto LABEL_31;
      }
    }
    else if (v50 == 2)
    {
      a2 = *((double *)v29 + 4);
      a3 = *((double *)v29 + 5);
      long long v51 = *((_OWORD *)v29 + 3);
LABEL_31:
      long long v55 = v51;
      uint64_t result = swift_bridgeObjectRelease();
      long long v20 = v55;
      char v19 = 0;
      goto LABEL_33;
    }
    uint64_t result = swift_bridgeObjectRelease();
    long long v20 = 0uLL;
    char v19 = 1;
    a2 = 0.0;
    a3 = 0.0;
    goto LABEL_33;
  }
  char v19 = 0;
  *(CGFloat *)&long long v20 = a4;
  *((CGFloat *)&v20 + 1) = a5;
LABEL_33:
  *(CGFloat *)a1 = a2;
  *(CGFloat *)(a1 + 8) = a3;
  *(_OWORD *)(a1 + 16) = v20;
  *(unsigned char *)(a1 + 32) = v19;
  return result;
}

uint64_t sub_22F1AA340(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v5 = a3 - result;
  if (__OFSUB__(a3, result)) {
    goto LABEL_25;
  }
  uint64_t v8 = a2;
  uint64_t v9 = result;
  uint64_t v10 = a4 - a2;
  if (a4 < a2)
  {
    uint64_t v10 = a2 - a4;
    if (__OFSUB__(a2, a4))
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    uint64_t v11 = -1;
    goto LABEL_7;
  }
  if (!__OFSUB__(a4, a2))
  {
    uint64_t v11 = 1;
LABEL_7:
    if (v10 + 0x4000000000000000 < 0)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    uint64_t v12 = 2 * v10;
    uint64_t v13 = 2 * v10 - v5;
    if (__OFSUB__(2 * v10, v5))
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    if (a3 < result)
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    uint64_t v14 = v5 + 0x4000000000000000;
    uint64_t v15 = 2 * v5;
    while (1)
    {
      uint64_t result = a5(v9, v8);
      if (v13 >= 1)
      {
        BOOL v16 = __OFADD__(v8, v11);
        v8 += v11;
        if (v16) {
          goto LABEL_22;
        }
        if (v14 < 0) {
          goto LABEL_23;
        }
        BOOL v16 = __OFSUB__(v13, v15);
        v13 -= v15;
        if (v16) {
          goto LABEL_24;
        }
      }
      BOOL v16 = __OFADD__(v13, v12);
      v13 += v12;
      if (v16) {
        break;
      }
      if (a3 == v9) {
        return result;
      }
      BOOL v16 = __OFADD__(v9++, 1);
      if (v16)
      {
        __break(1u);
        return result;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_22F1AA458(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v7 = a2;
  uint64_t v8 = result;
  uint64_t v9 = a3 - result;
  if (a3 < result)
  {
    uint64_t v9 = result - a3;
    if (__OFSUB__(result, a3))
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    uint64_t v10 = a4 - a2;
    if (__OFSUB__(a4, a2))
    {
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    uint64_t v11 = -1;
LABEL_8:
    if (v9 + 0x4000000000000000 >= 0)
    {
      uint64_t v12 = 2 * v9;
      uint64_t v13 = 2 * v9 - v10;
      if (__OFSUB__(2 * v9, v10))
      {
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
      if (a4 < a2)
      {
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v14 = v10 + 0x4000000000000000;
      uint64_t v15 = 2 * v10;
      while (1)
      {
        uint64_t result = a5(v8, v7);
        if (v13 >= 1)
        {
          BOOL v16 = __OFADD__(v8, v11);
          v8 += v11;
          if (v16) {
            goto LABEL_23;
          }
          if (v14 < 0) {
            goto LABEL_24;
          }
          BOOL v16 = __OFSUB__(v13, v15);
          v13 -= v15;
          if (v16) {
            goto LABEL_25;
          }
        }
        BOOL v16 = __OFADD__(v13, v12);
        v13 += v12;
        if (v16) {
          break;
        }
        if (a4 == v7) {
          return result;
        }
        BOOL v16 = __OFADD__(v7++, 1);
        if (v16)
        {
          __break(1u);
          return result;
        }
      }
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
    }
    __break(1u);
    goto LABEL_27;
  }
  if (__OFSUB__(a3, result))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v10 = a4 - a2;
  if (!__OFSUB__(a4, a2))
  {
    uint64_t v11 = 1;
    goto LABEL_8;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_22F1AA57C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a3 - result;
  if (__OFSUB__(a3, result)) {
    goto LABEL_30;
  }
  uint64_t v8 = a2;
  uint64_t v9 = result;
  uint64_t v10 = a4 - a2;
  if (a4 < a2)
  {
    uint64_t v10 = a2 - a4;
    if (__OFSUB__(a2, a4))
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    uint64_t v11 = -1;
    goto LABEL_7;
  }
  if (!__OFSUB__(a4, a2))
  {
    uint64_t v11 = 1;
LABEL_7:
    uint64_t v21 = v11;
    if (v10 + 0x4000000000000000 < 0)
    {
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    uint64_t v12 = 2 * v10;
    uint64_t v13 = 2 * v10 - v5;
    if (__OFSUB__(2 * v10, v5))
    {
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    if (a3 < result)
    {
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    uint64_t v20 = v5 + 0x4000000000000000;
    uint64_t v14 = 2 * v5;
    uint64_t v15 = *a5;
    while (1)
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      *a5 = v15;
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_22F19B10C(0, *(void *)(v15 + 16) + 1, 1, (char *)v15);
        uint64_t v15 = result;
        *a5 = result;
      }
      unint64_t v17 = *(void *)(v15 + 16);
      unint64_t v16 = *(void *)(v15 + 24);
      if (v17 >= v16 >> 1)
      {
        uint64_t result = (uint64_t)sub_22F19B10C((char *)(v16 > 1), v17 + 1, 1, (char *)v15);
        uint64_t v15 = result;
      }
      *(void *)(v15 + 16) = v17 + 1;
      unint64_t v18 = v15 + 16 * v17;
      *(void *)(v18 + 32) = v9;
      *(void *)(v18 + 40) = v8;
      *a5 = v15;
      if (v13 >= 1)
      {
        BOOL v19 = __OFADD__(v8, v21);
        v8 += v21;
        if (v19) {
          goto LABEL_27;
        }
        if (v20 < 0) {
          goto LABEL_28;
        }
        BOOL v19 = __OFSUB__(v13, v14);
        v13 -= v14;
        if (v19) {
          goto LABEL_29;
        }
      }
      BOOL v19 = __OFADD__(v13, v12);
      v13 += v12;
      if (v19) {
        break;
      }
      if (a3 == v9) {
        return result;
      }
      BOOL v19 = __OFADD__(v9++, 1);
      if (v19) {
        goto LABEL_26;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_22F1AA714(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7 = a2;
  uint64_t v8 = result;
  uint64_t v9 = a3 - result;
  if (a3 < result)
  {
    uint64_t v9 = result - a3;
    if (__OFSUB__(result, a3))
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    uint64_t v10 = a4 - a2;
    if (__OFSUB__(a4, a2))
    {
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    uint64_t v11 = -1;
LABEL_8:
    uint64_t v21 = v11;
    if (v9 + 0x4000000000000000 >= 0)
    {
      uint64_t v12 = 2 * v9;
      uint64_t v13 = 2 * v9 - v10;
      if (__OFSUB__(2 * v9, v10))
      {
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      if (a4 < a2)
      {
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
      uint64_t v20 = v10 + 0x4000000000000000;
      uint64_t v14 = 2 * v10;
      uint64_t v15 = *a5;
      while (1)
      {
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        *a5 = v15;
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_22F19B10C(0, *(void *)(v15 + 16) + 1, 1, (char *)v15);
          uint64_t v15 = result;
          *a5 = result;
        }
        unint64_t v17 = *(void *)(v15 + 16);
        unint64_t v16 = *(void *)(v15 + 24);
        if (v17 >= v16 >> 1)
        {
          uint64_t result = (uint64_t)sub_22F19B10C((char *)(v16 > 1), v17 + 1, 1, (char *)v15);
          uint64_t v15 = result;
        }
        *(void *)(v15 + 16) = v17 + 1;
        unint64_t v18 = v15 + 16 * v17;
        *(void *)(v18 + 32) = v8;
        *(void *)(v18 + 40) = v7;
        *a5 = v15;
        if (v13 >= 1)
        {
          BOOL v19 = __OFADD__(v8, v21);
          v8 += v21;
          if (v19) {
            goto LABEL_28;
          }
          if (v20 < 0) {
            goto LABEL_29;
          }
          BOOL v19 = __OFSUB__(v13, v14);
          v13 -= v14;
          if (v19) {
            goto LABEL_30;
          }
        }
        BOOL v19 = __OFADD__(v13, v12);
        v13 += v12;
        if (v19) {
          break;
        }
        if (a4 == v7) {
          return result;
        }
        BOOL v19 = __OFADD__(v7++, 1);
        if (v19) {
          goto LABEL_27;
        }
      }
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
    }
    __break(1u);
    goto LABEL_32;
  }
  if (__OFSUB__(a3, result))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  uint64_t v10 = a4 - a2;
  if (!__OFSUB__(a4, a2))
  {
    uint64_t v11 = 1;
    goto LABEL_8;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for LineUtil()
{
  return self;
}

uint64_t *LocalPlaneDetector.DebuggerClass.unsafeMutableAddressor()
{
  return &static LocalPlaneDetector.DebuggerClass;
}

uint64_t static LocalPlaneDetector.DebuggerClass.getter()
{
  return static LocalPlaneDetector.DebuggerClass;
}

uint64_t static LocalPlaneDetector.DebuggerClass.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_beginAccess();
  static LocalPlaneDetector.DebuggerClass = a1;
  qword_26869BC50 = a2;
  return result;
}

uint64_t (*static LocalPlaneDetector.DebuggerClass.modify())()
{
  return j_j__swift_endAccess;
}

float LocalPlaneDetector.defaultPlaneRadius.getter()
{
  return 0.05;
}

double LocalPlaneDetector.defaultPlaneExtent.getter()
{
  if ((*(unsigned char *)(v0 + 48) & 1) == 0) {
    return *(double *)(v0 + 32);
  }
  *(int64x2_t *)(v0 + 32) = vdupq_n_s64(0x3FB99999A0000000uLL);
  *(unsigned char *)(v0 + 48) = 0;
  return 0.100000001;
}

float sub_22F1AAA20()
{
  if ((*(unsigned char *)(v0 + 64) & 1) == 0) {
    return *(float *)(v0 + 60);
  }
  *(_DWORD *)(v0 + 60) = 1060439283;
  *(unsigned char *)(v0 + 64) = 0;
  return 0.70711;
}

double sub_22F1AAA48()
{
  if ((*(unsigned char *)(v0 + 88) & 1) == 0) {
    return *(double *)(v0 + 72);
  }
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(ObjectType, v1);
  double result = v3 * 0.5;
  *(double *)(v0 + 72) = v3 * 0.5;
  *(double *)(v0 + 80) = v5 * 0.5;
  *(unsigned char *)(v0 + 88) = 0;
  return result;
}

float sub_22F1AAAB8()
{
  if ((*(unsigned char *)(v0 + 176) & 1) == 0) {
    return *(float *)(v0 + 172);
  }
  *(_DWORD *)(v0 + 172) = 1065289374;
  *(unsigned char *)(v0 + 176) = 0;
  return 0.99619;
}

__n128 sub_22F1AAAE0@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 320;
  swift_beginAccess();
  char v5 = *(unsigned char *)(v4 + 112);
  long long v6 = *(_OWORD *)(v3 + 336);
  *(_OWORD *)a2 = *(_OWORD *)(v3 + 320);
  *(_OWORD *)(a2 + 16) = v6;
  long long v7 = *(_OWORD *)(v3 + 368);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v3 + 352);
  *(_OWORD *)(a2 + 48) = v7;
  long long v8 = *(_OWORD *)(v3 + 400);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(v3 + 384);
  *(_OWORD *)(a2 + 80) = v8;
  __n128 result = *(__n128 *)(v3 + 416);
  *(__n128 *)(a2 + 96) = result;
  *(unsigned char *)(a2 + 112) = v5;
  return result;
}

__n128 sub_22F1AAB54(long long *a1, uint64_t *a2)
{
  long long v11 = a1[1];
  long long v12 = *a1;
  long long v9 = a1[3];
  long long v10 = a1[2];
  __n128 v7 = (__n128)a1[5];
  long long v8 = a1[4];
  uint64_t v2 = *((void *)a1 + 12);
  uint64_t v3 = *((void *)a1 + 13);
  char v4 = *((unsigned char *)a1 + 112);
  uint64_t v5 = *a2;
  swift_beginAccess();
  *(_OWORD *)(v5 + 320) = v12;
  *(_OWORD *)(v5 + 336) = v11;
  *(_OWORD *)(v5 + 352) = v10;
  *(_OWORD *)(v5 + 368) = v9;
  __n128 result = v7;
  *(_OWORD *)(v5 + 384) = v8;
  *(__n128 *)(v5 + 400) = v7;
  *(void *)(v5 + 416) = v2;
  *(void *)(v5 + 424) = v3;
  *(unsigned char *)(v5 + 432) = v4;
  return result;
}

__n128 LocalPlaneDetector.localPlane.getter@<Q0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  char v3 = *(unsigned char *)(v1 + 432);
  long long v4 = *(_OWORD *)(v1 + 336);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 320);
  *(_OWORD *)(a1 + 16) = v4;
  long long v5 = *(_OWORD *)(v1 + 368);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 352);
  *(_OWORD *)(a1 + 48) = v5;
  long long v6 = *(_OWORD *)(v1 + 400);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 384);
  *(_OWORD *)(a1 + 80) = v6;
  __n128 result = *(__n128 *)(v1 + 416);
  *(__n128 *)(a1 + 96) = result;
  *(unsigned char *)(a1 + 112) = v3;
  return result;
}

uint64_t LocalPlaneDetector.debugOptions.getter()
{
  if (*(unsigned char *)(v0 + 448) != 1) {
    return *(void *)(v0 + 440);
  }
  if (qword_2686943F0 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = static LocalPlaneDetector.DebugOptions.default;
  *(void *)(v0 + 440) = static LocalPlaneDetector.DebugOptions.default;
  *(unsigned char *)(v0 + 448) = 0;
  return result;
}

uint64_t *LocalPlaneDetector.DebugOptions.default.unsafeMutableAddressor()
{
  if (qword_2686943F0 != -1) {
    swift_once();
  }
  return &static LocalPlaneDetector.DebugOptions.default;
}

uint64_t LocalPlaneDetector.debugOptions.setter(uint64_t result)
{
  *(void *)(v1 + 440) = result;
  *(unsigned char *)(v1 + 448) = 0;
  return result;
}

void *(*LocalPlaneDetector.debugOptions.modify(uint64_t *a1))(void *result)
{
  a1[1] = v1;
  *a1 = LocalPlaneDetector.debugOptions.getter();
  return sub_22F1AADA0;
}

void *sub_22F1AADA0(void *result)
{
  uint64_t v1 = result[1];
  *(void *)(v1 + 440) = *result;
  *(unsigned char *)(v1 + 448) = 0;
  return result;
}

uint64_t LocalPlaneDetector.__allocating_init(sceneView:)(void *a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  LocalPlaneDetector.init(sceneView:)(a1, a2);
  return v4;
}

uint64_t LocalPlaneDetector.init(sceneView:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  *(_DWORD *)(v2 + 24) = 1028443341;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 0;
  *(unsigned char *)(v2 + 48) = 1;
  *(void *)(v2 + 52) = 0x3F490FDB3DB2B8C2;
  *(_DWORD *)(v2 + 60) = 0;
  *(unsigned char *)(v2 + 64) = 1;
  *(void *)(v2 + 72) = 0;
  *(void *)(v2 + 80) = 0;
  *(unsigned char *)(v2 + 88) = 1;
  type metadata accessor for PlaneSolver();
  swift_allocObject();
  uint64_t v6 = sub_22F1D16AC();
  uint64_t v7 = MEMORY[0x263F8EE78];
  *(void *)(v2 + 112) = v6;
  *(void *)(v2 + 120) = v7;
  *(void *)(v2 + 128) = v7;
  *(void *)(v2 + 136) = v7;
  *(_OWORD *)(v2 + 144) = xmmword_22F227BE0;
  *(void *)(v2 + 160) = 0x38D1B7173F000000;
  *(void *)(v2 + 168) = 1035122882;
  *(unsigned char *)(v2 + 176) = 1;
  *(void *)(v2 + 180) = 0x3F7C1C5C3D23D70BLL;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(unsigned char *)(v2 + 224) = 1;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 272) = 0u;
  *(_OWORD *)(v2 + 288) = 0u;
  *(unsigned char *)(v2 + 304) = 1;
  *(_OWORD *)(v2 + 400) = 0u;
  *(_OWORD *)(v2 + 416) = 0u;
  *(_OWORD *)(v2 + 368) = 0u;
  *(_OWORD *)(v2 + 384) = 0u;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_OWORD *)(v2 + 352) = 0u;
  *(_OWORD *)(v2 + 320) = 0u;
  *(_WORD *)(v2 + 432) = 257;
  *(void *)(v2 + 440) = 0;
  *(unsigned char *)(v2 + 448) = 1;
  *(_OWORD *)(v2 + 456) = 0u;
  *(_OWORD *)(v2 + 472) = 0u;
  *(void *)(v2 + 488) = 0;
  *(void *)(v2 + 96) = a1;
  *(void *)(v2 + 104) = a2;
  uint64_t ObjectType = swift_getObjectType();
  long long v9 = *(double (**)(uint64_t, uint64_t))(a2 + 8);
  id v10 = a1;
  v26.origin.double x = v9(ObjectType, a2);
  float v11 = CGRectGetWidth(v26) * 0.25;
  *(float *)(v2 + 16) = v11;
  *(float *)(v2 + 20) = v11 * v11;
  swift_beginAccess();
  uint64_t v12 = static LocalPlaneDetector.DebuggerClass;
  if (static LocalPlaneDetector.DebuggerClass)
  {
    uint64_t v13 = qword_26869BC50;
    uint64_t v14 = *(void (**)(id, uint64_t, uint64_t, uint64_t, uint64_t))(qword_26869BC50 + 8);
    v22[0] = sub_22F2241F8();
    v22[1] = v22;
    uint64_t v15 = *(void *)(v22[0] - 8);
    MEMORY[0x270FA5388](v22[0]);
    unint64_t v17 = (char *)v22 - v16;
    id v18 = v10;
    swift_retain();
    v14(v18, a2, v3, v12, v13);
    uint64_t v19 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v12) != 1)
    {
      *((void *)&v24 + 1) = v12;
      uint64_t v25 = v13;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v23);
      (*(void (**)(uint64_t *, char *, uint64_t))(v19 + 32))(boxed_opaque_existential_1, v17, v12);

      goto LABEL_7;
    }

    (*(void (**)(char *, void))(v15 + 8))(v17, v22[0]);
  }
  else
  {
  }
  uint64_t v25 = 0;
  long long v23 = 0u;
  long long v24 = 0u;
LABEL_7:
  swift_beginAccess();
  sub_22F1ACD00((uint64_t)&v23, v3 + 456);
  swift_endAccess();
  return v3;
}

void LocalPlaneDetector.detectPlane(with:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  id v6 = objc_msgSend(a1, sel_camera);
  objc_msgSend(v6, sel_transform);
  float32x4_t v126 = v8;
  long long v127 = v7;
  float32x4_t v128 = v9;
  __n128 v125 = v10;
  float v11 = (char **)(v2 + 120);
  swift_beginAccess();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *(void *)(v2 + 120);
  if (isUniquelyReferenced_nonNull_native)
  {
    sub_22F1840E0(0, *(void *)(v13 + 16));
  }
  else
  {
    *float v11 = (char *)sub_22F1ACDEC(0, *(void *)(v13 + 24) >> 1, &qword_268694C60);
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  uint64_t v14 = (void *)(v2 + 136);
  swift_beginAccess();
  int v15 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v16 = *(void *)(v3 + 136);
  uint64_t v129 = (char **)(v3 + 136);
  if (v15)
  {
    sub_22F1841E8(0, *(void *)(v16 + 16));
  }
  else
  {
    *uint64_t v14 = sub_22F1ACEE4(0, *(void *)(v16 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  double v17 = sub_22F1AAA48();
  double v19 = v18;
  float v20 = *(float *)(v3 + 16);
  if (objc_msgSend(self, sel_jasperAvailable))
  {
    if (qword_2686944A0 != -1) {
      swift_once();
    }
    uint64_t v21 = static MeasureCore.shared;
    swift_beginAccess();
    if (*(void *)(v21 + 112))
    {
      CGFloat v22 = v20;
      swift_retain();
      v154.origin.double x = v17 - v22 * 0.5;
      v154.origin.double y = v19 - v22 * 0.5;
      v154.size.Swift::Int width = v22;
      v154.size.Swift::Int height = v22;
      unint64_t v23 = (unint64_t)DepthProcessor.getJasperPointsInQuad(searchArea:requestedMinConfidence:in:)(v154, 0.7, (ARFrame)a1);
      swift_release();
      if (v23)
      {
        id v122 = v6;
        uint64_t v24 = *(void *)(v23 + 16);
        if (v24)
        {
          float v25 = *(float *)(v3 + 20);
          uint64_t v26 = v24 - 1;
          for (uint64_t i = (float *)(v23 + 64); ; i += 12)
          {
            float64x2_t v28 = vsubq_f64(*(float64x2_t *)(i - 4), *(float64x2_t *)(v3 + 72));
            if (vaddv_f32(vcvt_f32_f64(vmulq_f64(v28, v28))) > v25)
            {
              if (!v26) {
                break;
              }
            }
            else
            {
              int32x4_t v137 = *(int32x4_t *)(i - 8);
              float v29 = *i;
              double v30 = *v11;
              char v31 = swift_isUniquelyReferenced_nonNull_native();
              *float v11 = v30;
              if ((v31 & 1) == 0)
              {
                double v30 = sub_22F19B630(0, *((void *)v30 + 2) + 1, 1, v30);
                *float v11 = v30;
              }
              unint64_t v33 = *((void *)v30 + 2);
              unint64_t v32 = *((void *)v30 + 3);
              if (v33 >= v32 >> 1)
              {
                double v30 = sub_22F19B630((char *)(v32 > 1), v33 + 1, 1, v30);
                *float v11 = v30;
              }
              *((void *)v30 + 2) = v33 + 1;
              *(int32x4_t *)&v30[16 * v33 + 32] = v137;
              double v34 = *v129;
              char v35 = swift_isUniquelyReferenced_nonNull_native();
              *uint64_t v129 = v34;
              if ((v35 & 1) == 0)
              {
                double v34 = sub_22F19B63C(0, *((void *)v34 + 2) + 1, 1, v34);
                *uint64_t v129 = v34;
              }
              unint64_t v37 = *((void *)v34 + 2);
              unint64_t v36 = *((void *)v34 + 3);
              if (v37 >= v36 >> 1)
              {
                double v34 = sub_22F19B63C((char *)(v36 > 1), v37 + 1, 1, v34);
                *uint64_t v129 = v34;
              }
              *((void *)v34 + 2) = v37 + 1;
              *(float *)&v34[4 * v37 + 32] = 1.0 - v29;
              if (*((void *)*v11 + 2) == 50 || v26 == 0) {
                break;
              }
            }
            --v26;
          }
        }
        swift_bridgeObjectRelease();
        id v6 = v122;
      }
    }
  }
  id v39 = objc_msgSend(a1, sel_rawFeaturePoints);
  if (v39)
  {
    double v40 = v39;
    uint64_t v41 = sub_22F224088();

    id v42 = objc_msgSend(a1, sel_rawFeaturePoints);
    if (v42
      && (double v43 = v42, v44 = objc_msgSend(v42, sel_vergenceAngleCosines), v43, (v124 = v44) != 0)
      && (uint64_t v45 = *(void *)(v41 + 16)) != 0)
    {
      uint64_t v121 = a2;
      uint64_t v46 = 0;
      uint64_t v130 = v45 - 1;
      unint64_t v47 = (SEL *)&unk_2649FF000;
      uint64_t v123 = v41;
      while (1)
      {
        float32x4_t v138 = *(float32x4_t *)(v41 + 16 * v46 + 32);
        swift_beginAccess();
        os_unfair_lock_lock((os_unfair_lock_t)&unk_268695898);
        swift_endAccess();
        if (qword_2686944D0 != -1) {
          swift_once();
        }
        objc_msgSend(a1, v47[408], v121);
        double v49 = v48;
        swift_beginAccess();
        uint64_t v50 = off_2686958A0;
        if (*((void *)off_2686958A0 + 2) && (unint64_t v51 = sub_22F18DF54(v49), (v52 & 1) != 0))
        {
          BOOL v53 = (const void *)(v50[7] + 496 * v51);
          memcpy(__dst, v53, sizeof(__dst));
          CGRect v54 = v53;
          unint64_t v47 = (SEL *)&unk_2649FF000;
          memmove(&v145, v54, 0x1F0uLL);
          nullsub_1(&v145);
          sub_22F1962CC((uint64_t)__dst);
        }
        else
        {
          sub_22F1AD27C(&v145);
        }
        sub_22F1899D0((uint64_t)&v145, (uint64_t)v152, &qword_2686951E0);
        swift_endAccess();
        swift_beginAccess();
        os_unfair_lock_unlock((os_unfair_lock_t)&unk_268695898);
        swift_endAccess();
        sub_22F1899D0((uint64_t)v152, (uint64_t)&v145, &qword_2686951E0);
        if (sub_22F1AD2C4((uint64_t *)&v145) == 1)
        {
          long long v55 = (float32x4_t *)MEMORY[0x263EF89A8];
          CGPoint v56 = (float32x4_t *)(MEMORY[0x263EF89A8] + 48);
          CGPoint v57 = (float32x4_t *)(MEMORY[0x263EF89A8] + 32);
          CGRect v58 = (float32x4_t *)(MEMORY[0x263EF89A8] + 16);
        }
        else
        {
          sub_22F1AD2DC((uint64_t)v152);
          CGRect v58 = (float32x4_t *)&v149;
          long long v55 = (float32x4_t *)&v148;
          CGPoint v56 = (float32x4_t *)&v151;
          CGPoint v57 = (float32x4_t *)&v150;
        }
        float32x4_t v133 = *v57;
        float32x4_t v134 = *v56;
        float32x4_t v131 = *v55;
        float32x4_t v132 = *v58;
        swift_beginAccess();
        os_unfair_lock_lock((os_unfair_lock_t)&unk_268695898);
        swift_endAccess();
        [a1 v47[408]];
        double v60 = v59;
        swift_beginAccess();
        CGRect v61 = off_2686958A0;
        if (*((void *)off_2686958A0 + 2) && (unint64_t v62 = sub_22F18DF54(v60), (v63 & 1) != 0))
        {
          float32x4_t v64 = (const void *)(v61[7] + 496 * v62);
          memcpy(v141, v64, sizeof(v141));
          id v65 = v64;
          unint64_t v47 = (SEL *)&unk_2649FF000;
          memmove(&v142, v65, 0x1F0uLL);
          nullsub_1(&v142);
          sub_22F1962CC((uint64_t)v141);
        }
        else
        {
          sub_22F1AD27C(&v142);
        }
        sub_22F1899D0((uint64_t)&v142, (uint64_t)__dst, &qword_2686951E0);
        swift_endAccess();
        swift_beginAccess();
        os_unfair_lock_unlock((os_unfair_lock_t)&unk_268695898);
        swift_endAccess();
        sub_22F1899D0((uint64_t)__dst, (uint64_t)&v142, &qword_2686951E0);
        int v66 = sub_22F1AD2C4((uint64_t *)&v142);
        float32x2_t v67 = 0;
        if (v66 != 1)
        {
          sub_22F1AD2DC((uint64_t)__dst);
          float32x2_t v67 = v143;
        }
        float32x2_t v68 = _s17MeasureFoundation0A6CameraC12projectPoint_14viewProjection12viewportSizes5SIMD3VySfGAI_So13simd_float4x4as5SIMD2VySfGtFZ_0(v138, v131, v132, v133, v134, v67);
        BOOL v70 = (LODWORD(v69) & 0x7FFFFF) != 0 && (~LODWORD(v69) & 0x7F800000) == 0;
        if (v69 >= 0.0 && v69 <= 1.0 && !v70)
        {
          float64x2_t v71 = vsubq_f64(vcvtq_f64_f32(v68), *(float64x2_t *)(v3 + 72));
          if (vaddv_f32(vcvt_f32_f64(vmulq_f64(v71, v71))) <= *(float *)(v3 + 20))
          {
            float32x4_t v72 = *v11;
            char v73 = swift_isUniquelyReferenced_nonNull_native();
            *float v11 = v72;
            if ((v73 & 1) == 0)
            {
              float32x4_t v72 = sub_22F19B630(0, *((void *)v72 + 2) + 1, 1, v72);
              *float v11 = v72;
            }
            unint64_t v75 = *((void *)v72 + 2);
            unint64_t v74 = *((void *)v72 + 3);
            if (v75 >= v74 >> 1)
            {
              float32x4_t v72 = sub_22F19B630((char *)(v74 > 1), v75 + 1, 1, v72);
              *float v11 = v72;
            }
            *((void *)v72 + 2) = v75 + 1;
            *(float32x4_t *)&v72[16 * v75 + 32] = v138;
            int v76 = v124[v46];
            uint64_t v77 = *v129;
            char v78 = swift_isUniquelyReferenced_nonNull_native();
            *uint64_t v129 = v77;
            if ((v78 & 1) == 0)
            {
              uint64_t v77 = sub_22F19B63C(0, *((void *)v77 + 2) + 1, 1, v77);
              *uint64_t v129 = v77;
            }
            unint64_t v80 = *((void *)v77 + 2);
            unint64_t v79 = *((void *)v77 + 3);
            if (v80 >= v79 >> 1)
            {
              uint64_t v77 = sub_22F19B63C((char *)(v79 > 1), v80 + 1, 1, v77);
              *uint64_t v129 = v77;
            }
            *((void *)v77 + 2) = v80 + 1;
            *(_DWORD *)&v77[4 * v80 + 32] = v76;
            uint64_t v41 = v123;
            unint64_t v47 = (SEL *)&unk_2649FF000;
            if (*((void *)*v11 + 2) == 50) {
              break;
            }
          }
        }
        if (v130 == v46) {
          break;
        }
        ++v46;
      }
      swift_bridgeObjectRelease();
      a2 = v121;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v81 = (uint64_t)*v11;
  if (*((void *)*v11 + 2) < 4uLL) {
    goto LABEL_75;
  }
  uint64_t v82 = *(void *)(v3 + 136);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PlaneSolver.detectPlane(data:vergenceAngleCosines:pointOfView:camera:bestData:)(v81, v82, v6, (uint64_t *)(v3 + 128), &v142, v126, v128, v125);
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_22F1899D0((uint64_t)&v142, (uint64_t)__dst, &qword_2686951D8);
  if (BYTE4(__dst[2]))
  {
LABEL_75:
    if ((*(unsigned char *)(v3 + 433) & 1) != 0
      || (BOOL v83 = sub_22F1ABE74(a1), (*(unsigned char *)(v3 + 433) = v83) == 0)
      || (LocalPlaneDetector.debugOptions.getter() & 2) == 0)
    {

LABEL_91:
      swift_beginAccess();
      char v117 = *(unsigned char *)(v3 + 432);
      long long v118 = *(_OWORD *)(v3 + 336);
      *(_OWORD *)a2 = *(_OWORD *)(v3 + 320);
      *(_OWORD *)(a2 + 16) = v118;
      long long v119 = *(_OWORD *)(v3 + 368);
      *(_OWORD *)(a2 + 32) = *(_OWORD *)(v3 + 352);
      *(_OWORD *)(a2 + 48) = v119;
      long long v120 = *(_OWORD *)(v3 + 400);
      *(_OWORD *)(a2 + 64) = *(_OWORD *)(v3 + 384);
      *(_OWORD *)(a2 + 80) = v120;
      *(_OWORD *)(a2 + 96) = *(_OWORD *)(v3 + 416);
      *(unsigned char *)(a2 + 112) = v117;
      return;
    }
    swift_beginAccess();
    sub_22F1ACF5C(v3 + 456, (uint64_t)v152);
    if (v153)
    {
      sub_22F1AD024((uint64_t)v152, (uint64_t)&v145);
      sub_22F1ACFC4((uint64_t)v152);
      uint64_t v115 = v146;
      uint64_t v116 = v147;
      __swift_project_boxed_opaque_existential_0(&v145, v146);
      (*(void (**)(void, uint64_t, uint64_t))(v116 + 24))(0, v115, v116);
      goto LABEL_89;
    }
LABEL_90:

    sub_22F1ACFC4((uint64_t)v152);
    goto LABEL_91;
  }
  float32x4_t v135 = (float32x4_t)__dst[1];
  float32x4_t v139 = (float32x4_t)__dst[0];
  float v84 = *(float *)&__dst[2];
  uint64_t v85 = swift_bridgeObjectRetain();
  float v86 = sub_22F1AD104(v85, (int32x4_t)v139);
  swift_bridgeObjectRelease();
  if (v86 <= 0.05) {
    float v86 = 0.05;
  }
  sub_22F1AC06C(v139, v135, v84, v87, v88, v128);
  float32x4_t v136 = v90;
  float32x4_t v140 = v89;
  *(float32x4_t *)(v3 + 192) = v89;
  *(float32x4_t *)(v3 + 208) = v90;
  *(unsigned char *)(v3 + 224) = 0;
  *(_OWORD *)(v3 + 240) = v127;
  *(float32x4_t *)(v3 + 256) = v126;
  *(float32x4_t *)(v3 + 272) = v128;
  *(__n128 *)(v3 + 288) = v125;
  *(unsigned char *)(v3 + 304) = 0;
  *(unsigned char *)(v3 + 433) = 0;
  swift_beginAccess();
  if ((*(unsigned char *)(v3 + 432) & 1) != 0
    || (uint64_t v91 = *(void *)(v3 + 352),
        float32x4_t v92 = *(float32x4_t *)(v3 + 320),
        v93.i32[1] = v92.i32[1],
        float32x4_t v94 = vsubq_f32(v140, v92),
        v93.i32[0] = *(void *)(v3 + 320),
        float32x2_t v95 = vsub_f32(*(float32x2_t *)v140.f32, v93),
        (float)(COERCE_FLOAT(vmulq_f32(v94, v94).i32[2]) + vaddv_f32(vmul_f32(v95, v95))) >= (float)((float)(v86 + *(float *)&v91) * (float)(v86 + *(float *)&v91))))
  {
    *(double *)&long long v109 = _sSo13simd_float4x4a17MeasureFoundationE4make8position17normalizedForwardABs5SIMD3VySfG_AItFZ_0(*(double *)v140.i64, v136);
    *(float32x4_t *)(v3 + 320) = v140;
    *(float32x4_t *)(v3 + 336) = v136;
    *(void *)(v3 + 352) = LODWORD(v86) | ((unint64_t)LODWORD(v84) << 32);
    *(void *)(v3 + 360) = 0;
    *(_OWORD *)(v3 + 368) = v109;
    *(_OWORD *)(v3 + 384) = v110;
    *(_OWORD *)(v3 + 400) = v111;
    *(_OWORD *)(v3 + 416) = v112;
    *(unsigned char *)(v3 + 432) = 0;
  }
  else
  {
    int8x16_t v96 = *(int8x16_t *)(v3 + 320);
    float32x4_t v97 = *(float32x4_t *)(v3 + 336);
    float v98 = *(float *)(v3 + 148);
    float v99 = *(float *)(v3 + 152);
    *(float32x2_t *)&long long v100 = vadd_f32(*(float32x2_t *)v96.i8, vmul_n_f32(vsub_f32(*(float32x2_t *)v140.f32, *(float32x2_t *)v96.i8), v98));
    HIDWORD(v100) = vextq_s8(v96, v96, 8uLL).i32[1];
    *((float *)&v100 + 2) = COERCE_FLOAT(*(void *)(v3 + 328))
                          + (float)(v98 * (float)(v140.f32[2] - COERCE_FLOAT(*(void *)(v3 + 328))));
    float32x4_t v101 = vsubq_f32(v136, v97);
    *(float32x2_t *)v102.f32 = vadd_f32(*(float32x2_t *)v97.f32, vmul_n_f32(*(float32x2_t *)v101.f32, v99));
    *(void *)&long long v103 = v102.i64[0];
    HIDWORD(v103) = vextq_s8(*(int8x16_t *)&v97, *(int8x16_t *)&v97, 8uLL).i32[1];
    *((float *)&v103 + 2) = COERCE_FLOAT(*(void *)(v3 + 344)) + vmuls_lane_f32(v99, v101, 2);
    *(_OWORD *)(v3 + 320) = v100;
    *(_OWORD *)(v3 + 336) = v103;
    float v104 = *(float *)(v3 + 160);
    *(float *)(v3 + 352) = (float)(*(float *)(v3 + 156) * (float)(v86 - *(float *)&v91)) + *(float *)&v91;
    *(float *)(v3 + 356) = (float)(v104 * (float)(v84 - *((float *)&v91 + 1))) + *((float *)&v91 + 1);
    v102.i64[1] = *((void *)&v103 + 1);
    *(double *)&long long v105 = _sSo13simd_float4x4a17MeasureFoundationE4make8position17normalizedForwardABs5SIMD3VySfG_AItFZ_0(*(double *)&v100, v102);
    if (*(unsigned char *)(v3 + 432)) {
      goto LABEL_93;
    }
    *(_OWORD *)(v3 + 368) = v105;
    *(_OWORD *)(v3 + 384) = v106;
    *(_OWORD *)(v3 + 400) = v107;
    *(_OWORD *)(v3 + 416) = v108;
  }
  swift_beginAccess();
  sub_22F1ACF5C(v3 + 456, (uint64_t)v152);
  if (!v153) {
    goto LABEL_90;
  }
  sub_22F1AD024((uint64_t)v152, (uint64_t)&v145);
  sub_22F1ACFC4((uint64_t)v152);
  uint64_t v113 = v146;
  uint64_t v114 = v147;
  __swift_project_boxed_opaque_existential_0(&v145, v146);
  if ((*(unsigned char *)(v3 + 432) & 1) == 0)
  {
    (*(void (**)(uint64_t, uint64_t, __n128, __n128, float, float, __n128, __n128, __n128, __n128))(v114 + 16))(v113, v114, *(__n128 *)(v3 + 320), *(__n128 *)(v3 + 336), *(float *)(v3 + 352), *(float *)(v3 + 356), *(__n128 *)(v3 + 368), *(__n128 *)(v3 + 384), *(__n128 *)(v3 + 400), *(__n128 *)(v3 + 416));
LABEL_89:

    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v145);
    goto LABEL_91;
  }
  __break(1u);
LABEL_93:
  __break(1u);
}

void *LocalPlaneDetector.DebugOptions.showPlane.unsafeMutableAddressor()
{
  return &static LocalPlaneDetector.DebugOptions.showPlane;
}

BOOL sub_22F1ABE74(void *a1)
{
  swift_beginAccess();
  if (v1[27].i8[0]) {
    return 1;
  }
  uint64_t v3 = 1;
  if ((v1[19].i8[0] & 1) == 0)
  {
    uint64_t v5 = v1[17].i64[1];
    uint64_t v4 = v1[18].i64[0];
    uint64_t v6 = v1[17].i64[0];
    float32x4_t v29 = v1[21];
    float32x4_t v27 = v1[20];
    float v7 = v1[22].f32[0];
    v8.i64[0] = v4;
    v8.i64[1] = v1[18].i64[1];
    float32x4_t v23 = v8;
    id v9 = objc_msgSend(a1, sel_camera);
    memset(v33, 0, 64);
    v33[64] = 1;
    __n128 v10 = _sSo7ARFrameC17MeasureFoundationE9getHitRay11cameraPoint0G00G18CorrectedTransforms5SIMD3VySfG6origin_AJ9directionts5SIMD2VySfG_So8ARCameraCSo13simd_float4x4aSgtFZ_0(v9, (uint64_t)v33);
    float32x4_t v24 = v11;
    float32x4_t v25 = (float32x4_t)v10;

    sub_22F1AC564((uint64_t)v31, v27, v29, v7, v25, v24);
    sub_22F1899D0((uint64_t)v31, (uint64_t)v32, &qword_268695210);
    if (v32[68] == 1)
    {
      v12.i64[0] = v6;
      v12.i64[1] = v5;
      float32x4_t v30 = v12;
      id v13 = objc_msgSend(a1, sel_camera);
      objc_msgSend(v13, sel_transform);
      float32x4_t v26 = v15;
      float32x4_t v28 = v14;

      float32x4_t v16 = vmulq_f32(v28, v30);
      if ((float)(v16.f32[2] + (float)((float)(*(float *)&v6 * v28.f32[0]) + v16.f32[1])) >= v1[11].f32[2])
      {
        float32x4_t v17 = vsubq_f32(v26, v23);
        v18.i32[0] = vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u32[0];
        v18.i32[1] = v26.i32[0];
        v19.i32[0] = vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL).u32[0];
        v19.i32[1] = v4;
        float32x2_t v20 = vsub_f32(v18, v19);
        float32x2_t v21 = vmul_f32(v20, v20);
        return (float)(v21.f32[0] + (float)(v21.f32[1] + COERCE_FLOAT(vmulq_f32(v17, v17).i32[1]))) > 0.04;
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void sub_22F1AC06C(float32x4_t a1, float32x4_t a2, float a3, double a4, double a5, float32x4_t a6)
{
  float32x4_t v8 = vmulq_f32(a2, a6);
  if ((float)(v8.f32[2] + vaddv_f32(*(float32x2_t *)v8.f32)) < 0.0)
  {
    *(float32x2_t *)a2.f32 = vsub_f32(0, *(float32x2_t *)a2.f32);
    a2.f32[2] = 0.0 - a2.f32[2];
    a2.i32[3] = 0;
  }
  float32x4_t v33 = a2;
  swift_beginAccess();
  *(float32x2_t *)v12.f32 = _ss5SIMD3V17MeasureFoundationSfRszrlE7averageyABySfGSayAEGFZ_0(v6[7].i64[1], v9, v10, v11);
  float32x4_t v13 = v12;
  int8x16_t v29 = (int8x16_t)v12;
  float32x4_t v14 = vsubq_f32(a1, v12);
  float32x4_t v15 = vmulq_f32(v14, v14);
  v15.f32[0] = v15.f32[2] + vaddv_f32(*(float32x2_t *)v15.f32);
  v13.i32[0] = 953267991;
  int32x2_t v16 = (int32x2_t)vcgeq_f32(v13, v15).u64[0];
  if (qword_2686943D0 != -1)
  {
    int32x2_t v31 = v16;
    swift_once();
    int32x2_t v16 = v31;
  }
  int8x16_t v28 = (int8x16_t)vdupq_lane_s32(v16, 0);
  int8x16_t v27 = (int8x16_t)static SIMD3<>.up;
  float32x4_t v17 = vmulq_f32(v33, (float32x4_t)static SIMD3<>.up);
  v17.f32[0] = fabsf(v17.f32[2] + vaddv_f32(*(float32x2_t *)v17.f32));
  float32x4_t v30 = v17;
  float v18 = sub_22F1AAA20();
  float v19 = (float)((float)((float)((float)(1.0 - a3) + (float)(1.0 - a3)) - (float)((float)(1.0 - a3) * (float)(1.0 - a3)))
              * 0.69813)
      + 0.087266;
  if (v18 >= v30.f32[0])
  {
    float v22 = cosf(1.5708 - v19);
    float32x4_t v21 = v33;
    if (v30.f32[0] < v22)
    {
      v21.i32[1] = 0;
      int32x4_t v23 = (int32x4_t)vmulq_f32(v21, v21);
      v23.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v23, 2), vadd_f32(*(float32x2_t *)v23.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v23.i8, 1))).u32[0];
      float32x2_t v24 = vrsqrte_f32((float32x2_t)v23.u32[0]);
      float32x2_t v25 = vmul_f32(v24, vrsqrts_f32((float32x2_t)v23.u32[0], vmul_f32(v24, v24)));
      float32x4_t v21 = vmulq_n_f32(v21, vmul_f32(v25, vrsqrts_f32((float32x2_t)v23.u32[0], vmul_f32(v25, v25))).f32[0]);
    }
  }
  else
  {
    v20.f32[0] = cosf(v19);
    float32x4_t v21 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v30, v20), 0), v27, (int8x16_t)v33);
  }
  float32x4_t v26 = (float32x4_t)vbslq_s8(v28, v29, (int8x16_t)a1);
  if ((v6[14].i8[0] & 1) == 0) {
    sub_22F1AC2C0(v26, v21, v6[12], v6[13]);
  }
}

BOOL sub_22F1AC2C0(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4)
{
  float32x4_t v4 = vsubq_f32(a1, a3);
  float32x4_t v5 = vmulq_f32(v4, v4);
  if ((float)(v5.f32[2] + vaddv_f32(*(float32x2_t *)v5.f32)) > 0.0001) {
    return 1;
  }
  float32x4_t v7 = vmulq_f32(a2, a4);
  return fabsf(v7.f32[2] + vaddv_f32(*(float32x2_t *)v7.f32)) < sub_22F1AAAB8();
}

void __swiftcall LocalPlaneDetector.hitTest(screenPoint:for:)(Swift::tuple_transform_simd_float4x4_distanceFromCenter_Float_optional *__return_ptr retstr, CGPoint screenPoint, ARFrame a3)
{
  double y = screenPoint.y;
  double x = screenPoint.x;
  swift_beginAccess();
  simd_float4 v8 = 0uLL;
  if (v3[27].i8[0] & 1) != 0 || (v3[27].i8[1])
  {
    Swift::Float v9 = 0.0;
    Swift::Bool v10 = 1;
    simd_float4 v11 = 0uLL;
    simd_float4 v12 = 0uLL;
    simd_float4 v13 = 0uLL;
  }
  else
  {
    float32x4_t v16 = v3[20];
    float32x4_t v15 = v3[21];
    float v14 = v3[22].f32[0];
    sub_22F1EE604(a3.super.isa, (uint64_t)v21);
    simd_float4x4 v30 = __invert_f4(v22);
    float32x4_t v19 = (float32x4_t)v30.columns[1];
    float32x4_t v20 = (float32x4_t)v30.columns[0];
    float32x4_t v17 = (float32x4_t)v30.columns[3];
    float32x4_t v18 = (float32x4_t)v30.columns[2];
    sub_22F1EE604(a3.super.isa, (uint64_t)v23);
    sub_22F1B3440(v24, x, y, v20, v19, v18, v17, v23[0]);
    sub_22F1899D0((uint64_t)v24, (uint64_t)v28, &qword_2686951E8);
    if (v29)
    {
      Swift::Float v9 = 0.0;
      Swift::Bool v10 = 1;
      simd_float4 v11 = 0uLL;
      simd_float4 v12 = 0uLL;
      simd_float4 v13 = 0uLL;
      simd_float4 v8 = 0uLL;
    }
    else
    {
      sub_22F1AC564((uint64_t)v25, v16, v15, v14, v28[0], v28[1]);
      simd_float4 v8 = v25[0];
      simd_float4 v11 = v25[1];
      simd_float4 v12 = v25[2];
      simd_float4 v13 = v25[3];
      Swift::Float v9 = v26;
      Swift::Bool v10 = v27;
    }
  }
  retstr->value.transform.columns[0] = v8;
  retstr->value.transform.columns[1] = v11;
  retstr->value.transform.columns[2] = v12;
  retstr->value.transform.columns[3] = v13;
  retstr->value.distanceFromCenter = v9;
  retstr->is_nil = v10;
}

void LocalPlaneDetector.hitTest(maxDistanceFromCenter:withRay:)(uint64_t a1@<X8>, float a2@<S0>, float32x4_t a3@<Q1>, float32x4_t a4@<Q2>)
{
  swift_beginAccess();
  if (v4[27].i8[0])
  {
    int v7 = 0;
    long long v8 = 0uLL;
    char v9 = 1;
    long long v10 = 0uLL;
    long long v11 = 0uLL;
    long long v12 = 0uLL;
  }
  else
  {
    sub_22F1AC564((uint64_t)v15, v4[20], v4[21], a2, a3, a4);
    long long v8 = v15[0];
    long long v10 = v15[1];
    long long v11 = v15[2];
    long long v12 = v15[3];
    int v7 = v16;
    char v9 = v17;
  }
  *(_OWORD *)a1 = v8;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = v11;
  *(_OWORD *)(a1 + 48) = v12;
  *(_DWORD *)(a1 + 64) = v7;
  *(unsigned char *)(a1 + 68) = v9;
}

void sub_22F1AC564(uint64_t a1@<X8>, float32x4_t a2@<Q0>, float32x4_t a3@<Q1>, float a4@<S2>, float32x4_t a5@<Q3>, float32x4_t a6@<Q4>)
{
  char v9 = LocalPlaneDetector.debugOptions.getter();
  float32x4_t v10 = a3;
  if (v9)
  {
    swift_beginAccess();
    sub_22F1ACF5C(v6 + 456, (uint64_t)&v44);
    if (*((void *)&v45 + 1))
    {
      sub_22F1AD024((uint64_t)&v44, (uint64_t)v41);
      sub_22F1ACFC4((uint64_t)&v44);
      uint64_t v11 = v42;
      uint64_t v12 = v43;
      __swift_project_boxed_opaque_existential_0(v41, v42);
      memset(v49, 0, sizeof(v49));
      char v50 = 1;
      (*(void (**)(void, _OWORD *, uint64_t, uint64_t))(v12 + 32))(0, v49, v11, v12);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v41);
    }
    else
    {
      sub_22F1ACFC4((uint64_t)&v44);
    }
    float32x4_t v10 = a3;
  }
  sub_22F1D2EA0(a5, a6, a2, v10);
  long long v15 = 0uLL;
  if (v16) {
    goto LABEL_8;
  }
  *(double *)v17.i64 = v13;
  v17.i64[1] = v14;
  float32x4_t v18 = vsubq_f32(a2, v17);
  v19.i32[0] = vextq_s8((int8x16_t)a2, (int8x16_t)a2, 8uLL).u32[0];
  v19.i32[1] = a2.i32[0];
  float32x2_t v20 = vsub_f32(v19, (float32x2_t)__PAIR64__(LODWORD(v13), v14));
  float32x2_t v21 = vmul_f32(v20, v20);
  float v22 = sqrtf(v21.f32[0] + (float)(v21.f32[1] + COERCE_FLOAT(vmulq_f32(v18, v18).i32[1])));
  if (v22 > a4)
  {
LABEL_8:
    char v23 = 1;
    float v22 = 0.0;
    long long v24 = 0uLL;
    long long v25 = 0uLL;
    long long v26 = 0uLL;
  }
  else
  {
    *(double *)&long long v27 = _sSo13simd_float4x4a17MeasureFoundationE4make8position17normalizedForwardABs5SIMD3VySfG_AItFZ_0(v13, a3);
    long long v15 = v27;
    if (*(unsigned char *)(v6 + 440))
    {
      long long v31 = v26;
      long long v33 = v25;
      long long v35 = v24;
      long long v37 = v27;
      swift_beginAccess();
      sub_22F1ACF5C(v6 + 456, (uint64_t)v41);
      if (v42)
      {
        sub_22F1AD024((uint64_t)v41, (uint64_t)v38);
        sub_22F1ACFC4((uint64_t)v41);
        uint64_t v28 = v39;
        uint64_t v29 = v40;
        __swift_project_boxed_opaque_existential_0(v38, v39);
        long long v44 = v37;
        long long v45 = v35;
        long long v46 = v33;
        long long v47 = v31;
        char v48 = 0;
        (*(void (**)(uint64_t, long long *, uint64_t, uint64_t))(v29 + 32))(1, &v44, v28, v29);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v38);
        long long v26 = v31;
        long long v25 = v33;
        long long v24 = v35;
        long long v15 = v37;
      }
      else
      {
        sub_22F1ACFC4((uint64_t)v41);
        long long v24 = v35;
        long long v15 = v37;
        long long v26 = v31;
        long long v25 = v33;
      }
    }
    char v23 = 0;
  }
  *(_OWORD *)a1 = v15;
  *(_OWORD *)(a1 + 16) = v24;
  *(_OWORD *)(a1 + 32) = v25;
  *(_OWORD *)(a1 + 48) = v26;
  *(float *)(a1 + 64) = v22;
  *(unsigned char *)(a1 + 68) = v23;
}

void *LocalPlaneDetector.DebugOptions.showPoints.unsafeMutableAddressor()
{
  return &static LocalPlaneDetector.DebugOptions.showPoints;
}

uint64_t LocalPlaneDetector.deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_22F1ACFC4(v0 + 456);
  return v0;
}

uint64_t LocalPlaneDetector.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_22F1ACFC4(v0 + 456);
  return swift_deallocClassInstance();
}

uint64_t static LocalPlaneDetector.DebugOptions.showPoints.getter()
{
  return 1;
}

uint64_t static LocalPlaneDetector.DebugOptions.showPlane.getter()
{
  return 2;
}

unint64_t sub_22F1AC890()
{
  unint64_t result = sub_22F185C80((uint64_t)&unk_26E291870);
  static LocalPlaneDetector.DebugOptions.keyForFeature = result;
  return result;
}

uint64_t *LocalPlaneDetector.DebugOptions.keyForFeature.unsafeMutableAddressor()
{
  if (qword_2686943E0 != -1) {
    swift_once();
  }
  return &static LocalPlaneDetector.DebugOptions.keyForFeature;
}

uint64_t static LocalPlaneDetector.DebugOptions.keyForFeature.getter()
{
  return sub_22F188A6C(&qword_2686943E0);
}

uint64_t sub_22F1AC928()
{
  if (qword_2686943E0 != -1) {
    swift_once();
  }
  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = sub_22F1E6DB8(v0);
  uint64_t result = swift_bridgeObjectRelease();
  static LocalPlaneDetector.DebugOptions.keys = v1;
  return result;
}

uint64_t *LocalPlaneDetector.DebugOptions.keys.unsafeMutableAddressor()
{
  if (qword_2686943E8 != -1) {
    swift_once();
  }
  return &static LocalPlaneDetector.DebugOptions.keys;
}

uint64_t static LocalPlaneDetector.DebugOptions.keys.getter()
{
  return sub_22F188A6C(&qword_2686943E8);
}

uint64_t sub_22F1ACA0C()
{
  if (qword_2686943E0 != -1) {
    swift_once();
  }
  uint64_t result = sub_22F1E2D28(static LocalPlaneDetector.DebugOptions.keyForFeature);
  static LocalPlaneDetector.DebugOptions.default = result;
  return result;
}

uint64_t static LocalPlaneDetector.DebugOptions.default.getter()
{
  if (qword_2686943F0 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return static LocalPlaneDetector.DebugOptions.default;
}

uint64_t static LocalPlaneDetector.DebugOptions.default.setter(uint64_t a1)
{
  if (qword_2686943F0 != -1) {
    swift_once();
  }
  uint64_t result = swift_beginAccess();
  static LocalPlaneDetector.DebugOptions.default = a1;
  return result;
}

uint64_t (*static LocalPlaneDetector.DebugOptions.default.modify())()
{
  if (qword_2686943F0 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_22F1ACBD8()
{
  return sub_22F224818();
}

uint64_t sub_22F1ACC20()
{
  return sub_22F2247F8();
}

uint64_t sub_22F1ACC4C()
{
  return sub_22F224818();
}

Swift::tuple_actualPoints_OpaquePointer_bestPoints_OpaquePointer __swiftcall LocalPlaneDetector.getPointsForDebug()()
{
  uint64_t v1 = *(void *)(v0 + 112);
  swift_beginAccess();
  uint64_t v2 = *(void **)(v1 + 200);
  swift_beginAccess();
  uint64_t v3 = *(void **)(v0 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  float32x4_t v4 = v2;
  float32x4_t v5 = v3;
  result.bestPoints._rawValue = v5;
  result.actualPoints._rawValue = v4;
  return result;
}

uint64_t sub_22F1ACD00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2686951D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

void *sub_22F1ACDCC(uint64_t a1, uint64_t a2)
{
  return sub_22F1ACDEC(a1, a2, &qword_268694D90);
}

void *sub_22F1ACDDC(uint64_t a1, uint64_t a2)
{
  return sub_22F1ACDEC(a1, a2, &qword_268694C60);
}

void *sub_22F1ACDEC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (a2 <= a1) {
    uint64_t v3 = a1;
  }
  else {
    uint64_t v3 = a2;
  }
  if (!v3) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(a3);
  float32x4_t v5 = (void *)swift_allocObject();
  int64_t v6 = _swift_stdlib_malloc_size(v5);
  uint64_t v7 = v6 - 32;
  if (v6 < 32) {
    uint64_t v7 = v6 - 17;
  }
  v5[2] = a1;
  v5[3] = 2 * (v7 >> 4);
  return v5;
}

void *sub_22F1ACE6C(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_268694CB0);
  uint64_t v4 = (void *)swift_allocObject();
  int64_t v5 = _swift_stdlib_malloc_size(v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 - 25;
  }
  _OWORD v4[2] = a1;
  v4[3] = 2 * (v6 >> 3);
  return v4;
}

void *sub_22F1ACEE4(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2686948D8);
  uint64_t v4 = (void *)swift_allocObject();
  int64_t v5 = _swift_stdlib_malloc_size(v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 - 29;
  }
  _OWORD v4[2] = a1;
  v4[3] = 2 * (v6 >> 2);
  return v4;
}

uint64_t sub_22F1ACF5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2686951D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_22F1ACFC4(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2686951D0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_22F1AD024(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void *sub_22F1AD088(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_268695250);
  uint64_t v4 = (void *)swift_allocObject();
  int64_t v5 = _swift_stdlib_malloc_size(v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 - 25;
  }
  _OWORD v4[2] = a1;
  v4[3] = (2 * (v6 >> 3)) | 1;
  return v4;
}

float sub_22F1AD104(uint64_t a1, int32x4_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = swift_bridgeObjectRetain();
    if ((unint64_t)v2 >= 9)
    {
      uint64_t v7 = v2 & 7;
      if ((v2 & 7) == 0) {
        uint64_t v7 = 8;
      }
      int32x4_t v6 = a2;
      float32x4_t v8 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2.i8, 0);
      float32x4_t v9 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2.i8, 1);
      uint64_t v4 = v2 - v7;
      float32x4_t v10 = (float32x4_t)vdupq_laneq_s32(a2, 2);
      uint64_t v11 = (const float *)(v3 + 96);
      float v5 = 0.0;
      uint64_t v12 = v4;
      do
      {
        double v13 = v11 - 16;
        float32x4x4_t v25 = vld4q_f32(v13);
        float32x4x4_t v26 = vld4q_f32(v11);
        float32x4_t v14 = vsubq_f32(v8, v25.val[0]);
        float32x4_t v15 = vsubq_f32(v8, v26.val[0]);
        float32x4_t v16 = vsubq_f32(v9, v25.val[1]);
        float32x4_t v17 = vsubq_f32(v9, v26.val[1]);
        v25.val[0] = vsubq_f32(v10, v25.val[2]);
        v25.val[1] = vsubq_f32(v10, v26.val[2]);
        v25.val[0] = vsqrtq_f32(vaddq_f32(vmulq_f32(v25.val[0], v25.val[0]), vaddq_f32(vmulq_f32(v14, v14), vmulq_f32(v16, v16))));
        v25.val[1] = vsqrtq_f32(vaddq_f32(vmulq_f32(v25.val[1], v25.val[1]), vaddq_f32(vmulq_f32(v15, v15), vmulq_f32(v17, v17))));
        float v5 = (float)((float)((float)((float)((float)((float)((float)(v5 + v25.val[0].f32[0]) + v25.val[0].f32[1])
                                                   + v25.val[0].f32[2])
                                           + v25.val[0].f32[3])
                                   + v25.val[1].f32[0])
                           + v25.val[1].f32[1])
                   + v25.val[1].f32[2])
           + v25.val[1].f32[3];
        v11 += 32;
        v12 -= 8;
      }
      while (v12);
    }
    else
    {
      uint64_t v4 = 0;
      float v5 = 0.0;
      int32x4_t v6 = a2;
    }
    uint64_t v18 = v2 - v4;
    float32x2_t v19 = (float *)(v3 + 16 * v4 + 40);
    do
    {
      float v20 = *(float *)v6.i32 - *(v19 - 2);
      float v21 = *(float *)&v6.i32[1] - *(v19 - 1);
      float v22 = *v19;
      v19 += 4;
      float v5 = v5
         + sqrtf((float)((float)(*(float *)&v6.i32[2] - v22) * (float)(*(float *)&v6.i32[2] - v22))+ (float)((float)(v20 * v20) + (float)(v21 * v21)));
      --v18;
    }
    while (v18);
    swift_bridgeObjectRelease();
  }
  else
  {
    float v5 = 0.0;
  }
  return v5 / (float)v2;
}

double sub_22F1AD27C(_OWORD *a1)
{
  double result = 0.0;
  a1[29] = 0u;
  a1[30] = 0u;
  a1[27] = 0u;
  a1[28] = 0u;
  a1[25] = 0u;
  a1[26] = 0u;
  a1[23] = 0u;
  a1[24] = 0u;
  a1[21] = 0u;
  a1[22] = 0u;
  a1[19] = 0u;
  a1[20] = 0u;
  a1[17] = 0u;
  a1[18] = 0u;
  a1[15] = 0u;
  a1[16] = 0u;
  a1[13] = 0u;
  a1[14] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t sub_22F1AD2C4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t sub_22F1AD2DC(uint64_t a1)
{
  return a1;
}

unint64_t sub_22F1AD30C()
{
  unint64_t result = qword_2686951F0;
  if (!qword_2686951F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2686951F0);
  }
  return result;
}

unint64_t sub_22F1AD364()
{
  unint64_t result = qword_2686951F8;
  if (!qword_2686951F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2686951F8);
  }
  return result;
}

unint64_t sub_22F1AD3BC()
{
  unint64_t result = qword_268695200;
  if (!qword_268695200)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268695200);
  }
  return result;
}

unint64_t sub_22F1AD414()
{
  unint64_t result = qword_268695208;
  if (!qword_268695208)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268695208);
  }
  return result;
}

void sub_22F1AD468(uint64_t a1@<X8>)
{
  *(double *)a1 = LocalPlaneDetector.defaultPlaneExtent.getter();
  *(void *)(a1 + 8) = v2;
}

__n128 sub_22F1AD494(__n128 *a1, __n128 **a2)
{
  uint64_t v2 = *a2;
  __n128 result = *a1;
  CVPixelBufferRef v2[2] = *a1;
  v2[3].n128_u8[0] = 0;
  return result;
}

uint64_t type metadata accessor for LocalPlaneDetector()
{
  return self;
}

ValueMetadata *type metadata accessor for LocalPlaneDetector.DebugOptions()
{
  return &type metadata for LocalPlaneDetector.DebugOptions;
}

Swift::Void __swiftcall Log.debug(_:isPrivate:)(Swift::String _, Swift::Bool isPrivate)
{
  sub_22F1AD63C(_._countAndFlagsBits, (uint64_t)_._object, isPrivate, v2, v3, v4, MEMORY[0x263F90278]);
}

uint64_t Log.category.getter(uint64_t a1)
{
  return a1;
}

uint64_t Log.enabledInDebugKey.getter()
{
  return swift_retain();
}

void sub_22F1AD53C()
{
  id v0 = objc_msgSend(self, sel_mainBundle);
  id v1 = objc_msgSend(v0, sel_bundleIdentifier);

  if (v1)
  {
    uint64_t v2 = sub_22F223AC8();
    uint64_t v4 = v3;

    qword_268695218 = v2;
    unk_268695220 = v4;
  }
  else
  {
    __break(1u);
  }
}

_DWORD *sub_22F1AD5C8()
{
  __n128 result = (_DWORD *)swift_slowAlloc();
  *__n128 result = 0;
  qword_268695228 = (uint64_t)result;
  return result;
}

void sub_22F1AD5F4()
{
  off_268695230 = (_UNKNOWN *)MEMORY[0x263F8EE80];
}

Swift::Void __swiftcall Log.default(_:isPrivate:)(Swift::String _, Swift::Bool isPrivate)
{
  sub_22F1AD63C(_._countAndFlagsBits, (uint64_t)_._object, isPrivate, v2, v3, v4, MEMORY[0x263F90290]);
}

Swift::Void __swiftcall Log.error(_:isPrivate:)(Swift::String _, Swift::Bool isPrivate)
{
  sub_22F1AD63C(_._countAndFlagsBits, (uint64_t)_._object, isPrivate, v2, v3, v4, MEMORY[0x263F90280]);
}

uint64_t sub_22F1AD63C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void))
{
  uint64_t v12 = a7();
  return _s17MeasureFoundation3LogV3log_4type9isPrivateySS_So03os_d1_E2_taSbtF_0(a1, a2, v12, a3, a4, a5);
}

uint64_t _s17MeasureFoundation3LogV3log_4type9isPrivateySS_So03os_d1_E2_taSbtF_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = qword_268694400;
  swift_bridgeObjectRetain();
  if (v10 != -1) {
    swift_once();
  }
  os_unfair_lock_lock((os_unfair_lock_t)qword_268695228);
  if (qword_268694408 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v11 = off_268695230;
  if (*((void *)off_268695230 + 2))
  {
    swift_bridgeObjectRetain();
    unint64_t v12 = sub_22F18DE28(a5, a6);
    if (v13)
    {
      float32x4_t v14 = *(void **)(v11[7] + 8 * v12);
      swift_endAccess();
      id v15 = v14;
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  sub_22F1ADB58();
  if (qword_2686943F8 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  float32x4_t v16 = (void *)sub_22F2241E8();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  id v15 = v16;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  float v20 = off_268695230;
  off_268695230 = (_UNKNOWN *)0x8000000000000000;
  sub_22F1E6EA4((uint64_t)v15, a5, a6, isUniquelyReferenced_nonNull_native);
  off_268695230 = v20;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
LABEL_12:
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock((os_unfair_lock_t)qword_268695228);
  __swift_instantiateConcreteTypeFromMangledName(&qword_268694980);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_22F227140;
  *(void *)(v18 + 56) = MEMORY[0x263F8D310];
  *(void *)(v18 + 64) = sub_22F1ADB98();
  *(void *)(v18 + 32) = a1;
  *(void *)(v18 + 40) = a2;
  swift_bridgeObjectRetain();
  sub_22F223898();

  return swift_bridgeObjectRelease();
}

uint64_t destroy for Log()
{
  swift_bridgeObjectRelease();
  return swift_release();
}

void *_s17MeasureFoundation3LogVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *assignWithCopy for Log(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for Log(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Log(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Log(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Log()
{
  return &type metadata for Log;
}

unint64_t sub_22F1ADB58()
{
  unint64_t result = qword_268695238;
  if (!qword_268695238)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_268695238);
  }
  return result;
}

unint64_t sub_22F1ADB98()
{
  unint64_t result = qword_268695240;
  if (!qword_268695240)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268695240);
  }
  return result;
}

uint64_t sub_22F1ADBEC()
{
  uint64_t v1 = *(void *)(v0 + 88);
  id v2 = (id)v1;
  if (v1 != 1) {
    goto LABEL_5;
  }
  uint64_t v3 = v0;
  uint64_t v4 = *(void *)(v0 + 40);
  swift_unownedRetainStrong();
  uint64_t v5 = *(void *)(v4 + 160);
  swift_unownedRetainStrong();
  swift_release();
  swift_beginAccess();
  uint64_t v6 = *(void *)(v5 + 208);
  swift_retain();
  uint64_t result = swift_release();
  if (v6)
  {
    uint64_t v8 = ADProcessor.transformer.getter();
    swift_release();
    uint64_t v9 = *(void *)(v8 + 1080);
    swift_bridgeObjectRetain();
    uint64_t result = swift_release();
    unint64_t v10 = *(void *)(v9 + 16);
    if (!(v10 >> 61))
    {
      uint64_t v11 = 4 * v10;
      swift_unownedRetainStrong();
      unint64_t v12 = *(void **)(v4 + 32);
      swift_unknownObjectRetain();
      swift_release();
      id v2 = objc_msgSend(v12, sel_newBufferWithBytes_length_options_, v9 + 32, v11, 0);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      uint64_t v13 = *(void *)(v3 + 88);
      *(void *)(v3 + 88) = v2;
      swift_unknownObjectRetain();
      sub_22F1AE764(v13);
LABEL_5:
      sub_22F1AE798(v1);
      return (uint64_t)v2;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

id sub_22F1ADD2C(uint64_t a1)
{
  return sub_22F1ADD68(a1);
}

id sub_22F1ADD68(uint64_t a1)
{
  *(unsigned char *)(v1 + 64) = 0;
  *(void *)(v1 + 88) = 1;
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  uint64_t v5 = *(void **)(a1 + 40);
  uint64_t v6 = qword_268694348;
  swift_retain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  if (v6 != -1) {
    swift_once();
  }
  id v7 = sub_22F1ADED8(Strong, v5, static ADTransformer.adImagePlaneVertexDescriptor);

  id result = (id)swift_unknownObjectRelease();
  if (v7)
  {
    *(void *)(v1 + 72) = v7;
    id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F128A0]), sel_init);
    objc_msgSend(v9, sel_setDepthCompareFunction_, 7);
    objc_msgSend(v9, sel_setDepthWriteEnabled_, 0);
    id result = objc_msgSend(v3, sel_newDepthStencilStateWithDescriptor_, v9);
    if (result)
    {
      *(void *)(v1 + 80) = result;
      swift_release();
      uint64_t v10 = sub_22F1E2A30(a1);
      swift_unknownObjectRelease();

      swift_release();
      return (id)v10;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

id sub_22F1ADED8(void *a1, void *a2, uint64_t a3)
{
  v23[1] = *(id *)MEMORY[0x263EF8340];
  id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F129C0]), sel_init);
  objc_msgSend(v6, sel_setAlphaToCoverageEnabled_, 1);
  id v7 = (void *)sub_22F223A98();
  id v8 = objc_msgSend(a2, sel_newFunctionWithName_, v7);

  if (!v8)
  {
    __break(1u);
    goto LABEL_14;
  }
  objc_msgSend(v6, sel_setVertexFunction_, v8);
  swift_unknownObjectRelease();
  id v9 = (void *)sub_22F223A98();
  id v10 = objc_msgSend(a2, sel_newFunctionWithName_, v9);

  if (!v10)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  objc_msgSend(v6, sel_setFragmentFunction_, v10);
  swift_unknownObjectRelease();
  objc_msgSend(v6, sel_setVertexDescriptor_, a3);
  objc_msgSend(v6, sel_setDepthAttachmentPixelFormat_, objc_msgSend(a1, sel_depthStencilPixelFormat));
  id v11 = objc_msgSend(v6, sel_colorAttachments);
  id v12 = objc_msgSend(v11, sel_objectAtIndexedSubscript_, 0);

  if (!v12)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  objc_msgSend(v12, sel_setPixelFormat_, objc_msgSend(a1, sel_colorPixelFormat));

  id v13 = objc_msgSend(v6, sel_colorAttachments);
  id v14 = objc_msgSend(v13, sel_objectAtIndexedSubscript_, 0);

  if (!v14)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }
  objc_msgSend(v14, sel_setDestinationRGBBlendFactor_, 5);

  id v15 = objc_msgSend(v6, sel_colorAttachments);
  id v16 = objc_msgSend(v15, sel_objectAtIndexedSubscript_, 0);

  if (!v16) {
    goto LABEL_17;
  }
  objc_msgSend(v16, sel_setDestinationAlphaBlendFactor_, 5);

  id v17 = objc_msgSend(a1, sel_device);
  if (!v17)
  {

    return 0;
  }
  v23[0] = 0;
  id v18 = objc_msgSend(v17, sel_newRenderPipelineStateWithDescriptor_error_, v6, v23);
  swift_unknownObjectRelease();
  id v19 = v23[0];
  if (!v18)
  {
    float v20 = v19;
    float v21 = (void *)sub_22F2236F8();

    swift_willThrow();
    return 0;
  }

  return v18;
}

void DebugADNode.draw(commandBuffer:)(void *a1)
{
  uint64_t v2 = v1[9];
  if (!v2) {
    return;
  }
  uint64_t v3 = v1;
  swift_unknownObjectRetain();
  uint64_t v5 = sub_22F1ADBEC();
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = v5;
  uint64_t v7 = v1[5];
  swift_unownedRetainStrong();
  id v22 = (id)MetalScene.makeDefaultRenderPassDescriptor()();
  swift_release();
  if (!v22)
  {
    swift_unknownObjectRelease();
LABEL_11:
    swift_unknownObjectRelease();
    return;
  }
  id v8 = objc_msgSend(a1, sel_renderCommandEncoderWithDescriptor_);
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = v1[6];
    swift_unownedRetainStrong();
    swift_beginAccess();
    uint64_t v11 = *(void *)(v10 + 240);
    swift_release();
    if ((v11 & 0x10) != 0)
    {
      swift_unownedRetainStrong();
      uint64_t v14 = ADProcessor.outputConfidenceTexture.getter();
      swift_release();
      char v15 = 7;
      goto LABEL_25;
    }
    swift_unownedRetainStrong();
    swift_beginAccess();
    uint64_t v12 = *(void *)(v10 + 240);
    swift_release();
    if ((v12 & 8) == 0)
    {
      swift_unownedRetainStrong();
      swift_beginAccess();
      uint64_t v13 = *(void *)(v10 + 240);
      swift_release();
      if ((v13 & 0x8000) == 0)
      {
        objc_msgSend(v9, sel_endEncoding);
        swift_unknownObjectRelease();

        swift_unknownObjectRelease();
LABEL_26:
        swift_unknownObjectRelease();
        return;
      }
      swift_unownedRetainStrong();
      uint64_t v14 = ADProcessor.outputPersonTexture.getter();
      swift_release();
      char v15 = 8;
LABEL_25:
      v24[0] = v15;
      objc_msgSend(v9, sel_setCullMode_, 0, v22);
      objc_msgSend(v9, sel_setRenderPipelineState_, v2);
      objc_msgSend(v9, sel_setDepthStencilState_, v3[10]);
      objc_msgSend(v9, sel_setVertexBuffer_offset_atIndex_, v6, 0, 0);
      swift_unownedRetainStrong();
      swift_beginAccess();
      uint64_t v19 = *(void *)(v7 + 192);
      swift_unknownObjectRetain();
      swift_release();
      objc_msgSend(v9, sel_setFragmentBuffer_offset_atIndex_, v19, 0, 0);
      swift_unknownObjectRelease();
      objc_msgSend(v9, sel_setFragmentBytes_length_atIndex_, v24, 1, 1);
      objc_msgSend(v9, sel_setFragmentTexture_atIndex_, v14, 0);
      swift_unownedRetainStrong();
      uint64_t v20 = ADProcessor.outputConfidenceTexture.getter();
      swift_release();
      objc_msgSend(v9, sel_setFragmentTexture_atIndex_, v20, 1);
      swift_unknownObjectRelease();
      swift_unownedRetainStrong();
      uint64_t v21 = ADProcessor.outputPersonTexture.getter();
      swift_release();
      objc_msgSend(v9, sel_setFragmentTexture_atIndex_, v21, 2);
      swift_unknownObjectRelease();
      objc_msgSend(v9, sel_drawPrimitives_vertexStart_vertexCount_, 4, 0, 4);
      objc_msgSend(v9, sel_endEncoding);
      swift_unknownObjectRelease();

      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      goto LABEL_26;
    }
    uint64_t v16 = v3[7];
    swift_unownedRetainStrong();
    swift_beginAccess();
    int v17 = *(unsigned __int8 *)(v16 + 242);
    swift_release();
    if (v17 == 1)
    {
      swift_unownedRetainStrong();
      swift_beginAccess();
      uint64_t v18 = *(void *)(v16 + 256);
      swift_release();
      if (v18)
      {
        swift_unownedRetainStrong();
        swift_beginAccess();
        uint64_t v14 = *(void *)(v16 + 256);
        swift_unknownObjectRetain();
        swift_release();
        if (v14)
        {
LABEL_23:
          char v15 = 2;
          goto LABEL_25;
        }
        __break(1u);
      }
    }
    swift_unownedRetainStrong();
    uint64_t v14 = ADProcessor.outputDepthTexture.getter();
    swift_release();
    goto LABEL_23;
  }
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
}

uint64_t sub_22F1AE6A8()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v1 = *(void *)(v0 + 88);
  return sub_22F1AE764(v1);
}

uint64_t DebugADNode.deinit()
{
  swift_bridgeObjectRelease();
  swift_unownedRelease();
  swift_unownedRelease();
  swift_unownedRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  sub_22F1AE764(*(void *)(v0 + 88));
  return v0;
}

uint64_t DebugADNode.__deallocating_deinit()
{
  DebugADNode.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_22F1AE764(uint64_t result)
{
  if (result != 1) {
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t type metadata accessor for DebugADNode()
{
  return self;
}

uint64_t sub_22F1AE798(uint64_t result)
{
  if (result != 1) {
    return swift_unknownObjectRetain();
  }
  return result;
}

uint64_t sub_22F1AE7A8(uint64_t a1)
{
  v23[1] = *(CVMetalTextureCacheRef *)MEMORY[0x263EF8340];
  *(_DWORD *)(v1 + 36) = 1065342996;
  *(void *)(v1 + 48) = 0;
  *(void *)(v1 + 56) = 0;
  *(void *)(v1 + 104) = 0;
  *(void *)(v1 + 112) = 0;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_OWORD *)(v1 + 144) = 0u;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_OWORD *)(v1 + 176) = 0u;
  *(unsigned char *)(v1 + 192) = 1;
  *(void *)(v1 + 120) = a1;
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  uint64_t v5 = *(void **)(a1 + 40);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  id v6 = sub_22F1AFEC8(Strong, v5);

  swift_unknownObjectRelease();
  *(void *)(v1 + 40) = v6;
  id v7 = objc_msgSend(v3, sel_newBufferWithLength_options_, 1600000, 0);
  if (!v7) {
    goto LABEL_7;
  }
  id v8 = v7;
  *(void *)(v1 + 72) = v7;
  id v9 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
  id v10 = v8;
  *(void *)(v1 + 80) = v9;
  id v11 = objc_msgSend(v3, sel_newBufferWithLength_options_, 1600000, 0);
  if (!v11)
  {
LABEL_8:
    __break(1u);
LABEL_9:
    __break(1u);
  }
  uint64_t v12 = v11;
  *(void *)(v1 + 88) = v11;
  id v13 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
  id v14 = v12;
  *(void *)(v1 + 96) = v13;
  v23[0] = 0;
  CVMetalTextureCacheCreate(0, 0, v3, 0, v23);
  CVMetalTextureCacheRef v15 = v23[0];
  if (!v23[0]) {
    goto LABEL_9;
  }
  *(CVMetalTextureCacheRef *)(v1 + 64) = v23[0];
  uint64_t v16 = v15;
  swift_release();
  uint64_t v17 = MEMORY[0x263F8EE78];
  *(_WORD *)(v1 + 32) = 257;
  *(unsigned char *)(v1 + 34) = 1;
  uint64_t v18 = qword_268694990;
  *(void *)(v1 + 16) = qword_268694990;
  *(void *)(v1 + 24) = v17;
  if (v18 == -1)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  qword_268694990 = v18 + 1;
  uint64_t v19 = self;
  swift_retain();
  id v20 = objc_msgSend(v19, sel_defaultCenter);
  uint64_t v21 = *MEMORY[0x263F83330];
  swift_retain();
  objc_msgSend(v20, sel_addObserver_selector_name_object_, v1, sel_appDidEnterBackground, v21, 0);

  swift_unknownObjectRelease();
  swift_release_n();
  swift_release();
  return v1;
}

Swift::Void __swiftcall DebugWorldNode.didUpdate(frame:)(ARFrame frame)
{
  uint64_t v2 = v1;
  id v4 = [(objc_class *)frame.super.isa capturedPointCloudData];
  if (v4)
  {
    uint64_t v5 = v4;
    id v6 = [(objc_class *)frame.super.isa camera];
    uint64_t v7 = *(void *)(sub_22F224088() + 16);
    swift_bridgeObjectRelease();
    uint64_t v8 = *(void *)(v1 + 120);
    swift_beginAccess();
    id v9 = *(void **)(v8 + 192);
    if (v9)
    {
      id v10 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
      id v11 = v9;
      objc_msgSend(v6, sel_transform);
      if ((*(unsigned char *)(v2 + 192) & 1) == 0)
      {
        float32x4_t v16 = vmulq_f32(v14, *(float32x4_t *)(v2 + 160));
        if ((float)(v16.f32[2] + (float)((float)(COERCE_FLOAT(*(void *)(v2 + 160)) * v14.f32[0]) + v16.f32[1])) > *(float *)(v2 + 36))
        {
LABEL_23:
          sub_22F1AEDBC(frame.super.isa);

          return;
        }
      }
      *(_OWORD *)(v2 + 128) = v12;
      *(_OWORD *)(v2 + 144) = v13;
      *(float32x4_t *)(v2 + 160) = v14;
      *(_OWORD *)(v2 + 176) = v15;
      *(unsigned char *)(v2 + 192) = 0;
      swift_beginAccess();
      if (*(unsigned char *)(v8 + 184))
      {
LABEL_31:
        __break(1u);
        return;
      }
      objc_msgSend(v6, sel_viewMatrixForOrientation_, *(void *)(v8 + 176));
      simd_float4x4 v48 = __invert_f4(v47);
      float32x4_t v40 = (float32x4_t)v48.columns[1];
      float32x4_t v41 = (float32x4_t)v48.columns[0];
      float32x4_t v38 = (float32x4_t)v48.columns[3];
      float32x4_t v39 = (float32x4_t)v48.columns[2];
      uint64_t v17 = *(void *)(v2 + 104);
      if (v17 < (uint64_t)0xFFFFFFFF80000000) {
        goto LABEL_28;
      }
      if (v17 <= 0x7FFFFFFF)
      {
        long long v37 = v10;
        v10[184] = v17;
        int v18 = 0;
        if (v7)
        {
          for (unint64_t i = 0; v7 != i; ++i)
          {
            id v20 = objc_msgSend(v5, sel_depthPointCloud);
            if (v20)
            {
              uint64_t v21 = v20;
              id v22 = (float *)objc_msgSend(v20, sel_confidences);

              if (v22)
              {
                float v23 = v22[i];
                swift_unownedRetainStrong();
                swift_release();
                if (v23 >= 0.9)
                {
                  swift_unownedRetainStrong();
                  DepthProcessor.transformer.getter();
                  swift_release();
                  uint64_t v24 = sub_22F224088();
                  if (i >= *(void *)(v24 + 16))
                  {
                    __break(1u);
LABEL_26:
                    __break(1u);
LABEL_27:
                    __break(1u);
LABEL_28:
                    __break(1u);
                    goto LABEL_29;
                  }
                  float32x4_t v46 = *(float32x4_t *)(v24 + 16 * i + 32);
                  swift_bridgeObjectRelease();
                  *(double *)v25.i64 = DepthTransformer.jasperToARKitCamera.getter();
                  float32x4_t v42 = v25;
                  float32x4_t v43 = v26;
                  float32x4_t v44 = v28;
                  float32x4_t v45 = v27;
                  swift_release();
                  float32x4_t v29 = vaddq_f32(v44, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v42, 0.001 * v46.f32[0]), v43, vmuls_lane_f32(0.001, *(float32x2_t *)v46.f32, 1)), v45, vmuls_lane_f32(0.001, v46, 2)));
                  float32x4_t v30 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v41, v29.f32[0]), v40, *(float32x2_t *)v29.f32, 1), v39, v29, 2), v38, v29, 3);
                  float32x4_t v31 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 3);
                  *(float32x2_t *)&long long v32 = vdiv_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v31.f32);
                  *((void *)&v32 + 1) = vdivq_f32(v30, v31).u32[2];
                  uint64_t v33 = *(void *)(v2 + 104);
                  *(_OWORD *)(*(void *)(v2 + 80) + 16 * v33) = v32;
                  if (__OFADD__(v33, 1)) {
                    goto LABEL_26;
                  }
                  *(void *)(v2 + 104) = (v33 + 1) % 100000;
                  uint64_t v34 = *(void *)(v2 + 112);
                  BOOL v35 = __OFADD__(v34, 1);
                  uint64_t v36 = v34 + 1;
                  if (v35) {
                    goto LABEL_27;
                  }
                  if (v36 >= 100000) {
                    uint64_t v36 = 100000;
                  }
                  *(void *)(v2 + 112) = v36;
                  BOOL v35 = __OFADD__(v18++, 1);
                  if (v35)
                  {
                    __break(1u);
                    break;
                  }
                }
              }
            }
          }
        }
        v37[185] = v18;
        goto LABEL_23;
      }
LABEL_29:
      __break(1u);
    }
    __break(1u);
    goto LABEL_31;
  }
}

void sub_22F1AEDBC(void *a1)
{
  textureOut[1] = *(CVMetalTextureRef *)MEMORY[0x263EF8340];
  pixelBuffer = (__CVBuffer *)objc_msgSend(a1, sel_capturedImage);
  if ((uint64_t)CVPixelBufferGetPlaneCount(pixelBuffer) > 1)
  {
    size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(pixelBuffer, 0);
    size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(pixelBuffer, 0);
    textureOut[0] = 0;
    id v4 = (__CVMetalTextureCache *)v1[8];
    TextureFromCGImageRef Image = CVMetalTextureCacheCreateTextureFromImage(0, v4, pixelBuffer, 0, MTLPixelFormatR8Unorm, WidthOfPlane, HeightOfPlane, 0, textureOut);
    CVMetalTextureRef v6 = textureOut[0];
    if (TextureFromImage)
    {

      CVMetalTextureRef v6 = 0;
    }
    uint64_t v7 = (void *)v1[6];
    v1[6] = v6;

    size_t v8 = CVPixelBufferGetWidthOfPlane(pixelBuffer, 1uLL);
    size_t v9 = CVPixelBufferGetHeightOfPlane(pixelBuffer, 1uLL);
    textureOut[0] = 0;
    CVReturn v10 = CVMetalTextureCacheCreateTextureFromImage(0, v4, pixelBuffer, 0, MTLPixelFormatRG8Unorm, v8, v9, 1uLL, textureOut);
    CVMetalTextureRef v11 = textureOut[0];

    if (v10)
    {

      CVMetalTextureRef v11 = 0;
    }
    long long v12 = (void *)v1[7];
    v1[7] = v11;
  }
  else
  {
  }
}

void DebugWorldNode.draw(commandBuffer:)(void *a1)
{
  uint64_t v2 = v1[5];
  if (v2)
  {
    uint64_t v3 = v1;
    id v4 = (void *)v1[6];
    if (v4)
    {
      uint64_t v5 = (void *)v1[7];
      if (v5)
      {
        uint64_t v7 = v3[15];
        swift_unknownObjectRetain();
        id v8 = v4;
        id v19 = v5;
        unint64_t v9 = (unint64_t)MetalScene.makeDefaultRenderPassDescriptor()();
        if (v9)
        {
          id v18 = (id)v9;
          id v10 = objc_msgSend(a1, sel_renderCommandEncoderWithDescriptor_);
          if (v10)
          {
            CVMetalTextureRef v11 = v10;
            uint64_t v12 = swift_allocObject();
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_268695250);
            uint64_t v13 = swift_allocObject();
            *(_OWORD *)(v13 + 16) = xmmword_22F227F40;
            *(void *)(v13 + 32) = v8;
            *(void *)(v13 + 40) = v19;
            aBlock[0] = v13;
            sub_22F223CD8();
            *(void *)(v12 + 16) = aBlock[0];
            aBlock[4] = sub_22F1AFC24;
            aBlock[5] = v12;
            aBlock[0] = MEMORY[0x263EF8330];
            aBlock[1] = 1107296256;
            aBlock[2] = sub_22F1AF28C;
            aBlock[3] = &block_descriptor_1;
            float32x4_t v14 = _Block_copy(aBlock);
            long long v15 = (__CVBuffer *)v8;
            float32x4_t v16 = (__CVBuffer *)v19;
            swift_retain();
            swift_release();
            objc_msgSend(a1, sel_addCompletedHandler_, v14);
            _Block_release(v14);
            objc_msgSend(v11, sel_setRenderPipelineState_, v2);
            swift_beginAccess();
            objc_msgSend(v11, sel_setVertexBuffer_offset_atIndex_, *(void *)(v7 + 192), 0, 0);
            objc_msgSend(v11, sel_setVertexBuffer_offset_atIndex_, v3[9], 0, 1);
            objc_msgSend(v11, sel_setVertexBuffer_offset_atIndex_, v3[11], 0, 2);
            objc_msgSend(v11, sel_setVertexTexture_atIndex_, CVMetalTextureGetTexture(v15), 0);
            swift_unknownObjectRelease();
            objc_msgSend(v11, sel_setVertexTexture_atIndex_, CVMetalTextureGetTexture(v16), 1);
            swift_unknownObjectRelease();
            objc_msgSend(v11, sel_drawPrimitives_vertexStart_vertexCount_, 0, 0, v3[14]);
            objc_msgSend(v11, sel_endEncoding);
            swift_unknownObjectRelease();

            swift_unknownObjectRelease();
            swift_release();
            return;
          }
          swift_unknownObjectRelease();

          uint64_t v17 = v18;
        }
        else
        {
          swift_unknownObjectRelease();

          uint64_t v17 = v19;
        }
      }
    }
  }
}

uint64_t sub_22F1AF28C(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();
  return swift_unknownObjectRelease();
}

void sub_22F1AF2EC()
{
  id v1 = objc_msgSend(self, sel_standardUserDefaults);
  uint64_t v2 = (void *)sub_22F223A98();
  id v3 = objc_msgSend(v1, sel_stringForKey_, v2);

  if (v3)
  {
    uint64_t v4 = sub_22F223AC8();
    uint64_t v6 = v5;

    if (*(uint64_t *)(v0 + 112) >= 1) {
      sub_22F1AF3C0(v4, v6);
    }
    swift_bridgeObjectRelease();
  }
  *(void *)(v0 + 112) = 0;
}

uint64_t sub_22F1AF3C0(uint64_t a1, uint64_t a2)
{
  id v3 = v2;
  uint64_t v6 = sub_22F223AF8();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  unint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_22F223788();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v3[3].columns[0].i8[0]) {
    return 0;
  }
  uint64_t v33 = a1;
  uint64_t v34 = a2;
  BOOL v35 = v9;
  uint64_t v31 = v7;
  uint64_t v32 = v6;
  *(double *)&long long v15 = simd_quaternion(v3[2]);
  long long v36 = v15;
  uint64_t v38 = 0;
  unint64_t v39 = 0xE000000000000000;
  sub_22F2243F8();
  sub_22F223B48();
  uint64_t v37 = v3[1].columns[3].i64[0];
  sub_22F2246D8();
  sub_22F223B48();
  swift_bridgeObjectRelease();
  sub_22F223B48();
  sub_22F223E18();
  sub_22F223B48();
  sub_22F223E18();
  sub_22F223B48();
  sub_22F223E18();
  sub_22F223B48();
  sub_22F223E18();
  sub_22F223B48();
  sub_22F223E18();
  sub_22F223B48();
  sub_22F223E18();
  sub_22F223B48();
  sub_22F223E18();
  sub_22F223B48();
  uint64_t v37 = v3[1].columns[3].i64[0];
  sub_22F2246D8();
  sub_22F223B48();
  swift_bridgeObjectRelease();
  uint64_t result = sub_22F223B48();
  uint64_t v17 = v38;
  unint64_t v16 = v39;
  uint64_t v40 = v38;
  unint64_t v41 = v39;
  uint64_t v18 = v3[1].columns[3].i64[0];
  if ((v18 & 0x8000000000000000) == 0)
  {
    if (!v18)
    {
LABEL_17:
      sub_22F223738();
      uint64_t v38 = v17;
      unint64_t v39 = v16;
      swift_bridgeObjectRetain();
      float32x4_t v27 = v35;
      sub_22F223AE8();
      sub_22F18B724();
      sub_22F224238();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v27, v32);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      swift_bridgeObjectRelease();
      return 1;
    }
    float32x4_t v28 = v13;
    uint64_t v29 = v11;
    uint64_t v30 = v10;
    id v19 = (long long *)v3[1].columns[1].i64[0];
    id v20 = (float32x4_t *)v3[1].columns[2].i64[0];
    while (1)
    {
      float32x4_t v21 = *v20;
      float v22 = roundf(vmuls_lane_f32(255.0, *v20, 2));
      if ((~LODWORD(v22) & 0x7F800000) == 0) {
        break;
      }
      if (v22 <= -1.0) {
        goto LABEL_19;
      }
      if (v22 >= 4295000000.0) {
        goto LABEL_20;
      }
      float v23 = roundf(vmuls_lane_f32(255.0, *(float32x2_t *)v21.f32, 1));
      if ((~LODWORD(v23) & 0x7F800000) == 0) {
        goto LABEL_21;
      }
      if (v23 <= -1.0) {
        goto LABEL_22;
      }
      if (v23 >= 4295000000.0) {
        goto LABEL_23;
      }
      float v24 = roundf(255.0 * v21.f32[0]);
      if ((~LODWORD(v24) & 0x7F800000) == 0) {
        goto LABEL_24;
      }
      if (v24 <= -1.0) {
        goto LABEL_25;
      }
      if (v24 >= 4295000000.0) {
        goto LABEL_26;
      }
      long long v25 = *v19++;
      long long v36 = v25;
      unsigned int v26 = v22 | (v23 << 8) | (v24 << 16);
      uint64_t v38 = 0;
      unint64_t v39 = 0xE000000000000000;
      sub_22F223E18();
      sub_22F223B48();
      sub_22F223E18();
      sub_22F223B48();
      sub_22F223E18();
      sub_22F223B48();
      LODWORD(v37) = v26;
      sub_22F2246D8();
      sub_22F223B48();
      swift_bridgeObjectRelease();
      sub_22F223B48();
      sub_22F223B48();
      uint64_t result = swift_bridgeObjectRelease();
      ++v20;
      if (!--v18)
      {
        uint64_t v17 = v40;
        unint64_t v16 = v41;
        uint64_t v11 = v29;
        uint64_t v10 = v30;
        uint64_t v13 = v28;
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  __break(1u);
  return result;
}

void DebugWorldNode.__allocating_init()()
{
}

void DebugWorldNode.init()()
{
}

uint64_t sub_22F1AFB08()
{
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_release();
}

id *DebugWorldNode.deinit()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  return v0;
}

uint64_t DebugWorldNode.__deallocating_deinit()
{
  DebugWorldNode.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_22F1AFBEC()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_22F1AFC24()
{
  swift_beginAccess();
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  return swift_bridgeObjectRelease();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t type metadata accessor for DebugWorldNode()
{
  return self;
}

double simd_quaternion(simd_float4x4 a1)
{
  float v1 = a1.columns[2].f32[2] + (float)(a1.columns[0].f32[0] + a1.columns[1].f32[1]);
  if (v1 >= 0.0)
  {
    a1.columns[3].f32[0] = sqrtf(v1 + 1.0);
    float32x2_t v5 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(a1.columns[3].f32[0] + a1.columns[3].f32[0]));
    float32x2_t v6 = vmul_f32(v5, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(a1.columns[3].f32[0] + a1.columns[3].f32[0]), v5));
    *(float32x2_t *)a1.columns[3].f32 = vmul_n_f32(vsub_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a1.columns[1], (int8x16_t)a1.columns[1], 8uLL), *(int32x2_t *)a1.columns[2].f32), (float32x2_t)vext_s8(*(int8x8_t *)a1.columns[2].f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)a1.columns[0], (int8x16_t)a1.columns[0], 8uLL), 4uLL)), vmul_f32(v6, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(a1.columns[3].f32[0] + a1.columns[3].f32[0]), v6)).f32[0]);
  }
  else if (a1.columns[0].f32[0] < a1.columns[1].f32[1] || a1.columns[0].f32[0] < a1.columns[2].f32[2])
  {
    float v3 = 1.0 - a1.columns[0].f32[0];
    if (a1.columns[1].f32[1] >= a1.columns[2].f32[2])
    {
      a1.columns[3].f32[0] = sqrtf(a1.columns[1].f32[1] + (float)(v3 - a1.columns[2].f32[2]));
      a1.columns[3].f32[0] = a1.columns[3].f32[0] + a1.columns[3].f32[0];
      float32x2_t v16 = vrecpe_f32((float32x2_t)a1.columns[3].u32[0]);
      float32x2_t v17 = vmul_f32(v16, vrecps_f32((float32x2_t)a1.columns[3].u32[0], v16));
      v18.i32[0] = vmul_f32(v17, vrecps_f32((float32x2_t)a1.columns[3].u32[0], v17)).u32[0];
      v17.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)a1.columns[0].f32, 1), *(float32x2_t *)a1.columns[1].f32).u32[0];
      v17.i32[1] = a1.columns[3].i32[0];
      v18.i32[1] = 0.25;
      *(float32x2_t *)a1.columns[3].f32 = vmul_f32(v17, v18);
    }
    else
    {
      float32x2_t v4 = (float32x2_t)__PAIR64__(a1.columns[0].u32[1], COERCE_UNSIGNED_INT(sqrtf(a1.columns[2].f32[2] + (float)(v3 - a1.columns[1].f32[1]))));
      *(float32x2_t *)a1.columns[2].f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a1.columns[0], (int8x16_t)a1.columns[0], 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a1.columns[1], (int8x16_t)a1.columns[1], 8uLL)), *(float32x2_t *)a1.columns[2].f32);
      *(int32x2_t *)a1.columns[1].f32 = vdup_lane_s32(*(int32x2_t *)a1.columns[1].f32, 0);
      a1.columns[1].i32[0] = 2.0;
      a1.columns[1].i32[0] = vmul_f32(v4, *(float32x2_t *)a1.columns[1].f32).u32[0];
      *(float32x2_t *)a1.columns[3].f32 = vrecpe_f32((float32x2_t)a1.columns[1].u32[0]);
      *(float32x2_t *)a1.columns[3].f32 = vmul_f32(*(float32x2_t *)a1.columns[3].f32, vrecps_f32((float32x2_t)a1.columns[1].u32[0], *(float32x2_t *)a1.columns[3].f32));
      *(float32x2_t *)a1.columns[3].f32 = vmul_n_f32(*(float32x2_t *)a1.columns[2].f32, vmul_f32(*(float32x2_t *)a1.columns[3].f32, vrecps_f32((float32x2_t)a1.columns[1].u32[0], *(float32x2_t *)a1.columns[3].f32)).f32[0]);
      __asm { FMOV            V2.2S, #0.25 }
    }
  }
  else
  {
    *(int32x2_t *)a1.columns[3].f32 = vdup_lane_s32(*(int32x2_t *)a1.columns[1].f32, 0);
    float32x2_t v7 = vadd_f32(*(float32x2_t *)a1.columns[0].f32, *(float32x2_t *)a1.columns[3].f32);
    a1.columns[3].i32[0] = 2.0;
    v8.i32[0] = vmul_f32((float32x2_t)__PAIR64__(a1.columns[0].u32[1], COERCE_UNSIGNED_INT(sqrtf(a1.columns[0].f32[0]+ (float)((float)(1.0 - a1.columns[1].f32[1]) - a1.columns[2].f32[2])))), *(float32x2_t *)a1.columns[3].f32).u32[0];
    v8.i32[1] = v7.i32[1];
    float32x2_t v9 = vrecpe_f32((float32x2_t)v8.u32[0]);
    float32x2_t v10 = vmul_f32(v9, vrecps_f32((float32x2_t)v8.u32[0], v9));
    unsigned __int32 v11 = vmul_f32(v10, vrecps_f32((float32x2_t)v8.u32[0], v10)).u32[0];
    __asm { FMOV            V5.2S, #0.25 }
    _D5.i32[1] = v11;
    *(float32x2_t *)a1.columns[3].f32 = vmul_f32(v8, _D5);
  }
  return *(double *)a1.columns[3].i64;
}

unint64_t sub_22F1AFE88()
{
  unint64_t result = qword_268695270;
  if (!qword_268695270)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_268695270);
  }
  return result;
}

id sub_22F1AFEC8(void *a1, void *a2)
{
  v23[1] = *(id *)MEMORY[0x263EF8340];
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F129C0]), sel_init);
  objc_msgSend(v4, sel_setAlphaToCoverageEnabled_, 1);
  float32x2_t v5 = (void *)sub_22F223A98();
  id v6 = objc_msgSend(a2, sel_newFunctionWithName_, v5);

  if (!v6)
  {
    __break(1u);
    goto LABEL_15;
  }
  objc_msgSend(v4, sel_setVertexFunction_, v6);
  swift_unknownObjectRelease();
  float32x2_t v7 = (void *)sub_22F223A98();
  id v8 = objc_msgSend(a2, sel_newFunctionWithName_, v7);

  if (!v8)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  objc_msgSend(v4, sel_setFragmentFunction_, v8);
  swift_unknownObjectRelease();
  objc_msgSend(v4, sel_setDepthAttachmentPixelFormat_, objc_msgSend(a1, sel_depthStencilPixelFormat));
  id v9 = objc_msgSend(v4, sel_colorAttachments);
  id v10 = objc_msgSend(v9, sel_objectAtIndexedSubscript_, 0);

  if (!v10)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  objc_msgSend(v10, sel_setPixelFormat_, objc_msgSend(a1, sel_colorPixelFormat));

  id v11 = objc_msgSend(v4, sel_colorAttachments);
  id v12 = objc_msgSend(v11, sel_objectAtIndexedSubscript_, 0);

  if (!v12)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  objc_msgSend(v12, sel_setBlendingEnabled_, 1);

  id v13 = objc_msgSend(v4, sel_colorAttachments);
  id v14 = objc_msgSend(v13, sel_objectAtIndexedSubscript_, 0);

  if (!v14)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }
  objc_msgSend(v14, sel_setDestinationRGBBlendFactor_, 5);

  id v15 = objc_msgSend(v4, sel_colorAttachments);
  id v16 = objc_msgSend(v15, sel_objectAtIndexedSubscript_, 0);

  if (!v16) {
    goto LABEL_19;
  }
  objc_msgSend(v16, sel_setDestinationAlphaBlendFactor_, 5);

  id v17 = objc_msgSend(a1, sel_device);
  if (!v17)
  {

    return 0;
  }
  v23[0] = 0;
  id v18 = objc_msgSend(v17, sel_newRenderPipelineStateWithDescriptor_error_, v4, v23);
  swift_unknownObjectRelease();
  id v19 = v23[0];
  if (!v18)
  {
    id v20 = v19;
    float32x4_t v21 = (void *)sub_22F2236F8();

    swift_willThrow();
    return 0;
  }

  return v18;
}

uint64_t clamp<A>(_:min:max:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (sub_22F223A38())
  {
    id v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16);
    uint64_t v11 = a5;
    uint64_t v12 = a2;
  }
  else
  {
    char v13 = sub_22F223A28();
    id v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16);
    if (v13)
    {
      uint64_t v11 = a5;
      uint64_t v12 = a3;
    }
    else
    {
      uint64_t v11 = a5;
      uint64_t v12 = a1;
    }
  }
  return v10(v11, v12, a4);
}

double closestPointOnLine(lineP1:lineP2:point:)(float32x4_t a1, float32x4_t a2, float32x4_t a3)
{
  float32x4_t v3 = vsubq_f32(a2, a1);
  float32x2_t v4 = vmul_f32(*(float32x2_t *)v3.f32, *(float32x2_t *)v3.f32);
  v4.f32[0] = sqrtf(vmuls_lane_f32(v3.f32[2], v3, 2) + vaddv_f32(v4));
  if (v4.f32[0] != 0.0)
  {
    *(float32x2_t *)v3.f32 = vdiv_f32(*(float32x2_t *)v3.f32, (float32x2_t)vdup_lane_s32((int32x2_t)v4, 0));
    int8x16_t v5 = (int8x16_t)vsubq_f32(a3, a1);
    float v6 = *(float *)&v5.i32[1];
    v7.i32[0] = vextq_s8(v5, v5, 8uLL).u32[0];
    v7.i32[1] = v5.i32[0];
    *(int32x2_t *)v5.i8 = vdup_lane_s32(*(int32x2_t *)v3.f32, 0);
    *(float *)v5.i32 = v3.f32[2] / v4.f32[0];
    *(float32x2_t *)v5.i8 = vmul_f32(v7, *(float32x2_t *)v5.i8);
    float v8 = *(float *)v5.i32 + (float)(*(float *)&v5.i32[1] + vmuls_lane_f32(v6, *(float32x2_t *)v3.f32, 1));
    if (v4.f32[0] >= v8)
    {
      a2.i64[0] = a1.i64[0];
      if (v8 >= 0.0) {
        *(float32x2_t *)a2.f32 = vadd_f32(*(float32x2_t *)a1.f32, vmul_n_f32(*(float32x2_t *)v3.f32, v8));
      }
    }
    a1.i64[0] = a2.i64[0];
  }
  return *(double *)a1.i64;
}

double closestPointOnLine(lineP1:lineP2:point:)(double a1, double a2, double a3)
{
  return closestPointOnLine(lineP1:lineP2:point:)((float32x4_t)*(unint64_t *)&a1, (float32x4_t)*(unint64_t *)&a2, (float32x4_t)*(unint64_t *)&a3);
}

float lineIntersection(line1P1:line1P2:line2P1:line2P2:)(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4)
{
  float32x4_t v4 = vsubq_f32(a2, a1);
  float32x4_t v5 = vsubq_f32(a4, a3);
  a1.i64[0] = vsubq_f32(a1, a3).u64[0];
  float v6 = vmuls_lane_f32(v4.f32[2], v5, 2) + vaddv_f32(vmul_f32(*(float32x2_t *)v4.f32, *(float32x2_t *)v5.f32));
  float v7 = vmuls_lane_f32(v5.f32[2], v5, 2)
     + (float)(vmulq_f32(v5, v5).f32[0] + vmuls_lane_f32(v5.f32[1], *(float32x2_t *)v5.f32, 1));
  a3.f32[0] = (float)((float)(vmuls_lane_f32(v4.f32[2], v4, 2)
                            + (float)(vmulq_f32(v4, v4).f32[0] + vmuls_lane_f32(v4.f32[1], *(float32x2_t *)v4.f32, 1)))
                    * v7)
            - (float)(v6 * v6);
  float v8 = (float)((float)(v6
                     * (float)(vmuls_lane_f32(a1.f32[2] - a3.f32[2], v5, 2)
                             + (float)(vmuls_n_f32(a1.f32[0], v5.f32[0])
                                     + vmuls_lane_f32(a1.f32[1], *(float32x2_t *)v5.f32, 1))))
             - (float)((float)(vmuls_lane_f32(a1.f32[2] - a3.f32[2], v4, 2)
                             + (float)(vmuls_n_f32(v4.f32[0], a1.f32[0])
                                     + vmuls_lane_f32(v4.f32[1], *(float32x2_t *)a1.f32, 1)))
                     * v7))
     / a3.f32[0];
  if (a3.f32[0] < 0.00000011921) {
    return 0.0;
  }
  else {
    return v8;
  }
}

uint64_t lineIntersectionPoint(line1P1:line1P2:line2P1:line2P2:)(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4)
{
  float v4 = lineIntersection(line1P1:line1P2:line2P1:line2P2:)(a1, a2, a3, a4);
  float32x4_t v6 = vsubq_f32(a2, a1);
  float v7 = 1.0;
  if (v4 <= 1.0) {
    float v8 = v4;
  }
  else {
    float v8 = 1.0;
  }
  BOOL v9 = v4 < 0.0;
  float v10 = 0.0;
  if (v9) {
    float v8 = 0.0;
  }
  float v11 = vmuls_lane_f32(v8, v6, 2);
  int32x2_t v12 = (int32x2_t)vadd_f32(*(float32x2_t *)a1.f32, vmul_n_f32(*(float32x2_t *)v6.f32, v8));
  float v13 = a1.f32[2] + v11;
  float32x2_t v14 = (float32x2_t)vdup_lane_s32(v12, 0);
  int8x16_t v15 = (int8x16_t)vsubq_f32(a4, a3);
  if (v5 <= 1.0) {
    float v7 = v5;
  }
  if (v5 >= 0.0) {
    float v10 = v7;
  }
  float v16 = vmuls_lane_f32(v10, *(float32x2_t *)v15.i8, 1);
  v17.i32[0] = vextq_s8((int8x16_t)a3, (int8x16_t)a3, 8uLL).u32[0];
  v17.i32[1] = a3.i32[0];
  v18.i32[0] = vextq_s8(v15, v15, 8uLL).u32[0];
  v18.i32[1] = v15.i32[0];
  v14.f32[0] = v13;
  float32x2_t v19 = vsub_f32(vadd_f32(v17, vmul_n_f32(v18, v10)), v14);
  float32x2_t v20 = vmul_f32(v19, v19);
  if ((float)(v20.f32[0]
             + (float)(v20.f32[1]
                     + (float)((float)((float)(a3.f32[1] + v16) - *(float *)&v12.i32[1])
                             * (float)((float)(a3.f32[1] + v16) - *(float *)&v12.i32[1])))) < 0.0001)
    return (uint64_t)v12;
  else {
    return 0;
  }
}

uint64_t lineIntersectionPoint(line1P1:line1P2:line2P1:line2P2:)(double a1, double a2, double a3, double a4)
{
  uint64_t result = lineIntersectionPoint(line1P1:line1P2:line2P1:line2P2:)((float32x4_t)*(unint64_t *)&a1, (float32x4_t)*(unint64_t *)&a2, (float32x4_t)*(unint64_t *)&a3, (float32x4_t)*(unint64_t *)&a4);
  if (v5) {
    return 0;
  }
  return result;
}

BOOL lineInRect(rectOrigin:rectSize:lineP1:lineP2:)(float32x2_t a1, float32x2_t a2, float32x2_t a3, float32x2_t a4)
{
  if (vcgt_f32(a1, a3).u8[0] & 1) != 0 && (vcgt_f32(a1, a4).u8[0]) {
    return 0;
  }
  BOOL result = 0;
  if (a4.f32[1] >= a1.f32[1] || a3.f32[1] >= a1.f32[1])
  {
    float32x2_t v6 = vadd_f32(a1, a2);
    if ((vcgt_f32(a3, v6).u32[0] & vcgt_f32(a4, v6).u32[0] & 1) == 0) {
      return v6.f32[1] >= a4.f32[1] || v6.f32[1] >= a3.f32[1];
    }
  }
  return result;
}

uint64_t clipLineToRect(rectOrigin:rectSize:lineP1:lineP2:)(double a1, float32x2_t a2, double a3, double a4)
{
  float32x2_t v4 = vadd_f32(*(float32x2_t *)&a1, a2);
  float32x2_t v5 = v4;
  float32x2_t v43 = v4;
  v4.i32[1] = HIDWORD(a1);
  float32x2_t v49 = v5;
  unint64_t v53 = __PAIR64__(v5.u32[1], LODWORD(a1));
  float32x4_t v45 = (float32x4_t)(unint64_t)v4;
  float32x4_t v46 = (float32x4_t)*(unint64_t *)&a1;
  float32x4_t v51 = (float32x4_t)*(unint64_t *)&a4;
  float32x4_t v52 = (float32x4_t)*(unint64_t *)&a3;
  uint64_t v6 = lineIntersectionPoint(line1P1:line1P2:line2P1:line2P2:)((float32x4_t)*(unint64_t *)&a1, (float32x4_t)(unint64_t)v4, (float32x4_t)*(unint64_t *)&a3, (float32x4_t)*(unint64_t *)&a4);
  if (v7)
  {
    float v8 = (float32x2_t *)MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v41 = v6;
    float v8 = (float32x2_t *)sub_22F19B738(0, 1, 1, MEMORY[0x263F8EE78]);
    unint64_t v10 = (unint64_t)v8[2];
    unint64_t v9 = (unint64_t)v8[3];
    if (v10 >= v9 >> 1) {
      float v8 = (float32x2_t *)sub_22F19B738((char *)(v9 > 1), v10 + 1, 1, (char *)v8);
    }
    CVPixelBufferRef v8[2] = (float32x2_t)(v10 + 1);
    v8[v10 + 4] = (float32x2_t)v41;
  }
  uint64_t v11 = lineIntersectionPoint(line1P1:line1P2:line2P1:line2P2:)((float32x4_t)v53, (float32x4_t)(unint64_t)v49, v52, v51);
  if ((v12 & 1) == 0)
  {
    uint64_t v42 = v11;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      float v8 = (float32x2_t *)sub_22F19B738(0, *(void *)&v8[2] + 1, 1, (char *)v8);
    }
    unint64_t v14 = (unint64_t)v8[2];
    unint64_t v13 = (unint64_t)v8[3];
    if (v14 >= v13 >> 1) {
      float v8 = (float32x2_t *)sub_22F19B738((char *)(v13 > 1), v14 + 1, 1, (char *)v8);
    }
    CVPixelBufferRef v8[2] = (float32x2_t)(v14 + 1);
    v8[v14 + 4] = (float32x2_t)v42;
  }
  uint64_t v15 = lineIntersectionPoint(line1P1:line1P2:line2P1:line2P2:)(v45, (float32x4_t)(unint64_t)v49, v52, v51);
  if ((v16 & 1) == 0)
  {
    uint64_t v50 = v15;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      float v8 = (float32x2_t *)sub_22F19B738(0, *(void *)&v8[2] + 1, 1, (char *)v8);
    }
    unint64_t v18 = (unint64_t)v8[2];
    unint64_t v17 = (unint64_t)v8[3];
    if (v18 >= v17 >> 1) {
      float v8 = (float32x2_t *)sub_22F19B738((char *)(v17 > 1), v18 + 1, 1, (char *)v8);
    }
    CVPixelBufferRef v8[2] = (float32x2_t)(v18 + 1);
    v8[v18 + 4] = (float32x2_t)v50;
  }
  uint64_t v19 = lineIntersectionPoint(line1P1:line1P2:line2P1:line2P2:)(v46, (float32x4_t)v53, v52, v51);
  if (v20)
  {
    unint64_t v23 = (unint64_t)v8[2];
    float32x2_t v25 = *(float32x2_t *)&a3;
    float32x2_t v24 = *(float32x2_t *)&a4;
    if (v23 > 1) {
      goto LABEL_37;
    }
  }
  else
  {
    uint64_t v54 = v19;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      float v8 = (float32x2_t *)sub_22F19B738(0, *(void *)&v8[2] + 1, 1, (char *)v8);
    }
    unint64_t v22 = (unint64_t)v8[2];
    unint64_t v21 = (unint64_t)v8[3];
    unint64_t v23 = v22 + 1;
    float32x2_t v25 = *(float32x2_t *)&a3;
    float32x2_t v24 = *(float32x2_t *)&a4;
    if (v22 >= v21 >> 1)
    {
      uint64_t v38 = sub_22F19B738((char *)(v21 > 1), v22 + 1, 1, (char *)v8);
      float32x2_t v25 = *(float32x2_t *)&a3;
      float32x2_t v24 = *(float32x2_t *)&a4;
      float v8 = (float32x2_t *)v38;
    }
    CVPixelBufferRef v8[2] = (float32x2_t)v23;
    v8[v22 + 4] = (float32x2_t)v54;
    if (v23 > 1)
    {
LABEL_37:
      if (v23 == 2)
      {
LABEL_38:
        float32x2_t v31 = v8[4];
        goto LABEL_52;
      }
LABEL_51:
      float32x2_t v31 = 0;
      goto LABEL_52;
    }
  }
  if ((vcgt_f32(*(float32x2_t *)&a1, v25).u8[0] & 1) == 0)
  {
    int32x2_t v26 = vcgt_f32(v25, v43);
    if ((v26.i8[0] & 1) == 0 && v25.f32[1] >= *((float *)&a1 + 1) && (v26.i8[4] & 1) == 0)
    {
      if (!v23 || (float32x2_t v27 = vsub_f32(v25, v8[4]), vaddv_f32(vmul_f32(v27, v27)) > 0.00000011921))
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          float v8 = (float32x2_t *)sub_22F19B738(0, v23 + 1, 1, (char *)v8);
        }
        unint64_t v29 = (unint64_t)v8[2];
        unint64_t v28 = (unint64_t)v8[3];
        unint64_t v23 = v29 + 1;
        double v30 = a3;
        float32x2_t v24 = *(float32x2_t *)&a4;
        if (v29 >= v28 >> 1)
        {
          unint64_t v39 = sub_22F19B738((char *)(v28 > 1), v29 + 1, 1, (char *)v8);
          double v30 = a3;
          float32x2_t v24 = *(float32x2_t *)&a4;
          float v8 = (float32x2_t *)v39;
        }
        CVPixelBufferRef v8[2] = (float32x2_t)v23;
        *(double *)&v8[v29 + 4] = v30;
        if (v29) {
          goto LABEL_37;
        }
      }
      unint64_t v23 = 1;
    }
  }
  float32x2_t v31 = 0;
  if ((vcgt_f32(*(float32x2_t *)&a1, v24).u8[0] & 1) == 0)
  {
    int32x2_t v32 = vcgt_f32(v24, v43);
    if ((v32.i8[0] & 1) == 0)
    {
      float32x2_t v31 = 0;
      if (v24.f32[1] >= *((float *)&a1 + 1) && (v32.i8[4] & 1) == 0)
      {
        if (v23)
        {
          float32x2_t v33 = vsub_f32(v24, v8[4]);
          if (vaddv_f32(vmul_f32(v33, v33)) <= 0.00000011921)
          {
            float32x2_t v31 = 0;
            goto LABEL_52;
          }
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          float v8 = (float32x2_t *)sub_22F19B738(0, v23 + 1, 1, (char *)v8);
        }
        unint64_t v35 = (unint64_t)v8[2];
        unint64_t v34 = (unint64_t)v8[3];
        double v36 = a4;
        if (v35 >= v34 >> 1)
        {
          uint64_t v40 = sub_22F19B738((char *)(v34 > 1), v35 + 1, 1, (char *)v8);
          double v36 = a4;
          float v8 = (float32x2_t *)v40;
        }
        CVPixelBufferRef v8[2] = (float32x2_t)(v35 + 1);
        *(double *)&v8[v35 + 4] = v36;
        if (v35 == 1) {
          goto LABEL_38;
        }
        goto LABEL_51;
      }
    }
  }
LABEL_52:
  swift_bridgeObjectRelease();
  return (uint64_t)v31;
}

uint64_t pointInRect(rectOrigin:rectSize:point:)(float32x2_t a1, float32x2_t a2, float32x2_t a3)
{
  uint64_t result = 0;
  if ((vcgt_f32(a1, a3).u8[0] & 1) == 0)
  {
    int8x8_t v4 = (int8x8_t)vcgt_f32(a3, vadd_f32(a1, a2));
    if ((v4.i8[0] & 1) == 0) {
      return (a3.f32[1] >= a1.f32[1]) & vmvn_s8(v4).u32[1];
    }
  }
  return result;
}

void __swiftcall slerp(transform1:transform2:percent:)(simd_float4x4 *__return_ptr retstr, simd_float4x4 *transform1, simd_float4x4 *transform2, Swift::Float percent)
{
  simd_float4 v11 = v7;
  simd_float4 v14 = v6;
  simd_float4 v12 = v4;
  simd_float4 v13 = v5;
  *(double *)v8.vector.i64 = simd_quaternion(*(simd_float4x4 *)&percent);
  simd_quatf v10 = v8;
  v16.columns[0] = v12;
  v16.columns[1] = v13;
  v16.columns[2] = v14;
  v16.columns[3] = v11;
  *(double *)v9.i64 = simd_quaternion(v16);
  simd_slerp((float32x4_t)v10, v9, v15);
  MEMORY[0x230FB2B40]();
}

double createTransform(forward:normal:position:)(float32x4_t a1, float32x4_t a2)
{
  float32x4_t v3 = vmulq_f32(a1, a2);
  float32x4_t v4 = vaddq_f32(v3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v3.f32, 1));
  float32x4_t v5 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v3, 2), v4);
  v4.i32[0] = 1065353214;
  float32x4_t v6 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v5, v4)), 0), (int8x16_t)a2, vextq_s8(vextq_s8((int8x16_t)a2, (int8x16_t)a2, 0xCuLL), (int8x16_t)a2, 8uLL));
  float32x4_t v7 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a1, (int32x4_t)a1), (int8x16_t)a1, 0xCuLL), vnegq_f32(v6)), a1, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v6, (int32x4_t)v6), (int8x16_t)v6, 0xCuLL));
  float32x4_t v8 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)v7, 0xCuLL);
  int32x4_t v9 = (int32x4_t)vmulq_f32(v7, v7);
  v9.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v9.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v9, 2), *(float32x2_t *)v9.i8)).u32[0];
  float32x2_t v10 = vrsqrte_f32((float32x2_t)v9.u32[0]);
  float32x2_t v11 = vmul_f32(v10, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(v10, v10)));
  *(void *)&double result = vmulq_n_f32(v8, vmul_f32(v11, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(v11, v11))).f32[0]).u64[0];
  return result;
}

double createTransform(normal:forward:position:)(float32x4_t a1, float32x4_t a2)
{
  float32x4_t v3 = vmulq_f32(a1, a2);
  float32x4_t v4 = vaddq_f32(v3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v3.f32, 1));
  float32x4_t v5 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v3, 2), v4);
  v4.i32[0] = 1065353214;
  float32x4_t v6 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v5, v4)), 0), (int8x16_t)a2, vextq_s8(vextq_s8((int8x16_t)a2, (int8x16_t)a2, 0xCuLL), (int8x16_t)a2, 8uLL));
  float32x4_t v7 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v6, (int32x4_t)v6), (int8x16_t)v6, 0xCuLL), vnegq_f32(a1)), v6, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a1, (int32x4_t)a1), (int8x16_t)a1, 0xCuLL));
  float32x4_t v8 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)v7, 0xCuLL);
  int32x4_t v9 = (int32x4_t)vmulq_f32(v7, v7);
  v9.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v9.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v9, 2), *(float32x2_t *)v9.i8)).u32[0];
  float32x2_t v10 = vrsqrte_f32((float32x2_t)v9.u32[0]);
  float32x2_t v11 = vmul_f32(v10, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(v10, v10)));
  *(void *)&double result = vmulq_n_f32(v8, vmul_f32(v11, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(v11, v11))).f32[0]).u64[0];
  return result;
}

Swift::Float __swiftcall tan(cosine:)(Swift::Float cosine)
{
  return sqrtf(1.0 - (float)(cosine * cosine)) / cosine;
}

Swift::Int __swiftcall random(upperBound:)(Swift::Int upperBound)
{
  if (__OFSUB__(upperBound, 1))
  {
    __break(1u);
    goto LABEL_7;
  }
  Swift::Int v1 = upperBound - 1;
  double v2 = round(drand48() * (double)v1);
  if ((~*(void *)&v2 & 0x7FF0000000000000) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (v2 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v2 < 9.22337204e18) {
    return (uint64_t)v2;
  }
LABEL_9:
  __break(1u);
  return upperBound;
}

Swift::tuple_index_Int_value_Float_optional __swiftcall min(_:)(Swift::OpaquePointer a1)
{
  uint64_t v2 = *((void *)a1._rawValue + 2);
  if (v2)
  {
    Swift::Int v4 = 0;
    Swift::Int v5 = 0;
    float v7 = *((float *)a1._rawValue + 8);
    float32x4_t v6 = (char *)a1._rawValue + 32;
    float v1 = v7;
    do
    {
      float v8 = *(float *)&v6[4 * v5];
      if (v8 < v1) {
        Swift::Int v4 = v5;
      }
      Swift::Int v9 = v5 + 1;
      if (v8 < v1) {
        float v1 = *(float *)&v6[4 * v5];
      }
      ++v5;
    }
    while (v2 != v9);
    char v10 = LOBYTE(v1);
  }
  else
  {
    Swift::Int v4 = 0;
    char v10 = 0;
  }
  Swift::Bool v11 = v10;
  result.value.indedouble x = v4;
  result.value.CVBufferRef value = v1;
  result.is_nil = v11;
  return result;
}

Swift::tuple_index_Int_value_Float_optional __swiftcall max(_:)(Swift::OpaquePointer a1)
{
  uint64_t v2 = *((void *)a1._rawValue + 2);
  if (v2)
  {
    Swift::Int v4 = 0;
    Swift::Int v5 = 0;
    float v7 = *((float *)a1._rawValue + 8);
    float32x4_t v6 = (char *)a1._rawValue + 32;
    float v1 = v7;
    do
    {
      float v8 = *(float *)&v6[4 * v5];
      if (v1 < v8) {
        Swift::Int v4 = v5;
      }
      Swift::Int v9 = v5 + 1;
      if (v1 < v8) {
        float v1 = *(float *)&v6[4 * v5];
      }
      ++v5;
    }
    while (v2 != v9);
    char v10 = LOBYTE(v1);
  }
  else
  {
    Swift::Int v4 = 0;
    char v10 = 0;
  }
  Swift::Bool v11 = v10;
  result.value.indedouble x = v4;
  result.value.CVBufferRef value = v1;
  result.is_nil = v11;
  return result;
}

uint64_t pointClosestToOrigin(_:)(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  v11._rawValue = (void *)MEMORY[0x263F8EE78];
  sub_22F18FCC8(0, v1, 0);
  uint64_t v3 = 0;
  uint64_t v4 = a1 + 32;
  unint64_t v5 = *((void *)v11._rawValue + 2);
  do
  {
    float32x2_t v6 = *(float32x2_t *)(v4 + 8 * v3);
    unint64_t v7 = *((void *)v11._rawValue + 3);
    if (v5 >= v7 >> 1) {
      sub_22F18FCC8((char *)(v7 > 1), v5 + 1, 1);
    }
    ++v3;
    *((void *)v11._rawValue + 2) = v5 + 1;
    *((float *)v11._rawValue + v5++ + 8) = sqrtf(vaddv_f32(vmul_f32(v6, v6)));
  }
  while (v1 != v3);
  Swift::tuple_index_Int_value_Float_optional v12 = min(_:)(v11);
  indedouble x = v12.value.index;
  uint64_t v9 = *(void *)&v12.is_nil;
  uint64_t result = swift_release();
  if ((v9 & 0x100000000) == 0)
  {
    if (index < v1) {
      return *(void *)(v4 + 8 * index);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

Swift::tuple_index1_Int_index2_Int_smallestDistance_Float __swiftcall closestPointsBetween(_:_:)(Swift::OpaquePointer a1, Swift::OpaquePointer a2)
{
  uint64_t v2 = *((void *)a1._rawValue + 2);
  if (v2)
  {
    Swift::Int v5 = 0;
    Swift::Int v6 = 0;
    Swift::Int v7 = 0;
    uint64_t v8 = *((void *)a2._rawValue + 2);
    uint64_t v9 = (char *)a1._rawValue + 32;
    char v10 = (char *)a2._rawValue + 32;
    float v11 = 3.4028e38;
    do
    {
      if (v8)
      {
        Swift::Int v12 = 0;
        do
        {
          float32x4_t v13 = vsubq_f32(*(float32x4_t *)&v9[16 * v7], *(float32x4_t *)&v10[16 * v12]);
          float32x4_t v14 = vmulq_f32(v13, v13);
          float v15 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1))).f32[0]);
          if (v15 < v11) {
            Swift::Int v5 = v12;
          }
          Swift::Int v16 = v12 + 1;
          if (v15 < v11)
          {
            float v11 = v15;
            Swift::Int v6 = v7;
          }
          ++v12;
        }
        while (v8 != v16);
      }
      ++v7;
    }
    while (v7 != v2);
  }
  else
  {
    Swift::Int v5 = 0;
    Swift::Int v6 = 0;
    float v11 = 3.4028e38;
  }
  result.index2 = v5;
  result.index1 = v6;
  result.smallestDistance = v11;
  return result;
}

Swift::Float __swiftcall orientationSimilarity(between:and:)(simd_float3x3 *between, simd_float3x3 *and)
{
  int32x4_t v7 = (int32x4_t)vmulq_f32((float32x4_t)between->columns[0], (float32x4_t)and->columns[0]);
  int32x4_t v6 = (int32x4_t)vmulq_f32((float32x4_t)between->columns[1], (float32x4_t)and->columns[1]);
  float32x4_t v2 = vmulq_f32((float32x4_t)between->columns[2], (float32x4_t)and->columns[2]);
  unsigned __int32 v8 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v2, 2), vaddq_f32(v2, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v2.f32, 1))).u32[0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_2686948D8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22F2265B0;
  *(int32x2_t *)(inited + 32) = vzip1_s32((int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v7, 2), vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v7.i8, 1))), (int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v6, 2), vadd_f32(*(float32x2_t *)v6.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v6.i8, 1))));
  *(_DWORD *)(inited + 40) = v8;
  Swift::tuple_index_Int_value_Float_optional v9 = min(_:)((Swift::OpaquePointer)inited);
  uint64_t v4 = *(void *)&v9.is_nil;
  swift_setDeallocating();
  Swift::Float result = *(float *)&v4;
  if ((v4 & 0x100000000) != 0) {
    return 0.0;
  }
  return result;
}

Swift::Float __swiftcall triangleArea2D(forPoints:)(Swift::OpaquePointer forPoints)
{
  unint64_t v1 = *((void *)forPoints._rawValue + 2);
  if (v1 < 2)
  {
    __break(1u);
  }
  else if (v1 != 2)
  {
    float32x2_t v2 = *(float32x2_t *)((char *)forPoints._rawValue + 32);
    float32x2_t v3 = vsub_f32(*(float32x2_t *)((char *)forPoints._rawValue + 40), v2);
    float32x2_t v4 = vmul_f32(v3, v3);
    unsigned __int32 v5 = vadd_f32(v4, (float32x2_t)vdup_lane_s32((int32x2_t)v4, 1)).u32[0];
    float32x2_t v6 = vrsqrte_f32((float32x2_t)v5);
    float32x2_t v7 = vmul_f32(v6, vrsqrts_f32((float32x2_t)v5, vmul_f32(v6, v6)));
    float32x2_t v8 = vmul_n_f32(v3, vmul_f32(v7, vrsqrts_f32((float32x2_t)v5, vmul_f32(v7, v7))).f32[0]);
    float32x2_t v9 = *(float32x2_t *)((char *)forPoints._rawValue + 48);
    float32x2_t v10 = vmul_f32(vsub_f32(v9, v2), v8);
    float32x2_t v11 = vsub_f32(vadd_f32(v2, vmul_n_f32(v8, vadd_f32(v10, (float32x2_t)vdup_lane_s32((int32x2_t)v10, 1)).f32[0])), v9);
    return (float)(sqrtf(vaddv_f32(v4)) * sqrtf(vaddv_f32(vmul_f32(v11, v11)))) * 0.5;
  }
  __break(1u);
  return result;
}

Swift::Float __swiftcall rectangleArea2D(forPoints:)(Swift::OpaquePointer forPoints)
{
  float32x2_t v4 = sub_22F196690((uint64_t)forPoints._rawValue, v1, v2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_268694D80);
  uint64_t inited = swift_initStackObject();
  LODWORD(result) = 3;
  *(_OWORD *)(inited + 16) = xmmword_22F2265B0;
  unint64_t v7 = *((void *)forPoints._rawValue + 2);
  if (!v7)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v8 = *((void *)forPoints._rawValue + 4);
  *(void *)(inited + 32) = v8;
  if (v7 == 1)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v9 = *((void *)forPoints._rawValue + 5);
  *(void *)(inited + 40) = v9;
  *(float32x2_t *)(inited + 48) = v4;
  float v10 = triangleArea2D(forPoints:)((Swift::OpaquePointer)inited);
  swift_setDeallocating();
  uint64_t v11 = swift_initStackObject();
  LODWORD(result) = 3;
  *(_OWORD *)(v11 + 16) = xmmword_22F2265B0;
  *(void *)(v11 + 32) = v9;
  if (v7 < 3)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v12 = *((void *)forPoints._rawValue + 6);
  *(void *)(v11 + 40) = v12;
  *(float32x2_t *)(v11 + 48) = v4;
  float v13 = triangleArea2D(forPoints:)((Swift::OpaquePointer)v11);
  swift_setDeallocating();
  uint64_t v14 = swift_initStackObject();
  LODWORD(result) = 3;
  *(_OWORD *)(v14 + 16) = xmmword_22F2265B0;
  *(void *)(v14 + 32) = v12;
  if (v7 != 3)
  {
    float v15 = v10 + v13;
    uint64_t v16 = *((void *)forPoints._rawValue + 7);
    *(void *)(v14 + 40) = v16;
    *(float32x2_t *)(v14 + 48) = v4;
    float v17 = triangleArea2D(forPoints:)((Swift::OpaquePointer)v14);
    swift_setDeallocating();
    uint64_t v18 = swift_initStackObject();
    *(_OWORD *)(v18 + 16) = xmmword_22F2265B0;
    *(void *)(v18 + 32) = v16;
    *(void *)(v18 + 40) = v8;
    *(float32x2_t *)(v18 + 48) = v4;
    float v19 = triangleArea2D(forPoints:)((Swift::OpaquePointer)v18);
    swift_setDeallocating();
    return (float)(v15 + v17) + v19;
  }
LABEL_9:
  __break(1u);
  return result;
}

double mix(_:_:_:)(double a1, double a2, double a3)
{
  return (a2 - a1) * a3 + a1;
}

double mix(_:_:_:)(double a1, double a2, double a3, double a4, double a5)
{
  float v5 = a5;
  return (a3 - a1) * v5 + a1;
}

id mix(_:_:_:)(double a1)
{
  double v2 = UIColor.rgba.getter();
  double v4 = v3;
  double v6 = v5;
  double v8 = v7;
  double v9 = v2 + (UIColor.rgba.getter() - v2) * a1;
  double v11 = v4 + (v10 - v4) * a1;
  double v13 = v6 + (v12 - v6) * a1;
  double v15 = v8 + (v14 - v8) * a1;
  id v16 = objc_allocWithZone(MEMORY[0x263F825C8]);
  return objc_msgSend(v16, sel_initWithDisplayP3Red_green_blue_alpha_, v9, v11, v13, v15);
}

Swift::Double __swiftcall spring(tension:friction:velocity:elapsed:)(Swift::Double tension, Swift::Double friction, Swift::Double velocity, Swift::Double elapsed)
{
  double v5 = sqrt(tension);
  double v6 = friction / (v5 + v5);
  if (v6 >= 1.0)
  {
    if (v6 != 1.0)
    {
      sub_22F224538();
      __break(1u);
      return result;
    }
    double v11 = (v5 * velocity * elapsed + 1.0) * pow(2.71828183, -(v5 * elapsed));
  }
  else
  {
    double v7 = v5 * sqrt(1.0 - v6 * v6);
    double v8 = (v5 * v6 + velocity) / v7;
    double v9 = pow(2.71828183, -(v6 * v5) * elapsed);
    __double2 v10 = __sincos_stret(v7 * elapsed);
    double v11 = v9 * (v10.__cosval + v8 * v10.__sinval);
  }
  return 1.0 - v11;
}

void simd_slerp(float32x4_t a1, float32x4_t a2, float a3)
{
  float32x4_t v3 = vmulq_f32(a1, a2);
  float32x4_t v4 = (float32x4_t)vextq_s8((int8x16_t)v3, (int8x16_t)v3, 8uLL);
  *(float32x2_t *)v3.f32 = vadd_f32(*(float32x2_t *)v3.f32, *(float32x2_t *)v4.f32);
  v3.f32[0] = vaddv_f32(*(float32x2_t *)v3.f32);
  v4.i64[0] = 0;
  _simd_slerp_internal(a1, (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v3, v4)), 0), (int8x16_t)vnegq_f32(a2), (int8x16_t)a2), a3);
}

void _simd_slerp_internal(float32x4_t a1, float32x4_t a2, float a3)
{
  float v5 = 1.0 - a3;
  float32x4_t v6 = vsubq_f32(a1, a2);
  int8x16_t v7 = (int8x16_t)vmulq_f32(v6, v6);
  float32x4_t v8 = vaddq_f32(a1, a2);
  int8x16_t v9 = (int8x16_t)vmulq_f32(v8, v8);
  float v10 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)))));
  float v11 = v10 + v10;
  if ((float)(v10 + v10) != 0.0) {
    sinf(v11);
  }
  if ((float)(v5 * v11) != 0.0) {
    sinf(v5 * v11);
  }
  float v12 = v11 * a3;
  if (v12 != 0.0) {
    sinf(v12);
  }
}

double simd_float4x4.position.getter(double a1, double a2, double a3, double a4)
{
  return a4;
}

double simd_float4x4.forward.getter(double a1, double a2, double a3)
{
  return a3;
}

double simd_float4x4.up.getter(double a1, double a2)
{
  return a2;
}

int32x2_t simd_float4x4.arrayOf9.getter(int8x16_t a1, int8x16_t a2, __n128 a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_2686948D8);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_22F228000;
  *(int32x2_t *)(v3 + 32) = vzip1_s32(*(int32x2_t *)a1.i8, *(int32x2_t *)a2.i8);
  *(void *)(v3 + 40) = __PAIR64__(a1.u32[1], a3.n128_u32[0]);
  int32x2_t result = vzip2_s32(*(int32x2_t *)a2.i8, (int32x2_t)a3.n128_u64[0]);
  *(int32x2_t *)(v3 + 48) = result;
  *(int32x2_t *)(v3 + 56) = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(a1, a1, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(a2, a2, 8uLL));
  *(_DWORD *)(v3 + 64) = a3.n128_u32[2];
  return result;
}

int32x2_t simd_float4x4.arrayOf12.getter(int8x16_t a1, int8x16_t a2, int8x16_t a3, __n128 a4)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_2686948D8);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_22F228010;
  *(int32x2_t *)(v4 + 32) = vzip1_s32(*(int32x2_t *)a1.i8, *(int32x2_t *)a2.i8);
  *(_DWORD *)(v4 + 40) = a3.i32[0];
  *(void *)(v4 + 44) = __PAIR64__(a1.u32[1], a4.n128_u32[0]);
  *(int32x2_t *)(v4 + 52) = vzip2_s32(*(int32x2_t *)a2.i8, *(int32x2_t *)a3.i8);
  *(int8x8_t *)(v4 + 60) = vext_s8((int8x8_t)a4.n128_u64[0], (int8x8_t)*(_OWORD *)&vextq_s8(a1, a1, 8uLL), 4uLL);
  int32x2_t result = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(a2, a2, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(a3, a3, 8uLL));
  *(int32x2_t *)(v4 + 68) = result;
  *(_DWORD *)(v4 + 76) = a4.n128_u32[2];
  return result;
}

double static simd_float4x4.makeRotation(_:_:_:_:)(float a1, float a2, float a3, float a4)
{
  GLKMatrix4MakeRotation((uint64_t)v5, a1, a2, a3, a4);
  return v5[0];
}

__n128 simd_float4x4.init(position:)()
{
  return *(__n128 *)MEMORY[0x263EF89A8];
}

float32x2_t simd_float4x4.apply(to:)(float32x4_t a1, float32x2_t a2, float32x2_t a3, float32x2_t a4, float32x2_t a5)
{
  return vadd_f32(a5, vadd_f32(vadd_f32(vmul_n_f32(a2, a1.f32[0]), vmul_lane_f32(a3, *(float32x2_t *)a1.f32, 1)), vmul_laneq_f32(a4, a1, 2)));
}

double simd_float4x4.translated(to:)(double a1, double a2)
{
  return a2;
}

void __swiftcall simd_float4x4.getCATransform3D()(CATransform3D *__return_ptr retstr)
{
  *(float64x2_t *)&retstr->m11 = vcvtq_f64_f32(*(float32x2_t *)v1.f32);
  *(float64x2_t *)&retstr->m13 = vcvt_hight_f64_f32(v1);
  *(float64x2_t *)&retstr->m21 = vcvtq_f64_f32(*(float32x2_t *)v2.f32);
  *(float64x2_t *)&retstr->m23 = vcvt_hight_f64_f32(v2);
  *(float64x2_t *)&retstr->m31 = vcvtq_f64_f32(*(float32x2_t *)v3.f32);
  *(float64x2_t *)&retstr->m33 = vcvt_hight_f64_f32(v3);
  *(float64x2_t *)&retstr->m41 = vcvtq_f64_f32(*(float32x2_t *)v4.f32);
  *(float64x2_t *)&retstr->m43 = vcvt_hight_f64_f32(v4);
}

Swift::Bool __swiftcall simd_float4x4.isAlmostHorizontal(marginInDegrees:)(Swift::Float marginInDegrees)
{
  float32x4_t v6 = v1;
  if (qword_2686943D0 != -1) {
    swift_once();
  }
  float v3 = cosf(marginInDegrees * 0.017453);
  float32x4_t v4 = vmulq_f32((float32x4_t)static SIMD3<>.up, v6);
  return fabsf(v3) < fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v4, 2), vaddq_f32(v4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 1))).f32[0]);
}

double _sSo13simd_float4x4a17MeasureFoundationE4make8position17normalizedForwardABs5SIMD3VySfG_AItFZ_0(double a1, float32x4_t a2)
{
  if (qword_2686943C8 != -1)
  {
    float32x4_t v8 = a2;
    swift_once();
    a2 = v8;
  }
  float32x4_t v2 = vmulq_f32((float32x4_t)static SIMD3<>.forward, a2);
  float v3 = v2.f32[2] + vaddv_f32(*(float32x2_t *)v2.f32);
  if (v3 > 1.0) {
    return *MEMORY[0x263EF89A8];
  }
  float32x4_t v7 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a2, (int32x4_t)a2), (int8x16_t)a2, 0xCuLL), vnegq_f32((float32x4_t)static SIMD3<>.forward)), a2, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)static SIMD3<>.forward, (int32x4_t)static SIMD3<>.forward), (int8x16_t)static SIMD3<>.forward, 0xCuLL));
  float v5 = acosf(v3);
  GLKMatrix4MakeRotation((uint64_t)&v9, v5, v7.f32[2], v7.f32[0], v7.f32[1]);
  return v9;
}

float GLKMatrix4MakeRotation@<S0>(uint64_t a1@<X8>, float a2@<S0>, float a3@<S1>, float a4@<S2>, float a5@<S3>)
{
  float v6 = 1.0 / sqrtf((float)((float)(a4 * a4) + (float)(a3 * a3)) + (float)(a5 * a5));
  float v7 = v6 * a3;
  float v8 = v6 * a4;
  float v9 = v6 * a5;
  __float2 v10 = __sincosf_stret(a2);
  float v11 = (float)(1.0 - v10.__cosval) * v7;
  *(float *)a1 = v10.__cosval + (float)(v11 * v7);
  *(float *)(a1 + 4) = (float)(v10.__sinval * v9) + (float)(v11 * v8);
  *(float *)(a1 + 8) = -(float)((float)(v10.__sinval * v8) - (float)(v11 * v9));
  *(_DWORD *)(a1 + 12) = 0;
  float v12 = (float)(1.0 - v10.__cosval) * v8;
  *(float *)(a1 + 16) = -(float)((float)(v10.__sinval * v9) - (float)(v11 * v8));
  *(float *)(a1 + 20) = v10.__cosval + (float)(v12 * v8);
  *(float *)(a1 + 24) = (float)(v10.__sinval * v7) + (float)(v12 * v9);
  *(_DWORD *)(a1 + 28) = 0;
  *(float *)(a1 + 32) = (float)(v10.__sinval * v8) + (float)(v11 * v9);
  *(float *)(a1 + 36) = -(float)((float)(v10.__sinval * v7) - (float)(v12 * v9));
  float result = v10.__cosval + (float)((float)((float)(1.0 - v10.__cosval) * v9) * v9);
  *(float *)(a1 + 40) = result;
  *(void *)(a1 + 52) = 0;
  *(void *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 60) = 1065353216;
  return result;
}

uint64_t MeanShiftPointFilter.minInliners.getter()
{
  return 3;
}

float MeanShiftPointFilter.errorPerMeterSquared.getter()
{
  return 0.0001;
}

uint64_t MeanShiftPointFilter.weightsEnabled.getter()
{
  return 1;
}

uint64_t MeanShiftPointFilter.matlabDebugEnabled.getter()
{
  return 0;
}

uint64_t MeanShiftPointFilter.filter(candidates:iterations:errorThreshold:)@<X0>(float32x4_t *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  sub_22F1B1ED0(a1, (uint64_t)v5, a3);
  return sub_22F1899D0((uint64_t)v5, a2, &qword_268695280);
}

uint64_t MeanShiftPointFilter.deinit()
{
  return v0;
}

uint64_t MeanShiftPointFilter.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

float32x2_t sub_22F1B1D68(float32x4_t *a1, float32x4_t a2, float a3)
{
  if (qword_2686943C0 != -1) {
    swift_once();
  }
  long long v22 = static SIMD3<>.zero;
  uint64_t v5 = a1[1].i64[0];
  if (v5)
  {
    swift_bridgeObjectRetain();
    float v7 = a1 + 12;
    *(void *)&long long v8 = 0;
    do
    {
      float32x4_t v10 = v7[-10];
      unsigned __int32 v11 = vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL).u32[0];
      if (a3 < 0.0
        || (float32x4_t v12 = vsubq_f32(a2, v10),
            float32x4_t v13 = vmulq_f32(v12, v12),
            (float)(v13.f32[2] + vaddv_f32(*(float32x2_t *)v13.f32)) <= a3))
      {
        LODWORD(v6) = v7->i32[0];
        long long v19 = v6;
        long long v20 = v8;
        float32x4_t v18 = v7[-10];
        v10.i32[0] = v11;
        uint64_t v17 = v10.i64[0];
        swift_retain();
        swift_release();
        long long v6 = v19;
        *(float32x2_t *)&long long v9 = vadd_f32(*(float32x2_t *)&v22, vmul_n_f32((float32x2_t)__PAIR64__(HIDWORD(v17), v18.u32[0]), *(float *)&v19));
        *((float *)&v9 + 2) = *((float *)&v22 + 2) + (float)(*(float *)&v19 * *(float *)&v17);
        HIDWORD(v9) = 0;
        long long v8 = v20;
        *(float *)&long long v8 = *(float *)&v20 + *(float *)&v19;
        long long v22 = v9;
      }
      v7 += 11;
      --v5;
    }
    while (v5);
    int32x2_t v21 = (int32x2_t)v8;
    swift_bridgeObjectRelease();
    int32x2_t v14 = v21;
  }
  else
  {
    int32x2_t v14 = 0;
  }
  return vdiv_f32(*(float32x2_t *)&v22, (float32x2_t)vdup_lane_s32(v14, 0));
}

void sub_22F1B1ED0(float32x4_t *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  if (qword_2686943C0 != -1) {
    swift_once();
  }
  *(float32x2_t *)v6.f32 = sub_22F1B1D68(a1, (float32x4_t)static SIMD3<>.zero, -1.0);
  uint64_t v7 = a1[1].i64[0];
  if (!v7)
  {
    __break(1u);
    return;
  }
  uint64_t v71 = a2;
  float32x4_t v70 = a1[6];
  uint64_t v8 = a1[8].i64[0];
  float32x4_t v83 = v6;
  swift_retain();
  uint64_t v9 = *(void *)(v8 + 128);
  swift_retain();
  swift_release();
  id v10 = *(id *)(v9 + 24);
  swift_release();
  objc_msgSend(v10, sel_transform);
  float32x4_t v80 = v11;

  float32x4_t v12 = v83;
  float32x4_t v13 = vsubq_f32(v80, v83);
  float32x4_t v14 = vmulq_f32(v13, v13);
  LODWORD(v15) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1))).u32[0];
  float v16 = 0.0;
  float v17 = INFINITY;
  uint64_t v18 = 46;
  uint64_t v19 = v7;
  do
  {
    float v20 = a1->f32[v18];
    if (v20 < v17) {
      float v17 = a1->f32[v18];
    }
    if (v16 <= v20) {
      float v16 = a1->f32[v18];
    }
    v18 += 44;
    --v19;
  }
  while (v19);
  float v21 = (float)((float)((float)((float)(v16 - v17) * 0.5) * (float)((float)(v16 - v17) * 0.5)) * a3) * a3;
  if (v21 > (float)(v15 * 0.0001)) {
    float v22 = v21;
  }
  else {
    float v22 = v15 * 0.0001;
  }
  do
  {
    float32x4_t v84 = v12;
    *(float32x2_t *)v12.f32 = sub_22F1B1D68(a1, v12, v22);
    float32x4_t v23 = vsubq_f32(v84, v12);
    float32x4_t v24 = vmulq_f32(v23, v23);
  }
  while ((float)(v24.f32[2] + vaddv_f32(*(float32x2_t *)v24.f32)) > 0.0);
  sub_22F1B2524((uint64_t)v124);
  swift_bridgeObjectRetain();
  sub_22F1899D0((uint64_t)v124, (uint64_t)v109, &qword_268695288);
  uint64_t v25 = 0;
  uint64_t v26 = v7 - 1;
  float32x2_t v27 = (void *)MEMORY[0x263F8EE78];
  for (float i = INFINITY; ; float i = v32)
  {
    unint64_t v29 = &a1[v25];
    float32x4_t v30 = vsubq_f32(v84, a1[v25 + 2]);
    float32x4_t v31 = vmulq_f32(v30, v30);
    float v32 = v31.f32[2] + vaddv_f32(*(float32x2_t *)v31.f32);
    if (v32 >= v22) {
      break;
    }
    uint64_t v34 = v29[3].i64[0];
    uint64_t v33 = v29[3].i64[1];
    __int8 v35 = v29[4].i8[0];
    float32x4_t v78 = v29[5];
    float32x4_t v81 = a1[v25 + 2];
    float32x4_t v74 = v29[7];
    float32x4_t v76 = v29[6];
    uint64_t v36 = v29[8].i64[0];
    float32x4_t v72 = v29[10];
    float32x4_t v73 = v29[9];
    uint64_t v37 = v29[11].i64[0];
    __int32 v38 = v29[11].i32[2];
    __int32 v39 = v29[11].i32[3];
    __int32 v40 = v29[12].i32[0];
    swift_retain_n();
    swift_retain_n();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      float32x2_t v27 = sub_22F19B834(0, v27[2] + 1, 1, v27);
    }
    unint64_t v42 = v27[2];
    unint64_t v41 = v27[3];
    float32x2_t v43 = v27;
    float32x4_t v45 = v78;
    float32x4_t v44 = v81;
    float32x4_t v47 = v74;
    float32x4_t v46 = v76;
    float32x4_t v49 = v72;
    float32x4_t v48 = v73;
    if (v42 >= v41 >> 1)
    {
      float32x4_t v51 = sub_22F19B834((void *)(v41 > 1), v42 + 1, 1, v27);
      float32x4_t v49 = v72;
      float32x4_t v48 = v73;
      float32x4_t v47 = v74;
      float32x4_t v46 = v76;
      float32x4_t v45 = v78;
      float32x4_t v44 = v81;
      float32x2_t v43 = v51;
    }
    v43[2] = v42 + 1;
    float32x2_t v27 = v43;
    uint64_t v50 = (float32x4_t *)&v43[22 * v42];
    v50[2] = v44;
    v50[3].i64[0] = v34;
    v50[3].i64[1] = v33;
    v50[4].i8[0] = v35;
    v50[5] = v45;
    v50[6] = v46;
    v50[7] = v47;
    v50[8].i64[0] = v36;
    v50[9] = v48;
    v50[10] = v49;
    v50[11].i64[0] = v37;
    v50[11].i32[2] = v38;
    v50[11].i32[3] = v39;
    v50[12].i32[0] = v40;
    if (v32 >= i)
    {
      swift_release();
      swift_release();
      break;
    }
    sub_22F1B25C8((uint64_t)v109, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))sub_22F1B263C);
    float32x4_t v110 = v81;
    uint64_t v111 = v34;
    uint64_t v112 = v33;
    char v113 = v35;
    float32x4_t v114 = v78;
    float32x4_t v115 = v76;
    float32x4_t v116 = v74;
    uint64_t v117 = v36;
    float32x4_t v118 = v73;
    float32x4_t v119 = v72;
    uint64_t v120 = v37;
    int v121 = v38;
    int v122 = v39;
    int v123 = v40;
    nullsub_1(&v110);
    sub_22F1899D0((uint64_t)&v110, (uint64_t)v108, &qword_268695288);
    if (!v26) {
      goto LABEL_27;
    }
LABEL_26:
    sub_22F1899D0((uint64_t)v108, (uint64_t)v109, &qword_268695288);
    --v26;
    v25 += 11;
  }
  sub_22F1899D0((uint64_t)v109, (uint64_t)v108, &qword_268695288);
  float v32 = i;
  if (v26) {
    goto LABEL_26;
  }
LABEL_27:
  swift_bridgeObjectRelease();
  sub_22F1899D0((uint64_t)v108, (uint64_t)v100, &qword_268695288);
  if (sub_22F1B2544((uint64_t)v100) == 1)
  {
    swift_bridgeObjectRelease();
    sub_22F1B255C(&v85);
  }
  else
  {
    uint64_t v52 = v101;
    uint64_t v53 = v102;
    char v54 = v103;
    uint64_t v55 = v104;
    float32x4_t v82 = v105;
    uint64_t v56 = v106;
    int v57 = v107;
    swift_retain();
    swift_retain();
    sub_22F1B25C8((uint64_t)v108, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))sub_22F1B257C);
    swift_release();
    swift_release();
    float32x4_t v58 = vsubq_f32(v84, v70);
    v58.i32[3] = 0;
    int32x4_t v59 = (int32x4_t)vmulq_f32(v58, v58);
    v59.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v59, 2), vadd_f32(*(float32x2_t *)v59.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v59.i8, 1))).u32[0];
    float32x2_t v60 = vrsqrte_f32((float32x2_t)v59.u32[0]);
    float32x2_t v61 = vmul_f32(v60, vrsqrts_f32((float32x2_t)v59.u32[0], vmul_f32(v60, v60)));
    float32x4_t v75 = vmulq_n_f32(v58, vmul_f32(v61, vrsqrts_f32((float32x2_t)v59.u32[0], vmul_f32(v61, v61))).f32[0]);
    float32x4_t v62 = vsubq_f32(v70, v84);
    float32x4_t v63 = vmulq_f32(v62, v62);
    float v64 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v63, 2), vaddq_f32(v63, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v63.f32, 1))).f32[0]);
    float32x4_t v65 = vsubq_f32(v84, v82);
    v65.i32[3] = 0;
    int32x4_t v66 = (int32x4_t)vmulq_f32(v65, v65);
    v66.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v66, 2), vadd_f32(*(float32x2_t *)v66.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v66.i8, 1))).u32[0];
    float32x2_t v67 = vrsqrte_f32((float32x2_t)v66.u32[0]);
    float32x2_t v68 = vmul_f32(v67, vrsqrts_f32((float32x2_t)v66.u32[0], vmul_f32(v67, v67)));
    float32x4_t v77 = vmulq_n_f32(v65, vmul_f32(v68, vrsqrts_f32((float32x2_t)v66.u32[0], vmul_f32(v68, v68))).f32[0]);
    float32x4_t v69 = vmulq_f32(v75, v77);
    unsigned __int32 v79 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v69, 2), vaddq_f32(v69, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v69.f32, 1))).u32[0];
    sub_22F1B25C8((uint64_t)v108, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))sub_22F1B263C);
    float32x4_t v85 = v84;
    uint64_t v86 = v52;
    uint64_t v87 = v53;
    char v88 = v54;
    float32x4_t v89 = v84;
    float32x4_t v90 = v70;
    float32x4_t v91 = v75;
    uint64_t v92 = v55;
    float32x4_t v93 = v82;
    float32x4_t v94 = v77;
    uint64_t v95 = v56;
    float v96 = v64;
    unsigned __int32 v97 = v79;
    int v98 = v57;
    float v99 = v27;
    nullsub_1(&v85);
  }
  sub_22F1899D0((uint64_t)&v85, (uint64_t)&v110, &qword_268695280);
  sub_22F1899D0((uint64_t)&v110, v71, &qword_268695280);
}

uint64_t type metadata accessor for MeanShiftPointFilter()
{
  return self;
}

double sub_22F1B2524(uint64_t a1)
{
  *(_DWORD *)(a1 + 160) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t sub_22F1B2544(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 96);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

double sub_22F1B255C(_OWORD *a1)
{
  double result = 0.0;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t sub_22F1B257C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t result = a13;
  if (a13)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_22F1B25C8(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))
{
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(_DWORD *)(a1 + 160));
  return a1;
}

uint64_t sub_22F1B263C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t result = a13;
  if (a13)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

id VNCoreMLRequest.features(for:)(void *a1)
{
  v12[1] = *(id *)MEMORY[0x263EF8340];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_268695250);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_22F228080;
  *(void *)(v3 + 32) = v1;
  sub_22F223CD8();
  sub_22F1A321C(0, &qword_268695290);
  id v4 = v1;
  uint64_t v5 = (void *)sub_22F223CA8();
  swift_bridgeObjectRelease();
  v12[0] = 0;
  unsigned int v6 = objc_msgSend(a1, sel_performRequests_error_, v5, v12);

  if (!v6)
  {
    id v4 = v12[0];
    sub_22F2236F8();

    goto LABEL_6;
  }
  id v7 = v12[0];
  id v8 = objc_msgSend(v4, sel_results);
  if (!v8
    || (uint64_t v9 = v8,
        sub_22F1A321C(0, &qword_268695298),
        unint64_t v10 = sub_22F223CB8(),
        v9,
        id v4 = (id)sub_22F1B2844(v10),
        swift_bridgeObjectRelease(),
        !v4))
  {
    objc_msgSend(objc_allocWithZone(MEMORY[0x263F087E8]), sel_init);
LABEL_6:
    swift_willThrow();
  }
  return v4;
}

uint64_t sub_22F1B2844(unint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v12 = MEMORY[0x263F8EE78];
  if (a1 >> 62) {
    goto LABEL_18;
  }
  sub_22F224498();
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v2)
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; ; ++i)
      {
        MEMORY[0x230FB2E90](i, v1);
        uint64_t v4 = i + 1;
        if (__OFADD__(i, 1)) {
          break;
        }
        self;
        if (!swift_dynamicCastObjCClass())
        {
          swift_unknownObjectRelease();
          goto LABEL_15;
        }
        sub_22F224468();
        sub_22F2244A8();
        sub_22F2244B8();
        sub_22F224478();
        if (v4 == v2) {
          return v12;
        }
      }
      __break(1u);
    }
    else
    {
      uint64_t v5 = 0;
      uint64_t v6 = v1 + 32;
      while (1)
      {
        uint64_t v7 = v5 + 1;
        if (__OFADD__(v5, 1)) {
          break;
        }
        id v8 = *(void **)(v6 + 8 * v5);
        self;
        uint64_t v9 = swift_dynamicCastObjCClass();
        if (!v9)
        {
LABEL_15:
          swift_release();
          return 0;
        }
        uint64_t v1 = v9;
        id v10 = v8;
        sub_22F224468();
        sub_22F2244A8();
        sub_22F2244B8();
        sub_22F224478();
        ++v5;
        if (v7 == v2) {
          return v12;
        }
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    sub_22F2245C8();
    swift_bridgeObjectRelease();
    sub_22F224498();
    swift_bridgeObjectRetain();
    uint64_t v2 = sub_22F2245C8();
    swift_bridgeObjectRelease();
  }
  return v12;
}

uint64_t static MeasureCamera.unprojectPoint(_:planeTransform:viewProjectionInv:viewportSize:)(double a1, double a2, float32x4_t a3, double a4, float32x4_t a5, float32x4_t a6, float32x4_t a7, float32x4_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, float32x4_t a17, double a18)
{
  return sub_22F1B32A4(a1, a3, a5, a6, a7, a8, a17, a18);
}

uint64_t static MeasureCamera.getHitRay(screenPoint:viewProjectionInv:viewportSize:)@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, float32x4_t a4@<Q2>, float32x4_t a5@<Q3>, float32x4_t a6@<Q4>, float32x4_t a7@<Q5>, double a8@<D6>)
{
  sub_22F1B3440(v10, a2, a3, a4, a5, a6, a7, a8);
  return sub_22F1B3588((uint64_t)v10, a1);
}

double static MeasureCamera.viewSpacePoint(fromWorldSpace:view:)(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5)
{
  *(void *)&double result = vaddq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a2, a1.f32[0]), a3, *(float32x2_t *)a1.f32, 1), a4, a1, 2), a5).u64[0];
  return result;
}

float32x2_t static MeasureCamera.worldSpacePoint(fromViewSpace:inverseView:)(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5)
{
  int32x4_t v5 = (int32x4_t)vaddq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a2, a1.f32[0]), a3, *(float32x2_t *)a1.f32, 1), a4, a1, 2), a5);
  return vdiv_f32(*(float32x2_t *)v5.i8, (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v5, 3));
}

CGFloat static MeasureCamera.getLayerTransform(for:view:)@<D0>(_OWORD *a1@<X8>)
{
  __asm { FMOV            V22.4S, #-1.0 }
  simd_float4x4.getCATransform3D()(&v12);
  long long v7 = *(_OWORD *)&v12.m33;
  a1[4] = *(_OWORD *)&v12.m31;
  a1[5] = v7;
  long long v8 = *(_OWORD *)&v12.m43;
  a1[6] = *(_OWORD *)&v12.m41;
  a1[7] = v8;
  long long v9 = *(_OWORD *)&v12.m13;
  *a1 = *(_OWORD *)&v12.m11;
  a1[1] = v9;
  CGFloat result = v12.m21;
  long long v11 = *(_OWORD *)&v12.m23;
  a1[2] = *(_OWORD *)&v12.m21;
  a1[3] = v11;
  return result;
}

BOOL static MeasureCamera.isOnScreen(screenPoint:viewRect:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  v10.origin.double x = a3;
  v10.origin.double y = a4;
  v10.size.Swift::Int width = a5;
  v10.size.Swift::Int height = a6;
  v9.double x = a1;
  v9.double y = a2;
  return CGRectContainsPoint(v10, v9);
}

BOOL static MeasureCamera.planeTooClose(for:transform:)(uint64_t a1, double a2, double a3, double a4, float32x4_t a5)
{
  int32x4_t v5 = (uint64_t *)(a1 + OBJC_IVAR____TtC17MeasureFoundation10WorldPoint__anchor);
  swift_beginAccess();
  uint64_t v6 = *v5;
  long long v7 = *(os_unfair_lock_s **)(*v5 + 24);
  swift_retain();
  os_unfair_lock_lock(v7);
  swift_beginAccess();
  uint64_t v8 = *(void *)(v6 + 16);
  swift_retain();
  os_unfair_lock_unlock(v7);
  swift_release();
  CGPoint v9 = (uint64_t *)(v8 + OBJC_IVAR____TtC17MeasureFoundation11WorldAnchor__plane);
  swift_beginAccess();
  uint64_t v10 = *v9;
  long long v11 = *(os_unfair_lock_s **)(v10 + 24);
  swift_retain();
  os_unfair_lock_lock(v11);
  swift_beginAccess();
  uint64_t v12 = *(void *)(v10 + 16);
  swift_retain();
  os_unfair_lock_unlock(v11);
  swift_release();
  swift_release();
  if (!v12) {
    return 0;
  }
  uint64_t v13 = qword_2686944A0;
  swift_retain();
  if (v13 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v14 = *(void *)(v12 + 16);
  float v15 = *(os_unfair_lock_s **)(v14 + 24);
  swift_retain();
  os_unfair_lock_lock(v15);
  swift_beginAccess();
  id v16 = *(id *)(v14 + 16);
  os_unfair_lock_unlock(v15);
  swift_release();
  int v17 = sub_22F1E0634(v16);
  swift_release();

  if (v17 == 1)
  {
    swift_release();
    return 0;
  }
  uint64_t v19 = *v5;
  float v20 = *(os_unfair_lock_s **)(v19 + 24);
  swift_retain();
  os_unfair_lock_lock(v20);
  swift_beginAccess();
  uint64_t v21 = *(void *)(v19 + 16);
  swift_retain();
  os_unfair_lock_unlock(v20);
  swift_release();
  float32x4_t v24 = *(float32x4_t *)(v21 + OBJC_IVAR____TtC17MeasureFoundation11WorldAnchor_lastTransform + 48);
  swift_release();
  swift_release();
  float32x4_t v22 = vsubq_f32(v24, a5);
  float32x4_t v23 = vmulq_f32(v22, v22);
  return sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), vaddq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1))).f32[0]) < 0.1;
}

BOOL static MeasureCamera.planeTooFar(for:transform:)(uint64_t a1, double a2, double a3, double a4, float32x4_t a5)
{
  int32x4_t v5 = (uint64_t *)(a1 + OBJC_IVAR____TtC17MeasureFoundation10WorldPoint__anchor);
  swift_beginAccess();
  uint64_t v6 = *v5;
  long long v7 = *(os_unfair_lock_s **)(*v5 + 24);
  swift_retain();
  os_unfair_lock_lock(v7);
  swift_beginAccess();
  uint64_t v8 = *(void *)(v6 + 16);
  swift_retain();
  os_unfair_lock_unlock(v7);
  swift_release();
  CGPoint v9 = (uint64_t *)(v8 + OBJC_IVAR____TtC17MeasureFoundation11WorldAnchor__plane);
  swift_beginAccess();
  uint64_t v10 = *v9;
  long long v11 = *(os_unfair_lock_s **)(v10 + 24);
  swift_retain();
  os_unfair_lock_lock(v11);
  swift_beginAccess();
  uint64_t v12 = *(void *)(v10 + 16);
  swift_retain();
  os_unfair_lock_unlock(v11);
  swift_release();
  swift_release();
  if (!v12) {
    return 0;
  }
  if (qword_2686944A0 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v13 = *(void *)(v12 + 16);
  uint64_t v14 = *(os_unfair_lock_s **)(v13 + 24);
  swift_retain();
  os_unfair_lock_lock(v14);
  swift_beginAccess();
  id v15 = *(id *)(v13 + 16);
  os_unfair_lock_unlock(v14);
  swift_release();
  int v16 = sub_22F1E0634(v15);

  if (v16 == 1)
  {
    swift_release();
    return 0;
  }
  uint64_t v18 = *v5;
  uint64_t v19 = *(os_unfair_lock_s **)(v18 + 24);
  swift_retain();
  os_unfair_lock_lock(v19);
  swift_beginAccess();
  uint64_t v20 = *(void *)(v18 + 16);
  swift_retain();
  os_unfair_lock_unlock(v19);
  swift_release();
  float32x4_t v25 = *(float32x4_t *)(v20 + OBJC_IVAR____TtC17MeasureFoundation11WorldAnchor_lastTransform + 48);
  swift_release();
  float32x4_t v21 = vsubq_f32(v25, a5);
  float32x4_t v22 = vmulq_f32(v21, v21);
  v22.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1))).f32[0]);
  float v23 = v22.f32[0] * v22.f32[0];
  if (qword_268694450 != -1) {
    swift_once();
  }
  float v24 = *(float *)&static PlaneSelector.firstPointMaxDistanceSquared;
  swift_release();
  return v24 < v23;
}

uint64_t MeasureCamera.deinit()
{
  return v0;
}

uint64_t MeasureCamera.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

float32x2_t _s17MeasureFoundation0A6CameraC12projectPoint_14viewProjection12viewportSizes5SIMD3VySfGAI_So13simd_float4x4as5SIMD2VySfGtFZ_0(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x2_t a6)
{
  int32x4_t v6 = (int32x4_t)vaddq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a2, a1.f32[0]), a3, *(float32x2_t *)a1.f32, 1), a4, a1, 2), a5);
  if (fabsf(*(float *)&v6.i32[3]) >= 0.00000011921)
  {
    float32x2_t v8 = vdiv_f32(*(float32x2_t *)v6.i8, (float32x2_t)vdup_laneq_s32(v6, 3));
    __asm { FMOV            V3.2S, #1.0 }
    v14.i32[0] = vadd_f32(v8, _D3).u32[0];
    v14.i32[1] = vsub_f32(_D3, v8).i32[1];
    return vmul_f32(vmul_f32(v14, a6), (float32x2_t)0x3F0000003F000000);
  }
  else
  {
    return (float32x2_t)0x7FC000007FC00000;
  }
}

float32x2_t _s17MeasureFoundation0A6CameraC14unprojectPoint_17viewProjectionInv12viewportSizes5SIMD3VySfGAI_So13simd_float4x4as5SIMD2VySfGtFZ_0(__n128 a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, double a6)
{
  a1.n128_f32[0] = (float)((float)(a1.n128_f32[0] + a1.n128_f32[0]) / *(float *)&a6) + -1.0;
  *(float *)&a6 = (float)((float)(a1.n128_f32[1] + a1.n128_f32[1]) / *((float *)&a6 + 1)) + -1.0;
  float32x4_t v6 = vaddq_f32(vmlaq_n_f32(vmlsq_lane_f32(vmulq_n_f32(a2, a1.n128_f32[0]), a3, *(float32x2_t *)&a6, 0), a4, (float)(a1.n128_f32[2] + a1.n128_f32[2]) + -1.0), a5);
  if (fabsf(v6.f32[3]) >= 0.00000011921) {
    return vmul_n_f32(*(float32x2_t *)v6.f32, 1.0 / v6.f32[3]);
  }
  else {
    return (float32x2_t)0x7FC000007FC00000;
  }
}

uint64_t sub_22F1B32A4(double a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7, double a8)
{
  v8.f32[0] = (float)((float)(*((float *)&a1 + 1) + *((float *)&a1 + 1)) / *((float *)&a8 + 1)) + -1.0;
  float32x4_t v9 = vmlsq_lane_f32(vmulq_n_f32(a4, (float)((float)(*(float *)&a1 + *(float *)&a1) / *(float *)&a8) + -1.0), a5, v8, 0);
  float32x4_t v10 = vaddq_f32(vaddq_f32(v9, a6), a7);
  float32x4_t v11 = (float32x4_t)xmmword_22F228090;
  float32x4_t v12 = (float32x4_t)xmmword_22F228090;
  if (fabsf(v10.f32[3]) >= 0.00000011921)
  {
    *(float32x2_t *)v12.f32 = vmul_n_f32(*(float32x2_t *)v10.f32, 1.0 / v10.f32[3]);
    v12.i64[1] = COERCE_UNSIGNED_INT(vmuls_lane_f32(1.0 / v10.f32[3], v10, 2));
  }
  __asm { FMOV            V4.4S, #-1.0 }
  float32x4_t v18 = vaddq_f32(vmlaq_f32(v9, _Q4, a6), a7);
  if (fabsf(v18.f32[3]) >= 0.00000011921)
  {
    *(float32x2_t *)v11.f32 = vmul_n_f32(*(float32x2_t *)v18.f32, 1.0 / v18.f32[3]);
    v11.i64[1] = COERCE_UNSIGNED_INT(vmuls_lane_f32(1.0 / v18.f32[3], v18, 2));
  }
  float32x4_t v19 = vsubq_f32(v11, v12);
  int32x4_t v20 = (int32x4_t)vmulq_f32(v19, v19);
  v20.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v20, 2), vadd_f32(*(float32x2_t *)v20.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v20.i8, 1))).u32[0];
  float32x2_t v21 = vrsqrte_f32((float32x2_t)v20.u32[0]);
  float32x2_t v22 = vmul_f32(v21, vrsqrts_f32((float32x2_t)v20.u32[0], vmul_f32(v21, v21)));
  float32x4_t v23 = vmulq_n_f32(v19, vmul_f32(v22, vrsqrts_f32((float32x2_t)v20.u32[0], vmul_f32(v22, v22))).f32[0]);
  a2.i32[3] = 0;
  float32x4_t v24 = vmulq_f32(a2, v23);
  float32x4_t v25 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2), vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1)));
  if (fabsf(v25.f32[0]) < 0.00000011921) {
    return 0;
  }
  float32x4_t v26 = vmulq_f32(a2, vsubq_f32(a3, v12));
  float32x4_t v28 = vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1));
  float32x4_t v27 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), v28);
  v28.i32[0] = 1.0;
  v29.i64[0] = 0x8000000080000000;
  v29.i64[1] = 0x8000000080000000;
  LODWORD(v30) = vbslq_s8(v29, (int8x16_t)v28, (int8x16_t)v27).u32[0];
  if (v27.f32[0] == 0.0) {
    float v30 = 0.0;
  }
  LODWORD(v31) = vbslq_s8(v29, (int8x16_t)v28, (int8x16_t)v25).u32[0];
  if (v25.f32[0] == 0.0) {
    float v31 = 0.0;
  }
  if ((float)(v30 - v31) == 0.0) {
    return (uint64_t)vadd_f32(*(float32x2_t *)v12.f32, vmul_n_f32(*(float32x2_t *)v23.f32, vdivq_f32(v27, v25).f32[0]));
  }
  else {
    return 0;
  }
}

void sub_22F1B3440(float32x4_t *a1@<X8>, double a2@<D0>, double a3@<D1>, float32x4_t a4@<Q2>, float32x4_t a5@<Q3>, float32x4_t a6@<Q4>, float32x4_t a7@<Q5>, double a8@<D6>)
{
  float v8 = a2;
  *(float *)&a3 = a3;
  *(float *)&a3 = (float)((float)(*(float *)&a3 + *(float *)&a3) / *((float *)&a8 + 1)) + -1.0;
  float32x4_t v9 = vmlsq_lane_f32(vmulq_n_f32(a4, (float)((float)(v8 + v8) / *(float *)&a8) + -1.0), a5, *(float32x2_t *)&a3, 0);
  __asm { FMOV            V0.4S, #-1.0 }
  float32x4_t v15 = vaddq_f32(vmlaq_f32(v9, _Q0, a6), a7);
  float32x4_t v16 = (float32x4_t)xmmword_22F228090;
  float32x4_t v17 = (float32x4_t)xmmword_22F228090;
  if (fabsf(v15.f32[3]) >= 0.00000011921)
  {
    *(float32x2_t *)v17.f32 = vmul_n_f32(*(float32x2_t *)v15.f32, 1.0 / v15.f32[3]);
    v17.i64[1] = COERCE_UNSIGNED_INT(vmuls_lane_f32(1.0 / v15.f32[3], v15, 2));
  }
  float32x4_t v18 = vaddq_f32(vaddq_f32(v9, a6), a7);
  if (fabsf(v18.f32[3]) >= 0.00000011921)
  {
    *(float32x2_t *)v16.f32 = vmul_n_f32(*(float32x2_t *)v18.f32, 1.0 / v18.f32[3]);
    v16.i64[1] = COERCE_UNSIGNED_INT(vmuls_lane_f32(1.0 / v18.f32[3], v18, 2));
  }
  float32x4_t v19 = 0uLL;
  if (((~v17.i32[2] & 0x7F800000) != 0 || (v17.i32[2] & 0x7FFFFF) == 0)
    && ((float v20 = v16.f32[2], (~v16.i32[2] & 0x7F800000) != 0) || (v16.i32[2] & 0x7FFFFF) == 0))
  {
    char v21 = 0;
    float32x4_t v23 = vsubq_f32(v16, v17);
    v23.f32[2] = v20 - v17.f32[2];
    int32x4_t v24 = (int32x4_t)vmulq_f32(v23, v23);
    v24.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v24, 2), vadd_f32(*(float32x2_t *)v24.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v24.i8, 1))).u32[0];
    float32x2_t v25 = vrsqrte_f32((float32x2_t)v24.u32[0]);
    float32x2_t v26 = vmul_f32(v25, vrsqrts_f32((float32x2_t)v24.u32[0], vmul_f32(v25, v25)));
    float32x4_t v22 = vmulq_n_f32(v23, vmul_f32(v26, vrsqrts_f32((float32x2_t)v24.u32[0], vmul_f32(v26, v26))).f32[0]);
    float32x4_t v19 = v17;
  }
  else
  {
    char v21 = 1;
    float32x4_t v22 = 0uLL;
  }
  *a1 = v19;
  a1[1] = v22;
  a1[2].i8[0] = v21;
}

uint64_t sub_22F1B3588(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2686951E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for MeasureCamera()
{
  return self;
}

uint64_t MeasureObject.id.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC17MeasureFoundation13MeasureObject_id);
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t MeasureObject.state.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC17MeasureFoundation13MeasureObject__state);
  uint64_t v2 = *(os_unfair_lock_s **)(v1 + 24);
  swift_retain();
  os_unfair_lock_lock(v2);
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 16);
  os_unfair_lock_unlock(v2);
  swift_release();
  return v3;
}

uint64_t MeasureObject.state.setter(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC17MeasureFoundation13MeasureObject__state);
  uint64_t v4 = *(os_unfair_lock_s **)(v3 + 24);
  swift_retain();
  os_unfair_lock_lock(v4);
  swift_beginAccess();
  *(void *)(v3 + 16) = a1;
  os_unfair_lock_unlock(v4);
  return swift_release();
}

void (*MeasureObject.state.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC17MeasureFoundation13MeasureObject__state);
  v3[4] = v4;
  int32x4_t v5 = *(os_unfair_lock_s **)(v4 + 24);
  swift_retain();
  os_unfair_lock_lock(v5);
  swift_beginAccess();
  uint64_t v6 = *(void *)(v4 + 16);
  os_unfair_lock_unlock(v5);
  v3[3] = v6;
  return sub_22F1B37F8;
}

void sub_22F1B37F8(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 24);
  uint64_t v2 = *(void *)(*(void *)a1 + 32);
  uint64_t v4 = *(os_unfair_lock_s **)(v2 + 24);
  os_unfair_lock_lock(v4);
  *(void *)(v2 + 16) = v3;
  os_unfair_lock_unlock(v4);
  swift_release();
  free(v1);
}

void (*MeasureObject.suggest.getter())()
{
  uint64_t v1 = (void (**)())&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___suggest];
  uint64_t v2 = *(void *)&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___suggest];
  if (v2)
  {
    uint64_t v3 = *(void (**)())&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___suggest];
  }
  else
  {
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = v0;
    uint64_t v3 = sub_22F1B4A8C;
    *uint64_t v1 = sub_22F1B4A8C;
    v1[1] = (void (*)())v4;
    int32x4_t v5 = v0;
    swift_retain();
    sub_22F1B4AC8(0);
  }
  sub_22F1B4AD8(v2);
  return v3;
}

uint64_t MeasureObject.suggest.setter(uint64_t a1, uint64_t a2)
{
  return sub_22F1B452C(a1, a2, &OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___suggest, (uint64_t (*)(uint64_t, uint64_t))sub_22F1B4AC8);
}

uint64_t (*MeasureObject.suggest.modify(void (**a1)()))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = MeasureObject.suggest.getter();
  a1[1] = v3;
  return sub_22F1B396C;
}

uint64_t sub_22F1B396C(uint64_t *a1, char a2)
{
  return sub_22F1B45B4(a1, a2, &OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___suggest, (void (*)(uint64_t, uint64_t))sub_22F1B4AC8);
}

void (*MeasureObject.isConfirmable.getter())()
{
  uint64_t v1 = (void (**)())&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___isConfirmable];
  uint64_t v2 = *(void *)&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___isConfirmable];
  if (v2)
  {
    uint64_t v3 = *(void (**)())&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___isConfirmable];
  }
  else
  {
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = v0;
    uint64_t v3 = sub_22F1B4B94;
    *uint64_t v1 = sub_22F1B4B94;
    v1[1] = (void (*)())v4;
    int32x4_t v5 = v0;
    swift_retain();
    sub_22F1B4AC8(0);
  }
  sub_22F1B4AD8(v2);
  return v3;
}

uint64_t MeasureObject.isConfirmable.setter(uint64_t a1, uint64_t a2)
{
  return sub_22F1B452C(a1, a2, &OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___isConfirmable, (uint64_t (*)(uint64_t, uint64_t))sub_22F1B5B60);
}

uint64_t (*MeasureObject.isConfirmable.modify(void (**a1)()))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = MeasureObject.isConfirmable.getter();
  a1[1] = v3;
  return sub_22F1B3AA0;
}

uint64_t sub_22F1B3AA0(uint64_t *a1, char a2)
{
  return sub_22F1B45B4(a1, a2, &OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___isConfirmable, (void (*)(uint64_t, uint64_t))sub_22F1B5B60);
}

void (*MeasureObject.canHandleTouch.getter())()
{
  uint64_t v1 = (void (**)())&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___canHandleTouch];
  uint64_t v2 = *(void *)&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___canHandleTouch];
  if (v2)
  {
    uint64_t v3 = *(void (**)())&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___canHandleTouch];
  }
  else
  {
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = v0;
    uint64_t v3 = sub_22F1B4C48;
    *uint64_t v1 = sub_22F1B4C48;
    v1[1] = (void (*)())v4;
    int32x4_t v5 = v0;
    swift_retain();
    sub_22F1B4AC8(0);
  }
  sub_22F1B4AD8(v2);
  return v3;
}

uint64_t MeasureObject.canHandleTouch.setter(uint64_t a1, uint64_t a2)
{
  return sub_22F1B452C(a1, a2, &OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___canHandleTouch, (uint64_t (*)(uint64_t, uint64_t))sub_22F1B5B60);
}

uint64_t (*MeasureObject.canHandleTouch.modify(void (**a1)()))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = MeasureObject.canHandleTouch.getter();
  a1[1] = v3;
  return sub_22F1B3BD4;
}

uint64_t sub_22F1B3BD4(uint64_t *a1, char a2)
{
  return sub_22F1B45B4(a1, a2, &OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___canHandleTouch, (void (*)(uint64_t, uint64_t))sub_22F1B5B60);
}

void (*MeasureObject.confirm.getter())()
{
  uint64_t v1 = (void (**)())&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___confirm];
  uint64_t v2 = *(void *)&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___confirm];
  if (v2)
  {
    uint64_t v3 = *(void (**)())&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___confirm];
  }
  else
  {
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = v0;
    uint64_t v3 = sub_22F1B4C50;
    *uint64_t v1 = sub_22F1B4C50;
    v1[1] = (void (*)())v4;
    int32x4_t v5 = v0;
    swift_retain();
    sub_22F1B4AC8(0);
  }
  sub_22F1B4AD8(v2);
  return v3;
}

uint64_t MeasureObject.confirm.setter(uint64_t a1, uint64_t a2)
{
  return sub_22F1B452C(a1, a2, &OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___confirm, (uint64_t (*)(uint64_t, uint64_t))sub_22F1B4AC8);
}

uint64_t (*MeasureObject.confirm.modify(void (**a1)()))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = MeasureObject.confirm.getter();
  a1[1] = v3;
  return sub_22F1B3D08;
}

uint64_t sub_22F1B3D08(uint64_t *a1, char a2)
{
  return sub_22F1B45B4(a1, a2, &OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___confirm, (void (*)(uint64_t, uint64_t))sub_22F1B4AC8);
}

void (*MeasureObject.prepareToclear.getter())()
{
  uint64_t v1 = (void (**)())&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___prepareToclear];
  uint64_t v2 = *(void *)&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___prepareToclear];
  if (v2)
  {
    uint64_t v3 = *(void (**)())&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___prepareToclear];
  }
  else
  {
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = v0;
    uint64_t v3 = sub_22F1B4C8C;
    *uint64_t v1 = sub_22F1B4C8C;
    v1[1] = (void (*)())v4;
    int32x4_t v5 = v0;
    swift_retain();
    sub_22F1B4AC8(0);
  }
  sub_22F1B4AD8(v2);
  return v3;
}

uint64_t MeasureObject.prepareToclear.setter(uint64_t a1, uint64_t a2)
{
  return sub_22F1B452C(a1, a2, &OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___prepareToclear, (uint64_t (*)(uint64_t, uint64_t))sub_22F1B4AC8);
}

uint64_t (*MeasureObject.prepareToclear.modify(void (**a1)()))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = MeasureObject.prepareToclear.getter();
  a1[1] = v3;
  return sub_22F1B3E3C;
}

uint64_t sub_22F1B3E3C(uint64_t *a1, char a2)
{
  return sub_22F1B45B4(a1, a2, &OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___prepareToclear, (void (*)(uint64_t, uint64_t))sub_22F1B4AC8);
}

void (*MeasureObject.reconfirm.getter())()
{
  uint64_t v1 = (void (**)())&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___reconfirm];
  uint64_t v2 = *(void *)&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___reconfirm];
  if (v2)
  {
    uint64_t v3 = *(void (**)())&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___reconfirm];
  }
  else
  {
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = v0;
    uint64_t v3 = sub_22F1B4CC8;
    *uint64_t v1 = sub_22F1B4CC8;
    v1[1] = (void (*)())v4;
    int32x4_t v5 = v0;
    swift_retain();
    sub_22F1B4AC8(0);
  }
  sub_22F1B4AD8(v2);
  return v3;
}

uint64_t MeasureObject.reconfirm.setter(uint64_t a1, uint64_t a2)
{
  return sub_22F1B452C(a1, a2, &OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___reconfirm, (uint64_t (*)(uint64_t, uint64_t))sub_22F1B4AC8);
}

uint64_t (*MeasureObject.reconfirm.modify(void (**a1)()))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = MeasureObject.reconfirm.getter();
  a1[1] = v3;
  return sub_22F1B3F70;
}

uint64_t sub_22F1B3F70(uint64_t *a1, char a2)
{
  return sub_22F1B45B4(a1, a2, &OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___reconfirm, (void (*)(uint64_t, uint64_t))sub_22F1B4AC8);
}

void (*MeasureObject.clear.getter())()
{
  uint64_t v1 = (void (**)())&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___clear];
  uint64_t v2 = *(void *)&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___clear];
  if (v2)
  {
    uint64_t v3 = *(void (**)())&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___clear];
  }
  else
  {
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = v0;
    uint64_t v3 = sub_22F1B4DA8;
    *uint64_t v1 = sub_22F1B4DA8;
    v1[1] = (void (*)())v4;
    int32x4_t v5 = v0;
    swift_retain();
    sub_22F1B4AC8(0);
  }
  sub_22F1B4AD8(v2);
  return v3;
}

uint64_t MeasureObject.clear.setter(uint64_t a1, uint64_t a2)
{
  return sub_22F1B452C(a1, a2, &OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___clear, (uint64_t (*)(uint64_t, uint64_t))sub_22F1B4AC8);
}

uint64_t (*MeasureObject.clear.modify(void (**a1)()))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = MeasureObject.clear.getter();
  a1[1] = v3;
  return sub_22F1B40A4;
}

uint64_t sub_22F1B40A4(uint64_t *a1, char a2)
{
  return sub_22F1B45B4(a1, a2, &OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___clear, (void (*)(uint64_t, uint64_t))sub_22F1B4AC8);
}

void (*MeasureObject.percentVisible.getter())()
{
  uint64_t v1 = (void (**)())&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___percentVisible];
  uint64_t v2 = *(void *)&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___percentVisible];
  if (v2)
  {
    uint64_t v3 = *(void (**)())&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___percentVisible];
  }
  else
  {
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = v0;
    uint64_t v3 = sub_22F1B4DE4;
    *uint64_t v1 = sub_22F1B4DE4;
    v1[1] = (void (*)())v4;
    int32x4_t v5 = v0;
    swift_retain();
    sub_22F1B4AC8(0);
  }
  sub_22F1B4AD8(v2);
  return v3;
}

uint64_t MeasureObject.percentVisible.setter(uint64_t a1, uint64_t a2)
{
  return sub_22F1B452C(a1, a2, &OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___percentVisible, (uint64_t (*)(uint64_t, uint64_t))sub_22F1B5B60);
}

uint64_t (*MeasureObject.percentVisible.modify(void (**a1)()))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = MeasureObject.percentVisible.getter();
  a1[1] = v3;
  return sub_22F1B41D8;
}

uint64_t sub_22F1B41D8(uint64_t *a1, char a2)
{
  return sub_22F1B45B4(a1, a2, &OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___percentVisible, (void (*)(uint64_t, uint64_t))sub_22F1B5B60);
}

void (*MeasureObject.distanceFromReticle.getter())()
{
  uint64_t v1 = (void (**)())&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___distanceFromReticle];
  uint64_t v2 = *(void *)&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___distanceFromReticle];
  if (v2)
  {
    uint64_t v3 = *(void (**)())&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___distanceFromReticle];
  }
  else
  {
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = v0;
    uint64_t v3 = sub_22F1B4E04;
    *uint64_t v1 = sub_22F1B4E04;
    v1[1] = (void (*)())v4;
    int32x4_t v5 = v0;
    swift_retain();
    sub_22F1B4AC8(0);
  }
  sub_22F1B4AD8(v2);
  return v3;
}

uint64_t MeasureObject.distanceFromReticle.setter(uint64_t a1, uint64_t a2)
{
  return sub_22F1B452C(a1, a2, &OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___distanceFromReticle, (uint64_t (*)(uint64_t, uint64_t))sub_22F1B5B60);
}

uint64_t (*MeasureObject.distanceFromReticle.modify(void (**a1)()))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = MeasureObject.distanceFromReticle.getter();
  a1[1] = v3;
  return sub_22F1B430C;
}

uint64_t sub_22F1B430C(uint64_t *a1, char a2)
{
  return sub_22F1B45B4(a1, a2, &OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___distanceFromReticle, (void (*)(uint64_t, uint64_t))sub_22F1B5B60);
}

void (*MeasureObject.distanceFromCameraPlane.getter())()
{
  uint64_t v1 = (void (**)())&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___distanceFromCameraPlane];
  uint64_t v2 = *(void *)&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___distanceFromCameraPlane];
  if (v2)
  {
    uint64_t v3 = *(void (**)())&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___distanceFromCameraPlane];
  }
  else
  {
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = v0;
    uint64_t v3 = sub_22F1B4E24;
    *uint64_t v1 = sub_22F1B4E24;
    v1[1] = (void (*)())v4;
    int32x4_t v5 = v0;
    swift_retain();
    sub_22F1B4AC8(0);
  }
  sub_22F1B4AD8(v2);
  return v3;
}

uint64_t MeasureObject.distanceFromCameraPlane.setter(uint64_t a1, uint64_t a2)
{
  return sub_22F1B452C(a1, a2, &OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___distanceFromCameraPlane, (uint64_t (*)(uint64_t, uint64_t))sub_22F1B5B60);
}

uint64_t (*MeasureObject.distanceFromCameraPlane.modify(void (**a1)()))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = MeasureObject.distanceFromCameraPlane.getter();
  a1[1] = v3;
  return sub_22F1B4440;
}

uint64_t sub_22F1B4440(uint64_t *a1, char a2)
{
  return sub_22F1B45B4(a1, a2, &OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___distanceFromCameraPlane, (void (*)(uint64_t, uint64_t))sub_22F1B5B60);
}

void (*MeasureObject.importanceWeight.getter())()
{
  uint64_t v1 = (void (**)())&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___importanceWeight];
  uint64_t v2 = *(void *)&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___importanceWeight];
  if (v2)
  {
    uint64_t v3 = *(void (**)())&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___importanceWeight];
  }
  else
  {
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = v0;
    uint64_t v3 = sub_22F1B4EF4;
    *uint64_t v1 = sub_22F1B4EF4;
    v1[1] = (void (*)())v4;
    int32x4_t v5 = v0;
    swift_retain();
    sub_22F1B4AC8(0);
  }
  sub_22F1B4AD8(v2);
  return v3;
}

uint64_t MeasureObject.importanceWeight.setter(uint64_t a1, uint64_t a2)
{
  return sub_22F1B452C(a1, a2, &OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___importanceWeight, (uint64_t (*)(uint64_t, uint64_t))sub_22F1B5B60);
}

uint64_t sub_22F1B452C(uint64_t a1, uint64_t a2, void *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  int32x4_t v5 = (uint64_t *)(v4 + *a3);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  *int32x4_t v5 = a1;
  v5[1] = a2;
  return a4(v6, v7);
}

uint64_t (*MeasureObject.importanceWeight.modify(void (**a1)()))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = MeasureObject.importanceWeight.getter();
  a1[1] = v3;
  return sub_22F1B4594;
}

uint64_t sub_22F1B4594(uint64_t *a1, char a2)
{
  return sub_22F1B45B4(a1, a2, &OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___importanceWeight, (void (*)(uint64_t, uint64_t))sub_22F1B5B60);
}

uint64_t sub_22F1B45B4(uint64_t *a1, char a2, void *a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v4 = a1[1];
  int32x4_t v5 = (uint64_t *)(a1[2] + *a3);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  *int32x4_t v5 = *a1;
  v5[1] = v4;
  if (a2)
  {
    swift_retain();
    a4(v6, v7);
    return swift_release();
  }
  else
  {
    return ((uint64_t (*)(uint64_t, uint64_t))a4)(v6, v7);
  }
}

uint64_t MeasureObject.incrementCount(by:)(uint64_t a1)
{
  if (qword_268694418 != -1) {
    swift_once();
  }
  os_unfair_lock_lock((os_unfair_lock_t)qword_2686952A8);
  if (qword_268694410 != -1) {
    swift_once();
  }
  swift_getObjectType();
  ObjCClassFromMetadatCGFloat a = (objc_class *)swift_getObjCClassFromMetadata();
  uint64_t v3 = NSStringFromClass(ObjCClassFromMetadata);
  uint64_t v4 = sub_22F223AC8();
  uint64_t v6 = v5;

  swift_beginAccess();
  uint64_t v7 = off_2686952A0;
  if (*((void *)off_2686952A0 + 2) && (unint64_t v8 = sub_22F18DE28(v4, v6), (v9 & 1) != 0)) {
    uint64_t v10 = *(void *)(v7[7] + 8 * v8);
  }
  else {
    uint64_t v10 = 0;
  }
  swift_bridgeObjectRelease();
  uint64_t result = swift_endAccess();
  BOOL v12 = __OFADD__(v10, a1);
  uint64_t v13 = v10 + a1;
  if (v12)
  {
    __break(1u);
  }
  else
  {
    float32x2_t v14 = NSStringFromClass(ObjCClassFromMetadata);
    uint64_t v15 = sub_22F223AC8();
    uint64_t v17 = v16;

    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    float32x4_t v19 = off_2686952A0;
    off_2686952A0 = (_UNKNOWN *)0x8000000000000000;
    sub_22F1E7014(v13, v15, v17, isUniquelyReferenced_nonNull_native);
    off_2686952A0 = v19;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    os_unfair_lock_unlock((os_unfair_lock_t)qword_2686952A8);
    return v13;
  }
  return result;
}

uint64_t sub_22F1B4838(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = (void *)(*a2 + OBJC_IVAR____TtC17MeasureFoundation13MeasureObject_id);
  swift_beginAccess();
  *uint64_t v4 = v3;
  v4[1] = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

void *sub_22F1B48A4()
{
  uint64_t result = (void *)sub_22F185A44(MEMORY[0x263F8EE78]);
  off_2686952A0 = result;
  return result;
}

_DWORD *sub_22F1B48CC()
{
  uint64_t result = (_DWORD *)swift_slowAlloc();
  *uint64_t result = 0;
  qword_2686952A8 = (uint64_t)result;
  return result;
}

uint64_t property wrapper backing initializer of MeasureObject.state(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_268695318);
  uint64_t v2 = swift_allocObject();
  uint64_t v3 = (_DWORD *)swift_slowAlloc();
  *uint64_t v3 = 0;
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v3;
  return v2;
}

uint64_t sub_22F1B4A54()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void sub_22F1B4A8C()
{
}

uint64_t sub_22F1B4AC8(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_22F1B4AD8(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

void sub_22F1B4AE8()
{
}

void sub_22F1B4B94()
{
}

void sub_22F1B4B9C()
{
}

void sub_22F1B4C48()
{
}

void sub_22F1B4C50()
{
}

void sub_22F1B4C8C()
{
}

void sub_22F1B4CC8()
{
}

void sub_22F1B4D04()
{
}

void sub_22F1B4DA8()
{
}

void sub_22F1B4DE4()
{
}

void sub_22F1B4E04()
{
}

void sub_22F1B4E24()
{
}

void sub_22F1B4E44()
{
}

void sub_22F1B4EF4()
{
}

id MeasureObject.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id MeasureObject.init()()
{
  uint64_t v1 = sub_22F223848();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (uint64_t *)&v0[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject_id];
  uint64_t v6 = v0;
  _s17MeasureFoundation11WorldAnchorC10identifier0B04UUIDVvpfi_0();
  uint64_t v7 = sub_22F223808();
  uint64_t v9 = v8;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  *uint64_t v5 = v7;
  v5[1] = v9;
  uint64_t v10 = OBJC_IVAR____TtC17MeasureFoundation13MeasureObject__state;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268695318);
  uint64_t v11 = swift_allocObject();
  BOOL v12 = (_DWORD *)swift_slowAlloc();
  *BOOL v12 = 0;
  *(void *)(v11 + 16) = 0;
  *(void *)(v11 + 24) = v12;
  *(void *)&v6[v10] = v11;
  uint64_t v13 = &v6[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___suggest];
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = 0;
  float32x2_t v14 = &v6[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___isConfirmable];
  *(void *)float32x2_t v14 = 0;
  *((void *)v14 + 1) = 0;
  uint64_t v15 = &v6[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___canHandleTouch];
  *(void *)uint64_t v15 = 0;
  *((void *)v15 + 1) = 0;
  uint64_t v16 = &v6[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___confirm];
  *(void *)uint64_t v16 = 0;
  *((void *)v16 + 1) = 0;
  uint64_t v17 = &v6[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___prepareToclear];
  *(void *)uint64_t v17 = 0;
  *((void *)v17 + 1) = 0;
  float32x4_t v18 = &v6[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___reconfirm];
  *(void *)float32x4_t v18 = 0;
  *((void *)v18 + 1) = 0;
  float32x4_t v19 = &v6[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___clear];
  *(void *)float32x4_t v19 = 0;
  *((void *)v19 + 1) = 0;
  float v20 = &v6[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___percentVisible];
  *(void *)float v20 = 0;
  *((void *)v20 + 1) = 0;
  char v21 = &v6[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___distanceFromReticle];
  *(void *)char v21 = 0;
  *((void *)v21 + 1) = 0;
  float32x4_t v22 = &v6[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___distanceFromCameraPlane];
  *(void *)float32x4_t v22 = 0;
  *((void *)v22 + 1) = 0;
  float32x4_t v23 = &v6[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject____lazy_storage___importanceWeight];
  *(void *)float32x4_t v23 = 0;
  *((void *)v23 + 1) = 0;

  int32x4_t v24 = (objc_class *)type metadata accessor for MeasureObject();
  v38.receiver = v6;
  v38.super_class = v24;
  id v25 = objc_msgSendSuper2(&v38, sel_init);
  uint64_t v26 = MeasureObject.incrementCount(by:)(1);
  if (qword_268694530 != -1) {
    swift_once();
  }
  uint64_t v27 = qword_26869BE78;
  uint64_t v28 = unk_26869BE80;
  v35[1] = 0;
  _OWORD v35[2] = 0xE000000000000000;
  sub_22F2243F8();
  swift_bridgeObjectRelease();
  uint64_t v36 = 0x20676E69646441;
  unint64_t v37 = 0xE700000000000000;
  swift_getObjectType();
  ObjCClassFromMetadatCGFloat a = (objc_class *)swift_getObjCClassFromMetadata();
  float v30 = NSStringFromClass(ObjCClassFromMetadata);
  sub_22F223AC8();

  sub_22F223B48();
  swift_bridgeObjectRelease();
  sub_22F223B48();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_22F223B48();
  swift_bridgeObjectRelease();
  sub_22F223B48();
  v35[0] = v26;
  sub_22F2246D8();
  sub_22F223B48();
  swift_bridgeObjectRelease();
  uint64_t v31 = v36;
  uint64_t v32 = v37;
  uint64_t v33 = sub_22F2240A8();
  _s17MeasureFoundation3LogV3log_4type9isPrivateySS_So03os_d1_E2_taSbtF_0(v31, v32, v33, 0, v27, v28);

  swift_bridgeObjectRelease();
  return v25;
}

uint64_t type metadata accessor for MeasureObject()
{
  return self;
}

id MeasureObject.__deallocating_deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = MeasureObject.incrementCount(by:)(-1);
  if (qword_268694530 != -1) {
    swift_once();
  }
  uint64_t v3 = qword_26869BE78;
  uint64_t v4 = unk_26869BE80;
  uint64_t v11 = 0;
  unint64_t v12 = 0xE000000000000000;
  sub_22F2243F8();
  swift_bridgeObjectRelease();
  uint64_t v13 = 0x676E69766F6D6552;
  unint64_t v14 = 0xE900000000000020;
  swift_getObjectType();
  ObjCClassFromMetadatCGFloat a = (objc_class *)swift_getObjCClassFromMetadata();
  uint64_t v6 = NSStringFromClass(ObjCClassFromMetadata);
  sub_22F223AC8();

  sub_22F223B48();
  swift_bridgeObjectRelease();
  sub_22F223B48();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_22F223B48();
  swift_bridgeObjectRelease();
  sub_22F223B48();
  uint64_t v10 = v2;
  sub_22F2246D8();
  sub_22F223B48();
  swift_bridgeObjectRelease();
  uint64_t v7 = sub_22F2240A8();
  _s17MeasureFoundation3LogV3log_4type9isPrivateySS_So03os_d1_E2_taSbtF_0(0x676E69766F6D6552, 0xE900000000000020, v7, 0, v3, v4);
  swift_bridgeObjectRelease();
  v9.receiver = v1;
  v9.super_class = (Class)type metadata accessor for MeasureObject();
  return objc_msgSendSuper2(&v9, sel_dealloc);
}

uint64_t MeasureObject.isEqual(_:)(uint64_t a1)
{
  sub_22F1B5A80(a1, (uint64_t)v10);
  if (v11)
  {
    type metadata accessor for MeasureObject();
    if (swift_dynamicCast())
    {
      uint64_t v2 = &v9[OBJC_IVAR____TtC17MeasureFoundation13MeasureObject_id];
      swift_beginAccess();
      uint64_t v4 = *(void *)v2;
      uint64_t v3 = *((void *)v2 + 1);
      swift_bridgeObjectRetain();

      goto LABEL_6;
    }
  }
  else
  {
    sub_22F1A2FE4((uint64_t)v10);
  }
  uint64_t v4 = 0;
  uint64_t v3 = 0;
LABEL_6:
  uint64_t v5 = (void *)(v1 + OBJC_IVAR____TtC17MeasureFoundation13MeasureObject_id);
  swift_beginAccess();
  if (v3)
  {
    if (v4 == *v5 && v3 == v5[1]) {
      char v7 = 1;
    }
    else {
      char v7 = sub_22F224738();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    char v7 = 0;
  }
  return v7 & 1;
}

uint64_t static MeasureObject.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)(a1 + OBJC_IVAR____TtC17MeasureFoundation13MeasureObject_id);
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  uint64_t v6 = (void *)(a2 + OBJC_IVAR____TtC17MeasureFoundation13MeasureObject_id);
  swift_beginAccess();
  if (v4 == *v6 && v5 == v6[1]) {
    char v8 = 1;
  }
  else {
    char v8 = sub_22F224738();
  }
  return v8 & 1;
}

uint64_t RangeReplaceableCollection<>.idToObjectMap.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  sub_22F223D38();
  sub_22F223988();
  sub_22F2239A8();
  sub_22F223C48();
  return v1;
}

uint64_t sub_22F1B599C(uint64_t a1, void **a2)
{
  uint64_t v4 = *a2;
  (*(void (**)(void))((*MEMORY[0x263F8EED0] & **a2) + 0xB8))();
  swift_getAssociatedTypeWitness();
  sub_22F2239A8();
  uint64_t v2 = v4;
  return sub_22F2239D8();
}

uint64_t sub_22F1B5A80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_268694C20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_22F1B5AE8(uint64_t a1, void **a2)
{
  return sub_22F1B599C(a1, a2);
}

uint64_t sub_22F1B5B04@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (void *)(*a1 + OBJC_IVAR____TtC17MeasureFoundation13MeasureObject_id);
  swift_beginAccess();
  uint64_t v4 = v3[1];
  *a2 = *v3;
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t *MeasureObjectState.default.unsafeMutableAddressor()
{
  return &static MeasureObjectState.default;
}

uint64_t static MeasureObjectState.default.getter()
{
  return static MeasureObjectState.default;
}

uint64_t static MeasureObjectState.default.setter(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  static MeasureObjectState.default = a1;
  return result;
}

uint64_t (*static MeasureObjectState.default.modify())()
{
  return j__swift_endAccess;
}

Swift::Bool __swiftcall MeasureObjectState.isMoving()()
{
  return (v0 < 8) & (0x98u >> v0);
}

Swift::Bool __swiftcall MeasureObjectState.isPlacing()()
{
  return (unint64_t)(v0 - 3) < 2;
}

Swift::Bool __swiftcall MeasureObjectState.isMovable()()
{
  return (v0 > 7) | (5u >> v0) & 1;
}

Swift::Bool __swiftcall MeasureObjectState.isSelectable()()
{
  return (v0 > 7) | (0x25u >> v0) & 1;
}

Swift::Bool __swiftcall MeasureObjectState.isCapturable()()
{
  if ((unint64_t)(v0 - 3) < 2 || v0 == 6) {
    return 0;
  }
  uint64_t v3 = v0;
  return (v0 != 8 || (objc_msgSend(self, sel_jasperAvailable) & 1) == 0) && v3 != 9;
}

Swift::Bool __swiftcall MeasureObjectState.isChevronDisplayable()()
{
  return (v0 < 6) & (0x25u >> v0);
}

Swift::Bool __swiftcall MeasureObjectState.isValidRectangleState()()
{
  return (v0 < 0xA) & (0x262u >> v0);
}

unint64_t MeasureObjectState.init(rawValue:)(unint64_t a1)
{
  return sub_22F1B5F6C(a1);
}

void *static MeasureObjectState.allCases.getter()
{
  return &unk_26E2918E8;
}

unint64_t sub_22F1B5DA8@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_22F1B5F6C(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

void sub_22F1B5DDC(void *a1@<X8>)
{
  *a1 = &unk_26E2918E8;
}

uint64_t MeasureObjectState.description.getter(uint64_t a1)
{
  uint64_t result = 1701602409;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = 0x64656C6261736964;
      break;
    case 2:
      uint64_t result = 0x6867696C68676968;
      break;
    case 3:
      uint64_t result = 0x676E6963616C70;
      break;
    case 4:
      uint64_t result = 0x49676E6963616C70;
      break;
    case 5:
      uint64_t result = 0x656D7269666E6F63;
      break;
    case 6:
      uint64_t result = 0x6574736567677573;
      break;
    case 7:
      uint64_t result = 0x676E69766F6DLL;
      break;
    case 8:
      uint64_t result = 0x6564697567;
      break;
    case 9:
      uint64_t result = 0x676E697261656C63;
      break;
    default:
      sub_22F224768();
      __break(1u);
      JUMPOUT(0x22F1B5F3CLL);
  }
  return result;
}

uint64_t sub_22F1B5F64()
{
  return MeasureObjectState.description.getter(*v0);
}

unint64_t sub_22F1B5F6C(unint64_t result)
{
  if (result > 9) {
    return 0;
  }
  return result;
}

unint64_t sub_22F1B5F80()
{
  unint64_t result = qword_268695328;
  if (!qword_268695328)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268695328);
  }
  return result;
}

unint64_t sub_22F1B5FD8()
{
  unint64_t result = qword_268695330;
  if (!qword_268695330)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_268695338);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268695330);
  }
  return result;
}

ValueMetadata *type metadata accessor for MeasureObjectState()
{
  return &type metadata for MeasureObjectState;
}

uint64_t DepthProcessor.transformer.getter()
{
  if (*(void *)(v0 + 200))
  {
    uint64_t v1 = *(void *)(v0 + 200);
LABEL_5:
    swift_retain();
    return v1;
  }
  uint64_t v2 = v0;
  double v3 = *(double *)(v0 + 64);
  double v4 = *(double *)(v0 + 72);
  id v5 = objc_msgSend(*(id *)(v0 + 88), sel_currentFrame);
  if (v5)
  {
    uint64_t v6 = v5;
    id v7 = objc_msgSend(v5, sel_camera);

    uint64_t v8 = *(void *)(v2 + 80);
    type metadata accessor for DepthTransformer();
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 848) = 0u;
    *(_OWORD *)(v9 + 864) = 0u;
    *(_OWORD *)(v9 + 880) = 0u;
    *(_OWORD *)(v9 + 896) = 0u;
    *(unsigned char *)(v9 + 912) = 1;
    *(_OWORD *)(v9 + 928) = 0u;
    *(_OWORD *)(v9 + 944) = 0u;
    *(_OWORD *)(v9 + 960) = 0u;
    *(_OWORD *)(v9 + 976) = 0u;
    *(unsigned char *)(v9 + 992) = 1;
    uint64_t v1 = sub_22F1A6C10(v7, v8, v3, v4);

    *(void *)(v2 + 200) = v1;
    swift_retain();
    swift_release();
    goto LABEL_5;
  }
  uint64_t result = sub_22F224538();
  __break(1u);
  return result;
}

Swift::OpaquePointer_optional __swiftcall DepthProcessor.getJasperPointsInQuad(searchArea:requestedMinConfidence:in:)(__C::CGRect searchArea, Swift::Float requestedMinConfidence, ARFrame in)
{
  uint64_t v4 = v3;
  CGFloat height = searchArea.size.height;
  CGFloat width = searchArea.size.width;
  float64_t y = searchArea.origin.y;
  CGFloat x = searchArea.origin.x;
  uint64_t v11 = (os_unfair_lock_s *)(v3 + 216);
  swift_beginAccess();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 216));
  swift_endAccess();
  unint64_t v12 = *(void **)(v3 + 120);
  if (v12)
  {
    id v13 = v12;
    uint64_t v14 = sub_22F224088();

    uint64_t v15 = *(void **)(v4 + 120);
    if (v15)
    {
      id v16 = objc_msgSend(v15, sel_depthPointCloud);
      if (v16)
      {
        uint64_t v17 = v16;
        float32x4_t v18 = (float *)objc_msgSend(v16, sel_confidences);

        if (v18)
        {
          v43.origin.CGFloat x = x;
          v43.origin.float64_t y = y;
          v43.size.CGFloat width = width;
          v43.size.CGFloat height = height;
          CGFloat MinX = CGRectGetMinX(v43);
          v44.origin.CGFloat x = x;
          v44.origin.float64_t y = y;
          v44.size.CGFloat width = width;
          v44.size.CGFloat height = height;
          CGFloat MinY = CGRectGetMinY(v44);
          v20.f64[0] = MinX;
          v20.f64[1] = MinY;
          double v21 = COERCE_DOUBLE(vcvt_f32_f64(v20));
          CGFloat v22 = x;
          v20.f64[0] = y;
          CGFloat v23 = width;
          CGFloat v24 = height;
          CGFloat MaxX = CGRectGetMaxX(*(CGRect *)((char *)&v20 - 8));
          v45.origin.CGFloat x = x;
          v45.origin.float64_t y = y;
          v45.size.CGFloat width = width;
          v45.size.CGFloat height = height;
          CGFloat MaxY = CGRectGetMaxY(v45);
          v26.f64[0] = MaxX;
          v26.f64[1] = MaxY;
          id v27 = objc_msgSend(*(id *)(v4 + 96), sel_elementsInQuad_, v21, COERCE_DOUBLE(vcvt_f32_f64(v26)));
          type metadata accessor for DepthProcessor.JasperPoint();
          unint64_t v28 = sub_22F223CB8();

          unint64_t v41 = MEMORY[0x263F8EE78];
          if (v28 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v31 = sub_22F2245C8();
            int8x16_t v29 = (void *)swift_bridgeObjectRelease();
            if (v31) {
              goto LABEL_7;
            }
          }
          else
          {
            uint64_t v31 = *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
            if (v31)
            {
LABEL_7:
              if (v31 < 1)
              {
                __break(1u);
                goto LABEL_25;
              }
              for (uint64_t i = 0; i != v31; ++i)
              {
                if ((v28 & 0xC000000000000001) != 0) {
                  uint64_t v33 = (char *)MEMORY[0x230FB2E90](i, v28);
                }
                else {
                  uint64_t v33 = (char *)*(id *)(v28 + 8 * i + 32);
                }
                uint64_t v34 = v33;
                if (v18[*(void *)&v33[OBJC_IVAR____TtCC17MeasureFoundation14DepthProcessorP33_FE45F1BA9093FB9DF0FBB450DBB5E7DB11JasperPoint_index]] >= requestedMinConfidence
                  && (v46.origin.CGFloat x = x,
                      v46.origin.float64_t y = y,
                      v46.size.CGFloat width = width,
                      v46.size.CGFloat height = height,
                      CGRectContainsPoint(v46, *(CGPoint *)&v33[OBJC_IVAR____TtCC17MeasureFoundation14DepthProcessorP33_FE45F1BA9093FB9DF0FBB450DBB5E7DB11JasperPoint_screenPoint])))
                {
                  sub_22F224468();
                  sub_22F2244A8();
                  sub_22F2244B8();
                  sub_22F224478();
                }
                else
                {
                }
              }
              swift_bridgeObjectRelease();
              unint64_t v36 = v41;
              goto LABEL_23;
            }
          }
          swift_bridgeObjectRelease();
          unint64_t v36 = MEMORY[0x263F8EE78];
LABEL_23:
          swift_bridgeObjectRetain();
          swift_retain();
          unint64_t v37 = in.super.isa;
          objc_super v38 = sub_22F1B7FD0(v36, v14, v4, v37, (uint64_t)v18);
          swift_release();
          swift_bridgeObjectRelease_n();
          swift_release();

          uint64_t v35 = sub_22F1B742C((uint64_t)v38);
          swift_bridgeObjectRelease();
          swift_beginAccess();
          os_unfair_lock_unlock(v11);
          swift_endAccess();
          goto LABEL_19;
        }
      }
    }
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  os_unfair_lock_unlock(v11);
  swift_endAccess();
  uint64_t v35 = 0;
LABEL_19:
  int8x16_t v29 = (void *)v35;
LABEL_25:
  result.value._rawValue = v29;
  result.is_nil = v30;
  return result;
}

float DepthProcessor.minConfidence.getter()
{
  return 0.9;
}

uint64_t DepthProcessor.numPointsInMap.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 112);
}

__n128 DepthProcessor.cameraToWorld.getter@<Q0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  char v3 = *(unsigned char *)(v1 + 192);
  long long v4 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 128);
  *(_OWORD *)(a1 + 16) = v4;
  __n128 result = *(__n128 *)(v1 + 160);
  long long v6 = *(_OWORD *)(v1 + 176);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v6;
  *(unsigned char *)(a1 + 64) = v3;
  return result;
}

uint64_t DepthProcessor.sampleCamera.getter()
{
  id v1 = objc_msgSend(*(id *)(v0 + 88), sel_currentFrame);
  if (v1)
  {
    uint64_t v2 = v1;
    id v3 = objc_msgSend(v1, sel_camera);

    return (uint64_t)v3;
  }
  else
  {
    uint64_t result = sub_22F224538();
    __break(1u);
  }
  return result;
}

uint64_t DepthProcessor.adProcessor.getter()
{
  return swift_retain();
}

uint64_t sub_22F1B66C4(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  *(_OWORD *)(v2 + 16) = xmmword_22F228200;
  *(void *)(v2 + 32) = 0x42480000447A0000;
  *(void *)(v2 + 80) = 1;
  *(void *)(v2 + 104) = MEMORY[0x263F8EE78];
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(unsigned char *)(v2 + 192) = 1;
  *(void *)(v2 + 200) = 0;
  *(void *)(v2 + 208) = 0;
  *(_DWORD *)(v2 + 216) = 0;
  *(void *)(v2 + 224) = 5;
  *(_DWORD *)(v2 + 232) = 936490775;
  if (qword_268694430 != -1) {
    swift_once();
  }
  *(void *)(v2 + 240) = qword_26869BC80;
  uint64_t ObjectType = swift_getObjectType();
  CGFloat v7 = (*(double (**)(uint64_t, uint64_t))(a2 + 8))(ObjectType, a2);
  CGFloat v9 = v8;
  CGFloat v11 = v10;
  CGFloat v13 = v12;
  *(CGFloat *)(v2 + 48) = v7;
  *(double *)(v2 + 56) = v8;
  *(double *)(v2 + 64) = v10;
  *(double *)(v2 + 72) = v12;
  *(void *)(v2 + 88) = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(ObjectType, a2);
  *(void *)(v2 + 40) = *(void *)(v2 + 20);
  v23.origin.CGFloat x = v7;
  v23.origin.float64_t y = v9;
  v23.size.CGFloat width = v11;
  v23.size.CGFloat height = v13;
  CGFloat Width = CGRectGetWidth(v23);
  v24.origin.CGFloat x = v7;
  v24.origin.float64_t y = v9;
  v24.size.CGFloat width = v11;
  v24.size.CGFloat height = v13;
  CGFloat Height = CGRectGetHeight(v24);
  v15.f64[0] = Width;
  v15.f64[1] = Height;
  double v16 = COERCE_DOUBLE(vcvt_f32_f64(v15));
  id v17 = objc_allocWithZone(MEMORY[0x263F08E50]);
  LODWORD(v18) = 1112014848;
  *(void *)(v2 + 96) = objc_msgSend(v17, sel_initWithBoundingQuad_minimumCellSize_, 0.0, v16, v18);
  uint64_t v19 = *(void *)(v2 + 80);
  type metadata accessor for ADProcessor();
  swift_allocObject();
  id v20 = sub_22F1ECECC(a1, a2, v19);

  swift_beginAccess();
  *(void *)(v3 + 208) = v20;
  swift_release();
  return v3;
}

uint64_t sub_22F1B68DC(uint64_t a1, void *a2)
{
  swift_beginAccess();
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 216));
  swift_endAccess();
  uint64_t result = swift_beginAccess();
  uint64_t v6 = *(void *)(v2 + 208);
  if (v6)
  {
    swift_beginAccess();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v6 + 304));
    swift_endAccess();
    uint64_t v7 = *(void *)(v6 + 144);
    if (v7 && (uint64_t v8 = *(void *)(v6 + 152)) != 0)
    {
      swift_retain();
      uint64_t v9 = sub_22F1ECC98(a1, v6, v8, v7);
      uint64_t v10 = swift_release();
      MEMORY[0x270FA5388](v10);
      uint64_t v11 = sub_22F1ED030(v9, (uint64_t (*)(uint64_t, void, void, void))sub_22F1B887C);
      swift_bridgeObjectRelease();
      swift_beginAccess();
      os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 304));
      swift_endAccess();
      swift_release();
      swift_retain();
      swift_bridgeObjectRetain();
      id v12 = a2;
      sub_22F1B8260(v11, v2, a1, v12);
      uint64_t v14 = v13;
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();

      swift_beginAccess();
      os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 216));
      swift_endAccess();
    }
    else
    {
      swift_beginAccess();
      os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 304));
      swift_endAccess();
      swift_release();
      swift_beginAccess();
      os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 216));
      swift_endAccess();
      return 0;
    }
    return v14;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_22F1B6B38(void *a1, float32x4_t a2, double a3, double a4)
{
  uint64_t v5 = v4;
  id v8 = objc_msgSend(a1, sel_camera);
  objc_msgSend(v8, sel_transform);
  float32x4_t v73 = v9;
  objc_msgSend(v8, sel_transform);
  float32x4_t v11 = vsubq_f32(v10, a2);
  float32x4_t v12 = vmulq_f32(v11, v11);
  double v13 = fmax(8.0 / sqrtf(v12.f32[2] + vaddv_f32(*(float32x2_t *)v12.f32)), 2.0);
  uint64_t v77 = MEMORY[0x263F8EE78];
  sub_22F18FD48(0, 4, 0);
  uint64_t v14 = v77;
  unint64_t v16 = *(void *)(v77 + 16);
  unint64_t v15 = *(void *)(v77 + 24);
  unint64_t v17 = v15 >> 1;
  unint64_t v18 = v16 + 1;
  if (v15 >> 1 <= v16)
  {
    sub_22F18FD48((char *)(v15 > 1), v16 + 1, 1);
    uint64_t v14 = v77;
    unint64_t v15 = *(void *)(v77 + 24);
    unint64_t v17 = v15 >> 1;
  }
  *(void *)(v14 + 16) = v18;
  unint64_t v19 = v14 + 16 * v16;
  *(double *)(v19 + 32) = a3 - v13;
  *(double *)(v19 + 40) = a4 + 0.0;
  int64_t v20 = v16 + 2;
  if (v17 <= v18)
  {
    sub_22F18FD48((char *)(v15 > 1), v20, 1);
    uint64_t v14 = v77;
  }
  *(void *)(v14 + 16) = v20;
  unint64_t v21 = v14 + 16 * v18;
  *(double *)(v21 + 32) = v13 + a3;
  *(double *)(v21 + 40) = a4 + 0.0;
  unint64_t v23 = *(void *)(v14 + 16);
  unint64_t v22 = *(void *)(v14 + 24);
  unint64_t v24 = v23 + 1;
  if (v23 >= v22 >> 1) {
    sub_22F18FD48((char *)(v22 > 1), v23 + 1, 1);
  }
  double v25 = a3 + 0.0;
  uint64_t v26 = v77;
  *(void *)(v77 + 16) = v24;
  unint64_t v27 = v77 + 16 * v23;
  *(double *)(v27 + 32) = v25;
  *(double *)(v27 + 40) = a4 - v13;
  unint64_t v28 = *(void *)(v77 + 24);
  int64_t v29 = v23 + 2;
  if (v24 >= v28 >> 1)
  {
    sub_22F18FD48((char *)(v28 > 1), v29, 1);
    uint64_t v26 = v77;
  }
  *(void *)(v26 + 16) = v29;
  uint64_t v30 = v26 + 16 * v24;
  *(double *)(v30 + 32) = v25;
  *(double *)(v30 + 40) = v13 + a4;
  uint64_t result = swift_beginAccess();
  uint64_t v32 = *(void *)(v5 + 208);
  if (!v32) {
    goto LABEL_50;
  }
  swift_beginAccess();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v32 + 304));
  swift_endAccess();
  uint64_t v33 = *(void *)(v32 + 144);
  if (!v33 || (uint64_t v34 = *(void *)(v32 + 152)) == 0)
  {
    swift_beginAccess();
    os_unfair_lock_unlock((os_unfair_lock_t)(v32 + 304));
    swift_endAccess();

    swift_release();
    swift_release();
    return 0;
  }
  swift_retain();
  uint64_t v35 = sub_22F1ECC98(v26, v32, v34, v33);
  uint64_t v36 = swift_release();
  MEMORY[0x270FA5388](v36);
  uint64_t v37 = sub_22F1ED030(v35, (uint64_t (*)(uint64_t, void, void, void))sub_22F1B887C);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  os_unfair_lock_unlock((os_unfair_lock_t)(v32 + 304));
  swift_endAccess();
  swift_release();
  uint64_t result = swift_release();
  unint64_t v38 = *(void *)(v37 + 16);
  if (!v38)
  {
    __break(1u);
    goto LABEL_47;
  }
  if (v38 == 1)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  if (v38 < 3)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  if (v38 == 3)
  {
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
    return result;
  }
  __int32 v39 = v8;
  uint64_t v40 = *(void *)(v37 + 32);
  uint64_t v41 = *(void *)(v37 + 40);
  char v42 = *(unsigned char *)(v37 + 56);
  uint64_t v44 = *(void *)(v37 + 64);
  uint64_t v43 = *(void *)(v37 + 72);
  char v45 = *(unsigned char *)(v37 + 88);
  uint64_t v68 = *(void *)(v37 + 96);
  uint64_t v70 = *(void *)(v37 + 104);
  char v46 = *(unsigned char *)(v37 + 120);
  int8x16_t v67 = *(int8x16_t *)(v37 + 128);
  char v47 = *(unsigned char *)(v37 + 152);
  swift_bridgeObjectRelease();
  if (v42)
  {
    float32x4_t v48 = a2;
    if (v45)
    {
      float32x4_t v49 = 0uLL;
      int v50 = 1;
      goto LABEL_29;
    }
    v51.i64[0] = v44;
    v51.i64[1] = v43;
  }
  else
  {
    v51.i64[0] = v40;
    v51.i64[1] = v41;
    if ((v45 & 1) == 0)
    {
      v52.i64[0] = v44;
      v52.i64[1] = v43;
      int8x16_t v66 = v52;
      int8x16_t v71 = (int8x16_t)v51;
      int v50 = 0;
      if (sub_22F2240F8()) {
        unsigned int v53 = -1;
      }
      else {
        unsigned int v53 = 0;
      }
      float32x4_t v49 = vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v53), v71, v66), a2);
      float32x4_t v48 = a2;
      goto LABEL_28;
    }
    float32x4_t v48 = a2;
  }
  int v50 = 0;
  float32x4_t v49 = vsubq_f32(v51, v48);
LABEL_28:
  v49.i32[3] = 0;
LABEL_29:
  float32x4_t v72 = v49;
  if ((v46 & 1) == 0)
  {
    v55.i64[0] = v68;
    v55.i64[1] = v70;
    if ((v47 & 1) == 0)
    {
      int8x16_t v69 = (int8x16_t)v55;
      int v54 = 0;
      if (sub_22F2240F8()) {
        unsigned int v56 = -1;
      }
      else {
        unsigned int v56 = 0;
      }
      float32x4_t v57 = vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v56), v69, v67), a2);
      goto LABEL_39;
    }
LABEL_38:
    int v54 = 0;
    float32x4_t v57 = vsubq_f32(v55, v48);
LABEL_39:
    v57.i32[3] = 0;
    float32x4_t v75 = v57;
    goto LABEL_40;
  }
  if ((v47 & 1) == 0)
  {
    float32x4_t v55 = (float32x4_t)v67;
    goto LABEL_38;
  }
  float32x4_t v75 = 0u;
  int v54 = 1;
LABEL_40:
  objc_msgSend(v39, sel_transform, *(_OWORD *)&v66);
  if ((v50 | v54))
  {
    v58.i32[3] = 0;
    float32x4_t v76 = v58;
  }
  else
  {
    float32x4_t v59 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v75, (int32x4_t)v75), (int8x16_t)v75, 0xCuLL), vnegq_f32(v72)), v75, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v72, (int32x4_t)v72), (int8x16_t)v72, 0xCuLL));
    float32x4_t v60 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v59, (int32x4_t)v59), (int8x16_t)v59, 0xCuLL);
    int32x4_t v61 = (int32x4_t)vmulq_f32(v59, v59);
    v61.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v61.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v61, 2), *(float32x2_t *)v61.i8)).u32[0];
    float32x2_t v62 = vrsqrte_f32((float32x2_t)v61.u32[0]);
    float32x2_t v63 = vmul_f32(v62, vrsqrts_f32((float32x2_t)v61.u32[0], vmul_f32(v62, v62)));
    float32x4_t v76 = vmulq_n_f32(v60, vmul_f32(v63, vrsqrts_f32((float32x2_t)v61.u32[0], vmul_f32(v63, v63))).f32[0]);
  }

  uint64_t v64 = v76.i64[0];
  float32x4_t v65 = vmulq_f32(v73, v76);
  if ((float)(v65.f32[2] + vaddv_f32(*(float32x2_t *)v65.f32)) < 0.0) {
    return (uint64_t)vsub_f32(0, *(float32x2_t *)v76.f32);
  }
  return v64;
}

uint64_t sub_22F1B7164(uint64_t a1)
{
  uint64_t v3 = (os_unfair_lock_s *)(v1 + 216);
  swift_beginAccess();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 216));
  swift_endAccess();
  uint64_t result = swift_beginAccess();
  uint64_t v5 = *(void *)(v1 + 208);
  if (v5)
  {
    swift_beginAccess();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v5 + 304));
    swift_endAccess();
    uint64_t v6 = *(void *)(v5 + 144);
    if (v6 && (uint64_t v7 = *(void *)(v5 + 152)) != 0)
    {
      swift_retain();
      uint64_t v8 = sub_22F1ECC98(a1, v5, v7, v6);
      uint64_t v9 = swift_release();
      MEMORY[0x270FA5388](v9);
      uint64_t v10 = sub_22F1ED030(v8, (uint64_t (*)(uint64_t, void, void, void))sub_22F1B886C);
      swift_bridgeObjectRelease();
      swift_beginAccess();
      os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 304));
      swift_endAccess();
      swift_release();
      uint64_t v11 = *(void *)(v10 + 16);
      if (v11)
      {
        uint64_t v12 = v10 + 32;
        swift_bridgeObjectRetain();
        double v13 = (char *)MEMORY[0x263F8EE78];
        do
        {
          if ((*(unsigned char *)(v12 + 24) & 1) == 0)
          {
            uint64_t v15 = *(void *)v12;
            uint64_t v16 = *(void *)(v12 + 8);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              double v13 = sub_22F19B630(0, *((void *)v13 + 2) + 1, 1, v13);
            }
            unint64_t v18 = *((void *)v13 + 2);
            unint64_t v17 = *((void *)v13 + 3);
            if (v18 >= v17 >> 1) {
              double v13 = sub_22F19B630((char *)(v17 > 1), v18 + 1, 1, v13);
            }
            *((void *)v13 + 2) = v18 + 1;
            uint64_t v14 = &v13[16 * v18];
            *((void *)v14 + 4) = v15;
            *((void *)v14 + 5) = v16;
          }
          v12 += 32;
          --v11;
        }
        while (v11);
        swift_bridgeObjectRelease();
      }
      else
      {
        double v13 = (char *)MEMORY[0x263F8EE78];
      }
      swift_bridgeObjectRelease();
      swift_beginAccess();
      os_unfair_lock_unlock(v3);
      swift_endAccess();
    }
    else
    {
      swift_beginAccess();
      os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 304));
      swift_endAccess();
      swift_release();
      swift_beginAccess();
      os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 216));
      swift_endAccess();
      return 0;
    }
    return (uint64_t)v13;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_22F1B742C(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v13 = MEMORY[0x263F8EE78];
    sub_22F18FCA8(0, v1, 0);
    uint64_t v2 = v13;
    uint64_t v4 = a1 + 64;
    do
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_268695378);
      __swift_instantiateConcreteTypeFromMangledName(&qword_268695380);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_22F18FCA8(0, *(void *)(v2 + 16) + 1, 1);
        uint64_t v2 = v13;
      }
      unint64_t v6 = *(void *)(v2 + 16);
      unint64_t v5 = *(void *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        sub_22F18FCA8((char *)(v5 > 1), v6 + 1, 1);
        uint64_t v2 = v13;
      }
      *(void *)(v2 + 16) = v6 + 1;
      uint64_t v7 = v2 + 48 * v6;
      *(_OWORD *)(v7 + 32) = v9;
      *(void *)(v7 + 48) = v10;
      *(void *)(v7 + 56) = v11;
      *(_DWORD *)(v7 + 64) = v12;
      v4 += 48;
      --v1;
    }
    while (v1);
  }
  return v2;
}

Swift::OpaquePointer_optional __swiftcall DepthProcessor.getJasperPointsPosition(requestedMinConfidence:currentFrame:)(Swift::Float requestedMinConfidence, ARFrame currentFrame)
{
  uint64_t v3 = (float32x4_t *)v2;
  unint64_t v5 = (os_unfair_lock_s *)(v2 + 216);
  swift_beginAccess();
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 216));
  swift_endAccess();
  unint64_t v6 = *(void **)(v2 + 120);
  if (!v6) {
    goto LABEL_7;
  }
  id v7 = v6;
  uint64_t v8 = sub_22F224088();

  long long v9 = (void *)v3[7].i64[1];
  if (v9)
  {
    id v10 = objc_msgSend(v9, sel_depthPointCloud);
    if (v10)
    {
      uint64_t v11 = v10;
      int v12 = (float *)objc_msgSend(v10, sel_confidences);

      if (v12)
      {
        swift_beginAccess();
        if ((v3[12].i8[0] & 1) == 0)
        {
          float32x4_t v24 = v3[8];
          float32x4_t v23 = v3[9];
          float32x4_t v22 = v3[10];
          float32x4_t v21 = v3[11];
          swift_beginAccess();
          unint64_t v16 = v3[6].u64[1];
          unint64_t v25 = MEMORY[0x263F8EE78];
          if (v16 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v15 = (void *)sub_22F2245C8();
            uint64_t v17 = (uint64_t)v15;
            if (v15) {
              goto LABEL_11;
            }
          }
          else
          {
            uint64_t v17 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
            uint64_t v15 = (void *)swift_bridgeObjectRetain();
            if (v17)
            {
LABEL_11:
              if (v17 < 1)
              {
                __break(1u);
                goto LABEL_25;
              }
              for (uint64_t i = 0; i != v17; ++i)
              {
                if ((v16 & 0xC000000000000001) != 0) {
                  unint64_t v19 = (char *)MEMORY[0x230FB2E90](i, v16);
                }
                else {
                  unint64_t v19 = (char *)*(id *)(v16 + 8 * i + 32);
                }
                if (v12[*(void *)&v19[OBJC_IVAR____TtCC17MeasureFoundation14DepthProcessorP33_FE45F1BA9093FB9DF0FBB450DBB5E7DB11JasperPoint_index]] >= requestedMinConfidence)
                {
                  sub_22F224468();
                  sub_22F2244A8();
                  sub_22F2244B8();
                  sub_22F224478();
                }
                else
                {
                }
              }
              swift_bridgeObjectRelease();
              unint64_t v20 = v25;
              goto LABEL_23;
            }
          }
          swift_bridgeObjectRelease();
          unint64_t v20 = MEMORY[0x263F8EE78];
LABEL_23:
          swift_bridgeObjectRetain();
          swift_retain();
          uint64_t v14 = sub_22F1B8434(v20, v8, v24, v23, v22, v21);
          swift_release();
          swift_bridgeObjectRelease_n();
          swift_release();
          swift_beginAccess();
          os_unfair_lock_unlock(v5);
          swift_endAccess();
          goto LABEL_8;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_7:
  swift_beginAccess();
  os_unfair_lock_unlock(v5);
  swift_endAccess();
  uint64_t v14 = 0;
LABEL_8:
  uint64_t v15 = v14;
LABEL_25:
  result.value._rawValue = v15;
  result.is_nil = v13;
  return result;
}

uint64_t sub_22F1B78B0(void *a1)
{
  swift_beginAccess();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 216));
  swift_endAccess();
  id v3 = objc_msgSend(a1, sel_capturedPointCloudData);
  if (!v3)
  {
    swift_beginAccess();
    os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 216));
    return swift_endAccess();
  }
  uint64_t v4 = *(void **)(v1 + 120);
  *(void *)(v1 + 120) = v3;
  id v5 = v3;

  uint64_t v6 = DepthProcessor.transformer.getter();
  id v7 = objc_msgSend(a1, sel_camera);
  objc_msgSend(v7, sel_viewMatrixForOrientation_, *(void *)(v6 + 304));
  simd_float4x4 v17 = __invert_f4(v16);
  simd_float4 v14 = v17.columns[1];
  simd_float4 v15 = v17.columns[0];
  simd_float4 v12 = v17.columns[3];
  simd_float4 v13 = v17.columns[2];
  swift_release();

  swift_beginAccess();
  *(simd_float4 *)(v1 + 128) = v15;
  *(simd_float4 *)(v1 + 144) = v14;
  *(simd_float4 *)(v1 + 160) = v13;
  *(simd_float4 *)(v1 + 176) = v12;
  *(unsigned char *)(v1 + 192) = 0;
  swift_beginAccess();
  if (!*(void *)(v1 + 112))
  {
    id v9 = objc_msgSend(a1, sel_worldTrackingState);
    if (v9)
    {
      id v10 = v9;
      id v11 = objc_msgSend(v9, sel_vioTrackingState);

      if (!v11) {
        sub_22F1B7AA0(a1);
      }
    }
  }
  uint64_t result = swift_beginAccess();
  if (*(void *)(v1 + 208))
  {
    swift_retain();
    ADProcessor.didUpdate(frame:)((ARFrame)a1);

    swift_release();
    swift_beginAccess();
    os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 216));
    return swift_endAccess();
  }
  __break(1u);
  return result;
}

void sub_22F1B7AA0(void *a1)
{
  uint64_t v2 = v1;
  id v3 = objc_msgSend(a1, sel_capturedPointCloudData);
  if (v3)
  {
    id v20 = v3;
    id v4 = objc_msgSend(v3, sel_depthPointCloud);
    if (v4 && (id v5 = v4, v6 = (char *)objc_msgSend(v4, sel_cameraPixels), v5, v6))
    {
      uint64_t v7 = *(void *)(sub_22F224088() + 16);
      swift_bridgeObjectRelease();
      if (v7)
      {
        uint64_t v8 = 0;
        id v9 = (CGFloat *)(v6 + 8);
        do
        {
          CGFloat v10 = *(v9 - 1);
          CGFloat v11 = *v9;
          DepthProcessor.transformer.getter();
          Transformer.cameraToView.getter((CGFloat *)v25);
          long long v21 = v25[1];
          long long v22 = v25[0];
          CGFloat v12 = v26;
          CGFloat v13 = v27;
          swift_release();
          *(_OWORD *)&v24.CGFloat a = v22;
          *(_OWORD *)&v24.CGFloat c = v21;
          v24.CGFloat tx = v12;
          v24.CGFloat ty = v13;
          v29.CGFloat x = v10;
          v29.float64_t y = v11;
          CGPoint v14 = CGPointApplyAffineTransform(v29, &v24);
          simd_float4 v15 = (objc_class *)type metadata accessor for DepthProcessor.JasperPoint();
          simd_float4x4 v16 = (char *)objc_allocWithZone(v15);
          *(void *)&v16[OBJC_IVAR____TtCC17MeasureFoundation14DepthProcessorP33_FE45F1BA9093FB9DF0FBB450DBB5E7DB11JasperPoint_index] = v8;
          *(CGPoint *)&v16[OBJC_IVAR____TtCC17MeasureFoundation14DepthProcessorP33_FE45F1BA9093FB9DF0FBB450DBB5E7DB11JasperPoint_screenPoint] = v14;
          simd_float4x4 v17 = (CGFloat *)&v16[OBJC_IVAR____TtCC17MeasureFoundation14DepthProcessorP33_FE45F1BA9093FB9DF0FBB450DBB5E7DB11JasperPoint_cameraPixel];
          *simd_float4x4 v17 = v10;
          v17[1] = v11;
          v23.receiver = v16;
          v23.super_class = v15;
          id v18 = objc_msgSendSuper2(&v23, sel_init);

          swift_beginAccess();
          id v19 = v18;
          MEMORY[0x230FB2700]();
          if (*(void *)((*(void *)(v2 + 104) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v2 + 104) & 0xFFFFFFFFFFFFFF8)
                                                                                              + 0x18) >> 1)
            sub_22F223D18();
          ++v8;
          sub_22F223D68();
          sub_22F223CD8();
          swift_endAccess();

          v9 += 2;
        }
        while (v7 != v8);
      }

      swift_beginAccess();
      *(void *)(v2 + 112) = v7;
    }
    else
    {
    }
  }
}

id *DepthProcessor.deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v0;
}

uint64_t DepthProcessor.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

id sub_22F1B7E04()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t sub_22F1B7E3C()
{
  unint64_t result = sub_22F185B58((uint64_t)&unk_26E291748);
  qword_26869BC70 = result;
  return result;
}

uint64_t sub_22F1B7E64()
{
  if (qword_268694420 != -1) {
    swift_once();
  }
  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = sub_22F1E6DB8(v0);
  uint64_t result = swift_bridgeObjectRelease();
  qword_26869BC78 = v1;
  return result;
}

void sub_22F1B7ED8()
{
  if (qword_268694420 != -1) {
    swift_once();
  }
  sub_22F1E2D2C(qword_26869BC70);
  qword_26869BC80 = v0;
}

uint64_t sub_22F1B7F30@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_22F1B7F98(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t type metadata accessor for DepthProcessor.JasperPoint()
{
  return self;
}

uint64_t sub_22F1B7F98(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  id v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0;
    }
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

char *sub_22F1B7FD0(unint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = sub_22F2245C8())
  {
    uint64_t v7 = (char *)MEMORY[0x263F8EE78];
    uint64_t v8 = 4;
    while (1)
    {
      id v9 = (a1 & 0xC000000000000001) != 0
         ? (char *)MEMORY[0x230FB2E90](v8 - 4, a1)
         : (char *)*(id *)(a1 + 8 * v8);
      CGFloat v10 = v9;
      uint64_t v11 = v8 - 3;
      if (__OFADD__(v8 - 4, 1)) {
        break;
      }
      uint64_t v12 = OBJC_IVAR____TtCC17MeasureFoundation14DepthProcessorP33_FE45F1BA9093FB9DF0FBB450DBB5E7DB11JasperPoint_index;
      unint64_t v13 = *(void *)&v9[OBJC_IVAR____TtCC17MeasureFoundation14DepthProcessorP33_FE45F1BA9093FB9DF0FBB450DBB5E7DB11JasperPoint_index];
      if ((v13 & 0x8000000000000000) != 0 || v13 >= *(void *)(a2 + 16))
      {
      }
      else
      {
        float32x4_t v37 = *(float32x4_t *)(a2 + 32 + 16 * v13);
        DepthProcessor.transformer.getter();
        sub_22F1EE604(a4, (uint64_t)v41);
        float32x4_t v35 = v42;
        float32x4_t v36 = v43;
        float32x4_t v38 = v44;
        float32x4_t v39 = v45;
        *(double *)v14.i64 = DepthTransformer.jasperToARKitCamera.getter();
        float32x4_t v31 = v14;
        float32x4_t v32 = v15;
        float32x4_t v33 = v17;
        float32x4_t v34 = v16;
        swift_release();
        uint64_t v18 = *(void *)&v10[OBJC_IVAR____TtCC17MeasureFoundation14DepthProcessorP33_FE45F1BA9093FB9DF0FBB450DBB5E7DB11JasperPoint_screenPoint];
        uint64_t v19 = *(void *)&v10[OBJC_IVAR____TtCC17MeasureFoundation14DepthProcessorP33_FE45F1BA9093FB9DF0FBB450DBB5E7DB11JasperPoint_screenPoint
                            + 8];
        int v20 = *(_DWORD *)(a5 + 4 * *(void *)&v10[v12]);

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v7 = sub_22F19B524(0, *((void *)v7 + 2) + 1, 1, v7);
        }
        unint64_t v22 = *((void *)v7 + 2);
        unint64_t v21 = *((void *)v7 + 3);
        if (v22 >= v21 >> 1) {
          uint64_t v7 = sub_22F19B524((char *)(v21 > 1), v22 + 1, 1, v7);
        }
        float32x4_t v23 = vaddq_f32(v33, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v31, 0.001 * v37.f32[0]), v32, vmuls_lane_f32(0.001, *(float32x2_t *)v37.f32, 1)), v34, vmuls_lane_f32(0.001, v37, 2)));
        float32x4_t v24 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v35, v23.f32[0]), v36, *(float32x2_t *)v23.f32, 1), v38, v23, 2), v39, v23, 3);
        float32x4_t v25 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 3);
        *(float32x2_t *)&long long v26 = vdiv_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v25.f32);
        *((void *)&v26 + 1) = vdivq_f32(v24, v25).u32[2];
        *((void *)v7 + 2) = v22 + 1;
        double v27 = &v7[48 * v22];
        *((_OWORD *)v27 + 2) = v26;
        *((void *)v27 + 6) = v18;
        *((void *)v27 + 7) = v19;
        *((_DWORD *)v27 + 16) = v20;
      }
      ++v8;
      if (v11 == v6) {
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
  }
  uint64_t v7 = (char *)MEMORY[0x263F8EE78];
LABEL_20:
  swift_bridgeObjectRelease();
  return v7;
}

void sub_22F1B8260(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v32 = MEMORY[0x263F8EE78];
  sub_22F18FD28(0, 0, 0);
  uint64_t v6 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (!v6)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    return;
  }
  unint64_t v7 = 0;
  uint64_t v8 = (unsigned char *)(a1 + 56);
  uint64_t v27 = a3;
  uint64_t v28 = v6;
  id v9 = (double *)(a3 + 40);
  while (1)
  {
    long long v10 = 0uLL;
    if (*v8)
    {
      uint64_t v11 = 0;
      char v12 = 1;
      long long v13 = 0uLL;
      long long v14 = 0uLL;
      long long v15 = 0uLL;
      goto LABEL_9;
    }
    if (v7 >= *(void *)(v27 + 16)) {
      break;
    }
    uint64_t v11 = *((void *)v8 - 1);
    float32x4_t v16 = *(float32x4_t *)(v8 - 24);
    double v30 = *(double *)v16.i64;
    uint64_t v17 = sub_22F1B6B38(a4, v16, *(v9 - 1), *v9);
    if (v19)
    {
      uint64_t v11 = 0;
      char v12 = 1;
      long long v13 = 0uLL;
      long long v14 = 0uLL;
      long long v15 = 0uLL;
      uint64_t v6 = v28;
      long long v10 = 0uLL;
    }
    else
    {
      v20.i64[0] = v17;
      v20.i64[1] = v18;
      *(double *)&long long v10 = _sSo13simd_float4x4a17MeasureFoundationE4make8position17normalizedForwardABs5SIMD3VySfG_AItFZ_0(v30, v20);
      char v12 = 0;
      uint64_t v6 = v28;
    }
LABEL_9:
    unint64_t v22 = *(void *)(v32 + 16);
    unint64_t v21 = *(void *)(v32 + 24);
    if (v22 >= v21 >> 1)
    {
      long long v31 = v10;
      long long v25 = v14;
      long long v26 = v13;
      long long v24 = v15;
      sub_22F18FD28((char *)(v21 > 1), v22 + 1, 1);
      long long v15 = v24;
      long long v14 = v25;
      long long v13 = v26;
      long long v10 = v31;
      uint64_t v6 = v28;
    }
    ++v7;
    *(void *)(v32 + 16) = v22 + 1;
    uint64_t v23 = v32 + 80 * v22;
    *(_OWORD *)(v23 + 32) = v10;
    *(_OWORD *)(v23 + 48) = v13;
    *(_OWORD *)(v23 + 64) = v14;
    *(_OWORD *)(v23 + 80) = v15;
    *(void *)(v23 + 96) = v11;
    *(unsigned char *)(v23 + 104) = v12;
    v8 += 32;
    v9 += 2;
    if (v6 == v7) {
      goto LABEL_12;
    }
  }
  __break(1u);
}

char *sub_22F1B8434(unint64_t a1, uint64_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6)
{
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v8; uint64_t v8 = sub_22F2245C8())
  {
    id v9 = (char *)MEMORY[0x263F8EE78];
    uint64_t v10 = 4;
    while (1)
    {
      uint64_t v11 = (a1 & 0xC000000000000001) != 0
          ? (char *)MEMORY[0x230FB2E90](v10 - 4, a1)
          : (char *)*(id *)(a1 + 8 * v10);
      char v12 = v11;
      uint64_t v13 = v10 - 3;
      if (__OFADD__(v10 - 4, 1)) {
        break;
      }
      unint64_t v14 = *(void *)&v11[OBJC_IVAR____TtCC17MeasureFoundation14DepthProcessorP33_FE45F1BA9093FB9DF0FBB450DBB5E7DB11JasperPoint_index];
      if ((v14 & 0x8000000000000000) != 0 || v14 >= *(void *)(a2 + 16))
      {
      }
      else
      {
        float32x4_t v34 = *(float32x4_t *)(a2 + 32 + 16 * v14);
        DepthProcessor.transformer.getter();
        *(double *)v15.i64 = DepthTransformer.jasperToARKitCamera.getter();
        float32x4_t v30 = v15;
        float32x4_t v31 = v16;
        float32x4_t v32 = v18;
        float32x4_t v33 = v17;

        swift_release();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          id v9 = sub_22F19B630(0, *((void *)v9 + 2) + 1, 1, v9);
        }
        unint64_t v20 = *((void *)v9 + 2);
        unint64_t v19 = *((void *)v9 + 3);
        if (v20 >= v19 >> 1) {
          id v9 = sub_22F19B630((char *)(v19 > 1), v20 + 1, 1, v9);
        }
        float32x4_t v21 = vaddq_f32(v32, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v30, 0.001 * v34.f32[0]), v31, vmuls_lane_f32(0.001, *(float32x2_t *)v34.f32, 1)), v33, vmuls_lane_f32(0.001, v34, 2)));
        float32x4_t v22 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a3, v21.f32[0]), a4, *(float32x2_t *)v21.f32, 1), a5, v21, 2), a6, v21, 3);
        float32x4_t v23 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 3);
        *(float32x2_t *)&long long v24 = vdiv_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v23.f32);
        *((void *)&v24 + 1) = vdivq_f32(v22, v23).u32[2];
        *((void *)v9 + 2) = v20 + 1;
        *(_OWORD *)&v9[16 * v20 + 32] = v24;
      }
      ++v10;
      if (v13 == v8) {
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
  }
  id v9 = (char *)MEMORY[0x263F8EE78];
LABEL_20:
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_22F1B8668@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = DepthProcessor.transformer.getter();
  *a1 = result;
  return result;
}

uint64_t sub_22F1B8694(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 200) = *a1;
  swift_retain();
  return swift_release();
}

uint64_t type metadata accessor for DepthProcessor()
{
  return self;
}

ValueMetadata *type metadata accessor for DepthProcessor.DebugOptions()
{
  return &type metadata for DepthProcessor.DebugOptions;
}

unint64_t sub_22F1B8710()
{
  unint64_t result = qword_268695358;
  if (!qword_268695358)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268695358);
  }
  return result;
}

unint64_t sub_22F1B8768()
{
  unint64_t result = qword_268695360;
  if (!qword_268695360)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268695360);
  }
  return result;
}

unint64_t sub_22F1B87C0()
{
  unint64_t result = qword_268695368;
  if (!qword_268695368)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268695368);
  }
  return result;
}

unint64_t sub_22F1B8818()
{
  unint64_t result = qword_268695370;
  if (!qword_268695370)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268695370);
  }
  return result;
}

uint64_t sub_22F1B886C(unint64_t a1, int a2, uint64_t a3, char a4)
{
  return sub_22F1ECB38(a1, a2, a3, a4 & 1, *(void **)(v4 + 16), *(void *)(v4 + 24), *(void *)(v4 + 32));
}

char *MeasureUnitDetailed.default.unsafeMutableAddressor()
{
  return &static MeasureUnitDetailed.default;
}

uint64_t static MeasureUnitDetailed.default.getter()
{
  return static MeasureUnitDetailed.default;
}

uint64_t static MeasureUnitDetailed.default.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  static MeasureUnitDetailed.default = a1;
  return result;
}

uint64_t (*static MeasureUnitDetailed.default.modify())()
{
  return j__swift_endAccess;
}

uint64_t MeasureUnitDetailed.rawValue.getter(uint64_t result)
{
  return result;
}

unint64_t sub_22F1B8980@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = _s17MeasureFoundation0A12UnitDetailedO8rawValueACSgSi_tcfC_0(*a1);
  *a2 = result;
  return result;
}

unint64_t _s17MeasureFoundation0A12UnitDetailedO8rawValueACSgSi_tcfC_0(unint64_t result)
{
  if (result >= 4) {
    return 4;
  }
  return result;
}

unint64_t sub_22F1B89C0()
{
  unint64_t result = qword_268695390[0];
  if (!qword_268695390[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268695390);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for MeasureUnitDetailed(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22F1B8AE0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MeasureUnitDetailed()
{
  return &type metadata for MeasureUnitDetailed;
}

void sub_22F1B8B18(void *a1)
{
  uint64_t v2 = v1;
  id v4 = objc_msgSend(a1, sel_capturedPointCloudData);
  if (!v4) {
    return;
  }
  id v122 = v4;
  uint64_t v5 = *(void *)(sub_22F224088() + 16);
  swift_bridgeObjectRelease();
  if (v5)
  {
    unint64_t v6 = *(void *)(sub_22F224088() + 16);
    swift_bridgeObjectRelease();
    if (v6 <= 0x480)
    {
      id v7 = objc_msgSend(a1, sel_camera);
      swift_beginAccess();
      if (*(unsigned char *)(v2 + 184))
      {
        __break(1u);
      }
      else
      {
        objc_msgSend(v7, sel_viewMatrixForOrientation_, *(void *)(v2 + 176));
        float32x4_t v113 = v8;
        float32x4_t v114 = v9;
        float32x4_t v116 = v10;
        float32x4_t v118 = v11;
        swift_beginAccess();
        char v12 = *(void **)(v2 + 192);
        if (v12)
        {
          uint64_t v13 = (simd_float3x3 *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
          id v14 = v12;
          float32x4_t v15 = (unsigned char *)(v2 + 272);
          if (*(unsigned char *)(v2 + 272)) {
            goto LABEL_12;
          }
          CGFloat v16 = *(double *)(v2 + 120);
          CGFloat v17 = *(double *)(v2 + 128);
          CGFloat v18 = *(double *)(v2 + 136);
          CGFloat v19 = *(double *)(v2 + 144);
          char v20 = *(unsigned char *)(v2 + 152);
          uint64_t Strong = (void *)swift_unknownObjectUnownedLoadStrong();
          type metadata accessor for OverlayMetalView();
          objc_msgSend((id)swift_dynamicCastClassUnconditional(), sel_frame);
          CGFloat v23 = v22;
          CGFloat v25 = v24;
          CGFloat v27 = v26;
          CGFloat v29 = v28;

          if (v20) {
            goto LABEL_12;
          }
          v134.origin.CGFloat x = v16;
          v134.origin.float64_t y = v17;
          v134.size.CGFloat width = v18;
          v134.size.CGFloat height = v19;
          v135.origin.CGFloat x = v23;
          v135.origin.float64_t y = v25;
          v135.size.CGFloat width = v27;
          v135.size.CGFloat height = v29;
          if (!CGRectEqualToRect(v134, v135))
          {
LABEL_12:
            float32x4_t v30 = (void *)swift_unknownObjectUnownedLoadStrong();
            type metadata accessor for OverlayMetalView();
            objc_msgSend((id)swift_dynamicCastClassUnconditional(), sel_frame);
            uint64_t v32 = v31;
            uint64_t v34 = v33;
            double v36 = v35;
            double v38 = v37;

            *(void *)(v2 + 120) = v32;
            *(void *)(v2 + 128) = v34;
            *(double *)(v2 + 136) = v36;
            *(double *)(v2 + 144) = v38;
            *(unsigned char *)(v2 + 152) = 0;
            if (*(unsigned char *)(v2 + 184))
            {
LABEL_26:
              __break(1u);
              goto LABEL_27;
            }
            objc_msgSend(v7, sel_projectionMatrixForOrientation_viewportSize_zNear_zFar_, *(void *)(v2 + 176), v36, v38, 0.00100000005, 0.0);
            *(simd_float3 *)(v2 + 208) = v39;
            *(simd_float3 *)(v2 + 224) = v40;
            *(simd_float3 *)(v2 + 240) = v41;
            *(simd_float3 *)(v2 + 256) = v42;
            *float32x4_t v15 = 0;
            v13->columns[0] = v39;
            v13->columns[1] = v40;
            v13->columns[2] = v41;
            v13[1].columns[0] = v42;
            objc_msgSend(v7, sel_intrinsics);
            v13[13].columns[0] = v43;
            v13[13].columns[1] = v44;
            v13[13].columns[2] = v45;
            objc_msgSend(v7, sel_intrinsics);
            v13[14] = __invert_f3(v133);
            swift_unownedRetainStrong();
            DepthProcessor.transformer.getter();
            swift_release();
            *(double *)v46.i64 = DepthTransformer.jasperToARKitCamera.getter();
            simd_float3 v120 = v46;
            simd_float3 v110 = v48;
            simd_float3 v111 = v47;
            simd_float3 v109 = v49;
            swift_release();
            v13[6].columns[2] = v120;
            v13[7].columns[0] = v111;
            v13[7].columns[1] = v110;
            v13[7].columns[2] = v109;
            swift_unownedRetainStrong();
            DepthProcessor.transformer.getter();
            swift_release();
            Transformer.cameraToClip.getter(v123);
            swift_release();
            float v50 = v123[0];
            v51.f32[0] = v50;
            float v52 = v123[2];
            v51.f32[1] = v52;
            *(float *)&unsigned int v53 = v123[4];
            v51.i64[1] = v53;
            *(float *)&unsigned int v54 = v123[1];
            *(float *)&unsigned int v55 = v123[3];
            *(float *)&unsigned int v56 = v123[5];
            v57.i64[0] = __PAIR64__(v55, v54);
            v57.i64[1] = v56;
            v13[8].columns[0] = v51;
            v13[8].columns[1] = v57;
            v13[8].columns[2] = (simd_float3)xmmword_22F227080;
            swift_unownedRetainStrong();
            DepthProcessor.transformer.getter();
            swift_release();
            Transformer.clipToCamera.getter(v124);
            swift_release();
            *(float *)&unsigned int v58 = v124[0];
            *(float *)&unsigned int v59 = v124[2];
            v60.i64[0] = __PAIR64__(v59, v58);
            *(float *)&unsigned int v61 = v124[4];
            v60.i64[1] = v61;
            float v62 = v124[1];
            v63.f32[0] = v62;
            float v64 = v124[3];
            v63.f32[1] = v64;
            *(float *)&unsigned int v65 = v124[5];
            v63.i64[1] = v65;
            v13[9].columns[0] = v60;
            v13[9].columns[1] = v63;
            v13[9].columns[2] = (simd_float3)xmmword_22F227080;
            swift_unownedRetainStrong();
            DepthProcessor.transformer.getter();
            swift_release();
            Transformer.clipToCameraNormalized.getter(v125);
            swift_release();
            *(float *)&unsigned int v66 = v125[0];
            *(float *)&unsigned int v67 = v125[2];
            v68.i64[0] = __PAIR64__(v67, v66);
            *(float *)&unsigned int v69 = v125[4];
            v68.i64[1] = v69;
            *(float *)&unsigned int v70 = v125[1];
            *(float *)&unsigned int v71 = v125[3];
            *(float *)&unsigned int v72 = v125[5];
            v73.i64[0] = __PAIR64__(v71, v70);
            v73.i64[1] = v72;
            v13[10].columns[0] = v68;
            v13[10].columns[1] = v73;
            v13[10].columns[2] = (simd_float3)xmmword_22F227080;
            if (*(unsigned char *)(v2 + 152))
            {
LABEL_27:
              __break(1u);
              goto LABEL_28;
            }
            if (*(unsigned char *)(v2 + 184))
            {
LABEL_28:
              __break(1u);
              goto LABEL_29;
            }
            objc_msgSend(v7, sel_imageResolution);
            ARViewToCameraImageTransform();
            *(float *)&unsigned int v74 = v126;
            *(float *)&unsigned int v75 = v128;
            *(float *)&unsigned int v76 = v130;
            v77.i64[0] = __PAIR64__(v75, v74);
            v77.i64[1] = v76;
            *(float *)&unsigned int v78 = v127;
            *(float *)&unsigned int v79 = v129;
            *(float *)&unsigned int v80 = v131;
            v81.i64[0] = __PAIR64__(v79, v78);
            v81.i64[1] = v80;
            v13[11].columns[0] = v77;
            v13[11].columns[1] = v81;
            v13[11].columns[2] = (simd_float3)xmmword_22F227080;
            v13[15].columns[0].i32[3] = 100000;
            if (*(unsigned char *)(v2 + 152))
            {
LABEL_29:
              __break(1u);
              goto LABEL_30;
            }
            CGFloat Width = CGRectGetWidth(*(CGRect *)(v2 + 120));
            if (*(unsigned char *)(v2 + 152))
            {
LABEL_30:
              __break(1u);
              return;
            }
            CGFloat Height = CGRectGetHeight(*(CGRect *)(v2 + 120));
            v83.f64[0] = Width;
            v83.f64[1] = Height;
            *(float32x2_t *)v13[15].columns[0].f32 = vcvt_f32_f64(v83);
            swift_unownedRetainStrong();
            ADProcessor.adConfig.getter();
            swift_release();
            swift_release();
            v13[15].columns[0].i32[2] = 1065353216;
            swift_unownedRetainStrong();
            ADProcessor.transformer.getter();
            swift_release();
            ADTransformer.adToCamera.getter(&v126);
            swift_release();
            *(float *)&unsigned int v84 = v126;
            *(float *)&unsigned int v85 = v128;
            v86.i64[0] = __PAIR64__(v85, v84);
            *(float *)&unsigned int v87 = v130;
            v86.i64[1] = v87;
            *(float *)&unsigned int v88 = v127;
            *(float *)&unsigned int v89 = v129;
            v90.i64[0] = __PAIR64__(v89, v88);
            *(float *)&unsigned int v91 = v131;
            v90.i64[1] = v91;
            v13[12].columns[0] = v86;
            v13[12].columns[1] = v90;
            v13[12].columns[2] = (simd_float3)xmmword_22F227080;
          }
          int v121 = a1;
          v13[1].columns[1] = (simd_float3)v113;
          v13[1].columns[2] = (simd_float3)v114;
          v13[2].columns[0] = (simd_float3)v116;
          v13[2].columns[1] = (simd_float3)v118;
          if ((*v15 & 1) == 0)
          {
            float32x4_t v92 = *(float32x4_t *)(v2 + 208);
            float32x4_t v93 = *(float32x4_t *)(v2 + 224);
            float32x4_t v94 = *(float32x4_t *)(v2 + 240);
            float32x4_t v95 = *(float32x4_t *)(v2 + 256);
            v13[2].columns[2] = (simd_float3)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v92, v113.f32[0]), v93, *(float32x2_t *)v113.f32, 1), v94, v113, 2), v95, v113, 3);
            v13[3].columns[0] = (simd_float3)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v92, v114.f32[0]), v93, *(float32x2_t *)v114.f32, 1), v94, v114, 2), v95, v114, 3);
            v13[3].columns[1] = (simd_float3)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v92, v116.f32[0]), v93, *(float32x2_t *)v116.f32, 1), v94, v116, 2), v95, v116, 3);
            v13[3].columns[2] = (simd_float3)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v92, v118.f32[0]), v93, *(float32x2_t *)v118.f32, 1), v94, v118, 2), v95, v118, 3);
            objc_msgSend(v7, sel_transform);
            v13[4].columns[0] = v96;
            v13[4].columns[1] = v97;
            v13[4].columns[2] = v98;
            v13[5].columns[0] = v99;
            uint64_t v100 = *(void *)(v2 + 160);
            swift_unownedRetainStrong();
            swift_beginAccess();
            float32x4_t v119 = v7;
            uint64_t v102 = *(void *)(v100 + 128);
            uint64_t v101 = *(void *)(v100 + 136);
            uint64_t v104 = *(void *)(v100 + 144);
            uint64_t v103 = *(void *)(v100 + 152);
            uint64_t v106 = *(void *)(v100 + 160);
            uint64_t v105 = *(void *)(v100 + 168);
            uint64_t v117 = *(void *)(v100 + 176);
            uint64_t v115 = *(void *)(v100 + 184);
            char v107 = *(unsigned char *)(v100 + 192);
            swift_release();
            if ((v107 & 1) == 0)
            {
              v13[5].columns[1].i64[0] = v102;
              v13[5].columns[1].i64[1] = v101;
              v13[5].columns[2].i64[0] = v104;
              v13[5].columns[2].i64[1] = v103;
              v13[6].columns[0].i64[0] = v106;
              v13[6].columns[0].i64[1] = v105;
              v13[6].columns[1].i64[0] = v117;
              v13[6].columns[1].i64[1] = v115;
              swift_beginAccess();
              long long v108 = *(void (**)(void *))(**(void **)(v2 + 16) + 264);
              swift_retain();
              v108(v121);
              swift_release();
              *(unsigned char *)(v2 + 72) = 1;

              return;
            }
            goto LABEL_25;
          }
LABEL_24:
          __break(1u);
LABEL_25:
          __break(1u);
          goto LABEL_26;
        }
      }
      __break(1u);
      goto LABEL_24;
    }
  }
}

uint64_t sub_22F1B92F8()
{
  if (*(void *)(v0 + 104))
  {
    uint64_t v1 = *(void *)(v0 + 104);
  }
  else
  {
    type metadata accessor for DebugWorldNode();
    swift_allocObject();
    uint64_t v2 = swift_retain();
    uint64_t v1 = sub_22F1AE7A8(v2);
    swift_beginAccess();
    swift_retain();
    MetalNode.addChild(_:at:)(v1, 0, 1);
    swift_release();
    *(void *)(v0 + 104) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

id sub_22F1B93B8()
{
  if (*(void *)(v0 + 96))
  {
    id v1 = *(id *)(v0 + 96);
  }
  else
  {
    type metadata accessor for DebugLocalNode();
    swift_allocObject();
    uint64_t v2 = swift_retain();
    id v1 = sub_22F187F58(v2);
    swift_beginAccess();
    swift_retain();
    MetalNode.addChild(_:at:)((uint64_t)v1, 0, 1);
    swift_release();
    *(void *)(v0 + 96) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

id sub_22F1B9478()
{
  if (*(void *)(v0 + 112))
  {
    id v1 = *(id *)(v0 + 112);
  }
  else
  {
    type metadata accessor for DebugADNode();
    swift_allocObject();
    uint64_t v2 = swift_retain();
    id v1 = sub_22F1ADD68(v2);
    swift_beginAccess();
    swift_retain();
    MetalNode.addChild(_:at:)((uint64_t)v1, 0, 0);
    swift_release();
    *(void *)(v0 + 112) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t OverlayMetalScene.depthProcessor.getter()
{
  return swift_unownedRetainStrong();
}

uint64_t OverlayMetalScene.adProcessor.getter()
{
  return swift_unownedRetainStrong();
}

uint64_t OverlayMetalScene.orientation.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 176);
}

uint64_t OverlayMetalScene.uniformsBuffer.getter()
{
  return swift_unknownObjectRetain();
}

id sub_22F1B95B8(void *a1, uint64_t a2)
{
  *(_OWORD *)(v2 + 80) = xmmword_22F2285A0;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(void *)(v2 + 144) = 0;
  *(unsigned char *)(v2 + 152) = 1;
  *(void *)(v2 + 176) = 0;
  *(unsigned char *)(v2 + 184) = 1;
  *(void *)(v2 + 192) = 0;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(unsigned char *)(v2 + 272) = 1;
  *(void *)(v2 + 160) = a2;
  swift_unownedRetainStrong();
  swift_beginAccess();
  uint64_t v5 = *(void *)(a2 + 208);
  swift_retain();
  swift_unownedRetain();
  swift_retain();
  id result = (id)swift_release();
  if (!v5)
  {
    __break(1u);
    goto LABEL_15;
  }
  *(void *)(v2 + 168) = v5;
  swift_unownedRetain();
  swift_release();
  objc_msgSend(a1, sel_bounds);
  *(void *)(v2 + 120) = v7;
  *(void *)(v2 + 128) = v8;
  *(void *)(v2 + 136) = v9;
  *(void *)(v2 + 144) = v10;
  *(unsigned char *)(v2 + 152) = 0;
  swift_release();
  id v11 = a1;
  id v12 = sub_22F1DA80C((uint64_t)v11, 1);

  uint64_t v13 = *((void *)v12 + 20);
  swift_unownedRetainStrong();
  uint64_t v14 = *(void *)(v13 + 80);
  swift_retain();
  swift_release();
  swift_beginAccess();
  *((void *)v12 + 22) = v14;
  *((unsigned char *)v12 + 184) = 0;
  id result = objc_msgSend(*((id *)v12 + 4), sel_newBufferWithLength_options_, 752, 0);
  if (!result)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  id v15 = result;
  swift_beginAccess();
  *((void *)v12 + 24) = v15;
  swift_unknownObjectRelease();
  uint64_t v16 = *((void *)v12 + 20);
  swift_unownedRetainStrong();
  swift_beginAccess();
  uint64_t v17 = *(void *)(v16 + 240);
  swift_release();
  if ((v17 & 8) != 0) {
    goto LABEL_7;
  }
  uint64_t v18 = *((void *)v12 + 20);
  swift_unownedRetainStrong();
  swift_beginAccess();
  uint64_t v19 = *(void *)(v18 + 240);
  swift_release();
  if ((v19 & 0x10) != 0) {
    goto LABEL_7;
  }
  uint64_t v20 = *((void *)v12 + 20);
  swift_unownedRetainStrong();
  swift_beginAccess();
  uint64_t v21 = *(void *)(v20 + 240);
  swift_release();
  if ((v21 & 0x2000) != 0
    || (uint64_t v22 = *((void *)v12 + 20),
        swift_unownedRetainStrong(),
        swift_beginAccess(),
        uint64_t v23 = *(void *)(v22 + 240),
        swift_release(),
        (v23 & 0x8000) != 0))
  {
LABEL_7:
    double v24 = sub_22F1B9478();
    swift_beginAccess();
    v24[32] = 1;
    swift_beginAccess();
    v24[33] = 1;
    swift_beginAccess();
    v24[34] = 1;
    swift_release();
  }
  uint64_t v25 = *((void *)v12 + 20);
  swift_unownedRetainStrong();
  swift_beginAccess();
  uint64_t v26 = *(void *)(v25 + 240);
  swift_release();
  if ((v26 & 2) != 0)
  {
    CGFloat v27 = sub_22F1B93B8();
    swift_beginAccess();
    v27[32] = 1;
    swift_beginAccess();
    v27[33] = 1;
    swift_beginAccess();
    v27[34] = 1;
    swift_release();
  }
  uint64_t v28 = *((void *)v12 + 20);
  swift_unownedRetainStrong();
  swift_beginAccess();
  uint64_t v29 = *(void *)(v28 + 240);
  swift_release();
  if ((v29 & 4) != 0)
  {
    float32x4_t v30 = (unsigned char *)sub_22F1B92F8();
    swift_release();
    swift_release();

    swift_beginAccess();
    v30[32] = 1;
    swift_beginAccess();
    v30[33] = 1;
    swift_beginAccess();
    v30[34] = 1;
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
  }
  return v12;
}

uint64_t sub_22F1B99B0()
{
  swift_release();
  swift_release();
  swift_release();
  swift_unownedRelease();
  swift_unownedRelease();
  return swift_unknownObjectRelease();
}

uint64_t OverlayMetalScene.deinit()
{
  swift_release();
  swift_unknownObjectUnownedDestroy();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_unownedRelease();
  swift_unownedRelease();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t OverlayMetalScene.__deallocating_deinit()
{
  OverlayMetalScene.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for OverlayMetalScene()
{
  return self;
}

uint64_t Numeric.squared()()
{
  return sub_22F223EA8();
}

uint64_t ObjectPool.count.getter()
{
  swift_beginAccess();
  swift_bridgeObjectRetain();
  uint64_t v0 = sub_22F223E58();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ObjectPool.__allocating_init(allocator:deallocator:synchronized:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = swift_allocObject();
  uint64_t v11 = _s17MeasureFoundation10ObjectPoolC7objects33_8B01F5F47CB49D64DA54EB87E4B4A93DLLShyxGvpfi_0();
  *(_DWORD *)(v10 + 60) = 0;
  *(void *)(v10 + 16) = v11;
  *(void *)(v10 + 24) = a1;
  *(void *)(v10 + 32) = a2;
  *(void *)(v10 + 40) = a3;
  *(void *)(v10 + 48) = a4;
  *(unsigned char *)(v10 + 56) = a5;
  return v10;
}

uint64_t ObjectPool.init(allocator:deallocator:synchronized:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v11 = _s17MeasureFoundation10ObjectPoolC7objects33_8B01F5F47CB49D64DA54EB87E4B4A93DLLShyxGvpfi_0();
  *(_DWORD *)(v5 + 60) = 0;
  *(void *)(v5 + 16) = v11;
  *(void *)(v5 + 24) = a1;
  *(void *)(v5 + 32) = a2;
  *(void *)(v5 + 40) = a3;
  *(void *)(v5 + 48) = a4;
  *(unsigned char *)(v5 + 56) = a5;
  return v5;
}

uint64_t ObjectPool.deinit()
{
  ObjectPool.clear()();
  swift_bridgeObjectRelease();
  swift_release();
  sub_22F1B4AC8(*(void *)(v0 + 40));
  return v0;
}

uint64_t ObjectPool.__deallocating_deinit()
{
  ObjectPool.deinit();
  return swift_deallocClassInstance();
}

uint64_t ObjectPool.acquire()()
{
  if (*(unsigned char *)(v0 + 56) == 1)
  {
    swift_beginAccess();
    os_unfair_lock_lock((os_unfair_lock_t)(v0 + 60));
    swift_endAccess();
  }
  swift_beginAccess();
  swift_bridgeObjectRetain();
  uint64_t v1 = sub_22F223E58();
  uint64_t v2 = swift_bridgeObjectRelease();
  if (v1 < 1)
  {
    (*(void (**)(uint64_t))(v0 + 24))(v2);
  }
  else
  {
    swift_beginAccess();
    sub_22F223E98();
    sub_22F223E28();
    swift_endAccess();
  }
  return sub_22F1BA170(v0);
}

uint64_t ObjectPool.release(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 80);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v13 - v9;
  if (*(unsigned char *)(v1 + 56) == 1)
  {
    swift_beginAccess();
    os_unfair_lock_lock((os_unfair_lock_t)(v1 + 60));
    swift_endAccess();
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  swift_beginAccess();
  sub_22F223E98();
  char v11 = sub_22F223E68();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  swift_endAccess();
  sub_22F1BA170(v2);
  return v11 & 1;
}

Swift::Int __swiftcall ObjectPool.release(_:)(Swift::OpaquePointer a1)
{
  if (*(unsigned char *)(v1 + 56) == 1)
  {
    swift_beginAccess();
    os_unfair_lock_lock((os_unfair_lock_t)(v1 + 60));
    a1._rawValue = (void *)swift_endAccess();
  }
  MEMORY[0x270FA5388](a1._rawValue);
  sub_22F223DD8();
  swift_getWitnessTable();
  sub_22F223C68();
  sub_22F1BA170(v1);
  return 0;
}

uint64_t sub_22F1BA170(uint64_t result)
{
  if (*(unsigned char *)(result + 56) == 1)
  {
    uint64_t v1 = (os_unfair_lock_s *)(result + 60);
    swift_beginAccess();
    os_unfair_lock_unlock(v1);
    return swift_endAccess();
  }
  return result;
}

uint64_t sub_22F1BA1C8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void *)(*(void *)a2 + 80);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v13 - v9;
  (*(void (**)(char *))(v5 + 16))(v8);
  swift_beginAccess();
  sub_22F223E98();
  char v11 = sub_22F223E68();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  uint64_t result = swift_endAccess();
  if (v11)
  {
    if (__OFADD__(*a3, 1)) {
      __break(1u);
    }
    else {
      ++*a3;
    }
  }
  return result;
}

Swift::Void __swiftcall ObjectPool.clear()()
{
  int v1 = *(unsigned __int8 *)(v0 + 56);
  if (v1 == 1)
  {
    swift_beginAccess();
    os_unfair_lock_lock((os_unfair_lock_t)(v0 + 60));
    swift_endAccess();
  }
  uint64_t v2 = *(void *)(v0 + 40);
  if (v2)
  {
    swift_beginAccess();
    sub_22F1B4AD8(v2);
    sub_22F223E98();
    swift_bridgeObjectRetain();
    swift_getWitnessTable();
    sub_22F223C68();
    swift_bridgeObjectRelease();
    sub_22F1B4AC8(v2);
  }
  swift_beginAccess();
  sub_22F223E98();
  sub_22F223E88();
  swift_endAccess();
  if (v1)
  {
    swift_beginAccess();
    os_unfair_lock_unlock((os_unfair_lock_t)(v0 + 60));
    swift_endAccess();
  }
}

uint64_t sub_22F1BA4FC(uint64_t a1)
{
  return sub_22F1BA1C8(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_22F1BA518()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for ObjectPool()
{
  return __swift_instantiateGenericMetadata();
}

BOOL static PatchTracker.Patch.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 16) == *(void *)(a2 + 16);
}

uint64_t sub_22F1BA5BC()
{
  uint64_t v1 = v0;
  int v2 = *(unsigned __int8 *)(v0 + 56);
  if (v2 == 1)
  {
    swift_beginAccess();
    os_unfair_lock_lock((os_unfair_lock_t)(v0 + 60));
    swift_endAccess();
  }
  int v3 = (uint64_t *)(v0 + 16);
  uint64_t v4 = swift_beginAccess();
  if (!*(void *)(*(void *)(v1 + 16) + 16))
  {
    (*(void (**)(void *__return_ptr, uint64_t))(v1 + 24))(v14, v4);
    if (!v2) {
      return v14[0];
    }
    goto LABEL_6;
  }
  swift_beginAccess();
  uint64_t result = *v3;
  if (*(void *)(*v3 + 16))
  {
    uint64_t v6 = sub_22F1C24F4(result);
    uint64_t v8 = v7;
    char v10 = v9 & 1;
    v14[0] = sub_22F1C2594(v6, v7);
    v14[1] = v11;
    v14[2] = v12;
    v14[3] = v13;
    swift_endAccess();
    sub_22F1C66D4(v6, v8, v10);
    if (!v2) {
      return v14[0];
    }
LABEL_6:
    swift_beginAccess();
    os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 60));
    swift_endAccess();
    return v14[0];
  }
  __break(1u);
  return result;
}

uint64_t *PatchTracker.DebuggerClass.unsafeMutableAddressor()
{
  return &static PatchTracker.DebuggerClass;
}

uint64_t static PatchTracker.DebuggerClass.getter()
{
  return static PatchTracker.DebuggerClass;
}

uint64_t static PatchTracker.DebuggerClass.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_beginAccess();
  static PatchTracker.DebuggerClass = a1;
  qword_26869BC90 = a2;
  return result;
}

uint64_t (*static PatchTracker.DebuggerClass.modify())()
{
  return j_j__swift_endAccess;
}

float sub_22F1BA7F0()
{
  if ((*(unsigned char *)(v0 + 20) & 1) == 0) {
    return *(float *)(v0 + 16);
  }
  sub_22F1BA828(v0);
  *(float *)(v0 + 16) = result;
  *(unsigned char *)(v0 + 20) = 0;
  return result;
}

void sub_22F1BA828(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 808);
  uint64_t ObjectType = swift_getObjectType();
  int v3 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(ObjectType, v1);
  id v4 = objc_msgSend(v3, sel_currentFrame);

  if (v4)
  {
    id v5 = objc_msgSend(v4, sel_camera);

    objc_msgSend(v5, sel_imageResolution);
  }
  else
  {
    sub_22F224538();
    __break(1u);
  }
}

double PatchTracker.viewportSize.getter()
{
  if ((*(unsigned char *)(v0 + 48) & 1) == 0) {
    return *(double *)(v0 + 32);
  }
  uint64_t v1 = *(void *)(v0 + 808);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(ObjectType, v1);
  double result = v3;
  *(double *)(v0 + 32) = v3;
  *(void *)(v0 + 40) = v5;
  *(unsigned char *)(v0 + 48) = 0;
  return result;
}

void sub_22F1BA9A4()
{
  uint64_t v1 = v0;
  if (*(unsigned char *)(v0 + 88))
  {
    uint64_t v2 = *(void *)(v0 + 808);
    uint64_t ObjectType = swift_getObjectType();
    id v4 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(ObjectType, v2);
    id v5 = objc_msgSend(v4, sel_currentFrame);

    if (v5)
    {
      id v6 = objc_msgSend(v5, sel_camera);

      objc_msgSend(v6, sel_imageResolution);
      double v8 = v7;
      objc_msgSend(v6, sel_imageResolution);
      double v10 = v9;
      double v11 = v9 / v8;
      double v12 = PatchTracker.viewportSize.getter();
      double v13 = *(double *)(v1 + 40);

      if (v12 / v13 >= v11) {
        double v14 = v10;
      }
      else {
        double v14 = v8 * (v12 / v13);
      }
      if (v12 / v13 >= v11) {
        double v15 = v10 / (v12 / v13);
      }
      else {
        double v15 = v8;
      }
      *(double *)(v1 + 56) = (v8 - v15) * 0.5;
      *(double *)(v1 + 64) = (v10 - v14) * 0.5;
      *(double *)(v1 + 72) = v15;
      *(double *)(v1 + 80) = v14;
      *(unsigned char *)(v1 + 88) = 0;
    }
    else
    {
      sub_22F224538();
      __break(1u);
    }
  }
}

double sub_22F1BAB2C()
{
  if ((*(unsigned char *)(v0 + 128) & 1) == 0) {
    return *(double *)(v0 + 96);
  }
  sub_22F1BA9A4();
  double result = round(v1);
  *(double *)(v0 + 96) = result;
  *(double *)(v0 + 104) = round(v3);
  *(double *)(v0 + 112) = round(v4);
  *(double *)(v0 + 120) = round(v5);
  *(unsigned char *)(v0 + 128) = 0;
  return result;
}

void sub_22F1BAB78()
{
  if (*(unsigned char *)(v0 + 152))
  {
    sub_22F1BA9A4();
    double v2 = v1;
    double v4 = v3;
    double v5 = sub_22F1BA7F0();
    *(double *)(v0 + 136) = round(v2 * v5);
    *(double *)(v0 + 144) = round(v4 * v5);
    *(unsigned char *)(v0 + 152) = 0;
  }
}

double sub_22F1BABD0()
{
  if ((*(unsigned char *)(v0 + 192) & 1) == 0) {
    return *(double *)(v0 + 160);
  }
  sub_22F1BAB78();
  *(void *)(v0 + 160) = 0;
  *(void *)(v0 + 168) = 0;
  *(void *)(v0 + 176) = v1;
  *(void *)(v0 + 184) = v2;
  double result = 0.0;
  *(unsigned char *)(v0 + 192) = 0;
  return result;
}

uint64_t sub_22F1BAC24()
{
  if (*(unsigned char *)(v0 + 208) != 1) {
    return *(void *)(v0 + 200);
  }
  uint64_t result = sub_22F1BAC60(v0);
  *(void *)(v0 + 200) = result;
  *(unsigned char *)(v0 + 208) = 0;
  return result;
}

uint64_t sub_22F1BAC60(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 808);
  uint64_t ObjectType = swift_getObjectType();
  double v3 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(ObjectType, v1);
  id v4 = objc_msgSend(v3, sel_currentFrame);

  if (v4)
  {
    double v5 = (__CVBuffer *)objc_msgSend(v4, sel_capturedImage);
    v19[0] = sub_22F1BAB2C();
    v19[1] = v6;
    void v19[2] = v7;
    v19[3] = v8;
    char v20 = 0;
    sub_22F1FE7D4(v5, 0, (uint64_t)v19, (uint64_t)v16);

    sub_22F1899D0((uint64_t)v16, (uint64_t)v17, &qword_268694B90);
    double v9 = 0;
    if ((v18 & 1) == 0)
    {
      double v10 = (void *)v17[0];
      vImagePixelCount v11 = v17[1];
      int64_t v12 = v17[2];
      int64_t v13 = v17[3];
      float v14 = sub_22F1BA7F0();
      double v9 = _sSo13vImage_BufferV17MeasureFoundationE08makeTempB15ForScalePlanar803srcaB011scaleFactor5flagsSvSgAB_SfSitFZ_0(v10, v11, v12, v13, 0, v14);
    }

    return (uint64_t)v9;
  }
  else
  {
    uint64_t result = sub_22F224538();
    __break(1u);
  }
  return result;
}

uint64_t sub_22F1BADD4()
{
  if (*(void *)(v0 + 216))
  {
    uint64_t v1 = *(void *)(v0 + 216);
  }
  else
  {
    swift_unownedRetainStrong();
    swift_unownedRetain();
    swift_release();
    uint64_t v2 = swift_allocObject();
    *(void *)(v2 + 16) = v0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2686954B8);
    uint64_t v1 = swift_allocObject();
    uint64_t v3 = MEMORY[0x263F8EE88];
    *(_DWORD *)(v1 + 60) = 0;
    *(void *)(v1 + 16) = v3;
    *(void *)(v1 + 24) = sub_22F1C6878;
    *(void *)(v1 + 32) = v2;
    *(void *)(v1 + 40) = sub_22F1BAFC8;
    *(void *)(v1 + 48) = 0;
    *(unsigned char *)(v1 + 56) = 1;
    *(void *)(v0 + 216) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

size_t sub_22F1BAEB0@<X0>(size_t *a1@<X8>)
{
  swift_unownedRetainStrong();
  sub_22F1BAB78();
  double v3 = v2;
  size_t result = swift_release();
  if ((~*(void *)&v3 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v3 <= -9.22337204e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v3 >= 9.22337204e18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  swift_unownedRetainStrong();
  sub_22F1BAB78();
  double v6 = v5;
  size_t result = swift_release();
  if ((~*(void *)&v6 & 0x7FF0000000000000) == 0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v6 <= -9.22337204e18)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v6 >= 9.22337204e18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v7 = (uint64_t)v3;
  if ((uint64_t)v3 < 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v8 = (uint64_t)v6;
  if ((uint64_t)v6 < 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  size_t result = v8 * v7;
  if ((unsigned __int128)(v8 * (__int128)v7) >> 64 == (v8 * v7) >> 63)
  {
    size_t result = (size_t)malloc(result);
    *a1 = result;
    a1[1] = v8;
    a1[2] = v7;
    a1[3] = v7;
    return result;
  }
LABEL_19:
  __break(1u);
  return result;
}

void sub_22F1BAFC8(void *a1)
{
  if (!*a1) {
    __break(1u);
  }
  JUMPOUT(0x230FB40E0);
}

uint64_t PatchTracker.patchSizeInPixels.getter()
{
  return 11;
}

uint64_t PatchTracker.minMatchingPatches.getter()
{
  return 5;
}

uint64_t PatchTracker.maxMatchingPatches.getter()
{
  return 8;
}

double sub_22F1BAFF8()
{
  if ((*(unsigned char *)(v0 + 272) & 1) == 0) {
    return *(double *)(v0 + 256);
  }
  __asm { FMOV            V0.2D, #11.0 }
  *(_OWORD *)(v0 + 256) = _Q0;
  *(unsigned char *)(v0 + 272) = 0;
  return 11.0;
}

double sub_22F1BB024()
{
  if ((*(unsigned char *)(v0 + 296) & 1) == 0) {
    return *(double *)(v0 + 280);
  }
  __asm { FMOV            V0.2D, #5.0 }
  *(_OWORD *)(v0 + 280) = _Q0;
  *(unsigned char *)(v0 + 296) = 0;
  return 5.0;
}

double sub_22F1BB050()
{
  if ((*(unsigned char *)(v0 + 320) & 1) == 0) {
    return *(double *)(v0 + 304);
  }
  double result = round(11.0 / sub_22F1BA7F0());
  double v2 = round(11.0 / *(float *)(v0 + 16));
  *(double *)(v0 + 304) = result;
  *(double *)(v0 + 312) = v2;
  *(unsigned char *)(v0 + 320) = 0;
  return result;
}

uint64_t sub_22F1BB0AC()
{
  if (*(void *)(v0 + 328))
  {
    uint64_t v1 = *(void *)(v0 + 328);
  }
  else
  {
    uint64_t v1 = sub_22F223D48();
    *(void *)(v1 + 16) = 121;
    memset_pattern16((void *)(v1 + 32), &unk_22F2286D0, 0xF2uLL);
    *(void *)(v0 + 328) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

void *sub_22F1BB134()
{
  if (*(unsigned char *)(v0 + 368) != 1) {
    return *(void **)(v0 + 336);
  }
  double result = malloc(0x79uLL);
  *(void *)(v0 + 336) = result;
  *(int64x2_t *)(v0 + 344) = vdupq_n_s64(0xBuLL);
  *(void *)(v0 + 360) = 11;
  *(unsigned char *)(v0 + 368) = 0;
  return result;
}

void *sub_22F1BB194()
{
  if (*(unsigned char *)(v0 + 384) != 1) {
    return *(void **)(v0 + 376);
  }
  double result = sub_22F1BB1DC();
  *(void *)(v0 + 376) = result;
  *(unsigned char *)(v0 + 384) = 0;
  return result;
}

void *sub_22F1BB1DC()
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  sub_22F1BADD4();
  uint64_t v0 = (void *)sub_22F1BA5BC();
  vImagePixelCount v2 = v1;
  vImagePixelCount v4 = v3;
  size_t v6 = v5;
  swift_release();
  uint64_t v7 = sub_22F1BB0AC();
  unint64_t divisor = *(void *)(sub_22F1BB0AC() + 16);
  swift_bridgeObjectRelease();
  if (divisor >> 31) {
    __break(1u);
  }
  dest.datCGFloat a = v0;
  dest.CGFloat height = v2;
  dest.CGFloat width = v4;
  dest.rowBytes = v6;
  vImage_Error v9 = vImageConvolve_Planar8(&dest, &dest, 0, 0, 0, (const int16_t *)(v7 + 32), 0xBu, 0xBu, divisor, 0, 0x84u);
  if (v9 < 1)
  {
    swift_bridgeObjectRelease();
    double v10 = 0;
  }
  else
  {
    double v10 = malloc(v9);
    swift_bridgeObjectRelease();
  }
  uint64_t v11 = sub_22F1BADD4();
  if (*(unsigned char *)(v11 + 56) == 1)
  {
    swift_beginAccess();
    os_unfair_lock_lock((os_unfair_lock_t)(v11 + 60));
    swift_endAccess();
    swift_beginAccess();
    sub_22F1C4E68((uint64_t *)&dest, (uint64_t)v0, v2, v4, v6);
    swift_endAccess();
    swift_beginAccess();
    os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 60));
  }
  else
  {
    swift_beginAccess();
    sub_22F1C4E68((uint64_t *)&dest, (uint64_t)v0, v2, v4, v6);
  }
  swift_endAccess();
  swift_release();
  return v10;
}

void *sub_22F1BB3D8()
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(v0 + 400) != 1) {
    return *(void **)(v0 + 392);
  }
  vImagePixelCount v1 = sub_22F1BB134();
  vImagePixelCount v3 = v2;
  vImagePixelCount v5 = v4;
  size_t v7 = v6;
  if (qword_268694390 != -1) {
    swift_once();
  }
  dest.datCGFloat a = v1;
  dest.CGFloat height = v3;
  dest.CGFloat width = v5;
  dest.rowBytes = v7;
  vImage_Error v8 = vImageConvolve_Planar8(&dest, &dest, 0, 0, 0, (const int16_t *)(static CVUtil.embossKernel + 32), 3u, 3u, 1, 0, 0x84u);
  if (v8 < 1) {
    double result = 0;
  }
  else {
    double result = malloc(v8);
  }
  *(void *)(v0 + 392) = result;
  *(unsigned char *)(v0 + 400) = 0;
  return result;
}

uint64_t sub_22F1BB500()
{
  if (*(void *)(v0 + 512))
  {
    uint64_t v1 = *(void *)(v0 + 512);
  }
  else
  {
    type metadata accessor for MeanShiftPointFilter();
    uint64_t v1 = swift_allocObject();
    *(void *)(v1 + 16) = 3;
    *(_DWORD *)(v1 + 24) = 953267991;
    *(_WORD *)(v1 + 28) = 1;
    *(void *)(v0 + 512) = v1;
    swift_retain();
  }
  swift_retain();
  return v1;
}

CGAffineTransform *sub_22F1BB570@<X0>(CGFloat *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 680))
  {
    sub_22F1BAB78();
    CGFloat v4 = v3;
    CGFloat v6 = v5;
    double v7 = PatchTracker.viewportSize.getter();
    CGAffineTransformMakeScale(&t1, 1.0 / v7, 1.0 / *(double *)(v1 + 40));
    long long v25 = *(_OWORD *)&t1.c;
    long long v27 = *(_OWORD *)&t1.a;
    CGFloat tx = t1.tx;
    CGFloat ty = t1.ty;
    ARViewToCameraImageTransform();
    long long v10 = *(_OWORD *)&t1.a;
    long long v11 = *(_OWORD *)&t1.c;
    long long v12 = *(_OWORD *)&t1.tx;
    *(_OWORD *)&t1.CGFloat a = v27;
    *(_OWORD *)&t1.CGFloat c = v25;
    t1.CGFloat tx = tx;
    t1.CGFloat ty = ty;
    *(_OWORD *)&t2.CGFloat a = v10;
    *(_OWORD *)&t2.CGFloat c = v11;
    *(_OWORD *)&t2.CGFloat tx = v12;
    CGAffineTransformConcat(&v29, &t1, &t2);
    long long v26 = *(_OWORD *)&v29.c;
    long long v28 = *(_OWORD *)&v29.a;
    CGFloat v13 = v29.tx;
    CGFloat v14 = v29.ty;
    CGAffineTransformMakeScale(&t1, v4, v6);
    long long v15 = *(_OWORD *)&t1.a;
    long long v16 = *(_OWORD *)&t1.c;
    long long v17 = *(_OWORD *)&t1.tx;
    *(_OWORD *)&t1.CGFloat a = v28;
    *(_OWORD *)&t1.CGFloat c = v26;
    t1.CGFloat tx = v13;
    t1.CGFloat ty = v14;
    *(_OWORD *)&t2.CGFloat a = v15;
    *(_OWORD *)&t2.CGFloat c = v16;
    *(_OWORD *)&t2.CGFloat tx = v17;
    double result = CGAffineTransformConcat(&v29, &t1, &t2);
    CGFloat a = v29.a;
    CGFloat b = v29.b;
    CGFloat c = v29.c;
    CGFloat d = v29.d;
    CGFloat v24 = v29.tx;
    CGFloat v23 = v29.ty;
    *(CGFloat *)(v1 + 632) = v29.a;
    *(CGFloat *)(v1 + 640) = b;
    *(CGFloat *)(v1 + 648) = c;
    *(CGFloat *)(v1 + 656) = d;
    *(CGFloat *)(v1 + 664) = v24;
    *(CGFloat *)(v1 + 672) = v23;
    *(unsigned char *)(v1 + 680) = 0;
  }
  else
  {
    CGFloat v23 = *(double *)(v1 + 672);
    CGFloat v24 = *(double *)(v1 + 664);
    CGFloat d = *(double *)(v1 + 656);
    CGFloat c = *(double *)(v1 + 648);
    CGFloat b = *(double *)(v1 + 640);
    CGFloat a = *(double *)(v1 + 632);
  }
  *a1 = a;
  a1[1] = b;
  a1[2] = c;
  a1[3] = d;
  a1[4] = v24;
  a1[5] = v23;
  return result;
}

CGAffineTransform *sub_22F1BB6F0@<X0>(CGFloat *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 736))
  {
    sub_22F1BAB78();
    CGAffineTransformMakeScale(&t1, 1.0 / v3, 1.0 / v4);
    long long v22 = *(_OWORD *)&t1.c;
    long long v24 = *(_OWORD *)&t1.a;
    CGFloat tx = t1.tx;
    CGFloat ty = t1.ty;
    PatchTracker.viewportSize.getter();
    ARCameraImageToViewTransform();
    long long v7 = *(_OWORD *)&t1.a;
    long long v8 = *(_OWORD *)&t1.c;
    long long v9 = *(_OWORD *)&t1.tx;
    *(_OWORD *)&t1.CGFloat a = v24;
    *(_OWORD *)&t1.CGFloat c = v22;
    t1.CGFloat tx = tx;
    t1.CGFloat ty = ty;
    *(_OWORD *)&t2.CGFloat a = v7;
    *(_OWORD *)&t2.CGFloat c = v8;
    *(_OWORD *)&t2.CGFloat tx = v9;
    CGAffineTransformConcat(&v26, &t1, &t2);
    long long v23 = *(_OWORD *)&v26.c;
    long long v25 = *(_OWORD *)&v26.a;
    CGFloat v10 = v26.tx;
    CGFloat v11 = v26.ty;
    CGAffineTransformMakeScale(&t1, *(CGFloat *)(v1 + 32), *(CGFloat *)(v1 + 40));
    long long v12 = *(_OWORD *)&t1.a;
    long long v13 = *(_OWORD *)&t1.c;
    long long v14 = *(_OWORD *)&t1.tx;
    *(_OWORD *)&t1.CGFloat a = v25;
    *(_OWORD *)&t1.CGFloat c = v23;
    t1.CGFloat tx = v10;
    t1.CGFloat ty = v11;
    *(_OWORD *)&t2.CGFloat a = v12;
    *(_OWORD *)&t2.CGFloat c = v13;
    *(_OWORD *)&t2.CGFloat tx = v14;
    double result = CGAffineTransformConcat(&v26, &t1, &t2);
    CGFloat a = v26.a;
    CGFloat b = v26.b;
    CGFloat c = v26.c;
    CGFloat d = v26.d;
    CGFloat v21 = v26.tx;
    CGFloat v20 = v26.ty;
    *(CGFloat *)(v1 + 688) = v26.a;
    *(CGFloat *)(v1 + 696) = b;
    *(CGFloat *)(v1 + 704) = c;
    *(CGFloat *)(v1 + 712) = d;
    *(CGFloat *)(v1 + 720) = v21;
    *(CGFloat *)(v1 + 728) = v20;
    *(unsigned char *)(v1 + 736) = 0;
  }
  else
  {
    CGFloat v20 = *(double *)(v1 + 728);
    CGFloat v21 = *(double *)(v1 + 720);
    CGFloat d = *(double *)(v1 + 712);
    CGFloat c = *(double *)(v1 + 704);
    CGFloat b = *(double *)(v1 + 696);
    CGFloat a = *(double *)(v1 + 688);
  }
  *a1 = a;
  a1[1] = b;
  a1[2] = c;
  a1[3] = d;
  a1[4] = v21;
  a1[5] = v20;
  return result;
}

CGAffineTransform *sub_22F1BB860@<X0>(CGFloat *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 792))
  {
    sub_22F1BAB2C();
    CGFloat v4 = v3;
    CGFloat v6 = v5;
    double v7 = PatchTracker.viewportSize.getter();
    CGAffineTransformMakeScale(&t1, 1.0 / v7, 1.0 / *(double *)(v1 + 40));
    long long v30 = *(_OWORD *)&t1.c;
    long long v33 = *(_OWORD *)&t1.a;
    CGFloat tx = t1.tx;
    CGFloat ty = t1.ty;
    ARViewToCameraImageTransform();
    long long v10 = *(_OWORD *)&t1.a;
    long long v11 = *(_OWORD *)&t1.c;
    long long v12 = *(_OWORD *)&t1.tx;
    *(_OWORD *)&t1.CGFloat a = v33;
    *(_OWORD *)&t1.CGFloat c = v30;
    t1.CGFloat tx = tx;
    t1.CGFloat ty = ty;
    *(_OWORD *)&t2.CGFloat a = v10;
    *(_OWORD *)&t2.CGFloat c = v11;
    *(_OWORD *)&t2.CGFloat tx = v12;
    CGAffineTransformConcat(&v36, &t1, &t2);
    long long v31 = *(_OWORD *)&v36.c;
    long long v34 = *(_OWORD *)&v36.a;
    CGFloat v13 = v36.tx;
    CGFloat v14 = v36.ty;
    CGAffineTransformMakeScale(&t1, v4, v6);
    long long v15 = *(_OWORD *)&t1.a;
    long long v16 = *(_OWORD *)&t1.c;
    long long v17 = *(_OWORD *)&t1.tx;
    *(_OWORD *)&t1.CGFloat a = v34;
    *(_OWORD *)&t1.CGFloat c = v31;
    t1.CGFloat tx = v13;
    t1.CGFloat ty = v14;
    *(_OWORD *)&t2.CGFloat a = v15;
    *(_OWORD *)&t2.CGFloat c = v16;
    *(_OWORD *)&t2.CGFloat tx = v17;
    CGAffineTransformConcat(&v36, &t1, &t2);
    long long v32 = *(_OWORD *)&v36.c;
    long long v35 = *(_OWORD *)&v36.a;
    CGFloat v18 = v36.tx;
    CGFloat v19 = v36.ty;
    CGAffineTransformMakeTranslation(&t1, *(CGFloat *)(v1 + 96), *(CGFloat *)(v1 + 104));
    long long v20 = *(_OWORD *)&t1.a;
    long long v21 = *(_OWORD *)&t1.c;
    long long v22 = *(_OWORD *)&t1.tx;
    *(_OWORD *)&t1.CGFloat a = v35;
    *(_OWORD *)&t1.CGFloat c = v32;
    t1.CGFloat tx = v18;
    t1.CGFloat ty = v19;
    *(_OWORD *)&t2.CGFloat a = v20;
    *(_OWORD *)&t2.CGFloat c = v21;
    *(_OWORD *)&t2.CGFloat tx = v22;
    double result = CGAffineTransformConcat(&v36, &t1, &t2);
    CGFloat a = v36.a;
    CGFloat b = v36.b;
    CGFloat c = v36.c;
    CGFloat d = v36.d;
    CGFloat v29 = v36.tx;
    CGFloat v28 = v36.ty;
    *(CGFloat *)(v1 + 744) = v36.a;
    *(CGFloat *)(v1 + 752) = b;
    *(CGFloat *)(v1 + 760) = c;
    *(CGFloat *)(v1 + 768) = d;
    *(CGFloat *)(v1 + 776) = v29;
    *(CGFloat *)(v1 + 784) = v28;
    *(unsigned char *)(v1 + 792) = 0;
  }
  else
  {
    CGFloat v28 = *(double *)(v1 + 784);
    CGFloat v29 = *(double *)(v1 + 776);
    CGFloat d = *(double *)(v1 + 768);
    CGFloat c = *(double *)(v1 + 760);
    CGFloat b = *(double *)(v1 + 752);
    CGFloat a = *(double *)(v1 + 744);
  }
  *a1 = a;
  a1[1] = b;
  a1[2] = c;
  a1[3] = d;
  a1[4] = v29;
  a1[5] = v28;
  return result;
}

uint64_t *PatchTracker.DebugOptions.default.unsafeMutableAddressor()
{
  if (qword_268694448 != -1) {
    swift_once();
  }
  return &static PatchTracker.DebugOptions.default;
}

uint64_t PatchTracker.debugOptions.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 824);
}

uint64_t PatchTracker.debugOptions.setter(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 824) = a1;
  return result;
}

uint64_t (*PatchTracker.debugOptions.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t PatchTracker.__allocating_init(sceneView:motion:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  PatchTracker.init(sceneView:motion:)(a1, a2, a3);
  return v6;
}

uint64_t PatchTracker.init(sceneView:motion:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  *(_DWORD *)(v4 + 16) = 0;
  *(unsigned char *)(v4 + 20) = 1;
  *(void *)(v4 + 24) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(unsigned char *)(v4 + 48) = 1;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(unsigned char *)(v4 + 88) = 1;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(unsigned char *)(v4 + 128) = 1;
  *(_OWORD *)(v4 + 136) = 0u;
  *(unsigned char *)(v4 + 152) = 1;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(unsigned char *)(v4 + 192) = 1;
  *(void *)(v4 + 200) = 0;
  *(unsigned char *)(v4 + 208) = 1;
  *(_OWORD *)(v4 + 216) = xmmword_22F2286A0;
  *(_OWORD *)(v4 + 232) = xmmword_22F2286B0;
  *(_WORD *)(v4 + 248) = 256;
  *(_DWORD *)(v4 + 252) = 1082130432;
  *(_OWORD *)(v4 + 256) = 0u;
  *(unsigned char *)(v4 + 272) = 1;
  *(_OWORD *)(v4 + 280) = 0u;
  *(unsigned char *)(v4 + 296) = 1;
  *(_OWORD *)(v4 + 304) = 0u;
  *(unsigned char *)(v4 + 320) = 1;
  *(_OWORD *)(v4 + 328) = 0u;
  *(_OWORD *)(v4 + 344) = 0u;
  *(void *)(v4 + 360) = 0;
  *(unsigned char *)(v4 + 368) = 1;
  *(void *)(v4 + 376) = 0;
  *(unsigned char *)(v4 + 384) = 1;
  *(void *)(v4 + 392) = 0;
  *(unsigned char *)(v4 + 400) = 1;
  *(void *)(v4 + 408) = 20;
  *(unsigned char *)(v4 + 416) = 0;
  *(_DWORD *)(v4 + 420) = 953267991;
  *(void *)(v4 + 424) = 0x404E000000000000;
  *(void *)(v4 + 432) = 0x3F4CCCCD3F7746EALL;
  *(_DWORD *)(v4 + 440) = 1065185444;
  *(void *)(v4 + 448) = 3;
  *(_OWORD *)(v4 + 456) = xmmword_22F2286C0;
  *(void *)(v4 + 472) = 0x400000003E19999ALL;
  *(unsigned char *)(v4 + 480) = 1;
  *(void *)(v4 + 484) = 0x3D4CCCCDBCCCCCCDLL;
  *(unsigned char *)(v4 + 492) = 1;
  *(_DWORD *)(v4 + 496) = 1036831949;
  *(unsigned char *)(v4 + 500) = 1;
  *(_DWORD *)(v4 + 504) = 1056964608;
  *(void *)(v4 + 512) = 0;
  *(unsigned char *)(v4 + 520) = 1;
  *(_DWORD *)(v4 + 524) = 953267991;
  *(void *)(v4 + 528) = 0x3F0000003E32B8C2;
  uint64_t v8 = MEMORY[0x263F8EE80];
  *(unsigned char *)(v4 + 536) = 1;
  *(void *)(v4 + 544) = v8;
  *(void *)(v4 + 552) = 0x3FD0000000000000;
  *(void *)(v4 + 560) = 3;
  *(unsigned char *)(v4 + 568) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268694568);
  long long v9 = (_OWORD *)swift_allocObject();
  v9[1] = xmmword_22F2265B0;
  id v9[2] = xmmword_22F2265C0;
  __asm { FMOV            V1.2D, #15.0 }
  v9[3] = xmmword_22F2265D0;
  v9[4] = _Q1;
  *(void *)(v4 + 576) = v9;
  long long v15 = (_DWORD *)swift_slowAlloc();
  *long long v15 = 0;
  *(void *)(v4 + 584) = v15;
  uint64_t v16 = MEMORY[0x263F8EE78];
  *(void *)(v4 + 592) = MEMORY[0x263F8EE78];
  *(_OWORD *)(v4 + 600) = 0u;
  *(void *)(v4 + 616) = v16;
  *(void *)(v4 + 624) = 1;
  *(_OWORD *)(v4 + 632) = 0u;
  *(_OWORD *)(v4 + 648) = 0u;
  *(_OWORD *)(v4 + 664) = 0u;
  *(unsigned char *)(v4 + 680) = 1;
  *(_OWORD *)(v4 + 688) = 0u;
  *(_OWORD *)(v4 + 704) = 0u;
  *(_OWORD *)(v4 + 720) = 0u;
  *(unsigned char *)(v4 + 736) = 1;
  *(_OWORD *)(v4 + 744) = 0u;
  *(_OWORD *)(v4 + 760) = 0u;
  *(_OWORD *)(v4 + 776) = 0u;
  *(unsigned char *)(v4 + 792) = 1;
  if (qword_268694448 != -1) {
    swift_once();
  }
  swift_beginAccess();
  *(void *)(v4 + 824) = static PatchTracker.DebugOptions.default;
  *(_OWORD *)(v4 + 832) = 0u;
  *(_OWORD *)(v4 + 848) = 0u;
  *(void *)(v4 + 864) = 0;
  *(void *)(v4 + 800) = a1;
  *(void *)(v4 + 808) = a2;
  *(void *)(v4 + 816) = a3;
  swift_beginAccess();
  uint64_t v17 = static PatchTracker.DebuggerClass;
  if (static PatchTracker.DebuggerClass)
  {
    uint64_t v18 = qword_26869BC90;
    CGFloat v19 = *(void (**)(id, uint64_t, uint64_t, uint64_t, uint64_t))(qword_26869BC90 + 8);
    uint64_t v20 = sub_22F2241F8();
    long long v30 = &v27;
    uint64_t v27 = *(void *)(v20 - 8);
    uint64_t v28 = v20;
    MEMORY[0x270FA5388](v20);
    long long v22 = (char *)&v27 - v21;
    id v23 = a1;
    uint64_t v29 = a3;
    swift_retain();
    swift_retain();
    v19(v23, a2, v4, v17, v18);
    uint64_t v24 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v17) != 1)
    {
      *((void *)&v32 + 1) = v17;
      uint64_t v33 = v18;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v31);
      (*(void (**)(uint64_t *, char *, uint64_t))(v24 + 32))(boxed_opaque_existential_1, v22, v17);

      swift_release();
      goto LABEL_8;
    }

    swift_release();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v22, v28);
  }
  uint64_t v33 = 0;
  long long v31 = 0u;
  long long v32 = 0u;
LABEL_8:
  swift_beginAccess();
  sub_22F1C2314((uint64_t)&v31, v4 + 832);
  swift_endAccess();
  return v4;
}

uint64_t PatchTracker.deinit()
{
  uint64_t v1 = v0;
  swift_beginAccess();
  unint64_t v2 = *(void *)(v0 + 592);
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t result = sub_22F2245C8();
    uint64_t v3 = result;
    if (!result) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain_n();
    if (!v3) {
      goto LABEL_20;
    }
  }
  if (v3 < 1)
  {
    __break(1u);
LABEL_31:
    __break(1u);
    return result;
  }
  uint64_t v5 = 0;
  unint64_t v34 = v2 & 0xC000000000000001;
  uint64_t v35 = v3;
  unint64_t v36 = v2;
  do
  {
    if (v34)
    {
      uint64_t v6 = (void *)MEMORY[0x230FB2E90](v5, v2);
    }
    else
    {
      uint64_t v6 = *(void **)(v2 + 8 * v5 + 32);
      swift_retain();
    }
    uint64_t v7 = sub_22F1BADD4();
    uint64_t v8 = v6[4];
    uint64_t v9 = v6[5];
    uint64_t v10 = v6[6];
    uint64_t v11 = v6[7];
    if (*(unsigned char *)(v7 + 56) == 1)
    {
      swift_beginAccess();
      os_unfair_lock_lock((os_unfair_lock_t)(v7 + 60));
      swift_endAccess();
      swift_beginAccess();
      sub_22F1C4E68(v37, v8, v9, v10, v11);
      swift_endAccess();
      swift_beginAccess();
      os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 60));
    }
    else
    {
      swift_beginAccess();
      sub_22F1C4E68(v37, v8, v9, v10, v11);
    }
    swift_endAccess();
    swift_release();
    sub_22F1C1184((uint64_t)v38);
    sub_22F1899D0((uint64_t)v38, (uint64_t)v39, &qword_268694B90);
    if ((v40 & 1) == 0)
    {
      uint64_t v12 = v39[0];
      uint64_t v13 = v39[1];
      uint64_t v15 = v39[2];
      uint64_t v14 = v39[3];
      uint64_t v16 = sub_22F1BADD4();
      if (*(unsigned char *)(v16 + 56) == 1)
      {
        swift_beginAccess();
        os_unfair_lock_lock((os_unfair_lock_t)(v16 + 60));
        swift_endAccess();
        swift_beginAccess();
        sub_22F1C4E68(v37, v12, v13, v15, v14);
        swift_endAccess();
        swift_beginAccess();
        os_unfair_lock_unlock((os_unfair_lock_t)(v16 + 60));
      }
      else
      {
        swift_beginAccess();
        sub_22F1C4E68(v37, v12, v13, v15, v14);
      }
      swift_endAccess();
      swift_release();
    }
    uint64_t v17 = (void *)v6[11];
    if (v17)
    {
      uint64_t v18 = *(void *)(v1 + 808);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t))(v18 + 16);
      id v21 = v17;
      long long v22 = (void *)v20(ObjectType, v18);
      objc_msgSend(v22, sel_removeAnchor_, v21);
    }
    ++v5;
    swift_weakAssign();
    swift_release();
    unint64_t v2 = v36;
  }
  while (v35 != v5);
LABEL_20:
  swift_bridgeObjectRelease_n();
  *(void *)(v1 + 592) = MEMORY[0x263F8EE78];
  swift_bridgeObjectRelease();
  if (*(void *)(v1 + 600))
  {
    id v23 = (void *)swift_retain();
    sub_22F1BC524(v23);
    swift_release();
    *(void *)(v1 + 600) = 0;
    swift_release();
  }
  uint64_t result = (uint64_t)sub_22F1BB134();
  if (!result) {
    goto LABEL_31;
  }
  uint64_t v27 = result;
  uint64_t v28 = v24;
  uint64_t v29 = v25;
  uint64_t v30 = v26;
  MEMORY[0x230FB40E0](result, -1, -1);
  *(void *)(v1 + 336) = v27;
  *(void *)(v1 + 344) = v28;
  *(void *)(v1 + 352) = v29;
  *(void *)(v1 + 360) = v30;
  *(unsigned char *)(v1 + 368) = 0;
  uint64_t v31 = sub_22F1BAC24();
  if (v31) {
    MEMORY[0x230FB40E0](v31, -1, -1);
  }
  long long v32 = sub_22F1BB194();
  if (v32) {
    MEMORY[0x230FB40E0](v32, -1, -1);
  }
  uint64_t v33 = sub_22F1BB3D8();
  if (v33) {
    MEMORY[0x230FB40E0](v33, -1, -1);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  swift_release();
  sub_22F1C4FE0(v1 + 832);
  return v1;
}

uint64_t PatchTracker.__deallocating_deinit()
{
  PatchTracker.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_22F1BC524(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_22F1BADD4();
  uint64_t v5 = a1[4];
  uint64_t v6 = a1[5];
  uint64_t v7 = a1[6];
  uint64_t v8 = a1[7];
  if (*(unsigned char *)(v4 + 56) == 1)
  {
    swift_beginAccess();
    os_unfair_lock_lock((os_unfair_lock_t)(v4 + 60));
    swift_endAccess();
    swift_beginAccess();
    sub_22F1C4E68(v23, v5, v6, v7, v8);
    swift_endAccess();
    swift_beginAccess();
    os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 60));
  }
  else
  {
    swift_beginAccess();
    sub_22F1C4E68(v23, v5, v6, v7, v8);
  }
  swift_endAccess();
  swift_release();
  sub_22F1C1184((uint64_t)v22);
  sub_22F1899D0((uint64_t)v22, (uint64_t)v23, &qword_268694B90);
  if ((v24 & 1) == 0)
  {
    uint64_t v9 = v23[0];
    uint64_t v10 = v23[1];
    uint64_t v11 = v23[2];
    uint64_t v12 = v23[3];
    uint64_t v13 = sub_22F1BADD4();
    if (*(unsigned char *)(v13 + 56) == 1)
    {
      swift_beginAccess();
      os_unfair_lock_lock((os_unfair_lock_t)(v13 + 60));
      swift_endAccess();
      swift_beginAccess();
      sub_22F1C4E68(v21, v9, v10, v11, v12);
      swift_endAccess();
      swift_beginAccess();
      os_unfair_lock_unlock((os_unfair_lock_t)(v13 + 60));
    }
    else
    {
      swift_beginAccess();
      sub_22F1C4E68(v21, v9, v10, v11, v12);
    }
    swift_endAccess();
    swift_release();
  }
  uint64_t v14 = (void *)a1[11];
  if (v14)
  {
    uint64_t v15 = *(void *)(v2 + 808);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 16);
    id v18 = v14;
    CGFloat v19 = (void *)v17(ObjectType, v15);
    objc_msgSend(v19, sel_removeAnchor_, v18);
  }
  return swift_weakAssign();
}

Swift::Void __swiftcall PatchTracker.didUpdate(frame:)(ARFrame frame)
{
  uint64_t v2 = v1;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v2 + 584));
  id v4 = [(objc_class *)frame.super.isa worldTrackingState];
  if (v4 && (uint64_t v5 = v4, v6 = objc_msgSend(v4, sel_vioTrackingState), v5, !v6))
  {
    isCGFloat a = frame.super.isa;
    uint64_t v7 = (unint64_t *)v2;
    sub_22F1BE0C8(isa);
    uint64_t v16 = *(void *)(v2 + 608);
    BOOL v13 = __CFADD__(v16, 1);
    uint64_t v17 = v16 + 1;
    if (v13) {
      goto LABEL_23;
    }
    *(void *)(v2 + 608) = v17;
    id v18 = *(os_unfair_lock_s **)(v2 + 584);
    os_unfair_lock_unlock(v18);
  }
  else
  {
    uint64_t v7 = (unint64_t *)(v2 + 592);
    swift_beginAccess();
    unint64_t v8 = *(void *)(v2 + 592);
    if ((v8 & 0x8000000000000000) != 0
      || (v8 & 0x4000000000000000) != 0
      || (char isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(),
          unint64_t v8 = *v7,
          (isUniquelyReferenced_nonNull_bridgeObject & 1) == 0))
    {
      if (v8 >> 62) {
        goto LABEL_19;
      }
      uint64_t v11 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1;
      goto LABEL_11;
    }
    if (v8 >> 62) {
      goto LABEL_24;
    }
    uint64_t v10 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    do
    {
      sub_22F1843F8(0, v10);
      while (1)
      {
        swift_endAccess();
        uint64_t v12 = *(void *)(v2 + 608);
        BOOL v13 = __CFADD__(v12, 1);
        uint64_t v14 = v12 + 1;
        if (!v13)
        {
          *(void *)(v2 + 608) = v14;
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v2 + 584));
          return;
        }
        __break(1u);
LABEL_19:
        swift_bridgeObjectRetain();
        uint64_t v11 = sub_22F2245C8();
        if (sub_22F2245C8() < 0) {
          goto LABEL_26;
        }
        uint64_t v19 = sub_22F2245C8();
        swift_bridgeObjectRelease();
        if (v11 < 0 || v19 < v11) {
          break;
        }
LABEL_11:
        unint64_t *v7 = (unint64_t)sub_22F1AD088(0, v11);
        swift_bridgeObjectRelease();
      }
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      swift_bridgeObjectRetain();
      uint64_t v10 = sub_22F2245C8();
      swift_bridgeObjectRelease();
    }
    while ((v10 & 0x8000000000000000) == 0);
    __break(1u);
LABEL_26:
    __break(1u);
  }
}

uint64_t PatchTracker.hitTest(frame:screenPoint:context:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, uint64_t a4@<D0>, uint64_t a5@<D1>)
{
  uint64_t v6 = v5;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v5 + 584));
  swift_retain();
  sub_22F2238A8();
  swift_release();
  if (!v80[0]) {
    goto LABEL_6;
  }
  objc_msgSend(v80[0], sel_userAcceleration);
  float64_t v54 = v12;
  objc_msgSend(v80[0], sel_userAcceleration);
  float64_t v52 = v13;
  objc_msgSend(v80[0], sel_userAcceleration);
  float64x2_t v50 = v14;

  v15.f64[0] = v54;
  v15.f64[1] = v52;
  *(float *)v15.f64 = sqrt(vmulq_f64(v50, v50).f64[0] + vaddvq_f64(vmulq_f64(v15, v15)));
  if (*(float *)v15.f64 <= 0.1)
  {
LABEL_6:
    double v18 = sub_22F1B2524((uint64_t)v63);
    uint64_t v19 = *(void *)(v5 + 600);
    if (v19 && (double v20 = *(double *)(v19 + 80), objc_msgSend(a1, sel_timestamp, v18), v20 == v21))
    {
      if (*(void *)(v5 + 600)) {
        goto LABEL_9;
      }
    }
    else
    {
      *(void *)(v5 + 600) = sub_22F1BE754(a1, a4, a5, 0);
      swift_release();
      if (*(void *)(v5 + 600))
      {
LABEL_9:
        uint64_t v22 = swift_retain();
        sub_22F1BD1E0(v22, a2, (uint64_t)v64, *(CGFloat *)&a4, *(CGFloat *)&a5);
        sub_22F1899D0((uint64_t)v64, (uint64_t)v80, &qword_268695288);
        sub_22F1899D0((uint64_t)v64, (uint64_t)&v66, &qword_268695288);
        if (sub_22F1B2544((uint64_t)&v66) == 1)
        {
          if (qword_268694518 != -1) {
            swift_once();
          }
          uint64_t v23 = qword_26869BE30;
          uint64_t v24 = *(void *)algn_26869BE38;
          uint64_t v25 = sub_22F2240A8();
          _s17MeasureFoundation3LogV3log_4type9isPrivateySS_So03os_d1_E2_taSbtF_0(0xD000000000000023, 0x800000022F22FEB0, v25, 0, v23, v24);
        }
        else
        {
          __n128 v55 = v66;
          uint64_t v43 = v68;
          uint64_t v44 = v67;
          unsigned int v51 = v69;
          __n128 v48 = v71;
          __n128 v49 = v70;
          __n128 v46 = v74;
          __n128 v47 = v72;
          __n128 v45 = v75;
          uint64_t v53 = v73;
          uint64_t v27 = v76;
          float v28 = v77;
          float v29 = v78;
          int v30 = v79;
          sub_22F1899D0((uint64_t)v80, (uint64_t)v59, &qword_268695288);
          uint64_t v31 = qword_268694518;
          swift_retain();
          swift_retain();
          if (v31 != -1) {
            swift_once();
          }
          uint64_t v32 = qword_26869BE30;
          uint64_t v33 = *(void *)algn_26869BE38;
          uint64_t v60 = 0;
          unint64_t v61 = 0xE000000000000000;
          sub_22F2243F8();
          sub_22F223B48();
          v65[0] = v55;
          __swift_instantiateConcreteTypeFromMangledName(&qword_268695428);
          sub_22F196514(&qword_268695430, &qword_268695428);
          sub_22F224798();
          sub_22F223B48();
          swift_bridgeObjectRelease();
          sub_22F223B48();
          sub_22F223E18();
          sub_22F223B48();
          sub_22F223E18();
          uint64_t v34 = v60;
          uint64_t v35 = v61;
          uint64_t v36 = sub_22F2240A8();
          _s17MeasureFoundation3LogV3log_4type9isPrivateySS_So03os_d1_E2_taSbtF_0(v34, v35, v36, 0, v32, v33);
          swift_bridgeObjectRelease();
          swift_beginAccess();
          uint64_t v37 = *(void *)(v6 + 824);
          sub_22F1899D0(a2, (uint64_t)v65, &qword_268695438);
          if (sub_22F1C630C((uint64_t)v65) != 1 && (v65[0].n128_u8[0] & 1) == 0 && (v37 & 2) != 0)
          {
            swift_beginAccess();
            sub_22F1C6330(v6 + 832, (uint64_t)&v60);
            if (v62)
            {
              sub_22F1AD024((uint64_t)&v60, (uint64_t)v56);
              sub_22F1C4FE0((uint64_t)&v60);
              uint64_t v39 = v57;
              uint64_t v40 = v58;
              __swift_project_boxed_opaque_existential_0(v56, v57);
              simd_float3 v41 = *(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, __n128, __n128, __n128, __n128, __n128, __n128, float, float, double))(v40 + 24);
              swift_retain();
              swift_retain();
              LODWORD(v42) = v30;
              v41(v44, v43, v51, v53, v27, v39, v40, v55, v49, v48, v47, v46, v45, v28, v29, v42);
              sub_22F1C6660((uint64_t)v64, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))sub_22F1B263C);
              swift_release();
              swift_release();
              swift_release();
              __swift_destroy_boxed_opaque_existential_0((uint64_t)v56);
            }
            else
            {
              sub_22F1C6660((uint64_t)v64, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))sub_22F1B263C);
              swift_release();
              sub_22F1C4FE0((uint64_t)&v60);
            }
            goto LABEL_22;
          }
          sub_22F1C6660((uint64_t)v64, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))sub_22F1B263C);
        }
        swift_release();
LABEL_22:
        uint64_t v26 = v80;
        goto LABEL_23;
      }
    }
    uint64_t v26 = (id *)v63;
LABEL_23:
    sub_22F1899D0((uint64_t)v26, (uint64_t)&v60, &qword_268695288);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v6 + 584));
    uint64_t v17 = (__n128 *)&v60;
    goto LABEL_24;
  }
  uint64_t v16 = (unint64_t *)(v5 + 544);
  swift_beginAccess();
  if (*(void *)(*(void *)(v5 + 544) + 16))
  {
    swift_isUniquelyReferenced_nonNull_native();
    v66.n128_u64[0] = *v16;
    *uint64_t v16 = 0x8000000000000000;
    __swift_instantiateConcreteTypeFromMangledName(&qword_268695440);
    sub_22F224528();
    *uint64_t v16 = v66.n128_u64[0];
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  sub_22F1B2524((uint64_t)&v66);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 584));
  uint64_t v17 = &v66;
LABEL_24:
  sub_22F1899D0((uint64_t)v17, (uint64_t)v80, &qword_268695288);
  return sub_22F1899D0((uint64_t)v80, a3, &qword_268695288);
}

void *PatchTracker.DebugOptions.paintMode.unsafeMutableAddressor()
{
  return &static PatchTracker.DebugOptions.paintMode;
}

BOOL PatchTracker.DebugOptions.shouldDo(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_22F1899D0(a2, (uint64_t)v6, &qword_268695438);
  if (sub_22F1C630C((uint64_t)v6) == 1) {
    return 0;
  }
  if (v6[0]) {
    return 0;
  }
  return (a1 & ~a3) == 0;
}

void sub_22F1BD0F0(double a1, double a2)
{
  double v5 = PatchTracker.viewportSize.getter() / 7.0;
  double v6 = *(double *)(v2 + 40);
  double v7 = floor(v6 / v5);
  if ((~*(void *)&v7 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v7 <= -9.22337204e18)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v7 >= 9.22337204e18)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v8 = (uint64_t)v7;
  double v9 = (double)(uint64_t)v7;
  if ((v8 & 1) == 0) {
    double v9 = v9 + 1.0;
  }
  double v10 = floor(a1 / v5) + floor(a2 / (v6 / v9)) * 7.0;
  if ((~*(void *)&v10 & 0x7FF0000000000000) == 0) {
    goto LABEL_13;
  }
  if (v10 <= -1.0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v10 >= 1.84467441e19) {
LABEL_15:
  }
    __break(1u);
}

uint64_t sub_22F1BD1E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, CGFloat a4@<D0>, CGFloat a5@<D1>)
{
  double v10 = (double *)sub_22F1BEAF4(a1, a2, a4, a5);
  if (!v10)
  {
    sub_22F1B2524((uint64_t)__dst);
    sub_22F1899D0((uint64_t)__dst, (uint64_t)v117, &qword_268695288);
    return sub_22F1899D0((uint64_t)v117, a3, &qword_268695288);
  }
  uint64_t v11 = (uint64_t)v10;
  uint64_t v85 = a3;
  sub_22F1BEF7C(v10, a2, (uint64_t)v126);
  sub_22F1BD92C(v11, (uint64_t)v126, (uint64_t)v127);
  sub_22F1899D0((uint64_t)v127, (uint64_t)v125, &qword_268695288);
  sub_22F1C6660((uint64_t)v126, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))sub_22F1B263C);
  sub_22F1BD0F0(a4, a5);
  uint64_t v13 = v12;
  float64x2_t v14 = (uint64_t *)(v5 + 544);
  swift_beginAccess();
  uint64_t v15 = *(void *)(v5 + 544);
  if (*(void *)(v15 + 16) && (unint64_t v16 = sub_22F18DF9C(v13), (v17 & 1) != 0))
  {
    double v18 = (_OWORD *)(*(void *)(v15 + 56) + 192 * v16);
    long long v20 = v18[2];
    long long v19 = v18[3];
    long long v21 = v18[1];
    v121[0] = *v18;
    v121[1] = v21;
    v121[2] = v20;
    v121[3] = v19;
    long long v22 = v18[4];
    long long v23 = v18[5];
    long long v24 = v18[6];
    v121[7] = v18[7];
    v121[6] = v24;
    v121[5] = v23;
    v121[4] = v22;
    long long v25 = v18[8];
    long long v26 = v18[9];
    long long v27 = v18[10];
    uint64_t v122 = *((void *)v18 + 22);
    v121[10] = v27;
    v121[9] = v26;
    v121[8] = v25;
    memmove(__dst, v18, 0xB8uLL);
    nullsub_1(__dst);
    sub_22F1962F8((uint64_t)v121);
  }
  else
  {
    sub_22F1C67B0((uint64_t)v121);
    sub_22F1899D0((uint64_t)v121, (uint64_t)__dst, &qword_2686954B0);
  }
  sub_22F1899D0((uint64_t)__dst, (uint64_t)v120, &qword_2686954B0);
  sub_22F1899D0((uint64_t)v120, (uint64_t)v121, &qword_2686954B0);
  if (sub_22F1B2544((uint64_t)v121) == 1)
  {
    sub_22F1899D0((uint64_t)v126, (uint64_t)v141, &qword_268695288);
    uint64_t v28 = 0;
    if (sub_22F1B2544((uint64_t)v141) == 1) {
      goto LABEL_14;
    }
LABEL_11:
    sub_22F1899D0((uint64_t)v127, (uint64_t)&v128, &qword_268695288);
    uint64_t result = sub_22F1B2544((uint64_t)&v128);
    if (result != 1)
    {
      if (__OFADD__(v28++, 1))
      {
LABEL_54:
        __break(1u);
        return result;
      }
      int v31 = v140;
      uint64_t v84 = v138;
      long long v82 = v136;
      long long v83 = v137;
      uint64_t v32 = v135;
      long long v80 = v133;
      long long v81 = v134;
      char v33 = v131;
      uint64_t v34 = v130;
      uint64_t v35 = v129;
      long long v78 = v128;
      long long v79 = v132;
      uint64_t v36 = v139;
      sub_22F1899D0((uint64_t)v125, (uint64_t)v116, &qword_268695288);
      sub_22F1899D0((uint64_t)v125, (uint64_t)v117, &qword_268695288);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      sub_22F223798();
      uint64_t v38 = v37;
      swift_beginAccess();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&long long v101 = *v14;
      *float64x2_t v14 = 0x8000000000000000;
      long long v86 = v78;
      uint64_t v87 = v35;
      uint64_t v88 = v34;
      char v89 = v33;
      long long v90 = v79;
      long long v91 = v80;
      long long v92 = v81;
      uint64_t v93 = v32;
      long long v94 = v82;
      long long v95 = v83;
      uint64_t v96 = v84;
      uint64_t v97 = v36;
      int v98 = v31;
      uint64_t v99 = v38;
      uint64_t v100 = v28;
      sub_22F1E72E8(&v86, v13, isUniquelyReferenced_nonNull_native);
      *float64x2_t v14 = v101;
      swift_bridgeObjectRelease();
      swift_endAccess();
      sub_22F1C6660((uint64_t)v127, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))sub_22F1B263C);
    }
    goto LABEL_14;
  }
  uint64_t v28 = v124;
  sub_22F1899D0((uint64_t)__dst, (uint64_t)v117, &qword_2686954B0);
  sub_22F1C67D4((uint64_t *)v117);
  sub_22F1899D0((uint64_t)v126, (uint64_t)v141, &qword_268695288);
  if (sub_22F1B2544((uint64_t)v141) != 1) {
    goto LABEL_11;
  }
LABEL_14:
  uint64_t v40 = *v14;
  uint64_t v41 = *v14 + 64;
  uint64_t v42 = 1 << *(unsigned char *)(*v14 + 32);
  uint64_t v43 = -1;
  if (v42 < 64) {
    uint64_t v43 = ~(-1 << v42);
  }
  unint64_t v44 = v43 & *(void *)(*v14 + 64);
  int64_t v45 = (unint64_t)(v42 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v46 = 0;
  while (1)
  {
    if (v44)
    {
      unint64_t v47 = __clz(__rbit64(v44));
      v44 &= v44 - 1;
      unint64_t v48 = v47 | (v46 << 6);
      goto LABEL_38;
    }
    int64_t v49 = v46 + 1;
    if (__OFADD__(v46, 1))
    {
      __break(1u);
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }
    if (v49 >= v45) {
      goto LABEL_47;
    }
    unint64_t v50 = *(void *)(v41 + 8 * v49);
    ++v46;
    if (!v50)
    {
      int64_t v46 = v49 + 1;
      if (v49 + 1 >= v45) {
        goto LABEL_47;
      }
      unint64_t v50 = *(void *)(v41 + 8 * v46);
      if (!v50)
      {
        int64_t v46 = v49 + 2;
        if (v49 + 2 >= v45) {
          goto LABEL_47;
        }
        unint64_t v50 = *(void *)(v41 + 8 * v46);
        if (!v50)
        {
          int64_t v46 = v49 + 3;
          if (v49 + 3 >= v45) {
            goto LABEL_47;
          }
          unint64_t v50 = *(void *)(v41 + 8 * v46);
          if (!v50)
          {
            int64_t v46 = v49 + 4;
            if (v49 + 4 >= v45) {
              goto LABEL_47;
            }
            unint64_t v50 = *(void *)(v41 + 8 * v46);
            if (!v50) {
              break;
            }
          }
        }
      }
    }
LABEL_37:
    unint64_t v44 = (v50 - 1) & v50;
    unint64_t v48 = __clz(__rbit64(v50)) + (v46 << 6);
LABEL_38:
    uint64_t v52 = *v14;
    if (*(void *)(*v14 + 16))
    {
      uint64_t v53 = *(void *)(*(void *)(v40 + 48) + 8 * v48);
      uint64_t result = sub_22F18DF9C(v53);
      if (v54)
      {
        uint64_t v55 = *(void *)(v52 + 56) + 192 * result;
        long long v57 = *(_OWORD *)(v55 + 32);
        long long v56 = *(_OWORD *)(v55 + 48);
        long long v58 = *(_OWORD *)(v55 + 16);
        v117[0] = *(_OWORD *)v55;
        v117[1] = v58;
        v117[2] = v57;
        v117[3] = v56;
        long long v59 = *(_OWORD *)(v55 + 64);
        long long v60 = *(_OWORD *)(v55 + 80);
        long long v61 = *(_OWORD *)(v55 + 112);
        v117[6] = *(_OWORD *)(v55 + 96);
        v117[7] = v61;
        v117[4] = v59;
        v117[5] = v60;
        long long v62 = *(_OWORD *)(v55 + 128);
        long long v63 = *(_OWORD *)(v55 + 144);
        long long v64 = *(_OWORD *)(v55 + 160);
        uint64_t v119 = *(void *)(v55 + 176);
        long long v118 = v64;
        v117[9] = v63;
        v117[8] = v62;
        sub_22F1962F8((uint64_t)v117);
        sub_22F223798();
        if (v65 - *((double *)&v118 + 1) <= 0.25)
        {
          uint64_t result = sub_22F1C66E0((uint64_t)v117);
        }
        else
        {
          swift_beginAccess();
          unint64_t v66 = sub_22F18DF9C(v53);
          if (v67)
          {
            unint64_t v68 = v66;
            char v69 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v70 = *v14;
            uint64_t v113 = *v14;
            *float64x2_t v14 = 0x8000000000000000;
            if ((v69 & 1) == 0)
            {
              sub_22F193FC8();
              uint64_t v70 = v113;
            }
            uint64_t v71 = *(void *)(v70 + 56) + 192 * v68;
            long long v72 = *(_OWORD *)(v71 + 144);
            long long v109 = *(_OWORD *)(v71 + 128);
            long long v110 = v72;
            long long v111 = *(_OWORD *)(v71 + 160);
            uint64_t v112 = *(void *)(v71 + 176);
            long long v73 = *(_OWORD *)(v71 + 80);
            long long v105 = *(_OWORD *)(v71 + 64);
            long long v106 = v73;
            long long v74 = *(_OWORD *)(v71 + 112);
            long long v107 = *(_OWORD *)(v71 + 96);
            long long v108 = v74;
            long long v75 = *(_OWORD *)(v71 + 16);
            long long v101 = *(_OWORD *)v71;
            long long v102 = v75;
            long long v76 = *(_OWORD *)(v71 + 48);
            long long v103 = *(_OWORD *)(v71 + 32);
            long long v104 = v76;
            sub_22F195308(v68, v70);
            *float64x2_t v14 = v70;
            swift_bridgeObjectRelease();
            v114[8] = v109;
            v114[9] = v110;
            v114[10] = v111;
            uint64_t v115 = v112;
            v114[4] = v105;
            v114[5] = v106;
            v114[6] = v107;
            v114[7] = v108;
            v114[0] = v101;
            v114[1] = v102;
            v114[2] = v103;
            v114[3] = v104;
            nullsub_1(v114);
          }
          else
          {
            sub_22F1C67B0((uint64_t)v114);
          }
          sub_22F1899D0((uint64_t)v114, (uint64_t)v116, &qword_2686954B0);
          swift_endAccess();
          sub_22F1C66E0((uint64_t)v117);
          uint64_t result = (uint64_t)sub_22F1C67D4(v116);
        }
      }
    }
  }
  int64_t v51 = v49 + 5;
  if (v51 < v45)
  {
    unint64_t v50 = *(void *)(v41 + 8 * v51);
    if (!v50)
    {
      while (1)
      {
        int64_t v46 = v51 + 1;
        if (__OFADD__(v51, 1)) {
          goto LABEL_53;
        }
        if (v46 >= v45) {
          goto LABEL_47;
        }
        unint64_t v50 = *(void *)(v41 + 8 * v46);
        ++v51;
        if (v50) {
          goto LABEL_37;
        }
      }
    }
    int64_t v46 = v51;
    goto LABEL_37;
  }
LABEL_47:
  swift_release();
  swift_release();
  if (v28 >= 3)
  {
    float v77 = (uint64_t *)v125;
  }
  else
  {
    sub_22F1C6660((uint64_t)v127, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))sub_22F1B263C);
    sub_22F1B2524((uint64_t)v116);
    float v77 = v116;
  }
  sub_22F1899D0((uint64_t)v77, (uint64_t)v117, &qword_268695288);
  a3 = v85;
  return sub_22F1899D0((uint64_t)v117, a3, &qword_268695288);
}

uint64_t sub_22F1BD92C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_22F1899D0(a2, (uint64_t)v89, &qword_268695288);
  sub_22F1899D0((uint64_t)v89, (uint64_t)v92, &qword_268695288);
  sub_22F1BD0F0(*(double *)(a1 + 56), *(double *)(a1 + 64));
  uint64_t v8 = v7;
  swift_beginAccess();
  uint64_t v9 = *(void *)(v3 + 544);
  if (!*(void *)(v9 + 16)) {
    goto LABEL_5;
  }
  unint64_t v10 = sub_22F18DF9C(v8);
  if ((v11 & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t v12 = *(void *)(v9 + 56) + 192 * v10;
  long long v14 = *(_OWORD *)(v12 + 32);
  long long v13 = *(_OWORD *)(v12 + 48);
  long long v15 = *(_OWORD *)(v12 + 16);
  long long v77 = *(_OWORD *)v12;
  long long v78 = v15;
  long long v79 = v14;
  long long v80 = v13;
  long long v16 = *(_OWORD *)(v12 + 64);
  float32x4_t v17 = *(float32x4_t *)(v12 + 80);
  long long v18 = *(_OWORD *)(v12 + 96);
  long long v84 = *(_OWORD *)(v12 + 112);
  long long v83 = v18;
  float32x4_t v82 = v17;
  long long v81 = v16;
  long long v19 = *(_OWORD *)(v12 + 128);
  long long v20 = *(_OWORD *)(v12 + 144);
  long long v21 = *(_OWORD *)(v12 + 160);
  uint64_t v88 = *(void *)(v12 + 176);
  long long v87 = v21;
  long long v86 = v20;
  long long v85 = v19;
  sub_22F1962F8((uint64_t)&v77);
  sub_22F223798();
  if (v22 - *((double *)&v87 + 1) > 0.25)
  {
    sub_22F1C66E0((uint64_t)&v77);
LABEL_5:
    sub_22F1C6660(a2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))sub_22F1B257C);
    long long v23 = v92;
LABEL_6:
    sub_22F1899D0((uint64_t)v23, (uint64_t)v91, &qword_268695288);
    return sub_22F1899D0((uint64_t)v91, a3, &qword_268695288);
  }
  sub_22F1899D0(a2, (uint64_t)v71, &qword_268695288);
  long long v25 = v78;
  char v26 = v79;
  long long v41 = v80;
  long long v43 = v77;
  uint64_t v27 = v83;
  long long v39 = v84;
  long long v40 = v81;
  long long v38 = v85;
  uint64_t v28 = v86;
  float32x4_t v45 = v82;
  uint64_t v47 = *((void *)&v86 + 1);
  float v29 = *(float *)&v87;
  sub_22F1962F8((uint64_t)&v77);
  sub_22F1962F8((uint64_t)&v77);
  sub_22F1C6660(a2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))sub_22F1B257C);
  swift_release();
  swift_release();
  sub_22F1899D0(a2, (uint64_t)v90, &qword_268695288);
  if (sub_22F1B2544((uint64_t)v90) == 1)
  {
    v59[0] = v43;
    v59[1] = v25;
    char v60 = v26;
    long long v61 = v41;
    long long v62 = v40;
    float32x4_t v63 = v45;
    uint64_t v64 = v27;
    long long v65 = v39;
    long long v66 = v38;
    uint64_t v67 = v28;
    uint64_t v68 = v47;
    float v69 = v29;
    nullsub_1(v59);
    sub_22F1899D0((uint64_t)v59, (uint64_t)v71, &qword_268695288);
    float32x4_t v30 = *(float32x4_t *)(a1 + 96);
    float v31 = *(float *)&v47;
    float v32 = vmuls_lane_f32(*(float *)&v47, v30, 2);
    float32x4_t v46 = v30;
    long long v48 = *(_OWORD *)(a1 + 80);
    *(float32x2_t *)v30.f32 = vadd_f32(*(float32x2_t *)&v48, vmul_n_f32(*(float32x2_t *)v30.f32, v31));
    v30.i64[1] = COERCE_UNSIGNED_INT(*((float *)&v48 + 2) + v32);
    v71[0] = v30;
    sub_22F1899D0((uint64_t)v71, (uint64_t)v70, &qword_268695288);
    sub_22F1899D0((uint64_t)v70, (uint64_t)v91, &qword_268695288);
    uint64_t result = sub_22F1B2544((uint64_t)v91);
    if (result == 1)
    {
      __break(1u);
    }
    else
    {
      float v76 = -fabsf(v29);
      sub_22F1899D0((uint64_t)v71, (uint64_t)v57, &qword_268695288);
      sub_22F1899D0((uint64_t)v57, (uint64_t)v58, &qword_268695288);
      uint64_t result = sub_22F1B2544((uint64_t)v58);
      if (result != 1)
      {
        sub_22F1962F8((uint64_t)&v77);
        swift_retain();
        swift_release();
        uint64_t v74 = a1;
        sub_22F1899D0((uint64_t)v71, (uint64_t)v55, &qword_268695288);
        sub_22F1899D0((uint64_t)v55, (uint64_t)v56, &qword_268695288);
        uint64_t result = sub_22F1B2544((uint64_t)v56);
        if (result != 1)
        {
          long long v72 = v48;
          float32x4_t v73 = v46;
          sub_22F1899D0((uint64_t)v71, (uint64_t)v53, &qword_268695288);
          sub_22F1899D0((uint64_t)v53, (uint64_t)v54, &qword_268695288);
          uint64_t result = sub_22F1B2544((uint64_t)v54);
          if (result != 1)
          {
            long long v49 = v71[0];
            sub_22F1899D0((uint64_t)v71, (uint64_t)v51, &qword_268695288);
            sub_22F1899D0((uint64_t)v51, (uint64_t)v52, &qword_268695288);
            uint64_t result = sub_22F1B2544((uint64_t)v52);
            if (result != 1)
            {
              sub_22F1C66E0((uint64_t)&v77);
              sub_22F1C66E0((uint64_t)&v77);
              v71[3] = v49;
LABEL_22:
              sub_22F1899D0((uint64_t)v71, (uint64_t)v70, &qword_268695288);
              long long v23 = v70;
              goto LABEL_6;
            }
            goto LABEL_27;
          }
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
          goto LABEL_29;
        }
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
    }
    __break(1u);
    goto LABEL_25;
  }
  long long v42 = v72;
  float32x4_t v44 = v73;
  float v33 = v75;
  swift_retain();
  swift_retain();
  if (fabsf((float)(v33 / *(float *)&v47) + -1.0) <= 0.5)
  {
    float32x4_t v35 = vmulq_f32(v45, v44);
    float v36 = fabsf(acosf(fminf(v35.f32[2] + vaddv_f32(*(float32x2_t *)v35.f32), 1.0))) / 0.17453;
    if (v36 >= 1.0) {
      float v34 = 1.0;
    }
    else {
      float v34 = (float)(v36 * 0.5) + 0.5;
    }
  }
  else
  {
    float v34 = 0.1;
  }
  sub_22F1899D0((uint64_t)v71, (uint64_t)v70, &qword_268695288);
  sub_22F1899D0((uint64_t)v70, (uint64_t)v91, &qword_268695288);
  uint64_t result = sub_22F1B2544((uint64_t)v91);
  if (result == 1) {
    goto LABEL_28;
  }
  float v50 = *(float *)&v47 + (float)((float)(v33 - *(float *)&v47) * v34);
  *(float32x2_t *)&long long v37 = vadd_f32(*(float32x2_t *)&v42, vmul_n_f32(*(float32x2_t *)v44.f32, v50));
  *((void *)&v37 + 1) = COERCE_UNSIGNED_INT(*((float *)&v42 + 2) + vmuls_lane_f32(v50, v44, 2));
  v71[0] = v37;
  sub_22F1899D0((uint64_t)v71, (uint64_t)v58, &qword_268695288);
  sub_22F1899D0((uint64_t)v58, (uint64_t)v59, &qword_268695288);
  uint64_t result = sub_22F1B2544((uint64_t)v59);
  if (result != 1)
  {
    sub_22F1C66E0((uint64_t)&v77);
    swift_release();
    swift_release();
    sub_22F1C66E0((uint64_t)&v77);
    float v75 = v50;
    goto LABEL_22;
  }
LABEL_29:
  __break(1u);
  return result;
}

BOOL sub_22F1BDF08(void *a1)
{
  swift_beginAccess();
  unint64_t v3 = *(void *)(v1 + 592);
  if (v3 >> 62)
  {
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v4 = sub_22F2245C8();
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_3:
      uint64_t v5 = 4;
      while (1)
      {
        uint64_t v11 = v5 - 4;
        if ((v3 & 0xC000000000000001) != 0)
        {
          uint64_t v12 = MEMORY[0x230FB2E90](v5 - 4, v3);
          BOOL v13 = __OFADD__(v11, 1);
          uint64_t v14 = v5 - 3;
          if (v13) {
            goto LABEL_17;
          }
        }
        else
        {
          uint64_t v12 = *(void *)(v3 + 8 * v5);
          swift_retain();
          BOOL v13 = __OFADD__(v11, 1);
          uint64_t v14 = v5 - 3;
          if (v13)
          {
LABEL_17:
            __break(1u);
            goto LABEL_18;
          }
        }
        objc_msgSend(a1, sel_timestamp, *(_OWORD *)&v20);
        if (v15 - *(double *)(v12 + 80) <= 0.0166666667)
        {
          swift_release();
          BOOL v9 = 0;
          goto LABEL_20;
        }
        id v16 = objc_msgSend(a1, sel_camera);
        objc_msgSend(v16, sel_transform);
        float32x4_t v21 = v17;

        long long v18 = *(void **)(v12 + 88);
        if (!v18) {
          long long v18 = *(void **)(v12 + 24);
        }
        objc_msgSend(v18, sel_transform);
        float32x4_t v20 = v6;
        swift_release();
        float32x4_t v7 = vsubq_f32(v21, v20);
        float32x4_t v8 = vmulq_f32(v7, v7);
        v8.f32[0] = v8.f32[2] + vaddv_f32(*(float32x2_t *)v8.f32);
        BOOL v9 = v8.f32[0] > 0.0001;
        ++v5;
        if (v8.f32[0] <= 0.0001 || v14 == v4) {
          goto LABEL_20;
        }
      }
    }
  }
  BOOL v9 = 1;
LABEL_20:
  swift_bridgeObjectRelease();
  return v9;
}

void sub_22F1BE0C8(void *a1)
{
  uint64_t v2 = v1;
  swift_retain();
  sub_22F2238A8();
  swift_release();
  if (!v19) {
    goto LABEL_33;
  }
  objc_msgSend(v19, sel_userAcceleration);
  float64_t v18 = v4;
  objc_msgSend(v19, sel_userAcceleration);
  float64_t v17 = v5;
  objc_msgSend(v19, sel_userAcceleration);
  float64x2_t v16 = v6;

  v7.f64[0] = v18;
  v7.f64[1] = v17;
  *(float *)v7.f64 = sqrt(vmulq_f64(v16, v16).f64[0] + vaddvq_f64(vmulq_f64(v7, v7)));
  if (*(float *)v7.f64 <= 0.1)
  {
LABEL_33:
    if (sub_22F1BDF08(a1))
    {
      uint64_t v8 = sub_22F1BE754(a1, 0, 0, 1);
      if (v8)
      {
        *(void *)(v1 + 600) = v8;
        swift_retain();
        swift_release();
        BOOL v9 = (uint64_t *)(v1 + 592);
        swift_beginAccess();
        uint64_t v10 = swift_retain();
        MEMORY[0x230FB2700](v10);
        if (*(void *)((*(void *)(v2 + 592) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v2 + 592) & 0xFFFFFFFFFFFFFF8)
                                                                                            + 0x18) >> 1)
          sub_22F223D18();
        sub_22F223D68();
        sub_22F223CD8();
        swift_endAccess();
        if ((unint64_t)*v9 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v12 = sub_22F2245C8();
          swift_bridgeObjectRelease();
          if (v12 < 21) {
            goto LABEL_19;
          }
        }
        else if (*(uint64_t *)((*v9 & 0xFFFFFFFFFFFFFF8) + 0x10) < 21)
        {
LABEL_19:
          swift_release();
          return;
        }
        swift_beginAccess();
        uint64_t v11 = *v9;
        if ((unint64_t)*v9 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v13 = sub_22F2245C8();
          swift_bridgeObjectRelease();
          if (v13)
          {
LABEL_11:
            uint64_t v11 = *v9;
            if (!((unint64_t)*v9 >> 62))
            {
              if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_13;
              }
              goto LABEL_26;
            }
LABEL_25:
            swift_bridgeObjectRetain();
            uint64_t v14 = sub_22F2245C8();
            swift_bridgeObjectRelease();
            if (v14)
            {
LABEL_13:
              if ((v11 & 0xC000000000000001) == 0)
              {
                if (!*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
                {
                  __break(1u);
                  goto LABEL_29;
                }
                swift_retain();
LABEL_16:
                if (!((unint64_t)*v9 >> 62))
                {
                  if (*(void *)((*v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
                  {
LABEL_18:
                    sub_22F1843F8(0, 1);
                    swift_endAccess();
                    swift_release();
                    goto LABEL_19;
                  }
LABEL_30:
                  __break(1u);
                  return;
                }
LABEL_29:
                swift_bridgeObjectRetain();
                uint64_t v15 = sub_22F2245C8();
                swift_bridgeObjectRelease();
                if (v15) {
                  goto LABEL_18;
                }
                goto LABEL_30;
              }
LABEL_27:
              MEMORY[0x230FB2E90](0, v11);
              goto LABEL_16;
            }
LABEL_26:
            __break(1u);
            goto LABEL_27;
          }
        }
        else if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_11;
        }
        __break(1u);
        goto LABEL_25;
      }
    }
  }
}

uint64_t sub_22F1BE3DC@<X0>(void *a1@<X0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>)
{
  sub_22F1BB570(&v68.a);
  CGAffineTransform v69 = v68;
  v76.CGFloat x = a3;
  v76.CGFloat y = a4;
  CGPoint v9 = CGPointApplyAffineTransform(v76, &v69);
  sub_22F1BB860(&v69.a);
  CGAffineTransform v67 = v69;
  v77.CGFloat x = a3;
  v77.CGFloat y = a4;
  CGPoint v10 = CGPointApplyAffineTransform(v77, &v67);
  double v11 = sub_22F1BB050();
  CGFloat v13 = v12;
  CGFloat v14 = round(v10.x) + v11 * -0.5;
  CGFloat v15 = round(v10.y) + v12 * -0.5;
  double v66 = round(v9.x - sub_22F1BB024());
  CGFloat v17 = round(v9.y - v16);
  double v18 = sub_22F1BAFF8();
  CGFloat v20 = v19;
  v78.origin.CGFloat x = v14;
  v78.origin.CGFloat y = v15;
  v78.size.CGFloat width = v11;
  v78.size.CGFloat height = v13;
  CGFloat v21 = CGRectGetWidth(v78) * -0.5;
  v79.origin.CGFloat x = v14;
  v79.origin.CGFloat y = v15;
  v79.size.CGFloat width = v11;
  v79.size.CGFloat height = v13;
  CGFloat v22 = CGRectGetHeight(v79) * -0.5;
  CGFloat v58 = v15;
  CGFloat v59 = v14;
  v80.origin.CGFloat x = v14;
  v80.origin.CGFloat y = v15;
  CGFloat v60 = v11;
  CGFloat v61 = v13;
  v80.size.CGFloat width = v11;
  v80.size.CGFloat height = v13;
  CGRect v81 = CGRectInset(v80, v21, v22);
  CGFloat x = v81.origin.x;
  recCGAffineTransform t2 = v81.size.width;
  CGFloat y = v81.origin.y;
  CGFloat height = v81.size.height;
  v81.origin.CGFloat x = v66;
  v81.origin.CGFloat y = v17;
  v81.size.CGFloat width = v18;
  v81.size.CGFloat height = v20;
  CGFloat v25 = CGRectGetWidth(v81) * -0.5;
  v82.origin.CGFloat x = v66;
  v82.origin.CGFloat y = v17;
  v82.size.CGFloat width = v18;
  v82.size.CGFloat height = v20;
  CGFloat v26 = CGRectGetHeight(v82) * -0.5;
  v83.origin.CGFloat x = v66;
  CGFloat v62 = v17;
  v83.origin.CGFloat y = v17;
  double v54 = v20;
  double v55 = v18;
  v83.size.CGFloat width = v18;
  v83.size.CGFloat height = v20;
  CGRect v84 = CGRectInset(v83, v25, v26);
  CGFloat v27 = v84.origin.x;
  CGFloat v56 = v84.origin.y;
  CGFloat width = v84.size.width;
  CGFloat v28 = v84.size.height;
  v85.origin.CGFloat x = sub_22F1BAB2C();
  v86.origin.CGFloat x = x;
  v86.origin.CGFloat y = y;
  v86.size.CGFloat width = rect2;
  CGFloat v29 = rect2;
  CGFloat v30 = height;
  v86.size.CGFloat height = height;
  if (CGRectContainsRect(v85, v86))
  {
    CGFloat v31 = v27;
    CGFloat v32 = v28;
    double v66 = v31;
    CGFloat v62 = v56;
    CGFloat v33 = x;
    CGFloat v34 = y;
    CGFloat v35 = width;
  }
  else
  {
    CGFloat v34 = v58;
    CGFloat v33 = v59;
    v87.origin.CGFloat x = v59;
    v87.origin.CGFloat y = v58;
    v87.size.CGFloat width = v60;
    v87.size.CGFloat height = v61;
    uint64_t result = CGRectContainsRect(v4[3], v87);
    if (!result)
    {
LABEL_7:
      uint64_t v49 = 0;
      uint64_t v50 = 0;
      uint64_t v51 = 0;
      uint64_t v52 = 0;
      char v53 = 1;
      goto LABEL_8;
    }
    CGFloat v32 = v54;
    CGFloat v35 = v55;
    CGFloat v29 = v60;
    CGFloat v30 = v61;
  }
  long long v37 = (__CVBuffer *)objc_msgSend(a1, sel_capturedImage);
  v67.CGFloat a = v33;
  v67.CGFloat b = v34;
  v67.CGFloat c = v29;
  v67.CGFloat d = v30;
  LOBYTE(v67.tx) = 0;
  sub_22F1FE7D4(v37, 0, (uint64_t)&v67, (uint64_t)v70);

  uint64_t result = sub_22F1899D0((uint64_t)v70, (uint64_t)v74, &qword_268694B90);
  if (v75) {
    goto LABEL_7;
  }
  vImagePixelCount v38 = v74[1];
  rect2CGFloat a = (void *)v74[0];
  vImagePixelCount v39 = v74[2];
  size_t v40 = v74[3];
  sub_22F1BADD4();
  uint64_t v41 = sub_22F1BA5BC();
  uint64_t v43 = v42;
  uint64_t v45 = v44;
  size_t v47 = v46;
  swift_release();
  long long v48 = (void *)sub_22F1BAC24();
  sub_22F1FEBF8(rect2a, v38, v39, v40, v41, v43, v45, v47, (uint64_t)v71, v66, v62, v35, v32, 8uLL, v48);
  uint64_t v49 = v71[0];
  uint64_t v50 = v71[1];
  uint64_t v51 = v71[2];
  uint64_t v52 = v71[3];
  char v53 = v72;
  uint64_t result = sub_22F1899D0((uint64_t)v71, (uint64_t)v73, &qword_268694B90);
  if (v73[32]) {
    goto LABEL_7;
  }
LABEL_8:
  *(void *)a2 = v49;
  *(void *)(a2 + 8) = v50;
  *(void *)(a2 + 16) = v51;
  *(void *)(a2 + 24) = v52;
  *(unsigned char *)(a2 + 32) = v53;
  return result;
}

uint64_t sub_22F1BE754(id a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  if (a4)
  {
    uint64_t v8 = (__CVBuffer *)objc_msgSend(a1, sel_capturedImage);
    double v47 = sub_22F1BAB2C();
    uint64_t v48 = v9;
    uint64_t v49 = v10;
    uint64_t v50 = v11;
    char v51 = 0;
    sub_22F1FE7D4(v8, 0, (uint64_t)&v47, (uint64_t)v40);

    sub_22F1899D0((uint64_t)v40, (uint64_t)v43, &qword_268694B90);
    uint64_t v7 = 0;
    if (v44) {
      return v7;
    }
    vImagePixelCount v12 = v43[1];
    vImagePixelCount v39 = (void *)v43[0];
    int64_t v13 = v43[2];
    int64_t v14 = v43[3];
    sub_22F1BADD4();
    uint64_t v15 = sub_22F1BA5BC();
    uint64_t v17 = v16;
    uint64_t v19 = v18;
    uint64_t v21 = v20;
    swift_release();
    v45[0] = v15;
    v45[1] = v17;
    _OWORD v45[2] = v19;
    v45[3] = v21;
    char v46 = 0;
    float v22 = sub_22F1BA7F0();
    long long v23 = (void *)sub_22F1BAC24();
    sub_22F1FEEFC(v39, v12, v13, v14, (uint64_t)v45, 0, v23, (uint64_t)v41, v22);
    uint64_t v24 = v41[0];
    uint64_t v25 = v41[1];
    uint64_t v26 = v41[2];
    uint64_t v27 = v41[3];
    sub_22F1899D0((uint64_t)v41, (uint64_t)v42, &qword_268694B90);
    uint64_t v7 = 0;
    if (v42[32]) {
      return v7;
    }
  }
  else
  {
    sub_22F1BE3DC(a1, (uint64_t)v45, *(CGFloat *)&a2, *(CGFloat *)&a3);
    sub_22F1899D0((uint64_t)v45, (uint64_t)&v47, &qword_268694B90);
    if (v51) {
      return 0;
    }
    uint64_t v24 = *(void *)&v47;
    uint64_t v25 = v48;
    uint64_t v26 = v49;
    uint64_t v27 = v50;
  }
  id v28 = objc_msgSend(a1, sel_camera, v39);
  id v29 = objc_msgSend(self, sel_currentDevice);
  id v30 = objc_msgSend(v29, sel_orientation);

  objc_msgSend(v28, sel_eulerAngles);
  float v32 = v31;
  switch((unint64_t)v30)
  {
    case 1uLL:
    case 5uLL:
      float v33 = 1.5708;
      goto LABEL_12;
    case 2uLL:
      float v33 = -1.5708;
      goto LABEL_12;
    case 3uLL:
      float v33 = 3.1416;
LABEL_12:
      float v32 = v31 + v33;
      break;
    default:
      break;
  }
  uint64_t v34 = *(void *)(v5 + 624);
  float v35 = v32 * 57.296;
  swift_retain();
  objc_msgSend(a1, sel_timestamp);
  double v37 = v36;
  type metadata accessor for PatchTracker.Keyframe();
  uint64_t v7 = swift_allocObject();
  PatchTracker.Keyframe.init(_:camera:scaledImage:orientation:gravityOffsetAngle:timestamp:anchor:)(v5, v28, v24, v25, v26, v27, v34, 0, v35, v37);
  return v7;
}

uint64_t PatchTracker.Keyframe.__allocating_init(_:camera:scaledImage:orientation:gravityOffsetAngle:timestamp:anchor:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, float a9, double a10)
{
  uint64_t v20 = swift_allocObject();
  PatchTracker.Keyframe.init(_:camera:scaledImage:orientation:gravityOffsetAngle:timestamp:anchor:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return v20;
}

uint64_t sub_22F1BEAF4(uint64_t a1, uint64_t a2, CGFloat a3, CGFloat a4)
{
  uint64_t v5 = v4;
  sub_22F1BB570(&v42.a);
  CGAffineTransform v46 = v42;
  v53.CGFloat x = a3;
  v53.CGFloat y = a4;
  CGPoint v10 = CGPointApplyAffineTransform(v53, &v46);
  double v11 = v10.x - sub_22F1BB024();
  double v12 = v10.y - *(double *)(v4 + 288);
  v54.origin.CGFloat x = sub_22F1BABD0();
  v55.size.CGFloat width = 11.0;
  v55.size.CGFloat height = 11.0;
  v55.origin.CGFloat x = v11;
  v55.origin.CGFloat y = v12;
  if (CGRectContainsRect(v54, v55))
  {
    int64_t v13 = *(void **)(v4 + 800);
    uint64_t v14 = *(void *)(v4 + 808);
    type metadata accessor for PatchTracker.Patch();
    swift_allocObject();
    swift_retain();
    id v15 = v13;
    uint64_t v16 = sub_22F1C6398(a1, (uint64_t)v15, v14, 0, v11, v12, 11.0, 11.0, a3, a4, 0.0);
    swift_release();

    sub_22F1FF220(*(void *)(*(void *)(v16 + 128) + 32), *(void *)(*(void *)(v16 + 128) + 56), 1, *(CGFloat *)(v16 + 24), *(CGFloat *)(v16 + 32), *(CGFloat *)(v16 + 40), *(CGFloat *)(v16 + 48));
    uint64_t v18 = v17;
    int64_t v20 = v19;
    vImagePixelCount v22 = v21;
    int64_t v24 = v23;
    v51[0] = sub_22F1BB134();
    v51[1] = v25;
    v51[2] = v26;
    v51[3] = v27;
    char v52 = 0;
    id v28 = sub_22F1BB3D8();
    sub_22F188E70(v18, v20, v22, v24, (uint64_t)v51, v28, 8uLL, (uint64_t)v43);
    sub_22F1899D0((uint64_t)v43, (uint64_t)v44, &qword_268694B90);
    if ((v45 & 1) == 0)
    {
      memset(v47, 0, sizeof(v47));
      char v48 = 1;
      memset(v49, 0, sizeof(v49));
      char v50 = 1;
      sub_22F189134(v44[0], v44[1], v44[2], (uint64_t)v47, (uint64_t)v49, (uint64_t)v49);
      if (v29 < 4.0)
      {
        swift_beginAccess();
        uint64_t v30 = *(void *)(v5 + 824);
        sub_22F1899D0(a2, (uint64_t)&v46, &qword_268695438);
        if (sub_22F1C630C((uint64_t)&v46) == 1 || (LOBYTE(v46.a) & 1) != 0 || (v30 & 4) == 0)
        {
          swift_release();
          return 0;
        }
        swift_beginAccess();
        sub_22F1C6330(v5 + 832, (uint64_t)v40);
        if (v41)
        {
          sub_22F1AD024((uint64_t)v40, (uint64_t)v37);
          sub_22F1C4FE0((uint64_t)v40);
          uint64_t v34 = v38;
          uint64_t v35 = v39;
          __swift_project_boxed_opaque_existential_0(v37, v38);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 40))(v16, v34, v35);
          swift_release();
          goto LABEL_13;
        }
        swift_release();
        goto LABEL_17;
      }
    }
  }
  else
  {
    swift_beginAccess();
    uint64_t v31 = *(void *)(v4 + 824);
    sub_22F1899D0(a2, (uint64_t)&v46, &qword_268695438);
    uint64_t v16 = 0;
    if (sub_22F1C630C((uint64_t)&v46) != 1)
    {
      uint64_t v16 = 0;
      if ((LOBYTE(v46.a) & 1) == 0 && (v31 & 4) != 0)
      {
        swift_beginAccess();
        sub_22F1C6330(v5 + 832, (uint64_t)v40);
        if (v41)
        {
          sub_22F1AD024((uint64_t)v40, (uint64_t)v37);
          sub_22F1C4FE0((uint64_t)v40);
          uint64_t v32 = v38;
          uint64_t v33 = v39;
          __swift_project_boxed_opaque_existential_0(v37, v38);
          (*(void (**)(uint64_t, uint64_t))(v33 + 32))(v32, v33);
LABEL_13:
          __swift_destroy_boxed_opaque_existential_0((uint64_t)v37);
          return 0;
        }
LABEL_17:
        sub_22F1C4FE0((uint64_t)v40);
        return 0;
      }
    }
  }
  return v16;
}

void *PatchTracker.DebugOptions.drawPatches.unsafeMutableAddressor()
{
  return &static PatchTracker.DebugOptions.drawPatches;
}

uint64_t PatchTracker.Patch.__allocating_init(imageRect:keyframe:sceneView:screenPoint:matchingScore:matchingSimilarities:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7, double a8, double a9, double a10, float a11)
{
  swift_allocObject();
  uint64_t v22 = sub_22F1C6398(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  swift_release();

  return v22;
}

uint64_t sub_22F1BEF7C@<X0>(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  unint64_t v97 = MEMORY[0x263F8EE78];
  uint64_t v8 = swift_retain();
  MEMORY[0x230FB2700](v8);
  if (*(void *)((v97 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v97 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
LABEL_50:
  }
    sub_22F223D18();
  sub_22F223D68();
  sub_22F223CD8();
  p_CGFloat b = (unint64_t)&v4[17].b;
  swift_beginAccess();
  CGFloat b = v4[17].b;
  sub_22F1899D0(a2, (uint64_t)v112, &qword_268695438);
  if (sub_22F1C630C((uint64_t)v112) == 1 || (v112[0] & 1) != 0 || (LOBYTE(b) & 4) == 0) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = MEMORY[0x263F8EE78];
  }
  uint64_t v96 = v11;
  p_CGFloat c = (uint64_t *)&v4[12].c;
  swift_beginAccess();
  CGFloat c = v4[12].c;
  if (*(void *)&c >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v68 = sub_22F2245C8();
    swift_bridgeObjectRelease();
    uint64_t v15 = v68 - 1;
    if (!__OFSUB__(v68, 1)) {
      goto LABEL_9;
    }
LABEL_53:
    __break(1u);
LABEL_54:
    swift_bridgeObjectRetain();
    uint64_t v69 = sub_22F2245C8();
    swift_bridgeObjectRelease();
    if (v69 < 5) {
      goto LABEL_48;
    }
    goto LABEL_55;
  }
  uint64_t v14 = *(void *)((*(void *)&c & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v15 = v14 - 1;
  if (__OFSUB__(v14, 1)) {
    goto LABEL_53;
  }
LABEL_9:
  CGRect v85 = (uint64_t *)&v4[17].b;
  uint64_t v86 = a2;
  CGRect v87 = (uint64_t *)a3;
  uint64_t v88 = v4;
  a3 = 0;
  a2 = 0;
  p_CGFloat ty = (uint64_t *)&v4[12].ty;
  while (1)
  {
    unint64_t v16 = v15;
    if (v15 > 0)
    {
      if (a3 > 2) {
        break;
      }
      --v15;
      goto LABEL_17;
    }
    if ((v15 != 0) | a2 & 1 || a3 > 2) {
      break;
    }
    uint64_t v15 = 0;
    a2 = 1;
LABEL_17:
    uint64_t v17 = *p_c;
    if ((*p_c & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v18 = MEMORY[0x230FB2E90](v16, v17);
      swift_bridgeObjectRelease();
    }
    else
    {
      if (v16 >= *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_50;
      }
      uint64_t v18 = *(void *)(v17 + 8 * v16 + 32);
      swift_retain();
    }
    uint64_t v19 = *((void *)a1 + 16);
    if (*(double *)(v18 + 80) == *(double *)(v19 + 80)
      || (id v20 = *(id *)(v19 + 24),
          Swift::Bool v21 = PatchTracker.Keyframe.isCameraAligned(with:)((ARCamera)v20),
          v20,
          uint64_t v4 = &v102,
          v21))
    {
      swift_release();
    }
    else
    {
      PatchTracker.Keyframe.getEpipolarLine(patch:)((uint64_t)a1, (uint64_t)v98);
      sub_22F1899D0((uint64_t)v98, (uint64_t)v110, &qword_268695480);
      if (v111) {
        goto LABEL_42;
      }
      double v22 = *(double *)v110;
      double v23 = *(double *)&v110[1];
      double v24 = *(double *)&v110[2];
      double v25 = *(double *)&v110[3];
      double v26 = sub_22F1BB024();
      double v27 = v22 - v26;
      double v29 = v23 - v28;
      double v30 = v24 - v26;
      double v31 = v25 - v28;
      uint64_t v82 = *(void *)(v18 + 32);
      uint64_t v79 = *(void *)(v18 + 48);
      uint64_t v80 = *(void *)(v18 + 40);
      sub_22F1C1184((uint64_t)v99);
      memset(v114, 0, 32);
      v114[32] = 1;
      double v32 = a1[3];
      double v33 = a1[4];
      CGFloat v34 = a1[5];
      CGFloat v35 = a1[6];
      uint64_t v77 = *(void *)(v19 + 40);
      uint64_t v78 = *(void *)(v19 + 32);
      uint64_t v76 = *(void *)(v19 + 48);
      sub_22F1C1184((uint64_t)v100);
      CGRect.ints.getter(v32, v33, v34, v35);
      uint64_t v37 = v36;
      uint64_t v39 = v38;
      v115[0] = v40;
      v115[1] = v41;
      v115[2] = v36;
      v115[3] = v38;
      char v116 = 0;
      sub_22F1C1DDC();
      uint64_t v43 = v42;
      uint64_t v4 = (CGAffineTransform *)p_ty;
      swift_beginAccess();
      v103[0] = 0;
      sub_22F1893C4(v82, v80, v79, (uint64_t)v99, (uint64_t)v114, v78, v77, v76, (uint64_t)v101, v27, v29, v30, v31, 0.8, (uint64_t)v100, (uint64_t)v115, v43, p_ty);
      swift_endAccess();
      sub_22F1899D0((uint64_t)v101, (uint64_t)&v105, &qword_268694BA0);
      if (v109) {
        goto LABEL_42;
      }
      int v44 = v107;
      uint64_t v45 = v108;
      double v46 = (double)v105;
      double v47 = (double)v106;
      double v48 = (double)v37;
      double v49 = (double)v39;
      CGFloat v50 = (double)v37 * 0.5 + (double)v105;
      CGFloat v51 = (double)v39 * 0.5 + (double)v106;
      sub_22F1BB6F0(&v102.a);
      CGAffineTransform v113 = v102;
      v117.CGFloat x = v50;
      v117.CGFloat y = v51;
      CGPoint v52 = CGPointApplyAffineTransform(v117, &v113);
      CGFloat tx = v88[16].tx;
      uint64_t v54 = *(void *)&v88[16].ty;
      type metadata accessor for PatchTracker.Patch();
      uint64_t result = swift_allocObject();
      *(void *)(result + 136) = 0;
      *(_DWORD *)(result + 144) = 0;
      *(unsigned char *)(result + 148) = 1;
      uint64_t v56 = qword_268695418;
      *(void *)(result + 16) = qword_268695418;
      BOOL v57 = __OFADD__(v56, 1);
      uint64_t v58 = v56 + 1;
      if (v57)
      {
        __break(1u);
        return result;
      }
      uint64_t v59 = result;
      qword_268695418 = v58;
      *(double *)(result + 24) = v46;
      *(double *)(result + 32) = v47;
      *(double *)(result + 40) = v48;
      *(double *)(result + 48) = v49;
      *(CGPoint *)(result + 56) = v52;
      *(void *)(result + 128) = v18;
      *(_DWORD *)(result + 120) = v44;
      *(void *)(result + 112) = v45;
      swift_retain();
      uint64_t v4 = (CGAffineTransform *)*(id *)&tx;
      PatchTracker.Keyframe.getRay(screenPoint:sceneView:)(v52.x, v52.y, (uint64_t)v4, v54);
      long long v81 = v61;
      long long v83 = v60;

      *(_OWORD *)(v59 + 80) = v83;
      *(_OWORD *)(v59 + 96) = v81;
      if (!swift_weakLoadStrong()) {
        goto LABEL_37;
      }
      float v62 = *(float *)(v59 + 120);
      if (v62 < 0.8 || v62 > 0.99)
      {
        swift_release();
        goto LABEL_37;
      }
      uint64_t v63 = *(void *)(v59 + 112);
      swift_release();
      if (v63 <= 3)
      {
        uint64_t v64 = swift_retain();
        MEMORY[0x230FB2700](v64);
        uint64_t v4 = *(CGAffineTransform **)((v97 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if ((unint64_t)v4 >= *(void *)((v97 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          sub_22F223D18();
        }
        sub_22F223D68();
        sub_22F223CD8();
        p_CGFloat b = v97;
        if (v97 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v65 = sub_22F2245C8();
        }
        else
        {
          uint64_t v65 = *(void *)((v97 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
        }
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        a3 = 0;
        if (v65 >= 8) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_37:
        if (v96)
        {
          uint64_t v66 = swift_retain();
          MEMORY[0x230FB2700](v66);
          uint64_t v4 = *(CGAffineTransform **)((v96 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if ((unint64_t)v4 >= *(void *)((v96 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            sub_22F223D18();
          }
          sub_22F223D68();
          sub_22F223CD8();
        }
        swift_release();
LABEL_42:
        swift_release();
        ++a3;
      }
    }
  }
  p_CGFloat b = v97;
LABEL_46:
  sub_22F1B2524((uint64_t)v95);
  a3 = v86;
  p_CGFloat c = v87;
  if (p_b >> 62) {
    goto LABEL_54;
  }
  if (*(uint64_t *)((p_b & 0xFFFFFFFFFFFFFF8) + 0x10) < 5)
  {
LABEL_48:
    CGAffineTransform v67 = (CGAffineTransform *)v95;
    goto LABEL_56;
  }
LABEL_55:
  unint64_t v70 = swift_bridgeObjectRetain();
  sub_22F1BF800(v70, a3, (uint64_t)v103);
  sub_22F1899D0((uint64_t)v103, (uint64_t)&v113, &qword_268695288);
  swift_bridgeObjectRelease();
  CGAffineTransform v67 = &v113;
LABEL_56:
  sub_22F1899D0((uint64_t)v67, (uint64_t)v94, &qword_268695288);
  sub_22F1899D0((uint64_t)v94, (uint64_t)&v113, &qword_268695288);
  uint64_t v71 = *v85;
  sub_22F1899D0(a3, (uint64_t)v104, &qword_268695438);
  if (sub_22F1C630C((uint64_t)v104) == 1 || (v104[0] & 1) != 0 || (v71 & 4) == 0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_beginAccess();
    sub_22F1C6330((uint64_t)&v88[17].c, (uint64_t)v92);
    if (v93)
    {
      sub_22F1AD024((uint64_t)v92, (uint64_t)v89);
      sub_22F1C4FE0((uint64_t)v92);
      uint64_t v72 = v90;
      uint64_t v73 = v91;
      __swift_project_boxed_opaque_existential_0(v89, v90);
      uint64_t v74 = v96;
      char v75 = *(void (**)(unint64_t, uint64_t, CGAffineTransform *, uint64_t, uint64_t))(v73 + 48);
      swift_bridgeObjectRetain();
      v75(p_b, v74, &v113, v72, v73);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v89);
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_22F1C4FE0((uint64_t)v92);
    }
  }
  swift_bridgeObjectRelease();
  return sub_22F1899D0((uint64_t)v94, (uint64_t)p_c, &qword_268695288);
}

BOOL static PatchTracker.Keyframe.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 80) == *(double *)(a2 + 80);
}

uint64_t sub_22F1BF800@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  sub_22F1B2524((uint64_t)v150);
  sub_22F1899D0((uint64_t)v150, (uint64_t)v119, &qword_268695288);
  long long v118 = (void *)MEMORY[0x263F8EE78];
  unint64_t v8 = a1 >> 62;
  if (a1 >> 62) {
    goto LABEL_67;
  }
  uint64_t v9 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v9) {
    goto LABEL_68;
  }
LABEL_3:
  unint64_t v79 = a1 & 0xC000000000000001;
  uint64_t v60 = a2;
  uint64_t v61 = a3;
  if ((a1 & 0xC000000000000001) != 0) {
    goto LABEL_69;
  }
  if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    swift_retain();
    while (1)
    {
      uint64_t result = swift_bridgeObjectRelease();
      if (v8)
      {
        swift_bridgeObjectRetain();
        uint64_t v12 = sub_22F2245C8();
        uint64_t result = swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v12 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      if (v12 < 1) {
        goto LABEL_71;
      }
      uint64_t v81 = v4;
      if (v12 == 1)
      {
        sub_22F1899D0((uint64_t)v150, (uint64_t)&v104, &qword_268695288);
        uint64_t v13 = MEMORY[0x263F8EE78];
LABEL_49:
        uint64_t v102 = v13;
        sub_22F1899D0((uint64_t)&v104, (uint64_t)v101, &qword_268695288);
        unint64_t v44 = *(void *)(v13 + 16);
        swift_bridgeObjectRetain();
        sub_22F1C6660((uint64_t)&v104, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))sub_22F1B257C);
        sub_22F1BB500();
        swift_release();
        if (v44 < 4
          || (sub_22F1BB500(),
              uint64_t v45 = (float32x4_t *)swift_bridgeObjectRetain(),
              sub_22F1B1ED0(v45, (uint64_t)v121, 0.5),
              sub_22F1899D0((uint64_t)v121, (uint64_t)v86, &qword_268695280),
              swift_release(),
              swift_bridgeObjectRelease(),
              sub_22F1899D0((uint64_t)v121, (uint64_t)&v122, &qword_268695280),
              sub_22F1B2544((uint64_t)&v122) == 1))
        {
          sub_22F1899D0((uint64_t)&v104, (uint64_t)v103, &qword_268695288);
          uint64_t v46 = v13;
        }
        else
        {
          long long v84 = v122;
          uint64_t v47 = v123;
          uint64_t v48 = v124;
          char v49 = v125;
          long long v78 = v127;
          long long v80 = v126;
          uint64_t v50 = v129;
          long long v74 = v130;
          long long v76 = v128;
          long long v72 = v131;
          uint64_t v51 = v132;
          int v52 = v134;
          uint64_t v46 = v135;
          uint64_t v53 = v133;
          sub_22F1C6660((uint64_t)&v104, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))sub_22F1B263C);
          swift_bridgeObjectRelease();
          sub_22F1899D0((uint64_t)v86, (uint64_t)v85, &qword_268695280);
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          uint64_t v102 = v46;
          long long v88 = v84;
          uint64_t v89 = v47;
          uint64_t v90 = v48;
          uint64_t v4 = v81;
          char v91 = v49;
          long long v92 = v80;
          long long v93 = v78;
          long long v94 = v76;
          uint64_t v95 = v50;
          long long v96 = v74;
          long long v97 = v72;
          uint64_t v98 = v51;
          uint64_t v99 = v53;
          int v100 = v52;
          nullsub_1(&v88);
          sub_22F1899D0((uint64_t)&v88, (uint64_t)v101, &qword_268695288);
          sub_22F1899D0((uint64_t)&v88, (uint64_t)v103, &qword_268695288);
        }
        if (*(void *)(v46 + 16) < 2uLL) {
          goto LABEL_60;
        }
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_268695250);
        uint64_t v54 = swift_allocObject();
        *(_OWORD *)(v54 + 16) = xmmword_22F228080;
        *(void *)(v54 + 32) = v11;
        v86[0] = v54;
        sub_22F223CD8();
        unint64_t v55 = v86[0];
        uint64_t v56 = *(void *)(v46 + 16);
        if (v56)
        {
          v86[0] = MEMORY[0x263F8EE78];
          swift_retain();
          swift_bridgeObjectRetain();
          sub_22F224498();
          uint64_t v57 = 176;
          do
          {
            swift_retain();
            sub_22F224468();
            sub_22F2244A8();
            sub_22F2244B8();
            sub_22F224478();
            v57 += 176;
            --v56;
          }
          while (v56);
          unint64_t v58 = v86[0];
          swift_bridgeObjectRelease();
          uint64_t v4 = v81;
        }
        else
        {
          swift_retain();
          unint64_t v58 = MEMORY[0x263F8EE78];
        }
        v86[0] = v55;
        sub_22F1C09CC(v58);
        sub_22F1C0554(v86[0], (uint64_t)v85);
        sub_22F1899D0((uint64_t)v85, (uint64_t)v87, &qword_268695288);
        swift_bridgeObjectRelease();
        sub_22F1899D0((uint64_t)v85, (uint64_t)v86, &qword_268695288);
        if (sub_22F1B2544((uint64_t)v86) == 1)
        {
LABEL_60:
          uint64_t v59 = v103;
        }
        else
        {
          sub_22F1C6660((uint64_t)v103, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))sub_22F1B263C);
          sub_22F1899D0((uint64_t)v85, (uint64_t)v101, &qword_268695288);
          uint64_t v59 = v87;
        }
        sub_22F1899D0((uint64_t)v59, (uint64_t)&v88, &qword_268695288);
        sub_22F1C6660((uint64_t)&v88, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))sub_22F1B257C);
        sub_22F1C028C(v4, v60, (uint64_t *)&v118, &v102, v119, v101);
        swift_release();
        sub_22F1C6660((uint64_t)&v88, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))sub_22F1B263C);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_22F1C6660((uint64_t)&v104, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))sub_22F1B263C);
        return sub_22F1899D0((uint64_t)&v88, v61, &qword_268695288);
      }
      if (!v79)
      {
        unint64_t v14 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v14 < 2 || v12 - 1 >= v14) {
          goto LABEL_72;
        }
      }
      sub_22F1899D0((uint64_t)v150, (uint64_t)&v122, &qword_268695288);
      a3 = 0;
      uint64_t v77 = v12 - 2;
      char v75 = (void *)MEMORY[0x263F8EE78];
      float v15 = 0.0;
      unint64_t v62 = a1;
      uint64_t v63 = v11;
      if (v79)
      {
LABEL_16:
        uint64_t v16 = MEMORY[0x230FB2E90](a3 + 1, a1);
        goto LABEL_18;
      }
      while (1)
      {
        uint64_t v16 = *(void *)(a1 + 8 * a3 + 40);
        swift_retain();
LABEL_18:
        uint64_t v17 = sub_22F1C1D74();
        unint64_t v8 = v16;
        uint64_t v18 = sub_22F1C1D74();
        uint64_t v19 = *(void *)(v18 + 16);
        a2 = *(void *)(v17 + 16);
        uint64_t v4 = a2 + v19;
        if (__OFADD__(a2, v19)) {
          break;
        }
        unint64_t v8 = v18;
        char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
        if (!isUniquelyReferenced_nonNull_native || v4 > *(void *)(v17 + 24) >> 1)
        {
          if (a2 <= v4) {
            int64_t v21 = a2 + v19;
          }
          else {
            int64_t v21 = a2;
          }
          uint64_t v17 = (uint64_t)sub_22F19BA74(isUniquelyReferenced_nonNull_native, v21, 1, (char *)v17);
        }
        uint64_t v4 = v81;
        if (*(void *)(v8 + 16))
        {
          uint64_t v22 = *(void *)(v17 + 16);
          if ((*(void *)(v17 + 24) >> 1) - v22 < v19) {
            goto LABEL_65;
          }
          memcpy((void *)(v17 + 8 * v22 + 32), (const void *)(v8 + 32), 8 * v19);
          if (v19)
          {
            uint64_t v23 = *(void *)(v17 + 16);
            BOOL v24 = __OFADD__(v23, v19);
            uint64_t v25 = v23 + v19;
            if (v24) {
              goto LABEL_66;
            }
            *(void *)(v17 + 16) = v25;
          }
        }
        else if (v19)
        {
          goto LABEL_64;
        }
        swift_bridgeObjectRelease();
        __n128 v82 = computeTriangulation(v17 + 32, *(void *)(v17 + 16));
        swift_bridgeObjectRelease();
        sub_22F1C0D1C(v11, v16, (uint64_t)v120, (int32x4_t)v82);
        sub_22F1899D0((uint64_t)v120, (uint64_t)v121, &qword_268695288);
        sub_22F1899D0((uint64_t)v120, (uint64_t)&v136, &qword_268695288);
        if (sub_22F1B2544((uint64_t)&v136) == 1)
        {
          swift_release();
LABEL_36:
          sub_22F1899D0((uint64_t)&v122, (uint64_t)v86, &qword_268695288);
          goto LABEL_37;
        }
        float v26 = v148;
        if (v148 < *(float *)(v81 + 464) || *(float *)(v81 + 460) < v148)
        {
          swift_release();
          sub_22F1C6660((uint64_t)v120, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))sub_22F1B263C);
          goto LABEL_36;
        }
        uint64_t v27 = v137;
        uint64_t v28 = v138;
        char v29 = v139;
        uint64_t v30 = v143;
        int v31 = v147;
        float v32 = v149;
        uint64_t v33 = v146;
        long long v83 = v136;
        long long v71 = v141;
        long long v73 = v140;
        long long v69 = v144;
        long long v70 = v142;
        long long v68 = v145;
        uint64_t v66 = v146;
        uint64_t v67 = v143;
        uint64_t v65 = v137;
        char v64 = v139;
        if (v15 >= v149)
        {
          sub_22F1899D0((uint64_t)&v122, (uint64_t)v85, &qword_268695288);
        }
        else
        {
          sub_22F1C6660((uint64_t)&v122, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))sub_22F1B263C);
          sub_22F1899D0((uint64_t)v121, (uint64_t)v103, &qword_268695288);
          swift_retain();
          swift_retain();
          swift_release();
          swift_release();
          long long v104 = v83;
          uint64_t v105 = v27;
          uint64_t v106 = v28;
          char v107 = v29;
          long long v108 = v73;
          long long v109 = v71;
          long long v110 = v70;
          uint64_t v111 = v30;
          long long v112 = v69;
          long long v113 = v68;
          uint64_t v114 = v33;
          int v115 = v31;
          float v116 = v26;
          float v117 = v32;
          nullsub_1(&v104);
          sub_22F1899D0((uint64_t)&v104, (uint64_t)v119, &qword_268695288);
          swift_retain();
          swift_retain();
          sub_22F1899D0((uint64_t)&v104, (uint64_t)v85, &qword_268695288);
          float v15 = v32;
        }
        sub_22F1899D0((uint64_t)v121, (uint64_t)&v104, &qword_268695288);
        swift_retain();
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          char v75 = sub_22F19B834(0, v75[2] + 1, 1, v75);
        }
        unint64_t v35 = v75[2];
        unint64_t v34 = v75[3];
        long long v36 = v83;
        long long v38 = v71;
        long long v37 = v73;
        long long v40 = v69;
        long long v39 = v70;
        long long v41 = v68;
        if (v35 >= v34 >> 1)
        {
          uint64_t v43 = sub_22F19B834((void *)(v34 > 1), v35 + 1, 1, v75);
          long long v41 = v68;
          long long v40 = v69;
          long long v39 = v70;
          long long v38 = v71;
          long long v37 = v73;
          long long v36 = v83;
          char v75 = v43;
        }
        v75[2] = v35 + 1;
        unsigned int v42 = &v75[22 * v35];
        *((_OWORD *)v42 + 2) = v36;
        v42[6] = v65;
        v42[7] = v28;
        *((unsigned char *)v42 + 64) = v64;
        *((_OWORD *)v42 + 5) = v37;
        *((_OWORD *)v42 + 6) = v38;
        *((_OWORD *)v42 + 7) = v39;
        v42[16] = v67;
        *((_OWORD *)v42 + 9) = v40;
        *((_OWORD *)v42 + 10) = v41;
        v42[22] = v66;
        *((_DWORD *)v42 + 46) = v31;
        *((float *)v42 + 47) = v26;
        *((float *)v42 + 48) = v32;
        sub_22F1C6660((uint64_t)v120, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))sub_22F1B263C);
        swift_release();
        long long v118 = v75;
        sub_22F1899D0((uint64_t)v85, (uint64_t)v86, &qword_268695288);
        a1 = v62;
        uint64_t v11 = v63;
LABEL_37:
        if (v77 == a3)
        {
          sub_22F1899D0((uint64_t)v86, (uint64_t)&v104, &qword_268695288);
          uint64_t v13 = (uint64_t)v75;
          goto LABEL_49;
        }
        sub_22F1899D0((uint64_t)v86, (uint64_t)&v122, &qword_268695288);
        ++a3;
        if (v79) {
          goto LABEL_16;
        }
      }
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      swift_bridgeObjectRetain();
      uint64_t result = sub_22F2245C8();
      if (result) {
        goto LABEL_3;
      }
LABEL_68:
      swift_bridgeObjectRelease();
      __break(1u);
LABEL_69:
      uint64_t v11 = MEMORY[0x230FB2E90](0, a1);
    }
  }
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
  return result;
}

uint64_t sub_22F1C028C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  swift_beginAccess();
  uint64_t v12 = *(void *)(a1 + 824);
  sub_22F1899D0(a2, (uint64_t)v35, &qword_268695438);
  uint64_t result = sub_22F1C630C((uint64_t)v35);
  if result != 1 && (v35[0] & 1) == 0 && (v12)
  {
    swift_beginAccess();
    sub_22F1C6330(a1 + 832, (uint64_t)v33);
    if (v34)
    {
      sub_22F1AD024((uint64_t)v33, (uint64_t)v28);
      sub_22F1C4FE0((uint64_t)v33);
      uint64_t v15 = v29;
      uint64_t v14 = v30;
      __swift_project_boxed_opaque_existential_0(v28, v29);
      uint64_t v16 = *a3;
      uint64_t v17 = *a4;
      sub_22F1899D0((uint64_t)a5, (uint64_t)v31, &qword_268695288);
      sub_22F1899D0((uint64_t)v31, (uint64_t)v32, &qword_268695288);
      int v18 = sub_22F1B2544((uint64_t)v32);
      if (v18 == 1)
      {
        uint64_t v24 = 0;
        uint64_t v25 = 0;
      }
      else
      {
        uint64_t v24 = a5[1];
        uint64_t v25 = *a5;
      }
      sub_22F1899D0((uint64_t)a6, (uint64_t)v26, &qword_268695288);
      sub_22F1899D0((uint64_t)v26, (uint64_t)v27, &qword_268695288);
      int v19 = sub_22F1B2544((uint64_t)v27);
      if (v19 == 1)
      {
        uint64_t v20 = 0;
        uint64_t v21 = 0;
      }
      else
      {
        uint64_t v20 = *a6;
        uint64_t v21 = a6[1];
      }
      BOOL v22 = v19 == 1;
      uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, BOOL, uint64_t, uint64_t, BOOL, uint64_t, uint64_t))(v14 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v23(v16, v17, v25, v24, v18 == 1, v20, v21, v22, v15, v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return __swift_destroy_boxed_opaque_existential_0((uint64_t)v28);
    }
    else
    {
      return sub_22F1C4FE0((uint64_t)v33);
    }
  }
  return result;
}

uint64_t PatchTracker.triangulatePatches(sourcePatch:destPatch:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_22F1C1D74();
  uint64_t v7 = sub_22F1C1D74();
  v10[0] = v6;
  sub_22F1C08E8(v7);
  __n128 v9 = computeTriangulation(v10[0] + 32, *(void *)(v10[0] + 16));
  swift_bridgeObjectRelease();
  sub_22F1C0D1C(a1, a2, (uint64_t)v10, (int32x4_t)v9);
  return sub_22F1899D0((uint64_t)v10, a3, &qword_268695288);
}

void sub_22F1C0554(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!(a1 >> 62))
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4) {
      goto LABEL_3;
    }
LABEL_34:
    swift_bridgeObjectRelease();
    computeTriangulation(MEMORY[0x263F8EE78] + 32, *(void *)(MEMORY[0x263F8EE78] + 16));
    __break(1u);
    goto LABEL_35;
  }
LABEL_33:
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_22F2245C8();
  if (!v4) {
    goto LABEL_34;
  }
LABEL_3:
  if (v4 >= 1)
  {
    uint64_t v24 = a2;
    uint64_t v5 = 0;
    unint64_t v6 = a1 & 0xC000000000000001;
    uint64_t v23 = (uint64_t *)(a1 + 32);
    uint64_t v7 = (char *)MEMORY[0x263F8EE78];
    while (1)
    {
      if (v6) {
        MEMORY[0x230FB2E90](v5, a1);
      }
      else {
        swift_retain();
      }
      uint64_t v8 = sub_22F1C1D74();
      a2 = *(void *)(v8 + 16);
      int64_t v9 = *((void *)v7 + 2);
      int64_t v10 = v9 + a2;
      if (__OFADD__(v9, a2))
      {
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      uint64_t v11 = v8;
      char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
      if (isUniquelyReferenced_nonNull_native && v10 <= *((void *)v7 + 3) >> 1)
      {
        if (*(void *)(v11 + 16)) {
          goto LABEL_19;
        }
      }
      else
      {
        if (v9 <= v10) {
          int64_t v13 = v9 + a2;
        }
        else {
          int64_t v13 = v9;
        }
        uint64_t v7 = sub_22F19BA74(isUniquelyReferenced_nonNull_native, v13, 1, v7);
        if (*(void *)(v11 + 16))
        {
LABEL_19:
          uint64_t v14 = *((void *)v7 + 2);
          if ((*((void *)v7 + 3) >> 1) - v14 < a2) {
            goto LABEL_31;
          }
          memcpy(&v7[8 * v14 + 32], (const void *)(v11 + 32), 8 * a2);
          if (a2)
          {
            uint64_t v15 = *((void *)v7 + 2);
            BOOL v16 = __OFADD__(v15, a2);
            uint64_t v17 = v15 + a2;
            if (v16) {
              goto LABEL_32;
            }
            *((void *)v7 + 2) = v17;
          }
          goto LABEL_6;
        }
      }
      if (a2) {
        goto LABEL_30;
      }
LABEL_6:
      ++v5;
      swift_bridgeObjectRelease();
      swift_release();
      if (v4 == v5)
      {
        swift_bridgeObjectRelease();
        __n128 v22 = computeTriangulation((uint64_t)(v7 + 32), *((void *)v7 + 2));
        if (v6) {
          goto LABEL_36;
        }
        unint64_t v18 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v18)
        {
          unint64_t v19 = v4 - 1;
          if (!__OFSUB__(v4, 1))
          {
            if (v19 < v18)
            {
              uint64_t v20 = *v23;
              uint64_t v21 = v23[v19];
              swift_retain();
              swift_retain();
              goto LABEL_28;
            }
LABEL_40:
            __break(1u);
LABEL_41:
            __break(1u);
            return;
          }
        }
        else
        {
          __break(1u);
        }
        __break(1u);
        goto LABEL_40;
      }
    }
  }
LABEL_35:
  __break(1u);
LABEL_36:
  swift_bridgeObjectRetain();
  uint64_t v20 = MEMORY[0x230FB2E90](0, a1);
  if (__OFSUB__(v4, 1)) {
    goto LABEL_41;
  }
  uint64_t v21 = MEMORY[0x230FB2E90](v4 - 1, a1);
  swift_bridgeObjectRelease();
LABEL_28:
  swift_bridgeObjectRelease();
  sub_22F1C0D1C(v20, v21, (uint64_t)v25, (int32x4_t)v22);
  swift_release();
  swift_release();
  sub_22F1899D0((uint64_t)v25, v24, &qword_268695288);
}

uint64_t sub_22F1C0804(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    int64_t v11 = v4 + v2;
  }
  else {
    int64_t v11 = v4;
  }
  uint64_t result = (uint64_t)sub_22F19B630((char *)result, v11, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  uint64_t v7 = *(void *)(v3 + 16);
  if ((*(void *)(v3 + 24) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = (uint64_t)memcpy((void *)(v3 + 16 * v7 + 32), (const void *)(v6 + 32), 16 * v2);
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v8 = *(void *)(v3 + 16);
  BOOL v9 = __OFADD__(v8, v2);
  uint64_t v10 = v8 + v2;
  if (!v9)
  {
    *(void *)(v3 + 16) = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_22F1C08E8(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    int64_t v11 = v4 + v2;
  }
  else {
    int64_t v11 = v4;
  }
  uint64_t result = (uint64_t)sub_22F19BA74((char *)result, v11, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  uint64_t v7 = *(void *)(v3 + 16);
  if ((*(void *)(v3 + 24) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = (uint64_t)memcpy((void *)(v3 + 8 * v7 + 32), (const void *)(v6 + 32), 8 * v2);
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v8 = *(void *)(v3 + 16);
  BOOL v9 = __OFADD__(v8, v2);
  uint64_t v10 = v8 + v2;
  if (!v9)
  {
    *(void *)(v3 + 16) = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_22F1C09CC(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = sub_22F2245C8();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_22F2245C8();
    swift_bridgeObjectRelease();
    uint64_t v6 = v5 + v3;
    if (!__OFADD__(v5, v3)) {
      goto LABEL_5;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3)) {
    goto LABEL_25;
  }
LABEL_5:
  unint64_t v4 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v4;
  uint64_t v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v5 = 1;
  }
  if (v4 >> 62) {
    goto LABEL_27;
  }
  uint64_t v9 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6) {
      uint64_t v9 = v6;
    }
    swift_bridgeObjectRetain();
    unint64_t v4 = MEMORY[0x230FB2EA0](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *uint64_t v1 = v4;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    uint64_t result = sub_22F1C6018(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_22F2245C8();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();
  return sub_22F223CD8();
}

float sub_22F1C0B98(double a1, double a2)
{
  uint64_t v3 = v2;
  float v4 = *(float *)(v2 + 472);
  sub_22F1BD0F0(a1, a2);
  uint64_t v6 = v5;
  swift_beginAccess();
  uint64_t v7 = *(void *)(v2 + 544);
  if (*(void *)(v7 + 16) && (unint64_t v8 = sub_22F18DF9C(v6), (v9 & 1) != 0))
  {
    uint64_t v10 = (_OWORD *)(*(void *)(v7 + 56) + 192 * v8);
    long long v12 = v10[2];
    long long v11 = v10[3];
    long long v13 = v10[1];
    v24[0] = *v10;
    v24[1] = v13;
    _OWORD v24[2] = v12;
    float32x4_t v24[3] = v11;
    long long v14 = v10[4];
    long long v15 = v10[5];
    long long v16 = v10[7];
    v24[6] = v10[6];
    v24[7] = v16;
    v24[4] = v14;
    v24[5] = v15;
    long long v17 = v10[8];
    long long v18 = v10[9];
    long long v19 = v10[10];
    uint64_t v25 = *((void *)v10 + 22);
    v24[9] = v18;
    v24[10] = v19;
    char v24[8] = v17;
    memmove(__dst, v10, 0xB8uLL);
    nullsub_1(__dst);
    sub_22F1962F8((uint64_t)v24);
  }
  else
  {
    sub_22F1C67B0((uint64_t)v24);
    sub_22F1899D0((uint64_t)v24, (uint64_t)__dst, &qword_2686954B0);
  }
  sub_22F1899D0((uint64_t)__dst, (uint64_t)v23, &qword_2686954B0);
  sub_22F1899D0((uint64_t)v23, (uint64_t)v24, &qword_2686954B0);
  if (sub_22F1B2544((uint64_t)v24) != 1)
  {
    float v20 = v27;
    sub_22F1899D0((uint64_t)__dst, (uint64_t)v22, &qword_2686954B0);
    sub_22F1C67D4(v22);
    if (v4 <= (float)(v20 + (float)(v20 * *(float *)(v3 + 484)))) {
      return v20 + (float)(v20 * *(float *)(v3 + 484));
    }
  }
  return v4;
}

uint64_t sub_22F1C0D1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, int32x4_t a4@<Q0>)
{
  int v6 = ((unsigned __int32)a4.i32[3] >> 23);
  unsigned __int32 v7 = a4.i32[3] & 0x7FFFFF;
  BOOL v8 = v6 != 255 || v7 == 0;
  int v9 = v6 | v7;
  if (!v8 || v9 == 0) {
    goto LABEL_20;
  }
  uint64_t v13 = *(void *)(a1 + 128);
  long long v14 = *(void **)(v13 + 88);
  float v59 = *(float *)&a4.i32[2] / *(float *)&a4.i32[3];
  float32x2_t v60 = vdiv_f32(*(float32x2_t *)a4.i8, (float32x2_t)vdup_laneq_s32(a4, 3));
  if (v14)
  {
    objc_msgSend(v14, sel_transform);
    long long v57 = v15;
    objc_msgSend(v14, sel_transform);
  }
  else
  {
    objc_msgSend(*(id *)(v13 + 24), sel_transform);
    long long v57 = v19;
    objc_msgSend(*(id *)(v13 + 24), sel_transform);
  }
  *(float32x2_t *)v20.f32 = v60;
  *(float32x2_t *)v16.f32 = vsub_f32(v60, v17);
  v16.f32[2] = v59 - v18;
  float32x4_t v21 = v16;
  v21.i32[3] = 0;
  int32x4_t v22 = (int32x4_t)vmulq_f32(v21, v21);
  v22.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v22, 2), vadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v22.i8, 1))).u32[0];
  float32x2_t v23 = vrsqrte_f32((float32x2_t)v22.u32[0]);
  float32x2_t v24 = vmul_f32(v23, vrsqrts_f32((float32x2_t)v22.u32[0], vmul_f32(v23, v23)));
  float32x4_t v25 = vmulq_n_f32(v16, vmul_f32(v24, vrsqrts_f32((float32x2_t)v22.u32[0], vmul_f32(v24, v24))).f32[0]);
  if ((float)(vmuls_lane_f32(*(float *)(a1 + 104), v25, 2)
             + (float)((float)(*(float *)(a1 + 96) * v25.f32[0])
                     + vmuls_lane_f32(*(float *)(a1 + 100), *(float32x2_t *)v25.f32, 1))) < *(float *)(v4 + 468))
    goto LABEL_20;
  v20.i64[1] = LODWORD(v59);
  float32x4_t v55 = v25;
  float32x4_t v56 = v20;
  float v26 = sub_22F1C0B98(*(double *)(a1 + 56), *(double *)(a1 + 64));
  float v28 = v27;
  if (v14) {
    objc_msgSend(v14, sel_transform);
  }
  else {
    objc_msgSend(*(id *)(v13 + 24), sel_transform);
  }
  float32x4_t v30 = vsubq_f32(v29, v56);
  float32x4_t v31 = vmulq_f32(v30, v30);
  float v32 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 2), vaddq_f32(v31, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 1))).f32[0]);
  if (v32 < v26 || v28 < v32)
  {
LABEL_20:
    sub_22F1B2524((uint64_t)&v62);
  }
  else
  {
    long long v35 = v57;
    HIDWORD(v35) = 0;
    uint64_t v36 = *(void *)(a2 + 128);
    long long v37 = *(void **)(v36 + 88);
    long long v58 = v35;
    if (v37)
    {
      objc_msgSend(v37, sel_transform);
      objc_msgSend(v37, sel_transform, v38, v39);
    }
    else
    {
      objc_msgSend(*(id *)(v36 + 24), sel_transform);
      objc_msgSend(*(id *)(v36 + 24), sel_transform, v42, v43);
    }
    long long v44 = v53;
    HIDWORD(v44) = 0;
    long long v54 = v44;
    *(float32x2_t *)v45.f32 = vsub_f32(v60, v40);
    v45.f32[2] = v59 - v41;
    v45.i32[3] = 0;
    int32x4_t v46 = (int32x4_t)vmulq_f32(v45, v45);
    v46.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v46, 2), vadd_f32(*(float32x2_t *)v46.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v46.i8, 1))).u32[0];
    float32x2_t v47 = vrsqrte_f32((float32x2_t)v46.u32[0]);
    float32x2_t v48 = vmul_f32(v47, vrsqrts_f32((float32x2_t)v46.u32[0], vmul_f32(v47, v47)));
    float32x4_t v61 = vmulq_n_f32(v45, vmul_f32(v48, vrsqrts_f32((float32x2_t)v46.u32[0], vmul_f32(v48, v48))).f32[0]);
    float32x4_t v49 = vmulq_f32(v55, v61);
    float v50 = v49.f32[2] + vaddv_f32(*(float32x2_t *)v49.f32);
    float v51 = acosf(v50);
    float v52 = *(float *)(a2 + 120);
    float32x4_t v62 = v56;
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    char v65 = 1;
    float32x4_t v66 = v56;
    long long v67 = v58;
    float32x4_t v68 = v55;
    uint64_t v69 = a1;
    long long v70 = v54;
    float32x4_t v71 = v61;
    uint64_t v72 = a2;
    float v73 = v32;
    float v74 = v50;
    float v75 = v52 * fminf(fabsf(v51) / 0.17453, 1.0);
    nullsub_1(&v62);
    swift_retain();
    swift_retain();
  }
  sub_22F1899D0((uint64_t)&v62, (uint64_t)v76, &qword_268695288);
  return sub_22F1899D0((uint64_t)v76, a3, &qword_268695288);
}

double sub_22F1C1064()
{
  if (*(unsigned char *)(v0 + 192))
  {
    uint64_t v1 = *(void **)(v0 + 24);
    uint64_t v2 = *(void *)(v0 + 64);
    objc_msgSend(v1, sel_projectionMatrixForOrientation_viewportSize_zNear_zFar_, v2, *(double *)(v0 + 112), *(double *)(v0 + 120), 0.00100000005, 1000.0);
    float32x4_t v13 = v3;
    float32x4_t v14 = v4;
    float32x4_t v15 = v5;
    float32x4_t v16 = v6;
    objc_msgSend(v1, sel_viewMatrixForOrientation_, v2);
    float32x4_t v8 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v13, v7.f32[0]), v14, *(float32x2_t *)v7.f32, 1), v15, v7, 2), v16, v7, 3);
    *(float32x4_t *)(v0 + 128) = v8;
    *(float32x4_t *)(v0 + 144) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v13, v9.f32[0]), v14, *(float32x2_t *)v9.f32, 1), v15, v9, 2), v16, v9, 3);
    *(float32x4_t *)(v0 + 160) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v13, v10.f32[0]), v14, *(float32x2_t *)v10.f32, 1), v15, v10, 2), v16, v10, 3);
    *(float32x4_t *)(v0 + 176) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v13, v11.f32[0]), v14, *(float32x2_t *)v11.f32, 1), v15, v11, 2), v16, v11, 3);
    *(unsigned char *)(v0 + 192) = 0;
  }
  else
  {
    v8.i64[0] = *(void *)(v0 + 128);
  }
  return *(double *)v8.i64;
}

uint64_t sub_22F1C1184@<X0>(uint64_t a1@<X8>)
{
  if (*(unsigned char *)(v1 + 233))
  {
    swift_weakLoadStrong();
    uint64_t result = swift_release();
    long long v4 = 0uLL;
    *(_OWORD *)(v1 + 200) = 0u;
    *(_OWORD *)(v1 + 216) = 0u;
    char v5 = 1;
    *(_WORD *)(v1 + 232) = 1;
    long long v6 = 0uLL;
  }
  else
  {
    long long v6 = *(_OWORD *)(v1 + 216);
    long long v4 = *(_OWORD *)(v1 + 200);
    char v5 = *(unsigned char *)(v1 + 232) & 1;
  }
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 32) = v5;
  return result;
}

uint64_t PatchTracker.Keyframe.init(_:camera:scaledImage:orientation:gravityOffsetAngle:timestamp:anchor:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, float a9, double a10)
{
  uint64_t v11 = v10;
  swift_weakInit();
  *(_OWORD *)(v11 + 160) = 0u;
  *(_OWORD *)(v11 + 176) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_OWORD *)(v11 + 144) = 0u;
  *(unsigned char *)(v11 + 192) = 1;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_WORD *)(v11 + 232) = 256;
  swift_weakAssign();
  *(void *)(v11 + 24) = a2;
  *(void *)(v11 + 32) = a3;
  *(void *)(v11 + 40) = a4;
  *(void *)(v11 + 48) = a5;
  *(void *)(v11 + 56) = a6;
  *(void *)(v11 + 64) = a7;
  *(float *)(v11 + 72) = a9;
  *(double *)(v11 + 80) = a10;
  *(void *)(v11 + 88) = a8;
  int32x4_t v22 = *(void **)(a1 + 800);
  uint64_t v23 = *(void *)(a1 + 808);
  uint64_t ObjectType = swift_getObjectType();
  float32x4_t v25 = *(double (**)(uint64_t, uint64_t))(v23 + 8);
  id v26 = a8;
  id v27 = v22;
  id v28 = a2;
  double v29 = v25(ObjectType, v23);
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34;

  swift_release();
  *(double *)(v11 + 96) = v29;
  *(void *)(v11 + 104) = v31;
  *(void *)(v11 + 112) = v33;
  *(void *)(v11 + 120) = v35;
  return v11;
}

uint64_t PatchTracker.Keyframe.deinit()
{
  if (swift_weakLoadStrong())
  {
    sub_22F1BC524((void *)v0);
    swift_release();
  }
  swift_weakDestroy();

  return v0;
}

uint64_t PatchTracker.Keyframe.__deallocating_deinit()
{
  if (swift_weakLoadStrong())
  {
    sub_22F1BC524((void *)v0);
    swift_release();
  }
  swift_weakDestroy();

  return swift_deallocClassInstance();
}

uint64_t PatchTracker.Keyframe.getEpipolarLine(patch:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = swift_weakLoadStrong();
  CGFloat x = 0.0;
  if (!result) {
    goto LABEL_14;
  }
  float v7 = sub_22F1C0B98(*(double *)(a1 + 56), *(double *)(a1 + 64));
  int8x16_t v10 = *(int8x16_t *)(a1 + 80);
  int8x16_t v9 = *(int8x16_t *)(a1 + 96);
  *(float *)&uint64_t v11 = *(float *)v10.i32 + (float)(v7 * *(float *)v9.i32);
  v12.i32[1] = v9.i32[1];
  v12.i32[0] = vextq_s8(v9, v9, 8uLL).u32[0];
  v13.i32[1] = v10.i32[1];
  v13.i32[0] = vextq_s8(v10, v10, 8uLL).u32[0];
  float32x2_t v66 = vadd_f32(v13, vmul_n_f32(v12, v7));
  float point = *(float *)&v11;
  float32x4_t v15 = *(void **)(v2 + 88);
  double v70 = COERCE_DOUBLE(vadd_f32(*(float32x2_t *)v10.i8, vmul_n_f32(*(float32x2_t *)v9.i8, v14)));
  float32x4_t v64 = (float32x4_t)v10;
  float32x4_t v65 = (float32x4_t)v9;
  if (v15) {
    objc_msgSend(v15, sel_transform, *(void *)&v12, v9.i64[1], v11, v8);
  }
  else {
    objc_msgSend(*(id *)(v2 + 24), sel_transform, *(void *)&v12, v9.i64[1], v11, v8);
  }
  *(float32x2_t *)v18.f32 = vsub_f32(0, v16);
  v18.f32[2] = 0.0 - v17;
  v18.i32[3] = 0;
  *(double *)&pointCGFloat a = COERCE_DOUBLE(__PAIR64__(v66.u32[1], LODWORD(point)));
  float32x2_t v62 = *(float32x2_t *)v18.f32;
  float32x4_t v63 = v18;
  float v61 = 0.0 - v17;
  if (v15) {
    objc_msgSend(v15, sel_transform);
  }
  else {
    objc_msgSend(*(id *)(v2 + 24), sel_transform);
  }
  *(float32x2_t *)v21.f32 = vadd_f32(vmul_f32(v62, (float32x2_t)vdup_n_s32(0x3A83126Fu)), v19);
  v21.f32[2] = (float)(v61 * 0.001) + v20;
  v21.i32[3] = 0;
  sub_22F1D2EA0(v64, v65, v21, v63);
  if ((v24 & 1) != 0
    || (float32x2_t v25 = vmul_f32(v59, vsub_f32((float32x2_t)__PAIR64__(HIDWORD(v22), v23), v66)),
        (float)(v25.f32[0] + (float)((float)(v65.f32[0] * (float)(*(float *)&v22 - v60)) + v25.f32[1])) <= 0.0))
  {
    double v26 = *(double *)&pointa;
  }
  else
  {
    double v26 = v22;
  }
  id v27 = *(void **)(v2 + 24);
  uint64_t v28 = *(void *)(v2 + 64);
  double v29 = *(double *)(v2 + 112);
  double v30 = *(double *)(v2 + 120);
  objc_msgSend(v27, sel_projectPoint_orientation_viewportSize_, v28, v26, v29, v30);
  CGFloat v32 = v31;
  CGFloat v34 = v33;
  objc_msgSend(v27, sel_projectPoint_orientation_viewportSize_, v28, v70, v29, v30);
  sub_22F1A9FD8((uint64_t)v73, v32, v34, v35, v36, *(CGFloat *)(v2 + 96), *(CGFloat *)(v2 + 104), v29, v30);
  sub_22F1899D0((uint64_t)v73, (uint64_t)v75, &qword_2686951C0);
  if (v76)
  {
    uint64_t result = swift_release();
LABEL_14:
    CGFloat y = 0.0;
    char v38 = 1;
    CGFloat v39 = 0.0;
    CGFloat v40 = 0.0;
    CGFloat v41 = 0.0;
    CGFloat v42 = 0.0;
    CGFloat width = 0.0;
    CGFloat height = 0.0;
    goto LABEL_20;
  }
  CGFloat v45 = *(double *)v75;
  CGFloat v46 = *(double *)&v75[1];
  CGFloat v71 = *(double *)&v75[2];
  pointCGFloat b = *(double *)&v75[3];
  sub_22F1BB570(&v74.a);
  CGFloat a = v74.a;
  CGFloat b = v74.b;
  CGFloat c = v74.c;
  CGFloat d = v74.d;
  CGFloat tx = v74.tx;
  CGFloat ty = v74.ty;
  CGAffineTransform v72 = v74;
  v77.CGFloat x = v45;
  v77.CGFloat y = v46;
  CGPoint v53 = CGPointApplyAffineTransform(v77, &v72);
  CGFloat x = v53.x;
  CGFloat y = v53.y;
  v72.CGFloat a = a;
  v72.CGFloat b = b;
  v72.CGFloat c = c;
  v72.CGFloat d = d;
  v72.CGFloat tx = tx;
  v72.CGFloat ty = ty;
  v78.CGFloat x = v71;
  v78.CGFloat y = pointb;
  CGPoint v56 = CGPointApplyAffineTransform(v78, &v72);
  double v55 = v56.y;
  CGFloat v54 = v56.x;
  CGFloat v39 = v56.x;
  CGFloat v40 = v56.y;
  if (v56.x >= v53.x) {
    CGFloat v54 = v53.x;
  }
  if (v56.y >= v53.y) {
    double v55 = v53.y;
  }
  double v57 = vabdd_f64(v53.x, v56.x);
  double v58 = vabdd_f64(v53.y, v56.y);
  CGRect v79 = CGRectInset(*(CGRect *)&v54, *(double *)(a1 + 40) * -0.5, *(double *)(a1 + 48) * -0.5);
  CGFloat v41 = v79.origin.x;
  CGFloat v42 = v79.origin.y;
  CGFloat width = v79.size.width;
  CGFloat height = v79.size.height;
  uint64_t result = swift_release();
  char v38 = 0;
LABEL_20:
  *(CGFloat *)a2 = x;
  *(CGFloat *)(a2 + 8) = y;
  *(CGFloat *)(a2 + 16) = v39;
  *(CGFloat *)(a2 + 24) = v40;
  *(CGFloat *)(a2 + 32) = v41;
  *(CGFloat *)(a2 + 40) = v42;
  *(CGFloat *)(a2 + 48) = width;
  *(CGFloat *)(a2 + 56) = height;
  *(unsigned char *)(a2 + 64) = v38;
  return result;
}

uint64_t PatchTracker.Keyframe.computeTriangulationMatrix(screenPoint:triangulationWith3Rows:)(char a1, double a2, double a3)
{
  double v5 = a2 / *(double *)(v3 + 112) + a2 / *(double *)(v3 + 112);
  double v6 = a3 / *(double *)(v3 + 120) + a3 / *(double *)(v3 + 120);
  *(double *)&long long v7 = sub_22F1C1064();
  long long v16 = v7;
  long long v17 = v8;
  long long v18 = v9;
  long long v19 = v10;
  if (a1) {
    uint64_t v11 = 12;
  }
  else {
    uint64_t v11 = 8;
  }
  uint64_t v12 = sub_22F223D48();
  *(void *)(v12 + 16) = v11;
  bzero((void *)(v12 + 32), 8 * v11);
  double v13 = v5 + -1.0;
  double v14 = 1.0 - v6;
  *(double *)(v12 + 32) = (v5 + -1.0) * *((float *)&v16 + 2) - *(float *)&v16;
  *(double *)(v12 + 40) = (v5 + -1.0) * *((float *)&v17 + 2) - *(float *)&v17;
  *(double *)(v12 + 48) = (v5 + -1.0) * *((float *)&v18 + 2) - *(float *)&v18;
  *(double *)(v12 + 56) = (v5 + -1.0) * *((float *)&v19 + 2) - *(float *)&v19;
  *(double *)(v12 + 64) = (1.0 - v6) * *((float *)&v16 + 2) - *((float *)&v16 + 1);
  *(double *)(v12 + 72) = (1.0 - v6) * *((float *)&v17 + 2) - *((float *)&v17 + 1);
  *(double *)(v12 + 80) = (1.0 - v6) * *((float *)&v18 + 2) - *((float *)&v18 + 1);
  *(double *)(v12 + 88) = (1.0 - v6) * *((float *)&v19 + 2) - *((float *)&v19 + 1);
  if (a1)
  {
    *(double *)(v12 + 96) = v13 * *((float *)&v16 + 1) - v14 * *(float *)&v16;
    *(double *)(v12 + 104) = v13 * *((float *)&v17 + 1) - v14 * *(float *)&v17;
    *(double *)(v12 + 112) = v13 * *((float *)&v18 + 1) - v14 * *(float *)&v18;
    *(double *)(v12 + 120) = v13 * *((float *)&v19 + 1) - v14 * *(float *)&v19;
  }
  return v12;
}

void PatchTracker.Keyframe.getRay(screenPoint:sceneView:)(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  long long v9 = *(void **)(v4 + 24);
  uint64_t ObjectType = swift_getObjectType();
  CGFloat v11 = (*(double (**)(uint64_t, uint64_t, double, double))(a4 + 24))(ObjectType, a4, a1, a2);
  CGFloat v13 = v12;
  (*(void (**)(uint64_t, uint64_t))(a4 + 8))(ObjectType, a4);
  objc_msgSend(v9, sel_imageResolution);
  ARViewToCameraImageTransform();
  v22.CGFloat x = v11;
  v22.CGFloat y = v13;
  CGPointApplyAffineTransform(v22, &v19);
  uint64_t v14 = *(void *)(v4 + 88);
  if (v14)
  {
    objc_msgSend(*(id *)(v5 + 88), sel_transform);
  }
  else
  {
    long long v15 = 0uLL;
    long long v16 = 0uLL;
    long long v17 = 0uLL;
    long long v18 = 0uLL;
  }
  *(_OWORD *)&v19.CGFloat a = v15;
  *(_OWORD *)&v19.CGFloat c = v16;
  *(_OWORD *)&v19.CGFloat tx = v17;
  long long v20 = v18;
  BOOL v21 = v14 == 0;
  _sSo7ARFrameC17MeasureFoundationE9getHitRay11cameraPoint0G00G18CorrectedTransforms5SIMD3VySfG6origin_AJ9directionts5SIMD2VySfG_So8ARCameraCSo13simd_float4x4aSgtFZ_0(v9, (uint64_t)&v19);
}

Swift::Bool __swiftcall PatchTracker.Keyframe.isCameraAligned(with:)(ARCamera with)
{
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v4 = Strong;
    [(objc_class *)with.super.isa transform];
    uint64_t v5 = *(void **)(v1 + 88);
    float32x4_t v23 = v6;
    if (v5) {
      objc_msgSend(v5, sel_transform);
    }
    else {
      objc_msgSend(*(id *)(v1 + 24), sel_transform);
    }
    float32x4_t v8 = vsubq_f32(v23, v7);
    if ((float)(vmuls_lane_f32(v8.f32[2], v8, 2) + vaddv_f32(vmul_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v8.f32))) < 0.0001) {
      goto LABEL_10;
    }
    v8.i32[3] = 0;
    int32x4_t v9 = (int32x4_t)vmulq_f32(v8, v8);
    v9.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v9, 2), vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v9.i8, 1))).u32[0];
    float32x2_t v10 = vrsqrte_f32((float32x2_t)v9.u32[0]);
    float32x2_t v11 = vmul_f32(v10, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(v10, v10)));
    int8x16_t v24 = (int8x16_t)vmulq_n_f32(v8, vmul_f32(v11, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(v11, v11))).f32[0]);
    if (v5) {
      objc_msgSend(v5, sel_transform);
    }
    else {
      objc_msgSend(*(id *)(v1 + 24), sel_transform);
    }
    float v13 = vmuls_n_f32(*(float *)v24.i32, *(float *)v12.i32);
    v14.i32[1] = v24.i32[1];
    v14.i32[0] = vextq_s8(v24, v24, 8uLL).u32[0];
    v12.i32[0] = vextq_s8(v12, v12, 8uLL).u32[0];
    float32x2_t v15 = vmul_f32(v14, *(float32x2_t *)v12.i8);
    float v16 = *(float *)(v4 + 432);
    if (v16 >= fabsf(v15.f32[0] + (float)(v13 + v15.f32[1])))
    {
      float32x2_t v22 = v14;
      [(objc_class *)with.super.isa transform];
      int8x16_t v21 = v17;
      swift_release();
      int8x16_t v18 = v21;
      v18.i32[0] = vextq_s8(v18, v18, 8uLL).u32[0];
      float32x2_t v19 = vmul_f32(v22, *(float32x2_t *)v18.i8);
      LOBYTE(Strong) = v16 < fabsf(v19.f32[0] + (float)((float)(*(float *)v24.i32 * *(float *)v21.i32) + v19.f32[1]));
    }
    else
    {
LABEL_10:
      swift_release();
      LOBYTE(Strong) = 1;
    }
  }
  return Strong;
}

void PatchTracker.Keyframe.getImagePack(rect:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = v2[5];
  uint64_t v18 = v2[4];
  uint64_t v6 = v2[6];
  uint64_t v7 = v2[7];
  sub_22F1C1184((uint64_t)v19);
  uint64_t v8 = v19[0];
  uint64_t v9 = v19[1];
  uint64_t v10 = v19[2];
  uint64_t v11 = v19[3];
  char v12 = v20;
  sub_22F1899D0(a1, (uint64_t)v21, &qword_268695448);
  char v13 = v22;
  if (v22)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
  }
  else
  {
    CGRect.ints.getter(v21[0], v21[1], v21[2], v21[3]);
  }
  *(void *)a2 = v18;
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v7;
  *(void *)(a2 + 32) = v8;
  *(void *)(a2 + 40) = v9;
  *(void *)(a2 + 48) = v10;
  *(void *)(a2 + 56) = v11;
  *(unsigned char *)(a2 + 64) = v12;
  *(void *)(a2 + 72) = v14;
  *(void *)(a2 + 80) = v15;
  *(void *)(a2 + 88) = v16;
  *(void *)(a2 + 96) = v17;
  *(unsigned char *)(a2 + 104) = v13;
}

BOOL sub_22F1C1D24(uint64_t a1, uint64_t a2)
{
  return *(double *)(*(void *)a1 + 80) == *(double *)(*(void *)a2 + 80);
}

uint64_t PatchTracker.Patch.id.getter()
{
  return *(void *)(v0 + 16);
}

double PatchTracker.Patch.imageRect.getter()
{
  return *(double *)(v0 + 24);
}

double PatchTracker.Patch.screenPoint.getter()
{
  return *(double *)(v0 + 56);
}

__n128 PatchTracker.Patch.ray.getter()
{
  return v0[5];
}

uint64_t PatchTracker.Patch.matchingSimilarities.getter()
{
  return *(void *)(v0 + 112);
}

float PatchTracker.Patch.matchingScore.getter()
{
  return *(float *)(v0 + 120);
}

uint64_t sub_22F1C1D74()
{
  if (*(void *)(v0 + 136))
  {
    uint64_t v1 = *(void *)(v0 + 136);
  }
  else
  {
    uint64_t v1 = PatchTracker.Keyframe.computeTriangulationMatrix(screenPoint:triangulationWith3Rows:)(0, *(double *)(v0 + 56), *(double *)(v0 + 64));
    *(void *)(v0 + 136) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

void sub_22F1C1DDC()
{
  uint64_t v1 = v0;
  if (*(unsigned char *)(v0 + 148))
  {
    uint64_t v2 = *(void **)(v0 + 128);
    double v3 = *(double *)(v1 + 24);
    double v4 = *(double *)(v1 + 32);
    CGFloat v5 = *(double *)(v1 + 40);
    CGFloat v6 = *(double *)(v1 + 48);
    uint64_t v7 = v2[4];
    uint64_t v8 = v2[5];
    uint64_t v9 = v2[6];
    sub_22F1C1184((uint64_t)v15);
    CGRect.ints.getter(v3, v4, v5, v6);
    v16[0] = v10;
    v16[1] = v11;
    id v16[2] = v12;
    _OWORD v16[3] = v13;
    char v17 = 0;
    memset(v18, 0, sizeof(v18));
    char v19 = 1;
    sub_22F189134(v7, v8, v9, (uint64_t)v15, (uint64_t)v16, (uint64_t)v18);
    *(_DWORD *)(v1 + 144) = v14;
    *(unsigned char *)(v1 + 148) = 0;
  }
}

uint64_t PatchTracker.Patch.init(imageRect:keyframe:sceneView:screenPoint:matchingScore:matchingSimilarities:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7, double a8, double a9, double a10, float a11)
{
  uint64_t v12 = sub_22F1C6398(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  swift_release();

  return v12;
}

Swift::Bool __swiftcall PatchTracker.Patch.isGoodMatch()()
{
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    float v2 = *(float *)(v0 + 120);
    if (v2 >= 0.8 && v2 <= 0.99)
    {
      uint64_t v3 = *(void *)(v0 + 112);
      swift_release();
      LOBYTE(Strong) = v3 < 4;
    }
    else
    {
      swift_release();
      LOBYTE(Strong) = 0;
    }
  }
  return Strong;
}

Swift::Bool __swiftcall PatchTracker.Patch.isFalsePositive()()
{
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    if (*(float *)(v0 + 120) <= 0.99)
    {
      uint64_t v2 = *(void *)(v0 + 112);
      swift_release();
      LOBYTE(Strong) = v2 > 3;
    }
    else
    {
      swift_release();
      LOBYTE(Strong) = 1;
    }
  }
  return Strong;
}

__n128 PatchTracker.Patch.getImagePack()@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *((void *)v1 + 16);
  double v4 = v1[3];
  double v5 = v1[4];
  CGFloat v6 = v1[5];
  CGFloat v7 = v1[6];
  long long v19 = *(_OWORD *)(v3 + 32);
  uint64_t v8 = *(void *)(v3 + 48);
  uint64_t v9 = *(void *)(v3 + 56);
  sub_22F1C1184((uint64_t)&v20);
  __n128 v18 = v20;
  uint64_t v10 = v21;
  uint64_t v11 = v22;
  char v12 = v23;
  CGRect.ints.getter(v4, v5, v6, v7);
  *(_OWORD *)a1 = v19;
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v9;
  __n128 result = v18;
  *(__n128 *)(a1 + 32) = v18;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(unsigned char *)(a1 + 64) = v12;
  *(void *)(a1 + 72) = v14;
  *(void *)(a1 + 80) = v15;
  *(void *)(a1 + 88) = v16;
  *(void *)(a1 + 96) = v17;
  *(unsigned char *)(a1 + 104) = 0;
  return result;
}

void PatchTracker.Patch.getImageBuffer()()
{
  sub_22F1FF220(*(void *)(*(void *)(v0 + 128) + 32), *(void *)(*(void *)(v0 + 128) + 56), 1, *(CGFloat *)(v0 + 24), *(CGFloat *)(v0 + 32), *(CGFloat *)(v0 + 40), *(CGFloat *)(v0 + 48));
}

uint64_t PatchTracker.Patch.deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PatchTracker.Patch.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

BOOL sub_22F1C20F8(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)a1 + 16) == *(void *)(*(void *)a2 + 16);
}

void *PatchTracker.DebugOptions.showPoints.unsafeMutableAddressor()
{
  return &static PatchTracker.DebugOptions.showPoints;
}

uint64_t static PatchTracker.DebugOptions.showPoints.getter()
{
  return 1;
}

uint64_t static PatchTracker.DebugOptions.paintMode.getter()
{
  return 2;
}

uint64_t static PatchTracker.DebugOptions.drawPatches.getter()
{
  return 4;
}

unint64_t sub_22F1C2140()
{
  unint64_t result = sub_22F185C8C((uint64_t)&unk_26E291958);
  static PatchTracker.DebugOptions.keyForFeature = result;
  return result;
}

uint64_t *PatchTracker.DebugOptions.keyForFeature.unsafeMutableAddressor()
{
  if (qword_268694438 != -1) {
    swift_once();
  }
  return &static PatchTracker.DebugOptions.keyForFeature;
}

uint64_t static PatchTracker.DebugOptions.keyForFeature.getter()
{
  return sub_22F188A6C(&qword_268694438);
}

uint64_t sub_22F1C21D8()
{
  if (qword_268694438 != -1) {
    swift_once();
  }
  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = sub_22F1E6DB8(v0);
  uint64_t result = swift_bridgeObjectRelease();
  static PatchTracker.DebugOptions.keys = v1;
  return result;
}

uint64_t *PatchTracker.DebugOptions.keys.unsafeMutableAddressor()
{
  if (qword_268694440 != -1) {
    swift_once();
  }
  return &static PatchTracker.DebugOptions.keys;
}

uint64_t static PatchTracker.DebugOptions.keys.getter()
{
  return sub_22F188A6C(&qword_268694440);
}

uint64_t sub_22F1C22BC()
{
  if (qword_268694438 != -1) {
    swift_once();
  }
  uint64_t result = sub_22F1E2D28(static PatchTracker.DebugOptions.keyForFeature);
  static PatchTracker.DebugOptions.default = result;
  return result;
}

uint64_t sub_22F1C2314(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_268695420);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t static PatchTracker.DebugOptions.default.getter()
{
  if (qword_268694448 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return static PatchTracker.DebugOptions.default;
}

uint64_t static PatchTracker.DebugOptions.default.setter(uint64_t a1)
{
  if (qword_268694448 != -1) {
    swift_once();
  }
  uint64_t result = swift_beginAccess();
  static PatchTracker.DebugOptions.default = a1;
  return result;
}

uint64_t (*static PatchTracker.DebugOptions.default.modify())()
{
  if (qword_268694448 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_22F1C24F4(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_22F1C2594(unint64_t a1, int a2)
{
  uint64_t v3 = v2;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a1 & 0x8000000000000000) != 0 || (uint64_t v7 = *v3, 1 << *(unsigned char *)(*v3 + 32) <= (uint64_t)a1))
  {
    __break(1u);
    goto LABEL_8;
  }
  if (((*(void *)(v7 + 8 * (a1 >> 6) + 56) >> a1) & 1) == 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (*(_DWORD *)(v7 + 36) != a2)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v10 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
LABEL_10:
    sub_22F1C2688();
    uint64_t v7 = v10;
  }
  uint64_t v8 = *(void *)(*(void *)(v7 + 48) + 32 * a1);
  sub_22F1C414C(a1);
  *uint64_t v3 = v10;
  swift_bridgeObjectRelease();
  return v8;
}

void *sub_22F1C2688()
{
  unint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268695488);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_22F2243B8();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 32 * v15;
    uint64_t v17 = (_OWORD *)(*(void *)(v2 + 48) + v16);
    __n128 v18 = (_OWORD *)(*(void *)(v4 + 48) + v16);
    long long v19 = v17[1];
    _OWORD *v18 = *v17;
    v18[1] = v19;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_22F1C2828()
{
  return sub_22F1C29E0(&qword_268695490);
}

id sub_22F1C2834()
{
  unint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2686954A8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_22F2243B8();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    id result = v17;
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_22F1C29E0(uint64_t *a1)
{
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = sub_22F2243B8();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    id result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (void *)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v7 + 8 * v17);
    ++v10;
    if (!v18)
    {
      int64_t v10 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v7 + 8 * v10);
      if (!v18)
      {
        int64_t v10 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v7 + 8 * v10);
        if (!v18) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v13 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_12:
    *(void *)(*(void *)(v5 + 48) + 8 * v16) = *(void *)(*(void *)(v3 + 48) + 8 * v16);
    id result = (void *)swift_retain();
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v7 + 8 * v19);
  if (v18)
  {
    int64_t v10 = v19;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v10 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v7 + 8 * v10);
    ++v19;
    if (v18) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_22F1C2B84()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268695488);
  uint64_t result = sub_22F2243C8();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_37:
    *unint64_t v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v14 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v15 = v14 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v16 >= v10) {
      goto LABEL_35;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v5;
    if (!v17)
    {
      int64_t v5 = v16 + 1;
      if (v16 + 1 >= v10) {
        goto LABEL_35;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v5);
      if (!v17)
      {
        int64_t v5 = v16 + 2;
        if (v16 + 2 >= v10) {
          goto LABEL_35;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v5);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v5 << 6);
LABEL_24:
    int64_t v19 = (long long *)(*(void *)(v2 + 48) + 32 * v15);
    long long v27 = v19[1];
    long long v28 = *v19;
    sub_22F2247E8();
    sub_22F224808();
    if ((void)v28) {
      sub_22F2247F8();
    }
    uint64_t result = sub_22F224818();
    uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v11 + 8 * v22);
      }
      while (v26 == -1);
      unint64_t v12 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    unint64_t v13 = (_OWORD *)(*(void *)(v4 + 48) + 32 * v12);
    *unint64_t v13 = v28;
    v13[1] = v27;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v10)
  {
LABEL_35:
    uint64_t result = swift_release();
    unint64_t v1 = v0;
    goto LABEL_37;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v5 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_35;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v5);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_22F1C2E3C()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268695490);
  uint64_t result = sub_22F2243C8();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *unint64_t v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    sub_22F2247E8();
    sub_22F2247F8();
    uint64_t result = sub_22F224818();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
    uint64_t result = swift_retain();
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    unint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_22F1C30C0()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2686954A8);
  uint64_t v3 = sub_22F2243C8();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *unint64_t v1 = v4;
    return result;
  }
  long long v27 = v0;
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      int64_t v12 = v16 + 1;
      if (v16 + 1 >= v9) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v12);
      if (!v17)
      {
        int64_t v12 = v16 + 2;
        if (v16 + 2 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v12);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    id v19 = *(id *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t result = sub_22F2241B8();
    uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v10 + 8 * v22);
      }
      while (v26 == -1);
      unint64_t v13 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(void *)(*(void *)(v4 + 48) + 8 * v13) = v19;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    unint64_t v1 = v27;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_22F1C333C()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268694C48);
  uint64_t v3 = sub_22F2243C8();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *unint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v25 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v26 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    int64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v14 >= v26) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v25 + 8 * v14);
    ++v10;
    if (!v15)
    {
      int64_t v10 = v14 + 1;
      if (v14 + 1 >= v26) {
        goto LABEL_33;
      }
      unint64_t v15 = *(void *)(v25 + 8 * v10);
      if (!v15)
      {
        int64_t v10 = v14 + 2;
        if (v14 + 2 >= v26) {
          goto LABEL_33;
        }
        unint64_t v15 = *(void *)(v25 + 8 * v10);
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v13);
    sub_22F2247E8();
    sub_22F223848();
    sub_22F1C6718();
    swift_retain();
    sub_22F2239F8();
    uint64_t result = sub_22F224818();
    uint64_t v18 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v19 = result & ~v18;
    unint64_t v20 = v19 >> 6;
    if (((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6))) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v21 = 0;
      unint64_t v22 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v22 && (v21 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v23 = v20 == v22;
        if (v20 == v22) {
          unint64_t v20 = 0;
        }
        v21 |= v23;
        uint64_t v24 = *(void *)(v8 + 8 * v20);
      }
      while (v24 == -1);
      unint64_t v11 = __clz(__rbit64(~v24)) + (v20 << 6);
    }
    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    *(void *)(*(void *)(v4 + 48) + 8 * v11) = v17;
    ++*(void *)(v4 + 16);
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v26)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    unint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v15 = *(void *)(v25 + 8 * v16);
  if (v15)
  {
    int64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v26) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v25 + 8 * v10);
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_22F1C3620()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268695488);
  uint64_t result = sub_22F2243C8();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = (void *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v14 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v15 = v14 | (v5 << 6);
      }
      else
      {
        int64_t v16 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v16 >= v10) {
          goto LABEL_35;
        }
        unint64_t v17 = v6[v16];
        ++v5;
        if (!v17)
        {
          int64_t v5 = v16 + 1;
          if (v16 + 1 >= v10) {
            goto LABEL_35;
          }
          unint64_t v17 = v6[v5];
          if (!v17)
          {
            int64_t v5 = v16 + 2;
            if (v16 + 2 >= v10) {
              goto LABEL_35;
            }
            unint64_t v17 = v6[v5];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v10)
              {
LABEL_35:
                uint64_t v27 = 1 << *(unsigned char *)(v2 + 32);
                if (v27 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v27;
                }
                unint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v5 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_41;
                  }
                  if (v5 >= v10) {
                    goto LABEL_35;
                  }
                  unint64_t v17 = v6[v5];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v5 << 6);
      }
      unint64_t v19 = (long long *)(*(void *)(v2 + 48) + 32 * v15);
      long long v28 = v19[1];
      long long v29 = *v19;
      sub_22F2247E8();
      sub_22F224808();
      if ((void)v29) {
        sub_22F2247F8();
      }
      uint64_t result = sub_22F224818();
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v25 = v22 == v24;
          if (v22 == v24) {
            unint64_t v22 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v11 + 8 * v22);
        }
        while (v26 == -1);
        unint64_t v12 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      unint64_t v13 = (_OWORD *)(*(void *)(v4 + 48) + 32 * v12);
      *unint64_t v13 = v29;
      v13[1] = v28;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *unint64_t v1 = v4;
  return result;
}

uint64_t sub_22F1C3908()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268695490);
  uint64_t result = sub_22F2243C8();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = (void *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v26;
                }
                unint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      sub_22F2247E8();
      sub_22F2247F8();
      uint64_t result = sub_22F224818();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *unint64_t v1 = v4;
  return result;
}

uint64_t sub_22F1C3BB4()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2686954A8);
  uint64_t v3 = sub_22F2243C8();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    long long v28 = v0;
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v15 = v14 | (v12 << 6);
      }
      else
      {
        int64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          int64_t v12 = v16 + 1;
          if (v16 + 1 >= v9) {
            goto LABEL_33;
          }
          unint64_t v17 = v6[v12];
          if (!v17)
          {
            int64_t v12 = v16 + 2;
            if (v16 + 2 >= v9) {
              goto LABEL_33;
            }
            unint64_t v17 = v6[v12];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                unint64_t v1 = v28;
                uint64_t v27 = 1 << *(unsigned char *)(v2 + 32);
                if (v27 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v27;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v12 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v9) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v6[v12];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v12 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      uint64_t v19 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
      uint64_t result = sub_22F2241B8();
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v25 = v22 == v24;
          if (v22 == v24) {
            unint64_t v22 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        unint64_t v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(void *)(*(void *)(v4 + 48) + 8 * v13) = v19;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *unint64_t v1 = v4;
  return result;
}

uint64_t sub_22F1C3E54()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268694C48);
  uint64_t v3 = sub_22F2243C8();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v27 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v14 = v13 | (v11 << 6);
      }
      else
      {
        int64_t v15 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v8) {
          goto LABEL_33;
        }
        unint64_t v16 = v27[v15];
        ++v11;
        if (!v16)
        {
          int64_t v11 = v15 + 1;
          if (v15 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v16 = v27[v11];
          if (!v16)
          {
            int64_t v11 = v15 + 2;
            if (v15 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v16 = v27[v11];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v8)
              {
LABEL_33:
                swift_release();
                unint64_t v1 = v0;
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero(v27, ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v27 = -1 << v26;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v27[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v11 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v27[v11];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
      }
      uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      sub_22F2247E8();
      sub_22F223848();
      sub_22F1C6718();
      sub_22F2239F8();
      uint64_t result = sub_22F224818();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v9 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v9 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v9 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *unint64_t v1 = v4;
  return result;
}

unint64_t sub_22F1C414C(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = sub_22F2242C8();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v11 = *(void *)(*(void *)(v3 + 48) + 32 * v6);
        sub_22F2247E8();
        sub_22F224808();
        if (v11) {
          sub_22F2247F8();
        }
        unint64_t v12 = sub_22F224818() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 < v9) {
            goto LABEL_5;
          }
        }
        else if (v12 >= v9)
        {
          goto LABEL_13;
        }
        if (v2 >= (uint64_t)v12)
        {
LABEL_13:
          uint64_t v13 = *(void *)(v3 + 48);
          unint64_t v14 = (_OWORD *)(v13 + 32 * v2);
          int64_t v15 = (_OWORD *)(v13 + 32 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v14 >= v15 + 2))
          {
            long long v10 = v15[1];
            *unint64_t v14 = *v15;
            v14[1] = v10;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v16 = *(void *)(v3 + 16);
  BOOL v17 = __OFSUB__(v16, 1);
  uint64_t v18 = v16 - 1;
  if (v17)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v18;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

unint64_t sub_22F1C4318(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = sub_22F2242C8();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        sub_22F2247E8();
        sub_22F2247F8();
        unint64_t v10 = sub_22F224818() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v10 < v9) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(v3 + 48);
          unint64_t v12 = (void *)(v11 + 8 * v2);
          uint64_t v13 = (void *)(v11 + 8 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v12 >= v13 + 1))
          {
            *unint64_t v12 = *v13;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v14 = *(void *)(v3 + 16);
  BOOL v15 = __OFSUB__(v14, 1);
  uint64_t v16 = v14 - 1;
  if (v15)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v16;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

unint64_t sub_22F1C44C4(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = sub_22F2242C8();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        id v10 = *(id *)(*(void *)(v3 + 48) + 8 * v6);
        uint64_t v11 = sub_22F2241B8();

        unint64_t v12 = v11 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= (uint64_t)v12)
          {
LABEL_16:
            uint64_t v15 = *(void *)(v3 + 48);
            uint64_t v16 = (void *)(v15 + 8 * v2);
            BOOL v17 = (void *)(v15 + 8 * v6);
            if (v2 != v6 || (int64_t v2 = v6, v16 >= v17 + 1))
            {
              *uint64_t v16 = *v17;
              int64_t v2 = v6;
            }
          }
        }
        else if (v12 >= v9 || v2 >= (uint64_t)v12)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v18 = *(void *)(v3 + 16);
  BOOL v19 = __OFSUB__(v18, 1);
  uint64_t v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_22F1C4668(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_268695490);
    uint64_t v2 = sub_22F2243D8();
    uint64_t v14 = v2;
    sub_22F2242F8();
    for (; sub_22F224378(); ++*(void *)(v2 + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_268695498);
      swift_dynamicCast();
      if (*(void *)(v2 + 24) <= *(void *)(v2 + 16))
      {
        sub_22F1C3908();
        uint64_t v2 = v14;
      }
      sub_22F2247E8();
      sub_22F2247F8();
      uint64_t result = sub_22F224818();
      uint64_t v4 = v2 + 56;
      uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
      unint64_t v6 = result & ~v5;
      unint64_t v7 = v6 >> 6;
      if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
      {
        unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v9 = 0;
        unint64_t v10 = (unint64_t)(63 - v5) >> 6;
        do
        {
          if (++v7 == v10 && (v9 & 1) != 0)
          {
            __break(1u);
            return result;
          }
          BOOL v11 = v7 == v10;
          if (v7 == v10) {
            unint64_t v7 = 0;
          }
          v9 |= v11;
          uint64_t v12 = *(void *)(v4 + 8 * v7);
        }
        while (v12 == -1);
        unint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
      }
      *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
      *(void *)(*(void *)(v2 + 48) + 8 * v8) = v13;
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x263F8EE88];
  }
  return v2;
}

uint64_t sub_22F1C4864(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2686954A8);
    uint64_t v2 = sub_22F2243D8();
    uint64_t v14 = v2;
    sub_22F2242F8();
    if (sub_22F224378())
    {
      sub_22F1C6770();
      do
      {
        swift_dynamicCast();
        uint64_t v2 = v14;
        if (*(void *)(v14 + 24) <= *(void *)(v14 + 16))
        {
          sub_22F1C3BB4();
          uint64_t v2 = v14;
        }
        uint64_t result = sub_22F2241B8();
        uint64_t v4 = v2 + 56;
        uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v6 = result & ~v5;
        unint64_t v7 = v6 >> 6;
        if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v9 = 0;
          unint64_t v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v11 = v7 == v10;
            if (v7 == v10) {
              unint64_t v7 = 0;
            }
            v9 |= v11;
            uint64_t v12 = *(void *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          unint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(void *)(*(void *)(v2 + 48) + 8 * v8) = v13;
        ++*(void *)(v2 + 16);
      }
      while (sub_22F224378());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x263F8EE88];
  }
  return v2;
}

uint64_t sub_22F1C4A4C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_268694C48);
    uint64_t v2 = sub_22F2243D8();
    uint64_t v14 = v2;
    sub_22F2242F8();
    if (sub_22F224378())
    {
      type metadata accessor for WorldAnchor();
      do
      {
        swift_dynamicCast();
        uint64_t v2 = v14;
        if (*(void *)(v14 + 24) <= *(void *)(v14 + 16))
        {
          sub_22F1C3E54();
          uint64_t v2 = v14;
        }
        sub_22F2247E8();
        sub_22F223848();
        sub_22F1C6718();
        sub_22F2239F8();
        uint64_t result = sub_22F224818();
        uint64_t v4 = v2 + 56;
        uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v6 = result & ~v5;
        unint64_t v7 = v6 >> 6;
        if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v9 = 0;
          unint64_t v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v11 = v7 == v10;
            if (v7 == v10) {
              unint64_t v7 = 0;
            }
            v9 |= v11;
            uint64_t v12 = *(void *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          unint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(void *)(*(void *)(v2 + 48) + 8 * v8) = v13;
        ++*(void *)(v2 + 16);
      }
      while (sub_22F224378());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x263F8EE88];
  }
  return v2;
}

unint64_t sub_22F1C4C78(uint64_t a1, uint64_t a2)
{
  sub_22F2247E8();
  sub_22F2247F8();
  sub_22F224818();
  unint64_t result = sub_22F2242D8();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

unint64_t sub_22F1C4D1C(uint64_t a1, uint64_t a2)
{
  sub_22F2241B8();
  unint64_t result = sub_22F2242D8();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

unint64_t sub_22F1C4DA0(uint64_t a1, uint64_t a2)
{
  sub_22F2247E8();
  sub_22F223848();
  sub_22F1C6718();
  sub_22F2239F8();
  sub_22F224818();
  unint64_t result = sub_22F2242D8();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

uint64_t sub_22F1C4E68(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = *v5;
  sub_22F2247E8();
  sub_22F224808();
  if (a2) {
    sub_22F2247F8();
  }
  uint64_t v12 = sub_22F224818();
  uint64_t v13 = -1 << *(unsigned char *)(v11 + 32);
  unint64_t v14 = v12 & ~v13;
  if (((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
  {
LABEL_11:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v20 = *v5;
    *uint64_t v5 = 0x8000000000000000;
    sub_22F1C58F4(a2, a3, a4, a5, v14, isUniquelyReferenced_nonNull_native);
    *uint64_t v5 = v20;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_12;
  }
  uint64_t v15 = ~v13;
  while (1)
  {
    uint64_t v16 = *(void *)(*(void *)(v11 + 48) + 32 * v14);
    if (v16) {
      break;
    }
    if (!a2) {
      goto LABEL_10;
    }
LABEL_6:
    unint64_t v14 = (v14 + 1) & v15;
    if (((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
      goto LABEL_11;
    }
  }
  if (!a2 || v16 != a2) {
    goto LABEL_6;
  }
LABEL_10:
  uint64_t result = 0;
  uint64_t v18 = (uint64_t *)(*(void *)(*v5 + 48) + 32 * v14);
  a2 = *v18;
  a3 = v18[1];
  a4 = v18[2];
  a5 = v18[3];
LABEL_12:
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
  return result;
}

uint64_t sub_22F1C4FE0(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_268695420);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_22F1C5040(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v8 = a2;
    uint64_t v9 = sub_22F224358();

    if (v9)
    {
      swift_bridgeObjectRelease();

      sub_22F1C6770();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v26;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = sub_22F224348();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    uint64_t v21 = sub_22F1C4864(v7, result + 1);
    uint64_t v27 = v21;
    if (*(void *)(v21 + 24) <= *(void *)(v21 + 16))
    {
      id v25 = v8;
      sub_22F1C3BB4();
      uint64_t v22 = v27;
    }
    else
    {
      uint64_t v22 = v21;
      id v23 = v8;
    }
    sub_22F1C4D1C((uint64_t)v8, v22);
    *uint64_t v3 = v22;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = sub_22F2241B8();
    uint64_t v12 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v13 = v11 & ~v12;
    if ((*(void *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
    {
      sub_22F1C6770();
      id v14 = *(id *)(*(void *)(v6 + 48) + 8 * v13);
      char v15 = sub_22F2241C8();

      if (v15)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        BOOL v19 = *(void **)(*(void *)(*v2 + 48) + 8 * v13);
        *a1 = v19;
        id v20 = v19;
        return 0;
      }
      uint64_t v16 = ~v12;
      while (1)
      {
        unint64_t v13 = (v13 + 1) & v16;
        if (((*(void *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
          break;
        }
        id v17 = *(id *)(*(void *)(v6 + 48) + 8 * v13);
        char v18 = sub_22F2241C8();

        if (v18) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v28 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    id v8 = a2;
    sub_22F1C5A84((uint64_t)v8, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v28;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

uint64_t sub_22F1C52C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) == 0)
  {
    sub_22F2247E8();
    sub_22F2247F8();
    uint64_t v10 = sub_22F224818();
    uint64_t v11 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v12 = v10 & ~v11;
    if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
      goto LABEL_23;
    }
    uint64_t v22 = v2;
    id v23 = a1;
    uint64_t v13 = ~v11;
    swift_bridgeObjectRetain();
    swift_beginAccess();
    while (1)
    {
      uint64_t v15 = *(void *)(*(void *)(v6 + 48) + 8 * v12);
      swift_beginAccess();
      if (!swift_weakLoadStrong()) {
        break;
      }
      if (!swift_weakLoadStrong())
      {
        swift_retain();
        swift_release();
        goto LABEL_15;
      }
      swift_retain();
      char v14 = sub_22F223818();
      swift_release();
      swift_release();
      swift_release();
      if (v14) {
        goto LABEL_16;
      }
LABEL_10:
      unint64_t v12 = (v12 + 1) & v13;
      if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v22;
        a1 = v23;
LABEL_23:
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v24 = *v3;
        *uint64_t v3 = 0x8000000000000000;
        uint64_t v21 = swift_retain();
        sub_22F1C5BFC(v21, v12, isUniquelyReferenced_nonNull_native);
        *uint64_t v3 = v24;
LABEL_24:
        swift_bridgeObjectRelease();
        *a1 = a2;
        return 1;
      }
    }
    swift_retain();
LABEL_15:
    uint64_t v16 = *(void *)(v15 + 24);
    uint64_t v17 = *(void *)(a2 + 24);
    swift_release();
    if (v16 == v17)
    {
LABEL_16:
      swift_release();
      swift_bridgeObjectRelease();
      *id v23 = *(void *)(*(void *)(*v22 + 48) + 8 * v12);
      swift_retain();
      return 0;
    }
    goto LABEL_10;
  }
  if (v6 < 0) {
    uint64_t v7 = *v2;
  }
  else {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
  }
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v8 = sub_22F224358();
  swift_release();
  if (v8)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_268695498);
    swift_dynamicCast();
    *a1 = v25;
    swift_unknownObjectRelease();
    return 0;
  }
  else
  {
    uint64_t result = sub_22F224348();
    if (!__OFADD__(result, 1))
    {
      uint64_t v18 = sub_22F1C4668(v7, result + 1);
      uint64_t v26 = v18;
      if (*(void *)(v18 + 24) <= *(void *)(v18 + 16))
      {
        swift_retain();
        sub_22F1C3908();
        uint64_t v19 = v26;
      }
      else
      {
        uint64_t v19 = v18;
        swift_retain();
      }
      sub_22F1C4C78(a2, v19);
      *uint64_t v3 = v19;
      goto LABEL_24;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_22F1C55FC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v8 = sub_22F224358();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      type metadata accessor for WorldAnchor();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v21;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = sub_22F224348();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    uint64_t v16 = sub_22F1C4A4C(v7, result + 1);
    uint64_t v22 = v16;
    if (*(void *)(v16 + 24) <= *(void *)(v16 + 16))
    {
      swift_retain();
      sub_22F1C3E54();
      uint64_t v17 = v22;
    }
    else
    {
      uint64_t v17 = v16;
      swift_retain();
    }
    sub_22F1C4DA0(a2, v17);
    *uint64_t v3 = v17;
    swift_bridgeObjectRelease();
    *a1 = a2;
  }
  else
  {
    sub_22F2247E8();
    sub_22F223848();
    sub_22F1C6718();
    swift_bridgeObjectRetain();
    sub_22F2239F8();
    uint64_t v10 = sub_22F224818();
    uint64_t v11 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v12 = v10 & ~v11;
    if ((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
    {
      swift_retain();
      char v13 = sub_22F223818();
      swift_release();
      if (v13)
      {
LABEL_12:
        swift_release();
        swift_bridgeObjectRelease();
        *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v12);
        swift_retain();
        return 0;
      }
      uint64_t v14 = ~v11;
      while (1)
      {
        unint64_t v12 = (v12 + 1) & v14;
        if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
          break;
        }
        swift_retain();
        char v15 = sub_22F223818();
        swift_release();
        if (v15) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    uint64_t v19 = swift_retain();
    sub_22F1C5E2C(v19, v12, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v23;
    swift_bridgeObjectRelease();
    *a1 = a2;
  }
  return 1;
}

uint64_t sub_22F1C58F4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, char a6)
{
  uint64_t v11 = result;
  unint64_t v12 = *(void *)(*v6 + 16);
  unint64_t v13 = *(void *)(*v6 + 24);
  if (v13 > v12 && (a6 & 1) != 0) {
    goto LABEL_18;
  }
  if (a6)
  {
    sub_22F1C3620();
  }
  else
  {
    if (v13 > v12)
    {
      uint64_t result = (uint64_t)sub_22F1C2688();
      goto LABEL_18;
    }
    sub_22F1C2B84();
  }
  uint64_t v14 = *v6;
  sub_22F2247E8();
  sub_22F224808();
  if (v11) {
    sub_22F2247F8();
  }
  uint64_t result = sub_22F224818();
  uint64_t v15 = -1 << *(unsigned char *)(v14 + 32);
  a5 = result & ~v15;
  if ((*(void *)(v14 + 56 + ((a5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a5))
  {
    uint64_t v16 = ~v15;
    do
    {
      uint64_t v17 = *(void *)(*(void *)(v14 + 48) + 32 * a5);
      if (v17)
      {
        if (v11 && v17 == v11)
        {
LABEL_17:
          type metadata accessor for vImage_Buffer(0);
          uint64_t result = sub_22F2247A8();
          __break(1u);
          break;
        }
      }
      else if (!v11)
      {
        goto LABEL_17;
      }
      a5 = (a5 + 1) & v16;
    }
    while (((*(void *)(v14 + 56 + ((a5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a5) & 1) != 0);
  }
LABEL_18:
  uint64_t v18 = *v6;
  *(void *)(*v6 + 8 * (a5 >> 6) + 56) |= 1 << a5;
  uint64_t v19 = (uint64_t *)(*(void *)(v18 + 48) + 32 * a5);
  *uint64_t v19 = v11;
  v19[1] = a2;
  void v19[2] = a3;
  v19[3] = a4;
  uint64_t v20 = *(void *)(v18 + 16);
  BOOL v21 = __OFADD__(v20, 1);
  uint64_t v22 = v20 + 1;
  if (v21) {
    __break(1u);
  }
  else {
    *(void *)(v18 + 16) = v22;
  }
  return result;
}

void sub_22F1C5A84(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_22F1C3BB4();
  }
  else
  {
    if (v7 > v6)
    {
      sub_22F1C2834();
      goto LABEL_14;
    }
    sub_22F1C30C0();
  }
  uint64_t v8 = *v3;
  uint64_t v9 = sub_22F2241B8();
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  a2 = v9 & ~v10;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    sub_22F1C6770();
    id v11 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
    char v12 = sub_22F2241C8();

    if (v12)
    {
LABEL_13:
      sub_22F2247A8();
      __break(1u);
    }
    else
    {
      uint64_t v13 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v14 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
        char v15 = sub_22F2241C8();

        if (v15) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v16 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v16 + 48) + 8 * a2) = a1;
  uint64_t v17 = *(void *)(v16 + 16);
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (v18) {
    __break(1u);
  }
  else {
    *(void *)(v16 + 16) = v19;
  }
}

uint64_t sub_22F1C5BFC(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_18;
  }
  if (a3)
  {
    sub_22F1C3908();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_22F1C29E0(&qword_268695490);
      goto LABEL_18;
    }
    sub_22F1C2E3C();
  }
  uint64_t v8 = *v3;
  sub_22F2247E8();
  sub_22F2247F8();
  uint64_t result = sub_22F224818();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = ~v9;
    swift_beginAccess();
    do
    {
      uint64_t v12 = *(void *)(*(void *)(v8 + 48) + 8 * a2);
      swift_beginAccess();
      if (swift_weakLoadStrong())
      {
        if (swift_weakLoadStrong())
        {
          swift_retain();
          char v11 = sub_22F223818();
          swift_release();
          swift_release();
          uint64_t result = swift_release();
          if (v11) {
            goto LABEL_17;
          }
          goto LABEL_11;
        }
        swift_retain();
        swift_release();
      }
      else
      {
        swift_retain();
      }
      uint64_t v13 = *(void *)(v12 + 24);
      uint64_t v14 = *(void *)(v5 + 24);
      uint64_t result = swift_release();
      if (v13 == v14)
      {
LABEL_17:
        __swift_instantiateConcreteTypeFromMangledName(&qword_268695498);
        uint64_t result = sub_22F2247A8();
        __break(1u);
        break;
      }
LABEL_11:
      a2 = (a2 + 1) & v10;
    }
    while (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_18:
  uint64_t v15 = *v19;
  *(void *)(*v19 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v15 + 48) + 8 * a2) = v5;
  uint64_t v16 = *(void *)(v15 + 16);
  BOOL v17 = __OFADD__(v16, 1);
  uint64_t v18 = v16 + 1;
  if (v17) {
    __break(1u);
  }
  else {
    *(void *)(v15 + 16) = v18;
  }
  return result;
}

uint64_t sub_22F1C5E2C(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = result;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_22F1C3E54();
  }
  else
  {
    if (v8 > v7)
    {
      uint64_t result = (uint64_t)sub_22F1C29E0(&qword_268694C48);
      goto LABEL_14;
    }
    sub_22F1C333C();
  }
  uint64_t v9 = *v3;
  sub_22F2247E8();
  sub_22F223848();
  sub_22F1C6718();
  sub_22F2239F8();
  uint64_t result = sub_22F224818();
  uint64_t v10 = -1 << *(unsigned char *)(v9 + 32);
  a2 = result & ~v10;
  if ((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    type metadata accessor for WorldAnchor();
    swift_retain();
    char v11 = sub_22F223818();
    uint64_t result = swift_release();
    if (v11)
    {
LABEL_13:
      uint64_t result = sub_22F2247A8();
      __break(1u);
    }
    else
    {
      uint64_t v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        swift_retain();
        char v13 = sub_22F223818();
        uint64_t result = swift_release();
        if (v13) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v14 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v14 + 48) + 8 * a2) = v6;
  uint64_t v15 = *(void *)(v14 + 16);
  BOOL v16 = __OFADD__(v15, 1);
  uint64_t v17 = v15 + 1;
  if (v16) {
    __break(1u);
  }
  else {
    *(void *)(v14 + 16) = v17;
  }
  return result;
}

uint64_t sub_22F1C6018(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = result;
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_22F2245C8();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = sub_22F2245C8();
      uint64_t result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          sub_22F196514(&qword_268695478, &qword_268695470);
          swift_bridgeObjectRetain();
          for (unint64_t i = 0; i != v7; ++i)
          {
            __swift_instantiateConcreteTypeFromMangledName(&qword_268695470);
            uint64_t v10 = sub_22F1C61D4(v13, i, a3);
            uint64_t v12 = *v11;
            swift_retain();
            ((void (*)(uint64_t (**)(), void))v10)(v13, 0);
            *(void *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        type metadata accessor for PatchTracker.Patch();
        swift_arrayInitWithCopy();
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

void (*sub_22F1C61D4(uint64_t (**a1)(), unint64_t a2, uint64_t a3))(void *a1)
{
  unint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_22F1C6284(v6, a2, a3);
  return sub_22F1C623C;
}

void sub_22F1C623C(void *a1)
{
  unint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t (*sub_22F1C6284(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = MEMORY[0x230FB2E90](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v4 = swift_retain();
LABEL_5:
    *uint64_t v3 = v4;
    return sub_22F1C6304;
  }
  __break(1u);
  return result;
}

uint64_t sub_22F1C6304()
{
  return swift_release();
}

uint64_t sub_22F1C630C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 120);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  int v2 = v1 - 1;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_22F1C6330(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_268695420);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_22F1C6398(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7, double a8, double a9, double a10, float a11)
{
  uint64_t v12 = v11;
  *(void *)(v11 + 136) = 0;
  *(_DWORD *)(v11 + 144) = 0;
  *(unsigned char *)(v11 + 148) = 1;
  uint64_t v13 = qword_268695418;
  *(void *)(v11 + 16) = qword_268695418;
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14)
  {
    __break(1u);
  }
  else
  {
    qword_268695418 = v15;
    *(double *)(v12 + 24) = a5;
    *(double *)(v12 + 32) = a6;
    *(double *)(v12 + 40) = a7;
    *(double *)(v12 + 48) = a8;
    *(double *)(v12 + 56) = a9;
    *(double *)(v12 + 64) = a10;
    *(void *)(v12 + 128) = result;
    *(float *)(v12 + 120) = a11;
    *(void *)(v12 + 112) = a4;
    swift_retain();
    PatchTracker.Keyframe.getRay(screenPoint:sceneView:)(a9, a10, a2, a3);
    *(_OWORD *)(v12 + 80) = v20;
    *(_OWORD *)(v12 + 96) = v21;
    return v12;
  }
  return result;
}

unint64_t sub_22F1C6448()
{
  unint64_t result = qword_268695450;
  if (!qword_268695450)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268695450);
  }
  return result;
}

unint64_t sub_22F1C64A0()
{
  unint64_t result = qword_268695458;
  if (!qword_268695458)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268695458);
  }
  return result;
}

unint64_t sub_22F1C64F8()
{
  unint64_t result = qword_268695460;
  if (!qword_268695460)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268695460);
  }
  return result;
}

unint64_t sub_22F1C6550()
{
  unint64_t result = qword_268695468;
  if (!qword_268695468)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268695468);
  }
  return result;
}

void sub_22F1C65A4(uint64_t a1@<X8>)
{
  *(double *)a1 = PatchTracker.viewportSize.getter();
  *(void *)(a1 + 8) = v2;
}

__n128 sub_22F1C65D0(__n128 *a1, __n128 **a2)
{
  uint64_t v2 = *a2;
  __n128 result = *a1;
  CVPixelBufferRef v2[2] = *a1;
  v2[3].n128_u8[0] = 0;
  return result;
}

uint64_t type metadata accessor for PatchTracker()
{
  return self;
}

uint64_t type metadata accessor for PatchTracker.Keyframe()
{
  return self;
}

uint64_t type metadata accessor for PatchTracker.Patch()
{
  return self;
}

ValueMetadata *type metadata accessor for PatchTracker.DebugOptions()
{
  return &type metadata for PatchTracker.DebugOptions;
}

uint64_t sub_22F1C6660(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))
{
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(_DWORD *)(a1 + 160));
  return a1;
}

uint64_t sub_22F1C66D4(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_22F1C66E0(uint64_t a1)
{
  return a1;
}

unint64_t sub_22F1C6718()
{
  unint64_t result = qword_268694C50;
  if (!qword_268694C50)
  {
    sub_22F223848();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268694C50);
  }
  return result;
}

unint64_t sub_22F1C6770()
{
  unint64_t result = qword_2686954A0;
  if (!qword_2686954A0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2686954A0);
  }
  return result;
}

double sub_22F1C67B0(uint64_t a1)
{
  *(void *)(a1 + 176) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t *sub_22F1C67D4(uint64_t *a1)
{
  return a1;
}

uint64_t sub_22F1C6840()
{
  swift_unownedRelease();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

size_t sub_22F1C6878@<X0>(size_t *a1@<X8>)
{
  return sub_22F1BAEB0(a1);
}

CGImageRef static CGImageRef.fromByteArrayGray(_:width:height:)(uint64_t a1, size_t a2, size_t a3)
{
  DeviceGraCGFloat y = CGColorSpaceCreateDeviceGray();
  uint64_t v7 = CGBitmapContextCreate((void *)(a1 + 32), a2, a3, 8uLL, a2, DeviceGray, 0);
  if (v7)
  {
    uint64_t v8 = v7;
    CGImageRef Image = CGBitmapContextCreateImage(v7);
  }
  else
  {
    CGImageRef Image = 0;
  }

  return Image;
}

CGImageRef static CGImageRef.fromByteArrayRGBA(_:width:height:)(CGImageRef result, size_t a2, size_t a3)
{
  if ((a2 - 0x2000000000000000) >> 62 == 3)
  {
    CGImageRef v5 = result;
    size_t v6 = 4 * a2;
    DeviceRGB = CGColorSpaceCreateDeviceRGB();
    uint64_t v8 = CGBitmapContextCreate((char *)v5 + 32, a2, a3, 8uLL, v6, DeviceRGB, 1u);
    if (v8)
    {
      uint64_t v9 = v8;
      CGImageRef Image = CGBitmapContextCreateImage(v8);
    }
    else
    {
      CGImageRef Image = 0;
    }

    return Image;
  }
  else
  {
    __break(1u);
  }
  return result;
}

int64_t CGImageRef.toByteArrayRGBA()()
{
  int64_t Width = CGImageGetWidth(v0);
  int64_t result = CGImageGetHeight(v0);
  int64_t v3 = Width * result;
  if ((unsigned __int128)(Width * (__int128)result) >> 64 != (Width * result) >> 63)
  {
    __break(1u);
    goto LABEL_13;
  }
  if ((unint64_t)(v3 - 0x2000000000000000) >> 62 != 3)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  size_t v4 = 4 * v3;
  if (4 * v3 < 0)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  if (v4)
  {
    uint64_t v5 = sub_22F223D48();
    *(void *)(v5 + 16) = v4;
    bzero((void *)(v5 + 32), v4);
  }
  else
  {
    uint64_t v5 = MEMORY[0x263F8EE78];
  }
  size_t v6 = CGImageGetColorSpace(v0);
  if (v6)
  {
    uint64_t v7 = v6;
    size_t v8 = CGImageGetWidth(v0);
    size_t Height = CGImageGetHeight(v0);
    size_t BitsPerComponent = CGImageGetBitsPerComponent(v0);
    size_t BytesPerRow = CGImageGetBytesPerRow(v0);
    CGContextRef v12 = CGBitmapContextCreate((void *)(v5 + 32), v8, Height, BitsPerComponent, BytesPerRow, v7, 1u);
    if (v12)
    {
      uint64_t v13 = v12;
      CGImageGetWidth(v0);
      CGImageGetHeight(v0);
      sub_22F224098();

      uint64_t v7 = v13;
    }
  }
  return v5;
}

BOOL sub_22F1C6B04(BOOL result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  int v3 = result;
  if (*(unsigned char *)(a2 + 32) == result) {
    return 1;
  }
  if (v2 == 1) {
    return 0;
  }
  for (uint64_t i = 33; ; ++i)
  {
    uint64_t v5 = i - 31;
    if (__OFADD__(i - 32, 1)) {
      break;
    }
    int v6 = *(unsigned __int8 *)(a2 + i);
    int64_t result = v6 == v3;
    if (v6 == v3 || v5 == v2) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t PlaneSelector.ADTestMode.rawValue.getter(uint64_t result)
{
  return result;
}

int *PlaneSelector.firstPointMaxDistanceSquared.unsafeMutableAddressor()
{
  if (qword_268694450 != -1) {
    swift_once();
  }
  return &static PlaneSelector.firstPointMaxDistanceSquared;
}

uint64_t *PlaneSelector.DebuggerClass.unsafeMutableAddressor()
{
  return &static PlaneSelector.DebuggerClass;
}

uint64_t static PlaneSelector.DebuggerClass.getter()
{
  return static PlaneSelector.DebuggerClass;
}

uint64_t static PlaneSelector.DebuggerClass.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_beginAccess();
  static PlaneSelector.DebuggerClass = a1;
  qword_26869BCB8 = a2;
  return result;
}

uint64_t (*static PlaneSelector.DebuggerClass.modify())()
{
  return j_j__swift_endAccess;
}

void sub_22F1C6CB4()
{
  if (objc_msgSend(self, sel_jasperAvailable))
  {
    id v0 = objc_msgSend(self, sel_standardUserDefaults);
    unint64_t v1 = (void *)sub_22F223A98();
    objc_msgSend(v0, sel_floatForKey_, v1);
    float v3 = v2;

    float v4 = v3 * v3;
  }
  else
  {
    if (qword_268694498 != -1) {
      swift_once();
    }
    float v4 = 1.0;
    if (static MeasureCore.isTrackingVGAEnabled) {
      float v4 = 4.0;
    }
  }
  static PlaneSelector.firstPointMaxDistanceSquareCGFloat d = LODWORD(v4);
}

float static PlaneSelector.firstPointMaxDistanceSquared.getter()
{
  if (qword_268694450 != -1) {
    swift_once();
  }
  return *(float *)&static PlaneSelector.firstPointMaxDistanceSquared;
}

uint64_t PlaneSelector.PatchTrackingMode.debugDescription.getter(uint64_t a1)
{
  return sub_22F1C6E24(a1, 21584);
}

uint64_t sub_22F1C6E0C(uint64_t a1, uint64_t a2)
{
  return sub_22F1C6EA0(a1, a2, 21584);
}

uint64_t PlaneSelector.patchTrackingMode.getter()
{
  return *(unsigned __int8 *)(v0 + 84);
}

uint64_t PlaneSelector.ADTestMode.debugDescription.getter(uint64_t a1)
{
  return sub_22F1C6E24(a1, 17473);
}

uint64_t sub_22F1C6E24(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_22F1C6E98(uint64_t a1, uint64_t a2)
{
  return sub_22F1C6EA0(a1, a2, 17473);
}

uint64_t sub_22F1C6EA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t PlaneSelector.adTestMode.getter()
{
  return *(unsigned __int8 *)(v0 + 85);
}

char *sub_22F1C6F18()
{
  if (*(void *)(v0 + 160))
  {
    unint64_t v1 = *(char **)(v0 + 160);
  }
  else
  {
    unint64_t v1 = sub_22F1CEA90();
    *(void *)(v0 + 160) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PlaneSelector.debugOptions.getter()
{
  if (*(unsigned char *)(v0 + 176) != 1) {
    return *(void *)(v0 + 168);
  }
  if (qword_268694468 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = static PlaneSelector.DebugOptions.default;
  *(void *)(v0 + 168) = static PlaneSelector.DebugOptions.default;
  *(unsigned char *)(v0 + 176) = 0;
  return result;
}

uint64_t *PlaneSelector.DebugOptions.default.unsafeMutableAddressor()
{
  if (qword_268694468 != -1) {
    swift_once();
  }
  return &static PlaneSelector.DebugOptions.default;
}

uint64_t PlaneSelector.debugOptions.setter(uint64_t result)
{
  *(void *)(v1 + 168) = result;
  *(unsigned char *)(v1 + 176) = 0;
  return result;
}

void *(*PlaneSelector.debugOptions.modify(uint64_t *a1))(void *result)
{
  a1[1] = v1;
  *a1 = PlaneSelector.debugOptions.getter();
  return sub_22F1C70A4;
}

void *sub_22F1C70A4(void *result)
{
  uint64_t v1 = result[1];
  *(void *)(v1 + 168) = *result;
  *(unsigned char *)(v1 + 176) = 0;
  return result;
}

uint64_t property wrapper backing initializer of PlaneSelector.planeSelectionStats(_OWORD *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_2686954C0);
  uint64_t v2 = swift_allocObject();
  float v3 = (_DWORD *)swift_slowAlloc();
  *float v3 = 0;
  *(void *)(v2 + 80) = v3;
  long long v4 = a1[1];
  *(_OWORD *)(v2 + 16) = *a1;
  *(_OWORD *)(v2 + 32) = v4;
  long long v5 = a1[3];
  *(_OWORD *)(v2 + 48) = a1[2];
  *(_OWORD *)(v2 + 64) = v5;
  return v2;
}

__n128 PlaneSelector.planeSelectionStats.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 224);
  long long v4 = *(os_unfair_lock_s **)(v3 + 80);
  swift_retain();
  os_unfair_lock_lock(v4);
  swift_beginAccess();
  long long v9 = *(_OWORD *)(v3 + 32);
  long long v10 = *(_OWORD *)(v3 + 16);
  __n128 v8 = *(__n128 *)(v3 + 48);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(v3 + 72);
  os_unfair_lock_unlock(v4);
  swift_release();
  *(_OWORD *)a1 = v10;
  *(_OWORD *)(a1 + 16) = v9;
  __n128 result = v8;
  *(__n128 *)(a1 + 32) = v8;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  return result;
}

__n128 sub_22F1C71BC@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)a1 + 224);
  long long v4 = *(os_unfair_lock_s **)(v3 + 80);
  swift_retain();
  os_unfair_lock_lock(v4);
  swift_beginAccess();
  long long v9 = *(_OWORD *)(v3 + 32);
  long long v10 = *(_OWORD *)(v3 + 16);
  __n128 v8 = *(__n128 *)(v3 + 48);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(v3 + 72);
  os_unfair_lock_unlock(v4);
  swift_release();
  *(_OWORD *)a2 = v10;
  *(_OWORD *)(a2 + 16) = v9;
  __n128 result = v8;
  *(__n128 *)(a2 + 32) = v8;
  *(void *)(a2 + 48) = v5;
  *(void *)(a2 + 56) = v6;
  return result;
}

uint64_t sub_22F1C7264(long long *a1, uint64_t a2)
{
  long long v8 = a1[1];
  long long v9 = *a1;
  long long v7 = a1[2];
  uint64_t v2 = *((void *)a1 + 6);
  uint64_t v3 = *((void *)a1 + 7);
  uint64_t v4 = *(void *)(*(void *)a2 + 224);
  uint64_t v5 = *(os_unfair_lock_s **)(v4 + 80);
  swift_retain();
  os_unfair_lock_lock(v5);
  swift_beginAccess();
  *(_OWORD *)(v4 + 16) = v9;
  *(_OWORD *)(v4 + 32) = v8;
  *(_OWORD *)(v4 + 48) = v7;
  *(void *)(v4 + 64) = v2;
  *(void *)(v4 + 72) = v3;
  os_unfair_lock_unlock(v5);
  return swift_release();
}

void __swiftcall PlaneSelector.PlaneSelectionStats.init()(MeasureFoundation::PlaneSelector::PlaneSelectionStats *__return_ptr retstr)
{
  *(_OWORD *)&retstr->inferredCount = 0u;
  *(_OWORD *)&retstr->prevCount = 0u;
  *(_OWORD *)&retstr->adCount = 0u;
  *(_OWORD *)&retstr->localint64_t PlaneCount = 0u;
}

void sub_22F1C7310(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v7 = v6;
  long long v44 = a1;
  uint64_t v45 = a6;
  uint64_t v43 = a5;
  *(_OWORD *)(v7 + 16) = xmmword_22F228C30;
  *(_DWORD *)(v7 + 32) = 1063105069;
  *(_OWORD *)(v7 + 40) = xmmword_22F228C40;
  *(void *)(v7 + 56) = 1;
  *(_OWORD *)(v7 + 64) = xmmword_22F228C50;
  *(_DWORD *)(v7 + 80) = 1106247680;
  uint64_t v11 = self;
  id v12 = objc_msgSend(v11, sel_standardUserDefaults);
  uint64_t v13 = (void *)sub_22F223A98();
  id v14 = objc_msgSend(v12, sel_integerForKey_, v13);

  if ((unint64_t)v14 > 4)
  {
    __break(1u);
    goto LABEL_13;
  }
  *(unsigned char *)(v7 + 84) = (_BYTE)v14;
  id v15 = objc_msgSend(v11, sel_standardUserDefaults);
  BOOL v16 = (void *)sub_22F223A98();
  id v17 = objc_msgSend(v15, sel_integerForKey_, v16);

  if ((unint64_t)v17 > 3)
  {
LABEL_13:
    __break(1u);
    return;
  }
  *(_OWORD *)(v7 + 184) = 0u;
  *(unsigned char *)(v7 + 85) = (_BYTE)v17;
  *(_DWORD *)(v7 + 136) = 953267991;
  *(unsigned char *)(v7 + 140) = 33;
  *(void *)(v7 + 144) = 0x3F490FDB41A00000;
  *(_DWORD *)(v7 + 152) = 975427339;
  *(void *)(v7 + 160) = 0;
  *(void *)(v7 + 168) = 0;
  *(unsigned char *)(v7 + 176) = 1;
  *(_OWORD *)(v7 + 200) = 0u;
  *(void *)(v7 + 216) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2686954C0);
  uint64_t v18 = swift_allocObject();
  uint64_t v19 = (_DWORD *)swift_slowAlloc();
  *uint64_t v19 = 0;
  *(void *)(v18 + 80) = v19;
  *(_OWORD *)(v18 + 16) = 0u;
  *(_OWORD *)(v18 + 32) = 0u;
  *(_OWORD *)(v18 + 48) = 0u;
  *(_OWORD *)(v18 + 64) = 0u;
  *(void *)(v7 + 224) = v18;
  long long v20 = v43;
  long long v21 = v44;
  *(void *)(v7 + 88) = v44;
  *(void *)(v7 + 96) = a2;
  uint64_t v22 = a2;
  *(void *)(v7 + 104) = a3;
  *(void *)(v7 + 112) = a4;
  uint64_t v23 = v45;
  *(void *)(v7 + 120) = v20;
  *(void *)(v7 + 128) = v23;
  swift_beginAccess();
  uint64_t v24 = static PlaneSelector.DebuggerClass;
  uint64_t v42 = a4;
  if (static PlaneSelector.DebuggerClass)
  {
    uint64_t v40 = v22;
    uint64_t v25 = qword_26869BCB8;
    CGFloat v41 = *(void (**)(id, uint64_t, uint64_t, uint64_t, uint64_t))(qword_26869BCB8 + 8);
    uint64_t v43 = &v38;
    uint64_t v39 = sub_22F2241F8();
    uint64_t v26 = *(void *)(v39 - 8);
    MEMORY[0x270FA5388](v39);
    uint64_t v28 = (char *)&v38 - v27;
    id v30 = v29;
    swift_retain();
    swift_retain();
    swift_retain();
    v41(v30, v40, v7, v24, v25);
    uint64_t v31 = *(void *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v28, 1, v24) == 1)
    {
      (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v39);
      uint64_t v49 = 0;
      long long v47 = 0u;
      long long v48 = 0u;
    }
    else
    {
      *((void *)&v48 + 1) = v24;
      uint64_t v49 = v25;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v47);
      (*(void (**)(uint64_t *, char *, uint64_t))(v31 + 32))(boxed_opaque_existential_1, v28, v24);
    }
    long long v21 = v44;
  }
  else
  {
    uint64_t v49 = 0;
    long long v47 = 0u;
    long long v48 = 0u;
    id v32 = v21;
    swift_retain();
    swift_retain();
  }
  swift_beginAccess();
  sub_22F1CEE28((uint64_t)&v47, v7 + 184);
  swift_endAccess();
  if (qword_268694518 != -1) {
    swift_once();
  }
  uint64_t v34 = qword_26869BE30;
  uint64_t v35 = *(void *)algn_26869BE38;
  *(void *)&long long v47 = 0;
  *((void *)&v47 + 1) = 0xE000000000000000;
  sub_22F2243F8();
  sub_22F223B48();
  char v46 = *(unsigned char *)(v7 + 84);
  sub_22F224508();
  long long v36 = v47;
  uint64_t v37 = sub_22F2240A8();
  _s17MeasureFoundation3LogV3log_4type9isPrivateySS_So03os_d1_E2_taSbtF_0(v36, *((uint64_t *)&v36 + 1), v37, 0, v34, v35);
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
}

void sub_22F1C7830(void *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  double v7 = *(float *)&a3;
  double v8 = *((float *)&a3 + 1);
  uint64_t v9 = *(void *)(v3 + 96);
  id v10 = objc_msgSend(a1, sel_camera);
  uint64_t ObjectType = swift_getObjectType();
  id v12 = (id)(v9 + 24);
  CGRect v85 = *(double (**)(uint64_t, uint64_t, double, double))(v9 + 24);
  CGFloat v13 = v85(ObjectType, v9, v7, v8);
  CGFloat v15 = v14;
  long long v84 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v84(ObjectType, v9);
  unsigned int v17 = v16;
  objc_msgSend(v10, sel_imageResolution);
  ARViewToCameraImageTransform();
  v140.CGFloat x = v13;
  v140.CGFloat y = v15;
  CGPoint v18 = CGPointApplyAffineTransform(v140, &v132);
  int x_low = LODWORD(v18.x);

  sub_22F1C8188(a1, (uint64_t)v99, v7, v8);
  id v20 = objc_msgSend(a1, sel_hitTest_types_, 32, v18.x, v18.y);
  sub_22F1A321C(0, &qword_268695500);
  unint64_t v21 = sub_22F223CB8();

  if (v21 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v22 = sub_22F2245C8();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v22 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v87 = ObjectType;
  if (v22)
  {
    if ((v21 & 0xC000000000000001) != 0)
    {
      id v23 = (id)MEMORY[0x230FB2E90](0, v21);
    }
    else
    {
      if (!*(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_33;
      }
      id v23 = *(id *)(v21 + 32);
    }
    uint64_t v24 = v23;
    swift_bridgeObjectRelease();
    id v25 = objc_msgSend(v24, sel_anchor);
    if (!v25) {
      goto LABEL_39;
    }
    uint64_t v26 = v25;
    type metadata accessor for WorldPlane();
    swift_allocObject();
    uint64_t v27 = sub_22F210A98(v26, 0, 0.0, 1.0);

    objc_msgSend(v24, sel_worldTransform);
    *(_OWORD *)&v132.CGFloat a = xmmword_22F228C60;
    *(_OWORD *)&v132.CGFloat c = v28;
    *(_OWORD *)&v132.CGFloat tx = v29;
    long long v133 = v30;
    long long v134 = v31;
    uint64_t v136 = 0;
    uint64_t v135 = 0;
    char v137 = 1;
    uint64_t v138 = v27;
    int v139 = 0;
    swift_retain_n();
    sub_22F2105E8();
    uint64_t v91 = v27;
    swift_release_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v91 = 0;
  }
  v32.n128_f64[0] = v7;
  v33.n128_f64[0] = v8;
  sub_22F1C8AF4((Class)a1, v100, v32, v33);
  unint64_t v34 = (unint64_t)v100[0];
  unint64_t v35 = (unint64_t)v100[1];
  long long v93 = v102;
  long long v94 = v101;
  long long v92 = v103;
  float32x4_t v95 = v104;
  uint64_t v37 = v105;
  uint64_t v36 = v106;
  uint64_t v39 = v107;
  uint64_t v38 = v108;
  int x_low = v109;
  sub_22F1899D0((uint64_t)v100, (uint64_t)v110, &qword_268695508);
  if (!v120)
  {
    swift_release();
    sub_22F1CEA38((uint64_t)v99);
    uint64_t v68 = v37;
LABEL_37:
    *(void *)a2 = v34;
    *(void *)(a2 + 8) = v35;
    *(_OWORD *)(a2 + 16) = v94;
    *(_OWORD *)(a2 + 32) = v93;
    *(_OWORD *)(a2 + 48) = v92;
    *(float32x4_t *)(a2 + 64) = v95;
    *(void *)(a2 + 80) = v68;
    *(void *)(a2 + 88) = v36;
    *(void *)(a2 + 96) = v39;
    *(void *)(a2 + 104) = v38;
    *(_DWORD *)(a2 + 112) = x_low;
    return;
  }
  uint64_t v89 = v120;
  unsigned int v17 = v110[0];
  unsigned int v5 = v110[1];
  unsigned int v40 = v111;
  unsigned int v4 = v112;
  long long v93 = v114;
  long long v94 = v113;
  long long v92 = v115;
  float32x4_t v95 = v116;
  uint64_t v81 = v118;
  uint64_t v82 = v117;
  uint64_t v83 = v119;
  int x_low = v121;
  if (!v91)
  {
    sub_22F1CEA38((uint64_t)v99);
    unint64_t v34 = v17 | ((unint64_t)v5 << 32);
    unint64_t v35 = v40 | ((unint64_t)v4 << 32);
    uint64_t v39 = v83;
LABEL_36:
    uint64_t v38 = v89;
    uint64_t v36 = v81;
    uint64_t v68 = v82;
    goto LABEL_37;
  }
  unsigned int v80 = v111;
  swift_retain();
  id v41 = objc_msgSend(a1, sel_camera);
  CGFloat v42 = v85(v87, v9, v7, v8);
  CGFloat v44 = v43;
  v84(v87, v9);
  objc_msgSend(v41, sel_imageResolution);
  ARViewToCameraImageTransform();
  v141.CGFloat x = v42;
  v141.CGFloat y = v44;
  CGPointApplyAffineTransform(v141, &v122);

  id v45 = objc_msgSend(a1, sel_camera);
  memset(v130, 0, sizeof(v130));
  char v131 = 1;
  *(void *)&double v97 = _sSo7ARFrameC17MeasureFoundationE9getHitRay11cameraPoint0G00G18CorrectedTransforms5SIMD3VySfG6origin_AJ9directionts5SIMD2VySfG_So8ARCameraCSo13simd_float4x4aSgtFZ_0(v45, (uint64_t)v130).n128_u64[0];
  double v86 = v46;

  id v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F20F18]), sel_initWithOrigin_direction_allowingTarget_alignment_, 0, 2, v97, v86);
  long long v47 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(v87, v9);
  id v48 = objc_msgSend(v47, sel_raycast_, v12);

  sub_22F1A321C(0, &qword_268695510);
  unint64_t v21 = sub_22F223CB8();

  if (v21 >> 62)
  {
LABEL_33:
    swift_bridgeObjectRetain();
    uint64_t v49 = sub_22F2245C8();
    swift_bridgeObjectRelease();
    uint64_t v50 = v89;
    if (v49) {
      goto LABEL_14;
    }
LABEL_34:
    swift_bridgeObjectRelease();
    CGPoint v53 = 0;
    uint64_t v39 = v83;
LABEL_35:
    sub_22F1CEA38((uint64_t)v100);

    swift_release();
    sub_22F1CEA38((uint64_t)v99);

    unint64_t v34 = v17 | ((unint64_t)v5 << 32);
    unint64_t v35 = v80 | ((unint64_t)v4 << 32);
    goto LABEL_36;
  }
  uint64_t v49 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v50 = v89;
  if (!v49) {
    goto LABEL_34;
  }
LABEL_14:
  long long v88 = v12;
  if (v49 >= 1)
  {
    float v51 = (uint64_t *)(v50 + 16);
    swift_beginAccess();
    uint64_t v52 = 0;
    CGPoint v53 = 0;
    float v54 = INFINITY;
    float v55 = INFINITY;
    do
    {
      if ((v21 & 0xC000000000000001) != 0) {
        id v57 = (id)MEMORY[0x230FB2E90](v52, v21);
      }
      else {
        id v57 = *(id *)(v21 + 8 * v52 + 32);
      }
      double v58 = v57;
      objc_msgSend(v57, sel_worldTransform);
      float32x4_t v98 = v59;
      float32x4_t v61 = vsubq_f32(v95, v60);
      float32x4_t v62 = vmulq_f32(v61, v61);
      float v63 = v62.f32[2] + vaddv_f32(*(float32x2_t *)v62.f32);
      uint64_t v64 = *v51;
      float32x4_t v65 = *(os_unfair_lock_s **)(*v51 + 24);
      sub_22F1CEA64((uint64_t)v100);
      swift_retain();
      os_unfair_lock_lock(v65);
      swift_beginAccess();
      id v66 = *(id *)(v64 + 16);
      os_unfair_lock_unlock(v65);
      swift_release();
      sub_22F1CEA38((uint64_t)v100);
      objc_msgSend(v66, sel_transform);
      float32x4_t v96 = v67;

      if (v63 < v55)
      {
        float32x4_t v56 = vmulq_f32(v98, v96);
        float v54 = fabsf(v56.f32[2] + vaddv_f32(*(float32x2_t *)v56.f32));

        float v55 = v63;
        CGPoint v53 = v58;
      }
      else
      {
      }
      ++v52;
    }
    while (v49 != v52);
    swift_bridgeObjectRelease();
    if (v53)
    {
      objc_msgSend(v53, sel_worldTransform);
      uint64_t v39 = v83;
      id v12 = v88;
      if (v54 > 0.76604 && v55 < 72.25)
      {
        v69.i32[3] = 0;
        _sSo13simd_float4x4a17MeasureFoundationE4make8position17normalizedForwardABs5SIMD3VySfG_AItFZ_0(v70, v69);
        sceneKitToARKit(_:)(v72, v71);
        long long v93 = v74;
        long long v94 = v73;
        long long v92 = v75;
        float32x4_t v95 = v76;
        id v77 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F20E38]), sel_initWithTransform_, *(double *)&v73, *(double *)&v74, *(double *)&v75, *(double *)v76.i64);
        type metadata accessor for WorldPlane();
        swift_allocObject();
        uint64_t v78 = sub_22F210A98(v77, 3, 0.0, 1.0);

        *(_OWORD *)&v122.CGFloat a = xmmword_22F228C60;
        *(_OWORD *)&v122.CGFloat c = v94;
        *(_OWORD *)&v122.CGFloat tx = v93;
        long long v123 = v92;
        float32x4_t v124 = v95;
        uint64_t v126 = 0;
        uint64_t v125 = 0;
        uint64_t v39 = 1;
        char v127 = 1;
        uint64_t v128 = v78;
        int v129 = 0;
        swift_retain();
        sub_22F2105E8();
        int x_low = v79;
        swift_release();
        sub_22F1CEA38((uint64_t)v100);

        swift_release();
        sub_22F1CEA38((uint64_t)v99);
        sub_22F1CEA38((uint64_t)v100);

        uint64_t v38 = v78;
        uint64_t v68 = 0;
        uint64_t v36 = 0;
        unint64_t v35 = 0x3E4CCCCD3D75C28FLL;
        unint64_t v34 = 0x3F4000003F000000;
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v39 = v83;
      id v12 = v88;
    }
    goto LABEL_35;
  }
  __break(1u);
LABEL_39:
  __break(1u);
}

uint64_t sub_22F1C8188@<X0>(void *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v9 = *((void *)sub_22F1C6F18() + 2);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v93 = v9;
  if (!v9)
  {
    CGFloat a = 0.0;
    CGFloat b = 0.0;
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    uint64_t v48 = 0;
    long long v66 = 0uLL;
    float v16 = 0.0;
    long long v67 = 0uLL;
    long long v68 = 0uLL;
    goto LABEL_40;
  }
  uint64_t v69 = a2;
  uint64_t v11 = *(void *)(v4 + 96);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v13 = 0;
  *(double *)&uint64_t v81 = 0.0;
  *(double *)&uint64_t v82 = 0.0;
  uint64_t v80 = 0;
  *(double *)&uint64_t v76 = 0.0;
  *(double *)&uint64_t v77 = 0.0;
  char v75 = 0;
  unint64_t v14 = 0;
  uint64_t v89 = 0;
  uint64_t v90 = *(double (**)(uint64_t, uint64_t, double, double))(v11 + 24);
  uint64_t v91 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  uint64_t v92 = ObjectType;
  uint64_t v88 = 0;
  float v15 = INFINITY;
  float v16 = 0.0;
  float v74 = 0.0;
  long long v84 = 0u;
  long long v86 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  long long v71 = 0u;
  float32x4_t v78 = 0u;
  long long v79 = 0u;
  float32x4_t v83 = 0u;
  do
  {
    unsigned int v17 = sub_22F1C6F18();
    if (v14 >= *((void *)v17 + 2))
    {
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      JUMPOUT(0x22F1C8AD8);
    }
    double v18 = *(double *)&v17[v13 + 32];
    double v19 = *(double *)&v17[v13 + 40];
    swift_bridgeObjectRelease();
    id v20 = objc_msgSend(a1, sel_camera);
    CGFloat v21 = v90(v92, v11, v18 + a3, v19 + a4);
    CGFloat v23 = v22;
    v91(v92, v11);
    objc_msgSend(v20, sel_imageResolution);
    ARViewToCameraImageTransform();
    v124.CGFloat x = v21;
    v124.CGFloat y = v23;
    CGPoint v24 = CGPointApplyAffineTransform(v124, &v101);

    id v25 = objc_msgSend(a1, sel_hitTest_types_, 32, v24.x, v24.y);
    sub_22F1A321C(0, &qword_268695500);
    unint64_t v26 = sub_22F223CB8();

    if (v26 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v47 = sub_22F2245C8();
      swift_bridgeObjectRelease();
      if (!v47)
      {
LABEL_3:
        swift_bridgeObjectRelease();
        goto LABEL_4;
      }
    }
    else if (!*(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_3;
    }
    if ((v26 & 0xC000000000000001) != 0)
    {
      id v27 = (id)MEMORY[0x230FB2E90](0, v26);
    }
    else
    {
      if (!*(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_42;
      }
      id v27 = *(id *)(v26 + 32);
    }
    long long v28 = v27;
    swift_bridgeObjectRelease();
    id v29 = objc_msgSend(v28, sel_anchor);
    if (!v29) {
      goto LABEL_43;
    }
    long long v30 = v29;
    type metadata accessor for WorldPlane();
    uint64_t v31 = swift_allocObject();
    *(_OWORD *)(v31 + 24) = xmmword_22F228C70;
    *(void *)(v31 + 40) = 0x3F5DB22D40000000;
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledName(&qword_268695518);
    uint64_t v32 = swift_allocObject();
    id v33 = v30;
    unint64_t v34 = (_DWORD *)swift_slowAlloc();
    *unint64_t v34 = 0;
    *(void *)(v32 + 16) = v33;
    *(void *)(v32 + 24) = v34;
    *(void *)(v31 + 16) = v32;
    swift_endAccess();
    *(unsigned char *)(v31 + 48) = 0;
    *(void *)(v31 + 52) = 0x3F80000000000000;
    memset(v122, 0, sizeof(v122));
    char v123 = 1;
    if (qword_2686943C0 != -1) {
      swift_once();
    }
    WorldPlane.refresh(anchor:camera:uncertaintyPoint:)(v33, (uint64_t)v122, (float32x4_t)static SIMD3<>.zero);

    objc_msgSend(v28, sel_worldTransform);
    long long v94 = v37;
    long long v95 = v36;
    float32x4_t v96 = v35;
    long long v98 = v38;
    switch(*(unsigned char *)(v31 + 48))
    {
      case 1:
        swift_retain_n();
        float v44 = WorldPlane.confidence.getter();
        swift_release_n();

        float v39 = v44 * 0.75;
        break;
      case 2:
      case 4:
        swift_retain_n();
        float v40 = WorldPlane.confidence.getter();
        swift_release_n();

        float v39 = v40 * 0.5;
        break;
      case 3:
      case 5:
      case 6:
        swift_retain_n();
        float v39 = WorldPlane.confidence.getter();
        swift_release_n();

        break;
      default:
        v35.i32[3] = 0;
        float32x4_t v70 = v35;
        swift_retain_n();
        unint64_t v41 = WorldPlane.distanceToEdge(point:)(v70);
        if ((v41 & 0x100000000) != 0)
        {
          swift_release_n();

          float v39 = 0.0;
        }
        else
        {
          if (COERCE_FLOAT(v41 & 0x7FFFFFFF) >= 0.06) {
            float v42 = 0.0;
          }
          else {
            float v42 = 1.0 - (float)(COERCE_FLOAT(v41 & 0x7FFFFFFF) / 0.06);
          }
          float v43 = WorldPlane.confidence.getter();
          swift_release_n();

          float v39 = fmaxf(v42, 0.2) * v43;
        }
        break;
    }
    long long v112 = xmmword_22F228C60;
    long long v113 = v95;
    long long v114 = v94;
    long long v115 = v98;
    float32x4_t v116 = v96;
    uint64_t v117 = 0;
    uint64_t v118 = 0;
    char v119 = 1;
    uint64_t v120 = v31;
    float v121 = v39;
    if (!v14)
    {
      swift_release();
      swift_retain();
      *(double *)&uint64_t v77 = 0.0000000134110482;
      *(double *)&uint64_t v76 = 0.000488281365;
      char v75 = 1;
      uint64_t v88 = v31;
      float v74 = v39;
      long long v72 = v94;
      long long v73 = v95;
      long long v71 = v98;
      float32x4_t v78 = v96;
    }
    float v45 = WorldPlaneHitTestResult.distanceSquaredToCamera(in:)((ARFrame)a1);
    if (v45 >= v15)
    {
      swift_release();
    }
    else
    {
      float v46 = v45;
      swift_release();
      *(double *)&uint64_t v81 = 0.0000000134110482;
      *(double *)&uint64_t v82 = 0.000488281365;
      uint64_t v80 = 1;
      uint64_t v89 = v31;
      float v16 = v39;
      float v15 = v46;
      long long v84 = v94;
      long long v86 = v95;
      long long v79 = v98;
      float32x4_t v83 = v96;
    }
LABEL_4:
    ++v14;
    v13 += 16;
  }
  while (v93 != v14);
  if (v89)
  {
    uint64_t v48 = v88;
    if (v88
      && (uint64_t v9 = v78.i64[0],
          float32x4_t v49 = vsubq_f32(v78, v83),
          float32x2_t v50 = vsub_f32(*(float32x2_t *)v78.f32, *(float32x2_t *)v83.f32),
          (float)(COERCE_FLOAT(vmulq_f32(v49, v49).i32[2]) + vaddv_f32(vmul_f32(v50, v50))) <= 0.000625))
    {
      uint64_t result = swift_release();
      uint64_t v63 = 0;
      CGFloat a = *(double *)&v76;
      uint64_t v64 = v75 & 1;
      long long v68 = v72;
      uint64_t v62 = *((void *)&v71 + 1);
      uint64_t v61 = v71;
      long long v66 = vdupq_laneq_s64((int64x2_t)v78, 1).u64[0];
      CGFloat b = *(double *)&v77;
      float v16 = v74;
      long long v67 = v73;
    }
    else
    {
      swift_retain();
      id v51 = objc_msgSend(a1, sel_camera);
      CGFloat v52 = v90(v92, v11, a3, a4);
      CGFloat v54 = v53;
      v91(v92, v11);
      objc_msgSend(v51, sel_imageResolution);
      ARViewToCameraImageTransform();
      v125.CGFloat x = v52;
      v125.CGFloat y = v54;
      CGPointApplyAffineTransform(v125, &v101);

      swift_retain();
      char v55 = WorldPlane.baseType.getter();
      id v56 = objc_msgSend(a1, sel_camera);
      memset(v110, 0, sizeof(v110));
      char v111 = 1;
      __n128 v57 = _sSo7ARFrameC17MeasureFoundationE9getHitRay11cameraPoint0G00G18CorrectedTransforms5SIMD3VySfG6origin_AJ9directionts5SIMD2VySfG_So8ARCameraCSo13simd_float4x4aSgtFZ_0(v56, (uint64_t)v110);
      float32x4_t v97 = v58;
      float32x4_t v99 = (float32x4_t)v57;

      WorldPlane.hitTest(hitRay:withPlaneType:)(v55, (uint64_t)&v101, v99, v97);
      CGFloat a = v101.a;
      CGFloat b = v101.b;
      long long v85 = *(_OWORD *)&v101.tx;
      long long v87 = *(_OWORD *)&v101.c;
      uint64_t v61 = v102;
      uint64_t v62 = v103;
      uint64_t v9 = v104;
      long long v100 = v105;
      uint64_t v63 = v106;
      uint64_t v64 = v107;
      uint64_t v65 = v108;
      float v16 = v109;
      swift_release_n();
      uint64_t result = swift_release();
      long long v66 = v100;
      long long v68 = v85;
      long long v67 = v87;
      uint64_t v48 = v65;
    }
    a2 = v69;
  }
  else
  {
    uint64_t result = swift_release();
    uint64_t v63 = 0;
    uint64_t v48 = 0;
    long long v66 = vdupq_laneq_s64((int64x2_t)v83, 1).u64[0];
    uint64_t v62 = *((void *)&v79 + 1);
    uint64_t v61 = v79;
    uint64_t v9 = v83.i64[0];
    a2 = v69;
    CGFloat b = *(double *)&v81;
    CGFloat a = *(double *)&v82;
    uint64_t v64 = v80;
    long long v68 = v84;
    long long v67 = v86;
  }
LABEL_40:
  *(CGFloat *)a2 = a;
  *(CGFloat *)(a2 + 8) = b;
  *(_OWORD *)(a2 + 16) = v67;
  *(_OWORD *)(a2 + 32) = v68;
  *(void *)(a2 + 48) = v61;
  *(void *)(a2 + 56) = v62;
  *(void *)(a2 + 64) = v9;
  *(_OWORD *)(a2 + 72) = v66;
  *(void *)(a2 + 88) = v63;
  *(void *)(a2 + 96) = v64;
  *(void *)(a2 + 104) = v48;
  *(float *)(a2 + 112) = v16;
  return result;
}

id sub_22F1C8AF4@<X0>(Class isa@<X0>, float32x2_t *a2@<X8>, __n128 a3@<Q0>, __n128 a4@<Q1>)
{
  id result = objc_msgSend(self, sel_jasperAvailable);
  float v8 = 0.0;
  if (!result) {
    goto LABEL_35;
  }
  uint64_t v79 = v4;
  uint64_t v9 = sub_22F1C6F18();
  int64_t v10 = *((void *)v9 + 2);
  if (v10)
  {
    *(void *)&long long v130 = MEMORY[0x263F8EE78];
    sub_22F18FD48(0, v10, 0);
    uint64_t v11 = 0;
    uint64_t v12 = v130;
    unint64_t v13 = *(void *)(v130 + 16);
    *(void *)&v14.f64[0] = a3.n128_u64[0];
    *(void *)&v14.f64[1] = a4.n128_u64[0];
    do
    {
      float64x2_t v15 = *(float64x2_t *)&v9[16 * v11 + 32];
      *(void *)&long long v130 = v12;
      unint64_t v16 = *(void *)(v12 + 24);
      if (v13 >= v16 >> 1)
      {
        float64x2_t v115 = v15;
        float64x2_t v120 = v14;
        sub_22F18FD48((char *)(v16 > 1), v13 + 1, 1);
        float64x2_t v15 = v115;
        float64x2_t v14 = v120;
        uint64_t v12 = v130;
      }
      ++v11;
      *(void *)(v12 + 16) = v13 + 1;
      *(float64x2_t *)(v12 + 16 * v13++ + 32) = vaddq_f64(v15, v14);
    }
    while (v10 != v11);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v12 = MEMORY[0x263F8EE78];
  }
  if (qword_2686944A0 != -1) {
    swift_once();
  }
  uint64_t v17 = static MeasureCore.shared;
  swift_beginAccess();
  if (!*(void *)(v17 + 112))
  {
    id result = (id)swift_bridgeObjectRelease();
LABEL_35:
    uint64_t v18 = 0;
    goto LABEL_36;
  }
  swift_retain();
  uint64_t v18 = sub_22F1B68DC(v12, isa);
  swift_bridgeObjectRelease();
  id result = (id)swift_release();
  if (!v18)
  {
LABEL_36:
    uint64_t v47 = 0;
    float32x2_t v19 = 0;
    goto LABEL_37;
  }
  float32x2_t v19 = *(float32x2_t *)(v18 + 16);
  if (v19)
  {
    uint64_t v20 = 0;
    uint64_t v99 = 0;
    uint64_t v100 = 0;
    float32x2_t v92 = 0;
    uint64_t v93 = 0;
    float32x2_t v97 = 0;
    float32x2_t v98 = 0;
    uint64_t v95 = 0;
    float32x2_t v96 = 0;
    uint64_t v94 = 0;
    uint64_t v101 = 0;
    float32x2_t v102 = 0;
    uint64_t v108 = 0;
    uint64_t v82 = 0;
    uint64_t v83 = 0;
    float32x2_t v88 = 0;
    float32x2_t v89 = 0;
    float32x2_t v86 = 0;
    float32x2_t v87 = 0;
    uint64_t v84 = 0;
    uint64_t v85 = 0;
    uint64_t v90 = 0;
    float32x2_t v91 = 0;
    char v81 = 0;
    uint64_t v105 = 0;
    float v21 = INFINITY;
    float v8 = 0.0;
    float v22 = 0.0;
    do
    {
      uint64_t v23 = v18 + v20;
      if ((*(unsigned char *)(v18 + v20 + 104) & 1) == 0)
      {
        v24.super.isCGFloat a = isa;
        double v25 = *(double *)(v23 + 80);
        long long v27 = *(_OWORD *)(v23 + 64);
        v26.i64[1] = DWORD2(v27);
        v26.i64[0] = v27;
        float v28 = (float)*(uint64_t *)(v23 + 96) * -0.5;
        *(double *)&long long v29 = _sSo13simd_float4x4a17MeasureFoundationE4make8position17normalizedForwardABs5SIMD3VySfG_AItFZ_0(v25, v26);
        long long v109 = v29;
        long long v112 = v30;
        float32x4_t v116 = vsubq_f32((float32x4_t)0, v31);
        float64x2_t v121 = (float64x2_t)v32;
        id v33 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F20E38]), sel_initWithTransform_, *(double *)&v29, *(double *)&v30, *(double *)v116.i64, *(double *)v32.i64);
        type metadata accessor for WorldPlane();
        uint64_t v34 = swift_allocObject();
        *(_OWORD *)(v34 + 24) = xmmword_22F228C70;
        *(void *)(v34 + 40) = 0x3F5DB22D40000000;
        swift_beginAccess();
        __swift_instantiateConcreteTypeFromMangledName(&qword_268695518);
        uint64_t v35 = swift_allocObject();
        id v36 = v33;
        long long v37 = (_DWORD *)swift_slowAlloc();
        *long long v37 = 0;
        *(void *)(v35 + 16) = v36;
        *(void *)(v35 + 24) = v37;
        *(void *)(v34 + 16) = v35;
        swift_endAccess();
        *(unsigned char *)(v34 + 48) = 6;
        *(float *)(v34 + 52) = v28 + 1.0;
        *(_DWORD *)(v34 + 56) = 1065353216;
        memset(v140, 0, 64);
        v140[64] = 1;
        if (qword_2686943C0 != -1) {
          swift_once();
        }
        WorldPlane.refresh(anchor:camera:uncertaintyPoint:)(v36, (uint64_t)v140, (float32x4_t)static SIMD3<>.zero);

        isCGFloat a = v24.super.isa;
        switch(*(unsigned char *)(v34 + 48))
        {
          case 1:
            swift_retain();
            float v44 = WorldPlane.confidence.getter();
            swift_release();
            float v38 = v44 * 0.75;
            break;
          case 2:
          case 4:
            swift_retain();
            float v39 = WorldPlane.confidence.getter();
            swift_release();
            float v38 = v39 * 0.5;
            break;
          case 3:
          case 5:
          case 6:
            swift_retain();
            float v38 = WorldPlane.confidence.getter();
            swift_release();
            break;
          default:
            float32x4_t v40 = (float32x4_t)v121;
            v40.i32[3] = 0;
            float32x4_t v80 = v40;
            swift_retain();
            unint64_t v41 = WorldPlane.distanceToEdge(point:)(v80);
            if ((v41 & 0x100000000) != 0)
            {
              swift_release();
              float v38 = 0.0;
            }
            else
            {
              if (COERCE_FLOAT(v41 & 0x7FFFFFFF) >= 0.06) {
                float v42 = 0.0;
              }
              else {
                float v42 = 1.0 - (float)(COERCE_FLOAT(v41 & 0x7FFFFFFF) / 0.06);
              }
              float v43 = WorldPlane.confidence.getter();
              swift_release();
              float v38 = fmaxf(v42, 0.2) * v43;
            }
            break;
        }
        long long v130 = xmmword_22F228C60;
        long long v131 = v109;
        long long v132 = v112;
        float32x4_t v133 = v116;
        float32x4_t v134 = (float32x4_t)v121;
        uint64_t v135 = 0;
        uint64_t v136 = 0;
        char v137 = 1;
        uint64_t v138 = v34;
        float v139 = v38;
        if (!v20)
        {
          swift_release();
          float32x2_t v89 = (float32x2_t)v109;
          float32x2_t v87 = (float32x2_t)v112;
          float32x2_t v88 = *(float32x2_t *)((char *)&v109 + 8);
          uint64_t v85 = v116.i64[0];
          float32x2_t v86 = *(float32x2_t *)((char *)&v112 + 8);
          uint64_t v84 = v116.i64[1];
          uint64_t v90 = *(void *)&v121.f64[1];
          float32x2_t v91 = *(float32x2_t *)&v121.f64[0];
          swift_retain();
          uint64_t v83 = 0x3E4CCCCD3D75C28FLL;
          uint64_t v82 = 0x3F4000003F000000;
          char v81 = 1;
          uint64_t v105 = v34;
          float v22 = v38;
        }
        float v45 = WorldPlaneHitTestResult.distanceSquaredToCamera(in:)(v24);
        if (v45 >= v21)
        {
          swift_release();
        }
        else
        {
          float v46 = v45;
          swift_release();
          float32x2_t v92 = (float32x2_t)v109;
          float32x2_t v97 = (float32x2_t)v112;
          float32x2_t v98 = *(float32x2_t *)((char *)&v109 + 8);
          uint64_t v95 = v116.i64[0];
          float32x2_t v96 = *(float32x2_t *)((char *)&v112 + 8);
          float32x2_t v102 = *(float32x2_t *)&v121.f64[0];
          uint64_t v99 = 0x3E4CCCCD3D75C28FLL;
          uint64_t v100 = 0x3F4000003F000000;
          uint64_t v101 = *(void *)&v121.f64[1];
          uint64_t v93 = 1;
          uint64_t v94 = v116.i64[1];
          uint64_t v108 = v34;
          float v8 = v38;
          float v21 = v46;
        }
      }
      v20 += 80;
      --*(void *)&v19;
    }
    while (v19);
    swift_bridgeObjectRelease();
    if (v108)
    {
      uint64_t v58 = v105;
      if (v105)
      {
        *(float32x2_t *)v59.f32 = v102;
        v59.i64[1] = v101;
        *(float32x2_t *)v60.f32 = v91;
        v60.i64[1] = v90;
        float32x4_t v61 = vsubq_f32(v60, v59);
        float32x2_t v62 = vsub_f32(v91, v102);
        if ((float)(COERCE_FLOAT(vmulq_f32(v61, v61).i32[2]) + vaddv_f32(vmul_f32(v62, v62))) <= 0.000625)
        {
          id result = (id)swift_release();
          float32x2_t v55 = 0;
          float32x2_t v56 = 0;
          uint64_t v18 = v82;
          uint64_t v57 = v81 & 1;
          uint64_t v47 = v83;
          uint64_t v52 = v84;
          float32x2_t v48 = v88;
          float32x2_t v19 = v89;
          float32x2_t v50 = v86;
          float32x2_t v49 = v87;
          uint64_t v51 = v85;
          uint64_t v54 = v90;
          float32x2_t v53 = v91;
          float v8 = v22;
          goto LABEL_38;
        }
      }
      uint64_t v63 = *(void *)(v79 + 96);
      swift_retain();
      id v64 = [(objc_class *)isa camera];
      uint64_t ObjectType = swift_getObjectType();
      CGFloat v66 = (*(double (**)(uint64_t, uint64_t, __n128, __n128))(v63 + 24))(ObjectType, v63, a3, a4);
      CGFloat v68 = v67;
      (*(void (**)(uint64_t, uint64_t))(v63 + 8))(ObjectType, v63);
      objc_msgSend(v64, sel_imageResolution);
      ARViewToCameraImageTransform();
      v143.CGFloat x = v66;
      v143.CGFloat y = v68;
      CGPointApplyAffineTransform(v143, &v126);

      swift_retain();
      char v69 = WorldPlane.baseType.getter();
      id v70 = [(objc_class *)isa camera];
      memset(v129, 0, 64);
      v129[64] = 1;
      __n128 v71 = _sSo7ARFrameC17MeasureFoundationE9getHitRay11cameraPoint0G00G18CorrectedTransforms5SIMD3VySfG6origin_AJ9directionts5SIMD2VySfG_So8ARCameraCSo13simd_float4x4aSgtFZ_0(v70, (uint64_t)v129);
      float32x4_t v117 = v72;
      float32x4_t v122 = (float32x4_t)v71;

      WorldPlane.hitTest(hitRay:withPlaneType:)(v69, (uint64_t)v124, v122, v117);
      float32x2_t v19 = (float32x2_t)v124[2];
      uint64_t v99 = v124[1];
      uint64_t v100 = v124[0];
      float32x2_t v97 = (float32x2_t)v124[4];
      float32x2_t v98 = (float32x2_t)v124[3];
      uint64_t v95 = v124[6];
      float32x2_t v96 = (float32x2_t)v124[5];
      float32x2_t v55 = (float32x2_t)v124[10];
      uint64_t v101 = v124[9];
      float32x2_t v102 = (float32x2_t)v124[8];
      float32x2_t v56 = (float32x2_t)v124[11];
      uint64_t v93 = v124[12];
      uint64_t v94 = v124[7];
      uint64_t v73 = v124[13];
      float v8 = v125;
      swift_release();
      sub_22F1899D0((uint64_t)v124, (uint64_t)&v126, &qword_268695508);
      if (v128)
      {
        float32x4_t v123 = v127;
        swift_retain();
        id v74 = [(objc_class *)isa camera];
        objc_msgSend(v74, sel_transform);
        simd_float4 v113 = v76;
        simd_float4 v118 = v75;
        simd_float4 v110 = v77;
        simd_float4 v106 = v78;

        v141.columns[1] = v113;
        v141.columns[0] = v118;
        v141.columns[2] = v110;
        v141.columns[3] = v106;
        simd_float4x4 v142 = __invert_f4(v141);
        float32x4_t v107 = (float32x4_t)v142.columns[0];
        float32x4_t v111 = (float32x4_t)v142.columns[1];
        float32x4_t v114 = (float32x4_t)v142.columns[2];
        float32x4_t v119 = (float32x4_t)v142.columns[3];
        swift_release();
        swift_release();
        sub_22F1CEA38((uint64_t)v124);
        id result = (id)swift_release();
        if (COERCE_FLOAT(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v107, *(float *)&v123), v111, *(float32x2_t *)&v123, 1), v114, v123, 2), v119, v123, 3).i32[2]) > 0.0)
        {
          id result = (id)sub_22F1CEA38((uint64_t)v124);
          uint64_t v18 = 0;
          uint64_t v47 = 0;
          float32x2_t v19 = 0;
          float32x2_t v48 = 0;
          float32x2_t v49 = 0;
          float32x2_t v50 = 0;
          uint64_t v51 = 0;
          uint64_t v52 = 0;
          float32x2_t v53 = 0;
          uint64_t v54 = 0;
          float32x2_t v55 = 0;
          float32x2_t v56 = 0;
          uint64_t v57 = 0;
          uint64_t v58 = 0;
          float v8 = 0.0;
          goto LABEL_38;
        }
      }
      else
      {
        swift_release_n();
        id result = (id)swift_release();
      }
      uint64_t v58 = v73;
    }
    else
    {
      id result = (id)swift_release();
      float32x2_t v55 = 0;
      float32x2_t v56 = 0;
      uint64_t v58 = 0;
      float32x2_t v19 = v92;
    }
    uint64_t v47 = v99;
    uint64_t v18 = v100;
    float32x2_t v49 = v97;
    float32x2_t v48 = v98;
    uint64_t v51 = v95;
    float32x2_t v50 = v96;
    uint64_t v54 = v101;
    float32x2_t v53 = v102;
    uint64_t v57 = v93;
    uint64_t v52 = v94;
    goto LABEL_38;
  }
  id result = (id)swift_bridgeObjectRelease();
  uint64_t v18 = 0;
  uint64_t v47 = 0;
LABEL_37:
  float32x2_t v48 = 0;
  float32x2_t v49 = 0;
  float32x2_t v50 = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  float32x2_t v53 = 0;
  uint64_t v54 = 0;
  float32x2_t v55 = 0;
  float32x2_t v56 = 0;
  uint64_t v57 = 0;
  uint64_t v58 = 0;
LABEL_38:
  *a2 = (float32x2_t)v18;
  a2[1] = (float32x2_t)v47;
  a2[2] = v19;
  a2[3] = v48;
  a2[4] = v49;
  a2[5] = v50;
  a2[6] = (float32x2_t)v51;
  a2[7] = (float32x2_t)v52;
  a2[8] = v53;
  a2[9] = (float32x2_t)v54;
  a2[10] = v55;
  a2[11] = v56;
  a2[12] = (float32x2_t)v57;
  a2[13] = (float32x2_t)v58;
  a2[14].f32[0] = v8;
  return result;
}

uint64_t sub_22F1C95B0@<X0>(void *a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X3>, float32x2_t *a4@<X8>, double a5@<D0>)
{
  *(double *)&uint64_t v9 = *(float *)&a5;
  *(double *)&uint64_t v10 = *((float *)&a5 + 1);
  uint64_t v11 = *(void *)(v5 + 96);
  id v12 = objc_msgSend(a1, sel_camera);
  uint64_t ObjectType = swift_getObjectType();
  CGFloat v14 = (*(double (**)(uint64_t, uint64_t, double, double))(v11 + 24))(ObjectType, v11, *(double *)&v9, *(double *)&v10);
  CGFloat v16 = v15;
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(ObjectType, v11);
  objc_msgSend(v12, sel_imageResolution);
  ARViewToCameraImageTransform();
  v290.CGFloat x = v14;
  v290.CGFloat y = v16;
  CGPoint v19 = CGPointApplyAffineTransform(v290, &v245);
  v18.n128_f64[0] = v19.y;
  v17.n128_f64[0] = v19.x;
  __n128 v197 = v17;
  __n128 v198 = v18;

  int v211 = 0;
  memset(v210, 0, sizeof(v210));
  uint64_t v200 = v5;
  id v196 = a1;
  if (a3 && !sub_22F1C6B04(0, a3))
  {
    uint64_t v187 = 0;
    uint64_t v180 = 0;
    uint64_t v174 = 0;
    uint64_t v167 = 0;
    uint64_t v160 = 0;
    uint64_t v165 = 0;
    uint64_t v153 = 0;
    uint64_t v155 = 0;
    uint64_t v146 = 0;
    uint64_t v151 = 0;
    uint64_t v139 = 0;
    uint64_t v142 = 0;
    uint64_t v137 = 0;
    uint64_t v20 = 0;
    int v136 = 0;
  }
  else
  {
    sub_22F1C8188(a1, (uint64_t)v220, *(double *)&v9, *(double *)&v10);
    uint64_t v20 = v221;
    uint64_t v187 = v220[0];
    uint64_t v180 = v220[1];
    uint64_t v174 = v220[2];
    uint64_t v167 = v220[3];
    uint64_t v160 = v220[5];
    uint64_t v165 = v220[4];
    uint64_t v153 = v220[7];
    uint64_t v155 = v220[6];
    uint64_t v146 = v220[9];
    uint64_t v151 = v220[8];
    uint64_t v139 = v220[11];
    uint64_t v142 = v220[10];
    uint64_t v137 = v220[12];
    int v136 = v222;
    if (!a3)
    {
      uint64_t v199 = v221;
      goto LABEL_7;
    }
  }
  uint64_t v199 = v20;
  if (!sub_22F1C6B04(3, a3))
  {
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v133 = 0;
    uint64_t v134 = 0;
    uint64_t v131 = 0;
    uint64_t v132 = 0;
    uint64_t v129 = 0;
    uint64_t v130 = 0;
    uint64_t v194 = 0;
    int v128 = 0;
    goto LABEL_10;
  }
LABEL_7:
  sub_22F1CA958(a1, (uint64_t)v223, *(double *)&v9, *(double *)&v10);
  uint64_t v21 = v223[0];
  uint64_t v22 = v223[1];
  uint64_t v23 = v223[2];
  uint64_t v24 = v223[3];
  uint64_t v25 = v223[4];
  uint64_t v26 = v223[5];
  uint64_t v27 = v223[6];
  uint64_t v133 = v223[8];
  uint64_t v134 = v223[7];
  uint64_t v129 = v223[11];
  uint64_t v130 = v223[10];
  uint64_t v131 = v223[12];
  uint64_t v132 = v223[9];
  uint64_t v194 = v223[13];
  int v128 = v224;
  if (!a3) {
    goto LABEL_11;
  }
LABEL_10:
  if (sub_22F1C6B04(1, a3))
  {
LABEL_11:
    sub_22F1CAE2C(v196, (uint64_t)a2, (uint64_t)v225, *(double *)&v9, *(double *)&v10);
    long long v28 = v225[0];
    long long v29 = v225[1];
    long long v30 = v225[2];
    long long v31 = v225[3];
    long long v32 = v225[4];
    long long v33 = v225[5];
    uint64_t v34 = v226;
    uint64_t v35 = v227;
    int v36 = v228;
    goto LABEL_13;
  }
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  int v36 = 0;
  long long v28 = 0uLL;
  long long v29 = 0uLL;
  long long v30 = 0uLL;
  long long v31 = 0uLL;
  long long v32 = 0uLL;
  long long v33 = 0uLL;
LABEL_13:
  int v264 = v36;
  v259[0] = v187;
  v259[1] = v180;
  v259[2] = v174;
  v259[3] = v167;
  v259[4] = v165;
  v259[5] = v160;
  v259[6] = v155;
  v259[7] = v153;
  v259[8] = v151;
  v259[9] = v146;
  v259[10] = v142;
  v259[11] = v139;
  v259[12] = v137;
  int v260 = v136;
  v257[0] = v21;
  v257[1] = v22;
  v257[2] = v23;
  v257[3] = v24;
  v257[4] = v25;
  v257[5] = v26;
  v257[6] = v27;
  v257[7] = v134;
  v257[8] = v133;
  v257[9] = v132;
  v257[10] = v130;
  v257[11] = v129;
  uint64_t v262 = v34;
  v261[0] = v28;
  v261[1] = v29;
  v261[2] = v30;
  v261[3] = v31;
  v261[4] = v32;
  v261[5] = v33;
  uint64_t v154 = v35;
  uint64_t v263 = v35;
  v259[13] = v199;
  int v258 = v128;
  v257[12] = v131;
  v257[13] = v194;
  float32x4_t v127 = a4;
  if (a3 && !sub_22F1C6B04(6, a3)
    || !objc_msgSend(self, sel_jasperAvailable)
    || !*(unsigned char *)(v200 + 85))
  {
    float32x2_t v39 = 0;
    uint64_t v71 = 0;
    float32x2_t v64 = 0;
    float32x2_t v66 = 0;
    float32x2_t v65 = 0;
    float32x2_t v69 = 0;
    float32x2_t v67 = 0;
    float32x2_t v70 = 0;
    float32x2_t v68 = 0;
    float32x2_t v72 = 0;
    float32x2_t v62 = 0;
    float32x2_t v63 = 0;
    uint64_t v61 = 0;
    uint64_t v43 = 0;
    float v209 = 0.0;
    long long v207 = 0u;
    long long v208 = 0u;
    float32x4_t v206 = 0u;
    long long v204 = 0u;
    long long v205 = 0u;
    long long v202 = 0u;
    long long v203 = 0u;
    float v44 = 0.0;
    goto LABEL_26;
  }
  v37.n128_u64[0] = v9;
  v38.n128_u64[0] = v10;
  sub_22F1C8AF4((Class)v196, v229, v37, v38);
  float32x2_t v39 = v229[0];
  float32x2_t v188 = v229[2];
  float32x2_t v175 = v229[4];
  float32x2_t v181 = v229[5];
  float32x2_t v156 = v229[6];
  float32x2_t v161 = v229[3];
  float32x2_t v147 = v229[1];
  float32x2_t v152 = v229[7];
  float32x2_t v140 = v229[9];
  float32x2_t v143 = v229[8];
  float32x2_t v40 = v229[10];
  float32x2_t v41 = v229[11];
  float32x2_t v42 = v229[12];
  uint64_t v43 = (uint64_t)v229[13];
  float v44 = v230;
  sub_22F1899D0((uint64_t)v229, (uint64_t)&v202, &qword_268695508);
  sub_22F1899D0((uint64_t)v229, (uint64_t)v252, &qword_268695508);
  uint64_t v45 = v254;
  if (!v254)
  {
    a4 = v127;
LABEL_25:
    float32x2_t v64 = v188;
    float32x2_t v67 = v156;
    float32x2_t v66 = v161;
    uint64_t v71 = (uint64_t)v147;
    float32x2_t v70 = v152;
    uint64_t v61 = (uint64_t)v42;
    float32x2_t v65 = v175;
    float32x2_t v62 = v40;
    float32x2_t v69 = v181;
    float32x2_t v63 = v41;
    float32x2_t v72 = v140;
    float32x2_t v68 = v143;
    goto LABEL_26;
  }
  int8x16_t v168 = v253;
  float v46 = v255;
  uint64_t v47 = qword_2686944A0;
  swift_retain();
  if (v47 != -1) {
    swift_once();
  }
  int8x16_t v48 = v168;
  v48.i32[3] = 0;
  int8x16_t v169 = v48;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268695528);
  uint64_t v49 = swift_allocObject();
  *(_OWORD *)(v49 + 16) = xmmword_22F2265B0;
  sub_22F1899D0((uint64_t)v257, v49 + 32, &qword_268695508);
  sub_22F1899D0((uint64_t)v259, v49 + 160, &qword_268695508);
  sub_22F1899D0((uint64_t)v261, v49 + 288, &qword_268695508);
  v135.i64[0] = sub_22F1E1974(v49, v169);
  v135.i64[1] = v50;
  char v138 = v51;
  swift_setDeallocating();
  swift_retain();
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_268695508);
  swift_arrayDestroy();
  swift_deallocClassInstance();
  if (v138)
  {
    sub_22F1CEA38((uint64_t)v229);
    a4 = v127;
    goto LABEL_25;
  }
  char v52 = *(unsigned char *)(v45 + 48);
  _sSo13simd_float4x4a17MeasureFoundationE4make8position17normalizedForwardABs5SIMD3VySfG_AItFZ_0(*(double *)v169.i64, v135);
  sceneKitToARKit(_:)(v54, v53);
  long long v170 = v55;
  long long v176 = v56;
  long long v182 = v57;
  float32x4_t v189 = v58;
  id v59 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F20E38]), sel_initWithTransform_, *(double *)&v55, *(double *)&v57, *(double *)&v56, *(double *)v58.i64);
  type metadata accessor for WorldPlane();
  swift_allocObject();
  uint64_t v43 = sub_22F210A98(v59, v52, 1.0 - v46, 1.0);

  long long v279 = xmmword_22F228C60;
  long long v280 = v170;
  long long v281 = v182;
  long long v282 = v176;
  float32x4_t v283 = v189;
  uint64_t v285 = 0;
  uint64_t v284 = 0;
  char v286 = 1;
  uint64_t v287 = v43;
  int v288 = 0;
  swift_retain();
  sub_22F2105E8();
  float v44 = v60;
  swift_release();
  sub_22F1CEA38((uint64_t)v229);
  sub_22F1CEA38((uint64_t)v229);
  uint64_t v61 = 1;
  float32x2_t v62 = 0;
  float32x2_t v63 = 0;
  long long v202 = xmmword_22F228C60;
  long long v203 = v170;
  long long v204 = v182;
  long long v205 = v176;
  float32x4_t v206 = v189;
  long long v207 = 0uLL;
  *(void *)&long long v208 = 1;
  *((void *)&v208 + 1) = v43;
  float32x2_t v64 = (float32x2_t)v170;
  float32x2_t v65 = (float32x2_t)v182;
  float v209 = v44;
  float32x2_t v66 = *(float32x2_t *)((char *)&v170 + 8);
  float32x2_t v67 = (float32x2_t)v176;
  float32x2_t v68 = *(float32x2_t *)v189.f32;
  float32x2_t v69 = *(float32x2_t *)((char *)&v182 + 8);
  float32x2_t v70 = *(float32x2_t *)((char *)&v176 + 8);
  uint64_t v71 = 0x3E4CCCCD3D75C28FLL;
  float32x2_t v39 = (float32x2_t)0x3F4000003F000000;
  float32x2_t v72 = *(float32x2_t *)&v189.u32[2];
  a4 = v127;
LABEL_26:
  uint64_t v166 = v43;
  float32x2_t v171 = v39;
  v277[0] = v39;
  float32x2_t v144 = v68;
  uint64_t v148 = v71;
  v277[1] = v71;
  float32x2_t v190 = v64;
  v277[2] = v64;
  float32x2_t v73 = v66;
  v277[3] = v66;
  float32x2_t v177 = v65;
  v277[4] = v65;
  float32x2_t v183 = v69;
  v277[5] = v69;
  float32x2_t v74 = v67;
  v277[6] = v67;
  float32x2_t v75 = v70;
  v277[7] = v70;
  v277[8] = v68;
  float32x2_t v76 = v72;
  v277[9] = v72;
  float32x2_t v77 = v62;
  v277[10] = v62;
  float32x2_t v141 = v63;
  v277[11] = v63;
  uint64_t v78 = v61;
  v277[12] = v61;
  v277[13] = v43;
  float v278 = v44;
  if (objc_msgSend(self, sel_jasperAvailable))
  {
    int v79 = *(unsigned __int8 *)(v200 + 85);
    if (v79 == 3)
    {
      sub_22F1899D0((uint64_t)v277, (uint64_t)&v212, &qword_268695508);
      swift_retain_n();
      uint64_t v80 = v43;
      sub_22F1CB3CC(a2, v200, (uint64_t)v257, (uint64_t)v259, (uint64_t)v261, (uint64_t)v210, (uint64_t)&v202, (uint64_t)&v212, v197, v198, (uint64_t)v196);
      swift_release_n();
      float32x2_t v157 = v74;
      float32x2_t v162 = v73;
      float32x2_t v81 = v144;
      float32x2_t v82 = v77;
      uint64_t v83 = v148;
      float32x2_t v84 = v141;
LABEL_82:
      swift_release();
      swift_release();
      uint64_t result = swift_release();
      *a4 = v171;
      a4[1] = (float32x2_t)v83;
      a4[2] = v190;
      a4[3] = v162;
      a4[4] = v177;
      a4[5] = v183;
      a4[6] = v157;
      a4[7] = v75;
      a4[8] = v81;
      a4[9] = v76;
      a4[10] = v82;
      a4[11] = v84;
      a4[12] = (float32x2_t)v78;
      a4[13] = (float32x2_t)v80;
      a4[14].f32[0] = v44;
      return result;
    }
    uint64_t v80 = v43;
    if (v43)
    {
      if (v79 == 1)
      {
        uint64_t v85 = *(void *)(v200 + 48);
      }
      else
      {
        if (v79 != 2) {
          goto LABEL_35;
        }
        uint64_t v85 = *(void *)(v200 + 56);
      }
      if ((float)((float)v85 * 0.5) <= v44)
      {
        v78 &= 1u;
        *(float32x2_t *)&long long v212 = v171;
        *((void *)&v212 + 1) = v148;
        *(float32x2_t *)&long long v213 = v190;
        float32x2_t v157 = v74;
        float32x2_t v162 = v73;
        *((float32x2_t *)&v213 + 1) = v73;
        *(float32x2_t *)&long long v214 = v177;
        *((float32x2_t *)&v214 + 1) = v183;
        *(float32x2_t *)&long long v215 = v74;
        *((float32x2_t *)&v215 + 1) = v75;
        float32x2_t v84 = v141;
        float32x2_t v81 = v144;
        *(float32x2_t *)&long long v216 = v144;
        *((float32x2_t *)&v216 + 1) = v76;
        float32x2_t v82 = v77;
        uint64_t v83 = v148;
        *(float32x2_t *)&long long v217 = v82;
        *((float32x2_t *)&v217 + 1) = v141;
        *(void *)&long long v218 = v78;
        *((void *)&v218 + 1) = v166;
        float v219 = v44;
        swift_retain_n();
        sub_22F1CB3CC(a2, v200, (uint64_t)v257, (uint64_t)v259, (uint64_t)v261, (uint64_t)v210, (uint64_t)&v202, (uint64_t)&v212, v197, v198, (uint64_t)v196);
        swift_release_n();
        goto LABEL_82;
      }
    }
  }
LABEL_35:
  int v86 = *(unsigned __int8 *)(v200 + 84);
  if (!*(unsigned char *)(v200 + 84) || a3 && !sub_22F1C6B04(5, a3)) {
    goto LABEL_44;
  }
  uint64_t v87 = v199;
  if (!v199)
  {
    uint64_t v87 = v194;
    if (!v194)
    {
      uint64_t v87 = v154;
      swift_retain();
    }
    swift_retain();
  }
  swift_retain();
  swift_release();
  if (v86 == 1 && v87)
  {
LABEL_44:
    uint64_t v88 = 0;
    float32x2_t v89 = 0;
    float32x2_t v90 = 0;
    float32x2_t v91 = 0;
    float32x2_t v92 = 0;
    float32x2_t v93 = 0;
    float32x2_t v94 = 0;
    float32x2_t v95 = 0;
    float32x2_t v96 = 0;
    id v97 = 0;
    uint64_t v98 = 0;
    float32x2_t v99 = 0;
    float32x2_t v100 = 0;
    float32x2_t v101 = 0;
    float v102 = 0.0;
  }
  else
  {
    if (qword_2686944A0 != -1) {
      swift_once();
    }
    sub_22F1E1A24((uint64_t)v196, (uint64_t)v259, (uint64_t)v257, (uint64_t)v261, (uint64_t)a2, (uint64_t)v231, v9, v10);
    uint64_t v88 = v231[0];
    float32x2_t v191 = (float32x2_t)v231[1];
    float32x2_t v184 = (float32x2_t)v231[2];
    float32x2_t v178 = (float32x2_t)v231[3];
    float32x2_t v172 = (float32x2_t)v231[4];
    float32x2_t v158 = (float32x2_t)v231[6];
    float32x2_t v163 = (float32x2_t)v231[5];
    float32x2_t v149 = (float32x2_t)v231[7];
    float32x2_t v96 = (uint64_t *)v231[8];
    id v97 = (id)v231[9];
    uint64_t v98 = v231[10];
    float32x2_t v99 = (float32x2_t)v231[11];
    float32x2_t v100 = (float32x2_t)v231[12];
    float32x2_t v101 = (float32x2_t)v231[13];
    float v102 = v232;
    sub_22F1899D0((uint64_t)v231, (uint64_t)v210, &qword_268695508);
    float32x2_t v95 = v149;
    float32x2_t v94 = v158;
    float32x2_t v93 = v163;
    float32x2_t v92 = v172;
    float32x2_t v91 = v178;
    float32x2_t v90 = v184;
    float32x2_t v89 = v191;
  }
  v275[0] = v88;
  v275[1] = v89;
  v275[2] = v90;
  v275[3] = v91;
  v275[4] = v92;
  v275[5] = v93;
  v275[6] = v94;
  v275[7] = v95;
  v275[8] = v96;
  v275[9] = v97;
  v275[10] = v98;
  v275[11] = v99;
  v275[12] = v100;
  v275[13] = v101;
  float v276 = v102;
  if (v86 == 4) {
    goto LABEL_59;
  }
  if (v86 == 3 && *(void *)&v101)
  {
    float32x2_t v150 = v95;
    float32x2_t v159 = v94;
    float32x2_t v164 = v93;
    float32x2_t v173 = v92;
    float32x2_t v179 = v91;
    float32x2_t v185 = v90;
    float32x2_t v192 = v89;
    swift_retain();
    float32x2_t v103 = v101;
  }
  else
  {
    swift_retain();
    swift_retain();
    sub_22F1CBA44((objc_class *)v196, (uint64_t)v257, (float32x2_t)v259, (uint64_t)v261, (uint64_t)v275, (uint64_t)v277, (uint64_t)a2, v233);
    float32x2_t v192 = v233[1];
    float32x2_t v185 = v233[2];
    float32x2_t v179 = v233[3];
    float32x2_t v173 = v233[4];
    float32x2_t v159 = v233[6];
    float32x2_t v164 = v233[5];
    float32x2_t v145 = v233[0];
    float32x2_t v150 = v233[7];
    float32x2_t v96 = (uint64_t *)v233[8];
    id v97 = (id)v233[9];
    uint64_t v98 = (uint64_t)v233[10];
    float32x2_t v99 = v233[11];
    float32x2_t v100 = v233[12];
    float32x2_t v103 = v233[13];
    float v102 = v234;
    swift_release();
    swift_release();
    if (!*(void *)&v103) {
      goto LABEL_60;
    }
LABEL_54:
    uint64_t v88 = (uint64_t)v145;
  }
  *(void *)&long long v212 = v88;
  *((float32x2_t *)&v212 + 1) = v192;
  *(float32x2_t *)&long long v213 = v185;
  *((float32x2_t *)&v213 + 1) = v179;
  *(float32x2_t *)&long long v214 = v173;
  *((float32x2_t *)&v214 + 1) = v164;
  *(float32x2_t *)&long long v215 = v159;
  *((float32x2_t *)&v215 + 1) = v150;
  *(void *)&long long v216 = v96;
  *((void *)&v216 + 1) = v97;
  *(void *)&long long v217 = v98;
  *((float32x2_t *)&v217 + 1) = v99;
  *(float32x2_t *)&long long v218 = v100;
  *((float32x2_t *)&v218 + 1) = v103;
  float v219 = v102;
  uint64_t v88 = v200;
  uint64_t v98 = (uint64_t)v196;
  while (1)
  {
    float32x2_t v89 = (float32x2_t)*(unsigned __int8 *)(*(void *)&v103 + 48);
    if (v89.i32[0] != 2) {
      goto LABEL_67;
    }
    if (v103) {
      goto LABEL_69;
    }
    __break(1u);
LABEL_59:
    float32x2_t v145 = (float32x2_t)v88;
    float32x2_t v150 = v95;
    float32x2_t v159 = v94;
    float32x2_t v164 = v93;
    float32x2_t v173 = v92;
    float32x2_t v179 = v91;
    float32x2_t v185 = v90;
    float32x2_t v192 = v89;
    swift_retain();
    float32x2_t v103 = v101;
    if (v101) {
      goto LABEL_54;
    }
LABEL_60:
    sub_22F1899D0((uint64_t)a2, (uint64_t)&v238, &qword_268695438);
    if (sub_22F1C630C((uint64_t)&v238) == 1) {
      goto LABEL_64;
    }
    long long v248 = v241;
    long long v249 = v242;
    long long v250 = v243;
    long long v251 = v244;
    CGAffineTransform v245 = v238;
    long long v246 = v239;
    long long v247 = v240;
    sub_22F1899D0((uint64_t)&v251 + 8, (uint64_t)v256, &qword_268695520);
    sub_22F1899D0((uint64_t)v256, (uint64_t)v289, &qword_268695520);
    if (!v289[0])
    {
LABEL_64:
      float v219 = 0.0;
      long long v217 = 0u;
      long long v218 = 0u;
      long long v215 = 0u;
      long long v216 = 0u;
      long long v213 = 0u;
      long long v214 = 0u;
      long long v212 = 0u;
      uint64_t v88 = v200;
      uint64_t v98 = (uint64_t)v196;
      goto LABEL_80;
    }
    uint64_t v98 = (uint64_t)v196;
    id v97 = objc_msgSend(v196, sel_camera);
    memset(v274, 0, 64);
    v274[64] = 1;
    __n128 v104 = _sSo7ARFrameC17MeasureFoundationE9getHitRay11cameraPoint0G00G18CorrectedTransforms5SIMD3VySfG6origin_AJ9directionts5SIMD2VySfG_So8ARCameraCSo13simd_float4x4aSgtFZ_0(v97, (uint64_t)v274);
    float32x4_t v186 = v105;
    float32x4_t v193 = (float32x4_t)v104;

    WorldPlane.hitTest(hitRay:withPlaneType:)(2, (uint64_t)v235, v193, v186);
    float32x2_t v96 = &qword_268695508;
    sub_22F1899D0((uint64_t)v235, (uint64_t)&v212, &qword_268695508);
    sub_22F1899D0((uint64_t)v235, (uint64_t)v236, &qword_268695508);
    uint64_t v88 = v200;
    if (!v237) {
      break;
    }
    float32x2_t v103 = *(float32x2_t *)((char *)&v218 + 8);
  }
  float32x2_t v103 = *(float32x2_t *)((char *)&v218 + 8);
LABEL_67:
  if (!*(void *)&v103 || *(unsigned char *)(*(void *)&v103 + 48) != 4) {
    goto LABEL_80;
  }
LABEL_69:
  uint64_t v106 = v216;
  unsigned int v107 = DWORD2(v216);
  long long v265 = v212;
  long long v266 = v213;
  long long v267 = v214;
  long long v268 = v215;
  long long v269 = v216;
  long long v270 = v217;
  char v271 = v218 & 1;
  float32x2_t v272 = v103;
  float v273 = v219;
  swift_retain();
  float v108 = WorldPlaneHitTestResult.distanceToCamera(in:)((ARFrame)v98);
  swift_release();
  if (v108 > 30.0) {
    goto LABEL_70;
  }
  if (!*(unsigned char *)(v88 + 140) || *(unsigned char *)(v88 + 140) == 33) {
    goto LABEL_80;
  }
  uint64_t v109 = v98;
  uint64_t v110 = qword_2686944A0;
  swift_retain();
  if (v110 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v111 = *(void *)(*(void *)&v103 + 16);
  long long v112 = *(os_unfair_lock_s **)(v111 + 24);
  swift_retain();
  os_unfair_lock_lock(v112);
  swift_beginAccess();
  id v113 = *(id *)(v111 + 16);
  os_unfair_lock_unlock(v112);
  swift_release();
  int v114 = sub_22F1E0634(v113);
  swift_release();

  uint64_t v98 = v109;
  if (!v114) {
    goto LABEL_80;
  }
  uint64_t v115 = *(void *)(*(void *)&v103 + 16);
  float32x4_t v116 = *(os_unfair_lock_s **)(v115 + 24);
  swift_retain();
  swift_retain();
  os_unfair_lock_lock(v116);
  swift_beginAccess();
  id v117 = *(id *)(v115 + 16);
  simd_float4 v118 = v116;
  uint64_t v98 = v109;
  os_unfair_lock_unlock(v118);
  swift_release();
  unsigned __int8 v119 = sub_22F1E0634(v117);
  swift_release();

  int v120 = *(unsigned __int8 *)(v88 + 140);
  if (v120 != 33 && v120 == v119)
  {
LABEL_80:
    uint64_t v124 = *((void *)&v212 + 1);
    float32x2_t v171 = (float32x2_t)v212;
    float32x2_t v190 = (float32x2_t)v213;
    float32x2_t v183 = *(float32x2_t *)((char *)&v214 + 8);
    float32x2_t v177 = (float32x2_t)v214;
    float32x2_t v157 = (float32x2_t)v215;
    float32x2_t v162 = *(float32x2_t *)((char *)&v213 + 8);
    float32x2_t v75 = *(float32x2_t *)((char *)&v215 + 8);
    float32x2_t v76 = *(float32x2_t *)((char *)&v216 + 8);
    float32x2_t v81 = (float32x2_t)v216;
    float32x2_t v84 = *(float32x2_t *)((char *)&v217 + 8);
    float32x2_t v82 = (float32x2_t)v217;
    uint64_t v125 = v98;
    uint64_t v80 = *((void *)&v218 + 1);
    uint64_t v78 = v218;
    float v44 = v219;
    swift_retain();
    uint64_t v126 = v125;
    uint64_t v83 = v124;
    sub_22F1CB3CC(a2, v88, (uint64_t)v257, (uint64_t)v259, (uint64_t)v261, (uint64_t)v210, (uint64_t)&v202, (uint64_t)&v212, v197, v198, v126);
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_81;
  }
  v121.i64[1] = v107;
  v121.i64[0] = v106;
  float32x4_t v201 = v121;
  swift_retain();
  unint64_t v122 = WorldPlane.distanceToEdge(point:)(v201);
  uint64_t result = swift_release();
  if ((v122 & 0x100000000) == 0)
  {
    if (*(float *)&v122 > 0.25)
    {
LABEL_70:
      sub_22F1CB3CC(a2, v88, (uint64_t)v257, (uint64_t)v259, (uint64_t)v261, (uint64_t)v210, (uint64_t)&v202, (uint64_t)&v212, v197, v198, v98);
      swift_release();
      swift_release();
      swift_release();
      float32x2_t v171 = 0;
      uint64_t v83 = 0;
      float32x2_t v190 = 0;
      float32x2_t v157 = 0;
      float32x2_t v162 = 0;
      float32x2_t v177 = 0;
      float32x2_t v183 = 0;
      float32x2_t v75 = 0;
      float32x2_t v81 = 0;
      float32x2_t v76 = 0;
      float32x2_t v82 = 0;
      float32x2_t v84 = 0;
      uint64_t v78 = 0;
      float v44 = 0.0;
      uint64_t v80 = 0;
LABEL_81:
      a4 = v127;
      goto LABEL_82;
    }
    goto LABEL_80;
  }
  __break(1u);
  return result;
}

uint64_t sub_22F1CA958@<X0>(void *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v7 = *((void *)sub_22F1C6F18() + 2);
  uint64_t result = swift_bridgeObjectRelease();
  long long v9 = 0uLL;
  int v10 = 0;
  if (v7)
  {
    uint64_t v40 = a2;
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    while (1)
    {
      uint64_t result = (uint64_t)sub_22F1C6F18();
      if (v12 >= *(void *)(result + 16))
      {
        __break(1u);
LABEL_22:
        __break(1u);
        return result;
      }
      double v13 = *(double *)(result + v11 + 32);
      double v14 = *(double *)(result + v11 + 40);
      uint64_t result = swift_bridgeObjectRelease();
      if (qword_2686944A0 != -1) {
        uint64_t result = swift_once();
      }
      uint64_t v15 = *(void *)(static MeasureCore.shared + 88);
      if (!v15) {
        goto LABEL_22;
      }
      uint64_t result = swift_beginAccess();
      if ((*(unsigned char *)(v15 + 432) & 1) == 0)
      {
        double v56 = *(double *)(v15 + 416);
        double v51 = *(double *)(v15 + 400);
        double v48 = *(double *)(v15 + 384);
        double v16 = *(double *)(v15 + 368);
        uint64_t v17 = *(void *)(v15 + 352);
        uint64_t result = swift_beginAccess();
        if ((*(unsigned char *)(v15 + 432) & 1) == 0 && *(unsigned char *)(v15 + 433) != 1)
        {
          double v18 = v13 + a3;
          float32x4_t v43 = *(float32x4_t *)(v15 + 320);
          float32x4_t v42 = *(float32x4_t *)(v15 + 336);
          float v19 = *(float *)(v15 + 352);
          swift_retain();
          sub_22F1EE604(a1, (uint64_t)v63);
          simd_float4x4 v88 = __invert_f4(v64);
          float32x4_t v46 = (float32x4_t)v88.columns[1];
          float32x4_t v47 = (float32x4_t)v88.columns[0];
          float32x4_t v44 = (float32x4_t)v88.columns[3];
          float32x4_t v45 = (float32x4_t)v88.columns[2];
          sub_22F1EE604(a1, (uint64_t)v65);
          sub_22F1B3440(v66, v18, v14 + a4, v47, v46, v45, v44, v65[0]);
          sub_22F1899D0((uint64_t)v66, (uint64_t)v74, &qword_2686951E8);
          if (v75)
          {
            uint64_t result = swift_release();
          }
          else
          {
            sub_22F1AC564((uint64_t)v67, v43, v42, v19, v74[0], v74[1]);
            swift_release();
            uint64_t result = sub_22F1899D0((uint64_t)v67, (uint64_t)&v72, &qword_268695210);
            if ((v73 & 1) == 0)
            {
              double v26 = v56;
              id v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F20E38]), sel_initWithTransform_, v16, v48, v51, v26);
              type metadata accessor for WorldPlane();
              swift_allocObject();
              uint64_t v28 = sub_22F210A98(v27, 3, 1.0 - *((float *)&v17 + 1), 1.0);

              sceneKitToARKit(_:)(v30, v29);
              long long v52 = v31;
              long long v78 = xmmword_22F228C60;
              long long v79 = v32;
              long long v57 = v33;
              long long v60 = v32;
              long long v80 = v33;
              long long v81 = v34;
              long long v54 = v34;
              long long v82 = v31;
              uint64_t v83 = 0;
              uint64_t v84 = 0;
              char v85 = 1;
              uint64_t v86 = v28;
              int v87 = 0;
              swift_retain();
              sub_22F2105E8();
              int v10 = v35;
              uint64_t result = swift_release();
              if (v12)
              {
                id v36 = objc_msgSend(a1, sel_camera);
                memset(v76, 0, sizeof(v76));
                char v77 = 1;
                __n128 v37 = _sSo7ARFrameC17MeasureFoundationE9getHitRay11cameraPoint0G00G18CorrectedTransforms5SIMD3VySfG6origin_AJ9directionts5SIMD2VySfG_So8ARCameraCSo13simd_float4x4aSgtFZ_0(v36, (uint64_t)v76);
                float32x4_t v58 = v38;
                float32x4_t v61 = (float32x4_t)v37;

                sub_22F1DCBB0((uint64_t)v68, v61, v58);
                long long v59 = v68[2];
                long long v62 = v68[1];
                long long v55 = v68[3];
                long long v50 = v68[0];
                long long v53 = v68[4];
                long long v49 = v68[5];
                uint64_t v20 = v69;
                uint64_t v39 = v70;
                int v10 = v71;
                uint64_t result = swift_release();
                long long v25 = v53;
                long long v24 = v55;
                long long v23 = v59;
                long long v22 = v62;
                long long v9 = v49;
                long long v21 = v50;
                uint64_t v28 = v39;
                a2 = v40;
              }
              else
              {
                uint64_t v20 = 1;
                a2 = v40;
                long long v9 = 0uLL;
                long long v23 = v57;
                long long v22 = v60;
                long long v21 = xmmword_22F228C60;
                long long v25 = v52;
                long long v24 = v54;
              }
              goto LABEL_17;
            }
          }
        }
      }
      ++v12;
      v11 += 16;
      if (v7 == v12)
      {
        uint64_t v20 = 0;
        uint64_t v28 = 0;
        long long v21 = 0uLL;
        long long v22 = 0uLL;
        long long v23 = 0uLL;
        long long v24 = 0uLL;
        long long v25 = 0uLL;
        a2 = v40;
        long long v9 = 0uLL;
        goto LABEL_17;
      }
    }
  }
  uint64_t v20 = 0;
  uint64_t v28 = 0;
  long long v21 = 0uLL;
  long long v22 = 0uLL;
  long long v23 = 0uLL;
  long long v24 = 0uLL;
  long long v25 = 0uLL;
LABEL_17:
  *(_OWORD *)a2 = v21;
  *(_OWORD *)(a2 + 16) = v22;
  *(_OWORD *)(a2 + 32) = v23;
  *(_OWORD *)(a2 + 48) = v24;
  *(_OWORD *)(a2 + 64) = v25;
  *(_OWORD *)(a2 + 80) = v9;
  *(void *)(a2 + 96) = v20;
  *(void *)(a2 + 104) = v28;
  *(_DWORD *)(a2 + 112) = v10;
  return result;
}

uint64_t sub_22F1CAE2C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v6 = v5;
  sub_22F1899D0(a2, (uint64_t)v103, &qword_268695438);
  uint64_t result = sub_22F1C630C((uint64_t)v103);
  long long v12 = 0uLL;
  if (result != 1)
  {
    uint64_t v13 = v106;
    if (v106)
    {
      unsigned int v14 = v105;
      uint64_t v15 = v104;
      swift_retain_n();
      id v16 = objc_msgSend(a1, sel_camera);
      memset(v107, 0, 64);
      v107[64] = 1;
      __n128 v17 = _sSo7ARFrameC17MeasureFoundationE9getHitRay11cameraPoint0G00G18CorrectedTransforms5SIMD3VySfG6origin_AJ9directionts5SIMD2VySfG_So8ARCameraCSo13simd_float4x4aSgtFZ_0(v16, (uint64_t)v107);
      float32x4_t v73 = v18;
      float32x4_t v77 = (float32x4_t)v17;

      WorldPlane.hitTest(hitRay:withPlaneType:)(7, (uint64_t)v85, v77, v73);
      swift_release();
      sub_22F1899D0((uint64_t)v85, (uint64_t)v100, &qword_268695508);
      if (v102)
      {
        float32x4_t v78 = v101;
        sub_22F1CEA38((uint64_t)v85);
        float32x4_t v19 = v78;
        v19.i32[3] = 0;
      }
      else
      {
        v27.i64[1] = v14;
        v27.i64[0] = v15;
        long long v74 = 0u;
        float32x4_t v79 = v27;
        sub_22F1EE604(a1, (uint64_t)v86);
        float32x4_t v66 = v88;
        *(_OWORD *)uint64_t v69 = v87;
        float32x4_t v61 = v90;
        float32x4_t v63 = v89;
        sub_22F1EE604(a1, (uint64_t)v91);
        _s17MeasureFoundation0A6CameraC12projectPoint_14viewProjection12viewportSizes5SIMD3VySfGAI_So13simd_float4x4as5SIMD2VySfGtFZ_0(v79, *(float32x4_t *)v69, v66, v63, v61, v91[0]);
        if (v28 < 0.0 || v28 > 1.0)
        {
LABEL_29:
          int v20 = 0;
          float32x4_t v34 = 0uLL;
          goto LABEL_30;
        }
        *(float *)&unsigned int v30 = a4;
        *(float *)&unsigned int v31 = a5;
        v32.n128_u64[0] = __PAIR64__(v31, v30);
        v32.n128_u64[1] = LODWORD(v28);
        __n128 v80 = v32;
        sub_22F1EE604(a1, (uint64_t)v92);
        *(_OWORD *)uint64_t v70 = v94;
        float32x4_t v75 = v93;
        float32x4_t v64 = v96;
        float32x4_t v67 = v95;
        sub_22F1EE604(a1, (uint64_t)v97);
        *(float32x2_t *)v19.f32 = _s17MeasureFoundation0A6CameraC14unprojectPoint_17viewProjectionInv12viewportSizes5SIMD3VySfGAI_So13simd_float4x4as5SIMD2VySfGtFZ_0(v80, v75, *(float32x4_t *)v70, v67, v64, v97[0]);
      }
      float32x4_t v81 = v19;
      if (qword_2686944A0 != -1)
      {
        swift_once();
        float32x4_t v19 = v81;
      }
      uint64_t v33 = MeasureCore.mlLabel(of:kernelRadius:)(0, v19);
      int v20 = 0;
      float32x4_t v34 = 0uLL;
      if ((_BYTE)v33)
      {
        long long v74 = 0uLL;
        if (v33 != 33)
        {
          uint64_t v35 = v33;
          swift_beginAccess();
          uint64_t v36 = *(void *)(v13 + 16);
          __n128 v37 = *(os_unfair_lock_s **)(v36 + 24);
          swift_retain();
          swift_retain();
          os_unfair_lock_lock(v37);
          swift_beginAccess();
          id v38 = *(id *)(v36 + 16);
          os_unfair_lock_unlock(v37);
          swift_release();
          unsigned __int8 v39 = sub_22F1E0634(v38);
          swift_release();

          if (v35 == v39)
          {
            uint64_t v40 = v81.i64[1];
          }
          else
          {
            uint64_t v40 = v81.i64[1];
            unsigned __int8 v41 = MeasureCore.mlLabel(of:kernelRadius:)(5, v81);
            if (v41 == 33 || v35 != v41)
            {
              uint64_t v42 = *(void *)(v13 + 16);
              float32x4_t v43 = *(os_unfair_lock_s **)(v42 + 24);
              swift_retain();
              swift_retain();
              os_unfair_lock_lock(v43);
              swift_beginAccess();
              id v44 = *(id *)(v42 + 16);
              float32x4_t v45 = v43;
              uint64_t v40 = v81.i64[1];
              os_unfair_lock_unlock(v45);
              swift_release();
              uint64_t v35 = sub_22F1E0634(v44);
              swift_release();
            }
          }
          *(unsigned char *)(v6 + 140) = v35;
          uint64_t v46 = *(void *)(static MeasureCore.shared + 80);
          if (v46)
          {
            v47.i64[0] = v81.i64[0];
            v47.i64[1] = v40;
            float32x4_t v82 = v47;
            double v48 = *(void **)(v46 + 272);
            swift_retain();
            int v71 = v48;
            objc_msgSend(v48, sel_lock);
            uint64_t v49 = SegmentationProcessor.projectPoint(_:)(v82);
            if (v51)
            {
              unint64_t v52 = 0;
              uint64_t v54 = 0;
              char v56 = 1;
            }
            else
            {
              unint64_t v52 = SegmentationProcessor.normal(at:)(*(CGFloat *)&v49, v50);
              uint64_t v54 = v53;
              char v56 = v55 & 1;
            }
            objc_msgSend(v71, sel_unlock);
            swift_release();
          }
          else
          {
            unint64_t v52 = 0;
            uint64_t v54 = 0;
            char v56 = 1;
          }
          if (sub_22F1CD814(a1, 0, v35, v52, v54, v56))
          {
            swift_retain();
            id v57 = objc_msgSend(a1, sel_camera);
            __n128 v58 = _sSo7ARFrameC17MeasureFoundationE9getHitRay11cameraPoint0G00G18CorrectedTransforms5SIMD3VySfG6origin_AJ9directionts5SIMD2VySfG_So8ARCameraCSo13simd_float4x4aSgtFZ_0(v57, (uint64_t)v107);
            float32x4_t v76 = v59;
            float32x4_t v83 = (float32x4_t)v58;

            WorldPlane.hitTest(hitRay:withPlaneType:)(1, (uint64_t)v98, v83, v76);
            long long v74 = v98[0];
            float32x4_t v84 = (float32x4_t)v98[1];
            float32x4_t v68 = (float32x4_t)v98[3];
            *(_OWORD *)long long v72 = v98[2];
            float32x4_t v62 = (float32x4_t)v98[5];
            float32x4_t v65 = (float32x4_t)v98[4];
            float32x4_t v60 = (float32x4_t)v98[6];
            int v20 = v99;
            swift_release();
            swift_release();
LABEL_31:
            uint64_t result = swift_release();
            long long v12 = v74;
            float32x4_t v21 = v84;
            float32x4_t v23 = v68;
            long long v22 = *(_OWORD *)v72;
            float32x4_t v25 = v62;
            float32x4_t v24 = v65;
            float32x4_t v26 = v60;
            goto LABEL_32;
          }
          goto LABEL_29;
        }
      }
      else
      {
        long long v74 = 0uLL;
      }
LABEL_30:
      float32x4_t v84 = v34;
      float32x4_t v68 = v34;
      *(float32x4_t *)long long v72 = v34;
      float32x4_t v62 = v34;
      float32x4_t v65 = v34;
      float32x4_t v60 = v34;
      goto LABEL_31;
    }
  }
  int v20 = 0;
  float32x4_t v21 = 0uLL;
  long long v22 = 0uLL;
  float32x4_t v23 = 0uLL;
  float32x4_t v24 = 0uLL;
  float32x4_t v25 = 0uLL;
  float32x4_t v26 = 0uLL;
LABEL_32:
  *(_OWORD *)a3 = v12;
  *(float32x4_t *)(a3 + 16) = v21;
  *(_OWORD *)(a3 + 32) = v22;
  *(float32x4_t *)(a3 + 48) = v23;
  *(float32x4_t *)(a3 + 64) = v24;
  *(float32x4_t *)(a3 + 80) = v25;
  *(float32x4_t *)(a3 + 96) = v26;
  *(_DWORD *)(a3 + 112) = v20;
  return result;
}

void sub_22F1CB3CC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9, __n128 a10, uint64_t a11)
{
  __n128 v55 = a9;
  __n128 v56 = a10;
  *(void *)&long long v54 = a5;
  sub_22F1899D0((uint64_t)a1, (uint64_t)v66, &qword_268695438);
  sub_22F1899D0((uint64_t)v66, (uint64_t)v74, &qword_268695438);
  uint64_t v18 = sub_22F2238C8();
  uint64_t v61 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  float32x4_t v59 = (char *)&v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = sub_22F2238E8();
  uint64_t v58 = *(void *)(v60 - 8);
  MEMORY[0x270FA5388](v60);
  id v57 = (char *)&v51 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22F1899D0((uint64_t)a1, (uint64_t)v67, &qword_268695438);
  if (sub_22F1C630C((uint64_t)v67) != 1 && (v67[0] & 1) == 0)
  {
    sub_22F1899D0((uint64_t)v74, (uint64_t)v65, &qword_268695438);
    sub_22F1CEC94((uint64_t)v65);
    if (PlaneSelector.debugOptions.getter())
    {
      swift_beginAccess();
      if (*(void *)(a2 + 208))
      {
        sub_22F1AD024(a2 + 184, (uint64_t)v69);
        *(void *)&long long v52 = v70;
        uint64_t v21 = v71;
        *(void *)&long long v51 = __swift_project_boxed_opaque_existential_0(v69, v70);
        sub_22F1899D0(a6, (uint64_t)v72, &qword_268695508);
        sub_22F1899D0(a7, (uint64_t)v73, &qword_268695508);
        uint64_t v53 = v18;
        long long v22 = *(void (**)(uint64_t, uint64_t, void, unsigned char *, unsigned char *, void, uint64_t))(v21 + 16);
        sub_22F1CEA64((uint64_t)v72);
        sub_22F1CEA64((uint64_t)v73);
        v22(a3, a4, v54, v72, v73, v52, v21);
        uint64_t v18 = v53;
        sub_22F1CEA38((uint64_t)v73);
        sub_22F1CEA38((uint64_t)v72);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v69);
      }
    }
    if (*(unsigned char *)(a2 + 168))
    {
      swift_beginAccess();
      if (*(void *)(a2 + 208))
      {
        sub_22F1AD024(a2 + 184, (uint64_t)v62);
        uint64_t v23 = v63;
        uint64_t v24 = v64;
        __swift_project_boxed_opaque_existential_0(v62, v63);
        sub_22F1899D0(a8, (uint64_t)v69, &qword_268695508);
        uint64_t v25 = v18;
        float32x4_t v26 = *(void (**)(void *, uint64_t, uint64_t))(v24 + 24);
        sub_22F1CEA64((uint64_t)v69);
        v26(v69, v23, v24);
        uint64_t v18 = v25;
        sub_22F1CEA38((uint64_t)v69);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v62);
      }
    }
    if ((*(unsigned char *)(a2 + 168) & 2) != 0 && (swift_beginAccess(), *(void *)(a2 + 208)))
    {
      sub_22F1AD024(a2 + 184, (uint64_t)v62);
      uint64_t v27 = v63;
      uint64_t v28 = v64;
      __swift_project_boxed_opaque_existential_0(v62, v63);
      *(void *)&v29.f64[0] = v55.n128_u64[0];
      *(void *)&v29.f64[1] = v56.n128_u64[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v28 + 32))(a11, v27, v28, COERCE_DOUBLE(vcvt_f32_f64(v29)));
      sub_22F1CECCC(a1);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v62);
    }
    else
    {
      sub_22F1CECCC(a1);
    }
  }
  id v30 = objc_msgSend(self, sel_standardUserDefaults);
  unsigned int v31 = objc_msgSend(v30, sel_kPEShowStats);

  if (v31)
  {
    uint64_t v32 = *(void *)(a8 + 104);
    if (v32)
    {
      int v33 = *(_DWORD *)(a8 + 112);
      char v34 = *(_DWORD *)(a8 + 96);
      uint64_t v36 = *(void *)(a8 + 80);
      uint64_t v35 = *(void *)(a8 + 88);
      __n128 v37 = *(__n128 *)(a8 + 64);
      long long v54 = *(_OWORD *)(a8 + 48);
      __n128 v55 = v37;
      long long v38 = *(_OWORD *)(a8 + 32);
      long long v51 = *(_OWORD *)(a8 + 16);
      long long v52 = v38;
      uint64_t v53 = v18;
      uint64_t v39 = *(void *)a8;
      uint64_t v40 = *(void *)(a8 + 8);
      uint64_t v41 = HIDWORD(*(void *)a8);
      char v68 = v34 & 1;
      sub_22F1A321C(0, &qword_268694F48);
      swift_retain();
      v56.n128_u64[0] = sub_22F224118();
      uint64_t v42 = swift_allocObject();
      swift_weakInit();
      uint64_t v43 = swift_allocObject();
      *(void *)(v43 + 16) = v42;
      *(_DWORD *)(v43 + 32) = v39;
      *(_DWORD *)(v43 + 36) = v41;
      *(void *)(v43 + 40) = v40;
      long long v44 = v52;
      *(_OWORD *)(v43 + 48) = v51;
      *(_OWORD *)(v43 + 64) = v44;
      __n128 v45 = v55;
      *(_OWORD *)(v43 + 80) = v54;
      *(__n128 *)(v43 + 96) = v45;
      *(void *)(v43 + 112) = v36;
      *(void *)(v43 + 120) = v35;
      *(unsigned char *)(v43 + 128) = v68;
      *(_DWORD *)(v43 + 129) = v62[0];
      *(_DWORD *)(v43 + 132) = *(_DWORD *)((char *)v62 + 3);
      *(void *)(v43 + 136) = v32;
      *(_DWORD *)(v43 + 144) = v33;
      v65[4] = sub_22F1CEC70;
      v65[5] = v43;
      v65[0] = MEMORY[0x263EF8330];
      v65[1] = 1107296256;
      v65[2] = sub_22F182A20;
      v65[3] = &block_descriptor_2;
      uint64_t v46 = _Block_copy(v65);
      swift_retain();
      swift_release();
      float32x4_t v47 = v57;
      sub_22F2238D8();
      v65[0] = MEMORY[0x263F8EE78];
      sub_22F1CEDE0(&qword_268694FE8, MEMORY[0x263F8F030]);
      __swift_instantiateConcreteTypeFromMangledName(&qword_268694FF0);
      sub_22F1A317C();
      double v48 = v59;
      uint64_t v49 = v53;
      sub_22F2242B8();
      CGFloat v50 = (void *)v56.n128_u64[0];
      MEMORY[0x230FB2B90](0, v47, v48, v46);
      _Block_release(v46);
      swift_release();

      (*(void (**)(char *, uint64_t))(v61 + 8))(v48, v49);
      (*(void (**)(char *, uint64_t))(v58 + 8))(v47, v60);
    }
  }
}

uint64_t sub_22F1CBA44@<X0>(objc_class *a1@<X0>, uint64_t a2@<X1>, float32x2_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, float32x2_t *a8@<X8>)
{
  uint64_t v9 = v8;
  uint64_t v272 = a7;
  float32x2_t v274 = a3;
  v269.super.isCGFloat a = a1;
  long long v267 = a8;
  uint64_t v273 = a4;
  sub_22F1899D0(a4, (uint64_t)v314, &qword_268695508);
  uint64_t v243 = v314[1];
  uint64_t v244 = v314[0];
  uint64_t v241 = v314[3];
  uint64_t v242 = v314[2];
  uint64_t v239 = v314[5];
  uint64_t v240 = v314[4];
  uint64_t v237 = v314[7];
  CGAffineTransform v238 = (char *)v314[6];
  int32x2_t v262 = (int32x2_t)v314[9];
  float32x2_t v263 = (float32x2_t)v314[8];
  uint64_t v235 = v314[11];
  uint64_t v236 = v314[10];
  uint64_t v233 = v314[13];
  float v234 = (unsigned int (*)(void, void, void))v314[12];
  float v232 = v315;
  sub_22F1899D0(a2, (uint64_t)&v300, &qword_268695508);
  unsigned long long v266 = v300;
  uint64_t v278 = v301;
  v277 = v302;
  unint64_t v280 = v303;
  float v276 = v304;
  uint64_t v281 = v305;
  uint64_t v13 = v306;
  float32x2_t v14 = v307;
  unint64_t v15 = v308;
  *(void *)long long v270 = v309;
  *(void *)&v270[8] = v310;
  unint64_t v279 = v311;
  float32x2_t v282 = v312;
  float v275 = v313;
  sub_22F1899D0(a5, (uint64_t)v298, &qword_268695508);
  *(void *)&unsigned long long v16 = v298[0];
  unsigned long long v271 = v16;
  int v258 = (unsigned int (*)(void, void, void))v298[3];
  v259 = (void *)v298[2];
  v256 = (void (*)(void, void, void))v298[5];
  unint64_t v257 = v298[4];
  uint64_t v254 = v298[7];
  float v255 = (void *)v298[6];
  unint64_t v252 = v298[9];
  float32x2_t v253 = (float32x2_t)v298[8];
  uint64_t v247 = v298[10];
  uint64_t v248 = v298[1];
  uint64_t v249 = v298[11];
  unint64_t v251 = v298[12];
  float32x2_t v268 = (float32x2_t)v298[13];
  LODWORD(v250) = v299;
  sub_22F1899D0(a6, (uint64_t)v293, &qword_268695508);
  *(void *)&long long v17 = v293[0];
  long long v231 = v17;
  uint64_t v221 = v293[1];
  v229 = (unsigned int (*)(void, void, void))v293[3];
  uint64_t v230 = v293[2];
  uint64_t v227 = (void (*)(void, void, void))v293[5];
  unint64_t v228 = v293[4];
  uint64_t v225 = v293[7];
  uint64_t v226 = v293[6];
  unint64_t v223 = v293[9];
  float32x2_t v224 = (float32x2_t)v293[8];
  long long v219 = v294;
  unint64_t v222 = v295;
  float32x2_t v18 = v296;
  float v220 = v297;
  uint64_t v218 = __swift_instantiateConcreteTypeFromMangledName(&qword_268695530);
  uint64_t v19 = MEMORY[0x270FA5388](v218);
  uint64_t v209 = (uint64_t)&v204 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  long long v208 = (char *)&v204 - v22;
  MEMORY[0x270FA5388](v21);
  long long v212 = (char *)&v204 - v23;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(qword_268695538);
  uint64_t v25 = MEMORY[0x270FA5388](v24 - 8);
  uint64_t v206 = (uint64_t)&v204 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  uint64_t v211 = (uint64_t)&v204 - v28;
  uint64_t v29 = MEMORY[0x270FA5388](v27);
  long long v213 = (char *)&v204 - v30;
  uint64_t v31 = MEMORY[0x270FA5388](v29);
  uint64_t v205 = (uint64_t)&v204 - v32;
  uint64_t v33 = MEMORY[0x270FA5388](v31);
  uint64_t v210 = (uint64_t)&v204 - v34;
  uint64_t v35 = MEMORY[0x270FA5388](v33);
  uint64_t v216 = (uint64_t)&v204 - v36;
  uint64_t v37 = MEMORY[0x270FA5388](v35);
  uint64_t v207 = (uint64_t)&v204 - v38;
  uint64_t v39 = MEMORY[0x270FA5388](v37);
  uint64_t v214 = (uint64_t)&v204 - v40;
  uint64_t v41 = MEMORY[0x270FA5388](v39);
  uint64_t v215 = (uint64_t)&v204 - v42;
  MEMORY[0x270FA5388](v41);
  long long v265 = (char *)&v204 - v43;
  uint64_t v44 = sub_22F223848();
  uint64_t v260 = *(void *)(v44 - 8);
  uint64_t v261 = v44;
  uint64_t v45 = MEMORY[0x270FA5388](v44);
  long long v217 = (char *)&v204 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = MEMORY[0x270FA5388](v45);
  CGAffineTransform v245 = (char *)&v204 - v48;
  MEMORY[0x270FA5388](v47);
  long long v246 = (char *)&v204 - v49;
  sub_22F1899D0(a6, (uint64_t)v348, &qword_268695508);
  float32x2_t v50 = v350;
  if (*(void *)&v350 && (float)((float)*(uint64_t *)(v9 + 48) * 0.5) <= v351)
  {
    unint64_t v279 = v349;
    *(void *)&v270[8] = v348[11];
    *(void *)long long v270 = v348[10];
    float32x2_t v274 = (float32x2_t)v348[8];
    *((void *)&v266 + 1) = v348[9];
    uint64_t v281 = v348[6];
    uint64_t v75 = v348[7];
    float32x2_t v76 = (float32x2_t)v348[4];
    float32x4_t v77 = (void (*)(void, void, void))v348[5];
    uint64_t v78 = v348[2];
    float32x2_t v79 = (float32x2_t)v348[3];
    float v80 = v351;
    float32x2_t v81 = (float32x2_t)v348[1];
    float32x2_t v82 = (float32x2_t)v348[0];
    uint64_t result = swift_retain();
    float32x2_t v84 = *(float32x2_t *)v270;
    float32x2_t v85 = v82;
    float32x2_t v86 = *(float32x2_t *)&v270[8];
    float32x2_t v87 = v81;
    float32x4_t v88 = (unsigned int (*)(void, void, void))v279;
    float32x2_t v89 = (float32x2_t)v281;
    float32x2_t v14 = v274;
    unint64_t v15 = *((void *)&v266 + 1);
    float32x4_t v90 = v77;
    goto LABEL_65;
  }
  sub_22F1899D0(v272, (uint64_t)v347, &qword_268695438);
  if (sub_22F1C630C((uint64_t)v347) == 1)
  {
    uint64_t v264 = 0;
  }
  else
  {
    uint64_t v264 = v347[15];
    swift_retain();
  }
  float32x2_t v50 = v282;
  sub_22F1899D0(*(void *)&v274, (uint64_t)&v283, &qword_268695508);
  sub_22F1899D0(a2, (uint64_t)v346, &qword_268695508);
  if (!v346[13])
  {
    sub_22F1899D0(a5, (uint64_t)&v384, &qword_268695508);
    if (v396)
    {
      sub_22F1CEA64(a5);
      uint64_t v74 = (uint64_t)v274;
      sub_22F1CEA64(*(void *)&v274);
      sub_22F1CEA64(a5);
      *(void *)&unsigned long long v91 = v271;
      *((void *)&v91 + 1) = v248;
      unsigned long long v271 = v91;
      *(void *)&unsigned long long v91 = v247;
      long long v72 = v258;
      uint64_t v278 = (uint64_t)v259;
      unint64_t v70 = v257;
      float v276 = v256;
      uint64_t v71 = v254;
      uint64_t v281 = (uint64_t)v255;
      unint64_t v15 = v252;
      float32x2_t v14 = v253;
      *((void *)&v91 + 1) = v249;
      *(_OWORD *)&v270[8] = v91;
      unint64_t v279 = v251;
      float32x2_t v50 = v268;
      float v92 = *(float *)&v250;
    }
    else
    {
      sub_22F1CEA64(a6);
      uint64_t v74 = (uint64_t)v274;
      sub_22F1CEA64(*(void *)&v274);
      *(void *)&unsigned long long v94 = v231;
      *((void *)&v94 + 1) = v221;
      long long v72 = v229;
      uint64_t v278 = v230;
      float32x2_t v50 = v18;
      unint64_t v70 = v228;
      float v276 = v227;
      *(_OWORD *)&v270[8] = v219;
      unsigned long long v271 = v94;
      uint64_t v71 = v225;
      uint64_t v281 = v226;
      unint64_t v15 = v223;
      float32x2_t v14 = v224;
      unint64_t v279 = v222;
      float v92 = v220;
    }
    float v275 = v92;
    uint64_t v73 = (uint64_t)v265;
LABEL_19:
    float32x2_t v282 = v50;
    *((void *)&v266 + 1) = v15;
    float32x2_t v274 = v14;
    sub_22F1899D0(v74, (uint64_t)v332, &qword_268695508);
    float v95 = 0.0;
    if (v332[13]) {
      float v96 = v292;
    }
    else {
      float v96 = 0.0;
    }
    sub_22F1899D0(v273, (uint64_t)v330, &qword_268695508);
    v277 = v72;
    unint64_t v280 = v70;
    uint64_t v272 = v71;
    if (!v330[13]
      || (float v95 = v331, !*(void *)&v291)
      || (*(float32x2_t *)v97.f32 = v263,
          *(int32x2_t *)&v97.u32[2] = v262,
          float32x4_t v98 = vsubq_f32(v97, v288),
          float32x2_t v99 = vsub_f32(v263, *(float32x2_t *)v288.f32),
          (float)(COERCE_FLOAT(vmulq_f32(v98, v98).i32[2]) + vaddv_f32(vmul_f32(v99, v99))) >= 0.000001))
    {
LABEL_31:
      uint64_t v123 = (uint64_t)v283;
      uint64_t v124 = (uint64_t)v284;
      float32x2_t v125 = *(float32x2_t *)v288.f32;
      uint64_t v126 = (uint64_t)v291;
      float v127 = v292;
      long long v265 = (char *)v287;
      *(void *)&unsigned long long v266 = *((void *)&v286 + 1);
      uint64_t v260 = v289;
      uint64_t v261 = *((void *)&v287 + 1);
      int v258 = v290;
      v259 = (void *)*((void *)&v289 + 1);
      *(void *)long long v270 = v288.i64[1];
      if (v291)
      {
        v375[0] = v283;
        v375[1] = v284;
        uint64_t v128 = *((void *)&v285 + 1);
        uint64_t v129 = v285;
        long long v376 = v285;
        uint64_t v130 = v286;
        long long v377 = v286;
        long long v378 = v287;
        float32x4_t v379 = v288;
        long long v380 = v289;
        char v381 = v290 & 1;
        float32x2_t v382 = v291;
        float v383 = v292;
        swift_retain();
        float v131 = WorldPlaneHitTestResult.distanceToCamera(in:)(v269);
        swift_release();
      }
      else
      {
        uint64_t v130 = v286;
        uint64_t v128 = *((void *)&v285 + 1);
        uint64_t v129 = v285;
        float v131 = INFINITY;
      }
      sub_22F1899D0(v273, (uint64_t)v317, &qword_268695508);
      if (*((void *)&v318 + 1))
      {
        long long v324 = v317[4];
        long long v325 = v317[5];
        long long v326 = v318;
        int v327 = v319;
        long long v320 = v317[0];
        long long v321 = v317[1];
        long long v322 = v317[2];
        long long v323 = v317[3];
        float v132 = WorldPlaneHitTestResult.distanceToCamera(in:)(v269);
      }
      else
      {
        float v132 = INFINITY;
      }
      uint64_t v133 = v130;
      if ((float)(v131 - v132) > 0.03)
      {
        if (v282)
        {
          if (v126)
          {
            sub_22F1899D0(v273, (uint64_t)v316, &qword_268695508);
            if (v316[13])
            {
              float32x2_t v134 = vsub_f32(v125, v274);
              int32x2_t v135 = (int32x2_t)vmul_f32(v134, v134);
              float32x2_t v136 = vsub_f32(v263, v274);
              int32x2_t v137 = (int32x2_t)vmul_f32(v136, v136);
              float32x2_t v138 = vsub_f32((float32x2_t)vzip1_s32(v262, *(int32x2_t *)v270), (float32x2_t)vdup_lane_s32(*(int32x2_t *)((char *)&v266 + 8), 0));
              float32x2_t v139 = vadd_f32(vmul_f32(v138, v138), vadd_f32((float32x2_t)vzip1_s32(v137, v135), (float32x2_t)vzip2_s32(v137, v135)));
              uint64_t v140 = v278;
              if (v139.f32[0] < 0.0009
                && (vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v139, 1), v139).u8[0] & 1) != 0)
              {
                uint64_t v141 = v273;
                sub_22F1CEA64(v273);
                swift_release();
                sub_22F1899D0(v141, (uint64_t)&v283, &qword_268695508);
              }
              uint64_t v142 = v272;
              uint64_t v143 = (uint64_t)v282;
              goto LABEL_51;
            }
          }
        }
        if (v95 <= v96)
        {
          uint64_t v150 = *(void *)v270;
          float32x2_t v145 = v265;
          uint64_t v144 = v266;
          uint64_t v147 = v260;
          uint64_t v146 = v261;
          float32x2_t v149 = v258;
          uint64_t v148 = (uint64_t)v259;
        }
        else
        {
          sub_22F1CEA64(v273);
          swift_release();
          uint64_t v124 = v243;
          uint64_t v123 = v244;
          uint64_t v128 = v241;
          uint64_t v129 = v242;
          uint64_t v144 = v239;
          uint64_t v133 = v240;
          uint64_t v146 = v237;
          float32x2_t v145 = v238;
          uint64_t v148 = v235;
          uint64_t v147 = v236;
          uint64_t v126 = v233;
          float32x2_t v149 = v234;
          float v127 = v232;
          uint64_t v150 = (uint64_t)v262;
          float32x2_t v125 = v263;
        }
        float32x2_t v283 = (float32x2_t)v123;
        float32x2_t v284 = (float32x2_t)v124;
        *(void *)&long long v285 = v129;
        *((void *)&v285 + 1) = v128;
        *(void *)&long long v286 = v133;
        *((void *)&v286 + 1) = v144;
        *(void *)&long long v287 = v145;
        *((void *)&v287 + 1) = v146;
        *(float32x2_t *)v288.f32 = v125;
        v288.i64[1] = v150;
        *(void *)&long long v289 = v147;
        *((void *)&v289 + 1) = v148;
        CGPoint v290 = v149;
        float32x2_t v291 = (float32x2_t)v126;
        float v292 = v127;
      }
      goto LABEL_49;
    }
    uint64_t v100 = v264;
    if (v264)
    {
      swift_beginAccess();
      uint64_t v101 = *(void *)(v100 + 16);
      uint64_t v102 = *(os_unfair_lock_s **)(v101 + 24);
      swift_retain();
      swift_retain();
      os_unfair_lock_lock(v102);
      swift_beginAccess();
      id v103 = *(id *)(v101 + 16);
      os_unfair_lock_unlock(v102);
      swift_release();
      swift_release();
      id v104 = objc_msgSend(v103, sel_identifier);

      uint64_t v105 = v245;
      sub_22F223828();

      unsigned int v107 = (void *)v260;
      uint64_t v106 = v261;
      long long v265 = *(char **)(v260 + 32);
      *(void *)&unsigned long long v266 = v260 + 32;
      ((void (*)(uint64_t, char *, uint64_t))v265)(v73, v105, v261);
      float v108 = v107 + 7;
      *(void *)long long v270 = v107[7];
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))v270)(v73, 0, 1, v106);
      uint64_t v109 = (unsigned int (*)(void, void, void))v107[6];
      if (v109(v73, 1, v106) != 1)
      {
        int v258 = v109;
        v259 = v107 + 6;
        uint64_t v110 = v246;
        ((void (*)(char *, uint64_t, uint64_t))v265)(v246, v73, v106);
        uint64_t v111 = v107 + 2;
        v256 = (void (*)(void, void, void))v107[2];
        uint64_t v112 = v215;
        v256(v215, v110, v106);
        uint64_t v113 = 1;
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))v270)(v112, 0, 1, v106);
        float32x2_t v114 = v291;
        uint64_t v115 = v108;
        float v255 = v111;
        if (v291)
        {
          swift_beginAccess();
          uint64_t v116 = *(void *)(*(void *)&v114 + 16);
          id v117 = *(os_unfair_lock_s **)(v116 + 24);
          swift_retain();
          swift_retain();
          os_unfair_lock_lock(v117);
          swift_beginAccess();
          id v118 = *(id *)(v116 + 16);
          os_unfair_lock_unlock(v117);
          swift_release();
          swift_release();
          id v119 = objc_msgSend(v118, sel_identifier);

          uint64_t v120 = v214;
          sub_22F223828();

          uint64_t v113 = 0;
          float32x4_t v121 = v245;
          uint64_t v122 = (uint64_t)v212;
        }
        else
        {
          float32x4_t v121 = v245;
          uint64_t v122 = (uint64_t)v212;
          uint64_t v120 = v214;
        }
        uint64_t v162 = v113;
        uint64_t v163 = v261;
        unint64_t v257 = (unint64_t)v115;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v270)(v120, v162, 1, v261);
        uint64_t v164 = v122 + *(int *)(v218 + 48);
        sub_22F1CED78(v112, v122);
        sub_22F1CED78(v120, v164);
        uint64_t v165 = v258;
        if (v258(v122, 1, v163) == 1)
        {
          sub_22F196338(v120, qword_268695538);
          uint64_t v163 = v261;
          sub_22F196338(v112, qword_268695538);
          if (v165(v164, 1, v163) == 1)
          {
            sub_22F196338(v122, qword_268695538);
            uint64_t v166 = v217;
            v256(v217, v246, v163);
            uint64_t v167 = *(void (**)(char *, uint64_t))(v260 + 8);
            int8x16_t v168 = *(void (**)(uint64_t, void, uint64_t, uint64_t))v270;
            uint64_t v169 = 0x2649FF000;
            v167(v166, v163);
LABEL_86:
            uint64_t v189 = (uint64_t)v213;
            v256(v213, v246, v163);
            uint64_t v190 = 1;
            v168(v189, 0, 1, v163);
            sub_22F1899D0(v273, (uint64_t)v375, &qword_268695508);
            float32x2_t v191 = v382;
            if (v382)
            {
              swift_beginAccess();
              uint64_t v192 = *(void *)(*(void *)&v191 + 16);
              float32x4_t v193 = *(os_unfair_lock_s **)(v192 + 24);
              swift_retain();
              os_unfair_lock_lock(v193);
              swift_beginAccess();
              id v194 = *(id *)(v192 + 16);
              os_unfair_lock_unlock(v193);
              swift_release();
              id v195 = [v194 *(SEL *)(v169 + 3536)];

              uint64_t v189 = (uint64_t)v213;
              uint64_t v196 = v211;
              sub_22F223828();

              uint64_t v190 = 0;
            }
            else
            {
              uint64_t v196 = v211;
            }
            uint64_t v197 = v261;
            v168(v196, v190, 1, v261);
            uint64_t v198 = v209;
            uint64_t v199 = v209 + *(int *)(v218 + 48);
            sub_22F1CED78(v189, v209);
            sub_22F1CED78(v196, v199);
            if (v165(v198, 1, v197) == 1)
            {
              sub_22F196338(v196, qword_268695538);
              sub_22F196338(v189, qword_268695538);
              v167(v246, v197);
              if (v165(v199, 1, v197) == 1)
              {
                sub_22F196338(v198, qword_268695538);
LABEL_97:
                uint64_t v203 = v273;
                sub_22F1CEA64(v273);
                swift_release();
                sub_22F1899D0(v203, (uint64_t)&v283, &qword_268695508);
                goto LABEL_49;
              }
              goto LABEL_95;
            }
            uint64_t v200 = v206;
            sub_22F1CED78(v198, v206);
            if (v165(v199, 1, v197) == 1)
            {
              sub_22F196338(v211, qword_268695538);
              sub_22F196338(v189, qword_268695538);
              v167(v246, v197);
              v167((char *)v200, v197);
LABEL_95:
              sub_22F196338(v198, &qword_268695530);
              goto LABEL_49;
            }
            float32x4_t v201 = v245;
            ((void (*)(char *, uint64_t, uint64_t))v265)(v245, v199, v197);
            sub_22F1CEDE0(&qword_268694C78, MEMORY[0x263F07508]);
            char v202 = sub_22F223A68();
            v167(v201, v197);
            sub_22F196338(v211, qword_268695538);
            sub_22F196338(v189, qword_268695538);
            v167(v246, v197);
            v167((char *)v200, v197);
            sub_22F196338(v198, qword_268695538);
            if (v202) {
              goto LABEL_97;
            }
LABEL_49:
            uint64_t v143 = (uint64_t)v282;
            if (!*(void *)&v282) {
              goto LABEL_62;
            }
            uint64_t v140 = v278;
            uint64_t v142 = v272;
LABEL_51:
            isCGFloat a = v269.super.isa;
            float32x2_t v152 = *(float32x2_t *)((char *)&v271 + 8);
            uint64_t v153 = (unsigned int (*)(void, void, void))(v279 & 1);
            float32x2_t v154 = (float32x2_t)v271;
            unsigned long long v352 = v271;
            uint64_t v278 = v140;
            uint64_t v353 = v140;
            v354 = v277;
            unint64_t v355 = v280;
            v356 = v276;
            uint64_t v357 = v281;
            uint64_t v272 = v142;
            uint64_t v358 = v142;
            float32x2_t v359 = v274;
            uint64_t v360 = *((void *)&v266 + 1);
            long long v361 = *(_OWORD *)&v270[8];
            char v362 = v279 & 1;
            uint64_t v363 = v143;
            float v364 = v275;
            if (v291)
            {
              float32x2_t v365 = v283;
              float32x2_t v366 = v284;
              long long v367 = v285;
              long long v368 = v286;
              long long v369 = v287;
              float32x4_t v370 = v288;
              long long v371 = v289;
              char v372 = v290 & 1;
              float32x2_t v373 = v291;
              float v374 = v292;
              swift_retain();
              swift_retain();
              float v155 = WorldPlaneHitTestResult.distanceToCamera(in:)((ARFrame)isa);
              swift_release();
            }
            else
            {
              swift_retain();
              float v155 = INFINITY;
            }
            long long v156 = *(_OWORD *)&v270[8];
            float v157 = WorldPlaneHitTestResult.distanceToCamera(in:)((ARFrame)isa);
            swift_retain();
            float v158 = WorldPlane.confidence.getter();
            swift_release_n();
            swift_release();
            float v159 = (float)(1.0 - v158) * (float)((float)(1.0 - v158) * 0.015);
            if (v159 < (float)(v155 - v157))
            {
              swift_release();
              uint64_t result = swift_release();
              float32x2_t v283 = v154;
              float32x2_t v284 = v152;
              *(void *)&long long v285 = v278;
              *((void *)&v285 + 1) = v277;
              *(void *)&long long v286 = v280;
              *((void *)&v286 + 1) = v276;
              *(void *)&long long v287 = v281;
              *((void *)&v287 + 1) = v272;
              *(float32x2_t *)v288.f32 = v274;
              v288.i64[1] = *((void *)&v266 + 1);
              long long v289 = v156;
              CGPoint v290 = v153;
              float32x2_t v291 = (float32x2_t)v143;
LABEL_57:
              float v292 = v275;
LABEL_64:
              float32x2_t v85 = v283;
              float32x2_t v87 = v284;
              float32x2_t v79 = *(float32x2_t *)((char *)&v285 + 8);
              uint64_t v78 = v285;
              float32x4_t v90 = (void (*)(void, void, void))*((void *)&v286 + 1);
              float32x2_t v76 = (float32x2_t)v286;
              uint64_t v75 = *((void *)&v287 + 1);
              float32x2_t v89 = (float32x2_t)v287;
              unint64_t v15 = v288.u64[1];
              float32x2_t v14 = *(float32x2_t *)v288.f32;
              float32x2_t v86 = *(float32x2_t *)((char *)&v289 + 8);
              float32x2_t v84 = (float32x2_t)v289;
              float32x4_t v88 = v290;
              float32x2_t v50 = v291;
              float v80 = v292;
              goto LABEL_65;
            }
            if ((float)(v157 + -0.0005) < (float)(v155 - v159))
            {
              if (v264)
              {
                int v160 = *(unsigned __int8 *)(v264 + 48);
                swift_release();
                if (v160 == 3)
                {
                  uint64_t result = swift_release();
                  float32x2_t v283 = v154;
                  float32x2_t v284 = v152;
                  *(void *)&long long v285 = v278;
                  *((void *)&v285 + 1) = v277;
                  *(void *)&long long v286 = v280;
                  *((void *)&v286 + 1) = v276;
                  *(void *)&long long v287 = v281;
                  *((void *)&v287 + 1) = v272;
                  *(float32x2_t *)v288.f32 = v274;
                  v288.i64[1] = *((void *)&v266 + 1);
                  long long v289 = v156;
                  CGPoint v290 = v153;
                  float32x2_t v291 = v282;
                  goto LABEL_57;
                }
              }
LABEL_63:
              uint64_t result = swift_release();
              goto LABEL_64;
            }
LABEL_62:
            swift_release();
            goto LABEL_63;
          }
        }
        else
        {
          uint64_t v170 = v207;
          sub_22F1CED78(v122, v207);
          if (v165(v164, 1, v163) != 1)
          {
            ((void (*)(char *, uint64_t, uint64_t))v265)(v121, v164, v163);
            sub_22F1CEDE0(&qword_268694C78, MEMORY[0x263F07508]);
            LODWORD(v254) = sub_22F223A68();
            uint64_t v167 = *(void (**)(char *, uint64_t))(v260 + 8);
            v167(v121, v163);
            sub_22F196338(v214, qword_268695538);
            sub_22F196338(v215, qword_268695538);
            v167((char *)v170, v261);
            uint64_t v163 = v261;
            sub_22F196338(v122, qword_268695538);
            float32x2_t v171 = v217;
            float32x2_t v172 = (void (*)(uint64_t, char *, uint64_t))v256;
            v256(v217, v246, v163);
            uint64_t v165 = v258;
            int8x16_t v168 = *(void (**)(uint64_t, void, uint64_t, uint64_t))v270;
            uint64_t v169 = (uint64_t)&unk_2649FF000;
            if (v254)
            {
              v167(v171, v163);
              goto LABEL_86;
            }
LABEL_74:
            uint64_t v173 = v216;
            v172(v216, v171, v163);
            uint64_t v174 = 1;
            v168(v173, 0, 1, v163);
            sub_22F1899D0(v273, (uint64_t)&v328, &qword_268695508);
            uint64_t v175 = v329;
            if (v329)
            {
              swift_beginAccess();
              uint64_t v176 = *(void *)(v175 + 16);
              float32x2_t v177 = *(os_unfair_lock_s **)(v176 + 24);
              swift_retain();
              os_unfair_lock_lock(v177);
              swift_beginAccess();
              id v178 = *(id *)(v176 + 16);
              os_unfair_lock_unlock(v177);
              swift_release();
              id v179 = [v178 (SEL)(v169 + 2200)];

              uint64_t v180 = v210;
              sub_22F223828();

              uint64_t v174 = 0;
              uint64_t v181 = v260;
              uint64_t v163 = v261;
              uint64_t v182 = (uint64_t)v208;
            }
            else
            {
              uint64_t v181 = v260;
              uint64_t v163 = v261;
              uint64_t v182 = (uint64_t)v208;
              uint64_t v180 = v210;
            }
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v270)(v180, v174, 1, v163);
            uint64_t v183 = v182 + *(int *)(v218 + 48);
            uint64_t v184 = v216;
            sub_22F1CED78(v216, v182);
            sub_22F1CED78(v180, v183);
            float32x2_t v185 = v258;
            if (v258(v182, 1, v163) == 1)
            {
              sub_22F196338(v180, qword_268695538);
              uint64_t v163 = v261;
              sub_22F196338(v184, qword_268695538);
              uint64_t v167 = *(void (**)(char *, uint64_t))(v181 + 8);
              v167(v217, v163);
              if (v185(v183, 1, v163) == 1)
              {
                uint64_t v165 = v185;
                sub_22F196338(v182, qword_268695538);
                int8x16_t v168 = *(void (**)(uint64_t, void, uint64_t, uint64_t))v270;
                uint64_t v169 = 0x2649FF000;
                goto LABEL_86;
              }
            }
            else
            {
              uint64_t v186 = v205;
              sub_22F1CED78(v182, v205);
              if (v185(v183, 1, v163) != 1)
              {
                uint64_t v187 = v245;
                ((void (*)(char *, uint64_t, uint64_t))v265)(v245, v183, v163);
                sub_22F1CEDE0(&qword_268694C78, MEMORY[0x263F07508]);
                char v188 = sub_22F223A68();
                uint64_t v167 = *(void (**)(char *, uint64_t))(v260 + 8);
                v167(v187, v163);
                sub_22F196338(v210, qword_268695538);
                sub_22F196338(v216, qword_268695538);
                v167(v217, v261);
                v167((char *)v186, v261);
                uint64_t v163 = v261;
                sub_22F196338(v182, qword_268695538);
                uint64_t v165 = v185;
                int8x16_t v168 = *(void (**)(uint64_t, void, uint64_t, uint64_t))v270;
                uint64_t v169 = (uint64_t)&unk_2649FF000;
                if (v188) {
                  goto LABEL_86;
                }
                goto LABEL_88;
              }
              sub_22F196338(v210, qword_268695538);
              sub_22F196338(v216, qword_268695538);
              uint64_t v167 = *(void (**)(char *, uint64_t))(v181 + 8);
              v167(v217, v163);
              v167((char *)v186, v163);
            }
            sub_22F196338(v182, &qword_268695530);
LABEL_88:
            v167(v246, v163);
            goto LABEL_31;
          }
          sub_22F196338(v214, qword_268695538);
          sub_22F196338(v215, qword_268695538);
          (*(void (**)(uint64_t, uint64_t))(v260 + 8))(v170, v163);
        }
        sub_22F196338(v122, &qword_268695530);
        float32x2_t v171 = v217;
        float32x2_t v172 = (void (*)(uint64_t, char *, uint64_t))v256;
        v256(v217, v246, v163);
        int8x16_t v168 = *(void (**)(uint64_t, void, uint64_t, uint64_t))v270;
        uint64_t v169 = 0x1F6A8A000;
        goto LABEL_74;
      }
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v260 + 56))(v73, 1, 1, v261);
    }
    sub_22F196338(v73, qword_268695538);
    goto LABEL_31;
  }
  uint64_t v51 = v13;
  unint64_t v52 = *((void *)&v266 + 1);
  unint64_t v53 = v266;
  unsigned long long v384 = v266;
  long long v54 = v277;
  uint64_t v385 = v278;
  v386 = v277;
  unint64_t v387 = v280;
  v388 = v276;
  uint64_t v272 = v51;
  uint64_t v389 = v281;
  uint64_t v390 = v51;
  float32x2_t v391 = v14;
  unint64_t v392 = v15;
  uint64_t v55 = a5;
  uint64_t v56 = *(void *)v270;
  uint64_t v57 = *(void *)&v270[8];
  uint64_t v393 = *(void *)v270;
  uint64_t v394 = *(void *)&v270[8];
  char v395 = v279 & 1;
  float32x2_t v396 = v50;
  float v397 = v275;
  v259 = (void *)v55;
  sub_22F1899D0(v55, (uint64_t)&v333, &qword_268695508);
  if (!*((void *)&v339 + 1))
  {
    sub_22F1CEA64(a2);
    sub_22F1CEA64(a2);
    uint64_t v74 = (uint64_t)v274;
    sub_22F1CEA64(*(void *)&v274);
    *(void *)&long long v93 = v56;
    *((void *)&v93 + 1) = v57;
    *(_OWORD *)&v270[8] = v93;
    unsigned long long v271 = __PAIR128__(v52, v53);
    float32x2_t v268 = v50;
    uint64_t v73 = (uint64_t)v265;
    uint64_t v71 = v272;
    long long v72 = v54;
    unint64_t v70 = v280;
    goto LABEL_19;
  }
  int64x2_t v59 = vdupq_n_s64(v15);
  long long v342 = v337;
  long long v343 = v338;
  long long v344 = v339;
  float v60 = v340;
  float v345 = v340;
  v341[0] = v333;
  v341[1] = v334;
  v341[2] = v335;
  v341[3] = v336;
  float32x2_t v61 = vsub_f32(v14, *(float32x2_t *)&v337);
  if ((float)((float)((float)(*(float *)&v59.i32[2] - *((float *)&v342 + 2))
                     * (float)(*(float *)&v59.i32[2] - *((float *)&v342 + 2)))
             + vaddv_f32(vmul_f32(v61, v61))) > 0.0009)
  {
    float32x2_t v268 = *(float32x2_t *)((char *)&v339 + 8);
    *(void *)&unsigned long long v58 = v333;
    unsigned long long v271 = v58;
    float32x4_t v62 = (unsigned int (*)(void, void, void))*((void *)&v334 + 1);
    float v255 = (void *)v335;
    v256 = (void (*)(void, void, void))v334;
    uint64_t v63 = (void (*)(void, void, void))*((void *)&v335 + 1);
    float32x2_t v253 = (float32x2_t)v337;
    uint64_t v254 = v336;
    unint64_t v257 = *((void *)&v337 + 1);
    int v258 = (unsigned int (*)(void, void, void))*((void *)&v336 + 1);
    uint64_t v249 = v338;
    uint64_t v250 = *((void *)&v333 + 1);
    unint64_t v251 = *((void *)&v338 + 1);
    unint64_t v252 = v339;
    sub_22F1CEA64(a2);
    sub_22F1CEA64(a2);
    sub_22F1CEA64(*(void *)&v274);
    uint64_t v64 = (uint64_t)v259;
    sub_22F1CEA64((uint64_t)v259);
    Class v65 = v269.super.isa;
    float v66 = WorldPlaneHitTestResult.distanceSquaredToCamera(in:)(v269);
    float v67 = WorldPlaneHitTestResult.distanceSquaredToCamera(in:)((ARFrame)v65);
    sub_22F1CEA38(a2);
    if (v66 >= v67)
    {
      sub_22F1CEA38(v64);
      float32x2_t v50 = v282;
      swift_retain();
      *(_OWORD *)&v270[8] = *(_OWORD *)v270;
      unsigned long long v271 = v266;
      float32x2_t v268 = v50;
      long long v72 = v277;
      unint64_t v70 = v280;
      uint64_t v73 = (uint64_t)v265;
      uint64_t v74 = (uint64_t)v274;
      uint64_t v71 = v272;
    }
    else
    {
      sub_22F1CEA38(a2);
      sub_22F1CEA64((uint64_t)v341);
      *(void *)&unsigned long long v68 = v271;
      *((void *)&v68 + 1) = v250;
      unsigned long long v271 = v68;
      *(void *)&unsigned long long v68 = v249;
      unint64_t v15 = v257;
      uint64_t v278 = (uint64_t)v256;
      uint64_t v69 = v62;
      unint64_t v70 = (unint64_t)v255;
      float v276 = v63;
      uint64_t v281 = v254;
      uint64_t v71 = (uint64_t)v258;
      *((void *)&v68 + 1) = v251;
      *(_OWORD *)&v270[8] = v68;
      float32x2_t v14 = v253;
      unint64_t v279 = v252;
      float32x2_t v50 = v268;
      float v275 = v60;
      long long v72 = v69;
      uint64_t v73 = (uint64_t)v265;
      uint64_t v74 = (uint64_t)v274;
    }
    goto LABEL_19;
  }
  swift_retain();
  uint64_t result = swift_release();
  float32x2_t v79 = (float32x2_t)v277;
  float32x2_t v76 = (float32x2_t)v280;
  float32x4_t v90 = v276;
  float32x2_t v89 = (float32x2_t)v281;
  float v80 = v275;
  float32x4_t v88 = (unsigned int (*)(void, void, void))v279;
  float32x2_t v87 = *(float32x2_t *)((char *)&v266 + 8);
  float32x2_t v86 = *(float32x2_t *)&v270[8];
  float32x2_t v85 = (float32x2_t)v266;
  uint64_t v75 = v272;
  float32x2_t v84 = *(float32x2_t *)v270;
  uint64_t v78 = v278;
LABEL_65:
  float32x2_t v161 = v267;
  *long long v267 = v85;
  v161[1] = v87;
  v161[2] = (float32x2_t)v78;
  v161[3] = v79;
  v161[4] = v76;
  v161[5] = (float32x2_t)v90;
  v161[6] = v89;
  v161[7] = (float32x2_t)v75;
  v161[8] = v14;
  v161[9] = (float32x2_t)v15;
  v161[10] = v84;
  v161[11] = v86;
  v161[12] = (float32x2_t)v88;
  v161[13] = v50;
  v161[14].f32[0] = v80;
  return result;
}

unint64_t sub_22F1CD814(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  HIDWORD(v30) = a2;
  if (a3 == 33)
  {
    unint64_t result = (*(uint64_t (**)(void))(v6 + 120))();
  }
  else
  {
    unint64_t result = (*(uint64_t (**)(uint64_t))(v6 + 104))(a3);
    if (!result) {
      return result;
    }
  }
  unint64_t v12 = result;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = sub_22F2245C8();
    unint64_t result = swift_bridgeObjectRelease();
    if (v13) {
      goto LABEL_6;
    }
LABEL_27:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v13 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v13) {
    goto LABEL_27;
  }
LABEL_6:
  if (v13 >= 1)
  {
    uint64_t v31 = 0;
    LODWORD(v30) = 0;
    uint64_t v14 = 0;
    v15.i64[0] = a4;
    v15.i64[1] = a5;
    float32x4_t v32 = v15;
    float v16 = *(float *)&a4;
    float v17 = 3.4028e38;
    while (1)
    {
      if ((v12 & 0xC000000000000001) != 0)
      {
        id v18 = (id)MEMORY[0x230FB2E90](v14, v12);
        if ((a6 & 1) == 0) {
          goto LABEL_14;
        }
      }
      else
      {
        id v18 = *(id *)(v12 + 8 * v14 + 32);
        if ((a6 & 1) == 0)
        {
LABEL_14:
          objc_msgSend(v18, sel_transform, v30);
          float v20 = v16 * v19.f32[0];
          float32x4_t v21 = vmulq_f32(v19, v32);
          if (fabsf(v21.f32[2] + (float)(v20 + v21.f32[1])) < 0.866) {
            goto LABEL_24;
          }
        }
      }
      type metadata accessor for WorldPlane();
      uint64_t v22 = swift_allocObject();
      *(_OWORD *)(v22 + 24) = xmmword_22F228C70;
      *(void *)(v22 + 40) = 0x3F5DB22D40000000;
      swift_beginAccess();
      __swift_instantiateConcreteTypeFromMangledName(&qword_268695518);
      uint64_t v23 = swift_allocObject();
      id v18 = v18;
      uint64_t v24 = (_DWORD *)swift_slowAlloc();
      *uint64_t v24 = 0;
      *(void *)(v23 + 16) = v18;
      *(void *)(v23 + 24) = v24;
      *(void *)(v22 + 16) = v23;
      swift_endAccess();
      *(unsigned char *)(v22 + 48) = 0;
      *(void *)(v22 + 52) = 0x3F80000000000000;
      memset(v39, 0, 64);
      v39[64] = 1;
      if (qword_2686943C0 != -1) {
        swift_once();
      }
      WorldPlane.refresh(anchor:camera:uncertaintyPoint:)(v18, (uint64_t)v39, (float32x4_t)static SIMD3<>.zero);
      id v25 = objc_msgSend(a1, sel_camera);
      __n128 v26 = _sSo7ARFrameC17MeasureFoundationE9getHitRay11cameraPoint0G00G18CorrectedTransforms5SIMD3VySfG6origin_AJ9directionts5SIMD2VySfG_So8ARCameraCSo13simd_float4x4aSgtFZ_0(v25, (uint64_t)v39);
      float32x4_t v33 = v27;
      float32x4_t v34 = (float32x4_t)v26;

      WorldPlane.hitTest(hitRay:withPlaneType:)(7, (uint64_t)v35, v34, v33);
      sub_22F1899D0((uint64_t)v35, (uint64_t)v36, &qword_268695508);
      if (v38)
      {
        float32x4_t v28 = v37;
        v28.i32[3] = 0;
        unint64_t v29 = WorldPlane.distanceToEdge(point:)(v28);
        sub_22F1CEA38((uint64_t)v35);

        if ((v29 & 0x100000000) != 0 || v17 <= *(float *)&v29 || *(float *)&v29 < 0.0 && (v30 & 0x100000000) != 0)
        {
          swift_release();
        }
        else
        {
          swift_release();
          float v17 = *(float *)&v29;
          uint64_t v31 = v22;
          LODWORD(v30) = v29;
        }
        goto LABEL_9;
      }
      swift_release();
LABEL_24:

LABEL_9:
      if (v13 == ++v14)
      {
        swift_bridgeObjectRelease();
        return v31;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t PlaneSelector.deinit()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_22F196338(v0 + 184, &qword_2686954C8);
  swift_release();
  return v0;
}

uint64_t PlaneSelector.__deallocating_deinit()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_22F196338(v0 + 184, &qword_2686954C8);
  swift_release();
  return swift_deallocClassInstance();
}

void *PlaneSelector.DebugOptions.showHitPoints.unsafeMutableAddressor()
{
  return &static PlaneSelector.DebugOptions.showHitPoints;
}

uint64_t static PlaneSelector.DebugOptions.showHitPoints.getter()
{
  return 1;
}

void *PlaneSelector.DebugOptions.showHitRay.unsafeMutableAddressor()
{
  return &static PlaneSelector.DebugOptions.showHitRay;
}

uint64_t static PlaneSelector.DebugOptions.showHitRay.getter()
{
  return 2;
}

unint64_t sub_22F1CDC8C()
{
  unint64_t result = sub_22F185C98((uint64_t)&unk_26E2919C0);
  static PlaneSelector.DebugOptions.keyForFeature = result;
  return result;
}

uint64_t *PlaneSelector.DebugOptions.keyForFeature.unsafeMutableAddressor()
{
  if (qword_268694458 != -1) {
    swift_once();
  }
  return &static PlaneSelector.DebugOptions.keyForFeature;
}

uint64_t static PlaneSelector.DebugOptions.keyForFeature.getter()
{
  return sub_22F188A6C(&qword_268694458);
}

uint64_t sub_22F1CDD24()
{
  if (qword_268694458 != -1) {
    swift_once();
  }
  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = sub_22F1E6DB8(v0);
  uint64_t result = swift_bridgeObjectRelease();
  static PlaneSelector.DebugOptions.keys = v1;
  return result;
}

uint64_t *PlaneSelector.DebugOptions.keys.unsafeMutableAddressor()
{
  if (qword_268694460 != -1) {
    swift_once();
  }
  return &static PlaneSelector.DebugOptions.keys;
}

uint64_t static PlaneSelector.DebugOptions.keys.getter()
{
  return sub_22F188A6C(&qword_268694460);
}

uint64_t sub_22F1CDE08()
{
  if (qword_268694458 != -1) {
    swift_once();
  }
  uint64_t result = sub_22F1E2D28(static PlaneSelector.DebugOptions.keyForFeature);
  static PlaneSelector.DebugOptions.default = result;
  return result;
}

uint64_t static PlaneSelector.DebugOptions.default.getter()
{
  if (qword_268694468 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return static PlaneSelector.DebugOptions.default;
}

uint64_t static PlaneSelector.DebugOptions.default.setter(uint64_t a1)
{
  if (qword_268694468 != -1) {
    swift_once();
  }
  uint64_t result = swift_beginAccess();
  static PlaneSelector.DebugOptions.default = a1;
  return result;
}

uint64_t (*static PlaneSelector.DebugOptions.default.modify())()
{
  if (qword_268694468 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t PlaneSelector.PlaneSelectionStats.adCount.getter()
{
  return *(void *)v0;
}

uint64_t PlaneSelector.PlaneSelectionStats.adCount.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*PlaneSelector.PlaneSelectionStats.adCount.modify())()
{
  return nullsub_1;
}

uint64_t PlaneSelector.PlaneSelectionStats.arkitCount.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t PlaneSelector.PlaneSelectionStats.arkitCount.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*PlaneSelector.PlaneSelectionStats.arkitCount.modify())()
{
  return nullsub_1;
}

uint64_t PlaneSelector.PlaneSelectionStats.localPlaneCount.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t PlaneSelector.PlaneSelectionStats.localPlaneCount.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t (*PlaneSelector.PlaneSelectionStats.localPlaneCount.modify())()
{
  return nullsub_1;
}

uint64_t PlaneSelector.PlaneSelectionStats.patchCount.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t PlaneSelector.PlaneSelectionStats.patchCount.setter(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

uint64_t (*PlaneSelector.PlaneSelectionStats.patchCount.modify())()
{
  return nullsub_1;
}

uint64_t PlaneSelector.PlaneSelectionStats.inferredCount.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t PlaneSelector.PlaneSelectionStats.inferredCount.setter(uint64_t result)
{
  *(void *)(v1 + 32) = result;
  return result;
}

uint64_t (*PlaneSelector.PlaneSelectionStats.inferredCount.modify())()
{
  return nullsub_1;
}

uint64_t PlaneSelector.PlaneSelectionStats.fallbackCount.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t PlaneSelector.PlaneSelectionStats.fallbackCount.setter(uint64_t result)
{
  *(void *)(v1 + 40) = result;
  return result;
}

uint64_t (*PlaneSelector.PlaneSelectionStats.fallbackCount.modify())()
{
  return nullsub_1;
}

uint64_t PlaneSelector.PlaneSelectionStats.prevCount.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t PlaneSelector.PlaneSelectionStats.prevCount.setter(uint64_t result)
{
  *(void *)(v1 + 48) = result;
  return result;
}

uint64_t (*PlaneSelector.PlaneSelectionStats.prevCount.modify())()
{
  return nullsub_1;
}

uint64_t PlaneSelector.PlaneSelectionStats.totalCount.getter()
{
  return *(void *)(v0 + 56);
}

uint64_t PlaneSelector.PlaneSelectionStats.totalCount.setter(uint64_t result)
{
  *(void *)(v1 + 56) = result;
  return result;
}

uint64_t (*PlaneSelector.PlaneSelectionStats.totalCount.modify())()
{
  return nullsub_1;
}

uint64_t sub_22F1CE154(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + 224);
  uint64_t v3 = (os_unfair_lock_s *)v2[10];
  swift_retain();
  os_unfair_lock_lock(v3);
  swift_beginAccess();
  uint64_t v4 = v2[2];
  uint64_t v5 = v2[3];
  uint64_t v6 = v2[4];
  uint64_t v7 = v2[5];
  uint64_t v8 = v2[6];
  uint64_t v9 = v2[7];
  uint64_t v11 = v2[8];
  uint64_t v10 = v2[9];
  os_unfair_lock_unlock(v3);
  BOOL v12 = __OFADD__(v10, 1);
  uint64_t v13 = v10 + 1;
  if (v12)
  {
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    JUMPOUT(0x22F1CE544);
  }
  os_unfair_lock_lock(v3);
  CVPixelBufferRef v2[2] = v4;
  v2[3] = v5;
  v2[4] = v6;
  v2[5] = v7;
  v2[6] = v8;
  v2[7] = v9;
  v2[8] = v11;
  v2[9] = v13;
  os_unfair_lock_unlock(v3);
  swift_release();
  switch(*(unsigned char *)(*(void *)(a1 + 104) + 48))
  {
    case 1:
      uint64_t v14 = *(void **)(v61 + 224);
      float32x4_t v15 = (os_unfair_lock_s *)v14[10];
      swift_retain();
      os_unfair_lock_lock(v15);
      swift_beginAccess();
      uint64_t v25 = v14[2];
      uint64_t v26 = v14[3];
      uint64_t v27 = v14[4];
      uint64_t v28 = v14[5];
      uint64_t v29 = v14[6];
      uint64_t v21 = v14[7];
      uint64_t v22 = v14[8];
      uint64_t v23 = v14[9];
      os_unfair_lock_unlock(v15);
      BOOL v12 = __OFADD__(v29, 1);
      uint64_t v30 = v29 + 1;
      if (v12) {
        goto LABEL_24;
      }
      os_unfair_lock_lock(v15);
      v14[2] = v25;
      v14[3] = v26;
      void v14[4] = v27;
      v14[5] = v28;
      v14[6] = v30;
      goto LABEL_20;
    case 2:
      uint64_t v14 = *(void **)(v61 + 224);
      float32x4_t v15 = (os_unfair_lock_s *)v14[10];
      swift_retain();
      os_unfair_lock_lock(v15);
      swift_beginAccess();
      uint64_t v31 = v14[2];
      uint64_t v32 = v14[3];
      uint64_t v33 = v14[4];
      uint64_t v34 = v14[5];
      uint64_t v35 = v14[6];
      uint64_t v36 = v14[7];
      uint64_t v37 = v14[8];
      uint64_t v23 = v14[9];
      os_unfair_lock_unlock(v15);
      BOOL v12 = __OFADD__(v36, 1);
      uint64_t v38 = v36 + 1;
      if (v12) {
        goto LABEL_25;
      }
      os_unfair_lock_lock(v15);
      v14[2] = v31;
      v14[3] = v32;
      void v14[4] = v33;
      v14[5] = v34;
      v14[6] = v35;
      v14[7] = v38;
      v14[8] = v37;
      goto LABEL_21;
    case 3:
      uint64_t v14 = *(void **)(v61 + 224);
      float32x4_t v15 = (os_unfair_lock_s *)v14[10];
      swift_retain();
      os_unfair_lock_lock(v15);
      swift_beginAccess();
      uint64_t v39 = v14[2];
      uint64_t v40 = v14[3];
      uint64_t v41 = v14[4];
      uint64_t v19 = v14[5];
      uint64_t v20 = v14[6];
      uint64_t v21 = v14[7];
      uint64_t v22 = v14[8];
      uint64_t v23 = v14[9];
      os_unfair_lock_unlock(v15);
      BOOL v12 = __OFADD__(v41, 1);
      uint64_t v42 = v41 + 1;
      if (v12) {
        goto LABEL_26;
      }
      os_unfair_lock_lock(v15);
      v14[2] = v39;
      v14[3] = v40;
      void v14[4] = v42;
      goto LABEL_18;
    case 4:
      uint64_t v14 = *(void **)(v61 + 224);
      float32x4_t v15 = (os_unfair_lock_s *)v14[10];
      swift_retain();
      os_unfair_lock_lock(v15);
      swift_beginAccess();
      uint64_t v43 = v14[2];
      uint64_t v44 = v14[3];
      uint64_t v45 = v14[4];
      uint64_t v46 = v14[5];
      uint64_t v47 = v14[6];
      uint64_t v48 = v14[7];
      uint64_t v49 = v14[8];
      uint64_t v23 = v14[9];
      os_unfair_lock_unlock(v15);
      BOOL v12 = __OFADD__(v49, 1);
      uint64_t v50 = v49 + 1;
      if (v12) {
        goto LABEL_27;
      }
      os_unfair_lock_lock(v15);
      v14[2] = v43;
      v14[3] = v44;
      void v14[4] = v45;
      v14[5] = v46;
      v14[6] = v47;
      v14[7] = v48;
      v14[8] = v50;
      goto LABEL_21;
    case 5:
      uint64_t v14 = *(void **)(v61 + 224);
      float32x4_t v15 = (os_unfair_lock_s *)v14[10];
      swift_retain();
      os_unfair_lock_lock(v15);
      swift_beginAccess();
      uint64_t v51 = v14[2];
      uint64_t v52 = v14[3];
      uint64_t v53 = v14[4];
      uint64_t v54 = v14[5];
      uint64_t v20 = v14[6];
      uint64_t v21 = v14[7];
      uint64_t v22 = v14[8];
      uint64_t v23 = v14[9];
      os_unfair_lock_unlock(v15);
      BOOL v12 = __OFADD__(v54, 1);
      uint64_t v55 = v54 + 1;
      if (v12) {
        goto LABEL_28;
      }
      os_unfair_lock_lock(v15);
      v14[2] = v51;
      v14[3] = v52;
      void v14[4] = v53;
      v14[5] = v55;
      goto LABEL_19;
    case 6:
      uint64_t v14 = *(void **)(v61 + 224);
      float32x4_t v15 = (os_unfair_lock_s *)v14[10];
      swift_retain();
      os_unfair_lock_lock(v15);
      swift_beginAccess();
      uint64_t v57 = v14[2];
      uint64_t v56 = v14[3];
      uint64_t v18 = v14[4];
      uint64_t v19 = v14[5];
      uint64_t v20 = v14[6];
      uint64_t v21 = v14[7];
      uint64_t v22 = v14[8];
      uint64_t v23 = v14[9];
      os_unfair_lock_unlock(v15);
      BOOL v12 = __OFADD__(v57, 1);
      uint64_t v58 = v57 + 1;
      if (v12) {
        goto LABEL_29;
      }
      os_unfair_lock_lock(v15);
      v14[2] = v58;
      v14[3] = v56;
      goto LABEL_17;
    default:
      uint64_t v14 = *(void **)(v61 + 224);
      float32x4_t v15 = (os_unfair_lock_s *)v14[10];
      swift_retain();
      os_unfair_lock_lock(v15);
      swift_beginAccess();
      uint64_t v16 = v14[2];
      uint64_t v17 = v14[3];
      uint64_t v18 = v14[4];
      uint64_t v19 = v14[5];
      uint64_t v20 = v14[6];
      uint64_t v21 = v14[7];
      uint64_t v22 = v14[8];
      uint64_t v23 = v14[9];
      os_unfair_lock_unlock(v15);
      BOOL v12 = __OFADD__(v17, 1);
      uint64_t v24 = v17 + 1;
      if (v12) {
        goto LABEL_23;
      }
      os_unfair_lock_lock(v15);
      v14[2] = v16;
      v14[3] = v24;
LABEL_17:
      void v14[4] = v18;
LABEL_18:
      v14[5] = v19;
LABEL_19:
      v14[6] = v20;
LABEL_20:
      v14[7] = v21;
      v14[8] = v22;
LABEL_21:
      v14[9] = v23;
      os_unfair_lock_unlock(v15);
      return swift_release();
  }
}

uint64_t sub_22F1CE560(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_22F1CE154(a2);
    return swift_release();
  }
  return result;
}

unint64_t sub_22F1CE5C4()
{
  unint64_t result = qword_2686954D0;
  if (!qword_2686954D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2686954D0);
  }
  return result;
}

unint64_t sub_22F1CE61C()
{
  unint64_t result = qword_2686954D8;
  if (!qword_2686954D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2686954D8);
  }
  return result;
}

unint64_t sub_22F1CE674()
{
  unint64_t result = qword_2686954E0;
  if (!qword_2686954E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2686954E0);
  }
  return result;
}

unint64_t sub_22F1CE6CC()
{
  unint64_t result = qword_2686954E8;
  if (!qword_2686954E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2686954E8);
  }
  return result;
}

unint64_t sub_22F1CE724()
{
  unint64_t result = qword_2686954F0;
  if (!qword_2686954F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2686954F0);
  }
  return result;
}

unint64_t sub_22F1CE77C()
{
  unint64_t result = qword_2686954F8;
  if (!qword_2686954F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2686954F8);
  }
  return result;
}

uint64_t type metadata accessor for PlaneSelector()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for PlaneSelector.PatchTrackingMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22F1CE8C8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PlaneSelector.PatchTrackingMode()
{
  return &type metadata for PlaneSelector.PatchTrackingMode;
}

unsigned char *storeEnumTagSinglePayload for PlaneSelector.ADTestMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22F1CE9CCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PlaneSelector.ADTestMode()
{
  return &type metadata for PlaneSelector.ADTestMode;
}

ValueMetadata *type metadata accessor for PlaneSelector.DebugOptions()
{
  return &type metadata for PlaneSelector.DebugOptions;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PlaneSelector.PlaneSelectionStats()
{
  return &type metadata for PlaneSelector.PlaneSelectionStats;
}

uint64_t sub_22F1CEA38(uint64_t a1)
{
  return a1;
}

uint64_t sub_22F1CEA64(uint64_t a1)
{
  return a1;
}

char *sub_22F1CEA90()
{
  uint64_t v0 = sub_22F19B428(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v2 = *((void *)v0 + 2);
  unint64_t v1 = *((void *)v0 + 3);
  if (v2 >= v1 >> 1) {
    uint64_t v0 = sub_22F19B428((char *)(v1 > 1), v2 + 1, 1, v0);
  }
  uint64_t v3 = 0;
  *((void *)v0 + 2) = v2 + 1;
  long long v4 = &v0[16 * v2];
  *((void *)v4 + 4) = 0;
  *((void *)v4 + 5) = 0;
  do
  {
    __float2 v6 = __sincosf_stret((float)v3 * 0.7854);
    unint64_t v8 = *((void *)v0 + 2);
    unint64_t v7 = *((void *)v0 + 3);
    unint64_t v9 = v8 + 1;
    if (v8 >= v7 >> 1) {
      uint64_t v0 = sub_22F19B428((char *)(v7 > 1), v8 + 1, 1, v0);
    }
    double v10 = (float)(v6.__cosval * 20.0);
    double v11 = (float)(v6.__sinval * 20.0);
    *((void *)v0 + 2) = v9;
    BOOL v12 = &v0[16 * v8];
    *((double *)v12 + 4) = v10;
    *((double *)v12 + 5) = v11;
    if ((v3 & 1) == 0)
    {
      unint64_t v13 = *((void *)v0 + 3);
      int64_t v14 = v8 + 2;
      if (v14 > (uint64_t)(v13 >> 1)) {
        uint64_t v0 = sub_22F19B428((char *)(v13 > 1), v14, 1, v0);
      }
      *((void *)v0 + 2) = v14;
      uint64_t v5 = &v0[16 * v9];
      *((double *)v5 + 4) = v10 * 0.5;
      *((double *)v5 + 5) = v11 * 0.5;
    }
    ++v3;
  }
  while (v3 != 8);
  return v0;
}

uint64_t sub_22F1CEBF8()
{
  swift_weakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_22F1CEC30()
{
  swift_release();
  swift_release();
  return MEMORY[0x270FA0238](v0, 148, 15);
}

uint64_t sub_22F1CEC70()
{
  return sub_22F1CE560(*(void *)(v0 + 16), v0 + 32);
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t sub_22F1CEC94(uint64_t a1)
{
  return a1;
}

uint64_t *sub_22F1CECCC(uint64_t *a1)
{
  return a1;
}

uint64_t sub_22F1CED28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t result = a16;
  if (a16 != 1)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_22F1CED78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(qword_268695538);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_22F1CEDE0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_22F1CEE28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2686954C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t static Extremities.empty.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_22F2241F8();
  sub_22F2246E8();
  uint64_t v5 = *(void *)(*(void *)(v4 - 8) + 72);
  swift_allocObject();
  sub_22F223CE8();
  uint64_t v7 = v6;
  unint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56);
  v8(v6, 1, 1, a1);
  v8(v7 + v5, 1, 1, a1);
  v8(v7 + 2 * v5, 1, 1, a1);
  v8(v7 + 3 * v5, 1, 1, a1);
  uint64_t v9 = sub_22F223DD8();
  nullsub_1(v9);
  return Extremities.init(sortedPoints:)(a1, a2);
}

uint64_t Extremities.init(sortedPoints:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_22F2241F8();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v14 - v6;
  unint64_t v8 = *(void (**)(void))(*(void *)(a1 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v8)(a2, 1, 1, a1);
  uint64_t v9 = (int *)type metadata accessor for Extremities();
  uint64_t v10 = a2 + v9[7];
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v8)(v10, 1, 1, a1);
  uint64_t v15 = a2 + v9[8];
  v8();
  uint64_t v11 = a2 + v9[9];
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v8)(v11, 1, 1, a1);
  sub_22F223E08();
  BOOL v12 = *(void (**)(uint64_t, char *, uint64_t))(v5 + 40);
  v12(a2, v7, v4);
  sub_22F223E08();
  v12(v10, v7, v4);
  sub_22F223E08();
  v12(v15, v7, v4);
  sub_22F223E08();
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v12)(v11, v7, v4);
}

uint64_t Extremities.top.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_22F2241F8();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t Extremities.top.setter(uint64_t a1)
{
  uint64_t v3 = sub_22F2241F8();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);
  return v4(v1, a1, v3);
}

uint64_t (*Extremities.top.modify())()
{
  return nullsub_1;
}

uint64_t Extremities.left.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 28);
  uint64_t v5 = sub_22F2241F8();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t Extremities.left.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 28);
  uint64_t v5 = sub_22F2241F8();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*Extremities.left.modify())()
{
  return nullsub_1;
}

uint64_t Extremities.bottom.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 32);
  uint64_t v5 = sub_22F2241F8();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t Extremities.bottom.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 32);
  uint64_t v5 = sub_22F2241F8();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*Extremities.bottom.modify())()
{
  return nullsub_1;
}

uint64_t Extremities.right.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 36);
  uint64_t v5 = sub_22F2241F8();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t Extremities.right.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 36);
  uint64_t v5 = sub_22F2241F8();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*Extremities.right.modify())()
{
  return nullsub_1;
}

BOOL Extremities.hasAllExtremities.getter(int *a1)
{
  Extremities.allPoints.getter(a1);
  uint64_t v1 = MEMORY[0x230FB27E0]();
  swift_bridgeObjectRelease();
  return v1 == 4;
}

uint64_t Extremities.allPoints.getter(int *a1)
{
  uint64_t v3 = sub_22F2241F8();
  sub_22F2246E8();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 72);
  swift_allocObject();
  sub_22F223CE8();
  uint64_t v7 = v6;
  unint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v8(v6, v1, v3);
  v8(v7 + v5, v1 + a1[7], v3);
  v8(v7 + 2 * v5, v1 + a1[8], v3);
  v8(v7 + 3 * v5, v1 + a1[9], v3);
  uint64_t v9 = sub_22F223DD8();
  nullsub_1(v9);
  swift_getWitnessTable();
  uint64_t v10 = sub_22F223BF8();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t type metadata accessor for Extremities()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_22F1CF8B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_22F2241F8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
}

uint64_t sub_22F1CF924(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 24);
}

uint64_t sub_22F1CF92C()
{
  uint64_t result = sub_22F2241F8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_22F1CF9C0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v7 = *(void *)(v6 + 64);
  }
  else {
    size_t v7 = *(void *)(v6 + 64) + 1;
  }
  uint64_t v8 = *(_DWORD *)(v6 + 80);
  uint64_t v9 = ~v8;
  size_t v10 = v7 + v8;
  if (v8 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || ((v7 + v8 + ((v7 + v8 + ((v7 + v8) & ~v8)) & ~v8)) & ~v8) + v7 > 0x18)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v8 + 16) & v9));
    swift_retain();
  }
  else
  {
    uint64_t v14 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v6 + 48);
    if (v14(a2, 1, v5))
    {
      memcpy(a1, a2, v7);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    }
    uint64_t v15 = (void *)(((unint64_t)a2 + v10) & v9);
    if (v14(v15, 1, v5))
    {
      memcpy((void *)(((unint64_t)a1 + v10) & v9), v15, v7);
    }
    else
    {
      (*(void (**)(unint64_t, void *, uint64_t))(v6 + 16))(((unint64_t)a1 + v10) & v9, v15, v5);
      (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v6 + 56))(((unint64_t)a1 + v10) & v9, 0, 1, v5);
    }
    uint64_t v16 = (void *)((v10 + (((unint64_t)a1 + v10) & v9)) & v9);
    uint64_t v17 = (void *)(((unint64_t)v15 + v10) & v9);
    if (v14(v17, 1, v5))
    {
      memcpy(v16, v17, v7);
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(v16, v17, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v16, 0, 1, v5);
    }
    uint64_t v18 = (void *)(((unint64_t)v16 + v10) & v9);
    uint64_t v19 = (void *)(((unint64_t)v17 + v10) & v9);
    if (v14(v19, 1, v5))
    {
      memcpy(v18, v19, v7);
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(v18, v19, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v18, 0, 1, v5);
    }
  }
  return a1;
}

uint64_t sub_22F1CFCB8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v14 = *(void *)(v3 - 8);
  uint64_t v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  if (!v4(a1, 1, v3)) {
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a1, v3);
  }
  if (*(_DWORD *)(v14 + 84)) {
    uint64_t v5 = *(void *)(v14 + 64);
  }
  else {
    uint64_t v5 = *(void *)(v14 + 64) + 1;
  }
  uint64_t v6 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v7 = v5 + v6;
  uint64_t v8 = ~v6;
  uint64_t v9 = (v5 + v6 + a1) & ~v6;
  if (!v4(v9, 1, v3)) {
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v9, v3);
  }
  uint64_t v10 = (v7 + v9) & v8;
  if (!v4(v10, 1, v3)) {
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v10, v3);
  }
  uint64_t v11 = (v7 + v10) & v8;
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v4)(v11, 1, v3);
  if (!result)
  {
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 8);
    return v13(v11, v3);
  }
  return result;
}

void *sub_22F1CFE74(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48);
  if (v7(a2, 1, v5))
  {
    int v8 = *(_DWORD *)(v6 + 84);
    size_t v9 = *(void *)(v6 + 64);
    if (v8) {
      size_t v10 = *(void *)(v6 + 64);
    }
    else {
      size_t v10 = v9 + 1;
    }
    memcpy(a1, a2, v10);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    int v8 = *(_DWORD *)(v6 + 84);
    size_t v9 = *(void *)(v6 + 64);
  }
  if (v8) {
    size_t v11 = v9;
  }
  else {
    size_t v11 = v9 + 1;
  }
  uint64_t v12 = *(unsigned __int8 *)(v6 + 80);
  size_t v13 = v11 + v12;
  uint64_t v14 = ~v12;
  uint64_t v15 = (void *)(((unint64_t)a1 + v11 + v12) & ~v12);
  uint64_t v16 = (const void *)(((unint64_t)a2 + v11 + v12) & ~v12);
  if (v7(v16, 1, v5))
  {
    memcpy(v15, v16, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v15, v16, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v15, 0, 1, v5);
  }
  uint64_t v17 = (void *)(((unint64_t)v15 + v13) & v14);
  uint64_t v18 = (const void *)(((unint64_t)v16 + v13) & v14);
  if (v7(v18, 1, v5))
  {
    memcpy(v17, v18, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v17, v18, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v17, 0, 1, v5);
  }
  uint64_t v19 = (void *)(((unint64_t)v17 + v13) & v14);
  uint64_t v20 = (const void *)(((unint64_t)v18 + v13) & v14);
  if (v7(v20, 1, v5))
  {
    memcpy(v19, v20, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v19, v20, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v19, 0, 1, v5);
  }
  return a1;
}

void *sub_22F1D012C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_12;
    }
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  if (v10) {
    size_t v12 = v11;
  }
  else {
    size_t v12 = v11 + 1;
  }
  memcpy(a1, a2, v12);
LABEL_12:
  if (*(_DWORD *)(v6 + 84)) {
    size_t v13 = *(void *)(v6 + 64);
  }
  else {
    size_t v13 = *(void *)(v6 + 64) + 1;
  }
  uint64_t v14 = *(unsigned __int8 *)(v6 + 80);
  size_t v15 = v13 + v14;
  uint64_t v30 = a1;
  uint64_t v16 = ~v14;
  uint64_t v17 = (void *)(((unint64_t)a1 + v13 + v14) & ~v14);
  uint64_t v18 = (void *)(((unint64_t)a2 + v13 + v14) & ~v14);
  int v19 = v7(v17, 1, v5);
  int v20 = v7(v18, 1, v5);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(v17, v18, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v17, 0, 1, v5);
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (v20)
  {
    (*(void (**)(void *, uint64_t))(v6 + 8))(v17, v5);
LABEL_20:
    memcpy(v17, v18, v13);
    goto LABEL_21;
  }
  (*(void (**)(void *, void *, uint64_t))(v6 + 24))(v17, v18, v5);
LABEL_21:
  uint64_t v21 = (void *)(((unint64_t)v17 + v15) & v16);
  uint64_t v22 = (void *)(((unint64_t)v18 + v15) & v16);
  int v23 = v7(v21, 1, v5);
  int v24 = v7(v22, 1, v5);
  if (v23)
  {
    if (!v24)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(v21, v22, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v21, 0, 1, v5);
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  if (v24)
  {
    (*(void (**)(void *, uint64_t))(v6 + 8))(v21, v5);
LABEL_26:
    memcpy(v21, v22, v13);
    goto LABEL_27;
  }
  (*(void (**)(void *, void *, uint64_t))(v6 + 24))(v21, v22, v5);
LABEL_27:
  uint64_t v25 = (void *)(((unint64_t)v21 + v15) & v16);
  uint64_t v26 = (void *)(((unint64_t)v22 + v15) & v16);
  int v27 = v7(v25, 1, v5);
  int v28 = v7(v26, 1, v5);
  if (!v27)
  {
    if (!v28)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(v25, v26, v5);
      return v30;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(v25, v5);
    goto LABEL_32;
  }
  if (v28)
  {
LABEL_32:
    memcpy(v25, v26, v13);
    return v30;
  }
  (*(void (**)(void *, void *, uint64_t))(v6 + 16))(v25, v26, v5);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v25, 0, 1, v5);
  return v30;
}

void *sub_22F1D0578(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48);
  if (v7(a2, 1, v5))
  {
    int v8 = *(_DWORD *)(v6 + 84);
    size_t v9 = *(void *)(v6 + 64);
    if (v8) {
      size_t v10 = *(void *)(v6 + 64);
    }
    else {
      size_t v10 = v9 + 1;
    }
    memcpy(a1, a2, v10);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    int v8 = *(_DWORD *)(v6 + 84);
    size_t v9 = *(void *)(v6 + 64);
  }
  if (v8) {
    size_t v11 = v9;
  }
  else {
    size_t v11 = v9 + 1;
  }
  uint64_t v12 = *(unsigned __int8 *)(v6 + 80);
  size_t v13 = v11 + v12;
  uint64_t v14 = ~v12;
  size_t v15 = (void *)(((unint64_t)a1 + v11 + v12) & ~v12);
  uint64_t v16 = (const void *)(((unint64_t)a2 + v11 + v12) & ~v12);
  if (v7(v16, 1, v5))
  {
    memcpy(v15, v16, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v15, v16, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v15, 0, 1, v5);
  }
  uint64_t v17 = (void *)(((unint64_t)v15 + v13) & v14);
  uint64_t v18 = (const void *)(((unint64_t)v16 + v13) & v14);
  if (v7(v18, 1, v5))
  {
    memcpy(v17, v18, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v17, v18, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v17, 0, 1, v5);
  }
  int v19 = (void *)(((unint64_t)v17 + v13) & v14);
  int v20 = (const void *)(((unint64_t)v18 + v13) & v14);
  if (v7(v20, 1, v5))
  {
    memcpy(v19, v20, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v19, v20, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v19, 0, 1, v5);
  }
  return a1;
}

void *sub_22F1D0830(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_12;
    }
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  if (v10) {
    size_t v12 = v11;
  }
  else {
    size_t v12 = v11 + 1;
  }
  memcpy(a1, a2, v12);
LABEL_12:
  if (*(_DWORD *)(v6 + 84)) {
    size_t v13 = *(void *)(v6 + 64);
  }
  else {
    size_t v13 = *(void *)(v6 + 64) + 1;
  }
  uint64_t v14 = *(unsigned __int8 *)(v6 + 80);
  size_t v15 = v13 + v14;
  uint64_t v30 = a1;
  uint64_t v16 = ~v14;
  uint64_t v17 = (void *)(((unint64_t)a1 + v13 + v14) & ~v14);
  uint64_t v18 = (void *)(((unint64_t)a2 + v13 + v14) & ~v14);
  int v19 = v7(v17, 1, v5);
  int v20 = v7(v18, 1, v5);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(v17, v18, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v17, 0, 1, v5);
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (v20)
  {
    (*(void (**)(void *, uint64_t))(v6 + 8))(v17, v5);
LABEL_20:
    memcpy(v17, v18, v13);
    goto LABEL_21;
  }
  (*(void (**)(void *, void *, uint64_t))(v6 + 40))(v17, v18, v5);
LABEL_21:
  uint64_t v21 = (void *)(((unint64_t)v17 + v15) & v16);
  uint64_t v22 = (void *)(((unint64_t)v18 + v15) & v16);
  int v23 = v7(v21, 1, v5);
  int v24 = v7(v22, 1, v5);
  if (v23)
  {
    if (!v24)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(v21, v22, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v21, 0, 1, v5);
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  if (v24)
  {
    (*(void (**)(void *, uint64_t))(v6 + 8))(v21, v5);
LABEL_26:
    memcpy(v21, v22, v13);
    goto LABEL_27;
  }
  (*(void (**)(void *, void *, uint64_t))(v6 + 40))(v21, v22, v5);
LABEL_27:
  uint64_t v25 = (void *)(((unint64_t)v21 + v15) & v16);
  uint64_t v26 = (void *)(((unint64_t)v22 + v15) & v16);
  int v27 = v7(v25, 1, v5);
  int v28 = v7(v26, 1, v5);
  if (!v27)
  {
    if (!v28)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(v25, v26, v5);
      return v30;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(v25, v5);
    goto LABEL_32;
  }
  if (v28)
  {
LABEL_32:
    memcpy(v25, v26, v13);
    return v30;
  }
  (*(void (**)(void *, void *, uint64_t))(v6 + 32))(v25, v26, v5);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v25, 0, 1, v5);
  return v30;
}

uint64_t sub_22F1D0C7C(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v5) {
    ++v7;
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v6;
  if (a2 > v6)
  {
    uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
    uint64_t v10 = ((v7 + v9 + ((v7 + v9 + ((v7 + v9) & ~v9)) & ~v9)) & ~v9) + v7;
    char v11 = 8 * v10;
    if (v10 > 3) {
      goto LABEL_8;
    }
    unsigned int v13 = ((v8 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v13))
    {
      int v12 = *(_DWORD *)((char *)a1 + v10);
      if (v12) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v13 <= 0xFF)
      {
        if (v13 < 2) {
          goto LABEL_23;
        }
LABEL_8:
        int v12 = *((unsigned __int8 *)a1 + v10);
        if (!*((unsigned char *)a1 + v10)) {
          goto LABEL_23;
        }
LABEL_15:
        int v14 = (v12 - 1) << v11;
        if (v10 > 3) {
          int v14 = 0;
        }
        if (v10)
        {
          if (v10 > 3) {
            LODWORD(v10) = 4;
          }
          switch((int)v10)
          {
            case 2:
              LODWORD(v10) = *a1;
              break;
            case 3:
              LODWORD(v10) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
              break;
            case 4:
              LODWORD(v10) = *(_DWORD *)a1;
              break;
            default:
              LODWORD(v10) = *(unsigned __int8 *)a1;
              break;
          }
        }
        return v6 + (v10 | v14) + 1;
      }
      int v12 = *(unsigned __int16 *)((char *)a1 + v10);
      if (*(unsigned __int16 *)((char *)a1 + v10)) {
        goto LABEL_15;
      }
    }
  }
LABEL_23:
  if (v5 < 2) {
    return 0;
  }
  unsigned int v16 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v16 >= 2) {
    return v16 - 1;
  }
  else {
    return 0;
  }
}

void sub_22F1D0E34(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (!v8) {
    ++v10;
  }
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  size_t v12 = ((v10 + v11 + ((v10 + v11 + ((v10 + v11) & ~v11)) & ~v11)) & ~v11) + v10;
  BOOL v13 = a3 >= v9;
  unsigned int v14 = a3 - v9;
  if (v14 == 0 || !v13)
  {
LABEL_14:
    if (v9 < a2) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }
  if (v12 > 3)
  {
    int v6 = 1;
    if (v9 < a2) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }
  unsigned int v15 = ((v14 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
  if (!HIWORD(v15))
  {
    if (v15 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v15 > 1;
    }
    goto LABEL_14;
  }
  int v6 = 4;
  if (v9 < a2)
  {
LABEL_15:
    unsigned int v16 = ~v9 + a2;
    if (v12 < 4)
    {
      int v17 = (v16 >> (8 * v12)) + 1;
      if (v12)
      {
        int v18 = v16 & ~(-1 << (8 * v12));
        bzero(a1, v12);
        if (v12 == 3)
        {
          *(_WORD *)a1 = v18;
          a1[2] = BYTE2(v18);
        }
        else if (v12 == 2)
        {
          *(_WORD *)a1 = v18;
        }
        else
        {
          *a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v12);
      *(_DWORD *)a1 = v16;
      int v17 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v12] = v17;
        return;
      case 2:
        *(_WORD *)&a1[v12] = v17;
        return;
      case 3:
        goto LABEL_40;
      case 4:
        *(_DWORD *)&a1[v12] = v17;
        return;
      default:
        return;
    }
  }
LABEL_22:
  switch(v6)
  {
    case 1:
      a1[v12] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v12] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_40:
      __break(1u);
      JUMPOUT(0x22F1D1090);
    case 4:
      *(_DWORD *)&a1[v12] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        if (v8 >= 2)
        {
          int v19 = *(void (**)(void))(v7 + 56);
          v19();
        }
      }
      return;
  }
}

void *effectiveStatusBarOrientation.unsafeMutableAddressor()
{
  return &effectiveStatusBarOrientation;
}

uint64_t PlaneSolver.minInliners.getter()
{
  return 4;
}

uint64_t PlaneSolver.maxInliners.getter()
{
  return 50;
}

uint64_t PlaneSolver.considerUncertainties.getter()
{
  return 1;
}

float sub_22F1D10DC()
{
  if ((*(unsigned char *)(v0 + 88) & 1) == 0) {
    return *(float *)(v0 + 84);
  }
  *(_DWORD *)(v0 + 84) = 1048871919;
  *(unsigned char *)(v0 + 88) = 0;
  return 0.25882;
}

uint64_t sub_22F1D1104(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 200) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t PlaneSolver.pointCloudWithNoise.getter()
{
  return swift_bridgeObjectRetain();
}

void *sub_22F1D119C()
{
  if (*(void *)(v0 + 208))
  {
    unint64_t v1 = *(void **)(v0 + 208);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2686955C8);
    unint64_t v1 = (void *)swift_allocObject();
    swift_weakInit();
    uint64_t v2 = MEMORY[0x263F8EE78];
    v1[3] = MEMORY[0x263F8EE78];
    v1[4] = v2;
    v1[5] = v2;
    swift_weakAssign();
    *(void *)(v0 + 208) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t PlaneSolver.solve(data:iteration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>)
{
  sub_22F1D2304(a1, (uint64_t)v7, a3, a4, a5);
  return sub_22F1D2608((uint64_t)v7, a2);
}

float PlaneSolver.getError(model:sample:)(int8x16_t a1, float32x4_t a2, int8x16_t a3)
{
  float v3 = _s17MeasureFoundation9PlaneUtilC8distance5point5planeSfs5SIMD3VySfG_AI6center_AI6normalttFZ_0(a3, a1, a2);
  return v3 * v3;
}

void PlaneSolver.getError(model:samples:)(uint64_t a1, float32x4_t a2, float32x4_t a3)
{
  if (v3[10].i8[0])
  {
    __break(1u);
  }
  else
  {
    float32x4_t v5 = v3[9];
    float v6 = v5.f32[0] * a3.f32[0];
    float32x4_t v7 = vmulq_f32(v5, a3);
    if (fabsf(v7.f32[2] + (float)(v6 + v7.f32[1])) >= sub_22F1D10DC()) {
      sub_22F1D2670(a1, a2, a3);
    }
  }
}

void PlaneSolver.detectPlane(data:vergenceAngleCosines:pointOfView:camera:bestData:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X3>, float32x4_t *a5@<X8>, float32x4_t a6@<Q1>, float32x4_t a7@<Q2>, __n128 a8@<Q3>)
{
  unint64_t v10 = *(void *)(a1 + 16);
  *(void *)(v8 + 96) = v10;
  float32x4_t v11 = 0uLL;
  float v12 = 0.0;
  if (v10 < 4)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    char v15 = 1;
LABEL_16:
    *a5 = v11;
    a5[1].i64[0] = v13;
    a5[1].i64[1] = v14;
    a5[2].f32[0] = v12;
    a5[2].i8[4] = v15;
    return;
  }
  uint64_t v17 = sub_22F1D1DC8(a1, a2, a3, 3.0);
  __n128 v18 = a8;
  v18.n128_u32[3] = 0;
  *(__n128 *)(v8 + 112) = v18;
  *(unsigned char *)(v8 + 128) = 0;
  int32x4_t v19 = (int32x4_t)vmulq_f32(a7, a7);
  v19.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v19, 2), vadd_f32(*(float32x2_t *)v19.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v19.i8, 1))).u32[0];
  float32x2_t v20 = vrsqrte_f32((float32x2_t)v19.u32[0]);
  float32x2_t v21 = vmul_f32(v20, vrsqrts_f32((float32x2_t)v19.u32[0], vmul_f32(v20, v20)));
  *(float32x4_t *)(v8 + 144) = vmulq_n_f32(a7, vmul_f32(v21, vrsqrts_f32((float32x2_t)v19.u32[0], vmul_f32(v21, v21))).f32[0]);
  int32x4_t v22 = (int32x4_t)vmulq_f32(a6, a6);
  *(unsigned char *)(v8 + 160) = 0;
  v22.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v22, 2), vadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v22.i8, 1))).u32[0];
  float32x2_t v23 = vrsqrte_f32((float32x2_t)v22.u32[0]);
  float32x2_t v24 = vmul_f32(v23, vrsqrts_f32((float32x2_t)v22.u32[0], vmul_f32(v23, v23)));
  *(float32x4_t *)(v8 + 176) = vmulq_n_f32(a6, vmul_f32(v24, vrsqrts_f32((float32x2_t)v22.u32[0], vmul_f32(v24, v24))).f32[0]);
  *(unsigned char *)(v8 + 192) = 0;
  uint64_t v25 = *(void *)(v8 + 96);
  float v26 = (float)v25 * 0.8;
  if ((~LODWORD(v26) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (v26 <= -9.2234e18)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v26 < 9.2234e18)
  {
    uint64_t v27 = (uint64_t)v26;
    if ((uint64_t)v26 >= 15) {
      uint64_t v27 = 15;
    }
    if (v27 <= 3) {
      uint64_t v28 = 3;
    }
    else {
      uint64_t v28 = v27;
    }
    uint64_t v29 = sub_22F1D15AC(v25);
    swift_bridgeObjectRetain();
    sub_22F1D119C();
    sub_22F1D17D0(&v43, v17, 4, v29, v28, a4, 0.000025);
    float v31 = v30;
    swift_release();
    swift_bridgeObjectRelease();
    if (v46)
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      char v15 = 1;
      float32x4_t v11 = 0uLL;
    }
    else
    {
      uint64_t v13 = v44;
      uint64_t v14 = v45;
      uint64_t v35 = *a4;
      *(float32x2_t *)v36.f32 = _ss5SIMD3V17MeasureFoundationSfRszrlE7averageyABySfGSayAEGFZ_0(*a4, v32, v33, v34);
      float32x4_t v11 = v36;
      if (v31 < INFINITY)
      {
        v37.i64[0] = v13;
        v37.i64[1] = v14;
        float32x4_t v42 = v36;
        float v38 = sub_22F1D2670(v35, v36, v37);
        float32x4_t v11 = v42;
        float v12 = (float)(v31 / (float)(v38 * -50.0)) + 1.0;
      }
      char v15 = 0;
    }
    goto LABEL_16;
  }
LABEL_19:
  __break(1u);
}

uint64_t sub_22F1D15AC(uint64_t result)
{
  uint64_t v2 = *(void *)(v1 + 64);
  uint64_t v3 = *(void *)(v1 + 72);
  BOOL v4 = __OFSUB__(v3, v2);
  uint64_t v5 = v3 - v2;
  if (v4)
  {
    __break(1u);
    goto LABEL_9;
  }
  float v6 = (float)((float)result / 50.0) * (float)((float)result / 50.0);
  if ((~LODWORD(v6) & 0x7F800000) == 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v6 <= -9.2234e18)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v6 >= 9.2234e18)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v7 = v5 * (uint64_t)v6;
  if ((unsigned __int128)(v5 * (__int128)(uint64_t)v6) >> 64 != v7 >> 63)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t result = v2 + v7;
  if (__OFADD__(v2, v7)) {
LABEL_13:
  }
    __break(1u);
  return result;
}

uint64_t PlaneSolver.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t PlaneSolver.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_22F1D16AC()
{
  *(_OWORD *)(v0 + 16) = xmmword_22F2291B0;
  *(unsigned char *)(v0 + 32) = 1;
  *(_OWORD *)(v0 + 40) = xmmword_22F2291C0;
  *(void *)(v0 + 56) = 0x3FA78D3637D1B717;
  *(_OWORD *)(v0 + 64) = xmmword_22F2291D0;
  *(void *)(v0 + 80) = 1077936128;
  *(unsigned char *)(v0 + 88) = 1;
  *(void *)(v0 + 96) = 0;
  uint64_t v1 = (void *)sub_22F223D48();
  v1[2] = 3;
  v1[5] = 0;
  v1[6] = 0;
  v1[4] = 0;
  *(void *)(v0 + 104) = v1;
  *(void *)(v0 + 112) = 0;
  *(void *)(v0 + 120) = 0;
  *(unsigned char *)(v0 + 128) = 1;
  *(void *)(v0 + 144) = 0;
  *(void *)(v0 + 152) = 0;
  *(unsigned char *)(v0 + 160) = 1;
  *(void *)(v0 + 176) = 0;
  *(void *)(v0 + 184) = 0;
  *(unsigned char *)(v0 + 192) = 1;
  *(void *)(v0 + 200) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 208) = 0;
  return v0;
}

uint64_t sub_22F1D1764@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>)
{
  sub_22F1D2304(a1, (uint64_t)v7, a3, a4, a5);
  return sub_22F1D2608((uint64_t)v7, a2);
}

float sub_22F1D17A0(uint64_t a1, int8x16_t *a2)
{
  float v2 = _s17MeasureFoundation9PlaneUtilC8distance5point5planeSfs5SIMD3VySfG_AI6center_AI6normalttFZ_0(*a2, *(int8x16_t *)a1, *(float32x4_t *)(a1 + 16));
  return v2 * v2;
}

void sub_22F1D17C4(float32x4_t *a1, uint64_t a2)
{
}

void sub_22F1D17D0(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, float a7)
{
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    *a1 = 0u;
    a1[1] = 0u;
    a1[2].i8[0] = 1;
    return;
  }
  if (a4 < 0) {
    goto LABEL_61;
  }
  if (!a4)
  {
    swift_release();
    float32x4_t v75 = 0uLL;
    char v74 = 1;
    float32x4_t v76 = 0uLL;
    goto LABEL_56;
  }
  float32x2_t v81 = a6;
  uint64_t v82 = a4;
  float32x4_t v77 = a1;
  uint64_t v13 = 0;
  uint64_t v14 = *(void *)(a2 + 16);
  char v15 = (char **)(v7 + 32);
  float32x4_t v88 = (char **)(v7 + 24);
  unsigned int v16 = (uint64_t *)(v7 + 40);
  uint64_t v93 = a2 + 32;
  float32x4_t v78 = 0u;
  float32x4_t v79 = 0u;
  char v80 = 1;
  float v17 = INFINITY;
  float32x2_t v84 = (float32x4_t *)Strong;
  while (1)
  {
    if (v13 == a4) {
      goto LABEL_59;
    }
    swift_beginAccess();
    swift_beginAccess();
    sub_22F1D2030(a2, a3, v15, v88);
    swift_endAccess();
    swift_endAccess();
    uint64_t v18 = swift_bridgeObjectRetain();
    sub_22F1D2304(v18, (uint64_t)v94, v19, v20, v21);
    uint64_t v23 = v94[0];
    uint64_t v22 = v94[1];
    uint64_t v25 = v94[2];
    uint64_t v24 = v94[3];
    swift_bridgeObjectRelease();
    sub_22F1D2608((uint64_t)v94, (uint64_t)v97);
    if ((v97[32] & 1) == 0) {
      break;
    }
LABEL_6:
    if (++v13 == a4)
    {
      swift_release();
      a1 = v77;
      char v74 = v80;
      float32x4_t v76 = v78;
      float32x4_t v75 = v79;
LABEL_56:
      *a1 = v75;
      a1[1] = v76;
      a1[2].i8[0] = v74 & 1;
      return;
    }
  }
  uint64_t v91 = v24;
  swift_beginAccess();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v27 = *v16;
  if (isUniquelyReferenced_nonNull_native)
  {
    sub_22F1840E0(0, *(void *)(v27 + 16));
  }
  else
  {
    uint64_t v28 = (void *)MEMORY[0x263F8EE78];
    if (*(void *)(v27 + 24) >= 2uLL)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_268694C60);
      uint64_t v28 = (void *)swift_allocObject();
      int64_t v29 = _swift_stdlib_malloc_size(v28);
      uint64_t v30 = v29 - 32;
      if (v29 < 32) {
        uint64_t v30 = v29 - 17;
      }
      float32x4_t v28[2] = 0;
      void v28[3] = 2 * (v30 >> 4);
    }
    *unsigned int v16 = (uint64_t)v28;
    swift_bridgeObjectRelease();
  }
  v31.i64[0] = v23;
  v31.i64[1] = v22;
  float32x4_t v87 = v31;
  v31.i64[0] = v25;
  v31.i64[1] = v91;
  float32x4_t v89 = v31;
  swift_endAccess();
  float32x4_t v32 = v89;
  if (!v14)
  {
LABEL_37:
    uint64_t v48 = *(void *)(*v16 + 16);
    uint64_t v49 = *((void *)*v88 + 2);
    BOOL v50 = __OFADD__(v48, v49);
    uint64_t v51 = v48 + v49;
    if (v50) {
      goto LABEL_60;
    }
    if (v51 < a5)
    {
      a4 = v82;
    }
    else
    {
      uint64_t v52 = swift_bridgeObjectRetain();
      sub_22F1C0804(v52);
      uint64_t v53 = swift_bridgeObjectRetain();
      sub_22F1D2304(v53, (uint64_t)v95, v54, v55, v56);
      uint64_t v58 = v95[0];
      uint64_t v57 = v95[1];
      uint64_t v60 = v95[2];
      uint64_t v59 = v95[3];
      swift_bridgeObjectRelease();
      sub_22F1D2608((uint64_t)v95, (uint64_t)v96);
      float32x4_t v61 = v89;
      if ((v96[32] & 1) == 0)
      {
        v62.i64[0] = v58;
        v62.i64[1] = v57;
        float32x4_t v87 = v62;
        v61.i64[0] = v60;
        v61.i64[1] = v59;
      }
      if (v84[10].i8[0]) {
        goto LABEL_62;
      }
      uint64_t v63 = *v16;
      float32x4_t v64 = vmulq_f32(v61, v84[9]);
      float v65 = fabsf(v64.f32[2] + (float)((float)(COERCE_FLOAT(v84[9].i64[0]) * v61.f32[0]) + v64.f32[1]));
      float32x4_t v90 = v61;
      a4 = v82;
      if (v65 >= sub_22F1D10DC())
      {
        float v66 = (float)*(uint64_t *)(v63 + 16);
        float v67 = sub_22F1D2670(v63, v87, v90) * (float)(50.0 / v66);
        if (v67 < v17)
        {
          int v68 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v69 = *v81;
          if (v68)
          {
            sub_22F1840E0(0, *(void *)(v69 + 16));
          }
          else
          {
            unint64_t v70 = (void *)MEMORY[0x263F8EE78];
            if (*(void *)(v69 + 24) >= 2uLL)
            {
              __swift_instantiateConcreteTypeFromMangledName(&qword_268694C60);
              unint64_t v70 = (void *)swift_allocObject();
              int64_t v71 = _swift_stdlib_malloc_size(v70);
              uint64_t v72 = v71 - 32;
              if (v71 < 32) {
                uint64_t v72 = v71 - 17;
              }
              id v70[2] = 0;
              v70[3] = 2 * (v72 >> 4);
            }
            *float32x2_t v81 = (uint64_t)v70;
            swift_bridgeObjectRelease();
            a4 = v82;
          }
          uint64_t v73 = swift_bridgeObjectRetain();
          sub_22F1C0804(v73);
          if (v67 == 0.0)
          {
            swift_release();
            *float32x4_t v77 = v87;
            v77[1] = v90;
            v77[2].i8[0] = 0;
            return;
          }
          char v80 = 0;
          float v17 = v67;
          float32x4_t v78 = v90;
          float32x4_t v79 = v87;
        }
      }
    }
    goto LABEL_6;
  }
  uint64_t v33 = 0;
  float32x4_t v34 = vmulq_f32(v87, v89);
  float v35 = v34.f32[2] + (float)((float)(*(float *)&v23 * *(float *)&v25) + v34.f32[1]);
  while (1)
  {
    float32x4_t v36 = *v15;
    uint64_t v37 = *((void *)*v15 + 2);
    if (!v37) {
      goto LABEL_23;
    }
    if (*((void *)v36 + 4) != v33)
    {
      if (v37 == 1) {
        goto LABEL_23;
      }
      if (*((void *)v36 + 5) != v33)
      {
        if (v37 == 2) {
          goto LABEL_23;
        }
        if (*((void *)v36 + 6) != v33) {
          break;
        }
      }
    }
LABEL_19:
    if (++v33 == v14) {
      goto LABEL_37;
    }
  }
  if (v37 == 3)
  {
LABEL_23:
    float32x4_t v38 = *(float32x4_t *)(v93 + 16 * v33);
    float32x4_t v39 = vmulq_f32(v38, v32);
    if ((float)((float)((float)(v39.f32[2] + (float)((float)(*(float *)&v25 * v38.f32[0]) + v39.f32[1])) - v35)
               * (float)((float)(v39.f32[2] + (float)((float)(*(float *)&v25 * v38.f32[0]) + v39.f32[1])) - v35)) <= a7)
    {
      long long v92 = *(_OWORD *)(v93 + 16 * v33);
      uint64_t v40 = (char *)*v16;
      char v41 = swift_isUniquelyReferenced_nonNull_native();
      *unsigned int v16 = (uint64_t)v40;
      if ((v41 & 1) == 0)
      {
        uint64_t v40 = sub_22F19B630(0, *((void *)v40 + 2) + 1, 1, v40);
        *unsigned int v16 = (uint64_t)v40;
      }
      unint64_t v43 = *((void *)v40 + 2);
      unint64_t v42 = *((void *)v40 + 3);
      float32x4_t v32 = v89;
      long long v44 = v92;
      if (v43 >= v42 >> 1)
      {
        uint64_t v45 = sub_22F19B630((char *)(v42 > 1), v43 + 1, 1, v40);
        float32x4_t v32 = v89;
        long long v44 = v92;
        uint64_t v40 = v45;
        *unsigned int v16 = (uint64_t)v45;
      }
      *((void *)v40 + 2) = v43 + 1;
      *(_OWORD *)&v40[16 * v43 + 32] = v44;
    }
    goto LABEL_19;
  }
  uint64_t v46 = 7;
  while (1)
  {
    uint64_t v47 = v46 - 3;
    if (__OFADD__(v46 - 4, 1)) {
      break;
    }
    if (*(void *)&v36[8 * v46] == v33) {
      goto LABEL_19;
    }
    ++v46;
    if (v47 == v37) {
      goto LABEL_23;
    }
  }
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
}

uint64_t sub_22F1D1DC8(uint64_t a1, uint64_t a2, id a3, float a4)
{
  objc_msgSend(a3, sel_intrinsics);
  float v39 = v9;
  objc_msgSend(a3, sel_intrinsics);
  if (v10 >= v39) {
    float v11 = v39;
  }
  else {
    float v11 = v10;
  }
  objc_msgSend(a3, sel_viewMatrixForOrientation_, 1);
  float32x4_t v37 = v13;
  float32x4_t v38 = v12;
  float32x4_t v35 = v15;
  float32x4_t v36 = v14;
  unsigned int v16 = (uint64_t *)(v4 + 200);
  swift_beginAccess();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v18 = *(void *)(v4 + 200);
  if (isUniquelyReferenced_nonNull_native)
  {
    sub_22F1840E0(0, *(void *)(v18 + 16));
  }
  else
  {
    *unsigned int v16 = (uint64_t)sub_22F1ACDDC(0, *(void *)(v18 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  uint64_t result = swift_endAccess();
  uint64_t v20 = *(void *)(a1 + 16);
  if (!v20) {
    return *v16;
  }
  unint64_t v21 = 0;
  uint64_t v22 = a1 + 32;
  float v23 = a4 / v11;
  while (1)
  {
    float32x4_t v40 = *(float32x4_t *)(v22 + 16 * v21);
    float v24 = 1.0;
    if (a2) {
      break;
    }
LABEL_12:
    uint64_t v25 = *v16;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *unsigned int v16 = v25;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_22F19B630(0, *(void *)(v25 + 16) + 1, 1, (char *)v25);
      uint64_t v25 = result;
      *unsigned int v16 = result;
    }
    unint64_t v27 = *(void *)(v25 + 16);
    unint64_t v26 = *(void *)(v25 + 24);
    if (v27 >= v26 >> 1)
    {
      uint64_t result = (uint64_t)sub_22F19B630((char *)(v26 > 1), v27 + 1, 1, (char *)v25);
      uint64_t v25 = result;
      *unsigned int v16 = result;
    }
    ++v21;
    float32x4_t v28 = vaddq_f32(v35, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v38, v40.f32[0]), v37, *(float32x2_t *)v40.f32, 1), v36, v40, 2));
    int8x16_t v29 = (int8x16_t)vmulq_f32(v28, v28);
    *(float32x2_t *)v29.i8 = vadd_f32(*(float32x2_t *)v29.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL));
    float v30 = vmuls_lane_f32(v23, v28, 2) / v24;
    v29.i32[0] = vadd_f32(*(float32x2_t *)v29.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v29.i8, 1)).u32[0];
    float32x2_t v31 = vrsqrte_f32((float32x2_t)v29.u32[0]);
    float32x2_t v32 = vmul_f32(v31, vrsqrts_f32((float32x2_t)v29.u32[0], vmul_f32(v31, v31)));
    float32x4_t v33 = vmulq_n_f32(v28, vmul_f32(v32, vrsqrts_f32((float32x2_t)v29.u32[0], vmul_f32(v32, v32))).f32[0]);
    *(float32x2_t *)v29.i8 = vmul_n_f32(*(float32x2_t *)v33.f32, v30);
    v33.f32[0] = vmuls_lane_f32(v30, v33, 2);
    *(float32x2_t *)&long long v34 = vadd_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v29.i8);
    *((float *)&v34 + 2) = v40.f32[2] + v33.f32[0];
    HIDWORD(v34) = 0;
    *(void *)(v25 + 16) = v27 + 1;
    *(_OWORD *)(v25 + 16 * v27 + 32) = v34;
    if (v20 == v21) {
      return *v16;
    }
  }
  if (v21 < *(void *)(a2 + 16))
  {
    float v24 = sqrtf(1.0 - (float)(*(float *)(a2 + 32 + 4 * v21) * *(float *)(a2 + 32 + 4 * v21)))
        / *(float *)(a2 + 32 + 4 * v21);
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

void sub_22F1D2030(uint64_t a1, uint64_t a2, char **a3, char **a4)
{
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  float v9 = *a3;
  if (isUniquelyReferenced_nonNull_native)
  {
    sub_22F1842F0(0, *((void *)v9 + 2));
  }
  else
  {
    *a3 = (char *)sub_22F1ACE6C(0, *((void *)v9 + 3) >> 1);
    swift_bridgeObjectRelease();
  }
  int v10 = swift_isUniquelyReferenced_nonNull_native();
  float v11 = *a4;
  if (v10)
  {
    sub_22F1840E0(0, *((void *)v11 + 2));
  }
  else
  {
    *a4 = (char *)sub_22F1ACDDC(0, *((void *)v11 + 3) >> 1);
    swift_bridgeObjectRelease();
  }
  if (*((void *)*a3 + 2) >= a2) {
    return;
  }
  unint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = a1 + 32;
  while (1)
  {
    double v15 = round(drand48() * (double)(uint64_t)(v12 - 1));
    if ((~*(void *)&v15 & 0x7FF0000000000000) == 0)
    {
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v15 <= -9.22337204e18) {
      goto LABEL_36;
    }
    if (v15 >= 9.22337204e18) {
      goto LABEL_37;
    }
    unint64_t v16 = (uint64_t)v15;
    float v17 = *a3;
    uint64_t v14 = *((void *)*a3 + 2);
    if (v14)
    {
      if (*((void *)v17 + 4) == v16) {
        goto LABEL_10;
      }
      if (v14 != 1)
      {
        if (*((void *)v17 + 5) == v16) {
          goto LABEL_10;
        }
        if (v14 != 2)
        {
          if (*((void *)v17 + 6) == v16) {
            goto LABEL_10;
          }
          if (v14 != 3) {
            break;
          }
        }
      }
    }
LABEL_25:
    char v20 = swift_isUniquelyReferenced_nonNull_native();
    *a3 = v17;
    if ((v20 & 1) == 0)
    {
      float v17 = sub_22F19B32C(0, v14 + 1, 1, v17);
      *a3 = v17;
    }
    unint64_t v22 = *((void *)v17 + 2);
    unint64_t v21 = *((void *)v17 + 3);
    if (v22 >= v21 >> 1) {
      float v17 = sub_22F19B32C((char *)(v21 > 1), v22 + 1, 1, v17);
    }
    *((void *)v17 + 2) = v22 + 1;
    *(void *)&v17[8 * v22 + 32] = v16;
    *a3 = v17;
    if (v12 <= v16) {
      goto LABEL_38;
    }
    long long v27 = *(_OWORD *)(v13 + 16 * v16);
    float v23 = *a4;
    char v24 = swift_isUniquelyReferenced_nonNull_native();
    *a4 = v23;
    if ((v24 & 1) == 0)
    {
      float v23 = sub_22F19B630(0, *((void *)v23 + 2) + 1, 1, v23);
      *a4 = v23;
    }
    unint64_t v26 = *((void *)v23 + 2);
    unint64_t v25 = *((void *)v23 + 3);
    if (v26 >= v25 >> 1) {
      float v23 = sub_22F19B630((char *)(v25 > 1), v26 + 1, 1, v23);
    }
    *((void *)v23 + 2) = v26 + 1;
    *(_OWORD *)&v23[16 * v26 + 32] = v27;
    *a4 = v23;
    uint64_t v14 = *((void *)*a3 + 2);
LABEL_10:
    if (v14 >= a2) {
      return;
    }
  }
  uint64_t v18 = 7;
  while (1)
  {
    uint64_t v19 = v18 - 3;
    if (__OFADD__(v18 - 4, 1)) {
      break;
    }
    if (*(void *)&v17[8 * v18] == v16) {
      goto LABEL_10;
    }
    ++v18;
    if (v19 == v14) {
      goto LABEL_25;
    }
  }
LABEL_39:
  __break(1u);
}

void sub_22F1D2304(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>)
{
  *(float32x2_t *)&long long v8 = _ss5SIMD3V17MeasureFoundationSfRszrlE7averageyABySfGSayAEGFZ_0(a1, a3, a4, a5);
  long long v32 = v8;
  float v9 = (char **)(v5 + 104);
  swift_beginAccess();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *(void *)(v5 + 104);
  if (isUniquelyReferenced_nonNull_native)
  {
    sub_22F1842F0(0, *(void *)(v11 + 16));
  }
  else
  {
    char *v9 = (char *)sub_22F1ACE6C(0, *(void *)(v11 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  uint64_t v13 = *v9;
  if (*((void *)*v9 + 2) <= 2uLL)
  {
    while (1)
    {
      double v15 = round(drand48() * (double)(*(void *)(a1 + 16) - 1));
      if ((~*(void *)&v15 & 0x7FF0000000000000) == 0)
      {
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
      if (v15 <= -9.22337204e18) {
        goto LABEL_32;
      }
      if (v15 >= 9.22337204e18) {
        goto LABEL_33;
      }
      uint64_t v16 = (uint64_t)v15;
      uint64_t v13 = *v9;
      unint64_t v14 = *((void *)*v9 + 2);
      if (!v14) {
        goto LABEL_22;
      }
      if (*((void *)v13 + 4) != v16)
      {
        if (v14 == 1) {
          goto LABEL_22;
        }
        if (*((void *)v13 + 5) != v16) {
          break;
        }
      }
LABEL_7:
      if (v14 >= 3) {
        goto LABEL_26;
      }
    }
    if (v14 != 2)
    {
      if (*((void *)v13 + 6) == v16) {
        goto LABEL_26;
      }
      if (v14 != 3)
      {
        uint64_t v17 = 7;
        while (1)
        {
          uint64_t v18 = v17 - 3;
          if (__OFADD__(v17 - 4, 1)) {
            break;
          }
          if (*(void *)&v13[8 * v17] == v16) {
            goto LABEL_7;
          }
          ++v17;
          if (v18 == v14) {
            goto LABEL_22;
          }
        }
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
    }
LABEL_22:
    char v19 = swift_isUniquelyReferenced_nonNull_native();
    char *v9 = v13;
    if ((v19 & 1) == 0)
    {
      uint64_t v13 = sub_22F19B32C(0, *((void *)v13 + 2) + 1, 1, v13);
      char *v9 = v13;
    }
    unint64_t v21 = *((void *)v13 + 2);
    unint64_t v20 = *((void *)v13 + 3);
    if (v21 >= v20 >> 1)
    {
      uint64_t v13 = sub_22F19B32C((char *)(v20 > 1), v21 + 1, 1, v13);
      char *v9 = v13;
    }
    *((void *)v13 + 2) = v21 + 1;
    *(void *)&v13[8 * v21 + 32] = v16;
    uint64_t v13 = *v9;
    unint64_t v14 = *((void *)*v9 + 2);
    goto LABEL_7;
  }
LABEL_26:
  unint64_t v22 = *((void *)v13 + 4);
  if ((v22 & 0x8000000000000000) != 0) {
    goto LABEL_35;
  }
  unint64_t v23 = *(void *)(a1 + 16);
  if (v22 >= v23)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  unint64_t v24 = *((void *)v13 + 5);
  if (v24 >= v23)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  unint64_t v25 = *((void *)v13 + 6);
  if (v25 < v23)
  {
    float32x4_t v26 = *(float32x4_t *)(a1 + 32 + 16 * v22);
    long long v27 = (float32x2_t *)(a1 + 32 + 16 * v24);
    float32x4_t v28 = (float32x2_t *)(a1 + 32 + 16 * v25);
    *(float32x2_t *)v12.f32 = vsub_f32(*v27, *(float32x2_t *)v26.f32);
    v12.f32[2] = v27[1].f32[0] - v26.f32[2];
    *(float32x2_t *)v26.f32 = vsub_f32(*v28, *(float32x2_t *)v26.f32);
    v26.f32[2] = v28[1].f32[0] - v26.f32[2];
    float32x4_t v29 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v26, (int32x4_t)v26), (int8x16_t)v26, 0xCuLL), vnegq_f32(v12)), v26, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), (int8x16_t)v12, 0xCuLL));
    int32x4_t v30 = (int32x4_t)vmulq_f32(v29, v29);
    v30.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v30.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v30, 2), *(float32x2_t *)v30.i8)).u32[0];
    float32x4_t v31 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v29, (int32x4_t)v29), (int8x16_t)v29, 0xCuLL);
    *(float32x2_t *)v29.f32 = vrsqrte_f32((float32x2_t)v30.u32[0]);
    *(float32x2_t *)v29.f32 = vmul_f32(*(float32x2_t *)v29.f32, vrsqrts_f32((float32x2_t)v30.u32[0], vmul_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32)));
    *(_OWORD *)a2 = v32;
    *(float32x4_t *)(a2 + 16) = vmulq_n_f32(v31, vmul_f32(*(float32x2_t *)v29.f32, vrsqrts_f32((float32x2_t)v30.u32[0], vmul_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32))).f32[0]);
    *(unsigned char *)(a2 + 32) = 0;
    return;
  }
LABEL_38:
  __break(1u);
}

uint64_t sub_22F1D2608(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2686955C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

float sub_22F1D2670(uint64_t a1, float32x4_t a2, float32x4_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    float32x4_t v4 = vmulq_f32(a2, a3);
    int32x2_t v5 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v4, 2), vaddq_f32(v4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 1))).u64[0];
    if ((unint64_t)v3 >= 9)
    {
      uint64_t v8 = *(void *)(a1 + 16) & 7;
      if ((v3 & 7) == 0) {
        uint64_t v8 = 8;
      }
      uint64_t v6 = v3 - v8;
      float32x4_t v9 = (float32x4_t)vdupq_lane_s32(v5, 0);
      int v10 = (const float *)(a1 + 96);
      float v7 = 0.0;
      uint64_t v11 = v6;
      do
      {
        float32x4_t v12 = v10 - 16;
        float32x4x4_t v18 = vld4q_f32(v12);
        float32x4x4_t v19 = vld4q_f32(v10);
        v18.val[0] = vsubq_f32(vaddq_f32(vmulq_laneq_f32(v18.val[2], a3, 2), vaddq_f32(vmulq_n_f32(v18.val[0], a3.f32[0]), vmulq_lane_f32(v18.val[1], *(float32x2_t *)a3.f32, 1))), v9);
        v18.val[1] = vsubq_f32(vaddq_f32(vmulq_laneq_f32(v19.val[2], a3, 2), vaddq_f32(vmulq_n_f32(v19.val[0], a3.f32[0]), vmulq_lane_f32(v19.val[1], *(float32x2_t *)a3.f32, 1))), v9);
        v18.val[0] = vmulq_f32(v18.val[0], v18.val[0]);
        v18.val[1] = vmulq_f32(v18.val[1], v18.val[1]);
        float v7 = (float)((float)((float)((float)((float)((float)((float)(v7 + v18.val[0].f32[0]) + v18.val[0].f32[1])
                                                   + v18.val[0].f32[2])
                                           + v18.val[0].f32[3])
                                   + v18.val[1].f32[0])
                           + v18.val[1].f32[1])
                   + v18.val[1].f32[2])
           + v18.val[1].f32[3];
        v10 += 32;
        v11 -= 8;
      }
      while (v11);
    }
    else
    {
      uint64_t v6 = 0;
      float v7 = 0.0;
    }
    uint64_t v13 = v3 - v6;
    unint64_t v14 = (float *)(a1 + 16 * v6 + 40);
    do
    {
      float v15 = (float)(a3.f32[0] * *(v14 - 2)) + (float)(a3.f32[1] * *(v14 - 1));
      float v16 = *v14;
      v14 += 4;
      float v7 = v7
         + (float)((float)((float)((float)(a3.f32[2] * v16) + v15) - *(float *)v5.i32)
                 * (float)((float)((float)(a3.f32[2] * v16) + v15) - *(float *)v5.i32));
      --v13;
    }
    while (v13);
  }
  else
  {
    float v7 = 0.0;
  }
  return v7 / (float)v3;
}

uint64_t sub_22F1D27A0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  *a2 = *(void *)(v3 + 200);
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for PlaneSolver()
{
  return self;
}

double static PlaneUtil.getIntersection(ray:plane:)(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4)
{
  return sub_22F1D2EA0(a1, a2, a3, a4);
}

void static PlaneUtil.getIntersection(sourceRay:destRay:)(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4)
{
  float32x4_t v4 = vmulq_f32(a2, a4);
  if (fabsf(v4.f32[2] + vaddv_f32(*(float32x2_t *)v4.f32)) < 1.0)
  {
    float32x4_t v5 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a4, (int32x4_t)a4), (int8x16_t)a4, 0xCuLL);
    int32x4_t v6 = (int32x4_t)vmlaq_f32(vmulq_f32(v5, vnegq_f32(a2)), a4, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a2, (int32x4_t)a2), (int8x16_t)a2, 0xCuLL));
    float32x4_t v7 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v6, v6), (int8x16_t)v6, 0xCuLL);
    int32x4_t v8 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)v7, 0xCuLL), vnegq_f32(a4)), v7, v5);
    sub_22F1D2EA0(a1, a2, a3, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v8, v8), (int8x16_t)v8, 0xCuLL));
  }
}

void static PlaneUtil.findBestPlane(points:facing:)(float32x2_t *a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>, __n128 a4@<Q1>, __n128 a5@<Q2>, __n128 a6@<Q3>)
{
  unint64_t v6 = (unint64_t)a1[2];
  if (v6 < 3)
  {
    uint64_t v37 = 0;
    uint64_t v7 = 0;
    int64x2_t v38 = 0u;
    char v8 = 1;
LABEL_6:
    *(void *)a2 = v37;
    *(int64x2_t *)(a2 + 8) = v38;
    *(void *)(a2 + 24) = v7;
    *(unsigned char *)(a2 + 32) = v8 & 1;
    return;
  }
  if (v6 == 3)
  {
    a4.n128_u32[0] = a1[5].u32[0];
    a5.n128_u64[0] = (unint64_t)a1[4];
    a6.n128_u64[0] = (unint64_t)vsub_f32(a1[6], (float32x2_t)a5.n128_u64[0]);
    a6.n128_f32[2] = a1[7].f32[0] - a4.n128_f32[0];
    float32x4_t v46 = (float32x4_t)a6;
    double v9 = *(double *)&a1[8];
    a5.n128_u64[0] = (unint64_t)vsub_f32(*(float32x2_t *)&v9, (float32x2_t)a5.n128_u64[0]);
    *(float *)&double v9 = a1[9].f32[0] - a4.n128_f32[0];
    a5.n128_f32[2] = *(float *)&v9;
    float32x4_t v44 = (float32x4_t)a5;
    *(float32x2_t *)v10.i8 = _ss5SIMD3V17MeasureFoundationSfRszrlE7averageyABySfGSayAEGFZ_0((uint64_t)a1, v9, a4.n128_f64[0], a5.n128_f64[0]);
    char v8 = 0;
    float32x4_t v11 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v44, (int32x4_t)v44), (int8x16_t)v44, 0xCuLL), vnegq_f32(v46)), v44, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v46, (int32x4_t)v46), (int8x16_t)v46, 0xCuLL));
    float32x4_t v12 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), (int8x16_t)v11, 0xCuLL);
    int32x4_t v13 = (int32x4_t)vmulq_f32(v11, v11);
    v13.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v13.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v13, 2), *(float32x2_t *)v13.i8)).u32[0];
    float32x2_t v14 = vrsqrte_f32((float32x2_t)v13.u32[0]);
    float32x2_t v15 = vmul_f32(v14, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(v14, v14)));
    int8x16_t v16 = (int8x16_t)vmulq_n_f32(v12, vmul_f32(v15, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(v15, v15))).f32[0]);
    int64x2_t v38 = (int64x2_t)vextq_s8(v10, v16, 8uLL);
    uint64_t v37 = v10.i64[0];
    uint64_t v7 = v16.i64[1];
    goto LABEL_6;
  }
  uint64_t v37 = 0;
  uint64_t v7 = 0;
  uint64_t v17 = 0;
  unint64_t v18 = v6 - 2;
  long long v34 = a1 + 4;
  float32x4x4_t v19 = a1 + 8;
  int64x2_t v38 = 0u;
  char v8 = 1;
  unint64_t v20 = v6 - 2;
  __n128 v40 = a4;
  __n128 v41 = a6;
  __n128 v45 = a5;
  unint64_t v35 = v6 - 2;
  unint64_t v36 = (unint64_t)a1[2];
  while (v17 != v18)
  {
    if (v17 == v6) {
      goto LABEL_23;
    }
    uint64_t v21 = v17 + 1;
    long long v42 = *(_OWORD *)v34[2 * v17].f32;
    unint64_t v32 = v20;
    float32x4_t v33 = v19;
    uint64_t v31 = v17 + 1;
    do
    {
      if (v21 + 1 != v6)
      {
        if (v21 + 1 >= v6)
        {
          __break(1u);
          goto LABEL_22;
        }
        long long v43 = *(_OWORD *)v34[2 * v21].f32;
        unint64_t v23 = v19;
        unint64_t v24 = v20;
        do
        {
          long long v47 = *(_OWORD *)v23->f32;
          __swift_instantiateConcreteTypeFromMangledName(&qword_268694C60);
          unint64_t v25 = (_OWORD *)swift_allocObject();
          v25[1] = xmmword_22F2265B0;
          _OWORD v25[2] = v42;
          v25[3] = v43;
          simd_float4 v25[4] = v47;
          static PlaneUtil.findBestPlane(points:facing:)(v48, a3, v40, v45, v41);
          swift_setDeallocating();
          swift_deallocClassInstance();
          sub_22F1D2608((uint64_t)v48, (uint64_t)&v49);
          if ((v51 & 1) == 0)
          {
            if (v8) {
              goto LABEL_15;
            }
            v26.i64[0] = vdupq_laneq_s64(v38, 1).u64[0];
            v26.i64[1] = v7;
            int8x16_t v27 = (int8x16_t)vmulq_f32(v50, (float32x4_t)v45);
            v27.i32[0] = vextq_s8(v27, v27, 8uLL).u32[0];
            int8x16_t v28 = (int8x16_t)vmulq_f32(v26, (float32x4_t)v45);
            v28.i32[0] = vextq_s8(v28, v28, 8uLL).u32[0];
            float32x2_t v29 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v50.f32, 0);
            v29.i32[0] = v38.i32[2];
            *(float32x2_t *)v28.i8 = vabs_f32(vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v28.i8, *(int32x2_t *)v27.i8), vadd_f32(vmul_n_f32(v29, v45.n128_f32[0]), (float32x2_t)vzip2_s32(*(int32x2_t *)v28.i8, *(int32x2_t *)v27.i8))));
            if (vcgt_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v28.i8, 1), *(float32x2_t *)v28.i8).u8[0])
            {
LABEL_15:
              char v8 = 0;
              uint64_t v37 = v49.i64[0];
              uint64_t v7 = v50.i64[1];
              int64x2_t v38 = (int64x2_t)vextq_s8(v49, (int8x16_t)v50, 8uLL);
            }
            else
            {
              char v8 = 0;
            }
          }
          v23 += 2;
          --v24;
        }
        while (v24);
      }
      --v20;
      v19 += 2;
      unint64_t v18 = v35;
      unint64_t v6 = v36;
    }
    while (v21++ != v35);
    unint64_t v20 = v32 - 1;
    float32x4x4_t v19 = v33 + 2;
    uint64_t v17 = v31;
    if (v31 == v35) {
      goto LABEL_6;
    }
  }
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
}

uint64_t static PlaneUtil.findPossiblePlanes(points:)(uint64_t result, __n128 a2, double a3, int32x4_t a4, double a5, double a6, double a7, float32x4_t a8)
{
  unint64_t v8 = *(void *)(result + 16);
  if (v8 >= 3)
  {
    uint64_t v10 = 0;
    unint64_t v11 = v8 - 2;
    uint64_t v43 = result + 32;
    float32x4_t v12 = (float *)(result + 72);
    uint64_t v9 = MEMORY[0x263F8EE78];
    __asm { FMOV            V8.2S, #3.0 }
    unint64_t v18 = v8 - 2;
    unint64_t v44 = *(void *)(result + 16);
    unint64_t v19 = v8 - 2;
    while (v10 != v11)
    {
      if (v10 == v8) {
        goto LABEL_21;
      }
      uint64_t v20 = v10 + 1;
      long long v47 = *(_OWORD *)(v43 + 16 * v10);
      LODWORD(v21) = *(void *)(v43 + 16 * v10 + 8);
      unint64_t v41 = v18;
      long long v42 = v12;
      uint64_t v40 = v10 + 1;
      do
      {
        if (v20 + 1 != v8)
        {
          if (v20 + 1 >= v8)
          {
            __break(1u);
            goto LABEL_20;
          }
          long long v22 = *(_OWORD *)(v43 + 16 * v20);
          *(float32x2_t *)a4.i8 = vsub_f32(*(float32x2_t *)&v22, *(float32x2_t *)&v47);
          float v23 = COERCE_FLOAT(*(void *)(v43 + 16 * v20 + 8));
          a8.f32[0] = v23 - v21;
          float32x4_t v24 = (float32x4_t)a4;
          v24.f32[2] = v23 - v21;
          float32x2_t v25 = vadd_f32(*(float32x2_t *)&v47, *(float32x2_t *)&v22);
          float v26 = v21 + v23;
          *(uint64_t *)((char *)a8.i64 + 4) = a4.i64[0];
          float32x4_t v45 = vnegq_f32(v24);
          float32x4_t v46 = a8;
          int8x16_t v27 = v12;
          unint64_t v28 = v18;
          unsigned __int32 v29 = a2.n128_u32[3];
          do
          {
            unsigned __int32 v48 = v29;
            float v30 = *v27;
            float32x2_t v31 = *(float32x2_t *)(v27 - 2);
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)sub_22F19BB70(0, *(void *)(v9 + 16) + 1, 1, (char *)v9);
              uint64_t v9 = result;
            }
            unint64_t v33 = *(void *)(v9 + 16);
            unint64_t v32 = *(void *)(v9 + 24);
            if (v33 >= v32 >> 1)
            {
              uint64_t result = (uint64_t)sub_22F19BB70((char *)(v32 > 1), v33 + 1, 1, (char *)v9);
              uint64_t v9 = result;
            }
            v34.i32[3] = HIDWORD(v47);
            *(float32x2_t *)v34.i8 = vsub_f32(v31, *(float32x2_t *)&v47);
            *(float *)&v34.i32[2] = v30 - v21;
            *(float32x2_t *)&long long v35 = vdiv_f32(vadd_f32(v25, v31), _D8);
            *((float *)&v35 + 2) = (float)(v26 + v30) / 3.0;
            HIDWORD(v35) = 0;
            float32x4_t v36 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v34, v34), (int8x16_t)v34, 0xCuLL), v45), (float32x4_t)v34, v46);
            a4 = (int32x4_t)vmulq_f32(v36, v36);
            a4.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)a4.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(a4, 2), *(float32x2_t *)a4.i8)).u32[0];
            float32x2_t v37 = vrsqrte_f32((float32x2_t)a4.u32[0]);
            float32x2_t v38 = vmul_f32(v37, vrsqrts_f32((float32x2_t)a4.u32[0], vmul_f32(v37, v37)));
            a2 = (__n128)vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v36, (int32x4_t)v36), (int8x16_t)v36, 0xCuLL), vmul_f32(v38, vrsqrts_f32((float32x2_t)a4.u32[0], vmul_f32(v38, v38))).f32[0]);
            a2.n128_u32[3] = v48;
            *(void *)(v9 + 16) = v33 + 1;
            unint64_t v39 = v9 + 32 * v33;
            *(_OWORD *)(v39 + 32) = v35;
            *(__n128 *)(v39 + 48) = a2;
            v27 += 4;
            unsigned __int32 v29 = v48;
            --v28;
          }
          while (v28);
        }
        --v18;
        v12 += 4;
        _ZF = v20++ == v19;
        unint64_t v8 = v44;
      }
      while (!_ZF);
      unint64_t v11 = v19;
      unint64_t v18 = v41 - 1;
      float32x4_t v12 = v42 + 4;
      uint64_t v10 = v40;
      if (v40 == v19) {
        return v9;
      }
    }
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t PlaneUtil.deinit()
{
  return v0;
}

uint64_t PlaneUtil.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

double sub_22F1D2EA0(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4)
{
  int32x4_t v4 = (int32x4_t)vmulq_f32(a2, a2);
  v4.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v4, 2), vadd_f32(*(float32x2_t *)v4.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v4.i8, 1))).u32[0];
  float32x2_t v5 = vrsqrte_f32((float32x2_t)v4.u32[0]);
  float32x2_t v6 = vmul_f32(v5, vrsqrts_f32((float32x2_t)v4.u32[0], vmul_f32(v5, v5)));
  float32x4_t v7 = vmulq_n_f32(a2, vmul_f32(v6, vrsqrts_f32((float32x2_t)v4.u32[0], vmul_f32(v6, v6))).f32[0]);
  float32x4_t v8 = vmulq_f32(v7, a4);
  float32x4_t v9 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2), vaddq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1)));
  if (v9.f32[0] != 0.0)
  {
    float32x4_t v10 = vmulq_f32(vsubq_f32(a3, a1), a4);
    *(float32x2_t *)a1.f32 = vadd_f32(*(float32x2_t *)a1.f32, vmul_n_f32(*(float32x2_t *)v7.f32, vdivq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))), v9).f32[0]));
  }
  return *(double *)a1.i64;
}

float _s17MeasureFoundation9PlaneUtilC8distance5point5planeSfs5SIMD3VySfG_AI6center_AI6normalttFZ_0(int8x16_t a1, int8x16_t a2, float32x4_t a3)
{
  float32x2_t v3 = (float32x2_t)vext_s8(*(int8x8_t *)a1.i8, *(int8x8_t *)a2.i8, 4uLL);
  int32x2_t v4 = (int32x2_t)vextq_s8(a1, a1, 8uLL).u64[0];
  a1.i32[1] = a2.i32[1];
  *(float32x2_t *)a1.i8 = vadd_f32(vmul_laneq_f32((float32x2_t)vzip1_s32(v4, (int32x2_t)*(_OWORD *)&vextq_s8(a2, a2, 8uLL)), a3, 2), vadd_f32(vmul_f32(v3, (float32x2_t)vrev64_s32(*(int32x2_t *)a3.f32)), vmul_f32(*(float32x2_t *)a1.i8, *(float32x2_t *)a3.f32)));
  *(float *)a1.i32 = fabsf(vsub_f32(*(float32x2_t *)a1.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)a1.i8, 1)).f32[0]);
  return *(float *)a1.i32;
}

uint64_t type metadata accessor for PlaneUtil()
{
  return self;
}

uint64_t sub_22F1D2FAC(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v29 = a5;
  uint64_t v30 = a8;
  uint64_t v10 = v9;
  float32x2_t v38 = a1;
  uint64_t v39 = a2;
  uint64_t v28 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v40 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  float32x4_t v36 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  uint64_t v13 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  float32x2_t v15 = (char *)&v26 - v14;
  MEMORY[0x270FA5388](v13);
  unint64_t v33 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v31 = *(void *)(v17 - 8);
  uint64_t v32 = v17;
  MEMORY[0x270FA5388](v17);
  unint64_t v19 = (char *)&v26 - v18;
  uint64_t v34 = v8;
  uint64_t v20 = sub_22F223F28();
  if (!v20) {
    return sub_22F223D38();
  }
  uint64_t v21 = v20;
  int8x16_t v27 = v15;
  uint64_t v43 = sub_22F223928();
  uint64_t v35 = sub_22F2244E8();
  sub_22F224488();
  unint64_t v41 = v19;
  uint64_t result = sub_22F223F18();
  if (v21 < 0)
  {
    __break(1u);
  }
  else
  {
    float v23 = (void (**)(char *))(v36 + 2);
    ++v36;
    float32x2_t v37 = v23;
    float32x4_t v24 = v27;
    while (1)
    {
      float32x2_t v25 = (void (*)(char *, void))sub_22F223FD8();
      (*v37)(v24);
      v25(v42, 0);
      v38(v24, v40);
      if (v10) {
        break;
      }
      uint64_t v10 = 0;
      (*v36)(v24, AssociatedTypeWitness);
      sub_22F2244C8();
      sub_22F223F58();
      if (!--v21)
      {
        (*(void (**)(char *, uint64_t))(v31 + 8))(v41, v32);
        return v43;
      }
    }
    (*v36)(v24, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v41, v32);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v28 + 32))(v30, v40, v29);
  }
  return result;
}

uint64_t OrderedDictionary.dict.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t OrderedDictionary.init()()
{
  uint64_t v0 = sub_22F223D38();
  swift_getTupleTypeMetadata2();
  sub_22F223D38();
  sub_22F223988();
  sub_22F2237F8();
  swift_getTupleTypeMetadata2();
  sub_22F223D38();
  sub_22F223988();
  return v0;
}

void OrderedDictionary.subscript.getter()
{
}

uint64_t OrderedDictionary.subscript.setter(char *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = a3[3];
  uint64_t v7 = sub_22F2241F8();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v9);
  uint64_t v14 = (char *)&v22 - v13;
  uint64_t v15 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v17 = (void (*)(char *, uint64_t, uint64_t, uint64_t))((char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  float v23 = a1;
  v18(v14, a1, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, v6) == 1)
  {
    unint64_t v19 = *(void (**)(char *, uint64_t))(v8 + 8);
    v19(v14, v7);
    OrderedDictionary.removeValue(forKey:)(a2, a3, v11);
    (*(void (**)(uint64_t))(*(void *)(a3[2] - 8) + 8))(a2);
    v19(v23, v7);
    return ((uint64_t (*)(char *, uint64_t))v19)(v11, v7);
  }
  else
  {
    (*(void (**)(void (*)(char *, uint64_t, uint64_t, uint64_t), char *, uint64_t))(v15 + 32))(v17, v14, v6);
    OrderedDictionary.updateValue(_:forKey:)(v17, a2, (uint64_t)a3, v11);
    (*(void (**)(uint64_t))(*(void *)(a3[2] - 8) + 8))(a2);
    uint64_t v21 = *(void (**)(char *, uint64_t))(v8 + 8);
    v21(v23, v7);
    v21(v11, v7);
    return (*(uint64_t (**)(void (*)(char *, uint64_t, uint64_t, uint64_t), uint64_t))(v15 + 8))(v17, v6);
  }
}

uint64_t OrderedDictionary.updateValue(_:forKey:)@<X0>(void (*a1)(char *, uint64_t, uint64_t, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v8 = sub_22F2237F8();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s17MeasureFoundation16MeasurementEventV4time0B04DateVvpfi_0();
  sub_22F1D4468(a1, a2, (uint64_t)v11, a3, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t OrderedDictionary.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, char *a3@<X8>)
{
  unint64_t v33 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_268694BF0);
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  uint64_t v31 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a2[2];
  uint64_t v35 = *(void *)(v9 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  uint64_t v30 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v32 = (char *)&v29 - v12;
  uint64_t v13 = a2[3];
  uint64_t v14 = sub_22F2241F8();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  uint64_t v21 = (char *)&v29 - v20;
  uint64_t v22 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v34 = (char *)&v29 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  float32x4_t v36 = v3;
  uint64_t v37 = a1;
  MEMORY[0x230FB2430](a1, v3[1], v9, v13, a2[4]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v21, 1, v13) == 1)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v21, v14);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56))(v33, 1, 1, v13);
  }
  else
  {
    uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
    v29(v34, v21, v13);
    (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v32, v37, v9);
    float32x2_t v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56);
    v25(v18, 1, 1, v13);
    sub_22F2239A8();
    sub_22F2239D8();
    uint64_t v38 = *v36;
    sub_22F223DD8();
    swift_getWitnessTable();
    uint64_t result = sub_22F223FB8();
    if (v39)
    {
      __break(1u);
    }
    else
    {
      uint64_t v26 = v30;
      sub_22F223DA8();
      (*(void (**)(char *, uint64_t))(v35 + 8))(v26, v9);
      sub_22F2237F8();
      sub_22F2239A8();
      uint64_t v27 = (uint64_t)v31;
      sub_22F223978();
      sub_22F19EC54(v27);
      uint64_t v28 = v33;
      v29(v33, v34, v13);
      return ((uint64_t (*)(char *, void, uint64_t, uint64_t))v25)(v28, 0, 1, v13);
    }
  }
  return result;
}

void (*OrderedDictionary.subscript.modify(void *a1, uint64_t a2, void *a3))(uint64_t a1, char a2)
{
  uint64_t v7 = malloc(0x50uLL);
  *a1 = v7;
  void *v7 = a3;
  v7[1] = v3;
  uint64_t v8 = a3[3];
  uint64_t v9 = sub_22F2241F8();
  CVPixelBufferRef v7[2] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v7[3] = v10;
  size_t v11 = *(void *)(v10 + 64);
  v7[4] = malloc(v11);
  uint64_t v12 = malloc(v11);
  uint64_t v13 = a3[2];
  v7[5] = v12;
  v7[6] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = v14;
  v7[7] = v14;
  size_t v16 = *(void *)(v14 + 64);
  v7[8] = malloc(v16);
  v7[9] = malloc(v16);
  (*(void (**)(void))(v15 + 16))();
  MEMORY[0x230FB2430](a2, *(void *)(v3 + 8), v13, v8, a3[4]);
  return sub_22F1D3E58;
}

void sub_22F1D3E58(uint64_t a1, char a2)
{
  float v2 = *(void ***)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 64);
  int32x2_t v4 = *(void **)(*(void *)a1 + 72);
  if (a2)
  {
    float32x2_t v5 = v2[7];
    size_t v11 = v2[6];
    uint64_t v7 = (char *)v2[4];
    uint64_t v6 = (char *)v2[5];
    uint64_t v8 = v2[2];
    uint64_t v9 = v2[3];
    uint64_t v10 = *v2;
    ((void (*)(char *, char *, void *))v9[2])(v7, v6, v8);
    ((void (*)(void *, void *, void *))v5[4])(v3, v4, v11);
    OrderedDictionary.subscript.setter(v7, (uint64_t)v3, v10);
    ((void (*)(char *, void *))v9[1])(v6, v8);
  }
  else
  {
    uint64_t v7 = (char *)v2[4];
    uint64_t v6 = (char *)v2[5];
    OrderedDictionary.subscript.setter(v6, (uint64_t)v4, *v2);
  }
  free(v4);
  free(v3);
  free(v6);
  free(v7);
  free(v2);
}

uint64_t OrderedDictionary.subscript.getter@<X0>(uint64_t a1@<X0>, void (*a2)(void)@<X1>, uint64_t a3@<X4>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t a6@<X8>, uint64_t a7)
{
  uint64_t v19 = a2;
  uint64_t v12 = sub_22F2241F8();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v18 - v14;
  MEMORY[0x230FB2430](a1, a3, a4, a5, a7);
  uint64_t v16 = *(void *)(a5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, a5) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v16 + 32))(a6, v15, a5);
  }
  v19();
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t OrderedDictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_22F1D68D8(a1, a2, a5);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(a5 + 16) - 8) + 8))(a2);
  uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a5 + 24) - 8) + 8);
  return v8(a1);
}

void (*OrderedDictionary.subscript.modify(void *a1, uint64_t a2, void (*a3)(void), uint64_t a4, void *a5))(uint64_t **a1, char a2)
{
  uint64_t v10 = malloc(0x48uLL);
  *a1 = v10;
  *uint64_t v10 = a5;
  v10[1] = v5;
  uint64_t v11 = a5[3];
  v10[2] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  float32x4_t v10[3] = v12;
  size_t v13 = *(void *)(v12 + 64);
  v10[4] = malloc(v13);
  uint64_t v14 = malloc(v13);
  uint64_t v15 = a5[2];
  v10[5] = v14;
  v10[6] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = v16;
  v10[7] = v16;
  v10[8] = malloc(*(void *)(v16 + 64));
  (*(void (**)(void))(v17 + 16))();
  OrderedDictionary.subscript.getter(a2, a3, *(void *)(v5 + 8), v15, v11, (uint64_t)v14, a5[4]);
  return sub_22F1D432C;
}

void sub_22F1D432C(uint64_t **a1, char a2)
{
  float v2 = *a1;
  uint64_t v4 = (*a1)[7];
  uint64_t v3 = (void *)(*a1)[8];
  uint64_t v5 = (void *)(*a1)[5];
  uint64_t v6 = (*a1)[6];
  uint64_t v8 = (*a1)[3];
  uint64_t v7 = (void *)(*a1)[4];
  uint64_t v9 = (*a1)[2];
  uint64_t v10 = **a1;
  if (a2)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v8 + 16))((*a1)[4], v5, v9);
    sub_22F1D68D8((uint64_t)v7, (uint64_t)v3, v10);
    (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v6);
    uint64_t v11 = *(void (**)(void *, uint64_t))(v8 + 8);
    v11(v7, v9);
    v11(v5, v9);
  }
  else
  {
    sub_22F1D68D8((*a1)[5], (uint64_t)v3, v10);
    (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v6);
    (*(void (**)(void *, uint64_t))(v8 + 8))(v5, v9);
  }
  free(v3);
  free(v5);
  free(v7);
  free(v2);
}

uint64_t sub_22F1D4468@<X0>(void (*a1)(char *, uint64_t, uint64_t, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v41 = a3;
  long long v42 = a5;
  uint64_t v35 = a1;
  uint64_t v9 = *(void *)(a4 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v38 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(v12 + 24);
  uint64_t v14 = sub_22F2241F8();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v35 - v19;
  uint64_t v39 = v6;
  uint64_t v40 = a2;
  uint64_t v21 = *(void *)(v6 + 8);
  uint64_t v37 = *(void *)(a4 + 32);
  MEMORY[0x230FB2430](a2, v21, v9, v13);
  uint64_t v22 = *(void *)(v13 - 8);
  int v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v13);
  float32x4_t v24 = (void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  float32x2_t v25 = (void (**)(char *, void (*)(char *, uint64_t, uint64_t, uint64_t), uint64_t))(v22 + 16);
  float32x4_t v36 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56);
  if (v23 == 1)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
    uint64_t v26 = *v24;
    uint64_t v27 = v38;
    uint64_t v28 = v40;
    (*v24)(v38, v40, v9);
    (*v25)(v18, v35, v13);
    uint64_t v35 = *v36;
    v35(v18, 0, 1, v13);
    sub_22F2239A8();
    sub_22F2239D8();
    v26(v27, v28, v9);
    sub_22F223DD8();
    uint64_t v29 = v39;
    sub_22F223D98();
    v35(v42, 1, 1, v13);
    uint64_t v30 = v29;
  }
  else
  {
    uint64_t v32 = *(void (**)(uint64_t, char *, uint64_t))(v22 + 32);
    uint64_t v31 = v22 + 32;
    v32((uint64_t)v42, v20, v13);
    uint64_t v28 = v40;
    (*v24)(v38, v40, v9);
    (*(void (**)(char *, void (*)(char *, uint64_t, uint64_t, uint64_t), uint64_t))(v31 - 16))(v18, v35, v13);
    unint64_t v33 = *(void (**)(char *, void, uint64_t, uint64_t))(v31 + 24);
    v33(v18, 0, 1, v13);
    sub_22F2239A8();
    sub_22F2239D8();
    v33(v42, 0, 1, v13);
    uint64_t v30 = v39;
  }
  return sub_22F1D4848(v30, v28, v41, v9);
}

uint64_t sub_22F1D4848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_268694BF0);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a2, a4);
  uint64_t v13 = sub_22F2237F8();
  uint64_t v14 = *(void *)(v13 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v10, a3, v13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v10, 0, 1, v13);
  sub_22F2239A8();
  return sub_22F2239D8();
}

uint64_t OrderedDictionary.values.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v12[9] = a1;
  id v12[2] = a4;
  _OWORD v12[3] = a5;
  v12[4] = a6;
  v12[5] = a1;
  v12[6] = a2;
  v12[7] = a3;
  uint64_t v7 = sub_22F223DD8();
  swift_bridgeObjectRetain();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v10 = sub_22F1D2FAC((void (*)(char *, char *))sub_22F1D6A84, (uint64_t)v12, v7, a5, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v9);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_22F1D4ACC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v12 = sub_22F2241F8();
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v17 - v13;
  MEMORY[0x230FB2430](a1, a2, a3, a4, a5);
  uint64_t v15 = *(void *)(a4 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, a4);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(a6, v14, a4);
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall OrderedDictionary.removeAll()()
{
}

uint64_t OrderedDictionary.merge(with:)()
{
  return sub_22F1D4F24();
}

uint64_t sub_22F1D4D24(uint64_t a1, void (*a2)(char *, uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  float32x2_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_268694BF0);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24[1] = a8;
  uint64_t v16 = sub_22F2241F8();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)v24 - v18;
  uint64_t v20 = sub_22F2237F8();
  MEMORY[0x230FB2430](a1, a6, a7, v20, a9);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v15, 1, v20);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v23 = type metadata accessor for OrderedDictionary();
    sub_22F1D4468(v25, a1, (uint64_t)v15, v23, v19);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v15, v20);
  }
  return result;
}

uint64_t sub_22F1D4F24()
{
  return sub_22F223A58();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> static OrderedDictionary.+ infix(_:_:)()
{
}

uint64_t OrderedDictionary.filter(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v22 = *v3;
  uint64_t v4 = a3[3];
  uint64_t v14 = a3[2];
  uint64_t v15 = v4;
  uint64_t v16 = a3[4];
  uint64_t v17 = v3;
  uint64_t v5 = sub_22F223DD8();
  swift_bridgeObjectRetain();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v9 = sub_22F1D2FAC((void (*)(char *, char *))sub_22F1D6B58, (uint64_t)v13, v5, TupleTypeMetadata2, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v8);
  swift_bridgeObjectRelease();
  uint64_t v22 = v9;
  sub_22F223DD8();
  swift_getWitnessTable();
  uint64_t v21 = sub_22F224458();
  uint64_t v18 = OrderedDictionary.init()();
  uint64_t v19 = v10;
  uint64_t v20 = v11;
  swift_getWitnessTable();
  sub_22F223C48();
  swift_bridgeObjectRelease();
  return v22;
}

uint64_t sub_22F1D5274@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = sub_22F2241F8();
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v18 - v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(a6, a1, a3);
  MEMORY[0x230FB2430](a1, *(void *)(a2 + 8), a3, a4, a5);
  uint64_t v15 = *(void *)(a4 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, a4);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(a6 + *(int *)(TupleTypeMetadata2 + 48), v14, a4);
  }
  return result;
}

uint64_t sub_22F1D53F0(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  long long v42 = a3;
  uint64_t v43 = a6;
  uint64_t v41 = a1;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_268694BF0);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v13 = TupleTypeMetadata2 - 8;
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v15 = (char *)&v34 - v14;
  uint64_t v16 = sub_22F2241F8();
  uint64_t v38 = *(void *)(v16 - 8);
  uint64_t v39 = v16;
  MEMORY[0x270FA5388](v16);
  float32x4_t v36 = (char *)&v34 - v17;
  uint64_t v18 = *(int *)(v13 + 56);
  uint64_t v19 = (void (*)(char *, uint64_t, uint64_t, uint64_t))(a2 + v18);
  uint64_t v20 = &v15[v18];
  uint64_t v21 = *(void *)(a4 - 8);
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  uint64_t v40 = a2;
  v22(v15, a2, a4);
  uint64_t v23 = *(void *)(a5 - 8);
  float32x4_t v24 = *(void (**)(char *, void (*)(char *, uint64_t, uint64_t, uint64_t), uint64_t))(v23 + 16);
  uint64_t v37 = v20;
  uint64_t v35 = v19;
  float32x2_t v25 = v19;
  uint64_t v26 = a5;
  v24(v20, v25, a5);
  uint64_t v27 = *((void *)v42 + 2);
  uint64_t v28 = sub_22F2237F8();
  long long v42 = v15;
  MEMORY[0x230FB2430](v15, v27, a4, v28);
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = (uint64_t)v11;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48))(v11, 1, v28);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v32 = type metadata accessor for OrderedDictionary();
    unint64_t v33 = v36;
    sub_22F1D4468(v35, v40, v30, v32, v36);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v33, v39);
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v30, v28);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v37, v26);
    return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v42, a4);
  }
  return result;
}

uint64_t sub_22F1D573C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v24 = a2;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_268694BF0);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v23 - v14;
  uint64_t v16 = *(void *)(a3 + 16);
  uint64_t v17 = sub_22F2237F8();
  MEMORY[0x230FB2430](a1, v16, a4, v17, a6);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  uint64_t result = v19(v15, 1, v17);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    MEMORY[0x230FB2430](v24, *(void *)(a3 + 16), a4, v17, a6);
    uint64_t result = v19(v13, 1, v17);
    if (result != 1)
    {
      char v21 = sub_22F2237C8();
      uint64_t v22 = *(void (**)(char *, uint64_t))(v18 + 8);
      v22(v13, v17);
      v22(v15, v17);
      return v21 & 1;
    }
  }
  __break(1u);
  return result;
}

uint64_t OrderedDictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = sub_22F1D6BFC(a1, a2, a3, a4);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_22F1D5954@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = sub_22F1D6BFC(a1, a2[2], a2[3], a2[4]);
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v4;
  a3[1] = v6;
  a3[2] = v8;
  return result;
}

uint64_t OrderedDictionary.description.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v31 = a2;
  uint64_t v32 = a6;
  uint64_t v9 = sub_22F2241F8();
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v12 = (char *)v29 - v11;
  uint64_t v13 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v15 = (char *)v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v37 = sub_22F2241F8();
  uint64_t v34 = *(void (***)(char *, char *, uint64_t))(v37 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v37);
  float32x4_t v36 = (char *)v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)v29 - v19;
  uint64_t v39 = 91;
  unint64_t v40 = 0xE100000000000000;
  v29[0] = a1;
  void v38[3] = a1;
  uint64_t v21 = sub_22F223DD8();
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x230FB2670](v38, v21, WitnessTable);
  v38[2] = v38[0];
  sub_22F2245B8();
  sub_22F224588();
  uint64_t v23 = sub_22F2245A8();
  v34 += 4;
  uint64_t v35 = v23;
  uint64_t v33 = TupleTypeMetadata2 - 8;
  v29[1] = a5 - 8;
  uint64_t v30 = (void (**)(char *, char *, uint64_t))(v13 + 32);
  for (uint64_t i = (void (**)(char *, uint64_t))(v13 + 8); ; (*i)(v15, a4))
  {
    float32x2_t v25 = v36;
    sub_22F224598();
    (*v34)(v20, v25, v37);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48))(v20, 1, TupleTypeMetadata2) == 1)
    {
      swift_bridgeObjectRelease();
      sub_22F223B48();
      return v39;
    }
    uint64_t v26 = *(void *)v20;
    (*v30)(v15, &v20[*(int *)(TupleTypeMetadata2 + 48)], a4);
    v38[0] = 0;
    v38[1] = 0xE000000000000000;
    sub_22F224718();
    sub_22F223B48();
    MEMORY[0x230FB2430](v15, v31, a4, a5, v32);
    uint64_t v27 = *(void *)(a5 - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48))(v12, 1, a5);
    if (result == 1) {
      break;
    }
    sub_22F224718();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v12, a5);
    sub_22F223B48();
    swift_bridgeObjectRelease();
    uint64_t result = MEMORY[0x230FB27E0](v29[0], a4);
    if (__OFSUB__(result, 1))
    {
      __break(1u);
      break;
    }
    if (v26 != result - 1) {
      sub_22F223B48();
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_22F1D5DF8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return OrderedDictionary.description.getter(*v3, v3[1], a3, a1[2], a1[3], a1[4]);
}

uint64_t OrderedDictionary.startIndex.getter()
{
  return 0;
}

void OrderedDictionary.endIndex.getter()
{
}

uint64_t OrderedDictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14 = sub_22F2241F8();
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v19 - v15;
  sub_22F223E08();
  MEMORY[0x230FB2430](a1, a5, a7, a8, a9);
  uint64_t v17 = *(void *)(a8 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, a8);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v17 + 32))(a2, v16, a8);
  }
  __break(1u);
  return result;
}

uint64_t sub_22F1D5F64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F9E068](a1, a2, a3, a4, MEMORY[0x263F8D708]);
}

uint64_t sub_22F1D5F74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F9E078](a1, a2, a3, a4, MEMORY[0x263F8D708]);
}

uint64_t sub_22F1D5F80()
{
  swift_getWitnessTable();
  return sub_22F223ED8();
}

void *sub_22F1D5FF0(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_22F1D6630(a1, a2, a3, MEMORY[0x263F8D7A8]);
}

uint64_t sub_22F1D6008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x263F8D708];
  return MEMORY[0x270F9E068](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_22F1D608C()
{
  swift_getWitnessTable();
  return sub_22F223EB8();
}

uint64_t sub_22F1D6110(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x263F8D708];
  return MEMORY[0x270F9E078](a1, a2, a3, WitnessTable, v7);
}

void sub_22F1D6184()
{
}

uint64_t sub_22F1D61A8(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

void (*sub_22F1D61B8(uint64_t **a1, uint64_t *a2, void *a3))(uint64_t *a1, uint64_t a2)
{
  uint64_t v7 = (uint64_t *)malloc(0x40uLL);
  *a1 = v7;
  uint64_t v9 = a3[2];
  uint64_t v8 = a3[3];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v7[4] = TupleTypeMetadata2;
  uint64_t v11 = *(void *)(TupleTypeMetadata2 - 8);
  v7[5] = v11;
  uint64_t v12 = (char *)malloc(*(void *)(v11 + 64));
  v7[6] = (uint64_t)v12;
  uint64_t v13 = sub_22F1D63AC(v7, *a2, *v3, v3[1], v3[2], v9, v8, a3[4]);
  uint64_t v15 = v14;
  v7[7] = (uint64_t)v13;
  (*(void (**)(char *))(*(void *)(v9 - 8) + 16))(v12);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(&v12[*(int *)(TupleTypeMetadata2 + 48)], v15, v8);
  return sub_22F1D6334;
}

void sub_22F1D6334(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  (*(void (**)(void, void))(*(void *)(*a1 + 40) + 8))(*(void *)(*a1 + 48), *(void *)(*a1 + 32));
  uint64_t v4 = *(void **)(v3 + 48);
  (*(void (**)(uint64_t, uint64_t))(v3 + 56))(v3, a2);
  free(v4);
  free((void *)v3);
}

void (*sub_22F1D63AC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))(void *a1)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *a1 = TupleTypeMetadata2;
  uint64_t v16 = *(void *)(TupleTypeMetadata2 - 8);
  a1[1] = v16;
  uint64_t v17 = malloc(*(void *)(v16 + 64));
  a1[2] = (uint64_t)v17;
  OrderedDictionary.subscript.getter((uint64_t)v17, (uint64_t)v17 + *(int *)(TupleTypeMetadata2 + 48), a2, a3, a4, v18, a6, a7, a8);
  return sub_22F1D64C8;
}

void sub_22F1D64C8(void *a1)
{
  uint64_t v1 = (void *)a1[2];
  (*(void (**)(void *, void))(a1[1] + 8))(v1, *a1);
  free(v1);
}

uint64_t sub_22F1D6518(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v3 = MEMORY[0x263F8D708];
  return MEMORY[0x270F9E070](a1, WitnessTable, v3);
}

void sub_22F1D658C(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

uint64_t sub_22F1D65A8(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x263F8D708];
  return MEMORY[0x270F9E058](a1, a2, WitnessTable, v5);
}

void *sub_22F1D6618(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_22F1D6630(a1, a2, a3, MEMORY[0x263F8D7A0]);
}

void *sub_22F1D6630(void *a1, uint64_t a2, uint64_t a3, void *(*a4)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, void))
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = a4(&v9, a1, a2, WitnessTable, MEMORY[0x263F8D708]);
  *a1 = v9;
  return result;
}

__n128 sub_22F1D66A8@<Q0>(__n128 *a1@<X8>)
{
  unint64_t v2 = v1[1].n128_u64[0];
  __n128 result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = v2;
  a1[1].n128_u64[1] = 0;
  return result;
}

uint64_t sub_22F1D66BC(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270F9E108](a1, WitnessTable);
}

uint64_t sub_22F1D6710()
{
  return 2;
}

uint64_t sub_22F1D6718()
{
  swift_getWitnessTable();
  uint64_t v0 = sub_22F1D9890();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_22F1D6788()
{
  return sub_22F223C28();
}

uint64_t static OrderedDictionary<>.__derived_struct_equals(_:_:)()
{
  if ((sub_22F223DE8() & 1) == 0 || (sub_22F2239B8() & 1) == 0) {
    return 0;
  }
  sub_22F2237F8();
  sub_22F1D6FB4();
  return sub_22F2239B8();
}

uint64_t sub_22F1D6888()
{
  return static OrderedDictionary<>.__derived_struct_equals(_:_:)() & 1;
}

uint64_t sub_22F1D68D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = sub_22F2241F8();
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v10 = (char *)&v16 - v9;
  uint64_t v11 = *(void *)(a3 + 16);
  MEMORY[0x270FA5388](v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v11);
  uint64_t v14 = *(void *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v10, a1, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v10, 0, 1, v6);
  sub_22F2239A8();
  return sub_22F2239D8();
}

uint64_t sub_22F1D6A84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22F1D4ACC(a1, v2[6], v2[2], v2[3], v2[4], a2);
}

uint64_t sub_22F1D6AAC(uint64_t a1, void (*a2)(char *, uint64_t, uint64_t, uint64_t))
{
  return sub_22F1D4D24(a1, a2, v2[5], v2[6], v2[7], v2[8], v2[2], v2[3], v2[4]);
}

uint64_t sub_22F1D6AE0(uint64_t a1)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 40);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return v3(a1, a1 + *(int *)(TupleTypeMetadata2 + 48));
}

uint64_t type metadata accessor for OrderedDictionary()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_22F1D6B58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22F1D5274(a1, v2[5], v2[2], v2[3], v2[4], a2);
}

uint64_t sub_22F1D6B7C(uint64_t a1)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 40);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return v3(a1, a1 + *(int *)(TupleTypeMetadata2 + 48)) & 1;
}

uint64_t sub_22F1D6BDC(uint64_t a1, uint64_t a2)
{
  return sub_22F1D53F0(a1, a2, *(char **)(v2 + 40), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t sub_22F1D6BFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v37 = sub_22F2241F8();
  uint64_t v29 = *(void (***)(char *, uint64_t))(v37 - 8);
  MEMORY[0x270FA5388](v37);
  float32x4_t v36 = (char *)&v27 - v8;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v10 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v27 - v14;
  uint64_t v38 = a4;
  uint64_t v16 = OrderedDictionary.init()();
  uint64_t v40 = v16;
  uint64_t v41 = v17;
  uint64_t v42 = v18;
  if (!MEMORY[0x230FB2820](a1, TupleTypeMetadata2)) {
    return v16;
  }
  uint64_t v19 = 0;
  uint64_t v32 = &v15[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v33 = a2;
  uint64_t v34 = (void (**)(char *, uint64_t *, uint64_t))(v10 + 16);
  uint64_t v35 = v15;
  uint64_t v30 = a3 - 8;
  uint64_t v31 = a2 - 8;
  uint64_t v28 = (void (**)(char *, uint64_t))(v10 + 8);
  ++v29;
  while (1)
  {
    char v20 = sub_22F223D58();
    sub_22F223CF8();
    if (v20)
    {
      uint64_t v21 = v35;
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v35, a1+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(void *)(v10 + 72) * v19, TupleTypeMetadata2);
      uint64_t v22 = v19 + 1;
      if (__OFADD__(v19, 1)) {
        goto LABEL_10;
      }
      goto LABEL_5;
    }
    uint64_t result = sub_22F224418();
    uint64_t v21 = v35;
    if (v27 != 8) {
      break;
    }
    uint64_t v39 = result;
    (*v34)(v35, &v39, TupleTypeMetadata2);
    swift_unknownObjectRelease();
    uint64_t v22 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_10:
      __break(1u);
      return v40;
    }
LABEL_5:
    uint64_t v23 = (void (*)(char *, uint64_t, uint64_t, uint64_t))&v13[*(int *)(TupleTypeMetadata2 + 48)];
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 32))(v13, v21, v33);
    (*(void (**)(void (*)(char *, uint64_t, uint64_t, uint64_t), char *, uint64_t))(*(void *)(a3 - 8) + 32))(v23, v32, a3);
    uint64_t v24 = type metadata accessor for OrderedDictionary();
    float32x2_t v25 = v36;
    OrderedDictionary.updateValue(_:forKey:)(v23, (uint64_t)v13, v24, v36);
    (*v29)(v25, v37);
    (*v28)(v13, TupleTypeMetadata2);
    ++v19;
    if (v22 == MEMORY[0x230FB2820](a1, TupleTypeMetadata2)) {
      return v40;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_22F1D6FB4()
{
  unint64_t result = qword_2686955D0;
  if (!qword_2686955D0)
  {
    sub_22F2237F8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2686955D0);
  }
  return result;
}

uint64_t sub_22F1D700C()
{
  return swift_getWitnessTable();
}

uint64_t sub_22F1D7028()
{
  return sub_22F1D7224(&qword_2686955D8);
}

unint64_t sub_22F1D705C()
{
  unint64_t result = qword_2686955E8;
  if (!qword_2686955E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2686955E8);
  }
  return result;
}

uint64_t sub_22F1D70B0()
{
  return swift_getWitnessTable();
}

uint64_t sub_22F1D7114()
{
  return swift_getWitnessTable();
}

uint64_t sub_22F1D7130()
{
  return sub_22F1D7224(&qword_2686955F0);
}

uint64_t sub_22F1D7164()
{
  return swift_getWitnessTable();
}

uint64_t sub_22F1D71C8()
{
  return swift_getWitnessTable();
}

uint64_t sub_22F1D71E4()
{
  return MEMORY[0x263F8D6E0];
}

uint64_t sub_22F1D71F0()
{
  return sub_22F1D7224(qword_2686955F8);
}

uint64_t sub_22F1D7224(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2686955E0);
    sub_22F1D705C();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_22F1D7294()
{
  return swift_getWitnessTable();
}

uint64_t sub_22F1D72B0()
{
  return swift_getWitnessTable();
}

uint64_t sub_22F1D72CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 40);
}

uint64_t sub_22F1D72D8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *sub_22F1D731C(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_22F1D736C(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_22F1D73E4(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_22F1D7434(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_22F1D747C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_22F1D74BC(uint64_t a1, uint64_t a2)
{
  return sub_22F1D573C(a1, a2, v2[5], v2[2], v2[3], v2[4]) & 1;
}

double Quadrilateral.topLeft.getter()
{
  return *(double *)v0;
}

void Quadrilateral.topLeft.setter(double a1, double a2)
{
  *uint64_t v2 = a1;
  v2[1] = a2;
}

uint64_t (*Quadrilateral.topLeft.modify())()
{
  return nullsub_1;
}

double Quadrilateral.topRight.getter()
{
  return *(double *)(v0 + 16);
}

void Quadrilateral.topRight.setter(double a1, double a2)
{
  *(double *)(v2 + 16) = a1;
  *(double *)(v2 + 24) = a2;
}

uint64_t (*Quadrilateral.topRight.modify())()
{
  return nullsub_1;
}

double Quadrilateral.bottomRight.getter()
{
  return *(double *)(v0 + 32);
}

void Quadrilateral.bottomRight.setter(double a1, double a2)
{
  *(double *)(v2 + 32) = a1;
  *(double *)(v2 + 40) = a2;
}

uint64_t (*Quadrilateral.bottomRight.modify())()
{
  return nullsub_1;
}

double Quadrilateral.bottomLeft.getter()
{
  return *(double *)(v0 + 48);
}

void Quadrilateral.bottomLeft.setter(double a1, double a2)
{
  *(double *)(v2 + 48) = a1;
  *(double *)(v2 + 56) = a2;
}

uint64_t (*Quadrilateral.bottomLeft.modify())()
{
  return nullsub_1;
}

double sub_22F1D75B0()
{
  double result = 0.0;
  xmmword_26869BD00 = 0u;
  unk_26869BD10 = 0u;
  static Quadrilateral.zero = 0u;
  *(_OWORD *)algn_26869BCF0 = 0u;
  return result;
}

long long *Quadrilateral.zero.unsafeMutableAddressor()
{
  if (qword_268694470 != -1) {
    swift_once();
  }
  return &static Quadrilateral.zero;
}

double static Quadrilateral.zero.getter@<D0>(_OWORD *a1@<X8>)
{
  if (qword_268694470 != -1) {
    swift_once();
  }
  long long v2 = *(_OWORD *)algn_26869BCF0;
  *a1 = static Quadrilateral.zero;
  a1[1] = v2;
  double result = *(double *)&xmmword_26869BD00;
  long long v4 = unk_26869BD10;
  a1[2] = xmmword_26869BD00;
  a1[3] = v4;
  return result;
}

id VNRectangleObservation.quad.getter@<X0>(void *a1@<X8>)
{
  objc_msgSend(v1, sel_topLeft);
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  objc_msgSend(v1, sel_topRight);
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  objc_msgSend(v1, sel_bottomRight);
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  id result = objc_msgSend(v1, sel_bottomLeft);
  *a1 = v4;
  a1[1] = v6;
  a1[2] = v8;
  a1[3] = v10;
  a1[4] = v12;
  a1[5] = v14;
  a1[6] = v16;
  a1[7] = v17;
  return result;
}

ValueMetadata *type metadata accessor for Quadrilateral()
{
  return &type metadata for Quadrilateral;
}

void *Ransac.__allocating_init(solver:)()
{
  swift_allocObject();
  uint64_t v0 = sub_22F1D8414();
  swift_unknownObjectRelease();
  return v0;
}

void *Ransac.init(solver:)()
{
  uint64_t v0 = sub_22F1D8414();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t Ransac.fit(data:minInliners:iterations:errorThreshold:qualifiedInliners:bestData:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v75 = a6;
  uint64_t v84 = a5;
  uint64_t v92 = a3;
  uint64_t v106 = a2;
  uint64_t v73 = a1;
  uint64_t v10 = *(void *)(*(void *)v7 + 88);
  uint64_t v11 = *(void *)(*(void *)v7 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v103 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v13 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v102 = (char *)v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)v71 - v15;
  uint64_t v107 = v11;
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  char v80 = (char *)v71 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)v71 - v22;
  MEMORY[0x270FA5388](v21);
  float32x2_t v99 = (char *)v71 - v24;
  uint64_t v90 = sub_22F2241F8();
  uint64_t v74 = *(void *)(v90 - 8);
  uint64_t v25 = MEMORY[0x270FA5388](v90);
  float32x4_t v79 = (char *)v71 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  float v96 = (char *)v71 - v28;
  MEMORY[0x270FA5388](v27);
  uint64_t v30 = (char *)v71 - v29;
  uint64_t v31 = MEMORY[0x230FB41A0](v7 + 16);
  uint64_t v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56);
  uint64_t v108 = v31;
  if (!v31) {
    return v32(v73, 1, 1, v17);
  }
  float32x4_t v78 = v23;
  uint64_t v72 = v32;
  v32((uint64_t)v30, 1, 1, v17);
  uint64_t result = MEMORY[0x230FB27E0](v106, AssociatedTypeWitness);
  if (a4 < 0) {
    goto LABEL_45;
  }
  uint64_t v34 = a4;
  float32x4_t v76 = v30;
  if (!a4)
  {
LABEL_38:
    swift_unknownObjectRelease();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v74 + 32))(v73, v76, v90);
  }
  uint64_t v35 = result;
  v71[1] = v18 + 56;
  uint64_t v36 = 0;
  unsigned long long v94 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 24);
  uint64_t v37 = (char **)(v7 + 32);
  float32x4_t v98 = (uint64_t *)(v7 + 24);
  id v104 = (uint64_t *)(v7 + 40);
  uint64_t v93 = (unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  float32x4_t v89 = (void (**)(void))(v18 + 32);
  uint64_t v105 = v10 + 32;
  uint64_t v101 = (void (**)(char *, char *, uint64_t))(v103 + 16);
  uint64_t v38 = (uint64_t (**)(char *, uint64_t))(v103 + 8);
  float32x4_t v83 = (void (**)(char *, char *, uint64_t))(v18 + 16);
  float32x2_t v85 = (uint64_t (**)(char *, uint64_t))(v18 + 8);
  float32x4_t v88 = (uint64_t (**)(char *, uint64_t))(v74 + 8);
  float v39 = INFINITY;
  uint64_t v95 = v10 + 24;
  uint64_t v77 = v10 + 40;
  uint64_t v91 = v34;
  uint64_t v97 = v17;
  while (1)
  {
    if (v36 == v34) {
      goto LABEL_42;
    }
    uint64_t v40 = v36;
    swift_beginAccess();
    swift_beginAccess();
    uint64_t v41 = v107;
    sub_22F1D84CC(v106, v92, v37);
    swift_endAccess();
    swift_endAccess();
    uint64_t v42 = swift_bridgeObjectRetain();
    uint64_t v100 = v40;
    uint64_t v43 = v41;
    uint64_t v44 = v97;
    v94(v42, v40, v43, v10);
    float32x4_t v45 = v96;
    swift_bridgeObjectRelease();
    float32x4_t v46 = *v93;
    if ((*v93)(v45, 1, v44) == 1)
    {
      uint64_t result = (*v88)(v45, v90);
      uint64_t v34 = v91;
      goto LABEL_6;
    }
    float32x4_t v87 = v46;
    long long v47 = *v89;
    ((void (*)(char *, char *, uint64_t))*v89)(v99, v45, v44);
    swift_beginAccess();
    uint64_t v103 = sub_22F223DD8();
    sub_22F223DC8();
    uint64_t result = swift_endAccess();
    if (v35 < 0) {
      goto LABEL_43;
    }
    float32x2_t v86 = v47;
    unsigned __int32 v48 = v99;
    if (v35) {
      break;
    }
LABEL_26:
    uint64_t v54 = swift_bridgeObjectRetain();
    uint64_t v55 = MEMORY[0x230FB27E0](v54, AssociatedTypeWitness);
    swift_bridgeObjectRelease();
    uint64_t v56 = swift_bridgeObjectRetain();
    uint64_t v57 = MEMORY[0x230FB27E0](v56, AssociatedTypeWitness);
    uint64_t result = swift_bridgeObjectRelease();
    if (__OFADD__(v55, v57)) {
      goto LABEL_44;
    }
    if (v55 + v57 < v84)
    {
      uint64_t result = (*v85)(v99, v97);
LABEL_36:
      uint64_t v34 = v91;
      goto LABEL_6;
    }
    uint64_t v109 = *v98;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t WitnessTable = swift_getWitnessTable();
    sub_22F223D88();
    swift_endAccess();
    uint64_t v58 = swift_bridgeObjectRetain();
    uint64_t v59 = v79;
    v94(v58, v100, v107, v10);
    swift_bridgeObjectRelease();
    uint64_t v60 = v80;
    uint64_t v61 = v97;
    float32x2_t v81 = *v83;
    v81(v80, v99, v97);
    if (v87(v59, 1, v61) == 1)
    {
      float32x4_t v62 = v78;
      v86();
      (*v88)(v59, v90);
    }
    else
    {
      (*v85)(v60, v61);
      float32x4_t v62 = v78;
      v86();
    }
    uint64_t v63 = *v104;
    float32x4_t v64 = *(float (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 40);
    swift_bridgeObjectRetain();
    float v65 = v64(v62, v63, v107, v10);
    swift_bridgeObjectRelease();
    if (v65 >= v39)
    {
      uint64_t v69 = *v85;
      uint64_t v70 = v97;
      (*v85)(v62, v97);
      uint64_t result = v69(v99, v70);
      goto LABEL_36;
    }
    float v66 = v76;
    (*v88)(v76, v90);
    uint64_t v67 = v97;
    v81(v66, v62, v97);
    v72((uint64_t)v66, 0, 1, v67);
    sub_22F223DC8();
    uint64_t v110 = *v104;
    swift_bridgeObjectRetain();
    sub_22F223D88();
    int v68 = *v85;
    (*v85)(v62, v67);
    uint64_t result = v68(v99, v67);
    uint64_t v34 = v91;
    if (v65 == 0.0) {
      goto LABEL_38;
    }
    float v39 = v65;
LABEL_6:
    uint64_t v36 = v100 + 1;
    if (v100 + 1 == v34) {
      goto LABEL_38;
    }
  }
  uint64_t v49 = 0;
  while (1)
  {
    if (v49 == v35)
    {
      __break(1u);
      goto LABEL_38;
    }
    float32x4_t v50 = *v37;
    uint64_t v51 = *((void *)*v37 + 2);
    if (!v51) {
      goto LABEL_24;
    }
    if (*((void *)v50 + 4) != v49)
    {
      if (v51 == 1) {
        goto LABEL_24;
      }
      if (*((void *)v50 + 5) != v49) {
        break;
      }
    }
LABEL_13:
    if (++v49 == v35) {
      goto LABEL_26;
    }
  }
  if (v51 == 2)
  {
LABEL_24:
    sub_22F223E08();
    if ((*(float (**)(char *, char *, uint64_t, uint64_t))(v10 + 32))(v48, v16, v107, v10) <= a7)
    {
      (*v101)(v102, v16, AssociatedTypeWitness);
      swift_beginAccess();
      sub_22F223D98();
      swift_endAccess();
    }
    uint64_t result = (*v38)(v16, AssociatedTypeWitness);
    goto LABEL_13;
  }
  uint64_t v52 = 6;
  while (1)
  {
    uint64_t v53 = v52 - 3;
    if (__OFADD__(v52 - 4, 1)) {
      break;
    }
    if (*(void *)&v50[8 * v52] == v49) {
      goto LABEL_13;
    }
    ++v52;
    if (v53 == v51) {
      goto LABEL_24;
    }
  }
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
  return result;
}

Swift::Void __swiftcall Ransac.getRandomItems(data:num:indices:values:)(Swift::OpaquePointer data, Swift::Int num, Swift::OpaquePointer *indices, Swift::OpaquePointer *values)
{
}

uint64_t Ransac.deinit()
{
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t Ransac.__deallocating_deinit()
{
  Ransac.deinit();
  return swift_deallocClassInstance();
}

void *sub_22F1D8414()
{
  swift_unknownObjectWeakInit();
  swift_getAssociatedTypeWitness();
  uint64_t v1 = sub_22F223D38();
  uint64_t v2 = MEMORY[0x263F8EE78];
  v0[3] = v1;
  v0[4] = v2;
  v0[5] = sub_22F223D38();
  swift_unknownObjectWeakAssign();
  return v0;
}

void sub_22F1D84CC(uint64_t a1, uint64_t a2, char **a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *a3;
  if (isUniquelyReferenced_nonNull_native)
  {
    sub_22F1842F0(0, *((void *)v7 + 2));
  }
  else
  {
    *a3 = (char *)sub_22F1ACE6C(0, *((void *)v7 + 3) >> 1);
    swift_bridgeObjectRelease();
  }
  sub_22F223DD8();
  sub_22F223DC8();
  if (*((void *)*a3 + 2) >= a2) {
    return;
  }
  uint64_t v8 = MEMORY[0x230FB27E0](a1, AssociatedTypeWitness);
  if (__OFSUB__(v8, 1)) {
    goto LABEL_30;
  }
  double v9 = (double)(v8 - 1);
  while (1)
  {
    double v11 = round(drand48() * v9);
    if ((~*(void *)&v11 & 0x7FF0000000000000) == 0)
    {
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    if (v11 <= -9.22337204e18) {
      goto LABEL_27;
    }
    if (v11 >= 9.22337204e18) {
      goto LABEL_28;
    }
    uint64_t v12 = (uint64_t)v11;
    uint64_t v13 = *a3;
    uint64_t v10 = *((void *)*a3 + 2);
    if (!v10) {
      goto LABEL_21;
    }
    if (*((void *)v13 + 4) != v12)
    {
      if (v10 == 1) {
        goto LABEL_21;
      }
      if (*((void *)v13 + 5) != v12) {
        break;
      }
    }
LABEL_8:
    if (v10 >= a2) {
      return;
    }
  }
  if (v10 == 2)
  {
LABEL_21:
    char v16 = swift_isUniquelyReferenced_nonNull_native();
    *a3 = v13;
    if ((v16 & 1) == 0)
    {
      uint64_t v13 = sub_22F19B32C(0, v10 + 1, 1, v13);
      *a3 = v13;
    }
    unint64_t v18 = *((void *)v13 + 2);
    unint64_t v17 = *((void *)v13 + 3);
    if (v18 >= v17 >> 1) {
      uint64_t v13 = sub_22F19B32C((char *)(v17 > 1), v18 + 1, 1, v13);
    }
    *((void *)v13 + 2) = v18 + 1;
    *(void *)&v13[8 * v18 + 32] = v12;
    *a3 = v13;
    sub_22F223E08();
    sub_22F223D98();
    uint64_t v10 = *((void *)*a3 + 2);
    goto LABEL_8;
  }
  uint64_t v14 = 6;
  while (1)
  {
    uint64_t v15 = v14 - 3;
    if (__OFADD__(v14 - 4, 1)) {
      break;
    }
    if (*(void *)&v13[8 * v14] == v12) {
      goto LABEL_8;
    }
    ++v14;
    if (v15 == v10) {
      goto LABEL_21;
    }
  }
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
}

uint64_t sub_22F1D876C()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for Ransac()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t RingBuffer.init(capacity:)(uint64_t a1)
{
  return a1;
}

uint64_t RingBuffer.subscript.getter(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (__OFADD__(a3, result))
  {
    __break(1u);
    goto LABEL_7;
  }
  if (!a2)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (a3 + result != 0x8000000000000000 || a2 != -1) {
    return sub_22F223E08();
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t RingBuffer.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_22F1D9AA0(a1, a2, a3);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 8);
  return v5(a1);
}

void (*RingBuffer.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x38uLL);
  *a1 = v7;
  void *v7 = a2;
  v7[1] = a3;
  uint64_t v8 = *(void *)(a3 + 16);
  CVPixelBufferRef v7[2] = v3;
  v7[3] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[4] = v9;
  size_t v10 = *(void *)(v9 + 64);
  v7[5] = malloc(v10);
  v7[6] = malloc(v10);
  RingBuffer.subscript.getter(a2, *v3, v3[1]);
  return sub_22F1D89D8;
}

void sub_22F1D89D8(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[5];
  uint64_t v4 = (void *)(*a1)[6];
  uint64_t v5 = (*a1)[3];
  uint64_t v6 = (*a1)[4];
  uint64_t v7 = (*a1)[1];
  uint64_t v8 = **a1;
  if (a2)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[5], v4, v5);
    sub_22F1D9AA0((uint64_t)v3, v8, v7);
    uint64_t v9 = *(void (**)(void *, uint64_t))(v6 + 8);
    v9(v3, v5);
    v9(v4, v5);
  }
  else
  {
    sub_22F1D9AA0((*a1)[6], v8, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t RingBuffer.append(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v9 = v2[1];
  uint64_t v11 = v2[2];
  uint64_t v21 = *v2;
  uint64_t v10 = v21;
  unint64_t v22 = v9;
  uint64_t v23 = v11;
  swift_getWitnessTable();
  if (sub_22F223F78() < v10)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
    sub_22F223DD8();
    return sub_22F223D98();
  }
  sub_22F223DD8();
  sub_22F223D28();
  uint64_t v13 = v2[2];
  sub_22F1D9574(v9, v3[2]);
  char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
  uint64_t v15 = v13 & 0xFFFFFFFFFFFFFF8;
  if ((isClassOrObjCExistentialType & 1) == 0) {
    uint64_t v15 = v13;
  }
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 24))(v15+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v9, a1, v5);
  uint64_t v16 = v3[1];
  BOOL v17 = __OFADD__(v16, 1);
  uint64_t v18 = v16 + 1;
  if (v17)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v19 = *v3;
  if (!*v3)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }
  if (v18 == 0x8000000000000000 && v19 == -1) {
    goto LABEL_13;
  }
  v3[1] = v18 % v19;
  return result;
}

Swift::Void __swiftcall RingBuffer.clear()()
{
  sub_22F223DD8();
  sub_22F223DC8();
  *(void *)(v0 + 8) = 0;
}

uint64_t RingBuffer.startIndex.getter()
{
  return 0;
}

void RingBuffer.endIndex.getter()
{
}

Swift::Int __swiftcall RingBuffer.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

uint64_t sub_22F1D8D24()
{
  swift_getWitnessTable();
  return sub_22F223ED8();
}

uint64_t sub_22F1D8D94(void *a1)
{
  swift_getWitnessTable();
  uint64_t result = sub_22F223ED8();
  *a1 = v3;
  return result;
}

uint64_t sub_22F1D8E04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x263F8D708];
  return MEMORY[0x270F9E068](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_22F1D8E88()
{
  swift_getWitnessTable();
  return sub_22F223EB8();
}

uint64_t sub_22F1D8F0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x263F8D708];
  return MEMORY[0x270F9E078](a1, a2, a3, WitnessTable, v7);
}

void sub_22F1D8F80()
{
}

uint64_t sub_22F1D8FA0(uint64_t result)
{
  *BOOL v1 = result;
  return result;
}

void (*sub_22F1D8FB0(void *a1, uint64_t *a2, uint64_t a3))(void *a1)
{
  uint64_t v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[4] = sub_22F1D9028(v7, *a2, *v3, v3[1], v3[2], *(void *)(a3 + 16));
  return sub_22F1C623C;
}

void (*sub_22F1D9028(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6))(void *a1)
{
  uint64_t v9 = *(void *)(a6 - 8);
  *a1 = a6;
  a1[1] = v9;
  a1[2] = malloc(*(void *)(v9 + 64));
  RingBuffer.subscript.getter(a2, a3, a4);
  return sub_22F1D64C8;
}

uint64_t sub_22F1D90FC(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v3 = MEMORY[0x263F8D708];
  return MEMORY[0x270F9E070](a1, WitnessTable, v3);
}

uint64_t sub_22F1D9168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_22F1D9620(a1, a2, a3, a4, MEMORY[0x263F8D870], MEMORY[0x263F8D170]);
}

uint64_t sub_22F1D91A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_22F1D9620(a1, a2, a3, a4, MEMORY[0x263F8D1A0], MEMORY[0x263F8D180]);
}

void *sub_22F1D91E8@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFADD__(*result, 1)) {
    __break(1u);
  }
  else {
    *a2 = *result + 1;
  }
  return result;
}

void *sub_22F1D9200(void *result)
{
  if (__OFADD__(*result, 1)) {
    __break(1u);
  }
  else {
    ++*result;
  }
  return result;
}

uint64_t sub_22F1D9218(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270F9E108](a1, WitnessTable);
}

uint64_t sub_22F1D926C()
{
  swift_getWitnessTable();
  uint64_t v0 = sub_22F1D9890();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t RingBuffer<A>.description.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = type metadata accessor for RingBuffer();
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x230FB26A0](&v18, v7, WitnessTable);
  long long v16 = v18;
  uint64_t v17 = v19;
  v15[2] = a4;
  v15[3] = a5;
  uint64_t v9 = sub_22F224408();
  _OWORD v15[4] = swift_getWitnessTable();
  uint64_t v10 = swift_getWitnessTable();
  uint64_t v12 = sub_22F1D2FAC((void (*)(char *, char *))sub_22F1D9BBC, (uint64_t)v15, v9, a4, MEMORY[0x263F8E628], v10, MEMORY[0x263F8E658], v11);
  swift_bridgeObjectRelease();
  uint64_t v13 = MEMORY[0x230FB2730](v12, a4);
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t sub_22F1D9428(uint64_t a1, uint64_t a2)
{
  return RingBuffer<A>.description.getter(*v2, v2[1], v2[2], *(void *)(a1 + 16), *(void *)(a2 - 8));
}

float RingBuffer<A>.average()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  if (!v3)
  {
    float v5 = 0.0;
    return v5 / (float)v3;
  }
  if (v3 == 1)
  {
    uint64_t v4 = 0;
    float v5 = 0.0;
LABEL_8:
    uint64_t v8 = v3 - v4;
    uint64_t v9 = (float *)(a3 + 4 * v4 + 32);
    do
    {
      float v10 = *v9++;
      float v5 = v5 + v10;
      --v8;
    }
    while (v8);
    return v5 / (float)v3;
  }
  uint64_t v4 = v3 & 0x7FFFFFFFFFFFFFFELL;
  uint64_t v6 = (float *)(a3 + 36);
  float v5 = 0.0;
  uint64_t v7 = v3 & 0x7FFFFFFFFFFFFFFELL;
  do
  {
    float v5 = (float)(v5 + *(v6 - 1)) + *v6;
    v6 += 2;
    v7 -= 2;
  }
  while (v7);
  if (v3 != v4) {
    goto LABEL_8;
  }
  return v5 / (float)v3;
}

float32x2_t RingBuffer<A>.average()(double a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (qword_2686943C0 != -1) {
    swift_once();
  }
  long long v7 = static SIMD3<>.zero;
  uint64_t v8 = *(void *)(a6 + 16);
  if (v8)
  {
    uint64_t v9 = (float *)(a6 + 40);
    uint64_t v10 = *(void *)(a6 + 16);
    do
    {
      *(float32x2_t *)&long long v12 = vadd_f32(*(float32x2_t *)&v7, *(float32x2_t *)(v9 - 2));
      float v11 = *v9;
      v9 += 4;
      *((float *)&v12 + 2) = *((float *)&v7 + 2) + v11;
      HIDWORD(v12) = 0;
      long long v7 = v12;
      --v10;
    }
    while (v10);
  }
  else
  {
    *(void *)&long long v12 = static SIMD3<>.zero;
  }
  *(float *)&a3 = (float)v8;
  return vdiv_f32(*(float32x2_t *)&v12, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a3, 0));
}

uint64_t sub_22F1D9574(unint64_t a1, uint64_t a2)
{
  uint64_t result = _swift_isClassOrObjCExistentialType();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v5 = a2 & 0xFFFFFFFFFFFFFF8;
  if ((result & 1) == 0) {
    uint64_t v5 = a2;
  }
  if (*(void *)(v5 + 16) <= a1) {
    goto LABEL_7;
  }
  return result;
}

uint64_t sub_22F1D95C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_22F1D9620(a1, a2, a3, a4, MEMORY[0x263F8D870], MEMORY[0x263F8D170]);
}

uint64_t sub_22F1D95F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_22F1D9620(a1, a2, a3, a4, MEMORY[0x263F8D1A0], MEMORY[0x263F8D180]);
}

uint64_t sub_22F1D9620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t), uint64_t (*a6)(char *, char *, uint64_t, uint64_t))
{
  uint64_t v23 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = a5(0, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v22 - v14;
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v13);
  long long v18 = (char *)&v22 - v17;
  char v19 = sub_22F223A48();
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a2, v11);
  if ((v19 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, AssociatedTypeWitness);
    goto LABEL_5;
  }
  char v20 = v23(v18, &v15[*(int *)(v11 + 36)], AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, AssociatedTypeWitness);
  if ((v20 & 1) == 0) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t sub_22F1D9894(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v5 = sub_22F224028();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)v17 - v10;
  v17[1] = AssociatedConformanceWitness;
  LOBYTE(AssociatedConformanceWitness) = sub_22F223A48();
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v12(v11, a1, v5);
  v12(v9, a2, v5);
  if ((AssociatedConformanceWitness & 1) == 0)
  {
    uint64_t v16 = *(void (**)(char *, uint64_t))(v6 + 8);
    v16(v9, v5);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v16)(v11, v5);
    goto LABEL_5;
  }
  char v13 = sub_22F223A48();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  v14(v9, v5);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v14)(v11, v5);
  if ((v13 & 1) == 0) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t sub_22F1D9AA0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3[1];
  BOOL v5 = __OFADD__(v4, a2);
  uint64_t v6 = v4 + a2;
  if (v5)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v7 = v3;
  uint64_t v8 = *v3;
  if (!*v3)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if (v6 == 0x8000000000000000 && v8 == -1) {
    goto LABEL_14;
  }
  uint64_t v10 = result;
  uint64_t v11 = *(void *)(a3 + 16);
  unint64_t v12 = v6 % v8;
  sub_22F223DD8();
  sub_22F223D28();
  uint64_t v13 = v3[2];
  sub_22F1D9574(v12, v7[2]);
  char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
  uint64_t v15 = v13 & 0xFFFFFFFFFFFFFF8;
  if ((isClassOrObjCExistentialType & 1) == 0) {
    uint64_t v15 = v13;
  }
  uint64_t v16 = *(void *)(v11 - 8);
  uint64_t v17 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v16 + 24);
  unint64_t v18 = v15
      + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))
      + *(void *)(v16 + 72) * v12;
  return v17(v18, v10, v11);
}

uint64_t type metadata accessor for RingBuffer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_22F1D9BBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v2 + 16) - 8) + 16))(a2, a1);
}

uint64_t sub_22F1D9C14()
{
  return swift_getWitnessTable();
}

uint64_t sub_22F1D9C30()
{
  return swift_getWitnessTable();
}

uint64_t sub_22F1D9C94()
{
  return swift_getWitnessTable();
}

uint64_t sub_22F1D9CB0()
{
  return swift_getWitnessTable();
}

uint64_t sub_22F1D9D14()
{
  return swift_getWitnessTable();
}

uint64_t sub_22F1D9D30(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_22F1D9D68()
{
  return swift_bridgeObjectRelease();
}

void *sub_22F1D9D70(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_22F1D9DBC(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_22F1D9DF8(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_22F1D9E40(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t MetalScene.deinit()
{
  swift_release();
  swift_unknownObjectUnownedDestroy();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  return v0;
}

uint64_t MetalScene.rootNode.getter()
{
  return swift_retain();
}

MTLRenderPassDescriptor_optional __swiftcall MetalScene.makeDefaultRenderPassDescriptor()()
{
  BOOL v1 = *(void **)(v0 + 48);
  if (!v1
    || (objc_msgSend(v1, sel_copy),
        sub_22F224268(),
        swift_unknownObjectRelease(),
        sub_22F1DA12C(),
        (swift_dynamicCast() & 1) == 0))
  {
    id v3 = 0;
    goto LABEL_10;
  }
  id v3 = v13;
  id v4 = objc_msgSend(v13, sel_colorAttachments);
  id v5 = objc_msgSend(v4, sel_objectAtIndexedSubscript_, 0);

  if (!v5)
  {
    __break(1u);
    goto LABEL_12;
  }
  objc_msgSend(v5, sel_setLoadAction_, 1);

  id v7 = objc_msgSend(v13, sel_colorAttachments);
  id v8 = objc_msgSend(v7, sel_objectAtIndexedSubscript_, 0);

  if (!v8)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  objc_msgSend(v8, sel_setStoreAction_, 1);

  id v9 = objc_msgSend(v13, sel_colorAttachments);
  id v10 = objc_msgSend(v9, sel_objectAtIndexedSubscript_, 0);

  if (!v10)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  objc_msgSend(v10, sel_setClearColor_, 0.0, 0.0, 0.0, 0.0);

  id v6 = objc_msgSend(v13, sel_depthAttachment);
  if (!v6)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v11 = v6;
  objc_msgSend(v6, sel_setLoadAction_, 1);

  id v6 = objc_msgSend(v13, sel_depthAttachment);
  if (!v6)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  unint64_t v12 = v6;
  objc_msgSend(v6, sel_setStoreAction_, 1);

LABEL_10:
  id v6 = v3;
LABEL_16:
  result.value.super.isCGFloat a = (Class)v6;
  result.is_nil = v2;
  return result;
}

unint64_t sub_22F1DA12C()
{
  unint64_t result = qword_268695780;
  if (!qword_268695780)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_268695780);
  }
  return result;
}

void sub_22F1DA16C(void *a1)
{
  id v7 = (id)MetalScene.makeDefaultRenderPassDescriptor()();
  if (!v7) {
    return;
  }
  id v2 = objc_msgSend(v7, sel_colorAttachments);
  id v3 = objc_msgSend(v2, sel_objectAtIndexedSubscript_, 0);

  if (!v3)
  {
    __break(1u);
    goto LABEL_13;
  }
  objc_msgSend(v3, sel_setLoadAction_, 2);

  id v4 = objc_msgSend(v7, sel_depthAttachment);
  if (!v4)
  {
LABEL_13:
    __break(1u);
    return;
  }
  id v5 = v4;
  objc_msgSend(v4, sel_setLoadAction_, 2);

  id v6 = objc_msgSend(a1, sel_renderCommandEncoderWithDescriptor_, v7);
  if (v6)
  {
    objc_msgSend(v6, sel_endEncoding);

    swift_unknownObjectRelease();
  }
  else
  {
  }
}

void sub_22F1DA2C0()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_22F223908();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  id v5 = (char *)&aBlock[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v0 + 72) == 1)
  {
    uint64_t Strong = (void *)swift_unknownObjectUnownedLoadStrong();
    id v7 = objc_msgSend(Strong, sel_currentRenderPassDescriptor);

    if (v7)
    {
      objc_msgSend(v7, sel_copy);
      sub_22F224268();
      swift_unknownObjectRelease();
      sub_22F1DA12C();
      int v8 = swift_dynamicCast();
      uint64_t v9 = aBlock[6];
      if (!v8) {
        uint64_t v9 = 0;
      }
      id v10 = *(void **)(v1 + 48);
      *(void *)(v1 + 48) = v9;

      id v11 = objc_msgSend(*(id *)(v1 + 56), sel_commandBuffer);
      if (v11)
      {
        unint64_t v12 = v11;
        sub_22F2238F8();
        sub_22F224148();
        (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
        uint64_t v13 = swift_allocObject();
        swift_weakInit();
        aBlock[4] = sub_22F1DA7EC;
        aBlock[5] = v13;
        aBlock[0] = MEMORY[0x263EF8330];
        aBlock[1] = 1107296256;
        aBlock[2] = sub_22F1AF28C;
        aBlock[3] = &block_descriptor_3;
        uint64_t v14 = _Block_copy(aBlock);
        swift_release();
        objc_msgSend(v12, sel_addCompletedHandler_, v14);
        _Block_release(v14);
        sub_22F1DA16C(v12);
        swift_beginAccess();
        uint64_t v15 = *(void (**)(void *))(**(void **)(v1 + 16) + 272);
        swift_retain();
        v15(v12);
        swift_release();
        uint64_t v16 = (void *)swift_unknownObjectUnownedLoadStrong();
        id v17 = objc_msgSend(v16, sel_currentDrawable);

        if (v17)
        {
          objc_msgSend(v12, sel_presentDrawable_, v17);
          swift_unknownObjectRelease();
          objc_msgSend(v12, sel_commit);

          swift_unknownObjectRelease();
        }
        else
        {
          __break(1u);
        }
      }
      else
      {
      }
    }
  }
}

uint64_t sub_22F1DA5F8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 16) = v2;
  swift_retain();
  return swift_release();
}

uint64_t MetalScene.view.getter()
{
  return swift_unknownObjectUnownedLoadStrong();
}

uint64_t MetalScene.device.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t MetalScene.library.getter()
{
  return swift_unknownObjectRetain();
}

void sub_22F1DA670()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    id v1 = *(id *)(Strong + 64);
    sub_22F224158();
    swift_release();
  }
}

uint64_t MetalScene.__deallocating_deinit()
{
  swift_release();
  swift_unknownObjectUnownedDestroy();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_22F1DA740@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  *a2 = *(void *)(v3 + 16);
  return swift_retain();
}

uint64_t type metadata accessor for MetalScene()
{
  return self;
}

uint64_t sub_22F1DA7B4()
{
  swift_weakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void sub_22F1DA7EC()
{
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

id sub_22F1DA80C(uint64_t a1, intptr_t a2)
{
  type metadata accessor for MetalNode();
  uint64_t v4 = swift_allocObject();
  uint64_t v5 = MEMORY[0x263F8EE78];
  *(_WORD *)(v4 + 32) = 257;
  *(unsigned char *)(v4 + 34) = 1;
  uint64_t v6 = qword_268694990;
  *(void *)(v4 + 16) = qword_268694990;
  *(void *)(v4 + 24) = v5;
  if (v6 == -1)
  {
    __break(1u);
  }
  else
  {
    qword_268694990 = v6 + 1;
    *(void *)(v2 + 16) = v4;
    *(void *)(v2 + 48) = 0;
    *(unsigned char *)(v2 + 72) = 0;
    swift_unknownObjectUnownedInit();
    if (qword_268694378 == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  id v7 = (void *)static MetalBundle.device;
  *(void *)(v2 + 32) = static MetalBundle.device;
  uint64_t v8 = qword_268694380;
  swift_unknownObjectRetain();
  if (v8 != -1)
  {
    swift_once();
    id v7 = *(void **)(v2 + 32);
  }
  *(void *)(v2 + 40) = static MetalBundle.library;
  swift_unknownObjectRetain();
  id result = objc_msgSend(v7, sel_newCommandQueue);
  if (result)
  {
    *(void *)(v2 + 56) = result;
    *(void *)(v2 + 64) = dispatch_semaphore_create(a2);
    return (id)v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_DWORD *UnsafeMutablePointer<A>.init()()
{
  id result = (_DWORD *)swift_slowAlloc();
  *id result = 0;
  return result;
}

void UnsafeMutablePointer<A>.cleanupLock()()
{
}

BOOL UnsafeMutablePointer<A>.tryLock()(os_unfair_lock_s *a1)
{
  return os_unfair_lock_trylock(a1);
}

__n64 SCNMatrix4.position.getter()
{
  result.n64_u32[0] = *(_DWORD *)(v0 + 12);
  result.n64_u32[1] = *(_DWORD *)(v0 + 28);
  return result;
}

__n64 SCNMatrix4.forward.getter()
{
  result.n64_u32[0] = *(_DWORD *)(v0 + 8);
  result.n64_u32[1] = *(_DWORD *)(v0 + 24);
  return result;
}

__n64 SCNMatrix4.up.getter()
{
  result.n64_u32[0] = *(_DWORD *)(v0 + 4);
  result.n64_u32[1] = *(_DWORD *)(v0 + 20);
  return result;
}

__n64 SCNMatrix4.right.getter()
{
  result.n64_u32[0] = *v0;
  result.n64_u32[1] = v0[4];
  return result;
}

float SCNMatrix4.upAngle.getter()
{
  if (qword_2686943D0 != -1) {
    swift_once();
  }
  float v1 = (float)((float)(*(float *)&static SIMD3<>.up * v0[1]) + (float)(*((float *)&static SIMD3<>.up + 1) * v0[5]))
     + (float)(*((float *)&static SIMD3<>.up + 2) * v0[9]);
  return acosf(v1);
}

Swift::Float __swiftcall SCNMatrix4.alignUp()()
{
  if (qword_2686943D0 != -1) {
    swift_once();
  }
  LODWORD(v1) = *(_DWORD *)(v0 + 4);
  v2.i32[0] = *(_DWORD *)(v0 + 20);
  float32x4_t v21 = (float32x4_t)static SIMD3<>.up;
  long long v23 = v1;
  float v24 = v2.f32[0];
  float v25 = *(float *)(v0 + 36);
  v2.f32[1] = v25;
  float32x2_t v3 = vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)&static SIMD3<>.up, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL), 4uLL), v2);
  float v4 = acosf((float)((float)(*(float *)&v1 * *(float *)&static SIMD3<>.up) + v3.f32[0]) + v3.f32[1]);
  if (fabsf(v4) > 0.001)
  {
    float32x4_t v5 = (float32x4_t)v23;
    v5.f32[1] = v24;
    v5.f32[2] = v25;
    float32x4_t v6 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v5, (int32x4_t)v5), (int8x16_t)v5, 0xCuLL), vnegq_f32(v21)), v5, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v21, (int32x4_t)v21), (int8x16_t)v21, 0xCuLL));
    float v7 = *(float *)v0;
    float v8 = *(float *)(v0 + 16);
    float v9 = *(float *)(v0 + 32);
    uint64_t v10 = *(void *)(v0 + 8);
    uint64_t v11 = *(void *)(v0 + 24);
    long long v22 = *(_OWORD *)(v0 + 40);
    uint64_t v12 = *(void *)(v0 + 56);
    SCNMatrix4MakeRotation(&a, -v4, v6.f32[2], v6.f32[0], v6.f32[1]);
    long long v13 = *(_OWORD *)&a.m11;
    long long v14 = *(_OWORD *)&a.m21;
    long long v15 = *(_OWORD *)&a.m31;
    long long v16 = *(_OWORD *)&a.m41;
    a.m11 = v7;
    LODWORD(a.m12) = v23;
    *(void *)&a.m13 = v10;
    a.m21 = v8;
    a.m22 = v24;
    *(void *)&a.m23 = v11;
    a.m31 = v9;
    a.m32 = v25;
    *(_OWORD *)&a.m33 = v22;
    *(void *)&a.m43 = v12;
    *(_OWORD *)&b.m11 = v13;
    *(_OWORD *)&b.m21 = v14;
    *(_OWORD *)&b.m31 = v15;
    *(_OWORD *)&b.m41 = v16;
    SCNMatrix4Mult(&v26, &a, &b);
    long long v17 = *(_OWORD *)&v26.m21;
    long long v18 = *(_OWORD *)&v26.m31;
    long long v19 = *(_OWORD *)&v26.m41;
    *(_OWORD *)uint64_t v0 = *(_OWORD *)&v26.m11;
    *(_OWORD *)(v0 + 16) = v17;
    *(_OWORD *)(v0 + 32) = v18;
    *(_OWORD *)(v0 + 48) = v19;
  }
  return v4;
}

double * infix(_:_:)@<D0>(_OWORD *a1@<X0>, _OWORD *a2@<X1>, _OWORD *a3@<X8>)
{
  long long v4 = a1[1];
  *(_OWORD *)&a.m11 = *a1;
  *(_OWORD *)&a.m21 = v4;
  long long v5 = a1[3];
  *(_OWORD *)&a.m31 = a1[2];
  *(_OWORD *)&a.m41 = v5;
  long long v6 = a2[1];
  *(_OWORD *)&b.m11 = *a2;
  *(_OWORD *)&b.m21 = v6;
  long long v7 = a2[3];
  *(_OWORD *)&b.m31 = a2[2];
  *(_OWORD *)&b.m41 = v7;
  SCNMatrix4Mult(&v12, &a, &b);
  double result = *(double *)&v12.m11;
  long long v9 = *(_OWORD *)&v12.m21;
  long long v10 = *(_OWORD *)&v12.m31;
  long long v11 = *(_OWORD *)&v12.m41;
  *a3 = *(_OWORD *)&v12.m11;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v11;
  return result;
}

Swift::Void __swiftcall SCNMatrix4.lerp(to:t:)(SCNMatrix4 *to, Swift::Float t)
{
  float32x4_t v3 = vaddq_f32(v2[1], vmulq_n_f32(vsubq_f32(*(float32x4_t *)&to->m21, v2[1]), t));
  *float32x2_t v2 = vaddq_f32(*v2, vmulq_n_f32(vsubq_f32(*(float32x4_t *)&to->m11, *v2), t));
  v2[1] = v3;
  float32x4_t v4 = vaddq_f32(v2[2], vmulq_n_f32(vsubq_f32(*(float32x4_t *)&to->m31, v2[2]), t));
  float32x4_t v5 = vaddq_f32(v2[3], vmulq_n_f32(vsubq_f32(*(float32x4_t *)&to->m41, v2[3]), t));
  CVPixelBufferRef v2[2] = v4;
  v2[3] = v5;
}

double * infix(_:_:)@<D0>(_OWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_22F224038();
  long long v4 = a1[1];
  *(_OWORD *)&a.m11 = *a1;
  *(_OWORD *)&a.m21 = v4;
  long long v5 = a1[3];
  *(_OWORD *)&a.m31 = a1[2];
  *(_OWORD *)&a.m41 = v5;
  SCNMatrix4 b = v13;
  SCNMatrix4Mult(&v10, &a, &b);
  double result = *(double *)&v10.m11;
  long long v7 = *(_OWORD *)&v10.m21;
  long long v8 = *(_OWORD *)&v10.m31;
  long long v9 = *(_OWORD *)&v10.m41;
  *a2 = *(_OWORD *)&v10.m11;
  a2[1] = v7;
  a2[2] = v8;
  a2[3] = v9;
  return result;
}

void SCNNode.findTypeInParents<A>(_:)(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  v15[0] = a2;
  uint64_t v4 = sub_22F2241F8();
  MEMORY[0x270FA5388](v4);
  long long v6 = (char *)v15 - v5;
  long long v8 = (void (**)(char *, uint64_t))(v7 + 8);
  id v9 = v2;
  while (1)
  {
    v15[1] = v9;
    id v10 = v9;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2686957F0);
    int v11 = swift_dynamicCast();
    SCNMatrix4 v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56);
    if (v11) {
      break;
    }
    v12(v6, 1, 1, a1);
    (*v8)(v6, v4);
    id v9 = objc_msgSend(v10, sel_parentNode);

    if (!v9)
    {
      v12((char *)v15[0], 1, 1, a1);
      return;
    }
  }
  uint64_t v13 = *(void *)(a1 - 8);
  v12(v6, 0, 1, a1);
  long long v14 = (char *)v15[0];
  (*(void (**)(void, char *, uint64_t))(v13 + 32))(v15[0], v6, a1);
  v12(v14, 0, 1, a1);
}

Swift::Bool __swiftcall SCNNode.isDecendent(of:)(SCNNode of)
{
  sub_22F1DB010();
  id v2 = v1;
  if (sub_22F2241C8())
  {
    id v3 = v2;
LABEL_6:

    return 1;
  }
  else
  {
    id v3 = v2;
    while (1)
    {
      id v4 = objc_msgSend(v3, sel_parentNode);

      if (!v4) {
        return 0;
      }
      id v5 = v2;
      id v3 = v4;
      char v6 = sub_22F2241C8();

      if (v6) {
        goto LABEL_6;
      }
    }
  }
}

unint64_t sub_22F1DB010()
{
  unint64_t result = qword_2686957F8;
  if (!qword_2686957F8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2686957F8);
  }
  return result;
}

Swift::Void __swiftcall SCNNode.removeAllChildren()()
{
  id v1 = objc_msgSend(v0, sel_childNodes);
  sub_22F1DB010();
  unint64_t v2 = sub_22F223CB8();

  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = sub_22F2245C8();
    swift_bridgeObjectRelease();
    if (!v3) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v3) {
      goto LABEL_10;
    }
  }
  if (v3 < 1)
  {
    __break(1u);
    return;
  }
  for (uint64_t i = 0; i != v3; ++i)
  {
    if ((v2 & 0xC000000000000001) != 0) {
      id v5 = (id)MEMORY[0x230FB2E90](i, v2);
    }
    else {
      id v5 = *(id *)(v2 + 8 * i + 32);
    }
    char v6 = v5;
    objc_msgSend(v5, sel_removeFromParentNode);
  }
LABEL_10:
  swift_bridgeObjectRelease();
}

float SCNNode.boundingSize.getter()
{
  sub_22F1DB010();
  sub_22F224138();
  sub_22F224138();
  return v2 - v1;
}

void SCNNode.setForwardDirection(direction:)(float32x4_t a1)
{
  if (qword_2686943C8 != -1)
  {
    float32x4_t v4 = a1;
    swift_once();
    a1 = v4;
  }
  float v2 = sqrtf(vmuls_lane_f32(a1.f32[2], a1, 2) + vaddv_f32(vmul_f32(*(float32x2_t *)a1.f32, *(float32x2_t *)a1.f32)));
  if (v2 > 0.0 && a1.f32[2] < 1.0)
  {
    acosf(a1.f32[2] / v2);
    sub_22F224078();
    objc_msgSend(v1, sel_setRotation_);
  }
}

float - infix(_:_:)(float a1, double a2, double a3, float a4)
{
  return a1 - a4;
}

uint64_t sub_22F1DB2CC()
{
  uint64_t result = sub_22F224058();
  static SCNVector3.one = v1;
  *(_DWORD *)algn_26869BD24 = v2;
  dword_26869BD28 = v3;
  return result;
}

int *SCNVector3.one.unsafeMutableAddressor()
{
  if (qword_268694478 != -1) {
    swift_once();
  }
  return &static SCNVector3.one;
}

float static SCNVector3.one.getter()
{
  if (qword_268694478 != -1) {
    swift_once();
  }
  return *(float *)&static SCNVector3.one;
}

uint64_t sub_22F1DB3A0()
{
  uint64_t result = sub_22F224058();
  static SCNVector3.zero = v1;
  unk_26869BD30 = v2;
  dword_26869BD34 = v3;
  return result;
}

int *SCNVector3.zero.unsafeMutableAddressor()
{
  if (qword_268694480 != -1) {
    swift_once();
  }
  return &static SCNVector3.zero;
}

float static SCNVector3.zero.getter()
{
  if (qword_268694480 != -1) {
    swift_once();
  }
  return *(float *)&static SCNVector3.zero;
}

uint64_t sub_22F1DB474()
{
  uint64_t result = sub_22F224058();
  static SCNVector3.forwarCGFloat d = v1;
  *(_DWORD *)algn_26869BD3C = v2;
  dword_26869BD40 = v3;
  return result;
}

int *SCNVector3.forward.unsafeMutableAddressor()
{
  if (qword_268694488 != -1) {
    swift_once();
  }
  return &static SCNVector3.forward;
}

float static SCNVector3.forward.getter()
{
  if (qword_268694488 != -1) {
    swift_once();
  }
  return *(float *)&static SCNVector3.forward;
}

uint64_t sub_22F1DB548()
{
  uint64_t result = sub_22F224058();
  static SCNVector3.up = v1;
  unk_26869BD48 = v2;
  dword_26869BD4C = v3;
  return result;
}

int *SCNVector3.up.unsafeMutableAddressor()
{
  if (qword_268694490 != -1) {
    swift_once();
  }
  return &static SCNVector3.up;
}

float static SCNVector3.up.getter()
{
  if (qword_268694490 != -1) {
    swift_once();
  }
  return *(float *)&static SCNVector3.up;
}

SCNVector3 __swiftcall SCNVector3.init(_:)(Swift::Float a1)
{
  MEMORY[0x270FA13C0](a1, a1, a1);
  result.z = v3;
  result.CGFloat y = v2;
  result.CGFloat x = v1;
  return result;
}

double SCNVector3.floats.getter(float a1, float a2)
{
  return COERCE_DOUBLE(__PAIR64__(LODWORD(a2), LODWORD(a1)));
}

uint64_t SCNVector3.nsArray.getter(float a1, float a2, float a3)
{
  sub_22F1A321C(0, &qword_268695800);
  __swift_instantiateConcreteTypeFromMangledName(&qword_268694B98);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_22F2265B0;
  uint64_t v7 = MEMORY[0x263F8D5C8];
  *(void *)(v6 + 56) = MEMORY[0x263F8D5C8];
  *(float *)(v6 + 32) = a1;
  *(void *)(v6 + 88) = v7;
  *(float *)(v6 + 64) = a2;
  *(void *)(v6 + 120) = v7;
  *(float *)(v6 + 96) = a3;
  return MEMORY[0x230FB2BD0]();
}

float SCNVector3.magnitudeSquared.getter(float a1, float a2, float a3)
{
  return (float)((float)(a1 * a1) + (float)(a2 * a2)) + (float)(a3 * a3);
}

float SCNVector3.magnitude.getter(float a1, float a2, float a3)
{
  return sqrtf((float)((float)(a1 * a1) + (float)(a2 * a2)) + (float)(a3 * a3));
}

uint64_t SCNVector3.normalized.getter()
{
  return sub_22F224068();
}

uint64_t / infix(_:_:)()
{
  return sub_22F224068();
}

void SCNVector3.set(_:)(__n128 a1)
{
  *(void *)uint64_t v1 = a1.n128_u64[0];
  *(_DWORD *)(v1 + 8) = a1.n128_u32[2];
}

void static SCNVector3.make(withNSArray:)(void *a1)
{
  uint64_t v2 = sub_22F223708();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  id v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (uint64_t)objc_msgSend(a1, sel_count);
  uint64_t v28 = MEMORY[0x263F8EE78];
  sub_22F18FCC8(0, v6 & ~(v6 >> 63), 0);
  id v7 = a1;
  sub_22F224178();

  if (v6 < 0)
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v22 = v3;
  if (v6)
  {
    sub_22F1DBCF8();
    do
    {
      sub_22F224208();
      if (!v27) {
        goto LABEL_24;
      }
      sub_22F195C78((uint64_t)&v26, (uint64_t)&v24);
      sub_22F1A321C(0, (unint64_t *)&qword_268695000);
      swift_dynamicCast();
      id v8 = v23;
      objc_msgSend(v23, sel_floatValue);
      int v10 = v9;

      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v26);
      uint64_t v11 = v28;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_22F18FCC8(0, *(void *)(v11 + 16) + 1, 1);
        uint64_t v11 = v28;
      }
      unint64_t v13 = *(void *)(v11 + 16);
      unint64_t v12 = *(void *)(v11 + 24);
      if (v13 >= v12 >> 1)
      {
        sub_22F18FCC8((char *)(v12 > 1), v13 + 1, 1);
        uint64_t v11 = v28;
      }
      *(void *)(v11 + 16) = v13 + 1;
      *(_DWORD *)(v11 + 4 * v13 + 32) = v10;
    }
    while (--v6);
  }
  sub_22F1DBCF8();
  sub_22F224208();
  while (v25)
  {
    sub_22F186BD8(&v24, &v26);
    sub_22F195C78((uint64_t)&v26, (uint64_t)&v24);
    sub_22F1A321C(0, (unint64_t *)&qword_268695000);
    swift_dynamicCast();
    id v14 = v23;
    objc_msgSend(v23, sel_floatValue);
    int v16 = v15;

    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v26);
    uint64_t v17 = v28;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_22F18FCC8(0, *(void *)(v17 + 16) + 1, 1);
      uint64_t v17 = v28;
    }
    unint64_t v19 = *(void *)(v17 + 16);
    unint64_t v18 = *(void *)(v17 + 24);
    if (v19 >= v18 >> 1)
    {
      sub_22F18FCC8((char *)(v18 > 1), v19 + 1, 1);
      uint64_t v17 = v28;
    }
    *(void *)(v17 + 16) = v19 + 1;
    *(_DWORD *)(v17 + 4 * v19 + 32) = v16;
    sub_22F224208();
  }
  (*(void (**)(char *, uint64_t))(v22 + 8))(v5, v2);
  sub_22F1A2FE4((uint64_t)&v24);
  unint64_t v20 = *(void *)(v28 + 16);
  if (!v20) {
    goto LABEL_21;
  }
  if (v20 != 1)
  {
    if (v20 >= 3)
    {
      swift_release();
      return;
    }
    goto LABEL_23;
  }
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
}

uint64_t * infix(_:_:)()
{
  return sub_22F224068();
}

{
  return sub_22F224068();
}

uint64_t SIMD4<>.scnVec3.getter(__n128 a1)
{
  return MEMORY[0x270FA13C0](a1.n128_f32[0], a1.n128_f32[1], a1.n128_f32[2]);
}

float + infix(_:_:)(float a1, double a2, double a3, float a4)
{
  return a1 + a4;
}

float += infix(_:_:)(float *a1, float a2, float a3, float a4)
{
  float result = *a1 + a2;
  float v5 = a1[1] + a3;
  float v6 = a1[2] + a4;
  *a1 = result;
  a1[1] = v5;
  a1[2] = v6;
  return result;
}

float -= infix(_:_:)(float *a1, float a2, float a3, float a4)
{
  float result = *a1 - a2;
  float v5 = a1[1] - a3;
  float v6 = a1[2] - a4;
  *a1 = result;
  a1[1] = v5;
  a1[2] = v6;
  return result;
}

float * infix(_:_:)(float a1, double a2, double a3, float a4)
{
  return a1 * a4;
}

float32x2_t *= infix(_:_:)(float32x2_t *a1, float32x2_t a2, float32_t a3, float a4)
{
  float32_t v4 = a1[1].f32[0] * a4;
  a2.f32[1] = a3;
  float32x2_t result = vmul_f32(*a1, a2);
  *a1 = result;
  a1[1].f32[0] = v4;
  return result;
}

uint64_t *= infix(_:_:)(_DWORD *a1)
{
  uint64_t result = sub_22F224068();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return result;
}

float / infix(_:_:)(float a1, double a2, double a3, float a4)
{
  return a1 / a4;
}

float32x2_t /= infix(_:_:)(float32x2_t *a1, float32x2_t a2, float32_t a3, float a4)
{
  float32_t v4 = a1[1].f32[0] / a4;
  a2.f32[1] = a3;
  float32x2_t result = vdiv_f32(*a1, a2);
  *a1 = result;
  a1[1].f32[0] = v4;
  return result;
}

uint64_t /= infix(_:_:)(_DWORD *a1)
{
  uint64_t result = sub_22F224068();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return result;
}

BOOL == infix(_:_:)(float a1, float a2, float a3, float a4, float a5, float a6)
{
  BOOL v6 = a1 == a4;
  if (a2 != a5) {
    BOOL v6 = 0;
  }
  return a3 == a6 && v6;
}

unint64_t sub_22F1DBCF8()
{
  unint64_t result = qword_268695808;
  if (!qword_268695808)
  {
    sub_22F223708();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268695808);
  }
  return result;
}

__n64 SCNVector4.floats.getter(double a1, float a2)
{
  result.n64_f32[1] = a2;
  return result;
}

uint64_t SCNVector4.nsArray.getter(float a1, float a2, float a3, float a4)
{
  sub_22F1A321C(0, &qword_268695800);
  __swift_instantiateConcreteTypeFromMangledName(&qword_268694B98);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_22F227B00;
  uint64_t v9 = MEMORY[0x263F8D5C8];
  *(void *)(v8 + 56) = MEMORY[0x263F8D5C8];
  *(float *)(v8 + 32) = a1;
  *(void *)(v8 + 88) = v9;
  *(float *)(v8 + 64) = a2;
  *(void *)(v8 + 120) = v9;
  *(float *)(v8 + 96) = a3;
  *(void *)(v8 + 152) = v9;
  *(float *)(v8 + 128) = a4;
  return MEMORY[0x230FB2BD0]();
}

void static SCNVector4.make(withNSArray:)(void *a1)
{
  uint64_t v2 = sub_22F223708();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  int v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (uint64_t)objc_msgSend(a1, sel_count);
  uint64_t v28 = MEMORY[0x263F8EE78];
  sub_22F18FCC8(0, v6 & ~(v6 >> 63), 0);
  id v7 = a1;
  sub_22F224178();

  if (v6 < 0)
  {
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v22 = v3;
  if (v6)
  {
    sub_22F1DBCF8();
    do
    {
      sub_22F224208();
      if (!v27) {
        goto LABEL_26;
      }
      sub_22F195C78((uint64_t)&v26, (uint64_t)&v24);
      sub_22F1A321C(0, (unint64_t *)&qword_268695000);
      swift_dynamicCast();
      id v8 = v23;
      objc_msgSend(v23, sel_floatValue);
      int v10 = v9;

      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v26);
      uint64_t v11 = v28;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_22F18FCC8(0, *(void *)(v11 + 16) + 1, 1);
        uint64_t v11 = v28;
      }
      unint64_t v13 = *(void *)(v11 + 16);
      unint64_t v12 = *(void *)(v11 + 24);
      if (v13 >= v12 >> 1)
      {
        sub_22F18FCC8((char *)(v12 > 1), v13 + 1, 1);
        uint64_t v11 = v28;
      }
      *(void *)(v11 + 16) = v13 + 1;
      *(_DWORD *)(v11 + 4 * v13 + 32) = v10;
    }
    while (--v6);
  }
  sub_22F1DBCF8();
  sub_22F224208();
  while (v25)
  {
    sub_22F186BD8(&v24, &v26);
    sub_22F195C78((uint64_t)&v26, (uint64_t)&v24);
    sub_22F1A321C(0, (unint64_t *)&qword_268695000);
    swift_dynamicCast();
    id v14 = v23;
    objc_msgSend(v23, sel_floatValue);
    int v16 = v15;

    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v26);
    uint64_t v17 = v28;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_22F18FCC8(0, *(void *)(v17 + 16) + 1, 1);
      uint64_t v17 = v28;
    }
    unint64_t v19 = *(void *)(v17 + 16);
    unint64_t v18 = *(void *)(v17 + 24);
    if (v19 >= v18 >> 1)
    {
      sub_22F18FCC8((char *)(v18 > 1), v19 + 1, 1);
      uint64_t v17 = v28;
    }
    *(void *)(v17 + 16) = v19 + 1;
    *(_DWORD *)(v17 + 4 * v19 + 32) = v16;
    sub_22F224208();
  }
  (*(void (**)(char *, uint64_t))(v22 + 8))(v5, v2);
  sub_22F1A2FE4((uint64_t)&v24);
  unint64_t v20 = *(void *)(v28 + 16);
  if (!v20) {
    goto LABEL_22;
  }
  if (v20 == 1)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v20 >= 3)
  {
    if (v20 != 3)
    {
      swift_release();
      return;
    }
    goto LABEL_25;
  }
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
}

uint64_t property wrapper backing initializer of ScreenPoint.pos(double a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_268695810);
  uint64_t v2 = swift_allocObject();
  uint64_t v3 = (_DWORD *)swift_slowAlloc();
  *uint64_t v3 = 0;
  *(void *)(v2 + 24) = v3;
  *(double *)(v2 + 16) = a1;
  return v2;
}

double ScreenPoint.pos.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC17MeasureFoundation11ScreenPoint__pos);
  swift_beginAccess();
  uint64_t v2 = *v1;
  uint64_t v3 = *(os_unfair_lock_s **)(v2 + 24);
  swift_retain();
  os_unfair_lock_lock(v3);
  swift_beginAccess();
  double v4 = *(double *)(v2 + 16);
  os_unfair_lock_unlock(v3);
  swift_release();
  return v4;
}

uint64_t ScreenPoint.pos.setter(double a1)
{
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC17MeasureFoundation11ScreenPoint__pos);
  swift_beginAccess();
  uint64_t v4 = *v3;
  int v5 = *(os_unfair_lock_s **)(v4 + 24);
  swift_retain();
  os_unfair_lock_lock(v5);
  swift_beginAccess();
  *(double *)(v4 + 16) = a1;
  os_unfair_lock_unlock(v5);
  return swift_release();
}

void (*ScreenPoint.pos.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  uint64_t v4 = (uint64_t *)(v1 + OBJC_IVAR____TtC17MeasureFoundation11ScreenPoint__pos);
  swift_beginAccess();
  uint64_t v5 = *v4;
  v3[7] = v5;
  uint64_t v6 = *(os_unfair_lock_s **)(v5 + 24);
  swift_retain();
  os_unfair_lock_lock(v6);
  swift_beginAccess();
  uint64_t v7 = *(void *)(v5 + 16);
  os_unfair_lock_unlock(v6);
  v3[6] = v7;
  return sub_22F1DC42C;
}

void sub_22F1DC42C(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void *)(*(void *)a1 + 56);
  uint64_t v3 = *(void *)(*(void *)a1 + 48);
  uint64_t v4 = *(os_unfair_lock_s **)(v2 + 24);
  os_unfair_lock_lock(v4);
  *(void *)(v2 + 16) = v3;
  os_unfair_lock_unlock(v4);
  swift_release();
  free(v1);
}

id ScreenPoint.__allocating_init(_:)(double a1)
{
  uint64_t v3 = (char *)objc_allocWithZone(v1);
  uint64_t v4 = (uint64_t *)&v3[OBJC_IVAR____TtC17MeasureFoundation11ScreenPoint__pos];
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&qword_268695810);
  uint64_t v5 = swift_allocObject();
  uint64_t v6 = v3;
  uint64_t v7 = (_DWORD *)swift_slowAlloc();
  _DWORD *v7 = 0;
  *(void *)(v5 + 24) = v7;
  *(double *)(v5 + 16) = a1;
  *uint64_t v4 = v5;
  swift_endAccess();

  v9.receiver = v6;
  v9.super_class = v1;
  return objc_msgSendSuper2(&v9, sel_init);
}

id ScreenPoint.init(_:)(double a1)
{
  uint64_t v3 = (uint64_t *)&v1[OBJC_IVAR____TtC17MeasureFoundation11ScreenPoint__pos];
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&qword_268695810);
  uint64_t v4 = swift_allocObject();
  uint64_t v5 = v1;
  uint64_t v6 = (_DWORD *)swift_slowAlloc();
  *uint64_t v6 = 0;
  *(void *)(v4 + 24) = v6;
  *(double *)(v4 + 16) = a1;
  *uint64_t v3 = v4;
  swift_endAccess();

  v8.receiver = v5;
  v8.super_class = (Class)type metadata accessor for ScreenPoint();
  return objc_msgSendSuper2(&v8, sel_init);
}

uint64_t type metadata accessor for ScreenPoint()
{
  return self;
}

id ScreenPoint.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void ScreenPoint.init()()
{
}

uint64_t sub_22F1DC6D0()
{
  return swift_release();
}

id ScreenPoint.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ScreenPoint();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_22F1DC724(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v19 = MEMORY[0x263F8EE78];
    sub_22F224498();
    uint64_t result = sub_22F1E18DC(a1);
    uint64_t v4 = result;
    int v6 = v5;
    uint64_t v7 = 0;
    uint64_t v8 = a1 + 64;
    uint64_t v17 = v2;
    while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << *(unsigned char *)(a1 + 32))
    {
      unint64_t v10 = (unint64_t)v4 >> 6;
      if ((*(void *)(v8 + 8 * ((unint64_t)v4 >> 6)) & (1 << v4)) == 0) {
        goto LABEL_22;
      }
      if (*(_DWORD *)(a1 + 36) != v6) {
        goto LABEL_23;
      }
      uint64_t v18 = v7;
      id v11 = *(id *)(*(void *)(a1 + 56) + 8 * v4);
      sub_22F224468();
      sub_22F2244A8();
      sub_22F2244B8();
      uint64_t result = sub_22F224478();
      int64_t v9 = 1 << *(unsigned char *)(a1 + 32);
      if (v4 >= v9) {
        goto LABEL_24;
      }
      uint64_t v12 = *(void *)(v8 + 8 * v10);
      if ((v12 & (1 << v4)) == 0) {
        goto LABEL_25;
      }
      if (*(_DWORD *)(a1 + 36) != v6) {
        goto LABEL_26;
      }
      unint64_t v13 = v12 & (-2 << (v4 & 0x3F));
      if (v13)
      {
        int64_t v9 = __clz(__rbit64(v13)) | v4 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v14 = v10 + 1;
        unint64_t v15 = (unint64_t)(v9 + 63) >> 6;
        if (v10 + 1 < v15)
        {
          unint64_t v16 = *(void *)(v8 + 8 * v14);
          if (v16)
          {
LABEL_18:
            int64_t v9 = __clz(__rbit64(v16)) + (v14 << 6);
          }
          else
          {
            while (v15 - 2 != v10)
            {
              unint64_t v16 = *(void *)(a1 + 80 + 8 * v10++);
              if (v16)
              {
                unint64_t v14 = v10 + 1;
                goto LABEL_18;
              }
            }
          }
        }
      }
      uint64_t v7 = v18 + 1;
      uint64_t v4 = v9;
      if (v18 + 1 == v17) {
        return v19;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  return result;
}

void (*sub_22F1DC904(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x40uLL);
  *a1 = v2;
  uint64_t v3 = sub_22F223848();
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = v4;
  v2[5] = v4;
  int v6 = malloc(*(void *)(v4 + 64));
  v2[6] = v6;
  (*(void (**)(void))(v5 + 16))();
  v2[7] = sub_22F1E09AC(v2, (uint64_t)v6);
  return sub_22F1DC9F4;
}

void sub_22F1DC9F4(void *a1)
{
  id v1 = (void *)*a1;
  uint64_t v2 = *(void **)(*a1 + 48);
  uint64_t v3 = *(void *)(*a1 + 32);
  uint64_t v4 = *(void *)(*a1 + 40);
  (*(void (**)(void, void))(*a1 + 56))(*a1, 0);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v2, v3);
  free(v2);
  free(v1);
}

void (*sub_22F1DCA6C(void *a1, unsigned __int8 a2))(void *a1)
{
  uint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  _OWORD v4[4] = sub_22F1E0B64(v4, a2);
  return sub_22F1DCACC;
}

void sub_22F1DCACC(void *a1)
{
  id v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 32))(*a1, 0);
  free(v1);
}

uint64_t *MeasureCore.shared.unsafeMutableAddressor()
{
  if (qword_2686944A0 != -1) {
    swift_once();
  }
  return &static MeasureCore.shared;
}

char *MeasureCore.isTrackingVGAEnabled.unsafeMutableAddressor()
{
  if (qword_268694498 != -1) {
    swift_once();
  }
  return &static MeasureCore.isTrackingVGAEnabled;
}

void sub_22F1DCBB0(uint64_t a1@<X8>, float32x4_t a2@<Q0>, float32x4_t a3@<Q1>)
{
  uint64_t v4 = *(void *)(v3 + 88);
  if (v4)
  {
    swift_beginAccess();
    long long v6 = 0uLL;
    int v7 = 0;
    if (*(unsigned char *)(v4 + 432))
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      long long v10 = 0uLL;
      long long v11 = 0uLL;
      long long v12 = 0uLL;
      long long v13 = 0uLL;
    }
    else
    {
      float v14 = *(float *)(v4 + 356);
      double v30 = *(double *)(v4 + 368);
      double v28 = *(double *)(v4 + 384);
      double v26 = *(double *)(v4 + 400);
      double v25 = *(double *)(v4 + 416);
      swift_beginAccess();
      if ((*(unsigned char *)(v4 + 432) & 1) != 0
        || (float32x4_t v24 = *(float32x4_t *)(v4 + 320),
            float32x4_t v23 = *(float32x4_t *)(v4 + 336),
            swift_retain(),
            sub_22F1AC564((uint64_t)v35, v24, v23, 0.8, a2, a3),
            swift_release(),
            sub_22F1899D0((uint64_t)v35, (uint64_t)&v36, &qword_268695210),
            (v37 & 1) != 0))
      {
        uint64_t v8 = 0;
        uint64_t v9 = 0;
        long long v10 = 0uLL;
        long long v11 = 0uLL;
        long long v12 = 0uLL;
        long long v13 = 0uLL;
        long long v6 = 0uLL;
      }
      else
      {
        id v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F20E38]), sel_initWithTransform_, v30, v28, v26, v25);
        type metadata accessor for WorldPlane();
        swift_allocObject();
        uint64_t v9 = sub_22F210A98(v15, 3, 1.0 - v14, 1.0);

        sceneKitToARKit(_:)(v17, v16);
        long long v31 = v19;
        long long v33 = v18;
        long long v27 = v21;
        long long v29 = v20;
        long long v38 = xmmword_22F228C60;
        long long v39 = v18;
        long long v40 = v19;
        long long v41 = v20;
        long long v42 = v21;
        uint64_t v43 = 0;
        uint64_t v44 = 0;
        uint64_t v8 = 1;
        char v45 = 1;
        uint64_t v46 = v9;
        int v47 = 0;
        swift_retain();
        sub_22F2105E8();
        int v7 = v22;
        swift_release();
        long long v13 = v27;
        long long v12 = v29;
        long long v11 = v31;
        long long v10 = v33;
        long long v6 = xmmword_22F228C60;
      }
    }
    *(_OWORD *)a1 = v6;
    *(_OWORD *)(a1 + 16) = v10;
    *(_OWORD *)(a1 + 32) = v11;
    *(_OWORD *)(a1 + 48) = v12;
    *(_OWORD *)(a1 + 64) = v13;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 96) = v8;
    *(void *)(a1 + 104) = v9;
    *(_DWORD *)(a1 + 112) = v7;
  }
  else
  {
    __break(1u);
  }
}

Swift::OpaquePointer_optional __swiftcall MeasureCore.adHitTest(screenPoints:frame:)(Swift::OpaquePointer screenPoints, ARFrame frame)
{
  uint64_t v2 = (void *)sub_22F1DED80((uint64_t)screenPoints._rawValue, (uint64_t)frame.super.isa, (uint64_t (*)(uint64_t, uint64_t))sub_22F1B68DC);
  result.value._rawValue = v2;
  result.is_nil = v3;
  return result;
}

uint64_t MeasureCore.mlLabel(of:kernelRadius:)(uint64_t a1, float32x4_t a2)
{
  uint64_t v3 = *(void *)(v2 + 80);
  if (!v3) {
    return 33;
  }
  uint64_t v5 = *(void **)(v3 + 272);
  swift_retain();
  objc_msgSend(v5, sel_lock);
  *(double *)&uint64_t v6 = COERCE_DOUBLE(SegmentationProcessor.projectPoint(_:)(a2));
  uint64_t v8 = (SEL *)&unk_2649FF000;
  if (v9)
  {
    uint64_t v17 = 33;
LABEL_41:
    [v5 v8[444]];
    swift_release();
    return v17;
  }
  CGFloat v10 = *(double *)&v6;
  CGFloat v11 = v7;
  objc_msgSend(v5, sel_lock);
  sub_22F1E5038(v10, v11);
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t result = sub_22F1E5118(v12, v14);
  uint64_t v17 = result;
  if (result == 33 || result == 0 || a1 <= 0)
  {
LABEL_40:
    objc_msgSend(v5, v8[444], v34, v35, v36);
    goto LABEL_41;
  }
  uint64_t v20 = -a1;
  uint64_t v36 = v15;
  uint64_t v37 = a1;
  uint64_t v21 = 2 * a1;
  uint64_t v22 = -a1;
  uint64_t v34 = 2 * a1;
  uint64_t v35 = -a1;
  while (2)
  {
    uint64_t v39 = v22;
    uint64_t v23 = v15 + v22;
    if (__OFADD__(v15, v22))
    {
LABEL_47:
      __break(1u);
      return result;
    }
    uint64_t v24 = v20;
    while (1)
    {
      uint64_t v25 = v13 + v24;
      if (__OFADD__(v13, v24))
      {
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
      double v26 = *(void **)(v3 + 280);
      if (!v26) {
        goto LABEL_24;
      }
      unsigned __int8 v27 = 0;
      if ((v25 & 0x8000000000000000) == 0)
      {
        uint64_t v28 = v26[9];
        if (v25 < v28 && (v23 & 0x8000000000000000) == 0)
        {
          if (v23 >= v26[10])
          {
LABEL_24:
            unsigned __int8 v27 = 0;
            goto LABEL_25;
          }
          uint64_t v29 = v23 * v28;
          if ((unsigned __int128)(v23 * (__int128)v28) >> 64 != (v23 * v28) >> 63) {
            goto LABEL_45;
          }
          BOOL v30 = __OFADD__(v29, v25);
          uint64_t v31 = v29 + v25;
          if (v30) {
            goto LABEL_46;
          }
          uint64_t v32 = *(char *)(v26[6] + v31);
          long long v33 = self;
          swift_retain();
          if (objc_msgSend(v33, sel_jasperAvailable))
          {
            unsigned __int8 v27 = _s17MeasureFoundation18SegmentationResultC5LabelO8rawValueAESgs5UInt8V_tcfC_0(v32);
            uint64_t result = swift_release();
            if (v27 == 33) {
              goto LABEL_38;
            }
          }
          else
          {
            uint64_t result = swift_release();
            if (v32 >= 0xD)
            {
LABEL_38:
              uint64_t v17 = 0;
              goto LABEL_39;
            }
            unsigned __int8 v27 = byte_22F2299F0[v32];
          }
        }
      }
LABEL_25:
      if (v17 != v27) {
        goto LABEL_38;
      }
      if (!v21) {
        break;
      }
      --v21;
      BOOL v30 = __OFADD__(v24++, 1);
      if (v30) {
        goto LABEL_44;
      }
    }
    if (v39 == v37)
    {
LABEL_39:
      uint64_t v8 = (SEL *)&unk_2649FF000;
      goto LABEL_40;
    }
    uint64_t v22 = v39 + 1;
    uint64_t v20 = v35;
    uint64_t v15 = v36;
    uint64_t v21 = v34;
    if (!__OFADD__(v39, 1)) {
      continue;
    }
    break;
  }
  __break(1u);
  return 33;
}

unint64_t MeasureCore.mlNormal(of:)(float32x4_t a1)
{
  uint64_t v2 = *(void *)(v1 + 80);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void **)(v2 + 272);
  swift_retain();
  objc_msgSend(v3, sel_lock);
  uint64_t v4 = SegmentationProcessor.projectPoint(_:)(a1);
  if (v6) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = SegmentationProcessor.normal(at:)(*(CGFloat *)&v4, v5);
  }
  objc_msgSend(v3, sel_unlock, *(_OWORD *)&a1);
  swift_release();
  return v7;
}

void sub_22F1DD150()
{
  if (qword_2686944E8 != -1) {
    swift_once();
  }
  if (static UIDevice.parsedDeviceIdentifier == 3) {
    goto LABEL_11;
  }
  uint64_t v1 = qword_26869BDB0;
  uint64_t v0 = qword_26869BDB8;
  if ((_BYTE)static UIDevice.parsedDeviceIdentifier)
  {
    char v2 = sub_22F224738();
    swift_bridgeObjectRelease();
    if ((v2 & 1) == 0 || v1 < 10) {
      goto LABEL_11;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    if (v1 < 10) {
      goto LABEL_11;
    }
  }
  if ((v0 & 0x8000000000000000) == 0)
  {
    char v3 = 1;
    goto LABEL_17;
  }
LABEL_11:
  if (static UIDevice.parsedDeviceIdentifier == 3)
  {
    char v3 = 0;
  }
  else
  {
    if (static UIDevice.parsedDeviceIdentifier == 1) {
      char v3 = 1;
    }
    else {
      char v3 = sub_22F224738();
    }
    swift_bridgeObjectRelease();
  }
LABEL_17:
  static MeasureCore.isTrackingVGAEnableCGFloat d = v3 & 1;
}

uint64_t static MeasureCore.isTrackingVGAEnabled.getter()
{
  if (qword_268694498 != -1) {
    swift_once();
  }
  return static MeasureCore.isTrackingVGAEnabled;
}

uint64_t sub_22F1DD2F4()
{
  type metadata accessor for MeasureCore();
  swift_allocObject();
  uint64_t result = sub_22F1DD688();
  static MeasureCore.shareCGFloat d = result;
  return result;
}

uint64_t static MeasureCore.shared.getter()
{
  if (qword_2686944A0 != -1) {
    swift_once();
  }
  return swift_retain();
}

uint64_t MeasureCore.allPlaneAnchors.getter()
{
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v0 + 56));
  swift_beginAccess();
  uint64_t v3 = v0 + 56;
  char v2 = *(os_unfair_lock_s **)(v0 + 56);
  uint64_t v1 = *(void *)(v3 + 8);
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v2);
  return v1;
}

uint64_t MeasureCore.depthProcessor.getter()
{
  return swift_retain();
}

BOOL MeasureCore.isInitialized.getter()
{
  return *(void *)(v0 + 120) != 0;
}

uint64_t MeasureCore.planeSelectionStats.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 104);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 224);
    CGFloat v5 = *(os_unfair_lock_s **)(v4 + 80);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock(v5);
    swift_beginAccess();
    long long v13 = *(_OWORD *)(v4 + 32);
    long long v14 = *(_OWORD *)(v4 + 16);
    long long v11 = *(_OWORD *)(v4 + 64);
    long long v12 = *(_OWORD *)(v4 + 48);
    os_unfair_lock_unlock(v5);
    swift_release();
    uint64_t result = swift_release();
    long long v8 = v11;
    long long v7 = v12;
    long long v10 = v13;
    long long v9 = v14;
  }
  else
  {
    long long v9 = 0uLL;
    long long v10 = 0uLL;
    long long v7 = 0uLL;
    long long v8 = 0uLL;
  }
  *(_OWORD *)a1 = v9;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = v7;
  *(_OWORD *)(a1 + 48) = v8;
  *(unsigned char *)(a1 + 64) = v3 == 0;
  return result;
}

uint64_t MeasureCore.isPlaneSelectionEnabled.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 136);
}

uint64_t MeasureCore.isPlaneSelectionEnabled.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 136) = a1;
  return result;
}

uint64_t (*MeasureCore.isPlaneSelectionEnabled.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t MeasureCore.shouldUpdateSemantics.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 137);
}

uint64_t MeasureCore.shouldUpdateSemantics.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 137) = a1;
  return result;
}

uint64_t (*MeasureCore.shouldUpdateSemantics.modify())()
{
  return j__swift_endAccess;
}

uint64_t sub_22F1DD688()
{
  *(void *)(v0 + 16) = 0x3F4CCCCD3E99999ALL;
  *(_DWORD *)(v0 + 24) = 1003599639;
  uint64_t v1 = (_DWORD *)swift_slowAlloc();
  *uint64_t v1 = 0;
  *(void *)(v0 + 32) = v1;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(v0 + 40) = sub_22F185414(MEMORY[0x263F8EE78]);
  *(void *)(v0 + 48) = sub_22F186BE8(v2);
  uint64_t v3 = (_DWORD *)swift_slowAlloc();
  *uint64_t v3 = 0;
  *(void *)(v0 + 56) = v3;
  *(void *)(v0 + 64) = sub_22F185618(v2);
  id v4 = objc_msgSend(self, sel_standardUserDefaults);
  CGFloat v5 = (void *)sub_22F223A98();
  unsigned __int8 v6 = objc_msgSend(v4, sel_BOOLForKey_, v5);

  *(unsigned char *)(v0 + 72) = v6;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 112) = 0u;
  *(void *)(v0 + 128) = 0;
  *(_WORD *)(v0 + 136) = 257;
  return v0;
}

uint64_t MeasureCore.initialize(sceneView:motion:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v4 = v3;
  if (v3[15])
  {
    uint64_t result = sub_22F224538();
    __break(1u);
  }
  else
  {
    v4[15] = a1;
    v4[16] = a2;
    long long v8 = self;
    swift_retain_n();
    id v9 = a1;
    if (objc_msgSend(v8, sel_jasperAvailable))
    {
      type metadata accessor for DepthProcessor();
      swift_allocObject();
      uint64_t v10 = sub_22F1B66C4(v9, a2);
      swift_beginAccess();
      v4[14] = v10;
      swift_release();
    }
    type metadata accessor for SegmentationProcessor();
    swift_allocObject();
    id v11 = v9;
    swift_retain();
    v4[10] = sub_22F1E3820(v11, a2, a3);
    swift_release();
    type metadata accessor for LocalPlaneDetector();
    swift_allocObject();
    id v12 = v11;
    v4[11] = LocalPlaneDetector.init(sceneView:)(v12, a2);
    swift_release();
    type metadata accessor for PatchTracker();
    swift_allocObject();
    id v13 = v12;
    swift_retain();
    v4[12] = PatchTracker.init(sceneView:motion:)(v13, a2, a3);
    swift_release();
    type metadata accessor for PlaneSelector();
    swift_allocObject();
    sub_22F1C7310(v13, a2, (uint64_t)sub_22F1E1964, (uint64_t)v4, (uint64_t *)sub_22F1E196C, (uint64_t)v4);
    v4[13] = v14;
    return swift_release();
  }
  return result;
}

uint64_t sub_22F1DD9E4(unsigned __int8 a1, unint64_t a2)
{
  unint64_t v2 = a2;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(a2 + 32));
  swift_beginAccess();
  uint64_t v4 = *(void *)(v2 + 48);
  if (!*(void *)(v4 + 16) || (unint64_t v5 = sub_22F18DDBC(a1), (v6 & 1) == 0))
  {
LABEL_7:
    swift_endAccess();
    uint64_t v11 = 0;
LABEL_20:
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v2 + 32));
    return v11;
  }
  unint64_t v24 = v2;
  uint64_t v7 = *(void *)(*(void *)(v4 + 56) + 8 * v5);
  swift_endAccess();
  unint64_t v2 = v7 & 0xC000000000000001;
  if ((v7 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_22F224348();
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v29 = MEMORY[0x263F8EE78];
      sub_22F224498();
      uint64_t v26 = sub_22F2242E8();
      uint64_t v27 = v10;
      char v28 = 1;
      if ((v9 & 0x8000000000000000) == 0) {
        goto LABEL_12;
      }
      __break(1u);
      goto LABEL_7;
    }
LABEL_18:
    swift_bridgeObjectRelease();
    uint64_t v11 = MEMORY[0x263F8EE78];
LABEL_19:
    unint64_t v2 = v24;
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)(v7 + 16);
  swift_bridgeObjectRetain();
  if (!v9) {
    goto LABEL_18;
  }
  uint64_t v29 = MEMORY[0x263F8EE78];
  sub_22F224498();
  uint64_t v26 = sub_22F1C24F0(v7);
  uint64_t v27 = v12;
  char v28 = v13 & 1;
  while (1)
  {
LABEL_12:
    while (1)
    {
      int64_t v19 = v26;
      uint64_t v20 = v27;
      char v21 = v28;
      sub_22F205BF0(v26, v27, v28, v7);
      sub_22F224468();
      sub_22F2244A8();
      sub_22F2244B8();
      uint64_t result = sub_22F224478();
      if (v2) {
        break;
      }
      int64_t v14 = sub_22F1E17F8(v19, v20, v21, v7);
      uint64_t v16 = v15;
      char v18 = v17;
      sub_22F1C66D4(v19, v20, v21);
      uint64_t v26 = v14;
      uint64_t v27 = v16;
      char v28 = v18 & 1;
      if (!--v9) {
        goto LABEL_17;
      }
    }
    if ((v21 & 1) == 0) {
      break;
    }
    if (sub_22F224308()) {
      swift_isUniquelyReferenced_nonNull_native();
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_268695828);
    uint64_t v23 = (void (*)(unsigned char *, void))sub_22F223E48();
    sub_22F2243A8();
    v23(v25, 0);
    if (!--v9)
    {
LABEL_17:
      sub_22F1C66D4(v26, v27, v28);
      uint64_t v11 = v29;
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_22F1DDC88(uint64_t a1)
{
  os_unfair_lock_lock(*(os_unfair_lock_t *)(a1 + 32));
  swift_beginAccess();
  uint64_t v2 = swift_bridgeObjectRetain();
  unint64_t v3 = sub_22F1DC724(v2);
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(a1 + 32));
  if (v3 >> 62)
  {
    sub_22F1C6770();
    swift_bridgeObjectRetain();
    uint64_t v4 = sub_22F224548();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_22F224748();
    sub_22F1C6770();
    uint64_t v4 = v3;
  }
  swift_bridgeObjectRelease();
  return v4;
}

Swift::Void __swiftcall MeasureCore.deinitialize()()
{
  if (*(void *)(v0 + 120))
  {
    os_unfair_lock_lock(*(os_unfair_lock_t *)(v0 + 32));
    swift_beginAccess();
    uint64_t v1 = MEMORY[0x263F8EE80];
    *(void *)(v0 + 40) = MEMORY[0x263F8EE80];
    swift_bridgeObjectRelease();
    swift_beginAccess();
    *(void *)(v0 + 48) = v1;
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v0 + 32));
    os_unfair_lock_lock(*(os_unfair_lock_t *)(v0 + 56));
    swift_beginAccess();
    *(void *)(v0 + 64) = v1;
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v0 + 56));
    MEMORY[0x230FB40E0](*(void *)(v0 + 32), -1, -1);
    MEMORY[0x230FB40E0](*(void *)(v0 + 56), -1, -1);
    *(void *)(v0 + 80) = 0;
    swift_release();
    *(void *)(v0 + 88) = 0;
    swift_release();
    *(void *)(v0 + 96) = 0;
    swift_release();
    *(void *)(v0 + 104) = 0;
    swift_release();
    uint64_t v2 = *(void **)(v0 + 120);
    *(void *)(v0 + 120) = 0;
    *(void *)(v0 + 128) = 0;
  }
  else
  {
    sub_22F224538();
    __break(1u);
  }
}

void sub_22F1DDED4(void *a1)
{
  if (*(void *)(v1 + 80))
  {
    unint64_t v3 = self;
    swift_retain();
    if (objc_msgSend(v3, sel_hasAppleNeuralEngine))
    {
      uint64_t v4 = sub_22F1E5434(a1);
      if (v4)
      {
        uint64_t v5 = v4;
        int64_t v6 = 0;
        uint64_t v7 = v4 + 64;
        uint64_t v8 = 1 << *(unsigned char *)(v4 + 32);
        uint64_t v9 = -1;
        if (v8 < 64) {
          uint64_t v9 = ~(-1 << v8);
        }
        unint64_t v10 = v9 & *(void *)(v4 + 64);
        int64_t v11 = (unint64_t)(v8 + 63) >> 6;
        uint64_t v35 = (void *)MEMORY[0x263F8EE78];
        if (!v10) {
          goto LABEL_10;
        }
LABEL_7:
        unint64_t v12 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        for (unint64_t i = v12 | (v6 << 6); ; unint64_t i = __clz(__rbit64(v20)) + (v6 << 6))
        {
          int64_t v14 = *(void **)(*(void *)(v5 + 48) + 8 * i);
          unint64_t v15 = *(void *)(v5 + 56) + (i << 6);
          uint64_t v16 = *(void *)(v15 + 8);
          uint64_t v17 = *(void *)(v15 + 32);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v18 = v14;
          if (v16 == 33)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            if (v10) {
              goto LABEL_7;
            }
          }
          else
          {
            float v22 = 0.0;
            if (*(void *)(v17 + 16))
            {
              unint64_t v23 = sub_22F18DDBC(v16);
              if (v24) {
                float v22 = *(float *)(*(void *)(v17 + 56) + 4 * v23);
              }
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            id v25 = v18;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v35 = sub_22F19BC6C(0, v35[2] + 1, 1, v35);
            }
            unint64_t v27 = v35[2];
            unint64_t v26 = v35[3];
            if (v27 >= v26 >> 1) {
              uint64_t v35 = sub_22F19BC6C((void *)(v26 > 1), v27 + 1, 1, v35);
            }
            _OWORD v35[2] = v27 + 1;
            char v28 = &v35[2 * v27];
            v28[4] = v25;
            *((unsigned char *)v28 + 40) = v16;
            *((float *)v28 + 11) = (float)(*((float *)&v16 + 1) / v22)
                                 * (float)(1.0 - fabsf((float)(v22 / 200.0) + -0.3));

            if (v10) {
              goto LABEL_7;
            }
          }
LABEL_10:
          int64_t v19 = v6 + 1;
          if (__OFADD__(v6, 1))
          {
            __break(1u);
LABEL_46:
            __break(1u);
            return;
          }
          if (v19 >= v11) {
            goto LABEL_37;
          }
          unint64_t v20 = *(void *)(v7 + 8 * v19);
          ++v6;
          if (!v20)
          {
            int64_t v6 = v19 + 1;
            if (v19 + 1 >= v11) {
              goto LABEL_37;
            }
            unint64_t v20 = *(void *)(v7 + 8 * v6);
            if (!v20)
            {
              int64_t v6 = v19 + 2;
              if (v19 + 2 >= v11) {
                goto LABEL_37;
              }
              unint64_t v20 = *(void *)(v7 + 8 * v6);
              if (!v20)
              {
                int64_t v21 = v19 + 3;
                if (v21 >= v11)
                {
LABEL_37:
                  swift_release();
                  uint64_t v29 = v35;
                  uint64_t v30 = v35[2];
                  if (v30) {
                    goto LABEL_40;
                  }
                  goto LABEL_42;
                }
                unint64_t v20 = *(void *)(v7 + 8 * v21);
                if (!v20)
                {
                  while (1)
                  {
                    int64_t v6 = v21 + 1;
                    if (__OFADD__(v21, 1)) {
                      goto LABEL_46;
                    }
                    if (v6 >= v11) {
                      goto LABEL_37;
                    }
                    unint64_t v20 = *(void *)(v7 + 8 * v6);
                    ++v21;
                    if (v20) {
                      goto LABEL_23;
                    }
                  }
                }
                int64_t v6 = v21;
              }
            }
          }
LABEL_23:
          unint64_t v10 = (v20 - 1) & v20;
        }
      }
      uint64_t v29 = (void *)MEMORY[0x263F8EE78];
      uint64_t v30 = *(void *)(MEMORY[0x263F8EE78] + 16);
      if (v30)
      {
LABEL_40:
        uint64_t v31 = (float *)v29 + 11;
        do
        {
          float v32 = *v31;
          unsigned int v33 = *((unsigned __int8 *)v31 - 4);
          id v34 = *(id *)(v31 - 3);
          sub_22F1DE290(v33, v34, 1, v32);

          v31 += 4;
          --v30;
        }
        while (v30);
      }
LABEL_42:
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_release();
    }
  }
}

void sub_22F1DE290(unsigned int a1, id a2, char a3, float a4)
{
  uint64_t v5 = v4;
  unsigned int v60 = a1;
  uint64_t v9 = (void **)sub_22F223848();
  uint64_t v10 = (uint64_t)*(v9 - 1);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  unint64_t v13 = (unint64_t)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  uint64_t v16 = (char *)&v56 - v15;
  MEMORY[0x270FA5388](v14);
  id v18 = (char *)&v56 - v17;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v4 + 56));
  id v19 = objc_msgSend(a2, sel_identifier);
  sub_22F223828();

  swift_beginAccess();
  uint64_t v20 = *(void *)(v5 + 64);
  if (*(void *)(v20 + 16) && (unint64_t v21 = sub_22F18DD24((uint64_t)v18), (v22 & 1) != 0))
  {
    unint64_t v23 = *(void **)(*(void *)(v20 + 56) + 8 * v21);
    id v24 = v23;
  }
  else
  {
    unint64_t v23 = 0;
  }
  swift_endAccess();
  id v25 = *(void (**)(char *, void **))(v10 + 8);
  v25(v18, v9);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 56));
  if (v23)
  {
    uint64_t v59 = v23;
    os_unfair_lock_lock(*(os_unfair_lock_t *)(v5 + 32));
    id v26 = objc_msgSend(a2, sel_identifier);
    sub_22F223828();

    swift_beginAccess();
    uint64_t v27 = *(void *)(v5 + 40);
    if (!*(void *)(v27 + 16) || (unint64_t v28 = sub_22F18DD24((uint64_t)v16), (v29 & 1) == 0))
    {
      swift_endAccess();
      v25(v16, v9);
      goto LABEL_16;
    }
    uint64_t v30 = (float *)(*(void *)(v27 + 56) + 8 * v28);
    int v58 = *(unsigned __int8 *)v30;
    float v31 = v30[1];
    swift_endAccess();
    v25(v16, v9);
    float v32 = v59;
    if ((a3 & 1) == 0 || v31 < a4)
    {
      uint64_t v56 = (void *)(v5 + 48);
      swift_beginAccess();
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v63 = *(void **)(v5 + 48);
      unsigned int v33 = v63;
      *(void *)(v5 + 48) = 0x8000000000000000;
      unint64_t v35 = sub_22F18DDBC(v58);
      uint64_t v36 = v33[2];
      BOOL v37 = (v34 & 1) == 0;
      uint64_t v38 = v36 + v37;
      if (__OFADD__(v36, v37)) {
        goto LABEL_41;
      }
      a3 = v34;
      if (v33[3] < v38)
      {
        sub_22F192808(v38, isUniquelyReferenced_nonNull_native);
        unint64_t v39 = sub_22F18DDBC(v58);
        if ((a3 & 1) != (v40 & 1))
        {
LABEL_44:
          sub_22F2247B8();
          __break(1u);
          return;
        }
        unint64_t v35 = v39;
        if (a3) {
          goto LABEL_34;
        }
LABEL_43:
        __break(1u);
        goto LABEL_44;
      }
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        goto LABEL_42;
      }
      if ((v34 & 1) == 0) {
        goto LABEL_43;
      }
      while (1)
      {
LABEL_34:
        uint64_t v54 = v63;
        float32x4_t v62 = *(void **)(v63[7] + 8 * v35);
        uint64_t v55 = (void *)sub_22F1E1630(a2);
        if (v62) {
          *(void *)(v54[7] + 8 * v35) = v62;
        }
        else {
          sub_22F19567C(v35, (uint64_t)v54);
        }
        void *v56 = v54;
        swift_endAccess();

LABEL_16:
        unint64_t v35 = v60;
        id v41 = objc_msgSend(a2, sel_identifier);
        sub_22F223828();

        swift_beginAccess();
        char v42 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v63 = *(void **)(v5 + 40);
        char v43 = 0;
        *(void *)(v5 + 40) = 0x8000000000000000;
        sub_22F1E794C(v35, v13, v42, a4);
        *(void *)(v5 + 40) = v63;
        swift_bridgeObjectRelease();
        v25((char *)v13, v9);
        swift_endAccess();
        uint64_t v9 = (void **)(v5 + 48);
        swift_beginAccess();
        if (!*(void *)(*(void *)(v5 + 48) + 16) || (sub_22F18DDBC(v35), (v44 & 1) == 0))
        {
          swift_endAccess();
          swift_beginAccess();
          char v45 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v63 = *v9;
          char *v9 = (void *)0x8000000000000000;
          sub_22F1E7814(MEMORY[0x263F8EE88], v35, v45);
          char *v9 = v63;
          swift_bridgeObjectRelease();
        }
        swift_endAccess();
        swift_beginAccess();
        a2 = a2;
        a3 = swift_isUniquelyReferenced_nonNull_native();
        float32x4_t v62 = *v9;
        uint64_t v46 = v62;
        char *v9 = (void *)0x8000000000000000;
        unint64_t v13 = sub_22F18DDBC(v35);
        uint64_t v48 = v46[2];
        BOOL v49 = (v47 & 1) == 0;
        uint64_t v50 = v48 + v49;
        if (__OFADD__(v48, v49)) {
          break;
        }
        char v43 = v47;
        if (v46[3] >= v50)
        {
          if (a3)
          {
            if (v47) {
              goto LABEL_26;
            }
            goto LABEL_40;
          }
          goto LABEL_39;
        }
        sub_22F192808(v50, a3);
        unint64_t v51 = sub_22F18DDBC(v35);
        if ((v43 & 1) != (v52 & 1)) {
          goto LABEL_44;
        }
        unint64_t v13 = v51;
        if (v43)
        {
LABEL_26:
          uint64_t v53 = (uint64_t)v62;
          uint64_t v61 = *(void *)(v62[7] + 8 * v13);
          sub_22F1C5040(&v63, a2);
          if (v61) {
            *(void *)(*(void *)(v53 + 56) + 8 * v13) = v61;
          }
          else {
            sub_22F19567C(v13, v53);
          }
          float v32 = v59;
          char *v9 = (void *)v53;
          swift_endAccess();

          goto LABEL_30;
        }
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        sub_22F194570();
        if ((a3 & 1) == 0) {
          goto LABEL_43;
        }
      }
      __break(1u);
LABEL_39:
      sub_22F194570();
      if (v43) {
        goto LABEL_26;
      }
      goto LABEL_40;
    }
LABEL_30:
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 32));
  }
}

Swift::Void __swiftcall MeasureCore.updatePlanes(with:)(ARFrame with)
{
  if (!*(void *)(v1 + 120)) {
    goto LABEL_7;
  }
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 136) != 1) {
    return;
  }
  sub_22F1DDED4(with.super.isa);
  if (!*(void *)(v1 + 88))
  {
    __break(1u);
LABEL_7:
    sub_22F224538();
    __break(1u);
    return;
  }
  swift_retain();
  LocalPlaneDetector.detectPlane(with:)(with.super.isa, (uint64_t)v3);
  swift_release();
}

Swift::Void __swiftcall MeasureCore.didUpdate(with:)(ARFrame with)
{
  uint64_t v2 = v1;
  unint64_t v3 = *(void **)(v1 + 120);
  if (!v3) {
    goto LABEL_17;
  }
  uint64_t v5 = *(void *)(v2 + 128);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  id v8 = v3;
  v7(ObjectType, v5);
  float64_t v13 = v10;
  float64_t v14 = v9;

  v11.f64[0] = v14;
  v11.f64[1] = v13;
  _s17MeasureFoundation24ComputedCameraPropertiesV12updateShared_12viewportSizeySo7ARFrameC_s5SIMD2VySfGtFZ_0(with.super.isa, COERCE_DOUBLE(vcvt_f32_f64(v11)));
  if (objc_msgSend(self, sel_jasperAvailable))
  {
    swift_beginAccess();
    if (*(void *)(v2 + 112))
    {
      swift_retain();
      sub_22F1B78B0(with.super.isa);
      swift_release();
    }
  }
  swift_beginAccess();
  if ((*(unsigned char *)(v2 + 137) & 1) != 0 || (swift_beginAccess(), *(unsigned char *)(v2 + 136) == 1))
  {
    if (*(void *)(v2 + 80))
    {
      swift_retain();
      SegmentationProcessor.didUpdate(frame:)(with);
      swift_release();
    }
  }
  swift_beginAccess();
  if (*(unsigned char *)(v2 + 136) == 1)
  {
    uint64_t v12 = *(void *)(v2 + 104);
    if (v12)
    {
      if (!*(unsigned char *)(v12 + 84)) {
        return;
      }
      if (*(void *)(v2 + 96))
      {
        swift_retain();
        PatchTracker.didUpdate(frame:)(with);
        swift_release();
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_17:
    sub_22F224538();
    __break(1u);
  }
}

uint64_t MeasureCore.hitTest(screenPoint:frame:orientation:context:planeTypes:)@<X0>(uint64_t result@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>, double a5@<D0>)
{
  if (*(void *)(v5 + 104))
  {
    id v8 = (void *)result;
    swift_retain();
    sub_22F1C95B0(v8, a2, a3, v11, a5);
    swift_release();
    return sub_22F1899D0((uint64_t)v11, a4, &qword_268695508);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MeasureCore.edgeHitTest(screenPoint:frame:orientation:planeTypes:useHyperLocalStrategy:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, char a3@<W3>, uint64_t a4@<X8>, double a5@<D0>)
{
  int64_t v6 = (void *)result;
  if (a3)
  {
    if (*(void *)(v5 + 104))
    {
      swift_retain();
      sub_22F1C7830(v6, (uint64_t)v28, a5);
      uint64_t v23 = v28[1];
      uint64_t v24 = v28[0];
      uint64_t v21 = v28[3];
      uint64_t v22 = v28[2];
      uint64_t v19 = v28[5];
      uint64_t v20 = v28[4];
      uint64_t v9 = v28[7];
      uint64_t v18 = v28[6];
      uint64_t v10 = v28[8];
      uint64_t v11 = v28[9];
      uint64_t v12 = v28[10];
      uint64_t v13 = v28[11];
      uint64_t v14 = v28[12];
      uint64_t v15 = v28[13];
      int v16 = v29;
LABEL_6:
      uint64_t result = swift_release();
      *(void *)a4 = v24;
      *(void *)(a4 + 8) = v23;
      *(void *)(a4 + 16) = v22;
      *(void *)(a4 + 24) = v21;
      *(void *)(a4 + 32) = v20;
      *(void *)(a4 + 40) = v19;
      *(void *)(a4 + 48) = v18;
      *(void *)(a4 + 56) = v9;
      *(void *)(a4 + 64) = v10;
      *(void *)(a4 + 72) = v11;
      *(void *)(a4 + 80) = v12;
      *(void *)(a4 + 88) = v13;
      *(void *)(a4 + 96) = v14;
      *(void *)(a4 + 104) = v15;
      *(_DWORD *)(a4 + 112) = v16;
      return result;
    }
    __break(1u);
  }
  else
  {
    sub_22F1E1DEC((uint64_t)v25);
    uint64_t result = sub_22F1899D0((uint64_t)v25, (uint64_t)v28, &qword_268695438);
    if (*(void *)(v5 + 104))
    {
      swift_retain();
      sub_22F1C95B0(v6, v28, a2, v26, a5);
      uint64_t v23 = (uint64_t)v26[1];
      uint64_t v24 = (uint64_t)v26[0];
      uint64_t v21 = (uint64_t)v26[3];
      uint64_t v22 = (uint64_t)v26[2];
      uint64_t v19 = (uint64_t)v26[5];
      uint64_t v20 = (uint64_t)v26[4];
      uint64_t v9 = (uint64_t)v26[7];
      uint64_t v18 = (uint64_t)v26[6];
      uint64_t v10 = (uint64_t)v26[8];
      uint64_t v11 = (uint64_t)v26[9];
      uint64_t v12 = (uint64_t)v26[10];
      uint64_t v13 = (uint64_t)v26[11];
      uint64_t v14 = (uint64_t)v26[12];
      uint64_t v15 = (uint64_t)v26[13];
      int v16 = v27;
      goto LABEL_6;
    }
  }
  __break(1u);
  return result;
}

Swift::OpaquePointer_optional __swiftcall MeasureCore.adHitTestPositionOnly(screenPoints:frame:)(Swift::OpaquePointer screenPoints, ARFrame frame)
{
  uint64_t v2 = (void *)sub_22F1DED80((uint64_t)screenPoints._rawValue, (uint64_t)frame.super.isa, (uint64_t (*)(uint64_t, uint64_t))sub_22F1B7164);
  result.value._rawValue = v2;
  result.is_nil = v3;
  return result;
}

uint64_t sub_22F1DED80(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  swift_beginAccess();
  if (!*(void *)(v3 + 112)) {
    return 0;
  }
  swift_retain();
  uint64_t v7 = a3(a1, a2);
  swift_release();
  return v7;
}

uint64_t MeasureCore.adHitTest(screenPoint:frame:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t result = swift_beginAccess();
  uint64_t v10 = *(void *)(v4 + 112);
  long long v11 = 0uLL;
  int v12 = 0;
  if (!v10)
  {
    uint64_t v28 = 0;
    long long v32 = 0uLL;
    long long v33 = 0uLL;
    long long v30 = 0uLL;
    long long v31 = 0uLL;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_268694568);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22F227140;
  *(double *)(inited + 32) = a3;
  *(double *)(inited + 40) = a4;
  swift_retain();
  uint64_t v14 = sub_22F1B68DC(inited, a1);
  swift_setDeallocating();
  uint64_t result = swift_release();
  if (!v14) {
    goto LABEL_8;
  }
  if (!*(void *)(v14 + 16))
  {
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  uint64_t v15 = *(void *)(v14 + 64);
  uint64_t v16 = *(void *)(v14 + 72);
  double v17 = *(double *)(v14 + 80);
  uint64_t v18 = *(void *)(v14 + 96);
  char v19 = *(unsigned char *)(v14 + 104);
  uint64_t result = swift_bridgeObjectRelease();
  if (v19)
  {
LABEL_8:
    uint64_t v28 = 0;
    uint64_t v10 = 0;
    long long v32 = 0uLL;
    long long v33 = 0uLL;
    long long v30 = 0uLL;
    long long v31 = 0uLL;
    long long v11 = 0uLL;
    goto LABEL_9;
  }
  v20.i64[1] = v16;
  v20.i64[0] = v15;
  _sSo13simd_float4x4a17MeasureFoundationE4make8position17normalizedForwardABs5SIMD3VySfG_AItFZ_0(v17, v20);
  sceneKitToARKit(_:)(v22, v21);
  long long v36 = v24;
  long long v37 = v23;
  long long v34 = v26;
  long long v35 = v25;
  id v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F20E38]), sel_initWithTransform_, *(double *)&v23, *(double *)&v24, *(double *)&v25, *(double *)&v26);
  type metadata accessor for WorldPlane();
  swift_allocObject();
  uint64_t v10 = sub_22F210A98(v27, 6, (float)((float)v18 * -0.5) + 1.0, 1.0);

  uint64_t v28 = 1;
  swift_retain();
  sub_22F2105E8();
  int v12 = v29;
  uint64_t result = swift_release();
  long long v31 = v34;
  long long v30 = v35;
  long long v33 = v36;
  long long v32 = v37;
  long long v11 = xmmword_22F228C60;
LABEL_9:
  *(_OWORD *)a2 = v11;
  *(_OWORD *)(a2 + 16) = v32;
  *(_OWORD *)(a2 + 32) = v33;
  *(_OWORD *)(a2 + 48) = v30;
  *(_OWORD *)(a2 + 64) = v31;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = v28;
  *(void *)(a2 + 104) = v10;
  *(_DWORD *)(a2 + 112) = v12;
  return result;
}

BOOL MeasureCore.isOccluded(_:in:withTolerance:)(void *a1, float32x4_t a2, float a3)
{
  sub_22F1EE604(a1, (uint64_t)v22);
  float32x4_t v18 = v24;
  float32x4_t v19 = v23;
  float32x4_t v16 = v26;
  float32x4_t v17 = v25;
  sub_22F1EE604(a1, (uint64_t)v27);
  _s17MeasureFoundation0A6CameraC12projectPoint_14viewProjection12viewportSizes5SIMD3VySfGAI_So13simd_float4x4as5SIMD2VySfGtFZ_0(a2, v19, v18, v17, v16, v27[0]);
  sub_22F224068();
  float v6 = v5;
  float v8 = v7;
  if (qword_2686944A0 != -1) {
    swift_once();
  }
  MeasureCore.adHitTest(screenPoint:frame:)(a1, (uint64_t)v28, v6, v8);
  sub_22F1899D0((uint64_t)v28, (uint64_t)v29, &qword_268695508);
  if (!*((void *)&v30 + 1)) {
    return 0;
  }
  long long v36 = v29[4];
  long long v37 = v29[5];
  long long v38 = v30;
  int v39 = v31;
  long long v32 = v29[0];
  long long v33 = v29[1];
  long long v34 = v29[2];
  long long v35 = v29[3];
  float v9 = WorldPlaneHitTestResult.distanceToCamera(in:)((ARFrame)a1);
  id v10 = objc_msgSend(a1, sel_camera);
  objc_msgSend(v10, sel_transform);
  float32x4_t v20 = v11;

  float32x4_t v12 = vsubq_f32(v20, a2);
  float32x4_t v13 = vmulq_f32(v12, v12);
  float v14 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).f32[0]);
  sub_22F1CEA38((uint64_t)v28);
  return (float)(v9 + a3) < v14;
}

Swift::Void __swiftcall MeasureCore.didAdd(anchors:)(Swift::OpaquePointer anchors)
{
  uint64_t v38 = sub_22F223848();
  uint64_t v34 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  uint64_t v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_unfair_lock_lock(*((os_unfair_lock_t *)v1 + 7));
  if ((unint64_t)anchors._rawValue >> 62)
  {
LABEL_26:
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_22F2245C8();
    if (v5) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v5 = *(void *)(((unint64_t)anchors._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v5)
    {
LABEL_3:
      float v6 = (char **)(v1 + 64);
      unint64_t v39 = (unint64_t)anchors._rawValue & 0xC000000000000001;
      long long v32 = v1;
      uint64_t v33 = v34 + 16;
      long long v35 = (void (**)(char *, uint64_t))(v34 + 8);
      uint64_t v36 = v5;
      uint64_t v7 = 4;
      rawValue = anchors._rawValue;
      while (1)
      {
        if (v39) {
          id v10 = (char *)MEMORY[0x230FB2E90](v7 - 4, anchors._rawValue);
        }
        else {
          id v10 = (char *)*((id *)anchors._rawValue + v7);
        }
        uint64_t v1 = v10;
        uint64_t v11 = v7 - 3;
        if (__OFADD__(v7 - 4, 1))
        {
          __break(1u);
LABEL_24:
          __break(1u);
LABEL_25:
          __break(1u);
          goto LABEL_26;
        }
        self;
        uint64_t v12 = swift_dynamicCastObjCClass();
        if (v12)
        {
          float32x4_t v13 = (void *)v12;
          char v40 = v1;
          float v14 = v1;
          id v15 = objc_msgSend(v13, sel_identifier);
          sub_22F223828();

          swift_beginAccess();
          float32x4_t v16 = v14;
          uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v18 = (uint64_t)v4;
          uint64_t v4 = (char *)isUniquelyReferenced_nonNull_native;
          id v41 = *v6;
          uint64_t v1 = v41;
          float32x4_t v19 = v6;
          *float v6 = (char *)0x8000000000000000;
          uint64_t v20 = v18;
          unint64_t v22 = sub_22F18DD24(v18);
          uint64_t v23 = *((void *)v1 + 2);
          BOOL v24 = (v21 & 1) == 0;
          uint64_t v25 = v23 + v24;
          if (__OFADD__(v23, v24)) {
            goto LABEL_24;
          }
          anchors._rawValue = v21;
          if (*((void *)v1 + 3) >= v25)
          {
            if ((v4 & 1) == 0) {
              sub_22F194BA0();
            }
            uint64_t v4 = (char *)v20;
          }
          else
          {
            sub_22F193208(v25, (int)v4);
            uint64_t v4 = (char *)v20;
            unint64_t v26 = sub_22F18DD24(v20);
            if (((uint64_t)anchors._rawValue & 1) != (v27 & 1))
            {
              sub_22F2247B8();
              __break(1u);
              return;
            }
            unint64_t v22 = v26;
          }
          float v6 = v19;
          uint64_t v1 = v41;
          if ((uint64_t)anchors._rawValue)
          {
            uint64_t v8 = *((void *)v41 + 7);
            uint64_t v9 = 8 * v22;

            *(void *)(v8 + v9) = v13;
          }
          else
          {
            *(void *)&v41[8 * (v22 >> 6) + 64] |= 1 << v22;
            (*(void (**)(unint64_t, char *, uint64_t))(v34 + 16))(*((void *)v1 + 6) + *(void *)(v34 + 72) * v22, v4, v38);
            *(void *)(*((void *)v1 + 7) + 8 * v22) = v13;
            uint64_t v28 = *((void *)v1 + 2);
            BOOL v29 = __OFADD__(v28, 1);
            uint64_t v30 = v28 + 1;
            if (v29) {
              goto LABEL_25;
            }
            *((void *)v1 + 2) = v30;
          }
          *float32x4_t v19 = v1;
          swift_bridgeObjectRelease();
          (*v35)(v4, v38);
          swift_endAccess();

          uint64_t v5 = v36;
          anchors._rawValue = rawValue;
          uint64_t v1 = v40;
        }

        ++v7;
        if (v11 == v5)
        {
          swift_bridgeObjectRelease();
          uint64_t v1 = v32;
          goto LABEL_28;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_28:
  os_unfair_lock_unlock(*((os_unfair_lock_t *)v1 + 7));
}

Swift::Void __swiftcall MeasureCore.didRemove(anchors:)(Swift::OpaquePointer anchors)
{
  uint64_t v3 = sub_22F223848();
  uint64_t v55 = *(void *)(v3 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  uint64_t v54 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v50 - v7;
  MEMORY[0x270FA5388](v6);
  id v10 = (char *)&v50 - v9;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + 56));
  uint64_t v58 = v3;
  if ((unint64_t)anchors._rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = v58;
    uint64_t v11 = sub_22F2245C8();
  }
  else
  {
    uint64_t v11 = *(void *)(((unint64_t)anchors._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  uint64_t v56 = v11;
  rawValue = anchors._rawValue;
  uint64_t v50 = v1;
  uint64_t v53 = v8;
  if (v11)
  {
    if (v11 < 1)
    {
      __break(1u);
      goto LABEL_38;
    }
    uint64_t v12 = 0;
    float32x4_t v13 = (uint64_t *)(v1 + 64);
    unint64_t v14 = (unint64_t)anchors._rawValue & 0xC000000000000001;
    id v15 = (void (**)(char *, uint64_t))(v55 + 8);
    do
    {
      if (v14) {
        id v18 = (id)MEMORY[0x230FB2E90](v12, anchors._rawValue);
      }
      else {
        id v18 = *((id *)anchors._rawValue + v12 + 4);
      }
      float32x4_t v19 = v18;
      id v20 = objc_msgSend(v18, sel_identifier, v50);
      sub_22F223828();

      swift_beginAccess();
      swift_bridgeObjectRetain();
      unint64_t v21 = sub_22F18DD24((uint64_t)v10);
      char v23 = v22;
      swift_bridgeObjectRelease();
      float32x4_t v17 = 0;
      if (v23)
      {
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v25 = *v13;
        uint64_t v60 = *v13;
        *float32x4_t v13 = 0x8000000000000000;
        if (!isUniquelyReferenced_nonNull_native)
        {
          sub_22F194BA0();
          uint64_t v25 = v60;
        }
        (*(void (**)(unint64_t, uint64_t))(v55 + 8))(*(void *)(v25 + 48) + *(void *)(v55 + 72) * v21, v58);
        uint64_t v16 = v60;
        float32x4_t v17 = *(void **)(*(void *)(v60 + 56) + 8 * v21);
        sub_22F195010(v21, v60);
        *float32x4_t v13 = v16;
        swift_bridgeObjectRelease();
      }
      ++v12;
      swift_endAccess();

      uint64_t v3 = v58;
      (*v15)(v10, v58);

      uint64_t v11 = v56;
      anchors._rawValue = rawValue;
    }
    while (v56 != v12);
    swift_bridgeObjectRelease();
    uint64_t v1 = v50;
    uint64_t v8 = v53;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + 56));
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + 32));
  if (!v11)
  {
LABEL_35:
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + 32));
    return;
  }
  if (v11 >= 1)
  {
    unint64_t v26 = (uint64_t *)(v1 + 40);
    uint64_t v52 = v1 + 48;
    unint64_t v27 = (unint64_t)anchors._rawValue & 0xC000000000000001;
    uint64_t v28 = (void (**)(char *, uint64_t))(v55 + 8);
    swift_bridgeObjectRetain();
    uint64_t v29 = 0;
    unint64_t v51 = (unint64_t)anchors._rawValue & 0xC000000000000001;
    do
    {
      if (v27) {
        id v30 = (id)MEMORY[0x230FB2E90](v29, anchors._rawValue);
      }
      else {
        id v30 = *((id *)anchors._rawValue + v29 + 4);
      }
      uint64_t v31 = v30;
      id v32 = objc_msgSend(v30, sel_identifier, v50);
      sub_22F223828();

      swift_beginAccess();
      uint64_t v33 = *v26;
      if (*(void *)(*v26 + 16) && (unint64_t v34 = sub_22F18DD24((uint64_t)v8), (v35 & 1) != 0))
      {
        unsigned __int8 v36 = *(unsigned char *)(*(void *)(v33 + 56) + 8 * v34);
        swift_endAccess();
        long long v37 = *v28;
        (*v28)(v8, v3);
        id v38 = objc_msgSend(v31, sel_identifier);
        uint64_t v39 = (uint64_t)v54;
        sub_22F223828();

        swift_beginAccess();
        swift_bridgeObjectRetain();
        unint64_t v40 = sub_22F18DD24(v39);
        uint64_t v41 = v3;
        char v43 = v42;
        swift_bridgeObjectRelease();
        if (v43)
        {
          int v44 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v45 = *v26;
          uint64_t v60 = *v26;
          *unint64_t v26 = 0x8000000000000000;
          if (!v44)
          {
            sub_22F194714();
            uint64_t v45 = v60;
          }
          uint64_t v41 = v58;
          v37((char *)(*(void *)(v45 + 48) + *(void *)(v55 + 72) * v40), v58);
          uint64_t v46 = v60;
          sub_22F195010(v40, v60);
          *unint64_t v26 = v46;
          swift_bridgeObjectRelease();
        }
        swift_endAccess();
        v37(v54, v41);
        swift_beginAccess();
        char v47 = sub_22F1DCA6C(v59, v36);
        uint64_t v3 = v41;
        if (*v48)
        {
          BOOL v49 = (void *)sub_22F1E1630(v31);
          ((void (*)(void *, void))v47)(v59, 0);
          swift_endAccess();
        }
        else
        {
          ((void (*)(void *, void))v47)(v59, 0);
          swift_endAccess();
        }
        uint64_t v11 = v56;
        anchors._rawValue = rawValue;
        uint64_t v8 = v53;
        unint64_t v27 = v51;
      }
      else
      {
        swift_endAccess();

        (*v28)(v8, v3);
      }
      ++v29;
    }
    while (v11 != v29);
    swift_bridgeObjectRelease();
    uint64_t v1 = v50;
    goto LABEL_35;
  }
LABEL_38:
  __break(1u);
}

Swift::Void __swiftcall MeasureCore.didUpdate(anchors:)(Swift::OpaquePointer anchors)
{
  uint64_t v98 = sub_22F223848();
  unsigned long long v94 = *(void (**)(uint64_t, uint64_t))(v98 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](v98);
  uint64_t v91 = (char *)&v75 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v90 = (char *)&v75 - v6;
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (uint64_t)&v75 - v8;
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v75 - v10;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + 56));
  if ((unint64_t)anchors._rawValue >> 62) {
    goto LABEL_88;
  }
  uint64_t v12 = *(void *)(((unint64_t)anchors._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (1)
  {
    uint64_t v92 = (void *)v12;
    rawValue = anchors._rawValue;
    uint64_t v76 = v1;
    uint64_t v79 = v9;
    if (!v12) {
      break;
    }
    float32x4_t v13 = (uint64_t *)(v1 + 64);
    unint64_t v96 = (unint64_t)anchors._rawValue & 0xC000000000000001;
    float32x4_t v89 = (char *)v94 + 16;
    uint64_t v95 = (void (**)(char *, uint64_t))((char *)v94 + 8);
    uint64_t v9 = 4;
    while (1)
    {
      id v17 = v96 ? (id)MEMORY[0x230FB2E90](v9 - 4, anchors._rawValue) : *((id *)anchors._rawValue + v9);
      uint64_t v1 = (uint64_t)v17;
      anchors._rawValue = (void *)(v9 - 3);
      if (__OFADD__(v9 - 4, 1)) {
        break;
      }
      self;
      uint64_t v18 = swift_dynamicCastObjCClass();
      if (!v18) {
        goto LABEL_7;
      }
      float32x4_t v19 = (void *)v18;
      uint64_t v97 = (void (**)(uint64_t, uint64_t))v1;
      id v20 = (id)v1;
      id v21 = objc_msgSend(v19, sel_identifier);
      sub_22F223828();

      swift_beginAccess();
      id v22 = v20;
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v99[0] = *v13;
      uint64_t v1 = v99[0];
      BOOL v24 = v13;
      *float32x4_t v13 = 0x8000000000000000;
      uint64_t v25 = (uint64_t)v11;
      unint64_t v27 = sub_22F18DD24((uint64_t)v11);
      uint64_t v28 = *(void *)(v1 + 16);
      BOOL v29 = (v26 & 1) == 0;
      uint64_t v30 = v28 + v29;
      if (__OFADD__(v28, v29)) {
        goto LABEL_84;
      }
      char v31 = v26;
      if (*(void *)(v1 + 24) >= v30)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          uint64_t v1 = v99[0];
          if ((v26 & 1) == 0) {
            goto LABEL_20;
          }
        }
        else
        {
          sub_22F194BA0();
          uint64_t v1 = v99[0];
          if ((v31 & 1) == 0) {
            goto LABEL_20;
          }
        }
      }
      else
      {
        sub_22F193208(v30, isUniquelyReferenced_nonNull_native);
        unint64_t v32 = sub_22F18DD24(v25);
        if ((v31 & 1) != (v33 & 1))
        {
          sub_22F2247B8();
          __break(1u);
          return;
        }
        unint64_t v27 = v32;
        uint64_t v1 = v99[0];
        if ((v31 & 1) == 0)
        {
LABEL_20:
          *(void *)(v1 + 8 * (v27 >> 6) + 64) |= 1 << v27;
          uint64_t v11 = (char *)v25;
          (*((void (**)(unint64_t, uint64_t, uint64_t))v94 + 2))(*(void *)(v1 + 48) + *((void *)v94 + 9) * v27, v25, v98);
          *(void *)(*(void *)(v1 + 56) + 8 * v27) = v19;
          uint64_t v34 = *(void *)(v1 + 16);
          BOOL v35 = __OFADD__(v34, 1);
          uint64_t v36 = v34 + 1;
          if (v35) {
            goto LABEL_86;
          }
          *(void *)(v1 + 16) = v36;
          goto LABEL_6;
        }
      }
      uint64_t v14 = *(void *)(v1 + 56);
      uint64_t v15 = 8 * v27;

      *(void *)(v14 + v15) = v19;
      uint64_t v11 = (char *)v25;
LABEL_6:
      float32x4_t v13 = v24;
      *BOOL v24 = v1;
      swift_bridgeObjectRelease();
      (*v95)(v11, v98);
      swift_endAccess();

      uint64_t v1 = (uint64_t)v97;
LABEL_7:

      ++v9;
      uint64_t v12 = (uint64_t)v92;
      BOOL v16 = anchors._rawValue == v92;
      anchors._rawValue = rawValue;
      if (v16)
      {
        swift_bridgeObjectRelease();
        uint64_t v1 = v76;
        uint64_t v9 = v79;
        goto LABEL_26;
      }
    }
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_22F2245C8();
  }
  swift_bridgeObjectRelease();
LABEL_26:
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + 56));
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + 32));
  if (!v12) {
    goto LABEL_81;
  }
  long long v37 = (uint64_t *)(v1 + 40);
  id v38 = (uint64_t *)(v1 + 48);
  unint64_t v88 = (unint64_t)anchors._rawValue & 0xC000000000000001;
  unint64_t v83 = (unint64_t)anchors._rawValue & 0xFFFFFFFFFFFFFF8;
  uint64_t v82 = (char *)anchors._rawValue + 32;
  uint64_t v97 = (void (**)(uint64_t, uint64_t))((char *)v94 + 8);
  swift_bridgeObjectRetain();
  unint64_t v39 = 0;
  uint64_t v84 = MEMORY[0x263F8EE50] + 8;
  uint64_t v77 = v1 + 40;
  uint64_t v78 = v1 + 48;
  while (2)
  {
    if (v88)
    {
      unint64_t v40 = (char *)MEMORY[0x230FB2E90](v39, anchors._rawValue);
    }
    else
    {
      if (v39 >= *(void *)(v83 + 16)) {
        goto LABEL_85;
      }
      unint64_t v40 = (char *)*(id *)&v82[8 * v39];
    }
    uint64_t v11 = v40;
    BOOL v35 = __OFADD__(v39, 1);
    unint64_t v41 = v39 + 1;
    if (v35) {
      goto LABEL_83;
    }
    unint64_t v96 = v41;
    id v42 = objc_msgSend(v40, sel_identifier);
    sub_22F223828();

    swift_beginAccess();
    uint64_t v1 = *v37;
    if (*(void *)(*v37 + 16) && (unint64_t v43 = sub_22F18DD24(v9), (v44 & 1) != 0))
    {
      int v45 = *(unsigned __int8 *)(*(void *)(v1 + 56) + 8 * v43);
      swift_endAccess();
      unsigned long long v94 = *v97;
      v94(v9, v98);
      swift_beginAccess();
      uint64_t v1 = *v38;
      if (*(void *)(*v38 + 16) && (unint64_t v46 = sub_22F18DDBC(v45), (v47 & 1) != 0))
      {
        int v81 = v45;
        anchors._rawValue = *(void **)(*(void *)(v1 + 56) + 8 * v46);
        swift_endAccess();
        uint64_t v95 = (void (**)(char *, uint64_t))v11;
        if (((unint64_t)anchors._rawValue & 0xC000000000000001) != 0)
        {
          swift_bridgeObjectRetain();
          uint64_t v1 = sub_22F2242F8();
          sub_22F1C6770();
          sub_22F1E1E10();
          sub_22F223E78();
          anchors._rawValue = v100[1];
          float32x4_t v87 = (char *)v100[2];
          id v48 = v100[3];
          uint64_t v49 = (uint64_t)v100[4];
          unint64_t v50 = (unint64_t)v100[5];
        }
        else
        {
          uint64_t v51 = -1 << *((unsigned char *)anchors._rawValue + 32);
          uint64_t v52 = *((void *)anchors._rawValue + 7);
          float32x4_t v87 = (char *)anchors._rawValue + 56;
          uint64_t v1 = ~v51;
          uint64_t v53 = -v51;
          if (v53 < 64) {
            uint64_t v54 = ~(-1 << v53);
          }
          else {
            uint64_t v54 = -1;
          }
          unint64_t v50 = v54 & v52;
          swift_bridgeObjectRetain();
          id v48 = (id)v1;
          uint64_t v49 = 0;
        }
        unint64_t v85 = (unint64_t)anchors._rawValue & 0x7FFFFFFFFFFFFFFFLL;
        id v80 = v48;
        int64_t v86 = ((unint64_t)v48 + 64) >> 6;
        if (((unint64_t)anchors._rawValue & 0x8000000000000000) == 0) {
          goto LABEL_50;
        }
LABEL_47:
        uint64_t v55 = sub_22F224378();
        if (v55)
        {
          v99[4] = v55;
          sub_22F1C6770();
          swift_unknownObjectRetain();
          swift_dynamicCast();
          id v56 = (id)v99[0];
          swift_unknownObjectRelease();
          uint64_t v1 = v49;
          uint64_t v57 = v50;
          while (v56)
          {
            float32x4_t v89 = (char *)v50;
            id v62 = objc_msgSend(v56, sel_identifier);
            uint64_t v9 = (uint64_t)v90;
            sub_22F223828();

            id v63 = objc_msgSend(v95, sel_identifier);
            float32x4_t v64 = v91;
            sub_22F223828();

            LOBYTE(v63) = sub_22F223818();
            float v65 = v64;
            uint64_t v66 = v98;
            uint64_t v67 = v94;
            v94((uint64_t)v65, v98);
            v67(v9, v66);
            if (v63)
            {
              swift_beginAccess();
              int v68 = sub_22F1DCA6C(v99, v81);
              if (*v69)
              {
                uint64_t v70 = (void *)sub_22F1E1630(v56);
                ((void (*)(void *, void))v68)(v99, 0);
                swift_endAccess();
                sub_22F196330();
              }
              else
              {
                ((void (*)(void *, void))v68)(v99, 0);
                swift_endAccess();

                sub_22F196330();
              }
              uint64_t v11 = (char *)v95;
              goto LABEL_75;
            }

            uint64_t v49 = v1;
            unint64_t v50 = v57;
            if (((unint64_t)anchors._rawValue & 0x8000000000000000) != 0) {
              goto LABEL_47;
            }
LABEL_50:
            if (v50)
            {
              uint64_t v57 = (v50 - 1) & v50;
              unint64_t v58 = __clz(__rbit64(v50)) | (v49 << 6);
              uint64_t v1 = v49;
            }
            else
            {
              int64_t v59 = v49 + 1;
              uint64_t v11 = (char *)v95;
              if (__OFADD__(v49, 1)) {
                goto LABEL_87;
              }
              if (v59 >= v86) {
                goto LABEL_74;
              }
              unint64_t v60 = *(void *)&v87[8 * v59];
              uint64_t v1 = v49 + 1;
              if (!v60)
              {
                uint64_t v1 = v49 + 2;
                if (v49 + 2 >= v86) {
                  goto LABEL_74;
                }
                unint64_t v60 = *(void *)&v87[8 * v1];
                if (!v60)
                {
                  uint64_t v1 = v49 + 3;
                  if (v49 + 3 >= v86) {
                    goto LABEL_74;
                  }
                  unint64_t v60 = *(void *)&v87[8 * v1];
                  if (!v60)
                  {
                    uint64_t v1 = v49 + 4;
                    if (v49 + 4 >= v86) {
                      goto LABEL_74;
                    }
                    unint64_t v60 = *(void *)&v87[8 * v1];
                    if (!v60)
                    {
                      uint64_t v61 = (char *)(v49 + 5);
                      while ((char *)v86 != v61)
                      {
                        unint64_t v60 = *(void *)&v87[8 * (void)v61++];
                        if (v60)
                        {
                          uint64_t v1 = (uint64_t)(v61 - 1);
                          goto LABEL_65;
                        }
                      }
                      goto LABEL_74;
                    }
                  }
                }
              }
LABEL_65:
              uint64_t v57 = (v60 - 1) & v60;
              unint64_t v58 = __clz(__rbit64(v60)) + (v1 << 6);
            }
            id v56 = *(id *)(*((void *)anchors._rawValue + 6) + 8 * v58);
          }
        }
        uint64_t v11 = (char *)v95;
LABEL_74:
        sub_22F196330();
LABEL_75:
        unsigned __int8 v71 = v81;
        id v38 = (uint64_t *)v78;
        swift_beginAccess();
        unsigned __int8 v72 = v71;
        uint64_t v1 = (uint64_t)v38;
        uint64_t v74 = sub_22F1DCA6C(v99, v72);
        uint64_t v9 = v79;
        uint64_t v12 = (uint64_t)v92;
        long long v37 = (uint64_t *)v77;
        if (*v73)
        {
          uint64_t v1 = (uint64_t)v73;
          uint64_t v11 = v11;
          sub_22F1C5040(v100, v11);
          ((void (*)(void *, void))v74)(v99, 0);
          swift_endAccess();
        }
        else
        {
          ((void (*)(void *, void))v74)(v99, 0);
          swift_endAccess();
        }
        anchors._rawValue = rawValue;
      }
      else
      {
        swift_endAccess();
      }
    }
    else
    {
      swift_endAccess();

      (*v97)(v9, v98);
    }
    unint64_t v39 = v96;
    if (v96 != v12) {
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  uint64_t v1 = v76;
LABEL_81:
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + 32));
}

uint64_t sub_22F1E0634(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_22F223848();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v2 + 32));
  id v8 = objc_msgSend(a1, sel_identifier);
  sub_22F223828();

  swift_beginAccess();
  uint64_t v9 = *(void *)(v2 + 40);
  if (*(void *)(v9 + 16) && (unint64_t v10 = sub_22F18DD24((uint64_t)v7), (v11 & 1) != 0))
  {
    uint64_t v12 = *(unsigned __int8 *)(*(void *)(v9 + 56) + 8 * v10);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v2 + 32));
    if (v12 != 33) {
      return v12;
    }
  }
  else
  {
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v2 + 32));
  }
  return 0;
}

float sub_22F1E07B8(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_22F223848();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v2 + 32));
  id v8 = objc_msgSend(a1, sel_identifier);
  sub_22F223828();

  swift_beginAccess();
  uint64_t v9 = *(void *)(v2 + 40);
  if (*(void *)(v9 + 16) && (unint64_t v10 = sub_22F18DD24((uint64_t)v7), (v11 & 1) != 0))
  {
    float v12 = *(float *)(*(void *)(v9 + 56) + 8 * v10 + 4);
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    float v12 = 0.0;
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v2 + 32));
  return v12;
}

uint64_t MeasureCore.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return v0;
}

uint64_t MeasureCore.__deallocating_deinit()
{
  MeasureCore.deinit();
  return swift_deallocClassInstance();
}

void (*sub_22F1E09AC(void *a1, uint64_t a2))(uint64_t a1)
{
  uint64_t v4 = malloc(0x68uLL);
  *a1 = v4;
  uint64_t v5 = sub_22F223848();
  v4[8] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  v4[9] = v6;
  id v8 = malloc(*(void *)(v6 + 64));
  v4[10] = v8;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  (*(void (**)(void *, uint64_t, uint64_t))(v7 + 16))(v8, a2, v5);
  v4[11] = sub_22F1E0F40(v4);
  v4[12] = sub_22F1E0C54(v4 + 4, (uint64_t)v8, isUniquelyReferenced_nonNull_native);
  return sub_22F1E0ACC;
}

void sub_22F1E0ACC(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 88);
  uint64_t v4 = *(void *)(*(void *)a1 + 72);
  uint64_t v3 = *(void **)(*(void *)a1 + 80);
  uint64_t v5 = *(void *)(*(void *)a1 + 64);
  (*(void (**)(void))(*(void *)a1 + 96))();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v5);
  v2(v1, 0);
  free(v3);
  free(v1);
}

void (*sub_22F1E0B64(void *a1, unsigned __int8 a2))(uint64_t a1)
{
  uint64_t v4 = malloc(0x50uLL);
  *a1 = v4;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4[8] = sub_22F1E0F7C(v4);
  v4[9] = sub_22F1E0DD4((uint64_t)(v4 + 4), a2, isUniquelyReferenced_nonNull_native);
  return sub_22F1E0BF4;
}

void sub_22F1E0BF4(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 64);
  (*(void (**)(void))(*(void *)a1 + 72))();
  v2(v1, 0);
  free(v1);
}

void (*sub_22F1E0C54(void *a1, uint64_t a2, char a3))(uint64_t **a1)
{
  uint64_t v4 = v3;
  id v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[1] = a2;
  CVPixelBufferRef v8[2] = v3;
  uint64_t v9 = *v3;
  unint64_t v11 = sub_22F18DD24(a2);
  *((unsigned char *)v8 + 32) = v10 & 1;
  uint64_t v12 = *(void *)(v9 + 16);
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    char v15 = v10;
    uint64_t v16 = *(void *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[3] = v11;
      if (v15)
      {
LABEL_8:
        uint64_t v17 = *(void *)(*(void *)(*v4 + 56) + 8 * v11);
LABEL_12:
        *id v8 = v17;
        return sub_22F1E0D84;
      }
LABEL_11:
      uint64_t v17 = 0;
      goto LABEL_12;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      sub_22F193D30();
      goto LABEL_7;
    }
    sub_22F191A4C(v14, a3 & 1);
    unint64_t v18 = sub_22F18DD24(a2);
    if ((v15 & 1) == (v19 & 1))
    {
      unint64_t v11 = v18;
      v8[3] = v18;
      if (v15) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  sub_22F223848();
  uint64_t result = (void (*)(uint64_t **))sub_22F2247B8();
  __break(1u);
  return result;
}

void sub_22F1E0D84(uint64_t **a1)
{
  uint64_t v1 = *a1;
  sub_22F1E83F8(*a1, *((unsigned char *)*a1 + 32), (uint64_t *)(*a1)[2], (*a1)[3], (*a1)[1]);
  swift_bridgeObjectRelease();
  free(v1);
}

unint64_t (*sub_22F1E0DD4(uint64_t a1, unsigned __int8 a2, char a3))(unint64_t result)
{
  uint64_t v4 = v3;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 24) = a2;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_22F18DDBC(a2);
  *(unsigned char *)(a1 + 25) = v9 & 1;
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    char v14 = v9;
    uint64_t v15 = *(void *)(v8 + 24);
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      *(void *)(a1 + 16) = v10;
      if (v14)
      {
LABEL_8:
        uint64_t v16 = *(void *)(*(void *)(*v4 + 56) + 8 * v10);
LABEL_12:
        *(void *)a1 = v16;
        return sub_22F1E0EF8;
      }
LABEL_11:
      uint64_t v16 = 0;
      goto LABEL_12;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_22F194570();
      goto LABEL_7;
    }
    sub_22F192808(v13, a3 & 1);
    unint64_t v17 = sub_22F18DDBC(a2);
    if ((v14 & 1) == (v18 & 1))
    {
      unint64_t v10 = v17;
      *(void *)(a1 + 16) = v17;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  uint64_t result = (unint64_t (*)(unint64_t))sub_22F2247B8();
  __break(1u);
  return result;
}

unint64_t sub_22F1E0EF8(unint64_t result)
{
  uint64_t v1 = *(void *)result;
  if (*(void *)result)
  {
    uint64_t v2 = **(void ***)(result + 8);
    if (*(unsigned char *)(result + 25)) {
      *(void *)(v2[7] + 8 * *(void *)(result + 16)) = v1;
    }
    else {
      return sub_22F1E8208(*(void *)(result + 16), *(unsigned char *)(result + 24), v1, v2);
    }
  }
  else if (*(unsigned char *)(result + 25))
  {
    return sub_22F19567C(*(void *)(result + 16), **(void **)(result + 8));
  }
  return result;
}

uint64_t (*sub_22F1E0F40(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  *uint64_t v1 = 0x8000000000000000;
  return sub_22F1E0F70;
}

uint64_t sub_22F1E0F70(uint64_t result)
{
  **(void **)(result + 8) = *(void *)result;
  return result;
}

uint64_t (*sub_22F1E0F7C(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  *uint64_t v1 = 0x8000000000000000;
  return sub_22F1E1EF8;
}

uint64_t sub_22F1E0FAC(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = sub_22F224348();
  uint64_t v5 = swift_unknownObjectRetain();
  uint64_t v6 = sub_22F1C4668(v5, v4);
  uint64_t v19 = v6;
  sub_22F2247E8();
  uint64_t v18 = *(void *)(a2 + 24);
  sub_22F2247F8();
  uint64_t v7 = sub_22F224818();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if ((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    unint64_t v17 = v2;
    uint64_t v10 = ~v8;
    swift_retain();
    swift_beginAccess();
    while (1)
    {
      uint64_t v12 = *(void *)(*(void *)(v6 + 48) + 8 * v9);
      swift_beginAccess();
      if (swift_weakLoadStrong())
      {
        if (swift_weakLoadStrong())
        {
          swift_retain();
          char v11 = sub_22F223818();
          swift_release();
          swift_release();
          swift_release();
          if (v11) {
            goto LABEL_10;
          }
          goto LABEL_4;
        }
        swift_retain();
        swift_release();
      }
      else
      {
        swift_retain();
      }
      uint64_t v13 = *(void *)(v12 + 24);
      swift_release();
      if (v13 == v18)
      {
LABEL_10:
        swift_release();
        uint64_t v14 = *(void *)(*(void *)(v6 + 48) + 8 * v9);
        sub_22F1C4318(v9);
        if (!swift_weakLoadStrong()) {
          goto LABEL_15;
        }
        swift_beginAccess();
        if (!swift_weakLoadStrong()) {
          goto LABEL_14;
        }
        char v15 = sub_22F223818();
        swift_release();
        swift_release();
        if ((v15 & 1) == 0)
        {
          do
          {
            __break(1u);
LABEL_14:
            swift_release();
LABEL_15:
            ;
          }
          while (v18 != *(void *)(v14 + 24));
        }
        *unint64_t v17 = v19;
        return v14;
      }
LABEL_4:
      unint64_t v9 = (v9 + 1) & v10;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_18;
      }
    }
  }
  __break(1u);
LABEL_18:
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_22F1E1238()
{
  uint64_t v1 = v0;
  swift_bridgeObjectRelease();
  uint64_t v2 = sub_22F224348();
  uint64_t v3 = swift_unknownObjectRetain();
  uint64_t v4 = sub_22F1C4864(v3, v2);
  uint64_t v15 = v4;
  swift_retain();
  uint64_t v5 = sub_22F2241B8();
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v7 = v5 & ~v6;
  if ((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7))
  {
    sub_22F1C6770();
    id v8 = *(id *)(*(void *)(v4 + 48) + 8 * v7);
    char v9 = sub_22F2241C8();

    if (v9)
    {
LABEL_6:
      swift_release();
      uint64_t v13 = *(void *)(*(void *)(v4 + 48) + 8 * v7);
      sub_22F1C44C4(v7);
      if (sub_22F2241C8())
      {
        *uint64_t v1 = v15;
        return v13;
      }
      __break(1u);
    }
    else
    {
      uint64_t v10 = ~v6;
      while (1)
      {
        unint64_t v7 = (v7 + 1) & v10;
        if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
          break;
        }
        id v11 = *(id *)(*(void *)(v4 + 48) + 8 * v7);
        char v12 = sub_22F2241C8();

        if (v12) {
          goto LABEL_6;
        }
      }
    }
    swift_release();
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_22F1E13C4(uint64_t a1)
{
  uint64_t v3 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    if (v3 < 0) {
      uint64_t v4 = *v1;
    }
    else {
      uint64_t v4 = v3 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    char v5 = sub_22F224388();
    swift_release();
    if (v5)
    {
      uint64_t v6 = sub_22F1E0FAC(v4, a1);
      swift_bridgeObjectRelease();
      return v6;
    }
LABEL_19:
    swift_bridgeObjectRelease();
    return 0;
  }
  sub_22F2247E8();
  uint64_t v17 = *(void *)(a1 + 24);
  sub_22F2247F8();
  uint64_t v7 = sub_22F224818();
  uint64_t v8 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v3 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
    return 0;
  }
  uint64_t v10 = ~v8;
  swift_bridgeObjectRetain();
  swift_beginAccess();
  while (1)
  {
    uint64_t v12 = *(void *)(*(void *)(v3 + 48) + 8 * v9);
    swift_beginAccess();
    if (!swift_weakLoadStrong()) {
      break;
    }
    if (!swift_weakLoadStrong())
    {
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_retain();
    char v11 = sub_22F223818();
    swift_release();
    swift_release();
    swift_release();
    if (v11) {
      goto LABEL_16;
    }
LABEL_10:
    unint64_t v9 = (v9 + 1) & v10;
    if (((*(void *)(v3 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
      goto LABEL_19;
    }
  }
  swift_retain();
LABEL_15:
  uint64_t v13 = *(void *)(v12 + 24);
  swift_release();
  if (v13 != v17) {
    goto LABEL_10;
  }
LABEL_16:
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v15 = *v1;
  uint64_t v18 = *v1;
  *uint64_t v1 = 0x8000000000000000;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_22F1C2828();
    uint64_t v15 = v18;
  }
  uint64_t v6 = *(void *)(*(void *)(v15 + 48) + 8 * v9);
  sub_22F1C4318(v9);
  *uint64_t v1 = v18;
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_22F1E1630(void *a1)
{
  uint64_t v3 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    id v4 = a1;
    char v5 = sub_22F224388();

    if (v5)
    {
      uint64_t v6 = sub_22F1E1238();
      swift_bridgeObjectRelease();
      return v6;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_22F2241B8();
  uint64_t v8 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v3 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
    goto LABEL_12;
  }
  sub_22F1C6770();
  id v10 = *(id *)(*(void *)(v3 + 48) + 8 * v9);
  char v11 = sub_22F2241C8();

  if ((v11 & 1) == 0)
  {
    uint64_t v12 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v12;
      if (((*(void *)(v3 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_12;
      }
      id v13 = *(id *)(*(void *)(v3 + 48) + 8 * v9);
      char v14 = sub_22F2241C8();
    }
    while ((v14 & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v16 = *v1;
  uint64_t v18 = *v1;
  *uint64_t v1 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_22F1C2834();
    uint64_t v16 = v18;
  }
  uint64_t v6 = *(void *)(*(void *)(v16 + 48) + 8 * v9);
  sub_22F1C44C4(v9);
  *uint64_t v1 = v18;
  swift_bridgeObjectRelease();
  return v6;
}

int64_t sub_22F1E17F8(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_22F1E18DC(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  unint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_22F1E1964(unsigned __int8 a1)
{
  return sub_22F1DD9E4(a1, v1);
}

uint64_t sub_22F1E196C()
{
  return sub_22F1DDC88(v0);
}

uint64_t sub_22F1E1974(uint64_t a1, int8x16_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return 0;
  }
  v3.i32[0] = vextq_s8(a2, a2, 8uLL).u32[0];
  v3.i32[1] = a2.i32[0];
  for (uint64_t i = a1 + 72; ; i += 128)
  {
    if (*(void *)(i + 64))
    {
      v5.i32[0] = *(void *)(i + 32);
      float32x4_t v6 = vsubq_f32(*(float32x4_t *)(i + 24), (float32x4_t)a2);
      v5.i32[1] = *(void *)(i + 24);
      float32x2_t v7 = vsub_f32(v5, v3);
      float32x2_t v8 = vmul_f32(v7, v7);
      if ((float)(v8.f32[0] + (float)(v8.f32[1] + COERCE_FLOAT(vmulq_f32(v6, v6).i32[1]))) <= 0.0064) {
        break;
      }
    }
    if (!--v2) {
      return 0;
    }
  }
  return *(void *)(i - 8);
}

uint64_t sub_22F1E1A24@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, uint64_t a7@<D0>, uint64_t a8@<D1>)
{
  if (*(void *)(v8 + 96))
  {
    id v13 = (void *)result;
    swift_retain();
    PatchTracker.hitTest(frame:screenPoint:context:)(v13, a5, (uint64_t)v52, a7, a8);
    swift_release();
    sub_22F1899D0((uint64_t)v52, (uint64_t)v55, &qword_268695288);
    uint64_t result = sub_22F1B2544((uint64_t)v55);
    if (result == 1)
    {
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      long long v19 = 0uLL;
      int v20 = 0;
      long long v21 = 0uLL;
      long long v22 = 0uLL;
      long long v23 = 0uLL;
      long long v24 = 0uLL;
    }
    else
    {
      int8x16_t v50 = (int8x16_t)v55[0];
      float v25 = v57;
      if (v56)
      {
        id v26 = objc_msgSend(v13, sel_camera);
        objc_msgSend(v26, sel_transform);
        int8x16_t v46 = v27;

        int8x16_t v28 = v46;
        v28.i32[3] = 0;
      }
      else
      {
        int8x16_t v28 = (int8x16_t)v55[1];
      }
      int8x16_t v47 = v28;
      __swift_instantiateConcreteTypeFromMangledName(&qword_268695528);
      uint64_t v29 = swift_allocObject();
      *(_OWORD *)(v29 + 16) = xmmword_22F227B00;
      sub_22F1899D0(a2, v29 + 32, &qword_268695508);
      sub_22F1899D0(a4, v29 + 160, &qword_268695508);
      sub_22F1899D0(a3, v29 + 288, &qword_268695508);
      sub_22F1899D0(a5, (uint64_t)v53, &qword_268695438);
      if (sub_22F1C630C((uint64_t)v53) == 1)
      {
        *(_DWORD *)(v29 + 528) = 0;
        *(_OWORD *)(v29 + 496) = 0u;
        *(_OWORD *)(v29 + 512) = 0u;
        *(_OWORD *)(v29 + 464) = 0u;
        *(_OWORD *)(v29 + 480) = 0u;
        *(_OWORD *)(v29 + 432) = 0u;
        *(_OWORD *)(v29 + 448) = 0u;
        *(_OWORD *)(v29 + 416) = 0u;
      }
      else
      {
        v54[5] = v53[6];
        v54[6] = v53[7];
        v54[7] = v53[8];
        v54[1] = v53[2];
        v54[2] = v53[3];
        v54[3] = v53[4];
        v54[4] = v53[5];
        v53[9] = v53[0];
        v54[0] = v53[1];
        sub_22F1899D0((uint64_t)v54, (uint64_t)v58, &qword_268695508);
        sub_22F1899D0((uint64_t)v58, v29 + 416, &qword_268695508);
        sub_22F1CEA64((uint64_t)v58);
      }
      uint64_t v30 = sub_22F1E1974(v29, v50);
      v31.i32[0] = 0;
      v33.i32[0] = v32 & 1;
      int8x16_t v34 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v33, v31), 0);
      v33.i64[0] = v30;
      v33.i64[1] = v35;
      float32x4_t v48 = (float32x4_t)vbslq_s8(v34, v33, v47);
      swift_setDeallocating();
      sub_22F1CEA64(a2);
      sub_22F1CEA64(a4);
      sub_22F1CEA64(a3);
      __swift_instantiateConcreteTypeFromMangledName(&qword_268695508);
      swift_arrayDestroy();
      swift_deallocClassInstance();
      _sSo13simd_float4x4a17MeasureFoundationE4make8position17normalizedForwardABs5SIMD3VySfG_AItFZ_0(*(double *)v50.i64, v48);
      sceneKitToARKit(_:)(v37, v36);
      long long v49 = v39;
      long long v51 = v38;
      long long v44 = v41;
      long long v45 = v40;
      id v42 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F20E38]), sel_initWithTransform_, *(double *)&v38, *(double *)&v39, *(double *)&v40, *(double *)&v41);
      type metadata accessor for WorldPlane();
      swift_allocObject();
      uint64_t v18 = sub_22F210A98(v42, 5, 1.0 - v25, 1.0);

      long long v59 = xmmword_22F228C60;
      long long v60 = v51;
      long long v61 = v49;
      long long v62 = v45;
      long long v63 = v44;
      uint64_t v64 = 0;
      uint64_t v65 = 0;
      uint64_t v17 = 1;
      char v66 = 1;
      uint64_t v67 = v18;
      int v68 = 0;
      swift_retain();
      sub_22F2105E8();
      int v20 = v43;
      swift_release();
      uint64_t result = (uint64_t)sub_22F1E1E8C(v52);
      long long v19 = xmmword_22F228C60;
      long long v24 = v44;
      long long v23 = v45;
      long long v22 = v49;
      long long v21 = v51;
    }
    *(_OWORD *)a6 = v19;
    *(_OWORD *)(a6 + 16) = v21;
    *(_OWORD *)(a6 + 32) = v22;
    *(_OWORD *)(a6 + 48) = v23;
    *(_OWORD *)(a6 + 64) = v24;
    *(void *)(a6 + 80) = 0;
    *(void *)(a6 + 88) = 0;
    *(void *)(a6 + 96) = v17;
    *(void *)(a6 + 104) = v18;
    *(_DWORD *)(a6 + 112) = v20;
  }
  else
  {
    __break(1u);
  }
  return result;
}

double sub_22F1E1DEC(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 1;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  return result;
}

unint64_t sub_22F1E1E10()
{
  unint64_t result = qword_268695820;
  if (!qword_268695820)
  {
    sub_22F1C6770();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268695820);
  }
  return result;
}

uint64_t type metadata accessor for MeasureCore()
{
  return self;
}

uint64_t *sub_22F1E1E8C(uint64_t *a1)
{
  return a1;
}

int64_t MTLTexture.sampleColor(screenPoint:)(double a1, double a2)
{
  float32x2_t v5 = (__IOSurface *)objc_msgSend(v2, sel_iosurface);
  uint64_t v6 = 0;
  if (!v5) {
    return v6;
  }
  float32x2_t v7 = v5;
  int64_t Width = IOSurfaceGetWidth(v5);
  int64_t result = IOSurfaceGetHeight(v7);
  double v10 = round(a2);
  if ((~*(void *)&v10 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v10 <= -9.22337204e18)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v10 >= 9.22337204e18)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v11 = (uint64_t)v10 * Width;
  if ((unsigned __int128)((uint64_t)v10 * (__int128)Width) >> 64 != v11 >> 63)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  double v12 = round(a1);
  if ((~*(void *)&v12 & 0x7FF0000000000000) == 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v12 <= -9.22337204e18)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v12 >= 9.22337204e18)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v13 = v11 + (uint64_t)v12;
  if (__OFADD__(v11, (uint64_t)v12))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if ((unsigned __int128)(Width * (__int128)result) >> 64 == (Width * result) >> 63)
  {
    if (v13 < Width * result)
    {
      id v14 = objc_msgSend(v2, sel_pixelFormat);
      if (v14 == (id)55)
      {
        LODWORD(v15) = *((_DWORD *)IOSurfaceGetBaseAddress(v7) + v13);
        goto LABEL_19;
      }
      if (v14 == (id)80)
      {
        unsigned int v16 = *((_DWORD *)IOSurfaceGetBaseAddress(v7) + v13);

        *(uint32x2_t *)v17.i8 = vshl_u32((uint32x2_t)vdup_n_s32(v16), (uint32x2_t)0xFFFFFFF8FFFFFFF0);
        v17.i32[2] = v16;
        uint32x4_t v18 = (uint32x4_t)vdupq_laneq_s32(v17, 2);
        v19.i64[0] = 0xFF000000FFLL;
        v19.i64[1] = 0xFF000000FFLL;
        uint32x4_t v20 = (uint32x4_t)vandq_s8((int8x16_t)v17, v19);
        v20.i32[3] = vshrq_n_u32(v18, 0x18uLL).i32[3];
        return vdivq_f32(vcvtq_f32_u32(v20), (float32x4_t)vdupq_n_s32(0x437F0000u)).u64[0];
      }
      if (v14 == (id)125)
      {
        long long v15 = *((_OWORD *)IOSurfaceGetBaseAddress(v7) + v13);
LABEL_19:
        uint64_t v21 = v15;

        return v21;
      }
    }

    return 0;
  }
LABEL_30:
  __break(1u);
  return result;
}

Swift::OpaquePointer_optional __swiftcall MTLTexture.sampleColors(screenPoints:)(Swift::OpaquePointer screenPoints)
{
  uint64_t v2 = v1;
  unint64_t v4 = (__IOSurface *)objc_msgSend(v1, sel_iosurface);
  if (!v4)
  {
    uint64_t v11 = 0;
LABEL_29:
    BaseAddress = v11;
    goto LABEL_39;
  }
  uint64_t v6 = v4;
  int64_t Width = IOSurfaceGetWidth(v4);
  int64_t Height = IOSurfaceGetHeight(v6);
  int64_t v9 = *((void *)screenPoints._rawValue + 2);
  BaseAddress = (float32x4_t *)sub_22F19BD90(0, v9, 0, MEMORY[0x263F8EE78]);
  uint64_t v11 = BaseAddress;
  if (!v9)
  {

    goto LABEL_29;
  }
  int64_t v12 = Width * Height;
  if ((unsigned __int128)(Width * (__int128)Height) >> 64 == (Width * Height) >> 63)
  {
    BaseAddress = (float32x4_t *)swift_bridgeObjectRetain();
    uint64_t v13 = (double *)((char *)screenPoints._rawValue + 40);
    float32x4_t v31 = (float32x4_t)vdupq_n_s32(0x437F0000u);
    while (1)
    {
      double v22 = round(*v13);
      if ((~*(void *)&v22 & 0x7FF0000000000000) == 0) {
        break;
      }
      if (v22 <= -9.22337204e18) {
        goto LABEL_31;
      }
      if (v22 >= 9.22337204e18) {
        goto LABEL_32;
      }
      uint64_t v23 = (uint64_t)v22 * Width;
      if ((unsigned __int128)((uint64_t)v22 * (__int128)Width) >> 64 != v23 >> 63) {
        goto LABEL_33;
      }
      double v24 = round(*(v13 - 1));
      if ((~*(void *)&v24 & 0x7FF0000000000000) == 0) {
        goto LABEL_34;
      }
      if (v24 <= -9.22337204e18) {
        goto LABEL_35;
      }
      if (v24 >= 9.22337204e18) {
        goto LABEL_36;
      }
      uint64_t v25 = v23 + (uint64_t)v24;
      if (__OFADD__(v23, (uint64_t)v24)) {
        goto LABEL_37;
      }
      if (v25 >= v12)
      {
LABEL_27:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        uint64_t v11 = 0;
        goto LABEL_29;
      }
      id v26 = objc_msgSend(v2, sel_pixelFormat);
      if (v26 == (id)55)
      {
        BaseAddress = (float32x4_t *)IOSurfaceGetBaseAddress(v6);
        unsigned __int32 v27 = BaseAddress->u32[v25];
        unint64_t v20 = v11[1].u64[0];
        unint64_t v28 = v11[1].u64[1];
        unint64_t v21 = v20 + 1;
        if (v20 >= v28 >> 1)
        {
          unsigned __int32 v30 = v27;
          BaseAddress = (float32x4_t *)sub_22F19BD90((char *)(v28 > 1), v20 + 1, 1, (char *)v11);
          unsigned __int32 v27 = v30;
          uint64_t v11 = BaseAddress;
        }
        float32x4_t v18 = (float32x4_t)v27;
      }
      else
      {
        if (v26 == (id)80)
        {
          BaseAddress = (float32x4_t *)IOSurfaceGetBaseAddress(v6);
          *(uint32x2_t *)v14.i8 = vshl_u32((uint32x2_t)vdup_n_s32(BaseAddress->u32[v25]), (uint32x2_t)0xFFFFFFF8FFFFFFF0);
          v14.i32[2] = BaseAddress->i32[v25];
          uint32x4_t v15 = (uint32x4_t)vdupq_laneq_s32(v14, 2);
          v16.i64[0] = 0xFF000000FFLL;
          v16.i64[1] = 0xFF000000FFLL;
          uint32x4_t v17 = (uint32x4_t)vandq_s8((int8x16_t)v14, v16);
          v17.i32[3] = vshrq_n_u32(v15, 0x18uLL).i32[3];
          float32x4_t v18 = vdivq_f32(vcvtq_f32_u32(v17), v31);
        }
        else
        {
          if (v26 != (id)125) {
            goto LABEL_27;
          }
          BaseAddress = (float32x4_t *)IOSurfaceGetBaseAddress(v6);
          float32x4_t v18 = BaseAddress[v25];
        }
        unint64_t v20 = v11[1].u64[0];
        unint64_t v19 = v11[1].u64[1];
        unint64_t v21 = v20 + 1;
        if (v20 >= v19 >> 1)
        {
          float32x4_t v29 = v18;
          BaseAddress = (float32x4_t *)sub_22F19BD90((char *)(v19 > 1), v20 + 1, 1, (char *)v11);
          float32x4_t v18 = v29;
          uint64_t v11 = BaseAddress;
        }
      }
      v11[1].i64[0] = v21;
      v11[v20 + 2] = v18;
      v13 += 2;
      if (!--v9)
      {

        swift_bridgeObjectRelease();
        goto LABEL_29;
      }
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
  }
  __break(1u);
LABEL_39:
  result.value._rawValue = BaseAddress;
  result.is_nil = v5;
  return result;
}

uint64_t MTLTexture.makeSamplePoints(numberOfPoints:)(uint64_t a1)
{
  uint64_t v3 = (uint64_t)objc_msgSend(v1, sel_width);
  uint64_t result = (uint64_t)objc_msgSend(v1, sel_height);
  if ((unsigned __int128)(v3 * (__int128)result) >> 64 != (v3 * result) >> 63)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  double v5 = sqrt((double)(v3 * result) / (double)a1);
  uint64_t result = (uint64_t)objc_msgSend(v1, sel_width);
  double v6 = round((double)result / v5);
  if ((~*(void *)&v6 & 0x7FF0000000000000) == 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v6 <= -9.22337204e18)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v6 >= 9.22337204e18)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t result = (uint64_t)objc_msgSend(v1, sel_height);
  double v7 = round((double)result / v5);
  if ((~*(void *)&v7 & 0x7FF0000000000000) == 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v7 <= -9.22337204e18)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v7 >= 9.22337204e18)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v8 = (uint64_t)v7;
  if ((uint64_t)v7 < 0)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (v8)
  {
    uint64_t v9 = (uint64_t)v6;
    if ((uint64_t)v6 < 0)
    {
LABEL_33:
      __break(1u);
      return result;
    }
    uint64_t v10 = 0;
    uint64_t v11 = MEMORY[0x263F8EE78];
    while (v10 != v8)
    {
      if (v9)
      {
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_22F19B428(0, *(void *)(v11 + 16) + 1, 1, (char *)v11);
          uint64_t v11 = result;
        }
        uint64_t v12 = 0;
        uint64_t v13 = *(void *)(v11 + 16);
        uint64_t v14 = 16 * v13;
        do
        {
          unint64_t v15 = *(void *)(v11 + 24);
          if (v13 + v12 >= v15 >> 1)
          {
            uint64_t result = (uint64_t)sub_22F19B428((char *)(v15 > 1), v13 + v12 + 1, 1, (char *)v11);
            uint64_t v11 = result;
          }
          *(void *)(v11 + 16) = v13 + v12 + 1;
          uint64_t v16 = v11 + v14;
          *(double *)(v16 + 32) = v5 * (double)(v10 & 1) * 0.5 + v5 * ((double)v12 + 0.5);
          *(double *)(v16 + 40) = v5 * ((double)v10 + 0.5);
          v14 += 16;
          ++v12;
        }
        while (v9 != v12);
      }
      if (++v10 == v8) {
        return v11;
      }
    }
    __break(1u);
    goto LABEL_25;
  }
  return MEMORY[0x263F8EE78];
}

uint64_t Publisher.do(on:)()
{
  return sub_22F2238B8();
}

uint64_t Publisher.do(if:on:)(uint64_t (*a1)(void))
{
  return sub_22F2238B8();
}

void SearchArea.point.setter(double a1)
{
  *unint64_t v1 = a1;
}

uint64_t (*SearchArea.point.modify())()
{
  return nullsub_1;
}

float SearchArea.radius.getter(double a1, float a2)
{
  return a2;
}

void SearchArea.radius.setter(float a1)
{
  *(float *)(v1 + 8) = a1;
}

uint64_t (*SearchArea.radius.modify())()
{
  return nullsub_1;
}

double SearchArea.init(radius:)()
{
  return 0.0;
}

uint64_t sub_22F1E27C0(uint64_t a1, uint64_t a2)
{
  return _s17MeasureFoundation10SearchAreaV23__derived_struct_equalsySbAC_ACtFZ_0(*(double *)a1, *(float *)(a1 + 8), *(double *)a2, *(float *)(a2 + 8));
}

uint64_t _s17MeasureFoundation10SearchAreaV23__derived_struct_equalsySbAC_ACtFZ_0(double a1, float a2, double a3, float a4)
{
  if ((vceq_f32(*(float32x2_t *)&a1, *(float32x2_t *)&a3).u8[0] & 1) == 0) {
    return 0;
  }
  *(float *)&a1 = a2;
  *(float *)&a3 = a4;
  int32x2_t v4 = vceq_f32(*(float32x2_t *)&a1, *(float32x2_t *)&a3);
  return v4.i32[1] & v4.i32[0] & 1;
}

uint64_t __swift_memcpy12_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for SearchArea(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 12)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SearchArea(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)(result + 8) = 0;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 12) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SearchArea()
{
  return &type metadata for SearchArea;
}

uint64_t DepthNode.init(scene:)(uint64_t a1)
{
  uint64_t v1 = sub_22F1E2A30(a1);
  swift_release();
  return v1;
}

uint64_t DepthNode.deinit()
{
  swift_bridgeObjectRelease();
  swift_unownedRelease();
  swift_unownedRelease();
  swift_unownedRelease();
  return v0;
}

void DepthNode.__allocating_init()()
{
}

uint64_t DepthNode.scene.getter()
{
  return swift_unownedRetainStrong();
}

uint64_t DepthNode.depthProcessor.getter()
{
  return swift_unownedRetainStrong();
}

uint64_t DepthNode.adProcessor.getter()
{
  return swift_unownedRetainStrong();
}

uint64_t DepthNode.__allocating_init(scene:)(uint64_t a1)
{
  swift_allocObject();
  uint64_t v2 = sub_22F1E2A30(a1);
  swift_release();
  return v2;
}

void DepthNode.init()()
{
}

uint64_t sub_22F1E29A8()
{
  swift_unownedRelease();
  swift_unownedRelease();
  return swift_unownedRelease();
}

uint64_t DepthNode.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_unownedRelease();
  swift_unownedRelease();
  swift_unownedRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_22F1E2A30(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  uint64_t v2 = *(void *)(a1 + 160);
  swift_unownedRetainStrong();
  *(void *)(v1 + 48) = v2;
  swift_retain();
  swift_unownedRetain();
  swift_unownedRetain();
  swift_release();
  uint64_t v3 = *(void *)(v1 + 48);
  swift_unownedRetainStrong();
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 208);
  swift_retain();
  uint64_t result = swift_release();
  if (v4)
  {
    *(void *)(v1 + 56) = v4;
    swift_unownedRetain();
    swift_release();
    uint64_t result = swift_release();
    uint64_t v6 = MEMORY[0x263F8EE78];
    *(_WORD *)(v1 + 32) = 257;
    *(unsigned char *)(v1 + 34) = 1;
    uint64_t v7 = qword_268694990;
    *(void *)(v1 + 16) = qword_268694990;
    *(void *)(v1 + 24) = v6;
    if (v7 != -1)
    {
      qword_268694990 = v7 + 1;
      return v1;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for DepthNode()
{
  return self;
}

unint64_t sub_22F1E2B40(unsigned __int8 a1, float a2)
{
  uint64_t v4 = v2;
  if (!*(void *)(*v2 + 16) || (sub_22F18DDBC(a1), (v7 & 1) == 0))
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    sub_22F1E7538(a1, isUniquelyReferenced_nonNull_native, 0.0);
    *uint64_t v2 = v23;
    swift_bridgeObjectRelease();
  }
  char v9 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = *v2;
  uint64_t v24 = *v4;
  *uint64_t v4 = 0x8000000000000000;
  unint64_t v12 = sub_22F18DDBC(a1);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_21;
  }
  char v3 = v11;
  if (*(void *)(v10 + 24) < v15)
  {
    sub_22F192210(v15, v9);
    unint64_t v16 = sub_22F18DDBC(a1);
    if ((v3 & 1) != (v17 & 1))
    {
LABEL_25:
      unint64_t result = sub_22F2247B8();
      __break(1u);
      return result;
    }
    unint64_t v12 = v16;
    if (v3) {
      goto LABEL_11;
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if ((v9 & 1) == 0) {
    goto LABEL_23;
  }
  if ((v11 & 1) == 0) {
    goto LABEL_24;
  }
LABEL_11:
  while (1)
  {
    *(float *)(*(void *)(v24 + 56) + 4 * v12) = *(float *)(*(void *)(v24 + 56) + 4 * v12) + a2;
    *uint64_t v4 = v24;
    if (*(void *)(v24 + 16)) {
      break;
    }
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    sub_22F1941F0();
    if ((v3 & 1) == 0) {
      goto LABEL_24;
    }
  }
  unint64_t result = sub_22F18DDBC(a1);
  if ((v19 & 1) == 0) {
    goto LABEL_22;
  }
  float v20 = *(float *)(*(void *)(v24 + 56) + 4 * result);
  uint64_t v21 = v4[1];
  if (v21 == 33 || v20 > *((float *)&v21 + 1))
  {
    *((unsigned char *)v4 + 8) = a1;
    *((float *)v4 + 3) = v20;
  }
  uint64_t v22 = v4[2];
  if (v22 == 33 || v20 < *((float *)&v22 + 1))
  {
    *((unsigned char *)v4 + 16) = a1;
    *((float *)v4 + 5) = v20;
  }
  *((float *)v4 + 6) = *((float *)v4 + 6) + a2;
  return result;
}

void sub_22F1E2D2C(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v7 = 0;
  for (uint64_t i = 0; ; i |= v16)
  {
    if (v5)
    {
      unint64_t v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v10 = v9 | (v7 << 6);
      goto LABEL_5;
    }
    int64_t v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v17 >= v6) {
      goto LABEL_24;
    }
    unint64_t v18 = *(void *)(v2 + 8 * v17);
    ++v7;
    if (!v18)
    {
      int64_t v7 = v17 + 1;
      if (v17 + 1 >= v6) {
        goto LABEL_24;
      }
      unint64_t v18 = *(void *)(v2 + 8 * v7);
      if (!v18)
      {
        int64_t v7 = v17 + 2;
        if (v17 + 2 >= v6) {
          goto LABEL_24;
        }
        unint64_t v18 = *(void *)(v2 + 8 * v7);
        if (!v18) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v5 = (v18 - 1) & v18;
    unint64_t v10 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_5:
    uint64_t v11 = *(void *)(*(void *)(a1 + 56) + 8 * v10);
    unint64_t v12 = self;
    swift_bridgeObjectRetain();
    id v13 = objc_msgSend(v12, sel_standardUserDefaults);
    BOOL v14 = (void *)sub_22F223A98();
    swift_bridgeObjectRelease();
    unsigned __int8 v15 = objc_msgSend(v13, sel_BOOLForKey_, v14);

    if ((v15 & ((v11 & ~i) != 0)) != 0) {
      uint64_t v16 = v11;
    }
    else {
      uint64_t v16 = 0;
    }
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v6)
  {
LABEL_24:
    swift_release();
    return;
  }
  unint64_t v18 = *(void *)(v2 + 8 * v19);
  if (v18)
  {
    int64_t v7 = v19;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v7 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v7 >= v6) {
      goto LABEL_24;
    }
    unint64_t v18 = *(void *)(v2 + 8 * v7);
    ++v19;
    if (v18) {
      goto LABEL_23;
    }
  }
LABEL_26:
  __break(1u);
}

uint64_t *SegmentationProcessor.DebuggerClass.unsafeMutableAddressor()
{
  return &static SegmentationProcessor.DebuggerClass;
}

uint64_t static SegmentationProcessor.DebuggerClass.getter()
{
  return static SegmentationProcessor.DebuggerClass;
}

uint64_t static SegmentationProcessor.DebuggerClass.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_beginAccess();
  static SegmentationProcessor.DebuggerClass = a1;
  qword_26869BD68 = a2;
  return result;
}

uint64_t (*static SegmentationProcessor.DebuggerClass.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t SegmentationProcessor.delegate.getter()
{
  swift_beginAccess();
  return MEMORY[0x230FB41A0](v0 + 240);
}

uint64_t SegmentationProcessor.delegate.setter()
{
  return swift_unknownObjectRelease();
}

void (*SegmentationProcessor.delegate.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_beginAccess();
  v3[3] = MEMORY[0x230FB41A0](v1 + 240);
  return sub_22F1E310C;
}

void sub_22F1E310C(void **a1, char a2)
{
  uint64_t v3 = *a1;
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

uint64_t SegmentationProcessor.labelingSampleCount.getter()
{
  return 200;
}

uint64_t SegmentationProcessor.debugOptions.getter()
{
  if (*(unsigned char *)(v0 + 264) != 1) {
    return *(void *)(v0 + 256);
  }
  if (qword_2686944B8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = static SegmentationProcessor.DebugOptions.default;
  *(void *)(v0 + 256) = static SegmentationProcessor.DebugOptions.default;
  *(unsigned char *)(v0 + 264) = 0;
  return result;
}

uint64_t *SegmentationProcessor.DebugOptions.default.unsafeMutableAddressor()
{
  if (qword_2686944B8 != -1) {
    swift_once();
  }
  return &static SegmentationProcessor.DebugOptions.default;
}

uint64_t SegmentationProcessor.debugOptions.setter(uint64_t result)
{
  *(void *)(v1 + 256) = result;
  *(unsigned char *)(v1 + 264) = 0;
  return result;
}

void *(*SegmentationProcessor.debugOptions.modify(uint64_t *a1))(void *result)
{
  a1[1] = v1;
  *a1 = SegmentationProcessor.debugOptions.getter();
  return sub_22F1E32D4;
}

void *sub_22F1E32D4(void *result)
{
  uint64_t v1 = result[1];
  *(void *)(v1 + 256) = *result;
  *(unsigned char *)(v1 + 264) = 0;
  return result;
}

void sub_22F1E32E4(void *a1@<X8>)
{
  uint64_t v2 = v1;
  if ((*(unsigned char *)(v1 + 568) & 1) == 0)
  {
    uint64_t v13 = *(void *)(v1 + 560);
    uint64_t v14 = *(void *)(v1 + 552);
    uint64_t v11 = *(void *)(v1 + 544);
    uint64_t v12 = *(void *)(v1 + 536);
    uint64_t v9 = *(void *)(v1 + 528);
    uint64_t v10 = *(void *)(v1 + 520);
    goto LABEL_5;
  }
  ImageProcessor.viewportSize.getter();
  uint64_t v4 = *(void *)(v1 + 80);
  uint64_t ObjectType = swift_getObjectType();
  int64_t v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(ObjectType, v4);
  id v7 = objc_msgSend(v6, sel_currentFrame);

  if (v7)
  {
    id v8 = objc_msgSend(v7, sel_camera);

    objc_msgSend(v8, sel_imageResolution);
    ARViewToCameraImageTransform();
    uint64_t v10 = v15;
    uint64_t v9 = v16;
    uint64_t v12 = v17;
    uint64_t v11 = v18;
    uint64_t v14 = v19;
    uint64_t v13 = v20;
    *(void *)(v2 + 520) = v15;
    *(void *)(v2 + 528) = v16;
    *(void *)(v2 + 536) = v17;
    *(void *)(v2 + 544) = v18;
    *(void *)(v2 + 552) = v19;
    *(void *)(v2 + 560) = v20;
    *(unsigned char *)(v2 + 568) = 0;
LABEL_5:
    *a1 = v10;
    a1[1] = v9;
    a1[2] = v12;
    a1[3] = v11;
    a1[4] = v14;
    a1[5] = v13;
    return;
  }
  sub_22F224538();
  __break(1u);
}

void sub_22F1E348C(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  if ((*(unsigned char *)(v1 + 624) & 1) == 0)
  {
    unint64_t v13 = *(void *)(v1 + 616);
    unint64_t v14 = *(void *)(v1 + 608);
    unint64_t v11 = *(void *)(v1 + 600);
    unint64_t v12 = *(void *)(v1 + 592);
    unint64_t v9 = *(void *)(v1 + 584);
    unint64_t v10 = *(void *)(v1 + 576);
    goto LABEL_5;
  }
  uint64_t v4 = *(void *)(v1 + 80);
  uint64_t ObjectType = swift_getObjectType();
  int64_t v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(ObjectType, v4);
  id v7 = objc_msgSend(v6, sel_currentFrame);

  if (v7)
  {
    id v8 = objc_msgSend(v7, sel_camera);

    sub_22F1E3604(v8, &v15);
    unint64_t v9 = *((void *)&v15 + 1);
    unint64_t v10 = v15;
    unint64_t v12 = v16;
    unint64_t v11 = v17;
    unint64_t v14 = v18;
    unint64_t v13 = v19;

    *(_OWORD *)(v2 + 576) = __PAIR128__(v9, v10);
    *(void *)(v2 + 592) = v12;
    *(void *)(v2 + 600) = v11;
    *(void *)(v2 + 608) = v14;
    *(void *)(v2 + 616) = v13;
    *(unsigned char *)(v2 + 624) = 0;
LABEL_5:
    *a1 = v10;
    a1[1] = v9;
    a1[2] = v12;
    a1[3] = v11;
    a1[4] = v14;
    a1[5] = v13;
    return;
  }
  sub_22F224538();
  __break(1u);
}

CGFloat sub_22F1E3604@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  objc_msgSend(a1, sel_imageResolution);
  double v6 = v4 / v5;
  double v7 = vabdd_f64(1.33333333, v6) * 0.5;
  if (v6 <= 1.33333333) {
    double v8 = v7;
  }
  else {
    double v8 = 0.0;
  }
  if (v6 <= 1.33333333) {
    double v9 = 0.0;
  }
  else {
    double v9 = v7;
  }
  double v10 = ImageProcessor.viewportSize.getter();
  CGAffineTransformMakeScale(&t1, 1.0 / v10, 1.0 / *(double *)(v2 + 96));
  long long v29 = *(_OWORD *)&t1.c;
  long long v32 = *(_OWORD *)&t1.a;
  CGFloat tx = t1.tx;
  CGFloat ty = t1.ty;
  ARViewToCameraImageTransform();
  long long v13 = *(_OWORD *)&t1.a;
  long long v14 = *(_OWORD *)&t1.c;
  long long v15 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.SCNMatrix4 a = v32;
  *(_OWORD *)&t1.CGFloat c = v29;
  t1.CGFloat tx = tx;
  t1.CGFloat ty = ty;
  *(_OWORD *)&t2.SCNMatrix4 a = v13;
  *(_OWORD *)&t2.CGFloat c = v14;
  *(_OWORD *)&t2.CGFloat tx = v15;
  CGAffineTransformConcat(&v35, &t1, &t2);
  long long v30 = *(_OWORD *)&v35.c;
  long long v33 = *(_OWORD *)&v35.a;
  CGFloat v16 = v35.tx;
  CGFloat v17 = v35.ty;
  CGAffineTransformMakeTranslation(&t1, -v9, -v8);
  long long v18 = *(_OWORD *)&t1.a;
  long long v19 = *(_OWORD *)&t1.c;
  long long v20 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.SCNMatrix4 a = v33;
  *(_OWORD *)&t1.CGFloat c = v30;
  t1.CGFloat tx = v16;
  t1.CGFloat ty = v17;
  *(_OWORD *)&t2.SCNMatrix4 a = v18;
  *(_OWORD *)&t2.CGFloat c = v19;
  *(_OWORD *)&t2.CGFloat tx = v20;
  CGAffineTransformConcat(&v35, &t1, &t2);
  long long v31 = *(_OWORD *)&v35.c;
  long long v34 = *(_OWORD *)&v35.a;
  CGFloat v21 = v35.tx;
  CGFloat v22 = v35.ty;
  CGAffineTransformMakeScale(&t1, 256.0, 192.0);
  long long v23 = *(_OWORD *)&t1.a;
  long long v24 = *(_OWORD *)&t1.c;
  long long v25 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.SCNMatrix4 a = v34;
  *(_OWORD *)&t1.CGFloat c = v31;
  t1.CGFloat tx = v21;
  t1.CGFloat ty = v22;
  *(_OWORD *)&t2.SCNMatrix4 a = v23;
  *(_OWORD *)&t2.CGFloat c = v24;
  *(_OWORD *)&t2.CGFloat tx = v25;
  CGAffineTransformConcat(&v35, &t1, &t2);
  CGFloat result = v35.a;
  long long v27 = *(_OWORD *)&v35.c;
  long long v28 = *(_OWORD *)&v35.tx;
  *a2 = *(_OWORD *)&v35.a;
  a2[1] = v27;
  a2[2] = v28;
  return result;
}

uint64_t sub_22F1E37C0()
{
  if (*(void *)(v0 + 632))
  {
    uint64_t v1 = *(void *)(v0 + 632);
  }
  else
  {
    ImageProcessor.makeSamplePoints(numberOfPoints:)(200);
    uint64_t v1 = v2;
    *(void *)(v0 + 632) = v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

unint64_t sub_22F1E3820(void *a1, uint64_t a2, uint64_t a3)
{
  swift_unknownObjectWeakInit();
  *(_OWORD *)(v3 + 248) = xmmword_22F229A90;
  *(unsigned char *)(v3 + 264) = 1;
  id v7 = objc_allocWithZone(MEMORY[0x263F08AE0]);
  swift_retain();
  *(void *)(v3 + 272) = objc_msgSend(v7, sel_init);
  *(_OWORD *)(v3 + 280) = 0u;
  *(_OWORD *)(v3 + 296) = 0u;
  *(_OWORD *)(v3 + 312) = 0u;
  *(_OWORD *)(v3 + 328) = 0u;
  *(void *)(v3 + 344) = 0;
  *(unsigned char *)(v3 + 352) = 1;
  *(_OWORD *)(v3 + 368) = 0u;
  *(_OWORD *)(v3 + 384) = 0u;
  *(_OWORD *)(v3 + 400) = 0u;
  *(_OWORD *)(v3 + 416) = 0u;
  *(unsigned char *)(v3 + 432) = 1;
  *(_OWORD *)(v3 + 448) = 0u;
  *(_OWORD *)(v3 + 464) = 0u;
  *(_OWORD *)(v3 + 480) = 0u;
  *(_OWORD *)(v3 + 496) = 0u;
  *(unsigned char *)(v3 + 512) = 1;
  *(_OWORD *)(v3 + 536) = 0u;
  *(_OWORD *)(v3 + 552) = 0u;
  *(_OWORD *)(v3 + 520) = 0u;
  *(unsigned char *)(v3 + 568) = 1;
  *(_OWORD *)(v3 + 576) = 0u;
  *(_OWORD *)(v3 + 592) = 0u;
  *(_OWORD *)(v3 + 608) = 0u;
  *(unsigned char *)(v3 + 624) = 1;
  *(_OWORD *)(v3 + 632) = 0u;
  *(unsigned char *)(v3 + 648) = 1;
  *(_OWORD *)(v3 + 656) = 0u;
  *(_OWORD *)(v3 + 672) = 0u;
  *(void *)(v3 + 688) = 0;
  *(void *)(v3 + 720) = 0;
  *(_OWORD *)(v3 + 704) = 0u;
  *(unsigned char *)(v3 + 728) = 1;
  *(void *)(v3 + 732) = 0x3F80000000000000;
  *(void *)(v3 + 696) = a3;
  swift_retain();
  swift_release();
  uint64_t v8 = qword_2686944C0;
  id v9 = a1;
  if (v8 != -1) {
    swift_once();
  }
  unint64_t v10 = ImageProcessor.init(sceneView:outputSize:)(v9, a2, *(double *)&static SegmentationResult.outputSize, *((double *)&static SegmentationResult.outputSize + 1));
  swift_beginAccess();
  uint64_t v11 = static SegmentationProcessor.DebuggerClass;
  if (static SegmentationProcessor.DebuggerClass)
  {
    v22[1] = a3;
    uint64_t v12 = qword_26869BD68;
    long long v13 = *(void (**)(id, uint64_t))(qword_26869BD68 + 16);
    uint64_t v14 = sub_22F2241F8();
    v22[0] = v22;
    uint64_t v15 = *(void *)(v14 - 8);
    MEMORY[0x270FA5388](v14);
    CGFloat v17 = (char *)v22 - v16;
    swift_retain_n();
    id v18 = v9;
    v13(v18, a2);
    uint64_t v19 = *(void *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v11) != 1)
    {
      *((void *)&v24 + 1) = v11;
      uint64_t v25 = v12;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v23);
      (*(void (**)(uint64_t *, char *, uint64_t))(v19 + 32))(boxed_opaque_existential_1, v17, v11);
      swift_release();

      swift_release();
      goto LABEL_9;
    }
    swift_release();

    swift_release();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
  else
  {

    swift_release();
  }
  uint64_t v25 = 0;
  long long v23 = 0u;
  long long v24 = 0u;
LABEL_9:
  swift_beginAccess();
  sub_22F1E8AD0((uint64_t)&v23, v10 + 656);
  swift_endAccess();
  return v10;
}

Swift::Void __swiftcall SegmentationProcessor.didUpdate(frame:)(ARFrame frame)
{
  uint64_t v3 = *(void **)(v1 + 272);
  objc_msgSend(v3, sel_lock);
  if (sub_22F1E3E6C(frame.super.isa))
  {
    swift_beginAccess();
    double v4 = (void *)MEMORY[0x230FB41A0](v1 + 240);
    if (v4)
    {
      double v5 = v4;
      if (objc_msgSend(v4, sel_respondsToSelector_, sel_didProcess)) {
        objc_msgSend(v5, sel_didProcess);
      }
      swift_unknownObjectRelease();
    }
  }
  if ((SegmentationProcessor.debugOptions.getter() & 8) == 0) {
    goto LABEL_21;
  }
  double v6 = ImageProcessor.viewportCenter.getter();
  double v8 = v7;
  CGFloat v9 = v6 / ImageProcessor.viewportSize.getter();
  CGFloat v10 = v8 / *(double *)(v1 + 96);
  sub_22F1E32E4(&v28);
  CGAffineTransform v29 = v28;
  v32.CGFloat x = v9;
  v32.CGFloat y = v10;
  CGPoint v11 = CGPointApplyAffineTransform(v32, &v29);
  id v12 = -[objc_class hitTest:types:](frame.super.isa, sel_hitTest_types_, 32, v11.x, v11.y);
  sub_22F1A321C(0, &qword_268695500);
  unint64_t v13 = sub_22F223CB8();

  if (!(v13 >> 62))
  {
    if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_9;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    uint64_t v15 = 0;
LABEL_15:
    swift_beginAccess();
    sub_22F1E69AC(v1 + 656, (uint64_t)v26);
    if (v27)
    {
      sub_22F1AD024((uint64_t)v26, (uint64_t)v23);
      sub_22F1E6A14((uint64_t)v26);
      uint64_t v17 = v24;
      uint64_t v18 = v25;
      __swift_project_boxed_opaque_existential_0(v23, v24);
      if (v15)
      {
        objc_msgSend(v15, sel_worldTransform);
      }
      else
      {
        long long v19 = 0uLL;
        long long v20 = 0uLL;
        long long v21 = 0uLL;
        long long v22 = 0uLL;
      }
      *(_OWORD *)&v29.SCNMatrix4 a = v19;
      *(_OWORD *)&v29.CGFloat c = v20;
      *(_OWORD *)&v29.CGFloat tx = v21;
      long long v30 = v22;
      BOOL v31 = v15 == 0;
      (*(void (**)(CGAffineTransform *, uint64_t, uint64_t))(v18 + 40))(&v29, v17, v18);

      __swift_destroy_boxed_opaque_existential_0((uint64_t)v23);
    }
    else
    {

      sub_22F1E6A14((uint64_t)v26);
    }
LABEL_21:
    objc_msgSend(v3, sel_unlock);
    return;
  }
  swift_bridgeObjectRetain();
  sub_22F2245C8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_22F2245C8();
  swift_bridgeObjectRelease();
  if (!v16) {
    goto LABEL_14;
  }
LABEL_9:
  if ((v13 & 0xC000000000000001) != 0)
  {
    id v14 = (id)MEMORY[0x230FB2E90](0, v13);
    goto LABEL_12;
  }
  if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v14 = *(id *)(v13 + 32);
LABEL_12:
    uint64_t v15 = v14;
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  __break(1u);
}

uint64_t sub_22F1E3E6C(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v119 = *MEMORY[0x263EF8340];
  uint64_t result = (uint64_t)objc_msgSend(a1, sel_rawSceneUnderstandingData);
  if (result)
  {
    double v5 = (void *)result;
    id v6 = objc_msgSend((id)result, sel_semanticSegmentationBuffer);

    if (v6)
    {
      id v7 = objc_msgSend(v5, sel_semanticSegmentationConfidenceBuffer);

      if (v7)
      {
        id v8 = objc_msgSend(v5, sel_normalsBuffer);

        if (v8)
        {
          id v9 = objc_msgSend(a1, sel_camera);
          uint64_t v10 = *(void *)(v2 + 80);
          uint64_t ObjectType = swift_getObjectType();
          (*(void (**)(uint64_t, uint64_t))(v10 + 8))(ObjectType, v10);
          objc_msgSend(v9, sel_projectionMatrixForOrientation_viewportSize_zNear_zFar_, 1, v12, v13, 0.00100000005, 1000.0);
          float32x4_t v104 = v14;
          float32x4_t v105 = v15;
          float32x4_t v106 = v16;
          float32x4_t v107 = v17;
          objc_msgSend(v9, sel_viewMatrixForOrientation_, 1);
          float32x4_t v19 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v104, v18.f32[0]), v105, *(float32x2_t *)v18.f32, 1), v106, v18, 2), v107, v18, 3);
          float32x4_t v21 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v104, v20.f32[0]), v105, *(float32x2_t *)v20.f32, 1), v106, v20, 2), v107, v20, 3);
          float32x4_t v23 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v104, v22.f32[0]), v105, *(float32x2_t *)v22.f32, 1), v106, v22, 2), v107, v22, 3);
          float32x4_t v24 = v107;
          float32x4_t v26 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v104, v25.f32[0]), v105, *(float32x2_t *)v25.f32, 1), v106, v25, 2);
          *(float32x4_t *)(v2 + 288) = v19;
          *(float32x4_t *)(v2 + 304) = v21;
          float32x4_t v27 = vmlaq_laneq_f32(v26, v24, v25, 3);
          *(float32x4_t *)(v2 + 320) = v23;
          *(float32x4_t *)(v2 + 336) = v27;
          *(unsigned char *)(v2 + 352) = 0;
          v120.columns[0] = (simd_float4)v19;
          v120.columns[1] = (simd_float4)v21;
          v120.columns[2] = (simd_float4)v23;
          v120.columns[3] = (simd_float4)v27;
          *(simd_float4x4 *)(v2 + 368) = __invert_f4(v120);
          *(unsigned char *)(v2 + 432) = 0;
          objc_msgSend(v9, sel_transform);
          *(_OWORD *)(v2 + 448) = v28;
          *(_OWORD *)(v2 + 464) = v29;
          *(_OWORD *)(v2 + 480) = v30;
          *(_OWORD *)(v2 + 496) = v31;
          *(unsigned char *)(v2 + 512) = 0;
          sub_22F2238A8();
          if ((void)seed)
          {
            objc_msgSend((id)seed, sel_gravity);
            uint64_t v33 = v32;
            uint64_t v35 = v34;
            uint64_t v37 = v36;

            *(void *)(v2 + 704) = v33;
            *(void *)(v2 + 712) = v35;
            *(void *)(v2 + 720) = v37;
            *(unsigned char *)(v2 + 728) = 0;
          }
          id v38 = objc_msgSend(self, sel_currentDevice);
          id v39 = objc_msgSend(v38, sel_orientation);

          objc_msgSend(v9, sel_eulerAngles);
          float v41 = v40;
          switch((unint64_t)v39)
          {
            case 1uLL:
            case 5uLL:
              float v42 = 1.5708;
              goto LABEL_13;
            case 2uLL:
              float v42 = -1.5708;
              goto LABEL_13;
            case 3uLL:
              float v42 = 3.1416;
LABEL_13:
              float v41 = v40 + v42;
              break;
            default:
              break;
          }
          __float2 v43 = __sincosf_stret(v41);
          *(float *)(v2 + 732) = -v43.__sinval;
          *(float *)(v2 + 736) = v43.__cosval;
          type metadata accessor for SegmentationResult();
          swift_allocObject();
          id v44 = v5;
          *(void *)(v2 + 280) = SegmentationResult.init(_:)(v44);
          swift_release();
          *(unsigned char *)(v2 + 648) = 1;
          if ((SegmentationProcessor.debugOptions.getter() & 0x70) == 0 || (uint64_t v45 = *(void *)(v2 + 280)) == 0)
          {

            return 1;
          }
          id v94 = v44;
          id v95 = v9;
          v107.i64[0] = v45;
          swift_retain();
          id v46 = objc_msgSend(a1, sel_capturedImage);
          id v47 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F00650]), sel_initWithCVPixelBuffer_, v46);
          sub_22F1A7DD8(v109);
          seeCGFloat d = v109[0];
          long long v114 = v109[1];
          long long v115 = v109[2];
          id v48 = objc_msgSend(v47, sel_imageByApplyingTransform_, &seed);

          long long v49 = *(void **)(v2 + 176);
          int8x16_t v50 = (void **)(v2 + 152);
          swift_beginAccess();
          long long v51 = *(void **)(v2 + 152);
          if (v51)
          {
            id v52 = v51;
            objc_msgSend(v49, sel_render_toCVPixelBuffer_, v48, v52);

            uint64_t v53 = *v50;
            if (!*v50 || (*(void *)(v2 + 256) & 0x60) == 0)
            {
              swift_release();

              return 1;
            }
            uint64_t v54 = sub_22F1EB080;
            if ((*(void *)(v2 + 256) & 0x40) == 0) {
              uint64_t v54 = sub_22F1EAF54;
            }
            v106.i64[0] = (uint64_t)v54;
            swift_beginAccess();
            sub_22F1E69AC(v2 + 656, (uint64_t)v110);
            uint64_t v55 = v111;
            if (!v111)
            {
              swift_release();

              sub_22F1E6A14((uint64_t)v110);
              return 1;
            }
            uint64_t v56 = v112;
            float v57 = __swift_project_boxed_opaque_existential_0(v110, v111);
            uint64_t v92 = &v89;
            uint64_t v58 = *(void *)(v55 - 8);
            MEMORY[0x270FA5388](v57);
            long long v60 = (char *)&v89 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
            (*(void (**)(char *))(v58 + 16))(v60);
            long long v61 = v53;
            sub_22F1E6A14((uint64_t)v110);
            long long v62 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v56 + 8))(v55, v56);
            (*(void (**)(char *, uint64_t))(v58 + 8))(v60, v55);
            if ((*(unsigned char *)(v2 + 512) & 1) == 0)
            {
              v105.i64[0] = *(void *)(v2 + 504);
              uint64_t v63 = *(void *)(v2 + 496);
              *((void *)&v103 + 1) = *(void *)(v2 + 488);
              v104.i64[0] = v63;
              uint64_t v64 = *(void *)(v2 + 480);
              *((void *)&v102 + 1) = *(void *)(v2 + 472);
              *(void *)&long long v103 = v64;
              uint64_t v65 = *(void *)(v2 + 464);
              *((void *)&v101 + 1) = *(void *)(v2 + 456);
              *(void *)&long long v102 = v65;
              uint64_t v66 = *(void *)(v2 + 448);
              uint64_t v100 = *(void *)(v2 + 704);
              *(void *)&long long v101 = v66;
              uint64_t v67 = *(void *)(v2 + 712);
              uint64_t v98 = *(void *)(v2 + 720);
              uint64_t v99 = v67;
              unsigned int v97 = *(unsigned __int8 *)(v2 + 728);
              CVPixelBufferLockBaseAddress(v61, 0);
              BaseAddress = (unsigned int *)CVPixelBufferGetBaseAddress(v61);
              CVPixelBufferUnlockBaseAddress(v61, 0);
              int v68 = &v62[OBJC_IVAR____TtC17MeasureFoundation14SurfaceTexture_isLocking];
              swift_beginAccess();
              if (*v68)
              {
LABEL_26:
                uint64_t v90 = v68;
                uint64_t v91 = v61;
                uint64_t v93 = v62;
                uint64_t v70 = &v62[OBJC_IVAR____TtC17MeasureFoundation14SurfaceTexture_pixelsNum];
                swift_beginAccess();
                uint64_t v71 = *(void *)v70;
                if ((*(void *)v70 & 0x8000000000000000) != 0) {
                  goto LABEL_49;
                }
                if (v71)
                {
                  unsigned __int8 v72 = (uint64_t *)&v93[OBJC_IVAR____TtC17MeasureFoundation14SurfaceTexture_width];
                  uint64_t v73 = &v93[OBJC_IVAR____TtC17MeasureFoundation14SurfaceTexture_height];
                  uint64_t v74 = &v93[OBJC_IVAR____TtC17MeasureFoundation14SurfaceTexture_pixel32s];
                  swift_beginAccess();
                  swift_beginAccess();
                  swift_beginAccess();
                  uint64_t v75 = 0;
                  while (1)
                  {
                    uint64_t v76 = *v72;
                    if (!*v72) {
                      break;
                    }
                    uint64_t v77 = v75 / v76;
                    BOOL v78 = __OFSUB__(v76, v75 % v76);
                    uint64_t v79 = v76 - v75 % v76;
                    if (v78) {
                      goto LABEL_46;
                    }
                    uint64_t v80 = v79 * *(void *)v73;
                    if ((unsigned __int128)(v79 * (__int128)*(uint64_t *)v73) >> 64 != v80 >> 63) {
                      goto LABEL_47;
                    }
                    if (__OFADD__(v80, v77)) {
                      goto LABEL_48;
                    }
                    uint64_t v81 = *(void *)v74;
                    if (*(void *)v74)
                    {
                      uint64_t v82 = BaseAddress[v75];
                      seeCGFloat d = v101;
                      long long v114 = v102;
                      long long v115 = v103;
                      uint64_t v116 = v104.i64[0];
                      uint64_t v117 = v105.i64[0];
                      char v118 = 0;
                      *(_DWORD *)(v81 + 4 * v75) = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, long long *, uint64_t, uint64_t, uint64_t, void))v106.i64[0])(v82, v107.i64[0], v80 + v77, &seed, v100, v99, v98, v97);
                    }
                    if (v71 == ++v75) {
                      goto LABEL_38;
                    }
                  }
                  __break(1u);
LABEL_46:
                  __break(1u);
LABEL_47:
                  __break(1u);
LABEL_48:
                  __break(1u);
LABEL_49:
                  __break(1u);
                }
LABEL_38:
                unint64_t v83 = v90;
                if (*v90 != 1)
                {

                  swift_release();
                  return 1;
                }
                uint32_t v108 = 0;
                id v85 = v93;
                id v84 = v94;
                int64_t v86 = *(__IOSurface **)&v93[OBJC_IVAR____TtC17MeasureFoundation14SurfaceTexture_ioSurface];
                id v87 = v95;
                unint64_t v88 = v91;
                if (v86)
                {
                  IOSurfaceUnlock(v86, 2u, &v108);
                  *unint64_t v83 = 0;

                  swift_release();
                  return 1;
                }
LABEL_53:
                __break(1u);
                JUMPOUT(0x22F1E4770);
              }
              LODWORD(seed) = 0;
              uint64_t v69 = *(__IOSurface **)&v62[OBJC_IVAR____TtC17MeasureFoundation14SurfaceTexture_ioSurface];
              if (v69)
              {
                IOSurfaceLock(v69, 2u, (uint32_t *)&seed);
                *int v68 = 1;
                goto LABEL_26;
              }
LABEL_52:
              __break(1u);
              goto LABEL_53;
            }
          }
          else
          {
            __break(1u);
          }
          __break(1u);
          goto LABEL_52;
        }
      }
    }

    return 0;
  }
  return result;
}

void *SegmentationProcessor.DebugOptions.showUnprojectedTrail.unsafeMutableAddressor()
{
  return &static SegmentationProcessor.DebugOptions.showUnprojectedTrail;
}

void sub_22F1E4790(void *a1, uint64_t a2, char a3, double a4, double a5)
{
  LOBYTE(v6) = a3;
  CGFloat v10 = a4 / ImageProcessor.viewportSize.getter();
  CGFloat v11 = a5 / *(double *)(v5 + 96);
  sub_22F1E32E4(&v31);
  CGAffineTransform v30 = v31;
  v32.CGFloat x = v10;
  v32.CGFloat y = v11;
  CGPoint v12 = CGPointApplyAffineTransform(v32, &v30);
  id v13 = objc_msgSend(a1, sel_hitTest_types_, a2, v12.x, v12.y);
  sub_22F1A321C(0, &qword_268695500);
  unint64_t v14 = sub_22F223CB8();

  unint64_t v28 = v14 >> 62;
  unint64_t v29 = v14;
  if (v14 >> 62)
  {
LABEL_19:
    swift_bridgeObjectRetain();
    uint64_t v15 = sub_22F2245C8();
    swift_bridgeObjectRelease();
    if (v15 < 2) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v15 < 2) {
      goto LABEL_20;
    }
  }
  if (v6 == 1)
  {
    char v16 = 0;
    uint64_t v17 = v15 - 1;
    unint64_t v18 = v29 & 0xC000000000000001;
    while (1)
    {
      if (v17 <= 0)
      {
        if ((v17 != 0) | v16 & 1) {
          break;
        }
        uint64_t v19 = 0;
        char v16 = 1;
        if (v18)
        {
LABEL_17:
          id v20 = (id)MEMORY[0x230FB2E90]();
          goto LABEL_11;
        }
      }
      else
      {
        uint64_t v19 = v17 - 1;
        if (v18) {
          goto LABEL_17;
        }
      }
      if ((unint64_t)v17 >= *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_19;
      }
      id v20 = *(id *)(v29 + 32 + 8 * v17);
LABEL_11:
      float32x4_t v21 = v20;
      id v22 = objc_msgSend(v20, sel_anchor, v28);
      if (v22)
      {
        id v6 = v22;
        self;
        float32x4_t v23 = (void *)swift_dynamicCastObjCClass();
        if (v23)
        {
          id v24 = objc_msgSend(v23, sel_alignment);

          if (!v24) {
            goto LABEL_27;
          }
        }
        else
        {
        }
      }

      uint64_t v17 = v19;
    }
  }
LABEL_20:
  if (v28)
  {
    unint64_t v25 = v29;
    swift_bridgeObjectRetain();
    uint64_t v26 = sub_22F2245C8();
    swift_bridgeObjectRelease();
    if (!v26)
    {
LABEL_27:
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    unint64_t v25 = v29;
    if (!*(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_27;
    }
  }
  if ((v25 & 0xC000000000000001) != 0)
  {
    MEMORY[0x230FB2E90](0, v25);
    goto LABEL_27;
  }
  if (*(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v27 = *(id *)(v25 + 32);
    goto LABEL_27;
  }
  __break(1u);
}

uint64_t SegmentationProcessor.projectPoint(_:)(float32x4_t a1)
{
  uint64_t v2 = *(void **)(v1 + 272);
  objc_msgSend(v2, sel_lock);
  uint64_t v14 = 0;
  if ((*(unsigned char *)(v1 + 352) & 1) == 0)
  {
    float32x4_t v12 = *(float32x4_t *)(v1 + 288);
    float32x4_t v11 = *(float32x4_t *)(v1 + 304);
    float32x4_t v10 = *(float32x4_t *)(v1 + 320);
    float32x4_t v9 = *(float32x4_t *)(v1 + 336);
    v3.f64[0] = ImageProcessor.viewportSize.getter();
    v3.f64[1] = *(float64_t *)(v1 + 96);
    float32x2_t v4 = _s17MeasureFoundation0A6CameraC12projectPoint_14viewProjection12viewportSizes5SIMD3VySfGAI_So13simd_float4x4as5SIMD2VySfGtFZ_0(a1, v12, v11, v10, v9, vcvt_f32_f64(v3));
    BOOL v6 = (LODWORD(v5) & 0x7FFFFF) != 0 && (~LODWORD(v5) & 0x7F800000) == 0;
    BOOL v7 = v5 >= 0.0 && v5 <= 1.0;
    if (v7 && !v6) {
      uint64_t v14 = *(_OWORD *)&vcvtq_f64_f32(v4);
    }
  }
  objc_msgSend(v2, sel_unlock, *(_OWORD *)&v9, *(_OWORD *)&v10, *(_OWORD *)&v11, *(_OWORD *)&v12);
  return v14;
}

CGPoint_optional __swiftcall SegmentationProcessor.reprojectPoint(screenPoint:depth:)(CGPoint screenPoint, Swift::Float depth)
{
  double y = screenPoint.y;
  double x = screenPoint.x;
  float v5 = *(void **)(v2 + 272);
  objc_msgSend(v5, sel_lock);
  if (*(unsigned char *)(v2 + 432))
  {
    char v6 = 0;
  }
  else
  {
    float32x4_t v18 = *(float32x4_t *)(v2 + 368);
    float32x4_t v17 = *(float32x4_t *)(v2 + 384);
    float32x4_t v16 = *(float32x4_t *)(v2 + 400);
    float32x4_t v15 = *(float32x4_t *)(v2 + 416);
    *(float *)&unsigned int v7 = x;
    *(float *)&unsigned int v8 = y;
    v9.n128_u64[0] = __PAIR64__(v8, v7);
    v9.n128_u64[1] = LODWORD(depth);
    __n128 v20 = v9;
    v10.f64[0] = ImageProcessor.viewportSize.getter();
    v10.f64[1] = *(float64_t *)(v2 + 96);
    *(float32x2_t *)v11.f32 = _s17MeasureFoundation0A6CameraC14unprojectPoint_17viewProjectionInv12viewportSizes5SIMD3VySfGAI_So13simd_float4x4as5SIMD2VySfGtFZ_0(v20, v18, v17, v16, v15, COERCE_DOUBLE(vcvt_f32_f64(v10)));
    char v6 = SegmentationProcessor.projectPoint(_:)(v11);
  }
  objc_msgSend(v5, sel_unlock, *(_OWORD *)&v15, *(_OWORD *)&v16, *(_OWORD *)&v17, *(_OWORD *)&v18);
  Swift::Bool v14 = v6;
  result.value.double y = v13;
  result.value.double x = v12;
  result.is_nil = v14;
  return result;
}

CGPoint_optional __swiftcall SegmentationProcessor.reprojectPoint(screenPoint:frame:)(CGPoint screenPoint, ARFrame frame)
{
  float32x2_t v4 = *(void **)(v2 + 272);
  objc_msgSend(v4, sel_lock, screenPoint.x, screenPoint.y);
  double v5 = ImageProcessor.viewportCenter.getter();
  double v7 = v6;
  CGFloat v8 = v5 / ImageProcessor.viewportSize.getter();
  CGFloat v9 = v7 / *(double *)(v2 + 96);
  sub_22F1E32E4(&v23);
  CGAffineTransform v22 = v23;
  v24.double x = v8;
  v24.double y = v9;
  CGPoint v10 = CGPointApplyAffineTransform(v24, &v22);
  id v11 = -[objc_class hitTest:types:](frame.super.isa, sel_hitTest_types_, 32, v10.x, v10.y);
  sub_22F1A321C(0, &qword_268695500);
  unint64_t v12 = sub_22F223CB8();

  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_22F2245C8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v21 = sub_22F2245C8();
    char v13 = swift_bridgeObjectRelease();
    if (v21) {
      goto LABEL_3;
    }
LABEL_8:
    swift_bridgeObjectRelease();
    char v20 = 0;
    goto LABEL_9;
  }
  if (!*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_8;
  }
LABEL_3:
  if ((v12 & 0xC000000000000001) != 0)
  {
    id v16 = (id)MEMORY[0x230FB2E90](0, v12);
  }
  else
  {
    if (!*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_12;
    }
    id v16 = *(id *)(v12 + 32);
  }
  float32x4_t v17 = v16;
  swift_bridgeObjectRelease();
  objc_msgSend(v17, sel_worldTransform);
  float32x4_t v19 = v18;
  v19.i32[3] = 0;
  char v20 = SegmentationProcessor.projectPoint(_:)(v19);

LABEL_9:
  objc_msgSend(v4, sel_unlock);
  char v13 = v20;
LABEL_12:
  result.value.double y = v15;
  result.value.double x = v14;
  result.is_nil = v13;
  return result;
}

MeasureFoundation::SegmentationResult::Label_optional __swiftcall SegmentationProcessor.label(at:withKernel:)(CGPoint at, Swift::Int withKernel)
{
  CGFloat y = at.y;
  CGFloat x = at.x;
  double v6 = *(void **)(v2 + 272);
  objc_msgSend(v6, sel_lock);
  sub_22F1E5038(x, y);
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  result.MeasureFoundation::SegmentationResult::Label value = sub_22F1E5118(v7, v9);
  MeasureFoundation::SegmentationResult::Label value = result.value;
  if (result.value == MeasureFoundation_SegmentationResult_Label_unknownDefault
    || result.value == MeasureFoundation_SegmentationResult_Label_unknown
    || withKernel < 1)
  {
LABEL_35:
    objc_msgSend(v6, sel_unlock);
    return (MeasureFoundation::SegmentationResult::Label_optional)value;
  }
  uint64_t v30 = v10;
  Swift::Int v15 = -withKernel;
  Swift::Int v16 = 2 * withKernel;
  Swift::Int v17 = -withKernel;
  unint64_t v28 = v6;
LABEL_9:
  Swift::Int v29 = v17;
  Swift::Int v18 = v30 + v17;
  if (__OFADD__(v30, v17)) {
    goto LABEL_40;
  }
  while (1)
  {
    uint64_t v19 = v8 + v15;
    if (__OFADD__(v8, v15)) {
      break;
    }
    char v20 = *(void **)(v2 + 280);
    if (!v20) {
      goto LABEL_21;
    }
    char v21 = 0;
    if ((v19 & 0x8000000000000000) == 0)
    {
      uint64_t v22 = v20[9];
      if (v19 < v22 && (v18 & 0x8000000000000000) == 0)
      {
        if (v18 >= v20[10])
        {
LABEL_21:
          char v21 = 0;
          goto LABEL_22;
        }
        Swift::Int v23 = v18 * v22;
        if ((unsigned __int128)(v18 * (__int128)v22) >> 64 != (v18 * v22) >> 63) {
          goto LABEL_38;
        }
        BOOL v24 = __OFADD__(v23, v19);
        Swift::Int v25 = v23 + v19;
        if (v24) {
          goto LABEL_39;
        }
        uint64_t v26 = *(char *)(v20[6] + v25);
        id v27 = self;
        swift_retain();
        if (objc_msgSend(v27, sel_jasperAvailable))
        {
          char v21 = _s17MeasureFoundation18SegmentationResultC5LabelO8rawValueAESgs5UInt8V_tcfC_0(v26);
          result.MeasureFoundation::SegmentationResult::Label value = swift_release();
          if (v21 == 33) {
            goto LABEL_33;
          }
        }
        else
        {
          result.MeasureFoundation::SegmentationResult::Label value = swift_release();
          if (v26 > 0xC) {
            goto LABEL_33;
          }
          char v21 = byte_22F229D54[v26];
        }
      }
    }
LABEL_22:
    if (value != v21) {
      goto LABEL_33;
    }
    if (!v16)
    {
      if (v29 != withKernel)
      {
        Swift::Int v17 = v29 + 1;
        Swift::Int v16 = 2 * withKernel;
        Swift::Int v15 = -withKernel;
        if (!__OFADD__(v29, 1)) {
          goto LABEL_9;
        }
        __break(1u);
LABEL_33:
        MeasureFoundation::SegmentationResult::Label value = MeasureFoundation_SegmentationResult_Label_unknown;
      }
      double v6 = v28;
      goto LABEL_35;
    }
    --v16;
    BOOL v24 = __OFADD__(v15++, 1);
    if (v24) {
      goto LABEL_37;
    }
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
  return result;
}

void sub_22F1E5038(CGFloat a1, CGFloat a2)
{
  sub_22F1E348C((unint64_t *)&v8);
  CGAffineTransform v7 = v8;
  v9.CGFloat x = a1;
  v9.CGFloat y = a2;
  CGPoint v4 = CGPointApplyAffineTransform(v9, &v7);
  double v5 = round(v4.x);
  if ((~*(void *)&v5 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v5 >= 9.22337204e18)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  double v6 = round(v4.y);
  if ((~*(void *)&v6 & 0x7FF0000000000000) == 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v6 <= -9.22337204e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v6 >= 9.22337204e18) {
LABEL_13:
  }
    __break(1u);
}

uint64_t sub_22F1E5118(uint64_t result, uint64_t a2)
{
  float64x2_t v3 = *(void **)(v2 + 280);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = 0;
  if (result < 0) {
    return v4;
  }
  uint64_t v5 = v3[9];
  if (v5 <= result || a2 < 0) {
    return v4;
  }
  if (v3[10] <= a2) {
    return 0;
  }
  uint64_t v6 = a2 * v5;
  if ((unsigned __int128)(a2 * (__int128)v5) >> 64 == (a2 * v5) >> 63)
  {
    if (!__OFADD__(v6, result))
    {
      uint64_t v7 = *(unsigned __int8 *)(v3[6] + v6 + result);
      CGAffineTransform v8 = self;
      swift_retain();
      if (objc_msgSend(v8, sel_jasperAvailable))
      {
        uint64_t v9 = _s17MeasureFoundation18SegmentationResultC5LabelO8rawValueAESgs5UInt8V_tcfC_0(v7);
      }
      else
      {
        char v10 = sub_22F1EB3B8(v7);
        if (v10 == 13)
        {
          uint64_t v4 = 33;
LABEL_16:
          swift_release();
          return v4;
        }
        uint64_t v9 = sub_22F1EAF14(v10);
      }
      uint64_t v4 = v9;
      goto LABEL_16;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t SegmentationProcessor.label(at:withKernel:)(uint64_t a1, float32x4_t a2)
{
  uint64_t v4 = *(void **)(v2 + 272);
  objc_msgSend(v4, sel_lock);
  *(double *)&uint64_t v5 = COERCE_DOUBLE(SegmentationProcessor.projectPoint(_:)(a2));
  uint64_t v7 = 0x2649FF000;
  if (v8) {
    goto LABEL_31;
  }
  CGFloat v9 = *(double *)&v5;
  CGFloat v10 = v6;
  objc_msgSend(v4, sel_lock);
  sub_22F1E5038(v9, v10);
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t result = sub_22F1E5118(v11, v13);
  uint64_t v16 = result;
  if (result == 33 || !(_BYTE)result || a1 <= 0)
  {
LABEL_34:
    objc_msgSend(v4, *(SEL *)(v7 + 3552), v30, v31);
    goto LABEL_35;
  }
  uint64_t v17 = -a1;
  uint64_t v18 = 2 * a1;
  uint64_t v19 = -a1;
  uint64_t v32 = -a1;
  uint64_t v33 = a1;
  uint64_t v30 = 2 * a1;
  uint64_t v31 = v14;
  while (2)
  {
    uint64_t v35 = v19;
    uint64_t v7 = v14 + v19;
    if (__OFADD__(v14, v19)) {
      goto LABEL_40;
    }
    uint64_t v20 = v17;
    while (1)
    {
      uint64_t v21 = v12 + v20;
      if (__OFADD__(v12, v20))
      {
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return result;
      }
      uint64_t v22 = *(void **)(v2 + 280);
      if (!v22) {
        goto LABEL_19;
      }
      unsigned __int8 v23 = 0;
      if ((v21 & 0x8000000000000000) == 0)
      {
        uint64_t v24 = v22[9];
        if (v21 < v24 && (v7 & 0x8000000000000000) == 0)
        {
          if (v7 >= v22[10])
          {
LABEL_19:
            unsigned __int8 v23 = 0;
            goto LABEL_20;
          }
          uint64_t v25 = v7 * v24;
          if ((unsigned __int128)(v7 * (__int128)v24) >> 64 != (v7 * v24) >> 63) {
            goto LABEL_38;
          }
          BOOL v26 = __OFADD__(v25, v21);
          uint64_t v27 = v25 + v21;
          if (v26) {
            goto LABEL_39;
          }
          uint64_t v28 = *(char *)(v22[6] + v27);
          Swift::Int v29 = self;
          swift_retain();
          if (objc_msgSend(v29, sel_jasperAvailable))
          {
            unsigned __int8 v23 = _s17MeasureFoundation18SegmentationResultC5LabelO8rawValueAESgs5UInt8V_tcfC_0(v28);
            uint64_t result = swift_release();
            if (v23 == 33) {
              goto LABEL_32;
            }
          }
          else
          {
            uint64_t result = swift_release();
            if (v28 >= 0xD)
            {
LABEL_32:
              uint64_t v16 = 0;
              goto LABEL_33;
            }
            unsigned __int8 v23 = byte_22F229D54[v28];
          }
        }
      }
LABEL_20:
      if (v16 != v23) {
        goto LABEL_32;
      }
      if (!v18) {
        break;
      }
      --v18;
      BOOL v26 = __OFADD__(v20++, 1);
      if (v26) {
        goto LABEL_37;
      }
    }
    uint64_t v17 = v32;
    if (v35 == v33)
    {
LABEL_33:
      uint64_t v7 = (uint64_t)&unk_2649FF000;
      goto LABEL_34;
    }
    uint64_t v19 = v35 + 1;
    uint64_t v18 = v30;
    uint64_t v14 = v31;
    if (!__OFADD__(v35, 1)) {
      continue;
    }
    break;
  }
  __break(1u);
LABEL_31:
  uint64_t v16 = 33;
LABEL_35:
  objc_msgSend(v4, *(SEL *)(v7 + 3552), v30, v31);
  return v16;
}

uint64_t sub_22F1E5434(void *a1)
{
  float64x2_t v3 = *(void **)(v1 + 272);
  objc_msgSend(v3, sel_lock);
  if (*(unsigned char *)(v1 + 648) == 1)
  {
    uint64_t v4 = sub_22F1E37C0();
    uint64_t v5 = sub_22F1E54D4(v4, a1);
    swift_bridgeObjectRelease();
    double v6 = (uint64_t *)(v1 + 640);
    *(void *)(v1 + 640) = v5;
    swift_bridgeObjectRelease();
    *(unsigned char *)(v1 + 648) = 0;
  }
  else
  {
    double v6 = (uint64_t *)(v1 + 640);
  }
  uint64_t v7 = *v6;
  swift_bridgeObjectRetain();
  objc_msgSend(v3, sel_unlock);
  return v7;
}

uint64_t sub_22F1E54D4(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  if ((SegmentationProcessor.debugOptions.getter() & 4) != 0)
  {
    swift_beginAccess();
    sub_22F1E69AC(v2 + 656, (uint64_t)v107);
    if (*(void *)&v107[24])
    {
      sub_22F1AD024((uint64_t)v107, (uint64_t)&v116);
      sub_22F1E6A14((uint64_t)v107);
      uint64_t v5 = *((void *)&v117 + 1);
      uint64_t v6 = v118;
      __swift_project_boxed_opaque_existential_0(&v116, *((uint64_t *)&v117 + 1));
      (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v5, v6);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v116);
    }
    else
    {
      sub_22F1E6A14((uint64_t)v107);
    }
  }
  uint64_t v7 = *(void *)(a1 + 16);
  if (!v7) {
    return MEMORY[0x263F8EE80];
  }
  char v8 = *(void **)(v2 + 272);
  uint64_t v9 = MEMORY[0x263F8EE80];
  swift_bridgeObjectRetain();
  swift_beginAccess();
  uint64_t v100 = v9;
  CGFloat v10 = (double *)(a1 + 40);
  uint64_t v11 = (SEL *)&unk_2649FF000;
  uint64_t v12 = (SEL *)&unk_2649FF000;
  int64x2_t v97 = vdupq_n_s64(0x21uLL);
  while (1)
  {
    double v13 = *(v10 - 1);
    double v14 = *v10;
    objc_msgSend(v8, v11[443], v88, v89, v90, v91);
    sub_22F1E348C((unint64_t *)&v116);
    *(_OWORD *)float32x4_t v107 = v116;
    *(_OWORD *)&v107[16] = v117;
    *(_OWORD *)uint32_t v108 = v118;
    v119.CGFloat x = v13;
    v119.CGFloat y = v14;
    CGPoint v15 = CGPointApplyAffineTransform(v119, (CGAffineTransform *)v107);
    double v16 = round(v15.x);
    if ((~*(void *)&v16 & 0x7FF0000000000000) == 0) {
      break;
    }
    if (v16 <= -9.22337204e18) {
      goto LABEL_89;
    }
    if (v16 >= 9.22337204e18) {
      goto LABEL_90;
    }
    double v17 = round(v15.y);
    if ((~*(void *)&v17 & 0x7FF0000000000000) == 0) {
      goto LABEL_91;
    }
    if (v17 <= -9.22337204e18) {
      goto LABEL_92;
    }
    if (v17 >= 9.22337204e18) {
      goto LABEL_93;
    }
    uint64_t v18 = *(void **)(v3 + 280);
    if (!v18
      || (uint64_t v19 = (uint64_t)v16, (uint64_t)v16 < 0)
      || (uint64_t v20 = v18[9], v20 <= v19)
      || (uint64_t v21 = (uint64_t)v17, (uint64_t)v17 < 0)
      || v18[10] <= v21)
    {
LABEL_47:
      [v8 v12[444]];
      goto LABEL_48;
    }
    uint64_t v22 = v21 * v20;
    if ((unsigned __int128)(v21 * (__int128)v20) >> 64 != (v21 * v20) >> 63) {
      goto LABEL_94;
    }
    BOOL v23 = __OFADD__(v22, v19);
    uint64_t v24 = v22 + v19;
    if (v23) {
      goto LABEL_95;
    }
    uint64_t v25 = *(unsigned __int8 *)(v18[6] + v24);
    BOOL v26 = self;
    swift_retain();
    if ((objc_msgSend(v26, sel_jasperAvailable) & 1) == 0)
    {
      char v28 = sub_22F1EB3B8(v25);
      swift_release();
      char v29 = v28 - 1;
      unsigned int v30 = (v28 - 1);
      uint64_t v11 = (SEL *)&unk_2649FF000;
      uint64_t v12 = (SEL *)&unk_2649FF000;
      if (v30 >= 0xB) {
        goto LABEL_47;
      }
      char v27 = byte_22F229D61[v29];
      objc_msgSend(v8, sel_unlock);
LABEL_26:
      unsigned __int8 v99 = v27;
      sub_22F1E4790(a2, 32, v27, v13, v14);
      if (!v31) {
        goto LABEL_48;
      }
      id v98 = v31;
      [v8 v11[443]];
      uint64_t v32 = *(void *)(v3 + 280);
      float v33 = 0.0;
      if (v32)
      {
        long long v34 = *(_OWORD *)(v3 + 592);
        *(_OWORD *)float32x4_t v107 = *(_OWORD *)(v3 + 576);
        *(_OWORD *)&v107[16] = v34;
        *(_OWORD *)uint32_t v108 = *(_OWORD *)(v3 + 608);
        double v35 = v13;
        *(double *)&long long v34 = v14;
        CGPoint v36 = CGPointApplyAffineTransform(*(CGPoint *)((char *)&v34 - 8), (CGAffineTransform *)v107);
        double v37 = round(v36.x);
        if ((~*(void *)&v37 & 0x7FF0000000000000) == 0) {
          goto LABEL_96;
        }
        if (v37 <= -9.22337204e18) {
          goto LABEL_97;
        }
        if (v37 >= 9.22337204e18) {
          goto LABEL_98;
        }
        double v38 = round(v36.y);
        if ((~*(void *)&v38 & 0x7FF0000000000000) == 0) {
          goto LABEL_99;
        }
        if (v38 <= -9.22337204e18) {
          goto LABEL_100;
        }
        if (v38 >= 9.22337204e18) {
          goto LABEL_101;
        }
        uint64_t v39 = (uint64_t)v37;
        if (((uint64_t)v37 & 0x8000000000000000) == 0)
        {
          uint64_t v40 = *(void *)(v32 + 72);
          if (v40 > v39)
          {
            uint64_t v41 = (uint64_t)v38;
            if (((uint64_t)v38 & 0x8000000000000000) == 0 && *(void *)(v32 + 80) > v41)
            {
              uint64_t v42 = v41 * v40;
              if ((unsigned __int128)(v41 * (__int128)v40) >> 64 != (v41 * v40) >> 63) {
                goto LABEL_106;
              }
              uint64_t v43 = v42 + v39;
              if (__OFADD__(v42, v39)) {
                goto LABEL_107;
              }
              swift_retain();
              double v44 = sub_22F1EAC54(v43);
              float v33 = *(float *)&v44;
              swift_release();
              uint64_t v11 = (SEL *)&unk_2649FF000;
            }
          }
        }
      }
      objc_msgSend(v8, sel_unlock);
      SegmentationProcessor.normal(at:)(v13, v14);
      id v45 = objc_msgSend(v98, sel_anchor);
      if (!v45)
      {

        goto LABEL_48;
      }
      id v46 = v45;
      self;
      id v47 = (void *)swift_dynamicCastObjCClass();
      if (!v47)
      {

        uint64_t v12 = (SEL *)&unk_2649FF000;
        goto LABEL_48;
      }
      id v95 = v47;
      if (objc_msgSend(v47, sel_alignment))
      {
        if (v99 == 1 || v99 == 3) {
          goto LABEL_56;
        }
      }
      else if (v99 == 2 || v99 == 6 || v99 == 7)
      {
LABEL_56:

        uint64_t v12 = (SEL *)&unk_2649FF000;
        goto LABEL_48;
      }
      uint64_t v48 = v100;
      if (!*(void *)(v100 + 16)
        || (v92 = v46, sub_22F18DFE0((uint64_t)v95), char v50 = v49, v92, (v50 & 1) == 0))
      {
        id v51 = v46;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)float32x4_t v107 = v100;
        uint64_t v110 = MEMORY[0x263F8EE80];
        int64x2_t v111 = v97;
        int v112 = 0;
        uint64_t v113 = MEMORY[0x263F8EE80];
        int64x2_t v114 = v97;
        int v115 = 0;
        sub_22F1E7660((uint64_t)&v110, v95, isUniquelyReferenced_nonNull_native);
        uint64_t v48 = *(void *)v107;

        swift_bridgeObjectRelease();
      }
      id v53 = v46;
      char v101 = swift_isUniquelyReferenced_nonNull_native();
      v104[0] = v48;
      id v93 = v53;
      unint64_t v55 = sub_22F18DFE0((uint64_t)v95);
      uint64_t v56 = *(void *)(v48 + 16);
      BOOL v57 = (v54 & 1) == 0;
      uint64_t v58 = v56 + v57;
      if (__OFADD__(v56, v57)) {
        goto LABEL_102;
      }
      char v59 = v54;
      if (*(void *)(v48 + 24) >= v58)
      {
        if (v101)
        {
          if ((v54 & 1) == 0) {
            goto LABEL_103;
          }
        }
        else
        {
          sub_22F194380();
          if ((v59 & 1) == 0) {
            goto LABEL_103;
          }
        }
      }
      else
      {
        sub_22F1924DC(v58, v101);
        unint64_t v60 = sub_22F18DFE0((uint64_t)v95);
        if ((v59 & 1) != (v61 & 1)) {
          goto LABEL_110;
        }
        unint64_t v55 = v60;
        if ((v59 & 1) == 0) {
          goto LABEL_103;
        }
      }
      unint64_t v62 = *(void *)(v104[0] + 56) + (v55 << 6);
      uint64_t v63 = *(unsigned int *)(v62 + 24);
      uint64_t v64 = *(void *)(v62 + 32);
      int v65 = *(_DWORD *)(v62 + 56);
      *(void *)float32x4_t v107 = *(void *)v62;
      *(_OWORD *)&v107[8] = *(_OWORD *)(v62 + 8);
      *(void *)&v107[24] = v63;
      *(void *)uint32_t v108 = v64;
      *(_OWORD *)&v108[8] = *(_OWORD *)(v62 + 40);
      int v109 = v65;
      sub_22F1E2B40(v99, v33);
      sub_22F1E8530((uint64_t)v107, 1, v104, v55, v95);
      sub_22F1E8A50(*(uint64_t *)v107);

      uint64_t v66 = v104[0];
      id v67 = v93;
      char v102 = swift_isUniquelyReferenced_nonNull_native();
      v104[0] = v66;
      id v94 = v67;
      unint64_t v69 = sub_22F18DFE0((uint64_t)v95);
      uint64_t v70 = *(void *)(v66 + 16);
      BOOL v71 = (v68 & 1) == 0;
      uint64_t v72 = v70 + v71;
      if (__OFADD__(v70, v71)) {
        goto LABEL_104;
      }
      char v73 = v68;
      if (*(void *)(v66 + 24) >= v72)
      {
        unsigned __int8 v76 = v99;
        if ((v102 & 1) == 0)
        {
          sub_22F194380();
          goto LABEL_71;
        }
      }
      else
      {
        sub_22F1924DC(v72, v102);
        unint64_t v74 = sub_22F18DFE0((uint64_t)v95);
        if ((v73 & 1) != (v75 & 1)) {
          goto LABEL_110;
        }
        unint64_t v69 = v74;
LABEL_71:
        unsigned __int8 v76 = v99;
      }
      if ((v73 & 1) == 0) {
        goto LABEL_105;
      }
      unint64_t v77 = *(void *)(v104[0] + 56) + (v69 << 6);
      uint64_t v78 = *(unsigned int *)(v77 + 24);
      uint64_t v79 = *(void *)(v77 + 32);
      int v80 = *(_DWORD *)(v77 + 56);
      *(void *)float32x4_t v107 = *(void *)v77;
      *(_OWORD *)&v107[8] = *(_OWORD *)(v77 + 8);
      *(void *)&v107[24] = v78;
      *(void *)uint32_t v108 = v79;
      *(_OWORD *)&v108[8] = *(_OWORD *)(v77 + 40);
      int v109 = v80;
      sub_22F1E2B40(v76, 1.0);
      sub_22F1E8530((uint64_t)v107, 1, v104, v69, v95);
      sub_22F1E8A50(*(uint64_t *)v107);

      uint64_t v100 = v104[0];
      if ((*(unsigned char *)(v3 + 256) & 4) != 0)
      {
        SegmentationProcessor.normal(at:)(v13, v14);
        if (v81) {
          goto LABEL_109;
        }
        sub_22F1E69AC(v3 + 656, (uint64_t)v107);
        if (*(void *)&v107[24])
        {
          sub_22F1AD024((uint64_t)v107, (uint64_t)v104);
          sub_22F1E6A14((uint64_t)v107);
          uint64_t v82 = v105;
          uint64_t v96 = v106;
          __swift_project_boxed_opaque_existential_0(v104, v105);
          objc_msgSend(v98, sel_worldTransform);
          if (qword_2686944C8 != -1)
          {
            long long v90 = v84;
            long long v91 = v83;
            long long v88 = v86;
            long long v89 = v85;
            swift_once();
          }
          if (*((void *)off_268695880 + 2) <= (unint64_t)v99) {
            goto LABEL_108;
          }
          (*(void (**)(void, uint64_t))(v96 + 32))(*((unsigned int *)off_268695880 + v99 + 8), v82);

          __swift_destroy_boxed_opaque_existential_0((uint64_t)v104);
        }
        else
        {

          sub_22F1E6A14((uint64_t)v107);
        }
      }
      else
      {
      }
      uint64_t v11 = (SEL *)&unk_2649FF000;
      uint64_t v12 = (SEL *)&unk_2649FF000;
      goto LABEL_48;
    }
    char v27 = _s17MeasureFoundation18SegmentationResultC5LabelO8rawValueAESgs5UInt8V_tcfC_0(v25);
    swift_release();
    uint64_t v12 = (SEL *)&unk_2649FF000;
    objc_msgSend(v8, sel_unlock);
    if (!v27)
    {
      uint64_t v11 = (SEL *)&unk_2649FF000;
      goto LABEL_48;
    }
    uint64_t v11 = (SEL *)&unk_2649FF000;
    if (v27 != 33) {
      goto LABEL_26;
    }
LABEL_48:
    v10 += 2;
    if (!--v7)
    {
      swift_bridgeObjectRelease();
      return v100;
    }
  }
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
LABEL_99:
  __break(1u);
LABEL_100:
  __break(1u);
LABEL_101:
  __break(1u);
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
LABEL_105:
  __break(1u);
LABEL_106:
  __break(1u);
LABEL_107:
  __break(1u);
LABEL_108:
  __break(1u);
LABEL_109:
  __break(1u);
LABEL_110:
  sub_22F1A321C(0, (unint64_t *)&qword_268694C40);
  uint64_t result = sub_22F2247B8();
  __break(1u);
  return result;
}

Swift::Float __swiftcall SegmentationProcessor.labelConfidence(at:)(CGPoint at)
{
  CGFloat y = at.y;
  CGFloat x = at.x;
  uint64_t v4 = *(void **)(v1 + 272);
  objc_msgSend(v4, sel_lock);
  uint64_t v5 = *(void *)(v1 + 280);
  if (!v5)
  {
    float v9 = 0.0;
    goto LABEL_11;
  }
  swift_retain();
  sub_22F1E5038(x, y);
  float v9 = 0.0;
  if (v6 < 0 || (uint64_t v10 = *(void *)(v5 + 72), v6 >= v10) || v7 < 0 || v7 >= *(void *)(v5 + 80))
  {
LABEL_9:
    swift_release();
LABEL_11:
    objc_msgSend(v4, sel_unlock);
    return v9;
  }
  uint64_t v11 = v7 * v10;
  if ((unsigned __int128)(v7 * (__int128)v10) >> 64 == (v7 * v10) >> 63)
  {
    BOOL v12 = __OFADD__(v11, v6);
    uint64_t v13 = v11 + v6;
    if (!v12)
    {
      double v14 = sub_22F1EAC54(v13);
      float v9 = *(float *)&v14;
      goto LABEL_9;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t SegmentationProcessor.normal(at:)(CGFloat a1, CGFloat a2)
{
  uint64_t v5 = *(void **)(v2 + 272);
  objc_msgSend(v5, sel_lock);
  if (!*(void *)(v2 + 280))
  {
    unint64_t v31 = 0;
    goto LABEL_8;
  }
  if (*(unsigned char *)(v2 + 512))
  {
LABEL_7:
    unint64_t v31 = 0;
    goto LABEL_8;
  }
  float32x2_t v6 = *(float32x2_t *)(v2 + 496);
  float32x2_t v7 = *(float32x2_t *)(v2 + 504);
  float32x2_t v8 = *(float32x2_t *)(v2 + 480);
  float32x2_t v9 = *(float32x2_t *)(v2 + 464);
  v33.i64[0] = *(void *)(v2 + 472);
  float32x2_t v10 = *(float32x2_t *)(v2 + 448);
  swift_retain();
  sub_22F1E5038(a1, a2);
  unint64_t v17 = SegmentationResult.normal(at:)(v11, v12, v13, v14, v15, v16);
  if (v19)
  {
    swift_release();
    goto LABEL_7;
  }
  v20.i64[0] = v17;
  v20.i64[1] = v18;
  float32x2_t v21 = *(float32x2_t *)(v2 + 732);
  float32x2_t v22 = (float32x2_t)vrev64_s32((int32x2_t)vmul_n_f32(v21, *(float *)&v17));
  float32x2_t v23 = vmul_lane_f32(v21, (float32x2_t)v17, 1);
  v24.i32[0] = vsub_f32(v22, v23).u32[0];
  v24.i32[1] = vadd_f32(v22, v23).i32[1];
  v24.i64[1] = vnegq_f32(v20).u32[2];
  *(float32x2_t *)v25.i8 = simd_float4x4.apply(to:)(v24, v10, v9, v8, v6);
  int8x16_t v33 = v25;
  swift_release();
  *(float32x2_t *)v26.f32 = vsub_f32(*(float32x2_t *)v33.i8, v6);
  float32x2_t v27 = vmul_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v26.f32);
  *(float32x2_t *)&v26.u32[2] = vsub_f32((float32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL), v7);
  unsigned __int32 v28 = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)vmulq_f32(v26, v26), 2), vadd_f32(v27, (float32x2_t)vdup_lane_s32((int32x2_t)v27, 1))).u32[0];
  float32x2_t v29 = vrsqrte_f32((float32x2_t)v28);
  float32x2_t v30 = vmul_f32(v29, vrsqrts_f32((float32x2_t)v28, vmul_f32(v29, v29)));
  unint64_t v31 = vmulq_n_f32(v26, vmul_f32(v30, vrsqrts_f32((float32x2_t)v28, vmul_f32(v30, v30))).f32[0]).u64[0];
LABEL_8:
  objc_msgSend(v5, sel_unlock, v33.i64[0]);
  return v31;
}

unint64_t SegmentationProcessor.normal(at:)(float32x4_t a1)
{
  uint64_t v2 = *(void **)(v1 + 272);
  objc_msgSend(v2, sel_lock);
  uint64_t v3 = SegmentationProcessor.projectPoint(_:)(a1);
  if (v5) {
    unint64_t v6 = 0;
  }
  else {
    unint64_t v6 = SegmentationProcessor.normal(at:)(*(CGFloat *)&v3, v4);
  }
  objc_msgSend(v2, sel_unlock);
  return v6;
}

uint64_t SegmentationProcessor.averageNormal(of:)(SEL *a1)
{
  uint64_t v3 = *(void **)(v1 + 272);
  CGFloat v4 = (SEL *)&unk_2649FF000;
  objc_msgSend(v3, sel_lock);
  if (qword_2686943C0 != -1) {
LABEL_25:
  }
    swift_once();
  SEL v5 = a1[2];
  unint64_t v6 = (SEL *)&unk_2649FF000;
  if (v5)
  {
    float32x4_t v27 = (float32x4_t)static SIMD3<>.zero;
    swift_bridgeObjectRetain();
    uint64_t v28 = 0;
    float32x2_t v7 = 0;
    float32x4_t v26 = v5;
    do
    {
      float32x4_t v33 = *(float32x4_t *)&a1[2 * (void)v7 + 4];
      [v3 v4[443]];
      [v3 v4[443]];
      if (*(unsigned char *)(v1 + 352)) {
        goto LABEL_4;
      }
      float32x4_t v32 = *(float32x4_t *)(v1 + 288);
      float32x4_t v31 = *(float32x4_t *)(v1 + 304);
      float32x4_t v30 = *(float32x4_t *)(v1 + 320);
      float32x4_t v29 = *(float32x4_t *)(v1 + 336);
      v8.f64[0] = ImageProcessor.viewportSize.getter();
      v8.f64[1] = *(float64_t *)(v1 + 96);
      float32x2_t v9 = _s17MeasureFoundation0A6CameraC12projectPoint_14viewProjection12viewportSizes5SIMD3VySfGAI_So13simd_float4x4as5SIMD2VySfGtFZ_0(v33, v32, v31, v30, v29, vcvt_f32_f64(v8));
      BOOL v11 = (LODWORD(v10) & 0x7FFFFF) != 0 && (~LODWORD(v10) & 0x7F800000) == 0;
      BOOL v12 = v10 >= 0.0 && v10 <= 1.0;
      if (!v12 || v11)
      {
LABEL_4:
        [v3 v6[444]];
        [v3 v6[444]];
      }
      else
      {
        double v13 = a1;
        a1 = v4;
        CGFloat v14 = v9.f32[0];
        CGFloat v15 = v9.f32[1];
        [v3 v6[444]];
        CGFloat v4 = (SEL *)SegmentationProcessor.normal(at:)(v14, v15);
        __n128 v16 = v6;
        unint64_t v18 = v17;
        char v20 = v19;
        float32x2_t v21 = v16;
        [v3 (SEL)v16 + 3181];
        if ((v20 & 1) == 0)
        {
          if (__OFADD__(v28, 1))
          {
            __break(1u);
            goto LABEL_25;
          }
          ++v28;
          *(float32x2_t *)v22.f32 = vadd_f32(*(float32x2_t *)v27.f32, (float32x2_t)v4);
          v22.i64[1] = vaddq_f32(v27, (float32x4_t)vdupq_n_s64(v18)).u32[2];
          float32x4_t v27 = v22;
        }
        unint64_t v6 = v21;
        CGFloat v4 = a1;
        a1 = v13;
        SEL v5 = v26;
      }
      ++v7;
    }
    while (v5 != v7);
    swift_bridgeObjectRelease();
    if (v28 < 1) {
      goto LABEL_22;
    }
    *(float *)v23.i32 = (float)v28;
    float32x2_t v24 = vdiv_f32(*(float32x2_t *)v27.f32, (float32x2_t)vdup_lane_s32(v23, 0));
  }
  else
  {
LABEL_22:
    float32x2_t v24 = 0;
  }
  [v3 v6[444]];
  return (uint64_t)v24;
}

void SegmentationProcessor.__allocating_init(sceneView:outputSize:)()
{
}

void SegmentationProcessor.init(sceneView:outputSize:)()
{
}

uint64_t sub_22F1E64F4()
{
  sub_22F1E8870(v0 + 240);

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_22F1E6A14(v0 + 656);
  return swift_release();
}

id *SegmentationProcessor.deinit()
{
  swift_bridgeObjectRelease();
  sub_22F1E8870((uint64_t)(v0 + 30));

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_22F1E6A14((uint64_t)(v0 + 82));
  swift_release();
  return v0;
}

uint64_t SegmentationProcessor.__deallocating_deinit()
{
  SegmentationProcessor.deinit();
  return swift_deallocClassInstance();
}

Swift::Bool __swiftcall SegmentationProcessor.DebugOptions.needsRendering()()
{
  return (v0 & 0x70) != 0;
}

void *SegmentationProcessor.DebugOptions.showSegmentedBackground.unsafeMutableAddressor()
{
  return &static SegmentationProcessor.DebugOptions.showSegmentedBackground;
}

void *SegmentationProcessor.DebugOptions.showNormalsBackground.unsafeMutableAddressor()
{
  return &static SegmentationProcessor.DebugOptions.showNormalsBackground;
}

void *SegmentationProcessor.DebugOptions.showSampledPoints.unsafeMutableAddressor()
{
  return &static SegmentationProcessor.DebugOptions.showSampledPoints;
}

uint64_t static SegmentationProcessor.DebugOptions.showSampledPoints.getter()
{
  return 4;
}

uint64_t static SegmentationProcessor.DebugOptions.showUnprojectedTrail.getter()
{
  return 8;
}

void *SegmentationProcessor.DebugOptions.renderSegmentedImage.unsafeMutableAddressor()
{
  return &static SegmentationProcessor.DebugOptions.renderSegmentedImage;
}

uint64_t static SegmentationProcessor.DebugOptions.renderSegmentedImage.getter()
{
  return 16;
}

uint64_t static SegmentationProcessor.DebugOptions.showSegmentedBackground.getter()
{
  return 32;
}

uint64_t static SegmentationProcessor.DebugOptions.showNormalsBackground.getter()
{
  return 64;
}

unint64_t sub_22F1E6664()
{
  unint64_t result = sub_22F185CA4((uint64_t)&unk_26E291A10);
  static SegmentationProcessor.DebugOptions.keyForFeature = result;
  return result;
}

uint64_t *SegmentationProcessor.DebugOptions.keyForFeature.unsafeMutableAddressor()
{
  if (qword_2686944A8 != -1) {
    swift_once();
  }
  return &static SegmentationProcessor.DebugOptions.keyForFeature;
}

uint64_t static SegmentationProcessor.DebugOptions.keyForFeature.getter()
{
  return sub_22F188A6C(&qword_2686944A8);
}

uint64_t sub_22F1E66FC()
{
  if (qword_2686944A8 != -1) {
    swift_once();
  }
  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = sub_22F1E6DBC(v0);
  uint64_t result = swift_bridgeObjectRelease();
  static SegmentationProcessor.DebugOptions.keys = (uint64_t)v1;
  return result;
}

uint64_t *SegmentationProcessor.DebugOptions.keys.unsafeMutableAddressor()
{
  if (qword_2686944B0 != -1) {
    swift_once();
  }
  return &static SegmentationProcessor.DebugOptions.keys;
}

uint64_t static SegmentationProcessor.DebugOptions.keys.getter()
{
  return sub_22F188A6C(&qword_2686944B0);
}

void sub_22F1E67E0()
{
  if (qword_2686944A8 != -1) {
    swift_once();
  }
  sub_22F1E2D2C(static SegmentationProcessor.DebugOptions.keyForFeature);
  static SegmentationProcessor.DebugOptions.default = v0;
}

uint64_t static SegmentationProcessor.DebugOptions.default.getter()
{
  if (qword_2686944B8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return static SegmentationProcessor.DebugOptions.default;
}

uint64_t static SegmentationProcessor.DebugOptions.default.setter(uint64_t a1)
{
  if (qword_2686944B8 != -1) {
    swift_once();
  }
  uint64_t result = swift_beginAccess();
  static SegmentationProcessor.DebugOptions.default = a1;
  return result;
}

uint64_t (*static SegmentationProcessor.DebugOptions.default.modify())()
{
  if (qword_2686944B8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_22F1E69AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_268695830);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_22F1E6A14(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_268695830);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t SegmentationProcessor.SegmentedTexture.fill(featureProvider:inputBuffer:pixelRenderer:cameraTransform:gravity:isFeatureRotated:)(uint64_t a1, CVPixelBufferRef pixelBuffer, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint32_t *, uint64_t, uint64_t, uint64_t, void), int a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, __n128 a9, __n128 a10, __n128 a11, __n128 a12, char a13)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  CVPixelBufferLockBaseAddress(pixelBuffer, 0);
  BaseAddress = (unsigned int *)CVPixelBufferGetBaseAddress(pixelBuffer);
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
  __n128 v16 = (unsigned char *)(v13 + OBJC_IVAR____TtC17MeasureFoundation14SurfaceTexture_isLocking);
  swift_beginAccess();
  if ((*v16 & 1) == 0)
  {
    seed[0] = 0;
    uint64_t result = *(void *)(v13 + OBJC_IVAR____TtC17MeasureFoundation14SurfaceTexture_ioSurface);
    if (!result)
    {
      __break(1u);
      goto LABEL_25;
    }
    IOSurfaceLock((IOSurfaceRef)result, 2u, seed);
    *__n128 v16 = 1;
  }
  unint64_t v18 = (uint64_t *)(v13 + OBJC_IVAR____TtC17MeasureFoundation14SurfaceTexture_pixelsNum);
  uint64_t result = swift_beginAccess();
  uint64_t v19 = *v18;
  if (*v18 < 0) {
    goto LABEL_23;
  }
  if (v19)
  {
    char v20 = (uint64_t *)(v13 + OBJC_IVAR____TtC17MeasureFoundation14SurfaceTexture_height);
    float32x2_t v21 = (uint64_t *)(v13 + OBJC_IVAR____TtC17MeasureFoundation14SurfaceTexture_pixel32s);
    float32x4_t v31 = (uint64_t *)(v13 + OBJC_IVAR____TtC17MeasureFoundation14SurfaceTexture_width);
    swift_beginAccess();
    swift_beginAccess();
    uint64_t result = swift_beginAccess();
    for (uint64_t i = 0; v19 != i; ++i)
    {
      uint64_t v23 = i;
      if (a13)
      {
        uint64_t v24 = *v31;
        if (!*v31)
        {
          __break(1u);
LABEL_20:
          __break(1u);
LABEL_21:
          __break(1u);
LABEL_22:
          __break(1u);
LABEL_23:
          __break(1u);
        }
        uint64_t v25 = i / v24;
        BOOL v26 = __OFSUB__(v24, i % v24);
        uint64_t v27 = v24 - i % v24;
        if (v26) {
          goto LABEL_20;
        }
        uint64_t v28 = v27 * *v20;
        if ((unsigned __int128)(v27 * (__int128)*v20) >> 64 != v28 >> 63) {
          goto LABEL_21;
        }
        uint64_t v23 = v28 + v25;
        if (__OFADD__(v28, v25)) {
          goto LABEL_22;
        }
      }
      uint64_t v29 = *v21;
      if (*v21)
      {
        uint64_t v30 = BaseAddress[i];
        *(__n128 *)seeCGFloat d = a9;
        __n128 v44 = a10;
        __n128 v45 = a11;
        __n128 v46 = a12;
        char v47 = 0;
        uint64_t result = a3(v30, a1, v23, seed, a5, a6, a7, a8 & 1);
        *(_DWORD *)(v29 + 4 * i) = result;
      }
    }
  }
  if (*v16 == 1)
  {
    uint32_t v42 = 0;
    uint64_t result = *(void *)(v13 + OBJC_IVAR____TtC17MeasureFoundation14SurfaceTexture_ioSurface);
    if (result)
    {
      uint64_t result = IOSurfaceUnlock((IOSurfaceRef)result, 2u, &v42);
      *__n128 v16 = 0;
      return result;
    }
LABEL_25:
    __break(1u);
  }
  return result;
}

__IOSurface *SegmentationProcessor.SegmentedTexture.__allocating_init(width:height:backgroundColor:)(Swift::Int a1, Swift::Int a2, int a3)
{
  id v7 = objc_allocWithZone(v3);
  return SurfaceTexture.init(width:height:backgroundColor:)(a1, a2, a3);
}

id SegmentationProcessor.SegmentedTexture.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SegmentationProcessor.SegmentedTexture();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void *sub_22F1E6DBC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_268694CC0);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  uint64_t v6 = sub_22F1E8670((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_22F196330();
  if (v6 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v3;
}

void sub_22F1E6EA4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_22F18DE28(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_22F19362C();
LABEL_7:
    unint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];

      *(void *)(v19 + 8 * v12) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_22F190E18(v15, a4 & 1);
  unint64_t v20 = sub_22F18DE28(a2, a3);
  if ((v16 & 1) != (v21 & 1))
  {
LABEL_17:
    sub_22F2247B8();
    __break(1u);
    return;
  }
  unint64_t v12 = v20;
  unint64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  float32x4_t v22 = (uint64_t *)(v18[6] + 16 * v12);
  *float32x4_t v22 = a2;
  v22[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v23 = v18[2];
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (v24)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  _OWORD v18[2] = v25;
  swift_bridgeObjectRetain();
}

uint64_t sub_22F1E7014(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_22F18DE28(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_22F1939C8();
LABEL_7:
    unint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      *(void *)(v18[7] + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_22F191428(result, a4 & 1);
  uint64_t result = sub_22F18DE28(a2, a3);
  if ((v16 & 1) != (v19 & 1))
  {
LABEL_17:
    uint64_t result = sub_22F2247B8();
    __break(1u);
    return result;
  }
  unint64_t v12 = result;
  unint64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  unint64_t v20 = (uint64_t *)(v18[6] + 16 * v12);
  *unint64_t v20 = a2;
  v20[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v21 = v18[2];
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  _OWORD v18[2] = v23;
  return swift_bridgeObjectRetain();
}

uint64_t sub_22F1E7178(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_22F18DE28(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_22F193B78();
LABEL_7:
    unint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_22F191734(v15, a4 & 1);
  unint64_t v21 = sub_22F18DE28(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_17:
    uint64_t result = sub_22F2247B8();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  unint64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  uint64_t v23 = (uint64_t *)(v18[6] + 16 * v12);
  *uint64_t v23 = a2;
  v23[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v24 = v18[2];
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (v25)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  _OWORD v18[2] = v26;
  return swift_bridgeObjectRetain();
}

unint64_t sub_22F1E72E8(long long *a1, uint64_t a2, char a3)
{
  int64_t v4 = v3;
  uint64_t v7 = *((void *)a1 + 2);
  uint64_t v8 = *((void *)a1 + 3);
  char v9 = *((unsigned char *)a1 + 32);
  long long v37 = *a1;
  long long v38 = a1[3];
  long long v39 = a1[4];
  long long v40 = a1[5];
  uint64_t v10 = *((void *)a1 + 12);
  long long v41 = a1[7];
  long long v42 = a1[8];
  int v12 = *((_DWORD *)a1 + 38);
  int v11 = *((_DWORD *)a1 + 39);
  int v13 = *((_DWORD *)a1 + 40);
  uint64_t v14 = *((void *)a1 + 21);
  uint64_t v43 = *((void *)a1 + 18);
  uint64_t v44 = *((void *)a1 + 22);
  char v63 = v9;
  uint64_t v15 = *v3;
  unint64_t v17 = sub_22F18DF9C(a2);
  uint64_t v18 = *(void *)(v15 + 16);
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
  }
  else
  {
    char v21 = v16;
    uint64_t v22 = *(void *)(v15 + 24);
    if (v22 >= v20 && (a3 & 1) != 0)
    {
LABEL_7:
      if (v21)
      {
LABEL_8:
        uint64_t v23 = *(void *)(*v4 + 56) + 192 * v17;
        long long v24 = *(_OWORD *)(v23 + 48);
        long long v26 = *(_OWORD *)v23;
        long long v25 = *(_OWORD *)(v23 + 16);
        _OWORD v45[2] = *(_OWORD *)(v23 + 32);
        v45[3] = v24;
        v45[0] = v26;
        v45[1] = v25;
        long long v27 = *(_OWORD *)(v23 + 112);
        long long v29 = *(_OWORD *)(v23 + 64);
        long long v28 = *(_OWORD *)(v23 + 80);
        v45[6] = *(_OWORD *)(v23 + 96);
        v45[7] = v27;
        void v45[4] = v29;
        v45[5] = v28;
        long long v31 = *(_OWORD *)(v23 + 144);
        long long v30 = *(_OWORD *)(v23 + 160);
        long long v32 = *(_OWORD *)(v23 + 128);
        uint64_t v46 = *(void *)(v23 + 176);
        v45[9] = v31;
        v45[10] = v30;
        v45[8] = v32;
        unint64_t result = sub_22F1C66E0((uint64_t)v45);
        *(_OWORD *)uint64_t v23 = v37;
        *(void *)(v23 + 16) = v7;
        *(void *)(v23 + 24) = v8;
        *(unsigned char *)(v23 + 32) = v63;
        *(_OWORD *)(v23 + 48) = v38;
        *(_OWORD *)(v23 + 64) = v39;
        *(_OWORD *)(v23 + 80) = v40;
        *(void *)(v23 + 96) = v10;
        *(_OWORD *)(v23 + 112) = v41;
        *(_OWORD *)(v23 + 128) = v42;
        *(void *)(v23 + 144) = v43;
        *(_DWORD *)(v23 + 152) = v12;
        *(_DWORD *)(v23 + 156) = v11;
        *(_DWORD *)(v23 + 160) = v13;
        *(void *)(v23 + 168) = v14;
        *(void *)(v23 + 176) = v44;
        return result;
      }
      goto LABEL_11;
    }
    if (v22 >= v20 && (a3 & 1) == 0)
    {
      sub_22F193FC8();
      goto LABEL_7;
    }
    sub_22F191E70(v20, a3 & 1);
    unint64_t v34 = sub_22F18DF9C(a2);
    if ((v21 & 1) == (v35 & 1))
    {
      unint64_t v17 = v34;
      if (v21) {
        goto LABEL_8;
      }
LABEL_11:
      CGPoint v36 = (void *)*v4;
      long long v47 = v37;
      uint64_t v48 = v7;
      uint64_t v49 = v8;
      char v50 = v9;
      long long v51 = v38;
      long long v52 = v39;
      long long v53 = v40;
      uint64_t v54 = v10;
      long long v55 = v41;
      long long v56 = v42;
      uint64_t v57 = v43;
      int v58 = v12;
      int v59 = v11;
      int v60 = v13;
      uint64_t v61 = v14;
      uint64_t v62 = v44;
      return sub_22F1E80EC(v17, a2, (uint64_t)&v47, v36);
    }
  }
  unint64_t result = sub_22F2247B8();
  __break(1u);
  return result;
}

uint64_t sub_22F1E7538(unsigned __int8 a1, char a2, float a3)
{
  int64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_22F18DDBC(a1);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a2 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a2 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_22F1941F0();
LABEL_7:
    char v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      *(float *)(v16[7] + 4 * v10) = a3;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(unsigned char *)(v16[6] + v10) = a1;
    *(float *)(v16[7] + 4 * v10) = a3;
    uint64_t v18 = v16[2];
    BOOL v19 = __OFADD__(v18, 1);
    uint64_t v20 = v18 + 1;
    if (!v19)
    {
      id v16[2] = v20;
      return result;
    }
    goto LABEL_14;
  }
  sub_22F192210(result, a2 & 1);
  uint64_t result = sub_22F18DDBC(a1);
  if ((v14 & 1) == (v17 & 1))
  {
    unint64_t v10 = result;
    char v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = sub_22F2247B8();
  __break(1u);
  return result;
}

id sub_22F1E7660(uint64_t a1, void *a2, char a3)
{
  int64_t v4 = (void **)v3;
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  int v9 = *(_DWORD *)(a1 + 24);
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v26 = *(void *)(a1 + 48);
  int v12 = *(_DWORD *)(a1 + 56);
  int v13 = (void *)*v3;
  unint64_t v15 = sub_22F18DFE0((uint64_t)a2);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a3 & 1) != 0)
  {
LABEL_7:
    char v21 = *v4;
    if (v19)
    {
LABEL_8:
      unint64_t v22 = v21[7] + (v15 << 6);
      swift_bridgeObjectRelease();
      id result = (id)swift_bridgeObjectRelease();
      *(void *)unint64_t v22 = v6;
      *(void *)(v22 + 8) = v7;
      *(void *)(v22 + 16) = v8;
      *(_DWORD *)(v22 + 24) = v9;
      *(void *)(v22 + 32) = v11;
      *(void *)(v22 + 40) = v10;
      *(void *)(v22 + 48) = v26;
      *(_DWORD *)(v22 + 56) = v12;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a3 & 1) == 0)
  {
    sub_22F194380();
    goto LABEL_7;
  }
  sub_22F1924DC(v18, a3 & 1);
  unint64_t v24 = sub_22F18DFE0((uint64_t)a2);
  if ((v19 & 1) != (v25 & 1))
  {
LABEL_15:
    sub_22F1A321C(0, (unint64_t *)&qword_268694C40);
    id result = (id)sub_22F2247B8();
    __break(1u);
    return result;
  }
  unint64_t v15 = v24;
  char v21 = *v4;
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:
  v28[0] = v6;
  v28[1] = v7;
  float32x4_t v28[2] = v8;
  int v29 = v9;
  uint64_t v30 = v11;
  uint64_t v31 = v10;
  uint64_t v32 = v26;
  int v33 = v12;
  sub_22F1E8194(v15, (uint64_t)a2, v28, v21);
  return a2;
}

uint64_t sub_22F1E7814(uint64_t a1, unsigned __int8 a2, char a3)
{
  int64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_22F18DDBC(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_22F194570();
LABEL_7:
    uint64_t v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(unsigned char *)(v16[6] + v10) = a2;
    *(void *)(v16[7] + 8 * v10) = a1;
    uint64_t v19 = v16[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (!v20)
    {
      id v16[2] = v21;
      return result;
    }
    goto LABEL_14;
  }
  sub_22F192808(result, a3 & 1);
  uint64_t result = sub_22F18DDBC(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    unint64_t v10 = result;
    uint64_t v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = sub_22F2247B8();
  __break(1u);
  return result;
}

uint64_t sub_22F1E794C(char a1, uint64_t a2, char a3, float a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = sub_22F223848();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  int v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v14 = (void *)*v4;
  unint64_t v16 = sub_22F18DD24(a2);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t result = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
  }
  else
  {
    char v20 = v15;
    uint64_t v21 = v14[3];
    if (v21 >= result && (a3 & 1) != 0)
    {
LABEL_7:
      unint64_t v22 = *v5;
      if (v20)
      {
LABEL_8:
        uint64_t v23 = v22[7] + 8 * v16;
        *(unsigned char *)uint64_t v23 = a1;
        *(float *)(v23 + 4) = a4;
        return result;
      }
      goto LABEL_11;
    }
    if (v21 >= result && (a3 & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_22F194714();
      goto LABEL_7;
    }
    sub_22F192ADC(result, a3 & 1);
    uint64_t result = sub_22F18DD24(a2);
    if ((v20 & 1) == (v24 & 1))
    {
      unint64_t v16 = result;
      unint64_t v22 = *v5;
      if (v20) {
        goto LABEL_8;
      }
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
      return sub_22F1E824C(v16, (uint64_t)v13, a1, v22, a4);
    }
  }
  uint64_t result = sub_22F2247B8();
  __break(1u);
  return result;
}

unint64_t sub_22F1E7B00(uint64_t a1, char a2, double a3)
{
  int64_t v4 = v3;
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 16);
  long long v28 = *(_OWORD *)(a1 + 32);
  long long v29 = *(_OWORD *)(a1 + 48);
  long long v30 = *(_OWORD *)(a1 + 64);
  long long v31 = *(_OWORD *)(a1 + 80);
  long long v32 = *(_OWORD *)(a1 + 96);
  long long v33 = *(_OWORD *)(a1 + 112);
  long long v34 = *(_OWORD *)(a1 + 128);
  long long v35 = *(_OWORD *)(a1 + 144);
  long long v36 = *(_OWORD *)(a1 + 160);
  long long v37 = *(_OWORD *)(a1 + 176);
  long long v38 = *(_OWORD *)(a1 + 192);
  long long v39 = *(_OWORD *)(a1 + 208);
  long long v40 = *(_OWORD *)(a1 + 224);
  long long v41 = *(_OWORD *)(a1 + 240);
  long long v42 = *(_OWORD *)(a1 + 256);
  long long v43 = *(_OWORD *)(a1 + 272);
  uint64_t v10 = *(void *)(a1 + 288);
  uint64_t v9 = *(void *)(a1 + 296);
  uint64_t v12 = *(void *)(a1 + 304);
  uint64_t v11 = *(void *)(a1 + 312);
  long long v44 = *(_OWORD *)(a1 + 320);
  long long v45 = *(_OWORD *)(a1 + 336);
  long long v46 = *(_OWORD *)(a1 + 352);
  long long v47 = *(_OWORD *)(a1 + 368);
  int v13 = *(_DWORD *)(a1 + 384);
  int v14 = *(_DWORD *)(a1 + 388);
  long long v48 = *(_OWORD *)(a1 + 400);
  long long v49 = *(_OWORD *)(a1 + 416);
  long long v51 = *(_OWORD *)(a1 + 432);
  long long v52 = *(_OWORD *)(a1 + 448);
  uint64_t v15 = *v3;
  long long v50 = *(_OWORD *)(a1 + 464);
  long long v53 = *(_OWORD *)(a1 + 480);
  unint64_t v17 = sub_22F18DF54(a3);
  uint64_t v18 = *(void *)(v15 + 16);
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
  }
  else
  {
    char v21 = v16;
    uint64_t v22 = *(void *)(v15 + 24);
    if (v22 >= v20 && (a2 & 1) != 0)
    {
LABEL_7:
      if (v21)
      {
LABEL_8:
        uint64_t v23 = (uint64_t *)(*(void *)(*v4 + 56) + 496 * v17);
        memcpy(__dst, v23, sizeof(__dst));
        unint64_t result = sub_22F1AD2DC((uint64_t)__dst);
        id v23[2] = v8;
        *uint64_t v23 = v7;
        *((_OWORD *)v23 + 2) = v28;
        *((_OWORD *)v23 + 3) = v29;
        *((_OWORD *)v23 + 4) = v30;
        *((_OWORD *)v23 + 5) = v31;
        *((_OWORD *)v23 + 6) = v32;
        *((_OWORD *)v23 + 7) = v33;
        *((_OWORD *)v23 + 8) = v34;
        *((_OWORD *)v23 + 9) = v35;
        *((_OWORD *)v23 + 10) = v36;
        *((_OWORD *)v23 + 11) = v37;
        *((_OWORD *)v23 + 12) = v38;
        *((_OWORD *)v23 + 13) = v39;
        *((_OWORD *)v23 + 14) = v40;
        *((_OWORD *)v23 + 15) = v41;
        *((_OWORD *)v23 + 16) = v42;
        *((_OWORD *)v23 + 17) = v43;
        v23[36] = v10;
        v23[37] = v9;
        v23[38] = v12;
        v23[39] = v11;
        *((_OWORD *)v23 + 20) = v44;
        *((_OWORD *)v23 + 21) = v45;
        *((_OWORD *)v23 + 22) = v46;
        *((_OWORD *)v23 + 23) = v47;
        *((_DWORD *)v23 + 96) = v13;
        *((_DWORD *)v23 + 97) = v14;
        *((_OWORD *)v23 + 25) = v48;
        *((_OWORD *)v23 + 26) = v49;
        *((_OWORD *)v23 + 27) = v51;
        *((_OWORD *)v23 + 28) = v52;
        *((_OWORD *)v23 + 29) = v50;
        *((_OWORD *)v23 + 30) = v53;
        return result;
      }
      goto LABEL_11;
    }
    if (v22 >= v20 && (a2 & 1) == 0)
    {
      sub_22F1949C0();
      goto LABEL_7;
    }
    sub_22F192F18(v20, a2 & 1);
    unint64_t v25 = sub_22F18DF54(a3);
    if ((v21 & 1) == (v26 & 1))
    {
      unint64_t v17 = v25;
      if (v21) {
        goto LABEL_8;
      }
LABEL_11:
      _OWORD v55[2] = v8;
      long long v27 = (void *)*v4;
      v55[0] = v7;
      long long v56 = v28;
      long long v57 = v29;
      long long v58 = v30;
      long long v59 = v31;
      long long v60 = v32;
      long long v61 = v33;
      long long v62 = v34;
      long long v63 = v35;
      long long v64 = v36;
      long long v65 = v37;
      long long v66 = v38;
      long long v67 = v39;
      long long v68 = v40;
      long long v69 = v41;
      long long v70 = v42;
      long long v71 = v43;
      uint64_t v72 = v10;
      uint64_t v73 = v9;
      uint64_t v74 = v12;
      uint64_t v75 = v11;
      long long v76 = v44;
      long long v77 = v45;
      long long v78 = v46;
      long long v79 = v47;
      int v80 = v13;
      int v81 = v14;
      long long v82 = v48;
      long long v83 = v49;
      long long v84 = v51;
      long long v85 = v52;
      long long v86 = v50;
      long long v87 = v53;
      return sub_22F1E8318(v17, v55, v27, a3);
    }
  }
  unint64_t result = sub_22F2247B8();
  __break(1u);
  return result;
}

uint64_t sub_22F1E7E8C(uint64_t a1, uint64_t a2, char a3)
{
  int64_t v4 = (void **)v3;
  uint64_t v8 = sub_22F223848();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_22F18DD24(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_22F193D30();
    goto LABEL_7;
  }
  sub_22F191A4C(v17, a3 & 1);
  unint64_t v23 = sub_22F18DD24(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    uint64_t result = sub_22F2247B8();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  uint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_22F1E8034(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_22F1E8034(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = sub_22F223848();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

unint64_t sub_22F1E80EC(unint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  char v4 = *(unsigned char *)(a3 + 32);
  long long v5 = *(_OWORD *)(a3 + 48);
  long long v6 = *(_OWORD *)(a3 + 64);
  long long v7 = *(_OWORD *)(a3 + 80);
  uint64_t v8 = *(void *)(a3 + 96);
  long long v9 = *(_OWORD *)(a3 + 112);
  long long v10 = *(_OWORD *)(a3 + 128);
  uint64_t v11 = *(void *)(a3 + 144);
  int v12 = *(_DWORD *)(a3 + 160);
  uint64_t v13 = *(void *)(a3 + 168);
  uint64_t v14 = *(void *)(a3 + 176);
  a4[(result >> 6) + 8] |= 1 << result;
  *(void *)(a4[6] + 8 * result) = a2;
  uint64_t v15 = a4[7] + 192 * result;
  long long v16 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)uint64_t v15 = *(_OWORD *)a3;
  *(_OWORD *)(v15 + 16) = v16;
  *(unsigned char *)(v15 + 32) = v4;
  *(_OWORD *)(v15 + 48) = v5;
  *(_OWORD *)(v15 + 64) = v6;
  *(_OWORD *)(v15 + 80) = v7;
  *(void *)(v15 + 96) = v8;
  *(_OWORD *)(v15 + 112) = v9;
  *(_OWORD *)(v15 + 128) = v10;
  *(void *)(v15 + 144) = v11;
  *(void *)(v15 + 152) = *(void *)(a3 + 152);
  *(_DWORD *)(v15 + 160) = v12;
  *(void *)(v15 + 168) = v13;
  *(void *)(v15 + 176) = v14;
  uint64_t v17 = a4[2];
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (v18) {
    __break(1u);
  }
  else {
    a4[2] = v19;
  }
  return result;
}

unint64_t sub_22F1E8194(unint64_t result, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v4 = *a3;
  int v5 = *((_DWORD *)a3 + 6);
  uint64_t v6 = a3[4];
  int v7 = *((_DWORD *)a3 + 14);
  a4[(result >> 6) + 8] |= 1 << result;
  *(void *)(a4[6] + 8 * result) = a2;
  uint64_t v8 = a4[7] + (result << 6);
  *(void *)uint64_t v8 = v4;
  *(_OWORD *)(v8 + 8) = *(_OWORD *)(a3 + 1);
  *(_DWORD *)(v8 + 24) = v5;
  *(void *)(v8 + 32) = v6;
  *(_OWORD *)(v8 + 40) = *(_OWORD *)(a3 + 5);
  *(_DWORD *)(v8 + 56) = v7;
  uint64_t v9 = a4[2];
  BOOL v10 = __OFADD__(v9, 1);
  uint64_t v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    a4[2] = v11;
  }
  return result;
}

unint64_t sub_22F1E8208(unint64_t result, char a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  *(unsigned char *)(a4[6] + result) = a2;
  *(void *)(a4[7] + 8 * result) = a3;
  uint64_t v4 = a4[2];
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2] = v6;
  }
  return result;
}

uint64_t sub_22F1E824C(unint64_t a1, uint64_t a2, char a3, void *a4, float a5)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v10 = a4[6];
  uint64_t v11 = sub_22F223848();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a2, v11);
  uint64_t v13 = a4[7] + 8 * a1;
  *(unsigned char *)uint64_t v13 = a3;
  *(float *)(v13 + 4) = a5;
  uint64_t v14 = a4[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a4[2] = v16;
  }
  return result;
}

unint64_t sub_22F1E8318(unint64_t result, uint64_t *a2, void *a3, double a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[2];
  long long v6 = *((_OWORD *)a2 + 2);
  long long v7 = *((_OWORD *)a2 + 3);
  long long v8 = *((_OWORD *)a2 + 4);
  long long v9 = *((_OWORD *)a2 + 5);
  long long v10 = *((_OWORD *)a2 + 6);
  long long v11 = *((_OWORD *)a2 + 7);
  long long v12 = *((_OWORD *)a2 + 8);
  long long v13 = *((_OWORD *)a2 + 9);
  long long v14 = *((_OWORD *)a2 + 10);
  long long v15 = *((_OWORD *)a2 + 11);
  long long v16 = *((_OWORD *)a2 + 12);
  long long v17 = *((_OWORD *)a2 + 13);
  long long v18 = *((_OWORD *)a2 + 14);
  long long v19 = *((_OWORD *)a2 + 15);
  long long v20 = *((_OWORD *)a2 + 16);
  long long v21 = *((_OWORD *)a2 + 17);
  long long v22 = *((_OWORD *)a2 + 20);
  long long v23 = *((_OWORD *)a2 + 21);
  long long v24 = *((_OWORD *)a2 + 22);
  long long v25 = *((_OWORD *)a2 + 23);
  long long v26 = *((_OWORD *)a2 + 25);
  long long v27 = *((_OWORD *)a2 + 26);
  long long v28 = *((_OWORD *)a2 + 27);
  long long v29 = *((_OWORD *)a2 + 28);
  long long v30 = *((_OWORD *)a2 + 29);
  long long v31 = *((_OWORD *)a2 + 30);
  a3[(result >> 6) + 8] |= 1 << result;
  *(double *)(a3[6] + 8 * result) = a4;
  uint64_t v32 = a3[7] + 496 * result;
  *(void *)uint64_t v32 = v4;
  *(void *)(v32 + 16) = v5;
  *(_OWORD *)(v32 + 32) = v6;
  *(_OWORD *)(v32 + 48) = v7;
  *(_OWORD *)(v32 + 64) = v8;
  *(_OWORD *)(v32 + 80) = v9;
  *(_OWORD *)(v32 + 96) = v10;
  *(_OWORD *)(v32 + 112) = v11;
  *(_OWORD *)(v32 + 128) = v12;
  *(_OWORD *)(v32 + 144) = v13;
  *(_OWORD *)(v32 + 160) = v14;
  *(_OWORD *)(v32 + 176) = v15;
  *(_OWORD *)(v32 + 192) = v16;
  *(_OWORD *)(v32 + 208) = v17;
  *(_OWORD *)(v32 + 224) = v18;
  *(_OWORD *)(v32 + 240) = v19;
  *(_OWORD *)(v32 + 256) = v20;
  *(_OWORD *)(v32 + 272) = v21;
  long long v33 = *((_OWORD *)a2 + 19);
  *(_OWORD *)(v32 + 288) = *((_OWORD *)a2 + 18);
  *(_OWORD *)(v32 + 304) = v33;
  *(_OWORD *)(v32 + 320) = v22;
  *(_OWORD *)(v32 + 336) = v23;
  *(_OWORD *)(v32 + 352) = v24;
  *(_OWORD *)(v32 + 368) = v25;
  *(void *)(v32 + 384) = a2[48];
  *(_OWORD *)(v32 + 400) = v26;
  *(_OWORD *)(v32 + 416) = v27;
  *(_OWORD *)(v32 + 432) = v28;
  *(_OWORD *)(v32 + 448) = v29;
  *(_OWORD *)(v32 + 464) = v30;
  *(_OWORD *)(v32 + 480) = v31;
  uint64_t v34 = a3[2];
  BOOL v35 = __OFADD__(v34, 1);
  uint64_t v36 = v34 + 1;
  if (v35) {
    __break(1u);
  }
  else {
    a3[2] = v36;
  }
  return result;
}

uint64_t sub_22F1E83F8(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_22F223848();
  MEMORY[0x270FA5388](v10);
  long long v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *a1;
  if (v14)
  {
    long long v15 = (void *)*a3;
    if (a2)
    {
      *(void *)(v15[7] + 8 * a4) = v14;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v11 + 16))(v13, a5);
      sub_22F1E8034(a4, (uint64_t)v13, v14, v15);
    }
  }
  else if (a2)
  {
    swift_arrayDestroy();
    sub_22F195010(a4, *a3);
  }
  return swift_bridgeObjectRetain();
}

uint64_t sub_22F1E8530(uint64_t a1, char a2, uint64_t *a3, unint64_t a4, void *a5)
{
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v13 = *(void *)(a1 + 48);
  int v14 = *(_DWORD *)(a1 + 56);
  if (*(void *)a1)
  {
    long long v15 = (void *)*a3;
    if (a2)
    {
      unint64_t v16 = v15[7] + (a4 << 6);
      *(void *)unint64_t v16 = v7;
      *(void *)(v16 + 8) = v8;
      *(void *)(v16 + 16) = v10;
      *(_DWORD *)(v16 + 24) = v9;
      *(void *)(v16 + 32) = v11;
      *(void *)(v16 + 40) = v12;
      *(void *)(v16 + 48) = v13;
      *(_DWORD *)(v16 + 56) = v14;
    }
    else
    {
      v21[0] = *(void *)a1;
      v21[1] = v8;
      _DWORD v21[2] = v10;
      int v22 = v9;
      uint64_t v23 = v11;
      uint64_t v24 = v12;
      uint64_t v25 = v13;
      int v26 = v14;
      sub_22F1E8194(a4, (uint64_t)a5, v21, v15);
      id v19 = a5;
    }
  }
  else if (a2)
  {
    sub_22F1A321C(0, (unint64_t *)&qword_268694C40);
    swift_arrayDestroy();
    sub_22F1954B8(a4, *a3);
  }
  return sub_22F1E8A90(v7);
}

uint64_t sub_22F1E8670(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    double v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    long long v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_22F1E8870(uint64_t a1)
{
  return a1;
}

uint64_t type metadata accessor for SegmentationProcessor.SegmentedTexture()
{
  return self;
}

unint64_t sub_22F1E88C0()
{
  unint64_t result = qword_268695838;
  if (!qword_268695838)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268695838);
  }
  return result;
}

unint64_t sub_22F1E8918()
{
  unint64_t result = qword_268695840;
  if (!qword_268695840)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268695840);
  }
  return result;
}

unint64_t sub_22F1E8970()
{
  unint64_t result = qword_268695848;
  if (!qword_268695848)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268695848);
  }
  return result;
}

unint64_t sub_22F1E89C8()
{
  unint64_t result = qword_268695850;
  if (!qword_268695850)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268695850);
  }
  return result;
}

uint64_t type metadata accessor for SegmentationProcessor()
{
  return self;
}

ValueMetadata *type metadata accessor for SegmentationProcessor.DebugOptions()
{
  return &type metadata for SegmentationProcessor.DebugOptions;
}

uint64_t sub_22F1E8A50(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_22F1E8A90(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_22F1E8AD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_268695830);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t RangeReplaceableCollection<>.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (a1 < 0 || (sub_22F223F48(), v11[0] <= a1))
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(a2, 1, 1, AssociatedTypeWitness);
  }
  else
  {
    v11[4] = a1;
    uint64_t v4 = (void (*)(void *, void))sub_22F223FD8();
    uint64_t v6 = v5;
    uint64_t v7 = swift_getAssociatedTypeWitness();
    uint64_t v8 = *(void *)(v7 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(a2, v6, v7);
    v4(v11, 0);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(a2, 0, 1, v7);
  }
}

BOOL RangeReplaceableCollection<>.isNotEmpty.getter()
{
  return (sub_22F223F38() & 1) == 0;
}

uint64_t RangeReplaceableCollection<>.offsetting(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)v16 - v12;
  uint64_t result = sub_22F223F28();
  if (result)
  {
    if (a1 != 0x8000000000000000 || result != -1)
    {
      uint64_t v15 = a1 % result;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, v3, a2);
      v16[1] = v15;
      __swift_instantiateConcreteTypeFromMangledName(&qword_268695858);
      sub_22F1E8F10();
      sub_22F223FA8();
      sub_22F223FF8();
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, AssociatedTypeWitness);
      swift_getAssociatedConformanceWitness();
      sub_22F224008();
      return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, AssociatedTypeWitness);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_22F1E8F10()
{
  unint64_t result = qword_268695860;
  if (!qword_268695860)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_268695858);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268695860);
  }
  return result;
}

uint64_t RangeReplaceableCollection<>.dequeueFirst()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v14 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v4 = (char *)&v13 - v3;
  uint64_t v5 = sub_22F2241F8();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v13 - v7;
  sub_22F223F88();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v8, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v9 = 1;
    uint64_t v10 = v14;
  }
  else
  {
    uint64_t v11 = v14;
    (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v14, v8, AssociatedTypeWitness);
    sub_22F223FE8();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, AssociatedTypeWitness);
    uint64_t v9 = 0;
    uint64_t v10 = v11;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56))(v10, v9, 1, AssociatedTypeWitness);
}

uint64_t RangeReplaceableCollection<>.sum()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v9 = &v11[-v8];
  sub_22F224578();
  uint64_t v12 = a1;
  uint64_t v13 = a2;
  uint64_t v14 = a3;
  uint64_t v15 = AssociatedTypeWitness;
  sub_22F223C58();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
}

uint64_t sub_22F1E92E4()
{
  return sub_22F224558();
}

uint64_t RangeReplaceableCollection<>.removeFirst(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  void v16[2] = a1;
  uint64_t v17 = a3;
  v16[1] = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = sub_22F2241F8();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)v16 - v7;
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v11 = (char *)v16 - v10;
  sub_22F223FB8();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    uint64_t v12 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v17, 1, 1, v12);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v8, AssociatedTypeWitness);
    uint64_t v14 = v17;
    sub_22F224018();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
    uint64_t v15 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 0, 1, v15);
  }
}

uint64_t RangeReplaceableCollection<>.remove(allFrom:)()
{
  return sub_22F223C68();
}

uint64_t sub_22F1E96C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_22F2241F8();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v11 - v8;
  RangeReplaceableCollection<>.removeFirst(_:)(a1, a4, (uint64_t)v11 - v8);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_22F1E97EC(uint64_t a1)
{
  return sub_22F1E96C4(a1, v1[5], v1[2], v1[3]);
}

uint64_t RangeReplaceableCollection<>.removingFirst(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v28 = a4;
  uint64_t v29 = a1;
  uint64_t v30 = a5;
  uint64_t v26 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v24 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v25 = AssociatedTypeWitness;
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v23 = (char *)&v23 - v7;
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v9 = sub_22F2241F8();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v23 - v12;
  uint64_t v14 = *(void *)(v8 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v11);
  uint64_t v17 = (char *)&v23 - v16;
  uint64_t v18 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v15);
  long long v20 = (char *)&v23 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, v27, a2);
  sub_22F223FB8();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, v8) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v17, v13, v8);
    uint64_t v21 = v23;
    sub_22F224018();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v21, v25);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v8);
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v18 + 32))(v30, v20, a2);
}

uint64_t Array.init(_:count:)()
{
  return sub_22F223DF8();
}

id KernelHeightMap.__allocating_init(device:)(uint64_t a1)
{
  id v2 = objc_msgSend(objc_allocWithZone(v1), sel_initWithDevice_, a1);
  swift_unknownObjectRelease();
  return v2;
}

id KernelHeightMap.init(device:)(void *a1)
{
  id v1 = sub_22F1EA06C(a1);
  swift_unknownObjectRelease();
  return v1;
}

BOOL KernelHeightMap.encode(commandBuffer:uniforms:depthTexture:confidenceTexture:colorTexture:inMapTexture:outMapTexture:)(void *a1, _OWORD *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v14 = objc_msgSend(a1, sel_computeCommandEncoder);
  if (v14)
  {
    uint64_t v27 = (uint64_t)objc_msgSend(a3, sel_width) / 32;
    uint64_t v26 = (uint64_t)objc_msgSend(a3, sel_height) / 32;
    uint64_t v15 = *(void **)(v7 + OBJC_IVAR____TtC17MeasureFoundation15KernelHeightMap_uniformsBuffer);
    uint64_t v16 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    id v17 = v15;
    long long v18 = a2[13];
    v16[12] = a2[12];
    v16[13] = v18;
    v16[14] = a2[14];
    long long v19 = a2[9];
    v16[8] = a2[8];
    v16[9] = v19;
    long long v20 = a2[11];
    v16[10] = a2[10];
    v16[11] = v20;
    long long v21 = a2[5];
    void v16[4] = a2[4];
    v16[5] = v21;
    long long v22 = a2[7];
    v16[6] = a2[6];
    v16[7] = v22;
    long long v23 = a2[1];
    *uint64_t v16 = *a2;
    v16[1] = v23;
    long long v24 = a2[3];
    void v16[2] = a2[2];
    void v16[3] = v24;
    objc_msgSend(v14, sel_setComputePipelineState_, *(void *)(v7 + OBJC_IVAR____TtC17MeasureFoundation15KernelHeightMap_computePipeline));
    objc_msgSend(v14, sel_setBuffer_offset_atIndex_, v17, 0, 0);
    objc_msgSend(v14, sel_setTexture_atIndex_, a3, 0);
    objc_msgSend(v14, sel_setTexture_atIndex_, a4, 1);
    objc_msgSend(v14, sel_setTexture_atIndex_, a5, 2);
    objc_msgSend(v14, sel_setTexture_atIndex_, a6, 3);
    objc_msgSend(v14, sel_setTexture_atIndex_, a7, 4);
    v30[0] = v27;
    v30[1] = v26;
    _DWORD v30[2] = 1;
    int64x2_t v28 = vdupq_n_s64(0x20uLL);
    uint64_t v29 = 1;
    objc_msgSend(v14, sel_dispatchThreadgroups_threadsPerThreadgroup_, v30, &v28);
    objc_msgSend(v14, sel_endEncoding);
    swift_unknownObjectRelease();
  }
  return v14 != 0;
}

id KernelHeightMap.__allocating_init(coder:device:)(void *a1, uint64_t a2)
{
  id v4 = objc_msgSend(objc_allocWithZone(v2), sel_initWithCoder_device_, a1, a2);

  swift_unknownObjectRelease();
  return v4;
}

void KernelHeightMap.init(coder:device:)()
{
}

id KernelHeightMap.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id sub_22F1EA06C(void *a1)
{
  objc_super v2 = v1;
  v17[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v5 = qword_268694380;
  uint64_t v6 = v2;
  if (v5 != -1) {
    swift_once();
  }
  uint64_t v7 = (void *)static MetalBundle.library;
  uint64_t v8 = (void *)sub_22F223A98();
  id v9 = objc_msgSend(v7, sel_newFunctionWithName_, v8);

  if (!v9)
  {
    __break(1u);
    goto LABEL_8;
  }
  v17[0] = 0;
  id v10 = objc_msgSend(a1, sel_newComputePipelineStateWithFunction_error_, v9, v17);
  swift_unknownObjectRelease();
  id v11 = v17[0];
  if (v10)
  {
    *(void *)&v6[OBJC_IVAR____TtC17MeasureFoundation15KernelHeightMap_computePipeline] = v10;
    id v12 = v11;
    id v13 = objc_msgSend(a1, sel_newBufferWithLength_options_, 240, 0);
    if (v13)
    {
      *(void *)&v6[OBJC_IVAR____TtC17MeasureFoundation15KernelHeightMap_uniformsBuffer] = v13;

      v16.receiver = v6;
      v16.super_class = ObjectType;
      return objc_msgSendSuper2(&v16, sel_initWithDevice_, a1);
    }
LABEL_8:
    __break(1u);
  }
  id v15 = v17[0];
  sub_22F2236F8();

  swift_willThrow();
  id result = (id)swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for KernelHeightMap()
{
  return self;
}

long long *SegmentationResult.outputSize.unsafeMutableAddressor()
{
  if (qword_2686944C0 != -1) {
    swift_once();
  }
  return &static SegmentationResult.outputSize;
}

Swift::Float __swiftcall SegmentationResult.confidence(at:)(Swift::tuple_x_Int_y_Int at)
{
  if (at.x < 0 || (Swift::Int v2 = *(void *)(v1 + 72), v2 <= at.x) || at.y < 0 || *(void *)(v1 + 80) <= at.y)
  {
    LODWORD(v6) = 0;
    return *(Swift::Float *)&v6;
  }
  Swift::Int v3 = at.y * v2;
  if ((unsigned __int128)(at.y * (__int128)v2) >> 64 != (at.y * v2) >> 63)
  {
    __break(1u);
    goto LABEL_10;
  }
  BOOL v4 = __OFADD__(v3, at.x);
  uint64_t v5 = v3 + at.x;
  if (v4)
  {
LABEL_10:
    __break(1u);
    return *(Swift::Float *)&v6;
  }
  double v6 = sub_22F1EAC54(v5);
  return *(Swift::Float *)&v6;
}

unint64_t SegmentationResult.normal(at:)(uint64_t a1, uint64_t a2, double a3, double a4, double a5, __n128 a6)
{
  if (a1 < 0) {
    return 0;
  }
  unint64_t result = 0;
  uint64_t v9 = v6[9];
  if (v9 > a1 && (a2 & 0x8000000000000000) == 0)
  {
    if (v6[10] <= a2) {
      return 0;
    }
    uint64_t v10 = a2 * v9;
    if ((unsigned __int128)(a2 * (__int128)v9) >> 64 == (a2 * v9) >> 63)
    {
      BOOL v11 = __OFADD__(v10, a1);
      uint64_t v12 = v10 + a1;
      if (!v11)
      {
        a6 = *(__n128 *)(v6[8] + 16 * v12);
        if (qword_2686943C0 == -1)
        {
LABEL_8:
          uint64_t v13 = 0;
          a6.n128_u32[3] = 0;
          while (1)
          {
            __n128 v18 = a6;
            float v15 = *(float *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFF3 | (4 * (v13 & 3)));
            long long v19 = static SIMD3<>.zero;
            float v16 = *(float *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | (4 * (v13 & 3)));
            BOOL v14 = v15 == v16;
            if (v13 == 2) {
              break;
            }
            while (1)
            {
              ++v13;
              if (v14) {
                break;
              }
              if (v13 == 2) {
                return a6.n128_u64[0];
              }
              BOOL v14 = 0;
            }
          }
          if (v15 != v16) {
            return a6.n128_u64[0];
          }
          return 0;
        }
LABEL_15:
        __n128 v17 = a6;
        swift_once();
        a6 = v17;
        goto LABEL_8;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_15;
  }
  return result;
}

double static SegmentationResult.realign(vector:sinAngle:cosAngle:)(int32x2_t a1, float a2, float a3)
{
  float32x2_t v3 = vmul_n_f32((float32x2_t)vrev64_s32(a1), a2);
  float32x2_t v4 = vmul_n_f32((float32x2_t)a1, a3);
  LODWORD(v5) = vsub_f32(v4, v3).u32[0];
  HIDWORD(v5) = vadd_f32(v4, v3).i32[1];
  return v5;
}

double static SegmentationResult.cameraToWorld(vector:cameraTransform:)(float32x4_t a1, float32x2_t a2, float32x2_t a3, float32x2_t a4, float32x4_t a5)
{
  *(float32x2_t *)v5.f32 = simd_float4x4.apply(to:)(a1, a2, a3, a4, *(float32x2_t *)a5.f32);
  *(void *)&double result = vsubq_f32(v5, a5).u64[0];
  return result;
}

CVBufferRef_optional *SegmentationResult.__allocating_init(_:)(void *a1)
{
  return SegmentationResult.init(_:)(a1);
}

uint64_t (**SegmentationResult.debugNormalRenderer.unsafeMutableAddressor())()
{
  return &static SegmentationResult.debugNormalRenderer;
}

uint64_t (**SegmentationResult.debugSegRenderer.unsafeMutableAddressor())()
{
  return &static SegmentationResult.debugSegRenderer;
}

void *SegmentationResult.isInLandscape.unsafeMutableAddressor()
{
  return &static SegmentationResult.isInLandscape;
}

MeasureFoundation::SegmentationResult::Label_optional __swiftcall SegmentationResult.label(at:)(Swift::tuple_x_Int_y_Int at)
{
  char v2 = 0;
  if (at.x < 0) {
    goto LABEL_14;
  }
  Swift::Int v3 = v1[9];
  if (v3 <= at.x || at.y < 0) {
    goto LABEL_14;
  }
  if (v1[10] <= at.y) {
    goto LABEL_13;
  }
  Swift::Int v4 = at.y * v3;
  if ((unsigned __int128)(at.y * (__int128)v3) >> 64 != (at.y * v3) >> 63)
  {
    __break(1u);
    goto LABEL_16;
  }
  BOOL v5 = __OFADD__(v4, at.x);
  Swift::Int v6 = v4 + at.x;
  if (v5)
  {
LABEL_16:
    __break(1u);
    return (MeasureFoundation::SegmentationResult::Label_optional)at.x;
  }
  uint64_t v7 = *(unsigned __int8 *)(v1[6] + v6);
  if (!objc_msgSend(self, sel_jasperAvailable))
  {
    unsigned __int8 v8 = sub_22F1EB3B8(v7) - 1;
    if (v8 <= 0xCu)
    {
      char v2 = byte_22F229EFC[(char)v8];
LABEL_14:
      LOBYTE(at.x) = v2;
      return (MeasureFoundation::SegmentationResult::Label_optional)at.x;
    }
LABEL_13:
    char v2 = 0;
    goto LABEL_14;
  }
  LOBYTE(at.x) = _s17MeasureFoundation18SegmentationResultC5LabelO8rawValueAESgs5UInt8V_tcfC_0(v7);
  return (MeasureFoundation::SegmentationResult::Label_optional)at.x;
}

Swift::Bool __swiftcall SegmentationResult.Label.sanityCheck(planeAnchor:)(ARPlaneAnchor planeAnchor)
{
  unsigned int v2 = v1;
  id v3 = [(objc_class *)planeAnchor.super.super.isa alignment];
  if (v2 >= 8) {
    LOBYTE(v4) = 1;
  }
  else {
    BOOL v4 = (0x3Bu >> v2) & 1;
  }
  if (v3) {
    return (v2 & 0xFFFFFFFD) != 1;
  }
  else {
    return v4;
  }
}

uint64_t SegmentationResult.Label.debugColor.getter(uint64_t result)
{
  unsigned __int8 v1 = result;
  if (qword_2686944C8 != -1) {
    double result = swift_once();
  }
  if (*((void *)off_268695880 + 2) > (unint64_t)v1) {
    return *((unsigned int *)off_268695880 + v1 + 8);
  }
  __break(1u);
  return result;
}

void *SegmentationResult.outputHeight.unsafeMutableAddressor()
{
  return &static SegmentationResult.outputHeight;
}

void *SegmentationResult.outputWidth.unsafeMutableAddressor()
{
  return &static SegmentationResult.outputWidth;
}

uint64_t static SegmentationResult.isInLandscape.getter()
{
  return 1;
}

uint64_t static SegmentationResult.outputWidth.getter()
{
  return 192;
}

uint64_t static SegmentationResult.outputHeight.getter()
{
  return 256;
}

double sub_22F1EA6CC()
{
  double result = 192.0;
  static SegmentationResult.outputSize = xmmword_22F229D90;
  return result;
}

double static SegmentationResult.outputSize.getter()
{
  if (qword_2686944C0 != -1) {
    swift_once();
  }
  return *(double *)&static SegmentationResult.outputSize;
}