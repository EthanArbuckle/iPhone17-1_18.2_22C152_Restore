uint64_t RowCursor._isDone.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = sub_24F773D00();
  *(unsigned char *)(v1 + 24) = a1;
  return result;
}

void *initializeBufferWithCopyOfBuffer for FTS5(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t dispatch thunk of _DatabaseCursor._element(sqliteStatement:)()
{
  sub_24F777748();
  return v0();
}

uint64_t sub_24F765D44@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RowCursor._element(sqliteStatement:)();
  *a1 = result;
  return result;
}

uint64_t _s12GRDBInternal9RowCursorC8_element15sqliteStatementAA0B0Cs13OpaquePointerV_tF_0()
{
  return swift_retain();
}

uint64_t RowCursor._isDone.getter()
{
  sub_24F773614();
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t type metadata accessor for DatabasePool()
{
  return self;
}

uint64_t sub_24F765DD0()
{
  return sub_24F765DFC();
}

uint64_t sub_24F765DFC()
{
  uint64_t v0 = sub_24F7801C0();
  return v1(v0);
}

sqlite3_int64 sub_24F765E1C(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0 || *(void *)(a1 + 72) <= (int64_t)a2) {
    goto LABEL_11;
  }
  uint64_t v3 = *(sqlite3_stmt **)(a1 + 64);
  if (!v3) {
    return sub_24F7EFEF8();
  }
  if (a2 >> 31)
  {
    __break(1u);
LABEL_11:
    sqlite3_int64 result = sub_24F8CF9D0();
    __break(1u);
    return result;
  }
  MEMORY[0x270FA5388]();
  v6[2] = v4;
  v6[3] = a2;
  if (sqlite3_column_type(v3, a2) == 5) {
    return sub_24F7D102C(v3, a2, sub_24F7FF1AC, v6);
  }
  else {
    return sqlite3_column_int64(v3, a2);
  }
}

uint64_t sub_24F765F68()
{
  return sub_24F8CFDA0();
}

BOOL sub_24F765FC8()
{
  return sub_24F765FF0();
}

BOOL sub_24F765FF0()
{
  v1 = *(void **)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 88);
  if (v2)
  {
    uint64_t v3 = sub_24F8CFFE0();
    sub_24F80BB20(v3, v4, v2);
    uint64_t v6 = v5;
    swift_bridgeObjectRelease();
    if (v6)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
  }
  else
  {
    uint64_t v7 = sub_24F8CFFE0();
    uint64_t v9 = v8;
    uint64_t v10 = v1[5];
    uint64_t v11 = v1[6];
    sub_24F7811D0(v1 + 2, v10);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 88))(v7, v9, v10, v11);
    LOBYTE(v7) = v12;
    swift_bridgeObjectRelease();
    if ((v7 & 1) == 0) {
      return 1;
    }
  }
  Row.scopes.getter();
  uint64_t v13 = sub_24F8CFFE0();
  uint64_t v15 = Row.ScopesTreeView.subscript.getter(v13, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  if (!v15)
  {
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24F8CFFE0();
    Row.PrefetchedRowsView.subscript.getter();
    uint64_t v18 = v17;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v18 != 0;
  }
  return 1;
}

GRDBInternal::SQLInterpolation __swiftcall SQLInterpolation.init(literalCapacity:interpolationCount:)(GRDBInternal::SQLInterpolation literalCapacity, Swift::Int interpolationCount)
{
  uint64_t v3 = v2;
  if (__OFADD__(interpolationCount, 1))
  {
    __break(1u);
  }
  else
  {
    sub_24F7662F0();
    v3->elements._rawValue = literalCapacity.elements._rawValue;
  }
  return literalCapacity;
}

void sub_24F766248()
{
  sub_24F777204();
  sub_24F77BB1C();
  if (v4)
  {
    sub_24F7737D0();
    if (v5 != v6)
    {
      sub_24F77C5C4();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_24F77E574();
    }
  }
  sub_24F77ECFC();
  if (v3)
  {
    sub_24F781274(v7);
    uint64_t v8 = (void *)sub_24F77B7EC();
    sub_24F77E584(v8);
  }
  sub_24F77CD7C();
  if (v2)
  {
    uint64_t v11 = sub_24F77B808(v9, v10);
    v1(v11);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    sub_24F7812B8();
  }
  swift_bridgeObjectRelease();
  sub_24F773598();
}

void sub_24F7662F0()
{
}

uint64_t sub_24F766318()
{
  return sub_24F766338() & 1;
}

uint64_t sub_24F766338()
{
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  return v1;
}

uint64_t sub_24F766394(uint64_t a1, uint64_t a2)
{
  return sub_24F7663C0(a1, a2, (uint64_t (*)(void, void, void, void, void))sub_24F7663F0);
}

uint64_t sub_24F7663C0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void, void, void, void))
{
  return a3(*v3, v3[1], v3[2], *(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t sub_24F7663F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  a4[3] = type metadata accessor for ColumnDecoder();
  a4[4] = swift_getWitnessTable();
  *a4 = a1;
  a4[1] = a2;
  a4[2] = a3;
  swift_retain();
  return swift_bridgeObjectRetain();
}

Swift::Void __swiftcall SQLInterpolation.appendLiteral(_:)(Swift::String a1)
{
  uint64_t v3 = HIBYTE(a1._object) & 0xF;
  if (((uint64_t)a1._object & 0x2000000000000000) == 0) {
    uint64_t v3 = a1._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (v3)
  {
    Swift::String v5 = a1;
    uint64_t v6 = MEMORY[0x263F8EE78];
    uint64_t v7 = MEMORY[0x263F8EE80];
    sub_24F7725D4(&v5);
    swift_bridgeObjectRetain();
    sub_24F766748();
    sub_24F766690();
    sub_24F7721F4(v4);
    void *v1 = v2;
  }
}

uint64_t SQLInterpolation.appendInterpolation<A>(_:)(uint64_t a1, uint64_t a2)
{
  MEMORY[0x270FA5388](a1);
  (*(void (**)(char *))(v5 + 16))((char *)&v10[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10[0] = sub_24F8CEF90();
  v10[1] = v6;
  char v11 = 2;
  sub_24F7667B8((uint64_t)v10);
  sub_24F76F710((uint64_t)v10, (uint64_t)v12);
  memcpy(__dst, v12, 0xA3uLL);
  sub_24F766784(__dst);
  sub_24F766748();
  sub_24F766690();
  sub_24F77FF48();
  uint64_t result = sub_24F76C344((uint64_t)__dst, v7);
  *uint64_t v2 = a2;
  return result;
}

{
  void *v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t result;
  void v7[23];

  uint64_t v3 = sub_24F775AD0(a1, a2);
  v4(v3);
  sub_24F794DAC(v7);
  sub_24F766748();
  sub_24F77DCC4();
  uint64_t result = sub_24F77F25C(v5);
  *uint64_t v2 = v2;
  return result;
}

{
  void *v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t result;
  void v7[23];

  uint64_t v3 = sub_24F775AD0(a1, a2);
  v4(v3);
  sub_24F794DF8(v7);
  sub_24F766748();
  sub_24F77DCC4();
  uint64_t result = sub_24F77F25C(v5);
  *uint64_t v2 = v2;
  return result;
}

void sub_24F766648()
{
  sub_24F785464();
  if (!(v4 ^ v5 | v3)) {
    *uint64_t v0 = v1(v2 > 1);
  }
}

void sub_24F766690()
{
}

uint64_t sub_24F7666CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = *v4;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *char v4 = v9;
  if (!result)
  {
    uint64_t result = a4(result, *(void *)(v9 + 16) + 1, 1, v9, a1, a2, a3);
    *char v4 = result;
  }
  return result;
}

uint64_t sub_24F766748()
{
  return sub_24F7666CC((uint64_t)&unk_26B1F7F50, (uint64_t)&type metadata for SQL.Element, (uint64_t)sub_24F8B4F50, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_24F766248);
}

void *sub_24F766784(void *result)
{
  uint64_t v1 = result[13] & 1;
  unint64_t v2 = result[20] & 0xE000000000FFC1FFLL | 0x800000000000000;
  result[8] &= 1uLL;
  result[13] = v1;
  result[20] = v2;
  return result;
}

uint64_t sub_24F7667B8(uint64_t a1)
{
  int v2 = *(unsigned __int16 *)(a1 + 160);
  uint64_t result = a1 + 160;
  int v3 = v2 | (*(unsigned __int8 *)(result + 2) << 16);
  uint64_t v4 = *(void *)(result - 56) & 1;
  *(void *)(result - 96) &= 1uLL;
  *(void *)(result - 56) = v4;
  *(_WORD *)uint64_t result = v3 & 0x81FF;
  *(unsigned char *)(result + 2) = (v3 & 0x1FFFF | 0x100000u) >> 16;
  return result;
}

uint64_t _s12GRDBInternal13DatabaseValueV7StorageOwCP_0(uint64_t a1, uint64_t a2)
{
  sub_24F77DD0C(a1, a2);
  *(void *)uint64_t v2 = v3;
  *(void *)(v2 + 8) = v4;
  *(unsigned char *)(v2 + 16) = v5;
  return v2;
}

uint64_t RowCursor.__deallocating_deinit()
{
  RowCursor.deinit();
  return MEMORY[0x270FA0228](v0, 40, 7);
}

uint64_t RowCursor.deinit()
{
  sub_24F783310();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_24F7668C0(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    swift_retain();
    sub_24F784278();
    uint64_t v2 = *(void **)(v1 + 32);
    *(void *)(v1 + 32) = 1;
    sub_24F77D5B0(v2);
    swift_release();
    return 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t FastDatabaseValueCursor.__deallocating_deinit()
{
  FastDatabaseValueCursor.deinit();
  return MEMORY[0x270FA0228](v0, 32, 7);
}

uint64_t _s12GRDBInternal23FastDatabaseValueCursorCfd_0()
{
  sub_24F783310();
  swift_release();
  return v0;
}

uint64_t sub_24F7669C4()
{
  sub_24F781F10(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_24F766A08()
{
  sub_24F76C98C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(void *)(v0 + 128), *(void *)(v0 + 136), *(void *)(v0 + 144), *(void *)(v0 + 152), *(void *)(v0 + 160),
    *(void *)(v0 + 168),
    *(unsigned __int16 *)(v0 + 176) | (*(unsigned __int8 *)(v0 + 178) << 16));
  return swift_deallocObject();
}

uint64_t sub_24F766A90()
{
  sub_24F782BC0();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_24F770DF4();
  uint64_t v3 = v2;
  unint64_t v4 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v0 + v4, AssociatedTypeWitness);
  return swift_deallocObject();
}

uint64_t sub_24F766B44()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24F766B84(void (*a1)(void))
{
  swift_release();
  a1(*(void *)(v1 + 24));
  return swift_deallocObject();
}

uint64_t sub_24F766BD4()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24F766C14()
{
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 32) >= 2uLL) {
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t sub_24F766C68()
{
  return sub_24F766C88(*(void (**)(uint64_t *))(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_24F766C88(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t v6 = *(void *)(a3 + 16);
  swift_bridgeObjectRetain();
  a1(&v6);
  return swift_bridgeObjectRelease();
}

uint64_t sub_24F766D1C(unint64_t *a1)
{
  return sub_24F766D38(a1, *(void (**)(uint64_t))(v1 + 16));
}

uint64_t sub_24F766D38(unint64_t *a1, void (*a2)(uint64_t))
{
  return sub_24F766D54(*a1, a2);
}

uint64_t sub_24F766D54(unint64_t a1, void (*a2)(uint64_t))
{
  if (a1 >> 62) {
    goto LABEL_13;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; uint64_t v5 = sub_24F8CF9E0())
  {
    for (uint64_t i = 4; ; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v7 = MEMORY[0x253364060](i - 4, a1);
      }
      else
      {
        uint64_t v7 = *(void *)(a1 + 8 * i);
        swift_retain();
      }
      uint64_t v8 = i - 3;
      if (__OFADD__(i - 4, 1)) {
        break;
      }
      a2(v7 + 16);
      if (v2)
      {
        swift_bridgeObjectRelease();
        return swift_release();
      }
      swift_release();
      if (v8 == v5) {
        return swift_bridgeObjectRelease();
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_24F766E6C(uint64_t a1)
{
  return sub_24F766E88(a1, *(void **)(v1 + 16));
}

uint64_t sub_24F766E88(uint64_t a1, void *a2)
{
  uint64_t v3 = swift_retain();
  MEMORY[0x2533638D0](v3);
  sub_24F766F18(*(void *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x10));
  sub_24F8CF140();
  return sub_24F8CF0B0();
}

uint64_t sub_24F766EEC(uint64_t result)
{
  if (result + 1 > *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    return sub_24F8CF0F0();
  }
  return result;
}

uint64_t sub_24F766F1C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0228](v0, 33, 7);
}

uint64_t sub_24F766F64()
{
  return sub_24F766F8C() & 1;
}

uint64_t sub_24F766F8C()
{
  sub_24F769D2C();
  if (!v1)
  {
    sub_24F77B168();
    char v0 = v3;
    swift_bridgeObjectRelease();
  }
  return v0 & 1;
}

uint64_t Database.cachedStatement(literal:)()
{
  sub_24F7711F4();
  swift_allocObject();
  swift_retain();
  uint64_t v1 = sub_24F778A30(0);
  sub_24F778B08();
  sub_24F77B06C();
  swift_allocObject();
  uint64_t v2 = sub_24F77E36C();
  swift_retain();
  uint64_t v3 = swift_bridgeObjectRetain();
  sub_24F76BCC0(v3, (uint64_t)v2);
  if (v0)
  {
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_24F781274(&qword_26B1F7F48);
    sub_24F778988((unint64_t *)&qword_26B1F7EB0, &qword_26B1F7F48);
    uint64_t v4 = sub_24F7831C8();
    uint64_t v6 = v5;
    swift_bridgeObjectRelease();
    sub_24F778A9C(&v13);
    swift_release();
    uint64_t v7 = v13;
    uint64_t v8 = v14;
    uint64_t v1 = Database.cachedStatement(sql:)(v4, v6);
    swift_bridgeObjectRelease();
    if (*(void *)(v7 + 16) || *(void *)(v8 + 16))
    {
      uint64_t v13 = v7;
      uint64_t v14 = v8;
      char v11 = &v13;
      Statement.setArguments(_:)(*(GRDBInternal::StatementArguments *)(&v10 - 1));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v12) {
        swift_release();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  return v1;
}

uint64_t Database.cachedStatement(sql:)(uint64_t a1, uint64_t a2)
{
  return sub_24F772ED4(a1, a2, (void (*)(void))sub_24F775A78, (void (*)(uint64_t))sub_24F775A6C);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Statement.setArguments(_:)(GRDBInternal::StatementArguments a1)
{
  uint64_t v4 = *(void *)a1.values._rawValue;
  uint64_t v3 = *((void *)a1.values._rawValue + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_24F783828(v1, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v2)
  {
    *(void *)(v1 + 104) = v4;
    *(void *)(v1 + 112) = v3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(unsigned char *)(v1 + 96) = 0;
    sub_24F783310();
    sub_24F78253C();
    uint64_t v6 = *(void *)(v5 + 16);
    if (v6)
    {
      uint64_t v7 = 0;
      uint64_t v8 = v5 + 48;
      while (1)
      {
        uint64_t v9 = sub_24F7855FC();
        sub_24F781F34(v9, v10, v11);
        int v12 = sub_24F7855FC();
        sub_24F781F58(v12, v13, v14, v7 + 1);
        uint64_t v15 = sub_24F7855FC();
        sub_24F781F10(v15, v16, v17);
        if (v7 == 2147483645) {
          break;
        }
        v8 += 24;
        if (v6 == ++v7) {
          goto LABEL_6;
        }
      }
      __break(1u);
    }
    else
    {
LABEL_6:
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_24F767354()
{
  return sub_24F767374(*(void (**)(uint64_t))(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_24F767374(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3 + *(void *)(*(void *)a3 + 88);
  swift_beginAccess();
  a1(v4);
  return swift_endAccess();
}

void sub_24F767408()
{
  *(unsigned char *)(v0 + *(void *)(*(void *)v0 + 96)) = 1;
}

uint64_t sub_24F767428@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_24F767444(a1, v2, a2);
}

uint64_t sub_24F767444@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(void)@<X1>, uint64_t *a3@<X8>)
{
  v22 = a3;
  uint64_t v5 = *((void *)*a2 + 10);
  uint64_t v20 = *(void *)(v5 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (uint64_t *)MEMORY[0x270FA5388](v6);
  v21 = (char *)&v19 - v10;
  uint64_t v11 = *v9;
  uint64_t v23 = v5;
  uint64_t v24 = v11;
  swift_getKeyPath();
  type metadata accessor for Pool.Item();
  sub_24F8CF1B0();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  sub_24F8CF010();
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v13 = v25;
  if (v25)
  {
    *(unsigned char *)(v25 + *(void *)(*(void *)v25 + 96)) = 0;
LABEL_3:
    uint64_t *v22 = v13;
    return result;
  }
  uint64_t v14 = v20;
  uint64_t result = a2[2](result);
  if (!v3)
  {
    uint64_t v15 = v14;
    uint64_t v16 = (uint64_t)v8;
    char v17 = v8;
    uint64_t v18 = v21;
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v21, v5);
    uint64_t v13 = sub_24F88DE1C(v16, 0);
    uint64_t v25 = v13;
    swift_retain();
    sub_24F8CF170();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v5);
    goto LABEL_3;
  }
  return result;
}

uint64_t destroy for TableRegion()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

double StatementArguments.init(arrayLiteral:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  sub_24F780F38(a1, &v4);
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t SQLStatementCursor.__deallocating_deinit()
{
  SQLStatementCursor.deinit();
  return MEMORY[0x270FA0228](v0, 80, 7);
}

uint64_t SQLStatementCursor.deinit()
{
  swift_release();
  swift_release();
  sub_24F77835C(*(void *)(v0 + 64));
  return v0;
}

uint64_t RecordCursor.__deallocating_deinit()
{
  RecordCursor.deinit();
  return MEMORY[0x270FA0228](v0, 40, 7);
}

uint64_t RecordCursor.deinit()
{
  sub_24F783310();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_24F76780C()
{
  uint64_t v0 = sub_24F76783C();
  return MEMORY[0x270FA0228](v0, 104, 7);
}

uint64_t sub_24F76783C()
{
  unint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRelease();
  swift_release();
  sub_24F7678A4(v1);
  sub_24F7783C0(v0 + 48, qword_26B1F7980);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

unint64_t sub_24F7678A4(unint64_t result)
{
  if (result >= 2) {
    return swift_release();
  }
  return result;
}

uint64_t sub_24F7678B8()
{
  return sub_24F7678DC();
}

uint64_t sub_24F7678DC()
{
  sub_24F769D2C();
  if (!v1)
  {
    sub_24F767950();
    uint64_t v0 = v3;
    swift_bridgeObjectRelease();
  }
  return v0;
}

void sub_24F767950()
{
  sub_24F77D7C0();
  uint64_t v3 = sub_24F77F588(v2);
  v4(v3);
  if (v5)
  {
    uint64_t v11 = (void *)sub_24F77AF2C();
    sub_24F77733C(v11);
    sub_24F7D29A4();
    uint64_t v12 = sub_24F770FA4();
    sub_24F782FB8(v12, v13);
    sub_24F773B28();
    sub_24F77EF24();
    sub_24F775C24();
    swift_willThrow();
    goto LABEL_9;
  }
  sub_24F77DAC0();
  if (!v1)
  {
    sub_24F7807E8();
    sub_24F7EFE90();
    goto LABEL_9;
  }
  sub_24F782AB8();
  if (v6 != v7)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_24F77BCD0();
  if (!(v6 ^ v7 | v8)) {
    goto LABEL_14;
  }
  sub_24F77B8F8();
  MEMORY[0x270FA5388](v9);
  if (sub_24F77E820() == 5)
  {
    uint64_t v10 = sub_24F7814C0();
    sub_24F7D0FBC(v10);
    sub_24F781D34();
LABEL_9:
    sub_24F77B584();
    sub_24F77C020();
    return;
  }
  if (sqlite3_column_text(v1, v0))
  {
    sub_24F8CEEE0();
    goto LABEL_9;
  }
LABEL_15:
  __break(1u);
}

uint64_t sub_24F767A5C()
{
  return sub_24F767A84();
}

uint64_t sub_24F767A84()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  unint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  type metadata accessor for _RowDecoder.KeyedContainer();
  v6[0] = v1;
  v6[1] = v2;
  v6[2] = v4;
  v6[3] = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_24F767B74(v4);
  v6[0] = sub_24F767B88(v6);
  swift_getWitnessTable();
  return sub_24F8CFA80();
}

uint64_t type metadata accessor for _RowDecoder.KeyedContainer()
{
  return swift_getGenericMetadata();
}

unint64_t sub_24F767B74(unint64_t result)
{
  if (result >= 2) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_24F767B88(uint64_t *a1)
{
  return sub_24F767BC4(a1);
}

uint64_t sub_24F767BC4(uint64_t *a1)
{
  uint64_t v3 = *(void *)v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 88);
  uint64_t v52 = sub_24F8CF610();
  uint64_t v5 = *(void *)(v52 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v52);
  char v8 = (char *)v47 - v7;
  uint64_t v9 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v6);
  v59 = (char *)v47 - v10;
  uint64_t v11 = *a1;
  uint64_t v12 = a1[1];
  uint64_t v14 = (void *)a1[2];
  uint64_t v13 = a1[3];
  *(void *)(v1 + 96) = 0;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(void *)(v1 + 80) = 0;
  *(void *)(v1 + 16) = v11;
  *(void *)(v1 + 24) = v12;
  *(void *)(v1 + 32) = v14;
  *(void *)(v1 + 40) = v13;
  uint64_t v48 = v1;
  if (!v14)
  {
LABEL_19:
    uint64_t result = v48;
    *(void *)(v48 + 88) = v14;
    return result;
  }
  swift_retain();
  swift_bridgeObjectRetain();
  sub_24F767B74((unint64_t)v14);
  uint64_t v15 = sub_24F8CEC70();
  uint64_t v16 = v12;
  unint64_t v17 = (unint64_t)v14;
  uint64_t v14 = (void *)v15;
  uint64_t v66 = v11;
  uint64_t v67 = 0;
  v68 = sub_24F8AF61C;
  uint64_t v69 = 0;
  if (!*(void *)(v11 + 72))
  {
    swift_bridgeObjectRelease();
    sub_24F7678A4(v17);
LABEL_18:
    swift_release();
    swift_release();
    goto LABEL_19;
  }
  uint64_t v56 = v3;
  v47[0] = v16;
  unint64_t v57 = v17;
  uint64_t v58 = v13;
  v54 = &v67;
  v55 = v8;
  v53 = &v63;
  v51 = (void (**)(char *, uint64_t, uint64_t))(v9 + 32);
  v49 = (void (**)(char *, uint64_t))(v9 + 8);
  v50 = (void (**)(uint64_t, uint64_t))(v5 + 8);
  swift_retain();
  uint64_t v18 = 0;
  v47[1] = v11;
  while (1)
  {
    uint64_t v19 = v54;
    Row.subscript.getter();
    unint64_t v21 = v20;
    uint64_t v23 = v22;
    uint64_t v24 = v63;
    unint64_t v25 = v64;
    char v26 = v65;
    swift_bridgeObjectRetain();
    sub_24F781F34(v24, v25, v26);
    swift_bridgeObjectRelease();
    sub_24F781F10(v24, v25, v26);
    sub_24F8AF548(v19, v18);
    unint64_t v61 = v21;
    uint64_t v62 = v23;
    uint64_t v63 = v24;
    unint64_t v64 = v25;
    char v65 = v26;
    ((void (*)(void *__return_ptr, unint64_t *))v68)(v60, &v61);
    swift_bridgeObjectRelease();
    sub_24F781F10(v24, v25, v26);
    uint64_t v27 = v60[0];
    uint64_t v28 = v60[1];
    unint64_t v29 = v57;
    unint64_t v61 = v57;
    uint64_t v62 = v58;
    sub_24F767B74(v57);
    uint64_t v30 = (uint64_t)v55;
    sub_24F88CF24();
    sub_24F7678A4(v29);
    if (sub_24F777048(v30, 1, v4) == 1)
    {
      swift_bridgeObjectRelease();
      (*v50)(v30, v52);
      goto LABEL_15;
    }
    (*v51)(v59, v30, v4);
    uint64_t v31 = sub_24F8CFFE0();
    uint64_t v33 = v32;
    swift_isUniquelyReferenced_nonNull_native();
    unint64_t v61 = (unint64_t)v14;
    unint64_t v34 = sub_24F782950();
    if (__OFADD__(v14[2], (v35 & 1) == 0)) {
      break;
    }
    unint64_t v36 = v34;
    char v37 = v35;
    sub_24F781274(&qword_269A2A1D8);
    if (sub_24F8CF980())
    {
      unint64_t v38 = sub_24F782950();
      if ((v37 & 1) != (v39 & 1)) {
        goto LABEL_22;
      }
      unint64_t v36 = v38;
    }
    uint64_t v14 = (void *)v61;
    if (v37)
    {
      v40 = (void *)(*(void *)(v61 + 56) + 16 * v36);
      swift_bridgeObjectRelease();
      void *v40 = v27;
      v40[1] = v28;
    }
    else
    {
      *(void *)(v61 + 8 * (v36 >> 6) + 64) |= 1 << v36;
      v41 = (uint64_t *)(v14[6] + 16 * v36);
      uint64_t *v41 = v31;
      v41[1] = v33;
      v42 = (void *)(v14[7] + 16 * v36);
      void *v42 = v27;
      v42[1] = v28;
      uint64_t v43 = v14[2];
      BOOL v44 = __OFADD__(v43, 1);
      uint64_t v45 = v43 + 1;
      if (v44) {
        goto LABEL_21;
      }
      v14[2] = v45;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*v49)(v59, v4);
LABEL_15:
    uint64_t v18 = v67;
    if (v67 == *(void *)(v66 + 72))
    {
      swift_bridgeObjectRelease();
      swift_release();
      sub_24F7678A4(v57);
      goto LABEL_18;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  uint64_t result = sub_24F8CFEA0();
  __break(1u);
  return result;
}

uint64_t sub_24F768108(uint64_t a1, int a2, char *a3, char *a4)
{
  swift_retain();
  sub_24F76817C(a2, a3, a4);
  uint64_t v8 = v7;
  swift_release();
  return v8;
}

void sub_24F76817C(int a1, char *__s1, char *a3)
{
  uint64_t v4 = v3;
  switch(a1)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 24:
    case 25:
    case 26:
    case 29:
      goto LABEL_3;
    case 9:
      if ((*(unsigned char *)(v4 + 65) & 1) == 0 && __s1 && strcmp(__s1, "sqlite_master"))
      {
        if (strcmp(__s1, "sqlite_temp_master"))
        {
          uint64_t v7 = sub_24F8CEED0();
          uint64_t v9 = v8;
          swift_bridgeObjectRetain();
          sub_24F786BE4();
          sub_24F786F74();
          sub_24F77F508();
          *(unsigned char *)(v10 + 56) = 1;
          swift_unownedRetainStrong();
          sub_24F77CC40();
          swift_release();
          sub_24F79F970(v7, v9);
          swift_release();
          swift_bridgeObjectRelease();
        }
      }
      return;
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 30:
      *(unsigned char *)(v4 + 65) = 1;
LABEL_3:
      *(unsigned char *)(v4 + 40) = 1;
      return;
    case 18:
      if (__s1)
      {
        sub_24F8CEED0();
        sub_24F786BE4();
        sub_24F786F74();
        sub_24F77F508();
        *(unsigned char *)(v11 + 56) = 0;
      }
      return;
    case 20:
      if (!__s1) {
        return;
      }
      uint64_t v12 = sub_24F8CEED0();
      uint64_t v14 = v13;
      if (a3)
      {
        uint64_t v15 = v12;
        uint64_t v16 = sub_24F8CEED0();
        unint64_t v18 = v17;
        uint64_t v19 = HIBYTE(v17) & 0xF;
        if ((v17 & 0x2000000000000000) == 0) {
          uint64_t v19 = v16 & 0xFFFFFFFFFFFFLL;
        }
        if (v19)
        {
          uint64_t v20 = v16;
          sub_24F781274((uint64_t *)&unk_26B1F7C88);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_24F8DDBF0;
          *(void *)(inited + 32) = v20;
          *(void *)(inited + 40) = v18;
          uint64_t v22 = sub_24F81BD54(inited);
          sub_24F80B4AC(v15, v14, v22, &v46);
          uint64_t v23 = v46;
          sub_24F77DF54();
          uint64_t v24 = *(void *)(v4 + 24);
          uint64_t v43 = v23;
          uint64_t v44 = v24;
          DatabaseRegion.union(_:)(&v43, &v45);
          swift_bridgeObjectRelease();
          uint64_t v25 = v45;
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v37 = sub_24F8CED00();
          uint64_t v39 = v38;
          sub_24F781274(&qword_26B1F7F30);
          uint64_t v40 = swift_initStackObject();
          *(_OWORD *)(v40 + 16) = xmmword_24F8DDBF0;
          *(void *)(v40 + 32) = v37;
          *(void *)(v40 + 40) = v39;
          *(void *)(v40 + 48) = v15;
          *(void *)(v40 + 56) = v14;
          sub_24F776A80();
          *(void *)(v40 + 64) = 0;
          *(void *)(v40 + 72) = 0;
          uint64_t v41 = sub_24F8CEC70();
          sub_24F77DF54();
          uint64_t v42 = *(void *)(v4 + 24);
          uint64_t v44 = v41;
          uint64_t v45 = v42;
          DatabaseRegion.union(_:)(&v44, &v46);
          swift_bridgeObjectRelease();
          uint64_t v25 = v46;
        }
        *(void *)(v4 + 24) = v25;
        swift_endAccess();
      }
      goto LABEL_41;
    case 22:
      if (!__s1) {
        return;
      }
      if (!strcmp(__s1, "BEGIN"))
      {
        uint64_t v26 = *(void *)(v4 + 48);
        uint64_t v27 = *(void *)(v4 + 56);
        *(void *)(v4 + 48) = 0;
        *(void *)(v4 + 56) = 0;
      }
      else
      {
        if (!strcmp(__s1, "COMMIT"))
        {
          uint64_t v26 = *(void *)(v4 + 48);
          uint64_t v27 = *(void *)(v4 + 56);
          long long v28 = xmmword_24F8DF640;
        }
        else
        {
          if (strcmp(__s1, "ROLLBACK")) {
            return;
          }
          uint64_t v26 = *(void *)(v4 + 48);
          uint64_t v27 = *(void *)(v4 + 56);
          long long v28 = xmmword_24F8E08F0;
        }
        *(_OWORD *)(v4 + 48) = v28;
      }
      unsigned __int8 v35 = *(unsigned char *)(v4 + 64);
      char v36 = 3;
      goto LABEL_45;
    case 23:
      if (!__s1) {
        return;
      }
      uint64_t v29 = sub_24F8CEED0();
      uint64_t v31 = v30;
      if (a3)
      {
        uint64_t v32 = v29;
        uint64_t v33 = sub_24F8CEED0();
        sub_24F7EACC8(v32, v31, v33, v34);
        swift_bridgeObjectRelease();
      }
      goto LABEL_41;
    case 31:
      if (!a3) {
        return;
      }
      if (!strcmp(a3, "sqlite_drop_column")) {
        *(unsigned char *)(v4 + 40) = 1;
      }
      if (sqlite3_libversion_number() > 3018999 || sqlite3_stricmp(a3, "COUNT")) {
        return;
      }
      swift_beginAccess();
      *(void *)(v4 + 24) = 0;
      goto LABEL_41;
    case 32:
      if (!__s1 || !a3) {
        return;
      }
      sub_24F8CEED0();
      if (!strcmp(__s1, "BEGIN"))
      {
        uint64_t v26 = sub_24F77FD2C();
        *(unsigned char *)(v4 + 64) = 0;
      }
      else
      {
        if (!strcmp(__s1, "RELEASE"))
        {
          uint64_t v26 = sub_24F77FD2C();
          char v36 = 1;
        }
        else
        {
          if (strcmp(__s1, "ROLLBACK"))
          {
LABEL_41:
            swift_bridgeObjectRelease();
            return;
          }
          uint64_t v26 = sub_24F77FD2C();
          char v36 = 2;
        }
LABEL_45:
        *(unsigned char *)(v4 + 64) = v36;
      }
      sub_24F776A6C(v26, v27, v35);
      return;
    default:
      return;
  }
}

uint64_t sub_24F768620@<X0>(uint64_t a1@<X8>)
{
  return sub_24F76863C(v1, a1);
}

uint64_t sub_24F76863C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(*a1 + 80);
  sub_24F7688B8(qword_26B1F7A20);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v8 = (char *)&v21 - v7;
  sub_24F8CF5A0();
  uint64_t v9 = a1[6];
  dispatch_group_enter(v9);
  sub_24F768C14();
  uint64_t v10 = type metadata accessor for Pool.Item();
  sub_24F768990((uint64_t)sub_24F767428, (uint64_t)a1, v10, (uint64_t)&v23);
  swift_release();
  if (v2)
  {
    sub_24F8CF5B0();
    dispatch_group_leave(v9);
    return swift_willThrow();
  }
  else
  {
    uint64_t v12 = v23;
    uint64_t v13 = v23 + *(void *)(*(void *)v23 + 88);
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = a1;
    *(void *)(v14 + 24) = v12;
    uint64_t v15 = (void (**)())&v8[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v16 = *(void *)(v5 - 8);
    uint64_t v22 = TupleTypeMetadata2;
    uint64_t v17 = a2;
    uint64_t v18 = v16;
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v8, v13, v5);
    *uint64_t v15 = sub_24F771518;
    v15[1] = (void (*)())v14;
    (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v17, v8, v5);
    uint64_t v19 = (uint64_t (**)())(v17 + *(int *)(v22 + 48));
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = sub_24F771518;
    *(void *)(v20 + 24) = v14;
    *uint64_t v19 = sub_24F7714C0;
    v19[1] = (uint64_t (*)())v20;
    return swift_retain();
  }
}

uint64_t type metadata accessor for Pool.Item()
{
  return sub_24F777DE0();
}

uint64_t sub_24F7688B8(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

void sub_24F768900(uint64_t a1)
{
  sub_24F768C14();
  sub_24F768990((uint64_t)sub_24F767408, a1, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8EE60]);
  swift_release();
  sub_24F8CF5B0();
  uint64_t v3 = *(NSObject **)(v1 + 48);
  dispatch_group_leave(v3);
}

void sub_24F768990(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v16 = a4;
  uint64_t v5 = v4;
  uint64_t v14 = a1;
  uint64_t v15 = a2;
  uint64_t v7 = sub_24F8CEBD0();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void **)(v5 + *(void *)(*(void *)v5 + 96));
  sub_24F781274(&qword_26B1F78C0);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_24F8DDBF0;
  id v13 = v11;
  sub_24F8CEBC0();
  uint64_t v21 = v12;
  sub_24F768BC4();
  sub_24F781274(&qword_26B1F7960);
  sub_24F768B70();
  sub_24F8CF6D0();
  uint64_t v17 = a3;
  uint64_t v18 = v14;
  uint64_t v19 = v15;
  uint64_t v20 = v5;
  sub_24F8CF550();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

unint64_t sub_24F768B70()
{
  unint64_t result = qword_26B1F78B8;
  if (!qword_26B1F78B8)
  {
    sub_24F7688B8(&qword_26B1F7960);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B1F78B8);
  }
  return result;
}

unint64_t sub_24F768BC4()
{
  unint64_t result = qword_26B1F7958;
  if (!qword_26B1F7958)
  {
    sub_24F8CEBD0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B1F7958);
  }
  return result;
}

uint64_t sub_24F768C14()
{
  return swift_retain();
}

uint64_t sub_24F768C1C()
{
  sub_24F768C50();
  return MEMORY[0x270FA0228](v0, 56, 7);
}

uint64_t sub_24F768C50()
{
  sub_24F768C88(*(void *)(v0 + 16), *(void *)(v0 + 24));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_24F768C88(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_release();
  if ((a2 & 0x8000000000000000) == 0)
  {
    return swift_release();
  }
  return result;
}

void sub_24F768CD0(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
}

void sub_24F768CF4(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v105 = (uint64_t *)a4;
  v106 = (uint64_t *)a1;
  uint64_t v109 = a5;
  uint64_t v111 = *v5;
  uint64_t v9 = sub_24F781274(&qword_26B1F7240);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v104 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_24F8CE970();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v104 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = v5[2];
  uint64_t v133 = a2;
  v104 = v5;
  uint64_t v17 = sub_24F769D2C();
  v107 = (uint64_t *)v16;
  if (v6)
  {
    v108 = a3;

    uint64_t v110 = 0;
LABEL_12:
    Row.scopes.getter();
    long long v41 = v117;
    uint64_t v43 = v118;
    unint64_t v42 = v119;
    uint64_t v44 = *(void *)(v111 + 88);
    uint64_t v45 = *(void *)(v111 + 104);
    uint64_t v46 = sub_24F8CFFE0();
    long long v117 = v41;
    uint64_t v118 = v43;
    unint64_t v119 = v42;
    uint64_t v48 = Row.ScopesTreeView.subscript.getter(v46, v47);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    if (!v48)
    {
      uint64_t v55 = (uint64_t)v107;
      swift_beginAccess();
      uint64_t v56 = *(void *)(v55 + 80);
      uint64_t v57 = *(void *)(v55 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_24F8CFFE0();
      *(void *)&long long v117 = v56;
      *((void *)&v117 + 1) = v57;
      Row.PrefetchedRowsView.subscript.getter();
      uint64_t v59 = v58;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v60 = v110;
      unint64_t v61 = v108;
      if (v59)
      {
        uint64_t v62 = sub_24F76BC5C();
        unint64_t v119 = type metadata accessor for PrefetchedRowsDecoder();
        uint64_t WitnessTable = swift_getWitnessTable();
        *(void *)&long long v117 = v59;
        *((void *)&v117 + 1) = v62;
        uint64_t v120 = WitnessTable;
        uint64_t v118 = 0;
        uint64_t v64 = v109;
        sub_24F8CF2F0();
        if (v60) {
          return;
        }
        uint64_t v65 = v64;
        uint64_t v66 = 0;
      }
      else
      {
        uint64_t v65 = v109;
        uint64_t v66 = 1;
      }
      uint64_t v67 = (uint64_t)v61;
      goto LABEL_26;
    }
    Row.containsNonNullValue.getter();
    uint64_t v49 = v110;
    a3 = v108;
    if (v50)
    {
      uint64_t v51 = sub_24F76BC5C();
      sub_24F781274(&qword_26B1F7260);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_24F8DDBF0;
      *(void *)(inited + 56) = v44;
      *(void *)(inited + 64) = v45;
      v53 = sub_24F76ADC4((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v44 - 8) + 16))(v53, v133, v44);
      *(void *)&long long v117 = v51;
      sub_24F76B568();
      uint64_t v54 = v109;
      sub_24F891800((uint64_t)v106, v48, v117, (uint64_t)a3, (uint64_t)v105);
      if (v49)
      {
        swift_release();
        swift_bridgeObjectRelease();
        return;
      }
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v65 = v54;
      goto LABEL_24;
    }
    swift_release();
LABEL_20:
    uint64_t v65 = v109;
    uint64_t v66 = 1;
LABEL_25:
    uint64_t v67 = (uint64_t)a3;
LABEL_26:
    sub_24F7771BC(v65, v66, 1, v67);
    return;
  }
  uint64_t v19 = v17;
  uint64_t v20 = v18;
  uint64_t v110 = 0;
  uint64_t v21 = (void *)(v16 + 16);
  uint64_t v23 = *(void *)(v16 + 40);
  uint64_t v22 = *(void *)(v16 + 48);
  v108 = v21;
  sub_24F7811D0(v21, v23);
  uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 88))(v19, v20, v23, v22);
  LOBYTE(v19) = v25;
  swift_bridgeObjectRelease();
  if (v19)
  {
    v108 = a3;
    goto LABEL_12;
  }
  uint64_t v26 = (uint64_t)v106;
  if ((uint64_t *)v12 == v106)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)(v111 + 96) + 32))(&v117);
    long long v68 = v117;
    uint64_t v69 = v24;
    v70 = a3;
    char v71 = v118;
    long long v112 = v117;
    LOBYTE(v113) = v118;
    uint64_t v72 = v110;
    sub_24F8912F8((uint64_t)v107, v69, v11);
    sub_24F7B6734((void *)v68, *((uint64_t *)&v68 + 1), v71);
    uint64_t v73 = v109;
    if (!v72)
    {
      uint64_t v74 = (uint64_t)v106;
      if (sub_24F777048((uint64_t)v11, 1, (uint64_t)v106) == 1)
      {
        sub_24F7783C0((uint64_t)v11, &qword_26B1F7240);
        uint64_t v65 = v73;
        uint64_t v66 = 1;
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v11, v74);
        swift_dynamicCast();
        uint64_t v65 = v73;
        uint64_t v66 = 0;
      }
      uint64_t v67 = (uint64_t)v70;
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v27 = sub_24F76AD3C((uint64_t)a3);
    if (v27)
    {
      uint64_t v30 = v27;
      uint64_t v31 = v29;
      uint64_t v133 = v28;
      v108 = a3;
      uint64_t v32 = sub_24F8CF610();
      uint64_t v33 = *(void *)(*(void *)(v32 - 8) + 64);
      uint64_t v34 = MEMORY[0x270FA5388](v32);
      char v36 = (char *)&v104 - v35;
      uint64_t v37 = (sqlite3_stmt *)v107[8];
      uint64_t v111 = v38;
      if (v37)
      {
        if (v24 < (uint64_t)0xFFFFFFFF80000000)
        {
          __break(1u);
        }
        else
        {
          v106 = (uint64_t *)&v104;
          if (v24 <= 0x7FFFFFFF)
          {
            MEMORY[0x270FA5388](v34);
            *(&v104 - 2) = v107;
            *(&v104 - 1) = (uint64_t *)v24;
            uint64_t v39 = sqlite3_column_type(v37, v24);
            if (v39 == 5)
            {
              uint64_t v40 = 1;
            }
            else
            {
              v107 = (uint64_t *)&v104;
              v105 = (uint64_t *)&v104;
              MEMORY[0x270FA5388](v39);
              v88 = (char *)&v104 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
              (*(void (**)(sqlite3_stmt *, uint64_t, uint64_t, uint64_t))(v31 + 8))(v37, v24, v30, v31);
              if (sub_24F777048((uint64_t)v88, 1, v30) == 1)
              {
                uint64_t v89 = (*(uint64_t (**)(char *, uint64_t))(v111 + 8))(v88, v32);
                MEMORY[0x270FA5388](v89);
                *(&v104 - 2) = (uint64_t *)sub_24F7E9C84;
                *(&v104 - 1) = (uint64_t *)(&v104 - 4);
                static DatabaseValueConvertible<>._valueMismatch(fromStatement:atUncheckedIndex:context:)((uint64_t)v37, v24, (uint64_t)sub_24F7712B8, (uint64_t)(&v104 - 4), v30, v133, v31, v90, (uint64_t)v104, (uint64_t)v105, (uint64_t)v106, (uint64_t)v107, (uint64_t)v108, v109, v110, v111, v112, *((uint64_t *)&v112 + 1), v113,
                  v114,
                  v115,
                  v116,
                  v117,
                  *((uint64_t *)&v117 + 1),
                  v118,
                  v119,
                  v120,
                  v121,
                  v122,
                  v123,
                  v124,
                  v125,
                  v126,
                  v127,
                  v128,
                  v129,
                  v130,
                  v131,
                  v132,
                  v133,
                  v134,
                  v135,
                  v136,
                  v137,
                  v138,
                  v139,
                  v140,
                  v141);
                return;
              }
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 32))(v36, v88, v30);
              uint64_t v40 = 0;
            }
            sub_24F7771BC((uint64_t)v36, v40, 1, v30);
            uint64_t v87 = v109;
            uint64_t v85 = v133;
LABEL_45:
            if (sub_24F777048((uint64_t)v36, 1, v30) == 1)
            {
              (*(void (**)(char *, uint64_t))(v111 + 8))(v36, v32);
              uint64_t v97 = v87;
              uint64_t v98 = 1;
              v99 = v108;
            }
            else
            {
              uint64_t v114 = v30;
              uint64_t v115 = v85;
              uint64_t v116 = v31;
              v100 = sub_24F76ADC4((uint64_t *)&v112);
              (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v30 - 8) + 32))(v100, v36, v30);
              sub_24F769954(&v112, &v117);
              sub_24F781274(&qword_26B1F6DC0);
              v101 = v108;
              swift_dynamicCast();
              uint64_t v97 = v87;
              uint64_t v98 = 0;
              v99 = v101;
            }
            sub_24F7771BC(v97, v98, 1, (uint64_t)v99);
            return;
          }
        }
        __break(1u);
        return;
      }
      uint64_t v85 = v133;
      uint64_t v86 = v110;
      Row.fastDecodeIfPresent<A>(_:atUncheckedIndex:)();
      uint64_t v110 = v86;
      uint64_t v87 = v109;
      if (v86) {
        return;
      }
      goto LABEL_45;
    }
    uint64_t v75 = sub_24F76AE28((uint64_t)a3);
    if (v75)
    {
      uint64_t v77 = v75;
      uint64_t v78 = v76;
      v79 = a3;
      uint64_t v80 = sub_24F8CF610();
      uint64_t v81 = *(void *)(v80 - 8);
      MEMORY[0x270FA5388](v80);
      v83 = (char *)&v104 - v82;
      uint64_t v84 = v110;
      static DatabaseValueConvertible.decodeIfPresent(fromRow:atUncheckedIndex:)();
      if (!v84)
      {
        if (sub_24F777048((uint64_t)v83, 1, v77) == 1)
        {
          (*(void (**)(char *, uint64_t))(v81 + 8))(v83, v80);
          uint64_t v65 = v109;
          uint64_t v66 = 1;
        }
        else
        {
          uint64_t v114 = v77;
          uint64_t v115 = v78;
          v102 = sub_24F76ADC4((uint64_t *)&v112);
          (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v77 - 8) + 32))(v102, v83, v77);
          sub_24F794DE0(&v112, (uint64_t)&v117);
          sub_24F781274(&qword_26B1F7250);
          uint64_t v103 = v109;
          swift_dynamicCast();
          uint64_t v65 = v103;
          uint64_t v66 = 0;
        }
        uint64_t v67 = (uint64_t)v79;
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v91 = (uint64_t)v107;
      uint64_t v92 = v107[5];
      uint64_t v93 = v107[6];
      sub_24F7811D0(v108, v92);
      char v94 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v93 + 40))(v24, v92, v93);
      uint64_t v95 = v110;
      if (v94) {
        goto LABEL_20;
      }
      uint64_t v96 = v109;
      sub_24F76B2B8(v26, v91, v24, v133);
      if (!v95)
      {
        uint64_t v65 = v96;
LABEL_24:
        uint64_t v66 = 0;
        goto LABEL_25;
      }
    }
  }
}

_OWORD *sub_24F769954(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  return a2;
}

const void *sub_24F76996C@<X0>(sqlite3_stmt *a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t result = Data.init(sqliteStatement:index:)(a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

const void *Data.init(sqliteStatement:index:)(sqlite3_stmt *a1, int a2)
{
  uint64_t result = sqlite3_column_blob(a1, a2);
  if (result)
  {
    uint64_t v5 = result;
    int v6 = sqlite3_column_bytes(a1, a2);
    return (const void *)MEMORY[0x253363140](v5, v6);
  }
  return result;
}

uint64_t Row.__deallocating_deinit()
{
  Row.deinit();
  return MEMORY[0x270FA0228](v0, 96, 7);
}

uint64_t Row.deinit()
{
  _s12GRDBInternal13DatabaseEventVwxx_0(v0 + 16);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t destroy for StatementRowImpl()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t destroy for StatementCopyRowImpl()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

double sub_24F769AD8()
{
  return sub_24F769AFC();
}

double sub_24F769AFC()
{
  sub_24F769D2C();
  if (!v0)
  {
    sub_24F769B70();
    double v1 = v3;
    swift_bridgeObjectRelease();
  }
  return v1;
}

void sub_24F769B70()
{
  sub_24F77D7C0();
  uint64_t v3 = sub_24F77F588(v2);
  v4(v3);
  if (v5)
  {
    uint64_t v11 = (void *)sub_24F77AF2C();
    sub_24F77733C(v11);
    sub_24F7D29A4();
    uint64_t v12 = sub_24F770FA4();
    sub_24F782FB8(v12, v13);
    sub_24F773B28();
    sub_24F77EF24();
    sub_24F775C24();
    swift_willThrow();
    goto LABEL_9;
  }
  sub_24F77DAC0();
  if (!v1)
  {
    sub_24F7807E8();
    sub_24F7F037C();
    goto LABEL_9;
  }
  sub_24F782AB8();
  if (v6 == v7)
  {
    sub_24F77BCD0();
    if (!(v6 ^ v7 | v8)) {
      goto LABEL_13;
    }
    sub_24F77B8F8();
    MEMORY[0x270FA5388](v9);
    if (sub_24F77E820() == 5)
    {
      uint64_t v10 = sub_24F7814C0();
      sub_24F7D1584(v10);
      sub_24F781D34();
    }
    else
    {
      sqlite3_column_double(v1, v0);
    }
LABEL_9:
    sub_24F77B584();
    sub_24F77C020();
    return;
  }
  __break(1u);
LABEL_13:
  __break(1u);
}

uint64_t sub_24F769C70()
{
  return sub_24F769C94();
}

uint64_t sub_24F769C94()
{
  return sub_24F769CC0();
}

uint64_t sub_24F769CC0()
{
  sub_24F77F1CC();
  if (!v1)
  {
    sub_24F77EBC4();
    uint64_t v0 = v2();
    swift_bridgeObjectRelease();
  }
  return v0;
}

uint64_t sub_24F769D2C()
{
  uint64_t v1 = *(void *)(v0 + 88);
  if (!v1) {
    return sub_24F8CFFE0();
  }
  uint64_t v2 = v0;
  uint64_t v3 = sub_24F8CFFE0();
  uint64_t v5 = sub_24F80BB20(v3, v4, v1);
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();
  if (!v7)
  {
    if (*(void *)(v2 + 32) == 1)
    {
      uint64_t v8 = sub_24F8CFFE0();
      unint64_t v10 = v9;
      uint64_t v11 = sub_24F7BFB94(v8, v9);
      unint64_t v13 = v12;
      sub_24F88D01C(v11, v12);
      if (v11 != v8 || v13 != v10)
      {
        uint64_t v44 = v14;
        uint64_t v17 = v15;
        if ((sub_24F8CFD00() & 1) == 0)
        {
          BOOL v29 = v44 == v8 && v17 == v10;
          if (v29 || (sub_24F8CFD00() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            uint64_t v36 = 0;
            unint64_t v37 = 0xE000000000000000;
            sub_24F8CF7D0();
            sub_24F8CFCE0();
            sub_24F8CEEB0();
            sub_24F8CEEB0();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v36 = 0;
            unint64_t v37 = 0xE000000000000000;
            sub_24F8CF7D0();
            sub_24F8CFCE0();
            sub_24F8CEEB0();
            sub_24F8CEEB0();
            swift_bridgeObjectRelease();
            sub_24F8CEEB0();
            sub_24F8CEEB0();
            swift_bridgeObjectRelease();
          }
          sub_24F8CEEB0();
          sub_24F8CEEB0();
          swift_bridgeObjectRelease();
          goto LABEL_13;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v36 = 0;
      unint64_t v37 = 0xE000000000000000;
      sub_24F8CFCE0();
      sub_24F8CEEB0();
      sub_24F8CEEB0();
    }
    else
    {
      uint64_t v36 = 0;
      unint64_t v37 = 0xE000000000000000;
      sub_24F8CFCE0();
      sub_24F8CEEB0();
      sub_24F8CFFE0();
      sub_24F8CEEB0();
    }
    swift_bridgeObjectRelease();
    sub_24F8CEEB0();
LABEL_13:
    uint64_t v44 = sub_24F8CFFE0();
    uint64_t v33 = v18;
    long long v34 = 0uLL;
    char v35 = -1;
    uint64_t v19 = (void *)swift_retain();
    RowDecodingContext.init(row:key:)(v19, &v34, (uint64_t)&v36);
    uint64_t v20 = v37;
    uint64_t v21 = v38;
    uint64_t v22 = v39;
    uint64_t v23 = v41;
    uint64_t v32 = v40;
    uint64_t v24 = v42;
    uint64_t v25 = v43;
    *(void *)&long long v34 = 0;
    *((void *)&v34 + 1) = 0xE000000000000000;
    sub_24F8CF7D0();
    swift_bridgeObjectRelease();
    *(void *)&long long v34 = 0x20746F6E2079656BLL;
    *((void *)&v34 + 1) = 0xEF203A646E756F66;
    sub_24F8CEEB0();
    swift_bridgeObjectRelease();
    uint64_t v30 = *((void *)&v34 + 1);
    uint64_t v31 = v34;
    uint64_t v26 = swift_retain();
    uint64_t v5 = sub_24F794AA4(v26);
    swift_release();
    sub_24F7B0E54(v20, v21, v22);
    swift_bridgeObjectRetain();
    sub_24F777E70(v24);
    swift_release();
    sub_24F7B0E68(v20, v21, v22);
    swift_bridgeObjectRelease();
    sub_24F77835C(v24);
    sub_24F7D29A4();
    swift_allocError();
    *(void *)uint64_t v27 = v44;
    *(void *)(v27 + 8) = v33;
    *(void *)(v27 + 16) = 0;
    *(void *)(v27 + 24) = v31;
    *(void *)(v27 + 32) = v30;
    *(void *)(v27 + 40) = v5;
    *(void *)(v27 + 48) = v20;
    *(void *)(v27 + 56) = v21;
    *(void *)(v27 + 64) = v22;
    *(void *)(v27 + 72) = v32;
    *(void *)(v27 + 80) = v23;
    *(void *)(v27 + 88) = v24;
    *(void *)(v27 + 96) = v25;
    *(unsigned char *)(v27 + 104) = 0;
    swift_willThrow();
  }
  return v5;
}

void sub_24F76A254(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
}

void sub_24F76A278(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v87 = a4;
  uint64_t v92 = a3;
  uint64_t v85 = a1;
  uint64_t v90 = a5;
  uint64_t v8 = (void *)*v5;
  uint64_t v9 = sub_24F8CE970();
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v84 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = v5[2];
  uint64_t v125 = (uint64_t *)a2;
  uint64_t v91 = v5;
  uint64_t v13 = sub_24F769D2C();
  v88 = (uint64_t *)v12;
  if (v6)
  {

    uint64_t v89 = 0;
    goto LABEL_14;
  }
  uint64_t v15 = v13;
  uint64_t v16 = v14;
  uint64_t v17 = (void *)(v12 + 16);
  uint64_t v18 = v12;
  uint64_t v19 = *(void *)(v12 + 40);
  uint64_t v20 = *(void *)(v18 + 48);
  sub_24F7811D0(v17, v19);
  uint64_t v86 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 88))(v15, v16, v19, v20);
  LOBYTE(v15) = v21;
  swift_bridgeObjectRelease();
  if (v15)
  {
    uint64_t v89 = 0;
LABEL_14:
    Row.scopes.getter();
    long long v39 = v93;
    uint64_t v41 = v94;
    uint64_t v40 = v95;
    uint64_t v42 = v8[13];
    uint64_t v84 = v8[11];
    uint64_t v86 = v42;
    uint64_t v43 = sub_24F8CFFE0();
    long long v93 = v39;
    uint64_t v94 = v41;
    uint64_t v95 = v40;
    uint64_t v45 = Row.ScopesTreeView.subscript.getter(v43, v44);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    if (v45)
    {
      uint64_t v46 = sub_24F76BC5C();
      sub_24F781274(&qword_26B1F7260);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_24F8DDBF0;
      uint64_t v48 = v84;
      uint64_t v49 = v86;
      *(void *)(inited + 56) = v84;
      *(void *)(inited + 64) = v49;
      char v50 = sub_24F76ADC4((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v48 - 8) + 16))(v50, v125, v48);
      *(void *)&long long v93 = v46;
      sub_24F76B568();
      sub_24F891800(v85, v45, v93, v92, v87);
      swift_release();
LABEL_16:
      swift_bridgeObjectRelease();
      return;
    }
    uint64_t v51 = (uint64_t)v88;
    swift_beginAccess();
    uint64_t v52 = *(void *)(v51 + 80);
    uint64_t v53 = *(void *)(v51 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v54 = (uint64_t)v125;
    uint64_t v55 = v84;
    sub_24F8CFFE0();
    *(void *)&long long v93 = v52;
    *((void *)&v93 + 1) = v53;
    Row.PrefetchedRowsView.subscript.getter();
    uint64_t v57 = v56;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v58 = (uint64_t)v91;
    if (v57)
    {
      uint64_t v59 = sub_24F76BC5C();
      uint64_t v95 = type metadata accessor for PrefetchedRowsDecoder();
      uint64_t WitnessTable = swift_getWitnessTable();
      *(void *)&long long v93 = v57;
      *((void *)&v93 + 1) = v59;
      uint64_t v96 = WitnessTable;
      uint64_t v94 = 0;
      sub_24F8CF2F0();
      return;
    }
    uint64_t v61 = v54;
    uint64_t v62 = v86;
    swift_beginAccess();
    sub_24F897660(v58 + 48, (uint64_t)&v122);
    if (!v124)
    {
      sub_24F7783C0((uint64_t)&v122, qword_26B1F7980);
      uint64_t v95 = v55;
      uint64_t v96 = v62;
      uint64_t v78 = sub_24F76ADC4((uint64_t *)&v93);
      v79 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v55 - 8) + 16);
      v79(v78, v61, v55);
      sub_24F77A91C((uint64_t)&v93, (uint64_t)&v122, qword_26B1F7980);
      swift_beginAccess();
      sub_24F8976C8((uint64_t)&v122, v58 + 48);
      swift_endAccess();
      uint64_t v80 = sub_24F76BC5C();
      sub_24F781274(&qword_26B1F7260);
      uint64_t v81 = swift_initStackObject();
      *(_OWORD *)(v81 + 16) = xmmword_24F8DDBF0;
      *(void *)(v81 + 56) = v55;
      *(void *)(v81 + 64) = v62;
      uint64_t v82 = sub_24F76ADC4((uint64_t *)(v81 + 32));
      v79(v82, v61, v55);
      *(void *)&long long v93 = v80;
      sub_24F76B568();
      sub_24F891800(v85, (uint64_t)v88, v93, v92, v87);
      goto LABEL_16;
    }
    sub_24F794DE0(&v122, (uint64_t)&v93);
    sub_24F781274((uint64_t *)&unk_26B1F7C88);
    uint64_t v63 = swift_allocObject();
    *(_OWORD *)(v63 + 16) = xmmword_24F8E0850;
    sub_24F7811D0(&v93, v95);
    *(void *)(v63 + 32) = sub_24F8CFFE0();
    *(void *)(v63 + 40) = v64;
    uint64_t v65 = v55;
    *(void *)(v63 + 48) = sub_24F8CFFE0();
    *(void *)(v63 + 56) = v66;
    *(void *)&long long v122 = v63;
    swift_bridgeObjectRetain();
    uint64_t v67 = v89;
    sub_24F841A48((uint64_t *)&v122);
    if (!v67)
    {
      swift_bridgeObjectRelease();
      uint64_t v68 = v122;
      uint64_t v69 = sub_24F8CF850();
      swift_allocError();
      char v71 = v70;
      uint64_t v92 = (uint64_t)v70 + *(int *)(sub_24F781274(&qword_269A2C358) + 48);
      v71[3] = v65;
      v71[4] = v62;
      uint64_t v72 = sub_24F76ADC4(v71);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v65 - 8) + 16))(v72, v61, v65);
      sub_24F76BC5C();
      strcpy((char *)&v122, "No such key: ");
      HIWORD(v122) = -4864;
      uint64_t v116 = v68;
      sub_24F781274(&qword_26B1F7F48);
      sub_24F778988((unint64_t *)&qword_26B1F7EB0, &qword_26B1F7F48);
      sub_24F8CED30();
      swift_release();
      sub_24F8CEEB0();
      swift_bridgeObjectRelease();
      sub_24F8CF840();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v69 - 8) + 104))(v71, *MEMORY[0x263F8DCA8], v69);
      swift_willThrow();
      _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&v93);
      return;
    }
    goto LABEL_35;
  }
  uint64_t v22 = v85;
  if (v9 == v85)
  {
    (*(void (**)(long long *__return_ptr))(v8[12] + 32))(&v93);
    long long v73 = v93;
    char v74 = v94;
    long long v122 = v93;
    char v123 = v94;
    sub_24F8914C0((uint64_t)v88, v86, v11);
    sub_24F7B6734((void *)v73, *((uint64_t *)&v73 + 1), v74);
LABEL_32:
    swift_dynamicCast();
    return;
  }
  uint64_t v23 = v92;
  uint64_t v24 = sub_24F76AD3C(v92);
  if (!v24)
  {
    uint64_t v75 = sub_24F76AE28(v23);
    if (!v75)
    {
      sub_24F76B2B8(v22, (uint64_t)v88, v86, (uint64_t)v125);
      return;
    }
    uint64_t v95 = v75;
    uint64_t v96 = v76;
    sub_24F76ADC4((uint64_t *)&v93);
    static DatabaseValueConvertible.decode(fromRow:atUncheckedIndex:)();
    uint64_t v77 = &qword_26B1F7250;
    goto LABEL_31;
  }
  uint64_t v27 = v24;
  uint64_t v28 = v25;
  uint64_t v29 = v26;
  uint64_t v89 = 0;
  uint64_t v95 = v24;
  uint64_t v96 = v25;
  uint64_t v97 = v26;
  uint64_t v30 = sub_24F76ADC4((uint64_t *)&v93);
  uint64_t v31 = v30;
  uint64_t v32 = (sqlite3_stmt *)v88[8];
  if (!v32)
  {
    uint64_t v83 = v89;
    Row.fastDecode<A>(_:atUncheckedIndex:)();
    if (v83) {
      goto LABEL_27;
    }
LABEL_30:
    uint64_t v77 = &qword_26B1F6DC0;
LABEL_31:
    sub_24F781274(v77);
    goto LABEL_32;
  }
  if (v86 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v86 <= 0x7FFFFFFF)
  {
    MEMORY[0x270FA5388](v30);
    uint64_t v33 = v86;
    *(&v84 - 2) = (uint64_t)v88;
    *(&v84 - 1) = v33;
    uint64_t v34 = sqlite3_column_type(v32, v33);
    if (v34 == 5)
    {
LABEL_12:
      MEMORY[0x270FA5388](v34);
      *(&v84 - 2) = (uint64_t)sub_24F7FF1AC;
      *(&v84 - 1) = (uint64_t)(&v84 - 4);
      static DatabaseValueConvertible<>._valueMismatch(fromStatement:atUncheckedIndex:context:)((uint64_t)v32, v86, (uint64_t)sub_24F89787C, (uint64_t)(&v84 - 4), v27, v28, v29, v38, v84, v85, v86, v87, (uint64_t)v88, v89, v90, (uint64_t)v91, v92, v93, *((uint64_t *)&v93 + 1),
        v94,
        v95,
        v96,
        v97,
        v98,
        v99,
        v100,
        v101,
        v102,
        v103,
        v104,
        v105,
        v106,
        v107,
        v108,
        v109,
        v110,
        v111,
        v112,
        v113,
        v114,
        v115,
        v116,
        v117,
        v118,
        v119,
        v120,
        v121,
        v122);
LABEL_27:
      sub_24F8094B0((uint64_t)&v93);
      return;
    }
    uint64_t v125 = &v84;
    uint64_t v91 = (void *)v28;
    uint64_t v87 = sub_24F8CF610();
    v88 = &v84;
    uint64_t v35 = *(void *)(v87 - 8);
    MEMORY[0x270FA5388](v87);
    unint64_t v37 = (char *)&v84 - v36;
    (*(void (**)(sqlite3_stmt *, uint64_t, uint64_t, uint64_t))(v29 + 8))(v32, v86, v27, v29);
    if (sub_24F777048((uint64_t)v37, 1, v27) == 1)
    {
      uint64_t v34 = (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v37, v87);
      uint64_t v28 = (uint64_t)v91;
      goto LABEL_12;
    }
    (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v27 - 8) + 32))(v31, v37, v27);
    goto LABEL_30;
  }
  __break(1u);
LABEL_35:
  swift_release();
  __break(1u);
}

uint64_t sub_24F76AD3C(uint64_t a1)
{
  uint64_t result = swift_conformsToProtocol2();
  if (result)
  {
    if (swift_conformsToProtocol2()) {
      return a1;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t *sub_24F76ADC4(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_24F76AE28(uint64_t a1)
{
  if (swift_conformsToProtocol2()) {
    return a1;
  }
  else {
    return 0;
  }
}

void static DatabaseValueConvertible.decode(fromRow:atUncheckedIndex:)()
{
}

void sub_24F76AED4()
{
  sub_24F76FF94();
  uint64_t v5 = v1;
  uint64_t v7 = v6;
  uint64_t v8 = v6[8];
  if (!v8)
  {
    uint64_t v12 = v7[5];
    uint64_t v13 = v7[6];
    uint64_t v22 = v0;
    uint64_t v20 = v2;
    uint64_t v28 = v4;
    uint64_t v19 = v3;
    sub_24F7811D0(v7 + 2, v12);
    uint64_t v14 = (*(void *(**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(v13 + 48))(&v25, v5, v12, v13);
    char v21 = &v18;
    uint64_t v16 = v25;
    unint64_t v15 = v26;
    char v17 = v27;
    v23[0] = v25;
    v23[1] = v26;
    char v24 = v27;
    MEMORY[0x270FA5388](v14);
    v28(v23, v19);
    sub_24F781F10(v16, v15, v17);
    goto LABEL_6;
  }
  if (v1 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v1 <= 0x7FFFFFFF)
  {
    uint64_t v9 = MEMORY[0x270FA5388](v8);
    v11(v9, v5, v10);
LABEL_6:
    sub_24F77BC10();
    return;
  }
  __break(1u);
}

uint64_t sub_24F76B060(sqlite3_stmt *a1, int a2)
{
  sub_24F76B11C(a1, a2, (uint64_t)v6);
  uint64_t v2 = v6[0];
  unint64_t v3 = v6[1];
  char v4 = v7;
  sub_24F776E80();
  return sub_24F781F10(v2, v3, v4);
}

uint64_t sub_24F76B11C@<X0>(sqlite3_stmt *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v4 = sqlite3_column_type(a1, a2) - 1;
  uint64_t result = 0;
  unint64_t v6 = 0;
  char v7 = 4;
  switch(v4)
  {
    case 0:
      uint64_t v8 = (sqlite3_stmt *)sub_24F77AD28();
      uint64_t result = sqlite3_column_int64(v8, v9);
      unint64_t v6 = 0;
      char v7 = 0;
      goto LABEL_9;
    case 1:
      uint64_t v16 = (sqlite3_stmt *)sub_24F77AD28();
      *(double *)&uint64_t v18 = sqlite3_column_double(v16, v17);
      unint64_t v6 = 0;
      uint64_t result = v18;
      char v7 = 1;
      goto LABEL_9;
    case 2:
      uint64_t v19 = (sqlite3_stmt *)sub_24F77AD28();
      if (sqlite3_column_text(v19, v20))
      {
        uint64_t result = sub_24F8CEEE0();
        char v7 = 2;
LABEL_9:
        *(void *)a3 = result;
        *(void *)(a3 + 8) = v6;
        *(unsigned char *)(a3 + 16) = v7;
      }
      else
      {
        __break(1u);
LABEL_11:
        sub_24F8CF7D0();
        swift_bridgeObjectRelease();
        sub_24F8CFAE0();
        sub_24F8CEEB0();
        swift_bridgeObjectRelease();
        uint64_t result = sub_24F8CF9D0();
        __break(1u);
      }
      return result;
    case 3:
      uint64_t v10 = (sqlite3_stmt *)sub_24F77AD28();
      uint64_t result = (uint64_t)sqlite3_column_blob(v10, v11);
      if (result)
      {
        uint64_t v12 = result;
        uint64_t v13 = (sqlite3_stmt *)sub_24F77AD28();
        int v15 = sqlite3_column_bytes(v13, v14);
        uint64_t result = MEMORY[0x253363140](v12, v15);
        char v7 = 3;
      }
      else
      {
        char v7 = 3;
        unint64_t v6 = 0xC000000000000000;
      }
      goto LABEL_9;
    case 4:
      goto LABEL_9;
    default:
      goto LABEL_11;
  }
}

void sub_24F76B2B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v7 = (void *)*v4;
  sub_24F76BC5C();
  sub_24F781274(&qword_26B1F7260);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_24F8DDBF0;
  uint64_t v9 = v7[11];
  *(void *)(inited + 56) = v9;
  *(void *)(inited + 64) = v7[13];
  uint64_t v10 = sub_24F76ADC4((uint64_t *)(inited + 32));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v10, a4, v9);
  swift_retain();
  sub_24F76B568();
  uint64_t v11 = v7[12];
  type metadata accessor for ColumnDecoder();
  swift_getWitnessTable();
  uint64_t v12 = v18;
  sub_24F8CF2F0();
  if (v18)
  {
    id v13 = v18;
    sub_24F781274(&qword_26B1F7040);
    if (swift_dynamicCast())
    {

      uint64_t v14 = sub_24F8AD9C8(a3);
      unint64_t v16 = v15;
      uint64_t v19 = v14;
      uint64_t v17 = sub_24F8CFFE0();
      (*(void (**)(uint64_t))(v11 + 24))(v17);
      swift_bridgeObjectRelease();
      sub_24F8CE500();
      swift_release();
      sub_24F783E24(v19, v16);
    }
  }
}

uint64_t type metadata accessor for ColumnDecoder()
{
  return sub_24F777DE0();
}

void sub_24F76B568()
{
}

void sub_24F76B588()
{
  sub_24F777204();
  sub_24F76BA8C();
  if (v7)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v8 = v6;
  uint64_t v9 = v5;
  if (!sub_24F76B660() || v4 > *(void *)(v2 + 24) >> 1)
  {
    sub_24F76B824();
    uint64_t v2 = v9();
  }
  if (!*(void *)(v0 + 16))
  {
    if (!v3) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  sub_24F77ED30();
  if (v10 != v7)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_24F781274(v8);
  swift_arrayInitWithCopy();
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    uint64_t *v1 = v2;
    sub_24F773598();
    return;
  }
  sub_24F78240C();
  if (!v7)
  {
    *(void *)(v2 + 16) = v11;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

uint64_t sub_24F76B660()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t sub_24F76B680()
{
  return sub_24F7A1FC8(v1, v2, v3, v0);
}

uint64_t sub_24F76B6A0()
{
  return *(void *)(v0 - 72);
}

void sub_24F76B6C0()
{
  *(void *)(v0 + 16) = v2;
  uint64_t v5 = v0 + 16 * v4;
  *(void *)(v5 + 32) = v3;
  *(void *)(v5 + 40) = v1;
}

uint64_t sub_24F76B710(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  return sub_24F808CA0(a19, a13, 1);
}

void *sub_24F76B734(uint64_t a1, const void *a2)
{
  return memcpy((void *)(v2 + 960), a2, 0xA3uLL);
}

uint64_t sub_24F76B768()
{
  return swift_getAssociatedTypeWitness();
}

uint64_t sub_24F76B784()
{
  return v0;
}

uint64_t sub_24F76B798(uint64_t a1, uint64_t a2)
{
  return sub_24F7B00C4(v2, v3 - 216, a2);
}

unint64_t sub_24F76B7B8()
{
  return sub_24F782950();
}

void sub_24F76B7D0(uint64_t a1@<X8>)
{
  uint64_t v2 = (void *)(v1 + a1);
  *uint64_t v2 = 0;
  v2[1] = 0;
}

void sub_24F76B7F4(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0x474E495355;
  *(void *)(a1 + 40) = 0xE500000000000000;
}

uint64_t sub_24F76B840@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = a1 - 1;
  uint64_t result = *(void *)(v1 + v3 * v2 + 40);
  *(void *)(v1 + 16) = v3;
  return result;
}

uint64_t sub_24F76B870()
{
  return v0;
}

uint64_t sub_24F76B880()
{
  return v0;
}

uint64_t sub_24F76B8AC()
{
  return 0x73733A6D6D3A4848;
}

uint64_t sub_24F76B8C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  return sub_24F7786CC(a4, (uint64_t)va);
}

uint64_t sub_24F76B8E8()
{
  return v0;
}

uint64_t sub_24F76B8F4(uint64_t a1, uint64_t a2, char a3)
{
  sub_24F808CA0(a1, a2, a3);
  return sub_24F808CA0(v4, v3, 0);
}

void *sub_24F76B938(void *a1)
{
  return memcpy(a1, &STACK[0x4A0], 0xA3uLL);
}

uint64_t sub_24F76B950()
{
  return v0;
}

uint64_t sub_24F76B95C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_24F76B978()
{
  return *(void *)(v0 + 48);
}

uint64_t sub_24F76B98C()
{
  return v0;
}

uint64_t sub_24F76B9A4()
{
  return swift_getAssociatedTypeWitness();
}

uint64_t sub_24F76B9BC()
{
  return sub_24F8CEEB0();
}

uint64_t sub_24F76B9DC(void *a1, void *a2)
{
  return sub_24F866C00(a1, a2);
}

void sub_24F76B9E4(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>, uint64_t a4, uint64_t a5)
{
  a4 = v6;
  a5 = a3;
  uint64_t v8 = &a4;
  Database.execute(sql:arguments:)(*(Swift::String *)&a1, *(GRDBInternal::StatementArguments *)(&a2 - 1));
}

__n128 sub_24F76BA04(uint64_t a1, uint64_t a2)
{
  return *(__n128 *)a2;
}

void sub_24F76BA1C()
{
  sub_24F781818();
}

uint64_t sub_24F76BA40()
{
  return v0;
}

uint64_t sub_24F76BA50(uint64_t a1)
{
  uint64_t v5 = *(void *)(v3 - 72);
  return FetchRequest<>.fetchAll(_:)(v2, v1, a1, v5);
}

uint64_t sub_24F76BA78()
{
  return v0;
}

uint64_t sub_24F76BAAC()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_24F76BAD0()
{
  return swift_allocObject();
}

void *sub_24F76BAE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  return Database.primaryKey(_:)((uint64_t *)va, v9);
}

void sub_24F76BB14()
{
  sub_24F8183E4();
}

uint64_t sub_24F76BB38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  return sub_24F775458(v15, (uint64_t)va);
}

uint64_t sub_24F76BB58()
{
  return sub_24F8CEC70();
}

void sub_24F76BB78()
{
}

void sub_24F76BBA0()
{
  sub_24F777204();
  sub_24F77BB1C();
  if (v6)
  {
    sub_24F7737D0();
    if (v7 != v8)
    {
      sub_24F77C5C4();
      if (v7)
      {
        __break(1u);
        return;
      }
      sub_24F77E574();
    }
  }
  sub_24F77ECFC();
  if (v5)
  {
    sub_24F781274(v9);
    uint64_t v10 = (void *)sub_24F77B7EC();
    sub_24F77E584(v10);
  }
  else
  {
    uint64_t v5 = MEMORY[0x263F8EE78];
  }
  if (v3)
  {
    v1(v0 + 32, v4, v5 + 32);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    sub_24F781274(v2);
    sub_24F78185C();
  }
  swift_bridgeObjectRelease();
  sub_24F773598();
}

uint64_t sub_24F76BC5C()
{
  return swift_bridgeObjectRetain();
}

uint64_t destroy for SQL.Element(uint64_t a1)
{
  return sub_24F76C470(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
           *(void *)(a1 + 152),
           *(void *)(a1 + 160));
}

uint64_t sub_24F76BCC0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2;
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7)
  {
    uint64_t v56 = MEMORY[0x263F8EE78];
    sub_24F77C4AC();
    uint64_t v9 = v56;
    uint64_t v10 = a1 + 32;
    uint64_t v11 = v7 - 1;
    uint64_t v46 = a2;
    while (2)
    {
      sub_24F76C344(v10, (uint64_t)v52);
      sub_24F76C344((uint64_t)v52, (uint64_t)v53);
      switch(sub_24F76C840((uint64_t)v53))
      {
        case 1u:
          uint64_t v22 = sub_24F76C650((uint64_t)v53);
          sub_24F7AA6E8(v22, (uint64_t)v49);
          if (sub_24F83BB8C((uint64_t)v49) == 1)
          {
            uint64_t v23 = (void *)sub_24F83BB98((uint64_t)v49);
            memcpy(v55, v23, 0xA2uLL);
            sub_24F76C41C(v52);
            sub_24F7AA6E8(v22, (uint64_t)v47);
            char v24 = (void *)sub_24F83BB98((uint64_t)v47);
            sub_24F76C41C(v52);
            sub_24F76C41C(v52);
            sub_24F7D8D44(v24);
            sub_24F8C7698(v55, (uint64_t)__src);
            uint64_t v25 = v23[11];
            uint64_t v3 = v23[12];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v26 = v5;
            sub_24F7ABCFC(v25, v3);
            uint64_t v28 = v27;
            uint64_t v4 = v26;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            memcpy(v51, __src, 0xA8uLL);
            v51[168] = 0;
            *(void *)&v51[176] = v28;
            memcpy(v54, v51, sizeof(v54));
            sub_24F8C6B4C(a2, v29, v30, v31, v32, v33, v34, v35, v43, v44, v45, v46, v47[0], v47[1], v47[2], v47[3], v47[4], v47[5], v47[6],
              v47[7]);
            uint64_t v5 = v26;
            if (!v26)
            {
              sub_24F773CDC();
              sub_24F7AC0E8(v51);
              sub_24F76C41C(v52);
              sub_24F7800B0();
              sub_24F76C344((uint64_t)v52, (uint64_t)__dst);
              uint64_t v36 = __dst;
LABEL_21:
              uint64_t v39 = sub_24F76C650((uint64_t)v36);
              sub_24F85C5A4(v39);
              goto LABEL_12;
            }
            sub_24F7AC0E8(v51);
            sub_24F76C41C(v52);
            sub_24F7800B0();
            sub_24F76C344((uint64_t)v52, (uint64_t)__dst);
            uint64_t v40 = __dst;
          }
          else
          {
            uint64_t v37 = *(void *)sub_24F83BB98((uint64_t)v49);
            sub_24F76C41C(v52);
            sub_24F76C41C(v52);
            sub_24F76C41C(v52);
            swift_retain();
            uint64_t v38 = sub_24F76BCC0(v37, a2);
            if (!v5)
            {
              __dst[0] = v38;
              uint64_t v3 = sub_24F781274(&qword_26B1F7F48);
              sub_24F7871AC();
              sub_24F8CED30();
              sub_24F773CDC();
              swift_bridgeObjectRelease();
              sub_24F76C41C(v52);
              sub_24F7800B0();
              sub_24F77E314();
              uint64_t v36 = v51;
              goto LABEL_21;
            }
            sub_24F76C41C(v52);
            sub_24F7800B0();
            sub_24F77E314();
            uint64_t v40 = v51;
          }
          uint64_t v41 = sub_24F76C650((uint64_t)v40);
          sub_24F85C5A4(v41);
          swift_release();
LABEL_28:
          swift_release();
          break;
        case 2u:
          uint64_t v16 = (const void *)sub_24F76C650((uint64_t)v53);
          memcpy(__dst, v16, 0xA3uLL);
          sub_24F77E314();
          uint64_t v17 = (__n128 *)sub_24F76C650((uint64_t)v51);
          sub_24F76C41C(v52);
          sub_24F76F9E4(v17);
          uint64_t v15 = v5;
          sub_24F76D734();
          goto LABEL_9;
        case 3u:
          uint64_t v18 = (const void *)sub_24F76C650((uint64_t)v53);
          memcpy(__dst, v18, sizeof(__dst));
          sub_24F77E314();
          uint64_t v19 = (__n128 *)sub_24F76C650((uint64_t)v51);
          sub_24F76C41C(v52);
          sub_24F76C41C(v19);
          uint64_t v15 = v5;
          sub_24F7A3AC8(a2);
          goto LABEL_9;
        case 4u:
          id v13 = (const void *)sub_24F76C650((uint64_t)v53);
          memcpy(__dst, v13, 0xA3uLL);
          sub_24F77E314();
          uint64_t v14 = (__n128 *)sub_24F76C650((uint64_t)v51);
          sub_24F76C41C(v52);
          sub_24F76F9E4(v14);
          uint64_t v15 = v5;
          sub_24F880F70(a2);
LABEL_9:
          uint64_t v5 = v15;
          if (v15)
          {
            sub_24F76C41C(v52);
            sub_24F7800B0();
            swift_release();
            goto LABEL_28;
          }
          sub_24F773CDC();
          sub_24F76C41C(v52);
LABEL_11:
          sub_24F76C41C(v52);
LABEL_12:
          uint64_t v56 = v9;
          unint64_t v20 = *(void *)(v9 + 16);
          if (v20 >= *(void *)(v9 + 24) >> 1)
          {
            sub_24F77C4AC();
            uint64_t v9 = v56;
          }
          *(void *)(v9 + 16) = v20 + 1;
          uint64_t v21 = v9 + 16 * v20;
          *(void *)(v21 + 32) = v3;
          *(void *)(v21 + 40) = v4;
          if (!v11) {
            goto LABEL_28;
          }
          v10 += 184;
          --v11;
          a2 = v46;
          continue;
        default:
          uint64_t v12 = sub_24F76C650((uint64_t)v53);
          uint64_t v3 = *(void *)v12;
          uint64_t v4 = *(void *)(v12 + 8);
          *(_OWORD *)uint64_t v51 = *(_OWORD *)(v12 + 16);
          sub_24F76C41C(v52);
          swift_bridgeObjectRetain();
          if (sub_24F76C84C((long long *)v51)) {
            goto LABEL_11;
          }
          uint64_t result = sub_24F8CF9D0();
          __break(1u);
          return result;
      }
      break;
    }
  }
  else
  {
    swift_release();
    return MEMORY[0x263F8EE78];
  }
  return v9;
}

uint64_t sub_24F76C344(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *initializeWithTake for SQLSelection.Impl(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xB8uLL);
}

void *sub_24F76C3A8(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20],
    a1[21],
    a1[22]);
  return a1;
}

uint64_t sub_24F76C41C(__n128 *a1)
{
  __n128 v2 = sub_24F77AD50(a1);
  v11(v3, v4, v5, v6, v7, v8, v9, v10, v2.n128_u64[0], v2.n128_u64[1], v12, v13, v14, v15, v16);
  return v1;
}

uint64_t sub_24F76C470(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unint64_t a21)
{
  switch((a21 >> 58) & 7)
  {
    case 0uLL:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 1uLL:
      uint64_t result = sub_24F79138C(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
                 a20,
                 a21);
      break;
    case 2uLL:
      uint64_t result = sub_24F76C98C(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
                 a20,
                 a21);
      break;
    case 3uLL:
      unint64_t v22 = a21 & 0xE3FFFFFFFFFFFFFFLL;
      uint64_t result = sub_24F799458(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
                 a20,
                 v22);
      break;
    case 4uLL:
      uint64_t result = sub_24F7995B4(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
                 a20,
                 a21);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_24F76C650(uint64_t result)
{
  *(void *)(result + 160) &= 0xE3FFFFFFFFFFFFFFLL;
  return result;
}

uint64_t sub_24F76C660(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unint64_t a21)
{
  switch((a21 >> 58) & 7)
  {
    case 0uLL:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t result = swift_bridgeObjectRetain();
      break;
    case 1uLL:
      uint64_t result = sub_24F7958C8(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
                 a20,
                 a21);
      break;
    case 2uLL:
      uint64_t result = sub_24F76CB14(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
                 a20,
                 a21);
      break;
    case 3uLL:
      unint64_t v22 = a21 & 0xE3FFFFFFFFFFFFFFLL;
      uint64_t result = sub_24F795A3C(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
                 a20,
                 v22);
      break;
    case 4uLL:
      uint64_t result = sub_24F795B98(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
                 a20,
                 a21);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_24F76C840(uint64_t a1)
{
  return (*(void *)(a1 + 160) >> 58) & 7;
}

uint64_t sub_24F76C84C(long long *a1)
{
  sub_24F76C89C();
  long long v3 = *a1;
  LOBYTE(a1) = sub_24F76C910(&v3);
  swift_release();
  return a1 & 1;
}

uint64_t sub_24F76C89C()
{
  uint64_t v1 = *(void *)(v0 + 24);
  if (v1 < 0)
  {
    uint64_t v3 = *(void *)(v0 + 16);
    uint64_t v4 = swift_retain();
    uint64_t v5 = sub_24F76C89C(v4);
    sub_24F768C88(v3, v1);
    return v5;
  }
  else
  {
    return swift_retain();
  }
}

uint64_t sub_24F76C910(void *a1)
{
  uint64_t v2 = a1[1];
  if (*(void *)(*a1 + 16) || *(void *)(v2 + 16))
  {
    if (*(unsigned char *)(v1 + 32)) {
      return 0;
    }
    *(void *)&long long v4 = *a1;
    *((void *)&v4 + 1) = v2;
    swift_beginAccess();
    static StatementArguments.+= infix(_:_:)(v1 + 16, &v4);
    swift_endAccess();
  }
  return 1;
}

uint64_t sub_24F76C98C(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unsigned int a21)
{
  char v21 = a5;
  switch((a21 >> 19) & 0x1F)
  {
    case 0u:
    case 3u:
    case 5u:
      goto LABEL_14;
    case 1u:
      swift_bridgeObjectRelease();
      goto LABEL_2;
    case 2u:
      return sub_24F781F10(result, a2, a3);
    case 4u:
    case 0xAu:
      return sub_24F79138C(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
               a20,
               a21);
    case 6u:
    case 7u:
    case 8u:
    case 0xBu:
    case 0xCu:
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x12u:
    case 0x13u:
    case 0x14u:
LABEL_2:
      return swift_release();
    case 9u:
      swift_bridgeObjectRelease();
      sub_24F781F10(a3, a4, v21);
      goto LABEL_14;
    case 0x11u:
      swift_bridgeObjectRelease();
LABEL_14:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_24F76CB14(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unsigned int a21)
{
  char v21 = a5;
  switch((a21 >> 19) & 0x1F)
  {
    case 0u:
    case 3u:
    case 5u:
      goto LABEL_14;
    case 1u:
      swift_bridgeObjectRetain();
      goto LABEL_2;
    case 2u:
      return sub_24F781F34(result, a2, a3);
    case 4u:
    case 0xAu:
      return sub_24F7958C8(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
               a20,
               a21);
    case 6u:
    case 7u:
    case 8u:
    case 0xBu:
    case 0xCu:
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x12u:
    case 0x13u:
    case 0x14u:
LABEL_2:
      return swift_retain();
    case 9u:
      swift_bridgeObjectRetain();
      sub_24F781F34(a3, a4, v21);
      goto LABEL_14;
    case 0x11u:
      swift_bridgeObjectRetain();
LABEL_14:
      uint64_t result = swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

void sub_24F76CC9C(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X4>, uint64_t a5@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    uint64_t v9 = a2[1];
    if (*(void *)(v9 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v10 = sub_24F782950();
      if (v11)
      {
        uint64_t v12 = *(void *)(v9 + 56) + 24 * v10;
        uint64_t v13 = *(void *)v12;
        uint64_t v14 = *(void *)(v12 + 8);
        char v15 = *(unsigned char *)(v12 + 16);
        uint64_t v16 = sub_24F76B8E8();
        sub_24F781F34(v16, v17, v15);
        swift_bridgeObjectRelease();
        *(void *)a5 = v13;
        *(void *)(a5 + 8) = v14;
        *(unsigned char *)(a5 + 16) = v15;
        return;
      }
      swift_bridgeObjectRelease();
    }
    if (*(void *)(*a2 + 16)) {
      goto LABEL_9;
    }
    sub_24F8CF7D0();
    swift_bridgeObjectRelease();
    sub_24F8CEEB0();
  }
  else
  {
    if (*(void *)(*a2 + 16))
    {
LABEL_9:
      sub_24F76CE74(a5);
      return;
    }
    sub_24F8CF7D0();
    swift_bridgeObjectRelease();
    sub_24F8CFAE0();
    sub_24F8CEEB0();
    swift_bridgeObjectRelease();
  }
  Statement.sql.getter();
  sub_24F7DC6DC();
  uint64_t v18 = sub_24F770FA4();
  sub_24F77BEA4(v18, v19);
  *a4 = a3;
}

void sub_24F76CE74(uint64_t a1@<X8>)
{
  uint64_t v2 = *v1;
  if (*(void *)(*v1 + 16))
  {
    uint64_t v3 = *(void *)(v2 + 32);
    unint64_t v4 = *(void *)(v2 + 40);
    *(void *)a1 = v3;
    *(void *)(a1 + 8) = v4;
    char v5 = *(unsigned char *)(v2 + 48);
    *(unsigned char *)(a1 + 16) = v5;
    sub_24F781F34(v3, v4, v5);
    sub_24F76D544();
  }
  else
  {
    __break(1u);
  }
}

uint64_t static StatementArguments.+= infix(_:_:)(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  if (*(void *)(StatementArguments.append(contentsOf:)((uint64_t)&v3) + 16))
  {
    *(void *)&long long v3 = 0;
    *((void *)&v3 + 1) = 0xE000000000000000;
    sub_24F8CF7D0();
    swift_bridgeObjectRelease();
    *(void *)&long long v3 = 0xD000000000000024;
    *((void *)&v3 + 1) = 0x800000024F8D4C60;
    swift_bridgeObjectRetain();
    sub_24F781274(&qword_269A2C408);
    sub_24F778988(&qword_269A2C410, &qword_269A2C408);
    sub_24F7B0E7C();
    sub_24F8CF050();
    swift_bridgeObjectRelease();
    sub_24F8CEEB0();
    swift_bridgeObjectRelease();
    uint64_t result = sub_24F8CF9D0();
    __break(1u);
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t StatementArguments.append(contentsOf:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v67 = sub_24F8CEC70();
  swift_bridgeObjectRetain();
  sub_24F76D490();
  uint64_t v68 = v3 + 64;
  sub_24F77DB00();
  unint64_t v6 = v5 & v4;
  int64_t v69 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v70 = v3;
  swift_bridgeObjectRetain();
  int64_t v8 = 0;
  if (!v6) {
    goto LABEL_3;
  }
LABEL_2:
  uint64_t v71 = (v6 - 1) & v6;
  int64_t v72 = v8;
  for (unint64_t i = __clz(__rbit64(v6)) | (v8 << 6); ; unint64_t i = __clz(__rbit64(v11)) + (v12 << 6))
  {
    uint64_t v14 = (uint64_t *)(*(void *)(v70 + 48) + 16 * i);
    uint64_t v16 = *v14;
    uint64_t v15 = v14[1];
    uint64_t v17 = *(void *)(v70 + 56) + 24 * i;
    uint64_t v19 = *(void *)v17;
    uint64_t v18 = *(void *)(v17 + 8);
    char v20 = *(unsigned char *)(v17 + 16);
    uint64_t v21 = sub_24F781A14();
    sub_24F781F34(v21, v22, v20);
    uint64_t v23 = sub_24F781A14();
    char v73 = v20;
    sub_24F781F34(v23, v24, v20);
    swift_bridgeObjectRetain();
    swift_isUniquelyReferenced_nonNull_native();
    char v74 = *(void **)(v2 + 8);
    *(void *)(v2 + 8) = 0x8000000000000000;
    sub_24F76B7B8();
    sub_24F7824F8();
    if (__OFADD__(v27, v28))
    {
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    unint64_t v29 = v25;
    char v30 = v26;
    sub_24F781274(&qword_26B1F58F8);
    if (sub_24F8CF980())
    {
      unint64_t v31 = sub_24F76B7B8();
      if ((v30 & 1) != (v32 & 1)) {
        goto LABEL_42;
      }
      unint64_t v29 = v31;
    }
    if (v30)
    {
      uint64_t v40 = v74[7] + 24 * v29;
      uint64_t v42 = *(void *)v40;
      unint64_t v41 = *(void *)(v40 + 8);
      char v43 = *(unsigned char *)(v40 + 16);
      *(void *)uint64_t v40 = v19;
      *(void *)(v40 + 8) = v18;
      *(unsigned char *)(v40 + 16) = v20;
      *(void *)(v2 + 8) = v74;
      swift_bridgeObjectRelease();
      unint64_t v65 = v41;
      uint64_t v66 = v42;
      char v64 = v43;
      sub_24F781F34(v42, v41, v43);
      swift_isUniquelyReferenced_nonNull_native();
      sub_24F76B7B8();
      char v45 = v44;
      sub_24F7824F8();
      if (__OFADD__(v47, v48)) {
        goto LABEL_40;
      }
      unint64_t v49 = v46;
      if (sub_24F8CF980())
      {
        unint64_t v50 = sub_24F76B7B8();
        if ((v45 & 1) != (v51 & 1)) {
          goto LABEL_42;
        }
        unint64_t v49 = v50;
      }
      if (v45)
      {
        uint64_t v52 = *(void *)(v67 + 56) + 24 * v49;
        sub_24F781F10(*(void *)v52, *(void *)(v52 + 8), *(unsigned char *)(v52 + 16));
        unint64_t v54 = v41;
        uint64_t v53 = v66;
        *(void *)uint64_t v52 = v66;
        *(void *)(v52 + 8) = v65;
        *(unsigned char *)(v52 + 16) = v64;
        char v55 = v64;
      }
      else
      {
        sub_24F77BA6C(v67 + 8 * (v49 >> 6));
        uint64_t v57 = (void *)(v56[6] + 16 * v49);
        *uint64_t v57 = v16;
        v57[1] = v15;
        uint64_t v58 = v56[7] + 24 * v49;
        unint64_t v54 = v41;
        uint64_t v53 = v66;
        *(void *)uint64_t v58 = v66;
        *(void *)(v58 + 8) = v65;
        char v55 = v64;
        *(unsigned char *)(v58 + 16) = v64;
        uint64_t v59 = v56[2];
        BOOL v36 = __OFADD__(v59, 1);
        uint64_t v60 = v59 + 1;
        if (v36) {
          goto LABEL_41;
        }
        v56[2] = v60;
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v61 = sub_24F781A14();
      sub_24F781F10(v61, v62, v73);
      sub_24F781F10(v53, v54, v55);
    }
    else
    {
      v74[(v29 >> 6) + 8] |= 1 << v29;
      uint64_t v33 = (void *)(v74[6] + 16 * v29);
      *uint64_t v33 = v16;
      v33[1] = v15;
      uint64_t v34 = v74[7] + 24 * v29;
      *(void *)uint64_t v34 = v19;
      *(void *)(v34 + 8) = v18;
      *(unsigned char *)(v34 + 16) = v20;
      uint64_t v35 = v74[2];
      BOOL v36 = __OFADD__(v35, 1);
      uint64_t v37 = v35 + 1;
      if (v36) {
        goto LABEL_37;
      }
      v74[2] = v37;
      *(void *)(v2 + 8) = v74;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v38 = sub_24F781A14();
      sub_24F781F10(v38, v39, v20);
      swift_bridgeObjectRelease();
    }
    unint64_t v6 = v71;
    int64_t v8 = v72;
    if (v71) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v10 = v8 + 1;
    if (__OFADD__(v8, 1)) {
      goto LABEL_38;
    }
    if (v10 >= v69) {
      goto LABEL_35;
    }
    unint64_t v11 = *(void *)(v68 + 8 * v10);
    int64_t v12 = v8 + 1;
    if (!v11)
    {
      int64_t v12 = v8 + 2;
      if (v8 + 2 >= v69) {
        goto LABEL_35;
      }
      unint64_t v11 = *(void *)(v68 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v8 + 3;
        if (v8 + 3 >= v69) {
          goto LABEL_35;
        }
        unint64_t v11 = *(void *)(v68 + 8 * v12);
        if (!v11) {
          break;
        }
      }
    }
LABEL_16:
    uint64_t v71 = (v11 - 1) & v11;
    int64_t v72 = v12;
  }
  uint64_t v13 = v8 + 4;
  if (v8 + 4 >= v69)
  {
LABEL_35:
    swift_release();
    return v67;
  }
  unint64_t v11 = *(void *)(v68 + 8 * v13);
  if (v11)
  {
    int64_t v12 = v8 + 4;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v12 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v12 >= v69) {
      goto LABEL_35;
    }
    unint64_t v11 = *(void *)(v68 + 8 * v12);
    ++v13;
    if (v11) {
      goto LABEL_16;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  uint64_t result = sub_24F8CFEA0();
  __break(1u);
  return result;
}

void sub_24F76D490()
{
  sub_24F7829D8();
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_24F76B660() || (sub_24F778D4C(), !(v6 ^ v4 | v5)))
  {
    sub_24F76B824();
    sub_24F76D6F8();
    uint64_t v2 = v7;
  }
  if (!*(void *)(v0 + 16))
  {
    if (!v3) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  sub_24F77ED30();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_24F77BF40(v8);
  swift_arrayInitWithCopy();
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    void *v1 = v2;
    return;
  }
  sub_24F78240C();
  if (!v4)
  {
    *(void *)(v2 + 16) = v9;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

void sub_24F76D544()
{
  sub_24F777204();
  if (v4 < 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  sub_24F76D720();
  if (v6 != v7)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v8 = v5;
  uint64_t v9 = v2 - v5;
  if (__OFSUB__(v2, v5))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v10 = v5 - v2;
  if (__OFSUB__(0, v9))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (__OFADD__(v3, v10))
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (!swift_isUniquelyReferenced_nonNull_native() || v3 - v9 > *(void *)(v0 + 24) >> 1)
  {
    sub_24F76D6F8();
    uint64_t v0 = v11;
  }
  swift_arrayDestroy();
  if (!v9) {
    goto LABEL_18;
  }
  uint64_t v12 = *(void *)(v0 + 16);
  if (__OFSUB__(v12, v2)) {
    goto LABEL_24;
  }
  uint64_t v13 = (const void *)(v0 + 32 + 24 * v2);
  if (v8 != v2 || (unint64_t)v13 + 24 * (v12 - v2) <= v0 + 32 + 24 * v8)
  {
    memmove((void *)(v0 + 32 + 24 * v8), v13, 24 * (v12 - v2));
    uint64_t v12 = *(void *)(v0 + 16);
  }
  BOOL v7 = __OFADD__(v12, v10);
  uint64_t v15 = v12 - v9;
  if (!v7)
  {
    *(void *)(v0 + 16) = v15;
LABEL_18:
    void *v1 = v0;
    sub_24F773598();
    return;
  }
LABEL_25:
  __break(1u);
}

void sub_24F76D650()
{
  sub_24F777204();
  sub_24F77BB1C();
  if (v4)
  {
    sub_24F7737D0();
    if (v5 != v6)
    {
      sub_24F77C5C4();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_24F77E574();
    }
  }
  sub_24F77ECFC();
  if (v3)
  {
    sub_24F781274(v7);
    uint64_t v8 = (void *)sub_24F77B7EC();
    sub_24F77E584(v8);
  }
  sub_24F77CD7C();
  if (v2)
  {
    uint64_t v11 = sub_24F77B808(v9, v10);
    v1(v11);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    sub_24F7812B8();
  }
  swift_bridgeObjectRelease();
  sub_24F773598();
}

void sub_24F76D6F8()
{
}

void sub_24F76D734()
{
  sub_24F76FF94();
  char v3 = v2;
  uint64_t v5 = v4;
  sub_24F76F710(v0, (uint64_t)v106);
  sub_24F76F710((uint64_t)v106, (uint64_t)v107);
  switch(sub_24F76F978((uint64_t)v107))
  {
    case 1u:
      uint64_t v19 = *(void *)(sub_24F76F774((uint64_t)v107) + 16);
      sub_24F783010();
      swift_bridgeObjectRetain();
      swift_retain();
      sub_24F829160(v19);
      if (v20)
      {
        sub_24F8CEEB0();
        sub_24F7776BC();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_24F8CEEB0();
        swift_bridgeObjectRelease();
        sub_24F8CEEB0();
        sub_24F7776BC();
        swift_bridgeObjectRelease();
        *(void *)uint64_t v104 = 34;
        *(void *)&v104[8] = 0xE100000000000000;
        swift_bridgeObjectRetain();
        sub_24F8CEEB0();
        swift_release();
        swift_bridgeObjectRelease();
LABEL_78:
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_24F81CE20();
        sub_24F8CEEB0();
        sub_24F7776BC();
        swift_bridgeObjectRelease();
        swift_release();
      }
      break;
    case 2u:
      uint64_t v24 = sub_24F76F774((uint64_t)v107);
      uint64_t v26 = *(void *)v24;
      uint64_t v25 = *(void *)(v24 + 8);
      int v27 = *(unsigned __int8 *)(v24 + 16);
      if (v27 == 4 && *(_OWORD *)v24 == 0) {
        break;
      }
      sub_24F781274(&qword_26B1F7AB0);
      uint64_t v29 = swift_allocObject();
      *(_OWORD *)(v29 + 16) = xmmword_24F8DDBF0;
      *(void *)(v29 + 56) = &type metadata for DatabaseValue;
      *(void *)(v29 + 64) = &protocol witness table for DatabaseValue;
      *(void *)(v29 + 32) = v26;
      *(void *)(v29 + 40) = v25;
      uint64_t v94 = v25;
      char v93 = v27;
      *(unsigned char *)(v29 + 48) = v27;
      sub_24F76F710((uint64_t)v106, (uint64_t)v104);
      uint64_t v30 = sub_24F76F774((uint64_t)v104);
      uint64_t v31 = *(void *)v30;
      unint64_t v32 = *(void *)(v30 + 8);
      char v33 = *(unsigned char *)(v30 + 16);
      uint64_t v34 = sub_24F783010();
      sub_24F781F34(*(void *)v34, *(void *)(v34 + 8), *(unsigned char *)(v34 + 16));
      sub_24F781F34(v31, v32, v33);
      sub_24F780F38(v29, v103);
      sub_24F776020();
      *(void *)uint64_t v103 = v31;
      *(void *)&v103[8] = v32;
      LOBYTE(v29) = sub_24F76C84C((long long *)v103);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v29) {
        goto LABEL_24;
      }
      uint64_t v85 = sub_24F829230();
      uint64_t v86 = swift_allocObject();
      *(_OWORD *)(v86 + 16) = xmmword_24F8DDBF0;
      *(void *)(v86 + 56) = &type metadata for DatabaseValue;
      *(void *)(v86 + 64) = &protocol witness table for DatabaseValue;
      *(void *)(v86 + 32) = v26;
      *(void *)(v86 + 40) = v94;
      *(unsigned char *)(v86 + 48) = v93;
      sub_24F76F710((uint64_t)v106, (uint64_t)v103);
      sub_24F780C68((uint64_t)v103);
      sub_24F780F38(v86, v102);
      long long v87 = v102[0];
      memset(v102, 0, 40);
      sub_24F8827D0(v85, 0x51205443454C4553, 0xEF293F2845544F55, v87, *((uint64_t *)&v87 + 1), (uint64_t)v102);
      sub_24F81CD30();
      swift_release();
      if (v1)
      {
        sub_24F76F86C(v106);
        sub_24F7783C0((uint64_t)v102, &qword_26B1F7F10);
LABEL_46:
        swift_bridgeObjectRelease();
        goto LABEL_52;
      }
      sub_24F7783C0((uint64_t)v102, &qword_26B1F7F10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v32) {
        goto LABEL_94;
      }
      __break(1u);
      goto LABEL_101;
    case 3u:
      sub_24F81D020();
      sub_24F76F86C(v106);
      swift_retain();
      uint64_t v12 = sub_24F81CEAC();
      uint64_t v14 = sub_24F813694(v12, v13, 0);
      sub_24F76F86C(v106);
      if (!v1)
      {
        v105.n128_u64[0] = v14;
        sub_24F781274(&qword_26B1F7F48);
        sub_24F778988((unint64_t *)&qword_26B1F7EB0, &qword_26B1F7F48);
        sub_24F8CED30();
        swift_bridgeObjectRelease();
        sub_24F81CD80();
        sub_24F8CEEB0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_24F780830();
        swift_bridgeObjectRelease();
      }
      break;
    case 4u:
      unint64_t v41 = (const void *)sub_24F76F774((uint64_t)v107);
      memcpy(v104, v41, 0xA2uLL);
      uint64_t v42 = (__n128 *)sub_24F783010();
      sub_24F81C668(v42);
      sub_24F83B018(v5);
      if (v1) {
        goto LABEL_94;
      }
      *(void *)uint64_t v104 = 40;
      *(void *)&v104[8] = 0xE100000000000000;
      sub_24F8CEEB0();
      swift_bridgeObjectRelease();
      sub_24F81CF48();
      sub_24F780830();
      swift_bridgeObjectRelease();
      goto LABEL_24;
    case 5u:
      sub_24F81D020();
      sub_24F76F86C(v106);
      swift_retain();
      uint64_t v55 = sub_24F81CEAC();
      uint64_t v57 = sub_24F76BCC0(v55, v56);
      if (v1) {
        goto LABEL_94;
      }
      v105.n128_u64[0] = v57;
      sub_24F781274(&qword_26B1F7F48);
      sub_24F778988((unint64_t *)&qword_26B1F7EB0, &qword_26B1F7F48);
      sub_24F8CED30();
      sub_24F81CD30();
      swift_bridgeObjectRelease();
      sub_24F76F86C(v106);
      if (v3)
      {
        sub_24F81CD80();
        sub_24F77DB28();
        swift_bridgeObjectRelease();
        sub_24F780830();
      }
      break;
    case 6u:
      sub_24F76F774((uint64_t)v107);
      sub_24F81CDBC();
      BOOL v36 = memcpy(v103, v35, sizeof(v103));
      uint64_t v37 = sub_24F81CF8C((uint64_t)v36, (const void *)(v0 + 184));
      sub_24F76B734((uint64_t)v37, (const void *)(v0 + 352));
      v97[0] = 0;
      v97[1] = 0xE000000000000000;
      sub_24F775518();
      sub_24F76F86C(v106);
      sub_24F78036C();
      sub_24F781964();
      sub_24F781D70();
      sub_24F77FE04();
      if (v1)
      {
        sub_24F76F86C(&v105);
        goto LABEL_27;
      }
      sub_24F8CEEB0();
      swift_bridgeObjectRelease();
      sub_24F77B5BC();
      sub_24F8CEEB0();
      swift_bridgeObjectRelease();
      sub_24F77B5BC();
      sub_24F778CCC(v102);
      sub_24F77FE04();
      sub_24F8CEEB0();
      swift_bridgeObjectRelease();
      sub_24F8CEEB0();
      memcpy(v102, &v105, 0xA3uLL);
      sub_24F77FE04();
      sub_24F8CEEB0();
      swift_bridgeObjectRelease();
      if (v3)
      {
        *(void *)&v102[0] = 40;
        *((void *)&v102[0] + 1) = 0xE100000000000000;
        sub_24F77DB28();
        swift_bridgeObjectRelease();
        sub_24F780830();
      }
      sub_24F76F86C(&v105);
      sub_24F781964();
      sub_24F78036C();
      goto LABEL_94;
    case 7u:
      uint64_t v61 = sub_24F76F774((uint64_t)v107);
      uint64_t v62 = *(void *)v61;
      uint64_t v63 = sub_24F81CF8C(v61, (const void *)(*(void *)v61 + 32));
      sub_24F76B734((uint64_t)v63, (const void *)(v62 + 200));
      *(void *)&v102[0] = 0;
      *((void *)&v102[0] + 1) = 0xE000000000000000;
      sub_24F778CCC(v103);
      sub_24F76F86C(v106);
      swift_bridgeObjectRetain();
      sub_24F781964();
      sub_24F781D70();
      sub_24F77FE04();
      if (!v1) {
        goto LABEL_6;
      }
      swift_bridgeObjectRelease();
      goto LABEL_49;
    case 8u:
      uint64_t v17 = *(void *)sub_24F76F774((uint64_t)v107);
      uint64_t v18 = memcpy(v103, (const void *)(v17 + 48), sizeof(v103));
      sub_24F81CF8C((uint64_t)v18, (const void *)(v17 + 216));
      sub_24F7D9FD0(v17 + 384, (uint64_t)&v105);
      uint64_t v98 = 0;
      unint64_t v99 = 0xE000000000000000;
      sub_24F775518();
      sub_24F76F86C(v106);
      sub_24F78036C();
      sub_24F781964();
      sub_24F81C3B4((uint64_t)&v105);
      sub_24F77FE04();
      if (v1)
      {
        sub_24F81C3B4((uint64_t)&v105);
LABEL_27:
        sub_24F76F86C((__n128 *)v104);
        uint64_t v38 = (__n128 *)v103;
        goto LABEL_93;
      }
      sub_24F8CEEB0();
      swift_bridgeObjectRelease();
      sub_24F77B5BC();
      swift_bridgeObjectRetain();
      sub_24F8CEEB0();
      swift_bridgeObjectRelease();
      sub_24F77B5BC();
      sub_24F778CCC(v102);
      sub_24F77FE04();
      sub_24F8CEEB0();
      swift_bridgeObjectRelease();
      uint64_t v100 = v98;
      unint64_t v101 = v99;
      sub_24F7D9FD0((uint64_t)&v105, (uint64_t)v97);
      if (sub_24F7996B8((uint64_t)v97) != 1)
      {
        v96[21] = 0;
        v96[22] = 0xE000000000000000;
        sub_24F81C3B4((uint64_t)&v105);
        sub_24F8CEEB0();
        memcpy(v96, v97, 0xA3uLL);
        sub_24F77FE04();
        sub_24F8CEEB0();
        swift_bridgeObjectRelease();
        sub_24F8CEEB0();
        swift_bridgeObjectRelease();
        sub_24F81C3B4((uint64_t)&v105);
      }
      if (v3)
      {
        v96[0] = 40;
        v96[1] = 0xE100000000000000;
        sub_24F8CEEB0();
        swift_bridgeObjectRelease();
        sub_24F780830();
        sub_24F81C3B4((uint64_t)&v105);
        sub_24F76F86C((__n128 *)v104);
        sub_24F78036C();
        goto LABEL_94;
      }
      sub_24F81C3B4((uint64_t)&v105);
      sub_24F76F86C((__n128 *)v104);
      sub_24F78036C();
      sub_24F76F86C(v106);
      break;
    case 9u:
      char v95 = v3;
      uint64_t v64 = sub_24F76F774((uint64_t)v107);
      uint64_t v66 = *(void *)(v64 + 16);
      unint64_t v65 = *(void *)(v64 + 24);
      char v67 = *(unsigned char *)(v64 + 32);
      sub_24F76F86C(v106);
      swift_retain();
      uint64_t v68 = sub_24F81CEAC();
      uint64_t v70 = sub_24F813694(v68, v69, 1);
      if (v1)
      {
        swift_bridgeObjectRelease();
        sub_24F781F10(v66, v65, v67);
        goto LABEL_52;
      }
      uint64_t v84 = v70;
      swift_bridgeObjectRelease();
      v105.n128_u64[1] = 0xE100000000000000;
      swift_bridgeObjectRetain();
      sub_24F8CEEB0();
      swift_bridgeObjectRelease();
      sub_24F77B5BC();
      v105.n128_u64[0] = v84;
      sub_24F781274(&qword_26B1F7F48);
      sub_24F778988((unint64_t *)&qword_26B1F7EB0, &qword_26B1F7F48);
      sub_24F8CED30();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v95)
      {
        v105.n128_u64[0] = 40;
        v105.n128_u64[1] = 0xE100000000000000;
        sub_24F77DB28();
        swift_bridgeObjectRelease();
        sub_24F780830();
        swift_bridgeObjectRelease();
        sub_24F781F10(v66, v65, v67);
      }
      else
      {
        swift_bridgeObjectRelease();
        sub_24F781F10(v66, v65, v67);
      }
      break;
    case 0xAu:
      uint64_t v10 = (const void *)sub_24F76F774((uint64_t)v107);
      *(void *)uint64_t v103 = 0;
      *(void *)&v103[8] = 0xE000000000000000;
      uint64_t v11 = (__n128 *)sub_24F783010();
      sub_24F81C668(v11);
      sub_24F77DB28();
      swift_bridgeObjectRelease();
      sub_24F8CEEB0();
      memcpy(v104, v10, 0xA2uLL);
      sub_24F83B018(v5);
      if (v1) {
        goto LABEL_36;
      }
      sub_24F8CEEB0();
      swift_bridgeObjectRelease();
      sub_24F780830();
      sub_24F776020();
      if ((v3 & 1) == 0) {
        goto LABEL_94;
      }
      *(void *)uint64_t v104 = 40;
      *(void *)&v104[8] = 0xE100000000000000;
      sub_24F77DB28();
      swift_bridgeObjectRelease();
      sub_24F780830();
      goto LABEL_24;
    case 0xBu:
      sub_24F76F774((uint64_t)v107);
      sub_24F81CDBC();
      sub_24F76B734(v15, v16);
      memcpy(v103, (const void *)(v0 + 184), 0xA2uLL);
      *(void *)&v102[0] = 0;
      *((void *)&v102[0] + 1) = 0xE000000000000000;
      sub_24F7804E8();
      sub_24F76F86C(v106);
      sub_24F781D70();
      sub_24F81C668((__n128 *)v103);
      sub_24F77FE04();
      if (v1)
      {
        sub_24F81C668((__n128 *)v103);
        goto LABEL_42;
      }
      sub_24F8CEEB0();
      swift_bridgeObjectRelease();
      sub_24F77B5BC();
      sub_24F8CEEB0();
      swift_bridgeObjectRelease();
      sub_24F77B5BC();
      memcpy(v104, v103, 0xA2uLL);
      sub_24F7D3130(v5);
      sub_24F8CEEB0();
      swift_bridgeObjectRelease();
      if ((v3 & 1) == 0)
      {
LABEL_101:
        sub_24F81C668((__n128 *)v103);
LABEL_102:
        uint64_t v92 = &v105;
        goto LABEL_103;
      }
      *(void *)uint64_t v104 = 40;
      *(void *)&v104[8] = 0xE100000000000000;
      sub_24F77DB28();
      swift_bridgeObjectRelease();
      sub_24F780830();
      sub_24F81C668((__n128 *)v103);
LABEL_74:
      sub_24F76F86C(&v105);
      goto LABEL_24;
    case 0xCu:
      uint64_t v49 = sub_24F81D004();
      uint64_t v52 = *(void *)(v50 + 16);
      uint64_t v51 = *(void *)(v50 + 24);
      int v53 = *(unsigned __int8 *)(v50 + 32);
      sub_24F76B734(v49, (const void *)(v50 + 40));
      if (v53) {
        uint64_t v54 = 32;
      }
      else {
        uint64_t v54 = 0;
      }
      *(void *)uint64_t v104 = v52;
      *(void *)&v104[8] = v51;
      swift_bridgeObjectRetain();
      sub_24F8CEEB0();
      sub_24F76F86C(v106);
      sub_24F781D70();
      swift_bridgeObjectRelease();
      sub_24F7804E8();
      sub_24F77FE04();
      if (v54) {
        goto LABEL_41;
      }
      *(void *)uint64_t v104 = v52;
      *(void *)&v104[8] = v51;
      swift_bridgeObjectRetain();
      sub_24F8CEEB0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v3) {
        goto LABEL_72;
      }
      goto LABEL_102;
    case 0xDu:
      uint64_t v8 = sub_24F81D020();
      uint64_t v9 = sub_24F81CF8C(v8, (const void *)(v0 + 24));
      sub_24F76B734((uint64_t)v9, (const void *)(v0 + 192));
      *(void *)&v102[0] = 0;
      *((void *)&v102[0] + 1) = 0xE000000000000000;
      sub_24F778CCC(v103);
      sub_24F76F86C(v106);
      sub_24F781964();
      sub_24F781D70();
      sub_24F77FE04();
      if (v1)
      {
LABEL_49:
        sub_24F76F86C(&v105);
        uint64_t v38 = (__n128 *)v104;
        goto LABEL_93;
      }
LABEL_6:
      sub_24F8CEEB0();
      swift_bridgeObjectRelease();
      sub_24F77B5BC();
      sub_24F8CEEB0();
      swift_bridgeObjectRelease();
      sub_24F77B5BC();
      memcpy(v103, &v105, sizeof(v103));
      sub_24F77FE04();
      sub_24F8CEEB0();
      swift_bridgeObjectRelease();
      if (v3)
      {
        *(void *)uint64_t v103 = 40;
        *(void *)&v103[8] = 0xE100000000000000;
        sub_24F77DB28();
        swift_bridgeObjectRelease();
        sub_24F780830();
        sub_24F76F86C(&v105);
        sub_24F781964();
        sub_24F76F86C(v106);
        sub_24F776020();
        break;
      }
      sub_24F76F86C(&v105);
      uint64_t v92 = (__n128 *)v104;
      goto LABEL_103;
    case 0xEu:
      uint64_t v21 = sub_24F81D004();
      uint64_t v23 = *(void *)(v22 + 16);
      sub_24F76B734(v21, (const void *)(v22 + 24));
      *(void *)uint64_t v103 = 0;
      *(void *)&v103[8] = 0xE000000000000000;
      sub_24F76F86C(v106);
      swift_retain();
      sub_24F781D70();
      sub_24F829284(v23);
      sub_24F81CE20();
      sub_24F8CEEB0();
      sub_24F7776BC();
      swift_bridgeObjectRelease();
      sub_24F8CEEB0();
      swift_bridgeObjectRelease();
      sub_24F8CEEB0();
      sub_24F7804E8();
      sub_24F77FE04();
      if (v1)
      {
        swift_release();
LABEL_41:
        swift_bridgeObjectRelease();
LABEL_42:
        uint64_t v38 = &v105;
LABEL_93:
        sub_24F76F86C(v38);
        goto LABEL_94;
      }
      sub_24F8CEEB0();
      swift_bridgeObjectRelease();
      sub_24F776020();
      if ((v3 & 1) == 0)
      {
        sub_24F76F86C(&v105);
        swift_release();
        goto LABEL_94;
      }
      *(void *)uint64_t v104 = 40;
      *(void *)&v104[8] = 0xE100000000000000;
      sub_24F77DB28();
      swift_bridgeObjectRelease();
      sub_24F780830();
      sub_24F76F86C(&v105);
      swift_release();
LABEL_24:
      sub_24F76F86C(v106);
      break;
    case 0xFu:
      uint64_t v6 = sub_24F81D004();
      sub_24F76B734(v6, (const void *)(v7 + 16));
      *(void *)uint64_t v103 = 0;
      *(void *)&v103[8] = 0xE000000000000000;
      sub_24F76F86C(v106);
      sub_24F781D70();
      sub_24F8CEEB0();
      sub_24F7804E8();
      sub_24F77FE04();
      if (v1) {
        goto LABEL_41;
      }
      goto LABEL_57;
    case 0x10u:
      sub_24F76F774((uint64_t)v107);
      sub_24F770944(&v105);
      *(void *)uint64_t v103 = 0;
      *(void *)&v103[8] = 0xE000000000000000;
      sub_24F770944(v104);
      sub_24F76F86C(v106);
      sub_24F781D70();
      swift_bridgeObjectRetain();
      sub_24F76D734(v5, 0);
      if (v1) {
        goto LABEL_41;
      }
      sub_24F8CEEB0();
      swift_bridgeObjectRelease();
      sub_24F8CEEB0();
LABEL_57:
      sub_24F8CEEB0();
      swift_bridgeObjectRelease();
      sub_24F776020();
      if ((v3 & 1) == 0) {
        goto LABEL_102;
      }
LABEL_72:
      *(void *)uint64_t v104 = 40;
      *(void *)&v104[8] = 0xE100000000000000;
      goto LABEL_73;
    case 0x11u:
      uint64_t v58 = (void *)sub_24F76F774((uint64_t)v107);
      uint64_t v59 = v58[1];
      uint64_t v60 = v58[3];
      *(void *)uint64_t v104 = *v58;
      *(void *)&v104[8] = v59;
      swift_bridgeObjectRetain();
      sub_24F8CEEB0();
      sub_24F783010();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_retain();
      sub_24F813694(v60, v5, 0);
      if (v1) {
        goto LABEL_46;
      }
      swift_bridgeObjectRelease();
      sub_24F781274(&qword_26B1F7F48);
      sub_24F778988((unint64_t *)&qword_26B1F7EB0, &qword_26B1F7F48);
      sub_24F8CED30();
      swift_bridgeObjectRelease();
      *(void *)&v104[8] = v59;
      swift_bridgeObjectRetain();
      sub_24F77DB28();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_24F81CF48();
      sub_24F780830();
      goto LABEL_78;
    case 0x12u:
      sub_24F76F774((uint64_t)v107);
      sub_24F770944(&v105);
      *(void *)uint64_t v103 = 0;
      *(void *)&v103[8] = 0xE000000000000000;
      sub_24F770944(v104);
      sub_24F76F86C(v106);
      sub_24F781D70();
      sub_24F77FE04();
      if (v1) {
        goto LABEL_42;
      }
      sub_24F8CEEB0();
      swift_bridgeObjectRelease();
      sub_24F77B5BC();
      sub_24F8CEEB0();
      swift_bridgeObjectRelease();
      sub_24F776020();
      if ((v3 & 1) == 0) {
        goto LABEL_102;
      }
      *(void *)uint64_t v104 = 40;
      *(void *)&v104[8] = 0xE100000000000000;
LABEL_73:
      sub_24F77DB28();
      swift_bridgeObjectRelease();
      sub_24F780830();
      goto LABEL_74;
    case 0x13u:
      uint64_t v39 = *(void *)sub_24F76F774((uint64_t)v107);
      sub_24F783010();
      swift_retain();
      sub_24F829230();
      uint64_t v40 = sub_24F829718();
      Database.primaryKey(_:)(v104, v40);
      if (!v1)
      {
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v71 = *(void *)v104;
        uint64_t v72 = *(void *)&v104[8];
        unsigned __int8 v73 = v104[16];
        uint64_t v74 = sub_24F7F86CC();
        unsigned __int8 v75 = v73;
        uint64_t v77 = v76;
        sub_24F790830(v71, v72, v75);
        if (!v77)
        {
          while (1)
          {
LABEL_112:
            sub_24F8CF9D0();
            __break(1u);
          }
        }
        *(void *)uint64_t v103 = v74;
        *(void *)&v103[8] = v77;
        *(void *)&v103[16] = v39;
        sub_24F7ADE84((uint64_t)v103);
        sub_24F76F710((uint64_t)v103, (uint64_t)v104);
        sub_24F778CCC(v102);
        swift_retain();
        uint64_t v78 = sub_24F81CFC4();
        sub_24F76D734(v78, v79);
        sub_24F81CD30();
        swift_bridgeObjectRelease();
        uint64_t v92 = v106;
        goto LABEL_103;
      }
      sub_24F76F86C(v106);
      swift_release();
LABEL_52:
      swift_bridgeObjectRelease();
      break;
    case 0x14u:
      uint64_t v43 = sub_24F76F774((uint64_t)v107);
      uint64_t v44 = *(void *)v43;
      int v45 = *(unsigned __int8 *)(v43 + 8);
      sub_24F783010();
      swift_retain();
      sub_24F829230();
      uint64_t v46 = sub_24F829718();
      uint64_t v48 = sub_24F7F73F8(v46, v47);
      if (v1)
      {
        swift_release();
LABEL_36:
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v80 = (uint64_t)v48;
        swift_release();
        swift_bridgeObjectRelease();
        swift_retain();
        if (v45)
        {
          sub_24F813840(v80, v44);
          swift_bridgeObjectRelease();
          sub_24F774480();
          *(void *)&v102[0] = v82;
          *((void *)&v102[0] + 1) = v83;
          v102[1] = xmmword_24F8DF640;
          LOWORD(v102[2]) = 256;
          BYTE2(v102[2]) = 0;
        }
        else
        {
          sub_24F813CC4(v80, v44);
          uint64_t v81 = swift_bridgeObjectRelease();
          *(void *)&v102[0] = 21071;
          *((void *)&v102[0] + 1) = 0xE200000000000000;
          memset(&v102[1], 0, 17);
          *(_WORD *)((char *)&v102[2] + 1) = 1;
        }
        MEMORY[0x270FA5388](v81);
        sub_24F781274(&qword_26B1F5970);
        sub_24F778988((unint64_t *)&qword_26B1F5978, &qword_26B1F5970);
        swift_getKeyPath();
        swift_retain();
        sub_24F8C4C14();
        unint64_t v89 = v88;
        swift_release();
        sub_24F816D90((uint64_t)v102, v89, v103);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        memcpy(v104, v103, sizeof(v104));
        sub_24F775518();
        uint64_t v90 = sub_24F81CFC4();
        sub_24F76D734(v90, v91);
        sub_24F81CD30();
        uint64_t v92 = (__n128 *)v104;
LABEL_103:
        sub_24F76F86C(v92);
      }
LABEL_94:
      sub_24F76F86C(v106);
      break;
    case 0x15u:
      break;
    case 0x16u:
      goto LABEL_112;
    default:
      sub_24F76F774((uint64_t)v107);
      v105.n128_u64[0] = 34;
      v105.n128_u64[1] = 0xE100000000000000;
      sub_24F76F86C(v106);
      sub_24F8CEEB0();
      sub_24F8CEEB0();
      sub_24F76F86C(v106);
      break;
  }
  sub_24F77BC10();
}

uint64_t sub_24F76F710(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *initializeWithTake for SQLOrdering.Impl(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xA3uLL);
}

uint64_t sub_24F76F774(uint64_t result)
{
  __int16 v1 = *(_WORD *)(result + 160);
  *(unsigned char *)(result + 162) &= 7u;
  *(_WORD *)(result + 160) = v1;
  return result;
}

uint64_t sub_24F76F794(__n128 *a1)
{
  __n128 v2 = sub_24F77AD50(a1);
  v11(v3, v4, v5, v6, v7, v8, v9, v10, v2.n128_u64[0], v2.n128_u64[1], v12, v13, v14);
  return v1;
}

uint64_t sub_24F76F7F0(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))
{
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(unsigned __int16 *)(a1 + 160) | (*(unsigned __int8 *)(a1 + 162) << 16));
  return a1;
}

uint64_t sub_24F76F86C(__n128 *a1)
{
  sub_24F773BC8(a1);
  sub_24F76F948();
  sub_24F77C064();
  v2();
  return v1;
}

uint64_t sub_24F76F8A8(__n128 *a1)
{
  __n128 v2 = sub_24F773BC8(a1);
  v11(v3, v4, v5, v6, v7, v8, v9, v10, v2.n128_u64[0], v2.n128_u64[1], v12, v13, v14);
  return v1;
}

uint64_t sub_24F76F900(uint64_t a1)
{
  sub_24F77E030();
  sub_24F77C064();
  v2();
  return a1;
}

uint64_t sub_24F76F978(uint64_t a1)
{
  if ((unsigned __int16)(*(unsigned __int8 *)(a1 + 162) >> 3) <= 0x14u) {
    return *(unsigned __int8 *)(a1 + 162) >> 3;
  }
  else {
    return (*(_DWORD *)a1 + 21);
  }
}

uint64_t sub_24F76F994(uint64_t a1)
{
  sub_24F77E030();
  sub_24F77294C();
  v2();
  return a1;
}

uint64_t sub_24F76F9E4(__n128 *a1)
{
  __n128 v2 = sub_24F77AD50(a1);
  v11(v3, v4, v5, v6, v7, v8, v9, v10, v2.n128_u64[0], v2.n128_u64[1], v12, v13, v14);
  return v1;
}

uint64_t sub_24F76FA40(uint64_t a1)
{
  sub_24F77F400();
  sub_24F77294C();
  v2();
  return a1;
}

BOOL sub_24F76FAA0()
{
  return sub_24F76FAC8();
}

BOOL sub_24F76FAC8()
{
  uint64_t v2 = *v0;
  uint64_t v3 = v0[2];
  sub_24F769D2C();
  if (v1)
  {
  }
  else
  {
    Row.subscript.getter((uint64_t)&v17);
    swift_bridgeObjectRelease();
    uint64_t v16 = v20;
    sub_24F7783C0((uint64_t)&v17, &qword_26B1F7AC0);
    if (v16) {
      return 0;
    }
  }
  Row.scopes.getter();
  uint64_t v4 = v17;
  uint64_t v5 = v18;
  uint64_t v7 = v19;
  uint64_t v6 = v20;
  uint64_t v23 = *(void *)(v2 + 88);
  uint64_t v8 = sub_24F8CFFE0();
  uint64_t v17 = v4;
  uint64_t v18 = v5;
  uint64_t v19 = v7;
  uint64_t v20 = v6;
  uint64_t v10 = Row.ScopesTreeView.subscript.getter(v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  if (!v10)
  {
    swift_beginAccess();
    uint64_t v11 = *(void *)(v3 + 80);
    uint64_t v12 = *(void *)(v3 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24F8CFFE0();
    uint64_t v21 = v11;
    uint64_t v22 = v12;
    Row.PrefetchedRowsView.subscript.getter();
    uint64_t v14 = v13;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v14 == 0;
  }
  return 0;
}

uint64_t Row.scopes.getter()
{
  sub_24F76FD38();
  sub_24F773614();
  uint64_t v3 = *(void *)(v0 + 88);
  v6[0] = *(void *)(v0 + 80);
  v6[1] = v3;
  uint64_t v4 = *(void (**)(void *, uint64_t, uint64_t))(v2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v4(v6, v1, v2);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *sub_24F76FD38()
{
  uint64_t v2 = *(void *)(v0 + 40);
  return sub_24F7811D0((void *)(v0 + 16), v2);
}

void sub_24F76FD54(uint64_t *a1@<X8>)
{
  type metadata accessor for Row();
  uint64_t v2 = swift_allocObject();
  uint64_t v3 = sub_24F76FDD8(v2);
  sub_24F781274(&qword_26B1F78A8);
  uint64_t v4 = sub_24F8CEC70();
  sub_24F778BA8();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
}

uint64_t sub_24F76FDD8(uint64_t a1)
{
  uint64_t v7 = &type metadata for EmptyRowImpl;
  uint64_t v8 = &off_2700FE850;
  sub_24F778BA8();
  sub_24F77F23C(v2, v3, v4);
  *(void *)(a1 + 72) = 0;
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v6);
  return a1;
}

void Row.PrefetchedRowsView.subscript.getter()
{
  sub_24F76FFB8();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_24F774654();
  uint64_t v6 = sub_24F76FFD0(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v13 = v6;
  if (v6[2])
  {
    while (1)
    {
      uint64_t v8 = v6[4];
      uint64_t v7 = v6[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_24F8BD0EC(0, 1);
      if (v8 == v3 && v7 == v1) {
        break;
      }
      sub_24F781A14();
      char v10 = sub_24F8CFD00();
      swift_bridgeObjectRelease();
      if (v10) {
        goto LABEL_11;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v11 = sub_24F7752FC();
      sub_24F79347C(v11, v12);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v6 = v13;
      if (!v13[2])
      {
        swift_bridgeObjectRelease();
        goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
LABEL_11:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
  }
LABEL_12:
  sub_24F77E5E4();
}

void *sub_24F76FFD0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return (void *)MEMORY[0x263F8EE78];
  }
  sub_24F781274(&qword_26B1F5540);
  uint64_t v6 = (const void *)swift_allocObject();
  sub_24F799AC8(v6);
  v2[2] = v3;
  v2[3] = 2 * (v7 / 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_24F798894((unint64_t)&v10, v2 + 4, v3, a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v8 != v3)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v2;
}

uint64_t Row.ScopesTreeView.subscript.getter(uint64_t a1, uint64_t a2)
{
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_24F774654();
  uint64_t v4 = (void *)sub_24F770218();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v12 = v4;
  if (v4[2])
  {
    while (1)
    {
      uint64_t v6 = v4[4];
      uint64_t v5 = v4[5];
      uint64_t v7 = v4[6];
      swift_bridgeObjectRetain();
      swift_retain();
      sub_24F8BD214(0, 1);
      BOOL v8 = v6 == a1 && v5 == a2;
      if (v8 || (sub_24F8CFD00() & 1) != 0) {
        break;
      }
      swift_retain();
      Row.scopes.getter();
      swift_release();
      sub_24F793738(v10, v11);
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v4 = v12;
      if (!v12[2])
      {
        swift_bridgeObjectRelease();
        return 0;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
    return 0;
  }
  return v7;
}

uint64_t sub_24F770218()
{
  sub_24F77441C();
  uint64_t v3 = sub_24F770350(v1, v2);
  if (!v3) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v4 = v3;
  if (v3 <= 0)
  {
    uint64_t v0 = MEMORY[0x263F8EE78];
  }
  else
  {
    sub_24F781274(&qword_26B1F5548);
    uint64_t v5 = (const void *)swift_allocObject();
    sub_24F799AC8(v5);
    *(void *)(v0 + 16) = v4;
    *(void *)(v0 + 24) = 2 * (v6 / 24);
  }
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_24F797100();
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = sub_24F7705C4(v10, v11, v12);
  if (v8 == v4) {
    return v0;
  }
  __break(1u);
  return result;
}

uint64_t sub_24F770350(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24F770668(a2);
  uint64_t v6 = v5;
  char v8 = v7 & 1;
  uint64_t v9 = sub_24F7703F0(v4, v5, v7 & 1, 1 << *(unsigned char *)(a2 + 32), *(_DWORD *)(a2 + 36), 0, a1, a2);
  sub_24F7705C4(v4, v6, v8);
  return v9;
}

uint64_t sub_24F7703F0(uint64_t result, uint64_t a2, char a3, uint64_t a4, unsigned int a5, char a6, uint64_t a7, uint64_t a8)
{
  if (a6 & 1) != 0 || (a3) {
    goto LABEL_36;
  }
  unint64_t v9 = result;
  if (a4 < result) {
    goto LABEL_34;
  }
  if (a5 != a2)
  {
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    return result;
  }
  if (result != a4)
  {
    uint64_t v13 = a8 + 64;
    uint64_t v22 = a8 + 96;
    uint64_t v11 = 1;
    while (1)
    {
      if ((v9 & 0x8000000000000000) != 0 || (uint64_t v14 = 1 << *(unsigned char *)(a8 + 32), (uint64_t)v9 >= v14))
      {
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
      unint64_t v15 = v9 >> 6;
      unint64_t v16 = *(void *)(v13 + 8 * (v9 >> 6));
      if (((v16 >> v9) & 1) == 0) {
        goto LABEL_32;
      }
      if (*(_DWORD *)(a8 + 36) != a5) {
        goto LABEL_33;
      }
      unint64_t v17 = v16 & (-2 << (v9 & 0x3F));
      if (v17)
      {
        uint64_t result = sub_24F7705C4(v9, a2, 0);
        unint64_t v9 = __clz(__rbit64(v17)) | v9 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v18 = v15 + 1;
        if (v15 + 1 >= (unint64_t)(v14 + 63) >> 6) {
          goto LABEL_26;
        }
        unint64_t v19 = *(void *)(v13 + 8 * v18);
        if (!v19)
        {
          unint64_t v20 = (unint64_t)(v14 + 63) >> 6;
          unint64_t v18 = v15 + 2;
          if (v15 + 2 >= v20) {
            goto LABEL_26;
          }
          unint64_t v19 = *(void *)(v13 + 8 * v18);
          if (!v19)
          {
            unint64_t v18 = v15 + 3;
            if (v15 + 3 >= v20) {
              goto LABEL_26;
            }
            unint64_t v19 = *(void *)(v13 + 8 * v18);
            if (!v19)
            {
              while (v15 + 4 < v20)
              {
                unint64_t v19 = *(void *)(v22 + 8 * v15++);
                if (v19)
                {
                  unint64_t v18 = v15 + 3;
                  goto LABEL_17;
                }
              }
LABEL_26:
              uint64_t result = sub_24F7705C4(v9, a2, 0);
              unint64_t v9 = v14;
              goto LABEL_27;
            }
          }
        }
LABEL_17:
        uint64_t result = sub_24F7705C4(v9, a2, 0);
        unint64_t v9 = __clz(__rbit64(v19)) | (v18 << 6);
      }
LABEL_27:
      if (v9 == a4) {
        return v11;
      }
      a2 = a5;
      if (__OFADD__(v11++, 1))
      {
        __break(1u);
        goto LABEL_31;
      }
    }
  }
  return 0;
}

uint64_t sub_24F7705C4(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_24F7705D0(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 80);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  uint64_t v2 = 128;
  for (uint64_t i = 11; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

void sub_24F77066C(uint64_t *a1@<X8>)
{
}

uint64_t static DatabaseValueConvertible<>.fetchAll(_:arguments:adapter:)(uint64_t a1, uint64_t a2)
{
  sub_24F772930(a1, a2);
  uint64_t result = static DatabaseValueConvertible<>.fetchCursor(_:arguments:adapter:)();
  if (!v2)
  {
    sub_24F8CF1B0();
    sub_24F775FC8();
    type metadata accessor for FastDatabaseValueCursor();
    swift_getWitnessTable();
    uint64_t WitnessTable = swift_getWitnessTable();
    sub_24F777654(WitnessTable, v5, v6);
    return v7;
  }
  return result;
}

uint64_t static FetchableRecord.fetchAll(_:arguments:adapter:)(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = sub_24F7809B8(a1, a2, a3, a4, a5, a6, a7, a8, v11);
  if (!v8)
  {
    uint64_t v10 = sub_24F8CF1B0();
    type metadata accessor for RecordCursor();
    swift_getWitnessTable();
    swift_getWitnessTable();
    RangeReplaceableCollection.init<A>(_:)(v10, (uint64_t)&v12);
    return v12;
  }
  return result;
}

uint64_t RangeReplaceableCollection.init<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  sub_24F8CF490();
  sub_24F7708F0();
  sub_24F77B4D8();
  v5();
  uint64_t result = swift_unknownObjectRelease();
  if (v2)
  {
    sub_24F773974();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a2, a1);
  }
  return result;
}

uint64_t sub_24F77091C()
{
  return swift_bridgeObjectRelease();
}

void *sub_24F770944(void *a1)
{
  return memcpy(a1, v1, 0xA3uLL);
}

uint64_t sub_24F77095C()
{
  return v0;
}

uint64_t sub_24F770974()
{
  return swift_getDynamicType();
}

uint64_t sub_24F77098C()
{
  return sub_24F8A89BC(v0, v1, v3, v2);
}

uint64_t sub_24F7709AC@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 72) = a1;
  return sub_24F8CF610();
}

uint64_t sub_24F7709DC(uint64_t a1, uint64_t a2)
{
  return sub_24F770A08(a1, a2);
}

uint64_t sub_24F770A08(uint64_t a1, uint64_t a2)
{
  sub_24F773850();
  uint64_t v5 = v4;
  uint64_t WitnessTable = swift_getWitnessTable();
  return DatabaseCursor.forEach(_:)(a1, a2, v5, WitnessTable);
}

double Row.subscript.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (void *)sub_24F77592C();
  sub_24F7811D0(v3, v4);
  sub_24F775958();
  sub_24F773578();
  v5();
  if (v6)
  {
    *(void *)(a1 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  else
  {
    sub_24F7811D0((void *)(v1 + 16), *(void *)(v1 + 40));
    sub_24F7762EC();
    v7();
    sub_24F775938();
    uint64_t v8 = sub_24F77591C();
    sub_24F781F10(v8, v9, v10);
  }
  return result;
}

uint64_t DatabasePool.read<A>(_:)(uint64_t a1)
{
  uint64_t v2 = sub_24F781674(a1);
  uint64_t v3 = swift_release();
  if (v2)
  {
    sub_24F775DB8();
    sub_24F770EAC();
    sub_24F773D34();
    sub_24F77B65C();
  }
  if (*(void *)(v1 + 24))
  {
    MEMORY[0x270FA5388](v3);
    sub_24F77EB64();
    sub_24F771214((uint64_t (*)(char *))sub_24F771540);
    return swift_release();
  }
  else
  {
    sub_24F7DC6DC();
    uint64_t v5 = swift_allocError();
    sub_24F77E3D8(v5, v6);
    return sub_24F780190(v7, v8);
  }
}

uint64_t (*sub_24F770C70(uint64_t (*a1)(char *), uint64_t a2))()
{
  v14[1] = a2;
  unint64_t v15 = a1;
  uint64_t v4 = *(void *)(*(void *)v2 + 80);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  char v10 = (char *)v14 - v9;
  double result = sub_24F7712E8(v8);
  if (!v3)
  {
    uint64_t v12 = result;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v10, v8, v4);
    uint64_t v13 = v15(v10);
    ((void (*)(uint64_t))v12)(v13);
    swift_release();
    return (uint64_t (*)())(*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }
  return result;
}

BOOL sub_24F770DE8@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_24F770E10()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24F770E40()
{
  return v0;
}

uint64_t sub_24F770E80()
{
  return v0;
}

uint64_t sub_24F770E8C()
{
  return sub_24F8CFD00();
}

uint64_t sub_24F770EB8@<X0>(int a1@<W8>)
{
  return a1 | (v1 << 16);
}

uint64_t sub_24F770EC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_24F775458(v9 + 24, (uint64_t)&a9);
}

uint64_t sub_24F770EDC()
{
  *(void *)(v1 - 72) = v0;
  return v0;
}

uint64_t sub_24F770F10()
{
  return v0;
}

uint64_t sub_24F770F38()
{
  return v0;
}

void sub_24F770F50()
{
  sub_24F77C4AC();
}

void sub_24F770F74()
{
  *(void *)(v0 + 16) = v2;
  uint64_t v5 = v0 + 16 * v1;
  *(void *)(v5 + 32) = v3;
  *(void *)(v5 + 40) = v4;
}

__n128 sub_24F770F88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, long long a15)
{
  return (__n128)a15;
}

uint64_t sub_24F770FA4()
{
  return swift_allocError();
}

uint64_t sub_24F770FBC()
{
  return sub_24F8CFD00();
}

uint64_t sub_24F770FD8()
{
  return v0;
}

void *sub_24F770FF0(__n128 *a1, __n128 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  a1[1] = a2;
  long long v11 = a1 + 2;
  return memcpy(v11, &a10, 0xA3uLL);
}

uint64_t sub_24F771028()
{
  return v0;
}

uint64_t sub_24F771044()
{
  return sub_24F781F10(v1, v0, 3);
}

void *sub_24F771060(void *a1)
{
  return memcpy(a1, v1, 0xA3uLL);
}

uint64_t sub_24F771094()
{
  return v0;
}

uint64_t sub_24F7710A8()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_24F7710C4()
{
  uint64_t v2 = *(void *)(v0 - 312);
  return sub_24F78C440(v2);
}

uint64_t sub_24F77112C()
{
  return sub_24F814C38(v0);
}

uint64_t sub_24F771148()
{
  return sub_24F8CEEB0();
}

uint64_t sub_24F771174()
{
  return type metadata accessor for SchedulingWatchdog();
}

uint64_t sub_24F7711C8()
{
  return *(void *)(v0 + 32);
}

uint64_t sub_24F7711DC(uint64_t a1, ...)
{
  va_start(va, a1);
  return sub_24F76C344((uint64_t)va, v1);
}

uint64_t sub_24F7711F4()
{
  return type metadata accessor for StatementArgumentsSink();
}

uint64_t (*sub_24F771214(uint64_t (*a1)(char *)))()
{
  return sub_24F770C70(a1, v1);
}

uint64_t sub_24F771234()
{
  return v0;
}

uint64_t sub_24F77124C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_24F77126C()
{
  return v0;
}

uint64_t sub_24F771278()
{
  return sub_24F8CF9D0();
}

uint64_t sub_24F7712A0()
{
  return type metadata accessor for QueryInterfaceRequest();
}

uint64_t sub_24F7712B8()
{
  return sub_24F771498(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_24F7712C0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t (*sub_24F7712E8(char *a1))()
{
  uint64_t v4 = *(void *)(*(void *)v1 + 80);
  sub_24F7688B8(qword_26B1F7A20);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v6 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)v14 - v9;
  double result = (uint64_t (*)())sub_24F8CF560();
  if (!v2)
  {
    uint64_t v12 = *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v4 - 8) + 32);
    v13(v8, v10, v4);
    *(_OWORD *)(swift_allocObject() + 16) = *(_OWORD *)&v10[v12];
    v13(a1, v8, v4);
    return sub_24F7712B8;
  }
  return result;
}

uint64_t sub_24F771498(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_24F7714C0()
{
  return sub_24F7714F0(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_24F7714C8()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_24F7714F0(uint64_t (*a1)(void))
{
  return a1();
}

void sub_24F771518()
{
  sub_24F768900(*(void *)(v0 + 24));
}

void sub_24F771540()
{
}

uint64_t sub_24F771570@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v6[5] = a3;
  void v6[2] = a4;
  v6[3] = a1;
  uint64_t v6[4] = a2;
  return sub_24F7715C0(0, (uint64_t)sub_24F772C1C, (uint64_t)v6, a4, a5);
}

uint64_t sub_24F7715C0@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v22 = a5;
  uint64_t v23 = a3;
  uint64_t v9 = sub_24F8CF610();
  sub_24F770DF4();
  uint64_t v11 = v10;
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  unint64_t v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  unint64_t v17 = (char *)&v22 - v16;
  uint64_t v18 = sub_24F7771BC((uint64_t)&v22 - v16, 1, 1, a4);
  MEMORY[0x270FA5388](v18);
  if (a1)
  {
    *(&v22 - 6) = a4;
    *(&v22 - 5) = v5;
    *(&v22 - 4) = (uint64_t)v17;
    *(&v22 - 3) = a2;
    *(&v22 - 2) = v23;
    uint64_t v19 = v24;
    sub_24F8A556C((void (*)(uint64_t *__return_ptr, uint64_t))sub_24F8A9A68);
  }
  else
  {
    *(&v22 - 4) = a4;
    *(&v22 - 3) = (uint64_t)v17;
    uint64_t v20 = v23;
    *(&v22 - 2) = a2;
    *(&v22 - 1) = v20;
    uint64_t v19 = v24;
    Database.inSavepoint(_:)(sub_24F772B10);
  }
  if (v19) {
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v17, v9);
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v15, v17, v9);
  uint64_t result = sub_24F777048((uint64_t)v15, 1, a4);
  if (result != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(a4 - 8) + 32))(v22, v15, a4);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v17, v9);
  }
  __break(1u);
  return result;
}

#error "24F771890: call analysis failed (funcsize=123)"

void sub_24F7719D8()
{
  uint64_t v0 = sub_24F77EB8C();
  sub_24F7719F4(v0, v1);
}

void sub_24F7719F4(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4 = *(void *)(a1 + 16);
  a2(v4);
  if (v2)
  {
    sub_24F88B464(v4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GRDB/GRDB/Core/SerializedDatabase.swift", 77, 2, 108, a1);
  }
  else if ((*(unsigned char *)(v4 + OBJC_IVAR____TtC12GRDBInternal8Database_configuration + 41) & 1) == 0 {
         && (Database.isInsideTransaction.getter() & 1) != 0)
  }
  {
    sub_24F8CF9D0();
    __break(1u);
  }
}

sqlite3 *Database.isInsideTransaction.getter()
{
  sub_24F782504();
  if (sub_24F780400())
  {
    sub_24F773614();
    uint64_t result = *(sqlite3 **)(v0 + 16);
    if (result) {
      return (sqlite3 *)(sqlite3_get_autocommit(result) == 0);
    }
  }
  else
  {
    sub_24F770EAC();
    uint64_t result = (sqlite3 *)sub_24F77E454();
    __break(1u);
  }
  return result;
}

uint64_t sub_24F771B58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24F771B7C(a1, v2[5], v2[6], v2[2], v2[3], v2[4], a2);
}

uint64_t sub_24F771B7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v24 = a3;
  uint64_t v23 = a7;
  uint64_t v12 = sub_24F8CF610();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v22 - v17;
  sub_24F7771BC((uint64_t)&v22 - v17, 1, 1, a5);
  char v33 = 3;
  uint64_t v26 = a4;
  uint64_t v27 = a5;
  uint64_t v28 = a6;
  uint64_t v29 = v18;
  uint64_t v19 = v25;
  uint64_t v30 = a2;
  uint64_t v31 = v24;
  uint64_t v32 = a1;
  Database.inTransaction(_:_:)(&v33, sub_24F7729D4);
  if (v19) {
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v18, v12);
  }
  uint64_t v20 = v23;
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v18, v12);
  uint64_t result = sub_24F777048((uint64_t)v16, 1, a5);
  if (result != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(a5 - 8) + 32))(v20, v16, a5);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v18, v12);
  }
  __break(1u);
  return result;
}

uint64_t sub_24F771D7C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_24F771D94()
{
  return v0;
}

uint64_t sub_24F771DD0()
{
  return 7692639;
}

uint64_t sub_24F771DE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  a15 = v17;
  a16 = v18;
  return sub_24F7786CC(v16, (uint64_t)&a10);
}

uint64_t sub_24F771E20()
{
  return sub_24F808C90(v1, v0, 1);
}

void *sub_24F771E3C(void *a1)
{
  return memcpy(a1, &STACK[0x570], 0xA3uLL);
}

uint64_t sub_24F771E54()
{
  return sub_24F781F34(v0, v1, 3);
}

uint64_t sub_24F771E70()
{
  return swift_bridgeObjectRelease();
}

void sub_24F771E8C()
{
  TableRequest<>.filter<A>(key:)();
}

uint64_t sub_24F771EAC()
{
  return Database.statementDidFail(_:withResultCode:)(v1, v0);
}

void sub_24F771EE8(char *a1, uint64_t a2, uint64_t (*a3)(void))
{
  char v14 = *a1;
  Database.beginTransaction(_:)((GRDBInternal::Database::TransactionKind_optional)&v14);
  if (!v5)
  {
    uint64_t v6 = OBJC_IVAR____TtC12GRDBInternal8Database_isInsideTransactionBlock;
    char v7 = *(unsigned char *)(a2 + OBJC_IVAR____TtC12GRDBInternal8Database_isInsideTransactionBlock);
    *(unsigned char *)(a2 + OBJC_IVAR____TtC12GRDBInternal8Database_isInsideTransactionBlock) = 1;
    if (a3())
    {
      uint64_t v9 = 0;
    }
    else
    {
      sub_24F77CC78();
      *(unsigned char *)(a2 + v6) = v7;
      Database.commit()();
      if (!v8) {
        goto LABEL_13;
      }
      uint64_t v9 = v8;
    }
    Database.rollback()();
    uint64_t v11 = v10;
    if (v10)
    {
      if (!v9)
      {
        id v12 = v10;
        goto LABEL_12;
      }

LABEL_10:
      uint64_t v11 = v9;
LABEL_12:
      id v13 = v9;
      swift_willThrow();

      goto LABEL_13;
    }
    if (v9) {
      goto LABEL_10;
    }
LABEL_13:
    *(unsigned char *)(a2 + v6) = v7;
  }
}

void Database.inTransaction(_:_:)(char *a1, uint64_t (*a2)(void))
{
  char v13 = *a1;
  Database.beginTransaction(_:)((GRDBInternal::Database::TransactionKind_optional)&v13);
  if (!v4)
  {
    uint64_t v5 = OBJC_IVAR____TtC12GRDBInternal8Database_isInsideTransactionBlock;
    char v6 = *(unsigned char *)(v2 + OBJC_IVAR____TtC12GRDBInternal8Database_isInsideTransactionBlock);
    *(unsigned char *)(v2 + OBJC_IVAR____TtC12GRDBInternal8Database_isInsideTransactionBlock) = 1;
    if (a2())
    {
      uint64_t v8 = 0;
    }
    else
    {
      sub_24F77CC78();
      *(unsigned char *)(v2 + v5) = v6;
      Database.commit()();
      if (!v7) {
        goto LABEL_13;
      }
      uint64_t v8 = v7;
    }
    Database.rollback()();
    uint64_t v10 = v9;
    if (v9)
    {
      if (!v8)
      {
        id v11 = v9;
        goto LABEL_12;
      }

LABEL_10:
      uint64_t v10 = v8;
LABEL_12:
      id v12 = v8;
      swift_willThrow();

      goto LABEL_13;
    }
    if (v8) {
      goto LABEL_10;
    }
LABEL_13:
    *(unsigned char *)(v2 + v5) = v6;
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Database.commit()()
{
  sub_24F77231C();
  v0._countAndFlagsBits = 0xD000000000000012;
  Database.execute(sql:arguments:)(v0, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t sub_24F7721F4(uint64_t a1, ...)
{
  va_start(va, a1);
  uint64_t v4 = *v2;
  *(void *)(*v2 + 16) = v1 + 1;
  return sub_24F76C344((uint64_t)va, v4 + 184 * v1 + 32);
}

uint64_t sub_24F77222C()
{
  return type metadata accessor for QueryInterfaceRequest();
}

BOOL sub_24F772244@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_24F772258()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_24F772278()
{
  return sub_24F799140(v4, v3, v2, v0, v1);
}

uint64_t sub_24F77229C()
{
  return swift_allocObject();
}

void *sub_24F7722B4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char __dst, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char __src)
{
  return memcpy(&__dst, &__src, 0xA3uLL);
}

uint64_t sub_24F7722D0()
{
  return sub_24F781F10(v0, v1, 3);
}

uint64_t sub_24F7722EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  return sub_24F76F710((uint64_t)&a50, v50 - 256);
}

uint64_t sub_24F772304(uint64_t a1, uint64_t a2)
{
  return sub_24F7771BC(a1, a2, 1, v2);
}

uint64_t sub_24F77232C(uint64_t a1)
{
  sub_24F7811D0((void *)(v1 + 16), *(void *)(v1 + 40));
  return a1;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Database.beginTransaction(_:)(GRDBInternal::Database::TransactionKind_optional a1)
{
  sub_24F77CEB0();
  sub_24F8CF7D0();
  swift_bridgeObjectRelease();
  sub_24F8CEEB0();
  swift_bridgeObjectRelease();
  sub_24F8CEEB0();
  sub_24F7729B4();
  Database.execute(sql:arguments:)(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Database.execute(sql:arguments:)(Swift::String sql, GRDBInternal::StatementArguments arguments)
{
  object = sql._object;
  uint64_t countAndFlagsBits = sql._countAndFlagsBits;
  uint64_t v4 = *(void *)arguments.values._rawValue;
  uint64_t v5 = *((void *)arguments.values._rawValue + 1);
  sub_24F781274(&qword_26B1F7F50);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_24F8DDBF0;
  v7[0] = countAndFlagsBits;
  v7[1] = object;
  v7[2] = v4;
  v7[3] = v5;
  sub_24F7725D4(v7);
  sub_24F76C344((uint64_t)v7, inited + 32);
  uint64_t v8 = inited;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Database.execute(literal:)((GRDBInternal::SQL)&v8);
  swift_setDeallocating();
  sub_24F772720();
}

void *sub_24F7725D4(void *result)
{
  uint64_t v1 = result[13] & 1;
  unint64_t v2 = result[20] & 0xE000000000FFC1FFLL;
  result[8] &= 1uLL;
  result[13] = v1;
  result[20] = v2;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Database.execute(literal:)(GRDBInternal::SQL literal)
{
  v6[0] = *(void *)literal.elements._rawValue;
  Database.allStatements(literal:)();
  if (!v1)
  {
    for (uint64_t i = sub_24F7726C0(); i; uint64_t i = sub_24F7726C0())
    {
      v6[0] = 0;
      v6[1] = 0;
      uint64_t v4 = v6;
      Statement.execute(arguments:)(*(GRDBInternal::StatementArguments_optional *)(&v2 - 1));
      if (v5)
      {
        swift_release();
        break;
      }
      swift_release();
    }
    swift_release();
  }
}

uint64_t sub_24F7726C0()
{
  uint64_t v2 = *(void *)(v0 + 24);
  if (*(void *)(v0 + 56) >= *(void *)(v2 + 16) - 1)
  {
    uint64_t result = sub_24F7727C0();
    if (!v1) {
      return 0;
    }
  }
  else
  {
    swift_retain();
    return sub_24F772764(v2, v0);
  }
  return result;
}

uint64_t sub_24F772720()
{
  swift_arrayDestroy();
  return MEMORY[0x270FA0228](v0, 32, 7);
}

uint64_t sub_24F772764(uint64_t a1, uint64_t a2)
{
  sub_24F777F18(a1 + 32, a2, &v4);
  uint64_t result = swift_release();
  if (!v2) {
    return v4;
  }
  return result;
}

uint64_t sub_24F7727C0()
{
  uint64_t result = sub_24F777E28(&v8);
  uint64_t v2 = v8;
  if (v8)
  {
    if (*(unsigned char *)(v0 + 48) == 1)
    {
      return sub_24F77835C(v8);
    }
    else
    {
      uint64_t v3 = swift_bridgeObjectRetain();
      sub_24F77835C(v3);
      uint64_t v4 = *(void *)(v2 + 16);
      uint64_t result = swift_bridgeObjectRelease();
      if (v4)
      {
        uint64_t v8 = 0;
        unint64_t v9 = 0xE000000000000000;
        sub_24F8CF7D0();
        swift_bridgeObjectRelease();
        uint64_t v8 = 0xD000000000000025;
        unint64_t v9 = 0x800000024F8D4380;
        sub_24F8CFAE0();
        sub_24F8CEEB0();
        swift_bridgeObjectRelease();
        uint64_t v5 = v8;
        unint64_t v6 = v9;
        sub_24F7DC6DC();
        sub_24F770FA4();
        *(_DWORD *)uint64_t v7 = 21;
        *(void *)(v7 + 8) = v5;
        *(void *)(v7 + 16) = v6;
        *(_OWORD *)(v7 + 24) = 0u;
        *(_OWORD *)(v7 + 40) = 0u;
        *(unsigned char *)(v7 + 56) = 0;
        return swift_willThrow();
      }
    }
  }
  return result;
}

uint64_t sub_24F7728F0()
{
  return swift_allocObject();
}

__n128 sub_24F772930(uint64_t a1, uint64_t a2)
{
  return *(__n128 *)a2;
}

void sub_24F77295C()
{
  *(void *)(v4 + 16) = v3;
  uint64_t v5 = v4 + 16 * v0;
  *(void *)(v5 + 32) = v2;
  *(void *)(v5 + 40) = v1;
}

uint64_t sub_24F772974()
{
  return sub_24F76F774(v0 - 232);
}

uint64_t sub_24F772990()
{
  return v0;
}

void *sub_24F77299C(void *a1)
{
  return memcpy(a1, v1, 0xA3uLL);
}

uint64_t sub_24F7729D4()
{
  return sub_24F7729EC();
}

uint64_t sub_24F7729EC()
{
  return sub_24F772A14(*(void *)(v0 + 40), *(void (**)(uint64_t))(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_24F772A14(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = sub_24F8CF610();
  sub_24F770DF4();
  uint64_t v13 = v12;
  sub_24F771D60();
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v18 - v15;
  a2(a4);
  if (!v6)
  {
    sub_24F7771BC((uint64_t)v16, 0, 1, a6);
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 40))(a1, v16, v11);
  }
  return 0;
}

uint64_t sub_24F772B10()
{
  return sub_24F772B30(*(void *)(v0 + 24), *(void (**)(uint64_t))(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 16));
}

uint64_t sub_24F772B30(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_24F8CF610();
  sub_24F770DF4();
  uint64_t v10 = v9;
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v16 - v13;
  a2(v12);
  if (!v4)
  {
    sub_24F7771BC((uint64_t)v14, 0, 1, a4);
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 40))(a1, v14, v8);
  }
  return 0;
}

void sub_24F772C1C()
{
  sub_24F772C3C(*(void *)(v0 + 24), *(void (**)(uint64_t))(v0 + 32));
}

void sub_24F772C3C(uint64_t a1, void (*a2)(uint64_t))
{
  sub_24F772C8C();
  if (!v2) {
    a2(a1);
  }
}

void sub_24F772C8C()
{
  sub_24F77BC5C();
  sub_24F772E94(0xD000000000000015, v2);
  if (!v1)
  {
    double v3 = sub_24F772DD0();
    uint64_t v4 = sub_24F773198(v3);
    swift_release();
    sub_24F7783C0((uint64_t)&v6, &qword_26B1F7F10);
    uint64_t v5 = v0 + OBJC_IVAR____TtC12GRDBInternal8Database__lastSchemaVersion;
    if (*(unsigned char *)(v0 + OBJC_IVAR____TtC12GRDBInternal8Database__lastSchemaVersion + 4))
    {
      if ((v4 & 0x100000000) != 0) {
        return;
      }
LABEL_7:
      *(_DWORD *)uint64_t v5 = v4;
      *(unsigned char *)(v5 + 4) = BYTE4(v4) & 1;
      Database.clearSchemaCache()();
      return;
    }
    if ((v4 & 0x100000000) != 0 || *(_DWORD *)v5 != v4) {
      goto LABEL_7;
    }
  }
}

uint64_t sub_24F772D5C(void *a1)
{
  sub_24F7725D4(a1);
  return sub_24F766748();
}

uint64_t sub_24F772D84()
{
  return v0;
}

void *sub_24F772D90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  return Table.all()(&a36);
}

double sub_24F772DD0()
{
  return 0.0;
}

void sub_24F772DE0()
{
  sub_24F787918();
}

uint64_t sub_24F772E00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  sub_24F781F10(v42, v41, 3);
  return sub_24F781F10(a41, v43, 3);
}

uint64_t sub_24F772E4C()
{
  return sub_24F8577F8(v1, v0);
}

void sub_24F772E64(unint64_t a1@<X8>)
{
  *(void *)(v2 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a1;
  uint64_t v5 = (void *)(*(void *)(v1 + 48) + 16 * a1);
  *uint64_t v5 = v4;
  v5[1] = v3;
}

uint64_t sub_24F772E94(uint64_t a1, uint64_t a2)
{
  return sub_24F772ED4(a1, a2, (void (*)(void))sub_24F77318C, (void (*)(uint64_t))sub_24F773180);
}

uint64_t sub_24F772ED4(uint64_t a1, uint64_t a2, void (*a3)(void), void (*a4)(uint64_t))
{
  a3();
  uint64_t v10 = v9;
  if (*(void *)(v9 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v11 = sub_24F782950();
    if (v12)
    {
      uint64_t v5 = *(void *)(*(void *)(v10 + 56) + 8 * v11);
      swift_retain();
LABEL_8:
      swift_bridgeObjectRelease();
      uint64_t v15 = sub_24F7809A4();
      a4(v15);
      return v5;
    }
    swift_bridgeObjectRelease();
  }
  swift_unownedRetainStrong();
  uint64_t v13 = sub_24F87F808(a1, a2, 1);
  if (!v4)
  {
    uint64_t v5 = v13;
    swift_release();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_isUniquelyReferenced_nonNull_native();
    sub_24F7DBF30(v5, a1);
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  swift_release();
  uint64_t v14 = sub_24F7809A4();
  a4(v14);
  return v5;
}

uint64_t sub_24F773018(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = (uint64_t *)(v3 + *a3);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  *uint64_t v4 = a1;
  v4[1] = a2;
  return sub_24F773140(v5, v6);
}

uint64_t sub_24F773034(void *a1)
{
  uint64_t v2 = (uint64_t *)(v1 + *a1);
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  if (v4)
  {
    uint64_t v1 = *v2;
  }
  else
  {
    type metadata accessor for Statement();
    swift_retain();
    uint64_t v5 = sub_24F8CEC70();
    swift_unownedRetain();
    swift_release();
    uint64_t v6 = *v2;
    uint64_t v7 = v2[1];
    *uint64_t v2 = v1;
    v2[1] = v5;
    swift_unownedRetain();
    swift_bridgeObjectRetain();
    sub_24F773140(v6, v7);
  }
  sub_24F773100(v3, v4);
  return v1;
}

uint64_t sub_24F773100(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_unownedRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_24F773140(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_unownedRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_24F773180(uint64_t a1, uint64_t a2)
{
  return sub_24F773018(a1, a2, &OBJC_IVAR____TtC12GRDBInternal8Database____lazy_storage___internalStatementCache);
}

uint64_t sub_24F77318C()
{
  return sub_24F773034(&OBJC_IVAR____TtC12GRDBInternal8Database____lazy_storage___internalStatementCache);
}

#error "24F773218: call analysis failed (funcsize=59)"

void sub_24F773288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, uint64_t a10, uint64_t a11, _UNKNOWN **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  sub_24F7734D0();
  a28 = v32;
  a29 = v33;
  uint64_t v34 = v29;
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  uint64_t v40 = v39;
  sub_24F773688();
  *(unsigned char *)(v29 + 24) = 0;
  *(void *)(v29 + 16) = v41;
  uint64_t v43 = v42;
  sub_24F7786CC(v44, (uint64_t)&a9);
  if (!a11)
  {
    swift_retain();
    sub_24F7783C0((uint64_t)&a9, &qword_26B1F7F10);
    *(_DWORD *)(v34 + 28) = 0;
    goto LABEL_9;
  }
  a19 = v43;
  sub_24F794DE0(&a9, (uint64_t)&a13);
  uint64_t v45 = a16;
  uint64_t v46 = a17;
  sub_24F7811D0(&a13, a16);
  a11 = type metadata accessor for Statement();
  a12 = &protocol witness table for Statement;
  *(void *)&a9 = v31;
  swift_retain_n();
  unsigned int v47 = sub_24F7E5F3C(0, (uint64_t)&a9, v45, v46);
  if (v30)
  {
    sub_24F77835C(v40);
    swift_release();
    sub_24F7783C0(v36, &qword_26B1F7F10);
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&a9);
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&a13);
    swift_release();
    swift_deallocPartialClassInstance();
LABEL_11:
    sub_24F778C94();
    return;
  }
  unsigned int v49 = v47;
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&a9);
  sub_24F782AB8();
  if (v50 == v51)
  {
    sub_24F77BCD0();
    if (!(v50 ^ v51 | v52)) {
      goto LABEL_13;
    }
    *(_DWORD *)(v34 + 28) = v49;
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&a13);
LABEL_9:
    a13 = v40;
    a14 = v38;
    sub_24F77C958(&a13, v48);
    swift_release();
    sub_24F7783C0(v36, &qword_26B1F7F10);
    sub_24F77835C(v40);
    if (v30) {
      swift_release();
    }
    goto LABEL_11;
  }
  __break(1u);
LABEL_13:
  __break(1u);
}

void *sub_24F773470(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  return Table.all()(&a30);
}

uint64_t sub_24F773494()
{
  return swift_beginAccess();
}

uint64_t sub_24F7734EC()
{
  return sub_24F781F10(v1, v0, 3);
}

uint64_t sub_24F773524()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_24F773558()
{
  return sub_24F8CEC70();
}

uint64_t sub_24F7735C0()
{
  return v0;
}

uint64_t sub_24F7735D4(uint64_t result)
{
  *(void *)(v1 - 56) = result;
  return result;
}

uint64_t sub_24F7735F4()
{
  return swift_retain();
}

uint64_t sub_24F773614()
{
  return swift_beginAccess();
}

uint64_t sub_24F77362C()
{
  return sub_24F8CED30();
}

uint64_t sub_24F773650()
{
  return v0;
}

uint64_t sub_24F773668()
{
  return sub_24F8CF7D0();
}

void sub_24F7736A0(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, void *, uint64_t))
{
  sub_24F8020D8(v4, v3, a3);
}

uint64_t sub_24F7736BC()
{
  return v0;
}

void *sub_24F7736D0(uint64_t a1, const void *a2)
{
  return memcpy(&STACK[0x200], a2, 0xA3uLL);
}

uint64_t sub_24F7736F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  return sub_24F775458(v15, (uint64_t)va);
}

void *sub_24F773730(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return memcpy(&a9, (const void *)(v9 - 232), 0xA3uLL);
}

uint64_t sub_24F77374C()
{
  return v0;
}

uint64_t sub_24F773764()
{
  return type metadata accessor for SchedulingWatchdog();
}

uint64_t sub_24F77379C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_24F7737B4()
{
  sub_24F773968();
  return sub_24F771570(v0, v1, v2, v3, v4);
}

size_t sub_24F7737E0(void *a1)
{
  size_t result = j__malloc_size(a1);
  a1[2] = v1;
  a1[3] = 2 * ((uint64_t)(result - 32) / v2);
  return result;
}

uint64_t sub_24F773820(uint64_t a1)
{
  return MEMORY[0x270FA2498](a1, 0, 0);
}

uint64_t sub_24F77382C()
{
  return v0;
}

void sub_24F773864(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_24F8B62D4(a1, v10, v11, v12, v13, a6, a7, a8, a9, a10);
}

void *sub_24F773884(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char __src)
{
  return memcpy(&a9, &__src, 0xA2uLL);
}

uint64_t sub_24F7738A0()
{
  return v0;
}

uint64_t sub_24F7738B4()
{
  return sub_24F8CEEB0();
}

uint64_t sub_24F7738CC()
{
  return swift_dynamicCast();
}

__n128 sub_24F7738F4()
{
  unsigned __int8 v2 = v0[1].n128_u8[0];
  __n128 result = *v0;
  *(__n128 *)(v1 - 48) = *v0;
  *(unsigned char *)(v1 - 32) = v2;
  return result;
}

uint64_t sub_24F77390C()
{
  return v0;
}

uint64_t sub_24F773930(void *a1)
{
  sub_24F7811D0(a1, v1);
  return swift_bridgeObjectRetain();
}

uint64_t sub_24F773A00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_24F7B0E68(a10, v10, v11);
  return swift_bridgeObjectRelease();
}

uint64_t sub_24F773A34()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t sub_24F773A68()
{
  return sub_24F8CF980();
}

uint64_t sub_24F773A98(uint64_t a1, ...)
{
  va_start(va, a1);
  return sub_24F76F710((uint64_t)va, v1);
}

uint64_t sub_24F773AB0()
{
  sub_24F781F34(v0, v1, 3);
  sub_24F781F34(v0, v1, 3);
  return swift_retain();
}

uint64_t sub_24F773B00()
{
  return type metadata accessor for Configuration();
}

uint64_t sub_24F773B28()
{
  return swift_release();
}

uint64_t sub_24F773B4C()
{
  return v0;
}

unint64_t sub_24F773B5C(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(a7 + 8 * (result >> 6) + 64) |= 1 << result;
  uint64_t v7 = (void *)(*(void *)(a7 + 48) + 16 * result);
  *uint64_t v7 = a2;
  v7[1] = a3;
  uint64_t v8 = (void *)(*(void *)(a7 + 56) + 24 * result);
  *uint64_t v8 = a4;
  v8[1] = a5;
  return result;
}

uint64_t sub_24F773B98()
{
  return v0;
}

void *sub_24F773BAC()
{
  return memcpy(&STACK[0x200], &STACK[0x2A8], 0xA3uLL);
}

__n128 sub_24F773BC8(__n128 *a1)
{
  return a1[4];
}

uint64_t sub_24F773C08()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_24F773C28()
{
  return v0;
}

void sub_24F773C40()
{
  sub_24F858884(v1, v2, v0);
}

uint64_t sub_24F773C60()
{
  return v0;
}

uint64_t sub_24F773C70()
{
  return 0;
}

void sub_24F773CB4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v21 = *(void *)(v19 - 104);
  uint64_t v22 = v17;
  uint64_t v23 = v18;
  uint64_t v24 = *(void *)(v19 - 96);
  Inflections.plural(_:options:_:)(*(Swift::String *)&v22, 0, *(Swift::String *)&v21);
}

uint64_t sub_24F773CE8(void *a1, void *a2)
{
  return sub_24F866CE8(a1, a2);
}

__n128 *sub_24F773CF0(__n128 *result, __n128 a2)
{
  result[1] = a2;
  return result;
}

uint64_t sub_24F773D00()
{
  return swift_beginAccess();
}

void *sub_24F773D18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  return sub_24F814C38(v31, &a31);
}

uint64_t sub_24F773D34()
{
  return sub_24F8CF9D0();
}

uint64_t sub_24F773D54()
{
  return sub_24F8CF9D0();
}

uint64_t sub_24F773D88(unint64_t a1)
{
  return a1 | ((HIDWORD(a1) & 1) << 32);
}

uint64_t sub_24F773DA0()
{
  return v0;
}

uint64_t sub_24F773DB0(uint64_t a1, unint64_t a2)
{
  sub_24F781F34(a1, a2, 3);
  sub_24F781F34(v3, v2, 3);
  return sub_24F781F34(v4, v5, 3);
}

uint64_t sub_24F773DF4()
{
  return FetchRequest<>.fetchOne(_:)(v1, v0, v2);
}

uint64_t sub_24F773E20()
{
  return swift_unexpectedError();
}

void sub_24F773E40()
{
}

uint64_t DatabaseWriter.write<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v6[2] = a3;
  v6[3] = a4;
  uint64_t v6[4] = a5;
  v6[5] = a1;
  void v6[6] = a2;
  return (*(uint64_t (**)(uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>), void *, uint64_t, uint64_t))(a5 + 24))(sub_24F771B58, v6, a4, a3);
}

void sub_24F773EE0()
{
}

void DatabasePool.writeWithoutTransaction<A>(_:)()
{
}

void sub_24F773F1C()
{
  sub_24F76FF94();
  type metadata accessor for SchedulingWatchdog();
  if (!sub_24F7834B0())
  {
    MEMORY[0x270FA5388](0);
    sub_24F8CF560();
    goto LABEL_5;
  }
  uint64_t v1 = sub_24F783564(*(void *)(v0 + 16));
  if ((v1 & 1) == 0)
  {
    MEMORY[0x270FA5388](v1);
    sub_24F8CF560();
    swift_release();
LABEL_5:
    sub_24F77BC10();
    return;
  }
  sub_24F8CF9D0();
  __break(1u);
}

uint64_t sub_24F7740AC(uint64_t a1)
{
  if (!*(void *)(v1 + 24)) {
    return 0;
  }
  unint64_t v7 = MEMORY[0x263F8EE78];
  MEMORY[0x270FA5388](a1);
  swift_retain();
  sub_24F77427C();
  if (v7 >> 62) {
    goto LABEL_21;
  }
  uint64_t v2 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  if (v2)
  {
    while (1)
    {
      if ((v7 & 0xC000000000000001) != 0)
      {
        uint64_t v3 = MEMORY[0x253364060](0, v7);
      }
      else
      {
        uint64_t v3 = *(void *)(v7 + 32);
        swift_retain();
      }
      if (sub_24F7742DC()) {
        break;
      }
      swift_release();
      if (v2 != 1)
      {
        uint64_t v4 = 5;
        while (1)
        {
          if ((v7 & 0xC000000000000001) != 0)
          {
            uint64_t v3 = MEMORY[0x253364060](v4 - 4, v7);
          }
          else
          {
            uint64_t v3 = *(void *)(v7 + 8 * v4);
            swift_retain();
          }
          uint64_t v5 = v4 - 3;
          if (__OFADD__(v4 - 4, 1)) {
            break;
          }
          if (sub_24F7742DC()) {
            goto LABEL_7;
          }
          swift_release();
          ++v4;
          if (v5 == v2) {
            goto LABEL_17;
          }
        }
        __break(1u);
LABEL_21:
        swift_bridgeObjectRetain_n();
        uint64_t v2 = sub_24F8CF9E0();
        if (v2) {
          continue;
        }
      }
      goto LABEL_17;
    }
LABEL_7:
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_17:
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v3 = 0;
  }
  swift_bridgeObjectRelease_n();
  return v3;
}

uint64_t sub_24F77427C()
{
  return swift_release();
}

uint64_t sub_24F7742DC()
{
  type metadata accessor for SchedulingWatchdog();
  uint64_t result = sub_24F7834B0();
  if (result)
  {
    char v2 = sub_24F783564(*(void *)(v0 + 16));
    swift_release();
    return v2 & 1;
  }
  return result;
}

void sub_24F77432C()
{
  id v1 = *(id *)(v0 + 24);
  sub_24F8CF560();
}

uint64_t static DatabaseValueConvertible<>.fetchCursor(_:arguments:adapter:)()
{
  sub_24F780324();
  uint64_t v1 = type metadata accessor for FastDatabaseValueCursor();
  sub_24F771DE4(v1, v2, v3, v4, v5, v6, v7, v8, v11, v12, v13, v14, v15, v16, v17, v18);
  swift_retain();
  uint64_t v9 = sub_24F777E70(v0);
  return sub_24F774660(v9);
}

uint64_t sub_24F774408()
{
  return v0;
}

uint64_t sub_24F774440()
{
  return sub_24F85FF64(v1, v0);
}

uint64_t sub_24F774458()
{
  return sub_24F799140(v4, v3, v2, v0, v1);
}

uint64_t sub_24F774490()
{
  return v0;
}

uint64_t sub_24F7744A4()
{
  return swift_getAssociatedTypeWitness();
}

uint64_t sub_24F7744C0@<X0>(int a1@<W8>)
{
  return (a1 + 1);
}

uint64_t type metadata accessor for FastDatabaseValueCursor()
{
  return sub_24F777DE0();
}

uint64_t static Row.fetchOne(_:arguments:adapter:)(uint64_t a1, long long *a2, uint64_t a3)
{
  long long v8 = *a2;
  static Row.fetchCursor(_:arguments:adapter:)(a1, (uint64_t *)&v8, a3);
  if (!v3)
  {
    uint64_t v4 = sub_24F774EA8();
    if (v4)
    {
      sub_24F7811D0((void *)(v4 + 16), *(void *)(v4 + 40));
      uint64_t v6 = sub_24F7752FC();
      v7(v6);
      swift_release();
    }
    swift_release();
  }
  return sub_24F775FA4();
}

uint64_t static Row.fetchCursor(_:arguments:adapter:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v8 = *a2;
  sub_24F7748F8(a3, (uint64_t)v7, &qword_26B1F7F10);
  type metadata accessor for RowCursor();
  uint64_t v4 = swift_allocObject();
  swift_retain();
  uint64_t v5 = sub_24F774654();
  sub_24F777E70(v5);
  sub_24F77477C(a1, (uint64_t)&v8, (uint64_t)v7);
  return v4;
}

uint64_t sub_24F774654()
{
  return v0;
}

uint64_t sub_24F774660(uint64_t a1, ...)
{
  va_start(va1, a1);
  va_start(va, a1);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  return sub_24F774B34(v1, (uint64_t *)va1, (uint64_t)va);
}

void sub_24F774684()
{
  sub_24F77C4AC();
}

uint64_t sub_24F7746A8()
{
  sub_24F808C90(v0, v1, 1);
  sub_24F808C90(v0, v1, 1);
  return swift_bridgeObjectRetain();
}

void *sub_24F7746EC(uint64_t a1, const void *a2)
{
  return memcpy((void *)(v2 + 752), a2, 0xA3uLL);
}

uint64_t sub_24F774718()
{
  return sub_24F8577F8(v0, v1);
}

char *sub_24F774730(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  return &a10;
}

uint64_t type metadata accessor for RowCursor()
{
  return self;
}

uint64_t sub_24F77477C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  sub_24F773850();
  uint64_t v10 = *v8;
  uint64_t v9 = v8[1];
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)(v3 + 16) = v11;
  type metadata accessor for Row();
  swift_allocObject();
  uint64_t v12 = swift_retain_n();
  sub_24F778494(v12);
  v16[3] = type metadata accessor for Statement();
  v16[4] = (uint64_t)&protocol witness table for Statement;
  v16[0] = a1;
  swift_retain();
  uint64_t v13 = sub_24F77852C(a3);
  swift_release();
  if (v4)
  {
    sub_24F77835C(v10);
    swift_release();
    sub_24F774DA0(a3, &qword_26B1F7F10);
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v16);
    swift_release();
    swift_deallocPartialClassInstance();
  }
  else
  {
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v16);
    *(void *)(v5 + 32) = v13;
    v16[0] = v10;
    v16[1] = v9;
    sub_24F77C958(v16, v14);
    swift_release();
    sub_24F774DA0(a3, &qword_26B1F7F10);
    sub_24F77835C(v10);
  }
  return v5;
}

uint64_t sub_24F7748F8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_24F77494C(a1, a2, a3);
  sub_24F773974();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v3, v4);
  return v3;
}

uint64_t sub_24F77494C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_24F781274(a3);
}

void static DatabaseValueConvertible<>.fetchOne(_:arguments:adapter:)()
{
  sub_24F76FF94();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  v25[0] = v9;
  uint64_t v22 = sub_24F8CF610();
  sub_24F8CF610();
  sub_24F770DF4();
  uint64_t v20 = v11;
  uint64_t v21 = v10;
  sub_24F771D60();
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v20 - v13;
  uint64_t v15 = *v6;
  uint64_t v16 = v6[1];
  uint64_t v17 = type metadata accessor for FastNullableDatabaseValueCursor();
  v24[0] = v15;
  v24[1] = v16;
  sub_24F7786CC(v4, (uint64_t)v23);
  swift_retain();
  sub_24F777E70(v15);
  sub_24F774B34(v8, v24, (uint64_t)v23);
  if (!v0)
  {
    uint64_t WitnessTable = swift_getWitnessTable();
    DatabaseCursor.next()(v17, WitnessTable, (uint64_t)v14);
    swift_release();
    if (sub_24F777048((uint64_t)v14, 1, v22) == 1)
    {
      sub_24F7771BC(v25[0], 1, 1, v2);
      (*(void (**)(char *, uint64_t))(v20 + 8))(v14, v21);
    }
    else
    {
      sub_24F773974();
      (*(void (**)(void))(v19 + 32))();
    }
  }
  sub_24F77BC10();
}

uint64_t sub_24F774B34(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  sub_24F774B9C(a1, a2, a3);
  return v6;
}

uint64_t sub_24F774B9C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v8 = *v3;
  uint64_t v10 = *a2;
  uint64_t v9 = a2[1];
  *((unsigned char *)v3 + 24) = 0;
  v3[2] = a1;
  uint64_t v11 = v8;
  sub_24F7786CC(a3, (uint64_t)&v18);
  if (!v19)
  {
    swift_retain();
    sub_24F774DA0((uint64_t)&v18, &qword_26B1F7F10);
    *((_DWORD *)v5 + 7) = 0;
    goto LABEL_8;
  }
  uint64_t v24 = v11;
  sub_24F794DE0(&v18, (uint64_t)v21);
  uint64_t v12 = v22;
  uint64_t v13 = v23;
  sub_24F7811D0(v21, v22);
  uint64_t v19 = type metadata accessor for Statement();
  uint64_t v20 = &protocol witness table for Statement;
  *(void *)&long long v18 = a1;
  swift_retain_n();
  uint64_t v14 = sub_24F7E5F3C(0, (uint64_t)&v18, v12, v13);
  if (v4)
  {
    sub_24F77835C(v10);
    swift_release();
    sub_24F774DA0(a3, &qword_26B1F7F10);
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&v18);
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v21);
    swift_release();
    swift_deallocPartialClassInstance();
    return (uint64_t)v5;
  }
  uint64_t v16 = (uint64_t)v14;
  uint64_t result = _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&v18);
  if (v16 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v16 <= 0x7FFFFFFF)
  {
    *((_DWORD *)v5 + 7) = v16;
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v21);
LABEL_8:
    v21[0] = v10;
    v21[1] = v9;
    sub_24F77C958(v21, v15);
    swift_release();
    sub_24F774DA0(a3, &qword_26B1F7F10);
    sub_24F77835C(v10);
    if (v4) {
      swift_release();
    }
    return (uint64_t)v5;
  }
  __break(1u);
  return result;
}

uint64_t sub_24F774DA0(uint64_t a1, uint64_t *a2)
{
  sub_24F781274(a2);
  sub_24F773974();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t type metadata accessor for FastNullableDatabaseValueCursor()
{
  return sub_24F777DE0();
}

uint64_t sub_24F774E10()
{
  unsigned __int8 v2 = 1;
  sub_24F78251C();
  if (*(unsigned char *)(v0 + 24))
  {
    unint64_t v3 = 0;
    return v3 & 0xFFFFFFFFFFLL | ((unint64_t)v2 << 40);
  }
  sub_24F774F78();
  swift_retain();
  sub_24F774F54();
  unint64_t v3 = sub_24F775060(v5);
  uint64_t result = sub_24F774F60();
  if (!v1)
  {
    if ((v3 & 0x10000000000) != 0)
    {
      unsigned __int8 v2 = 1;
      *(unsigned char *)(v0 + 24) = 1;
    }
    else
    {
      unsigned __int8 v2 = 0;
    }
    return v3 & 0xFFFFFFFFFFLL | ((unint64_t)v2 << 40);
  }
  return result;
}

uint64_t sub_24F774EA8()
{
  sub_24F78251C();
  if (*(unsigned char *)(v0 + 24)) {
    return 0;
  }
  sub_24F774F78();
  swift_retain();
  sub_24F774F54();
  uint64_t v2 = sub_24F774F90(v3);
  sub_24F774F60();
  if (!v1 && !v2) {
    *(unsigned char *)(v0 + 24) = 1;
  }
  return v2;
}

uint64_t sub_24F774F28()
{
  return v0;
}

void *sub_24F774F3C(void *a1)
{
  return memcpy(a1, v1, 0xA3uLL);
}

uint64_t sub_24F774F60()
{
  return swift_release();
}

uint64_t sub_24F774F78()
{
  return swift_retain();
}

uint64_t sub_24F774F90(uint64_t a1)
{
  if (!sub_24F77E41C(a1))
  {
    sub_24F77EBD4();
    sub_24F77B70C();
    uint64_t v1 = v2;
    if (v2) {
      goto LABEL_11;
    }
    swift_release();
  }
  if (sqlite3_step(v3) == 100)
  {
    sub_24F77F1E4();
    sub_24F7758A0(v6);
    if (!v2)
    {
      swift_release();
      return v7;
    }
    return swift_release();
  }
  sub_24F783230();
  if (!v4)
  {
    sub_24F77EBD4();
    sub_24F77B0D0();
LABEL_11:
    swift_release();
    return swift_release();
  }
  sub_24F77EBD4();
  sub_24F775DFC();
  sub_24F7809D4();
  uint64_t result = swift_release();
  if (!v1) {
    return 0;
  }
  return result;
}

unint64_t sub_24F775060(uint64_t a1)
{
  if (!sub_24F77E41C(a1))
  {
    sub_24F77EBD4();
    sub_24F77B70C();
    uint64_t v1 = v2;
    if (v2) {
      goto LABEL_12;
    }
    swift_release();
  }
  if (sqlite3_step(v3) != 100)
  {
    sub_24F783230();
    if (!v4)
    {
      sub_24F77EBD4();
      sub_24F77B0D0();
LABEL_12:
      swift_release();
      return swift_release();
    }
    sub_24F77EBD4();
    sub_24F775DFC();
    sub_24F7809D4();
    unint64_t result = swift_release();
    if (v1) {
      return result;
    }
    unint64_t v6 = 0;
    unsigned __int8 v7 = 1;
    return v6 | ((unint64_t)v7 << 40);
  }
  uint64_t v8 = (sqlite3_stmt *)sub_24F77F1E4();
  sub_24F77514C(v8, v9);
  if (!v2)
  {
    swift_release();
    unsigned __int8 v7 = 0;
    unint64_t v6 = v10 | ((unint64_t)v11 << 32);
    return v6 | ((unint64_t)v7 << 40);
  }
  return swift_release();
}

uint64_t sub_24F77514C@<X0>(sqlite3_stmt *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24F775168(a1, a2);
}

uint64_t sub_24F775168@<X0>(sqlite3_stmt *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_24F77519C(a1);
  if (!v2)
  {
    *(_DWORD *)a2 = result;
    *(unsigned char *)(a2 + 4) = BYTE4(result) & 1;
  }
  return result;
}

uint64_t sub_24F77519C(sqlite3_stmt *a1)
{
  unint64_t v1 = sub_24F7751DC(a1);
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t sub_24F7751DC(sqlite3_stmt *a1)
{
  int v3 = *(_DWORD *)(v1 + 28);
  int v4 = sqlite3_column_type(a1, v3);
  uint64_t v5 = 0;
  if (v4 == 5) {
    return v5 | ((unint64_t)(v4 == 5) << 32);
  }
  sqlite3_int64 v6 = sqlite3_column_int64(a1, v3);
  if (v6 == (int)v6)
  {
    uint64_t v5 = v6;
    return v5 | ((unint64_t)(v4 == 5) << 32);
  }
  sub_24F7D117C();
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_24F7752A8()
{
  return type metadata accessor for QueryInterfaceRequest();
}

uint64_t sub_24F7752E0(uint64_t a1)
{
  return a1 + 16;
}

uint64_t sub_24F7752FC()
{
  return v0;
}

uint64_t sub_24F775308(uint64_t a1)
{
  return sub_24F775314(a1, *v1, v1[1], v1[2]);
}

#error "24F775344: call analysis failed (funcsize=31)"

uint64_t Statement.columnNames.getter()
{
  if (*(void *)(v0 + 24))
  {
    uint64_t v1 = *(void *)(v0 + 24);
  }
  else
  {
    sub_24F898B60(v0);
    uint64_t v1 = v2;
    *(void *)(v0 + 24) = v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_24F7753F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v9[3] = &type metadata for StatementCopyRowImpl;
  v9[4] = &off_270102848;
  v9[0] = a1;
  v9[1] = a2;
  sub_24F778BA8();
  sub_24F77F23C(v5, v6, v7);
  *(void *)(a3 + 72) = *(void *)(a2 + 16);
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v9);
  return a3;
}

uint64_t sub_24F775458(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t _s12GRDBInternal20StatementCopyRowImplVwCP_0(uint64_t *a1, uint64_t *a2)
{
  sub_24F775534(a1, a2);
  swift_retain();
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_24F7754EC()
{
  return swift_allocObject();
}

void *sub_24F775518()
{
  return memcpy((void *)(v0 + 448), (const void *)(v0 + 624), 0xA3uLL);
}

uint64_t sub_24F775534(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a2;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  return result;
}

void sub_24F775548(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, long long a11, uint64_t a12, int a13, int a14, long long __dst, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  sub_24F77DC04();
  a28 = v29;
  a29 = v30;
  a17 = *MEMORY[0x263EF8340];
  unsigned int v32 = sqlite3_column_count(v31);
  if ((v32 & 0x80000000) != 0) {
    goto LABEL_24;
  }
  if (v32)
  {
    uint64_t v33 = v32;
    a16 = MEMORY[0x263F8EE78];
    sub_24F781818();
    uint64_t v34 = 0;
    uint64_t v35 = a16;
    while (1)
    {
      uint64_t v36 = (sqlite3_stmt *)sub_24F775894();
      double v38 = 0.0;
      unint64_t v39 = 0;
      char v40 = 4;
      switch(sqlite3_column_type(v36, v37))
      {
        case 1:
          uint64_t v41 = (sqlite3_stmt *)sub_24F775894();
          double v38 = COERCE_DOUBLE(sqlite3_column_int64(v41, v42));
          unint64_t v39 = 0;
          char v40 = 0;
          goto LABEL_18;
        case 2:
          char v52 = (sqlite3_stmt *)sub_24F775894();
          unint64_t v39 = 0;
          double v38 = sqlite3_column_double(v52, v53);
          char v40 = 1;
          goto LABEL_18;
        case 3:
          uint64_t v54 = (sqlite3_stmt *)sub_24F775894();
          if (!sqlite3_column_text(v54, v55)) {
            goto LABEL_25;
          }
          double v38 = COERCE_DOUBLE(sub_24F8CEEE0());
          unint64_t v39 = v56;
          char v40 = 2;
LABEL_18:
          a16 = v35;
          unint64_t v57 = *(void *)(v35 + 16);
          if (v57 >= *(void *)(v35 + 24) >> 1)
          {
            sub_24F781818();
            uint64_t v35 = a16;
          }
          *(void *)(v35 + 16) = v57 + 1;
          uint64_t v58 = v35 + 24 * v57;
          *(double *)(v58 + 32) = v38;
          *(void *)(v58 + 40) = v39;
          *(unsigned char *)(v58 + 48) = v40;
          if (v33 == v34)
          {
            __break(1u);
LABEL_24:
            __break(1u);
LABEL_25:
            __break(1u);
          }
          if (v33 == ++v34) {
            goto LABEL_22;
          }
          break;
        case 4:
          uint64_t v43 = (sqlite3_stmt *)sub_24F775894();
          uint64_t v45 = sqlite3_column_blob(v43, v44);
          if (v45 && (uint64_t v46 = v45, v47 = (sqlite3_stmt *)sub_24F775894(), (v49 = sqlite3_column_bytes(v47, v48)) != 0))
          {
            uint64_t v50 = v49;
            if (v49 < 15)
            {
              *(void *)((char *)&__dst + 6) = 0;
              *(void *)&__dst = 0;
              BYTE14(__dst) = v49;
              memcpy(&__dst, v46, v49);
              double v38 = *(double *)&__dst;
              unint64_t v39 = DWORD2(__dst) | ((unint64_t)BYTE12(__dst) << 32) | ((unint64_t)BYTE13(__dst) << 40) | ((unint64_t)BYTE14(__dst) << 48);
            }
            else
            {
              sub_24F8CE6D0();
              swift_allocObject();
              if (v50 == 0x7FFFFFFF)
              {
                uint64_t v51 = sub_24F8CE690();
                sub_24F8CE8A0();
                double v38 = COERCE_DOUBLE(swift_allocObject());
                *(_OWORD *)(*(void *)&v38 + 16) = xmmword_24F8E6550;
                unint64_t v39 = v51 | 0x8000000000000000;
              }
              else
              {
                *(void *)&double v38 = v50 << 32;
                unint64_t v39 = sub_24F8CE690() | 0x4000000000000000;
              }
            }
            char v40 = 3;
          }
          else
          {
            double v38 = 0.0;
            char v40 = 3;
            unint64_t v39 = 0xC000000000000000;
          }
          goto LABEL_18;
        case 5:
          goto LABEL_18;
        default:
          *(void *)&__dst = 0;
          *((void *)&__dst + 1) = 0xE000000000000000;
          sub_24F8CF7D0();
          swift_bridgeObjectRelease();
          *(void *)&__dst = 0xD00000000000001FLL;
          *((void *)&__dst + 1) = 0x800000024F8D12E0;
          sub_24F8CFAE0();
          sub_24F8CEEB0();
          swift_bridgeObjectRelease();
          sub_24F8CF9D0();
          __break(1u);
          return;
      }
    }
  }
LABEL_22:
  sub_24F781EC4();
}

uint64_t sub_24F775894()
{
  return v0;
}

uint64_t sub_24F7758A0@<X0>(uint64_t *a1@<X8>)
{
  return sub_24F7758BC(a1);
}

uint64_t sub_24F7758BC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_24F7758E8();
  if (!v1) {
    *a1 = result;
  }
  return result;
}

uint64_t sub_24F7758E8()
{
  return swift_retain();
}

uint64_t sub_24F775904()
{
  return sub_24F76F86C((__n128 *)&STACK[0x410]);
}

uint64_t sub_24F77591C()
{
  return v0;
}

uint64_t sub_24F77592C()
{
  return v0;
}

double sub_24F775938()
{
  return DatabaseValue.Storage.value.getter(v1, v2, v3, v0);
}

uint64_t sub_24F775958()
{
  return v0;
}

uint64_t sub_24F775968@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24F775974(a1, *(sqlite3_stmt **)(v2 + 8), a2);
}

uint64_t sub_24F775974@<X0>(uint64_t result@<X0>, sqlite3_stmt *a2@<X2>, uint64_t a3@<X8>)
{
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    return sub_24F76B11C(a2, result, a3);
  }
  __break(1u);
  return result;
}

double DatabaseValue.Storage.value.getter@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  switch(a3)
  {
    case 1:
      uint64_t v4 = MEMORY[0x263F8D538];
      uint64_t v5 = &protocol witness table for Double;
      goto LABEL_4;
    case 2:
      *(void *)(a4 + 24) = MEMORY[0x263F8D310];
      *(void *)(a4 + 32) = &protocol witness table for String;
      *(void *)a4 = a1;
      *(void *)(a4 + 8) = a2;
      swift_bridgeObjectRetain();
      break;
    case 3:
      *(void *)(a4 + 24) = MEMORY[0x263F06F78];
      *(void *)(a4 + 32) = &protocol witness table for Data;
      *(void *)a4 = a1;
      *(void *)(a4 + 8) = a2;
      sub_24F78419C(a1, a2);
      break;
    case 4:
      *(void *)(a4 + 32) = 0;
      double result = 0.0;
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
      break;
    default:
      uint64_t v4 = MEMORY[0x263F8E5C0];
      uint64_t v5 = &protocol witness table for Int64;
LABEL_4:
      *(void *)(a4 + 24) = v4;
      *(void *)(a4 + 32) = v5;
      *(void *)a4 = a1;
      break;
  }
  return result;
}

uint64_t sub_24F775A40(uint64_t a1, uint64_t a2)
{
  return sub_24F770A08(a1, a2);
}

uint64_t sub_24F775A6C(uint64_t a1, uint64_t a2)
{
  return sub_24F773018(a1, a2, &OBJC_IVAR____TtC12GRDBInternal8Database____lazy_storage___publicStatementCache);
}

uint64_t sub_24F775A78()
{
  return sub_24F773034(&OBJC_IVAR____TtC12GRDBInternal8Database____lazy_storage___publicStatementCache);
}

uint64_t sub_24F775A98()
{
  return swift_getObjectType();
}

uint64_t sub_24F775AD0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_24F775B00()
{
  return v0;
}

uint64_t sub_24F775B58()
{
  return swift_beginAccess();
}

uint64_t sub_24F775BB0()
{
  return sub_24F8CEEB0();
}

uint64_t sub_24F775BD8()
{
  return v0;
}

uint64_t sub_24F775BF0()
{
  return v0;
}

uint64_t sub_24F775C04()
{
  return swift_retain();
}

uint64_t sub_24F775C24()
{
  return sub_24F77835C(v0);
}

uint64_t sub_24F775C3C()
{
  sub_24F808CA0(v1, v0, 1);
  return v1;
}

void *sub_24F775C7C(uint64_t a1, const void *a2)
{
  return memcpy(&STACK[0x2A8], a2, 0xA3uLL);
}

uint64_t sub_24F775C94()
{
  return v0;
}

uint64_t sub_24F775CA4()
{
  return swift_bridgeObjectRetain();
}

void _s12GRDBInternal12TableRequestPA2A08FilteredC0RzAA05TypedC0Rzs12Identifiable10RowDecoderAaEPRpzAA24DatabaseValueConvertibleAgH_2IDRPzrlE6filter3idsxqd___tSlRd__AaJ7ElementRpd__AlPRSlF_0()
{
}

void *sub_24F775CEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  return sub_24F7920F8(&a30);
}

uint64_t sub_24F775D08()
{
  return sub_24F8CEEB0();
}

void sub_24F775D24()
{
  sub_24F787184();
}

void sub_24F775D44()
{
  uint64_t v2 = *(void *)(v0 + 16) + 1;
  sub_24F787CA4(0, v2, 1, v0);
}

void sub_24F775D94(uint64_t a1, int a2, int a3, uint64_t a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  a11 = v13;
  a12 = v14;
  uint64_t v16 = &a11;
  uint64_t v17 = v12;
  Database.execute(sql:arguments:)(*(Swift::String *)&a1, *(GRDBInternal::StatementArguments *)(&a4 - 1));
}

uint64_t sub_24F775DC4()
{
  return sub_24F8CEFA0();
}

uint64_t sub_24F775DDC()
{
  return 0;
}

uint64_t sub_24F775DFC()
{
  return Database.statementDidExecute(_:)(v0);
}

uint64_t sub_24F775E14()
{
  sub_24F8A89DC(v0, v1, v2, v4, v3);
  return sub_24F8A89DC(v0, v1, v2, v4, v3);
}

uint64_t sub_24F775E60()
{
  sub_24F781F10(v2, v3, 3);
  sub_24F781F10(v1, v0, 3);
  sub_24F781F10(v2, v3, 3);
  sub_24F781F10(v1, v0, 3);
  return sub_24F781F10(v1, v0, 3);
}

uint64_t sub_24F775ECC()
{
  return v0;
}

uint64_t sub_24F775EF0()
{
  return sub_24F8CED30();
}

void Row.fastDecodeIfPresent<A>(_:atUncheckedIndex:)()
{
  sub_24F76FF94();
  sub_24F77606C();
  uint64_t v0 = sub_24F776174();
  v1(v0);
  sub_24F77BC10();
}

void Row.fastDecode<A>(_:atUncheckedIndex:)()
{
  sub_24F76FF94();
  sub_24F77606C();
  uint64_t v0 = sub_24F776174();
  v1(v0);
  sub_24F77BC10();
}

uint64_t sub_24F775FA4()
{
  return v0;
}

uint64_t sub_24F775FB0()
{
  return v0;
}

uint64_t sub_24F775FC8()
{
  return 0;
}

void sub_24F775FE0()
{
  sub_24F77C4AC();
}

void sub_24F776004(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17, unint64_t a18)
{
  STACK[0x258] = a18;
  STACK[0x260] = a17;
  LOBYTE(STACK[0x268]) = 0;
  STACK[0x270] = 0;
}

unint64_t sub_24F776038()
{
  return sub_24F830AA8();
}

void *sub_24F77606C()
{
  return sub_24F7811D0((void *)(v0 + 16), *(void *)(v0 + 40));
}

uint64_t sub_24F7760C8()
{
  return sub_24F8CF610();
}

uint64_t sub_24F7760FC()
{
  return v0;
}

uint64_t sub_24F776108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return sub_24F808CA0(a1, a16, 1);
}

uint64_t sub_24F776124()
{
  return sub_24F76F86C((__n128 *)&STACK[0x200]);
}

uint64_t sub_24F77613C()
{
  return sub_24F8CED10();
}

uint64_t sub_24F776154()
{
  return sub_24F8A65C0();
}

uint64_t sub_24F776174()
{
  return v0;
}

uint64_t sub_24F7761A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_24F776204(a1, a2, a6, a3, a7, a4, a5, (uint64_t)sub_24F8BEAE0, (void (*)(long long *, uint64_t, unsigned char *, uint64_t, uint64_t))sub_24F776E80);
}

uint64_t sub_24F776204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(long long *, uint64_t, unsigned char *, uint64_t, uint64_t))
{
  sub_24F7762EC();
  v16();
  long long v27 = v29;
  char v28 = v30;
  uint64_t v20 = a3;
  uint64_t v21 = a4;
  uint64_t v22 = a5;
  uint64_t v23 = a6;
  uint64_t v24 = a7;
  uint64_t v25 = v9;
  uint64_t v26 = a2;
  a9(&v27, a8, v19, a4, a6);
  return sub_24F781F10(v27, *((unint64_t *)&v27 + 1), v28);
}

unint64_t sub_24F7762F8@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24F776300(a1, *v2, a2);
}

unint64_t sub_24F776300@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(a2 + 16) > result)
  {
    uint64_t v3 = a2 + 24 * result;
    uint64_t v4 = *(void *)(v3 + 32);
    unint64_t v5 = *(void *)(v3 + 40);
    *(void *)a3 = v4;
    *(void *)(a3 + 8) = v5;
    char v6 = *(unsigned char *)(v3 + 48);
    *(unsigned char *)(a3 + 16) = v6;
    return sub_24F781F34(v4, v5, v6);
  }
  __break(1u);
  return result;
}

void sub_24F776334()
{
  sub_24F76FF94();
  uint64_t v32 = v0;
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  v31[1] = v5;
  v31[2] = v6;
  uint64_t v8 = v7;
  uint64_t v43 = v9;
  uint64_t v10 = sub_24F8CF610();
  sub_24F770DF4();
  uint64_t v12 = v11;
  sub_24F771D60();
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)v31 - v14;
  uint64_t v17 = *v8;
  uint64_t v16 = v8[1];
  int v18 = *((unsigned __int8 *)v8 + 16);
  uint64_t v40 = v17;
  uint64_t v41 = v16;
  char v42 = v18;
  uint64_t v19 = sub_24F780EBC();
  v20(v19, v4, v2);
  if (sub_24F777048((uint64_t)v15, 1, v4) == 1)
  {
    uint64_t v21 = v43;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v10);
    if (v18 != 4 || v16 | v17)
    {
      sub_24F8904A0();
      v24();
      sub_24F77EB98();
      uint64_t v33 = v17;
      uint64_t v34 = v16;
      char v35 = v18;
      sub_24F7D29A4();
      uint64_t v25 = swift_allocError();
      sub_24F76B798(v25, v26);
      uint64_t v27 = v36;
      uint64_t v28 = v37;
      uint64_t v29 = v39;
      unsigned __int8 v30 = v38;
      swift_release();
      sub_24F7B0E68(v27, v28, v30);
      swift_bridgeObjectRelease();
      sub_24F77835C(v29);
      swift_willThrow();
      goto LABEL_8;
    }
    uint64_t v22 = 1;
  }
  else
  {
    sub_24F773974();
    uint64_t v21 = v43;
    (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(v43, v15, v4);
    uint64_t v22 = 0;
  }
  sub_24F772304(v21, v22);
LABEL_8:
  sub_24F77BC10();
}

uint64_t sub_24F776510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_24F776204(a1, a2, a6, a3, a7, a4, a5, (uint64_t)sub_24F8BEAE0, (void (*)(long long *, uint64_t, unsigned char *, uint64_t, uint64_t))sub_24F776334);
}

uint64_t Statement.__deallocating_deinit()
{
  Statement.deinit();
  return MEMORY[0x270FA0228](v0, 144, 7);
}

uint64_t Statement.deinit()
{
  sqlite3_finalize(*(sqlite3_stmt **)(v0 + 16));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_24F776A6C(*(void *)(v0 + 48), *(void *)(v0 + 56), *(unsigned char *)(v0 + 64));
  swift_bridgeObjectRelease();
  swift_unownedRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_24F77661C()
{
  sub_24F776A80();
  uint64_t v1 = MEMORY[0x263F8EE78];
  uint64_t v2 = sub_24F8CEC70();
  swift_beginAccess();
  *(void *)(v0 + 24) = v2;
  swift_bridgeObjectRelease();
  *(void *)(v0 + 32) = v1;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v0 + 40) = 0;
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v4 = *(void *)(v0 + 56);
  *(void *)(v0 + 48) = 0;
  *(void *)(v0 + 56) = 0;
  unsigned __int8 v5 = *(unsigned char *)(v0 + 64);
  *(unsigned char *)(v0 + 64) = -1;
  uint64_t result = sub_24F776A6C(v3, v4, v5);
  *(unsigned char *)(v0 + 65) = 0;
  return result;
}

uint64_t sub_24F7766C0(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_24F7766D8(uint64_t a1, const char *a2, const char **a3, unsigned int a4)
{
  uint64_t v5 = v4;
  ppStmt[1] = *(sqlite3_stmt **)MEMORY[0x263EF8340];
  sub_24F773850();
  *(void *)(v4 + 24) = 0;
  sub_24F776A80();
  uint64_t v10 = MEMORY[0x263F8EE78];
  *(void *)(v5 + 32) = sub_24F8CEC70();
  *(unsigned char *)(v5 + 40) = 0;
  *(void *)(v5 + 48) = 0;
  *(void *)(v5 + 56) = 0;
  *(unsigned char *)(v5 + 64) = -1;
  *(void *)(v5 + 72) = v10;
  *(void *)(v5 + 88) = 0;
  uint64_t v11 = MEMORY[0x263F8EE80];
  *(unsigned char *)(v5 + 96) = 1;
  *(void *)(v5 + 104) = v10;
  *(void *)(v5 + 112) = v11;
  *(void *)(v5 + 120) = 0;
  *(unsigned char *)(v5 + 128) = 1;
  *(void *)(v5 + 136) = 0;
  type metadata accessor for SchedulingWatchdog();
  if (sub_24F78346C(a1))
  {
    uint64_t v12 = sub_24F776AF8();
    sub_24F77661C();
    ppStmt[0] = 0;
    swift_beginAccess();
    int v13 = sqlite3_prepare_v3(*(sqlite3 **)(a1 + 16), a2, -1, a4, ppStmt, a3);
    if (!v13)
    {
      uint64_t v23 = ppStmt[0];
      if (ppStmt[0])
      {
        *(void *)(v5 + 80) = a1;
        swift_unownedRetain();
        swift_release();
        *(void *)(v5 + 16) = v23;
        swift_beginAccess();
        uint64_t v24 = *(void *)(v12 + 24);
        swift_beginAccess();
        *(void *)(v5 + 32) = v24;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(unsigned char *)(v5 + 40) = *(unsigned char *)(v12 + 40);
        uint64_t v25 = *(void *)(v12 + 48);
        uint64_t v26 = *(void *)(v12 + 56);
        uint64_t v27 = *(void *)(v5 + 48);
        uint64_t v28 = *(void *)(v5 + 56);
        unsigned __int8 v29 = *(unsigned char *)(v12 + 64);
        *(void *)(v5 + 48) = v25;
        *(void *)(v5 + 56) = v26;
        unsigned __int8 v30 = *(unsigned char *)(v5 + 64);
        *(unsigned char *)(v5 + 64) = v29;
        sub_24F776AE4(v25, v26, v29);
        sub_24F776A6C(v27, v28, v30);
        uint64_t v31 = *(void *)(v12 + 32);
        swift_bridgeObjectRetain();
        swift_release();
        *(void *)(v5 + 72) = v31;
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_24F776A6C(*(void *)(v5 + 48), *(void *)(v5 + 56), *(unsigned char *)(v5 + 64));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_24F89C2E8();
        return 0;
      }
      return v5;
    }
    int v14 = v13;
    uint64_t v15 = (uint64_t)Database.lastErrorMessage.getter();
    uint64_t v17 = v16;
    uint64_t v33 = sub_24F8CEED0();
    uint64_t v19 = v18;
    sub_24F7DC6DC();
    sub_24F770FA4();
    uint64_t v21 = v20;
    if (v17)
    {
LABEL_6:
      *(_DWORD *)uint64_t v21 = v14;
      *(void *)(v21 + 8) = v15;
      *(void *)(v21 + 16) = v17;
      *(void *)(v21 + 24) = v33;
      *(void *)(v21 + 32) = v19;
      *(void *)(v21 + 40) = 0;
      *(void *)(v21 + 48) = 0;
      *(unsigned char *)(v21 + 56) = 0;
      swift_willThrow();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_24F776A6C(*(void *)(v5 + 48), *(void *)(v5 + 56), *(unsigned char *)(v5 + 64));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_24F89C2E8();
      return v5;
    }
    if (sqlite3_errstr(v14))
    {
      uint64_t v15 = sub_24F8CEED0();
      uint64_t v17 = v22;
      goto LABEL_6;
    }
    __break(1u);
  }
  sub_24F770EAC();
  uint64_t result = sub_24F77F958();
  __break(1u);
  return result;
}

uint64_t sub_24F776A6C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 0xFF) {
    return sub_24F7766C0(a1, a2, a3);
  }
  return a1;
}

unint64_t sub_24F776A80()
{
  unint64_t result = qword_26B1F7DB0;
  if (!qword_26B1F7DB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B1F7DB0);
  }
  return result;
}

uint64_t sub_24F776ACC(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_24F776AE4(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 0xFF) {
    return sub_24F776ACC(a1, a2, a3);
  }
  return a1;
}

uint64_t sub_24F776AF8()
{
  return sub_24F77CBA8(&OBJC_IVAR____TtC12GRDBInternal8Database____lazy_storage___authorizer, (void (*)(void))type metadata accessor for StatementAuthorizer, 66, sub_24F7EABD0);
}

uint64_t DatabaseCursor.forEach(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16))(a3, v7);
  if ((result & 1) == 0)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a3, a4);
    MEMORY[0x270FA5388](v9);
    Statement.forEachStep(_:)((uint64_t (*)(sqlite3_stmt *))sub_24F784DA8);
    uint64_t result = sub_24F77C8EC();
    if (!v4) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(1, a3, v7);
    }
  }
  return result;
}

uint64_t DatabaseCursor.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = sub_24F8CF610();
  sub_24F77AD10();
  uint64_t v10 = v9;
  MEMORY[0x270FA5388](v11);
  int v13 = (char *)v23 - v12;
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16))(a1, v7))
  {
    uint64_t v14 = a3;
    uint64_t v15 = 1;
    uint64_t v16 = AssociatedTypeWitness;
  }
  else
  {
    v23[1] = v8;
    void v23[2] = v10;
    (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
    uint64_t v17 = sub_24F77751C(v3, a1, a2);
    uint64_t v18 = AssociatedTypeWitness;
    uint64_t v19 = v25;
    Statement.step<A>(_:)((uint64_t (*)(sqlite3_stmt *))v17, AssociatedTypeWitness, (uint64_t)v13);
    if (v19)
    {
      swift_release();
      return swift_release();
    }
    uint64_t v25 = 0;
    swift_release();
    swift_release();
    if (sub_24F777048((uint64_t)v13, 1, v18) == 1)
    {
      sub_24F7739F4();
      v21();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(1, a1, v7);
      uint64_t v14 = a3;
      uint64_t v15 = 1;
    }
    else
    {
      sub_24F773974();
      (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))(a3, v13, v18);
      uint64_t v14 = a3;
      uint64_t v15 = 0;
    }
    uint64_t v16 = v18;
  }
  return sub_24F7771BC(v14, v15, 1, v16);
}

void sub_24F776E80()
{
  void (*v4)(void *__return_ptr, uint64_t);
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(void *__return_ptr, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char v33;
  void v34[3];
  unsigned __int8 v35;
  uint64_t v36;
  void v37[2];
  char v38;

  sub_24F76FF94();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  unsigned __int8 v29 = v5;
  unsigned __int8 v30 = v4;
  uint64_t v7 = v6;
  uint64_t v28 = v8;
  uint64_t v9 = sub_24F8CF610();
  sub_24F770DF4();
  uint64_t v11 = v10;
  sub_24F771D60();
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v27 - v13;
  uint64_t v15 = *v7;
  uint64_t v16 = v7[1];
  uint64_t v17 = *((unsigned char *)v7 + 16);
  v37[0] = v15;
  v37[1] = v16;
  unsigned __int8 v38 = v17;
  uint64_t v18 = sub_24F780EBC();
  v19(v18, v3, v1);
  if (sub_24F777048((uint64_t)v14, 1, v3) == 1)
  {
    uint64_t v20 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v9);
    v30(v37, v20);
    sub_24F77EB98();
    uint64_t v31 = v15;
    uint64_t v32 = v16;
    uint64_t v33 = v17;
    sub_24F7D29A4();
    swift_allocError();
    sub_24F7B00C4(v3, (uint64_t)v34, v21);
    uint64_t v22 = v34[1];
    uint64_t v23 = v34[2];
    uint64_t v24 = v36;
    uint64_t v25 = v35;
    swift_release();
    sub_24F7B0E68(v22, v23, v25);
    swift_bridgeObjectRelease();
    sub_24F77835C(v24);
    swift_willThrow();
  }
  else
  {
    sub_24F773974();
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(v28, v14, v3);
  }
  sub_24F77BC10();
}

uint64_t sub_24F777048(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t RecordCursor.statement.getter()
{
  return swift_retain();
}

uint64_t RecordCursor._isDone.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t Statement.step<A>(_:)@<X0>(uint64_t (*a1)(sqlite3_stmt *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v8 = *(sqlite3_stmt **)(v3 + 16);
  if (sqlite3_stmt_busy(v8) || (sub_24F77749C(), Database.statementWillExecute(_:)(v3), uint64_t result = sub_24F77C8EC(), !v4))
  {
    if (sqlite3_step(v8) == 100)
    {
      uint64_t result = a1(v8);
      if (v4) {
        return result;
      }
      uint64_t v10 = a3;
      uint64_t v11 = 0;
      return sub_24F7771BC(v10, v11, 1, a2);
    }
    sub_24F783230();
    if (!v9)
    {
      sub_24F77749C();
      Database.statementDidFail(_:withResultCode:)(v3, v4);
      return sub_24F77C8EC();
    }
    sub_24F77749C();
    Database.statementDidExecute(_:)(v3);
    uint64_t result = sub_24F77C8EC();
    if (!v4)
    {
      uint64_t v10 = a3;
      uint64_t v11 = 1;
      return sub_24F7771BC(v10, v11, 1, a2);
    }
  }
  return result;
}

uint64_t sub_24F7771BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_24F7771E4()
{
  return swift_arrayInitWithCopy();
}

uint64_t sub_24F777224()
{
  return v0;
}

uint64_t sub_24F777244()
{
  return v0;
}

uint64_t sub_24F777250()
{
  return sub_24F8CF610();
}

void *sub_24F77729C(void *a1)
{
  return memcpy(a1, (const void *)(v1 + 184), 0xA2uLL);
}

uint64_t sub_24F7772B4()
{
  return swift_allocObject();
}

uint64_t sub_24F777308()
{
  return v0;
}

uint64_t sub_24F77733C(void *a1)
{
  return RowDecodingContext.init(row:key:)(a1, (long long *)(v1 - 152), v1 - 128);
}

uint64_t sub_24F777354()
{
  return sub_24F79900C((uint64_t)&STACK[0x250]);
}

__n128 sub_24F7773A4()
{
  return *(__n128 *)(v0 + 248);
}

uint64_t sub_24F7773E0()
{
  return swift_getAssociatedTypeWitness();
}

void sub_24F77742C(uint64_t a1@<X8>)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v7 = (void *)(v1 + 24 * v5);
  v7[4] = v2;
  v7[5] = v4;
  v7[6] = v3;
}

uint64_t *sub_24F777450(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  a18 = *(void *)(a2 + 16);
  a19 = a3;
  return sub_24F76ADC4(&a15);
}

uint64_t sub_24F777480()
{
  return sub_24F8CEEB0();
}

uint64_t sub_24F77749C()
{
  return swift_unownedRetainStrong();
}

uint64_t sub_24F7774B4()
{
  sub_24F781F34(v1, v0, 3);
  sub_24F781F10(v2, v3, 3);
  return v1;
}

uint64_t sub_24F7774F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13 = *(void *)(v11 - 72);
  return FetchRequest<>.fetchSet(_:)(a9, v9, a1, v13, v10);
}

uint64_t (*sub_24F77751C(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v6 = (void *)swift_allocObject();
  void v6[2] = a2;
  v6[3] = a3;
  uint64_t v6[4] = a1;
  swift_unknownObjectRetain();
  return sub_24F777590;
}

uint64_t sub_24F777590()
{
  sub_24F777748();
  return v0();
}

uint64_t sub_24F7775C0()
{
  return swift_arrayInitWithCopy();
}

uint64_t sub_24F7775D8()
{
  return v0;
}

uint64_t sub_24F7775EC()
{
  return swift_unownedRetainStrong();
}

uint64_t sub_24F777610()
{
  return v0;
}

uint64_t sub_24F777630()
{
  return sub_24F8CED30();
}

uint64_t sub_24F777654(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  return RangeReplaceableCollection.init<A>(_:)(v3, (uint64_t)va);
}

uint64_t sub_24F777684(uint64_t a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  return sub_24F7AC1D0((uint64_t)va1, (uint64_t)va);
}

uint64_t sub_24F77769C()
{
  return sub_24F8CEC70();
}

uint64_t sub_24F7776BC()
{
  return sub_24F8CEEB0();
}

uint64_t sub_24F7776D8()
{
  return 0;
}

uint64_t sub_24F7776F0()
{
  return sub_24F8CEEB0();
}

uint64_t sub_24F77770C()
{
  return v0;
}

__n128 sub_24F777720()
{
  return v0[3];
}

uint64_t sub_24F777734()
{
  return v0;
}

void sub_24F77775C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  *a13 = 0;
}

void sub_24F777778(unint64_t a1@<X8>)
{
  *(void *)(v1 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a1;
}

uint64_t static DatabaseValueConvertible<>.fromDatabaseValue(_:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v23 = a7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = sub_24F8CF610();
  sub_24F770DF4();
  uint64_t v16 = v15;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v22 - v18;
  LOBYTE(v18) = *((unsigned char *)a1 + 16);
  long long v31 = *a1;
  char v32 = v18;
  (*(void (**)(long long *, uint64_t, uint64_t))(a6 + 32))(&v31, AssociatedTypeWitness, a6);
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  uint64_t v28 = a5;
  uint64_t v29 = a6;
  uint64_t v30 = v22;
  sub_24F77AAC0((void (*)(char *, char *))sub_24F783CF4, (uint64_t)v24, MEMORY[0x263F8E628], a2, v20, v23);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, v14);
}

uint64_t sub_24F777910@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = static String.fromDatabaseValue(_:)(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t static String.fromDatabaseValue(_:)(uint64_t a1)
{
  uint64_t v2 = sub_24F8CEDD0();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v3 = *(void *)a1;
  unint64_t v4 = *(void *)(a1 + 8);
  int v5 = *(unsigned __int8 *)(a1 + 16);
  if (v5 == 3)
  {
    sub_24F78419C(*(void *)a1, *(void *)(a1 + 8));
    sub_24F8CEDC0();
    uint64_t v6 = sub_24F8CEDA0();
    sub_24F781F10(v3, v4, 3);
  }
  else
  {
    uint64_t v6 = 0;
    if (v5 == 2)
    {
      swift_bridgeObjectRetain();
      return v3;
    }
  }
  return v6;
}

uint64_t sub_24F777A20()
{
  return RecordCursor._element(sqliteStatement:)();
}

uint64_t RecordCursor._element(sqliteStatement:)()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 80);
  uint64_t v2 = *(void *)(*(void *)v0 + 88);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 8);
  uint64_t v4 = swift_retain();
  return v3(v4, v1, v2);
}

uint64_t FetchableRecord<>.init(row:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for RowDecoder();
  uint64_t inited = swift_initStackObject();
  sub_24F777B90(inited, a1, a2, a3);
  return swift_release();
}

uint64_t type metadata accessor for RowDecoder()
{
  return self;
}

uint64_t sub_24F777B90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v7)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void v13[5];

  uint64_t v7 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(a4 + 40);
  swift_retain();
  v7(v13, a3, a4);
  uint64_t v8 = v13[0];
  uint64_t v9 = v13[1];
  v13[3] = type metadata accessor for _RowDecoder();
  v13[4] = swift_getWitnessTable();
  uint64_t v10 = (void *)swift_allocObject();
  v13[0] = v10;
  uint64_t v11 = MEMORY[0x263F8EE78];
  void v10[2] = a2;
  v10[3] = v11;
  v10[4] = v8;
  v10[5] = v9;
  return sub_24F8CF2F0();
}

void static FetchableRecord.databaseColumnDecodingStrategy.getter(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t type metadata accessor for _RowDecoder()
{
  return sub_24F777DE0();
}

uint64_t static FetchableRecord.fetchOne(_:arguments:adapter:)@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t result = sub_24F7809B8(a1, a2, a3, a4, a5, a6, a7, a8, v14);
  if (!v9)
  {
    uint64_t v12 = type metadata accessor for RecordCursor();
    uint64_t WitnessTable = swift_getWitnessTable();
    DatabaseCursor.next()(v12, WitnessTable, a9);
    return swift_release();
  }
  return result;
}

uint64_t static FetchableRecord.fetchCursor(_:arguments:adapter:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  type metadata accessor for RecordCursor();
  v9[0] = v5;
  v9[1] = v6;
  sub_24F7786CC(a3, (uint64_t)v8);
  swift_retain();
  sub_24F777E70(v5);
  return sub_24F777EB0(a1, v9, (uint64_t)v8);
}

uint64_t sub_24F777DE0()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for RecordCursor()
{
  return sub_24F777DE0();
}

uint64_t sub_24F777E28@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(v1 + 72);
  *a1 = v3;
  a1[1] = v4;
  return sub_24F777E70(v3);
}

uint64_t sub_24F777E70(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_24F777EB0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  sub_24F7781B8(a1, a2, a3);
  return v6;
}

uint64_t sub_24F777F18@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  v19[1] = *(const char **)MEMORY[0x263EF8340];
  if (result)
  {
    uint64_t v6 = result;
    v19[0] = 0;
    uint64_t v7 = (const char *)(result + *(void *)(a2 + 56));
    unsigned int v8 = *(_DWORD *)(a2 + 32);
    type metadata accessor for Statement();
    swift_allocObject();
    uint64_t v9 = swift_retain();
    uint64_t result = sub_24F7766D8(v9, v7, v19, v8);
    if (v3) {
      return result;
    }
    if (!v19[0])
    {
      __break(1u);
LABEL_13:
      __break(1u);
      return result;
    }
    uint64_t v10 = result;
    *(void *)(a2 + 56) = &v19[0][-v6];
    if (result)
    {
      sub_24F777E28(v18);
      uint64_t v11 = v18[0];
      swift_retain();
      sub_24F77835C(v11);
      if (!v11)
      {
LABEL_11:
        uint64_t result = swift_release();
        *a3 = v10;
        return result;
      }
      uint64_t v12 = (void *)(a2 + 64);
      uint64_t result = swift_beginAccess();
      if (*(void *)(a2 + 64))
      {
        uint64_t v13 = sub_24F782364();
        swift_retain();
        uint64_t v14 = sub_24F783970(v13, v12, v10);
        swift_endAccess();
        uint64_t v15 = swift_bridgeObjectRelease();
        MEMORY[0x270FA5388](v15);
        sub_24F781274(&qword_26B1F7348);
        sub_24F778988((unint64_t *)&qword_26B1F72B0, &qword_26B1F7348);
        swift_getKeyPath();
        swift_retain();
        uint64_t v16 = sub_24F87F4C4(v14);
        swift_bridgeObjectRelease();
        swift_release();
        v18[0] = v16;
        v18[1] = MEMORY[0x263F8EE80];
        v17.values._rawValue = v18;
        Statement.setUncheckedArguments(_:)(v17);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_11;
      }
      goto LABEL_13;
    }
    uint64_t result = sub_24F7727C0();
  }
  *a3 = 0;
  return result;
}

uint64_t sub_24F7781B8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)(v3 + 16) = a1;
  type metadata accessor for Row();
  swift_allocObject();
  uint64_t v10 = swift_retain_n();
  sub_24F778494(v10);
  v14[3] = type metadata accessor for Statement();
  v14[4] = (uint64_t)&protocol witness table for Statement;
  v14[0] = a1;
  swift_retain();
  uint64_t v11 = sub_24F77852C(a3);
  swift_release();
  if (v4)
  {
    sub_24F77835C(v9);
    swift_release();
    sub_24F7783C0(a3, &qword_26B1F7F10);
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v14);
    swift_release();
    swift_deallocPartialClassInstance();
  }
  else
  {
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v14);
    *(void *)(v5 + 32) = v11;
    v14[0] = v9;
    v14[1] = v8;
    sub_24F77C958(v14, v12);
    swift_release();
    sub_24F7783C0(a3, &qword_26B1F7F10);
    sub_24F77835C(v9);
  }
  return v5;
}

uint64_t sub_24F77835C(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t type metadata accessor for Statement()
{
  return self;
}

uint64_t sub_24F7783C0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_24F781274(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_24F77841C(uint64_t a1, uint64_t *a2)
{
  sub_24F781274(a2);
  sub_24F770E70();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t type metadata accessor for Row()
{
  return self;
}

void *sub_24F778494(uint64_t a1)
{
  sub_24F778BA8();
  v1[10] = v3;
  v1[11] = v4;
  v1[7] = a1;
  uint64_t v5 = *(sqlite3_stmt **)(a1 + 16);
  v1[8] = v5;
  swift_retain_n();
  sub_24F77C260(v5);
  v1[2] = v6;
  v1[3] = v7;
  v1[5] = &type metadata for StatementRowImpl;
  v1[6] = &off_270101068;
  v1[4] = v8;
  LODWORD(v5) = sqlite3_column_count(v5);
  swift_release();
  v1[9] = (int)v5;
  return v1;
}

uint64_t sub_24F77852C(uint64_t a1)
{
  uint64_t v3 = (uint64_t)v1;
  uint64_t v4 = *v1;
  sub_24F7786CC(a1, (uint64_t)&v14);
  if (v15)
  {
    sub_24F794DE0(&v14, (uint64_t)v17);
    sub_24F7811D0(v17, v17[3]);
    sub_24F780788();
    sub_24F77AEB0();
    v5();
    if (!v2)
    {
      uint64_t v6 = v15;
      uint64_t v7 = v16;
      sub_24F798FB4((uint64_t)&v14, v15);
      sub_24F77AD10();
      MEMORY[0x270FA5388](v8);
      uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v11 + 16))(v10);
      uint64_t v12 = swift_retain();
      uint64_t v3 = sub_24F7E98E8(v12, (uint64_t)v10, v4, v6, v7);
      _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&v14);
    }
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v17);
  }
  else
  {
    sub_24F778734((uint64_t)&v14);
    swift_retain();
  }
  return v3;
}

uint64_t sub_24F7786CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24F781274(&qword_26B1F7F10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_24F778734(uint64_t a1)
{
  uint64_t v2 = sub_24F781274(&qword_26B1F7F10);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t Database.allStatements(literal:)()
{
  uint64_t v2 = v0;
  type metadata accessor for StatementArgumentsSink();
  swift_allocObject();
  swift_retain();
  uint64_t v3 = sub_24F778A30(0);
  unint64_t v4 = MEMORY[0x263F8EE78];
  sub_24F778B08();
  sub_24F77B06C();
  uint64_t v5 = swift_allocObject();
  uint64_t v6 = v3;
  uint64_t v7 = v5;
  uint64_t v8 = sub_24F779224(v2, v6, v4);
  swift_retain();
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = sub_24F76BCC0(v9, (uint64_t)v8);
  if (!v1)
  {
    uint64_t v11 = v10;
    swift_bridgeObjectRelease();
    *(void *)&long long v19 = v11;
    sub_24F781274(&qword_26B1F7F48);
    sub_24F778988((unint64_t *)&qword_26B1F7EB0, &qword_26B1F7F48);
    uint64_t v12 = sub_24F8CED30();
    uint64_t v14 = v13;
    swift_bridgeObjectRelease();
    sub_24F778A9C(&v19);
    if (*(void *)(v19 + 16))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v15 = *(void *)(*((void *)&v19 + 1) + 16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!v15)
      {
        long long v16 = 0uLL;
        goto LABEL_7;
      }
    }
    sub_24F778A9C(&v19);
    long long v16 = v19;
LABEL_7:
    long long v19 = v16;
    type metadata accessor for SQLStatementCursor();
    uint64_t v7 = swift_allocObject();
    uint64_t v17 = swift_retain();
    sub_24F77AA04(v17, v12, v14, (uint64_t *)&v19, 0);
    swift_release();
    return v7;
  }
  swift_release();
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_24F778988(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_24F7688B8(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_24F7789CC(uint64_t a1)
{
  unint64_t result = sub_24F8BF370(a1);
  if (!result)
  {
    sub_24F7688B8(v3);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

uint64_t type metadata accessor for StatementArgumentsSink()
{
  return self;
}

uint64_t sub_24F778A30(char a1)
{
  sub_24F780F38(MEMORY[0x263F8EE78], &v4);
  *(_OWORD *)(v1 + 16) = v4;
  *(unsigned char *)(v1 + 32) = a1;
  return v1;
}

uint64_t type metadata accessor for SQLGenerationContext()
{
  return self;
}

uint64_t sub_24F778A9C@<X0>(void *a1@<X8>)
{
  uint64_t v2 = sub_24F76C89C();
  swift_beginAccess();
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = *(void *)(v2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = swift_release();
  *a1 = v3;
  a1[1] = v4;
  return result;
}

void sub_24F778B08()
{
  sub_24F778D74();
  uint64_t v3 = v2;
  if (*(void *)(v2 + 16))
  {
    sub_24F770F50();
    uint64_t v4 = v3 + 40;
    do
    {
      sub_24F77C644();
      if (v0 >= v1 >> 1) {
        sub_24F77B4E4();
      }
      v4 += 192;
      sub_24F76B6C0();
    }
    while (!v5);
  }
  sub_24F778E68(v3, &qword_269A2A318, (void (*)(uint64_t, uint64_t, uint64_t *))sub_24F77A588);
  sub_24F778C78();
}

void sub_24F778BA8()
{
  sub_24F778D74();
  uint64_t v3 = v2;
  if (*(void *)(v2 + 16))
  {
    sub_24F770F50();
    uint64_t v4 = v3 + 40;
    do
    {
      sub_24F77C644();
      if (v0 >= v1 >> 1) {
        sub_24F77B4E4();
      }
      v4 += 40;
      sub_24F76B6C0();
    }
    while (!v5);
  }
  sub_24F778E68(v3, &qword_269A2AE58, (void (*)(uint64_t, uint64_t, uint64_t *))sub_24F778F08);
  sub_24F778C78();
}

void sub_24F778C48()
{
  *(void *)(*(void *)v0 + 16) = v1 + 1;
}

uint64_t sub_24F778C60()
{
  return *(void *)(v0 - 96);
}

void *sub_24F778CCC(void *a1)
{
  return memcpy(a1, (const void *)(v1 + 792), 0xA3uLL);
}

void sub_24F778CE4()
{
  *(void *)(v1 - 136) = v0;
}

uint64_t sub_24F778CF8()
{
  return sub_24F89D54C();
}

uint64_t sub_24F778D24()
{
  return v0 + 56;
}

uint64_t sub_24F778D90()
{
  return v0;
}

uint64_t sub_24F778DCC()
{
  return sub_24F819250(v1, v0);
}

uint64_t sub_24F778DE8()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_24F778E0C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_24F778E68(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t, uint64_t *))
{
  if (*(void *)(a1 + 16))
  {
    sub_24F781274(a2);
    uint64_t v4 = sub_24F8CFA10();
  }
  else
  {
    uint64_t v4 = MEMORY[0x263F8EE80];
  }
  uint64_t v7 = v4;
  uint64_t v5 = swift_bridgeObjectRetain();
  a3(v5, 1, &v7);
  swift_bridgeObjectRelease();
  return v7;
}

void sub_24F778F08(uint64_t a1, char a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
    swift_bridgeObjectRelease();
    return;
  }
  for (uint64_t i = (_OWORD *)(swift_bridgeObjectRetain() + 56); ; uint64_t i = (_OWORD *)((char *)i + 40))
  {
    uint64_t v7 = *((void *)i - 3);
    uint64_t v6 = *((void *)i - 2);
    uint64_t v8 = *((void *)i - 1);
    long long v26 = *i;
    uint64_t v9 = (void *)*a3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v11 = sub_24F782950();
    uint64_t v12 = v9[2];
    BOOL v13 = (v10 & 1) == 0;
    if (__OFADD__(v12, v13))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      sub_24F8CFEA0();
      __break(1u);
      goto LABEL_20;
    }
    char v14 = v10;
    if (v9[3] < v12 + v13) {
      break;
    }
    if (a2)
    {
      if (v10) {
        goto LABEL_14;
      }
    }
    else
    {
      sub_24F781274(&qword_26B1F5520);
      sub_24F8CF990();
      if (v14) {
        goto LABEL_14;
      }
    }
LABEL_10:
    uint64_t v17 = (void *)*a3;
    *(void *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    uint64_t v18 = (void *)(v17[6] + 16 * v11);
    *uint64_t v18 = v7;
    v18[1] = v6;
    uint64_t v19 = v17[7] + 24 * v11;
    *(void *)uint64_t v19 = v8;
    *(_OWORD *)(v19 + 8) = v26;
    uint64_t v20 = v17[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_18;
    }
    v17[2] = v22;
    a2 = 1;
    if (!--v3)
    {
      swift_bridgeObjectRelease_n();
      return;
    }
  }
  sub_24F8B50BC();
  unint64_t v15 = sub_24F782950();
  if ((v14 & 1) != (v16 & 1)) {
    goto LABEL_19;
  }
  unint64_t v11 = v15;
  if ((v14 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_14:
  uint64_t v23 = (void *)swift_allocError();
  swift_willThrow();
  id v24 = v23;
  sub_24F781274(&qword_26B1F7040);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();

    return;
  }
LABEL_20:
  sub_24F8CF7D0();
  sub_24F8CEEB0();
  sub_24F8CF920();
  sub_24F8CEEB0();
  sub_24F8CF9D0();
  __break(1u);
}

void *sub_24F779224(uint64_t a1, uint64_t a2, unint64_t a3)
{
  void (*v7)(void *__return_ptr, unsigned char *);
  uint64_t v8;

  v3[2] = a1;
  v3[3] = a2;
  swift_retain();
  swift_retain();
  v3[4] = sub_24F7792C8(a3);
  v3[5] = sub_24F779E1C(a3);
  uint64_t v5 = sub_24F77E978();
  uint64_t v8 = sub_24F77A010(v5, v6, v7, 0);
  swift_release();
  swift_release();
  v3[6] = v8;
  return v3;
}

uint64_t sub_24F7792C8(unint64_t a1)
{
  unint64_t v1 = a1;
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62) {
    goto LABEL_124;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  unint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = sub_24F779E1C(v4);
  uint64_t v6 = sub_24F779FF0(v5);
  swift_bridgeObjectRelease();
  if (v3 == v6)
  {
    uint64_t v96 = (void *)MEMORY[0x263F8EE80];
    if (v2)
    {
      swift_bridgeObjectRetain();
      uint64_t v7 = sub_24F8CF9E0();
      if (v7) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v7 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v7)
      {
LABEL_6:
        unint64_t v90 = v1 & 0xC000000000000001;
        uint64_t v8 = (void *)MEMORY[0x263F8EE80];
        unint64_t v2 = 4;
        unint64_t v88 = v1;
        while (1)
        {
          if (v90) {
            uint64_t v9 = MEMORY[0x253364060](v2 - 4, v1);
          }
          else {
            uint64_t v9 = swift_retain();
          }
          if (__OFADD__(v2 - 4, 1))
          {
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
            goto LABEL_119;
          }
          unint64_t v1 = v7;
          uint64_t v10 = v9;
          sub_24F8296F8();
          int64_t v11 = sub_24F8CED00();
          int64_t v13 = v12;
          swift_bridgeObjectRelease();
          unint64_t v15 = sub_24F782950();
          uint64_t v16 = v8[2];
          BOOL v17 = (v14 & 1) == 0;
          if (__OFADD__(v16, v17)) {
            goto LABEL_118;
          }
          char v18 = v14;
          unint64_t v93 = v2 - 3;
          uint64_t v19 = v8;
          if (v8[3] < v16 + v17)
          {
            sub_24F8B55AC();
            uint64_t v19 = v96;
            unint64_t v20 = sub_24F782950();
            if ((v18 & 1) != (v21 & 1))
            {
LABEL_126:
              sub_24F8CFEA0();
              __break(1u);
LABEL_127:
              sub_24F8CF7D0();
              swift_bridgeObjectRelease();
              sub_24F8A0264(0);
              if (v11) {
                MEMORY[0x253364060](0, v1);
              }
              else {
                swift_retain();
              }
              sub_24F8296F8();
              swift_release();
              sub_24F8CEEB0();
              swift_bridgeObjectRelease();
              goto LABEL_132;
            }
            unint64_t v15 = v20;
          }
          if (v18)
          {
            uint64_t v22 = swift_bridgeObjectRelease();
            uint64_t v23 = (void *)(v19[7] + 8 * v15);
            MEMORY[0x2533638D0](v22);
            uint64_t v7 = v1;
            if (*(void *)((*v23 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v23 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              sub_24F8CF0F0();
            }
            sub_24F8CF140();
            sub_24F8CF0B0();
          }
          else
          {
            sub_24F781274(&qword_26B1F7F68);
            uint64_t v24 = swift_allocObject();
            *(_OWORD *)(v24 + 16) = xmmword_24F8DE5E0;
            *(void *)(v24 + 32) = v10;
            uint64_t v97 = v24;
            sub_24F8CF0B0();
            v19[(v15 >> 6) + 8] |= 1 << v15;
            uint64_t v25 = (int64_t *)(v19[6] + 16 * v15);
            *uint64_t v25 = v11;
            v25[1] = v13;
            *(void *)(v19[7] + 8 * v15) = v97;
            uint64_t v26 = v19[2];
            BOOL v27 = __OFADD__(v26, 1);
            uint64_t v28 = v26 + 1;
            if (v27) {
              goto LABEL_121;
            }
            v19[2] = v28;
            uint64_t v7 = v1;
          }
          unint64_t v1 = v88;
          ++v2;
          uint64_t v8 = v19;
          if (v93 == v7) {
            goto LABEL_25;
          }
        }
      }
    }
    uint64_t v8 = (void *)MEMORY[0x263F8EE80];
LABEL_25:
    swift_bridgeObjectRelease();
    int64_t v29 = 0;
    uint64_t v98 = MEMORY[0x263F8EE88];
    uint64_t v30 = v8 + 8;
    uint64_t v31 = 1 << *((unsigned char *)v8 + 32);
    uint64_t v32 = -1;
    if (v31 < 64) {
      uint64_t v32 = ~(-1 << v31);
    }
    unint64_t v33 = v32 & v8[8];
    int64_t v11 = (unint64_t)(v31 + 63) >> 6;
    uint64_t v80 = MEMORY[0x263F8EE78];
    int64_t v94 = v11;
    while (1)
    {
      while (1)
      {
        if (v33)
        {
          unint64_t v34 = __clz(__rbit64(v33));
          v33 &= v33 - 1;
          unint64_t v35 = v34 | (v29 << 6);
        }
        else
        {
          int64_t v36 = v29 + 1;
          if (__OFADD__(v29, 1)) {
            goto LABEL_120;
          }
          if (v36 >= v11)
          {
LABEL_68:
            swift_release();
            unint64_t v1 = type metadata accessor for TableAlias();
            sub_24F77A9A0(&qword_26B1F7D40);
            uint64_t v48 = sub_24F8CEC70();
            uint64_t v49 = v80;
            uint64_t v78 = *(void *)(v80 + 16);
            if (!v78)
            {
LABEL_112:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              return v48;
            }
            unint64_t v50 = 0;
            uint64_t v51 = 0;
            uint64_t v79 = v80 + 32;
            while (v50 < *(void *)(v49 + 16))
            {
              unint64_t v2 = *(void *)(v79 + 8 * v50);
              if (v2 >> 62)
              {
                if ((v2 & 0x8000000000000000) != 0) {
                  unint64_t v1 = *(void *)(v79 + 8 * v50);
                }
                else {
                  unint64_t v1 = v2 & 0xFFFFFFFFFFFFFF8;
                }
                swift_bridgeObjectRetain();
                uint64_t v52 = sub_24F8CF9E0();
              }
              else
              {
                uint64_t v52 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
                swift_bridgeObjectRetain();
              }
              unint64_t v81 = v50;
              if (v52)
              {
                unint64_t v53 = 0;
                unint64_t v54 = v2 & 0xC000000000000001;
                uint64_t v85 = v2 & 0xFFFFFFFFFFFFFF8;
                uint64_t v55 = 1;
                uint64_t v83 = v52;
                unint64_t v84 = v2;
                unint64_t v82 = v2 & 0xC000000000000001;
                while (1)
                {
                  if (v54)
                  {
                    uint64_t v56 = MEMORY[0x253364060](v53, v2);
                  }
                  else
                  {
                    if (v53 >= *(void *)(v85 + 16)) {
                      goto LABEL_115;
                    }
                    uint64_t v56 = swift_retain();
                  }
                  BOOL v27 = __OFADD__(v53++, 1);
                  if (v27) {
                    break;
                  }
                  uint64_t v57 = v56;
                  sub_24F8297F8();
                  if (!v58)
                  {
                    uint64_t v89 = v57;
                    uint64_t v59 = sub_24F8296F8();
                    unint64_t v1 = v60;
                    if (sub_24F8CFD00()) {
                      goto LABEL_116;
                    }
                    uint64_t v87 = v48;
                    swift_bridgeObjectRetain();
                    sub_24F82A910(v59, v1, 48, 0xE100000000000000, 57, 0xE100000000000000);
                    uint64_t v86 = v51;
                    swift_bridgeObjectRelease();
                    uint64_t v61 = sub_24F8CEFA0();
                    uint64_t v92 = MEMORY[0x253363690](v61);
                    uint64_t v63 = v62;
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    char v64 = 0;
                    uint64_t v95 = v98 + 56;
                    while (1)
                    {
                      swift_bridgeObjectRetain();
                      sub_24F8CFAE0();
                      sub_24F8CEEB0();
                      swift_bridgeObjectRelease();
                      if (v64) {
                        swift_bridgeObjectRelease();
                      }
                      BOOL v27 = __OFADD__(v55++, 1);
                      if (v27) {
                        break;
                      }
                      unint64_t v1 = v63;
                      uint64_t v65 = sub_24F8CED00();
                      uint64_t v67 = v66;
                      if (!*(void *)(v98 + 16))
                      {
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRelease();
                        goto LABEL_104;
                      }
                      uint64_t v68 = v65;
                      sub_24F8CFF30();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      sub_24F8CEE50();
                      uint64_t v69 = sub_24F8CFF80();
                      uint64_t v70 = -1 << *(unsigned char *)(v98 + 32);
                      unint64_t v2 = v69 & ~v70;
                      if (((*(void *)(v95 + ((v2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v2) & 1) == 0) {
                        goto LABEL_102;
                      }
                      uint64_t v71 = *(void *)(v98 + 48);
                      uint64_t v72 = (void *)(v71 + 16 * v2);
                      BOOL v73 = *v72 == v68 && v72[1] == v67;
                      if (!v73 && (sub_24F8CFD00() & 1) == 0)
                      {
                        uint64_t v74 = ~v70;
                        while (1)
                        {
                          unint64_t v2 = (v2 + 1) & v74;
                          if (((*(void *)(v95 + ((v2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v2) & 1) == 0) {
                            break;
                          }
                          unsigned __int8 v75 = (void *)(v71 + 16 * v2);
                          BOOL v76 = *v75 == v68 && v75[1] == v67;
                          if (v76 || (sub_24F8CFD00() & 1) != 0) {
                            goto LABEL_101;
                          }
                        }
LABEL_102:
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
LABEL_104:
                        swift_bridgeObjectRelease();
                        sub_24F8CED00();
                        swift_bridgeObjectRelease();
                        sub_24F8B6490();
                        swift_bridgeObjectRelease();
                        swift_retain();
                        swift_isUniquelyReferenced_nonNull_native();
                        sub_24F7DBD0C(v92, v63, v89);
                        uint64_t v48 = v87;
                        swift_release_n();
                        swift_bridgeObjectRelease();
                        uint64_t v51 = v86;
                        uint64_t v52 = v83;
                        unint64_t v2 = v84;
                        unint64_t v54 = v82;
                        goto LABEL_105;
                      }
LABEL_101:
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      char v64 = 1;
                    }
                    __break(1u);
                    break;
                  }
                  unint64_t v1 = v58;
                  swift_release();
                  swift_bridgeObjectRelease();
LABEL_105:
                  if (v53 == v52) {
                    goto LABEL_106;
                  }
                }
                __break(1u);
LABEL_115:
                __break(1u);
LABEL_116:
                __break(1u);
                goto LABEL_117;
              }
LABEL_106:
              unint64_t v50 = v81 + 1;
              swift_bridgeObjectRelease();
              uint64_t v49 = v80;
              if (v81 + 1 == v78) {
                goto LABEL_112;
              }
            }
            goto LABEL_122;
          }
          unint64_t v37 = v30[v36];
          ++v29;
          if (!v37)
          {
            int64_t v29 = v36 + 1;
            if (v36 + 1 >= v11) {
              goto LABEL_68;
            }
            unint64_t v37 = v30[v29];
            if (!v37)
            {
              int64_t v29 = v36 + 2;
              if (v36 + 2 >= v11) {
                goto LABEL_68;
              }
              unint64_t v37 = v30[v29];
              if (!v37)
              {
                int64_t v38 = v36 + 3;
                if (v38 >= v11) {
                  goto LABEL_68;
                }
                unint64_t v37 = v30[v38];
                if (!v37)
                {
                  while (1)
                  {
                    int64_t v29 = v38 + 1;
                    if (__OFADD__(v38, 1)) {
                      goto LABEL_123;
                    }
                    if (v29 >= v11) {
                      goto LABEL_68;
                    }
                    unint64_t v37 = v30[v29];
                    ++v38;
                    if (v37) {
                      goto LABEL_43;
                    }
                  }
                }
                int64_t v29 = v38;
              }
            }
          }
LABEL_43:
          unint64_t v33 = (v37 - 1) & v37;
          unint64_t v35 = __clz(__rbit64(v37)) + (v29 << 6);
        }
        unint64_t v2 = *(void *)(v8[6] + 16 * v35);
        unint64_t v1 = *(void *)(v8[7] + 8 * v35);
        if (v1 >> 62)
        {
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          uint64_t v39 = sub_24F8CF9E0();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v39 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        if (v39 >= 2) {
          break;
        }
        swift_bridgeObjectRelease();
        sub_24F8B6490();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      if (v1 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v40 = sub_24F8CF9E0();
        if (v40)
        {
LABEL_50:
          if (v40 < 1)
          {
            __break(1u);
            goto LABEL_126;
          }
          uint64_t v91 = v30;
          uint64_t v41 = 0;
          unint64_t v2 = 0;
          int64_t v11 = v1 & 0xC000000000000001;
          while (1)
          {
            if (v11) {
              MEMORY[0x253364060](v2, v1);
            }
            else {
              swift_retain();
            }
            sub_24F8297F8();
            uint64_t v43 = v42;
            swift_release();
            if (v43)
            {
              swift_bridgeObjectRelease();
              BOOL v27 = __OFADD__(v41++, 1);
              if (v27) {
                break;
              }
            }
            if (v40 == ++v2)
            {
              swift_bridgeObjectRelease();
              BOOL v44 = v41 < 2;
              uint64_t v30 = v91;
              if (v44) {
                goto LABEL_62;
              }
              goto LABEL_127;
            }
          }
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          swift_bridgeObjectRetain();
          uint64_t v3 = sub_24F8CF9E0();
          swift_bridgeObjectRelease();
          goto LABEL_3;
        }
      }
      else
      {
        uint64_t v40 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v40) {
          goto LABEL_50;
        }
      }
      swift_bridgeObjectRelease();
LABEL_62:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_24F7876D4();
        uint64_t v80 = v46;
      }
      int64_t v11 = v94;
      unint64_t v45 = *(void *)(v80 + 16);
      if (v45 >= *(void *)(v80 + 24) >> 1)
      {
        sub_24F7876D4();
        uint64_t v80 = v47;
      }
      *(void *)(v80 + 16) = v45 + 1;
      *(void *)(v80 + 8 * v45 + 32) = v1;
    }
  }
LABEL_132:
  uint64_t result = sub_24F8CF9D0();
  __break(1u);
  return result;
}

uint64_t sub_24F779E1C(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_24F8CF9E0();
    sub_24F77FA5C();
  }
  type metadata accessor for TableAlias();
  sub_24F779FA8(&qword_26B1F7D40, (void (*)(uint64_t))type metadata accessor for TableAlias);
  uint64_t result = sub_24F8CF300();
  uint64_t v4 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_24F8CF9E0();
    uint64_t result = swift_bridgeObjectRelease();
    if (v5) {
      goto LABEL_5;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    return v4;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v5) {
    goto LABEL_11;
  }
LABEL_5:
  if (v5 >= 1)
  {
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        MEMORY[0x253364060](0, a1);
      }
      else {
        swift_retain();
      }
      sub_24F77E5AC();
      sub_24F8B65F8();
      swift_release();
    }
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for TableAlias()
{
  return self;
}

uint64_t sub_24F779FA8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24F779FF0(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) != 0) {
    return sub_24F8CF720();
  }
  else {
    return *(void *)(a1 + 16);
  }
}

uint64_t sub_24F77A010(uint64_t a1, uint64_t a2, void (*a3)(void *__return_ptr, unsigned char *), uint64_t a4)
{
  if (*(void *)(a1 + 16))
  {
    sub_24F781274(&qword_269A2A318);
    uint64_t v8 = sub_24F8CFA10();
  }
  else
  {
    uint64_t v8 = MEMORY[0x263F8EE80];
  }
  uint64_t v10 = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_24F77A0F0(a1, a2, a3, a4, 1, &v10);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10;
}

void sub_24F77A0F0(uint64_t a1, uint64_t a2, void (*a3)(void *__return_ptr, unsigned char *), uint64_t a4, char a5, void *a6)
{
  unint64_t v8 = *(void *)(a1 + 16);
  uint64_t v34 = a1 + 32;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  unint64_t v9 = 0;
  for (uint64_t i = a2; ; a2 = i)
  {
    if (v9 == v8)
    {
      sub_24F77A980(__src);
      sub_24F77A91C((uint64_t)__src, (uint64_t)v41, &qword_26B1F7B98);
      unint64_t v9 = v8;
    }
    else
    {
      if (v9 >= *(void *)(a1 + 16)) {
        goto LABEL_25;
      }
      if (!*(void *)(a2 + 16)) {
        goto LABEL_26;
      }
      uint64_t v10 = (uint64_t *)(v34 + 16 * v9);
      uint64_t v12 = *v10;
      uint64_t v11 = v10[1];
      swift_bridgeObjectRetain_n();
      unint64_t v13 = sub_24F782950();
      if ((v14 & 1) == 0) {
        goto LABEL_27;
      }
      memcpy(__dst, (const void *)(*(void *)(a2 + 56) + 176 * v13), 0xABuLL);
      sub_24F7ADA50((uint64_t)__dst);
      swift_bridgeObjectRelease();
      __src[0] = v12;
      __src[1] = v11;
      memcpy(&__src[2], __dst, 0xABuLL);
      swift_bridgeObjectRetain();
      sub_24F7ADA50((uint64_t)__dst);
      sub_24F7AD964((uint64_t)__src);
      ++v9;
      memcpy(v38, __src, 0xBBuLL);
      a3(v41, v38);
      sub_24F7AD964((uint64_t)__src);
      nullsub_1(v41);
    }
    sub_24F77A91C((uint64_t)v41, (uint64_t)v38, &qword_26B1F7B98);
    sub_24F77A91C((uint64_t)v38, (uint64_t)__src, &qword_26B1F7B98);
    if (sub_24F77A988((uint64_t)__src) == 1)
    {
      swift_release_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      return;
    }
    char v15 = a5;
    uint64_t v16 = v41[0];
    uint64_t v17 = v41[1];
    memcpy(__dst, v42, 0xABuLL);
    char v18 = (void *)*a6;
    unint64_t v20 = sub_24F782950();
    uint64_t v21 = v18[2];
    BOOL v22 = (v19 & 1) == 0;
    if (__OFADD__(v21, v22))
    {
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      sub_24F8CFEA0();
      __break(1u);
      goto LABEL_29;
    }
    char v23 = v19;
    if (v18[3] < v21 + v22) {
      break;
    }
    if (v15)
    {
      if (v19) {
        goto LABEL_19;
      }
    }
    else
    {
      sub_24F781274(&qword_269A2A308);
      sub_24F8CF990();
      if (v23) {
        goto LABEL_19;
      }
    }
LABEL_16:
    uint64_t v26 = (void *)*a6;
    *(void *)(*a6 + 8 * (v20 >> 6) + 64) |= 1 << v20;
    BOOL v27 = (void *)(v26[6] + 16 * v20);
    *BOOL v27 = v16;
    v27[1] = v17;
    memcpy((void *)(v26[7] + 176 * v20), __dst, 0xABuLL);
    uint64_t v28 = v26[2];
    BOOL v29 = __OFADD__(v28, 1);
    uint64_t v30 = v28 + 1;
    if (v29) {
      goto LABEL_24;
    }
    v26[2] = v30;
    a5 = 1;
  }
  sub_24F8B52F4();
  unint64_t v24 = sub_24F782950();
  if ((v23 & 1) != (v25 & 1)) {
    goto LABEL_28;
  }
  unint64_t v20 = v24;
  if ((v23 & 1) == 0) {
    goto LABEL_16;
  }
LABEL_19:
  uint64_t v31 = (void *)swift_allocError();
  swift_willThrow();
  id v43 = v31;
  id v32 = v31;
  sub_24F781274(&qword_26B1F7040);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_24F7ADBB0((uint64_t)__dst);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    return;
  }
LABEL_29:
  sub_24F8CF7D0();
  sub_24F8CEEB0();
  sub_24F8CF920();
  sub_24F8CEEB0();
  sub_24F8CF9D0();
  __break(1u);
}

void sub_24F77A588(uint64_t a1, char a2, void *a3)
{
  unint64_t v4 = *(void *)(a1 + 16);
  uint64_t v23 = a1 + 32;
  swift_bridgeObjectRetain();
  unint64_t v5 = 0;
  while (1)
  {
    if (v5 == v4)
    {
      sub_24F77A980(__dst);
      sub_24F77A91C((uint64_t)__dst, (uint64_t)v29, &qword_26B1F7B98);
      unint64_t v5 = v4;
    }
    else
    {
      if (v5 >= *(void *)(a1 + 16)) {
        goto LABEL_23;
      }
      memcpy(__dst, (const void *)(v23 + 192 * v5), 0xBBuLL);
      memcpy(v29, (const void *)(v23 + 192 * v5++), 0xBBuLL);
      nullsub_1(v29);
      sub_24F7CC71C((uint64_t)__dst);
    }
    sub_24F77A91C((uint64_t)v29, (uint64_t)v27, &qword_26B1F7B98);
    sub_24F77A91C((uint64_t)v27, (uint64_t)__dst, &qword_26B1F7B98);
    if (sub_24F77A988((uint64_t)__dst) == 1)
    {
      swift_bridgeObjectRelease_n();
      return;
    }
    uint64_t v6 = v29[0];
    uint64_t v7 = v29[1];
    memcpy(v26, &v29[2], 0xABuLL);
    unint64_t v8 = (void *)*a3;
    unint64_t v10 = sub_24F782950();
    uint64_t v11 = v8[2];
    BOOL v12 = (v9 & 1) == 0;
    if (__OFADD__(v11, v12))
    {
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      sub_24F8CFEA0();
      __break(1u);
      goto LABEL_25;
    }
    char v13 = v9;
    if (v8[3] < v11 + v12) {
      break;
    }
    if (a2)
    {
      if (v9) {
        goto LABEL_17;
      }
    }
    else
    {
      sub_24F781274(&qword_269A2A308);
      sub_24F8CF990();
      if (v13) {
        goto LABEL_17;
      }
    }
LABEL_14:
    uint64_t v16 = (void *)*a3;
    *(void *)(*a3 + 8 * (v10 >> 6) + 64) |= 1 << v10;
    uint64_t v17 = (void *)(v16[6] + 16 * v10);
    *uint64_t v17 = v6;
    v17[1] = v7;
    memcpy((void *)(v16[7] + 176 * v10), v26, 0xABuLL);
    uint64_t v18 = v16[2];
    BOOL v19 = __OFADD__(v18, 1);
    uint64_t v20 = v18 + 1;
    if (v19) {
      goto LABEL_22;
    }
    v16[2] = v20;
    a2 = 1;
  }
  sub_24F8B52F4();
  unint64_t v14 = sub_24F782950();
  if ((v13 & 1) != (v15 & 1)) {
    goto LABEL_24;
  }
  unint64_t v10 = v14;
  if ((v13 & 1) == 0) {
    goto LABEL_14;
  }
LABEL_17:
  uint64_t v21 = (void *)swift_allocError();
  swift_willThrow();
  id v30 = v21;
  id v22 = v21;
  sub_24F781274(&qword_26B1F7040);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    sub_24F7ADBB0((uint64_t)v26);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    return;
  }
LABEL_25:
  sub_24F8CF7D0();
  sub_24F8CEEB0();
  sub_24F8CF920();
  sub_24F8CEEB0();
  sub_24F8CF9D0();
  __break(1u);
}

uint64_t sub_24F77A91C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_24F781274(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void sub_24F77A980(void *a1)
{
}

uint64_t sub_24F77A988(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t sub_24F77A9A0(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for TableAlias();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for SQLStatementCursor()
{
  return self;
}

uint64_t sub_24F77AA04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5)
{
  uint64_t v7 = *a4;
  uint64_t v8 = a4[1];
  *(void *)(v5 + 64) = 0;
  *(void *)(v5 + 72) = 0;
  *(void *)(v5 + 16) = a1;
  uint64_t v9 = sub_24F8CEE30();
  swift_bridgeObjectRelease();
  *(void *)(v5 + 24) = v9;
  *(_DWORD *)(v5 + 32) = a5;
  if (v7) {
    uint64_t v10 = *(void *)(v7 + 16);
  }
  else {
    uint64_t v10 = 0;
  }
  *(void *)(v5 + 40) = v10;
  *(unsigned char *)(v5 + 48) = v7 == 0;
  *(void *)(v5 + 56) = 0;
  swift_beginAccess();
  uint64_t v11 = *(void *)(v5 + 64);
  *(void *)(v5 + 64) = v7;
  *(void *)(v5 + 72) = v8;
  sub_24F77835C(v11);
  return v5;
}

uint64_t sub_24F77AAC0@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v28 = a5;
  uint64_t v29 = a4;
  uint64_t v30 = a2;
  uint64_t v31 = a1;
  sub_24F77AD10();
  uint64_t v10 = v9;
  MEMORY[0x270FA5388](v11);
  char v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(v14 + 16);
  sub_24F77AD10();
  uint64_t v17 = v16;
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v27 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24F77AD10();
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v27 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v24 + 16))(v23, v25);
  if (sub_24F777048((uint64_t)v23, 1, v15) == 1) {
    return sub_24F7771BC(a6, 1, 1, v29);
  }
  uint64_t v29 = v10;
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v20, v23, v15);
  v31(v20, v13);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v20, v15);
  if (v6) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v29 + 32))(v28, v13, a3);
  }
  return result;
}

uint64_t sub_24F77ACCC()
{
  return v0;
}

uint64_t sub_24F77ACF8()
{
  return type metadata accessor for QueryInterfaceRequest();
}

uint64_t sub_24F77AD28()
{
  return v0;
}

uint64_t sub_24F77AD34(uint64_t a1)
{
  return a1 - 8;
}

__n128 sub_24F77AD50(__n128 *a1)
{
  return a1[4];
}

void *sub_24F77AD78(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char __src)
{
  return memcpy(a1, &__src, 0xA2uLL);
}

void sub_24F77ADD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  sub_24F7CBC38((uint64_t)&a30, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t sub_24F77ADF0()
{
  return (v0 ^ 1) & 1;
}

uint64_t sub_24F77AE5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return a10;
}

uint64_t sub_24F77AE78(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_24F77AE9C()
{
  return 0;
}

uint64_t sub_24F77AED0(uint64_t a1, unint64_t a2)
{
  sub_24F781F34(a1, a2, 2);
  sub_24F781F34(v2, v3, 2);
  return sub_24F781F10(v2, v3, 2);
}

uint64_t sub_24F77AF14()
{
  return *(void *)(v0 - 104);
}

uint64_t sub_24F77AF2C()
{
  *(void *)(v0 - 152) = 0;
  *(void *)(v0 - 144) = 0;
  *(unsigned char *)(v0 - 136) = -1;
  return swift_retain();
}

uint64_t sub_24F77AF4C()
{
  return v0;
}

uint64_t sub_24F77AF70()
{
  return 0;
}

void *sub_24F77AF84(void *a1)
{
  return sub_24F7811D0(a1, a1[3]);
}

uint64_t sub_24F77AFDC()
{
  return sub_24F8CEEB0();
}

uint64_t sub_24F77B028()
{
  return v0;
}

uint64_t sub_24F77B038()
{
  return swift_allocObject();
}

uint64_t sub_24F77B050()
{
  uint64_t v2 = *(void *)(v0 + 56);
  *(void *)(v2 + 16) = v1 + 1;
  return v2 + 168 * v1 + 32;
}

uint64_t sub_24F77B06C()
{
  return type metadata accessor for SQLGenerationContext();
}

uint64_t sub_24F77B0D0()
{
  return Database.statementDidFail(_:withResultCode:)(v1, v0);
}

uint64_t sub_24F77B138()
{
  return sub_24F8CEEB0();
}

void sub_24F77B168()
{
  sub_24F77D7C0();
  uint64_t v3 = sub_24F77F588(v2);
  v4(v3);
  if (v5)
  {
    uint64_t v11 = (void *)sub_24F77AF2C();
    sub_24F77733C(v11);
    sub_24F7D29A4();
    uint64_t v12 = sub_24F770FA4();
    sub_24F782FB8(v12, v13);
    sub_24F773B28();
    sub_24F77EF24();
    sub_24F775C24();
    swift_willThrow();
    goto LABEL_9;
  }
  sub_24F77DAC0();
  if (!v1)
  {
    sub_24F7807E8();
    sub_24F7EFF58();
    goto LABEL_9;
  }
  sub_24F782AB8();
  if (v6 == v7)
  {
    sub_24F77BCD0();
    if (!(v6 ^ v7 | v8)) {
      goto LABEL_13;
    }
    sub_24F77B8F8();
    MEMORY[0x270FA5388](v9);
    if (sub_24F77E820() == 5)
    {
      uint64_t v10 = sub_24F7814C0();
      sub_24F7D109C(v10);
      sub_24F781D34();
    }
    else
    {
      sqlite3_column_int64(v1, v0);
    }
LABEL_9:
    sub_24F77B584();
    sub_24F77C020();
    return;
  }
  __break(1u);
LABEL_13:
  __break(1u);
}

void sub_24F77B274()
{
  sub_24F77D7C0();
  uint64_t v3 = sub_24F77F588(v2);
  v4(v3);
  if (v5)
  {
    uint64_t v14 = (void *)sub_24F77AF2C();
    sub_24F77733C(v14);
    sub_24F7D29A4();
    uint64_t v15 = sub_24F770FA4();
    sub_24F782FB8(v15, v16);
    sub_24F773B28();
    sub_24F77EF24();
    sub_24F775C24();
    swift_willThrow();
    goto LABEL_9;
  }
  sub_24F77DAC0();
  if (!v1)
  {
    sub_24F7807E8();
    sub_24F7EFEF8();
    goto LABEL_9;
  }
  sub_24F782AB8();
  if (v6 == v7)
  {
    sub_24F77BCD0();
    if (!(v6 ^ v7 | v8)) {
      goto LABEL_13;
    }
    sub_24F77B8F8();
    MEMORY[0x270FA5388](v9);
    if (sub_24F77E820() == 5)
    {
      uint64_t v10 = sub_24F7814C0();
      sub_24F7D102C(v10, v11, v12, v13);
      sub_24F781D34();
    }
    else
    {
      sqlite3_column_int64(v1, v0);
    }
LABEL_9:
    sub_24F77B584();
    sub_24F77C020();
    return;
  }
  __break(1u);
LABEL_13:
  __break(1u);
}

uint64_t sub_24F77B374(uint64_t a1, uint64_t a2)
{
  return sub_24F77B398(a1, a2, *v2, v2[1], v2[2]);
}

uint64_t sub_24F77B398(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!*(void *)(a5 + 16)) {
    goto LABEL_5;
  }
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_24F782950();
  if ((v7 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    uint64_t v9 = sub_24F8CED00();
    uint64_t v8 = sub_24F77B7A4(v9, v10, a5);
    swift_bridgeObjectRelease();
    return v8;
  }
  uint64_t v8 = *(void *)(*(void *)(a5 + 56) + 8 * v6);
  swift_bridgeObjectRelease();
  return v8;
}

__n128 sub_24F77B444()
{
  return *(__n128 *)(v0 + 24);
}

uint64_t sub_24F77B464()
{
  return type metadata accessor for QueryInterfaceRequest();
}

void *sub_24F77B47C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, void *a3@<X8>)
{
  return static TableRecord.all()(a1, a2, a3);
}

void sub_24F77B494(uint64_t a1)
{
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = 2 * ((a1 - 32) / v3);
}

uint64_t sub_24F77B4B8()
{
  return v0;
}

uint64_t sub_24F77B4C4()
{
  return v0;
}

void sub_24F77B4E4()
{
  sub_24F77C4AC();
}

uint64_t sub_24F77B508()
{
  return sub_24F8CEEB0();
}

double sub_24F77B540()
{
  double result = 0.0;
  *(_OWORD *)uint64_t v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(unsigned char *)(v0 + 80) = 0;
  return result;
}

uint64_t sub_24F77B558()
{
  return v0;
}

uint64_t sub_24F77B590()
{
  sub_24F808CA0(v1, v0, 1);
  return v1;
}

uint64_t sub_24F77B5BC()
{
  return sub_24F8CEEB0();
}

uint64_t sub_24F77B5E8()
{
  return v0;
}

uint64_t sub_24F77B5F8()
{
  return swift_getTupleTypeMetadata2();
}

uint64_t sub_24F77B61C@<X0>(uint64_t a1@<X8>)
{
  return v1 + ((a1 + 72) & ~a1);
}

uint64_t sub_24F77B634(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270EF24A0](a1, a2, 1024, 0, 0, 1, v2, v2);
}

void sub_24F77B65C()
{
}

id sub_24F77B668()
{
  return sub_24F859408(v2, v1, v0);
}

uint64_t sub_24F77B6A4()
{
  return *(void *)(v0 - 288);
}

uint64_t sub_24F77B6B8()
{
  return v0;
}

uint64_t sub_24F77B6D0()
{
  return v0;
}

uint64_t sub_24F77B6E8()
{
  return v0;
}

void sub_24F77B70C()
{
  Database.statementWillExecute(_:)(v0);
}

uint64_t sub_24F77B724()
{
  sub_24F781F10(v2, v3, 3);
  sub_24F781F10(v1, v0, 3);
  sub_24F781F10(v2, v3, 3);
  sub_24F781F10(v1, v0, 3);
  return sub_24F781F10(v1, v0, 3);
}

uint64_t sub_24F77B788()
{
  return sub_24F8CEEB0();
}

uint64_t sub_24F77B7A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) && (unint64_t v4 = sub_24F782950(), (v5 & 1) != 0)) {
    return *(void *)(*(void *)(a3 + 56) + 8 * v4);
  }
  else {
    return 0;
  }
}

uint64_t sub_24F77B7EC()
{
  return swift_allocObject();
}

uint64_t sub_24F77B808(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_24F77B820()
{
  return sub_24F775A6C(v0, v1);
}

uint64_t sub_24F77B83C()
{
  return *(void *)(v0 - 112);
}

uint64_t sub_24F77B864()
{
  return v0;
}

uint64_t sub_24F77B874()
{
  return sub_24F8CFF40();
}

uint64_t sub_24F77B894()
{
  return sub_24F8CEEB0();
}

uint64_t sub_24F77B8D0()
{
  return 0;
}

uint64_t sub_24F77B904()
{
  *(void *)(v3 + 8 * (v2 >> 6) + 64) |= 1 << v2;
  unint64_t v4 = (void *)(*(void *)(v3 + 48) + 16 * v2);
  *unint64_t v4 = v1;
  v4[1] = v0;
  return *(void *)(v3 + 56) + 216 * v2;
}

uint64_t sub_24F77B93C()
{
  return v0;
}

void *sub_24F77B950(uint64_t a1, const void *a2)
{
  return memcpy(v2, a2, 0xA3uLL);
}

uint64_t sub_24F77B998()
{
  return swift_deallocObject();
}

__n128 sub_24F77B9A8()
{
  return v0[5];
}

uint64_t sub_24F77B9C4()
{
  return swift_getAssociatedTypeWitness();
}

void *sub_24F77B9E4()
{
  return sub_24F8533B0(&STACK[0x458], v0);
}

uint64_t sub_24F77B9FC()
{
  return sub_24F8CEEB0();
}

uint64_t sub_24F77BA18()
{
  return DatabaseQueue.init(configuration:)(v0);
}

void sub_24F77BA30()
{
  *(void *)(v8 - 184) = v2;
  *(void *)(v8 - 176) = v1;
  *(void *)(v8 - 168) = v3;
  *(void *)(v8 - 160) = v0;
  *(void *)(v8 - 152) = v7;
  *(void *)(v8 - 144) = v6;
  *(void *)(v8 - 136) = v5;
  *(void *)(v8 - 128) = v4;
}

void sub_24F77BA6C(uint64_t a1@<X8>)
{
  *(void *)(a1 + 64) |= v1;
}

uint64_t sub_24F77BA7C()
{
  sub_24F781F34(v1, v0, 3);
  sub_24F781F34(v1, v0, 3);
  sub_24F781F34(v1, v0, 3);
  sub_24F781F34(v2, v3, 3);
  return swift_retain();
}

void *sub_24F77BAE8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char __dst, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char __src)
{
  return memcpy(&__dst, &__src, 0xA2uLL);
}

uint64_t sub_24F77BB04()
{
  return swift_release();
}

void sub_24F77BB30(uint64_t a1@<X8>)
{
  *(_WORD *)(a1 + 46) = -4864;
}

uint64_t sub_24F77BB58()
{
  return v0;
}

uint64_t sub_24F77BB70()
{
  return swift_task_alloc();
}

uint64_t sub_24F77BBA8()
{
  return v0;
}

uint64_t sub_24F77BBD0()
{
  return v0;
}

uint64_t sub_24F77BBE4()
{
  return sub_24F8CF7D0();
}

void sub_24F77BC38()
{
  sub_24F787D74();
}

uint64_t sub_24F77BC68()
{
  return sub_24F8CEEB0();
}

uint64_t sub_24F77BC88()
{
  return sub_24F8CEEB0();
}

uint64_t sub_24F77BCA4()
{
  return v0;
}

double sub_24F77BCBC()
{
  return trunc(v0);
}

uint64_t sub_24F77BCDC(uint64_t a1)
{
  sub_24F808C90(a1, v1, 0);
  return swift_retain();
}

uint64_t sub_24F77BD0C()
{
  return sub_24F814C38(v0);
}

uint64_t sub_24F77BD48()
{
  return v0;
}

uint64_t sub_24F77BD5C(uint64_t a1)
{
  return AssociationAggregate.forKey(_:)(a1, v1);
}

uint64_t sub_24F77BD80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_24F78C440(a1);
  sub_24F78C440(v25);
  sub_24F78C440(v26);
  return sub_24F78C440(a25);
}

uint64_t sub_24F77BDC0()
{
  return v0 - 112;
}

uint64_t sub_24F77BDE0()
{
  return v0 + v1;
}

void sub_24F77BDF8()
{
  *(void *)(v0 + 32) = v1;
  *(void *)(v0 + 40) = (v2 - 32) | 0x8000000000000000;
}

void sub_24F77BE10()
{
  uint64_t v4 = *(void *)(v2 - 104);
  uint64_t v5 = v0;
  uint64_t v6 = v1;
  uint64_t v7 = *(void *)(v2 - 96);
  Inflections.singular(_:options:_:)(*(Swift::String *)&v5, 0, *(Swift::String *)&v4);
}

uint64_t sub_24F77BE38()
{
  return v0;
}

void sub_24F77BE4C()
{
  *(void *)(*(void *)(v0 + 32) + 16) = v1 + 1;
}

uint64_t sub_24F77BE64()
{
  return sub_24F8CFD00();
}

uint64_t sub_24F77BE80()
{
  return v0;
}

uint64_t sub_24F77BEA4(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a2 = 21;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v5;
  *(void *)(a2 + 24) = v2;
  *(void *)(a2 + 32) = v3;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 56) = 0;
  return swift_willThrow();
}

uint64_t sub_24F77BEF0()
{
  uint64_t v1 = STACK[0x218];
  uint64_t v2 = STACK[0x220];
  return sub_24F87F808(v1, v2, 0);
}

void sub_24F77BF18()
{
  sub_24F788264();
}

uint64_t sub_24F77BF40@<X0>(uint64_t a1@<X8>)
{
  return v2 + a1 * v1 + 32;
}

uint64_t sub_24F77BF5C()
{
  return *(void *)(v0 - 72);
}

double sub_24F77BF90(double a1)
{
  return floor(a1);
}

uint64_t sub_24F77BFC8()
{
  return v0;
}

uint64_t sub_24F77BFD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  return sub_24F774DA0((uint64_t)&a29, v29);
}

uint64_t sub_24F77C034()
{
  return sub_24F7AD3A0(v4, v3, v2, v0, v1);
}

void *sub_24F77C0A0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char __dst)
{
  return memcpy(&__dst, (const void *)(v29 - 256), 0xA3uLL);
}

id sub_24F77C0BC(uint64_t a1, uint64_t a2, void (*a3)(id))
{
  return sub_24F832B64(a1, 0, a3);
}

uint64_t sub_24F77C0DC()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_24F77C0FC()
{
  return sub_24F8CEEB0();
}

void sub_24F77C12C()
{
  sub_24F786E30();
}

uint64_t sub_24F77C144()
{
  return v0;
}

uint64_t sub_24F77C158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  return sub_24F76C344((uint64_t)&a37, v37);
}

void sub_24F77C170()
{
  sub_24F781818();
}

unint64_t sub_24F77C194()
{
  return 0xD000000000000016;
}

uint64_t sub_24F77C1B4()
{
  sub_24F781F34(v1, v0, 3);
  sub_24F781F34(v1, v0, 3);
  sub_24F781F34(v1, v0, 3);
  sub_24F781F34(v1, v0, 3);
  return sub_24F781F34(v2, v3, 3);
}

uint64_t sub_24F77C220(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_24F77C23C(uint64_t a1@<X8>)
{
  *(void *)(v1 - 72) = a1;
  sub_24F77C4AC();
}

void sub_24F77C260(sqlite3_stmt *a1)
{
  swift_retain();
  unsigned int v2 = sqlite3_column_count(a1);
  if ((v2 & 0x80000000) != 0)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return;
  }
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v4 = v2;
    uint64_t v21 = MEMORY[0x263F8EE78];
    sub_24F77C4AC();
    uint64_t v5 = 0;
    uint64_t v6 = v21;
    while (sqlite3_column_name(a1, v5))
    {
      sub_24F8CEED0();
      uint64_t v7 = sub_24F8CED00();
      uint64_t v9 = v8;
      swift_bridgeObjectRelease();
      unint64_t v10 = *(void *)(v21 + 16);
      if (v10 >= *(void *)(v21 + 24) >> 1) {
        sub_24F77C4AC();
      }
      *(void *)(v21 + 16) = v10 + 1;
      uint64_t v11 = v21 + 16 * v10;
      *(void *)(v11 + 32) = v7;
      *(void *)(v11 + 40) = v9;
      if (v4 == v5)
      {
        __break(1u);
        goto LABEL_19;
      }
      if (v4 == ++v5) {
        goto LABEL_11;
      }
    }
    goto LABEL_20;
  }
  uint64_t v6 = MEMORY[0x263F8EE78];
LABEL_11:
  sub_24F77C468();
  uint64_t v12 = v3;
  uint64_t v13 = *(void *)(v6 + 16);
  if (v13)
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = 0;
    uint64_t v15 = (uint64_t *)(v6 + 40);
    do
    {
      uint64_t v16 = *(v15 - 1);
      uint64_t v17 = *v15;
      unint64_t v18 = *(void *)(v12 + 16);
      unint64_t v19 = *(void *)(v12 + 24);
      swift_bridgeObjectRetain();
      if (v18 >= v19 >> 1) {
        sub_24F77C468();
      }
      v15 += 2;
      *(void *)(v12 + 16) = v18 + 1;
      uint64_t v20 = (void *)(v12 + 24 * v18);
      v20[5] = v17;
      v20[6] = v14;
      v20[4] = v16;
      ++v14;
    }
    while (v13 != v14);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  sub_24F7836EC(v12);
  swift_release();
}

void sub_24F77C468()
{
  sub_24F77E4C4();
  *unint64_t v0 = v1;
}

void sub_24F77C4AC()
{
  sub_24F77D5C0();
  *unint64_t v0 = v1;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Statement.execute(arguments:)(GRDBInternal::StatementArguments_optional arguments)
{
  long long v5 = *(_OWORD *)arguments.value.values._rawValue;
  sub_24F77C958((uint64_t *)&v5, (uint64_t)arguments.value.namedValues._rawValue);
  if (!v2)
  {
    swift_unownedRetainStrong();
    Database.statementWillExecute(_:)(v1);
    sub_24F77C8EC();
    uint64_t v3 = *(sqlite3_stmt **)(v1 + 16);
    if (sqlite3_step(v3) == 101) {
      goto LABEL_8;
    }
    sub_24F78596C();
    if (!v4) {
      goto LABEL_9;
    }
    while (sqlite3_step(v3) == 100)
      ;
    sub_24F783230();
    if (v4)
    {
LABEL_8:
      swift_unownedRetainStrong();
      Database.statementDidExecute(_:)(v1);
    }
    else
    {
LABEL_9:
      swift_unownedRetainStrong();
      Database.statementDidFail(_:withResultCode:)(v1, 0);
    }
    sub_24F77C8EC();
  }
}

uint64_t sub_24F77C5D0()
{
  return swift_allocObject();
}

uint64_t sub_24F77C600()
{
  return swift_beginAccess();
}

uint64_t sub_24F77C61C()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_24F77C644()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_24F77C668()
{
  return swift_willThrow();
}

uint64_t sub_24F77C698()
{
  return sub_24F8CEEB0();
}

uint64_t sub_24F77C6C0()
{
  return swift_initStructMetadata();
}

uint64_t sub_24F77C6E4()
{
  return v0;
}

uint64_t sub_24F77C6F8(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_24F7811D0((void *)(v2 + 16), *(void *)(v2 + 40));
  return a1;
}

__n128 sub_24F77C74C()
{
  __n128 result = *(__n128 *)(v0 + 40);
  LOBYTE(STACK[0x24F]) = STACK[0x249];
  return result;
}

uint64_t sub_24F77C798()
{
  return sub_24F76F86C((__n128 *)&STACK[0x200]);
}

uint64_t sub_24F77C7B0()
{
  return v0;
}

uint64_t sub_24F77C7D0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_24F77C7F4()
{
  return QueryInterfaceRequest.deleteAll(_:)();
}

uint64_t sub_24F77C814()
{
  return sub_24F8CEEB0();
}

void sub_24F77C840()
{
  sub_24F787184();
}

uint64_t sub_24F77C860()
{
  return v0;
}

void *sub_24F77C878(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char __src)
{
  return memcpy(&a9, &__src, 0xA3uLL);
}

uint64_t sub_24F77C894()
{
  return type metadata accessor for ColumnDefinition();
}

uint64_t sub_24F77C8B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  return sub_24F7783C0((uint64_t)&a29, v29);
}

uint64_t sub_24F77C8EC()
{
  return swift_release();
}

uint64_t sub_24F77C910()
{
  return v0;
}

void sub_24F77C934()
{
  sub_24F80399C();
}

void sub_24F77C958(uint64_t *a1, uint64_t a2)
{
  if (*a1)
  {
    uint64_t v4 = a1[1];
    uint64_t v8 = *a1;
    uint64_t v9 = v4;
    long long v5 = &v8;
    Statement.setArguments(_:)(*(GRDBInternal::StatementArguments *)(&a2 - 1));
  }
  else if (*(unsigned char *)(v2 + 96) == 1)
  {
    sub_24F783310();
    if (!v3)
    {
      Statement.arguments.getter(&v8);
      v7[0] = v8;
      v7[1] = v9;
      v6.values._rawValue = v7;
      Statement.validateArguments(_:)(v6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t Database.statementDidExecute(_:)(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40) == 1) {
    Database.clearSchemaCache()();
  }
  sub_24F77CC40();
  sub_24F77D318(a1);
  return swift_release();
}

void Database.statementWillExecute(_:)(uint64_t a1)
{
  sub_24F77CC78();
  if (!v2)
  {
    sub_24F77CEF8();
    if (*(unsigned char *)(v1 + OBJC_IVAR____TtC12GRDBInternal8Database_isRecordingSelectedRegion) == 1)
    {
      swift_beginAccess();
      uint64_t v4 = *(void *)(a1 + 32);
      long long v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC12GRDBInternal8Database_selectedRegion);
      swift_beginAccess();
      uint64_t v6 = *v5;
      v7[0] = v4;
      v7[1] = v6;
      swift_bridgeObjectRetain();
      DatabaseRegion.union(_:)(v7, &v8);
      swift_bridgeObjectRelease();
      *long long v5 = v8;
      swift_endAccess();
      swift_bridgeObjectRelease();
    }
    sub_24F77CC40();
    sub_24F77D140();
    swift_release();
  }
}

uint64_t sub_24F77CBA8(uint64_t *a1, void (*a2)(void), uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v5 = *a1;
  uint64_t v6 = *(void *)(v4 + *a1);
  if (v6)
  {
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v9 = v4;
    a2();
    swift_allocObject();
    uint64_t v10 = swift_retain();
    uint64_t v7 = a4(v10);
    *(void *)(v9 + v5) = v7;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v7;
}

uint64_t sub_24F77CC40()
{
  return sub_24F77CBA8(&OBJC_IVAR____TtC12GRDBInternal8Database____lazy_storage___observationBroker, (void (*)(void))type metadata accessor for DatabaseObservationBroker, 57, sub_24F79F8BC);
}

void sub_24F77CC78()
{
  void (*v3)(void *__return_ptr);
  void (*v4)(void *__return_ptr);
  uint64_t (*v5)(void);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  void v13[2];

  sub_24F77CEB0();
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC12GRDBInternal8Database_isInsideTransactionBlock) == 1)
  {
    uint64_t v4 = v3;
    uint64_t v5 = v2;
    sub_24F773614();
    if (sqlite3_get_autocommit(*(sqlite3 **)(v1 + 16)))
    {
      uint64_t v6 = v5();
      uint64_t v8 = v7;
      v4(v13);
      uint64_t v9 = v13[0];
      uint64_t v10 = v13[1];
      uint64_t v11 = *(unsigned char *)(v1 + OBJC_IVAR____TtC12GRDBInternal8Database_configuration + 26);
      sub_24F7DC6DC();
      sub_24F770FA4();
      *(_DWORD *)uint64_t v12 = 4;
      *(void *)(v12 + 8) = 0xD000000000000017;
      *(void *)(v12 + 16) = 0x800000024F8D5230;
      *(void *)(v12 + 24) = v6;
      *(void *)(v12 + 32) = v8;
      *(void *)(v12 + 40) = v9;
      *(void *)(v12 + 48) = v10;
      *(unsigned char *)(v12 + 56) = v11;
      swift_willThrow();
    }
  }
}

void sub_24F77CDC0(void *a1@<X8>)
{
  *a1 = v1;
  a1[1] = 0xE400000000000000;
}

void *sub_24F77CE04@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char __dst)
{
  return memcpy(&__dst, (const void *)(a1 + 232 * v55 - 136), 0xA2uLL);
}

void sub_24F77CE34()
{
  *(void *)(v0 + 752) = v1;
  *(void *)(v0 + 760) = v2;
  *(void *)(v0 + 768) = v4;
  *(void *)(v0 + 776) = v5;
  *(unsigned char *)(v0 + 784) = v6;
  *(unsigned char *)(v0 + 785) = v3;
  *(unsigned char *)(v0 + 786) = v7;
}

uint64_t sub_24F77CE54()
{
  sub_24F781F34(v0, v1, 3);
  return sub_24F8CE6A0();
}

uint64_t sub_24F77CE84()
{
  return sub_24F8CED10();
}

uint64_t sub_24F77CEBC()
{
  sub_24F781F34(v1, v0, 3);
  return sub_24F781F34(v2, v3, 3);
}

uint64_t sub_24F77CEF8()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC12GRDBInternal8Database__isSuspended);
  uint64_t v2 = *(void **)(v1 + 24);
  swift_retain();
  swift_retain();
  swift_retain();
  objc_msgSend(v2, sel_lock);
  sub_24F773614();
  char v4 = *(unsigned char *)(v1 + 16);
  sub_24F77CFBC((uint64_t)&v4, v0);
  objc_msgSend(*(id *)(v1 + 24), sel_unlock);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_24F77CFBC(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)result == 1)
  {
    __n128 result = (uint64_t)sub_24F8A5C64();
    if (!v2)
    {
      if (result == 7102839 && v4 == 0xE300000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v6 = sub_24F8CFD00();
        swift_bridgeObjectRelease();
        if ((v6 & 1) == 0)
        {
LABEL_12:
          __n128 result = sub_24F89AA04();
          if ((result & 1) == 0)
          {
            swift_beginAccess();
            sqlite3_exec(*(sqlite3 **)(a2 + 16), "ROLLBACK", 0, 0, 0);
            uint64_t v7 = Statement.sql.getter();
            uint64_t v9 = v8;
            Statement.arguments.getter(v14);
            uint64_t v10 = v14[0];
            uint64_t v11 = v14[1];
            char v12 = *(unsigned char *)(a2 + OBJC_IVAR____TtC12GRDBInternal8Database_configuration + 26);
            sub_24F7DC6DC();
            swift_allocError();
            *(_DWORD *)uint64_t v13 = 4;
            *(void *)(v13 + 8) = 0xD000000000000015;
            *(void *)(v13 + 16) = 0x800000024F8D51E0;
            *(void *)(v13 + 24) = v7;
            *(void *)(v13 + 32) = v9;
            *(void *)(v13 + 40) = v10;
            *(void *)(v13 + 48) = v11;
            *(unsigned char *)(v13 + 56) = v12;
            return swift_willThrow();
          }
          return result;
        }
      }
      __n128 result = Statement.isReadonly.getter();
      if (result) {
        return result;
      }
      goto LABEL_12;
    }
  }
  return result;
}

void sub_24F77D140()
{
  sub_24F77ED98();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  swift_unownedRetainStrong();
  char v4 = sub_24F77D2E8();
  swift_release();
  if (v4) {
    goto LABEL_12;
  }
  sub_24F77C600();
  unint64_t v5 = *(void *)(v0 + 40);
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = sub_24F8CF9E0();
    swift_bridgeObjectRelease();
    if (!v18) {
      goto LABEL_12;
    }
  }
  else if (!*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_12:
    uint64_t v17 = *(void **)(v1 + 32);
    *(void *)(v1 + 32) = 0;
    sub_24F77D5B0(v17);
    sub_24F782DB4();
    return;
  }
  type metadata accessor for SchedulingWatchdog();
  uint64_t v6 = sub_24F7834B0();
  if (v6)
  {
    *(void *)(v6 + 24) = v1;
    swift_release();
    swift_retain();
    swift_release();
    uint64_t v7 = *(void *)(v3 + 72);
    uint64_t v8 = *(void *)(v7 + 16);
    if (v8 == 1)
    {
      uint64_t v10 = *(void *)(v7 + 32);
      uint64_t v11 = *(void *)(v7 + 40);
      uint64_t v12 = *(void *)(v7 + 48);
      uint64_t v13 = *(unsigned __int8 *)(v7 + 56);
      sub_24F76B680();
      sub_24F76B680();
      unint64_t v14 = swift_bridgeObjectRetain();
      uint64_t v15 = sub_24F79FA74(v14, v10, v11, v12, v13);
      swift_bridgeObjectRelease();
      sub_24F7A203C(v10, v11, v12, v13);
    }
    else
    {
      if (!v8)
      {
        uint64_t v9 = MEMORY[0x263F8EE78];
LABEL_11:
        sub_24F79F858(v9);
        goto LABEL_12;
      }
      swift_bridgeObjectRetain_n();
      unint64_t v16 = swift_bridgeObjectRetain();
      uint64_t v15 = sub_24F79FC1C(v16, v7);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    uint64_t v9 = v15;
    goto LABEL_11;
  }
  __break(1u);
}

uint64_t sub_24F77D2E8()
{
  if (*(uint64_t *)(v0 + OBJC_IVAR____TtC12GRDBInternal8Database__readOnlyDepth) <= 0) {
    return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC12GRDBInternal8Database_configuration + 1);
  }
  else {
    return 1;
  }
}

void sub_24F77D318(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_beginAccess();
  unint64_t v4 = *(void *)(v1 + 40);
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = sub_24F8CF9E0();
    swift_bridgeObjectRelease();
    if (!v17) {
      goto LABEL_5;
    }
  }
  else if (!*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_5;
  }
  sub_24F79F858(MEMORY[0x263F8EE78]);
  type metadata accessor for SchedulingWatchdog();
  uint64_t v5 = sub_24F7834B0();
  if (!v5)
  {
    __break(1u);
    return;
  }
  *(void *)(v5 + 24) = 0;
  swift_release();
  swift_release();
LABEL_5:
  int v6 = *(unsigned __int8 *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  switch(v6)
  {
    case 0:
      uint64_t v9 = sub_24F777244();
      sub_24F776AE4(v9, v10, 0);
      swift_retain();
      sub_24F777244();
      sub_24F7A10F8();
      goto LABEL_12;
    case 1:
      sub_24F776AE4(v8, v7, 1u);
      swift_retain();
      sub_24F777244();
      sub_24F7A1324();
      swift_release();
      if (*(void *)(v2 + 32)
        || (swift_unownedRetainStrong(),
            unsigned __int8 v11 = Database.isInsideTransaction.getter(),
            swift_release(),
            (v11 & 1) != 0))
      {
        if (!*(void *)(*(void *)(*(void *)(v2 + 24) + 24) + 16)) {
          sub_24F7843A8();
        }
LABEL_13:
        uint64_t v14 = sub_24F777244();
        sub_24F776A6C(v14, v15, v6);
LABEL_14:
        unint64_t v16 = *(void **)(v2 + 32);
        *(void *)(v2 + 32) = 0;
        sub_24F781A48(v16);
        sub_24F77D5B0(v16);
        if (v16 == (void *)2)
        {
          swift_unownedRetainStrong();
          sub_24F77D2E8();
          swift_release();
          sub_24F7A07F4();
        }
        else if (v16 == (void *)1)
        {
          sub_24F78496C();
        }
        else
        {
          sub_24F77D5B0(v16);
        }
      }
      else
      {
        sub_24F784200();
        sub_24F776A6C(v8, v7, 1u);
      }
      break;
    case 2:
      uint64_t v12 = sub_24F777244();
      sub_24F776AE4(v12, v13, 2u);
      swift_retain();
      sub_24F777244();
      sub_24F7A1170();
LABEL_12:
      swift_release();
      goto LABEL_13;
    case 3:
      if (v8 ^ 1 | v7 || *(void *)(v2 + 32)) {
        goto LABEL_14;
      }
      sub_24F784200();
      break;
    default:
      goto LABEL_14;
  }
}

void sub_24F77D5B0(id a1)
{
  if ((unint64_t)a1 >= 3) {
}
  }

void sub_24F77D5C0()
{
  sub_24F77BB1C();
  if (v4)
  {
    sub_24F7737D0();
    if (v5 != v6)
    {
      sub_24F77C5C4();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_24F77E574();
    }
  }
  sub_24F77ECFC();
  if (v3)
  {
    sub_24F781274(v7);
    uint64_t v8 = (const void *)sub_24F77C5D0();
    size_t v9 = j__malloc_size(v8);
    sub_24F77D6AC((uint64_t)(v9 - 32) / 16);
  }
  sub_24F77CD7C();
  if (v2)
  {
    uint64_t v12 = sub_24F77B808(v10, v11);
    v1(v12);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    sub_24F781C7C();
  }
  swift_release();
}

void sub_24F77D67C()
{
  sub_24F788264();
}

void sub_24F77D6AC(uint64_t a1@<X8>)
{
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = 2 * a1;
}

uint64_t sub_24F77D6B8(void *a1)
{
  sub_24F7811D0(a1, v1);
  return swift_bridgeObjectRetain();
}

uint64_t sub_24F77D6FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a8;
}

uint64_t sub_24F77D720()
{
  return swift_allocObject();
}

void sub_24F77D740()
{
  sub_24F787184();
}

uint64_t sub_24F77D764(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,...)
{
  va_start(va, a20);
  *(void *)(v21 - 72) = v20;
  return sub_24F7786CC(a5, (uint64_t)va);
}

uint64_t sub_24F77D79C()
{
  return swift_allocObject();
}

unint64_t sub_24F77D7D4(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a5 + 8 * (result >> 6) + 64) |= 1 << result;
  return result;
}

void *sub_24F77D7F8()
{
  return memcpy((void *)(v0 + 584), (const void *)(v0 + 752), 0xA3uLL);
}

uint64_t sub_24F77D814(uint64_t a1, unint64_t a2, char a3)
{
  sub_24F781F10(a1, a2, a3);
  sub_24F781F10(v3, v4, 1);
  return sub_24F781F10(v3, v4, 1);
}

uint64_t sub_24F77D854()
{
  return sub_24F8CEEB0();
}

uint64_t sub_24F77D884()
{
  return sub_24F777048(v0 + v2, 1, v1);
}

uint64_t sub_24F77D8A4()
{
  return sub_24F827D20(v1, v0);
}

uint64_t sub_24F77D8C8@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(a1 + 16);
}

unint64_t sub_24F77D8D4()
{
  return 0xD000000000000016;
}

void *sub_24F77D8F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  return static TableRecord.all()(a2, a4, &a30);
}

uint64_t sub_24F77D91C()
{
  return sub_24F77A91C(v1 - 176, v1 - 120, v0);
}

void sub_24F77D938()
{
  sub_24F777204();
  sub_24F77BB1C();
  if (v4)
  {
    sub_24F7737D0();
    if (v5 != v6)
    {
      sub_24F77C5C4();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_24F77E574();
    }
  }
  sub_24F77ECFC();
  if (v3)
  {
    sub_24F781274(v7);
    uint64_t v8 = (void *)sub_24F77B7EC();
    sub_24F77E584(v8);
  }
  sub_24F77CD7C();
  if (v2)
  {
    uint64_t v11 = sub_24F77B808(v9, v10);
    v1(v11);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    sub_24F781C7C();
  }
  swift_release();
  sub_24F773598();
}

void sub_24F77D9E0(uint64_t a1@<X8>)
{
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = 2 * (a1 / v1);
}

uint64_t sub_24F77DA00()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_24F77DA30()
{
  return type metadata accessor for QueryInterfaceRequest();
}

uint64_t sub_24F77DA48()
{
  return sub_24F77835C(v0);
}

uint64_t sub_24F77DA60(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  return sub_24F7AD1E4((uint64_t)va);
}

uint64_t sub_24F77DA7C()
{
  return 24;
}

uint64_t sub_24F77DA88()
{
  return StatementArguments.description.getter();
}

uint64_t sub_24F77DAAC()
{
  return v0;
}

uint64_t sub_24F77DACC()
{
  sub_24F808CA0(v1, v0, 1);
  return sub_24F808CA0(v1, v0, 1);
}

uint64_t sub_24F77DB28()
{
  return sub_24F8CEEB0();
}

__n128 sub_24F77DB54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9)
{
  return (__n128)a9;
}

uint64_t sub_24F77DB64(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_24F77DB78()
{
  return v0;
}

void sub_24F77DBA8(uint64_t a1@<X8>)
{
  void *v1 = a1;
}

uint64_t sub_24F77DBB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  return sub_24F816B28(v31, v30, &a30, v32);
}

uint64_t sub_24F77DBD4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  return sub_24F8A89CC(v5, v6, v3, v4);
}

void *sub_24F77DC20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  return sub_24F7920F8(&a31);
}

uint64_t sub_24F77DC3C()
{
  uint64_t v2 = STACK[0x228];
  uint64_t v3 = STACK[0x230];
  uint64_t v4 = STACK[0x238];
  return sub_24F8C7E0C(v0, v2, v3, v4);
}

uint64_t sub_24F77DC60()
{
  return swift_getObjectType();
}

uint64_t sub_24F77DC8C()
{
  return swift_getObjectType();
}

void sub_24F77DCC4()
{
  sub_24F766690();
}

uint64_t sub_24F77DCE0()
{
  *(void *)(v1 - 64) = *(void *)(v1 - 56);
  return v0;
}

uint64_t sub_24F77DD0C(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  return sub_24F781F34(v4, v5, v3);
}

uint64_t sub_24F77DD34()
{
  return swift_deallocObject();
}

uint64_t sub_24F77DD3C()
{
  return sub_24F8CFD00();
}

uint64_t sub_24F77DD94()
{
  return sub_24F8CFD00();
}

unint64_t sub_24F77DDB8@<X0>(uint64_t a1@<X8>)
{
  return a1 | ((unint64_t)v1 << 32);
}

uint64_t sub_24F77DDE0()
{
  return v0;
}

uint64_t sub_24F77DDF8(uint64_t a1)
{
  return *(void *)(v1 + 56) + 40 * a1;
}

void *sub_24F77DE08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  return Table.all()(&a30);
}

uint64_t sub_24F77DE2C(uint64_t a1, ...)
{
  va_start(va, a1);
  return sub_24F76F710((uint64_t)va, v1);
}

uint64_t sub_24F77DE44()
{
  return swift_beginAccess();
}

uint64_t sub_24F77DE64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __n128 a10@<Q0>, __n128 a11@<Q1>, __n128 a12@<Q2>, __n128 a13@<Q3>, __n128 a14@<Q4>)
{
  return sub_24F7AD880(a1, a2, a3, a4, a5, a6, a7, a8, a10.n128_i64[0], a10.n128_i64[1], a11.n128_i64[0], a11.n128_i64[1], a12.n128_i64[0], a12.n128_i64[1], a13.n128_i64[0], a13.n128_i64[1], a14.n128_i64[0], a14.n128_i64[1], a9,
           v14,
           v15);
}

unint64_t sub_24F77DE88()
{
  *(void *)(v1 - 72) = *(void *)(v0 + 8);
  *(void *)(v0 + 8) = 0x8000000000000000;
  return sub_24F782950();
}

uint64_t sub_24F77DEB4()
{
  return v0;
}

uint64_t sub_24F77DF00(uint64_t a1)
{
  return a1 - 8;
}

uint64_t sub_24F77DF14()
{
  return sub_24F8CF9D0();
}

uint64_t sub_24F77DF3C()
{
  return swift_allocObject();
}

uint64_t sub_24F77DF54()
{
  return swift_beginAccess();
}

uint64_t sub_24F77DF74()
{
  sub_24F781F10(v0, v1, 3);
  return sub_24F781F10(v2, v3, 3);
}

uint64_t sub_24F77DFB0()
{
  return type metadata accessor for Configuration();
}

uint64_t sub_24F77DFE8()
{
  sub_24F808C90(v1, v0, 1);
  sub_24F808C90(v1, v0, 1);
  return swift_bridgeObjectRetain();
}

__n128 sub_24F77E030()
{
  return v0[4];
}

uint64_t sub_24F77E0F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, int a12, char a13, int a14, char a15, int a16, char a17, int a18, char a19, int a20,char a21,int a22,char a23,int a24,char a25,int a26,char a27,int a28,char a29,int a30,char a31,int a32,char a33)
{
  *(unsigned char *)(v35 - 144) = v33;
  *(unsigned char *)(v35 - 143) = a11;
  *(unsigned char *)(v35 - 142) = a13;
  *(unsigned char *)(v35 - 141) = a15;
  *(unsigned char *)(v35 - 140) = a27;
  *(unsigned char *)(v35 - 139) = a17;
  *(unsigned char *)(v35 - 138) = a19;
  *(unsigned char *)(v35 - 137) = a21;
  *(unsigned char *)(v35 - 136) = v34;
  *(unsigned char *)(v35 - 135) = a23;
  *(unsigned char *)(v35 - 134) = a25;
  *(unsigned char *)(v35 - 133) = a29;
  *(unsigned char *)(v35 - 132) = a31;
  *(unsigned char *)(v35 - 131) = a33;
  return a9;
}

void sub_24F77E160()
{
  sub_24F795654();
}

uint64_t sub_24F77E184@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_24F82A478(a1, a2, v3, a3, 1);
}

uint64_t sub_24F77E1A4()
{
  return sub_24F8CEEB0();
}

uint64_t sub_24F77E1C0()
{
  return swift_beginAccess();
}

uint64_t sub_24F77E1E0(void *a1)
{
  sub_24F7811D0(a1, v1);
  return v1;
}

uint64_t sub_24F77E25C()
{
  return 0;
}

uint64_t *sub_24F77E270(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return &a9;
}

uint64_t sub_24F77E288(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, char a12, int a13, uint64_t __src)
{
  a10 = 0;
  a11 = 0;
  a12 = 0x80;
  return sub_24F827F24(&__src, &a9, v14);
}

uint64_t sub_24F77E2B8()
{
  return sub_24F8CF9D0();
}

uint64_t sub_24F77E2E0()
{
  return sub_24F8CEEB0();
}

uint64_t sub_24F77E304(uint64_t a1)
{
  v2[4] = a1;
  *uint64_t v2 = v1;
  return v1;
}

uint64_t sub_24F77E314()
{
  return sub_24F76C344((uint64_t)&STACK[0x388], (uint64_t)&STACK[0x2D0]);
}

uint64_t sub_24F77E340(void *a1, void *a2)
{
  return sub_24F866C00(a1, a2);
}

void *sub_24F77E36C()
{
  return sub_24F779224(v1, v0, v2);
}

uint64_t sub_24F77E398()
{
  return swift_beginAccess();
}

void *sub_24F77E3BC(void *__src, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char __dst)
{
  return memcpy(&__dst, __src, 0xA3uLL);
}

void sub_24F77E3D8(uint64_t a1, _DWORD *a2)
{
  *a2 = 21;
}

uint64_t sub_24F77E3EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,...)
{
  va_start(va, a20);
  return sub_24F7786CC(a5, (uint64_t)va);
}

uint64_t sub_24F77E41C(uint64_t a1)
{
  unint64_t v2 = *(sqlite3_stmt **)(a1 + 16);
  return sqlite3_stmt_busy(v2);
}

uint64_t sub_24F77E440()
{
  return v0;
}

uint64_t sub_24F77E454()
{
  return sub_24F8CF9D0();
}

uint64_t sub_24F77E47C(uint64_t a1)
{
  return FetchRequest<>.fetchCursor(_:)(v3, v2, a1, v1);
}

uint64_t sub_24F77E4A4()
{
  return v0;
}

void sub_24F77E4C4()
{
  sub_24F777204();
  sub_24F780B48();
  if (v5)
  {
    sub_24F7737D0();
    if (v6 != v7)
    {
      sub_24F77C5C4();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_24F77E574();
    }
  }
  sub_24F77ECFC();
  if (v4)
  {
    sub_24F781274(v8);
    uint64_t v9 = (void *)sub_24F77B7EC();
    sub_24F77E584(v9);
  }
  sub_24F780A84();
  if (v3)
  {
    uint64_t v10 = sub_24F780D90();
    v1(v10);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    sub_24F781274(v2);
    sub_24F78185C();
  }
  swift_release();
  sub_24F773598();
}

size_t sub_24F77E584(void *a1)
{
  size_t result = j__malloc_size(a1);
  a1[2] = v1;
  a1[3] = 2 * ((uint64_t)(result - 32) / v2);
  return result;
}

char *sub_24F77E5C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  return &a17;
}

uint64_t sub_24F77E5FC()
{
  return sub_24F8CE970();
}

uint64_t sub_24F77E624()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_24F77E640()
{
  return sub_24F76D734(v0, 0);
}

uint64_t sub_24F77E660()
{
  return sub_24F85E9C4(v0, v1, v2);
}

void sub_24F77E69C()
{
  *(void *)(v3 + 16) = v1;
  uint64_t v5 = v3 + 16 * v2;
  *(void *)(v5 + 32) = v0;
  *(void *)(v5 + 40) = v4;
}

void _sSd12GRDBInternalE13databaseValueAA08DatabaseC0Vvg_0(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
}

uint64_t sub_24F77E6C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  return sub_24F7B4D70((uint64_t)&a14, &a9);
}

uint64_t sub_24F77E6DC()
{
  return v0;
}

uint64_t sub_24F77E6F4()
{
  return v0;
}

void *sub_24F77E730(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char __dst)
{
  unint64_t v19 = (const void *)(*(void *)(*(void *)(v17 - 72) + 56) + 176 * v16);
  return memcpy(&__dst, v19, 0xABuLL);
}

uint64_t sub_24F77E77C()
{
  return v0;
}

uint64_t sub_24F77E790()
{
  return v0;
}

uint64_t sub_24F77E7B4()
{
  sub_24F781F34(v0, v1, 3);
  sub_24F781F34(v0, v1, 3);
  sub_24F781F34(v0, v1, 3);
  return v2;
}

uint64_t sub_24F77E7F8()
{
  return sub_24F8CEC00();
}

uint64_t sub_24F77E820()
{
  return sqlite3_column_type(v1, v0);
}

uint64_t sub_24F77E848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, __int16 a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, char a19, __int16 a20,char a21,__int16 a22,char a23,uint64_t a24,long long a25,long long a26,long long a27,long long a28,long long a29,long long a30,uint64_t a31,uint64_t a32,char a33)
{
  *(void *)(v34 - 104) = v33;
  *(_OWORD *)(v34 - 96) = a30;
  *(void *)(v34 - 80) = a24;
  *(unsigned char *)(v34 - 72) = a23;
  *(_OWORD *)(v34 - 64) = a29;
  *(_OWORD *)(v34 - 48) = a28;
  *(unsigned char *)(v34 - 32) = a21;
  *(_OWORD *)(v34 - 24) = a27;
  *(_OWORD *)(v34 - 8) = a26;
  *(_OWORD *)(v34 + 8) = a25;
  *(unsigned char *)(v34 + 24) = a19;
  *(unsigned char *)(v34 + 25) = a12;
  *(unsigned char *)(v34 + 26) = a14;
  return sub_24F7AD5F4((uint64_t)&a33);
}

unint64_t sub_24F77E8BC(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a5 + 8 * (result >> 6) + 64) |= 1 << result;
  uint64_t v5 = (void *)(*(void *)(a5 + 48) + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  *(void *)(*(void *)(a5 + 56) + 8 * result) = a4;
  return result;
}

uint64_t sub_24F77E8F8(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  return sub_24F781F34(v4, v5, v3);
}

uint64_t sub_24F77E958()
{
  return sub_24F8CEEB0();
}

uint64_t sub_24F77E978()
{
  return v0;
}

uint64_t sub_24F77E984()
{
  return sub_24F8CF7D0();
}

uint64_t sub_24F77E9A4(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  uint64_t v3 = v2[3];
  sub_24F7811D0(v2, v3);
  return v3;
}

void *sub_24F77EA04(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char __src,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,char __dst)
{
  a51 = 0;
  a52 = v53;
  return memcpy(&__dst, &__src, 0xB8uLL);
}

void *sub_24F77EA5C(const void *a1)
{
  return memcpy(&STACK[0x2E0], a1, 0xA3uLL);
}

uint64_t sub_24F77EA78()
{
  return sub_24F8CF9D0();
}

uint64_t sub_24F77EAA0()
{
  return sub_24F8CEEB0();
}

uint64_t sub_24F77EAB8()
{
  return sub_24F8CFAB0();
}

uint64_t sub_24F77EAF0(void *a1, void *a2)
{
  return sub_24F86597C(a1, a2);
}

uint64_t sub_24F77EB08(uint64_t a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v7 = va_arg(va1, void);
  return MEMORY[0x270F9D188](va1, (uint64_t *)va, v3, v4, v2, a1);
}

uint64_t sub_24F77EB34()
{
  return v0;
}

void *sub_24F77EB48(void *__src, ...)
{
  va_start(va, __src);
  return memcpy(va, __src, 0xA3uLL);
}

uint64_t sub_24F77EB64()
{
  return swift_retain();
}

uint64_t sub_24F77EB8C()
{
  return *(void *)(v0 + 24);
}

__n128 sub_24F77EB98()
{
  char v1 = *(unsigned char *)(v0 - 128);
  *(void *)(v0 - 216) = *(void *)(v0 - 152);
  *(_OWORD *)(v0 - 208) = *(_OWORD *)(v0 - 144);
  *(unsigned char *)(v0 - 192) = v1;
  __n128 result = *(__n128 *)(v0 - 120);
  long long v3 = *(_OWORD *)(v0 - 104);
  *(__n128 *)(v0 - 184) = result;
  *(_OWORD *)(v0 - 168) = v3;
  return result;
}

uint64_t sub_24F77EBD4()
{
  return swift_unownedRetainStrong();
}

uint64_t sub_24F77EBFC()
{
  sub_24F781F34(v1, v0, 3);
  sub_24F781F34(v1, v0, 3);
  sub_24F781F34(v1, v0, 3);
  sub_24F781F34(v2, v3, 3);
  return swift_retain();
}

uint64_t sub_24F77EC68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 - 72) = a5;
  return sub_24F8CF360();
}

uint64_t sub_24F77ECAC()
{
  return swift_bridgeObjectRetain();
}

__n128 sub_24F77ECD0(__n128 *a1)
{
  return a1[4];
}

uint64_t sub_24F77ED44()
{
  sub_24F781F34(v0, v1, 3);
  return sub_24F781F34(v2, v3, 3);
}

uint64_t sub_24F77EDC4()
{
  return sub_24F8CEEB0();
}

double sub_24F77EDDC@<D0>(double a1@<X8>)
{
  return a1;
}

uint64_t sub_24F77EDF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24F777048(a1, a2, a3);
}

uint64_t sub_24F77EE08()
{
  return v0;
}

uint64_t sub_24F77EE18(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_24F77EE48()
{
  sub_24F787184();
}

uint64_t sub_24F77EE80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result = *v10;
  *uint64_t v10 = a10;
  return result;
}

__n128 sub_24F77EE90(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_24F77EEC8()
{
  sub_24F781F34(v0, v1, 3);
  sub_24F781F34(v0, v1, 3);
  return sub_24F8CE6A0();
}

uint64_t sub_24F77EF0C()
{
  return v0;
}

uint64_t sub_24F77EF24()
{
  sub_24F7B0E68(v0, v1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_24F77EF58()
{
  sub_24F808CA0(v1, v0, 1);
  return v1;
}

uint64_t sub_24F77EF98()
{
  return sub_24F781F10(v0, v1, 3);
}

uint64_t sub_24F77EFB8()
{
  return sub_24F8CEEB0();
}

uint64_t sub_24F77EFDC()
{
  return sub_24F82A478(v3, v0, v2, v1, 1);
}

uint64_t sub_24F77F000()
{
  return swift_dynamicCast();
}

uint64_t sub_24F77F024()
{
  return *(void *)(v0 - 336);
}

uint64_t sub_24F77F048()
{
  return v0;
}

uint64_t sub_24F77F064()
{
  return v0;
}

uint64_t sub_24F77F078(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_24F77F0A0()
{
  return sub_24F8CEEB0();
}

char *sub_24F77F0D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  return &a24;
}

uint64_t sub_24F77F0E0()
{
  return 0x3230253A64323025;
}

uint64_t sub_24F77F114()
{
  uint64_t v2 = *(void *)(v0 - 344);
  return sub_24F78C440(v2);
}

void sub_24F77F13C(uint64_t a1@<X8>)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v10 = v1 + 40 * v7;
  *(void *)(v10 + 32) = v6;
  *(void *)(v10 + 40) = v5;
  *(void *)(v10 + 48) = v4;
  *(void *)(v10 + 56) = v3;
  *(unsigned char *)(v10 + 64) = v8;
  *(unsigned char *)(v10 + 65) = v9;
  *(unsigned char *)(v10 + 66) = v2;
}

uint64_t sub_24F77F178()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_24F77F1CC()
{
  return sub_24F769D2C();
}

uint64_t sub_24F77F1E4()
{
  return v0;
}

uint64_t sub_24F77F1F4()
{
  return v0;
}

uint64_t sub_24F77F20C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_24F77F23C(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  v3[10] = a1;
  v3[11] = a2;
  v3[7] = 0;
  v3[8] = 0;
  return sub_24F775458((uint64_t)va, (uint64_t)(v3 + 2));
}

uint64_t sub_24F77F25C(uint64_t a1, ...)
{
  va_start(va, a1);
  uint64_t v4 = *v1;
  *(void *)(*v1 + 16) = v2 + 1;
  return sub_24F76C344((uint64_t)va, v4 + 184 * v2 + 32);
}

uint64_t sub_24F77F288()
{
  unint64_t v4 = *(void *)(v3 - 96);
  sub_24F781F10(v1, v4, 3);
  sub_24F781F10(v0, v2, 3);
  sub_24F781F10(v1, v4, 3);
  return v0;
}

__n128 sub_24F77F2D8()
{
  return v0[6];
}

void *sub_24F77F324(void *a1)
{
  return memcpy(a1, v1, 0xA2uLL);
}

void sub_24F77F34C()
{
  sub_24F787184();
}

uint64_t sub_24F77F370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return sub_24F7B2EEC(a1, a2 & 0xFFFFFFFFFFFFLL | 0xD000000000000000, a3, a4, a5);
}

void sub_24F77F398()
{
  sub_24F787184();
}

uint64_t sub_24F77F3BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, sqlite3_stmt *a11, uint64_t a12, int a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  *(void *)(v36 - 72) = a1;
  a21 = v34;
  a22 = v32;
  a23 = v33;
  a24 = v35;
  a25 = v28;
  a26 = v31;
  a27 = v29;
  a28 = v30;
  return sub_24F76B11C(a11, a14, (uint64_t)&a18);
}

__n128 sub_24F77F400()
{
  return v0[4];
}

void *sub_24F77F41C()
{
  uint64_t v5 = *(void *)(v3 - 72);
  *(void *)(v5 + 8 * (v1 >> 6) + 64) |= 1 << v1;
  uint64_t v6 = (void *)(*(void *)(v5 + 48) + 16 * v1);
  *uint64_t v6 = v0;
  v6[1] = v2;
  uint64_t v7 = (void *)(*(void *)(v5 + 56) + 176 * v1);
  return memcpy(v7, &STACK[0x318], 0xABuLL);
}

void *sub_24F77F46C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  return static TableRecord.all()(a2, a4, &a30);
}

void sub_24F77F4A0(_DWORD *a1@<X8>)
{
  *a1 = v1;
}

uint64_t sub_24F77F4C0(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  uint64_t v3 = v2[3];
  sub_24F7811D0(v2, v3);
  return v3;
}

void sub_24F77F508()
{
  uint64_t v4 = *(void *)(v0 + 32);
  *(void *)(v4 + 16) = v3 + 1;
  uint64_t v5 = (void *)(v4 + 32 * v3);
  v5[4] = v1;
  v5[5] = v2;
  v5[6] = 0;
}

void sub_24F77F524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, char a14, int a15, char a16, int a17, char a18, int a19, char a20,int a21,char a22,int a23,char a24,int a25,char a26,int a27,char a28,int a29,char a30,int a31,char a32)
{
  *(unsigned char *)(v34 - 144) = v32;
  *(unsigned char *)(v34 - 143) = a12;
  *(unsigned char *)(v34 - 142) = a14;
  *(unsigned char *)(v34 - 141) = a16;
  *(unsigned char *)(v34 - 140) = a28;
  *(unsigned char *)(v34 - 139) = a18;
  *(unsigned char *)(v34 - 138) = a20;
  *(unsigned char *)(v34 - 137) = a22;
  *(unsigned char *)(v34 - 136) = v33;
  *(unsigned char *)(v34 - 135) = a24;
  *(unsigned char *)(v34 - 134) = a26;
  *(unsigned char *)(v34 - 133) = a30;
  *(unsigned char *)(v34 - 132) = a32;
}

uint64_t sub_24F77F588(uint64_t a1)
{
  sub_24F7811D0((void *)(v1 + 16), *(void *)(v1 + 40));
  return a1;
}

uint64_t sub_24F77F5DC()
{
  return v0;
}

uint64_t sub_24F77F5E8()
{
  sub_24F808CA0(v1, v0, 1);
  return sub_24F808CA0(v1, v0, 1);
}

unint64_t sub_24F77F624(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a5 + 8 * (result >> 6) + 64) |= 1 << result;
  uint64_t v5 = (void *)(*(void *)(a5 + 48) + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  return result;
}

uint64_t sub_24F77F658()
{
  return sub_24F781F10(v1, v0, 3);
}

uint64_t sub_24F77F674@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unsigned int a9@<W8>, __n128 a10@<Q0>, __n128 a11@<Q1>, __n128 a12@<Q2>, __n128 a13@<Q3>, __n128 a14@<Q4>)
{
  return sub_24F76C98C(a1, a2, a3, a4, a5, a6, a7, a8, a10.n128_i64[0], a10.n128_i64[1], a11.n128_i64[0], a11.n128_i64[1], a12.n128_i64[0], a12.n128_i64[1], a13.n128_i64[0], a13.n128_i64[1], a14.n128_i64[0], a14.n128_i64[1], v14,
           v15,
           a9);
}

uint64_t sub_24F77F6B0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_24F77F6D8()
{
  return sub_24F8CFD00();
}

void sub_24F77F6F8()
{
  *(void *)(v7 - 200) = v5;
  *(void *)(v7 - 192) = v4;
  *(void *)(v7 - 184) = v3;
  *(void *)(v7 - 176) = v2;
  *(void *)(v7 - 168) = v1;
  *(void *)(v7 - 160) = v0;
  uint64_t v8 = *(void *)(v7 - 312);
  *(void *)(v7 - 152) = v6;
  *(void *)(v7 - 144) = v8;
  uint64_t v9 = *(void *)(v7 - 296);
  *(void *)(v7 - 136) = *(void *)(v7 - 304);
  *(void *)(v7 - 128) = v9;
  *(unsigned char *)(v7 - 120) = *(_DWORD *)(v7 - 284);
  uint64_t v10 = *(void *)(v7 - 272);
  *(void *)(v7 - 112) = *(void *)(v7 - 280);
  *(void *)(v7 - 104) = v10;
  *(void *)(v7 - 96) = *(void *)(v7 - 264);
}

void sub_24F77F754()
{
  sub_24F787184();
}

uint64_t sub_24F77F778()
{
  *(void *)(v1 + v2[17]) = 0;
  *(void *)(v1 + v2[18]) = 0;
  *(unsigned char *)(v1 + v2[19]) = v0;
  *(unsigned char *)(v1 + v2[20]) = 0;
  uint64_t v4 = (void *)(v1 + v2[21]);
  *uint64_t v4 = 0;
  v4[1] = 0;
  uint64_t v5 = (void *)(v1 + v2[22]);
  *uint64_t v5 = 0;
  v5[1] = 0;
  return type metadata accessor for DatabaseQueue();
}

uint64_t sub_24F77F7CC()
{
  return sub_24F8CEEB0();
}

uint64_t sub_24F77F7F0(uint64_t a1, uint64_t a2)
{
  return sub_24F7CD4E0(a1, a2);
}

uint64_t sub_24F77F80C()
{
  return v0;
}

uint64_t sub_24F77F830()
{
  return sub_24F8CE7C0();
}

uint64_t sub_24F77F86C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_24F77F890@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a7(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_24F77F8BC(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a2 = 21;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = (v5 - 32) | 0x8000000000000000;
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = v2;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 56) = 0;
  return swift_bridgeObjectRetain();
}

uint64_t sub_24F77F8F0()
{
  return swift_beginAccess();
}

uint64_t sub_24F77F910@<X0>(void *a1@<X8>)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  void *v1 = *a1;
  v1[1] = v3;
  v1[2] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_24F77F930()
{
  type metadata accessor for _RowDecoder.KeyedContainer();
  return v0;
}

uint64_t sub_24F77F958()
{
  return sub_24F8CF9D0();
}

uint64_t sub_24F77F980()
{
  return v0;
}

uint64_t sub_24F77F998()
{
  return v0;
}

uint64_t sub_24F77F9A4()
{
  sub_24F781F10(v2, v3, 3);
  sub_24F781F10(v1, v0, 3);
  sub_24F781F10(v2, v3, 3);
  sub_24F781F10(v1, v0, 3);
  return sub_24F781F10(v1, v0, 3);
}

void *sub_24F77FA10@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  return memmove(__dst, a2, v2);
}

__n128 sub_24F77FA20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __n128 a13, long long a14, long long a15, char a16)
{
  __n128 result = a13;
  *(_DWORD *)a2 = a12;
  *(__n128 *)(a2 + 8) = a13;
  *(_OWORD *)(a2 + 24) = a14;
  *(_OWORD *)(a2 + 40) = a15;
  *(unsigned char *)(a2 + 56) = a16;
  return result;
}

uint64_t sub_24F77FA4C()
{
  return v0;
}

uint64_t sub_24F77FA5C()
{
  return swift_bridgeObjectRelease();
}

void *sub_24F77FA74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  return static TableRecord.all()(a2, a3, &a30);
}

uint64_t sub_24F77FA90()
{
  return sub_24F799004();
}

char *sub_24F77FABC@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_24F77FAFC()
{
  return sub_24F8CF9D0();
}

uint64_t sub_24F77FB24(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v18 = *(unsigned __int16 *)(v8 + 176) | (*(unsigned __int8 *)(v8 + 178) << 16);
  uint64_t v16 = *(void *)(v8 + 160);
  uint64_t v17 = *(void *)(v8 + 168);
  long long v14 = *(_OWORD *)(v8 + 128);
  long long v15 = *(_OWORD *)(v8 + 144);
  long long v12 = *(_OWORD *)(v8 + 96);
  long long v13 = *(_OWORD *)(v8 + 112);
  long long v11 = *(_OWORD *)(v8 + 80);
  return sub_24F76C98C(a1, a2, a3, a4, a5, a6, a7, a8, v11, *((uint64_t *)&v11 + 1), v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16,
           v17,
           v18);
}

void *sub_24F77FB64(uint64_t a1)
{
  return FetchRequest.databaseRegion(_:)(v2, v1, a1, v3);
}

void sub_24F77FBB0(uint64_t a1@<X8>)
{
  *(void *)a1 = v1;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
}

uint64_t sub_24F77FBD8()
{
  return sub_24F8CF060();
}

void *sub_24F77FC18(uint64_t a1)
{
  return sub_24F779224(a1, v1, v2);
}

unint64_t sub_24F77FC3C()
{
  return sub_24F7D29A4();
}

uint64_t sub_24F77FC68()
{
  *uint64_t v0 = 0x8000000000000000;
  return v1;
}

uint64_t sub_24F77FC94(uint64_t a1)
{
  return a1 - 8;
}

uint64_t sub_24F77FCAC(void *a1)
{
  uint64_t v1 = a1[3];
  sub_24F7811D0(a1, v1);
  return v1;
}

uint64_t sub_24F77FCE4(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  uint64_t v3 = v2[3];
  sub_24F7811D0(v2, v3);
  return v3;
}

uint64_t sub_24F77FD2C()
{
  uint64_t result = *(void *)(v0 + 48);
  *(void *)(v0 + 48) = v2;
  *(void *)(v0 + 56) = v1;
  return result;
}

uint64_t sub_24F77FD3C()
{
  return sub_24F781F10(v0, v1, 3);
}

void *sub_24F77FD58()
{
  return sub_24F7811D0((void *)(v0 + 16), *(void *)(v0 + 40));
}

uint64_t sub_24F77FD8C()
{
  sub_24F808CA0(v1, v0, 1);
  return sub_24F808CA0(v1, v0, 1);
}

uint64_t sub_24F77FDC8()
{
  return v0;
}

uint64_t sub_24F77FDD4()
{
  return sub_24F8CF830();
}

uint64_t sub_24F77FE04()
{
  return sub_24F76D734(v0, 1);
}

void sub_24F77FE20()
{
  JUMPOUT(0x2533654D0);
}

uint64_t sub_24F77FE38()
{
  sub_24F781F10(v2, v3, 3);
  sub_24F781F10(v2, v3, 3);
  sub_24F781F10(v0, v1, 3);
  return sub_24F781F10(v0, v1, 3);
}

void sub_24F77FE8C()
{
  sub_24F795654();
}

uint64_t sub_24F77FEB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return sub_24F82A174(a10, v10, v12, v11, 1);
}

uint64_t sub_24F77FED4()
{
  return sub_24F8CEEB0();
}

uint64_t sub_24F77FF00(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  uint64_t v3 = v2[3];
  sub_24F7811D0(v2, v3);
  return v3;
}

void sub_24F77FF48()
{
  *(void *)(*(void *)v0 + 16) = v1 + 1;
}

uint64_t sub_24F77FF64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t sub_24F77FF98(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, char a12, int a13, uint64_t __src)
{
  a10 = 0;
  a11 = 0;
  a12 = 0x80;
  return sub_24F827F24(&__src, &a9, v14);
}

uint64_t sub_24F77FFC8(uint64_t a1)
{
  *(void *)(v1 - 72) = a1;
  return sub_24F8CF360();
}

void sub_24F780008()
{
  sub_24F787184();
}

uint64_t sub_24F78002C()
{
  *(_WORD *)uint64_t v0 = 1;
  *(void *)(v0 + 8) = 0;
  *(void *)(v0 + 16) = 0;
  *(_DWORD *)(v0 + 23) = 0;
  *(void *)(v0 + 32) = v1;
  *(_WORD *)(v0 + 40) = 0;
  *(void *)(v0 + 48) = 0;
  *(void *)(v0 + 56) = 0;
  *(unsigned char *)(v0 + 64) = 2;
  *(void *)(v0 + 72) = 0;
  *(void *)(v0 + 80) = 0;
  *(unsigned char *)(v0 + 88) = -1;
  *(void *)(v0 + 96) = 5;
  return sub_24F8CEBF0();
}

uint64_t sub_24F78007C()
{
  return sub_24F8CEEB0();
}

uint64_t sub_24F780098()
{
  return swift_willThrow();
}

uint64_t sub_24F7800B0()
{
  return sub_24F76C41C((__n128 *)&STACK[0x388]);
}

__n128 *sub_24F7800E0(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[3].n128_u64[1] = v5;
  result[4].n128_u64[0] = v4;
  result[2].n128_u64[0] = v2;
  result[6].n128_u64[0] = v5;
  result[6].n128_u64[1] = v4;
  result[4].n128_u64[1] = v3;
  result[8].n128_u64[1] = v5;
  result[9].n128_u64[0] = v4;
  return result;
}

uint64_t sub_24F7800FC()
{
  *(void *)(v2 - 96) = v1;
  *(void *)(v2 - 88) = v0;
  return v2 - 96;
}

uint64_t sub_24F78013C()
{
  return v0;
}

void *sub_24F780174(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char __src,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char __dst)
{
  return memcpy(&__dst, &__src, 0xA3uLL);
}

uint64_t sub_24F780190@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = (v2 - 32) | 0x8000000000000000;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(unsigned char *)(a1 + 56) = 0;
  return swift_willThrow();
}

uint64_t sub_24F7801C0()
{
  return *(void *)v0;
}

uint64_t sub_24F7801D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, int a12, char a13, int a14, char a15, int a16, char a17, int a18, char a19, int a20,char a21,int a22,char a23,int a24,char a25,int a26,char a27,int a28,char a29,int a30,char a31,uint64_t a32,uint64_t a33,char a34)
{
  *(unsigned char *)(v36 - 224) = v35;
  *(unsigned char *)(v36 - 223) = a11;
  *(unsigned char *)(v36 - 222) = a13;
  *(unsigned char *)(v36 - 221) = a15;
  *(unsigned char *)(v36 - 220) = a34;
  *(unsigned char *)(v36 - 219) = a17;
  *(unsigned char *)(v36 - 218) = a19;
  *(unsigned char *)(v36 - 217) = a21;
  *(unsigned char *)(v36 - 216) = v34;
  *(unsigned char *)(v36 - 215) = a23;
  *(unsigned char *)(v36 - 214) = a25;
  *(unsigned char *)(v36 - 213) = a27;
  *(unsigned char *)(v36 - 212) = a29;
  *(unsigned char *)(v36 - 211) = a31;
  return a10;
}

uint64_t sub_24F780248()
{
  return swift_allocObject();
}

uint64_t sub_24F780274()
{
  return sub_24F8CEEB0();
}

uint64_t sub_24F78029C()
{
  return v0 + 8;
}

uint64_t sub_24F7802A8()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_24F7802CC()
{
  return v0;
}

uint64_t sub_24F7802EC()
{
  return v0;
}

uint64_t sub_24F78030C()
{
  return sub_24F8CEEB0();
}

uint64_t sub_24F780324()
{
  return 0;
}

sqlite3_int64 sub_24F780354()
{
  return sqlite3_column_int64(v1, v0);
}

uint64_t sub_24F78036C()
{
  return sub_24F76F86C(v0 + 39);
}

uint64_t sub_24F780384(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return sub_24F7AD5DC(a1, a2, a3);
}

uint64_t sub_24F7803B8()
{
  return v0;
}

uint64_t sub_24F7803D0(uint64_t a1, const void *a2, const void *a3)
{
  return sub_24F815BAC(2, a2, a3, v3);
}

uint64_t sub_24F780400()
{
  return sub_24F78346C(v0);
}

uint64_t sub_24F780418()
{
  return sub_24F781F10(v1, v0, 3);
}

uint64_t sub_24F780440()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_24F780488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return sub_24F7CFD5C(v16, v15, a14, v14, 1);
}

uint64_t sub_24F7804C4(uint64_t result)
{
  void *v1 = result;
  return result;
}

uint64_t sub_24F7804D8@<X0>(uint64_t a1@<X8>)
{
  return a1 + 32;
}

void *sub_24F7804E8()
{
  return memcpy((void *)(v0 + 792), (const void *)(v0 + 960), 0xA3uLL);
}

uint64_t sub_24F780504()
{
  return sub_24F8CEEB0();
}

uint64_t sub_24F780528()
{
  return swift_bridgeObjectRelease();
}

void sub_24F780544()
{
  ++*(void *)(v0 + 16);
}

uint64_t sub_24F780558(uint64_t a1)
{
  return sub_24F777048(a1, 1, v1);
}

void *sub_24F780578(void *a1)
{
  return sub_24F7811D0(a1, a1[3]);
}

uint64_t sub_24F7805A4()
{
  return sub_24F8CFF30();
}

void sub_24F7805BC()
{
  *(void *)(v0 + 16) = *(void *)(v1 + 16);
}

uint64_t sub_24F7805F8()
{
  return swift_allocObject();
}

uint64_t sub_24F78062C()
{
  return v0;
}

uint64_t sub_24F780650()
{
  return sub_24F8CFD00();
}

uint64_t sub_24F780670()
{
  return v0;
}

void sub_24F78067C()
{
  sub_24F787184();
}

uint64_t sub_24F7806A0(double a1)
{
  return (uint64_t)a1;
}

double sub_24F7806AC()
{
  return 0.0;
}

void sub_24F7806BC(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 120) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_24F7806DC()
{
  return sub_24F8CEEB0();
}

uint64_t sub_24F7806FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  return sub_24F7B00C4(a1, (uint64_t)va, v12);
}

uint64_t sub_24F780718()
{
  return sub_24F8CF980();
}

uint64_t sub_24F780738()
{
  return sub_24F7AD3A0(v3, v4, v0, v1, v2);
}

uint64_t sub_24F78075C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

void *sub_24F78077C(void *result)
{
  result[2] = v3;
  result[3] = v2;
  result[4] = v4;
  result[5] = v1;
  return result;
}

uint64_t sub_24F7807AC()
{
  sub_24F781F34(v0, v1, 3);
  return sub_24F781F10(v2, v3, 3);
}

uint64_t sub_24F7807E8()
{
  return v0;
}

uint64_t sub_24F7807F8(uint64_t a1)
{
  sub_24F808C90(a1, v1, 1);
  return swift_bridgeObjectRetain();
}

void sub_24F780828(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  *(void *)(a1 + 16) = a2;
}

uint64_t sub_24F780830()
{
  return sub_24F8CEEB0();
}

uint64_t sub_24F780848()
{
  sub_24F781F10(v2, v3, 3);
  sub_24F781F10(v0, v1, 3);
  return sub_24F781F10(v0, v1, 3);
}

uint64_t sub_24F780894()
{
  return v0;
}

unint64_t sub_24F7808A8()
{
  return sub_24F830AA8();
}

uint64_t sub_24F7808C4()
{
  sub_24F838880(0, v1, v2);
  return sub_24F838A08((uint64_t)v2, v1, v0);
}

__n128 sub_24F78091C()
{
  return v0[3];
}

void *sub_24F780934(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char __dst)
{
  return memcpy(&__dst, &__src, 0xA3uLL);
}

uint64_t sub_24F78098C()
{
  return v0;
}

uint64_t sub_24F7809A4()
{
  return v0;
}

uint64_t sub_24F7809B8(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9)
{
  a9 = *a2;
  return static FetchableRecord.fetchCursor(_:arguments:adapter:)(a1, (uint64_t *)&a9, a3);
}

uint64_t sub_24F7809D4()
{
  return swift_release();
}

uint64_t sub_24F780A08()
{
  return swift_beginAccess();
}

uint64_t sub_24F780A58()
{
  return sub_24F8CF9D0();
}

uint64_t sub_24F780A90()
{
  return *(void *)(v0 - 112);
}

BOOL sub_24F780AA8()
{
  return v0 > 0;
}

uint64_t sub_24F780ACC()
{
  return swift_retain_n();
}

uint64_t sub_24F780AE4()
{
  return sub_24F76F86C((__n128 *)&STACK[0x4C8]);
}

void sub_24F780AFC()
{
  *uint64_t v0 = v1;
  v0[1] = v2;
  v0[2] = v3;
}

void sub_24F780B08()
{
  sub_24F77CC78();
}

uint64_t sub_24F780B38()
{
  return v0;
}

uint64_t sub_24F780B5C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_24F780B7C()
{
  return sub_24F8CF610();
}

uint64_t sub_24F780B98()
{
  return v0;
}

uint64_t sub_24F780BA4()
{
  return sub_24F7CFD5C(v1, v2, v0, v3, 1);
}

uint64_t sub_24F780BC8()
{
  return 0;
}

uint64_t sub_24F780BD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,...)
{
  va_start(va, a20);
  *(void *)(v21 - 72) = v20;
  return sub_24F7786CC(a5, (uint64_t)va);
}

uint64_t sub_24F780C1C()
{
  return 0;
}

uint64_t _s12GRDBInternal8DatabaseC02isA5TableySbSSFZ_0()
{
  return sub_24F7F147C();
}

uint64_t sub_24F780C68(uint64_t a1)
{
  uint64_t v1 = sub_24F76F774(a1);
  unint64_t v2 = *(void *)(v1 + 8);
  char v3 = *(unsigned char *)(v1 + 16);
  uint64_t v4 = *(void *)v1;
  return sub_24F781F34(v4, v2, v3);
}

uint64_t sub_24F780C98(uint64_t a1, unint64_t a2, char a3)
{
  sub_24F781F10(a1, a2, a3);
  sub_24F781F10(v3, v4, 0);
  return sub_24F781F10(v3, v4, 0);
}

unint64_t sub_24F780CD8()
{
  return sub_24F8586C4(1uLL, v1, v0);
}

uint64_t sub_24F780CF4()
{
  *(void *)(v4 - 208) = v2;
  *(void *)(v4 - 200) = v0;
  *(void *)(v4 - 192) = v3;
  *(void *)(v4 - 184) = v1;
  return 255;
}

uint64_t sub_24F780D08()
{
  return type metadata accessor for ReceiveValuesOnSubscription.Target();
}

uint64_t sub_24F780D28()
{
  return sub_24F8CEEB0();
}

void *sub_24F780D48(void *a1)
{
  return memcpy(a1, (const void *)(v1 - 216), 0xA3uLL);
}

void sub_24F780D60(void *a1@<X8>)
{
  *a1 = v1;
}

unint64_t sub_24F780D68()
{
  return 0xD000000000000015;
}

uint64_t sub_24F780D7C()
{
  return 8236;
}

uint64_t sub_24F780D90()
{
  return v0;
}

uint64_t sub_24F780DA0()
{
  return v0;
}

uint64_t sub_24F780DAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return a10;
}

uint64_t sub_24F780DC8()
{
  return sqlite3_column_type(v1, v0);
}

uint64_t sub_24F780DF0(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  return sub_24F7903D0(v4, v5, v3);
}

uint64_t sub_24F780E18(uint64_t a1, uint64_t a2, char a3)
{
  sub_24F808CA0(a1, a2, a3);
  return sub_24F808CA0(v4, v3, 0);
}

uint64_t sub_24F780E60()
{
  return v0;
}

uint64_t sub_24F780E78(uint64_t a1)
{
  return AssociationAggregate.forKey(_:)(a1, v1);
}

uint64_t sub_24F780E9C()
{
  return swift_getAssociatedTypeWitness();
}

uint64_t sub_24F780EBC()
{
  return v0 - 152;
}

uint64_t sub_24F780ED0()
{
  return sub_24F8A89DC(v0, v1, v2, v4, v3);
}

char *sub_24F780F10(char *result, uint64_t a2, char *a3)
{
  if (a3 != result || &result[24 * a2] <= a3) {
    return (char *)sub_24F77FA10(a3, result);
  }
  return result;
}

void sub_24F780F38(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v4 = *(void *)(a1 + 16);
  uint64_t v34 = MEMORY[0x263F8EE78];
  sub_24F781818();
  uint64_t v26 = a2;
  uint64_t v27 = a1;
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t v6 = a1 + 32;
    swift_bridgeObjectRetain();
    unint64_t v7 = v4;
    while (v5)
    {
      sub_24F781214(v6, (uint64_t)v33, &qword_26B1F7AC0);
      sub_24F781214((uint64_t)v33, (uint64_t)v31, &qword_26B1F7AC0);
      if (v32)
      {
        sub_24F7811D0(v31, v32);
        uint64_t v8 = sub_24F782C9C();
        v9(v8);
        uint64_t v10 = v28;
        uint64_t v11 = v29;
        char v12 = v30;
        _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v31);
      }
      else
      {
        sub_24F7817A4((uint64_t)v31);
        uint64_t v10 = 0;
        uint64_t v11 = 0;
        char v12 = 4;
      }
      sub_24F7817A4((uint64_t)v33);
      uint64_t v13 = v34;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_24F76BA1C();
        uint64_t v13 = v34;
      }
      unint64_t v14 = *(void *)(v13 + 16);
      if (v14 >= *(void *)(v13 + 24) >> 1)
      {
        sub_24F77C170();
        uint64_t v13 = v34;
      }
      *(void *)(v13 + 16) = v14 + 1;
      uint64_t v15 = v13 + 24 * v14;
      *(void *)(v15 + 32) = v10;
      *(void *)(v15 + 40) = v11;
      *(unsigned char *)(v15 + 48) = v12;
      v6 += 40;
      --v5;
      if (!--v7) {
        goto LABEL_14;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v13 = v34;
    swift_bridgeObjectRetain();
LABEL_14:
    unint64_t v16 = *(void *)(v27 + 16);
    if (v4 == v16)
    {
LABEL_15:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v17 = MEMORY[0x263F8EE80];
      *uint64_t v26 = v13;
      v26[1] = v17;
      return;
    }
    uint64_t v18 = v27 + 40 * v4 + 32;
    while (v4 < v16)
    {
      sub_24F781214(v18, (uint64_t)v33, &qword_26B1F7AC0);
      sub_24F781214((uint64_t)v33, (uint64_t)v31, &qword_26B1F7AC0);
      if (v32)
      {
        sub_24F7811D0(v31, v32);
        uint64_t v19 = sub_24F782C9C();
        v20(v19);
        uint64_t v21 = v28;
        uint64_t v22 = v29;
        char v23 = v30;
        _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v31);
      }
      else
      {
        sub_24F7817A4((uint64_t)v31);
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        char v23 = 4;
      }
      sub_24F7817A4((uint64_t)v33);
      uint64_t v13 = v34;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_24F76BA1C();
        uint64_t v13 = v34;
      }
      unint64_t v24 = *(void *)(v13 + 16);
      if (v24 >= *(void *)(v13 + 24) >> 1)
      {
        sub_24F77C170();
        uint64_t v13 = v34;
      }
      ++v4;
      *(void *)(v13 + 16) = v24 + 1;
      uint64_t v25 = v13 + 24 * v24;
      *(void *)(v25 + 32) = v21;
      *(void *)(v25 + 40) = v22;
      *(unsigned char *)(v25 + 48) = v23;
      unint64_t v16 = *(void *)(v27 + 16);
      v18 += 40;
      if (v4 == v16) {
        goto LABEL_15;
      }
    }
  }
  __break(1u);
}

void *sub_24F7811D0(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_24F781214(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_24F781274(a3);
  sub_24F773974();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t sub_24F781274(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_24F7812B8()
{
  return swift_arrayInitWithCopy();
}

uint64_t sub_24F7812E8(uint64_t a1)
{
  sub_24F781F10(a1, v1, 3);
  return sub_24F781F10(v2, v3, 3);
}

uint64_t sub_24F781320()
{
  return v0;
}

uint64_t sub_24F781338()
{
  return v0;
}

uint64_t sub_24F781348()
{
  return sub_24F7B0E68(v1, v0, 0);
}

uint64_t sub_24F781364()
{
  return 0;
}

void *sub_24F781390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  return Table.all()(&a30);
}

uint64_t sub_24F7813B0()
{
  return QueryInterfaceRequest.isEmpty(_:)();
}

uint64_t sub_24F7813F8@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 16) = a1;
  *(void *)(v2 + 8) = v1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_24F781430(void *a1)
{
  a1[2] = v1;
  a1[3] = v3;
  a1[4] = v2;
  return type metadata accessor for ValueReducers.Fetch();
}

uint64_t sub_24F781450()
{
  return v0;
}

uint64_t sub_24F7814A8()
{
  return *(void *)(v0 - 120);
}

uint64_t sub_24F7814C0()
{
  return v0;
}

uint64_t sub_24F7814D4(uint64_t a1)
{
  sub_24F808C90(a1, v1, 1);
  return swift_retain();
}

void *sub_24F781520(void *a1)
{
  return memcpy(a1, &STACK[0x2A8], 0xA3uLL);
}

char *sub_24F781538@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_24F781564()
{
  return v0;
}

uint64_t sub_24F781578()
{
  return sub_24F8CEEA0();
}

__n128 sub_24F781594(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9, __n128 a10, __n128 a11, __n128 a12, __n128 a13)
{
  __n128 result = a9;
  *uint64_t v13 = a9;
  v13[1] = a10;
  v13[2] = a11;
  v13[3] = a12;
  v13[4] = a13;
  return result;
}

uint64_t sub_24F7815B0()
{
  return v0;
}

void sub_24F7815C0()
{
  *(void *)(v0 + 16) = v1;
  uint64_t v5 = v0 + 16 * v4;
  *(void *)(v5 + 32) = v2;
  *(void *)(v5 + 40) = v3;
}

uint64_t sub_24F7815E8()
{
  return sub_24F8CEEB0();
}

void *sub_24F781604(uint64_t a1, ...)
{
  va_start(va, a1);
  return sub_24F816D90((uint64_t)va, v2, v1);
}

uint64_t sub_24F781620()
{
  uint64_t v2 = *(void *)(v0 + 80);
  *(void *)(v2 + 16) = v1 + 1;
  return v2 + 168 * v1 + 32;
}

uint64_t sub_24F78163C()
{
  sub_24F880084(v0, v1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_24F781674(uint64_t a1)
{
  return sub_24F7740AC(a1);
}

uint64_t sub_24F781698()
{
  return swift_retain();
}

void sub_24F7816C8(void *a1@<X8>)
{
  *a1 = v1;
  a1[1] = v2;
}

void sub_24F7816D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, int a12, char a13, int a14, char a15, int a16, char a17, int a18, char a19, int a20,char a21,int a22,char a23,int a24,char a25,int a26,char a27,int a28,char a29,int a30,char a31,uint64_t a32,uint64_t a33,char a34)
{
  *(unsigned char *)(v36 - 224) = v35;
  *(unsigned char *)(v36 - 223) = a11;
  *(unsigned char *)(v36 - 222) = a13;
  *(unsigned char *)(v36 - 221) = a15;
  *(unsigned char *)(v36 - 220) = a34;
  *(unsigned char *)(v36 - 219) = a17;
  *(unsigned char *)(v36 - 218) = a19;
  *(unsigned char *)(v36 - 217) = a21;
  *(unsigned char *)(v36 - 216) = v34;
  *(unsigned char *)(v36 - 215) = a23;
  *(unsigned char *)(v36 - 214) = a25;
  *(unsigned char *)(v36 - 213) = a27;
  *(unsigned char *)(v36 - 212) = a29;
  *(unsigned char *)(v36 - 211) = a31;
}

uint64_t sub_24F78173C(uint64_t a1)
{
  return sub_24F76D734(a1, 0);
}

uint64_t _s12GRDBInternal13DatabaseEventVwxx_0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_24F7817A4(uint64_t a1)
{
  uint64_t v2 = sub_24F781274(&qword_26B1F7AC0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for DatabaseValue.Storage(uint64_t a1)
{
  return sub_24F781F10(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

void sub_24F781818()
{
  sub_24F77D938();
  *uint64_t v0 = v1;
}

uint64_t sub_24F78185C()
{
  return swift_arrayInitWithCopy();
}

uint64_t sub_24F781888()
{
  return sub_24F8CEEB0();
}

void sub_24F7818AC()
{
  sub_24F7A1644(v2, v1, v0);
}

uint64_t sub_24F7818CC()
{
  return swift_allocObject();
}

uint64_t sub_24F781904()
{
  return type metadata accessor for SQLGenerationContext();
}

uint64_t sub_24F781920()
{
  return sub_24F8CEC70();
}

void sub_24F781940()
{
  sub_24F787184();
}

uint64_t sub_24F781964()
{
  return sub_24F76F86C((__n128 *)(v0 + 792));
}

uint64_t sub_24F78197C()
{
  sub_24F781F34(v0, v1, 3);
  return swift_retain();
}

unint64_t sub_24F7819B8()
{
  return sub_24F8586C4(1uLL, v0, v1);
}

uint64_t sub_24F7819D4()
{
  return *(void *)(v0 - 288);
}

void *sub_24F7819E8()
{
  return sub_24F7811D0(v0, v0[3]);
}

uint64_t sub_24F781A14()
{
  return v0;
}

uint64_t sub_24F781A40()
{
  return Int.databaseValue.getter(*v0);
}

id sub_24F781A48(id result)
{
  if ((unint64_t)result >= 3) {
    return result;
  }
  return result;
}

Swift::Void __swiftcall Statement.setUncheckedArguments(_:)(GRDBInternal::StatementArguments a1)
{
  uint64_t v2 = *(void *)a1.values._rawValue;
  uint64_t v3 = *((void *)a1.values._rawValue + 1);
  *(void *)(v1 + 104) = *(void *)a1.values._rawValue;
  *(void *)(v1 + 112) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v1 + 96) = 0;
  sub_24F783310();
  sub_24F78253C();
  swift_bridgeObjectRetain();
  uint64_t v27 = sub_24F782364();
  uint64_t v4 = *(void *)(v27 + 16);
  if (!v4)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  uint64_t v28 = v3;
  unint64_t v7 = (void *)(v27 + 40);
  uint64_t v29 = v2;
  while (1)
  {
    uint64_t v8 = v5 + 1;
    if (*v7 && *(void *)(v3 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v9 = sub_24F782950();
      if (v10)
      {
        uint64_t v11 = *(void *)(v3 + 56) + 24 * v9;
        uint64_t v12 = *(void *)v11;
        unint64_t v13 = *(void *)(v11 + 8);
        int v14 = *(unsigned __int8 *)(v11 + 16);
        sub_24F781F34(*(void *)v11, v13, *(unsigned char *)(v11 + 16));
        swift_bridgeObjectRelease();
        sub_24F781F58(v12, v13, v14, v5 + 1);
        uint64_t v15 = v12;
        unint64_t v16 = v13;
        uint64_t v3 = v28;
        uint64_t v2 = v29;
        sub_24F781F10(v15, v16, v14);
        goto LABEL_11;
      }
      swift_bridgeObjectRelease();
    }
    unint64_t v17 = *(void *)(v2 + 16);
    if (v6 != v17)
    {
      if (v6 >= v17) {
        goto LABEL_17;
      }
      uint64_t v18 = sub_24F781EA4();
      sub_24F781F34(v18, v19, v20);
      int v21 = sub_24F781EA4();
      sub_24F781F58(v21, v22, v23, v5 + 1);
      uint64_t v24 = sub_24F781EA4();
      uint64_t v3 = v28;
      uint64_t v2 = v29;
      sub_24F781F10(v24, v25, v26);
      ++v6;
    }
LABEL_11:
    if (v5 == 2147483645) {
      break;
    }
    v7 += 2;
    ++v5;
    if (v4 == v8) {
      goto LABEL_13;
    }
  }
  __break(1u);
LABEL_17:
  __break(1u);
  swift_unexpectedError();
  __break(1u);
}

uint64_t sub_24F781C60()
{
  return v0;
}

uint64_t sub_24F781C7C()
{
  return swift_arrayInitWithCopy();
}

uint64_t sub_24F781C98()
{
  return sub_24F773180(v0, v1);
}

uint64_t sub_24F781CB4()
{
  return v0;
}

uint64_t sub_24F781CDC()
{
  return sub_24F8CEEB0();
}

uint64_t sub_24F781D28()
{
  return 0;
}

uint64_t sub_24F781D40()
{
  return sub_24F7AD3A0(v0, v4, v2, v1, v3);
}

uint64_t sub_24F781D70()
{
  return sub_24F76F86C(v0 + 60);
}

uint64_t sub_24F781D88()
{
  return sub_24F8253FC(v3, v2, v0, v1, (void *)(v4 - 104));
}

uint64_t sub_24F781DB0(long long *a1, uint64_t a2)
{
  sub_24F794DE0(a1, a2);
  return sub_24F89D54C();
}

uint64_t sub_24F781DE4()
{
  return swift_allocObject();
}

uint64_t sub_24F781DFC()
{
  return v0;
}

uint64_t sub_24F781E14()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_24F781E34()
{
  return sub_24F8CED30();
}

void sub_24F781E58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a4 + 16) = v4;
}

void sub_24F781E6C()
{
  *(void *)(*(void *)(v0 + 40) + 16) = v1 + 1;
}

void sub_24F781E80(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + v2);
}

uint64_t sub_24F781E8C()
{
  return sub_24F8CEE70();
}

uint64_t sub_24F781EA4()
{
  return v0;
}

void *sub_24F781EE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  return sub_24F7920F8(&a30);
}

uint64_t sub_24F781F10(uint64_t result, unint64_t a2, char a3)
{
  if (a3 == 3) {
    return sub_24F783E24(result, a2);
  }
  if (a3 == 2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_24F781F34(uint64_t result, unint64_t a2, char a3)
{
  if (a3 == 3) {
    return sub_24F78419C(result, a2);
  }
  if (a3 == 2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_24F781F58(int a1, int a2, int a3, Swift::Int32 at)
{
  uint64_t result = DatabaseValue.bind(to:at:)(v4[2], at);
  if (result)
  {
    int v6 = result;
    swift_unownedRetainStrong();
    uint64_t v7 = (uint64_t)Database.lastErrorMessage.getter();
    uint64_t v9 = v8;
    swift_release();
    uint64_t v10 = Statement.sql.getter();
    uint64_t v12 = v11;
    if (!v9)
    {
      if (!sqlite3_errstr(v6)) {
        __break(1u);
      }
      uint64_t v7 = sub_24F8CEED0();
      uint64_t v9 = v13;
    }
    *(void *)&long long v15 = v7;
    *((void *)&v15 + 1) = v9;
    *(void *)&long long v16 = v10;
    *((void *)&v16 + 1) = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24F777E70(0);
    sub_24F7DC6DC();
    if (sub_24F8CFCC0())
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_24F77835C(0);
    }
    else
    {
      swift_allocError();
      *(_DWORD *)uint64_t v14 = v6;
      *(_OWORD *)(v14 + 8) = v15;
      *(_OWORD *)(v14 + 24) = v16;
      *(_OWORD *)(v14 + 40) = 0uLL;
      *(unsigned char *)(v14 + 56) = 0;
    }
    swift_willThrow();
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

Swift::Int32 __swiftcall DatabaseValue.bind(to:at:)(Swift::OpaquePointer to, Swift::Int32 at)
{
  uint64_t v3 = *(void *)v2;
  unint64_t v4 = *(void *)(v2 + 8);
  rawValue = (sqlite3_stmt *)to._rawValue;
  switch(*(unsigned char *)(v2 + 16))
  {
    case 1:
      sub_24F77390C();
      sub_24F77E5E4();
      LODWORD(to._rawValue) = sqlite3_bind_double(v11, v12, v13);
      break;
    case 2:
      uint64_t v15 = qword_26B1F76D0;
      swift_bridgeObjectRetain();
      if (v15 != -1) {
        swift_once();
      }
      long long v16 = (void (__cdecl *)(void *))qword_26B1FAB20;
      sub_24F8CEE30();
      unint64_t v17 = (sqlite3_stmt *)sub_24F77390C();
      sqlite3_bind_text(v17, v18, v19, -1, v16);
      swift_release();
      sub_24F781F10(v3, v4, 2);
      goto LABEL_22;
    case 3:
      switch(v4 >> 62)
      {
        case 1uLL:
          if (v3 >> 32 >= (int)v3)
          {
            sub_24F78419C(v3, v4);
            swift_retain();
            sub_24F785C1C((int)v3, v3 >> 32, v4, rawValue, at);
            sub_24F782D98();
            goto LABEL_19;
          }
          __break(1u);
          return (Swift::Int32)to._rawValue;
        case 2uLL:
          uint64_t v26 = *(void *)(v3 + 16);
          uint64_t v27 = *(void *)(v3 + 24);
          sub_24F781F34(v3, v4, 3);
          swift_retain();
          swift_retain();
          sub_24F785C1C(v26, v27, v4, rawValue, at);
          swift_release();
          swift_release();
LABEL_19:
          sub_24F782D98();
          break;
        case 3uLL:
          uint64_t v22 = 0;
          uint64_t v21 = 0;
          uint64_t v20 = 0;
          goto LABEL_21;
        default:
          uint64_t v20 = BYTE6(v4);
          uint64_t v21 = v4 & 0xFFFFFFFFFFFFLL;
          uint64_t v22 = *(void *)v2;
LABEL_21:
          sub_24F7859D4(v22, v21, v20, rawValue, at);
          sub_24F782D98();
          break;
      }
LABEL_22:
      sub_24F77E5E4();
      break;
    case 4:
      sub_24F77390C();
      sub_24F77E5E4();
      LODWORD(to._rawValue) = sqlite3_bind_null(v23, v24);
      break;
    default:
      sub_24F77390C();
      sub_24F77E5E4();
      LODWORD(to._rawValue) = sqlite3_bind_int64(v7, v8, v9);
      break;
  }
  return (Swift::Int32)to._rawValue;
}

uint64_t sub_24F782364()
{
  if (*(void *)(v0 + 136))
  {
    uint64_t v1 = *(void *)(v0 + 136);
LABEL_7:
    swift_bridgeObjectRetain();
    return v1;
  }
  uint64_t result = sub_24F783CB8();
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (result > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((result & 0x80000000) == 0)
  {
    swift_retain();
    uint64_t v3 = sub_24F76B8E8();
    sub_24F783AE4(v3, v4);
    uint64_t v1 = v5;
    *(void *)(v0 + 136) = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_24F782418()
{
  return v0;
}

void *sub_24F782444(uint64_t a1)
{
  return sub_24F779224(a1, v1, v2);
}

uint64_t sub_24F782468(uint64_t a1)
{
  return sub_24F777048(a1, 1, v1);
}

uint64_t sub_24F782488()
{
  return sub_24F799140(v0, v4, v2, v1, v3);
}

void *sub_24F7824AC(void *a1)
{
  return memcpy(a1, &STACK[0x618], 0xA3uLL);
}

uint64_t sub_24F7824D0(uint64_t result)
{
  *(void *)(result + 16) = v1;
  *(void *)(result + 24) = v2;
  return result;
}

uint64_t sub_24F7824E4()
{
  return 0;
}

uint64_t sub_24F782504()
{
  return type metadata accessor for SchedulingWatchdog();
}

uint64_t sub_24F78251C()
{
  return swift_beginAccess();
}

uint64_t sub_24F78253C()
{
  uint64_t result = sqlite3_clear_bindings(*(sqlite3_stmt **)(v0 + 16));
  if (result)
  {
    int v2 = result;
    swift_unownedRetainStrong();
    uint64_t v3 = (uint64_t)Database.lastErrorMessage.getter();
    uint64_t v5 = v4;
    swift_release();
    uint64_t v6 = Statement.sql.getter();
    uint64_t v8 = v7;
    if (!v5)
    {
      if (!sqlite3_errstr(v2)) {
        __break(1u);
      }
      uint64_t v3 = sub_24F8CEED0();
      uint64_t v5 = v9;
    }
    *(void *)&long long v11 = v3;
    *((void *)&v11 + 1) = v5;
    *(void *)&long long v12 = v6;
    *((void *)&v12 + 1) = v8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24F777E70(0);
    sub_24F7DC6DC();
    if (sub_24F8CFCC0())
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_24F77835C(0);
    }
    else
    {
      swift_allocError();
      *(_DWORD *)uint64_t v10 = v2;
      *(_OWORD *)(v10 + 8) = v11;
      *(_OWORD *)(v10 + 24) = v12;
      *(_OWORD *)(v10 + 40) = 0uLL;
      *(unsigned char *)(v10 + 56) = 0;
    }
    swift_willThrow();
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

uint64_t sub_24F7826B4(uint64_t a1, char a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  for (uint64_t i = (uint64_t *)(a1 + 48); ; i += 3)
  {
    uint64_t v8 = *(i - 2);
    uint64_t v7 = *(i - 1);
    uint64_t v9 = *i;
    uint64_t v10 = (void *)*a3;
    swift_bridgeObjectRetain();
    unint64_t v12 = sub_24F782950();
    uint64_t v13 = v10[2];
    BOOL v14 = (v11 & 1) == 0;
    if (__OFADD__(v13, v14)) {
      break;
    }
    char v15 = v11;
    if (v10[3] >= v13 + v14)
    {
      if ((a2 & 1) == 0)
      {
        sub_24F781274(&qword_269A2B340);
        sub_24F8CF990();
      }
    }
    else
    {
      sub_24F8B57DC();
      unint64_t v16 = sub_24F782950();
      if ((v15 & 1) != (v17 & 1)) {
        goto LABEL_18;
      }
      unint64_t v12 = v16;
    }
    int v18 = (void *)*a3;
    if (v15)
    {
      uint64_t v19 = *(void *)(v18[7] + 8 * v12);
      swift_bridgeObjectRelease();
      *(void *)(v18[7] + 8 * v12) = v19;
    }
    else
    {
      v18[(v12 >> 6) + 8] |= 1 << v12;
      uint64_t v20 = (void *)(v18[6] + 16 * v12);
      *uint64_t v20 = v8;
      v20[1] = v7;
      *(void *)(v18[7] + 8 * v12) = v9;
      uint64_t v21 = v18[2];
      BOOL v22 = __OFADD__(v21, 1);
      uint64_t v23 = v21 + 1;
      if (v22) {
        goto LABEL_17;
      }
      v18[2] = v23;
    }
    a2 = 1;
    if (!--v4)
    {
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  uint64_t result = sub_24F8CFEA0();
  __break(1u);
  return result;
}

unint64_t sub_24F78286C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_24F8CFD00() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_24F8CFD00() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_24F782950()
{
  sub_24F782E5C();
  sub_24F8CEE50();
  sub_24F8CFF80();
  uint64_t v0 = sub_24F77390C();
  return sub_24F78286C(v0, v1, v2);
}

uint64_t sub_24F7829BC()
{
  return swift_allocObject();
}

uint64_t sub_24F782A00()
{
  return v0;
}

uint64_t _sSi12GRDBInternalE13databaseValueAA08DatabaseC0Vvg_0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 0;
  return result;
}

void sub_24F782A34()
{
  sub_24F787D74();
}

void sub_24F782A58()
{
  sub_24F76D734();
}

void sub_24F782A78(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_DWORD *)uint64_t v7 = v9;
  *(void *)(v7 + 8) = v4;
  *(void *)(v7 + 16) = a4;
  *(void *)(v7 + 24) = v8;
  *(void *)(v7 + 32) = v6;
  *(__n128 *)(v7 + 40) = a1;
  *(unsigned char *)(v7 + 56) = v5 & 1;
}

void *sub_24F782AC4@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v3 - 72) = v1;
  return memcpy(&STACK[0x250], (const void *)(v2 + 232 * a1 - 200), 0xE3uLL);
}

unint64_t sub_24F782B14(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(a8 + 8 * (result >> 6) + 64) |= 1 << result;
  return result;
}

uint64_t sub_24F782B3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  sub_24F781F10(a41, v43, 3);
  sub_24F781F10(a41, v43, 3);
  sub_24F781F10(v42, v41, 3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_24F782B94@<X0>(const void *a1@<X0>, size_t a2@<X8>)
{
  return memcmp(a1, v2, a2);
}

uint64_t sub_24F782BB0()
{
  return v0;
}

uint64_t sub_24F782BD0()
{
  return v0;
}

id sub_24F782BF0()
{
  return objc_msgSend(v2, (SEL)(v4 + 1644), v3, 0, v0, v1);
}

void *sub_24F782C18(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char __dst,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char __src)
{
  return memcpy(&__dst, &__src, 0xA3uLL);
}

uint64_t sub_24F782C34()
{
  return *(void *)(v0 - 312);
}

uint64_t sub_24F782C48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_24F876CF0(v9, v10, &a9);
}

uint64_t sub_24F782C6C(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  return RangeReplaceableCollection.init<A>(_:)(v3, (uint64_t)va);
}

uint64_t sub_24F782C9C()
{
  return v0;
}

uint64_t sub_24F782CC0()
{
  return 0x4E494F5045564153;
}

void sub_24F782CEC()
{
  ++*(void *)(v0 + 16);
}

uint64_t sub_24F782D18()
{
  return v0;
}

__n128 sub_24F782D30(uint64_t a1)
{
  *(void *)(v1 + 72) = a1;
  __n128 result = *(__n128 *)(v1 + 40);
  long long v3 = *(_OWORD *)(v1 + 56);
  long long v4 = *(_OWORD *)(v1 + 24);
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t sub_24F782D5C()
{
  return type metadata accessor for QueryInterfaceRequest();
}

uint64_t sub_24F782D74(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_24F77AAC0(a1, (uint64_t)&a9, a4, v9, a7, v10);
}

uint64_t sub_24F782D98()
{
  return sub_24F781F10(v0, v1, 3);
}

uint64_t sub_24F782DE0(uint64_t a1)
{
  return sub_24F7F0688(a1, 0, 0, v1);
}

uint64_t sub_24F782E00(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  sub_24F7AFED4(a1, a2, a3);
  return v3;
}

uint64_t sub_24F782E1C@<X0>(unsigned __int8 a1@<W8>)
{
  return a1 | (v1 << 8);
}

uint64_t sub_24F782E40()
{
  return swift_getAssociatedTypeWitness();
}

uint64_t sub_24F782E5C()
{
  return sub_24F8CFF30();
}

void *sub_24F782E98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t __dst)
{
  return memcpy(&__dst, &STACK[0x300], 0xA3uLL);
}

uint64_t sub_24F782EB4()
{
  sub_24F781F10(v0, v1, v2);
  return swift_release();
}

void sub_24F782EE8()
{
  sub_24F787184();
}

uint64_t sub_24F782F0C()
{
  return sub_24F8CF9D0();
}

void *sub_24F782F44()
{
  return sub_24F7811D0((void *)(*(void *)v0 + 16), *(void *)(*(void *)v0 + 40));
}

uint64_t sub_24F782F80@<X0>(const void *a1@<X0>, size_t a2@<X8>)
{
  return memcmp(a1, v2, a2);
}

uint64_t sub_24F782F9C()
{
  return v0 - 88;
}

uint64_t sub_24F782FB8(uint64_t a1, uint64_t a2)
{
  return static RowDecodingError.columnNotFound(_:context:)(v3, v2, v4 - 128, a2);
}

uint64_t sub_24F782FDC()
{
  return v0;
}

uint64_t sub_24F782FF0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_24F783010()
{
  sub_24F76F710(v0 + 1128, v0 + 960);
  return sub_24F76F774(v0 + 960);
}

uint64_t sub_24F783040()
{
  return v0;
}

uint64_t sub_24F783050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  return sub_24F82C364((uint64_t)&a29, v29, &a24);
}

uint64_t sub_24F783074()
{
  return v0 - 200;
}

void *sub_24F78308C(const void *a1)
{
  return memcpy(&STACK[0x218], a1, 0xA2uLL);
}

uint64_t sub_24F7830C0(uint64_t a1)
{
  return sub_24F777048(v1, 1, a1);
}

uint64_t sub_24F7830E0()
{
  return v0;
}

void sub_24F783128(unint64_t a1@<X8>)
{
  sub_24F787CA4(a1 > 1, v2, 1, v1);
}

uint64_t sub_24F78314C()
{
  return v0;
}

uint64_t sub_24F783160(uint64_t a1)
{
  sub_24F78C440(a1);
  sub_24F78C440(v1);
  sub_24F78C440(v2);
  return sub_24F78C440(v3);
}

uint64_t sub_24F7831C8()
{
  return sub_24F8CED30();
}

void *sub_24F7831EC(void *__src, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char __dst)
{
  return memcpy(&__dst, __src, 0xA3uLL);
}

uint64_t sub_24F783208()
{
  return 0;
}

uint64_t sub_24F783224@<X0>(unsigned int a1@<W8>)
{
  return a1;
}

uint64_t sub_24F78323C()
{
  return v0;
}

uint64_t sub_24F783258()
{
  sub_24F781F34(v1, v0, 3);
  sub_24F781F34(v1, v0, 3);
  sub_24F781F34(v1, v0, 3);
  sub_24F781F34(v2, v3, 3);
  return sub_24F8CE6A0();
}

void *sub_24F7832BC@<X0>(void *__src@<X0>, void *__dst@<X2>, size_t a3@<X8>)
{
  return memmove(__dst, __src, a3);
}

uint64_t sub_24F7832D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 - 72) = a5;
  return sub_24F8CF360();
}

uint64_t sub_24F783310()
{
  type metadata accessor for SchedulingWatchdog();
  uint64_t v1 = swift_unownedRetainStrong();
  if ((sub_24F78346C(v1) & 1) == 0) {
    goto LABEL_9;
  }
  swift_release();
  uint64_t result = sqlite3_reset(*(sqlite3_stmt **)(v0 + 16));
  if (!result) {
    return result;
  }
  int v3 = result;
  swift_unownedRetainStrong();
  uint64_t v4 = (uint64_t)Database.lastErrorMessage.getter();
  uint64_t v6 = v5;
  swift_release();
  uint64_t v7 = Statement.sql.getter();
  uint64_t v9 = v8;
  sub_24F7DC6DC();
  sub_24F770FA4();
  uint64_t v11 = v10;
  if (!v6)
  {
    if (sqlite3_errstr(v3))
    {
      uint64_t v4 = sub_24F8CEED0();
      uint64_t v6 = v12;
      goto LABEL_6;
    }
    __break(1u);
LABEL_9:
    sub_24F770EAC();
    uint64_t result = sub_24F77F958();
    __break(1u);
    return result;
  }
LABEL_6:
  *(_DWORD *)uint64_t v11 = v3;
  *(void *)(v11 + 8) = v4;
  *(void *)(v11 + 16) = v6;
  *(void *)(v11 + 24) = v7;
  *(void *)(v11 + 32) = v9;
  *(void *)(v11 + 40) = 0;
  *(void *)(v11 + 48) = 0;
  *(unsigned char *)(v11 + 56) = 0;
  return swift_willThrow();
}

uint64_t type metadata accessor for SchedulingWatchdog()
{
  return self;
}

uint64_t sub_24F78346C(uint64_t a1)
{
  uint64_t result = sub_24F7834B0();
  if (result)
  {
    char v3 = sub_24F783564(a1);
    swift_release();
    return v3 & 1;
  }
  return result;
}

uint64_t sub_24F7834B0()
{
  sub_24F783524();
  if (qword_26B1F7BA0 != -1) {
    swift_once();
  }
  sub_24F8CF4F0();
  return v1;
}

unint64_t sub_24F783524()
{
  unint64_t result = qword_26B1F7EC0;
  if (!qword_26B1F7EC0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_26B1F7EC0);
  }
  return result;
}

uint64_t sub_24F783564(uint64_t a1)
{
  swift_beginAccess();
  swift_retain();
  unint64_t v2 = swift_bridgeObjectRetain();
  LOBYTE(a1) = sub_24F7835D8(v2, a1);
  swift_bridgeObjectRelease();
  return a1 & 1;
}

uint64_t sub_24F7835D8(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v4)
  {
    while (1)
    {
      uint64_t v5 = 0;
      while ((a1 & 0xC000000000000001) == 0)
      {
        if (__OFADD__(v5, 1)) {
          goto LABEL_14;
        }
        uint64_t v9 = *(void *)(a1 + 32 + 8 * v5++);
        if (v9 == a2)
        {
LABEL_12:
          swift_release();
          swift_bridgeObjectRelease();
          return 1;
        }
LABEL_10:
        if (v5 == v4) {
          goto LABEL_11;
        }
      }
      uint64_t v6 = MEMORY[0x253364060](v5, a1);
      if (!__OFADD__(v5++, 1)) {
        break;
      }
      __break(1u);
LABEL_14:
      __break(1u);
LABEL_15:
      swift_bridgeObjectRetain();
      uint64_t v4 = sub_24F8CF9E0();
      if (!v4) {
        goto LABEL_11;
      }
    }
    uint64_t v8 = v6;
    swift_unknownObjectRelease();
    if (v8 == a2) {
      goto LABEL_12;
    }
    goto LABEL_10;
  }
LABEL_11:
  swift_release();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_24F7836EC(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_24F781274(&qword_26B1F7B80);
    uint64_t v3 = sub_24F8CFA10();
  }
  else
  {
    uint64_t v3 = MEMORY[0x263F8EE80];
  }
  uint64_t v6 = v3;
  sub_24F7826B4(a1, 1, &v6);
  uint64_t v4 = v6;
  if (v1) {
    swift_release();
  }
  return v4;
}

uint64_t Statement.arguments.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 112);
  *a1 = *(void *)(v1 + 104);
  a1[1] = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Statement.validateArguments(_:)(GRDBInternal::StatementArguments a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_24F783828(v1, 0);
  if (!v2) {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t sub_24F783828(uint64_t a1, char a2)
{
  uint64_t v6 = sub_24F782364();
  swift_retain();
  uint64_t v7 = sub_24F783970(v6, v2, a1);
  swift_bridgeObjectRelease();
  if (!v3 && (a2 & 1) == 0 && *(void *)(*v2 + 16))
  {
    swift_bridgeObjectRelease();
    sub_24F8CF7D0();
    swift_bridgeObjectRelease();
    sub_24F8CFAE0();
    sub_24F8CEEB0();
    swift_bridgeObjectRelease();
    Statement.sql.getter();
    sub_24F7DC6DC();
    uint64_t v8 = sub_24F770FA4();
    sub_24F77BEA4(v8, v9);
  }
  return v7;
}

uint64_t sub_24F783970(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    uint64_t v22 = MEMORY[0x263F8EE78];
    sub_24F781818();
    uint64_t v9 = v22;
    uint64_t v10 = (uint64_t *)(a1 + 40);
    while (1)
    {
      uint64_t v11 = *v10;
      v19[0] = *(v10 - 1);
      v19[1] = v11;
      swift_bridgeObjectRetain();
      sub_24F76CC9C((uint64_t)v19, a2, a3, &v18, (uint64_t)&v20);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      swift_bridgeObjectRelease();
      long long v12 = v20;
      char v13 = v21;
      uint64_t v22 = v9;
      unint64_t v14 = *(void *)(v9 + 16);
      if (v14 >= *(void *)(v9 + 24) >> 1)
      {
        long long v17 = v20;
        sub_24F781818();
        long long v12 = v17;
        uint64_t v9 = v22;
      }
      v10 += 2;
      *(void *)(v9 + 16) = v14 + 1;
      uint64_t v15 = v9 + 24 * v14;
      *(_OWORD *)(v15 + 32) = v12;
      *(unsigned char *)(v15 + 48) = v13;
      if (!--v6)
      {
        swift_release();
        return v9;
      }
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
    return MEMORY[0x263F8EE78];
  }
  return v9;
}

void sub_24F783AE4(uint64_t a1, uint64_t a2)
{
  int v2 = a1;
  unint64_t v3 = HIDWORD(a1);
  if (a1 < 0 != (int)a1 < 0)
  {
    if ((int)a1 >= 0) {
      int v4 = a1;
    }
    else {
      int v4 = -(int)a1;
    }
    if (a1 >= 0) {
      int v5 = HIDWORD(a1);
    }
    else {
      int v5 = -HIDWORD(a1);
    }
    BOOL v6 = __CFADD__(v4, v5);
    uint64_t v7 = (v4 + v5);
    if (v6)
    {
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    if ((int)a1 < 0) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = -v7;
    }
    if (v8)
    {
LABEL_13:
      uint64_t v22 = MEMORY[0x263F8EE78];
      sub_24F795524();
      if ((int)v3 >= v2 && (v8 & 0x8000000000000000) == 0)
      {
        uint64_t v9 = v2 ^ 0x7FFFFFFFu;
        uint64_t v10 = (v3 - v2);
        int v11 = v2 + 1;
        while (v8)
        {
          if (!v9) {
            goto LABEL_30;
          }
          if (sqlite3_bind_parameter_name(*(sqlite3_stmt **)(a2 + 16), v11))
          {
            uint64_t v12 = sub_24F8CEED0();
            unint64_t v14 = sub_24F8586C4(1uLL, v12, v13);
            uint64_t v15 = MEMORY[0x253363690](v14);
            uint64_t v17 = v16;
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v15 = 0;
            uint64_t v17 = 0;
          }
          unint64_t v18 = *(void *)(v22 + 16);
          if (v18 >= *(void *)(v22 + 24) >> 1) {
            sub_24F795524();
          }
          *(void *)(v22 + 16) = v18 + 1;
          uint64_t v19 = v22 + 16 * v18;
          *(void *)(v19 + 32) = v15;
          *(void *)(v19 + 40) = v17;
          if (!v10) {
            goto LABEL_31;
          }
          --v10;
          --v9;
          ++v11;
          if (!--v8) {
            goto LABEL_25;
          }
        }
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
      }
      __break(1u);
      goto LABEL_33;
    }
LABEL_25:
    swift_release();
    return;
  }
  int v20 = HIDWORD(a1) - a1;
  if (!__OFSUB__(HIDWORD(a1), a1))
  {
    uint64_t v8 = v20;
    if (v20) {
      goto LABEL_13;
    }
    goto LABEL_25;
  }
LABEL_34:
  __break(1u);
}

uint64_t sub_24F783CB8()
{
  if (*(unsigned char *)(v0 + 128) != 1) {
    return *(void *)(v0 + 120);
  }
  uint64_t result = sqlite3_bind_parameter_count(*(sqlite3_stmt **)(v0 + 16));
  *(void *)(v0 + 120) = (int)result;
  *(unsigned char *)(v0 + 128) = 0;
  return result;
}

uint64_t sub_24F783CF4(uint64_t a1)
{
  return sub_24F783D1C(a1);
}

uint64_t sub_24F783D1C(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - v3, a1);
  return sub_24F8CF070();
}

uint64_t sub_24F783E24(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

uint64_t Statement.forEachStep(_:)(uint64_t (*a1)(sqlite3_stmt *))
{
  uint64_t v3 = v2;
  type metadata accessor for SchedulingWatchdog();
  uint64_t v5 = swift_unownedRetainStrong();
  if ((sub_24F78346C(v5) & 1) == 0)
  {
    sub_24F7816B8();
    sub_24F770EAC();
    uint64_t result = sub_24F77F958();
    __break(1u);
    return result;
  }
  swift_release();
  uint64_t v6 = *(sqlite3_stmt **)(v1 + 16);
  if (sqlite3_stmt_busy(v6)
    || (swift_unownedRetainStrong(), Database.statementWillExecute(_:)(v1), uint64_t result = sub_24F7809D4(), !v2))
  {
    if (sqlite3_step(v6) == 101)
    {
LABEL_10:
      swift_unownedRetainStrong();
      Database.statementDidExecute(_:)(v1);
      return sub_24F7809D4();
    }
    sub_24F78596C();
    if (!v7)
    {
LABEL_13:
      swift_unownedRetainStrong();
      Database.statementDidFail(_:withResultCode:)(v1, v2);
      return sub_24F7809D4();
    }
    while (1)
    {
      LODWORD(v2) = v3;
      uint64_t result = a1(v6);
      if (v3) {
        break;
      }
      if (sqlite3_step(v6) != 100)
      {
        sub_24F783230();
        if (v7) {
          goto LABEL_10;
        }
        goto LABEL_13;
      }
    }
  }
  return result;
}

uint64_t DatabaseValueConvertible<>.databaseValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v11 - v8;
  sub_24F8CF060();
  (*(void (**)(uint64_t, uint64_t))(a5 + 24))(AssociatedTypeWitness, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
}

uint64_t String.databaseValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = a2;
  *(unsigned char *)(a3 + 16) = 2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_24F78410C@<X0>(uint64_t a1@<X8>)
{
  return String.databaseValue.getter(*v1, v1[1], a1);
}

uint64_t RecordCursor._isDone.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 24) = a1;
  return result;
}

uint64_t FastDatabaseValueCursor.statement.getter()
{
  return swift_retain();
}

uint64_t FastDatabaseValueCursor._isDone.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t sub_24F78419C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }
  return swift_retain();
}

void sub_24F7841F8(uint64_t a1@<X8>)
{
  Double.databaseValue.getter(a1, *v1);
}

void sub_24F784200()
{
  sub_24F784278();
  if (v0)
  {
    swift_unownedRetainStrong();
    sub_24F77D2E8();
    swift_release();
    sub_24F7A07F4();
    swift_willThrow();
  }
  else
  {
    sub_24F78496C();
  }
}

uint64_t sub_24F784278()
{
  sub_24F7843A8();
  swift_unownedRetainStrong();
  char v2 = sub_24F77D2E8();
  uint64_t result = swift_release();
  if ((v2 & 1) == 0)
  {
    swift_beginAccess();
    unint64_t v4 = *(void *)(v0 + 40);
    if (v4 >> 62) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (; v5; uint64_t v5 = sub_24F8CF9E0())
    {
      uint64_t v6 = 4;
      while (1)
      {
        if ((v4 & 0xC000000000000001) != 0) {
          MEMORY[0x253364060](v6 - 4, v4);
        }
        else {
          swift_retain();
        }
        uint64_t v7 = v6 - 3;
        if (__OFADD__(v6 - 4, 1)) {
          break;
        }
        sub_24F7A06E4();
        swift_release();
        if (!v1)
        {
          ++v6;
          if (v7 != v5) {
            continue;
          }
        }
        return swift_bridgeObjectRelease();
      }
      __break(1u);
LABEL_14:
      swift_bridgeObjectRetain();
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_24F7843A8()
{
  type metadata accessor for SchedulingWatchdog();
  uint64_t result = sub_24F7834B0();
  if (!result) {
    goto LABEL_79;
  }
  uint64_t v62 = result;
  *(void *)(result + 24) = v0;
  swift_release();
  uint64_t v4 = *(void *)(*(void *)(v0 + 24) + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_24F784A8C();
  uint64_t result = swift_release();
  unint64_t v5 = 0;
  unint64_t v6 = *(void *)(v4 + 16);
  uint64_t v63 = v4 + 32;
  uint64_t v64 = v4;
  unint64_t v65 = v6;
LABEL_3:
  if (v5 == v6)
  {
    long long v76 = 0u;
    long long v77 = 0u;
    unint64_t v66 = v6;
    long long v75 = 0u;
  }
  else
  {
    if ((v5 & 0x8000000000000000) != 0) {
      goto LABEL_77;
    }
    if (v5 >= *(void *)(v64 + 16)) {
      goto LABEL_78;
    }
    unint64_t v7 = v5;
    sub_24F7A2D60(v63 + 48 * v5, (uint64_t)&v75);
    unint64_t v66 = v7 + 1;
  }
  sub_24F784904((uint64_t)&v75, (uint64_t)&v80);
  if (!v81)
  {
    swift_bridgeObjectRelease();
    *(void *)(v62 + 24) = 0;
    swift_release();
    return swift_release();
  }
  uint64_t v8 = v82;
  uint64_t result = sub_24F794DE0(&v80, (uint64_t)v78);
  uint64_t v69 = *(void *)(v8 + 16);
  if (!v69) {
    goto LABEL_74;
  }
  unint64_t v9 = 0;
  uint64_t v67 = v8;
  uint64_t v68 = v8 + 32;
LABEL_11:
  if (v9 < *(void *)(v8 + 16))
  {
    uint64_t v10 = v68 + 24 * v9;
    uint64_t v11 = *(void *)(v10 + 8);
    uint64_t v12 = *(void *)(v10 + 16);
    unint64_t v13 = sub_24F7811D0(v78, v79);
    sub_24F7A2DC8((uint64_t)v13, (uint64_t)&v75);
    if (!v11)
    {
      swift_retain();
      goto LABEL_72;
    }
    uint64_t v14 = *(void *)(v11 + 16);
    unint64_t v72 = v9;
    uint64_t v70 = v12;
    uint64_t v71 = v11;
    if (v14)
    {
      int v15 = BYTE8(v77);
      swift_retain();
      sub_24F777E70(v11);
      swift_bridgeObjectRetain();
      uint64_t v16 = (unsigned char *)(v11 + 56);
      int v73 = v15;
      while (1)
      {
        uint64_t v18 = *((void *)v16 - 3);
        uint64_t v17 = *((void *)v16 - 2);
        char v2 = (uint64_t (*)(uint64_t))*((void *)v16 - 1);
        int v19 = *v16;
        if (v15)
        {
          if (v15 == 1)
          {
            if (v19 == 1)
            {
              sub_24F7811D0(&v75, *((uint64_t *)&v76 + 1));
              sub_24F780440();
              uint64_t v20 = sub_24F7A33F4();
              if (v1(v20) == v18 && v17 == v21)
              {
                swift_bridgeObjectRelease();
                uint64_t v57 = sub_24F77B4C4();
LABEL_70:
                sub_24F7A203C(v57, v58, v59, v60);
LABEL_71:
                uint64_t v11 = v71;
                swift_bridgeObjectRelease();
                uint64_t v8 = v67;
LABEL_72:
                sub_24F7A2D38((uint64_t)&v75);
                sub_24F77835C(v11);
                uint64_t v61 = sub_24F7811D0(v78, v79);
                sub_24F7A05F8((uint64_t)v61);
                goto LABEL_73;
              }
              char v23 = sub_24F77DD3C();
              swift_bridgeObjectRelease();
              uint64_t v24 = sub_24F77B4C4();
              goto LABEL_35;
            }
          }
          else if (v19 == 2)
          {
            sub_24F7811D0(&v75, *((uint64_t *)&v76 + 1));
            sub_24F780440();
            swift_bridgeObjectRetain();
            uint64_t v32 = sub_24F7A33F4();
            if (v1(v32) == v18 && v17 == v33)
            {
              swift_bridgeObjectRelease();
              uint64_t v57 = sub_24F782A00();
              goto LABEL_70;
            }
            char v23 = sub_24F77DD3C();
            swift_bridgeObjectRelease();
            uint64_t v24 = sub_24F782A00();
            goto LABEL_35;
          }
        }
        else if (!*v16)
        {
          uint64_t v28 = *((void *)&v76 + 1);
          uint64_t v29 = v77;
          sub_24F7811D0(&v75, *((uint64_t *)&v76 + 1));
          uint64_t v1 = *(uint64_t (**)(uint64_t))(v29 + 16);
          swift_bridgeObjectRetain();
          if (((uint64_t (*)(uint64_t, uint64_t))v1)(v28, v29) == v18 && v17 == v30)
          {
            swift_bridgeObjectRelease();
            uint64_t v57 = sub_24F775B00();
            goto LABEL_70;
          }
          char v23 = sub_24F77DD3C();
          swift_bridgeObjectRelease();
          uint64_t v24 = sub_24F775B00();
LABEL_35:
          sub_24F7A203C(v24, v25, v26, v27);
          int v15 = v73;
          if (v23) {
            goto LABEL_71;
          }
        }
        v16 += 32;
        if (!--v14)
        {
          uint64_t v11 = v71;
          swift_bridgeObjectRelease();
          uint64_t v8 = v67;
          uint64_t v12 = v70;
          goto LABEL_40;
        }
      }
    }
    swift_retain();
    sub_24F777E70(v11);
LABEL_40:
    uint64_t v1 = *(uint64_t (**)(uint64_t))(v12 + 16);
    if (!v1) {
      goto LABEL_72;
    }
    int v35 = BYTE8(v77);
    swift_bridgeObjectRetain();
    uint64_t v36 = (unsigned char *)(v12 + 56);
    int v74 = v35;
    while (1)
    {
      uint64_t v37 = *((void *)v36 - 3);
      uint64_t v38 = *((void *)v36 - 2);
      int v39 = *v36;
      if (v35)
      {
        if (v35 == 1)
        {
          if (v39 != 1) {
            goto LABEL_63;
          }
          char v40 = BYTE8(v76);
          sub_24F773930(&v75);
          uint64_t v41 = sub_24F77BBD0();
          if (v2(v41) == v37 && v38 == v42) {
            goto LABEL_65;
          }
          sub_24F770E8C();
          sub_24F77DA00();
          uint64_t v44 = sub_24F781338();
          unsigned __int8 v47 = 1;
        }
        else
        {
          if (v39 != 2) {
            goto LABEL_63;
          }
          char v40 = BYTE8(v76);
          sub_24F773930(&v75);
          swift_bridgeObjectRetain();
          uint64_t v51 = sub_24F77BBD0();
          if (v2(v51) == v37 && v38 == v52) {
            goto LABEL_65;
          }
          sub_24F770E8C();
          sub_24F77DA00();
          uint64_t v44 = sub_24F781338();
          unsigned __int8 v47 = 2;
        }
      }
      else
      {
        if (*v36) {
          goto LABEL_63;
        }
        char v40 = BYTE8(v76);
        sub_24F773930(&v75);
        uint64_t v48 = sub_24F77BBD0();
        if (v2(v48) == v37 && v38 == v49)
        {
LABEL_65:
          swift_bridgeObjectRelease();
          uint64_t v54 = sub_24F781338();
          sub_24F7A203C(v54, v55, v56, v74);
LABEL_66:
          swift_bridgeObjectRelease();
          sub_24F7A2D38((uint64_t)&v75);
          sub_24F77835C(v71);
          uint64_t v8 = v67;
          unint64_t v9 = v72;
LABEL_73:
          ++v9;
          uint64_t result = swift_release();
          if (v9 == v69)
          {
LABEL_74:
            swift_bridgeObjectRelease();
            uint64_t result = _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v78);
            unint64_t v6 = v65;
            unint64_t v5 = v66;
            goto LABEL_3;
          }
          goto LABEL_11;
        }
        sub_24F770E8C();
        sub_24F77DA00();
        uint64_t v44 = sub_24F781338();
        unsigned __int8 v47 = 0;
      }
      sub_24F7A203C(v44, v45, v46, v47);
      int v35 = v74;
      if (v40) {
        goto LABEL_66;
      }
LABEL_63:
      v36 += 32;
      uint64_t v1 = (uint64_t (*)(uint64_t))((char *)v1 - 1);
      if (!v1)
      {
        swift_bridgeObjectRelease();
        uint64_t v8 = v67;
        unint64_t v9 = v72;
        uint64_t v11 = v71;
        goto LABEL_72;
      }
    }
  }
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
  return result;
}

uint64_t sub_24F784904(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24F781274(&qword_26B1F7BA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_24F78496C()
{
  sub_24F77ED98();
  swift_retain();
  sub_24F784A8C();
  swift_release();
  swift_unownedRetainStrong();
  char v1 = sub_24F77D2E8();
  swift_release();
  if (v1) {
    goto LABEL_11;
  }
  sub_24F77C600();
  unint64_t v2 = *(void *)(v0 + 40);
  if (!(v2 >> 62))
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v3) {
      goto LABEL_4;
    }
LABEL_10:
    swift_bridgeObjectRelease();
LABEL_11:
    sub_24F784AD4();
    sub_24F782DB4();
    return;
  }
  sub_24F780B5C();
  uint64_t v3 = sub_24F8CF9E0();
  if (!v3) {
    goto LABEL_10;
  }
LABEL_4:
  if (v3 >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      if ((v2 & 0xC000000000000001) != 0) {
        MEMORY[0x253364060](v4, v2);
      }
      else {
        swift_retain();
      }
      ++v4;
      swift_unownedRetainStrong();
      sub_24F7A074C();
      swift_release();
      swift_release();
    }
    while (v3 != v4);
    goto LABEL_10;
  }
  __break(1u);
}

uint64_t sub_24F784A8C()
{
  uint64_t v1 = MEMORY[0x263F8EE78];
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  swift_bridgeObjectRelease();
  *(void *)(v0 + 24) = v1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_24F784AD4()
{
  swift_beginAccess();
  unint64_t v1 = swift_bridgeObjectRetain();
  *(void *)(v0 + 40) = sub_24F784BCC(v1);
  swift_bridgeObjectRelease();
  unint64_t v2 = *(void *)(v0 + 40);
  if (!(v2 >> 62))
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v3) {
      goto LABEL_3;
    }
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t result = sub_24F8CF9E0();
  uint64_t v3 = result;
  if (!result) {
    return swift_bridgeObjectRelease();
  }
LABEL_3:
  if (v3 >= 1)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      if ((v2 & 0xC000000000000001) != 0) {
        uint64_t v6 = MEMORY[0x253364060](i, v2);
      }
      else {
        uint64_t v6 = swift_retain();
      }
      *(unsigned char *)(v6 + 17) = 0;
      swift_release();
    }
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_24F784BCC(unint64_t a1)
{
  uint64_t v7 = MEMORY[0x263F8EE78];
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        MEMORY[0x253364060](v3, a1);
LABEL_7:
        unint64_t v4 = v3 + 1;
        if (__OFADD__(v3, 1)) {
          goto LABEL_15;
        }
        if (sub_24F7A0DA0())
        {
          swift_unknownObjectRelease();
          sub_24F8CF870();
          sub_24F8CF8B0();
          sub_24F8CF8C0();
          sub_24F8CF880();
        }
        else
        {
          swift_release();
        }
        ++v3;
        if (v4 == v2)
        {
          uint64_t v5 = v7;
          goto LABEL_18;
        }
      }
      if (v3 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        break;
      }
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      uint64_t v2 = sub_24F8CF9E0();
      if (!v2) {
        goto LABEL_17;
      }
    }
    swift_retain();
    goto LABEL_7;
  }
LABEL_17:
  uint64_t v5 = MEMORY[0x263F8EE78];
LABEL_18:
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_24F784D28()
{
  return FastNullableDatabaseValueCursor._element(sqliteStatement:)();
}

uint64_t sub_24F784D50@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = static Bool.fromDatabaseValue(_:)(a1);
  *a2 = result;
  return result;
}

uint64_t static Bool.fromDatabaseValue(_:)(uint64_t a1)
{
  unsigned int v1 = (*(void *)a1 & 0x7FFFFFFFFFFFFFFFLL) != 0;
  if (*(unsigned char *)(a1 + 16) != 1) {
    unsigned int v1 = 2;
  }
  if (*(unsigned char *)(a1 + 16)) {
    return v1;
  }
  else {
    return *(void *)a1 != 0;
  }
}

uint64_t sub_24F784DA8(uint64_t a1)
{
  return sub_24F784DCC(a1, *(void (**)(char *))(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_24F784DCC(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v16 = a2;
  uint64_t v9 = *(void *)(a6 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  unint64_t v13 = (char *)&v15 - v12;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 40))(a1, a5, v9);
  if (!v6)
  {
    v16(v13);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  }
  return result;
}

uint64_t sub_24F784F1C(uint64_t a1)
{
  return sub_24F784F34(a1);
}

uint64_t sub_24F784F34(uint64_t a1)
{
  return sub_24F784F58(a1);
}

uint64_t sub_24F784F58(uint64_t a1)
{
  swift_getAssociatedTypeWitness();
  sub_24F77AD10();
  sub_24F771D60();
  MEMORY[0x270FA5388](v3);
  sub_24F785020();
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v1, a1);
  sub_24F780DA0();
  return sub_24F8CF470();
}

uint64_t sub_24F785030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned __int8 a16)
{
  sub_24F790830(a15, a12, a16);
  return Database.indexes(on:)(v16, v17);
}

uint64_t sub_24F78506C()
{
  return sub_24F76F774(v0 - 232);
}

void sub_24F785088(__n128 a1)
{
  *(void *)(v2 + 16) = v3;
  *(__n128 *)(v2 + 24 * v1 + 32) = a1;
}

uint64_t sub_24F78509C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_24F7850B8()
{
  return sub_24F781F10(v1, v0, 3);
}

char *sub_24F7850D8@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

#error "24F78524C: call analysis failed (funcsize=89)"

sqlite3_int64 sub_24F785274@<X0>(sqlite3_stmt *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  sqlite3_int64 result = sqlite3_column_int64(a1, a2);
  *(void *)a3 = result;
  *(unsigned char *)(a3 + 8) = 0;
  return result;
}

#error "24F78543C: call analysis failed (funcsize=110)"

uint64_t sub_24F78548C()
{
  return swift_allocObject();
}

void sub_24F7854DC()
{
  sub_24F787184();
}

uint64_t sub_24F785500()
{
  return v0;
}

unint64_t sub_24F78555C()
{
  return sub_24F7C007C();
}

uint64_t sub_24F78557C()
{
  return sub_24F781F34(v1, v0, 3);
}

BOOL sub_24F785598@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_24F7855B0()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_24F7855D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  return sub_24F8166D8(&a51, &a9, 0, v51);
}

uint64_t sub_24F7855FC()
{
  return v0;
}

uint64_t sub_24F785628()
{
  return v0;
}

uint64_t sub_24F785668()
{
  return v0;
}

void sub_24F785678()
{
  *(void *)(v0 - 208) = 34;
  *(void *)(v0 - 200) = 0xE100000000000000;
}

uint64_t sub_24F78568C()
{
  int v3 = *(_DWORD *)(v1 + 28);
  return sqlite3_column_type(v0, v3);
}

uint64_t sub_24F7856B4()
{
  return sub_24F7F2A24(v1, v0);
}

uint64_t sub_24F7856CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return sub_24F808CA0(a13, a14, 1);
}

uint64_t sub_24F7856EC(uint64_t a1, unint64_t a2)
{
  sub_24F781F34(a1, a2, 2);
  sub_24F781F34(v3, v2, 2);
  return sub_24F781F10(v3, v2, 2);
}

uint64_t sub_24F785730()
{
  return sub_24F825D20(v3, v2, v1, v0);
}

uint64_t sub_24F785780()
{
  return FastDatabaseValueCursor._element(sqliteStatement:)();
}

uint64_t Data.databaseValue.getter@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = a2;
  *(unsigned char *)(a3 + 16) = 3;
  return sub_24F78419C(a1, a2);
}

uint64_t sub_24F7857B8@<X0>(uint64_t a1@<X8>)
{
  return Data.databaseValue.getter(*(void *)v1, *(void *)(v1 + 8), a1);
}

uint64_t FastDatabaseValueCursor._isDone.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 24) = a1;
  return result;
}

uint64_t sub_24F785818()
{
  return v0;
}

uint64_t sub_24F785840()
{
  return sub_24F76F710((uint64_t)&STACK[0x258], (uint64_t)&STACK[0x300]);
}

uint64_t sub_24F785858()
{
  return sub_24F8CF7D0();
}

uint64_t sub_24F785878(uint64_t a1, uint64_t a2)
{
  return a2;
}

__n128 sub_24F7858A0()
{
  return v0[4];
}

uint64_t sub_24F7858C4()
{
  return v0;
}

double sub_24F7858E0()
{
  return 0.0;
}

id sub_24F7858F0@<X0>(uint64_t a1@<X8>)
{
  return [v1 (SEL)(a1 + 3181)];
}

uint64_t sub_24F785908(uint64_t a1)
{
  *(void *)(a1 + 16) = v1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_24F78592C()
{
  return sub_24F8CEEB0();
}

uint64_t sub_24F78594C(void *a1, void *a2)
{
  return sub_24F866CE8(a1, a2);
}

uint64_t sub_24F785994()
{
  *(void *)(v0 - 264) = *(void *)(v0 - 200);
  *(void *)(v0 - 248) = *(void *)(v0 - 192);
  return swift_retain();
}

uint64_t sub_24F7859BC()
{
  return swift_allocObject();
}

uint64_t sub_24F7859D4(uint64_t a1, uint64_t a2, uint64_t n, sqlite3_stmt *a4, int a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v9 = a1;
  __int16 v10 = a2;
  char v11 = BYTE2(a2);
  char v12 = BYTE3(a2);
  char v13 = BYTE4(a2);
  char v14 = BYTE5(a2);
  if (n < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  int v7 = n;
  if (n > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  int v5 = a5;
  uint64_t v6 = a4;
  if (qword_26B1F76D0 != -1) {
LABEL_7:
  }
    swift_once();
  return sqlite3_bind_blob(v6, v5, &v9, v7, (void (__cdecl *)(void *))qword_26B1FAB20);
}

uint64_t sub_24F785B14@<X0>(Swift::OpaquePointer a1@<X0>, Swift::Int32 a2@<W1>, Swift::String *a3@<X8>)
{
  Swift::String v5 = String.init(sqliteStatement:index:)(a1, a2);
  uint64_t result = v5._countAndFlagsBits;
  *a3 = v5;
  return result;
}

Swift::String __swiftcall String.init(sqliteStatement:index:)(Swift::OpaquePointer sqliteStatement, Swift::Int32 index)
{
  uint64_t v2 = (uint64_t)sqlite3_column_text((sqlite3_stmt *)sqliteStatement._rawValue, index);
  if (v2)
  {
    uint64_t v2 = sub_24F8CEEE0();
  }
  else
  {
    __break(1u);
  }
  result._object = v3;
  result._uint64_t countAndFlagsBits = v2;
  return result;
}

uint64_t sub_24F785B6C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = static Int.fromDatabaseValue(_:)(a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t static Int.fromDatabaseValue(_:)(uint64_t *a1)
{
  uint64_t result = *a1;
  int v3 = *((unsigned __int8 *)a1 + 16);
  if (v3)
  {
    if (v3 != 1 || *(double *)&result < -9.22337204e18 || *(double *)&result >= 9.22337204e18)
    {
      *(double *)&uint64_t result = COERCE_DOUBLE(sub_24F781364());
      return result;
    }
    if ((~result & 0x7FF0000000000000) != 0)
    {
      if (*(double *)&result > -9.22337204e18)
      {
        *(double *)&uint64_t result = COERCE_DOUBLE(sub_24F7806A0(*(double *)&result));
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

uint64_t DatabaseValue.databaseValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)v1;
  unint64_t v3 = *(void *)(v1 + 8);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v3;
  char v4 = *(unsigned char *)(v1 + 16);
  *(unsigned char *)(a1 + 16) = v4;
  return sub_24F781F34(v2, v3, v4);
}

uint64_t sub_24F785C1C(uint64_t a1, uint64_t a2, int a3, sqlite3_stmt *a4, int a5)
{
  LODWORD(v7) = a3;
  __int16 v10 = (char *)sub_24F8CE6A0();
  if (!v10)
  {
LABEL_4:
    BOOL v12 = __OFSUB__(a2, a1);
    uint64_t v13 = a2 - a1;
    if (v12)
    {
      __break(1u);
    }
    else
    {
      uint64_t v14 = sub_24F8CE6B0();
      if (v14 >= v13) {
        uint64_t v15 = v13;
      }
      else {
        uint64_t v15 = v14;
      }
      if (v10) {
        uint64_t v7 = v15;
      }
      else {
        uint64_t v7 = 0;
      }
      if (v7 >= (uint64_t)0xFFFFFFFF80000000)
      {
        if (v7 <= 0x7FFFFFFF)
        {
          if (qword_26B1F76D0 == -1) {
            return sqlite3_bind_blob(a4, a5, v10, v7, (void (__cdecl *)(void *))qword_26B1FAB20);
          }
LABEL_18:
          swift_once();
          return sqlite3_bind_blob(a4, a5, v10, v7, (void (__cdecl *)(void *))qword_26B1FAB20);
        }
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
    }
    __break(1u);
    goto LABEL_17;
  }
  uint64_t result = sub_24F8CE6C0();
  if (!__OFSUB__(a1, result))
  {
    v10 += a1 - result;
    goto LABEL_4;
  }
  __break(1u);
  return result;
}

void Bool.databaseValue.getter(uint64_t a1@<X8>)
{
}

void sub_24F785D20(uint64_t a1@<X8>)
{
}

uint64_t getEnumTagSinglePayload for StatementArguments(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StatementArguments(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void Row._checkIndex(_:file:line:)(uint64_t a1)
{
  if (a1 < 0 || (sub_24F785E0C(), v2 ^ v3 | v1))
  {
    sub_24F770EAC();
    sub_24F8CF9D0();
    __break(1u);
  }
}

ValueMetadata *type metadata accessor for StatementArguments()
{
  return &type metadata for StatementArguments;
}

uint64_t Row.sqliteStatement.getter()
{
  return *(void *)(v0 + 64);
}

void type metadata accessor for Database.ColumnType()
{
}

ValueMetadata *type metadata accessor for DatabaseError()
{
  return &type metadata for DatabaseError;
}

ValueMetadata *type metadata accessor for ResultCode()
{
  return &type metadata for ResultCode;
}

uint64_t destroy for DatabaseFunction.Identity()
{
  return swift_bridgeObjectRelease();
}

uint64_t dispatch thunk of _DatabaseCursor._isDone.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of DatabaseCursor.statement.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

void sub_24F785EA0(unsigned char *a1@<X8>)
{
}

ValueMetadata *type metadata accessor for SQL()
{
  return &type metadata for SQL;
}

ValueMetadata *type metadata accessor for SQLInterpolation()
{
  return &type metadata for SQLInterpolation;
}

uint64_t RowCursor.statement.getter()
{
  return swift_retain();
}

uint64_t dispatch thunk of _DatabaseCursor._isDone.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

void static Database.ColumnType.integer.getter(void *a1@<X8>)
{
}

GRDBInternal::SQL __swiftcall SQL.init(stringInterpolation:)(GRDBInternal::SQL stringInterpolation)
{
  void *v1 = *(void *)stringInterpolation.elements._rawValue;
  return stringInterpolation;
}

void static Database.ColumnType.datetime.getter(void *a1@<X8>)
{
}

void static Database.ColumnType.text.getter(void *a1@<X8>)
{
}

void static Database.ColumnType.double.getter(void *a1@<X8>)
{
}

uint64_t VirtualTableModule.makeTableDefinition(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Database.create(virtualTable:ifNotExists:using:)(Swift::String virtualTable, Swift::Bool ifNotExists, Swift::String using)
{
  uint64_t countAndFlagsBits = using._countAndFlagsBits;
  object = using._object;
  sub_24F788264();
  uint64_t v6 = v5;
  unint64_t v8 = *(void *)(v5 + 16);
  unint64_t v7 = *(void *)(v5 + 24);
  unint64_t v9 = v8 + 1;
  if (v8 >= v7 >> 1)
  {
    sub_24F770DE8(v7);
    sub_24F77D67C();
    uint64_t v6 = v27;
  }
  *(void *)(v6 + 16) = v9;
  uint64_t v10 = v6 + 16 * v8;
  *(void *)(v10 + 32) = 0xD000000000000014;
  *(void *)(v10 + 40) = 0x800000024F8D1030;
  if (ifNotExists)
  {
    unint64_t v11 = *(void *)(v6 + 24);
    if (v9 >= v11 >> 1)
    {
      sub_24F770DE8(v11);
      sub_24F77D67C();
      uint64_t v6 = v31;
    }
    *(void *)(v6 + 16) = v8 + 2;
    sub_24F77BB30(v6 + 16 * v9);
  }
  uint64_t v32 = 34;
  unint64_t v33 = 0xE100000000000000;
  sub_24F8CEEB0();
  sub_24F8CEEB0();
  unint64_t v13 = *(void *)(v6 + 16);
  unint64_t v12 = *(void *)(v6 + 24);
  int64_t v14 = v12 >> 1;
  unint64_t v15 = v13 + 1;
  if (v12 >> 1 <= v13)
  {
    sub_24F770DE8(v12);
    sub_24F77D67C();
    uint64_t v6 = v28;
    unint64_t v12 = *(void *)(v28 + 24);
    int64_t v14 = v12 >> 1;
  }
  *(void *)(v6 + 16) = v15;
  uint64_t v16 = v6 + 16 * v13;
  *(void *)(v16 + 32) = 34;
  *(void *)(v16 + 40) = 0xE100000000000000;
  if (v14 < (uint64_t)(v13 + 2))
  {
    sub_24F770DE8(v12);
    sub_24F77D67C();
    uint64_t v6 = v29;
  }
  uint64_t v17 = MEMORY[0x263F8EE78];
  *(void *)(v6 + 16) = v13 + 2;
  sub_24F76B7F4(v6 + 16 * v15);
  unint64_t v18 = *(void *)(v6 + 16);
  unint64_t v19 = *(void *)(v6 + 24);
  swift_bridgeObjectRetain();
  if (v18 >= v19 >> 1)
  {
    sub_24F77D67C();
    uint64_t v6 = v30;
  }
  uint64_t v20 = countAndFlagsBits;
  *(void *)(v6 + 16) = v18 + 1;
  uint64_t v21 = v6 + 16 * v18;
  *(void *)(v21 + 32) = v20;
  *(void *)(v21 + 40) = object;
  sub_24F781274(&qword_26B1F7F48);
  sub_24F7871AC();
  uint64_t v22 = sub_24F8CED30();
  uint64_t v24 = v23;
  swift_bridgeObjectRelease();
  uint64_t v32 = v17;
  unint64_t v33 = MEMORY[0x263F8EE80];
  v25.values._rawValue = &v32;
  v26._uint64_t countAndFlagsBits = v22;
  v26._object = v24;
  Database.execute(sql:arguments:)(v26, v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t Database.create<A>(virtualTable:ifNotExists:using:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, void (*a5)(char *), uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v76 = a2;
  uint64_t v72 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v16 = (char *)&v69 - v15;
  LOBYTE(v77) = a3;
  uint64_t v17 = *(void (**)(uint64_t *, uint64_t, uint64_t))(a8 + 32);
  uint64_t v73 = a7;
  uint64_t v74 = a4;
  uint64_t v18 = a7;
  uint64_t v19 = a8;
  v17(&v77, v18, a8);
  if (a5)
  {
    swift_retain();
    a5(v16);
    if (v8)
    {
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, AssociatedTypeWitness);
      return sub_24F787238((uint64_t)a5);
    }
    sub_24F787238((uint64_t)a5);
  }
  sub_24F788264();
  uint64_t v22 = v21;
  unint64_t v24 = *(void *)(v21 + 16);
  unint64_t v23 = *(void *)(v21 + 24);
  unint64_t v25 = v24 + 1;
  if (v24 >= v23 >> 1)
  {
    sub_24F770DE8(v23);
    sub_24F77BF18();
    uint64_t v22 = v63;
  }
  *(void *)(v22 + 16) = v25;
  unint64_t v26 = v22 + 16 * v24;
  *(void *)(v26 + 32) = 0xD000000000000014;
  *(void *)(v26 + 40) = 0x800000024F8D1030;
  uint64_t v71 = v14;
  if (a3)
  {
    unint64_t v27 = *(void *)(v22 + 24);
    unint64_t v28 = v24 + 2;
    if (v25 >= v27 >> 1)
    {
      sub_24F770DE8(v27);
      sub_24F77BF18();
      uint64_t v22 = v66;
    }
    *(void *)(v22 + 16) = v28;
    sub_24F77BB30(v22 + 16 * v25);
  }
  uint64_t v77 = 34;
  unint64_t v78 = 0xE100000000000000;
  sub_24F8CEEB0();
  sub_24F8CEEB0();
  uint64_t v29 = v77;
  unint64_t v30 = v78;
  unint64_t v32 = *(void *)(v22 + 16);
  unint64_t v31 = *(void *)(v22 + 24);
  int64_t v33 = v31 >> 1;
  unint64_t v34 = v32 + 1;
  if (v31 >> 1 <= v32)
  {
    sub_24F770DE8(v31);
    sub_24F77BF18();
    uint64_t v22 = v64;
    unint64_t v31 = *(void *)(v64 + 24);
    int64_t v33 = v31 >> 1;
  }
  *(void *)(v22 + 16) = v34;
  unint64_t v35 = v22 + 16 * v32;
  *(void *)(v35 + 32) = v29;
  *(void *)(v35 + 40) = v30;
  if (v33 < (uint64_t)(v32 + 2))
  {
    sub_24F770DE8(v31);
    sub_24F77BF18();
    uint64_t v22 = v65;
  }
  uint64_t v36 = v71;
  *(void *)(v22 + 16) = v32 + 2;
  sub_24F76B7F4(v22 + 16 * v34);
  uint64_t v37 = (*(uint64_t (**)(char *))(v19 + 40))(v16);
  if (v8)
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v16, AssociatedTypeWitness);
  }
  else
  {
    uint64_t v38 = v37;
    if (*(void *)(v37 + 16))
    {
      uint64_t v39 = sub_24F781C60();
      uint64_t v77 = v40(v39);
      unint64_t v78 = v41;
      swift_bridgeObjectRetain();
      sub_24F8CEEB0();
      swift_bridgeObjectRelease();
      unint64_t v42 = v78;
      uint64_t v70 = v77;
      uint64_t v77 = v38;
      sub_24F781274(&qword_26B1F7F48);
      sub_24F7871AC();
      sub_24F8CED30();
      swift_bridgeObjectRelease();
      uint64_t v77 = v70;
      unint64_t v78 = v42;
      swift_bridgeObjectRetain();
      sub_24F8CEEB0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_24F8CEEB0();
      swift_bridgeObjectRelease();
      uint64_t v44 = v77;
      unint64_t v43 = v78;
      unint64_t v46 = *(void *)(v22 + 16);
      unint64_t v45 = *(void *)(v22 + 24);
      if (v46 >= v45 >> 1)
      {
        sub_24F770DE8(v45);
        sub_24F77BF18();
        uint64_t v22 = v67;
      }
      uint64_t v47 = v72;
      *(void *)(v22 + 16) = v46 + 1;
      unint64_t v48 = v22 + 16 * v46;
      *(void *)(v48 + 32) = v44;
      unint64_t v49 = v48 + 32;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v50 = sub_24F781C60();
      uint64_t v52 = v51(v50);
      unint64_t v43 = v53;
      unint64_t v55 = *(void *)(v22 + 16);
      unint64_t v54 = *(void *)(v22 + 24);
      uint64_t v47 = v72;
      if (v55 >= v54 >> 1)
      {
        sub_24F770DE8(v54);
        sub_24F77BF18();
        uint64_t v22 = v68;
      }
      *(void *)(v22 + 16) = v55 + 1;
      unint64_t v56 = v22 + 16 * v55;
      *(void *)(v56 + 32) = v52;
      unint64_t v49 = v56 + 32;
    }
    *(void *)(v49 + 8) = v43;
    uint64_t v77 = v22;
    sub_24F781274(&qword_26B1F7F48);
    sub_24F7871AC();
    uint64_t v57 = sub_24F8CED30();
    uint64_t v59 = v58;
    uint64_t v60 = swift_bridgeObjectRelease();
    MEMORY[0x270FA5388](v60);
    *(&v69 - 10) = v73;
    *(&v69 - 9) = v19;
    uint64_t v61 = v74;
    *(&v69 - 8) = v75;
    *(&v69 - 7) = v57;
    *(&v69 - 6) = v59;
    *(&v69 - 5) = v61;
    uint64_t v62 = v76;
    *(&v69 - 4) = v47;
    *(&v69 - 3) = v62;
    *(&v69 - 2) = (uint64_t)v16;
    Database.inSavepoint(_:)(sub_24F787200);
    (*(void (**)(char *, uint64_t))(v71 + 8))(v16, AssociatedTypeWitness);
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_24F7868F4(uint64_t a1, Swift::String sql, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  object = sql._object;
  v17[0] = MEMORY[0x263F8EE78];
  v17[1] = MEMORY[0x263F8EE80];
  sql._object = v17;
  uint64_t countAndFlagsBits = sql._countAndFlagsBits;
  sql._uint64_t countAndFlagsBits = (uint64_t)object;
  Database.execute(sql:arguments:)(*(Swift::String *)((char *)&sql - 8), *(GRDBInternal::StatementArguments *)&sql._object);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v15) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a8 + 48))(a1, a4, a5, a6, a7);
  }
  return 0;
}

BOOL sub_24F7869D0(uint64_t *a1, uint64_t *a2)
{
  return sub_24F7DA254(*a1, *a2);
}

void sub_24F7869DC(uint64_t a1@<X8>)
{
  sub_24F786A10();
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3 & 1;
}

uint64_t sub_24F786A18@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = nullsub_1(*v1);
  *a1 = result;
  return result;
}

uint64_t sub_24F786A44()
{
  return sub_24F7666CC((uint64_t)&unk_26B1F7C88, MEMORY[0x263F8D310], (uint64_t)sub_24F8B4E84, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_24F788264);
}

uint64_t sub_24F786A80()
{
  return sub_24F7666CC((uint64_t)&unk_26B1F7230, (uint64_t)&unk_26B1F7258, (uint64_t)sub_24F780F10, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_24F7885D4);
}

uint64_t sub_24F786ABC(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  uint64_t *v1 = v3;
  if (!result)
  {
    uint64_t result = a1(result, *(void *)(v3 + 16) + 1, 1, v3);
    uint64_t *v1 = result;
  }
  return result;
}

uint64_t sub_24F786B18()
{
  return sub_24F7666CC((uint64_t)&qword_26B1F7358, (uint64_t)&type metadata for SQLExpression, (uint64_t)sub_24F8BED68, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_24F787940);
}

uint64_t sub_24F786B54()
{
  return sub_24F786ABC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24F7877E8);
}

uint64_t sub_24F786B6C()
{
  return sub_24F7666CC((uint64_t)&unk_26B1F58B0, (uint64_t)&unk_26B1F5998, (uint64_t)sub_24F780F10, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_24F7885D4);
}

uint64_t sub_24F786BA8()
{
  return sub_24F7666CC((uint64_t)&unk_269A2A3A8, MEMORY[0x263F8D980], (uint64_t)sub_24F8B4FC0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_24F787FA0);
}

uint64_t sub_24F786BE4()
{
  return sub_24F7666CC((uint64_t)&unk_26B1F7AF8, (uint64_t)&type metadata for DatabaseEventKind, (uint64_t)sub_24F8B4FC0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_24F787FA0);
}

uint64_t sub_24F786C20()
{
  return sub_24F786ABC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24F788054);
}

uint64_t sub_24F786C38()
{
  return sub_24F7666CC((uint64_t)&unk_269A2A0C8, (uint64_t)&qword_269A2A1A0, (uint64_t)sub_24F8BED64, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_24F7885D4);
}

uint64_t sub_24F786C74()
{
  return sub_24F7666CC((uint64_t)&unk_26B1F7630, (uint64_t)&type metadata for Migration, (uint64_t)sub_24F8B4FE0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_24F7884DC);
}

uint64_t sub_24F786CB0()
{
  return sub_24F7666CC((uint64_t)&unk_26B1F6F28, (uint64_t)&type metadata for TableDefinition.ColumnItem, (uint64_t)sub_24F8B4E84, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_24F788264);
}

uint64_t sub_24F786CEC()
{
  return sub_24F786ABC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24F788318);
}

uint64_t sub_24F786D04()
{
  return sub_24F7666CC((uint64_t)&unk_26B1F5368, (uint64_t)&type metadata for TableDefinition.ForeignKeyConstraint, (uint64_t)sub_24F8BED70, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_24F7884DC);
}

uint64_t sub_24F786D40()
{
  return sub_24F7666CC((uint64_t)&unk_269A2A3D8, (uint64_t)&type metadata for SQL, (uint64_t)sub_24F8BED84, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_24F788428);
}

uint64_t sub_24F786D7C()
{
  return sub_24F7666CC((uint64_t)&unk_269A2A1E8, (uint64_t)&type metadata for TableAlteration.TableAlterationKind, (uint64_t)sub_24F8B5070, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_24F7884DC);
}

uint64_t sub_24F786DB8()
{
  return sub_24F7666CC((uint64_t)&unk_26B1F52B8, (uint64_t)&type metadata for ColumnDefinition.ForeignKeyConstraint, (uint64_t)sub_24F8BED70, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_24F7884DC);
}

void sub_24F786DF4()
{
}

void sub_24F786E30()
{
}

void sub_24F786E6C()
{
}

void sub_24F786EA8()
{
  sub_24F785464();
  if (!(v4 ^ v5 | v3)) {
    *uint64_t v0 = v1(v2 > 1);
  }
}

void sub_24F786EE4()
{
}

void sub_24F786EFC()
{
}

void sub_24F786F38()
{
}

void sub_24F786F74()
{
}

void sub_24F786FB0()
{
}

void sub_24F786FC8()
{
}

void sub_24F787004()
{
}

void sub_24F787040()
{
}

void sub_24F78707C()
{
}

void sub_24F787094()
{
}

void sub_24F7870D0()
{
}

void sub_24F78710C()
{
}

void sub_24F787148()
{
}

void sub_24F787184()
{
}

unint64_t sub_24F7871AC()
{
  unint64_t result = qword_26B1F7EB0;
  if (!qword_26B1F7EB0)
  {
    sub_24F7688B8(&qword_26B1F7F48);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B1F7EB0);
  }
  return result;
}

uint64_t sub_24F787200()
{
  return sub_24F7868F4(*(void *)(v0 + 32), *(Swift::String *)(v0 + 40), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_24F787238(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t dispatch thunk of VirtualTableModule.moduleName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of VirtualTableModule.makeTableDefinition()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of VirtualTableModule.makeTableDefinition(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of VirtualTableModule.moduleArguments(for:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of VirtualTableModule.database(_:didCreate:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 48))();
}

unsigned char *initializeBufferWithCopyOfBuffer for VirtualTableConfiguration(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for VirtualTableConfiguration(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for VirtualTableConfiguration(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24F787448);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VirtualTableConfiguration()
{
  return &type metadata for VirtualTableConfiguration;
}

uint64_t initializeBufferWithCopyOfBuffer for CaseInsensitiveIdentifier(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 sub_24F7874B4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_24F7874C8(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_24F7874E8(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 48) = v3;
  return result;
}

void type metadata accessor for sqlite3_snapshot(uint64_t a1)
{
}

__n128 initializeWithTake for Row.Prefetch(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t sub_24F787548(uint64_t *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 24))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      uint64_t v3 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_24F78759C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

void type metadata accessor for fts5_tokenizer(uint64_t a1)
{
}

__n128 sub_24F787604(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t sub_24F787618(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 20)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_24F787638(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 20) = v3;
  return result;
}

void type metadata accessor for Decimal(uint64_t a1)
{
}

void type metadata accessor for ComparisonResult(uint64_t a1)
{
}

void sub_24F78768C(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

void sub_24F7876D4()
{
  sub_24F77B438();
  if (v4)
  {
    sub_24F7737D0();
    if (v5 != v6)
    {
      sub_24F77C5C4();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_24F77E574();
    }
  }
  sub_24F775F94();
  if (v3)
  {
    sub_24F781274(&qword_26B1F5550);
    BOOL v7 = (void *)sub_24F77C5D0();
    j__malloc_size(v7);
    sub_24F775A84();
    uint64_t v7[2] = v2;
    v7[3] = v8;
  }
  if (v1)
  {
    unint64_t v9 = (char *)sub_24F780B38();
    sub_24F8B4ECC(v9, v10, v11);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    sub_24F781274(&qword_26B1F5508);
    sub_24F7771E4();
  }
  swift_bridgeObjectRelease();
}

void sub_24F787798()
{
}

void sub_24F7877C0()
{
}

void sub_24F7877E8()
{
  sub_24F77B438();
  if (v3)
  {
    sub_24F7737D0();
    if (v4 != v5)
    {
      sub_24F77C5C4();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_24F77E574();
    }
  }
  sub_24F775F94();
  if (v2)
  {
    sub_24F781274(&qword_269A2A3C8);
    char v6 = (void *)sub_24F7829BC();
    sub_24F7737E0(v6);
  }
  if (v1)
  {
    BOOL v7 = (char *)sub_24F780B38();
    sub_24F8B4EA4(v7, v8, v9);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    sub_24F781274(&qword_269A2A3D0);
    sub_24F7771E4();
  }
  swift_bridgeObjectRelease();
}

void sub_24F7878A0()
{
}

void sub_24F7878C8()
{
}

void sub_24F7878F0()
{
}

void sub_24F787918()
{
}

void sub_24F787940()
{
  sub_24F777204();
  sub_24F77BB1C();
  if (v4)
  {
    sub_24F7737D0();
    if (v5 != v6)
    {
      sub_24F77C5C4();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_24F77E574();
    }
  }
  sub_24F77ECFC();
  if (v3)
  {
    sub_24F781274(v7);
    uint64_t v8 = (void *)sub_24F77B7EC();
    sub_24F77E584(v8);
  }
  sub_24F77CD7C();
  if (v2)
  {
    uint64_t v11 = sub_24F77B808(v9, v10);
    v1(v11);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    sub_24F7812B8();
  }
  swift_bridgeObjectRelease();
  sub_24F773598();
}

void sub_24F7879E8(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_24F787A08()
{
}

void sub_24F787A30()
{
  sub_24F77B438();
  if (v3)
  {
    sub_24F7737D0();
    if (v4 != v5)
    {
      sub_24F77C5C4();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_24F77E574();
    }
  }
  sub_24F775F94();
  if (v2)
  {
    sub_24F781274(&qword_26B1F77D8);
    char v6 = (void *)sub_24F7829BC();
    sub_24F7737E0(v6);
  }
  sub_24F7886C4();
  if (v1)
  {
    uint64_t v9 = (char *)sub_24F7886B8(v7, v8);
    sub_24F8B4F98(v9, v10, v11);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    sub_24F7775C0();
  }
  swift_bridgeObjectRelease();
}

void sub_24F787AE0()
{
  sub_24F77B438();
  if (v4)
  {
    sub_24F7737D0();
    if (v5 != v6)
    {
      sub_24F77C5C4();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_24F77E574();
    }
  }
  sub_24F775F94();
  if (v3)
  {
    sub_24F781274(&qword_26B1F58A8);
    uint64_t v7 = (void *)sub_24F77C5D0();
    j__malloc_size(v7);
    sub_24F785804();
    uint64_t v7[2] = v2;
    v7[3] = v8;
  }
  if (v1)
  {
    uint64_t v9 = (char *)sub_24F780B38();
    sub_24F8BED7C(v9, v10, v11);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    sub_24F781274(&qword_26B1F5940);
    sub_24F7771E4();
  }
  swift_bridgeObjectRelease();
}

void sub_24F787BA4()
{
}

void sub_24F787BCC()
{
}

void sub_24F787BF4()
{
  sub_24F77B438();
  if (v3)
  {
    sub_24F7737D0();
    if (v4 != v5)
    {
      sub_24F77C5C4();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_24F77E574();
    }
  }
  sub_24F775F94();
  if (v2)
  {
    sub_24F781274(&qword_26B1F5658);
    char v6 = (void *)sub_24F7829BC();
    sub_24F7737E0(v6);
  }
  sub_24F7886C4();
  if (v1)
  {
    uint64_t v9 = (char *)sub_24F7886B8(v7, v8);
    sub_24F8B5008(v9, v10, v11);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    sub_24F7775C0();
  }
  swift_bridgeObjectRelease();
}

void sub_24F787CA4(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_24F787CC4()
{
  sub_24F77B438();
  if (v3)
  {
    sub_24F7737D0();
    if (v4 != v5)
    {
      sub_24F77C5C4();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_24F77E574();
    }
  }
  sub_24F775F94();
  if (v2)
  {
    sub_24F781274(qword_26B1F51A8);
    char v6 = (void *)sub_24F7829BC();
    sub_24F7737E0(v6);
  }
  sub_24F7886C4();
  if (v1)
  {
    uint64_t v9 = (char *)sub_24F7886B8(v7, v8);
    sub_24F8B5028(v9, v10, v11);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    sub_24F7775C0();
  }
  swift_bridgeObjectRelease();
}

void sub_24F787D74()
{
  sub_24F77B438();
  if (v4)
  {
    sub_24F7737D0();
    if (v5 != v6)
    {
      sub_24F77C5C4();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_24F77E574();
    }
  }
  sub_24F775F94();
  if (v3)
  {
    sub_24F781274(&qword_269A2A3B0);
    uint64_t v8 = (void *)sub_24F77C5D0();
    j__malloc_size(v8);
    sub_24F773584();
    v8[2] = v2;
    v8[3] = v9;
  }
  else
  {
    uint64_t v8 = (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v10 = (const void *)(v0 + 32);
  if (v1)
  {
    uint64_t v11 = (char *)sub_24F7886B8(v7, (uint64_t)v10);
    sub_24F8B4E84(v11, v12, v13);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    memcpy(v8 + 4, v10, 16 * v2);
  }
  swift_bridgeObjectRelease();
}

void sub_24F787E30()
{
}

void sub_24F787E58()
{
}

void sub_24F787E80(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_24F787EA0(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(uint64_t, uint64_t, void *))
{
  if (a3)
  {
    sub_24F7737D0();
    if (v10 != v11)
    {
      sub_24F77C5C4();
      if (v10)
      {
        __break(1u);
        return;
      }
      sub_24F77E574();
    }
  }
  else
  {
    uint64_t v9 = a2;
  }
  uint64_t v12 = *(void *)(a4 + 16);
  if (v9 <= v12) {
    uint64_t v13 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v13 = v9;
  }
  if (v13)
  {
    sub_24F781274(a5);
    uint64_t v14 = (void *)sub_24F77C5D0();
    j__malloc_size(v14);
    sub_24F775A84();
    void v14[2] = v12;
    v14[3] = v15;
  }
  else
  {
    uint64_t v14 = (void *)MEMORY[0x263F8EE78];
  }
  if (a1)
  {
    a6(a4 + 32, v12, v14 + 4);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    memcpy(v14 + 4, (const void *)(a4 + 32), 8 * v12);
  }
  swift_bridgeObjectRelease();
}

void sub_24F787F78()
{
}

void sub_24F787FA0()
{
  sub_24F77BB1C();
  if (v5)
  {
    sub_24F7737D0();
    if (v6 != v7)
    {
      sub_24F77C5C4();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_24F77E574();
    }
  }
  sub_24F77ECFC();
  if (v4)
  {
    sub_24F781274(v8);
    uint64_t v9 = (void *)sub_24F77C5D0();
    j__malloc_size(v9);
    sub_24F785804();
    uint64_t v9[2] = v3;
    v9[3] = v10;
  }
  sub_24F77CD7C();
  if (v2)
  {
    uint64_t v13 = sub_24F77B808(v11, v12);
    v1(v13);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    sub_24F7812B8();
  }
  swift_bridgeObjectRelease();
}

uint64_t sub_24F788054(uint64_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_24F781274(&qword_26B1F77E0);
    uint64_t v10 = swift_allocObject();
    size_t v11 = j__malloc_size((const void *)v10);
    *(void *)(v10 + 16) = v8;
    *(void *)(v10 + 24) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    uint64_t v10 = MEMORY[0x263F8EE78];
  }
  if (v5)
  {
    sub_24F8B4E84((char *)(a4 + 32), v8, (char *)(v10 + 32));
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_24F781274(qword_26B1F7A20);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

void sub_24F788164()
{
}

void sub_24F78818C()
{
}

void sub_24F7881B4()
{
  sub_24F77B438();
  if (v3)
  {
    sub_24F7737D0();
    if (v4 != v5)
    {
      sub_24F77C5C4();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_24F77E574();
    }
  }
  sub_24F775F94();
  if (v2)
  {
    sub_24F781274(&qword_269A2A3E0);
    unint64_t v6 = (void *)sub_24F7829BC();
    sub_24F7737E0(v6);
  }
  sub_24F7886C4();
  if (v1)
  {
    uint64_t v9 = (char *)sub_24F7886B8(v7, v8);
    sub_24F8BED6C(v9, v10, v11);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    sub_24F7775C0();
  }
  swift_bridgeObjectRelease();
}

void sub_24F788264()
{
  sub_24F77BB1C();
  if (v5)
  {
    sub_24F7737D0();
    if (v6 != v7)
    {
      sub_24F77C5C4();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_24F77E574();
    }
  }
  sub_24F77ECFC();
  if (v4)
  {
    sub_24F781274(v8);
    uint64_t v9 = (void *)sub_24F77C5D0();
    j__malloc_size(v9);
    sub_24F773584();
    uint64_t v9[2] = v3;
    v9[3] = v10;
  }
  sub_24F77CD7C();
  if (v2)
  {
    uint64_t v13 = sub_24F77B808(v11, v12);
    v1(v13);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    sub_24F7812B8();
  }
  swift_bridgeObjectRelease();
}

uint64_t sub_24F788318(uint64_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_24F781274(&qword_26B1F6DE0);
    uint64_t v10 = swift_allocObject();
    size_t v11 = j__malloc_size((const void *)v10);
    *(void *)(v10 + 16) = v8;
    *(void *)(v10 + 24) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    uint64_t v10 = MEMORY[0x263F8EE78];
  }
  if (v5)
  {
    sub_24F8BED80((char *)(a4 + 32), v8, (char *)(v10 + 32));
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_24F781274(&qword_26B1F6DD8);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

void sub_24F788428()
{
  sub_24F77BB1C();
  if (v5)
  {
    sub_24F7737D0();
    if (v6 != v7)
    {
      sub_24F77C5C4();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_24F77E574();
    }
  }
  sub_24F77ECFC();
  if (v4)
  {
    sub_24F781274(v8);
    uint64_t v9 = (void *)sub_24F77C5D0();
    j__malloc_size(v9);
    sub_24F775A84();
    uint64_t v9[2] = v3;
    v9[3] = v10;
  }
  sub_24F77CD7C();
  if (v2)
  {
    uint64_t v13 = sub_24F77B808(v11, v12);
    v1(v13);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    sub_24F7812B8();
  }
  swift_bridgeObjectRelease();
}

void sub_24F7884DC()
{
  sub_24F777204();
  sub_24F77BB1C();
  if (v4)
  {
    sub_24F7737D0();
    if (v5 != v6)
    {
      sub_24F77C5C4();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_24F77E574();
    }
  }
  sub_24F77ECFC();
  if (v3)
  {
    sub_24F781274(v7);
    uint64_t v8 = (void *)sub_24F77B7EC();
    sub_24F77E584(v8);
  }
  sub_24F77CD7C();
  if (v2)
  {
    uint64_t v11 = sub_24F77B808(v9, v10);
    v1(v11);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    sub_24F7812B8();
  }
  swift_bridgeObjectRelease();
  sub_24F773598();
}

void sub_24F788584()
{
}

void sub_24F7885AC()
{
}

void sub_24F7885D4()
{
  sub_24F777204();
  sub_24F77BB1C();
  if (v6)
  {
    sub_24F7737D0();
    if (v7 != v8)
    {
      sub_24F77C5C4();
      if (v7)
      {
        __break(1u);
        return;
      }
      sub_24F77E574();
    }
  }
  sub_24F77ECFC();
  if (v5)
  {
    sub_24F781274(v9);
    uint64_t v10 = (void *)sub_24F77B7EC();
    sub_24F77E584(v10);
  }
  else
  {
    uint64_t v5 = MEMORY[0x263F8EE78];
  }
  if (v3)
  {
    v1(v0 + 32, v4, v5 + 32);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    sub_24F781274(v2);
    sub_24F78185C();
  }
  swift_bridgeObjectRelease();
  sub_24F773598();
}

void sub_24F788690()
{
}

uint64_t sub_24F7886B8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_24F7886D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return DatabaseWriter.write<A>(_:)(a1, a2, a4, a3, a5);
}

uint64_t sub_24F7886F4()
{
  return DatabaseWriter.asyncWrite<A>(_:completion:)();
}

uint64_t DatabaseWriter.asyncWrite<A>(_:completion:)()
{
  sub_24F76B80C();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v14 = (void *)swift_allocObject();
  void v14[2] = v5;
  v14[3] = v3;
  v14[4] = v1;
  uint64_t v14[5] = v13;
  v14[6] = v11;
  v14[7] = v9;
  v14[8] = v7;
  uint64_t v15 = *(void (**)(uint64_t (*)(uint64_t), void *, uint64_t, uint64_t))(v1 + 56);
  swift_retain();
  swift_retain();
  v15(sub_24F788B5C, v14, v5, v1);
  sub_24F77344C();
  return swift_release();
}

uint64_t sub_24F7887CC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, char *), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v27 = a8;
  uint64_t v28 = a5;
  uint64_t v29 = a4;
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  sub_24F7688B8(&qword_26B1F7040);
  uint64_t v11 = sub_24F8CFF90();
  uint64_t v24 = *(void *)(v11 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v24 - v13;
  uint64_t v15 = sub_24F8CF610();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v24 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v24 - v20;
  sub_24F7771BC((uint64_t)&v24 - v20, 1, 1, a7);
  char v37 = 3;
  uint64_t v30 = a6;
  uint64_t v31 = a7;
  uint64_t v32 = v27;
  int64_t v33 = v21;
  uint64_t v34 = v25;
  uint64_t v35 = v26;
  uint64_t v36 = a1;
  Database.inTransaction(_:_:)(&v37, sub_24F7729D4);
  uint64_t v22 = v29;
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v19, v21, v15);
  uint64_t result = sub_24F777048((uint64_t)v19, 1, a7);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(a7 - 8) + 32))(v14, v19, a7);
    swift_storeEnumTagMultiPayload();
    v22(a1, v14);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v14, v11);
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v21, v15);
  }
  return result;
}

uint64_t sub_24F788B1C()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24F788B5C(uint64_t a1)
{
  return sub_24F7887CC(a1, *(void *)(v1 + 40), *(void *)(v1 + 48), *(void (**)(uint64_t, char *))(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t DatabaseWriter.add(transactionObserver:extent:)()
{
  sub_24F78187C();
  return v0();
}

uint64_t sub_24F788BD8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  unsigned __int8 v9 = a4;
  uint64_t ObjectType = swift_getObjectType();
  return sub_24F7A1D18(a2, &v9, a1, ObjectType, a3);
}

uint64_t sub_24F788C3C(uint64_t a1)
{
  return sub_24F788BD8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned char *)(v1 + 32));
}

uint64_t DatabaseWriter.remove(transactionObserver:)()
{
  sub_24F77D694();
  sub_24F78187C();
  return v0();
}

uint64_t sub_24F788CB4()
{
  return sub_24F7A18CC();
}

uint64_t sub_24F788D08()
{
  return sub_24F788CB4();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DatabaseWriter.erase()()
{
  (*(void (**)(uint64_t (*)(), void, uint64_t))(v0 + 32))(sub_24F788D78, 0, MEMORY[0x263F8EE60] + 8);
}

uint64_t sub_24F788D78()
{
  return sub_24F8A1F94();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DatabaseWriter.vacuum()()
{
  sub_24F78187C();
  v0();
}

uint64_t sub_24F788DEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_24F78A088(a1, a2, a3, a4);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DatabaseWriter.vacuum(into:)(Swift::String into)
{
  sub_24F77D694();
  sub_24F78187C();
  v1();
}

uint64_t sub_24F788E50(uint64_t a1)
{
  return sub_24F78A34C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void sub_24F788E6C()
{
  sub_24F76B80C();
  uint64_t v1 = v0;
  MEMORY[0x270FA5388](v0);
  memcpy(v9, v1, sizeof(v9));
  unint64_t v2 = v1[11];
  uint64_t v3 = (void (*)(unint64_t))v1[12];
  type metadata accessor for ValueWriteOnlyObserver();
  swift_unknownObjectRetain();
  swift_retain();
  unint64_t v4 = sub_24F78C430(v2);
  v3(v4);
  uint64_t v5 = v9[2];
  uint64_t v6 = v9[4];
  uint64_t v7 = v9[6];
  uint64_t v8 = v9[8];
  sub_24F78C440(v9[0]);
  sub_24F78C440(v5);
  sub_24F78C440(v6);
  sub_24F78C440(v7);
  sub_24F78C440(v8);
  swift_retain();
  sub_24F832504();
  sub_24F83258C();
  swift_release();
  sub_24F77344C();
}

uint64_t DatabaseWriter.write<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[7] = a6;
  v7[8] = v6;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  uint64_t v7[2] = a1;
  return sub_24F773820((uint64_t)sub_24F789024);
}

uint64_t sub_24F789024()
{
  sub_24F77ACEC();
  uint64_t v0 = swift_task_alloc();
  sub_24F782D30(v0);
  uint64_t v1 = sub_24F77BB70();
  unint64_t v2 = (void *)sub_24F78C8EC(v1);
  *unint64_t v2 = v3;
  v2[1] = sub_24F7890D0;
  sub_24F770E28();
  return v4();
}

uint64_t sub_24F7890D0()
{
  sub_24F77ACEC();
  sub_24F773808();
  uint64_t v3 = v2;
  sub_24F77ED0C();
  *unint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_24F77ED0C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_24F777218();
    return MEMORY[0x270FA2498](v7, v8, v9);
  }
  else
  {
    swift_task_dealloc();
    sub_24F78029C();
    return v10();
  }
}

uint64_t sub_24F7891D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = a5;
  v13[3] = a6;
  v13[4] = a7;
  v13[5] = a1;
  (*(void (**)(uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t), void *, uint64_t, uint64_t, uint64_t))(a7 + 48))(a3, a4, sub_24F78C884, v13, a6, a5, a7);
  return swift_release();
}

uint64_t sub_24F78929C(uint64_t a1)
{
  return sub_24F789A84(a1, sub_24F7891D4);
}

uint64_t sub_24F7892B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = sub_24F781274(&qword_26B1F7040);
  return sub_24F789318(a2, a3, a5, v8);
}

uint64_t sub_24F789318(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v21 = a2;
  uint64_t v7 = *(void *)(a3 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_24F8CFF90();
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v20 - v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))((char *)&v20 - v16, a1, v15);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v17, a4);
    return sub_24F887970((uint64_t)v14, v21);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v17, a3);
    return sub_24F8878FC((uint64_t)v10, v21);
  }
}

uint64_t sub_24F789564()
{
  sub_24F77ACEC();
  v0[11] = v1;
  v0[12] = v2;
  v0[10] = v3;
  if (v4)
  {
    swift_getObjectType();
    uint64_t v5 = sub_24F8CF200();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  return MEMORY[0x270FA2498](sub_24F7895F4, v5, v7);
}

uint64_t sub_24F7895F4()
{
  sub_24F77B814();
  uint64_t v1 = (void (*)(uint64_t))v0[11];
  uint64_t v2 = v0[10];
  v0[2] = v0;
  v0[7] = v2;
  v0[3] = sub_24F789698;
  uint64_t v3 = swift_continuation_init();
  v1(v3);
  return MEMORY[0x270FA23F0](v0 + 2);
}

uint64_t sub_24F789698()
{
  sub_24F77B814();
  sub_24F773808();
  uint64_t v1 = *v0;
  sub_24F77ED0C();
  *uint64_t v2 = v1;
  if (*(void *)(v3 + 48)) {
    swift_willThrow();
  }
  uint64_t v4 = *(uint64_t (**)(void))(v1 + 8);
  return v4();
}

uint64_t DatabaseWriter.writeWithoutTransaction<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[7] = a6;
  v7[8] = v6;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  uint64_t v7[2] = a1;
  return sub_24F773820((uint64_t)sub_24F789798);
}

uint64_t sub_24F789798()
{
  sub_24F77ACEC();
  uint64_t v0 = swift_task_alloc();
  sub_24F782D30(v0);
  uint64_t v1 = sub_24F77BB70();
  uint64_t v2 = (void *)sub_24F78C8EC(v1);
  *uint64_t v2 = v3;
  v2[1] = sub_24F789844;
  sub_24F770E28();
  return v4();
}

uint64_t sub_24F789844()
{
  sub_24F77ACEC();
  sub_24F773808();
  uint64_t v3 = v2;
  sub_24F77ED0C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_24F77ED0C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_24F777218();
    return MEMORY[0x270FA2498](v7, v8, v9);
  }
  else
  {
    swift_task_dealloc();
    sub_24F78029C();
    return v10();
  }
}

uint64_t sub_24F789948()
{
  sub_24F77ACEC();
  swift_task_dealloc();
  sub_24F78029C();
  return v0();
}

uint64_t sub_24F7899A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = a5;
  v13[3] = a6;
  v13[4] = a7;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  uint64_t v14 = *(void (**)(uint64_t (*)(), void *, uint64_t, uint64_t))(a7 + 56);
  swift_retain();
  v14(sub_24F78C84C, v13, a5, a7);
  return swift_release();
}

uint64_t sub_24F789A6C(uint64_t a1)
{
  return sub_24F789A84(a1, sub_24F7899A4);
}

uint64_t sub_24F789A84(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void))
{
  return a2(a1, v2[5], v2[6], v2[7], v2[2], v2[3], v2[4]);
}

uint64_t DatabaseWriter.barrierWriteWithoutTransaction<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[7] = a6;
  v7[8] = v6;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  uint64_t v7[2] = a1;
  return sub_24F773820((uint64_t)sub_24F789AC0);
}

uint64_t sub_24F789AC0()
{
  sub_24F77ACEC();
  uint64_t v0 = swift_task_alloc();
  sub_24F782D30(v0);
  uint64_t v1 = sub_24F77BB70();
  uint64_t v2 = (void *)sub_24F78C8EC(v1);
  *uint64_t v2 = v3;
  v2[1] = sub_24F7890D0;
  sub_24F770E28();
  return v4();
}

uint64_t sub_24F789B6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = a5;
  v13[3] = a6;
  v13[4] = a7;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  uint64_t v14 = *(void (**)(uint64_t (*)(), void *, uint64_t, uint64_t))(a7 + 40);
  swift_retain();
  v14(sub_24F78C84C, v13, a5, a7);
  return swift_release();
}

uint64_t sub_24F789C34(uint64_t a1)
{
  return sub_24F789A84(a1, sub_24F789B6C);
}

uint64_t sub_24F789C4C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = MEMORY[0x270FA5388](a1);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6(v3);
  sub_24F781274(&qword_26B1F7040);
  return sub_24F8878FC((uint64_t)v5, a2);
}

uint64_t DatabaseWriter.erase()()
{
  sub_24F77B814();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_24F789DF0;
  sub_24F785478();
  return DatabaseWriter.writeWithoutTransaction<A>(_:)(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_24F789DF0()
{
  sub_24F77ACEC();
  sub_24F773808();
  sub_24F77ED0C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_24F77ED0C();
  *uint64_t v5 = v4;
  *(void *)(v6 + 24) = v0;
  swift_task_dealloc();
  sub_24F777218();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

uint64_t sub_24F789ED4()
{
  sub_24F78029C();
  return v0();
}

uint64_t DatabaseWriter.vacuum()()
{
  sub_24F77B814();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_24F789FA8;
  sub_24F785478();
  return DatabaseWriter.writeWithoutTransaction<A>(_:)(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_24F789FA8()
{
  sub_24F77ACEC();
  sub_24F773808();
  sub_24F77ED0C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_24F77ED0C();
  *uint64_t v5 = v4;
  *(void *)(v6 + 24) = v0;
  swift_task_dealloc();
  sub_24F777218();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

uint64_t sub_24F78A088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v7[0] = MEMORY[0x263F8EE78];
  v7[1] = MEMORY[0x263F8EE80];
  uint64_t v4 = v7;
  v5._uint64_t countAndFlagsBits = 0x4D5555434156;
  v5._object = (void *)0xE600000000000000;
  Database.execute(sql:arguments:)(v5, *(GRDBInternal::StatementArguments *)(&a4 - 1));
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t DatabaseWriter.vacuum(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return sub_24F773820((uint64_t)sub_24F78A11C);
}

uint64_t sub_24F78A11C()
{
  sub_24F77B814();
  uint64_t v2 = v0[2];
  uint64_t v1 = v0[3];
  uint64_t v3 = swift_allocObject();
  v0[7] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  swift_bridgeObjectRetain();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[8] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_24F78A208;
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[4];
  uint64_t v7 = MEMORY[0x263F8EE60] + 8;
  return DatabaseWriter.writeWithoutTransaction<A>(_:)((uint64_t)v4, (uint64_t)sub_24F78C8CC, v3, v6, v7, v5);
}

uint64_t sub_24F78A208()
{
  sub_24F77ACEC();
  sub_24F773808();
  uint64_t v3 = v2;
  sub_24F77ED0C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_24F77ED0C();
  *uint64_t v6 = v5;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_release();
  }
  sub_24F777218();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

uint64_t sub_24F78A2F0()
{
  sub_24F77ACEC();
  swift_release();
  sub_24F78029C();
  return v0();
}

uint64_t sub_24F78A34C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_24F781274(&qword_26B1F7AB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_24F8DDBF0;
  *(void *)(inited + 56) = MEMORY[0x263F8D310];
  *(void *)(inited + 64) = &protocol witness table for String;
  *(void *)(inited + 32) = a2;
  *(void *)(inited + 40) = a3;
  swift_bridgeObjectRetain();
  sub_24F780F38(inited, &v9);
  v6.values._rawValue = &v9;
  v7._uint64_t countAndFlagsBits = 0x49204D5555434156;
  v7._object = (void *)0xED00003F204F544ELL;
  Database.execute(sql:arguments:)(v7, v6);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24F78A430()
{
  swift_bridgeObjectRelease();
  sub_24F77FA4C();
  return swift_deallocObject();
}

void DatabaseWriter.writePublisher<A>(updates:)()
{
  sub_24F7735AC();
  sub_24F783524();
  uint64_t v0 = (void *)sub_24F8CF540();
  sub_24F78A77C();
  DatabaseWriter.writePublisher<A, B>(receiveOn:updates:)();
}

void DatabaseWriter.writePublisher<A, B>(receiveOn:updates:)()
{
  sub_24F76B80C();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v32 = v11;
  uint64_t v33 = v10;
  uint64_t v35 = v12;
  uint64_t v38 = v13;
  uint64_t v39 = v14;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_24F8CF610();
  sub_24F770DF4();
  uint64_t v36 = v16;
  uint64_t v37 = v15;
  sub_24F771D60();
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v30 - v18;
  sub_24F7688B8(&qword_26B1F7040);
  uint64_t v20 = type metadata accessor for OnDemandFuture();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v40 = v20;
  uint64_t v41 = v9;
  uint64_t v42 = WitnessTable;
  uint64_t v43 = v3;
  uint64_t v21 = type metadata accessor for ReceiveValuesOn();
  sub_24F770DF4();
  uint64_t v30 = v22;
  sub_24F771D60();
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)&v30 - v24;
  uint64_t v26 = (void *)swift_allocObject();
  v26[2] = v32;
  v26[3] = v9;
  v26[4] = v7;
  v26[5] = v5;
  v26[6] = v3;
  v26[7] = v1;
  uint64_t v27 = v35;
  v26[8] = v33;
  v26[9] = v27;
  uint64_t v40 = nullsub_1(sub_24F78A8FC);
  uint64_t v41 = v28;
  sub_24F7771BC((uint64_t)v19, 1, 1, AssociatedTypeWitness);
  sub_24F8450D8(v38, (uint64_t)v19, v20, v9, WitnessTable, (uint64_t)v25);
  uint64_t v29 = *(void (**)(char *, uint64_t))(v36 + 8);
  swift_unknownObjectRetain();
  swift_retain();
  v29(v19, v37);
  swift_release();
  swift_getWitnessTable();
  *uint64_t v39 = sub_24F8CEB90();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v25, v21);
  sub_24F77344C();
}

unint64_t sub_24F78A77C()
{
  unint64_t result = qword_269A2A428[0];
  if (!qword_269A2A428[0])
  {
    sub_24F783524();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_269A2A428);
  }
  return result;
}

uint64_t sub_24F78A7CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = a6;
  v17[3] = a7;
  void v17[4] = a8;
  v17[5] = a9;
  v17[6] = a10;
  v17[7] = a1;
  v17[8] = a2;
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t), void *, uint64_t, uint64_t, uint64_t))(a9 + 48);
  swift_retain();
  v18(a4, a5, sub_24F78C7E8, v17, a8, a6, a9);
  return swift_release();
}

uint64_t sub_24F78A8BC()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24F78A8FC(uint64_t a1, uint64_t a2)
{
  return sub_24F78A7CC(a1, a2, v2[7], v2[8], v2[9], v2[2], v2[3], v2[4], v2[5], v2[6]);
}

void DatabaseWriter.writePublisher<A, B>(updates:thenRead:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v15 = sub_24F783524();
  uint64_t v16 = (void *)sub_24F8CF540();
  unint64_t v17 = sub_24F78A77C();
  DatabaseWriter.writePublisher<A, B, C>(receiveOn:updates:thenRead:)((uint64_t)v20, a1, a2, a3, a4, a5, v15, a6, a7, a8, v17, a6, v19, (uint64_t)v16, v20[1], v20[2], v20[3], v20[4], v20[5],
    v20[6],
    v20[7],
    v20[8],
    v20[9]);
}

void DatabaseWriter.writePublisher<A, B, C>(receiveOn:updates:thenRead:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  sub_24F76B80C();
  uint64_t v25 = v24;
  uint64_t v55 = v26;
  uint64_t v59 = v27;
  uint64_t v60 = v28;
  uint64_t v30 = v29;
  v51[1] = v29;
  uint64_t v57 = v31;
  uint64_t v63 = v32;
  uint64_t v64 = v33;
  uint64_t v53 = v34;
  uint64_t v54 = a22;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_24F8CF610();
  sub_24F770DF4();
  uint64_t v61 = v36;
  uint64_t v62 = v35;
  sub_24F771D60();
  MEMORY[0x270FA5388](v37);
  uint64_t v39 = (char *)v51 - v38;
  sub_24F7688B8(&qword_26B1F7040);
  uint64_t v40 = type metadata accessor for OnDemandFuture();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v65 = v40;
  uint64_t v66 = v25;
  uint64_t v67 = WitnessTable;
  uint64_t v68 = a23;
  uint64_t v41 = type metadata accessor for ReceiveValuesOn();
  sub_24F770DF4();
  uint64_t v56 = v42;
  sub_24F771D60();
  MEMORY[0x270FA5388](v43);
  unint64_t v45 = (char *)v51 - v44;
  unint64_t v46 = (void *)swift_allocObject();
  v46[2] = v55;
  v46[3] = v25;
  v46[4] = v53;
  v46[5] = a21;
  v46[6] = v54;
  v46[7] = a23;
  uint64_t v47 = v57;
  v46[8] = v23;
  v46[9] = v47;
  uint64_t v48 = v59;
  v46[10] = v30;
  v46[11] = v48;
  v46[12] = v60;
  uint64_t v65 = nullsub_1(sub_24F78ADF0);
  uint64_t v66 = v49;
  sub_24F7771BC((uint64_t)v39, 1, 1, AssociatedTypeWitness);
  sub_24F8450D8(v63, (uint64_t)v39, v40, v25, WitnessTable, (uint64_t)v45);
  uint64_t v50 = *(void (**)(char *, uint64_t))(v61 + 8);
  swift_unknownObjectRetain();
  swift_retain();
  swift_retain();
  v50(v39, v62);
  swift_release();
  swift_getWitnessTable();
  *uint64_t v64 = sub_24F8CEB90();
  (*(void (**)(char *, uint64_t))(v56 + 8))(v45, v41);
  sub_24F77344C();
}

uint64_t sub_24F78AC8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a8;
  *(_OWORD *)(v18 + 24) = a9;
  *(void *)(v18 + 40) = a10;
  *(void *)(v18 + 48) = a11;
  *(void *)(v18 + 56) = a12;
  *(void *)(v18 + 64) = a4;
  *(void *)(v18 + 72) = a5;
  *(void *)(v18 + 80) = a1;
  *(void *)(v18 + 88) = a2;
  *(void *)(v18 + 96) = a3;
  *(void *)(v18 + 104) = a6;
  *(void *)(v18 + 112) = a7;
  uint64_t v19 = *(void (**)(uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(a11 + 56);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  v19(sub_24F78C64C, v18, a8, a11);
  return swift_release();
}

uint64_t sub_24F78ADA8()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24F78ADF0()
{
  sub_24F77B444();
  return sub_24F78AC8C(v0, v1, v2, v3, v4, v5, v6, v7, v9, v10, v11, v12);
}

uint64_t sub_24F78AE18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_24F7688B8(&qword_26B1F7040);
  uint64_t v14 = sub_24F8CFF90();
  MEMORY[0x270FA5388](v14);
  sub_24F8CF610();
  uint64_t v21 = swift_allocBox();
  sub_24F7771BC(v15, 1, 1, a11);
  v24[0] = 3;
  Database.inTransaction(_:_:)(v24, sub_24F78C68C);
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = a9;
  v16[3] = a10;
  v16[4] = a11;
  uint64_t v16[5] = a12;
  v16[6] = a13;
  v16[7] = a14;
  v16[8] = a4;
  v16[9] = a5;
  v16[10] = a7;
  v16[11] = a8;
  v16[12] = v21;
  unint64_t v17 = *(void (**)(uint64_t (*)(), void *, uint64_t, uint64_t))(a13 + 80);
  swift_retain();
  swift_retain();
  swift_retain();
  v17(sub_24F78C70C, v16, a9, a13);
  swift_release();
  return swift_release();
}

uint64_t sub_24F78B0D4(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = sub_24F8CF610();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v17 - v14;
  a2(a4);
  if (!v7)
  {
    sub_24F7771BC((uint64_t)v15, 0, 1, a7);
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 40))(a1, v15, v12);
  }
  return 0;
}

uint64_t sub_24F78B1FC(uint64_t a1, char a2, void (*a3)(char *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v22 = a8;
  uint64_t v23 = a5;
  uint64_t v24 = a6;
  uint64_t v25 = a4;
  uint64_t v26 = a3;
  uint64_t v21 = a13;
  sub_24F7688B8(&qword_26B1F7040);
  uint64_t v15 = sub_24F8CFF90();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v21 - v17;
  sub_24F8CF610();
  uint64_t v35 = swift_projectBox();
  uint64_t v36 = a1;
  char v37 = a2 & 1;
  uint64_t v27 = v22;
  uint64_t v28 = a9;
  uint64_t v29 = a10;
  uint64_t v30 = a11;
  uint64_t v31 = a12;
  uint64_t v32 = v21;
  uint64_t v33 = v23;
  uint64_t v34 = v24;
  uint64_t v19 = sub_24F781274(&qword_269A2A530);
  sub_24F887A00((void (*)(uint64_t))sub_24F78C738, v19, (uint64_t)v18);
  v26(v18);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
}

uint64_t sub_24F78B398@<X0>(uint64_t a1@<X8>)
{
  return sub_24F839C64((void (*)(uint64_t))sub_24F78C770, a1);
}

uint64_t sub_24F78B41C(void (*a1)(uint64_t, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  uint64_t v15 = sub_24F8CF610();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)v21 - v17;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a4, v15);
  uint64_t result = sub_24F777048((uint64_t)v18, 1, a7);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v20 = v21[5];
    a1(a3, v18);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(*(void *)(a7 - 8) + 8))(v18, a7);
    if (v20) {
      *a11 = v20;
    }
  }
  return result;
}

uint64_t DatabasePublishers.Write.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *v4;
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v10 = sub_24F781274(&qword_26B1F7040);
  return MEMORY[0x270EE3B58](a1, v8, v9, v10, a3, a4);
}

uint64_t sub_24F78B614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return DatabasePublishers.Write.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t sub_24F78B628()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t sub_24F78B630(uint64_t result)
{
  *(unsigned char *)(v1 + 16) = result;
  return result;
}

uint64_t sub_24F78B638(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 0;
  *(void *)(result + 24) = a1;
  *(void *)(result + 32) = a2;
  return result;
}

uint64_t sub_24F78B67C(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  sub_24F78B6BC(a1);
  return v2;
}

uint64_t *sub_24F78B6BC(uint64_t a1)
{
  uint64_t v2 = *v1;
  *((unsigned char *)v1 + 16) = 0;
  v1[3] = (uint64_t)sub_24F78B6F4(a1, *(void *)(v2 + 80));
  v1[4] = v3;
  return v1;
}

uint64_t (*sub_24F78B6F4(uint64_t a1, uint64_t a2))@<X0>(uint64_t a1@<X8>)
{
  sub_24F7688B8(&qword_26B1F7040);
  uint64_t v4 = sub_24F8CFF90();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))(v7 + v6, a1, v4);
  return sub_24F78C564;
}

uint64_t sub_24F78B7F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_24F7688B8(&qword_26B1F7040);
  uint64_t v4 = sub_24F8CFF90();
  MEMORY[0x270FA5388](v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v8 - v5, a1, v4);
  return sub_24F882548(v4, (uint64_t)&v9, a2);
}

uint64_t sub_24F78B8FC()
{
  if (*(unsigned char *)(v0 + 16))
  {
    uint64_t result = sub_24F8CF9D0();
    __break(1u);
  }
  else
  {
    *(unsigned char *)(v0 + 16) = 1;
    return (*(uint64_t (**)(void))(v0 + 24))();
  }
  return result;
}

uint64_t DatabaseFuture.deinit()
{
  swift_release();
  return v0;
}

uint64_t DatabaseFuture.__deallocating_deinit()
{
  DatabaseFuture.deinit();
  return MEMORY[0x270FA0228](v0, 40, 7);
}

uint64_t AnyDatabaseWriter.__allocating_init(_:)(uint64_t a1, uint64_t a2)
{
  sub_24F77FA4C();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t AnyDatabaseWriter.init(_:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return v2;
}

uint64_t AnyDatabaseWriter.configuration.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t))(*(void *)(v1 + 8) + 8))(ObjectType);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AnyDatabaseWriter.close()()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t))(*(void *)(v1 + 8) + 16))(ObjectType);
}

Swift::Void __swiftcall AnyDatabaseWriter.interrupt()()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t))(*(void *)(v1 + 8) + 24))(ObjectType);
}

uint64_t AnyDatabaseWriter.read<A>(_:)()
{
  sub_24F77DC60();
  sub_24F77BF30();
  uint64_t v0 = sub_24F77ACCC();
  return v1(v0);
}

uint64_t AnyDatabaseWriter.asyncRead(_:)()
{
  sub_24F78C8FC();
  uint64_t v0 = sub_24F7775D8();
  return v1(v0);
}

uint64_t AnyDatabaseWriter.unsafeRead<A>(_:)()
{
  sub_24F77DC60();
  sub_24F77BF30();
  uint64_t v0 = sub_24F77ACCC();
  return v1(v0);
}

uint64_t AnyDatabaseWriter.asyncUnsafeRead(_:)()
{
  sub_24F78C8FC();
  uint64_t v0 = sub_24F7775D8();
  return v1(v0);
}

uint64_t AnyDatabaseWriter.unsafeReentrantRead<A>(_:)()
{
  sub_24F77DC60();
  sub_24F77BF30();
  uint64_t v0 = sub_24F77ACCC();
  return v1(v0);
}

uint64_t AnyDatabaseWriter.concurrentRead<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(v3 + 24);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 72))(a1, a2, a3, ObjectType, v7);
}

uint64_t AnyDatabaseWriter.spawnConcurrentRead(_:)()
{
  sub_24F775A98();
  uint64_t v0 = sub_24F77BB58();
  return v1(v0);
}

uint64_t AnyDatabaseWriter.write<A>(_:)()
{
  uint64_t v4 = sub_24F77DC60();
  return DatabaseWriter.write<A>(_:)(v3, v2, v4, v1, v0);
}

uint64_t AnyDatabaseWriter.writeWithoutTransaction<A>(_:)()
{
  sub_24F77DC8C();
  uint64_t v0 = sub_24F77382C();
  return v1(v0);
}

uint64_t AnyDatabaseWriter.barrierWriteWithoutTransaction<A>(_:)()
{
  sub_24F77DC8C();
  uint64_t v0 = sub_24F77382C();
  return v1(v0);
}

uint64_t AnyDatabaseWriter.asyncBarrierWriteWithoutTransaction(_:)()
{
  sub_24F775A98();
  uint64_t v0 = sub_24F77BB58();
  return v1(v0);
}

uint64_t AnyDatabaseWriter.asyncWrite<A>(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = *(void *)(v5 + 24);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 48))(a1, a2, a3, a4, a5, ObjectType, v11);
}

uint64_t AnyDatabaseWriter.asyncWriteWithoutTransaction(_:)()
{
  sub_24F775A98();
  uint64_t v0 = sub_24F77BB58();
  return v1(v0);
}

uint64_t AnyDatabaseWriter.unsafeReentrantWrite<A>(_:)()
{
  sub_24F77DC8C();
  uint64_t v0 = sub_24F77382C();
  return v1(v0);
}

uint64_t AnyDatabaseWriter._add<A>(observation:scheduling:onChange:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_24F7735AC();
  long long v20 = v10[1];
  long long v21 = *v10;
  long long v18 = v10[3];
  long long v19 = v10[2];
  uint64_t v12 = *((void *)v10 + 8);
  uint64_t v11 = *((void *)v10 + 9);
  char v13 = *((unsigned char *)v10 + 80);
  uint64_t v14 = *((void *)v10 + 11);
  uint64_t v15 = *(void *)(v6 + 24);
  uint64_t ObjectType = swift_getObjectType();
  v25[0] = v21;
  v25[1] = v20;
  v25[2] = v19;
  v25[3] = v18;
  uint64_t v26 = v12;
  uint64_t v27 = v11;
  char v28 = v13;
  uint64_t v29 = v14;
  long long v30 = *(_OWORD *)(v9 + 96);
  return (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 8) + 72))(v25, v8, v7, a4, a5, a6, ObjectType);
}

uint64_t AnyDatabaseWriter.deinit()
{
  swift_unknownObjectRelease();
  return v0;
}

uint64_t AnyDatabaseWriter.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  uint64_t v0 = sub_24F77FA4C();
  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t sub_24F78C0D0()
{
  return MEMORY[0x263F8E4E0];
}

uint64_t sub_24F78C0DC()
{
  return AnyDatabaseWriter.write<A>(_:)();
}

uint64_t sub_24F78C0F4()
{
  return AnyDatabaseWriter.writeWithoutTransaction<A>(_:)();
}

uint64_t sub_24F78C10C()
{
  return AnyDatabaseWriter.barrierWriteWithoutTransaction<A>(_:)();
}

uint64_t sub_24F78C130()
{
  return AnyDatabaseWriter.unsafeReentrantWrite<A>(_:)();
}

void sub_24F78C154()
{
}

uint64_t sub_24F78C170()
{
  return AnyDatabaseWriter.read<A>(_:)();
}

uint64_t sub_24F78C18C()
{
  return AnyDatabaseWriter.unsafeRead<A>(_:)();
}

uint64_t sub_24F78C1A8()
{
  return AnyDatabaseWriter.unsafeReentrantRead<A>(_:)();
}

uint64_t dispatch thunk of DatabaseWriter.write<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of DatabaseWriter.writeWithoutTransaction<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t dispatch thunk of DatabaseWriter.barrierWriteWithoutTransaction<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t dispatch thunk of DatabaseWriter.asyncBarrierWriteWithoutTransaction(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of DatabaseWriter.asyncWrite<A>(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 48))();
}

uint64_t dispatch thunk of DatabaseWriter.asyncWriteWithoutTransaction(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t dispatch thunk of DatabaseWriter.unsafeReentrantWrite<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 64))();
}

uint64_t dispatch thunk of DatabaseWriter.concurrentRead<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 72))();
}

uint64_t dispatch thunk of DatabaseWriter.spawnConcurrentRead(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 80))();
}

uint64_t sub_24F78C2C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 16);
}

uint64_t type metadata accessor for DatabasePublishers.Write()
{
  return sub_24F777DE0();
}

uint64_t sub_24F78C2EC()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for DatabaseFuture()
{
  return sub_24F777DE0();
}

uint64_t method lookup function for DatabaseFuture(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for DatabaseFuture);
}

uint64_t dispatch thunk of DatabaseFuture.wait()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t type metadata accessor for AnyDatabaseWriter()
{
  return self;
}

uint64_t method lookup function for AnyDatabaseWriter(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AnyDatabaseWriter);
}

uint64_t dispatch thunk of AnyDatabaseWriter.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t sub_24F78C3F4()
{
  sub_24F773850();
  return DatabaseWriter.write<A>(_:)(v0, v1, v4, v2, v3);
}

uint64_t sub_24F78C418()
{
  return DatabaseWriter.asyncWrite<A>(_:completion:)();
}

unint64_t sub_24F78C430(unint64_t result)
{
  if (result >= 2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_24F78C440(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_24F78C450()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_24F7688B8(&qword_26B1F7040);
  uint64_t v2 = *(void *)(sub_24F8CFF90() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  if (swift_getEnumCaseMultiPayload() == 1) {

  }
  else {
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + v3, v1);
  }
  return swift_deallocObject();
}

uint64_t sub_24F78C564@<X0>(uint64_t a1@<X8>)
{
  sub_24F7688B8(&qword_26B1F7040);
  uint64_t v3 = *(void *)(sub_24F8CFF90() - 8);
  return sub_24F78B7F0(v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), a1);
}

uint64_t sub_24F78C5FC()
{
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24F78C64C(uint64_t a1)
{
  return sub_24F78AE18(a1, v1[8], v1[9], v1[10], v1[11], v1[12], v1[13], v1[14], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t sub_24F78C68C()
{
  return sub_24F78B0D4(*(void *)(v0 + 64), *(void (**)(uint64_t))(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_24F78C6C4()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24F78C70C()
{
  sub_24F77B444();
  return sub_24F78B1FC(v0, v1, v2, v3, v4, v5, v6, v7, v9, v10, v11, v12, v13);
}

uint64_t sub_24F78C738@<X0>(uint64_t a1@<X8>)
{
  return sub_24F78B398(a1);
}

uint64_t sub_24F78C770(void *a1)
{
  return sub_24F78B41C(*(void (**)(uint64_t, char *))(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 80), *(void *)(v1 + 88), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), a1);
}

uint64_t sub_24F78C7B0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24F78C7E8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(v2 + 56))(a2);
}

uint64_t sub_24F78C814()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24F78C850(uint64_t a1)
{
  return sub_24F789C4C(a1, *(void *)(v1 + 40));
}

uint64_t sub_24F78C874()
{
  return swift_deallocObject();
}

uint64_t sub_24F78C884(uint64_t a1, uint64_t a2)
{
  return sub_24F7892B4(a1, a2, v2[5], v2[2], v2[3]);
}

uint64_t sub_24F78C894()
{
  return sub_24F788D78();
}

uint64_t sub_24F78C8AC()
{
  return sub_24F78C3F4();
}

uint64_t sub_24F78C8CC(uint64_t a1)
{
  return sub_24F788E50(a1);
}

uint64_t sub_24F78C8EC(uint64_t result)
{
  *(void *)(v1 + 80) = result;
  return result;
}

uint64_t sub_24F78C8FC()
{
  return swift_getObjectType();
}

uint64_t Record.__allocating_init()()
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  return result;
}

uint64_t Record.init()()
{
  uint64_t result = v0;
  *(void *)(v0 + 16) = 0;
  return result;
}

uint64_t Record.__allocating_init(row:)(void *a1)
{
  uint64_t v2 = swift_allocObject();
  Record.init(row:)(a1);
  return v2;
}

uint64_t Record.init(row:)(void *a1)
{
  uint64_t v2 = v1;
  *(void *)(v1 + 16) = 0;
  uint64_t v4 = a1 + 2;
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  sub_24F7811D0(a1 + 2, v5);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16))(v5, v6))
  {
    uint64_t v7 = a1[5];
    uint64_t v8 = a1[6];
    sub_24F7811D0(v4, v7);
    uint64_t v9 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 112))(a1, v7, v8);
    swift_release();
    *(void *)(v2 + 16) = v9;
  }
  swift_release();
  return v2;
}

void sub_24F78CA58()
{
}

void sub_24F78CAB4(_WORD *a1@<X8>)
{
  *a1 = 257;
}

double sub_24F78CAC0()
{
  sub_24F781274(&qword_26B1F7600);
  uint64_t v0 = swift_allocObject();
  *(void *)&double result = 1;
  *(_OWORD *)(v0 + 16) = xmmword_24F8DDBF0;
  *(void *)(v0 + 56) = &type metadata for AllColumns;
  *(void *)(v0 + 64) = &protocol witness table for AllColumns;
  return result;
}

uint64_t sub_24F78CB10()
{
  uint64_t v1 = *v0;
  type metadata accessor for Row();
  uint64_t v6 = v0;
  swift_retain();
  uint64_t v2 = sub_24F7BD6C0((uint64_t)&v6, v1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(v1 + 96))(v2);
  uint64_t v4 = swift_retain();
  sub_24F78D2A4(v4);
  return v3;
}

uint64_t sub_24F78CBC0(uint64_t a1)
{
  sub_24F781274(&qword_26B1F7AC0);
  uint64_t v4 = MEMORY[0x263F8EE78];
  uint64_t v5 = sub_24F8CEC70();
  (*(void (**)(uint64_t *))(*(void *)a1 + 128))(&v4);
  swift_bridgeObjectRelease();
  sub_24F78ED30(v5);
  swift_bridgeObjectRelease();
  type metadata accessor for Row();
  swift_allocObject();
  uint64_t v2 = sub_24F79036C();
  swift_release();
  return v2;
}

BOOL sub_24F78CCA4()
{
  sub_24F78CE38();
  sub_24F8CFA20();
  swift_release();
  if (v2) {
    sub_24F78D2B4(v1, v2, v3, v4, v5);
  }
  return v2 != 0;
}

uint64_t sub_24F78CD04(char a1)
{
  if (a1)
  {
    uint64_t v1 = 0;
  }
  else
  {
    uint64_t v2 = swift_retain();
    uint64_t v1 = sub_24F78CBC0(v2);
  }
  return sub_24F78D2A4(v1);
}

uint64_t (*sub_24F78CD40(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = sub_24F78CCA4();
  return sub_24F78CD8C;
}

uint64_t sub_24F78CD8C(uint64_t a1)
{
  return sub_24F78CD04(*(unsigned char *)(a1 + 8));
}

uint64_t sub_24F78CDB4()
{
  sub_24F78CE38();
  uint64_t v2 = MEMORY[0x263F8EE80];
  uint64_t v0 = swift_retain();
  sub_24F78FFE4(v0, 1, &v2);
  swift_release();
  return v2;
}

uint64_t sub_24F78CE38()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = swift_allocObject();
  swift_retain();
  swift_retain();
  sub_24F781274(&qword_26B1F7AC0);
  *(void *)&long long v6 = MEMORY[0x263F8EE78];
  *((void *)&v6 + 1) = sub_24F8CEC70();
  sub_24F77DCB8();
  (*(void (**)(long long *))(v3 + 128))(&v6);
  swift_release();
  *(_OWORD *)(v2 + 16) = v6;
  *(void *)(v2 + 32) = 0;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v2;
  *(void *)(v4 + 24) = v1;
  sub_24F781274(&qword_269A2A550);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = sub_24F79099C;
  *(void *)(result + 24) = v4;
  return result;
}

uint64_t sub_24F78CF44@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  while (1)
  {
    swift_beginAccess();
    unint64_t v5 = a1[4];
    uint64_t v6 = a1[2];
    unint64_t v7 = *(void *)(v6 + 16);
    if (v5 == v7)
    {
      uint64_t v32 = 0;
      memset(v31, 0, sizeof(v31));
      long long v30 = 0u;
      goto LABEL_8;
    }
    if (v5 >= v7) {
      break;
    }
    uint64_t v8 = a1[3];
    if (!*(void *)(v8 + 16)) {
      goto LABEL_22;
    }
    uint64_t v9 = v6 + 16 * v5;
    uint64_t v11 = *(void *)(v9 + 32);
    uint64_t v10 = *(void *)(v9 + 40);
    swift_bridgeObjectRetain_n();
    unint64_t v12 = sub_24F782950();
    if ((v13 & 1) == 0) {
      goto LABEL_23;
    }
    sub_24F79089C(*(void *)(v8 + 56) + 40 * v12, (uint64_t)v29);
    swift_bridgeObjectRelease();
    v28[0] = v11;
    v28[1] = v10;
    *(void *)&long long v30 = v11;
    *((void *)&v30 + 1) = v10;
    sub_24F79089C((uint64_t)v29, (uint64_t)v31);
    swift_bridgeObjectRetain();
    sub_24F7783C0((uint64_t)v28, &qword_26B1F5598);
    uint64_t v14 = a1[4];
    BOOL v15 = __OFADD__(v14, 1);
    uint64_t v16 = v14 + 1;
    if (v15) {
      goto LABEL_24;
    }
    a1[4] = v16;
LABEL_8:
    swift_endAccess();
    if (!*((void *)&v30 + 1))
    {
      uint64_t result = sub_24F7783C0((uint64_t)&v30, &qword_26B1F55A0);
      *(unsigned char *)(a3 + 32) = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      return result;
    }
    long long v33 = v30;
    sub_24F7909A4((uint64_t)v31, (uint64_t)v34);
    long long v17 = v33;
    sub_24F7909A4((uint64_t)v34, (uint64_t)v37);
    sub_24F79089C((uint64_t)v37, (uint64_t)&v33);
    uint64_t v18 = v35;
    if (v35)
    {
      uint64_t v19 = v36;
      sub_24F7811D0(&v33, v35);
      (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v19 + 24))(&v30, v18, v19);
      unint64_t v21 = *((void *)&v30 + 1);
      uint64_t v20 = v30;
      char v22 = v31[0];
      _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&v33);
      if (!a2) {
        goto LABEL_17;
      }
    }
    else
    {
      sub_24F7783C0((uint64_t)&v33, &qword_26B1F7AC0);
      uint64_t v20 = 0;
      unint64_t v21 = 0;
      char v22 = 4;
      if (!a2)
      {
LABEL_17:
        sub_24F7783C0((uint64_t)v37, &qword_26B1F7AC0);
LABEL_19:
        uint64_t result = sub_24F781F10(v20, v21, v22);
        *(_OWORD *)a3 = v17;
        *(void *)(a3 + 16) = 0;
        *(void *)(a3 + 24) = 0;
        *(unsigned char *)(a3 + 32) = -1;
        return result;
      }
    }
    swift_retain();
    sub_24F78FF30(v17, *((uint64_t *)&v17 + 1), (uint64_t)&v33);
    char v23 = v34[0];
    if (v34[0] == 255)
    {
      sub_24F7783C0((uint64_t)v37, &qword_26B1F7AC0);
      swift_release();
      goto LABEL_19;
    }
    long long v24 = v33;
    *(void *)&long long v33 = v20;
    *((void *)&v33 + 1) = v21;
    v34[0] = v22;
    long long v30 = v24;
    LOBYTE(v31[0]) = v23;
    char v27 = static DatabaseValue.== infix(_:_:)((uint64_t)&v33, (uint64_t)&v30);
    swift_release();
    sub_24F7783C0((uint64_t)v37, &qword_26B1F7AC0);
    uint64_t result = sub_24F781F10(v20, v21, v22);
    if ((v27 & 1) == 0)
    {
      *(_OWORD *)a3 = v17;
      *(_OWORD *)(a3 + 16) = v24;
      *(unsigned char *)(a3 + 32) = v23;
      return result;
    }
    swift_bridgeObjectRelease();
    sub_24F78D310(v24, *((unint64_t *)&v24 + 1), v23);
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_24F78D2A4(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return swift_release();
}

void sub_24F78D2B4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    sub_24F78D310(a3, a4, a5);
  }
}

uint64_t sub_24F78D310(uint64_t result, unint64_t a2, char a3)
{
  if (a3 != -1) {
    return sub_24F781F10(result, a2, a3);
  }
  return result;
}

uint64_t sub_24F78D324(uint64_t a1)
{
  (*(void (**)(void *__return_ptr))(*(void *)v1 + 112))(v14);
  uint64_t v4 = LOBYTE(v14[0]);
  sub_24F781274(&qword_269A2A538);
  swift_allocObject();
  swift_retain();
  swift_retain();
  uint64_t result = sub_24F78FB18(a1, v1);
  if (!v2)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)(result + 32);
    uint64_t v14[5] = *(void *)(result + 24);
    uint64_t v15 = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24F78D594(v4);
    v14[0] = 0;
    v14[1] = 0;
    v8.value.values._rawValue = v14;
    Statement.execute(arguments:)(v8);
    if (v9)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    else
    {
      swift_release();
      if (v4 != 3)
      {
        sqlite3_int64 v10 = Database.lastInsertedRowID.getter();
        if (*(unsigned char *)(v6 + 72))
        {
          uint64_t v11 = 0;
          uint64_t v12 = 0;
        }
        else
        {
          uint64_t v11 = *(void *)(v6 + 56);
          uint64_t v12 = *(void *)(v6 + 64);
          sub_24F7903D0(v11, v12, 0);
        }
        (*(void (**)(sqlite3_int64, uint64_t, uint64_t))(*(void *)v1 + 136))(v10, v11, v12);
        if (v12)
        {
          v14[3] = MEMORY[0x263F8E5C0];
          v14[4] = &protocol witness table for Int64;
          v14[0] = v10;
          sub_24F7BD894((uint64_t)v14);
          uint64_t v7 = v15;
        }
      }
      swift_bridgeObjectRelease();
      sub_24F78ED30(v7);
      swift_bridgeObjectRelease();
      type metadata accessor for Row();
      swift_allocObject();
      uint64_t v13 = sub_24F79036C();
      sub_24F78D2A4(v13);
      return swift_release();
    }
  }
  return result;
}

#error "24F78D658: call analysis failed (funcsize=76)"

uint64_t sub_24F78D6C4(uint64_t a1, uint64_t a2)
{
  sub_24F781274(&qword_269A2A538);
  swift_allocObject();
  swift_retain();
  swift_retain();
  uint64_t result = sub_24F78FB18(a1, v2);
  if (!v3)
  {
    (*(void (**)(void *__return_ptr))(*(void *)v2 + 112))(v12);
    if (sub_24F78D988(a2))
    {
      v12[0] = 0;
      v12[1] = 0;
      GRDBInternal::StatementArguments_optional v8 = v12;
      Statement.execute(arguments:)(*(GRDBInternal::StatementArguments_optional *)(&v7 - 1));
      if (!v9)
      {
        if (Database.changesCount.getter())
        {
          uint64_t v10 = swift_bridgeObjectRetain();
          sub_24F78ED30(v10);
          swift_bridgeObjectRelease();
          type metadata accessor for Row();
          swift_allocObject();
          uint64_t v11 = sub_24F79036C();
          sub_24F78D2A4(v11);
        }
        else
        {
          sub_24F78D88C();
          swift_willThrow();
        }
      }
      swift_release();
    }
    else
    {
      sub_24F78D88C();
      swift_willThrow();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_24F78D88C()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 64);
  int v3 = *(unsigned __int8 *)(v0 + 72);
  if (*(unsigned char *)(v0 + 72))
  {
    if (v3 == 1) {
      uint64_t v4 = *(_OWORD **)(v0 + 56);
    }
    else {
      uint64_t v4 = &unk_270104638;
    }
  }
  else
  {
    sub_24F781274((uint64_t *)&unk_26B1F7C88);
    uint64_t v4 = (_OWORD *)swift_allocObject();
    v4[1] = xmmword_24F8DDBF0;
    *((void *)v4 + 4) = v1;
    *((void *)v4 + 5) = v2;
  }
  swift_retain();
  sub_24F7903D0(v1, v2, v3);
  uint64_t v5 = sub_24F78F200((uint64_t)v4, v0);
  swift_bridgeObjectRelease();
  uint64_t v6 = sub_24F7C7D98(v5);
  uint64_t v8 = *(void *)(v0 + 40);
  uint64_t v7 = *(void *)(v0 + 48);
  sub_24F790850();
  uint64_t v9 = swift_allocError();
  *uint64_t v10 = v8;
  v10[1] = v7;
  void v10[2] = v6;
  swift_bridgeObjectRetain();
  return v9;
}

uint64_t sub_24F78D988(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = *(void *)(v1 + 56);
  uint64_t v5 = *(void *)(v1 + 64);
  int v6 = *(unsigned __int8 *)(v1 + 72);
  if (v6)
  {
    uint64_t v7 = a1;
    if (v6 == 1) {
      uint64_t v8 = (_OWORD *)v4;
    }
    else {
      uint64_t v8 = &unk_2701045D8;
    }
  }
  else
  {
    uint64_t v7 = a1;
    sub_24F781274((uint64_t *)&unk_26B1F7C88);
    uint64_t v8 = (_OWORD *)swift_allocObject();
    v8[1] = xmmword_24F8DDBF0;
    *((void *)v8 + 4) = v4;
    *((void *)v8 + 5) = v5;
  }
  swift_retain();
  sub_24F7903D0(v4, v5, v6);
  uint64_t v9 = sub_24F78F03C((uint64_t)v8, v3);
  uint64_t v10 = v2;
  uint64_t v11 = *(void *)(v9 + 16);
  if (!v11)
  {
LABEL_14:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v12 = (unsigned char *)(v9 + 48);
  while (*v12 == 4 && *((_OWORD *)v12 - 1) == 0)
  {
    v12 += 24;
    if (!--v11) {
      goto LABEL_14;
    }
  }
  uint64_t v66 = v8;
  uint64_t v67 = v3;
  uint64_t v15 = v7;
  uint64_t v16 = *(void *)(v7 + 16);
  uint64_t v17 = MEMORY[0x263F8EE78];
  if (!v16)
  {
LABEL_25:
    sub_24F78E25C(v17);
    uint64_t v14 = v67;
    uint64_t v31 = *(void *)(v67 + 24);
    uint64_t v32 = *(void *)(v31 + 16);
    if (v32)
    {
      v69[0] = MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      sub_24F77C4AC();
      uint64_t v33 = v69[0];
      uint64_t v34 = v31 + 40;
      do
      {
        uint64_t v35 = sub_24F8CED00();
        uint64_t v37 = v36;
        v69[0] = v33;
        unint64_t v38 = *(void *)(v33 + 16);
        if (v38 >= *(void *)(v33 + 24) >> 1)
        {
          sub_24F77C4AC();
          uint64_t v33 = v69[0];
        }
        v34 += 16;
        *(void *)(v33 + 16) = v38 + 1;
        uint64_t v39 = v33 + 16 * v38;
        *(void *)(v39 + 32) = v35;
        *(void *)(v39 + 40) = v37;
        --v32;
      }
      while (v32);
      swift_bridgeObjectRelease();
      uint64_t v10 = v2;
      uint64_t v14 = v67;
    }
    sub_24F824FFC();
    uint64_t v41 = v40;
    swift_bridgeObjectRelease();
    uint64_t v42 = *((void *)v66 + 2);
    uint64_t v43 = MEMORY[0x263F8EE78];
    if (v42)
    {
      v69[0] = MEMORY[0x263F8EE78];
      sub_24F77C4AC();
      uint64_t v43 = v69[0];
      uint64_t v44 = (char *)v66 + 40;
      do
      {
        uint64_t v45 = sub_24F8CED00();
        uint64_t v47 = v46;
        v69[0] = v43;
        unint64_t v48 = *(void *)(v43 + 16);
        if (v48 >= *(void *)(v43 + 24) >> 1)
        {
          sub_24F77C4AC();
          uint64_t v43 = v69[0];
        }
        v44 += 16;
        *(void *)(v43 + 16) = v48 + 1;
        uint64_t v49 = v43 + 16 * v48;
        *(void *)(v49 + 32) = v45;
        *(void *)(v49 + 40) = v47;
        --v42;
      }
      while (v42);
      uint64_t v14 = v67;
    }
    sub_24F82514C(v43, v41);
    uint64_t v51 = v50;
    swift_bridgeObjectRelease();
    uint64_t v52 = *(void *)(v14 + 48);
    uint64_t v53 = Database.columns(in:)(*(void *)(v14 + 40), v52);
    if (v10)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v54 = sub_24F81FA24(v53);
      swift_bridgeObjectRelease();
      sub_24F8206E4(v54, v51);
      uint64_t v56 = (_OWORD *)v55;
      if (*(void *)(v55 + 16))
      {
        uint64_t v57 = v66;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v57 = v66;
        swift_bridgeObjectRetain();
        uint64_t v56 = v66;
      }
      swift_retain();
      uint64_t v58 = swift_bridgeObjectRetain();
      uint64_t v59 = sub_24F78F03C(v58, v67);
      swift_bridgeObjectRelease();
      v69[2] = v52;
      v69[3] = v56;
      v69[4] = v57;
      swift_bridgeObjectRetain();
      uint64_t v60 = sub_24F824080();
      uint64_t v62 = v61;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = sub_24F772E94(v60, v62);
      swift_bridgeObjectRelease();
      sub_24F76D490();
      MEMORY[0x270FA5388](v63);
      sub_24F781274(&qword_26B1F7348);
      sub_24F7907DC();
      swift_getKeyPath();
      swift_retain();
      uint64_t v64 = sub_24F87F4C4(v59);
      swift_bridgeObjectRelease();
      swift_release();
      v69[0] = v64;
      v69[1] = MEMORY[0x263F8EE80];
      v65.values._rawValue = v69;
      Statement.setUncheckedArguments(_:)(v65);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return v14;
  }
  v69[0] = MEMORY[0x263F8EE78];
  sub_24F77C4AC();
  uint64_t result = sub_24F8265A0(v15);
  uint64_t v19 = result;
  uint64_t v21 = v20;
  char v23 = v22 & 1;
  while ((v19 & 0x8000000000000000) == 0 && v19 < 1 << *(unsigned char *)(v15 + 32))
  {
    if (((*(void *)(v15 + 56 + (((unint64_t)v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v19) & 1) == 0) {
      goto LABEL_45;
    }
    if (*(_DWORD *)(v15 + 36) != v21) {
      goto LABEL_46;
    }
    char v68 = v23;
    uint64_t v24 = sub_24F8CED00();
    uint64_t v26 = v25;
    v69[0] = v17;
    unint64_t v27 = *(void *)(v17 + 16);
    if (v27 >= *(void *)(v17 + 24) >> 1)
    {
      sub_24F77C4AC();
      uint64_t v17 = v69[0];
    }
    *(void *)(v17 + 16) = v27 + 1;
    uint64_t v28 = v17 + 16 * v27;
    *(void *)(v28 + 32) = v24;
    *(void *)(v28 + 40) = v26;
    uint64_t result = sub_24F8264B8(v19, v21, v68 & 1, v15);
    uint64_t v19 = result;
    uint64_t v21 = v29;
    char v23 = v30 & 1;
    if (!--v16)
    {
      sub_24F7705C4(result, v29, v23);
      uint64_t v10 = v2;
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
  return result;
}

BOOL Record.updateChanges(_:)(uint64_t a1)
{
  sub_24F78CDB4();
  uint64_t v2 = sub_24F78E614();
  uint64_t v3 = v2[2];
  if (v3)
  {
    sub_24F77DCB8();
    (*(void (**)(uint64_t, void *))(v4 + 224))(a1, v2);
  }
  swift_bridgeObjectRelease();
  return v3 != 0;
}

void *sub_24F78E034(uint64_t a1)
{
  sub_24F776A80();
  uint64_t v19 = sub_24F8CF300();
  uint64_t result = sub_24F8BDD6C(v20, a1);
  uint64_t v3 = v20[1];
  int64_t v4 = v20[3];
  uint64_t v5 = v21;
  int64_t v6 = (unint64_t)(v20[2] + 64) >> 6;
  if (!v21) {
    goto LABEL_3;
  }
LABEL_2:
  v5 &= v5 - 1;
  while (1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24F773864((uint64_t)v18, v11, v12, v13, v14, v15, v16, v17, v18[0], v18[1]);
    swift_bridgeObjectRelease();
    uint64_t result = (void *)swift_bridgeObjectRelease();
    if (v5) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v7 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      break;
    }
    if (v7 >= v6) {
      goto LABEL_21;
    }
    uint64_t v8 = *(void *)(v3 + 8 * v7);
    int64_t v9 = v4 + 1;
    if (!v8)
    {
      int64_t v9 = v4 + 2;
      if (v4 + 2 >= v6) {
        goto LABEL_21;
      }
      uint64_t v8 = *(void *)(v3 + 8 * v9);
      if (!v8)
      {
        int64_t v9 = v4 + 3;
        if (v4 + 3 >= v6) {
          goto LABEL_21;
        }
        uint64_t v8 = *(void *)(v3 + 8 * v9);
        if (!v8)
        {
          int64_t v9 = v4 + 4;
          if (v4 + 4 >= v6) {
            goto LABEL_21;
          }
          uint64_t v8 = *(void *)(v3 + 8 * v9);
          if (!v8)
          {
            int64_t v9 = v4 + 5;
            if (v4 + 5 >= v6) {
              goto LABEL_21;
            }
            uint64_t v8 = *(void *)(v3 + 8 * v9);
            if (!v8)
            {
              int64_t v10 = v4 + 6;
              while (v10 < v6)
              {
                uint64_t v8 = *(void *)(v3 + 8 * v10++);
                if (v8)
                {
                  int64_t v9 = v10 - 1;
                  goto LABEL_18;
                }
              }
LABEL_21:
              swift_release();
              return (void *)v19;
            }
          }
        }
      }
    }
LABEL_18:
    uint64_t v5 = (v8 - 1) & v8;
    int64_t v4 = v9;
  }
  __break(1u);
  return result;
}

uint64_t sub_24F78E1CC(uint64_t a1)
{
  uint64_t v8 = sub_24F8CF300();
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      uint64_t v5 = *(void *)(a1 + 8 * i + 32);
      sub_24F8B6860(&v7, v5);
    }
    swift_bridgeObjectRelease();
    return v8;
  }
  else
  {
    sub_24F77FA5C();
  }
  return v1;
}

uint64_t sub_24F78E25C(uint64_t a1)
{
  uint64_t v6 = sub_24F8CF300();
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      sub_24F8B6490();
      swift_bridgeObjectRelease();
      v4 += 16;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v6;
  }
  else
  {
    sub_24F77FA5C();
  }
  return v1;
}

uint64_t sub_24F78E308(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_24F776A80();
  uint64_t v15 = sub_24F8CF300();
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = a1 + 56;
    do
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_24F773864((uint64_t)&v14, v5, v6, v7, v8, v9, v10, v11, v13, v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v4 += 32;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v15;
  }
  else
  {
    sub_24F77FA5C();
  }
  return v2;
}

uint64_t sub_24F78E3CC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_24F79076C();
  uint64_t v11 = sub_24F8CF300();
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = (char *)(a1 + 48);
    do
    {
      uint64_t v5 = *((void *)v4 - 2);
      unint64_t v6 = *((void *)v4 - 1);
      char v7 = *v4;
      v4 += 24;
      sub_24F781F34(v5, v6, v7);
      sub_24F8B6BC0((uint64_t)v9, v5, v6, v7);
      sub_24F781F10(v9[0], v9[1], v10);
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v11;
  }
  else
  {
    sub_24F77FA5C();
  }
  return v2;
}

uint64_t sub_24F78E494(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_24F8CF9E0();
    sub_24F77FA5C();
  }
  type metadata accessor for Row();
  sub_24F779FA8(&qword_269A2A540, (void (*)(uint64_t))type metadata accessor for Row);
  uint64_t result = sub_24F8CF300();
  uint64_t v4 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_24F8CF9E0();
    uint64_t result = swift_bridgeObjectRelease();
    if (v5) {
      goto LABEL_5;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    return v4;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v5) {
    goto LABEL_11;
  }
LABEL_5:
  if (v5 >= 1)
  {
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        MEMORY[0x253364060](0, a1);
      }
      else {
        swift_retain();
      }
      sub_24F77E5AC();
      sub_24F8B7840(v6, v7, v8, v9, v10, v11, v12, v13, v14);
      swift_release();
    }
  }
  __break(1u);
  return result;
}

void *sub_24F78E5FC()
{
  return sub_24F78E614();
}

void *sub_24F78E614()
{
  void *(*v0)(void *__return_ptr, uint64_t);
  uint64_t v1;
  void *result;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  int64_t v6;
  int64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  void v12[4];
  uint64_t v13;

  sub_24F782D50();
  uint64_t v11 = sub_24F8CF300();
  uint64_t result = v0(v12, v1);
  uint64_t v3 = v12[1];
  uint64_t v4 = v12[3];
  uint64_t v5 = v13;
  uint64_t v6 = (unint64_t)(v12[2] + 64) >> 6;
  if (!v13) {
    goto LABEL_3;
  }
LABEL_2:
  v5 &= v5 - 1;
  while (1)
  {
    swift_bridgeObjectRetain();
    sub_24F8B6490();
    uint64_t result = (void *)swift_bridgeObjectRelease();
    if (v5) {
      goto LABEL_2;
    }
LABEL_3:
    uint64_t v7 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      break;
    }
    if (v7 >= v6) {
      goto LABEL_21;
    }
    uint64_t v8 = *(void *)(v3 + 8 * v7);
    uint64_t v9 = v4 + 1;
    if (!v8)
    {
      uint64_t v9 = v4 + 2;
      if (v4 + 2 >= v6) {
        goto LABEL_21;
      }
      uint64_t v8 = *(void *)(v3 + 8 * v9);
      if (!v8)
      {
        uint64_t v9 = v4 + 3;
        if (v4 + 3 >= v6) {
          goto LABEL_21;
        }
        uint64_t v8 = *(void *)(v3 + 8 * v9);
        if (!v8)
        {
          uint64_t v9 = v4 + 4;
          if (v4 + 4 >= v6) {
            goto LABEL_21;
          }
          uint64_t v8 = *(void *)(v3 + 8 * v9);
          if (!v8)
          {
            uint64_t v9 = v4 + 5;
            if (v4 + 5 >= v6) {
              goto LABEL_21;
            }
            uint64_t v8 = *(void *)(v3 + 8 * v9);
            if (!v8)
            {
              uint64_t v10 = v4 + 6;
              while (v10 < v6)
              {
                uint64_t v8 = *(void *)(v3 + 8 * v10++);
                if (v8)
                {
                  uint64_t v9 = v10 - 1;
                  goto LABEL_18;
                }
              }
LABEL_21:
              swift_release();
              return (void *)v11;
            }
          }
        }
      }
    }
LABEL_18:
    uint64_t v5 = (v8 - 1) & v8;
    uint64_t v4 = v9;
  }
  __break(1u);
  return result;
}

void Record.save(_:)(uint64_t a1)
{
}

void sub_24F78E7B0(uint64_t a1)
{
  uint64_t v4 = sub_24F78F504(a1);
  if (!v2)
  {
    if (v4)
    {
      sub_24F78F3E0(a1);
      swift_bridgeObjectRelease();
    }
    else
    {
      (*(void (**)(uint64_t))(*(void *)v1 + 216))(a1);
    }
  }
}

BOOL sub_24F78E9BC()
{
  BOOL v0 = sub_24F78E9F4();
  sub_24F78D2A4(0);
  return v0;
}

BOOL sub_24F78E9F4()
{
  sub_24F781274(&qword_269A2A538);
  swift_allocObject();
  swift_retain();
  uint64_t v2 = swift_retain();
  sub_24F78FB18(v2, v0);
  if (!v1)
  {
    uint64_t v4 = sub_24F78F8E8();
    swift_release();
    if (v4)
    {
      v10[0] = 0;
      v10[1] = 0;
      uint64_t v7 = v10;
      Statement.execute(arguments:)(*(GRDBInternal::StatementArguments_optional *)(&v5 - 1));
      if (v8)
      {
        swift_release();
      }
      else
      {
        uint64_t v9 = Database.changesCount.getter();
        swift_release();
        return v9 > 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t Record.deinit()
{
  swift_release();
  return v0;
}

uint64_t Record.__deallocating_deinit()
{
  swift_release();
  return MEMORY[0x270FA0228](v0, 24, 7);
}

uint64_t sub_24F78EB40@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 96))();
  *a1 = result;
  return result;
}

uint64_t sub_24F78EB78()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t sub_24F78EB8C()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t sub_24F78EBA0()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 136))();
}

uint64_t sub_24F78EBE4()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 216))();
}

void sub_24F78EC28(uint64_t a1)
{
}

uint64_t sub_24F78EC4C()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t sub_24F78EC60()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 224))();
}

uint64_t sub_24F78ECA4()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 232))() & 1;
}

uint64_t sub_24F78ECEC()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))();
}

void sub_24F78ED30(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = a1;
    uint64_t v41 = MEMORY[0x263F8EE78];
    sub_24F7954E0();
    uint64_t v3 = sub_24F770668(v2);
    if ((v5 & 1) == 0)
    {
      uint64_t v6 = v3;
      int v7 = v4;
      uint64_t v8 = v2 + 64;
      uint64_t v24 = v2;
      uint64_t v9 = v1 - 1;
      uint64_t v23 = v2 + 64;
      if ((v3 & 0x8000000000000000) == 0)
      {
        while (v6 < 1 << *(unsigned char *)(v2 + 32))
        {
          if ((*(void *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0) {
            goto LABEL_22;
          }
          if (v7 != *(_DWORD *)(v2 + 36)) {
            goto LABEL_23;
          }
          uint64_t v25 = v9;
          uint64_t v10 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v6);
          uint64_t v11 = *v10;
          uint64_t v12 = v10[1];
          sub_24F79089C(*(void *)(v2 + 56) + 40 * v6, (uint64_t)v40);
          v39[0] = v11;
          v39[1] = v12;
          *(void *)&long long v36 = v11;
          *((void *)&v36 + 1) = v12;
          sub_24F79089C((uint64_t)v40, (uint64_t)v37);
          long long v33 = v36;
          v34[0] = v37[0];
          v34[1] = v37[1];
          uint64_t v35 = v38;
          swift_bridgeObjectRetain_n();
          sub_24F7783C0((uint64_t)v39, &qword_26B1F5598);
          uint64_t v42 = *((void *)&v33 + 1);
          uint64_t v27 = v33;
          sub_24F79089C((uint64_t)v34, (uint64_t)v30);
          uint64_t v13 = v31;
          if (v31)
          {
            uint64_t v14 = v32;
            sub_24F7811D0(v30, v31);
            (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v14 + 24))(v28, v13, v14);
            uint64_t v16 = v28[0];
            uint64_t v15 = v28[1];
            char v17 = v29;
            _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v30);
          }
          else
          {
            sub_24F7783C0((uint64_t)v30, &qword_26B1F7AC0);
            uint64_t v16 = 0;
            uint64_t v15 = 0;
            char v17 = 4;
          }
          swift_bridgeObjectRetain();
          sub_24F7783C0((uint64_t)&v33, &qword_26B1F5598);
          uint64_t v18 = v41;
          int v26 = v7;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_24F7954E0();
            uint64_t v18 = v41;
          }
          unint64_t v19 = *(void *)(v18 + 16);
          if (v19 >= *(void *)(v18 + 24) >> 1)
          {
            sub_24F7954E0();
            uint64_t v18 = v41;
          }
          *(void *)(v18 + 16) = v19 + 1;
          uint64_t v20 = v18 + 40 * v19;
          uint64_t v21 = v42;
          *(void *)(v20 + 32) = v27;
          *(void *)(v20 + 40) = v21;
          *(void *)(v20 + 48) = v16;
          *(void *)(v20 + 56) = v15;
          *(unsigned char *)(v20 + 64) = v17;
          uint64_t v2 = v24;
          if (v6 >= -(-1 << *(unsigned char *)(v24 + 32))) {
            goto LABEL_24;
          }
          uint64_t v8 = v23;
          if ((*(void *)(v23 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0) {
            goto LABEL_25;
          }
          if (v26 != *(_DWORD *)(v24 + 36)) {
            goto LABEL_26;
          }
          uint64_t v22 = sub_24F8CF6F0();
          if (!v25) {
            return;
          }
          uint64_t v6 = v22;
          int v7 = *(_DWORD *)(v24 + 36);
          uint64_t v9 = v25 - 1;
          if (v22 < 0) {
            break;
          }
        }
      }
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
    }
    __break(1u);
  }
}

uint64_t sub_24F78F03C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v22 = MEMORY[0x263F8EE78];
    sub_24F781818();
    uint64_t v5 = v22;
    uint64_t v6 = a1 + 40;
    uint64_t v15 = a2;
    do
    {
      uint64_t v7 = *(void *)(a2 + 32);
      uint64_t v16 = *(void *)(a2 + 24);
      uint64_t v17 = v7;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_24F7BF460((uint64_t)v19);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v8 = v20;
      if (v20)
      {
        uint64_t v9 = v21;
        sub_24F7811D0(v19, v20);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v9 + 24))(&v16, v8, v9);
        uint64_t v8 = v16;
        uint64_t v10 = v17;
        char v11 = v18;
        _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v19);
      }
      else
      {
        sub_24F7783C0((uint64_t)v19, &qword_26B1F7AC0);
        uint64_t v10 = 0;
        char v11 = 4;
      }
      swift_bridgeObjectRelease();
      uint64_t v22 = v5;
      unint64_t v12 = *(void *)(v5 + 16);
      if (v12 >= *(void *)(v5 + 24) >> 1)
      {
        sub_24F781818();
        uint64_t v5 = v22;
      }
      v6 += 16;
      *(void *)(v5 + 16) = v12 + 1;
      uint64_t v13 = v5 + 24 * v12;
      *(void *)(v13 + 32) = v8;
      *(void *)(v13 + 40) = v10;
      *(unsigned char *)(v13 + 48) = v11;
      --v3;
      a2 = v15;
    }
    while (v3);
    swift_release();
  }
  else
  {
    swift_release();
    return MEMORY[0x263F8EE78];
  }
  return v5;
}

uint64_t sub_24F78F200(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v23 = MEMORY[0x263F8EE78];
    sub_24F7954E0();
    uint64_t v5 = v23;
    uint64_t v6 = (uint64_t *)(a1 + 40);
    uint64_t v16 = a2;
    do
    {
      uint64_t v7 = *(v6 - 1);
      uint64_t v8 = *v6;
      uint64_t v9 = *(void *)(a2 + 32);
      *(void *)&long long v18 = *(void *)(a2 + 24);
      *((void *)&v18 + 1) = v9;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_24F7BF460((uint64_t)v20);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v10 = v21;
      if (v21)
      {
        uint64_t v11 = v22;
        sub_24F7811D0(v20, v21);
        (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v11 + 24))(&v18, v10, v11);
        long long v17 = v18;
        char v12 = v19;
        _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v20);
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_24F7783C0((uint64_t)v20, &qword_26B1F7AC0);
        swift_bridgeObjectRelease();
        long long v17 = 0u;
        char v12 = 4;
      }
      uint64_t v23 = v5;
      unint64_t v13 = *(void *)(v5 + 16);
      if (v13 >= *(void *)(v5 + 24) >> 1)
      {
        sub_24F7954E0();
        uint64_t v5 = v23;
      }
      v6 += 2;
      *(void *)(v5 + 16) = v13 + 1;
      uint64_t v14 = v5 + 40 * v13;
      *(void *)(v14 + 32) = v7;
      *(void *)(v14 + 40) = v8;
      *(_OWORD *)(v14 + 48) = v17;
      *(unsigned char *)(v14 + 64) = v12;
      --v3;
      a2 = v16;
    }
    while (v3);
    swift_release();
  }
  else
  {
    swift_release();
    return MEMORY[0x263F8EE78];
  }
  return v5;
}

uint64_t sub_24F78F3E0(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)v1 + 104))();
  uint64_t v7 = Database.columns(in:)(v5, v6);
  if (!v2)
  {
    uint64_t v8 = v7;
    swift_bridgeObjectRelease();
    uint64_t v9 = sub_24F81FA24(v8);
    swift_bridgeObjectRelease();
    uint64_t v10 = sub_24F78E25C(v9);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 224))(a1, v10);
  }
  return swift_bridgeObjectRelease();
}

void *sub_24F78F504(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)v1 + 104))();
  uint64_t v6 = a1;
  Database.primaryKey(_:)(v5, v7, &v34);
  if (!v2)
  {
    swift_bridgeObjectRelease();
    uint64_t v8 = (_OWORD *)v34;
    uint64_t v9 = v35;
    int v10 = v36;
    uint64_t v11 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 104);
    swift_retain();
    uint64_t v12 = swift_retain();
    uint64_t v13 = v11(v12);
    Database.columns(in:)(v13, v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_24F787184();
    uint64_t v17 = v16;
    sub_24F781274(&qword_26B1F7AC0);
    uint64_t v18 = sub_24F8CEC60();
    uint64_t v34 = v17;
    uint64_t v35 = v18;
    (*(void (**)(uint64_t *))(*(void *)v3 + 128))(&v34);
    swift_release();
    swift_release();
    uint64_t v19 = v34;
    uint64_t v20 = v35;
    if (v10)
    {
      if (v10 == 1) {
        uint64_t v21 = v8;
      }
      else {
        uint64_t v21 = &unk_270103940;
      }
    }
    else
    {
      sub_24F781274((uint64_t *)&unk_26B1F7C88);
      uint64_t v21 = (_OWORD *)swift_allocObject();
      v21[1] = xmmword_24F8DDBF0;
      *((void *)v21 + 4) = v8;
      *((void *)v21 + 5) = v9;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v22 = sub_24F81FC88((uint64_t)v21, v19, v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v6 = sub_24F7C7D98(v22);
    uint64_t result = sub_24F8BDD6C(&v37, v6);
    int64_t v23 = v40;
    unint64_t v24 = v41;
    int64_t v25 = (unint64_t)(v39 + 64) >> 6;
    while (1)
    {
      if (v24)
      {
        unint64_t v26 = __clz(__rbit64(v24));
        v24 &= v24 - 1;
        unint64_t v27 = v26 | (v23 << 6);
      }
      else
      {
        int64_t v28 = v23 + 1;
        if (__OFADD__(v23, 1))
        {
          __break(1u);
          return result;
        }
        if (v28 >= v25) {
          goto LABEL_38;
        }
        unint64_t v29 = *(void *)(v38 + 8 * v28);
        int64_t v30 = v23 + 1;
        if (!v29)
        {
          int64_t v30 = v23 + 2;
          if (v23 + 2 >= v25) {
            goto LABEL_38;
          }
          unint64_t v29 = *(void *)(v38 + 8 * v30);
          if (!v29)
          {
            int64_t v30 = v23 + 3;
            if (v23 + 3 >= v25) {
              goto LABEL_38;
            }
            unint64_t v29 = *(void *)(v38 + 8 * v30);
            if (!v29)
            {
              int64_t v30 = v23 + 4;
              if (v23 + 4 >= v25) {
                goto LABEL_38;
              }
              unint64_t v29 = *(void *)(v38 + 8 * v30);
              if (!v29)
              {
                int64_t v30 = v23 + 5;
                if (v23 + 5 >= v25) {
                  goto LABEL_38;
                }
                unint64_t v29 = *(void *)(v38 + 8 * v30);
                if (!v29)
                {
                  int64_t v30 = v23 + 6;
                  if (v23 + 6 >= v25) {
                    goto LABEL_38;
                  }
                  unint64_t v29 = *(void *)(v38 + 8 * v30);
                  if (!v29)
                  {
                    int64_t v30 = v23 + 7;
                    if (v23 + 7 >= v25) {
                      goto LABEL_38;
                    }
                    unint64_t v29 = *(void *)(v38 + 8 * v30);
                    if (!v29)
                    {
                      int64_t v31 = v23 + 8;
                      while (v31 < v25)
                      {
                        unint64_t v29 = *(void *)(v38 + 8 * v31++);
                        if (v29)
                        {
                          int64_t v30 = v31 - 1;
                          goto LABEL_32;
                        }
                      }
LABEL_38:
                      swift_release();
                      return 0;
                    }
                  }
                }
              }
            }
          }
        }
LABEL_32:
        unint64_t v24 = (v29 - 1) & v29;
        unint64_t v27 = __clz(__rbit64(v29)) + (v30 << 6);
        int64_t v23 = v30;
      }
      uint64_t v32 = *(void *)(v37 + 56) + 24 * v27;
      if (*(unsigned char *)(v32 + 16) != 4 || *(_OWORD *)v32 != 0)
      {
        swift_bridgeObjectRetain();
        swift_release();
        return (void *)v6;
      }
    }
  }
  swift_bridgeObjectRelease();
  return (void *)v6;
}

uint64_t sub_24F78F8E8()
{
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 64);
  int v4 = *(unsigned __int8 *)(v0 + 72);
  if (*(unsigned char *)(v0 + 72))
  {
    if (v4 == 1) {
      uint64_t v5 = *(_OWORD **)(v0 + 56);
    }
    else {
      uint64_t v5 = &unk_270104548;
    }
  }
  else
  {
    sub_24F781274((uint64_t *)&unk_26B1F7C88);
    uint64_t v5 = (_OWORD *)swift_allocObject();
    v5[1] = xmmword_24F8DDBF0;
    *((void *)v5 + 4) = v2;
    *((void *)v5 + 5) = v3;
  }
  swift_retain();
  sub_24F7903D0(v2, v3, v4);
  uint64_t v6 = sub_24F78F03C((uint64_t)v5, v0);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 + 16);
  if (v8)
  {
    uint64_t v9 = (unsigned char *)(v6 + 48);
    while (*v9 == 4 && *((_OWORD *)v9 - 1) == 0)
    {
      v9 += 24;
      if (!--v8) {
        goto LABEL_14;
      }
    }
    uint64_t v11 = *(void *)(v0 + 16);
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_24F824600();
    uint64_t v14 = v13;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v15 = sub_24F772E94(v12, v14);
    if (v1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v11 = v15;
      uint64_t v16 = swift_bridgeObjectRelease();
      MEMORY[0x270FA5388](v16);
      sub_24F781274(&qword_26B1F7348);
      sub_24F7907DC();
      swift_getKeyPath();
      swift_retain();
      uint64_t v17 = sub_24F87F4C4(v7);
      swift_bridgeObjectRelease();
      swift_release();
      v20[0] = v17;
      v20[1] = MEMORY[0x263F8EE80];
      v18.values._rawValue = v20;
      Statement.setUncheckedArguments(_:)(v18);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
LABEL_14:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  return v11;
}

uint64_t sub_24F78FB18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = a1;
  uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 104);
  uint64_t v8 = swift_retain();
  uint64_t v9 = v7(v8);
  uint64_t v11 = v10;
  *(void *)(v2 + 40) = v9;
  *(void *)(v2 + 48) = v10;
  swift_bridgeObjectRetain();
  Database.primaryKey(_:)(v9, v11, &v25);
  if (v4)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_deallocPartialClassInstance();
LABEL_4:
    swift_release();
    return v5;
  }
  swift_bridgeObjectRelease();
  char v12 = v26;
  *(_OWORD *)(v2 + 56) = v25;
  *(unsigned char *)(v2 + 72) = v12;
  uint64_t v13 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 104);
  swift_retain();
  uint64_t v14 = swift_retain();
  uint64_t v15 = v13(v14);
  Database.columns(in:)(v15, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_24F787184();
  uint64_t v19 = v18;
  sub_24F781274(&qword_26B1F7AC0);
  uint64_t v20 = sub_24F8CEC60();
  *(void *)&long long v25 = v19;
  *((void *)&v25 + 1) = v20;
  (*(void (**)(long long *))(*(void *)a2 + 128))(&v25);
  swift_release();
  swift_release();
  uint64_t v21 = v25;
  *(_OWORD *)(v5 + 24) = v25;
  if (*(void *)(v21 + 16))
  {
    swift_release();
    goto LABEL_4;
  }
  *(void *)&long long v25 = 0;
  *((void *)&v25 + 1) = 0xE000000000000000;
  sub_24F8CF7D0();
  uint64_t v22 = sub_24F8D0020();
  uint64_t v24 = v23;
  swift_bridgeObjectRelease();
  *(void *)&long long v25 = v22;
  *((void *)&v25 + 1) = v24;
  sub_24F8CEEB0();
  uint64_t result = sub_24F8CF9D0();
  __break(1u);
  return result;
}

sqlite3_stmt *sub_24F78FE64@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = (sqlite3_stmt *)a1[8];
  if (!result)
  {
    uint64_t v7 = a1[5];
    uint64_t v8 = a1[6];
    sub_24F7811D0(a1 + 2, v7);
    uint64_t result = (sqlite3_stmt *)(*(void *(**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t))(v8 + 48))(&v10, a2, v7, v8);
    goto LABEL_6;
  }
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a2 <= 0x7FFFFFFF)
  {
    uint64_t result = (sqlite3_stmt *)sub_24F76B11C(result, a2, (uint64_t)&v10);
LABEL_6:
    char v9 = v11;
    *(_OWORD *)a3 = v10;
    *(unsigned char *)(a3 + 16) = v9;
    return result;
  }
  __break(1u);
  return result;
}

sqlite3_stmt *sub_24F78FF30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = v4[5];
  uint64_t v9 = v4[6];
  sub_24F7811D0(v4 + 2, v8);
  uint64_t result = (sqlite3_stmt *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 88))(a1, a2, v8, v9);
  if ((v11 & 1) == 0) {
    return sub_24F78FE64(v4, (uint64_t)result, a3);
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 16) = -1;
  return result;
}

void sub_24F78FFE4(uint64_t a1, char a2, void *a3)
{
  swift_retain();
  sub_24F8CFA20();
  uint64_t v4 = v23;
  if (!v23)
  {
    swift_release_n();
    return;
  }
  while (1)
  {
    uint64_t v5 = (void *)*a3;
    unint64_t v7 = sub_24F782950();
    uint64_t v8 = v5[2];
    BOOL v9 = (v6 & 1) == 0;
    if (__OFADD__(v8, v9))
    {
      __break(1u);
LABEL_16:
      __break(1u);
LABEL_17:
      sub_24F8CFEA0();
      __break(1u);
      goto LABEL_18;
    }
    char v10 = v6;
    if (v5[3] < v8 + v9) {
      break;
    }
    if (a2)
    {
      if (v6) {
        goto LABEL_12;
      }
    }
    else
    {
      sub_24F781274(&qword_269A2A548);
      sub_24F8CF990();
      if (v10) {
        goto LABEL_12;
      }
    }
LABEL_9:
    uint64_t v13 = (void *)*a3;
    *(void *)(*a3 + 8 * (v7 >> 6) + 64) |= 1 << v7;
    uint64_t v14 = (void *)(v13[6] + 16 * v7);
    *uint64_t v14 = v22;
    v14[1] = v4;
    uint64_t v15 = v13[7] + 24 * v7;
    *(void *)uint64_t v15 = v24;
    *(void *)(v15 + 8) = v25;
    *(unsigned char *)(v15 + 16) = v26;
    uint64_t v16 = v13[2];
    BOOL v17 = __OFADD__(v16, 1);
    uint64_t v18 = v16 + 1;
    if (v17) {
      goto LABEL_16;
    }
    v13[2] = v18;
    sub_24F8CFA20();
    uint64_t v4 = v23;
    a2 = 1;
  }
  sub_24F8B59CC();
  unint64_t v11 = sub_24F782950();
  if ((v10 & 1) != (v12 & 1)) {
    goto LABEL_17;
  }
  unint64_t v7 = v11;
  if ((v10 & 1) == 0) {
    goto LABEL_9;
  }
LABEL_12:
  uint64_t v19 = (void *)swift_allocError();
  swift_willThrow();
  id v20 = v19;
  sub_24F781274(&qword_26B1F7040);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_release();
    sub_24F78D310(v24, v25, v26);
    swift_release();
    swift_bridgeObjectRelease();

    return;
  }
LABEL_18:
  sub_24F8CF7D0();
  sub_24F8CEEB0();
  sub_24F8CF920();
  sub_24F8CEEB0();
  sub_24F8CF9D0();
  __break(1u);
}

uint64_t sub_24F7902D0()
{
  type metadata accessor for Row();
  swift_allocObject();
  return sub_24F79036C();
}

uint64_t sub_24F79031C()
{
  sub_24F782D50();
  type metadata accessor for Row();
  uint64_t v2 = swift_allocObject();
  return sub_24F7753F0(v1, v0, v2);
}

uint64_t sub_24F79036C()
{
  sub_24F782D50();
  v7[3] = &unk_2700FE790;
  v7[4] = &off_2700FE708;
  v7[0] = v2;
  sub_24F778BA8();
  sub_24F77F23C(v3, v4, v5);
  *(void *)(v0 + 72) = *(void *)(v1 + 16);
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v7);
  return v0;
}

uint64_t sub_24F7903D0(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 1u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

BOOL sub_24F7903F0@<W0>(unsigned char *a1@<X8>)
{
  BOOL result = sub_24F78CCA4();
  *a1 = result;
  return result;
}

uint64_t sub_24F790420(char *a1)
{
  return sub_24F78CD04(*a1);
}

uint64_t type metadata accessor for Record()
{
  return self;
}

uint64_t method lookup function for Record(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for Record);
}

uint64_t dispatch thunk of Record.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of Record.__allocating_init(row:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of static Record.databaseTableName.getter()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of static Record.persistenceConflictPolicy.getter()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of static Record.databaseSelection.getter()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of Record.encode(to:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of Record.didInsert(with:for:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of Record.copy()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of Record.hasDatabaseChanges.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of Record.hasDatabaseChanges.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of Record.hasDatabaseChanges.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of Record.databaseChanges.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of Record.insert(_:)()
{
  sub_24F77DCB8();
  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t dispatch thunk of Record.update(_:columns:)()
{
  sub_24F77DCB8();
  return (*(uint64_t (**)(void))(v0 + 224))();
}

uint64_t dispatch thunk of Record.delete(_:)()
{
  sub_24F77DCB8();
  return (*(uint64_t (**)(void))(v0 + 232))() & 1;
}

uint64_t sub_24F790684()
{
  sub_24F782D50();
  v9[3] = &unk_2700FFAF8;
  v9[4] = &off_2700FFA70;
  uint64_t v2 = (_OWORD *)swift_allocObject();
  v9[0] = v2;
  long long v3 = v1[1];
  v2[1] = *v1;
  v2[2] = v3;
  long long v4 = v1[3];
  v2[3] = v1[2];
  v2[4] = v4;
  sub_24F778BA8();
  sub_24F77F23C(v5, v6, v7);
  *(void *)(v0 + 72) = *(void *)(*((void *)v2 + 8) + 16);
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v9);
  return v0;
}

uint64_t sub_24F79071C()
{
  swift_release();
  _s12GRDBInternal13DatabaseEventVwxx_0(v0 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t sub_24F79076C()
{
  unint64_t result = qword_26B1F53D8;
  if (!qword_26B1F53D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B1F53D8);
  }
  return result;
}

uint64_t sub_24F7907BC()
{
  return 24;
}

__n128 sub_24F7907C8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

unint64_t sub_24F7907DC()
{
  unint64_t result = qword_26B1F72B0;
  if (!qword_26B1F72B0)
  {
    sub_24F7688B8(&qword_26B1F7348);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B1F72B0);
  }
  return result;
}

uint64_t sub_24F790830(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 1u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_24F790850()
{
  unint64_t result = qword_26B1F5588;
  if (!qword_26B1F5588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B1F5588);
  }
  return result;
}

uint64_t sub_24F79089C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24F781274(&qword_26B1F7AC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_24F790904()
{
  return sub_24F79093C(MEMORY[0x263F8EEA0]);
}

uint64_t sub_24F790920()
{
  return sub_24F79093C(MEMORY[0x263F8EED8]);
}

uint64_t sub_24F79093C(void (*a1)(void))
{
  a1(*(void *)(v1 + 16));
  a1(*(void *)(v1 + 24));
  return swift_deallocObject();
}

uint64_t sub_24F79099C@<X0>(uint64_t a1@<X8>)
{
  return sub_24F78CF44(*(void **)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_24F7909A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24F781274(&qword_26B1F7AC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

double sub_24F790A0C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = (*(uint64_t (**)(void))(a2 + 8))();
  uint64_t v9 = v8;
  char v10 = (void *)swift_allocObject();
  void v10[2] = a1;
  v10[3] = a2;
  v10[4] = v3;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = sub_24F79224C;
  *(void *)(v11 + 24) = v10;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v12 = MEMORY[0x263F8EE78];
  sub_24F778B08();
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  sub_24F7CB298();
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  swift_bridgeObjectRelease();
  swift_release();
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = sub_24F792290;
  *(void *)(a3 + 32) = v11;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = v12;
  *(unsigned char *)(a3 + 64) = 0;
  *(void *)(a3 + 72) = v14;
  *(void *)(a3 + 80) = v16;
  *(void *)(a3 + 88) = v18;
  *(void *)(a3 + 96) = v20;
  *(unsigned char *)(a3 + 104) = 0;
  double result = 0.0;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(unsigned char *)(a3 + 160) = 0;
  *(unsigned char *)(a3 + 161) = 1;
  return result;
}

uint64_t sub_24F790B58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a3, a4);
  uint64_t v5 = sub_24F790BC4(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_24F790BC4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v12 = MEMORY[0x263F8EE78];
    sub_24F795850();
    uint64_t v2 = v12;
    uint64_t v4 = (void *)(a1 + 32);
    for (uint64_t i = v1 - 1; ; --i)
    {
      uint64_t v6 = v4[3];
      uint64_t v7 = v4[4];
      sub_24F7811D0(v4, v6);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v7 + 8))(__src, v6, v7);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v12 = v2;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_24F795850();
        uint64_t v2 = v12;
      }
      unint64_t v9 = *(void *)(v2 + 16);
      if (v9 >= *(void *)(v2 + 24) >> 1)
      {
        sub_24F795850();
        uint64_t v2 = v12;
      }
      *(void *)(v2 + 16) = v9 + 1;
      memcpy((void *)(v2 + 184 * v9 + 32), __src, 0xB8uLL);
      if (!i) {
        break;
      }
      v4 += 5;
    }
  }
  return v2;
}

void *static TableRecord.all()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  sub_24F790A0C(a1, a2, (uint64_t)__src);
  return sub_24F7A59FC(__src, a3);
}

void *static TableRecord.none()(uint64_t a1, uint64_t a2)
{
  int v2 = static TableRecord.all()(a1, a2, v33);
  sub_24F773884(v2, v3, v4, v5, v6, v7, v8, v9, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,
    v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    v29,
    v30,
    v31,
    v32,
    v33[0]);
  uint64_t v10 = sub_24F782D5C();
  FilteredRequest.none()(v10, (uint64_t)&protocol witness table for QueryInterfaceRequest<A>);
  return sub_24F7920F8(v33);
}

uint64_t static TableRecord.select(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24F790DF4(a1, a2, a3, &protocol witness table for QueryInterfaceRequest<A>, SelectionRequest.select(_:));
}

{
  return sub_24F790DF4(a1, a2, a3, &protocol witness table for QueryInterfaceRequest<A>, SelectionRequest.select(_:));
}

#error "24F790E20: call analysis failed (funcsize=28)"

void *static TableRecord.select(sql:arguments:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  return sub_24F7919B8(a1, a2, a3, a4, a5, &qword_26B1F7600, (uint64_t)&protocol witness table for SQL, (uint64_t)&protocol witness table for QueryInterfaceRequest<A>, (void (*)(uint64_t, uint64_t, uint64_t))SelectionRequest.select(_:));
}

void *static TableRecord.select(literal:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_24F791B38(a1, a2, a3, &qword_26B1F7600, (uint64_t)&protocol witness table for SQL, (uint64_t)&protocol witness table for QueryInterfaceRequest<A>, (void (*)(uint64_t, uint64_t, uint64_t))SelectionRequest.select(_:), a8);
}

#error "24F790F14: call analysis failed (funcsize=26)"

void *static TableRecord.select<A>(sql:arguments:as:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = *a3;
  uint64_t v10 = a3[1];
  static TableRecord.all()(a5, a7, __src);
  memcpy(__dst, __src, sizeof(__dst));
  sub_24F781274(&qword_26B1F7600);
  uint64_t v12 = sub_24F7805F8();
  *(_OWORD *)(v12 + 16) = xmmword_24F8DDBF0;
  *(void *)(v12 + 56) = &type metadata for SQL;
  *(void *)(v12 + 64) = &protocol witness table for SQL;
  sub_24F781274(&qword_26B1F7F50);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_24F8DDBF0;
  v19[0] = a1;
  v19[1] = a2;
  void v19[2] = v11;
  void v19[3] = v10;
  sub_24F7725D4(v19);
  sub_24F76C344((uint64_t)v19, v13 + 32);
  *(void *)(v12 + 32) = v13;
  uint64_t InterfaceRequest = type metadata accessor for QueryInterfaceRequest();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  QueryInterfaceRequest.select<A>(_:as:)(v12, a4, InterfaceRequest, a6);
  swift_bridgeObjectRelease();
  return sub_24F7920F8(__src);
}

void *static TableRecord.select<A>(literal:as:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *a1;
  int v8 = static TableRecord.all()(a3, a5, v40);
  sub_24F773884(v8, v9, v10, v11, v12, v13, v14, v15, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29,
    v30,
    v31,
    v32,
    v33,
    v34,
    v35,
    v36,
    v37,
    v38,
    v39,
    v40[0]);
  sub_24F781274(&qword_26B1F7600);
  uint64_t v16 = sub_24F7805F8();
  *(_OWORD *)(v16 + 16) = xmmword_24F8DDBF0;
  *(void *)(v16 + 56) = &type metadata for SQL;
  *(void *)(v16 + 64) = &protocol witness table for SQL;
  *(void *)(v16 + 32) = v7;
  uint64_t v17 = sub_24F77B464();
  swift_bridgeObjectRetain();
  QueryInterfaceRequest.select<A>(_:as:)(v16, a2, v17, a4);
  swift_bridgeObjectRelease();
  return sub_24F7920F8(v40);
}

uint64_t static TableRecord.annotated(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24F790DF4(a1, a2, a3, &protocol witness table for QueryInterfaceRequest<A>, SelectionRequest.annotated(with:));
}

{
  return sub_24F790DF4(a1, a2, a3, &protocol witness table for QueryInterfaceRequest<A>, SelectionRequest.annotated(with:));
}

uint64_t static TableRecord.filter(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  static TableRecord.all()(a2, a3, __src);
  memcpy(__dst, __src, sizeof(__dst));
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  sub_24F7811D0(a1, v4);
  int v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v9[3] = &type metadata for SQLExpression;
  v9[4] = &protocol witness table for SQLExpression;
  v9[0] = swift_allocObject();
  v6(v4, v5);
  uint64_t InterfaceRequest = type metadata accessor for QueryInterfaceRequest();
  FilteredRequest.filter(_:)((uint64_t)v9, InterfaceRequest, (uint64_t)&protocol witness table for QueryInterfaceRequest<A>);
  sub_24F7920F8(__src);
  return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v9);
}

uint64_t sub_24F7912BC()
{
  sub_24F76C98C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(void *)(v0 + 128), *(void *)(v0 + 136), *(void *)(v0 + 144), *(void *)(v0 + 152), *(void *)(v0 + 160),
    *(void *)(v0 + 168),
    *(unsigned __int16 *)(v0 + 176) | (*(unsigned __int8 *)(v0 + 178) << 16));
  return swift_deallocObject();
}

uint64_t sub_24F79138C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,__int16 a21)
{
  if (a21 < 0)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    sub_24F787238(a6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_24F787238(a15);
    return sub_24F787238(a17);
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
}

void *static TableRecord.filter(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = sub_24F77FA74(a1, a2, a3, a4, a5, a6, a7, a8, v19, v21, v23, v25, v27, v29, v31, v33, v35, v37, v39,
                       v41,
                       v43,
                       v45,
                       v47,
                       v49,
                       v51,
                       v53,
                       v55,
                       v57,
                       v59,
                       v61[0]);
  sub_24F773884(v9, v10, v11, v12, v13, v14, v15, v16, v20, v22, v24, v26, v28, v30, v32, v34, v36, v38, v40,
    v42,
    v44,
    v46,
    v48,
    v50,
    v52,
    v54,
    v56,
    v58,
    v60,
    v61[0]);
  uint64_t v17 = sub_24F782D5C();
  FilteredRequest.filter(_:)(a1, v17, (uint64_t)&protocol witness table for QueryInterfaceRequest<A>);
  return sub_24F7920F8(v61);
}

#error "24F791540: call analysis failed (funcsize=32)"

void *static TableRecord.filter<A>(keys:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4 = sub_24F77B47C(a2, a4, v34);
  sub_24F773884(v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    v29,
    v30,
    v31,
    v32,
    v33,
    v34[0]);
  sub_24F77B464();
  swift_getWitnessTable();
  sub_24F770E40();
  TableRequest<>.filter<A>(keys:)();
  return sub_24F7920F8(v34);
}

void *static TableRecord.filter(key:)()
{
  return sub_24F79168C();
}

void *static TableRecord.filter(keys:)()
{
  return sub_24F79168C();
}

void *sub_24F79168C()
{
  sub_24F7812D4();
  int v9 = sub_24F77FA74(v1, v2, v3, v4, v5, v6, v7, v8, v19, v21, v23, v25, v27, v29, v31, v33, v35, v37, v39,
                       v41,
                       v43,
                       v45,
                       v47,
                       v49,
                       v51,
                       v53,
                       v55,
                       v57,
                       v59,
                       v61[0]);
  sub_24F773884(v9, v10, v11, v12, v13, v14, v15, v16, v20, v22, v24, v26, v28, v30, v32, v34, v36, v38, v40,
    v42,
    v44,
    v46,
    v48,
    v50,
    v52,
    v54,
    v56,
    v58,
    v60,
    v61[0]);
  type metadata accessor for QueryInterfaceRequest();
  swift_getWitnessTable();
  uint64_t v17 = sub_24F774408();
  v0(v17);
  return sub_24F7920F8(v61);
}

uint64_t static TableRecord.filter(sql:arguments:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *a3;
  uint64_t v10 = a3[1];
  uint64_t v18[3] = &type metadata for SQL;
  v18[4] = &protocol witness table for SQL;
  sub_24F781274(&qword_26B1F7F50);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_24F8DDBF0;
  v19[0] = a1;
  v19[1] = a2;
  void v19[2] = v9;
  void v19[3] = v10;
  sub_24F7725D4(v19);
  sub_24F76C344((uint64_t)v19, v11 + 32);
  v18[0] = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static TableRecord.filter(_:)((uint64_t)v18, a4, a5, v12, v13, v14, v15, v16);
  return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v18);
}

uint64_t static TableRecord.filter(literal:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  static TableRecord.all()(a2, a3, __src);
  memcpy(__dst, __src, sizeof(__dst));
  v6[3] = &type metadata for SQL;
  uint64_t v6[4] = &protocol witness table for SQL;
  v6[0] = v3;
  uint64_t v4 = sub_24F782D5C();
  swift_bridgeObjectRetain();
  FilteredRequest.filter(_:)((uint64_t)v6, v4, (uint64_t)&protocol witness table for QueryInterfaceRequest<A>);
  sub_24F7920F8(__src);
  return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v6);
}

uint64_t static TableRecord.order(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24F790DF4(a1, a2, a3, &protocol witness table for QueryInterfaceRequest<A>, OrderedRequest.order(_:));
}

{
  return sub_24F790DF4(a1, a2, a3, &protocol witness table for QueryInterfaceRequest<A>, OrderedRequest.order(_:));
}

void *static TableRecord.orderByPrimaryKey()(uint64_t a1, uint64_t a2)
{
  int v2 = static TableRecord.all()(a1, a2, v32);
  sub_24F773884(v2, v3, v4, v5, v6, v7, v8, v9, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21,
    v22,
    v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    v29,
    v30,
    v31,
    v32[0]);
  sub_24F782D5C();
  TableRequest<>.orderByPrimaryKey()();
  return sub_24F7920F8(v32);
}

void *static TableRecord.order(sql:arguments:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  return sub_24F7919B8(a1, a2, a3, a4, a5, &qword_269A2A558, (uint64_t)&protocol witness table for SQL, (uint64_t)&protocol witness table for QueryInterfaceRequest<A>, (void (*)(uint64_t, uint64_t, uint64_t))OrderedRequest.order(_:));
}

void *sub_24F7919B8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, void (*a9)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v14 = *a3;
  uint64_t v13 = a3[1];
  static TableRecord.all()(a4, a5, __src);
  memcpy(__dst, __src, sizeof(__dst));
  sub_24F781274(a6);
  uint64_t v15 = sub_24F7805F8();
  *(_OWORD *)(v15 + 16) = xmmword_24F8DDBF0;
  *(void *)(v15 + 56) = &type metadata for SQL;
  *(void *)(v15 + 64) = a7;
  sub_24F781274(&qword_26B1F7F50);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_24F8DDBF0;
  v22[0] = a1;
  v22[1] = a2;
  v22[2] = v14;
  v22[3] = v13;
  sub_24F7725D4(v22);
  sub_24F76C344((uint64_t)v22, v16 + 32);
  *(void *)(v15 + 32) = v16;
  uint64_t InterfaceRequest = type metadata accessor for QueryInterfaceRequest();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  a9(v15, InterfaceRequest, a8);
  swift_bridgeObjectRelease();
  return sub_24F7920F8(__src);
}

void *static TableRecord.order(literal:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_24F791B38(a1, a2, a3, &qword_269A2A558, (uint64_t)&protocol witness table for SQL, (uint64_t)&protocol witness table for QueryInterfaceRequest<A>, (void (*)(uint64_t, uint64_t, uint64_t))OrderedRequest.order(_:), a8);
}

void *sub_24F791B38(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t, uint64_t), uint64_t a8)
{
  uint64_t v12 = *a1;
  int v13 = sub_24F77FA74((uint64_t)a1, a2, a3, (uint64_t)a4, a5, a6, (uint64_t)a7, a8, v24, v26, v28, v30, v32, v34, v36, v38, v40, v42, v44,
                        v46,
                        v48,
                        v50,
                        v52,
                        v54,
                        v56,
                        v58,
                        v60,
                        v62,
                        v64,
                        v66[0]);
  sub_24F773884(v13, v14, v15, v16, v17, v18, v19, v20, v25, v27, v29, v31, v33, v35, v37, v39, v41, v43, v45,
    v47,
    v49,
    v51,
    v53,
    v55,
    v57,
    v59,
    v61,
    v63,
    v65,
    v66[0]);
  sub_24F781274(a4);
  uint64_t v21 = sub_24F7805F8();
  *(_OWORD *)(v21 + 16) = xmmword_24F8DDBF0;
  *(void *)(v21 + 56) = &type metadata for SQL;
  *(void *)(v21 + 64) = a5;
  *(void *)(v21 + 32) = v12;
  uint64_t InterfaceRequest = type metadata accessor for QueryInterfaceRequest();
  swift_bridgeObjectRetain();
  a7(v21, InterfaceRequest, a6);
  swift_bridgeObjectRelease();
  return sub_24F7920F8(v66);
}

#error "24F791C40: call analysis failed (funcsize=25)"

void *static TableRecord.aliased(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  int v10 = sub_24F77FA74(a1, a2, a3, a4, a5, a6, a7, a8, v20, v22, v24, v26, v28, v30, v32, v34, v36, v38, v40,
                        v42,
                        v44,
                        v46,
                        v48,
                        v50,
                        v52,
                        v54,
                        v56,
                        v58,
                        v60,
                        v62[0]);
  sub_24F773884(v10, v11, v12, v13, v14, v15, v16, v17, v21, v23, v25, v27, v29, v31, v33, v35, v37, v39, v41,
    v43,
    v45,
    v47,
    v49,
    v51,
    v53,
    v55,
    v57,
    v59,
    v61,
    v62[0]);
  uint64_t v18 = sub_24F782D5C();
  QueryInterfaceRequest.aliased(_:)(v18, a9);
  return sub_24F7920F8(v62);
}

void *static TableRecord.with<A>(_:)@<X0>(void *__src@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  memcpy(v9, __src, 0xBBuLL);
  static TableRecord.all()(a2, a3, __srca);
  memcpy(__dst, __srca, sizeof(__dst));
  uint64_t v7 = sub_24F77ACF8();
  QueryInterfaceRequest.with<A>(_:)(v9, v7, a4);
  return sub_24F7920F8(__srca);
}

#error "24F791DA0: call analysis failed (funcsize=35)"

void *static TableRecord<>.filter<A>(ids:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_24F77B47C(a2, a4, __src);
  memcpy(__dst, __src, sizeof(__dst));
  type metadata accessor for QueryInterfaceRequest();
  swift_getWitnessTable();
  TableRequest<>.filter<A>(ids:)();
  return sub_24F7920F8(__src);
}

void *static TableRecord<>.selectID()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  int v8 = static TableRecord.all()(a1, a2, v39);
  sub_24F773884(v8, v9, v10, v11, v12, v13, v14, v15, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28,
    v29,
    v30,
    v31,
    v32,
    v33,
    v34,
    v35,
    v36,
    v37,
    v38,
    v39[0]);
  uint64_t v16 = sub_24F77ACF8();
  QueryInterfaceRequest<A>.selectID()(v16, a3, a4, a5);
  return sub_24F7920F8(v39);
}

void *static TableRecord<>.filter(id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = sub_24F77FA74(a1, a2, a3, a4, a5, a6, a7, a8, v17, v19, v21, v23, v25, v27, v29, v31, v33, v35, v37,
                       v39,
                       v41,
                       v43,
                       v45,
                       v47,
                       v49,
                       v51,
                       v53,
                       v55,
                       v57,
                       v59[0]);
  sub_24F773884(v8, v9, v10, v11, v12, v13, v14, v15, v18, v20, v22, v24, v26, v28, v30, v32, v34, v36, v38,
    v40,
    v42,
    v44,
    v46,
    v48,
    v50,
    v52,
    v54,
    v56,
    v58,
    v59[0]);
  sub_24F77B464();
  swift_getWitnessTable();
  sub_24F770E40();
  TableRequest<>.filter(id:)();
  return sub_24F7920F8(v59);
}

void *static TableRecord<>.filter<A>(ids:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_24F77B47C(a2, a4, __src);
  memcpy(__dst, __src, sizeof(__dst));
  uint64_t InterfaceRequest = type metadata accessor for QueryInterfaceRequest();
  uint64_t WitnessTable = swift_getWitnessTable();
  TableRequest<>.filter<A>(ids:)(a1, InterfaceRequest, a3, &protocol witness table for QueryInterfaceRequest<A>, &protocol witness table for QueryInterfaceRequest<A>, WitnessTable, a6, a5);
  return sub_24F7920F8(__src);
}

void *sub_24F7920F8(void *a1)
{
  uint64_t v2 = a1[5];
  uint64_t v3 = a1[14];
  uint64_t v5 = a1[16];
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  sub_24F787238(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_24F787238(v3);
  sub_24F787238(v5);
  return a1;
}

#error "24F792200: call analysis failed (funcsize=28)"

uint64_t sub_24F79223C()
{
  return swift_deallocObject();
}

uint64_t sub_24F79224C(uint64_t a1)
{
  return sub_24F790B58(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_24F792258()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24F792290@<X0>(uint64_t *a1@<X8>)
{
  return sub_24F7AC0B4(*(uint64_t (**)(void))(v1 + 16), a1);
}

uint64_t sub_24F7922AC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    sub_24F77C4AC();
    uint64_t v2 = v8;
    uint64_t v4 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      sub_24F8CEEB0();
      sub_24F8CEEB0();
      swift_bridgeObjectRelease();
      unint64_t v5 = *(void *)(v8 + 16);
      if (v5 >= *(void *)(v8 + 24) >> 1) {
        sub_24F77C4AC();
      }
      v4 += 16;
      *(void *)(v8 + 16) = v5 + 1;
      uint64_t v6 = v8 + 16 * v5;
      *(void *)(v6 + 32) = 34;
      *(void *)(v6 + 40) = 0xE100000000000000;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_24F7923C4(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  int64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v31 = MEMORY[0x263F8EE78];
    sub_24F795894(0, v5, 0);
    uint64_t v7 = v31;
    uint64_t v8 = (void *)(a1 + 32);
    for (int64_t i = v5 - 1; ; --i)
    {
      uint64_t v10 = v8[3];
      uint64_t v11 = v8[4];
      sub_24F7811D0(v8, v10);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v11 + 8))(__src, v10, v11);
      memcpy(__dst, __src, sizeof(__dst));
      sub_24F7997BC((uint64_t)__dst, (uint64_t)v30);
      switch(sub_24F799818((uint64_t)v30))
      {
        case 1u:
          int v13 = (const void *)sub_24F799910((uint64_t)v30);
          memcpy(v26, v13, 0xA3uLL);
          sub_24F76C3A8(__dst, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_24F795A3C);
          sub_24F814C38(a2, v25);
          sub_24F76C3A8(__dst, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_24F799458);
          sub_24F76C3A8(__dst, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_24F799458);
          memcpy(v26, v25, 0xA3uLL);
          sub_24F799920(v26);
          sub_24F7997BC((uint64_t)v26, (uint64_t)v28);
          goto LABEL_12;
        case 2u:
          int v14 = (void *)sub_24F799910((uint64_t)v30);
          uint64_t v15 = v3;
          uint64_t v17 = v14[21];
          uint64_t v16 = v14[22];
          memcpy(v26, v14, 0xA3uLL);
          sub_24F76C3A8(__dst, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_24F795A3C);
          sub_24F814C38(a2, v24);
          sub_24F799868((uint64_t)v14);
          sub_24F76C3A8(__dst, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_24F799458);
          memcpy(v25, v24, 0xA8uLL);
          v25[21] = v17;
          v25[22] = v16;
          uint64_t v3 = v15;
          sub_24F7998DC(v25);
          goto LABEL_8;
        case 3u:
          sub_24F799910((uint64_t)v30);
          swift_retain();
          sub_24F76C3A8(__dst, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_24F795A3C);
          sub_24F8511E4();
          uint64_t v19 = v18;
          sub_24F76C3A8(__dst, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_24F799458);
          sub_24F76C3A8(__dst, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_24F799458);
          v25[0] = v19;
          sub_24F799834(v25);
LABEL_8:
          sub_24F7997BC((uint64_t)v25, (uint64_t)v26);
          goto LABEL_10;
        case 4u:
          v25[0] = a2;
          sub_24F799954(v25);
          sub_24F7997BC((uint64_t)v25, (uint64_t)v26);
          swift_retain();
          sub_24F76C3A8(__dst, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_24F799458);
LABEL_10:
          int v12 = v26;
          break;
        default:
          sub_24F799910((uint64_t)v30);
          int v12 = __dst;
          break;
      }
      memcpy(v28, v12, sizeof(v28));
LABEL_12:
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v31 = v7;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_24F795894(0, *(void *)(v7 + 16) + 1, 1);
        uint64_t v7 = v31;
      }
      unint64_t v22 = *(void *)(v7 + 16);
      unint64_t v21 = *(void *)(v7 + 24);
      if (v22 >= v21 >> 1)
      {
        sub_24F795894(v21 > 1, v22 + 1, 1);
        uint64_t v7 = v31;
      }
      memcpy(v26, v28, sizeof(v26));
      sub_24F794DAC(v26);
      sub_24F76C344((uint64_t)v26, (uint64_t)__src);
      *(void *)(v7 + 16) = v22 + 1;
      memcpy((void *)(v7 + 184 * v22 + 32), __src, 0xB8uLL);
      if (!i) {
        break;
      }
      v8 += 5;
    }
    swift_release();
  }
  else
  {
    swift_release();
    return MEMORY[0x263F8EE78];
  }
  return v7;
}

uint64_t SQLInterpolation.appendInterpolation<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
  sub_24F781888();
  sub_24F7738B4();
  uint64_t v3 = swift_bridgeObjectRelease();
  sub_24F799A4C(v3, v4, v5, v6, v7, v8, v9, v10, v12, v13);
  return swift_bridgeObjectRelease();
}

{
  void *v3;
  uint64_t v4;
  uint64_t result;
  void v6[23];

  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a3 + 16))(v6, a2, a3);
  sub_24F794E2C(v6);
  sub_24F766748();
  sub_24F77DCC4();
  double result = sub_24F77F25C(v4);
  *uint64_t v3 = v3;
  return result;
}

uint64_t SQLInterpolation.appendInterpolation(_:)()
{
  sub_24F7760B0();
  v0();
  sub_24F781888();
  sub_24F7738B4();
  uint64_t v1 = swift_bridgeObjectRelease();
  sub_24F799A4C(v1, v2, v3, v4, v5, v6, v7, v8, v10, v11);
  return swift_bridgeObjectRelease();
}

uint64_t SQLInterpolation.appendInterpolation<A>(tableOf:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DynamicType = swift_getDynamicType();
  return SQLInterpolation.appendInterpolation<A>(_:)(DynamicType, a2, a3);
}

uint64_t SQLInterpolation.appendInterpolation(tableOf:)(void *a1)
{
  sub_24F7811D0(a1, a1[3]);
  swift_getDynamicType();
  sub_24F7760B0();
  v1();
  sub_24F781888();
  sub_24F7738B4();
  uint64_t v2 = swift_bridgeObjectRelease();
  sub_24F799A4C(v2, v3, v4, v5, v6, v7, v8, v9, v11, v12);
  return swift_bridgeObjectRelease();
}

void SQLInterpolation.appendInterpolation<A>(columnsOf:tableAlias:)()
{
  sub_24F777204();
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  if (!v6)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v1);
    uint64_t v7 = v8;
  }
  type metadata accessor for TableAlias();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v5;
  *(void *)(v9 + 24) = v7;
  *(void *)(v9 + 32) = 0;
  *(void *)(v9 + 40) = 0;
  *(unsigned char *)(v9 + 48) = 0;
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16);
  swift_bridgeObjectRetain();
  uint64_t v11 = v10(v3, v2);
  swift_retain();
  uint64_t v12 = sub_24F7923C4(v11, (void *)v9);
  swift_bridgeObjectRelease();
  v14[0] = 8236;
  v14[1] = 0xE200000000000000;
  void v14[2] = MEMORY[0x263F8EE78];
  v14[3] = MEMORY[0x263F8EE80];
  sub_24F7725D4(v14);
  sub_24F76C344((uint64_t)v14, (uint64_t)__src);
  memcpy(v16, __src, sizeof(v16));
  uint64_t v13 = sub_24F794CA4(v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_24F792F2C(v12, v13);
  swift_release();
  sub_24F773598();
}

void sub_24F792AE8()
{
  sub_24F7829D8();
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_24F76B660() || (sub_24F778D4C(), !(v6 ^ v4 | v5)))
  {
    sub_24F76B824();
    sub_24F787184();
    uint64_t v2 = v7;
  }
  if (!*(void *)(v0 + 16))
  {
    if (!v3) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  sub_24F77ED30();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  swift_arrayInitWithCopy();
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    void *v1 = v2;
    return;
  }
  sub_24F78240C();
  if (!v4)
  {
    *(void *)(v2 + 16) = v8;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

uint64_t sub_24F792BA0(uint64_t a1)
{
  return sub_24F792D18(a1, type metadata accessor for TableAlias, &unk_269A2A580, &qword_26B1F5508, sub_24F7FE91C);
}

void sub_24F792BDC()
{
}

void sub_24F792BFC()
{
}

void sub_24F792C1C()
{
  sub_24F777204();
  sub_24F76BA8C();
  if (v6)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v7 = v5;
  if (!sub_24F76B660() || v4 > *(void *)(v2 + 24) >> 1)
  {
    sub_24F76B824();
    uint64_t v2 = v7();
  }
  if (!*(void *)(v0 + 16))
  {
    if (!v3) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  sub_24F77ED30();
  if (v9 != v6)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_24F77BF40(v8);
  swift_arrayInitWithCopy();
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    uint64_t *v1 = v2;
    sub_24F773598();
    return;
  }
  sub_24F78240C();
  if (!v6)
  {
    *(void *)(v2 + 16) = v10;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

uint64_t sub_24F792CDC(uint64_t a1)
{
  return sub_24F792D18(a1, type metadata accessor for Database, &unk_269A2A570, &unk_269A2A568, sub_24F7FE8CC);
}

#error "24F792E3C: call analysis failed (funcsize=133)"

uint64_t sub_24F792F2C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v3;
  unint64_t v7 = *(void *)(*v3 + 16);
  if (!swift_isUniquelyReferenced_nonNull_native() || (unint64_t v8 = *(void *)(v6 + 24) >> 1, v8 < v7))
  {
    sub_24F7662F0();
    uint64_t v6 = v9;
    unint64_t v8 = *(void *)(v9 + 24) >> 1;
  }
  uint64_t v10 = *(void *)(v6 + 16);
  uint64_t v11 = v8 - v10;
  uint64_t result = sub_24F797A1C((unint64_t)__src, v6 + 184 * v10 + 32, v8 - v10, a1, a2);
  if (result < 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (!result)
  {
LABEL_8:
    if (result != v11)
    {
LABEL_9:
      memcpy(__dst, __src, 0xE1uLL);
      uint64_t result = sub_24F799218((uint64_t)__dst);
      *uint64_t v3 = v6;
      return result;
    }
LABEL_11:
    uint64_t v16 = *(void *)(v6 + 16);
    sub_24F798B98((uint64_t)v26);
    sub_24F799704((uint64_t)v26, (uint64_t)v24, &qword_269A2A0D0);
    sub_24F799704((uint64_t)v24, (uint64_t)v25, &qword_269A2A0D0);
    while (sub_24F7996B8((uint64_t)v25) != 1)
    {
      uint64_t v17 = *(void *)(v6 + 24) >> 1;
      if (v17 < v16 + 1)
      {
        sub_24F7662F0();
        uint64_t v6 = v21;
        uint64_t v17 = *(void *)(v21 + 24) >> 1;
      }
      sub_24F799704((uint64_t)v26, (uint64_t)v23, &qword_269A2A0D0);
      sub_24F799704((uint64_t)v23, (uint64_t)__dst, &qword_269A2A0D0);
      if (sub_24F7996B8((uint64_t)__dst) != 1 && v16 < v17)
      {
        uint64_t v19 = v6 + 184 * v16 + 32;
        do
        {
          sub_24F799704((uint64_t)v23, (uint64_t)v22, &qword_269A2A0D0);
          sub_24F76C344((uint64_t)v22, v19);
          ++v16;
          sub_24F798B98((uint64_t)v26);
          sub_24F799704((uint64_t)v26, (uint64_t)v23, &qword_269A2A0D0);
          sub_24F799704((uint64_t)v23, (uint64_t)__dst, &qword_269A2A0D0);
          v19 += 184;
        }
        while (sub_24F7996B8((uint64_t)__dst) != 1 && v16 < v17);
      }
      *(void *)(v6 + 16) = v16;
      sub_24F799704((uint64_t)v26, (uint64_t)v24, &qword_269A2A0D0);
      sub_24F799704((uint64_t)v24, (uint64_t)v25, &qword_269A2A0D0);
    }
    goto LABEL_9;
  }
  uint64_t v13 = *(void *)(v6 + 16);
  BOOL v14 = __OFADD__(v13, result);
  uint64_t v15 = v13 + result;
  if (!v14)
  {
    *(void *)(v6 + 16) = v15;
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

void sub_24F79318C()
{
  sub_24F7829D8();
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_24F76B660() || (sub_24F778D4C(), !(v6 ^ v4 | v5)))
  {
    sub_24F76B824();
    sub_24F787CC4();
    uint64_t v2 = v7;
  }
  if (!*(void *)(v0 + 16))
  {
    if (!v3) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  sub_24F77ED30();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_24F77BF40(v8);
  swift_arrayInitWithCopy();
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    void *v1 = v2;
    return;
  }
  sub_24F78240C();
  if (!v4)
  {
    *(void *)(v2 + 16) = v9;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

void sub_24F793240()
{
  sub_24F7829D8();
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_24F76B660() || (sub_24F778D4C(), !(v6 ^ v4 | v5)))
  {
    sub_24F76B824();
    sub_24F787BF4();
    uint64_t v2 = v7;
  }
  if (!*(void *)(v0 + 16))
  {
    if (!v3) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  sub_24F77ED30();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_24F77BF40(v8);
  swift_arrayInitWithCopy();
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    void *v1 = v2;
    return;
  }
  sub_24F78240C();
  if (!v4)
  {
    *(void *)(v2 + 16) = v9;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

void sub_24F7932F4()
{
}

void sub_24F793314()
{
  sub_24F7829D8();
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_24F76B660() || (sub_24F778D4C(), !(v6 ^ v4 | v5)))
  {
    sub_24F76B824();
    sub_24F788164();
    uint64_t v2 = v7;
  }
  if (!*(void *)(v0 + 16))
  {
    if (!v3) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  sub_24F77ED30();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_24F77BF40(v8);
  swift_arrayInitWithCopy();
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    void *v1 = v2;
    return;
  }
  sub_24F78240C();
  if (!v4)
  {
    *(void *)(v2 + 16) = v9;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

void sub_24F7933C8()
{
  sub_24F7829D8();
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_24F76B660() || (sub_24F778D4C(), !(v6 ^ v4 | v5)))
  {
    sub_24F76B824();
    sub_24F7662F0();
    uint64_t v2 = v7;
  }
  if (!*(void *)(v0 + 16))
  {
    if (!v3) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  sub_24F77ED30();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_24F77BF40(v8);
  swift_arrayInitWithCopy();
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    void *v1 = v2;
    return;
  }
  sub_24F78240C();
  if (!v4)
  {
    *(void *)(v2 + 16) = v9;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

uint64_t sub_24F79347C(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = sub_24F8904C4(a1);
  uint64_t v8 = *v2;
  uint64_t v9 = *(void *)(*v2 + 16);
  uint64_t v10 = v9 + v7;
  if (__OFADD__(v9, v7))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  int64_t v11 = v7;
  if (!swift_isUniquelyReferenced_nonNull_native() || (uint64_t v12 = *(void *)(v8 + 24) >> 1, v12 < v10))
  {
    sub_24F788584();
    uint64_t v8 = v13;
    uint64_t v12 = *(void *)(v13 + 24) >> 1;
  }
  uint64_t v14 = *(void *)(v8 + 16);
  uint64_t v15 = v12 - v14;
  int64_t v16 = sub_24F798894((unint64_t)&v37, (void *)(v8 + 40 * v14 + 32), v12 - v14, a1, a2);
  if (v16 < v11) {
    goto LABEL_13;
  }
  if (v16 >= 1)
  {
    uint64_t v18 = *(void *)(v8 + 16);
    BOOL v19 = __OFADD__(v18, v16);
    uint64_t v20 = v18 + v16;
    if (v19)
    {
      __break(1u);
      goto LABEL_17;
    }
    *(void *)(v8 + 16) = v20;
  }
  if (v16 != v15)
  {
LABEL_10:
    swift_bridgeObjectRelease();
LABEL_11:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v2 = v8;
    return result;
  }
LABEL_14:
  int64_t v11 = v39;
  uint64_t v17 = v37;
  if (v39 == *(void *)(v37 + 16)) {
    goto LABEL_10;
  }
LABEL_17:
  uint64_t v22 = *(void *)(v8 + 16);
  uint64_t v32 = v17;
  uint64_t v33 = v38;
  uint64_t v23 = sub_24F794964(v36, v11, v17, v38);
  sub_24F799A68();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = ((uint64_t (*)(void (**)(void **), void))v23)(v36, 0);
  BOOL v19 = __OFADD__(v11, 1);
  unint64_t v24 = v11 + 1;
  if (!v19)
  {
LABEL_18:
    uint64_t v25 = v22 + 1;
    while (1)
    {
      uint64_t v26 = *(void *)(v8 + 24) >> 1;
      if (v26 < v25)
      {
        sub_24F788584();
        uint64_t v8 = v27;
        uint64_t v26 = *(void *)(v27 + 24) >> 1;
      }
      if (v22 < v26) {
        break;
      }
      *(void *)(v8 + 16) = v22;
    }
    uint64_t v28 = (void *)(v8 + 40 * v22);
    v28[4] = v35;
    v28[5] = v34;
    v28[6] = v10;
    v28[7] = v3;
    v28[8] = v4;
    uint64_t v10 = v32;
    if (v24 == *(void *)(v32 + 16))
    {
LABEL_30:
      *(void *)(v8 + 16) = v25;
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    uint64_t v29 = (void *)(v8 + 40 * v22 + 104);
    while (1)
    {
      uint64_t v30 = sub_24F794964(v36, v24, v10, v33);
      sub_24F799A68();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t result = ((uint64_t (*)(void (**)(void **), void))v30)(v36, 0);
      unint64_t v31 = v24 + 1;
      if (__OFADD__(v24, 1)) {
        break;
      }
      if (v25 >= v26)
      {
        *(void *)(v8 + 16) = v25;
        uint64_t v22 = v25;
        ++v24;
        goto LABEL_18;
      }
      *(v29 - 4) = v35;
      *(v29 - 3) = v34;
      *(v29 - 2) = v10;
      *(v29 - 1) = v3;
      *uint64_t v29 = v4;
      v29 += 5;
      ++v25;
      uint64_t v10 = v32;
      ++v24;
      if (v31 == *(void *)(v32 + 16)) {
        goto LABEL_30;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_24F793738(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = sub_24F770350(a1, a2);
  uint64_t v5 = *v2;
  uint64_t v6 = *(void *)(*v2 + 16);
  uint64_t v7 = v6 + v4;
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v8 = v4;
  if (!swift_isUniquelyReferenced_nonNull_native() || (uint64_t v9 = *(void *)(v5 + 24) >> 1, v9 < v7))
  {
    sub_24F76B824();
    sub_24F7885AC();
    uint64_t v5 = v10;
    uint64_t v9 = *(void *)(v10 + 24) >> 1;
  }
  uint64_t v11 = v9 - *(void *)(v5 + 16);
  sub_24F797100();
  if (v12 < v8) {
    goto LABEL_13;
  }
  if (v12 >= 1)
  {
    uint64_t v13 = *(void *)(v5 + 16);
    BOOL v14 = __OFADD__(v13, v12);
    uint64_t v15 = v13 + v12;
    if (v14)
    {
      __break(1u);
      goto LABEL_19;
    }
    *(void *)(v5 + 16) = v15;
  }
  if (v12 != v11)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v16 = v66;
    uint64_t v17 = v67;
    char v18 = v68;
LABEL_11:
    sub_24F7705C4(v16, v17, v18);
    *uint64_t v3 = v5;
    return;
  }
LABEL_14:
  if ((v68 & 1) == 0)
  {
    uint64_t v11 = v65;
    if (*(_DWORD *)(v65 + 36) != v67)
    {
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    if (v66 == 1 << *(unsigned char *)(v65 + 32))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v16 = sub_24F799A3C();
      goto LABEL_11;
    }
LABEL_19:
    uint64_t v19 = *(void *)(v5 + 16);
    sub_24F799A3C();
    Row.ScopesView.subscript.getter();
    uint64_t v61 = v21;
    uint64_t v64 = v20;
    uint64_t v23 = v22;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v24 = sub_24F799A3C();
    uint64_t v27 = sub_24F8BDDA8(v24, v25, v26, v11);
    uint64_t v29 = v28;
    char v31 = v30;
    uint64_t v32 = v27;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    char v33 = v31 & 1;
    uint64_t v34 = v29;
    uint64_t v35 = v61;
    uint64_t v36 = v32;
    int v37 = v34;
    while (1)
    {
      uint64_t v57 = *(void *)(v5 + 24) >> 1;
      if (v57 < v19 + 1)
      {
        sub_24F76B824();
        char v63 = v52;
        int v54 = v53;
        sub_24F7885AC();
        int v37 = v54;
        char v33 = v63;
        uint64_t v5 = v55;
        uint64_t v57 = *(void *)(v55 + 24) >> 1;
      }
      if (v19 < v57) {
        break;
      }
LABEL_29:
      *(void *)(v5 + 16) = v19;
    }
    uint64_t v38 = (void *)(v5 + 24 * v19 + 48);
    while (1)
    {
      *(v38 - 2) = v64;
      *(v38 - 1) = v23;
      *uint64_t v38 = v35;
      if (v33) {
        goto LABEL_33;
      }
      if (*(_DWORD *)(v11 + 36) != v37)
      {
        __break(1u);
        goto LABEL_32;
      }
      if (v36 == 1 << *(unsigned char *)(v11 + 32))
      {
        *(void *)(v5 + 16) = v19 + 1;
        char v56 = v33;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        char v18 = v56 & 1;
        uint64_t v16 = v32;
        uint64_t v17 = v34;
        goto LABEL_11;
      }
      sub_24F799A2C();
      Row.ScopesView.subscript.getter();
      uint64_t v62 = v40;
      uint64_t v64 = v39;
      uint64_t v60 = v41;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v42 = sub_24F799A2C();
      uint64_t v45 = sub_24F8BDDA8(v42, v43, v44, v11);
      uint64_t v58 = v46;
      uint64_t v59 = v45;
      char v48 = v47 & 1;
      uint64_t v49 = sub_24F799A2C();
      sub_24F7705C4(v49, v50, v51);
      uint64_t v35 = v62;
      swift_bridgeObjectRelease();
      ++v19;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v23 = v60;
      swift_release();
      char v33 = v48;
      int v37 = v58;
      uint64_t v36 = v59;
      v38 += 3;
      uint64_t v32 = v59;
      uint64_t v34 = v58;
      if (v19 >= v57)
      {
        uint64_t v32 = v59;
        uint64_t v34 = v58;
        goto LABEL_29;
      }
    }
  }
LABEL_34:
  __break(1u);
}

uint64_t SQLInterpolation.appendInterpolation(_:)(uint64_t a1)
{
  sub_24F799984(a1, (uint64_t)&v8, &qword_269A2A560);
  if (v9)
  {
    sub_24F794DE0(&v8, (uint64_t)v10);
    sub_24F7811D0(v10, v10[3]);
    uint64_t v2 = sub_24F777224();
    v3(v2);
    sub_24F794DAC(v7);
    sub_24F766748();
    sub_24F77DCC4();
    sub_24F77F25C(v4);
    void *v1 = v1;
    return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v10);
  }
  else
  {
    sub_24F77841C((uint64_t)&v8, &qword_269A2A560);
    sub_24F799A94();
    void v7[2] = MEMORY[0x263F8EE78];
    v7[3] = MEMORY[0x263F8EE80];
    sub_24F772D5C(v7);
    sub_24F77DCC4();
    uint64_t result = sub_24F77F25C(v6);
    void *v1 = v1;
  }
  return result;
}

{
  void *v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  void v7[23];
  long long v8;
  uint64_t v9;
  void v10[4];

  sub_24F799984(a1, (uint64_t)&v8, &qword_26B1F7350);
  if (v9)
  {
    sub_24F794DE0(&v8, (uint64_t)v10);
    sub_24F7811D0(v10, v10[3]);
    uint64_t v2 = sub_24F777224();
    v3(v2);
    sub_24F766784(v7);
    sub_24F766748();
    sub_24F77DCC4();
    sub_24F77F25C(v4);
    void *v1 = v1;
    return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v10);
  }
  else
  {
    sub_24F77841C((uint64_t)&v8, &qword_26B1F7350);
    sub_24F799A94();
    void v7[2] = MEMORY[0x263F8EE78];
    v7[3] = MEMORY[0x263F8EE80];
    sub_24F772D5C(v7);
    sub_24F77DCC4();
    uint64_t result = sub_24F77F25C(v6);
    void *v1 = v1;
  }
  return result;
}

{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  void v6[23];

  uint64_t v3 = *(void *)(a1 + 24);
  v6[0] = *(void *)(a1 + 16);
  v6[1] = v3;
  void v6[2] = MEMORY[0x263F8EE78];
  v6[3] = MEMORY[0x263F8EE80];
  sub_24F7725D4(v6);
  swift_bridgeObjectRetain();
  sub_24F766748();
  sub_24F766690();
  uint64_t result = sub_24F7721F4(v4);
  void *v1 = v2;
  return result;
}

uint64_t SQLInterpolation.appendInterpolation(_:)(void *a1)
{
  sub_24F7811D0(a1, a1[3]);
  uint64_t v2 = sub_24F777224();
  v3(v2);
  sub_24F794DF8(v6);
  sub_24F766748();
  sub_24F77DCC4();
  uint64_t result = sub_24F77F25C(v4);
  void *v1 = v1;
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t vars8;

  sub_24F7811D0(a1, a1[3]);
  uint64_t v1 = sub_24F8CFFE0();
  sub_24F793D14(v1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_24F793D14(uint64_t a1, uint64_t a2)
{
  v6[0] = a1;
  v6[1] = a2;
  sub_24F7991DC((uint64_t)v6);
  sub_24F76F710((uint64_t)v6, (uint64_t)__src);
  memcpy(__dst, __src, 0xA3uLL);
  sub_24F766784(__dst);
  swift_bridgeObjectRetain();
  sub_24F766748();
  uint64_t v3 = *(void *)(*v2 + 16);
  sub_24F766690();
  uint64_t v4 = *v2;
  *(void *)(v4 + 16) = v3 + 1;
  uint64_t result = sub_24F76C344((uint64_t)__dst, v4 + 184 * v3 + 32);
  *uint64_t v2 = v4;
  return result;
}

uint64_t SQLInterpolation.appendInterpolation<A>(_:)()
{
  uint64_t v0 = sub_24F8CFFE0();
  sub_24F793D14(v0, v1);
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t vars8;

  uint64_t v0 = sub_24F8CFFE0();
  sub_24F793D14(v0, v1);
  return swift_bridgeObjectRelease();
}

{
  void *v0;
  uint64_t v1;
  uint64_t result;
  void v3[23];

  v3[0] = 34;
  v3[1] = 0xE100000000000000;
  sub_24F8CEEB0();
  sub_24F7738B4();
  v3[2] = MEMORY[0x263F8EE78];
  v3[3] = MEMORY[0x263F8EE80];
  sub_24F772D5C(v3);
  sub_24F77DCC4();
  uint64_t result = sub_24F77F25C(v1);
  *uint64_t v0 = v3;
  return result;
}

void SQLInterpolation.appendInterpolation<A>(_:)()
{
  sub_24F76B80C();
  v16[2] = v0;
  v16[3] = v1;
  v16[4] = v2;
  uint64_t v4 = sub_24F83E5E4((void (*)(char *, void (*)(char *, uint64_t, uint64_t)))sub_24F794E60, (uint64_t)v16, v0, (uint64_t)&type metadata for SQL.Element, MEMORY[0x263F8E628], v1, MEMORY[0x263F8E658], v3);
  if (*(void *)(v4 + 16))
  {
    v5._uint64_t countAndFlagsBits = 40;
    v5._object = (void *)0xE100000000000000;
    SQLInterpolation.appendLiteral(_:)(v5);
    int64_t v6 = *(void *)(v4 + 16);
    uint64_t v7 = MEMORY[0x263F8EE78];
    if (v6)
    {
      v17[0] = MEMORY[0x263F8EE78];
      sub_24F795894(0, v6, 0);
      uint64_t v8 = v17[0];
      uint64_t v9 = v4 + 32;
      for (int64_t i = v6 - 1; ; --i)
      {
        sub_24F76C344(v9, (uint64_t)__dst);
        sub_24F76C3A8(__dst, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_24F76C660);
        v17[0] = v8;
        unint64_t v12 = *(void *)(v8 + 16);
        unint64_t v11 = *(void *)(v8 + 24);
        if (v12 >= v11 >> 1)
        {
          sub_24F795894(v11 > 1, v12 + 1, 1);
          uint64_t v8 = v17[0];
        }
        sub_24F76C344((uint64_t)__dst, (uint64_t)__src);
        *(void *)(v8 + 16) = v12 + 1;
        memcpy((void *)(v8 + 184 * v12 + 32), __src, 0xB8uLL);
        if (!i) {
          break;
        }
        v9 += 184;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v8 = MEMORY[0x263F8EE78];
    }
    v17[0] = 44;
    v17[1] = 0xE100000000000000;
    void v17[2] = v7;
    v17[3] = MEMORY[0x263F8EE80];
    sub_24F7725D4(v17);
    sub_24F76C344((uint64_t)v17, (uint64_t)__src);
    memcpy(__dst, __src, sizeof(__dst));
    uint64_t v15 = sub_24F794CA4(__dst);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_24F792F2C(v8, v15);
    unint64_t v14 = 41;
    unint64_t v13 = 0xE100000000000000;
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v13 = 0x800000024F8D1280;
    unint64_t v14 = 0xD000000000000018;
  }
  SQLInterpolation.appendLiteral(_:)(*(Swift::String *)&v14);
  sub_24F77344C();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned char *v15;
  unsigned char v16[16];

  sub_24F76B80C();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v4 = sub_24F8CF7F0();
  sub_24F77AD10();
  int64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = &v16[-v8];
  uint64_t v10 = sub_24F8CF910();
  sub_24F77AD10();
  unint64_t v12 = v11;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = &v16[-v14];
  MEMORY[0x253363850](v3, v1);
  swift_getWitnessTable();
  sub_24F8CFA30();
  (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v9, v4);
  swift_getWitnessTable();
  SQLInterpolation.appendInterpolation<A>(_:)();
  (*(void (**)(unsigned char *, uint64_t))(v12 + 8))(v15, v10);
  sub_24F77344C();
}

uint64_t sub_24F794240@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  void (*v4)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  void v7[23];

  uint64_t v4 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(a1 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4(v7, AssociatedTypeWitness, a1);
  sub_24F766784(v7);
  return sub_24F76C344((uint64_t)v7, a2);
}

void *sub_24F79449C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_24F7811D0(a1, v3);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 8))(__src, v3, v4);
  return memcpy(a2, __src, 0xA3uLL);
}

uint64_t _s12GRDBInternal16SQLInterpolationV19appendInterpolationyyxAA14SQLExpressibleRzAA15SQLOrderingTermRzAA13SQLSelectableRzlF_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_24F775AD0(a1, a2);
  v4(v3);
  sub_24F766784(v7);
  sub_24F766748();
  sub_24F77DCC4();
  uint64_t result = sub_24F77F25C(v5);
  *uint64_t v2 = v2;
  return result;
}

void SQLInterpolation.appendInterpolation<A>(definitionFor:)()
{
  sub_24F76B80C();
  uint64_t v1 = v0;
  uint64_t v3 = *(void *)(v2 + 16);
  memcpy(__dst, (const void *)(v2 + 24), 0xA2uLL);
  v19[0] = 34;
  v19[1] = 0xE100000000000000;
  sub_24F8CEEB0();
  sub_24F7738B4();
  uint64_t v4 = MEMORY[0x263F8EE78];
  uint64_t v5 = MEMORY[0x263F8EE80];
  void v19[2] = MEMORY[0x263F8EE78];
  void v19[3] = MEMORY[0x263F8EE80];
  sub_24F772D5C(v19);
  uint64_t v6 = *(void *)(*v0 + 16);
  sub_24F766690();
  uint64_t v7 = *v0;
  *(void *)(v7 + 16) = v6 + 1;
  sub_24F76C344((uint64_t)v19, v7 + 184 * v6 + 32);
  uint64_t *v1 = v7;
  if (v3 && *(void *)(v3 + 16))
  {
    sub_24F7922AC(v3);
    sub_24F781274(&qword_26B1F7F48);
    sub_24F778988((unint64_t *)&qword_26B1F7EB0, &qword_26B1F7F48);
    sub_24F8CED30();
    swift_bridgeObjectRelease();
    uint64_t v14 = 40;
    unint64_t v15 = 0xE100000000000000;
    sub_24F8CEEB0();
    swift_bridgeObjectRelease();
    uint64_t v3 = 0xE100000000000000;
    swift_bridgeObjectRetain();
    sub_24F8CEEB0();
    swift_bridgeObjectRelease();
    uint64_t v16 = v4;
    uint64_t v17 = v5;
    sub_24F772D5C(&v14);
    sub_24F77DCC4();
    uint64_t v8 = *v1;
    *(void *)(v8 + 16) = 0xE100000000000001;
    sub_24F76C344((uint64_t)&v14, v8 - 0x47FFFFFFFFFFFFE0);
    uint64_t *v1 = v8;
  }
  v12[0] = 0x2820534120;
  v12[1] = 0xE500000000000000;
  void v12[2] = v4;
  v12[3] = v5;
  sub_24F772D5C(v12);
  sub_24F77DCC4();
  uint64_t v9 = *v1;
  *(void *)(v9 + 16) = v3 + 1;
  sub_24F76C344((uint64_t)v12, v9 + 184 * v3 + 32);
  uint64_t *v1 = v9;
  memcpy(v13, __dst, 0xA2uLL);
  sub_24F794E2C(v13);
  sub_24F795C9C((uint64_t)__dst);
  sub_24F766748();
  sub_24F77DCC4();
  sub_24F778C48();
  sub_24F76C344((uint64_t)v13, v10);
  uint64_t *v1 = (uint64_t)v1;
  uint64_t v14 = 41;
  unint64_t v15 = 0xE100000000000000;
  uint64_t v16 = v4;
  uint64_t v17 = v5;
  sub_24F772D5C(&v14);
  sub_24F77DCC4();
  sub_24F778C48();
  sub_24F76C344((uint64_t)&v14, v11);
  uint64_t *v1 = (uint64_t)v1;
  sub_24F77344C();
}

Swift::Void __swiftcall SQLInterpolation.appendInterpolation(_:)(GRDBInternal::Database::CollationName a1)
{
  uint64_t v3 = *(void *)(a1.rawValue._countAndFlagsBits + 8);
  v5[0] = *(void *)a1.rawValue._countAndFlagsBits;
  v5[1] = v3;
  v5[2] = MEMORY[0x263F8EE78];
  v5[3] = MEMORY[0x263F8EE80];
  sub_24F7725D4(v5);
  swift_bridgeObjectRetain();
  sub_24F766748();
  sub_24F766690();
  sub_24F7721F4(v4);
  void *v1 = v2;
}

void (*sub_24F794964(void (**a1)(void **a1), unint64_t a2, uint64_t a3, uint64_t a4))(void **a1)
{
  uint64_t result = (void (*)(void **))malloc(0x28uLL);
  *a1 = result;
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (*(void *)(a3 + 16) <= a2)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v9 = result;
  uint64_t v10 = a3 + 16 * a2;
  uint64_t v11 = *(void *)(v10 + 32);
  uint64_t v12 = *(void *)(v10 + 40);
  swift_bridgeObjectRetain_n();
  uint64_t result = (void (*)(void **))sub_24F80B9C8(v11, v12, a4);
  if (v13)
  {
    unint64_t v15 = result;
    uint64_t v16 = v13;
    uint64_t v17 = v14;
    swift_bridgeObjectRelease();
    *(void *)uint64_t v9 = v15;
    *((void *)v9 + 1) = v16;
    *((void *)v9 + 2) = v17;
    *((void *)v9 + 3) = v11;
    *((void *)v9 + 4) = v12;
    return sub_24F794A40;
  }
LABEL_7:
  __break(1u);
  return result;
}

void sub_24F794A40(void **a1)
{
  uint64_t v1 = *a1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  free(v1);
}

uint64_t sub_24F794AA4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 72);
  if (!v1) {
    return MEMORY[0x263F8EE78];
  }
  if (v1 <= 0)
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE78];
  }
  else
  {
    sub_24F781274(&qword_26B1F5578);
    uint64_t v2 = (void *)sub_24F78548C();
    size_t v3 = j__malloc_size(v2);
    v2[2] = v1;
    v2[3] = 2 * ((uint64_t)(v3 - 32) / 40);
  }
  swift_retain();
  uint64_t v4 = sub_24F797474(&v6, (uint64_t)(v2 + 4), v1);
  uint64_t result = swift_release();
  if (v4 == (void *)v1) {
    return (uint64_t)v2;
  }
  __break(1u);
  return result;
}

void sub_24F794B60()
{
  sub_24F770E54();
  if (*(void *)(v0 + 16))
  {
    sub_24F781274(&qword_269A2A590);
    uint64_t v1 = (const void *)sub_24F78548C();
    size_t v2 = j__malloc_size(v1);
    sub_24F77B494(v2);
    sub_24F7975B0(v3, v4, v5, v6);
    sub_24F7802A8();
    sub_24F77FA90();
    if (!v7) {
      __break(1u);
    }
  }
  sub_24F780610();
}

void sub_24F794BD8()
{
  sub_24F799A88();
  if (v3)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return;
  }
  if (v0)
  {
    sub_24F771D6C();
    if (!(v5 ^ v3 | v4))
    {
      sub_24F781274(qword_26B1F59C0);
      uint64_t v6 = (void *)sub_24F7728F0();
      sub_24F799A04(v6);
    }
    if (v2 != v1)
    {
      sub_24F781274(&qword_26B1F5988);
      sub_24F799AA8();
      return;
    }
    goto LABEL_9;
  }
}

void sub_24F794C78()
{
}

void sub_24F794C98()
{
}

uint64_t sub_24F794CA4(void *a1)
{
  sub_24F781274(&qword_26B1F7F50);
  char v3 = (const void *)swift_allocObject();
  sub_24F799AC8(v3);
  *(void *)(v1 + 16) = 1;
  *(void *)(v1 + 24) = 2 * (v4 / 184);
  sub_24F76C344((uint64_t)a1, (uint64_t)v9);
  sub_24F76C344((uint64_t)v9, (uint64_t)v10);
  nullsub_1(v10);
  sub_24F7996D0((uint64_t)v11);
  sub_24F799704((uint64_t)v10, (uint64_t)v8, &qword_269A2A0D0);
  sub_24F799704((uint64_t)v8, (uint64_t)v7, &qword_269A2A0D0);
  uint64_t result = sub_24F7996B8((uint64_t)v7);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    sub_24F799704((uint64_t)v8, (uint64_t)v6, &qword_269A2A0D0);
    sub_24F76C344((uint64_t)v6, v1 + 32);
    sub_24F76C3A8(a1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_24F76C660);
    return v1;
  }
  return result;
}

void *sub_24F794DAC(void *result)
{
  uint64_t v1 = result[13] & 1;
  unint64_t v2 = result[20] & 0xE000000000FFC1FFLL | 0xC00000000000000;
  result[8] &= 1uLL;
  result[13] = v1;
  result[20] = v2;
  return result;
}

uint64_t sub_24F794DE0(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void *sub_24F794DF8(void *result)
{
  uint64_t v1 = result[13] & 1;
  unint64_t v2 = result[20] & 0xE000000000FFC1FFLL | 0x1000000000000000;
  result[8] &= 1uLL;
  result[13] = v1;
  result[20] = v2;
  return result;
}

void *sub_24F794E2C(void *result)
{
  uint64_t v1 = result[13] & 1;
  unint64_t v2 = result[20] & 0xE000000000FFC1FFLL | 0x400000000000000;
  result[8] &= 1uLL;
  result[13] = v1;
  result[20] = v2;
  return result;
}

uint64_t sub_24F794E60@<X0>(uint64_t a1@<X8>)
{
  return sub_24F794240(*(void *)(v1 + 32), a1);
}

void sub_24F794E84()
{
  sub_24F799A88();
  if (v3)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return;
  }
  if (v0)
  {
    sub_24F771D6C();
    if (!(v5 ^ v3 | v4))
    {
      sub_24F781274(&qword_26B1F5658);
      uint64_t v6 = (void *)sub_24F7728F0();
      sub_24F799A04(v6);
    }
    if (v2 != v1)
    {
      swift_arrayInitWithCopy();
      return;
    }
    goto LABEL_9;
  }
}

uint64_t sub_24F794F24(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x263F8EE78];
  }
  sub_24F781274(&qword_26B1F5658);
  uint64_t v3 = sub_24F78548C();
  size_t v4 = j__malloc_size((const void *)v3);
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = 2 * ((uint64_t)(v4 - 32) / 232);
  uint64_t v5 = sub_24F797F6C(&v7, (char *)(v3 + 32), v1, a1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v5 != v1)
  {
    __break(1u);
    return MEMORY[0x263F8EE78];
  }
  return v3;
}

void sub_24F794FD4()
{
  sub_24F770E54();
  if (*(void *)(v0 + 16))
  {
    sub_24F781274(&qword_26B1F7AA8);
    uint64_t v1 = (const void *)sub_24F78548C();
    size_t v2 = j__malloc_size(v1);
    sub_24F77B494(v2);
    sub_24F798084(v3, v4, v5, v6);
    sub_24F7802A8();
    sub_24F77FA90();
    if (!v7) {
      __break(1u);
    }
  }
  sub_24F780610();
}

void sub_24F79504C()
{
  sub_24F799A88();
  if (v3)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return;
  }
  if (v0)
  {
    sub_24F771D6C();
    if (!(v5 ^ v3 | v4))
    {
      sub_24F781274((uint64_t *)&unk_26B1F7C88);
      uint64_t v6 = (void *)sub_24F77C5D0();
      size_t v7 = j__malloc_size(v6);
      void v6[2] = v0;
      v6[3] = 2 * ((uint64_t)(v7 - 32) / 16);
    }
    if (v2 != v1)
    {
      swift_arrayInitWithCopy();
      return;
    }
    goto LABEL_9;
  }
}

#error "24F7951C4: call analysis failed (funcsize=68)"

void sub_24F795224()
{
}

void sub_24F795230()
{
  sub_24F770E54();
  if (*(void *)(v1 + 16))
  {
    sub_24F781274(v0);
    uint64_t v2 = (const void *)sub_24F77C5D0();
    sub_24F799AC8(v2);
    sub_24F77D9E0(v3);
    sub_24F798294(v4, v5, v6, v7);
    sub_24F7999E0();
    sub_24F77FA90();
    if (!v8) {
      __break(1u);
    }
  }
  sub_24F780610();
}

void sub_24F7952A4()
{
  sub_24F770E54();
  if (*(void *)(v0 + 16))
  {
    sub_24F781274((uint64_t *)&unk_26B1F7C88);
    uint64_t v1 = (const void *)sub_24F77C5D0();
    size_t v2 = j__malloc_size(v1);
    sub_24F77D9E0(v2 - 32);
    sub_24F798428(v3, v4, v5, v6);
    sub_24F7999E0();
    sub_24F77FA90();
    if (!v7) {
      __break(1u);
    }
  }
  sub_24F780610();
}

void sub_24F795324()
{
  sub_24F770E54();
  if (*(void *)(v0 + 16))
  {
    sub_24F781274(&qword_269A2A5D8);
    uint64_t v1 = (const void *)sub_24F78548C();
    size_t v2 = j__malloc_size(v1);
    sub_24F77B494(v2);
    sub_24F798628(v3, v4, v5, v6);
    sub_24F7802A8();
    sub_24F77FA90();
    if (!v7) {
      __break(1u);
    }
  }
  sub_24F780610();
}

void sub_24F79539C()
{
}

void sub_24F7953BC()
{
  sub_24F770E54();
  if (*(void *)(v2 + 16))
  {
    uint64_t v3 = v1;
    sub_24F781274(v0);
    uint64_t v4 = (const void *)sub_24F77C5D0();
    size_t v5 = j__malloc_size(v4);
    sub_24F77D9E0(v5 - 32);
    v3();
    sub_24F7999E0();
    sub_24F77FA90();
    if (!v6) {
      __break(1u);
    }
  }
  sub_24F780610();
}

void sub_24F795440()
{
  sub_24F799A88();
  if (v3)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return;
  }
  if (v0)
  {
    sub_24F771D6C();
    if (!(v5 ^ v3 | v4))
    {
      sub_24F781274(&qword_26B1F7260);
      char v6 = (void *)sub_24F7728F0();
      sub_24F799A04(v6);
    }
    if (v2 != v1)
    {
      sub_24F781274(&qword_26B1F7270);
      sub_24F799AA8();
      return;
    }
    goto LABEL_9;
  }
}

void sub_24F7954E0()
{
  sub_24F796D94();
  *uint64_t v0 = v1;
}

void sub_24F795524()
{
  sub_24F7968F4();
  *uint64_t v0 = v1;
}

void sub_24F795568()
{
  sub_24F77D938();
  *uint64_t v0 = v1;
}

void sub_24F7955AC()
{
  sub_24F797058();
  *uint64_t v0 = v1;
}

uint64_t sub_24F7955F0(uint64_t a1, int64_t a2, char a3)
{
  uint64_t result = sub_24F7962CC(a1, a2, a3, *v3);
  *char v3 = result;
  return result;
}

void sub_24F795610()
{
  sub_24F77E4C4();
  *uint64_t v0 = v1;
}

void sub_24F795654()
{
  sub_24F796F6C();
  *uint64_t v0 = v1;
}

void sub_24F795698()
{
  sub_24F79684C();
  *uint64_t v0 = v1;
}

void sub_24F7956DC()
{
  sub_24F7964D8();
  *uint64_t v0 = v1;
}

void sub_24F795720(char a1, uint64_t a2, char a3)
{
  sub_24F7963F4(a1, a2, a3, *v3);
  *char v3 = v4;
}

void sub_24F795740()
{
  sub_24F796690();
  *uint64_t v0 = v1;
}

void sub_24F795784()
{
  sub_24F796F6C();
  *uint64_t v0 = v1;
}

void sub_24F7957C8()
{
  sub_24F77D5C0();
  *uint64_t v0 = v1;
}

void sub_24F79580C()
{
  sub_24F796D94();
  *uint64_t v0 = v1;
}

void sub_24F795850()
{
  sub_24F7964D8();
  *uint64_t v0 = v1;
}

uint64_t sub_24F795894(uint64_t a1, int64_t a2, char a3)
{
  uint64_t result = sub_24F796580(a1, a2, a3, *v3);
  *char v3 = result;
  return result;
}

uint64_t sub_24F7958C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,__int16 a21)
{
  if (a21 < 0)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_24F78C440(a6);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24F78C440(a15);
    return sub_24F78C440(a17);
  }
  else
  {
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_24F795A3C(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unint64_t a21)
{
  switch(a21 >> 61)
  {
    case 0uLL:
      uint64_t result = swift_retain();
      break;
    case 1uLL:
      uint64_t result = sub_24F76CB14(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
                 a20,
                 a21);
      break;
    case 2uLL:
      sub_24F76CB14(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21);
      goto LABEL_9;
    case 3uLL:
LABEL_9:
      uint64_t result = swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_24F795B98(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unsigned int a21)
{
  switch(HIWORD(a21) & 6 | (a21 >> 14) & 1)
  {
    case 0u:
      goto LABEL_3;
    case 1u:
    case 2u:
    case 3u:
    case 4u:
      a21 &= 0xFFF9BFFF;
LABEL_3:
      uint64_t result = sub_24F76CB14(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
                 a20,
                 a21);
      break;
    case 5u:
      uint64_t result = swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_24F795C9C(uint64_t a1)
{
  sub_24F7958C8(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(_WORD *)(a1 + 160));
  return a1;
}

void sub_24F795D08()
{
  sub_24F796690();
  *uint64_t v0 = v1;
}

void sub_24F795D4C()
{
  sub_24F796690();
  *uint64_t v0 = v1;
}

uint64_t sub_24F795D90(uint64_t a1, int64_t a2, char a3)
{
  uint64_t result = sub_24F79674C(a1, a2, a3, *v3);
  *char v3 = result;
  return result;
}

void sub_24F795DB0(char a1, uint64_t a2, char a3)
{
  sub_24F796BEC(a1, a2, a3, *v3, qword_26B1F6E10, (void (*)(uint64_t, uint64_t, void *))sub_24F8BED84);
  *char v3 = v4;
}

void sub_24F795DEC()
{
  sub_24F77E4C4();
  *uint64_t v0 = v1;
}

void sub_24F795E30()
{
  sub_24F79684C();
  *uint64_t v0 = v1;
}

void sub_24F795E74()
{
  sub_24F7968F4();
  *uint64_t v0 = v1;
}

void sub_24F795EB8(char a1, uint64_t a2, char a3)
{
  sub_24F796BEC(a1, a2, a3, *v3, &qword_26B1F5900, (void (*)(uint64_t, uint64_t, void *))sub_24F8B4ECC);
  *char v3 = v4;
}

void sub_24F795EF4()
{
  sub_24F77E4C4();
  *uint64_t v0 = v1;
}

void sub_24F795F38()
{
  sub_24F796F6C();
  *uint64_t v0 = v1;
}

void sub_24F795F7C()
{
  sub_24F796D94();
  *uint64_t v0 = v1;
}

uint64_t sub_24F795FC0(uint64_t a1, int64_t a2, char a3)
{
  uint64_t result = sub_24F7969B8(a1, a2, a3, *v3);
  *char v3 = result;
  return result;
}

void sub_24F795FE0()
{
  sub_24F796F6C();
  *uint64_t v0 = v1;
}

uint64_t sub_24F796024(uint64_t a1, int64_t a2, char a3)
{
  uint64_t result = sub_24F796AD4(a1, a2, a3, *v3);
  *char v3 = result;
  return result;
}

void sub_24F796044()
{
  sub_24F796D94();
  *uint64_t v0 = v1;
}

void sub_24F796088()
{
  sub_24F796D94();
  *uint64_t v0 = v1;
}

void sub_24F7960CC()
{
  sub_24F796D94();
  *uint64_t v0 = v1;
}

uint64_t sub_24F796110(uint64_t a1, int64_t a2, char a3)
{
  uint64_t result = sub_24F796E6C(a1, a2, a3, *v3);
  *char v3 = result;
  return result;
}

void sub_24F796130()
{
  sub_24F796F6C();
  *uint64_t v0 = v1;
}

void sub_24F796174()
{
  sub_24F797058();
  *uint64_t v0 = v1;
}

void sub_24F7961B8()
{
}

void sub_24F7961E0(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if (a3)
  {
    sub_24F7737D0();
    if (v8 != v9)
    {
      sub_24F77C5C4();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_24F77E574();
    }
  }
  sub_24F775F94();
  if (v5)
  {
    sub_24F781274(&qword_269A2A590);
    uint64_t v10 = (void *)sub_24F7829BC();
    sub_24F7737E0(v10);
  }
  else
  {
    uint64_t v5 = MEMORY[0x263F8EE78];
  }
  if (a1)
  {
    sub_24F8B4EA4((char *)(a4 + 32), v4, (char *)(v5 + 32));
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_24F781274(&qword_269A2A598);
    sub_24F7771E4();
  }
  swift_release();
}

void sub_24F7962A4()
{
}

uint64_t sub_24F7962CC(uint64_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_24F781274(&qword_269A2A320);
    uint64_t v10 = swift_allocObject();
    size_t v11 = j__malloc_size((const void *)v10);
    *(void *)(v10 + 16) = v8;
    *(void *)(v10 + 24) = 2 * ((uint64_t)(v11 - 32) / 176);
  }
  else
  {
    uint64_t v10 = MEMORY[0x263F8EE78];
  }
  if (v5)
  {
    sub_24F8B4F30((char *)(a4 + 32), v8, (char *)(v10 + 32));
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

void sub_24F7963CC()
{
}

void sub_24F7963F4(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if (a3)
  {
    sub_24F7737D0();
    if (v8 != v9)
    {
      sub_24F77C5C4();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_24F77E574();
    }
  }
  sub_24F775F94();
  if (v5)
  {
    sub_24F781274(&qword_26B1F77D8);
    uint64_t v10 = (void *)sub_24F7829BC();
    sub_24F7737E0(v10);
  }
  else
  {
    uint64_t v5 = MEMORY[0x263F8EE78];
  }
  if (a1)
  {
    sub_24F8B4F98((char *)(a4 + 32), v4, (char *)(v5 + 32));
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
}

void sub_24F7964B8(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_24F7964D8()
{
  sub_24F777204();
  sub_24F77BB1C();
  if (v4)
  {
    sub_24F7737D0();
    if (v5 != v6)
    {
      sub_24F77C5C4();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_24F77E574();
    }
  }
  sub_24F77ECFC();
  if (v3)
  {
    sub_24F781274(v7);
    char v8 = (void *)sub_24F77B7EC();
    sub_24F77E584(v8);
  }
  sub_24F77CD7C();
  if (v2)
  {
    uint64_t v11 = sub_24F77B808(v9, v10);
    v1(v11);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    sub_24F781C7C();
  }
  swift_release();
  sub_24F773598();
}

uint64_t sub_24F796580(uint64_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_24F781274(&qword_269A2A5B8);
    uint64_t v10 = swift_allocObject();
    size_t v11 = j__malloc_size((const void *)v10);
    *(void *)(v10 + 16) = v8;
    *(void *)(v10 + 24) = 2 * ((uint64_t)(v11 - 32) / 184);
  }
  else
  {
    uint64_t v10 = MEMORY[0x263F8EE78];
  }
  if (v5)
  {
    sub_24F8BED5C((char *)(a4 + 32), v8, (char *)(v10 + 32));
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_24F781274(&qword_269A2A5C0);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

void sub_24F796690()
{
  sub_24F77BB1C();
  if (v4)
  {
    sub_24F7737D0();
    if (v5 != v6)
    {
      sub_24F77C5C4();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_24F77E574();
    }
  }
  sub_24F77ECFC();
  if (v3)
  {
    sub_24F781274(v7);
    uint64_t v8 = (const void *)sub_24F77C5D0();
    size_t v9 = j__malloc_size(v8);
    sub_24F77D6AC((uint64_t)(v9 - 32) / 32);
  }
  sub_24F77CD7C();
  if (v2)
  {
    uint64_t v12 = sub_24F77B808(v10, v11);
    v1(v12);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    sub_24F781C7C();
  }
  swift_release();
}

uint64_t sub_24F79674C(uint64_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_24F781274(&qword_26B1F5658);
    uint64_t v10 = swift_allocObject();
    size_t v11 = j__malloc_size((const void *)v10);
    *(void *)(v10 + 16) = v8;
    *(void *)(v10 + 24) = 2 * ((uint64_t)(v11 - 32) / 232);
  }
  else
  {
    uint64_t v10 = MEMORY[0x263F8EE78];
  }
  if (v5)
  {
    sub_24F8B5008((char *)(a4 + 32), v8, (char *)(v10 + 32));
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

void sub_24F79684C()
{
  sub_24F777204();
  sub_24F77BB1C();
  if (v4)
  {
    sub_24F7737D0();
    if (v5 != v6)
    {
      sub_24F77C5C4();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_24F77E574();
    }
  }
  sub_24F77ECFC();
  if (v3)
  {
    sub_24F781274(v7);
    uint64_t v8 = (void *)sub_24F77B7EC();
    sub_24F77E584(v8);
  }
  sub_24F77CD7C();
  if (v2)
  {
    uint64_t v11 = sub_24F77B808(v9, v10);
    v1(v11);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    sub_24F781C7C();
  }
  swift_release();
  sub_24F773598();
}

void sub_24F7968F4()
{
  sub_24F777204();
  sub_24F780B48();
  if (v5)
  {
    sub_24F7737D0();
    if (v6 != v7)
    {
      sub_24F77C5C4();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_24F77E574();
    }
  }
  sub_24F77ECFC();
  if (v4)
  {
    sub_24F781274(v8);
    uint64_t v9 = (const void *)sub_24F77C5D0();
    size_t v10 = j__malloc_size(v9);
    sub_24F77D6AC((uint64_t)(v10 - 32) / 16);
  }
  sub_24F780A84();
  if (v3)
  {
    uint64_t v11 = sub_24F780D90();
    v1(v11);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    sub_24F781274(v2);
    sub_24F78185C();
  }
  swift_release();
  sub_24F773598();
}

uint64_t sub_24F7969B8(uint64_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_24F781274(&qword_269A2A5A8);
    uint64_t v10 = swift_allocObject();
    size_t v11 = j__malloc_size((const void *)v10);
    *(void *)(v10 + 16) = v8;
    *(void *)(v10 + 24) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    uint64_t v10 = MEMORY[0x263F8EE78];
  }
  if (v5)
  {
    sub_24F8B4E84((char *)(a4 + 32), v8, (char *)(v10 + 32));
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    memcpy((void *)(v10 + 32), (const void *)(a4 + 32), 16 * v8);
  }
  swift_release();
  return v10;
}

void sub_24F796AAC()
{
}

uint64_t sub_24F796AD4(uint64_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_24F781274(&qword_26B1F5530);
    uint64_t v10 = swift_allocObject();
    size_t v11 = j__malloc_size((const void *)v10);
    *(void *)(v10 + 16) = v8;
    *(void *)(v10 + 24) = 2 * ((uint64_t)(v11 - 32) / 8);
  }
  else
  {
    uint64_t v10 = MEMORY[0x263F8EE78];
  }
  if (v5)
  {
    sub_24F8B4ECC((char *)(a4 + 32), v8, (char *)(v10 + 32));
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

void sub_24F796BCC(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_24F796BEC(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(uint64_t, uint64_t, void *))
{
  if (a3)
  {
    sub_24F7737D0();
    if (v10 != v11)
    {
      sub_24F77C5C4();
      if (v10)
      {
        __break(1u);
        return;
      }
      sub_24F77E574();
    }
  }
  else
  {
    uint64_t v9 = a2;
  }
  uint64_t v12 = *(void *)(a4 + 16);
  if (v9 <= v12) {
    uint64_t v13 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v13 = v9;
  }
  if (v13)
  {
    sub_24F781274(a5);
    uint64_t v14 = (void *)sub_24F77C5D0();
    size_t v15 = j__malloc_size(v14);
    void v14[2] = v12;
    v14[3] = 2 * ((uint64_t)(v15 - 32) / 8);
  }
  else
  {
    uint64_t v14 = (void *)MEMORY[0x263F8EE78];
  }
  if (a1)
  {
    a6(a4 + 32, v12, v14 + 4);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    memcpy(v14 + 4, (const void *)(a4 + 32), 8 * v12);
  }
  swift_release();
}

void sub_24F796CD0(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if (a3)
  {
    sub_24F7737D0();
    if (v8 != v9)
    {
      sub_24F77C5C4();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_24F77E574();
    }
  }
  sub_24F775F94();
  if (v5)
  {
    sub_24F781274(&qword_269A2A5D8);
    char v10 = (void *)sub_24F7829BC();
    sub_24F7737E0(v10);
  }
  else
  {
    uint64_t v5 = MEMORY[0x263F8EE78];
  }
  if (a1)
  {
    sub_24F8B5048((char *)(a4 + 32), v4, (char *)(v5 + 32));
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_24F781274(&qword_26B1F5598);
    sub_24F7771E4();
  }
  swift_release();
}

void sub_24F796D94()
{
  sub_24F777204();
  sub_24F780B48();
  if (v5)
  {
    sub_24F7737D0();
    if (v6 != v7)
    {
      sub_24F77C5C4();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_24F77E574();
    }
  }
  sub_24F77ECFC();
  if (v4)
  {
    sub_24F781274(v8);
    char v9 = (void *)sub_24F77B7EC();
    sub_24F77E584(v9);
  }
  sub_24F780A84();
  if (v3)
  {
    uint64_t v10 = sub_24F780D90();
    v1(v10);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    sub_24F781274(v2);
    sub_24F78185C();
  }
  swift_release();
  sub_24F773598();
}

void sub_24F796E44()
{
}

uint64_t sub_24F796E6C(uint64_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_24F781274(&qword_26B1F7630);
    uint64_t v10 = swift_allocObject();
    size_t v11 = j__malloc_size((const void *)v10);
    *(void *)(v10 + 16) = v8;
    *(void *)(v10 + 24) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = MEMORY[0x263F8EE78];
  }
  if (v5)
  {
    sub_24F8B4FE0((char *)(a4 + 32), v8, (char *)(v10 + 32));
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

void sub_24F796F6C()
{
  sub_24F777204();
  sub_24F780B48();
  if (v5)
  {
    sub_24F7737D0();
    if (v6 != v7)
    {
      sub_24F77C5C4();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_24F77E574();
    }
  }
  sub_24F77ECFC();
  if (v4)
  {
    sub_24F781274(v8);
    uint64_t v9 = (const void *)sub_24F77C5D0();
    size_t v10 = j__malloc_size(v9);
    sub_24F77D6AC((uint64_t)(v10 - 32) / 32);
  }
  sub_24F780A84();
  if (v3)
  {
    uint64_t v11 = sub_24F780D90();
    v1(v11);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    sub_24F781274(v2);
    sub_24F78185C();
  }
  swift_release();
  sub_24F773598();
}

void sub_24F797030()
{
}

void sub_24F797058()
{
  sub_24F777204();
  sub_24F77BB1C();
  if (v4)
  {
    sub_24F7737D0();
    if (v5 != v6)
    {
      sub_24F77C5C4();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_24F77E574();
    }
  }
  sub_24F77ECFC();
  if (v3)
  {
    sub_24F781274(v7);
    uint64_t v8 = (void *)sub_24F77B7EC();
    sub_24F77E584(v8);
  }
  sub_24F77CD7C();
  if (v2)
  {
    uint64_t v11 = sub_24F77B808(v9, v10);
    v1(v11);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    sub_24F781C7C();
  }
  swift_release();
  sub_24F773598();
}

void sub_24F797100()
{
  sub_24F76B80C();
  uint64_t v1 = v0;
  uint64_t v43 = v2;
  uint64_t v4 = v3;
  uint64_t v49 = v5;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = sub_24F770668(v3);
  uint64_t v15 = v14;
  char v16 = v12 & 1;
  if (v9 && v7)
  {
    if (v7 < 0) {
      goto LABEL_29;
    }
    if ((v12 & 1) == 0)
    {
      uint64_t v41 = v11;
      uint64_t v17 = 0;
      uint64_t v48 = v4 + 64;
      uint64_t v40 = v7;
      uint64_t v42 = v7 - 1;
      uint64_t v44 = v1;
      while (1)
      {
        int v18 = *(_DWORD *)(v4 + 36);
        if (v18 != v15)
        {
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
          goto LABEL_30;
        }
        if (v13 == 1 << *(unsigned char *)(v4 + 32))
        {
          char v16 = 0;
LABEL_23:
          uint64_t v11 = v41;
          goto LABEL_24;
        }
        uint64_t v46 = v9;
        uint64_t v47 = v17;
        uint64_t v19 = sub_24F8B31EC((uint64_t)v53, v13, v15, 0, v4);
        uint64_t v21 = v20;
        uint64_t v22 = type metadata accessor for Row();
        sub_24F775458((uint64_t)v53, (uint64_t)v50);
        uint64_t v24 = v51;
        uint64_t v23 = v52;
        sub_24F798FB4((uint64_t)v50, v51);
        sub_24F77AD10();
        MEMORY[0x270FA5388](v25);
        uint64_t v27 = (char *)&v40 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v28 + 16))(v27);
        uint64_t v29 = swift_retain();
        uint64_t v30 = v23;
        uint64_t v1 = v44;
        uint64_t v31 = sub_24F7E98E8(v29, (uint64_t)v27, v22, v24, v30);
        _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v50);
        uint64_t v32 = *(void *)(v1 + 16);
        uint64_t v45 = v21;
        if (!v32) {
          goto LABEL_12;
        }
        swift_bridgeObjectRetain();
        unint64_t v33 = sub_24F782950();
        if ((v34 & 1) == 0) {
          break;
        }
        uint64_t v35 = *(void *)(v1 + 56) + 24 * v33;
        uint64_t v36 = *(void *)(v35 + 8);
        uint64_t v37 = *(void *)(v35 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v53);
        swift_bridgeObjectRelease();
        swift_beginAccess();
        *(void *)(v31 + 80) = v36;
        *(void *)(v31 + 88) = v37;
        uint64_t v1 = v44;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_13:
        if (v13 < 0 || v13 >= -(-1 << *(unsigned char *)(v4 + 32))) {
          goto LABEL_26;
        }
        if (((*(void *)(v48 + (((unint64_t)v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
          goto LABEL_27;
        }
        if (*(_DWORD *)(v4 + 36) != v18) {
          goto LABEL_28;
        }
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v13 = sub_24F8CF6F0();
        uint64_t v15 = *(unsigned int *)(v4 + 36);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v38 = v45;
        uint64_t v39 = v46;
        *uint64_t v46 = v19;
        v39[1] = v38;
        void v39[2] = v31;
        if (v42 == v47)
        {
          char v16 = 0;
          goto LABEL_23;
        }
        uint64_t v17 = v47 + 1;
        uint64_t v9 = v39 + 3;
      }
      swift_bridgeObjectRelease();
LABEL_12:
      _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v53);
      goto LABEL_13;
    }
LABEL_30:
    __break(1u);
  }
  else
  {
LABEL_24:
    *(void *)uint64_t v11 = v49;
    *(void *)(v11 + 8) = v4;
    *(void *)(v11 + 16) = v43;
    *(void *)(v11 + 24) = v1;
    *(void *)(v11 + 32) = v13;
    *(void *)(v11 + 40) = v15;
    *(unsigned char *)(v11 + 48) = v16;
    sub_24F77344C();
  }
}

void *sub_24F797474(void *result, uint64_t a2, uint64_t a3)
{
  char v16 = result;
  if (!a2)
  {
LABEL_9:
    uint64_t v6 = 0;
    uint64_t v5 = 0;
LABEL_12:
    *char v16 = v3;
    v16[1] = v6;
    return (void *)v5;
  }
  if (!a3)
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
    goto LABEL_12;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (*(void *)(v3 + 72))
    {
      uint64_t v4 = a2;
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      uint64_t v7 = a3 - 1;
      while (1)
      {
        Row.subscript.getter();
        uint64_t v9 = v8;
        uint64_t v11 = v10;
        uint64_t v13 = v17[2];
        unint64_t v12 = v17[3];
        char v14 = v18;
        swift_bridgeObjectRetain();
        sub_24F781F34(v13, v12, v14);
        swift_bridgeObjectRelease();
        sub_24F781F10(v13, v12, v14);
        sub_24F8AF548(v17, v6);
        uint64_t v6 = v17[0];
        uint64_t v19 = v17[0];
        *(void *)uint64_t v4 = v9;
        *(void *)(v4 + 8) = v11;
        *(void *)(v4 + 16) = v13;
        *(void *)(v4 + 24) = v12;
        *(unsigned char *)(v4 + 32) = v14;
        if (v7 == v5) {
          break;
        }
        v4 += 40;
        ++v5;
        if (v6 == *(void *)(v3 + 72)) {
          goto LABEL_12;
        }
      }
      uint64_t v5 = a3;
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

void *sub_24F7975B0(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a4 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v7 = ~(-1 << -(char)v6);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v11 = 0;
    uint64_t v9 = 0;
LABEL_39:
    *uint64_t result = a4;
    result[1] = v5;
    result[2] = ~v6;
    result[3] = v11;
    result[4] = v8;
    return (void *)v9;
  }
  uint64_t v9 = a3;
  if (!a3)
  {
    int64_t v11 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v10 = a2;
  uint64_t v23 = -1 << *(unsigned char *)(a4 + 32);
  uint64_t v24 = result;
  int64_t v11 = 0;
  uint64_t v12 = 0;
  int64_t v25 = (unint64_t)(63 - v6) >> 6;
  if (!v8) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v13 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  unint64_t v14 = v13 | (v11 << 6);
  while (1)
  {
    ++v12;
    char v18 = (void *)(*(void *)(a4 + 48) + 32 * v14);
    uint64_t v19 = v18[1];
    uint64_t v20 = v18[2];
    uint64_t v21 = v18[3];
    long long v22 = *(_OWORD *)(*(void *)(a4 + 56) + 16 * v14);
    *(void *)uint64_t v10 = *v18;
    *(void *)(v10 + 8) = v19;
    *(void *)(v10 + 16) = v20;
    *(void *)(v10 + 24) = v21;
    *(_OWORD *)(v10 + 32) = v22;
    if (v12 == v9)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v10 += 48;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v15 >= v25) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v5 + 8 * v15);
    if (!v16)
    {
      v11 += 2;
      if (v15 + 1 >= v25)
      {
        unint64_t v8 = 0;
        int64_t v11 = v15;
      }
      else
      {
        unint64_t v16 = *(void *)(v5 + 8 * v11);
        if (v16) {
          goto LABEL_14;
        }
        int64_t v17 = v15 + 2;
        if (v15 + 2 >= v25) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v5 + 8 * v17);
        if (v16)
        {
LABEL_17:
          int64_t v15 = v17;
          goto LABEL_18;
        }
        int64_t v11 = v15 + 3;
        if (v15 + 3 < v25)
        {
          unint64_t v16 = *(void *)(v5 + 8 * v11);
          if (v16)
          {
LABEL_14:
            int64_t v15 = v11;
            goto LABEL_18;
          }
          int64_t v17 = v15 + 4;
          if (v15 + 4 >= v25)
          {
LABEL_33:
            unint64_t v8 = 0;
            goto LABEL_37;
          }
          unint64_t v16 = *(void *)(v5 + 8 * v17);
          if (!v16)
          {
            while (1)
            {
              int64_t v15 = v17 + 1;
              if (__OFADD__(v17, 1)) {
                goto LABEL_42;
              }
              if (v15 >= v25)
              {
                unint64_t v8 = 0;
                int64_t v11 = v25 - 1;
                goto LABEL_37;
              }
              unint64_t v16 = *(void *)(v5 + 8 * v15);
              ++v17;
              if (v16) {
                goto LABEL_18;
              }
            }
          }
          goto LABEL_17;
        }
        unint64_t v8 = 0;
        int64_t v11 = v15 + 2;
      }
LABEL_37:
      uint64_t v9 = v12;
LABEL_38:
      uint64_t v6 = v23;
      uint64_t result = v24;
      goto LABEL_39;
    }
LABEL_18:
    unint64_t v8 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v15 << 6);
    int64_t v11 = v15;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_24F79781C(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  int64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *int64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_24F797A1C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v35[0] = a4;
  v35[1] = 0;
  sub_24F799788((uint64_t)v36);
  uint64_t result = sub_24F799704((uint64_t)v36, (uint64_t)&v35[2], &qword_269A2A5C8);
  memset(&v35[26], 0, 17);
  v35[25] = a5;
  if (!a2)
  {
LABEL_29:
    v34[0] = a4;
    v34[1] = 0;
    sub_24F799704((uint64_t)v36, (uint64_t)&v34[2], &qword_269A2A5C8);
    v34[25] = a5;
    memset(&v34[26], 0, 17);
    memcpy((void *)a1, v34, 0xE1uLL);
    return 0;
  }
  if (!a3)
  {
LABEL_33:
    memcpy((void *)a1, v35, 0xE1uLL);
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v21 = (void *)a1;
    a1 = 0;
    char v11 = 0;
    uint64_t v12 = 0;
    uint64_t v22 = a4 + 32;
    while (v11)
    {
      if (v11 == 1) {
        goto LABEL_14;
      }
      uint64_t v13 = v35[26];
      if (!v35[26]) {
        goto LABEL_28;
      }
LABEL_12:
      uint64_t v15 = v35[27];
      unint64_t v16 = *(void *)(v13 + 16);
      if (v35[27] == v16) {
        goto LABEL_13;
      }
      if (v35[27] >= v16)
      {
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
      sub_24F76C344(v13 + 184 * v35[27] + 32, (uint64_t)v32);
      v35[27] = v15 + 1;
      sub_24F76C344((uint64_t)v32, (uint64_t)v34);
      nullsub_1(v34);
      sub_24F76C3A8(v32, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_24F76C660);
      sub_24F799704((uint64_t)v34, (uint64_t)v33, &qword_269A2A0D0);
      char v11 = 2;
LABEL_25:
      ++v12;
      sub_24F799704((uint64_t)v33, (uint64_t)v34, &qword_269A2A0D0);
      uint64_t result = sub_24F76C344((uint64_t)v34, a2);
      if (v12 == a3)
      {
        a1 = (unint64_t)v21;
        goto LABEL_33;
      }
      a2 += 184;
    }
    int64_t v14 = *(void **)(a4 + 16);
    if ((void *)a1 == v14)
    {
LABEL_31:
      sub_24F799704((uint64_t)&v35[2], (uint64_t)v32, &qword_269A2A5C8);
      uint64_t v19 = v35[26];
      uint64_t v20 = v35[27];
      v34[0] = a4;
      v34[1] = a1;
      sub_24F799704((uint64_t)v32, (uint64_t)&v34[2], &qword_269A2A5C8);
      v34[25] = a5;
      v34[26] = v19;
      v34[27] = v20;
      LOBYTE(v34[28]) = 3;
      memcpy(v21, v34, 0xE1uLL);
      return v12;
    }
    if (a1 < (unint64_t)v14)
    {
      memcpy(__dst, (const void *)(v22 + 184 * a1++), sizeof(__dst));
      v35[1] = a1;
      sub_24F76C344((uint64_t)__dst, (uint64_t)v30);
      nullsub_1(v30);
      sub_24F799704((uint64_t)v30, (uint64_t)__src, &qword_269A2A0D0);
      memcpy(v32, __src, sizeof(v32));
      nullsub_1(v32);
      sub_24F799704((uint64_t)&v35[2], (uint64_t)v34, &qword_269A2A5C8);
      sub_24F76C3A8(__dst, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_24F76C660);
      sub_24F76C3A8(v34, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_24F79931C);
      sub_24F799704((uint64_t)v32, (uint64_t)&v35[2], &qword_269A2A5C8);
LABEL_13:
      LOBYTE(v35[28]) = 1;
LABEL_14:
      sub_24F799704((uint64_t)&v35[2], (uint64_t)v32, &qword_269A2A5C8);
      sub_24F799704((uint64_t)v32, (uint64_t)v34, &qword_269A2A5C8);
      uint64_t result = sub_24F799760((uint64_t)v34);
      if (result == 1) {
        goto LABEL_39;
      }
      int64_t v17 = (char *)(v22 + 184 * a1);
      while (1)
      {
        sub_24F799704((uint64_t)&v35[2], (uint64_t)v28, &qword_269A2A0D0);
        sub_24F7996D0((uint64_t)__dst);
        sub_24F799704((uint64_t)__dst, (uint64_t)v30, &qword_269A2A0D0);
        memcpy(&v35[2], v30, 0xB8uLL);
        sub_24F799704((uint64_t)v28, (uint64_t)__src, &qword_269A2A0D0);
        uint64_t result = sub_24F7996B8((uint64_t)__src);
        if (result != 1)
        {
          sub_24F799704((uint64_t)v28, (uint64_t)v33, &qword_269A2A0D0);
          char v11 = 1;
          goto LABEL_25;
        }
        unint64_t v18 = *(void **)(a4 + 16);
        if ((void *)a1 == v18)
        {
          sub_24F799704((uint64_t)&v35[2], (uint64_t)v27, &qword_269A2A5C8);
          sub_24F76C3A8(v27, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_24F79931C);
          sub_24F799704((uint64_t)v36, (uint64_t)&v35[2], &qword_269A2A5C8);
          goto LABEL_31;
        }
        if (a1 >= (unint64_t)v18)
        {
          __break(1u);
          goto LABEL_36;
        }
        memcpy(v23, v17, sizeof(v23));
        v35[1] = ++a1;
        sub_24F76C344((uint64_t)v23, (uint64_t)v24);
        nullsub_1(v24);
        sub_24F799704((uint64_t)v24, (uint64_t)v25, &qword_269A2A0D0);
        memcpy(v26, v25, sizeof(v26));
        nullsub_1(v26);
        sub_24F799704((uint64_t)&v35[2], (uint64_t)v27, &qword_269A2A5C8);
        sub_24F76C3A8(v23, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_24F76C660);
        sub_24F76C3A8(v27, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_24F79931C);
        sub_24F799704((uint64_t)v26, (uint64_t)&v35[2], &qword_269A2A5C8);
        if (*(void *)(a5 + 16)) {
          break;
        }
        sub_24F799704((uint64_t)&v35[2], (uint64_t)v32, &qword_269A2A5C8);
        sub_24F799704((uint64_t)v32, (uint64_t)v34, &qword_269A2A5C8);
        uint64_t result = sub_24F799760((uint64_t)v34);
        v17 += 184;
        if (result == 1) {
          goto LABEL_39;
        }
      }
      swift_retain();
      uint64_t result = swift_release();
      v35[26] = a5;
      v35[27] = 0;
      uint64_t v13 = a5;
      LOBYTE(v35[28]) = 2;
      if (a5) {
        goto LABEL_12;
      }
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
LABEL_37:
    __break(1u);
  }
  __break(1u);
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_24F797F6C(void *a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 + 16);
  if (!a2)
  {
    uint64_t v11 = *(void *)(a4 + 16);
    uint64_t v6 = 0;
    goto LABEL_14;
  }
  if (!a3)
  {
    uint64_t v11 = *(void *)(a4 + 16);
LABEL_13:
    uint64_t v6 = a3;
    goto LABEL_14;
  }
  if (a3 < 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (!v6)
  {
LABEL_17:
    uint64_t v11 = 0;
    goto LABEL_14;
  }
  uint64_t v8 = a2;
  uint64_t v9 = 0;
  uint64_t v10 = (char *)(a4 + 232 * v6 - 200);
  while (1)
  {
    uint64_t v11 = v6 + v9 - 1;
    memcpy(__dst, v10, 0xE3uLL);
    memmove(v8, v10, 0xE3uLL);
    if (a3 + v9 == 1) {
      goto LABEL_10;
    }
    if (v6 + v9 == 1) {
      break;
    }
    v8 += 232;
    sub_24F79900C((uint64_t)__dst);
    --v9;
    v10 -= 232;
    if (v6 + v9 > *(void *)(a4 + 16))
    {
      __break(1u);
LABEL_10:
      sub_24F79900C((uint64_t)__dst);
      goto LABEL_13;
    }
  }
  sub_24F79900C((uint64_t)__dst);
LABEL_14:
  *a1 = a4;
  a1[1] = v11;
  return v6;
}

uint64_t sub_24F798084(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_39:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  uint64_t v24 = -1 << *(unsigned char *)(a4 + 32);
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = *(void *)(a4 + 48) + 24 * v16;
    uint64_t v21 = *(void *)v20;
    unint64_t v22 = *(void *)(v20 + 8);
    char v23 = *(unsigned char *)(v20 + 16);
    *(void *)uint64_t v11 = *(void *)v20;
    *(void *)(v11 + 8) = v22;
    *(unsigned char *)(v11 + 16) = v23;
    if (v13 == v10)
    {
      sub_24F781F34(v21, v22, v23);
      goto LABEL_38;
    }
    v11 += 24;
    uint64_t result = sub_24F781F34(v21, v22, v23);
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18)
    {
      v12 += 2;
      if (v17 + 1 >= v14)
      {
        unint64_t v9 = 0;
        int64_t v12 = v17;
      }
      else
      {
        unint64_t v18 = *(void *)(v6 + 8 * v12);
        if (v18) {
          goto LABEL_14;
        }
        int64_t v19 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_33;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_17:
          int64_t v17 = v19;
          goto LABEL_18;
        }
        int64_t v12 = v17 + 3;
        if (v17 + 3 < v14)
        {
          unint64_t v18 = *(void *)(v6 + 8 * v12);
          if (v18)
          {
LABEL_14:
            int64_t v17 = v12;
            goto LABEL_18;
          }
          int64_t v19 = v17 + 4;
          if (v17 + 4 >= v14)
          {
LABEL_33:
            unint64_t v9 = 0;
            goto LABEL_37;
          }
          unint64_t v18 = *(void *)(v6 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              int64_t v17 = v19 + 1;
              if (__OFADD__(v19, 1)) {
                goto LABEL_42;
              }
              if (v17 >= v14)
              {
                unint64_t v9 = 0;
                int64_t v12 = v14 - 1;
                goto LABEL_37;
              }
              unint64_t v18 = *(void *)(v6 + 8 * v17);
              ++v19;
              if (v18) {
                goto LABEL_18;
              }
            }
          }
          goto LABEL_17;
        }
        unint64_t v9 = 0;
        int64_t v12 = v17 + 2;
      }
LABEL_37:
      uint64_t v10 = v13;
LABEL_38:
      uint64_t v7 = v24;
      goto LABEL_39;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

void *sub_24F798294(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 56;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v8 = 0;
    a3 = 0;
LABEL_36:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }
  if (!a3)
  {
    int64_t v8 = 0;
    goto LABEL_36;
  }
  if (a3 < 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  int64_t v8 = 0;
  uint64_t v9 = 0;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_19:
    ++v9;
    *a2++ = *(void *)(*(void *)(a4 + 48) + 8 * v12);
    if (v9 == a3) {
      goto LABEL_36;
    }
  }
  int64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v13 >= v10) {
    goto LABEL_31;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_18;
  }
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13;
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_14:
    int64_t v13 = v8;
LABEL_18:
    unint64_t v16 = __clz(__rbit64(v14));
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = v16 + (v13 << 6);
    int64_t v8 = v13;
    goto LABEL_19;
  }
  int64_t v15 = v13 + 2;
  if (v13 + 2 >= v10) {
    goto LABEL_31;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_17:
    int64_t v13 = v15;
    goto LABEL_18;
  }
  int64_t v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13 + 2;
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14) {
    goto LABEL_14;
  }
  int64_t v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_31:
    unint64_t v7 = 0;
LABEL_35:
    a3 = v9;
    goto LABEL_36;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v13 >= v10)
    {
      unint64_t v7 = 0;
      int64_t v8 = v10 - 1;
      goto LABEL_35;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_18;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_24F798428(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  unint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *unint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

void *sub_24F798628(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a4 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v7 = ~(-1 << -(char)v6);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v11 = 0;
    uint64_t v12 = 0;
LABEL_37:
    *uint64_t result = a4;
    result[1] = v5;
    result[2] = ~v6;
    result[3] = v11;
    result[4] = v8;
    return (void *)v12;
  }
  if (!a3)
  {
    int64_t v11 = 0;
    uint64_t v12 = 0;
    goto LABEL_37;
  }
  if (a3 < 0) {
    goto LABEL_39;
  }
  uint64_t v10 = a2;
  uint64_t v24 = -1 << *(unsigned char *)(a4 + 32);
  int64_t v25 = result;
  int64_t v11 = 0;
  uint64_t v12 = 0;
  int64_t v26 = (unint64_t)(63 - v6) >> 6;
  if (!v8) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v13 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  unint64_t v14 = v13 | (v11 << 6);
  while (1)
  {
    ++v12;
    unint64_t v18 = (uint64_t *)(*(void *)(a4 + 48) + 16 * v14);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    sub_24F799984(*(void *)(a4 + 56) + 40 * v14, (uint64_t)&v28, &qword_26B1F7AC0);
    *(void *)&long long v27 = v20;
    *((void *)&v27 + 1) = v19;
    uint64_t v21 = v30;
    uint64_t v34 = v30;
    long long v22 = v29;
    long long v23 = v28;
    long long v32 = v28;
    long long v33 = v29;
    long long v31 = v27;
    *(_OWORD *)uint64_t v10 = v27;
    *(_OWORD *)(v10 + 16) = v23;
    *(_OWORD *)(v10 + 32) = v22;
    *(void *)(v10 + 48) = v21;
    if (v12 == a3)
    {
      swift_bridgeObjectRetain();
      uint64_t v12 = a3;
      goto LABEL_36;
    }
    v10 += 56;
    uint64_t result = (void *)swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v15 >= v26) {
      goto LABEL_35;
    }
    unint64_t v16 = *(void *)(v5 + 8 * v15);
    if (!v16)
    {
      int64_t v17 = v11 + 2;
      ++v11;
      if (v15 + 1 >= v26) {
        goto LABEL_35;
      }
      unint64_t v16 = *(void *)(v5 + 8 * v17);
      if (v16) {
        goto LABEL_14;
      }
      int64_t v11 = v15 + 1;
      if (v15 + 2 >= v26) {
        goto LABEL_35;
      }
      unint64_t v16 = *(void *)(v5 + 8 * (v15 + 2));
      if (v16)
      {
        v15 += 2;
      }
      else
      {
        int64_t v11 = v15 + 2;
        if (v15 + 3 >= v26) {
          goto LABEL_35;
        }
        unint64_t v16 = *(void *)(v5 + 8 * (v15 + 3));
        if (!v16)
        {
          int64_t v17 = v15 + 4;
          int64_t v11 = v15 + 3;
          if (v15 + 4 < v26)
          {
            unint64_t v16 = *(void *)(v5 + 8 * v17);
            if (!v16)
            {
              while (1)
              {
                int64_t v15 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_40;
                }
                if (v15 >= v26)
                {
                  int64_t v11 = v26 - 1;
                  goto LABEL_35;
                }
                unint64_t v16 = *(void *)(v5 + 8 * v15);
                ++v17;
                if (v16) {
                  goto LABEL_21;
                }
              }
            }
LABEL_14:
            int64_t v15 = v17;
            goto LABEL_21;
          }
LABEL_35:
          unint64_t v8 = 0;
LABEL_36:
          uint64_t v6 = v24;
          uint64_t result = v25;
          goto LABEL_37;
        }
        v15 += 3;
      }
    }
LABEL_21:
    unint64_t v8 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v15 << 6);
    int64_t v11 = v15;
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
  return result;
}

unint64_t sub_24F798894(unint64_t result, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a5;
  if (!a2)
  {
LABEL_13:
    uint64_t v7 = 0;
    goto LABEL_17;
  }
  uint64_t v7 = a3;
  if (!a3)
  {
LABEL_17:
    *(void *)uint64_t result = a4;
    *(void *)(result + 8) = v5;
    *(void *)(result + 16) = v7;
    return v7;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = *(void *)(a4 + 16);
    if (v8)
    {
      unint64_t v9 = a2;
      unint64_t v20 = result;
      uint64_t v10 = (uint64_t *)(a4 + 40);
      unint64_t v11 = 1;
      while (*(void *)(v5 + 16))
      {
        uint64_t v12 = *(v10 - 1);
        uint64_t v13 = *v10;
        swift_bridgeObjectRetain_n();
        uint64_t result = sub_24F782950();
        if ((v14 & 1) == 0) {
          goto LABEL_19;
        }
        int64_t v15 = (uint64_t *)(*(void *)(v5 + 56) + 24 * result);
        uint64_t v17 = *v15;
        uint64_t v16 = v15[1];
        uint64_t v18 = v15[2];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t result = swift_bridgeObjectRelease();
        *unint64_t v9 = v12;
        v9[1] = v13;
        uint64_t v9[2] = v17;
        v9[3] = v16;
        uint64_t v7 = a3;
        v9[4] = v18;
        if (a3 == v11) {
          goto LABEL_16;
        }
        if (v8 == v11)
        {
          uint64_t v7 = v8;
LABEL_16:
          uint64_t result = v20;
          uint64_t v5 = a5;
          goto LABEL_17;
        }
        v10 += 2;
        v9 += 5;
        BOOL v19 = v11++ >= *(void *)(a4 + 16);
        uint64_t v5 = a5;
        if (v19)
        {
          __break(1u);
          goto LABEL_13;
        }
      }
      __break(1u);
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
    uint64_t v7 = 0;
    goto LABEL_17;
  }
LABEL_20:
  __break(1u);
  return result;
}

void sub_24F7989DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_24F770E54();
  a25 = v26;
  a26 = v28;
  uint64_t v30 = v29;
  long long v32 = v31;
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  unint64_t v37 = v27;
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  unint64_t v42 = v27 >> 62;
  if (v27 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v43 = sub_24F8CF9E0();
    swift_bridgeObjectRelease();
    if (!v43) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v43 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v43)
    {
LABEL_13:
      sub_24F780610();
      return;
    }
  }
  if (v41)
  {
    if (v42)
    {
      swift_bridgeObjectRetain();
      uint64_t v44 = sub_24F8CF9E0();
      swift_bridgeObjectRelease();
      if (v44 <= v39)
      {
        if (v43 >= 1)
        {
          uint64_t v45 = sub_24F778988(v34, v32);
          swift_bridgeObjectRetain();
          for (uint64_t i = 0; i != v43; ++i)
          {
            uint64_t v47 = sub_24F781274(v32);
            uint64_t v48 = (void (*)(char *, void))v30(&a11, i, v37, v47, v45);
            uint64_t v50 = *v49;
            swift_retain();
            v48(&a11, 0);
            *(void *)(v41 + 8 * i) = v50;
          }
          swift_bridgeObjectRelease();
          goto LABEL_13;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10) <= v39)
      {
        v36(0);
        swift_arrayInitWithCopy();
        goto LABEL_13;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
}

void *sub_24F798B98@<X0>(uint64_t a1@<X8>)
{
  while (2)
  {
    char v3 = *(unsigned char *)(v1 + 224);
LABEL_2:
    switch(v3)
    {
      case 1:
        sub_24F799704(v1 + 16, (uint64_t)v23, &qword_269A2A5C8);
        sub_24F799704((uint64_t)v23, (uint64_t)v24, &qword_269A2A5C8);
        if (sub_24F799760((uint64_t)v24) == 1) {
          goto LABEL_26;
        }
        sub_24F799704(v1 + 16, (uint64_t)v19, &qword_269A2A0D0);
        sub_24F7996D0((uint64_t)__dst);
        sub_24F799704((uint64_t)__dst, (uint64_t)v21, &qword_269A2A0D0);
        memcpy((void *)(v1 + 16), v21, 0xB8uLL);
        sub_24F799704((uint64_t)v19, (uint64_t)__src, &qword_269A2A0D0);
        if (sub_24F7996B8((uint64_t)__src) == 1)
        {
          unint64_t v9 = *(void *)(v1 + 8);
          unint64_t v10 = *(void *)(*(void *)v1 + 16);
          if (v9 == v10)
          {
            sub_24F799788((uint64_t)v17);
            sub_24F799704(v1 + 16, (uint64_t)v18, &qword_269A2A5C8);
            sub_24F76C3A8(v18, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_24F79931C);
            sub_24F799704((uint64_t)v17, v1 + 16, &qword_269A2A5C8);
            *(unsigned char *)(v1 + 224) = 3;
            uint64_t v13 = __dst;
            return (void *)sub_24F799704((uint64_t)v13, a1, &qword_269A2A0D0);
          }
          if (v9 >= v10) {
            goto LABEL_24;
          }
          memcpy(v14, (const void *)(*(void *)v1 + 184 * v9 + 32), sizeof(v14));
          *(void *)(v1 + 8) = v9 + 1;
          sub_24F76C344((uint64_t)v14, (uint64_t)v15);
          nullsub_1(v15);
          sub_24F799704((uint64_t)v15, (uint64_t)v16, &qword_269A2A0D0);
          memcpy(v17, v16, sizeof(v17));
          nullsub_1(v17);
          sub_24F799704(v1 + 16, (uint64_t)v18, &qword_269A2A5C8);
          sub_24F76C3A8(v14, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_24F76C660);
          sub_24F76C3A8(v18, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_24F79931C);
          sub_24F799704((uint64_t)v17, v1 + 16, &qword_269A2A5C8);
          uint64_t v11 = *(void *)(v1 + 200);
          if (*(void *)(v11 + 16))
          {
            swift_retain();
            swift_release();
            *(void *)(v1 + 208) = v11;
            *(void *)(v1 + 216) = 0;
            *(unsigned char *)(v1 + 224) = 2;
          }
          continue;
        }
        uint64_t v13 = v19;
        return (void *)sub_24F799704((uint64_t)v13, a1, &qword_269A2A0D0);
      case 2:
        uint64_t v4 = *(void *)(v1 + 208);
        if (!v4) {
          goto LABEL_25;
        }
        unint64_t v5 = *(void *)(v1 + 216);
        unint64_t v6 = *(void *)(v4 + 16);
        if (v5 != v6)
        {
          if (v5 < v6)
          {
            sub_24F76C344(v4 + 184 * v5 + 32, (uint64_t)v23);
            *(void *)(v1 + 216) = v5 + 1;
            sub_24F76C344((uint64_t)v23, (uint64_t)v24);
            nullsub_1(v24);
            sub_24F799704((uint64_t)v24, a1, &qword_269A2A0D0);
            return sub_24F76C3A8(v23, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_24F76C660);
          }
LABEL_23:
          __break(1u);
LABEL_24:
          __break(1u);
LABEL_25:
          __break(1u);
LABEL_26:
          __break(1u);
          JUMPOUT(0x24F798FA4);
        }
        char v3 = 1;
        *(unsigned char *)(v1 + 224) = 1;
        goto LABEL_2;
      case 3:
        goto LABEL_18;
      default:
        unint64_t v7 = *(void *)(v1 + 8);
        unint64_t v8 = *(void *)(*(void *)v1 + 16);
        if (v7 == v8)
        {
          *(unsigned char *)(v1 + 224) = 3;
LABEL_18:
          sub_24F7996D0((uint64_t)v24);
          uint64_t v13 = v24;
          return (void *)sub_24F799704((uint64_t)v13, a1, &qword_269A2A0D0);
        }
        if (v7 >= v8)
        {
          __break(1u);
          goto LABEL_23;
        }
        memcpy(__dst, (const void *)(*(void *)v1 + 184 * v7 + 32), sizeof(__dst));
        *(void *)(v1 + 8) = v7 + 1;
        sub_24F76C344((uint64_t)__dst, (uint64_t)v21);
        nullsub_1(v21);
        sub_24F799704((uint64_t)v21, (uint64_t)__src, &qword_269A2A0D0);
        memcpy(v23, __src, sizeof(v23));
        nullsub_1(v23);
        sub_24F799704(v1 + 16, (uint64_t)v24, &qword_269A2A5C8);
        sub_24F76C3A8(__dst, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_24F76C660);
        sub_24F76C3A8(v24, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_24F79931C);
        sub_24F799704((uint64_t)v23, v1 + 16, &qword_269A2A5C8);
        *(unsigned char *)(v1 + 224) = 1;
        continue;
    }
  }
}

uint64_t sub_24F798FB4(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_24F799004()
{
  return swift_release();
}

uint64_t sub_24F79900C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 104);
  uint64_t v9 = *(void *)(a1 + 176);
  uint64_t v10 = *(void *)(a1 + 192);
  char v6 = *(unsigned char *)(a1 + 56);
  sub_24F799128(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  sub_24F799140(v2, v3, v4, v5, v6);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_24F78C440(v8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_24F78C440(v9);
  sub_24F78C440(v10);
  return a1;
}

uint64_t sub_24F799128(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 3u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_24F799140(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5 < 0)
  {
    return swift_retain();
  }
  else
  {
    swift_bridgeObjectRetain();
    return sub_24F799198(a3);
  }
}

uint64_t sub_24F799198(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_24F7991DC(uint64_t a1)
{
  int v2 = *(unsigned __int16 *)(a1 + 160);
  uint64_t result = a1 + 160;
  int v3 = v2 | (*(unsigned __int8 *)(result + 2) << 16);
  uint64_t v4 = *(void *)(result - 56) & 1;
  *(void *)(result - 96) &= 1uLL;
  *(void *)(result - 56) = v4;
  *(_WORD *)uint64_t result = v3 & 0x81FF;
  *(unsigned char *)(result + 2) = BYTE2(v3) & 1;
  return result;
}

uint64_t sub_24F799218(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v16 = *(void *)(a1 + 24);
  uint64_t v17 = *(void *)(a1 + 16);
  unint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 72);
  long long v14 = *(_OWORD *)(a1 + 96);
  long long v15 = *(_OWORD *)(a1 + 80);
  long long v13 = *(_OWORD *)(a1 + 112);
  long long v11 = *(_OWORD *)(a1 + 144);
  long long v12 = *(_OWORD *)(a1 + 128);
  long long v9 = *(_OWORD *)(a1 + 176);
  long long v10 = *(_OWORD *)(a1 + 160);
  swift_bridgeObjectRelease();
  sub_24F79931C(v17, v16, v2, v3, v4, v5, v6, v7, v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((unint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v11, *((uint64_t *)&v11 + 1), v10,
    *((uint64_t *)&v10 + 1),
    v9);
  swift_release();
  swift_release();
  return a1;
}

uint64_t sub_24F79931C(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unint64_t a21)
{
  BOOL v22 = a9 >> 1 != 4294967294 || a14 > 1;
  if (v22 || (a21 & 0x1FFFFFFFFF003E00) != 0)
  {
    return sub_24F7993B0(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21);
  }
  return result;
}

uint64_t sub_24F7993B0(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unint64_t a21)
{
  BOOL v22 = a9 >> 1 != 0xFFFFFFFF || a14 > 1;
  if (v22 || (a21 & 0x1FFFFFFFFF003E00) != 0)
  {
    return sub_24F76C470(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21);
  }
  return result;
}

uint64_t sub_24F799458(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unint64_t a21)
{
  switch(a21 >> 61)
  {
    case 0uLL:
      uint64_t result = swift_release();
      break;
    case 1uLL:
      uint64_t result = sub_24F76C98C(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
                 a20,
                 a21);
      break;
    case 2uLL:
      sub_24F76C98C(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21);
      goto LABEL_9;
    case 3uLL:
LABEL_9:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_24F7995B4(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unsigned int a21)
{
  switch(HIWORD(a21) & 6 | (a21 >> 14) & 1)
  {
    case 0u:
      goto LABEL_3;
    case 1u:
    case 2u:
    case 3u:
    case 4u:
      a21 &= 0xFFF9BFFF;
LABEL_3:
      uint64_t result = sub_24F76C98C(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
                 a20,
                 a21);
      break;
    case 5u:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_24F7996B8(uint64_t a1)
{
  if ((*(void *)(a1 + 64) >> 1) > 0x80000000) {
    return -(*(void *)(a1 + 64) >> 1);
  }
  else {
    return 0;
  }
}

double sub_24F7996D0(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 64) = 0x1FFFFFFFELL;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  return result;
}

uint64_t sub_24F799704(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_24F781274(a3);
  sub_24F770E70();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t sub_24F799760(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 64) >> 1;
  int v2 = -2 - v1;
  if (-2 - (int)v1 < 0) {
    int v2 = -1;
  }
  if (v1 > 0x80000000) {
    return (v2 + 1);
  }
  else {
    return 0;
  }
}

double sub_24F799788(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 64) = 0x1FFFFFFFCLL;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  return result;
}

uint64_t sub_24F7997BC(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_24F799818(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 160) >> 61;
  if (v1 <= 3) {
    return v1;
  }
  else {
    return (*(_DWORD *)a1 + 4);
  }
}

void *sub_24F799834(void *result)
{
  uint64_t v1 = result[13] & 1;
  uint64_t v2 = result[20] & 0xF981FFLL | 0x6000000000000000;
  result[8] &= 1uLL;
  result[13] = v1;
  result[20] = v2;
  return result;
}

uint64_t sub_24F799868(uint64_t a1)
{
  sub_24F76C98C(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(unsigned __int16 *)(a1 + 160) | (*(unsigned __int8 *)(a1 + 162) << 16));
  return a1;
}

void *sub_24F7998DC(void *result)
{
  uint64_t v1 = result[13] & 1;
  uint64_t v2 = result[20] & 0xF981FFLL | 0x4000000000000000;
  result[8] &= 1uLL;
  result[13] = v1;
  result[20] = v2;
  return result;
}

uint64_t sub_24F799910(uint64_t result)
{
  *(void *)(result + 160) &= 0x1FFFFFFFFFFFFFFFuLL;
  return result;
}

void *sub_24F799920(void *result)
{
  uint64_t v1 = result[13] & 1;
  uint64_t v2 = result[20] & 0xF981FFLL | 0x2000000000000000;
  result[8] &= 1uLL;
  result[13] = v1;
  result[20] = v2;
  return result;
}

void *sub_24F799954(void *result)
{
  uint64_t v1 = result[13] & 1;
  uint64_t v2 = result[20] & 0xF981FFLL;
  result[8] &= 1uLL;
  result[13] = v1;
  result[20] = v2;
  return result;
}

uint64_t sub_24F799984(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_24F781274(a3);
  sub_24F770E70();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t sub_24F7999E0()
{
  return swift_bridgeObjectRetain();
}

size_t sub_24F799A04(void *a1)
{
  size_t result = j__malloc_size(a1);
  a1[2] = v1;
  a1[3] = 2 * ((uint64_t)(result - 32) / v2);
  return result;
}

uint64_t sub_24F799A2C()
{
  return v0;
}

uint64_t sub_24F799A3C()
{
  return v0;
}

void sub_24F799A4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  SQLInterpolation.appendLiteral(_:)(*(Swift::String *)&a9);
}

uint64_t sub_24F799A68()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_24F799AA8()
{
  return swift_arrayInitWithCopy();
}

size_t sub_24F799AC8(const void *a1)
{
  return j__malloc_size(a1);
}

uint64_t sub_24F799AE4()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_24F799B84(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 24), sel_lock);
  uint64_t result = swift_beginAccess();
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(a1 + 16) = v4;
    objc_msgSend(*(id *)(a1 + 24), sel_unlock);
    return v4;
  }
  return result;
}

uint64_t sub_24F799C08(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 16) & 1) == 0)
  {
    *(unsigned char *)(a1 + 16) = 1;
    swift_beginAccess();
    sqlite3_interrupt(*(sqlite3 **)(a2 + 16));
  }
  swift_endAccess();
  objc_msgSend(*(id *)(a1 + 24), sel_unlock);
  return swift_release();
}

uint64_t sub_24F799CB8()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 88));

  return v0;
}

uint64_t sub_24F799D44()
{
  sub_24F799CB8();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t type metadata accessor for LockedBox()
{
  return sub_24F777DE0();
}

void DatabaseValueConvertible<>.databaseValue.getter(void *a1)
{
  sub_24F77AD10();
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = sub_24F77FABC(v3, v8);
  v5(v4);
  swift_getAssociatedTypeWitness();
  sub_24F7738CC();
  uint64_t v6 = sub_24F77DCE0();
  v7(v6);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void (*v5)(char *);
  uint64_t v6;
  void (*v7)(uint64_t);
  uint64_t v8;

  sub_24F77AD10();
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = sub_24F77FABC(v3, v8);
  v5(v4);
  swift_getAssociatedTypeWitness();
  sub_24F7738CC();
  uint64_t v6 = sub_24F77DCE0();
  v7(v6);
}

void static DatabaseValueConvertible<>.fromDatabaseValue(_:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = sub_24F77E5C0(AssociatedTypeWitness, v3, v4, v5, v6, v7, v8, v9, v17, v19, v20, v21, v22, v23, v24, v25, v1);
  v11(v10);
  uint64_t v12 = sub_24F8CF610();
  sub_24F782D74((void (*)(char *, char *))sub_24F799FB8, v13, v12, MEMORY[0x263F8E628], v14, MEMORY[0x263F8E658], v15, v16, v18);
}

{
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;

  uint64_t v1 = *a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = sub_24F77E5C0(AssociatedTypeWitness, v3, v4, v5, v6, v7, v8, v9, v17, v19, v20, v21, v22, v23, v24, v25, v1);
  v11(v10);
  uint64_t v12 = sub_24F8CF610();
  sub_24F782D74((void (*)(char *, char *))sub_24F79A260, v13, v12, MEMORY[0x263F8E628], v14, MEMORY[0x263F8E658], v15, v16, v18);
}

uint64_t sub_24F799F48@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_24F83C41C(a1, a2);
}

uint64_t sub_24F799FB8@<X0>(uint64_t a1@<X8>)
{
  return sub_24F799F48(*(void *)(v1 + 16), a1);
}

void sub_24F799FDC(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_24F781274(&qword_269A2A5E0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v18[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24F79A34C();
  v18[0] = a1;
  v18[1] = a2;
  char v19 = a3;
  uint64_t v11 = static NSURL.fromDatabaseValue(_:)((uint64_t)v18);
  if (v11)
  {
    uint64_t v12 = (void *)v11;
    uint64_t v13 = sub_24F8CE850();
    sub_24F7771BC((uint64_t)v10, 1, 1, v13);
    sub_24F79A38C();
    sub_24F8CFA40();
    if (sub_24F777048((uint64_t)v10, 1, v13) == 1)
    {
      uint64_t v14 = a4;
      uint64_t v15 = 1;
    }
    else
    {
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v13 - 8) + 32))(a4, v10, v13);
      uint64_t v14 = a4;
      uint64_t v15 = 0;
    }
    sub_24F7771BC(v14, v15, 1, v13);
  }
  else
  {
    uint64_t v16 = sub_24F8CE850();
    sub_24F7771BC(a4, 1, 1, v16);
  }
}

uint64_t sub_24F79A260@<X0>(uint64_t a1@<X8>)
{
  return sub_24F799F48(*(void *)(v1 + 16), a1);
}

void sub_24F79A33C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

unint64_t sub_24F79A34C()
{
  unint64_t result = qword_269A2A5E8;
  if (!qword_269A2A5E8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_269A2A5E8);
  }
  return result;
}

unint64_t sub_24F79A38C()
{
  unint64_t result = qword_269A2A5F0;
  if (!qword_269A2A5F0)
  {
    sub_24F8CE850();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269A2A5F0);
  }
  return result;
}

uint64_t HasManyAssociation._sqlAssociation.getter@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return swift_bridgeObjectRetain();
}

uint64_t HasManyAssociation._sqlAssociation.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = v2;
  return result;
}

uint64_t (*HasManyAssociation._sqlAssociation.modify())(void)
{
  return nullsub_1;
}

uint64_t sub_24F79A434(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_24F79A470@<X0>(uint64_t *__src@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7 = *a4;
  uint64_t v8 = a4[1];
  uint64_t v10 = *__src;
  uint64_t v9 = __src[1];
  if (a3)
  {
    uint64_t v11 = a3;
    char v13 = 2;
  }
  else
  {
    swift_bridgeObjectRetain();
    char v13 = 0;
    a2 = v10;
    uint64_t v11 = v9;
  }
  memcpy(&v16[7], __src, 0xA2uLL);
  sub_24F781274(&qword_26B1F5658);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_24F8DDBF0;
  *(void *)(v14 + 32) = a2;
  *(void *)(v14 + 40) = v11;
  *(unsigned char *)(v14 + 48) = v13;
  *(void *)(v14 + 56) = v10;
  *(void *)(v14 + 64) = v9;
  *(void *)(v14 + 72) = v7;
  *(void *)(v14 + 80) = v8;
  *(unsigned char *)(v14 + 88) = 0;
  memcpy((void *)(v14 + 89), v16, 0xA9uLL);
  *(unsigned char *)(v14 + 258) = 1;
  *a5 = v14;
  return swift_bridgeObjectRetain();
}

uint64_t sub_24F79A56C(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

void (*sub_24F79A5B0(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = HasManyAssociation._sqlAssociation.modify();
  return sub_24F79A608;
}

void sub_24F79A608(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t sub_24F79A650(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 24) = result;
  return result;
}

uint64_t sub_24F79A68C(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_24F79A6C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 24);
}

uint64_t type metadata accessor for HasManyAssociation()
{
  return sub_24F777DE0();
}

void NSNull.databaseValue.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 4;
}

uint64_t static NSNull.fromDatabaseValue(_:)()
{
  return 0;
}

void sub_24F79A700(uint64_t a1@<X8>)
{
}

void sub_24F79A718(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t DatabaseValue.storage.getter()
{
  uint64_t v1 = *(void *)v0;
  sub_24F781F34(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
  return v1;
}

void static DatabaseValue.null.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 4;
}

uint64_t static DatabaseValue.Storage.== infix(_:_:)(uint64_t a1, unint64_t a2, char a3, uint64_t a4, unint64_t a5, char a6)
{
  switch(a3)
  {
    case 1:
      if (a6 != 1) {
        goto LABEL_22;
      }
      BOOL v10 = *(double *)&a1 == *(double *)&a4;
      goto LABEL_9;
    case 2:
      if (a6 != 2) {
        goto LABEL_22;
      }
      if (a1 == a4 && a2 == a5)
      {
LABEL_23:
        uint64_t result = 1;
      }
      else
      {
        sub_24F78062C();
        uint64_t result = sub_24F8CFD00();
      }
      break;
    case 3:
      if (a6 != 3) {
        goto LABEL_22;
      }
      sub_24F781F34(a1, a2, 3);
      sub_24F781F34(a4, a5, 3);
      uint64_t v13 = sub_24F78062C();
      char v14 = MEMORY[0x253363110](v13);
      sub_24F781F10(a4, a5, 3);
      sub_24F781F10(a1, a2, 3);
      uint64_t result = v14 & 1;
      break;
    case 4:
      if (a6 != 4 || a5 | a4) {
        goto LABEL_22;
      }
      goto LABEL_23;
    default:
      if (a6)
      {
LABEL_22:
        uint64_t result = 0;
      }
      else
      {
        BOOL v10 = a1 == a4;
LABEL_9:
        uint64_t result = v10;
      }
      break;
  }
  return result;
}

uint64_t sub_24F79A8F8(uint64_t a1, uint64_t a2)
{
  return static DatabaseValue.Storage.== infix(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 16));
}

uint64_t DatabaseValue.init(value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_24F79AA14(a1, (uint64_t)v13);
  sub_24F781274(&qword_26B1F7250);
  if (swift_dynamicCast())
  {
    sub_24F794DE0(&v10, (uint64_t)v14);
    uint64_t v4 = v15;
    uint64_t v5 = v16;
    sub_24F7811D0(v14, v15);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v5 + 24))(&v10, v4, v5);
    _s12GRDBInternal13DatabaseEventVwxx_0(a1);
    uint64_t v7 = *((void *)&v10 + 1);
    uint64_t v6 = v10;
    char v8 = v11;
    uint64_t result = _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v14);
  }
  else
  {
    uint64_t v12 = 0;
    long long v10 = 0u;
    long long v11 = 0u;
    _s12GRDBInternal13DatabaseEventVwxx_0(a1);
    uint64_t result = sub_24F7817A4((uint64_t)&v10);
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    char v8 = -1;
  }
  *(void *)a2 = v6;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = v8;
  return result;
}

uint64_t sub_24F79AA14(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

BOOL DatabaseValue.isNull.getter()
{
  return *(unsigned char *)(v0 + 16) == 4 && *(_OWORD *)v0 == 0;
}

uint64_t DatabaseValue.hashValue.getter()
{
  return sub_24F8CFF80();
}

uint64_t DatabaseValue.hash(into:)()
{
  uint64_t v1 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  switch(*(unsigned char *)(v0 + 16))
  {
    case 2:
      swift_bridgeObjectRetain();
      sub_24F8CEE50();
      uint64_t v4 = v1;
      unint64_t v5 = v2;
      char v6 = 2;
      goto LABEL_5;
    case 3:
      sub_24F78419C(*(void *)v0, *(void *)(v0 + 8));
      sub_24F8CE8E0();
      uint64_t v4 = v1;
      unint64_t v5 = v2;
      char v6 = 3;
LABEL_5:
      uint64_t result = sub_24F781F10(v4, v5, v6);
      break;
    case 4:
      uint64_t result = sub_24F8CFF40();
      break;
    default:
      uint64_t result = sub_24F8CFF70();
      break;
  }
  return result;
}

uint64_t sub_24F79ABF4()
{
  return sub_24F8CFF80();
}

uint64_t DatabaseValue.description.getter()
{
  uint64_t v1 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  uint64_t result = 1280070990;
  switch(*(unsigned char *)(v0 + 16))
  {
    case 1:
      uint64_t result = sub_24F8CF2D0();
      break;
    case 2:
      swift_bridgeObjectRetain();
      uint64_t result = sub_24F8CEE10();
      break;
    case 3:
      sub_24F781F34(v1, v2, 3);
      sub_24F8CE880();
      sub_24F8CEEB0();
      swift_bridgeObjectRelease();
      sub_24F8CEEB0();
      sub_24F781F10(v1, v2, 3);
      uint64_t result = 0x2861746144;
      break;
    case 4:
      return result;
    default:
      uint64_t result = sub_24F8CFAE0();
      break;
  }
  return result;
}

uint64_t static DatabaseValue.fromDatabaseValue(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)a1;
  unint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = *(void *)a1;
  *(void *)(a2 + 8) = v2;
  char v4 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a2 + 16) = v4;
  return sub_24F781F34(v3, v2, v4);
}

uint64_t static DatabaseValue.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t *)a1;
  unint64_t v3 = *(void *)(a1 + 8);
  char v4 = *(unsigned char *)(a1 + 16);
  uint64_t v5 = *(uint64_t *)a2;
  unint64_t v6 = *(void *)(a2 + 8);
  int v7 = *(unsigned __int8 *)(a2 + 16);
  switch(v4)
  {
    case 1:
      if (*(unsigned char *)(a2 + 16))
      {
        if (v7 != 1) {
          goto LABEL_32;
        }
        sub_24F781F10(*(void *)a1, v3, 1);
        sub_24F781F10(v5, v6, 1);
        BOOL v12 = *(double *)&v2 == *(double *)&v5;
        goto LABEL_43;
      }
      sub_24F781F10(*(void *)a1, v3, 1);
      sub_24F781F10(v5, v6, 0);
      char v8 = 0;
      double v25 = trunc(*(double *)&v2);
      if (*(double *)&v2 > -9.22337204e18 && *(double *)&v2 < 9.22337204e18 && v25 == *(double *)&v2)
      {
        BOOL v12 = v5 == (uint64_t)*(double *)&v2;
        goto LABEL_43;
      }
      return v8 & 1;
    case 2:
      if (v7 != 2)
      {
        swift_bridgeObjectRetain();
        goto LABEL_32;
      }
      if (v2 == v5 && v3 == v6)
      {
        char v8 = 1;
      }
      else
      {
        sub_24F77BBA8();
        char v8 = sub_24F8CFD00();
      }
      sub_24F781F34(v5, v6, 2);
      sub_24F781F34(v2, v3, 2);
      sub_24F781F10(v2, v3, 2);
      uint64_t v18 = v5;
      unint64_t v19 = v6;
      char v20 = 2;
      goto LABEL_48;
    case 3:
      if (v7 != 3)
      {
        uint64_t v21 = sub_24F770E80();
        sub_24F78419C(v21, v22);
        goto LABEL_32;
      }
      sub_24F77ED44();
      sub_24F77ED44();
      uint64_t v17 = sub_24F77BBA8();
      char v8 = MEMORY[0x253363110](v17);
      sub_24F781F10(v5, v6, 3);
      sub_24F781F10(v2, v3, 3);
      sub_24F781F10(v2, v3, 3);
      uint64_t v18 = v5;
      unint64_t v19 = v6;
      char v20 = 3;
LABEL_48:
      sub_24F781F10(v18, v19, v20);
      return v8 & 1;
    case 4:
      if (v7 != 4 || (v6 | v5) != 0) {
        goto LABEL_32;
      }
      uint64_t v15 = sub_24F770E80();
      sub_24F781F10(v15, v16, 4);
      sub_24F781F10(0, 0, 4);
      char v8 = 1;
      return v8 & 1;
    default:
      if (!*(unsigned char *)(a2 + 16))
      {
        sub_24F781F10(*(void *)a1, v3, 0);
        sub_24F781F10(v5, v6, 0);
        BOOL v12 = v2 == v5;
LABEL_43:
        char v8 = v12;
        return v8 & 1;
      }
      if (v7 != 1)
      {
LABEL_32:
        sub_24F781F34(v5, v6, v7);
        uint64_t v23 = sub_24F770E80();
        sub_24F781F10(v23, v24, v4);
        sub_24F781F10(v5, v6, v7);
        char v8 = 0;
        return v8 & 1;
      }
      sub_24F781F10(*(void *)a1, v3, 0);
      sub_24F781F10(v5, v6, 1);
      char v8 = 0;
      double v9 = trunc(*(double *)&v5);
      if (*(double *)&v5 > -9.22337204e18 && *(double *)&v5 < 9.22337204e18 && v9 == *(double *)&v5)
      {
        BOOL v12 = v2 == (uint64_t)*(double *)&v5;
        goto LABEL_43;
      }
      return v8 & 1;
  }
}

uint64_t DatabaseValue.sqlExpression.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 8);
  v8[0] = *(void *)v1;
  v8[1] = v3;
  char v4 = *(unsigned char *)(v1 + 16);
  char v9 = v4;
  sub_24F7667B8((uint64_t)v8);
  sub_24F76F710((uint64_t)v8, (uint64_t)__src);
  memcpy(a1, __src, 0xA3uLL);
  uint64_t v5 = sub_24F770E80();
  return sub_24F781F34(v5, v6, v4);
}

unint64_t sub_24F79B108(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24F8CE900();
  unint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  MEMORY[0x270FA5388](v6);
  uint64_t v7 = *(uint64_t *)a1;
  unint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v10 = *(uint64_t *)a2;
  unint64_t v25 = *(void *)(a2 + 8);
  unsigned int v11 = *(unsigned __int8 *)(a2 + 16);
  sub_24F781274(&qword_269A2A5F8);
  switch(v9)
  {
    case 1:
      switch(v11)
      {
        case 0u:
          double v21 = (double)v10;
          break;
        case 1u:
          double v21 = *(double *)&v10;
          break;
        case 2u:
        case 3u:
          goto LABEL_22;
        default:
          goto LABEL_27;
      }
      BOOL v22 = *(double *)&v7 < v21;
LABEL_31:
      char v12 = v22;
      return v12 & 1;
    case 2:
      if (v11 == 2)
      {
        return sub_24F79B590(v10, v25, v7, v8);
      }
      swift_bridgeObjectRetain();
      if (v11 == 3)
      {
LABEL_22:
        uint64_t v13 = v7;
        unint64_t v14 = v8;
        char v15 = v9;
        goto LABEL_23;
      }
      uint64_t v18 = v7;
      unint64_t v19 = v8;
      char v20 = 2;
      goto LABEL_26;
    case 3:
      if (v11 != 3) {
        goto LABEL_27;
      }
      sub_24F781F34(v7, v8, 3);
      sub_24F781F34(v10, v25, 3);
      sub_24F781F34(v7, v8, 3);
      sub_24F781F34(v10, v25, 3);
      sub_24F8CE890();
      sub_24F78419C(v10, v25);
      sub_24F8CE890();
      sub_24F781F10(v10, v25, 3);
      sub_24F79BAF8();
      break;
    case 4:
      if (v11 == 2 || v11 == 3) {
        goto LABEL_22;
      }
      if (v11 <= 1)
      {
        sub_24F781F34(v10, v25, v11);
        uint64_t v13 = v7;
        unint64_t v14 = v8;
        char v15 = 4;
        goto LABEL_23;
      }
      unint64_t v5 = v25;
      if (!(v8 | v7)) {
        goto LABEL_27;
      }
      sub_24F781F34(v10, v25, v11);
      sub_24F781F10(v7, v8, v9);
      if (v11 == 4 && !(v25 | v10)) {
        goto LABEL_24;
      }
      sub_24F781F10(v10, v25, v11);
      sub_24F8CFCF0();
      __break(1u);
      goto LABEL_39;
    default:
      switch(v11)
      {
        case 0u:
          char v12 = v7 < v10;
          break;
        case 1u:
          BOOL v22 = (double)v7 < *(double *)&v10;
          goto LABEL_31;
        case 2u:
        case 3u:
          goto LABEL_22;
        default:
          goto LABEL_27;
      }
      return v12 & 1;
  }
  while (1)
  {
    sub_24F8CF660();
    if (v30)
    {
LABEL_39:
      uint64_t v23 = *(void (**)(void))(v5 + 8);
      sub_24F77FAEC();
      v23();
      sub_24F8CF660();
      sub_24F77FAEC();
      v23();
      char v12 = v28 ^ 1;
      sub_24F7812E8(v10);
      sub_24F7812E8(v10);
      return v12 & 1;
    }
    sub_24F8CF660();
    if (v27)
    {
LABEL_18:
      uint64_t v17 = *(void (**)(void))(v5 + 8);
      sub_24F77FAEC();
      v17();
      sub_24F77FAEC();
      v17();
      uint64_t v18 = sub_24F77F288();
LABEL_26:
      sub_24F781F10(v18, v19, v20);
LABEL_27:
      char v12 = 0;
      return v12 & 1;
    }
    if (v29 < v26) {
      break;
    }
    if (v26 < v29) {
      goto LABEL_18;
    }
  }
  unint64_t v24 = *(void (**)(void))(v5 + 8);
  sub_24F77FAEC();
  v24();
  sub_24F77FAEC();
  v24();
  uint64_t v13 = sub_24F77F288();
LABEL_23:
  sub_24F781F10(v13, v14, v15);
LABEL_24:
  char v12 = 1;
  return v12 & 1;
}

unint64_t sub_24F79B590(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v7 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v7 = a3 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v33 = v7;
  uint64_t v8 = 4 * v7;
  uint64_t v9 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v9) = 1;
  }
  uint64_t v10 = 4 << v9;
  uint64_t v27 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v28 = a4 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v11 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v11 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v30 = v8;
  unint64_t v31 = v11;
  uint64_t v29 = 4 * v11;
  uint64_t v12 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000) == 0) {
    LOBYTE(v12) = 1;
  }
  uint64_t v13 = 4 << v12;
  uint64_t v25 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v26 = a2 & 0xFFFFFFFFFFFFFFLL;
  unint64_t v14 = 15;
  unint64_t v15 = 15;
  while (v30 != v15 >> 14)
  {
    unint64_t v16 = v15;
    if ((v15 & 0xC) == v10) {
      unint64_t v16 = sub_24F79BB48(v15, a3, a4);
    }
    unint64_t v17 = v16 >> 16;
    if (v16 >> 16 >= v33)
    {
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      unint64_t result = sub_24F79BB48(v14, a1, a2);
      goto LABEL_50;
    }
    if ((a4 & 0x1000000000000000) != 0)
    {
      unsigned __int8 v19 = sub_24F8CEF30();
    }
    else if ((a4 & 0x2000000000000000) != 0)
    {
      unint64_t v34 = a3;
      uint64_t v35 = v28;
      unsigned __int8 v19 = *((unsigned char *)&v34 + v17);
    }
    else
    {
      uint64_t v18 = v27;
      if ((a3 & 0x1000000000000000) == 0) {
        uint64_t v18 = sub_24F8CF860();
      }
      unsigned __int8 v19 = *(unsigned char *)(v18 + v17);
    }
    if ((v15 & 0xC) == v10)
    {
      unint64_t v15 = sub_24F79BB48(v15, a3, a4);
      if ((a4 & 0x1000000000000000) == 0)
      {
LABEL_22:
        unint64_t v15 = (v15 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_27;
      }
    }
    else if ((a4 & 0x1000000000000000) == 0)
    {
      goto LABEL_22;
    }
    if (v33 <= v15 >> 16) {
      goto LABEL_61;
    }
    unint64_t v15 = sub_24F8CEF10();
LABEL_27:
    if (v29 == v14 >> 14) {
      return 0;
    }
    unint64_t v17 = v14 & 0xC;
    unint64_t v20 = v14;
    if (v17 == v13) {
      unint64_t v20 = sub_24F79BB48(v14, a1, a2);
    }
    unint64_t v21 = v20 >> 16;
    if (v20 >> 16 >= v31) {
      goto LABEL_60;
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
      unsigned __int8 v23 = sub_24F8CEF30();
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      unint64_t v34 = a1;
      uint64_t v35 = v26;
      unsigned __int8 v23 = *((unsigned char *)&v34 + v21);
    }
    else
    {
      uint64_t v22 = v25;
      if ((a1 & 0x1000000000000000) == 0) {
        uint64_t v22 = sub_24F8CF860();
      }
      unsigned __int8 v23 = *(unsigned char *)(v22 + v21);
    }
    if (v17 == v13)
    {
      unint64_t v14 = sub_24F79BB48(v14, a1, a2);
      if ((a2 & 0x1000000000000000) != 0)
      {
LABEL_42:
        if (v31 <= v14 >> 16) {
          goto LABEL_62;
        }
        unint64_t v14 = sub_24F8CEF10();
        goto LABEL_44;
      }
    }
    else if ((a2 & 0x1000000000000000) != 0)
    {
      goto LABEL_42;
    }
    unint64_t v14 = (v14 & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_44:
    if (v19 < v23) {
      return 1;
    }
    if (v23 < v19) {
      return 0;
    }
  }
  if (v29 == v14 >> 14) {
    return 0;
  }
  unint64_t v17 = v14 & 0xC;
  unint64_t result = v14;
  if (v17 == v13) {
    goto LABEL_63;
  }
LABEL_50:
  if (v31 <= result >> 16)
  {
    __break(1u);
    goto LABEL_65;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
LABEL_65:
    unint64_t result = sub_24F8CEF30();
    goto LABEL_54;
  }
  if (!(a2 & 0x2000000000000000 | a1 & 0x1000000000000000)) {
    unint64_t result = sub_24F8CF860();
  }
LABEL_54:
  if (v17 == v13)
  {
    unint64_t result = sub_24F79BB48(v14, a1, a2);
    unint64_t v14 = result;
    if ((a2 & 0x1000000000000000) == 0) {
      return 1;
    }
LABEL_56:
    if (v31 > v14 >> 16)
    {
      sub_24F8CEF10();
      return 1;
    }
    __break(1u);
  }
  else
  {
    if ((a2 & 0x1000000000000000) != 0) {
      goto LABEL_56;
    }
    return 1;
  }
  return result;
}

unint64_t sub_24F79B92C()
{
  unint64_t result = qword_26B1F53E0[0];
  if (!qword_26B1F53E0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26B1F53E0);
  }
  return result;
}

__n128 initializeWithTake for Statement.TransactionEffect(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for DatabaseValue()
{
  return &type metadata for DatabaseValue;
}

uint64_t _s12GRDBInternal13DatabaseValueV7StorageOwca_0(uint64_t a1, uint64_t a2)
{
  sub_24F77DD0C(a1, a2);
  uint64_t v6 = *(void *)v2;
  unint64_t v7 = *(void *)(v2 + 8);
  *(void *)uint64_t v2 = v3;
  *(void *)(v2 + 8) = v4;
  char v8 = *(unsigned char *)(v2 + 16);
  *(unsigned char *)(v2 + 16) = v5;
  sub_24F781F10(v6, v7, v8);
  return v2;
}

uint64_t _s12GRDBInternal13DatabaseValueV7StorageOwta_0(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_24F781F10(v4, v5, v6);
  return a1;
}

uint64_t _s12GRDBInternal13DatabaseValueV7StorageOwet_0(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFC && *(unsigned char *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 251;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 4) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t _s12GRDBInternal13DatabaseValueV7StorageOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 252;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_24F79BAB8(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 3u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 4);
  }
}

uint64_t sub_24F79BAD0(uint64_t result, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(void *)__n128 result = a2 - 4;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 4;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for DatabaseValue.Storage()
{
  return &type metadata for DatabaseValue.Storage;
}

unint64_t sub_24F79BAF8()
{
  unint64_t result = qword_269A2A600[0];
  if (!qword_269A2A600[0])
  {
    sub_24F8CE900();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_269A2A600);
  }
  return result;
}

uint64_t sub_24F79BB48(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = sub_24F8CEF70();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = MEMORY[0x253363770](15, a1 >> 16);
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

uint64_t ValueObservation.removeDuplicates(by:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_24F77F2D8();
  unint64_t v7 = (void *)swift_allocObject();
  uint64_t v8 = *(void *)(a3 + 24);
  void v7[2] = *(void *)(a3 + 16);
  v7[3] = v8;
  v7[4] = a1;
  void v7[5] = a2;
  uint64_t v9 = type metadata accessor for ValueReducers.RemoveDuplicates();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_24F7DCDA4((uint64_t)sub_24F79BDC8, (uint64_t)v7, a3, v9, WitnessTable, v3);
  return swift_release();
}

uint64_t sub_24F79BCA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v11 + 16))(v10);
  sub_24F79BDD4((uint64_t)v10, a2, a3, a4, a5);
  return swift_retain();
}

uint64_t sub_24F79BD90()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24F79BDC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24F79BCA0(a1, v2[4], v2[5], v2[2], a2);
}

uint64_t sub_24F79BDD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for ValueReducers.RemoveDuplicates();
  uint64_t v11 = a5 + *(int *)(v10 + 36);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_24F7771BC(v11, 1, 1, AssociatedTypeWitness);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5, a1, a4);
  unint64_t v14 = (void *)(a5 + *(int *)(v10 + 40));
  *unint64_t v14 = a2;
  v14[1] = a3;
  return result;
}

uint64_t type metadata accessor for ValueReducers.RemoveDuplicates()
{
  return sub_24F777DE0();
}

uint64_t ValueObservation<>.removeDuplicates()(uint64_t a1, uint64_t a2)
{
  sub_24F77F2D8();
  uint64_t v5 = (void *)swift_allocObject();
  uint64_t v6 = *(void *)(a1 + 24);
  v5[2] = *(void *)(a1 + 16);
  v5[3] = v6;
  v5[4] = a2;
  uint64_t v7 = type metadata accessor for ValueReducers.RemoveDuplicates();
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_24F7DCDA4((uint64_t)sub_24F79C0D8, (uint64_t)v5, a1, v7, WitnessTable, v2);
  return swift_release();
}

uint64_t sub_24F79BF98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v11 + 16))(v10);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = a2;
  v13[3] = a3;
  v13[4] = a4;
  v13[5] = AssociatedTypeWitness;
  return sub_24F79BDD4((uint64_t)v10, (uint64_t)sub_24F79D55C, (uint64_t)v13, a2, a5);
}

uint64_t sub_24F79C0CC()
{
  return sub_24F77DD34();
}

uint64_t sub_24F79C0D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24F79BF98(a1, v2[2], v2[3], v2[4], a2);
}

uint64_t sub_24F79C0E4()
{
  return sub_24F8CED50() & 1;
}

uint64_t ValueReducers.RemoveDuplicates._fetch(_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(*(void *)(a2 + 24) + 8) + 24))(a1, *(void *)(a2 + 16));
}

uint64_t ValueReducers.RemoveDuplicates._value(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v40 = a2;
  uint64_t v41 = a3;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(*(void *)(a2 + 24) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = sub_24F8CF610();
  sub_24F77AD10();
  uint64_t v10 = v9;
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  unint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  unint64_t v16 = (char *)&v37 - v15;
  sub_24F77AD10();
  uint64_t v42 = v17;
  uint64_t v19 = MEMORY[0x270FA5388](v18);
  uint64_t v39 = (char *)&v37 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v37 - v21;
  uint64_t v23 = a1;
  uint64_t v24 = v3;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v23, v5, v6);
  if (sub_24F777048((uint64_t)v16, 1, AssociatedTypeWitness) != 1)
  {
    uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v42 + 32);
    v25(v22, v16, AssociatedTypeWitness);
    uint64_t v26 = v40;
    uint64_t v27 = v24 + *(int *)(v40 + 36);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v14, v27, v8);
    int v28 = sub_24F777048((uint64_t)v14, 1, AssociatedTypeWitness);
    uint64_t v38 = (void (*)(uint64_t, char *, uint64_t))v25;
    if (v28 == 1)
    {
      uint64_t v29 = *(void (**)(char *, uint64_t))(v10 + 8);
      v29(v14, v8);
    }
    else
    {
      uint64_t v37 = v27;
      uint64_t v30 = v39;
      v25(v39, v14, AssociatedTypeWitness);
      unint64_t v31 = v22;
      char v32 = (*(uint64_t (**)(char *, char *))(v24 + *(int *)(v26 + 40)))(v30, v22);
      unint64_t v33 = *(void (**)(char *, uint64_t))(v42 + 8);
      v33(v30, AssociatedTypeWitness);
      if (v32)
      {
        v33(v31, AssociatedTypeWitness);
        goto LABEL_7;
      }
      uint64_t v22 = v31;
      uint64_t v29 = *(void (**)(char *, uint64_t))(v10 + 8);
      uint64_t v27 = v37;
    }
    v29((char *)v27, v8);
    (*(void (**)(uint64_t, char *, uint64_t))(v42 + 16))(v27, v22, AssociatedTypeWitness);
    sub_24F7771BC(v27, 0, 1, AssociatedTypeWitness);
    uint64_t v35 = v41;
    v38(v41, v22, AssociatedTypeWitness);
    uint64_t v34 = 0;
    return sub_24F7771BC(v35, v34, 1, AssociatedTypeWitness);
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v8);
LABEL_7:
  uint64_t v34 = 1;
  uint64_t v35 = v41;
  return sub_24F7771BC(v35, v34, 1, AssociatedTypeWitness);
}

uint64_t sub_24F79C4D4(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_24F79C510(uint64_t a1, uint64_t a2)
{
  return ValueReducers.RemoveDuplicates._fetch(_:)(a1, a2);
}

uint64_t sub_24F79C52C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 32);
}

uint64_t sub_24F79C534()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    uint64_t v0 = sub_24F8CF610();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return v0;
}

uint64_t *sub_24F79C640(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  int v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v10;
  uint64_t v12 = v7 + v10;
  if (*(_DWORD *)(v9 + 84)) {
    size_t v13 = *(void *)(v9 + 64);
  }
  else {
    size_t v13 = *(void *)(v9 + 64) + 1;
  }
  unsigned int v14 = v10 | *(_DWORD *)(v6 + 80) & 0xF8;
  int v15 = (*(_DWORD *)(v6 + 80) | v10) & 0x100000;
  if (v14 > 7 || v15 != 0 || ((v13 + (v12 & ~v11) + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + (((v14 | 7) + 16) & ~(unint64_t)(v14 | 7)));
  }
  else
  {
    uint64_t v19 = AssociatedTypeWitness;
    uint64_t v20 = ~v11;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    uint64_t v21 = (const void *)(((unint64_t)a2 + v12) & v20);
    if (sub_24F777048((uint64_t)v21, 1, v19))
    {
      memcpy((void *)(((unint64_t)a1 + v12) & v20), v21, v13);
    }
    else
    {
      (*(void (**)(unint64_t, const void *, uint64_t))(v9 + 16))(((unint64_t)a1 + v12) & v20, v21, v19);
      sub_24F7771BC(((unint64_t)a1 + v12) & v20, 0, 1, v19);
    }
    uint64_t v23 = (void *)(((unint64_t)v21 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v24 = v23[1];
    uint64_t v25 = (void *)(((((unint64_t)a1 + v12) & v20) + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v25 = *v23;
    v25[1] = v24;
  }
  swift_retain();
  return a1;
}

uint64_t sub_24F79C850(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(uint64_t, void))v3)(a1, *(void *)(a2 + 16));
  uint64_t v4 = *(void *)(v3 + 56) + a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v7 = (v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  if (!sub_24F777048(v7, 1, AssociatedTypeWitness)) {
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v7, AssociatedTypeWitness);
  }
  return swift_release();
}

uint64_t sub_24F79C974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, void))v5)(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  int v10 = (void *)((v6 + v9 + a1) & ~v9);
  uint64_t v11 = (const void *)((v6 + v9 + a2) & ~v9);
  if (sub_24F777048((uint64_t)v11, 1, AssociatedTypeWitness))
  {
    int v12 = *(_DWORD *)(v8 + 84);
    size_t v13 = *(void *)(v8 + 64);
    if (v12) {
      size_t v14 = v13;
    }
    else {
      size_t v14 = v13 + 1;
    }
    memcpy(v10, v11, v14);
  }
  else
  {
    unint64_t v16 = *(void (**)(void *, const void *, uint64_t))(v8 + 16);
    uint64_t v15 = v8 + 16;
    v16(v10, v11, AssociatedTypeWitness);
    sub_24F7771BC((uint64_t)v10, 0, 1, AssociatedTypeWitness);
    int v12 = *(_DWORD *)(v15 + 68);
    size_t v13 = *(void *)(v15 + 48);
  }
  if (v12) {
    size_t v17 = v13;
  }
  else {
    size_t v17 = v13 + 1;
  }
  uint64_t v18 = (uint64_t)v10 + v17 + 7;
  uint64_t v19 = (uint64_t *)(((unint64_t)v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  uint64_t v22 = (void *)(v18 & 0xFFFFFFFFFFFFFFF8);
  void *v22 = v21;
  v22[1] = v20;
  swift_retain();
  return a1;
}

uint64_t sub_24F79CAE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, void))v5)(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  int v10 = (void *)((v6 + v9 + a1) & ~v9);
  uint64_t v11 = (const void *)((v6 + v9 + a2) & ~v9);
  LODWORD(v6) = sub_24F777048((uint64_t)v10, 1, AssociatedTypeWitness);
  int v12 = sub_24F777048((uint64_t)v11, 1, AssociatedTypeWitness);
  if (v6)
  {
    if (!v12)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v10, v11, AssociatedTypeWitness);
      sub_24F7771BC((uint64_t)v10, 0, 1, AssociatedTypeWitness);
      goto LABEL_12;
    }
    int v13 = *(_DWORD *)(v8 + 84);
    size_t v14 = *(void *)(v8 + 64);
  }
  else
  {
    if (!v12)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 24))(v10, v11, AssociatedTypeWitness);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
    int v13 = *(_DWORD *)(v8 + 84);
    size_t v14 = *(void *)(v8 + 64);
  }
  if (v13) {
    size_t v15 = v14;
  }
  else {
    size_t v15 = v14 + 1;
  }
  memcpy(v10, v11, v15);
LABEL_12:
  if (*(_DWORD *)(v8 + 84)) {
    uint64_t v16 = *(void *)(v8 + 64);
  }
  else {
    uint64_t v16 = *(void *)(v8 + 64) + 1;
  }
  size_t v17 = (void *)(((unint64_t)v10 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v18 = (void *)(((unint64_t)v11 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v19 = v18[1];
  *size_t v17 = *v18;
  v17[1] = v19;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_24F79CCD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, void))v5)(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  int v10 = (void *)((v6 + v9 + a1) & ~v9);
  uint64_t v11 = (const void *)((v6 + v9 + a2) & ~v9);
  if (sub_24F777048((uint64_t)v11, 1, AssociatedTypeWitness))
  {
    int v12 = *(_DWORD *)(v8 + 84);
    size_t v13 = *(void *)(v8 + 64);
    if (v12) {
      size_t v14 = v13;
    }
    else {
      size_t v14 = v13 + 1;
    }
    memcpy(v10, v11, v14);
  }
  else
  {
    uint64_t v16 = *(void (**)(void *, const void *, uint64_t))(v8 + 32);
    uint64_t v15 = v8 + 32;
    v16(v10, v11, AssociatedTypeWitness);
    sub_24F7771BC((uint64_t)v10, 0, 1, AssociatedTypeWitness);
    int v12 = *(_DWORD *)(v15 + 52);
    size_t v13 = *(void *)(v15 + 32);
  }
  if (v12) {
    size_t v17 = v13;
  }
  else {
    size_t v17 = v13 + 1;
  }
  *(_OWORD *)(((unint64_t)v10 + v17 + 7) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_24F79CE44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, void))v5)(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  int v10 = (void *)((v6 + v9 + a1) & ~v9);
  uint64_t v11 = (const void *)((v6 + v9 + a2) & ~v9);
  LODWORD(v6) = sub_24F777048((uint64_t)v10, 1, AssociatedTypeWitness);
  int v12 = sub_24F777048((uint64_t)v11, 1, AssociatedTypeWitness);
  if (v6)
  {
    if (!v12)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(v10, v11, AssociatedTypeWitness);
      sub_24F7771BC((uint64_t)v10, 0, 1, AssociatedTypeWitness);
      goto LABEL_12;
    }
    int v13 = *(_DWORD *)(v8 + 84);
    size_t v14 = *(void *)(v8 + 64);
  }
  else
  {
    if (!v12)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 40))(v10, v11, AssociatedTypeWitness);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
    int v13 = *(_DWORD *)(v8 + 84);
    size_t v14 = *(void *)(v8 + 64);
  }
  if (v13) {
    size_t v15 = v14;
  }
  else {
    size_t v15 = v14 + 1;
  }
  memcpy(v10, v11, v15);
LABEL_12:
  if (*(_DWORD *)(v8 + 84)) {
    uint64_t v16 = *(void *)(v8 + 64);
  }
  else {
    uint64_t v16 = *(void *)(v8 + 64) + 1;
  }
  *(_OWORD *)(((unint64_t)v10 + v16 + 7) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v11 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t sub_24F79D028(int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  if (v10) {
    unsigned int v11 = v10 - 1;
  }
  else {
    unsigned int v11 = 0;
  }
  if (v11 <= v7) {
    unsigned int v12 = v7;
  }
  else {
    unsigned int v12 = v11;
  }
  if (v12 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  uint64_t v13 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  if (!v10) {
    ++v14;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v15 = AssociatedTypeWitness;
  uint64_t v16 = *(void *)(v6 + 64) + v13;
  uint64_t v17 = v14 + 7;
  if (v12 < a2)
  {
    unint64_t v18 = ((v17 + (v16 & ~v13)) & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v19 = v18 & 0xFFFFFFF8;
    if ((v18 & 0xFFFFFFF8) != 0) {
      unsigned int v20 = 2;
    }
    else {
      unsigned int v20 = a2 - v12 + 1;
    }
    if (v20 >= 0x10000) {
      LODWORD(v21) = 4;
    }
    else {
      LODWORD(v21) = 2;
    }
    if (v20 < 0x100) {
      LODWORD(v21) = 1;
    }
    if (v20 >= 2) {
      uint64_t v21 = v21;
    }
    else {
      uint64_t v21 = 0;
    }
    switch(v21)
    {
      case 1:
        int v22 = *((unsigned __int8 *)a1 + v18);
        if (!v22) {
          break;
        }
        goto LABEL_28;
      case 2:
        int v22 = *(unsigned __int16 *)((char *)a1 + v18);
        if (v22) {
          goto LABEL_28;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x24F79D280);
      case 4:
        int v22 = *(int *)((char *)a1 + v18);
        if (!v22) {
          break;
        }
LABEL_28:
        int v23 = v22 - 1;
        if (v19)
        {
          int v23 = 0;
          int v24 = *a1;
        }
        else
        {
          int v24 = 0;
        }
        return v12 + (v24 | v23) + 1;
      default:
        break;
    }
  }
  if (v7 == v12)
  {
    return sub_24F777048((uint64_t)a1, v7, v5);
  }
  uint64_t v26 = ((unint64_t)a1 + v16) & ~v13;
  if (v11 == v12)
  {
    if (v10 >= 2)
    {
      unsigned int v28 = sub_24F777048(v26, v10, v15);
      if (v28 >= 2) {
        return v28 - 1;
      }
      else {
        return 0;
      }
    }
    return 0;
  }
  unint64_t v27 = *(void *)((v17 + v26) & 0xFFFFFFFFFFFFFFF8);
  if (v27 >= 0xFFFFFFFF) {
    LODWORD(v27) = -1;
  }
  return (v27 + 1);
}

void sub_24F79D294(_DWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v12 = *(unsigned int *)(v11 + 84);
  if (v12) {
    unsigned int v13 = v12 - 1;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v13 <= v9) {
    unsigned int v14 = v9;
  }
  else {
    unsigned int v14 = v13;
  }
  if (v14 <= 0x7FFFFFFF) {
    unsigned int v14 = 0x7FFFFFFF;
  }
  uint64_t v15 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v16 = *(void *)(v8 + 64) + v15;
  uint64_t v17 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  if (!v12) {
    ++v17;
  }
  uint64_t v18 = v17 + 7;
  size_t v19 = ((v18 + (v16 & ~v15)) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v18 + (v16 & ~v15)) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v20 = a3 - v14 + 1;
  }
  else {
    unsigned int v20 = 2;
  }
  if (v20 >= 0x10000) {
    int v21 = 4;
  }
  else {
    int v21 = 2;
  }
  if (v20 < 0x100) {
    int v21 = 1;
  }
  if (v20 >= 2) {
    unsigned int v22 = v21;
  }
  else {
    unsigned int v22 = 0;
  }
  if (v14 < a3) {
    uint64_t v23 = v22;
  }
  else {
    uint64_t v23 = 0;
  }
  if (a2 > v14)
  {
    if (((v18 + (v16 & ~v15)) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v24 = a2 - v14;
    }
    else {
      int v24 = 1;
    }
    if (((v18 + (v16 & ~v15)) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v25 = ~v14 + a2;
      bzero(a1, v19);
      *a1 = v25;
    }
    switch(v23)
    {
      case 1:
        *((unsigned char *)a1 + v19) = v24;
        return;
      case 2:
        *(_WORD *)((char *)a1 + v19) = v24;
        return;
      case 3:
        goto LABEL_54;
      case 4:
        *(_DWORD *)((char *)a1 + v19) = v24;
        return;
      default:
        return;
    }
  }
  uint64_t v26 = ~v15;
  uint64_t v27 = AssociatedTypeWitness;
  switch(v23)
  {
    case 1:
      *((unsigned char *)a1 + v19) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_40;
    case 2:
      *(_WORD *)((char *)a1 + v19) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_40;
    case 3:
LABEL_54:
      __break(1u);
      JUMPOUT(0x24F79D528);
    case 4:
      *(_DWORD *)((char *)a1 + v19) = 0;
      goto LABEL_39;
    default:
LABEL_39:
      if (!a2) {
        return;
      }
LABEL_40:
      if (v9 == v14)
      {
        uint64_t v28 = (uint64_t)a1;
        uint64_t v29 = a2;
        uint64_t v12 = v9;
        uint64_t v27 = v7;
      }
      else
      {
        uint64_t v28 = ((unint64_t)a1 + v16) & v26;
        if (v13 != v14)
        {
          uint64_t v30 = (void *)((v18 + v28) & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v31 = a2 ^ 0x80000000;
            v30[1] = 0;
          }
          else
          {
            uint64_t v31 = (a2 - 1);
          }
          *uint64_t v30 = v31;
          return;
        }
        uint64_t v29 = (a2 + 1);
      }
      sub_24F7771BC(v28, v29, v12, v27);
      return;
  }
}

uint64_t sub_24F79D550()
{
  return sub_24F77DD34();
}

uint64_t sub_24F79D55C()
{
  return sub_24F79C0E4();
}

uint64_t NSDate.databaseValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_24F8CE970();
  sub_24F770DF4();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  sub_24F77C5E8();
  sub_24F8CE960();
  if (qword_26B1F5A50 != -1) {
    swift_once();
  }
  uint64_t v7 = (void *)qword_26B1F5A48;
  uint64_t v8 = (void *)sub_24F8CE930();
  id v9 = objc_msgSend(v7, sel_stringFromDate_, v8);

  uint64_t v10 = sub_24F8CED80();
  uint64_t v12 = v11;

  *(void *)a1 = v10;
  *(void *)(a1 + 8) = v12;
  *(unsigned char *)(a1 + 16) = 2;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v1, v3);
}

void Date.databaseValue.getter(uint64_t a1@<X8>)
{
  if (qword_26B1F5A50 != -1) {
    swift_once();
  }
  unint64_t v2 = (void *)qword_26B1F5A48;
  uint64_t v3 = (void *)sub_24F8CE930();
  id v4 = objc_msgSend(v2, sel_stringFromDate_, v3);

  uint64_t v5 = sub_24F8CED80();
  uint64_t v7 = v6;

  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = 2;
}

uint64_t static NSDate.fromDatabaseValue(_:)(long long *a1)
{
  uint64_t v4 = sub_24F781274(&qword_26B1F7240);
  uint64_t v5 = sub_24F77AD34(v4);
  MEMORY[0x270FA5388](v5);
  uint64_t v6 = sub_24F77E5FC();
  sub_24F770DF4();
  uint64_t v8 = v7;
  MEMORY[0x270FA5388](v9);
  sub_24F76B830();
  uint64_t v12 = v11 - v10;
  LOBYTE(v10) = *((unsigned char *)a1 + 16);
  long long v15 = *a1;
  char v16 = v10;
  static Date.fromDatabaseValue(_:)((uint64_t)&v15, v2);
  if (sub_24F777048(v2, 1, v6) == 1)
  {
    sub_24F77841C(v2, &qword_26B1F7240);
    return 0;
  }
  else
  {
    sub_24F775AF4();
    v14();
    sub_24F83C41C(v1, (uint64_t)&v15);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v12, v6);
    return v15;
  }
}

uint64_t static Date.fromDatabaseValue(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_24F8CEDD0();
  uint64_t v6 = sub_24F77AD34(v5);
  MEMORY[0x270FA5388](v6);
  sub_24F77ED80();
  uint64_t v7 = sub_24F781274(&qword_26B1F58F0);
  uint64_t v8 = sub_24F77AD34(v7);
  MEMORY[0x270FA5388](v8);
  sub_24F77C5E8();
  uint64_t v9 = type metadata accessor for DatabaseDateComponents();
  sub_24F770E70();
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  unsigned int v13 = &v26[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v11);
  long long v15 = &v26[-v14];
  uint64_t v16 = *(void *)a1;
  unint64_t v17 = *(void *)(a1 + 8);
  unsigned int v18 = *(unsigned __int8 *)(a1 + 16);
  if (v18 != 3)
  {
    if (v18 == 2)
    {
      swift_bridgeObjectRetain();
      uint64_t v19 = v16;
      goto LABEL_6;
    }
LABEL_8:
    sub_24F7771BC(v2, 1, 1, v9);
    goto LABEL_9;
  }
  sub_24F78419C(*(void *)a1, *(void *)(a1 + 8));
  sub_24F8CEDC0();
  uint64_t v19 = sub_24F8CEDA0();
  unint64_t v21 = v20;
  sub_24F781F10(v16, v17, 3);
  if (!v21) {
    goto LABEL_8;
  }
  unint64_t v17 = v21;
LABEL_6:
  sub_24F79F168(v19, v17, v2);
  swift_bridgeObjectRelease();
  if (sub_24F777048(v2, 1, v9) != 1)
  {
    sub_24F79F27C(v2, (uint64_t)v15);
    sub_24F79F2E0((uint64_t)v15, (uint64_t)v13);
    Date.init(databaseDateComponents:)((uint64_t)v13, a2);
    return sub_24F79F344((uint64_t)v15);
  }
LABEL_9:
  sub_24F77841C(v2, &qword_26B1F58F0);
  if (v18 > 1)
  {
    uint64_t v23 = sub_24F8CE970();
    uint64_t v24 = a2;
    uint64_t v25 = 1;
  }
  else
  {
    sub_24F8CE940();
    uint64_t v23 = sub_24F8CE970();
    uint64_t v24 = a2;
    uint64_t v25 = 0;
  }
  return sub_24F7771BC(v24, v25, 1, v23);
}

uint64_t sub_24F79DADC@<X0>(uint64_t a1@<X8>)
{
  return NSDate.databaseValue.getter(a1);
}

uint64_t sub_24F79DB00@<X0>(long long *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = static NSDate.fromDatabaseValue(_:)(a1);
  *a2 = result;
  return result;
}

uint64_t Date.init(databaseDateComponents:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_24F781274(&qword_26B1F7240);
  uint64_t v6 = sub_24F77AD34(v5);
  MEMORY[0x270FA5388](v6);
  sub_24F773918();
  uint64_t v7 = sub_24F8CE970();
  sub_24F770DF4();
  uint64_t v9 = v8;
  MEMORY[0x270FA5388](v10);
  sub_24F76B830();
  uint64_t v13 = v12 - v11;
  if (*(unsigned __int8 *)(a1 + *(int *)(type metadata accessor for DatabaseDateComponents() + 20)) > 3u)
  {
    sub_24F79F344(a1);
  }
  else
  {
    if (qword_26B1F5358 != -1) {
      swift_once();
    }
    uint64_t v14 = sub_24F8CEA50();
    sub_24F79F3A0(v14, (uint64_t)qword_26B1F5390);
    sub_24F8CEA20();
    if (sub_24F777048(v2, 1, v7) != 1)
    {
      sub_24F775AF4();
      v16();
      sub_24F8CE920();
      sub_24F8CE910();
      sub_24F79F344(a1);
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v13, v7);
      uint64_t v15 = 0;
      return sub_24F7771BC(a2, v15, 1, v7);
    }
    sub_24F79F344(a1);
    sub_24F77841C(v2, &qword_26B1F7240);
  }
  uint64_t v15 = 1;
  return sub_24F7771BC(a2, v15, 1, v7);
}

void Date.init(julianDay:)(uint64_t a1@<X8>)
{
  uint64_t v6 = sub_24F781274(&qword_26B1F7240);
  uint64_t v7 = sub_24F77AD34(v6);
  MEMORY[0x270FA5388](v7);
  uint64_t v8 = sub_24F77E5FC();
  sub_24F770DF4();
  uint64_t v10 = v9;
  MEMORY[0x270FA5388](v11);
  sub_24F773918();
  uint64_t v12 = sub_24F781274(&qword_26B1F5710);
  uint64_t v13 = sub_24F77AD34(v12);
  MEMORY[0x270FA5388](v13);
  sub_24F77C5E8();
  uint64_t v14 = sub_24F781274(&qword_26B1F5350);
  uint64_t v15 = sub_24F77AD34(v14);
  MEMORY[0x270FA5388](v15);
  sub_24F77ED80();
  sub_24F8CE7E0();
  sub_24F770DF4();
  MEMORY[0x270FA5388](v16);
  sub_24F76B830();
  sub_24F780640();
  if (v18)
  {
    __break(1u);
    goto LABEL_49;
  }
  if (v17 <= -9.22337204e18)
  {
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  sub_24F77AD40();
  if (!v20) {
    goto LABEL_50;
  }
  uint64_t v21 = (uint64_t)v19 + 43200000;
  if (__OFADD__((uint64_t)v19, 43200000))
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  uint64_t v22 = v21 / 86400000;
  double v23 = ((double)(v21 / 86400000) + -1867216.25) / 36524.25;
  if ((~*(void *)&v23 & 0x7FF0000000000000) == 0)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v23 <= -9.22337204e18)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  if (v23 >= 9.22337204e18)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  uint64_t v24 = v22 + 1 + (uint64_t)v23;
  if (__OFADD__(v22 + 1, (uint64_t)v23))
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  uint64_t v25 = (uint64_t)v23 / 4;
  BOOL v26 = __OFSUB__(v24, v25);
  uint64_t v27 = v24 - v25;
  if (v26)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  uint64_t v28 = v27 + 1524;
  if (__OFADD__(v27, 1524))
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  double v29 = ((double)v28 + -122.1) / 365.25;
  if ((~*(void *)&v29 & 0x7FF0000000000000) == 0)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  if (v29 <= -9.22337204e18)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  if (v29 >= 9.22337204e18)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  uint64_t v30 = (uint64_t)v29;
  uint64_t v31 = 36525 * ((uint64_t)v29 & 0x7FFF) / 0x64;
  BOOL v26 = __OFSUB__(v28, v31);
  uint64_t v32 = v28 - v31;
  if (v26)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  double v33 = (double)v32 / 30.6001;
  if ((~*(void *)&v33 & 0x7FF0000000000000) == 0)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (v33 <= -9.22337204e18)
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (v33 >= 9.22337204e18)
  {
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  double v34 = (double)(uint64_t)v33 * 30.6001;
  if ((~*(void *)&v34 & 0x7FF0000000000000) == 0)
  {
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  if (v34 <= -9.22337204e18)
  {
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  if (v34 >= 9.22337204e18)
  {
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  if (__OFSUB__(v32, (uint64_t)v34))
  {
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }
  uint64_t v51 = v10;
  uint64_t v35 = (uint64_t)v33;
  uint64_t v36 = (uint64_t)v33 - 13;
  if ((uint64_t)v33 <= 13)
  {
    uint64_t v36 = v35 - 1;
    if (__OFSUB__(v35, 1))
    {
      __break(1u);
      goto LABEL_82;
    }
  }
  if (v36 < 3)
  {
LABEL_29:
    if (!__OFADD__(v30, -4715)) {
      goto LABEL_30;
    }
LABEL_82:
    __break(1u);
    return;
  }
  if (__OFADD__(v30, -4716))
  {
    __break(1u);
    goto LABEL_29;
  }
LABEL_30:
  sub_24F780640();
  if (v18)
  {
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  if (v37 <= -9.22337204e18)
  {
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  sub_24F77AD40();
  if (!v20) {
    goto LABEL_71;
  }
  uint64_t v50 = v3;
  uint64_t v54 = v2;
  uint64_t v39 = (uint64_t)v38 % 3600;
  if (__OFSUB__((uint64_t)v38, 3600 * ((uint64_t)v38 / 3600)))
  {
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
  BOOL v26 = __OFSUB__(v39, 60 * (v39 / 60));
  uint64_t v40 = v39 % 60;
  if (v26)
  {
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  uint64_t v52 = v8;
  uint64_t v53 = a1;
  double v41 = v38 - (double)(uint64_t)v38 + (double)v40;
  uint64_t v8 = sub_24F8CEA50();
  sub_24F7771BC(v4, 1, 1, v8);
  uint64_t v42 = sub_24F8CEA80();
  sub_24F7771BC(v1, 1, 1, v42);
  sub_24F8CE7C0();
  sub_24F8CE750();
  sub_24F8CE770();
  sub_24F8CE710();
  sub_24F8CE730();
  sub_24F8CE790();
  if ((~*(void *)&v41 & 0x7FF0000000000000) == 0)
  {
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  if (v41 <= -9.22337204e18)
  {
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }
  if (v41 >= 9.22337204e18)
  {
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
  sub_24F8CE7B0();
  sub_24F780640();
  if (v18)
  {
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
  if (v43 <= -9.22337204e18)
  {
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }
  sub_24F77AD40();
  if (!v20) {
    goto LABEL_79;
  }
  sub_24F8CE6F0();
  if (qword_26B1F5358 != -1) {
LABEL_80:
  }
    swift_once();
  sub_24F79F3A0(v8, (uint64_t)qword_26B1F5390);
  sub_24F8CEA20();
  if (sub_24F777048(v54, 1, v52) == 1)
  {
    uint64_t v44 = sub_24F781320();
    v45(v44);
    sub_24F77841C(v54, &qword_26B1F7240);
    uint64_t v46 = 1;
  }
  else
  {
    sub_24F775AF4();
    v47();
    sub_24F8CE920();
    sub_24F8CE910();
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v50, v52);
    uint64_t v48 = sub_24F781320();
    v49(v48);
    uint64_t v46 = 0;
  }
  sub_24F7771BC(v53, v46, 1, v52);
}

uint64_t Date.init(sqliteStatement:index:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_24F781274(&qword_26B1F7240);
  uint64_t v3 = sub_24F77AD34(v2);
  MEMORY[0x270FA5388](v3);
  sub_24F77BBBC();
  uint64_t v65 = v4;
  sub_24F8CE7E0();
  sub_24F770DF4();
  uint64_t v63 = v6;
  uint64_t v64 = v5;
  MEMORY[0x270FA5388](v5);
  sub_24F77BBBC();
  uint64_t v62 = v7;
  uint64_t v8 = sub_24F781274(&qword_26B1F58F0);
  uint64_t v9 = sub_24F77AD34(v8);
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v57 - v13;
  uint64_t v15 = type metadata accessor for DatabaseDateComponents();
  sub_24F770E70();
  MEMORY[0x270FA5388](v16);
  sub_24F7829EC();
  uint64_t v60 = v17;
  uint64_t v19 = MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v57 - v20;
  uint64_t v22 = MEMORY[0x270FA5388](v19);
  uint64_t v24 = (char *)&v57 - v23;
  MEMORY[0x270FA5388](v22);
  uint64_t v61 = (uint64_t)&v57 - v25;
  uint64_t v66 = sub_24F8CE970();
  sub_24F770DF4();
  uint64_t v27 = v26;
  MEMORY[0x270FA5388](v28);
  sub_24F7829EC();
  uint64_t v59 = v29;
  MEMORY[0x270FA5388](v30);
  uint64_t v32 = (char *)&v57 - v31;
  double v33 = (sqlite3_stmt *)sub_24F77B4B8();
  int v35 = sqlite3_column_type(v33, v34);
  if ((v35 - 1) >= 2)
  {
    if (v35 == 3)
    {
      uint64_t v58 = a1;
      double v41 = (sqlite3_stmt *)sub_24F77B4B8();
      double v43 = sqlite3_column_text(v41, v42);
      if (v43)
      {
        uint64_t v44 = (uint64_t)v43;
        uint64_t v45 = (sqlite3_stmt *)sub_24F77B4B8();
        int v47 = sqlite3_column_bytes(v45, v46);
        SQLiteDateParser.components(cString:length:)(v44, v47, (uint64_t)v14);
        sub_24F79F3D8((uint64_t)v14, (uint64_t)v12);
        if (sub_24F777048((uint64_t)v12, 1, v15) != 1)
        {
          sub_24F79F27C((uint64_t)v12, (uint64_t)v21);
          uint64_t v50 = v62;
          uint64_t v49 = v63;
          uint64_t v51 = v64;
          (*(void (**)(uint64_t, char *, uint64_t))(v63 + 16))(v62, v21, v64);
          char v52 = v21[*(int *)(v15 + 20)];
          sub_24F79F344((uint64_t)v21);
          v24[*(int *)(v15 + 20)] = v52;
          (*(void (**)(char *, uint64_t, uint64_t))(v49 + 32))(v24, v50, v51);
          uint64_t v53 = v61;
          sub_24F79F27C((uint64_t)v24, v61);
          uint64_t v54 = v60;
          sub_24F79F2E0(v53, v60);
          uint64_t v55 = v65;
          Date.init(databaseDateComponents:)(v54, v65);
          uint64_t v39 = v66;
          if (sub_24F777048(v55, 1, v66) == 1)
          {
            sub_24F79F344(v53);
            sub_24F77841C(v55, &qword_26B1F7240);
            uint64_t v40 = 1;
            a1 = v58;
            return sub_24F7771BC(a1, v40, 1, v39);
          }
          double v38 = *(void (**)(void))(v27 + 32);
          uint64_t v56 = v59;
          sub_24F775AF4();
          v38();
          sub_24F8CE920();
          sub_24F8CE910();
          (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v56, v39);
          sub_24F79F344(v53);
          a1 = v58;
          goto LABEL_3;
        }
        sub_24F77841C((uint64_t)v12, &qword_26B1F58F0);
      }
      uint64_t v40 = 1;
      a1 = v58;
    }
    else
    {
      uint64_t v40 = 1;
    }
    uint64_t v39 = v66;
    return sub_24F7771BC(a1, v40, 1, v39);
  }
  uint64_t v36 = (sqlite3_stmt *)sub_24F77B4B8();
  sqlite3_column_double(v36, v37);
  sub_24F8CE940();
  double v38 = *(void (**)(void))(v27 + 32);
  uint64_t v39 = v66;
LABEL_3:
  ((void (*)(uint64_t, char *, uint64_t))v38)(a1, v32, v39);
  uint64_t v40 = 0;
  return sub_24F7771BC(a1, v40, 1, v39);
}

uint64_t sub_24F79E7FC@<X0>(sqlite3_stmt *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v59 = a4;
  uint64_t v7 = sub_24F781274(&qword_26B1F7240);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v58 = (uint64_t)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_24F8CE7E0();
  uint64_t v56 = *(void *)(v9 - 8);
  uint64_t v57 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v55 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_24F781274(&qword_26B1F58F0);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v50 - v15;
  uint64_t v17 = type metadata accessor for DatabaseDateComponents();
  uint64_t v18 = MEMORY[0x270FA5388](v17);
  uint64_t v53 = (uint64_t)&v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v50 - v21;
  uint64_t v23 = MEMORY[0x270FA5388](v20);
  uint64_t v25 = (char *)&v50 - v24;
  uint64_t v26 = MEMORY[0x270FA5388](v23);
  uint64_t v54 = (uint64_t)&v50 - v27;
  uint64_t v28 = *(void *)(a3 - 8);
  uint64_t v29 = MEMORY[0x270FA5388](v26);
  char v52 = (char *)&v50 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v29);
  uint64_t v32 = (char *)&v50 - v31;
  int v33 = sqlite3_column_type(a1, a2);
  if ((v33 - 1) >= 2)
  {
    if (v33 == 3)
    {
      uint64_t v51 = a3;
      int v37 = sqlite3_column_text(a1, a2);
      if (v37)
      {
        uint64_t v38 = (uint64_t)v37;
        int v39 = sqlite3_column_bytes(a1, a2);
        SQLiteDateParser.components(cString:length:)(v38, v39, (uint64_t)v16);
        sub_24F79F3D8((uint64_t)v16, (uint64_t)v14);
        if (sub_24F777048((uint64_t)v14, 1, v17) != 1)
        {
          sub_24F79F27C((uint64_t)v14, (uint64_t)v22);
          int v42 = v55;
          uint64_t v41 = v56;
          uint64_t v43 = v57;
          (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v55, v22, v57);
          char v44 = v22[*(int *)(v17 + 20)];
          sub_24F79F344((uint64_t)v22);
          v25[*(int *)(v17 + 20)] = v44;
          (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v25, v42, v43);
          uint64_t v45 = v54;
          sub_24F79F27C((uint64_t)v25, v54);
          uint64_t v46 = v53;
          sub_24F79F2E0(v45, v53);
          uint64_t v47 = v58;
          Date.init(databaseDateComponents:)(v46, v58);
          a3 = v51;
          int v48 = sub_24F777048(v47, 1, v51);
          uint64_t v35 = v59;
          if (v48 == 1)
          {
            sub_24F79F344(v45);
            sub_24F77841C(v47, &qword_26B1F7240);
            uint64_t v36 = 1;
            return sub_24F7771BC(v35, v36, 1, a3);
          }
          int v34 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 32);
          uint64_t v49 = v52;
          v34(v52, v47, a3);
          sub_24F8CE920();
          sub_24F8CE910();
          (*(void (**)(char *, uint64_t))(v28 + 8))(v49, a3);
          sub_24F79F344(v45);
          goto LABEL_3;
        }
        sub_24F77841C((uint64_t)v14, &qword_26B1F58F0);
      }
      uint64_t v36 = 1;
      a3 = v51;
    }
    else
    {
      uint64_t v36 = 1;
    }
    uint64_t v35 = v59;
    return sub_24F7771BC(v35, v36, 1, a3);
  }
  sqlite3_column_double(a1, a2);
  sub_24F8CE940();
  int v34 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 32);
  uint64_t v35 = v59;
LABEL_3:
  v34((char *)v35, (uint64_t)v32, a3);
  uint64_t v36 = 0;
  return sub_24F7771BC(v35, v36, 1, a3);
}

id sub_24F79ECE0()
{
  id result = sub_24F79ED00();
  qword_26B1F5A48 = (uint64_t)result;
  return result;
}

id sub_24F79ED00()
{
  uint64_t v0 = sub_24F781274(&qword_26B1F5710);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v12 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_24F8CE9F0();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08790]), sel_init);
  sub_24F79F4BC(0xD000000000000017, 0x800000024F8D0F90, v7);
  sub_24F8CE9D0();
  uint64_t v8 = (void *)sub_24F8CE9E0();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  objc_msgSend(v7, sel_setLocale_, v8);

  sub_24F8CEA60();
  uint64_t v9 = sub_24F8CEA80();
  uint64_t v10 = 0;
  if (sub_24F777048((uint64_t)v2, 1, v9) != 1)
  {
    uint64_t v10 = (void *)sub_24F8CEA70();
    (*(void (**)(char *, uint64_t))(*(void *)(v9 - 8) + 8))(v2, v9);
  }
  objc_msgSend(v7, sel_setTimeZone_, v10);

  return v7;
}

uint64_t sub_24F79EF14()
{
  uint64_t v0 = sub_24F8CEA50();
  sub_24F79F440(v0, qword_26B1F5390);
  sub_24F79F3A0(v0, (uint64_t)qword_26B1F5390);
  return sub_24F79EF60();
}

uint64_t sub_24F79EF60()
{
  uint64_t v0 = sub_24F781274(&qword_26B1F5710);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_24F781274(&qword_26B1F5388);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_24F8CEA00();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x263F07740], v6);
  sub_24F8CEA10();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  sub_24F8CE9D0();
  uint64_t v10 = sub_24F8CE9F0();
  sub_24F7771BC((uint64_t)v5, 0, 1, v10);
  sub_24F8CEA30();
  sub_24F8CEA60();
  uint64_t v11 = sub_24F8CEA80();
  uint64_t result = sub_24F777048((uint64_t)v2, 1, v11);
  if (result != 1) {
    return sub_24F8CEA40();
  }
  __break(1u);
  return result;
}

uint64_t sub_24F79F168@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    sub_24F781274(&qword_26B1F58F0);
    return sub_24F8CF7C0();
  }
  if ((a2 & 0x2000000000000000) != 0)
  {
    v9[0] = a1;
    v9[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    size_t v5 = strlen((const char *)v9);
    uint64_t v7 = (const char *)v9;
    uint64_t v6 = a3;
  }
  else
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      uint64_t v4 = (const char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      uint64_t v4 = (const char *)sub_24F8CF860();
      if (!v4)
      {
        size_t v5 = strlen(0);
        uint64_t v6 = a3;
        uint64_t v7 = 0;
        return SQLiteDateParser.components(cString:length:)((uint64_t)v7, v5, v6);
      }
    }
    size_t v5 = strlen(v4);
    uint64_t v6 = a3;
    uint64_t v7 = v4;
  }
  return SQLiteDateParser.components(cString:length:)((uint64_t)v7, v5, v6);
}

uint64_t sub_24F79F27C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DatabaseDateComponents();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_24F79F2E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DatabaseDateComponents();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_24F79F344(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DatabaseDateComponents();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_24F79F3A0(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_24F79F3D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24F781274(&qword_26B1F58F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *sub_24F79F440(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_24F79F4A4@<X0>(const char *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24F864E74(a1, a2);
}

void sub_24F79F4BC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (id)sub_24F8CED70();
  swift_bridgeObjectRelease();
  objc_msgSend(a3, sel_setDateFormat_, v4);
}

uint64_t Database.add(transactionObserver:extent:)(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t ObjectType = swift_getObjectType();
  return sub_24F7A1D18(a1, a3, v3, ObjectType, a2);
}

uint64_t Database.remove(transactionObserver:)()
{
  swift_getObjectType();
  return sub_24F7A18CC();
}

uint64_t sub_24F79F5C8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62) {
    goto LABEL_12;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = sub_24F8CF9E0())
  {
    uint64_t v7 = 4;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        MEMORY[0x253364060](v7 - 4, a1);
      }
      else {
        swift_retain();
      }
      uint64_t v8 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      char v9 = sub_24F79F9D8(a2, a3, 0, 1);
      swift_release();
      if ((v9 & 1) == 0)
      {
        ++v7;
        if (v8 != v6) {
          continue;
        }
      }
      goto LABEL_14;
    }
    __break(1u);
LABEL_12:
    swift_bridgeObjectRetain();
  }
  char v9 = 0;
LABEL_14:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t Database.afterNextTransactionCommit(_:)(uint64_t a1, uint64_t a2)
{
  _s13CommitHandlerCMa();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  swift_retain();
  sub_24F7A1C24();
  return swift_release();
}

BOOL static Database.TransactionObservationExtent.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t Database.TransactionObservationExtent.hash(into:)()
{
  return sub_24F8CFF40();
}

uint64_t Database.TransactionObservationExtent.hashValue.getter()
{
  return sub_24F8CFF80();
}

uint64_t sub_24F79F800()
{
  return sub_24F8CFF80();
}

void *sub_24F79F844()
{
  return sub_24F79F8AC(*(void *)(*(void *)(v0 + 48) + 16) != 0);
}

void *sub_24F79F858(uint64_t a1)
{
  *(void *)(v1 + 48) = a1;
  swift_bridgeObjectRelease();
  return sub_24F79F844();
}

void *sub_24F79F88C(void *result)
{
  if (*(unsigned char *)(v1 + 56) != (result & 1))
  {
    if (*(unsigned char *)(v1 + 56)) {
      return sub_24F7A0AB0();
    }
    else {
      return sub_24F7A0BFC();
    }
  }
  return result;
}

void *sub_24F79F8AC(char a1)
{
  uint64_t v2 = (void *)*(unsigned __int8 *)(v1 + 56);
  *(unsigned char *)(v1 + 56) = a1;
  return sub_24F79F88C(v2);
}

uint64_t sub_24F79F8BC(uint64_t a1)
{
  type metadata accessor for SavepointStack();
  uint64_t v3 = swift_allocObject();
  uint64_t v4 = MEMORY[0x263F8EE78];
  *(void *)(v3 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v3 + 24) = v4;
  *(void *)(v1 + 32) = 0;
  *(void *)(v1 + 40) = v4;
  *(void *)(v1 + 48) = v4;
  *(unsigned char *)(v1 + 56) = 0;
  *(void *)(v1 + 16) = a1;
  *(void *)(v1 + 24) = v3;
  swift_unownedRetain();
  swift_release();
  return v1;
}

uint64_t sub_24F79F918(uint64_t a1, uint64_t a2)
{
  return sub_24F7A1BD0(a2) & 1;
}

uint64_t sub_24F79F970(uint64_t a1, uint64_t a2)
{
  sub_24F77C600();
  swift_bridgeObjectRetain();
  unint64_t v4 = swift_bridgeObjectRetain();
  sub_24F79F5C8(v4, a1, a2);
  sub_24F771D7C();
  return a2 & 1;
}

uint64_t sub_24F79F9D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((*(unsigned char *)(v4 + 17) & 1) != 0 || !sub_24F7A0DA0()) {
    return 0;
  }
  uint64_t v10 = v9;
  uint64_t ObjectType = swift_getObjectType();
  char v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 8))(a1, a2, a3, a4, ObjectType, v10);
  swift_unknownObjectRelease();
  return v12 & 1;
}

uint64_t sub_24F79FA74(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v7; uint64_t v7 = sub_24F8CF9E0())
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    uint64_t v9 = 4;
    unsigned int v17 = a5;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v10 = MEMORY[0x253364060](v9 - 4, a1);
      }
      else
      {
        uint64_t v10 = *(void *)(a1 + 8 * v9);
        swift_retain();
      }
      uint64_t v11 = v9 - 3;
      if (__OFADD__(v9 - 4, 1)) {
        break;
      }
      if (sub_24F79F9D8(a2, a3, a4, a5))
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_24F787798();
          uint64_t v8 = v14;
        }
        unint64_t v12 = *(void *)(v8 + 16);
        if (v12 >= *(void *)(v8 + 24) >> 1)
        {
          sub_24F787798();
          uint64_t v8 = v15;
        }
        *(void *)(v8 + 16) = v12 + 1;
        uint64_t v13 = (void *)(v8 + 24 * v12);
        v13[5] = 0;
        v13[6] = 0;
        v13[4] = v10;
        a5 = v17;
      }
      else
      {
        swift_release();
      }
      ++v9;
      if (v11 == v7) {
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
  }
  uint64_t v8 = MEMORY[0x263F8EE78];
LABEL_20:
  swift_bridgeObjectRelease();
  sub_24F7A203C(a2, a3, a4, a5);
  return v8;
}

uint64_t sub_24F79FC1C(unint64_t a1, uint64_t a2)
{
  unint64_t v3 = a1;
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = sub_24F8CF9E0())
  {
    unint64_t v19 = v3 & 0xC000000000000001;
    uint64_t v5 = MEMORY[0x263F8EE78];
    uint64_t v6 = 4;
    uint64_t v17 = v4;
    unint64_t v18 = v3;
    while (1)
    {
      if (v19)
      {
        uint64_t v7 = MEMORY[0x253364060](v6 - 4, v3);
      }
      else
      {
        uint64_t v7 = *(void *)(v3 + 8 * v6);
        swift_retain();
      }
      uint64_t v8 = v6 - 3;
      if (__OFADD__(v6 - 4, 1)) {
        break;
      }
      swift_retain();
      uint64_t v9 = swift_bridgeObjectRetain();
      sub_24F79FDE8(v9);
      uint64_t v11 = v10;
      if (*(void *)(v10 + 16))
      {
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_24F787798();
          uint64_t v5 = v14;
        }
        unint64_t v12 = *(void *)(v5 + 16);
        if (v12 >= *(void *)(v5 + 24) >> 1)
        {
          sub_24F787798();
          uint64_t v5 = v15;
        }
        *(void *)(v5 + 16) = v12 + 1;
        uint64_t v13 = (void *)(v5 + 24 * v12);
        v13[4] = v7;
        v13[5] = v11;
        v13[6] = a2;
        uint64_t v4 = v17;
        unint64_t v3 = v18;
      }
      else
      {
        swift_release();
        swift_bridgeObjectRelease();
      }
      ++v6;
      if (v8 == v4) {
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
  }
  uint64_t v5 = MEMORY[0x263F8EE78];
LABEL_20:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5;
}

void sub_24F79FDE8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  swift_retain();
  if (v2)
  {
    unint64_t v3 = 0;
    uint64_t v4 = a1 + 56;
    uint64_t v15 = MEMORY[0x263F8EE78];
    do
    {
      uint64_t v5 = (unsigned __int8 *)(v4 + 32 * v3);
      unint64_t v6 = v3;
      while (1)
      {
        if (v6 >= *(void *)(a1 + 16))
        {
          __break(1u);
          return;
        }
        uint64_t v7 = *((void *)v5 - 3);
        uint64_t v8 = *((void *)v5 - 2);
        uint64_t v9 = *((void *)v5 - 1);
        unint64_t v3 = v6 + 1;
        uint64_t v10 = *v5;
        sub_24F7A1FC8(v7, v8, v9, *v5);
        if (sub_24F79F9D8(v7, v8, v9, v10)) {
          break;
        }
        sub_24F7A203C(v7, v8, v9, v10);
        v5 += 32;
        ++v6;
        if (v2 == v3) {
          goto LABEL_13;
        }
      }
      uint64_t v11 = v15;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_24F795D4C();
        uint64_t v11 = v15;
      }
      unint64_t v12 = *(void *)(v11 + 16);
      unint64_t v13 = v12 + 1;
      if (v12 >= *(void *)(v11 + 24) >> 1)
      {
        sub_24F795D4C();
        unint64_t v13 = v12 + 1;
        uint64_t v11 = v15;
      }
      *(void *)(v11 + 16) = v13;
      uint64_t v15 = v11;
      uint64_t v14 = v11 + 32 * v12;
      *(void *)(v14 + 32) = v7;
      *(void *)(v14 + 40) = v8;
      *(void *)(v14 + 48) = v9;
      *(unsigned char *)(v14 + 56) = v10;
      uint64_t v4 = a1 + 56;
    }
    while (v2 - 1 != v6);
  }
LABEL_13:
  swift_release_n();
  swift_bridgeObjectRelease();
}

void sub_24F79FFA4()
{
  sub_24F79F858(MEMORY[0x263F8EE78]);
  type metadata accessor for SchedulingWatchdog();
  uint64_t v1 = sub_24F7834B0();
  if (!v1)
  {
    __break(1u);
    JUMPOUT(0x24F7A0094);
  }
  *(void *)(v1 + 24) = 0;
  swift_release();
  swift_release();
  uint64_t v2 = *(void **)(v0 + 32);
  *(void *)(v0 + 32) = 0;
  sub_24F781A48(v2);
  sub_24F77D5B0(v2);
  if ((unint64_t)v2 >= 2)
  {
    if (v2 == (void *)2)
    {
      sub_24F7A07F4();
    }
    else
    {
      swift_unownedRetainStrong();
      sub_24F77D2E8();
      id v3 = v2;
      swift_release();
      sub_24F7A07F4();
      swift_willThrow();
      sub_24F77D5B0(v2);
    }
  }
  else
  {
    sub_24F77D5B0(v2);
  }
}

uint64_t sub_24F7A00A4(uint64_t result)
{
  id v3 = (void *)result;
  uint64_t v4 = *(void *)(v1 + 24);
  if (*(void *)(*(void *)(v4 + 24) + 16))
  {
    uint64_t v71 = &type metadata for DatabaseEvent;
    uint64_t v72 = &off_2700FED90;
    *(void *)&long long v70 = swift_allocObject();
    uint64_t v5 = v3[3];
    uint64_t v6 = v3[4];
    sub_24F7811D0(v3, v5);
    uint64_t v7 = *(void (**)(void *, uint64_t, uint64_t))(v6 + 24);
    swift_retain();
    v7(v3, v5, v6);
    uint64_t v8 = *(void *)(v1 + 48);
    sub_24F794DE0(&v70, (uint64_t)&v67);
    *((void *)&v69 + 1) = v8;
    swift_bridgeObjectRetain();
    sub_24F786B54();
    uint64_t v9 = *(void *)(*(void *)(v4 + 16) + 16);
    sub_24F786EE4();
    uint64_t v10 = *(void *)(v4 + 16);
    *(void *)(v10 + 16) = v9 + 1;
    uint64_t v11 = (_OWORD *)(v10 + 48 * v9);
    long long v12 = v67;
    long long v13 = v69;
    v11[3] = v68;
    v11[4] = v13;
    v11[2] = v12;
    return swift_release();
  }
  uint64_t v14 = *(void *)(v1 + 48);
  uint64_t v62 = *(void *)(v14 + 16);
  if (v62)
  {
    uint64_t v61 = v14 + 32;
    uint64_t result = swift_bridgeObjectRetain();
    unint64_t v15 = 0;
    uint64_t v59 = v14;
    uint64_t v60 = v3;
    while (1)
    {
      if (v15 >= *(void *)(v14 + 16))
      {
        __break(1u);
        return result;
      }
      uint64_t v16 = v61 + 24 * v15;
      uint64_t v17 = *(void *)(v16 + 8);
      uint64_t v18 = *(void *)(v16 + 16);
      sub_24F7A2DC8((uint64_t)v3, (uint64_t)&v67);
      if (!v17)
      {
        swift_retain();
        goto LABEL_66;
      }
      uint64_t v19 = *(void *)(v17 + 16);
      unint64_t v64 = v15;
      uint64_t v63 = v17;
      if (v19)
      {
        int v20 = BYTE8(v69);
        swift_retain();
        sub_24F777E70(v17);
        swift_bridgeObjectRetain();
        uint64_t v21 = (unsigned char *)(v17 + 56);
        int v65 = v20;
        while (1)
        {
          uint64_t v23 = *((void *)v21 - 3);
          uint64_t v22 = *((void *)v21 - 2);
          int v24 = *v21;
          if (v20)
          {
            if (v20 == 1)
            {
              if (v24 == 1)
              {
                char v25 = BYTE8(v68);
                sub_24F77D6B8(&v67);
                sub_24F77BF50();
                if (v2() == v23 && v22 == v26)
                {
                  swift_bridgeObjectRelease();
                  uint64_t v55 = sub_24F785818();
LABEL_64:
                  sub_24F7A203C(v55, v56, v57, v58);
LABEL_65:
                  uint64_t v17 = v63;
                  swift_bridgeObjectRelease();
                  uint64_t v14 = v59;
                  id v3 = v60;
                  unint64_t v15 = v64;
LABEL_66:
                  sub_24F7A2D38((uint64_t)&v67);
                  sub_24F77835C(v17);
                  sub_24F7A05F8((uint64_t)v3);
                  goto LABEL_67;
                }
                sub_24F780650();
                sub_24F77DA00();
                uint64_t v28 = sub_24F785818();
                goto LABEL_29;
              }
            }
            else if (v24 == 2)
            {
              char v25 = BYTE8(v68);
              sub_24F77D6B8(&v67);
              swift_bridgeObjectRetain();
              sub_24F77BF50();
              if (v2() == v23 && v22 == v36)
              {
                swift_bridgeObjectRelease();
                uint64_t v55 = sub_24F7A33E0();
                goto LABEL_64;
              }
              sub_24F780650();
              sub_24F77DA00();
              uint64_t v28 = sub_24F7A33E0();
              goto LABEL_29;
            }
          }
          else if (!*v21)
          {
            uint64_t v33 = *((void *)&v68 + 1);
            uint64_t v32 = v69;
            sub_24F7811D0(&v67, *((uint64_t *)&v68 + 1));
            char v25 = v32 + 16;
            uint64_t v2 = *(uint64_t (**)(void))(v32 + 16);
            swift_bridgeObjectRetain();
            if (((uint64_t (*)(uint64_t, uint64_t))v2)(v33, v32) == v23 && v22 == v34)
            {
              swift_bridgeObjectRelease();
              uint64_t v55 = sub_24F7735C0();
              goto LABEL_64;
            }
            sub_24F780650();
            sub_24F77DA00();
            uint64_t v28 = sub_24F7735C0();
LABEL_29:
            sub_24F7A203C(v28, v29, v30, v31);
            int v20 = v65;
            if (v25) {
              goto LABEL_65;
            }
          }
          v21 += 32;
          if (!--v19)
          {
            uint64_t v17 = v63;
            swift_bridgeObjectRelease();
            uint64_t v14 = v59;
            id v3 = v60;
            unint64_t v15 = v64;
            goto LABEL_34;
          }
        }
      }
      swift_retain();
      sub_24F777E70(v17);
LABEL_34:
      uint64_t v2 = *(uint64_t (**)(void))(v18 + 16);
      if (!v2) {
        goto LABEL_66;
      }
      int v38 = BYTE8(v69);
      swift_bridgeObjectRetain();
      int v39 = (unsigned char *)(v18 + 56);
      int v66 = v38;
      while (1)
      {
        uint64_t v41 = *((void *)v39 - 3);
        uint64_t v40 = *((void *)v39 - 2);
        uint64_t v42 = *((void *)v39 - 1);
        int v43 = *v39;
        if (!v38) {
          break;
        }
        if (v38 == 1)
        {
          if (v43 != 1) {
            goto LABEL_57;
          }
          LOBYTE(v44) = BYTE8(v68);
          sub_24F7811D0(&v67, *((uint64_t *)&v68 + 1));
          sub_24F7A3408();
          sub_24F77BF50();
          if (((uint64_t (*)(void))v18)() == v41 && v40 == v45) {
            goto LABEL_59;
          }
          sub_24F77DD3C();
          sub_24F771D7C();
          uint64_t v47 = sub_24F77B4C4();
        }
        else
        {
          if (v43 != 2) {
            goto LABEL_57;
          }
          LOBYTE(v44) = BYTE8(v68);
          sub_24F7811D0(&v67, *((uint64_t *)&v68 + 1));
          sub_24F7A3408();
          swift_bridgeObjectRetain();
          sub_24F77BF50();
          if (((uint64_t (*)(void))v18)() == v41 && v40 == v53) {
            goto LABEL_59;
          }
          sub_24F77DD3C();
          sub_24F771D7C();
          uint64_t v47 = sub_24F782A00();
        }
LABEL_56:
        sub_24F7A203C(v47, v48, v49, v50);
        int v38 = v66;
        if (v44) {
          goto LABEL_60;
        }
LABEL_57:
        v39 += 32;
        uint64_t v2 = (uint64_t (*)(void))((char *)v2 - 1);
        if (!v2)
        {
          swift_bridgeObjectRelease();
          uint64_t v14 = v59;
          id v3 = v60;
          unint64_t v15 = v64;
          uint64_t v17 = v63;
          goto LABEL_66;
        }
      }
      if (*v39) {
        goto LABEL_57;
      }
      uint64_t v44 = v69;
      sub_24F7811D0(&v67, *((uint64_t *)&v68 + 1));
      uint64_t v18 = *(void *)(v44 + 16);
      swift_bridgeObjectRetain();
      sub_24F77BF50();
      if (((uint64_t (*)(void))v18)() != v41 || v40 != v51) {
        break;
      }
LABEL_59:
      swift_bridgeObjectRelease();
      sub_24F7A203C(v41, v40, v42, v66);
LABEL_60:
      swift_bridgeObjectRelease();
      sub_24F7A2D38((uint64_t)&v67);
      sub_24F77835C(v63);
      uint64_t v14 = v59;
      id v3 = v60;
      unint64_t v15 = v64;
LABEL_67:
      ++v15;
      uint64_t result = swift_release();
      if (v15 == v62) {
        return swift_bridgeObjectRelease();
      }
    }
    sub_24F77DD3C();
    sub_24F771D7C();
    uint64_t v47 = sub_24F775B00();
    goto LABEL_56;
  }
  return result;
}

uint64_t sub_24F7A05F8(uint64_t result)
{
  if ((*(unsigned char *)(v1 + 17) & 1) == 0)
  {
    uint64_t v2 = result;
    uint64_t result = sub_24F7A0DA0();
    if (result)
    {
      uint64_t v4 = v3;
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, ObjectType, v4);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t DatabaseEvent.copy()()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  sub_24F7811D0(v0, v1);
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(v2 + 24))(v0, v1, v2);
}

uint64_t sub_24F7A06E4()
{
  uint64_t result = sub_24F7A0DA0();
  if (result)
  {
    uint64_t v2 = v1;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v2 + 24))(ObjectType, v2);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_24F7A074C()
{
  int v1 = *(unsigned __int8 *)(v0 + 16);
  uint64_t result = sub_24F7A0DA0();
  if (v1 == 1)
  {
    if (!result) {
      return result;
    }
    *(void *)(v0 + 40) = 0;
    *(void *)(v0 + 48) = 0;
    swift_unknownObjectRelease();
  }
  else if (!result)
  {
    return result;
  }
  swift_getObjectType();
  uint64_t v3 = sub_24F7802CC();
  v4(v3);
  return swift_unknownObjectRelease();
}

void sub_24F7A07F4()
{
  sub_24F77ED98();
  char v2 = v1;
  swift_retain();
  sub_24F784A8C();
  swift_release();
  if ((v2 & 1) == 0) {
    goto LABEL_11;
  }
  sub_24F77C600();
  unint64_t v3 = *(void *)(v0 + 40);
  if (!(v3 >> 62))
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4) {
      goto LABEL_4;
    }
LABEL_10:
    swift_bridgeObjectRelease();
LABEL_11:
    sub_24F784AD4();
    sub_24F782DB4();
    return;
  }
  sub_24F780B5C();
  uint64_t v4 = sub_24F8CF9E0();
  if (!v4) {
    goto LABEL_10;
  }
LABEL_4:
  if (v4 >= 1)
  {
    uint64_t v5 = 0;
    do
    {
      if ((v3 & 0xC000000000000001) != 0) {
        MEMORY[0x253364060](v5, v3);
      }
      else {
        swift_retain();
      }
      ++v5;
      swift_unownedRetainStrong();
      sub_24F7A08FC();
      swift_release();
      swift_release();
    }
    while (v4 != v5);
    goto LABEL_10;
  }
  __break(1u);
}

uint64_t sub_24F7A08FC()
{
  int v1 = *(unsigned __int8 *)(v0 + 16);
  uint64_t result = sub_24F7A0DA0();
  if (v1 == 1)
  {
    if (!result) {
      return result;
    }
    *(void *)(v0 + 40) = 0;
    *(void *)(v0 + 48) = 0;
    swift_unknownObjectRelease();
  }
  else if (!result)
  {
    return result;
  }
  swift_getObjectType();
  uint64_t v3 = sub_24F7802CC();
  v4(v3);
  return swift_unknownObjectRelease();
}

void *sub_24F7A09A4()
{
  sub_24F7775EC();
  swift_beginAccess();
  char v2 = *(sqlite3 **)(v0 + 16);
  swift_release();
  sqlite3_commit_hook(v2, (int (__cdecl *)(void *))sub_24F785E98, v1);
  sub_24F7775EC();
  swift_beginAccess();
  uint64_t v3 = *(sqlite3 **)(v0 + 16);
  swift_release();
  return sqlite3_rollback_hook(v3, (void (__cdecl *)(void *))sub_24F7A0AAC, v1);
}

uint64_t sub_24F7A0A50(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    char v2 = *(void **)(result + 32);
    swift_retain();
    if ((unint64_t)v2 <= 2)
    {
      *(void *)(v1 + 32) = 2;
      sub_24F77D5B0(v2);
    }
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *sub_24F7A0AB0()
{
  sub_24F7775EC();
  sub_24F77C600();
  char v2 = *(sqlite3 **)(v0 + 16);
  swift_release();
  return sqlite3_update_hook(v2, (void (__cdecl *)(void *, int, const char *, const char *, sqlite3_int64))sub_24F7A0BF8, v1);
}

uint64_t sub_24F7A0B10(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (result)
  {
    uint64_t result = swift_retain();
    switch(a2)
    {
      case 9:
        char v9 = 1;
        goto LABEL_8;
      case 18:
        char v9 = 0;
LABEL_8:
        v10[3] = &type metadata for MetalDatabaseEventImpl;
        void v10[4] = &off_270103050;
        v10[0] = a3;
        v10[1] = a4;
        char v11 = v9;
        uint64_t v12 = a5;
        sub_24F7A00A4((uint64_t)v10);
        swift_release();
        return sub_24F7A2D38((uint64_t)v10);
      case 23:
        char v9 = 2;
        goto LABEL_8;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

GRDBInternal::DatabaseEvent::Kind_optional __swiftcall DatabaseEvent.Kind.init(rawValue:)(Swift::Int32 rawValue)
{
  if (rawValue == 23) {
    char v2 = 2;
  }
  else {
    char v2 = 3;
  }
  if (rawValue == 18) {
    char v2 = 0;
  }
  if (rawValue == 9) {
    char v3 = 1;
  }
  else {
    char v3 = v2;
  }
  char *v1 = v3;
  return (GRDBInternal::DatabaseEvent::Kind_optional)rawValue;
}

void *sub_24F7A0BFC()
{
  sub_24F7775EC();
  sub_24F77C600();
  uint64_t v1 = *(sqlite3 **)(v0 + 16);
  swift_release();
  return sqlite3_update_hook(v1, 0, 0);
}

uint64_t sub_24F7A0C48()
{
  swift_unownedRelease();
  swift_release();
  sub_24F77D5B0(*(id *)(v0 + 32));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_24F7A0C88()
{
  sub_24F7A0C48();
  return MEMORY[0x270FA0228](v0, 57, 7);
}

Swift::Void __swiftcall TransactionObserver.stopObservingDatabaseChangesUntilNextTransaction()()
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v5 = v0;
  type metadata accessor for SchedulingWatchdog();
  uint64_t v6 = sub_24F7834B0();
  if (v6 && (uint64_t v7 = *(void *)(v6 + 24), swift_retain(), swift_release(), v7))
  {
    sub_24F7A1810(v3, v7, v5, v4);
    swift_release();
  }
  else
  {
    sub_24F770EAC();
    sub_24F8CF9D0();
    __break(1u);
  }
}

uint64_t sub_24F7A0DA0()
{
  if (*(void *)(v0 + 40)) {
    uint64_t v1 = *(void *)(v0 + 40);
  }
  else {
    uint64_t v1 = MEMORY[0x2533655C0](v0 + 24);
  }
  swift_unknownObjectRetain();
  return v1;
}

uint64_t sub_24F7A0DF8()
{
  sub_24F7A2D10(v0 + 24);
  swift_unknownObjectRelease();
  return MEMORY[0x270FA0228](v0, 56, 7);
}

uint64_t DatabaseEventKind.tableName.getter(uint64_t a1)
{
  return a1;
}

uint64_t DatabaseEvent.Kind.rawValue.getter()
{
  return dword_24F8DE56C[*v0];
}

BOOL sub_24F7A0E80(char *a1, char *a2)
{
  return sub_24F7DAA48(*a1, *a2);
}

uint64_t sub_24F7A0E8C()
{
  return sub_24F8A22D8();
}

uint64_t sub_24F7A0E94()
{
  return sub_24F8A28DC();
}

uint64_t sub_24F7A0E9C()
{
  return sub_24F8A2B50();
}

GRDBInternal::DatabaseEvent::Kind_optional sub_24F7A0EA4(Swift::Int32 *a1)
{
  return DatabaseEvent.Kind.init(rawValue:)(*a1);
}

uint64_t sub_24F7A0EAC@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = DatabaseEvent.Kind.rawValue.getter();
  *a1 = result;
  return result;
}

void DatabaseEvent.kind.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 40);
}

uint64_t DatabaseEvent.databaseName.getter()
{
  sub_24F7811D0(v0, v0[3]);
  uint64_t v1 = sub_24F782418();
  return v2(v1);
}

uint64_t DatabaseEvent.tableName.getter()
{
  sub_24F7811D0(v0, v0[3]);
  uint64_t v1 = sub_24F782418();
  return v2(v1);
}

uint64_t DatabaseEvent.rowID.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t sub_24F7A0F78(uint64_t result)
{
  if (result) {
    return sub_24F8CEED0();
  }
  __break(1u);
  return result;
}

uint64_t sub_24F7A0F84(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return sub_24F8CEED0();
  }
  __break(1u);
  return result;
}

uint64_t sub_24F7A0F94@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (a2)
  {
    char v6 = *(unsigned char *)(result + 40);
    uint64_t v7 = *(void *)(result + 48);
    uint64_t result = sub_24F8CEED0();
    if (a3)
    {
      uint64_t v9 = result;
      uint64_t v10 = v8;
      uint64_t v11 = sub_24F8CEED0();
      uint64_t v13 = v12;
      uint64_t v16 = &type metadata for CopiedDatabaseEventImpl;
      uint64_t v17 = &off_270103408;
      uint64_t v14 = (void *)swift_allocObject();
      *(void *)&long long v15 = v14;
      void v14[2] = v9;
      void v14[3] = v10;
      v14[4] = v11;
      uint64_t v14[5] = v13;
      *(unsigned char *)(a4 + 40) = v6;
      *(void *)(a4 + 48) = v7;
      return sub_24F794DE0(&v15, a4);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_24F7A1058()
{
  return sub_24F7A0F78(*v0);
}

uint64_t sub_24F7A1060()
{
  return sub_24F7A0F84(*v0, v0[1]);
}

uint64_t sub_24F7A1068@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24F7A0F94(a1, *v2, v2[1], a2);
}

uint64_t sub_24F7A1070@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24F7A2DC8(a1, a2);
}

uint64_t sub_24F7A1078()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_24F7A10A8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_24F7A10D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24F7A1070(a1, a2);
}

BOOL sub_24F7A10E4()
{
  return *(void *)(*(void *)(v0 + 24) + 16) == 0;
}

void sub_24F7A10F8()
{
  uint64_t v1 = sub_24F8CED00();
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(*(void *)(v0 + 16) + 16);
  sub_24F786A80();
  uint64_t v5 = *(void *)(*(void *)(v0 + 24) + 16);
  sub_24F786E6C();
  uint64_t v6 = *(void *)(v0 + 24);
  *(void *)(v6 + 16) = v5 + 1;
  uint64_t v7 = (void *)(v6 + 24 * v5);
  v7[4] = v1;
  void v7[5] = v3;
  v7[6] = v4;
}

void sub_24F7A1170()
{
  uint64_t v1 = sub_24F8CED00();
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v6 = v1;
    do
    {
      uint64_t v7 = v4 + 24 * v5;
      BOOL v8 = *(void *)(v7 + 8) == v6 && *(void *)(v7 + 16) == v3;
      if (v8 || (sub_24F8CFD00() & 1) != 0) {
        break;
      }
      uint64_t v9 = *(void *)(v0 + 24);
      if (!*(void *)(v9 + 16))
      {
        __break(1u);
LABEL_18:
        __break(1u);
        goto LABEL_19;
      }
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v0 + 24) = v9;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_24F83CCB4();
        uint64_t v9 = v12;
        *(void *)(v0 + 24) = v12;
      }
      uint64_t v11 = *(void *)(v9 + 16);
      if (!v11) {
        goto LABEL_18;
      }
      sub_24F76B840(v11);
      *(void *)(v0 + 24) = v9;
      swift_bridgeObjectRelease();
      uint64_t v4 = *(void *)(v0 + 24);
      uint64_t v5 = *(void *)(v4 + 16);
    }
    while (v5);
  }
  swift_bridgeObjectRelease();
  sub_24F7E5DAC(*(void *)(v0 + 24));
  if (v14)
  {
    uint64_t v15 = v13;
    uint64_t v16 = *(void *)(*(void *)(v0 + 16) + 16);
    swift_bridgeObjectRelease();
    if (__OFSUB__(v16, v15)) {
LABEL_19:
    }
      __break(1u);
    else {
      sub_24F7A12B0(v16 - v15);
    }
  }
}

void sub_24F7A1274()
{
  if (*(void *)(*(void *)v0 + 16))
  {
    sub_24F7A17AC();
    if (!v1) {
      sub_24F83C968(*(void *)(*(void *)v0 + 16) - 1);
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_24F7A12B0(uint64_t a1)
{
  if (!a1) {
    return;
  }
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)(*v1 + 16);
  uint64_t v3 = sub_24F897608(v2, -a1, 0, *v1);
  if (v4)
  {
LABEL_11:
    __break(1u);
    return;
  }
  if (v2 < v3)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  sub_24F8BCEC4();
}

void sub_24F7A1324()
{
  uint64_t v1 = sub_24F8CED00();
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(v0 + 24);
  uint64_t v5 = (uint64_t *)(v0 + 24);
  uint64_t v4 = v6;
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    uint64_t v8 = v1;
    do
    {
      uint64_t v9 = v4 + 24 * v7;
      BOOL v10 = *(void *)(v9 + 8) == v8 && *(void *)(v9 + 16) == v3;
      if (v10 || (sub_24F8CFD00() & 1) != 0) {
        break;
      }
      uint64_t v11 = *v5;
      if (!*(void *)(*v5 + 16))
      {
        __break(1u);
LABEL_19:
        __break(1u);
        return;
      }
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v5 = v11;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_24F83CCB4();
        uint64_t v11 = v14;
        *uint64_t v5 = v14;
      }
      uint64_t v13 = *(void *)(v11 + 16);
      if (!v13) {
        goto LABEL_19;
      }
      sub_24F76B840(v13);
      *uint64_t v5 = v11;
      swift_bridgeObjectRelease();
      uint64_t v4 = *v5;
      uint64_t v7 = *(void *)(*v5 + 16);
    }
    while (v7);
  }
  swift_bridgeObjectRelease();
  if (*(void *)(*v5 + 16))
  {
    sub_24F7A1274();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_24F7A1430()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_24F7A1458()
{
  sub_24F7A1430();
  return MEMORY[0x270FA0228](v0, 32, 7);
}

uint64_t sub_24F7A148C()
{
  return 0;
}

uint64_t sub_24F7A1494()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_24F7A14BC()
{
  swift_release();
  return MEMORY[0x270FA0228](v0, 32, 7);
}

uint64_t sub_24F7A1500(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  v9[1] = *MEMORY[0x263EF8340];
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    sub_24F838880(0, v4, (void *)((char *)v9 - ((8 * v4 + 15) & 0x3FFFFFFFFFFFFFF0)));
    sub_24F7818AC();
    if (v1) {
      swift_willThrow();
    }
    else {
      return v5;
    }
  }
  else
  {
    uint64_t v6 = (void *)swift_slowAlloc();
    sub_24F838880(0, v4, v6);
    sub_24F7818AC();
    uint64_t v2 = v7;
    MEMORY[0x2533654D0](v6, -1, -1);
  }
  return v2;
}

void sub_24F7A1644(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0;
  int64_t v5 = 0;
  uint64_t v6 = a3 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  while (v9)
  {
    unint64_t v11 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v12 = v11 | (v5 << 6);
LABEL_20:
    uint64_t v16 = *(void *)(*(void *)(*(void *)(a3 + 56) + 8 * v12) + 72);
    uint64_t v17 = *(void *)(v16 + 16);
    if (v17)
    {
      uint64_t v18 = (unsigned __int8 *)(v16 + 56);
      while (1)
      {
        int v19 = *v18;
        v18 += 32;
        if (v19 == 1) {
          break;
        }
        if (!--v17) {
          goto LABEL_24;
        }
      }
    }
    else
    {
LABEL_24:
      *(void *)(a1 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v4++, 1))
      {
        __break(1u);
LABEL_27:
        sub_24F8391B4(a1, a2, v4);
        return;
      }
    }
  }
  int64_t v13 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v13 >= v10) {
    goto LABEL_27;
  }
  unint64_t v14 = *(void *)(v6 + 8 * v13);
  ++v5;
  if (v14) {
    goto LABEL_19;
  }
  int64_t v5 = v13 + 1;
  if (v13 + 1 >= v10) {
    goto LABEL_27;
  }
  unint64_t v14 = *(void *)(v6 + 8 * v5);
  if (v14) {
    goto LABEL_19;
  }
  int64_t v5 = v13 + 2;
  if (v13 + 2 >= v10) {
    goto LABEL_27;
  }
  unint64_t v14 = *(void *)(v6 + 8 * v5);
  if (v14)
  {
LABEL_19:
    unint64_t v9 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v5 << 6);
    goto LABEL_20;
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v10) {
    goto LABEL_27;
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14)
  {
    int64_t v5 = v15;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v5 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_27;
    }
    unint64_t v14 = *(void *)(v6 + 8 * v5);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_29:
  __break(1u);
}

void sub_24F7A17AC()
{
  uint64_t v1 = *v0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_24F83CCB4();
    uint64_t v1 = v3;
  }
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    *(void *)(v1 + 16) = v2 - 1;
    *uint64_t v0 = v1;
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_24F7A1810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  unint64_t v7 = *(void *)(a2 + 40);
  void v10[2] = a1;
  v10[3] = a4;
  swift_bridgeObjectRetain();
  uint64_t v8 = sub_24F7C2F3C((uint64_t (*)(uint64_t *))sub_24F7A30CC, (uint64_t)v10, v7);
  uint64_t result = swift_bridgeObjectRelease();
  if (v8)
  {
    *(unsigned char *)(v8 + 17) = 1;
    swift_retain();
    sub_24F83C4E0((uint64_t *)(a2 + 48), v8);
    sub_24F79F844();
    return swift_release();
  }
  return result;
}

uint64_t sub_24F7A18CC()
{
  sub_24F77ED98();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  type metadata accessor for SchedulingWatchdog();
  if (sub_24F78346C(v2))
  {
    sub_24F775A78();
    sub_24F77E624();
    sub_24F7A1500(v0);
    sub_24F77C61C();
    sub_24F77B820();
    sub_24F77318C();
    sub_24F77E624();
    sub_24F7A1500(v0);
    sub_24F77C61C();
    sub_24F781C98();
    uint64_t v5 = sub_24F77CC40();
    sub_24F7A19C0(v4, v5);
    sub_24F782DB4();
    return swift_release();
  }
  else
  {
    sub_24F770EAC();
    uint64_t result = sub_24F77FAFC();
    __break(1u);
  }
  return result;
}

uint64_t sub_24F7A19C0(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  unint64_t v3 = *(void *)(a2 + 40);
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = sub_24F8CF9E0();
    swift_bridgeObjectRelease();
    if (!v4) {
      return swift_endAccess();
    }
  }
  else
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v4) {
      return swift_endAccess();
    }
  }
  unint64_t v5 = v3 & 0xC000000000000001;
  if ((v3 & 0xC000000000000001) != 0) {
    MEMORY[0x253364060](0, v3);
  }
  else {
    swift_retain();
  }
  uint64_t v6 = swift_unknownObjectRetain();
  char v7 = sub_24F7A1BD0(v6);
  swift_release();
  swift_unknownObjectRelease();
  if (v7)
  {
    unint64_t v8 = 0;
  }
  else
  {
    if (v4 == 1) {
      return swift_endAccess();
    }
    if (v5) {
      MEMORY[0x253364060](1, v3);
    }
    else {
      swift_retain();
    }
    uint64_t v9 = swift_unknownObjectRetain();
    char v10 = sub_24F7A1BD0(v9);
    swift_release();
    swift_unknownObjectRelease();
    if (v10)
    {
      unint64_t v8 = 1;
    }
    else
    {
      if (v4 == 2) {
        return swift_endAccess();
      }
      for (uint64_t i = 6; ; ++i)
      {
        unint64_t v8 = i - 4;
        if (v5) {
          MEMORY[0x253364060](i - 4, v3);
        }
        else {
          swift_retain();
        }
        uint64_t v12 = swift_unknownObjectRetain();
        char v13 = sub_24F7A1BD0(v12);
        swift_release();
        uint64_t result = swift_unknownObjectRelease();
        if (v13) {
          break;
        }
        uint64_t v15 = i - 3;
        unint64_t v5 = v3 & 0xC000000000000001;
        if (__OFADD__(v8, 1))
        {
          __break(1u);
          return result;
        }
        if (v15 == v4) {
          return swift_endAccess();
        }
      }
    }
  }
  sub_24F83C8D4(v8);
  swift_release();
  return swift_endAccess();
}

uint64_t sub_24F7A1BD0(uint64_t a1)
{
  uint64_t result = sub_24F7A0DA0();
  if (result)
  {
    uint64_t v3 = result;
    swift_unknownObjectRelease();
    return v3 == a1;
  }
  return result;
}

uint64_t sub_24F7A1C0C()
{
  return sub_24F7A1C24();
}

uint64_t sub_24F7A1C24()
{
  sub_24F77ED98();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  type metadata accessor for SchedulingWatchdog();
  if (sub_24F78346C(v4))
  {
    sub_24F775A78();
    sub_24F77E624();
    sub_24F7A1500(v0);
    sub_24F77C61C();
    sub_24F77B820();
    sub_24F77318C();
    sub_24F77E624();
    sub_24F7A1500(v0);
    sub_24F77C61C();
    sub_24F781C98();
    uint64_t v9 = sub_24F77CC40();
    sub_24F7A2E38(v8, v6, v9, v2);
    sub_24F782DB4();
    return swift_release();
  }
  else
  {
    sub_24F770EAC();
    uint64_t result = sub_24F77FAFC();
    __break(1u);
  }
  return result;
}

uint64_t sub_24F7A1D18(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 v10 = *a2;
  type metadata accessor for SchedulingWatchdog();
  if (sub_24F78346C(a3))
  {
    sub_24F775A78();
    sub_24F77E624();
    sub_24F7A1500(v5);
    sub_24F77C61C();
    sub_24F77B820();
    sub_24F77318C();
    sub_24F77E624();
    sub_24F7A1500(v5);
    sub_24F77C61C();
    sub_24F781C98();
    uint64_t v11 = sub_24F77CC40();
    v13[0] = v10;
    sub_24F7A2EF4(a1, v13, v11, a4, a5);
    return swift_release();
  }
  else
  {
    sub_24F770EAC();
    uint64_t result = sub_24F77FAFC();
    __break(1u);
  }
  return result;
}

uint64_t _s13CommitHandlerCMa()
{
  return self;
}

unint64_t sub_24F7A1E58()
{
  unint64_t result = qword_269A2A688;
  if (!qword_269A2A688)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269A2A688);
  }
  return result;
}

unint64_t sub_24F7A1EA8()
{
  unint64_t result = qword_269A2A690;
  if (!qword_269A2A690)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269A2A690);
  }
  return result;
}

void type metadata accessor for Database.TransactionObservationExtent()
{
}

uint64_t type metadata accessor for DatabaseObservationBroker()
{
  return self;
}

uint64_t dispatch thunk of TransactionObserver.observes(eventsOfKind:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t dispatch thunk of TransactionObserver.databaseDidChange(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of TransactionObserver.databaseWillCommit()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of TransactionObserver.databaseDidCommit(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of TransactionObserver.databaseDidRollback(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t type metadata accessor for TransactionObservation()
{
  return self;
}

uint64_t sub_24F7A1FC8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 >= 2u)
  {
    if (a4 != 2) {
      return result;
    }
    swift_bridgeObjectRetain();
  }
  return swift_bridgeObjectRetain();
}

uint64_t destroy for DatabaseEventKind(uint64_t a1)
{
  return sub_24F7A203C(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
}

uint64_t sub_24F7A203C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 >= 2u)
  {
    if (a4 != 2) {
      return result;
    }
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DatabaseEventKind(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 24);
  sub_24F7A1FC8(*(void *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for DatabaseEventKind(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 24);
  sub_24F7A1FC8(*(void *)a2, v4, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  unsigned __int8 v10 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v6;
  sub_24F7A203C(v7, v8, v9, v10);
  return a1;
}

__n128 initializeWithTake for DatabaseEventKind(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for DatabaseEventKind(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v4;
  sub_24F7A203C(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for DatabaseEventKind(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && *(unsigned char *)(a1 + 25))
    {
      int v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
      if (v3 <= 2) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DatabaseEventKind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_24F7A2258(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t sub_24F7A2260(uint64_t result, char a2)
{
  *(unsigned char *)(result + 24) = a2;
  return result;
}

void type metadata accessor for DatabaseEventKind()
{
}

uint64_t initializeWithCopy for DatabaseEvent(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

uint64_t assignWithCopy for DatabaseEvent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

uint64_t *sub_24F7A2320(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    unsigned int v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        __n128 result = (uint64_t *)swift_release();
        *unsigned int v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *__n128 result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *unsigned int v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

__n128 initializeWithTake for DatabaseEvent(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for DatabaseEvent(uint64_t a1, uint64_t a2)
{
  _s12GRDBInternal13DatabaseEventVwxx_0(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for DatabaseEvent(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 56))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DatabaseEvent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for DatabaseEvent()
{
}

uint64_t getEnumTagSinglePayload for DatabaseUUIDEncodingStrategy(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 2) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v5 = v6 - 3;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *_s28TransactionObservationExtentOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24F7A27A4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t sub_24F7A27CC(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_24F7A27D4(unsigned char *result, char a2)
{
  *__n128 result = a2;
  return result;
}

void type metadata accessor for DatabaseEvent.Kind()
{
}

uint64_t type metadata accessor for SavepointStack()
{
  return self;
}

unint64_t sub_24F7A2810(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_24F7A2864(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

unint64_t *sub_24F7A28B8(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a1;
  unint64_t v5 = *a2;
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = v5;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for TableRegion(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *sub_24F7A2980(void *a1, uint64_t a2)
{
  if (*a1 < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  a1[1] = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_24F7A29F8(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t sub_24F7A2A48(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)__n128 result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

uint64_t sub_24F7A2A9C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_24F7A2AB4(void *result, int a2)
{
  if (a2 < 0)
  {
    uint64_t v2 = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v2 = (a2 - 1);
  }
  *__n128 result = v2;
  return result;
}

void type metadata accessor for DatabaseEventPredicate()
{
}

void *sub_24F7A2AE0(void *a1, void **a2)
{
  uint64_t v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    id v4 = v3;
  }
  *a1 = v3;
  return a1;
}

void sub_24F7A2B20(void **a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)v1 >= 0xFFFFFFFF) {
}
  }

void **sub_24F7A2B38(void **a1, void **a2)
{
  uint64_t v3 = *a1;
  id v4 = *a2;
  if ((unint64_t)v3 < 0xFFFFFFFF)
  {
    if ((unint64_t)v4 >= 0xFFFFFFFF) {
      id v7 = v4;
    }
    *a1 = v4;
  }
  else if ((unint64_t)v4 < 0xFFFFFFFF)
  {

    *a1 = *a2;
  }
  else
  {
    id v5 = v4;
    unsigned int v6 = *a1;
    *a1 = v4;
  }
  return a1;
}

void *initializeWithTake for DatabaseRegion(void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

void **sub_24F7A2BD4(void **a1, unint64_t *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if ((unint64_t)v3 < 0xFFFFFFFF) {
    goto LABEL_6;
  }
  if (v4 < 0xFFFFFFFF)
  {

LABEL_6:
    *a1 = (void *)v4;
    return a1;
  }
  *a1 = (void *)v4;

  return a1;
}

uint64_t sub_24F7A2C38(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFD && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 2;
  if (v4 >= 4) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t sub_24F7A2C94(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(void *)__n128 result = 0;
    *(_DWORD *)__n128 result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2 + 2;
    }
  }
  return result;
}

void *sub_24F7A2CE4(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *__n128 result = v2;
  return result;
}

void type metadata accessor for DatabaseObservationBroker.TransactionState()
{
}

uint64_t sub_24F7A2D10(uint64_t a1)
{
  return a1;
}

uint64_t sub_24F7A2D38(uint64_t a1)
{
  return a1;
}

uint64_t sub_24F7A2D60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24F781274(&qword_269A2A3D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_24F7A2DC8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_24F7A2E00()
{
  _s12GRDBInternal13DatabaseEventVwxx_0(v0 + 16);
  return swift_deallocObject();
}

uint64_t sub_24F7A2E38(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  type metadata accessor for TransactionObservation();
  uint64_t v7 = swift_allocObject();
  uint64_t v8 = swift_retain();
  a4(v8, a2, v7);
  uint64_t v9 = swift_beginAccess();
  MEMORY[0x2533638D0](v9);
  sub_24F766F18(*(void *)((*(void *)(a3 + 40) & 0xFFFFFFFFFFFFFF8) + 0x10));
  sub_24F8CF140();
  sub_24F8CF0B0();
  return swift_endAccess();
}

uint64_t sub_24F7A2EF4(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v12[0] = *a2;
  type metadata accessor for TransactionObservation();
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = swift_unknownObjectRetain();
  sub_24F7A30EC(v9, v12, v8, a4, a5);
  uint64_t v10 = swift_beginAccess();
  MEMORY[0x2533638D0](v10);
  sub_24F766F18(*(void *)((*(void *)(a3 + 40) & 0xFFFFFFFFFFFFFF8) + 0x10));
  sub_24F8CF140();
  sub_24F8CF0B0();
  return swift_endAccess();
}

uint64_t sub_24F7A2FBC(uint64_t a1, char a2, uint64_t a3)
{
  *(unsigned char *)(a3 + 17) = 0;
  *(void *)(a3 + 32) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  *(unsigned char *)(a3 + 16) = a2;
  if (a2)
  {
    *(void *)(a3 + 40) = a1;
    *(void *)(a3 + 48) = &off_270105AB0;
  }
  else
  {
    *(void *)(a3 + 32) = &off_270105AB0;
    swift_unknownObjectWeakAssign();
    swift_release();
  }
  return a3;
}

uint64_t sub_24F7A3044(uint64_t a1, char a2, uint64_t a3)
{
  *(unsigned char *)(a3 + 17) = 0;
  *(void *)(a3 + 32) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  *(unsigned char *)(a3 + 16) = a2;
  if (a2)
  {
    *(void *)(a3 + 40) = a1;
    *(void *)(a3 + 48) = &off_270103020;
  }
  else
  {
    *(void *)(a3 + 32) = &off_270103020;
    swift_unknownObjectWeakAssign();
    swift_release();
  }
  return a3;
}

uint64_t sub_24F7A30CC(uint64_t a1)
{
  return sub_24F79F918(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_24F7A30EC(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = *a2;
  *(unsigned char *)(a3 + 17) = 0;
  *(void *)(a3 + 32) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  *(unsigned char *)(a3 + 16) = v8;
  if (v8)
  {
    *(void *)(a3 + 40) = a1;
    *(void *)(a3 + 48) = a5;
  }
  else
  {
    *(void *)(a3 + 32) = a5;
    swift_unknownObjectWeakAssign();
    swift_unknownObjectRelease();
  }
  return a3;
}

uint64_t getEnumTagSinglePayload for MetalDatabaseEventImpl(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for MetalDatabaseEventImpl(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for MetalDatabaseEventImpl()
{
  return &type metadata for MetalDatabaseEventImpl;
}

uint64_t sub_24F7A31BC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t destroy for CaseInsensitiveIdentifier()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for CaseInsensitiveIdentifier(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for CaseInsensitiveIdentifier(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for CaseInsensitiveIdentifier(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void *assignWithTake for CaseInsensitiveIdentifier(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CaseInsensitiveIdentifier(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CaseInsensitiveIdentifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CopiedDatabaseEventImpl()
{
  return &type metadata for CopiedDatabaseEventImpl;
}

uint64_t sub_24F7A33E0()
{
  return v0;
}

uint64_t sub_24F7A33F4()
{
  return v0;
}

uint64_t sub_24F7A3408()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_24F7A342C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  memcpy(__dst, v2, sizeof(__dst));
  sub_24F7997BC((uint64_t)__dst, (uint64_t)v15);
  switch(sub_24F799818((uint64_t)v15))
  {
    case 1u:
      unsigned int v6 = (const void *)sub_24F799910((uint64_t)v15);
      memcpy(v13, v6, 0xA3uLL);
      sub_24F7A4558((__n128 *)__dst);
      sub_24F814C38(a1, v12);
      sub_24F7A4558((__n128 *)__dst);
      memcpy(v13, v12, 0xA3uLL);
      sub_24F799920(v13);
      goto LABEL_6;
    case 2u:
      uint64_t v7 = (__n128 *)sub_24F799910((uint64_t)v15);
      unint64_t v8 = v7[10].n128_u64[1];
      unint64_t v9 = v7[11].n128_u64[0];
      memcpy(v13, v7, 0xA3uLL);
      sub_24F7A4558((__n128 *)__dst);
      sub_24F814C38(a1, v12);
      sub_24F76F794(v7);
      memcpy(v13, v12, 0xA8uLL);
      v13[21] = v8;
      v13[22] = v9;
      sub_24F7998DC(v13);
      goto LABEL_6;
    case 3u:
      sub_24F799910((uint64_t)v15);
      sub_24F7A4558((__n128 *)__dst);
      swift_retain();
      sub_24F8511E4();
      uint64_t v11 = v10;
      sub_24F7A4558((__n128 *)__dst);
      v13[0] = v11;
      sub_24F799834(v13);
LABEL_6:
      uint64_t result = sub_24F7997BC((uint64_t)v13, (uint64_t)a2);
      break;
    case 4u:
      v13[0] = a1;
      sub_24F799954(v13);
      sub_24F7997BC((uint64_t)v13, (uint64_t)a2);
      uint64_t result = swift_retain();
      break;
    default:
      sub_24F799910((uint64_t)v15);
      memcpy(a2, __dst, 0xB8uLL);
      uint64_t result = sub_24F7A4558((__n128 *)__dst);
      break;
  }
  return result;
}

uint64_t sub_24F7A36A8@<X0>(void *a1@<X8>)
{
  sub_24F7997BC(v1, (uint64_t)v22);
  sub_24F7997BC((uint64_t)v22, (uint64_t)v23);
  switch(sub_24F799818((uint64_t)v23))
  {
    case 1u:
      long long v3 = (const void *)sub_24F799910((uint64_t)v23);
      sub_24F7997BC((uint64_t)v22, (uint64_t)v18);
      uint64_t v4 = (__n128 *)sub_24F799910((uint64_t)v18);
      sub_24F76F794(v4);
      goto LABEL_5;
    case 2u:
      long long v3 = (const void *)sub_24F799910((uint64_t)v23);
      sub_24F7997BC((uint64_t)v22, (uint64_t)v18);
      uint64_t v5 = sub_24F799910((uint64_t)v18);
      sub_24F7A44D8(v5);
      swift_bridgeObjectRelease();
LABEL_5:
      memcpy(__dst, v3, 0xA3uLL);
      sub_24F781274(&qword_26B1F7358);
      uint64_t v6 = swift_allocObject();
      *(_OWORD *)(v6 + 16) = xmmword_24F8DDBF0;
      memcpy((void *)(v6 + 32), __dst, 0xA3uLL);
      sub_24F77DD58();
      v18[0] = v7;
      v18[1] = v8;
      __int16 v19 = 1;
      uint64_t v20 = v6;
      sub_24F7A45E4((uint64_t)v18);
      return sub_24F76F710((uint64_t)v18, (uint64_t)a1);
    case 3u:
      v13[0] = *(void *)sub_24F799910((uint64_t)v23);
      sub_24F7A45A0((uint64_t)v13);
      sub_24F76F710((uint64_t)v13, (uint64_t)__src);
      sub_24F781274(&qword_26B1F7358);
      uint64_t v10 = swift_allocObject();
      *(_OWORD *)(v10 + 16) = xmmword_24F8DDBF0;
      memcpy((void *)(v10 + 32), __src, 0xA3uLL);
      sub_24F77DD58();
      v15[0] = v11;
      v15[1] = v12;
      __int16 v16 = 1;
      uint64_t v17 = v10;
      sub_24F7A45E4((uint64_t)v15);
      sub_24F76F710((uint64_t)v15, (uint64_t)__dst);
      memcpy(a1, __dst, 0xA3uLL);
      sub_24F7997BC((uint64_t)v22, (uint64_t)v18);
      sub_24F799910((uint64_t)v18);
      return swift_bridgeObjectRetain();
    case 4u:
      sub_24F7A4624((uint64_t)v18);
      return sub_24F76F710((uint64_t)v18, (uint64_t)a1);
    default:
      sub_24F799910((uint64_t)v23);
      sub_24F8CF9D0();
      __break(1u);
      JUMPOUT(0x24F7A3910);
  }
}

uint64_t sub_24F7A3924@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  sub_24F7997BC(v3, (uint64_t)v14);
  sub_24F7997BC((uint64_t)v14, (uint64_t)v15);
  switch(sub_24F799818((uint64_t)v15))
  {
    case 1u:
      uint64_t v6 = (const void *)sub_24F799910((uint64_t)v15);
      sub_24F7997BC((uint64_t)v14, (uint64_t)v12);
      uint64_t v7 = (__n128 *)sub_24F799910((uint64_t)v12);
      sub_24F76F794(v7);
      goto LABEL_7;
    case 2u:
      uint64_t v6 = (const void *)sub_24F799910((uint64_t)v15);
      sub_24F7997BC((uint64_t)v14, (uint64_t)v12);
      uint64_t v8 = sub_24F799910((uint64_t)v12);
      sub_24F7A44D8(v8);
      swift_bridgeObjectRelease();
LABEL_7:
      memcpy(__dst, v6, 0xA3uLL);
      if (a1)
      {
        memcpy(v11, __dst, 0xA3uLL);
        nullsub_1(v11);
      }
      else
      {
        sub_24F76F794(__dst);
        sub_24F7A46F0((uint64_t)v11);
      }
      unint64_t v9 = (__n128 *)v11;
      goto LABEL_12;
    case 4u:
      if (a1) {
        goto LABEL_4;
      }
      sub_24F7A46F0((uint64_t)__dst);
      unint64_t v9 = __dst;
LABEL_12:
      sub_24F7A4720(v9, v12);
      nullsub_1(v12);
      break;
    default:
      sub_24F799910((uint64_t)v15);
LABEL_4:
      sub_24F7A4658((uint64_t)v12);
      break;
  }
  return sub_24F7A4688((uint64_t)v12, a2);
}

uint64_t sub_24F7A3AC8(uint64_t a1)
{
  sub_24F7997BC(v1, (uint64_t)v20);
  sub_24F7997BC((uint64_t)v20, (uint64_t)v21);
  uint64_t v4 = 42;
  switch(sub_24F799818((uint64_t)v21))
  {
    case 1u:
      uint64_t v7 = (const void *)sub_24F799910((uint64_t)v21);
      memcpy(v18, v7, 0xA3uLL);
      sub_24F7997BC((uint64_t)v20, (uint64_t)v19);
      uint64_t v8 = (__n128 *)sub_24F799910((uint64_t)v19);
      sub_24F76F794(v8);
      uint64_t v9 = sub_24F77E640();
      if (!v2) {
        uint64_t v4 = v9;
      }
      goto LABEL_14;
    case 2u:
      uint64_t v10 = (__n128 *)sub_24F799910((uint64_t)v21);
      memcpy(v18, v10, 0xA3uLL);
      sub_24F7997BC((uint64_t)v20, (uint64_t)v19);
      uint64_t v11 = sub_24F799910((uint64_t)v19);
      sub_24F7A44D8(v11);
      uint64_t v12 = sub_24F77E640();
      if (v2)
      {
        swift_bridgeObjectRelease();
        sub_24F76F794(v10);
        return v4;
      }
      v18[0] = v12;
      v18[1] = v13;
      swift_bridgeObjectRetain();
      sub_24F8CEEB0();
      swift_bridgeObjectRelease();
      uint64_t v16 = v18[0];
      uint64_t v15 = v18[1];
      sub_24F782DCC();
      sub_24F8CEEB0();
      sub_24F8CEEB0();
      swift_bridgeObjectRelease();
      v18[0] = v16;
      v18[1] = v15;
      swift_bridgeObjectRetain();
      sub_24F8CEEB0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_24F76F794(v10);
      return v18[0];
    case 3u:
      uint64_t v4 = *(void *)sub_24F799910((uint64_t)v21);
      sub_24F7A4558(v20);
      swift_retain();
      uint64_t v14 = sub_24F76BCC0(v4, a1);
      if (!v2)
      {
        v19[0] = v14;
        sub_24F781274(&qword_26B1F7F48);
        sub_24F7871AC();
        uint64_t v4 = sub_24F8CED30();
        swift_bridgeObjectRelease();
      }
LABEL_14:
      sub_24F7A4558(v20);
      return v4;
    case 4u:
      return v4;
    default:
      uint64_t v5 = *(void *)sub_24F799910((uint64_t)v21);
      sub_24F7997BC((uint64_t)v20, (uint64_t)v19);
      sub_24F799910((uint64_t)v19);
      swift_retain();
      sub_24F829160(v5);
      if (v6)
      {
        sub_24F782DCC();
        sub_24F8CEEB0();
        sub_24F8CEEB0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_24F8CEEB0();
        swift_bridgeObjectRelease();
        sub_24F7A4558(v20);
        return v18[0];
      }
      else
      {
        sub_24F7A4558(v20);
        return 42;
      }
  }
}

uint64_t SQLSelection.sqlSelection.getter@<X0>(void *a1@<X8>)
{
  memcpy(__dst, v1, sizeof(__dst));
  memcpy(a1, v1, 0xB8uLL);
  return sub_24F7A4558((__n128 *)__dst);
}

uint64_t AllColumns.sqlSelection.getter@<X0>(uint64_t a1@<X8>)
{
  sub_24F7A3F20(v3);
  return sub_24F7997BC((uint64_t)v3, a1);
}

void sub_24F7A3F20(void *a1)
{
  a1[21] = 0;
  a1[22] = 0;
  a1[20] = 0x8000000000000000;
}

uint64_t sub_24F7A3F54@<X0>(uint64_t a1@<X8>)
{
  return AllColumns.sqlSelection.getter(a1);
}

void type metadata accessor for SQLSelection()
{
}

uint64_t dispatch thunk of SQLSelectable.sqlSelection.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

void type metadata accessor for AllColumns()
{
}

uint64_t _s12GRDBInternal12SQLSelectionV4ImplOwxx_0()
{
  sub_24F77F310();
  return sub_24F799458(v7, v0, v1, v2, v3, v4, v5, v6, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21);
}

uint64_t *_s12GRDBInternal12SQLSelectionV4ImplOwcp_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = a2[4];
  uint64_t v4 = a2[5];
  uint64_t v5 = a2[6];
  uint64_t v6 = a2[7];
  uint64_t v13 = a2[9];
  uint64_t v14 = a2[10];
  uint64_t v15 = a2[11];
  uint64_t v16 = a2[12];
  uint64_t v17 = a2[13];
  uint64_t v18 = a2[14];
  uint64_t v19 = a2[15];
  uint64_t v20 = a2[16];
  uint64_t v21 = a2[17];
  uint64_t v22 = a2[18];
  uint64_t v23 = a2[19];
  unint64_t v24 = a2[20];
  uint64_t v25 = a2[21];
  uint64_t v26 = a2[22];
  uint64_t v7 = a2[8];
  uint64_t v8 = *a2;
  unint64_t v9 = a2[1];
  uint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  sub_24F795A3C(*a2, v9, v10, v11, v3, v4, v5, v6, v7, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24);
  *a1 = v8;
  a1[1] = v9;
  a1[2] = v10;
  a1[3] = v11;
  a1[4] = v3;
  a1[5] = v4;
  a1[6] = v5;
  a1[7] = v6;
  a1[8] = v7;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  a1[12] = v16;
  a1[13] = v17;
  a1[14] = v18;
  a1[15] = v19;
  a1[16] = v20;
  a1[17] = v21;
  a1[18] = v22;
  a1[19] = v23;
  a1[20] = v24;
  a1[21] = v25;
  a1[22] = v26;
  return a1;
}

uint64_t *_s12GRDBInternal12SQLSelectionV4ImplOwca_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  unint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a2[8];
  uint64_t v34 = a2[9];
  uint64_t v35 = a2[10];
  uint64_t v36 = a2[11];
  uint64_t v37 = a2[12];
  uint64_t v38 = a2[13];
  uint64_t v39 = a2[14];
  uint64_t v40 = a2[15];
  uint64_t v41 = a2[16];
  uint64_t v42 = a2[17];
  uint64_t v43 = a2[18];
  uint64_t v44 = a2[19];
  unint64_t v45 = a2[20];
  uint64_t v46 = a2[21];
  uint64_t v47 = a2[22];
  sub_24F795A3C(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v34;
  a1[10] = v35;
  a1[11] = v36;
  a1[12] = v37;
  a1[13] = v38;
  a1[14] = v39;
  a1[15] = v40;
  a1[16] = v41;
  a1[17] = v42;
  a1[18] = v43;
  a1[19] = v44;
  a1[20] = v45;
  a1[21] = v46;
  a1[22] = v47;
  sub_24F77F310();
  sub_24F799458(v12, v13, v14, v15, v16, v17, v18, v19, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33);
  return a1;
}

uint64_t _s12GRDBInternal12SQLSelectionV4ImplOwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 176);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  long long v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  long long v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v7;
  long long v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(void *)(a1 + 176) = v3;
  sub_24F77F310();
  sub_24F799458(v9, v16, v10, v11, v12, v13, v14, v15, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30);
  return a1;
}

uint64_t getEnumTagSinglePayload for SQL.Element(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 184))
    {
      int v3 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *(void *)(a1 + 64) >> 1;
      if (v2 > 0x80000000) {
        int v3 = ~v2;
      }
      else {
        int v3 = -1;
      }
    }
  }
  else
  {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for SQL.Element(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 184) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      double result = 0.0;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(void *)(a1 + 64) = 2 * -a2;
      *(_OWORD *)(a1 + 72) = 0u;
      *(_OWORD *)(a1 + 88) = 0u;
      *(_OWORD *)(a1 + 104) = 0u;
      *(_OWORD *)(a1 + 120) = 0u;
      *(_OWORD *)(a1 + 136) = 0u;
      *(_OWORD *)(a1 + 152) = 0u;
      *(_OWORD *)(a1 + 168) = 0u;
      return result;
    }
    *(unsigned char *)(a1 + 184) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void sub_24F7A4450(void *a1, uint64_t a2)
{
  if (a2 < 4)
  {
    uint64_t v3 = a1[13] & 1;
    uint64_t v4 = a1[20] & 0xF981FFLL | (a2 << 61);
    a1[8] &= 1uLL;
    a1[13] = v3;
    a1[20] = v4;
  }
  else
  {
    *a1 = (a2 - 4);
    bzero(a1 + 1, 0x98uLL);
    a1[21] = 0;
    a1[22] = 0;
    a1[20] = 0x8000000000000000;
  }
}

ValueMetadata *type metadata accessor for SQLSelection.Impl()
{
  return &type metadata for SQLSelection.Impl;
}

uint64_t sub_24F7A44D8(uint64_t a1)
{
  sub_24F76CB14(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(unsigned __int16 *)(a1 + 160) | (*(unsigned __int8 *)(a1 + 162) << 16));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_24F7A4558(__n128 *a1)
{
  sub_24F77AD50(a1);
  sub_24F77F310();
  v2();
  return v1;
}

uint64_t sub_24F7A45A0(uint64_t a1)
{
  int v2 = *(unsigned __int16 *)(a1 + 160);
  uint64_t result = a1 + 160;
  int v3 = v2 | (*(unsigned __int8 *)(result + 2) << 16);
  uint64_t v4 = *(void *)(result - 56) & 1;
  *(void *)(result - 96) &= 1uLL;
  *(void *)(result - 56) = v4;
  *(_WORD *)uint64_t result = v3 & 0x81FF;
  *(unsigned char *)(result + 2) = (v3 & 0x1FFFF | 0x280000u) >> 16;
  return result;
}

uint64_t sub_24F7A45E4(uint64_t a1)
{
  int v2 = *(unsigned __int16 *)(a1 + 160);
  uint64_t result = a1 + 160;
  uint64_t v3 = *(void *)(result - 56) & 1;
  unsigned int v4 = (v2 | (*(unsigned __int8 *)(result + 2) << 16)) & 0x10177 | 0x88888888;
  *(void *)(result - 96) &= 1uLL;
  *(void *)(result - 56) = v3;
  *(_WORD *)uint64_t result = v2 & 0x81FF;
  *(unsigned char *)(result + 2) = BYTE2(v4);
  return result;
}

void sub_24F7A4624(uint64_t a1)
{
  *(unsigned char *)(a1 + 162) = -88;
  *(_WORD *)(a1 + 160) = 0;
}

double sub_24F7A4658(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 64) = 0x1FFFFFFFCLL;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 147) = 0u;
  return result;
}

uint64_t sub_24F7A4688(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24F781274(&qword_269A2A0E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

double sub_24F7A46F0(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 64) = 0x1FFFFFFFELL;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 147) = 0u;
  return result;
}

void *sub_24F7A4720(void *__src, void *__dst)
{
  return memcpy(__dst, __src, 0xA3uLL);
}

uint64_t sub_24F7A4734(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 64);
  if ((v1 >> 1) <= 0x80000000) {
    return sub_24F76C98C(*(void *)result, *(void *)(result + 8), *(void *)(result + 16), *(void *)(result + 24), *(void *)(result + 32), *(void *)(result + 40), *(void *)(result + 48), *(void *)(result + 56), v1, *(void *)(result + 72), *(void *)(result + 80), *(void *)(result + 88), *(void *)(result + 96), *(void *)(result + 104), *(void *)(result + 112), *(void *)(result + 120), *(void *)(result + 128), *(void *)(result + 136), *(void *)(result + 144),
  }
             *(void *)(result + 152),
             *(unsigned __int16 *)(result + 160) | (*(unsigned __int8 *)(result + 162) << 16));
  return result;
}

void *sub_24F7A47C0(void *__dst, uint64_t *a2)
{
  unint64_t v3 = a2[8];
  if ((v3 >> 1) > 0x80000000)
  {
    memcpy(__dst, a2, 0xA3uLL);
  }
  else
  {
    uint64_t v4 = *a2;
    unint64_t v5 = a2[1];
    uint64_t v6 = a2[2];
    unint64_t v7 = a2[3];
    uint64_t v9 = a2[4];
    uint64_t v8 = a2[5];
    uint64_t v13 = a2[9];
    uint64_t v14 = a2[10];
    uint64_t v15 = a2[11];
    uint64_t v16 = a2[12];
    uint64_t v17 = a2[13];
    uint64_t v18 = a2[14];
    uint64_t v19 = a2[15];
    uint64_t v20 = a2[16];
    uint64_t v21 = a2[17];
    uint64_t v22 = a2[18];
    int v24 = *((unsigned __int8 *)a2 + 162);
    int v25 = *((unsigned __int16 *)a2 + 80);
    uint64_t v23 = a2[19];
    uint64_t v10 = a2[6];
    uint64_t v11 = a2[7];
    sub_24F76CB14(*a2, v5, v6, v7, v9, v8, v10, v11, v3, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,
      v23,
      v25 | (v24 << 16));
    *__dst = v4;
    __dst[1] = v5;
    __dst[2] = v6;
    __dst[3] = v7;
    __dst[4] = v9;
    __dst[5] = v8;
    __dst[6] = v10;
    __dst[7] = v11;
    __dst[8] = v3;
    __dst[9] = v13;
    __n128 __dst[10] = v14;
    __dst[11] = v15;
    __dst[12] = v16;
    __dst[13] = v17;
    __dst[14] = v18;
    __dst[15] = v19;
    __dst[16] = v20;
    __dst[17] = v21;
    __dst[18] = v22;
    __dst[19] = v23;
    *((unsigned char *)__dst + 162) = v24;
    *((_WORD *)__dst + 80) = v25;
  }
  return __dst;
}

uint64_t *sub_24F7A4938(uint64_t *__dst, uint64_t *__src)
{
  unint64_t v4 = __dst[8];
  unint64_t v5 = __src[8];
  unint64_t v6 = v5 >> 1;
  if ((v4 >> 1) > 0x80000000)
  {
    if (v6 <= 0x80000000)
    {
      uint64_t v31 = *__src;
      unint64_t v32 = __src[1];
      uint64_t v33 = __src[2];
      unint64_t v34 = __src[3];
      uint64_t v35 = __src[4];
      uint64_t v41 = __src[9];
      uint64_t v43 = __src[10];
      uint64_t v45 = __src[11];
      uint64_t v47 = __src[12];
      uint64_t v49 = __src[13];
      uint64_t v51 = __src[14];
      uint64_t v53 = __src[15];
      uint64_t v55 = __src[16];
      uint64_t v57 = __src[17];
      uint64_t v59 = __src[18];
      int v63 = *((unsigned __int8 *)__src + 162);
      int v65 = *((unsigned __int16 *)__src + 80);
      uint64_t v61 = __src[19];
      uint64_t v36 = __src[5];
      uint64_t v37 = __src[6];
      uint64_t v38 = __src[7];
      sub_24F76CB14(*__src, v32, v33, v34, v35, v36, v37, v38, v5, v41, v43, v45, v47, v49, v51, v53, v55, v57, v59,
        v61,
        v65 | (v63 << 16));
      *__dst = v31;
      __dst[1] = v32;
      __dst[2] = v33;
      __dst[3] = v34;
      __dst[4] = v35;
      __dst[5] = v36;
      __dst[6] = v37;
      __dst[7] = v38;
      __dst[8] = v5;
      __dst[9] = v41;
      __n128 __dst[10] = v43;
      __dst[11] = v45;
      __dst[12] = v47;
      __dst[13] = v49;
      __dst[14] = v51;
      __dst[15] = v53;
      __dst[16] = v55;
      __dst[17] = v57;
      __dst[18] = v59;
      __dst[19] = v61;
      *((unsigned char *)__dst + 162) = v63;
      *((_WORD *)__dst + 80) = v65;
      return __dst;
    }
LABEL_7:
    memcpy(__dst, __src, 0xA3uLL);
    return __dst;
  }
  if (v6 > 0x80000000)
  {
    sub_24F76C98C(*__dst, __dst[1], __dst[2], __dst[3], __dst[4], __dst[5], __dst[6], __dst[7], v4, __dst[9], __dst[10], __dst[11], __dst[12], __dst[13], __dst[14], __dst[15], __dst[16], __dst[17], __dst[18],
      __dst[19],
      *((unsigned __int16 *)__dst + 80) | (*((unsigned __int8 *)__dst + 162) << 16));
    goto LABEL_7;
  }
  unint64_t v7 = __src[1];
  uint64_t v8 = __src[2];
  unint64_t v9 = __src[3];
  uint64_t v10 = __src[4];
  uint64_t v11 = __src[5];
  uint64_t v12 = __src[6];
  uint64_t v13 = __src[7];
  uint64_t v40 = __src[9];
  uint64_t v42 = __src[10];
  uint64_t v44 = __src[11];
  uint64_t v46 = __src[12];
  uint64_t v48 = __src[13];
  uint64_t v50 = __src[14];
  uint64_t v52 = __src[15];
  uint64_t v54 = __src[16];
  uint64_t v56 = __src[17];
  uint64_t v58 = __src[18];
  int v62 = *((unsigned __int16 *)__src + 80);
  int v64 = *((unsigned __int8 *)__src + 162);
  uint64_t v60 = __src[19];
  uint64_t v14 = *__src;
  sub_24F76CB14(*__src, v7, v8, v9, v10, v11, v12, v13, v5, v40, v42, v44, v46, v48, v50, v52, v54, v56, v58,
    v60,
    v62 | (v64 << 16));
  unsigned int v15 = *((unsigned __int16 *)__dst + 80) | (*((unsigned __int8 *)__dst + 162) << 16);
  uint64_t v16 = *__dst;
  unint64_t v17 = __dst[1];
  *__dst = v14;
  __dst[1] = v7;
  uint64_t v18 = __dst[2];
  unint64_t v19 = __dst[3];
  __dst[2] = v8;
  __dst[3] = v9;
  uint64_t v20 = __dst[4];
  uint64_t v21 = __dst[5];
  __dst[4] = v10;
  __dst[5] = v11;
  uint64_t v22 = __dst[6];
  uint64_t v23 = __dst[7];
  __dst[6] = v12;
  __dst[7] = v13;
  long long v24 = *((_OWORD *)__dst + 4);
  long long v25 = *((_OWORD *)__dst + 5);
  __dst[8] = v5;
  __dst[9] = v40;
  __n128 __dst[10] = v42;
  __dst[11] = v44;
  long long v26 = *((_OWORD *)__dst + 6);
  long long v27 = *((_OWORD *)__dst + 7);
  __dst[12] = v46;
  __dst[13] = v48;
  __dst[14] = v50;
  __dst[15] = v52;
  long long v28 = *((_OWORD *)__dst + 8);
  __dst[16] = v54;
  __dst[17] = v56;
  *((_WORD *)__dst + 80) = v62;
  *((unsigned char *)__dst + 162) = v64;
  uint64_t v29 = __dst[18];
  uint64_t v30 = __dst[19];
  __dst[18] = v58;
  __dst[19] = v60;
  sub_24F76C98C(v16, v17, v18, v19, v20, v21, v22, v23, v24, *((uint64_t *)&v24 + 1), v25, *((uint64_t *)&v25 + 1), v26, *((uint64_t *)&v26 + 1), v27, *((uint64_t *)&v27 + 1), v28, *((uint64_t *)&v28 + 1), v29,
    v30,
    v15);
  return __dst;
}

void *sub_24F7A4C78(void *__dst, char *__src)
{
  unint64_t v4 = __dst[8];
  if ((v4 >> 1) > 0x80000000) {
    goto LABEL_5;
  }
  unint64_t v5 = *((void *)__src + 8);
  if ((v5 >> 1) > 0x80000000)
  {
    sub_24F76C98C(*__dst, __dst[1], __dst[2], __dst[3], __dst[4], __dst[5], __dst[6], __dst[7], v4, __dst[9], __dst[10], __dst[11], __dst[12], __dst[13], __dst[14], __dst[15], __dst[16], __dst[17], __dst[18],
      __dst[19],
      *((unsigned __int16 *)__dst + 80) | (*((unsigned __int8 *)__dst + 162) << 16));
LABEL_5:
    memcpy(__dst, __src, 0xA3uLL);
    return __dst;
  }
  uint64_t v6 = *((void *)__src + 19);
  __int16 v7 = *((_WORD *)__src + 80);
  char v8 = __src[162];
  uint64_t v9 = *__dst;
  unint64_t v10 = __dst[1];
  uint64_t v11 = __dst[2];
  unint64_t v12 = __dst[3];
  uint64_t v13 = __dst[4];
  uint64_t v14 = __dst[5];
  uint64_t v15 = __dst[6];
  uint64_t v16 = __dst[7];
  long long v17 = *(_OWORD *)(__dst + 9);
  long long v18 = *(_OWORD *)(__dst + 11);
  long long v19 = *(_OWORD *)(__dst + 13);
  long long v20 = *(_OWORD *)(__dst + 15);
  long long v21 = *(_OWORD *)(__dst + 17);
  uint64_t v22 = __dst[19];
  unsigned int v23 = *((unsigned __int16 *)__dst + 80) | (*((unsigned __int8 *)__dst + 162) << 16);
  long long v24 = *((_OWORD *)__src + 1);
  *(_OWORD *)__dst = *(_OWORD *)__src;
  *((_OWORD *)__dst + 1) = v24;
  long long v25 = *((_OWORD *)__src + 3);
  *((_OWORD *)__dst + 2) = *((_OWORD *)__src + 2);
  *((_OWORD *)__dst + 3) = v25;
  __dst[8] = v5;
  *(_OWORD *)(__dst + 9) = *(_OWORD *)(__src + 72);
  *(_OWORD *)(__dst + 11) = *(_OWORD *)(__src + 88);
  *(_OWORD *)(__dst + 13) = *(_OWORD *)(__src + 104);
  *(_OWORD *)(__dst + 15) = *(_OWORD *)(__src + 120);
  *(_OWORD *)(__dst + 17) = *(_OWORD *)(__src + 136);
  __dst[19] = v6;
  *((unsigned char *)__dst + 162) = v8;
  *((_WORD *)__dst + 80) = v7;
  sub_24F76C98C(v9, v10, v11, v12, v13, v14, v15, v16, v4, v17, *((uint64_t *)&v17 + 1), v18, *((uint64_t *)&v18 + 1), v19, *((uint64_t *)&v19 + 1), v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1),
    v22,
    v23);
  return __dst;
}

uint64_t sub_24F7A4DE8(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 163)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *(void *)(a1 + 64) >> 1;
  if (v3 > 0x80000000) {
    unsigned int v4 = ~v3;
  }
  else {
    unsigned int v4 = -1;
  }
  if (v4 + 1 >= 2) {
    return v4;
  }
  else {
    return 0;
  }
}

void sub_24F7A4E40(char *a1, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    unsigned int v5 = a2 - 0x7FFFFFFF;
    bzero(a1, 0xA3uLL);
    *(_DWORD *)a1 = v5;
    if (a3 >= 0x7FFFFFFF) {
      a1[163] = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      a1[163] = 0;
    }
    if (a2)
    {
      *((_OWORD *)a1 + 2) = 0u;
      *((_OWORD *)a1 + 3) = 0u;
      *(_OWORD *)a1 = 0u;
      *((_OWORD *)a1 + 1) = 0u;
      *((void *)a1 + 8) = 2 * ~a2;
      *(_OWORD *)(a1 + 72) = 0u;
      *(_OWORD *)(a1 + 88) = 0u;
      *(_OWORD *)(a1 + 104) = 0u;
      *(_OWORD *)(a1 + 120) = 0u;
      *(_OWORD *)(a1 + 136) = 0u;
      *(_OWORD *)(a1 + 147) = 0u;
    }
  }
}

double sub_24F7A4EEC(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 152) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(unsigned char *)(a1 + 162) = 0;
    *(_WORD *)(a1 + 160) = 0;
    *(void *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(void *)(a1 + 64) = 2 * -a2;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 147) = 0u;
  }
  return result;
}

void type metadata accessor for SQLCount()
{
}

uint64_t sub_24F7A4F74(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v17 = MEMORY[0x263F8EE78];
    sub_24F795850();
    unsigned int v5 = (uint64_t *)(a1 + 40);
    uint64_t v6 = v17;
    for (uint64_t i = v3 - 1; ; --i)
    {
      uint64_t v8 = *v5;
      v15[0] = *(v5 - 1);
      v15[1] = v8;
      void v15[2] = a2;
      sub_24F7ADE84((uint64_t)v15);
      sub_24F76F710((uint64_t)v15, (uint64_t)__src);
      v14[0] = 0x5F62647267;
      v14[1] = 0xE500000000000000;
      swift_bridgeObjectRetain_n();
      swift_retain();
      sub_24F8CEEB0();
      swift_bridgeObjectRelease();
      uint64_t v9 = v14[0];
      uint64_t v10 = v14[1];
      uint64_t v17 = v6;
      unint64_t v11 = *(void *)(v6 + 16);
      if (v11 >= *(void *)(v6 + 24) >> 1)
      {
        sub_24F795850();
        uint64_t v6 = v17;
      }
      memcpy(__dst, __src, 0xA3uLL);
      __dst[21] = v9;
      __dst[22] = v10;
      sub_24F7998DC(__dst);
      sub_24F7997BC((uint64_t)__dst, (uint64_t)v14);
      *(void *)(v6 + 16) = v11 + 1;
      memcpy((void *)(v6 + 184 * v11 + 32), v14, 0xB8uLL);
      if (!i) {
        break;
      }
      v5 += 2;
    }
    swift_release();
  }
  else
  {
    swift_release();
    return MEMORY[0x263F8EE78];
  }
  return v6;
}

uint64_t sub_24F7A5114(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v20 = MEMORY[0x263F8EE78];
    sub_24F795DB0(0, v3, 0);
    uint64_t v5 = v20;
    long long v18 = a2 + 2;
    long long v19 = a2;
    uint64_t v6 = (uint64_t *)(a1 + 40);
    while (1)
    {
      uint64_t v8 = *(v6 - 1);
      uint64_t v7 = *v6;
      uint64_t v10 = a2[5];
      uint64_t v9 = a2[6];
      sub_24F7811D0(v18, v10);
      unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 88);
      swift_bridgeObjectRetain();
      uint64_t v12 = v11(v8, v7, v10, v9);
      if (v13) {
        break;
      }
      uint64_t v14 = v12;
      swift_bridgeObjectRelease();
      unint64_t v16 = *(void *)(v20 + 16);
      unint64_t v15 = *(void *)(v20 + 24);
      if (v16 >= v15 >> 1) {
        sub_24F795DB0(v15 > 1, v16 + 1, 1);
      }
      v6 += 2;
      *(void *)(v20 + 16) = v16 + 1;
      *(void *)(v20 + 8 * v16 + 32) = v14;
      --v3;
      a2 = v19;
      if (!v3)
      {
        swift_release();
        return v5;
      }
    }
    swift_bridgeObjectRetain();
    sub_24F8CF7D0();
    swift_bridgeObjectRelease();
    sub_24F8CEEB0();
    sub_24F8CEEB0();
    uint64_t result = sub_24F8CF9D0();
    __break(1u);
  }
  else
  {
    swift_release();
    return MEMORY[0x263F8EE78];
  }
  return result;
}

uint64_t sub_24F7A5314(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v11 = MEMORY[0x263F8EE78];
    sub_24F77C4AC();
    uint64_t v2 = v11;
    unsigned int v4 = (uint64_t *)(a1 + 56);
    do
    {
      uint64_t v6 = *(v4 - 1);
      uint64_t v5 = *v4;
      unint64_t v8 = *(void *)(v11 + 16);
      unint64_t v7 = *(void *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v7 >> 1) {
        sub_24F77C4AC();
      }
      *(void *)(v11 + 16) = v8 + 1;
      uint64_t v9 = v11 + 16 * v8;
      *(void *)(v9 + 32) = v6;
      *(void *)(v9 + 40) = v5;
      v4 += 4;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_24F7A53EC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v11 = MEMORY[0x263F8EE78];
    sub_24F77C4AC();
    uint64_t v2 = v11;
    unsigned int v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v6 = *(v4 - 1);
      uint64_t v5 = *v4;
      unint64_t v8 = *(void *)(v11 + 16);
      unint64_t v7 = *(void *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v7 >> 1) {
        sub_24F77C4AC();
      }
      v4 += 4;
      *(void *)(v11 + 16) = v8 + 1;
      uint64_t v9 = v11 + 16 * v8;
      *(void *)(v9 + 32) = v6;
      *(void *)(v9 + 40) = v5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_24F7A54C4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v18 = MEMORY[0x263F8EE78];
    sub_24F781818();
    uint64_t v5 = v18;
    uint64_t v6 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v7 = *v6++;
      uint64_t v8 = a2[5];
      uint64_t v9 = a2[6];
      sub_24F7811D0(a2 + 2, v8);
      (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t))(v9 + 48))(&v16, v7, v8, v9);
      long long v10 = v16;
      char v11 = v17;
      uint64_t v18 = v5;
      unint64_t v12 = *(void *)(v5 + 16);
      if (v12 >= *(void *)(v5 + 24) >> 1)
      {
        long long v15 = v16;
        sub_24F781818();
        long long v10 = v15;
        uint64_t v5 = v18;
      }
      *(void *)(v5 + 16) = v12 + 1;
      uint64_t v13 = v5 + 24 * v12;
      *(_OWORD *)(v13 + 32) = v10;
      *(unsigned char *)(v13 + 48) = v11;
      --v3;
    }
    while (v3);
    swift_release();
  }
  else
  {
    swift_release();
    return MEMORY[0x263F8EE78];
  }
  return v5;
}

uint64_t sub_24F7A5618(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v12 = MEMORY[0x263F8EE78];
    sub_24F795E30();
    uint64_t v2 = v12;
    unsigned int v4 = (void *)(a1 + 32);
    for (uint64_t i = v1 - 1; ; --i)
    {
      uint64_t v6 = v4[3];
      uint64_t v7 = v4[4];
      sub_24F7811D0(v4, v6);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v11, v6, v7);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v12 = v2;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_24F795E30();
        uint64_t v2 = v12;
      }
      unint64_t v9 = *(void *)(v2 + 16);
      if (v9 >= *(void *)(v2 + 24) >> 1)
      {
        sub_24F795E30();
        uint64_t v2 = v12;
      }
      *(void *)(v2 + 16) = v9 + 1;
      memcpy((void *)(v2 + 168 * v9 + 32), v11, 0xA3uLL);
      if (!i) {
        break;
      }
      v4 += 5;
    }
  }
  return v2;
}

uint64_t sub_24F7A5754(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v12 = MEMORY[0x263F8EE78];
    sub_24F795698();
    uint64_t v2 = v12;
    unsigned int v4 = (void *)(a1 + 32);
    for (uint64_t i = v1 - 1; ; --i)
    {
      uint64_t v6 = v4[3];
      uint64_t v7 = v4[4];
      sub_24F7811D0(v4, v6);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v11, v6, v7);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v12 = v2;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_24F795698();
        uint64_t v2 = v12;
      }
      unint64_t v9 = *(void *)(v2 + 16);
      if (v9 >= *(void *)(v2 + 24) >> 1)
      {
        sub_24F795698();
        uint64_t v2 = v12;
      }
      *(void *)(v2 + 16) = v9 + 1;
      memcpy((void *)(v2 + 168 * v9 + 32), v11, 0xA3uLL);
      if (!i) {
        break;
      }
      v4 += 5;
    }
  }
  return v2;
}

uint64_t sub_24F7A5890(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  int64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v13 = MEMORY[0x263F8EE78];
    sub_24F796024(0, v5, 0);
    uint64_t v7 = v13;
    uint64_t v8 = a1 + 32;
    while (1)
    {
      swift_bridgeObjectRetain();
      sub_24F801D6C();
      if (v3) {
        break;
      }
      uint64_t v3 = 0;
      swift_bridgeObjectRelease();
      unint64_t v10 = *(void *)(v13 + 16);
      unint64_t v9 = *(void *)(v13 + 24);
      if (v10 >= v9 >> 1) {
        sub_24F796024(v9 > 1, v10 + 1, 1);
      }
      *(void *)(v13 + 16) = v10 + 1;
      *(void *)(v13 + 8 * v10 + 32) = v12;
      v8 += 8;
      if (!--v5)
      {
        sub_24F7AE180(a2);
        goto LABEL_10;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    sub_24F7AE180(a2);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_24F7AE180(a2);
    uint64_t v7 = MEMORY[0x263F8EE78];
LABEL_10:
    swift_bridgeObjectRelease();
  }
  return v7;
}

void *sub_24F7A59FC@<X0>(void *__src@<X0>, void *a2@<X8>)
{
  return memcpy(a2, __src, 0xA2uLL);
}

uint64_t QueryInterfaceRequest.select<A>(_:as:)@<X0>(void *a1@<X8>)
{
  memcpy(__dst, v1, 0xA2uLL);
  SelectionRequest.select(_:)();
  sub_24F77AD78(v21, v3, v4, v5, v6, v7, v8, v9, v18, __src[0]);
  memcpy(a1, __src, 0xA2uLL);
  sub_24F77AD78(__dst, v10, v11, v12, v13, v14, v15, v16, v19, __src[0]);
  sub_24F7AD450((uint64_t)__dst);
  return sub_24F7AD514((uint64_t)v21);
}

uint64_t QueryInterfaceRequest.limit(_:offset:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  sub_24F77F324(v5);
  return sub_24F85E9C4((uint64_t (*)(uint64_t))sub_24F7AA3CC, a1, a2);
}

uint64_t QueryInterfaceRequest.aliased(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  sub_24F77F324(v5);
  return sub_24F85E9C4((uint64_t (*)(uint64_t))sub_24F7AA3E4, a1, a2);
}

void *sub_24F7A5BD0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  memcpy(__dst, v2, sizeof(__dst));
  uint64_t v5 = v2[9];
  uint64_t v6 = v2[10];
  memcpy(__src, v2 + 11, sizeof(__src));
  uint64_t v8 = *a1;
  uint64_t v7 = a1[1];
  memcpy(v18, a1 + 2, 0xABuLL);
  sub_24F7ADA50((uint64_t)v18);
  sub_24F7ADA50((uint64_t)v18);
  swift_bridgeObjectRetain();
  sub_24F7AD450((uint64_t)v2);
  swift_isUniquelyReferenced_nonNull_native();
  v20[0] = v6;
  sub_24F808344(v18, v8, v7);
  uint64_t v9 = v20[0];
  swift_bridgeObjectRelease();
  sub_24F7ADB30((uint64_t)v15, (uint64_t)v19);
  sub_24F7ADB30((uint64_t)v19, (uint64_t)v20);
  if (sub_24F7ADB98((uint64_t)v20) == 1)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_24F787184();
      uint64_t v5 = v13;
    }
    unint64_t v10 = *(void *)(v5 + 16);
    if (v10 >= *(void *)(v5 + 24) >> 1)
    {
      sub_24F787184();
      uint64_t v5 = v14;
    }
    *(void *)(v5 + 16) = v10 + 1;
    uint64_t v11 = v5 + 16 * v10;
    *(void *)(v11 + 32) = v8;
    *(void *)(v11 + 40) = v7;
  }
  else
  {
    sub_24F7ADC90((uint64_t)v19);
  }
  sub_24F7ADBB0((uint64_t)v18);
  swift_bridgeObjectRelease();
  memcpy(a2, __dst, 0x48uLL);
  uint64_t result = memcpy(a2 + 11, __src, 0x4AuLL);
  a2[9] = v5;
  a2[10] = v9;
  return result;
}

uint64_t QueryInterfaceRequest.with<A>(_:)@<X0>(void *__src@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  memcpy(__dst, __src, sizeof(__dst));
  sub_24F77F324(v6);
  return sub_24F85E9C4(sub_24F7AA514, a2, a3);
}

uint64_t QueryInterfaceRequest<A>.selectID()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  sub_24F77F324(v27);
  uint64_t v8 = (void *)swift_allocObject();
  void v8[2] = *(void *)(a1 + 16);
  v8[3] = a2;
  v8[4] = a3;
  sub_24F77F324(v8 + 5);
  sub_24F7AD450((uint64_t)v27);
  QueryInterfaceRequest.select(_:)(a1, (uint64_t)__src);
  swift_release();
  sub_24F77AD78(v28, v9, v10, v11, v12, v13, v14, v15, v24, __src[0]);
  memcpy(a4, __src, 0xA2uLL);
  sub_24F77AD78(v29, v16, v17, v18, v19, v20, v21, v22, v25, __src[0]);
  sub_24F7AD450((uint64_t)v29);
  return sub_24F7AD514((uint64_t)v28);
}

uint64_t QueryInterfaceRequest<A>.selectID()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  sub_24F77F324(v13);
  int v10 = (void *)swift_allocObject();
  void v10[2] = *(void *)(a1 + 16);
  v10[3] = a2;
  void v10[4] = a3;
  void v10[5] = a4;
  sub_24F77F324(v10 + 6);
  sub_24F7AD450((uint64_t)v13);
  QueryInterfaceRequest.select(_:)(a1, (uint64_t)v12);
  swift_release();
  memcpy(__dst, v12, 0xA2uLL);
  memcpy(a5, v12, 0xA2uLL);
  memcpy(v15, v12, 0xA2uLL);
  sub_24F7AD450((uint64_t)v15);
  return sub_24F7AD514((uint64_t)__dst);
}

uint64_t QueryInterfaceRequest.sqlSubquery.getter@<X0>(void *a1@<X8>)
{
  sub_24F77F324(v3);
  sub_24F77F324(v4);
  sub_24F7AA6BC((uint64_t)v4);
  sub_24F7AA6E8((uint64_t)v4, (uint64_t)__src);
  memcpy(a1, __src, 0xA2uLL);
  return sub_24F7AD450((uint64_t)v3);
}

void QueryInterfaceRequest.fetchCount(_:)()
{
  memcpy(__dst, v0, sizeof(__dst));
  sub_24F780670();
  sub_24F80025C();
}

void *QueryInterfaceRequest.makePreparedRequest(_:forSingleResult:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5 = v3;
  memcpy(__dst, v5, 0xA2uLL);
  sub_24F7AD450((uint64_t)__dst);
  sub_24F7AD450((uint64_t)__dst);
  sub_24F8C7698(__dst, (uint64_t)__src);
  uint64_t v9 = __dst[11];
  uint64_t v10 = __dst[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_24F7ABCFC(v9, v10);
  uint64_t v12 = v11;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_24F7AD514((uint64_t)__dst);
  memcpy(v41, __src, 0xA8uLL);
  LOBYTE(v41[21]) = a2;
  v41[22] = v12;
  memcpy(v40, v41, sizeof(v40));
  sub_24F8C60A4(a1, v13, v14, v15, v16, v17, v18, v19, v29, v30, v31, v32, v33, v34, v35, v36, v37[0], v37[1], v37[2],
    v37[3]);
  if (v4) {
    return sub_24F7AC0E8(v41);
  }
  uint64_t v21 = v20;
  type metadata accessor for StatementArgumentsSink();
  swift_allocObject();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v22 = sub_24F778A30(0);
  type metadata accessor for SQLGenerationContext();
  swift_initStackObject();
  unsigned int v23 = sub_24F779224(a1, v22, MEMORY[0x263F8EE78]);
  sub_24F8C83CC((uint64_t)v23, (uint64_t)v37);
  swift_release();
  *(void *)(a3 + 56) = 0;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 8) = 0u;
  *(void *)a3 = v21;
  sub_24F7AC1D0((uint64_t)v37, a3 + 8);
  sub_24F787238(*(void *)(a3 + 48));
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_24F7ABCFC(v9, v10);
  uint64_t v26 = v25;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_24F7AC0E8(v41);
  if (!*(void *)(v26 + 16)) {
    return (void *)swift_bridgeObjectRelease();
  }
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = v26;
  memcpy((void *)(v27 + 24), __dst, 0xA2uLL);
  uint64_t v28 = *(void *)(a3 + 48);
  sub_24F7AD450((uint64_t)__dst);
  uint64_t result = (void *)sub_24F787238(v28);
  *(void *)(a3 + 48) = sub_24F7AC2E0;
  *(void *)(a3 + 56) = v27;
  return result;
}

uint64_t sub_24F7A6334(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_24F7A635C(a1, a3, a4, a2);
}

uint64_t sub_24F7A635C(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1);
  uint64_t v247 = v1;
  unint64_t v4 = v3;
  unint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v246 = v2;
  unint64_t v255 = v3;
  if (v3 >> 62) {
    goto LABEL_313;
  }
  uint64_t v9 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  uint64_t v10 = v9;
  if (!v9) {
    return swift_bridgeObjectRelease();
  }
  while (2)
  {
    uint64_t v251 = v10;
    v245 = v8;
    sub_24F8A0264(0);
    unint64_t v254 = v4 & 0xC000000000000001;
    if ((v4 & 0xC000000000000001) != 0)
    {
      v244 = (void *)MEMORY[0x253364060](0, v4);
    }
    else
    {
      v244 = *(void **)(v4 + 32);
      swift_retain();
    }
    swift_bridgeObjectRelease();
    if (!v8[2]) {
      return swift_release();
    }
    uint64_t v240 = v8[2];
    swift_bridgeObjectRetain();
    sub_24F8A028C(0, 1, v8);
    unint64_t v11 = v8[4];
    sub_24F8A028C(0, 1, v11);
    v256 = (void *)v11;
    LODWORD(v11) = *(char *)(v11 + 88);
    if ((v11 & 0x80000000) != 0) {
      goto LABEL_317;
    }
    uint64_t v243 = 1;
    uint64_t v241 = v6;
LABEL_8:
    unint64_t v13 = v256[8];
    uint64_t v14 = v256[9];
    uint64_t v15 = (void *)v256[10];
    uint64_t v17 = *(void *)v6;
    uint64_t v16 = *(void *)(v6 + 8);
    uint64_t v298 = *(void *)(v6 + 16);
    uint64_t v335 = v256[7];
    uint64_t v12 = v335;
    unint64_t v336 = v13;
    uint64_t v337 = v14;
    v338 = v15;
    char v339 = v11 & 1;
    swift_bridgeObjectRetain();
    sub_24F799140(v12, v13, v14, (uint64_t)v15, v11);
    uint64_t v18 = v17;
    uint64_t v292 = v16;
    uint64_t v19 = sub_24F800E40(v246);
    if (v247) {
      goto LABEL_293;
    }
    uint64_t v20 = v19;
    sub_24F7AD3A0(v12, v13, v14, (uint64_t)v15, v11);
    uint64_t v21 = sub_24F7A5314(v20);
    v390 = (void *)sub_24F7A53EC(v20);
    if (*(void *)(v20 + 16) < 2uLL) {
      goto LABEL_15;
    }
    if (qword_269A2A270 != -1) {
      swift_once();
    }
    if (byte_269A33120 == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v304 = v21;
      if (*(unsigned char *)(v241 + 161))
      {
        sub_24F800CBC((uint64_t)v340);
        uint64_t v22 = v351;
        uint64_t v23 = v352;
        char v24 = v353;
        char v25 = v354;
        uint64_t v26 = v349;
        uint64_t v27 = v350;
        uint64_t v28 = v347;
        uint64_t v29 = v348;
        char v30 = v346;
        uint64_t v31 = v344;
        uint64_t v239 = v345;
        uint64_t v32 = v342;
        uint64_t v33 = v343;
        char v34 = v341;
        uint64_t v35 = v340[7];
        uint64_t v36 = v340[6];
        uint64_t v37 = v340[5];
        uint64_t v38 = v340[4];
        uint64_t v39 = v340[0];
        uint64_t v40 = v340[1];
        uint64_t v41 = v340[3];
        uint64_t v42 = v340[2];
      }
      else
      {
        char v270 = *(unsigned char *)(v241 + 160);
        uint64_t v287 = *(void *)(v241 + 128);
        uint64_t v289 = *(void *)(v241 + 144);
        uint64_t v281 = *(void *)(v241 + 112);
        uint64_t v284 = *(void *)(v241 + 136);
        uint64_t v264 = *(void *)(v241 + 120);
        uint64_t v267 = *(void *)(v241 + 152);
        char v278 = *(unsigned char *)(v241 + 104);
        uint64_t v33 = *(void *)(v241 + 80);
        uint64_t v261 = *(void *)(v241 + 88);
        uint64_t v239 = *(void *)(v241 + 96);
        uint64_t v272 = *(void *)(v241 + 72);
        uint64_t v47 = *(void *)(v241 + 48);
        uint64_t v35 = *(void *)(v241 + 56);
        char v34 = *(unsigned char *)(v241 + 64);
        uint64_t v48 = *(void *)(v241 + 32);
        uint64_t v37 = *(void *)(v241 + 40);
        uint64_t v49 = *(void *)(v241 + 24);
        sub_24F7AD450(v241);
        char v24 = v270;
        uint64_t v41 = v49;
        uint64_t v36 = v47;
        uint64_t v31 = v261;
        uint64_t v29 = v264;
        uint64_t v38 = v48;
        uint64_t v32 = v272;
        char v30 = v278;
        uint64_t v28 = v281;
        uint64_t v27 = v284;
        uint64_t v26 = v287;
        uint64_t v22 = v289;
        char v25 = 0;
        uint64_t v40 = v292;
        uint64_t v42 = v298;
        uint64_t v39 = v18;
        uint64_t v23 = v267;
      }
      uint64_t v299 = v42;
      v318[0] = v39;
      v318[1] = v40;
      v318[2] = v42;
      uint64_t v242 = v41;
      v318[3] = v41;
      v318[4] = v38;
      uint64_t v248 = v36;
      uint64_t v249 = v37;
      v318[5] = v37;
      v318[6] = v36;
      uint64_t v257 = v35;
      v318[7] = v35;
      char v252 = v34;
      char v319 = v34;
      uint64_t v273 = v32;
      uint64_t v320 = v32;
      uint64_t v262 = v33;
      uint64_t v321 = v33;
      uint64_t v322 = v31;
      uint64_t v323 = v239;
      char v279 = v30;
      char v324 = v30;
      uint64_t v282 = v28;
      uint64_t v285 = v27;
      uint64_t v325 = v28;
      uint64_t v326 = v29;
      uint64_t v288 = v26;
      uint64_t v290 = v22;
      uint64_t v327 = v26;
      uint64_t v328 = v27;
      uint64_t v329 = v22;
      uint64_t v330 = v23;
      char v331 = v24;
      char v259 = v25;
      char v332 = v25;
      char v50 = v24;
      uint64_t v51 = v29;
      uint64_t v52 = v38;
      uint64_t v53 = v39;
      sub_24F7AD450((uint64_t)v318);
      uint64_t v54 = sub_24F7D4240(v31, v239, (uint64_t (*)(unsigned char *))sub_24F8032E0, 0);
      uint64_t v237 = v55;
      uint64_t v238 = v54;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_24F7AD514((uint64_t)v318);
      uint64_t v56 = v390[2];
      if (v56)
      {
        uint64_t v268 = v23;
        uint64_t v293 = v40;
        v310[0] = MEMORY[0x263F8EE78];
        sub_24F795850();
        uint64_t v57 = v310[0];
        uint64_t v58 = v390 + 5;
        do
        {
          uint64_t v59 = *v58;
          v316[0] = *(v58 - 1);
          v316[1] = v59;
          sub_24F7991DC((uint64_t)v316);
          sub_24F76F710((uint64_t)v316, (uint64_t)v317);
          v310[0] = v57;
          unint64_t v61 = *(void *)(v57 + 16);
          unint64_t v60 = *(void *)(v57 + 24);
          swift_bridgeObjectRetain();
          if (v61 >= v60 >> 1)
          {
            sub_24F795850();
            uint64_t v57 = v310[0];
          }
          v58 += 2;
          memcpy(v315, v317, 0xA3uLL);
          sub_24F799920(v315);
          sub_24F7997BC((uint64_t)v315, (uint64_t)__src);
          *(void *)(v57 + 16) = v61 + 1;
          memcpy((void *)(v57 + 184 * v61 + 32), __src, 0xB8uLL);
          --v56;
        }
        while (v56);
        uint64_t v62 = v299;
        uint64_t v40 = v293;
        uint64_t v23 = v268;
      }
      else
      {
        uint64_t v57 = MEMORY[0x263F8EE78];
        uint64_t v62 = v299;
      }
      v311[0] = v53;
      v311[1] = v40;
      v311[2] = v62;
      v311[3] = v242;
      v311[4] = v52;
      v311[5] = v249;
      v311[6] = v248;
      v311[7] = v257;
      LOBYTE(v311[8]) = v252;
      v311[9] = v273;
      v311[10] = v262;
      v311[11] = v238;
      v311[12] = v237;
      LOBYTE(v311[13]) = v279;
      v311[14] = v282;
      v311[15] = v51;
      v311[16] = v288;
      v311[17] = v285;
      v311[18] = v290;
      v311[19] = v23;
      LOBYTE(v311[20]) = v50;
      BYTE1(v311[20]) = v259;
      memcpy(v388, v311, sizeof(v388));
      sub_24F800F48(v57, (uint64_t)v355);
      memcpy(v312, v355, sizeof(v312));
      swift_bridgeObjectRelease();
      sub_24F7AD514((uint64_t)v311);
      memcpy(v313, v312, 0xA2uLL);
      sub_24F7AA6BC((uint64_t)v313);
      sub_24F7AA6E8((uint64_t)v313, (uint64_t)v314);
      memcpy(&__src[3], v314, 0xA2uLL);
      __src[0] = 0x7361625F62647267;
      __src[1] = 0xE900000000000065;
      __src[2] = 0;
      BYTE2(__src[23]) = 0;
      memcpy(v385, __src, 0xBBuLL);
      uint64_t v21 = v304;
      uint64_t v63 = *(void *)(v304 + 16);
      if (v63)
      {
        sub_24F7AD450((uint64_t)v355);
        v316[0] = MEMORY[0x263F8EE78];
        sub_24F795698();
        int v64 = (void *)v316[0];
        int v65 = (uint64_t *)(v304 + 40);
        do
        {
          uint64_t v67 = *(v65 - 1);
          uint64_t v66 = *v65;
          v316[0] = v64;
          unint64_t v69 = v64[2];
          unint64_t v68 = v64[3];
          swift_bridgeObjectRetain();
          if (v69 >= v68 >> 1)
          {
            sub_24F795698();
            int v64 = (void *)v316[0];
          }
          v65 += 2;
          v317[0] = v67;
          v317[1] = v66;
          sub_24F7991DC((uint64_t)v317);
          sub_24F76F710((uint64_t)v317, (uint64_t)v315);
          v64[2] = v69 + 1;
          memcpy(&v64[21 * v69 + 4], v315, 0xA3uLL);
          --v63;
        }
        while (v63);
      }
      else
      {
        sub_24F7AD450((uint64_t)v355);
        int v64 = (void *)MEMORY[0x263F8EE78];
      }
      uint64_t v70 = v64[2];
      if (!v70)
      {
        swift_bridgeObjectRelease();
        __break(1u);
        goto LABEL_317;
      }
      sub_24F8A028C(0, 1, v64);
      memcpy(v315, v64 + 4, 0xA3uLL);
      if (v70 == 1)
      {
        sub_24F7AC4B8((uint64_t)v315, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))sub_24F76CB14);
        swift_bridgeObjectRelease();
        uint64_t v71 = v315;
      }
      else
      {
        v310[0] = v64;
        sub_24F7AD710((uint64_t)v310);
        sub_24F76F710((uint64_t)v310, (uint64_t)v316);
        uint64_t v71 = v316;
      }
      memcpy(v317, v71, 0xA3uLL);
      v308[0] = 0x7361625F62647267;
      v308[1] = 0xE900000000000065;
      sub_24F7AD754((uint64_t)v308);
      sub_24F7AD780((uint64_t)v308, (uint64_t)v309);
      uint64_t v72 = (unsigned char *)swift_allocObject();
      memcpy(v72 + 16, v317, 0xA3uLL);
      memcpy(v72 + 184, v309, 0xA2uLL);
      v72[346] = 0;
      v310[0] = v72;
      sub_24F7AD91C((uint64_t)v310);
      sub_24F76F710((uint64_t)v310, (uint64_t)v316);
      memcpy(v387, v316, 0xA3uLL);
      type metadata accessor for TableAlias();
      uint64_t v73 = swift_allocObject();
      *(_OWORD *)(v73 + 16) = 0u;
      *(_OWORD *)(v73 + 32) = 0u;
      *(unsigned char *)(v73 + 48) = 0;
      v307 = v256;
      swift_bridgeObjectRetain();
      sub_24F7AC4B8((uint64_t)v317, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))sub_24F76CB14);
      sub_24F7AB208(&v307, v73, v387);
      v306[0] = v307;
      sub_24F868EE0((uint64_t)&v356);
      swift_bridgeObjectRelease();
      swift_retain();
      uint64_t v74 = sub_24F7A4F74(v304, v73);
      uint64_t v75 = swift_allocObject();
      *(void *)(v75 + 16) = v74;
      uint64_t v76 = swift_allocObject();
      *(_OWORD *)(v76 + 16) = v358;
      *(void *)(v76 + 32) = sub_24F7AE26C;
      *(void *)(v76 + 40) = v75;
      swift_release();
      *(_OWORD *)v305 = v356;
      *(void *)&v305[16] = v357;
      *(void *)&v305[24] = sub_24F7AE284;
      *(void *)&v305[32] = v76;
      *(_OWORD *)&v305[40] = v359;
      *(void *)&v305[56] = v360;
      v305[64] = v361;
      *(_OWORD *)&v305[72] = v362;
      *(_OWORD *)&v305[88] = v363;
      v305[104] = v364;
      *(_OWORD *)&v305[112] = v365;
      *(_OWORD *)&v305[128] = v366;
      *(_OWORD *)&v305[144] = v367;
      v305[160] = v368;
      v305[161] = v369;
      memcpy(v386, v305, sizeof(v386));
      sub_24F7A5BD0(v385, v306);
      swift_release();
      sub_24F7AD514((uint64_t)v355);
      sub_24F7AC4B8((uint64_t)v317, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))sub_24F76C98C);
      sub_24F7AD514((uint64_t)v305);
      sub_24F7AD964((uint64_t)__src);
      memcpy(v334, v306, sizeof(v334));
    }
    else
    {
LABEL_15:
      sub_24F7D6024(v255, v20, __src);
      swift_bridgeObjectRelease();
      memcpy(__dst, __src, 0xA3uLL);
      type metadata accessor for TableAlias();
      uint64_t v43 = swift_allocObject();
      *(_OWORD *)(v43 + 16) = 0u;
      *(_OWORD *)(v43 + 32) = 0u;
      *(unsigned char *)(v43 + 48) = 0;
      __src[0] = v256;
      swift_bridgeObjectRetain();
      sub_24F7AB208(__src, v43, __dst);
      v315[0] = __src[0];
      sub_24F868EE0((uint64_t)&v370);
      swift_bridgeObjectRelease();
      swift_retain();
      uint64_t v44 = sub_24F7A4F74(v21, v43);
      uint64_t v45 = swift_allocObject();
      *(void *)(v45 + 16) = v44;
      uint64_t v46 = swift_allocObject();
      *(_OWORD *)(v46 + 16) = v372;
      *(void *)(v46 + 32) = sub_24F7AD430;
      *(void *)(v46 + 40) = v45;
      swift_release();
      sub_24F7AC4B8((uint64_t)__dst, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))sub_24F76C98C);
      LOBYTE(v315[0]) = v383;
      *(_OWORD *)v334 = v370;
      *(void *)&v334[16] = v371;
      *(void *)&v334[24] = sub_24F7AE284;
      *(void *)&v334[32] = v46;
      *(_OWORD *)&v334[40] = v373;
      *(void *)&v334[56] = v374;
      v334[64] = v375;
      *(_OWORD *)&v334[72] = v376;
      *(_OWORD *)&v334[88] = v377;
      v334[104] = v378;
      *(_OWORD *)&v334[112] = v379;
      *(_OWORD *)&v334[128] = v380;
      *(_OWORD *)&v334[144] = v381;
      v334[160] = v382;
      v334[161] = v383;
    }
    memcpy(v384, v334, sizeof(v384));
    sub_24F7AD450((uint64_t)v334);
    unint64_t v77 = v255;
    unint64_t v78 = sub_24F7CB654();
    uint64_t v247 = 0;
    sub_24F7AD514((uint64_t)v334);
    uint64_t v79 = *(void *)(v21 + 16);
    if (v79)
    {
      v315[0] = MEMORY[0x263F8EE78];
      sub_24F77C4AC();
      uint64_t v80 = v315[0];
      uint64_t v81 = v21 + 40;
      do
      {
        __src[0] = 0x5F62647267;
        __src[1] = 0xE500000000000000;
        swift_bridgeObjectRetain();
        sub_24F8CEEB0();
        swift_bridgeObjectRelease();
        uint64_t v82 = __src[0];
        uint64_t v83 = __src[1];
        v315[0] = v80;
        unint64_t v84 = *(void *)(v80 + 16);
        if (v84 >= *(void *)(v80 + 24) >> 1)
        {
          sub_24F77C4AC();
          uint64_t v80 = v315[0];
        }
        v81 += 16;
        *(void *)(v80 + 16) = v84 + 1;
        uint64_t v85 = v80 + 16 * v84;
        *(void *)(v85 + 32) = v82;
        *(void *)(v85 + 40) = v83;
        --v79;
      }
      while (v79);
      swift_bridgeObjectRelease();
      unint64_t v77 = v255;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v80 = MEMORY[0x263F8EE78];
    }
    uint64_t v263 = sub_24F7AB09C(v80, v78);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_retain();
    uint64_t v8 = 0;
    uint64_t v86 = sub_24F7A5114((uint64_t)v390, v244);
    swift_bridgeObjectRelease();
    uint64_t v253 = *(void *)(v86 + 16);
    uint64_t v87 = v256[2];
    v250 = (uint64_t *)(v86 + 32);
    swift_bridgeObjectRetain();
    unint64_t v6 = 0;
    uint64_t v280 = v87;
    while (1)
    {
      if (v254)
      {
        v291 = (void *)MEMORY[0x253364060](v6, v77);
      }
      else
      {
        if (v6 >= *(void *)((v255 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_312;
        }
        v291 = *(void **)(v255 + 32 + 8 * v6);
        swift_retain();
      }
      BOOL v88 = __OFADD__(v6, 1);
      unint64_t v260 = v6 + 1;
      unint64_t v6 = v263;
      if (v88) {
        goto LABEL_311;
      }
      if (v253)
      {
        v315[0] = MEMORY[0x263F8EE78];
        sub_24F781818();
        v390 = v291 + 2;
        uint64_t v89 = v253;
        uint64_t v90 = v315[0];
        uint64_t v91 = v250;
        do
        {
          uint64_t v92 = *v91++;
          uint64_t v93 = v291[5];
          uint64_t v94 = v291[6];
          sub_24F7811D0(v390, v93);
          (*(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t))(v94 + 48))(__src, v92, v93, v94);
          uint64_t v95 = __src[0];
          uint64_t v96 = __src[1];
          char v97 = __src[2];
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v315[0] = v90;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_24F781818();
            uint64_t v90 = v315[0];
          }
          unint64_t v99 = *(void *)(v90 + 16);
          if (v99 >= *(void *)(v90 + 24) >> 1)
          {
            sub_24F781818();
            uint64_t v90 = v315[0];
          }
          *(void *)(v90 + 16) = v99 + 1;
          uint64_t v100 = v90 + 24 * v99;
          *(void *)(v100 + 32) = v95;
          *(void *)(v100 + 40) = v96;
          *(unsigned char *)(v100 + 48) = v97;
          --v89;
        }
        while (v89);
        unint64_t v6 = v263;
        uint64_t v87 = v280;
      }
      if (*(void *)(v6 + 16))
      {
        unint64_t v101 = sub_24F7C0378();
        uint64_t v8 = (void *)MEMORY[0x263F8EE78];
        if (v102)
        {
          uint64_t v8 = *(void **)(*(void *)(v263 + 56) + 8 * v101);
          swift_bridgeObjectRetain();
        }
      }
      else
      {
        uint64_t v8 = (void *)MEMORY[0x263F8EE78];
      }
      uint64_t v258 = (uint64_t)v8;
      swift_bridgeObjectRelease();
      if (v87) {
        break;
      }
      uint64_t v104 = (void *)MEMORY[0x263F8EE78];
LABEL_284:
      unint64_t v77 = v255;
      swift_beginAccess();
      sub_24F8B378C(v258, v104);
      swift_endAccess();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v6 = v260;
      if (v260 == v251)
      {
        swift_bridgeObjectRelease();
        sub_24F7AD514((uint64_t)v334);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v243 == v240) {
          goto LABEL_306;
        }
        sub_24F8A028C(v243, 1, v245);
        unint64_t v11 = v245[v243 + 4];
        sub_24F8A028C(0, 1, v11);
        v256 = (void *)v11;
        LODWORD(v11) = *(char *)(v11 + 88);
        ++v243;
        unint64_t v6 = v241;
        if ((v11 & 0x80000000) != 0)
        {
LABEL_317:
          sub_24F8CF9D0();
          __break(1u);
          swift_bridgeObjectRelease();
          __break(1u);
          JUMPOUT(0x24F7A8A64);
        }
        goto LABEL_8;
      }
    }
    v316[0] = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    sub_24F77C4AC();
    uint64_t v103 = 0;
    uint64_t v104 = (void *)v316[0];
LABEL_63:
    memcpy(__src, &v256[29 * v103 + 4], 0xE3uLL);
    uint64_t v15 = (void *)__src[0];
    unint64_t v11 = __src[1];
    v390 = (void *)__src[0];
    if ((__src[28] & 0x10000) != 0)
    {
      switch(LOBYTE(__src[2]))
      {
        case 1:
          sub_24F79900C((uint64_t)__src);
          sub_24F79900C((uint64_t)__src);
          if (qword_26B1F5678 != -1) {
            swift_once();
          }
          swift_beginAccess();
          uint64_t v125 = xmmword_26B1F5730;
          uint64_t v8 = (void *)qword_26B1F5740;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v126 = sub_24F858C10();
          if (sub_24F8CFD00()) {
            goto LABEL_300;
          }
          unint64_t v276 = v126;
          uint64_t v283 = v103;
          v286 = v104;
          unint64_t v127 = sub_24F82AAB8((uint64_t)v15, v11);
          sub_24F799128((uint64_t)v15, v11, 1u);
          unint64_t v13 = v127;
          unint64_t v128 = v127 >> 14;
          if (v127 < 0x4000) {
            goto LABEL_207;
          }
          while (2)
          {
            swift_bridgeObjectRetain();
            sub_24F8CEE80();
            uint64_t v129 = sub_24F8CEF80();
            uint64_t v131 = v130;
            sub_24F7AD5DC((uint64_t)v15, v11, 1u);
            if (v129 == 48 && v131 == 0xE100000000000000) {
              goto LABEL_116;
            }
            if ((sub_24F8CFD00() & 1) == 0)
            {
              if (v129 == 57 && v131 == 0xE100000000000000)
              {
                swift_bridgeObjectRelease();
              }
              else
              {
LABEL_116:
                char v134 = sub_24F8CFD00();
                swift_bridgeObjectRelease();
                if (v134) {
                  goto LABEL_206;
                }
              }
              unint64_t v13 = sub_24F8CEE80();
              unint64_t v128 = v13 >> 14;
              if (v13 < 0x4000) {
                goto LABEL_207;
              }
              continue;
            }
            break;
          }
          swift_bridgeObjectRelease();
LABEL_206:
          if (v127 >> 14 < v128) {
            goto LABEL_296;
          }
LABEL_207:
          sub_24F8AB4B0(v127, v13, (uint64_t)v15, v11);
          unint64_t v6 = v195;
          sub_24F7AD5DC((uint64_t)v15, v11, 1u);
          swift_bridgeObjectRelease();
          if (v6 >> 14 < v276 >> 14) {
            goto LABEL_305;
          }
          uint64_t v196 = sub_24F8CEFA0();
          uint64_t v172 = MEMORY[0x253363690](v196);
          unint64_t v174 = v197;
          swift_bridgeObjectRelease();
          unint64_t v266 = v6;
          uint64_t v269 = v125;
          if ((v174 & 0x1000000000000000) != 0) {
            uint64_t v198 = sub_24F8CEF40();
          }
          else {
            uint64_t v198 = sub_24F8CEF50();
          }
          uint64_t v12 = v198;
          v296 = v8 + 8;
          uint64_t v199 = 1 << *((unsigned char *)v8 + 32);
          if (v199 < 64) {
            uint64_t v200 = ~(-1 << v199);
          }
          else {
            uint64_t v200 = -1;
          }
          unint64_t v201 = v200 & v8[8];
          int64_t v302 = (unint64_t)(v199 + 63) >> 6;
          swift_bridgeObjectRetain();
          uint64_t v14 = 0;
LABEL_214:
          if (v201)
          {
            unint64_t v202 = __clz(__rbit64(v201));
            v201 &= v201 - 1;
            unint64_t v203 = v202 | (v14 << 6);
          }
          else
          {
            BOOL v88 = __OFADD__(v14++, 1);
            if (v88) {
              goto LABEL_291;
            }
            if (v14 >= v302)
            {
              uint64_t v87 = v280;
              v182 = v390;
              goto LABEL_237;
            }
            unint64_t v204 = v296[v14];
            v182 = v390;
            if (!v204)
            {
              uint64_t v205 = v14 + 1;
              if (v14 + 1 >= v302) {
                goto LABEL_236;
              }
              unint64_t v204 = v296[v205];
              if (!v204)
              {
                uint64_t v205 = v14 + 2;
                if (v14 + 2 >= v302) {
                  goto LABEL_236;
                }
                unint64_t v204 = v296[v205];
                if (!v204)
                {
                  uint64_t v205 = v14 + 3;
                  if (v14 + 3 >= v302) {
                    goto LABEL_236;
                  }
                  unint64_t v204 = v296[v205];
                  if (!v204)
                  {
                    uint64_t v205 = v14 + 4;
                    if (v14 + 4 >= v302)
                    {
LABEL_236:
                      uint64_t v87 = v280;
LABEL_237:
                      swift_release();
                      sub_24F7B0E0C(6);
                      v390 = v206;
                      swift_bridgeObjectRetain();
                      uint64_t v185 = sub_24F8CEFA0();
                      uint64_t v187 = v207;
                      uint64_t v189 = v208;
                      uint64_t v191 = v209;
                      uint64_t v192 = (uint64_t)v182;
                      uint64_t v193 = v11;
                      unsigned __int8 v194 = 1;
                      goto LABEL_238;
                    }
                    unint64_t v204 = v296[v205];
                    if (!v204)
                    {
                      while (1)
                      {
                        uint64_t v14 = v205 + 1;
                        if (__OFADD__(v205, 1)) {
                          break;
                        }
                        if (v14 >= v302) {
                          goto LABEL_236;
                        }
                        unint64_t v204 = v296[v14];
                        ++v205;
                        if (v204) {
                          goto LABEL_228;
                        }
                      }
LABEL_308:
                      __break(1u);
LABEL_309:
                      __break(1u);
LABEL_310:
                      __break(1u);
LABEL_311:
                      __break(1u);
LABEL_312:
                      __break(1u);
LABEL_313:
                      swift_bridgeObjectRetain();
                      uint64_t v10 = sub_24F8CF9E0();
                      unint64_t v4 = v255;
                      if (!v10) {
                        return swift_bridgeObjectRelease();
                      }
                      continue;
                    }
                  }
                }
              }
              uint64_t v14 = v205;
            }
LABEL_228:
            unint64_t v201 = (v204 - 1) & v204;
            unint64_t v203 = __clz(__rbit64(v204)) + (v14 << 6);
          }
          uint64_t v15 = *(id *)(v8[7] + 8 * v203);
          unint64_t v6 = sub_24F8CED70();
          unint64_t v13 = (unint64_t)objc_msgSend(v15, sel_firstMatchInString_options_range_, v6, 0, 0, v12);

          if (v13) {
            goto LABEL_269;
          }
          goto LABEL_214;
        case 2:
        case 3:
          goto LABEL_84;
        default:
          sub_24F79900C((uint64_t)__src);
          sub_24F79900C((uint64_t)__src);
          if (qword_26B1F5678 != -1) {
            swift_once();
          }
          swift_beginAccess();
          uint64_t v105 = xmmword_26B1F5730;
          uint64_t v8 = (void *)qword_26B1F5740;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v106 = sub_24F858C10();
          if (sub_24F8CFD00()) {
            goto LABEL_301;
          }
          unint64_t v274 = v106;
          uint64_t v283 = v103;
          v286 = v104;
          unint64_t v107 = sub_24F82AAB8((uint64_t)v15, v11);
          sub_24F799128((uint64_t)v15, v11, 0);
          unint64_t v13 = v107;
          unint64_t v108 = v107 >> 14;
          if (v107 < 0x4000) {
            goto LABEL_174;
          }
          while (2)
          {
            swift_bridgeObjectRetain();
            sub_24F8CEE80();
            uint64_t v109 = sub_24F8CEF80();
            uint64_t v111 = v110;
            sub_24F7AD5DC((uint64_t)v15, v11, 0);
            if (v109 == 48 && v111 == 0xE100000000000000) {
              goto LABEL_78;
            }
            if ((sub_24F8CFD00() & 1) == 0)
            {
              if (v109 == 57 && v111 == 0xE100000000000000)
              {
                swift_bridgeObjectRelease();
              }
              else
              {
LABEL_78:
                char v114 = sub_24F8CFD00();
                swift_bridgeObjectRelease();
                if (v114) {
                  goto LABEL_173;
                }
              }
              unint64_t v13 = sub_24F8CEE80();
              unint64_t v108 = v13 >> 14;
              if (v13 < 0x4000) {
                goto LABEL_174;
              }
              continue;
            }
            break;
          }
          swift_bridgeObjectRelease();
LABEL_173:
          if (v107 >> 14 < v108)
          {
            __break(1u);
LABEL_295:
            __break(1u);
LABEL_296:
            __break(1u);
            goto LABEL_297;
          }
LABEL_174:
          sub_24F8AB4B0(v107, v13, (uint64_t)v15, v11);
          unint64_t v6 = v170;
          sub_24F7AD5DC((uint64_t)v15, v11, 0);
          swift_bridgeObjectRelease();
          if (v6 >> 14 < v274 >> 14) {
            goto LABEL_303;
          }
          uint64_t v171 = sub_24F8CEFA0();
          uint64_t v172 = MEMORY[0x253363690](v171);
          unint64_t v174 = v173;
          swift_bridgeObjectRelease();
          unint64_t v266 = v6;
          uint64_t v269 = v105;
          if ((v174 & 0x1000000000000000) != 0) {
            uint64_t v175 = sub_24F8CEF40();
          }
          else {
            uint64_t v175 = sub_24F8CEF50();
          }
          uint64_t v12 = v175;
          v295 = v8 + 8;
          uint64_t v176 = 1 << *((unsigned char *)v8 + 32);
          if (v176 < 64) {
            uint64_t v177 = ~(-1 << v176);
          }
          else {
            uint64_t v177 = -1;
          }
          unint64_t v178 = v177 & v8[8];
          int64_t v301 = (unint64_t)(v176 + 63) >> 6;
          swift_bridgeObjectRetain();
          uint64_t v14 = 0;
          while (2)
          {
            if (v178)
            {
              unint64_t v179 = __clz(__rbit64(v178));
              v178 &= v178 - 1;
              unint64_t v180 = v179 | (v14 << 6);
              goto LABEL_196;
            }
            BOOL v88 = __OFADD__(v14++, 1);
            if (v88) {
              goto LABEL_290;
            }
            if (v14 >= v301)
            {
              uint64_t v87 = v280;
              v182 = v390;
              goto LABEL_204;
            }
            unint64_t v181 = v295[v14];
            v182 = v390;
            if (v181) {
              goto LABEL_195;
            }
            uint64_t v183 = v14 + 1;
            if (v14 + 1 >= v301) {
              goto LABEL_203;
            }
            unint64_t v181 = v295[v183];
            if (v181) {
              goto LABEL_194;
            }
            uint64_t v183 = v14 + 2;
            if (v14 + 2 >= v301) {
              goto LABEL_203;
            }
            unint64_t v181 = v295[v183];
            if (v181) {
              goto LABEL_194;
            }
            uint64_t v183 = v14 + 3;
            if (v14 + 3 >= v301) {
              goto LABEL_203;
            }
            unint64_t v181 = v295[v183];
            if (v181) {
              goto LABEL_194;
            }
            uint64_t v183 = v14 + 4;
            if (v14 + 4 >= v301) {
              goto LABEL_203;
            }
            unint64_t v181 = v295[v183];
            if (v181)
            {
LABEL_194:
              uint64_t v14 = v183;
LABEL_195:
              unint64_t v178 = (v181 - 1) & v181;
              unint64_t v180 = __clz(__rbit64(v181)) + (v14 << 6);
LABEL_196:
              uint64_t v15 = *(id *)(v8[7] + 8 * v180);
              unint64_t v6 = sub_24F8CED70();
              unint64_t v13 = (unint64_t)objc_msgSend(v15, sel_firstMatchInString_options_range_, v6, 0, 0, v12);

              if (v13) {
                goto LABEL_269;
              }
              continue;
            }
            break;
          }
          while (1)
          {
            uint64_t v14 = v183 + 1;
            if (__OFADD__(v183, 1))
            {
              __break(1u);
              goto LABEL_308;
            }
            if (v14 >= v301) {
              break;
            }
            unint64_t v181 = v295[v14];
            ++v183;
            if (v181) {
              goto LABEL_195;
            }
          }
LABEL_203:
          uint64_t v87 = v280;
LABEL_204:
          swift_release();
          sub_24F7B0E0C(6);
          v390 = v184;
          swift_bridgeObjectRetain();
          uint64_t v185 = sub_24F8CEFA0();
          uint64_t v187 = v186;
          uint64_t v189 = v188;
          uint64_t v191 = v190;
          uint64_t v192 = (uint64_t)v182;
          uint64_t v193 = v11;
          unsigned __int8 v194 = 0;
LABEL_238:
          sub_24F7AD5DC(v192, v193, v194);
          uint64_t v210 = MEMORY[0x253363690](v185, v187, v189, v191);
          uint64_t v212 = v211;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v317[0] = v210;
          v317[1] = v212;
          sub_24F859074(v172, v174, v269);
          swift_bridgeObjectRelease();
          sub_24F8CEEB0();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          unint64_t v213 = sub_24F81DD3C(v266, (uint64_t)v182, v11);
          MEMORY[0x253363690](v213);
          sub_24F8CEEB0();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_274:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_24F7AD5F4((uint64_t)__src);
          sub_24F7AD5F4((uint64_t)__src);
          uint64_t v15 = (void *)v317[0];
          unint64_t v11 = v317[1];
          uint64_t v103 = v283;
          uint64_t v104 = v286;
LABEL_275:
          v316[0] = v104;
          unint64_t v234 = v104[2];
          if (v234 >= v104[3] >> 1)
          {
            sub_24F77C4AC();
            uint64_t v104 = (void *)v316[0];
          }
          ++v103;
          v104[2] = v234 + 1;
          v235 = &v104[2 * v234];
          v235[4] = v15;
          v235[5] = v11;
          if (v103 == v87)
          {
            swift_bridgeObjectRelease();
            goto LABEL_284;
          }
          goto LABEL_63;
      }
    }
    break;
  }
  switch(LOBYTE(__src[2]))
  {
    case 1:
    case 3:
LABEL_84:
      swift_bridgeObjectRetain();
      goto LABEL_275;
    case 2:
      sub_24F79900C((uint64_t)__src);
      sub_24F79900C((uint64_t)__src);
      if (qword_26B1F5678 != -1) {
        swift_once();
      }
      swift_beginAccess();
      uint64_t v135 = *((void *)&xmmword_26B1F5730 + 1);
      uint64_t v8 = (void *)qword_26B1F5740;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v136 = sub_24F858C10();
      if (sub_24F8CFD00()) {
        goto LABEL_299;
      }
      uint64_t v271 = v135;
      unint64_t v277 = v136;
      uint64_t v283 = v103;
      v286 = v104;
      unint64_t v137 = sub_24F82AAB8((uint64_t)v15, v11);
      sub_24F799128((uint64_t)v15, v11, 2u);
      unint64_t v13 = v137;
      unint64_t v138 = v137 >> 14;
      if (v137 < 0x4000) {
        goto LABEL_241;
      }
      while (2)
      {
        swift_bridgeObjectRetain();
        sub_24F8CEE80();
        uint64_t v139 = sub_24F8CEF80();
        uint64_t v141 = v140;
        sub_24F7AD5DC((uint64_t)v15, v11, 2u);
        if (v139 == 48 && v141 == 0xE100000000000000) {
          goto LABEL_134;
        }
        if ((sub_24F8CFD00() & 1) == 0)
        {
          if (v139 == 57 && v141 == 0xE100000000000000)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
LABEL_134:
            char v144 = sub_24F8CFD00();
            swift_bridgeObjectRelease();
            if (v144) {
              goto LABEL_240;
            }
          }
          unint64_t v13 = sub_24F8CEE80();
          unint64_t v138 = v13 >> 14;
          if (v13 < 0x4000) {
            goto LABEL_241;
          }
          continue;
        }
        break;
      }
      swift_bridgeObjectRelease();
LABEL_240:
      if (v137 >> 14 < v138) {
        goto LABEL_295;
      }
LABEL_241:
      sub_24F8AB4B0(v137, v13, (uint64_t)v15, v11);
      unint64_t v6 = v214;
      sub_24F7AD5DC((uint64_t)v15, v11, 2u);
      swift_bridgeObjectRelease();
      if (v6 >> 14 < v277 >> 14) {
        goto LABEL_304;
      }
      uint64_t v215 = sub_24F8CEFA0();
      uint64_t v12 = MEMORY[0x253363690](v215);
      unint64_t v148 = v216;
      swift_bridgeObjectRelease();
      unint64_t v265 = v6;
      if ((v148 & 0x1000000000000000) != 0) {
        uint64_t v217 = sub_24F8CEF40();
      }
      else {
        uint64_t v217 = sub_24F8CEF50();
      }
      uint64_t v218 = v217;
      v297 = v8 + 8;
      uint64_t v219 = 1 << *((unsigned char *)v8 + 32);
      if (v219 < 64) {
        uint64_t v220 = ~(-1 << v219);
      }
      else {
        uint64_t v220 = -1;
      }
      unint64_t v221 = v220 & v8[8];
      int64_t v303 = (unint64_t)(v219 + 63) >> 6;
      swift_bridgeObjectRetain();
      uint64_t v14 = 0;
      while (2)
      {
        if (v221)
        {
          unint64_t v222 = __clz(__rbit64(v221));
          v221 &= v221 - 1;
          unint64_t v223 = v222 | (v14 << 6);
LABEL_263:
          uint64_t v15 = *(id *)(v8[7] + 8 * v223);
          unint64_t v6 = sub_24F8CED70();
          unint64_t v13 = (unint64_t)objc_msgSend(v15, sel_firstMatchInString_options_range_, v6, 0, 0, v218);

          if (v13) {
            goto LABEL_269;
          }
          continue;
        }
        break;
      }
      BOOL v88 = __OFADD__(v14++, 1);
      if (!v88)
      {
        if (v14 >= v303)
        {
          uint64_t v87 = v280;
          v157 = v390;
          goto LABEL_272;
        }
        unint64_t v224 = v297[v14];
        v157 = v390;
        if (!v224)
        {
          uint64_t v225 = v14 + 1;
          if (v14 + 1 >= v303) {
            goto LABEL_271;
          }
          unint64_t v224 = v297[v225];
          if (!v224)
          {
            uint64_t v225 = v14 + 2;
            if (v14 + 2 >= v303) {
              goto LABEL_271;
            }
            unint64_t v224 = v297[v225];
            if (!v224)
            {
              uint64_t v225 = v14 + 3;
              if (v14 + 3 >= v303) {
                goto LABEL_271;
              }
              unint64_t v224 = v297[v225];
              if (!v224)
              {
                uint64_t v225 = v14 + 4;
                if (v14 + 4 >= v303) {
                  goto LABEL_271;
                }
                unint64_t v224 = v297[v225];
                if (!v224)
                {
                  while (1)
                  {
                    uint64_t v14 = v225 + 1;
                    if (__OFADD__(v225, 1)) {
                      goto LABEL_310;
                    }
                    if (v14 >= v303) {
                      break;
                    }
                    unint64_t v224 = v297[v14];
                    ++v225;
                    if (v224) {
                      goto LABEL_262;
                    }
                  }
LABEL_271:
                  uint64_t v87 = v280;
LABEL_272:
                  swift_release();
                  sub_24F7B0E0C(6);
                  v390 = v226;
                  swift_bridgeObjectRetain();
                  uint64_t v160 = sub_24F8CEFA0();
                  uint64_t v162 = v227;
                  uint64_t v164 = v228;
                  uint64_t v166 = v229;
                  uint64_t v167 = (uint64_t)v157;
                  uint64_t v168 = v11;
                  unsigned __int8 v169 = 2;
LABEL_273:
                  sub_24F7AD5DC(v167, v168, v169);
                  uint64_t v230 = MEMORY[0x253363690](v160, v162, v164, v166);
                  uint64_t v232 = v231;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v317[0] = v230;
                  v317[1] = v232;
                  sub_24F859074(v12, v148, v271);
                  swift_bridgeObjectRelease();
                  sub_24F8CEEB0();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRetain();
                  unint64_t v233 = sub_24F81DD3C(v265, (uint64_t)v157, v11);
                  MEMORY[0x253363690](v233);
                  sub_24F8CEEB0();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  goto LABEL_274;
                }
              }
            }
          }
          uint64_t v14 = v225;
        }
LABEL_262:
        unint64_t v221 = (v224 - 1) & v224;
        unint64_t v223 = __clz(__rbit64(v224)) + (v14 << 6);
        goto LABEL_263;
      }
      __break(1u);
LABEL_290:
      __break(1u);
LABEL_291:
      __break(1u);
LABEL_292:
      __break(1u);
LABEL_293:
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      return sub_24F7AD3A0(v12, v13, v14, (uint64_t)v15, v11);
    default:
      sub_24F79900C((uint64_t)__src);
      sub_24F79900C((uint64_t)__src);
      if (qword_26B1F5678 != -1) {
        swift_once();
      }
      swift_beginAccess();
      uint64_t v115 = *((void *)&xmmword_26B1F5730 + 1);
      uint64_t v8 = (void *)qword_26B1F5740;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v116 = sub_24F858C10();
      if (sub_24F8CFD00()) {
        goto LABEL_298;
      }
      uint64_t v271 = v115;
      unint64_t v275 = v116;
      uint64_t v283 = v103;
      v286 = v104;
      unint64_t v117 = sub_24F82AAB8((uint64_t)v15, v11);
      sub_24F799128((uint64_t)v15, v11, 0);
      unint64_t v13 = v117;
      unint64_t v118 = v117 >> 14;
      if (v117 < 0x4000) {
        goto LABEL_141;
      }
      while (1)
      {
        swift_bridgeObjectRetain();
        sub_24F8CEE80();
        uint64_t v119 = sub_24F8CEF80();
        uint64_t v121 = v120;
        sub_24F7AD5DC((uint64_t)v15, v11, 0);
        if (v119 == 48 && v121 == 0xE100000000000000) {
          goto LABEL_98;
        }
        if (sub_24F8CFD00())
        {
          swift_bridgeObjectRelease();
LABEL_140:
          if (v117 >> 14 >= v118)
          {
LABEL_141:
            sub_24F8AB4B0(v117, v13, (uint64_t)v15, v11);
            unint64_t v6 = v145;
            sub_24F7AD5DC((uint64_t)v15, v11, 0);
            swift_bridgeObjectRelease();
            if (v6 >> 14 >= v275 >> 14)
            {
              unint64_t v265 = v6;
              uint64_t v146 = sub_24F8CEFA0();
              uint64_t v12 = MEMORY[0x253363690](v146);
              unint64_t v148 = v147;
              swift_bridgeObjectRelease();
              if ((v148 & 0x1000000000000000) != 0) {
                uint64_t v149 = sub_24F8CEF40();
              }
              else {
                uint64_t v149 = sub_24F8CEF50();
              }
              uint64_t v150 = v149;
              v294 = v8 + 8;
              uint64_t v151 = 1 << *((unsigned char *)v8 + 32);
              if (v151 < 64) {
                uint64_t v152 = ~(-1 << v151);
              }
              else {
                uint64_t v152 = -1;
              }
              unint64_t v153 = v152 & v8[8];
              int64_t v300 = (unint64_t)(v151 + 63) >> 6;
              swift_bridgeObjectRetain();
              uint64_t v14 = 0;
              while (1)
              {
                if (v153)
                {
                  unint64_t v154 = __clz(__rbit64(v153));
                  v153 &= v153 - 1;
                  unint64_t v155 = v154 | (v14 << 6);
                }
                else
                {
                  BOOL v88 = __OFADD__(v14++, 1);
                  if (v88) {
                    goto LABEL_292;
                  }
                  if (v14 >= v300)
                  {
                    uint64_t v87 = v280;
                    v157 = v390;
                    goto LABEL_171;
                  }
                  unint64_t v156 = v294[v14];
                  v157 = v390;
                  if (!v156)
                  {
                    uint64_t v158 = v14 + 1;
                    if (v14 + 1 >= v300) {
                      goto LABEL_170;
                    }
                    unint64_t v156 = v294[v158];
                    if (!v156)
                    {
                      uint64_t v158 = v14 + 2;
                      if (v14 + 2 >= v300) {
                        goto LABEL_170;
                      }
                      unint64_t v156 = v294[v158];
                      if (!v156)
                      {
                        uint64_t v158 = v14 + 3;
                        if (v14 + 3 >= v300) {
                          goto LABEL_170;
                        }
                        unint64_t v156 = v294[v158];
                        if (!v156)
                        {
                          uint64_t v158 = v14 + 4;
                          if (v14 + 4 >= v300) {
                            goto LABEL_170;
                          }
                          unint64_t v156 = v294[v158];
                          if (!v156)
                          {
                            while (1)
                            {
                              uint64_t v14 = v158 + 1;
                              if (__OFADD__(v158, 1)) {
                                goto LABEL_309;
                              }
                              if (v14 >= v300) {
                                break;
                              }
                              unint64_t v156 = v294[v14];
                              ++v158;
                              if (v156) {
                                goto LABEL_162;
                              }
                            }
LABEL_170:
                            uint64_t v87 = v280;
LABEL_171:
                            swift_release();
                            sub_24F7B0E0C(6);
                            v390 = v159;
                            swift_bridgeObjectRetain();
                            uint64_t v160 = sub_24F8CEFA0();
                            uint64_t v162 = v161;
                            uint64_t v164 = v163;
                            uint64_t v166 = v165;
                            uint64_t v167 = (uint64_t)v157;
                            uint64_t v168 = v11;
                            unsigned __int8 v169 = 0;
                            goto LABEL_273;
                          }
                        }
                      }
                    }
                    uint64_t v14 = v158;
                  }
LABEL_162:
                  unint64_t v153 = (v156 - 1) & v156;
                  unint64_t v155 = __clz(__rbit64(v156)) + (v14 << 6);
                }
                unint64_t v6 = (unint64_t)*(id *)(v8[7] + 8 * v155);
                unint64_t v13 = sub_24F8CED70();
                uint64_t v15 = objc_msgSend((id)v6, sel_firstMatchInString_options_range_, v13, 0, 0, v150);

                if (v15)
                {
LABEL_269:
                  swift_release();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  sub_24F7AD5F4((uint64_t)__src);
                  sub_24F7AD5F4((uint64_t)__src);
                  uint64_t v87 = v280;
                  uint64_t v103 = v283;
                  uint64_t v104 = v286;
                  uint64_t v15 = v390;
                  goto LABEL_275;
                }
              }
            }
LABEL_302:
            __break(1u);
LABEL_303:
            __break(1u);
LABEL_304:
            __break(1u);
LABEL_305:
            __break(1u);
LABEL_306:
            swift_release();
            return swift_bridgeObjectRelease();
          }
LABEL_297:
          __break(1u);
LABEL_298:
          __break(1u);
LABEL_299:
          __break(1u);
LABEL_300:
          __break(1u);
LABEL_301:
          __break(1u);
          goto LABEL_302;
        }
        if (v119 == 57 && v121 == 0xE100000000000000)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
LABEL_98:
          char v124 = sub_24F8CFD00();
          swift_bridgeObjectRelease();
          if (v124) {
            goto LABEL_140;
          }
        }
        unint64_t v13 = sub_24F8CEE80();
        unint64_t v118 = v13 >> 14;
        if (v13 < 0x4000) {
          goto LABEL_141;
        }
      }
  }
}

void *sub_24F7A8A84@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  return QueryInterfaceRequest.makePreparedRequest(_:forSingleResult:)(a1, a2, a3);
}

void sub_24F7A8A9C()
{
}

uint64_t QueryInterfaceRequest.select(_:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return sub_24F7A9CCC(a1, (uint64_t (*)(uint64_t))sub_24F7AC304, a2);
}

__n128 sub_24F7A8AD0(char *__src, uint64_t a2, uint64_t a3)
{
  memcpy(__dst, __src, sizeof(__dst));
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a2;
  *(void *)(v6 + 24) = a3;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_24F7AD384;
  *(void *)(v7 + 24) = v6;
  swift_retain();
  sub_24F7AD450((uint64_t)__dst);
  swift_release();
  uint64_t v8 = *(void *)&__dst[16];
  long long v18 = *(_OWORD *)__dst;
  long long v19 = *(_OWORD *)&__dst[40];
  uint64_t v9 = *(void *)&__dst[56];
  char v10 = __dst[64];
  char v11 = __dst[104];
  __n128 v20 = *(__n128 *)&__dst[128];
  long long v21 = *(_OWORD *)&__dst[112];
  uint64_t v12 = *(void *)&__dst[144];
  uint64_t v13 = *(void *)&__dst[152];
  int v24 = __dst[160];
  char v14 = __dst[161];
  char v25 = __dst[161];
  memcpy(v23, __src, 0xA2uLL);
  long long v16 = *(_OWORD *)&__dst[88];
  long long v17 = *(_OWORD *)&__dst[72];
  sub_24F7AD514((uint64_t)v23);
  *(_OWORD *)__src = v18;
  *((void *)__src + 2) = v8;
  *((void *)__src + 3) = sub_24F792290;
  *((void *)__src + 4) = v7;
  *(_OWORD *)(__src + 40) = v19;
  *((void *)__src + 7) = v9;
  __src[64] = v10;
  *(_OWORD *)(__src + 72) = v17;
  *(_OWORD *)(__src + 88) = v16;
  __src[104] = v11;
  __n128 result = v20;
  *((_OWORD *)__src + 7) = v21;
  *((__n128 *)__src + 8) = v20;
  *((void *)__src + 18) = v12;
  *((void *)__src + 19) = v13;
  __src[160] = v24;
  __src[161] = v14;
  return result;
}

uint64_t QueryInterfaceRequest.asRequest<A>(of:)@<X0>(void *a1@<X8>)
{
  sub_24F77F324(v3);
  sub_24F77F324(a1);
  return sub_24F7AD450((uint64_t)v3);
}

uint64_t QueryInterfaceRequest.select<A>(sql:arguments:as:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = *a3;
  uint64_t v7 = a3[1];
  sub_24F781274(&qword_26B1F7600);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_24F8DDBF0;
  *(void *)(v9 + 56) = &type metadata for SQL;
  *(void *)(v9 + 64) = &protocol witness table for SQL;
  sub_24F781274(&qword_26B1F7F50);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_24F8DDBF0;
  v12[0] = a1;
  v12[1] = a2;
  void v12[2] = v8;
  v12[3] = v7;
  sub_24F7725D4(v12);
  sub_24F76C344((uint64_t)v12, v10 + 32);
  *(void *)(v9 + 32) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  QueryInterfaceRequest.select<A>(_:as:)(a4);
  return swift_bridgeObjectRelease();
}

uint64_t QueryInterfaceRequest.select<A>(literal:as:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  sub_24F781274(&qword_26B1F7600);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_24F8DDBF0;
  *(void *)(v4 + 56) = &type metadata for SQL;
  *(void *)(v4 + 64) = &protocol witness table for SQL;
  *(void *)(v4 + 32) = v3;
  swift_bridgeObjectRetain();
  QueryInterfaceRequest.select<A>(_:as:)(a2);
  return swift_bridgeObjectRelease();
}

uint64_t QueryInterfaceRequest.annotated(with:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return sub_24F7A9CCC(a1, (uint64_t (*)(uint64_t))sub_24F7AC320, a2);
}

__n128 sub_24F7A8E68(char *__src, uint64_t a2, uint64_t a3)
{
  memcpy(__dst, __src, sizeof(__dst));
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a2;
  *(void *)(v6 + 24) = a3;
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = *(_OWORD *)&__dst[24];
  *(void *)(v7 + 32) = sub_24F7AE308;
  *(void *)(v7 + 40) = v6;
  uint64_t v8 = *(void *)&__dst[16];
  long long v17 = *(_OWORD *)__dst;
  long long v18 = *(_OWORD *)&__dst[40];
  uint64_t v9 = *(void *)&__dst[56];
  char v10 = __dst[64];
  char v11 = __dst[104];
  __n128 v20 = *(__n128 *)&__dst[128];
  long long v21 = *(_OWORD *)&__dst[112];
  uint64_t v12 = *(void *)&__dst[144];
  uint64_t v19 = *(void *)&__dst[152];
  int v24 = __dst[160];
  char v13 = __dst[161];
  char v25 = __dst[161];
  memcpy(v23, __src, 0xA2uLL);
  swift_retain();
  long long v15 = *(_OWORD *)&__dst[88];
  long long v16 = *(_OWORD *)&__dst[72];
  sub_24F7AD450((uint64_t)__dst);
  sub_24F7AD514((uint64_t)v23);
  *(_OWORD *)__src = v17;
  *((void *)__src + 2) = v8;
  *((void *)__src + 3) = sub_24F7AD364;
  *((void *)__src + 4) = v7;
  *(_OWORD *)(__src + 40) = v18;
  *((void *)__src + 7) = v9;
  __src[64] = v10;
  *(_OWORD *)(__src + 72) = v16;
  *(_OWORD *)(__src + 88) = v15;
  __src[104] = v11;
  __n128 result = v20;
  *((_OWORD *)__src + 7) = v21;
  *((__n128 *)__src + 8) = v20;
  *((void *)__src + 18) = v12;
  *((void *)__src + 19) = v19;
  __src[160] = v24;
  __src[161] = v13;
  return result;
}

uint64_t sub_24F7A8FF8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2();
  if (!v2)
  {
    sub_24F790BC4(v3);
    swift_bridgeObjectRelease();
  }
  return sub_24F780670();
}

uint64_t sub_24F7A9060(uint64_t a1, uint64_t a2)
{
  uint64_t Interface = QueryInterfaceRequest.databaseTableName.getter();
  Database.primaryKey(_:)(Interface, v5, &v15);
  if (v2)
  {
    swift_bridgeObjectRelease();
    return a2;
  }
  swift_bridgeObjectRelease();
  uint64_t v6 = (uint64_t)v15;
  uint64_t v7 = v16;
  int v8 = v17;
  if (v17)
  {
    if (v17 == 1) {
      uint64_t v9 = v15;
    }
    else {
      uint64_t v9 = &unk_270102B30;
    }
  }
  else
  {
    sub_24F781274((uint64_t *)&unk_26B1F7C88);
    uint64_t v9 = (_OWORD *)swift_allocObject();
    v9[1] = xmmword_24F8DDBF0;
    *((void *)v9 + 4) = v6;
    *((void *)v9 + 5) = v7;
  }
  uint64_t v10 = *((void *)v9 + 2);
  sub_24F7903D0(v6, v7, v8);
  swift_bridgeObjectRelease();
  if (v10 == 1)
  {
    sub_24F781274(&qword_26B1F7600);
    a2 = swift_allocObject();
    *(_OWORD *)(a2 + 16) = xmmword_24F8DDBF0;
    if (v8)
    {
      if (v8 == 1) {
        char v11 = (_OWORD *)v6;
      }
      else {
        char v11 = &unk_270102B00;
      }
    }
    else
    {
      sub_24F781274((uint64_t *)&unk_26B1F7C88);
      char v11 = (_OWORD *)swift_allocObject();
      v11[1] = xmmword_24F8DDBF0;
      *((void *)v11 + 4) = v6;
      *((void *)v11 + 5) = v7;
    }
    if (*((void *)v11 + 2))
    {
      uint64_t v13 = *((void *)v11 + 4);
      uint64_t v12 = *((void *)v11 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a2 + 56) = &type metadata for Column;
      *(void *)(a2 + 64) = &protocol witness table for Column;
      *(void *)(a2 + 32) = v13;
      *(void *)(a2 + 40) = v12;
      return a2;
    }
    __break(1u);
  }
  long long v15 = 0;
  unint64_t v16 = 0xE000000000000000;
  sub_24F8CF7D0();
  sub_24F8CEEB0();
  QueryInterfaceRequest.databaseTableName.getter();
  sub_24F8CEEB0();
  swift_bridgeObjectRelease();
  uint64_t result = sub_24F8CF9D0();
  __break(1u);
  return result;
}

uint64_t QueryInterfaceRequest.databaseTableName.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_24F7A92B4(uint64_t a1, uint64_t a2)
{
  uint64_t Interface = QueryInterfaceRequest.databaseTableName.getter();
  Database.primaryKey(_:)(Interface, v5, &v15);
  if (v2)
  {
    swift_bridgeObjectRelease();
    return a2;
  }
  swift_bridgeObjectRelease();
  uint64_t v6 = (uint64_t)v15;
  uint64_t v7 = v16;
  int v8 = v17;
  if (v17)
  {
    if (v17 == 1) {
      uint64_t v9 = v15;
    }
    else {
      uint64_t v9 = &unk_270102AD0;
    }
  }
  else
  {
    sub_24F781274((uint64_t *)&unk_26B1F7C88);
    uint64_t v9 = (_OWORD *)swift_allocObject();
    v9[1] = xmmword_24F8DDBF0;
    *((void *)v9 + 4) = v6;
    *((void *)v9 + 5) = v7;
  }
  uint64_t v10 = *((void *)v9 + 2);
  sub_24F7903D0(v6, v7, v8);
  swift_bridgeObjectRelease();
  if (v10 == 1)
  {
    sub_24F781274(&qword_26B1F7600);
    a2 = swift_allocObject();
    *(_OWORD *)(a2 + 16) = xmmword_24F8DDBF0;
    if (v8)
    {
      if (v8 == 1) {
        char v11 = (_OWORD *)v6;
      }
      else {
        char v11 = &unk_270102AA0;
      }
    }
    else
    {
      sub_24F781274((uint64_t *)&unk_26B1F7C88);
      char v11 = (_OWORD *)swift_allocObject();
      v11[1] = xmmword_24F8DDBF0;
      *((void *)v11 + 4) = v6;
      *((void *)v11 + 5) = v7;
    }
    if (*((void *)v11 + 2))
    {
      uint64_t v13 = *((void *)v11 + 4);
      uint64_t v12 = *((void *)v11 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a2 + 56) = &type metadata for Column;
      *(void *)(a2 + 64) = &protocol witness table for Column;
      *(void *)(a2 + 32) = v13;
      *(void *)(a2 + 40) = v12;
      return a2;
    }
    __break(1u);
  }
  long long v15 = 0;
  unint64_t v16 = 0xE000000000000000;
  sub_24F8CF7D0();
  sub_24F8CEEB0();
  QueryInterfaceRequest.databaseTableName.getter();
  sub_24F8CEEB0();
  swift_bridgeObjectRelease();
  uint64_t result = sub_24F8CF9D0();
  __break(1u);
  return result;
}

uint64_t QueryInterfaceRequest.filter(_:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return sub_24F7A9CCC(a1, (uint64_t (*)(uint64_t))sub_24F7AC33C, a2);
}

__n128 sub_24F7A94F0(char *__src, uint64_t a2, uint64_t a3)
{
  memcpy(__dst, __src, 0xA2uLL);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a2;
  *(void *)(v6 + 24) = a3;
  uint64_t v7 = *((void *)&__dst[2] + 1);
  if (*((void *)&__dst[2] + 1))
  {
    uint64_t v8 = *(void *)&__dst[3];
    uint64_t v9 = (void *)swift_allocObject();
    void v9[2] = v7;
    v9[3] = v8;
    v9[4] = sub_24F7AD340;
    void v9[5] = v6;
    uint64_t v10 = sub_24F7AD274;
    uint64_t v6 = (uint64_t)v9;
  }
  else
  {
    uint64_t v10 = sub_24F7AD340;
  }
  long long v19 = __dst[0];
  uint64_t v11 = *(void *)&__dst[1];
  uint64_t v12 = *((void *)&__dst[3] + 1);
  char v13 = __dst[4];
  char v23 = BYTE8(__dst[6]);
  __n128 v21 = (__n128)__dst[8];
  long long v22 = __dst[7];
  long long v14 = __dst[9];
  char v20 = __dst[10];
  char v15 = BYTE1(__dst[10]);
  memcpy(v25, __src, 0xA2uLL);
  swift_retain();
  long long v24 = *(_OWORD *)((char *)&__dst[4] + 8);
  long long v17 = *(_OWORD *)((char *)&__dst[1] + 8);
  long long v18 = *(_OWORD *)((char *)&__dst[5] + 8);
  sub_24F7AD450((uint64_t)__dst);
  sub_24F7AD514((uint64_t)v25);
  *(_OWORD *)__src = v19;
  *((void *)__src + 2) = v11;
  *(_OWORD *)(__src + 24) = v17;
  *((void *)__src + 5) = v10;
  *((void *)__src + 6) = v6;
  *((void *)__src + 7) = v12;
  __src[64] = v13;
  *(_OWORD *)(__src + 72) = v24;
  *(_OWORD *)(__src + 88) = v18;
  __src[104] = v23;
  __n128 result = v21;
  *((_OWORD *)__src + 7) = v22;
  *((__n128 *)__src + 8) = v21;
  *((_OWORD *)__src + 9) = v14;
  __src[160] = v20;
  __src[161] = v15;
  return result;
}

uint64_t QueryInterfaceRequest.order(_:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return sub_24F7A9CCC(a1, (uint64_t (*)(uint64_t))sub_24F7AC358, a2);
}

__n128 sub_24F7A96D4(char *__src, uint64_t a2, uint64_t a3)
{
  memcpy(__dst, __src, sizeof(__dst));
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a2;
  *(void *)(v6 + 24) = a3;
  sub_24F781274(&qword_26B1F6F58);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_24F8DDBF0;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_24F7AD2DC;
  *(void *)(v8 + 24) = v6;
  *(void *)(v7 + 32) = sub_24F7AD2C4;
  *(void *)(v7 + 40) = v8;
  *(unsigned char *)(v7 + 48) = 0;
  swift_retain();
  sub_24F7AD450((uint64_t)__dst);
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)&__dst[16];
  uint64_t v10 = *(void *)&__dst[40];
  uint64_t v11 = *(void *)&__dst[48];
  char v12 = __dst[104];
  long long v22 = *(_OWORD *)&__dst[112];
  long long v20 = *(_OWORD *)__dst;
  __n128 v21 = *(__n128 *)&__dst[128];
  uint64_t v13 = *(void *)&__dst[144];
  uint64_t v14 = *(void *)&__dst[152];
  int v25 = __dst[160];
  char v15 = __dst[161];
  char v26 = __dst[161];
  memcpy(v24, __src, 0xA2uLL);
  long long v19 = *(_OWORD *)&__dst[72];
  long long v17 = *(_OWORD *)&__dst[24];
  long long v18 = *(_OWORD *)&__dst[88];
  sub_24F7AD514((uint64_t)v24);
  *(_OWORD *)__src = v20;
  *((void *)__src + 2) = v9;
  *(_OWORD *)(__src + 24) = v17;
  *((void *)__src + 5) = v10;
  *((void *)__src + 6) = v11;
  *((void *)__src + 7) = v7;
  __src[64] = 0;
  *(_OWORD *)(__src + 72) = v19;
  *(_OWORD *)(__src + 88) = v18;
  __src[104] = v12;
  __n128 result = v21;
  *((_OWORD *)__src + 7) = v22;
  *((__n128 *)__src + 8) = v21;
  *((void *)__src + 18) = v13;
  *((void *)__src + 19) = v14;
  __src[160] = v25;
  __src[161] = v15;
  return result;
}

uint64_t sub_24F7A988C(uint64_t a1, void (*a2)(void), uint64_t a3, void (*a4)(void))
{
  a2();
  if (!v4)
  {
    a4();
    swift_bridgeObjectRelease();
  }
  return sub_24F780670();
}

uint64_t QueryInterfaceRequest.reversed()()
{
  return sub_24F7AA368();
}

unsigned char *sub_24F7A990C(unsigned char *result)
{
  char v1 = result[104];
  char v2 = result[161];
  result[64] = (result[64] & 1) == 0;
  result[104] = v1;
  result[161] = v2;
  return result;
}

uint64_t QueryInterfaceRequest.unordered()()
{
  return sub_24F7AA368();
}

__n128 sub_24F7A9954(char *__src)
{
  memcpy(__dst, __src, 0xA2uLL);
  uint64_t v24 = *((void *)&__dst[9] + 1);
  uint64_t v25 = *(void *)&__dst[9];
  int v27 = LOBYTE(__dst[10]);
  char v2 = BYTE1(__dst[10]);
  long long v22 = __dst[7];
  __n128 v23 = (__n128)__dst[8];
  char v21 = BYTE8(__dst[6]);
  uint64_t v19 = *(void *)&__dst[3];
  uint64_t v20 = *((void *)&__dst[2] + 1);
  uint64_t v3 = *(void *)&__dst[1];
  uint64_t v4 = *((void *)&__dst[5] + 1);
  uint64_t v5 = *(void *)&__dst[6];
  long long v15 = *(_OWORD *)((char *)&__dst[1] + 8);
  long long v17 = __dst[0];
  long long v18 = *(_OWORD *)((char *)&__dst[4] + 8);
  sub_24F7AD450((uint64_t)__dst);
  swift_bridgeObjectRelease();
  uint64_t v6 = MEMORY[0x263F8EE78];
  uint64_t v7 = sub_24F8CEC70();
  sub_24F8011A8(v6, v7, v4, v5, (uint64_t)sub_24F801AF8, 0, v8, v9, v15, *((uint64_t *)&v15 + 1));
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_24F7AD514((uint64_t)__dst);
  *(_OWORD *)__src = v17;
  *((void *)__src + 2) = v3;
  *(_OWORD *)(__src + 24) = v16;
  *((void *)__src + 5) = v20;
  *((void *)__src + 6) = v19;
  *((void *)__src + 7) = v6;
  __src[64] = 0;
  *(_OWORD *)(__src + 72) = v18;
  *((void *)__src + 11) = v11;
  *((void *)__src + 12) = v13;
  __src[104] = v21;
  __n128 result = v23;
  *((_OWORD *)__src + 7) = v22;
  *((__n128 *)__src + 8) = v23;
  *((void *)__src + 18) = v25;
  *((void *)__src + 19) = v24;
  __src[160] = v27;
  __src[161] = v2;
  return result;
}

uint64_t QueryInterfaceRequest.group(_:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return sub_24F7A9CCC(a1, (uint64_t (*)(uint64_t))sub_24F7AC3AC, a2);
}

__n128 sub_24F7A9B1C(char *__src, uint64_t a2, uint64_t a3)
{
  memcpy(__dst, __src, sizeof(__dst));
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a2;
  *(void *)(v6 + 24) = a3;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_24F7AD294;
  *(void *)(v7 + 24) = v6;
  uint64_t v8 = *(void *)&__dst[112];
  swift_retain();
  sub_24F7AD450((uint64_t)__dst);
  sub_24F787238(v8);
  uint64_t v9 = *(void *)&__dst[16];
  long long v20 = *(_OWORD *)__dst;
  long long v21 = *(_OWORD *)&__dst[40];
  uint64_t v10 = *(void *)&__dst[56];
  char v11 = __dst[64];
  char v12 = __dst[104];
  __n128 v22 = *(__n128 *)&__dst[128];
  uint64_t v13 = *(void *)&__dst[144];
  uint64_t v14 = *(void *)&__dst[152];
  int v25 = __dst[160];
  char v15 = __dst[161];
  char v26 = __dst[161];
  memcpy(v24, __src, 0xA2uLL);
  long long v19 = *(_OWORD *)&__dst[72];
  long long v17 = *(_OWORD *)&__dst[24];
  long long v18 = *(_OWORD *)&__dst[88];
  sub_24F7AD514((uint64_t)v24);
  *(_OWORD *)__src = v20;
  *((void *)__src + 2) = v9;
  *(_OWORD *)(__src + 24) = v17;
  *(_OWORD *)(__src + 40) = v21;
  *((void *)__src + 7) = v10;
  __src[64] = v11;
  *(_OWORD *)(__src + 72) = v19;
  *(_OWORD *)(__src + 88) = v18;
  __src[104] = v12;
  *((void *)__src + 14) = sub_24F7AD2C4;
  *((void *)__src + 15) = v7;
  __n128 result = v22;
  *((__n128 *)__src + 8) = v22;
  *((void *)__src + 18) = v13;
  *((void *)__src + 19) = v14;
  __src[160] = v25;
  __src[161] = v15;
  return result;
}

uint64_t QueryInterfaceRequest.having(_:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return sub_24F7A9CCC(a1, (uint64_t (*)(uint64_t))sub_24F7AC3C8, a2);
}

uint64_t sub_24F7A9CCC@<X0>(uint64_t a1@<X2>, uint64_t (*a2)(uint64_t)@<X3>, uint64_t a3@<X8>)
{
  sub_24F77F324(v7);
  return sub_24F85E9C4(a2, a1, a3);
}

__n128 sub_24F7A9D54(char *__src, uint64_t a2, uint64_t a3)
{
  memcpy(__dst, __src, 0xA2uLL);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a2;
  *(void *)(v6 + 24) = a3;
  uint64_t v7 = *(void *)&__dst[8];
  if (*(void *)&__dst[8])
  {
    uint64_t v8 = *((void *)&__dst[8] + 1);
    uint64_t v9 = (void *)swift_allocObject();
    void v9[2] = v7;
    v9[3] = v8;
    v9[4] = sub_24F7AE2F0;
    void v9[5] = v6;
    uint64_t v24 = sub_24F7AD274;
    uint64_t v6 = (uint64_t)v9;
  }
  else
  {
    uint64_t v24 = sub_24F7AE2F0;
  }
  uint64_t v10 = *(void *)&__dst[1];
  long long v18 = __dst[0];
  long long v19 = *(_OWORD *)((char *)&__dst[2] + 8);
  uint64_t v11 = *((void *)&__dst[3] + 1);
  char v12 = __dst[4];
  long long v13 = __dst[7];
  uint64_t v22 = *((void *)&__dst[9] + 1);
  uint64_t v23 = *(void *)&__dst[9];
  char v20 = BYTE8(__dst[6]);
  char v21 = __dst[10];
  char v14 = BYTE1(__dst[10]);
  memcpy(v26, __src, 0xA2uLL);
  swift_retain();
  long long v25 = *(_OWORD *)((char *)&__dst[4] + 8);
  long long v16 = *(_OWORD *)((char *)&__dst[1] + 8);
  __n128 v17 = *(__n128 *)((char *)&__dst[5] + 8);
  sub_24F7AD450((uint64_t)__dst);
  sub_24F7AD514((uint64_t)v26);
  *(_OWORD *)__src = v18;
  *((void *)__src + 2) = v10;
  *(_OWORD *)(__src + 24) = v16;
  *(_OWORD *)(__src + 40) = v19;
  *((void *)__src + 7) = v11;
  __src[64] = v12;
  *(_OWORD *)(__src + 72) = v25;
  __n128 result = v17;
  *(__n128 *)(__src + 88) = v17;
  __src[104] = v20;
  *((_OWORD *)__src + 7) = v13;
  *((void *)__src + 16) = v24;
  *((void *)__src + 17) = v6;
  *((void *)__src + 18) = v23;
  *((void *)__src + 19) = v22;
  __src[160] = v21;
  __src[161] = v14;
  return result;
}

void *sub_24F7A9F20(uint64_t a1, void *(*a2)(void *__return_ptr))
{
  __n128 result = a2(v6);
  if (!v2)
  {
    uint64_t v4 = v7;
    uint64_t v5 = v8;
    sub_24F7811D0(v6, v7);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
    return (void *)_s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v6);
  }
  return result;
}

uint64_t QueryInterfaceRequest._including(all:)()
{
  return sub_24F7AA0B8();
}

uint64_t QueryInterfaceRequest._including(optional:)()
{
  return sub_24F7AA0B8();
}

void *sub_24F7A9FE8(void *__src, uint64_t a2)
{
  memcpy(v5, __src, 0xA2uLL);
  uint64_t v7 = a2;
  sub_24F802408();
  sub_24F7AD514((uint64_t)v5);
  return memcpy(__src, __srca, 0xA2uLL);
}

uint64_t QueryInterfaceRequest._including(required:)()
{
  return sub_24F7AA0B8();
}

uint64_t QueryInterfaceRequest._joining(optional:)()
{
  return sub_24F7AA0B8();
}

uint64_t QueryInterfaceRequest._joining(required:)()
{
  return sub_24F7AA0B8();
}

uint64_t sub_24F7AA0B8()
{
  sub_24F77F324(v1);
  return sub_24F77E660();
}

void *sub_24F7AA118(void *__src, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *))
{
  memcpy(__dst, __src, 0xA2uLL);
  uint64_t v10 = a2;
  swift_bridgeObjectRetain();
  a4(&v10);
  if (v4)
  {
    __n128 result = (void *)swift_bridgeObjectRelease();
    __break(1u);
  }
  else
  {
    sub_24F802408();
    swift_bridgeObjectRelease();
    sub_24F7AD514((uint64_t)__dst);
    return memcpy(__src, __srca, 0xA2uLL);
  }
  return result;
}

__n128 sub_24F7AA1F4(char *__src, uint64_t a2)
{
  memcpy(__dst, __src, 0xA2uLL);
  uint64_t v22 = *((void *)&__dst[9] + 1);
  uint64_t v23 = *(void *)&__dst[9];
  int v25 = LOBYTE(__dst[10]);
  char v4 = BYTE1(__dst[10]);
  long long v20 = __dst[7];
  __n128 v21 = (__n128)__dst[8];
  char v19 = BYTE8(__dst[6]);
  uint64_t v5 = *((void *)&__dst[3] + 1);
  char v6 = __dst[4];
  long long v7 = __dst[0];
  uint64_t v8 = *(void *)&__dst[1];
  long long v17 = *(_OWORD *)((char *)&__dst[4] + 8);
  long long v18 = *(_OWORD *)((char *)&__dst[2] + 8);
  long long v15 = *(_OWORD *)((char *)&__dst[1] + 8);
  long long v16 = *(_OWORD *)((char *)&__dst[5] + 8);
  sub_24F7AD450((uint64_t)__dst);
  uint64_t v9 = sub_24F801CF0(a2, v7, *((uint64_t *)&v7 + 1), v8);
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  swift_release();
  sub_24F7AD514((uint64_t)__dst);
  *(void *)__src = v9;
  *((void *)__src + 1) = v11;
  *((void *)__src + 2) = v13;
  *(_OWORD *)(__src + 24) = v15;
  *(_OWORD *)(__src + 40) = v18;
  *((void *)__src + 7) = v5;
  __src[64] = v6;
  *(_OWORD *)(__src + 72) = v17;
  *(_OWORD *)(__src + 88) = v16;
  __src[104] = v19;
  __n128 result = v21;
  *((_OWORD *)__src + 7) = v20;
  *((__n128 *)__src + 8) = v21;
  *((void *)__src + 18) = v23;
  *((void *)__src + 19) = v22;
  __src[160] = v25;
  __src[161] = v4;
  return result;
}

uint64_t QueryInterfaceRequest.distinct()()
{
  return sub_24F7AA368();
}

uint64_t sub_24F7AA368()
{
  memcpy(__dst, v0, sizeof(__dst));
  return sub_24F77E660();
}

__n128 sub_24F7AA3CC(__n128 *a1)
{
  unsigned __int8 v2 = *(unsigned char *)(v1 + 40);
  __n128 result = *(__n128 *)(v1 + 24);
  a1[9] = result;
  a1[10].n128_u16[0] = v2;
  return result;
}

double sub_24F7AA3E4(char *a1)
{
  *(void *)&double result = sub_24F7AA1F4(a1, *(void *)(v1 + 24)).n128_u64[0];
  return result;
}

uint64_t sub_24F7AA400(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  memcpy(__dst, a2 + 2, 0xABuLL);
  sub_24F7ADA50((uint64_t)__dst);
  sub_24F7ADA50((uint64_t)__dst);
  swift_bridgeObjectRetain();
  sub_24F7D5750();
  sub_24F7ADB30((uint64_t)&v9, (uint64_t)v11);
  sub_24F7ADB30((uint64_t)v11, (uint64_t)v12);
  if (sub_24F7ADB98((uint64_t)v12) == 1)
  {
    swift_bridgeObjectRetain();
    sub_24F786A44();
    uint64_t v5 = *(void *)(*(void *)(a1 + 72) + 16);
    sub_24F786DF4();
    uint64_t v6 = *(void *)(a1 + 72);
    *(void *)(v6 + 16) = v5 + 1;
    uint64_t v7 = v6 + 16 * v5;
    *(void *)(v7 + 32) = v4;
    *(void *)(v7 + 40) = v3;
    sub_24F7ADBB0((uint64_t)__dst);
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(a1 + 72) = v6;
  }
  else
  {
    sub_24F7ADC90((uint64_t)v11);
    sub_24F7ADBB0((uint64_t)__dst);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_24F7AA514(uint64_t a1)
{
  return sub_24F7AA400(a1, *(uint64_t **)(v1 + 32));
}

uint64_t sub_24F7AA534()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (v0[10]) {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0[19]) {
    swift_release();
  }
  if (v0[21]) {
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t sub_24F7AA5D4(uint64_t a1)
{
  return sub_24F7A9060(a1, v1 + 40);
}

uint64_t sub_24F7AA5F8()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (v0[11]) {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0[20]) {
    swift_release();
  }
  if (v0[22]) {
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t sub_24F7AA698(uint64_t a1)
{
  return sub_24F7A92B4(a1, v1 + 48);
}

uint64_t sub_24F7AA6BC(uint64_t result)
{
  __int16 v1 = *(_WORD *)(result + 160);
  uint64_t v2 = *(void *)(result + 104) & 1;
  *(void *)(result + 64) &= 1uLL;
  *(void *)(result + 104) = v2;
  *(_WORD *)(result + 160) = v1 & 0x1FF | 0x8000;
  return result;
}

uint64_t sub_24F7AA6E8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_24F7AA748@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  return QueryInterfaceRequest.limit(_:offset:)(a1, a2);
}

uint64_t sub_24F7AA750@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return QueryInterfaceRequest.with<A>(_:)(a1, a2, a3);
}

uint64_t QueryInterfaceRequest.isEmpty(_:)()
{
  memcpy(__dst, v0, sizeof(__dst));
  uint64_t v2 = MEMORY[0x263F8EE78];
  sub_24F7662F0();
  uint64_t v4 = v3;
  unint64_t v5 = *(void *)(v3 + 16);
  if (v5 >= *(void *)(v3 + 24) >> 1)
  {
    sub_24F7662F0();
    uint64_t v4 = v12;
  }
  v16[0] = 0x205443454C4553;
  v16[1] = 0xE700000000000000;
  v16[2] = v2;
  v16[3] = MEMORY[0x263F8EE80];
  sub_24F7725D4(v16);
  *(void *)(v4 + 16) = v5 + 1;
  sub_24F76C344((uint64_t)v16, v4 + 184 * v5 + 32);
  memcpy(v16, __dst, 0xA2uLL);
  SQLSubqueryable.exists()();
  sub_24F7AC4B8((uint64_t)__src, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))sub_24F76CB14);
  unint64_t v6 = *(void *)(v4 + 16);
  if (v6 >= *(void *)(v4 + 24) >> 1)
  {
    sub_24F7662F0();
    uint64_t v4 = v13;
  }
  memcpy(v16, __src, 0xA3uLL);
  sub_24F766784(v16);
  *(void *)(v4 + 16) = v6 + 1;
  sub_24F76C344((uint64_t)v16, v4 + 184 * v6 + 32);
  sub_24F7AC4B8((uint64_t)__src, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))sub_24F76C98C);
  sub_24F7AA968(v4, (uint64_t)v14);
  uint64_t v7 = sub_24F780670();
  char v9 = sub_24F7ABC6C(v7, v8);
  uint64_t result = sub_24F774DA0((uint64_t)v14, &qword_269A2A698);
  if (v1) {
    return v11;
  }
  if (v9 != 2) {
    return (v9 & 1) == 0;
  }
  __break(1u);
  return result;
}

uint64_t sub_24F7AA968@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  sub_24F781214((uint64_t)v10, (uint64_t)v9, &qword_26B1F7F10);
  long long v6 = 0u;
  long long v7 = 0u;
  *(void *)&long long v8 = 0;
  *((void *)&v8 + 1) = a1;
  sub_24F7AC1D0((uint64_t)v9, (uint64_t)&v6);
  *(unsigned char *)(a2 + 48) = 2;
  long long v4 = v7;
  *(_OWORD *)a2 = v6;
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v8;
  return sub_24F774DA0((uint64_t)v10, &qword_26B1F7F10);
}

uint64_t QueryInterfaceRequest.deleteAll(_:)()
{
  memcpy(__dst, v0, 0xA2uLL);
  sub_24F7AD450((uint64_t)__dst);
  sub_24F7AD450((uint64_t)__dst);
  sub_24F8C7698(__dst, (uint64_t)__src);
  uint64_t v2 = __dst[11];
  uint64_t v3 = __dst[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_24F7ABCFC(v2, v3);
  uint64_t v5 = v4;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_24F7AD514((uint64_t)__dst);
  memcpy(v14, __src, 0xA8uLL);
  LOBYTE(v14[21]) = 0;
  v14[22] = v5;
  memcpy(v11, v14, sizeof(v11));
  sub_24F8C4D78();
  uint64_t result = (uint64_t)sub_24F7AC0E8(v14);
  if (!v1)
  {
    v10[0] = 0;
    v10[1] = 0;
    long long v8 = v10;
    Statement.execute(arguments:)(*(GRDBInternal::StatementArguments_optional *)(&v7 - 1));
    uint64_t result = swift_release();
    if (!v9) {
      return Database.changesCount.getter();
    }
  }
  return result;
}

void *sub_24F7AAB24@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t result = (void *)sub_24F76AE28(*(void *)(a1 + 16));
  if (result)
  {
    uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v4 + 24))(&v6);
    char v5 = BYTE1(v6);
  }
  else
  {
    char v5 = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t QueryInterfaceRequest.updateAll(_:onConflict:_:)(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  int v8 = *a2;
  memcpy(__dst, v4, 0xA2uLL);
  if (v8 == 5)
  {
    sub_24F7AAB24(a4, &v22);
    LOBYTE(v8) = v22;
  }
  memcpy(v24, __dst, 0xA2uLL);
  sub_24F7AD450((uint64_t)__dst);
  sub_24F8C7698(v24, (uint64_t)__src);
  uint64_t v9 = __dst[11];
  uint64_t v10 = __dst[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_24F7ABCFC(v9, v10);
  uint64_t v12 = v11;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  memcpy(v21, __src, 0xA8uLL);
  LOBYTE(v21[21]) = 0;
  v21[22] = v12;
  memcpy(v23, v21, sizeof(v23));
  LOBYTE(v19[0]) = v8;
  sub_24F8C51D4();
  uint64_t v14 = v13;
  sub_24F7AC0E8(v21);
  if (!v5)
  {
    if (v14)
    {
      v19[0] = 0;
      v19[1] = 0;
      long long v17 = v19;
      Statement.execute(arguments:)(*(GRDBInternal::StatementArguments_optional *)(&v15 - 1));
      if (!v18) {
        a1 = Database.changesCount.getter();
      }
      swift_release();
    }
    else
    {
      return 0;
    }
  }
  return a1;
}

uint64_t QueryInterfaceRequest.updateAll(_:onConflict:_:_:)(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 v11 = *a2;
  sub_24F781274(qword_26B1F51A8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_24F8DDBF0;
  sub_24F7AC534(a3, inited + 32);
  swift_bridgeObjectRetain();
  sub_24F79318C();
  uint64_t v9 = QueryInterfaceRequest.updateAll(_:onConflict:_:)(a1, &v11, inited, a5);
  swift_bridgeObjectRelease();
  return v9;
}

void *ColumnExpression.set(to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  sub_24F76ADC4((uint64_t *)&v15);
  sub_24F773974();
  (*(void (**)(void))(v6 + 16))();
  sub_24F781214(a1, (uint64_t)v12, &qword_26B1F7350);
  uint64_t v7 = v13;
  if (v13)
  {
    uint64_t v8 = v14;
    sub_24F7811D0(v12, v13);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v8 + 8))(__src, v7, v8);
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v12);
  }
  else
  {
    sub_24F774DA0((uint64_t)v12, &qword_26B1F7350);
    v10[0] = 0;
    v10[1] = 0;
    char v11 = 4;
    sub_24F7667B8((uint64_t)v10);
    sub_24F76F710((uint64_t)v10, (uint64_t)__src);
  }
  sub_24F794DE0(&v15, a4);
  return memcpy((void *)(a4 + 40), __src, 0xA3uLL);
}

uint64_t += infix(_:_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_24F7AAF44(a1, a2, (void (*)(uint64_t *, uint64_t))+ infix(_:_:), a3);
}

uint64_t -= infix(_:_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_24F7AAF44(a1, a2, (void (*)(uint64_t *, uint64_t))- infix(_:_:), a3);
}

uint64_t sub_24F7AAF44@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *, uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_24F7811D0(a1, v8);
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_24F7811D0(a1, v10);
  void v14[3] = v10;
  v14[4] = *(void *)(v11 + 8);
  sub_24F76ADC4(v14);
  sub_24F773974();
  (*(void (**)(void))(v12 + 16))();
  v15[3] = &type metadata for SQLExpression;
  v15[4] = &protocol witness table for SQLExpression;
  v15[0] = swift_allocObject();
  a3(v14, a2);
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v14);
  ColumnExpression.set(to:)((uint64_t)v15, v8, v9, a4);
  return sub_24F774DA0((uint64_t)v15, &qword_26B1F7350);
}

uint64_t *= infix(_:_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_24F7AAF44(a1, a2, (void (*)(uint64_t *, uint64_t))* infix(_:_:), a3);
}

uint64_t /= infix(_:_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_24F7AAF44(a1, a2, (void (*)(uint64_t *, uint64_t))/ infix(_:_:), a3);
}

uint64_t sub_24F7AB09C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    if (sub_24F8CF9E0()) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_3:
      sub_24F8A0264(0);
      if ((a2 & 0xC000000000000001) != 0)
      {
        uint64_t v5 = (void *)MEMORY[0x253364060](0, a2);
      }
      else
      {
        uint64_t v5 = *(void **)(a2 + 32);
        swift_retain();
      }
      swift_bridgeObjectRelease();
      swift_retain();
      uint64_t v6 = sub_24F7A5114(a1, v5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v7 = sub_24F7AB804(a2, v6);
      swift_bridgeObjectRelease();
      swift_release();
      return v7;
    }
  }
  swift_bridgeObjectRelease();
  sub_24F781274(&qword_26B1F7348);
  sub_24F781274(&qword_26B1F6F50);
  sub_24F7ADE10();
  return sub_24F8CEC70();
}

void sub_24F7AB208(void *a1, uint64_t a2, const void *a3)
{
  if (*(void *)(*a1 + 16))
  {
    uint64_t v8 = a1;
    uint64_t v4 = a3;
    memcpy(__dst, (const void *)(*a1 + 96), 0xA2uLL);
    uint64_t v10 = __dst[18];
    uint64_t v40 = __dst[19];
    char v39 = __dst[20];
    LODWORD(v46) = BYTE1(__dst[20]);
    uint64_t v37 = __dst[17];
    uint64_t v38 = __dst[16];
    uint64_t v35 = __dst[15];
    uint64_t v36 = __dst[14];
    char v34 = __dst[13];
    long long v32 = *(_OWORD *)&__dst[9];
    long long v33 = *(_OWORD *)&__dst[11];
    char v31 = __dst[8];
    uint64_t v7 = __dst[6];
    uint64_t v30 = __dst[7];
    long long v29 = *(_OWORD *)&__dst[3];
    uint64_t v12 = __dst[0];
    uint64_t v13 = __dst[1];
    uint64_t v3 = __dst[5];
    uint64_t v14 = __dst[2];
    sub_24F7AD450((uint64_t)__dst);
    sub_24F7AD450((uint64_t)__dst);
    uint64_t v5 = sub_24F801CF0(a2, v12, v13, v14);
    uint64_t v6 = v15;
    uint64_t v28 = v16;
    swift_bridgeObjectRelease();
    swift_release();
    sub_24F7AD514((uint64_t)__dst);
    uint64_t v9 = swift_allocObject();
    uint64_t v41 = (uint64_t)v4;
    memcpy((void *)(v9 + 16), v4, 0xA3uLL);
    uint64_t v17 = sub_24F7ADECC;
    if (v3)
    {
      uint64_t v18 = (void *)swift_allocObject();
      void v18[2] = v3;
      uint64_t v18[3] = v7;
      v18[4] = sub_24F7ADECC;
      void v18[5] = v9;
      uint64_t v17 = sub_24F7AE29C;
      uint64_t v9 = (uint64_t)v18;
    }
    char v43 = (char)v46;
    uint64_t v19 = *v8;
    if (*(void *)(*v8 + 16))
    {
      uint64_t v24 = v17;
      uint64_t v25 = v6;
      uint64_t v26 = v5;
      uint64_t v27 = v10;
      uint64_t v46 = v8;
      memcpy(v44, (const void *)(v19 + 32), 0xE3uLL);
      char v23 = BYTE2(v44[28]);
      uint64_t v7 = v44[3];
      uint64_t v6 = v44[4];
      uint64_t v8 = (void *)v44[6];
      uint64_t v22 = v44[5];
      char v21 = v44[7];
      uint64_t v10 = v44[0];
      uint64_t v4 = (const void *)v44[1];
      LOBYTE(v5) = v44[2];
      sub_24F7AC4B8(v41, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))sub_24F76CB14);
      sub_24F79900C((uint64_t)v44);
      sub_24F7AD514((uint64_t)&v44[8]);
      LOBYTE(v3) = v43;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_10:
  sub_24F83CCE4();
  uint64_t v19 = v20;
LABEL_6:
  if (*(void *)(v19 + 16))
  {
    memcpy(v42, (const void *)(v19 + 32), 0xE3uLL);
    *(void *)(v19 + 32) = v10;
    *(void *)(v19 + 40) = v4;
    *(unsigned char *)(v19 + 48) = v5;
    *(void *)(v19 + 56) = v7;
    *(void *)(v19 + 64) = v6;
    *(void *)(v19 + 72) = v22;
    *(void *)(v19 + 80) = v8;
    *(unsigned char *)(v19 + 88) = v21;
    *(void *)(v19 + 96) = v26;
    *(void *)(v19 + 104) = v25;
    *(void *)(v19 + 112) = v28;
    *(_OWORD *)(v19 + 120) = v29;
    *(void *)(v19 + 136) = v24;
    *(void *)(v19 + 144) = v9;
    *(void *)(v19 + 152) = v30;
    *(unsigned char *)(v19 + 160) = v31;
    *(_OWORD *)(v19 + 168) = v32;
    *(_OWORD *)(v19 + 184) = v33;
    *(unsigned char *)(v19 + 200) = v34;
    *(void *)(v19 + 208) = v36;
    *(void *)(v19 + 216) = v35;
    *(void *)(v19 + 224) = v38;
    *(void *)(v19 + 232) = v37;
    *(void *)(v19 + 240) = v27;
    *(void *)(v19 + 248) = v40;
    *(unsigned char *)(v19 + 256) = v39;
    *(unsigned char *)(v19 + 257) = v3;
    *(unsigned char *)(v19 + 258) = v23;
    sub_24F7AD5F4((uint64_t)v42);
    *uint64_t v46 = v19;
  }
  else
  {
    __break(1u);
  }
}

void sub_24F7AB52C(void *a1, const void *a2)
{
  uint64_t v9 = *a1;
  if (!*(void *)(*a1 + 16))
  {
    __break(1u);
LABEL_9:
    sub_24F83CCE4();
    uint64_t v9 = v14;
    goto LABEL_6;
  }
  uint64_t v36 = a1;
  memcpy(__dst, (const void *)(v9 + 96), 0xA2uLL);
  uint64_t v4 = swift_allocObject();
  memcpy((void *)(v4 + 16), a2, 0xA3uLL);
  uint64_t v11 = __dst[5];
  if (__dst[5])
  {
    uint64_t v12 = __dst[6];
    uint64_t v13 = (void *)swift_allocObject();
    v13[2] = v11;
    v13[3] = v12;
    v13[4] = sub_24F7AE2D8;
    v13[5] = v4;
    uint64_t v35 = sub_24F7AE29C;
    uint64_t v4 = (uint64_t)v13;
  }
  else
  {
    uint64_t v35 = sub_24F7AE2D8;
  }
  uint64_t v21 = __dst[1];
  uint64_t v22 = __dst[0];
  long long v23 = *(_OWORD *)&__dst[3];
  uint64_t v20 = __dst[2];
  uint64_t v32 = __dst[7];
  long long v33 = *(_OWORD *)&__dst[11];
  long long v34 = *(_OWORD *)&__dst[9];
  char v30 = __dst[13];
  char v31 = __dst[8];
  uint64_t v28 = __dst[15];
  uint64_t v29 = __dst[14];
  uint64_t v26 = __dst[17];
  uint64_t v27 = __dst[16];
  uint64_t v24 = __dst[19];
  uint64_t v25 = __dst[18];
  char v38 = BYTE1(__dst[20]);
  char v19 = __dst[20];
  memcpy(v39, (const void *)(v9 + 32), 0xE3uLL);
  char v18 = BYTE2(v39[28]);
  uint64_t v7 = v39[4];
  uint64_t v8 = v39[5];
  uint64_t v16 = v39[6];
  uint64_t v17 = v39[3];
  char v15 = v39[7];
  uint64_t v2 = v39[0];
  uint64_t v3 = v39[1];
  char v6 = v39[2];
  sub_24F7AC4B8((uint64_t)a2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))sub_24F76CB14);
  sub_24F7AD450((uint64_t)__dst);
  sub_24F79900C((uint64_t)v39);
  sub_24F7AD514((uint64_t)&v39[8]);
  char v5 = v38;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_9;
  }
LABEL_6:
  if (*(void *)(v9 + 16))
  {
    memcpy(v37, (const void *)(v9 + 32), 0xE3uLL);
    *(void *)(v9 + 32) = v2;
    *(void *)(v9 + 40) = v3;
    *(unsigned char *)(v9 + 48) = v6;
    *(void *)(v9 + 56) = v17;
    *(void *)(v9 + 64) = v7;
    *(void *)(v9 + 72) = v8;
    *(void *)(v9 + 80) = v16;
    *(unsigned char *)(v9 + 88) = v15;
    *(void *)(v9 + 96) = v22;
    *(void *)(v9 + 104) = v21;
    *(void *)(v9 + 112) = v20;
    *(_OWORD *)(v9 + 120) = v23;
    *(void *)(v9 + 136) = v35;
    *(void *)(v9 + 144) = v4;
    *(void *)(v9 + 152) = v32;
    *(unsigned char *)(v9 + 160) = v31;
    *(_OWORD *)(v9 + 168) = v34;
    *(_OWORD *)(v9 + 184) = v33;
    *(unsigned char *)(v9 + 200) = v30;
    *(void *)(v9 + 208) = v29;
    *(void *)(v9 + 216) = v28;
    *(void *)(v9 + 224) = v27;
    *(void *)(v9 + 232) = v26;
    *(void *)(v9 + 240) = v25;
    *(void *)(v9 + 248) = v24;
    *(unsigned char *)(v9 + 256) = v19;
    *(unsigned char *)(v9 + 257) = v5;
    *(unsigned char *)(v9 + 258) = v18;
    sub_24F7AD5F4((uint64_t)v37);
    *uint64_t v36 = v9;
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_24F7AB804(unint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  unint64_t v4 = a1;
  char v30 = (void *)MEMORY[0x263F8EE80];
  if (a1 >> 62)
  {
LABEL_23:
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_24F8CF9E0();
    swift_bridgeObjectRelease();
    if (v5) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v5)
    {
LABEL_3:
      unint64_t v26 = v4 & 0xC000000000000001;
      char v6 = (void *)MEMORY[0x263F8EE80];
      uint64_t v7 = 4;
      uint64_t v25 = (void *)v4;
      while (1)
      {
        if (v26)
        {
          uint64_t v8 = (void *)MEMORY[0x253364060](v7 - 4, v4);
        }
        else
        {
          uint64_t v8 = *(void **)(v4 + 8 * v7);
          swift_retain();
        }
        if (__OFADD__(v7 - 4, 1))
        {
          __break(1u);
LABEL_21:
          __break(1u);
LABEL_22:
          __break(1u);
          goto LABEL_23;
        }
        uint64_t v28 = v7 - 3;
        swift_retain();
        unint64_t v9 = v3;
        uint64_t v10 = sub_24F7A54C4(a2, v8);
        unint64_t v4 = (unint64_t)v6;
        unint64_t v3 = sub_24F7C0378();
        uint64_t v12 = v6[2];
        BOOL v13 = (v11 & 1) == 0;
        if (__OFADD__(v12, v13)) {
          goto LABEL_21;
        }
        char v14 = v11;
        if (v6[3] < v12 + v13)
        {
          sub_24F8B60E4();
          char v6 = v30;
          unint64_t v15 = sub_24F7C0378();
          if ((v14 & 1) != (v16 & 1))
          {
            sub_24F781274(&qword_26B1F7348);
            swift_bridgeObjectRelease();
            uint64_t result = sub_24F8CFEA0();
            __break(1u);
            return result;
          }
          unint64_t v3 = v15;
        }
        if (v14)
        {
          uint64_t v17 = swift_bridgeObjectRelease();
          char v18 = (void *)(v6[7] + 8 * v3);
          MEMORY[0x2533638D0](v17);
          if (*(void *)((*v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            sub_24F8CF0F0();
          }
          sub_24F8CF140();
          sub_24F8CF0B0();
        }
        else
        {
          sub_24F781274(&qword_26B1F7F68);
          uint64_t v19 = swift_allocObject();
          *(_OWORD *)(v19 + 16) = xmmword_24F8DE5E0;
          *(void *)(v19 + 32) = v8;
          uint64_t v29 = v19;
          unint64_t v4 = (unint64_t)&v29;
          sub_24F8CF0B0();
          uint64_t v20 = v29;
          v6[(v3 >> 6) + 8] |= 1 << v3;
          *(void *)(v6[6] + 8 * v3) = v10;
          *(void *)(v6[7] + 8 * v3) = v20;
          uint64_t v21 = v6[2];
          BOOL v22 = __OFADD__(v21, 1);
          uint64_t v23 = v21 + 1;
          if (v22) {
            goto LABEL_22;
          }
          void v6[2] = v23;
        }
        unint64_t v3 = v9;
        ++v7;
        unint64_t v4 = (unint64_t)v25;
        if (v28 == v5)
        {
          swift_bridgeObjectRelease();
          goto LABEL_25;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  char v6 = (void *)MEMORY[0x263F8EE80];
LABEL_25:
  swift_bridgeObjectRelease();
  return (uint64_t)v6;
}

uint64_t sub_24F7ABAC0()
{
  sub_24F77DD6C();
  sub_24F7F9440();
  if (!v1)
  {
    uint64_t v3 = swift_retain();
    uint64_t v0 = sub_24F7F05DC(v3, 0, 0, v2 + 8);
    sub_24F7AD1E4((uint64_t)v5);
    swift_release();
  }
  return v0;
}

uint64_t sub_24F7ABB4C()
{
  sub_24F77DD6C();
  sub_24F7F9440(v2, v3);
  if (!v0)
  {
    uint64_t v4 = swift_retain();
    uint64_t v5 = sub_24F782DE0(v4);
    if (v1 == -8) {
      uint64_t v1 = v5;
    }
    sub_24F7AD1E4((uint64_t)v7);
    swift_release();
  }
  return v1;
}

uint64_t sub_24F7ABBDC()
{
  sub_24F77DD6C();
  sub_24F7C7DB8();
  if (!v0)
  {
    uint64_t v2 = swift_retain();
    uint64_t v3 = sub_24F782DE0(v2);
    if (v1 == -8) {
      uint64_t v1 = v3;
    }
    sub_24F7AD1E4((uint64_t)v5);
    swift_release();
  }
  return v1;
}

uint64_t sub_24F7ABC6C(uint64_t a1, uint64_t a2)
{
  sub_24F7F9440(a1, (uint64_t)&v6);
  if (!v2)
  {
    uint64_t v4 = swift_retain();
    a2 = sub_24F7F073C(v4, 0, 0, &v7);
    sub_24F7AD1E4((uint64_t)&v6);
    swift_release();
  }
  return a2;
}

void sub_24F7ABCFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    if (*(void *)(swift_bridgeObjectRetain() + 16))
    {
      uint64_t v3 = (uint64_t *)(a1 + 40);
      uint64_t v4 = MEMORY[0x263F8EE78];
      while (1)
      {
        uint64_t v6 = *(v3 - 1);
        uint64_t v5 = *v3;
        swift_bridgeObjectRetain_n();
        unint64_t v7 = sub_24F782950();
        if ((v8 & 1) == 0) {
          break;
        }
        unint64_t v9 = (const void *)(*(void *)(a2 + 56) + 216 * v7);
        memcpy(__dst, v9, 0xD2uLL);
        memcpy(__src, v9, sizeof(__src));
        sub_24F7ADF80((uint64_t)__dst);
        swift_bridgeObjectRelease();
        v36[0] = v6;
        v36[1] = v5;
        memcpy(v37, __src, sizeof(v37));
        swift_bridgeObjectRetain();
        sub_24F7ADF80((uint64_t)__dst);
        sub_24F7AE06C((uint64_t)v36);
        if (LOBYTE(__dst[0]) == 2)
        {
          sub_24F781274(&qword_26B1F5530);
          uint64_t v10 = swift_allocObject();
          *(_OWORD *)(v10 + 16) = xmmword_24F8DDBF0;
          uint64_t v30 = v4;
          uint64_t v31 = v2;
          uint64_t v11 = __dst[1];
          uint64_t v29 = __dst[2];
          uint64_t v12 = __dst[3];
          uint64_t v13 = __dst[4];
          char v14 = __dst[5];
          memcpy(v33, &__dst[6], 0xA2uLL);
          memcpy(&v34[7], &__dst[6], 0xA2uLL);
          sub_24F781274(&qword_26B1F5658);
          uint64_t v15 = swift_allocObject();
          *(_OWORD *)(v15 + 16) = xmmword_24F8DDBF0;
          *(void *)(v15 + 32) = v6;
          *(void *)(v15 + 40) = v5;
          *(unsigned char *)(v15 + 48) = 3;
          *(void *)(v15 + 56) = v11;
          *(void *)(v15 + 64) = v29;
          *(void *)(v15 + 72) = v12;
          *(void *)(v15 + 80) = v13;
          *(unsigned char *)(v15 + 88) = v14;
          memcpy((void *)(v15 + 89), v34, 0xA9uLL);
          *(unsigned char *)(v15 + 258) = 1;
          *(void *)(v10 + 32) = v15;
          swift_bridgeObjectRetain();
          uint64_t v16 = v11;
          uint64_t v17 = v12;
          uint64_t v4 = v30;
          uint64_t v2 = v31;
          sub_24F799140(v16, v29, v17, v13, v14);
          sub_24F7AD450((uint64_t)v33);
        }
        else
        {
          uint64_t v18 = __dst[17];
          uint64_t v19 = v4;
          uint64_t v20 = __dst[18];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v21 = sub_24F7ABCFC(v18, v20);
          uint64_t v4 = v19;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          sub_24F7ADF80((uint64_t)__dst);
          uint64_t v10 = sub_24F7A5890(v21, (uint64_t)__dst);
          swift_bridgeObjectRelease();
        }
        sub_24F7AE06C((uint64_t)v36);
        uint64_t v22 = *(void *)(v10 + 16);
        uint64_t v23 = *(void *)(v4 + 16);
        if (__OFADD__(v23, v22)) {
          goto LABEL_24;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0 || v23 + v22 > *(void *)(v4 + 24) >> 1)
        {
          sub_24F7878A0();
          uint64_t v4 = v24;
        }
        if (*(void *)(v10 + 16))
        {
          if ((*(void *)(v4 + 24) >> 1) - *(void *)(v4 + 16) < v22) {
            goto LABEL_26;
          }
          swift_arrayInitWithCopy();
          if (v22)
          {
            uint64_t v25 = *(void *)(v4 + 16);
            BOOL v26 = __OFADD__(v25, v22);
            uint64_t v27 = v25 + v22;
            if (v26) {
              goto LABEL_27;
            }
            *(void *)(v4 + 16) = v27;
          }
        }
        else if (v22)
        {
          goto LABEL_25;
        }
        swift_bridgeObjectRelease();
        if (!--v2) {
          goto LABEL_21;
        }
        v3 += 2;
        if (!*(void *)(a2 + 16)) {
          goto LABEL_20;
        }
      }
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
    }
    else
    {
LABEL_20:
      __break(1u);
LABEL_21:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_24F7AC0B4@<X0>(uint64_t (*a1)(void)@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  if (!v2) {
    *a2 = result;
  }
  return result;
}

void *sub_24F7AC0E8(void *a1)
{
  uint64_t v2 = a1[6];
  uint64_t v3 = a1[12];
  uint64_t v5 = a1[14];
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_24F787238(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_24F787238(v3);
  sub_24F787238(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_24F7AC1D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24F781274(&qword_26B1F7F10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_24F7AC238()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (v0[8]) {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0[17]) {
    swift_release();
  }
  if (v0[19]) {
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t sub_24F7AC2E0(uint64_t a1)
{
  return sub_24F7A635C(a1);
}

double sub_24F7AC304()
{
  sub_24F773968();
  *(void *)&double result = sub_24F7A8AD0(v0, v1, v2).n128_u64[0];
  return result;
}

double sub_24F7AC320()
{
  sub_24F773968();
  *(void *)&double result = sub_24F7A8E68(v0, v1, v2).n128_u64[0];
  return result;
}

double sub_24F7AC33C()
{
  sub_24F773968();
  *(void *)&double result = sub_24F7A94F0(v0, v1, v2).n128_u64[0];
  return result;
}

double sub_24F7AC358()
{
  sub_24F773968();
  *(void *)&double result = sub_24F7A96D4(v0, v1, v2).n128_u64[0];
  return result;
}

unsigned char *sub_24F7AC374(unsigned char *a1)
{
  return sub_24F7A990C(a1);
}

double sub_24F7AC390(char *a1)
{
  *(void *)&double result = sub_24F7A9954(a1).n128_u64[0];
  return result;
}

double sub_24F7AC3AC()
{
  sub_24F773968();
  *(void *)&double result = sub_24F7A9B1C(v0, v1, v2).n128_u64[0];
  return result;
}

double sub_24F7AC3C8()
{
  sub_24F773968();
  *(void *)&double result = sub_24F7A9D54(v0, v1, v2).n128_u64[0];
  return result;
}

void *sub_24F7AC3E4(void *a1)
{
  return sub_24F7A9FE8(a1, *(void *)(v1 + 24));
}

void *sub_24F7AC404(void *a1)
{
  return sub_24F7A9FE8(a1, *(void *)(v1 + 24));
}

void *sub_24F7AC424(void *a1)
{
  return sub_24F7A9FE8(a1, *(void *)(v1 + 24));
}

void *sub_24F7AC444(void *a1)
{
  return sub_24F7AA118(a1, *(void *)(v1 + 24), *(void *)(v1 + 16), (void (*)(uint64_t *))sub_24F8032F4);
}

void *sub_24F7AC478(void *a1)
{
  return sub_24F7AA118(a1, *(void *)(v1 + 24), *(void *)(v1 + 16), (void (*)(uint64_t *))sub_24F8033FC);
}

uint64_t sub_24F7AC4AC(uint64_t result)
{
  *(unsigned char *)(result + 104) = 1;
  return result;
}

uint64_t sub_24F7AC4B8(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))
{
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(unsigned __int16 *)(a1 + 160) | (*(unsigned __int8 *)(a1 + 162) << 16));
  return a1;
}

uint64_t sub_24F7AC534(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_24F7AC570(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_24F7AC5AC(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 24) = result;
  return result;
}

uint64_t sub_24F7AC5E8(void *a1)
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (a1[5]) {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (a1[14]) {
    uint64_t result = swift_release();
  }
  if (a1[16])
  {
    return swift_release();
  }
  return result;
}

uint64_t sub_24F7AC690(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = v5;
  unint64_t v7 = (_OWORD *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  if (v6)
  {
    uint64_t v8 = *(void *)(a2 + 48);
    *(void *)(a1 + 40) = v6;
    *(void *)(a1 + 48) = v8;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 40) = *v7;
  }
  uint64_t v9 = *(void *)(a2 + 112);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v10 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v10;
  uint64_t v11 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v11;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v9)
  {
    uint64_t v12 = *(void *)(a2 + 120);
    *(void *)(a1 + 112) = v9;
    *(void *)(a1 + 120) = v12;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  }
  uint64_t v13 = *(void *)(a2 + 128);
  if (v13)
  {
    uint64_t v14 = *(void *)(a2 + 136);
    *(void *)(a1 + 128) = v13;
    *(void *)(a1 + 136) = v14;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  }
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
  return a1;
}

uint64_t sub_24F7AC7E0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40))
  {
    if (v5)
    {
      uint64_t v6 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = v5;
      *(void *)(a1 + 48) = v6;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    sub_24F774DA0(a1 + 40, &qword_269A2A6A0);
  }
  else if (v5)
  {
    uint64_t v7 = *(void *)(a2 + 48);
    *(void *)(a1 + 40) = v5;
    *(void *)(a1 + 48) = v7;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
LABEL_8:
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a1 + 112);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  uint64_t v9 = *(void *)(a2 + 112);
  if (v8)
  {
    if (v9)
    {
      uint64_t v10 = *(void *)(a2 + 120);
      *(void *)(a1 + 112) = v9;
      *(void *)(a1 + 120) = v10;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    sub_24F774DA0(a1 + 112, qword_269A2A6A8);
  }
  else if (v9)
  {
    uint64_t v11 = *(void *)(a2 + 120);
    *(void *)(a1 + 112) = v9;
    *(void *)(a1 + 120) = v11;
    swift_retain();
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
LABEL_15:
  uint64_t v12 = *(void *)(a2 + 128);
  if (!*(void *)(a1 + 128))
  {
    if (v12)
    {
      uint64_t v14 = *(void *)(a2 + 136);
      *(void *)(a1 + 128) = v12;
      *(void *)(a1 + 136) = v14;
      swift_retain();
      goto LABEL_22;
    }
LABEL_21:
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    goto LABEL_22;
  }
  if (!v12)
  {
    sub_24F774DA0(a1 + 128, &qword_269A2A6A0);
    goto LABEL_21;
  }
  uint64_t v13 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = v12;
  *(void *)(a1 + 136) = v13;
  swift_retain();
  swift_release();
LABEL_22:
  long long v15 = *(_OWORD *)(a2 + 144);
  *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v15;
  return a1;
}

void *initializeWithTake for SQLSubquery.Impl(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xA2uLL);
}

uint64_t sub_24F7ACA20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  uint64_t v5 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40))
  {
    if (v5)
    {
      uint64_t v6 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = v5;
      *(void *)(a1 + 48) = v6;
      swift_release();
      goto LABEL_6;
    }
    sub_24F774DA0(a1 + 40, &qword_269A2A6A0);
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
LABEL_6:
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 112);
  uint64_t v8 = *(void *)(a1 + 112);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  if (v8)
  {
    if (v7)
    {
      uint64_t v9 = *(void *)(a2 + 120);
      *(void *)(a1 + 112) = v7;
      *(void *)(a1 + 120) = v9;
      swift_release();
      goto LABEL_11;
    }
    sub_24F774DA0(a1 + 112, qword_269A2A6A8);
  }
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
LABEL_11:
  uint64_t v10 = *(void *)(a2 + 128);
  if (!*(void *)(a1 + 128))
  {
LABEL_15:
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    goto LABEL_16;
  }
  if (!v10)
  {
    sub_24F774DA0(a1 + 128, &qword_269A2A6A0);
    goto LABEL_15;
  }
  uint64_t v11 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = v10;
  *(void *)(a1 + 136) = v11;
  swift_release();
LABEL_16:
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
  return a1;
}

uint64_t sub_24F7ACBBC(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 162))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_24F7ACBFC(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 160) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 162) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 162) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for QueryInterfaceRequest()
{
  return sub_24F777DE0();
}

uint64_t destroy for ColumnAssignment(uint64_t a1)
{
  return sub_24F76C98C(*(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144), *(void *)(a1 + 152), *(void *)(a1 + 160), *(void *)(a1 + 168), *(void *)(a1 + 176), *(void *)(a1 + 184),
           *(void *)(a1 + 192),
           *(unsigned __int16 *)(a1 + 200) | (*(unsigned __int8 *)(a1 + 202) << 16));
}

uint64_t initializeWithCopy for ColumnAssignment(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  unint64_t v5 = *(void *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 56);
  unint64_t v7 = *(void *)(a2 + 64);
  uint64_t v8 = *(void *)(a2 + 72);
  uint64_t v9 = *(void *)(a2 + 80);
  uint64_t v10 = *(void *)(a2 + 88);
  uint64_t v15 = *(void *)(a2 + 112);
  uint64_t v16 = *(void *)(a2 + 120);
  uint64_t v17 = *(void *)(a2 + 128);
  uint64_t v18 = *(void *)(a2 + 136);
  uint64_t v19 = *(void *)(a2 + 144);
  uint64_t v20 = *(void *)(a2 + 152);
  uint64_t v21 = *(void *)(a2 + 160);
  uint64_t v22 = *(void *)(a2 + 168);
  int v26 = *(unsigned __int8 *)(a2 + 202);
  int v27 = *(unsigned __int16 *)(a2 + 200);
  uint64_t v23 = *(void *)(a2 + 176);
  uint64_t v24 = *(void *)(a2 + 184);
  uint64_t v25 = *(void *)(a2 + 192);
  uint64_t v11 = *(void *)(a2 + 104);
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = *(void *)(a2 + 96);
  sub_24F76CB14(v12, v5, v6, v7, v8, v9, v10, v13, v11, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24,
    v25,
    v27 | (v26 << 16));
  *(void *)(a1 + 40) = v12;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  *(void *)(a1 + 64) = v7;
  *(void *)(a1 + 72) = v8;
  *(void *)(a1 + 80) = v9;
  *(void *)(a1 + 88) = v10;
  *(void *)(a1 + 96) = v13;
  *(void *)(a1 + 104) = v11;
  *(void *)(a1 + 112) = v15;
  *(void *)(a1 + 120) = v16;
  *(void *)(a1 + 128) = v17;
  *(void *)(a1 + 136) = v18;
  *(void *)(a1 + 144) = v19;
  *(void *)(a1 + 152) = v20;
  *(void *)(a1 + 160) = v21;
  *(void *)(a1 + 168) = v22;
  *(void *)(a1 + 176) = v23;
  *(void *)(a1 + 184) = v24;
  *(void *)(a1 + 192) = v25;
  *(unsigned char *)(a1 + 202) = v26;
  *(_WORD *)(a1 + 200) = v27;
  return a1;
}

uint64_t assignWithCopy for ColumnAssignment(uint64_t a1, uint64_t a2)
{
  sub_24F7A2320((uint64_t *)a1, (uint64_t *)a2);
  unint64_t v4 = *(void *)(a2 + 48);
  uint64_t v5 = *(void *)(a2 + 56);
  unint64_t v6 = *(void *)(a2 + 64);
  uint64_t v7 = *(void *)(a2 + 72);
  uint64_t v8 = *(void *)(a2 + 80);
  uint64_t v9 = *(void *)(a2 + 88);
  uint64_t v10 = *(void *)(a2 + 96);
  uint64_t v30 = *(void *)(a2 + 104);
  uint64_t v31 = *(void *)(a2 + 112);
  uint64_t v32 = *(void *)(a2 + 120);
  uint64_t v33 = *(void *)(a2 + 128);
  uint64_t v34 = *(void *)(a2 + 136);
  uint64_t v35 = *(void *)(a2 + 144);
  uint64_t v36 = *(void *)(a2 + 152);
  uint64_t v37 = *(void *)(a2 + 160);
  uint64_t v38 = *(void *)(a2 + 168);
  uint64_t v39 = *(void *)(a2 + 176);
  int v42 = *(unsigned __int8 *)(a2 + 202);
  int v11 = *(unsigned __int16 *)(a2 + 200);
  uint64_t v40 = *(void *)(a2 + 184);
  uint64_t v41 = *(void *)(a2 + 192);
  uint64_t v12 = *(void *)(a2 + 40);
  sub_24F76CB14(v12, v4, v5, v6, v7, v8, v9, v10, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40,
    v41,
    v11 | (v42 << 16));
  unsigned int v13 = *(unsigned __int16 *)(a1 + 200) | (*(unsigned __int8 *)(a1 + 202) << 16);
  uint64_t v14 = *(void *)(a1 + 40);
  unint64_t v15 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = v12;
  *(void *)(a1 + 48) = v4;
  uint64_t v16 = *(void *)(a1 + 56);
  unint64_t v17 = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 64) = v6;
  uint64_t v18 = *(void *)(a1 + 72);
  uint64_t v19 = *(void *)(a1 + 80);
  *(void *)(a1 + 72) = v7;
  *(void *)(a1 + 80) = v8;
  uint64_t v20 = *(void *)(a1 + 88);
  uint64_t v21 = *(void *)(a1 + 96);
  *(void *)(a1 + 88) = v9;
  *(void *)(a1 + 96) = v10;
  long long v22 = *(_OWORD *)(a1 + 104);
  *(void *)(a1 + 104) = v30;
  *(void *)(a1 + 112) = v31;
  long long v23 = *(_OWORD *)(a1 + 120);
  *(void *)(a1 + 120) = v32;
  *(void *)(a1 + 128) = v33;
  long long v24 = *(_OWORD *)(a1 + 136);
  *(void *)(a1 + 136) = v34;
  *(void *)(a1 + 144) = v35;
  long long v25 = *(_OWORD *)(a1 + 152);
  *(void *)(a1 + 152) = v36;
  *(void *)(a1 + 160) = v37;
  long long v26 = *(_OWORD *)(a1 + 168);
  *(void *)(a1 + 168) = v38;
  *(void *)(a1 + 176) = v39;
  *(_WORD *)(a1 + 200) = v11;
  *(unsigned char *)(a1 + 202) = v42;
  uint64_t v27 = *(void *)(a1 + 184);
  uint64_t v28 = *(void *)(a1 + 192);
  *(void *)(a1 + 184) = v40;
  *(void *)(a1 + 192) = v41;
  sub_24F76C98C(v14, v15, v16, v17, v18, v19, v20, v21, v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25, *((uint64_t *)&v25 + 1), v26, *((uint64_t *)&v26 + 1), v27,
    v28,
    v13);
  return a1;
}

void *initializeWithTake for ColumnAssignment(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xCBuLL);
}

uint64_t assignWithTake for ColumnAssignment(uint64_t a1, uint64_t a2)
{
  _s12GRDBInternal13DatabaseEventVwxx_0(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  __int16 v5 = *(_WORD *)(a2 + 200);
  char v6 = *(unsigned char *)(a2 + 202);
  uint64_t v7 = *(void *)(a1 + 40);
  unint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 56);
  unint64_t v10 = *(void *)(a1 + 64);
  uint64_t v11 = *(void *)(a1 + 72);
  uint64_t v12 = *(void *)(a1 + 80);
  uint64_t v13 = *(void *)(a1 + 88);
  uint64_t v14 = *(void *)(a1 + 96);
  long long v15 = *(_OWORD *)(a1 + 104);
  long long v16 = *(_OWORD *)(a1 + 120);
  long long v17 = *(_OWORD *)(a1 + 136);
  long long v18 = *(_OWORD *)(a1 + 152);
  long long v19 = *(_OWORD *)(a1 + 168);
  uint64_t v20 = *(void *)(a1 + 184);
  uint64_t v21 = *(void *)(a1 + 192);
  unsigned int v22 = *(unsigned __int16 *)(a1 + 200) | (*(unsigned __int8 *)(a1 + 202) << 16);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(unsigned char *)(a1 + 202) = v6;
  *(_WORD *)(a1 + 200) = v5;
  sub_24F76C98C(v7, v8, v9, v10, v11, v12, v13, v14, v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17, *((uint64_t *)&v17 + 1), v18, *((uint64_t *)&v18 + 1), v19, *((uint64_t *)&v19 + 1), v20,
    v21,
    v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for ColumnAssignment(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 203))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ColumnAssignment(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 202) = 0;
    *(_WORD *)(result + 200) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 203) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 203) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ColumnAssignment()
{
  return &type metadata for ColumnAssignment;
}

uint64_t sub_24F7AD1E4(uint64_t a1)
{
  return a1;
}

uint64_t sub_24F7AD238()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24F7AD274(uint64_t a1)
{
  return sub_24F801A90(a1, *(void (**)(uint64_t))(v1 + 16), *(void *)(v1 + 24), *(void (**)(uint64_t))(v1 + 32));
}

uint64_t sub_24F7AD294(uint64_t a1)
{
  return sub_24F7A988C(a1, *(void (**)(void))(v1 + 16), *(void *)(v1 + 24), (void (*)(void))sub_24F7A5754);
}

uint64_t sub_24F7AD2C4@<X0>(uint64_t *a1@<X8>)
{
  return sub_24F7AD30C(a1);
}

uint64_t sub_24F7AD2DC(uint64_t a1)
{
  return sub_24F7A988C(a1, *(void (**)(void))(v1 + 16), *(void *)(v1 + 24), (void (*)(void))sub_24F7A5618);
}

uint64_t sub_24F7AD30C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  if (!v2) {
    *a1 = result;
  }
  return result;
}

void *sub_24F7AD340(uint64_t a1)
{
  return sub_24F7A9F20(a1, *(void *(**)(void *__return_ptr))(v1 + 16));
}

void sub_24F7AD364(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_24F8019CC(a1, *(void (**)(uint64_t *__return_ptr))(v2 + 16), *(void (**)(uint64_t))(v2 + 32), a2);
}

uint64_t sub_24F7AD384(uint64_t a1)
{
  return sub_24F7A8FF8(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_24F7AD3A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5 < 0)
  {
    return swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    return sub_24F77835C(a3);
  }
}

uint64_t sub_24F7AD3F8()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_24F7AD430()
{
  return sub_24F801A74();
}

uint64_t sub_24F7AD450(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  sub_24F77EDB0();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_24F78C440(v2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_24F78C440(v4);
  sub_24F78C440(v5);
  return a1;
}

uint64_t sub_24F7AD514(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 112);
  sub_24F77EDB0();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  sub_24F787238(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_24F787238(v3);
  sub_24F787238(v5);
  return a1;
}

uint64_t sub_24F7AD5DC(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 3u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_24F7AD5F4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 104);
  uint64_t v9 = *(void *)(a1 + 176);
  uint64_t v10 = *(void *)(a1 + 192);
  char v6 = *(unsigned char *)(a1 + 56);
  sub_24F7AD5DC(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  sub_24F7AD3A0(v2, v3, v4, v5, v6);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  sub_24F787238(v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_24F787238(v9);
  sub_24F787238(v10);
  return a1;
}

uint64_t sub_24F7AD710(uint64_t a1)
{
  int v2 = *(unsigned __int16 *)(a1 + 160);
  uint64_t result = a1 + 160;
  int v3 = v2 | (*(unsigned __int8 *)(result + 2) << 16);
  uint64_t v4 = *(void *)(result - 56) & 1;
  *(void *)(result - 96) &= 1uLL;
  *(void *)(result - 56) = v4;
  *(_WORD *)uint64_t result = v3 & 0x81FF;
  *(unsigned char *)(result + 2) = (v3 & 0x1FFFF | 0x180000u) >> 16;
  return result;
}

uint64_t sub_24F7AD754(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 104) & 1;
  __int16 v2 = *(_WORD *)(result + 160) & 0x81FF | 0x4000;
  *(void *)(result + 64) &= 1uLL;
  *(void *)(result + 104) = v1;
  *(_WORD *)(result + 160) = v2;
  return result;
}

uint64_t sub_24F7AD780(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_24F7AD7DC()
{
  sub_24F77FB24(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72));
  sub_24F7AD880(*(void *)(v0 + 184), *(void *)(v0 + 192), *(void *)(v0 + 200), *(void *)(v0 + 208), *(void *)(v0 + 216), *(void *)(v0 + 224), *(void *)(v0 + 232), *(void *)(v0 + 240), *(void *)(v0 + 248), *(void *)(v0 + 256), *(void *)(v0 + 264), *(void *)(v0 + 272), *(void *)(v0 + 280), *(void *)(v0 + 288), *(void *)(v0 + 296), *(void *)(v0 + 304), *(void *)(v0 + 312), *(void *)(v0 + 320), *(void *)(v0 + 328),
    *(void *)(v0 + 336),
    *(_WORD *)(v0 + 344));
  return swift_deallocObject();
}

uint64_t sub_24F7AD880(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unsigned __int16 a21)
{
  int v22 = (a21 >> 13) & 3;
  if (v22 == 2)
  {
LABEL_4:
    return swift_bridgeObjectRelease();
  }
  if (v22 != 1)
  {
    if (v22) {
      return result;
    }
    goto LABEL_4;
  }
  __int16 v23 = a21 & 0x9FFF;
  return sub_24F79138C(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           v23);
}

uint64_t sub_24F7AD91C(uint64_t a1)
{
  int v2 = *(unsigned __int16 *)(a1 + 160);
  uint64_t result = a1 + 160;
  int v3 = v2 | (*(unsigned __int8 *)(result + 2) << 16);
  uint64_t v4 = *(void *)(result - 56) & 1;
  *(void *)(result - 96) &= 1uLL;
  *(void *)(result - 56) = v4;
  *(_WORD *)uint64_t result = v3 & 0x81FF;
  *(unsigned char *)(result + 2) = (v3 & 0x1FFFF | 0x580000u) >> 16;
  return result;
}

uint64_t sub_24F7AD964(uint64_t a1)
{
  uint64_t v17 = *(void *)(a1 + 32);
  uint64_t v18 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v16 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v5 = *(void *)(a1 + 72);
  uint64_t v6 = *(void *)(a1 + 80);
  long long v14 = *(_OWORD *)(a1 + 104);
  long long v15 = *(_OWORD *)(a1 + 88);
  long long v12 = *(_OWORD *)(a1 + 136);
  long long v13 = *(_OWORD *)(a1 + 120);
  long long v11 = *(_OWORD *)(a1 + 152);
  uint64_t v7 = *(void *)(a1 + 168);
  uint64_t v8 = *(void *)(a1 + 176);
  __int16 v9 = *(_WORD *)(a1 + 184);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_24F79138C(v18, v17, v16, v2, v3, v4, v5, v6, v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v11, *((uint64_t *)&v11 + 1), v7,
    v8,
    v9);
  return a1;
}

uint64_t sub_24F7ADA50(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v17 = *(void *)(a1 + 16);
  uint64_t v18 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  long long v15 = *(_OWORD *)(a1 + 88);
  long long v16 = *(_OWORD *)(a1 + 72);
  long long v13 = *(_OWORD *)(a1 + 120);
  long long v14 = *(_OWORD *)(a1 + 104);
  long long v12 = *(_OWORD *)(a1 + 136);
  uint64_t v9 = *(void *)(a1 + 152);
  uint64_t v8 = *(void *)(a1 + 160);
  __int16 v10 = *(_WORD *)(a1 + 168);
  swift_bridgeObjectRetain();
  sub_24F7958C8(v18, v17, v2, v3, v4, v5, v6, v7, v16, *((uint64_t *)&v16 + 1), v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v9,
    v8,
    v10);
  return a1;
}

uint64_t sub_24F7ADB30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24F781274(&qword_269A2A300);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_24F7ADB98(uint64_t a1)
{
  if ((*(void *)(a1 + 72) >> 1) > 0x80000000) {
    return -(*(void *)(a1 + 72) >> 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_24F7ADBB0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v17 = *(void *)(a1 + 16);
  uint64_t v18 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  long long v15 = *(_OWORD *)(a1 + 88);
  long long v16 = *(_OWORD *)(a1 + 72);
  long long v13 = *(_OWORD *)(a1 + 120);
  long long v14 = *(_OWORD *)(a1 + 104);
  long long v12 = *(_OWORD *)(a1 + 136);
  uint64_t v9 = *(void *)(a1 + 152);
  uint64_t v8 = *(void *)(a1 + 160);
  __int16 v10 = *(_WORD *)(a1 + 168);
  swift_bridgeObjectRelease();
  sub_24F79138C(v18, v17, v2, v3, v4, v5, v6, v7, v16, *((uint64_t *)&v16 + 1), v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v9,
    v8,
    v10);
  return a1;
}

uint64_t sub_24F7ADC90(uint64_t a1)
{
  sub_24F7ADD04(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(_WORD *)(a1 + 168));
  return a1;
}

void sub_24F7ADD04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,__int16 a22)
{
  BOOL v22 = a10 >> 1 != 0xFFFFFFFF || a15 > 1;
  if (v22 || (a22 & 0xFE00) != 0)
  {
    swift_bridgeObjectRelease();
    sub_24F79138C(a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22);
  }
}

unint64_t sub_24F7ADE10()
{
  unint64_t result = qword_26B1F5510;
  if (!qword_26B1F5510)
  {
    sub_24F7688B8(&qword_26B1F7348);
    sub_24F79076C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B1F5510);
  }
  return result;
}

uint64_t sub_24F7ADE84(uint64_t a1)
{
  int v2 = *(unsigned __int16 *)(a1 + 160);
  uint64_t result = a1 + 160;
  int v3 = v2 | (*(unsigned __int8 *)(result + 2) << 16);
  uint64_t v4 = *(void *)(result - 56) & 1;
  *(void *)(result - 96) &= 1uLL;
  *(void *)(result - 56) = v4;
  *(_WORD *)uint64_t result = v3 & 0x81FF;
  *(unsigned char *)(result + 2) = (v3 & 0x1FFFF | 0x80000u) >> 16;
  return result;
}

uint64_t sub_24F7ADECC@<X0>(void *a1@<X8>)
{
  return sub_24F801AA8((const void *)(v1 + 16), a1);
}

uint64_t sub_24F7ADEF0()
{
  sub_24F77FB24(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72));
  return swift_deallocObject();
}

uint64_t sub_24F7ADF40()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24F7ADF80(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 88);
  uint64_t v5 = *(void *)(a1 + 176);
  uint64_t v4 = *(void *)(a1 + 160);
  sub_24F799140(*(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_24F78C440(v2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_24F78C440(v4);
  sub_24F78C440(v5);
  return a1;
}

uint64_t sub_24F7AE06C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 104);
  uint64_t v9 = *(void *)(a1 + 176);
  uint64_t v10 = *(void *)(a1 + 192);
  char v6 = *(unsigned char *)(a1 + 56);
  swift_bridgeObjectRelease();
  sub_24F7AD3A0(v2, v3, v4, v5, v6);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  sub_24F787238(v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_24F787238(v9);
  sub_24F787238(v10);
  return a1;
}

uint64_t sub_24F7AE180(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 88);
  uint64_t v4 = *(void *)(a1 + 160);
  uint64_t v5 = *(void *)(a1 + 176);
  sub_24F7AD3A0(*(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  sub_24F787238(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_24F787238(v4);
  sub_24F787238(v5);
  return a1;
}

uint64_t sub_24F7AE26C()
{
  return sub_24F7AD430();
}

void sub_24F7AE284(uint64_t a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_24F7AE29C(uint64_t a1)
{
  return sub_24F7AD274(a1);
}

uint64_t sub_24F7AE2D8@<X0>(void *a1@<X8>)
{
  return sub_24F7ADECC(a1);
}

void *sub_24F7AE2F0(uint64_t a1)
{
  return sub_24F7AD340(a1);
}

uint64_t sub_24F7AE308(uint64_t a1)
{
  return sub_24F7AD384(a1);
}

uint64_t sub_24F7AE320@<X0>(uint64_t (*a1)(void)@<X1>, uint64_t *a2@<X8>)
{
  return sub_24F7AC0B4(a1, a2);
}

void *sub_24F7AE338()
{
  sub_24F77DD80();
  uint64_t WitnessTable = swift_getWitnessTable();
  return sub_24F77FB64(WitnessTable);
}

void *FetchRequest.databaseRegion(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t result = (*(void *(**)(void *__return_ptr, uint64_t, void, uint64_t))(a3 + 32))(v9, a1, 0, a2);
  if (!v4)
  {
    uint64_t v7 = v9[0];
    swift_retain();
    sub_24F7AD1E4((uint64_t)v9);
    swift_beginAccess();
    uint64_t v8 = *(void *)(v7 + 32);
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_release();
    *a4 = v8;
  }
  return result;
}

uint64_t PreparedRequest.statement.getter()
{
  return swift_retain();
}

uint64_t PreparedRequest.statement.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  void *v1 = a1;
  return result;
}

uint64_t (*PreparedRequest.statement.modify())(void)
{
  return nullsub_1;
}

uint64_t PreparedRequest.adapter.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_24F7786CC(v1 + 8, a1);
}

uint64_t PreparedRequest.adapter.setter(uint64_t a1)
{
  return sub_24F7AC1D0(a1, v1 + 8);
}

uint64_t (*PreparedRequest.adapter.modify())(void)
{
  return nullsub_1;
}

uint64_t FetchRequest.adapted(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v11 + 16))(v10, v4);
  sub_24F7AE598((uint64_t)v10, a1, a2, a3, a4);
  return swift_retain();
}

uint64_t sub_24F7AE598@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5, a1, a4);
  uint64_t result = type metadata accessor for AdaptedFetchRequest();
  uint64_t v9 = (void *)(a5 + *(int *)(result + 36));
  *uint64_t v9 = a2;
  v9[1] = a3;
  return result;
}

uint64_t AdaptedFetchRequest.sqlSubquery.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 24) + 16) + 16))(*(void *)(a1 + 16));
}

uint64_t AdaptedFetchRequest.fetchCount(_:)()
{
  sub_24F77E688();
  return v0();
}

uint64_t AdaptedFetchRequest.makePreparedRequest(_:forSingleResult:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  sub_24F773980();
  uint64_t result = v8();
  if (!v4)
  {
    sub_24F7786CC(a3 + 8, (uint64_t)&v14);
    if (v15)
    {
      sub_24F794DE0(&v14, (uint64_t)v17);
      sub_24F775458((uint64_t)v17, (uint64_t)v13);
      (*(void (**)(long long *__return_ptr, uint64_t))(v3 + *(int *)(a2 + 36)))(v12, a1);
      _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v17);
      long long v15 = &unk_2700FFBA0;
      long long v16 = &off_2700FFB70;
      uint64_t v10 = swift_allocObject();
      *(void *)&long long v14 = v10;
      sub_24F794DE0(v13, v10 + 16);
      sub_24F794DE0(v12, v10 + 56);
      uint64_t v11 = &v14;
    }
    else
    {
      sub_24F778734((uint64_t)&v14);
      (*(void (**)(void *__return_ptr, uint64_t))(v3 + *(int *)(a2 + 36)))(v17, a1);
      uint64_t v11 = (long long *)v17;
    }
    return sub_24F7AC1D0((uint64_t)v11, a3 + 8);
  }
  return result;
}

uint64_t sub_24F7AE7C8()
{
  _s12GRDBInternal13DatabaseEventVwxx_0(v0 + 16);
  _s12GRDBInternal13DatabaseEventVwxx_0(v0 + 56);
  return swift_deallocObject();
}

uint64_t sub_24F7AE808@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return AdaptedFetchRequest.makePreparedRequest(_:forSingleResult:)(a1, a2, a3);
}

uint64_t sub_24F7AE820()
{
  return AdaptedFetchRequest.fetchCount(_:)();
}

void *sub_24F7AE83C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return FetchRequest.databaseRegion(_:)(a1, a2, WitnessTable, a3);
}

uint64_t AnyFetchRequest.asRequest<A>(of:)@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return swift_retain();
}

uint64_t AnyFetchRequest.sqlSubquery.getter()
{
  sub_24F77F33C();
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t AnyFetchRequest.fetchCount(_:)()
{
  sub_24F77F33C();
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t AnyFetchRequest.makePreparedRequest(_:forSingleResult:)()
{
  sub_24F77F33C();
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t sub_24F7AE960()
{
  return AnyFetchRequest.makePreparedRequest(_:forSingleResult:)();
}

uint64_t sub_24F7AE978()
{
  return AnyFetchRequest.fetchCount(_:)();
}

void *sub_24F7AE994@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return FetchRequest.databaseRegion(_:)(a1, a2, WitnessTable, a3);
}

uint64_t AnyFetchRequest.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for ConcreteFetchRequestEraser();
  uint64_t result = sub_24F7AEA5C(a1);
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for ConcreteFetchRequestEraser()
{
  return sub_24F777DE0();
}

uint64_t sub_24F7AEA5C(uint64_t a1)
{
  return sub_24F7AF8D8(a1);
}

uint64_t dispatch thunk of FetchRequest.makePreparedRequest(_:forSingleResult:)()
{
  sub_24F773980();
  return v0();
}

uint64_t dispatch thunk of FetchRequest.fetchCount(_:)()
{
  sub_24F77E688();
  return v0();
}

uint64_t destroy for PreparedRequest(uint64_t a1)
{
  uint64_t result = swift_release();
  if (*(void *)(a1 + 32)) {
    uint64_t result = _s12GRDBInternal13DatabaseEventVwxx_0(a1 + 8);
  }
  if (*(void *)(a1 + 48))
  {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for PreparedRequest(uint64_t a1, void *a2)
{
  *(void *)a1 = *a2;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  uint64_t v5 = a2 + 1;
  uint64_t v6 = a2[4];
  swift_retain();
  if (v6)
  {
    uint64_t v7 = a2[5];
    *(void *)(a1 + 32) = v6;
    *(void *)(a1 + 40) = v7;
    (**(void (***)(uint64_t, void *, uint64_t))(v6 - 8))(a1 + 8, v5, v6);
  }
  else
  {
    long long v8 = *((_OWORD *)v5 + 1);
    *uint64_t v4 = *(_OWORD *)v5;
    *(_OWORD *)(a1 + 24) = v8;
    *(void *)(a1 + 40) = v5[4];
  }
  uint64_t v9 = a2[6];
  if (v9)
  {
    uint64_t v10 = a2[7];
    *(void *)(a1 + 48) = v9;
    *(void *)(a1 + 56) = v10;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
  }
  return a1;
}

uint64_t assignWithCopy for PreparedRequest(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 32);
  if (*(void *)(a1 + 32))
  {
    if (v4)
    {
      sub_24F7A2320((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
      goto LABEL_8;
    }
    _s12GRDBInternal13DatabaseEventVwxx_0(a1 + 8);
  }
  else if (v4)
  {
    *(void *)(a1 + 32) = v4;
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 8, a2 + 8);
    goto LABEL_8;
  }
  long long v5 = *(_OWORD *)(a2 + 8);
  long long v6 = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 8) = v5;
  *(_OWORD *)(a1 + 24) = v6;
LABEL_8:
  uint64_t v7 = *(void *)(a2 + 48);
  if (!*(void *)(a1 + 48))
  {
    if (v7)
    {
      uint64_t v9 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = v7;
      *(void *)(a1 + 56) = v9;
      swift_retain();
      return a1;
    }
LABEL_14:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    return a1;
  }
  if (!v7)
  {
    swift_release();
    goto LABEL_14;
  }
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v8;
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for SchemaInfo.SchemaObject(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for PreparedRequest(uint64_t a1, void *a2)
{
  long long v4 = a2 + 1;
  *(void *)a1 = *a2;
  swift_release();
  if (*(void *)(a1 + 32)) {
    _s12GRDBInternal13DatabaseEventVwxx_0(a1 + 8);
  }
  long long v5 = *((_OWORD *)v4 + 1);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)v4;
  *(_OWORD *)(a1 + 24) = v5;
  *(void *)(a1 + 40) = v4[4];
  uint64_t v6 = a2[6];
  if (!*(void *)(a1 + 48))
  {
    if (v6)
    {
      uint64_t v8 = a2[7];
      *(void *)(a1 + 48) = v6;
      *(void *)(a1 + 56) = v8;
      return a1;
    }
LABEL_9:
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    return a1;
  }
  if (!v6)
  {
    swift_release();
    goto LABEL_9;
  }
  uint64_t v7 = a2[7];
  *(void *)(a1 + 48) = v6;
  *(void *)(a1 + 56) = v7;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for PreparedRequest(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 64))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PreparedRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PreparedRequest()
{
  return &type metadata for PreparedRequest;
}

uint64_t sub_24F7AEE88()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_24F7AEF24(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  long long v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    *long long v4 = *a2;
    long long v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v10 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v11 = v10[1];
    long long v12 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *long long v12 = *v10;
    v12[1] = v11;
  }
  swift_retain();
  return v4;
}

uint64_t sub_24F7AF01C(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  return swift_release();
}

uint64_t sub_24F7AF08C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *int v7 = *v8;
  v7[1] = v9;
  swift_retain();
  return a1;
}

uint64_t sub_24F7AF10C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *int v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_24F7AF198(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  *(_OWORD *)((*(void *)(v5 + 32) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v5 + 32) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_24F7AF214(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  *(_OWORD *)((*(void *)(v5 + 24) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v5 + 24) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t sub_24F7AF298(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(unsigned int *)(*(void *)(v4 - 8) + 84);
  uint64_t v6 = *(void *)(*(void *)(v4 - 8) + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(*(void *)(v4 - 8) + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x24F7AF3D4);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return sub_24F777048((uint64_t)a1, v5, v4);
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void sub_24F7AF3E8(char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 + 16);
  uint64_t v7 = *(unsigned int *)(*(void *)(v6 - 8) + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(*(void *)(v6 - 8) + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(v6 - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x24F7AF5B8);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          unint64_t v17 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v18 = a2 ^ 0x80000000;
            v17[1] = 0;
          }
          else
          {
            uint64_t v18 = (a2 - 1);
          }
          *unint64_t v17 = v18;
        }
        else
        {
          sub_24F7771BC((uint64_t)a1, a2, v7, v6);
        }
      }
      return;
  }
}

uint64_t type metadata accessor for AdaptedFetchRequest()
{
  return sub_24F777DE0();
}

uint64_t type metadata accessor for AnyFetchRequest()
{
  return sub_24F777DE0();
}

void sub_24F7AF610()
{
}

void sub_24F7AF66C()
{
}

void sub_24F7AF6C8()
{
}

uint64_t sub_24F7AF724()
{
  return MEMORY[0x270FA0228](v0, 16, 7);
}

uint64_t type metadata accessor for FetchRequestEraser()
{
  return self;
}

uint64_t sub_24F7AF758()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_24F7AF7EC()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88))();
}

uint64_t sub_24F7AF830()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t sub_24F7AF874()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80))();
}

void *sub_24F7AF8B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return FetchRequest.databaseRegion(_:)(a1, a2, (uint64_t)&off_26BB216C0, a3);
}

uint64_t sub_24F7AF8D8(uint64_t a1)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v1 + 112) - 8) + 32))(v1 + *(void *)(*(void *)v1 + 128), a1);
  return v1;
}

uint64_t sub_24F7AF94C()
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(*(void *)v0 + 120) + 16) + 16))(*(void *)(*(void *)v0 + 112));
}

uint64_t sub_24F7AF9C8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(*(void *)v1 + 120) + 40))(a1, *(void *)(*(void *)v1 + 112));
}

uint64_t sub_24F7AFA40(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(*(void *)v2 + 120) + 32))(a1, a2, *(void *)(*(void *)v2 + 112));
}

uint64_t sub_24F7AFAB4()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 112) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 128));
}

uint64_t sub_24F7AFB0C()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 112) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 128));
  return v0;
}

uint64_t sub_24F7AFB7C()
{
  uint64_t v0 = sub_24F7AFB0C();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x270FA0228](v0, v1, v2);
}

void *sub_24F7AFBD0()
{
  sub_24F77DD80();
  uint64_t WitnessTable = swift_getWitnessTable();
  return sub_24F77FB64(WitnessTable);
}

uint64_t RowKey.hash(into:)()
{
  switch(*(unsigned char *)(v0 + 16))
  {
    case 1:
      sub_24F8CFF40();
      uint64_t result = sub_24F8CFF40();
      break;
    default:
      sub_24F8CFF40();
      uint64_t result = sub_24F8CEE50();
      break;
  }
  return result;
}

uint64_t static RowKey.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  unsigned __int8 v4 = *(unsigned char *)(a1 + 16);
  uint64_t v5 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  int v7 = *(unsigned __int8 *)(a2 + 16);
  switch(v4)
  {
    case 1u:
      if (v7 != 1) {
        goto LABEL_23;
      }
      uint64_t v10 = sub_24F782E00(*(void *)a1, v3, 1u);
      sub_24F7AFED4(v10, v11, 1u);
      char v9 = v2 == v5;
      return v9 & 1;
    case 2u:
      if (v7 != 2) {
        goto LABEL_22;
      }
      if (v2 == v5 && v3 == v6) {
        char v9 = 1;
      }
      else {
        char v9 = sub_24F77DD94();
      }
      sub_24F7AFEB8(v5, v6, 2u);
      sub_24F7AFEB8(v2, v3, 2u);
      uint64_t v16 = sub_24F782E00(v2, v3, 2u);
      unsigned __int8 v18 = 2;
      goto LABEL_30;
    case 3u:
      if (v7 != 3) {
        goto LABEL_22;
      }
      if (v2 == v5 && v3 == v6) {
        char v9 = 1;
      }
      else {
        char v9 = sub_24F77DD94();
      }
      sub_24F7AFEB8(v5, v6, 3u);
      sub_24F7AFEB8(v2, v3, 3u);
      uint64_t v16 = sub_24F782E00(v2, v3, 3u);
      unsigned __int8 v18 = 3;
      goto LABEL_30;
    default:
      if (*(unsigned char *)(a2 + 16))
      {
LABEL_22:
        swift_bridgeObjectRetain();
LABEL_23:
        sub_24F7AFEB8(v5, v6, v7);
        uint64_t v14 = sub_24F782E00(v2, v3, v4);
        sub_24F7AFED4(v14, v15, v7);
        char v9 = 0;
      }
      else
      {
        if (v2 == v5 && v3 == v6) {
          char v9 = 1;
        }
        else {
          char v9 = sub_24F77DD94();
        }
        sub_24F7AFEB8(v5, v6, 0);
        sub_24F7AFEB8(v2, v3, 0);
        uint64_t v16 = sub_24F782E00(v2, v3, 0);
        unsigned __int8 v18 = 0;
LABEL_30:
        sub_24F7AFED4(v16, v17, v18);
      }
      return v9 & 1;
  }
}

uint64_t sub_24F7AFEB8(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 3u && a3 != 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_24F7AFED4(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 3u && a3 != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t RowKey.hashValue.getter()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 16);
  sub_24F8CFF30();
  switch(v1)
  {
    case 1:
      sub_24F8CFF40();
      sub_24F8CFF40();
      break;
    default:
      sub_24F8CFF40();
      sub_24F8CEE50();
      break;
  }
  return sub_24F8CFF80();
}

uint64_t sub_24F7AFFC4()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 16);
  sub_24F8CFF30();
  switch(v1)
  {
    case 1:
      sub_24F8CFF40();
      sub_24F8CFF40();
      break;
    default:
      sub_24F8CFF40();
      sub_24F8CEE50();
      break;
  }
  return sub_24F8CFF80();
}

uint64_t RowDecodingError.Context.debugDescription.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_24F7B00C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(unsigned __int8 *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 40);
  uint64_t v14 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v13 = *(void *)(a2 + 56);
  swift_retain();
  sub_24F7B0E54(v4, v5, v6);
  swift_bridgeObjectRetain();
  sub_24F777E70(v8);
  sub_24F8CF7D0();
  swift_bridgeObjectRelease();
  sub_24F8D0020();
  sub_24F8CEEB0();
  swift_bridgeObjectRelease();
  sub_24F8CEEB0();
  DatabaseValue.description.getter();
  sub_24F8CEEB0();
  swift_bridgeObjectRelease();
  uint64_t v9 = swift_retain();
  uint64_t v10 = sub_24F794AA4(v9);
  swift_release();
  sub_24F7B0E54(v4, v5, v6);
  swift_bridgeObjectRetain();
  sub_24F777E70(v8);
  swift_release();
  sub_24F7B0E68(v4, v5, v6);
  swift_bridgeObjectRelease();
  uint64_t result = sub_24F77835C(v8);
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = 0xD000000000000011;
  *(void *)(a3 + 16) = 0x800000024F8D1820;
  *(void *)(a3 + 24) = v10;
  *(void *)(a3 + 32) = v4;
  *(void *)(a3 + 40) = v5;
  *(void *)(a3 + 48) = v6;
  *(void *)(a3 + 56) = v14;
  *(void *)(a3 + 64) = v7;
  *(void *)(a3 + 72) = v8;
  *(void *)(a3 + 88) = 0;
  *(void *)(a3 + 96) = 0;
  *(void *)(a3 + 80) = v13;
  *(unsigned char *)(a3 + 104) = 1;
  return result;
}

uint64_t static RowDecodingError.valueMismatch(_:sqliteStatement:index:context:)@<X0>(uint64_t a1@<X0>, sqlite3_stmt *a2@<X1>, int a3@<W2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  char v7 = *((unsigned char *)a4 + 24);
  uint64_t v15 = *a4;
  long long v16 = *(_OWORD *)(a4 + 1);
  char v17 = v7;
  long long v8 = *((_OWORD *)a4 + 3);
  long long v18 = *((_OWORD *)a4 + 2);
  long long v19 = v8;
  sub_24F76B11C(a2, a3, (uint64_t)v13);
  uint64_t v9 = v13[0];
  unint64_t v10 = v13[1];
  char v11 = v14;
  sub_24F7B00C4(a1, (uint64_t)&v15, a5);
  return sub_24F781F10(v9, v10, v11);
}

#error "24F7B0398: call analysis failed (funcsize=47)"

uint64_t static RowDecodingError.columnNotFound(_:context:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *(void *)(a3 + 8);
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(unsigned __int8 *)(a3 + 24);
  uint64_t v8 = *(void *)(a3 + 40);
  uint64_t v15 = *(void *)(a3 + 32);
  uint64_t v9 = *(void *)(a3 + 48);
  uint64_t v10 = *(void *)(a3 + 56);
  swift_retain();
  sub_24F7B0E54(v5, v6, v7);
  swift_bridgeObjectRetain();
  sub_24F777E70(v9);
  sub_24F8CF7D0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_24F8CEE10();
  sub_24F8CEEB0();
  swift_bridgeObjectRelease();
  uint64_t v11 = swift_retain();
  uint64_t v12 = sub_24F794AA4(v11);
  swift_release();
  sub_24F7B0E54(v5, v6, v7);
  swift_bridgeObjectRetain();
  sub_24F777E70(v9);
  swift_release();
  sub_24F7B0E68(v5, v6, v7);
  swift_bridgeObjectRelease();
  sub_24F77835C(v9);
  *(void *)a4 = a1;
  *(void *)(a4 + 8) = a2;
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = 0xD000000000000012;
  *(void *)(a4 + 32) = 0x800000024F8D1800;
  *(void *)(a4 + 40) = v12;
  *(void *)(a4 + 48) = v5;
  *(void *)(a4 + 56) = v6;
  *(void *)(a4 + 64) = v7;
  *(void *)(a4 + 72) = v15;
  *(void *)(a4 + 80) = v8;
  *(void *)(a4 + 88) = v9;
  *(void *)(a4 + 96) = v10;
  *(unsigned char *)(a4 + 104) = 0;
  return swift_bridgeObjectRetain();
}

uint64_t RowDecodingContext.init(row:key:)@<X0>(void *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  long long v20 = *a2;
  char v5 = *((unsigned char *)a2 + 16);
  if (a1[7])
  {
    uint64_t v6 = a1[5];
    uint64_t v7 = a1[6];
    sub_24F7811D0(a1 + 2, v6);
    uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 112);
    swift_retain();
    uint64_t v9 = v8(a1, v6, v7);
    uint64_t v10 = (sqlite3_stmt *)Statement.sql.getter();
    uint64_t v12 = v11;
    swift_release();
    Statement.arguments.getter(&v21);
    uint64_t result = swift_release();
    long long v14 = v21;
LABEL_10:
    *(void *)a3 = v9;
    *(_OWORD *)(a3 + 8) = v20;
    *(unsigned char *)(a3 + 24) = v5;
    *(void *)(a3 + 32) = v10;
    *(void *)(a3 + 40) = v12;
    *(_OWORD *)(a3 + 48) = v14;
    return result;
  }
  uint64_t v10 = (sqlite3_stmt *)a1[8];
  uint64_t v15 = a1[5];
  uint64_t v16 = a1[6];
  sub_24F7811D0(a1 + 2, v15);
  uint64_t v9 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 112))(a1, v15, v16);
  if (!v10)
  {
    uint64_t result = swift_release();
    uint64_t v12 = 0;
LABEL_9:
    long long v14 = 0uLL;
    goto LABEL_10;
  }
  uint64_t result = (uint64_t)sqlite3_sql(v10);
  if (result)
  {
    *(void *)&long long v21 = sub_24F8CEED0();
    *((void *)&v21 + 1) = v17;
    if (qword_26B1F5580 != -1) {
      swift_once();
    }
    uint64_t v18 = sub_24F8CE660();
    sub_24F79F3A0(v18, (uint64_t)qword_26B1FAB00);
    sub_24F7B0E7C();
    uint64_t v10 = (sqlite3_stmt *)sub_24F8CF690();
    uint64_t v12 = v19;
    swift_release();
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t RowDecodingError.description.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v5 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 64);
  uint64_t v6 = *(void *)(v0 + 72);
  uint64_t v7 = *(void *)(v0 + 80);
  if (*(unsigned char *)(v0 + 104))
  {
    uint64_t v8 = *(void *)(v0 + 8);
    unsigned __int8 v9 = *(void *)(v0 + 48);
    unint64_t v45 = *(void *)(v0 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24F7B0E54(v1, v2, v3);
    swift_bridgeObjectRetain();
    sub_24F777E70(v6);
    uint64_t v46 = v8;
    uint64_t v3 = v1;
  }
  else
  {
    uint64_t v46 = *(void *)(v0 + 24);
    uint64_t v12 = v0 + 88;
    uint64_t v10 = *(void *)(v0 + 88);
    uint64_t v11 = *(void *)(v12 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24F7B0E54(v3, v5, v4);
    swift_bridgeObjectRetain();
    sub_24F777E70(v10);
    unint64_t v45 = v1;
    uint64_t v2 = v5;
    unsigned __int8 v9 = v4;
    uint64_t v4 = v7;
    uint64_t v6 = v10;
    uint64_t v7 = v11;
  }
  type metadata accessor for Row();
  swift_initStackObject();
  swift_bridgeObjectRetain();
  uint64_t v13 = (void *)sub_24F79036C();
  long long v14 = v13;
  uint64_t v15 = MEMORY[0x263F8EE78];
  uint64_t v47 = v13;
  unsigned __int8 v44 = v9;
  if (v9 - 2 >= 2)
  {
    if (v9)
    {
      if (v9 != 1) {
        goto LABEL_20;
      }
      sub_24F7B0D44(0, v3, &v53);
      swift_retain();
      Row.subscript.getter();
      uint64_t v17 = v16;
      uint64_t v19 = v18;
      sub_24F781F10(v50, v51, v52);
      swift_release();
      sub_24F773994();
      uint64_t v53 = v17;
      uint64_t v54 = v19;
      sub_24F8CEE10();
      sub_24F77EDC4();
      swift_bridgeObjectRelease();
      uint64_t v20 = v48;
      unint64_t v21 = v49;
      sub_24F787184();
      uint64_t v15 = v22;
      unint64_t v23 = *(void *)(v22 + 16);
      if (v23 >= *(void *)(v22 + 24) >> 1)
      {
        sub_24F77F34C();
        uint64_t v15 = v39;
      }
      *(void *)(v15 + 16) = v23 + 1;
      uint64_t v24 = v15 + 16 * v23;
      *(void *)(v24 + 32) = v20;
      *(void *)(v24 + 40) = v21;
      sub_24F77BBE4();
      swift_bridgeObjectRelease();
      sub_24F77FB88();
      uint64_t v53 = v3;
      sub_24F8CFAE0();
      sub_24F77EDC4();
      swift_bridgeObjectRelease();
      sub_24F77AD90();
      if (v25)
      {
        sub_24F77F34C();
        uint64_t v15 = v40;
      }
      sub_24F77E69C();
    }
    else
    {
      uint64_t v27 = v13[5];
      uint64_t v26 = v13[6];
      sub_24F7811D0(v13 + 2, v27);
      uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 88);
      sub_24F7AFEB8(v3, v2, 0);
      sub_24F7AFEB8(v3, v2, 0);
      uint64_t v29 = v28(v3, v2, v27, v26);
      if (v30)
      {
        sub_24F781348();
        sub_24F781348();
        uint64_t v15 = MEMORY[0x263F8EE78];
      }
      else
      {
        uint64_t v43 = v29;
        sub_24F773994();
        uint64_t v53 = v3;
        uint64_t v54 = v2;
        sub_24F8CEE10();
        sub_24F77EDC4();
        swift_bridgeObjectRelease();
        sub_24F787184();
        uint64_t v15 = v31;
        if (*(void *)(v31 + 16) >= *(void *)(v31 + 24) >> 1)
        {
          sub_24F77F34C();
          uint64_t v15 = v41;
        }
        sub_24F77E69C();
        sub_24F77BBE4();
        swift_bridgeObjectRelease();
        sub_24F77FB88();
        uint64_t v53 = v43;
        sub_24F8CFAE0();
        sub_24F77EDC4();
        swift_bridgeObjectRelease();
        sub_24F77AD90();
        if (v25)
        {
          sub_24F77F34C();
          uint64_t v15 = v42;
        }
        sub_24F77E69C();
        sub_24F781348();
      }
    }
    long long v14 = v47;
  }
LABEL_20:
  uint64_t v48 = 0x203A776F72;
  unint64_t v49 = 0xE500000000000000;
  Row.description.getter();
  sub_24F77EDC4();
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_24F787184();
    uint64_t v15 = v35;
  }
  sub_24F77AD90();
  if (v25)
  {
    sub_24F77F34C();
    uint64_t v15 = v36;
  }
  sub_24F77E69C();
  if (v4)
  {
    uint64_t v48 = 0x60203A6C7173;
    unint64_t v49 = 0xE600000000000000;
    swift_bridgeObjectRetain();
    sub_24F8CEEB0();
    swift_bridgeObjectRelease();
    sub_24F8CEEB0();
    sub_24F782A14();
    if (v25)
    {
      sub_24F78067C();
      uint64_t v15 = v37;
    }
    *(void *)(v15 + 16) = 0x203A776F72;
    uint64_t v32 = v15 + 16 * (void)v14;
    *(void *)(v32 + 32) = &v48;
    *(void *)(v32 + 40) = 0xE500000000000000;
  }
  if (v6)
  {
    uint64_t v48 = 0x746E656D75677261;
    unint64_t v49 = 0xEB00000000203A73;
    uint64_t v53 = v6;
    uint64_t v54 = v7;
    sub_24F777E70(v6);
    StatementArguments.description.getter();
    sub_24F77EDC4();
    swift_bridgeObjectRelease();
    sub_24F77835C(v6);
    sub_24F782A14();
    if (v25)
    {
      sub_24F78067C();
      uint64_t v15 = v38;
    }
    *(void *)(v15 + 16) = 0x203A776F72;
    uint64_t v33 = v15 + 16 * (void)v14;
    *(void *)(v33 + 32) = &v53;
    *(void *)(v33 + 40) = 0xE500000000000000;
  }
  swift_bridgeObjectRelease();
  sub_24F7B0E68(v3, v2, v44);
  swift_bridgeObjectRelease();
  sub_24F77835C(v6);
  uint64_t v48 = v46;
  unint64_t v49 = v45;
  sub_24F8CEEB0();
  uint64_t v53 = v15;
  sub_24F781274(&qword_26B1F7F48);
  sub_24F7871AC();
  sub_24F8CED30();
  swift_bridgeObjectRelease();
  sub_24F8CEEB0();
  swift_release();
  swift_bridgeObjectRelease();
  return v48;
}

uint64_t sub_24F7B0D44@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = result + a2;
  if (__OFADD__(result, a2))
  {
    __break(1u);
LABEL_6:
    __break(1u);
    return result;
  }
  *a3 = v4;
  if (v4 < 0 || *(void *)(v3 + 72) < v4) {
    goto LABEL_6;
  }
  return result;
}

uint64_t sub_24F7B0D70()
{
  uint64_t v1 = sub_24F794AA4(v0);
  swift_release();
  return v1;
}

uint64_t sub_24F7B0DA4()
{
  uint64_t v0 = sub_24F770218();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_24F7B0E0C(uint64_t a1)
{
  if (a1 < 16) {
    return 0;
  }
  sub_24F8CF7D0();
  return 0;
}

uint64_t sub_24F7B0E54(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 0xFF) {
    return sub_24F7AFEB8(a1, a2, a3);
  }
  return a1;
}

uint64_t sub_24F7B0E68(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 0xFF) {
    return sub_24F7AFED4(a1, a2, a3);
  }
  return a1;
}

unint64_t sub_24F7B0E7C()
{
  unint64_t result = qword_26B1F6F18;
  if (!qword_26B1F6F18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B1F6F18);
  }
  return result;
}

unint64_t sub_24F7B0ECC()
{
  unint64_t result = qword_269A2A830[0];
  if (!qword_269A2A830[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_269A2A830);
  }
  return result;
}

uint64_t destroy for RowKey(uint64_t a1)
{
  return sub_24F7AFED4(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t _s12GRDBInternal6RowKeyOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_24F7AFEB8(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for RowKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_24F7AFEB8(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_24F7AFED4(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for RowKey(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_24F7AFED4(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for Statement.TransactionEffect(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFD && *(unsigned char *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 252;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 3) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Statement.TransactionEffect(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_24F7B109C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_24F7B10A4(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2;
  return result;
}

void type metadata accessor for RowKey()
{
}

uint64_t sub_24F7B10B8(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a14)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24F7B0E54(a5, a6, a7);
    swift_bridgeObjectRetain();
  }
  else
  {
    sub_24F7AFEB8(a1, a2, a3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24F7B0E54(a7, a8, a9);
    swift_bridgeObjectRetain();
    a10 = a12;
  }
  return sub_24F777E70(a10);
}

uint64_t destroy for RowDecodingError(uint64_t a1)
{
  return sub_24F7B11DC(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(_OWORD *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(unsigned char *)(a1 + 104));
}

uint64_t sub_24F7B11DC(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a14)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_24F7B0E68(a5, a6, a7);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_24F7AFED4(a1, a2, a3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_24F7B0E68(a7, a8, a9);
    swift_bridgeObjectRelease();
    a10 = a12;
  }
  return sub_24F77835C(a10);
}

uint64_t initializeWithCopy for RowDecodingError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v13 = *(void *)(a2 + 72);
  uint64_t v14 = *(void *)(a2 + 80);
  uint64_t v15 = *(void *)(a2 + 88);
  uint64_t v16 = *(void *)(a2 + 96);
  char v17 = *(unsigned char *)(a2 + 104);
  sub_24F7B10B8(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16, v17);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v13;
  *(void *)(a1 + 80) = v14;
  *(void *)(a1 + 88) = v15;
  *(void *)(a1 + 96) = v16;
  *(unsigned char *)(a1 + 104) = v17;
  return a1;
}

uint64_t assignWithCopy for RowDecodingError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v25 = *(void *)(a2 + 72);
  uint64_t v26 = *(void *)(a2 + 80);
  uint64_t v27 = *(void *)(a2 + 88);
  uint64_t v28 = *(void *)(a2 + 96);
  char v29 = *(unsigned char *)(a2 + 104);
  sub_24F7B10B8(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v25, v26, v27, v28, v29);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  long long v20 = *(_OWORD *)(a1 + 64);
  long long v21 = *(_OWORD *)(a1 + 80);
  uint64_t v22 = *(void *)(a1 + 96);
  char v23 = *(unsigned char *)(a1 + 104);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v25;
  *(void *)(a1 + 80) = v26;
  *(void *)(a1 + 88) = v27;
  *(void *)(a1 + 96) = v28;
  *(unsigned char *)(a1 + 104) = v29;
  sub_24F7B11DC(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, v23);
  return a1;
}

void *initializeWithTake for RowDecodingError(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x69uLL);
}

uint64_t assignWithTake for RowDecodingError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 96);
  char v4 = *(unsigned char *)(a2 + 104);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  long long v13 = *(_OWORD *)(a1 + 64);
  long long v14 = *(_OWORD *)(a1 + 80);
  uint64_t v15 = *(void *)(a1 + 96);
  char v16 = *(unsigned char *)(a1 + 104);
  long long v17 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v17;
  long long v18 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v18;
  long long v19 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v19;
  *(void *)(a1 + 96) = v3;
  *(unsigned char *)(a1 + 104) = v4;
  sub_24F7B11DC(v5, v7, v6, v8, v9, v10, v11, v12, v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for RowDecodingError(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(unsigned char *)(a1 + 105))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 104);
      if (v3 <= 1) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RowDecodingError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 104) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 105) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 105) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 104) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_24F7B15D8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 104);
}

uint64_t sub_24F7B15E0(uint64_t result, char a2)
{
  *(unsigned char *)(result + 104) = a2 & 1;
  return result;
}

void type metadata accessor for RowDecodingError()
{
}

uint64_t destroy for RowDecodingError.Context(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int v2 = *(unsigned __int8 *)(a1 + 40);
  if (v2 != 255) {
    sub_24F7AFED4(*(void *)(a1 + 24), *(void *)(a1 + 32), v2);
  }
  swift_bridgeObjectRelease();
  uint64_t result = *(void *)(a1 + 64);
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for RowDecodingError.Context(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  int v5 = *(unsigned __int8 *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v5 == 255)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  }
  else
  {
    uint64_t v6 = *(void *)(a2 + 24);
    uint64_t v7 = *(void *)(a2 + 32);
    sub_24F7AFEB8(v6, v7, v5);
    *(void *)(a1 + 24) = v6;
    *(void *)(a1 + 32) = v7;
    *(unsigned char *)(a1 + 40) = v5;
  }
  uint64_t v8 = *(void *)(a2 + 64);
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v9;
  swift_bridgeObjectRetain();
  if (v8)
  {
    uint64_t v10 = *(void *)(a2 + 72);
    *(void *)(a1 + 64) = v8;
    *(void *)(a1 + 72) = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  }
  return a1;
}

uint64_t assignWithCopy for RowDecodingError.Context(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (long long *)(a1 + 24);
  int v5 = (long long *)(a2 + 24);
  int v6 = *(unsigned __int8 *)(a2 + 40);
  if (*(unsigned __int8 *)(a1 + 40) == 255)
  {
    if (v6 == 255)
    {
      long long v15 = *v5;
      *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
      *uint64_t v4 = v15;
    }
    else
    {
      uint64_t v12 = *(void *)(a2 + 24);
      uint64_t v13 = *(void *)(a2 + 32);
      sub_24F7AFEB8(v12, v13, *(unsigned char *)(a2 + 40));
      *(void *)(a1 + 24) = v12;
      *(void *)(a1 + 32) = v13;
      *(unsigned char *)(a1 + 40) = v6;
    }
  }
  else if (v6 == 255)
  {
    sub_24F7B18EC(a1 + 24);
    char v14 = *(unsigned char *)(a2 + 40);
    *uint64_t v4 = *v5;
    *(unsigned char *)(a1 + 40) = v14;
  }
  else
  {
    uint64_t v7 = *(void *)(a2 + 24);
    uint64_t v8 = *(void *)(a2 + 32);
    sub_24F7AFEB8(v7, v8, *(unsigned char *)(a2 + 40));
    uint64_t v9 = *(void *)(a1 + 24);
    uint64_t v10 = *(void *)(a1 + 32);
    *(void *)(a1 + 24) = v7;
    *(void *)(a1 + 32) = v8;
    unsigned __int8 v11 = *(unsigned char *)(a1 + 40);
    *(unsigned char *)(a1 + 40) = v6;
    sub_24F7AFED4(v9, v10, v11);
  }
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void *)(a2 + 64);
  if (!*(void *)(a1 + 64))
  {
    if (v16)
    {
      *(void *)(a1 + 64) = v16;
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_14:
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    return a1;
  }
  if (!v16)
  {
    sub_24F7B191C(a1 + 64);
    goto LABEL_14;
  }
  *(void *)(a1 + 64) = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_24F7B18EC(uint64_t a1)
{
  return a1;
}

uint64_t sub_24F7B191C(uint64_t a1)
{
  return a1;
}

void *initializeWithTake for RowDecodingError.Context(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x50uLL);
}

uint64_t assignWithTake for RowDecodingError.Context(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  int v5 = (_OWORD *)(a2 + 24);
  int v6 = *(unsigned __int8 *)(a1 + 40);
  if (v6 != 255)
  {
    int v7 = *(unsigned __int8 *)(a2 + 40);
    if (v7 != 255)
    {
      uint64_t v8 = *(void *)(a1 + 24);
      uint64_t v9 = *(void *)(a1 + 32);
      *(_OWORD *)(a1 + 24) = *v5;
      *(unsigned char *)(a1 + 40) = v7;
      sub_24F7AFED4(v8, v9, v6);
      goto LABEL_6;
    }
    sub_24F7B18EC(a1 + 24);
  }
  *(_OWORD *)(a1 + 24) = *v5;
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
LABEL_6:
  uint64_t v10 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 64);
  if (!*(void *)(a1 + 64))
  {
LABEL_10:
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    return a1;
  }
  if (!v11)
  {
    sub_24F7B191C(a1 + 64);
    goto LABEL_10;
  }
  *(void *)(a1 + 64) = v11;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RowDecodingError.Context(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 80))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RowDecodingError.Context(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for RowDecodingError.Context()
{
}

uint64_t destroy for RowDecodingContext(uint64_t a1)
{
  swift_release();
  int v2 = *(unsigned __int8 *)(a1 + 24);
  if (v2 != 255) {
    sub_24F7AFED4(*(void *)(a1 + 8), *(void *)(a1 + 16), v2);
  }
  swift_bridgeObjectRelease();
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for RowDecodingContext(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  int v5 = *(unsigned __int8 *)(a2 + 24);
  swift_retain();
  if (v5 == 255)
  {
    *uint64_t v4 = *(_OWORD *)(a2 + 8);
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  }
  else
  {
    uint64_t v6 = *(void *)(a2 + 8);
    uint64_t v7 = *(void *)(a2 + 16);
    sub_24F7AFEB8(v6, v7, v5);
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 16) = v7;
    *(unsigned char *)(a1 + 24) = v5;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v9;
  swift_bridgeObjectRetain();
  if (v8)
  {
    uint64_t v10 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = v8;
    *(void *)(a1 + 56) = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  }
  return a1;
}

uint64_t assignWithCopy for RowDecodingContext(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  uint64_t v4 = (long long *)(a1 + 8);
  int v5 = (long long *)(a2 + 8);
  int v6 = *(unsigned __int8 *)(a2 + 24);
  if (*(unsigned __int8 *)(a1 + 24) == 255)
  {
    if (v6 == 255)
    {
      long long v15 = *v5;
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      *uint64_t v4 = v15;
    }
    else
    {
      uint64_t v12 = *(void *)(a2 + 8);
      uint64_t v13 = *(void *)(a2 + 16);
      sub_24F7AFEB8(v12, v13, *(unsigned char *)(a2 + 24));
      *(void *)(a1 + 8) = v12;
      *(void *)(a1 + 16) = v13;
      *(unsigned char *)(a1 + 24) = v6;
    }
  }
  else if (v6 == 255)
  {
    sub_24F7B18EC(a1 + 8);
    char v14 = *(unsigned char *)(a2 + 24);
    *uint64_t v4 = *v5;
    *(unsigned char *)(a1 + 24) = v14;
  }
  else
  {
    uint64_t v7 = *(void *)(a2 + 8);
    uint64_t v8 = *(void *)(a2 + 16);
    sub_24F7AFEB8(v7, v8, *(unsigned char *)(a2 + 24));
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v10 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v8;
    unsigned __int8 v11 = *(unsigned char *)(a1 + 24);
    *(unsigned char *)(a1 + 24) = v6;
    sub_24F7AFED4(v9, v10, v11);
  }
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void *)(a2 + 48);
  if (!*(void *)(a1 + 48))
  {
    if (v16)
    {
      *(void *)(a1 + 48) = v16;
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_14:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    return a1;
  }
  if (!v16)
  {
    sub_24F7B191C(a1 + 48);
    goto LABEL_14;
  }
  *(void *)(a1 + 48) = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for RowDecodingContext(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  uint64_t v4 = (_OWORD *)(a2 + 8);
  int v5 = *(unsigned __int8 *)(a1 + 24);
  if (v5 != 255)
  {
    int v6 = *(unsigned __int8 *)(a2 + 24);
    if (v6 != 255)
    {
      uint64_t v7 = *(void *)(a1 + 8);
      uint64_t v8 = *(void *)(a1 + 16);
      *(_OWORD *)(a1 + 8) = *v4;
      *(unsigned char *)(a1 + 24) = v6;
      sub_24F7AFED4(v7, v8, v5);
      goto LABEL_6;
    }
    sub_24F7B18EC(a1 + 8);
  }
  *(_OWORD *)(a1 + 8) = *v4;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
LABEL_6:
  uint64_t v9 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 48);
  if (!*(void *)(a1 + 48))
  {
LABEL_10:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    return a1;
  }
  if (!v10)
  {
    sub_24F7B191C(a1 + 48);
    goto LABEL_10;
  }
  *(void *)(a1 + 48) = v10;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  return a1;
}

void type metadata accessor for RowDecodingContext()
{
}

Swift::Int32 __swiftcall String.bind(to:at:)(Swift::OpaquePointer to, Swift::Int32 at)
{
  if (qword_26B1F76D0 != -1) {
    swift_once();
  }
  uint64_t v4 = (void (__cdecl *)(void *))qword_26B1FAB20;
  uint64_t v5 = sub_24F8CEE30();
  Swift::Int32 v6 = sqlite3_bind_text((sqlite3_stmt *)to._rawValue, at, (const char *)(v5 + 32), -1, v4);
  swift_release();
  return v6;
}

uint64_t static Double.fromDatabaseValue(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  if (*(unsigned char *)(a1 + 16) != 1) {
    uint64_t v1 = 0;
  }
  if (*(unsigned char *)(a1 + 16)) {
    return v1;
  }
  else {
    *(double *)&uint64_t result = (double)*(uint64_t *)a1;
  }
  return result;
}

Swift::Bool __swiftcall Bool.init(sqliteStatement:index:)(Swift::OpaquePointer sqliteStatement, Swift::Int32 index)
{
  return sqlite3_column_int64((sqlite3_stmt *)sqliteStatement._rawValue, index) != 0;
}

Swift::Int32 __swiftcall Bool.bind(to:at:)(Swift::OpaquePointer to, Swift::Int32 at)
{
  return sqlite3_bind_int64((sqlite3_stmt *)to._rawValue, at, v2 & 1);
}

BOOL sub_24F7B1FC0@<W0>(Swift::OpaquePointer a1@<X0>, Swift::Int32 a2@<W1>, unsigned char *a3@<X8>)
{
  BOOL result = Bool.init(sqliteStatement:index:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24F7B1FEC(Swift::OpaquePointer to, Swift::Int32 at)
{
  return Bool.bind(to:at:)(to, at);
}

Swift::Int_optional __swiftcall Int.init(sqliteStatement:index:)(Swift::OpaquePointer sqliteStatement, Swift::Int32 index)
{
  sqlite3_int64 v2 = sqlite3_column_int64((sqlite3_stmt *)sqliteStatement._rawValue, index);
  Swift::Bool v3 = 0;
  result.value = v2;
  result.is_nil = v3;
  return result;
}

uint64_t static Int64.fromDatabaseValue(_:)(uint64_t *a1)
{
  uint64_t result = *a1;
  int v3 = *((unsigned __int8 *)a1 + 16);
  if (v3)
  {
    if (v3 != 1 || (*(double *)&result >= -9.22337204e18 ? (BOOL v4 = *(double *)&result < 9.22337204e18) : (BOOL v4 = 0), !v4))
    {
      *(double *)&uint64_t result = COERCE_DOUBLE(sub_24F781364());
      return result;
    }
    if ((~result & 0x7FF0000000000000) != 0)
    {
      if (*(double *)&result > -9.22337204e18)
      {
        *(double *)&uint64_t result = COERCE_DOUBLE(sub_24F7806A0(*(double *)&result));
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_24F7B2080(Swift::OpaquePointer to, Swift::Int32 at)
{
  return Int.bind(to:at:)(to, at);
}

Swift::Int8_optional __swiftcall Int8.init(sqliteStatement:index:)(Swift::OpaquePointer sqliteStatement, Swift::Int32 index)
{
  sqlite3_column_int64((sqlite3_stmt *)sqliteStatement._rawValue, index);
  sub_24F77ADA0();
  __int16 v4 = v3;
  if (!v5) {
    __int16 v4 = 0;
  }
  return (Swift::Int8_optional)(v4 | (v2 << 8));
}

void Int8.databaseValue.getter(uint64_t a1@<X8>)
{
}

void static Int8.fromDatabaseValue(_:)(uint64_t a1)
{
  double v1 = *(double *)a1;
  if (*(unsigned char *)(a1 + 16))
  {
    if (*(unsigned char *)(a1 + 16) != 1 || ((double v3 = sub_24F77EDDC(v1), v5 == v4) ? (v5 = v3 < 9.22337204e18) : (v5 = 0), !v5))
    {
      sub_24F782E1C(0);
      return;
    }
    if ((~v2 & 0x7FF0000000000000) != 0)
    {
      if (v3 > -9.22337204e18)
      {
        *(void *)&double v1 = (uint64_t)v3;
        goto LABEL_11;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return;
  }
LABEL_11:
  if (SLOBYTE(v1) != *(void *)&v1) {
    LOBYTE(v1) = 0;
  }
  sub_24F782E1C(LOBYTE(v1));
}

Swift::Int32 __swiftcall Int8.bind(to:at:)(Swift::OpaquePointer to, Swift::Int32 at)
{
  return sqlite3_bind_int64((sqlite3_stmt *)to._rawValue, at, v2);
}

void sub_24F7B2148(uint64_t a1@<X8>)
{
}

void sub_24F7B2150(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  static Int8.fromDatabaseValue(_:)(a1);
  *a2 = v3;
  a2[1] = v4 & 1;
}

void sub_24F7B2180(sqlite3_stmt *a1@<X0>, int a2@<W1>, unsigned char *a3@<X8>)
{
  sqlite3_column_int64(a1, a2);
  sub_24F77ADA0();
  if (v6) {
    char v7 = v4;
  }
  else {
    char v7 = 0;
  }
  *a3 = v7;
  a3[1] = v5;
}

uint64_t sub_24F7B21B8(Swift::OpaquePointer to, Swift::Int32 at)
{
  return Int8.bind(to:at:)(to, at);
}

Swift::Int16_optional __swiftcall Int16.init(sqliteStatement:index:)(Swift::OpaquePointer sqliteStatement, Swift::Int32 index)
{
  sqlite3_column_int64((sqlite3_stmt *)sqliteStatement._rawValue, index);
  sub_24F77ADA0();
  int v4 = v3;
  if (!v5) {
    int v4 = 0;
  }
  return (Swift::Int16_optional)(v4 | (v2 << 16));
}

void Int16.databaseValue.getter(uint64_t a1@<X8>)
{
}

void static Int16.fromDatabaseValue(_:)(uint64_t a1)
{
  double v1 = *(double *)a1;
  if (*(unsigned char *)(a1 + 16))
  {
    if (*(unsigned char *)(a1 + 16) != 1 || ((double v3 = sub_24F77EDDC(v1), v5 == v4) ? (v5 = v3 < 9.22337204e18) : (v5 = 0), !v5))
    {
      sub_24F770EB8(0);
      return;
    }
    if ((~v2 & 0x7FF0000000000000) != 0)
    {
      if (v3 > -9.22337204e18)
      {
        *(void *)&double v1 = (uint64_t)v3;
        goto LABEL_11;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return;
  }
LABEL_11:
  BOOL v6 = SLOWORD(v1) == *(void *)&v1;
  LODWORD(v1) = LOWORD(v1);
  if (!v6) {
    LODWORD(v1) = 0;
  }
  sub_24F770EB8(SLODWORD(v1));
}

Swift::Int32 __swiftcall Int16.bind(to:at:)(Swift::OpaquePointer to, Swift::Int32 at)
{
  return sqlite3_bind_int64((sqlite3_stmt *)to._rawValue, at, v2);
}

void sub_24F7B2284(uint64_t a1@<X8>)
{
}

void sub_24F7B228C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  static Int16.fromDatabaseValue(_:)(a1);
  *(_WORD *)a2 = v3;
  *(unsigned char *)(a2 + 2) = v4 & 1;
}

void sub_24F7B22BC(sqlite3_stmt *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  sqlite3_column_int64(a1, a2);
  sub_24F77ADA0();
  if (v6) {
    __int16 v7 = v4;
  }
  else {
    __int16 v7 = 0;
  }
  *(_WORD *)a3 = v7;
  *(unsigned char *)(a3 + 2) = v5;
}

uint64_t sub_24F7B22F4(Swift::OpaquePointer to, Swift::Int32 at)
{
  return Int16.bind(to:at:)(to, at);
}

Swift::Int32_optional __swiftcall Int32.init(sqliteStatement:index:)(Swift::OpaquePointer sqliteStatement, Swift::Int32 index)
{
  sqlite3_column_int64((sqlite3_stmt *)sqliteStatement._rawValue, index);
  sub_24F77ADA0();
  uint64_t v4 = v3;
  if (!v5) {
    uint64_t v4 = 0;
  }
  return (Swift::Int32_optional)(v4 | ((unint64_t)v2 << 32));
}

void Int32.databaseValue.getter(uint64_t a1@<X8>)
{
}

void static Int32.fromDatabaseValue(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  if (*(unsigned char *)(a1 + 16))
  {
    if (*(unsigned char *)(a1 + 16) != 1
      || ((double v3 = sub_24F77EDDC(*(double *)&v1), v5 == v4) ? (v5 = v3 < 9.22337204e18) : (v5 = 0), !v5))
    {
      sub_24F77DDB8(0);
      return;
    }
    if ((~v2 & 0x7FF0000000000000) != 0)
    {
      if (v3 > -9.22337204e18)
      {
        uint64_t v1 = (uint64_t)v3;
        goto LABEL_11;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return;
  }
LABEL_11:
  BOOL v6 = (int)v1 == v1;
  uint64_t v1 = v1;
  if (!v6) {
    uint64_t v1 = 0;
  }
  sub_24F77DDB8(v1);
}

Swift::Int32 __swiftcall Int32.bind(to:at:)(Swift::OpaquePointer to, Swift::Int32 at)
{
  return sqlite3_bind_int64((sqlite3_stmt *)to._rawValue, at, v2);
}

void sub_24F7B23C8(uint64_t a1@<X8>)
{
}

void sub_24F7B23D0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  static Int32.fromDatabaseValue(_:)(a1);
  *(_DWORD *)a2 = v3;
  *(unsigned char *)(a2 + 4) = v4 & 1;
}

sqlite3_int64 sub_24F7B2400@<X0>(sqlite3_stmt *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  sqlite3_int64 result = sqlite3_column_int64(a1, a2);
  int v5 = result;
  if ((int)result != result) {
    int v5 = 0;
  }
  *(_DWORD *)a3 = v5;
  *(unsigned char *)(a3 + 4) = (int)result != result;
  return result;
}

uint64_t sub_24F7B243C(Swift::OpaquePointer to, Swift::Int32 at)
{
  return Int32.bind(to:at:)(to, at);
}

uint64_t sub_24F7B2448@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = static Int64.fromDatabaseValue(_:)(a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

Swift::Int64 sub_24F7B2478@<X0>(Swift::OpaquePointer a1@<X0>, Swift::Int32 a2@<W1>, uint64_t a3@<X8>)
{
  Swift::Int64 result = Int64.init(sqliteStatement:index:)(a1, a2);
  *(void *)a3 = result;
  *(unsigned char *)(a3 + 8) = 0;
  return result;
}

Swift::UInt_optional __swiftcall UInt.init(sqliteStatement:index:)(Swift::OpaquePointer sqliteStatement, Swift::Int32 index)
{
  sqlite3_int64 v2 = sqlite3_column_int64((sqlite3_stmt *)sqliteStatement._rawValue, index);
  BOOL v3 = (unint64_t)v2 >> 63;
  Swift::UInt v4 = v2 & ~(v2 >> 63);
  result.is_nil = v3;
  result.value = v4;
  return result;
}

uint64_t sub_24F7B24D4()
{
  return UInt.databaseValue.getter(*v0);
}

uint64_t sub_24F7B24DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = static UInt.fromDatabaseValue(_:)();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

sqlite3_int64 sub_24F7B250C@<X0>(sqlite3_stmt *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  sqlite3_int64 result = sqlite3_column_int64(a1, a2);
  *(void *)a3 = result & ~(result >> 63);
  *(unsigned char *)(a3 + 8) = result < 0;
  return result;
}

uint64_t sub_24F7B2544(Swift::OpaquePointer to, Swift::Int32 at)
{
  return UInt.bind(to:at:)(to, at);
}

Swift::UInt8_optional __swiftcall UInt8.init(sqliteStatement:index:)(Swift::OpaquePointer sqliteStatement, Swift::Int32 index)
{
  unint64_t v2 = sqlite3_column_int64((sqlite3_stmt *)sqliteStatement._rawValue, index);
  __int16 v3 = v2;
  if (v2 > 0xFF) {
    __int16 v3 = 0;
  }
  return (Swift::UInt8_optional)(v3 | ((v2 > 0xFF) << 8));
}

void UInt8.databaseValue.getter(uint64_t a1@<X8>)
{
}

void static UInt8.fromDatabaseValue(_:)(uint64_t a1)
{
  unint64_t v1 = *(void *)a1;
  if (*(unsigned char *)(a1 + 16))
  {
    if (*(unsigned char *)(a1 + 16) != 1
      || ((double v3 = sub_24F77EDDC(*(double *)&v1), v5 == v4) ? (v5 = v3 < 9.22337204e18) : (v5 = 0), !v5))
    {
      sub_24F782E1C(0);
      return;
    }
    if ((~v2 & 0x7FF0000000000000) != 0)
    {
      if (v3 > -9.22337204e18)
      {
        unint64_t v1 = (uint64_t)v3;
        goto LABEL_11;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return;
  }
LABEL_11:
  if (v1 > 0xFF) {
    LOBYTE(v1) = 0;
  }
  sub_24F782E1C(v1);
}

Swift::Int32 __swiftcall UInt8.bind(to:at:)(Swift::OpaquePointer to, Swift::Int32 at)
{
  return sqlite3_bind_int64((sqlite3_stmt *)to._rawValue, at, v2);
}

void sub_24F7B2608(uint64_t a1@<X8>)
{
}

void sub_24F7B2610(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  static UInt8.fromDatabaseValue(_:)(a1);
  *a2 = v3;
  a2[1] = v4 & 1;
}

unint64_t sub_24F7B2640@<X0>(sqlite3_stmt *a1@<X0>, int a2@<W1>, unsigned char *a3@<X8>)
{
  unint64_t result = sqlite3_column_int64(a1, a2);
  if (result <= 0xFF) {
    char v5 = result;
  }
  else {
    char v5 = 0;
  }
  *a3 = v5;
  a3[1] = result > 0xFF;
  return result;
}

uint64_t sub_24F7B2678(Swift::OpaquePointer to, Swift::Int32 at)
{
  return UInt8.bind(to:at:)(to, at);
}

Swift::UInt16_optional __swiftcall UInt16.init(sqliteStatement:index:)(Swift::OpaquePointer sqliteStatement, Swift::Int32 index)
{
  sqlite3_column_int64((sqlite3_stmt *)sqliteStatement._rawValue, index);
  sub_24F77BC04();
  int v4 = v3;
  if (!v5) {
    int v4 = 0;
  }
  return (Swift::UInt16_optional)(v4 | (v2 << 16));
}

void UInt16.databaseValue.getter(uint64_t a1@<X8>)
{
}

void static UInt16.fromDatabaseValue(_:)(uint64_t a1)
{
  double v1 = *(double *)a1;
  if (*(unsigned char *)(a1 + 16))
  {
    if (*(unsigned char *)(a1 + 16) != 1 || ((double v3 = sub_24F77EDDC(v1), v5 == v4) ? (v5 = v3 < 9.22337204e18) : (v5 = 0), !v5))
    {
      sub_24F770EB8(0);
      return;
    }
    if ((~v2 & 0x7FF0000000000000) != 0)
    {
      if (v3 > -9.22337204e18)
      {
        *(void *)&double v1 = (uint64_t)v3;
        goto LABEL_11;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return;
  }
LABEL_11:
  BOOL v6 = *(void *)&v1 >> 16 == 0;
  LODWORD(v1) = LOWORD(v1);
  if (!v6) {
    LODWORD(v1) = 0;
  }
  sub_24F770EB8(SLODWORD(v1));
}

Swift::Int32 __swiftcall UInt16.bind(to:at:)(Swift::OpaquePointer to, Swift::Int32 at)
{
  return sqlite3_bind_int64((sqlite3_stmt *)to._rawValue, at, v2);
}

void sub_24F7B2744(uint64_t a1@<X8>)
{
}

void sub_24F7B274C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  static UInt16.fromDatabaseValue(_:)(a1);
  *(_WORD *)a2 = v3;
  *(unsigned char *)(a2 + 2) = v4 & 1;
}

void sub_24F7B277C(sqlite3_stmt *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  sqlite3_column_int64(a1, a2);
  sub_24F77BC04();
  if (v6) {
    __int16 v7 = v4;
  }
  else {
    __int16 v7 = 0;
  }
  *(_WORD *)a3 = v7;
  *(unsigned char *)(a3 + 2) = v5;
}

uint64_t sub_24F7B27B4(Swift::OpaquePointer to, Swift::Int32 at)
{
  return UInt16.bind(to:at:)(to, at);
}

Swift::UInt32_optional __swiftcall UInt32.init(sqliteStatement:index:)(Swift::OpaquePointer sqliteStatement, Swift::Int32 index)
{
  sqlite3_column_int64((sqlite3_stmt *)sqliteStatement._rawValue, index);
  sub_24F77BC04();
  uint64_t v4 = v3;
  if (!v5) {
    uint64_t v4 = 0;
  }
  return (Swift::UInt32_optional)(v4 | ((unint64_t)v2 << 32));
}

void UInt32.databaseValue.getter(uint64_t a1@<X8>)
{
}

void static UInt32.fromDatabaseValue(_:)(uint64_t a1)
{
  unint64_t v1 = *(void *)a1;
  if (*(unsigned char *)(a1 + 16))
  {
    if (*(unsigned char *)(a1 + 16) != 1
      || ((double v3 = sub_24F77EDDC(*(double *)&v1), v5 == v4) ? (v5 = v3 < 9.22337204e18) : (v5 = 0), !v5))
    {
      sub_24F77DDB8(0);
      return;
    }
    if ((~v2 & 0x7FF0000000000000) != 0)
    {
      if (v3 > -9.22337204e18)
      {
        unint64_t v1 = (uint64_t)v3;
        goto LABEL_11;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return;
  }
LABEL_11:
  BOOL v6 = HIDWORD(v1) == 0;
  unint64_t v1 = v1;
  if (!v6) {
    unint64_t v1 = 0;
  }
  sub_24F77DDB8(v1);
}

Swift::Int32 __swiftcall UInt32.bind(to:at:)(Swift::OpaquePointer to, Swift::Int32 at)
{
  return sqlite3_bind_int64((sqlite3_stmt *)to._rawValue, at, v2);
}

void sub_24F7B2888(uint64_t a1@<X8>)
{
}

void sub_24F7B2890(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  static UInt32.fromDatabaseValue(_:)(a1);
  *(_DWORD *)a2 = v3;
  *(unsigned char *)(a2 + 4) = v4 & 1;
}

void sub_24F7B28C0(sqlite3_stmt *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  sqlite3_column_int64(a1, a2);
  sub_24F77BC04();
  if (v6) {
    int v7 = v4;
  }
  else {
    int v7 = 0;
  }
  *(_DWORD *)a3 = v7;
  *(unsigned char *)(a3 + 4) = v5;
}

uint64_t sub_24F7B28F8(Swift::OpaquePointer to, Swift::Int32 at)
{
  return UInt32.bind(to:at:)(to, at);
}

uint64_t sub_24F7B2904@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if ((result & 0x8000000000000000) == 0) {
    return _sSi12GRDBInternalE13databaseValueAA08DatabaseC0Vvg_0(result, a2);
  }
  __break(1u);
  return result;
}

void _sSu12GRDBInternalE17fromDatabaseValueySuSgAA0cD0VFZ_0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16) && *(unsigned char *)(a1 + 16) == 1)
  {
    double v2 = sub_24F77EDDC(*(double *)a1);
    BOOL v4 = v4 == v3 && v2 < 9.22337204e18;
    if (v4)
    {
      if ((~v1 & 0x7FF0000000000000) != 0)
      {
        if (v2 > -9.22337204e18) {
          return;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
    }
  }
}

sqlite3_stmt *sub_24F7B2988(sqlite3_stmt *result, int a2, sqlite3_int64 a3)
{
  if ((a3 & 0x8000000000000000) == 0) {
    return (sqlite3_stmt *)sqlite3_bind_int64(result, a2, a3);
  }
  __break(1u);
  return result;
}

uint64_t sub_24F7B2998@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = static Double.fromDatabaseValue(_:)(a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

void sub_24F7B29C8(Swift::OpaquePointer a1@<X0>, Swift::Int32 a2@<W1>, uint64_t a3@<X8>)
{
  *(Swift::Double *)a3 = Double.init(sqliteStatement:index:)(a1, a2);
  *(unsigned char *)(a3 + 8) = 0;
}

uint64_t sub_24F7B29F4(Swift::OpaquePointer to, Swift::Int32 at)
{
  return Double.bind(to:at:)(to, at);
}

Swift::Float __swiftcall Float.init(sqliteStatement:index:)(Swift::OpaquePointer sqliteStatement, Swift::Int32 index)
{
  return sqlite3_column_double((sqlite3_stmt *)sqliteStatement._rawValue, index);
}

void Float.databaseValue.getter(uint64_t a1@<X8>, float a2@<S0>)
{
}

unint64_t static Float.fromDatabaseValue(_:)(uint64_t a1)
{
  float v1 = *(double *)a1;
  float v2 = v1;
  if (*(unsigned char *)(a1 + 16) != 1) {
    float v2 = 0.0;
  }
  if (*(unsigned char *)(a1 + 16)) {
    return sub_24F77DDB8(LODWORD(v2));
  }
  else {
    return sub_24F77DDB8(COERCE_UNSIGNED_INT((float)*(uint64_t *)a1));
  }
}

Swift::Int32 __swiftcall Float.bind(to:at:)(Swift::OpaquePointer to, Swift::Int32 at)
{
  return sqlite3_bind_double((sqlite3_stmt *)to._rawValue, at, v2);
}

void sub_24F7B2A68(uint64_t a1@<X8>)
{
  Float.databaseValue.getter(a1, *v1);
}

unint64_t sub_24F7B2A70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = static Float.fromDatabaseValue(_:)(a1);
  *(_DWORD *)a2 = result;
  *(unsigned char *)(a2 + 4) = BYTE4(result) & 1;
  return result;
}

void sub_24F7B2AA0(Swift::OpaquePointer a1@<X0>, Swift::Int32 a2@<W1>, uint64_t a3@<X8>)
{
  *(Swift::Float *)a3 = Float.init(sqliteStatement:index:)(a1, a2);
  *(unsigned char *)(a3 + 4) = 0;
}

uint64_t sub_24F7B2ACC(Swift::OpaquePointer to, Swift::Int32 at)
{
  return Float.bind(to:at:)(to, at);
}

uint64_t sub_24F7B2AD4(Swift::OpaquePointer to, Swift::Int32 at)
{
  return String.bind(to:at:)(to, at);
}

uint64_t sub_24F7B2ADC(uint64_t a1)
{
  return sub_24F77F370(a1, 22, 0x800000024F8D1900, (uint64_t)sub_24F7B2B10, &qword_26B1F7D50);
}

void sub_24F7B2B10(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t static DatabaseFunction.capitalize.getter()
{
  return sub_24F7B3118(&qword_26B1F7F38);
}

uint64_t sub_24F7B2B60(uint64_t a1)
{
  return sub_24F77F370(a1, 20, 0x800000024F8D18E0, (uint64_t)sub_24F7B2B94, &qword_26B1F7D88);
}

void sub_24F7B2B94(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t static DatabaseFunction.lowercase.getter()
{
  return sub_24F7B3118(&qword_26B1F7BB0);
}

uint64_t sub_24F7B2BE4(uint64_t a1)
{
  return sub_24F77F370(a1, 20, 0x800000024F8D18C0, (uint64_t)sub_24F7B2C18, &qword_26B1F7D90);
}

void sub_24F7B2C18(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_24F7B2C44(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, unint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_24F8CEDD0();
  MEMORY[0x270FA5388](v6 - 8);
  sub_24F7739B0();
  if (v7)
  {
    uint64_t v9 = *(void *)(a1 + 32);
    unint64_t v8 = *(void *)(a1 + 40);
    int v10 = *(unsigned __int8 *)(a1 + 48);
    if (v10 == 3)
    {
      sub_24F781F34(*(void *)(a1 + 32), *(void *)(a1 + 40), 3);
      sub_24F8CEDC0();
      uint64_t v11 = sub_24F8CEDA0();
      unint64_t v13 = v12;
      sub_24F781F10(v9, v8, 3);
      if (v13)
      {
        uint64_t v9 = v11;
        unint64_t v8 = v13;
        goto LABEL_7;
      }
    }
    else if (v10 == 2)
    {
      sub_24F781F34(*(void *)(a1 + 32), *(void *)(a1 + 40), 2);
LABEL_7:
      uint64_t v14 = a2(v9, v8);
      uint64_t v16 = v15;
      swift_bridgeObjectRelease();
      *(void *)(a3 + 24) = MEMORY[0x263F8D310];
      *(void *)(a3 + 32) = &protocol witness table for String;
      *(void *)a3 = v14;
      *(void *)(a3 + 8) = v16;
      return;
    }
    *(void *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  else
  {
    __break(1u);
  }
}

uint64_t static DatabaseFunction.uppercase.getter()
{
  return sub_24F7B3118(&qword_26B1F7D98);
}

uint64_t sub_24F7B2DB0(uint64_t a1)
{
  return sub_24F77F370(a1, 31, 0x800000024F8D18A0, (uint64_t)sub_24F7B2DE4, &qword_26B1F7D78);
}

void sub_24F7B2DE4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t static DatabaseFunction.localizedCapitalize.getter()
{
  return sub_24F7B3118(&qword_26B1F7D80);
}

uint64_t sub_24F7B2E34(uint64_t a1)
{
  return sub_24F77F370(a1, 29, 0x800000024F8D1880, (uint64_t)sub_24F7B2E68, &qword_26B1F7D58);
}

void sub_24F7B2E68(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t static DatabaseFunction.localizedLowercase.getter()
{
  return sub_24F7B3118(&qword_26B1F7D60);
}

uint64_t sub_24F7B2EB8(uint64_t a1)
{
  return sub_24F77F370(a1, 29, 0x800000024F8D1860, (uint64_t)sub_24F7B2F70, &qword_26B1F7D68);
}

uint64_t sub_24F7B2EEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  type metadata accessor for DatabaseFunction();
  swift_allocObject();
  uint64_t result = DatabaseFunction.init(_:argumentCount:pure:function:)(a2, a3, 1, 1, a4, 0);
  *a5 = result;
  return result;
}

void sub_24F7B2F70(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_24F7B2F9C(uint64_t a1@<X0>, uint64_t (*a2)(void, unint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_24F8CEDD0();
  MEMORY[0x270FA5388](v6 - 8);
  sub_24F7739B0();
  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 32);
    unint64_t v9 = *(void *)(a1 + 40);
    int v10 = *(unsigned __int8 *)(a1 + 48);
    if (v10 == 3)
    {
      sub_24F781F34(*(void *)(a1 + 32), *(void *)(a1 + 40), 3);
      sub_24F8CEDC0();
      sub_24F8CEDA0();
      uint64_t v12 = v11;
      sub_24F781F10(v8, v9, 3);
      if (v12) {
        goto LABEL_6;
      }
    }
    else if (v10 == 2)
    {
      sub_24F781F34(*(void *)(a1 + 32), *(void *)(a1 + 40), 2);
LABEL_6:
      unint64_t v13 = sub_24F7B0E7C();
      uint64_t v14 = MEMORY[0x263F8D310];
      uint64_t v15 = a2(MEMORY[0x263F8D310], v13);
      uint64_t v17 = v16;
      swift_bridgeObjectRelease();
      *(void *)(a3 + 24) = v14;
      *(void *)(a3 + 32) = &protocol witness table for String;
      *(void *)a3 = v15;
      *(void *)(a3 + 8) = v17;
      return;
    }
    *(void *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  else
  {
    __break(1u);
  }
}

uint64_t static DatabaseFunction.localizedUppercase.getter()
{
  return sub_24F7B3118(&qword_26B1F7D70);
}

uint64_t sub_24F7B3118(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }
  return swift_retain();
}

uint64_t sub_24F7B3164(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4) {
    return 0;
  }
  if (sub_24F8CFD00()) {
    return -1;
  }
  return (sub_24F8CFD00() & 1) == 0;
}

uint64_t static DatabaseCollation.unicodeCompare.getter()
{
  return swift_initStaticObject();
}

uint64_t static DatabaseCollation.caseInsensitiveCompare.getter()
{
  return swift_initStaticObject();
}

uint64_t static DatabaseCollation.localizedCaseInsensitiveCompare.getter()
{
  return swift_initStaticObject();
}

uint64_t static DatabaseCollation.localizedCompare.getter()
{
  return swift_initStaticObject();
}

uint64_t static DatabaseCollation.localizedStandardCompare.getter()
{
  return swift_initStaticObject();
}

double EncodableRecord<>.encode(to:)(unint64_t *a1)
{
  uint64_t v2 = type metadata accessor for RecordEncoder();
  unint64_t v3 = a1[1];
  v7.n128_u64[0] = *a1;
  v7.n128_u64[1] = v3;
  sub_24F7B3394(&v7);
  unint64_t v5 = v4;
  uint64_t v8 = v2;
  uint64_t WitnessTable = swift_getWitnessTable();
  v7.n128_u64[0] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_24F8CECE0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&v7);
  sub_24F7B33DC(&v7);
  swift_release();
  double result = v7.n128_f64[0];
  *(__n128 *)a1 = v7;
  return result;
}

uint64_t type metadata accessor for RecordEncoder()
{
  return sub_24F777DE0();
}

__n128 sub_24F7B3394(__n128 *a1)
{
  uint64_t v2 = swift_allocObject();
  __n128 result = *a1;
  *(__n128 *)(v2 + 16) = *a1;
  return result;
}

uint64_t sub_24F7B33CC()
{
  return MEMORY[0x263F8EE78];
}

uint64_t sub_24F7B33DC@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  *a1 = v3;
  a1[1] = v4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24F7B342C()
{
  return swift_initClassMetadata2();
}

uint64_t sub_24F7B3470()
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)v0 + 88) + 48))();
}

uint64_t sub_24F7B34D0()
{
  return sub_24F8CFAB0();
}

void sub_24F7B3594()
{
}

void sub_24F7B35F0()
{
}

uint64_t sub_24F7B364C(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = MEMORY[0x263F8D4F8];
  uint64_t v14 = &protocol witness table for Bool;
  v12[0] = a1;
  v11[3] = a5;
  v11[4] = a7;
  unint64_t v9 = sub_24F76ADC4(v11);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))(v9, a2, a5);
  sub_24F7B4D70((uint64_t)v12, v11);
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v11);
  return sub_24F774DA0((uint64_t)v12, &qword_26B1F7AC0);
}

uint64_t sub_24F7B3708()
{
  sub_24F77FBBC();
  uint64_t v15 = v1;
  v16[0] = v0;
  uint64_t v14 = v2;
  sub_24F76ADC4(v13);
  sub_24F773974();
  sub_24F782E2C();
  uint64_t v4 = v3();
  sub_24F77E6C0(v4, v5, v6, v7, v8, v9, v10, v11, v13[0], v13[1], v13[2], v14, v15, v16[0]);
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v13);
  return sub_24F774DA0((uint64_t)v16, &qword_26B1F7AC0);
}

uint64_t sub_24F7B3788()
{
  sub_24F77FBBC();
  v16[0] = v0;
  uint64_t v14 = v1;
  uint64_t v15 = v2;
  sub_24F76ADC4(v13);
  sub_24F773974();
  sub_24F782E2C();
  uint64_t v4 = v3();
  sub_24F77E6C0(v4, v5, v6, v7, v8, v9, v10, v11, v13[0], v13[1], v13[2], v14, v15, v16[0]);
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v13);
  return sub_24F774DA0((uint64_t)v16, &qword_26B1F7AC0);
}

uint64_t sub_24F7B3808()
{
  sub_24F77FBBC();
  v16[0] = v0;
  uint64_t v14 = v1;
  uint64_t v15 = v2;
  sub_24F76ADC4(v13);
  sub_24F773974();
  sub_24F782E2C();
  uint64_t v4 = v3();
  sub_24F77E6C0(v4, v5, v6, v7, v8, v9, v10, v11, v13[0], v13[1], v13[2], v14, v15, v16[0]);
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v13);
  return sub_24F774DA0((uint64_t)v16, &qword_26B1F7AC0);
}

uint64_t sub_24F7B3888()
{
  sub_24F77FBBC();
  v16[0] = v0;
  uint64_t v14 = v1;
  uint64_t v15 = v2;
  sub_24F76ADC4(v13);
  sub_24F773974();
  sub_24F782E2C();
  uint64_t v4 = v3();
  sub_24F77E6C0(v4, v5, v6, v7, v8, v9, v10, v11, v13[0], v13[1], v13[2], v14, v15, v16[0]);
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v13);
  return sub_24F774DA0((uint64_t)v16, &qword_26B1F7AC0);
}

uint64_t sub_24F7B3908(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = MEMORY[0x263F8D5C8];
  uint64_t v14 = &protocol witness table for Float;
  *(float *)uint64_t v12 = a2;
  v11[3] = a5;
  v11[4] = a7;
  uint64_t v9 = sub_24F76ADC4(v11);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))(v9, a1, a5);
  sub_24F7B4D70((uint64_t)v12, v11);
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v11);
  return sub_24F774DA0((uint64_t)v12, &qword_26B1F7AC0);
}

uint64_t sub_24F7B39C4(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void v12[3] = MEMORY[0x263F8D538];
  v12[4] = &protocol witness table for Double;
  *(double *)uint64_t v12 = a2;
  v11[3] = a5;
  v11[4] = a7;
  uint64_t v9 = sub_24F76ADC4(v11);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))(v9, a1, a5);
  sub_24F7B4D70((uint64_t)v12, v11);
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v11);
  return sub_24F774DA0((uint64_t)v12, &qword_26B1F7AC0);
}

uint64_t sub_24F7B3A80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13[3] = MEMORY[0x263F8D310];
  v13[4] = &protocol witness table for String;
  v13[0] = a1;
  v13[1] = a2;
  void v12[3] = a6;
  v12[4] = a8;
  uint64_t v10 = sub_24F76ADC4(v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 16))(v10, a3, a6);
  swift_bridgeObjectRetain();
  sub_24F7B4D70((uint64_t)v13, v12);
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v12);
  return sub_24F774DA0((uint64_t)v13, &qword_26B1F7AC0);
}

uint64_t sub_24F7B3B50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  v15[3] = a5;
  v15[4] = a8;
  uint64_t v13 = sub_24F76ADC4(v15);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))(v13, a2, a5);
  sub_24F7B4ED8(a1, v15, a6, a9);
  return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v15);
}

uint64_t sub_24F7B3C10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  v10[3] = a4;
  void v10[4] = a6;
  uint64_t v8 = sub_24F76ADC4(v10);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(v8, a1, a4);
  sub_24F7B4D70((uint64_t)v11, v10);
  sub_24F774DA0((uint64_t)v11, &qword_26B1F7AC0);
  return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v10);
}

uint64_t sub_24F7B3CC0(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a1 == 2)
  {
    uint64_t v14 = 0;
    long long v12 = 0u;
    long long v13 = 0u;
  }
  else
  {
    *((void *)&v13 + 1) = MEMORY[0x263F8D4F8];
    uint64_t v14 = &protocol witness table for Bool;
    LOBYTE(v12) = a1 & 1;
  }
  v11[3] = a5;
  v11[4] = a7;
  uint64_t v9 = sub_24F76ADC4(v11);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))(v9, a2, a5);
  sub_24F7B4D70((uint64_t)&v12, v11);
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v11);
  return sub_24F774DA0((uint64_t)&v12, &qword_26B1F7AC0);
}

uint64_t sub_24F7B3D98(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9)
{
  if (a2)
  {
    a1 = 0;
    long long v13 = 0u;
    long long v14 = 0u;
  }
  else
  {
    long long v14 = a9;
  }
  v11[4] = a8;
  uint64_t v12 = a1;
  v11[3] = a6;
  sub_24F76ADC4(v11);
  sub_24F773974();
  sub_24F7739CC();
  v9();
  sub_24F7B4D70((uint64_t)&v12, v11);
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v11);
  return sub_24F774DA0((uint64_t)&v12, &qword_26B1F7AC0);
}

uint64_t sub_24F7B3E48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_24F781370();
  if ((v10 & 0x100) != 0)
  {
    sub_24F7806AC();
  }
  else
  {
    uint64_t v17 = v12;
    uint64_t v18 = a9;
    v16[0] = v10;
  }
  v15[3] = v9;
  v15[4] = v11;
  sub_24F76ADC4(v15);
  sub_24F773974();
  sub_24F7739CC();
  v13();
  sub_24F7B4D70((uint64_t)v16, v15);
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v15);
  return sub_24F774DA0((uint64_t)v16, &qword_26B1F7AC0);
}

uint64_t sub_24F7B3EE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_24F781370();
  if ((v10 & 0x10000) != 0)
  {
    sub_24F7806AC();
  }
  else
  {
    uint64_t v17 = v12;
    uint64_t v18 = a9;
    v16[0] = v10;
  }
  v15[3] = v9;
  v15[4] = v11;
  sub_24F76ADC4(v15);
  sub_24F773974();
  sub_24F7739CC();
  v13();
  sub_24F7B4D70((uint64_t)v16, v15);
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v15);
  return sub_24F774DA0((uint64_t)v16, &qword_26B1F7AC0);
}

uint64_t sub_24F7B3F84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_24F781370();
  if ((v10 & 0x100000000) != 0)
  {
    sub_24F7806AC();
  }
  else
  {
    uint64_t v17 = v12;
    uint64_t v18 = a9;
    v16[0] = v10;
  }
  v15[3] = v9;
  v15[4] = v11;
  sub_24F76ADC4(v15);
  sub_24F773974();
  sub_24F7739CC();
  v13();
  sub_24F7B4D70((uint64_t)v16, v15);
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v15);
  return sub_24F774DA0((uint64_t)v16, &qword_26B1F7AC0);
}

uint64_t sub_24F7B4020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2)
  {
    *((void *)&v14 + 1) = MEMORY[0x263F8D310];
    uint64_t v15 = &protocol witness table for String;
    *(void *)&long long v13 = a1;
    *((void *)&v13 + 1) = a2;
  }
  else
  {
    uint64_t v15 = 0;
    long long v13 = 0u;
    long long v14 = 0u;
  }
  void v12[3] = a6;
  v12[4] = a8;
  uint64_t v10 = sub_24F76ADC4(v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 16))(v10, a3, a6);
  swift_bridgeObjectRetain();
  sub_24F7B4D70((uint64_t)&v13, v12);
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v12);
  return sub_24F774DA0((uint64_t)&v13, &qword_26B1F7AC0);
}

uint64_t sub_24F7B4100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v25 = a8;
  uint64_t v26 = a2;
  uint64_t v31 = a3;
  uint64_t v12 = sub_24F8CF610();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v24 - v15;
  uint64_t v17 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](v14);
  long long v19 = (char *)&v24 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, a1, v12);
  if (sub_24F777048((uint64_t)v16, 1, a6) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    uint64_t v30 = 0;
    long long v28 = 0u;
    long long v29 = 0u;
    v27[3] = a5;
    v27[4] = v25;
    long long v20 = sub_24F76ADC4(v27);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))(v20, v26, a5);
    sub_24F7B4D70((uint64_t)&v28, v27);
    sub_24F774DA0((uint64_t)&v28, &qword_26B1F7AC0);
    long long v21 = v27;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v19, v16, a6);
    *((void *)&v29 + 1) = a5;
    uint64_t v30 = v25;
    uint64_t v22 = sub_24F76ADC4((uint64_t *)&v28);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))(v22, v26, a5);
    sub_24F7B4ED8((uint64_t)v19, &v28, a6, a9);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, a6);
    long long v21 = (uint64_t *)&v28;
  }
  return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v21);
}

void sub_24F7B43AC()
{
}

void sub_24F7B4410()
{
}

uint64_t sub_24F7B4474@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  a2[3] = type metadata accessor for RecordEncoder();
  a2[4] = swift_getWitnessTable();
  *a2 = a1;
  return swift_retain();
}

uint64_t sub_24F7B44E0@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  a2[3] = type metadata accessor for RecordEncoder();
  a2[4] = swift_getWitnessTable();
  *a2 = a1;
  return swift_retain();
}

uint64_t sub_24F7B4550()
{
  return sub_24F7B33CC();
}

uint64_t sub_24F7B4564(uint64_t a1, uint64_t *a2)
{
  return sub_24F7B3C10(a1, *v2, a2[2], a2[3], a2[4], a2[5]);
}

uint64_t sub_24F7B458C(char a1, uint64_t a2, uint64_t *a3)
{
  return sub_24F7B364C(a1, a2, *v3, a3[2], a3[3], a3[4], a3[5]);
}

uint64_t sub_24F7B45B4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  return sub_24F7B492C(a1, a2, a3, a4, a5, sub_24F7B3A80);
}

uint64_t sub_24F7B45E0(uint64_t a1, uint64_t *a2, double a3)
{
  return sub_24F7B39C4(a1, a3, *v3, a2[2], a2[3], a2[4], a2[5]);
}

uint64_t sub_24F7B4608(uint64_t a1, uint64_t *a2, float a3)
{
  return sub_24F7B3908(a1, a3, *v3, a2[2], a2[3], a2[4], a2[5]);
}

uint64_t sub_24F7B4630()
{
  return sub_24F7B4844();
}

uint64_t sub_24F7B4658()
{
  return sub_24F7B4760();
}

uint64_t sub_24F7B4680()
{
  return sub_24F7B47AC();
}

uint64_t sub_24F7B46A8()
{
  return sub_24F7B47F8();
}

uint64_t sub_24F7B46D0()
{
  return sub_24F7B4844();
}

uint64_t sub_24F7B46F8()
{
  return sub_24F8CFE70();
}

uint64_t sub_24F7B4710()
{
  return sub_24F7B4844();
}

uint64_t sub_24F7B4738()
{
  return sub_24F7B4760();
}

uint64_t sub_24F7B4760()
{
  return sub_24F7B3788();
}

uint64_t sub_24F7B4784()
{
  return sub_24F7B47AC();
}

uint64_t sub_24F7B47AC()
{
  return sub_24F7B3808();
}

uint64_t sub_24F7B47D0()
{
  return sub_24F7B47F8();
}

uint64_t sub_24F7B47F8()
{
  return sub_24F7B3888();
}

uint64_t sub_24F7B481C()
{
  return sub_24F7B4844();
}

uint64_t sub_24F7B4844()
{
  return sub_24F7B3708();
}

uint64_t sub_24F7B4868()
{
  return sub_24F8CFE80();
}

uint64_t sub_24F7B4880(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  return sub_24F7B4C90(a1, a2, a3, a4, a5, a6, sub_24F7B3B50);
}

uint64_t sub_24F7B48AC()
{
  return sub_24F8CFE60();
}

uint64_t sub_24F7B48D8(char a1, uint64_t a2, uint64_t *a3)
{
  return sub_24F7B3CC0(a1, a2, *v3, a3[2], a3[3], a3[4], a3[5]);
}

uint64_t sub_24F7B4900(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  return sub_24F7B492C(a1, a2, a3, a4, a5, sub_24F7B4020);
}

uint64_t sub_24F7B492C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, void, void, void, void, void))
{
  return a6(a1, a2, a3, *v6, a4[2], a4[3], a4[4], a4[5]);
}

uint64_t sub_24F7B495C(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  return sub_24F7B4C08(a1, a2, a3, a4, a5, MEMORY[0x263F8D538], (uint64_t)&protocol witness table for Double);
}

uint64_t sub_24F7B4984(unint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return sub_24F7B4B98(a1, a2, a3, a4, MEMORY[0x263F8D5C8], (uint64_t)&protocol witness table for Float);
}

uint64_t sub_24F7B49AC(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  return sub_24F7B4C08(a1, a2, a3, a4, a5, MEMORY[0x263F8D6C8], (uint64_t)&protocol witness table for Int);
}

uint64_t sub_24F7B49D4()
{
  return sub_24F7B4AE0();
}

uint64_t sub_24F7B49FC()
{
  return sub_24F7B4B3C();
}

uint64_t sub_24F7B4A24(unint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return sub_24F7B4B98(a1, a2, a3, a4, MEMORY[0x263F8E548], (uint64_t)&protocol witness table for Int32);
}

uint64_t sub_24F7B4A4C(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  return sub_24F7B4C08(a1, a2, a3, a4, a5, MEMORY[0x263F8E5C0], (uint64_t)&protocol witness table for Int64);
}

uint64_t sub_24F7B4A74()
{
  return sub_24F8CFE30();
}

uint64_t sub_24F7B4A90(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  return sub_24F7B4C08(a1, a2, a3, a4, a5, MEMORY[0x263F8D9D0], (uint64_t)&protocol witness table for UInt);
}

uint64_t sub_24F7B4AB8()
{
  return sub_24F7B4AE0();
}

uint64_t sub_24F7B4AE0()
{
  sub_24F77DDCC();
  return sub_24F7B3E48(v0, v1, v2, v3, v4, v5, v6, v7, v9);
}

uint64_t sub_24F7B4B14()
{
  return sub_24F7B4B3C();
}

uint64_t sub_24F7B4B3C()
{
  sub_24F77DDCC();
  return sub_24F7B3EE8(v0, v1, v2, v3, v4, v5, v6, v7, v9);
}

uint64_t sub_24F7B4B70(unint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return sub_24F7B4B98(a1, a2, a3, a4, MEMORY[0x263F8E8F8], (uint64_t)&protocol witness table for UInt32);
}

uint64_t sub_24F7B4B98(unint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_24F7B3F84(a1 | ((HIDWORD(a1) & 1) << 32), a2, *v6, a3[2], a3[3], a3[4], a3[5], a5, a6);
}

uint64_t sub_24F7B4BE0(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  return sub_24F7B4C08(a1, a2, a3, a4, a5, MEMORY[0x263F8E970], (uint64_t)&protocol witness table for UInt64);
}

uint64_t sub_24F7B4C08(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)&long long v9 = a6;
  *((void *)&v9 + 1) = a7;
  return sub_24F7B3D98(a1, a2 & 1, a3, *v7, a4[2], a4[3], a4[4], a4[5], v9);
}

uint64_t sub_24F7B4C48()
{
  return sub_24F8CFE50();
}

uint64_t sub_24F7B4C64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  return sub_24F7B4C90(a1, a2, a3, a4, a5, a6, sub_24F7B4100);
}

uint64_t sub_24F7B4C90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, void, void, void, uint64_t, void, void, uint64_t))
{
  return a7(a1, a2, *v7, a5[2], a5[3], a3, a5[4], a5[5], a4);
}

void sub_24F7B4CD4()
{
}

uint64_t sub_24F7B4D10(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_24F7B4D54(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_24F7B4410);
}

uint64_t sub_24F7B4D28@<X0>(void *a1@<X8>)
{
  return sub_24F7B4474(*v1, a1);
}

uint64_t sub_24F7B4D3C(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_24F7B4D54(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_24F7B44E0);
}

uint64_t sub_24F7B4D54(uint64_t a1, void *a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void, void, void, void))
{
  return a4(a1, *v4, a2[2], a2[3], a2[4], a2[5]);
}

uint64_t sub_24F7B4D70(uint64_t a1, void *a2)
{
  sub_24F7B3470();
  if (v13)
  {
    if (v13 == (uint64_t (*)(void *))1)
    {
      sub_24F7811D0(a2, a2[3]);
      uint64_t v4 = sub_24F8CFFE0();
      uint64_t v6 = sub_24F7BFB94(v4, v5);
      uint64_t v8 = v7;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_retain();
      uint64_t v6 = v13(a2);
      uint64_t v8 = v10;
      sub_24F7678A4((unint64_t)v13);
      sub_24F7678A4((unint64_t)v13);
    }
  }
  else
  {
    sub_24F7811D0(a2, a2[3]);
    uint64_t v6 = sub_24F8CFFE0();
    uint64_t v8 = v9;
  }
  sub_24F79089C(a1, (uint64_t)&v13);
  swift_beginAccess();
  sub_24F7BEB48((uint64_t)&v13, v6, v8, (uint64_t)v12);
  sub_24F774DA0((uint64_t)&v13, &qword_26B1F7AC0);
  sub_24F774DA0((uint64_t)v12, &qword_26B1F7238);
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

void sub_24F7B4ED8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void (*v40)(long long *__return_ptr, ValueMetadata *, _UNKNOWN **);
  ValueMetadata *v41;
  void *v42;
  uint64_t *v43;
  uint64_t v44;
  void *v45;
  void *v46;
  id v47;
  void *v48;
  __int16 v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t *v71;
  void *v72;
  long long v73;
  char v74;
  long long v75;
  long long v76;
  _UNKNOWN **v77;
  long long v78;
  char v79;
  ValueMetadata *v80;
  _UNKNOWN **WitnessTable;
  uint64_t v82;

  int v64 = a4;
  uint64_t v70 = a2;
  uint64_t v82 = *MEMORY[0x263EF8340];
  uint64_t v66 = *v4;
  uint64_t v7 = sub_24F781274(&qword_26B1F7248);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v67 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v68 = sub_24F8CE9C0();
  uint64_t v62 = *(void *)(v68 - 8);
  MEMORY[0x270FA5388](v68);
  unint64_t v61 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_24F781274(&qword_26B1F7240);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v13 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(a3 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v11);
  int v65 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  long long v19 = (char *)&v60 - v18;
  MEMORY[0x270FA5388](v17);
  long long v21 = (char *)&v60 - v20;
  uint64_t v22 = sub_24F8CE970();
  uint64_t v63 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v60 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  unint64_t v69 = a1;
  v25(v21, a1, a3);
  uint64_t v26 = a3;
  if (swift_dynamicCast())
  {
    sub_24F7771BC((uint64_t)v13, 0, 1, v22);
    if (sub_24F777048((uint64_t)v13, 1, v22) != 1)
    {
      uint64_t v27 = v63;
      (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v24, v13, v22);
      (*(void (**)(long long *__return_ptr))(*(void *)(v66 + 88) + 32))(&v75);
      long long v28 = v75;
      char v29 = v76;
      uint64_t v73 = v75;
      uint64_t v74 = v76;
      sub_24F7BE118((uint64_t)v24, (uint64_t)&v78);
      sub_24F7B6734((void *)v28, *((uint64_t *)&v28 + 1), v29);
      sub_24F7B4D70((uint64_t)&v78, v70);
      sub_24F774DA0((uint64_t)&v78, &qword_26B1F7AC0);
      (*(void (**)(char *, uint64_t))(v27 + 8))(v24, v22);
      return;
    }
  }
  else
  {
    sub_24F7771BC((uint64_t)v13, 1, 1, v22);
  }
  sub_24F774DA0((uint64_t)v13, &qword_26B1F7240);
  uint64_t v30 = v69;
  v25(v19, v69, v26);
  uint64_t v31 = (uint64_t)v67;
  uint64_t v32 = v68;
  if (swift_dynamicCast())
  {
    sub_24F7771BC(v31, 0, 1, v32);
    if (sub_24F777048(v31, 1, v32) != 1)
    {
      uint64_t v33 = v62;
      uint64_t v34 = v61;
      (*(void (**)(char *, uint64_t, uint64_t))(v62 + 32))(v61, v31, v32);
      (*(void (**)(long long *__return_ptr))(*(void *)(v66 + 88) + 40))(&v73);
      if ((_BYTE)v73)
      {
        uint64_t v35 = v70;
        if (v73 == 1)
        {
          uint64_t v36 = sub_24F8CE990();
          uint64_t v80 = (ValueMetadata *)MEMORY[0x263F8D310];
          uint64_t WitnessTable = &protocol witness table for String;
          *(void *)&unint64_t v78 = v36;
          *((void *)&v78 + 1) = v37;
        }
        else
        {
          sub_24F8CE990();
          uint64_t v57 = sub_24F8CED00();
          uint64_t v59 = v58;
          swift_bridgeObjectRelease();
          uint64_t v80 = (ValueMetadata *)MEMORY[0x263F8D310];
          uint64_t WitnessTable = &protocol witness table for String;
          *(void *)&unint64_t v78 = v57;
          *((void *)&v78 + 1) = v59;
        }
      }
      else
      {
        uint64_t v80 = &type metadata for DatabaseValue;
        uint64_t WitnessTable = &protocol witness table for DatabaseValue;
        *(void *)&uint64_t v75 = sub_24F8CE9B0();
        WORD4(v75) = v49;
        BYTE10(v75) = v50;
        BYTE11(v75) = v51;
        BYTE12(v75) = v52;
        BYTE13(v75) = v53;
        BYTE14(v75) = v54;
        HIBYTE(v75) = v55;
        *(void *)&unint64_t v78 = MEMORY[0x253363140](&v75, 16);
        *((void *)&v78 + 1) = v56;
        uint64_t v79 = 3;
        uint64_t v35 = v70;
      }
      sub_24F7B4D70((uint64_t)&v78, v35);
      sub_24F774DA0((uint64_t)&v78, &qword_26B1F7AC0);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v32);
      return;
    }
  }
  else
  {
    sub_24F7771BC(v31, 1, 1, v32);
  }
  sub_24F774DA0(v31, &qword_26B1F7248);
  v25(v65, v30, v26);
  sub_24F781274(&qword_26B1F7250);
  if (swift_dynamicCast())
  {
    sub_24F794DE0(&v75, (uint64_t)&v78);
    uint64_t v38 = v80;
    uint64_t v39 = WitnessTable;
    sub_24F7811D0(&v78, (uint64_t)v80);
    uint64_t v40 = (void (*)(long long *__return_ptr, ValueMetadata *, _UNKNOWN **))v39[3];
    *((void *)&v76 + 1) = &type metadata for DatabaseValue;
    unint64_t v77 = &protocol witness table for DatabaseValue;
    v40(&v75, v38, v39);
    sub_24F7B4D70((uint64_t)&v75, v70);
    sub_24F774DA0((uint64_t)&v75, &qword_26B1F7AC0);
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&v78);
    return;
  }
  unint64_t v77 = 0;
  uint64_t v75 = 0u;
  uint64_t v76 = 0u;
  sub_24F774DA0((uint64_t)&v75, &qword_26B1F7AC0);
  uint64_t v41 = (ValueMetadata *)type metadata accessor for ColumnEncoder();
  uint64_t v42 = v70;
  sub_24F775458((uint64_t)v70, (uint64_t)&v78);
  uint64_t v43 = v71;
  unsigned __int8 v44 = sub_24F7B57C0((uint64_t)v71, &v78);
  uint64_t v80 = v41;
  uint64_t WitnessTable = (_UNKNOWN **)swift_getWitnessTable();
  *(void *)&unint64_t v78 = v44;
  swift_retain();
  swift_retain();
  unint64_t v45 = v72;
  sub_24F8CECE0();
  uint64_t v46 = v45;
  if (v45)
  {
    swift_release();
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&v78);
  }
  else
  {
    _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&v78);
    if (*(unsigned char *)(v44 + 64) != 1)
    {
      swift_release();
      return;
    }
    sub_24F7B66E8();
    uint64_t v46 = (void *)swift_allocError();
    swift_willThrow();
    swift_release();
  }
  *(void *)&unint64_t v78 = v46;
  uint64_t v47 = v46;
  sub_24F781274(&qword_26B1F7040);
  if (swift_dynamicCast())
  {

    uint64_t v48 = (void *)MEMORY[0x2533648D0]();
    sub_24F7B580C(v42, v69, v43);
  }
}

uint64_t sub_24F7B57C0(uint64_t a1, long long *a2)
{
  return sub_24F7B5BB0(a1, a2);
}

uint64_t sub_24F7B580C(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = sub_24F8CEDD0();
  MEMORY[0x270FA5388](v5 - 8);
  sub_24F7811D0(a1, a1[3]);
  uint64_t v6 = sub_24F8CFFE0();
  (*(void (**)(uint64_t))(*(void *)(v4 + 88) + 24))(v6);
  swift_bridgeObjectRelease();
  uint64_t v7 = sub_24F8CE5D0();
  unint64_t v9 = v8;
  uint64_t result = swift_release();
  if (!v12[6])
  {
    sub_24F8CEDC0();
    uint64_t result = sub_24F8CEDA0();
    if (v11)
    {
      void v12[3] = MEMORY[0x263F8D310];
      v12[4] = &protocol witness table for String;
      v12[0] = result;
      v12[1] = v11;
      sub_24F7B4D70((uint64_t)v12, a1);
      sub_24F783E24(v7, v9);
      return sub_24F774DA0((uint64_t)v12, &qword_26B1F7AC0);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_24F7B59B0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_24F7B59E0()
{
  uint64_t v0 = sub_24F7B59B0();
  return MEMORY[0x270FA0228](v0, 32, 7);
}

uint64_t sub_24F7B5A10()
{
  return swift_initClassMetadata2();
}

uint64_t sub_24F7B5A6C()
{
  return sub_24F7B33CC();
}

uint64_t sub_24F7B5A90()
{
  return sub_24F7B34D0();
}

void sub_24F7B5AB4()
{
}

void sub_24F7B5AD8()
{
}

uint64_t sub_24F7B5AFC()
{
  sub_24F781274(&qword_26B1F7260);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_24F8DDBF0;
  sub_24F775458(v0 + 24, v1 + 32);
  return v1;
}

uint64_t sub_24F7B5B50()
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)v0 + 88) + 16))();
}

uint64_t sub_24F7B5BB0(uint64_t a1, long long *a2)
{
  *(unsigned char *)(v2 + 64) = 0;
  *(void *)(v2 + 16) = a1;
  sub_24F794DE0(a2, v2 + 24);
  return v2;
}

uint64_t sub_24F7B5BE0()
{
  *(unsigned char *)(v0 + 64) = 1;
  uint64_t v1 = sub_24F7B5AFC();
  nullsub_1(v1);
  type metadata accessor for JSONRequiredEncoder.KeyedContainer();
  swift_getWitnessTable();
  return sub_24F8CFAB0();
}

unint64_t sub_24F7B5C7C@<X0>(uint64_t *a1@<X8>)
{
  *(unsigned char *)(v1 + 64) = 1;
  uint64_t v3 = sub_24F7B5AFC();
  a1[3] = (uint64_t)&type metadata for JSONRequiredEncoder;
  unint64_t result = sub_24F7B669C();
  a1[4] = result;
  *a1 = v3;
  return result;
}

uint64_t sub_24F7B5CC4@<X0>(void *a1@<X8>)
{
  a1[3] = type metadata accessor for ColumnEncoder();
  a1[4] = swift_getWitnessTable();
  *a1 = v1;
  return swift_retain();
}

uint64_t sub_24F7B5D54()
{
  swift_release();
  _s12GRDBInternal13DatabaseEventVwxx_0(v0 + 24);
  return v0;
}

uint64_t sub_24F7B5D7C()
{
  uint64_t v0 = sub_24F7B5D54();
  return MEMORY[0x270FA0228](v0, 65, 7);
}

uint64_t type metadata accessor for ColumnEncoder()
{
  return sub_24F777DE0();
}

uint64_t sub_24F7B5DC4()
{
  return sub_24F7B5AFC();
}

uint64_t sub_24F7B5DE8()
{
  return sub_24F7B33D8();
}

uint64_t sub_24F7B5E0C()
{
  return sub_24F7B5BE0();
}

unint64_t sub_24F7B5E30@<X0>(uint64_t *a1@<X8>)
{
  return sub_24F7B5C7C(a1);
}

uint64_t sub_24F7B5E54@<X0>(void *a1@<X8>)
{
  return sub_24F7B5CC4(a1);
}

uint64_t sub_24F7B5E78()
{
  uint64_t v4 = 0;
  memset(v3, 0, sizeof(v3));
  sub_24F775458(v0 + 24, (uint64_t)v2);
  swift_retain();
  sub_24F7B4D70((uint64_t)v3, v2);
  swift_release();
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v2);
  return sub_24F774DA0((uint64_t)v3, &qword_26B1F7AC0);
}

uint64_t sub_24F7B5F00(char a1)
{
  uint64_t v5 = MEMORY[0x263F8D4F8];
  uint64_t v6 = &protocol witness table for Bool;
  v4[0] = a1;
  sub_24F775458(v1 + 24, (uint64_t)v3);
  swift_retain();
  sub_24F7B4D70((uint64_t)v4, v3);
  swift_release();
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v3);
  return sub_24F774DA0((uint64_t)v4, &qword_26B1F7AC0);
}

uint64_t sub_24F7B5F94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v21[4] = a3;
  sub_24F77ADAC();
  LOBYTE(v21[0]) = v3;
  sub_24F770EC4(v3, v4, v5, v6, v7, v8, v9, v10, v20[0]);
  uint64_t v11 = swift_retain();
  sub_24F77E6C0(v11, v12, v13, v14, v15, v16, v17, v18, v20[0], v20[1], v20[2], v20[3], v20[4], v21[0]);
  swift_release();
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v20);
  return sub_24F774DA0((uint64_t)v21, &qword_26B1F7AC0);
}

uint64_t sub_24F7B5FFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = a3;
  sub_24F77ADAC();
  v21[0] = v3;
  sub_24F770EC4(v3, v4, v5, v6, v7, v8, v9, v10, v20[0]);
  uint64_t v11 = swift_retain();
  sub_24F77E6C0(v11, v12, v13, v14, v15, v16, v17, v18, v20[0], v20[1], v20[2], v20[3], v20[4], v21[0]);
  swift_release();
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v20);
  return sub_24F774DA0((uint64_t)v21, &qword_26B1F7AC0);
}

uint64_t sub_24F7B6064(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = a3;
  sub_24F77ADAC();
  LOBYTE(v21[0]) = v3;
  sub_24F770EC4(v3, v4, v5, v6, v7, v8, v9, v10, v20[0]);
  uint64_t v11 = swift_retain();
  sub_24F77E6C0(v11, v12, v13, v14, v15, v16, v17, v18, v20[0], v20[1], v20[2], v20[3], v20[4], v21[0]);
  swift_release();
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v20);
  return sub_24F774DA0((uint64_t)v21, &qword_26B1F7AC0);
}

uint64_t sub_24F7B60CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = a3;
  sub_24F77ADAC();
  LOBYTE(v21[0]) = v3;
  sub_24F770EC4(v3, v4, v5, v6, v7, v8, v9, v10, v20[0]);
  uint64_t v11 = swift_retain();
  sub_24F77E6C0(v11, v12, v13, v14, v15, v16, v17, v18, v20[0], v20[1], v20[2], v20[3], v20[4], v21[0]);
  swift_release();
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v20);
  return sub_24F774DA0((uint64_t)v21, &qword_26B1F7AC0);
}

uint64_t sub_24F7B6134(float a1)
{
  uint64_t v5 = MEMORY[0x263F8D5C8];
  uint64_t v6 = &protocol witness table for Float;
  *(float *)uint64_t v4 = a1;
  sub_24F775458(v1 + 24, (uint64_t)v3);
  swift_retain();
  sub_24F7B4D70((uint64_t)v4, v3);
  swift_release();
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v3);
  return sub_24F774DA0((uint64_t)v4, &qword_26B1F7AC0);
}

uint64_t sub_24F7B61C8(double a1)
{
  v4[3] = MEMORY[0x263F8D538];
  v4[4] = &protocol witness table for Double;
  *(double *)uint64_t v4 = a1;
  sub_24F775458(v1 + 24, (uint64_t)v3);
  swift_retain();
  sub_24F7B4D70((uint64_t)v4, v3);
  swift_release();
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v3);
  return sub_24F774DA0((uint64_t)v4, &qword_26B1F7AC0);
}

uint64_t sub_24F7B625C(uint64_t a1, uint64_t a2)
{
  v5[3] = MEMORY[0x263F8D310];
  v5[4] = &protocol witness table for String;
  v5[0] = a1;
  v5[1] = a2;
  sub_24F775458(v2 + 24, (uint64_t)v4);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_24F7B4D70((uint64_t)v5, v4);
  swift_release();
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v4);
  return sub_24F774DA0((uint64_t)v5, &qword_26B1F7AC0);
}

uint64_t sub_24F7B62FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_24F775458(v3 + 24, (uint64_t)v8);
  swift_retain();
  sub_24F7B4ED8(a1, v8, a2, a3);
  _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v8);
  return swift_release();
}

uint64_t sub_24F7B638C()
{
  return sub_24F7B5E78();
}

uint64_t sub_24F7B63B0(char a1)
{
  return sub_24F7B5F00(a1);
}

uint64_t sub_24F7B63D4(uint64_t a1, uint64_t a2)
{
  return sub_24F7B625C(a1, a2);
}

uint64_t sub_24F7B63F8(double a1)
{
  return sub_24F7B61C8(a1);
}

uint64_t sub_24F7B641C(float a1)
{
  return sub_24F7B6134(a1);
}

uint64_t sub_24F7B6440(uint64_t a1)
{
  return sub_24F7B5F94(a1, MEMORY[0x263F8D6C8], (uint64_t)&protocol witness table for Int);
}

uint64_t sub_24F7B6474(uint64_t a1)
{
  return sub_24F7B5FFC(a1, MEMORY[0x263F8E498], (uint64_t)&protocol witness table for Int8);
}

uint64_t sub_24F7B64A8(uint64_t a1)
{
  return sub_24F7B6064(a1, MEMORY[0x263F8E4F0], (uint64_t)&protocol witness table for Int16);
}

uint64_t sub_24F7B64DC(uint64_t a1)
{
  return sub_24F7B60CC(a1, MEMORY[0x263F8E548], (uint64_t)&protocol witness table for Int32);
}

uint64_t sub_24F7B6510(uint64_t a1)
{
  return sub_24F7B5F94(a1, MEMORY[0x263F8E5C0], (uint64_t)&protocol witness table for Int64);
}

uint64_t sub_24F7B6544()
{
  return sub_24F8CFD50();
}

uint64_t sub_24F7B655C(uint64_t a1)
{
  return sub_24F7B5F94(a1, MEMORY[0x263F8D9D0], (uint64_t)&protocol witness table for UInt);
}

uint64_t sub_24F7B6590(uint64_t a1)
{
  return sub_24F7B5FFC(a1, MEMORY[0x263F8E778], (uint64_t)&protocol witness table for UInt8);
}

uint64_t sub_24F7B65C4(uint64_t a1)
{
  return sub_24F7B6064(a1, MEMORY[0x263F8E888], (uint64_t)&protocol witness table for UInt16);
}

uint64_t sub_24F7B65F8(uint64_t a1)
{
  return sub_24F7B60CC(a1, MEMORY[0x263F8E8F8], (uint64_t)&protocol witness table for UInt32);
}

uint64_t sub_24F7B662C(uint64_t a1)
{
  return sub_24F7B5F94(a1, MEMORY[0x263F8E970], (uint64_t)&protocol witness table for UInt64);
}

uint64_t sub_24F7B6660()
{
  return sub_24F8CFD60();
}

uint64_t sub_24F7B6678(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24F7B62FC(a1, a2, a3);
}

unint64_t sub_24F7B669C()
{
  unint64_t result = qword_26B1F5590;
  if (!qword_26B1F5590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B1F5590);
  }
  return result;
}

unint64_t sub_24F7B66E8()
{
  unint64_t result = qword_26B1F6F60;
  if (!qword_26B1F6F60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B1F6F60);
  }
  return result;
}

void sub_24F7B6734(void *a1, uint64_t a2, char a3)
{
  if (a3 == 1)
  {
    swift_release();
  }
  else if (!a3)
  {
  }
}

uint64_t type metadata accessor for RecordEncoder.KeyedContainer()
{
  return swift_getGenericMetadata();
}

uint64_t sub_24F7B676C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 40);
}

uint64_t sub_24F7B6774(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 40);
}

uint64_t SQLSelectable<>.sqlSelection.getter()
{
  sub_24F7739E0();
  sub_24F782E40();
  sub_24F770DF4();
  sub_24F771D60();
  MEMORY[0x270FA5388](v0);
  sub_24F77FBD8();
  uint64_t v1 = sub_24F77DDE0();
  v2(v1);
  uint64_t v3 = sub_24F77E6DC();
  return v4(v3);
}

uint64_t SQLOrderingTerm<>.sqlOrdering.getter()
{
  sub_24F7739E0();
  sub_24F782E40();
  sub_24F770DF4();
  sub_24F771D60();
  MEMORY[0x270FA5388](v0);
  sub_24F77FBD8();
  uint64_t v1 = sub_24F77DDE0();
  v2(v1);
  uint64_t v3 = sub_24F77E6DC();
  return v4(v3);
}

uint64_t SQLExpressible<>.sqlExpression.getter()
{
  sub_24F7739E0();
  sub_24F782E40();
  sub_24F770DF4();
  sub_24F771D60();
  MEMORY[0x270FA5388](v0);
  sub_24F77FBD8();
  uint64_t v1 = sub_24F77DDE0();
  v2(v1);
  uint64_t v3 = sub_24F77E6DC();
  return v4(v3);
}

uint64_t StatementBinding<>.bind(to:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_24F770DF4();
  uint64_t v11 = v10;
  sub_24F771D60();
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v17 - v13;
  sub_24F8CF060();
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 8))(a1, a2, AssociatedTypeWitness, a6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, AssociatedTypeWitness);
  return v15;
}

uint64_t DatabaseValueConvertible<>.databaseValue.getter()
{
  sub_24F7739E0();
  sub_24F782E40();
  sub_24F770DF4();
  sub_24F771D60();
  MEMORY[0x270FA5388](v0);
  sub_24F77FBD8();
  uint64_t v1 = sub_24F77DDE0();
  v2(v1);
  uint64_t v3 = sub_24F77E6DC();
  return v4(v3);
}

uint64_t static DatabaseValueConvertible<>.fromDatabaseValue(_:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7 = v6;
  uint64_t v23 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = sub_24F8CF610();
  sub_24F770DF4();
  uint64_t v16 = v15;
  sub_24F771D60();
  MEMORY[0x270FA5388](v17);
  long long v19 = (char *)&v22 - v18;
  LOBYTE(v18) = *((unsigned char *)a1 + 16);
  long long v30 = *a1;
  char v31 = v18;
  (*(void (**)(long long *, uint64_t, uint64_t))(a5 + 32))(&v30, AssociatedTypeWitness, a5);
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  uint64_t v28 = a5;
  uint64_t v29 = v7;
  sub_24F77AAC0((void (*)(char *, char *))sub_24F7B6D90, (uint64_t)v24, MEMORY[0x263F8E628], a2, v20, v23);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, v14);
}

uint64_t sub_24F7B6C88(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - v3, a1);
  return sub_24F8CF070();
}

uint64_t sub_24F7B6D90(uint64_t a1)
{
  return sub_24F7B6C88(a1);
}

uint64_t RangeReplaceableCollection.init<A>(_:minimumCapacity:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  sub_24F8CF490();
  sub_24F8CF460();
  sub_24F7708F0();
  sub_24F77B4D8();
  v5();
  uint64_t result = swift_unknownObjectRelease();
  if (v2)
  {
    sub_24F773974();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a2, a1);
  }
  return result;
}

uint64_t Dictionary.init<A>(grouping:by:)()
{
  sub_24F7854A8();
  sub_24F7BD6B4();
  swift_getAssociatedTypeWitness();
  sub_24F8CF1B0();
  sub_24F8CEC30();
  sub_24F773464();
  sub_24F77ADBC();
  v1();
  swift_unknownObjectRelease();
  if (v0) {
    swift_bridgeObjectRelease();
  }
  return sub_24F775FA4();
}

uint64_t sub_24F7B6F84(uint64_t a1)
{
  return sub_24F7B7434(a1, &unk_270108E20, &unk_270108E48, sub_24F7BD538);
}

uint64_t Dictionary.init<A>(minimumCapacity:grouping:by:)()
{
  sub_24F7BD6B4();
  swift_getAssociatedTypeWitness();
  sub_24F8CF1B0();
  sub_24F8CEC60();
  sub_24F773464();
  sub_24F77ADBC();
  v1();
  swift_unknownObjectRelease();
  if (v0) {
    swift_bridgeObjectRelease();
  }
  return sub_24F775FA4();
}

void sub_24F7B70C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  sub_24F76FF94();
  unint64_t v63 = v25;
  uint64_t v64 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v66 = v30;
  uint64_t v32 = v31;
  uint64_t v62 = v33;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_24F77AD10();
  v61[3] = v34;
  sub_24F771D60();
  MEMORY[0x270FA5388](v35);
  uint64_t v67 = (char *)v61 - v36;
  sub_24F77AD10();
  uint64_t v38 = v37;
  uint64_t v40 = MEMORY[0x270FA5388](v39);
  uint64_t v42 = (char *)v61 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v40);
  unsigned __int8 v44 = (char *)v61 - v43;
  v29(v32);
  if (v23)
  {
LABEL_9:
    sub_24F77BC10();
    return;
  }
  v61[0] = v42;
  v61[1] = 0;
  v61[2] = v38;
  unint64_t v45 = (void *)swift_allocObject();
  uint64_t v46 = v62;
  unint64_t v47 = v63;
  v45[2] = v27;
  v45[3] = v46;
  uint64_t v48 = v64;
  v45[4] = v64;
  v45[5] = v47;
  sub_24F77529C();
  v49();
  uint64_t v50 = (void *)swift_allocObject();
  v50[2] = v27;
  v50[3] = v46;
  v50[4] = v48;
  v50[5] = v47;
  v50[6] = a23;
  v50[7] = v45;
  uint64_t v62 = v45;
  unint64_t v51 = v66;
  swift_isUniquelyReferenced_nonNull_native();
  uint64_t v52 = *v51;
  uint64_t v68 = *v51;
  *unint64_t v51 = 0x8000000000000000;
  unint64_t v63 = sub_24F7BCD64((uint64_t)v44, v27, v48);
  if (__OFADD__(*(void *)(v52 + 16), (v53 & 1) == 0))
  {
    __break(1u);
  }
  else
  {
    char v54 = v53;
    sub_24F8CF1B0();
    sub_24F8CF9C0();
    char v55 = sub_24F8CF980();
    uint64_t v56 = v66;
    if ((v55 & 1) == 0 || (unint64_t v63 = sub_24F7BCD64((uint64_t)v44, v27, v48), (v54 & 1) == (v57 & 1)))
    {
      *uint64_t v56 = v68;
      swift_bridgeObjectRelease();
      if (v54)
      {
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v58 = swift_bridgeObjectRetain();
        ((void (*)(uint64_t))v50[6])(v58);
        sub_24F7BD560();
        v59();
        sub_24F772D84();
        sub_24F8CF9B0();
      }
      swift_bridgeObjectRelease();
      sub_24F8CF170();
      sub_24F7802E0();
      v60();
      swift_release();
      swift_release();
      goto LABEL_9;
    }
  }
  sub_24F8CFEA0();
  __break(1u);
}

uint64_t sub_24F7B73F8(uint64_t a1)
{
  return sub_24F7B7434(a1, &unk_270108DD0, &unk_270108DF8, sub_24F7BD4B8);
}

#error "24F7B7468: call analysis failed (funcsize=17)"

uint64_t sub_24F7B7478()
{
  swift_getAssociatedTypeWitness();
  return sub_24F8CF110();
}

uint64_t Dictionary.init<A>(uniqueKeysWithValues:)()
{
  sub_24F7BD58C();
  uint64_t v1 = sub_24F8CEC30();
  sub_24F7735D4(v1);
  sub_24F773464();
  sub_24F77ADBC();
  v2();
  swift_unknownObjectRelease();
  if (v0) {
    swift_bridgeObjectRelease();
  }
  return sub_24F775FA4();
}

uint64_t sub_24F7B7588(uint64_t a1, uint64_t a2)
{
  return sub_24F7B7908(a1, a2);
}

uint64_t sub_24F7B7590(uint64_t a1)
{
  return sub_24F7B793C(a1);
}

uint64_t Dictionary.init<A>(minimumCapacity:uniqueKeysWithValues:)()
{
  sub_24F7854A8();
  uint64_t v1 = sub_24F8CEC60();
  sub_24F7735D4(v1);
  sub_24F773464();
  sub_24F77ADBC();
  v2();
  swift_unknownObjectRelease();
  if (v0) {
    swift_bridgeObjectRelease();
  }
  return sub_24F775FA4();
}

uint64_t sub_24F7B7660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_24F77AD10();
  uint64_t v31 = v10;
  uint64_t v32 = v9;
  MEMORY[0x270FA5388](v11);
  sub_24F7806BC(v12, v30[0]);
  MEMORY[0x270FA5388](v13);
  v30[0] = (uint64_t)v30 - v14;
  sub_24F77AD10();
  uint64_t v16 = v15;
  MEMORY[0x270FA5388](v17);
  sub_24F76B830();
  uint64_t v20 = v19 - v18;
  uint64_t v21 = sub_24F8CF610();
  sub_24F77AD10();
  uint64_t v23 = v22;
  sub_24F771D60();
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = (char *)v30 - v25;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v20, a2, a5);
  sub_24F8CECB0();
  sub_24F8CEC50();
  LODWORD(a2) = sub_24F777048((uint64_t)v26, 1, a5);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v26, v21);
  if (a2 != 1)
  {
    uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16);
    uint64_t v29 = v30[0];
    v28(v30[0], a1, a4);
    unint64_t v33 = 0;
    unint64_t v34 = 0xE000000000000000;
    sub_24F8CF7D0();
    swift_bridgeObjectRelease();
    unint64_t v33 = 0xD00000000000001BLL;
    unint64_t v34 = 0x800000024F8D1240;
    v28(v30[1], v29, a4);
    sub_24F8CEDF0();
    sub_24F8CEEB0();
    swift_bridgeObjectRelease();
    sub_24F8CEEB0();
    uint64_t result = sub_24F8CF9D0();
    __break(1u);
  }
  return result;
}

uint64_t sub_24F7B7900(uint64_t a1, uint64_t a2)
{
  return sub_24F7B7908(a1, a2);
}

uint64_t sub_24F7B7908(uint64_t a1, uint64_t a2)
{
  return sub_24F7B7660(a1, a2, v2[7], v2[2], v2[3]);
}

uint64_t sub_24F7B793C(uint64_t a1)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 56);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return v3(a1, a1 + *(int *)(TupleTypeMetadata2 + 48));
}

uint64_t Set.init<A>(_:)()
{
  sub_24F7BD57C();
  sub_24F8CEC40();
  sub_24F773464();
  sub_24F77ADBC();
  v1();
  swift_unknownObjectRelease();
  if (v0) {
    swift_bridgeObjectRelease();
  }
  return sub_24F775FA4();
}

uint64_t sub_24F7B7A40(uint64_t a1)
{
  return sub_24F7B7C04(a1);
}

uint64_t Set.init<A>(_:minimumCapacity:)()
{
  sub_24F7BD58C();
  sub_24F8CF300();
  sub_24F773464();
  sub_24F77ADBC();
  v1();
  swift_unknownObjectRelease();
  if (v0) {
    swift_bridgeObjectRelease();
  }
  return sub_24F775FA4();
}

uint64_t sub_24F7B7AFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_24F77AD10();
  uint64_t v5 = v4;
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v12 - v8;
  sub_24F7BD560();
  v10();
  sub_24F8CF320();
  sub_24F8CF310();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v9, a3);
}

uint64_t sub_24F7B7C04(uint64_t a1)
{
  return sub_24F7B7AFC(a1, *(void *)(v1 + 48), *(void *)(v1 + 16));
}

uint64_t Sequence.flatMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_24F77AD10();
  uint64_t v13 = v12;
  MEMORY[0x270FA5388](v14);
  sub_24F76B830();
  uint64_t v17 = v16 - v15;
  sub_24F7BD6A8();
  swift_getAssociatedTypeWitness();
  uint64_t v18 = type metadata accessor for AnyCursor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v17, v6, a3);
  AnyCursor.__allocating_init<A>(_:)();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v20 = Cursor.flatMap<A>(_:)(a1, a2, v18, a4, WitnessTable, a6);
  swift_release();
  return v20;
}

uint64_t type metadata accessor for AnyCursor()
{
  return sub_24F777DE0();
}

uint64_t AnyCursor.__allocating_init<A>(_:)()
{
  sub_24F77AD10();
  MEMORY[0x270FA5388](v0);
  sub_24F76B830();
  swift_getAssociatedTypeWitness();
  sub_24F773974();
  sub_24F771D60();
  MEMORY[0x270FA5388](v1);
  sub_24F7BD53C();
  sub_24F7BD560();
  v2();
  sub_24F8CEFB0();
  swift_getAssociatedConformanceWitness();
  uint64_t v3 = AnyCursor.__allocating_init<A>(iterator:)();
  sub_24F7802E0();
  v4();
  return v3;
}

{
  uint64_t v0;

  sub_24F7BD54C();
  uint64_t v0 = swift_allocObject();
  AnyCursor.init<A>(_:)();
  return v0;
}

uint64_t Cursor.flatMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_24F7BD57C();
  uint64_t v12 = (void *)swift_allocObject();
  long long v12[2] = v6;
  void v12[3] = a4;
  v12[4] = a5;
  uint64_t v12[5] = a6;
  _DWORD v12[6] = v8;
  void v12[7] = v7;
  Cursor.map<A>(_:)((uint64_t)sub_24F7BAFC4, (uint64_t)v12);
  swift_retain();
  swift_release();
  sub_24F77290C();
  type metadata accessor for MapCursor();
  swift_getWitnessTable();
  uint64_t v13 = Cursor<>.joined()();
  swift_release();
  return v13;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v12;
  uint64_t v13;
  uint64_t WitnessTable;
  uint64_t v15;

  sub_24F7BD57C();
  uint64_t v12 = (void *)swift_allocObject();
  long long v12[2] = v6;
  void v12[3] = a4;
  v12[4] = a5;
  uint64_t v12[5] = a6;
  _DWORD v12[6] = v8;
  void v12[7] = v7;
  swift_getAssociatedTypeWitness();
  uint64_t v13 = type metadata accessor for AnyCursor();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v15 = Cursor.flatMap<A>(_:)((uint64_t)sub_24F7BCF9C, (uint64_t)v12, v6, v13, a5, WitnessTable);
  swift_release();
  return v15;
}

void sub_24F7B7FCC()
{
}

uint64_t sub_24F7B7FE4(void (*a1)(uint64_t *))
{
  uint64_t result = sub_24F7726C0();
  if (!v1)
  {
    for (uint64_t i = result; i; uint64_t i = result)
    {
      uint64_t v5 = i;
      a1(&v5);
      swift_release();
      uint64_t result = sub_24F7726C0();
    }
  }
  return result;
}

void Cursor.forEach(_:)()
{
  sub_24F76FF94();
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v28 = v7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_24F8CF610();
  sub_24F77AD10();
  v23[1] = v10;
  void v23[2] = v9;
  sub_24F771D60();
  MEMORY[0x270FA5388](v11);
  sub_24F77C634();
  sub_24F77AD10();
  uint64_t v24 = v12;
  sub_24F771D60();
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)v23 - v14;
  uint64_t v16 = *(void (**)(uint64_t))(v4 + 16);
  uint64_t v17 = sub_24F780DA0();
  v16(v17);
  if (!v1)
  {
    uint64_t v25 = v6;
    uint64_t v26 = v4;
    uint64_t v27 = v0;
    uint64_t v18 = (void (**)(char *, uint64_t, uint64_t))(v24 + 32);
    while (1)
    {
      sub_24F77EDF0(v2, 1, AssociatedTypeWitness);
      if (v19) {
        break;
      }
      (*v18)(v15, v2, AssociatedTypeWitness);
      v28(v15);
      uint64_t v20 = sub_24F775FB0();
      v21(v20);
      ((void (*)(uint64_t, uint64_t))v16)(v25, v26);
    }
    sub_24F7739F4();
    v22();
  }
  sub_24F77BC10();
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Cursor.isEmpty()()
{
  sub_24F7BD6B4();
  swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_24F780B7C();
  sub_24F77AD10();
  uint64_t v5 = v4;
  sub_24F771D60();
  MEMORY[0x270FA5388](v6);
  sub_24F774644();
  sub_24F781384();
  v7();
  if (!v0)
  {
    sub_24F77EDF0(v2, 1, v1);
    if (v8) {
      LOBYTE(v1) = 1;
    }
    else {
      LOBYTE(v1) = 0;
    }
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v3);
  }
  return v1 & 1;
}

void Cursor.contains(where:)()
{
  sub_24F76FF94();
  uint64_t v3 = v2;
  uint64_t v23 = v4;
  uint64_t v24 = v5;
  uint64_t v26 = v6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_24F8CF610();
  sub_24F77AD10();
  v22[1] = v9;
  v22[2] = v8;
  sub_24F771D60();
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)v22 - v11;
  sub_24F77AD10();
  sub_24F771D60();
  MEMORY[0x270FA5388](v13);
  sub_24F785020();
  uint64_t v27 = v3;
  uint64_t v25 = *(void *)(v3 + 16);
  do
  {
    uint64_t v14 = sub_24F778C60();
    v15(v14);
    if (v0) {
      break;
    }
    sub_24F77EDF0((uint64_t)v12, 1, AssociatedTypeWitness);
    if (v16)
    {
      sub_24F7739F4();
      v21();
      break;
    }
    sub_24F7BD5D8();
    v17();
    char v18 = v23(v1);
    uint64_t v19 = sub_24F774F28();
    v20(v19);
  }
  while ((v18 & 1) == 0);
  sub_24F772220();
  sub_24F77BC10();
}

uint64_t Cursor.enumerated()()
{
  uint64_t v0 = type metadata accessor for EnumeratedCursor();
  sub_24F7B8528();
  sub_24F76BAAC();
  return v0;
}

uint64_t sub_24F7B8528()
{
  uint64_t result = sub_24F7754EC();
  *(void *)(result + 16) = v0;
  *(void *)(result + 24) = 0;
  return result;
}

uint64_t Cursor.filter(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_24F7B8AB4(a1, a2, a3, a4, (uint64_t)type metadata accessor for FilterCursor, sub_24F7B8578);
}

void Cursor.first(where:)()
{
  sub_24F76FF94();
  uint64_t v5 = v4;
  uint64_t v21 = v6;
  uint64_t v19 = v7;
  swift_getAssociatedTypeWitness();
  sub_24F777250();
  sub_24F77AD10();
  sub_24F771D60();
  MEMORY[0x270FA5388](v8);
  sub_24F77BF80();
  sub_24F77AD10();
  uint64_t v20 = v9;
  sub_24F771D60();
  MEMORY[0x270FA5388](v10);
  sub_24F7BD53C();
  uint64_t v11 = *(void (**)(void))(v5 + 16);
  sub_24F7BD650();
  v11();
  if (!v1)
  {
    while (1)
    {
      sub_24F77EDF0(v0, 1, v2);
      uint64_t v12 = v2;
      if (v13)
      {
        sub_24F7739F4();
        v16();
        uint64_t v17 = 1;
        uint64_t v18 = v19;
        goto LABEL_7;
      }
      uint64_t v14 = *(void (**)(void))(v20 + 32);
      sub_24F7BD5D8();
      v14();
      if (v21(v3)) {
        break;
      }
      uint64_t v2 = v12;
      sub_24F7739F4();
      v15();
      sub_24F7BD650();
      v11();
    }
    uint64_t v18 = v19;
    sub_24F7BD5D8();
    v14();
    uint64_t v17 = 0;
LABEL_7:
    sub_24F7771BC(v18, v17, 1, v12);
  }
  sub_24F77BC10();
}

uint64_t Cursor.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  sub_24F8CF610();
  sub_24F77290C();
  Cursor.map<A>(_:)(v3, v4);
  uint64_t v5 = (void *)sub_24F7818CC();
  sub_24F7BD5FC(v5);
  uint64_t v6 = type metadata accessor for MapCursor();
  uint64_t WitnessTable = swift_getWitnessTable();
  Cursor.filter(_:)((uint64_t)sub_24F7BB04C, a2, v6, WitnessTable);
  swift_release();
  swift_release();
  uint64_t v8 = (void *)sub_24F7818CC();
  sub_24F7BD5FC(v8);
  type metadata accessor for FilterCursor();
  swift_getWitnessTable();
  uint64_t v9 = Cursor.map<A>(_:)((uint64_t)sub_24F7BB08C, a2);
  swift_release();
  swift_release();
  return v9;
}

uint64_t Cursor.map<A>(_:)(uint64_t a1, uint64_t a2)
{
  sub_24F7BD694();
  uint64_t v4 = type metadata accessor for MapCursor();
  uint64_t v5 = v2;
  uint64_t v6 = v2;
  uint64_t v7 = v4;
  sub_24F7B8578(v5, v6, a2);
  sub_24F76BAAC();
  swift_retain();
  return v7;
}

uint64_t sub_24F7B8964@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_24F8CF610();
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)v11 - v7;
  (*(void (**)(char *, uint64_t))(v9 + 16))((char *)v11 - v7, a1);
  uint64_t result = sub_24F777048((uint64_t)v8, 1, a2);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(a2 - 8) + 32))(a3, v8, a2);
  }
  __break(1u);
  return result;
}

uint64_t Cursor.drop(while:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_24F7B8AB4(a1, a2, a3, a4, (uint64_t)type metadata accessor for DropWhileCursor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_24F7B8B24);
}

uint64_t sub_24F7B8AB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = sub_24F7BD694();
  v10(v9);
  uint64_t v11 = a6(v6, v6, a2);
  swift_unknownObjectRetain();
  swift_retain();
  return v11;
}

uint64_t Cursor.dropFirst(_:)(uint64_t a1)
{
  type metadata accessor for DropFirstCursor();
  uint64_t v2 = sub_24F7BD610();
  sub_24F7B8B64(v2, v3);
  sub_24F76BAAC();
  return a1;
}

uint64_t sub_24F7B8B64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24F7818CC();
  sub_24F7BB4D0(a1, a2);
  return v4;
}

uint64_t Cursor.dropFirst()()
{
  return Cursor.dropFirst(_:)(1);
}

void Cursor.dropLast(_:)()
{
  sub_24F76FF94();
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  swift_getAssociatedTypeWitness();
  sub_24F7760C8();
  sub_24F77AD10();
  sub_24F771D60();
  MEMORY[0x270FA5388](v10);
  sub_24F7BD56C();
  sub_24F77AD10();
  uint64_t v39 = v11;
  MEMORY[0x270FA5388](v12);
  sub_24F7829EC();
  uint64_t v48 = v13;
  sub_24F77D6F0();
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)v38 - v17;
  if (v9 < 0)
  {
    sub_24F778D58();
    sub_24F8CF9D0();
    __break(1u);
  }
  else
  {
    if (v9)
    {
      v38[0] = v16;
      v38[1] = v15;
      uint64_t v47 = v9;
      uint64_t v44 = sub_24F8CF110();
      uint64_t v49 = sub_24F8CF110();
      swift_bridgeObjectRetain();
      uint64_t v46 = sub_24F8CF090();
      swift_bridgeObjectRelease();
      uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v5 + 16);
      v19(v7, v5);
      if (v1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v40 = v39 + 32;
        uint64_t v41 = v19;
        uint64_t v43 = v0;
        uint64_t v44 = v39 + 8;
        v38[2] = v39 + 16;
        v38[3] = v39 + 24;
        uint64_t v42 = v7;
        v38[4] = v5 + 16;
        for (uint64_t i = v5; ; v41(v42, i))
        {
          sub_24F77EDF0(v3, 1, v2);
          if (v22) {
            break;
          }
          sub_24F76BAA0();
          v23();
          uint64_t v24 = swift_bridgeObjectRetain();
          uint64_t v25 = MEMORY[0x2533639A0](v24, v2);
          swift_bridgeObjectRelease();
          uint64_t v26 = v47;
          if (v25 >= v47)
          {
            uint64_t v29 = v46;
            sub_24F7BD5C8();
            sub_24F8CF1F0();
            sub_24F8CF1B0();
            sub_24F8CF170();
            sub_24F8CF100();
            uint64_t v30 = v49;
            unint64_t v31 = sub_24F7BD5C8();
            sub_24F7BCF48(v31, v32);
            char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
            uint64_t v34 = v30 & 0xFFFFFFFFFFFFFF8;
            if ((isClassOrObjCExistentialType & 1) == 0) {
              uint64_t v34 = v30;
            }
            (*(void (**)(unint64_t, char *, uint64_t))(v39 + 24))(v34+ ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80))+ *(void *)(v39 + 72) * v29, v18, v2);
            swift_bridgeObjectRetain();
            sub_24F7BD5C8();
            uint64_t v35 = sub_24F8CF160();
            swift_bridgeObjectRelease();
            sub_24F7739F4();
            v36();
            uint64_t v46 = v35 % v26;
          }
          else
          {
            sub_24F77529C();
            v27();
            sub_24F8CF1B0();
            sub_24F8CF170();
            sub_24F7739F4();
            v28();
          }
        }
        sub_24F7739F4();
        v37();
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      sub_24F8CF1B0();
      swift_unknownObjectRetain();
      swift_getWitnessTable();
      sub_24F772D84();
      RangeReplaceableCollection.init<A>(_:)(v20, v21);
    }
    sub_24F7BD65C();
    sub_24F77BC10();
  }
}

void Cursor.dropLast()()
{
}

uint64_t sub_24F7B911C(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1);
  uint64_t result = v3(v2);
  if (!v1)
  {
    swift_getAssociatedTypeWitness();
    type metadata accessor for AnyCursor();
    return AnyCursor.__allocating_init<A>(_:)();
  }
  return result;
}

uint64_t Cursor<>.joined()()
{
  uint64_t v0 = type metadata accessor for FlattenCursor();
  sub_24F7B8528();
  sub_24F76BAAC();
  return v0;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_24F774430();
  uint64_t v3 = (void *)sub_24F7818CC();
  _OWORD v3[2] = v2;
  v3[3] = v1;
  v3[4] = v0;
  swift_getAssociatedTypeWitness();
  sub_24F77290C();
  uint64_t v8 = Cursor.flatMap<A>(_:)(v4, v5, v6, v7, v1, v0);
  swift_release();
  return v8;
}

void *sub_24F7B923C()
{
  sub_24F7BD54C();
  uint64_t result = (void *)sub_24F7818CC();
  result[2] = v2;
  result[3] = v1;
  result[4] = v0;
  return result;
}

void Cursor.max(by:)()
{
  sub_24F76FF94();
  sub_24F7BD5B0(v7, v8, v9);
  swift_getAssociatedTypeWitness();
  sub_24F7760C8();
  sub_24F77AD10();
  uint64_t v38 = v11;
  uint64_t v39 = v10;
  MEMORY[0x270FA5388](v10);
  sub_24F7806BC(v12, v36);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v36 - v14;
  sub_24F77AD10();
  uint64_t v37 = v16;
  MEMORY[0x270FA5388](v17);
  sub_24F77CD88();
  MEMORY[0x270FA5388](v18);
  uint64_t v19 = sub_24F770EDC();
  v3(v19);
  if (!v2)
  {
    uint64_t v41 = v3;
    uint64_t v42 = v1;
    uint64_t v36 = v4;
    uint64_t v46 = v6;
    uint64_t v20 = v43;
    uint64_t v44 = v0;
    sub_24F77EDF0((uint64_t)v15, 1, (uint64_t)v5);
    if (v21)
    {
      sub_24F7739F4();
      v22();
      uint64_t v23 = v40;
      uint64_t v24 = 1;
    }
    else
    {
      uint64_t v25 = sub_24F77B83C();
      ((void (*)(uint64_t))v5)(v25);
      uint64_t v26 = sub_24F77BF5C();
      v27(v26);
      uint64_t v37 = (void (**)(void))(v15 - 24);
      while (1)
      {
        sub_24F77EDF0(v20, 1, (uint64_t)v5);
        if (v21) {
          break;
        }
        uint64_t v28 = v46;
        sub_24F77BC28();
        v5();
        char v29 = v45(v44, v28);
        uint64_t v30 = *v37;
        if (v29)
        {
          uint64_t v31 = sub_24F780A90();
          ((void (*)(uint64_t))v30)(v31);
          sub_24F77BC28();
          v5();
        }
        else
        {
          sub_24F7BD668();
          v30();
        }
        uint64_t v32 = sub_24F76B6A0();
        v33(v32);
      }
      sub_24F7739F4();
      v34();
      uint64_t v35 = v40;
      sub_24F77BC28();
      v5();
      uint64_t v23 = v35;
      uint64_t v24 = 0;
    }
    sub_24F7771BC(v23, v24, 1, (uint64_t)v5);
  }
  sub_24F77BC10();
}

void Cursor.min(by:)()
{
  sub_24F76FF94();
  sub_24F7BD5B0(v7, v8, v9);
  swift_getAssociatedTypeWitness();
  sub_24F7760C8();
  sub_24F77AD10();
  uint64_t v38 = v11;
  uint64_t v39 = v10;
  MEMORY[0x270FA5388](v10);
  sub_24F7806BC(v12, v36);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v36 - v14;
  sub_24F77AD10();
  uint64_t v37 = v16;
  MEMORY[0x270FA5388](v17);
  sub_24F77CD88();
  MEMORY[0x270FA5388](v18);
  uint64_t v19 = sub_24F770EDC();
  v3(v19);
  if (!v2)
  {
    uint64_t v41 = v3;
    uint64_t v42 = v1;
    uint64_t v36 = v4;
    uint64_t v46 = v6;
    uint64_t v20 = v43;
    uint64_t v44 = v0;
    sub_24F77EDF0((uint64_t)v15, 1, (uint64_t)v5);
    if (v21)
    {
      sub_24F7739F4();
      v22();
      uint64_t v23 = v40;
      uint64_t v24 = 1;
    }
    else
    {
      uint64_t v25 = sub_24F77B83C();
      ((void (*)(uint64_t))v5)(v25);
      uint64_t v26 = sub_24F77BF5C();
      v27(v26);
      uint64_t v37 = (void (**)(void))(v15 - 24);
      while (1)
      {
        sub_24F77EDF0(v20, 1, (uint64_t)v5);
        if (v21) {
          break;
        }
        uint64_t v28 = v46;
        sub_24F77BC28();
        v5();
        char v29 = v45(v28, v44);
        uint64_t v30 = *v37;
        if (v29)
        {
          uint64_t v31 = sub_24F780A90();
          ((void (*)(uint64_t))v30)(v31);
          sub_24F77BC28();
          v5();
        }
        else
        {
          sub_24F7BD668();
          v30();
        }
        uint64_t v32 = sub_24F76B6A0();
        v33(v32);
      }
      sub_24F7739F4();
      v34();
      uint64_t v35 = v40;
      sub_24F77BC28();
      v5();
      uint64_t v23 = v35;
      uint64_t v24 = 0;
    }
    sub_24F7771BC(v23, v24, 1, (uint64_t)v5);
  }
  sub_24F77BC10();
}

uint64_t Cursor.prefix(_:)(uint64_t a1)
{
  type metadata accessor for PrefixCursor();
  uint64_t v2 = sub_24F7BD610();
  sub_24F7B97CC(v2, v3);
  sub_24F76BAAC();
  return a1;
}

void *sub_24F7B97CC(uint64_t a1, uint64_t a2)
{
  uint64_t result = (void *)sub_24F7818CC();
  result[3] = a2;
  result[4] = 0;
  result[2] = a1;
  return result;
}

uint64_t Cursor.prefix(while:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_24F7B8AB4(a1, a2, a3, a4, (uint64_t)type metadata accessor for PrefixWhileCursor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_24F7B8B24);
}

uint64_t sub_24F7B9834()
{
  sub_24F7BD54C();
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 40) = 0;
  *(void *)(result + 16) = v2;
  *(void *)(result + 24) = v1;
  *(void *)(result + 32) = v0;
  return result;
}

void Cursor.reduce<A>(_:_:)()
{
  sub_24F76FF94();
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v26 = v7;
  uint64_t v9 = v8;
  sub_24F77AD10();
  uint64_t v11 = v10;
  MEMORY[0x270FA5388](v12);
  sub_24F76B830();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_24F8CF610();
  sub_24F77AD10();
  uint64_t v24 = v15;
  uint64_t v25 = v14;
  sub_24F771D60();
  MEMORY[0x270FA5388](v16);
  sub_24F7BD56C();
  sub_24F77AD10();
  sub_24F771D60();
  MEMORY[0x270FA5388](v17);
  sub_24F774644();
  sub_24F7BD560();
  v18();
  uint64_t v19 = *(void (**)(void))(v4 + 16);
  sub_24F777604();
  v19();
  if (v0)
  {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v6);
  }
  else
  {
    while (1)
    {
      sub_24F77EDF0(v2, 1, AssociatedTypeWitness);
      if (v20) {
        break;
      }
      sub_24F76BAA0();
      v21();
      v26(v9, v1);
      sub_24F7739F4();
      v22();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v6);
      sub_24F76BAA0();
      v23();
      sub_24F777604();
      v19();
    }
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v2, v25);
  }
  sub_24F77BC10();
}

void Cursor.reduce<A>(into:_:)()
{
  sub_24F76FF94();
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v23 = v7;
  uint64_t v9 = v8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_24F8CF610();
  sub_24F77AD10();
  sub_24F771D60();
  MEMORY[0x270FA5388](v11);
  sub_24F77BF80();
  sub_24F77AD10();
  uint64_t v22 = v12;
  sub_24F771D60();
  MEMORY[0x270FA5388](v13);
  sub_24F7BD53C();
  uint64_t v14 = v6;
  uint64_t v15 = *(void *)(v6 - 8);
  uint64_t v16 = v14;
  sub_24F7BD560();
  v17();
  uint64_t v18 = *(void (**)(void))(v4 + 16);
  sub_24F777604();
  v18();
  if (v1)
  {
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v9, v16);
  }
  else
  {
    while (1)
    {
      sub_24F77EDF0(v0, 1, AssociatedTypeWitness);
      if (v19) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32))(v2, v0, AssociatedTypeWitness);
      v23(v9, v2);
      sub_24F7BD644();
      v20();
      sub_24F777604();
      v18();
    }
    sub_24F7739F4();
    v21();
  }
  sub_24F77BC10();
}

void Cursor.suffix(_:)()
{
  sub_24F76FF94();
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  swift_getAssociatedTypeWitness();
  sub_24F780B7C();
  sub_24F77AD10();
  sub_24F771D60();
  MEMORY[0x270FA5388](v10);
  sub_24F77C634();
  sub_24F77AD10();
  uint64_t v54 = v11;
  MEMORY[0x270FA5388](v12);
  sub_24F7829EC();
  v53[5] = v13;
  sub_24F77D6F0();
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)v53 - v17;
  if ((v9 & 0x8000000000000000) == 0)
  {
    if (v9)
    {
      v53[0] = v16;
      v53[1] = v15;
      uint64_t v64 = sub_24F8CF110();
      uint64_t v19 = sub_24F8CF1B0();
      uint64_t v61 = v9;
      v53[2] = v19;
      sub_24F8CF0E0();
      swift_bridgeObjectRetain();
      uint64_t v60 = sub_24F8CF090();
      swift_bridgeObjectRelease();
      char v20 = *(void (**)(uint64_t, uint64_t))(v5 + 16);
      uint64_t v58 = v7;
      uint64_t v59 = v0;
      v20(v7, v5);
      char v21 = v20;
      if (!v1)
      {
        uint64_t v56 = v5;
        uint64_t v57 = v54 + 32;
        uint64_t v55 = v54 + 8;
        v53[3] = v54 + 16;
        v53[4] = v54 + 24;
        while (1)
        {
          sub_24F77EDF0(v3, 1, v2);
          if (v22) {
            break;
          }
          sub_24F76BAA0();
          v23();
          uint64_t v24 = swift_bridgeObjectRetain();
          uint64_t v25 = MEMORY[0x2533639A0](v24, v2);
          swift_bridgeObjectRelease();
          if (v25 >= v61)
          {
            sub_24F8CF100();
            unint64_t v28 = v60;
            sub_24F7BCF48(v60, v64);
            char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
            uint64_t v30 = v64 & 0xFFFFFFFFFFFFFF8;
            if ((isClassOrObjCExistentialType & 1) == 0) {
              uint64_t v30 = v64;
            }
            (*(void (**)(unint64_t, char *, uint64_t))(v54 + 24))(v30+ ((*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80))+ *(void *)(v54 + 72) * v28, v18, v2);
            if (__OFADD__(v28, 1))
            {
              __break(1u);
LABEL_22:
              __break(1u);
              goto LABEL_23;
            }
            sub_24F7739F4();
            v31();
            uint64_t v60 = (uint64_t)(v28 + 1) % v61;
          }
          else
          {
            sub_24F77529C();
            v26();
            sub_24F8CF170();
            sub_24F7739F4();
            v27();
          }
          v21(v58, v56);
        }
        sub_24F7739F4();
        v32();
        swift_bridgeObjectRetain();
        uint64_t v33 = sub_24F8CF090();
        swift_bridgeObjectRelease();
        int64_t v34 = v60;
        if (v60 == v33) {
          goto LABEL_16;
        }
        uint64_t v35 = swift_bridgeObjectRetain();
        uint64_t v36 = MEMORY[0x2533639D0](v35, v2);
        swift_bridgeObjectRelease();
        if (v36 < v34) {
          goto LABEL_22;
        }
        uint64_t v37 = sub_24F8CF1E0();
        uint64_t v61 = v38;
        uint64_t v58 = v40;
        uint64_t v59 = v39;
        if ((v34 & 0x8000000000000000) == 0)
        {
          uint64_t v41 = v37;
          uint64_t v42 = sub_24F8CF1E0();
          uint64_t v44 = v43;
          uint64_t v46 = v45;
          uint64_t v48 = v47;
          sub_24F8CF6B0();
          sub_24F8CFAF0();
          swift_allocObject();
          uint64_t v49 = sub_24F8CF0C0();
          uint64_t v50 = v61;
          *unint64_t v51 = v41;
          v51[1] = v50;
          uint64_t v52 = v58;
          void v51[2] = v59;
          v51[3] = v52;
          v51[4] = v42;
          v51[5] = v44;
          v51[6] = v46;
          v51[7] = v48;
          sub_24F83CD04();
          uint64_t v62 = v49;
          sub_24F8CF1B0();
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
          swift_getWitnessTable();
          swift_getWitnessTable();
          sub_24F8CF040();
          uint64_t v62 = v63;
          sub_24F8CF900();
          swift_getWitnessTable();
          sub_24F8CF1D0();
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          goto LABEL_16;
        }
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_24F8CF110();
    }
LABEL_16:
    sub_24F775FA4();
    sub_24F77BC10();
    return;
  }
LABEL_24:
  sub_24F8CF9D0();
  __break(1u);
}

void Cursor<>.contains(_:)()
{
  sub_24F76FF94();
  uint64_t v23 = v2;
  uint64_t v24 = v3;
  uint64_t v5 = v4;
  sub_24F7BD6A8();
  uint64_t v26 = v6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_24F8CF610();
  sub_24F77AD10();
  uint64_t v21 = v9;
  uint64_t v22 = v8;
  sub_24F771D60();
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v20 - v11;
  sub_24F77AD10();
  sub_24F771D60();
  MEMORY[0x270FA5388](v13);
  sub_24F774644();
  uint64_t v27 = v5;
  uint64_t v25 = *(void *)(v5 + 16);
  uint64_t v15 = (void (**)(uint64_t, char *, uint64_t))(v14 + 32);
  uint64_t v16 = (void (**)(uint64_t, uint64_t))(v14 + 8);
  do
  {
    sub_24F778C60();
    sub_24F777604();
    v17();
    if (v0) {
      break;
    }
    sub_24F77EDF0((uint64_t)v12, 1, AssociatedTypeWitness);
    if (v18)
    {
      (*(void (**)(char *, uint64_t))(v21 + 8))(v12, v22);
      break;
    }
    (*v15)(v1, v12, AssociatedTypeWitness);
    char v19 = sub_24F8CED50();
    (*v16)(v1, AssociatedTypeWitness);
  }
  while ((v19 & 1) == 0);
  sub_24F772220();
  sub_24F77BC10();
}

uint64_t Cursor<>.max()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24F7BA5A8(a1, a2, a3, (uint64_t)sub_24F7BD008, (uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t))Cursor.max(by:));
}

uint64_t Cursor<>.min()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24F7BA5A8(a1, a2, a3, (uint64_t)sub_24F7BD4E8, (uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t))Cursor.min(by:));
}

uint64_t sub_24F7BA5A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t *, uint64_t, uint64_t))
{
  uint64_t v9 = a1;
  uint64_t v10 = a2;
  uint64_t v11 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return a5(a4, &v8, v9, v10);
}

uint64_t sub_24F7BA640()
{
  return sub_24F8CED40() & 1;
}

uint64_t sub_24F7BA760@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a2, a1, AssociatedTypeWitness);
}

void Cursor<>.joined(separator:)()
{
  sub_24F76FF94();
  uint64_t v66 = v1;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  unint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_24F8CF610();
  sub_24F77AD10();
  uint64_t v61 = v12;
  uint64_t v62 = v11;
  MEMORY[0x270FA5388](v11);
  sub_24F7829EC();
  uint64_t v60 = v13;
  sub_24F77D6F0();
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)v54 - v16;
  MEMORY[0x270FA5388](v15);
  char v19 = (char *)v54 - v18;
  sub_24F77AD10();
  uint64_t v63 = v20;
  MEMORY[0x270FA5388](v21);
  sub_24F7829EC();
  uint64_t v59 = v22;
  sub_24F77D6F0();
  uint64_t v24 = MEMORY[0x270FA5388](v23);
  MEMORY[0x270FA5388](v24);
  unint64_t v69 = (char *)v54 - v25;
  sub_24F77D6F0();
  MEMORY[0x270FA5388](v26);
  char v29 = (char *)v54 - v28;
  uint64_t v30 = HIBYTE(v7) & 0xF;
  uint64_t v64 = v9;
  if ((v7 & 0x2000000000000000) == 0) {
    uint64_t v30 = v9 & 0xFFFFFFFFFFFFLL;
  }
  if (v30)
  {
    uint64_t v58 = v27;
    uint64_t v70 = 0;
    unint64_t v71 = 0xE000000000000000;
    uint64_t v31 = *(void (**)(void))(v3 + 16);
    sub_24F780DA0();
    uint64_t v33 = v32;
    sub_24F781384();
    v31();
    if (!v0)
    {
      uint64_t v67 = v33;
      uint64_t v68 = v5;
      sub_24F77EDF0((uint64_t)v17, 1, AssociatedTypeWitness);
      if (!v34)
      {
        unint64_t v57 = v7;
        uint64_t v41 = v63;
        uint64_t v42 = v63 + 32;
        uint64_t v43 = v58;
        uint64_t v56 = *(void (**)(uint64_t, char *, uint64_t))(v63 + 32);
        v56(v58, v17, AssociatedTypeWitness);
        uint64_t v55 = *(void (**)(char *, uint64_t, uint64_t))(v41 + 16);
        v55(v69, v43, AssociatedTypeWitness);
        sub_24F771D94();
        uint64_t v66 = v44;
        v54[3] = v45;
        sub_24F8CEF90();
        sub_24F8CEEB0();
        swift_bridgeObjectRelease();
        uint64_t v46 = v60;
        sub_24F781384();
        v31();
        uint64_t v47 = v41 + 16;
        uint64_t v48 = (void (**)(void))(v41 + 8);
        uint64_t v63 = v47;
        uint64_t v65 = v3;
        v54[1] = (unint64_t)v48 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        v54[2] = v42;
        while (1)
        {
          sub_24F77EDF0(v46, 1, AssociatedTypeWitness);
          if (v34) {
            break;
          }
          sub_24F775AF4();
          v50();
          sub_24F8CEEB0();
          sub_24F7BD560();
          v51();
          sub_24F772D84();
          sub_24F8CEF90();
          sub_24F8CEEB0();
          swift_bridgeObjectRelease();
          uint64_t v52 = *v48;
          sub_24F7BD644();
          v52();
          sub_24F781384();
          v31();
        }
        sub_24F7BD644();
        v53();
      }
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v70 = 0;
    unint64_t v71 = 0xE000000000000000;
    uint64_t v35 = *(void (**)(void))(v3 + 16);
    sub_24F780DA0();
    uint64_t v37 = v36;
    sub_24F781384();
    v35();
    if (!v0)
    {
      uint64_t v67 = v37;
      uint64_t v68 = v5;
      uint64_t v64 = v63 + 32;
      uint64_t v65 = v3;
      uint64_t v38 = (void (**)(char *, char *, uint64_t))(v63 + 16);
      while (1)
      {
        sub_24F77EDF0((uint64_t)v19, 1, AssociatedTypeWitness);
        if (v34) {
          break;
        }
        sub_24F76BAA0();
        v39();
        (*v38)(v69, v29, AssociatedTypeWitness);
        sub_24F771D94();
        sub_24F8CEF90();
        sub_24F8CEEB0();
        swift_bridgeObjectRelease();
        sub_24F7802E0();
        v40();
        sub_24F781384();
        v35();
      }
LABEL_13:
      sub_24F7739F4();
      v49();
      goto LABEL_16;
    }
    swift_bridgeObjectRelease();
  }
LABEL_16:
  sub_24F7BD65C();
  sub_24F77BC10();
}

void *AnyCursor.init<A>(_:)()
{
  sub_24F774430();
  uint64_t v4 = *(void *)(*v1 + 80);
  v1[2] = sub_24F7BADA4(v5, v4, v2, v0);
  v1[3] = v6;
  unint64_t v7 = sub_24F7BAE24(v3, v4, v2, v0);
  uint64_t v9 = v8;
  swift_unknownObjectRelease();
  v1[4] = v7;
  v1[5] = v9;
  return v1;
}

uint64_t (*sub_24F7BADA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v8 = (void *)swift_allocObject();
  void v8[2] = a2;
  v8[3] = a3;
  v8[4] = a4;
  void v8[5] = a1;
  swift_unknownObjectRetain();
  return sub_24F7BD478;
}

uint64_t (*sub_24F7BAE24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v8 = (void *)swift_allocObject();
  void v8[2] = a2;
  v8[3] = a3;
  v8[4] = a4;
  void v8[5] = a1;
  swift_unknownObjectRetain();
  return sub_24F7BD444;
}

uint64_t AnyCursor.__allocating_init<A>(iterator:)()
{
  sub_24F774430();
  uint64_t v3 = swift_allocBox();
  sub_24F77AD10();
  sub_24F77529C();
  v4();
  uint64_t v5 = (void *)swift_allocObject();
  v5[2] = *(void *)(v1 + 80);
  v5[3] = v2;
  v5[4] = v0;
  void v5[5] = v3;
  swift_retain();
  uint64_t v6 = AnyCursor.__allocating_init(_:)((uint64_t)sub_24F7BD084, (uint64_t)v5);
  sub_24F7BD644();
  v7();
  swift_release();
  return v6;
}

uint64_t sub_24F7BAF8C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24F7BAFC4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 48))();
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t type metadata accessor for MapCursor()
{
  return sub_24F777DE0();
}

uint64_t type metadata accessor for EnumeratedCursor()
{
  return sub_24F777DE0();
}

uint64_t type metadata accessor for FilterCursor()
{
  return sub_24F777DE0();
}

uint64_t sub_24F7BB040()
{
  return sub_24F77DD34();
}

BOOL sub_24F7BB04C(uint64_t a1)
{
  sub_24F77EDF0(a1, 1, *(void *)(v1 + 24));
  return !v2;
}

uint64_t sub_24F7BB080()
{
  return sub_24F77DD34();
}

uint64_t sub_24F7BB08C()
{
  sub_24F7BD5A4();
  return sub_24F7B8964(v0, v1, v2);
}

uint64_t type metadata accessor for DropWhileCursor()
{
  return sub_24F777DE0();
}

uint64_t type metadata accessor for DropFirstCursor()
{
  return sub_24F777DE0();
}

uint64_t sub_24F7BB0D8()
{
  return swift_endAccess();
}

uint64_t AnyCursor.__allocating_init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  AnyCursor.init(_:)(a1, a2);
  return v4;
}

uint64_t *AnyCursor.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  v2[2] = a1;
  v2[3] = a2;
  uint64_t v6 = (void *)sub_24F7818CC();
  void v6[2] = *(void *)(v5 + 80);
  void v6[3] = a1;
  uint64_t v6[4] = a2;
  v2[4] = (uint64_t)sub_24F7BD0D4;
  void v2[5] = (uint64_t)v6;
  swift_retain();
  return v2;
}

uint64_t sub_24F7BB220(void (*a1)(char *), uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v27 = a1;
  uint64_t v28 = a2;
  uint64_t v9 = sub_24F8CF610();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v24 - v12;
  uint64_t v14 = *(void *)(a5 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v11);
  uint64_t v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = a3(v15);
  if (!v5)
  {
    uint64_t v25 = v10;
    uint64_t v26 = v9;
    char v19 = v27;
    char v29 = (void (*)(uint64_t))a3;
    uint64_t v30 = a4;
    uint64_t v20 = v14;
    uint64_t v21 = (void (**)(char *, char *, uint64_t))(v14 + 32);
    uint64_t v22 = (uint64_t (**)(char *, uint64_t))(v20 + 8);
    while (sub_24F777048((uint64_t)v13, 1, a5) != 1)
    {
      (*v21)(v17, v13, a5);
      v19(v17);
      uint64_t v23 = (*v22)(v17, a5);
      v29(v23);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v13, v26);
  }
  return result;
}

uint64_t AnyCursor.next()()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t AnyCursor.deinit()
{
  swift_release();
  swift_release();
  return v0;
}

uint64_t AnyCursor.__deallocating_deinit()
{
  AnyCursor.deinit();
  uint64_t v0 = sub_24F77B864();
  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t sub_24F7BB4B8()
{
  return AnyCursor.next()();
}

uint64_t sub_24F7BB4D0(uint64_t a1, uint64_t a2)
{
  v2[4] = 0;
  if (a2 < 0)
  {
    sub_24F778D58();
    uint64_t result = sub_24F8CF9D0();
    __break(1u);
  }
  else
  {
    v2[2] = a1;
    v2[3] = a2;
    return (uint64_t)v2;
  }
  return result;
}

void DropFirstCursor.next()()
{
  sub_24F76FF94();
  uint64_t v2 = v0;
  uint64_t v19 = v3;
  sub_24F775B14();
  uint64_t v5 = *(void *)(v4 + 88);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v20 = sub_24F8CF610();
  MEMORY[0x270FA5388](v20);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t v9 = *(void *)(v0 + 24);
  uint64_t v10 = *(void (**)(uint64_t))(v5 + 16);
  if (*(void *)(v0 + 32) >= v9)
  {
LABEL_7:
    uint64_t v17 = sub_24F7BD5E4();
    v10(v17);
  }
  else
  {
    uint64_t v11 = (void (**)(char *, uint64_t))(v6 + 8);
    while (1)
    {
      uint64_t v12 = sub_24F7BD5E4();
      v10(v12);
      if (v1) {
        break;
      }
      int v13 = sub_24F777048((uint64_t)v8, 1, AssociatedTypeWitness);
      (*v11)(v8, v20);
      if (v13 == 1)
      {
        *(void *)(v2 + 32) = v9;
        sub_24F7771BC(v19, 1, 1, AssociatedTypeWitness);
        break;
      }
      uint64_t v14 = *(void *)(v2 + 32);
      BOOL v15 = __OFADD__(v14, 1);
      uint64_t v16 = v14 + 1;
      if (v15)
      {
        __break(1u);
        return;
      }
      *(void *)(v2 + 32) = v16;
      if (v16 >= v9) {
        goto LABEL_7;
      }
    }
  }
  sub_24F772220();
  sub_24F77BC10();
}

void sub_24F7BB6E0()
{
}

void DropWhileCursor.next()()
{
  sub_24F76FF94();
  uint64_t v4 = v1;
  uint64_t v6 = v5;
  sub_24F775B14();
  uint64_t v8 = *(void *)(v7 + 88);
  uint64_t v10 = *(void *)(v9 + 80);
  sub_24F77290C();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_24F8CF610();
  sub_24F77AD10();
  sub_24F771D60();
  MEMORY[0x270FA5388](v12);
  sub_24F77C634();
  sub_24F77AD10();
  sub_24F771D60();
  MEMORY[0x270FA5388](v13);
  sub_24F77BF80();
  if (*(unsigned char *)(v4 + 40) == 1)
  {
    sub_24F781384();
    v15();
  }
  else
  {
    uint64_t v25 = v14;
    uint64_t v26 = AssociatedTypeWitness;
    uint64_t v16 = *(void (**)(void))(v8 + 16);
    sub_24F7BD650();
    v16();
    if (!v2)
    {
      uint64_t v24 = v8;
      uint64_t v17 = AssociatedTypeWitness;
      while (1)
      {
        sub_24F77EDF0(v3, 1, v17);
        if (v18)
        {
          sub_24F7739F4();
          v21();
          uint64_t v22 = 1;
          uint64_t v23 = v6;
          goto LABEL_10;
        }
        uint64_t v19 = *(void (**)(void))(v25 + 32);
        sub_24F775AF4();
        v19();
        if (((*(uint64_t (**)(uint64_t))(v4 + 24))(v0) & 1) == 0) {
          break;
        }
        uint64_t v17 = AssociatedTypeWitness;
        sub_24F7739F4();
        v20();
        ((void (*)(uint64_t, uint64_t))v16)(v10, v24);
      }
      *(unsigned char *)(v4 + 40) = 1;
      uint64_t v23 = v6;
      sub_24F772D84();
      sub_24F775AF4();
      v19();
      uint64_t v17 = v26;
      uint64_t v22 = 0;
LABEL_10:
      sub_24F7771BC(v23, v22, 1, v17);
    }
  }
  sub_24F7BD65C();
  sub_24F77BC10();
}

uint64_t DropWhileCursor.__deallocating_deinit()
{
  FilterCursor.deinit();
  return MEMORY[0x270FA0228](v0, 41, 7);
}

void sub_24F7BB9D4()
{
}

void EnumeratedCursor.next()()
{
  sub_24F76FF94();
  uint64_t v22 = v5;
  sub_24F775B14();
  swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_24F777250();
  sub_24F77AD10();
  uint64_t v21 = v7;
  sub_24F771D60();
  MEMORY[0x270FA5388](v8);
  sub_24F7BD56C();
  sub_24F77AD10();
  uint64_t v10 = v9;
  sub_24F771D60();
  MEMORY[0x270FA5388](v11);
  sub_24F77BF80();
  sub_24F781384();
  v12();
  if (v2) {
    goto LABEL_7;
  }
  sub_24F77EDF0(v4, 1, v3);
  if (v13)
  {
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v4, v6);
    uint64_t v14 = sub_24F7BD624();
    sub_24F7771BC((uint64_t)v22, 1, 1, v14);
LABEL_7:
    sub_24F77BC10();
    return;
  }
  BOOL v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32);
  v15(v0, v4, v3);
  uint64_t v16 = sub_24F7BD624();
  uint64_t v17 = (char *)v22 + *(int *)(v16 + 48);
  void *v22 = *(void *)(v1 + 24);
  v15((uint64_t)v17, v0, v3);
  sub_24F7771BC((uint64_t)v22, 0, 1, v16);
  uint64_t v18 = *(void *)(v1 + 24);
  BOOL v19 = __OFADD__(v18, 1);
  uint64_t v20 = v18 + 1;
  if (!v19)
  {
    *(void *)(v1 + 24) = v20;
    goto LABEL_7;
  }
  __break(1u);
}

uint64_t EnumeratedCursor.forEach(_:)(uint64_t a1, uint64_t a2)
{
  return sub_24F7BC12C(a1, a2);
}

uint64_t sub_24F7BBC10(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, uint64_t))
{
  uint64_t result = a3(*(void *)(a2 + 24), a1);
  uint64_t v6 = *(void *)(a2 + 24);
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  int v9 = v7;
  if (v3)
  {
    if (!v9)
    {
LABEL_8:
      *(void *)(a2 + 24) = v8;
      return result;
    }
    __break(1u);
  }
  if (!v9) {
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t EnumeratedCursor.__deallocating_deinit()
{
  PrefixCursor.deinit();
  return MEMORY[0x270FA0228](v0, 32, 7);
}

void sub_24F7BBC9C()
{
}

uint64_t sub_24F7BBCB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[1] = *(_OWORD *)(a3 + 80);
  uint64_t v5 = a1;
  uint64_t v6 = a2;
  return EnumeratedCursor.forEach(_:)((uint64_t)sub_24F7BD3F4, (uint64_t)v4);
}

uint64_t sub_24F7BBCF8(uint64_t a1, uint64_t a2, void (*a3)(char *))
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v8 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v11 = &v13[-v10];
  *(void *)&v13[-v10] = a1;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(&v13[*(int *)(v9 + 48) - v10], a2, AssociatedTypeWitness);
  a3(v11);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, TupleTypeMetadata2);
}

void FilterCursor.next()()
{
  sub_24F76FF94();
  uint64_t v3 = v0;
  uint64_t v39 = v4;
  sub_24F775B14();
  uint64_t v6 = *(void *)(v5 + 88);
  uint64_t v8 = *(void *)(v7 + 80);
  sub_24F7BD6A8();
  swift_getAssociatedTypeWitness();
  sub_24F780B7C();
  sub_24F77AD10();
  v38[0] = v10;
  v38[1] = v9;
  sub_24F771D60();
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v44 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)v38 - v13;
  BOOL v15 = *(void (**)(uint64_t, uint64_t))(v6 + 16);
  uint64_t v16 = *(void *)(v0 + 16);
  uint64_t v40 = v17;
  uint64_t v47 = v8;
  sub_24F7BD650();
  v15(v18, v19);
  if (!v1)
  {
    uint64_t v20 = v6 + 16;
    uint64_t v45 = v14;
    uint64_t v46 = (void (**)(uint64_t, uint64_t))(v44 + 32);
    uint64_t v43 = v6;
    v44 += 8;
    uint64_t v21 = v40;
    uint64_t v41 = v16;
    for (uint64_t i = v15; ; i(v47, v43))
    {
      sub_24F77EDF0(v21, 1, v2);
      if (v22)
      {
        sub_24F7739F4();
        v33(v31, v32);
        uint64_t v34 = 1;
        uint64_t v35 = v39;
        goto LABEL_8;
      }
      uint64_t v23 = v20;
      uint64_t v24 = v45;
      uint64_t v25 = *v46;
      sub_24F775AF4();
      v25(v26, v27);
      if ((*(uint64_t (**)(char *))(v3 + 24))(v24)) {
        break;
      }
      sub_24F7739F4();
      v30(v28, v29);
      uint64_t v20 = v23;
    }
    uint64_t v35 = v39;
    sub_24F775AF4();
    v25(v36, v37);
    uint64_t v34 = 0;
LABEL_8:
    sub_24F7771BC(v35, v34, 1, v2);
  }
  sub_24F7BD65C();
  sub_24F77BC10();
}

uint64_t FilterCursor.forEach(_:)(uint64_t a1, uint64_t a2)
{
  return sub_24F7BC12C(a1, a2);
}

uint64_t sub_24F7BC12C(uint64_t a1, uint64_t a2)
{
  void v6[3] = a1;
  uint64_t v6[4] = a2;
  sub_24F77DA18();
  sub_24F77DA18();
  return v4(v3, v6, *(void *)(v2 + 80));
}

uint64_t sub_24F7BC1A4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = (*(uint64_t (**)(void))(a2 + 24))();
  if (!v3 && (result & 1) != 0) {
    return a3(a1);
  }
  return result;
}

uint64_t FilterCursor.__deallocating_deinit()
{
  FilterCursor.deinit();
  uint64_t v0 = sub_24F77EE08();
  return MEMORY[0x270FA0228](v0, v1, v2);
}

void sub_24F7BC228()
{
}

uint64_t sub_24F7BC240(uint64_t a1, uint64_t a2)
{
  return FilterCursor.forEach(_:)(a1, a2);
}

void FlattenCursor.next()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_24F76FF94();
  a19 = v23;
  a20 = v24;
  uint64_t v37 = v25;
  sub_24F775B14();
  uint64_t v27 = *(void *)(v26 + 96);
  uint64_t v29 = *(void *)(v28 + 88);
  uint64_t v38 = *(void *)(v28 + 80);
  swift_getAssociatedTypeWitness();
  sub_24F7BD6A8();
  swift_getAssociatedTypeWitness();
  sub_24F780B7C();
  sub_24F77AD10();
  sub_24F771D60();
  MEMORY[0x270FA5388](v30);
  sub_24F77C634();
  while (1)
  {
    if (*(void *)(v20 + 24))
    {
      uint64_t v31 = *(void (**)(void))(v27 + 16);
      swift_unknownObjectRetain();
      swift_checkMetadataState();
      sub_24F781384();
      v31();
      swift_unknownObjectRelease();
      if (v21) {
        goto LABEL_12;
      }
      sub_24F77EDF0(v22, 1, (uint64_t)&associated type descriptor for Cursor.Element);
      if (!v32)
      {
        sub_24F773974();
        uint64_t v34 = v37;
        sub_24F76BAA0();
        v35();
        uint64_t v36 = 0;
        goto LABEL_11;
      }
    }
    else
    {
      sub_24F7771BC(v22, 1, 1, (uint64_t)&associated type descriptor for Cursor.Element);
    }
    sub_24F7802E0();
    v33();
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v29 + 16))(&a10, v38, v29);
    if (v21) {
      goto LABEL_12;
    }
    if (!a10) {
      break;
    }
    *(void *)(v20 + 24) = a10;
    swift_unknownObjectRelease();
  }
  uint64_t v36 = 1;
  uint64_t v34 = v37;
LABEL_11:
  sub_24F7771BC(v34, v36, 1, (uint64_t)&associated type descriptor for Cursor.Element);
LABEL_12:
  sub_24F772220();
  sub_24F77BC10();
}

uint64_t FlattenCursor.deinit()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t FlattenCursor.__deallocating_deinit()
{
  FlattenCursor.deinit();
  return MEMORY[0x270FA0228](v0, 32, 7);
}

#error "24F7BC4E8: call analysis failed (funcsize=6)"

void MapCursor.next()()
{
  sub_24F76FF94();
  uint64_t v22 = v4;
  uint64_t v21 = *v0;
  swift_getAssociatedTypeWitness();
  uint64_t v5 = sub_24F777250();
  sub_24F77AD10();
  uint64_t v20 = v6;
  sub_24F771D60();
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)v19 - v8;
  sub_24F77AD10();
  v19[1] = v10;
  sub_24F771D60();
  MEMORY[0x270FA5388](v11);
  sub_24F7BD53C();
  sub_24F781384();
  v12();
  if (!v1)
  {
    uint64_t v13 = v20;
    sub_24F77EDF0((uint64_t)v9, 1, v2);
    if (v14)
    {
      (*(void (**)(char *, uint64_t))(v13 + 8))(v9, v5);
      uint64_t v18 = 1;
      uint64_t v16 = v21;
    }
    else
    {
      sub_24F775AF4();
      v15();
      ((void (*)(uint64_t))v0[3])(v3);
      uint64_t v16 = v21;
      sub_24F7802E0();
      v17();
      uint64_t v18 = 0;
    }
    sub_24F7771BC(v22, v18, 1, *(void *)(v16 + 88));
  }
  sub_24F77BC10();
}

uint64_t MapCursor.forEach(_:)(uint64_t a1, uint64_t a2)
{
  v5[2] = a1;
  v5[3] = a2;
  sub_24F77DA18();
  sub_24F77DA18();
  return v3(sub_24F7BD12C, v5, *(void *)(v2 + 80));
}

uint64_t sub_24F7BC79C(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)a4 + 88);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388]();
  uint64_t v10 = (char *)&v13 - v9;
  uint64_t result = (*(uint64_t (**)(uint64_t))(v11 + 24))(v8);
  if (!v4)
  {
    a2(v10);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  return result;
}

void sub_24F7BC8A8()
{
}

uint64_t sub_24F7BC8C0(uint64_t a1, uint64_t a2)
{
  return MapCursor.forEach(_:)(a1, a2);
}

void PrefixCursor.next()()
{
  sub_24F76FF94();
  sub_24F78564C();
  swift_getAssociatedTypeWitness();
  sub_24F777250();
  sub_24F77AD10();
  sub_24F771D60();
  MEMORY[0x270FA5388](v5);
  sub_24F77C634();
  uint64_t v7 = *(void *)(v3 + 24);
  uint64_t v6 = *(void *)(v3 + 32);
  if (v6 >= v7) {
    goto LABEL_6;
  }
  *(void *)(v3 + 32) = v6 + 1;
  sub_24F781384();
  v8();
  if (!v0)
  {
    sub_24F77EDF0(v4, 1, v2);
    if (!v9)
    {
      sub_24F773974();
      sub_24F76BAA0();
      v11();
      uint64_t v12 = v1;
      uint64_t v13 = 0;
LABEL_7:
      sub_24F7771BC(v12, v13, 1, v2);
      goto LABEL_8;
    }
    sub_24F7739F4();
    v10();
    *(void *)(v3 + 32) = v7;
LABEL_6:
    uint64_t v12 = v1;
    uint64_t v13 = 1;
    goto LABEL_7;
  }
LABEL_8:
  sub_24F772220();
  sub_24F77BC10();
}

uint64_t PrefixCursor.deinit()
{
  swift_unknownObjectRelease();
  return v0;
}

uint64_t PrefixCursor.__deallocating_deinit()
{
  PrefixCursor.deinit();
  uint64_t v0 = sub_24F77EE08();
  return MEMORY[0x270FA0228](v0, v1, v2);
}

void sub_24F7BCAA0()
{
}

void sub_24F7BCAB8()
{
}

void PrefixWhileCursor.next()()
{
  sub_24F76FF94();
  sub_24F78564C();
  sub_24F7BD6B4();
  swift_getAssociatedTypeWitness();
  sub_24F777250();
  sub_24F77AD10();
  sub_24F771D60();
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v18 - v6;
  sub_24F77AD10();
  sub_24F771D60();
  MEMORY[0x270FA5388](v8);
  sub_24F785020();
  if (*(unsigned char *)(v3 + 40))
  {
    uint64_t v11 = 1;
  }
  else
  {
    uint64_t v18 = v10;
    uint64_t v19 = v9;
    sub_24F781384();
    v12();
    if (v0) {
      goto LABEL_5;
    }
    sub_24F77EDF0((uint64_t)v7, 1, v2);
    if (v13)
    {
      sub_24F7739F4();
      v14();
      uint64_t v11 = 1;
    }
    else
    {
      BOOL v15 = *(void (**)(void))(v19 + 32);
      sub_24F7BD5D8();
      v15();
      char v16 = (*(uint64_t (**)(uint64_t))(v3 + 24))(v4);
      if (v16)
      {
        sub_24F7BD5D8();
        v15();
        uint64_t v11 = 0;
      }
      else
      {
        sub_24F780DA0();
        sub_24F7739F4();
        v17();
        uint64_t v11 = 1;
        *(unsigned char *)(v3 + 40) = 1;
      }
    }
  }
  sub_24F7771BC(v1, v11, 1, v2);
LABEL_5:
  sub_24F772220();
  sub_24F77BC10();
}

uint64_t _s12GRDBInternal15DropWhileCursorCfd_0()
{
  swift_unknownObjectRelease();
  swift_release();
  return v0;
}

void sub_24F7BCD34()
{
}

uint64_t sub_24F7BCD4C(void (*a1)(uint64_t *))
{
  return sub_24F7B7FE4(a1);
}

unint64_t sub_24F7BCD64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24F8CECF0();
  return sub_24F7BCDC0(a1, v6, a2, a3);
}

unint64_t sub_24F7BCDC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v21[1] = a1;
  v21[2] = a4;
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = v4;
  uint64_t v9 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v11 = v10 & ~v9;
  v21[0] = v4 + 64;
  if ((*(void *)(v4 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11))
  {
    uint64_t v12 = ~v9;
    BOOL v15 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v13 = v6 + 16;
    char v14 = v15;
    uint64_t v16 = *(void *)(v13 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v13 - 8);
    do
    {
      uint64_t v18 = v13;
      v14(v8, *(void *)(v22 + 48) + v16 * v11, a3);
      char v19 = sub_24F8CED50();
      (*v17)(v8, a3);
      if (v19) {
        break;
      }
      unint64_t v11 = (v11 + 1) & v12;
      uint64_t v13 = v18;
    }
    while (((*(void *)(v21[0] + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  }
  return v11;
}

uint64_t sub_24F7BCF48(unint64_t a1, uint64_t a2)
{
  uint64_t result = _swift_isClassOrObjCExistentialType();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v5 = a2 & 0xFFFFFFFFFFFFFF8;
  if ((result & 1) == 0) {
    uint64_t v5 = a2;
  }
  if (*(void *)(v5 + 16) <= a1) {
    goto LABEL_7;
  }
  return result;
}

uint64_t sub_24F7BCF9C(uint64_t a1)
{
  return sub_24F7B911C(a1);
}

uint64_t type metadata accessor for FlattenCursor()
{
  return sub_24F777DE0();
}

uint64_t type metadata accessor for PrefixCursor()
{
  return sub_24F777DE0();
}

uint64_t type metadata accessor for PrefixWhileCursor()
{
  return sub_24F777DE0();
}

uint64_t sub_24F7BD008()
{
  return sub_24F7BA640() & 1;
}

uint64_t sub_24F7BD02C()
{
  return sub_24F77DD34();
}

uint64_t sub_24F7BD038()
{
  sub_24F7BD5A4();
  return sub_24F7BA760(v0, v1);
}

uint64_t sub_24F7BD054()
{
  swift_release();
  sub_24F77B864();
  return swift_deallocObject();
}

uint64_t sub_24F7BD084()
{
  return sub_24F7BB0D8();
}

uint64_t sub_24F7BD0A4()
{
  swift_release();
  sub_24F77EE08();
  return swift_deallocObject();
}

uint64_t sub_24F7BD0D4(void (*a1)(char *), uint64_t a2)
{
  return sub_24F7BB220(a1, a2, *(uint64_t (**)(uint64_t))(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 16));
}

uint64_t sub_24F7BD0F4()
{
  sub_24F7BD5A4();
  return sub_24F7BBC10(v0, v1, v2);
}

uint64_t sub_24F7BD110()
{
  sub_24F7BD5A4();
  return sub_24F7BC1A4(v0, v1, v2);
}

uint64_t sub_24F7BD12C()
{
  sub_24F7BD5A4();
  return sub_24F7BC79C(v0, v1, v2, v3);
}

uint64_t dispatch thunk of Cursor.next()()
{
  sub_24F781384();
  return v0();
}

uint64_t dispatch thunk of Cursor.forEach(_:)()
{
  sub_24F77B4D8();
  return v0();
}

uint64_t sub_24F7BD190()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for AnyCursor(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AnyCursor);
}

uint64_t dispatch thunk of AnyCursor.__allocating_init<A>(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of AnyCursor.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t sub_24F7BD218()
{
  return sub_24F7BD390();
}

uint64_t method lookup function for DropFirstCursor(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for DropFirstCursor);
}

uint64_t sub_24F7BD244()
{
  return sub_24F7BD390();
}

uint64_t method lookup function for DropWhileCursor(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for DropWhileCursor);
}

uint64_t sub_24F7BD274()
{
  return sub_24F7BD2AC();
}

uint64_t method lookup function for EnumeratedCursor(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for EnumeratedCursor);
}

uint64_t sub_24F7BD29C()
{
  return sub_24F7BD2AC();
}

uint64_t sub_24F7BD2AC()
{
  return sub_24F7BD674();
}

uint64_t method lookup function for FilterCursor(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for FilterCursor);
}

uint64_t sub_24F7BD2F8()
{
  return sub_24F7BD32C();
}

uint64_t method lookup function for FlattenCursor(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for FlattenCursor);
}

uint64_t sub_24F7BD31C()
{
  return sub_24F7BD32C();
}

uint64_t sub_24F7BD32C()
{
  return sub_24F7BD674();
}

uint64_t method lookup function for MapCursor(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MapCursor);
}

uint64_t method lookup function for PrefixCursor(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PrefixCursor);
}

uint64_t sub_24F7BD390()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for PrefixWhileCursor(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PrefixWhileCursor);
}

uint64_t sub_24F7BD3F4(uint64_t a1, uint64_t a2)
{
  return sub_24F7BBCF8(a1, a2, *(void (**)(char *))(v2 + 32));
}

uint64_t sub_24F7BD414()
{
  swift_unknownObjectRelease();
  sub_24F77B864();
  return swift_deallocObject();
}

uint64_t sub_24F7BD444()
{
  sub_24F77B4D8();
  return v0();
}

uint64_t sub_24F7BD478()
{
  sub_24F781384();
  return v0();
}

uint64_t sub_24F7BD4AC()
{
  return sub_24F77DD34();
}

uint64_t sub_24F7BD4B8()
{
  return sub_24F7B7478();
}

uint64_t sub_24F7BD4C4()
{
  return sub_24F77DD34();
}

uint64_t sub_24F7BD4D0()
{
  return sub_24F77DD34();
}

uint64_t sub_24F7BD4DC()
{
  return sub_24F77DD34();
}

uint64_t sub_24F7BD4E8()
{
  return sub_24F7BD008() & 1;
}

void sub_24F7BD514()
{
}

uint64_t sub_24F7BD54C()
{
  return v0;
}

uint64_t sub_24F7BD5B0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(v4 - 72) = v3;
  *(void *)(v4 - 104) = result;
  *(void *)(v4 - 96) = a2;
  *(void *)(v4 - 144) = a3;
  return result;
}

uint64_t sub_24F7BD5C8()
{
  return v0;
}

uint64_t sub_24F7BD5E4()
{
  return *(void *)(v0 - 72);
}

uint64_t sub_24F7BD5FC(void *a1)
{
  a1[2] = v3;
  a1[3] = v1;
  a1[4] = v2;
  return 0;
}

uint64_t sub_24F7BD610()
{
  return v0;
}

uint64_t sub_24F7BD624()
{
  return swift_getTupleTypeMetadata2();
}

uint64_t sub_24F7BD674()
{
  return swift_initClassMetadata2();
}

uint64_t sub_24F7BD694()
{
  return 0;
}

uint64_t sub_24F7BD6A8()
{
  return 255;
}

uint64_t sub_24F7BD6B4()
{
  return 255;
}

uint64_t sub_24F7BD6C0(uint64_t a1, uint64_t a2)
{
  sub_24F77AD10();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  sub_24F773918();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v2, a1, a2);
  sub_24F7BD7D0(v2, a2, v10);
  swift_bridgeObjectRelease();
  sub_24F78ED30(v10[1]);
  swift_bridgeObjectRelease();
  swift_allocObject();
  sub_24F781CB4();
  uint64_t v8 = sub_24F79036C();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  return v8;
}

uint64_t sub_24F7BD7D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  sub_24F781274(&qword_26B1F7AC0);
  uint64_t v6 = MEMORY[0x263F8EE78];
  uint64_t v7 = sub_24F8CEC70();
  *a3 = v6;
  a3[1] = v7;
  uint64_t v8 = sub_24F770F10();
  v9(v8);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8);
  return v10(a1, a2);
}

uint64_t sub_24F7BD894(uint64_t a1)
{
  uint64_t v3 = v1[1];
  swift_bridgeObjectRetain();
  sub_24F77390C();
  sub_24F7BEAE0(v3, v4);
  swift_bridgeObjectRelease();
  uint64_t v5 = v36;
  sub_24F77841C((uint64_t)v35, &qword_26B1F7238);
  if (v5 != 1)
  {
    sub_24F799984(a1, (uint64_t)v35, &qword_26B1F7AC0);
    sub_24F77DA24();
    sub_24F7BDFC0(v15, v16, v17);
    uint64_t v18 = a1;
    return sub_24F77841C(v18, &qword_26B1F7AC0);
  }
  sub_24F77390C();
  sub_24F8CED00();
  uint64_t v7 = v6;
  uint64_t v8 = (void *)*v1;
  uint64_t v9 = *(void *)(*v1 + 16);
  if (!v9)
  {
    swift_bridgeObjectRelease();
LABEL_23:
    sub_24F799984(a1, (uint64_t)v35, &qword_26B1F7AC0);
    sub_24F77DA24();
    goto LABEL_24;
  }
  uint64_t v11 = v8[4];
  uint64_t v10 = v8[5];
  sub_24F777244();
  uint64_t v34 = v12;
  if (sub_24F8CED00() == v12 && v13 == v7)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    goto LABEL_12;
  }
  char v32 = sub_24F8CFD00();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v32)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_12:
    sub_24F799984(a1, (uint64_t)v35, &qword_26B1F7AC0);
    char v19 = v35;
    uint64_t v20 = v11;
    uint64_t v21 = v10;
LABEL_24:
    sub_24F7BDFC0((uint64_t)v19, v20, v21);
    uint64_t v18 = a1;
    return sub_24F77841C(v18, &qword_26B1F7AC0);
  }
  uint64_t v33 = a1;
  uint64_t result = swift_bridgeObjectRelease();
  if (v9 == 1)
  {
LABEL_22:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a1 = v33;
    goto LABEL_23;
  }
  uint64_t v23 = v9;
  uint64_t v24 = v8 + 7;
  unint64_t v25 = 1;
  while (v25 < v8[2])
  {
    uint64_t v11 = *(v24 - 1);
    uint64_t v10 = *v24;
    sub_24F777244();
    if (sub_24F8CED00() == v34 && v26 == v7)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      a1 = v33;
      goto LABEL_12;
    }
    uint64_t v28 = v11;
    uint64_t v29 = v8;
    uint64_t v30 = v7;
    char v31 = sub_24F8CFD00();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (v31)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a1 = v33;
      uint64_t v11 = v28;
      goto LABEL_12;
    }
    ++v25;
    uint64_t result = swift_bridgeObjectRelease();
    v24 += 2;
    uint64_t v7 = v30;
    uint64_t v8 = v29;
    if (v23 == v25) {
      goto LABEL_22;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_24F7BDB74()
{
  return static EncodableRecord.databaseEncodingUserInfo.getter();
}

uint64_t static EncodableRecord.databaseEncodingUserInfo.getter()
{
  sub_24F8CF970();
  return sub_24F8CEC70();
}

uint64_t static EncodableRecord.databaseJSONEncoder(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = a3;
  uint64_t v26 = a4;
  uint64_t v6 = sub_24F8CE550();
  MEMORY[0x270FA5388](v6 - 8);
  unint64_t v25 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_24F8CE5B0();
  sub_24F77AD10();
  uint64_t v9 = v8;
  MEMORY[0x270FA5388](v10);
  sub_24F775B24();
  uint64_t v11 = sub_24F8CE580();
  sub_24F77AD10();
  uint64_t v13 = v12;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_24F8CE570();
  sub_24F77AD10();
  uint64_t v19 = v18;
  MEMORY[0x270FA5388](v20);
  sub_24F770F20();
  sub_24F8CE600();
  swift_allocObject();
  uint64_t v21 = sub_24F8CE5F0();
  (*(void (**)(uint64_t, void, uint64_t))(v19 + 104))(v4, *MEMORY[0x263F06160], v17);
  sub_24F8CE590();
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v16, *MEMORY[0x263F06180], v11);
  sub_24F8CE5A0();
  (*(void (**)(uint64_t, void, uint64_t))(v9 + 104))(v5, *MEMORY[0x263F061B0], v24);
  sub_24F8CE5C0();
  sub_24F8CE540();
  sub_24F8CE560();
  (*(void (**)(uint64_t))(v26 + 16))(v27);
  sub_24F8CE5E0();
  return v21;
}

void sub_24F7BDE30(uint64_t a1@<X8>)
{
}

void static EncodableRecord.databaseDateEncodingStrategy.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 2;
}

void sub_24F7BDE58(unsigned char *a1@<X8>)
{
}

void static EncodableRecord.databaseUUIDEncodingStrategy.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void sub_24F7BDE78(void *a1@<X8>)
{
}

void static EncodableRecord.databaseColumnEncodingStrategy.getter(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t sub_24F7BDE98(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v11 = MEMORY[0x263F8EE78];
    sub_24F77C4AC();
    uint64_t v3 = v11;
    uint64_t v4 = a1 + 40;
    do
    {
      sub_24F8CEFA0();
      uint64_t v5 = sub_24F8CF620();
      uint64_t v7 = v6;
      swift_bridgeObjectRelease();
      unint64_t v8 = *(void *)(v11 + 16);
      if (v8 >= *(void *)(v11 + 24) >> 1) {
        sub_24F77C4AC();
      }
      v4 += 16;
      *(void *)(v11 + 16) = v8 + 1;
      uint64_t v9 = v11 + 16 * v8;
      *(void *)(v9 + 32) = v5;
      *(void *)(v9 + 40) = v7;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  return v3;
}

uint64_t sub_24F7BDFC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_24F799984(a1, (uint64_t)v9, &qword_26B1F7238);
  if (v9[3] == 1)
  {
    uint64_t v6 = &qword_26B1F7238;
    sub_24F77841C((uint64_t)v9, &qword_26B1F7238);
    sub_24F7BFF48(a2, a3, (uint64_t)v10);
    swift_bridgeObjectRelease();
    uint64_t v7 = (void *)a1;
  }
  else
  {
    uint64_t v6 = &qword_26B1F7AC0;
    sub_24F799704((uint64_t)v9, (uint64_t)v10, &qword_26B1F7AC0);
    sub_24F7BEB48((uint64_t)v10, a2, a3, (uint64_t)v9);
    swift_bridgeObjectRelease();
    sub_24F77841C(a1, &qword_26B1F7238);
    uint64_t v7 = v9;
  }
  sub_24F77841C((uint64_t)v7, &qword_26B1F7238);
  return sub_24F77841C((uint64_t)v10, v6);
}

uint64_t PersistenceContainer.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_24F7BEB48(a1, a2, a3, (uint64_t)v5);
  sub_24F77841C(a1, &qword_26B1F7AC0);
  sub_24F77841C((uint64_t)v5, &qword_26B1F7238);
  return swift_bridgeObjectRelease();
}

void sub_24F7BE118(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void **)v2;
  if (!*(unsigned char *)(v2 + 16))
  {
    id v8 = v5;
    uint64_t v9 = (void *)sub_24F8CE930();
    id v10 = objc_msgSend(v8, sel_stringFromDate_, v9);

    uint64_t v11 = sub_24F8CED80();
    uint64_t v13 = v12;

    *(void *)(a2 + 24) = MEMORY[0x263F8D310];
    *(void *)(a2 + 32) = &protocol witness table for String;
    uint64_t v14 = (void *)sub_24F770E80();
    sub_24F7B6734(v14, v15, 0);
    *(void *)a2 = v11;
    *(void *)(a2 + 8) = v13;
    return;
  }
  if (*(unsigned char *)(v2 + 16) == 1)
  {
    swift_retain();
    ((void (*)(uint64_t))v5)(a1);
    uint64_t v6 = (void *)sub_24F770E80();
    sub_24F7B6734(v6, v7, 1);
    return;
  }
  switch((unint64_t)v5)
  {
    case 1uLL:
      sub_24F8CE920();
      goto LABEL_13;
    case 2uLL:
      sub_24F8CE950();
LABEL_13:
      *(void *)(a2 + 24) = MEMORY[0x263F8D538];
      *(void *)(a2 + 32) = &protocol witness table for Double;
      *(void *)a2 = v22;
      return;
    case 3uLL:
      sub_24F8CE950();
      double v24 = sub_24F77BF90(v23);
      if (v25)
      {
        __break(1u);
        goto LABEL_25;
      }
      if (v24 <= -9.22337204e18)
      {
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      if (v24 < 9.22337204e18)
      {
LABEL_21:
        *(void *)(a2 + 24) = MEMORY[0x263F8E5C0];
        *(void *)(a2 + 32) = &protocol witness table for Int64;
        *(void *)a2 = (uint64_t)v24;
        return;
      }
      __break(1u);
LABEL_18:
      sub_24F8CE950();
      double v24 = sub_24F77BF90(v26 * 1000.0);
      if (v25) {
        goto LABEL_26;
      }
      if (v24 <= -9.22337204e18)
      {
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
      if (v24 < 9.22337204e18) {
        goto LABEL_21;
      }
LABEL_28:
      __break(1u);
LABEL_29:
      swift_once();
LABEL_23:
      uint64_t v27 = (void *)qword_269A2ABB8;
      uint64_t v28 = (void *)sub_24F8CE930();
      id v29 = objc_msgSend(v27, sel_stringFromDate_, v28);

      uint64_t v30 = sub_24F8CED80();
      uint64_t v32 = v31;

      *(void *)(a2 + 24) = MEMORY[0x263F8D310];
      *(void *)(a2 + 32) = &protocol witness table for String;
      *(void *)a2 = v30;
      *(void *)(a2 + 8) = v32;
      return;
    case 4uLL:
      goto LABEL_18;
    case 5uLL:
      if (qword_269A2A328 == -1) {
        goto LABEL_23;
      }
      goto LABEL_29;
    default:
      *(void *)(a2 + 24) = &type metadata for DatabaseValue;
      *(void *)(a2 + 32) = &protocol witness table for DatabaseValue;
      if (qword_26B1F5A50 != -1) {
        swift_once();
      }
      uint64_t v16 = (void *)qword_26B1F5A48;
      uint64_t v17 = (void *)sub_24F8CE930();
      id v18 = objc_msgSend(v16, sel_stringFromDate_, v17);

      uint64_t v19 = sub_24F8CED80();
      uint64_t v21 = v20;

      *(void *)a2 = v19;
      *(void *)(a2 + 8) = v21;
      *(unsigned char *)(a2 + 16) = 2;
      return;
  }
}

uint64_t EncodableRecord.databaseDictionary.getter(uint64_t a1)
{
  sub_24F77AD10();
  MEMORY[0x270FA5388](v4);
  sub_24F770F20();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v2, v1, a1);
  uint64_t v6 = sub_24F770F10();
  sub_24F7BD7D0(v6, v7, v8);
  swift_bridgeObjectRelease();
  uint64_t v9 = sub_24F7C22CC(v11);
  swift_bridgeObjectRelease();
  return v9;
}

BOOL EncodableRecord.databaseEquals(_:)(uint64_t a1, uint64_t a2)
{
  sub_24F77AD10();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  sub_24F773918();
  id v8 = *(void (**)(void))(v6 + 16);
  ((void (*)(uint64_t, uint64_t, uint64_t))v8)(v3, v2, a2);
  sub_24F7BD7D0(v3, a2, &v15);
  sub_24F77DA24();
  v8();
  sub_24F7BD7D0(v3, a2, v14);
  uint64_t v9 = v14[0];
  uint64_t v10 = v14[1];
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = v15;
  *(void *)(v11 + 32) = 0;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_24F7BF774((void *)v11, v9, v10, (uint64_t)&v16);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  uint64_t v12 = v17;
  if (v17) {
    sub_24F7C25DC(v16, v17, v18, v19, v20);
  }
  return v12 == 0;
}

uint64_t EncodableRecord.databaseChanges<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_24F77FC00();
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = &v22[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_24F77FC00();
  MEMORY[0x270FA5388](v8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v10 + 16))(&v22[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)], v11, a2);
  sub_24F77DA24();
  sub_24F7BD7D0(v12, v13, v14);
  uint64_t v15 = sub_24F777244();
  v16(v15);
  sub_24F7BD7D0((uint64_t)v7, a3, &v23);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = v24;
  *(void *)(v17 + 32) = 0;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v17;
  *(_OWORD *)(v18 + 24) = v23;
  sub_24F781274(&qword_26B1F53A8);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = sub_24F7C2680;
  *(void *)(v19 + 24) = v18;
  *(void *)&long long v24 = MEMORY[0x263F8EE80];
  uint64_t v20 = swift_retain_n();
  sub_24F7C1FE0(v20, 1, &v24);
  swift_release_n();
  return v24;
}

uint64_t PersistenceContainer.subscript.getter@<X0>(uint64_t a1@<X8>)
{
  if (*(void *)(*(void *)(v1 + 8) + 16))
  {
    swift_bridgeObjectRetain();
    sub_24F77390C();
    unint64_t v3 = sub_24F782950();
    if (v4)
    {
      uint64_t v5 = sub_24F77DDF8(v3);
      sub_24F799984(v5, (uint64_t)&v7, &qword_26B1F7AC0);
      swift_bridgeObjectRelease();
      if ((void)v10 != 1) {
        return sub_24F799704((uint64_t)&v7, a1, &qword_26B1F7AC0);
      }
    }
    else
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      long long v10 = xmmword_24F8DF640;
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    long long v10 = xmmword_24F8DF640;
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return sub_24F77841C((uint64_t)&v7, &qword_26B1F7238);
}

uint64_t sub_24F7BE980@<X0>(uint64_t a1@<X8>)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PersistenceContainer.subscript.getter(a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24F7BEA04(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = a3[1];
  sub_24F799984(a1, (uint64_t)v6, &qword_26B1F7AC0);
  swift_bridgeObjectRetain();
  return PersistenceContainer.subscript.setter((uint64_t)v6, v3, v4);
}

uint64_t sub_24F7BEA60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!*(void *)(a4 + 16)) {
    return 0;
  }
  unint64_t v5 = sub_24F782950();
  if ((v6 & 1) == 0) {
    return 0;
  }
  uint64_t v7 = *(void *)(*(void *)(a4 + 56) + 24 * v5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v7;
}

double sub_24F7BEAE0@<D0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 16) && (unint64_t v4 = sub_24F782950(), (v5 & 1) != 0))
  {
    sub_24F799984(*(void *)(a1 + 56) + 40 * v4, a2, &qword_26B1F7AC0);
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)&double result = 1;
    *(_OWORD *)(a2 + 24) = xmmword_24F8DF640;
  }
  return result;
}

void sub_24F7BEB48(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_24F799984(a1, (uint64_t)&v11, &qword_26B1F7AC0);
  sub_24F7D57A4();
  if (v13 == 1)
  {
    sub_24F77841C((uint64_t)v12, &qword_26B1F7238);
    swift_bridgeObjectRetain();
    sub_24F786A44();
    uint64_t v8 = *(void *)(*v4 + 16);
    sub_24F786DF4();
    uint64_t v9 = *v4;
    *(void *)(v9 + 16) = v8 + 1;
    uint64_t v10 = v9 + 16 * v8;
    *(void *)(v10 + 32) = a2;
    *(void *)(v10 + 40) = a3;
    *unint64_t v4 = v9;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)a4 = 0;
    *(_OWORD *)(a4 + 24) = xmmword_24F8DF640;
  }
  else
  {
    sub_24F799704((uint64_t)v12, a4, &qword_26B1F7AC0);
  }
}

uint64_t sub_24F7BEC34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_24F777244();
  uint64_t v8 = sub_24F7D57F8();
  if (!v9)
  {
    swift_bridgeObjectRetain();
    sub_24F786A44();
    uint64_t v10 = *(void *)(*v5 + 16);
    sub_24F786DF4();
    uint64_t v11 = *v5;
    *(void *)(v11 + 16) = v10 + 1;
    uint64_t v12 = v11 + 16 * v10;
    *(void *)(v12 + 32) = a4;
    *(void *)(v12 + 40) = a5;
    *char v5 = v11;
  }
  return v8;
}

void (*PersistenceContainer.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t *a1, char a2)
{
  uint64_t v7 = malloc(0x90uLL);
  uint64_t v8 = v7;
  *a1 = v7;
  uint64_t v9 = v7 + 5;
  v7[16] = a3;
  v7[17] = v3;
  v7[15] = a2;
  if (!*(void *)(*(void *)(v3 + 8) + 16))
  {
    *uint64_t v9 = 0;
    v7[6] = 0;
    v7[7] = 0;
    *((_OWORD *)v7 + 4) = xmmword_24F8DF640;
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  sub_24F777244();
  unint64_t v10 = sub_24F782950();
  if ((v11 & 1) == 0)
  {
    *uint64_t v9 = 0;
    v9[1] = 0;
    void v9[2] = 0;
    *((_OWORD *)v8 + 4) = xmmword_24F8DF640;
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  uint64_t v12 = sub_24F77DDF8(v10);
  sub_24F799984(v12, (uint64_t)v9, &qword_26B1F7AC0);
  swift_bridgeObjectRelease();
  if (v8[8] == 1)
  {
LABEL_7:
    v8[4] = 0;
    *(_OWORD *)uint64_t v8 = 0u;
    *((_OWORD *)v8 + 1) = 0u;
    sub_24F77841C((uint64_t)v9, &qword_26B1F7238);
    return sub_24F7BEE1C;
  }
  uint64_t v13 = sub_24F77390C();
  sub_24F799704(v13, v14, v15);
  return sub_24F7BEE1C;
}

void sub_24F7BEE1C(uint64_t *a1, char a2)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *a1 + 40;
  if (a2)
  {
    uint64_t v4 = v2[16];
    uint64_t v5 = v2[15];
    sub_24F799984(*a1, v3, &qword_26B1F7AC0);
    swift_bridgeObjectRetain();
    sub_24F7BEB48(v3, v5, v4, (uint64_t)(v2 + 10));
    sub_24F77841C(v3, &qword_26B1F7AC0);
    sub_24F77841C((uint64_t)(v2 + 10), &qword_26B1F7238);
    swift_bridgeObjectRelease();
    sub_24F77841C((uint64_t)v2, &qword_26B1F7AC0);
  }
  else
  {
    uint64_t v6 = v2[16];
    uint64_t v7 = v2[15];
    swift_bridgeObjectRetain();
    sub_24F7BEB48((uint64_t)v2, v7, v6, v3);
    sub_24F77841C((uint64_t)v2, &qword_26B1F7AC0);
    sub_24F77841C(v3, &qword_26B1F7238);
    swift_bridgeObjectRelease();
  }
  free(v2);
}

uint64_t PersistenceContainer.subscript.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(v3 + 8);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  if (*(void *)(v5 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v6 = sub_24F782950();
    if (v7)
    {
      sub_24F799984(*(void *)(v5 + 56) + 40 * v6, (uint64_t)v9, &qword_26B1F7AC0);
      sub_24F799704((uint64_t)v9, a3, &qword_26B1F7AC0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  *(void *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24F7BF060@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return PersistenceContainer.subscript.getter(*(void *)(a2 + a1 - 16), *(void *)(a2 + a1 - 8), a3);
}

uint64_t sub_24F7BF0A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + a3 - 16);
  uint64_t v6 = *(void *)(a4 + a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = &v13[-v7 - 8];
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16))(&v13[-v7 - 8], v10, v5);
  sub_24F799984(a1, (uint64_t)v13, &qword_26B1F7AC0);
  return PersistenceContainer.subscript.setter((uint64_t)v13, (uint64_t)v8, v5, v6);
}

uint64_t PersistenceContainer.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a3, a4);
  uint64_t v7 = v6;
  sub_24F799984(a1, (uint64_t)v12, &qword_26B1F7AC0);
  sub_24F7BEB48((uint64_t)v12, v5, v7, (uint64_t)v11);
  sub_24F77841C((uint64_t)v12, &qword_26B1F7AC0);
  sub_24F77841C((uint64_t)v11, &qword_26B1F7238);
  swift_bridgeObjectRelease();
  uint64_t v8 = sub_24F77390C();
  v9(v8);
  return sub_24F77841C(a1, &qword_26B1F7AC0);
}

void (*PersistenceContainer.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t *a1, char a2)
{
  uint64_t v8 = malloc(0x80uLL);
  *a1 = v8;
  v8[11] = a4;
  v8[12] = v4;
  v8[10] = a3;
  sub_24F77AD10();
  *(void *)(v9 + 104) = v10;
  size_t v12 = *(void *)(v11 + 64);
  v8[14] = malloc(v12);
  v8[15] = malloc(v12);
  sub_24F77DA24();
  v13();
  sub_24F770F10();
  PersistenceContainer.subscript.getter(v14, v15, v16);
  return sub_24F7BF37C;
}

void sub_24F7BF37C(uint64_t *a1, char a2)
{
  uint64_t v2 = (uint64_t *)*a1;
  uint64_t v4 = *(void **)(*a1 + 112);
  uint64_t v3 = *(void **)(*a1 + 120);
  if (a2)
  {
    uint64_t v6 = v2[10];
    uint64_t v5 = v2[11];
    sub_24F799984(*a1, (uint64_t)(v2 + 5), &qword_26B1F7AC0);
    uint64_t v7 = sub_24F77390C();
    v8(v7);
    PersistenceContainer.subscript.setter((uint64_t)(v2 + 5), (uint64_t)v4, v6, v5);
    sub_24F77841C((uint64_t)v2, &qword_26B1F7AC0);
  }
  else
  {
    PersistenceContainer.subscript.setter(*a1, v2[15], v2[10], v2[11]);
  }
  free(v3);
  free(v4);
  free(v2);
}

uint64_t sub_24F7BF460@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  if (*(void *)(v3 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v5 = sub_24F782950();
    if (v6)
    {
      uint64_t v7 = sub_24F77DDF8(v5);
      sub_24F799984(v7, (uint64_t)&v34, &qword_26B1F7AC0);
      swift_bridgeObjectRelease();
      if ((void)v37 != 1)
      {
        uint64_t v8 = &v34;
        uint64_t v9 = a1;
        return sub_24F799704((uint64_t)v8, v9, &qword_26B1F7AC0);
      }
    }
    else
    {
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      long long v37 = xmmword_24F8DF640;
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    long long v37 = xmmword_24F8DF640;
  }
  uint64_t v26 = a1;
  sub_24F77841C((uint64_t)&v34, &qword_26B1F7238);
  uint64_t v10 = sub_24F8CED00();
  uint64_t v12 = v11;
  unint64_t v13 = *(void *)(v4 + 16);
  uint64_t v27 = v4 + 32;
  uint64_t v28 = v4;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t v15 = 0;
  while (1)
  {
    if (v15 == v13)
    {
      uint64_t v33 = 0;
      memset(v32, 0, sizeof(v32));
      unint64_t v15 = v13;
      long long v31 = 0u;
      goto LABEL_14;
    }
    if (v15 >= *(void *)(v28 + 16)) {
      break;
    }
    if (!*(void *)(v3 + 16)) {
      goto LABEL_26;
    }
    uint64_t v16 = (uint64_t *)(v27 + 16 * v15);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    swift_bridgeObjectRetain_n();
    uint64_t result = sub_24F782950();
    if ((v19 & 1) == 0) {
      goto LABEL_27;
    }
    uint64_t v20 = sub_24F77DDF8(result);
    sub_24F799984(v20, (uint64_t)v30, &qword_26B1F7AC0);
    swift_bridgeObjectRelease();
    v29[0] = v18;
    v29[1] = v17;
    *(void *)&long long v31 = v18;
    *((void *)&v31 + 1) = v17;
    sub_24F799984((uint64_t)v30, (uint64_t)v32, &qword_26B1F7AC0);
    swift_bridgeObjectRetain();
    sub_24F77841C((uint64_t)v29, &qword_26B1F5598);
    ++v15;
LABEL_14:
    sub_24F799704((uint64_t)&v31, (uint64_t)&v34, &qword_26B1F55A0);
    if (!v35)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v26 + 32) = 0;
      *(_OWORD *)uint64_t v26 = 0u;
      *(_OWORD *)(v26 + 16) = 0u;
      return result;
    }
    sub_24F799704((uint64_t)&v36, (uint64_t)&v31, &qword_26B1F7AC0);
    uint64_t v21 = sub_24F8CED00();
    uint64_t v23 = v22;
    swift_bridgeObjectRelease();
    if (v21 == v10 && v23 == v12)
    {
      swift_bridgeObjectRelease();
LABEL_23:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v8 = (uint64_t *)&v31;
      uint64_t v9 = v26;
      return sub_24F799704((uint64_t)v8, v9, &qword_26B1F7AC0);
    }
    char v25 = sub_24F8CFD00();
    swift_bridgeObjectRelease();
    if (v25) {
      goto LABEL_23;
    }
    uint64_t result = sub_24F77841C((uint64_t)&v31, &qword_26B1F7AC0);
  }
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_24F7BF774@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)&long long v30 = a2;
  *((void *)&v30 + 1) = a3;
  while (1)
  {
    uint64_t result = swift_beginAccess();
    unint64_t v6 = a1[4];
    uint64_t v7 = a1[2];
    unint64_t v8 = *(void *)(v7 + 16);
    if (v6 == v8)
    {
      uint64_t v36 = 0;
      memset(v35, 0, sizeof(v35));
      long long v34 = 0u;
      goto LABEL_9;
    }
    if (v6 >= v8) {
      break;
    }
    if (!*(void *)(a1[3] + 16)) {
      goto LABEL_22;
    }
    uint64_t v9 = v7 + 16 * v6;
    uint64_t v11 = *(void *)(v9 + 32);
    unint64_t v10 = *(void *)(v9 + 40);
    swift_bridgeObjectRetain_n();
    uint64_t result = sub_24F782950();
    if ((v12 & 1) == 0) {
      goto LABEL_23;
    }
    uint64_t v13 = sub_24F77DDF8(result);
    sub_24F799984(v13, (uint64_t)v33, &qword_26B1F7AC0);
    swift_bridgeObjectRelease();
    uint64_t v31 = v11;
    unint64_t v32 = v10;
    *(void *)&long long v34 = v11;
    *((void *)&v34 + 1) = v10;
    sub_24F799984((uint64_t)v33, (uint64_t)v35, &qword_26B1F7AC0);
    swift_bridgeObjectRetain();
    uint64_t result = sub_24F77841C((uint64_t)&v31, &qword_26B1F5598);
    uint64_t v14 = a1[4];
    BOOL v15 = __OFADD__(v14, 1);
    uint64_t v16 = v14 + 1;
    if (v15) {
      goto LABEL_24;
    }
    a1[4] = v16;
LABEL_9:
    swift_endAccess();
    if (!*((void *)&v34 + 1))
    {
      uint64_t result = sub_24F77841C((uint64_t)&v34, &qword_26B1F55A0);
      *(unsigned char *)(a4 + 32) = 0;
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
      return result;
    }
    long long v37 = v34;
    sub_24F799704((uint64_t)v35, (uint64_t)v38, &qword_26B1F7AC0);
    long long v17 = v37;
    sub_24F799704((uint64_t)v38, (uint64_t)v39, &qword_26B1F7AC0);
    long long v34 = v30;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24F7BF460((uint64_t)&v37);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_24F799984((uint64_t)&v37, (uint64_t)&v34, &qword_26B1F7AC0);
    if (*((void *)&v35[0] + 1))
    {
      sub_24F7811D0(&v34, *((uint64_t *)&v35[0] + 1));
      uint64_t v18 = sub_24F77E6F4();
      v19(v18);
      uint64_t v20 = v31;
      unint64_t v21 = v32;
      char v22 = v33[0];
      _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&v34);
    }
    else
    {
      sub_24F77841C((uint64_t)&v34, &qword_26B1F7AC0);
      uint64_t v20 = 0;
      unint64_t v21 = 0;
      char v22 = 4;
    }
    sub_24F799984((uint64_t)v39, (uint64_t)&v34, &qword_26B1F7AC0);
    unint64_t v23 = *((void *)&v35[0] + 1);
    if (*((void *)&v35[0] + 1))
    {
      sub_24F7811D0(&v34, *((uint64_t *)&v35[0] + 1));
      uint64_t v24 = sub_24F77E6F4();
      v25(v24);
      uint64_t v26 = v31;
      unint64_t v23 = v32;
      char v27 = v33[0];
      _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&v34);
    }
    else
    {
      sub_24F77841C((uint64_t)&v34, &qword_26B1F7AC0);
      uint64_t v26 = 0;
      char v27 = 4;
    }
    *(void *)&long long v34 = v26;
    *((void *)&v34 + 1) = v23;
    LOBYTE(v35[0]) = v27;
    uint64_t v31 = v20;
    unint64_t v32 = v21;
    v33[0] = v22;
    char v28 = static DatabaseValue.== infix(_:_:)((uint64_t)&v34, (uint64_t)&v31);
    sub_24F77841C((uint64_t)&v37, &qword_26B1F7AC0);
    sub_24F77841C((uint64_t)v39, &qword_26B1F7AC0);
    uint64_t result = sub_24F781F10(v26, v23, v27);
    if ((v28 & 1) == 0)
    {
      *(_OWORD *)a4 = v17;
      *(void *)(a4 + 16) = v20;
      *(void *)(a4 + 24) = v21;
      *(unsigned char *)(a4 + 32) = v22;
      return result;
    }
    swift_bridgeObjectRelease();
    sub_24F781F10(v20, v21, v22);
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

id sub_24F7BFAA4()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F088C0]), sel_init);
  id result = objc_msgSend(v0, sel_setFormatOptions_, 1907);
  qword_269A2ABB8 = (uint64_t)v0;
  return result;
}

void static DatabaseUUIDEncodingStrategy.string.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

BOOL static DatabaseUUIDEncodingStrategy.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t DatabaseUUIDEncodingStrategy.hash(into:)()
{
  return sub_24F8CFF40();
}

uint64_t DatabaseUUIDEncodingStrategy.hashValue.getter()
{
  return sub_24F8CFF80();
}

uint64_t sub_24F7BFB94(uint64_t a1, unint64_t a2)
{
  uint64_t v40 = sub_24F8CE660();
  sub_24F77AD10();
  uint64_t v7 = v6;
  MEMORY[0x270FA5388](v8);
  sub_24F775B24();
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v9 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v9 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v9)
  {
    swift_bridgeObjectRetain();
    return a1;
  }
  unint64_t v10 = sub_24F8CEE70();
  uint64_t v11 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0) {
    uint64_t v11 = 11;
  }
  unint64_t v38 = 4 * v9;
  if (4 * v9 < v10 >> 14)
  {
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
  }
  else
  {
    unint64_t v42 = a2;
    uint64_t v39 = (void (**)(uint64_t, uint64_t))(v7 + 8);
    uint64_t v12 = MEMORY[0x263F8EE78];
    unint64_t v2 = 15;
    uint64_t v41 = v11 | (v9 << 16);
    while (1)
    {
      sub_24F8CE630();
      sub_24F7B0E7C();
      unint64_t v13 = sub_24F8CF680();
      char v15 = v14;
      uint64_t v16 = *v39;
      (*v39)(v3, v40);
      if (v15)
      {
        unint64_t v17 = v2 >> 14;
        goto LABEL_27;
      }
      unint64_t v17 = v13 >> 14;
      if (v13 >> 14 < v2 >> 14)
      {
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_24F782A34();
        uint64_t v12 = v29;
      }
      unint64_t v18 = *(void *)(v12 + 16);
      if (v18 >= *(void *)(v12 + 24) >> 1)
      {
        sub_24F77BC38();
        uint64_t v12 = v30;
      }
      *(void *)(v12 + 16) = v18 + 1;
      uint64_t v19 = v12 + 16 * v18;
      *(void *)(v19 + 32) = v2;
      *(void *)(v19 + 40) = v13;
      if (v38 < v17) {
        goto LABEL_34;
      }
      unint64_t v2 = v42;
      sub_24F8CE620();
      uint64_t v20 = sub_24F8CF680();
      unint64_t v22 = v21;
      char v24 = v23;
      v16(v3, v40);
      if (v24) {
        break;
      }
      if ((sub_24F8CEE70() ^ (unint64_t)v20) >= 0x4000)
      {
        unint64_t v25 = sub_24F8CEE80();
        if (v17 > v25 >> 14) {
          goto LABEL_36;
        }
        unint64_t v26 = v25;
        unint64_t v27 = *(void *)(v12 + 16);
        if (v27 >= *(void *)(v12 + 24) >> 1)
        {
          sub_24F787D74();
          uint64_t v12 = v31;
        }
        *(void *)(v12 + 16) = v27 + 1;
        uint64_t v28 = v12 + 16 * v27;
        *(void *)(v28 + 32) = v13;
        *(void *)(v28 + 40) = v26;
        unint64_t v13 = v26;
      }
      unint64_t v2 = v13;
      if (v38 < v22 >> 14) {
        goto LABEL_35;
      }
    }
    unint64_t v2 = v13;
LABEL_27:
    if (v38 < v17) {
      goto LABEL_38;
    }
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_29;
    }
  }
  sub_24F782A34();
  uint64_t v12 = v36;
LABEL_29:
  unint64_t v32 = *(void *)(v12 + 16);
  if (v32 >= *(void *)(v12 + 24) >> 1)
  {
    sub_24F77BC38();
    uint64_t v12 = v37;
  }
  *(void *)(v12 + 16) = v32 + 1;
  uint64_t v33 = v12 + 16 * v32;
  *(void *)(v33 + 32) = v2;
  *(void *)(v33 + 40) = v41;
  swift_bridgeObjectRetain();
  uint64_t v34 = swift_bridgeObjectRetain();
  sub_24F7BDE98(v34);
  swift_bridgeObjectRelease_n();
  sub_24F781274(&qword_26B1F7F48);
  sub_24F7871AC();
  a1 = sub_24F8CED30();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_24F7BFF48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v15[0] = a1;
  v15[1] = a2;
  sub_24F8089AC((uint64_t)v12);
  if (v13 == 1)
  {
    uint64_t result = sub_24F77841C((uint64_t)v12, &qword_26B1F7238);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(_OWORD *)(a3 + 24) = xmmword_24F8DF640;
  }
  else
  {
    uint64_t v6 = sub_24F799704((uint64_t)v12, (uint64_t)v14, &qword_26B1F7AC0);
    uint64_t v7 = *v3;
    MEMORY[0x270FA5388](v6);
    void v11[2] = v15;
    swift_bridgeObjectRetain();
    unint64_t v8 = sub_24F8016E8(sub_24F7C2F1C, (uint64_t)v11, v7);
    char v10 = v9;
    uint64_t result = swift_bridgeObjectRelease();
    if (v10)
    {
      __break(1u);
    }
    else
    {
      sub_24F83C848(v8);
      swift_bridgeObjectRelease();
      return sub_24F799704((uint64_t)v14, a3, &qword_26B1F7AC0);
    }
  }
  return result;
}

unint64_t sub_24F7C007C()
{
  sub_24F77726C();
  sub_24F782E5C();
  swift_bridgeObjectRetain();
  sub_24F8CEE50();
  swift_bridgeObjectRelease();
  sub_24F8CFF80();
  uint64_t v2 = sub_24F777244();
  return sub_24F7C03D8(v2, v3, v1, v0, v4);
}

unint64_t sub_24F7C0104()
{
  sub_24F782E5C();
  sub_24F82A114();
  sub_24F8CFF80();
  uint64_t v0 = sub_24F781CB4();
  return sub_24F7C04BC(v0, v1);
}

unint64_t sub_24F7C0164(uint64_t a1, unint64_t a2)
{
  sub_24F782E5C();
  sub_24F8CFF40();
  if (a2 > 1) {
    sub_24F8CEE50();
  }
  sub_24F8CFF80();
  uint64_t v3 = sub_24F77390C();
  return sub_24F7C05D0(v3, v4, v5);
}

unint64_t sub_24F7C01FC()
{
  sub_24F77726C();
  unsigned __int8 v4 = v3;
  sub_24F782E5C();
  sub_24F8A2454();
  swift_bridgeObjectRetain();
  sub_24F8CEE50();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_24F7C2D90();
  swift_bridgeObjectRelease();
  uint64_t v5 = sub_24F8CFF80();
  return sub_24F7C06B4(v4, v2, v1, v0, v5);
}

unint64_t sub_24F7C02B0()
{
  sub_24F782E5C();
  sub_24F8A2454();
  swift_bridgeObjectRetain();
  sub_24F8CEE50();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_24F7C2D90();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_24F7C2D90();
  swift_bridgeObjectRelease();
  sub_24F8CFF80();
  uint64_t v0 = (void *)sub_24F781CB4();
  return sub_24F7C09F0(v0, v1);
}

unint64_t sub_24F7C0378()
{
  sub_24F782E5C();
  sub_24F7C2DF8();
  sub_24F8CFF80();
  uint64_t v0 = sub_24F781CB4();
  return sub_24F7C0E00(v0, v1);
}

unint64_t sub_24F7C03D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = a5 & ~v7;
  if ((*(void *)(v5 + 64 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
  {
    uint64_t v11 = *(void *)(v5 + 48);
    uint64_t v12 = (void *)(v11 + 32 * v8);
    BOOL v13 = *v12 == a1 && v12[1] == a2;
    if (!v13 && (sub_24F8CFD00() & 1) == 0)
    {
      uint64_t v14 = ~v7;
      do
      {
        unint64_t v8 = (v8 + 1) & v14;
        if (((*(void *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
          break;
        }
        char v15 = (void *)(v11 + 32 * v8);
        BOOL v16 = *v15 == a1 && v15[1] == a2;
      }
      while (!v16 && (sub_24F8CFD00() & 1) == 0);
    }
  }
  return v8;
}

unint64_t sub_24F7C04BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    type metadata accessor for TableAlias();
    swift_retain();
    BOOL v6 = static TableAlias.== infix(_:_:)();
    swift_release();
    if (!v6)
    {
      uint64_t v7 = ~v4;
      for (unint64_t i = (i + 1) & v7; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v7)
      {
        swift_retain();
        BOOL v8 = static TableAlias.== infix(_:_:)();
        swift_release();
        if (v8) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_24F7C05D0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = ~v5;
    uint64_t v10 = *(void *)(v3 + 48);
    do
    {
      uint64_t v11 = (void *)(v10 + 16 * v6);
      uint64_t v12 = v11[1];
      if (v12)
      {
        if (v12 == 1)
        {
          if (a2 == 1) {
            return v6;
          }
        }
        else if (a2 >= 2)
        {
          BOOL v13 = *v11 == a1 && v12 == a2;
          if (v13 || (sub_24F8CFD00() & 1) != 0) {
            return v6;
          }
        }
      }
      else if (!a2)
      {
        return v6;
      }
      unint64_t v6 = (v6 + 1) & v9;
    }
    while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
  }
  return v6;
}

unint64_t sub_24F7C06B4(unsigned __int8 a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v6 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v7 = a5 & ~v6;
  if ((*(void *)(v5 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7))
  {
    uint64_t v26 = ~v6;
    uint64_t v27 = a1;
    do
    {
      uint64_t v9 = *(void *)(v5 + 48) + 32 * v7;
      uint64_t v11 = *(void *)(v9 + 8);
      uint64_t v10 = *(void *)(v9 + 16);
      uint64_t v12 = *(void **)(v9 + 24);
      unint64_t v13 = 0xE800000000000000;
      uint64_t v14 = 0x4B4341424C4C4F52;
      switch(*(unsigned char *)v9)
      {
        case 1:
          unint64_t v13 = 0xE500000000000000;
          uint64_t v14 = 0x54524F4241;
          break;
        case 2:
          unint64_t v13 = 0xE400000000000000;
          uint64_t v14 = 1279869254;
          break;
        case 3:
          unint64_t v13 = 0xE600000000000000;
          uint64_t v14 = 0x45524F4E4749;
          break;
        case 4:
          unint64_t v13 = 0xE700000000000000;
          uint64_t v14 = 0x4543414C504552;
          break;
        default:
          break;
      }
      unint64_t v15 = 0xE800000000000000;
      uint64_t v16 = 0x4B4341424C4C4F52;
      switch(v27)
      {
        case 1:
          unint64_t v15 = 0xE500000000000000;
          uint64_t v16 = 0x54524F4241;
          break;
        case 2:
          unint64_t v15 = 0xE400000000000000;
          uint64_t v16 = 1279869254;
          break;
        case 3:
          unint64_t v15 = 0xE600000000000000;
          uint64_t v16 = 0x45524F4E4749;
          break;
        case 4:
          unint64_t v15 = 0xE700000000000000;
          uint64_t v16 = 0x4543414C504552;
          break;
        default:
          break;
      }
      if (v14 == v16 && v13 == v15)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v18 = sub_24F8CFD00();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v18 & 1) == 0) {
          goto LABEL_43;
        }
      }
      BOOL v19 = v11 == a2 && v10 == a3;
      if (v19 || (sub_24F8CFD00() & 1) != 0)
      {
        unint64_t v20 = v12[2];
        if (v20 == a4[2])
        {
          if (!v20 || v12 == a4)
          {
LABEL_45:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return v7;
          }
          BOOL v21 = v12[4] == a4[4] && v12[5] == a4[5];
          if (v21 || (sub_24F8CFD00() & 1) != 0)
          {
            if (v20 == 1) {
              goto LABEL_45;
            }
            uint64_t v22 = 0;
            unint64_t v23 = 1;
            while (1)
            {
              if (v23 >= v20)
              {
                __break(1u);
                JUMPOUT(0x24F7C09C8);
              }
              BOOL v24 = v12[v22 + 6] == a4[v22 + 6] && v12[v22 + 7] == a4[v22 + 7];
              if (!v24 && (sub_24F8CFD00() & 1) == 0) {
                break;
              }
              ++v23;
              v22 += 2;
              if (v20 == v23) {
                goto LABEL_45;
              }
            }
          }
        }
      }
LABEL_43:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v7 = (v7 + 1) & v26;
    }
    while (((*(void *)(v5 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
  }
  return v7;
}

unint64_t sub_24F7C09F0(void *a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  uint64_t v32 = v2 + 64;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
    return v4;
  }
  uint64_t v31 = ~v3;
  uint64_t v33 = *(unsigned __int8 *)a1;
  uint64_t v5 = (void *)a1[3];
  uint64_t v35 = a1[2];
  uint64_t v36 = a1[1];
  uint64_t v6 = (void *)a1[4];
  while (1)
  {
    uint64_t v7 = *(void *)(v34 + 48) + 40 * v4;
    uint64_t v9 = *(void *)(v7 + 8);
    uint64_t v8 = *(void *)(v7 + 16);
    uint64_t v10 = *(void **)(v7 + 24);
    uint64_t v11 = *(void **)(v7 + 32);
    unint64_t v12 = 0xE800000000000000;
    uint64_t v13 = 0x4B4341424C4C4F52;
    switch(*(unsigned char *)v7)
    {
      case 1:
        unint64_t v12 = 0xE500000000000000;
        uint64_t v13 = 0x54524F4241;
        break;
      case 2:
        unint64_t v12 = 0xE400000000000000;
        uint64_t v13 = 1279869254;
        break;
      case 3:
        unint64_t v12 = 0xE600000000000000;
        uint64_t v13 = 0x45524F4E4749;
        break;
      case 4:
        unint64_t v12 = 0xE700000000000000;
        uint64_t v13 = 0x4543414C504552;
        break;
      default:
        break;
    }
    unint64_t v14 = 0xE800000000000000;
    uint64_t v15 = 0x4B4341424C4C4F52;
    switch(v33)
    {
      case 1:
        unint64_t v14 = 0xE500000000000000;
        uint64_t v15 = 0x54524F4241;
        break;
      case 2:
        unint64_t v14 = 0xE400000000000000;
        uint64_t v15 = 1279869254;
        break;
      case 3:
        unint64_t v14 = 0xE600000000000000;
        uint64_t v15 = 0x45524F4E4749;
        break;
      case 4:
        unint64_t v14 = 0xE700000000000000;
        uint64_t v15 = 0x4543414C504552;
        break;
      default:
        break;
    }
    if (v13 == v15 && v12 == v14)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v17 = sub_24F8CFD00();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v17 & 1) == 0) {
        goto LABEL_64;
      }
    }
    BOOL v18 = v9 == v36 && v8 == v35;
    if (!v18 && (sub_24F8CFD00() & 1) == 0) {
      goto LABEL_64;
    }
    unint64_t v19 = v10[2];
    if (v19 != v5[2]) {
      goto LABEL_64;
    }
    if (v19) {
      BOOL v20 = v10 == v5;
    }
    else {
      BOOL v20 = 1;
    }
    if (!v20)
    {
      BOOL v26 = v10[4] == v5[4] && v10[5] == v5[5];
      if (!v26 && (sub_24F8CFD00() & 1) == 0) {
        goto LABEL_64;
      }
      if (v19 != 1)
      {
        uint64_t v27 = 0;
        unint64_t v28 = 1;
        while (v28 < v19)
        {
          BOOL v29 = v10[v27 + 6] == v5[v27 + 6] && v10[v27 + 7] == v5[v27 + 7];
          if (!v29 && (sub_24F8CFD00() & 1) == 0) {
            goto LABEL_64;
          }
          ++v28;
          v27 += 2;
          if (v19 == v28) {
            goto LABEL_31;
          }
        }
LABEL_70:
        __break(1u);
        JUMPOUT(0x24F7C0DD8);
      }
    }
LABEL_31:
    unint64_t v21 = v11[2];
    if (v21 == v6[2])
    {
      if (!v21 || v11 == v6) {
        goto LABEL_66;
      }
      BOOL v22 = v11[4] == v6[4] && v11[5] == v6[5];
      if (v22 || (sub_24F8CFD00() & 1) != 0) {
        break;
      }
    }
LABEL_64:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v4 = (v4 + 1) & v31;
    if (((*(void *)(v32 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
      return v4;
    }
  }
  if (v21 != 1)
  {
    uint64_t v23 = 0;
    unint64_t v24 = 1;
    while (v24 < v21)
    {
      BOOL v25 = v11[v23 + 6] == v6[v23 + 6] && v11[v23 + 7] == v6[v23 + 7];
      if (!v25 && (sub_24F8CFD00() & 1) == 0) {
        goto LABEL_64;
      }
      ++v24;
      v23 += 2;
      if (v21 == v24) {
        goto LABEL_66;
      }
    }
    __break(1u);
    goto LABEL_70;
  }
LABEL_66:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4;
}

unint64_t sub_24F7C0E00(uint64_t a1, uint64_t a2)
{
  __s1[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) == 0) {
    return result;
  }
  uint64_t v7 = ~v5;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v92 = a1;
  uint64_t v87 = v8;
  uint64_t v88 = ~v5;
  while (1)
  {
    uint64_t v9 = *(void *)(*(void *)(v2 + 48) + 8 * result);
    if (*(void *)(v9 + 16) != v8) {
      goto LABEL_164;
    }
    if (!v8 || v9 == a1) {
      return result;
    }
    unint64_t v91 = result;
    swift_bridgeObjectRetain();
    uint64_t v10 = 0;
    uint64_t v93 = v9;
    while (2)
    {
      uint64_t v11 = *(uint64_t *)(v9 + v10 + 32);
      unint64_t v12 = *(void *)(v9 + v10 + 40);
      char v13 = *(unsigned char *)(v9 + v10 + 48);
      uint64_t v14 = *(uint64_t *)(a1 + v10 + 32);
      unint64_t v15 = *(void *)(a1 + v10 + 40);
      int v16 = *(unsigned __int8 *)(a1 + v10 + 48);
      switch(v13)
      {
        case 1:
          if (*(unsigned char *)(a1 + v10 + 48))
          {
            if (v16 != 1) {
              goto LABEL_161;
            }
            sub_24F781F10(*(void *)(v9 + v10 + 32), *(void *)(v9 + v10 + 40), 1);
            sub_24F781F10(v14, v15, 1);
            sub_24F781F10(v11, v12, 1);
            if (*(double *)&v11 != *(double *)&v14) {
              goto LABEL_162;
            }
          }
          else
          {
            sub_24F781F10(*(void *)(v9 + v10 + 32), *(void *)(v9 + v10 + 40), 1);
            sub_24F781F10(v14, v15, 0);
            sub_24F781F10(v11, v12, 1);
            if (*(double *)&v11 <= -9.22337204e18
              || *(double *)&v11 >= 9.22337204e18
              || trunc(*(double *)&v11) != *(double *)&v11
              || v14 != (uint64_t)*(double *)&v11)
            {
              goto LABEL_162;
            }
          }
          goto LABEL_67;
        case 2:
          if (v16 != 2)
          {
            sub_24F781F34(*(void *)(v9 + v10 + 32), *(void *)(v9 + v10 + 40), 2);
            swift_bridgeObjectRetain();
            goto LABEL_161;
          }
          if (v11 == v14 && v12 == v15)
          {
            sub_24F781F34(*(void *)(v9 + v10 + 32), *(void *)(v9 + v10 + 40), 2);
            sub_24F781F34(v11, v12, 2);
            uint64_t v22 = v11;
            unint64_t v23 = v12;
            char v24 = 2;
LABEL_43:
            sub_24F781F10(v22, v23, v24);
LABEL_66:
            sub_24F781F10(v11, v12, v13);
          }
          else
          {
            char v18 = sub_24F8CFD00();
            sub_24F781F34(v14, v15, 2);
            sub_24F781F34(v11, v12, 2);
            sub_24F781F10(v11, v12, 2);
            sub_24F781F10(v14, v15, 2);
            if ((v18 & 1) == 0) {
              goto LABEL_162;
            }
          }
          goto LABEL_67;
        case 3:
          if (v16 == 3)
          {
            uint64_t v19 = 0;
            unint64_t v20 = HIDWORD(v11);
            switch(v12 >> 62)
            {
              case 1uLL:
                if (__OFSUB__(HIDWORD(v11), v11))
                {
                  __break(1u);
LABEL_170:
                  __break(1u);
LABEL_171:
                  __break(1u);
LABEL_172:
                  __break(1u);
LABEL_173:
                  __break(1u);
LABEL_174:
                  __break(1u);
LABEL_175:
                  __break(1u);
LABEL_176:
                  __break(1u);
LABEL_177:
                  __break(1u);
LABEL_178:
                  __break(1u);
LABEL_179:
                  __break(1u);
LABEL_180:
                  __break(1u);
LABEL_181:
                  __break(1u);
LABEL_182:
                  __break(1u);
LABEL_183:
                  __break(1u);
LABEL_184:
                  __break(1u);
LABEL_185:
                  __break(1u);
LABEL_186:
                  __break(1u);
LABEL_187:
                  __break(1u);
LABEL_188:
                  __break(1u);
LABEL_189:
                  __break(1u);
LABEL_190:
                  __break(1u);
LABEL_191:
                  __break(1u);
                }
                uint64_t v19 = HIDWORD(v11) - (int)v11;
LABEL_47:
                sub_24F781F34(v11, v12, 3);
                sub_24F781F34(v11, v12, 3);
                unint64_t v20 = HIDWORD(v11);
                break;
              case 2uLL:
                uint64_t v26 = *(void *)(v11 + 16);
                uint64_t v25 = *(void *)(v11 + 24);
                uint64_t v19 = v25 - v26;
                if (!__OFSUB__(v25, v26)) {
                  goto LABEL_47;
                }
                goto LABEL_170;
              case 3uLL:
                break;
              default:
                uint64_t v19 = BYTE6(v12);
                break;
            }
            unint64_t v27 = v15 >> 62;
            switch(v15 >> 62)
            {
              case 1uLL:
                LODWORD(v28) = HIDWORD(v14) - v14;
                if (__OFSUB__(HIDWORD(v14), v14)) {
                  goto LABEL_171;
                }
                uint64_t v28 = (int)v28;
LABEL_53:
                if (v19 != v28)
                {
LABEL_166:
                  sub_24F781F34(v14, v15, 3);
                  sub_24F781F10(v11, v12, 3);
                  sub_24F781F10(v14, v15, 3);
                  sub_24F781F10(v11, v12, 3);
                  swift_bridgeObjectRelease();
                  uint64_t v2 = v90;
                  unint64_t result = v91;
                  a1 = v92;
                  goto LABEL_163;
                }
                if (v19 < 1)
                {
LABEL_65:
                  sub_24F781F34(v14, v15, 3);
                  sub_24F781F10(v11, v12, 3);
                  sub_24F781F10(v14, v15, 3);
                  a1 = v92;
                  uint64_t v9 = v93;
                  goto LABEL_66;
                }
                uint64_t v32 = v14 >> 32;
                switch(v12 >> 62)
                {
                  case 1uLL:
                    if ((int)v11 > v11 >> 32) {
                      goto LABEL_173;
                    }
                    uint64_t v84 = v14 >> 32;
                    sub_24F781F34(v14, v15, 3);
                    sub_24F781F34(v14, v15, 3);
                    sub_24F781F34(v14, v15, 3);
                    sub_24F781F34(v14, v15, 3);
                    sub_24F781F34(v14, v15, 3);
                    sub_24F781F34(v11, v12, 3);
                    sub_24F781F34(v14, v15, 3);
                    sub_24F781F34(v11, v12, 3);
                    uint64_t v36 = sub_24F8CE6A0();
                    if (v36)
                    {
                      uint64_t v37 = v36;
                      uint64_t v38 = sub_24F8CE6C0();
                      if (__OFSUB__((int)v11, v38)) {
                        goto LABEL_175;
                      }
                      uint64_t v82 = (void *)(v37 + (int)v11 - v38);
                    }
                    else
                    {
                      uint64_t v82 = 0;
                    }
                    uint64_t v9 = v93;
                    sub_24F8CE6B0();
                    a1 = v92;
                    if (v27)
                    {
                      if (v27 == 1)
                      {
                        if (v84 < (int)v14) {
                          goto LABEL_182;
                        }
                        swift_retain();
                        uint64_t v52 = (char *)sub_24F8CE6A0();
                        if (v52)
                        {
                          uint64_t v53 = sub_24F8CE6C0();
                          if (__OFSUB__((int)v14, v53)) {
                            goto LABEL_191;
                          }
                          v52 += (int)v14 - v53;
                        }
                        uint64_t v54 = sub_24F8CE6B0();
                        int64_t v55 = v84 - (int)v14;
                        if (v54 < v55) {
                          int64_t v55 = v54;
                        }
                        if (!v82) {
                          goto LABEL_195;
                        }
                        if (!v52) {
                          goto LABEL_196;
                        }
                        int v51 = memcmp(v82, v52, v55);
                        sub_24F781F10(v14, v15, 3);
                      }
                      else
                      {
                        uint64_t v74 = *(void *)(v14 + 16);
                        uint64_t v75 = *(void *)(v14 + 24);
                        swift_retain();
                        swift_retain();
                        uint64_t v76 = (char *)sub_24F8CE6A0();
                        if (v76)
                        {
                          uint64_t v77 = sub_24F8CE6C0();
                          if (__OFSUB__(v74, v77)) {
                            goto LABEL_190;
                          }
                          v76 += v74 - v77;
                        }
                        BOOL v31 = __OFSUB__(v75, v74);
                        int64_t v78 = v75 - v74;
                        if (v31) {
                          goto LABEL_183;
                        }
                        uint64_t v79 = sub_24F8CE6B0();
                        if (v79 >= v78) {
                          size_t v80 = v78;
                        }
                        else {
                          size_t v80 = v79;
                        }
                        uint64_t v9 = v93;
                        if (!v82) {
                          goto LABEL_203;
                        }
                        a1 = v92;
                        if (!v76) {
                          goto LABEL_204;
                        }
                        int v51 = memcmp(v82, v76, v80);
                        swift_release();
                        swift_release();
                      }
                    }
                    else
                    {
                      __s1[0] = v14;
                      LOWORD(__s1[1]) = v15;
                      BYTE2(__s1[1]) = BYTE2(v15);
                      BYTE3(__s1[1]) = BYTE3(v15);
                      BYTE4(__s1[1]) = BYTE4(v15);
                      BYTE5(__s1[1]) = BYTE5(v15);
                      if (!v82) {
                        goto LABEL_202;
                      }
                      int v51 = memcmp(v82, __s1, BYTE6(v15));
                    }
                    sub_24F781F10(v14, v15, 3);
                    sub_24F781F10(v11, v12, 3);
                    goto LABEL_157;
                  case 2uLL:
                    uint64_t v85 = v14 >> 32;
                    uint64_t v39 = *(void *)(v11 + 16);
                    sub_24F781F34(v14, v15, 3);
                    sub_24F781F34(v14, v15, 3);
                    sub_24F781F34(v14, v15, 3);
                    sub_24F781F34(v14, v15, 3);
                    sub_24F781F34(v14, v15, 3);
                    sub_24F781F34(v14, v15, 3);
                    sub_24F781F34(v11, v12, 3);
                    swift_retain();
                    swift_retain();
                    uint64_t v40 = sub_24F8CE6A0();
                    if (v40)
                    {
                      uint64_t v41 = v40;
                      uint64_t v42 = sub_24F8CE6C0();
                      if (__OFSUB__(v39, v42)) {
                        goto LABEL_174;
                      }
                      uint64_t v81 = (void *)(v41 + v39 - v42);
                    }
                    else
                    {
                      uint64_t v81 = 0;
                    }
                    uint64_t v9 = v93;
                    sub_24F8CE6B0();
                    a1 = v92;
                    if (!v27)
                    {
                      __s1[0] = v14;
                      LOWORD(__s1[1]) = v15;
                      BYTE2(__s1[1]) = BYTE2(v15);
                      BYTE3(__s1[1]) = BYTE3(v15);
                      BYTE4(__s1[1]) = BYTE4(v15);
                      BYTE5(__s1[1]) = BYTE5(v15);
                      if (!v81) {
                        goto LABEL_199;
                      }
                      int v51 = memcmp(v81, __s1, BYTE6(v15));
LABEL_142:
                      sub_24F781F10(v14, v15, 3);
                      goto LABEL_143;
                    }
                    if (v27 != 1)
                    {
                      uint64_t v67 = *(void *)(v14 + 16);
                      uint64_t v68 = *(void *)(v14 + 24);
                      swift_retain();
                      swift_retain();
                      unint64_t v69 = (char *)sub_24F8CE6A0();
                      if (v69)
                      {
                        uint64_t v70 = sub_24F8CE6C0();
                        if (__OFSUB__(v67, v70)) {
                          goto LABEL_186;
                        }
                        v69 += v67 - v70;
                      }
                      BOOL v31 = __OFSUB__(v68, v67);
                      int64_t v71 = v68 - v67;
                      if (v31) {
                        goto LABEL_181;
                      }
                      uint64_t v72 = sub_24F8CE6B0();
                      if (v72 >= v71) {
                        size_t v73 = v71;
                      }
                      else {
                        size_t v73 = v72;
                      }
                      uint64_t v9 = v93;
                      if (!v81) {
                        goto LABEL_200;
                      }
                      a1 = v92;
                      if (!v69) {
                        goto LABEL_201;
                      }
                      int v51 = memcmp(v81, v69, v73);
                      swift_release();
                      swift_release();
                      goto LABEL_142;
                    }
                    if (v85 < (int)v14) {
                      goto LABEL_178;
                    }
                    swift_retain();
                    uint64_t v47 = (char *)sub_24F8CE6A0();
                    if (v47)
                    {
                      uint64_t v48 = sub_24F8CE6C0();
                      if (__OFSUB__((int)v14, v48)) {
                        goto LABEL_189;
                      }
                      v47 += (int)v14 - v48;
                    }
                    uint64_t v49 = sub_24F8CE6B0();
                    int64_t v50 = v85 - (int)v14;
                    if (v49 < v50) {
                      int64_t v50 = v49;
                    }
                    if (!v81) {
                      goto LABEL_193;
                    }
                    if (!v47) {
                      goto LABEL_194;
                    }
                    int v51 = memcmp(v81, v47, v50);
                    sub_24F781F10(v14, v15, 3);
                    sub_24F781F10(v14, v15, 3);
LABEL_143:
                    swift_release();
                    swift_release();
LABEL_157:
                    sub_24F781F10(v14, v15, 3);
                    sub_24F781F10(v11, v12, 3);
                    sub_24F781F10(v11, v12, 3);
                    sub_24F781F10(v14, v15, 3);
                    sub_24F781F10(v14, v15, 3);
                    sub_24F781F10(v14, v15, 3);
                    sub_24F781F10(v14, v15, 3);
                    sub_24F781F10(v11, v12, 3);
                    if (v51) {
                      goto LABEL_162;
                    }
                    break;
                  case 3uLL:
                    memset(__s1, 0, 14);
                    uint64_t v9 = v93;
                    if (!v27) {
                      goto LABEL_88;
                    }
                    if (v27 == 1)
                    {
                      uint64_t v83 = v14 >> 32;
                      uint64_t v86 = (int)v14;
                      a1 = v92;
                      if (v32 < (int)v14) {
                        goto LABEL_177;
                      }
                      sub_24F781F34(v14, v15, 3);
                      sub_24F781F34(v14, v15, 3);
                      sub_24F781F34(v14, v15, 3);
                      sub_24F781F34(v14, v15, 3);
                      sub_24F781F34(v11, v12, 3);
                      uint64_t v33 = (char *)sub_24F8CE6A0();
                      if (v33)
                      {
                        uint64_t v43 = sub_24F8CE6C0();
                        if (__OFSUB__((int)v14, v43)) {
                          goto LABEL_188;
                        }
                        v33 += (int)v14 - v43;
                      }
                      uint64_t v35 = sub_24F8CE6B0();
                      if (!v33) {
                        goto LABEL_192;
                      }
LABEL_83:
                      if (v35 >= v83 - v86) {
                        size_t v44 = v83 - v86;
                      }
                      else {
                        size_t v44 = v35;
                      }
                      int v45 = memcmp(__s1, v33, v44);
                      sub_24F781F10(v11, v12, 3);
                      sub_24F781F10(v11, v12, 3);
                      sub_24F781F10(v14, v15, 3);
                      sub_24F781F10(v14, v15, 3);
                      sub_24F781F10(v14, v15, 3);
                      sub_24F781F10(v14, v15, 3);
                      sub_24F781F10(v11, v12, 3);
                      if (v45) {
                        goto LABEL_162;
                      }
                    }
                    else
                    {
                      uint64_t v62 = *(void *)(v14 + 16);
                      uint64_t v63 = *(void *)(v14 + 24);
                      sub_24F781F34(v14, v15, 3);
                      sub_24F781F34(v14, v15, 3);
                      sub_24F781F34(v14, v15, 3);
                      sub_24F781F34(v14, v15, 3);
                      sub_24F781F34(v11, v12, 3);
                      swift_retain();
                      swift_retain();
                      uint64_t v58 = (char *)sub_24F8CE6A0();
                      if (v58)
                      {
                        uint64_t v64 = sub_24F8CE6C0();
                        if (__OFSUB__(v62, v64)) {
                          goto LABEL_185;
                        }
                        v58 += v62 - v64;
                      }
                      BOOL v31 = __OFSUB__(v63, v62);
                      int64_t v60 = v63 - v62;
                      if (v31) {
                        goto LABEL_180;
                      }
                      uint64_t v61 = sub_24F8CE6B0();
                      uint64_t v9 = v93;
                      if (!v58) {
                        goto LABEL_198;
                      }
LABEL_125:
                      if (v61 >= v60) {
                        size_t v65 = v60;
                      }
                      else {
                        size_t v65 = v61;
                      }
                      int v66 = memcmp(__s1, v58, v65);
                      swift_release();
                      swift_release();
                      sub_24F781F10(v11, v12, 3);
                      sub_24F781F10(v11, v12, 3);
                      sub_24F781F10(v14, v15, 3);
                      sub_24F781F10(v14, v15, 3);
                      sub_24F781F10(v14, v15, 3);
                      sub_24F781F10(v14, v15, 3);
                      sub_24F781F10(v11, v12, 3);
                      a1 = v92;
                      if (v66) {
                        goto LABEL_162;
                      }
                    }
                    goto LABEL_67;
                  default:
                    LOWORD(__s1[0]) = v11;
                    BYTE2(__s1[0]) = BYTE2(v11);
                    BYTE3(__s1[0]) = BYTE3(v11);
                    BYTE4(__s1[0]) = v20;
                    BYTE5(__s1[0]) = BYTE5(v11);
                    BYTE6(__s1[0]) = BYTE6(v11);
                    HIBYTE(__s1[0]) = HIBYTE(v11);
                    LOWORD(__s1[1]) = v12;
                    BYTE2(__s1[1]) = BYTE2(v12);
                    BYTE3(__s1[1]) = BYTE3(v12);
                    BYTE4(__s1[1]) = BYTE4(v12);
                    BYTE5(__s1[1]) = BYTE5(v12);
                    uint64_t v9 = v93;
                    if (!v27)
                    {
LABEL_88:
                      uint64_t __s2 = v14;
                      __int16 v95 = v15;
                      char v96 = BYTE2(v15);
                      char v97 = BYTE3(v15);
                      char v98 = BYTE4(v15);
                      char v99 = BYTE5(v15);
                      sub_24F781F34(v14, v15, 3);
                      sub_24F781F34(v14, v15, 3);
                      sub_24F781F34(v14, v15, 3);
                      sub_24F781F34(v14, v15, 3);
                      int v46 = memcmp(__s1, &__s2, BYTE6(v15));
                      sub_24F781F10(v11, v12, 3);
                      sub_24F781F10(v14, v15, 3);
                      sub_24F781F10(v14, v15, 3);
                      sub_24F781F10(v14, v15, 3);
                      sub_24F781F10(v14, v15, 3);
                      sub_24F781F10(v11, v12, 3);
                      a1 = v92;
                      if (v46) {
                        goto LABEL_162;
                      }
                      goto LABEL_67;
                    }
                    if (v27 == 1)
                    {
                      uint64_t v83 = v14 >> 32;
                      uint64_t v86 = (int)v14;
                      a1 = v92;
                      if (v32 < (int)v14) {
                        goto LABEL_176;
                      }
                      sub_24F781F34(v14, v15, 3);
                      sub_24F781F34(v14, v15, 3);
                      sub_24F781F34(v14, v15, 3);
                      sub_24F781F34(v14, v15, 3);
                      sub_24F781F34(v11, v12, 3);
                      uint64_t v33 = (char *)sub_24F8CE6A0();
                      if (v33)
                      {
                        uint64_t v34 = sub_24F8CE6C0();
                        if (__OFSUB__((int)v14, v34)) {
                          goto LABEL_187;
                        }
                        v33 += (int)v14 - v34;
                      }
                      uint64_t v35 = sub_24F8CE6B0();
                      if (!v33)
                      {
                        __break(1u);
LABEL_192:
                        __break(1u);
LABEL_193:
                        __break(1u);
LABEL_194:
                        __break(1u);
LABEL_195:
                        __break(1u);
LABEL_196:
                        __break(1u);
LABEL_197:
                        __break(1u);
LABEL_198:
                        __break(1u);
LABEL_199:
                        __break(1u);
LABEL_200:
                        __break(1u);
LABEL_201:
                        __break(1u);
LABEL_202:
                        __break(1u);
LABEL_203:
                        __break(1u);
LABEL_204:
                        __break(1u);
                        JUMPOUT(0x24F7C1F9CLL);
                      }
                      goto LABEL_83;
                    }
                    uint64_t v56 = *(void *)(v14 + 16);
                    uint64_t v57 = *(void *)(v14 + 24);
                    sub_24F781F34(v14, v15, 3);
                    sub_24F781F34(v14, v15, 3);
                    sub_24F781F34(v14, v15, 3);
                    sub_24F781F34(v14, v15, 3);
                    sub_24F781F34(v11, v12, 3);
                    swift_retain();
                    swift_retain();
                    uint64_t v58 = (char *)sub_24F8CE6A0();
                    if (v58)
                    {
                      uint64_t v59 = sub_24F8CE6C0();
                      if (__OFSUB__(v56, v59)) {
                        goto LABEL_184;
                      }
                      v58 += v56 - v59;
                    }
                    BOOL v31 = __OFSUB__(v57, v56);
                    int64_t v60 = v57 - v56;
                    if (v31) {
                      goto LABEL_179;
                    }
                    uint64_t v61 = sub_24F8CE6B0();
                    uint64_t v9 = v93;
                    if (!v58) {
                      goto LABEL_197;
                    }
                    goto LABEL_125;
                }
                break;
              case 2uLL:
                uint64_t v30 = *(void *)(v14 + 16);
                uint64_t v29 = *(void *)(v14 + 24);
                BOOL v31 = __OFSUB__(v29, v30);
                uint64_t v28 = v29 - v30;
                if (!v31) {
                  goto LABEL_53;
                }
                goto LABEL_172;
              case 3uLL:
                if (!v19) {
                  goto LABEL_65;
                }
                goto LABEL_166;
              default:
                uint64_t v28 = BYTE6(v15);
                goto LABEL_53;
            }
LABEL_67:
            v10 += 24;
            if (!--v8)
            {
              swift_bridgeObjectRelease();
              return v91;
            }
            continue;
          }
          sub_24F781F34(*(void *)(v9 + v10 + 32), *(void *)(v9 + v10 + 40), 3);
          sub_24F78419C(v11, v12);
LABEL_161:
          sub_24F781F34(v14, v15, v16);
          sub_24F781F10(v11, v12, v13);
          sub_24F781F10(v14, v15, v16);
          sub_24F781F10(v11, v12, v13);
LABEL_162:
          swift_bridgeObjectRelease();
          uint64_t v2 = v90;
          unint64_t result = v91;
LABEL_163:
          uint64_t v7 = v88;
          uint64_t v4 = v89;
          uint64_t v8 = v87;
LABEL_164:
          unint64_t result = (result + 1) & v7;
          if (((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) == 0) {
            return result;
          }
          break;
        case 4:
          if (v16 != 4 || (v15 | v14) != 0) {
            goto LABEL_161;
          }
          sub_24F781F10(*(void *)(v9 + v10 + 32), *(void *)(v9 + v10 + 40), 4);
          uint64_t v22 = 0;
          unint64_t v23 = 0;
          char v24 = 4;
          goto LABEL_43;
        default:
          if (*(unsigned char *)(a1 + v10 + 48))
          {
            if (v16 != 1) {
              goto LABEL_161;
            }
            sub_24F781F10(*(void *)(v9 + v10 + 32), *(void *)(v9 + v10 + 40), 0);
            sub_24F781F10(v14, v15, 1);
            sub_24F781F10(v11, v12, 0);
            if (*(double *)&v14 <= -9.22337204e18
              || *(double *)&v14 >= 9.22337204e18
              || trunc(*(double *)&v14) != *(double *)&v14
              || v11 != (uint64_t)*(double *)&v14)
            {
              goto LABEL_162;
            }
          }
          else
          {
            sub_24F781F10(*(void *)(v9 + v10 + 32), *(void *)(v9 + v10 + 40), 0);
            sub_24F781F10(v14, v15, 0);
            sub_24F781F10(v11, v12, 0);
            if (v11 != v14) {
              goto LABEL_162;
            }
          }
          goto LABEL_67;
      }
      break;
    }
  }
}

void sub_24F7C1FE0(uint64_t a1, char a2, void *a3)
{
  swift_retain();
  sub_24F8CFA20();
  uint64_t v4 = v23;
  if (!v23)
  {
    swift_release_n();
    return;
  }
  while (1)
  {
    uint64_t v5 = (void *)*a3;
    unint64_t v7 = sub_24F782950();
    uint64_t v8 = v5[2];
    BOOL v9 = (v6 & 1) == 0;
    if (__OFADD__(v8, v9))
    {
      __break(1u);
LABEL_16:
      __break(1u);
LABEL_17:
      sub_24F8CFEA0();
      __break(1u);
      goto LABEL_18;
    }
    char v10 = v6;
    if (v5[3] < v8 + v9) {
      break;
    }
    if (a2)
    {
      if (v6) {
        goto LABEL_12;
      }
    }
    else
    {
      sub_24F781274(&qword_26B1F58F8);
      sub_24F8CF990();
      if (v10) {
        goto LABEL_12;
      }
    }
LABEL_9:
    char v13 = (void *)*a3;
    *(void *)(*a3 + 8 * (v7 >> 6) + 64) |= 1 << v7;
    uint64_t v14 = (void *)(v13[6] + 16 * v7);
    *uint64_t v14 = v22;
    v14[1] = v4;
    uint64_t v15 = v13[7] + 24 * v7;
    *(void *)uint64_t v15 = v24;
    *(void *)(v15 + 8) = v25;
    *(unsigned char *)(v15 + 16) = v26;
    uint64_t v16 = v13[2];
    BOOL v17 = __OFADD__(v16, 1);
    uint64_t v18 = v16 + 1;
    if (v17) {
      goto LABEL_16;
    }
    void v13[2] = v18;
    sub_24F8CFA20();
    uint64_t v4 = v23;
    a2 = 1;
  }
  sub_24F8B59EC();
  unint64_t v11 = sub_24F782950();
  if ((v10 & 1) != (v12 & 1)) {
    goto LABEL_17;
  }
  unint64_t v7 = v11;
  if ((v10 & 1) == 0) {
    goto LABEL_9;
  }
LABEL_12:
  uint64_t v19 = (void *)swift_allocError();
  swift_willThrow();
  id v20 = v19;
  sub_24F781274(&qword_26B1F7040);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_release();
    sub_24F781F10(v24, v25, v26);
    swift_release();
    swift_bridgeObjectRelease();

    return;
  }
LABEL_18:
  sub_24F8CF7D0();
  sub_24F8CEEB0();
  sub_24F8CF920();
  sub_24F8CEEB0();
  sub_24F8CF9D0();
  __break(1u);
}

uint64_t sub_24F7C22CC(uint64_t a1)
{
  void (*v26)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v27;
  char v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void v39[2];
  char v40;
  void v41[3];
  uint64_t v42;
  uint64_t v43;
  unsigned char v44[40];
  int64_t v45;

  sub_24F781274(qword_26B1F5A70);
  uint64_t result = sub_24F8CF9F0();
  uint64_t v3 = (void *)result;
  int64_t v4 = 0;
  uint64_t v37 = a1;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v6 = a1 + 64;
  uint64_t v5 = v7;
  uint64_t v8 = 1 << *(unsigned char *)(v6 - 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & v5;
  uint64_t v34 = v6;
  uint64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v36 = result + 64;
  unint64_t v11 = &qword_26B1F7AC0;
  if ((v9 & v5) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v12 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  int v45 = v4;
  for (unint64_t i = v12 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v16 << 6))
  {
    uint64_t v18 = (uint64_t *)(*(void *)(v37 + 48) + 16 * i);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    sub_24F799984(*(void *)(v37 + 56) + 40 * i, (uint64_t)v44, v11);
    sub_24F799984((uint64_t)v44, (uint64_t)v41, v11);
    uint64_t v21 = v42;
    if (v42)
    {
      uint64_t v22 = v43;
      sub_24F7811D0(v41, v42);
      uint64_t v38 = v10;
      uint64_t v23 = v19;
      uint64_t v24 = v3;
      unint64_t v25 = v11;
      char v26 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v22 + 24);
      swift_bridgeObjectRetain();
      v26(v39, v21, v22);
      unint64_t v11 = v25;
      uint64_t v3 = v24;
      uint64_t v19 = v23;
      unint64_t v10 = v38;
      unint64_t v27 = v39[0];
      uint64_t v21 = v39[1];
      uint64_t v28 = v40;
      _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v41);
    }
    else
    {
      swift_bridgeObjectRetain();
      sub_24F77841C((uint64_t)v41, v11);
      unint64_t v27 = 0;
      uint64_t v28 = 4;
    }
    uint64_t result = sub_24F77841C((uint64_t)v44, v11);
    *(void *)(v36 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    uint64_t v29 = (void *)(v3[6] + 16 * i);
    *uint64_t v29 = v19;
    v29[1] = v20;
    uint64_t v30 = v3[7] + 24 * i;
    *(void *)uint64_t v30 = v27;
    *(void *)(v30 + 8) = v21;
    *(unsigned char *)(v30 + 16) = v28;
    BOOL v31 = v3[2];
    uint64_t v32 = __OFADD__(v31, 1);
    uint64_t v33 = v31 + 1;
    if (v32)
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    _OWORD v3[2] = v33;
    int64_t v4 = v45;
    if (v10) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v14 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_27;
    }
    if (v14 >= v35) {
      return (uint64_t)v3;
    }
    unint64_t v15 = *(void *)(v34 + 8 * v14);
    int64_t v16 = v4 + 1;
    if (!v15)
    {
      int64_t v16 = v4 + 2;
      if (v4 + 2 >= v35) {
        return (uint64_t)v3;
      }
      unint64_t v15 = *(void *)(v34 + 8 * v16);
      if (!v15)
      {
        int64_t v16 = v4 + 3;
        if (v4 + 3 >= v35) {
          return (uint64_t)v3;
        }
        unint64_t v15 = *(void *)(v34 + 8 * v16);
        if (!v15) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v10 = (v15 - 1) & v15;
    int v45 = v16;
  }
  uint64_t v17 = v4 + 4;
  if (v4 + 4 >= v35) {
    return (uint64_t)v3;
  }
  unint64_t v15 = *(void *)(v34 + 8 * v17);
  if (v15)
  {
    int64_t v16 = v4 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v16 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v16 >= v35) {
      return (uint64_t)v3;
    }
    unint64_t v15 = *(void *)(v34 + 8 * v16);
    ++v17;
    if (v15) {
      goto LABEL_18;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_24F7C259C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_24F7C25DC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    sub_24F781F10(a3, a4, a5);
  }
}

uint64_t sub_24F7C2638()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_24F7C2680@<X0>(uint64_t a1@<X8>)
{
  return sub_24F7BF774(*(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), a1);
}

unint64_t sub_24F7C2690()
{
  unint64_t result = qword_269A2ABC0;
  if (!qword_269A2ABC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269A2ABC0);
  }
  return result;
}

uint64_t sub_24F7C26E4()
{
  return 0;
}

uint64_t sub_24F7C26FC()
{
  return 16;
}

__n128 sub_24F7C2708(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t dispatch thunk of EncodableRecord.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of static EncodableRecord.databaseEncodingUserInfo.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static EncodableRecord.databaseJSONEncoder(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of static EncodableRecord.databaseDateEncodingStrategy.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of static EncodableRecord.databaseUUIDEncodingStrategy.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of static EncodableRecord.databaseColumnEncodingStrategy.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

void *sub_24F7C2790(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for StatementArguments(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for TableRegion(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

void type metadata accessor for PersistenceContainer()
{
}

id sub_24F7C2878(id result, uint64_t a2, char a3)
{
  if (a3 == 1) {
    return (id)swift_retain();
  }
  if (!a3) {
    return result;
  }
  return result;
}

void destroy for DatabaseDateEncodingStrategy(uint64_t a1)
{
}

uint64_t _s12GRDBInternal28DatabaseDateEncodingStrategyOwCP_0(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_24F7C2878(*(id *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for DatabaseDateEncodingStrategy(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_24F7C2878(*(id *)a2, v4, v5);
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_24F7B6734(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for DatabaseDateEncodingStrategy(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_24F7B6734(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for Database.BusyMode(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && *(unsigned char *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 2) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Database.BusyMode(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_24F7C2A18(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_24F7C2A30(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)__n128 result = a2 - 2;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

void type metadata accessor for DatabaseDateEncodingStrategy()
{
}

unsigned char *storeEnumTagSinglePayload for DatabaseUUIDEncodingStrategy(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24F7C2B20);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

void type metadata accessor for DatabaseUUIDEncodingStrategy()
{
}

void *destroy for DatabaseColumnEncodingStrategy(void *result)
{
  if (*result >= 0xFFFFFFFFuLL) {
    return (void *)swift_release();
  }
  return result;
}

uint64_t _s12GRDBInternal30DatabaseColumnEncodingStrategyOwCP_0(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_retain();
  }
  return a1;
}

unint64_t *assignWithCopy for DatabaseColumnEncodingStrategy(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      unint64_t v6 = a2[1];
      *a1 = v4;
      a1[1] = v6;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  unint64_t v5 = a2[1];
  *a1 = v4;
  a1[1] = v5;
  swift_retain();
  swift_release();
  return a1;
}

unint64_t *assignWithTake for DatabaseColumnEncodingStrategy(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      unint64_t v6 = a2[1];
      *a1 = v4;
      a1[1] = v6;
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  unint64_t v5 = a2[1];
  *a1 = v4;
  a1[1] = v5;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DatabaseColumnEncodingStrategy(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *((unsigned char *)a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for DatabaseColumnEncodingStrategy(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)__n128 result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)__n128 result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2 + 1;
    }
  }
  return result;
}

void type metadata accessor for DatabaseColumnEncodingStrategy()
{
}

uint64_t sub_24F7C2D90()
{
  uint64_t result = sub_24F77B874();
  if (v0)
  {
    uint64_t v3 = v1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      sub_24F8CEE50();
      uint64_t result = swift_bridgeObjectRelease();
      v3 += 16;
      --v0;
    }
    while (v0);
  }
  return result;
}

uint64_t sub_24F7C2DF8()
{
  uint64_t result = sub_24F77B874();
  if (v0)
  {
    uint64_t v3 = (unsigned __int8 *)(v1 + 48);
    do
    {
      int v5 = *v3;
      v3 += 24;
      char v4 = v5;
      switch(v5)
      {
        case 2:
          uint64_t v6 = sub_24F770E80();
          sub_24F781F34(v6, v7, 2);
          sub_24F8CEE50();
          break;
        case 3:
          uint64_t v8 = sub_24F770E80();
          sub_24F781F34(v8, v9, 3);
          sub_24F8CE8E0();
          break;
        case 4:
          sub_24F8CFF40();
          break;
        default:
          sub_24F8CFF70();
          break;
      }
      uint64_t v10 = sub_24F770E80();
      uint64_t result = sub_24F781F10(v10, v11, v4);
      --v0;
    }
    while (v0);
  }
  return result;
}

uint64_t sub_24F7C2EF0(uint64_t *a1, uint64_t *a2)
{
  return sub_24F801688(*a1, a1[1], *a2, a2[1]) & 1;
}

uint64_t sub_24F7C2F1C(uint64_t *a1)
{
  return sub_24F7C2EF0(a1, *(uint64_t **)(v1 + 16)) & 1;
}

uint64_t sub_24F7C2F3C(uint64_t (*a1)(uint64_t *), uint64_t a2, unint64_t a3)
{
  if (a3 >> 62) {
    goto LABEL_16;
  }
  uint64_t v6 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = sub_24F8CF9E0())
  {
    uint64_t v7 = 4;
    while (1)
    {
      if ((a3 & 0xC000000000000001) != 0)
      {
        uint64_t v8 = MEMORY[0x253364060](v7 - 4, a3);
      }
      else
      {
        uint64_t v8 = *(void *)(a3 + 8 * v7);
        swift_retain();
      }
      uint64_t v9 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      uint64_t v12 = v8;
      char v10 = a1(&v12);
      if (v3)
      {
        swift_bridgeObjectRelease();
        swift_release();
        return v8;
      }
      if (v10)
      {
        swift_bridgeObjectRelease();
        return v8;
      }
      swift_release();
      ++v7;
      if (v9 == v6) {
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
LABEL_11:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_24F7C3070()
{
  uint64_t v1 = v0;
  type metadata accessor for SchedulingWatchdog();
  uint64_t v2 = sub_24F7834B0();
  if (v2 && (uint64_t v3 = *(void *)(v2 + 24), swift_retain(), swift_release(), v3))
  {
    sub_24F7C72DC(v1, v3);
    return swift_release();
  }
  else
  {
    uint64_t result = sub_24F8CF9D0();
    __break(1u);
  }
  return result;
}

void DatabaseRegionObservation.extent.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *DatabaseRegionObservation.extent.setter(unsigned char *result)
{
  unsigned char *v1 = *result;
  return result;
}

uint64_t (*DatabaseRegionObservation.extent.modify())(void)
{
  return nullsub_1;
}

uint64_t DatabaseRegionObservation.init(tracking:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  *(unsigned char *)a2 = 0;
  *(void *)(a2 + 8) = sub_24F7C4E18;
  *(void *)(a2 + 16) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  *(unsigned char *)a2 = 0;
  *(void *)(a2 + 8) = sub_24F7C73A0;
  *(void *)(a2 + 16) = result;
  return result;
}

void *DatabaseRegionObservation.start(in:onChange:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *(*v11)(uint64_t *__return_ptr, void *(*)@<X0>(uint64_t *@<X8>), unsigned char *, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  void *result;
  unsigned char v14[24];
  long long v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  char v9 = *v4;
  uint64_t ObjectType = swift_getObjectType();
  v14[16] = v9;
  unint64_t v15 = *(_OWORD *)(v4 + 8);
  int64_t v16 = a3;
  uint64_t v17 = a4;
  unint64_t v11 = *(void *(**)(uint64_t *__return_ptr, void *(*)@<X0>(uint64_t *@<X8>), unsigned char *, uint64_t, uint64_t, uint64_t))(a2 + 64);
  uint64_t v12 = sub_24F781274(qword_269A2ABC8);
  uint64_t result = v11(&v18, sub_24F7C4E34, v14, v12, ObjectType, a2);
  if (!v5) {
    return (void *)v18;
  }
  return result;
}

void *sub_24F7C32E4@<X0>(void *(*a1)(uint64_t *__return_ptr)@<X2>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t *a4@<X8>)
{
  uint64_t result = a1(&v12);
  if (!v4)
  {
    if (v12)
    {
      uint64_t v9 = swift_bridgeObjectRetain();
      sub_24F83889C(v9);
      swift_bridgeObjectRelease();
    }
    sub_24F80D5A0(&v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v10 = v13;
    type metadata accessor for DatabaseRegionObserver();
    uint64_t v11 = swift_allocObject();
    *(unsigned char *)(v11 + 40) = 0;
    *(void *)(v11 + 16) = v10;
    *(void *)(v11 + 24) = a2;
    *(void *)(v11 + 32) = a3;
    swift_retain();
    swift_retain();
    sub_24F7A1C0C();
    uint64_t result = (void *)swift_release();
    *a4 = v11;
    a4[1] = (uint64_t)&off_270103020;
  }
  return result;
}

uint64_t DatabaseRegionObservation.publisher(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v5 = *v3;
  uint64_t v7 = *((void *)v3 + 1);
  uint64_t v6 = *((void *)v3 + 2);
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = a2;
  *(unsigned char *)(a3 + 16) = v5;
  *(void *)(a3 + 24) = v7;
  *(void *)(a3 + 32) = v6;
  swift_retain();
  return swift_unknownObjectRetain();
}

BOOL sub_24F7C345C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  swift_bridgeObjectRetain();
  BOOL v8 = DatabaseRegion.isModified(byEventsOfKind:)(a1, a2, a3, a4);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_24F7C34D8(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3)
  {
    uint64_t v5 = a1[3];
    uint64_t v6 = a1[4];
    sub_24F7811D0(a1, v5);
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 16);
    swift_bridgeObjectRetain();
    uint64_t v8 = v7(v5, v6);
    uint64_t v10 = v9;
    uint64_t v11 = sub_24F8CED00();
    uint64_t v13 = sub_24F80BA40(v11, v12, v8, v10, v3);
    uint64_t v15 = v14;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v13 != 1)
    {
      if (v15)
      {
        sub_24F80E278(a1[6], v15);
        char v17 = v16;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v17 & 1) == 0) {
          return result;
        }
        goto LABEL_10;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
LABEL_10:
  *(unsigned char *)(v2 + 40) = 1;
  return sub_24F7C3070();
}

uint64_t sub_24F7C3618()
{
  if (*(unsigned char *)(v0 + 40) == 1)
  {
    *(unsigned char *)(v0 + 40) = 0;
    return (*(uint64_t (**)(void))(v0 + 24))();
  }
  return result;
}

void sub_24F7C3650()
{
  *(unsigned char *)(v0 + 40) = 0;
}

uint64_t sub_24F7C3658()
{
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_24F7C3680()
{
  uint64_t v0 = sub_24F7C3658();
  return MEMORY[0x270FA0228](v0, 41, 7);
}

uint64_t DatabasePublishers.DatabaseRegion.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = a3;
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v18[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)v3;
  uint64_t v10 = *(void *)(v3 + 8);
  char v11 = *(unsigned char *)(v3 + 16);
  uint64_t v12 = *(void *)(v3 + 24);
  uint64_t v13 = *(void *)(v3 + 32);
  uint64_t v14 = _s26DatabaseRegionSubscriptionCMa();
  LOBYTE(v18[0]) = v11;
  v18[1] = v12;
  void v18[2] = v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
  swift_unknownObjectRetain();
  swift_retain();
  uint64_t v15 = sub_24F7C3828(v9, v10, (uint64_t)v18, (uint64_t)v8);
  uint64_t v18[3] = v14;
  v18[4] = swift_getWitnessTable();
  v18[0] = v15;
  sub_24F8CEAB0();
  return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v18);
}

char *sub_24F7C3828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_24F7C39E0(a1, a2, a3, a4);
}

__n128 sub_24F7C388C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v10 = *a4;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(a6, a1, a5);
  uint64_t v11 = _s26DatabaseRegionSubscriptionC16WaitingForDemandVMa();
  uint64_t v12 = (void *)(a6 + *(int *)(v11 + 36));
  *uint64_t v12 = a2;
  v12[1] = a3;
  uint64_t v13 = a6 + *(int *)(v11 + 40);
  *(unsigned char *)uint64_t v13 = v10;
  __n128 result = *(__n128 *)(a4 + 8);
  *(__n128 *)(v13 + 8) = result;
  return result;
}

uint64_t sub_24F7C3940@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(a6, a1, a5);
  uint64_t result = _s26DatabaseRegionSubscriptionC9ObservingVMa();
  uint64_t v11 = (void *)(a6 + *(int *)(result + 36));
  *uint64_t v11 = a2;
  v11[1] = a3;
  *(void *)(a6 + *(int *)(result + 40)) = a4;
  return result;
}

char *sub_24F7C39E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a2;
  uint64_t v18 = a4;
  uint64_t v7 = *(void *)v4;
  uint64_t v8 = *(void *)(*(void *)v4 + 80);
  uint64_t v9 = _s26DatabaseRegionSubscriptionC5StateOMa();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v16 - v11;
  uint64_t v13 = v7;
  LOBYTE(v7) = *(unsigned char *)a3;
  *((void *)v4 + 2) = 0;
  *((void *)v4 + 3) = 0;
  uint64_t v14 = *(void *)(v13 + 112);
  *(void *)&v4[v14] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08AE0]), sel_init);
  v19[0] = v7;
  long long v20 = *(_OWORD *)(a3 + 8);
  sub_24F7C388C(v18, a1, v17, v19, v8, (uint64_t)v12);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v4[*(void *)(*(void *)v4 + 104)], v12, v9);
  return v4;
}

void sub_24F7C3B7C(uint64_t a1)
{
}

uint64_t sub_24F7C3BA8()
{
  return 0x2874736575716572;
}

uint64_t sub_24F7C3BC8(_OWORD *a1, void (*a2)(long long *__return_ptr, void *(*)@<X0>(uint64_t *a1@<X8>), uint64_t *, uint64_t, uint64_t, uint64_t))
{
  void (*v70)(long long *__return_ptr, void *(*)@<X0>(uint64_t *@<X8>), uint64_t *, uint64_t, uint64_t, uint64_t);
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  long long v76;
  long long v77;
  void *v78;

  uint64_t v70 = a2;
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 80);
  uint64_t v5 = *(void *)(*(void *)a1 + 88);
  uint64_t v6 = _s26DatabaseRegionSubscriptionC9ObservingVMa();
  uint64_t ObjectType = *(void *)(v6 - 8);
  unint64_t v69 = (char *)v6;
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  int64_t v71 = (char *)&v64 - v8;
  uint64_t v67 = *(void (***)(char *, char *, uint64_t))(v4 - 8);
  MEMORY[0x270FA5388](v7);
  int v66 = (char *)&v64 - v9;
  uint64_t v10 = _s26DatabaseRegionSubscriptionC16WaitingForDemandVMa();
  size_t v73 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v64 - v11;
  uint64_t v13 = _s26DatabaseRegionSubscriptionC5StateOMa();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v72 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v75 = (uint64_t)&v64 - v18;
  MEMORY[0x270FA5388](v17);
  long long v20 = (char *)&v64 - v19;
  uint64_t v21 = (char *)a1 + *(void *)(v3 + 104);
  swift_beginAccess();
  *(void *)&uint64_t v76 = v14;
  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  uint64_t v74 = v21;
  v22(v20, v21, v13);
  uint64_t v23 = (char *)v13;
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result)
  {
    if (result != 1) {
      return result;
    }
    unint64_t v25 = v69;
    char v26 = *(void (**)(char *, char *, char *))(ObjectType + 32);
    unint64_t v27 = v71;
    v26(v71, v20, v69);
    size_t v73 = *((int *)v25 + 10);
    uint64_t v28 = *(void *)&v27[v73];
    sub_24F8CEB10();
    char v29 = sub_24F8CEAF0();
    uint64_t v31 = v75;
    uint64_t v30 = v76;
    if (v29) {
      goto LABEL_19;
    }
    sub_24F8CEB10();
    char v32 = sub_24F8CEAF0();
    uint64_t v33 = sub_24F8CEB10();
    if (v32)
    {
LABEL_18:
      unint64_t v27 = v71;
      *(void *)&v71[v73] = v33;
LABEL_19:
      v26((char *)v31, v27, v25);
      swift_storeEnumTagMultiPayload();
      uint64_t v62 = v72;
      (*(void (**)(char *, uint64_t, char *))(v30 + 32))(v72, v31, v23);
      uint64_t v63 = v74;
      swift_beginAccess();
      (*(void (**)(char *, char *, char *))(v30 + 40))(v63, v62, v23);
      return swift_endAccess();
    }
    int64_t v34 = (int64_t)v70;
    uint64_t result = sub_24F8CEAF0();
    if (result)
    {
LABEL_9:
      uint64_t v33 = sub_24F8CEB10();
      goto LABEL_18;
    }
    if (((v28 | v34) & 0x8000000000000000) == 0)
    {
      uint64_t v33 = v28 + v34;
      if (!__OFADD__(v28, v34))
      {
        if ((v33 & 0x8000000000000000) == 0) {
          goto LABEL_18;
        }
LABEL_23:
        __break(1u);
        return result;
      }
      goto LABEL_9;
    }
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v35 = v4;
  uint64_t v36 = v73;
  (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v12, v20, v10);
  sub_24F8CEB10();
  uint64_t v37 = (uint64_t)v70;
  uint64_t result = sub_24F8CEAF0();
  uint64_t v65 = v5;
  uint64_t v38 = v36;
  uint64_t v39 = (uint64_t)v66;
  if ((result & 1) == 0)
  {
    if (v37 < 0)
    {
      __break(1u);
      goto LABEL_22;
    }
    if (!v37) {
      return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v12, v10);
    }
  }
  uint64_t v40 = v35;
  v67[2](v66, v12, v35);
  uint64_t v41 = (uint64_t *)&v12[*(int *)(v10 + 36)];
  unint64_t v69 = v12;
  uint64_t v43 = *v41;
  uint64_t v42 = v41[1];
  int64_t v71 = (char *)v10;
  uint64_t v44 = v75;
  uint64_t v45 = v37;
  uint64_t v46 = v65;
  sub_24F7C3940(v39, v43, v42, v45, v40, v75);
  swift_storeEnumTagMultiPayload();
  uint64_t v47 = v76;
  uint64_t v48 = v72;
  (*(void (**)(char *, uint64_t, char *))(v76 + 32))(v72, v44, v23);
  uint64_t v49 = v74;
  swift_beginAccess();
  int64_t v50 = *(void (***)(char *, char *, uint64_t))(v47 + 40);
  swift_unknownObjectRetain();
  int v66 = v23;
  uint64_t v67 = v50;
  *(void *)&uint64_t v76 = v47 + 40;
  ((void (*)(char *, char *, char *))v50)(v49, v48, v23);
  swift_endAccess();
  int v51 = &v69[*((int *)v71 + 10)];
  LOBYTE(v47) = *v51;
  uint64_t v52 = *((void *)v51 + 2);
  uint64_t v70 = (void (*)(long long *__return_ptr, void *(*)@<X0>(uint64_t *@<X8>), uint64_t *, uint64_t, uint64_t, uint64_t))*((void *)v51 + 1);
  uint64_t v53 = v41[1];
  uint64_t v54 = swift_allocObject();
  swift_weakInit();
  int64_t v55 = (void *)swift_allocObject();
  uint64_t v64 = v40;
  v55[2] = v40;
  v55[3] = v46;
  v55[4] = v54;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v72 = (char *)&v64;
  MEMORY[0x270FA5388](ObjectType);
  *((unsigned char *)&v64 - 48) = v47;
  *(&v64 - 5) = (uint64_t)v70;
  *(&v64 - 4) = v52;
  *(&v64 - 3) = (uint64_t)sub_24F7C72AC;
  *(&v64 - 2) = (uint64_t)v55;
  uint64_t v70 = *(void (**)(long long *__return_ptr, void *(*)@<X0>(uint64_t *@<X8>), uint64_t *, uint64_t, uint64_t, uint64_t))(v53 + 64);
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  uint64_t v56 = sub_24F781274(qword_269A2ABC8);
  uint64_t v57 = v78;
  v70(&v77, sub_24F7C4E34, &v64 - 8, v56, ObjectType, v53);
  if (v57)
  {
    swift_unknownObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v58 = v75;
    uint64_t v59 = v66;
    swift_storeEnumTagMultiPayload();
    int64_t v60 = v74;
    swift_beginAccess();
    ((void (*)(char *, uint64_t, char *))v67)(v60, v58, v59);
    swift_endAccess();
    *(void *)&uint64_t v77 = v57;
    uint64_t v61 = v69;
    sub_24F8CEAA0();

    return (*(uint64_t (**)(char *, char *))(v73 + 8))(v61, v71);
  }
  else
  {
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
    uint64_t v76 = v77;
    (*(void (**)(char *, char *))(v73 + 8))(v69, v71);
    swift_release();
    a1[1] = v76;
    return swift_unknownObjectRelease();
  }
}

uint64_t sub_24F7C43C8(uint64_t a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_24F7C462C(a1);
    return swift_release();
  }
  return result;
}

void sub_24F7C4428()
{
  id v1 = *(id *)(v0 + *(void *)(*(void *)v0 + 112));
  sub_24F832B4C((uint64_t)sub_24F7C44C8, 0, (void (*)(id))sub_24F7C7204);
}

uint64_t sub_24F7C44C8()
{
  return 0x29286C65636E6163;
}

uint64_t sub_24F7C44E0(void *a1)
{
  uint64_t v2 = _s26DatabaseRegionSubscriptionC5StateOMa();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v8 - v4;
  a1[2] = 0;
  a1[3] = 0;
  swift_unknownObjectRelease();
  swift_storeEnumTagMultiPayload();
  uint64_t v6 = (char *)a1 + *(void *)(*a1 + 104);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v3 + 40))(v6, v5, v2);
  return swift_endAccess();
}

void sub_24F7C462C(uint64_t a1)
{
}

void sub_24F7C4658(uint64_t a1, uint64_t a2, void (*a3)(id))
{
  id v6 = *(id *)(v3 + *(void *)(*(void *)v3 + 112));
  sub_24F832B4C(a2, 0, a3);
}

uint64_t sub_24F7C46CC()
{
  return 0x2865766965636572;
}

uint64_t sub_24F7C46EC(uint64_t *a1, uint64_t a2)
{
  uint64_t v52 = a2;
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 80);
  uint64_t v5 = *(void *)(*a1 + 88);
  uint64_t v6 = _s26DatabaseRegionSubscriptionC5StateOMa();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v48 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v47 = (char *)&v42 - v11;
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  int64_t v50 = (char *)&v42 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v42 - v14;
  uint64_t v53 = v4;
  uint64_t v51 = v5;
  uint64_t v16 = _s26DatabaseRegionSubscriptionC9ObservingVMa();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v49 = (char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v42 - v20;
  uint64_t v22 = (uint64_t)a1 + *(void *)(v3 + 104);
  swift_beginAccess();
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v23(v15, v22, v6);
  if (swift_getEnumCaseMultiPayload() != 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v15, v6);
  }
  uint64_t v45 = v7;
  uint64_t v46 = v22;
  uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
  v44(v21, v15, v16);
  unint64_t v24 = *(void *)&v21[*(int *)(v16 + 40)];
  unint64_t v25 = sub_24F8CEB00();
  sub_24F8CEB10();
  if (sub_24F8CEAF0())
  {
    sub_24F8CEB10();
    if (sub_24F8CEAF0()) {
      return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v21, v16);
    }
  }
  sub_24F8CEB10();
  if ((sub_24F8CEAF0() & 1) == 0)
  {
    sub_24F8CEB10();
    if ((sub_24F8CEAF0() & 1) != 0 || v25 >= v24) {
      return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v21, v16);
    }
  }
  uint64_t v42 = v17 + 32;
  uint64_t v43 = v17;
  uint64_t v26 = v16;
  uint64_t v54 = v52;
  uint64_t v27 = sub_24F8CEAC0();
  uint64_t v28 = v50;
  uint64_t v29 = v46;
  uint64_t v30 = v6;
  v23(v50, v46, v6);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(char *, uint64_t))(v43 + 8))(v21, v26);
    return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v28, v6);
  }
  uint64_t v31 = v21;
  char v32 = v49;
  v44(v49, v28, v26);
  uint64_t v33 = *(int *)(v26 + 40);
  uint64_t v34 = *(void *)&v32[v33];
  sub_24F8CEB10();
  if ((sub_24F8CEAF0() & 1) == 0)
  {
    sub_24F8CEB10();
    char v35 = sub_24F8CEAF0();
    uint64_t v36 = sub_24F8CEB10();
    if (v35)
    {
      uint64_t v29 = v46;
    }
    else
    {
      uint64_t result = sub_24F8CEAF0();
      uint64_t v29 = v46;
      if (result) {
        goto LABEL_18;
      }
      if ((v34 | v27) < 0)
      {
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      uint64_t v36 = v34 + v27;
      if (__OFADD__(v34, v27))
      {
LABEL_18:
        uint64_t v36 = sub_24F8CEB10();
      }
      else if (v36 < 0)
      {
LABEL_33:
        __break(1u);
        return result;
      }
    }
    *(void *)&v32[v33] = v36;
    uint64_t v34 = v36;
  }
  uint64_t v38 = v45;
  sub_24F8CEB10();
  if ((sub_24F8CEAF0() & 1) == 0)
  {
    sub_24F8CEB10();
    uint64_t result = sub_24F8CEAF0();
    if (result)
    {
      uint64_t v39 = sub_24F8CEB10();
LABEL_27:
      *(void *)&v32[v33] = v39;
      goto LABEL_28;
    }
    if (v34 < 0)
    {
      __break(1u);
    }
    else if (v34)
    {
      uint64_t v39 = v34 - 1;
      goto LABEL_27;
    }
    __break(1u);
    goto LABEL_32;
  }
LABEL_28:
  (*(void (**)(char *, uint64_t))(v43 + 8))(v31, v26);
  uint64_t v40 = v47;
  v44(v47, v32, v26);
  swift_storeEnumTagMultiPayload();
  uint64_t v41 = v48;
  (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v48, v40, v30);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v38 + 40))(v29, v41, v30);
  return swift_endAccess();
}

uint64_t sub_24F7C4C58()
{
  swift_unknownObjectRelease();
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 104);
  uint64_t v2 = _s26DatabaseRegionSubscriptionC5StateOMa();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return v0;
}

uint64_t sub_24F7C4D20()
{
  uint64_t v0 = sub_24F7C4C58();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x270FA0228](v0, v1, v2);
}

void sub_24F7C4D74(uint64_t a1)
{
}

void sub_24F7C4D98()
{
}

uint64_t sub_24F7C4DBC()
{
  return sub_24F8CEA90();
}

uint64_t sub_24F7C4DE0()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_24F7C4E18@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_24F80E684(a1, *(void *)(v2 + 16), a2);
}

void *sub_24F7C4E34@<X0>(uint64_t *a1@<X8>)
{
  return sub_24F7C72B8(a1);
}

uint64_t _s26DatabaseRegionSubscriptionCMa()
{
  return sub_24F777DE0();
}

uint64_t destroy for DatabaseRegionObservation()
{
  return swift_release();
}

uint64_t _s12GRDBInternal25DatabaseRegionObservationVwCP_0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for DatabaseRegionObservation(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for DatabaseRegionObservation(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Row.Prefetch(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Row.Prefetch(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DatabaseRegionObservation()
{
  return &type metadata for DatabaseRegionObservation;
}

uint64_t type metadata accessor for DatabaseRegionObserver()
{
  return self;
}

uint64_t _s14DatabaseRegionVwxx()
{
  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t _s14DatabaseRegionVwcp(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v3;
  swift_unknownObjectRetain();
  swift_retain();
  return a1;
}

uint64_t _s14DatabaseRegionVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for DatabaseSchemaCache(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t _s14DatabaseRegionVwta(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  return a1;
}

uint64_t _s14DatabaseRegionVwet(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s14DatabaseRegionVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DatabasePublishers.DatabaseRegion()
{
  return &type metadata for DatabasePublishers.DatabaseRegion;
}

uint64_t sub_24F7C51CC()
{
  uint64_t result = _s26DatabaseRegionSubscriptionC5StateOMa();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t _s26DatabaseRegionSubscriptionC5StateOMa()
{
  return sub_24F777DE0();
}

uint64_t sub_24F7C5290()
{
  uint64_t result = _s26DatabaseRegionSubscriptionC16WaitingForDemandVMa();
  if (v1 <= 0x3F)
  {
    uint64_t result = _s26DatabaseRegionSubscriptionC9ObservingVMa();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

void *sub_24F7C5370(void *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v4 = __dst;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  unint64_t v7 = (((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = v7 + 24;
  unint64_t v9 = v7 + 8;
  if (v9 <= v8) {
    unint64_t v10 = v8;
  }
  else {
    unint64_t v10 = v9;
  }
  int v11 = *(_DWORD *)(v5 + 80);
  if ((v11 & 0x1000F8) != 0 || (v10 | 1) > 0x18)
  {
    uint64_t v13 = *(void *)__src;
    *uint64_t v4 = *(void *)__src;
    uint64_t v4 = (void *)(v13 + ((unsigned __int16)((v11 & 0xF8) + 23) & (unsigned __int16)~(v11 & 0xF8) & 0x1F8));
  }
  else
  {
    unsigned int v14 = __src[v10];
    if ((v10 & 0xFFFFFFF8) != 0 && v14 >= 2) {
      unsigned int v14 = *(_DWORD *)__src + 2;
    }
    if (v14 == 1)
    {
      (*(void (**)(void *, unsigned __int8 *))(v5 + 16))(__dst, __src);
      uint64_t v21 = (_OWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v22 = (_OWORD *)((unint64_t)&__src[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
      _OWORD *v21 = *v22;
      *(void *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF8);
      *((unsigned char *)v4 + v10) = 1;
      swift_unknownObjectRetain();
      return v4;
    }
    if (v14)
    {
      memcpy(__dst, __src, v10 | 1);
      return v4;
    }
    (*(void (**)(void *, unsigned __int8 *))(v5 + 16))(__dst, __src);
    uint64_t v16 = (_OWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v17 = (_OWORD *)((unint64_t)&__src[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v16 = *v17;
    unint64_t v18 = ((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v19 = ((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF8;
    *(unsigned char *)unint64_t v18 = *(unsigned char *)v19;
    uint64_t v20 = *(void *)(v19 + 16);
    *(void *)(v18 + 8) = *(void *)(v19 + 8);
    *(void *)(v18 + 16) = v20;
    *((unsigned char *)v4 + v10) = 0;
    swift_unknownObjectRetain();
  }
  swift_retain();
  return v4;
}

_DWORD *sub_24F7C5540(_DWORD *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8);
  unint64_t v3 = (((*(void *)(v2 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = v3 + 24;
  unint64_t v5 = v3 + 8;
  if (v5 <= v4) {
    unint64_t v5 = v4;
  }
  uint64_t v6 = v5 & 0xFFFFFFF8;
  unsigned int v7 = *((unsigned __int8 *)result + v5);
  if (v7 >= 2 && v6 != 0) {
    unsigned int v7 = *result + 2;
  }
  if (v7 == 1)
  {
    (*(void (**)(_DWORD *))(v2 + 8))(result);
    return (_DWORD *)swift_unknownObjectRelease();
  }
  else if (!v7)
  {
    (*(void (**)(_DWORD *))(v2 + 8))(result);
    swift_unknownObjectRelease();
    return (_DWORD *)swift_release();
  }
  return result;
}

unsigned char *sub_24F7C567C(unsigned char *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  unint64_t v7 = (((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = v7 + 24;
  unint64_t v9 = v7 + 8;
  if (v9 <= v8) {
    unint64_t v10 = v8;
  }
  else {
    unint64_t v10 = v9;
  }
  unsigned int v11 = __src[v10];
  if (v11 >= 2 && (v10 & 0xFFFFFFF8) != 0) {
    unsigned int v11 = *(_DWORD *)__src + 2;
  }
  if (v11 == 1)
  {
    (*(void (**)(unsigned char *, unsigned __int8 *))(v5 + 16))(__dst, __src);
    unint64_t v18 = (_OWORD *)((unint64_t)&__dst[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
    unint64_t v19 = (_OWORD *)((unint64_t)&__src[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
    *unint64_t v18 = *v19;
    *(void *)(((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFFFF8);
    __dst[v10] = 1;
    swift_unknownObjectRetain();
  }
  else if (v11)
  {
    memcpy(__dst, __src, v10 | 1);
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned __int8 *))(v5 + 16))(__dst, __src);
    uint64_t v13 = (_OWORD *)((unint64_t)&__dst[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
    unsigned int v14 = (_OWORD *)((unint64_t)&__src[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v13 = *v14;
    unint64_t v15 = ((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v16 = ((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8;
    *(unsigned char *)unint64_t v15 = *(unsigned char *)v16;
    uint64_t v17 = *(void *)(v16 + 16);
    *(void *)(v15 + 8) = *(void *)(v16 + 8);
    *(void *)(v15 + 16) = v17;
    __dst[v10] = 0;
    swift_unknownObjectRetain();
    swift_retain();
  }
  return __dst;
}

unsigned __int8 *sub_24F7C5810(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  if (__dst != __src)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v7 = *(void *)(v6 + 64);
    unint64_t v8 = (((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v9 = v8 + 24;
    unint64_t v10 = v8 + 8;
    if (v10 <= v9) {
      unint64_t v11 = v9;
    }
    else {
      unint64_t v11 = v10;
    }
    unsigned int v12 = __dst[v11];
    if (v12 >= 2 && (v11 & 0xFFFFFFF8) != 0) {
      unsigned int v12 = *(_DWORD *)__dst + 2;
    }
    if (v12 == 1)
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(__dst, v5);
      swift_unknownObjectRelease();
    }
    else if (!v12)
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(__dst, v5);
      swift_unknownObjectRelease();
      swift_release();
    }
    unsigned int v14 = __src[v11];
    if ((v11 & 0xFFFFFFF8) != 0 && v14 >= 2) {
      unsigned int v14 = *(_DWORD *)__src + 2;
    }
    if (v14 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
      uint64_t v21 = (_OWORD *)((unint64_t)&__dst[v7 + 7] & 0xFFFFFFFFFFFFFFF8);
      uint64_t v22 = (_OWORD *)((unint64_t)&__src[v7 + 7] & 0xFFFFFFFFFFFFFFF8);
      _OWORD *v21 = *v22;
      *(void *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF8);
      __dst[v11] = 1;
      swift_unknownObjectRetain();
    }
    else if (v14)
    {
      memcpy(__dst, __src, v11 | 1);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
      unint64_t v16 = (_OWORD *)((unint64_t)&__dst[v7 + 7] & 0xFFFFFFFFFFFFFFF8);
      uint64_t v17 = (_OWORD *)((unint64_t)&__src[v7 + 7] & 0xFFFFFFFFFFFFFFF8);
      *unint64_t v16 = *v17;
      unint64_t v18 = ((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v19 = ((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF8;
      *(unsigned char *)unint64_t v18 = *(unsigned char *)v19;
      uint64_t v20 = *(void *)(v19 + 16);
      *(void *)(v18 + 8) = *(void *)(v19 + 8);
      *(void *)(v18 + 16) = v20;
      __dst[v11] = 0;
      swift_unknownObjectRetain();
      swift_retain();
    }
  }
  return __dst;
}

unsigned char *sub_24F7C5A58(unsigned char *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  unint64_t v7 = (((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = v7 + 24;
  unint64_t v9 = v7 + 8;
  if (v9 <= v8) {
    unint64_t v10 = v8;
  }
  else {
    unint64_t v10 = v9;
  }
  unsigned int v11 = __src[v10];
  if (v11 >= 2 && (v10 & 0xFFFFFFF8) != 0) {
    unsigned int v11 = *(_DWORD *)__src + 2;
  }
  if (v11 == 1)
  {
    (*(void (**)(unsigned char *, unsigned __int8 *))(v5 + 32))(__dst, __src);
    unint64_t v18 = (_OWORD *)((unint64_t)&__dst[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
    unint64_t v19 = (_OWORD *)((unint64_t)&__src[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
    *unint64_t v18 = *v19;
    *(void *)(((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFFFF8);
    __dst[v10] = 1;
  }
  else if (v11)
  {
    memcpy(__dst, __src, v10 | 1);
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned __int8 *))(v5 + 32))(__dst, __src);
    uint64_t v13 = (_OWORD *)((unint64_t)&__dst[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
    unsigned int v14 = (_OWORD *)((unint64_t)&__src[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v13 = *v14;
    unint64_t v15 = ((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8;
    long long v16 = *(_OWORD *)v15;
    unint64_t v17 = ((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v17 + 16) = *(void *)(v15 + 16);
    *(_OWORD *)unint64_t v17 = v16;
    __dst[v10] = 0;
  }
  return __dst;
}

unsigned __int8 *sub_24F7C5BD4(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  if (__dst != __src)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v7 = *(void *)(v6 + 64);
    unint64_t v8 = (((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v9 = v8 + 24;
    unint64_t v10 = v8 + 8;
    if (v10 <= v9) {
      unint64_t v11 = v9;
    }
    else {
      unint64_t v11 = v10;
    }
    unsigned int v12 = __dst[v11];
    if (v12 >= 2 && (v11 & 0xFFFFFFF8) != 0) {
      unsigned int v12 = *(_DWORD *)__dst + 2;
    }
    if (v12 == 1)
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(__dst, v5);
      swift_unknownObjectRelease();
    }
    else if (!v12)
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(__dst, v5);
      swift_unknownObjectRelease();
      swift_release();
    }
    unsigned int v14 = __src[v11];
    if ((v11 & 0xFFFFFFF8) != 0 && v14 >= 2) {
      unsigned int v14 = *(_DWORD *)__src + 2;
    }
    if (v14 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
      uint64_t v21 = (_OWORD *)((unint64_t)&__dst[v7 + 7] & 0xFFFFFFFFFFFFFFF8);
      uint64_t v22 = (_OWORD *)((unint64_t)&__src[v7 + 7] & 0xFFFFFFFFFFFFFFF8);
      _OWORD *v21 = *v22;
      *(void *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF8);
      __dst[v11] = 1;
    }
    else if (v14)
    {
      memcpy(__dst, __src, v11 | 1);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
      long long v16 = (_OWORD *)((unint64_t)&__dst[v7 + 7] & 0xFFFFFFFFFFFFFFF8);
      unint64_t v17 = (_OWORD *)((unint64_t)&__src[v7 + 7] & 0xFFFFFFFFFFFFFFF8);
      *long long v16 = *v17;
      unint64_t v18 = ((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF8;
      long long v19 = *(_OWORD *)v18;
      unint64_t v20 = ((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8;
      *(void *)(v20 + 16) = *(void *)(v18 + 16);
      *(_OWORD *)unint64_t v20 = v19;
      __dst[v11] = 0;
    }
  }
  return __dst;
}

uint64_t sub_24F7C5E04(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3 = (((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = v3 + 24;
  unint64_t v5 = v3 + 8;
  if (v5 <= v4) {
    unint64_t v5 = v4;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_20;
  }
  uint64_t v6 = v5 | 1;
  char v7 = 8 * (v5 | 1);
  if ((v5 | 1) <= 3)
  {
    unsigned int v8 = (a2 + ~(-1 << v7) - 253) >> v7;
    if (v8 > 0xFFFE)
    {
      int v9 = *(_DWORD *)&a1[v6];
      if (!v9) {
        goto LABEL_20;
      }
      goto LABEL_13;
    }
    if (v8 > 0xFE)
    {
      int v9 = *(unsigned __int16 *)&a1[v6];
      if (!*(_WORD *)&a1[v6]) {
        goto LABEL_20;
      }
      goto LABEL_13;
    }
    if (!v8) {
      goto LABEL_20;
    }
  }
  int v9 = a1[v6];
  if (!a1[v6])
  {
LABEL_20:
    unsigned int v13 = a1[v5];
    if (v13 >= 3) {
      return (v13 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
LABEL_13:
  int v11 = (v9 - 1) << v7;
  if (v6 >= 4) {
    int v11 = 0;
  }
  if (v6 == 1) {
    int v12 = *a1;
  }
  else {
    int v12 = *(_DWORD *)a1;
  }
  return (v12 | v11) + 254;
}

void sub_24F7C5EF0(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = (((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = v5 + 24;
  unint64_t v7 = v5 + 8;
  if (v7 <= v6) {
    unint64_t v7 = v6;
  }
  size_t v8 = v7 | 1;
  char v9 = 8 * (v7 | 1);
  if (a3 < 0xFE)
  {
    int v10 = 0;
  }
  else if (v8 <= 3)
  {
    unsigned int v13 = (a3 + ~(-1 << v9) - 253) >> v9;
    if (v13 > 0xFFFE)
    {
      int v10 = 4;
    }
    else if (v13 >= 0xFF)
    {
      int v10 = 2;
    }
    else
    {
      int v10 = v13 != 0;
    }
  }
  else
  {
    int v10 = 1;
  }
  if (a2 <= 0xFD)
  {
    switch(v10)
    {
      case 1:
        a1[v8] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_24;
      case 2:
        *(_WORD *)&a1[v8] = 0;
        goto LABEL_23;
      case 3:
        goto LABEL_31;
      case 4:
        *(_DWORD *)&a1[v8] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_24;
      default:
LABEL_23:
        if (a2) {
LABEL_24:
        }
          a1[v7] = -(char)a2;
        break;
    }
    return;
  }
  unsigned int v11 = a2 - 254;
  if (v8 < 4)
  {
    int v12 = (v11 >> v9) + 1;
    v11 &= ~(-1 << v9);
    bzero(a1, v8);
    if (v8 == 1)
    {
      *a1 = v11;
      goto LABEL_20;
    }
  }
  else
  {
    bzero(a1, v7 | 1);
    int v12 = 1;
  }
  *(_DWORD *)a1 = v11;
LABEL_20:
  switch(v10)
  {
    case 1:
      a1[v8] = v12;
      break;
    case 2:
      *(_WORD *)&a1[v8] = v12;
      break;
    case 3:
LABEL_31:
      __break(1u);
      JUMPOUT(0x24F7C60A8);
    case 4:
      *(_DWORD *)&a1[v8] = v12;
      break;
    default:
      return;
  }
}

uint64_t sub_24F7C60D0(_DWORD *a1, uint64_t a2)
{
  unint64_t v2 = (((*(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v3 = v2 + 24;
  unint64_t v4 = v2 + 8;
  if (v4 <= v3) {
    unint64_t v4 = v3;
  }
  uint64_t v5 = v4 & 0xFFFFFFF8;
  uint64_t v6 = *((unsigned __int8 *)a1 + v4);
  if (v6 >= 2 && v5 != 0) {
    return (*a1 + 2);
  }
  return v6;
}

void sub_24F7C612C(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4 = (((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  size_t v5 = v4 + 24;
  size_t v6 = v4 + 8;
  if (v6 <= v5) {
    size_t v6 = v5;
  }
  if (a2 > 1)
  {
    if (v6) {
      char v7 = 2;
    }
    else {
      char v7 = a2;
    }
    if (v6) {
      unsigned int v8 = a2 - 2;
    }
    else {
      unsigned int v8 = 0;
    }
    a1[v6] = v7;
    bzero(a1, v6);
    *(_DWORD *)a1 = v8;
  }
  else
  {
    a1[v6] = a2;
  }
}

uint64_t _s26DatabaseRegionSubscriptionC16WaitingForDemandVMa()
{
  return sub_24F777DE0();
}

uint64_t _s26DatabaseRegionSubscriptionC9ObservingVMa()
{
  return sub_24F777DE0();
}

uint64_t sub_24F7C61EC()
{
  return sub_24F7C6960();
}

uint64_t *sub_24F7C61FC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    int v10 = (_OWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    unsigned int v11 = (_OWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *int v10 = *v11;
    *(void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
    swift_unknownObjectRetain();
  }
  return v4;
}

uint64_t sub_24F7C6314(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  return swift_unknownObjectRelease();
}

uint64_t sub_24F7C6384(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  *(void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  swift_unknownObjectRetain();
  return a1;
}

uint64_t sub_24F7C6418(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *int v7 = *v8;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v7[1] = v9;
  *(void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_24F7C64C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  int v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  *(void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_24F7C6554(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *int v7 = *v8;
  swift_unknownObjectRelease();
  v7[1] = v9;
  *(void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_24F7C65F4(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(unsigned int *)(*(void *)(v4 - 8) + 84);
  uint64_t v6 = *(void *)(*(void *)(v4 - 8) + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(*(void *)(v4 - 8) + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x24F7C6738);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return sub_24F777048((uint64_t)a1, v5, v4);
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void sub_24F7C674C(char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 + 16);
  uint64_t v7 = *(unsigned int *)(*(void *)(v6 - 8) + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(*(void *)(v6 - 8) + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(v6 - 8) + 64);
  unint64_t v10 = ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v8 >= a3)
  {
    int v14 = 0;
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
  }
  if (a2 > v8)
  {
    if (((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_32;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_32;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x24F7C692CLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_31;
    default:
LABEL_31:
      if (a2)
      {
LABEL_32:
        if (v7 < 0x7FFFFFFF)
        {
          unint64_t v17 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v18 = a2 ^ 0x80000000;
            v17[1] = 0;
          }
          else
          {
            uint64_t v18 = (a2 - 1);
          }
          *unint64_t v17 = v18;
        }
        else
        {
          sub_24F7771BC((uint64_t)a1, a2, v7, v6);
        }
      }
      return;
  }
}

uint64_t sub_24F7C6954()
{
  return sub_24F7C6960();
}

uint64_t sub_24F7C6960()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_24F7C6A00(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) != 0
    && ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) < 0xFFFFFFFFFFFFFFE8)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = (_OWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    unsigned int v11 = (_OWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *unsigned int v11 = *v10;
    unint64_t v12 = ((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v13 = ((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8;
    *(unsigned char *)unint64_t v12 = *(unsigned char *)v13;
    uint64_t v14 = *(void *)(v13 + 16);
    *(void *)(v12 + 8) = *(void *)(v13 + 8);
    *(void *)(v12 + 16) = v14;
    swift_unknownObjectRetain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_24F7C6B24(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t sub_24F7C6BA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = v6 + a1;
  unsigned int v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v7 &= 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)unint64_t v7 = *v8;
  unint64_t v9 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v9 = *(unsigned char *)v10;
  uint64_t v11 = *(void *)(v10 + 16);
  *(void *)(v9 + 8) = *(void *)(v10 + 8);
  *(void *)(v9 + 16) = v11;
  swift_unknownObjectRetain();
  swift_retain();
  return a1;
}

uint64_t sub_24F7C6C44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *unint64_t v7 = *v8;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v7[1] = v9;
  unint64_t v10 = ((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v10 = *(unsigned char *)v11;
  uint64_t v12 = *(void *)(v11 + 16);
  *(void *)(v10 + 8) = *(void *)(v11 + 8);
  *(void *)(v10 + 16) = v12;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_24F7C6D0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v7 = *v8;
  unint64_t v9 = ((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = *(void *)(v10 + 16);
  *(_OWORD *)unint64_t v9 = *(_OWORD *)v10;
  *(void *)(v9 + 16) = v11;
  return a1;
}

uint64_t sub_24F7C6DA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *unint64_t v7 = *v8;
  swift_unknownObjectRelease();
  v7[1] = v9;
  unint64_t v10 = ((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v10 = *(unsigned char *)v11;
  *(_OWORD *)(v10 + 8) = *(_OWORD *)(v11 + 8);
  swift_release();
  return a1;
}

uint64_t sub_24F7C6E50(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(unsigned int *)(*(void *)(v4 - 8) + 84);
  uint64_t v6 = *(void *)(*(void *)(v4 - 8) + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(*(void *)(v4 - 8) + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 24;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x24F7C6F94);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return sub_24F777048((uint64_t)a1, v5, v4);
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void sub_24F7C6FA8(char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 + 16);
  uint64_t v7 = *(unsigned int *)(*(void *)(v6 - 8) + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(*(void *)(v6 - 8) + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(v6 - 8) + 64);
  unint64_t v10 = ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v8 >= a3)
  {
    int v14 = 0;
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFE8) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
  }
  if (a2 > v8)
  {
    if (((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFE8) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFE8)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 24);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_32;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_32;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x24F7C7188);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_31;
    default:
LABEL_31:
      if (a2)
      {
LABEL_32:
        if (v7 < 0x7FFFFFFF)
        {
          unint64_t v17 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v18 = a2 ^ 0x80000000;
            v17[1] = 0;
          }
          else
          {
            uint64_t v18 = (a2 - 1);
          }
          *unint64_t v17 = v18;
        }
        else
        {
          sub_24F7771BC((uint64_t)a1, a2, v7, v6);
        }
      }
      return;
  }
}

uint64_t sub_24F7C71B0()
{
  return swift_getWitnessTable();
}

uint64_t sub_24F7C71CC()
{
  return swift_getWitnessTable();
}

uint64_t sub_24F7C71E8()
{
  return sub_24F7C46EC(*(uint64_t **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_24F7C7204()
{
  return sub_24F7C44E0(v0);
}

uint64_t sub_24F7C7220()
{
  return sub_24F7C3BC8(*(_OWORD **)(v0 + 16), *(void (**)(long long *__return_ptr, void *(*)@<X0>(uint64_t *@<X8>), uint64_t *, uint64_t, uint64_t, uint64_t))(v0 + 24));
}

uint64_t sub_24F7C723C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_24F7C7274()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24F7C72AC(uint64_t a1)
{
  return sub_24F7C43C8(a1);
}

void *sub_24F7C72B8@<X0>(uint64_t *a1@<X8>)
{
  return sub_24F7C32E4(*(void *(**)(uint64_t *__return_ptr))(v1 + 24), *(void *)(v1 + 40), *(void *)(v1 + 48), a1);
}

uint64_t sub_24F7C72DC(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  unint64_t v4 = *(void *)(a2 + 40);
  void v7[2] = a1;
  v7[3] = &off_270103020;
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_24F7C2F3C((uint64_t (*)(uint64_t *))sub_24F7A30CC, (uint64_t)v7, v4);
  uint64_t result = swift_bridgeObjectRelease();
  if (v5)
  {
    *(unsigned char *)(v5 + 17) = 1;
    swift_retain();
    sub_24F83C4E0((uint64_t *)(a2 + 48), v5);
    sub_24F79F844();
    return swift_release();
  }
  return result;
}

uint64_t sub_24F7C73A0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_24F7C4E18(a1, a2);
}

uint64_t ValueObservation.map<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v10 = (void *)swift_allocObject();
  uint64_t v11 = *(void *)(a3 + 24);
  void v10[2] = *(void *)(a3 + 16);
  v10[3] = a4;
  void v10[4] = v11;
  uint64_t v10[5] = a1;
  v10[6] = a2;
  uint64_t v12 = type metadata accessor for ValueReducers.Map();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_24F7DCDA4((uint64_t)sub_24F7C7610, (uint64_t)v10, a3, v12, WitnessTable, a5);
  return swift_release();
}

uint64_t sub_24F7C74D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  MEMORY[0x270FA5388](a1);
  unint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v11 + 16))(v10);
  sub_24F7C7638((uint64_t)v10, a2, a3, a4, a5);
  return swift_retain();
}

uint64_t sub_24F7C75D8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24F7C7610@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24F7C74D8(a1, v2[5], v2[6], v2[2], a2);
}

uint64_t type metadata accessor for ValueReducers.Map()
{
  return sub_24F777DE0();
}

uint64_t sub_24F7C7638@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5, a1, a4);
  uint64_t result = type metadata accessor for ValueReducers.Map();
  uint64_t v9 = (void *)(a5 + *(int *)(result + 44));
  *uint64_t v9 = a2;
  v9[1] = a3;
  return result;
}

uint64_t ValueReducers.Map._fetch(_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(*(void *)(a2 + 32) + 8) + 24))(a1, *(void *)(a2 + 16));
}

uint64_t ValueReducers.Map._value(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v25 = a1;
  uint64_t v26 = a3;
  uint64_t v5 = *(void *)(*(void *)(a2 + 32) + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = sub_24F8CF610();
  sub_24F77AD10();
  uint64_t v10 = v9;
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v25 - v12;
  sub_24F77AD10();
  uint64_t v15 = v14;
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v25 - v17;
  long long v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  uint64_t v20 = v25;
  uint64_t v25 = v3;
  v19(v20, v6, v5);
  if (sub_24F777048((uint64_t)v13, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v8);
    uint64_t v21 = 1;
    uint64_t v22 = v26;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v13, AssociatedTypeWitness);
    uint64_t v23 = v26;
    (*(void (**)(char *))(v25 + *(int *)(a2 + 44)))(v18);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, AssociatedTypeWitness);
    uint64_t v21 = 0;
    uint64_t v22 = v23;
  }
  return sub_24F7771BC(v22, v21, 1, *(void *)(a2 + 24));
}

uint64_t sub_24F7C78E8(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_24F7C7924(uint64_t a1, uint64_t a2)
{
  return ValueReducers.Map._fetch(_:)(a1, a2);
}

uint64_t sub_24F7C7940()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_24F7C79DC(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(unsigned int *)(*(void *)(v4 - 8) + 84);
  uint64_t v6 = *(void *)(*(void *)(v4 - 8) + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(*(void *)(v4 - 8) + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x24F7C7B18);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return sub_24F777048((uint64_t)a1, v5, v4);
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void sub_24F7C7B2C(char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 + 16);
  uint64_t v7 = *(unsigned int *)(*(void *)(v6 - 8) + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(*(void *)(v6 - 8) + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(v6 - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x24F7C7CFCLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          unint64_t v17 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v18 = a2 ^ 0x80000000;
            v17[1] = 0;
          }
          else
          {
            uint64_t v18 = (a2 - 1);
          }
          *unint64_t v17 = v18;
        }
        else
        {
          sub_24F7771BC((uint64_t)a1, a2, v7, v6);
        }
      }
      return;
  }
}

void sub_24F7C7D2C()
{
}

uint64_t dispatch thunk of _ValueReducer._fetch(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of _ValueReducer._value(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

ValueMetadata *type metadata accessor for ValueReducers()
{
  return &type metadata for ValueReducers;
}

ValueMetadata *type metadata accessor for ValueReducers.Auto()
{
  return &type metadata for ValueReducers.Auto;
}

uint64_t sub_24F7C7D98(uint64_t a1)
{
  return sub_24F778E68(a1, qword_26B1F5A70, (void (*)(uint64_t, uint64_t, uint64_t *))sub_24F7CBF00);
}

void sub_24F7C7DB8()
{
}

void sub_24F7C7DEC()
{
  sub_24F76FF94();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  char v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  memcpy(__dst, v0, 0xA2uLL);
  sub_24F7CC808((uint64_t)v0, v12, v13, v14, v15, v16, v17, v18, v45, v47, v50, v53);
  sub_24F8C7698(__dst, (uint64_t)__src);
  memcpy(v64, __src, 0xA8uLL);
  uint64_t v19 = __dst[11];
  uint64_t v20 = __dst[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_24F7ABCFC(v19, v20);
  uint64_t v22 = v21;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  LOBYTE(v64[21]) = v7;
  v64[22] = v22;
  memcpy(v63, v64, sizeof(v63));
  sub_24F8C60A4(v9, v23, v24, v25, v26, v27, v28, v29, v46, v48, v51, v54, v56, v57, v58, v59, v60[0], v60[1], v60[2],
    v60[3]);
  if (v1)
  {
    sub_24F7AC0E8(v64);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v65 = v3;
    type metadata accessor for StatementArgumentsSink();
    swift_allocObject();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v32 = sub_24F778A30(0);
    type metadata accessor for SQLGenerationContext();
    swift_initStackObject();
    uint64_t v33 = sub_24F779224(v9, v32, MEMORY[0x263F8EE78]);
    sub_24F8C83CC((uint64_t)v33, (uint64_t)v60);
    swift_release();
    *(void *)(v11 + 56) = 0;
    *(_OWORD *)(v11 + 40) = 0u;
    *(_OWORD *)(v11 + 24) = 0u;
    *(_OWORD *)(v11 + 8) = 0u;
    *(void *)uint64_t v11 = v31;
    sub_24F7AC1D0((uint64_t)v60, v11 + 8);
    sub_24F787238(*(void *)(v11 + 48));
    *(void *)(v11 + 48) = 0;
    *(void *)(v11 + 56) = 0;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24F7ABCFC(v19, v20);
    uint64_t v35 = v34;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_24F7AC0E8(v64);
    if (*(void *)(v35 + 16))
    {
      uint64_t v36 = swift_allocObject();
      *(void *)(v36 + 16) = v35;
      memcpy((void *)(v36 + 24), __dst, 0xA2uLL);
      uint64_t v37 = *(void *)(v11 + 48);
      sub_24F7CC808((uint64_t)__dst, v38, v39, v40, v41, v42, v43, v44, v5, v49, v52, v55);
      sub_24F787238(v37);
      *(void *)(v11 + 48) = v65;
      *(void *)(v11 + 56) = v36;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  sub_24F77BC10();
}

uint64_t Table.tableName.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Table.tableName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*Table.tableName.modify())(void)
{
  return nullsub_1;
}

uint64_t Table.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t Table<A>.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t Table.databaseRegion(_:)@<X0>(uint64_t *a1@<X8>)
{
  return sub_24F80B400(*v1, v1[1], a1);
}

uint64_t sub_24F7C8124@<X0>(uint64_t *a1@<X8>)
{
  return Table.databaseRegion(_:)(a1);
}

double sub_24F7C813C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  swift_bridgeObjectRetain();
  uint64_t v5 = MEMORY[0x263F8EE78];
  sub_24F778B08();
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  sub_24F7CB298();
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = sub_24F7CB338;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = v5;
  *(unsigned char *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = v7;
  *(void *)(a1 + 80) = v9;
  *(void *)(a1 + 88) = v10;
  *(void *)(a1 + 96) = v11;
  *(unsigned char *)(a1 + 104) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(unsigned char *)(a1 + 160) = 0;
  *(unsigned char *)(a1 + 161) = 1;
  return result;
}

void *Table.all()@<X0>(void *a1@<X8>)
{
  sub_24F7C813C((uint64_t)__src);
  return sub_24F7A59FC(__src, a1);
}

void Table.none()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = sub_24F781390(a1, a2, a3, a4, a5, a6, a7, a8, v24, v27, v30, v33, v36, v38, v40, v42, v44, v46, v48,
                       v50,
                       v52,
                       v54,
                       v56,
                       v58,
                       v60,
                       v62,
                       v64,
                       v66,
                       v68,
                       v70[0]);
  sub_24F773884(v8, v9, v10, v11, v12, v13, v14, v15, v25, v28, v31, v34, v37, v39, v41, v43, v45, v47, v49,
    v51,
    v53,
    v55,
    v57,
    v59,
    v61,
    v63,
    v65,
    v67,
    v69,
    v70[0]);
  uint64_t v16 = sub_24F77DA30();
  FilteredRequest.none()(v16, (uint64_t)&protocol witness table for QueryInterfaceRequest<A>);
  sub_24F7CBC38((uint64_t)v70, v17, v18, v19, v20, v21, v22, v23, v26, v29, v32, v35);
}

uint64_t Table.select(_:)(uint64_t a1, uint64_t a2)
{
  return sub_24F7C82E0(a1, a2, &protocol witness table for QueryInterfaceRequest<A>, SelectionRequest.select(_:));
}

{
  return sub_24F7C82E0(a1, a2, &protocol witness table for QueryInterfaceRequest<A>, SelectionRequest.select(_:));
}

#error "24F7C830C: call analysis failed (funcsize=28)"

void Table.select(sql:arguments:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void Table.select(literal:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

#error "24F7C83E4: call analysis failed (funcsize=27)"

void Table.select<A>(sql:arguments:as:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_24F77BFA4();
  Table.all()(v11);
  memcpy(__dst, __src, sizeof(__dst));
  sub_24F781274(&qword_26B1F7600);
  uint64_t v12 = sub_24F7805F8();
  *(_OWORD *)(v12 + 16) = xmmword_24F8DDBF0;
  *(void *)(v12 + 56) = &type metadata for SQL;
  *(void *)(v12 + 64) = &protocol witness table for SQL;
  sub_24F781274(&qword_26B1F7F50);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_24F8DDBF0;
  uint64_t v26 = v9;
  uint64_t v27 = v8;
  uint64_t v28 = v7;
  uint64_t v29 = v6;
  sub_24F7725D4(&v26);
  sub_24F76C344((uint64_t)&v26, v13 + 32);
  *(void *)(v12 + 32) = v13;
  uint64_t InterfaceRequest = type metadata accessor for QueryInterfaceRequest();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  QueryInterfaceRequest.select<A>(_:as:)(v12, a4, InterfaceRequest, a6);
  swift_bridgeObjectRelease();
  sub_24F7CBC38((uint64_t)__src, v15, v16, v17, v18, v19, v20, v21, 1, 2, v22, a6);
}

#error "24F7C8590: call analysis failed (funcsize=44)"

uint64_t Table.annotated(with:)(uint64_t a1, uint64_t a2)
{
  return sub_24F7C82E0(a1, a2, &protocol witness table for QueryInterfaceRequest<A>, SelectionRequest.annotated(with:));
}

{
  return sub_24F7C82E0(a1, a2, &protocol witness table for QueryInterfaceRequest<A>, SelectionRequest.annotated(with:));
}

void Table.filter(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = sub_24F77DE08(a1, a2, a3, a4, a5, a6, a7, a8, v26, v29, v32, v35, v38, v40, v42, v44, v46, v48, v50,
                       v52,
                       v54,
                       v56,
                       v58,
                       v60,
                       v62,
                       v64,
                       v66,
                       v68,
                       v70,
                       v72[0]);
  sub_24F773884(v8, v9, v10, v11, v12, v13, v14, v15, v27, v30, v33, v36, v39, v41, v43, v45, v47, v49, v51,
    v53,
    v55,
    v57,
    v59,
    v61,
    v63,
    v65,
    v67,
    v69,
    v71,
    v72[0]);
  sub_24F77DA30();
  uint64_t v16 = sub_24F785668();
  FilteredRequest.filter(_:)(v16, v17, v18);
  sub_24F7CBC38((uint64_t)v72, v19, v20, v21, v22, v23, v24, v25, v28, v31, v34, v37);
}

#error "24F7C86F4: call analysis failed (funcsize=35)"

#error "24F7C8790: call analysis failed (funcsize=36)"

void Table.filter(key:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void Table.filter(keys:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_24F7C882C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = sub_24F77DE08(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8, v25, v28, v31, v34, v37, v39, v41, v43, v45, v47, v49,
                       v51,
                       v53,
                       v55,
                       v57,
                       v59,
                       v61,
                       v63,
                       v65,
                       v67,
                       v69,
                       v71[0]);
  sub_24F773884(v9, v10, v11, v12, v13, v14, v15, v16, v26, v29, v32, v35, v38, v40, v42, v44, v46, v48, v50,
    v52,
    v54,
    v56,
    v58,
    v60,
    v62,
    v64,
    v66,
    v68,
    v70,
    v71[0]);
  type metadata accessor for QueryInterfaceRequest();
  swift_getWitnessTable();
  uint64_t v17 = sub_24F774408();
  a3(v17);
  sub_24F7CBC38((uint64_t)v71, v18, v19, v20, v21, v22, v23, v24, v27, v30, v33, v36);
}

uint64_t Table.filter(sql:arguments:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8 = *a3;
  uint64_t v9 = a3[1];
  uint64_t v10 = v4[1];
  v19[5] = *v4;
  v19[6] = v10;
  void v19[3] = &type metadata for SQL;
  v19[4] = &protocol witness table for SQL;
  sub_24F781274(&qword_26B1F7F50);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_24F8DDBF0;
  v20[0] = a1;
  v20[1] = a2;
  void v20[2] = v8;
  void v20[3] = v9;
  sub_24F7725D4(v20);
  sub_24F76C344((uint64_t)v20, v11 + 32);
  v19[0] = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Table.filter(_:)((uint64_t)v19, a4, v12, v13, v14, v15, v16, v17);
  return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v19);
}

uint64_t Table.filter(literal:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a1;
  sub_24F772D90((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8, v18, v20, v21, v22, (uint64_t)v23, (uint64_t)v24, __dst[0], __dst[1], __dst[2], __dst[3], __dst[4],
    __dst[5],
    __dst[6],
    __dst[7],
    __dst[8],
    __dst[9],
    __dst[10],
    __dst[11],
    __dst[12],
    __dst[13],
    __dst[14],
    __dst[15],
    __dst[16],
    __dst[17],
    __dst[18],
    __dst[19],
    __dst[20],
    __src[0]);
  memcpy(__dst, __src, 0xA2uLL);
  uint64_t v23 = &type metadata for SQL;
  uint64_t v24 = &protocol witness table for SQL;
  uint64_t v20 = v8;
  uint64_t v9 = sub_24F77DA30();
  swift_bridgeObjectRetain();
  FilteredRequest.filter(_:)((uint64_t)&v20, v9, (uint64_t)&protocol witness table for QueryInterfaceRequest<A>);
  sub_24F7CBC38((uint64_t)__src, v10, v11, v12, v13, v14, v15, v16, v19, v20, v21, v22);
  return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&v20);
}

uint64_t Table.order(_:)(uint64_t a1, uint64_t a2)
{
  return sub_24F7C82E0(a1, a2, &protocol witness table for QueryInterfaceRequest<A>, OrderedRequest.order(_:));
}

{
  return sub_24F7C82E0(a1, a2, &protocol witness table for QueryInterfaceRequest<A>, OrderedRequest.order(_:));
}

void Table.orderByPrimaryKey()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = sub_24F781390(a1, a2, a3, a4, a5, a6, a7, a8, v23, v26, v29, v32, v35, v37, v39, v41, v43, v45, v47,
                       v49,
                       v51,
                       v53,
                       v55,
                       v57,
                       v59,
                       v61,
                       v63,
                       v65,
                       v67,
                       v69[0]);
  sub_24F773884(v8, v9, v10, v11, v12, v13, v14, v15, v24, v27, v30, v33, v36, v38, v40, v42, v44, v46, v48,
    v50,
    v52,
    v54,
    v56,
    v58,
    v60,
    v62,
    v64,
    v66,
    v68,
    v69[0]);
  sub_24F77DA30();
  TableRequest<>.orderByPrimaryKey()();
  sub_24F7CBC38((uint64_t)v69, v16, v17, v18, v19, v20, v21, v22, v25, v28, v31, v34);
}

void Table.order(sql:arguments:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_24F7C8B3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t, uint64_t, uint64_t))
{
  sub_24F77BFA4();
  Table.all()(v15);
  memcpy(__dst, __src, sizeof(__dst));
  sub_24F781274(a5);
  uint64_t v16 = sub_24F7805F8();
  *(_OWORD *)(v16 + 16) = xmmword_24F8DDBF0;
  *(void *)(v16 + 56) = &type metadata for SQL;
  *(void *)(v16 + 64) = a6;
  sub_24F781274(&qword_26B1F7F50);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_24F8DDBF0;
  uint64_t v30 = v11;
  uint64_t v31 = v10;
  uint64_t v32 = v9;
  uint64_t v33 = v8;
  sub_24F7725D4(&v30);
  sub_24F76C344((uint64_t)&v30, v17 + 32);
  *(void *)(v16 + 32) = v17;
  uint64_t InterfaceRequest = type metadata accessor for QueryInterfaceRequest();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  a8(v16, InterfaceRequest, a7);
  swift_bridgeObjectRelease();
  sub_24F7CBC38((uint64_t)__src, v19, v20, v21, v22, v23, v24, v25, 1, 2, v26, (uint64_t)a8);
}

void Table.order(literal:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_24F7C8CAC(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t, uint64_t), uint64_t a7, uint64_t a8)
{
  uint64_t v12 = *a1;
  int v13 = sub_24F77DE08((uint64_t)a1, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8, v30, v33, v36, v39, v42, v44, v46, v48, v50, v52, v54,
                        v56,
                        v58,
                        v60,
                        v62,
                        v64,
                        v66,
                        v68,
                        v70,
                        v72,
                        v74,
                        v76[0]);
  sub_24F773884(v13, v14, v15, v16, v17, v18, v19, v20, v31, v34, v37, v40, v43, v45, v47, v49, v51, v53, v55,
    v57,
    v59,
    v61,
    v63,
    v65,
    v67,
    v69,
    v71,
    v73,
    v75,
    v76[0]);
  sub_24F781274(a3);
  uint64_t v21 = sub_24F7805F8();
  *(_OWORD *)(v21 + 16) = xmmword_24F8DDBF0;
  *(void *)(v21 + 56) = &type metadata for SQL;
  *(void *)(v21 + 64) = a4;
  *(void *)(v21 + 32) = v12;
  uint64_t InterfaceRequest = type metadata accessor for QueryInterfaceRequest();
  swift_bridgeObjectRetain();
  a6(v21, InterfaceRequest, a5);
  swift_bridgeObjectRelease();
  sub_24F7CBC38((uint64_t)v76, v23, v24, v25, v26, v27, v28, v29, v32, v35, v38, v41);
}

#error "24F7C8DBC: call analysis failed (funcsize=27)"

void Table.aliased(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = sub_24F77DE08(a1, a2, a3, a4, a5, a6, a7, a8, v25, v28, v31, v34, v37, v39, v41, v43, v45, v47, v49,
                       v51,
                       v53,
                       v55,
                       v57,
                       v59,
                       v61,
                       v63,
                       v65,
                       v67,
                       v69,
                       v71[0]);
  sub_24F773884(v8, v9, v10, v11, v12, v13, v14, v15, v26, v29, v32, v35, v38, v40, v42, v44, v46, v48, v50,
    v52,
    v54,
    v56,
    v58,
    v60,
    v62,
    v64,
    v66,
    v68,
    v70,
    v71[0]);
  sub_24F77DA30();
  sub_24F785668();
  QueryInterfaceRequest.aliased(_:)(v16, v17);
  sub_24F7CBC38((uint64_t)v71, v18, v19, v20, v21, v22, v23, v24, v27, v30, v33, v36);
}

void Table.with<A>(_:)()
{
  sub_24F7CCA3C();
  memcpy(v12, v2, 0xBBuLL);
  uint64_t v3 = v0[1];
  __dst[0] = *v0;
  __dst[1] = v3;
  Table.all()(__src);
  memcpy(__dst, __src, 0xA2uLL);
  uint64_t InterfaceRequest = type metadata accessor for QueryInterfaceRequest();
  QueryInterfaceRequest.with<A>(_:)(v12, InterfaceRequest, v1);
  sub_24F7CBC38((uint64_t)__src, v5, v6, v7, v8, v9, v10, v11, v12[0], v12[1], v12[2], v12[3]);
}

#error "24F7C8F14: call analysis failed (funcsize=35)"

void Table<A>.filter<A>(ids:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_24F7CC9CC(a1, a2, a3, a4, a5, a6, a7, a8, v16, v17, __dst[0], __dst[1], __dst[2], __dst[3], __dst[4], __dst[5], __dst[6], __dst[7], __dst[8],
    __dst[9],
    __dst[10],
    __dst[11],
    __dst[12],
    __dst[13],
    __dst[14],
    __dst[15],
    __dst[16],
    __dst[17],
    __dst[18],
    __dst[19],
    __dst[20],
    __src[0]);
  memcpy(__dst, __src, 0xA2uLL);
  type metadata accessor for QueryInterfaceRequest();
  swift_getWitnessTable();
  TableRequest<>.filter<A>(ids:)();
  sub_24F7CBC38((uint64_t)__src, v9, v10, v11, v12, v13, v14, v15, a6, v18, __dst[0], __dst[1]);
}

{
  uint64_t InterfaceRequest;
  uint64_t WitnessTable;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t __dst[21];
  char __src[168];

  sub_24F7CC9CC(a1, a2, a3, a4, a5, a6, a7, a8, v23, v24, __dst[0], __dst[1], __dst[2], __dst[3], __dst[4], __dst[5], __dst[6], __dst[7], __dst[8],
    __dst[9],
    __dst[10],
    __dst[11],
    __dst[12],
    __dst[13],
    __dst[14],
    __dst[15],
    __dst[16],
    __dst[17],
    __dst[18],
    __dst[19],
    __dst[20],
    __src[0]);
  memcpy(__dst, __src, 0xA2uLL);
  uint64_t InterfaceRequest = type metadata accessor for QueryInterfaceRequest();
  uint64_t WitnessTable = swift_getWitnessTable();
  TableRequest<>.filter<A>(ids:)(a1, InterfaceRequest, a3, &protocol witness table for QueryInterfaceRequest<A>, &protocol witness table for QueryInterfaceRequest<A>, WitnessTable, a5, a4);
  sub_24F7CBC38((uint64_t)__src, v16, v17, v18, v19, v20, v21, v22, a7, a6, __dst[0], __dst[1]);
}

void Table<A>.selectID()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  int v12 = sub_24F781390(a1, a2, a3, a4, a5, a6, a7, a8, v28, v31, v34, v37, v40, v42, v44, v46, v48, v50, v52,
                        v54,
                        v56,
                        v58,
                        v60,
                        v62,
                        v64,
                        v66,
                        v68,
                        v70,
                        v72,
                        v74[0]);
  sub_24F773884(v12, v13, v14, v15, v16, v17, v18, v19, v29, v32, v35, v38, v41, v43, v45, v47, v49, v51, v53,
    v55,
    v57,
    v59,
    v61,
    v63,
    v65,
    v67,
    v69,
    v71,
    v73,
    v74[0]);
  uint64_t v20 = sub_24F7752A8();
  QueryInterfaceRequest<A>.selectID()(v20, a2, a3, a9);
  sub_24F7CBC38((uint64_t)v74, v21, v22, v23, v24, v25, v26, v27, v30, v33, v36, v39);
}

#error "24F7C90FC: call analysis failed (funcsize=40)"

#error "24F7C9288: call analysis failed (funcsize=27)"

uint64_t Table.fetchCount(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_24F7CA484(a1, a2, (uint64_t (*)(uint64_t, uint64_t))QueryInterfaceRequest.fetchCount(_:), a4, a5, a6, a7, a8);
}

uint64_t Table<A>.fetchCursor(_:)()
{
  return sub_24F7C934C();
}

{
  return sub_24F7C934C();
}

{
  return sub_24F7C9720();
}

{
  return sub_24F7C9720();
}

uint64_t Table<A>.fetchAll(_:)()
{
  return sub_24F7C934C();
}

{
  return sub_24F7C934C();
}

{
  return sub_24F7C9720();
}

{
  return sub_24F7C9720();
}

uint64_t sub_24F7C934C()
{
  sub_24F772918();
  int v9 = sub_24F77DE08(v1, v2, v3, v4, v5, v6, v7, v8, v27, v30, v33, v36, v39, v42, v45, v48, v51, v54, v57,
                       v60,
                       v63,
                       v66,
                       v69,
                       v72,
                       v75,
                       v78,
                       v81,
                       v84,
                       v87,
                       v90);
  sub_24F773884(v9, v10, v11, v12, v13, v14, v15, v16, v28, v31, v34, v37, v40, v43, v46, v49, v52, v55, v58,
    v61,
    v64,
    v67,
    v70,
    v73,
    v76,
    v79,
    v82,
    v85,
    v88,
    v91);
  sub_24F7CCA50();
  swift_getWitnessTable();
  uint64_t v17 = sub_24F7CCA68();
  uint64_t v18 = v0(v17);
  sub_24F77ADD4(v18, v19, v20, v21, v22, v23, v24, v25, v29, v32, v35, v38, v41, v44, v47, v50, v53, v56, v59,
    v62,
    v65,
    v68,
    v71,
    v74,
    v77,
    v80,
    v83,
    v86,
    v89,
    v92);
  return sub_24F780B98();
}

void Table<A>.fetchOne(_:)()
{
}

{
  sub_24F7C965C();
}

uint64_t Table<A>.fetchSet(_:)()
{
  return sub_24F7C9720();
}

{
  return sub_24F7C9720();
}

uint64_t Table<A>.fetchCursor(_:)(uint64_t a1)
{
  return sub_24F7C9484(a1, (void (*)(uint64_t, uint64_t *))sub_24F7CB368);
}

uint64_t Table<A>.fetchAll(_:)(uint64_t a1)
{
  return sub_24F7C9484(a1, (void (*)(uint64_t, uint64_t *))sub_24F7CB654);
}

uint64_t sub_24F7C9484(uint64_t a1, void (*a2)(uint64_t, uint64_t *))
{
  uint64_t v6 = *v2;
  uint64_t v5 = v2[1];
  swift_bridgeObjectRetain();
  uint64_t v7 = MEMORY[0x263F8EE78];
  sub_24F778B08();
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  sub_24F7CB298();
  __src[0] = v6;
  __src[1] = v5;
  __src[2] = 0;
  __src[3] = sub_24F7CB338;
  memset(&__src[4], 0, 24);
  __src[7] = v7;
  LOBYTE(__src[8]) = 0;
  __src[9] = v9;
  __src[10] = v11;
  __src[11] = v12;
  __src[12] = v13;
  LOBYTE(__src[13]) = 0;
  memset(&__src[14], 0, 48);
  LOWORD(__src[20]) = 256;
  memcpy(__dst, __src, 0xA2uLL);
  a2(a1, __dst);
  sub_24F7CCA08();
  sub_24F7CBC38((uint64_t)__src, v14, v15, v16, v17, v18, v19, v20, v22, __dst[0], __dst[1], __dst[2]);
  return sub_24F780B98();
}

uint64_t Table<A>.fetchOne(_:)(uint64_t a1)
{
  return sub_24F7C9484(a1, (void (*)(uint64_t, uint64_t *))sub_24F7CBA50);
}

uint64_t Table<A>.fetchSet(_:)(uint64_t a1)
{
  return sub_24F7C9484(a1, (void (*)(uint64_t, uint64_t *))sub_24F7CB76C);
}

void sub_24F7C965C()
{
  sub_24F772918();
  int v9 = sub_24F77DE08(v1, v2, v3, v4, v5, v6, v7, v8, v25, v28, v31, v34, v37, v39, v41, v43, v45, v47, v49,
                       v51,
                       v53,
                       v55,
                       v57,
                       v59,
                       v61,
                       v63,
                       v65,
                       v67,
                       v69,
                       v71[0]);
  sub_24F773884(v9, v10, v11, v12, v13, v14, v15, v16, v26, v29, v32, v35, v38, v40, v42, v44, v46, v48, v50,
    v52,
    v54,
    v56,
    v58,
    v60,
    v62,
    v64,
    v66,
    v68,
    v70,
    v71[0]);
  sub_24F7CCA50();
  swift_getWitnessTable();
  uint64_t v17 = sub_24F7CCA68();
  v0(v17);
  sub_24F7CBC38((uint64_t)v71, v18, v19, v20, v21, v22, v23, v24, v27, v30, v33, v36);
}

uint64_t sub_24F7C9720()
{
  sub_24F771DB4();
  int v12 = sub_24F77DE08(v4, v5, v6, v7, v8, v9, v10, v11, v31, v34, v37, v40, v43, v46, v49, v52, v55, v58, v61,
                        v64,
                        v67,
                        v70,
                        v73,
                        v76,
                        v79,
                        v82,
                        v85,
                        v88,
                        v91,
                        v94);
  sub_24F773884(v12, v13, v14, v15, v16, v17, v18, v19, v32, v35, v38, v41, v44, v47, v50, v53, v56, v59, v62,
    v65,
    v68,
    v71,
    v74,
    v77,
    v80,
    v83,
    v86,
    v89,
    v92,
    v95);
  uint64_t InterfaceRequest = type metadata accessor for QueryInterfaceRequest();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v22 = v0(v3, InterfaceRequest, WitnessTable, v2, v1);
  sub_24F77ADD4(v22, v23, v24, v25, v26, v27, v28, v29, v33, v36, v39, v42, v45, v48, v51, v54, v57, v60, v63,
    v66,
    v69,
    v72,
    v75,
    v78,
    v81,
    v84,
    v87,
    v90,
    v93,
    v96);
  return sub_24F780B98();
}

uint64_t Table<A>.fetchOne(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_24F7C98F4(a1, a2, a3, a4, FetchRequest<>.fetchOne(_:));
}

{
  return sub_24F7C98F4(a1, a2, a3, a4, FetchRequest<>.fetchOne(_:));
}

uint64_t Table<A>.fetchSet(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_24F7C99A8(a1, a2, a3, a4, a5, FetchRequest<>.fetchSet(_:));
}

{
  return sub_24F7C99A8(a1, a2, a3, a4, a5, FetchRequest<>.fetchSet(_:));
}

#error "24F7C9914: call analysis failed (funcsize=33)"

#error "24F7C99DC: call analysis failed (funcsize=36)"

uint64_t Table<A>.fetchCursor(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_24F7C99A8(a1, a2, a3, a4, a5, FetchRequest<>.fetchCursor(_:));
}

uint64_t Table<A>.fetchAll(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_24F7C99A8(a1, a2, a3, a4, a5, FetchRequest<>.fetchAll(_:));
}

#error "24F7C9ABC: call analysis failed (funcsize=35)"

#error "24F7C9B4C: call analysis failed (funcsize=33)"

uint64_t Table.belongsTo<A>(_:key:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_24F7C9BF4(a1, a2, a3, a4, a5, a6, a7, (void (*)(unsigned char *, uint64_t, uint64_t, void *, void, uint64_t, double))sub_24F870614);
}

uint64_t Table.hasMany<A>(_:key:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_24F7C9BF4(a1, a2, a3, a4, a5, a6, a7, (void (*)(unsigned char *, uint64_t, uint64_t, void *, void, uint64_t, double))sub_24F79A470);
}

uint64_t Table.hasOne<A>(_:key:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_24F7C9BF4(a1, a2, a3, a4, a5, a6, a7, (void (*)(unsigned char *, uint64_t, uint64_t, void *, void, uint64_t, double))sub_24F8708CC);
}

uint64_t sub_24F7C9BF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(unsigned char *, uint64_t, uint64_t, void *, void, uint64_t, double))
{
  uint64_t v13 = *a4;
  uint64_t v14 = a4[1];
  double v15 = sub_24F790A0C(a6, a7, (uint64_t)v18);
  v17[0] = v13;
  v17[1] = v14;
  a8(v18, a2, a3, v17, *(void *)(a5 + 16), a6, v15);
  swift_bridgeObjectRetain();
  return sub_24F799198(v13);
}

uint64_t Table.belongsTo<A>(_:key:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  return sub_24F7C9CF4(a1, a2, a3, a4, a5, a6, (void (*)(unsigned char *, uint64_t, uint64_t, void *, void, uint64_t, double))sub_24F870614);
}

uint64_t Table.hasMany<A>(_:key:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  return sub_24F7C9CF4(a1, a2, a3, a4, a5, a6, (void (*)(unsigned char *, uint64_t, uint64_t, void *, void, uint64_t, double))sub_24F79A470);
}

uint64_t Table.hasOne<A>(_:key:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  return sub_24F7C9CF4(a1, a2, a3, a4, a5, a6, (void (*)(unsigned char *, uint64_t, uint64_t, void *, void, uint64_t, double))sub_24F8708CC);
}

uint64_t sub_24F7C9CF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, void (*a7)(unsigned char *, uint64_t, uint64_t, void *, void, uint64_t, double))
{
  uint64_t v12 = *a4;
  uint64_t v13 = a4[1];
  double v14 = sub_24F7C813C((uint64_t)v17);
  v16[0] = v12;
  v16[1] = v13;
  a7(v17, a2, a3, v16, *(void *)(a5 + 16), a6, v14);
  swift_bridgeObjectRetain();
  return sub_24F799198(v12);
}

uint64_t Table.association<A>(to:on:)@<X0>(void *__src@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  memcpy(__dst, __src, 0xBBuLL);
  type metadata accessor for CommonTableExpression();
  sub_24F7C813C((uint64_t)__srca);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = a3;
  *(void *)&__dst[0] = sub_24F7CBC30;
  *((void *)&__dst[0] + 1) = v7;
  __dst[1] = 0uLL;
  LOBYTE(__dst[2]) = 0x80;
  sub_24F827F24(__srca, __dst, a4);
  return swift_retain();
}

uint64_t sub_24F7C9E8C@<X0>(void (*a1)(void *__return_ptr)@<X2>, uint64_t a2@<X8>)
{
  a1(v6);
  uint64_t v3 = v7;
  uint64_t v4 = v8;
  sub_24F7811D0(v6, v7);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 8))(v9, v3, v4);
  nullsub_1(v9);
  sub_24F77A91C((uint64_t)v9, a2, qword_26B1F7458);
  return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v6);
}

uint64_t Table.association<A>(to:)()
{
  sub_24F7CCA3C();
  memcpy(__dst, v1, 0xBBuLL);
  type metadata accessor for CommonTableExpression();
  sub_24F7C813C((uint64_t)__src);
  *(void *)&__dst[0] = sub_24F807080;
  *((void *)&__dst[0] + 1) = 0;
  __dst[1] = 0uLL;
  LOBYTE(__dst[2]) = 0x80;
  return sub_24F827F24(__src, __dst, v0);
}

#error "24F7CA05C: call analysis failed (funcsize=47)"

#error "24F7CA12C: call analysis failed (funcsize=49)"

uint64_t Table.including<A>(all:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_24F7CA188(a1, a2, a3, a4, JoinableRequest.including<A>(all:));
}

uint64_t Table.including<A>(optional:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_24F7CA188(a1, a2, a3, a4, JoinableRequest.including<A>(optional:));
}

#error "24F7CA1B8: call analysis failed (funcsize=34)"

uint64_t Table.including<A>(required:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_24F7CA188(a1, a2, a3, a4, JoinableRequest.including<A>(required:));
}

uint64_t Table.joining<A>(optional:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_24F7CA188(a1, a2, a3, a4, JoinableRequest.joining<A>(optional:));
}

uint64_t Table.joining<A>(required:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_24F7CA188(a1, a2, a3, a4, JoinableRequest.joining<A>(required:));
}

uint64_t Table.annotated<A>(withOptional:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_24F7CA28C(a1, a2, a3, a4, JoinableRequest<>.annotated<A>(withOptional:));
}

uint64_t Table.annotated<A>(withRequired:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_24F7CA28C(a1, a2, a3, a4, JoinableRequest<>.annotated<A>(withRequired:));
}

#error "24F7CA2BC: call analysis failed (funcsize=35)"

void _s12GRDBInternal5TableV9annotated4withAA21QueryInterfaceRequestVyxGAA20AssociationAggregateVyxGd_tF_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = sub_24F77DE08(a1, a2, a3, a4, a5, a6, a7, a8, v23, v26, v29, v32, v35, v37, v39, v41, v43, v45, v47,
                       v49,
                       v51,
                       v53,
                       v55,
                       v57,
                       v59,
                       v61,
                       v63,
                       v65,
                       v67,
                       v69[0]);
  sub_24F773884(v8, v9, v10, v11, v12, v13, v14, v15, v24, v27, v30, v33, v36, v38, v40, v42, v44, v46, v48,
    v50,
    v52,
    v54,
    v56,
    v58,
    v60,
    v62,
    v64,
    v66,
    v68,
    v69[0]);
  sub_24F77DA30();
  swift_getWitnessTable();
  sub_24F785668();
  DerivableRequest.annotated(with:)();
  sub_24F7CBC38((uint64_t)v69, v16, v17, v18, v19, v20, v21, v22, v25, v28, v31, v34);
}

void Table.having(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_24F772D90((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8, *a1, a1[1], v17, v19, v20, v21, __dst[0], __dst[1], __dst[2], __dst[3], __dst[4],
    __dst[5],
    __dst[6],
    __dst[7],
    __dst[8],
    __dst[9],
    __dst[10],
    __dst[11],
    __dst[12],
    __dst[13],
    __dst[14],
    __dst[15],
    __dst[16],
    __dst[17],
    __dst[18],
    __dst[19],
    __dst[20],
    __src[0]);
  memcpy(__dst, __src, 0xA2uLL);
  sub_24F77DA30();
  swift_getWitnessTable();
  DerivableRequest.having(_:)();
  sub_24F7CBC38((uint64_t)__src, v8, v9, v10, v11, v12, v13, v14, v15, v16, v18, v15);
}

uint64_t Table.deleteAll(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_24F7CA484(a1, a2, (uint64_t (*)(uint64_t, uint64_t))QueryInterfaceRequest.deleteAll(_:), a4, a5, a6, a7, a8);
}

uint64_t sub_24F7CA484(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10 = sub_24F77DE08(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8, v28, v31, v34, v37, v40, v43, v46, v49, v52, v55, v58,
                        v61,
                        v64,
                        v67,
                        v70,
                        v73,
                        v76,
                        v79,
                        v82,
                        v85,
                        v88,
                        v91);
  sub_24F773884(v10, v11, v12, v13, v14, v15, v16, v17, v29, v32, v35, v38, v41, v44, v47, v50, v53, v56, v59,
    v62,
    v65,
    v68,
    v71,
    v74,
    v77,
    v80,
    v83,
    v86,
    v89,
    v92);
  uint64_t v18 = sub_24F77222C();
  uint64_t v19 = a3(a1, v18);
  sub_24F77ADD4(v19, v20, v21, v22, v23, v24, v25, v26, v30, v33, v36, v39, v42, v45, v48, v51, v54, v57, v60,
    v63,
    v66,
    v69,
    v72,
    v75,
    v78,
    v81,
    v84,
    v87,
    v90,
    v93);
  return sub_24F780B98();
}

void Table.exists<A>(_:key:)()
{
  sub_24F76FF94();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v25 = v9;
  uint64_t v10 = sub_24F8CF610();
  sub_24F77AD10();
  uint64_t v12 = v11;
  MEMORY[0x270FA5388](v13);
  int v15 = (char *)&v24 - v14;
  uint64_t v16 = v0[1];
  uint64_t v26 = *v0;
  uint64_t v27 = v16;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))((char *)&v24 - v14, v8, v4);
  sub_24F7771BC((uint64_t)v15, 0, 1, v4);
  Table.filter<A>(key:)(v28, v15, v6, v4, v2);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v10);
  sub_24F77729C(v29);
  sub_24F77729C(&v26);
  sub_24F7CCA50();
  QueryInterfaceRequest.isEmpty(_:)();
  sub_24F7CBC38((uint64_t)v29, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27);
  sub_24F77BC10();
}

uint64_t Table<A>.exists(_:id:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_24F77EE18(a1, a2);
  int v3 = Table<A>.filter(id:)(v2);
  sub_24F773884(v3, v4, v5, v6, v7, v8, v9, v10, v20, v22, v24, v26, v28, v30, v32, v34, v36, v38, v40,
    v42,
    v44,
    v46,
    v48,
    v50,
    v52,
    v54,
    v56,
    v58,
    v60,
    v62);
  sub_24F7752A8();
  uint64_t v11 = sub_24F7813B0();
  sub_24F77ADD4(v11, v12, v13, v14, v15, v16, v17, v18, v21, v23, v25, v27, v29, v31, v33, v35, v37, v39, v41,
    v43,
    v45,
    v47,
    v49,
    v51,
    v53,
    v55,
    v57,
    v59,
    v61,
    v63);
  return sub_24F77ADF0();
}

{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  char v63;

  uint64_t v2 = sub_24F77EE18(a1, a2);
  int v3 = Table<A>.filter(id:)(v2);
  sub_24F773884(v3, v4, v5, v6, v7, v8, v9, v10, v20, v22, v24, v26, v28, v30, v32, v34, v36, v38, v40,
    v42,
    v44,
    v46,
    v48,
    v50,
    v52,
    v54,
    v56,
    v58,
    v60,
    v62);
  sub_24F7752A8();
  uint64_t v11 = sub_24F7813B0();
  sub_24F77ADD4(v11, v12, v13, v14, v15, v16, v17, v18, v21, v23, v25, v27, v29, v31, v33, v35, v37, v39, v41,
    v43,
    v45,
    v47,
    v49,
    v51,
    v53,
    v55,
    v57,
    v59,
    v61,
    v63);
  return sub_24F77ADF0();
}

uint64_t Table.exists(_:key:)(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = *v2;
  uint64_t v30 = v2[1];
  uint64_t v3 = sub_24F7CCA14(a1, a2);
  Table.filter(key:)(v3, v4, v5, v6, v7, v8, v9, v10);
  sub_24F773884(v11, v12, v13, v14, v15, v16, v17, v18, v28, v30, v32, v34, v36, v38, v40, v42, v44, v46, v48,
    v50,
    v52,
    v54,
    v56,
    v58,
    v60,
    v62,
    v64,
    v66,
    v68,
    v70);
  sub_24F7752A8();
  uint64_t v19 = sub_24F7813B0();
  sub_24F77ADD4(v19, v20, v21, v22, v23, v24, v25, v26, v29, v31, v33, v35, v37, v39, v41, v43, v45, v47, v49,
    v51,
    v53,
    v55,
    v57,
    v59,
    v61,
    v63,
    v65,
    v67,
    v69,
    v71);
  return sub_24F77ADF0();
}

void Table.deleteAll<A>(_:keys:)()
{
  sub_24F76FF94();
  uint64_t v20 = v1;
  uint64_t v3 = v2;
  sub_24F77AD10();
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = *v0;
  uint64_t v7 = v0[1];
  (*(void (**)(char *))(v8 + 16))((char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_getAssociatedTypeWitness();
  uint64_t v9 = sub_24F8CF1D0();
  v23[0] = v9;
  uint64_t v10 = sub_24F8CF1B0();
  swift_getWitnessTable();
  if (sub_24F8CF410())
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v23[0] = v6;
    v23[1] = v7;
    v21[0] = v9;
    uint64_t WitnessTable = swift_getWitnessTable();
    Table.filter<A>(keys:)(v22, v21, v3, v10, WitnessTable, v20);
    swift_bridgeObjectRelease();
    sub_24F77729C(v23);
    sub_24F77729C(v21);
    sub_24F7CCA50();
    QueryInterfaceRequest.deleteAll(_:)();
    sub_24F7CBC38((uint64_t)v23, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21[0], v21[1]);
  }
  sub_24F77BC10();
}

void Table.deleteOne<A>(_:key:)()
{
  sub_24F76FF94();
  void v23[2] = v2;
  uint64_t v24 = v1;
  uint64_t v4 = v3;
  v23[0] = v5;
  v23[1] = v6;
  uint64_t v8 = v7;
  uint64_t v9 = sub_24F8CF610();
  sub_24F77AD10();
  uint64_t v11 = v10;
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)v23 - v13;
  sub_24F77AD10();
  uint64_t v16 = v15;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *v0;
  uint64_t v21 = v0[1];
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v8, v9);
  if (sub_24F777048((uint64_t)v14, 1, v4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v9);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v19, v14, v4);
    uint64_t v25 = v20;
    uint64_t v26 = v21;
    sub_24F8414D0(v4, v4);
    swift_allocObject();
    sub_24F8CF0C0();
    (*(void (**)(uint64_t, char *, uint64_t))(v16 + 16))(v22, v19, v4);
    sub_24F83CD04();
    sub_24F8CF1B0();
    swift_getWitnessTable();
    Table.deleteAll<A>(_:keys:)();
    sub_24F76BAC4();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v4);
  }
  sub_24F77BC10();
}

uint64_t Table<A>.deleteAll<A>(_:ids:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v25 = a1;
  if ((sub_24F8CF360() & 1) == 0)
  {
    Table<A>.filter<A>(ids:)(a2, a3, a4, a5, a6, a7, v12, v13);
    memcpy(__dst, __src, 0xA2uLL);
    sub_24F77222C();
    QueryInterfaceRequest.deleteAll(_:)();
    sub_24F76BAC4();
    sub_24F7CBC38((uint64_t)__src, v14, v15, v16, v17, v18, v19, v20, a7, __dst[0], __dst[1], __dst[2]);
  }
  return sub_24F775FA4();
}

BOOL Table<A>.deleteOne(_:id:)()
{
  sub_24F78582C();
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_24F8414D0(AssociatedTypeWitness, AssociatedTypeWitness);
  sub_24F782E74();
  uint64_t v9 = v8;
  sub_24F77D720();
  uint64_t v10 = sub_24F8CF0C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v11, v4, AssociatedTypeWitness);
  sub_24F83CD04();
  uint64_t v15 = v10;
  uint64_t v12 = sub_24F8CF1B0();
  uint64_t WitnessTable = swift_getWitnessTable();
  Table<A>.deleteAll<A>(_:ids:)(v6, (uint64_t)&v15, v2, v12, v1, WitnessTable, v0);
  sub_24F7CCA08();
  swift_bridgeObjectRelease();
  return sub_24F780AA8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t WitnessTable;
  uint64_t v16;

  sub_24F770908();
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_24F8414D0(AssociatedTypeWitness, AssociatedTypeWitness);
  sub_24F782E74();
  uint64_t v10 = v9;
  sub_24F77D720();
  uint64_t v11 = sub_24F8CF0C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v12, v5, AssociatedTypeWitness);
  sub_24F83CD04();
  uint64_t v16 = v11;
  uint64_t v13 = sub_24F8CF1B0();
  uint64_t WitnessTable = swift_getWitnessTable();
  Table<A>.deleteAll<A>(_:ids:)(v7, (uint64_t)&v16, v3, v13, v2, WitnessTable, v1, v0);
  sub_24F7CCA08();
  swift_bridgeObjectRelease();
  return sub_24F780AA8();
}

uint64_t Table<A>.deleteAll<A>(_:ids:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v27 = a1;
  if ((sub_24F8CF360() & 1) == 0)
  {
    uint64_t v11 = sub_24F774654();
    Table<A>.filter<A>(ids:)(v11, v12, a4, a5, a6, a7, a8, v13);
    memcpy(__dst, __src, 0xA2uLL);
    sub_24F77222C();
    QueryInterfaceRequest.deleteAll(_:)();
    sub_24F76BAC4();
    sub_24F7CBC38((uint64_t)__src, v14, v15, v16, v17, v18, v19, v20, v22, a7, a8, __dst[0]);
  }
  return sub_24F775FA4();
}

uint64_t Table.deleteAll(_:keys:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    uint64_t v27 = *v2;
    uint64_t v29 = v2[1];
    uint64_t v3 = sub_24F7CCA14(a1, a2);
    Table.filter(keys:)(v3, v4, v5, v6, v7, v8, v9, v10);
    sub_24F773884(v11, v12, v13, v14, v15, v16, v17, v18, v27, v29, v31, v33, v35, v36, v37, v38, v39, v40, v41,
      v42,
      v43,
      v44,
      v45,
      v46,
      v47,
      v48,
      v49,
      v50,
      v51,
      v52[0]);
    sub_24F77222C();
    QueryInterfaceRequest.deleteAll(_:)();
    sub_24F76BAC4();
    sub_24F7CBC38((uint64_t)v52, v19, v20, v21, v22, v23, v24, v25, v28, v30, v32, v34);
  }
  return sub_24F775FA4();
}

BOOL Table.deleteOne(_:key:)(uint64_t a1, uint64_t a2)
{
  sub_24F781274(&qword_269A2AE50);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_24F8DDBF0;
  *(void *)(v4 + 32) = a2;
  swift_bridgeObjectRetain();
  Table.deleteAll(_:keys:)(a1, v4);
  sub_24F7CCA08();
  swift_bridgeObjectRelease();
  return sub_24F780AA8();
}

uint64_t Table.updateAll(_:onConflict:_:)(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v6 = *a2;
  sub_24F7CCA28(a1, (uint64_t)a2, a3, a4);
  int v8 = Table.all()(v7);
  sub_24F773884(v8, v9, v10, v11, v12, v13, v14, v15, v26, v28, v30, v32, v34, v36, v38, v40, v42, v44, v46,
    v48,
    v50,
    v52,
    v54,
    v56,
    v58,
    v60,
    v62,
    v64,
    v66,
    v68);
  unsigned __int8 v70 = v6;
  uint64_t v16 = sub_24F7752A8();
  uint64_t v17 = QueryInterfaceRequest.updateAll(_:onConflict:_:)(a1, &v70, a3, v16);
  sub_24F77ADD4(v17, v18, v19, v20, v21, v22, v23, v24, v27, v29, v31, v33, v35, v37, v39, v41, v43, v45, v47,
    v49,
    v51,
    v53,
    v55,
    v57,
    v59,
    v61,
    v63,
    v65,
    v67,
    v69);
  return sub_24F780B98();
}

uint64_t Table.updateAll(_:onConflict:_:_:)()
{
  sub_24F78582C();
  uint64_t v3 = v2;
  unsigned __int8 v7 = *v4;
  sub_24F781274(qword_26B1F51A8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_24F8DDBF0;
  sub_24F7AC534(v1, inited + 32);
  swift_bridgeObjectRetain();
  sub_24F79318C();
  Table.updateAll(_:onConflict:_:)(v3, &v7, inited, v0);
  sub_24F7CCA08();
  swift_bridgeObjectRelease();
  return sub_24F780B98();
}

void sub_24F7CB298()
{
  sub_24F778D74();
  uint64_t v3 = v2;
  if (*(void *)(v2 + 16))
  {
    sub_24F770F50();
    uint64_t v4 = v3 + 40;
    do
    {
      sub_24F77C644();
      if (v0 >= v1 >> 1) {
        sub_24F77B4E4();
      }
      v4 += 232;
      sub_24F76B6C0();
    }
    while (!v5);
  }
  sub_24F778E68(v3, &qword_269A2A310, (void (*)(uint64_t, uint64_t, uint64_t *))sub_24F7CC22C);
  sub_24F778C78();
}

void *sub_24F7CB338@<X0>(void *a1@<X8>)
{
  double result = sub_24F8017AC();
  *a1 = result;
  return result;
}

uint64_t sub_24F7CB368(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Row();
  sub_24F7C7DEC();
  if (v2) {
    return a2;
  }
  uint64_t v4 = v12;
  if (!v12)
  {
    sub_24F78C440(0);
    sub_24F787238(0);
    v9[0] = 0;
    v9[1] = 0;
    uint64_t v5 = swift_retain();
    a2 = static Row.fetchCursor(_:arguments:adapter:)(v5, v9, (uint64_t)&v11);
    sub_24F7AD1E4((uint64_t)&v10);
    swift_release();
    return a2;
  }
  uint64_t v7 = v13;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v12;
  *(void *)(v8 + 24) = v7;
  sub_24F78C440(v4);
  uint64_t result = sub_24F787238((uint64_t)sub_24F7CC95C);
  __break(1u);
  return result;
}

uint64_t sub_24F7CB49C(uint64_t a1)
{
  sub_24F7F9440(a1, (uint64_t)v11);
  if (v1) {
    return sub_24F775FA4();
  }
  uint64_t v2 = v12;
  if (!v12)
  {
    sub_24F78C440(0);
    sub_24F787238(0);
    swift_retain();
    sub_24F7854C8();
    uint64_t v6 = static Row.fetchCursor(_:arguments:adapter:)(v3, v4, v5);
    sub_24F7CC9F0(v6, v7, 0, 0);
    swift_release();
    return sub_24F775FA4();
  }
  uint64_t v9 = v13;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v2;
  *(void *)(v10 + 24) = v9;
  sub_24F78C440(v2);
  uint64_t result = sub_24F787238((uint64_t)sub_24F7CC5C0);
  __break(1u);
  return result;
}

uint64_t sub_24F7CB584()
{
  sub_24F7760E4();
  sub_24F7F9440(v2, v3);
  if (!v0)
  {
    sub_24F7735F4();
    sub_24F7854C8();
    uint64_t v1 = static Row.fetchAll(_:arguments:adapter:)(v4, v5, v6);
    swift_release();
    if (v11)
    {
      swift_retain();
      sub_24F7CCA7C();
      uint64_t v8 = v11();
      sub_24F7CC9F0(v8, v9);
      sub_24F787238((uint64_t)v11);
    }
    else
    {
      sub_24F7AD1E4((uint64_t)v10);
    }
  }
  return v1;
}

uint64_t sub_24F7CB654()
{
  uint64_t v1 = type metadata accessor for Row();
  sub_24F7C7DEC();
  if (!v0)
  {
    uint64_t v2 = sub_24F7735F4();
    uint64_t v1 = static Row.fetchAll(_:arguments:adapter:)(v2, &v7, 0);
    swift_release();
    uint64_t v4 = v9;
    if (v9)
    {
      swift_retain();
      sub_24F774654();
      sub_24F7CCA7C();
      uint64_t v5 = v4();
      sub_24F7CC9F0(v5, v6);
      sub_24F787238((uint64_t)v4);
    }
    else
    {
      sub_24F7AD1E4((uint64_t)v8);
    }
  }
  return v1;
}

uint64_t sub_24F7CB76C(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Row();
  sub_24F7C7DEC();
  if (!v2)
  {
    uint64_t v5 = v13;
    long long v10 = 0uLL;
    if (v13)
    {
      sub_24F78C440((uint64_t)v13);
      uint64_t v6 = swift_retain();
      unint64_t v8 = static Row.fetchAll(_:arguments:adapter:)(v6, &v10, (uint64_t)v12);
      swift_release();
      v5(a1, v8);
      a2 = sub_24F78E494(v8);
      sub_24F787238((uint64_t)v5);
      sub_24F7AD1E4((uint64_t)&v11);
    }
    else
    {
      uint64_t v7 = swift_retain();
      a2 = static Row.fetchSet(_:arguments:adapter:)(v7, &v10, (uint64_t)v12);
      sub_24F7AD1E4((uint64_t)&v11);
      swift_release();
    }
  }
  return a2;
}

uint64_t sub_24F7CB90C(uint64_t a1)
{
  sub_24F7F9440(a1, (uint64_t)v16);
  if (!v1)
  {
    uint64_t v2 = v17;
    if (v17)
    {
      uint64_t v3 = sub_24F774654();
      sub_24F78C440(v3);
      swift_retain();
      sub_24F7CCABC();
      unint64_t v12 = static Row.fetchAll(_:arguments:adapter:)(v4, v5, v6);
      swift_release();
      sub_24F7CCA7C();
      v2(v13, v14);
      sub_24F78E494(v12);
      sub_24F787238((uint64_t)v2);
      sub_24F7AD1E4((uint64_t)v16);
    }
    else
    {
      swift_retain();
      sub_24F7CCABC();
      uint64_t v10 = static Row.fetchSet(_:arguments:adapter:)(v7, v8, v9);
      sub_24F7CC9F0(v10, v11, 0, 0);
      swift_release();
    }
  }
  return sub_24F775FA4();
}

uint64_t sub_24F7CBA50(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Row();
  sub_24F7C7DEC();
  if (!v1)
  {
    long long v9 = 0uLL;
    uint64_t v4 = swift_retain();
    uint64_t v3 = static Row.fetchOne(_:arguments:adapter:)(v4, &v9, (uint64_t)&v11);
    swift_release();
    if (v3 && (uint64_t v6 = v12) != 0)
    {
      sub_24F781274(&qword_26B1F7F68);
      uint64_t v7 = swift_allocObject();
      *(_OWORD *)(v7 + 16) = xmmword_24F8DE5E0;
      *(void *)(v7 + 32) = v3;
      *(void *)&long long v9 = v7;
      sub_24F8CF0B0();
      uint64_t v8 = v9;
      sub_24F78C440((uint64_t)v6);
      swift_retain();
      v6(a1, v8);
      sub_24F7AD1E4((uint64_t)&v10);
      swift_bridgeObjectRelease();
      sub_24F787238((uint64_t)v6);
    }
    else
    {
      sub_24F7AD1E4((uint64_t)&v10);
    }
  }
  return v3;
}

uint64_t type metadata accessor for Table()
{
  return sub_24F777DE0();
}

uint64_t sub_24F7CBBF8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24F7CBC30@<X0>(uint64_t a1@<X8>)
{
  return sub_24F7C9E8C(*(void (**)(void *__return_ptr))(v1 + 16), a1);
}

void sub_24F7CBC38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_24F76B854();
  uint64_t v13 = *(void *)(v12 + 112);
  sub_24F77EDB0();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v14 = sub_24F774654();
  sub_24F787238(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_24F787238(v13);
  sub_24F787238(a12);
  sub_24F775B3C();
}

uint64_t sub_24F7CBCE4()
{
  sub_24F7760E4();
  sub_24F7F9440(v2, v3);
  if (!v0)
  {
    sub_24F7735F4();
    sub_24F7854C8();
    uint64_t v1 = static Row.fetchOne(_:arguments:adapter:)(v4, v5, v6);
    swift_release();
    if (v1 && (uint64_t v8 = v15) != 0)
    {
      sub_24F781274(&qword_26B1F7F68);
      uint64_t v9 = swift_allocObject();
      *(_OWORD *)(v9 + 16) = xmmword_24F8DE5E0;
      *(void *)(v9 + 32) = v1;
      uint64_t v13 = v9;
      sub_24F8CF0B0();
      sub_24F78C440((uint64_t)v8);
      swift_retain();
      sub_24F7CCA7C();
      uint64_t v11 = v8(v10);
      sub_24F7CC9F0(v11, v12, v13);
      swift_bridgeObjectRelease();
      sub_24F787238((uint64_t)v8);
    }
    else
    {
      sub_24F7AD1E4((uint64_t)v14);
    }
  }
  return v1;
}

void *assignWithCopy for FTS5(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for FTS5(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for StatementCache(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StatementCache(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void sub_24F7CBF00(uint64_t a1, char a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (!v4)
  {
LABEL_18:
    swift_bridgeObjectRelease_n();
    return;
  }
  unint64_t v5 = 0;
  uint64_t v6 = (char *)(a1 + 64);
  while (1)
  {
    if (v5 >= *(void *)(a1 + 16))
    {
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      sub_24F8CFEA0();
      __break(1u);
      goto LABEL_24;
    }
    char v7 = *v6;
    uint64_t v9 = *((void *)v6 - 2);
    unint64_t v8 = *((void *)v6 - 1);
    uint64_t v11 = *((void *)v6 - 4);
    uint64_t v10 = *((void *)v6 - 3);
    swift_bridgeObjectRetain();
    sub_24F781F34(v9, v8, v7);
    if (!v10) {
      goto LABEL_18;
    }
    unint64_t v29 = v8;
    char v30 = v7;
    uint64_t v12 = (void *)*a3;
    unint64_t v14 = sub_24F782950();
    uint64_t v15 = v12[2];
    BOOL v16 = (v13 & 1) == 0;
    if (__OFADD__(v15, v16)) {
      goto LABEL_21;
    }
    char v17 = v13;
    if (v12[3] < v15 + v16) {
      break;
    }
    if (a2)
    {
      if (v13) {
        goto LABEL_16;
      }
    }
    else
    {
      sub_24F781274(&qword_26B1F58F8);
      sub_24F8CF990();
      if (v17) {
        goto LABEL_16;
      }
    }
LABEL_12:
    uint64_t v20 = (void *)*a3;
    *(void *)(*a3 + 8 * (v14 >> 6) + 64) |= 1 << v14;
    uint64_t v21 = (void *)(v20[6] + 16 * v14);
    void *v21 = v11;
    v21[1] = v10;
    uint64_t v22 = v20[7] + 24 * v14;
    *(void *)uint64_t v22 = v9;
    *(void *)(v22 + 8) = v29;
    *(unsigned char *)(v22 + 16) = v30;
    uint64_t v23 = v20[2];
    BOOL v24 = __OFADD__(v23, 1);
    uint64_t v25 = v23 + 1;
    if (v24) {
      goto LABEL_22;
    }
    ++v5;
    void v20[2] = v25;
    v6 += 40;
    a2 = 1;
    if (v4 == v5) {
      goto LABEL_18;
    }
  }
  sub_24F8B59EC();
  unint64_t v18 = sub_24F782950();
  if ((v17 & 1) != (v19 & 1)) {
    goto LABEL_23;
  }
  unint64_t v14 = v18;
  if ((v17 & 1) == 0) {
    goto LABEL_12;
  }
LABEL_16:
  uint64_t v26 = (void *)swift_allocError();
  swift_willThrow();
  id v27 = v26;
  sub_24F781274(&qword_26B1F7040);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    sub_24F781F10(v9, v29, v30);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    return;
  }
LABEL_24:
  sub_24F8CF7D0();
  sub_24F8CEEB0();
  sub_24F8CF920();
  sub_24F8CEEB0();
  sub_24F8CF9D0();
  __break(1u);
}

void sub_24F7CC22C(uint64_t a1, char a2, void *a3)
{
  unint64_t v4 = *(void *)(a1 + 16);
  uint64_t v23 = a1 + 32;
  swift_bridgeObjectRetain();
  unint64_t v5 = 0;
  while (1)
  {
    if (v5 == v4)
    {
      sub_24F7CC714(__dst);
      sub_24F77A91C((uint64_t)__dst, (uint64_t)v29, &qword_26B1F7340);
      unint64_t v5 = v4;
    }
    else
    {
      if (v5 >= *(void *)(a1 + 16)) {
        goto LABEL_23;
      }
      memcpy(__dst, (const void *)(v23 + 232 * v5), 0xE2uLL);
      memcpy(v29, (const void *)(v23 + 232 * v5++), 0xE2uLL);
      nullsub_1(v29);
      sub_24F7CC600((uint64_t)__dst);
    }
    sub_24F77A91C((uint64_t)v29, (uint64_t)v27, &qword_26B1F7340);
    sub_24F77A91C((uint64_t)v27, (uint64_t)__dst, &qword_26B1F7340);
    if (sub_24F77A988((uint64_t)__dst) == 1)
    {
      swift_bridgeObjectRelease_n();
      return;
    }
    uint64_t v6 = v29[0];
    uint64_t v7 = v29[1];
    memcpy(v26, &v29[2], 0xD2uLL);
    unint64_t v8 = (void *)*a3;
    unint64_t v10 = sub_24F782950();
    uint64_t v11 = v8[2];
    BOOL v12 = (v9 & 1) == 0;
    if (__OFADD__(v11, v12))
    {
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      sub_24F8CFEA0();
      __break(1u);
      goto LABEL_25;
    }
    char v13 = v9;
    if (v8[3] < v11 + v12) {
      break;
    }
    if (a2)
    {
      if (v9) {
        goto LABEL_17;
      }
    }
    else
    {
      sub_24F781274(&qword_26B1F5858);
      sub_24F8CF990();
      if (v13) {
        goto LABEL_17;
      }
    }
LABEL_14:
    BOOL v16 = (void *)*a3;
    *(void *)(*a3 + 8 * (v10 >> 6) + 64) |= 1 << v10;
    char v17 = (void *)(v16[6] + 16 * v10);
    *char v17 = v6;
    v17[1] = v7;
    memcpy((void *)(v16[7] + 216 * v10), v26, 0xD2uLL);
    uint64_t v18 = v16[2];
    BOOL v19 = __OFADD__(v18, 1);
    uint64_t v20 = v18 + 1;
    if (v19) {
      goto LABEL_22;
    }
    void v16[2] = v20;
    a2 = 1;
  }
  sub_24F8B5CB4();
  unint64_t v14 = sub_24F782950();
  if ((v13 & 1) != (v15 & 1)) {
    goto LABEL_24;
  }
  unint64_t v10 = v14;
  if ((v13 & 1) == 0) {
    goto LABEL_14;
  }
LABEL_17:
  uint64_t v21 = (void *)swift_allocError();
  swift_willThrow();
  id v30 = v21;
  id v22 = v21;
  sub_24F781274(&qword_26B1F7040);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    sub_24F7AE180((uint64_t)v26);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    return;
  }
LABEL_25:
  sub_24F8CF7D0();
  sub_24F8CEEB0();
  sub_24F8CF920();
  sub_24F8CEEB0();
  sub_24F8CF9D0();
  __break(1u);
}

uint64_t sub_24F7CC5C0(void *a1, void *a2)
{
  return sub_24F88CB90(a1, a2, *(uint64_t (**)(void, void))(v2 + 16));
}

uint64_t sub_24F7CC5E0(uint64_t a1, uint64_t a2)
{
  return sub_24F7A6334(a1, a2, *(void *)(v2 + 16), v2 + 24);
}

uint64_t sub_24F7CC600(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 104);
  uint64_t v9 = *(void *)(a1 + 176);
  uint64_t v10 = *(void *)(a1 + 192);
  char v6 = *(unsigned char *)(a1 + 56);
  swift_bridgeObjectRetain();
  sub_24F799140(v2, v3, v4, v5, v6);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_24F78C440(v8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_24F78C440(v9);
  sub_24F78C440(v10);
  return a1;
}

void sub_24F7CC714(void *a1)
{
}

uint64_t sub_24F7CC71C(uint64_t a1)
{
  uint64_t v17 = *(void *)(a1 + 32);
  uint64_t v18 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v16 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v5 = *(void *)(a1 + 72);
  uint64_t v6 = *(void *)(a1 + 80);
  long long v14 = *(_OWORD *)(a1 + 104);
  long long v15 = *(_OWORD *)(a1 + 88);
  long long v12 = *(_OWORD *)(a1 + 136);
  long long v13 = *(_OWORD *)(a1 + 120);
  long long v11 = *(_OWORD *)(a1 + 152);
  uint64_t v7 = *(void *)(a1 + 168);
  uint64_t v8 = *(void *)(a1 + 176);
  __int16 v9 = *(_WORD *)(a1 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_24F7958C8(v18, v17, v16, v2, v3, v4, v5, v6, v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v11, *((uint64_t *)&v11 + 1), v7,
    v8,
    v9);
  return a1;
}

void sub_24F7CC808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_24F76B854();
  sub_24F77EDB0();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v12 = sub_24F774654();
  sub_24F78C440(v12);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_24F78C440(a10);
  sub_24F78C440(a12);
  sub_24F775B3C();
}

uint64_t sub_24F7CC8B4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (v0[8]) {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0[17]) {
    swift_release();
  }
  if (v0[19]) {
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t sub_24F7CC95C(void *a1, void *a2)
{
  return sub_24F7CC5C0(a1, a2);
}

uint64_t sub_24F7CC97C(uint64_t a1, uint64_t a2)
{
  return sub_24F7CC5E0(a1, a2);
}

uint64_t sub_24F7CC994()
{
  return v0;
}

void *sub_24F7CC9CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  return Table.all()(&a32);
}

uint64_t sub_24F7CC9F0(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  return sub_24F7AD1E4((uint64_t)va);
}

uint64_t sub_24F7CCA14(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_24F7CCA28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t sub_24F7CCA50()
{
  return type metadata accessor for QueryInterfaceRequest();
}

uint64_t sub_24F7CCA68()
{
  return v0;
}

uint64_t sub_24F7CCA88()
{
  return 0;
}

uint64_t sub_24F7CCA9C()
{
  return swift_unexpectedError();
}

void sub_24F7CCAD0(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v2)
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    sub_24F77C4AC();
    if (v2 < 0)
    {
      __break(1u);
      return;
    }
    uint64_t v3 = 0;
    while (v2 != v3)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v4 = MEMORY[0x253364060](v3, a1);
      }
      else
      {
        uint64_t v4 = *(void *)(a1 + 8 * v3 + 32);
        swift_retain();
      }
      uint64_t v6 = *(void *)(v4 + 16);
      uint64_t v5 = *(void *)(v4 + 24);
      swift_bridgeObjectRetain();
      swift_release();
      unint64_t v7 = *(void *)(v9 + 16);
      if (v7 >= *(void *)(v9 + 24) >> 1) {
        sub_24F77C4AC();
      }
      ++v3;
      *(void *)(v9 + 16) = v7 + 1;
      uint64_t v8 = v9 + 16 * v7;
      *(void *)(v8 + 32) = v6;
      *(void *)(v8 + 40) = v5;
      if (v2 == v3) {
        return;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v2 = sub_24F8CF9E0();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_24F7CCC38@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (void *)sub_24F8CE810();
  NSURL.databaseValue.getter((uint64_t)&v4);

  long long v6 = v4;
  char v7 = v5;
  sub_24F7667B8((uint64_t)&v6);
  return sub_24F76F710((uint64_t)&v6, a1);
}

uint64_t sub_24F7CCC98()
{
  if (qword_26B1F5A50 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_26B1F5A48;
  uint64_t v1 = (void *)sub_24F8CE930();
  id v2 = objc_msgSend(v0, sel_stringFromDate_, v1);

  uint64_t v3 = sub_24F8CED80();
  uint64_t v5 = v4;

  v8[0] = v3;
  v8[1] = v5;
  char v9 = 2;
  uint64_t v6 = sub_24F7667B8((uint64_t)v8);
  return sub_24F77DE2C(v6);
}

uint64_t sub_24F7CCD58@<X0>(uint64_t a1@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v11 = sub_24F8CE9B0();
  LOWORD(v12) = v2;
  BYTE2(v12) = v3;
  BYTE3(v12) = v4;
  BYTE4(v12) = v5;
  BYTE5(v12) = v6;
  BYTE6(v12) = v7;
  HIBYTE(v12) = v8;
  uint64_t v11 = MEMORY[0x253363140](&v11, 16);
  uint64_t v12 = v9;
  char v13 = 3;
  sub_24F7667B8((uint64_t)&v11);
  return sub_24F76F710((uint64_t)&v11, a1);
}

uint64_t sub_24F7CCE58@<X0>(uint64_t a1@<X8>)
{
  DatabaseDateComponents.databaseValue.getter((uint64_t)&v3);
  long long v5 = v3;
  char v6 = v4;
  sub_24F7667B8((uint64_t)&v5);
  return sub_24F76F710((uint64_t)&v5, a1);
}

uint64_t sub_24F7CCEAC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  v7[0] = a1;
  v7[1] = a2;
  char v8 = 3;
  sub_24F7667B8((uint64_t)v7);
  sub_24F76F710((uint64_t)v7, (uint64_t)__src);
  memcpy(a3, __src, 0xA3uLL);
  return sub_24F78419C(a1, a2);
}

uint64_t sub_24F7CCF24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v5[0] = a1;
  v5[1] = a2;
  char v6 = 2;
  sub_24F7667B8((uint64_t)v5);
  sub_24F76F710((uint64_t)v5, a3);
  return swift_bridgeObjectRetain();
}

uint64_t sub_24F7CCF78(char a1)
{
  v3[0] = a1 & 1;
  v3[1] = 0;
  char v4 = 0;
  uint64_t v1 = sub_24F7667B8((uint64_t)v3);
  return sub_24F77DE2C(v1);
}

uint64_t sub_24F7CCFB8(double a1)
{
  *(double *)long long v3 = a1;
  v3[1] = 0;
  char v4 = 1;
  uint64_t v1 = sub_24F7667B8((uint64_t)v3);
  return sub_24F77DE2C(v1);
}

uint64_t sub_24F7CCFFC(float a1)
{
  v3[0] = a1;
  v3[1] = 0.0;
  char v4 = 1;
  uint64_t v1 = sub_24F7667B8((uint64_t)v3);
  return sub_24F77DE2C(v1);
}

uint64_t sub_24F7CD048@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  __int16 v4 = a3;
  __int16 v5 = a2;
  int v6 = a1;
  uint64_t v26 = a4;
  unint64_t v7 = HIDWORD(a1);
  unint64_t v8 = HIWORD(a1);
  unint64_t v9 = a2 >> 16;
  unint64_t v10 = HIDWORD(a2);
  unint64_t v24 = HIWORD(a2);
  unsigned int v25 = HIWORD(a3);
  uint64_t v11 = sub_24F8CE9F0();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v15 = objc_allocWithZone(MEMORY[0x263F087B0]);
  LODWORD(v27) = v6;
  WORD2(v27) = v7;
  HIWORD(v27) = v8;
  LOWORD(v28) = v5;
  WORD1(v28) = v9;
  WORD2(v28) = v10;
  HIWORD(v28) = v24;
  __int16 v29 = v4;
  __int16 v30 = v25;
  id v16 = objc_msgSend(v15, sel_initWithDecimal_, &v27);
  sub_24F8CE9D0();
  uint64_t v17 = (void *)sub_24F8CE9E0();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  id v18 = objc_msgSend(v16, sel_descriptionWithLocale_, v17);

  uint64_t v19 = sub_24F8CED80();
  uint64_t v21 = v20;

  uint64_t v27 = v19;
  uint64_t v28 = v21;
  LOBYTE(v29) = 2;
  sub_24F7667B8((uint64_t)&v27);
  return sub_24F76F710((uint64_t)&v27, v26);
}

uint64_t sub_24F7CD240(char a1)
{
  v3[0] = a1;
  v3[1] = 0;
  char v4 = 0;
  uint64_t v1 = sub_24F7667B8((uint64_t)v3);
  return sub_24F77DE2C(v1);
}

uint64_t sub_24F7CD280(__int16 a1)
{
  v3[0] = a1;
  v3[1] = 0;
  char v4 = 0;
  uint64_t v1 = sub_24F7667B8((uint64_t)v3);
  return sub_24F77DE2C(v1);
}

uint64_t sub_24F7CD2C0(int a1)
{
  v3[0] = a1;
  v3[1] = 0;
  char v4 = 0;
  uint64_t v1 = sub_24F7667B8((uint64_t)v3);
  return sub_24F77DE2C(v1);
}

uint64_t sub_24F7CD300(uint64_t a1)
{
  v3[0] = a1;
  v3[1] = 0;
  char v4 = 0;
  uint64_t v1 = sub_24F7667B8((uint64_t)v3);
  return sub_24F77DE2C(v1);
}

uint64_t sub_24F7CD33C(unsigned __int8 a1)
{
  v3[0] = a1;
  v3[1] = 0;
  char v4 = 0;
  uint64_t v1 = sub_24F7667B8((uint64_t)v3);
  return sub_24F77DE2C(v1);
}

uint64_t sub_24F7CD37C(unsigned __int16 a1)
{
  v3[0] = a1;
  v3[1] = 0;
  char v4 = 0;
  uint64_t v1 = sub_24F7667B8((uint64_t)v3);
  return sub_24F77DE2C(v1);
}

uint64_t sub_24F7CD3BC(unsigned int a1)
{
  v3[0] = a1;
  v3[1] = 0;
  char v4 = 0;
  uint64_t v1 = sub_24F7667B8((uint64_t)v3);
  return sub_24F77DE2C(v1);
}

uint64_t sub_24F7CD3FC(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v2[0] = result;
    v2[1] = 0;
    char v3 = 0;
    uint64_t v1 = sub_24F7667B8((uint64_t)v2);
    return sub_24F77DE2C(v1);
  }
  return result;
}

BOOL static FTS5.Diacritics.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t FTS5.Diacritics.hash(into:)()
{
  return sub_24F8CFF40();
}

uint64_t FTS5.Diacritics.hashValue.getter()
{
  return sub_24F8CFF80();
}

GRDBInternal::FTS5 __swiftcall FTS5.init()()
{
  sub_24F77CDC0(v0);
  result.moduleName._object = v2;
  result.moduleName._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t sub_24F7CD4E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Configuration();
  __int16 v5 = (int *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(_WORD *)unint64_t v7 = 1;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = 0;
  *(_DWORD *)(v7 + 23) = 0;
  *((void *)v7 + 4) = MEMORY[0x263F8EE78];
  *((_WORD *)v7 + 20) = 0;
  v7[64] = 2;
  *((void *)v7 + 9) = 0;
  *((void *)v7 + 10) = 0;
  v7[88] = -1;
  *((void *)v7 + 12) = 5;
  *((void *)v7 + 6) = 0;
  *((void *)v7 + 7) = 0;
  sub_24F8CEBF0();
  *(void *)&v7[v5[19]] = 0;
  *(void *)&v7[v5[20]] = 0;
  v7[v5[21]] = 1;
  v7[v5[22]] = 0;
  unint64_t v8 = &v7[v5[23]];
  *unint64_t v8 = 0;
  v8[1] = 0;
  unint64_t v9 = &v7[v5[24]];
  *unint64_t v9 = 0;
  v9[1] = 0;
  unint64_t v10 = &v7[v5[25]];
  type metadata accessor for DatabaseQueue();
  *unint64_t v10 = 0;
  v10[1] = 0;
  swift_initStackObject();
  DatabaseQueue.init(configuration:)((uint64_t)v7);
  uint64_t v14 = a1;
  uint64_t v15 = a2;
  uint64_t v11 = sub_24F856764();
  swift_release();
  return v11;
}

uint64_t sub_24F7CD65C@<X0>(uint64_t a1@<X1>, unint64_t a2@<X2>, void *a3@<X8>)
{
  static FTS5TokenizerDescriptor.ascii(separators:tokenCharacters:)(MEMORY[0x263F8EE88], MEMORY[0x263F8EE88], &v23);
  uint64_t v22 = v23;
  Database.makeTokenizer(_:)(&v22);
  uint64_t v8 = v7;
  uint64_t result = swift_bridgeObjectRelease();
  if (!v3)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v11 = FTS5Tokenizer.tokenize(query:)(a1, a2, ObjectType, v8);
    swift_unknownObjectRelease();
    uint64_t v12 = *(void *)(v11 + 16);
    if (v12)
    {
      uint64_t v21 = a3;
      swift_bridgeObjectRetain();
      uint64_t v13 = (unsigned char *)(v11 + 48);
      uint64_t v14 = MEMORY[0x263F8EE78];
      do
      {
        if ((*v13 & 1) == 0)
        {
          uint64_t v16 = *((void *)v13 - 2);
          uint64_t v15 = *((void *)v13 - 1);
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_24F787184();
            uint64_t v14 = v19;
          }
          unint64_t v17 = *(void *)(v14 + 16);
          if (v17 >= *(void *)(v14 + 24) >> 1)
          {
            sub_24F787184();
            uint64_t v14 = v20;
          }
          *(void *)(v14 + 16) = v17 + 1;
          uint64_t v18 = v14 + 16 * v17;
          *(void *)(v18 + 32) = v16;
          *(void *)(v18 + 40) = v15;
        }
        v13 += 24;
        --v12;
      }
      while (v12);
      swift_bridgeObjectRelease();
      a3 = v21;
    }
    else
    {
      uint64_t v14 = MEMORY[0x263F8EE78];
    }
    uint64_t result = swift_bridgeObjectRelease();
    *a3 = v14;
  }
  return result;
}

uint64_t FTS5.moduleName.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

double FTS5.makeTableDefinition(configuration:)(char *a1)
{
  char v1 = *a1;
  type metadata accessor for FTS5TableDefinition();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 24) = MEMORY[0x263F8EE78];
  double result = 0.0;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(unsigned char *)(v2 + 64) = 0;
  *(void *)(v2 + 80) = 0;
  *(void *)(v2 + 88) = 0;
  *(void *)(v2 + 72) = 0;
  *(unsigned char *)(v2 + 96) = 1;
  *(void *)(v2 + 104) = 0;
  *(void *)(v2 + 112) = 0;
  *(unsigned char *)(v2 + 16) = v1;
  return result;
}

uint64_t type metadata accessor for FTS5TableDefinition()
{
  return self;
}

uint64_t FTS5.moduleArguments(for:in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (uint64_t *)(a1 + 24);
  sub_24F773614();
  uint64_t v179 = a1;
  uint64_t v7 = *(void *)(a1 + 24);
  if (!((unint64_t)v7 >> 62))
  {
    if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_3;
    }
LABEL_104:
    LODWORD(v165) = 0;
    uint64_t v163 = 100;
    sub_24F8CF9D0();
    __break(1u);
    goto LABEL_105;
  }
  if (v7 < 0) {
    uint64_t v2 = v7;
  }
  else {
    uint64_t v2 = v7 & 0xFFFFFFFFFFFFFF8;
  }
  swift_bridgeObjectRetain();
  uint64_t v150 = sub_24F8CF9E0();
  swift_bridgeObjectRelease();
  if (!v150) {
    goto LABEL_104;
  }
LABEL_3:
  uint64_t v3 = *v6;
  uint64_t v178 = a2;
  if (!((unint64_t)*v6 >> 62))
  {
    uint64_t v8 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    goto LABEL_5;
  }
LABEL_105:
  if (v3 < 0) {
    uint64_t v2 = v3;
  }
  else {
    uint64_t v2 = v3 & 0xFFFFFFFFFFFFFF8;
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = sub_24F8CF9E0();
LABEL_5:
  uint64_t v9 = MEMORY[0x263F8EE78];
  if (v8)
  {
    if (v8 < 1)
    {
      __break(1u);
LABEL_110:
      swift_once();
      goto LABEL_21;
    }
    for (uint64_t i = 0; i != v8; ++i)
    {
      if ((v3 & 0xC000000000000001) != 0)
      {
        uint64_t v11 = MEMORY[0x253364060](i, v3);
      }
      else
      {
        uint64_t v11 = *(void *)(v3 + 8 * i + 32);
        swift_retain();
      }
      if (*(unsigned char *)(v11 + 32) == 1)
      {
        uint64_t v13 = *(void *)(v11 + 16);
        uint64_t v12 = *(void *)(v11 + 24);
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v14 = *(void *)(v11 + 24);
        *(void *)uint64_t v209 = *(void *)(v11 + 16);
        uint64_t v210 = v14;
        swift_bridgeObjectRetain();
        sub_24F8CEEB0();
        uint64_t v13 = *(void *)v209;
        uint64_t v12 = v210;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_24F780BC8();
        sub_24F787184();
        uint64_t v9 = v18;
      }
      unint64_t v15 = *(void *)(v9 + 16);
      uint64_t v16 = v9;
      if (v15 >= *(void *)(v9 + 24) >> 1)
      {
        sub_24F787184();
        uint64_t v16 = v19;
      }
      *(void *)(v16 + 16) = v15 + 1;
      uint64_t v9 = v16;
      uint64_t v17 = v16 + 16 * v15;
      *(void *)(v17 + 32) = v13;
      *(void *)(v17 + 40) = v12;
      swift_release();
    }
  }
  swift_bridgeObjectRelease();
  sub_24F773614();
  if (!*(void *)(v179 + 72)) {
    goto LABEL_29;
  }
  uint64_t v8 = v9;
  __src[0] = *(void *)(v179 + 72);
  swift_bridgeObjectRetain();
  sub_24F781274(&qword_26B1F7F48);
  sub_24F7871AC();
  uint64_t v20 = sub_24F77362C();
  uint64_t v22 = v21;
  swift_bridgeObjectRelease();
  uint64_t v206 = v20;
  uint64_t v207 = v22;
  LOBYTE(v208) = 2;
  sub_24F7667B8((uint64_t)&v206);
  sub_24F785840();
  uint64_t v23 = qword_26B1F6F38;
  uint64_t v6 = (uint64_t *)v178;
  swift_retain();
  if (v23 != -1) {
    goto LABEL_110;
  }
LABEL_21:
  sub_24F7D0A78();
  sub_24F778B08();
  type metadata accessor for SQLGenerationContext();
  sub_24F7772B4();
  unint64_t v24 = sub_24F782444((uint64_t)v6);
  sub_24F782E98((uint64_t)v24, v25, v26, v27, v28, v29, v30, v31, v163, v165, v167, v169, v170, v173, v175, v178, v179, *(uint64_t *)__dst, *(uint64_t *)&__dst[8],
    *(uint64_t *)&__dst[16],
    *(uint64_t *)&__dst[24],
    *(uint64_t *)&__dst[32],
    *(uint64_t *)&__dst[40],
    *(uint64_t *)&__dst[48],
    *(uint64_t *)&__dst[56],
    *(uint64_t *)&__dst[64],
    *(uint64_t *)&__dst[72],
    *(uint64_t *)&__dst[80],
    *(uint64_t *)&__dst[88],
    *(uint64_t *)&__dst[96],
    *(uint64_t *)&__dst[104],
    *(uint64_t *)&__dst[112],
    *(uint64_t *)&__dst[120],
    *(uint64_t *)&__dst[128],
    *(uint64_t *)&__dst[136],
    *(uint64_t *)&__dst[144],
    *(uint64_t *)&__dst[152],
    *(uint64_t *)&__dst[160],
    v181,
    v182,
    v183,
    v184,
    v185,
    v186,
    v187,
    v188,
    v189,
    v190,
    v191,
    v192,
    v193,
    v194,
    v195,
    v196,
    v197,
    v198,
    v199,
    v200,
    v201,
    v202,
    v203,
    v204,
    __src[0]);
  uint64_t v2 = v211;
  sub_24F76D734();
  if (v2)
  {
LABEL_22:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();
  sub_24F7806DC();
  swift_bridgeObjectRelease();
  uint64_t v33 = __src[0];
  uint64_t v34 = __src[1];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v211 = 0;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_24F780BC8();
    sub_24F787184();
    uint64_t v8 = v151;
  }
  uint64_t v36 = *(void *)(v8 + 16);
  sub_24F7813D0();
  if (v38)
  {
    sub_24F772244(v37);
    sub_24F787184();
    uint64_t v8 = v152;
  }
  *(void *)(v8 + 16) = __src;
  uint64_t v39 = v8 + 16 * v36;
  *(void *)(v39 + 32) = v33;
  *(void *)(v39 + 40) = v34;
  uint64_t v9 = v8;
LABEL_29:
  uint64_t v41 = *(void *)(v179 + 32);
  uint64_t v40 = *(void *)(v179 + 40);
  uint64_t v42 = *(void *)(v179 + 48);
  uint64_t v43 = *(void *)(v179 + 56);
  uint64_t v44 = v211;
  if (*(unsigned char *)(v179 + 64) != 1)
  {
    if (v40)
    {
      uint64_t v206 = *(void *)(v179 + 32);
      uint64_t v207 = v40;
      LOBYTE(v208) = 2;
      sub_24F7667B8((uint64_t)&v206);
      sub_24F785840();
      swift_retain();
      uint64_t v60 = sub_24F77BFC8();
      sub_24F7CFD1C(v60, v61, v42, v43, 0);
      if (qword_26B1F6F38 != -1) {
        swift_once();
      }
      sub_24F7D0A78();
      sub_24F778B08();
      sub_24F781904();
      sub_24F7772B4();
      uint64_t v62 = sub_24F77FC18(v178);
      sub_24F782E98((uint64_t)v62, v63, v64, v65, v66, v67, v68, v69, v163, v165, v167, v169, v170, v42, v9, v178, v179, *(uint64_t *)__dst, *(uint64_t *)&__dst[8],
        *(uint64_t *)&__dst[16],
        *(uint64_t *)&__dst[24],
        *(uint64_t *)&__dst[32],
        *(uint64_t *)&__dst[40],
        *(uint64_t *)&__dst[48],
        *(uint64_t *)&__dst[56],
        *(uint64_t *)&__dst[64],
        *(uint64_t *)&__dst[72],
        *(uint64_t *)&__dst[80],
        *(uint64_t *)&__dst[88],
        *(uint64_t *)&__dst[96],
        *(uint64_t *)&__dst[104],
        *(uint64_t *)&__dst[112],
        *(uint64_t *)&__dst[120],
        *(uint64_t *)&__dst[128],
        *(uint64_t *)&__dst[136],
        *(uint64_t *)&__dst[144],
        *(uint64_t *)&__dst[152],
        *(uint64_t *)&__dst[160],
        v181,
        v182,
        v183,
        v184,
        v185,
        v186,
        v187,
        v188,
        v189,
        v190,
        v191,
        v192,
        v193,
        v194,
        v195,
        v196,
        v197,
        v198,
        v199,
        v200,
        v201,
        v202,
        v203,
        v204,
        __src[0]);
      sub_24F782A58();
      if (v2)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        return swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_release();
      sub_24F7806DC();
      swift_bridgeObjectRelease();
      uint64_t v9 = __src[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_24F77EE48();
        uint64_t v175 = v155;
      }
      uint64_t v87 = v178;
      sub_24F7813D0();
      if (v38)
      {
        sub_24F77F398();
        uint64_t v175 = v156;
      }
      sub_24F770F74();
      uint64_t v44 = 0;
      uint64_t v42 = v173;
      if (!v43) {
        goto LABEL_55;
      }
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v87 = v178;
      if (!v43)
      {
LABEL_55:
        uint64_t v211 = v44;
LABEL_63:
        unint64_t v108 = &unk_26B1F6000;
        goto LABEL_64;
      }
    }
    uint64_t v88 = v9;
    uint64_t v206 = v42;
    uint64_t v207 = v43;
    LOBYTE(v208) = 2;
    sub_24F7667B8((uint64_t)&v206);
    sub_24F785840();
    uint64_t v89 = qword_26B1F6F38;
    swift_retain();
    if (v89 != -1) {
      swift_once();
    }
    sub_24F7D0A78();
    sub_24F778B08();
    sub_24F781904();
    sub_24F7772B4();
    uint64_t v90 = sub_24F77FC18(v87);
    sub_24F782E98((uint64_t)v90, v91, v92, v93, v94, v95, v96, v97, v163, v165, v167, v169, v170, v173, v175, v178, v179, *(uint64_t *)__dst, *(uint64_t *)&__dst[8],
      *(uint64_t *)&__dst[16],
      *(uint64_t *)&__dst[24],
      *(uint64_t *)&__dst[32],
      *(uint64_t *)&__dst[40],
      *(uint64_t *)&__dst[48],
      *(uint64_t *)&__dst[56],
      *(uint64_t *)&__dst[64],
      *(uint64_t *)&__dst[72],
      *(uint64_t *)&__dst[80],
      *(uint64_t *)&__dst[88],
      *(uint64_t *)&__dst[96],
      *(uint64_t *)&__dst[104],
      *(uint64_t *)&__dst[112],
      *(uint64_t *)&__dst[120],
      *(uint64_t *)&__dst[128],
      *(uint64_t *)&__dst[136],
      *(uint64_t *)&__dst[144],
      *(uint64_t *)&__dst[152],
      *(uint64_t *)&__dst[160],
      v181,
      v182,
      v183,
      v184,
      v185,
      v186,
      v187,
      v188,
      v189,
      v190,
      v191,
      v192,
      v193,
      v194,
      v195,
      v196,
      v197,
      v198,
      v199,
      v200,
      v201,
      v202,
      v203,
      v204,
      __src[0]);
    sub_24F782A58();
    if (v89)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_release();
    }
    swift_bridgeObjectRelease();
    swift_release();
    __src[0] = 0;
    __src[1] = 0xE000000000000000;
    sub_24F8CF7D0();
    swift_bridgeObjectRelease();
    sub_24F77AE08();
    __src[0] = v98;
    __src[1] = v99;
    sub_24F8CEEB0();
    swift_bridgeObjectRelease();
    uint64_t v100 = __src[0];
    uint64_t v101 = __src[1];
    char v102 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v211 = 0;
    if ((v102 & 1) == 0)
    {
      sub_24F780BC8();
      sub_24F787184();
      uint64_t v88 = v161;
    }
    uint64_t v87 = v178;
    uint64_t v103 = *(void *)(v88 + 16);
    sub_24F7813D0();
    if (v38)
    {
      sub_24F772244(v104);
      sub_24F787184();
      uint64_t v88 = v162;
    }
    *(void *)(v88 + 16) = __src;
    uint64_t v105 = v88 + 16 * v103;
    *(void *)(v105 + 32) = v100;
    *(void *)(v105 + 40) = v101;
    uint64_t v9 = v88;
    goto LABEL_63;
  }
  uint64_t v181 = 0;
  uint64_t v182 = 0xE000000000000000;
  swift_bridgeObjectRetain();
  sub_24F8CEEB0();
  uint64_t v206 = v41;
  uint64_t v207 = v40;
  LOBYTE(v208) = 2;
  sub_24F7667B8((uint64_t)&v206);
  sub_24F785840();
  swift_retain();
  uint64_t v45 = sub_24F77BFC8();
  uint64_t v171 = v43;
  sub_24F7CFD1C(v45, v46, v42, v43, 1);
  if (qword_26B1F6F38 != -1) {
    swift_once();
  }
  sub_24F7D0A78();
  sub_24F778B08();
  uint64_t v47 = sub_24F781904();
  sub_24F7772B4();
  uint64_t v48 = sub_24F77FC18(v178);
  sub_24F782E98((uint64_t)v48, v49, v50, v51, v52, v53, v54, v55, v163, v165, v167, v169, v171, v42, v9, v178, v179, *(uint64_t *)__dst, *(uint64_t *)&__dst[8],
    *(uint64_t *)&__dst[16],
    *(uint64_t *)&__dst[24],
    *(uint64_t *)&__dst[32],
    *(uint64_t *)&__dst[40],
    *(uint64_t *)&__dst[48],
    *(uint64_t *)&__dst[56],
    *(uint64_t *)&__dst[64],
    *(uint64_t *)&__dst[72],
    *(uint64_t *)&__dst[80],
    *(uint64_t *)&__dst[88],
    *(uint64_t *)&__dst[96],
    *(uint64_t *)&__dst[104],
    *(uint64_t *)&__dst[112],
    *(uint64_t *)&__dst[120],
    *(uint64_t *)&__dst[128],
    *(uint64_t *)&__dst[136],
    *(uint64_t *)&__dst[144],
    *(uint64_t *)&__dst[152],
    *(uint64_t *)&__dst[160],
    v181,
    v182,
    v183,
    v184,
    v185,
    v186,
    v187,
    v188,
    v189,
    v190,
    v191,
    v192,
    v193,
    v194,
    v195,
    v196,
    v197,
    v198,
    v199,
    v200,
    v201,
    v202,
    v203,
    v204,
    __src[0]);
  sub_24F782A58();
  if (v2)
  {
    swift_release();
    uint64_t v56 = sub_24F77BFC8();
    sub_24F7CFD5C(v56, v57, v174, v172, 1);
    uint64_t v58 = sub_24F77BFC8();
    sub_24F7CFD5C(v58, v59, v174, v172, 1);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  swift_release();
  uint64_t v70 = sub_24F77BFC8();
  sub_24F7CFD5C(v70, v71, v174, v172, 1);
  sub_24F8CEEB0();
  swift_bridgeObjectRelease();
  uint64_t v73 = v181;
  uint64_t v72 = v182;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_24F77EE48();
    uint64_t v176 = v153;
  }
  unint64_t v74 = *(void *)(v176 + 16);
  if (v74 >= *(void *)(v176 + 24) >> 1)
  {
    sub_24F77F398();
    uint64_t v176 = v154;
  }
  *(void *)(v176 + 16) = v74 + 1;
  uint64_t v75 = v176 + 16 * v74;
  *(void *)(v75 + 32) = v73;
  *(void *)(v75 + 40) = v72;
  uint64_t v76 = sub_24F77BFC8();
  uint64_t v79 = Database.primaryKey(_:)(v76, v77, v78);
  uint64_t v211 = 0;
  sub_24F780488(v79, v80, v81, v82, v83, v84, v85, v86, v164, v166, v168, v47, v172, v174);
  uint64_t v107 = v202;
  uint64_t v106 = v203;
  if ((_BYTE)v204)
  {
    sub_24F790830(v202, v203, v204);
    uint64_t v9 = v176;
    uint64_t v87 = v178;
    goto LABEL_63;
  }
  uint64_t v181 = v202;
  uint64_t v182 = v203;
  LOBYTE(v183) = 2;
  sub_24F7667B8((uint64_t)&v181);
  sub_24F76F710((uint64_t)&v181, (uint64_t)__src);
  swift_retain();
  swift_retain();
  sub_24F778B08();
  sub_24F7772B4();
  sub_24F77FC18(v178);
  memcpy(__dst, __src, 0xA3uLL);
  uint64_t v147 = v211;
  sub_24F76D734();
  if (v147)
  {
    swift_release();
    sub_24F790830(v107, v106, 0);
    return swift_bridgeObjectRelease();
  }
  uint64_t v211 = 0;
  swift_release();
  sub_24F790830(v107, v106, 0);
  *(void *)__dst = 0;
  *(void *)&__dst[8] = 0xE000000000000000;
  sub_24F8CF7D0();
  swift_bridgeObjectRelease();
  sub_24F77AE08();
  *(void *)__dst = v148;
  *(void *)&__dst[8] = v149;
  sub_24F8CEEB0();
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)__dst;
  sub_24F7813D0();
  if (v38) {
    sub_24F77F398();
  }
  uint64_t v87 = v178;
  unint64_t v108 = (void *)&unk_26B1F6000;
  sub_24F770F74();
LABEL_64:
  sub_24F773614();
  if (*(void *)(v179 + 80))
  {
    uint64_t v177 = v9;
    swift_bridgeObjectRetain_n();
    sub_24F794C98();
    uint64_t v110 = v109;
    swift_bridgeObjectRelease();
    *(void *)uint64_t v209 = v110;
    uint64_t v111 = v211;
    sub_24F7CFDAC((uint64_t *)v209);
    if (v111)
    {
      uint64_t result = swift_release();
      __break(1u);
      return result;
    }
    uint64_t v112 = 0;
    swift_bridgeObjectRelease();
    uint64_t v113 = *(void *)v209;
    uint64_t v114 = *(void *)(*(void *)v209 + 16);
    if (v114)
    {
      uint64_t v211 = 0;
      *(void *)uint64_t v209 = MEMORY[0x263F8EE78];
      sub_24F77C4AC();
      uint64_t v115 = 0;
      uint64_t v116 = *(void *)v209;
      do
      {
        uint64_t v117 = v113;
        uint64_t v206 = *(void *)(v113 + 8 * v115 + 32);
        uint64_t v118 = sub_24F8CFAE0();
        uint64_t v120 = v119;
        *(void *)uint64_t v209 = v116;
        unint64_t v121 = *(void *)(v116 + 16);
        if (v121 >= *(void *)(v116 + 24) >> 1)
        {
          sub_24F77C4AC();
          uint64_t v116 = *(void *)v209;
        }
        ++v115;
        *(void *)(v116 + 16) = v121 + 1;
        uint64_t v122 = v116 + 16 * v121;
        *(void *)(v122 + 32) = v118;
        *(void *)(v122 + 40) = v120;
        uint64_t v113 = v117;
      }
      while (v114 != v115);
      swift_release();
      uint64_t v87 = v178;
      unint64_t v108 = (void *)&unk_26B1F6000;
      uint64_t v112 = v211;
    }
    else
    {
      swift_release();
      uint64_t v116 = MEMORY[0x263F8EE78];
    }
    __src[0] = v116;
    sub_24F781274(&qword_26B1F7F48);
    sub_24F7871AC();
    uint64_t v123 = sub_24F77362C();
    uint64_t v125 = v124;
    swift_bridgeObjectRelease();
    uint64_t v206 = v123;
    uint64_t v207 = v125;
    LOBYTE(v208) = 2;
    sub_24F7667B8((uint64_t)&v206);
    sub_24F785840();
    uint64_t v126 = v108[487];
    swift_retain();
    if (v126 != -1) {
      swift_once();
    }
    sub_24F7D0A78();
    sub_24F778B08();
    type metadata accessor for SQLGenerationContext();
    sub_24F7772B4();
    unint64_t v127 = sub_24F782444(v87);
    sub_24F782E98((uint64_t)v127, v128, v129, v130, v131, v132, v133, v134, v163, v165, v167, v169, v170, v173, v177, v178, v179, *(uint64_t *)__dst, *(uint64_t *)&__dst[8],
      *(uint64_t *)&__dst[16],
      *(uint64_t *)&__dst[24],
      *(uint64_t *)&__dst[32],
      *(uint64_t *)&__dst[40],
      *(uint64_t *)&__dst[48],
      *(uint64_t *)&__dst[56],
      *(uint64_t *)&__dst[64],
      *(uint64_t *)&__dst[72],
      *(uint64_t *)&__dst[80],
      *(uint64_t *)&__dst[88],
      *(uint64_t *)&__dst[96],
      *(uint64_t *)&__dst[104],
      *(uint64_t *)&__dst[112],
      *(uint64_t *)&__dst[120],
      *(uint64_t *)&__dst[128],
      *(uint64_t *)&__dst[136],
      *(uint64_t *)&__dst[144],
      *(uint64_t *)&__dst[152],
      *(uint64_t *)&__dst[160],
      v181,
      v182,
      v183,
      v184,
      v185,
      v186,
      v187,
      v188,
      v189,
      v190,
      v191,
      v192,
      v193,
      v194,
      v195,
      v196,
      v197,
      v198,
      v199,
      v200,
      v201,
      v202,
      v203,
      v204,
      __src[0]);
    sub_24F76D734();
    if (v112) {
      goto LABEL_22;
    }
    swift_bridgeObjectRelease();
    swift_release();
    sub_24F7806DC();
    swift_bridgeObjectRelease();
    uint64_t v9 = __src[0];
    char v135 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v211 = 0;
    if ((v135 & 1) == 0) {
      sub_24F77EE48();
    }
    sub_24F7813D0();
    if (v38) {
      sub_24F77F398();
    }
    sub_24F770F74();
  }
  sub_24F773614();
  if (*(unsigned char *)(v179 + 96))
  {
    uint64_t v136 = v9;
  }
  else
  {
    uint64_t v137 = *(void *)(v179 + 88);
    uint64_t v206 = 0x69536E6D756C6F63;
    uint64_t v207 = 0xEB000000003D657ALL;
    __src[0] = v137;
    sub_24F8CFAE0();
    uint64_t v138 = v9;
    sub_24F8CEEB0();
    swift_bridgeObjectRelease();
    uint64_t v139 = v206;
    uint64_t v140 = v207;
    uint64_t v136 = v138;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_24F77D740();
      uint64_t v136 = v159;
    }
    uint64_t v141 = *(void *)(v136 + 16);
    sub_24F7813D0();
    if (v38)
    {
      sub_24F7854DC();
      uint64_t v136 = v160;
    }
    *(void *)(v136 + 16) = &v206;
    uint64_t v142 = v136 + 16 * v141;
    *(void *)(v142 + 32) = v139;
    *(void *)(v142 + 40) = v140;
  }
  sub_24F773614();
  if (*(void *)(v179 + 112))
  {
    __src[0] = 0x3D6C6961746564;
    __src[1] = 0xE700000000000000;
    swift_bridgeObjectRetain();
    sub_24F8CEEB0();
    swift_bridgeObjectRelease();
    uint64_t v143 = __src[0];
    uint64_t v144 = __src[1];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_24F77D740();
      uint64_t v136 = v157;
    }
    uint64_t v145 = *(void *)(v136 + 16);
    sub_24F7813D0();
    if (v38)
    {
      sub_24F7854DC();
      uint64_t v136 = v158;
    }
    *(void *)(v136 + 16) = __src;
    uint64_t v146 = v136 + 16 * v145;
    *(void *)(v146 + 32) = v143;
    *(void *)(v146 + 40) = v144;
  }
  return v136;
}

uint64_t FTS5.database(_:didCreate:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a4 + 64) == 1)
  {
    uint64_t v5 = *(void *)(a4 + 32);
    uint64_t v6 = *(void *)(a4 + 40);
    swift_bridgeObjectRetain();
    Database.primaryKey(_:)(v5, v6, &v35);
    if (v4)
    {
      return sub_24F780BA4();
    }
    else
    {
      if (v37)
      {
        if (v37 == 1) {
          unsigned __int8 v8 = 1;
        }
        else {
          unsigned __int8 v8 = 2;
        }
        sub_24F790830(v35, v36, v8);
        uint64_t v31 = 0x6469776F72;
        unint64_t v32 = 0xE500000000000000;
      }
      else
      {
        uint64_t v31 = v35;
        unint64_t v32 = v36;
      }
      uint64_t v35 = 34;
      uint64_t v36 = 0xE100000000000000;
      sub_24F8CEEB0();
      sub_24F7738B4();
      uint64_t v35 = 34;
      uint64_t v36 = 0xE100000000000000;
      sub_24F8CEEB0();
      sub_24F7738B4();
      sub_24F780BA4();
      sub_24F773614();
      unint64_t v9 = swift_bridgeObjectRetain();
      sub_24F7CCAD0(v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_24F792AE8();
      sub_24F7922AC((uint64_t)&unk_270104BF8);
      swift_bridgeObjectRelease();
      sub_24F781274(&qword_26B1F7F48);
      sub_24F7871AC();
      sub_24F8CED30();
      swift_bridgeObjectRelease();
      sub_24F781274((uint64_t *)&unk_26B1F7C88);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_24F8DDBF0;
      *(void *)(inited + 32) = v31;
      *(void *)(inited + 40) = v32;
      v33[0] = inited;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_24F792AE8();
      uint64_t v11 = *(void *)(v33[0] + 16);
      uint64_t v12 = MEMORY[0x263F8EE78];
      if (v11)
      {
        uint64_t v34 = MEMORY[0x263F8EE78];
        sub_24F77C4AC();
        uint64_t v13 = v34;
        uint64_t v14 = v33[0] + 40;
        do
        {
          v33[0] = 779576686;
          v33[1] = 0xE400000000000000;
          swift_bridgeObjectRetain();
          sub_24F8CEEB0();
          sub_24F7738B4();
          sub_24F8CEEB0();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v34 = v13;
          unint64_t v15 = *(void *)(v13 + 16);
          if (v15 >= *(void *)(v13 + 24) >> 1)
          {
            sub_24F77C4AC();
            uint64_t v13 = v34;
          }
          v14 += 16;
          *(void *)(v13 + 16) = v15 + 1;
          uint64_t v16 = v13 + 16 * v15;
          *(void *)(v16 + 32) = 779576686;
          *(void *)(v16 + 40) = 0xE400000000000000;
          --v11;
        }
        while (v11);
        swift_bridgeObjectRelease();
        uint64_t v12 = MEMORY[0x263F8EE78];
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      sub_24F777630();
      swift_bridgeObjectRelease();
      uint64_t v17 = swift_initStackObject();
      *(_OWORD *)(v17 + 16) = xmmword_24F8DDBF0;
      *(void *)(v17 + 32) = v31;
      *(void *)(v17 + 40) = v32;
      v33[0] = v17;
      sub_24F792AE8();
      uint64_t v18 = *(void *)(v33[0] + 16);
      if (v18)
      {
        sub_24F77C4AC();
        uint64_t v19 = v33[0] + 40;
        uint64_t v20 = v12;
        do
        {
          v33[0] = 778333295;
          v33[1] = 0xE400000000000000;
          swift_bridgeObjectRetain();
          sub_24F8CEEB0();
          sub_24F7738B4();
          sub_24F8CEEB0();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v34 = v20;
          unint64_t v21 = *(void *)(v20 + 16);
          if (v21 >= *(void *)(v20 + 24) >> 1)
          {
            sub_24F77C4AC();
            uint64_t v20 = v34;
          }
          v19 += 16;
          *(void *)(v20 + 16) = v21 + 1;
          uint64_t v22 = v20 + 16 * v21;
          *(void *)(v22 + 32) = 778333295;
          *(void *)(v22 + 40) = 0xE400000000000000;
          --v18;
        }
        while (v18);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v20 = MEMORY[0x263F8EE78];
      }
      v33[0] = v20;
      sub_24F777630();
      swift_bridgeObjectRelease();
      sub_24F8CF7D0();
      sub_24F8CEEB0();
      sub_24F8CEEB0();
      sub_24F8CEEB0();
      sub_24F8CEEB0();
      sub_24F8CEEB0();
      sub_24F7738B4();
      swift_bridgeObjectRelease();
      sub_24F8CEEB0();
      swift_bridgeObjectRelease();
      sub_24F8CEEB0();
      sub_24F8CEEB0();
      sub_24F77BC5C();
      sub_24F8CEEB0();
      sub_24F77B894();
      sub_24F78030C();
      sub_24F8CEEB0();
      sub_24F781CDC();
      sub_24F8CEEB0();
      sub_24F77BC5C();
      sub_24F8CEEB0();
      sub_24F8CEEB0();
      sub_24F7D0A90();
      sub_24F8CEEB0();
      sub_24F8CEEB0();
      sub_24F785678();
      sub_24F8CEEB0();
      sub_24F7738B4();
      swift_bridgeObjectRelease();
      sub_24F8CEEB0();
      swift_bridgeObjectRelease();
      sub_24F8CEEB0();
      sub_24F8CEEB0();
      sub_24F8CEEB0();
      sub_24F77B894();
      sub_24F78030C();
      sub_24F77B894();
      sub_24F8CEEB0();
      sub_24F8CEEB0();
      sub_24F77BC5C();
      sub_24F8CEEB0();
      sub_24F8CEEB0();
      sub_24F8CEEB0();
      sub_24F8CEEB0();
      swift_bridgeObjectRelease();
      sub_24F7D0A90();
      sub_24F8CEEB0();
      sub_24F771DD0();
      sub_24F8CEEB0();
      sub_24F785678();
      sub_24F8CEEB0();
      sub_24F7738B4();
      swift_bridgeObjectRelease();
      sub_24F8CEEB0();
      swift_bridgeObjectRelease();
      sub_24F77BC5C();
      sub_24F8CEEB0();
      sub_24F8CEEB0();
      swift_bridgeObjectRelease();
      sub_24F8CEEB0();
      sub_24F77B894();
      sub_24F78030C();
      sub_24F77B894();
      sub_24F8CEEB0();
      sub_24F8CEEB0();
      sub_24F8CEEB0();
      sub_24F8CEEB0();
      swift_bridgeObjectRelease();
      sub_24F77BC5C();
      sub_24F8CEEB0();
      sub_24F77B894();
      sub_24F78030C();
      sub_24F8CEEB0();
      swift_bridgeObjectRelease();
      sub_24F781CDC();
      sub_24F8CEEB0();
      swift_bridgeObjectRelease();
      sub_24F8CEEB0();
      v23._uint64_t countAndFlagsBits = 0;
      uint64_t v24 = MEMORY[0x263F8EE80];
      uint64_t v25 = MEMORY[0x263F8EE78];
      v33[0] = MEMORY[0x263F8EE78];
      v33[1] = MEMORY[0x263F8EE80];
      v26.values._rawValue = v33;
      v23._object = (void *)0xE000000000000000;
      Database.execute(sql:arguments:)(v23, v26);
      swift_bridgeObjectRelease();
      if (!v27)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v33[0] = 0;
        v33[1] = 0xE000000000000000;
        sub_24F8CF7D0();
        swift_bridgeObjectRelease();
        strcpy((char *)v33, "INSERT INTO ");
        BYTE5(v33[1]) = 0;
        HIWORD(v33[1]) = -5120;
        sub_24F8CEEB0();
        sub_24F78030C();
        sub_24F8CEEB0();
        swift_bridgeObjectRelease();
        sub_24F77BC5C();
        sub_24F8CEEB0();
        v28._uint64_t countAndFlagsBits = v33[0];
        uint64_t v29 = (void *)v33[1];
        v33[0] = v25;
        v33[1] = v24;
        v30.values._rawValue = v33;
        v28._object = v29;
        Database.execute(sql:arguments:)(v28, v30);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_24F7CF11C(uint64_t a1)
{
  ppStmt[1] = *(sqlite3_stmt **)MEMORY[0x263EF8340];
  ppStmt[0] = 0;
  uint64_t v5 = 0;
  swift_beginAccess();
  if (sqlite3_prepare_v3(*(sqlite3 **)(a1 + 16), "SELECT fts5(?)", -1, 0, ppStmt, 0)
    || (sqlite3_bind_pointer(ppStmt[0], 1, &v5, "fts5_api_ptr", 0),
        uint64_t v2 = ppStmt[0],
        sqlite3_step(ppStmt[0]),
        (uint64_t v3 = v5) == 0))
  {
    uint64_t result = sub_24F8CF9D0();
    __break(1u);
  }
  else
  {
    sqlite3_finalize(v2);
    return v3;
  }
  return result;
}

void sub_24F7CF248()
{
}

void sub_24F7CF258(char *a1@<X0>, void *a2@<X8>)
{
  FTS5.makeTableDefinition(configuration:)(a1);
  *a2 = v3;
}

uint64_t sub_24F7CF280(uint64_t *a1, uint64_t a2)
{
  return FTS5.moduleArguments(for:in:)(*a1, a2);
}

uint64_t sub_24F7CF29C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return FTS5.database(_:didCreate:using:)(a1, a2, a3, *a4);
}

uint64_t FTS5TableDefinition.tokenizer.getter@<X0>(void *a1@<X8>)
{
  sub_24F77C600();
  *a1 = *(void *)(v1 + 72);
  return swift_bridgeObjectRetain();
}

uint64_t FTS5TableDefinition.tokenizer.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  sub_24F775B58();
  *(void *)(v1 + 72) = v2;
  return swift_bridgeObjectRelease();
}

uint64_t (*FTS5TableDefinition.tokenizer.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t FTS5TableDefinition.content.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FTS5TableDefinition.content.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(v2 + 48);
  uint64_t v3 = *(void *)(v2 + 56);
  int v5 = *(unsigned __int8 *)(v2 + 64);
  uint64_t v6 = *(void *)(v2 + 32);
  if (v5 == 1)
  {
    uint64_t v7 = *(void *)(v2 + 40);
    *(void *)(v2 + 32) = a1;
    *(void *)(v2 + 40) = a2;
    *(void *)(v2 + 48) = 0;
    *(void *)(v2 + 56) = 0;
    *(unsigned char *)(v2 + 64) = 0;
    uint64_t v8 = v6;
    uint64_t v9 = v7;
    uint64_t v10 = v4;
    uint64_t v11 = v3;
    char v12 = 1;
  }
  else
  {
    uint64_t v13 = *(void *)(v2 + 40);
    *(void *)(v2 + 32) = a1;
    *(void *)(v2 + 40) = a2;
    *(void *)(v2 + 48) = v4;
    *(void *)(v2 + 56) = v3;
    *(unsigned char *)(v2 + 64) = 0;
    swift_bridgeObjectRetain();
    uint64_t v8 = v6;
    uint64_t v9 = v13;
    uint64_t v10 = v4;
    uint64_t v11 = v3;
    char v12 = v5;
  }
  return sub_24F7CFD5C(v8, v9, v10, v11, v12);
}

uint64_t (*FTS5TableDefinition.content.modify(uint64_t *a1))(uint64_t a1, char a2)
{
  a1[2] = v1;
  *a1 = FTS5TableDefinition.content.getter();
  a1[1] = v3;
  return sub_24F7CF494;
}

uint64_t sub_24F7CF494(uint64_t a1, char a2)
{
  return sub_24F7CF630(a1, a2, (void (*)(uint64_t))FTS5TableDefinition.content.setter);
}

uint64_t FTS5TableDefinition.contentRowID.getter()
{
  if (*(unsigned char *)(v0 + 64)) {
    return 0;
  }
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_24F7CF4F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_24F76B870();
  return a5(v6);
}

uint64_t FTS5TableDefinition.contentRowID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 32);
  int v4 = *(unsigned __int8 *)(v2 + 64);
  uint64_t v5 = *(void *)(v2 + 40);
  uint64_t v6 = *(void *)(v2 + 48);
  if (v4 == 1)
  {
    uint64_t v7 = *(void *)(v2 + 56);
    *(void *)(v2 + 32) = 0;
    *(void *)(v2 + 40) = 0;
    *(void *)(v2 + 48) = a1;
    *(void *)(v2 + 56) = a2;
    *(unsigned char *)(v2 + 64) = 0;
    uint64_t v8 = v3;
    uint64_t v9 = v5;
    uint64_t v10 = v6;
    char v11 = 1;
  }
  else
  {
    uint64_t v12 = *(void *)(v2 + 56);
    *(void *)(v2 + 48) = a1;
    *(void *)(v2 + 56) = a2;
    *(unsigned char *)(v2 + 64) = 0;
    swift_bridgeObjectRetain();
    uint64_t v8 = v3;
    uint64_t v9 = v5;
    uint64_t v10 = v6;
    uint64_t v7 = v12;
    char v11 = v4;
  }
  return sub_24F7CFD5C(v8, v9, v10, v7, v11);
}

uint64_t (*FTS5TableDefinition.contentRowID.modify(uint64_t *a1))(uint64_t a1, char a2)
{
  a1[2] = v1;
  *a1 = FTS5TableDefinition.contentRowID.getter();
  a1[1] = v3;
  return sub_24F7CF618;
}

uint64_t sub_24F7CF618(uint64_t a1, char a2)
{
  return sub_24F7CF630(a1, a2, (void (*)(uint64_t))FTS5TableDefinition.contentRowID.setter);
}

uint64_t sub_24F7CF630(uint64_t a1, char a2, void (*a3)(uint64_t))
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = sub_24F76B870();
    a3(v4);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = sub_24F76B870();
    return ((uint64_t (*)(uint64_t))a3)(v6);
  }
}

uint64_t FTS5TableDefinition.prefixes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FTS5TableDefinition.prefixes.setter(uint64_t a1)
{
  sub_24F775B58();
  *(void *)(v1 + 80) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*FTS5TableDefinition.prefixes.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t FTS5TableDefinition.columnSize.getter()
{
  sub_24F77C600();
  return *(void *)(v0 + 88);
}

uint64_t FTS5TableDefinition.columnSize.setter(uint64_t a1, char a2)
{
  uint64_t result = sub_24F775B58();
  *(void *)(v2 + 88) = a1;
  *(unsigned char *)(v2 + 96) = a2 & 1;
  return result;
}

uint64_t (*FTS5TableDefinition.columnSize.modify())()
{
  return j__swift_endAccess;
}

uint64_t FTS5TableDefinition.detail.getter()
{
  sub_24F77C600();
  uint64_t v1 = *(void *)(v0 + 104);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FTS5TableDefinition.detail.setter(uint64_t a1, uint64_t a2)
{
  sub_24F775B58();
  *(void *)(v2 + 104) = a1;
  *(void *)(v2 + 112) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*FTS5TableDefinition.detail.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_24F7CF8D4(char *a1)
{
  char v2 = *a1;
  *(void *)(v1 + 24) = MEMORY[0x263F8EE78];
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(unsigned char *)(v1 + 64) = 0;
  *(void *)(v1 + 80) = 0;
  *(void *)(v1 + 88) = 0;
  *(void *)(v1 + 72) = 0;
  *(unsigned char *)(v1 + 96) = 1;
  *(void *)(v1 + 104) = 0;
  *(void *)(v1 + 112) = 0;
  *(unsigned char *)(v1 + 16) = v2;
  return v1;
}

uint64_t FTS5TableDefinition.column(_:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for FTS5ColumnDefinition();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  *(unsigned char *)(v5 + 32) = 1;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  uint64_t v6 = swift_retain();
  MEMORY[0x2533638D0](v6);
  sub_24F766F18(*(void *)((*(void *)(v2 + 24) & 0xFFFFFFFFFFFFFF8) + 0x10));
  sub_24F8CF140();
  sub_24F8CF0B0();
  swift_endAccess();
  return v5;
}

Swift::Void __swiftcall FTS5TableDefinition.synchronize(withTable:)(Swift::String withTable)
{
  object = withTable._object;
  uint64_t v3 = *(void *)(v1 + 32);
  withTable._object = *(void **)(v1 + 40);
  uint64_t v4 = *(void *)(v1 + 48);
  uint64_t v5 = *(void *)(v1 + 56);
  char v6 = *(unsigned char *)(v1 + 64);
  *(void *)(v1 + 32) = withTable._countAndFlagsBits;
  *(void *)(v1 + 40) = object;
  *(void *)(v1 + 48) = 0;
  *(void *)(v1 + 56) = 0;
  *(unsigned char *)(v1 + 64) = 1;
  sub_24F7CFD5C(v3, (uint64_t)withTable._object, v4, v5, v6);
  swift_bridgeObjectRetain();
}

uint64_t FTS5TableDefinition.deinit()
{
  swift_bridgeObjectRelease();
  sub_24F7CFD5C(*(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(unsigned char *)(v0 + 64));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t FTS5TableDefinition.__deallocating_deinit()
{
  FTS5TableDefinition.deinit();
  return MEMORY[0x270FA0228](v0, 120, 7);
}

uint64_t FTS5ColumnDefinition.notIndexed()()
{
  *(unsigned char *)(v0 + 32) = 0;
  return swift_retain();
}

uint64_t FTS5ColumnDefinition.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t FTS5ColumnDefinition.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0228](v0, 33, 7);
}

void static Column.rank.getter(void *a1@<X8>)
{
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Database.dropFTS5SynchronizationTriggers(forTable:)(Swift::String forTable)
{
  sub_24F8CF7D0();
  sub_24F77BC5C();
  sub_24F8CEEB0();
  sub_24F77B508();
  sub_24F8CEEB0();
  sub_24F8CEEB0();
  sub_24F7738B4();
  swift_bridgeObjectRelease();
  sub_24F8CEEB0();
  swift_bridgeObjectRelease();
  sub_24F77BC68();
  sub_24F77B508();
  sub_24F8CEEB0();
  sub_24F8CEEB0();
  sub_24F7738B4();
  swift_bridgeObjectRelease();
  sub_24F8CEEB0();
  swift_bridgeObjectRelease();
  sub_24F77BC68();
  sub_24F77B508();
  sub_24F771DD0();
  sub_24F8CEEB0();
  sub_24F8CEEB0();
  sub_24F7738B4();
  swift_bridgeObjectRelease();
  sub_24F8CEEB0();
  swift_bridgeObjectRelease();
  sub_24F8CEEB0();
  v1._uint64_t countAndFlagsBits = 0;
  v3[0] = MEMORY[0x263F8EE78];
  v3[1] = MEMORY[0x263F8EE80];
  v2.values._rawValue = v3;
  v1._object = (void *)0xE000000000000000;
  Database.execute(sql:arguments:)(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t sub_24F7CFD1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) == 0) {
    swift_bridgeObjectRetain();
  }
  return swift_bridgeObjectRetain();
}

uint64_t sub_24F7CFD5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result = swift_bridgeObjectRelease();
  if ((a5 & 1) == 0)
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_24F7CFDAC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_24F897578();
    uint64_t v2 = v3;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  uint64_t result = sub_24F7D0288(v6);
  *a1 = v2;
  return result;
}

uint64_t type metadata accessor for FTS5ColumnDefinition()
{
  return self;
}

unint64_t sub_24F7CFE40()
{
  unint64_t result = qword_269A2AE60;
  if (!qword_269A2AE60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269A2AE60);
  }
  return result;
}

uint64_t sub_24F7CFE8C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = FTS5TableDefinition.content.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_24F7CFEB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_24F7CF4F0(a1, a2, a3, a4, (uint64_t (*)(uint64_t))FTS5TableDefinition.content.setter);
}

uint64_t sub_24F7CFEE4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = FTS5TableDefinition.contentRowID.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_24F7CFF10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_24F7CF4F0(a1, a2, a3, a4, (uint64_t (*)(uint64_t))FTS5TableDefinition.contentRowID.setter);
}

void type metadata accessor for FTS5()
{
}

unsigned char *storeEnumTagSinglePayload for FTS5.Diacritics(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24F7D0014);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void type metadata accessor for FTS5.Diacritics()
{
}

uint64_t method lookup function for FTS5TableDefinition(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for FTS5TableDefinition);
}

uint64_t method lookup function for FTS5ColumnDefinition(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for FTS5ColumnDefinition);
}

uint64_t sub_24F7D0078(uint64_t a1)
{
  return sub_24F7CFD5C(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

uint64_t sub_24F7D008C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  sub_24F7CFD1C(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t sub_24F7D00F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  sub_24F7CFD1C(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  char v12 = *(unsigned char *)(a1 + 32);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  sub_24F7CFD5C(v8, v9, v10, v11, v12);
  return a1;
}

__n128 initializeWithTake for TableAlias.Impl(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_24F7D0178(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  char v8 = *(unsigned char *)(a1 + 32);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(unsigned char *)(a1 + 32) = v3;
  sub_24F7CFD5C(v4, v6, v5, v7, v8);
  return a1;
}

uint64_t sub_24F7D01C4(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(unsigned char *)(a1 + 33))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
      if (v3 <= 1) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_24F7D0204(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_24F7D024C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t sub_24F7D0254(uint64_t result, char a2)
{
  *(unsigned char *)(result + 32) = a2 & 1;
  return result;
}

void type metadata accessor for FTS5TableDefinition.ContentMode()
{
}

uint64_t sub_24F7D026C@<X0>(void *a1@<X8>)
{
  return sub_24F7CD65C(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_24F7D0288(uint64_t *a1)
{
  int v2 = a1;
  uint64_t v3 = a1[1];
  uint64_t result = sub_24F8CFAD0();
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_127;
    }
    if (v3) {
      return sub_24F7D088C(0, v3, 1, v2);
    }
    return result;
  }
  if (v3 < -1) {
    goto LABEL_126;
  }
  uint64_t v85 = result;
  uint64_t v86 = v3;
  if (v3 > 1)
  {
    uint64_t result = sub_24F8CF120();
    *(void *)(result + 16) = v3 / 2;
    uint64_t v84 = result;
    uint64_t v88 = (char *)(result + 32);
LABEL_10:
    uint64_t v6 = 0;
    uint64_t v7 = *v2;
    uint64_t v82 = v2;
    uint64_t v83 = *v2 - 8;
    uint64_t v8 = MEMORY[0x263F8EE78];
    uint64_t v87 = *v2;
    while (1)
    {
      uint64_t v9 = v6++;
      if (v6 < v3)
      {
        uint64_t v10 = *(void *)(v7 + 8 * v6);
        uint64_t v11 = *(void *)(v7 + 8 * v9);
        uint64_t v6 = v9 + 2;
        if (v9 + 2 < v3)
        {
          uint64_t v12 = v10;
          while (1)
          {
            uint64_t v13 = *(void *)(v7 + 8 * v6);
            if (v10 < v11 == v13 >= v12) {
              break;
            }
            ++v6;
            uint64_t v12 = v13;
            if (v6 >= v3)
            {
              uint64_t v6 = v3;
              break;
            }
          }
        }
        if (v10 < v11)
        {
          if (v6 < v9) {
            goto LABEL_128;
          }
          if (v9 < v6)
          {
            uint64_t v14 = v6 - 1;
            uint64_t v15 = v9;
            do
            {
              if (v15 != v14)
              {
                if (!v7) {
                  goto LABEL_133;
                }
                uint64_t v16 = *(void *)(v7 + 8 * v15);
                *(void *)(v7 + 8 * v15) = *(void *)(v7 + 8 * v14);
                *(void *)(v7 + 8 * v14) = v16;
              }
              BOOL v56 = ++v15 < v14--;
            }
            while (v56);
          }
        }
      }
      if (v6 < v3)
      {
        if (__OFSUB__(v6, v9)) {
          goto LABEL_125;
        }
        if (v6 - v9 < v85)
        {
          uint64_t v17 = v9 + v85;
          if (__OFADD__(v9, v85)) {
            goto LABEL_129;
          }
          if (v17 >= v3) {
            uint64_t v17 = v3;
          }
          if (v17 < v9)
          {
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
            return result;
          }
          if (v6 != v17)
          {
            uint64_t v18 = (uint64_t *)(v83 + 8 * v6);
            do
            {
              uint64_t v19 = *(void *)(v7 + 8 * v6);
              uint64_t v20 = v9;
              unint64_t v21 = v18;
              do
              {
                uint64_t v22 = *v21;
                if (v19 >= *v21) {
                  break;
                }
                if (!v7) {
                  goto LABEL_131;
                }
                uint64_t *v21 = v19;
                v21[1] = v22;
                --v21;
                ++v20;
              }
              while (v6 != v20);
              ++v6;
              ++v18;
            }
            while (v6 != v17);
            uint64_t v6 = v17;
          }
        }
      }
      if (v6 < v9) {
        goto LABEL_120;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_24F897440(0, *(void *)(v8 + 16) + 1, 1, (char *)v8);
        uint64_t v8 = result;
      }
      unint64_t v24 = *(void *)(v8 + 16);
      unint64_t v23 = *(void *)(v8 + 24);
      unint64_t v25 = v24 + 1;
      uint64_t v7 = v87;
      if (v24 >= v23 >> 1)
      {
        uint64_t result = (uint64_t)sub_24F897440((char *)(v23 > 1), v24 + 1, 1, (char *)v8);
        uint64_t v7 = v87;
        uint64_t v8 = result;
      }
      *(void *)(v8 + 16) = v25;
      uint64_t v26 = v8 + 32;
      uint64_t v27 = (uint64_t *)(v8 + 32 + 16 * v24);
      *uint64_t v27 = v9;
      v27[1] = v6;
      if (v24)
      {
        while (1)
        {
          unint64_t v28 = v25 - 1;
          if (v25 >= 4)
          {
            unint64_t v33 = v26 + 16 * v25;
            uint64_t v34 = *(void *)(v33 - 64);
            uint64_t v35 = *(void *)(v33 - 56);
            BOOL v39 = __OFSUB__(v35, v34);
            uint64_t v36 = v35 - v34;
            if (v39) {
              goto LABEL_109;
            }
            uint64_t v38 = *(void *)(v33 - 48);
            uint64_t v37 = *(void *)(v33 - 40);
            BOOL v39 = __OFSUB__(v37, v38);
            uint64_t v31 = v37 - v38;
            char v32 = v39;
            if (v39) {
              goto LABEL_110;
            }
            unint64_t v40 = v25 - 2;
            uint64_t v41 = (uint64_t *)(v26 + 16 * (v25 - 2));
            uint64_t v43 = *v41;
            uint64_t v42 = v41[1];
            BOOL v39 = __OFSUB__(v42, v43);
            uint64_t v44 = v42 - v43;
            if (v39) {
              goto LABEL_111;
            }
            BOOL v39 = __OFADD__(v31, v44);
            uint64_t v45 = v31 + v44;
            if (v39) {
              goto LABEL_113;
            }
            if (v45 >= v36)
            {
              uint64_t v63 = (uint64_t *)(v26 + 16 * v28);
              uint64_t v65 = *v63;
              uint64_t v64 = v63[1];
              BOOL v39 = __OFSUB__(v64, v65);
              uint64_t v66 = v64 - v65;
              if (v39) {
                goto LABEL_119;
              }
              BOOL v56 = v31 < v66;
              goto LABEL_77;
            }
          }
          else
          {
            if (v25 != 3)
            {
              uint64_t v57 = *(void *)(v8 + 32);
              uint64_t v58 = *(void *)(v8 + 40);
              BOOL v39 = __OFSUB__(v58, v57);
              uint64_t v50 = v58 - v57;
              char v51 = v39;
              goto LABEL_71;
            }
            uint64_t v30 = *(void *)(v8 + 32);
            uint64_t v29 = *(void *)(v8 + 40);
            BOOL v39 = __OFSUB__(v29, v30);
            uint64_t v31 = v29 - v30;
            char v32 = v39;
          }
          if (v32) {
            goto LABEL_112;
          }
          unint64_t v40 = v25 - 2;
          uint64_t v46 = (uint64_t *)(v26 + 16 * (v25 - 2));
          uint64_t v48 = *v46;
          uint64_t v47 = v46[1];
          BOOL v49 = __OFSUB__(v47, v48);
          uint64_t v50 = v47 - v48;
          char v51 = v49;
          if (v49) {
            goto LABEL_114;
          }
          uint64_t v52 = (uint64_t *)(v26 + 16 * v28);
          uint64_t v54 = *v52;
          uint64_t v53 = v52[1];
          BOOL v39 = __OFSUB__(v53, v54);
          uint64_t v55 = v53 - v54;
          if (v39) {
            goto LABEL_116;
          }
          if (__OFADD__(v50, v55)) {
            goto LABEL_118;
          }
          if (v50 + v55 >= v31)
          {
            BOOL v56 = v31 < v55;
LABEL_77:
            if (v56) {
              unint64_t v28 = v40;
            }
            goto LABEL_79;
          }
LABEL_71:
          if (v51) {
            goto LABEL_115;
          }
          uint64_t v59 = (uint64_t *)(v26 + 16 * v28);
          uint64_t v61 = *v59;
          uint64_t v60 = v59[1];
          BOOL v39 = __OFSUB__(v60, v61);
          uint64_t v62 = v60 - v61;
          if (v39) {
            goto LABEL_117;
          }
          if (v62 < v50) {
            goto LABEL_88;
          }
LABEL_79:
          unint64_t v67 = v28 - 1;
          if (v28 - 1 >= v25)
          {
            __break(1u);
LABEL_106:
            __break(1u);
LABEL_107:
            __break(1u);
LABEL_108:
            __break(1u);
LABEL_109:
            __break(1u);
LABEL_110:
            __break(1u);
LABEL_111:
            __break(1u);
LABEL_112:
            __break(1u);
LABEL_113:
            __break(1u);
LABEL_114:
            __break(1u);
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
            goto LABEL_130;
          }
          if (!v7) {
            goto LABEL_132;
          }
          uint64_t v68 = (uint64_t *)(v26 + 16 * v67);
          uint64_t v69 = *v68;
          uint64_t v70 = v26;
          uint64_t v71 = (void *)(v26 + 16 * v28);
          uint64_t v72 = v71[1];
          uint64_t result = sub_24F7D08E4((char *)(v7 + 8 * *v68), (char *)(v7 + 8 * *v71), v7 + 8 * v72, v88);
          if (v1)
          {
LABEL_90:
            swift_bridgeObjectRelease();
            *(void *)(v84 + 16) = 0;
            return swift_bridgeObjectRelease();
          }
          if (v72 < v69) {
            goto LABEL_106;
          }
          if (v28 > *(void *)(v8 + 16)) {
            goto LABEL_107;
          }
          *uint64_t v68 = v69;
          *(void *)(v70 + 16 * v67 + 8) = v72;
          unint64_t v73 = *(void *)(v8 + 16);
          if (v28 >= v73) {
            goto LABEL_108;
          }
          unint64_t v25 = v73 - 1;
          uint64_t result = (uint64_t)memmove(v71, v71 + 2, 16 * (v73 - 1 - v28));
          uint64_t v26 = v70;
          *(void *)(v8 + 16) = v73 - 1;
          uint64_t v7 = v87;
          if (v73 <= 2) {
            goto LABEL_88;
          }
        }
      }
      unint64_t v25 = 1;
LABEL_88:
      uint64_t v3 = v86;
      if (v6 >= v86)
      {
        uint64_t v5 = v84;
        int v2 = v82;
        goto LABEL_93;
      }
    }
  }
  uint64_t v5 = MEMORY[0x263F8EE78];
  uint64_t v88 = (char *)(MEMORY[0x263F8EE78] + 32);
  if (v3 == 1)
  {
    uint64_t v84 = MEMORY[0x263F8EE78];
    goto LABEL_10;
  }
  unint64_t v25 = *(void *)(MEMORY[0x263F8EE78] + 16);
  uint64_t v8 = MEMORY[0x263F8EE78];
LABEL_93:
  uint64_t v84 = v5;
  if (v25 >= 2)
  {
    uint64_t v74 = *v2;
    do
    {
      unint64_t v75 = v25 - 2;
      if (v25 < 2) {
        goto LABEL_121;
      }
      if (!v74) {
        goto LABEL_134;
      }
      uint64_t v76 = v8;
      uint64_t v77 = v8 + 32;
      uint64_t v78 = *(void *)(v8 + 32 + 16 * v75);
      uint64_t v79 = *(void *)(v8 + 32 + 16 * (v25 - 1) + 8);
      uint64_t result = sub_24F7D08E4((char *)(v74 + 8 * v78), (char *)(v74 + 8 * *(void *)(v77 + 16 * (v25 - 1))), v74 + 8 * v79, v88);
      if (v1) {
        goto LABEL_90;
      }
      if (v79 < v78) {
        goto LABEL_122;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_24F897538();
        uint64_t v76 = result;
      }
      if (v75 >= *(void *)(v76 + 16)) {
        goto LABEL_123;
      }
      uint64_t v80 = (void *)(v76 + 32 + 16 * v75);
      *uint64_t v80 = v78;
      v80[1] = v79;
      unint64_t v81 = *(void *)(v76 + 16);
      if (v25 > v81) {
        goto LABEL_124;
      }
      uint64_t result = (uint64_t)memmove((void *)(v76 + 32 + 16 * (v25 - 1)), (const void *)(v76 + 32 + 16 * v25), 16 * (v81 - v25));
      uint64_t v8 = v76;
      *(void *)(v76 + 16) = v81 - 1;
      unint64_t v25 = v81 - 1;
    }
    while (v81 > 2);
  }
  swift_bridgeObjectRelease();
  *(void *)(v84 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_24F7D088C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = *a4;
    uint64_t v5 = *a4 + 8 * a3 - 8;
    while (2)
    {
      uint64_t v6 = *(void *)(v4 + 8 * a3);
      uint64_t v7 = result;
      uint64_t v8 = (uint64_t *)v5;
      do
      {
        uint64_t v9 = *v8;
        if (v6 >= *v8) {
          break;
        }
        if (!v4)
        {
          __break(1u);
          return result;
        }
        *uint64_t v8 = v6;
        v8[1] = v9;
        --v8;
        ++v7;
      }
      while (a3 != v7);
      ++a3;
      v5 += 8;
      if (a3 != a2) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t sub_24F7D08E4(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  uint64_t v8 = a2 - a1;
  uint64_t v9 = (a2 - a1) / 8;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 8;
  if (v9 >= v11)
  {
    sub_24F8BED84(a2, (uint64_t)(a3 - (void)a2) / 8, a4);
    uint64_t v12 = &v4[8 * v11];
    if (v7 >= v6 || v10 < 8) {
      goto LABEL_39;
    }
    uint64_t v18 = (char *)(a3 - 8);
    while (1)
    {
      uint64_t v19 = v18 + 8;
      uint64_t v20 = *((void *)v6 - 1);
      if (*((void *)v12 - 1) >= v20)
      {
        BOOL v22 = v19 != v12 || v18 >= v12;
        uint64_t v20 = *((void *)v12 - 1);
        v12 -= 8;
        if (!v22) {
          goto LABEL_35;
        }
      }
      else
      {
        BOOL v21 = v19 != v6 || v18 >= v6;
        v6 -= 8;
        if (!v21) {
          goto LABEL_35;
        }
      }
      *(void *)uint64_t v18 = v20;
LABEL_35:
      v18 -= 8;
      if (v6 <= v7 || v12 <= v4) {
        goto LABEL_39;
      }
    }
  }
  sub_24F8BED84(a1, (a2 - a1) / 8, a4);
  uint64_t v12 = &v4[8 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 8)
  {
    while (1)
    {
      uint64_t v14 = *(void *)v6;
      if (*(void *)v6 < *(void *)v4) {
        break;
      }
      uint64_t v14 = *(void *)v4;
      BOOL v15 = v7 == v4;
      v4 += 8;
      if (!v15) {
        goto LABEL_11;
      }
LABEL_12:
      v7 += 8;
      if (v4 >= v12 || (unint64_t)v6 >= a3) {
        goto LABEL_17;
      }
    }
    BOOL v15 = v7 == v6;
    v6 += 8;
    if (v15) {
      goto LABEL_12;
    }
LABEL_11:
    *(void *)uint64_t v7 = v14;
    goto LABEL_12;
  }
LABEL_17:
  uint64_t v6 = v7;
LABEL_39:
  uint64_t v24 = (v12 - v4) / 8;
  if (v6 != v4 || v6 >= &v4[8 * v24]) {
    memmove(v6, v4, 8 * v24);
  }
  return 1;
}

uint64_t sub_24F7D0A78()
{
  return swift_retain();
}

void sub_24F7D0A90()
{
  *(void *)(v0 - 208) = 24415;
  *(void *)(v0 - 200) = 0xE200000000000000;
}

void *FetchRequest<>.fetchOne(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return static DatabaseValueConvertible<>.fetchOne<A>(_:_:)(a1, v5, AssociatedTypeWitness, a2, a4, a5, a3);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;

  sub_24F77C8D8();
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return static DatabaseValueConvertible.fetchOne<A>(_:_:)(v8, v5, AssociatedTypeWitness, v7, a5, v6);
}

uint64_t FetchRequest<>.fetchCursor(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_24F7D0B98(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t))static DatabaseValueConvertible<>.fetchCursor<A>(_:_:));
}

{
  return sub_24F88EC40(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t))static Optional<A>.fetchCursor<A>(_:_:));
}

uint64_t FetchRequest<>.fetchAll(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_24F7D0B98(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t))static DatabaseValueConvertible<>.fetchAll<A>(_:_:));
}

{
  return sub_24F88EC40(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t))static Optional<A>.fetchAll<A>(_:_:));
}

uint64_t sub_24F7D0B98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t))
{
  sub_24F7804AC();
  swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_24F778D90();
  return a6(v7);
}

void FetchRequest<>.fetchSet(_:)()
{
}

{
  sub_24F772DB4();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  sub_24F7D2CA0();
  static Optional<A>.fetchSet<A>(_:_:)();
}

{
  sub_24F77C8D8();
  swift_getAssociatedTypeWitness();
  sub_24F77B6D0();
  static DatabaseValueConvertible<>.fetchSet<A>(_:_:)();
}

{
  sub_24F7804AC();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  sub_24F77374C();
  static Optional<A>.fetchSet<A>(_:_:)();
}

uint64_t FetchRequest<>.fetchCursor(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_24F7D0CD8(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t))static Optional<A>.fetchCursor<A>(_:_:));
}

uint64_t FetchRequest<>.fetchAll(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_24F7D0CD8(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t))static Optional<A>.fetchAll<A>(_:_:));
}

uint64_t sub_24F7D0CD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t))
{
  sub_24F772DB4();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v8 = sub_24F7D2CA0();
  return a7(v8);
}

void *FetchRequest<>.fetchOne(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_24F7804AC();
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return static DatabaseValueConvertible<>.fetchOne<A>(_:_:)(v10, v6, AssociatedTypeWitness, v9, v7, a6, v8);
}

void static DatabaseValueConvertible<>.fetchOne(_:sql:arguments:adapter:)()
{
  sub_24F76FF94();
  uint64_t v37 = v0;
  uint64_t v39 = v1;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v8 = *v6;
  uint64_t v7 = v6[1];
  sub_24F7786CC(v9, (uint64_t)v46);
  sub_24F781274(&qword_26B1F7F50);
  uint64_t v10 = sub_24F77D79C();
  *(_OWORD *)(v10 + 16) = xmmword_24F8DDBF0;
  uint64_t v11 = v10 + 32;
  v48[0] = v5;
  v48[1] = v3;
  v48[2] = v8;
  v48[3] = v7;
  sub_24F7725D4(v48);
  uint64_t v12 = sub_24F76C344((uint64_t)v48, v11);
  sub_24F7D2D20(v12, v13, v14, v15, v16, v17, v18, v19, v37, v39);
  sub_24F772258();
  swift_bridgeObjectRetain();
  uint64_t v20 = swift_bridgeObjectRetain();
  uint64_t v22 = sub_24F777684(v20, v21);
  sub_24F770F88(v22, v23, v24, v25, v26, v27, v28, v29, v38, v40, v41, v42, v43, v44, v45);
  sub_24F774DA0((uint64_t)v46, &qword_26B1F7F10);
  sub_24F781274(&qword_26B1F7D38);
  sub_24F7D2950();
  uint64_t v30 = sub_24F773650();
  static DatabaseValueConvertible<>.fetchOne<A>(_:_:)(v30, v31, v32, v33, v34, v35, v36);
  sub_24F774DA0((uint64_t)v47, &qword_26B1F7D38);
  sub_24F77BC10();
}

#error "24F7D0FF0: call analysis failed (funcsize=27)"

#error "24F7D1060: call analysis failed (funcsize=27)"

#error "24F7D10D0: call analysis failed (funcsize=27)"

#error "24F7D1140: call analysis failed (funcsize=27)"

uint64_t sub_24F7D117C()
{
  return sub_24F7D1194();
}

#error "24F7D11C8: call analysis failed (funcsize=27)"

#error "24F7D1238: call analysis failed (funcsize=27)"

#error "24F7D12A8: call analysis failed (funcsize=27)"

#error "24F7D1318: call analysis failed (funcsize=27)"

#error "24F7D1388: call analysis failed (funcsize=27)"

#error "24F7D13F8: call analysis failed (funcsize=27)"

#error "24F7D1468: call analysis failed (funcsize=27)"

#error "24F7D14D8: call analysis failed (funcsize=27)"

#error "24F7D1548: call analysis failed (funcsize=27)"

#error "24F7D15B8: call analysis failed (funcsize=27)"

void static DatabaseValueConvertible<>._valueMismatch(fromStatement:atUncheckedIndex:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,unsigned __int8 a23,uint64_t a24,uint64_t a25,unint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,unsigned __int8 a31,uint64_t a32,uint64_t a33,unint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  void (*v53)(uint64_t *__return_ptr);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unsigned __int8 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  sqlite3_stmt *v65;
  int v66;

  sub_24F7813DC();
  a47 = v48;
  a48 = v49;
  a38 = v50;
  uint64_t v66 = v51;
  uint64_t v65 = v52;
  v53(&a28);
  uint64_t v55 = a28;
  uint64_t v54 = a29;
  BOOL v56 = a30;
  uint64_t v57 = a32;
  uint64_t v58 = a33;
  uint64_t v64 = a29;
  uint64_t v59 = a34;
  uint64_t v60 = a35;
  uint64_t v61 = a31;
  sub_24F7D29A4();
  sub_24F770FA4();
  uint64_t v63 = v62;
  a20 = v55;
  a21 = v54;
  a22 = v56;
  a23 = v61;
  a24 = v57;
  a25 = v58;
  a26 = v59;
  a27 = v60;
  sub_24F76B11C(v65, v66, (uint64_t)&a17);
  sub_24F77EE6C();
  sub_24F7B00C4(a38, (uint64_t)&a20, v63);
  sub_24F781F10(v57, v59, v60);
  swift_release();
  sub_24F7B0E68(v64, v56, v61);
  swift_bridgeObjectRelease();
  sub_24F77835C(v59);
  swift_willThrow();
  sub_24F77AE2C();
}

#error "24F7D183C: call analysis failed (funcsize=98)"

#error "24F7D19BC: call analysis failed (funcsize=104)"

#error "24F7D1B78: call analysis failed (funcsize=105)"

#error "24F7D1D3C: call analysis failed (funcsize=114)"

uint64_t sub_24F7D1DB4@<X0>(unint64_t a1@<X1>, uint64_t a2@<X8>)
{
  long long v5 = a1;
  char v6 = 1;
  uint64_t v3 = (void *)swift_retain();
  return RowDecodingContext.init(row:key:)(v3, &v5, a2);
}

uint64_t (*FastDatabaseValueCursor._isDone.modify())()
{
  return j__swift_endAccess;
}

uint64_t FastDatabaseValueCursor.columnIndex.getter()
{
  return *(unsigned int *)(v0 + 28);
}

void (*sub_24F7D1E3C(void *a1))(void *)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = FastDatabaseValueCursor._isDone.modify();
  return sub_24F7D1E94;
}

uint64_t (*FastNullableDatabaseValueCursor._isDone.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_24F7D1ED8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2();
  uint64_t v4 = *(int *)(a1 + 28);
  return RowDecodingContext.init(statement:index:)(v3, v4);
}

void (*sub_24F7D1F1C(void *a1))(void *)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = FastNullableDatabaseValueCursor._isDone.modify();
  return sub_24F7D1E94;
}

uint64_t static DatabaseValueConvertible<>.fetchSet(_:arguments:adapter:)()
{
  uint64_t result = static DatabaseValueConvertible<>.fetchCursor(_:arguments:adapter:)();
  if (!v0)
  {
    type metadata accessor for FastDatabaseValueCursor();
    swift_getWitnessTable();
    return Set.init<A>(_:)();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;

  uint64_t result = static DatabaseValueConvertible.fetchCursor(_:arguments:adapter:)();
  if (!v0)
  {
    type metadata accessor for DatabaseValueCursor();
    swift_getWitnessTable();
    return Set.init<A>(_:)();
  }
  return result;
}

void static DatabaseValueConvertible<>.fetchCursor(_:sql:arguments:adapter:)()
{
}

void static DatabaseValueConvertible<>.fetchCursor<A>(_:_:)()
{
}

void static DatabaseValueConvertible<>.fetchAll(_:sql:arguments:adapter:)()
{
}

void sub_24F7D20C4()
{
  sub_24F76FF94();
  sub_24F780BD8(v5, v6, v7, v8, v9, v10, v11, v12, v42, v46, v50, v53, v56, v59, v62, v65, v67, v69, v71, v73);
  sub_24F781274(&qword_26B1F7F50);
  uint64_t v13 = sub_24F77D79C();
  *(_OWORD *)(v13 + 16) = xmmword_24F8DDBF0;
  uint64_t v14 = v13 + 32;
  uint64_t v80 = v4;
  uint64_t v81 = v2;
  uint64_t v82 = v3;
  uint64_t v83 = v1;
  sub_24F7725D4(&v80);
  uint64_t v15 = sub_24F76C344((uint64_t)&v80, v14);
  sub_24F7D2D20(v15, v16, v17, v18, v19, v20, v21, v22, v43, v47);
  sub_24F7D2D80();
  swift_bridgeObjectRetain();
  uint64_t v23 = swift_bridgeObjectRetain();
  uint64_t v25 = sub_24F777684(v23, v24);
  sub_24F770F88(v25, v26, v27, v28, v29, v30, v31, v32, v44, v48, v51, v54, v57, v60, v63);
  sub_24F774DA0((uint64_t)v78, &qword_26B1F7F10);
  sub_24F781274(&qword_26B1F7D38);
  sub_24F7D2950();
  uint64_t v33 = sub_24F773650();
  uint64_t v34 = v0(v33);
  sub_24F77BFD4(v34, v35, v36, v37, v38, v39, v40, v41, v45, v49, v52, v55, v58, v61, v64, v66, v68, v70, v72,
    v74,
    v75,
    v76,
    v77,
    v78[0],
    v78[1],
    v78[2],
    v78[3],
    v78[4],
    v79);
  sub_24F777308();
  sub_24F77BC10();
}

void static DatabaseValueConvertible<>.fetchAll<A>(_:_:)()
{
}

void sub_24F7D21C8()
{
  sub_24F7D2CD8();
  sub_24F775B74();
  v2();
  if (!v0)
  {
    sub_24F7D2C5C();
    sub_24F77CDCC();
    uint64_t v3 = v1();
    sub_24F77DA60(v3, v4);
    swift_release();
  }
  sub_24F775FA4();
  sub_24F7D2D08();
}

void *static DatabaseValueConvertible<>.fetchOne<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = (*(void *(**)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 32))(v9, a1, 1, a4, a7);
  if (!v7)
  {
    swift_retain();
    static DatabaseValueConvertible<>.fetchOne(_:arguments:adapter:)();
    sub_24F7AD1E4((uint64_t)v9);
    return (void *)swift_release();
  }
  return result;
}

void static DatabaseValueConvertible<>.fetchSet(_:sql:arguments:adapter:)()
{
  sub_24F76FF94();
  sub_24F77D764(v4, v5, v6, v7, v8, v9, v10, v11, v40, v44, v48, v51, v54, v57, v60, v63, v65, v67, v69, v71);
  sub_24F781274(&qword_26B1F7F50);
  uint64_t v12 = sub_24F77D79C();
  *(_OWORD *)(v12 + 16) = xmmword_24F8DDBF0;
  uint64_t v13 = v12 + 32;
  uint64_t v78 = v0;
  uint64_t v79 = v2;
  uint64_t v80 = v3;
  uint64_t v81 = v1;
  sub_24F7725D4(&v78);
  uint64_t v14 = sub_24F76C344((uint64_t)&v78, v13);
  sub_24F7D2D20(v14, v15, v16, v17, v18, v19, v20, v21, v41, v45);
  sub_24F772258();
  swift_bridgeObjectRetain();
  uint64_t v22 = swift_bridgeObjectRetain();
  uint64_t v24 = sub_24F777684(v22, v23);
  sub_24F770F88(v24, v25, v26, v27, v28, v29, v30, v31, v42, v46, v49, v52, v55, v58, v61);
  sub_24F774DA0((uint64_t)v76, &qword_26B1F7F10);
  sub_24F781274(&qword_26B1F7D38);
  sub_24F7D2950();
  sub_24F7D2C7C();
  static DatabaseValueConvertible<>.fetchSet<A>(_:_:)();
  sub_24F77BFD4(v32, v33, v34, v35, v36, v37, v38, v39, v43, v47, v50, v53, v56, v59, v62, v64, v66, v68, v70,
    v72,
    v73,
    v74,
    v75,
    v76[0],
    v76[1],
    v76[2],
    v76[3],
    v76[4],
    v77);
  sub_24F777308();
  sub_24F77BC10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  long long v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;

  sub_24F76FF94();
  sub_24F77E3EC(v4, v5, v6, v7, v8, v9, v10, v11, v46, v11, v55, v59, v63, v67, v71, v75, v78, v81, v84, v87);
  sub_24F781274(&qword_26B1F7F50);
  *(_OWORD *)(sub_24F77D79C() + 16) = xmmword_24F8DDBF0;
  uint64_t v109 = v3;
  uint64_t v110 = v2;
  uint64_t v111 = v1;
  uint64_t v112 = v0;
  uint64_t v12 = sub_24F7725D4(&v109);
  uint64_t v20 = sub_24F77C158((uint64_t)v12, v13, v14, v15, v16, v17, v18, v19, v47, v51, v56, v60, v64, v68, v72, v76, v79, v82, v85,
          v88,
          v90,
          v92,
          v94,
          v96,
          v97,
          v98,
          v99,
          v100,
          v101,
          v102,
          v103,
          v104,
          v105,
          v106,
          v107,
          v108,
          v109);
  sub_24F7D2D20(v20, v21, v22, v23, v24, v25, v26, v27, v48, v52);
  sub_24F77124C();
  swift_bridgeObjectRetain();
  uint64_t v28 = swift_bridgeObjectRetain();
  uint64_t v30 = sub_24F777684(v28, v29);
  sub_24F770F88(v30, v31, v32, v33, v34, v35, v36, v37, v49, v53, v57, v61, v65, v69, v73);
  sub_24F774DA0((uint64_t)&v96, &qword_26B1F7F10);
  sub_24F781274(&qword_26B1F7D38);
  sub_24F7D2950();
  sub_24F77B6E8();
  static DatabaseValueConvertible<>.fetchSet<A>(_:_:)();
  sub_24F77BFD4(v38, v39, v40, v41, v42, v43, v44, v45, v50, v54, v58, v62, v66, v70, v74, v77, v80, v83, v86,
    v89,
    v91,
    v93,
    v95,
    v96,
    v97,
    v98,
    v99,
    v100,
    v101);
  sub_24F777308();
  sub_24F77BC10();
}

void static DatabaseValueConvertible<>.fetchSet<A>(_:_:)()
{
  sub_24F7D2CD8();
  sub_24F7772CC();
  v1();
  if (!v0)
  {
    sub_24F7D2C5C();
    sub_24F76B6D4();
    uint64_t v2 = static DatabaseValueConvertible<>.fetchSet(_:arguments:adapter:)();
    sub_24F77DA60(v2, v3);
    swift_release();
  }
  sub_24F775FA4();
  sub_24F7D2D08();
}

{
  uint64_t v0;
  void (*v1)(void);
  uint64_t v2;
  uint64_t v3;

  sub_24F7803E8();
  sub_24F77B098();
  v1();
  if (!v0)
  {
    sub_24F781698();
    sub_24F77BA50();
    uint64_t v2 = static DatabaseValueConvertible<>.fetchSet(_:arguments:adapter:)();
    sub_24F77DA60(v2, v3);
    swift_release();
  }
  sub_24F775FA4();
  sub_24F890488();
}

uint64_t static Optional<A>.fetchCursor(_:arguments:adapter:)()
{
  sub_24F780324();
  uint64_t v1 = type metadata accessor for FastNullableDatabaseValueCursor();
  sub_24F771DE4(v1, v2, v3, v4, v5, v6, v7, v8, v11, v12, v13, v14, v15, v16, v17, v18);
  swift_retain();
  uint64_t v9 = sub_24F777E70(v0);
  return sub_24F774660(v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_24F775DDC();
  uint64_t v1 = type metadata accessor for NullableDatabaseValueCursor();
  sub_24F771DE4(v1, v2, v3, v4, v5, v6, v7, v8, v11, v12, v13, v14, v15, v16, v17, v18);
  swift_retain();
  uint64_t v9 = sub_24F777E70(v0);
  return sub_24F774660(v9);
}

uint64_t static Optional<A>.fetchAll(_:arguments:adapter:)(uint64_t a1, uint64_t a2)
{
  sub_24F772930(a1, a2);
  uint64_t result = static Optional<A>.fetchCursor(_:arguments:adapter:)();
  if (!v2)
  {
    sub_24F8CF610();
    sub_24F8CF1B0();
    sub_24F775FC8();
    type metadata accessor for FastNullableDatabaseValueCursor();
    swift_getWitnessTable();
    uint64_t WitnessTable = swift_getWitnessTable();
    sub_24F777654(WitnessTable, v5, v6);
    return v7;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t WitnessTable;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_24F76BA04(a1, a2);
  uint64_t result = static Optional<A>.fetchCursor(_:arguments:adapter:)();
  if (!v2)
  {
    sub_24F8CF610();
    sub_24F8CF1B0();
    sub_24F7824E4();
    type metadata accessor for NullableDatabaseValueCursor();
    swift_getWitnessTable();
    uint64_t WitnessTable = swift_getWitnessTable();
    sub_24F782C6C(WitnessTable, v5, v6);
    return v7;
  }
  return result;
}

uint64_t static Optional<A>.fetchSet(_:arguments:adapter:)()
{
  uint64_t result = static Optional<A>.fetchCursor(_:arguments:adapter:)();
  if (!v0)
  {
    sub_24F8CF610();
    type metadata accessor for FastNullableDatabaseValueCursor();
    swift_getWitnessTable();
    swift_getWitnessTable();
    return Set.init<A>(_:)();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;

  uint64_t result = static Optional<A>.fetchCursor(_:arguments:adapter:)();
  if (!v0)
  {
    sub_24F8CF610();
    type metadata accessor for NullableDatabaseValueCursor();
    swift_getWitnessTable();
    swift_getWitnessTable();
    return Set.init<A>(_:)();
  }
  return result;
}

void static Optional<A>.fetchCursor(_:sql:arguments:adapter:)()
{
}

{
  sub_24F88FFE0();
}

void static Optional<A>.fetchCursor<A>(_:_:)()
{
}

{
  sub_24F8900DC();
}

void static Optional<A>.fetchAll(_:sql:arguments:adapter:)()
{
}

{
  sub_24F88FFE0();
}

void sub_24F7D26C4()
{
  sub_24F76FF94();
  sub_24F780BD8(v5, v6, v7, v8, v9, v10, v11, v12, v42, v46, v50, v53, v56, v59, v62, v65, v67, v69, v71, v73);
  sub_24F781274(&qword_26B1F7F50);
  uint64_t v13 = sub_24F77D79C();
  *(_OWORD *)(v13 + 16) = xmmword_24F8DDBF0;
  uint64_t v14 = v13 + 32;
  uint64_t v80 = v4;
  uint64_t v81 = v2;
  uint64_t v82 = v3;
  uint64_t v83 = v1;
  sub_24F7725D4(&v80);
  uint64_t v15 = sub_24F76C344((uint64_t)&v80, v14);
  sub_24F7D2D20(v15, v16, v17, v18, v19, v20, v21, v22, v43, v47);
  sub_24F7D2D80();
  swift_bridgeObjectRetain();
  uint64_t v23 = swift_bridgeObjectRetain();
  uint64_t v25 = sub_24F777684(v23, v24);
  sub_24F770F88(v25, v26, v27, v28, v29, v30, v31, v32, v44, v48, v51, v54, v57, v60, v63);
  sub_24F774DA0((uint64_t)v78, &qword_26B1F7F10);
  sub_24F781274(&qword_26B1F7D38);
  sub_24F7D2950();
  uint64_t v33 = sub_24F773650();
  uint64_t v34 = v0(v33);
  sub_24F77BFD4(v34, v35, v36, v37, v38, v39, v40, v41, v45, v49, v52, v55, v58, v61, v64, v66, v68, v70, v72,
    v74,
    v75,
    v76,
    v77,
    v78[0],
    v78[1],
    v78[2],
    v78[3],
    v78[4],
    v79);
  sub_24F777308();
  sub_24F77BC10();
}

void static Optional<A>.fetchAll<A>(_:_:)()
{
}

{
  sub_24F8900DC();
}

void sub_24F7D27C8()
{
  sub_24F7D2CD8();
  sub_24F775B74();
  v2();
  if (!v0)
  {
    sub_24F7D2C5C();
    sub_24F77CDCC();
    uint64_t v3 = v1();
    sub_24F77DA60(v3, v4);
    swift_release();
  }
  sub_24F775FA4();
  sub_24F7D2D08();
}

void static Optional<A>.fetchSet(_:sql:arguments:adapter:)()
{
  sub_24F76FF94();
  sub_24F77D764(v4, v5, v6, v7, v8, v9, v10, v11, v40, v44, v48, v51, v54, v57, v60, v63, v65, v67, v69, v71);
  sub_24F781274(&qword_26B1F7F50);
  uint64_t v12 = sub_24F77D79C();
  *(_OWORD *)(v12 + 16) = xmmword_24F8DDBF0;
  uint64_t v13 = v12 + 32;
  uint64_t v78 = v0;
  uint64_t v79 = v2;
  uint64_t v80 = v3;
  uint64_t v81 = v1;
  sub_24F7725D4(&v78);
  uint64_t v14 = sub_24F76C344((uint64_t)&v78, v13);
  sub_24F7D2D20(v14, v15, v16, v17, v18, v19, v20, v21, v41, v45);
  sub_24F772258();
  swift_bridgeObjectRetain();
  uint64_t v22 = swift_bridgeObjectRetain();
  uint64_t v24 = sub_24F777684(v22, v23);
  sub_24F770F88(v24, v25, v26, v27, v28, v29, v30, v31, v42, v46, v49, v52, v55, v58, v61);
  sub_24F774DA0((uint64_t)v76, &qword_26B1F7F10);
  sub_24F781274(&qword_26B1F7D38);
  sub_24F7D2950();
  sub_24F7D2C7C();
  static Optional<A>.fetchSet<A>(_:_:)();
  sub_24F77BFD4(v32, v33, v34, v35, v36, v37, v38, v39, v43, v47, v50, v53, v56, v59, v62, v64, v66, v68, v70,
    v72,
    v73,
    v74,
    v75,
    v76[0],
    v76[1],
    v76[2],
    v76[3],
    v76[4],
    v77);
  sub_24F777308();
  sub_24F77BC10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  long long v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;

  sub_24F76FF94();
  sub_24F77E3EC(v4, v5, v6, v7, v8, v9, v10, v11, v46, v11, v55, v59, v63, v67, v71, v75, v78, v81, v84, v87);
  sub_24F781274(&qword_26B1F7F50);
  *(_OWORD *)(sub_24F77D79C() + 16) = xmmword_24F8DDBF0;
  uint64_t v109 = v3;
  uint64_t v110 = v2;
  uint64_t v111 = v1;
  uint64_t v112 = v0;
  uint64_t v12 = sub_24F7725D4(&v109);
  uint64_t v20 = sub_24F77C158((uint64_t)v12, v13, v14, v15, v16, v17, v18, v19, v47, v51, v56, v60, v64, v68, v72, v76, v79, v82, v85,
          v88,
          v90,
          v92,
          v94,
          v96,
          v97,
          v98,
          v99,
          v100,
          v101,
          v102,
          v103,
          v104,
          v105,
          v106,
          v107,
          v108,
          v109);
  sub_24F7D2D20(v20, v21, v22, v23, v24, v25, v26, v27, v48, v52);
  sub_24F77124C();
  swift_bridgeObjectRetain();
  uint64_t v28 = swift_bridgeObjectRetain();
  uint64_t v30 = sub_24F777684(v28, v29);
  sub_24F770F88(v30, v31, v32, v33, v34, v35, v36, v37, v49, v53, v57, v61, v65, v69, v73);
  sub_24F774DA0((uint64_t)&v96, &qword_26B1F7F10);
  sub_24F781274(&qword_26B1F7D38);
  sub_24F7D2950();
  sub_24F77B6E8();
  static Optional<A>.fetchSet<A>(_:_:)();
  sub_24F77BFD4(v38, v39, v40, v41, v42, v43, v44, v45, v50, v54, v58, v62, v66, v70, v74, v77, v80, v83, v86,
    v89,
    v91,
    v93,
    v95,
    v96,
    v97,
    v98,
    v99,
    v100,
    v101);
  sub_24F777308();
  sub_24F77BC10();
}

void static Optional<A>.fetchSet<A>(_:_:)()
{
  sub_24F7D2CD8();
  sub_24F7772CC();
  v1();
  if (!v0)
  {
    sub_24F7D2C5C();
    sub_24F76B6D4();
    uint64_t v2 = static Optional<A>.fetchSet(_:arguments:adapter:)();
    sub_24F77DA60(v2, v3);
    swift_release();
  }
  sub_24F775FA4();
  sub_24F7D2D08();
}

{
  uint64_t v0;
  void (*v1)(void);
  uint64_t v2;
  uint64_t v3;

  sub_24F7803E8();
  sub_24F77B098();
  v1();
  if (!v0)
  {
    sub_24F781698();
    sub_24F77BA50();
    uint64_t v2 = static Optional<A>.fetchSet(_:arguments:adapter:)();
    sub_24F77DA60(v2, v3);
    swift_release();
  }
  sub_24F775FA4();
  sub_24F890488();
}

unint64_t sub_24F7D2950()
{
  unint64_t result = qword_26B1F72A8;
  if (!qword_26B1F72A8)
  {
    sub_24F7688B8(&qword_26B1F7D38);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B1F72A8);
  }
  return result;
}

unint64_t sub_24F7D29A4()
{
  unint64_t result = qword_269A2AE68;
  if (!qword_269A2AE68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269A2AE68);
  }
  return result;
}

uint64_t sub_24F7D29F0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_24F7D2A18@<X0>(uint64_t a1@<X8>)
{
  return sub_24F7D1DB4(*(void *)(v1 + 24), a1);
}

uint64_t sub_24F7D2A34()
{
  return sub_24F7D1ED8(v0, FastDatabaseValueCursor.statement.getter);
}

uint64_t sub_24F7D2A64()
{
  return sub_24F7D1ED8(v0, FastNullableDatabaseValueCursor.statement.getter);
}

uint64_t sub_24F7D2A94(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_24F7D2AD0(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_24F7D2B0C(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_24F7D2B48(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t dispatch thunk of StatementColumnConvertible.init(sqliteStatement:index:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t method lookup function for FastDatabaseValueCursor(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for FastDatabaseValueCursor);
}

uint64_t sub_24F7D2BB4()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for FastNullableDatabaseValueCursor(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for FastNullableDatabaseValueCursor);
}

uint64_t sub_24F7D2C38(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_24F774B34(a1, a2, a3);
}

uint64_t sub_24F7D2C5C()
{
  return swift_retain();
}

uint64_t sub_24F7D2C7C()
{
  return v0;
}

uint64_t sub_24F7D2CA0()
{
  return v0;
}

void sub_24F7D2CBC()
{
  *(void *)(v1 - 72) = v0;
}

uint64_t sub_24F7D2CF0()
{
  return v0;
}

uint64_t sub_24F7D2D20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  return sub_24F7786CC((uint64_t)va1, (uint64_t)va);
}

void sub_24F7D2D4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,unsigned __int8 a23,uint64_t a24,uint64_t a25,unint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,unsigned __int8 a31,uint64_t a32,uint64_t a33,unint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  static DatabaseValueConvertible<>._valueMismatch(fromStatement:atUncheckedIndex:context:)(v48, v50, a3, a4, v49, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    a34,
    a35,
    a36,
    a37,
    a38,
    a39,
    a40,
    a41,
    a42,
    a43,
    a44,
    a45,
    a46,
    a47,
    a48);
}

uint64_t sub_24F7D2D6C()
{
  return v0;
}

uint64_t sub_24F7D2D80()
{
  return swift_bridgeObjectRetain();
}

ValueMetadata *type metadata accessor for DatabasePublishers()
{
  return &type metadata for DatabasePublishers;
}

void *initializeBufferWithCopyOfBuffer for RenameColumnAdapter(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for RenameColumnAdapter()
{
  return swift_release();
}

void *assignWithCopy for RenameColumnAdapter(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for RenameColumnAdapter(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t type metadata accessor for DatabasePromise()
{
  return sub_24F777DE0();
}

uint64_t sub_24F7D2E74(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unsigned __int16 a21)
{
  int v22 = (a21 >> 13) & 3;
  if (v22 == 2)
  {
LABEL_4:
    return swift_bridgeObjectRetain();
  }
  if (v22 != 1)
  {
    if (v22) {
      return result;
    }
    goto LABEL_4;
  }
  __int16 v23 = a21 & 0x9FFF;
  return sub_24F7958C8(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           v23);
}

uint64_t sub_24F7D2F28(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 160) >> 13) & 3;
}

uint64_t sub_24F7D2F34(uint64_t result)
{
  *(_WORD *)(result + 160) &= 0x9FFFu;
  return result;
}

uint64_t sub_24F7D2F44(uint64_t result, char a2)
{
  uint64_t v2 = *(void *)(result + 104) & 1;
  __int16 v3 = *(_WORD *)(result + 160) & 0x81FF | ((a2 & 3) << 13);
  *(void *)(result + 64) &= 1uLL;
  *(void *)(result + 104) = v2;
  *(_WORD *)(result + 160) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SQLCollection.Impl()
{
  return &type metadata for SQLCollection.Impl;
}

uint64_t sub_24F7D2F84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v19 = MEMORY[0x263F8EE78];
    sub_24F77C4AC();
    uint64_t v6 = v19;
    uint64_t v7 = (char *)(a1 + 32);
    uint64_t v8 = v4 - 1;
    for (uint64_t i = a2; ; a2 = i)
    {
      memcpy(__dst, v7, 0xA3uLL);
      memcpy(v17, v7, sizeof(v17));
      sub_24F7D3578((uint64_t)__dst);
      uint64_t v9 = sub_24F76D734(a2, 0);
      if (v2)
      {
        sub_24F7D3578((uint64_t)__dst);
        swift_release();
        swift_release();
        return v6;
      }
      uint64_t v11 = v9;
      uint64_t v12 = v10;
      sub_24F7D3578((uint64_t)__dst);
      uint64_t v19 = v6;
      unint64_t v13 = *(void *)(v6 + 16);
      if (v13 >= *(void *)(v6 + 24) >> 1)
      {
        sub_24F77C4AC();
        uint64_t v6 = v19;
      }
      *(void *)(v6 + 16) = v13 + 1;
      uint64_t v14 = v6 + 16 * v13;
      *(void *)(v14 + 32) = v11;
      *(void *)(v14 + 40) = v12;
      if (!v8) {
        break;
      }
      v7 += 168;
      --v8;
    }
    swift_release();
  }
  else
  {
    swift_release();
    return MEMORY[0x263F8EE78];
  }
  return v6;
}

uint64_t sub_24F7D3130(uint64_t a1)
{
  sub_24F7AD780(v1, (uint64_t)v12);
  sub_24F7AD780((uint64_t)v12, (uint64_t)v13);
  int v4 = sub_24F7D2F28((uint64_t)v13);
  if (!v4)
  {
    uint64_t v8 = *(void *)sub_24F7D2F34((uint64_t)v13);
    swift_retain();
    sub_24F7D3690((uint64_t)v12);
    sub_24F7D2F84(v8, a1);
    uint64_t result = sub_24F7D3690((uint64_t)v12);
    if (v2) {
      return result;
    }
    sub_24F781274(&qword_26B1F7F48);
    sub_24F7871AC();
    sub_24F8CED30();
    swift_bridgeObjectRelease();
    uint64_t v10 = 40;
    unint64_t v11 = 0xE100000000000000;
    sub_24F8CEEB0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_24F8CEEB0();
    swift_bridgeObjectRelease();
    return v10;
  }
  if (v4 != 1)
  {
    sub_24F7D2F34((uint64_t)v13);
    uint64_t v10 = 34;
    unint64_t v11 = 0xE100000000000000;
    sub_24F7D3690((uint64_t)v12);
    sub_24F8CEEB0();
    sub_24F8CEEB0();
    sub_24F7D3690((uint64_t)v12);
    return v10;
  }
  uint64_t v5 = (const void *)sub_24F7D2F34((uint64_t)v13);
  memcpy(v9, v5, 0xA2uLL);
  sub_24F7AD780((uint64_t)v12, (uint64_t)&v10);
  uint64_t v6 = sub_24F7D2F34((uint64_t)&v10);
  sub_24F7D3690(v6);
  sub_24F83B018(a1);
  if (v2) {
    return sub_24F7D3690((uint64_t)v12);
  }
  v9[0] = 40;
  v9[1] = 0xE100000000000000;
  sub_24F8CEEB0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_24F8CEEB0();
  swift_bridgeObjectRelease();
  sub_24F7D3690((uint64_t)v12);
  return v9[0];
}

uint64_t sub_24F7D33F4@<X0>(void *__src@<X0>, void *a2@<X8>)
{
  memcpy(__dst, __src, 0xA3uLL);
  memcpy(__srca, v2, 0xA2uLL);
  sub_24F7AD780((uint64_t)__srca, (uint64_t)v14);
  int v4 = sub_24F7D2F28((uint64_t)v14);
  uint64_t v5 = sub_24F7D2F34((uint64_t)v14);
  if (v4)
  {
LABEL_5:
    uint64_t v9 = (unsigned char *)swift_allocObject();
    memcpy(v9 + 16, __dst, 0xA3uLL);
    memcpy(v9 + 184, __srca, 0xA2uLL);
    v9[346] = 0;
    v10[0] = v9;
    sub_24F7AD91C((uint64_t)v10);
    sub_24F76F710((uint64_t)v10, (uint64_t)v11);
    memcpy(a2, v11, 0xA3uLL);
    sub_24F7D3578((uint64_t)__dst);
    return sub_24F7D3690((uint64_t)__srca);
  }
  uint64_t v6 = *(void *)(*(void *)v5 + 16);
  if (v6)
  {
    if (v6 == 1)
    {
      uint64_t v7 = (const void *)(*(void *)v5 + 32);
      memcpy(v11, __dst, 0xA3uLL);
      memcpy(v10, v7, 0xA3uLL);
      return sub_24F815BAC(0, v11, v10, a2);
    }
    goto LABEL_5;
  }
  memset(v11, 0, 17);
  sub_24F7667B8((uint64_t)v11);
  return sub_24F76F710((uint64_t)v11, (uint64_t)a2);
}

uint64_t sub_24F7D3578(uint64_t a1)
{
  sub_24F77F400();
  sub_24F77294C();
  v2();
  return a1;
}

uint64_t sub_24F7D35D8()
{
  unsigned int v22 = *(unsigned __int16 *)(v0 + 176) | (*(unsigned __int8 *)(v0 + 178) << 16);
  uint64_t v20 = *(void *)(v0 + 160);
  uint64_t v21 = *(void *)(v0 + 168);
  sub_24F77294C();
  sub_24F76C98C(v1, v2, v3, v4, v5, v6, v7, v8, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  sub_24F77DE64(*(void *)(v0 + 184), *(void *)(v0 + 192), *(void *)(v0 + 200), *(void *)(v0 + 208), *(void *)(v0 + 216), *(void *)(v0 + 224), *(void *)(v0 + 232), *(void *)(v0 + 240), *(void *)(v0 + 328), *(__n128 *)(v0 + 248), *(__n128 *)(v0 + 264), *(__n128 *)(v0 + 280), *(__n128 *)(v0 + 296), *(__n128 *)(v0 + 312));
  return swift_deallocObject();
}

uint64_t sub_24F7D3690(uint64_t a1)
{
  sub_24F77F400();
  sub_24F77294C();
  v2();
  return a1;
}

uint64_t _s12GRDBInternal13SQLCollectionV4ImplOwxx_0(uint64_t a1)
{
  unsigned __int16 v22 = *(_WORD *)(a1 + 160);
  uint64_t v20 = *(void *)(a1 + 144);
  uint64_t v21 = *(void *)(a1 + 152);
  sub_24F77294C();
  return sub_24F7AD880(v8, v1, v2, v3, v4, v5, v6, v7, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
}

uint64_t _s12GRDBInternal13SQLCollectionV4ImplOwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 48);
  uint64_t v8 = *(void *)(a2 + 56);
  uint64_t v13 = *(void *)(a2 + 72);
  uint64_t v14 = *(void *)(a2 + 80);
  uint64_t v15 = *(void *)(a2 + 88);
  uint64_t v16 = *(void *)(a2 + 96);
  uint64_t v17 = *(void *)(a2 + 104);
  uint64_t v18 = *(void *)(a2 + 112);
  uint64_t v19 = *(void *)(a2 + 120);
  uint64_t v20 = *(void *)(a2 + 128);
  uint64_t v21 = *(void *)(a2 + 136);
  uint64_t v22 = *(void *)(a2 + 144);
  uint64_t v23 = *(void *)(a2 + 152);
  unsigned __int16 v24 = *(_WORD *)(a2 + 160);
  uint64_t v9 = *(void *)(a2 + 64);
  uint64_t v10 = *(void *)a2;
  uint64_t v11 = *(void *)(a2 + 8);
  sub_24F7D2E74(*(void *)a2, v11, v3, v4, v5, v6, v7, v8, v9, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,
    v23,
    v24);
  *(void *)a1 = v10;
  *(void *)(a1 + 8) = v11;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v8;
  *(void *)(a1 + 64) = v9;
  *(void *)(a1 + 72) = v13;
  *(void *)(a1 + 80) = v14;
  *(void *)(a1 + 88) = v15;
  *(void *)(a1 + 96) = v16;
  *(void *)(a1 + 104) = v17;
  *(void *)(a1 + 112) = v18;
  *(void *)(a1 + 120) = v19;
  *(void *)(a1 + 128) = v20;
  *(void *)(a1 + 136) = v21;
  *(void *)(a1 + 144) = v22;
  *(void *)(a1 + 152) = v23;
  *(_WORD *)(a1 + 160) = v24;
  return a1;
}

__n128 *_s12GRDBInternal13SQLCollectionV4ImplOwca_0(__n128 *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v27 = *(void *)(a2 + 72);
  uint64_t v28 = *(void *)(a2 + 80);
  uint64_t v29 = *(void *)(a2 + 88);
  uint64_t v30 = *(void *)(a2 + 96);
  uint64_t v31 = *(void *)(a2 + 104);
  uint64_t v32 = *(void *)(a2 + 112);
  uint64_t v33 = *(void *)(a2 + 120);
  uint64_t v34 = *(void *)(a2 + 128);
  uint64_t v35 = *(void *)(a2 + 136);
  uint64_t v36 = *(void *)(a2 + 144);
  uint64_t v37 = *(void *)(a2 + 152);
  unsigned __int16 v38 = *(_WORD *)(a2 + 160);
  sub_24F7D2E74(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36,
    v37,
    v38);
  uint64_t v12 = a1->n128_u64[0];
  uint64_t v13 = a1->n128_i64[1];
  a1->n128_u64[0] = v3;
  a1->n128_u64[1] = v4;
  uint64_t v14 = a1[1].n128_i64[0];
  uint64_t v15 = a1[1].n128_i64[1];
  a1[1].n128_u64[0] = v5;
  a1[1].n128_u64[1] = v6;
  uint64_t v16 = a1[2].n128_i64[0];
  uint64_t v17 = a1[2].n128_i64[1];
  a1[2].n128_u64[0] = v7;
  a1[2].n128_u64[1] = v8;
  uint64_t v18 = a1[3].n128_i64[0];
  uint64_t v19 = a1[3].n128_i64[1];
  a1[3].n128_u64[0] = v9;
  a1[3].n128_u64[1] = v10;
  __n128 v20 = a1[4];
  __n128 v21 = a1[5];
  a1[4].n128_u64[0] = v11;
  a1[4].n128_u64[1] = v27;
  a1[5].n128_u64[0] = v28;
  a1[5].n128_u64[1] = v29;
  __n128 v22 = a1[6];
  __n128 v23 = a1[7];
  a1[6].n128_u64[0] = v30;
  a1[6].n128_u64[1] = v31;
  a1[7].n128_u64[0] = v32;
  a1[7].n128_u64[1] = v33;
  __n128 v24 = a1[8];
  a1[8].n128_u64[0] = v34;
  a1[8].n128_u64[1] = v35;
  uint64_t v25 = a1[9].n128_i64[0];
  a1[9].n128_u64[0] = v36;
  a1[9].n128_u64[1] = v37;
  a1[10].n128_u16[0] = v38;
  sub_24F77DE64(v12, v13, v14, v15, v16, v17, v18, v19, v25, v20, v21, v22, v23, v24);
  return a1;
}

uint64_t _s12GRDBInternal13SQLCollectionV4ImplOwta_0(uint64_t a1)
{
  sub_24F77F400();
  uint64_t v2 = *(void *)(a1 + 144);
  uint64_t v3 = *(void *)(a1 + 152);
  unsigned __int16 v4 = *(_WORD *)(a1 + 160);
  long long v6 = v5[1];
  *(_OWORD *)a1 = *v5;
  *(_OWORD *)(a1 + 16) = v6;
  long long v7 = v5[3];
  *(_OWORD *)(a1 + 32) = v5[2];
  *(_OWORD *)(a1 + 48) = v7;
  long long v8 = v5[5];
  *(_OWORD *)(a1 + 64) = v5[4];
  *(_OWORD *)(a1 + 80) = v8;
  long long v9 = v5[7];
  *(_OWORD *)(a1 + 96) = v5[6];
  *(_OWORD *)(a1 + 112) = v9;
  long long v10 = v5[9];
  *(_OWORD *)(a1 + 128) = v5[8];
  *(_OWORD *)(a1 + 144) = v10;
  *(_WORD *)(a1 + 160) = v11;
  unsigned __int16 v33 = v4;
  uint64_t v31 = v2;
  uint64_t v32 = v3;
  sub_24F77294C();
  sub_24F7AD880(v12, v19, v13, v14, v15, v16, v17, v18, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33);
  return a1;
}

uint64_t _s12GRDBInternal11SQLSubqueryV4ImplOwet_0(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 162))
    {
      int v3 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *(void *)(a1 + 64) >> 1;
      if (v2 > 0x80000000) {
        int v3 = ~v2;
      }
      else {
        int v3 = -1;
      }
    }
  }
  else
  {
    int v3 = -1;
  }
  return (v3 + 1);
}

double sub_24F7D3AA8(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 152) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_WORD *)(a1 + 160) = 0;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 162) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      double result = 0.0;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(void *)(a1 + 64) = 2 * -a2;
      *(_OWORD *)(a1 + 72) = 0u;
      *(_OWORD *)(a1 + 88) = 0u;
      *(_OWORD *)(a1 + 104) = 0u;
      *(_OWORD *)(a1 + 120) = 0u;
      *(_OWORD *)(a1 + 136) = 0u;
      *(_OWORD *)(a1 + 146) = 0u;
      return result;
    }
    *(unsigned char *)(a1 + 162) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SQLCollection()
{
  return &type metadata for SQLCollection;
}

uint64_t destroy for Migration()
{
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for Migration(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Migration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for Migration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DatabaseSchemaCache(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DatabaseSchemaCache(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)double result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Migration()
{
  return &type metadata for Migration;
}

BOOL sub_24F7D3D28(char a1, char a2)
{
  return a1 == a2;
}

uint64_t sub_24F7D3D38()
{
  return sub_24F8CFF40();
}

uint64_t sub_24F7D3D60()
{
  return sub_24F8CFF80();
}

BOOL sub_24F7D3DA8(char *a1, char *a2)
{
  return sub_24F7D3D28(*a1, *a2);
}

uint64_t sub_24F7D3DB4()
{
  return sub_24F7D3D60();
}

uint64_t sub_24F7D3DBC()
{
  return sub_24F7D3D38();
}

void sub_24F7D3DC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_24F7D3DF0(uint64_t a1)
{
  return a1;
}

void sub_24F7D3E1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_24F7D3E48(uint64_t a1, void (*a2)(void *, uint64_t, long long *, uint64_t), uint64_t a3, uint64_t a4)
{
  long long v6 = v4;
  v14[0] = MEMORY[0x263F8EE78];
  v14[1] = MEMORY[0x263F8EE80];
  v8._object = (void *)0x800000024F8D1EB0;
  long long v9 = v14;
  v8._uint64_t countAndFlagsBits = 0xD000000000000019;
  Database.execute(sql:arguments:)(v8, *(GRDBInternal::StatementArguments *)(&a4 - 1));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v10)
  {
    LOBYTE(v14[0]) = 1;
    long long v15 = *v6;
    sub_24F7D3DF0((uint64_t)&v15);
    swift_retain();
    swift_retain();
    a2(v14, a1, v6, a1);
    sub_24F7D4058(a1, v11, v12, v13);
  }
}

uint64_t sub_24F7D3F84()
{
  sub_24F781274(&qword_26B1F7AB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_24F8DDBF0;
  uint64_t v3 = *v0;
  uint64_t v2 = v0[1];
  *(void *)(inited + 56) = MEMORY[0x263F8D310];
  *(void *)(inited + 64) = &protocol witness table for String;
  *(void *)(inited + 32) = v3;
  *(void *)(inited + 40) = v2;
  swift_bridgeObjectRetain();
  sub_24F780F38(inited, &v7);
  v4._object = (void *)0x800000024F8D1EF0;
  v5.values._rawValue = &v7;
  v4._uint64_t countAndFlagsBits = 0xD000000000000033;
  Database.execute(sql:arguments:)(v4, v5);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24F7D4058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v7[0] = MEMORY[0x263F8EE78];
  v7[1] = MEMORY[0x263F8EE80];
  v4._object = (void *)0x800000024F8D1ED0;
  GRDBInternal::StatementArguments v5 = v7;
  v4._uint64_t countAndFlagsBits = 0xD000000000000018;
  Database.execute(sql:arguments:)(v4, *(GRDBInternal::StatementArguments *)(&a4 - 1));
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

unsigned char *storeEnumTagSinglePayload for Migration.ForeignKeyChecks(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *double result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24F7D41A0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Migration.ForeignKeyChecks()
{
  return &type metadata for Migration.ForeignKeyChecks;
}

unint64_t sub_24F7D41DC()
{
  unint64_t result = qword_269A2AE70[0];
  if (!qword_269A2AE70[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_269A2AE70);
  }
  return result;
}

uint64_t type metadata accessor for OrderedDictionary()
{
  return sub_24F777DE0();
}

uint64_t sub_24F7D4240(uint64_t a1, uint64_t a2, uint64_t (*a3)(unsigned char *), uint64_t a4)
{
  swift_bridgeObjectRetain();
  uint64_t v9 = sub_24F7D539C(a2, a3, a4);
  swift_bridgeObjectRelease();
  if (!v4)
  {
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10)
    {
      swift_retain_n();
      swift_bridgeObjectRetain();
      uint64_t v11 = (uint64_t *)(a1 + 40);
      a2 = MEMORY[0x263F8EE78];
      do
      {
        if (*(void *)(v9 + 16))
        {
          uint64_t v13 = *(v11 - 1);
          uint64_t v12 = *v11;
          swift_bridgeObjectRetain();
          sub_24F782950();
          if (v14)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              sub_24F77C4AC();
            }
            unint64_t v15 = *(void *)(a2 + 16);
            if (v15 >= *(void *)(a2 + 24) >> 1) {
              sub_24F77C4AC();
            }
            *(void *)(a2 + 16) = v15 + 1;
            uint64_t v16 = a2 + 16 * v15;
            *(void *)(v16 + 32) = v13;
            *(void *)(v16 + 40) = v12;
          }
          else
          {
            swift_bridgeObjectRelease();
          }
        }
        v11 += 2;
        --v10;
      }
      while (v10);
      swift_bridgeObjectRelease();
      swift_release_n();
    }
    else
    {
      return MEMORY[0x263F8EE78];
    }
  }
  return a2;
}

uint64_t sub_24F7D43D0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_24F7D43E8(a1, a2, a3);
}

uint64_t sub_24F7D43E8(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    uint64_t v52 = result;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (*(void *)(a2 + 16))
    {
      unsigned int v6 = (uint64_t *)(v52 + 40);
      uint64_t v54 = &v64;
      uint64_t v55 = &__src[2];
      uint64_t v53 = a2;
      do
      {
        uint64_t v8 = *(v6 - 1);
        uint64_t v7 = *v6;
        swift_bridgeObjectRetain_n();
        unint64_t v9 = sub_24F782950();
        if ((v10 & 1) == 0) {
          goto LABEL_37;
        }
        uint64_t v56 = v3;
        memcpy(__dst, (const void *)(*(void *)(a2 + 56) + 176 * v9), 0xABuLL);
        sub_24F7ADA50((uint64_t)__dst);
        swift_bridgeObjectRelease();
        __src[0] = v8;
        __src[1] = v7;
        memcpy(v55, __dst, 0xABuLL);
        swift_bridgeObjectRetain();
        sub_24F7ADA50((uint64_t)__dst);
        sub_24F7AD964((uint64_t)__src);
        memcpy(v61, __src, 0xBBuLL);
        nullsub_1(v61);
        sub_24F7D58A4((uint64_t)v61, (uint64_t)v63);
        uint64_t v11 = (void *)v63[0];
        uint64_t v12 = v63[1];
        memcpy(v62, v54, 0xABuLL);
        uint64_t v13 = a3[1];
        if (*(void *)(v13 + 16) && (sub_24F782950(), (v14 & 1) != 0))
        {
          sub_24F7ADA50((uint64_t)v62);
          swift_isUniquelyReferenced_nonNull_native();
          sub_24F77DE88();
          sub_24F77AE48();
          if (v16) {
            goto LABEL_40;
          }
          char v17 = v15;
          sub_24F781274(&qword_269A2A308);
          int v18 = sub_24F780718();
          if (v18)
          {
            uint64_t v13 = v65;
            int v18 = sub_24F782950();
            if ((v17 & 1) != (v19 & 1)) {
              goto LABEL_42;
            }
          }
          if (v17)
          {
            sub_24F77E730(v18, v19, v20, v21, v22, v23, v24, v25, v50, v51, v52, v53, (uint64_t)v54, (uint64_t)v55, v56, v58[0]);
            memcpy(v11, v62, 0xABuLL);
            a3[1] = v13;
            swift_bridgeObjectRelease();
            sub_24F7ADBB0((uint64_t)v58);
LABEL_17:
            sub_24F7ADBB0((uint64_t)v62);
            swift_bridgeObjectRelease();
            a2 = v53;
            uint64_t v36 = v57;
            goto LABEL_31;
          }
          sub_24F77F41C();
          uint64_t v42 = *(void *)(v13 + 16);
          BOOL v16 = __OFADD__(v42, 1);
          uint64_t v43 = v42 + 1;
          if (v16) {
            goto LABEL_41;
          }
          sub_24F7813F8(v43);
          swift_bridgeObjectRelease();
          uint64_t v39 = *a3;
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_24F782EE8();
            uint64_t v39 = v48;
          }
          unint64_t v44 = *(void *)(v39 + 16);
          a2 = v53;
          uint64_t v36 = v56;
          if (v44 >= *(void *)(v39 + 24) >> 1)
          {
            sub_24F787184();
            uint64_t v39 = v49;
          }
          *(void *)(v39 + 16) = v44 + 1;
          uint64_t v45 = v39 + 16 * v44;
          *(void *)(v45 + 32) = v11;
          *(void *)(v45 + 40) = v12;
        }
        else
        {
          sub_24F7ADA50((uint64_t)v62);
          sub_24F7ADA50((uint64_t)v62);
          swift_bridgeObjectRetain();
          swift_isUniquelyReferenced_nonNull_native();
          sub_24F77DE88();
          sub_24F77AE48();
          if (v16) {
            goto LABEL_38;
          }
          char v27 = v26;
          sub_24F781274(&qword_269A2A308);
          int v28 = sub_24F780718();
          if (v28)
          {
            uint64_t v13 = v65;
            int v28 = sub_24F782950();
            if ((v27 & 1) != (v29 & 1)) {
              goto LABEL_42;
            }
          }
          if (v27)
          {
            sub_24F77E730(v28, v29, v30, v31, v32, v33, v34, v35, v50, v51, v52, v53, (uint64_t)v54, (uint64_t)v55, v56, v58[0]);
            memcpy(v11, v62, 0xABuLL);
            a3[1] = v13;
            swift_bridgeObjectRelease();
            sub_24F7ADBB0((uint64_t)v58);
            sub_24F7ADBB0((uint64_t)v62);
            swift_bridgeObjectRelease();
            goto LABEL_17;
          }
          sub_24F77F41C();
          uint64_t v37 = *(void *)(v13 + 16);
          BOOL v16 = __OFADD__(v37, 1);
          uint64_t v38 = v37 + 1;
          if (v16) {
            goto LABEL_39;
          }
          sub_24F7813F8(v38);
          swift_bridgeObjectRelease();
          uint64_t v39 = *a3;
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_24F782EE8();
            uint64_t v39 = v46;
          }
          unint64_t v40 = *(void *)(v39 + 16);
          a2 = v53;
          uint64_t v36 = v56;
          if (v40 >= *(void *)(v39 + 24) >> 1)
          {
            sub_24F787184();
            uint64_t v39 = v47;
          }
          *(void *)(v39 + 16) = v40 + 1;
          uint64_t v41 = v39 + 16 * v40;
          *(void *)(v41 + 32) = v11;
          *(void *)(v41 + 40) = v12;
          sub_24F7ADBB0((uint64_t)v62);
          swift_bridgeObjectRelease();
        }
        sub_24F7ADBB0((uint64_t)v62);
        swift_bridgeObjectRelease();
        *a3 = v39;
LABEL_31:
        uint64_t v3 = v36 - 1;
        if (!v3)
        {
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
        v6 += 2;
      }
      while (*(void *)(a2 + 16));
    }
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    unint64_t result = sub_24F8CFEA0();
    __break(1u);
  }
  return result;
}

uint64_t sub_24F7D4818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v8[1] = a4;
  v8[0] = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_24F7D43E8(a1, a2, v8);
  uint64_t result = v8[0];
  if (v4)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_24F7D4898()
{
}

uint64_t sub_24F7D48A0(uint64_t a1)
{
  BOOL v1 = __OFADD__(a1, 1);
  uint64_t result = a1 + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

uint64_t sub_24F7D48B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v22 = a2;
  uint64_t v13 = sub_24F8CF610();
  uint64_t v14 = MEMORY[0x270FA5388](v13 - 8);
  BOOL v16 = (char *)&v21 - v15;
  uint64_t v17 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](v14);
  int v19 = (char *)&v21 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24F8CF1F0();
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 16))(a1, v19, a6);
  MEMORY[0x253363520](v19, a5, a6, a7, a8);
  uint64_t result = sub_24F777048((uint64_t)v16, 1, a7);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, a6);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(a7 - 8) + 32))(v22, v16, a7);
  }
  return result;
}

void sub_24F7D4A7C()
{
}

uint64_t sub_24F7D4AA0(uint64_t result)
{
  void *v1 = result;
  return result;
}

void (*sub_24F7D4AB0(uint64_t **a1, uint64_t *a2, void *a3))(uint64_t *a1, uint64_t a2)
{
  uint64_t v7 = (uint64_t *)malloc(0x40uLL);
  *a1 = v7;
  uint64_t v9 = a3[2];
  uint64_t v8 = a3[3];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v7[4] = TupleTypeMetadata2;
  uint64_t v11 = *(void *)(TupleTypeMetadata2 - 8);
  void v7[5] = v11;
  uint64_t v12 = (char *)malloc(*(void *)(v11 + 64));
  v7[6] = (uint64_t)v12;
  uint64_t v13 = sub_24F7D4CA0(v7, *a2, *v3, v3[1], v9, v8, a3[4]);
  uint64_t v15 = v14;
  v7[7] = (uint64_t)v13;
  (*(void (**)(char *))(*(void *)(v9 - 8) + 16))(v12);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(&v12[*(int *)(TupleTypeMetadata2 + 48)], v15, v8);
  return sub_24F7D4C28;
}

void sub_24F7D4C28(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  (*(void (**)(void, void))(*(void *)(*a1 + 40) + 8))(*(void *)(*a1 + 48), *(void *)(*a1 + 32));
  uint64_t v4 = *(void **)(v3 + 48);
  (*(void (**)(uint64_t, uint64_t))(v3 + 56))(v3, a2);
  free(v4);
  free((void *)v3);
}

void (*sub_24F7D4CA0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7))(void *a1)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *a1 = TupleTypeMetadata2;
  uint64_t v15 = *(void *)(TupleTypeMetadata2 - 8);
  a1[1] = v15;
  BOOL v16 = malloc(*(void *)(v15 + 64));
  a1[2] = (uint64_t)v16;
  sub_24F7D48B0((uint64_t)v16, (uint64_t)v16 + *(int *)(TupleTypeMetadata2 + 48), a2, a3, a4, a5, a6, a7);
  return sub_24F7D4DB4;
}

void sub_24F7D4DB4(void *a1)
{
  BOOL v1 = (void *)a1[2];
  (*(void (**)(void *, void))(a1[1] + 8))(v1, *a1);
  free(v1);
}

void sub_24F7D4E10(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

uint64_t sub_24F7D4E38@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_24F7D48A0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_24F7D4E64(uint64_t *a1)
{
  uint64_t result = sub_24F7D48A0(*a1);
  *a1 = result;
  return result;
}

__n128 sub_24F7D4E90@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_24F7D4EA0(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270F9E108](a1, WitnessTable);
}

uint64_t sub_24F7D4EF4()
{
  return 2;
}

uint64_t sub_24F7D4EFC(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270F9E128](a1, WitnessTable);
}

uint64_t sub_24F7D4F54()
{
  return sub_24F8CEFF0();
}

uint64_t sub_24F7D4F78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = a1;
  void v11[2] = a2;
  v11[3] = a3;
  v11[4] = a4;
  swift_getTupleTypeMetadata2();
  uint64_t v6 = sub_24F8CF1B0();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v9 = sub_24F87D0A8((void (*)(char *, uint64_t))sub_24F7D5378, (uint64_t)v11, v6, a2, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v8);
  uint64_t v12 = a1;
  swift_getWitnessTable();
  sub_24F8CEC80();
  return v9;
}

uint64_t sub_24F7D5094@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = MEMORY[0x270FA5388](TupleTypeMetadata2 - 8);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v12 = *(int *)(v9 + 56);
  uint64_t v13 = &v11[v12];
  uint64_t v14 = a1 + v12;
  uint64_t v15 = *(void *)(a2 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v11, a1, a2);
  uint64_t v16 = *(void *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v13, v14, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a4, v11, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v13, a3);
}

uint64_t sub_24F7D520C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = sub_24F7D4F78(a1, a2[2], a2[3], a2[4]);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_24F7D5240(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((sub_24F8CF1C0() & 1) == 0) {
    return 0;
  }
  return MEMORY[0x270F9D1F0](a2, a4, a5, a6, a7, a8);
}

uint64_t sub_24F7D52D8(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  return sub_24F7D5240(*a1, a1[1], *a2, a2[1], a3[2], a3[3], a3[4], *(void *)(a4 - 8));
}

uint64_t sub_24F7D52FC()
{
  return swift_getWitnessTable();
}

uint64_t sub_24F7D5318()
{
  return swift_getWitnessTable();
}

uint64_t sub_24F7D5334()
{
  return MEMORY[0x263F8D6E0];
}

uint64_t sub_24F7D5340()
{
  return swift_getWitnessTable();
}

uint64_t sub_24F7D535C()
{
  return swift_getWitnessTable();
}

uint64_t sub_24F7D5378@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24F7D5094(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_24F7D539C(uint64_t isStackAllocationSafe, uint64_t (*a2)(unsigned char *), uint64_t a3)
{
  uint64_t v6 = isStackAllocationSafe;
  v14[1] = *MEMORY[0x263EF8340];
  char v7 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v8 = (unint64_t)((1 << v7) + 63) >> 6;
  if ((v7 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    uint64_t v9 = (void *)((char *)v14 - ((8 * v8 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_24F838880(0, v8, v9);
    sub_24F7D5520((uint64_t)v9, v8, v6, a2);
    if (v3) {
      swift_willThrow();
    }
    else {
      return v10;
    }
  }
  else
  {
    uint64_t v11 = (void *)swift_slowAlloc();
    sub_24F838880(0, v8, v11);
    sub_24F7D5520((uint64_t)v11, v8, v6, a2);
    a3 = v12;
    MEMORY[0x2533654D0](v11, -1, -1);
  }
  return a3;
}

void sub_24F7D5520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(unsigned char *))
{
  int64_t v7 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = a3 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a3 + 64);
  int64_t v24 = (unint64_t)(v8 + 63) >> 6;
  while (v10)
  {
    unint64_t v11 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v12 = v11 | (v7 << 6);
LABEL_17:
    uint64_t v16 = (const void *)(*(void *)(a3 + 56) + 216 * v12);
    memcpy(__dst, v16, 0xD2uLL);
    memcpy(v22, v16, 0xD2uLL);
    swift_bridgeObjectRetain();
    sub_24F7ADF80((uint64_t)__dst);
    char v17 = a4(v22);
    sub_24F7AE180((uint64_t)__dst);
    swift_bridgeObjectRelease();
    if (v4) {
      return;
    }
    if (v17)
    {
      *(void *)(a1 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      BOOL v13 = __OFADD__(v20++, 1);
      if (v13) {
        goto LABEL_30;
      }
    }
  }
  BOOL v13 = __OFADD__(v7++, 1);
  if (v13)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v7 >= v24) {
    goto LABEL_27;
  }
  unint64_t v14 = *(void *)(v21 + 8 * v7);
  if (v14)
  {
LABEL_16:
    unint64_t v10 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v7 << 6);
    goto LABEL_17;
  }
  int64_t v15 = v7 + 1;
  if (v7 + 1 >= v24) {
    goto LABEL_27;
  }
  unint64_t v14 = *(void *)(v21 + 8 * v15);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v7 + 2;
  if (v7 + 2 >= v24) {
    goto LABEL_27;
  }
  unint64_t v14 = *(void *)(v21 + 8 * v15);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v7 + 3;
  if (v7 + 3 >= v24)
  {
LABEL_27:
    sub_24F839400(a1, a2, v20);
    return;
  }
  unint64_t v14 = *(void *)(v21 + 8 * v15);
  if (v14)
  {
LABEL_15:
    int64_t v7 = v15;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v7 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v7 >= v24) {
      goto LABEL_27;
    }
    unint64_t v14 = *(void *)(v21 + 8 * v7);
    ++v15;
    if (v14) {
      goto LABEL_16;
    }
  }
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
}

uint64_t sub_24F7D5750()
{
  sub_24F773A34();
  uint64_t v0 = (const void *)sub_24F77FC68();
  uint64_t v3 = sub_24F808344(v0, v1, v2);
  sub_24F77EE80(v3, v4, v5, v6, v7, v8, v9, v10, v12, v13);
  return swift_bridgeObjectRelease();
}

uint64_t sub_24F7D57A4()
{
  sub_24F773A34();
  sub_24F77FC68();
  sub_24F8084AC();
  sub_24F77EE80(v0, v1, v2, v3, v4, v5, v6, v7, v9, v10);
  return swift_bridgeObjectRelease();
}

uint64_t sub_24F7D57F8()
{
  swift_isUniquelyReferenced_nonNull_native();
  uint64_t v12 = *v0;
  *uint64_t v0 = 0x8000000000000000;
  sub_24F80876C();
  uint64_t v2 = v1;
  sub_24F77EE80(v1, v3, v4, v5, v6, v7, v8, v9, v11, v12);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_24F7D58A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24F781274(&qword_269A2AEF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_24F7D5910(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v13 = MEMORY[0x263F8EE78];
  sub_24F795698();
  uint64_t v3 = v13;
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = (char *)(a1 + 48);
    for (uint64_t i = v2 - 1; ; --i)
    {
      char v6 = *v4;
      uint64_t v9 = *((void *)v4 - 2);
      unint64_t v10 = *((void *)v4 - 1);
      sub_24F781F34(v9, v10, *v4);
      swift_getAtKeyPath();
      sub_24F781F10(v9, v10, v6);
      memcpy(__dst, __src, sizeof(__dst));
      uint64_t v13 = v3;
      unint64_t v7 = *(void *)(v3 + 16);
      if (v7 >= *(void *)(v3 + 24) >> 1)
      {
        sub_24F795698();
        uint64_t v3 = v13;
      }
      *(void *)(v3 + 16) = v7 + 1;
      memcpy((void *)(v3 + 168 * v7 + 32), __dst, 0xA3uLL);
      if (!i) {
        break;
      }
      v4 += 24;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  swift_release();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_24F7D5A78(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62) {
    goto LABEL_20;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; uint64_t v5 = sub_24F8CF9E0())
  {
    uint64_t v6 = MEMORY[0x263F8EE78];
    uint64_t v7 = 4;
    uint64_t v16 = a2;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        MEMORY[0x253364060](v7 - 4, a1);
      }
      else {
        swift_retain();
      }
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      sub_24F7D80A8(a2, (uint64_t)v15);
      if (v2)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        return v6;
      }
      swift_release();
      sub_24F7D9FD0((uint64_t)v15, (uint64_t)v13);
      sub_24F7D9FD0((uint64_t)v13, (uint64_t)v14);
      if (sub_24F7996B8((uint64_t)v14) != 1)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_24F7878C8();
          uint64_t v6 = v9;
        }
        unint64_t v8 = *(void *)(v6 + 16);
        if (v8 >= *(void *)(v6 + 24) >> 1)
        {
          sub_24F7878C8();
          uint64_t v6 = v10;
        }
        sub_24F7D9FD0((uint64_t)v13, (uint64_t)__src);
        *(void *)(v6 + 16) = v8 + 1;
        memcpy((void *)(v6 + 168 * v8 + 32), __src, 0xA3uLL);
        a2 = v16;
      }
      if (v7 - 3 == v5)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v6;
      }
      ++v7;
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x263F8EE78];
}

uint64_t sub_24F7D5C8C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  uint64_t result = swift_bridgeObjectRetain();
  if (v4)
  {
    unint64_t v6 = 0;
    unint64_t v7 = v4 - 1;
    uint64_t v8 = MEMORY[0x263F8EE78];
    do
    {
      unint64_t v9 = v6;
      while (1)
      {
        if (v9 >= v4)
        {
          __break(1u);
          return result;
        }
        sub_24F7D8498(a2, (uint64_t)v17);
        if (v2)
        {
          swift_bridgeObjectRelease();
          goto LABEL_17;
        }
        sub_24F7D9FD0((uint64_t)v17, (uint64_t)v15);
        sub_24F7D9FD0((uint64_t)v15, (uint64_t)v16);
        uint64_t result = sub_24F7996B8((uint64_t)v16);
        if (result != 1) {
          break;
        }
        if (v4 == ++v9) {
          goto LABEL_17;
        }
      }
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v18 = v7;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_24F7878C8();
        uint64_t v8 = v12;
      }
      unint64_t v11 = *(void *)(v8 + 16);
      if (v11 >= *(void *)(v8 + 24) >> 1)
      {
        sub_24F7878C8();
        uint64_t v8 = v13;
      }
      unint64_t v6 = v9 + 1;
      sub_24F7D9FD0((uint64_t)v15, (uint64_t)__src);
      *(void *)(v8 + 16) = v11 + 1;
      uint64_t result = (uint64_t)memcpy((void *)(v8 + 168 * v11 + 32), __src, 0xA3uLL);
      unint64_t v7 = v18;
    }
    while (v18 != v9);
  }
  else
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
  }
LABEL_17:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_24F7D5E24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v6 = swift_bridgeObjectRetain();
    uint64_t v7 = *(void *)(v6 + 32);
    uint64_t v8 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24F7D8778(v7, v8, a2, (uint64_t)v20);
    if (v2)
    {
      uint64_t v9 = MEMORY[0x263F8EE78];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v10 = (uint64_t *)(a1 + 56);
      uint64_t v9 = MEMORY[0x263F8EE78];
      while (1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_24F7D9FD0((uint64_t)v20, (uint64_t)v18);
        sub_24F7D9FD0((uint64_t)v18, (uint64_t)v19);
        if (sub_24F7996B8((uint64_t)v19) != 1)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_24F7878C8();
            uint64_t v9 = v14;
          }
          unint64_t v11 = *(void *)(v9 + 16);
          if (v11 >= *(void *)(v9 + 24) >> 1)
          {
            sub_24F7878C8();
            uint64_t v9 = v15;
          }
          sub_24F7D9FD0((uint64_t)v18, (uint64_t)__src);
          *(void *)(v9 + 16) = v11 + 1;
          memcpy((void *)(v9 + 168 * v11 + 32), __src, 0xA3uLL);
        }
        if (!--v4) {
          break;
        }
        uint64_t v12 = *(v10 - 1);
        uint64_t v13 = *v10;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_24F7D8778(v12, v13, a2, (uint64_t)v20);
        v10 += 2;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  return v9;
}

uint64_t sub_24F7D6024@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (!(a1 >> 62))
  {
    if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_3;
    }
LABEL_14:
    sub_24F777318();
    sub_24F782F0C();
    __break(1u);
    goto LABEL_15;
  }
  swift_bridgeObjectRetain();
  uint64_t v22 = sub_24F8CF9E0();
  swift_bridgeObjectRelease();
  if (!v22) {
    goto LABEL_14;
  }
LABEL_3:
  sub_24F8A0264(0);
  if ((a1 & 0xC000000000000001) != 0)
  {
LABEL_15:
    uint64_t v6 = MEMORY[0x253364060](0, a1);
    goto LABEL_5;
  }
  uint64_t v6 = swift_retain();
LABEL_5:
  uint64_t v29 = v6;
  MEMORY[0x270FA5388](v6);
  int64_t v24 = (long long *)&v29;
  uint64_t v7 = (void *)sub_24F81FFB4((void (*)(void))sub_24F7DA164, (uint64_t)v23, a2);
  uint64_t v8 = (uint64_t)v7;
  uint64_t v9 = v7[2];
  if (v9 && (v11 = v7[4], uint64_t v10 = v7[5], v12 = v7[6], swift_bridgeObjectRetain(), v12))
  {
    if (v9 == 1)
    {
      swift_bridgeObjectRetain();
      uint64_t v13 = swift_bridgeObjectRelease();
      *(void *)&long long v26 = v11;
      MEMORY[0x270FA5388](v13);
      int64_t v24 = &v26;
      sub_24F8200C8((uint64_t)sub_24F7DA180, (uint64_t)v23, a1);
      uint64_t v25 = sub_24F78E3CC(v14);
      sub_24F8A6F70(0, 0, 4, (uint64_t)v28);
      sub_24F78D310(v28[0], v28[1], v28[2]);
      swift_bridgeObjectRetain_n();
      sub_24F794FD4();
      uint64_t v16 = v15;
      swift_bridgeObjectRelease();
      v28[0] = v16;
      sub_24F7D8ED0((uint64_t (*)(uint64_t *, uint64_t *))sub_24F79B108, 0);
      swift_bridgeObjectRelease_n();
      uint64_t v17 = v28[0];
      v28[3] = (uint64_t)&type metadata for Column;
      v28[4] = (uint64_t)&protocol witness table for Column;
      v28[0] = v10;
      v28[1] = v12;
      sub_24F7D7F60(v28, v17, a3);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v28);
    }
    swift_bridgeObjectRetain();
    sub_24F7D5A78(a1, v8);
    uint64_t v19 = swift_bridgeObjectRelease();
    v28[0] = 21071;
    v28[1] = 0xE200000000000000;
    memset(&v28[2], 0, 17);
    *(_WORD *)((char *)&v28[4] + 1) = 1;
    MEMORY[0x270FA5388](v19);
    v23[0] = sub_24F781274(&qword_26B1F5970);
    v23[1] = sub_24F7D9F58((unint64_t *)&qword_26B1F5978, &qword_26B1F5970);
    int64_t v24 = (long long *)&protocol witness table for SQLExpression;
    swift_getKeyPath();
    swift_retain();
    sub_24F8C4C14();
    unint64_t v21 = v20;
    swift_release();
    sub_24F816D90((uint64_t)v28, v21, a3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    long long v26 = xmmword_24F8DF640;
    char v27 = 0;
    sub_24F7667B8((uint64_t)&v26);
    sub_24F76F710((uint64_t)&v26, (uint64_t)v28);
    memcpy(a3, v28, 0xA3uLL);
  }
  return swift_release();
}

uint64_t sub_24F7D6414@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  BOOL v6 = sub_24F857840(a1);
  if (v6)
  {
    sub_24F777318();
    sub_24F782F0C();
    __break(1u);
    uint64_t result = swift_release();
    __break(1u);
  }
  else
  {
    MEMORY[0x270FA5388](v6);
    uint64_t v7 = (void *)sub_24F820274((uint64_t)sub_24F7DA19C, (uint64_t)&v25, a2);
    uint64_t v8 = (uint64_t)v7;
    uint64_t v9 = v7[2];
    if (v9 && (v11 = v7[4], uint64_t v10 = v7[5], swift_bridgeObjectRetain(), v10))
    {
      if (v9 == 1)
      {
        swift_bridgeObjectRetain();
        uint64_t v12 = swift_bridgeObjectRelease();
        MEMORY[0x270FA5388](v12);
        sub_24F8203B4((uint64_t)sub_24F7DA1B8, (uint64_t)&v25, a1, (uint64_t)&v29, v13, v14, v15, v16, v25, v26, v27, v28, v29, v30, v31);
        uint64_t v30 = sub_24F78E3CC(v17);
        sub_24F8A6F70(0, 0, 4, (uint64_t)&v32);
        sub_24F78D310(v32, *((unint64_t *)&v32 + 1), v33);
        swift_bridgeObjectRetain_n();
        sub_24F794FD4();
        uint64_t v19 = v18;
        swift_bridgeObjectRelease();
        *(void *)&long long v32 = v19;
        sub_24F7D8ED0((uint64_t (*)(uint64_t *, uint64_t *))sub_24F79B108, 0);
        swift_bridgeObjectRelease_n();
        uint64_t v20 = v32;
        int v34 = &type metadata for Column;
        int v35 = &protocol witness table for Column;
        *(void *)&long long v32 = v11;
        *((void *)&v32 + 1) = v10;
        sub_24F7D7F60(&v32, v20, a3);
        swift_bridgeObjectRelease();
        swift_release();
        return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)&v32);
      }
      else
      {
        swift_bridgeObjectRetain();
        sub_24F7D5C8C(a1, v8);
        uint64_t v22 = swift_bridgeObjectRelease();
        *(void *)&long long v32 = 21071;
        *((void *)&v32 + 1) = 0xE200000000000000;
        uint64_t v33 = 0;
        int v34 = 0;
        LOBYTE(v35) = 0;
        *(_WORD *)((char *)&v35 + 1) = 1;
        MEMORY[0x270FA5388](v22);
        uint64_t v25 = sub_24F781274(&qword_26B1F5970);
        uint64_t v26 = sub_24F7D9F58((unint64_t *)&qword_26B1F5978, &qword_26B1F5970);
        *(void *)&long long v27 = &protocol witness table for SQLExpression;
        swift_getKeyPath();
        swift_retain();
        sub_24F8C4C14();
        unint64_t v24 = v23;
        swift_release();
        sub_24F816D90((uint64_t)&v32, v24, a3);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      long long v32 = xmmword_24F8DF640;
      LOBYTE(v33) = 0;
      sub_24F7667B8((uint64_t)&v32);
      return sub_24F76F710((uint64_t)&v32, (uint64_t)a3);
    }
  }
  return result;
}

uint64_t sub_24F7D6790@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (a1[2])
  {
    uint64_t v6 = a1[5];
    v29[0] = a1[4];
    v29[1] = v6;
    MEMORY[0x270FA5388](v29[0]);
    unint64_t v24 = (long long *)v29;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v7 = (void *)sub_24F820490((uint64_t)sub_24F7D9EC8, (uint64_t)v23, a2);
    uint64_t v8 = (uint64_t)v7;
    uint64_t v9 = v7[2];
    if (v9
      && (v11 = v7[4], uint64_t v10 = v7[5],
                       uint64_t v13 = v7[6],
                       uint64_t v12 = v7[7],
                       swift_bridgeObjectRetain(),
                       swift_bridgeObjectRetain(),
                       v10))
    {
      if (v9 == 1)
      {
        swift_bridgeObjectRetain();
        uint64_t v14 = swift_bridgeObjectRelease();
        *(void *)&long long v26 = v11;
        *((void *)&v26 + 1) = v10;
        MEMORY[0x270FA5388](v14);
        unint64_t v24 = &v26;
        swift_bridgeObjectRetain();
        uint64_t v15 = sub_24F8205C4((void (*)(void))sub_24F7D9F30, (uint64_t)v23, (uint64_t)a1);
        uint64_t v25 = sub_24F78E3CC(v15);
        sub_24F8A6F70(0, 0, 4, (uint64_t)v28);
        sub_24F78D310(v28[0], v28[1], v28[2]);
        swift_bridgeObjectRetain_n();
        sub_24F794FD4();
        uint64_t v17 = v16;
        swift_bridgeObjectRelease();
        v28[0] = v17;
        sub_24F7D8ED0((uint64_t (*)(uint64_t *, uint64_t *))sub_24F79B108, 0);
        swift_bridgeObjectRelease_n();
        uint64_t v18 = v28[0];
        v28[3] = (uint64_t)&type metadata for Column;
        v28[4] = (uint64_t)&protocol witness table for Column;
        v28[0] = v13;
        v28[1] = v12;
        swift_bridgeObjectRetain();
        sub_24F7D7F60(v28, v18, a3);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v28);
        return swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRetain();
      sub_24F7D5E24((uint64_t)a1, v8);
      uint64_t v19 = swift_bridgeObjectRelease();
      v28[0] = 21071;
      v28[1] = 0xE200000000000000;
      memset(&v28[2], 0, 17);
      *(_WORD *)((char *)&v28[4] + 1) = 1;
      MEMORY[0x270FA5388](v19);
      v23[0] = sub_24F781274(&qword_26B1F5970);
      v23[1] = sub_24F7D9F58((unint64_t *)&qword_26B1F5978, &qword_26B1F5970);
      unint64_t v24 = (long long *)&protocol witness table for SQLExpression;
      swift_getKeyPath();
      swift_retain();
      sub_24F8C4C14();
      unint64_t v21 = v20;
      swift_release();
      sub_24F816D90((uint64_t)v28, v21, a3);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      long long v26 = xmmword_24F8DF640;
      char v27 = 0;
      sub_24F7667B8((uint64_t)&v26);
      sub_24F76F710((uint64_t)&v26, (uint64_t)v28);
      memcpy(a3, v28, 0xA3uLL);
    }
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  sub_24F8CF9D0();
  __break(1u);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t static TableRecord.belongsTo<A>(_:key:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_24F7D6C38(a1, a2, a3, a4, a5, a6, a7, a8, (void (*)(unsigned char *, uint64_t, uint64_t, void *, uint64_t, uint64_t, double))sub_24F870614);
}

uint64_t static TableRecord.hasMany<A>(_:key:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_24F7D6C38(a1, a2, a3, a4, a5, a6, a7, a8, (void (*)(unsigned char *, uint64_t, uint64_t, void *, uint64_t, uint64_t, double))sub_24F79A470);
}

uint64_t static TableRecord.hasOne<A>(_:key:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_24F7D6C38(a1, a2, a3, a4, a5, a6, a7, a8, (void (*)(unsigned char *, uint64_t, uint64_t, void *, uint64_t, uint64_t, double))sub_24F8708CC);
}

uint64_t sub_24F7D6C38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(unsigned char *, uint64_t, uint64_t, void *, uint64_t, uint64_t, double))
{
  uint64_t v13 = *a4;
  uint64_t v14 = a4[1];
  double v15 = sub_24F790A0C(a6, a8, (uint64_t)v18);
  v17[0] = v13;
  v17[1] = v14;
  a9(v18, a2, a3, v17, a5, a6, v15);
  swift_bridgeObjectRetain();
  return sub_24F799198(v13);
}

uint64_t static TableRecord.belongsTo<A>(_:key:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_24F7D6D38(a1, a2, a3, a4, a5, a6, a7, (void (*)(unsigned char *, uint64_t, uint64_t, void *, uint64_t, uint64_t, double))sub_24F870614);
}

uint64_t static TableRecord.hasMany<A>(_:key:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_24F7D6D38(a1, a2, a3, a4, a5, a6, a7, (void (*)(unsigned char *, uint64_t, uint64_t, void *, uint64_t, uint64_t, double))sub_24F79A470);
}

uint64_t static TableRecord.hasOne<A>(_:key:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_24F7D6D38(a1, a2, a3, a4, a5, a6, a7, (void (*)(unsigned char *, uint64_t, uint64_t, void *, uint64_t, uint64_t, double))sub_24F8708CC);
}

uint64_t sub_24F7D6D38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(unsigned char *, uint64_t, uint64_t, void *, uint64_t, uint64_t, double))
{
  uint64_t v13 = *a4;
  uint64_t v14 = a4[1];
  type metadata accessor for Table();
  double v15 = sub_24F7C813C((uint64_t)v18);
  v17[0] = v13;
  v17[1] = v14;
  a8(v18, a2, a3, v17, a5, a6, v15);
  swift_bridgeObjectRetain();
  return sub_24F799198(v13);
}

uint64_t static TableRecord.association<A>(to:on:)@<X0>(void *__src@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  memcpy(__dst, __src, 0xBBuLL);
  type metadata accessor for CommonTableExpression();
  sub_24F7C813C((uint64_t)v12);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = a3;
  __dst[0] = sub_24F7D6F9C;
  __dst[1] = v7;
  sub_24F77C680();
  sub_24F827F24(v8, v9, a4);
  return swift_retain();
}

uint64_t sub_24F7D6ECC@<X0>(void (*a1)(void *__return_ptr)@<X2>, uint64_t a2@<X8>)
{
  a1(v6);
  uint64_t v3 = v7;
  uint64_t v4 = v8;
  sub_24F7811D0(v6, v7);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 8))(v9, v3, v4);
  nullsub_1(v9);
  sub_24F7D9FD0((uint64_t)v9, a2);
  return _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v6);
}

uint64_t sub_24F7D6F64()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24F7D6F9C@<X0>(uint64_t a1@<X8>)
{
  return sub_24F7D6ECC(*(void (**)(void *__return_ptr))(v1 + 16), a1);
}

uint64_t static TableRecord.association<A>(to:)@<X0>(void *__src@<X0>, uint64_t *a2@<X8>)
{
  memcpy(__dst, __src, 0xBBuLL);
  type metadata accessor for CommonTableExpression();
  sub_24F7C813C((uint64_t)v7);
  __dst[0] = sub_24F807080;
  __dst[1] = 0;
  sub_24F77C680();
  return sub_24F827F24(v3, v4, a2);
}

#error "24F7D70D0: call analysis failed (funcsize=47)"

#error "24F7D71A0: call analysis failed (funcsize=49)"

void *TableRecord<>.request<A>(for:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X5>, void *a4@<X8>)
{
  void (*v17)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  void __src[21];
  void v21[4];
  char v22;
  void __dst[30];

  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v17 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v8 + 8);
  v17(&v19, a2, v8);
  if (*(void *)(v19 + 16))
  {
    uint64_t v15 = a1;
    uint64_t v16 = a4;
    memcpy(__dst, (const void *)(v19 + 32), 0xE3uLL);
    uint64_t v9 = __dst[3];
    uint64_t v10 = __dst[4];
    uint64_t v11 = __dst[5];
    uint64_t v12 = __dst[6];
    int v13 = SLOBYTE(__dst[7]);
    sub_24F79900C((uint64_t)__dst);
    swift_bridgeObjectRelease();
    sub_24F799140(v9, v10, v11, v12, v13);
    sub_24F7AD5F4((uint64_t)__dst);
    if ((v13 & 0x80000000) == 0)
    {
      v21[0] = v9;
      v21[1] = v10;
      v21[2] = v11;
      void v21[3] = v12;
      uint64_t v22 = v13 & 1;
      v17(__src, a2, v8);
      uint64_t v18 = __src[0];
      swift_bridgeObjectRetain();
      sub_24F7D73DC((uint64_t)&v18, (uint64_t)v21, v4, v15);
      swift_bridgeObjectRelease();
      sub_24F780738();
      sub_24F868EE0((uint64_t)__src);
      swift_bridgeObjectRelease();
      swift_getAssociatedTypeWitness();
      return sub_24F7A59FC(__src, v16);
    }
  }
  else
  {
    __break(1u);
  }
  sub_24F780738();
  sub_24F8CF9D0();
  __break(1u);
  uint64_t result = (void *)swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

void sub_24F7D73DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a4;
  uint64_t v8 = *(void *)(a4 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = &v30[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v55 = MEMORY[0x270FA5388](a1);
  uint64_t v16 = *(void *)v55;
  if (*(void *)(*(void *)v55 + 16))
  {
    *(void *)&long long v48 = v13;
    uint64_t v49 = v14;
    uint64_t v50 = v15;
    uint64_t v17 = v12;
    uint64_t v18 = v11;
    memcpy(__dst, (const void *)(v16 + 96), 0xA2uLL);
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v8 + 16))(&v30[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)], a3, v6);
    unint64_t v5 = (*(unsigned __int8 *)(v8 + 80) + 89) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    a3 = swift_allocObject();
    *(void *)(a3 + 16) = v6;
    *(void *)(a3 + 24) = v18;
    uint64_t v19 = v48;
    *(void *)(a3 + 32) = v17;
    *(void *)(a3 + 40) = v19;
    uint64_t v20 = v50;
    *(void *)(a3 + 48) = v49;
    long long v21 = *(_OWORD *)(v20 + 16);
    *(_OWORD *)(a3 + 56) = *(_OWORD *)v20;
    *(_OWORD *)(a3 + 72) = v21;
    *(unsigned char *)(a3 + 88) = *(unsigned char *)(v20 + 32);
    uint64_t v22 = *(void (**)(unint64_t, unsigned char *, uint64_t))(v8 + 32);
    LOBYTE(v8) = v8 + 32;
    v22(a3 + v5, &v30[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)], v6);
    uint64_t v4 = *((void *)&__dst[2] + 1);
    unint64_t v23 = sub_24F7D8CA0;
    if (*((void *)&__dst[2] + 1))
    {
      uint64_t v10 = *(unsigned char **)&__dst[3];
      unint64_t v24 = (void *)swift_allocObject();
      uint64_t v24[2] = v4;
      v24[3] = v10;
      v24[4] = sub_24F7D8CA0;
      v24[5] = a3;
      unint64_t v23 = sub_24F7AD274;
      a3 = (uint64_t)v24;
    }
    char v52 = BYTE1(__dst[10]);
    uint64_t v25 = *(void *)v55;
    if (*(void *)(*(void *)v55 + 16))
    {
      uint64_t v36 = *(void *)&__dst[1];
      uint64_t v37 = *((void *)&__dst[0] + 1);
      uint64_t v38 = *(void *)&__dst[0];
      long long v39 = *(_OWORD *)((char *)&__dst[1] + 8);
      int v40 = LOBYTE(__dst[10]);
      int v41 = BYTE8(__dst[6]);
      int v42 = LOBYTE(__dst[4]);
      uint64_t v43 = *((void *)&__dst[3] + 1);
      long long v44 = __dst[9];
      long long v45 = __dst[8];
      long long v46 = __dst[7];
      long long v47 = *(_OWORD *)((char *)&__dst[5] + 8);
      long long v48 = *(_OWORD *)((char *)&__dst[4] + 8);
      uint64_t v49 = v23;
      memcpy(v53, (const void *)(v25 + 32), 0xE3uLL);
      int v35 = BYTE2(v53[28]);
      unint64_t v5 = v53[4];
      uint64_t v33 = v53[5];
      uint64_t v34 = v53[3];
      uint64_t v32 = v53[6];
      int v31 = LOBYTE(v53[7]);
      uint64_t v10 = (unsigned char *)v53[0];
      uint64_t v6 = v53[1];
      LOBYTE(v8) = v53[2];
      sub_24F7D8D00(v20);
      sub_24F7D8D44(__dst);
      sub_24F79900C((uint64_t)v53);
      sub_24F7D8E14();
      LOBYTE(v4) = v52;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_10:
  sub_24F83CCE4();
  uint64_t v25 = v29;
LABEL_6:
  if (*(void *)(v25 + 16))
  {
    memcpy(v51, (const void *)(v25 + 32), 0xE3uLL);
    *(void *)(v25 + 32) = v10;
    *(void *)(v25 + 40) = v6;
    *(unsigned char *)(v25 + 48) = v8;
    *(void *)(v25 + 56) = v34;
    *(void *)(v25 + 64) = v5;
    uint64_t v26 = v32;
    *(void *)(v25 + 72) = v33;
    *(void *)(v25 + 80) = v26;
    *(unsigned char *)(v25 + 88) = v31;
    uint64_t v27 = v37;
    *(void *)(v25 + 96) = v38;
    *(void *)(v25 + 104) = v27;
    *(void *)(v25 + 112) = v36;
    *(_OWORD *)(v25 + 120) = v39;
    *(void *)(v25 + 136) = v49;
    *(void *)(v25 + 144) = a3;
    *(void *)(v25 + 152) = v43;
    *(unsigned char *)(v25 + 160) = v42;
    *(_OWORD *)(v25 + 168) = v48;
    *(_OWORD *)(v25 + 184) = v47;
    *(unsigned char *)(v25 + 200) = v41;
    long long v28 = v45;
    *(_OWORD *)(v25 + 208) = v46;
    *(_OWORD *)(v25 + 224) = v28;
    *(_OWORD *)(v25 + 240) = v44;
    *(unsigned char *)(v25 + 256) = v40;
    *(unsigned char *)(v25 + 257) = v4;
    *(unsigned char *)(v25 + 258) = v35;
    sub_24F7AD5F4((uint64_t)v51);
    *(void *)uint64_t v55 = v25;
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_24F7D7774@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X5>, void *a5@<X8>)
{
  uint64_t v27 = a4;
  uint64_t v23 = a2;
  uint64_t v9 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v13 = v12[1];
  long long v24 = *v12;
  long long v25 = v13;
  char v26 = *((unsigned char *)v12 + 32);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v15, v14);
  uint64_t v16 = sub_24F800E40(a1);
  if (v5) {
    return swift_bridgeObjectRelease();
  }
  long long v21 = a5;
  uint64_t v22 = v16;
  swift_bridgeObjectRelease();
  sub_24F781274(&qword_269A2A0D8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_24F8DDBF0;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v23, a3);
  uint64_t v19 = swift_retain();
  sub_24F821810(v19, (uint64_t)v11, a3, v27);
  sub_24F7D6790((void *)inited, v22, v21);
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  return sub_24F87FFCC();
}

void static TableRecord.including<A>(all:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void static TableRecord.including<A>(optional:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_24F7D7988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = sub_24F77F46C(a1, a2, a3, a4, a5, a6, a7, a8, v18, v20, v22, v24, v26, v28, v30, v32, v34, v36, v38,
                       v40,
                       v42,
                       v44,
                       v46,
                       v48,
                       v50,
                       v52,
                       v54,
                       v56,
                       v58,
                       v60);
  sub_24F773884(v9, v10, v11, v12, v13, v14, v15, v16, v19, v21, v23, v25, v27, v29, v31, v33, v35, v37, v39,
    v41,
    v43,
    v45,
    v47,
    v49,
    v51,
    v53,
    v55,
    v57,
    v59,
    v61);
  type metadata accessor for QueryInterfaceRequest();
  swift_getWitnessTable();
  uint64_t v17 = sub_24F770F38();
  v8(v17);
  sub_24F7D8E14();
}

void static TableRecord.including<A>(required:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void static TableRecord.joining<A>(optional:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void static TableRecord.joining<A>(required:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void static TableRecord.annotated<A>(withOptional:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void static TableRecord.annotated<A>(withRequired:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_24F7D7A8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = sub_24F77F46C(a1, a2, a3, a4, a5, a6, a7, a8, v18, v20, v22, v24, v26, v28, v30, v32, v34, v36, v38,
                       v40,
                       v42,
                       v44,
                       v46,
                       v48,
                       v50,
                       v52,
                       v54,
                       v56,
                       v58,
                       v60);
  sub_24F773884(v9, v10, v11, v12, v13, v14, v15, v16, v19, v21, v23, v25, v27, v29, v31, v33, v35, v37, v39,
    v41,
    v43,
    v45,
    v47,
    v49,
    v51,
    v53,
    v55,
    v57,
    v59,
    v61);
  type metadata accessor for QueryInterfaceRequest();
  swift_getWitnessTable();
  uint64_t v17 = sub_24F770F38();
  v8(v17);
  sub_24F7D8E14();
}

void _s12GRDBInternal11TableRecordPAAE9annotated4withAA21QueryInterfaceRequestVyxGAA20AssociationAggregateVyxGd_tFZ_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = static TableRecord.all()(a2, a3, v32);
  sub_24F773884(v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21,
    v22,
    v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    v29,
    v30,
    v31,
    v32[0]);
  type metadata accessor for QueryInterfaceRequest();
  swift_getWitnessTable();
  DerivableRequest.annotated(with:)();
  sub_24F7D8E14();
}

void static TableRecord.having(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  static TableRecord.all()(a2, a3, __src);
  memcpy(__dst, __src, sizeof(__dst));
  type metadata accessor for QueryInterfaceRequest();
  swift_getWitnessTable();
  DerivableRequest.having(_:)();
  sub_24F7D8E14();
}

uint64_t sub_24F7D7C88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v11 = a5[5];
  uint64_t v12 = a5[6];
  sub_24F7811D0(a5 + 2, v11);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 88))(a1, a2, v11, v12);
  if (v14)
  {
    sub_24F8CF7D0();
    swift_bridgeObjectRelease();
    sub_24F8CEEB0();
    uint64_t result = sub_24F8CF9D0();
    __break(1u);
  }
  else
  {
    *a6 = v13;
    a6[1] = a3;
    a6[2] = a4;
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_24F7D7DB4@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, void *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_24F7D7DD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = a1;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24F7D7E0C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result = (uint64_t)sub_24F8973A0(a1, a2);
  if (v2)
  {
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

double sub_24F7D7E58@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 1;
  *(_OWORD *)a1 = xmmword_24F8DF640;
  *(unsigned char *)(a1 + 16) = 0;
  return result;
}

uint64_t sub_24F7D7E6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)&long long v10 = a1;
  *((void *)&v10 + 1) = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_24F7BF460((uint64_t)v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = v13;
  if (v13)
  {
    uint64_t v5 = v14;
    sub_24F7811D0(v12, v13);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v5 + 24))(&v10, v4, v5);
    long long v9 = v10;
    char v6 = v11;
    uint64_t result = _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v12);
    long long v8 = v9;
  }
  else
  {
    uint64_t result = sub_24F7817A4((uint64_t)v12);
    long long v8 = 0uLL;
    char v6 = 4;
  }
  *(_OWORD *)a3 = v8;
  *(unsigned char *)(a3 + 16) = v6;
  return result;
}

uint64_t sub_24F7D7F60@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  sub_24F781274(&qword_26B1F7348);
  sub_24F7D9F58((unint64_t *)&qword_26B1F72B0, &qword_26B1F7348);
  swift_getKeyPath();
  swift_retain();
  uint64_t v6 = sub_24F7D5910(a2);
  swift_release();
  v12[0] = v6;
  sub_24F7D9FA8((uint64_t)v12);
  sub_24F7AD780((uint64_t)v12, (uint64_t)__src);
  memcpy(__dst, __src, sizeof(__dst));
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_24F7811D0(a1, v7);
  (*(void (**)(void *__return_ptr, uint64_t))(*(void *)(v8 + 8) + 8))(v14, v7);
  memcpy(v10, v14, 0xA3uLL);
  sub_24F7D33F4(v10, a3);
  sub_24F76F7F0((uint64_t)v14, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))sub_24F76C98C);
  return swift_bridgeObjectRelease();
}

uint64_t sub_24F7D80A8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v5)
  {
    uint64_t v6 = (uint64_t *)(a1 + 48);
    uint64_t v22 = MEMORY[0x263F8EE78];
    do
    {
      uint64_t v7 = *(v6 - 1);
      uint64_t v8 = *v6;
      uint64_t v9 = *(v6 - 2);
      swift_bridgeObjectRetain();
      if (!v8) {
        break;
      }
      sub_24F8973A0(v9, (uint64_t)v30);
      if (v3)
      {
        uint64_t result = swift_unexpectedError();
        __break(1u);
        return result;
      }
      long long v10 = *(_OWORD *)v30;
      char v11 = v30[16];
      if (v30[16] == 4 && *(_OWORD *)v30 == 0)
      {
        sub_24F781F10(0, 0, 4);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_24F7A46F0((uint64_t)v30);
        return sub_24F7D9FD0((uint64_t)v30, a2);
      }
      v26[0] = v7;
      v26[1] = v8;
      sub_24F7991DC((uint64_t)v26);
      sub_24F76F710((uint64_t)v26, (uint64_t)v27);
      long long v28 = v10;
      char v29 = v11;
      sub_24F7667B8((uint64_t)&v28);
      sub_24F76F710((uint64_t)&v28, (uint64_t)__src);
      sub_24F76F710((uint64_t)v26, (uint64_t)v30);
      sub_24F76F710((uint64_t)&v28, (uint64_t)&v31);
      sub_24F76F7F0((uint64_t)__src, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))sub_24F76CB14);
      sub_24F781F34(v10, *((unint64_t *)&v10 + 1), v11);
      swift_bridgeObjectRetain();
      sub_24F781F10(0, 0, 4);
      sub_24F781F10(v10, *((unint64_t *)&v10 + 1), v11);
      sub_24F7DA038((uint64_t)v30);
      memcpy(v25, v27, 0xA3uLL);
      memcpy(v24, __src, 0xA3uLL);
      sub_24F815BAC(0, v25, v24, v23);
      uint64_t v13 = v5;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_24F7878C8();
        uint64_t v22 = v15;
      }
      unint64_t v14 = *(void *)(v22 + 16);
      if (v14 >= *(void *)(v22 + 24) >> 1)
      {
        sub_24F7878C8();
        uint64_t v22 = v16;
      }
      v6 += 3;
      *(void *)(v22 + 16) = v14 + 1;
      memcpy((void *)(v22 + 168 * v14 + 32), v23, 0xA3uLL);
      sub_24F781F10(v10, *((unint64_t *)&v10 + 1), v11);
      swift_bridgeObjectRelease();
      uint64_t v5 = v13 - 1;
      uint64_t v3 = 0;
    }
    while (v13 != 1);
  }
  uint64_t v17 = swift_bridgeObjectRelease();
  *(void *)uint64_t v30 = 4476481;
  *(void *)&v30[8] = 0xE300000000000000;
  *(_OWORD *)&v30[16] = xmmword_24F8DF640;
  *(_WORD *)&v30[32] = 256;
  v30[34] = 0;
  MEMORY[0x270FA5388](v17);
  sub_24F781274(&qword_26B1F5970);
  sub_24F7D9F58((unint64_t *)&qword_26B1F5978, &qword_26B1F5970);
  swift_getKeyPath();
  swift_retain();
  sub_24F8C4C14();
  unint64_t v19 = v18;
  swift_release();
  sub_24F816D90((uint64_t)v30, v19, __src);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  memcpy(v30, __src, sizeof(v30));
  nullsub_1(v30);
  return sub_24F7D9FD0((uint64_t)v30, a2);
}

uint64_t sub_24F7D8498@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v16 = a2;
  if (v3)
  {
    uint64_t v5 = (uint64_t *)(v4 + 40);
    uint64_t v6 = MEMORY[0x263F8EE78];
    do
    {
      uint64_t v7 = *(v5 - 1);
      uint64_t v8 = *v5;
      swift_bridgeObjectRetain();
      if (!v8) {
        break;
      }
      v19[0] = v7;
      v19[1] = v8;
      sub_24F7991DC((uint64_t)v19);
      sub_24F76F710((uint64_t)v19, (uint64_t)v20);
      long long v21 = xmmword_24F8DF640;
      char v22 = 0;
      sub_24F7667B8((uint64_t)&v21);
      sub_24F76F710((uint64_t)&v21, (uint64_t)v23);
      sub_24F76F710((uint64_t)v19, (uint64_t)v24);
      sub_24F76F710((uint64_t)&v21, (uint64_t)&v25);
      sub_24F76F7F0((uint64_t)v20, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))sub_24F76CB14);
      sub_24F7DA038((uint64_t)v24);
      memcpy(v18, v20, 0xA3uLL);
      memcpy(v17, v23, 0xA3uLL);
      sub_24F815BAC(0, v18, v17, __src);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_24F7878C8();
        uint64_t v6 = v10;
      }
      unint64_t v9 = *(void *)(v6 + 16);
      if (v9 >= *(void *)(v6 + 24) >> 1)
      {
        sub_24F7878C8();
        uint64_t v6 = v11;
      }
      v5 += 2;
      *(void *)(v6 + 16) = v9 + 1;
      memcpy((void *)(v6 + 168 * v9 + 32), __src, 0xA3uLL);
      swift_bridgeObjectRelease();
      --v3;
    }
    while (v3);
  }
  uint64_t v12 = swift_bridgeObjectRelease();
  *(void *)uint64_t v24 = 4476481;
  *(void *)&v24[8] = 0xE300000000000000;
  *(_OWORD *)&unsigned char v24[16] = xmmword_24F8DF640;
  *(_WORD *)&v24[32] = 256;
  v24[34] = 0;
  MEMORY[0x270FA5388](v12);
  sub_24F781274(&qword_26B1F5970);
  sub_24F7D9F58((unint64_t *)&qword_26B1F5978, &qword_26B1F5970);
  swift_getKeyPath();
  swift_retain();
  sub_24F8C4C14();
  unint64_t v14 = v13;
  swift_release();
  sub_24F816D90((uint64_t)v24, v14, __src);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  memcpy(v24, __src, sizeof(v24));
  nullsub_1(v24);
  return sub_24F7D9FD0((uint64_t)v24, v16);
}

uint64_t sub_24F7D8778@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void (*v15)(void *__return_ptr, unint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v30;
  unsigned char v31[168];
  unsigned char v32[168];
  unsigned char v33[168];
  void v34[21];
  unsigned char v35[168];
  void v36[2];
  char v37;
  unsigned char v38[163];
  uint64_t v39;
  void __src[22];

  uint64_t v6 = *(void *)(a3 + 16);
  swift_bridgeObjectRetain();
  uint64_t v27 = a4;
  if (v6)
  {
    uint64_t v7 = (uint64_t *)(a3 + 56);
    uint64_t v8 = MEMORY[0x263F8EE78];
    do
    {
      uint64_t v10 = *(v7 - 1);
      uint64_t v9 = *v7;
      uint64_t v11 = *(v7 - 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!v11) {
        break;
      }
      uint64_t v30 = v6;
      __src[0] = a1;
      __src[1] = a2;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_24F7BF460((uint64_t)v38);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v12 = *(void *)&v38[24];
      if (*(void *)&v38[24])
      {
        uint64_t v13 = v8;
        uint64_t v14 = *(void *)&v38[32];
        sub_24F7811D0(v38, *(uint64_t *)&v38[24]);
        uint64_t v15 = *(void (**)(void *__return_ptr, unint64_t, uint64_t))(v14 + 24);
        uint64_t v16 = v14;
        uint64_t v8 = v13;
        v15(__src, v12, v16);
        uint64_t v17 = __src[0];
        unint64_t v12 = __src[1];
        unint64_t v18 = LOBYTE(__src[2]);
        _s12GRDBInternal13DatabaseEventVwxx_0((uint64_t)v38);
      }
      else
      {
        sub_24F7817A4((uint64_t)v38);
        uint64_t v17 = 0;
        unint64_t v18 = 4;
      }
      if (v18 == 4 && !(v12 | v17))
      {
        sub_24F781F10(0, 0, 4);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_24F7A46F0((uint64_t)v38);
        return sub_24F7D9FD0((uint64_t)v38, v27);
      }
      v34[0] = v10;
      v34[1] = v9;
      sub_24F7991DC((uint64_t)v34);
      sub_24F76F710((uint64_t)v34, (uint64_t)v35);
      v36[0] = v17;
      v36[1] = v12;
      uint64_t v37 = v18;
      sub_24F7667B8((uint64_t)v36);
      sub_24F76F710((uint64_t)v36, (uint64_t)__src);
      sub_24F76F710((uint64_t)v34, (uint64_t)v38);
      sub_24F76F710((uint64_t)v36, (uint64_t)&v39);
      sub_24F76F7F0((uint64_t)__src, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))sub_24F76CB14);
      sub_24F781F34(v17, v12, v18);
      swift_bridgeObjectRetain();
      sub_24F781F10(0, 0, 4);
      sub_24F781F10(v17, v12, v18);
      sub_24F7DA038((uint64_t)v38);
      memcpy(v33, v35, 0xA3uLL);
      memcpy(v32, __src, 0xA3uLL);
      sub_24F815BAC(0, v33, v32, v31);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_24F7878C8();
        uint64_t v8 = v21;
      }
      unint64_t v19 = *(void *)(v8 + 16);
      uint64_t v20 = v8;
      if (v19 >= *(void *)(v8 + 24) >> 1)
      {
        sub_24F7878C8();
        uint64_t v20 = v22;
      }
      v7 += 4;
      *(void *)(v20 + 16) = v19 + 1;
      uint64_t v8 = v20;
      memcpy((void *)(v20 + 168 * v19 + 32), v31, 0xA3uLL);
      sub_24F781F10(v17, v12, v18);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v6 = v30 - 1;
    }
    while (v30 != 1);
  }
  uint64_t v23 = swift_bridgeObjectRelease();
  *(void *)uint64_t v38 = 4476481;
  *(void *)&v38[8] = 0xE300000000000000;
  *(_OWORD *)&v38[16] = xmmword_24F8DF640;
  *(_WORD *)&v38[32] = 256;
  v38[34] = 0;
  MEMORY[0x270FA5388](v23);
  sub_24F781274(&qword_26B1F5970);
  sub_24F7D9F58((unint64_t *)&qword_26B1F5978, &qword_26B1F5970);
  swift_getKeyPath();
  swift_retain();
  sub_24F8C4C14();
  uint64_t v25 = v24;
  swift_release();
  sub_24F816D90((uint64_t)v38, v25, __src);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  memcpy(v38, __src, sizeof(v38));
  nullsub_1(v38);
  return sub_24F7D9FD0((uint64_t)v38, v27);
}

uint64_t sub_24F7D8BC8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 72))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + ((v3 + 89) & ~v3), v1);
  return swift_deallocObject();
}

uint64_t sub_24F7D8CA0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_24F7D7774(a1, v2+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v2 + 16) - 8) + 80) + 89) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v2 + 16) - 8) + 80)), *(void *)(v2 + 16), *(void *)(v2 + 32), a2);
}

uint64_t sub_24F7D8D00(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  sub_24F799198(v2);
  return a1;
}

void *sub_24F7D8D44(void *a1)
{
  uint64_t v2 = a1[5];
  uint64_t v4 = a1[14];
  uint64_t v5 = a1[16];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_24F78C440(v2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_24F78C440(v4);
  sub_24F78C440(v5);
  return a1;
}

void sub_24F7D8E14()
{
  sub_24F76B854();
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[14];
  uint64_t v3 = v0[16];
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  sub_24F787238(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_24F787238(v2);
  sub_24F787238(v3);
  sub_24F775B3C();
}

uint64_t sub_24F7D8ED0(uint64_t (*a1)(uint64_t *, uint64_t *), uint64_t a2)
{
  uint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_24F897588();
    uint64_t v5 = v6;
  }
  uint64_t result = sub_24F7D8F54(a1, a2);
  *uint64_t v2 = v5;
  return result;
}

uint64_t sub_24F7D8F54(uint64_t (*a1)(uint64_t *, uint64_t *), uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v142 = a2;
  uint64_t v5 = v2[1];
  uint64_t result = sub_24F8CFAD0();
  if (result >= v5)
  {
    if (v5 < 0) {
      goto LABEL_134;
    }
    if (v5) {
      return sub_24F7D97F4(0, v5, 1, a1);
    }
    return result;
  }
  if (v5 < -1) {
    goto LABEL_133;
  }
  uint64_t v129 = v5;
  uint64_t v123 = result;
  uint64_t v119 = v2;
  if (v5 < 2)
  {
    uint64_t v7 = MEMORY[0x263F8EE78];
    uint64_t v132 = (char *)(MEMORY[0x263F8EE78] + 32);
    uint64_t v124 = MEMORY[0x263F8EE78];
    if (v5 != 1)
    {
      unint64_t v43 = *(void *)(MEMORY[0x263F8EE78] + 16);
LABEL_96:
      if (v43 >= 2)
      {
        uint64_t v106 = *v119;
        do
        {
          unint64_t v107 = v43 - 2;
          if (v43 < 2) {
            goto LABEL_128;
          }
          if (!v106) {
            goto LABEL_142;
          }
          uint64_t v108 = v7;
          uint64_t v109 = v7 + 32;
          uint64_t v110 = *(void *)(v7 + 32 + 16 * v107);
          uint64_t v111 = *(void *)(v7 + 32 + 16 * (v43 - 1) + 8);
          uint64_t result = sub_24F7D9974((char *)(v106 + 24 * v110), (char *)(v106 + 24 * *(void *)(v109 + 16 * (v43 - 1))), (char *)(v106 + 24 * v111), v132, a1);
          if (v4) {
            break;
          }
          if (v111 < v110) {
            goto LABEL_129;
          }
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)sub_24F897538();
            uint64_t v108 = result;
          }
          if (v107 >= *(void *)(v108 + 16)) {
            goto LABEL_130;
          }
          uint64_t v112 = (void *)(v108 + 32 + 16 * v107);
          *uint64_t v112 = v110;
          v112[1] = v111;
          unint64_t v113 = *(void *)(v108 + 16);
          if (v43 > v113) {
            goto LABEL_131;
          }
          uint64_t v7 = v108;
          uint64_t result = (uint64_t)memmove((void *)(v108 + 32 + 16 * (v43 - 1)), (const void *)(v108 + 32 + 16 * v43), 16 * (v113 - v43));
          *(void *)(v108 + 16) = v113 - 1;
          unint64_t v43 = v113 - 1;
        }
        while (v113 > 2);
      }
LABEL_107:
      swift_bridgeObjectRelease();
      goto LABEL_110;
    }
  }
  else
  {
    uint64_t result = sub_24F8CF120();
    *(void *)(result + 16) = v5 / 2;
    uint64_t v124 = result;
    uint64_t v132 = (char *)(result + 32);
  }
  uint64_t v8 = 0;
  uint64_t v9 = *v2;
  uint64_t v120 = *v2 + 64;
  uint64_t v7 = MEMORY[0x263F8EE78];
  uint64_t v10 = v5;
  uint64_t v133 = *v2;
  while (1)
  {
    uint64_t v11 = v8;
    uint64_t v12 = v8 + 1;
    if (v8 + 1 < v10)
    {
      uint64_t v125 = v7;
      uint64_t v13 = v9 + 24 * v12;
      unint64_t v15 = *(void *)(v13 + 8);
      char v16 = *(unsigned char *)(v13 + 16);
      uint64_t v139 = *(void *)v13;
      uint64_t v14 = v139;
      unint64_t v140 = v15;
      char v141 = v16;
      uint64_t v17 = v9 + 24 * v8;
      uint64_t v18 = v4;
      unint64_t v20 = *(void *)(v17 + 8);
      char v21 = *(unsigned char *)(v17 + 16);
      uint64_t v136 = *(void *)v17;
      uint64_t v19 = v136;
      unint64_t v137 = v20;
      char v138 = v21;
      sub_24F781F34(v139, v15, v16);
      sub_24F781F34(v19, v20, v21);
      int v130 = a1(&v139, &v136);
      if (v18)
      {
        sub_24F781F10(v19, v20, v21);
        uint64_t v114 = v14;
        unint64_t v115 = v15;
        char v116 = v16;
LABEL_109:
        sub_24F781F10(v114, v115, v116);
        swift_bridgeObjectRelease();
LABEL_110:
        *(void *)(v124 + 16) = 0;
        return swift_bridgeObjectRelease();
      }
      sub_24F781F10(v19, v20, v21);
      uint64_t result = sub_24F781F10(v14, v15, v16);
      uint64_t v12 = v11 + 2;
      if (v11 + 2 < v129)
      {
        uint64_t v121 = v11;
        char v22 = (char *)(v120 + 24 * v11);
        while (1)
        {
          uint64_t v23 = v12;
          uint64_t v24 = *((void *)v22 - 2);
          unint64_t v25 = *((void *)v22 - 1);
          char v26 = *v22;
          uint64_t v139 = v24;
          unint64_t v140 = v25;
          char v141 = v26;
          unint64_t v28 = *((void *)v22 - 4);
          char v29 = *(v22 - 24);
          uint64_t v136 = *((void *)v22 - 5);
          uint64_t v27 = v136;
          unint64_t v137 = v28;
          char v138 = v29;
          sub_24F781F34(v24, v25, v26);
          sub_24F781F34(v27, v28, v29);
          int v30 = a1(&v139, &v136);
          sub_24F781F10(v27, v28, v29);
          uint64_t result = sub_24F781F10(v24, v25, v26);
          if ((v130 ^ v30)) {
            break;
          }
          v22 += 24;
          uint64_t v12 = v23 + 1;
          if (v23 + 1 >= v129)
          {
            uint64_t v12 = v129;
            goto LABEL_18;
          }
        }
        uint64_t v12 = v23;
LABEL_18:
        uint64_t v11 = v121;
      }
      uint64_t v9 = v133;
      uint64_t v4 = 0;
      uint64_t v7 = v125;
      if (v130)
      {
        if (v12 < v11) {
          goto LABEL_138;
        }
        if (v11 < v12)
        {
          uint64_t v31 = 24 * v12;
          uint64_t v32 = 24 * v11;
          uint64_t v33 = v12;
          uint64_t v34 = v11;
          do
          {
            if (v34 != --v33)
            {
              if (!v133) {
                goto LABEL_141;
              }
              uint64_t v35 = v133 + v32;
              uint64_t v36 = v133 + v31;
              char v37 = *(unsigned char *)(v133 + v32 + 16);
              long long v38 = *(_OWORD *)(v133 + v32);
              uint64_t v39 = *(void *)(v133 + v31 - 8);
              *(_OWORD *)uint64_t v35 = *(_OWORD *)(v133 + v31 - 24);
              *(void *)(v35 + 16) = v39;
              *(_OWORD *)(v36 - 24) = v38;
              *(unsigned char *)(v36 - 8) = v37;
            }
            ++v34;
            v31 -= 24;
            v32 += 24;
          }
          while (v34 < v33);
        }
      }
    }
    if (v12 < v129)
    {
      if (__OFSUB__(v12, v11)) {
        goto LABEL_135;
      }
      if (v12 - v11 < v123) {
        break;
      }
    }
LABEL_35:
    if (v12 < v11) {
      goto LABEL_132;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_24F897440(0, *(void *)(v7 + 16) + 1, 1, (char *)v7);
      uint64_t v7 = result;
    }
    unint64_t v42 = *(void *)(v7 + 16);
    unint64_t v41 = *(void *)(v7 + 24);
    unint64_t v43 = v42 + 1;
    uint64_t v9 = v133;
    if (v42 >= v41 >> 1)
    {
      uint64_t result = (uint64_t)sub_24F897440((char *)(v41 > 1), v42 + 1, 1, (char *)v7);
      uint64_t v9 = v133;
      uint64_t v7 = result;
    }
    *(void *)(v7 + 16) = v43;
    uint64_t v44 = v7 + 32;
    uint64_t v45 = (uint64_t *)(v7 + 32 + 16 * v42);
    *uint64_t v45 = v11;
    v45[1] = v12;
    uint64_t v127 = v12;
    if (v42)
    {
      while (1)
      {
        unint64_t v46 = v43 - 1;
        if (v43 >= 4)
        {
          unint64_t v51 = v44 + 16 * v43;
          uint64_t v52 = *(void *)(v51 - 64);
          uint64_t v53 = *(void *)(v51 - 56);
          BOOL v57 = __OFSUB__(v53, v52);
          uint64_t v54 = v53 - v52;
          if (v57) {
            goto LABEL_117;
          }
          uint64_t v56 = *(void *)(v51 - 48);
          uint64_t v55 = *(void *)(v51 - 40);
          BOOL v57 = __OFSUB__(v55, v56);
          uint64_t v49 = v55 - v56;
          char v50 = v57;
          if (v57) {
            goto LABEL_118;
          }
          unint64_t v58 = v43 - 2;
          uint64_t v59 = (uint64_t *)(v44 + 16 * (v43 - 2));
          uint64_t v61 = *v59;
          uint64_t v60 = v59[1];
          BOOL v57 = __OFSUB__(v60, v61);
          uint64_t v62 = v60 - v61;
          if (v57) {
            goto LABEL_119;
          }
          BOOL v57 = __OFADD__(v49, v62);
          uint64_t v63 = v49 + v62;
          if (v57) {
            goto LABEL_121;
          }
          if (v63 >= v54)
          {
            uint64_t v81 = (uint64_t *)(v44 + 16 * v46);
            uint64_t v83 = *v81;
            uint64_t v82 = v81[1];
            BOOL v57 = __OFSUB__(v82, v83);
            uint64_t v84 = v82 - v83;
            if (v57) {
              goto LABEL_127;
            }
            BOOL v74 = v49 < v84;
            goto LABEL_72;
          }
        }
        else
        {
          if (v43 != 3)
          {
            uint64_t v75 = *(void *)(v7 + 32);
            uint64_t v76 = *(void *)(v7 + 40);
            BOOL v57 = __OFSUB__(v76, v75);
            uint64_t v68 = v76 - v75;
            char v69 = v57;
            goto LABEL_66;
          }
          uint64_t v48 = *(void *)(v7 + 32);
          uint64_t v47 = *(void *)(v7 + 40);
          BOOL v57 = __OFSUB__(v47, v48);
          uint64_t v49 = v47 - v48;
          char v50 = v57;
        }
        if (v50) {
          goto LABEL_120;
        }
        unint64_t v58 = v43 - 2;
        uint64_t v64 = (uint64_t *)(v44 + 16 * (v43 - 2));
        uint64_t v66 = *v64;
        uint64_t v65 = v64[1];
        BOOL v67 = __OFSUB__(v65, v66);
        uint64_t v68 = v65 - v66;
        char v69 = v67;
        if (v67) {
          goto LABEL_122;
        }
        uint64_t v70 = (uint64_t *)(v44 + 16 * v46);
        uint64_t v72 = *v70;
        uint64_t v71 = v70[1];
        BOOL v57 = __OFSUB__(v71, v72);
        uint64_t v73 = v71 - v72;
        if (v57) {
          goto LABEL_124;
        }
        if (__OFADD__(v68, v73)) {
          goto LABEL_126;
        }
        if (v68 + v73 >= v49)
        {
          BOOL v74 = v49 < v73;
LABEL_72:
          if (v74) {
            unint64_t v46 = v58;
          }
          goto LABEL_74;
        }
LABEL_66:
        if (v69) {
          goto LABEL_123;
        }
        char v77 = (uint64_t *)(v44 + 16 * v46);
        uint64_t v79 = *v77;
        uint64_t v78 = v77[1];
        BOOL v57 = __OFSUB__(v78, v79);
        uint64_t v80 = v78 - v79;
        if (v57) {
          goto LABEL_125;
        }
        if (v80 < v68) {
          goto LABEL_83;
        }
LABEL_74:
        unint64_t v85 = v46 - 1;
        if (v46 - 1 >= v43)
        {
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
          goto LABEL_137;
        }
        if (!v9) {
          goto LABEL_139;
        }
        uint64_t v86 = v7;
        uint64_t v87 = (uint64_t *)(v44 + 16 * v85);
        uint64_t v88 = *v87;
        uint64_t v89 = (void *)(v44 + 16 * v46);
        uint64_t v90 = v89[1];
        uint64_t result = sub_24F7D9974((char *)(v9 + 24 * *v87), (char *)(v9 + 24 * *v89), (char *)(v9 + 24 * v90), v132, a1);
        if (v4) {
          goto LABEL_107;
        }
        if (v90 < v88) {
          goto LABEL_114;
        }
        if (v46 > *(void *)(v86 + 16)) {
          goto LABEL_115;
        }
        *uint64_t v87 = v88;
        *(void *)(v44 + 16 * v85 + 8) = v90;
        unint64_t v91 = *(void *)(v86 + 16);
        if (v46 >= v91) {
          goto LABEL_116;
        }
        uint64_t v7 = v86;
        unint64_t v43 = v91 - 1;
        uint64_t result = (uint64_t)memmove((void *)(v44 + 16 * v46), v89 + 2, 16 * (v91 - 1 - v46));
        *(void *)(v86 + 16) = v91 - 1;
        uint64_t v9 = v133;
        if (v91 <= 2) {
          goto LABEL_83;
        }
      }
    }
    unint64_t v43 = 1;
LABEL_83:
    uint64_t v8 = v127;
    uint64_t v10 = v129;
    if (v127 >= v129) {
      goto LABEL_96;
    }
  }
  if (__OFADD__(v11, v123)) {
    goto LABEL_136;
  }
  uint64_t v40 = v129;
  if (v11 + v123 < v129) {
    uint64_t v40 = v11 + v123;
  }
  if (v40 >= v11)
  {
    if (v12 == v40) {
      goto LABEL_35;
    }
    uint64_t v126 = v7;
    uint64_t v134 = v4;
    uint64_t v92 = (long long *)(v9 + 24 * v12);
    uint64_t v122 = v11;
    uint64_t v117 = v40;
LABEL_86:
    uint64_t v93 = v11;
    uint64_t v118 = v92;
    uint64_t v94 = v92;
    uint64_t v128 = v12;
    while (1)
    {
      uint64_t v131 = v93;
      unint64_t v96 = *((void *)v94 + 1);
      char v97 = *((unsigned char *)v94 + 16);
      uint64_t v139 = *(void *)v94;
      uint64_t v95 = v139;
      unint64_t v140 = v96;
      uint64_t v98 = *((void *)v94 - 3);
      unint64_t v99 = *((void *)v94 - 2);
      char v141 = v97;
      char v100 = *((unsigned char *)v94 - 8);
      uint64_t v136 = v98;
      unint64_t v137 = v99;
      char v138 = v100;
      sub_24F781F34(v139, v96, v97);
      sub_24F781F34(v98, v99, v100);
      char v101 = a1(&v139, &v136);
      if (v134) {
        break;
      }
      char v102 = v101;
      sub_24F781F10(v98, v99, v100);
      uint64_t result = sub_24F781F10(v95, v96, v97);
      if ((v102 & 1) == 0)
      {
        uint64_t v103 = v128;
LABEL_93:
        uint64_t v12 = v103 + 1;
        uint64_t v92 = (long long *)((char *)v118 + 24);
        uint64_t v11 = v122;
        if (v12 == v117)
        {
          uint64_t v12 = v117;
          uint64_t v4 = 0;
          uint64_t v7 = v126;
          goto LABEL_35;
        }
        goto LABEL_86;
      }
      uint64_t v103 = v128;
      if (!v133) {
        goto LABEL_140;
      }
      char v104 = *((unsigned char *)v94 + 16);
      long long v105 = *v94;
      *uint64_t v94 = *(long long *)((char *)v94 - 24);
      *((void *)v94 + 2) = *((void *)v94 - 1);
      *((unsigned char *)v94 - 8) = v104;
      *(long long *)((char *)v94 - 24) = v105;
      uint64_t v94 = (long long *)((char *)v94 - 24);
      uint64_t v93 = v131 + 1;
      if (v128 == v131 + 1) {
        goto LABEL_93;
      }
    }
    sub_24F781F10(v98, v99, v100);
    uint64_t v114 = v95;
    unint64_t v115 = v96;
    char v116 = v97;
    goto LABEL_109;
  }
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
  return result;
}

uint64_t sub_24F7D97F4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t *, void *))
{
  uint64_t v6 = v5;
  if (a3 != a2)
  {
    uint64_t v7 = result;
    uint64_t v22 = *v4;
    uint64_t v8 = *v4 + 24 * a3;
    uint64_t v19 = result;
LABEL_3:
    uint64_t v21 = v8;
    uint64_t v23 = a3;
    while (1)
    {
      unint64_t v9 = *(void *)(v8 + 8);
      int v10 = *(unsigned __int8 *)(v8 + 16);
      v29[0] = *(void *)v8;
      v29[1] = v9;
      unint64_t v25 = v9;
      uint64_t v26 = v29[0];
      uint64_t v12 = *(void *)(v8 - 24);
      unint64_t v11 = *(void *)(v8 - 16);
      int v31 = v10;
      char v30 = v10;
      char v13 = *(unsigned char *)(v8 - 8);
      v27[0] = v12;
      v27[1] = v11;
      char v28 = v13;
      sub_24F781F34(v29[0], v9, v10);
      sub_24F781F34(v12, v11, v13);
      uint64_t v14 = v6;
      char v15 = a4(v29, v27);
      sub_24F781F10(v12, v11, v13);
      uint64_t result = sub_24F781F10(v26, v25, v31);
      if (v14) {
        break;
      }
      if ((v15 & 1) == 0)
      {
        uint64_t v6 = 0;
        uint64_t v18 = v23;
LABEL_10:
        a3 = v18 + 1;
        uint64_t v8 = v21 + 24;
        uint64_t v7 = v19;
        if (a3 != a2) {
          goto LABEL_3;
        }
        return result;
      }
      if (!v22)
      {
        __break(1u);
        return result;
      }
      char v16 = *(unsigned char *)(v8 + 16);
      long long v17 = *(_OWORD *)v8;
      *(_OWORD *)uint64_t v8 = *(_OWORD *)(v8 - 24);
      *(void *)(v8 + 16) = *(void *)(v8 - 8);
      *(unsigned char *)(v8 - 8) = v16;
      *(_OWORD *)(v8 - 24) = v17;
      v8 -= 24;
      ++v7;
      uint64_t v18 = v23;
      uint64_t v6 = 0;
      if (v23 == v7) {
        goto LABEL_10;
      }
    }
  }
  return result;
}

uint64_t sub_24F7D9974(char *a1, char *a2, char *a3, char *a4, uint64_t (*a5)(uint64_t *, uint64_t *))
{
  uint64_t v5 = a4;
  uint64_t v7 = a2;
  uint64_t v8 = a1;
  uint64_t v9 = a2 - a1;
  uint64_t v10 = (a2 - a1) / 24;
  uint64_t v11 = a3 - a2;
  uint64_t v12 = (a3 - a2) / 24;
  if (v10 < v12)
  {
    sub_24F8BED64(a1, (a2 - a1) / 24, a4);
    unint64_t v13 = (unint64_t)&v5[24 * v10];
    if (v7 < a3 && v9 >= 24)
    {
      uint64_t v66 = &v5[24 * v10];
      __dst = a3;
      while (1)
      {
        uint64_t v56 = v8;
        __srca = v5;
        uint64_t v21 = *(void *)v7;
        unint64_t v22 = *((void *)v7 + 1);
        uint64_t v23 = v7;
        char v24 = v7[16];
        uint64_t v63 = v21;
        unint64_t v64 = v22;
        char v65 = v24;
        unint64_t v26 = *((void *)v5 + 1);
        char v27 = v5[16];
        uint64_t v60 = *(void *)v5;
        uint64_t v25 = v60;
        unint64_t v61 = v26;
        char v62 = v27;
        sub_24F781F34(v21, v22, v24);
        sub_24F781F34(v25, v26, v27);
        char v28 = a5(&v63, &v60);
        if (v55) {
          break;
        }
        char v29 = v28;
        sub_24F781F10(v25, v26, v27);
        sub_24F781F10(v21, v22, v24);
        if (v29)
        {
          char v30 = v23;
          uint64_t v7 = v23 + 24;
          int v31 = v56;
          uint64_t v5 = __srca;
          BOOL v32 = v56 == v23;
        }
        else
        {
          int v31 = v56;
          char v30 = __srca;
          uint64_t v5 = __srca + 24;
          BOOL v32 = v56 == __srca;
          uint64_t v7 = v23;
        }
        if (!v32)
        {
          long long v33 = *(_OWORD *)v30;
          *((void *)v31 + 2) = *((void *)v30 + 2);
          *(_OWORD *)int v31 = v33;
        }
        uint64_t v8 = v31 + 24;
        unint64_t v13 = (unint64_t)v66;
        if (v5 >= v66 || v7 >= __dst)
        {
          uint64_t v7 = v8;
          goto LABEL_13;
        }
      }
      sub_24F781F10(v25, v26, v27);
      sub_24F781F10(v21, v22, v24);
      uint64_t v18 = v56;
      uint64_t v19 = v5;
      size_t v16 = 24 * ((v66 - v5) / 24);
      BOOL v48 = v56 < v5 || v56 >= &v5[v16];
      if (v48 || v56 != v5) {
        goto LABEL_19;
      }
      return 1;
    }
    uint64_t v7 = v8;
LABEL_13:
    size_t v16 = 24 * ((uint64_t)(v13 - (void)v5) / 24);
    BOOL v17 = v7 < v5 || v7 >= &v5[v16];
    if (v17 || v7 != v5)
    {
      uint64_t v18 = v7;
      uint64_t v19 = v5;
      goto LABEL_19;
    }
    return 1;
  }
  sub_24F8BED64(a2, (a3 - a2) / 24, a4);
  unint64_t v13 = (unint64_t)&v5[24 * v12];
  if (v8 >= v7 || v11 < 24) {
    goto LABEL_13;
  }
  unint64_t v34 = (unint64_t)(a3 - 24);
  BOOL v57 = v8;
  __src = v5;
  while (1)
  {
    uint64_t v66 = (char *)v13;
    unint64_t v36 = *(void *)(v13 - 16);
    unint64_t v35 = v13 - 24;
    char v37 = *(unsigned char *)(v13 - 8);
    uint64_t v63 = *(void *)(v13 - 24);
    unint64_t v64 = v36;
    char v65 = v37;
    uint64_t v51 = v63;
    __dsta = v7;
    long long v38 = v7;
    uint64_t v41 = *((void *)v7 - 3);
    unint64_t v39 = *((void *)v38 - 2);
    uint64_t v40 = v38 - 24;
    char v42 = v40[16];
    uint64_t v60 = v41;
    unint64_t v61 = v39;
    char v62 = v42;
    sub_24F781F34(v63, v36, v37);
    sub_24F781F34(v41, v39, v42);
    char v43 = a5(&v63, &v60);
    if (v55) {
      break;
    }
    char v44 = v43;
    char v50 = (char *)(v34 + 24);
    sub_24F781F10(v41, v39, v42);
    sub_24F781F10(v51, v36, v37);
    if (v44)
    {
      BOOL v45 = v50 != __dsta || v34 >= (unint64_t)__dsta;
      uint64_t v7 = v40;
      unint64_t v13 = (unint64_t)v66;
      if (!v45) {
        goto LABEL_43;
      }
    }
    else
    {
      BOOL v46 = v50 != v66 || v34 >= (unint64_t)v66;
      uint64_t v40 = (char *)v35;
      unint64_t v13 = v35;
      uint64_t v7 = __dsta;
      if (!v46) {
        goto LABEL_43;
      }
    }
    long long v47 = *(_OWORD *)v40;
    *(void *)(v34 + 16) = *((void *)v40 + 2);
    *(_OWORD *)unint64_t v34 = v47;
LABEL_43:
    uint64_t v5 = __src;
    if (v7 > v57)
    {
      v34 -= 24;
      if (v13 > (unint64_t)__src) {
        continue;
      }
    }
    goto LABEL_13;
  }
  sub_24F781F10(v41, v39, v42);
  sub_24F781F10(v51, v36, v37);
  uint64_t v19 = __src;
  size_t v16 = 24 * ((v66 - __src) / 24);
  uint64_t v18 = __dsta;
  if (__dsta < __src || __dsta >= &__src[24 * ((v66 - __src) / 24)])
  {
    memmove(__dsta, __src, v16);
  }
  else
  {
    if (__dsta == __src) {
      return 1;
    }
LABEL_19:
    memmove(v18, v19, v16);
  }
  return 1;
}

uint64_t sub_24F7D9D5C()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24F7D9D9C@<X0>(uint64_t *a1@<X0>, void **a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_24F7D7C88(*a1, a1[1], a1[2], a1[3], *a2, a3);
}

uint64_t sub_24F7D9DE0@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  return sub_24F7D7E0C(*a1, a2);
}

uint64_t sub_24F7D9E18@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_24F7D7DB4(*(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

void sub_24F7D9E54(uint64_t a1@<X8>)
{
}

uint64_t sub_24F7D9E84@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_24F7D7DD4(*a1, a1[1], a1[2], a1[3], a2);
}

uint64_t sub_24F7D9EC8()
{
  sub_24F773A5C();
  return sub_24F7D9E84(v0, v1);
}

uint64_t sub_24F7D9EF0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24F7D7E6C(*a1, a1[1], a2);
}

uint64_t sub_24F7D9F30()
{
  sub_24F773A5C();
  return sub_24F7D9EF0(v0, v1);
}

uint64_t sub_24F7D9F58(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_24F7688B8(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24F7D9FA8(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 104) & 1;
  __int16 v2 = *(_WORD *)(result + 160) & 0x81FF;
  *(void *)(result + 64) &= 1uLL;
  *(void *)(result + 104) = v1;
  *(_WORD *)(result + 160) = v2;
  return result;
}

uint64_t sub_24F7D9FD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24F781274(qword_26B1F7458);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_24F7DA038(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 184);
  unint64_t v17 = *(void *)(a1 + 176);
  uint64_t v18 = *(void *)(a1 + 168);
  unint64_t v3 = *(void *)(a1 + 192);
  uint64_t v4 = *(void *)(a1 + 200);
  uint64_t v5 = *(void *)(a1 + 208);
  uint64_t v6 = *(void *)(a1 + 216);
  uint64_t v7 = *(void *)(a1 + 224);
  long long v15 = *(_OWORD *)(a1 + 248);
  long long v16 = *(_OWORD *)(a1 + 232);
  long long v13 = *(_OWORD *)(a1 + 280);
  long long v14 = *(_OWORD *)(a1 + 264);
  long long v12 = *(_OWORD *)(a1 + 296);
  unsigned int v8 = *(unsigned __int16 *)(a1 + 328) | (*(unsigned __int8 *)(a1 + 330) << 16);
  uint64_t v9 = *(void *)(a1 + 312);
  uint64_t v10 = *(void *)(a1 + 320);
  sub_24F76C98C(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(unsigned __int16 *)(a1 + 160) | (*(unsigned __int8 *)(a1 + 162) << 16));
  sub_24F76C98C(v18, v17, v2, v3, v4, v5, v6, v7, v16, *((uint64_t *)&v16 + 1), v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v9,
    v10,
    v8);
  return a1;
}

uint64_t sub_24F7DA164()
{
  sub_24F773A5C();
  return sub_24F7D9D9C(v0, v1, v2);
}

uint64_t sub_24F7DA180()
{
  sub_24F773A5C();
  return sub_24F7D9DE0(v0, v1);
}

uint64_t sub_24F7DA19C()
{
  sub_24F773A5C();
  return sub_24F7D9E18(v0, v1);
}

void sub_24F7DA1B8()
{
  sub_24F773A5C();
  sub_24F7D9E54(v0);
}

void CGFloat.databaseValue.getter(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
}

uint64_t static CGFloat.fromDatabaseValue(_:)(uint64_t a1)
{
  uint64_t result = *(uint64_t *)a1;
  int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 != 1)
  {
    if (v3) {
      *(double *)&uint64_t result = 0.0;
    }
    else {
      *(double *)&uint64_t result = (double)result;
    }
  }
  return result;
}

void sub_24F7DA21C(uint64_t a1@<X8>)
{
  CGFloat.databaseValue.getter(a1, *v1);
}

uint64_t sub_24F7DA224@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = static CGFloat.fromDatabaseValue(_:)(a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

BOOL sub_24F7DA254(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t sub_24F7DA260(unsigned __int8 a1, char a2)
{
  uint64_t v3 = 0x4B4341424C4C4F52;
  unint64_t v4 = 0xE800000000000000;
  uint64_t v5 = a1;
  uint64_t v6 = 0x4B4341424C4C4F52;
  switch(v5)
  {
    case 1:
      unint64_t v4 = 0xE500000000000000;
      uint64_t v6 = 0x54524F4241;
      break;
    case 2:
      unint64_t v4 = 0xE400000000000000;
      uint64_t v6 = 1279869254;
      break;
    case 3:
      unint64_t v4 = 0xE600000000000000;
      uint64_t v6 = 0x45524F4E4749;
      break;
    case 4:
      unint64_t v4 = 0xE700000000000000;
      uint64_t v6 = 0x4543414C504552;
      break;
    default:
      break;
  }
  unint64_t v7 = 0xE800000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v7 = 0xE500000000000000;
      uint64_t v3 = 0x54524F4241;
      break;
    case 2:
      unint64_t v7 = 0xE400000000000000;
      uint64_t v3 = 1279869254;
      break;
    case 3:
      unint64_t v7 = 0xE600000000000000;
      uint64_t v3 = 0x45524F4E4749;
      break;
    case 4:
      unint64_t v7 = 0xE700000000000000;
      uint64_t v3 = 0x4543414C504552;
      break;
    default:
      break;
  }
  if (v6 == v3 && v4 == v7) {
    sub_24F780348();
  }
  else {
    char v2 = sub_24F770FBC();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_24F7DA3E4(unsigned __int8 a1, char a2)
{
  uint64_t v3 = 0x45444143534143;
  unint64_t v4 = 0xE700000000000000;
  uint64_t v5 = a1;
  uint64_t v6 = 0x45444143534143;
  switch(v5)
  {
    case 1:
      unint64_t v4 = 0xE800000000000000;
      uint64_t v6 = 0x5443495254534552;
      break;
    case 2:
      unint64_t v4 = 0xE800000000000000;
      uint64_t v6 = 0x4C4C554E20544553;
      break;
    case 3:
      uint64_t v6 = 0x4146454420544553;
      unint64_t v4 = 0xEB00000000544C55;
      break;
    default:
      break;
  }
  unint64_t v7 = 0xE700000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v7 = 0xE800000000000000;
      uint64_t v3 = 0x5443495254534552;
      break;
    case 2:
      unint64_t v7 = 0xE800000000000000;
      uint64_t v3 = 0x4C4C554E20544553;
      break;
    case 3:
      uint64_t v3 = 0x4146454420544553;
      unint64_t v7 = 0xEB00000000544C55;
      break;
    default:
      break;
  }
  if (v6 == v3 && v4 == v7) {
    sub_24F780348();
  }
  else {
    char v2 = sub_24F770FBC();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_24F7DA560(char a1, char a2)
{
  unint64_t v2 = 0xE900000000000045;
  uint64_t v3 = 0x4445525245464544;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v4 = 0x54414944454D4D49;
    }
    else {
      uint64_t v4 = 0x564953554C435845;
    }
    unint64_t v5 = 0xE900000000000045;
  }
  else
  {
    unint64_t v5 = 0xE800000000000000;
    uint64_t v4 = 0x4445525245464544;
  }
  if (a2)
  {
    if (a2 == 1) {
      uint64_t v3 = 0x54414944454D4D49;
    }
    else {
      uint64_t v3 = 0x564953554C435845;
    }
  }
  else
  {
    unint64_t v2 = 0xE800000000000000;
  }
  if (v4 == v3 && v5 == v2) {
    char v7 = 1;
  }
  else {
    char v7 = sub_24F8CFD00();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

BOOL sub_24F7DA664(int a1, int a2)
{
  return a1 == a2;
}

uint64_t sub_24F7DA670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4) {
    return 1;
  }
  else {
    return sub_24F8CFD00();
  }
}

uint64_t sub_24F7DA68C(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xEA00000000006464;
  unint64_t v3 = 0x2D4D4D2D79797979;
  uint64_t v4 = a1;
  unint64_t v5 = "yyyy-MM-dd HH:mm:ss.SSS";
  uint64_t v6 = 0x2D4D4D2D79797979;
  unint64_t v7 = 0xEA00000000006464;
  unsigned int v8 = "yyyy-MM-dd HH:mm:ss";
  uint64_t v9 = "yyyy-MM-dd HH:mm";
  switch(v4)
  {
    case 1:
      unint64_t v7 = 0x800000024F8D0F50;
      uint64_t v6 = 0xD000000000000010;
      break;
    case 2:
      uint64_t v6 = 0xD000000000000013;
      uint64_t v10 = "yyyy-MM-dd HH:mm";
      goto LABEL_5;
    case 3:
      uint64_t v6 = 0xD000000000000017;
      uint64_t v10 = "yyyy-MM-dd HH:mm:ss";
LABEL_5:
      unint64_t v7 = (unint64_t)v10 | 0x8000000000000000;
      break;
    case 4:
      unint64_t v7 = 0xE500000000000000;
      uint64_t v6 = 0x6D6D3A4848;
      break;
    case 5:
      unint64_t v7 = 0xE800000000000000;
      uint64_t v6 = sub_24F76B8AC();
      break;
    case 6:
      uint64_t v6 = sub_24F76B8AC();
      unint64_t v7 = 0xEC0000005353532ELL;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = (unint64_t)(v9 - 32) | 0x8000000000000000;
      unint64_t v3 = 0xD000000000000010;
      break;
    case 2:
      unint64_t v3 = 0xD000000000000013;
      uint64_t v11 = v8 - 32;
      goto LABEL_13;
    case 3:
      unint64_t v3 = 0xD000000000000017;
      uint64_t v11 = v5 - 32;
LABEL_13:
      unint64_t v2 = (unint64_t)v11 | 0x8000000000000000;
      break;
    case 4:
      unint64_t v2 = 0xE500000000000000;
      unint64_t v3 = 0x6D6D3A4848;
      break;
    case 5:
      unint64_t v2 = 0xE800000000000000;
      sub_24F781D14();
      break;
    case 6:
      sub_24F781D14();
      unint64_t v2 = 0xEC0000005353532ELL;
      break;
    default:
      break;
  }
  if (v6 == v3 && v7 == v2) {
    char v13 = 1;
  }
  else {
    char v13 = sub_24F8CFD00();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v13 & 1;
}

uint64_t sub_24F7DA898(char a1, char a2)
{
  BOOL v3 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v4 = 1313427274;
  }
  else {
    uint64_t v4 = 0x494F4A205446454CLL;
  }
  if (v3) {
    unint64_t v5 = 0xE90000000000004ELL;
  }
  else {
    unint64_t v5 = 0xE400000000000000;
  }
  if (a2) {
    uint64_t v6 = 1313427274;
  }
  else {
    uint64_t v6 = 0x494F4A205446454CLL;
  }
  if (a2) {
    unint64_t v7 = 0xE400000000000000;
  }
  else {
    unint64_t v7 = 0xE90000000000004ELL;
  }
  if (v4 == v6 && v5 == v7) {
    sub_24F780348();
  }
  else {
    char v2 = sub_24F770FBC();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_24F7DA928(char a1, char a2)
{
  unint64_t v4 = 0xE100000000000000;
  uint64_t v5 = 61;
  switch(a1)
  {
    case 1:
      unint64_t v4 = 0xE200000000000000;
      uint64_t v5 = 15932;
      break;
    case 2:
      unint64_t v4 = 0xE200000000000000;
      uint64_t v5 = 21321;
      break;
    case 3:
      unint64_t v4 = 0xE600000000000000;
      uint64_t v5 = 0x544F4E205349;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE100000000000000;
  uint64_t v7 = 61;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE200000000000000;
      uint64_t v7 = 15932;
      break;
    case 2:
      unint64_t v6 = 0xE200000000000000;
      uint64_t v7 = 21321;
      break;
    case 3:
      unint64_t v6 = 0xE600000000000000;
      uint64_t v7 = 0x544F4E205349;
      break;
    default:
      break;
  }
  if (v5 == v7 && v4 == v6) {
    sub_24F780348();
  }
  else {
    char v2 = sub_24F770FBC();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

BOOL sub_24F7DAA48(char a1, char a2)
{
  return dword_24F8E02C0[a1] == dword_24F8E02C0[a2];
}

uint64_t ResultCode.rawValue.getter()
{
  return *v0;
}

uint64_t ResultCode.init(rawValue:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void ResultCode.primaryResultCode.getter(_DWORD *a1@<X8>)
{
}

BOOL static ResultCode.~= infix(_:_:)(_DWORD *a1, int *a2)
{
  int v2 = *a2;
  if (*a1 < 0x100u) {
    int v2 = *a2;
  }
  return *a1 == v2;
}

void static ResultCode.SQLITE_OK.getter(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

void static ResultCode.SQLITE_ERROR.getter(_DWORD *a1@<X8>)
{
}

void static ResultCode.SQLITE_INTERNAL.getter(_DWORD *a1@<X8>)
{
}

void static ResultCode.SQLITE_PERM.getter(_DWORD *a1@<X8>)
{
}

void static ResultCode.SQLITE_ABORT.getter(_DWORD *a1@<X8>)
{
}

void static ResultCode.SQLITE_BUSY.getter(_DWORD *a1@<X8>)
{
}

void static ResultCode.SQLITE_LOCKED.getter(_DWORD *a1@<X8>)
{
}

void static ResultCode.SQLITE_NOMEM.getter(_DWORD *a1@<X8>)
{
}

void static ResultCode.SQLITE_READONLY.getter(_DWORD *a1@<X8>)
{
}

void static ResultCode.SQLITE_INTERRUPT.getter(_DWORD *a1@<X8>)
{
}

void static ResultCode.SQLITE_IOERR.getter(_DWORD *a1@<X8>)
{
}

void static ResultCode.SQLITE_CORRUPT.getter(_DWORD *a1@<X8>)
{
}

void static ResultCode.SQLITE_NOTFOUND.getter(_DWORD *a1@<X8>)
{
}

void static ResultCode.SQLITE_FULL.getter(_DWORD *a1@<X8>)
{
}

void static ResultCode.SQLITE_CANTOPEN.getter(_DWORD *a1@<X8>)
{
}

void static ResultCode.SQLITE_PROTOCOL.getter(_DWORD *a1@<X8>)
{
}

void static ResultCode.SQLITE_EMPTY.getter(_DWORD *a1@<X8>)
{
}

void static ResultCode.SQLITE_SCHEMA.getter(_DWORD *a1@<X8>)
{
}

void static ResultCode.SQLITE_TOOBIG.getter(_DWORD *a1@<X8>)
{
}

void static ResultCode.SQLITE_CONSTRAINT.getter(_DWORD *a1@<X8>)
{
}

void static ResultCode.SQLITE_MISMATCH.getter(_DWORD *a1@<X8>)
{
}

void static ResultCode.SQLITE_MISUSE.getter(_DWORD *a1@<X8>)
{
}

void static ResultCode.SQLITE_NOLFS.getter(_DWORD *a1@<X8>)
{
}

void static ResultCode.SQLITE_AUTH.getter(_DWORD *a1@<X8>)
{
}

void static ResultCode.SQLITE_FORMAT.getter(_DWORD *a1@<X8>)
{
}

void static ResultCode.SQLITE_RANGE.getter(_DWORD *a1@<X8>)
{
}

void static ResultCode.SQLITE_NOTADB.getter(_DWORD *a1@<X8>)
{
}

void static ResultCode.SQLITE_NOTICE.getter(_DWORD *a1@<X8>)
{
}

void static ResultCode.SQLITE_WARNING.getter(_DWORD *a1@<X8>)
{
}

void static ResultCode.SQLITE_ROW.getter(_DWORD *a1@<X8>)
{
}

void static ResultCode.SQLITE_DONE.getter(_DWORD *a1@<X8>)
{
}

void static ResultCode.SQLITE_ERROR_MISSING_COLLSEQ.getter(_DWORD *a1@<X8>)
{
}

void static ResultCode.SQLITE_ERROR_RETRY.getter(_DWORD *a1@<X8>)
{
}

void static ResultCode.SQLITE_ERROR_SNAPSHOT.getter(_DWORD *a1@<X8>)
{
}

void static ResultCode.SQLITE_IOERR_READ.getter(_DWORD *a1@<X8>)
{
}

void static ResultCode.SQLITE_IOERR_SHORT_READ.getter(_DWORD *a1@<X8>)
{
}

void static ResultCode.SQLITE_IOERR_WRITE.getter(_DWORD *a1@<X8>)
{
}

void static ResultCode.SQLITE_IOERR_FSYNC.getter(_DWORD *a1@<X8>)
{
}

void static ResultCode.SQLITE_IOERR_DIR_FSYNC.getter(_DWORD *a1@<X8>)
{
}

void static ResultCode.SQLITE_IOERR_TRUNCATE.getter(_DWORD *a1@<X8>)
{
}

void static ResultCode.SQLITE_IOERR_FSTAT.getter(_DWORD *a1@<X8>)
{
}

void static ResultCode.SQLITE_IOERR_UNLOCK.getter(_DWORD *a1@<X8>)
{
}

void static ResultCode.SQLITE_IOERR_RDLOCK.getter(_DWORD *a1@<X8>)
{
}

void static ResultCode.SQLITE_IOERR_DELETE.getter(_DWORD *a1@<X8>)
{
}

void static ResultCode.SQLITE_IOERR_BLOCKED.getter(_DWORD *a1@<X8>)
{
}

void static ResultCode.SQLITE_IOERR_NOMEM.getter(_DWORD *a1@<X8>)
{
}

void static ResultCode.SQLITE_IOERR_ACCESS.getter(_DWORD *a1@<X8>)
{
}

void static ResultCode.SQLITE_IOERR_CHECKRESERVEDLOCK.getter(_DWORD *a1@<X8>)
{
}