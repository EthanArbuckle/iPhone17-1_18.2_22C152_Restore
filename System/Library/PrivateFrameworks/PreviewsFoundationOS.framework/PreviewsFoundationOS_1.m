uint64_t sub_25A40DAD8(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417E90);
  result = sub_25A510120();
  v7 = result;
  if (*(void *)(v5 + 16))
  {
    v35 = a2;
    v34 = v3;
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(unsigned char *)(v5 + 32);
    v32 = -1 << v10;
    v33 = v10;
    if (v10 < 64) {
      v11 = ~(-1 << v10);
    }
    else {
      v11 = -1;
    }
    v12 = v11 & *(void *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13) {
          goto LABEL_31;
        }
        v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          v8 = v19 + 1;
          if (v19 + 1 >= v13) {
            goto LABEL_31;
          }
          v20 = v9[v8];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                result = swift_release();
                v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                *v9 = v32;
              }
              v3 = v34;
              *(void *)(v5 + 16) = 0;
              break;
            }
            v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                v20 = v9[v8];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            v8 = v21;
          }
        }
LABEL_21:
        v12 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v22 = 8 * v18;
      v23 = *(void *)(*(void *)(v5 + 48) + v22);
      v24 = *(void *)(*(void *)(v5 + 56) + v22);
      result = sub_25A5104D0();
      v25 = -1 << *(unsigned char *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v30 = v27 == v29;
          if (v27 == v29) {
            v27 = 0;
          }
          v28 |= v30;
          v31 = *(void *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = 8 * v15;
      *(void *)(*(void *)(v7 + 48) + v16) = v23;
      *(void *)(*(void *)(v7 + 56) + v16) = v24;
      ++*(void *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

uint64_t sub_25A40DD80(uint64_t a1, char a2)
{
  v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417EF0);
  char v38 = a2;
  uint64_t v6 = sub_25A510120();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  v35 = v2;
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    v32 = *(void **)(*(void *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v33 = v32;
    }
    sub_25A5104E0();
    sub_25A50ED30();
    uint64_t result = sub_25A510530();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    void *v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_25A40E090(uint64_t a1, char a2)
{
  v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415AC0);
  uint64_t result = sub_25A510120();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v29 = -1 << v10;
    uint64_t v30 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v31 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v18 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        int64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v20 >= v31) {
          goto LABEL_33;
        }
        unint64_t v21 = v9[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v31) {
            goto LABEL_33;
          }
          unint64_t v21 = v9[v8];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v31)
            {
LABEL_33:
              if (a2)
              {
                if (v30 >= 64) {
                  bzero((void *)(v5 + 64), 8 * v31);
                }
                else {
                  *uint64_t v9 = v29;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v21 = v9[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_41;
                }
                if (v8 >= v31) {
                  goto LABEL_33;
                }
                unint64_t v21 = v9[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v12 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      uint64_t v27 = *(unsigned int *)(*(void *)(v5 + 48) + 4 * v19);
      uint64_t v28 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
      if ((a2 & 1) == 0) {
        swift_retain();
      }
      uint64_t result = MEMORY[0x26113E4C0](*(void *)(v7 + 40), v27, 4);
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v25 = v16 == v24;
          if (v16 == v24) {
            unint64_t v16 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v13 + 8 * v16);
        }
        while (v26 == -1);
        unint64_t v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_DWORD *)(*(void *)(v7 + 48) + 4 * v17) = v27;
      *(void *)(*(void *)(v7 + 56) + 8 * v17) = v28;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_25A40E344(uint64_t a1, char a2)
{
  v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415AB8);
  uint64_t result = sub_25A510120();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v29 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        int64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v12) {
          goto LABEL_33;
        }
        unint64_t v21 = v29[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v12) {
            goto LABEL_33;
          }
          unint64_t v21 = v29[v8];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v12)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              uint64_t v28 = 1 << *(unsigned char *)(v5 + 32);
              if (v28 >= 64) {
                bzero(v29, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                void *v29 = -1 << v28;
              }
              v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v21 = v29[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v12) {
                  goto LABEL_33;
                }
                unint64_t v21 = v29[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v11 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      uint64_t v27 = *(void *)(*(void *)(v5 + 48) + 8 * v19);
      long long v30 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v19);
      if ((a2 & 1) == 0) {
        swift_retain();
      }
      sub_25A5104E0();
      sub_25A510520();
      uint64_t result = sub_25A510530();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v25 = v16 == v24;
          if (v16 == v24) {
            unint64_t v16 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v13 + 8 * v16);
        }
        while (v26 == -1);
        unint64_t v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(void *)(*(void *)(v7 + 48) + 8 * v17) = v27;
      *(_OWORD *)(*(void *)(v7 + 56) + 16 * v17) = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  uint64_t *v3 = v7;
  return result;
}

void *sub_25A40E61C()
{
  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415B18);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_25A510110();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      int64_t v9 = v27 + 1;
      if (v27 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v28 = *(void *)(v6 + 8 * v9);
      if (!v28) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v28 - 1) & v28;
    unint64_t v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 24 * v15;
    uint64_t v21 = *(void *)(v2 + 56) + v20;
    uint64_t v22 = *(void *)v21;
    unint64_t v23 = *(void *)(v21 + 8);
    unint64_t v24 = (void *)(*(void *)(v4 + 48) + v16);
    char v25 = *(unsigned char *)(v21 + 16);
    *unint64_t v24 = v19;
    v24[1] = v18;
    uint64_t v26 = *(void *)(v4 + 56) + v20;
    *(void *)uint64_t v26 = v22;
    *(void *)(v26 + 8) = v23;
    *(unsigned char *)(v26 + 16) = v25;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)sub_25A39373C(v22, v23, v25);
  }
  int64_t v29 = v27 + 2;
  if (v29 >= v13) {
    goto LABEL_26;
  }
  unint64_t v28 = *(void *)(v6 + 8 * v29);
  if (v28)
  {
    int64_t v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v6 + 8 * v9);
    ++v29;
    if (v28) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_25A40E7F8()
{
  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415B08);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_25A510110();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    uint64_t *v1 = v4;
    return result;
  }
  char v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    sub_25A3937CC(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = v19;
    v21[1] = v18;
    sub_25A3936C4(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_25A40E9E0()
{
  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417F00);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_25A510110();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    long long v19 = *(_OWORD *)(*(void *)(v2 + 56) + v18);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(void *)(v4 + 56) + v18) = v19;
    uint64_t result = (void *)swift_retain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_25A40EB8C()
{
  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415B28);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_25A510110();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 32 * v15;
    sub_25A3937CC(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t result = sub_25A3936C4(v22, (_OWORD *)(*(void *)(v4 + 56) + v18));
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_25A40ED50()
{
  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415B20);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_25A510110();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    unint64_t v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    unint64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v23 = v19;
    v23[1] = v18;
    int64_t v24 = (void *)(*(void *)(v4 + 56) + v16);
    *int64_t v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_25A40EF0C()
{
  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417E98);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_25A510110();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 32 * v15;
    sub_25A3CE764(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t result = (void *)sub_25A3CE6F0((uint64_t)v22, *(void *)(v4 + 56) + v18);
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_25A40F0D0()
{
  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417EF8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_25A510110();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_25A40F274()
{
  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415AE0);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_25A510110();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    sub_25A39C794(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    uint64_t v17 = 32 * v15;
    sub_25A3937CC(*(void *)(v2 + 56) + v17, (uint64_t)v24);
    uint64_t v18 = *(void *)(v4 + 48) + v16;
    long long v19 = v25[0];
    long long v20 = v25[1];
    *(void *)(v18 + 32) = v26;
    *(_OWORD *)uint64_t v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    uint64_t result = sub_25A3936C4(v24, (_OWORD *)(*(void *)(v4 + 56) + v17));
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_25A40F45C()
{
  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417EE8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_25A510110();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    *(void *)(*(void *)(v4 + 56) + 8 * v15) = v16;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_25A40F600()
{
  uint64_t v35 = sub_25A50E320();
  uint64_t v1 = *(void *)(v35 - 8);
  MEMORY[0x270FA5388](v35);
  uint64_t v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417EE0);
  long long v30 = v0;
  uint64_t v4 = *v0;
  uint64_t v5 = sub_25A510110();
  uint64_t v6 = *(void *)(v4 + 16);
  uint64_t v36 = v5;
  if (!v6)
  {
    uint64_t result = (void *)swift_release();
    uint64_t v28 = v36;
    int64_t v27 = v30;
LABEL_25:
    *int64_t v27 = v28;
    return result;
  }
  uint64_t v7 = v5;
  uint64_t result = (void *)(v5 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v4 || (unint64_t)result >= v4 + 64 + 8 * v9)
  {
    uint64_t result = memmove(result, (const void *)(v4 + 64), 8 * v9);
    uint64_t v7 = v36;
  }
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v4 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v4 + 64);
  uint64_t v31 = v4 + 64;
  int64_t v32 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v33 = v1 + 32;
  uint64_t v34 = v1 + 16;
  uint64_t v14 = v35;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v24 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v24 >= v32) {
      goto LABEL_23;
    }
    unint64_t v25 = *(void *)(v31 + 8 * v24);
    ++v10;
    if (!v25)
    {
      int64_t v10 = v24 + 1;
      if (v24 + 1 >= v32) {
        goto LABEL_23;
      }
      unint64_t v25 = *(void *)(v31 + 8 * v10);
      if (!v25) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v25 - 1) & v25;
    unint64_t v16 = __clz(__rbit64(v25)) + (v10 << 6);
LABEL_9:
    uint64_t v17 = 16 * v16;
    unint64_t v18 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v16);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    unint64_t v21 = *(void *)(v1 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v3, *(void *)(v4 + 56) + v21, v14);
    uint64_t v22 = v36;
    int64_t v23 = (void *)(*(void *)(v36 + 48) + v17);
    *int64_t v23 = v19;
    v23[1] = v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(void *)(v22 + 56) + v21, v3, v14);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v32)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    int64_t v27 = v30;
    uint64_t v28 = v36;
    goto LABEL_25;
  }
  unint64_t v25 = *(void *)(v31 + 8 * v26);
  if (v25)
  {
    int64_t v10 = v26;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v10 >= v32) {
      goto LABEL_23;
    }
    unint64_t v25 = *(void *)(v31 + 8 * v10);
    ++v26;
    if (v25) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_25A40F8C4()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A417B00);
  uint64_t v29 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417ED8);
  uint64_t v5 = *v0;
  uint64_t v6 = sub_25A510110();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_25:
    uint64_t *v1 = v7;
    return result;
  }
  int64_t v27 = v1;
  uint64_t result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    uint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v28 = v5 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v23 >= v14) {
      goto LABEL_23;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_23;
      }
      unint64_t v24 = *(void *)(v28 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_9:
    uint64_t v17 = 16 * v16;
    unint64_t v18 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v16);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    unint64_t v21 = *(void *)(v29 + 72) * v16;
    sub_25A410F20(*(void *)(v5 + 56) + v21, (uint64_t)v4);
    uint64_t v22 = (void *)(*(void *)(v7 + 48) + v17);
    void *v22 = v19;
    v22[1] = v20;
    sub_25A39F4F8((uint64_t)v4, *(void *)(v7 + 56) + v21, &qword_26A417B00);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v27;
    goto LABEL_25;
  }
  unint64_t v24 = *(void *)(v28 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_23;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_25A40FB3C()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415AD8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_25A510110();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    uint64_t result = (void *)swift_retain();
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_25A40FCE0()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415AD0);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_25A510110();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v21 = __clz(__rbit64(v19));
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = v21 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_25A40FE70()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CrashReport.ID(0);
  uint64_t v25 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417EB0);
  uint64_t v5 = *v0;
  uint64_t v6 = sub_25A510110();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_25:
    uint64_t *v1 = v7;
    return result;
  }
  unint64_t v24 = v1;
  uint64_t result = (void *)(v6 + 64);
  uint64_t v9 = v5 + 64;
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v9 + 8 * v10) {
    uint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v10);
  }
  int64_t v11 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v17 = v16 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v21 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v21 >= v15) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v9 + 8 * v21);
    ++v11;
    if (!v22)
    {
      int64_t v11 = v21 + 1;
      if (v21 + 1 >= v15) {
        goto LABEL_23;
      }
      unint64_t v22 = *(void *)(v9 + 8 * v11);
      if (!v22) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v22 - 1) & v22;
    unint64_t v17 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_9:
    unint64_t v18 = *(void *)(v25 + 72) * v17;
    sub_25A401134(*(void *)(v5 + 48) + v18, (uint64_t)v4);
    uint64_t v19 = 8 * v17;
    uint64_t v20 = *(void *)(*(void *)(v5 + 56) + 8 * v17);
    sub_25A401198((uint64_t)v4, *(void *)(v7 + 48) + v18);
    *(void *)(*(void *)(v7 + 56) + v19) = v20;
    uint64_t result = (void *)swift_retain();
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v15)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v24;
    goto LABEL_25;
  }
  unint64_t v22 = *(void *)(v9 + 8 * v23);
  if (v22)
  {
    int64_t v11 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v11 >= v15) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v9 + 8 * v11);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_25A4100D0()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417EA0);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_25A510110();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    uint64_t result = (void *)swift_retain();
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_25A410274()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417EA8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_25A510110();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      int64_t v9 = v27 + 1;
      if (v27 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v28 = *(void *)(v6 + 8 * v9);
      if (!v28) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v28 - 1) & v28;
    unint64_t v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = 80 * v15;
    uint64_t v18 = *(void *)(v2 + 56) + v17;
    uint64_t v19 = *(void *)(v18 + 16);
    char v20 = *(unsigned char *)(v18 + 40);
    uint64_t v21 = *(void *)(v18 + 48);
    char v22 = *(unsigned char *)(v18 + 72);
    long long v23 = *(_OWORD *)v18;
    long long v24 = *(_OWORD *)(v18 + 24);
    long long v25 = *(_OWORD *)(v18 + 56);
    *(_OWORD *)(*(void *)(v4 + 48) + v16) = *(_OWORD *)(*(void *)(v2 + 48) + v16);
    uint64_t v26 = *(void *)(v4 + 56) + v17;
    *(_OWORD *)uint64_t v26 = v23;
    *(void *)(v26 + 16) = v19;
    *(_OWORD *)(v26 + 24) = v24;
    *(unsigned char *)(v26 + 40) = v20;
    *(void *)(v26 + 48) = v21;
    *(_OWORD *)(v26 + 56) = v25;
    *(unsigned char *)(v26 + 72) = v22;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v29 = v27 + 2;
  if (v29 >= v13) {
    goto LABEL_26;
  }
  unint64_t v28 = *(void *)(v6 + 8 * v29);
  if (v28)
  {
    int64_t v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v6 + 8 * v9);
    ++v29;
    if (v28) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_25A410468()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417E90);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_25A510110();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v21 = __clz(__rbit64(v19));
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = v21 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_25A4105F8()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417EF0);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_25A510110();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    int64_t v20 = *(void **)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = v20;
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_25A4107AC()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415AC0);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_25A510110();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 4 * v15;
    int v17 = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v15);
    uint64_t v18 = 8 * v15;
    uint64_t v19 = *(void *)(*(void *)(v2 + 56) + v18);
    *(_DWORD *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v18) = v19;
    id result = (void *)swift_retain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_25A410954()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415AB8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_25A510110();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    long long v19 = *(_OWORD *)(*(void *)(v2 + 56) + v18);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(void *)(v4 + 56) + v18) = v19;
    id result = (void *)swift_retain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_25A410B00@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = sub_25A3937CC((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  *a2 = v3;
  return result;
}

uint64_t sub_25A410B30(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = -v7;
  uint64_t v47 = a1;
  uint64_t v48 = a1 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  else {
    uint64_t v11 = -1;
  }
  uint64_t v49 = v8;
  uint64_t v50 = 0;
  uint64_t v51 = v11 & v9;
  uint64_t v52 = a2;
  uint64_t v53 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_25A409494((uint64_t)&v44);
  if (!v46) {
    goto LABEL_27;
  }
  uint64_t v12 = v44;
  sub_25A3936C4(&v45, v43);
  int64_t v13 = *(void **)a5;
  unint64_t v15 = sub_25A4096EC(v12);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  char v19 = v14;
  if (v13[3] >= v18)
  {
    if (a4)
    {
      if (v14) {
        goto LABEL_12;
      }
    }
    else
    {
      sub_25A40EB8C();
      if (v19) {
        goto LABEL_12;
      }
    }
LABEL_14:
    unint64_t v23 = *(void **)a5;
    *(void *)(*(void *)a5 + 8 * (v15 >> 6) + 64) |= 1 << v15;
    *(void *)(v23[6] + 8 * v15) = v12;
    sub_25A3936C4(v43, (_OWORD *)(v23[7] + 32 * v15));
    uint64_t v24 = v23[2];
    BOOL v25 = __OFADD__(v24, 1);
    uint64_t v26 = v24 + 1;
    if (v25)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    v23[2] = v26;
LABEL_16:
    sub_25A409494((uint64_t)&v44);
    while (v46)
    {
      uint64_t v28 = v44;
      sub_25A3936C4(&v45, v43);
      int64_t v29 = *(void **)a5;
      unint64_t v31 = sub_25A4096EC(v28);
      uint64_t v32 = v29[2];
      BOOL v33 = (v30 & 1) == 0;
      uint64_t v34 = v32 + v33;
      if (__OFADD__(v32, v33)) {
        goto LABEL_28;
      }
      char v35 = v30;
      if (v29[3] < v34)
      {
        sub_25A40B22C(v34, 1);
        unint64_t v36 = sub_25A4096EC(v28);
        if ((v35 & 1) != (v37 & 1)) {
          goto LABEL_30;
        }
        unint64_t v31 = v36;
      }
      if (v35)
      {
        sub_25A3937CC((uint64_t)v43, (uint64_t)v42);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
        int64_t v27 = (_OWORD *)(*(void *)(*(void *)a5 + 56) + 32 * v31);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
        sub_25A3936C4(v42, v27);
      }
      else
      {
        char v38 = *(void **)a5;
        *(void *)(*(void *)a5 + 8 * (v31 >> 6) + 64) |= 1 << v31;
        *(void *)(v38[6] + 8 * v31) = v28;
        sub_25A3936C4(v43, (_OWORD *)(v38[7] + 32 * v31));
        uint64_t v39 = v38[2];
        BOOL v25 = __OFADD__(v39, 1);
        uint64_t v40 = v39 + 1;
        if (v25) {
          goto LABEL_29;
        }
        v38[2] = v40;
      }
      sub_25A409494((uint64_t)&v44);
    }
LABEL_27:
    swift_release();
    swift_bridgeObjectRelease();
    sub_25A39C550();
    return swift_release();
  }
  sub_25A40B22C(v18, a4 & 1);
  unint64_t v20 = sub_25A4096EC(v12);
  if ((v19 & 1) == (v21 & 1))
  {
    unint64_t v15 = v20;
    if ((v19 & 1) == 0) {
      goto LABEL_14;
    }
LABEL_12:
    sub_25A3937CC((uint64_t)v43, (uint64_t)v42);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
    int64_t v22 = (_OWORD *)(*(void *)(*(void *)a5 + 56) + 32 * v15);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    sub_25A3936C4(v42, v22);
    goto LABEL_16;
  }
LABEL_30:
  uint64_t result = sub_25A510430();
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for QueryResolutionsBuilder()
{
  return &type metadata for QueryResolutionsBuilder;
}

unint64_t sub_25A410E6C()
{
  unint64_t result = qword_26A417EB8;
  if (!qword_26A417EB8)
  {
    sub_25A50E4C0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A417EB8);
  }
  return result;
}

uint64_t sub_25A410EC4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CrashReport.ID(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_25A410F20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A417B00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t NoOpAnalyticsLogger.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t NoOpAnalyticsLogger.init()()
{
  return v0;
}

void NoOpAnalyticsLogger.hints.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t (*NoOpAnalyticsLogger.hints.modify(unsigned char *a1))()
{
  *a1 = 2;
  return nullsub_1;
}

uint64_t NoOpAnalyticsLogger.deinit()
{
  return v0;
}

uint64_t NoOpAnalyticsLogger.__deallocating_deinit()
{
  return MEMORY[0x270FA0228](v0, 16, 7);
}

uint64_t (*sub_25A410FF4(unsigned char *a1))()
{
  *a1 = 2;
  return nullsub_1;
}

void sub_25A41101C(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t type metadata accessor for NoOpAnalyticsLogger()
{
  return self;
}

uint64_t method lookup function for NoOpAnalyticsLogger(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for NoOpAnalyticsLogger);
}

uint64_t dispatch thunk of NoOpAnalyticsLogger.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t sub_25A41107C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, char *a3@<X8>)
{
  type metadata accessor for IsolatedInvalidationHandle();
  swift_allocObject();
  *(void *)a3 = sub_25A3CDCCC((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/ConcurrentInvalidatableCache.swift", 140, 2, 13, 60, (uint64_t)"init(resource:)", 15, 2, 0, 0, 0, 0);
  uint64_t v6 = type metadata accessor for ConcurrentInvalidatableCache.IsolatedResource();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(&a3[*(int *)(v6 + 52)], a1, a2);
}

uint64_t ConcurrentInvalidatableCache.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  ConcurrentInvalidatableCache.init()();
  return v0;
}

uint64_t ConcurrentInvalidatableCache.init()()
{
  swift_defaultActor_initialize();
  type metadata accessor for ConcurrentInvalidatableCache.IsolatedResource();
  type metadata accessor for IsolatedInvalidatableCache();
  *(void *)(v0 + 112) = IsolatedInvalidatableCache.__allocating_init()();
  return v0;
}

uint64_t type metadata accessor for ConcurrentInvalidatableCache.IsolatedResource()
{
  return swift_getGenericMetadata();
}

uint64_t sub_25A411268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[13] = a4;
  v5[14] = v4;
  v5[11] = a2;
  v5[12] = a3;
  v5[10] = a1;
  uint64_t v6 = *(void **)v4;
  uint64_t v7 = *(void *)(*(void *)v4 + 80);
  v5[15] = v7;
  uint64_t v8 = v6[11];
  v5[16] = v8;
  uint64_t v9 = v6[12];
  v5[17] = v9;
  uint64_t v10 = v6[13];
  v5[18] = v10;
  v5[2] = v7;
  v5[3] = v8;
  v5[4] = v9;
  v5[5] = v10;
  uint64_t v11 = type metadata accessor for ConcurrentInvalidatableCache.IsolatedResource();
  v5[19] = v11;
  v5[20] = *(void *)(v11 - 8);
  v5[21] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_25A4113A4, v4, 0);
}

uint64_t sub_25A4113A4()
{
  uint64_t v1 = *(void *)(v0 + 112);
  *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 120);
  *(_OWORD *)(v0 + 64) = *(_OWORD *)(v0 + 136);
  type metadata accessor for ConcurrentInvalidatableCache();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 176) = v3;
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 96);
  *(void *)(v3 + 32) = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 184) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_25A4114C8;
  uint64_t v5 = *(void *)(v0 + 168);
  uint64_t v6 = *(void *)(v0 + 112);
  uint64_t v7 = *(void *)(v0 + 88);
  return IsolatedInvalidatableCache.resource(on:for:create:)(v5, v6, WitnessTable, v7, (uint64_t)&unk_26A417F28, v3);
}

uint64_t sub_25A4114C8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 192) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 112);
    uint64_t v4 = sub_25A4116B4;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 112);
    swift_task_dealloc();
    uint64_t v4 = sub_25A4115F0;
    uint64_t v3 = v5;
  }
  return MEMORY[0x270FA2498](v4, v3, 0);
}

uint64_t sub_25A4115F0()
{
  uint64_t v2 = v0[20];
  uint64_t v1 = v0[21];
  uint64_t v3 = v0[19];
  (*(void (**)(void, uint64_t))(*(void *)(v0[16] - 8) + 16))(v0[10], v1 + *(int *)(v3 + 52));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_25A4116B4()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t type metadata accessor for ConcurrentInvalidatableCache()
{
  return swift_getGenericMetadata();
}

uint64_t sub_25A411738(uint64_t a1, int *a2, uint64_t a3, uint64_t *a4)
{
  v4[23] = a1;
  v4[24] = a4;
  uint64_t v6 = *a4;
  v4[25] = *a4;
  uint64_t v7 = *(void *)(v6 + 88);
  v4[26] = v7;
  v4[27] = *(void *)(v7 - 8);
  v4[28] = swift_task_alloc();
  uint64_t v8 = swift_task_alloc();
  v4[29] = v8;
  uint64_t v11 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v9 = (void *)swift_task_alloc();
  v4[30] = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_25A4118C4;
  return v11(v8);
}

uint64_t sub_25A4118C4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 248) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 192);
  if (v0) {
    uint64_t v4 = sub_25A411C18;
  }
  else {
    uint64_t v4 = sub_25A4119F0;
  }
  return MEMORY[0x270FA2498](v4, v3, 0);
}

uint64_t sub_25A4119F0()
{
  uint64_t v1 = v0[28];
  uint64_t v15 = v0[29];
  uint64_t v2 = v0[26];
  uint64_t v17 = v0[27];
  uint64_t v3 = (void *)v0[25];
  uint64_t v4 = (char *)v0[23];
  uint64_t v16 = *(void (**)(uint64_t))(v17 + 16);
  v16(v1);
  uint64_t v5 = v3[10];
  uint64_t v7 = v3[12];
  uint64_t v6 = v3[13];
  sub_25A41107C(v1, v2, v4);
  uint64_t v8 = *(void *)v4;
  v0[12] = v5;
  v0[13] = v2;
  v0[14] = v7;
  v0[15] = v6;
  type metadata accessor for ConcurrentInvalidatableCache();
  uint64_t WitnessTable = swift_getWitnessTable();
  swift_beginAccess();
  *(void *)(v8 + 48) = WitnessTable;
  swift_unknownObjectWeakAssign();
  v0[16] = v5;
  v0[17] = v2;
  v0[18] = v7;
  v0[19] = v6;
  uint64_t v10 = type metadata accessor for ConcurrentInvalidatableCache.IsolatedResource();
  v0[5] = v10;
  v0[6] = &off_270831580;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 2);
  (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(boxed_opaque_existential_1, v4, v10);
  v0[10] = v2;
  v0[11] = v6;
  uint64_t v12 = __swift_allocate_boxed_opaque_existential_1(v0 + 7);
  ((void (*)(uint64_t *, uint64_t, uint64_t))v16)(v12, v15, v2);
  sub_25A411F88(v0 + 2, (uint64_t)(v0 + 7));
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 7));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_25A411C18()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_25A411C84(uint64_t a1)
{
  uint64_t v4 = (int *)v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (uint64_t *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_25A38F608;
  return sub_25A411738(a1, v4, v5, v6);
}

uint64_t sub_25A411D38()
{
  IsolatedInvalidatableCache.snapshot.getter();
  type metadata accessor for ConcurrentInvalidatableCache.IsolatedResource();
  uint64_t v0 = sub_25A50E970();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_25A411E38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v7 = *(_OWORD *)(v2 + 24);
  uint64_t v5 = type metadata accessor for ConcurrentInvalidatableCache.IsolatedResource();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1 + *(int *)(v5 + 52));
}

uint64_t sub_25A411ED8()
{
  long long v1 = *(_OWORD *)(*(void *)v0 + 96);
  v3[0] = *(_OWORD *)(*(void *)v0 + 80);
  v3[1] = v1;
  type metadata accessor for ConcurrentInvalidatableCache.IsolatedResource();
  *(void *)&v3[0] = MEMORY[0x263F8EE78];
  IsolatedInvalidatableCache.invalidate(file:line:column:function:trace:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/ConcurrentInvalidatableCache.swift", 140, 2, 43, 25, (uint64_t)"invalidate()", 12, 2, (uint64_t *)v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_25A411F88(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4159A8);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v10);
  sub_25A3990F8(a2, (uint64_t)v20);
  uint64_t v12 = swift_allocObject();
  sub_25A3C85D8(v20, v12 + 16);
  IsolatedInvalidatable.onInvalidation(_:)((uint64_t)sub_25A413518, v12, v10, v11);
  swift_release();
  sub_25A3990F8((uint64_t)a1, (uint64_t)v20);
  uint64_t v13 = swift_allocObject();
  sub_25A3C85D8(v20, v13 + 16);
  uint64_t v14 = sub_25A50F2A0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 1, 1, v14);
  sub_25A3990F8(a2, (uint64_t)v20);
  long long v15 = *(_OWORD *)(v6 + 96);
  v19[0] = *(_OWORD *)(v6 + 80);
  v19[1] = v15;
  type metadata accessor for ConcurrentInvalidatableCache();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v17 = (void *)swift_allocObject();
  v17[2] = v3;
  v17[3] = WitnessTable;
  sub_25A3C85D8(v20, (uint64_t)(v17 + 4));
  v17[9] = sub_25A413520;
  v17[10] = v13;
  v17[11] = v3;
  swift_retain_n();
  sub_25A38ED10((uint64_t)v9, (uint64_t)&unk_26A4180D0, (uint64_t)v17);
  return swift_release();
}

uint64_t sub_25A4121DC(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a2[3];
  uint64_t v4 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v3);
  uint64_t v6 = *(void *)(v4 + 8);
  uint64_t v7 = v2;
  return AnyInvalidatable.invalidate(file:line:column:function:trace:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/ConcurrentInvalidatableCache.swift", 140, 2, 47, 56, (uint64_t)"bindInvalidation(of:_:)", 23, 2, &v7, v3, v6);
}

uint64_t sub_25A41225C(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v4 = *a3;
  uint64_t v5 = a4[3];
  uint64_t v6 = a4[4];
  __swift_project_boxed_opaque_existential_1(a4, v5);
  uint64_t v8 = *(void *)(v6 + 8);
  uint64_t v9 = v4;
  return AnyInvalidatable.invalidate(file:line:column:function:trace:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/ConcurrentInvalidatableCache.swift", 140, 2, 52, 32, (uint64_t)"bindInvalidation(of:_:)", 23, 2, &v9, v5, v8);
}

uint64_t sub_25A4122DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  v7[9] = a6;
  v7[10] = a7;
  v7[7] = a4;
  v7[8] = a5;
  v7[11] = *a7;
  return MEMORY[0x270FA2498](sub_25A412328, a7, 0);
}

uint64_t sub_25A412328()
{
  long long v1 = *(void **)(v0 + 56);
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_25A4123EC;
  return ConcurrentInvalidatable.invalidationTrace.getter(v0 + 48, v2, v3);
}

uint64_t sub_25A4123EC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 80);
  swift_task_dealloc();
  return MEMORY[0x270FA2498](sub_25A4124FC, v1, 0);
}

uint64_t sub_25A4124FC()
{
  uint64_t v10 = v0;
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t *))(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 48);
  long long v5 = *(_OWORD *)(v1 + 96);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(v0 + 32) = v5;
  type metadata accessor for ConcurrentInvalidatableCache();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v9 = v4;
  v3(v2, WitnessTable, &v9);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t ConcurrentInvalidatableCache.deinit()
{
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t ConcurrentInvalidatableCache.__deallocating_deinit()
{
  swift_release();
  swift_defaultActor_destroy();

  return MEMORY[0x270FA2418](v0);
}

uint64_t ConcurrentInvalidatableCache.unownedExecutor.getter()
{
  return v0;
}

uint64_t sub_25A412630()
{
  return ConcurrentInvalidatableCache.unownedExecutor.getter();
}

uint64_t ConcurrentOnDemand.init(create:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  type metadata accessor for ConcurrentInvalidatableCache();
  uint64_t v6 = swift_allocObject();
  uint64_t result = ConcurrentInvalidatableCache.init()();
  *a3 = v6;
  a3[1] = a1;
  a3[2] = a2;
  return result;
}

uint64_t ConcurrentOnDemand.value.getter(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  *(void *)(v2 + 16) = 0;
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_25A412790;
  return sub_25A411268(a1, v2 + 16, v4, v5);
}

uint64_t sub_25A412790()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 32) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](sub_25A4128C4, 0, 0);
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_25A4128C4()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ConcurrentOnDemand.invalidate()()
{
  uint64_t v2 = *v0;
  *(void *)(v1 + 16) = *v0;
  return MEMORY[0x270FA2498](sub_25A4128FC, v2, 0);
}

uint64_t sub_25A4128FC()
{
  sub_25A411ED8();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_25A41295C()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for ConcurrentInvalidatableCache(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ConcurrentInvalidatableCache);
}

uint64_t dispatch thunk of ConcurrentInvalidatableCache.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of ConcurrentInvalidatableCache.resource(for:create:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v4 + 136)
                                                                   + **(int **)(*(void *)v4 + 136));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  *uint64_t v10 = v5;
  v10[1] = sub_25A3923B4;
  return v12(a1, a2, a3, a4);
}

uint64_t dispatch thunk of ConcurrentInvalidatableCache.snapshot.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of ConcurrentInvalidatableCache.invalidate()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t sub_25A412B4C()
{
  swift_release();

  return swift_release();
}

uint64_t sub_25A412B88(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  swift_retain();
  swift_retain();
  return a1;
}

void *sub_25A412BCC(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_25A412C2C(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v4;
  swift_release();
  return a1;
}

uint64_t type metadata accessor for ConcurrentOnDemand()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A412C8C()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_25A412D2C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  unint64_t v7 = ((v6 + 8) & ~v6) + *(void *)(v5 + 64);
  int v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v12 = ((unint64_t)a1 + v6 + 8) & ~v6;
    uint64_t v13 = ((unint64_t)a2 + v6 + 8) & ~v6;
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    v14(v12, v13, v4);
  }
  return a1;
}

uint64_t sub_25A412E30(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

void *sub_25A412EA4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  uint64_t v6 = *(unsigned __int8 *)(*(void *)(v4 - 8) + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  swift_retain();
  v5(v7, v8, v4);
  return a1;
}

void *sub_25A412F34(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

void *sub_25A412FC4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

void *sub_25A413034(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t sub_25A4130BC(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 8) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 8) & ~v6);
      }
      uint64_t v15 = *(void *)a1;
      if (*(void *)a1 >= 0xFFFFFFFFuLL) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void sub_25A41325C(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 8) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_42;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x25A4134B8);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v19 = (unint64_t)&a1[v9 + 8] & ~v9;
          unint64_t v20 = *(void (**)(unint64_t))(v6 + 56);
          v20(v19);
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v18 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v18 = a2 - 1;
          }
          *(void *)a1 = v18;
        }
      }
      return;
  }
}

uint64_t sub_25A4134E0()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t sub_25A413518(uint64_t *a1)
{
  return sub_25A4121DC(a1, (void *)(v1 + 16));
}

uint64_t sub_25A413520(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_25A41225C(a1, a2, a3, (void *)(v3 + 16));
}

uint64_t sub_25A413528()
{
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 96, 7);
}

uint64_t sub_25A413578()
{
  uint64_t v2 = *(void **)(v0 + 88);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 72);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_25A38F608;
  *(void *)(v3 + 80) = v2;
  *(_OWORD *)(v3 + 64) = v4;
  *(void *)(v3 + 56) = v0 + 32;
  *(void *)(v3 + 88) = *v2;
  return MEMORY[0x270FA2498](sub_25A412328, v2, 0);
}

uint64_t Sequence.concatenating<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](a1);
  BOOL v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  int v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v13, v15, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, a3);
  return sub_25A4137F4((uint64_t)v13, (uint64_t)v11, a2, a3, a4);
}

uint64_t sub_25A4137F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = type metadata accessor for ConcatenateSequence();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 52), a2, a4);
}

uint64_t ConcatenateSequence.underestimatedCount.getter()
{
  uint64_t v0 = sub_25A50EF00();
  uint64_t v1 = sub_25A50EF00();
  BOOL v2 = __OFADD__(v0, v1);
  uint64_t result = v0 + v1;
  if (v2) {
    __break(1u);
  }
  return result;
}

uint64_t ConcatenateSequence.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v7 + 16);
  MEMORY[0x270FA5388](v7);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v12, v2, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v2 + *(int *)(a1 + 52), v5);
  return sub_25A413A8C((uint64_t)v12, (uint64_t)v9, v10, v5, a2);
}

uint64_t sub_25A413A8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = (int *)type metadata accessor for ConcatenateSequence.Iterator();
  *(unsigned char *)(a5 + v9[14]) = 0;
  uint64_t v10 = a5 + v9[15];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v10, 1, 1, AssociatedTypeWitness);
  uint64_t v12 = a5 + v9[16];
  uint64_t v13 = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + v9[13], a2, a4);
}

BOOL sub_25A413C38(char a1, char a2)
{
  return a1 == a2;
}

uint64_t sub_25A413C48()
{
  return sub_25A5104F0();
}

uint64_t sub_25A413C70()
{
  return sub_25A510530();
}

BOOL sub_25A413CB8(char *a1, char *a2)
{
  return sub_25A413C38(*a1, *a2);
}

uint64_t sub_25A413CC4()
{
  return sub_25A413C70();
}

uint64_t sub_25A413CCC()
{
  return sub_25A413C48();
}

uint64_t sub_25A413CD4()
{
  return sub_25A510530();
}

uint64_t ConcatenateSequence.Iterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v57 = a2;
  uint64_t v46 = *(void *)(*(void *)(a1 + 24) - 8);
  uint64_t v5 = MEMORY[0x270FA5388](a1);
  long long v45 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = *(void *)(v5 + 40);
  uint64_t v50 = v7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = sub_25A50FA40();
  uint64_t v51 = *(void *)(v8 - 8);
  uint64_t v52 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v44 = (char *)&v44 - v9;
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v56 = swift_getAssociatedTypeWitness();
  uint64_t v11 = sub_25A50FA40();
  uint64_t v54 = *(void *)(v11 - 8);
  uint64_t v55 = v11;
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v48 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v47 = (char *)&v44 - v15;
  uint64_t v16 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = swift_getAssociatedTypeWitness();
  uint64_t v20 = sub_25A50FA40();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  unint64_t v23 = (char *)&v44 - v22;
  uint64_t v24 = v3;
  switch(*(unsigned char *)(v3 + *(int *)(a1 + 56)))
  {
    case 1:
      uint64_t v48 = (char *)*(int *)(a1 + 56);
      uint64_t v26 = v3 + *(int *)(a1 + 60);
      uint64_t v27 = *(void *)(v19 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v26, 1, v19))
      {
        uint64_t v28 = v47;
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56))(v47, 1, 1);
        uint64_t v29 = v54;
LABEL_14:
        (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v26, v20);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56))(v26, 1, 1, v19);
        (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v45, v3 + *(int *)(a1 + 52), v50);
        v43 = v44;
        sub_25A50EEF0();
        (*(void (**)(char *, void, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v43, 0, 1);
        (*(void (**)(uint64_t, char *, uint64_t))(v51 + 40))(v3 + *(int *)(a1 + 64), v43, v52);
        v48[v3] = 2;
        ConcatenateSequence.Iterator.next()(a1);
        return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v28, v55);
      }
      swift_getAssociatedConformanceWitness();
      uint64_t v28 = v47;
      sub_25A50FAF0();
      int v42 = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v56 - 8) + 48))(v28, 1);
      uint64_t v29 = v54;
      if (v42 == 1) {
        goto LABEL_14;
      }
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v54 + 32))(v57, v28, v55);
    case 2:
      uint64_t v30 = *(int *)(a1 + 56);
      uint64_t v31 = *(int *)(a1 + 64);
      uint64_t v32 = v24;
      uint64_t v33 = v24 + v31;
      uint64_t v34 = AssociatedTypeWitness;
      uint64_t v35 = *(void *)(AssociatedTypeWitness - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v24 + v31, 1, AssociatedTypeWitness))
      {
        unint64_t v36 = v48;
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56))(v48, 1, 1);
        uint64_t v37 = v57;
        uint64_t v38 = v54;
      }
      else
      {
        swift_getAssociatedConformanceWitness();
        unint64_t v36 = v48;
        sub_25A50FAF0();
        int v41 = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v56 - 8) + 48))(v36, 1);
        uint64_t v37 = v57;
        uint64_t v38 = v54;
        if (v41 != 1) {
          return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v38 + 32))(v37, v36, v55);
        }
      }
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v33, v52);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 56))(v33, 1, 1, v34);
      *(unsigned char *)(v32 + v30) = 3;
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v38 + 32))(v37, v36, v55);
    case 3:
      uint64_t v39 = v57;
      uint64_t v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56);
      return v40(v39, 1, 1);
    default:
      uint64_t v48 = (char *)*(int *)(a1 + 56);
      (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v3, v10);
      sub_25A50EEF0();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v23, 0, 1, v19);
      (*(void (**)(uint64_t, char *, uint64_t))(v21 + 40))(v3 + *(int *)(a1 + 60), v23, v20);
      v48[v3] = 1;
      return ConcatenateSequence.Iterator.next()(a1);
  }
}

uint64_t sub_25A414574()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A414590@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  ConcatenateSequence.makeIterator()(a1, a2);
  long long v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8);

  return v4(v2, a1);
}

uint64_t sub_25A4145F4()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_25A4146C4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  long long v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  unint64_t v11 = ((v6 + v9) & ~v9) + *(void *)(v8 + 64);
  uint64_t v12 = (*(unsigned char *)(v5 + 80) | *(unsigned char *)(v8 + 80));
  if (v12 > 7 || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0 || v11 > 0x18)
  {
    uint64_t v15 = *a2;
    *long long v4 = *a2;
    long long v4 = (uint64_t *)(v15 + ((v12 + 16) & ~v12));
    swift_retain();
  }
  else
  {
    uint64_t v16 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)v4 + v10) & v16, ((unint64_t)a2 + v10) & v16, v7);
  }
  return v4;
}

uint64_t sub_25A414820(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v6 = *(uint64_t (**)(unint64_t))(v5 + 8);
  unint64_t v7 = (*(void *)(v4 + 56) + a1 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);

  return v6(v7);
}

uint64_t sub_25A4148C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 16))((*(void *)(v6 + 48) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(void *)(v6 + 48) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_25A41496C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))((*(void *)(v6 + 40) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(void *)(v6 + 40) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_25A414A14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))((*(void *)(v6 + 32) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(void *)(v6 + 32) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_25A414ABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))((*(void *)(v6 + 24) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(void *)(v6 + 24) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_25A414B64(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void sub_25A414D5C(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x25A415028);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          uint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          unint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t type metadata accessor for ConcatenateSequence()
{
  return swift_getGenericMetadata();
}

uint64_t sub_25A415068(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 56);
}

uint64_t sub_25A415070()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t v2 = swift_checkMetadataState();
    if (v3 > 0x3F)
    {
      return v2;
    }
    else
    {
      swift_getAssociatedTypeWitness();
      uint64_t v0 = sub_25A50FA40();
      if (v4 <= 0x3F)
      {
        swift_getAssociatedTypeWitness();
        uint64_t v0 = sub_25A50FA40();
        if (v5 <= 0x3F)
        {
          swift_initStructMetadata();
          return 0;
        }
      }
    }
  }
  return v0;
}

uint64_t *sub_25A415238(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v44 = *(void *)(v4 - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v38 = *(void *)(v5 - 8);
  int v6 = *(_DWORD *)(v38 + 80);
  uint64_t v36 = *(void *)(v44 + 64) + v6;
  uint64_t v7 = *(void *)(v38 + 64);
  uint64_t v39 = v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  int v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v9;
  uint64_t v37 = v7;
  unint64_t v11 = (v10 + v7 + (v36 & ~(unint64_t)v6) + 1) & ~v10;
  if (*(_DWORD *)(v8 + 84)) {
    uint64_t v12 = *(void *)(v8 + 64);
  }
  else {
    uint64_t v12 = *(void *)(v8 + 64) + 1;
  }
  uint64_t v40 = v5;
  uint64_t v43 = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(v43 - 8);
  int v14 = *(_DWORD *)(v13 + 80);
  uint64_t v15 = v14;
  size_t __n = v12;
  if (*(_DWORD *)(v13 + 84)) {
    uint64_t v16 = *(void *)(v13 + 64);
  }
  else {
    uint64_t v16 = *(void *)(v13 + 64) + 1;
  }
  int v17 = v6 | *(_DWORD *)(v44 + 80) | v9 | v14;
  uint64_t v18 = (v6 | *(unsigned char *)(v44 + 80) | v9 | v14);
  int v19 = v17 & 0x100000;
  if (v18 <= 7 && v16 + ((v12 + v15 + v11) & ~v15) <= 0x18 && v19 == 0)
  {
    size_t v34 = v16;
    uint64_t v35 = ~v15;
    unint64_t v23 = a1;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v44 + 16))(a1, a2, v39);
    unint64_t v24 = ((unint64_t)a1 + v36) & ~(unint64_t)v6;
    unint64_t v25 = ((unint64_t)a2 + v36) & ~(unint64_t)v6;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v38 + 16))(v24, v25, v40);
    uint64_t v26 = v25 + v37;
    *(unsigned char *)(v24 + v37) = *(unsigned char *)(v25 + v37);
    uint64_t v27 = (void *)((v24 + v37 + v10 + 1) & ~v10);
    uint64_t v28 = (char *)((v26 + v10 + 1) & ~v10);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v28, 1, AssociatedTypeWitness))
    {
      size_t v29 = __n;
      memcpy(v27, v28, __n);
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v8 + 16))(v27, v28, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v27, 0, 1, AssociatedTypeWitness);
      size_t v29 = __n;
    }
    uint64_t v30 = &v28[v29];
    uint64_t v31 = (void *)(((unint64_t)v27 + v29 + v15) & v35);
    uint64_t v32 = (const void *)((unint64_t)&v30[v15] & v35);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v32, 1, v43))
    {
      memcpy(v31, v32, v34);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v31, v32, v43);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v31, 0, 1, v43);
    }
  }
  else
  {
    uint64_t v22 = *a2;
    *a1 = *a2;
    unint64_t v23 = (uint64_t *)(v22 + ((v18 + 16) & ~v18));
    swift_retain();
  }
  return v23;
}

uint64_t sub_25A41564C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(uint64_t, void))v4)(a1, *(void *)(a2 + 16));
  uint64_t v5 = *(void *)(v4 + 56) + a1;
  uint64_t v6 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v7 = v6 + 8;
  unint64_t v8 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t, void))(v6 + 8))(v8, *(void *)(a2 + 24));
  uint64_t v9 = *(void *)(v7 + 56);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v12 = (v9 + *(unsigned __int8 *)(v11 + 80) + v8 + 1) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v11 + 48))(v12, 1, AssociatedTypeWitness)) {
    (*(void (**)(unint64_t, uint64_t))(v11 + 8))(v12, AssociatedTypeWitness);
  }
  int v13 = *(_DWORD *)(v11 + 84);
  uint64_t v14 = *(void *)(v11 + 64);
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = v14 + v12;
  if (!v13) {
    ++v17;
  }
  unint64_t v18 = (v17 + *(unsigned __int8 *)(v16 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v21 = *(void *)(v15 - 8);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v16 + 48))(v18, 1, v15);
  if (!result)
  {
    unsigned int v20 = *(uint64_t (**)(unint64_t, uint64_t))(v21 + 8);
    return v20(v18, v15);
  }
  return result;
}

uint64_t sub_25A41588C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, void))v6)(a1, a2, *(void *)(a3 + 16));
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v8 = v7 + 16;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 48) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, void))(v7 + 16))(v11, v12, *(void *)(a3 + 24));
  uint64_t v13 = *(void *)(v8 + 48);
  uint64_t v14 = v13 + v11;
  uint64_t v15 = v13 + v12;
  *(unsigned char *)(v13 + v11) = *(unsigned char *)(v13 + v12);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v18 = *(unsigned __int8 *)(v17 + 80);
  int v19 = (void *)((v18 + 1 + v14) & ~v18);
  unsigned int v20 = (const void *)((v18 + 1 + v15) & ~v18);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v20, 1, AssociatedTypeWitness))
  {
    int v21 = *(_DWORD *)(v17 + 84);
    size_t v22 = *(void *)(v17 + 64);
    if (v21) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v22 + 1;
    }
    memcpy(v19, v20, v23);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v17 + 16))(v19, v20, AssociatedTypeWitness);
    unint64_t v25 = *(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56);
    uint64_t v24 = v17 + 56;
    v25(v19, 0, 1, AssociatedTypeWitness);
    int v21 = *(_DWORD *)(v24 + 28);
    size_t v22 = *(void *)(v24 + 8);
  }
  if (!v21) {
    ++v22;
  }
  uint64_t v26 = swift_getAssociatedTypeWitness();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(unsigned __int8 *)(v27 + 80);
  size_t v29 = (void *)(((unint64_t)v19 + v22 + v28) & ~v28);
  uint64_t v30 = (const void *)(((unint64_t)v20 + v22 + v28) & ~v28);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v27 + 48))(v30, 1, v26))
  {
    if (*(_DWORD *)(v27 + 84)) {
      size_t v31 = *(void *)(v27 + 64);
    }
    else {
      size_t v31 = *(void *)(v27 + 64) + 1;
    }
    memcpy(v29, v30, v31);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v27 + 16))(v29, v30, v26);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v29, 0, 1, v26);
  }
  return a1;
}

uint64_t sub_25A415B58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, void))v6)(a1, a2, *(void *)(a3 + 16));
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v8 = v7 + 24;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 40) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, void))(v7 + 24))(v11, v12, *(void *)(a3 + 24));
  uint64_t v13 = *(void *)(v8 + 40);
  uint64_t v14 = v13 + v11;
  uint64_t v15 = v13 + v12;
  *(unsigned char *)(v13 + v11) = *(unsigned char *)(v13 + v12);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v18 = *(unsigned __int8 *)(v17 + 80);
  int v19 = (void *)((v18 + 1 + v14) & ~v18);
  unsigned int v20 = (void *)((v18 + 1 + v15) & ~v18);
  int v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v14) = v21(v19, 1, AssociatedTypeWitness);
  int v22 = v21(v20, 1, AssociatedTypeWitness);
  if (v14)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v17 + 16))(v19, v20, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v19, 0, 1, AssociatedTypeWitness);
      goto LABEL_12;
    }
    int v23 = *(_DWORD *)(v17 + 84);
    size_t v24 = *(void *)(v17 + 64);
  }
  else
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v17 + 24))(v19, v20, AssociatedTypeWitness);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v17 + 8))(v19, AssociatedTypeWitness);
    int v23 = *(_DWORD *)(v17 + 84);
    size_t v24 = *(void *)(v17 + 64);
  }
  if (v23) {
    size_t v25 = v24;
  }
  else {
    size_t v25 = v24 + 1;
  }
  memcpy(v19, v20, v25);
LABEL_12:
  if (*(_DWORD *)(v17 + 84)) {
    uint64_t v26 = *(void *)(v17 + 64);
  }
  else {
    uint64_t v26 = *(void *)(v17 + 64) + 1;
  }
  uint64_t v27 = swift_getAssociatedTypeWitness();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(unsigned __int8 *)(v28 + 80);
  uint64_t v30 = (void *)(((unint64_t)v19 + v26 + v29) & ~v29);
  size_t v31 = (void *)(((unint64_t)v20 + v26 + v29) & ~v29);
  uint64_t v32 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v28 + 48);
  int v33 = v32(v30, 1, v27);
  int v34 = v32(v31, 1, v27);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(void *, void *, uint64_t))(v28 + 16))(v30, v31, v27);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v30, 0, 1, v27);
      return a1;
    }
    int v35 = *(_DWORD *)(v28 + 84);
    size_t v36 = *(void *)(v28 + 64);
  }
  else
  {
    if (!v34)
    {
      (*(void (**)(void *, void *, uint64_t))(v28 + 24))(v30, v31, v27);
      return a1;
    }
    uint64_t v38 = *(void (**)(void *, uint64_t))(v28 + 8);
    uint64_t v37 = v28 + 8;
    v38(v30, v27);
    int v35 = *(_DWORD *)(v37 + 76);
    size_t v36 = *(void *)(v37 + 56);
  }
  if (v35) {
    size_t v39 = v36;
  }
  else {
    size_t v39 = v36 + 1;
  }
  memcpy(v30, v31, v39);
  return a1;
}

uint64_t sub_25A415F00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, void))v6)(a1, a2, *(void *)(a3 + 16));
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v8 = v7 + 32;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 32) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, void))(v7 + 32))(v11, v12, *(void *)(a3 + 24));
  uint64_t v13 = *(void *)(v8 + 32);
  uint64_t v14 = v13 + v11;
  uint64_t v15 = v13 + v12;
  *(unsigned char *)(v13 + v11) = *(unsigned char *)(v13 + v12);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v18 = *(unsigned __int8 *)(v17 + 80);
  int v19 = (void *)((v18 + 1 + v14) & ~v18);
  unsigned int v20 = (const void *)((v18 + 1 + v15) & ~v18);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v20, 1, AssociatedTypeWitness))
  {
    int v21 = *(_DWORD *)(v17 + 84);
    size_t v22 = *(void *)(v17 + 64);
    if (v21) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v22 + 1;
    }
    memcpy(v19, v20, v23);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v17 + 32))(v19, v20, AssociatedTypeWitness);
    size_t v25 = *(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56);
    uint64_t v24 = v17 + 56;
    v25(v19, 0, 1, AssociatedTypeWitness);
    int v21 = *(_DWORD *)(v24 + 28);
    size_t v22 = *(void *)(v24 + 8);
  }
  if (!v21) {
    ++v22;
  }
  uint64_t v26 = swift_getAssociatedTypeWitness();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(unsigned __int8 *)(v27 + 80);
  uint64_t v29 = (void *)(((unint64_t)v19 + v22 + v28) & ~v28);
  uint64_t v30 = (const void *)(((unint64_t)v20 + v22 + v28) & ~v28);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v27 + 48))(v30, 1, v26))
  {
    if (*(_DWORD *)(v27 + 84)) {
      size_t v31 = *(void *)(v27 + 64);
    }
    else {
      size_t v31 = *(void *)(v27 + 64) + 1;
    }
    memcpy(v29, v30, v31);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v27 + 32))(v29, v30, v26);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v29, 0, 1, v26);
  }
  return a1;
}

uint64_t sub_25A4161CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, void))v6)(a1, a2, *(void *)(a3 + 16));
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v8 = v7 + 40;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 24) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, void))(v7 + 40))(v11, v12, *(void *)(a3 + 24));
  uint64_t v13 = *(void *)(v8 + 24);
  uint64_t v14 = v13 + v11;
  uint64_t v15 = v13 + v12;
  *(unsigned char *)(v13 + v11) = *(unsigned char *)(v13 + v12);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v18 = *(unsigned __int8 *)(v17 + 80);
  int v19 = (void *)((v18 + 1 + v14) & ~v18);
  unsigned int v20 = (void *)((v18 + 1 + v15) & ~v18);
  int v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v14) = v21(v19, 1, AssociatedTypeWitness);
  int v22 = v21(v20, 1, AssociatedTypeWitness);
  if (v14)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v17 + 32))(v19, v20, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v19, 0, 1, AssociatedTypeWitness);
      goto LABEL_12;
    }
    int v23 = *(_DWORD *)(v17 + 84);
    size_t v24 = *(void *)(v17 + 64);
  }
  else
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v17 + 40))(v19, v20, AssociatedTypeWitness);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v17 + 8))(v19, AssociatedTypeWitness);
    int v23 = *(_DWORD *)(v17 + 84);
    size_t v24 = *(void *)(v17 + 64);
  }
  if (v23) {
    size_t v25 = v24;
  }
  else {
    size_t v25 = v24 + 1;
  }
  memcpy(v19, v20, v25);
LABEL_12:
  if (*(_DWORD *)(v17 + 84)) {
    uint64_t v26 = *(void *)(v17 + 64);
  }
  else {
    uint64_t v26 = *(void *)(v17 + 64) + 1;
  }
  uint64_t v27 = swift_getAssociatedTypeWitness();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(unsigned __int8 *)(v28 + 80);
  uint64_t v30 = (void *)(((unint64_t)v19 + v26 + v29) & ~v29);
  size_t v31 = (void *)(((unint64_t)v20 + v26 + v29) & ~v29);
  uint64_t v32 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v28 + 48);
  int v33 = v32(v30, 1, v27);
  int v34 = v32(v31, 1, v27);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(void *, void *, uint64_t))(v28 + 32))(v30, v31, v27);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v30, 0, 1, v27);
      return a1;
    }
    int v35 = *(_DWORD *)(v28 + 84);
    size_t v36 = *(void *)(v28 + 64);
  }
  else
  {
    if (!v34)
    {
      (*(void (**)(void *, void *, uint64_t))(v28 + 40))(v30, v31, v27);
      return a1;
    }
    uint64_t v38 = *(void (**)(void *, uint64_t))(v28 + 8);
    uint64_t v37 = v28 + 8;
    v38(v30, v27);
    int v35 = *(_DWORD *)(v37 + 76);
    size_t v36 = *(void *)(v37 + 56);
  }
  if (v35) {
    size_t v39 = v36;
  }
  else {
    size_t v39 = v36 + 1;
  }
  memcpy(v30, v31, v39);
  return a1;
}

uint64_t sub_25A416574(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  unsigned int v47 = *(_DWORD *)(v7 + 84);
  unsigned int v49 = *(_DWORD *)(v5 + 84);
  if (v47 <= v49) {
    unsigned int v8 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v8 = *(_DWORD *)(v7 + 84);
  }
  uint64_t v48 = v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  int v10 = *(_DWORD *)(v9 + 84);
  unsigned int v11 = v10 - 1;
  if (!v10) {
    unsigned int v11 = 0;
  }
  unsigned int v46 = v11;
  if (v8 <= v11) {
    unsigned int v8 = v11;
  }
  uint64_t v12 = v6;
  uint64_t v13 = *(unsigned int *)(v9 + 84);
  uint64_t v14 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v15 = v14;
  unsigned int v16 = *(_DWORD *)(v14 + 84);
  unsigned int v17 = v16 - 1;
  if (!v16) {
    unsigned int v17 = 0;
  }
  if (v8 <= v17) {
    unsigned int v18 = v17;
  }
  else {
    unsigned int v18 = v8;
  }
  if (v18 <= 0xFC) {
    unsigned int v19 = 252;
  }
  else {
    unsigned int v19 = v18;
  }
  if (v13) {
    uint64_t v20 = *(void *)(v9 + 64);
  }
  else {
    uint64_t v20 = *(void *)(v9 + 64) + 1;
  }
  uint64_t v21 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v22 = *(void *)(v7 + 64);
  uint64_t v23 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v24 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v25 = *(void *)(v14 + 64);
  if (v16) {
    uint64_t v26 = v25;
  }
  else {
    uint64_t v26 = v25 + 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v27 = *(void *)(v5 + 64) + v21;
  uint64_t v28 = v20 + v24;
  uint64_t v29 = a1;
  if (a2 <= v19) {
    goto LABEL_42;
  }
  uint64_t v30 = v26 + ((v28 + ((v23 + v22 + (v27 & ~v21) + 1) & ~v23)) & ~v24);
  char v31 = 8 * v30;
  if (v30 <= 3)
  {
    unsigned int v33 = ((a2 - v19 + ~(-1 << v31)) >> v31) + 1;
    if (HIWORD(v33))
    {
      int v32 = *(_DWORD *)((char *)a1 + v30);
      if (!v32) {
        goto LABEL_42;
      }
      goto LABEL_32;
    }
    if (v33 > 0xFF)
    {
      int v32 = *(unsigned __int16 *)((char *)a1 + v30);
      if (!*(unsigned __int16 *)((char *)a1 + v30)) {
        goto LABEL_42;
      }
      goto LABEL_32;
    }
    if (v33 < 2)
    {
LABEL_42:
      if (v49 == v19)
      {
        uint64_t v37 = v48;
        uint64_t v38 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v5 + 48);
        uint64_t v39 = v49;
        return v38(v29, v39, v37);
      }
      uint64_t v29 = (unsigned __int16 *)(((unint64_t)a1 + v27) & ~v21);
      if (v47 == v19)
      {
        uint64_t v38 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v7 + 48);
        uint64_t v39 = v47;
        uint64_t v37 = v12;
        return v38(v29, v39, v37);
      }
      int v41 = (unsigned __int8 *)v29 + v22;
      if (v18 <= 0xFC)
      {
        unsigned int v42 = *v41;
        if (v42 >= 4) {
          return v42 - 3;
        }
        else {
          return 0;
        }
      }
      uint64_t v43 = (unint64_t)&v41[v23 + 1] & ~v23;
      if (v46 == v19)
      {
        if (v13 >= 2)
        {
          unsigned int v44 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v43, v13, AssociatedTypeWitness);
          goto LABEL_64;
        }
      }
      else if (v16 >= 2)
      {
        unsigned int v44 = (*(uint64_t (**)(uint64_t))(v15 + 48))((v28 + v43) & ~v24);
LABEL_64:
        if (v44 >= 2) {
          return v44 - 1;
        }
        else {
          return 0;
        }
      }
      return 0;
    }
  }
  int v32 = *((unsigned __int8 *)a1 + v30);
  if (!*((unsigned char *)a1 + v30)) {
    goto LABEL_42;
  }
LABEL_32:
  int v34 = (v32 - 1) << v31;
  if (v30 > 3) {
    int v34 = 0;
  }
  if (v30)
  {
    if (v30 <= 3) {
      int v35 = v30;
    }
    else {
      int v35 = 4;
    }
    switch(v35)
    {
      case 2:
        int v36 = *a1;
        break;
      case 3:
        int v36 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v36 = *(_DWORD *)a1;
        break;
      default:
        int v36 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v36 = 0;
  }
  return v19 + (v36 | v34) + 1;
}

void sub_25A416A00(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(*(void *)(a4 + 16) - 8);
  uint64_t v38 = v4;
  uint64_t v5 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v39 = *(_DWORD *)(v4 + 84);
  unsigned int v37 = *(_DWORD *)(v5 + 84);
  if (v37 <= v39) {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  uint64_t v7 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  unsigned int v36 = v9;
  if (v6 <= v9) {
    unsigned int v6 = v9;
  }
  int v10 = 0;
  uint64_t v11 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v12 = v11;
  unsigned int v13 = *(_DWORD *)(v11 + 84);
  unsigned int v14 = v13 - 1;
  if (!v13) {
    unsigned int v14 = 0;
  }
  if (v6 > v14) {
    unsigned int v14 = v6;
  }
  uint64_t v15 = *(void *)(v4 + 64);
  uint64_t v16 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v17 = *(void *)(v5 + 64);
  uint64_t v18 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v19 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v20 = *(void *)(v11 + 64);
  if (v14 <= 0xFC) {
    unsigned int v21 = 252;
  }
  else {
    unsigned int v21 = v14;
  }
  if (v8) {
    uint64_t v22 = *(void *)(v7 + 64);
  }
  else {
    uint64_t v22 = *(void *)(v7 + 64) + 1;
  }
  uint64_t v23 = v15 + v16;
  uint64_t v24 = v22 + v19;
  if (v13) {
    uint64_t v25 = v20;
  }
  else {
    uint64_t v25 = v20 + 1;
  }
  size_t v26 = v25 + ((v24 + ((v18 + v17 + ((v15 + v16) & ~v16) + 1) & ~v18)) & ~v19);
  if (a3 > v21)
  {
    if (v26 <= 3)
    {
      unsigned int v27 = ((a3 - v21 + ~(-1 << (8 * v26))) >> (8 * v26)) + 1;
      if (HIWORD(v27))
      {
        int v10 = 4;
      }
      else if (v27 >= 0x100)
      {
        int v10 = 2;
      }
      else
      {
        int v10 = v27 > 1;
      }
    }
    else
    {
      int v10 = 1;
    }
  }
  if (v21 < a2)
  {
    unsigned int v28 = ~v21 + a2;
    if (v26 < 4)
    {
      int v29 = (v28 >> (8 * v26)) + 1;
      if (v26)
      {
        int v31 = v28 & ~(-1 << (8 * v26));
        bzero(a1, v26);
        if (v26 == 3)
        {
          *(_WORD *)a1 = v31;
          a1[2] = BYTE2(v31);
        }
        else if (v26 == 2)
        {
          *(_WORD *)a1 = v31;
        }
        else
        {
          *a1 = v31;
        }
      }
    }
    else
    {
      bzero(a1, v26);
      *(_DWORD *)a1 = v28;
      int v29 = 1;
    }
    switch(v10)
    {
      case 1:
        a1[v26] = v29;
        return;
      case 2:
        *(_WORD *)&a1[v26] = v29;
        return;
      case 3:
        goto LABEL_68;
      case 4:
        *(_DWORD *)&a1[v26] = v29;
        return;
      default:
        return;
    }
  }
  uint64_t v30 = (uint64_t)a1;
  switch(v10)
  {
    case 1:
      a1[v26] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_41;
    case 2:
      *(_WORD *)&a1[v26] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_41;
    case 3:
LABEL_68:
      __break(1u);
      JUMPOUT(0x25A416F10);
    case 4:
      *(_DWORD *)&a1[v26] = 0;
      goto LABEL_40;
    default:
LABEL_40:
      if (!a2) {
        return;
      }
LABEL_41:
      if (v39 == v21)
      {
        int v32 = *(void (**)(uint64_t))(v38 + 56);
        goto LABEL_43;
      }
      uint64_t v30 = (unint64_t)&a1[v23] & ~v16;
      if (v37 == v21)
      {
        int v32 = *(void (**)(uint64_t))(v5 + 56);
        goto LABEL_45;
      }
      unsigned int v33 = (unsigned char *)(v30 + v17);
      if (v14 > 0xFC)
      {
        uint64_t v30 = (unint64_t)&v33[v18 + 1] & ~v18;
        if (v36 == v21)
        {
          if (v8 >= 2)
          {
            int v32 = *(void (**)(uint64_t))(v7 + 56);
LABEL_43:
LABEL_45:
            v32(v30);
          }
        }
        else if (v13 >= 2)
        {
          uint64_t v34 = (v24 + v30) & ~v19;
          int v35 = *(void (**)(uint64_t, void))(v12 + 56);
          v35(v34, a2 + 1);
        }
      }
      else
      {
        *unsigned int v33 = a2 + 3;
      }
      return;
  }
}

uint64_t type metadata accessor for ConcatenateSequence.Iterator()
{
  return swift_getGenericMetadata();
}

uint64_t sub_25A416F50(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *sub_25A416FE0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25A4170ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t type metadata accessor for ConcatenateSequence.Iterator.State()
{
  return swift_getGenericMetadata();
}

uint64_t sub_25A4170EC()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A417108@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v6 + 16))(v5);
  if (!swift_getEnumCaseMultiPayload()) {
    return (*(uint64_t (**)(uint64_t, char *))(*(void *)(*(void *)(a1 + 16) - 8) + 32))(a2, v5);
  }
  uint64_t result = sub_25A510360();
  __break(1u);
  return result;
}

uint64_t sub_25A417214@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_25A510540();
  MEMORY[0x270FA5388](v4);
  sub_25A419230(a1, (char *)&v7 - v5);
  return sub_25A408D2C(v4, (uint64_t)&v8, a2);
}

void PromiseProtocol.cancel<>(file:line:column:function:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10)
{
  v12[0] = a1;
  v12[1] = a2;
  char v13 = a3;
  uint64_t v14 = a4;
  uint64_t v15 = a5;
  uint64_t v16 = a6;
  uint64_t v17 = a7;
  char v18 = a8;
  sub_25A50F270();
  sub_25A39210C();
  int v10 = (void *)swift_allocError();
  sub_25A50E870();
  uint64_t v11 = v10;
  (*(void (**)(void *, void **, uint64_t, uint64_t))(a10 + 48))(v12, &v11, a9, a10);
}

uint64_t sub_25A417378(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4 = *((unsigned char *)a1 + 16);
  char v5 = *((unsigned char *)a1 + 56);
  long long v8 = *a1;
  char v9 = v4;
  long long v10 = *(long long *)((char *)a1 + 24);
  long long v11 = *(long long *)((char *)a1 + 40);
  char v12 = v5;
  v7[2] = a3;
  v7[3] = a4;
  v7[4] = a2;
  return (*(uint64_t (**)(long long *, uint64_t (*)@<X0>(uint64_t@<X8>), void *, uint64_t (*)(), void, uint64_t, uint64_t))(a4 + 16))(&v8, sub_25A4198DC, v7, nullsub_1, 0, a3, a4);
}

uint64_t sub_25A417420(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return sub_25A41749C(a1, a2, a3, a4, WitnessTable) & 1;
}

uint64_t sub_25A41749C(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v5 = *((unsigned char *)a1 + 16);
  char v6 = *((unsigned char *)a1 + 56);
  long long v9 = *a1;
  char v10 = v5;
  long long v11 = *(long long *)((char *)a1 + 24);
  long long v12 = *(long long *)((char *)a1 + 40);
  char v13 = v6;
  v8[2] = a4;
  v8[3] = a5;
  v8[4] = a2;
  v8[5] = a3;
  return (*(uint64_t (**)(long long *, uint64_t (*)@<X0>(uint64_t@<X8>), void *, uint64_t (*)(uint64_t), void, uint64_t, uint64_t))(a5 + 16))(&v9, sub_25A4198E8, v8, sub_25A41941C, 0, a4, a5) & 1;
}

uint64_t sub_25A41753C(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_25A4175B8(a1, a2, a3, a4, WitnessTable);
}

uint64_t sub_25A4175B8(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v5 = *((unsigned char *)a1 + 16);
  char v6 = *((unsigned char *)a1 + 56);
  long long v9 = *a1;
  char v10 = v5;
  long long v11 = *(long long *)((char *)a1 + 24);
  long long v12 = *(long long *)((char *)a1 + 40);
  char v13 = v6;
  v8[2] = a4;
  v8[3] = a5;
  v8[4] = a2;
  v8[5] = a3;
  return (*(uint64_t (**)(long long *, uint64_t (*)@<X0>(uint64_t@<X8>), void *, unint64_t (*)(long long *), void, uint64_t, uint64_t))(a5 + 16))(&v9, sub_25A419914, v8, sub_25A4195C8, 0, a4, a5) & 1;
}

uint64_t sub_25A417664(long long *a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_25A417378(a1, a2, a3, WitnessTable);
}

uint64_t PromiseProtocol.fulfill(file:line:column:function:with:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return sub_25A417B7C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, (uint64_t)sub_25A419908) & 1;
}

uint64_t PromiseProtocol.tryFulfill(file:line:column:function:makeResult:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  v13[0] = a1;
  v13[1] = a2;
  char v14 = a3;
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v17 = a6;
  uint64_t v18 = a7;
  char v19 = a8;
  return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(a12 + 32))(v13, a9, a10, a11, a12) & 1;
}

uint64_t PromiseProtocol.tryFulfill(file:line:column:function:with:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return sub_25A417800(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, (uint64_t)sub_25A417ABC) & 1;
}

uint64_t PromiseProtocol.tryFulfill(file:line:column:function:returning:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return sub_25A417800(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, (uint64_t)sub_25A417ADC) & 1;
}

uint64_t sub_25A417800(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  v14[0] = a1;
  v14[1] = a2;
  char v15 = a3;
  uint64_t v16 = a4;
  uint64_t v17 = a5;
  uint64_t v18 = a6;
  uint64_t v19 = a7;
  char v20 = a8;
  void v13[2] = a10;
  v13[3] = a11;
  v13[4] = a9;
  return (*(uint64_t (**)(void *, uint64_t, void *, uint64_t, uint64_t))(a11 + 32))(v14, a12, v13, a10, a11) & 1;
}

uint64_t PromiseProtocol.tryFulfill<>(file:line:column:function:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10)
{
  v12[0] = a1;
  v12[1] = a2;
  char v13 = a3;
  uint64_t v14 = a4;
  uint64_t v15 = a5;
  uint64_t v16 = a6;
  uint64_t v17 = a7;
  char v18 = a8;
  v11[2] = a9;
  v11[3] = a10;
  return (*(uint64_t (**)(void *, uint64_t (*)(), void *, uint64_t, uint64_t))(a10 + 32))(v12, sub_25A417AFC, v11, a9, a10) & 1;
}

uint64_t PromiseProtocol.tryFulfill<>(file:line:column:function:throwing:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v13[0] = a1;
  v13[1] = a2;
  char v14 = a3;
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v17 = a6;
  uint64_t v18 = a7;
  char v19 = a8;
  void v12[2] = a10;
  v12[3] = a11;
  v12[4] = a9;
  return (*(uint64_t (**)(void *, id (*)@<X0>(void *@<X8>), void *, uint64_t, uint64_t))(a11 + 32))(v13, sub_25A417B18, v12, a10, a11) & 1;
}

uint64_t PromiseProtocol.fulfill(file:line:column:function:makeResult:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  v13[0] = a1;
  v13[1] = a2;
  char v14 = a3;
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v17 = a6;
  uint64_t v18 = a7;
  char v19 = a8;
  return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(a12 + 40))(v13, a9, a10, a11, a12) & 1;
}

uint64_t sub_25A4179C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v4 = sub_25A510540();
  char v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a2, a1, v4);
}

uint64_t sub_25A417ABC@<X0>(uint64_t a1@<X8>)
{
  return sub_25A4179C0(*(void *)(v1 + 32), a1);
}

uint64_t sub_25A417ADC@<X0>(uint64_t a1@<X8>)
{
  return sub_25A417BE8(*(void *)(v1 + 32), a1);
}

uint64_t sub_25A417AFC()
{
  return sub_25A417D60();
}

id sub_25A417B18@<X0>(void *a1@<X8>)
{
  return sub_25A417E70(*(void **)(v1 + 32), a1);
}

uint64_t PromiseProtocol.fulfill(file:line:column:function:returning:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return sub_25A417B7C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, (uint64_t)sub_25A41990C) & 1;
}

uint64_t sub_25A417B7C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  v14[0] = a1;
  v14[1] = a2;
  char v15 = a3;
  uint64_t v16 = a4;
  uint64_t v17 = a5;
  uint64_t v18 = a6;
  uint64_t v19 = a7;
  char v20 = a8;
  void v13[2] = a10;
  v13[3] = a11;
  v13[4] = a9;
  return (*(uint64_t (**)(void *, uint64_t, void *, uint64_t, uint64_t))(a11 + 40))(v14, a12, v13, a10, a11) & 1;
}

uint64_t sub_25A417BE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a2, a1, AssociatedTypeWitness);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  sub_25A510540();

  return swift_storeEnumTagMultiPayload();
}

uint64_t PromiseProtocol.fulfill<>(file:line:column:function:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10)
{
  v12[0] = a1;
  v12[1] = a2;
  char v13 = a3;
  uint64_t v14 = a4;
  uint64_t v15 = a5;
  uint64_t v16 = a6;
  uint64_t v17 = a7;
  char v18 = a8;
  v11[2] = a9;
  v11[3] = a10;
  return (*(uint64_t (**)(void *, uint64_t (*)(), void *, uint64_t, uint64_t))(a10 + 40))(v12, sub_25A419918, v11, a9, a10) & 1;
}

uint64_t sub_25A417D60()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();

  return static Result<>.success.getter();
}

uint64_t PromiseProtocol.fulfill<>(file:line:column:function:throwing:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v13[0] = a1;
  v13[1] = a2;
  char v14 = a3;
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v17 = a6;
  uint64_t v18 = a7;
  char v19 = a8;
  void v12[2] = a10;
  v12[3] = a11;
  v12[4] = a9;
  return (*(uint64_t (**)(void *, uint64_t (*)(), void *, uint64_t, uint64_t))(a11 + 40))(v13, sub_25A419910, v12, a10, a11) & 1;
}

id sub_25A417E70@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = a1;
  swift_getAssociatedTypeWitness();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  sub_25A510540();
  swift_storeEnumTagMultiPayload();

  return a1;
}

uint64_t dispatch thunk of PromiseProtocol.tryFulfill(callsite:makeResult:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))() & 1;
}

uint64_t dispatch thunk of PromiseProtocol.fulfill(callsite:makeResult:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 40))();
}

uint64_t dispatch thunk of PromiseProtocol.cancel(callsite:error:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t sub_25A417F64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 16))() & 1;
}

uint64_t sub_25A417F90()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

void *sub_25A41805C(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  int v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  if (*(void *)(v5 + 64) <= *(void *)(v4 + 64)) {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v6 = *(void *)(v5 + 64);
  }
  uint64_t v7 = (*(unsigned char *)(v5 + 80) | *(unsigned char *)(v4 + 80));
  if (v7 <= 7
    && (unint64_t)(v6 + 1) <= 0x18
    && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) == 0)
  {
    unsigned int v11 = a2[v6];
    unsigned int v12 = v11 - 3;
    if (v11 >= 3)
    {
      if (v6 <= 3) {
        uint64_t v13 = v6;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a2;
          goto LABEL_21;
        case 2:
          int v14 = *(unsigned __int16 *)a2;
          goto LABEL_21;
        case 3:
          int v14 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_21;
        case 4:
          int v14 = *(_DWORD *)a2;
LABEL_21:
          int v15 = (v14 | (v12 << (8 * v6))) + 3;
          unsigned int v11 = v14 + 3;
          if (v6 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    if (v11 == 2)
    {
      (*(void (**)(void *))(v5 + 16))(a1);
      *((unsigned char *)v3 + v6) = 2;
    }
    else if (v11 == 1)
    {
      (*(void (**)(void *))(v5 + 16))(a1);
      *((unsigned char *)v3 + v6) = 1;
    }
    else
    {
      (*(void (**)(void *))(v4 + 16))(a1);
      *((unsigned char *)v3 + v6) = 0;
    }
  }
  else
  {
    uint64_t v10 = *(void *)a2;
    void *v3 = *(void *)a2;
    int v3 = (void *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v3;
}

uint64_t sub_25A41825C(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(*(void *)(a2 + 24) - 8);
  unint64_t v4 = *(void *)(v3 + 64);
  if (v4 <= *(void *)(*(void *)(v2 - 8) + 64)) {
    unint64_t v4 = *(void *)(*(void *)(v2 - 8) + 64);
  }
  unsigned int v5 = a1[v4];
  unsigned int v6 = v5 - 3;
  if (v5 >= 3)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a1;
        goto LABEL_12;
      case 2:
        int v8 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v8 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v8 = *(_DWORD *)a1;
LABEL_12:
        int v9 = (v8 | (v6 << (8 * v4))) + 3;
        unsigned int v5 = v8 + 3;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5) {
    return (*(uint64_t (**)(void))(v3 + 8))();
  }
  else {
    return (*(uint64_t (**)(void))(*(void *)(v2 - 8) + 8))();
  }
}

uint64_t sub_25A4183AC(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8);
  if (*(void *)(v6 + 64) <= *(void *)(v5 + 64)) {
    uint64_t v7 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  else {
    uint64_t v7 = *(void *)(v6 + 64);
  }
  unsigned int v8 = a2[v7];
  unsigned int v9 = v8 - 3;
  if (v8 >= 3)
  {
    if (v7 <= 3) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = 4;
    }
    switch(v10)
    {
      case 1:
        int v11 = *a2;
        goto LABEL_13;
      case 2:
        int v11 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v11 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v11 = *(_DWORD *)a2;
LABEL_13:
        int v12 = (v11 | (v9 << (8 * v7))) + 3;
        unsigned int v8 = v11 + 3;
        if (v7 < 4) {
          unsigned int v8 = v12;
        }
        break;
      default:
        break;
    }
  }
  if (v8)
  {
    if (v8 == 2) {
      char v13 = 2;
    }
    else {
      char v13 = 1;
    }
    uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  }
  else
  {
    char v13 = 0;
  }
  (*(void (**)(uint64_t))(v5 + 16))(a1);
  *(unsigned char *)(a1 + v7) = v13;
  return a1;
}

unsigned __int8 *sub_25A418538(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = *(void *)(v6 - 8);
    if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    }
    else {
      uint64_t v9 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    unsigned int v10 = a1[v9];
    unsigned int v11 = v10 - 3;
    if (v10 >= 3)
    {
      if (v9 <= 3) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a1;
          goto LABEL_14;
        case 2:
          int v13 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v13 = *(_DWORD *)a1;
LABEL_14:
          int v14 = (v13 | (v11 << (8 * v9))) + 3;
          unsigned int v10 = v13 + 3;
          if (v9 < 4) {
            unsigned int v10 = v14;
          }
          break;
        default:
          break;
      }
    }
    if (v10)
    {
      uint64_t v15 = *(void *)(v6 - 8);
      uint64_t v16 = *(void *)(a3 + 24);
    }
    else
    {
      uint64_t v15 = *(void *)(*(void *)(a3 + 16) - 8);
      uint64_t v16 = *(void *)(a3 + 16);
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v15 + 8))(a1, v16);
    unsigned int v17 = a2[v9];
    unsigned int v18 = v17 - 3;
    if (v17 >= 3)
    {
      if (v9 <= 3) {
        uint64_t v19 = v9;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          goto LABEL_28;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v20 = *(_DWORD *)a2;
LABEL_28:
          int v21 = (v20 | (v18 << (8 * v9))) + 3;
          unsigned int v17 = v20 + 3;
          if (v9 < 4) {
            unsigned int v17 = v21;
          }
          break;
        default:
          break;
      }
    }
    if (v17)
    {
      if (v17 == 2) {
        char v22 = 2;
      }
      else {
        char v22 = 1;
      }
      uint64_t v7 = v8;
      uint64_t v5 = v6;
    }
    else
    {
      char v22 = 0;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v5);
    a1[v9] = v22;
  }
  return a1;
}

uint64_t sub_25A4187A4(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8);
  if (*(void *)(v6 + 64) <= *(void *)(v5 + 64)) {
    uint64_t v7 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  else {
    uint64_t v7 = *(void *)(v6 + 64);
  }
  unsigned int v8 = a2[v7];
  unsigned int v9 = v8 - 3;
  if (v8 >= 3)
  {
    if (v7 <= 3) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = 4;
    }
    switch(v10)
    {
      case 1:
        int v11 = *a2;
        goto LABEL_13;
      case 2:
        int v11 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v11 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v11 = *(_DWORD *)a2;
LABEL_13:
        int v12 = (v11 | (v9 << (8 * v7))) + 3;
        unsigned int v8 = v11 + 3;
        if (v7 < 4) {
          unsigned int v8 = v12;
        }
        break;
      default:
        break;
    }
  }
  if (v8)
  {
    if (v8 == 2) {
      char v13 = 2;
    }
    else {
      char v13 = 1;
    }
    uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  }
  else
  {
    char v13 = 0;
  }
  (*(void (**)(uint64_t))(v5 + 32))(a1);
  *(unsigned char *)(a1 + v7) = v13;
  return a1;
}

unsigned __int8 *sub_25A418930(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = *(void *)(v6 - 8);
    if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    }
    else {
      uint64_t v9 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    unsigned int v10 = a1[v9];
    unsigned int v11 = v10 - 3;
    if (v10 >= 3)
    {
      if (v9 <= 3) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a1;
          goto LABEL_14;
        case 2:
          int v13 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v13 = *(_DWORD *)a1;
LABEL_14:
          int v14 = (v13 | (v11 << (8 * v9))) + 3;
          unsigned int v10 = v13 + 3;
          if (v9 < 4) {
            unsigned int v10 = v14;
          }
          break;
        default:
          break;
      }
    }
    if (v10)
    {
      uint64_t v15 = *(void *)(v6 - 8);
      uint64_t v16 = *(void *)(a3 + 24);
    }
    else
    {
      uint64_t v15 = *(void *)(*(void *)(a3 + 16) - 8);
      uint64_t v16 = *(void *)(a3 + 16);
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v15 + 8))(a1, v16);
    unsigned int v17 = a2[v9];
    unsigned int v18 = v17 - 3;
    if (v17 >= 3)
    {
      if (v9 <= 3) {
        uint64_t v19 = v9;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          goto LABEL_28;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v20 = *(_DWORD *)a2;
LABEL_28:
          int v21 = (v20 | (v18 << (8 * v9))) + 3;
          unsigned int v17 = v20 + 3;
          if (v9 < 4) {
            unsigned int v17 = v21;
          }
          break;
        default:
          break;
      }
    }
    if (v17)
    {
      if (v17 == 2) {
        char v22 = 2;
      }
      else {
        char v22 = 1;
      }
      uint64_t v7 = v8;
      uint64_t v5 = v6;
    }
    else
    {
      char v22 = 0;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 32))(a1, a2, v5);
    a1[v9] = v22;
  }
  return a1;
}

uint64_t sub_25A418B9C(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  if (v3 <= *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)) {
    unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_22;
  }
  unint64_t v4 = v3 + 1;
  char v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    unsigned int v8 = ((a2 + ~(-1 << v5) - 253) >> v5) + 1;
    if (HIWORD(v8))
    {
      int v6 = *(_DWORD *)((char *)a1 + v4);
      if (!v6) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      int v6 = *(unsigned __int16 *)((char *)a1 + v4);
      if (!*(unsigned __int16 *)((char *)a1 + v4)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_22:
      unsigned int v10 = *((unsigned __int8 *)a1 + v3);
      if (v10 >= 3) {
        return (v10 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v6 = *((unsigned __int8 *)a1 + v4);
  if (!*((unsigned char *)a1 + v4)) {
    goto LABEL_22;
  }
LABEL_14:
  int v9 = (v6 - 1) << v5;
  if (v4 > 3) {
    int v9 = 0;
  }
  if (v4)
  {
    if (v4 > 3) {
      LODWORD(v4) = 4;
    }
    switch((int)v4)
    {
      case 2:
        LODWORD(v4) = *a1;
        break;
      case 3:
        LODWORD(v4) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v4) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v4) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v4 | v9) + 254;
}

void sub_25A418CE0(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (*(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFE)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 253) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFD)
  {
    unsigned int v8 = a2 - 254;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x25A418EB8);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_25A418EE0(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 24) - 8) + 64);
  if (v2 <= *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64)) {
    unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  }
  uint64_t v3 = a1[v2];
  int v4 = v3 - 3;
  if (v3 >= 3)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v7 = (v6 | (v4 << (8 * v2))) + 3;
        LODWORD(v3) = v6 + 3;
        if (v2 >= 4) {
          uint64_t v3 = v3;
        }
        else {
          uint64_t v3 = v7;
        }
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void sub_25A418FA8(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  if (a2 > 2)
  {
    uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8);
    if (*(void *)(v6 + 64) <= *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)) {
      size_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    }
    else {
      size_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a2 - 3;
    if (v7 < 4)
    {
      unsigned int v9 = v8 >> (8 * v7);
      int v10 = v8 & ~(-1 << (8 * v7));
      a1[v7] = v9 + 3;
      bzero(a1, v7);
      if (v7 == 3)
      {
        *(_WORD *)a1 = v10;
        a1[2] = BYTE2(v10);
      }
      else if (v7 == 2)
      {
        *(_WORD *)a1 = v10;
      }
      else
      {
        *a1 = v10;
      }
    }
    else
    {
      a1[v7] = 3;
      bzero(a1, v7);
      *(_DWORD *)a1 = v8;
    }
  }
  else
  {
    uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    if (*(void *)(v4 + 64) > v5) {
      unint64_t v5 = *(void *)(v4 + 64);
    }
    a1[v5] = a2;
  }
}

uint64_t type metadata accessor for PromiseFulfillment()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A4190E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_25A510540();
  MEMORY[0x270FA5388](v8);
  int v10 = (char *)&v14 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v14 - v9, a1, v8);
  if (swift_getEnumCaseMultiPayload() == 1) {
    uint64_t v12 = a3;
  }
  else {
    uint64_t v12 = a2;
  }
  (*(void (**)(uint64_t, char *))(*(void *)(v12 - 8) + 32))(a4, v10);
  type metadata accessor for PromiseFulfillment();
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_25A419230@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(v4 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v4);
  int v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v11 + 16))(v6);
  if (swift_getEnumCaseMultiPayload())
  {
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v12(v10, v6, v7);
    v12(a2, v10, v7);
  }
  else
  {
    (*(void (**)(char *, char *, void))(*(void *)(*(void *)(a1 + 16) - 8) + 32))(a2, v6, *(void *)(a1 + 16));
  }
  sub_25A510540();
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_25A41941C(uint64_t a1)
{
  return swift_willThrow();
}

uint64_t sub_25A419454@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v6 = sub_25A510540();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  int v10 = (char *)&v12 - v9;
  a1(v8);
  sub_25A4190E8((uint64_t)v10, AssociatedTypeWitness, v5, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

unint64_t sub_25A4195C8(long long *a1)
{
  char v1 = *((unsigned char *)a1 + 16);
  char v2 = *((unsigned char *)a1 + 56);
  unint64_t v3 = *((void *)a1 + 8);
  uint64_t v4 = *((void *)a1 + 9);
  uint64_t v5 = (uint64_t (*)(unint64_t))*((void *)a1 + 10);
  unint64_t v14 = v3;
  uint64_t v15 = v4;
  long long v9 = *a1;
  char v10 = v1;
  long long v11 = *(long long *)((char *)a1 + 24);
  long long v12 = *(long long *)((char *)a1 + 40);
  char v13 = v2;
  unint64_t v6 = sub_25A3B28BC(v3);
  uint64_t v7 = (void *)v5(v6);
  sub_25A3B0E88((uint64_t)&v9, v7);

  return sub_25A3B2890(v3);
}

uint64_t sub_25A419674@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a2, a1, AssociatedTypeWitness);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for PromiseFulfillment();

  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_25A419778(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return sub_25A41749C(a1, a2, a3, a4, WitnessTable) & 1;
}

uint64_t sub_25A4197F4(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_25A4175B8(a1, a2, a3, a4, WitnessTable);
}

uint64_t sub_25A419870(long long *a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_25A417378(a1, a2, a3, WitnessTable);
}

uint64_t sub_25A4198DC@<X0>(uint64_t a1@<X8>)
{
  return sub_25A419674(*(void *)(v1 + 32), a1);
}

uint64_t sub_25A4198E8@<X0>(uint64_t a1@<X8>)
{
  return sub_25A419454(*(void (**)(uint64_t))(v1 + 32), a1);
}

uint64_t sub_25A41991C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v53 = a3;
  uint64_t v54 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v6 = MEMORY[0x270FA5388](a1);
  unsigned int v49 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v8 + 16);
  uint64_t v55 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v56 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v11 + 32);
  uint64_t v52 = v13;
  uint64_t v14 = type metadata accessor for CountedSharedResourceStore.Storage.CountedResource();
  uint64_t v15 = sub_25A50FA40();
  uint64_t v47 = *(void *)(v15 - 8);
  uint64_t v48 = v15;
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  uint64_t v50 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  int v20 = (char *)&v47 - v19;
  uint64_t v21 = *(void *)(v14 - 8);
  uint64_t v22 = MEMORY[0x270FA5388](v18);
  uint64_t v24 = (char *)&v47 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  size_t v26 = (char *)&v47 - v25;
  unsigned int v27 = (void (**)(uint64_t))v4;
  uint64_t v29 = *(void *)(v4 + 16);
  uint64_t v28 = v4 + 16;
  uint64_t v51 = v12;
  MEMORY[0x26113C9D0](a1, v29, v9, v14, v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v20, 1, v14) == 1)
  {
    (*(void (**)(char *, uint64_t))(v47 + 8))(v20, v48);
    uint64_t v30 = v53;
    uint64_t v31 = a1;
    (*v27)(a1);
    uint64_t v32 = v54;
    unsigned int v33 = v49;
    uint64_t v34 = v52;
    (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v49, v30, v52);
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v24, v33, v34);
    *(void *)&v24[*(int *)(type metadata accessor for CountedSharedResourceStore.Storage.CountedResource() + 44)] = 1;
    (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v56, v31, v9);
    int v35 = v50;
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v50, v24, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v35, 0, 1, v14);
    sub_25A50E990();
    sub_25A50E9E0();
    return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v24, v14);
  }
  else
  {
    uint64_t v37 = v9;
    uint64_t v48 = v28;
    unsigned int v49 = v24;
    uint64_t v38 = v55;
    unsigned int v39 = v56;
    uint64_t v40 = *(uint64_t (**)(char *, char *, uint64_t))(v21 + 32);
    uint64_t result = v40(v26, v20, v14);
    uint64_t v41 = *(int *)(v14 + 44);
    uint64_t v42 = *(void *)&v26[v41];
    BOOL v43 = __OFADD__(v42, 1);
    uint64_t v44 = v42 + 1;
    if (v43)
    {
      __break(1u);
    }
    else
    {
      *(void *)&v26[v41] = v44;
      (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v39, a1, v37);
      long long v45 = v50;
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v50, v26, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v45, 0, 1, v14);
      sub_25A50E990();
      sub_25A50E9E0();
      unsigned int v46 = v49;
      v40(v49, v26, v14);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v54 + 32))(v53, v46, v52);
    }
  }
  return result;
}

uint64_t sub_25A419E38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v25 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](a1);
  size_t v26 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(v6 + 32);
  uint64_t v8 = type metadata accessor for CountedSharedResourceStore.Storage.CountedResource();
  uint64_t v9 = sub_25A50FA40();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  unsigned int v27 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v25 - v14;
  uint64_t v16 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v18 = (char *)&v25 - v17;
  uint64_t v19 = *(void *)(v2 + 16);
  uint64_t v28 = v2 + 16;
  MEMORY[0x26113C9D0](a1, v19, v4, v8, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, v8) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
    uint64_t v29 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Coun"
          "tedSharedResourceStore.swift";
    uint64_t v30 = 138;
    char v31 = 2;
    long long v32 = xmmword_25A5162E0;
    unsigned int v33 = "release(key:)";
    uint64_t v34 = 13;
    char v35 = 2;
    return sub_25A403498();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v15, v8);
    uint64_t v21 = *(int *)(v8 + 44);
    uint64_t v22 = *(void *)&v18[v21];
    if (v22 < 2)
    {
      sub_25A50E990();
      uint64_t v24 = v27;
      sub_25A50E8C0();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v24, v9);
    }
    else
    {
      *(void *)&v18[v21] = v22 - 1;
      (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v26, a1, v4);
      uint64_t v23 = v27;
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v27, v18, v8);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v23, 0, 1, v8);
      sub_25A50E990();
      sub_25A50E9E0();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v8);
  }
}

uint64_t CountedSharedResourceStore.__allocating_init(resourceConstructor:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  CountedSharedResourceStore.init(resourceConstructor:)(a1, a2);
  return v4;
}

void *CountedSharedResourceStore.init(resourceConstructor:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CountedSharedResourceStore.Storage.CountedResource();
  uint64_t v5 = sub_25A50E850();
  v2[2] = a1;
  v2[3] = a2;
  v2[4] = v5;
  return v2;
}

uint64_t CountedSharedResourceStore.checkout(key:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for CountedSharedResourceStore.Storage();
  sub_25A41991C(a1, v4, a2);
  return swift_endAccess();
}

uint64_t type metadata accessor for CountedSharedResourceStore.Storage()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t CountedSharedResourceStore.release(key:)(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v2 = type metadata accessor for CountedSharedResourceStore.Storage();
  sub_25A419E38(a1, v2);
  return swift_endAccess();
}

uint64_t CountedSharedResourceStore.deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t CountedSharedResourceStore.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0228](v0, 40, 7);
}

uint64_t sub_25A41A4C4()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for CountedSharedResourceStore()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for CountedSharedResourceStore(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CountedSharedResourceStore);
}

uint64_t dispatch thunk of CountedSharedResourceStore.__allocating_init(resourceConstructor:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t sub_25A41A550()
{
  swift_release();

  return swift_bridgeObjectRelease();
}

void *sub_25A41A58C(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_25A41A5CC(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_25A41A62C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t type metadata accessor for CountedSharedResourceStore.Storage.CountedResource()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A41A68C()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_25A41A728(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t sub_25A41A820(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 24) - 8) + 8))();
}

uint64_t sub_25A41A84C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 16;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 48) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 48) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_25A41A8C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 24;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 40) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 40) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_25A41A944(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 32;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 32) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 32) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_25A41A9C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 40;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 24) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 24) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_25A41AA3C(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  if (v5 < a2)
  {
    unint64_t v6 = ((*(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v7 = a2 - v5;
    uint64_t v8 = v6 & 0xFFFFFFF8;
    if ((v6 & 0xFFFFFFF8) != 0) {
      unsigned int v9 = 2;
    }
    else {
      unsigned int v9 = v7 + 1;
    }
    if (v9 >= 0x10000) {
      unsigned int v10 = 4;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v9 < 0x100) {
      unsigned int v10 = 1;
    }
    if (v9 >= 2) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    switch(v11)
    {
      case 1:
        int v12 = *((unsigned __int8 *)a1 + v6);
        if (!v12) {
          break;
        }
        goto LABEL_18;
      case 2:
        int v12 = *(unsigned __int16 *)((char *)a1 + v6);
        if (v12) {
          goto LABEL_18;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x25A41AB50);
      case 4:
        int v12 = *(_DWORD *)((char *)a1 + v6);
        if (!v12) {
          break;
        }
LABEL_18:
        int v13 = v12 - 1;
        if (v8)
        {
          int v13 = 0;
          LODWORD(v8) = *a1;
        }
        return v5 + (v8 | v13) + 1;
      default:
        break;
    }
  }
  if (v5) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  else {
    return 0;
  }
}

void sub_25A41AB64(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((*(void *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v7 >= a3)
  {
    int v12 = 0;
    int v13 = a2 - v7;
    if (a2 <= v7)
    {
LABEL_14:
      switch(v12)
      {
        case 1:
          a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 2:
          *(_WORD *)&a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 3:
          goto LABEL_34;
        case 4:
          *(_DWORD *)&a1[v8] = 0;
          goto LABEL_26;
        default:
LABEL_26:
          if (a2)
          {
LABEL_27:
            uint64_t v16 = *(void (**)(void))(v6 + 56);
            v16();
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v9 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      int v11 = 4;
    }
    else {
      int v11 = 2;
    }
    if (v10 < 0x100) {
      int v11 = 1;
    }
    if (v10 >= 2) {
      int v12 = v11;
    }
    else {
      int v12 = 0;
    }
    int v13 = a2 - v7;
    if (a2 <= v7) {
      goto LABEL_14;
    }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v14 = v13;
  }
  else {
    int v14 = 1;
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    unsigned int v15 = ~v7 + a2;
    bzero(a1, v8);
    *(_DWORD *)a1 = v15;
  }
  switch(v12)
  {
    case 1:
      a1[v8] = v14;
      break;
    case 2:
      *(_WORD *)&a1[v8] = v14;
      break;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x25A41AD10);
    case 4:
      *(_DWORD *)&a1[v8] = v14;
      break;
    default:
      return;
  }
}

double CGSize.scaledBy(x:y:)(double a1, double a2, double a3)
{
  return a1 * a3;
}

double CGSize.scaled(by:)(double a1, double a2)
{
  return a1 * a2;
}

uint64_t Future.unpleasantWait()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v16 = a1;
  uint64_t v17 = *(void *)(*(void *)v1 + 80);
  uint64_t v2 = type metadata accessor for FutureTermination();
  uint64_t v3 = sub_25A50FA40();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v15 - v5;
  uint64_t v7 = swift_allocBox();
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v2 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v2);
  dispatch_semaphore_t v11 = dispatch_semaphore_create(0);
  int v12 = (void *)swift_allocObject();
  void v12[2] = v17;
  v12[3] = v7;
  v12[4] = v11;
  uint64_t v17 = v7;
  swift_retain();
  int v13 = v11;
  Future.observeFinish(_:)((uint64_t)sub_25A41B144, (uint64_t)v12);
  swift_release();
  sub_25A50F940();
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v9, v3);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v2);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {

    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v16, v6, v2);
    return swift_release();
  }
  return result;
}

uint64_t sub_25A41AF88(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FutureTermination();
  uint64_t v3 = sub_25A50FA40();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v10 - v5;
  uint64_t v7 = swift_projectBox();
  uint64_t v8 = *(void *)(v2 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v6, a1, v2);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v2);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 40))(v7, v6, v3);
  return sub_25A50F950();
}

uint64_t sub_25A41B104()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_25A41B144(uint64_t a1)
{
  return sub_25A41AF88(a1);
}

void sub_25A41B150(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t QueryManager.objectWillChange.getter()
{
  return swift_retain();
}

uint64_t QueryManager.resolvers.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 32));
  sub_25A41D920((uint64_t *)(v1 + 16), &v4);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 32));
  uint64_t v2 = v4;
  swift_release();
  swift_release();
  return v2;
}

uint64_t sub_25A41B1DC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)a1 + 40);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 32));
  sub_25A41D920((uint64_t *)(v3 + 16), &v6);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 32));
  uint64_t v4 = v6;
  swift_release();
  uint64_t result = swift_release();
  *a2 = v4;
  return result;
}

uint64_t QueryManager.resolvers.setter()
{
  sub_25A41D950();

  return swift_bridgeObjectRelease();
}

void (*QueryManager.resolvers.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = *(void *)(v1 + 40);
  _OWORD v3[2] = v1;
  v3[3] = v4;
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 32));
  sub_25A41D920((uint64_t *)(v4 + 16), &v7);
  v3[4] = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 32));
  uint64_t v5 = v7;
  swift_release();
  swift_release();
  void *v3 = v5;
  return sub_25A41B35C;
}

void sub_25A41B35C(uint64_t **a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 1;
  uint64_t v5 = **a1;
  swift_retain();
  uint64_t v6 = v3[3];
  if (a2)
  {
    swift_bridgeObjectRetain();
    os_unfair_lock_lock((os_unfair_lock_t)(v6 + 32));
    sub_25A41D9DC((void *)(v6 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 32));
    swift_release();
    v3[1] = v5;
    sub_25A50E670();
    swift_bridgeObjectRelease();
  }
  else
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v6 + 32));
    sub_25A41D9DC((void *)(v6 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 32));
    swift_release();
    *uint64_t v4 = v5;
    sub_25A50E670();
  }
  swift_bridgeObjectRelease();
  free(v3);
}

uint64_t QueryManager.delegateQueryManager.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 32));
  sub_25A41D920((uint64_t *)(v1 + 16), v4);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 32));
  uint64_t v2 = v4[1];
  swift_bridgeObjectRelease();
  swift_release();
  return v2;
}

uint64_t sub_25A41B4E4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)a1 + 40);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 32));
  sub_25A41D920((uint64_t *)(v3 + 16), v6);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 32));
  uint64_t v4 = v6[1];
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  *a2 = v4;
  return result;
}

uint64_t QueryManager.delegateQueryManager.setter()
{
  sub_25A41D9F4();

  return swift_release();
}

void (*QueryManager.delegateQueryManager.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = *(void *)(v1 + 40);
  _OWORD v3[2] = v1;
  v3[3] = v4;
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 32));
  sub_25A41D920((uint64_t *)(v4 + 16), v7);
  v3[4] = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 32));
  uint64_t v5 = v7[1];
  swift_release();
  swift_bridgeObjectRelease();
  void *v3 = v5;
  return sub_25A41B660;
}

void sub_25A41B660(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a1 + 1;
  uint64_t v4 = **a1;
  uint64_t v5 = (os_unfair_lock_s *)(*a1)[3];
  if (a2)
  {
    swift_retain();
    swift_retain();
    os_unfair_lock_lock(v5 + 8);
    sub_25A41DA80((uint64_t)&v5[4]);
    os_unfair_lock_unlock(v5 + 8);
    swift_release();
    v2[1] = v4;
    sub_25A50E670();
    swift_release();
  }
  else
  {
    swift_retain();
    os_unfair_lock_lock(v5 + 8);
    sub_25A41DA80((uint64_t)&v5[4]);
    os_unfair_lock_unlock(v5 + 8);
    swift_release();
    void *v3 = v4;
    sub_25A50E670();
  }
  swift_release();
  free(v2);
}

uint64_t QueryManager.__allocating_init(delegateManager:resolvers:)(void *a1, void *a2)
{
  uint64_t v4 = swift_allocObject();
  QueryManager.init(delegateManager:resolvers:)(a1, a2);
  return v4;
}

void *QueryManager.init(delegateManager:resolvers:)(void *a1, void *a2)
{
  uint64_t v3 = (void *)v2;
  v60 = a2;
  v79 = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A418458);
  MEMORY[0x270FA5388](v4 - 8);
  v61 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A418460);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v66 = v6;
  uint64_t v67 = v7;
  MEMORY[0x270FA5388](v6);
  v62 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A418468);
  uint64_t v70 = *(void *)(v68 - 8);
  MEMORY[0x270FA5388](v68);
  v63 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A418470);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v72 = v10;
  uint64_t v73 = v11;
  MEMORY[0x270FA5388](v10);
  v64 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A418478);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v74 = v13;
  uint64_t v75 = v14;
  MEMORY[0x270FA5388](v13);
  v65 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A418480);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v77 = v16;
  uint64_t v78 = v17;
  MEMORY[0x270FA5388](v16);
  v71 = (char *)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A418488);
  uint64_t v76 = *(void *)(v69 - 8);
  MEMORY[0x270FA5388](v69);
  v80 = (char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = sub_25A50F8C0();
  uint64_t v20 = *(void *)(v59 - 8);
  MEMORY[0x270FA5388](v59);
  uint64_t v22 = (char *)&v56 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_25A50E790();
  MEMORY[0x270FA5388](v23 - 8);
  uint64_t v24 = sub_25A50F870();
  MEMORY[0x270FA5388](v24);
  unint64_t v58 = sub_25A3DD980();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A418490);
  uint64_t v25 = (_OWORD *)swift_allocObject();
  v25[1] = xmmword_25A5119F0;
  sub_25A50F860();
  id v82 = v25;
  sub_25A41DA98(&qword_26A418498, MEMORY[0x263F8F0F8]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4184A0);
  sub_25A3BE718(&qword_26A4184A8, &qword_26A4184A0);
  sub_25A50FC90();
  sub_25A50E770();
  (*(void (**)(char *, void, uint64_t))(v20 + 104))(v22, *MEMORY[0x263F8F130], v59);
  *(void *)(v2 + 16) = sub_25A50F8F0();
  *(void *)(v2 + 32) = 0;
  uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4184B0);
  swift_allocObject();
  *(void *)(v2 + 64) = sub_25A50E660();
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4184B8);
  uint64_t v26 = swift_allocObject();
  *(_DWORD *)(v26 + 32) = 0;
  unsigned int v27 = v60;
  uint64_t v28 = v79;
  *(void *)(v26 + 16) = v60;
  *(void *)(v26 + 24) = v28;
  v3[5] = v26;
  swift_retain();
  uint64_t v29 = v27;
  swift_bridgeObjectRetain();
  unint64_t v30 = sub_25A392FE0(MEMORY[0x263F8EE78]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4184C0);
  uint64_t v31 = swift_allocObject();
  *(_DWORD *)(v31 + 24) = 0;
  *(void *)(v31 + 16) = v30;
  v3[3] = v31;
  id v82 = v29;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4184C8);
  swift_allocObject();
  v3[6] = sub_25A50E680();
  id v82 = v28;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4184D0);
  swift_allocObject();
  swift_retain();
  long long v32 = (void *)sub_25A50E680();
  v3[7] = v32;
  id v82 = v32;
  swift_retain();
  sub_25A50E640();
  sub_25A3BE718(&qword_26A4184D8, &qword_26A4184D0);
  sub_25A3BE718(&qword_26A4184E0, &qword_26A4184B0);
  sub_25A50E730();
  swift_release();
  unsigned int v33 = (void *)v3[6];
  id v81 = (id)v3[2];
  id v34 = v81;
  id v82 = v33;
  uint64_t v35 = sub_25A50F8B0();
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v57 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v36 + 56);
  v60 = (void *)(v36 + 56);
  uint64_t v37 = (uint64_t)v61;
  v57(v61, 1, 1, v35);
  sub_25A3BE718(&qword_26A4184E8, &qword_26A4184C8);
  uint64_t v56 = sub_25A41DA98(&qword_26A4184F0, (void (*)(uint64_t))sub_25A3DD980);
  swift_retain();
  id v38 = v34;
  unsigned int v39 = v62;
  sub_25A50E6F0();
  sub_25A384BCC(v37, &qword_26A418458);

  swift_release();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4184F8);
  sub_25A3BE718(&qword_26A418500, &qword_26A418460);
  uint64_t v40 = v63;
  uint64_t v41 = v66;
  sub_25A50E6C0();
  swift_release();
  (*(void (**)(char *, uint64_t))(v67 + 8))(v39, v41);
  uint64_t v42 = sub_25A3BE718(&qword_26A418508, &qword_26A418468);
  uint64_t v43 = sub_25A3BE718(&qword_26A418510, &qword_26A4184F8);
  uint64_t v44 = v64;
  uint64_t v45 = v68;
  MEMORY[0x26113C710](v68, v42, v43);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v40, v45);
  id v82 = (id)sub_25A50F8D0();
  uint64_t v46 = v37;
  v57((char *)v37, 1, 1, v35);
  sub_25A3BE718(&qword_26A418518, &qword_26A418470);
  uint64_t v47 = v65;
  uint64_t v48 = v72;
  sub_25A50E6E0();
  sub_25A384BCC(v46, &qword_26A418458);

  (*(void (**)(char *, uint64_t))(v73 + 8))(v44, v48);
  sub_25A3BE718(&qword_26A418520, &qword_26A418478);
  sub_25A3BE718(&qword_26A418528, &qword_26A418488);
  unsigned int v49 = v71;
  uint64_t v50 = v80;
  uint64_t v51 = v74;
  uint64_t v52 = v69;
  sub_25A50E6D0();
  (*(void (**)(char *, uint64_t))(v75 + 8))(v47, v51);
  sub_25A3BE718(&qword_26A418530, &qword_26A418480);
  sub_25A3BE718(&qword_26A418538, &qword_26A4184B0);
  uint64_t v53 = v77;
  uint64_t v54 = sub_25A50E700();
  swift_release();
  (*(void (**)(char *, uint64_t))(v78 + 8))(v49, v53);
  (*(void (**)(char *, uint64_t))(v76 + 8))(v50, v52);
  v3[4] = v54;
  swift_release();
  return v3;
}

uint64_t sub_25A41C434@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  if (*a1)
  {
    uint64_t result = swift_retain();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A4184B0);
    swift_allocObject();
    uint64_t result = sub_25A50E660();
  }
  *a2 = result;
  return result;
}

uint64_t sub_25A41C48C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v21 = a2;
  uint64_t v22 = a3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A418578);
  uint64_t v23 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A418580);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *a1;
  uint64_t v12 = MEMORY[0x263F8EE78];
  uint64_t v27 = MEMORY[0x263F8EE78];
  uint64_t v13 = *(void *)(v11 + 16);
  if (v13)
  {
    uint64_t v20 = v4;
    uint64_t v14 = v11 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_25A3990F8(v14, (uint64_t)v24);
      uint64_t v15 = v25;
      uint64_t v16 = v26;
      __swift_project_boxed_opaque_existential_1(v24, v25);
      uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 16))(v15, v16);
      uint64_t v18 = __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
      if (v17)
      {
        MEMORY[0x26113D070](v18);
        if (*(void *)(v27 + 16) >= *(void *)(v27 + 24) >> 1) {
          sub_25A50F0F0();
        }
        sub_25A50F150();
        sub_25A50F0B0();
      }
      v14 += 40;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease();
    uint64_t v12 = v27;
    uint64_t v4 = v20;
  }
  v24[0] = v12;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A418588);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A418590);
  sub_25A3BE718(&qword_26A418598, &qword_26A418588);
  sub_25A3BE718(&qword_26A4185A0, &qword_26A418590);
  sub_25A50E630();
  v24[0] = *(void *)(v21 + 48);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4184C8);
  sub_25A3BE718(&qword_26A4184E8, &qword_26A4184C8);
  sub_25A50E6C0();
  swift_release();
  sub_25A3BE718(&qword_26A4185A8, &qword_26A418580);
  sub_25A3BE718(&qword_26A4185B0, &qword_26A418578);
  sub_25A50E6D0();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v6, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t QueryManager.allValues<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(v3 + 40);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 32));
  sub_25A41D920((uint64_t *)(v7 + 16), v13);
  os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 32));
  uint64_t v8 = v13[0];
  uint64_t v9 = v13[1];
  swift_release();
  if (v9)
  {
    swift_retain();
    QueryManager.allValues<A>(for:)(a1, a2, a3);
    uint64_t v10 = swift_release();
  }
  else
  {
    swift_getAssociatedTypeWitness();
    uint64_t v10 = sub_25A50F120();
  }
  v13[0] = v8;
  MEMORY[0x270FA5388](v10);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A418540);
  swift_getAssociatedTypeWitness();
  sub_25A3BE718(&qword_26A418548, &qword_26A418540);
  sub_25A50EF30();
  swift_bridgeObjectRelease();
  uint64_t v11 = sub_25A50F100();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_25A41CA70@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v10 + 8))(&v12, v9, v10);
  QueryResolutions.value<A>(for:with:)(a2, a3, a4, a5);
  return swift_bridgeObjectRelease();
}

uint64_t QueryManager.firstValue<A>(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)&long long v27 = a1;
  uint64_t v26 = a3;
  uint64_t v5 = *(void *)(a2 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](a1);
  uint64_t v23 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v28 = v7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v25 = sub_25A50FA40();
  uint64_t v9 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  uint64_t v11 = (char *)&v22 - v10;
  *(void *)&long long v24 = v3;
  uint64_t v12 = *(void *)(v3 + 40);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v12 + 32));
  sub_25A41D920((uint64_t *)(v12 + 16), &v36);
  os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 32));
  long long v13 = v36;
  swift_release();
  if (*((void *)&v13 + 1))
  {
    swift_retain();
    QueryManager.firstValue<A>(for:)(v27, a2, v28);
    swift_release();
    uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v11, 1, AssociatedTypeWitness) != 1)
    {
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v15 = v26;
      (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v26, v11, AssociatedTypeWitness);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(v15, 0, 1, AssociatedTypeWitness);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v11, 1, 1, AssociatedTypeWitness);
  }
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v25);
  *(void *)&long long v32 = v13;
  uint64_t v17 = v23;
  (*(void (**)(char *, void, uint64_t))(v5 + 16))(v23, v27, a2);
  unint64_t v18 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v19 = (v6 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = swift_allocObject();
  uint64_t v21 = v28;
  *(void *)(v20 + 16) = a2;
  *(void *)(v20 + 24) = v21;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v20 + v18, v17, a2);
  *(void *)(v20 + v19) = v24;
  swift_bridgeObjectRetain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A418550);
  sub_25A3BE718(&qword_26A418558, &qword_26A418550);
  sub_25A510160();
  swift_release();
  swift_bridgeObjectRelease();
  long long v28 = v36;
  long long v27 = v37;
  long long v32 = v36;
  long long v33 = v37;
  long long v24 = v38;
  long long v34 = v38;
  uint64_t v35 = v39;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A418540);
  sub_25A3BE718(&qword_26A418548, &qword_26A418540);
  sub_25A50FF90();
  swift_getWitnessTable();
  sub_25A5100E0();
  swift_getWitnessTable();
  sub_25A50FF90();
  uint64_t v31 = sub_25A3BE718(&qword_26A418560, &qword_26A418540);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v29 = swift_getWitnessTable();
  swift_getWitnessTable();
  sub_25A50F670();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_25A41D10C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v10 + 8))(&v12, v9, v10);
  QueryResolutions.value<A>(for:with:)(a2, a3, a4, a5);

  return swift_bridgeObjectRelease();
}

uint64_t QueryManager.cachedValue<A, B>(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (*v18)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t);
  unsigned char v20[16];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t);
  char *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned char *v32;
  uint64_t v33;
  uint64_t v34[2];
  uint64_t v35[5];
  unsigned char v36[40];

  uint64_t v6 = v5;
  MEMORY[0x270FA5388](a1);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v13 + 16))(&v20[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, a2);
  sub_25A50FCF0();
  v35[2] = *(void *)(v6 + 24);
  long long v28 = a2;
  uint64_t v29 = a3;
  unint64_t v30 = a4;
  uint64_t v31 = a5;
  long long v32 = v36;
  long long v33 = v6;
  uint64_t v21 = a2;
  uint64_t v22 = a3;
  uint64_t v23 = a4;
  long long v24 = a5;
  uint64_t v25 = sub_25A41DC0C;
  uint64_t v26 = &v27;
  swift_retain();
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A418568);
  type metadata accessor for Future();
  type metadata accessor for Promise();
  sub_25A50FA40();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v16 = sub_25A3BE718(&qword_26A418570, &qword_26A418568);
  SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_25A380000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/QueryManager.swift", 124, 2, 117, 71, (uint64_t)"cachedValue(for:)", 17, 2, (uint64_t)sub_25A41DC1C, (uint64_t)v20, v14, TupleTypeMetadata2, v16);
  swift_release();
  uint64_t v17 = v35[3];
  if (v35[4])
  {
    unint64_t v18 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(a4 + 40);
    swift_retain();
    v18(v35, v6, a2, a4);
    v34[0] = 0;
    v34[1] = 0;
    Promise.track(future:on:)(v35[0], v34);
    swift_release_n();
    swift_release();
    sub_25A3EE314(0);
  }
  sub_25A39C7F0((uint64_t)v36);
  return v17;
}

uint64_t sub_25A41D47C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v22 = 0;
  sub_25A41D6BC(a2, (void *(*)(void *__return_ptr))sub_25A41DEA0, v19);
  type metadata accessor for Future();
  swift_dynamicCast();
  uint64_t v13 = v21;
  if (v22)
  {
    uint64_t v14 = *(void (**)(uint64_t))(a3 + 72);
    if (v14)
    {
      uint64_t v15 = swift_retain();
      v14(v15);
      sub_25A393228((uint64_t)v14);
    }
    sub_25A39C794(a2, (uint64_t)v19);
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = a4;
    *(void *)(v16 + 24) = a5;
    *(void *)(v16 + 32) = a6;
    *(void *)(v16 + 40) = a7;
    *(void *)(v16 + 48) = a3;
    long long v17 = v19[1];
    *(_OWORD *)(v16 + 56) = v19[0];
    *(_OWORD *)(v16 + 72) = v17;
    *(void *)(v16 + 88) = v20;
    swift_retain();
    Future.observeFinish(_:)((uint64_t)sub_25A41DF04, v16);
    swift_release();
  }
  return v13;
}

uint64_t sub_25A41D5FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v10 = type metadata accessor for Future();
  uint64_t v13 = a2;
  uint64_t v14 = a3;
  uint64_t v15 = a4;
  uint64_t v16 = a1;
  uint64_t result = sub_25A3BE3E4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/QueryManager.swift", 124, 2, 126, 35, (uint64_t)"cachedValue(for:)", 17, 2, (void (*)(uint64_t))sub_25A41DF34, (uint64_t)v12);
  a5[3] = v10;
  *a5 = result;
  return result;
}

_OWORD *sub_25A41D6BC@<X0>(uint64_t a1@<X0>, void *(*a2)(void *__return_ptr)@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v8 = *v3;
  if (*(void *)(v8 + 16) && (unint64_t v9 = sub_25A409798(a1), (v10 & 1) != 0))
  {
    sub_25A3937CC(*(void *)(v8 + 56) + 32 * v9, (uint64_t)v14);
    uint64_t v11 = v14;
  }
  else
  {
    uint64_t result = a2(v15);
    if (v4) {
      return result;
    }
    sub_25A39C794(a1, (uint64_t)v14);
    sub_25A3937CC((uint64_t)v15, (uint64_t)v13);
    sub_25A4A193C((uint64_t)v13, (uint64_t)v14);
    uint64_t v11 = v15;
  }
  return sub_25A3936C4(v11, a3);
}

uint64_t sub_25A41D794(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(os_unfair_lock_s **)(a2 + 24);
  swift_retain();
  os_unfair_lock_lock(v2 + 6);
  sub_25A41DF18((uint64_t)&v2[4]);
  os_unfair_lock_unlock(v2 + 6);
  return swift_release();
}

uint64_t sub_25A41D800(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_25A4A3358(a2, v7);
  uint64_t result = sub_25A384BCC((uint64_t)v7, &qword_26A416C28);
  uint64_t v5 = *(void (**)(uint64_t))(a3 + 88);
  if (v5)
  {
    uint64_t v6 = swift_retain();
    v5(v6);
    return sub_25A393228((uint64_t)v5);
  }
  return result;
}

uint64_t QueryManager.deinit()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_25A393228(*(void *)(v0 + 72));
  sub_25A393228(*(void *)(v0 + 88));
  return v0;
}

uint64_t QueryManager.__deallocating_deinit()
{
  QueryManager.deinit();

  return MEMORY[0x270FA0228](v0, 104, 7);
}

uint64_t sub_25A41D914@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 64);
  return swift_retain();
}

uint64_t sub_25A41D920@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  *a2 = v3;
  a2[1] = v2;
  swift_retain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_25A41D950()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 32));
  sub_25A41D9DC((void *)(v1 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 32));
  swift_release();
  return sub_25A50E670();
}

uint64_t sub_25A41D9DC(void *a1)
{
  return sub_25A41DFC0(a1);
}

uint64_t sub_25A41D9F4()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 40);
  swift_retain();
  os_unfair_lock_lock(v1 + 8);
  sub_25A41DA80((uint64_t)&v1[4]);
  os_unfair_lock_unlock(v1 + 8);
  swift_release();
  return sub_25A50E670();
}

uint64_t sub_25A41DA80(uint64_t a1)
{
  return sub_25A41DF74(a1);
}

uint64_t sub_25A41DA98(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_25A41DAE0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A41C48C(a1, v2, a2);
}

uint64_t sub_25A41DAE8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A41CA70(a1, v2[4], v2[5], v2[2], a2);
}

uint64_t sub_25A41DB08()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  swift_release();

  return MEMORY[0x270FA0238](v0, v5 + 8, v4);
}

uint64_t sub_25A41DBA4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)(*(void *)(v2 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v2 + 16) - 8) + 80);
  return sub_25A41D10C(a1, v2 + v3, *(void *)(v2+ ((*(void *)(*(void *)(*(void *)(v2 + 16) - 8) + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v2 + 16), a2);
}

uint64_t sub_25A41DC0C(uint64_t a1)
{
  return sub_25A41D47C(a1, v1[6], v1[7], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_25A41DC1C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 48))();
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_25A41DC5C()
{
  return sub_25A3BE718(&qword_26A4184E0, &qword_26A4184B0);
}

uint64_t sub_25A41DC9C()
{
  swift_bridgeObjectRetain();
  sub_25A41D950();

  return swift_bridgeObjectRelease();
}

uint64_t sub_25A41DCE4()
{
  swift_retain();
  sub_25A41D9F4();

  return swift_release();
}

uint64_t type metadata accessor for QueryManager()
{
  return self;
}

uint64_t method lookup function for QueryManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for QueryManager);
}

uint64_t dispatch thunk of QueryManager.__allocating_init(delegateManager:resolvers:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t destroy for QueryManager.State()
{
  swift_bridgeObjectRelease();

  return swift_release();
}

void *_s20PreviewsFoundationOS12QueryManagerC5StateVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *assignWithCopy for QueryManager.State(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for QueryManager.State(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for QueryManager.State()
{
  return &type metadata for QueryManager.State;
}

uint64_t sub_25A41DEA0@<X0>(uint64_t *a1@<X8>)
{
  return sub_25A41D5FC(v1[6], v1[2], v1[4], v1[5], a1);
}

uint64_t sub_25A41DEC4()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);

  return MEMORY[0x270FA0238](v0, 96, 7);
}

uint64_t sub_25A41DF04(uint64_t a1)
{
  return sub_25A41D794(a1, *(void *)(v1 + 48));
}

uint64_t sub_25A41DF18(uint64_t a1)
{
  return sub_25A41D800(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_25A41DF34(uint64_t a1)
{
  **(void **)(v1 + 40) = a1;
  swift_retain();

  return swift_release();
}

uint64_t sub_25A41DF74(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  uint64_t result = swift_release();
  *(void *)(a1 + 8) = v3;
  return result;
}

uint64_t sub_25A41DFC0(void *a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t dispatch thunk of DefaultInit.init()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

void TimePeriod.start.getter(void *a1@<X8>)
{
  *a1 = *v1;
}

void TimePeriod.end.getter(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 8);
}

void *TimePeriod.init(start:end:)@<X0>(void *result@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *a2;
  *a3 = *result;
  a3[1] = v3;
  return result;
}

double TimePeriod.nanoseconds.getter(double a1, double a2, double a3)
{
  unint64_t v4 = v3[1];
  unint64_t v5 = v4 - *v3;
  if (v4 < *v3)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (qword_26A4154B8 != -1) {
LABEL_5:
  }
    swift_once();
  LODWORD(a3) = HIDWORD(qword_26A4185B8);
  LODWORD(a2) = qword_26A4185B8;
  return (double)v5 * (double)*(unint64_t *)&a2 / (double)*(unint64_t *)&a3;
}

double TimePeriod.milliseconds.getter(double a1, double a2, double a3)
{
  unint64_t v4 = v3[1];
  unint64_t v5 = v4 - *v3;
  if (v4 < *v3)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (qword_26A4154B8 != -1) {
LABEL_5:
  }
    swift_once();
  LODWORD(a3) = HIDWORD(qword_26A4185B8);
  LODWORD(a2) = qword_26A4185B8;
  return (double)v5 * (double)*(unint64_t *)&a2 / (double)*(unint64_t *)&a3 / 1000000.0;
}

double TimePeriod.seconds.getter(double a1, double a2, double a3)
{
  unint64_t v4 = v3[1];
  unint64_t v5 = v4 - *v3;
  if (v4 < *v3)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (qword_26A4154B8 != -1) {
LABEL_5:
  }
    swift_once();
  LODWORD(a3) = HIDWORD(qword_26A4185B8);
  LODWORD(a2) = qword_26A4185B8;
  return (double)v5 * (double)*(unint64_t *)&a2 / (double)*(unint64_t *)&a3 / 1000000000.0;
}

double sub_25A41E1DC()
{
  v1[1] = *(mach_timebase_info *)MEMORY[0x263EF8340];
  v1[0] = 0;
  mach_timebase_info(v1);
  double result = *(double *)v1;
  qword_26A4185B8 = (uint64_t)v1[0];
  return result;
}

ValueMetadata *type metadata accessor for TimePeriod()
{
  return &type metadata for TimePeriod;
}

uint64_t DelayedInvocation.callback.getter()
{
  return (*(uint64_t (**)(void))(**(void **)(v0 + 16) + 80))();
}

uint64_t sub_25A41E294(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  uint64_t v6 = *(uint64_t (**)(uint64_t (*)(), uint64_t))(**(void **)(*(void *)a2 + 16) + 88);
  swift_retain();
  return v6(sub_25A3FCAFC, v5);
}

uint64_t DelayedInvocation.callback.setter()
{
  return (*(uint64_t (**)(void))(**(void **)(v0 + 16) + 88))();
}

uint64_t (*DelayedInvocation.callback.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = *(void *)(v1 + 16);
  a1[2] = v3;
  *a1 = (*(uint64_t (**)(void))(*(void *)v3 + 80))();
  a1[1] = v4;
  return sub_25A41E3E0;
}

uint64_t sub_25A41E3E0(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = *a1;
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1[2] + 88);
  if ((a2 & 1) == 0) {
    return v4(*a1, v2);
  }
  swift_retain();
  v4(v3, v2);

  return swift_release();
}

uint64_t DelayedInvocation.__allocating_init<A>(scheduler:callback:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_25A41E4B8(a1, a2, a3, a4, a5, (uint64_t (*)(void))sub_25A41F534);
}

uint64_t DelayedInvocation.init<A>(scheduler:callback:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_25A41E4B8(a1, a2, a3, a4, a5, (uint64_t (*)(void))sub_25A41F4D0);
}

uint64_t sub_25A41E4B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  uint64_t v8 = a6();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(a1, a4);
  return v8;
}

Swift::Void __swiftcall DelayedInvocation.schedule(delay:)(Swift::Double delay)
{
  (*(void (**)(double))(**(void **)(v1 + 16) + 104))(delay);
}

Swift::Void __swiftcall DelayedInvocation.cancel()()
{
  (*(void (**)(void))(**(void **)(v0 + 16) + 112))();
}

Swift::Void __swiftcall DelayedInvocation.invokeNowIfScheduled()()
{
  (*(void (**)(void))(**(void **)(v0 + 16) + 120))();
}

uint64_t DelayedInvocation.deinit()
{
  swift_release();
  return v0;
}

uint64_t DelayedInvocation.__deallocating_deinit()
{
  swift_release();

  return MEMORY[0x270FA0228](v0, 24, 7);
}

uint64_t (*sub_25A41E648())()
{
  return nullsub_1;
}

uint64_t sub_25A41E664()
{
  return swift_release();
}

uint64_t sub_25A41E66C()
{
  type metadata accessor for DelayedInvocation.DelayedInvocationBox.State();
  uint64_t v0 = sub_25A50E5B0();
  uint64_t WitnessTable = swift_getWitnessTable();
  SynchronousAccessProviding<>.peek(file:line:column:function:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/DelayedInvocation.swift", 129, 2, 79, 29, (uint64_t)"callback", 8, 2, v0, WitnessTable);
  return v3;
}

uint64_t sub_25A41E74C(uint64_t a1, uint64_t a2)
{
  v10[2] = *(void *)(v2 + *(void *)(*(void *)v2 + 160));
  KeyPath = (uint64_t *)swift_getKeyPath();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  v10[0] = sub_25A41FB3C;
  v10[1] = v6;
  type metadata accessor for DelayedInvocation.DelayedInvocationBox.State();
  uint64_t v7 = sub_25A50E5B0();
  swift_retain();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  SynchronousAccessProviding.syncSetValue<A>(at:to:)(KeyPath, (uint64_t)v10, v7, WitnessTable);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_25A41E8B4(uint64_t *a1, uint64_t (**a2)())
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  swift_retain();
  uint64_t result = swift_release();
  *a2 = sub_25A3FADE0;
  a2[1] = (uint64_t (*)())v5;
  return result;
}

uint64_t sub_25A41E924(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (void *)*v1;
  uint64_t v5 = sub_25A50E790();
  uint64_t v31 = *(void *)(v5 - 8);
  uint64_t v32 = v5;
  MEMORY[0x270FA5388](v5);
  unint64_t v30 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = v4[18];
  uint64_t v8 = v4[17];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v13 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)v26 - v14;
  uint64_t v36 = *(void *)((char *)v2 + v4[20]);
  uint64_t v34 = v8;
  uint64_t v35 = v7;
  type metadata accessor for DelayedInvocation.DelayedInvocationBox.State();
  uint64_t v16 = sub_25A50E5B0();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_25A380000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/DelayedInvocation.swift", 129, 2, 92, 40, (uint64_t)"schedule(delay:)", 16, 2, (uint64_t)sub_25A41F964, (uint64_t)v33, v16, (uint64_t)&type metadata for Identifier, WitnessTable);
  swift_release();
  uint64_t v28 = v37;
  uint64_t v29 = (char *)v2 + *(void *)(*v2 + 152);
  (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v8, v7);
  uint64_t v27 = AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t, double))(AssociatedConformanceWitness + 8))(AssociatedTypeWitness, AssociatedConformanceWitness, a1);
  unint64_t v19 = *(void (**)(char *, uint64_t))(v10 + 8);
  v26[1] = v10 + 8;
  v19(v13, AssociatedTypeWitness);
  uint64_t v20 = v30;
  sub_25A50E780();
  uint64_t v21 = swift_allocObject();
  swift_weakInit();
  uint64_t v22 = (void *)swift_allocObject();
  _OWORD v22[2] = v8;
  v22[3] = v7;
  uint64_t v23 = v28;
  v22[4] = v21;
  v22[5] = v23;
  long long v24 = *(void (**)(char *, char *, uint64_t (*)(), void *, uint64_t, uint64_t))(v7 + 32);
  swift_retain();
  v24(v15, v20, sub_25A41F9F0, v22, v8, v7);
  swift_release();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v20, v32);
  v19(v15, v27);
  return swift_release();
}

void sub_25A41ED34(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (qword_26A4154C0 != -1) {
    swift_once();
  }
  uint64_t v5 = (void *)(qword_26A418748 + 16);
  uint64_t v6 = (os_unfair_lock_s *)(qword_26A418748 + 24);
  swift_retain();
  os_unfair_lock_lock(v6);
  sub_25A42091C(v5, &v8);
  os_unfair_lock_unlock(v6);
  if (v2)
  {
    __break(1u);
  }
  else
  {
    uint64_t v7 = v8;
    swift_release();
    *(void *)(a1 + 16) = v7;
    *(unsigned char *)(a1 + 24) = 0;
    *a2 = v7;
  }
}

uint64_t sub_25A41EE10(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v4 = a2;
    char v5 = 0;
    sub_25A41EE78(&v4);
    return swift_release();
  }
  return result;
}

uint64_t sub_25A41EE78(uint64_t *a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *a1;
  char v4 = *((unsigned char *)a1 + 8);
  uint64_t v16 = *(uint64_t *)((char *)v1 + *(void *)(*v1 + 160));
  uint64_t v12 = *(void *)(v2 + 136);
  uint64_t v13 = *(void *)(v2 + 144);
  uint64_t v14 = v3;
  char v15 = v4;
  type metadata accessor for DelayedInvocation.DelayedInvocationBox.State();
  uint64_t v5 = sub_25A50E5B0();
  swift_retain();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(qword_26A4186C0);
  uint64_t WitnessTable = swift_getWitnessTable();
  SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_25A380000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/DelayedInvocation.swift", 129, 2, 105, 52, (uint64_t)"invoke(expectedSeed:)", 21, 2, (uint64_t)sub_25A41F8F8, (uint64_t)v11, v5, v6, WitnessTable);
  uint64_t result = swift_release();
  unint64_t v9 = v17;
  if (v17)
  {
    uint64_t v10 = swift_retain();
    v9(v10);
    sub_25A393228((uint64_t)v9);
    return sub_25A393228((uint64_t)v9);
  }
  return result;
}

uint64_t sub_25A41EFEC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t (**a4)()@<X8>)
{
  if ((*(unsigned char *)(result + 24) & 1) == 0 && ((a3 & 1) != 0 || *(void *)(result + 16) == a2))
  {
    uint64_t v8 = *(void *)result;
    uint64_t v7 = *(void *)(result + 8);
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 1;
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v8;
    *(void *)(v6 + 24) = v7;
    uint64_t result = swift_retain();
    uint64_t v5 = sub_25A400274;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  *a4 = v5;
  a4[1] = (uint64_t (*)())v6;
  return result;
}

uint64_t sub_25A41F088()
{
  uint64_t v1 = *v0;
  uint64_t v8 = *(uint64_t *)((char *)v0 + *(void *)(*v0 + 160));
  uint64_t v6 = *(void *)(v1 + 136);
  uint64_t v7 = *(void *)(v1 + 144);
  type metadata accessor for DelayedInvocation.DelayedInvocationBox.State();
  uint64_t v2 = sub_25A50E5B0();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_25A380000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/DelayedInvocation.swift", 129, 2, 131, 29, (uint64_t)"cancel()", 8, 2, (uint64_t)sub_25A41F954, (uint64_t)v5, v2, MEMORY[0x263F8EE60] + 8, WitnessTable);
  return swift_release();
}

uint64_t sub_25A41F1B4()
{
  uint64_t v1 = 0;
  char v2 = 1;
  return sub_25A41EE78(&v1);
}

uint64_t sub_25A41F1E4()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 136) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 152));

  return swift_release();
}

uint64_t sub_25A41F278()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 136) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 152));
  swift_release();
  return v0;
}

uint64_t sub_25A41F304()
{
  uint64_t v0 = sub_25A41F278();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t sub_25A41F358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)(*(void *)(*(void *)a4 + 136) - 8) + 16))(a4 + *(void *)(*(void *)a4 + 152), a1, *(void *)(*(void *)a4 + 136));
  v10[0] = a2;
  v10[1] = a3;
  v10[2] = 0;
  char v11 = 1;
  uint64_t v7 = type metadata accessor for DelayedInvocation.DelayedInvocationBox.State();
  swift_retain();
  uint64_t v8 = sub_25A3EF560(v10, v7);
  swift_release();
  *(void *)(a4 + *(void *)(*(void *)a4 + 160)) = v8;
  return a4;
}

uint64_t sub_25A41F468(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = sub_25A41F358(a1, a2, a3, v6);
  swift_release();
  return v7;
}

uint64_t sub_25A41F4D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  type metadata accessor for DelayedInvocation.DelayedInvocationBox();
  *(void *)(v4 + 16) = sub_25A41F468(a1, a2, a3);
  return v4;
}

uint64_t sub_25A41F534(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  type metadata accessor for DelayedInvocation.DelayedInvocationBox();
  *(void *)(v6 + 16) = sub_25A41F468(a1, a2, a3);
  return v6;
}

uint64_t sub_25A41F5BC@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(*(void *)a1 + 16) + 80))();
  uint64_t v5 = v4;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v3;
  *(void *)(result + 24) = v5;
  *a2 = sub_25A41FB3C;
  a2[1] = (uint64_t (*)())result;
  return result;
}

uint64_t type metadata accessor for DelayedInvocation()
{
  return self;
}

uint64_t method lookup function for DelayedInvocation(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for DelayedInvocation);
}

uint64_t dispatch thunk of DelayedInvocation.__allocating_init<A>(scheduler:callback:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t type metadata accessor for DelayedInvocation.BaseDelayedInvocationBox()
{
  return self;
}

uint64_t sub_25A41F6BC()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for DelayedInvocation.DelayedInvocationBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A41F774(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  swift_retain();
  return a1;
}

uint64_t sub_25A41F7B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v5;
  return a1;
}

uint64_t sub_25A41F80C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t sub_25A41F854(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 25)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_25A41F89C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for DelayedInvocation.DelayedInvocationBox.State()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A41F8F8@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  return sub_25A41EFEC(a1, *(void *)(v2 + 32), *(unsigned char *)(v2 + 40), a2);
}

uint64_t sub_25A41F91C()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_25A41F954(uint64_t result)
{
  *(void *)(result + 16) = 0;
  *(unsigned char *)(result + 24) = 1;
  return result;
}

void sub_25A41F964(uint64_t a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_25A41F980()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_25A41F9B8()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_25A41F9F0()
{
  return sub_25A41EE10(*(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_25A41F9FC@<X0>(uint64_t *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  *a2 = sub_25A41FB3C;
  a2[1] = (uint64_t (*)())v5;

  return swift_retain();
}

uint64_t sub_25A41FA6C()
{
  return 16;
}

__n128 sub_25A41FA78(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_25A41FA84(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_25A41FAA4(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)__n128 result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

uint64_t sub_25A41FAD4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_25A41FAF0(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(unsigned char *)(result + 8) = 1;
  }
  else
  {
    *(unsigned char *)(result + 8) = 0;
  }
  return result;
}

uint64_t type metadata accessor for DelayedInvocation.DelayedInvocationBox.State.SchedulingState()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t QueryResolver.queryResolverPublisher.getter()
{
  return 0;
}

uint64_t Optional<A>.resolutions.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, a1);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) == 1)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a1);
    unint64_t v12 = sub_25A393124(MEMORY[0x263F8EE78]);
  }
  else
  {
    (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 8))(&v15, v10, a2);
    unint64_t v12 = v15;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415AB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25A5119F0;
  *(void *)(inited + 32) = v12;
  static QueryResolutionsBuilder.buildBlock(_:)(inited, a3);
  swift_setDeallocating();
  return swift_arrayDestroy();
}

uint64_t sub_25A41FD30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return Optional<A>.resolutions.getter(a1, *(void *)(a2 - 8), a3);
}

uint64_t Weak<>.resolutions.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  swift_beginAccess();
  MEMORY[0x26113F1A0](v2 + 16);
  uint64_t v5 = sub_25A50FA40();
  Optional<A>.resolutions.getter(v5, a1, &v9);
  swift_unknownObjectRelease();
  uint64_t v6 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415AB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25A5119F0;
  *(void *)(inited + 32) = v6;
  static QueryResolutionsBuilder.buildBlock(_:)(inited, a2);
  swift_setDeallocating();
  return swift_arrayDestroy();
}

uint64_t sub_25A41FE28@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  return Weak<>.resolutions.getter(*(void *)(a1 - 8), a2);
}

uint64_t dispatch thunk of QueryResolver.resolutions.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of QueryResolver.queryResolverPublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t Identifier.init()@<X0>(void *a1@<X8>)
{
  if (qword_26A4154C0 != -1) {
    swift_once();
  }
  uint64_t v2 = (void *)(qword_26A418748 + 16);
  char v3 = (os_unfair_lock_s *)(qword_26A418748 + 24);
  swift_retain();
  os_unfair_lock_lock(v3);
  sub_25A42091C(v2, &v6);
  os_unfair_lock_unlock(v3);
  uint64_t v4 = v6;
  uint64_t result = swift_release();
  *a1 = v4;
  return result;
}

BOOL static Identifier.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t Identifier.description.getter()
{
  return sub_25A5102B0();
}

uint64_t Identifier.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  unint64_t v12 = (char *)v28 - v11;
  uint64_t v13 = *(void *)(a2 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v10);
  uint64_t v31 = (char *)v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  long long v17 = (char *)v28 - v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)v28 - v16, a1, a2);
  if (sub_25A50F610())
  {
    uint64_t v22 = *(void (**)(char *, uint64_t))(v13 + 8);
    v22(v17, a2);
    uint64_t v24 = 0;
    char v23 = 1;
    goto LABEL_8;
  }
  uint64_t v29 = a1;
  uint64_t v30 = a4;
  uint64_t v18 = sub_25A50FBA0();
  v28[1] = v28;
  MEMORY[0x270FA5388](v18);
  v28[-4] = a2;
  v28[-3] = a3;
  v28[-2] = 10;
  swift_getAssociatedConformanceWitness();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A418758);
  uint64_t v19 = v13;
  sub_25A50EF10();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, AssociatedTypeWitness);
  uint64_t v20 = (uint64_t)v31;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v31, v17, a2);
  if ((v34 & 1) == 0)
  {
    char v25 = v33;
    uint64_t v26 = v32;
    uint64_t v22 = *(void (**)(char *, uint64_t))(v19 + 8);
    v22((char *)v20, a2);
    uint64_t v35 = v26;
    if ((v25 & 1) == 0) {
      goto LABEL_4;
    }
LABEL_6:
    uint64_t v24 = 0;
    char v23 = 1;
    goto LABEL_7;
  }
  unint64_t v21 = sub_25A420AE8();
  sub_25A420B3C(v20, 10, a2, MEMORY[0x263F8E970], a3, v21);
  uint64_t v22 = *(void (**)(char *, uint64_t))(v13 + 8);
  v22((char *)v20, a2);
  if (v36) {
    goto LABEL_6;
  }
LABEL_4:
  char v23 = 0;
  uint64_t v24 = v35;
LABEL_7:
  a1 = v29;
  a4 = v30;
LABEL_8:
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v22)(a1, a2);
  *(void *)a4 = v24;
  *(unsigned char *)(a4 + 8) = v23;
  return result;
}

uint64_t Identifier.hash(into:)()
{
  return sub_25A510520();
}

uint64_t sub_25A420338()
{
  return 0x696669746E656469;
}

uint64_t sub_25A420354@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_25A510370();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_25A4203F8(uint64_t a1)
{
  unint64_t v2 = sub_25A420C80();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25A420434(uint64_t a1)
{
  unint64_t v2 = sub_25A420C80();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t Identifier.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A418760);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  char v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25A420C80();
  sub_25A510570();
  sub_25A510240();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t Identifier.hashValue.getter()
{
  return sub_25A510530();
}

uint64_t Identifier.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A418770);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25A420C80();
  sub_25A510560();
  if (!v2)
  {
    uint64_t v9 = sub_25A510220();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_25A42073C()
{
  return sub_25A5102B0();
}

uint64_t sub_25A420780@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Identifier.init(from:)(a1, a2);
}

uint64_t sub_25A420798(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A418760);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25A420C80();
  sub_25A510570();
  sub_25A510240();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_25A4208CC()
{
  uint64_t v0 = arc4random_uniform(0x2710u);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4187A0);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 16) = v0;
  qword_26A418748 = result;
  return result;
}

void *sub_25A42091C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = (*result)++;
  *a2 = v2;
  return result;
}

uint64_t sub_25A420930(uint64_t (*a1)(void *, uint64_t))
{
  uint64_t v3 = *v1;
  unint64_t v4 = v1[1];
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v6 = HIBYTE(v4) & 0xF;
    v10[0] = v3;
    v10[1] = v4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v5 = v10;
    return a1(v5, v6);
  }
  uint64_t v3 = sub_25A4E6B0C();
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  uint64_t *v1 = v3;
  v1[1] = v8;
  unint64_t v4 = v8;
  if ((v8 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v3 & 0x1000000000000000) != 0)
  {
    uint64_t v5 = (void *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v6 = v3 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v5 = (void *)sub_25A50FE60();
  }
  return a1(v5, v6);
}

unsigned __int8 *sub_25A4209F8@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  int v7 = *result;
  if (v7 == 43)
  {
    BOOL v8 = a2-- < 1;
    if (v8) {
      goto LABEL_15;
    }
    if (result) {
      ++result;
    }
    else {
      uint64_t result = 0;
    }
LABEL_12:
    int v9 = 0;
    return (unsigned __int8 *)sub_25A420F18(result, a2, a3, v9, a4, a5, a6);
  }
  if (v7 != 45) {
    goto LABEL_12;
  }
  BOOL v8 = a2-- < 1;
  if (!v8)
  {
    if (result) {
      ++result;
    }
    else {
      uint64_t result = 0;
    }
    int v9 = 1;
    return (unsigned __int8 *)sub_25A420F18(result, a2, a3, v9, a4, a5, a6);
  }
  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

unsigned __int8 *sub_25A420A6C@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(void *)(v3 + 32);
  unint64_t v8 = sub_25A420AE8();
  return sub_25A4209F8(a1, a2, v7, MEMORY[0x263F8E970], v8, a3);
}

unint64_t sub_25A420AE8()
{
  unint64_t result = qword_26A418750;
  if (!qword_26A418750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A418750);
  }
  return result;
}

uint64_t sub_25A420B3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  MEMORY[0x270FA5388](a1);
  (*(void (**)(unsigned char *))(v12 + 16))(&v15[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)]);
  uint64_t v21 = sub_25A50EED0();
  uint64_t v22 = v13;
  uint64_t v16 = a3;
  uint64_t v17 = a4;
  uint64_t v18 = a5;
  uint64_t v19 = a6;
  uint64_t v20 = a2;
  sub_25A50FA40();
  sub_25A420930((uint64_t (*)(void *, uint64_t))sub_25A421584);
  return swift_bridgeObjectRelease();
}

unint64_t sub_25A420C80()
{
  unint64_t result = qword_26A418768;
  if (!qword_26A418768)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A418768);
  }
  return result;
}

unint64_t sub_25A420CD8()
{
  unint64_t result = qword_26A418778;
  if (!qword_26A418778)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A418778);
  }
  return result;
}

ValueMetadata *type metadata accessor for Identifier()
{
  return &type metadata for Identifier;
}

unsigned char *storeEnumTagSinglePayload for Identifier.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x25A420DD8);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for Identifier.CodingKeys()
{
  return &type metadata for Identifier.CodingKeys;
}

unint64_t sub_25A420E14()
{
  unint64_t result = qword_26A418780;
  if (!qword_26A418780)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A418780);
  }
  return result;
}

unint64_t sub_25A420E6C()
{
  unint64_t result = qword_26A418788;
  if (!qword_26A418788)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A418788);
  }
  return result;
}

unint64_t sub_25A420EC4()
{
  unint64_t result = qword_26A418790;
  if (!qword_26A418790)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A418790);
  }
  return result;
}

uint64_t sub_25A420F18@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int v54 = a4;
  v60 = a1;
  uint64_t v56 = a7;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2 - 8);
  uint64_t v53 = (char *)v47 - v12;
  uint64_t v55 = a6;
  uint64_t v13 = *(void *)(a6 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  uint64_t v20 = MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)v47 - v21;
  MEMORY[0x270FA5388](v20);
  uint64_t v26 = (char *)v47 - v25;
  if (!a2)
  {
    uint64_t v45 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56);
    uint64_t v46 = v56;
    return v45(v46, 1, 1, a5);
  }
  unint64_t v58 = v24;
  uint64_t v61 = v23;
  int v27 = a3 + 48;
  int v28 = a3 + 55;
  int v29 = a3 + 87;
  if (a3 <= 10) {
    int v29 = 97;
  }
  int v48 = v29;
  if (a3 <= 10) {
    int v28 = 65;
  }
  int v49 = v28;
  uint64_t v65 = a3;
  if (a3 > 10) {
    int v27 = 58;
  }
  int v51 = v27;
  sub_25A3FD308();
  uint64_t v59 = v26;
  uint64_t v57 = v13;
  sub_25A50FBB0();
  swift_getAssociatedConformanceWitness();
  sub_25A5103F0();
  sub_25A510340();
  uint64_t v31 = v60;
  if (!v60)
  {
    uint64_t v35 = *(void (**)(char *, uint64_t))(v61 + 8);
    uint64_t v42 = v56;
LABEL_27:
    ((void (*)(char *, uint64_t, uint64_t))v35)(v59, a5, v30);
    (*(void (**)(uint64_t, char *, uint64_t))(v61 + 32))(v42, v22, a5);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v61 + 56))(v42, 0, 1, a5);
  }
  uint64_t v50 = a2;
  uint64_t v30 = v61;
  uint64_t v32 = (void (**)(char *, uint64_t))(v61 + 8);
  char v33 = (void (**)(char *, char *, uint64_t))(v61 + 32);
  v47[1] = (v61 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  while (1)
  {
    unsigned int v34 = *v31;
    if (v34 >= 0x30 && v34 < v51)
    {
      v60 = v31;
      char v62 = v34 - 48;
      sub_25A4215A8();
      goto LABEL_19;
    }
    if (v34 >= 0x41 && v34 < v49)
    {
      v60 = v31;
      char v63 = v34 - 55;
      sub_25A4215A8();
      goto LABEL_19;
    }
    if (v34 < 0x61 || v34 >= v48) {
      break;
    }
    v60 = v31;
    char v64 = v34 - 87;
    sub_25A4215A8();
LABEL_19:
    sub_25A50FBB0();
    int v52 = sub_25A50FFE0();
    uint64_t v35 = *v32;
    (*v32)(v22, a5);
    char v36 = *v33;
    (*v33)(v22, v18, a5);
    uint64_t v37 = v18;
    long long v38 = v58;
    if (v54) {
      int v39 = sub_25A50FFF0();
    }
    else {
      int v39 = sub_25A50FFD0();
    }
    int v40 = v39;
    v35(v38, a5);
    v35(v22, a5);
    uint64_t v41 = v53;
    v36(v53, v37, a5);
    v36(v22, v41, a5);
    if ((v52 | v40))
    {
      v35(v22, a5);
      v35(v59, a5);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v61 + 56))(v56, 1, 1, a5);
    }
    uint64_t v18 = v37;
    uint64_t v30 = v61;
    uint64_t v31 = v60 + 1;
    if (!--v50)
    {
      uint64_t v42 = v56;
      goto LABEL_27;
    }
  }
  uint64_t v44 = *(void (**)(char *, uint64_t))(v30 + 8);
  v44(v22, a5);
  v44(v59, a5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v61 + 56))(v56, 1, 1, a5);
}

unsigned __int8 *sub_25A421510@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  int v6 = *result;
  if (v6 == 43)
  {
    BOOL v7 = a2-- < 1;
    if (v7) {
      goto LABEL_15;
    }
    if (result) {
      ++result;
    }
    else {
      unint64_t result = 0;
    }
LABEL_12:
    int v8 = 0;
    return (unsigned __int8 *)sub_25A420F18(result, a2, a3, v8, a4, a5, a6);
  }
  if (v6 != 45) {
    goto LABEL_12;
  }
  BOOL v7 = a2-- < 1;
  if (!v7)
  {
    if (result) {
      ++result;
    }
    else {
      unint64_t result = 0;
    }
    int v8 = 1;
    return (unsigned __int8 *)sub_25A420F18(result, a2, a3, v8, a4, a5, a6);
  }
  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

unsigned __int8 *sub_25A421584@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_25A421510(a1, a2, v3[6], v3[3], v3[5], a3);
}

unint64_t sub_25A4215A8()
{
  unint64_t result = qword_26A418798;
  if (!qword_26A418798)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A418798);
  }
  return result;
}

BOOL static FutureSerialQueue.Priority.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t FutureSerialQueue.Priority.hash(into:)()
{
  return sub_25A5104F0();
}

void *static FutureSerialQueue.Priority.allCases.getter()
{
  return &unk_27082BF50;
}

uint64_t FutureSerialQueue.Priority.hashValue.getter()
{
  return sub_25A510530();
}

BOOL sub_25A421688(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t _s20PreviewsFoundationOS22DiagnosticsLogPositionO9hashValueSivg_0()
{
  return sub_25A510530();
}

uint64_t sub_25A4216E4()
{
  return sub_25A5104F0();
}

uint64_t sub_25A421710()
{
  return sub_25A510530();
}

void sub_25A421754(void *a1@<X8>)
{
  *a1 = &unk_27082BA00;
}

uint64_t sub_25A421764(uint64_t *a1, unsigned __int8 a2)
{
  int v3 = v2;
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  uint64_t v8 = *v2;
  if (*(void *)(v8 + 16) && (unint64_t v9 = sub_25A4097DC(a2), (v10 & 1) != 0))
  {
    uint64_t v11 = *(void **)(*(void *)(v8 + 56) + 8 * v9);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v11 = (void *)MEMORY[0x263F8EE78];
  }
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v11 = sub_25A38B454(0, v11[2] + 1, 1, v11);
  }
  unint64_t v13 = v11[2];
  unint64_t v12 = v11[3];
  if (v13 >= v12 >> 1) {
    uint64_t v11 = sub_25A38B454((void *)(v12 > 1), v13 + 1, 1, v11);
  }
  v11[2] = v13 + 1;
  uint64_t v14 = &v11[3 * v13];
  v14[4] = v5;
  v14[5] = v6;
  v14[6] = v7;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v17 = *v3;
  uint64_t *v3 = 0x8000000000000000;
  sub_25A3FE424((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native);
  uint64_t *v3 = v17;

  return swift_bridgeObjectRelease();
}

void sub_25A4218A4(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  if (*(void *)(v4 + 16)
    && (unint64_t v5 = sub_25A4097DC(0), (v6 & 1) != 0)
    && (uint64_t v7 = *(void **)(*(void *)(v4 + 56) + 8 * v5), v7[2]))
  {
    unsigned __int8 v8 = 0;
  }
  else
  {
    uint64_t v9 = *v2;
    if (*(void *)(*v2 + 16)
      && (unint64_t v10 = sub_25A4097DC(1u), (v11 & 1) != 0)
      && (uint64_t v7 = *(void **)(*(void *)(v9 + 56) + 8 * v10), v7[2]))
    {
      unsigned __int8 v8 = 1;
    }
    else
    {
      uint64_t v12 = *v2;
      if (!*(void *)(*v2 + 16)
        || (unint64_t v13 = sub_25A4097DC(2u), (v14 & 1) == 0)
        || (uint64_t v7 = *(void **)(*(void *)(v12 + 56) + 8 * v13), !v7[2]))
      {
        *a1 = 0;
        a1[1] = 0;
        a1[2] = 0;
        return;
      }
      unsigned __int8 v8 = 2;
    }
  }
  uint64_t v15 = v7[4];
  uint64_t v16 = v7[5];
  uint64_t v17 = v7[6];
  swift_retain();
  uint64_t v19 = sub_25A421A18(v20, v8);
  if (*(void *)v18)
  {
    if (!*(void *)(*(void *)v18 + 16))
    {
      __break(1u);
      return;
    }
    swift_retain();
    sub_25A42367C(0, 1);
    ((void (*)(void *, void))v19)(v20, 0);
    swift_release();
  }
  else
  {
    ((void (*)(void *, void))v19)(v20, 0);
  }
  *a1 = v15;
  a1[1] = v16;
  a1[2] = v17;
}

void (*sub_25A421A18(void *a1, unsigned __int8 a2))(void *a1)
{
  uint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = sub_25A422E5C(v4, a2);
  return sub_25A421A78;
}

void sub_25A421A78(void *a1)
{
  unint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 32))(*a1, 0);

  free(v1);
}

uint64_t FutureSerialQueue.__allocating_init(on:)(_OWORD *a1)
{
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 24) = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4187A8);
  uint64_t v3 = swift_allocObject();
  *(_DWORD *)(v3 + 36) = 0;
  *(void *)(v3 + 16) = MEMORY[0x263F8EE80];
  *(void *)(v3 + 24) = 0;
  *(unsigned char *)(v3 + 32) = 1;
  *(void *)(v2 + 16) = v3;
  return v2;
}

uint64_t FutureSerialQueue.init(on:)(_OWORD *a1)
{
  *(_OWORD *)(v1 + 24) = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4187A8);
  uint64_t v2 = swift_allocObject();
  *(_DWORD *)(v2 + 36) = 0;
  *(void *)(v2 + 16) = MEMORY[0x263F8EE80];
  *(void *)(v2 + 24) = 0;
  *(unsigned char *)(v2 + 32) = 1;
  *(void *)(v1 + 16) = v2;
  return v1;
}

uint64_t FutureSerialQueue.enqueue<A>(priority:makeFuture:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  type metadata accessor for Future();
  uint64_t v18 = sub_25A3BE428((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/FutureSerialQueue.swift", 129, 2, 89, 57, (uint64_t)"enqueue(priority:makeFuture:)", 29, 2);
  uint64_t v8 = v7;
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = a2;
  v9[3] = a3;
  v9[4] = v8;
  uint64_t v10 = qword_26A4154C0;
  swift_retain();
  swift_retain();
  if (v10 != -1) {
    swift_once();
  }
  char v11 = (void *)(qword_26A418748 + 16);
  uint64_t v12 = (os_unfair_lock_s *)(qword_26A418748 + 24);
  swift_retain();
  os_unfair_lock_lock(v12);
  sub_25A42091C(v11, &v19);
  os_unfair_lock_unlock(v12);
  uint64_t v13 = v19;
  uint64_t v14 = swift_release();
  uint64_t v15 = *(os_unfair_lock_s **)(v4 + 16);
  MEMORY[0x270FA5388](v14);
  swift_retain();
  os_unfair_lock_lock(v15 + 9);
  sub_25A423140();
  os_unfair_lock_unlock(v15 + 9);
  swift_release();
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = v4;
  v16[3] = v13;
  v16[4] = sub_25A423134;
  v16[5] = v9;
  swift_retain();
  swift_retain();
  Future.observeCancelation(_:)((uint64_t)sub_25A423194, (uint64_t)v16);
  swift_release();
  sub_25A421F4C();
  swift_release();
  swift_release();
  return v18;
}

uint64_t sub_25A421DD8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4, uint64_t *a5)
{
  uint64_t v7 = *a5;
  uint64_t v8 = a3();
  uint64_t v9 = *(void *)(v7 + 80);
  sub_25A41B150(v14);
  uint64_t v10 = (void *)v14[0];
  v13[0] = v14[0];
  v13[1] = v14[1];
  Promise.track(future:on:)(v8, v13);
  sub_25A3EE314(v10);
  char v11 = (void *)swift_allocObject();
  v11[2] = v9;
  v11[3] = a1;
  void v11[4] = a2;
  swift_retain();
  Future.observeFinish(_:)((uint64_t)sub_25A4238C0, (uint64_t)v11);
  swift_release();

  return swift_release();
}

uint64_t sub_25A421EDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 36));
  sub_25A423838((uint64_t *)(v2 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 36));
  return swift_release();
}

void sub_25A421F4C()
{
  uint64_t v1 = sub_25A50E750();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_25A50E790();
  uint64_t v30 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (os_unfair_lock_s *)v0[2];
  swift_retain();
  os_unfair_lock_lock(v8 + 9);
  sub_25A4227E8((uint64_t)&v8[4], &aBlock);
  os_unfair_lock_unlock(v8 + 9);
  swift_release();
  uint64_t v9 = (void (*)(uint64_t (*)(), void *))v33;
  if (v33)
  {
    uint64_t v26 = v5;
    uint64_t v27 = v2;
    uint64_t v29 = v1;
    uint64_t v10 = aBlock;
    char v11 = v34;
    uint64_t v12 = (void *)v0[3];
    uint64_t v13 = v0[4];
    uint64_t v14 = (void *)swift_allocObject();
    void v14[2] = v10;
    v14[3] = v9;
    v14[4] = v11;
    v14[5] = v0;
    uint64_t aBlock = (uint64_t)v12;
    uint64_t v33 = v13;
    sub_25A423608(v10, (uint64_t)v9);
    sub_25A423608(v10, (uint64_t)v9);
    swift_retain();
    sub_25A423608(v10, (uint64_t)v9);
    swift_retain();
    sub_25A423608(v10, (uint64_t)v9);
    swift_retain();
    sub_25A3EE304(v12);
    if (ExecutionLane.isCurrentLane.getter())
    {
      uint64_t v15 = (void *)swift_allocObject();
      v15[2] = v0;
      v15[3] = v10;
      void v15[4] = v9;
      v15[5] = v11;
      sub_25A423608(v10, (uint64_t)v9);
      swift_retain();
      v9(sub_25A423A44, v15);
      swift_release();
      swift_release();
      sub_25A423628(v10, (uint64_t)v9);
      swift_release();
      sub_25A423628(v10, (uint64_t)v9);
      swift_release();
      sub_25A423628(v10, (uint64_t)v9);
      sub_25A423628(v10, (uint64_t)v9);
      uint64_t v16 = (uint64_t)v12;
    }
    else
    {
      uint64_t v28 = v13;
      if (v12)
      {
        if (v12 == (void *)1)
        {
          sub_25A3DD980();
          unint64_t v25 = sub_25A50F8D0();
          char v36 = sub_25A4235FC;
          uint64_t v37 = v14;
          uint64_t aBlock = MEMORY[0x263EF8330];
          uint64_t v33 = 1107296256;
          unsigned int v34 = sub_25A3BE05C;
          uint64_t v35 = &block_descriptor_22;
          uint64_t v17 = _Block_copy(&aBlock);
          swift_retain();
          swift_release();
          sub_25A50E770();
          uint64_t aBlock = MEMORY[0x263F8EE78];
          unint64_t v24 = sub_25A3BE558();
          __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
          sub_25A3BE718(qword_26A4168E0, &qword_26A4168D8);
          uint64_t v18 = v29;
          sub_25A50FC90();
          uint64_t v19 = (void *)v25;
          MEMORY[0x26113D8E0](0, v7, v4, v17);
          _Block_release(v17);

          (*(void (**)(char *, uint64_t))(v27 + 8))(v4, v18);
          (*(void (**)(char *, uint64_t))(v30 + 8))(v7, v26);
          swift_release();
          sub_25A423628(v10, (uint64_t)v9);
          swift_release();
          sub_25A423628(v10, (uint64_t)v9);
          swift_release();
          sub_25A423628(v10, (uint64_t)v9);
          sub_25A423628(v10, (uint64_t)v9);
          uint64_t v16 = 1;
        }
        else
        {
          char v36 = sub_25A4235FC;
          uint64_t v37 = v14;
          uint64_t aBlock = MEMORY[0x263EF8330];
          uint64_t v33 = 1107296256;
          unsigned int v34 = sub_25A3BE05C;
          uint64_t v35 = &block_descriptor_6;
          uint64_t v21 = v4;
          unint64_t v24 = (unint64_t)_Block_copy(&aBlock);
          sub_25A3EE304(v12);
          swift_retain();
          sub_25A50E770();
          uint64_t v31 = MEMORY[0x263F8EE78];
          unint64_t v25 = sub_25A3BE558();
          __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
          sub_25A3BE718(qword_26A4168E0, &qword_26A4168D8);
          sub_25A50FC90();
          uint64_t v22 = (const void *)v24;
          MEMORY[0x26113D8E0](0, v7, v21, v24);
          _Block_release(v22);
          sub_25A3EE314(v12);
          (*(void (**)(char *, uint64_t))(v27 + 8))(v21, v29);
          (*(void (**)(char *, uint64_t))(v30 + 8))(v7, v26);
          swift_release();
          swift_release();
          sub_25A423628(v10, (uint64_t)v9);
          swift_release();
          sub_25A423628(v10, (uint64_t)v9);
          swift_release();
          sub_25A423628(v10, (uint64_t)v9);
          sub_25A423628(v10, (uint64_t)v9);
          uint64_t v16 = (uint64_t)v12;
        }
        goto LABEL_12;
      }
      uint64_t v20 = (void *)swift_allocObject();
      long long v20[2] = v0;
      v20[3] = v10;
      void v20[4] = v9;
      v20[5] = v11;
      sub_25A423608(v10, (uint64_t)v9);
      swift_retain();
      v9(sub_25A42361C, v20);
      swift_release();
      swift_release();
      sub_25A423628(v10, (uint64_t)v9);
      swift_release();
      sub_25A423628(v10, (uint64_t)v9);
      swift_release();
      sub_25A423628(v10, (uint64_t)v9);
      sub_25A423628(v10, (uint64_t)v9);
      uint64_t v16 = 0;
    }
LABEL_12:
    sub_25A3EE314((id)v16);
  }
}

uint64_t FutureSerialQueue.enqueue<A>(priority:makeFuture:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = a4;
  v8[3] = a2;
  v8[4] = a3;
  swift_retain();
  uint64_t v9 = FutureSerialQueue.enqueue<A>(priority:makeFuture:)(a1, (uint64_t)sub_25A4231A0, (uint64_t)v8);
  swift_release();
  return v9;
}

uint64_t sub_25A422760(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Future();
  uint64_t v6 = a1;
  uint64_t v7 = a2;
  return sub_25A3BE3E4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/FutureSerialQueue.swift", 129, 2, 122, 23, (uint64_t)"enqueue(priority:makeFuture:)", 29, 2, (void (*)(uint64_t))sub_25A423594, (uint64_t)v5);
}

void sub_25A4227E8(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 16) == 1 && (sub_25A4218A4(&v7), (uint64_t v4 = v8) != 0))
  {
    uint64_t v5 = v9;
    uint64_t v6 = v7;
    *(void *)(a1 + 8) = v7;
    *(unsigned char *)(a1 + 16) = 0;
    *a2 = v6;
    a2[1] = v4;
    a2[2] = v5;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

uint64_t sub_25A422864(uint64_t a1, void (*a2)(uint64_t (*)(), void *), uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = a4;
  v8[3] = a1;
  v8[4] = a2;
  v8[5] = a3;
  swift_retain();
  swift_retain();
  a2(sub_25A423A44, v8);

  return swift_release();
}

uint64_t sub_25A422904(uint64_t a1)
{
  uint64_t v1 = *(os_unfair_lock_s **)(a1 + 16);
  swift_retain();
  os_unfair_lock_lock(v1 + 9);
  sub_25A423654((uint64_t)&v1[4]);
  os_unfair_lock_unlock(v1 + 9);
  uint64_t v2 = swift_release();
  return sub_25A421F4C(v2);
}

uint64_t FutureSerialQueue.deinit()
{
  swift_release();
  sub_25A3EE314(*(id *)(v0 + 24));
  return v0;
}

uint64_t FutureSerialQueue.__deallocating_deinit()
{
  swift_release();
  sub_25A3EE314(*(id *)(v0 + 24));

  return MEMORY[0x270FA0228](v0, 40, 7);
}

char *sub_25A4229F0(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v8 = *(void **)v6;
  int64_t v9 = *(void *)(*(void *)v6 + 16);
  if (v9 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v11 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v12 = 1 - v11;
  if (__OFSUB__(1, v11))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v13 = v9 + v12;
  if (__OFADD__(v9, v12))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v13 > v8[3] >> 1)
  {
    if (v9 <= v13) {
      int64_t v17 = v9 + v12;
    }
    else {
      int64_t v17 = v9;
    }
    uint64_t v8 = sub_25A38C094(isUniquelyReferenced_nonNull_native, v17, 1, v8);
  }
  uint64_t v18 = &v8[4 * a1 + 4];
  unint64_t result = (char *)swift_arrayDestroy();
  if (!v12) {
    goto LABEL_20;
  }
  uint64_t v20 = v8[2];
  BOOL v21 = __OFSUB__(v20, a2);
  uint64_t v22 = v20 - a2;
  if (v21) {
    goto LABEL_26;
  }
  if ((v22 & 0x8000000000000000) == 0)
  {
    unint64_t result = (char *)(v18 + 4);
    uint64_t v23 = &v8[4 * a2 + 4];
    if (v18 + 4 != v23 || result >= (char *)&v23[4 * v22]) {
      unint64_t result = (char *)memmove(result, v23, 32 * v22);
    }
    uint64_t v24 = v8[2];
    BOOL v21 = __OFADD__(v24, v12);
    uint64_t v25 = v24 + v12;
    if (!v21)
    {
      v8[2] = v25;
LABEL_20:
      void *v18 = a3;
      v18[1] = a4;
      v18[2] = a5;
      v18[3] = a6;
      *(void *)uint64_t v6 = v8;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  unint64_t result = (char *)sub_25A510140();
  __break(1u);
  return result;
}

void *sub_25A422B84(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417EE8);
  unint64_t result = (void *)sub_25A510110();
  int64_t v5 = 0;
  uint64_t v33 = a1;
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v7 = a1 + 64;
  uint64_t v6 = v8;
  uint64_t v9 = 1 << *(unsigned char *)(v7 - 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & v6;
  uint64_t v30 = v7;
  int64_t v31 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v32 = result + 8;
  uint64_t v29 = result;
  if ((v10 & v6) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v12 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (unint64_t i = v12 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v5 << 6))
  {
    char v17 = *(unsigned char *)(*(void *)(v33 + 48) + i);
    uint64_t v18 = *(void *)(*(void *)(v33 + 56) + 8 * i);
    uint64_t v19 = *(void *)(v18 + 16);
    if (v19)
    {
      char v34 = *(unsigned char *)(*(void *)(v33 + 48) + i);
      unint64_t v35 = v11;
      int64_t v36 = v5;
      swift_bridgeObjectRetain_n();
      uint64_t v20 = (_OWORD *)(v18 + 40);
      uint64_t v21 = MEMORY[0x263F8EE78];
      do
      {
        uint64_t v25 = *((void *)v20 - 1);
        if (v25 != a2)
        {
          long long v37 = *v20;
          swift_retain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            sub_25A39A108(0, *(void *)(v21 + 16) + 1, 1);
          }
          unint64_t v23 = *(void *)(v21 + 16);
          unint64_t v22 = *(void *)(v21 + 24);
          if (v23 >= v22 >> 1) {
            sub_25A39A108(v22 > 1, v23 + 1, 1);
          }
          *(void *)(v21 + 16) = v23 + 1;
          uint64_t v24 = v21 + 24 * v23;
          *(void *)(v24 + 32) = v25;
          *(_OWORD *)(v24 + 40) = v37;
        }
        uint64_t v20 = (_OWORD *)((char *)v20 + 24);
        --v19;
      }
      while (v19);
      swift_bridgeObjectRelease_n();
      unint64_t result = v29;
      unint64_t v11 = v35;
      int64_t v5 = v36;
      char v17 = v34;
    }
    else
    {
      uint64_t v21 = MEMORY[0x263F8EE78];
    }
    *(void *)((char *)v32 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    *(unsigned char *)(result[6] + i) = v17;
    *(void *)(result[7] + 8 * i) = v21;
    uint64_t v26 = result[2];
    BOOL v27 = __OFADD__(v26, 1);
    uint64_t v28 = v26 + 1;
    if (v27)
    {
      __break(1u);
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    result[2] = v28;
    if (v11) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v14 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      goto LABEL_35;
    }
    if (v14 >= v31) {
      return result;
    }
    unint64_t v15 = *(void *)(v30 + 8 * v14);
    ++v5;
    if (!v15)
    {
      int64_t v5 = v14 + 1;
      if (v14 + 1 >= v31) {
        return result;
      }
      unint64_t v15 = *(void *)(v30 + 8 * v5);
      if (!v15)
      {
        int64_t v5 = v14 + 2;
        if (v14 + 2 >= v31) {
          return result;
        }
        unint64_t v15 = *(void *)(v30 + 8 * v5);
        if (!v15) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v11 = (v15 - 1) & v15;
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v31) {
    return result;
  }
  unint64_t v15 = *(void *)(v30 + 8 * v16);
  if (v15)
  {
    int64_t v5 = v16;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v5 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v5 >= v31) {
      return result;
    }
    unint64_t v15 = *(void *)(v30 + 8 * v5);
    ++v16;
    if (v15) {
      goto LABEL_18;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

void (*sub_25A422E5C(void *a1, unsigned __int8 a2))(uint64_t a1)
{
  uint64_t v4 = malloc(0x50uLL);
  *a1 = v4;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4[8] = sub_25A4230B8(v4);
  v4[9] = sub_25A422F4C((uint64_t)(v4 + 4), a2, isUniquelyReferenced_nonNull_native);
  return sub_25A422EEC;
}

void sub_25A422EEC(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 64);
  (*(void (**)(void))(*(void *)a1 + 72))();
  v2(v1, 0);

  free(v1);
}

unint64_t (*sub_25A422F4C(uint64_t a1, unsigned __int8 a2, char a3))(unint64_t result)
{
  uint64_t v4 = v3;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 24) = a2;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_25A4097DC(a2);
  *(unsigned char *)(a1 + 25) = v9 & 1;
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    char v14 = v9;
    uint64_t v15 = *(void *)(v8 + 24);
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      *(void *)(a1 + 16) = v10;
      if (v14)
      {
LABEL_8:
        uint64_t v16 = *(void *)(*(void *)(*v4 + 56) + 8 * v10);
LABEL_12:
        *(void *)a1 = v16;
        return sub_25A423070;
      }
LABEL_11:
      uint64_t v16 = 0;
      goto LABEL_12;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_25A40F45C();
      goto LABEL_7;
    }
    sub_25A40C0E4(v13, a3 & 1);
    unint64_t v17 = sub_25A4097DC(a2);
    if ((v14 & 1) == (v18 & 1))
    {
      unint64_t v10 = v17;
      *(void *)(a1 + 16) = v17;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  unint64_t result = (unint64_t (*)(unint64_t))sub_25A510430();
  __break(1u);
  return result;
}

unint64_t sub_25A423070(unint64_t result)
{
  uint64_t v1 = *(void *)result;
  if (*(void *)result)
  {
    uint64_t v2 = **(void ***)(result + 8);
    if (*(unsigned char *)(result + 25)) {
      *(void *)(v2[7] + 8 * *(void *)(result + 16)) = v1;
    }
    else {
      return sub_25A3FF13C(*(void *)(result + 16), *(unsigned char *)(result + 24), v1, v2);
    }
  }
  else if (*(unsigned char *)(result + 25))
  {
    return sub_25A39872C(*(void *)(result + 16), **(void **)(result + 8));
  }
  return result;
}

uint64_t (*sub_25A4230B8(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  void *v1 = 0x8000000000000000;
  return sub_25A4230E8;
}

uint64_t sub_25A4230E8(uint64_t result)
{
  **(void **)(result + 8) = *(void *)result;
  return result;
}

uint64_t sub_25A4230F4()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_25A423134(uint64_t a1, uint64_t a2)
{
  return sub_25A421DD8(a1, a2, *(uint64_t (**)(void))(v2 + 16), *(void *)(v2 + 24), *(uint64_t **)(v2 + 32));
}

uint64_t sub_25A423140()
{
  unsigned __int8 v1 = *(unsigned char *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 16);
  long long v4 = *(_OWORD *)(v0 + 24);
  return sub_25A421764(&v3, v1);
}

uint64_t sub_25A423194(uint64_t a1)
{
  return sub_25A421EDC(a1, *(void *)(v1 + 16));
}

uint64_t sub_25A4231A0()
{
  return sub_25A422760(*(void *)(v0 + 24), *(void *)(v0 + 32));
}

unint64_t sub_25A4231B0()
{
  unint64_t result = qword_26A4187B0;
  if (!qword_26A4187B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4187B0);
  }
  return result;
}

uint64_t sub_25A423204()
{
  return sub_25A3BE718(&qword_26A4187B8, &qword_26A4187C0);
}

uint64_t type metadata accessor for FutureSerialQueue()
{
  return self;
}

uint64_t method lookup function for FutureSerialQueue(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for FutureSerialQueue);
}

uint64_t dispatch thunk of FutureSerialQueue.__allocating_init(on:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t getEnumTagSinglePayload for FutureSerialQueue.Priority(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for FutureSerialQueue.Priority(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25A4233ECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FutureSerialQueue.Priority()
{
  return &type metadata for FutureSerialQueue.Priority;
}

uint64_t initializeBufferWithCopyOfBuffer for FutureSerialQueue.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FutureSerialQueue.State(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  return a1;
}

uint64_t assignWithTake for FutureSerialQueue.State(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for FutureSerialQueue.State(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FutureSerialQueue.State(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FutureSerialQueue.State()
{
  return &type metadata for FutureSerialQueue.State;
}

uint64_t sub_25A423594()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_25A4235BC()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_25A4235FC()
{
  return sub_25A422864(*(void *)(v0 + 16), *(void (**)(uint64_t (*)(), void *))(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_25A423608(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_25A42361C()
{
  return sub_25A422904(*(void *)(v0 + 16));
}

uint64_t sub_25A423628(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return swift_release();
  }
  return result;
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

uint64_t sub_25A423654(uint64_t result)
{
  if ((*(unsigned char *)(result + 16) & 1) == 0 && *(void *)(result + 8) == *(void *)(v1 + 16))
  {
    *(void *)(result + 8) = 0;
    *(unsigned char *)(result + 16) = 1;
  }
  return result;
}

uint64_t sub_25A42367C(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = sub_25A38B454(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[3 * a2 + 4];
    if (a1 != a2 || &v4[3 * a1 + 4] >= (void *)&v16[24 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[3 * a1 + 4], v16, 24 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      void v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

uint64_t objectdestroy_2Tm_0()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_25A423838(uint64_t *a1)
{
  uint64_t v3 = sub_25A422B84(*a1, *(void *)(v1 + 16));
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = (uint64_t)v3;
  return result;
}

uint64_t sub_25A423888()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_25A4238C0()
{
  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t destroy for FutureSerialQueue.Operation()
{
  return swift_release();
}

void *_s20PreviewsFoundationOS17FutureSerialQueueC9OperationVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = a2[2];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = v4;
  swift_retain();
  return a1;
}

void *assignWithCopy for FutureSerialQueue.Operation(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[2];
  a1[1] = a2[1];
  a1[2] = v3;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for FutureSerialQueue.Operation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for FutureSerialQueue.Operation(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FutureSerialQueue.Operation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FutureSerialQueue.Operation()
{
  return &type metadata for FutureSerialQueue.Operation;
}

unint64_t static PrintToConsoleUtilities.pathToLiveExecutionResultsProbe.getter()
{
  return 0xD00000000000005FLL;
}

ValueMetadata *type metadata accessor for PrintToConsoleUtilities()
{
  return &type metadata for PrintToConsoleUtilities;
}

void __swiftcall BuildNumber.init(majorRelease:minorRelease:majorBuild:minorBuild:)(PreviewsFoundationOS::BuildNumber *__return_ptr retstr, Swift::Int majorRelease, Swift::String minorRelease, Swift::Int majorBuild, Swift::String_optional minorBuild)
{
  retstr->majorRelease = majorRelease;
  retstr->majorBuild = majorBuild;
  retstr->rawMinorRelease = minorRelease;
  retstr->rawMinorBuild = minorBuild;
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> BuildNumber.init(_:)(PreviewsFoundationOS::BuildNumber *__return_ptr retstr, Swift::String a2)
{
  uint64_t v30 = retstr;
  uint64_t v2 = sub_25A50F9F0();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  int64_t v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = objc_allocWithZone(MEMORY[0x263F08B08]);
  uint64_t v7 = (void *)sub_25A50EBF0();
  swift_bridgeObjectRelease();
  id v8 = objc_msgSend(v6, sel_initWithString_, v7);

  int64_t v9 = *(void (**)(void))(v3 + 104);
  unsigned int v32 = *MEMORY[0x263F07D68];
  int64_t v31 = (void (*)(char *, void, uint64_t))v9;
  v9(v5);
  uint64_t v10 = sub_25A50FA00();
  LOBYTE(v6) = v11;
  BOOL v12 = *(void (**)(char *, uint64_t))(v3 + 8);
  v12(v5, v2);
  char v13 = 0;
  if ((v6 & 1) != 0 || v10 < 1) {
    goto LABEL_13;
  }
  Swift::Int v14 = v10;
  uint64_t v15 = sub_25A50F9E0();
  if (!v16) {
    goto LABEL_12;
  }
  uint64_t v17 = v15;
  uint64_t v18 = v16;
  if ((sub_25A50EA60() & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_12:
    char v13 = 1;
    goto LABEL_13;
  }
  uint64_t v29 = v17;
  v31(v5, v32, v2);
  uint64_t v19 = sub_25A50FA00();
  char v21 = v20;
  v12(v5, v2);
  if ((v21 & 1) != 0 || v19 < 1)
  {
    swift_bridgeObjectRelease();
    char v13 = 2;
  }
  else
  {
    uint64_t v22 = sub_25A50F9E0();
    uint64_t v24 = v23;
    if (v23 && (swift_bridgeObjectRetain(), char v25 = sub_25A50EA60(), swift_bridgeObjectRelease(), (v25 & 1) == 0))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v13 = 3;
    }
    else
    {
      if (objc_msgSend(v8, sel_isAtEnd))
      {

        uint64_t v27 = v29;
        uint64_t v26 = v30;
        v30->majorRelease = v14;
        v26->majorBuild = v19;
        v26->rawMinorRelease._countAndFlagsBits = v27;
        v26->rawMinorRelease._object = v18;
        v26->rawMinorBuild.value._countAndFlagsBits = v22;
        v26->rawMinorBuild.value._object = v24;
        return;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v13 = 4;
    }
  }
LABEL_13:
  sub_25A423D58();
  swift_allocError();
  *uint64_t v28 = v13;
  swift_willThrow();
}

unint64_t sub_25A423D58()
{
  unint64_t result = qword_26A4187F8;
  if (!qword_26A4187F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4187F8);
  }
  return result;
}

void static BuildNumber.createConfidently(_:)(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  swift_bridgeObjectRetain();
  v6._uint64_t countAndFlagsBits = a1;
  v6._object = a2;
  BuildNumber.init(_:)(&v12, v6);
  if (v7)
  {
    v12.majorRelease = (Swift::Int)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Source"
                                   "s/PreviewsFoundation/BuildNumber.swift";
    v12.majorBuild = 123;
    LOBYTE(v12.rawMinorRelease._countAndFlagsBits) = 2;
    *(_OWORD *)&v12.rawMinorRelease._object = xmmword_25A516A50;
    v12.rawMinorBuild.value._object = "createConfidently(_:)";
    uint64_t v13 = 21;
    char v14 = 2;
    sub_25A403498();

    int64x2_t v8 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    Swift::String_optional rawMinorBuild = (Swift::String_optional)0;
    object = (void *)0xE100000000000000;
    uint64_t countAndFlagsBits = 90;
  }
  else
  {
    int64x2_t v8 = *(int64x2_t *)&v12.majorRelease;
    uint64_t countAndFlagsBits = v12.rawMinorRelease._countAndFlagsBits;
    object = v12.rawMinorRelease._object;
    Swift::String_optional rawMinorBuild = v12.rawMinorBuild;
  }
  *(int64x2_t *)a3 = v8;
  *(void *)(a3 + 16) = countAndFlagsBits;
  *(void *)(a3 + 24) = object;
  *(Swift::String_optional *)(a3 + 32) = rawMinorBuild;
}

double sub_25A423E7C()
{
  *(void *)&double result = sub_25A423E88((PreviewsFoundationOS::BuildNumber *)&xmmword_26A4187C8).u64[0];
  return result;
}

int64x2_t sub_25A423E88@<Q0>(PreviewsFoundationOS::BuildNumber *a1@<X8>)
{
  id v2 = UVCurrentSystemBuildNumberString();
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = sub_25A50EC20();
    Swift::String v6 = v5;

    v7._uint64_t countAndFlagsBits = v4;
    v7._object = v6;
    BuildNumber.init(_:)(a1, v7);
    uint64_t v10 = v9;
    if (!v9) {
      return result;
    }
  }
  else
  {
    sub_25A4251CC();
    uint64_t v10 = (void *)swift_allocError();
    swift_willThrow();
  }
  if (qword_26B329310 != -1) {
    swift_once();
  }
  uint64_t v11 = sub_25A50E5E0();
  __swift_project_value_buffer(v11, (uint64_t)qword_26B3292F8);
  id v12 = v10;
  id v13 = v10;
  char v14 = sub_25A50E5C0();
  os_log_type_t v15 = sub_25A50F830();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 138543362;
    id v18 = v10;
    uint64_t v19 = _swift_stdlib_bridgeErrorToNSError();
    sub_25A50FB00();
    *uint64_t v17 = v19;

    _os_log_impl(&dword_25A380000, v14, v15, "Failed to get current system version, falling back to 1A1: %{public}@", v16, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(qword_26A416680);
    swift_arrayDestroy();
    MEMORY[0x26113F070](v17, -1, -1);
    MEMORY[0x26113F070](v16, -1, -1);
  }
  else
  {
  }
  int64x2_t result = vdupq_n_s64(1uLL);
  *(int64x2_t *)&a1->majorRelease = result;
  a1->rawMinorRelease._uint64_t countAndFlagsBits = 65;
  a1->rawMinorRelease._object = (void *)0xE100000000000000;
  a1->rawMinorBuild.value._uint64_t countAndFlagsBits = 0;
  a1->rawMinorBuild.value._object = 0;
  return result;
}

uint64_t static BuildNumber.current.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_26A4154C8 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_26A4187D8;
  uint64_t v3 = unk_26A4187E0;
  uint64_t v5 = qword_26A4187E8;
  uint64_t v4 = unk_26A4187F0;
  *(_OWORD *)a1 = xmmword_26A4187C8;
  *(void *)(a1 + 16) = v2;
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

int64x2_t static BuildNumber.distantPast.getter@<Q0>(int64x2_t *a1@<X8>)
{
  int64x2_t result = vdupq_n_s64(1uLL);
  *a1 = result;
  a1[1].i64[0] = 65;
  a1[1].i64[1] = 0xE100000000000000;
  a1[2].i64[0] = 0;
  a1[2].i64[1] = 0;
  return result;
}

int64x2_t static BuildNumber.distantFuture.getter@<Q0>(int64x2_t *a1@<X8>)
{
  int64x2_t result = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *a1 = result;
  a1[1].i64[0] = 90;
  a1[1].i64[1] = 0xE100000000000000;
  a1[2].i64[0] = 0;
  a1[2].i64[1] = 0;
  return result;
}

uint64_t BuildNumber.hash(into:)()
{
  uint64_t v1 = *(void *)(v0 + 40);
  sub_25A5104F0();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_25A50EA50();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_25A50ED30();
  swift_bridgeObjectRelease();
  sub_25A5104F0();
  if (!v1) {
    return sub_25A510500();
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_25A50EA40();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_25A510500();
  swift_bridgeObjectRetain();
  sub_25A50ED30();
  return swift_bridgeObjectRelease_n();
}

uint64_t BuildNumber.description.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v3 = sub_25A5102B0();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_25A50EA50();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A5102B0();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  if (v1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_25A50EA40();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t BuildNumber.releaseDescription.getter()
{
  uint64_t v1 = sub_25A5102B0();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_25A50EA50();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t BuildNumber.hashValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  sub_25A5104E0();
  sub_25A5104F0();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_25A50EA50();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_25A50ED30();
  swift_bridgeObjectRelease();
  sub_25A5104F0();
  if (v1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_25A50EA40();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_25A510500();
    swift_bridgeObjectRetain();
    sub_25A50ED30();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    sub_25A510500();
  }
  return sub_25A510530();
}

uint64_t sub_25A4245E8()
{
  uint64_t v1 = *(void *)(v0 + 40);
  sub_25A5104E0();
  sub_25A5104F0();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_25A50EA50();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_25A50ED30();
  swift_bridgeObjectRelease();
  sub_25A5104F0();
  if (v1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_25A50EA40();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_25A510500();
    swift_bridgeObjectRetain();
    sub_25A50ED30();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    sub_25A510500();
  }
  return sub_25A510530();
}

BOOL sub_25A424720(long long *a1, long long *a2)
{
  uint64_t v2 = *((void *)a1 + 3);
  uint64_t v3 = *((void *)a2 + 2);
  uint64_t v4 = *((void *)a2 + 3);
  long long v5 = *a1;
  uint64_t v12 = *((void *)a1 + 2);
  uint64_t v13 = v2;
  long long v14 = a1[2];
  long long v7 = *a2;
  uint64_t v8 = v3;
  uint64_t v9 = v4;
  long long v10 = a2[2];
  long long v11 = v5;
  return !_s20PreviewsFoundationOS11BuildNumberV1loiySbAC_ACtFZ_0(&v7, &v11);
}

BOOL sub_25A42477C(long long *a1, long long *a2)
{
  uint64_t v2 = *((void *)a1 + 3);
  uint64_t v3 = *((void *)a2 + 2);
  uint64_t v4 = *((void *)a2 + 3);
  long long v5 = *a1;
  uint64_t v12 = *((void *)a1 + 2);
  uint64_t v13 = v2;
  long long v14 = a1[2];
  long long v7 = *a2;
  uint64_t v8 = v3;
  uint64_t v9 = v4;
  long long v10 = a2[2];
  long long v11 = v5;
  return !_s20PreviewsFoundationOS11BuildNumberV1loiySbAC_ACtFZ_0(&v11, &v7);
}

BOOL sub_25A4247D8(long long *a1, long long *a2)
{
  uint64_t v2 = *((void *)a1 + 3);
  uint64_t v3 = *((void *)a2 + 2);
  uint64_t v4 = *((void *)a2 + 3);
  long long v5 = *a1;
  uint64_t v12 = *((void *)a1 + 2);
  uint64_t v13 = v2;
  long long v14 = a1[2];
  long long v7 = *a2;
  uint64_t v8 = v3;
  uint64_t v9 = v4;
  long long v10 = a2[2];
  long long v11 = v5;
  return _s20PreviewsFoundationOS11BuildNumberV1loiySbAC_ACtFZ_0(&v7, &v11);
}

BOOL _s20PreviewsFoundationOS11BuildNumberV1loiySbAC_ACtFZ_0(void *a1, void *a2)
{
  BOOL v2 = *a1 < *a2;
  if (*a1 == *a2)
  {
    uint64_t v3 = a1[5];
    uint64_t v26 = a2[1];
    uint64_t v27 = a1[1];
    uint64_t v4 = a2[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_25A50EA50();
    uint64_t v7 = v6;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_25A50EA50();
    uint64_t v10 = v9;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v5 == v8 && v7 == v10)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v11 = sub_25A510370();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v11 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v16 = sub_25A50EA50();
        uint64_t v18 = v17;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v19 = sub_25A50EA50();
        uint64_t v21 = v20;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v16 == v19 && v18 == v21)
        {
          swift_bridgeObjectRelease_n();
          return 0;
        }
LABEL_29:
        char v25 = sub_25A510370();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v25 & 1;
      }
    }
    BOOL v2 = v27 < v26;
    if (v27 == v26)
    {
      if (v3)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v12 = sub_25A50EA40();
        uint64_t v14 = v13;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (!v4)
        {
          if (!v14) {
            return 0;
          }
LABEL_25:
          swift_bridgeObjectRelease();
          return 0;
        }
      }
      else
      {
        if (!v4) {
          return 0;
        }
        uint64_t v14 = 0;
        uint64_t v12 = 0;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v22 = sub_25A50EA40();
      uint64_t v24 = v23;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!v14)
      {
        if (v24)
        {
          swift_bridgeObjectRelease();
          return 1;
        }
        return 0;
      }
      if (!v24) {
        goto LABEL_25;
      }
      if (v12 == v22 && v14 == v24)
      {
        swift_bridgeObjectRelease();
        goto LABEL_25;
      }
      goto LABEL_29;
    }
  }
  return v2;
}

uint64_t _s20PreviewsFoundationOS11BuildNumberV2eeoiySbAC_ACtFZ_0(void *a1, void *a2)
{
  if (*a1 != *a2) {
    goto LABEL_5;
  }
  uint64_t v2 = a1[5];
  uint64_t v3 = a2[5];
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_25A50EA50();
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = sub_25A50EA50();
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v6 == v9 && v8 == v11)
  {
    swift_bridgeObjectRelease_n();
    if (v5 != v4)
    {
LABEL_5:
      char v12 = 0;
      return v12 & 1;
    }
LABEL_8:
    if (v2)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v14 = sub_25A50EA40();
      uint64_t v16 = v15;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v3)
      {
LABEL_10:
        uint64_t v17 = sub_25A50EA40();
        uint64_t v19 = v18;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v16)
        {
          if (v19)
          {
            if (v14 == v17 && v16 == v19)
            {
              swift_bridgeObjectRelease();
              char v12 = 1;
            }
            else
            {
              char v12 = sub_25A510370();
              swift_bridgeObjectRelease();
            }
            goto LABEL_22;
          }
          goto LABEL_17;
        }
        if (v19)
        {
          char v12 = 0;
          goto LABEL_22;
        }
        goto LABEL_20;
      }
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v14 = 0;
      uint64_t v16 = 0;
      if (v3) {
        goto LABEL_10;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v16)
    {
LABEL_17:
      char v12 = 0;
LABEL_22:
      swift_bridgeObjectRelease();
      return v12 & 1;
    }
LABEL_20:
    char v12 = 1;
    return v12 & 1;
  }
  char v13 = sub_25A510370();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v12 = 0;
  if ((v13 & 1) != 0 && v5 == v4) {
    goto LABEL_8;
  }
  return v12 & 1;
}

unint64_t sub_25A424D94()
{
  unint64_t result = qword_26A418800;
  if (!qword_26A418800)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A418800);
  }
  return result;
}

uint64_t destroy for BuildNumber()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for BuildNumber(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for BuildNumber(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for BuildNumber(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for BuildNumber(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BuildNumber(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BuildNumber()
{
  return &type metadata for BuildNumber;
}

uint64_t getEnumTagSinglePayload for BuildNumber.Invalid(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for BuildNumber.Invalid(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25A42513CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BuildNumber.Invalid()
{
  return &type metadata for BuildNumber.Invalid;
}

unint64_t sub_25A425178()
{
  unint64_t result = qword_26A418808;
  if (!qword_26A418808)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A418808);
  }
  return result;
}

unint64_t sub_25A4251CC()
{
  unint64_t result = qword_26A418810[0];
  if (!qword_26A418810[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A418810);
  }
  return result;
}

ValueMetadata *type metadata accessor for BuildNumber.FailedToGetCurrentVersionString()
{
  return &type metadata for BuildNumber.FailedToGetCurrentVersionString;
}

uint64_t static AlwaysEqual.== infix(_:_:)()
{
  return 1;
}

uint64_t static AlwaysEqual.< infix(_:_:)()
{
  return 0;
}

uint64_t Inhabited.predicated.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for HasHead();
  swift_getWitnessTable();
  uint64_t v3 = type metadata accessor for Predicated();
  unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t type metadata accessor for HasHead()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Inhabited.predicated.setter(uint64_t a1)
{
  type metadata accessor for HasHead();
  swift_getWitnessTable();
  uint64_t v3 = type metadata accessor for Predicated();
  unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t (*Inhabited.predicated.modify())()
{
  return nullsub_1;
}

uint64_t Inhabited.init(predicated:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for HasHead();
  swift_getWitnessTable();
  uint64_t v4 = type metadata accessor for Predicated();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32);

  return v5(a2, a1, v4);
}

uint64_t sub_25A425468@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return Inhabited.init(predicated:)(a1, a2);
}

uint64_t static Inhabited<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](a1);
  BOOL v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v15 - v8;
  uint64_t v10 = type metadata accessor for Inhabited();
  uint64_t WitnessTable = swift_getWitnessTable();
  PredicatedWrapper.value.getter(v10, WitnessTable, (uint64_t)v9);
  PredicatedWrapper.value.getter(v10, WitnessTable, (uint64_t)v7);
  char v12 = sub_25A50EBE0();
  char v13 = *(void (**)(char *, uint64_t))(v4 + 8);
  v13(v7, a3);
  v13(v9, a3);
  return v12 & 1;
}

uint64_t type metadata accessor for Inhabited()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A425610(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Inhabited<>.== infix(_:_:)(a1, a2, *(void *)(a3 + 16));
}

uint64_t Inhabited<>.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t WitnessTable = swift_getWitnessTable();
  PredicatedWrapper.value.getter(a2, WitnessTable, (uint64_t)v6);
  sub_25A50EA20();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t Inhabited<>.hashValue.getter(uint64_t a1)
{
  sub_25A5104E0();
  Inhabited<>.hash(into:)((uint64_t)v3, a1);
  return sub_25A510530();
}

uint64_t sub_25A425780(uint64_t a1)
{
  return Inhabited<>.hashValue.getter(a1);
}

uint64_t sub_25A425788(uint64_t a1, uint64_t a2)
{
  return Inhabited<>.hash(into:)(a1, a2);
}

uint64_t sub_25A425790(uint64_t a1, uint64_t a2)
{
  sub_25A5104E0();
  Inhabited<>.hash(into:)((uint64_t)v4, a2);
  return sub_25A510530();
}

uint64_t static HasHead.isSatisfied(by:)()
{
  return sub_25A50EF90();
}

uint64_t sub_25A425840()
{
  return static HasHead.isSatisfied(by:)();
}

uint64_t Inhabited.makeIterator()(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t WitnessTable = swift_getWitnessTable();
  PredicatedWrapper.value.getter(a1, WitnessTable, (uint64_t)v3);
  return sub_25A50EEF0();
}

uint64_t Inhabited.sorted(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v29 = a2;
  uint64_t v24 = a4;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v27 = *(void *)(a3 + 24);
  uint64_t v28 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_25A50FA40();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v25 = AssociatedTypeWitness;
  uint64_t v26 = (char *)v23 - v8;
  sub_25A50F1E0();
  v23[1] = swift_getWitnessTable();
  type metadata accessor for HasHead();
  swift_getWitnessTable();
  uint64_t v9 = type metadata accessor for Predicated();
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  char v12 = (char *)v23 - v11;
  uint64_t v13 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v15 = (char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t WitnessTable = swift_getWitnessTable();
  PredicatedWrapper.value.getter(a3, WitnessTable, (uint64_t)v15);
  uint64_t v17 = v30;
  uint64_t v18 = sub_25A50EFD0();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v5);
  if (!v17)
  {
    uint64_t v32 = v18;
    uint64_t v30 = v18;
    uint64_t v31 = v18;
    swift_getWitnessTable();
    uint64_t v20 = (uint64_t)v26;
    sub_25A50F670();
    uint64_t v21 = v25;
    uint64_t v22 = *(void *)(v25 - 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v20, 1, v25);
    if (result == 1)
    {
      __break(1u);
    }
    else
    {
      static Predicated.unverified(value:proof:)((uint64_t)&v32, v20, (uint64_t)v12);
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
      swift_bridgeObjectRelease();
      return Inhabited.init(predicated:)((uint64_t)v12, v24);
    }
  }
  return result;
}

uint64_t Inhabited.map<A>(using:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X8>)
{
  char v62 = a2;
  uint64_t v61 = (char *)a1;
  uint64_t v59 = a5;
  uint64_t v49 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  int v51 = (char *)v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_25A50F1E0();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v60 = v9;
  uint64_t v58 = WitnessTable;
  uint64_t HasHead = type metadata accessor for HasHead();
  uint64_t v12 = swift_getWitnessTable();
  uint64_t v53 = HasHead;
  uint64_t v57 = v12;
  uint64_t v13 = type metadata accessor for Predicated();
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v56 = (uint64_t)v45 - v14;
  uint64_t v48 = sub_25A50FA40();
  uint64_t v47 = *(void *)(v48 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v48);
  uint64_t v55 = (char *)v45 - v16;
  uint64_t v54 = *((void *)a4 - 1);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  int v52 = (char *)v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(a3 + 16);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = MEMORY[0x270FA5388](v17);
  uint64_t v23 = (char *)v45 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v25 = (char *)v45 - v24;
  uint64_t v26 = swift_getWitnessTable();
  uint64_t v50 = v5;
  PredicatedWrapper.value.getter(a3, v26, (uint64_t)v25);
  uint64_t v65 = v19;
  uint64_t v66 = a4;
  uint64_t v67 = *(void *)(a3 + 24);
  uint64_t v27 = v67;
  uint64_t v68 = (uint64_t)v61;
  uint64_t v69 = v62;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A415838);
  char v62 = a4;
  uint64_t v29 = v63;
  uint64_t v30 = sub_25A4E8930((void (*)(char *, char *))sub_25A4262FC, (uint64_t)v64, v19, a4, v28, v27, MEMORY[0x263F8E4E0], (uint64_t)v70);
  uint64_t v31 = v25;
  uint64_t v32 = *(uint64_t (**)(char *, uint64_t))(v20 + 8);
  uint64_t result = v32(v31, v19);
  if (!v29)
  {
    v45[0] = v32;
    v45[1] = v27;
    uint64_t v46 = v26;
    uint64_t v61 = v23;
    uint64_t v63 = v20 + 8;
    uint64_t v34 = v30;
    v70[0] = v30;
    swift_getWitnessTable();
    unint64_t v35 = v55;
    sub_25A50F670();
    uint64_t v36 = v54;
    long long v37 = v62;
    if ((*(unsigned int (**)(char *, uint64_t, char *))(v54 + 48))(v35, 1, v62) == 1)
    {
      (*(void (**)(char *, uint64_t))(v47 + 8))(v35, v48);
      uint64_t v40 = a3;
      (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v51, v50, a3);
      v70[0] = 0;
      v70[1] = 0xE000000000000000;
      sub_25A50FDB0();
      sub_25A50EDA0();
      uint64_t v41 = (uint64_t)v61;
      uint64_t v42 = v46;
      PredicatedWrapper.value.getter(a3, v46, (uint64_t)v61);
      swift_getDynamicType();
      uint64_t v43 = (void (*)(uint64_t, uint64_t))v45[0];
      ((void (*)(uint64_t, uint64_t))v45[0])(v41, v19);
      sub_25A5105D0();
      sub_25A50EDA0();
      swift_bridgeObjectRelease();
      sub_25A50EDA0();
      PredicatedWrapper.value.getter(v40, v42, v41);
      uint64_t v44 = sub_25A50EF00();
      v43(v41, v19);
      v70[4] = v44;
      sub_25A5102B0();
      sub_25A50EDA0();
      swift_bridgeObjectRelease();
      sub_25A50EDA0();
      uint64_t result = sub_25A510060();
      __break(1u);
    }
    else
    {
      uint64_t v38 = (uint64_t)v52;
      (*(void (**)(char *, char *, char *))(v36 + 32))(v52, v35, v37);
      v70[0] = v34;
      uint64_t v39 = v56;
      static Predicated.unverified(value:proof:)((uint64_t)v70, v38, v56);
      (*(void (**)(uint64_t, char *))(v36 + 8))(v38, v37);
      swift_bridgeObjectRelease();
      return Inhabited.init(predicated:)(v39, v59);
    }
  }
  return result;
}

uint64_t sub_25A4262FC(uint64_t a1, void *a2)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 40))();
  if (v3) {
    *a2 = v3;
  }
  return result;
}

uint64_t Inhabited.reversed()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v42 = a2;
  uint64_t v33 = *(void *)(a1 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](a1);
  uint64_t v34 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v3 + 16);
  uint64_t v5 = *(void *)(v3 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_25A50F1E0();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t HasHead = type metadata accessor for HasHead();
  uint64_t v38 = swift_getWitnessTable();
  uint64_t v39 = HasHead;
  uint64_t v9 = type metadata accessor for Predicated();
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v28 - v10;
  uint64_t v12 = sub_25A50FA40();
  uint64_t v30 = *(void *)(v12 - 8);
  uint64_t v31 = v12;
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v28 - v14;
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v13);
  uint64_t v19 = (char *)&v28 - v18;
  uint64_t v32 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v28 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = swift_getWitnessTable();
  uint64_t v35 = a1;
  uint64_t v29 = v22;
  PredicatedWrapper.value.getter(a1, v22, (uint64_t)v21);
  uint64_t v36 = v5;
  uint64_t v37 = v6;
  uint64_t v23 = sub_25A50F000();
  v44[0] = v23;
  swift_getWitnessTable();
  sub_25A50EA80();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v15, v31);
    uint64_t v25 = v35;
    (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v34, v41, v35);
    v44[0] = 0;
    v44[1] = 0xE000000000000000;
    sub_25A50FDB0();
    sub_25A50EDA0();
    PredicatedWrapper.value.getter(v25, v29, (uint64_t)v21);
    uint64_t v26 = v37;
    uint64_t v27 = sub_25A50EF00();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v21, v26);
    uint64_t v43 = v27;
    sub_25A5102B0();
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
    sub_25A50EDA0();
    uint64_t result = sub_25A510060();
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v19, v15, AssociatedTypeWitness);
    v44[0] = v23;
    static Predicated.unverified(value:proof:)((uint64_t)v44, (uint64_t)v19, (uint64_t)v11);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, AssociatedTypeWitness);
    swift_bridgeObjectRelease();
    return Inhabited.init(predicated:)((uint64_t)v11, v42);
  }
  return result;
}

uint64_t Inhabited.mapWithPrevious<A>(using:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v67 = a1;
  uint64_t v62 = a5;
  uint64_t v53 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v55 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_25A50F1E0();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v64 = v10;
  uint64_t v61 = WitnessTable;
  uint64_t HasHead = type metadata accessor for HasHead();
  uint64_t v13 = swift_getWitnessTable();
  uint64_t v60 = HasHead;
  uint64_t v59 = v13;
  uint64_t v14 = type metadata accessor for Predicated();
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  uint64_t v58 = (uint64_t)&v50 - v16;
  uint64_t v17 = *((void *)a4 - 1);
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v56 = (char *)&v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *(void *)(a3 + 16);
  uint64_t v69 = *(void *)(v20 - 8);
  uint64_t v21 = MEMORY[0x270FA5388](v18);
  uint64_t v52 = (uint64_t)&v50 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v50 - v23;
  uint64_t v68 = sub_25A50FA40();
  uint64_t v65 = *(void *)(v68 - 8);
  uint64_t v25 = MEMORY[0x270FA5388](v68);
  uint64_t v63 = (char *)&v50 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  uint64_t v28 = (char *)&v50 - v27;
  uint64_t v57 = v17;
  (*(void (**)(char *, uint64_t, uint64_t, char *))(v17 + 56))((char *)&v50 - v27, 1, 1, a4);
  uint64_t v29 = swift_getWitnessTable();
  uint64_t v54 = v5;
  PredicatedWrapper.value.getter(a3, v29, (uint64_t)v24);
  uint64_t v71 = v20;
  uint64_t v72 = a4;
  uint64_t v73 = *(void *)(a3 + 24);
  uint64_t v30 = v73;
  uint64_t v74 = v67;
  uint64_t v75 = a2;
  uint64_t v76 = v28;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A415838);
  uint64_t v32 = v20;
  uint64_t v67 = a4;
  uint64_t v33 = v66;
  uint64_t v34 = sub_25A4E8930((void (*)(char *, char *))sub_25A4271C8, (uint64_t)v70, v20, a4, v31, v30, MEMORY[0x263F8E4E0], (uint64_t)v77);
  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v69 + 8))(v24, v20);
    return (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v28, v68);
  }
  else
  {
    uint64_t v36 = v34;
    uint64_t v66 = v28;
    uint64_t v50 = v30;
    uint64_t v37 = v65;
    uint64_t v51 = a3;
    uint64_t v38 = v24;
    uint64_t v39 = v32;
    uint64_t v69 = *(void *)(v69 + 8);
    ((void (*)(char *, uint64_t))v69)(v38, v32);
    v77[0] = v36;
    swift_getWitnessTable();
    uint64_t v40 = v63;
    sub_25A50F670();
    uint64_t v41 = v57;
    uint64_t v42 = v40;
    uint64_t v43 = v67;
    if ((*(unsigned int (**)(char *, uint64_t, char *))(v57 + 48))(v42, 1, v67) == 1)
    {
      (*(void (**)(char *, uint64_t))(v37 + 8))(v63, v68);
      uint64_t v46 = v51;
      (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v55, v54, v51);
      v77[0] = 0;
      v77[1] = 0xE000000000000000;
      sub_25A50FDB0();
      sub_25A50EDA0();
      uint64_t v47 = v52;
      PredicatedWrapper.value.getter(v46, v29, v52);
      swift_getDynamicType();
      uint64_t v48 = (void (*)(uint64_t, uint64_t))v69;
      ((void (*)(uint64_t, uint64_t))v69)(v47, v39);
      sub_25A5105D0();
      sub_25A50EDA0();
      swift_bridgeObjectRelease();
      sub_25A50EDA0();
      PredicatedWrapper.value.getter(v46, v29, v47);
      uint64_t v49 = sub_25A50EF00();
      v48(v47, v39);
      v77[4] = v49;
      sub_25A5102B0();
      sub_25A50EDA0();
      swift_bridgeObjectRelease();
      sub_25A50EDA0();
      uint64_t result = sub_25A510060();
      __break(1u);
    }
    else
    {
      uint64_t v44 = (uint64_t)v56;
      (*(void (**)(char *, char *, char *))(v41 + 32))(v56, v63, v43);
      v77[0] = v36;
      uint64_t v45 = v58;
      static Predicated.unverified(value:proof:)((uint64_t)v77, v44, v58);
      (*(void (**)(uint64_t, char *))(v41 + 8))(v44, v43);
      swift_bridgeObjectRelease();
      Inhabited.init(predicated:)(v45, v62);
      return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v66, v68);
    }
  }
  return result;
}

uint64_t sub_25A426FE4@<X0>(uint64_t a1@<X0>, void (*a2)(char *, uint64_t)@<X1>, char *a3@<X3>, uint64_t a4@<X5>, void *a5@<X7>, uint64_t a6@<X8>)
{
  uint64_t v20 = a5;
  uint64_t v11 = sub_25A50FA40();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v19 - v13;
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))((char *)&v19 - v13, a3, v11);
  uint64_t v19 = a6;
  uint64_t v15 = v21;
  a2(v14, a1);
  if (v15)
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    *uint64_t v20 = v15;
  }
  else
  {
    uint64_t v17 = *(void (**)(char *, uint64_t))(v12 + 8);
    v17(v14, v11);
    v17(a3, v11);
    uint64_t v18 = *(void *)(a4 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(a3, v19, a4);
    return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(a3, 0, 1, a4);
  }
  return result;
}

uint64_t sub_25A4271C8@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_25A426FE4(a1, *(void (**)(char *, uint64_t))(v3 + 40), *(char **)(v3 + 56), *(void *)(v3 + 24), a2, a3);
}

uint64_t Inhabited.enumerated()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v39 = a2;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v30 = *(void *)(a1 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v5 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v37 = TupleTypeMetadata2;
  uint64_t v38 = v5;
  uint64_t v6 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v8 = (uint64_t *)((char *)&v28 - v7);
  uint64_t v34 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v33 = (uint64_t)&v28 - v9;
  uint64_t v10 = sub_25A5100D0();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t HasHead = type metadata accessor for HasHead();
  uint64_t v31 = swift_getWitnessTable();
  uint64_t v11 = type metadata accessor for Predicated();
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v29 = (uint64_t)&v28 - v13;
  uint64_t v14 = *(void *)(v3 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v20 = (char *)&v28 - v19;
  uint64_t v21 = swift_getWitnessTable();
  PredicatedWrapper.value.getter(a1, v21, (uint64_t)v17);
  MEMORY[0x26113CF40](v3, v30);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v3);
  uint64_t v22 = v33;
  Inhabited.first.getter(v33);
  uint64_t v23 = AssociatedTypeWitness;
  uint64_t v24 = v37;
  uint64_t v25 = (char *)v8 + *(int *)(v37 + 48);
  *uint64_t v8 = 0;
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 32))(v25, v22, v23);
  uint64_t v26 = v29;
  static Predicated.unverified(value:proof:)((uint64_t)v20, (uint64_t)v8, v29);
  (*(void (**)(void *, uint64_t))(v38 + 8))(v8, v24);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v10);
  return Inhabited.init(predicated:)(v26, v39);
}

uint64_t Inhabited.first.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for HasHead();
  swift_getWitnessTable();
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Predicated() + 36);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16);

  return v5(a1, v3, AssociatedTypeWitness);
}

uint64_t sub_25A4276C0(uint64_t a1)
{
  Inhabited.makeIterator()(a1);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8);

  return v3(v1, a1);
}

uint64_t Inhabited<>.startIndex.getter(uint64_t a1, uint64_t a2)
{
  return sub_25A427754(a1, a2, MEMORY[0x263F8D7B0]);
}

uint64_t Inhabited<>.endIndex.getter(uint64_t a1, uint64_t a2)
{
  return sub_25A427754(a1, a2, MEMORY[0x263F8D7E0]);
}

uint64_t sub_25A427754(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t WitnessTable = swift_getWitnessTable();
  PredicatedWrapper.value.getter(a1, WitnessTable, (uint64_t)v9);
  a3(v6, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t Inhabited<>.index(after:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25A4284EC(a1, a2, a3, MEMORY[0x263F8D7C8]);
}

uint64_t Inhabited<>.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t WitnessTable = swift_getWitnessTable();
  PredicatedWrapper.value.getter(a2, WitnessTable, (uint64_t)v8);
  uint64_t v10 = (void (*)(unsigned char *, void))sub_25A50F730();
  uint64_t v12 = v11;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a3, v12, AssociatedTypeWitness);
  v10(v15, 0);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t WitnessTable;
  uint64_t v11;

  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t WitnessTable = swift_getWitnessTable();
  PredicatedWrapper.value.getter(a2, WitnessTable, (uint64_t)v8);
  RandomAccessCollection.subscript.getter(a3);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned char *v8;
  uint64_t WitnessTable;
  void (*v10)(unsigned char *, void);
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  unsigned char v15[32];

  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t WitnessTable = swift_getWitnessTable();
  PredicatedWrapper.value.getter(a2, WitnessTable, (uint64_t)v8);
  uint64_t v10 = (void (*)(unsigned char *, void))sub_25A50F730();
  uint64_t v12 = v11;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a3, v12, AssociatedTypeWitness);
  v10(v15, 0);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t Inhabited<>.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25A4284EC(a1, a2, a3, MEMORY[0x263F8D850]);
}

uint64_t sub_25A427A28(uint64_t a1, uint64_t a2)
{
  return Inhabited<>.startIndex.getter(a1, *(void *)(a2 - 8));
}

uint64_t sub_25A427A30(uint64_t a1, uint64_t a2)
{
  return Inhabited<>.endIndex.getter(a1, *(void *)(a2 - 8));
}

void (*sub_25A427A38(uint64_t **a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)sub_25A427AB0(v6, a2, a3);
  return sub_25A3AC394;
}

void (*sub_25A427AB0(uint64_t *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *a1 = AssociatedTypeWitness;
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  a1[1] = v7;
  uint64_t v8 = malloc(*(void *)(v7 + 64));
  a1[2] = (uint64_t)v8;
  Inhabited<>.subscript.getter(a2, a3, (uint64_t)v8);
  return sub_25A3AC494;
}

uint64_t sub_25A427B8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Inhabited<>.subscript.getter(a1, a2, *(void *)(a3 - 8));
}

uint64_t sub_25A427B98@<X0>(uint64_t a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t v2 = sub_25A50FA40();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t sub_25A427C2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Inhabited<>.index(after:)(a1, a2, *(void *)(a3 - 8));
}

uint64_t sub_25A427C34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v11 - v8;
  Inhabited<>.index(after:)(a1, a2, v5);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v9, AssociatedTypeWitness);
}

uint64_t Inhabited.orderedKeyedMap<A, B>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v81 = a2;
  uint64_t v79 = a5;
  uint64_t v80 = a1;
  uint64_t v75 = a6;
  uint64_t v65 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v67 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = v10;
  uint64_t v11 = type metadata accessor for OrderedDictionary();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v78 = v11;
  uint64_t v74 = WitnessTable;
  uint64_t HasHead = type metadata accessor for HasHead();
  uint64_t v14 = swift_getWitnessTable();
  uint64_t v73 = HasHead;
  uint64_t v71 = v14;
  uint64_t v15 = type metadata accessor for Predicated();
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v72 = (uint64_t)&v57 - v16;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v64 = sub_25A50FA40();
  uint64_t v63 = *(void *)(v64 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v64);
  uint64_t v70 = (char *)&v57 - v19;
  uint64_t v77 = TupleTypeMetadata2;
  uint64_t v76 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v68 = (char *)&v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v69 = (char *)&v57 - v23;
  uint64_t v24 = *(void *)(a3 + 16);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = MEMORY[0x270FA5388](v22);
  uint64_t v28 = (char *)&v57 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v26);
  uint64_t v30 = (char *)&v57 - v29;
  uint64_t v31 = swift_getWitnessTable();
  uint64_t v66 = v6;
  PredicatedWrapper.value.getter(a3, v31, (uint64_t)v30);
  uint64_t v32 = *(void *)(a3 + 24);
  uint64_t v33 = v81;
  uint64_t v81 = a4;
  uint64_t v34 = v82;
  Sequence.orderedKeyedMap<A, B>(_:)(v80, v33, v24, a4, v83, v32, v79, &v84);
  uint64_t v35 = v24;
  uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
  uint64_t v36 = v25 + 8;
  uint64_t v37 = v38;
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v38)(v30, v35);
  if (!v34)
  {
    uint64_t v79 = 0;
    uint64_t v58 = v37;
    uint64_t v59 = v32;
    uint64_t v60 = v28;
    uint64_t v61 = v36;
    uint64_t v62 = v35;
    uint64_t v40 = v81;
    uint64_t v41 = v83;
    uint64_t v82 = *((void *)&v84 + 1);
    uint64_t v80 = v84;
    swift_getWitnessTable();
    uint64_t v42 = v70;
    sub_25A50F670();
    uint64_t v43 = v77;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v42, 1, v77) == 1)
    {
      (*(void (**)(char *, uint64_t))(v63 + 8))(v42, v64);
      (*(void (**)(char *, char *, uint64_t))(v65 + 16))(v67, v66, a3);
      *(void *)&long long v84 = 0;
      *((void *)&v84 + 1) = 0xE000000000000000;
      sub_25A50FDB0();
      sub_25A50EDA0();
      uint64_t v52 = (uint64_t)v60;
      uint64_t v53 = v31;
      PredicatedWrapper.value.getter(a3, v31, (uint64_t)v60);
      uint64_t v54 = v62;
      swift_getDynamicType();
      uint64_t v55 = v58;
      v58(v52, v54);
      sub_25A5105D0();
      sub_25A50EDA0();
      swift_bridgeObjectRelease();
      sub_25A50EDA0();
      PredicatedWrapper.value.getter(a3, v53, v52);
      uint64_t v56 = sub_25A50EF00();
      v55(v52, v54);
      uint64_t v85 = v56;
      sub_25A5102B0();
      sub_25A50EDA0();
      swift_bridgeObjectRelease();
      sub_25A50EDA0();
      uint64_t result = sub_25A510060();
      __break(1u);
    }
    else
    {
      uint64_t v44 = *(int *)(v43 + 48);
      uint64_t v45 = v69;
      uint64_t v46 = &v69[v44];
      uint64_t v66 = &v69[v44];
      uint64_t v67 = &v42[v44];
      uint64_t v47 = *(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 32);
      v47(v69, v42, v40);
      uint64_t v48 = *(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 32);
      v48(v46, v67, v41);
      *(void *)&long long v84 = v80;
      *((void *)&v84 + 1) = v82;
      uint64_t v49 = (uint64_t)v68;
      uint64_t v50 = &v68[*(int *)(v43 + 48)];
      v47(v68, v45, v40);
      v48(v50, v66, v41);
      uint64_t v51 = v72;
      static Predicated.unverified(value:proof:)((uint64_t)&v84, v49, v72);
      (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v49, v77);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return Inhabited.init(predicated:)(v51, v75);
    }
  }
  return result;
}

uint64_t Inhabited<>.index(before:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25A4284EC(a1, a2, a3, MEMORY[0x263F8D148]);
}

uint64_t sub_25A4284EC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t WitnessTable = swift_getWitnessTable();
  PredicatedWrapper.value.getter(a2, WitnessTable, (uint64_t)v11);
  a4(a1, v8, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_25A42860C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Inhabited<>.index(before:)(a1, a2, *(void *)(a3 - 8));
}

uint64_t sub_25A428614(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v11 - v8;
  Inhabited<>.index(before:)(a1, a2, v5);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v9, AssociatedTypeWitness);
}

uint64_t Inhabited<>.last.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v28 = a2;
  uint64_t v27 = *(void *)(a1 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v4 + 16);
  v24[1] = *(void *)(*(void *)(v7 + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = sub_25A50FA40();
  uint64_t v25 = *(void *)(v10 - 8);
  uint64_t v26 = v10;
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)v24 - v12;
  uint64_t v14 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v16 = (char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t WitnessTable = swift_getWitnessTable();
  PredicatedWrapper.value.getter(a1, WitnessTable, (uint64_t)v16);
  sub_25A50EA80();
  uint64_t v18 = v16;
  uint64_t v19 = v6;
  uint64_t v20 = v27;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v18, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v19, v2, a1);
  uint64_t v21 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v13, 1, AssociatedTypeWitness) == 1)
  {
    type metadata accessor for HasHead();
    swift_getWitnessTable();
    uint64_t v22 = type metadata accessor for Predicated();
    (*(void (**)(uint64_t, char *, uint64_t))(v21 + 16))(v28, &v19[*(int *)(v22 + 36)], AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v19, a1);
    return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v13, v26);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v19, a1);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v21 + 32))(v28, v13, AssociatedTypeWitness);
  }
}

uint64_t Inhabited<>.reversed()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v23 = a3;
  v18[1] = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v21 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v22 = AssociatedTypeWitness;
  uint64_t v5 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v20 = (uint64_t)v18 - v6;
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_25A5100F0();
  uint64_t v19 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v18 - v10;
  v18[2] = swift_getWitnessTable();
  type metadata accessor for HasHead();
  swift_getWitnessTable();
  uint64_t v12 = type metadata accessor for Predicated();
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)v18 - v13;
  uint64_t WitnessTable = swift_getWitnessTable();
  PredicatedWrapper.value.getter(a1, WitnessTable, (uint64_t)v8);
  sub_25A50EAC0();
  uint64_t v16 = v20;
  Inhabited<>.last.getter(a1, v20);
  static Predicated.unverified(value:proof:)((uint64_t)v11, v16, (uint64_t)v14);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v16, v22);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v9);
  return Inhabited.init(predicated:)((uint64_t)v14, v23);
}

uint64_t Inhabited<>.index(_:offsetBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t WitnessTable = swift_getWitnessTable();
  PredicatedWrapper.value.getter(a3, WitnessTable, (uint64_t)v7);
  sub_25A50F560();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t Inhabited<>.distance(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t WitnessTable = swift_getWitnessTable();
  PredicatedWrapper.value.getter(a3, WitnessTable, (uint64_t)v7);
  uint64_t v9 = sub_25A50F570();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v9;
}

uint64_t sub_25A4290F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Inhabited<>.index(_:offsetBy:)(a1, a2, a3);
}

uint64_t sub_25A429104(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Inhabited<>.distance(from:to:)(a1, a2, a3);
}

uint64_t Inhabited<>.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_25A42F434(a1, a2, a3, a4);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(a2, AssociatedTypeWitness);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);

  return v8(a1, v7);
}

{
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t vars8;

  sub_25A42F7E4(a1, a2, a3, a4);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v6 = sub_25A50F7F0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a2, v6);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v8(a1, AssociatedTypeWitness);
}

uint64_t sub_25A429394@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v20 = a3;
  uint64_t v22 = a1;
  uint64_t v23 = a5;
  uint64_t v6 = *(void *)(a4 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v20 - v9;
  uint64_t v11 = type metadata accessor for Inhabited();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v20 - v13;
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  uint64_t v21 = a2;
  v15((char *)&v20 - v13, a2, v11);
  Inhabited<>.startIndex.getter(v11, v6);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  swift_getAssociatedConformanceWitness();
  LOBYTE(v11) = sub_25A50EBE0();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
  if (v11)
  {
    uint64_t v16 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v23, v20, v16);
  }
  else
  {
    type metadata accessor for HasHead();
    swift_getWitnessTable();
    uint64_t v18 = v21 + *(int *)(type metadata accessor for Predicated() + 36);
    uint64_t v19 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v23, v18, v19);
  }
}

void (*Inhabited<>.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t v9 = malloc(0x50uLL);
  *a1 = v9;
  v9[1] = a4;
  v9[2] = v4;
  *uint64_t v9 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9[3] = AssociatedTypeWitness;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  v9[4] = v11;
  size_t v12 = *(void *)(v11 + 64);
  v9[5] = malloc(v12);
  uint64_t v13 = malloc(v12);
  v9[6] = v13;
  uint64_t v14 = swift_getAssociatedTypeWitness();
  v9[7] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = v15;
  v9[8] = v15;
  v9[9] = malloc(*(void *)(v15 + 64));
  (*(void (**)(void))(v16 + 16))();
  Inhabited<>.subscript.getter(a2, a3, (uint64_t)v13);
  return sub_25A429834;
}

{
  uint64_t v4;
  void *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v9 = malloc(0x50uLL);
  *a1 = v9;
  v9[1] = a4;
  v9[2] = v4;
  *uint64_t v9 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9[3] = AssociatedTypeWitness;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  v9[4] = v11;
  size_t v12 = *(void *)(v11 + 64);
  v9[5] = malloc(v12);
  v9[6] = malloc(v12);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v13 = sub_25A50F7F0();
  v9[7] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = v14;
  v9[8] = v14;
  v9[9] = malloc(*(void *)(v14 + 64));
  (*(void (**)(void))(v15 + 16))();
  Inhabited<>.subscript.getter(a2, a3);
  return sub_25A42A10C;
}

void sub_25A429834(uint64_t **a1, char a2)
{
}

uint64_t Inhabited<>.subscript.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t WitnessTable = swift_getWitnessTable();
  PredicatedWrapper.value.getter(a2, WitnessTable, (uint64_t)v6);
  sub_25A50F720();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_25A42995C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = *(void *)(a3 + a2 - 8);
  uint64_t v7 = type metadata accessor for Inhabited();
  return a4(a2, v7, v6);
}

uint64_t sub_25A4299CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = *(void *)(a4 + a3 - 8);
  uint64_t v9 = type metadata accessor for Inhabited();
  return a5(a1, a3, v9, v8);
}

uint64_t sub_25A429B60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v29 = a3;
  uint64_t v30 = a1;
  uint64_t v34 = a6;
  uint64_t v8 = *(void *)(a5 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  size_t v12 = (char *)&v27 - v11;
  uint64_t v32 = *(void *)(v8 + 8);
  uint64_t v13 = type metadata accessor for Inhabited();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v27 - v15;
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  uint64_t v31 = a2;
  uint64_t v28 = v17;
  v17(v16, a2, v13);
  Inhabited<>.startIndex.getter(v13, v8);
  uint64_t v27 = *(void (**)(char *, uint64_t))(v14 + 8);
  v27(v16, v13);
  uint64_t v33 = a4;
  swift_getAssociatedConformanceWitness();
  sub_25A50F7F0();
  LOBYTE(a4) = sub_25A50F7E0();
  uint64_t v18 = *(void (**)(char *, uint64_t))(v10 + 8);
  uint64_t v30 = v10 + 8;
  v18(v12, AssociatedTypeWitness);
  if (a4)
  {
    v28(v16, v31, v13);
    uint64_t v19 = (uint64_t (*)(char *, uint64_t))v18;
    Inhabited<>.startIndex.getter(v13, v8);
    v27(v16, v13);
    uint64_t v20 = (void (*)(unsigned char *, void))sub_25A50F730();
    uint64_t v22 = v21;
    uint64_t v23 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16))(v34, v22, v23);
    v20(v35, 0);
    return v19(v12, AssociatedTypeWitness);
  }
  else
  {
    type metadata accessor for HasHead();
    swift_getWitnessTable();
    uint64_t v25 = v31 + *(int *)(type metadata accessor for Predicated() + 36);
    uint64_t v26 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 16))(v34, v25, v26);
  }
}

void sub_25A42A10C(uint64_t **a1, char a2)
{
}

void sub_25A42A124(uint64_t **a1, char a2, void (*a3)(void *, void *, uint64_t, uint64_t))
{
  uint64_t v3 = *a1;
  uint64_t v5 = (*a1)[8];
  uint64_t v4 = (void *)(*a1)[9];
  uint64_t v6 = (void *)(*a1)[6];
  uint64_t v14 = (*a1)[7];
  uint64_t v8 = (*a1)[4];
  uint64_t v7 = (void *)(*a1)[5];
  uint64_t v9 = (*a1)[3];
  uint64_t v11 = **a1;
  uint64_t v10 = (*a1)[1];
  if (a2)
  {
    (*(void (**)(void *, void *, uint64_t))(v8 + 16))(v7, v6, v9);
    a3(v7, v4, v11, v10);
    (*(void (**)(void *, uint64_t))(v5 + 8))(v4, v14);
    size_t v12 = *(void (**)(void *, uint64_t))(v8 + 8);
    v12(v7, v9);
    v12(v6, v9);
  }
  else
  {
    a3(v6, v4, *v3, v3[1]);
    (*(void (**)(void *, uint64_t))(v5 + 8))(v4, v14);
    (*(void (**)(void *, uint64_t))(v8 + 8))(v6, v9);
  }
  free(v4);
  free(v6);
  free(v7);

  free(v3);
}

uint64_t Inhabited<>.withFirst(_:)(void (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = a1;
  uint64_t v17 = a4;
  v15[1] = a2;
  uint64_t v5 = *(void *)(a4 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v9 = (char *)v15 - v8;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)v15 - v12;
  Inhabited.first.getter((uint64_t)v15 - v12);
  v16(v13);
  Inhabited<>.startIndex.getter(a3, v5);
  sub_25A42F434((uint64_t)v13, (uint64_t)v9, a3, v17);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_25A42A474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_25A42F434(a1, a2, a3, *(void *)(a4 - 8));
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(a2, AssociatedTypeWitness);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);

  return v8(a1, v7);
}

void (*sub_25A42A56C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(void *)
{
  uint64_t v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[4] = Inhabited<>.subscript.modify(v8, a2, a3, *(void *)(a4 - 8));
  return sub_25A42A5E4;
}

uint64_t sub_25A42A5E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Inhabited<>.subscript.setter(a1, a2, a3, *(void *)(a4 - 8));
}

void (*sub_25A42A5F0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(void *)
{
  uint64_t v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[4] = Inhabited<>.subscript.modify(v8, a2, a3, *(void *)(a4 - 8));
  return sub_25A42A5E4;
}

uint64_t sub_25A42A668()
{
  return sub_25A50EB80();
}

uint64_t sub_25A42A684()
{
  return sub_25A50EB60();
}

uint64_t sub_25A42A6A8()
{
  return sub_25A50EB50();
}

uint64_t Inhabited<>.init(_:otherElements:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v19[0] = a2;
  uint64_t v20 = a5;
  v19[3] = *(void *)(*(void *)(a4 + 8) + 8);
  _OWORD v19[2] = type metadata accessor for HasHead();
  v19[1] = swift_getWitnessTable();
  uint64_t v7 = type metadata accessor for Predicated();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)v19 - v8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v12 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v14 = (char *)v19 - v13;
  uint64_t v15 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)v19 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25A50F7D0();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a1, AssociatedTypeWitness);
  sub_25A50F760();
  uint64_t v21 = v19[0];
  sub_25A50F1E0();
  swift_getWitnessTable();
  sub_25A50F750();
  static Predicated.unverified(value:proof:)((uint64_t)v17, a1, (uint64_t)v9);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, a3);
  return Inhabited.init(predicated:)((uint64_t)v9, v20);
}

uint64_t Inhabited<>.init<A>(_:otherElements:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v34 = a2;
  uint64_t v35 = a6;
  uint64_t v29 = a4;
  uint64_t v36 = a7;
  uint64_t v31 = *(void *)(*(void *)(a5 + 8) + 8);
  uint64_t HasHead = type metadata accessor for HasHead();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v10 = type metadata accessor for Predicated();
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v30 = (uint64_t)&v27 - v12;
  uint64_t v13 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v18 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v20 = (char *)&v27 - v19;
  uint64_t v28 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v27 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25A50F7D0();
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, a1, AssociatedTypeWitness);
  sub_25A50F760();
  uint64_t v23 = v34;
  uint64_t v24 = v29;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v34, v29);
  sub_25A50F750();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v23, v24);
  uint64_t v25 = v30;
  static Predicated.unverified(value:proof:)((uint64_t)v22, a1, v30);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v22, a3);
  return Inhabited.init(predicated:)(v25, v36);
}

uint64_t Inhabited<>.append(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v25 = a1;
  uint64_t v26 = a3;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t HasHead = type metadata accessor for HasHead();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v22 = type metadata accessor for Predicated();
  uint64_t v7 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v12 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v14 = (char *)&v21 - v13;
  uint64_t v15 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = swift_getWitnessTable();
  PredicatedWrapper.value.getter(a2, v18, (uint64_t)v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v25, AssociatedTypeWitness);
  sub_25A50F760();
  uint64_t v19 = v22;
  static Predicated.unverified(value:proof:)((uint64_t)v17, v4 + *(int *)(v22 + 36), (uint64_t)v9);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 40))(v4, v9, v19);
}

uint64_t Inhabited<>.appending(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a4, v4, a2);
  return Inhabited<>.append(_:)(a1, a2, a3);
}

uint64_t Inhabited<>.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v26 = a4;
  uint64_t v27 = a5;
  v24[0] = a3;
  uint64_t v25 = a1;
  uint64_t v9 = *(void *)(a2 + 16);
  void v24[2] = type metadata accessor for HasHead();
  v24[1] = swift_getWitnessTable();
  uint64_t v10 = type metadata accessor for Predicated();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)v24 - v13;
  uint64_t v15 = *(void *)(a3 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v12);
  uint64_t v18 = (char *)v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v21 = (char *)v24 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t WitnessTable = swift_getWitnessTable();
  PredicatedWrapper.value.getter(a2, WitnessTable, (uint64_t)v21);
  (*(void (**)(char *, uint64_t, void))(v15 + 16))(v18, v25, v24[0]);
  sub_25A50F750();
  static Predicated.unverified(value:proof:)((uint64_t)v21, v6 + *(int *)(v10 + 36), (uint64_t)v14);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v9);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 40))(v6, v14, v10);
}

uint64_t Inhabited<>.appending<A>(contentsOf:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a6, v6, a2);
  return Inhabited<>.append<A>(contentsOf:)(a1, a2, a3, a4, a5);
}

uint64_t Inhabited<>.insert(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v30 = a1;
  uint64_t v34 = a2;
  uint64_t v35 = a4;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v32 = *(void *)(a4 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v39 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v31 = (char *)&v27 - v6;
  uint64_t HasHead = type metadata accessor for HasHead();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v40 = type metadata accessor for Predicated();
  uint64_t v38 = *(void *)(v40 - 8);
  MEMORY[0x270FA5388](v40);
  uint64_t v33 = (uint64_t)&v27 - v7;
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v27 = v8;
  uint64_t v28 = v9;
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v27 - v11;
  uint64_t v13 = *(void *)(v5 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v10);
  uint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v27 - v17;
  uint64_t v19 = swift_getWitnessTable();
  PredicatedWrapper.value.getter(a3, v19, (uint64_t)v18);
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v20(v12, v30, v8);
  sub_25A50F780();
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v18, v5);
  uint64_t v21 = v31;
  sub_25A50F5E0();
  uint64_t v22 = (void (*)(char *, void))sub_25A50F730();
  uint64_t v23 = v27;
  ((void (*)(char *))v20)(v12);
  v22(v42, 0);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v21, AssociatedTypeWitness);
  uint64_t v24 = *(void (**)(char *, uint64_t))(v13 + 8);
  v24(v18, v5);
  uint64_t v25 = v33;
  static Predicated.unverified(value:proof:)((uint64_t)v16, (uint64_t)v12, v33);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v12, v23);
  v24(v16, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 40))(v29, v25, v40);
}

uint64_t Inhabited<>.inserting(_:at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(a5, v5);
  return Inhabited<>.insert(_:at:)(a1, a2, a3, a4);
}

uint64_t Inhabited<>.insert<A>(contentsOf:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v43 = a6;
  uint64_t v41 = a5;
  uint64_t v38 = a2;
  uint64_t v36 = a1;
  v35[1] = *(void *)(a5 + 8);
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v45 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v46 = AssociatedTypeWitness;
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v42 = (char *)v35 - v12;
  uint64_t v44 = swift_getAssociatedTypeWitness();
  uint64_t v39 = *(void *)(v44 - 8);
  MEMORY[0x270FA5388](v44);
  uint64_t v14 = (char *)v35 - v13;
  v35[3] = type metadata accessor for HasHead();
  v35[2] = swift_getWitnessTable();
  uint64_t v40 = type metadata accessor for Predicated();
  uint64_t v37 = *(void *)(v40 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v40);
  v35[0] = (uint64_t)v35 - v16;
  uint64_t v17 = *(void *)(a4 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v20 = (char *)v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = MEMORY[0x270FA5388](v18);
  uint64_t v24 = (char *)v35 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v26 = (char *)v35 - v25;
  uint64_t WitnessTable = swift_getWitnessTable();
  PredicatedWrapper.value.getter(a3, WitnessTable, (uint64_t)v26);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, v36, a4);
  sub_25A50F770();
  (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v24, v26, v10);
  sub_25A50F5E0();
  uint64_t v28 = (void (*)(char *, void))sub_25A50F730();
  uint64_t v30 = v45;
  uint64_t v29 = v46;
  uint64_t v31 = (uint64_t)v42;
  (*(void (**)(char *))(v45 + 16))(v42);
  v28(v47, 0);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v14, v44);
  uint64_t v32 = *(void (**)(char *, uint64_t))(v21 + 8);
  v32(v26, v10);
  uint64_t v33 = v35[0];
  static Predicated.unverified(value:proof:)((uint64_t)v24, v31, v35[0]);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v31, v29);
  v32(v24, v10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 40))(v7, v33, v40);
}

uint64_t Inhabited<>.inserting<A>(contentsOf:at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(a7, v7);
  return Inhabited<>.insert<A>(contentsOf:at:)(a1, a2, a3, a4, a5, a6);
}

uint64_t Inhabited.init<A>(_:otherElements:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v19 = a2;
  uint64_t v21 = a4;
  sub_25A50F530();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for HasHead();
  uint64_t v18 = swift_getWitnessTable();
  uint64_t v6 = type metadata accessor for Predicated();
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  uint64_t v9 = (char *)&v18 - v8;
  uint64_t v10 = *(void *)(a3 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v7);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v18 - v14;
  uint64_t v23 = sub_25A50E880();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a1, a3);
  sub_25A50F4C0();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v10 + 8);
  v16(v15, a3);
  uint64_t v22 = v19;
  sub_25A50F1E0();
  swift_getWitnessTable();
  sub_25A50F510();
  uint64_t v22 = v23;
  static Predicated.unverified(value:proof:)((uint64_t)&v22, a1, (uint64_t)v9);
  v16((char *)a1, a3);
  swift_bridgeObjectRelease();
  return Inhabited.init(predicated:)((uint64_t)v9, v21);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t WitnessTable;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  uint64_t v18 = a2;
  uint64_t v20 = a4;
  uint64_t v6 = type metadata accessor for IdentifiedSet();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for HasHead();
  swift_getWitnessTable();
  uint64_t v7 = type metadata accessor for Predicated();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = sub_25A50FA40();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v17 - v12;
  IdentifiedSet.init()(&v22);
  IdentifiedSet.insert(_:)(a1, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  uint64_t v21 = v18;
  uint64_t v14 = sub_25A50F1E0();
  uint64_t v15 = swift_getWitnessTable();
  IdentifiedSet.merge<A>(_:)((uint64_t)&v21, v6, v14, v15);
  swift_bridgeObjectRelease();
  uint64_t v21 = v22;
  static Predicated.unverified(value:proof:)((uint64_t)&v21, a1, (uint64_t)v9);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
  swift_bridgeObjectRelease();
  return Inhabited.init(predicated:)((uint64_t)v9, v20);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t WitnessTable;
  uint64_t v19;
  long long v20;
  long long v21;

  uint64_t v17 = a2;
  uint64_t v19 = a4;
  uint64_t v6 = type metadata accessor for OrderedIdentifiedSet();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for HasHead();
  swift_getWitnessTable();
  uint64_t v7 = type metadata accessor for Predicated();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v16 - v8;
  uint64_t v10 = sub_25A50FA40();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v16 - v12;
  OrderedIdentifiedSet.init()(a3, &v21);
  OrderedIdentifiedSet.insert(_:)(a1, (uint64_t)v13);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  *(void *)&uint64_t v20 = v17;
  uint64_t v14 = sub_25A50F1E0();
  swift_getWitnessTable();
  OrderedIdentifiedSet.append<A>(contentsOf:)((uint64_t)&v20, v6, v14);
  swift_bridgeObjectRelease();
  uint64_t v20 = v21;
  static Predicated.unverified(value:proof:)((uint64_t)&v20, a1, (uint64_t)v9);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return Inhabited.init(predicated:)((uint64_t)v9, v19);
}

uint64_t Inhabited.insert<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(void *)(a2 + 16);
  swift_getWitnessTable();
  v23[3] = type metadata accessor for HasHead();
  void v23[2] = swift_getWitnessTable();
  uint64_t v5 = type metadata accessor for Predicated();
  uint64_t v24 = *(void *)(v5 - 8);
  uint64_t v25 = v5;
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v23 - v7;
  uint64_t v9 = *(void *)(v4 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v6);
  uint64_t v13 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)v23 - v14;
  uint64_t WitnessTable = swift_getWitnessTable();
  PredicatedWrapper.value.getter(v2, WitnessTable, (uint64_t)&v27);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a1, v9);
  sub_25A50F4C0();
  uint64_t v17 = *(void (**)(char *, uint64_t))(v10 + 8);
  v17(v15, v9);
  uint64_t v26 = v27;
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_25A50F460();
  uint64_t v20 = v19;
  LOBYTE(v2) = v21 & 1;
  sub_25A50F550();
  sub_25A3ACF28(v18, v20, v2);
  swift_bridgeObjectRelease();
  static Predicated.unverified(value:proof:)((uint64_t)&v26, (uint64_t)v15, (uint64_t)v8);
  v17(v15, v9);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void, char *, uint64_t))(v24 + 40))(v23[1], v8, v25);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void v20[3];
  uint64_t v21;
  uint64_t WitnessTable;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  uint64_t v2 = a2;
  char v21 = a1;
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v24 = *(void *)(*(void *)(v3 + 16) - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v5 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getWitnessTable();
  type metadata accessor for HasHead();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v23 = type metadata accessor for Predicated();
  uint64_t v6 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v8 = (char *)v20 - v7;
  uint64_t v9 = sub_25A50FA40();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)v20 - v11;
  uint64_t v13 = swift_getWitnessTable();
  PredicatedWrapper.value.getter(v2, v13, (uint64_t)&v27);
  IdentifiedSet.insert(_:)(v21, v3);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  uint64_t v14 = v27;
  uint64_t v25 = v27;
  uint64_t v26 = v27;
  swift_bridgeObjectRetain();
  uint64_t v15 = IdentifiedSet.startIndex.getter(v3);
  uint64_t v17 = v16;
  LOBYTE(v2) = v18 & 1;
  uint64_t v25 = v14;
  IdentifiedSet.subscript.getter();
  sub_25A3ACF28(v15, v17, v2);
  swift_bridgeObjectRelease();
  static Predicated.unverified(value:proof:)((uint64_t)&v26, (uint64_t)v5, (uint64_t)v8);
  (*(void (**)(char *, void))(v24 + 8))(v5, v20[2]);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void, char *, uint64_t))(v6 + 40))(v20[1], v8, v23);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t WitnessTable;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void v24[2];
  uint64_t v25;
  uint64_t v26;

  uint64_t v3 = v2;
  uint64_t v19 = a1;
  uint64_t v17 = *(void *)(*(void *)(a2 + 16) + 16);
  char v21 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getWitnessTable();
  type metadata accessor for HasHead();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v20 = type metadata accessor for Predicated();
  uint64_t v7 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v9 = (char *)&v16 - v8;
  uint64_t v10 = sub_25A50FA40();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v16 - v12;
  uint64_t v14 = swift_getWitnessTable();
  PredicatedWrapper.value.getter(a2, v14, (uint64_t)&v25);
  OrderedIdentifiedSet.insert(_:)(v19, (uint64_t)v13);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v24[0] = v25;
  v24[1] = v26;
  uint64_t v22 = v25;
  uint64_t v23 = v26;
  OrderedIdentifiedSet.subscript.getter(0, (uint64_t)v6);
  static Predicated.unverified(value:proof:)((uint64_t)v24, (uint64_t)v6, (uint64_t)v9);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v6, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 40))(v3, v9, v20);
}

uint64_t Inhabited.formUnion<A, B>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  void v24[2] = a4;
  v24[0] = a1;
  uint64_t v8 = *(void *)(*(void *)(a2 + 16) + 16);
  uint64_t v27 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getWitnessTable();
  type metadata accessor for HasHead();
  v24[1] = swift_getWitnessTable();
  uint64_t v11 = type metadata accessor for Predicated();
  uint64_t v25 = *(void *)(v11 - 8);
  uint64_t v26 = v11;
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)v24 - v13;
  uint64_t v15 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t WitnessTable = swift_getWitnessTable();
  PredicatedWrapper.value.getter(a2, WitnessTable, (uint64_t)&v29);
  (*(void (**)(char *, void, uint64_t))(v15 + 16))(v17, v24[0], a3);
  sub_25A50F510();
  uint64_t v28 = v29;
  swift_bridgeObjectRetain();
  uint64_t v19 = sub_25A50F460();
  uint64_t v21 = v20;
  LOBYTE(v15) = v22 & 1;
  sub_25A50F550();
  sub_25A3ACF28(v19, v21, v15);
  swift_bridgeObjectRelease();
  static Predicated.unverified(value:proof:)((uint64_t)&v28, (uint64_t)v10, (uint64_t)v14);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v8);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v25 + 40))(v5, v14, v26);
}

uint64_t Inhabited.contains<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  PredicatedWrapper.value.getter(a2, WitnessTable, (uint64_t)&v6);
  LOBYTE(a2) = IdentifiedSet.contains(_:)(a1, *(void *)(a2 + 16));
  swift_bridgeObjectRelease();
  return a2 & 1;
}

void Inhabited.contains<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  PredicatedWrapper.value.getter(a2, WitnessTable, (uint64_t)&v4);
  OrderedIdentifiedSet.contains(_:)();
}

uint64_t sub_25A42CEE0(char a1)
{
  return a1 & 1;
}

uint64_t Inhabited.appending<A, B>(contentsOf:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v16 = a1;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v19 = *(void *)(v6 + 16);
  uint64_t v20 = a5;
  uint64_t v7 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getWitnessTable();
  type metadata accessor for HasHead();
  swift_getWitnessTable();
  uint64_t v10 = type metadata accessor for Predicated();
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v15 - v11;
  uint64_t WitnessTable = swift_getWitnessTable();
  PredicatedWrapper.value.getter(a2, WitnessTable, (uint64_t)&v23);
  uint64_t v21 = v23;
  uint64_t v22 = v24;
  OrderedIdentifiedSet.appending<A>(_:)(v16, v6, v17, v18, v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v23 = v25[0];
  uint64_t v24 = v25[1];
  OrderedIdentifiedSet.subscript.getter(0, (uint64_t)v9);
  static Predicated.unverified(value:proof:)((uint64_t)v25, (uint64_t)v9, (uint64_t)v12);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return Inhabited.init(predicated:)((uint64_t)v12, v20);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t WitnessTable;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void v25[2];

  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v16 = a1;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v19 = *(void *)(v6 + 16);
  uint64_t v20 = a5;
  uint64_t v7 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getWitnessTable();
  type metadata accessor for HasHead();
  swift_getWitnessTable();
  uint64_t v10 = type metadata accessor for Predicated();
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v15 - v11;
  uint64_t WitnessTable = swift_getWitnessTable();
  PredicatedWrapper.value.getter(a2, WitnessTable, (uint64_t)&v23);
  uint64_t v21 = v23;
  uint64_t v22 = v24;
  OrderedSet.appending<A>(contentsOf:)(v16, v6, v17, v18, v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v23 = v25[0];
  uint64_t v24 = v25[1];
  OrderedSet.subscript.getter();
  static Predicated.unverified(value:proof:)((uint64_t)v25, (uint64_t)v9, (uint64_t)v12);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return Inhabited.init(predicated:)((uint64_t)v12, v20);
}

uint64_t Inhabited.append<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v16 = a1;
  uint64_t v17 = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getWitnessTable();
  type metadata accessor for HasHead();
  swift_getWitnessTable();
  uint64_t v10 = type metadata accessor for Predicated();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v16 - v12;
  uint64_t WitnessTable = swift_getWitnessTable();
  PredicatedWrapper.value.getter(a2, WitnessTable, (uint64_t)&v21);
  OrderedSet.append(_:)(v16, v5);
  v20[0] = v21;
  v20[1] = v22;
  uint64_t v18 = v21;
  uint64_t v19 = v22;
  OrderedSet.subscript.getter();
  static Predicated.unverified(value:proof:)((uint64_t)v20, (uint64_t)v9, (uint64_t)v13);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 40))(v3, v13, v10);
}

uint64_t Inhabited.append<A, B>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v17 = a1;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v20 = *(void *)(v7 + 16);
  uint64_t v8 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getWitnessTable();
  type metadata accessor for HasHead();
  swift_getWitnessTable();
  uint64_t v11 = type metadata accessor for Predicated();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v17 - v13;
  uint64_t WitnessTable = swift_getWitnessTable();
  PredicatedWrapper.value.getter(a2, WitnessTable, (uint64_t)&v24);
  OrderedSet.append<A>(contentsOf:)(v17, v7, v18);
  v23[0] = v24;
  v23[1] = v25;
  uint64_t v21 = v24;
  uint64_t v22 = v25;
  OrderedSet.subscript.getter();
  static Predicated.unverified(value:proof:)((uint64_t)v23, (uint64_t)v10, (uint64_t)v14);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 40))(v5, v14, v11);
}

uint64_t Inhabited.appending<A, B>(contentsOf:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v28 = a1;
  uint64_t v35 = a3;
  uint64_t v4 = *(void **)(a2 + 16);
  uint64_t v5 = v4[3];
  uint64_t v29 = v4[2];
  uint64_t v6 = v29;
  uint64_t v7 = v5;
  uint64_t v32 = v5;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v33 = TupleTypeMetadata2;
  uint64_t v34 = v9;
  uint64_t v10 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v12 = (char *)&v25 - v11;
  uint64_t v31 = *(void *)(v7 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  uint64_t v27 = (uint64_t)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for HasHead();
  uint64_t v25 = swift_getWitnessTable();
  uint64_t v17 = type metadata accessor for Predicated();
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v19 = (char *)&v25 - v18;
  uint64_t v20 = swift_getWitnessTable();
  PredicatedWrapper.value.getter(a2, v20, (uint64_t)&v40);
  uint64_t v38 = v40;
  uint64_t v39 = v41;
  PredicatedWrapper.value.getter(a2, v20, (uint64_t)&v37);
  long long v36 = v37;
  OrderedDictionary.appending(contentsOf:)(&v36, v4, v42);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v40 = v42[0];
  uint64_t v41 = v42[1];
  uint64_t v21 = v27;
  OrderedDictionary.subscript.getter((uint64_t)v16, v27, 0, v4);
  uint64_t v22 = v33;
  uint64_t v23 = &v12[*(int *)(v33 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v12, v16, v29);
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 32))(v23, v21, v32);
  static Predicated.unverified(value:proof:)((uint64_t)v42, (uint64_t)v12, (uint64_t)v19);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v12, v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return Inhabited.init(predicated:)((uint64_t)v19, v35);
}

uint64_t Inhabited<>.uniqued()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _OWORD v22[2] = a2;
  uint64_t v3 = a1;
  uint64_t v24 = a3;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v23 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v7 = (char *)v22 - v6;
  v22[4] = sub_25A50F530();
  v22[3] = swift_getWitnessTable();
  type metadata accessor for HasHead();
  v22[1] = swift_getWitnessTable();
  uint64_t v8 = type metadata accessor for Predicated();
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v11 = (char *)v22 - v10;
  uint64_t v12 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t WitnessTable = swift_getWitnessTable();
  PredicatedWrapper.value.getter(v3, WitnessTable, (uint64_t)v14);
  uint64_t v16 = Collection<>.uniqued()(v4);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v4);
  uint64_t v25 = v16;
  uint64_t v17 = sub_25A50F460();
  uint64_t v19 = v18;
  LOBYTE(v3) = v20 & 1;
  sub_25A50F550();
  sub_25A3ACF28(v17, v19, v3);
  static Predicated.unverified(value:proof:)((uint64_t)&v25, (uint64_t)v7, (uint64_t)v11);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v7, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  return Inhabited.init(predicated:)((uint64_t)v11, v24);
}

uint64_t Inhabited<>.orderedUniqued()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v20[0] = a3;
  v20[1] = a2;
  uint64_t v23 = a4;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v21 = AssociatedTypeWitness;
  uint64_t v22 = v7;
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v9 = (char *)v20 - v8;
  type metadata accessor for OrderedSet();
  void v20[2] = swift_getWitnessTable();
  type metadata accessor for HasHead();
  swift_getWitnessTable();
  uint64_t v10 = type metadata accessor for Predicated();
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v13 = (char *)v20 - v12;
  uint64_t v14 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v16 = (char *)v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t WitnessTable = swift_getWitnessTable();
  PredicatedWrapper.value.getter(a1, WitnessTable, (uint64_t)v16);
  double v18 = Collection<>.orderedUniqued()(v5, v20[0], &v25);
  (*(void (**)(char *, uint64_t, double))(v14 + 8))(v16, v5, v18);
  long long v24 = v25;
  OrderedSet.subscript.getter();
  static Predicated.unverified(value:proof:)((uint64_t)&v25, (uint64_t)v9, (uint64_t)v13);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v9, v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return Inhabited.init(predicated:)((uint64_t)v13, v23);
}

uint64_t Inhabited<>.identified()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v31 = a4;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v26 = a3;
  uint64_t v27 = v5;
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v29 = AssociatedTypeWitness;
  uint64_t v30 = v8;
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v26 - v9;
  uint64_t v11 = type metadata accessor for IdentifiedSet();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for HasHead();
  swift_getWitnessTable();
  uint64_t v12 = type metadata accessor for Predicated();
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v15 = (char *)&v26 - v14;
  uint64_t v16 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v13);
  double v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = swift_getWitnessTable();
  PredicatedWrapper.value.getter(a1, v19, (uint64_t)v18);
  Sequence<>.identified()(v6, v27, v26, &v33);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v6);
  uint64_t v20 = v33;
  uint64_t v32 = v33;
  uint64_t v21 = IdentifiedSet.startIndex.getter(v11);
  uint64_t v23 = v22;
  LOBYTE(v16) = v24 & 1;
  uint64_t v32 = v20;
  swift_bridgeObjectRetain();
  IdentifiedSet.subscript.getter();
  sub_25A3ACF28(v21, v23, v16);
  swift_bridgeObjectRelease();
  static Predicated.unverified(value:proof:)((uint64_t)&v33, (uint64_t)v10, (uint64_t)v15);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v29);
  swift_bridgeObjectRelease();
  return Inhabited.init(predicated:)((uint64_t)v15, v31);
}

uint64_t Inhabited<>.orderedIdentified()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v24 = a4;
  uint64_t v5 = *(void *)(a2 + 8);
  v21[0] = a3;
  v21[1] = v5;
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v22 = AssociatedTypeWitness;
  uint64_t v23 = v8;
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v10 = (char *)v21 - v9;
  type metadata accessor for OrderedIdentifiedSet();
  v21[2] = swift_getWitnessTable();
  type metadata accessor for HasHead();
  swift_getWitnessTable();
  uint64_t v11 = type metadata accessor for Predicated();
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v14 = (char *)v21 - v13;
  uint64_t v15 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t WitnessTable = swift_getWitnessTable();
  PredicatedWrapper.value.getter(a1, WitnessTable, (uint64_t)v17);
  double v19 = Sequence<>.orderedIdentified()(v6, &v26);
  (*(void (**)(char *, uint64_t, double))(v15 + 8))(v17, v6, v19);
  long long v25 = v26;
  OrderedIdentifiedSet.subscript.getter(0, (uint64_t)v10);
  static Predicated.unverified(value:proof:)((uint64_t)&v26, (uint64_t)v10, (uint64_t)v14);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return Inhabited.init(predicated:)((uint64_t)v14, v24);
}

uint64_t Inhabited.invert<A, B>()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v65 = a2;
  uint64_t v69 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v69 + 16);
  uint64_t v5 = *(void *)(v4 + 16);
  uint64_t v6 = sub_25A50F1E0();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v83 = v6;
  uint64_t HasHead = type metadata accessor for HasHead();
  uint64_t v63 = swift_getWitnessTable();
  uint64_t v7 = type metadata accessor for Predicated();
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v62 = (uint64_t)&v60 - v9;
  uint64_t v67 = *(void *)(a1 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v68 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = v5;
  uint64_t v64 = *(void *)(v5 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v79 = (char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v60 - v15;
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  double v19 = (char *)&v60 - v18;
  uint64_t v20 = *(void *)(v4 - 8);
  uint64_t v21 = MEMORY[0x270FA5388](v17);
  uint64_t v23 = (char *)&v60 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x270FA5388](v21);
  long long v26 = (char *)&v60 - v25;
  MEMORY[0x270FA5388](v24);
  uint64_t v28 = (char *)&v60 - v27;
  uint64_t v77 = a1;
  Inhabited.first.getter((uint64_t)&v60 - v27);
  uint64_t v30 = (char *)(v20 + 16);
  uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
  v29(v26, v28, v4);
  uint64_t v66 = v4;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v31 = v66;
    (*(void (**)(char *, uint64_t))(v20 + 8))(v28, v66);
    (*(void (**)(uint64_t, char *, void))(*(void *)(*(void *)(v31 + 24) - 8) + 32))(v65, v26, *(void *)(v31 + 24));
    type metadata accessor for Inhabited();
    sub_25A510540();
    return swift_storeEnumTagMultiPayload();
  }
  uint64_t v74 = v16;
  uint64_t v75 = (void (*)(char *, uint64_t, uint64_t))v29;
  uint64_t v76 = v23;
  uint64_t v60 = v28;
  uint64_t v78 = v20;
  uint64_t v32 = v64;
  uint64_t v33 = v81;
  uint64_t v72 = *(void (**)(char *, char *, uint64_t))(v64 + 32);
  uint64_t v73 = v64 + 32;
  v72(v19, v26, v81);
  sub_25A42F3C4(v33, v33);
  swift_allocObject();
  uint64_t v34 = sub_25A50F0C0();
  uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v32 + 16);
  uint64_t v61 = v19;
  uint64_t v70 = v35;
  uint64_t v71 = v32 + 16;
  v35(v36, v19, v33);
  sub_25A3DFCA4();
  uint64_t v37 = v34;
  uint64_t v87 = v34;
  (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v68, v2, v77);
  uint64_t v85 = 1;
  uint64_t v84 = swift_getWitnessTable();
  swift_getWitnessTable();
  sub_25A50F6B0();
  uint64_t v38 = v86[0];
  uint64_t v39 = v86[1];
  uint64_t v40 = v86[2];
  unint64_t v41 = v86[3];
  swift_unknownObjectRetain();
  uint64_t v42 = v66;
  uint64_t v43 = sub_25A50FC20();
  swift_unknownObjectRelease();
  uint64_t v77 = v39;
  if (v43 == sub_25A50FC40())
  {
    swift_unknownObjectRelease();
    uint64_t v44 = v65;
LABEL_11:
    (*(void (**)(char *, uint64_t))(v78 + 8))(v60, v42);
    v86[0] = v37;
    uint64_t v58 = v62;
    uint64_t v59 = (uint64_t)v61;
    static Predicated.unverified(value:proof:)((uint64_t)v86, (uint64_t)v61, v62);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v59, v33);
    Inhabited.init(predicated:)(v58, v44);
    type metadata accessor for Inhabited();
    sub_25A510540();
    return swift_storeEnumTagMultiPayload();
  }
  uint64_t v68 = v30;
  uint64_t v69 = v41 >> 1;
  uint64_t v67 = v32 + 8;
  uint64_t v45 = v43;
  uint64_t v46 = v38;
  uint64_t v47 = v77;
  while (1)
  {
    uint64_t result = sub_25A50FC30();
    if (v43 < v40 || v69 <= v45) {
      break;
    }
    uint64_t v49 = v43;
    unint64_t v50 = v41;
    uint64_t v51 = v78;
    uint64_t v52 = v76;
    v75(v76, v47 + *(void *)(v78 + 72) * v45, v42);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))v67)(v61, v81);
      (*(void (**)(char *, uint64_t))(v51 + 8))(v60, v42);
      (*(void (**)(uint64_t, char *, void))(*(void *)(*(void *)(v42 + 24) - 8) + 32))(v65, v52, *(void *)(v42 + 24));
      type metadata accessor for Inhabited();
      sub_25A510540();
      return swift_storeEnumTagMultiPayload();
    }
    ++v45;
    uint64_t v53 = v46;
    uint64_t v54 = v42;
    uint64_t v55 = v74;
    uint64_t v56 = v81;
    v72(v74, v52, v81);
    v70(v79, v55, v56);
    sub_25A50F180();
    uint64_t v57 = v55;
    uint64_t v42 = v54;
    uint64_t v46 = v53;
    uint64_t v47 = v77;
    (*(void (**)(char *, uint64_t))v67)(v57, v56);
    unint64_t v41 = v50;
    uint64_t v43 = v49;
    if (v45 == sub_25A50FC40())
    {
      swift_unknownObjectRelease();
      uint64_t v37 = v87;
      uint64_t v44 = v65;
      uint64_t v33 = v81;
      goto LABEL_11;
    }
  }
  __break(1u);
  return result;
}

uint64_t Sequence.inhabited()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Inhabited();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, a1);
  uint64_t WitnessTable = swift_getWitnessTable();
  return PredicatedWrapper.init(_:)((uint64_t)v7, v8, WitnessTable, a2);
}

uint64_t sub_25A42F3C4(uint64_t a1, uint64_t a2)
{
  if (swift_isClassType()) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    return __swift_instantiateConcreteTypeFromMangledName(&qword_26A416B00);
  }
  else
  {
    return sub_25A5102C0();
  }
}

uint64_t sub_25A42F434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v30 = a1;
  uint64_t v33 = a4;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t HasHead = type metadata accessor for HasHead();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = type metadata accessor for Predicated();
  uint64_t v34 = *(void *)(v7 - 8);
  uint64_t v35 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v28 = (uint64_t)&v26 - v8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v11 = (char *)&v26 - v10;
  uint64_t v12 = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v26 - v15;
  uint64_t v26 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = swift_getWitnessTable();
  uint64_t v20 = v29;
  PredicatedWrapper.value.getter(a3, v19, (uint64_t)v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, a2, v12);
  uint64_t v21 = v30;
  uint64_t v22 = AssociatedTypeWitness;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v30, AssociatedTypeWitness);
  uint64_t v23 = v33;
  sub_25A50EBB0();
  sub_25A429394(a2, v20, v21, v23, (uint64_t)v11);
  uint64_t v24 = v28;
  static Predicated.unverified(value:proof:)((uint64_t)v18, (uint64_t)v11, v28);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v22);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v18, v6);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 40))(v20, v24, v35);
}

uint64_t sub_25A42F7E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v36 = a1;
  uint64_t v39 = a4;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t HasHead = type metadata accessor for HasHead();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = type metadata accessor for Predicated();
  uint64_t v40 = *(void *)(v7 - 8);
  uint64_t v41 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v34 = (uint64_t)&v28 - v8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v32 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v33 = AssociatedTypeWitness;
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v31 = (uint64_t)&v28 - v10;
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v29 = *(void *)(v11 - 8);
  uint64_t v30 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v28 - v12;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v14 = sub_25A50F7F0();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v28 - v17;
  uint64_t v19 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v21 = (char *)&v28 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = swift_getWitnessTable();
  uint64_t v23 = v35;
  PredicatedWrapper.value.getter(a3, v22, (uint64_t)v21);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a2, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v13, v36, v30);
  uint64_t v24 = v39;
  sub_25A50EBA0();
  uint64_t v25 = v31;
  sub_25A429B60(a2, v23, (uint64_t)v21, v6, v24, v31);
  uint64_t v26 = v34;
  static Predicated.unverified(value:proof:)((uint64_t)v21, v25, v34);
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v25, v33);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v6);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 40))(v23, v26, v41);
}

uint64_t sub_25A42FC40()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A42FC5C()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A42FCA4()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_25A42FCC0()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A42FCDC()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_25A42FD00()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_25A42FD24()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A42FD6C()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A42FDB4()
{
  return sub_25A42FE78();
}

uint64_t sub_25A42FDE0()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_25A42FE04()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A42FE4C()
{
  return sub_25A42FE78();
}

uint64_t sub_25A42FE78()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A42FECC()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_25A42FEF0()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_25A42FF14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25A42995C(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))Inhabited<>.subscript.getter);
}

uint64_t sub_25A42FF40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_25A4299CC(a1, a2, a3, a4, sub_25A42F434);
}

uint64_t sub_25A42FF6C()
{
  return 16;
}

__n128 sub_25A42FF78(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_25A42FF84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25A42995C(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))Inhabited<>.subscript.getter);
}

uint64_t sub_25A42FFB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_25A4299CC(a1, a2, a3, a4, sub_25A42F7E4);
}

uint64_t sub_25A42FFDC()
{
  return 16;
}

__n128 sub_25A42FFE8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_25A42FFF4()
{
  type metadata accessor for HasHead();
  swift_getWitnessTable();
  uint64_t result = type metadata accessor for Predicated();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_25A4300B4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (*(unsigned char *)(v6 + 80) | *(unsigned char *)(v9 + 80));
  if (v12 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || (v11 & (unint64_t)~v10) + *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) > 0x18)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v12 + 16) & ~v12));
    swift_retain();
  }
  else
  {
    uint64_t v16 = AssociatedTypeWitness;
    uint64_t v17 = ~v10;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)a1 + v11) & v17, ((unint64_t)a2 + v11) & v17, v16);
  }
  return a1;
}

uint64_t sub_25A430234(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(uint64_t, void))v3)(a1, *(void *)(a2 + 16));
  uint64_t v4 = *(void *)(v3 + 56) + a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(uint64_t (**)(unint64_t, uint64_t))(v6 + 8);
  uint64_t v8 = AssociatedTypeWitness;
  unint64_t v9 = (v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);

  return v7(v9, v8);
}

uint64_t sub_25A430300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, void))v5)(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t sub_25A4303D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, void))v5)(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t sub_25A4304A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, void))v5)(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t sub_25A43057C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, void))v5)(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t sub_25A430650(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= v7) {
    unsigned int v11 = v7;
  }
  else {
    unsigned int v11 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  if (!a2) {
    return 0;
  }
  uint64_t v13 = *(void *)(v6 + 64) + v12;
  if (a2 <= v11) {
    goto LABEL_24;
  }
  uint64_t v14 = (v13 & ~v12) + *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  char v15 = 8 * v14;
  if (v14 <= 3)
  {
    unsigned int v17 = ((a2 - v11 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v17))
    {
      int v16 = *(_DWORD *)((char *)a1 + v14);
      if (!v16) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v17 > 0xFF)
    {
      int v16 = *(unsigned __int16 *)((char *)a1 + v14);
      if (!*(unsigned __int16 *)((char *)a1 + v14)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v17 < 2)
    {
LABEL_24:
      if (v11)
      {
        if (v7 >= v10)
        {
          uint64_t v23 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48);
          return v23(a1, v7, v5);
        }
        else
        {
          uint64_t v21 = *(uint64_t (**)(unint64_t))(v9 + 48);
          return v21(((unint64_t)a1 + v13) & ~v12);
        }
      }
      return 0;
    }
  }
  int v16 = *((unsigned __int8 *)a1 + v14);
  if (!*((unsigned char *)a1 + v14)) {
    goto LABEL_24;
  }
LABEL_14:
  int v18 = (v16 - 1) << v15;
  if (v14 > 3) {
    int v18 = 0;
  }
  if (v14)
  {
    if (v14 <= 3) {
      int v19 = v14;
    }
    else {
      int v19 = 4;
    }
    switch(v19)
    {
      case 2:
        int v20 = *a1;
        break;
      case 3:
        int v20 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v20 = *(_DWORD *)a1;
        break;
      default:
        int v20 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v20 = 0;
  }
  return v11 + (v20 | v18) + 1;
}

void sub_25A4308E4(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v24 = v8;
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  uint64_t v10 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v11 = v10;
  unsigned int v12 = *(_DWORD *)(v10 + 84);
  if (v12 <= v9) {
    unsigned int v13 = v9;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v10 + 84);
  }
  uint64_t v14 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v15 = *(void *)(v8 + 64) + v14;
  size_t v16 = (v15 & ~v14) + *(void *)(v10 + 64);
  if (a3 <= v13)
  {
    int v17 = 0;
  }
  else if (v16 <= 3)
  {
    unsigned int v20 = ((a3 - v13 + ~(-1 << (8 * v16))) >> (8 * v16)) + 1;
    if (HIWORD(v20))
    {
      int v17 = 4;
    }
    else if (v20 >= 0x100)
    {
      int v17 = 2;
    }
    else
    {
      int v17 = v20 > 1;
    }
  }
  else
  {
    int v17 = 1;
  }
  if (v13 < a2)
  {
    unsigned int v18 = ~v13 + a2;
    if (v16 < 4)
    {
      int v19 = (v18 >> (8 * v16)) + 1;
      if (v16)
      {
        int v21 = v18 & ~(-1 << (8 * v16));
        bzero(a1, v16);
        if (v16 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v16 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v16);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v16] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v16] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v16] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x25A430BF8);
    case 4:
      *(_DWORD *)&a1[v16] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v9 >= v12)
        {
          uint64_t v23 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v24 + 56);
          v23(a1, a2, v9, v7);
        }
        else
        {
          uint64_t v22 = *(void (**)(unint64_t, uint64_t))(v11 + 56);
          v22((unint64_t)&a1[v15] & ~v14, a2);
        }
      }
      return;
  }
}

uint64_t sub_25A430C24@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v51 = a3;
  uint64_t v7 = sub_25A50E320();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v39 = (char *)v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A417E60);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v40 = (char *)v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A417B00);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (void *)((char *)v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_25A410F20(a2, (uint64_t)v14);
  uint64_t v15 = *v14;
  swift_bridgeObjectRetain();
  sub_25A384BCC((uint64_t)v14, &qword_26A417B00);
  uint64_t v49 = *(void *)(v15 + 16);
  uint64_t v37 = a4;
  v36[1] = v15;
  if (v49)
  {
    uint64_t v16 = 0;
    unsigned int v18 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    uint64_t v17 = v8 + 16;
    uint64_t v47 = v15 + ((*(unsigned __int8 *)(v17 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 64));
    uint64_t v48 = v18;
    uint64_t v19 = *(void *)(v17 + 56);
    unint64_t v50 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 40);
    uint64_t v45 = (unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 32);
    uint64_t v46 = v19;
    uint64_t v38 = (void (**)(char *, char *, uint64_t))(v17 + 8);
    uint64_t v43 = (void (**)(char *, uint64_t))(v17 - 8);
    uint64_t v44 = (void (**)(char *, char *, uint64_t))(v17 + 16);
    int v21 = v39;
    unsigned int v20 = v40;
    uint64_t v42 = v17;
    v18(v40, v47, v7);
    while (1)
    {
      uint64_t v22 = *v50;
      (*v50)(v20, 0, 1, v7);
      if ((*v45)(v20, 1, v7) == 1) {
        break;
      }
      uint64_t v23 = a1;
      uint64_t v41 = v22;
      (*v44)(v21, v20, v7);
      sub_25A50E300();
      uint64_t v24 = (void *)sub_25A50EBF0();
      swift_bridgeObjectRelease();
      id v25 = objc_msgSend(v24, sel_pathComponents);

      uint64_t v26 = sub_25A50F090();
      uint64_t v27 = *(void *)(v26 + 16);
      uint64_t v28 = sub_25A50F470();
      uint64_t v53 = v28;
      if (v27)
      {
        uint64_t v29 = (uint64_t *)(v26 + 40);
        do
        {
          uint64_t v30 = *(v29 - 1);
          uint64_t v31 = *v29;
          swift_bridgeObjectRetain();
          sub_25A432394(&v52, v30, v31);
          swift_bridgeObjectRelease();
          v29 += 2;
          --v27;
        }
        while (v27);
        swift_bridgeObjectRelease();
        uint64_t v32 = v53;
        a1 = v23;
        int v21 = v39;
        unsigned int v20 = v40;
      }
      else
      {
        uint64_t v32 = v28;
        swift_bridgeObjectRelease();
      }
      uint64_t v33 = *(void *)(sub_25A432E24(v51, v32) + 16);
      swift_release();
      if (*a1 < v33)
      {
        *a1 = v33;
        uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A418928);
        (*v38)((char *)a1 + *(int *)(v34 + 48), v21, v7);
      }
      ++v16;
      (*v43)(v21, v7);
      if (v16 == v49)
      {
        v41(v20, 1, 1, v7);
        break;
      }
      v48(v20, v47 + v46 * v16, v7);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v40, 1, 1, v7);
  }
  swift_bridgeObjectRelease();
  sub_25A39F4F8((uint64_t)a1, v37, &qword_26A418928);
  return swift_bridgeObjectRelease();
}

uint64_t BuiltProductPathResolver.providers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_25A43107C()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4159A8);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(v0 + 120))
  {
    uint64_t v4 = *(void *)(v0 + 120);
  }
  else
  {
    uint64_t v5 = sub_25A50F2A0();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v3, 1, 1, v5);
    unint64_t v6 = sub_25A433784();
    uint64_t v7 = (void *)swift_allocObject();
    _OWORD v7[2] = v0;
    void v7[3] = v6;
    v7[4] = v0;
    swift_retain_n();
    uint64_t v4 = sub_25A38ED3C((uint64_t)v3, (uint64_t)&unk_26A418950, (uint64_t)v7);
    *(void *)(v0 + 120) = v4;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v4;
}

uint64_t sub_25A4311B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 56) = a1;
  *(void *)(v4 + 64) = a4;
  return MEMORY[0x270FA2498](sub_25A4311D0, a4, 0);
}

uint64_t sub_25A4311D0()
{
  uint64_t v1 = *(void *)(v0[8] + 112);
  v0[9] = v1;
  uint64_t v2 = *(void *)(v1 + 16);
  v0[10] = v2;
  if (v2)
  {
    uint64_t v3 = MEMORY[0x263F8EE78];
    v0[11] = 0;
    v0[12] = v3;
    uint64_t v4 = v1 + 32;
    swift_bridgeObjectRetain();
    sub_25A3990F8(v4, (uint64_t)(v0 + 2));
    uint64_t v5 = v0[5];
    uint64_t v6 = v0[6];
    __swift_project_boxed_opaque_existential_1(v0 + 2, v5);
    uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v6 + 8) + **(int **)(v6 + 8));
    uint64_t v7 = (void *)swift_task_alloc();
    v0[13] = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_25A431374;
    return v14(v5, v6);
  }
  else
  {
    uint64_t v9 = (uint64_t *)v0[7];
    uint64_t v10 = sub_25A4338C8(MEMORY[0x263F8EE78]);
    uint64_t v12 = v11;
    swift_bridgeObjectRelease();
    *uint64_t v9 = v10;
    v9[1] = v12;
    uint64_t v13 = (uint64_t (*)(void))v0[1];
    return v13();
  }
}

uint64_t sub_25A431374(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 64);
  *(void *)(*(void *)v1 + 112) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](sub_25A43148C, v2, 0);
}

uint64_t sub_25A43148C()
{
  uint64_t v1 = v0[14];
  uint64_t v2 = *(void *)(v1 + 16);
  int64_t v3 = *(void *)(v0[12] + 16);
  int64_t v4 = v3 + v2;
  if (__OFADD__(v3, v2))
  {
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v6 = v0[12];
  if (isUniquelyReferenced_nonNull_native && v4 <= *(void *)(v6 + 24) >> 1)
  {
    if (*(void *)(v1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v3 <= v4) {
    int64_t v21 = v3 + v2;
  }
  else {
    int64_t v21 = v3;
  }
  uint64_t v6 = sub_25A38B420(isUniquelyReferenced_nonNull_native, v21, 1, v0[12]);
  if (!*(void *)(v1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_27;
  }
LABEL_5:
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = (*(void *)(v6 + 24) >> 1) - v7;
  uint64_t v9 = *(void *)(sub_25A50E320() - 8);
  uint64_t v10 = *(void *)(v9 + 72);
  if (v8 < v2)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  unint64_t v11 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v12 = v6 + v11 + v10 * v7;
  unint64_t v13 = v0[14] + v11;
  uint64_t v14 = v10 * v2;
  unint64_t v15 = v12 + v14;
  unint64_t v16 = v13 + v14;
  if (v13 < v15 && v12 < v16) {
    return sub_25A510140();
  }
  swift_arrayInitWithCopy();
  if (v2)
  {
    uint64_t v18 = *(void *)(v6 + 16);
    BOOL v19 = __OFADD__(v18, v2);
    uint64_t v20 = v18 + v2;
    if (!v19)
    {
      *(void *)(v6 + 16) = v20;
      goto LABEL_19;
    }
LABEL_29:
    __break(1u);
    return sub_25A510140();
  }
LABEL_19:
  uint64_t v23 = v0[10];
  uint64_t v22 = v0[11];
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  if (v22 + 1 == v23)
  {
    swift_bridgeObjectRelease();
    uint64_t v24 = (uint64_t *)v0[7];
    uint64_t v25 = sub_25A4338C8(v6);
    uint64_t v27 = v26;
    swift_bridgeObjectRelease();
    *uint64_t v24 = v25;
    v24[1] = v27;
    uint64_t v28 = (uint64_t (*)(void))v0[1];
    return v28();
  }
  else
  {
    uint64_t v30 = v0[11] + 1;
    v0[11] = v30;
    v0[12] = v6;
    sub_25A3990F8(v0[9] + 40 * v30 + 32, (uint64_t)(v0 + 2));
    uint64_t v31 = v0[5];
    uint64_t v32 = v0[6];
    __swift_project_boxed_opaque_existential_1(v0 + 2, v31);
    uint64_t v34 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v32 + 8) + **(int **)(v32 + 8));
    uint64_t v33 = (void *)swift_task_alloc();
    v0[13] = v33;
    *uint64_t v33 = v0;
    v33[1] = sub_25A431374;
    return v34(v31, v32);
  }
}

uint64_t BuiltProductPathResolver.__allocating_init(providers:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v2 + 112) = a1;
  *(void *)(v2 + 120) = 0;
  return v2;
}

uint64_t BuiltProductPathResolver.init(providers:)(uint64_t a1)
{
  swift_defaultActor_initialize();
  *(void *)(v1 + 112) = a1;
  *(void *)(v1 + 120) = 0;
  return v1;
}

uint64_t sub_25A431828(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  return MEMORY[0x270FA2498](sub_25A43184C, v2, 0);
}

uint64_t sub_25A43184C()
{
  uint64_t v1 = sub_25A43107C();
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v2;
  void *v2 = v0;
  v2[1] = sub_25A431904;
  return MEMORY[0x270FA1FD0](v0 + 16, v1, &type metadata for BuiltProductPathResolver.Cache);
}

uint64_t sub_25A431904()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x270FA2498](sub_25A431A30, v1, 0);
}

uint64_t sub_25A431A30()
{
  uint64_t v1 = sub_25A431AC4(v0[4], v0[5], v0[2], v0[3]);
  uint64_t v3 = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v4(v1, v3);
}

uint64_t sub_25A431AC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v55 = a4;
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A418928);
  uint64_t v7 = MEMORY[0x270FA5388](v53);
  uint64_t v52 = (void *)((char *)v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v7);
  uint64_t v51 = (uint64_t)v49 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A418930);
  MEMORY[0x270FA5388](v10 - 8);
  unint64_t v12 = (char *)v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A417B00);
  uint64_t v13 = *(void *)(v54 - 8);
  MEMORY[0x270FA5388](v54);
  uint64_t v50 = (uint64_t)v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A417E60);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_25A50E320();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  v49[0] = (char *)v49 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)v49 - v22;
  v49[1] = a1;
  v49[2] = a2;
  uint64_t v24 = (void *)sub_25A50EBF0();
  id v25 = objc_msgSend(v24, sel_lastPathComponent);

  uint64_t v26 = sub_25A50EC20();
  uint64_t v28 = v27;

  if (*(void *)(a3 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v29 = sub_25A409670(v26, v28);
    if (v30)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v19 + 16))(v17, *(void *)(a3 + 56) + *(void *)(v19 + 72) * v29, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v17, 0, 1, v18);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v17, 1, 1, v18);
    }
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) != 1)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v23, v17, v18);
      uint64_t v36 = sub_25A50E300();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v23, v18);
      return v36;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v17, 1, 1, v18);
  }
  sub_25A384BCC((uint64_t)v17, &qword_26A417E60);
  uint64_t v31 = v55;
  if (*(void *)(v55 + 16))
  {
    unint64_t v32 = sub_25A409670(v26, v28);
    uint64_t v33 = v54;
    if (v34)
    {
      sub_25A410F20(*(void *)(v31 + 56) + *(void *)(v13 + 72) * v32, (uint64_t)v12);
      uint64_t v35 = 0;
    }
    else
    {
      uint64_t v35 = 1;
    }
  }
  else
  {
    uint64_t v35 = 1;
    uint64_t v33 = v54;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v12, v35, 1, v33);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v33) == 1)
  {
    sub_25A384BCC((uint64_t)v12, &qword_26A418930);
    return 0;
  }
  else
  {
    uint64_t v37 = v50;
    sub_25A39F4F8((uint64_t)v12, v50, &qword_26A417B00);
    uint64_t v38 = (void *)sub_25A50EBF0();
    id v39 = objc_msgSend(v38, sel_pathComponents);

    uint64_t v40 = sub_25A50F090();
    uint64_t v41 = sub_25A39C558(v40);
    swift_bridgeObjectRelease();
    uint64_t v42 = v37 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26A418938) + 36);
    uint64_t v44 = v52;
    uint64_t v43 = v53;
    uint64_t v45 = (char *)v52 + *(int *)(v53 + 48);
    *uint64_t v52 = 0;
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v45, v42, v18);
    uint64_t v46 = v51;
    sub_25A430C24(v44, v37, v41, v51);
    uint64_t v47 = v49[0];
    (*(void (**)(void, uint64_t, uint64_t))(v19 + 32))(v49[0], v46 + *(int *)(v43 + 48), v18);
    uint64_t v36 = sub_25A50E300();
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v47, v18);
    sub_25A384BCC(v37, &qword_26A417B00);
  }
  return v36;
}

uint64_t BuiltProductPathResolver.deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t BuiltProductPathResolver.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_defaultActor_destroy();

  return MEMORY[0x270FA2418](v0);
}

uint64_t BuiltProductPathResolver.unownedExecutor.getter()
{
  return v0;
}

uint64_t sub_25A432118()
{
  return v0;
}

uint64_t type metadata accessor for BuiltProductPathResolver()
{
  return self;
}

uint64_t method lookup function for BuiltProductPathResolver(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for BuiltProductPathResolver);
}

uint64_t dispatch thunk of BuiltProductPathResolver.__allocating_init(providers:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of BuiltProductPathResolver.resolve(path:)(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v2 + 136) + **(int **)(*(void *)v2 + 136));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_25A432280;
  return v8(a1, a2);
}

uint64_t sub_25A432280(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *v2;
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
  return v5(a1, a2);
}

ValueMetadata *type metadata accessor for BuiltProductPathResolver.Cache()
{
  return &type metadata for BuiltProductPathResolver.Cache;
}

uint64_t sub_25A432394(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  sub_25A5104E0();
  swift_bridgeObjectRetain();
  sub_25A50ED30();
  uint64_t v8 = sub_25A510530();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    unint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_25A510370() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = (uint64_t *)(*(void *)(*v3 + 48) + 16 * v10);
      uint64_t v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_25A510370() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  uint64_t *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_25A432824(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  uint64_t *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_25A432544()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417E78);
  uint64_t v3 = sub_25A50FD50();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    char v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      BOOL v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      sub_25A5104E0();
      sub_25A50ED30();
      uint64_t result = sub_25A510530();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      BOOL v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *BOOL v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_25A432824(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_25A432544();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (uint64_t)sub_25A4329C0();
      goto LABEL_22;
    }
    sub_25A432B74();
  }
  uint64_t v11 = *v4;
  sub_25A5104E0();
  sub_25A50ED30();
  uint64_t result = sub_25A510530();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    unint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = sub_25A510370(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = sub_25A510420();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        int64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = sub_25A510370();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (uint64_t *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

void *sub_25A4329C0()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417E78);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_25A50FD40();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    BOOL v19 = (void *)(*(void *)(v4 + 48) + v16);
    *BOOL v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_25A432B74()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417E78);
  uint64_t v3 = sub_25A50FD50();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    BOOL v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    sub_25A5104E0();
    swift_bridgeObjectRetain();
    sub_25A50ED30();
    uint64_t result = sub_25A510530();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    int64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *int64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_25A432E24(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3 = isStackAllocationSafe;
  v10[1] = *MEMORY[0x263EF8340];
  char v4 = *(unsigned char *)(a2 + 32);
  unint64_t v5 = (unint64_t)((1 << v4) + 63) >> 6;
  size_t v6 = 8 * v5;
  if ((v4 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    bzero((char *)v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v6);
    uint64_t v7 = sub_25A432FAC((uint64_t)v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v5, a2, v3);
    swift_release();
  }
  else
  {
    unint64_t v8 = (void *)swift_slowAlloc();
    bzero(v8, v6);
    uint64_t v7 = sub_25A432FAC((uint64_t)v8, v5, a2, v3);
    swift_release();
    MEMORY[0x26113F070](v8, -1, -1);
  }
  return v7;
}

uint64_t sub_25A432FAC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  uint64_t v57 = (unint64_t *)result;
  if (*(void *)(a4 + 16) < *(void *)(a3 + 16))
  {
    int64_t v6 = 0;
    uint64_t v58 = a4 + 56;
    uint64_t v7 = 1 << *(unsigned char *)(a4 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(a4 + 56);
    int64_t v59 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v61 = 0;
    uint64_t v10 = a3 + 56;
    while (1)
    {
      while (1)
      {
        if (v9)
        {
          unint64_t v11 = __clz(__rbit64(v9));
          v9 &= v9 - 1;
          int64_t v62 = v6;
          unint64_t v12 = v11 | (v6 << 6);
        }
        else
        {
          int64_t v13 = v6 + 1;
          if (__OFADD__(v6, 1))
          {
            __break(1u);
            goto LABEL_81;
          }
          if (v13 >= v59) {
            goto LABEL_79;
          }
          unint64_t v14 = *(void *)(v58 + 8 * v13);
          int64_t v15 = v6 + 1;
          if (!v14)
          {
            int64_t v15 = v6 + 2;
            if (v6 + 2 >= v59) {
              goto LABEL_79;
            }
            unint64_t v14 = *(void *)(v58 + 8 * v15);
            if (!v14)
            {
              int64_t v15 = v6 + 3;
              if (v6 + 3 >= v59) {
                goto LABEL_79;
              }
              unint64_t v14 = *(void *)(v58 + 8 * v15);
              if (!v14)
              {
                uint64_t v16 = v6 + 4;
                if (v6 + 4 >= v59) {
                  goto LABEL_79;
                }
                unint64_t v14 = *(void *)(v58 + 8 * v16);
                if (!v14)
                {
                  while (1)
                  {
                    int64_t v15 = v16 + 1;
                    if (__OFADD__(v16, 1)) {
                      goto LABEL_83;
                    }
                    if (v15 >= v59) {
                      goto LABEL_79;
                    }
                    unint64_t v14 = *(void *)(v58 + 8 * v15);
                    ++v16;
                    if (v14) {
                      goto LABEL_22;
                    }
                  }
                }
                int64_t v15 = v6 + 4;
              }
            }
          }
LABEL_22:
          unint64_t v9 = (v14 - 1) & v14;
          int64_t v62 = v15;
          unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
        }
        unint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v12);
        uint64_t v19 = *v17;
        uint64_t v18 = v17[1];
        sub_25A5104E0();
        swift_bridgeObjectRetain();
        sub_25A50ED30();
        uint64_t v20 = sub_25A510530();
        uint64_t v21 = -1 << *(unsigned char *)(v5 + 32);
        unint64_t v22 = v20 & ~v21;
        unint64_t v23 = v22 >> 6;
        uint64_t v24 = 1 << v22;
        if (((1 << v22) & *(void *)(v10 + 8 * (v22 >> 6))) != 0) {
          break;
        }
LABEL_6:
        uint64_t result = swift_bridgeObjectRelease();
        int64_t v6 = v62;
        uint64_t v5 = a3;
        uint64_t v4 = a4;
      }
      uint64_t v25 = *(void *)(a3 + 48);
      unint64_t v26 = (void *)(v25 + 16 * v22);
      BOOL v27 = *v26 == v19 && v26[1] == v18;
      if (!v27 && (sub_25A510370() & 1) == 0)
      {
        uint64_t v28 = ~v21;
        for (unint64_t i = v22 + 1; ; unint64_t i = v30 + 1)
        {
          unint64_t v30 = i & v28;
          if (((*(void *)(v10 + (((i & v28) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v28)) & 1) == 0) {
            break;
          }
          uint64_t v31 = (void *)(v25 + 16 * v30);
          BOOL v32 = *v31 == v19 && v31[1] == v18;
          if (v32 || (sub_25A510370() & 1) != 0)
          {
            uint64_t result = swift_bridgeObjectRelease();
            unint64_t v23 = v30 >> 6;
            uint64_t v24 = 1 << v30;
            goto LABEL_38;
          }
        }
        goto LABEL_6;
      }
      uint64_t result = swift_bridgeObjectRelease();
LABEL_38:
      int64_t v6 = v62;
      uint64_t v5 = a3;
      v57[v23] |= v24;
      BOOL v33 = __OFADD__(v61++, 1);
      uint64_t v4 = a4;
      if (v33) {
        goto LABEL_82;
      }
    }
  }
  int64_t v34 = 0;
  uint64_t v60 = a3 + 56;
  uint64_t v61 = 0;
  uint64_t v35 = 1 << *(unsigned char *)(a3 + 32);
  if (v35 < 64) {
    uint64_t v36 = ~(-1 << v35);
  }
  else {
    uint64_t v36 = -1;
  }
  unint64_t v37 = v36 & *(void *)(a3 + 56);
  int64_t v63 = (unint64_t)(v35 + 63) >> 6;
  uint64_t v38 = a4 + 56;
  while (1)
  {
    if (v37)
    {
      unint64_t v39 = __clz(__rbit64(v37));
      v37 &= v37 - 1;
      unint64_t v40 = v39 | (v34 << 6);
      goto LABEL_63;
    }
    int64_t v41 = v34 + 1;
    if (__OFADD__(v34, 1))
    {
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
      goto LABEL_84;
    }
    if (v41 >= v63) {
      goto LABEL_79;
    }
    unint64_t v42 = *(void *)(v60 + 8 * v41);
    ++v34;
    if (!v42)
    {
      int64_t v34 = v41 + 1;
      if (v41 + 1 >= v63) {
        goto LABEL_79;
      }
      unint64_t v42 = *(void *)(v60 + 8 * v34);
      if (!v42)
      {
        int64_t v34 = v41 + 2;
        if (v41 + 2 >= v63) {
          goto LABEL_79;
        }
        unint64_t v42 = *(void *)(v60 + 8 * v34);
        if (!v42) {
          break;
        }
      }
    }
LABEL_62:
    unint64_t v37 = (v42 - 1) & v42;
    unint64_t v40 = __clz(__rbit64(v42)) + (v34 << 6);
LABEL_63:
    uint64_t v44 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v40);
    uint64_t v46 = *v44;
    uint64_t v45 = v44[1];
    sub_25A5104E0();
    swift_bridgeObjectRetain();
    sub_25A50ED30();
    uint64_t v47 = sub_25A510530();
    uint64_t v48 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v49 = v47 & ~v48;
    if (((*(void *)(v38 + ((v49 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v49) & 1) == 0) {
      goto LABEL_46;
    }
    uint64_t v50 = *(void *)(a4 + 48);
    uint64_t v51 = (void *)(v50 + 16 * v49);
    BOOL v52 = *v51 == v46 && v51[1] == v45;
    if (v52 || (sub_25A510370() & 1) != 0)
    {
LABEL_76:
      uint64_t result = swift_bridgeObjectRelease();
      *(unint64_t *)((char *)v57 + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v40;
      BOOL v33 = __OFADD__(v61++, 1);
      uint64_t v5 = a3;
      uint64_t v4 = a4;
      if (v33)
      {
        __break(1u);
LABEL_79:
        swift_retain();
        return sub_25A4334EC(v57, a2, v61, v5);
      }
    }
    else
    {
      uint64_t v53 = ~v48;
      while (1)
      {
        unint64_t v49 = (v49 + 1) & v53;
        if (((*(void *)(v38 + ((v49 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v49) & 1) == 0) {
          break;
        }
        uint64_t v54 = (void *)(v50 + 16 * v49);
        BOOL v55 = *v54 == v46 && v54[1] == v45;
        if (v55 || (sub_25A510370() & 1) != 0) {
          goto LABEL_76;
        }
      }
LABEL_46:
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v5 = a3;
      uint64_t v4 = a4;
    }
  }
  int64_t v43 = v41 + 3;
  if (v43 >= v63) {
    goto LABEL_79;
  }
  unint64_t v42 = *(void *)(v60 + 8 * v43);
  if (v42)
  {
    int64_t v34 = v43;
    goto LABEL_62;
  }
  while (1)
  {
    int64_t v34 = v43 + 1;
    if (__OFADD__(v43, 1)) {
      break;
    }
    if (v34 >= v63) {
      goto LABEL_79;
    }
    unint64_t v42 = *(void *)(v60 + 8 * v34);
    ++v43;
    if (v42) {
      goto LABEL_62;
    }
  }
LABEL_84:
  __break(1u);
  return result;
}

uint64_t sub_25A4334EC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = MEMORY[0x263F8EE88];
LABEL_36:
    swift_release();
    return v8;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417E78);
  uint64_t result = sub_25A50FD60();
  uint64_t v8 = result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_39;
    }
    if (v14 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v30) {
        goto LABEL_36;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v30) {
          goto LABEL_36;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    unint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    sub_25A5104E0();
    swift_bridgeObjectRetain();
    sub_25A50ED30();
    uint64_t result = sub_25A510530();
    uint64_t v20 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t v28 = (void *)(*(void *)(v8 + 48) + 16 * v23);
    *uint64_t v28 = v18;
    v28[1] = v19;
    ++*(void *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5) {
      goto LABEL_36;
    }
  }
  uint64_t v16 = v14 + 3;
  if (v16 >= v30) {
    goto LABEL_36;
  }
  unint64_t v15 = a1[v16];
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

unint64_t sub_25A433784()
{
  unint64_t result = qword_26A418948;
  if (!qword_26A418948)
  {
    type metadata accessor for BuiltProductPathResolver();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A418948);
  }
  return result;
}

uint64_t sub_25A4337D8()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_25A433818(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_25A38F608;
  v5[7] = a1;
  v5[8] = v4;
  return MEMORY[0x270FA2498](sub_25A4311D0, v4, 0);
}

uint64_t sub_25A4338C8(uint64_t a1)
{
  uint64_t v196 = *MEMORY[0x263EF8340];
  uint64_t v168 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A418938);
  MEMORY[0x270FA5388](v168);
  v167 = (unint64_t *)((char *)&v153 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A418930);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v153 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v180 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A417B00);
  uint64_t v6 = *(void *)(v180 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v180);
  uint64_t v159 = (uint64_t)&v153 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v158 = (uint64_t)&v153 - v10;
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v171 = (uint64_t)&v153 - v12;
  MEMORY[0x270FA5388](v11);
  v176 = (unint64_t *)((char *)&v153 - v13);
  uint64_t v14 = sub_25A50E320();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  v165 = (char *)&v153 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  v164 = (char *)&v153 - v19;
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  v166 = (char *)&v153 - v21;
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  v172 = (char *)&v153 - v23;
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  v163 = (char *)&v153 - v25;
  MEMORY[0x270FA5388](v24);
  v194 = (char *)&v153 - v26;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A417E60);
  uint64_t v28 = MEMORY[0x270FA5388](v27 - 8);
  uint64_t v29 = MEMORY[0x270FA5388](v28);
  v160 = (char *)&v153 - v30;
  uint64_t v31 = MEMORY[0x270FA5388](v29);
  v174 = (char *)&v153 - v32;
  uint64_t v33 = MEMORY[0x270FA5388](v31);
  MEMORY[0x270FA5388](v33);
  unint64_t v37 = (char *)&v153 - v34;
  uint64_t v38 = *(void *)(a1 + 16);
  if (v38)
  {
    uint64_t v173 = v36;
    uint64_t v154 = v35;
    unint64_t v40 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
    uint64_t v39 = v15 + 16;
    v193 = v40;
    uint64_t v41 = *(unsigned __int8 *)(v39 + 64);
    uint64_t v42 = (v41 + 32) & ~v41;
    uint64_t v43 = a1 + v42;
    uint64_t v44 = *(void *)(v39 + 56);
    uint64_t v45 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v39 + 40);
    v187 = (unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 32);
    v190 = (void (**)(char *, char *, uint64_t))(v39 + 16);
    v178 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);
    uint64_t v169 = v6;
    v170 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
    v181 = (void (**)(char *, uint64_t))(v39 - 8);
    uint64_t v175 = v42;
    uint64_t v157 = v44 + v42;
    uint64_t v156 = v41 | 7;
    v153 = (void (**)(unint64_t, char *, uint64_t))(v39 + 24);
    long long v155 = xmmword_25A5119F0;
    v185 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v39 + 40);
    v186 = (void *)MEMORY[0x263F8EE80];
    v189 = (void *)MEMORY[0x263F8EE80];
    v179 = v5;
    uint64_t v46 = v43;
    uint64_t v192 = v39;
    uint64_t v183 = v14;
    uint64_t v184 = v44;
    v177 = (char *)&v153 - v34;
    v40(v37, (char *)v43, v14);
    while (1)
    {
      unint64_t v49 = *v45;
      (*v45)((uint64_t)v37, 0, 1, v14);
      uint64_t v50 = *v187;
      if ((*v187)(v37, 1, v14) == 1) {
        return (uint64_t)v189;
      }
      v188 = *v190;
      v188(v194, v37, v14);
      uint64_t v51 = sub_25A50E2A0();
      uint64_t v53 = v52;
      uint64_t v54 = v186;
      uint64_t v55 = v186[2];
      uint64_t v191 = v51;
      if (v55)
      {
        uint64_t v56 = v51;
        uint64_t v57 = v46;
        swift_bridgeObjectRetain();
        uint64_t v58 = v53;
        unint64_t v59 = sub_25A409670(v56, v53);
        if (v60)
        {
          uint64_t v61 = (uint64_t)v179;
          sub_25A410F20(v54[7] + *(void *)(v169 + 72) * v59, (uint64_t)v179);
          uint64_t v62 = 0;
        }
        else
        {
          uint64_t v62 = 1;
          uint64_t v61 = (uint64_t)v179;
        }
        uint64_t v64 = v180;
        (*v178)(v61, v62, 1, v180);
        swift_bridgeObjectRelease();
        int v65 = (*v170)(v61, 1, v64);
        int64_t v63 = v189;
        if (v65 != 1)
        {
          uint64_t v74 = v176;
          sub_25A39F4F8(v61, (uint64_t)v176, &qword_26A417B00);
          unint64_t v75 = *v74;
          v193(v172, v194, v183);
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v75 = sub_25A38B420(0, *(void *)(v75 + 16) + 1, 1, v75);
          }
          uint64_t v76 = v191;
          uint64_t v73 = v57;
          unint64_t v78 = *(void *)(v75 + 16);
          unint64_t v77 = *(void *)(v75 + 24);
          if (v78 >= v77 >> 1) {
            unint64_t v75 = sub_25A38B420(v77 > 1, v78 + 1, 1, v75);
          }
          uint64_t v14 = v183;
          uint64_t v79 = v184;
          *(void *)(v75 + 16) = v78 + 1;
          v188((char *)(v75 + v175 + v78 * v79), v172, v14);
          uint64_t v80 = (uint64_t)v176;
          uint64_t v81 = v167;
          v193((char *)v167 + *(int *)(v168 + 36), (char *)v176 + *(int *)(v168 + 36), v14);
          *uint64_t v81 = v75;
          sub_25A434A8C((uint64_t)v81, v80, &qword_26A418938);
          sub_25A410F20(v80, v171);
          int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v195 = v54;
          unint64_t v84 = sub_25A409670(v76, v53);
          uint64_t v85 = v54[2];
          BOOL v86 = (v83 & 1) == 0;
          uint64_t v87 = v85 + v86;
          if (__OFADD__(v85, v86))
          {
            __break(1u);
LABEL_66:
            __break(1u);
LABEL_67:
            __break(1u);
LABEL_68:
            __break(1u);
          }
          char v88 = v83;
          if (v54[3] >= v87)
          {
            uint64_t v45 = v185;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_25A40F8C4();
              goto LABEL_26;
            }
          }
          else
          {
            sub_25A40C7A0(v87, isUniquelyReferenced_nonNull_native);
            unint64_t v89 = sub_25A409670(v76, v53);
            if ((v88 & 1) != (v90 & 1)) {
              goto LABEL_69;
            }
            unint64_t v84 = v89;
LABEL_26:
            uint64_t v45 = v185;
          }
          v141 = v195;
          v186 = v195;
          if (v88)
          {
            sub_25A434A8C(v171, v195[7] + *(void *)(v169 + 72) * v84, &qword_26A417B00);
          }
          else
          {
            v195[(v84 >> 6) + 8] |= 1 << v84;
            v142 = (uint64_t *)(v141[6] + 16 * v84);
            uint64_t *v142 = v76;
            v142[1] = v53;
            sub_25A39F4F8(v171, v141[7] + *(void *)(v169 + 72) * v84, &qword_26A417B00);
            uint64_t v143 = v141[2];
            BOOL v144 = __OFADD__(v143, 1);
            uint64_t v145 = v143 + 1;
            if (v144) {
              goto LABEL_67;
            }
            v141[2] = v145;
            swift_bridgeObjectRetain();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_25A384BCC((uint64_t)v176, &qword_26A417B00);
          (*v181)(v194, v14);
          unint64_t v37 = v177;
          uint64_t v44 = v184;
          goto LABEL_6;
        }
      }
      else
      {
        uint64_t v58 = v52;
        uint64_t v57 = v46;
        uint64_t v61 = (uint64_t)v179;
        (*v178)((uint64_t)v179, 1, 1, v180);
        int64_t v63 = v189;
      }
      sub_25A384BCC(v61, &qword_26A418930);
      uint64_t v66 = v63[2];
      uint64_t v182 = v38;
      if (!v66)
      {
        uint64_t v70 = v173;
        uint64_t v91 = v183;
        v49(v173, 1, 1, v183);
        uint64_t v72 = (uint64_t)v174;
        uint64_t v73 = v57;
        uint64_t v67 = v58;
        uint64_t v14 = v91;
LABEL_30:
        sub_25A384BCC(v70, &qword_26A417E60);
        v193((char *)v72, v194, v14);
        v49(v72, 0, 1, v14);
        if (v50((char *)v72, 1, v14) == 1)
        {
          sub_25A384BCC(v72, &qword_26A417E60);
          v92 = v189;
          swift_bridgeObjectRetain();
          unint64_t v93 = sub_25A409670(v191, v67);
          char v95 = v94;
          swift_bridgeObjectRelease();
          uint64_t v38 = v182;
          uint64_t v44 = v184;
          if (v95)
          {
            uint64_t v191 = v73;
            uint64_t v96 = v184;
            int v97 = swift_isUniquelyReferenced_nonNull_native();
            v195 = v92;
            uint64_t v98 = (uint64_t)v92;
            unint64_t v37 = v177;
            uint64_t v45 = v185;
            if (!v97)
            {
              sub_25A40F600();
              uint64_t v45 = v185;
              uint64_t v98 = (uint64_t)v195;
            }
            swift_bridgeObjectRelease();
            uint64_t v48 = (uint64_t)v160;
            v188(v160, (char *)(*(void *)(v98 + 56) + v93 * v96), v14);
            v189 = (void *)v98;
            uint64_t v99 = v98;
            uint64_t v44 = v96;
            sub_25A3988E8(v93, v99);
            swift_bridgeObjectRelease();
            uint64_t v47 = 0;
            uint64_t v73 = v191;
          }
          else
          {
            uint64_t v47 = 1;
            unint64_t v37 = v177;
            uint64_t v48 = (uint64_t)v160;
            uint64_t v45 = v185;
          }
          v49(v48, v47, 1, v14);
          swift_bridgeObjectRelease();
          sub_25A384BCC(v48, &qword_26A417E60);
LABEL_5:
          (*v181)(v194, v14);
          goto LABEL_6;
        }
        v188(v166, (char *)v72, v14);
        v100 = v189;
        int v101 = swift_isUniquelyReferenced_nonNull_native();
        v195 = v100;
        unint64_t v103 = sub_25A409670(v191, v67);
        uint64_t v104 = v100[2];
        BOOL v105 = (v102 & 1) == 0;
        uint64_t v106 = v104 + v105;
        uint64_t v38 = v182;
        uint64_t v107 = v184;
        if (__OFADD__(v104, v105)) {
          goto LABEL_66;
        }
        char v108 = v102;
        if (v100[3] >= v106)
        {
          uint64_t v45 = v185;
          if ((v101 & 1) == 0)
          {
            sub_25A40F600();
            goto LABEL_39;
          }
        }
        else
        {
          sub_25A40C3B8(v106, v101);
          unint64_t v109 = sub_25A409670(v191, v67);
          if ((v108 & 1) != (v110 & 1))
          {
LABEL_69:
            uint64_t result = sub_25A510430();
            __break(1u);
            return result;
          }
          unint64_t v103 = v109;
LABEL_39:
          uint64_t v45 = v185;
        }
        v146 = v195;
        if (v108)
        {
          uint64_t v44 = v107;
          (*v153)(v195[7] + v103 * v107, v166, v14);
        }
        else
        {
          v195[(v103 >> 6) + 8] |= 1 << v103;
          v147 = (void *)(v146[6] + 16 * v103);
          void *v147 = v191;
          v147[1] = v67;
          uint64_t v44 = v107;
          v188((char *)(v146[7] + v103 * v107), v166, v14);
          uint64_t v148 = v146[2];
          BOOL v144 = __OFADD__(v148, 1);
          uint64_t v149 = v148 + 1;
          if (v144) {
            goto LABEL_68;
          }
          v146[2] = v149;
          swift_bridgeObjectRetain();
        }
        v189 = v195;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v37 = v177;
        goto LABEL_5;
      }
      swift_bridgeObjectRetain();
      uint64_t v67 = v58;
      unint64_t v68 = sub_25A409670(v191, v58);
      if (v69)
      {
        uint64_t v70 = v173;
        uint64_t v14 = v183;
        v193((char *)v173, (char *)(v63[7] + v68 * v44), v183);
        uint64_t v71 = 0;
        uint64_t v72 = (uint64_t)v174;
        uint64_t v73 = v57;
      }
      else
      {
        uint64_t v71 = 1;
        uint64_t v72 = (uint64_t)v174;
        uint64_t v70 = v173;
        uint64_t v73 = v57;
        uint64_t v14 = v183;
      }
      v49(v70, v71, 1, v14);
      swift_bridgeObjectRelease();
      if (v50((char *)v70, 1, v14) == 1) {
        goto LABEL_30;
      }
      v162 = v49;
      v111 = v163;
      v188(v163, (char *)v70, v14);
      v112 = v164;
      v113 = (void (*)(uint64_t, char *, uint64_t))v193;
      v193(v164, v111, v14);
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A4158C8);
      uint64_t v114 = swift_allocObject();
      *(_OWORD *)(v114 + 16) = v155;
      v113(v114 + v175, v194, v14);
      v113((uint64_t)v165, v112, v14);
      swift_bridgeObjectRetain();
      unint64_t v115 = sub_25A38B420(0, 1, 1, MEMORY[0x263F8EE78]);
      unint64_t v117 = *(void *)(v115 + 16);
      unint64_t v116 = *(void *)(v115 + 24);
      if (v117 >= v116 >> 1) {
        unint64_t v115 = sub_25A38B420(v116 > 1, v117 + 1, 1, v115);
      }
      uint64_t v38 = v182;
      uint64_t v118 = v184;
      v119 = v186;
      *(void *)(v115 + 16) = v117 + 1;
      v188((char *)(v115 + v175 + v117 * v118), v165, v14);
      v195 = (void *)v115;
      sub_25A3970D8(v114);
      v120 = v195;
      v121 = v167;
      v122 = v164;
      v193((char *)v167 + *(int *)(v168 + 36), v164, v14);
      unint64_t *v121 = (unint64_t)v120;
      v123 = *v181;
      swift_bridgeObjectRetain();
      v161 = v123;
      v123(v122, v14);
      swift_bridgeObjectRelease();
      uint64_t v124 = v158;
      sub_25A39F4F8((uint64_t)v121, v158, &qword_26A418938);
      uint64_t v125 = v124;
      uint64_t v126 = v159;
      sub_25A39F4F8(v125, v159, &qword_26A417B00);
      char v127 = swift_isUniquelyReferenced_nonNull_native();
      v195 = v119;
      uint64_t v128 = v126;
      uint64_t v129 = v191;
      sub_25A3FE55C(v128, v191, v67, v127);
      v186 = v195;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v130 = v189;
      swift_bridgeObjectRetain();
      unint64_t v131 = sub_25A409670(v129, v67);
      LOBYTE(v129) = v132;
      swift_bridgeObjectRelease();
      uint64_t v44 = v184;
      if (v129)
      {
        uint64_t v191 = v73;
        uint64_t v133 = v184;
        int v134 = swift_isUniquelyReferenced_nonNull_native();
        v195 = v130;
        uint64_t v135 = (uint64_t)v130;
        unint64_t v37 = v177;
        uint64_t v45 = v185;
        unint64_t v49 = v162;
        if (!v134)
        {
          sub_25A40F600();
          uint64_t v45 = v185;
          uint64_t v135 = (uint64_t)v195;
        }
        swift_bridgeObjectRelease();
        uint64_t v136 = v133;
        unint64_t v137 = *(void *)(v135 + 56) + v131 * v133;
        uint64_t v138 = v154;
        v188((char *)v154, (char *)v137, v14);
        v189 = (void *)v135;
        uint64_t v139 = v135;
        uint64_t v44 = v136;
        sub_25A3988E8(v131, v139);
        swift_bridgeObjectRelease();
        uint64_t v140 = 0;
        uint64_t v73 = v191;
      }
      else
      {
        uint64_t v140 = 1;
        unint64_t v37 = v177;
        uint64_t v138 = v154;
        uint64_t v45 = v185;
        unint64_t v49 = v162;
      }
      v49(v138, v140, 1, v14);
      sub_25A384BCC(v138, &qword_26A417E60);
      v150 = v161;
      v161(v163, v14);
      v150(v194, v14);
      swift_bridgeObjectRelease();
LABEL_6:
      uint64_t v46 = v73 + v44;
      if (!--v38)
      {
        v49((uint64_t)v37, 1, 1, v14);
        return (uint64_t)v189;
      }
      v193(v37, (char *)v46, v14);
    }
  }
  v151 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  v186 = (void *)MEMORY[0x263F8EE80];
  v189 = (void *)MEMORY[0x263F8EE80];
  v151(v37, 1, 1, v14);
  return (uint64_t)v189;
}

uint64_t sub_25A434A8C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t audit_token_t.pid.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)v5.val = a1;
  *(void *)&v5.val[2] = a2;
  *(void *)&v5.val[4] = a3;
  *(void *)&v5.val[6] = a4;
  return audit_token_to_pid(&v5);
}

uint64_t static audit_token_t.current.getter()
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  memset(v4, 0, sizeof(v4));
  int current_process_audit_token = get_current_process_audit_token((task_info_t)v4);
  if (!current_process_audit_token) {
    return *(void *)&v4[0];
  }
  int v1 = current_process_audit_token;
  sub_25A434C1C();
  swift_allocError();
  _DWORD *v2 = v1;
  return swift_willThrow();
}

uint64_t get_current_process_audit_token(task_info_t task_info_out)
{
  mach_msg_type_number_t task_info_outCnt = 8;
  return task_info(*MEMORY[0x263EF8960], 0xFu, task_info_out, &task_info_outCnt);
}

unint64_t sub_25A434C1C()
{
  unint64_t result = qword_26A418958;
  if (!qword_26A418958)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A418958);
  }
  return result;
}

BOOL static audit_token_t.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 != a5) {
    return 0;
  }
  BOOL v8 = HIDWORD(a4) == HIDWORD(a8);
  if (a4 != a8) {
    BOOL v8 = 0;
  }
  BOOL v9 = HIDWORD(a3) == HIDWORD(a7) && v8;
  if (a3 != a7) {
    BOOL v9 = 0;
  }
  BOOL v10 = HIDWORD(a2) == HIDWORD(a6) && v9;
  return a2 == a6 && v10;
}

BOOL sub_25A434CCC(int32x4_t *a1, int32x4_t *a2)
{
  BOOL result = 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(*a1, *a2)), 0xFuLL))) & 1) != 0
    && a1[1].i32[0] == a2[1].i32[0]
    && a1[1].i32[1] == a2[1].i32[1]
    && a1[1].i32[2] == a2[1].i32[2])
  {
    return a1[1].i32[3] == a2[1].i32[3];
  }
  return result;
}

uint64_t audit_token_t.hash(into:)()
{
  return sub_25A510510();
}

uint64_t audit_token_t.hashValue.getter()
{
  return sub_25A510530();
}

uint64_t sub_25A434EA8()
{
  return sub_25A510530();
}

uint64_t sub_25A434F70()
{
  return sub_25A510510();
}

uint64_t sub_25A435000()
{
  return sub_25A510530();
}

unint64_t sub_25A4350C8()
{
  unint64_t result = qword_26A418960[0];
  if (!qword_26A418960[0])
  {
    type metadata accessor for audit_token_t(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A418960);
  }
  return result;
}

ValueMetadata *type metadata accessor for KernelReturnCode()
{
  return &type metadata for KernelReturnCode;
}

uint64_t Query.uncachedValue(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness
                                                                                         + 32))(v3, a1, a2, a3, AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t Query.value<A>(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a5 + 40))(a2, a3, a5);
}

uint64_t Query.debugDescription.getter()
{
  swift_getDynamicType();

  return sub_25A5105D0();
}

uint64_t Query<>.value<A>(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return QueryManager.cachedValue<A, B>(for:)(v6, a3, a4, a5, a6);
}

uint64_t dispatch thunk of Query.uncachedValue(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t InvalidatableExclusionCache.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  InvalidatableExclusionCache.init()();
  return v0;
}

void *InvalidatableExclusionCache.init()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 88);
  unint64_t v3 = sub_25A3CE5CC();
  uint64_t v4 = *(void *)(v1 + 104);
  v8[1] = v2;
  v8[2] = v3;
  v8[3] = v4;
  type metadata accessor for InvalidatableCache();
  v8[0] = sub_25A50E850();
  uint64_t v5 = sub_25A50E990();
  uint64_t v6 = sub_25A3EF560(v8, v5);
  swift_bridgeObjectRelease();
  v0[2] = v6;
  return v0;
}

ValueMetadata *InvalidatableExclusionCache.futureResource(matching:excluding:createFuture:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void *, uint64_t))
{
  uint64_t v5 = (void *)*v3;
  v25[3] = v3[2];
  uint64_t v18 = v5[10];
  uint64_t v19 = v5[11];
  uint64_t v20 = v5[12];
  uint64_t v21 = v5[13];
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  unint64_t v6 = sub_25A3CE5CC();
  swift_retain();
  uint64_t v26 = &type metadata for Identifier;
  uint64_t v27 = v19;
  unint64_t v28 = v6;
  uint64_t v29 = v21;
  type metadata accessor for InvalidatableCache();
  sub_25A50E990();
  uint64_t v7 = sub_25A50E5B0();
  type metadata accessor for Future();
  type metadata accessor for Promise();
  sub_25A50F1E0();
  swift_getTupleTypeMetadata3();
  sub_25A50FA40();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t WitnessTable = swift_getWitnessTable();
  SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_25A380000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/InvalidatableExclusionCache.swift", 139, 2, 28, 49, (uint64_t)"futureResource(matching:excluding:createFuture:)", 48, 2, (uint64_t)sub_25A4360EC, (uint64_t)v17, v7, TupleTypeMetadata2, WitnessTable);
  swift_release();
  BOOL v10 = v26;
  uint64_t v11 = v28;
  if (v28)
  {
    uint64_t v12 = v27;
    uint64_t v13 = v29;
    v25[0] = v27;
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v14 = a3(v25, v13);
    swift_bridgeObjectRelease();
    sub_25A41B150(v25);
    uint64_t v15 = (void *)v25[0];
    v24[0] = v25[0];
    v24[1] = v25[1];
    Promise.track(future:on:)(v14, v24);
    swift_release();
    swift_release();
    sub_25A436110(v12, v11);
    sub_25A3EE314(v15);
  }
  return v10;
}

void sub_25A435698(uint64_t a1@<X1>, ValueMetadata *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t *a7@<X8>)
{
  uint64_t v34 = a7;
  uint64_t v41 = a3;
  uint64_t v42 = a4;
  uint64_t v43 = a5;
  uint64_t v44 = a6;
  uint64_t v45 = &type metadata for Identifier;
  uint64_t v46 = a4;
  unint64_t v47 = sub_25A3CE5CC();
  uint64_t v48 = a6;
  type metadata accessor for InvalidatableCache();
  uint64_t v13 = sub_25A50E990();
  uint64_t WitnessTable = swift_getWitnessTable();
  KeyValueMap.guaranteedValue(for:creatingIfNecessaryWith:)(a1, (uint64_t (*)(uint64_t))sub_25A4362C4, (uint64_t)v40, v13, WitnessTable, (uint64_t)&v45);
  uint64_t v15 = v45;
  uint64_t v49 = InvalidatableCache.snapshot.getter();
  uint64_t v35 = a3;
  uint64_t v36 = a4;
  uint64_t v37 = a5;
  uint64_t v38 = a6;
  uint64_t v32 = a2;
  uint64_t v39 = a2;
  uint64_t v16 = type metadata accessor for Future();
  sub_25A50E990();
  swift_getWitnessTable();
  sub_25A50EF90();
  uint64_t v17 = v33;
  swift_bridgeObjectRelease();
  uint64_t v18 = v46;
  if (v46)
  {
    swift_release();
    uint64_t v19 = v34;
    *uint64_t v34 = v18;
    v19[1] = 0;
    _OWORD v19[2] = 0;
    v19[3] = 0;
  }
  else
  {
    uint64_t v31 = v16;
    uint64_t v33 = a4;
    uint64_t v30 = a6;
    if (qword_26A4154C0 != -1) {
      swift_once();
    }
    uint64_t v20 = (void *)(qword_26A418748 + 16);
    uint64_t v21 = (os_unfair_lock_s *)(qword_26A418748 + 24);
    swift_retain();
    os_unfair_lock_lock(v21);
    sub_25A42091C(v20, &v45);
    if (v17)
    {
      os_unfair_lock_unlock(v21);
      __break(1u);
    }
    else
    {
      os_unfair_lock_unlock(v21);
      uint64_t v22 = v45;
      swift_release();
      uint64_t v23 = sub_25A3BE428((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/InvalidatableExclusionCache.swift", 139, 2, 37, 72, (uint64_t)"futureResource(matching:excluding:createFuture:)", 48, 2);
      uint64_t v31 = v24;
      uint64_t v29 = (uint64_t)&v29;
      uint64_t v45 = v32;
      MEMORY[0x270FA5388](v23);
      void v28[2] = a3;
      v28[3] = a5;
      v28[4] = v15;
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A4189E8);
      sub_25A436388();
      uint64_t v25 = sub_25A50EF30();
      uint64_t v45 = v22;
      MEMORY[0x270FA5388](v25);
      v28[-4] = a3;
      v28[-3] = a5;
      v28[-2] = v30;
      v28[-1] = v23;
      uint64_t v26 = InvalidatableCache.futureResource(for:create:)((uint64_t)&v45, (uint64_t (*)(uint64_t))sub_25A4363E4);
      swift_release();
      swift_release();
      uint64_t v27 = v34;
      *uint64_t v34 = v26;
      v27[1] = (uint64_t)v22;
      v27[2] = v31;
      v27[3] = v25;
    }
  }
}

uint64_t sub_25A435A60@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a2;
  uint64_t v6 = *a1;
  if (!InvalidatableCache.subscript.getter((uint64_t)&v6)) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(v4 + 88) - 8) + 56))(a3, 1, 1);
  }
  sub_25A4EF098(a3);
  return swift_release();
}

uint64_t sub_25A435B28(uint64_t a1)
{
  uint64_t result = nullsub_1(a1);
  if (!v1) {
    return swift_retain();
  }
  return result;
}

uint64_t InvalidatableExclusionCache.cachedResources.getter()
{
  sub_25A3CE5CC();
  type metadata accessor for InvalidatableCache();
  sub_25A50E990();
  uint64_t v0 = sub_25A50E5B0();
  uint64_t WitnessTable = swift_getWitnessTable();
  SynchronousAccessProviding<>.peek(file:line:column:function:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/InvalidatableExclusionCache.swift", 139, 2, 60, 27, (uint64_t)"cachedResources", 15, 2, v0, WitnessTable);
  j_nullsub_1(&type metadata for Identifier);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_25A50E950();
  sub_25A50F1E0();
  swift_getWitnessTable();
  swift_getWitnessTable();
  uint64_t v2 = sub_25A50EFE0();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_25A435D64@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1 = InvalidatableCache.snapshot.getter();
  type metadata accessor for Future();
  sub_25A3CE5CC();
  j_nullsub_1(v1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  sub_25A50E950();
  swift_getWitnessTable();
  uint64_t v2 = sub_25A50EF30();
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

Swift::Void __swiftcall InvalidatableExclusionCache.invalidate()()
{
  sub_25A3CE5CC();
  type metadata accessor for InvalidatableCache();
  sub_25A50E990();
  uint64_t v0 = sub_25A50E5B0();
  uint64_t WitnessTable = swift_getWitnessTable();
  SynchronousAccessProviding<>.peek(file:line:column:function:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/InvalidatableExclusionCache.swift", 139, 2, 67, 20, (uint64_t)"invalidate()", 12, 2, v0, WitnessTable);
  j_nullsub_1();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_25A50E950();
  swift_getWitnessTable();
  sub_25A50EFF0();
  swift_bridgeObjectRelease();
}

uint64_t InvalidatableExclusionCache.deinit()
{
  swift_release();
  return v0;
}

uint64_t InvalidatableExclusionCache.__deallocating_deinit()
{
  swift_release();

  return MEMORY[0x270FA0228](v0, 24, 7);
}

void sub_25A4360EC(uint64_t *a1@<X8>)
{
  sub_25A435698(*(void *)(v1 + 48), *(ValueMetadata **)(v1 + 56), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), a1);
}

uint64_t sub_25A436110(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_25A436154@<X0>(uint64_t *a1@<X8>)
{
  return sub_25A435D64(a1);
}

void sub_25A436174()
{
}

uint64_t sub_25A4361A0()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for InvalidatableExclusionCache()
{
  return swift_getGenericMetadata();
}

uint64_t method lookup function for InvalidatableExclusionCache(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for InvalidatableExclusionCache);
}

uint64_t dispatch thunk of InvalidatableExclusionCache.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t sub_25A43622C@<X0>(uint64_t a1@<X8>)
{
  return sub_25A4EF098(a1);
}

uint64_t sub_25A436250()
{
  return 32;
}

__n128 sub_25A43625C(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_25A436268()
{
  return swift_release();
}

uint64_t sub_25A4362C4@<X0>(uint64_t *a1@<X8>)
{
  sub_25A3CE5CC();
  type metadata accessor for InvalidatableCache();
  uint64_t result = InvalidatableCache.__allocating_init()();
  *a1 = result;
  return result;
}

BOOL sub_25A436330(uint64_t *a1)
{
  return !sub_25A3962E4(*a1, *(void *)(v1 + 48));
}

uint64_t sub_25A436368@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A435A60(a1, *(uint64_t **)(v2 + 32), a2);
}

unint64_t sub_25A436388()
{
  unint64_t result = qword_26A4189F0;
  if (!qword_26A4189F0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A4189E8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4189F0);
  }
  return result;
}

uint64_t sub_25A4363E4()
{
  return sub_25A435B28(*(void *)(v0 + 40));
}

uint64_t NSThread.currentExecutionExclusivity.getter()
{
  sub_25A436478();
  id v0 = objc_msgSend(self, sel_currentThread);
  char v1 = sub_25A50F9A0();

  if (v1) {
    return 2;
  }
  else {
    return 0;
  }
}

unint64_t sub_25A436478()
{
  unint64_t result = qword_26A4189F8;
  if (!qword_26A4189F8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_26A4189F8);
  }
  return result;
}

uint64_t sub_25A4364B8()
{
  sub_25A436478();
  id v0 = objc_msgSend(self, sel_currentThread);
  char v1 = sub_25A50F9A0();

  if (v1) {
    return 2;
  }
  else {
    return 0;
  }
}

uint64_t TimingRecord.ID.init()@<X0>(void *a1@<X8>)
{
  uint64_t v3 = 0;
  uint64_t result = MEMORY[0x26113F090](&v3, 8);
  *a1 = v3;
  return result;
}

void TimingRecord.id.getter(void *a1@<X8>)
{
  *a1 = *v1;
}

void *TimingRecord.id.setter(void *result)
{
  void *v1 = *result;
  return result;
}

uint64_t (*TimingRecord.id.modify())()
{
  return nullsub_1;
}

void TimingRecord.parent.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 16);
  *(void *)a1 = *(void *)(v1 + 8);
  *(unsigned char *)(a1 + 8) = v2;
}

uint64_t TimingRecord.parent.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(result + 8);
  *(void *)(v1 + 8) = *(void *)result;
  *(unsigned char *)(v1 + 16) = v2;
  return result;
}

uint64_t (*TimingRecord.parent.modify())()
{
  return nullsub_1;
}

uint64_t TimingRecord.range.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for TimingRecord(0) + 24);

  return sub_25A436650(v3, a1);
}

uint64_t type metadata accessor for TimingRecord(uint64_t a1)
{
  return sub_25A384AE8(a1, (uint64_t *)&unk_26A418A50);
}

uint64_t sub_25A436650(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A418A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t TimingRecord.range.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for TimingRecord(0) + 24);

  return sub_25A4366FC(a1, v3);
}

uint64_t sub_25A4366FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A418A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*TimingRecord.range.modify())(void)
{
  return nullsub_1;
}

uint64_t TimingRecord.category.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for TimingRecord(0) + 28);
  uint64_t v4 = *(void *)(v3 + 8);
  char v5 = *(unsigned char *)(v3 + 32);
  uint64_t v6 = *(void *)(v3 + 40);
  char v7 = *(unsigned char *)(v3 + 48);
  *(void *)a1 = *(void *)v3;
  *(void *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v3 + 16);
  *(unsigned char *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v6;
  *(unsigned char *)(a1 + 48) = v7;

  return swift_bridgeObjectRetain();
}

__n128 TimingRecord.category.setter(__n128 *a1)
{
  __n128 v9 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  unint64_t v3 = a1[1].n128_u64[1];
  unsigned __int8 v4 = a1[2].n128_u8[0];
  unint64_t v5 = a1[2].n128_u64[1];
  unsigned __int8 v6 = a1[3].n128_u8[0];
  char v7 = (__n128 *)(v1 + *(int *)(type metadata accessor for TimingRecord(0) + 28));
  swift_bridgeObjectRelease();
  __n128 result = v9;
  *char v7 = v9;
  v7[1].n128_u64[0] = v2;
  v7[1].n128_u64[1] = v3;
  v7[2].n128_u8[0] = v4;
  v7[2].n128_u64[1] = v5;
  v7[3].n128_u8[0] = v6;
  return result;
}

uint64_t (*TimingRecord.category.modify())(void)
{
  return nullsub_1;
}

uint64_t TimingRecord.tag.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for TimingRecord(0) + 32));
}

uint64_t TimingRecord.tag.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for TimingRecord(0);
  uint64_t v6 = v2 + *(int *)(result + 32);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*TimingRecord.tag.modify())(void)
{
  return nullsub_1;
}

uint64_t TimingRecord.details.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for TimingRecord(0) + 36));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TimingRecord.details.setter(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for TimingRecord(0) + 36));
  uint64_t result = swift_bridgeObjectRelease();
  *unint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*TimingRecord.details.modify())(void)
{
  return nullsub_1;
}

double TimingRecord.elapsedTime.getter()
{
  uint64_t v1 = type metadata accessor for TimingRecord.Point(0);
  uint64_t v2 = MEMORY[0x270FA5388](v1 - 8);
  unsigned __int8 v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v16 - v5;
  uint64_t v7 = v0 + *(int *)(type metadata accessor for TimingRecord(0) + 24);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A418A00);
  sub_25A436BCC(v7 + *(int *)(v8 + 36), (uint64_t)v6);
  sub_25A50E3D0();
  double v10 = v9;
  uint64_t v11 = sub_25A50E470();
  uint64_t v12 = *(void (**)(char *, uint64_t))(*(void *)(v11 - 8) + 8);
  v12(v6, v11);
  sub_25A436BCC(v7, (uint64_t)v4);
  sub_25A50E3D0();
  double v14 = v13;
  v12(v4, v11);
  return v10 - v14;
}

uint64_t type metadata accessor for TimingRecord.Point(uint64_t a1)
{
  return sub_25A384AE8(a1, (uint64_t *)&unk_26A418A70);
}

uint64_t sub_25A436BCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TimingRecord.Point(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t TimingRecord.init(id:parent:range:category:tag:details:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v10 = *a1;
  int v11 = *((unsigned __int8 *)a1 + 8);
  uint64_t v12 = *a2;
  char v13 = *((unsigned char *)a2 + 8);
  uint64_t v14 = *a4;
  uint64_t v15 = a4[1];
  uint64_t v16 = a4[2];
  uint64_t v25 = a4[3];
  char v24 = *((unsigned char *)a4 + 32);
  uint64_t v23 = a4[5];
  char v22 = *((unsigned char *)a4 + 48);
  uint64_t v31 = 0;
  MEMORY[0x26113F090](&v31, 8);
  if (v11 == 1)
  {
    uint64_t v31 = 0;
    MEMORY[0x26113F090](&v31, 8);
    uint64_t v10 = v31;
  }
  uint64_t v17 = (int *)type metadata accessor for TimingRecord(0);
  uint64_t v18 = a9 + v17[8];
  uint64_t v19 = (void *)(a9 + v17[9]);
  *(void *)a9 = v10;
  *(void *)(a9 + 8) = v12;
  *(unsigned char *)(a9 + 16) = v13;
  uint64_t result = sub_25A436D60(a3, a9 + v17[6]);
  uint64_t v21 = a9 + v17[7];
  *(void *)uint64_t v21 = v14;
  *(void *)(v21 + 8) = v15;
  *(void *)(v21 + 16) = v16;
  *(void *)(v21 + 24) = v25;
  *(unsigned char *)(v21 + 32) = v24;
  *(void *)(v21 + 40) = v23;
  *(unsigned char *)(v21 + 48) = v22;
  *(void *)uint64_t v18 = a5;
  *(unsigned char *)(v18 + 8) = a6 & 1;
  *uint64_t v19 = a7;
  v19[1] = a8;
  return result;
}

uint64_t sub_25A436D60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A418A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t TimingRecord.init(id:parent:start:category:tag:details:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v60 = a7;
  uint64_t v61 = a8;
  int v59 = a6;
  uint64_t v58 = a5;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A418A08);
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = &v45[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = &v45[-v18];
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A418A00);
  uint64_t v20 = MEMORY[0x270FA5388](v49);
  char v22 = &v45[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v20);
  char v24 = &v45[-v23];
  uint64_t v51 = *a1;
  int v50 = *((unsigned __int8 *)a1 + 8);
  uint64_t v25 = *a2;
  int v52 = *((unsigned __int8 *)a2 + 8);
  uint64_t v26 = *a4;
  uint64_t v27 = a4[1];
  uint64_t v28 = a4[2];
  uint64_t v56 = a4[3];
  uint64_t v57 = v28;
  int v55 = *((unsigned __int8 *)a4 + 32);
  uint64_t v29 = a4[5];
  uint64_t v53 = v25;
  uint64_t v54 = v29;
  int v30 = *((unsigned __int8 *)a4 + 48);
  uint64_t result = _s20PreviewsFoundationOS12TimingRecordV5PointV1loiySbAE_AEtFZ_0();
  if (result)
  {
    __break(1u);
  }
  else
  {
    int v46 = v30;
    uint64_t v47 = v27;
    uint64_t v48 = v26;
    uint64_t v32 = (uint64_t)&v19[*(int *)(v14 + 48)];
    sub_25A436BCC(a3, (uint64_t)v19);
    sub_25A436BCC(a3, v32);
    uint64_t v33 = (uint64_t)&v17[*(int *)(v14 + 48)];
    sub_25A436BCC((uint64_t)v19, (uint64_t)v17);
    sub_25A436BCC(v32, v33);
    sub_25A439694((uint64_t)v17, (uint64_t)v22, type metadata accessor for TimingRecord.Point);
    sub_25A4396FC(v33, type metadata accessor for TimingRecord.Point);
    uint64_t v34 = (uint64_t)&v17[*(int *)(v14 + 48)];
    sub_25A439694((uint64_t)v19, (uint64_t)v17, type metadata accessor for TimingRecord.Point);
    sub_25A439694(v32, v34, type metadata accessor for TimingRecord.Point);
    sub_25A439694(v34, (uint64_t)&v22[*(int *)(v49 + 36)], type metadata accessor for TimingRecord.Point);
    sub_25A4396FC((uint64_t)v17, type metadata accessor for TimingRecord.Point);
    sub_25A436D60((uint64_t)v22, (uint64_t)v24);
    uint64_t v62 = 0;
    MEMORY[0x26113F090](&v62, 8);
    uint64_t v35 = (uint64_t)v24;
    uint64_t v36 = v51;
    if (v50)
    {
      uint64_t v62 = 0;
      MEMORY[0x26113F090](&v62, 8);
      uint64_t v36 = v62;
    }
    uint64_t v37 = (int *)type metadata accessor for TimingRecord(0);
    uint64_t v38 = a9 + v37[8];
    uint64_t v39 = (void *)(a9 + v37[9]);
    uint64_t v40 = v53;
    *(void *)a9 = v36;
    *(void *)(a9 + 8) = v40;
    *(unsigned char *)(a9 + 16) = v52;
    sub_25A436D60(v35, a9 + v37[6]);
    uint64_t v41 = a9 + v37[7];
    uint64_t v42 = v47;
    *(void *)uint64_t v41 = v48;
    *(void *)(v41 + 8) = v42;
    uint64_t v43 = v56;
    *(void *)(v41 + 16) = v57;
    *(void *)(v41 + 24) = v43;
    *(unsigned char *)(v41 + 32) = v55;
    *(void *)(v41 + 40) = v54;
    *(unsigned char *)(v41 + 48) = v46;
    *(void *)uint64_t v38 = v58;
    *(unsigned char *)(v38 + 8) = v59 & 1;
    uint64_t v44 = v61;
    *uint64_t v39 = v60;
    v39[1] = v44;
    return sub_25A4396FC(a3, type metadata accessor for TimingRecord.Point);
  }
  return result;
}

uint64_t TimingRecord.updateEndTime(_:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A418A08);
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v20 - v7;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A418A00);
  MEMORY[0x270FA5388](v9);
  int v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for TimingRecord.Point(0);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = v1 + *(int *)(type metadata accessor for TimingRecord(0) + 24);
  sub_25A436BCC(v15, (uint64_t)v14);
  uint64_t result = _s20PreviewsFoundationOS12TimingRecordV5PointV1loiySbAE_AEtFZ_0();
  if (result)
  {
    __break(1u);
  }
  else
  {
    uint64_t v17 = (uint64_t)&v8[*(int *)(v3 + 48)];
    sub_25A439694((uint64_t)v14, (uint64_t)v8, type metadata accessor for TimingRecord.Point);
    sub_25A436BCC(a1, v17);
    uint64_t v18 = (uint64_t)&v6[*(int *)(v3 + 48)];
    sub_25A436BCC((uint64_t)v8, (uint64_t)v6);
    sub_25A436BCC(v17, v18);
    sub_25A439694((uint64_t)v6, (uint64_t)v11, type metadata accessor for TimingRecord.Point);
    sub_25A4396FC(v18, type metadata accessor for TimingRecord.Point);
    uint64_t v19 = (uint64_t)&v6[*(int *)(v3 + 48)];
    sub_25A439694((uint64_t)v8, (uint64_t)v6, type metadata accessor for TimingRecord.Point);
    sub_25A439694(v17, v19, type metadata accessor for TimingRecord.Point);
    sub_25A439694(v19, (uint64_t)&v11[*(int *)(v9 + 36)], type metadata accessor for TimingRecord.Point);
    sub_25A4396FC((uint64_t)v6, type metadata accessor for TimingRecord.Point);
    sub_25A384BCC(v15, &qword_26A418A00);
    return sub_25A436D60((uint64_t)v11, v15);
  }
  return result;
}

uint64_t TimingRecord.hash(into:)()
{
  sub_25A510520();
  if (*(unsigned char *)(v0 + 16) == 1)
  {
    sub_25A510500();
  }
  else
  {
    sub_25A510500();
    sub_25A510520();
  }
  uint64_t v1 = type metadata accessor for TimingRecord(0);
  sub_25A50E470();
  sub_25A4397C4(&qword_26A418A10, MEMORY[0x263F07490]);
  sub_25A50EA20();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A418A00);
  sub_25A50EA20();
  sub_25A510520();
  if (*(unsigned char *)(v0 + *(int *)(v1 + 32) + 8) == 1)
  {
    sub_25A510500();
  }
  else
  {
    sub_25A510500();
    sub_25A510520();
  }
  if (!*(void *)(v0 + *(int *)(v1 + 36) + 8)) {
    return sub_25A510500();
  }
  sub_25A510500();
  swift_bridgeObjectRetain();
  sub_25A50ED30();

  return swift_bridgeObjectRelease();
}

BOOL static TimingRecord.ID.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t TimingRecord.hashValue.getter()
{
  return sub_25A510530();
}

uint64_t sub_25A437578()
{
  return sub_25A510530();
}

uint64_t sub_25A4375BC()
{
  return sub_25A510530();
}

BOOL static TimingRecord.ID.< infix(_:_:)(void *a1, void *a2)
{
  return *a1 < *a2;
}

uint64_t TimingRecord.ID.hash(into:)()
{
  return sub_25A510520();
}

uint64_t TimingRecord.ID.hashValue.getter()
{
  return sub_25A510530();
}

BOOL sub_25A437684(void *a1, void *a2)
{
  return *a1 < *a2;
}

BOOL sub_25A437698(void *a1, void *a2)
{
  return *a2 >= *a1;
}

BOOL sub_25A4376AC(void *a1, void *a2)
{
  return *a1 >= *a2;
}

BOOL sub_25A4376C0(void *a1, void *a2)
{
  return *a2 < *a1;
}

uint64_t TimingRecord.Point.timestamp.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_25A50E470();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t TimingRecord.Point.timestamp.setter(uint64_t a1)
{
  uint64_t v3 = sub_25A50E470();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t (*TimingRecord.Point.timestamp.modify())()
{
  return nullsub_1;
}

uint64_t TimingRecord.Point.init(testSecondsSinceNow:)()
{
  return sub_25A50E3C0();
}

uint64_t TimingRecord.Point.init(timestamp:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_25A50E470();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32);

  return v5(a2, a1, v4);
}

uint64_t TimingRecord.Point.hash(into:)()
{
  sub_25A50E470();
  sub_25A4397C4(&qword_26A418A10, MEMORY[0x263F07490]);

  return sub_25A50EA20();
}

uint64_t TimingRecord.Point.hashValue.getter()
{
  return sub_25A510530();
}

uint64_t sub_25A43794C()
{
  return sub_25A510530();
}

uint64_t sub_25A4379D4()
{
  sub_25A50E470();
  sub_25A4397C4(&qword_26A418A10, MEMORY[0x263F07490]);

  return sub_25A50EA20();
}

uint64_t sub_25A437A58()
{
  return sub_25A510530();
}

BOOL sub_25A437AE0()
{
  return (_s20PreviewsFoundationOS12TimingRecordV5PointV1loiySbAE_AEtFZ_0() & 1) == 0;
}

BOOL sub_25A437B0C()
{
  return (_s20PreviewsFoundationOS12TimingRecordV5PointV1loiySbAE_AEtFZ_0() & 1) == 0;
}

uint64_t sub_25A437B2C()
{
  return _s20PreviewsFoundationOS12TimingRecordV5PointV1loiySbAE_AEtFZ_0();
}

uint64_t TimingRecord.Point.init(integerLiteral:)()
{
  return sub_25A50E3C0();
}

uint64_t TimingRecord.Point.description.getter()
{
  return 0;
}

uint64_t sub_25A437B8C()
{
  return sub_25A50E3C0();
}

uint64_t sub_25A437B98()
{
  return 0;
}

uint64_t ClosedRange<>.isEmpty.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A418A00);

  return _s20PreviewsFoundationOS12TimingRecordV5PointV2eeoiySbAE_AEtFZ_0();
}

double ClosedRange<>.elapsedTime.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for TimingRecord.Point(0);
  uint64_t v3 = MEMORY[0x270FA5388](v2 - 8);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v16 - v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A418A00);
  sub_25A436BCC(v1 + *(int *)(v8 + 36), (uint64_t)v7);
  sub_25A50E3D0();
  double v10 = v9;
  uint64_t v11 = sub_25A50E470();
  uint64_t v12 = *(void (**)(char *, uint64_t))(*(void *)(v11 - 8) + 8);
  v12(v7, v11);
  sub_25A436BCC(v1, (uint64_t)v5);
  sub_25A50E3D0();
  double v14 = v13;
  v12(v5, v11);
  return v10 - v14;
}

uint64_t ClosedRange<>.pointAtPercent(_:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for TimingRecord.Point(0);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25A436BCC(v1, (uint64_t)v4);
  sub_25A50E3D0();
  uint64_t v5 = sub_25A50E470();
  uint64_t v6 = *(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A418A00);
  sub_25A436BCC(v1 + *(int *)(v7 + 36), (uint64_t)v4);
  sub_25A50E3D0();
  v6(v4, v5);
  return sub_25A50E3C0();
}

uint64_t TimingRecord.ID.description.getter()
{
  return sub_25A50EEA0();
}

uint64_t sub_25A437EB8()
{
  return sub_25A50EEA0();
}

uint64_t Collection<>.asTextRowsForDiagnostics.getter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for TimingRecord.Point(0);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v82 = (uint64_t)&v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v81 = (uint64_t)&v76 - v6;
  uint64_t v7 = (int *)type metadata accessor for TimingRecord(0);
  uint64_t v85 = *((void *)v7 - 1);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A418A20);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  double v13 = (char *)&v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v16 = (char *)&v76 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v77 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v19 = (char *)&v76 - v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v1, a1);
  uint64_t v20 = (uint64_t)v13;
  sub_25A50EEF0();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  char v83 = v19;
  uint64_t v84 = AssociatedTypeWitness;
  uint64_t v80 = AssociatedConformanceWitness;
  sub_25A50FAF0();
  char v22 = *(unsigned int (**)(uint64_t, uint64_t, int *))(v85 + 48);
  v85 += 48;
  uint64_t v79 = v22;
  unsigned int v23 = v22((uint64_t)v13, 1, v7);
  char v24 = (void *)MEMORY[0x263F8EE78];
  if (v23 != 1)
  {
    uint64_t v78 = v20;
    do
    {
      sub_25A439694(v20, (uint64_t)v9, type metadata accessor for TimingRecord);
      BOOL v86 = *(void **)v9;
      sub_25A439640();
      uint64_t v27 = sub_25A50EEA0();
      uint64_t v29 = v28;
      int v30 = sub_25A38A5A4(0, 1, 1, MEMORY[0x263F8EE78]);
      unint64_t v32 = v30[2];
      unint64_t v31 = v30[3];
      if (v32 >= v31 >> 1) {
        int v30 = sub_25A38A5A4((void *)(v31 > 1), v32 + 1, 1, v30);
      }
      v30[2] = v32 + 1;
      uint64_t v33 = &v30[2 * v32];
      v33[4] = v27;
      v33[5] = v29;
      uint64_t v34 = (uint64_t)&v9[v7[6]];
      BOOL v86 = 0;
      unint64_t v87 = 0xE000000000000000;
      sub_25A50E3D0();
      sub_25A50F450();
      uint64_t v35 = v86;
      unint64_t v36 = v87;
      unint64_t v38 = v30[2];
      unint64_t v37 = v30[3];
      if (v38 >= v37 >> 1) {
        int v30 = sub_25A38A5A4((void *)(v37 > 1), v38 + 1, 1, v30);
      }
      v30[2] = v38 + 1;
      uint64_t v39 = &v30[2 * v38];
      v39[4] = v35;
      v39[5] = v36;
      BOOL v86 = 0;
      unint64_t v87 = 0xE000000000000000;
      uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A418A00);
      uint64_t v41 = v81;
      sub_25A436BCC(v34 + *(int *)(v40 + 36), v81);
      sub_25A50E3D0();
      uint64_t v42 = sub_25A50E470();
      uint64_t v43 = *(void (**)(uint64_t, uint64_t))(*(void *)(v42 - 8) + 8);
      v43(v41, v42);
      uint64_t v44 = v82;
      sub_25A436BCC(v34, v82);
      sub_25A50E3D0();
      v43(v44, v42);
      sub_25A50F450();
      sub_25A50EDA0();
      uint64_t v45 = v86;
      unint64_t v46 = v87;
      unint64_t v48 = v30[2];
      unint64_t v47 = v30[3];
      unint64_t v49 = v48 + 1;
      if (v48 >= v47 >> 1) {
        int v30 = sub_25A38A5A4((void *)(v47 > 1), v48 + 1, 1, v30);
      }
      v30[2] = v49;
      int v50 = &v30[2 * v48];
      v50[4] = v45;
      v50[5] = v46;
      if (v9[16])
      {
        uint64_t v51 = 0;
        unint64_t v52 = 0xE000000000000000;
      }
      else
      {
        BOOL v86 = (void *)*((void *)v9 + 1);
        uint64_t v51 = sub_25A50EEA0();
        unint64_t v52 = v53;
        unint64_t v49 = v30[2];
      }
      unint64_t v54 = v30[3];
      unint64_t v55 = v49 + 1;
      if (v49 >= v54 >> 1) {
        int v30 = sub_25A38A5A4((void *)(v54 > 1), v49 + 1, 1, v30);
      }
      v30[2] = v55;
      uint64_t v56 = &v30[2 * v49];
      v56[4] = v51;
      v56[5] = v52;
      uint64_t v57 = &v9[v7[7]];
      uint64_t v59 = *(void *)v57;
      uint64_t v58 = *((void *)v57 + 1);
      unint64_t v60 = v30[3];
      int64_t v61 = v49 + 2;
      swift_bridgeObjectRetain();
      if (v55 >= v60 >> 1) {
        int v30 = sub_25A38A5A4((void *)(v60 > 1), v61, 1, v30);
      }
      v30[2] = v61;
      uint64_t v62 = &v30[2 * v55];
      v62[4] = v59;
      v62[5] = v58;
      int64_t v63 = &v9[v7[9]];
      uint64_t v64 = *((void *)v63 + 1);
      if (v64) {
        uint64_t v65 = *(void *)v63;
      }
      else {
        uint64_t v65 = 0;
      }
      if (v64) {
        unint64_t v66 = *((void *)v63 + 1);
      }
      else {
        unint64_t v66 = 0xE000000000000000;
      }
      unint64_t v67 = v30[2];
      unint64_t v68 = v30[3];
      swift_bridgeObjectRetain();
      if (v67 >= v68 >> 1) {
        int v30 = sub_25A38A5A4((void *)(v68 > 1), v67 + 1, 1, v30);
      }
      v30[2] = v67 + 1;
      char v69 = &v30[2 * v67];
      v69[4] = v65;
      v69[5] = v66;
      BOOL v86 = v30;
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A415DC0);
      sub_25A3A108C();
      uint64_t v70 = sub_25A50EAD0();
      uint64_t v72 = v71;
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        char v24 = sub_25A38A5A4(0, v24[2] + 1, 1, v24);
      }
      unint64_t v74 = v24[2];
      unint64_t v73 = v24[3];
      if (v74 >= v73 >> 1) {
        char v24 = sub_25A38A5A4((void *)(v73 > 1), v74 + 1, 1, v24);
      }
      uint64_t v24[2] = v74 + 1;
      unint64_t v75 = &v24[2 * v74];
      v75[4] = v70;
      v75[5] = v72;
      sub_25A4396FC((uint64_t)v9, type metadata accessor for TimingRecord);
      uint64_t v20 = v78;
      sub_25A50FAF0();
    }
    while (v79(v20, 1, v7) != 1);
  }
  (*(void (**)(char *, uint64_t))(v77 + 8))(v83, v84);
  BOOL v86 = v24;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415DC0);
  sub_25A3A108C();
  uint64_t v25 = sub_25A50EAD0();
  swift_bridgeObjectRelease();
  return v25;
}

uint64_t Collection<>.filterWithinRange(_:)(uint64_t a1, uint64_t a2)
{
  MEMORY[0x270FA5388](a1);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(&v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)], v2, a2);
  uint64_t v9 = a1;
  return sub_25A50EFA0();
}

uint64_t sub_25A4387CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A418A00);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)v14 - v8;
  uint64_t v10 = a1 + *(int *)(type metadata accessor for TimingRecord(0) + 24);
  char v11 = _s20PreviewsFoundationOS12TimingRecordV5PointV1loiySbAE_AEtFZ_0();
  sub_25A436650(v10, (uint64_t)v9);
  sub_25A436650(a2, (uint64_t)v7);
  if (v11) {
    char v12 = 0;
  }
  else {
    char v12 = _s20PreviewsFoundationOS12TimingRecordV5PointV1loiySbAE_AEtFZ_0() ^ 1;
  }
  sub_25A384BCC((uint64_t)v7, &qword_26A418A00);
  sub_25A384BCC((uint64_t)v9, &qword_26A418A00);
  return v12 & 1;
}

uint64_t Collection<>.totalRange.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v15 = a2;
  uint64_t v16 = a3;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = sub_25A50FDF0();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v14 - v7;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A418A00);
  uint64_t v9 = sub_25A50FF90();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  char v12 = (char *)&v14 - v11;
  MEMORY[0x26113CF80](a1, v4);
  swift_getWitnessTable();
  sub_25A510170();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v17 = v15;
  swift_getWitnessTable();
  Collection<>.totalRange.getter(v9, v16);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_25A438B28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + *(int *)(type metadata accessor for TimingRecord(0) + 24);

  return sub_25A436650(v3, a2);
}

uint64_t Collection<>.totalRange.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v71 = a2;
  uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A418A08);
  uint64_t v3 = MEMORY[0x270FA5388](v69);
  uint64_t v70 = (uint64_t)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v68 = (uint64_t)&v56 - v6;
  uint64_t v64 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](v5);
  int64_t v63 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  int64_t v61 = (char *)&v56 - v9;
  uint64_t v60 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t v62 = AssociatedTypeWitness;
  uint64_t v76 = swift_getAssociatedTypeWitness();
  uint64_t v66 = *(void *)(v76 - 8);
  MEMORY[0x270FA5388](v76);
  unint64_t v75 = (char *)&v56 - v10;
  uint64_t v11 = type metadata accessor for TimingRecord.Point(0);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  unint64_t v74 = (int *)((char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v56 - v15;
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  uint64_t v58 = (uint64_t)&v56 - v18;
  MEMORY[0x270FA5388](v17);
  uint64_t v72 = (uint64_t)&v56 - v19;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A418A28);
  uint64_t v21 = MEMORY[0x270FA5388](v20 - 8);
  unsigned int v23 = (char *)&v56 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v25 = (char *)&v56 - v24;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A418A00);
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  uint64_t v67 = (uint64_t)&v56 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = MEMORY[0x270FA5388](v28);
  unint64_t v32 = (char *)&v56 - v31;
  MEMORY[0x270FA5388](v30);
  uint64_t v34 = (char *)&v56 - v33;
  uint64_t v65 = a1;
  sub_25A50F670();
  uint64_t v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
  uint64_t v59 = v27 + 48;
  if (v35(v25, 1, v26) == 1)
  {
    sub_25A384BCC((uint64_t)v25, &qword_26A418A28);
    sub_25A50E3C0();
    uint64_t v36 = (uint64_t)v74;
    sub_25A50E3C0();
    uint64_t result = _s20PreviewsFoundationOS12TimingRecordV5PointV1loiySbAE_AEtFZ_0();
    if ((result & 1) == 0)
    {
      uint64_t v39 = v68;
      uint64_t v38 = v69;
      uint64_t v40 = v68 + *(int *)(v69 + 48);
      sub_25A439694((uint64_t)v16, v68, type metadata accessor for TimingRecord.Point);
      sub_25A439694(v36, v40, type metadata accessor for TimingRecord.Point);
      uint64_t v41 = v70;
      uint64_t v42 = v70 + *(int *)(v38 + 48);
      sub_25A436BCC(v39, v70);
      sub_25A436BCC(v40, v42);
      uint64_t v43 = v67;
      sub_25A439694(v41, v67, type metadata accessor for TimingRecord.Point);
      sub_25A4396FC(v42, type metadata accessor for TimingRecord.Point);
      uint64_t v44 = v41 + *(int *)(v38 + 48);
      sub_25A439694(v39, v41, type metadata accessor for TimingRecord.Point);
      sub_25A439694(v40, v44, type metadata accessor for TimingRecord.Point);
      uint64_t v45 = (int *)(v26 + 36);
LABEL_7:
      sub_25A439694(v44, v43 + *v45, type metadata accessor for TimingRecord.Point);
      sub_25A4396FC(v41, type metadata accessor for TimingRecord.Point);
      return sub_25A436D60(v43, v71);
    }
    __break(1u);
  }
  else
  {
    sub_25A436D60((uint64_t)v25, (uint64_t)v34);
    sub_25A436BCC((uint64_t)v34, v72);
    uint64_t v46 = *(int *)(v26 + 36);
    unint64_t v74 = (int *)(v26 + 36);
    uint64_t v57 = v34;
    uint64_t v47 = v58;
    sub_25A436BCC((uint64_t)&v34[v46], v58);
    (*(void (**)(char *, unsigned int (*)(char *, uint64_t, uint64_t), uint64_t))(v64 + 16))(v63, v73, v65);
    sub_25A50F6E0();
    sub_25A50EEF0();
    swift_getAssociatedConformanceWitness();
    sub_25A50FAF0();
    unint64_t v73 = v35;
    unsigned int v48 = v35(v23, 1, v26);
    uint64_t v49 = v72;
    if (v48 != 1)
    {
      do
      {
        sub_25A436D60((uint64_t)v23, (uint64_t)v32);
        if (_s20PreviewsFoundationOS12TimingRecordV5PointV1loiySbAE_AEtFZ_0())
        {
          sub_25A4396FC(v49, type metadata accessor for TimingRecord.Point);
          sub_25A436BCC((uint64_t)v32, v49);
        }
        uint64_t v55 = (uint64_t)&v32[*v74];
        if (_s20PreviewsFoundationOS12TimingRecordV5PointV1loiySbAE_AEtFZ_0())
        {
          sub_25A4396FC(v47, type metadata accessor for TimingRecord.Point);
          sub_25A436BCC(v55, v47);
        }
        sub_25A384BCC((uint64_t)v32, &qword_26A418A00);
        sub_25A50FAF0();
      }
      while (v73(v23, 1, v26) != 1);
    }
    (*(void (**)(char *, uint64_t))(v66 + 8))(v75, v76);
    char v50 = _s20PreviewsFoundationOS12TimingRecordV5PointV1loiySbAE_AEtFZ_0();
    uint64_t result = sub_25A384BCC((uint64_t)v57, &qword_26A418A00);
    if ((v50 & 1) == 0)
    {
      uint64_t v52 = v68;
      uint64_t v51 = v69;
      uint64_t v53 = v68 + *(int *)(v69 + 48);
      sub_25A439694(v49, v68, type metadata accessor for TimingRecord.Point);
      sub_25A439694(v47, v53, type metadata accessor for TimingRecord.Point);
      uint64_t v41 = v70;
      uint64_t v54 = v70 + *(int *)(v51 + 48);
      sub_25A436BCC(v52, v70);
      sub_25A436BCC(v53, v54);
      uint64_t v43 = v67;
      sub_25A439694(v41, v67, type metadata accessor for TimingRecord.Point);
      sub_25A4396FC(v54, type metadata accessor for TimingRecord.Point);
      uint64_t v44 = v41 + *(int *)(v51 + 48);
      sub_25A439694(v52, v41, type metadata accessor for TimingRecord.Point);
      sub_25A439694(v53, v44, type metadata accessor for TimingRecord.Point);
      uint64_t v45 = v74;
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

BOOL _s20PreviewsFoundationOS12TimingRecordV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A418A00);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v28 - v8;
  if (*(void *)a1 != *(void *)a2) {
    return 0;
  }
  char v10 = *(unsigned char *)(a2 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    if (!*(unsigned char *)(a2 + 16)) {
      return 0;
    }
  }
  else
  {
    if (*(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      char v10 = 1;
    }
    if (v10) {
      return 0;
    }
  }
  uint64_t v11 = (int *)type metadata accessor for TimingRecord(0);
  uint64_t v12 = v11[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  char v15 = _s20PreviewsFoundationOS12TimingRecordV5PointV2eeoiySbAE_AEtFZ_0();
  sub_25A436650(v13, (uint64_t)v9);
  sub_25A436650(v14, (uint64_t)v7);
  if ((v15 & 1) == 0)
  {
    sub_25A384BCC((uint64_t)v7, &qword_26A418A00);
    sub_25A384BCC((uint64_t)v9, &qword_26A418A00);
    return 0;
  }
  char v16 = _s20PreviewsFoundationOS12TimingRecordV5PointV2eeoiySbAE_AEtFZ_0();
  sub_25A384BCC((uint64_t)v7, &qword_26A418A00);
  sub_25A384BCC((uint64_t)v9, &qword_26A418A00);
  if ((v16 & 1) == 0 || *(void *)(a1 + v11[7] + 40) != *(void *)(a2 + v11[7] + 40)) {
    return 0;
  }
  uint64_t v17 = v11[8];
  uint64_t v18 = (void *)(a1 + v17);
  char v19 = *(unsigned char *)(a1 + v17 + 8);
  uint64_t v20 = (void *)(a2 + v17);
  int v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if (v19)
  {
    if (!v21) {
      return 0;
    }
  }
  else
  {
    if (*v18 != *v20) {
      LOBYTE(v21) = 1;
    }
    if (v21) {
      return 0;
    }
  }
  uint64_t v23 = v11[9];
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = *(void *)(a1 + v23 + 8);
  uint64_t v26 = (void *)(a2 + v23);
  uint64_t v27 = v26[1];
  if (!v25) {
    return !v27;
  }
  return v27 && (*v24 == *v26 && v25 == v27 || (sub_25A510370() & 1) != 0);
}

unint64_t sub_25A439640()
{
  unint64_t result = qword_26A418A18;
  if (!qword_26A418A18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A418A18);
  }
  return result;
}

uint64_t sub_25A439694(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_25A4396FC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_25A43975C(uint64_t a1)
{
  return sub_25A4387CC(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_25A43977C()
{
  return sub_25A4397C4(&qword_26A418A30, (void (*)(uint64_t))type metadata accessor for TimingRecord);
}

uint64_t sub_25A4397C4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_25A439810()
{
  unint64_t result = qword_26A418A38;
  if (!qword_26A418A38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A418A38);
  }
  return result;
}

unint64_t sub_25A439868()
{
  unint64_t result = qword_26A418A40;
  if (!qword_26A418A40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A418A40);
  }
  return result;
}

uint64_t sub_25A4398BC()
{
  return sub_25A4397C4(&qword_26A418A48, (void (*)(uint64_t))type metadata accessor for TimingRecord.Point);
}

void *initializeBufferWithCopyOfBuffer for TimingRecord(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v25 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v8 = a3[6];
    uint64_t v9 = a1 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    uint64_t v11 = sub_25A50E470();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
    v12(v9, v10, v11);
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A418A00);
    v12(v9 + *(int *)(v13 + 36), v10 + *(int *)(v13 + 36), v11);
    uint64_t v14 = a3[7];
    uint64_t v15 = a3[8];
    char v16 = (char *)v4 + v14;
    uint64_t v17 = (uint64_t)a2 + v14;
    v16[32] = *(unsigned char *)(v17 + 32);
    *((void *)v16 + 5) = *(void *)(v17 + 40);
    uint64_t v18 = *(void *)(v17 + 8);
    *(void *)char v16 = *(void *)v17;
    *((void *)v16 + 1) = v18;
    *((_OWORD *)v16 + 1) = *(_OWORD *)(v17 + 16);
    v16[48] = *(unsigned char *)(v17 + 48);
    char v19 = (char *)v4 + v15;
    uint64_t v20 = (uint64_t)a2 + v15;
    *(void *)char v19 = *(void *)v20;
    v19[8] = *(unsigned char *)(v20 + 8);
    uint64_t v21 = a3[9];
    uint64_t v22 = (void *)((char *)v4 + v21);
    uint64_t v23 = (uint64_t *)((char *)a2 + v21);
    uint64_t v24 = v23[1];
    void *v22 = *v23;
    v22[1] = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for TimingRecord(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 24);
  uint64_t v3 = sub_25A50E470();
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  v4(v2, v3);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A418A00);
  v4(v2 + *(int *)(v5 + 36), v3);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TimingRecord(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_25A50E470();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  v11(v8, v9, v10);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A418A00);
  v11(v8 + *(int *)(v12 + 36), v9 + *(int *)(v12 + 36), v10);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(unsigned char *)(v15 + 32) = *(unsigned char *)(v16 + 32);
  *(void *)(v15 + 40) = *(void *)(v16 + 40);
  uint64_t v17 = *(void *)(v16 + 8);
  *(void *)uint64_t v15 = *(void *)v16;
  *(void *)(v15 + 8) = v17;
  *(_OWORD *)(v15 + 16) = *(_OWORD *)(v16 + 16);
  *(unsigned char *)(v15 + 48) = *(unsigned char *)(v16 + 48);
  uint64_t v18 = a1 + v14;
  uint64_t v19 = a2 + v14;
  *(void *)uint64_t v18 = *(void *)v19;
  *(unsigned char *)(v18 + 8) = *(unsigned char *)(v19 + 8);
  uint64_t v20 = a3[9];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (void *)(a2 + v20);
  uint64_t v23 = v22[1];
  *uint64_t v21 = *v22;
  v21[1] = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TimingRecord(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_25A50E470();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24);
  v11(v8, v9, v10);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A418A00);
  v11(v8 + *(int *)(v12 + 36), v9 + *(int *)(v12 + 36), v10);
  uint64_t v13 = a3[7];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(void *)uint64_t v14 = *(void *)(a2 + v13);
  *(void *)(v14 + 8) = *(void *)(a2 + v13 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v14 + 16) = *(void *)(v15 + 16);
  *(void *)(v14 + 24) = *(void *)(v15 + 24);
  *(unsigned char *)(v14 + 32) = *(unsigned char *)(v15 + 32);
  *(void *)(v14 + 40) = *(void *)(v15 + 40);
  *(unsigned char *)(v14 + 48) = *(unsigned char *)(v15 + 48);
  uint64_t v16 = a3[8];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = (uint64_t *)(a2 + v16);
  uint64_t v19 = *v18;
  *(unsigned char *)(v17 + 8) = *((unsigned char *)v18 + 8);
  *(void *)uint64_t v17 = v19;
  uint64_t v20 = a3[9];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (void *)(a2 + v20);
  *uint64_t v21 = *v22;
  v21[1] = v22[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for TimingRecord(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_25A50E470();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A418A00);
  v11(v8 + *(int *)(v12 + 36), v9 + *(int *)(v12 + 36), v10);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = (long long *)(a2 + v13);
  *(unsigned char *)(v15 + 48) = *((unsigned char *)v16 + 48);
  long long v17 = v16[2];
  long long v18 = *v16;
  *(_OWORD *)(v15 + 16) = v16[1];
  *(_OWORD *)(v15 + 32) = v17;
  *(_OWORD *)uint64_t v15 = v18;
  uint64_t v19 = a1 + v14;
  uint64_t v20 = a2 + v14;
  *(unsigned char *)(v19 + 8) = *(unsigned char *)(v20 + 8);
  *(void *)uint64_t v19 = *(void *)v20;
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithTake for TimingRecord(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_25A50E470();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40);
  v11(v8, v9, v10);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A418A00);
  v11(v8 + *(int *)(v12 + 36), v9 + *(int *)(v12 + 36), v10);
  uint64_t v13 = a3[7];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = *(void *)(a2 + v13 + 8);
  *(void *)uint64_t v14 = *(void *)(a2 + v13);
  *(void *)(v14 + 8) = v16;
  swift_bridgeObjectRelease();
  *(_OWORD *)(v14 + 16) = *(_OWORD *)(v15 + 16);
  *(unsigned char *)(v14 + 32) = *(unsigned char *)(v15 + 32);
  *(void *)(v14 + 40) = *(void *)(v15 + 40);
  *(unsigned char *)(v14 + 48) = *(unsigned char *)(v15 + 48);
  uint64_t v17 = a3[8];
  uint64_t v18 = a3[9];
  uint64_t v19 = a1 + v17;
  uint64_t v20 = a2 + v17;
  *(unsigned char *)(v19 + 8) = *(unsigned char *)(v20 + 8);
  *(void *)uint64_t v19 = *(void *)v20;
  uint64_t v21 = (void *)(a1 + v18);
  uint64_t v22 = (uint64_t *)(a2 + v18);
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  *uint64_t v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TimingRecord(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25A43A04C);
}

uint64_t sub_25A43A04C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A418A00);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 24);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 28) + 8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for TimingRecord(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25A43A12C);
}

uint64_t sub_25A43A12C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&qword_26A418A00);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 24);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 28) + 8) = (a2 - 1);
  }
  return result;
}

void sub_25A43A1F4()
{
  sub_25A43A2AC();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_25A43A2AC()
{
  if (!qword_26A418A60)
  {
    type metadata accessor for TimingRecord.Point(255);
    sub_25A4397C4(&qword_26A418A68, (void (*)(uint64_t))type metadata accessor for TimingRecord.Point);
    unint64_t v0 = sub_25A50EBC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26A418A60);
    }
  }
}

ValueMetadata *type metadata accessor for TimingRecord.ID()
{
  return &type metadata for TimingRecord.ID;
}

uint64_t initializeBufferWithCopyOfBuffer for TimingRecord.Point(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25A50E470();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);

  return v5(a1, a2, v4);
}

uint64_t destroy for TimingRecord.Point(uint64_t a1)
{
  uint64_t v2 = sub_25A50E470();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t initializeWithCopy for TimingRecord.Point(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25A50E470();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for TimingRecord.Point(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25A50E470();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for TimingRecord.Point(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25A50E470();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for TimingRecord.Point(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25A50E470();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for TimingRecord.Point(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25A43A5C4);
}

uint64_t sub_25A43A5C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25A50E470();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for TimingRecord.Point(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25A43A644);
}

uint64_t sub_25A43A644(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25A50E470();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t sub_25A43A6B4()
{
  uint64_t result = sub_25A50E470();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

BOOL static TimingRecordCategory.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 40) == *(void *)(a2 + 40);
}

uint64_t TimingRecordCategory.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TimingRecordCategory.identifier.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t TimingRecordCategory.logsDuration.getter()
{
  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t TimingRecordCategory.init(name:logsDuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10 = sub_25A50FE00();
  uint64_t v12 = v11;
  uint64_t v15 = 0;
  uint64_t result = MEMORY[0x26113F090](&v15, 8);
  uint64_t v14 = v15;
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v12;
  *(void *)(a5 + 16) = a1;
  *(void *)(a5 + 24) = a2;
  *(unsigned char *)(a5 + 32) = a3;
  *(void *)(a5 + 40) = v14;
  *(unsigned char *)(a5 + 48) = a4;
  return result;
}

uint64_t sub_25A43A818()
{
  uint64_t v0 = sub_25A50FE00();
  uint64_t v2 = v1;
  uint64_t v4 = 0;
  uint64_t result = MEMORY[0x26113F090](&v4, 8);
  qword_26A418A80 = v0;
  *(void *)algn_26A418A88 = v2;
  *(void *)&xmmword_26A418A90 = "PreviewServiceNeedsUpdate";
  *((void *)&xmmword_26A418A90 + 1) = 25;
  byte_26A418AA0 = 2;
  qword_26A418AA8 = v4;
  byte_26A418AB0 = 0;
  return result;
}

uint64_t static TimingRecordCategory.previewServiceNeedsUpdateEvent.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_26A4154D0 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_26A418A88;
  char v3 = byte_26A418AA0;
  uint64_t v4 = qword_26A418AA8;
  char v5 = byte_26A418AB0;
  *(void *)a1 = qword_26A418A80;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = xmmword_26A418A90;
  *(unsigned char *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = v4;
  *(unsigned char *)(a1 + 48) = v5;

  return swift_bridgeObjectRetain();
}

uint64_t sub_25A43A934()
{
  uint64_t v0 = sub_25A50FE00();
  uint64_t v2 = v1;
  uint64_t v4 = 0;
  uint64_t result = MEMORY[0x26113F090](&v4, 8);
  qword_26A418AB8 = v0;
  unk_26A418AC0 = v2;
  *(void *)&xmmword_26A418AC8 = "PreviewUpdateSession";
  *((void *)&xmmword_26A418AC8 + 1) = 20;
  byte_26A418AD8 = 2;
  qword_26A418AE0 = v4;
  byte_26A418AE8 = 1;
  return result;
}

uint64_t static TimingRecordCategory.previewUpdateSession.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_26A4154D8 != -1) {
    swift_once();
  }
  uint64_t v2 = unk_26A418AC0;
  char v3 = byte_26A418AD8;
  uint64_t v4 = qword_26A418AE0;
  char v5 = byte_26A418AE8;
  *(void *)a1 = qword_26A418AB8;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = xmmword_26A418AC8;
  *(unsigned char *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = v4;
  *(unsigned char *)(a1 + 48) = v5;

  return swift_bridgeObjectRetain();
}

uint64_t sub_25A43AA54()
{
  uint64_t v0 = sub_25A50FE00();
  uint64_t v2 = v1;
  uint64_t v4 = 0;
  uint64_t result = MEMORY[0x26113F090](&v4, 8);
  qword_26A418AF0 = v0;
  *(void *)algn_26A418AF8 = v2;
  *(void *)&xmmword_26A418B00 = "MakeBuildGraph";
  *((void *)&xmmword_26A418B00 + 1) = 14;
  byte_26A418B10 = 2;
  qword_26A418B18 = v4;
  byte_26A418B20 = 1;
  return result;
}

uint64_t static TimingRecordCategory.makeBuildGraph.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_26A4154E0 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_26A418AF8;
  char v3 = byte_26A418B10;
  uint64_t v4 = qword_26A418B18;
  char v5 = byte_26A418B20;
  *(void *)a1 = qword_26A418AF0;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = xmmword_26A418B00;
  *(unsigned char *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = v4;
  *(unsigned char *)(a1 + 48) = v5;

  return swift_bridgeObjectRetain();
}

uint64_t sub_25A43AB74()
{
  uint64_t v0 = sub_25A50FE00();
  uint64_t v2 = v1;
  uint64_t v4 = 0;
  uint64_t result = MEMORY[0x26113F090](&v4, 8);
  qword_26A418B28 = v0;
  unk_26A418B30 = v2;
  *(void *)&xmmword_26A418B38 = "WorkspaceBuild";
  *((void *)&xmmword_26A418B38 + 1) = 14;
  byte_26A418B48 = 2;
  qword_26A418B50 = v4;
  byte_26A418B58 = 1;
  return result;
}

uint64_t static TimingRecordCategory.workspaceBuild.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_26A4154E8 != -1) {
    swift_once();
  }
  uint64_t v2 = unk_26A418B30;
  char v3 = byte_26A418B48;
  uint64_t v4 = qword_26A418B50;
  char v5 = byte_26A418B58;
  *(void *)a1 = qword_26A418B28;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = xmmword_26A418B38;
  *(unsigned char *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = v4;
  *(unsigned char *)(a1 + 48) = v5;

  return swift_bridgeObjectRetain();
}

uint64_t sub_25A43AC94()
{
  uint64_t v0 = sub_25A50FE00();
  uint64_t v2 = v1;
  uint64_t v4 = 0;
  uint64_t result = MEMORY[0x26113F090](&v4, 8);
  qword_26A418B60 = v0;
  *(void *)algn_26A418B68 = v2;
  *(void *)&xmmword_26A418B70 = "ThunkBuild";
  *((void *)&xmmword_26A418B70 + 1) = 10;
  byte_26A418B80 = 2;
  qword_26A418B88 = v4;
  byte_26A418B90 = 1;
  return result;
}

uint64_t static TimingRecordCategory.thunkBuild.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_26A4154F0 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_26A418B68;
  char v3 = byte_26A418B80;
  uint64_t v4 = qword_26A418B88;
  char v5 = byte_26A418B90;
  *(void *)a1 = qword_26A418B60;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = xmmword_26A418B70;
  *(unsigned char *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = v4;
  *(unsigned char *)(a1 + 48) = v5;

  return swift_bridgeObjectRetain();
}

uint64_t sub_25A43ADB4()
{
  uint64_t v0 = sub_25A50FE00();
  uint64_t v2 = v1;
  uint64_t v4 = 0;
  uint64_t result = MEMORY[0x26113F090](&v4, 8);
  qword_26A418B98 = v0;
  unk_26A418BA0 = v2;
  *(void *)&xmmword_26A418BA8 = "ThunkLink";
  *((void *)&xmmword_26A418BA8 + 1) = 9;
  byte_26A418BB8 = 2;
  qword_26A418BC0 = v4;
  byte_26A418BC8 = 1;
  return result;
}

uint64_t static TimingRecordCategory.thunkLink.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_26A4154F8 != -1) {
    swift_once();
  }
  uint64_t v2 = unk_26A418BA0;
  char v3 = byte_26A418BB8;
  uint64_t v4 = qword_26A418BC0;
  char v5 = byte_26A418BC8;
  *(void *)a1 = qword_26A418B98;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = xmmword_26A418BA8;
  *(unsigned char *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = v4;
  *(unsigned char *)(a1 + 48) = v5;

  return swift_bridgeObjectRetain();
}

uint64_t sub_25A43AED4()
{
  uint64_t v0 = sub_25A50FE00();
  uint64_t v2 = v1;
  uint64_t v4 = 0;
  uint64_t result = MEMORY[0x26113F090](&v4, 8);
  qword_26A418BD0 = v0;
  *(void *)algn_26A418BD8 = v2;
  *(void *)&xmmword_26A418BE0 = "ThunkCodeSign";
  *((void *)&xmmword_26A418BE0 + 1) = 13;
  byte_26A418BF0 = 2;
  qword_26A418BF8 = v4;
  byte_26A418C00 = 1;
  return result;
}

uint64_t static TimingRecordCategory.thunkCodeSign.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_26A415500 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_26A418BD8;
  char v3 = byte_26A418BF0;
  uint64_t v4 = qword_26A418BF8;
  char v5 = byte_26A418C00;
  *(void *)a1 = qword_26A418BD0;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = xmmword_26A418BE0;
  *(unsigned char *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = v4;
  *(unsigned char *)(a1 + 48) = v5;

  return swift_bridgeObjectRetain();
}

uint64_t sub_25A43AFF4()
{
  uint64_t v0 = sub_25A50FE00();
  uint64_t v2 = v1;
  uint64_t v4 = 0;
  uint64_t result = MEMORY[0x26113F090](&v4, 8);
  qword_26A418C08 = v0;
  unk_26A418C10 = v2;
  *(void *)&xmmword_26A418C18 = "ProductTransfer";
  *((void *)&xmmword_26A418C18 + 1) = 15;
  byte_26A418C28 = 2;
  qword_26A418C30 = v4;
  byte_26A418C38 = 1;
  return result;
}

uint64_t static TimingRecordCategory.productTransfer.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_26A415508 != -1) {
    swift_once();
  }
  uint64_t v2 = unk_26A418C10;
  char v3 = byte_26A418C28;
  uint64_t v4 = qword_26A418C30;
  char v5 = byte_26A418C38;
  *(void *)a1 = qword_26A418C08;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = xmmword_26A418C18;
  *(unsigned char *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = v4;
  *(unsigned char *)(a1 + 48) = v5;

  return swift_bridgeObjectRetain();
}

uint64_t sub_25A43B114()
{
  uint64_t v0 = sub_25A50FE00();
  uint64_t v2 = v1;
  uint64_t v4 = 0;
  uint64_t result = MEMORY[0x26113F090](&v4, 8);
  qword_26A418C40 = v0;
  *(void *)algn_26A418C48 = v2;
  *(void *)&xmmword_26A418C50 = "AllBuiltTargetDescriptions";
  *((void *)&xmmword_26A418C50 + 1) = 26;
  byte_26A418C60 = 2;
  qword_26A418C68 = v4;
  byte_26A418C70 = 1;
  return result;
}

uint64_t static TimingRecordCategory.allBuiltTargetDescriptions.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_26A415510 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_26A418C48;
  char v3 = byte_26A418C60;
  uint64_t v4 = qword_26A418C68;
  char v5 = byte_26A418C70;
  *(void *)a1 = qword_26A418C40;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = xmmword_26A418C50;
  *(unsigned char *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = v4;
  *(unsigned char *)(a1 + 48) = v5;

  return swift_bridgeObjectRetain();
}

uint64_t sub_25A43B234()
{
  uint64_t v0 = sub_25A50FE00();
  uint64_t v2 = v1;
  uint64_t v4 = 0;
  uint64_t result = MEMORY[0x26113F090](&v4, 8);
  qword_26A418C78 = v0;
  unk_26A418C80 = v2;
  *(void *)&xmmword_26A418C88 = "IDEBuiltTargetDescriptionRequest";
  *((void *)&xmmword_26A418C88 + 1) = 32;
  byte_26A418C98 = 2;
  qword_26A418CA0 = v4;
  byte_26A418CA8 = 1;
  return result;
}

uint64_t static TimingRecordCategory.ideBuiltTargetDescriptionRequest.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_26A415518 != -1) {
    swift_once();
  }
  uint64_t v2 = unk_26A418C80;
  char v3 = byte_26A418C98;
  uint64_t v4 = qword_26A418CA0;
  char v5 = byte_26A418CA8;
  *(void *)a1 = qword_26A418C78;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = xmmword_26A418C88;
  *(unsigned char *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = v4;
  *(unsigned char *)(a1 + 48) = v5;

  return swift_bridgeObjectRetain();
}

uint64_t sub_25A43B354()
{
  uint64_t v0 = sub_25A50FE00();
  uint64_t v2 = v1;
  uint64_t v4 = 0;
  uint64_t result = MEMORY[0x26113F090](&v4, 8);
  qword_26A418CB0 = v0;
  *(void *)algn_26A418CB8 = v2;
  *(void *)&xmmword_26A418CC0 = "ProcessBuiltTargetDescription";
  *((void *)&xmmword_26A418CC0 + 1) = 29;
  byte_26A418CD0 = 2;
  qword_26A418CD8 = v4;
  byte_26A418CE0 = 1;
  return result;
}

uint64_t static TimingRecordCategory.processBuiltTargetDescription.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_26A415520 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_26A418CB8;
  char v3 = byte_26A418CD0;
  uint64_t v4 = qword_26A418CD8;
  char v5 = byte_26A418CE0;
  *(void *)a1 = qword_26A418CB0;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = xmmword_26A418CC0;
  *(unsigned char *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = v4;
  *(unsigned char *)(a1 + 48) = v5;

  return swift_bridgeObjectRetain();
}

uint64_t sub_25A43B474()
{
  uint64_t v0 = sub_25A50FE00();
  uint64_t v2 = v1;
  uint64_t v4 = 0;
  uint64_t result = MEMORY[0x26113F090](&v4, 8);
  qword_26A418CE8 = v0;
  unk_26A418CF0 = v2;
  *(void *)&xmmword_26A418CF8 = "AgentLaunch";
  *((void *)&xmmword_26A418CF8 + 1) = 11;
  byte_26A418D08 = 2;
  qword_26A418D10 = v4;
  byte_26A418D18 = 1;
  return result;
}

uint64_t static TimingRecordCategory.agentLaunch.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_26A415528 != -1) {
    swift_once();
  }
  uint64_t v2 = unk_26A418CF0;
  char v3 = byte_26A418D08;
  uint64_t v4 = qword_26A418D10;
  char v5 = byte_26A418D18;
  *(void *)a1 = qword_26A418CE8;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = xmmword_26A418CF8;
  *(unsigned char *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = v4;
  *(unsigned char *)(a1 + 48) = v5;

  return swift_bridgeObjectRetain();
}

uint64_t sub_25A43B594()
{
  uint64_t v0 = sub_25A50FE00();
  uint64_t v2 = v1;
  uint64_t v4 = 0;
  uint64_t result = MEMORY[0x26113F090](&v4, 8);
  qword_26A418D20 = v0;
  *(void *)algn_26A418D28 = v2;
  *(void *)&xmmword_26A418D30 = "LoadTargetDescriptions";
  *((void *)&xmmword_26A418D30 + 1) = 22;
  byte_26A418D40 = 2;
  qword_26A418D48 = v4;
  byte_26A418D50 = 1;
  return result;
}

uint64_t static TimingRecordCategory.loadTargetDescriptions.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_26A415530 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_26A418D28;
  char v3 = byte_26A418D40;
  uint64_t v4 = qword_26A418D48;
  char v5 = byte_26A418D50;
  *(void *)a1 = qword_26A418D20;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = xmmword_26A418D30;
  *(unsigned char *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = v4;
  *(unsigned char *)(a1 + 48) = v5;

  return swift_bridgeObjectRetain();
}

uint64_t sub_25A43B6B4()
{
  uint64_t v0 = sub_25A50FE00();
  uint64_t v2 = v1;
  uint64_t v4 = 0;
  uint64_t result = MEMORY[0x26113F090](&v4, 8);
  qword_26A418D58 = v0;
  unk_26A418D60 = v2;
  *(void *)&xmmword_26A418D68 = "UpdateTargetDescriptions";
  *((void *)&xmmword_26A418D68 + 1) = 24;
  byte_26A418D78 = 2;
  qword_26A418D80 = v4;
  byte_26A418D88 = 1;
  return result;
}

uint64_t static TimingRecordCategory.updateTargetDescriptions.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_26A415538 != -1) {
    swift_once();
  }
  uint64_t v2 = unk_26A418D60;
  char v3 = byte_26A418D78;
  uint64_t v4 = qword_26A418D80;
  char v5 = byte_26A418D88;
  *(void *)a1 = qword_26A418D58;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = xmmword_26A418D68;
  *(unsigned char *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = v4;
  *(unsigned char *)(a1 + 48) = v5;

  return swift_bridgeObjectRetain();
}

uint64_t sub_25A43B7D4()
{
  uint64_t v0 = sub_25A50FE00();
  uint64_t v2 = v1;
  uint64_t v4 = 0;
  uint64_t result = MEMORY[0x26113F090](&v4, 8);
  qword_26A418D90 = v0;
  *(void *)algn_26A418D98 = v2;
  *(void *)&xmmword_26A418DA0 = "InitialJITLink";
  *((void *)&xmmword_26A418DA0 + 1) = 14;
  byte_26A418DB0 = 2;
  qword_26A418DB8 = v4;
  byte_26A418DC0 = 1;
  return result;
}

uint64_t static TimingRecordCategory.initialJITLink.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_26A415540 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_26A418D98;
  char v3 = byte_26A418DB0;
  uint64_t v4 = qword_26A418DB8;
  char v5 = byte_26A418DC0;
  *(void *)a1 = qword_26A418D90;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = xmmword_26A418DA0;
  *(unsigned char *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = v4;
  *(unsigned char *)(a1 + 48) = v5;

  return swift_bridgeObjectRetain();
}

uint64_t sub_25A43B8F4()
{
  uint64_t v0 = sub_25A50FE00();
  uint64_t v2 = v1;
  uint64_t v4 = 0;
  uint64_t result = MEMORY[0x26113F090](&v4, 8);
  qword_26A418DC8 = v0;
  unk_26A418DD0 = v2;
  *(void *)&xmmword_26A418DD8 = "ApplyPendingUpdates";
  *((void *)&xmmword_26A418DD8 + 1) = 19;
  byte_26A418DE8 = 2;
  qword_26A418DF0 = v4;
  byte_26A418DF8 = 1;
  return result;
}

uint64_t static TimingRecordCategory.applyPendingUpdates.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_26A415548 != -1) {
    swift_once();
  }
  uint64_t v2 = unk_26A418DD0;
  char v3 = byte_26A418DE8;
  uint64_t v4 = qword_26A418DF0;
  char v5 = byte_26A418DF8;
  *(void *)a1 = qword_26A418DC8;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = xmmword_26A418DD8;
  *(unsigned char *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = v4;
  *(unsigned char *)(a1 + 48) = v5;

  return swift_bridgeObjectRetain();
}

uint64_t sub_25A43BA14()
{
  uint64_t v0 = sub_25A50FE00();
  uint64_t v2 = v1;
  uint64_t v4 = 0;
  uint64_t result = MEMORY[0x26113F090](&v4, 8);
  qword_26A418E00 = v0;
  *(void *)algn_26A418E08 = v2;
  *(void *)&xmmword_26A418E10 = "RunNewInitializers";
  *((void *)&xmmword_26A418E10 + 1) = 18;
  byte_26A418E20 = 2;
  qword_26A418E28 = v4;
  byte_26A418E30 = 1;
  return result;
}

uint64_t static TimingRecordCategory.runNewInitializers.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_26A415550 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_26A418E08;
  char v3 = byte_26A418E20;
  uint64_t v4 = qword_26A418E28;
  char v5 = byte_26A418E30;
  *(void *)a1 = qword_26A418E00;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = xmmword_26A418E10;
  *(unsigned char *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = v4;
  *(unsigned char *)(a1 + 48) = v5;

  return swift_bridgeObjectRetain();
}

uint64_t TimingRecordCategory.hash(into:)()
{
  return sub_25A510520();
}

uint64_t TimingRecordCategory.hashValue.getter()
{
  return sub_25A510530();
}

uint64_t sub_25A43BBA8()
{
  return sub_25A510530();
}

uint64_t sub_25A43BBF0()
{
  return sub_25A510520();
}

uint64_t sub_25A43BC1C()
{
  return sub_25A510530();
}

unint64_t sub_25A43BC64()
{
  unint64_t result = qword_26A418E38;
  if (!qword_26A418E38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A418E38);
  }
  return result;
}

BOOL sub_25A43BCB8(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 40) == *(void *)(a2 + 40);
}

uint64_t initializeWithCopy for TimingRecordCategory(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TimingRecordCategory(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for TimingRecordCategory(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

ValueMetadata *type metadata accessor for TimingRecordCategory()
{
  return &type metadata for TimingRecordCategory;
}

uint64_t sub_25A43BDFC(void **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = (void *)sub_25A4DEBF0(v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  uint64_t result = sub_25A43E354(v5);
  *a1 = v2;
  return result;
}

uint64_t TimingRecordKeeper.__allocating_init()()
{
  uint64_t v0 = type metadata accessor for TimingRecordKeeper.State();
  MEMORY[0x270FA5388](v0);
  uint64_t v2 = (unint64_t *)((char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v3 = swift_allocObject();
  unint64_t *v2 = sub_25A3933E8(MEMORY[0x263F8EE78]);
  _s20PreviewsFoundationOS12TimingRecordV5PointV3nowAEvgZ_0();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A418E48);
  uint64_t v4 = swift_allocObject();
  *(_DWORD *)(v4 + ((*(unsigned int *)(*(void *)v4 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  sub_25A43EE08((uint64_t)v2, v4 + *(void *)(*MEMORY[0x263F8DD00] + *(void *)v4 + 16), (uint64_t (*)(void))type metadata accessor for TimingRecordKeeper.State);
  sub_25A43F7A4((uint64_t)v2, (uint64_t (*)(void))type metadata accessor for TimingRecordKeeper.State);
  *(void *)(v3 + 16) = v4;
  return v3;
}

uint64_t TimingRecordKeeper.init()()
{
  uint64_t v1 = type metadata accessor for TimingRecordKeeper.State();
  MEMORY[0x270FA5388](v1);
  uint64_t v3 = (unint64_t *)((char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t *v3 = sub_25A3933E8(MEMORY[0x263F8EE78]);
  _s20PreviewsFoundationOS12TimingRecordV5PointV3nowAEvgZ_0();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A418E48);
  uint64_t v4 = swift_allocObject();
  *(_DWORD *)(v4 + ((*(unsigned int *)(*(void *)v4 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  sub_25A43EE08((uint64_t)v3, v4 + *(void *)(*MEMORY[0x263F8DD00] + *(void *)v4 + 16), (uint64_t (*)(void))type metadata accessor for TimingRecordKeeper.State);
  sub_25A43F7A4((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for TimingRecordKeeper.State);
  *(void *)(v0 + 16) = v4;
  return v0;
}

uint64_t type metadata accessor for TimingRecordKeeper.State()
{
  uint64_t result = qword_26A418E50;
  if (!qword_26A418E50) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_25A43C198()
{
  uint64_t v0 = type metadata accessor for TimingRecordKeeper.State();
  MEMORY[0x270FA5388](v0);
  uint64_t v2 = (unint64_t *)((char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for TimingRecordKeeper();
  uint64_t v3 = swift_allocObject();
  unint64_t *v2 = sub_25A3933E8(MEMORY[0x263F8EE78]);
  _s20PreviewsFoundationOS12TimingRecordV5PointV3nowAEvgZ_0();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A418E48);
  uint64_t v4 = swift_allocObject();
  *(_DWORD *)(v4 + ((*(unsigned int *)(*(void *)v4 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  sub_25A43EE08((uint64_t)v2, v4 + *(void *)(*MEMORY[0x263F8DD00] + *(void *)v4 + 16), (uint64_t (*)(void))type metadata accessor for TimingRecordKeeper.State);
  uint64_t result = sub_25A43F7A4((uint64_t)v2, (uint64_t (*)(void))type metadata accessor for TimingRecordKeeper.State);
  *(void *)(v3 + 16) = v4;
  qword_26A418E40 = v3;
  return result;
}

uint64_t static TimingRecordKeeper.shared.getter()
{
  if (qword_26A415558 != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t TimingRecordKeeper.log(parent:category:tag:details:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v50 = a6;
  uint64_t v49 = a5;
  uint64_t v59 = a7;
  uint64_t v60 = a3;
  int v9 = a4 & 1;
  uint64_t v10 = sub_25A50E570();
  uint64_t v57 = *(void *)(v10 - 8);
  uint64_t v58 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v54 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for TimingRecord.Point(0);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for TimingRecord(0);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (uint64_t *)((char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = *(void *)a1;
  int v19 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v21 = *(void *)a2;
  unint64_t v20 = *(void *)(a2 + 8);
  uint64_t v22 = *(void *)(a2 + 16);
  uint64_t v23 = *(void *)(a2 + 24);
  int v24 = *(unsigned __int8 *)(a2 + 32);
  uint64_t v25 = *(void *)(a2 + 40);
  LODWORD(a2) = *(unsigned __int8 *)(a2 + 48);
  uint64_t v69 = 0;
  char v70 = 1;
  uint64_t v47 = v18;
  uint64_t v67 = v18;
  int v46 = v19;
  char v68 = v19;
  _s20PreviewsFoundationOS12TimingRecordV5PointV3nowAEvgZ_0();
  uint64_t v45 = v21;
  v63[0] = v21;
  v63[1] = v20;
  uint64_t v56 = v22;
  v63[2] = v22;
  v63[3] = v23;
  uint64_t v55 = v23;
  uint64_t v26 = v49;
  uint64_t v27 = v50;
  int v52 = v24;
  char v64 = v24;
  uint64_t v65 = v25;
  int v53 = a2;
  char v66 = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int v48 = v9;
  TimingRecord.init(id:parent:start:category:tag:details:)(&v69, &v67, (uint64_t)v14, v63, v60, v9, v26, v27, (uint64_t)v17);
  uint64_t v28 = *(void *)(v51 + 16);
  uint64_t v61 = v51;
  uint64_t v62 = v17;
  uint64_t v29 = (uint64_t *)(v28 + *(void *)(*MEMORY[0x263F8DD00] + *(void *)v28 + 16));
  uint64_t v30 = (os_unfair_lock_s *)(v28 + ((*(unsigned int *)(*(void *)v28 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v30);
  sub_25A43ECA4(v29);
  os_unfair_lock_unlock(v30);
  uint64_t v31 = *v17;
  sub_25A43F7A4((uint64_t)v17, type metadata accessor for TimingRecord);
  if (qword_26A415620 != -1) {
    swift_once();
  }
  uint64_t v32 = sub_25A50E5E0();
  __swift_project_value_buffer(v32, (uint64_t)qword_26A419FD8);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v33 = sub_25A50E5C0();
  os_log_type_t v34 = sub_25A50F810();
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v35 = swift_slowAlloc();
    uint64_t v36 = swift_slowAlloc();
    v63[0] = v36;
    *(_DWORD *)uint64_t v35 = 136447234;
    swift_bridgeObjectRetain();
    uint64_t v69 = sub_25A3A36A4(v45, v20, v63);
    sub_25A50FB00();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v35 + 12) = 2050;
    uint64_t v69 = v31;
    sub_25A50FB00();
    *(_WORD *)(v35 + 22) = 2050;
    uint64_t v37 = v47;
    if (v46) {
      uint64_t v37 = 0;
    }
    uint64_t v69 = v37;
    sub_25A50FB00();
    *(_WORD *)(v35 + 32) = 2050;
    uint64_t v38 = v60;
    if (v48) {
      uint64_t v38 = 0;
    }
    uint64_t v69 = v38;
    sub_25A50FB00();
    *(_WORD *)(v35 + 42) = 2080;
    if (v27) {
      uint64_t v39 = v26;
    }
    else {
      uint64_t v39 = 0;
    }
    uint64_t v40 = v31;
    if (v27) {
      unint64_t v41 = v27;
    }
    else {
      unint64_t v41 = 0xE000000000000000;
    }
    swift_bridgeObjectRetain();
    uint64_t v69 = sub_25A3A36A4(v39, v41, v63);
    sub_25A50FB00();
    swift_bridgeObjectRelease_n();
    uint64_t v31 = v40;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25A380000, v33, v34, "%{public}s,%{public}llx,start,%{public}llx,%{public}llu,%s", (uint8_t *)v35, 0x34u);
    swift_arrayDestroy();
    MEMORY[0x26113F070](v36, -1, -1);
    MEMORY[0x26113F070](v35, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  if (v53) {
    sub_25A50F920();
  }
  else {
    sub_25A50F930();
  }
  if (qword_26A4155A0 != -1) {
    swift_once();
  }
  uint64_t v42 = v54;
  sub_25A50E560();
  sub_25A50E550();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v42, v58);
  *uint64_t v59 = v31;
  return result;
}

void TimingRecordKeeper.insert(record:)(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = (uint64_t *)(v5 + *(void *)(*MEMORY[0x263F8DD00] + *(void *)v5 + 16));
  uint64_t v7 = (os_unfair_lock_s *)(v5 + ((*(unsigned int *)(*(void *)v5 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v7);
  sub_25A43F8D0(v6);
  os_unfair_lock_unlock(v7);
  *a2 = *a1;
}

uint64_t sub_25A43CA28(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = type metadata accessor for TimingRecord(0);
  sub_25A43CA90((uint64_t)a3 + *(int *)(v5 + 24));
  sub_25A43CC40(a3);
  swift_release();
  return sub_25A43F4D4(a1);
}

uint64_t sub_25A43CA90(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for TimingRecord.Point(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25A43EE08(a1, (uint64_t)v6, type metadata accessor for TimingRecord.Point);
  sub_25A50E3D0();
  double v8 = v7;
  uint64_t result = sub_25A43F7A4((uint64_t)v6, type metadata accessor for TimingRecord.Point);
  if ((~*(void *)&v8 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v8 <= -9.22337204e18)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v8 >= 9.22337204e18)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  uint64_t v10 = *v2;
  if (*(void *)(*v2 + 16) && (unint64_t v11 = sub_25A409848((uint64_t)v8 >> 6), (v12 & 1) != 0))
  {
    uint64_t v13 = *(void *)(*(void *)(v10 + 56) + 8 * v11);
    swift_retain();
  }
  else
  {
    type metadata accessor for TimingRecordBucket();
    uint64_t v13 = swift_allocObject();
    uint64_t v14 = MEMORY[0x263F8EE78];
    *(void *)(v13 + 16) = sub_25A3934E8(MEMORY[0x263F8EE78]);
    *(void *)(v13 + 24) = v14;
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v17 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    sub_25A3FE6C4(v13, (uint64_t)v8 >> 6, isUniquelyReferenced_nonNull_native);
    uint64_t *v2 = v17;
    swift_bridgeObjectRelease();
  }
  return v13;
}

uint64_t sub_25A43CC40(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for TimingRecord(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4 - 8);
  double v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *a1;
  swift_beginAccess();
  uint64_t v9 = *(void *)(v1 + 16);
  if (!*(void *)(v9 + 16) || (uint64_t v10 = sub_25A4096E8(v8), (v11 & 1) == 0))
  {
    swift_endAccess();
    uint64_t v15 = (unint64_t *)(v2 + 24);
    swift_beginAccess();
    uint64_t v16 = *(void *)(*(void *)(v2 + 24) + 16);
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = *(void *)(v2 + 16);
    *(void *)(v2 + 16) = 0x8000000000000000;
    sub_25A3FE800(v16, v8, isUniquelyReferenced_nonNull_native);
    *(void *)(v2 + 16) = v23;
    swift_bridgeObjectRelease();
    swift_endAccess();
    sub_25A43EE08((uint64_t)a1, (uint64_t)v7, type metadata accessor for TimingRecord);
    swift_beginAccess();
    unint64_t v18 = *(void *)(v2 + 24);
    char v19 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v2 + 24) = v18;
    if ((v19 & 1) == 0)
    {
      unint64_t v18 = sub_25A38B57C(0, *(void *)(v18 + 16) + 1, 1, v18);
      *uint64_t v15 = v18;
    }
    unint64_t v21 = *(void *)(v18 + 16);
    unint64_t v20 = *(void *)(v18 + 24);
    if (v21 >= v20 >> 1)
    {
      unint64_t v18 = sub_25A38B57C(v20 > 1, v21 + 1, 1, v18);
      *uint64_t v15 = v18;
    }
    *(void *)(v18 + 16) = v21 + 1;
    sub_25A43EDA4((uint64_t)v7, v18+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v21);
    return swift_endAccess();
  }
  unint64_t v12 = *(void *)(*(void *)(v9 + 56) + 8 * v10);
  swift_endAccess();
  swift_beginAccess();
  unint64_t v13 = *(void *)(v2 + 24);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v2 + 24) = v13;
  if (result)
  {
    if ((v12 & 0x8000000000000000) == 0) {
      goto LABEL_5;
    }
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t result = sub_25A3C7BA8(v13);
  unint64_t v13 = result;
  *(void *)(v2 + 24) = result;
  if ((v12 & 0x8000000000000000) != 0) {
    goto LABEL_14;
  }
LABEL_5:
  if (v12 < *(void *)(v13 + 16))
  {
    sub_25A43F804((uint64_t)a1, v13+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v12);
    return swift_endAccess();
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t TimingRecordKeeper.markCompleted(id:)(uint64_t *a1)
{
  uint64_t v79 = sub_25A50E570();
  uint64_t v75 = *(void *)(v79 - 8);
  MEMORY[0x270FA5388](v79);
  unint64_t v74 = &v68[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = type metadata accessor for TimingRecord.Point(0);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  double v7 = &v68[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = &v68[-v8];
  uint64_t v10 = type metadata accessor for TimingRecord(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v80 = &v68[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v78 = &v68[-v15];
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v77 = &v68[-v17];
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v76 = &v68[-v19];
  MEMORY[0x270FA5388](v18);
  unint64_t v21 = &v68[-v20];
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A418A20);
  uint64_t v23 = MEMORY[0x270FA5388](v22 - 8);
  uint64_t v25 = &v68[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v23);
  uint64_t v27 = &v68[-v26];
  uint64_t v28 = *a1;
  uint64_t v29 = *(void *)(v1 + 16);
  uint64_t v81 = v1;
  uint64_t v82 = v28;
  uint64_t v72 = v28;
  uint64_t v30 = (uint64_t *)(v29 + *(void *)(*MEMORY[0x263F8DD00] + *(void *)v29 + 16));
  uint64_t v31 = (os_unfair_lock_s *)(v29 + ((*(unsigned int *)(*(void *)v29 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v31);
  sub_25A43ECC0(v30, (uint64_t)v27);
  os_unfair_lock_unlock(v31);
  sub_25A43ECDC((uint64_t)v27, (uint64_t)v25);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v11 + 48))(v25, 1, v10) == 1)
  {
    sub_25A43ED44((uint64_t)v27);
    uint64_t v32 = (uint64_t)v25;
  }
  else
  {
    uint64_t v71 = v27;
    sub_25A43EDA4((uint64_t)v25, (uint64_t)v21);
    uint64_t v73 = v10;
    uint64_t v33 = (uint64_t)&v21[*(int *)(v10 + 24)];
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A418A00);
    sub_25A43EE08(v33 + *(int *)(v34 + 36), (uint64_t)v9, type metadata accessor for TimingRecord.Point);
    sub_25A50E3D0();
    double v36 = v35;
    uint64_t v37 = sub_25A50E470();
    uint64_t v38 = *(void (**)(unsigned char *, uint64_t))(*(void *)(v37 - 8) + 8);
    v38(v9, v37);
    sub_25A43EE08(v33, (uint64_t)v7, type metadata accessor for TimingRecord.Point);
    sub_25A50E3D0();
    double v40 = v39;
    v38(v7, v37);
    uint64_t v41 = (uint64_t)v21;
    if (qword_26A415620 != -1) {
      swift_once();
    }
    uint64_t v42 = sub_25A50E5E0();
    __swift_project_value_buffer(v42, (uint64_t)qword_26A419FD8);
    uint64_t v43 = v76;
    sub_25A43EE08((uint64_t)v21, (uint64_t)v76, type metadata accessor for TimingRecord);
    uint64_t v44 = v77;
    sub_25A43EE08((uint64_t)v21, (uint64_t)v77, type metadata accessor for TimingRecord);
    uint64_t v45 = (uint64_t)v21;
    int v46 = v78;
    sub_25A43EE08(v45, (uint64_t)v78, type metadata accessor for TimingRecord);
    uint64_t v47 = v80;
    sub_25A43EE08(v41, (uint64_t)v80, type metadata accessor for TimingRecord);
    int v48 = sub_25A50E5C0();
    int v49 = sub_25A50F810();
    if (os_log_type_enabled(v48, (os_log_type_t)v49))
    {
      int v69 = v49;
      uint64_t v70 = v41;
      double v50 = v36 - v40;
      uint64_t v51 = swift_slowAlloc();
      uint64_t v52 = swift_slowAlloc();
      v84[0] = v52;
      *(_DWORD *)uint64_t v51 = 136447490;
      uint64_t v53 = v73;
      uint64_t v54 = (uint64_t *)&v43[*(int *)(v73 + 28)];
      uint64_t v55 = (uint64_t)v43;
      uint64_t v56 = *v54;
      unint64_t v57 = v54[1];
      swift_bridgeObjectRetain();
      uint64_t v83 = sub_25A3A36A4(v56, v57, v84);
      sub_25A50FB00();
      swift_bridgeObjectRelease();
      sub_25A43F7A4(v55, type metadata accessor for TimingRecord);
      *(_WORD *)(v51 + 12) = 2050;
      uint64_t v83 = v72;
      sub_25A50FB00();
      *(_WORD *)(v51 + 22) = 2050;
      uint64_t v58 = (uint64_t)v44;
      if (v44[16]) {
        uint64_t v59 = 0;
      }
      else {
        uint64_t v59 = *((void *)v44 + 1);
      }
      sub_25A43F7A4(v58, type metadata accessor for TimingRecord);
      uint64_t v83 = v59;
      sub_25A50FB00();
      *(_WORD *)(v51 + 32) = 2050;
      uint64_t v60 = &v46[*(int *)(v53 + 32)];
      if (v60[8]) {
        uint64_t v61 = 0;
      }
      else {
        uint64_t v61 = *(void *)v60;
      }
      sub_25A43F7A4((uint64_t)v46, type metadata accessor for TimingRecord);
      uint64_t v83 = v61;
      sub_25A50FB00();
      *(_WORD *)(v51 + 42) = 2048;
      uint64_t v83 = *(void *)&v50;
      sub_25A50FB00();
      *(_WORD *)(v51 + 52) = 2080;
      uint64_t v62 = (uint64_t *)&v80[*(int *)(v53 + 36)];
      if (v62[1])
      {
        uint64_t v63 = *v62;
        unint64_t v64 = v62[1];
      }
      else
      {
        uint64_t v63 = 0;
        unint64_t v64 = 0xE000000000000000;
      }
      char v66 = v74;
      uint64_t v65 = v75;
      swift_bridgeObjectRetain();
      uint64_t v83 = sub_25A3A36A4(v63, v64, v84);
      sub_25A50FB00();
      swift_bridgeObjectRelease();
      sub_25A43F7A4((uint64_t)v80, type metadata accessor for TimingRecord);
      _os_log_impl(&dword_25A380000, v48, (os_log_type_t)v69, "%{public}s,%{public}llx,end,%{public}llx,%{public}llu,%fs,%s", (uint8_t *)v51, 0x3Eu);
      swift_arrayDestroy();
      MEMORY[0x26113F070](v52, -1, -1);
      MEMORY[0x26113F070](v51, -1, -1);

      uint64_t v41 = v70;
    }
    else
    {
      sub_25A43F7A4((uint64_t)v46, type metadata accessor for TimingRecord);
      sub_25A43F7A4((uint64_t)v44, type metadata accessor for TimingRecord);
      sub_25A43F7A4((uint64_t)v43, type metadata accessor for TimingRecord);
      sub_25A43F7A4((uint64_t)v47, type metadata accessor for TimingRecord);

      char v66 = v74;
      uint64_t v65 = v75;
    }
    sub_25A50F910();
    if (qword_26A4155A0 != -1) {
      swift_once();
    }
    sub_25A50E560();
    sub_25A50E550();
    (*(void (**)(unsigned char *, uint64_t))(v65 + 8))(v66, v79);
    sub_25A43F7A4(v41, type metadata accessor for TimingRecord);
    uint64_t v32 = (uint64_t)v71;
  }
  return sub_25A43ED44(v32);
}

uint64_t sub_25A43D77C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  double v35 = (uint64_t *)a3;
  uint64_t v5 = type metadata accessor for TimingRecord.Point(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v34 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for TimingRecord(0);
  uint64_t v7 = *(void *)(v36 - 8);
  uint64_t result = MEMORY[0x270FA5388](v36);
  uint64_t v33 = (uint64_t)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v10 = 0;
  uint64_t v37 = a1;
  uint64_t v11 = *a1;
  uint64_t v12 = *a1 + 64;
  uint64_t v13 = 1 << *(unsigned char *)(*a1 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(*a1 + 64);
  int64_t v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      unint64_t v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v18 = v17 | (v10 << 6);
    }
    else
    {
      int64_t v19 = v10 + 1;
      if (__OFADD__(v10, 1))
      {
        __break(1u);
        goto LABEL_29;
      }
      if (v19 >= v16) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v12 + 8 * v19);
      ++v10;
      if (!v20)
      {
        int64_t v10 = v19 + 1;
        if (v19 + 1 >= v16) {
          goto LABEL_26;
        }
        unint64_t v20 = *(void *)(v12 + 8 * v10);
        if (!v20)
        {
          int64_t v10 = v19 + 2;
          if (v19 + 2 >= v16) {
            goto LABEL_26;
          }
          unint64_t v20 = *(void *)(v12 + 8 * v10);
          if (!v20)
          {
            int64_t v21 = v19 + 3;
            if (v21 >= v16)
            {
LABEL_26:
              uint64_t v32 = 1;
              uint64_t v30 = v35;
              goto LABEL_27;
            }
            unint64_t v20 = *(void *)(v12 + 8 * v21);
            if (!v20)
            {
              while (1)
              {
                int64_t v10 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  break;
                }
                if (v10 >= v16) {
                  goto LABEL_26;
                }
                unint64_t v20 = *(void *)(v12 + 8 * v10);
                ++v21;
                if (v20) {
                  goto LABEL_20;
                }
              }
LABEL_29:
              __break(1u);
LABEL_30:
              __break(1u);
              goto LABEL_31;
            }
            int64_t v10 = v21;
          }
        }
      }
LABEL_20:
      unint64_t v15 = (v20 - 1) & v20;
      unint64_t v18 = __clz(__rbit64(v20)) + (v10 << 6);
    }
    uint64_t v22 = *(void *)(*(void *)(v11 + 56) + 8 * v18);
    swift_beginAccess();
    uint64_t v23 = *(void *)(v22 + 16);
    if (*(void *)(v23 + 16))
    {
      uint64_t v24 = sub_25A4096E8(a2);
      if (v25) {
        break;
      }
    }
    uint64_t result = swift_endAccess();
  }
  unint64_t v26 = *(void *)(*(void *)(v23 + 56) + 8 * v24);
  swift_endAccess();
  uint64_t result = swift_beginAccess();
  if ((v26 & 0x8000000000000000) != 0) {
    goto LABEL_30;
  }
  uint64_t v27 = *(void *)(v22 + 24);
  if (v26 < *(void *)(v27 + 16))
  {
    uint64_t v28 = v27
        + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
        + *(void *)(v7 + 72) * v26;
    uint64_t v29 = v33;
    sub_25A43EE08(v28, v33, type metadata accessor for TimingRecord);
    uint64_t v30 = v35;
    sub_25A43EDA4(v29, (uint64_t)v35);
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v31 = (uint64_t)v34;
    _s20PreviewsFoundationOS12TimingRecordV5PointV3nowAEvgZ_0();
    TimingRecord.updateEndTime(_:)(v31);
    sub_25A43F7A4(v31, type metadata accessor for TimingRecord.Point);
    sub_25A43CC40(v30);
    swift_release();
    swift_release();
    uint64_t v32 = 0;
LABEL_27:
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v30, v32, 1, v36);
    return sub_25A43F4D4(v37);
  }
LABEL_31:
  __break(1u);
  return result;
}

void TimingRecordKeeper.record(withID:)(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = (uint64_t *)(v3 + *(void *)(*MEMORY[0x263F8DD00] + *(void *)v3 + 16));
  uint64_t v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(void *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  sub_25A43EE70(v4, a1);
  os_unfair_lock_unlock(v5);
}

uint64_t sub_25A43DB90@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v32 = a3;
  uint64_t v33 = type metadata accessor for TimingRecord(0);
  uint64_t v5 = *(void *)(v33 - 8);
  uint64_t result = MEMORY[0x270FA5388](v33);
  uint64_t v31 = (uint64_t)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v8 = 0;
  uint64_t v9 = *a1;
  uint64_t v10 = *a1 + 64;
  uint64_t v11 = 1 << *(unsigned char *)(*a1 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(*a1 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v8 << 6);
    }
    else
    {
      int64_t v17 = v8 + 1;
      if (__OFADD__(v8, 1))
      {
        __break(1u);
        goto LABEL_29;
      }
      if (v17 >= v14) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v10 + 8 * v17);
      ++v8;
      if (!v18)
      {
        int64_t v8 = v17 + 1;
        if (v17 + 1 >= v14) {
          goto LABEL_26;
        }
        unint64_t v18 = *(void *)(v10 + 8 * v8);
        if (!v18)
        {
          int64_t v8 = v17 + 2;
          if (v17 + 2 >= v14) {
            goto LABEL_26;
          }
          unint64_t v18 = *(void *)(v10 + 8 * v8);
          if (!v18)
          {
            int64_t v19 = v17 + 3;
            if (v19 >= v14)
            {
LABEL_26:
              uint64_t v30 = 1;
              uint64_t v29 = v32;
              return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v29, v30, 1, v33);
            }
            unint64_t v18 = *(void *)(v10 + 8 * v19);
            if (!v18)
            {
              while (1)
              {
                int64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  break;
                }
                if (v8 >= v14) {
                  goto LABEL_26;
                }
                unint64_t v18 = *(void *)(v10 + 8 * v8);
                ++v19;
                if (v18) {
                  goto LABEL_20;
                }
              }
LABEL_29:
              __break(1u);
LABEL_30:
              __break(1u);
              goto LABEL_31;
            }
            int64_t v8 = v19;
          }
        }
      }
LABEL_20:
      unint64_t v13 = (v18 - 1) & v18;
      unint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
    }
    uint64_t v20 = *(void *)(*(void *)(v9 + 56) + 8 * v16);
    swift_beginAccess();
    uint64_t v21 = *(void *)(v20 + 16);
    if (*(void *)(v21 + 16))
    {
      uint64_t v22 = sub_25A4096E8(a2);
      if (v23) {
        break;
      }
    }
    uint64_t result = swift_endAccess();
  }
  unint64_t v24 = *(void *)(*(void *)(v21 + 56) + 8 * v22);
  swift_endAccess();
  uint64_t result = swift_beginAccess();
  if ((v24 & 0x8000000000000000) != 0) {
    goto LABEL_30;
  }
  uint64_t v25 = *(void *)(v20 + 24);
  if (v24 < *(void *)(v25 + 16))
  {
    uint64_t v26 = v25
        + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
        + *(void *)(v5 + 72) * v24;
    uint64_t v27 = v31;
    sub_25A43EE08(v26, v31, type metadata accessor for TimingRecord);
    uint64_t v28 = v27;
    uint64_t v29 = v32;
    sub_25A43EDA4(v28, v32);
    uint64_t v30 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v29, v30, 1, v33);
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t TimingRecordKeeper.gatherRecords()()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = (uint64_t *)(v1 + *(void *)(*MEMORY[0x263F8DD00] + *(void *)v1 + 16));
  uint64_t v3 = (os_unfair_lock_s *)(v1 + ((*(unsigned int *)(*(void *)v1 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v3);
  sub_25A43DEE8(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

uint64_t sub_25A43DEE8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v12 = MEMORY[0x263F8EE78];
  uint64_t v4 = *a1;
  swift_bridgeObjectRetain_n();
  uint64_t v5 = sub_25A399340(v4);
  swift_bridgeObjectRelease();
  uint64_t v11 = v5;
  sub_25A43BDFC(&v11);
  if (v2)
  {
    uint64_t result = swift_release();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = v11[2];
    if (v6)
    {
      uint64_t v7 = 40;
      do
      {
        swift_beginAccess();
        uint64_t v8 = swift_bridgeObjectRetain();
        sub_25A397288(v8);
        v7 += 16;
        --v6;
      }
      while (v6);
      uint64_t result = swift_release();
      uint64_t v10 = v12;
    }
    else
    {
      uint64_t result = swift_release();
      uint64_t v10 = MEMORY[0x263F8EE78];
    }
    *a2 = v10;
  }
  return result;
}

Swift::Void __swiftcall TimingRecordKeeper.pruneNow()()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = (uint64_t *)(v1 + *(void *)(*MEMORY[0x263F8DD00] + *(void *)v1 + 16));
  uint64_t v3 = (os_unfair_lock_s *)(v1 + ((*(unsigned int *)(*(void *)v1 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v3);
  sub_25A43EE8C(v2);

  os_unfair_lock_unlock(v3);
}

uint64_t TimingRecordKeeper.deinit()
{
  swift_release();
  return v0;
}

uint64_t TimingRecordKeeper.__deallocating_deinit()
{
  swift_release();

  return MEMORY[0x270FA0228](v0, 24, 7);
}

uint64_t sub_25A43E0E8()
{
  return sub_25A510530();
}

uint64_t sub_25A43E130()
{
  return sub_25A5104F0();
}

uint64_t sub_25A43E15C()
{
  return sub_25A510530();
}

BOOL sub_25A43E1A0(void *a1, void *a2)
{
  return *a1 < *a2;
}

BOOL sub_25A43E1B4(void *a1, void *a2)
{
  return *a2 >= *a1;
}

BOOL sub_25A43E1C8(void *a1, void *a2)
{
  return *a1 >= *a2;
}

BOOL sub_25A43E1DC(void *a1, void *a2)
{
  return *a2 < *a1;
}

uint64_t sub_25A43E1F0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0228](v0, 32, 7);
}

void *sub_25A43E230(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  if (__src) {
    uint64_t v5 = a2 - (void)__src;
  }
  else {
    uint64_t v5 = 0;
  }
  if (!__dst)
  {
    if (v5 <= 0) {
      return __src;
    }
LABEL_12:
    __src = (void *)sub_25A510140();
    __break(1u);
    return __src;
  }
  if (a4 - (uint64_t)__dst < v5) {
    goto LABEL_12;
  }
  if (__src)
  {
    return memmove(__dst, __src, a2 - (void)__src);
  }
  return __src;
}

uint64_t sub_25A43E2D4(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_25A43E2FC(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4();
  uint64_t v5 = *a1 + 8;
  uint64_t result = sub_25A50FB00();
  *a1 = v5;
  return result;
}

uint64_t sub_25A43E354(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t result = sub_25A510250();
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_136;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v85 = 0;
      uint64_t v86 = *a1;
      for (uint64_t i = 1; i != v3; ++i)
      {
        uint64_t v88 = *(void *)(v86 + 16 * i);
        uint64_t v89 = v85;
        do
        {
          if (v88 >= *(void *)(v86 + v89)) {
            break;
          }
          if (!v86) {
            goto LABEL_140;
          }
          char v90 = (void *)(v86 + v89);
          uint64_t v91 = *(void *)(v86 + v89 + 24);
          *(_OWORD *)(v86 + v89 + 16) = *(_OWORD *)(v86 + v89);
          *char v90 = v88;
          v90[1] = v91;
          v89 -= 16;
        }
        while (v89 != -16);
        v85 += 16;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_145;
  }
  uint64_t v6 = result;
  int v101 = a1;
  if (v3 < 2)
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    __dst = (char *)(MEMORY[0x263F8EE78] + 32);
    if (v3 != 1)
    {
      unint64_t v13 = *(void *)(MEMORY[0x263F8EE78] + 16);
      uint64_t v12 = (char *)MEMORY[0x263F8EE78];
LABEL_102:
      v92 = v12;
      uint64_t v103 = v9;
      if (v13 >= 2)
      {
        uint64_t v93 = *v101;
        do
        {
          unint64_t v94 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_131;
          }
          if (!v93) {
            goto LABEL_144;
          }
          char v95 = v92;
          uint64_t v96 = *(void *)&v92[16 * v94 + 32];
          uint64_t v97 = *(void *)&v92[16 * v13 + 24];
          sub_25A43EA28((char *)(v93 + 16 * v96), (char *)(v93 + 16 * *(void *)&v92[16 * v13 + 16]), v93 + 16 * v97, __dst);
          if (v1) {
            break;
          }
          if (v97 < v96) {
            goto LABEL_132;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            char v95 = sub_25A4DEBB4((uint64_t)v95);
          }
          if (v94 >= *((void *)v95 + 2)) {
            goto LABEL_133;
          }
          uint64_t v98 = &v95[16 * v94 + 32];
          *(void *)uint64_t v98 = v96;
          *((void *)v98 + 1) = v97;
          unint64_t v99 = *((void *)v95 + 2);
          if (v13 > v99) {
            goto LABEL_134;
          }
          memmove(&v95[16 * v13 + 16], &v95[16 * v13 + 32], 16 * (v99 - v13));
          v92 = v95;
          *((void *)v95 + 2) = v99 - 1;
          unint64_t v13 = v99 - 1;
        }
        while (v99 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      *(void *)(v103 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v103 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v7 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A415C48);
    uint64_t v8 = sub_25A50F130();
    *(void *)(v8 + 16) = v7;
    uint64_t v103 = v8;
    __dst = (char *)(v8 + 32);
  }
  uint64_t v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v102 = *a1 + 32;
  uint64_t v100 = *a1 - 16;
  uint64_t v12 = (char *)MEMORY[0x263F8EE78];
  uint64_t v104 = v6;
  uint64_t v105 = v3;
  uint64_t v106 = v11;
  while (1)
  {
    uint64_t v14 = v10++;
    if (v10 < v3)
    {
      uint64_t v15 = *(void *)(v11 + 16 * v10);
      uint64_t v16 = 16 * v14;
      uint64_t v17 = *(void *)(v11 + 16 * v14);
      uint64_t v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        unint64_t v18 = (uint64_t *)(v102 + 16 * v14);
        uint64_t v19 = v15;
        while (1)
        {
          uint64_t v21 = *v18;
          v18 += 2;
          uint64_t v20 = v21;
          if (v15 < v17 == v21 >= v19) {
            break;
          }
          ++v10;
          uint64_t v19 = v20;
          if (v3 == v10)
          {
            uint64_t v10 = v3;
            break;
          }
        }
      }
      if (v15 < v17)
      {
        if (v10 < v14) {
          goto LABEL_137;
        }
        if (v14 < v10)
        {
          uint64_t v22 = 16 * v10;
          uint64_t v23 = v10;
          uint64_t v24 = v14;
          do
          {
            if (v24 != --v23)
            {
              if (!v11) {
                goto LABEL_143;
              }
              uint64_t v25 = v11 + v22;
              uint64_t v26 = *(void *)(v11 + v16);
              uint64_t v27 = *(void *)(v11 + v16 + 8);
              *(_OWORD *)(v11 + v16) = *(_OWORD *)(v11 + v22 - 16);
              *(void *)(v25 - 16) = v26;
              *(void *)(v25 - 8) = v27;
            }
            ++v24;
            v22 -= 16;
            v16 += 16;
          }
          while (v24 < v23);
        }
      }
    }
    if (v10 >= v3) {
      goto LABEL_46;
    }
    if (__OFSUB__(v10, v14)) {
      goto LABEL_135;
    }
    if (v10 - v14 >= v6) {
      goto LABEL_46;
    }
    uint64_t v28 = v14 + v6;
    if (__OFADD__(v14, v6)) {
      goto LABEL_138;
    }
    if (v28 >= v3) {
      uint64_t v28 = v3;
    }
    if (v28 < v14) {
      break;
    }
    if (v10 != v28)
    {
      uint64_t v29 = v100 + 16 * v10;
      do
      {
        uint64_t v30 = *(void *)(v11 + 16 * v10);
        uint64_t v31 = v14;
        uint64_t v32 = v29;
        do
        {
          if (v30 >= *(void *)v32) {
            break;
          }
          if (!v11) {
            goto LABEL_141;
          }
          uint64_t v33 = *(void *)(v32 + 24);
          *(_OWORD *)(v32 + 16) = *(_OWORD *)v32;
          *(void *)uint64_t v32 = v30;
          *(void *)(v32 + 8) = v33;
          v32 -= 16;
          ++v31;
        }
        while (v10 != v31);
        ++v10;
        v29 += 16;
      }
      while (v10 != v28);
      uint64_t v10 = v28;
    }
LABEL_46:
    if (v10 < v14) {
      goto LABEL_130;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v12 = sub_25A4DE9FC(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    unint64_t v35 = *((void *)v12 + 2);
    unint64_t v34 = *((void *)v12 + 3);
    unint64_t v13 = v35 + 1;
    uint64_t v11 = v106;
    if (v35 >= v34 >> 1)
    {
      uint64_t v84 = sub_25A4DE9FC((char *)(v34 > 1), v35 + 1, 1, v12);
      uint64_t v11 = v106;
      uint64_t v12 = v84;
    }
    *((void *)v12 + 2) = v13;
    uint64_t v36 = v12 + 32;
    uint64_t v37 = &v12[16 * v35 + 32];
    *(void *)uint64_t v37 = v14;
    *((void *)v37 + 1) = v10;
    if (v35)
    {
      while (1)
      {
        unint64_t v38 = v13 - 1;
        if (v13 >= 4)
        {
          uint64_t v43 = &v36[16 * v13];
          uint64_t v44 = *((void *)v43 - 8);
          uint64_t v45 = *((void *)v43 - 7);
          BOOL v49 = __OFSUB__(v45, v44);
          uint64_t v46 = v45 - v44;
          if (v49) {
            goto LABEL_119;
          }
          uint64_t v48 = *((void *)v43 - 6);
          uint64_t v47 = *((void *)v43 - 5);
          BOOL v49 = __OFSUB__(v47, v48);
          uint64_t v41 = v47 - v48;
          char v42 = v49;
          if (v49) {
            goto LABEL_120;
          }
          unint64_t v50 = v13 - 2;
          uint64_t v51 = &v36[16 * v13 - 32];
          uint64_t v53 = *(void *)v51;
          uint64_t v52 = *((void *)v51 + 1);
          BOOL v49 = __OFSUB__(v52, v53);
          uint64_t v54 = v52 - v53;
          if (v49) {
            goto LABEL_122;
          }
          BOOL v49 = __OFADD__(v41, v54);
          uint64_t v55 = v41 + v54;
          if (v49) {
            goto LABEL_125;
          }
          if (v55 >= v46)
          {
            uint64_t v73 = &v36[16 * v38];
            uint64_t v75 = *(void *)v73;
            uint64_t v74 = *((void *)v73 + 1);
            BOOL v49 = __OFSUB__(v74, v75);
            uint64_t v76 = v74 - v75;
            if (v49) {
              goto LABEL_129;
            }
            BOOL v66 = v41 < v76;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v67 = *((void *)v12 + 4);
            uint64_t v68 = *((void *)v12 + 5);
            BOOL v49 = __OFSUB__(v68, v67);
            uint64_t v60 = v68 - v67;
            char v61 = v49;
            goto LABEL_77;
          }
          uint64_t v40 = *((void *)v12 + 4);
          uint64_t v39 = *((void *)v12 + 5);
          BOOL v49 = __OFSUB__(v39, v40);
          uint64_t v41 = v39 - v40;
          char v42 = v49;
        }
        if (v42) {
          goto LABEL_121;
        }
        unint64_t v50 = v13 - 2;
        uint64_t v56 = &v36[16 * v13 - 32];
        uint64_t v58 = *(void *)v56;
        uint64_t v57 = *((void *)v56 + 1);
        BOOL v59 = __OFSUB__(v57, v58);
        uint64_t v60 = v57 - v58;
        char v61 = v59;
        if (v59) {
          goto LABEL_124;
        }
        uint64_t v62 = &v36[16 * v38];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        BOOL v49 = __OFSUB__(v63, v64);
        uint64_t v65 = v63 - v64;
        if (v49) {
          goto LABEL_127;
        }
        if (__OFADD__(v60, v65)) {
          goto LABEL_128;
        }
        if (v60 + v65 >= v41)
        {
          BOOL v66 = v41 < v65;
LABEL_83:
          if (v66) {
            unint64_t v38 = v50;
          }
          goto LABEL_85;
        }
LABEL_77:
        if (v61) {
          goto LABEL_123;
        }
        int v69 = &v36[16 * v38];
        uint64_t v71 = *(void *)v69;
        uint64_t v70 = *((void *)v69 + 1);
        BOOL v49 = __OFSUB__(v70, v71);
        uint64_t v72 = v70 - v71;
        if (v49) {
          goto LABEL_126;
        }
        if (v72 < v60) {
          goto LABEL_15;
        }
LABEL_85:
        unint64_t v77 = v38 - 1;
        if (v38 - 1 >= v13)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!v11) {
          goto LABEL_142;
        }
        uint64_t v78 = v12;
        uint64_t v79 = &v36[16 * v77];
        uint64_t v80 = *(void *)v79;
        uint64_t v81 = &v36[16 * v38];
        uint64_t v82 = *((void *)v81 + 1);
        sub_25A43EA28((char *)(v11 + 16 * *(void *)v79), (char *)(v11 + 16 * *(void *)v81), v11 + 16 * v82, __dst);
        if (v1) {
          goto LABEL_93;
        }
        if (v82 < v80) {
          goto LABEL_116;
        }
        if (v38 > *((void *)v78 + 2)) {
          goto LABEL_117;
        }
        *(void *)uint64_t v79 = v80;
        *(void *)&v36[16 * v77 + 8] = v82;
        unint64_t v83 = *((void *)v78 + 2);
        if (v38 >= v83) {
          goto LABEL_118;
        }
        uint64_t v12 = v78;
        unint64_t v13 = v83 - 1;
        memmove(&v36[16 * v38], v81 + 16, 16 * (v83 - 1 - v38));
        *((void *)v78 + 2) = v83 - 1;
        uint64_t v11 = v106;
        if (v83 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_15:
    uint64_t v6 = v104;
    uint64_t v3 = v105;
    if (v10 >= v105)
    {
      uint64_t v9 = v103;
      goto LABEL_102;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  uint64_t result = sub_25A510050();
  __break(1u);
  return result;
}

uint64_t sub_25A43EA28(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 15;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 4;
  uint64_t v24 = __src;
  uint64_t v23 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst) {
        memmove(__dst, a2, 16 * v13);
      }
      uint64_t v16 = &v4[16 * v13];
      uint64_t v22 = v16;
      uint64_t v24 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        uint64_t v17 = (char *)(a3 - 16);
        unint64_t v18 = v6;
        while (1)
        {
          uint64_t v19 = v17 + 16;
          uint64_t v20 = *((void *)v18 - 2);
          v18 -= 16;
          if (*((void *)v16 - 2) >= v20)
          {
            uint64_t v22 = v16 - 16;
            if (v19 < v16 || v17 >= v16 || v19 != v16) {
              *(_OWORD *)uint64_t v17 = *((_OWORD *)v16 - 1);
            }
            unint64_t v18 = v6;
            v16 -= 16;
            if (v6 <= v7) {
              goto LABEL_42;
            }
          }
          else
          {
            if (v19 != v6 || v17 >= v6) {
              *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
            }
            uint64_t v24 = v18;
            if (v18 <= v7) {
              goto LABEL_42;
            }
          }
          v17 -= 16;
          uint64_t v6 = v18;
          if (v16 <= v4) {
            goto LABEL_42;
          }
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst) {
      memmove(__dst, __src, 16 * v10);
    }
    uint64_t v14 = &v4[16 * v10];
    uint64_t v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        if (*(void *)v6 >= *(void *)v4)
        {
          if (v7 != v4) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v4;
          }
          v4 += 16;
          uint64_t v23 = v4;
          uint64_t v15 = v6;
        }
        else
        {
          uint64_t v15 = v6 + 16;
          if (v7 < v6 || v7 >= v15 || v7 != v6) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
          }
        }
        v7 += 16;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      uint64_t v24 = v7;
    }
LABEL_42:
    sub_25A4DEAF8((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  uint64_t result = sub_25A510140();
  __break(1u);
  return result;
}

uint64_t sub_25A43ECA4(uint64_t *a1)
{
  return sub_25A43CA28(a1, *(void *)(v1 + 16), *(uint64_t **)(v1 + 24));
}

uint64_t sub_25A43ECC0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A43D77C(a1, *(void *)(v2 + 24), a2);
}

uint64_t sub_25A43ECDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A418A20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_25A43ED44(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A418A20);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_25A43EDA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TimingRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_25A43EE08(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_25A43EE70@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A43DB90(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_25A43EE8C(uint64_t *a1)
{
  return sub_25A43F4D4(a1);
}

uint64_t type metadata accessor for TimingRecordKeeper()
{
  return self;
}

uint64_t method lookup function for TimingRecordKeeper(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for TimingRecordKeeper);
}

uint64_t dispatch thunk of TimingRecordKeeper.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t type metadata accessor for TimingRecordBucket()
{
  return self;
}

uint64_t *sub_25A43EF28(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    int64_t v8 = (char *)a2 + v6;
    uint64_t v9 = sub_25A50E470();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t sub_25A43F00C(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_25A50E470();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *sub_25A43F084(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_25A50E470();
  int64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

void *sub_25A43F11C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  int64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_25A50E470();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

void *sub_25A43F1B0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_25A50E470();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *sub_25A43F22C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  int64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_25A50E470();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t sub_25A43F2B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25A43F2CC);
}

uint64_t sub_25A43F2CC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_25A50E470();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_25A43F37C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25A43F390);
}

void *sub_25A43F390(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_25A50E470();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_25A43F438()
{
  uint64_t result = sub_25A50E470();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_25A43F4D4(uint64_t *a1)
{
  uint64_t v2 = type metadata accessor for TimingRecord.Point(0);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_25A50E470();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v31 - v10;
  uint64_t v12 = (char *)a1 + *(int *)(type metadata accessor for TimingRecordKeeper.State() + 20);
  sub_25A50E430();
  char v13 = _s20PreviewsFoundationOS12TimingRecordV5PointV1loiySbAE_AEtFZ_0();
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t))(v6 + 8);
  uint64_t result = v14(v11, v5);
  if (v13)
  {
    uint64_t v33 = (void (*)(char *, uint64_t))v14;
    _s20PreviewsFoundationOS12TimingRecordV5PointV3nowAEvgZ_0();
    (*(void (**)(char *, char *, uint64_t))(v6 + 40))(v12, v11, v5);
    sub_25A50E3C0();
    uint64_t v16 = swift_bridgeObjectRetain();
    uint64_t v17 = sub_25A399258(v16);
    swift_bridgeObjectRelease();
    uint64_t v32 = v17;
    uint64_t v18 = v17[2];
    uint64_t v19 = v9;
    if (v18)
    {
      uint64_t v20 = v32 + 4;
      do
      {
        uint64_t v22 = *v20++;
        uint64_t v21 = v22;
        sub_25A50E3C0();
        char v23 = _s20PreviewsFoundationOS12TimingRecordV5PointV1loiySbAE_AEtFZ_0();
        uint64_t v24 = v5;
        v33(v4, v5);
        if (v23)
        {
          uint64_t v25 = v19;
          unint64_t v26 = sub_25A409848(v21);
          if (v27)
          {
            unint64_t v28 = v26;
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v30 = *a1;
            uint64_t v34 = *a1;
            *a1 = 0x8000000000000000;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_25A40FB3C();
              uint64_t v30 = v34;
            }
            sub_25A398AF8(v28, v30);
            *a1 = v30;
            swift_release();
            swift_bridgeObjectRelease();
            uint64_t v19 = v25;
          }
        }
        --v18;
        uint64_t v5 = v24;
      }
      while (v18);
    }
    swift_release();
    return ((uint64_t (*)(char *, uint64_t))v33)(v19, v5);
  }
  return result;
}

uint64_t sub_25A43F7A4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_25A43F804(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TimingRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for TimingRecordBucketID()
{
  return &type metadata for TimingRecordBucketID;
}

unint64_t sub_25A43F87C()
{
  unint64_t result = qword_26A418E60;
  if (!qword_26A418E60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A418E60);
  }
  return result;
}

uint64_t sub_25A43F8D0(uint64_t *a1)
{
  return sub_25A43ECA4(a1);
}

uint64_t WeakArray.init()@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for Weak();
  uint64_t result = sub_25A50F120();
  *a1 = result;
  return result;
}

uint64_t WeakArray.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v13[2] = a2;
  v13[3] = a3;
  v13[4] = a4;
  uint64_t v9 = (char *)type metadata accessor for Weak();
  uint64_t v11 = sub_25A4E8930((void (*)(char *, char *))sub_25A44021C, (uint64_t)v13, a3, v9, MEMORY[0x263F8E628], a4, MEMORY[0x263F8E658], v10);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
  *a5 = v11;
  return result;
}

uint64_t WeakArray.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v8 = a1;
  uint64_t v5 = sub_25A50F1E0();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = WeakArray.init<A>(_:)((uint64_t)&v8, a2, v5, WitnessTable, &v9);
  *a3 = v9;
  return result;
}

uint64_t WeakArray.array.getter()
{
  type metadata accessor for Weak();
  sub_25A50F1E0();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  uint64_t v0 = sub_25A50EF30();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t WeakArray.startIndex.getter()
{
  return 0;
}

void WeakArray.endIndex.getter()
{
  type metadata accessor for Weak();

  JUMPOUT(0x26113D1B0);
}

Swift::Int __swiftcall WeakArray.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

Swift::Int __swiftcall WeakArray.index(before:)(Swift::Int before)
{
  BOOL v1 = __OFSUB__(before, 1);
  Swift::Int result = before - 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

uint64_t WeakArray.subscript.getter()
{
  type metadata accessor for Weak();
  sub_25A50F210();
  swift_beginAccess();
  uint64_t v0 = MEMORY[0x26113F1A0](v2 + 16);
  swift_release();
  return v0;
}

uint64_t sub_25A43FC14(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v3 = *a3;
  type metadata accessor for WeakArray();
  uint64_t v4 = swift_unknownObjectRetain();
  sub_25A4402D0(v4, v3);

  return swift_unknownObjectRelease();
}

uint64_t WeakArray.subscript.setter(uint64_t a1, unint64_t a2)
{
  sub_25A4402D0(a1, a2);

  return swift_unknownObjectRelease();
}

uint64_t (*WeakArray.subscript.modify(uint64_t *a1, uint64_t a2, uint64_t a3))(uint64_t *a1, char a2)
{
  a1[2] = a3;
  a1[3] = v3;
  a1[1] = a2;
  *a1 = WeakArray.subscript.getter();
  return sub_25A43FD20;
}

uint64_t sub_25A43FD20(uint64_t *a1, char a2)
{
  unint64_t v2 = a1[1];
  uint64_t v3 = *a1;
  if (a2)
  {
    uint64_t v4 = swift_unknownObjectRetain();
    sub_25A4402D0(v4, v2);
    swift_unknownObjectRelease();
  }
  else
  {
    sub_25A4402D0(v3, v2);
  }

  return swift_unknownObjectRelease();
}

uint64_t WeakArray.append(_:)()
{
  return sub_25A50F180();
}

uint64_t sub_25A43FE00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F9E068](a1, a2, a3, a4, MEMORY[0x263F8D708]);
}

uint64_t sub_25A43FE0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F9E078](a1, a2, a3, a4, MEMORY[0x263F8D708]);
}

void *sub_25A43FE18@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFSUB__(*result, 1)) {
    __break(1u);
  }
  else {
    *a2 = *result - 1;
  }
  return result;
}

void *sub_25A43FE30(void *result)
{
  if (__OFSUB__(*result, 1)) {
    __break(1u);
  }
  else {
    --*result;
  }
  return result;
}

uint64_t sub_25A43FE48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x263F8D708];

  return MEMORY[0x270F9E068](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_25A43FECC()
{
  swift_getWitnessTable();

  return sub_25A50F580();
}

uint64_t sub_25A43FF50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x263F8D708];

  return MEMORY[0x270F9E078](a1, a2, a3, WitnessTable, v7);
}

void sub_25A43FFC4(void *a1@<X8>)
{
  WeakArray.endIndex.getter();
  *a1 = v2;
}

void (*sub_25A43FFEC(uint64_t **a1))(void *a1)
{
  uint64_t v2 = (uint64_t *)malloc(0x30uLL);
  *a1 = v2;
  uint64_t v3 = sub_25A4400A8(v2);
  v2[4] = v4;
  v2[5] = (uint64_t)v3;
  return sub_25A440060;
}

void sub_25A440060(void *a1)
{
  BOOL v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 40))(*a1);

  free(v1);
}

uint64_t (*sub_25A4400A8(uint64_t *a1))()
{
  *a1 = WeakArray.subscript.getter();
  return sub_25A4400F4;
}

uint64_t sub_25A4400F4()
{
  return swift_unknownObjectRelease();
}

uint64_t sub_25A4400FC(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v3 = MEMORY[0x263F8D708];

  return MEMORY[0x270F9E070](a1, WitnessTable, v3);
}

void sub_25A440168(void *a1@<X8>)
{
  *a1 = *v1;
  a1[1] = 0;
}

uint64_t sub_25A440174(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F9E108](a1, WitnessTable);
}

uint64_t sub_25A4401C8(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F9E128](a1, WitnessTable);
}

uint64_t sub_25A44021C@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for Weak();
  uint64_t result = sub_25A4ED9F8();
  *a1 = result;
  return result;
}

uint64_t sub_25A440270@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1 + 16;
  swift_beginAccess();
  uint64_t result = MEMORY[0x26113F1A0](v3);
  *a2 = result;
  return result;
}

uint64_t sub_25A4402D0(uint64_t a1, unint64_t a2)
{
  type metadata accessor for Weak();
  uint64_t v4 = sub_25A4ED9F8();
  uint64_t v5 = sub_25A50F1E0();
  sub_25A50F110();
  uint64_t v6 = *v2;
  sub_25A474B7C(a2, v6);
  *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 8 * a2 + 0x20) = v4;
  swift_release();

  return nullsub_1(v5);
}

uint64_t sub_25A44037C()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A440398()
{
  return sub_25A440534();
}

unint64_t sub_25A4403B0()
{
  unint64_t result = qword_26A418E68[0];
  if (!qword_26A418E68[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A418E68);
  }
  return result;
}

uint64_t sub_25A440404()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A440468()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A440484()
{
  return sub_25A440534();
}

uint64_t sub_25A44049C()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A440500()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A44051C()
{
  return sub_25A440534();
}

uint64_t sub_25A440534()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A440580@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for WeakArray();
  uint64_t result = WeakArray.subscript.getter();
  *a1 = result;
  return result;
}

uint64_t sub_25A4405E8()
{
  return 8;
}

void *sub_25A4405F4(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t type metadata accessor for WeakArray()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A440624(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static MergeOperation.perform<A>(for:in:)(a1, a2, a5, a3, a6, a4);
}

uint64_t static MergeOperation.perform<A>(for:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = QueryManager.allValues<A>(for:)(a1, a4, a6);
  uint64_t v8 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 24);
  swift_getAssociatedTypeWitness();
  uint64_t v9 = sub_25A50F1E0();
  uint64_t WitnessTable = swift_getWitnessTable();
  v8(&v12, v9, WitnessTable, a3, a5);
  return swift_bridgeObjectRelease();
}

uint64_t static FirstValueMerge.perform<A>(values:)()
{
  return sub_25A50EF90();
}

uint64_t static FirstValueMerge.perform<A>(for:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return QueryManager.firstValue<A>(for:)(a1, a2, a3);
}

uint64_t sub_25A4407A4()
{
  return static FirstValueMerge.perform<A>(values:)();
}

uint64_t sub_25A4407B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return static FirstValueMerge.perform<A>(for:in:)(a1, a2, a3);
}

uint64_t static ConcatenationMerge.perform<A>(values:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_25A50FE90();
  MEMORY[0x270FA5388](v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, a3);
  swift_getAssociatedTypeWitness();
  v10[1] = sub_25A50F120();
  sub_25A50F1E0();
  swift_getWitnessTable();
  sub_25A50FE80();
  swift_getWitnessTable();
  return sub_25A50F200();
}

uint64_t sub_25A4409A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t result = static ConcatenationMerge.perform<A>(values:)(a1, *(void *)(a3 + 16), a2);
  *a4 = result;
  return result;
}

uint64_t static UnionMerge.perform<A>(values:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v11 = &v13[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_25A50FC80();
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  uint64_t v17 = a5;
  sub_25A50EFC0();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v9 + 8))(v11, a2);
}

uint64_t sub_25A440B10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = *(void (**)(char *))(v5 + 16);
  v9((char *)v12 - v10);
  ((void (*)(char *, uint64_t, uint64_t))v9)(v8, a2, a3);
  return sub_25A50FC60();
}

uint64_t sub_25A440C3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static UnionMerge.perform<A>(values:)(a1, *(void *)(a4 + 16), a2, *(void *)(a4 + 24), a3);
}

uint64_t static OrderedUnionMerge.perform<A>(values:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v11 = a6;
  uint64_t v16 = a5;
  uint64_t v17 = 0;
  uint64_t v12 = a1;
  uint64_t v13 = a2;
  uint64_t v14 = a3;
  uint64_t v15 = a4;
  sub_25A50EFC0();
  Swift::Int v6 = v19[0];
  if (v19[0] < 1)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v9 = sub_25A50F120();
    return OrderedSet.init(arrayLiteral:)(v9, AssociatedTypeWitness, v11);
  }
  else
  {
    swift_getAssociatedTypeWitness();
    OrderedSet.init()(v19);
    type metadata accessor for OrderedSet();
    OrderedSet.reserveCapacity(_:)(v6);
    uint64_t v10 = (uint64_t)&v10;
    uint64_t v17 = v19[0];
    uint64_t v18 = v19[1];
    MEMORY[0x270FA5388](v19[0]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_25A50EFB0();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_25A440E1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for OrderedSet();
  return OrderedSet.append<A>(contentsOf:)(a2, v5, a3);
}

uint64_t sub_25A440EA8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t *a4@<X8>)
{
  return static OrderedUnionMerge.perform<A>(values:)(a3[2], a1, a3[3], a2, a3[4], a4);
}

uint64_t static KeyValueMerge.perform<A>(values:)()
{
  swift_getTupleTypeMetadata2();
  sub_25A50F120();
  sub_25A50E900();
  sub_25A50E990();
  sub_25A50EFB0();
  return v1;
}

uint64_t sub_25A440F98()
{
  return sub_25A50E940();
}

uint64_t sub_25A441020@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static KeyValueMerge.perform<A>(values:)();
  *a1 = result;
  return result;
}

uint64_t static SumMerge.perform<A>(values:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v15[0] = a6;
  v15[1] = a1;
  uint64_t v10 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  swift_getAssociatedConformanceWitness();
  sub_25A5103F0();
  sub_25A510340();
  void v15[4] = a2;
  v15[5] = a3;
  v15[6] = a4;
  v15[7] = a5;
  sub_25A50EFC0();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, a2);
}

uint64_t sub_25A441230@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static SumMerge.perform<A>(values:)(a1, *(void *)(a4 + 16), a2, *(void *)(a4 + 24), a3, a5);
}

uint64_t static LogicalOrMerge.perform<A>(values:)()
{
  sub_25A50EFC0();
  return v1;
}

unsigned char *sub_25A4412B0@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X1>, unsigned char *a3@<X8>)
{
  *a3 = (*result | *a2) & 1;
  return result;
}

uint64_t sub_25A4412C8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = static LogicalOrMerge.perform<A>(values:)();
  *a1 = result & 1;
  return result;
}

void static NilMerge.perform<A>(values:)()
{
}

void sub_25A441350()
{
}

uint64_t static FutureMerge.perform<A>(values:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_25A3F4BC8((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/ValueCombiner.swift", 125, 2, 130, 30, (uint64_t)"perform(values:)", 16, 2, 0, a3, AssociatedTypeWitness, a5);
  uint64_t v10 = (void *)swift_allocObject();
  void v10[2] = a2;
  void v10[3] = a3;
  v10[4] = a4;
  v10[5] = a5;
  sub_25A50F1E0();
  uint64_t v11 = swift_getAssociatedTypeWitness();
  long long v14 = 0uLL;
  uint64_t v12 = sub_25A47E74C((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/ValueCombiner.swift", 125, 2, 131, 25, (uint64_t)"perform(values:)", 16, 2, &v14, (uint64_t)sub_25A4416CC, (uint64_t)v10, v11);
  swift_release();
  swift_release();
  sub_25A3EE314(0);
  return v12;
}

uint64_t sub_25A4414CC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = *a1;
  Swift::Int v6 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 24);
  swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_25A50F1E0();
  uint64_t WitnessTable = swift_getWitnessTable();
  return v6(&v10, v7, WitnessTable, a2, a4);
}

uint64_t sub_25A44158C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t result = static FutureMerge.perform<A>(values:)(a1, *(void *)(a4 + 16), a2, *(void *)(a4 + 24), a3);
  *a5 = result;
  return result;
}

uint64_t sub_25A4415C0(uint64_t a1, uint64_t a2)
{
  return sub_25A440B10(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_25A4415E0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = sub_25A50EF00();
  if (__OFADD__(v3, result)) {
    __break(1u);
  }
  else {
    *a2 = v3 + result;
  }
  return result;
}

uint64_t sub_25A44163C(uint64_t a1, uint64_t a2)
{
  return sub_25A440E1C(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_25A441660()
{
  return sub_25A440F98();
}

uint64_t sub_25A441684()
{
  return sub_25A510080();
}

uint64_t sub_25A4416BC()
{
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_25A4416CC(uint64_t *a1)
{
  return sub_25A4414CC(a1, v1[2], v1[3], v1[4]);
}

uint64_t dispatch thunk of static MergeOperation.perform<A>(values:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t dispatch thunk of static MergeOperation.perform<A>(for:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 32))();
}

uint64_t type metadata accessor for FirstValueMerge()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for ConcatenationMerge()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for UnionMerge()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for OrderedUnionMerge()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for KeyValueMerge()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for SumMerge()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for LogicalOrMerge()
{
  return &type metadata for LogicalOrMerge;
}

uint64_t type metadata accessor for NilMerge()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for FutureMerge()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A4417D0@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v1 + 24) - 8) + 16))(a1);
}

uint64_t AnyComparable.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for AnyComparableBoxImpl();
  uint64_t result = sub_25A441880(a1);
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for AnyComparableBoxImpl()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A441880(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v2 + 112) - 8) + 32))(v2 + *(void *)(*(void *)v2 + 128), a1);
  return v2;
}

uint64_t AnyComparable.base.getter()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t static AnyComparable.< infix(_:_:)(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 80))(*a2) & 1;
}

uint64_t static AnyComparable.== infix(_:_:)(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 88))(*a2) & 1;
}

unint64_t sub_25A4419F4()
{
  unint64_t result = qword_26A4192F0[0];
  if (!qword_26A4192F0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A4192F0);
  }
  return result;
}

uint64_t sub_25A441A48(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 80))(*a2) & 1;
}

BOOL sub_25A441A94(void *a1, uint64_t a2)
{
  return ((*(uint64_t (**)(void))(**(void **)a2 + 80))(*a1) & 1) == 0;
}

BOOL sub_25A441AE4(uint64_t a1, void *a2)
{
  return ((*(uint64_t (**)(void))(**(void **)a1 + 80))(*a2) & 1) == 0;
}

uint64_t sub_25A441B34(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 80))(*a1) & 1;
}

uint64_t sub_25A441B80(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 88))(*a2) & 1;
}

ValueMetadata *type metadata accessor for AnyComparable()
{
  return &type metadata for AnyComparable;
}

void sub_25A441BDC()
{
}

void sub_25A441C34()
{
}

void sub_25A441C8C()
{
}

uint64_t type metadata accessor for AnyComparableBox()
{
  return self;
}

uint64_t sub_25A441D08()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_25A441DA8()
{
  type metadata accessor for AnyComparableBoxImpl();
  uint64_t result = swift_dynamicCastClass();
  if (result)
  {
    swift_retain();
    char v1 = sub_25A50EAF0();
    swift_release();
    return v1 & 1;
  }
  return result;
}

uint64_t sub_25A441E9C()
{
  type metadata accessor for AnyComparableBoxImpl();
  uint64_t result = swift_dynamicCastClass();
  if (result)
  {
    swift_retain();
    char v1 = sub_25A50EBE0();
    swift_release();
    return v1 & 1;
  }
  return result;
}

uint64_t sub_25A441F94@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1 + *(void *)(*(void *)v1 + 128);
  uint64_t v3 = *(void *)(*(void *)v1 + 112);
  a1[3] = v3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a1);
  uint64_t v5 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v5(boxed_opaque_existential_1, v2, v3);
}

uint64_t sub_25A442028()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 112) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 128));
}

uint64_t sub_25A442080()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 112) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 128));
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x270FA0228](v0, v1, v2);
}

unint64_t sub_25A442130()
{
  unint64_t result = qword_26A419378[0];
  if (!qword_26A419378[0])
  {
    type metadata accessor for AnyComparableBox();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A419378);
  }
  return result;
}

uint64_t GeneratingSequence.init(from:advancingBy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_25A50FA40();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a4, a1, v8);
  uint64_t result = type metadata accessor for GeneratingSequence();
  uint64_t v10 = (void *)(a4 + *(int *)(result + 28));
  *uint64_t v10 = a2;
  v10[1] = a3;
  return result;
}

uint64_t type metadata accessor for GeneratingSequence()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A442238@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for GeneratingSequence.Iterator.State();
  uint64_t v7 = sub_25A50FA40();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = &v15[-v9];
  uint64_t v16 = a2;
  uint64_t v11 = sub_25A50FA40();
  sub_25A3F60F8((void (*)(char *, char *))sub_25A4442F0, (uint64_t)v15, MEMORY[0x263F8E628], v6, v12, (uint64_t)v10);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(a1, v11);
  uint64_t v13 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v6) != 1) {
    return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v13 + 32))(a3, v10, v6);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(a3, 1, 1, a2);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_25A442450@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v21 = a3;
  uint64_t v9 = sub_25A50FA40();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v20 - v11;
  uint64_t v13 = type metadata accessor for GeneratingSequence.Iterator.State();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v20 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  sub_25A442238((uint64_t)v12, a4, (uint64_t)v16);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, v9);
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(a5, v16, v13);
  uint64_t result = type metadata accessor for GeneratingSequence.Iterator();
  uint64_t v18 = (void *)(a5 + *(int *)(result + 28));
  uint64_t v19 = v21;
  void *v18 = a2;
  v18[1] = v19;
  return result;
}

uint64_t GeneratingSequence.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = sub_25A50FA40();
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v14 - v7;
  (*(void (**)(char *, uint64_t))(v9 + 16))((char *)&v14 - v7, v2);
  uint64_t v10 = (uint64_t *)(v2 + *(int *)(a1 + 28));
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  swift_retain();
  return sub_25A442450((uint64_t)v8, v11, v12, v5, a2);
}

uint64_t sub_25A442710@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  GeneratingSequence.makeIterator()(a1, a2);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8);

  return v4(v2, a1);
}

uint64_t GeneratingSequence.Iterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = sub_25A50FA40();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v20 - v8;
  uint64_t v10 = type metadata accessor for GeneratingSequence.Iterator.State();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v20 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v20 - v15, v3, v10);
  uint64_t v17 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, v6) == 1)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
    uint64_t v18 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(a2, v16, v6);
    (*(void (**)(uint64_t))(v3 + *(int *)(a1 + 28)))(a2);
    sub_25A442238((uint64_t)v9, v6, (uint64_t)v14);
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 40))(v3, v14, v10);
    uint64_t v18 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(a2, v18, 1, v6);
}

uint64_t type metadata accessor for GeneratingSequence.Iterator.State()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A4429D4()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A4429F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25A442A44(a1, a2, a3, MEMORY[0x263F8D8F0]);
}

uint64_t sub_25A442A2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25A442A44(a1, a2, a3, (uint64_t (*)(uint64_t, void))type metadata accessor for GeneratingSequence.Iterator.State);
}

uint64_t sub_25A442A44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void))
{
  uint64_t result = a4(319, *(void *)(a1 + 16));
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_25A442AE4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v7 = *(void *)(v6 + 64);
  }
  else {
    size_t v7 = *(void *)(v6 + 64) + 1;
  }
  int v8 = *(_DWORD *)(v6 + 80);
  if ((v8 & 0x1000F8) != 0 || ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((unsigned __int16)((v8 & 0xF8) + 23) & (unsigned __int16)~(v8 & 0xF8) & 0x1F8));
  }
  else
  {
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
    {
      memcpy(a1, a2, v7);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    }
    uint64_t v11 = (void *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v12 = v11[1];
    uint64_t v13 = (void *)(((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v13 = *v11;
    v13[1] = v12;
  }
  swift_retain();
  return a1;
}

uint64_t sub_25A442C50(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 1, v3)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }

  return swift_release();
}

char *sub_25A442D28(char *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    int v7 = *(_DWORD *)(v6 + 84);
    size_t v8 = *(void *)(v6 + 64);
    if (v7) {
      size_t v9 = v8;
    }
    else {
      size_t v9 = v8 + 1;
    }
    memcpy(a1, a2, v9);
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    uint64_t v11 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
    uint64_t v10 = v6 + 56;
    v11(a1, 0, 1, v5);
    int v7 = *(_DWORD *)(v10 + 28);
    size_t v8 = *(void *)(v10 + 8);
  }
  if (v7) {
    size_t v12 = v8;
  }
  else {
    size_t v12 = v8 + 1;
  }
  size_t v13 = v12 + 7;
  unint64_t v14 = (unint64_t)&a1[v13];
  uint64_t v15 = (uint64_t *)(((unint64_t)a2 + v13) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  uint64_t v18 = (void *)(v14 & 0xFFFFFFFFFFFFFFF8);
  void *v18 = v17;
  v18[1] = v16;
  swift_retain();
  return a1;
}

void *sub_25A442E50(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  int v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_12;
    }
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  if (v10) {
    size_t v12 = v11;
  }
  else {
    size_t v12 = v11 + 1;
  }
  memcpy(a1, a2, v12);
LABEL_12:
  if (*(_DWORD *)(v6 + 84)) {
    uint64_t v13 = *(void *)(v6 + 64);
  }
  else {
    uint64_t v13 = *(void *)(v6 + 64) + 1;
  }
  uint64_t v14 = v13 + 7;
  uint64_t v15 = (void *)(((unint64_t)a1 + v14) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v16 = (void *)(((unint64_t)a2 + v14) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v17 = v16[1];
  *uint64_t v15 = *v16;
  v15[1] = v17;
  swift_retain();
  swift_release();
  return a1;
}

void *sub_25A443004(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    int v7 = *(_DWORD *)(v6 + 84);
    size_t v8 = *(void *)(v6 + 64);
    if (v7) {
      size_t v9 = v8;
    }
    else {
      size_t v9 = v8 + 1;
    }
    memcpy(a1, a2, v9);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    size_t v11 = *(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56);
    uint64_t v10 = v6 + 56;
    v11(a1, 0, 1, v5);
    int v7 = *(_DWORD *)(v10 + 28);
    size_t v8 = *(void *)(v10 + 8);
  }
  if (v7) {
    size_t v12 = v8;
  }
  else {
    size_t v12 = v8 + 1;
  }
  *(_OWORD *)(((unint64_t)a1 + v12 + 7) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)a2 + v12 + 7) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *sub_25A443128(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  int v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_12;
    }
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  if (v10) {
    size_t v12 = v11;
  }
  else {
    size_t v12 = v11 + 1;
  }
  memcpy(a1, a2, v12);
LABEL_12:
  if (*(_DWORD *)(v6 + 84)) {
    uint64_t v13 = *(void *)(v6 + 64);
  }
  else {
    uint64_t v13 = *(void *)(v6 + 64) + 1;
  }
  *(_OWORD *)(((unint64_t)a1 + v13 + 7) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)a2 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t sub_25A4432D4(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  int v5 = *(_DWORD *)(v4 + 84);
  if (v5) {
    unsigned int v6 = v5 - 1;
  }
  else {
    unsigned int v6 = 0;
  }
  if (v6 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = v6;
  }
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v5) {
    ++v8;
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v9 = ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v10 = a2 - v7;
    uint64_t v11 = v9 & 0xFFFFFFF8;
    if ((v9 & 0xFFFFFFF8) != 0) {
      unsigned int v12 = 2;
    }
    else {
      unsigned int v12 = v10 + 1;
    }
    if (v12 >= 0x10000) {
      unsigned int v13 = 4;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v12 < 0x100) {
      unsigned int v13 = 1;
    }
    if (v12 >= 2) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    switch(v14)
    {
      case 1:
        int v15 = *((unsigned __int8 *)a1 + v9);
        if (!v15) {
          break;
        }
        goto LABEL_27;
      case 2:
        int v15 = *(unsigned __int16 *)((char *)a1 + v9);
        if (v15) {
          goto LABEL_27;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x25A44345CLL);
      case 4:
        int v15 = *(_DWORD *)((char *)a1 + v9);
        if (!v15) {
          break;
        }
LABEL_27:
        int v17 = v15 - 1;
        if (v11)
        {
          int v17 = 0;
          LODWORD(v11) = *a1;
        }
        return v7 + (v11 | v17) + 1;
      default:
        break;
    }
  }
  if (v6 < 0x7FFFFFFF)
  {
    unint64_t v19 = *(void *)(((unint64_t)a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v19 >= 0xFFFFFFFF) {
      LODWORD(v19) = -1;
    }
    return (v19 + 1);
  }
  else
  {
    unsigned int v18 = (*(uint64_t (**)(void))(v4 + 48))();
    if (v18 >= 2) {
      return v18 - 1;
    }
    else {
      return 0;
    }
  }
}

void sub_25A443470(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = v9;
  }
  size_t v11 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (!v8) {
    ++v11;
  }
  size_t v12 = ((v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v10 < a3)
  {
    unsigned int v13 = a3 - v10;
    if (((v11 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v14 = v13 + 1;
    }
    else {
      unsigned int v14 = 2;
    }
    if (v14 >= 0x10000) {
      int v15 = 4;
    }
    else {
      int v15 = 2;
    }
    if (v14 < 0x100) {
      int v15 = 1;
    }
    if (v14 >= 2) {
      int v6 = v15;
    }
    else {
      int v6 = 0;
    }
  }
  if (a2 > v10)
  {
    if (((v11 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v16 = a2 - v10;
    }
    else {
      int v16 = 1;
    }
    if (((v11 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v17 = ~v10 + a2;
      bzero(a1, v12);
      *(_DWORD *)a1 = v17;
    }
    switch(v6)
    {
      case 1:
        a1[v12] = v16;
        return;
      case 2:
        *(_WORD *)&a1[v12] = v16;
        return;
      case 3:
        goto LABEL_58;
      case 4:
        *(_DWORD *)&a1[v12] = v16;
        return;
      default:
        return;
    }
  }
  switch(v6)
  {
    case 1:
      a1[v12] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 2:
      *(_WORD *)&a1[v12] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 3:
LABEL_58:
      __break(1u);
      JUMPOUT(0x25A4436F8);
    case 4:
      *(_DWORD *)&a1[v12] = 0;
      goto LABEL_34;
    default:
LABEL_34:
      if (a2)
      {
LABEL_35:
        if (v9 < 0x7FFFFFFF)
        {
          uint64_t v21 = (void *)((unint64_t)&a1[v11 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            *uint64_t v21 = a2 ^ 0x80000000;
            v21[1] = 0;
          }
          else
          {
            *uint64_t v21 = a2 - 1;
          }
        }
        else if (v9 >= a2)
        {
          uint64_t v22 = *(void (**)(void))(v7 + 56);
          v22();
        }
        else
        {
          if (v11 <= 3) {
            int v18 = ~(-1 << (8 * v11));
          }
          else {
            int v18 = -1;
          }
          if (v11)
          {
            int v19 = v18 & (~v9 + a2);
            if (v11 <= 3) {
              int v20 = v11;
            }
            else {
              int v20 = 4;
            }
            bzero(a1, v11);
            switch(v20)
            {
              case 2:
                *(_WORD *)a1 = v19;
                break;
              case 3:
                *(_WORD *)a1 = v19;
                a1[2] = BYTE2(v19);
                break;
              case 4:
                *(_DWORD *)a1 = v19;
                break;
              default:
                *a1 = v19;
                break;
            }
          }
        }
      }
      return;
  }
}

uint64_t type metadata accessor for GeneratingSequence.Iterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A443748()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *sub_25A4437C4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v7 = *(void *)(v6 + 64);
  }
  else {
    size_t v7 = *(void *)(v6 + 64) + 1;
  }
  uint64_t v8 = *(_DWORD *)(v6 + 80);
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v7 > 0x18)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v8 + 16) & ~v8));
    swift_retain();
  }
  else if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

uint64_t sub_25A443900(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v3);
  if (!result)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
    return v5(a1, v3);
  }
  return result;
}

void *sub_25A4439C4(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84)) {
      size_t v7 = *(void *)(v6 + 64);
    }
    else {
      size_t v7 = *(void *)(v6 + 64) + 1;
    }
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *sub_25A443ABC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  size_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      return a1;
    }
    unsigned int v13 = *(void (**)(void *, uint64_t))(v6 + 8);
    uint64_t v12 = v6 + 8;
    v13(a1, v5);
    int v10 = *(_DWORD *)(v12 + 76);
    size_t v11 = *(void *)(v12 + 56);
  }
  if (v10) {
    size_t v14 = v11;
  }
  else {
    size_t v14 = v11 + 1;
  }
  memcpy(a1, a2, v14);
  return a1;
}

void *sub_25A443C28(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84)) {
      size_t v7 = *(void *)(v6 + 64);
    }
    else {
      size_t v7 = *(void *)(v6 + 64) + 1;
    }
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *sub_25A443D20(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  size_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      return a1;
    }
    unsigned int v13 = *(void (**)(void *, uint64_t))(v6 + 8);
    uint64_t v12 = v6 + 8;
    v13(a1, v5);
    int v10 = *(_DWORD *)(v12 + 76);
    size_t v11 = *(void *)(v12 + 56);
  }
  if (v10) {
    size_t v14 = v11;
  }
  else {
    size_t v14 = v11 + 1;
  }
  memcpy(a1, a2, v14);
  return a1;
}

uint64_t sub_25A443E8C(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v5) {
    ++v7;
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v6;
  if (a2 > v6)
  {
    char v9 = 8 * v7;
    if (v7 > 3) {
      goto LABEL_8;
    }
    unsigned int v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v7);
      if (v10) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2) {
          goto LABEL_25;
        }
LABEL_8:
        int v10 = *((unsigned __int8 *)a1 + v7);
        if (!*((unsigned char *)a1 + v7)) {
          goto LABEL_25;
        }
LABEL_15:
        int v12 = (v10 - 1) << v9;
        if (v7 > 3) {
          int v12 = 0;
        }
        if (v7)
        {
          if (v7 <= 3) {
            int v13 = v7;
          }
          else {
            int v13 = 4;
          }
          switch(v13)
          {
            case 2:
              int v14 = *a1;
              break;
            case 3:
              int v14 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
              break;
            case 4:
              int v14 = *(_DWORD *)a1;
              break;
            default:
              int v14 = *(unsigned __int8 *)a1;
              break;
          }
        }
        else
        {
          int v14 = 0;
        }
        return v6 + (v14 | v12) + 1;
      }
      int v10 = *(unsigned __int16 *)((char *)a1 + v7);
      if (*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_15;
      }
    }
  }
LABEL_25:
  if (v5 < 2) {
    return 0;
  }
  unsigned int v16 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v16 >= 2) {
    return v16 - 1;
  }
  else {
    return 0;
  }
}

void sub_25A44402C(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (v8)
  {
    size_t v10 = *(void *)(v7 + 64);
  }
  else
  {
    unsigned int v9 = 0;
    size_t v10 = *(void *)(v7 + 64) + 1;
  }
  BOOL v11 = a3 >= v9;
  unsigned int v12 = a3 - v9;
  if (v12 == 0 || !v11)
  {
LABEL_13:
    if (v9 < a2) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  if (v10 > 3)
  {
    int v6 = 1;
    if (v9 < a2) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  unsigned int v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
  if (!HIWORD(v13))
  {
    if (v13 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v13 > 1;
    }
    goto LABEL_13;
  }
  int v6 = 4;
  if (v9 < a2)
  {
LABEL_14:
    unsigned int v14 = ~v9 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v16 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
LABEL_21:
  switch(v6)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x25A444268);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_25;
    default:
LABEL_25:
      if (a2)
      {
LABEL_26:
        if (v8 >= 2)
        {
          int v17 = *(void (**)(void))(v7 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t sub_25A444290(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 48))(a1, 1);
}

uint64_t sub_25A4442C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 56))(a1, a2, 1);
}

uint64_t sub_25A4442F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a2, a1, v4);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(a2, 0, 1, v4);
}

uint64_t StructuredStringConvertible.description.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = MEMORY[0x263F8EE78];
  (*(void (**)(uint64_t *, uint64_t))(a2 + 16))(&v4, a1);
  uint64_t v2 = Array<A>.builtDescription.getter(v4);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t Array<A>.builtDescription.getter(uint64_t a1)
{
  uint64_t v22 = 0;
  unint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = 1;
    swift_beginAccess();
    swift_beginAccess();
    unint64_t v20 = 0;
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    int v6 = (unsigned __int8 *)(a1 + 72);
    do
    {
      uint64_t v8 = *((void *)v6 - 5);
      uint64_t v7 = *((void *)v6 - 4);
      unint64_t v9 = v4 + 1;
      unsigned int v10 = *(v6 - 24);
      if ((v3 & 1) == 0 && v4 == v20)
      {
        uint64_t v3 = 0;
      }
      else
      {
        uint64_t v21 = v3;
        if (v9 >= v1)
        {
          uint64_t v12 = 0;
          uint64_t v11 = 0;
          unsigned int v13 = 254;
        }
        else
        {
          uint64_t v12 = *((void *)v6 - 2);
          uint64_t v11 = *((void *)v6 - 1);
          unsigned int v13 = *v6;
          sub_25A444B78(v12, v11, *v6);
        }
        switch(v10 >> 6)
        {
          case 1u:
            if (v13 <= 0xFD)
            {
              if (v13 >= 0xC0 && v12 == 2 && !v11 && v13 == 192)
              {
                sub_25A444B78(v8, v7, v10);
                sub_25A444BA8(2, 0, 0xC0u);
                if (v10)
                {
LABEL_32:
                  sub_25A444B90(v8, v7, v10);
                  uint64_t v3 = 0;
                  unint64_t v20 = v9;
                  break;
                }
              }
              else
              {
                sub_25A444B78(v8, v7, v10);
                sub_25A444BA8(v12, v11, v13);
              }
            }
            else
            {
              swift_bridgeObjectRetain();
            }
            sub_25A444B78(v8, v7, v10);
            sub_25A50EDA0();
            v16._uint64_t countAndFlagsBits = MEMORY[0x26113CE90](538976288, 0xE400000000000000, v5);
            String.prefixingEachLine(with:startingOnLine:)(v16, 0);
            swift_bridgeObjectRelease();
            swift_beginAccess();
            sub_25A50EDA0();
            swift_endAccess();
            swift_bridgeObjectRelease();
            sub_25A444B90(v8, v7, v10);
            swift_bridgeObjectRelease();
            uint64_t v5 = v22 + 1;
            if (__OFADD__(v22, 1))
            {
              __break(1u);
LABEL_59:
              __break(1u);
LABEL_60:
              __break(1u);
LABEL_61:
              __break(1u);
LABEL_62:
              __break(1u);
LABEL_63:
              __break(1u);
              JUMPOUT(0x25A444B68);
            }
            goto LABEL_48;
          case 2u:
            if (v13 <= 0xFD)
            {
              if (v13 >= 0xC0 && v12 == 3 && !v11 && v13 == 192)
              {
                sub_25A444B78(v8, v7, v10);
                sub_25A444BA8(3, 0, 0xC0u);
                if (v10) {
                  goto LABEL_32;
                }
              }
              else
              {
                sub_25A444B78(v8, v7, v10);
                sub_25A444BA8(v12, v11, v13);
              }
            }
            else
            {
              swift_bridgeObjectRetain();
            }
            sub_25A444B78(v8, v7, v10);
            sub_25A50EDA0();
            v17._uint64_t countAndFlagsBits = MEMORY[0x26113CE90](538976288, 0xE400000000000000, v5);
            String.prefixingEachLine(with:startingOnLine:)(v17, 0);
            swift_bridgeObjectRelease();
            swift_beginAccess();
            sub_25A50EDA0();
            swift_endAccess();
            swift_bridgeObjectRelease();
            sub_25A444B90(v8, v7, v10);
            swift_bridgeObjectRelease();
            uint64_t v5 = v22 + 1;
            if (__OFADD__(v22, 1)) {
              goto LABEL_59;
            }
            goto LABEL_48;
          case 3u:
            if (!(v7 | v8) && v10 == 192)
            {
              sub_25A444BA8(v12, v11, v13);
              uint64_t v5 = v22 + 1;
              if (__OFADD__(v22, 1)) {
                goto LABEL_60;
              }
LABEL_48:
              uint64_t v22 = v5;
              uint64_t v3 = v21;
              break;
            }
            BOOL v14 = v8 == 1 && v7 == 0;
            if (v14 && v10 == 192)
            {
              sub_25A444BA8(v12, v11, v13);
              uint64_t v5 = v22 - 1;
              if (__OFSUB__(v22, 1)) {
                goto LABEL_61;
              }
              goto LABEL_48;
            }
            if (v8 == 2 && !v7 && v10 == 192)
            {
              sub_25A444BA8(v12, v11, v13);
              uint64_t v5 = v22 - 1;
              if (__OFSUB__(v22, 1)) {
                goto LABEL_62;
              }
              --v22;
            }
            else
            {
              sub_25A444BA8(v12, v11, v13);
              uint64_t v5 = v22 - 1;
              if (__OFSUB__(v22, 1)) {
                goto LABEL_63;
              }
              --v22;
            }
            v18._uint64_t countAndFlagsBits = MEMORY[0x26113CE90](538976288, 0xE400000000000000, v5);
            String.prefixingEachLine(with:startingOnLine:)(v18, 0);
            swift_bridgeObjectRelease();
            swift_beginAccess();
            sub_25A50EDA0();
            swift_endAccess();
            swift_bridgeObjectRelease();
            uint64_t v3 = v21;
            break;
          default:
            swift_bridgeObjectRetain();
            sub_25A444BA8(v12, v11, v13);
            sub_25A444B78(v8, v7, v10);
            v15._uint64_t countAndFlagsBits = MEMORY[0x26113CE90](538976288, 0xE400000000000000, v5);
            String.prefixingEachLine(with:startingOnLine:)(v15, 0);
            swift_bridgeObjectRelease();
            swift_beginAccess();
            sub_25A50EDA0();
            swift_endAccess();
            swift_bridgeObjectRelease();
            sub_25A444B90(v8, v7, v10);
            sub_25A444B90(v8, v7, v10);
            uint64_t v3 = v21;
            break;
        }
      }
      v6 += 24;
      unint64_t v4 = v9;
    }
    while (v1 != v9);
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  return 0;
}

uint64_t sub_25A444B78(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 0xBFu) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_25A444B90(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 0xBFu) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_25A444BA8(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 0xFDu) {
    return sub_25A444B90(a1, a2, a3);
  }
  return a1;
}

uint64_t Array<A>.describe<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t))(a3 + 16))(v3);
}

uint64_t Array<A>.describe<A>(_:)()
{
  unint64_t v1 = v0;
  uint64_t v2 = sub_25A5102B0();
  uint64_t v4 = v3;
  uint64_t v5 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_25A3852D0(0, v5[2] + 1, 1, v5);
    uint64_t v5 = (void *)result;
  }
  unint64_t v8 = v5[2];
  unint64_t v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    uint64_t result = (uint64_t)sub_25A3852D0((void *)(v7 > 1), v8 + 1, 1, v5);
    uint64_t v5 = (void *)result;
  }
  uint64_t v5[2] = v8 + 1;
  unint64_t v9 = &v5[3 * v8];
  v9[4] = v2;
  v9[5] = v4;
  *((unsigned char *)v9 + 48) = 0;
  uint64_t *v1 = v5;
  return result;
}

double Array<A>.withMap(_:skipEmpty:handler:)(uint64_t a1, uint64_t a2, char a3, void (*a4)(void **))
{
  uint64_t v5 = v4;
  unsigned int v10 = *v4;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unsigned int v10 = sub_25A3852D0(0, v10[2] + 1, 1, v10);
  }
  unint64_t v12 = v10[2];
  unint64_t v11 = v10[3];
  if (v12 >= v11 >> 1) {
    unsigned int v10 = sub_25A3852D0((void *)(v11 > 1), v12 + 1, 1, v10);
  }
  void v10[2] = v12 + 1;
  unsigned int v13 = &v10[3 * v12];
  v13[4] = a1;
  v13[5] = a2;
  *((unsigned char *)v13 + 48) = a3 & 1 | 0x40;
  *uint64_t v4 = v10;
  a4(v4);
  BOOL v14 = *v4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    BOOL v14 = sub_25A3852D0(0, v14[2] + 1, 1, v14);
  }
  unint64_t v16 = v14[2];
  unint64_t v15 = v14[3];
  if (v16 >= v15 >> 1) {
    BOOL v14 = sub_25A3852D0((void *)(v15 > 1), v16 + 1, 1, v14);
  }
  void v14[2] = v16 + 1;
  Swift::String v17 = &v14[3 * v16];
  *(void *)&double result = 2;
  *((_OWORD *)v17 + 2) = xmmword_25A518040;
  *((unsigned char *)v17 + 48) = -64;
  *uint64_t v5 = v14;
  return result;
}

double Array<A>.withCollection(_:skipEmpty:handler:)(uint64_t a1, uint64_t a2, char a3, void (*a4)(void **))
{
  uint64_t v5 = v4;
  unsigned int v10 = *v4;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unsigned int v10 = sub_25A3852D0(0, v10[2] + 1, 1, v10);
  }
  unint64_t v12 = v10[2];
  unint64_t v11 = v10[3];
  if (v12 >= v11 >> 1) {
    unsigned int v10 = sub_25A3852D0((void *)(v11 > 1), v12 + 1, 1, v10);
  }
  void v10[2] = v12 + 1;
  unsigned int v13 = &v10[3 * v12];
  v13[4] = a1;
  v13[5] = a2;
  *((unsigned char *)v13 + 48) = a3 & 1 | 0x80;
  *uint64_t v4 = v10;
  a4(v4);
  BOOL v14 = *v4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    BOOL v14 = sub_25A3852D0(0, v14[2] + 1, 1, v14);
  }
  unint64_t v16 = v14[2];
  unint64_t v15 = v14[3];
  if (v16 >= v15 >> 1) {
    BOOL v14 = sub_25A3852D0((void *)(v15 > 1), v16 + 1, 1, v14);
  }
  void v14[2] = v16 + 1;
  Swift::String v17 = &v14[3 * v16];
  *(void *)&double result = 3;
  *((_OWORD *)v17 + 2) = xmmword_25A518050;
  *((unsigned char *)v17 + 48) = -64;
  *uint64_t v5 = v14;
  return result;
}

uint64_t Array<A>.print<A>(key:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_25A50FA40();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  unint64_t v12 = (char *)&v24 - v11;
  uint64_t v13 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v10);
  unint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a3, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, a4) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v12, a4);
  uint64_t v26 = a1;
  uint64_t v27 = a2;
  swift_bridgeObjectRetain();
  sub_25A50EDA0();
  sub_25A5102B0();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  uint64_t v17 = v26;
  uint64_t v18 = v27;
  int v19 = v25;
  unint64_t v20 = *v25;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v20 = sub_25A3852D0(0, v20[2] + 1, 1, v20);
  }
  unint64_t v22 = v20[2];
  unint64_t v21 = v20[3];
  if (v22 >= v21 >> 1) {
    unint64_t v20 = sub_25A3852D0((void *)(v21 > 1), v22 + 1, 1, v20);
  }
  void v20[2] = v22 + 1;
  char v23 = &v20[3 * v22];
  void v23[4] = v17;
  v23[5] = v18;
  *((unsigned char *)v23 + 48) = 0;
  *int v19 = v20;
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, a4);
}

uint64_t Array<A>.print<A>(key:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6 = v5;
  uint64_t v27 = a5;
  uint64_t v11 = sub_25A50FA40();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  unint64_t v15 = (char *)&v26 - v14;
  uint64_t v16 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a3, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, a4) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v15, a4);
  uint64_t v28 = a1;
  uint64_t v29 = a2;
  swift_bridgeObjectRetain();
  sub_25A50EDA0();
  uint64_t v20 = v28;
  uint64_t v21 = v29;
  unint64_t v22 = *v6;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v22 = sub_25A3852D0(0, v22[2] + 1, 1, v22);
  }
  unint64_t v24 = v22[2];
  unint64_t v23 = v22[3];
  if (v24 >= v23 >> 1) {
    unint64_t v22 = sub_25A3852D0((void *)(v23 > 1), v24 + 1, 1, v22);
  }
  _OWORD v22[2] = v24 + 1;
  uint64_t v25 = &v22[3 * v24];
  void v25[4] = v20;
  v25[5] = v21;
  *((unsigned char *)v25 + 48) = 0;
  *int v6 = v22;
  (*(void (**)(void **, uint64_t))(v27 + 16))(v6, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, a4);
}

uint64_t dispatch thunk of StructuredStringConvertible.describe(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t destroy for StructuredDescriptionBuildAction(uint64_t a1)
{
  return sub_25A444B90(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t _s20PreviewsFoundationOS32StructuredDescriptionBuildActionOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_25A444B78(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for StructuredDescriptionBuildAction(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_25A444B78(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_25A444B90(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for StructuredDescriptionBuildAction(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_25A444B90(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for StructuredDescriptionBuildAction(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7D && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 125);
  }
  unsigned int v3 = ((*(unsigned __int8 *)(a1 + 16) >> 6) & 0xFFFFFF83 | (4 * ((*(unsigned __int8 *)(a1 + 16) >> 1) & 0x1F))) ^ 0x7F;
  if (v3 >= 0x7C) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for StructuredDescriptionBuildAction(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7C)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)double result = a2 - 125;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7D) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7D) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2)
    {
      *(void *)double result = 0;
      *(void *)(result + 8) = 0;
      *(unsigned char *)(result + 16) = 2 * (((-a2 >> 2) & 0x1F) - 32 * a2);
    }
  }
  return result;
}

uint64_t sub_25A445680(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 16) >> 6;
  if (v1 == 3) {
    return (*(_DWORD *)a1 + 3);
  }
  else {
    return v1;
  }
}

uint64_t sub_25A44569C(uint64_t result)
{
  *(unsigned char *)(result + 16) &= 0x3Fu;
  return result;
}

uint64_t sub_25A4456AC(uint64_t result, unsigned int a2)
{
  if (a2 < 3)
  {
    *(unsigned char *)(result + 16) = *(unsigned char *)(result + 16) & 1 | ((_BYTE)a2 << 6);
  }
  else
  {
    *(void *)double result = a2 - 3;
    *(void *)(result + 8) = 0;
    *(unsigned char *)(result + 16) = -64;
  }
  return result;
}

ValueMetadata *type metadata accessor for StructuredDescriptionBuildAction()
{
  return &type metadata for StructuredDescriptionBuildAction;
}

uint64_t static Bool.^ infix(_:_:)(int a1, int a2)
{
  return (a1 ^ a2) & 1;
}

uint64_t static ActorTunnel.create()(uint64_t a1)
{
  uint64_t v2 = sub_25A50F2E0();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v11 - v4;
  uint64_t v6 = sub_25A50F320();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v11 - v8;
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F8F580], v2);
  sub_25A50F2B0();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v9, v6);
}

uint64_t ActorTunnel.send(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v5, v2);
  sub_25A50F320();
  return sub_25A50F300();
}

Swift::Void __swiftcall ActorTunnel.invalidate()()
{
  sub_25A50F320();

  sub_25A50F310();
}

uint64_t sub_25A4459AC()
{
  uint64_t result = sub_25A50F320();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_25A445A3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25A50F320();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);

  return v5(a1, a2, v4);
}

uint64_t sub_25A445AAC(uint64_t a1)
{
  uint64_t v2 = sub_25A50F320();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t sub_25A445B14(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25A50F320();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_25A445B7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25A50F320();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_25A445BE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25A50F320();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_25A445C4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25A50F320();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_25A445CB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25A445CC8);
}

uint64_t sub_25A445CC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25A50F320();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_25A445D38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25A445D4C);
}

uint64_t sub_25A445D4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25A50F320();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for ActorTunnel()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A445DD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_25A3E24D0(a1, a2, a3, a4, (uint64_t)&type metadata for SwiftEntrySectionPayload.CouldNotConvertJSONPayloadToString);
}

uint64_t sub_25A445DEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_25A3E24D0(a1, a2, a3, a4, (uint64_t)&type metadata for UnhandledUnknownCaseError);
}

uint64_t sub_25A445E00(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  int v19 = &type metadata for TimeoutError;
  uint64_t v8 = swift_allocObject();
  uint64_t v16 = v8;
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  *(void *)(v8 + 32) = a3;
  char v9 = a4 & 1;
  *(unsigned char *)(v8 + 40) = a4 & 1;
  __swift_project_boxed_opaque_existential_1(&v16, (uint64_t)&type metadata for TimeoutError);
  swift_getDynamicType();
  sub_25A3ECD94(a1, a2, a3, a4 & 1);
  uint64_t v10 = sub_25A5105D0();
  unint64_t v12 = v11;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v16);
  uint64_t v20 = v10;
  unint64_t v21 = v12;
  uint64_t v16 = a1;
  unint64_t v17 = a2;
  uint64_t v18 = a3;
  LOBYTE(v19) = v9;
  TimeoutError.highValueTitle.getter();
  if (v13)
  {
    uint64_t v16 = 8250;
    unint64_t v17 = 0xE200000000000000;
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
    uint64_t v10 = v20;
    unint64_t v12 = v21;
  }
  uint64_t v16 = v10;
  unint64_t v17 = v12;
  sub_25A39BE4C();
  uint64_t v14 = sub_25A50FB60();
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_25A445F88(uint64_t a1, uint64_t a2)
{
  char v9 = &type metadata for InvalidUUID;
  uint64_t v7 = a1;
  uint64_t v8 = a2;
  __swift_project_boxed_opaque_existential_1(&v7, (uint64_t)&type metadata for InvalidUUID);
  swift_getDynamicType();
  swift_bridgeObjectRetain();
  uint64_t v2 = sub_25A5105D0();
  uint64_t v4 = v3;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v7);
  uint64_t v7 = v2;
  uint64_t v8 = v4;
  sub_25A50FDB0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A39BE4C();
  uint64_t v5 = sub_25A50FB60();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t PropertyListRepresentable<>.propertyListValue.getter()
{
  return sub_25A50F020();
}

uint64_t sub_25A446118@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  return sub_25A446138(*a1, a1[1], a2);
}

uint64_t sub_25A446138@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_25A510190();
  swift_bridgeObjectRelease();
  if (!v6)
  {
    char v7 = 0;
    goto LABEL_5;
  }
  if (v6 == 1)
  {
    char v7 = 1;
LABEL_5:
    uint64_t result = swift_bridgeObjectRelease();
    *a3 = v7;
    return result;
  }
  sub_25A3ECF40();
  swift_allocError();
  uint64_t v10 = v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4195C8);
  *(void *)uint64_t v10 = &type metadata for HumanReadableErrorSeverity;
  *(void *)(v10 + 56) = MEMORY[0x263F8D310];
  *(void *)(v10 + 24) = v11;
  *(void *)(v10 + 32) = a1;
  *(void *)(v10 + 40) = a2;
  *(unsigned char *)(v10 + 112) = 3;
  return swift_willThrow();
}

uint64_t PropertyListRepresentable<>.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v22 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v8 = (char *)&v20 - v7;
  uint64_t v20 = sub_25A50FA40();
  uint64_t v9 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v11 = (char *)&v20 - v10;
  unint64_t v12 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v23 = a1;
  unint64_t v21 = v12;
  v12((uint64_t *)v8, a1, AssociatedTypeWitness);
  sub_25A50F030();
  uint64_t v13 = *(void *)(a2 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, a2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v20);
    sub_25A3ECF40();
    swift_allocError();
    uint64_t v15 = v14;
    uint64_t v16 = (uint64_t *)(v14 + 32);
    *(void *)(v14 + 24) = swift_getMetatypeMetadata();
    *(void *)uint64_t v15 = a2;
    *(void *)(v15 + 56) = AssociatedTypeWitness;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v16);
    uint64_t v18 = v23;
    v21(boxed_opaque_existential_1, v23, AssociatedTypeWitness);
    *(unsigned char *)(v15 + 112) = 3;
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v18, AssociatedTypeWitness);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v23, AssociatedTypeWitness);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(v22, v11, a2);
  }
}

{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1);
}

uint64_t PropertyListRepresentable.propertyList.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  unint64_t v12 = (char *)v16 - v11;
  (*(void (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, AssociatedTypeWitness);
  uint64_t v13 = swift_dynamicCast();
  if (v13)
  {
    uint64_t v14 = v16[1];
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v12, AssociatedTypeWitness);
    *a3 = v14;
  }
  else
  {
    MEMORY[0x270FA5388](v13);
    v16[-4] = a1;
    v16[-3] = a2;
    v16[-2] = v12;
    sub_25A44A5F8((void (*)(void *, unsigned char *))sub_25A44A5EC, a3);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v12, AssociatedTypeWitness);
  }
  return result;
}

uint64_t sub_25A4466C8@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_25A510190();
  swift_bridgeObjectRelease();
  if (!v6)
  {
    char v7 = 0;
    goto LABEL_5;
  }
  if (v6 == 1)
  {
    char v7 = 1;
LABEL_5:
    uint64_t result = swift_bridgeObjectRelease();
    *a2 = v7;
    return result;
  }
  sub_25A3ECF40();
  swift_allocError();
  uint64_t v10 = v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A417770);
  *(void *)uint64_t v10 = v2;
  *(void *)(v10 + 56) = MEMORY[0x263F8D310];
  *(void *)(v10 + 24) = v11;
  *(void *)(v10 + 32) = v5;
  *(void *)(v10 + 40) = v4;
  *(unsigned char *)(v10 + 112) = 3;
  return swift_willThrow();
}

uint64_t static PropertyListBuilder.buildBlock<A, B, C, D, E, F>(_:_:_:)(char *a1, uint64_t a2, char *a3, uint64_t a4, char *a5, char *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v93 = a8;
  uint64_t v106 = a6;
  uint64_t v100 = a5;
  uint64_t v103 = a4;
  unint64_t v99 = a3;
  uint64_t v120 = a2;
  v119 = a1;
  uint64_t v108 = a17;
  uint64_t v102 = a15;
  uint64_t v123 = a11;
  uint64_t v109 = a13;
  uint64_t v113 = a12;
  uint64_t v122 = sub_25A50FA40();
  uint64_t v121 = *(void *)(v122 - 8);
  MEMORY[0x270FA5388](v122);
  v112 = (char *)&v81 - v19;
  uint64_t v105 = a10;
  uint64_t v118 = (void *)sub_25A50FA40();
  uint64_t v117 = *(v118 - 1);
  MEMORY[0x270FA5388](v118);
  uint64_t v104 = (char *)&v81 - v20;
  uint64_t v21 = sub_25A50FA40();
  uint64_t v116 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  char v90 = (char *)&v81 - v22;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v111 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v23 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  unint64_t v115 = (char *)&v81 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  uint64_t v124 = (char *)&v81 - v25;
  uint64_t v26 = swift_getTupleTypeMetadata2();
  uint64_t v110 = *(void *)(v26 - 8);
  uint64_t v27 = MEMORY[0x270FA5388](v26);
  int v101 = (char *)&v81 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27);
  uint64_t v30 = (char *)&v81 - v29;
  uint64_t v82 = v21;
  uint64_t v31 = swift_getTupleTypeMetadata2();
  uint64_t v107 = *(void *)(v31 - 8);
  uint64_t v32 = MEMORY[0x270FA5388](v31);
  uint64_t v34 = (char *)&v81 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = MEMORY[0x270FA5388](v32);
  uint64_t v37 = (char *)&v81 - v36;
  uint64_t v84 = (char *)&v81 + *(int *)(v35 + 48) - v36;
  unint64_t v38 = v84;
  uint64_t v81 = a7;
  uint64_t v86 = *(void *)(a7 - 8);
  uint64_t v85 = *(void (**)(char *, char *, uint64_t))(v86 + 16);
  v85((char *)&v81 - v36, v119, a7);
  unint64_t v83 = *(void (**)(char *, uint64_t, uint64_t))(v116 + 16);
  v83(v38, v120, v21);
  uint64_t v120 = v26;
  uint64_t v39 = &v30[*(int *)(v26 + 48)];
  uint64_t v95 = *(void *)(a9 - 8);
  uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v95 + 16);
  v119 = v30;
  uint64_t v114 = a9;
  uint64_t v92 = v95 + 16;
  uint64_t v91 = v40;
  v40(v30, v99, a9);
  uint64_t v41 = *(void (**)(char *, char *, void *))(v117 + 16);
  unint64_t v94 = v39;
  uint64_t v89 = v117 + 16;
  uint64_t v88 = v41;
  v41(v39, (char *)v103, v118);
  char v42 = &v124[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v103 = *(void *)(v123 - 8);
  uint64_t v43 = *(void (**)(void))(v103 + 16);
  unint64_t v99 = (char *)(v103 + 16);
  uint64_t v98 = v43;
  v43();
  uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v121 + 16);
  uint64_t v100 = v42;
  uint64_t v97 = v121 + 16;
  uint64_t v96 = v44;
  v44(v42, v106, v122);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417728);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25A511AD0;
  uint64_t v46 = (uint64_t *)(inited + 48);
  uint64_t v47 = v81;
  *(void *)(inited + 32) = (*(uint64_t (**)(uint64_t))(v109 + 8))(v81);
  *(void *)(inited + 40) = v48;
  uint64_t v109 = v31;
  BOOL v49 = &v34[*(int *)(v31 + 48)];
  unint64_t v87 = v34;
  uint64_t v106 = v37;
  v85(v34, v37, v47);
  uint64_t v50 = v116;
  uint64_t v51 = v93;
  uint64_t v52 = v82;
  v83(v49, (uint64_t)v84, v82);
  uint64_t v53 = v90;
  (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v90, v49, v52);
  uint64_t v54 = *(void *)(v51 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v53, 1, v51) == 1)
  {
    (*(void (**)(char *, uint64_t))(v86 + 8))(v87, v47);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v53, v52);
    *(void *)(inited + 80) = 0;
    *(_OWORD *)uint64_t v46 = 0u;
    *(_OWORD *)(inited + 64) = 0u;
  }
  else
  {
    uint64_t v55 = *(void (**)(uint64_t, uint64_t))(a14 + 24);
    *(void *)(inited + 72) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 80) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1(v46);
    v55(v51, a14);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v53, v51);
    (*(void (**)(char *, uint64_t))(v86 + 8))(v87, v47);
  }
  uint64_t v56 = v119;
  uint64_t v57 = v114;
  *(void *)(inited + 88) = (*(uint64_t (**)(uint64_t))(v102 + 8))(v114);
  *(void *)(inited + 96) = v58;
  BOOL v59 = v101;
  uint64_t v60 = &v101[*(int *)(v120 + 48)];
  v91(v101, v56, v57);
  char v61 = v118;
  v88(v60, v94, v118);
  uint64_t v62 = v117;
  uint64_t v63 = v104;
  (*(void (**)(char *, char *, void *))(v117 + 32))(v104, v60, v61);
  uint64_t v64 = v105;
  uint64_t v65 = *(void *)(v105 - 8);
  int v66 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v65 + 48))(v63, 1, v105);
  uint64_t v67 = v113;
  if (v66 == 1)
  {
    (*(void (**)(char *, uint64_t))(v95 + 8))(v59, v57);
    (*(void (**)(char *, void *))(v62 + 8))(v63, v61);
    *(void *)(inited + 136) = 0;
    *(_OWORD *)(inited + 104) = 0u;
    *(_OWORD *)(inited + 120) = 0u;
  }
  else
  {
    uint64_t v118 = *(void **)(a16 + 24);
    *(void *)(inited + 128) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 136) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 104));
    ((void (*)(uint64_t, uint64_t))v118)(v64, a16);
    (*(void (**)(char *, uint64_t))(v65 + 8))(v63, v64);
    (*(void (**)(char *, uint64_t))(v95 + 8))(v59, v114);
  }
  uint64_t v68 = v121;
  int v69 = v115;
  uint64_t v70 = v124;
  uint64_t v71 = v123;
  *(void *)(inited + 144) = (*(uint64_t (**)(uint64_t))(v108 + 8))(v123);
  *(void *)(inited + 152) = v72;
  uint64_t v73 = &v69[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, char *, uint64_t))v98)(v69, v70, v71);
  uint64_t v74 = v122;
  v96(v73, v100, v122);
  uint64_t v75 = v112;
  (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v112, v73, v74);
  uint64_t v76 = *(void *)(v67 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v75, 1, v67) == 1)
  {
    (*(void (**)(char *, uint64_t))(v103 + 8))(v69, v71);
    (*(void (**)(char *, uint64_t))(v68 + 8))(v75, v74);
    *(void *)(inited + 192) = 0;
    *(_OWORD *)(inited + 160) = 0u;
    *(_OWORD *)(inited + 176) = 0u;
  }
  else
  {
    unint64_t v77 = *(void (**)(uint64_t, uint64_t))(a18 + 24);
    *(void *)(inited + 184) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 192) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 160));
    v77(v67, a18);
    (*(void (**)(char *, uint64_t))(v76 + 8))(v75, v67);
    (*(void (**)(char *, uint64_t))(v103 + 8))(v115, v71);
  }
  unint64_t v78 = sub_25A392B24(inited);
  uint64_t v79 = sub_25A44B160(v78);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v111 + 8))(v124, TupleTypeMetadata2);
  (*(void (**)(char *, uint64_t))(v110 + 8))(v119, v120);
  (*(void (**)(char *, uint64_t))(v107 + 8))(v106, v109);
  return v79;
}

uint64_t PropertyList.init(content:)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = a1();
  uint64_t v4 = sub_25A3EB380(v3);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t PropertyList.unarchiveValue<A>(for:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = *v4;
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v10);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v10, v11);
  if (*(void *)(v9 + 16) && (unint64_t v14 = sub_25A409670(v12, v13), (v15 & 1) != 0))
  {
    sub_25A3937CC(*(void *)(v9 + 56) + 32 * v14, (uint64_t)&v19);
    swift_bridgeObjectRelease();
    if (*((void *)&v20 + 1))
    {
      sub_25A3936C4(&v19, v21);
      *(void *)&long long v19 = v9;
      sub_25A44C370((uint64_t)v21, (uint64_t)a1, a2, a3, a4);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    }
  }
  else
  {
    long long v19 = 0u;
    long long v20 = 0u;
    swift_bridgeObjectRelease();
  }
  sub_25A384BCC((uint64_t)&v19, &qword_26A416C28);
  sub_25A3ECF40();
  swift_allocError();
  uint64_t v18 = v17;
  *unint64_t v17 = v9;
  sub_25A3990F8((uint64_t)a1, (uint64_t)(v17 + 1));
  *((unsigned char *)v18 + 112) = 0;
  swift_bridgeObjectRetain();
  return swift_willThrow();
}

uint64_t static PropertyListBuilder.buildBlock<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T>(_:_:_:_:_:_:_:_:_:_:)(char *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, char *a6, void (*a7)(char *, char *, uint64_t), void (*a8)(void), char *a9, uint64_t a10, uint64_t a11, char *a12, char *a13, uint64_t a14, void (*a15)(char *, char *, uint64_t), void (*a16)(void), uint64_t a17, uint64_t a18, char *a19, char *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t *a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  v307 = a8;
  v305 = a7;
  v370 = a6;
  uint64_t v299 = a5;
  uint64_t v369 = a4;
  v366 = a3;
  uint64_t v365 = a2;
  v364 = a1;
  uint64_t v301 = a45;
  uint64_t v287 = a43;
  uint64_t v394 = a39;
  v397 = a37;
  v396 = a35;
  v379 = a33;
  uint64_t v378 = a31;
  uint64_t v377 = a29;
  uint64_t v395 = a27;
  uint64_t v376 = a25;
  uint64_t v375 = a23;
  uint64_t v268 = a22;
  uint64_t v351 = a21;
  uint64_t v277 = a41;
  v312 = a20;
  v317 = a19;
  uint64_t v318 = a18;
  uint64_t v315 = a17;
  v314 = a16;
  v311 = a15;
  uint64_t v310 = a14;
  v309 = a13;
  v308 = a12;
  uint64_t v306 = a11;
  uint64_t v304 = a10;
  v300 = a9;
  uint64_t v342 = a40;
  uint64_t v393 = sub_25A50FA40();
  uint64_t v373 = *(void *)(v393 - 8);
  MEMORY[0x270FA5388](v393);
  v341 = (char *)v247 - v60;
  uint64_t v340 = a38;
  uint64_t v372 = sub_25A50FA40();
  uint64_t v371 = *(void *)(v372 - 8);
  MEMORY[0x270FA5388](v372);
  v339 = (char *)v247 - v61;
  uint64_t v334 = a36;
  uint64_t v368 = sub_25A50FA40();
  uint64_t v367 = *(void *)(v368 - 8);
  MEMORY[0x270FA5388](v368);
  v329 = (char *)v247 - v62;
  uint64_t v326 = a34;
  uint64_t v361 = sub_25A50FA40();
  uint64_t v360 = *(void *)(v361 - 8);
  MEMORY[0x270FA5388](v361);
  v323 = (char *)v247 - v63;
  uint64_t v322 = a32;
  uint64_t v359 = sub_25A50FA40();
  uint64_t v358 = *(void *)(v359 - 8);
  MEMORY[0x270FA5388](v359);
  v320 = (char *)v247 - v64;
  uint64_t v319 = a30;
  uint64_t v357 = sub_25A50FA40();
  uint64_t v356 = *(void *)(v357 - 8);
  MEMORY[0x270FA5388](v357);
  v316 = (char *)v247 - v65;
  uint64_t v313 = a28;
  uint64_t v355 = sub_25A50FA40();
  uint64_t v354 = *(void *)(v355 - 8);
  MEMORY[0x270FA5388](v355);
  v302 = (char *)v247 - v66;
  uint64_t v303 = a26;
  uint64_t v353 = sub_25A50FA40();
  uint64_t v352 = *(void *)(v353 - 8);
  MEMORY[0x270FA5388](v353);
  v293 = (char *)v247 - v67;
  uint64_t v294 = a24;
  v374 = (uint64_t *)sub_25A50FA40();
  uint64_t v350 = *(v374 - 1);
  MEMORY[0x270FA5388](v374);
  v279 = (char *)v247 - v68;
  uint64_t v69 = sub_25A50FA40();
  uint64_t v349 = *(void *)(v69 - 8);
  MEMORY[0x270FA5388](v69);
  v252 = (char *)v247 - v70;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v338 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v71 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  v335 = (char *)v247 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v71);
  v391 = (char *)v247 - v73;
  uint64_t v390 = swift_getTupleTypeMetadata2();
  uint64_t v337 = *(void *)(v390 - 8);
  uint64_t v74 = MEMORY[0x270FA5388](v390);
  v324 = (char *)v247 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v74);
  v389 = (char *)v247 - v76;
  uint64_t v388 = swift_getTupleTypeMetadata2();
  uint64_t v336 = *(void *)(v388 - 8);
  uint64_t v77 = MEMORY[0x270FA5388](v388);
  v321 = (char *)v247 - ((v78 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v77);
  v387 = (char *)v247 - v79;
  uint64_t v386 = swift_getTupleTypeMetadata2();
  uint64_t v333 = *(void *)(v386 - 8);
  uint64_t v80 = MEMORY[0x270FA5388](v386);
  v347 = (char *)v247 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v80);
  v385 = (char *)v247 - v82;
  uint64_t v384 = swift_getTupleTypeMetadata2();
  uint64_t v332 = *(void *)(v384 - 8);
  uint64_t v83 = MEMORY[0x270FA5388](v384);
  v346 = (char *)v247 - ((v84 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v83);
  v383 = (char *)v247 - v85;
  uint64_t v382 = swift_getTupleTypeMetadata2();
  uint64_t v331 = *(void *)(v382 - 8);
  uint64_t v86 = MEMORY[0x270FA5388](v382);
  v345 = (char *)v247 - ((v87 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v86);
  v381 = (char *)v247 - v88;
  uint64_t v380 = swift_getTupleTypeMetadata2();
  uint64_t v330 = *(void *)(v380 - 8);
  uint64_t v89 = MEMORY[0x270FA5388](v380);
  v285 = (char *)v247 - ((v90 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v89);
  uint64_t v92 = (char *)v247 - v91;
  uint64_t v93 = swift_getTupleTypeMetadata2();
  uint64_t v328 = *(void *)(v93 - 8);
  uint64_t v94 = MEMORY[0x270FA5388](v93);
  v344 = (char *)v247 - ((v95 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v94);
  uint64_t v97 = (char *)v247 - v96;
  uint64_t v98 = swift_getTupleTypeMetadata2();
  uint64_t v327 = *(void *)(v98 - 8);
  uint64_t v99 = MEMORY[0x270FA5388](v98);
  v343 = (char *)v247 - ((v100 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v99);
  uint64_t v102 = (char *)v247 - v101;
  uint64_t v103 = v351;
  uint64_t v248 = v69;
  uint64_t v363 = swift_getTupleTypeMetadata2();
  uint64_t v325 = *(void *)(v363 - 8);
  uint64_t v104 = MEMORY[0x270FA5388](v363);
  v348 = (char *)v247 - ((v105 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v106 = MEMORY[0x270FA5388](v104);
  uint64_t v108 = (char *)v247 + *(int *)(v106 + 48) - v107;
  v362 = (char *)v247 - v107;
  uint64_t v251 = *(void *)(v103 - 8);
  uint64_t v109 = *(void (**)(void))(v251 + 16);
  v249 = v108;
  v250 = v109;
  v247[1] = v251 + 16;
  ((void (*)(char *, char *, uint64_t))v109)((char *)v247 - v107, v364, v103);
  uint64_t v110 = *(void (**)(char *, uint64_t, uint64_t))(v349 + 16);
  v247[0] = v349 + 16;
  v110(v108, v365, v69);
  uint64_t v111 = (void (*)(char *, char *, uint64_t))v110;
  uint64_t v365 = v98;
  v112 = &v102[*(int *)(v98 + 48)];
  uint64_t v258 = *(void *)(v375 - 8);
  uint64_t v113 = *(void (**)(char *, char *, uint64_t))(v258 + 16);
  v364 = v102;
  v255 = v113;
  uint64_t v256 = v258 + 16;
  ((void (*)(char *, char *))v113)(v102, v366);
  uint64_t v114 = *(void (**)(char *, char *, uint64_t *))(v350 + 16);
  v257 = v112;
  v253 = v114;
  uint64_t v254 = v350 + 16;
  v114(v112, (char *)v369, v374);
  uint64_t v369 = v93;
  unint64_t v115 = v252;
  uint64_t v116 = &v97[*(int *)(v93 + 48)];
  uint64_t v264 = *(void *)(v376 - 8);
  uint64_t v117 = *(void (**)(char *, char *, uint64_t))(v264 + 16);
  v366 = v97;
  uint64_t v118 = v378;
  v261 = v117;
  uint64_t v262 = v264 + 16;
  ((void (*)(char *, uint64_t))v117)(v97, v299);
  v119 = *(void (**)(char *, char *, uint64_t))(v352 + 16);
  v263 = v116;
  v259 = v119;
  uint64_t v260 = v352 + 16;
  v119(v116, v370, v353);
  uint64_t v120 = v354;
  uint64_t v121 = &v92[*(int *)(v380 + 48)];
  uint64_t v271 = *(void *)(v395 - 8);
  uint64_t v122 = *(void (**)(char *, char *, uint64_t))(v271 + 16);
  v370 = v92;
  uint64_t v123 = v368;
  uint64_t v269 = v271 + 16;
  v267 = v122;
  ((void (*)(char *, void (*)(char *, char *, uint64_t)))v122)(v92, v305);
  uint64_t v124 = *(void (**)(char *, char *, uint64_t))(v120 + 16);
  v270 = v121;
  v265 = v124;
  uint64_t v266 = v120 + 16;
  v124(v121, (char *)v307, v355);
  uint64_t v125 = &v381[*(int *)(v382 + 48)];
  uint64_t v278 = *(void *)(v377 - 8);
  v274 = *(void (**)(void))(v278 + 16);
  uint64_t v275 = v278 + 16;
  v274();
  uint64_t v126 = *(void (**)(char *, char *, uint64_t))(v356 + 16);
  v276 = v125;
  v272 = v126;
  uint64_t v273 = v356 + 16;
  v126(v125, (char *)v304, v357);
  char v127 = &v383[*(int *)(v384 + 48)];
  uint64_t v286 = *(void *)(v118 - 8);
  v282 = *(void (**)(void))(v286 + 16);
  uint64_t v283 = v286 + 16;
  v282();
  uint64_t v128 = *(void (**)(char *, char *, uint64_t))(v358 + 16);
  v284 = v127;
  v280 = v128;
  uint64_t v281 = v358 + 16;
  v128(v127, v308, v359);
  uint64_t v129 = &v385[*(int *)(v386 + 48)];
  uint64_t v295 = *(v379 - 1);
  v290 = *(void (**)(void))(v295 + 16);
  uint64_t v291 = v295 + 16;
  v290();
  v130 = *(void (**)(char *, char *, uint64_t))(v360 + 16);
  v292 = v129;
  v288 = v130;
  uint64_t v289 = v360 + 16;
  v130(v129, (char *)v310, v361);
  unint64_t v131 = &v387[*(int *)(v388 + 48)];
  uint64_t v304 = *(v396 - 1);
  v298 = *(void (**)(void))(v304 + 16);
  uint64_t v299 = v304 + 16;
  v298();
  char v132 = *(void (**)(char *, char *, uint64_t))(v367 + 16);
  v300 = v131;
  v296 = v132;
  uint64_t v297 = v367 + 16;
  v132(v131, (char *)v314, v123);
  uint64_t v133 = &v389[*(int *)(v390 + 48)];
  uint64_t v310 = *(v397 - 1);
  v307 = *(void (**)(void))(v310 + 16);
  v308 = (char *)(v310 + 16);
  v307();
  int v134 = *(void (**)(char *, char *, uint64_t))(v371 + 16);
  v309 = v133;
  v305 = v134;
  uint64_t v306 = v371 + 16;
  v134(v133, (char *)v318, v372);
  uint64_t v135 = &v391[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v318 = *(void *)(v394 - 8);
  uint64_t v136 = *(void (**)(void))(v318 + 16);
  uint64_t v315 = v318 + 16;
  v314 = v136;
  v136();
  unint64_t v137 = *(void (**)(char *, char *, uint64_t))(v373 + 16);
  v317 = v135;
  uint64_t v138 = v312;
  v312 = (char *)(v373 + 16);
  v311 = v137;
  v137(v135, v138, v393);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417728);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25A514740;
  uint64_t v140 = (uint64_t *)(inited + 48);
  *(void *)(inited + 32) = (*(uint64_t (**)(uint64_t))(v277 + 8))(v103);
  *(void *)(inited + 40) = v141;
  v142 = &v348[*(int *)(v363 + 48)];
  v250();
  uint64_t v143 = v248;
  v111(v142, v249, v248);
  uint64_t v144 = v349;
  (*(void (**)(char *, char *, uint64_t))(v349 + 32))(v115, v142, v143);
  uint64_t v145 = *(void *)(v268 - 8);
  v146 = v115;
  v147 = v115;
  uint64_t v148 = v268;
  if ((*(unsigned int (**)(char *, uint64_t))(v145 + 48))(v147, 1) == 1)
  {
    (*(void (**)(char *, uint64_t))(v251 + 8))(v348, v351);
    (*(void (**)(char *, uint64_t))(v144 + 8))(v146, v143);
    *(void *)(inited + 80) = 0;
    *(_OWORD *)uint64_t v140 = 0u;
    *(_OWORD *)(inited + 64) = 0u;
  }
  else
  {
    uint64_t v149 = *(void (**)(uint64_t, uint64_t))(a42 + 24);
    *(void *)(inited + 72) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 80) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1(v140);
    v149(v148, a42);
    (*(void (**)(char *, uint64_t))(v145 + 8))(v146, v148);
    (*(void (**)(char *, uint64_t))(v251 + 8))(v348, v351);
  }
  uint64_t v351 = a47;
  v150 = v364;
  uint64_t v151 = v375;
  *(void *)(inited + 88) = (*(uint64_t (**)(uint64_t))(v287 + 8))(v375);
  *(void *)(inited + 96) = v152;
  v153 = v343;
  uint64_t v154 = &v343[*(int *)(v365 + 48)];
  v255(v343, v150, v151);
  long long v155 = v374;
  v253(v154, v257, v374);
  uint64_t v156 = v350;
  uint64_t v157 = v279;
  (*(void (**)(char *, char *, uint64_t *))(v350 + 32))(v279, v154, v155);
  uint64_t v158 = v294;
  uint64_t v159 = *(void *)(v294 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v159 + 48))(v157, 1, v294) == 1)
  {
    (*(void (**)(char *, uint64_t))(v258 + 8))(v153, v151);
    (*(void (**)(char *, uint64_t *))(v156 + 8))(v157, v155);
    *(void *)(inited + 136) = 0;
    *(_OWORD *)(inited + 104) = 0u;
    *(_OWORD *)(inited + 120) = 0u;
  }
  else
  {
    v374 = *(uint64_t **)(a44 + 24);
    *(void *)(inited + 128) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 136) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 104));
    ((void (*)(uint64_t, uint64_t))v374)(v158, a44);
    (*(void (**)(char *, uint64_t))(v159 + 8))(v157, v158);
    (*(void (**)(char *, uint64_t))(v258 + 8))(v343, v151);
  }
  uint64_t v160 = v376;
  uint64_t v161 = v352;
  v162 = v344;
  uint64_t v376 = a49;
  v163 = v366;
  *(void *)(inited + 144) = (*(uint64_t (**)(uint64_t))(v301 + 8))(v160);
  *(void *)(inited + 152) = v164;
  v165 = &v162[*(int *)(v369 + 48)];
  v261(v162, v163, v160);
  uint64_t v166 = v353;
  v259(v165, v263, v353);
  v167 = v293;
  (*(void (**)(char *, char *, uint64_t))(v161 + 32))(v293, v165, v166);
  uint64_t v168 = v303;
  uint64_t v169 = *(void *)(v303 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v169 + 48))(v167, 1, v303) == 1)
  {
    (*(void (**)(char *, uint64_t))(v264 + 8))(v162, v160);
    (*(void (**)(char *, uint64_t))(v161 + 8))(v167, v166);
    *(void *)(inited + 192) = 0;
    *(_OWORD *)(inited + 160) = 0u;
    *(_OWORD *)(inited + 176) = 0u;
  }
  else
  {
    uint64_t v375 = *(void *)(a46 + 24);
    *(void *)(inited + 184) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 192) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 160));
    ((void (*)(uint64_t, uint64_t))v375)(v168, a46);
    (*(void (**)(char *, uint64_t))(v169 + 8))(v167, v168);
    (*(void (**)(char *, uint64_t))(v264 + 8))(v344, v160);
  }
  v170 = v302;
  uint64_t v171 = v354;
  uint64_t v375 = a51;
  v374 = (uint64_t *)(inited + 216);
  v172 = v370;
  uint64_t v173 = v395;
  *(void *)(inited + 200) = (*(uint64_t (**)(uint64_t))(v351 + 8))(v395);
  *(void *)(inited + 208) = v174;
  uint64_t v175 = v285;
  v176 = &v285[*(int *)(v380 + 48)];
  v267(v285, v172, v173);
  uint64_t v177 = v355;
  v265(v176, v270, v355);
  (*(void (**)(char *, char *, uint64_t))(v171 + 32))(v170, v176, v177);
  uint64_t v178 = v313;
  uint64_t v179 = *(void *)(v313 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v179 + 48))(v170, 1, v313) == 1)
  {
    (*(void (**)(char *, uint64_t))(v271 + 8))(v175, v173);
    (*(void (**)(char *, uint64_t))(v171 + 8))(v170, v177);
    uint64_t v180 = v374;
    v374[4] = 0;
    *(_OWORD *)uint64_t v180 = 0u;
    *((_OWORD *)v180 + 1) = 0u;
  }
  else
  {
    v181 = *(void (**)(uint64_t, uint64_t))(a48 + 24);
    *(void *)(inited + 240) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 248) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1(v374);
    v181(v178, a48);
    (*(void (**)(char *, uint64_t))(v179 + 8))(v170, v178);
    (*(void (**)(char *, uint64_t))(v271 + 8))(v175, v395);
  }
  uint64_t v182 = v377;
  uint64_t v183 = v316;
  uint64_t v395 = a53;
  uint64_t v184 = v381;
  *(void *)(inited + 256) = (*(uint64_t (**)(uint64_t))(v376 + 8))(v377);
  *(void *)(inited + 264) = v185;
  v186 = v345;
  v187 = &v345[*(int *)(v382 + 48)];
  ((void (*)(char *, char *, uint64_t))v274)(v345, v184, v182);
  uint64_t v188 = v357;
  v272(v187, v276, v357);
  uint64_t v189 = v356;
  (*(void (**)(char *, char *, uint64_t))(v356 + 32))(v183, v187, v188);
  uint64_t v190 = v319;
  uint64_t v191 = *(void *)(v319 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v191 + 48))(v183, 1, v319) == 1)
  {
    (*(void (**)(char *, uint64_t))(v278 + 8))(v186, v182);
    (*(void (**)(char *, uint64_t))(v189 + 8))(v183, v188);
    *(void *)(inited + 304) = 0;
    *(_OWORD *)(inited + 272) = 0u;
    *(_OWORD *)(inited + 288) = 0u;
  }
  else
  {
    uint64_t v377 = *(void *)(a50 + 24);
    *(void *)(inited + 296) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 304) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 272));
    ((void (*)(uint64_t, uint64_t))v377)(v190, a50);
    (*(void (**)(char *, uint64_t))(v191 + 8))(v183, v190);
    (*(void (**)(char *, uint64_t))(v278 + 8))(v345, v182);
  }
  uint64_t v192 = v378;
  uint64_t v193 = v358;
  v194 = v346;
  uint64_t v378 = a55;
  v195 = v383;
  *(void *)(inited + 312) = (*(uint64_t (**)(uint64_t))(v375 + 8))(v192);
  *(void *)(inited + 320) = v196;
  v197 = &v194[*(int *)(v384 + 48)];
  ((void (*)(char *, char *, uint64_t))v282)(v194, v195, v192);
  uint64_t v198 = v359;
  v280(v197, v284, v359);
  v199 = v320;
  (*(void (**)(char *, char *, uint64_t))(v193 + 32))(v320, v197, v198);
  uint64_t v200 = v322;
  uint64_t v201 = *(void *)(v322 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v201 + 48))(v199, 1, v322) == 1)
  {
    (*(void (**)(char *, uint64_t))(v286 + 8))(v194, v192);
    (*(void (**)(char *, uint64_t))(v193 + 8))(v199, v198);
    *(void *)(inited + 360) = 0;
    *(_OWORD *)(inited + 328) = 0u;
    *(_OWORD *)(inited + 344) = 0u;
  }
  else
  {
    uint64_t v377 = *(void *)(a52 + 24);
    *(void *)(inited + 352) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 360) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 328));
    ((void (*)(uint64_t, uint64_t))v377)(v200, a52);
    (*(void (**)(char *, uint64_t))(v201 + 8))(v199, v200);
    (*(void (**)(char *, uint64_t))(v286 + 8))(v346, v192);
  }
  uint64_t v202 = v361;
  uint64_t v203 = v360;
  v204 = v347;
  uint64_t v377 = a57;
  v205 = v385;
  v206 = v379;
  *(void *)(inited + 368) = (*(uint64_t (**)(void *))(v395 + 8))(v379);
  *(void *)(inited + 376) = v207;
  v208 = &v204[*(int *)(v386 + 48)];
  v209 = v205;
  v210 = v206;
  ((void (*)(char *, char *, void *))v290)(v204, v209, v206);
  v288(v208, v292, v202);
  v211 = v323;
  (*(void (**)(char *, char *, uint64_t))(v203 + 32))(v323, v208, v202);
  uint64_t v212 = v326;
  uint64_t v213 = *(void *)(v326 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v213 + 48))(v211, 1, v326) == 1)
  {
    (*(void (**)(char *, void *))(v295 + 8))(v204, v210);
    (*(void (**)(char *, uint64_t))(v203 + 8))(v211, v202);
    *(void *)(inited + 416) = 0;
    *(_OWORD *)(inited + 384) = 0u;
    *(_OWORD *)(inited + 400) = 0u;
  }
  else
  {
    uint64_t v395 = *(void *)(a54 + 24);
    *(void *)(inited + 408) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 416) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 384));
    ((void (*)(uint64_t, uint64_t))v395)(v212, a54);
    (*(void (**)(char *, uint64_t))(v213 + 8))(v211, v212);
    (*(void (**)(char *, void *))(v295 + 8))(v347, v210);
  }
  v214 = v396;
  uint64_t v215 = v367;
  uint64_t v395 = a59;
  v216 = v387;
  *(void *)(inited + 424) = (*(uint64_t (**)(uint64_t *))(v378 + 8))(v396);
  *(void *)(inited + 432) = v217;
  v218 = v321;
  v219 = &v321[*(int *)(v388 + 48)];
  ((void (*)(char *, char *, uint64_t *))v298)(v321, v216, v214);
  uint64_t v220 = v368;
  v296(v219, v300, v368);
  v221 = v329;
  (*(void (**)(char *, char *, uint64_t))(v215 + 32))(v329, v219, v220);
  uint64_t v222 = v334;
  uint64_t v223 = *(void *)(v334 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v223 + 48))(v221, 1, v334) == 1)
  {
    (*(void (**)(char *, uint64_t *))(v304 + 8))(v218, v214);
    (*(void (**)(char *, uint64_t))(v215 + 8))(v221, v220);
    *(void *)(inited + 472) = 0;
    *(_OWORD *)(inited + 440) = 0u;
    *(_OWORD *)(inited + 456) = 0u;
  }
  else
  {
    v379 = *(void **)(a56 + 24);
    *(void *)(inited + 464) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 472) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 440));
    ((void (*)(uint64_t, uint64_t))v379)(v222, a56);
    (*(void (**)(char *, uint64_t))(v223 + 8))(v221, v222);
    (*(void (**)(char *, uint64_t *))(v304 + 8))(v218, v396);
  }
  uint64_t v224 = v371;
  v225 = v389;
  v226 = v397;
  *(void *)(inited + 480) = (*(uint64_t (**)(void *))(v377 + 8))(v397);
  *(void *)(inited + 488) = v227;
  v228 = v324;
  v229 = &v324[*(int *)(v390 + 48)];
  ((void (*)(char *, char *, void *))v307)(v324, v225, v226);
  uint64_t v230 = v372;
  v305(v229, v309, v372);
  v231 = v339;
  (*(void (**)(char *, char *, uint64_t))(v224 + 32))(v339, v229, v230);
  uint64_t v232 = v340;
  uint64_t v233 = *(void *)(v340 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v233 + 48))(v231, 1, v340) == 1)
  {
    (*(void (**)(char *, void *))(v310 + 8))(v228, v226);
    (*(void (**)(char *, uint64_t))(v224 + 8))(v231, v230);
    *(void *)(inited + 528) = 0;
    *(_OWORD *)(inited + 496) = 0u;
    *(_OWORD *)(inited + 512) = 0u;
  }
  else
  {
    v396 = *(uint64_t **)(a58 + 24);
    *(void *)(inited + 520) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 528) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 496));
    ((void (*)(uint64_t, uint64_t))v396)(v232, a58);
    (*(void (**)(char *, uint64_t))(v233 + 8))(v231, v232);
    (*(void (**)(char *, void *))(v310 + 8))(v228, v397);
  }
  uint64_t v234 = v394;
  uint64_t v235 = v373;
  v236 = v391;
  *(void *)(inited + 536) = (*(uint64_t (**)(uint64_t))(v395 + 8))(v394);
  *(void *)(inited + 544) = v237;
  v238 = v335;
  v239 = &v335[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, char *, uint64_t))v314)(v335, v236, v234);
  uint64_t v240 = v393;
  v311(v239, v317, v393);
  v241 = v341;
  (*(void (**)(char *, char *, uint64_t))(v235 + 32))(v341, v239, v240);
  uint64_t v242 = v342;
  uint64_t v243 = *(void *)(v342 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v243 + 48))(v241, 1, v342) == 1)
  {
    (*(void (**)(char *, uint64_t))(v318 + 8))(v238, v234);
    (*(void (**)(char *, uint64_t))(v235 + 8))(v241, v240);
    *(void *)(inited + 584) = 0;
    *(_OWORD *)(inited + 552) = 0u;
    *(_OWORD *)(inited + 568) = 0u;
  }
  else
  {
    v396 = (uint64_t *)(inited + 552);
    v397 = *(void **)(a60 + 24);
    *(void *)(inited + 576) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 584) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1(v396);
    ((void (*)(uint64_t, uint64_t))v397)(v242, a60);
    (*(void (**)(char *, uint64_t))(v243 + 8))(v241, v242);
    (*(void (**)(char *, uint64_t))(v318 + 8))(v238, v234);
  }
  unint64_t v244 = sub_25A392B24(inited);
  uint64_t v245 = sub_25A44B160(v244);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v338 + 8))(v391, TupleTypeMetadata2);
  (*(void (**)(char *, uint64_t))(v337 + 8))(v389, v390);
  (*(void (**)(char *, uint64_t))(v336 + 8))(v387, v388);
  (*(void (**)(char *, uint64_t))(v333 + 8))(v385, v386);
  (*(void (**)(char *, uint64_t))(v332 + 8))(v383, v384);
  (*(void (**)(char *, uint64_t))(v331 + 8))(v381, v382);
  (*(void (**)(char *, uint64_t))(v330 + 8))(v370, v380);
  (*(void (**)(char *, uint64_t))(v328 + 8))(v366, v369);
  (*(void (**)(char *, uint64_t))(v327 + 8))(v364, v365);
  (*(void (**)(char *, uint64_t))(v325 + 8))(v362, v363);
  return v245;
}

uint64_t PropertyList.unarchiveOptionalValue<A>(for:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v10 = *v4;
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
  if (!*(void *)(v10 + 16) || (unint64_t v15 = sub_25A409670(v13, v14), (v16 & 1) == 0))
  {
    long long v18 = 0u;
    long long v19 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  sub_25A3937CC(*(void *)(v10 + 56) + 32 * v15, (uint64_t)&v18);
  swift_bridgeObjectRelease();
  if (!*((void *)&v19 + 1))
  {
LABEL_7:
    sub_25A384BCC((uint64_t)&v18, &qword_26A416C28);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(a4, 1, 1, a2);
  }
  sub_25A3936C4(&v18, v20);
  *(void *)&long long v18 = v10;
  sub_25A44C370((uint64_t)v20, (uint64_t)a1, a2, a3, a4);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  if (!v5) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(a4, 0, 1, a2);
  }
  return result;
}

PreviewsFoundationOS::PropertyList __swiftcall PropertyList.init(serializableDictionary:)(PreviewsFoundationOS::PropertyList serializableDictionary)
{
  v1->serializableDictionary._rawValue = serializableDictionary.serializableDictionary._rawValue;
  return serializableDictionary;
}

uint64_t PropertyListRepresentable.init(propertyList:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v33 = a3;
  uint64_t v32 = *(void *)(a2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v34 = (uint64_t)&v32 - v7;
  uint64_t v35 = v8;
  uint64_t v37 = v9;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = sub_25A50FA40();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  unint64_t v15 = (char *)&v32 - v14;
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v13);
  long long v19 = (char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v32 - v20;
  uint64_t v22 = *a1;
  v38[0] = v22;
  swift_bridgeObjectRetain();
  char v23 = swift_dynamicCast();
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  if (v23)
  {
    v24(v15, 0, 1, AssociatedTypeWitness);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v21, v15, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v19, v21, AssociatedTypeWitness);
    uint64_t v25 = v36;
    uint64_t v26 = (uint64_t)v6;
    uint64_t v27 = v37;
    (*(void (**)(char *, uint64_t))(v35 + 32))(v19, v37);
    if (v25) {
      return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v21, AssociatedTypeWitness);
    }
    uint64_t v31 = v27;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v21, AssociatedTypeWitness);
  }
  else
  {
    v24(v15, 1, 1, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    v38[6] = v22;
    v38[3] = MEMORY[0x263F8D310];
    v38[4] = &protocol witness table for String;
    v38[0] = 0x65756C6176;
    v38[1] = 0xE500000000000000;
    uint64_t v26 = v34;
    uint64_t v29 = v36;
    uint64_t v30 = v37;
    PropertyList.unarchiveValue<A>(for:)(v38, v37, v35, v34);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v31 = v30;
    if (v29) {
      return result;
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 32))(v33, v26, v31);
}

uint64_t PropertyListRepresentable<>.propertyListValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v2, a1);
}

uint64_t sub_25A44A50C(void *a1, uint64_t *a2, uint64_t a3)
{
  *a1 = 0x65756C6176;
  a1[1] = 0xE500000000000000;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  a2[3] = AssociatedTypeWitness;
  a2[4] = swift_getAssociatedConformanceWitness();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16);

  return v7(boxed_opaque_existential_1, a3, AssociatedTypeWitness);
}

uint64_t sub_25A44A5EC(void *a1, uint64_t *a2)
{
  return sub_25A44A50C(a1, a2, *(void *)(v2 + 32));
}

uint64_t sub_25A44A5F8@<X0>(void (*a1)(void *, unsigned char *)@<X0>, uint64_t *a2@<X8>)
{
  a1(v10, v11);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417728);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25A5119F0;
  uint64_t v4 = v10[1];
  *(void *)(inited + 32) = v10[0];
  *(void *)(inited + 40) = v4;
  sub_25A45FCE4((uint64_t)v11, (uint64_t)v9);
  sub_25A3936D4((uint64_t)v9, inited + 48);
  swift_bridgeObjectRetain();
  unint64_t v5 = sub_25A392B24(inited);
  uint64_t v6 = sub_25A44B160(v5);
  swift_bridgeObjectRelease();
  uint64_t v7 = sub_25A3EB380(v6);
  swift_bridgeObjectRelease();
  uint64_t result = sub_25A384BCC((uint64_t)v10, &qword_26A415AF8);
  *a2 = v7;
  return result;
}

uint64_t PropertyList.init<A>(content:)@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v25 = a4;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415B00);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v8 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v9);
  uint64_t v14 = (char *)&v24 - v13;
  unint64_t v15 = (char *)&v24 + *(int *)(v12 + 48) - v13;
  a1((char *)&v24 - v13, v15);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417728);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25A5119F0;
  *(void *)(inited + 32) = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
  *(void *)(inited + 40) = v17;
  uint64_t v18 = (uint64_t)&v11[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v19 = *(void *)(a2 - 8);
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v11, v14, a2);
  sub_25A45FCE4((uint64_t)v15, v18);
  sub_25A3936D4(v18, inited + 48);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v11, a2);
  unint64_t v20 = sub_25A392B24(inited);
  uint64_t v21 = sub_25A44B160(v20);
  swift_bridgeObjectRelease();
  uint64_t v22 = sub_25A3EB380(v21);
  swift_bridgeObjectRelease();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v14, TupleTypeMetadata2);
  *uint64_t v25 = v22;
  return result;
}

uint64_t PropertyListRepresentable.serializableDictionary.getter(uint64_t a1, uint64_t a2)
{
  PropertyListRepresentable.propertyList.getter(a1, a2, &v3);
  return v3;
}

uint64_t PropertyListRepresentable.init(serializableDictionary:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = a1;
  return PropertyListRepresentable.init(propertyList:)(&v4, a2, a3);
}

void sub_25A44A990(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_25A44A99C@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

void *sub_25A44A9A8@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = result[1];
  *a2 = *result;
  a2[1] = v2;
  return result;
}

uint64_t sub_25A44A9B4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  return sub_25A39375C(v2, v3);
}

__n128 sub_25A44A9C0@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

float sub_25A44A9CC@<S0>(_DWORD *a1@<X8>)
{
  float result = *v1;
  *a1 = *(_DWORD *)v1;
  return result;
}

float sub_25A44A9D8@<S0>(float *a1@<X0>, _DWORD *a2@<X8>)
{
  float result = *a1;
  *a2 = *(_DWORD *)a1;
  return result;
}

double sub_25A44A9E4@<D0>(void *a1@<X8>)
{
  double result = *v1;
  *a1 = *(void *)v1;
  return result;
}

void sub_25A44A9F0(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

_DWORD *sub_25A44A9FC@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_25A44AA08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v2, a1);
}

uint64_t sub_25A44AA3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1);
}

id sub_25A44AA94@<X0>(void **a1@<X8>)
{
  uint64_t v2 = *v1;
  *a1 = *v1;
  return v2;
}

uint64_t String.rawValue.getter(uint64_t a1)
{
  return a1;
}

uint64_t PropertyList.serializableDictionary.getter()
{
  return swift_bridgeObjectRetain();
}

PreviewsFoundationOS::PropertyList __swiftcall PropertyList.init()()
{
  unint64_t v1 = v0;
  result.serializableDictionary._rawValue = (void *)sub_25A392EA8(MEMORY[0x263F8EE78]);
  v1->serializableDictionary._rawValue = result.serializableDictionary._rawValue;
  return result;
}

unint64_t static PropertyList.empty.getter@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_25A392EA8(MEMORY[0x263F8EE78]);
  *a1 = result;
  return result;
}

uint64_t PropertyList.description.getter()
{
  swift_bridgeObjectRetain();
  uint64_t v0 = sub_25A50E8B0();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PropertyList.init<A, B>(content:)@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v53 = a4;
  uint64_t v51 = a6;
  uint64_t v10 = sub_25A50FA40();
  uint64_t v44 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v43 = (char *)&v39 - v11;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v49 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  unint64_t v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v13);
  uint64_t v18 = (char *)&v39 - v17;
  uint64_t v40 = (char *)&v39 + *(int *)(v16 + 48) - v17;
  a1((char *)&v39 - v17);
  uint64_t v52 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v46 = sub_25A50FA40();
  uint64_t v20 = swift_getTupleTypeMetadata2();
  sub_25A5102C0();
  swift_allocObject();
  uint64_t v21 = sub_25A50F0C0();
  char v23 = v22;
  uint64_t v41 = (char *)v22 + *(int *)(v20 + 48);
  uint64_t v42 = v21;
  void *v22 = (*(uint64_t (**)(uint64_t))(v53 + 8))(a2);
  v23[1] = v24;
  uint64_t v50 = TupleTypeMetadata2;
  uint64_t v25 = &v15[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v26 = *(void *)(a2 - 8);
  uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v26 + 16);
  uint64_t v45 = v15;
  uint64_t v47 = v18;
  uint64_t v48 = a2;
  v27(v15, v18, a2);
  uint64_t v28 = v44;
  (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v25, v40, v10);
  uint64_t v29 = v28;
  uint64_t v30 = v43;
  (*(void (**)(void))(v28 + 32))();
  uint64_t v31 = *(void *)(a3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v30, 1, a3) == 1)
  {
    uint64_t v32 = v48;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v45, v48);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v10);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v41, 1, 1, AssociatedTypeWitness);
  }
  else
  {
    uint64_t v33 = v41;
    (*(void (**)(uint64_t))(v52 + 24))(a3);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v30, a3);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v33, 0, 1, AssociatedTypeWitness);
    uint64_t v32 = v48;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v45, v48);
  }
  sub_25A3DFCA4();
  uint64_t v34 = sub_25A50E900();
  MEMORY[0x270FA5388](v34);
  *(&v39 - 4) = v32;
  *(&v39 - 3) = a3;
  uint64_t v35 = v52;
  *(&v39 - 2) = v53;
  *(&v39 - 1) = v35;
  sub_25A50E8F0();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417778);
  uint64_t v36 = sub_25A510070();
  swift_bridgeObjectRelease();
  uint64_t v37 = sub_25A3EB380(v36);
  swift_bridgeObjectRelease();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v47, v50);
  *uint64_t v51 = v37;
  return result;
}

uint64_t sub_25A44B148(uint64_t a1)
{
  return sub_25A44B160(a1);
}

uint64_t sub_25A44B160(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8EE80];
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v32 = a1 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v44 = MEMORY[0x263F8EE80];
  if (-v4 < 64) {
    uint64_t v5 = ~(-1 << -(char)v4);
  }
  else {
    uint64_t v5 = -1;
  }
  unint64_t v6 = v5 & v3;
  int64_t v31 = (unint64_t)(63 - v4) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v11 = v10 | (v8 << 6);
      goto LABEL_25;
    }
    int64_t v12 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    if (v12 >= v31) {
      goto LABEL_40;
    }
    unint64_t v13 = *(void *)(v32 + 8 * v12);
    int64_t v14 = v8 + 1;
    if (!v13)
    {
      int64_t v14 = v8 + 2;
      if (v8 + 2 >= v31) {
        goto LABEL_40;
      }
      unint64_t v13 = *(void *)(v32 + 8 * v14);
      if (!v13)
      {
        int64_t v14 = v8 + 3;
        if (v8 + 3 >= v31) {
          goto LABEL_40;
        }
        unint64_t v13 = *(void *)(v32 + 8 * v14);
        if (!v13)
        {
          int64_t v14 = v8 + 4;
          if (v8 + 4 >= v31) {
            goto LABEL_40;
          }
          unint64_t v13 = *(void *)(v32 + 8 * v14);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_24:
    unint64_t v6 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
    int64_t v8 = v14;
LABEL_25:
    uint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    sub_25A45FCE4(*(void *)(a1 + 56) + 40 * v11, (uint64_t)v42);
    *(void *)&long long v41 = v18;
    *((void *)&v41 + 1) = v17;
    long long v38 = v41;
    v39[0] = v42[0];
    v39[1] = v42[1];
    uint64_t v40 = v43;
    sub_25A45FCE4((uint64_t)v39, (uint64_t)&v33);
    if (v34)
    {
      sub_25A3C85D8(&v33, (uint64_t)v37);
      long long v19 = v38;
      *(_OWORD *)&v35[5] = v38;
      sub_25A3936D4((uint64_t)v39, (uint64_t)v36);
      sub_25A3C85D8(v37, (uint64_t)v35);
      unint64_t v20 = *(void *)(v2 + 16);
      if (*(void *)(v2 + 24) <= v20)
      {
        uint64_t v21 = v20 + 1;
        swift_bridgeObjectRetain();
        sub_25A40A914(v21, 1);
        uint64_t v2 = v44;
      }
      else
      {
        swift_bridgeObjectRetain();
      }
      sub_25A5104E0();
      sub_25A50ED30();
      uint64_t result = sub_25A510530();
      uint64_t v22 = v2 + 64;
      uint64_t v23 = -1 << *(unsigned char *)(v2 + 32);
      unint64_t v24 = result & ~v23;
      unint64_t v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v2 + 64 + 8 * (v24 >> 6))) != 0)
      {
        unint64_t v26 = __clz(__rbit64((-1 << v24) & ~*(void *)(v2 + 64 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v27 = 0;
        unint64_t v28 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v29 = v25 == v28;
          if (v25 == v28) {
            unint64_t v25 = 0;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v22 + 8 * v25);
        }
        while (v30 == -1);
        unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
      }
      *(void *)(v22 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
      *(_OWORD *)(*(void *)(v2 + 48) + 16 * v26) = v19;
      sub_25A3C85D8((long long *)v35, *(void *)(v2 + 56) + 40 * v26);
      ++*(void *)(v2 + 16);
      uint64_t v9 = (long long *)v36;
    }
    else
    {
      swift_bridgeObjectRetain();
      sub_25A384BCC((uint64_t)&v38, &qword_26A4195D0);
      uint64_t v9 = &v33;
    }
    uint64_t result = sub_25A384BCC((uint64_t)v9, &qword_26A415B00);
  }
  int64_t v15 = v8 + 5;
  if (v8 + 5 >= v31)
  {
LABEL_40:
    sub_25A39C550();
    return v2;
  }
  unint64_t v13 = *(void *)(v32 + 8 * v15);
  if (v13)
  {
    int64_t v14 = v8 + 5;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v14 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v14 >= v31) {
      goto LABEL_40;
    }
    unint64_t v13 = *(void *)(v32 + 8 * v14);
    ++v15;
    if (v13) {
      goto LABEL_24;
    }
  }
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_25A44B520(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8EE80];
  uint64_t v3 = a1 + 64;
  uint64_t v32 = MEMORY[0x263F8EE80];
  uint64_t v4 = -1 << *(unsigned char *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1 << -(char)v4);
  }
  else {
    uint64_t v5 = -1;
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v7 = (unint64_t)(63 - v4) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v9 = 0;
  if (!v6) {
    goto LABEL_8;
  }
LABEL_5:
  unint64_t v10 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  unint64_t v11 = v10 | (v9 << 6);
  while (1)
  {
    uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 8 * v11);
    if (v12)
    {
      uint64_t v17 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
      uint64_t v18 = v17[1];
      uint64_t v31 = *v17;
      unint64_t v19 = *(void *)(v2 + 16);
      if (*(void *)(v2 + 24) <= v19)
      {
        uint64_t v20 = v19 + 1;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        sub_25A40AC3C(v20, 1);
        uint64_t v2 = v32;
      }
      else
      {
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
      }
      sub_25A5104E0();
      sub_25A50ED30();
      uint64_t result = sub_25A510530();
      uint64_t v21 = v2 + 64;
      uint64_t v22 = -1 << *(unsigned char *)(v2 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v2 + 64 + 8 * (v23 >> 6))) == 0)
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v22) >> 6;
        while (++v24 != v27 || (v26 & 1) == 0)
        {
          BOOL v28 = v24 == v27;
          if (v24 == v27) {
            unint64_t v24 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v21 + 8 * v24);
          if (v29 != -1)
          {
            unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
            goto LABEL_37;
          }
        }
        goto LABEL_41;
      }
      unint64_t v25 = __clz(__rbit64((-1 << v23) & ~*(void *)(v2 + 64 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
LABEL_37:
      *(void *)(v21 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
      uint64_t v30 = (void *)(*(void *)(v2 + 48) + 16 * v25);
      *uint64_t v30 = v31;
      v30[1] = v18;
      *(void *)(*(void *)(v2 + 56) + 8 * v25) = v12;
      ++*(void *)(v2 + 16);
      uint64_t result = swift_bridgeObjectRelease();
      if (v6) {
        goto LABEL_5;
      }
    }
    else if (v6)
    {
      goto LABEL_5;
    }
LABEL_8:
    int64_t v13 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    if (v13 >= v7) {
      goto LABEL_39;
    }
    unint64_t v14 = *(void *)(v3 + 8 * v13);
    int64_t v15 = v9 + 1;
    if (!v14)
    {
      int64_t v15 = v9 + 2;
      if (v9 + 2 >= v7) {
        goto LABEL_39;
      }
      unint64_t v14 = *(void *)(v3 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v9 + 3;
        if (v9 + 3 >= v7) {
          goto LABEL_39;
        }
        unint64_t v14 = *(void *)(v3 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v9 + 4;
          if (v9 + 4 >= v7) {
            goto LABEL_39;
          }
          unint64_t v14 = *(void *)(v3 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v6 = (v14 - 1) & v14;
    unint64_t v11 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v9 = v15;
  }
  int64_t v16 = v9 + 5;
  if (v9 + 5 >= v7)
  {
LABEL_39:
    sub_25A39C550();
    return v2;
  }
  unint64_t v14 = *(void *)(v3 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v9 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v7) {
      goto LABEL_39;
    }
    unint64_t v14 = *(void *)(v3 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_23;
    }
  }
LABEL_42:
  __break(1u);
  return result;
}

unint64_t sub_25A44B820(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A417EC0);
    uint64_t v2 = (void *)sub_25A510130();
  }
  else
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
  }
  uint64_t v29 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v28 = (unint64_t)(63 - v3) >> 6;
  unint64_t v6 = (long long *)v30;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t i = 0;
  if (v5) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v14 = i + 1;
  if (__OFADD__(i, 1)) {
    goto LABEL_35;
  }
  if (v14 >= v28) {
    goto LABEL_32;
  }
  unint64_t v15 = *(void *)(v29 + 8 * v14);
  int64_t v16 = i + 1;
  if (!v15)
  {
    int64_t v16 = i + 2;
    if (i + 2 >= v28) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v29 + 8 * v16);
    if (!v15)
    {
      int64_t v16 = i + 3;
      if (i + 3 >= v28) {
        goto LABEL_32;
      }
      unint64_t v15 = *(void *)(v29 + 8 * v16);
      if (!v15)
      {
        int64_t v16 = i + 4;
        if (i + 4 >= v28) {
          goto LABEL_32;
        }
        unint64_t v15 = *(void *)(v29 + 8 * v16);
        if (!v15)
        {
          int64_t v17 = i + 5;
          if (i + 5 < v28)
          {
            unint64_t v15 = *(void *)(v29 + 8 * v17);
            if (v15)
            {
              int64_t v16 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              int64_t v16 = v17 + 1;
              if (__OFADD__(v17, 1)) {
                goto LABEL_36;
              }
              if (v16 >= v28) {
                break;
              }
              unint64_t v15 = *(void *)(v29 + 8 * v16);
              ++v17;
              if (v15) {
                goto LABEL_26;
              }
            }
          }
LABEL_32:
          sub_25A39C550();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  unint64_t v5 = (v15 - 1) & v15;
  unint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
  for (i = v16; ; unint64_t v13 = v12 | (i << 6))
  {
    uint64_t v18 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v13);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    uint64_t v21 = *(void *)(*(void *)(a1 + 56) + 8 * v13);
    v30[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_26A417748);
    v30[4] = sub_25A461A2C();
    v30[0] = v21;
    sub_25A3C85D8(v6, (uint64_t)v32);
    sub_25A3C85D8(v32, (uint64_t)v33);
    sub_25A3C85D8(v33, (uint64_t)&v31);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_25A409670(v20, v19);
    unint64_t v22 = result;
    if (v23)
    {
      int64_t v9 = v6;
      unint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *unint64_t v10 = v20;
      v10[1] = v19;
      unint64_t v6 = v9;
      uint64_t v11 = v2[7] + 40 * v22;
      __swift_destroy_boxed_opaque_existential_1(v11);
      unint64_t result = sub_25A3C85D8(&v31, v11);
      if (!v5) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    unint64_t v24 = (uint64_t *)(v2[6] + 16 * result);
    *unint64_t v24 = v20;
    v24[1] = v19;
    unint64_t result = sub_25A3C85D8(&v31, v2[7] + 40 * result);
    uint64_t v25 = v2[2];
    BOOL v26 = __OFADD__(v25, 1);
    uint64_t v27 = v25 + 1;
    if (v26) {
      goto LABEL_34;
    }
    v2[2] = v27;
    if (!v5) {
      goto LABEL_11;
    }
LABEL_10:
    unint64_t v12 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t PropertyList.archiveValue<A>(_:for:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a2;
  uint64_t v7 = sub_25A50FA40();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  unint64_t v10 = (char *)&v47 - v9;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = sub_25A50FA40();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v50 = v12;
  uint64_t v51 = v13;
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v48 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v47 - v17;
  MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v47 - v19;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  uint64_t v21 = *(void *)(a3 - 8);
  uint64_t v22 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v10, 1, a3) == 1)
  {
    a3 = v7;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4);
    uint64_t v22 = 0;
    uint64_t v8 = v21;
  }
  uint64_t v23 = v51;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a3);
  uint64_t v24 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56))(v20, v22, 1, AssociatedTypeWitness);
  uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v23 + 16);
  uint64_t v26 = v50;
  v25(v18, v20, v50);
  uint64_t v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48);
  int v28 = v27(v18, 1, AssociatedTypeWitness);
  uint64_t v47 = v24;
  if (v28 == 1)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v18, v26);
    uint64_t v29 = v26;
LABEL_9:
    uint64_t v54 = 0;
    long long v52 = 0u;
    long long v53 = 0u;
    uint64_t v30 = v49;
    goto LABEL_10;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417750);
  uint64_t v29 = v26;
  if (!swift_dynamicCast()) {
    goto LABEL_9;
  }
  uint64_t v30 = v49;
  if (*((void *)&v53 + 1))
  {
    sub_25A3C85D8(&v52, (uint64_t)&v55);
    uint64_t v31 = v30[3];
    uint64_t v32 = v30[4];
    __swift_project_boxed_opaque_existential_1(v30, v31);
    uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 8))(v31, v32);
    uint64_t v35 = v34;
    uint64_t v36 = *((void *)&v56 + 1);
    uint64_t v37 = v57;
    __swift_project_boxed_opaque_existential_1(&v55, *((uint64_t *)&v56 + 1));
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v37 + 8))(&v52, v36, v37);
    sub_25A4A19EC((uint64_t)&v52, v33, v35);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v20, v29);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v55);
  }
LABEL_10:
  sub_25A384BCC((uint64_t)&v52, &qword_26A417780);
  uint64_t v39 = v30[3];
  uint64_t v40 = v30[4];
  __swift_project_boxed_opaque_existential_1(v30, v39);
  uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 8))(v39, v40);
  uint64_t v43 = v42;
  uint64_t v44 = v48;
  v25(v48, v20, v29);
  if (v27(v44, 1, AssociatedTypeWitness) == 1)
  {
    uint64_t v45 = v51;
    (*(void (**)(char *, uint64_t))(v51 + 8))(v44, v29);
    long long v55 = 0u;
    long long v56 = 0u;
  }
  else
  {
    *((void *)&v56 + 1) = AssociatedTypeWitness;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v55);
    (*(void (**)(uint64_t *, char *, uint64_t))(v47 + 32))(boxed_opaque_existential_1, v44, AssociatedTypeWitness);
    uint64_t v45 = v51;
  }
  sub_25A4A19EC((uint64_t)&v55, v41, v43);
  return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v20, v29);
}

uint64_t PropertyList.merging(_:uniquingKeysWith:)@<X0>(void (*a1)(_OWORD *__return_ptr, id *, _OWORD *)@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v8 = *v3;
  swift_bridgeObjectRetain();
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t result = sub_25A44C0F0(v9, a1, a2, v8);
  if (!v4) {
    *a3 = result;
  }
  return result;
}

uint64_t sub_25A44C0F0(uint64_t a1, void (*a2)(_OWORD *__return_ptr, id *, _OWORD *), uint64_t a3, uint64_t a4)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_25A45F938(a1, (uint64_t)sub_25A45F8E4, 0, isUniquelyReferenced_nonNull_native, a2, a3);
  swift_bridgeObjectRelease();
  if (v4) {
    swift_bridgeObjectRelease();
  }
  return a4;
}

PreviewsFoundationOS::PropertyList __swiftcall PropertyList.confidentlyMerging(_:)(PreviewsFoundationOS::PropertyList a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = *v2;
  swift_bridgeObjectRetain();
  uint64_t v5 = swift_bridgeObjectRetain();
  result.serializableDictionary._rawValue = (void *)sub_25A460078(v5, v4);
  v3->serializableDictionary._rawValue = result.serializableDictionary._rawValue;
  return result;
}

uint64_t PropertyList.merge(_:uniquingKeysWith:)(uint64_t *a1, void (*a2)(_OWORD *__return_ptr, id *, _OWORD *), uint64_t a3)
{
  uint64_t v6 = *a1;
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t *v3 = 0x8000000000000000;
  sub_25A45F938(v6, (uint64_t)sub_25A45F8E4, 0, isUniquelyReferenced_nonNull_native, a2, a3);
  uint64_t *v3 = v9;
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall PropertyList.confidentlyMerge(_:)(PreviewsFoundationOS::PropertyList a1)
{
  uint64_t v2 = *(void *)a1.serializableDictionary._rawValue;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v4 = *v1;
  uint64_t *v1 = 0x8000000000000000;
  sub_25A460634(v2, (uint64_t)sub_25A45F8E4, 0, isUniquelyReferenced_nonNull_native, &v4);
  uint64_t *v1 = v4;
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
}

uint64_t sub_25A44C370@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v36 = a5;
  uint64_t v37 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v35 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v32 - v14;
  uint64_t v16 = MEMORY[0x270FA5388](v13);
  uint64_t v34 = (char *)&v32 - v17;
  MEMORY[0x270FA5388](v16);
  long long v38 = (char *)&v32 - v18;
  uint64_t v19 = *v5;
  uint64_t v20 = swift_conformsToProtocol2();
  if (v20) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = 0;
  }
  if (v20) {
    uint64_t v22 = AssociatedTypeWitness;
  }
  else {
    uint64_t v22 = 0;
  }
  if (v22)
  {
    uint64_t v32 = v10;
    uint64_t v33 = a4;
    sub_25A3990F8(a2, (uint64_t)&v40);
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = v19;
    sub_25A3C85D8(&v40, v23 + 24);
    uint64_t v24 = sub_25A3937CC(a1, (uint64_t)v39);
    MEMORY[0x270FA5388](v24);
    *(&v32 - 2) = (uint64_t)sub_25A3ECF98;
    *(&v32 - 1) = v23;
    uint64_t v25 = *(void (**)(unsigned char *, uint64_t (*)(uint64_t, uint64_t), uint64_t *, uint64_t, uint64_t))(v21 + 16);
    uint64_t v41 = v22;
    uint64_t v42 = v21;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v40);
    swift_bridgeObjectRetain();
    uint64_t v26 = v43;
    v25(v39, sub_25A3ECFA4, &v32 - 4, v22, v21);
    swift_release();
    if (v26) {
      return __swift_deallocate_boxed_opaque_existential_1((uint64_t)&v40);
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A417750);
    uint64_t v30 = v34;
    swift_dynamicCast();
    uint64_t v10 = v32;
    uint64_t v29 = v38;
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v38, v30, AssociatedTypeWitness);
    a4 = v33;
  }
  else
  {
    *(void *)&long long v40 = v19;
    uint64_t v28 = v43;
    uint64_t result = sub_25A44C778(a1, a2, AssociatedTypeWitness, (uint64_t)v15);
    if (v28) {
      return result;
    }
    uint64_t v29 = v38;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v38, v15, AssociatedTypeWitness);
  }
  uint64_t v31 = v35;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v35, v29, AssociatedTypeWitness);
  (*(void (**)(char *))(a4 + 32))(v31);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v29, AssociatedTypeWitness);
}

uint64_t sub_25A44C6F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8 = a5 + 48;
  uint64_t v9 = a5 + 80;
  *(void *)a5 = a3;
  sub_25A3990F8(a4, a5 + 8);
  sub_25A3937CC(a1, v8);
  sub_25A3937CC(a2, v9);
  *(unsigned char *)(a5 + 112) = 2;

  return swift_bridgeObjectRetain();
}

uint64_t sub_25A44C778@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v8 = sub_25A50FA40();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = &v19[-v10];
  uint64_t v12 = *v4;
  sub_25A3937CC(a1, (uint64_t)v19);
  char v13 = swift_dynamicCast();
  uint64_t v14 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56);
  if (v13)
  {
    uint64_t v15 = *(void *)(a3 - 8);
    v14(v11, 0, 1, a3);
    return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v15 + 32))(a4, v11, a3);
  }
  else
  {
    v14(v11, 1, 1, a3);
    (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v11, v8);
    sub_25A3ECF40();
    swift_allocError();
    uint64_t v18 = v17;
    *uint64_t v17 = v12;
    sub_25A3990F8(v20, (uint64_t)(v17 + 1));
    sub_25A3937CC(a1, (uint64_t)(v18 + 6));
    v18[13] = swift_getMetatypeMetadata();
    v18[10] = a3;
    *((unsigned char *)v18 + 112) = 1;
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }
}

uint64_t sub_25A44C990@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_25A44C99C()
{
  swift_bridgeObjectRetain();
  uint64_t v0 = sub_25A50E8B0();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_25A44CA04()
{
  sub_25A46186C(v0, (uint64_t)v7);
  switch(v11)
  {
    case 1:
    case 2:
      sub_25A3C85D8((long long *)((char *)v7 + 8), (uint64_t)v4);
      sub_25A3936C4(&v9, &v5);
      sub_25A3936C4(&v10, v3);
      sub_25A50FDB0();
      sub_25A50EDA0();
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A4195A8);
      sub_25A50FFB0();
      sub_25A50EDA0();
      __swift_project_boxed_opaque_existential_1(&v5, v6);
      swift_getDynamicType();
      sub_25A5105D0();
      sub_25A50EDA0();
      swift_bridgeObjectRelease();
      sub_25A50EDA0();
      sub_25A50FFB0();
      sub_25A50EDA0();
      sub_25A50E8B0();
      sub_25A50EDA0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v1 = 0;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
      goto LABEL_5;
    case 3:
      sub_25A3936C4(v7, v4);
      sub_25A3936C4(&v8, &v5);
      *(void *)&v3[0] = 0;
      *((void *)&v3[0] + 1) = 0xE000000000000000;
      sub_25A50FDB0();
      sub_25A50EDA0();
      sub_25A50FFB0();
      sub_25A50EDA0();
      sub_25A50FFB0();
      sub_25A50EDA0();
      uint64_t v1 = 0;
LABEL_5:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v5);
      break;
    default:
      sub_25A3C85D8((long long *)((char *)v7 + 8), (uint64_t)v4);
      *(void *)&long long v5 = 0;
      *((void *)&v5 + 1) = 0xE000000000000000;
      sub_25A50FDB0();
      sub_25A50EDA0();
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A4195A8);
      sub_25A50FFB0();
      sub_25A50EDA0();
      sub_25A50E8B0();
      sub_25A50EDA0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v1 = v5;
      break;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  return v1;
}

uint64_t sub_25A44CF40@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, void *)@<X1>, void *a3@<X8>)
{
  sub_25A3937CC(a1, (uint64_t)v8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417658);
  if (swift_dynamicCast())
  {
    uint64_t v6 = v8[5];
    uint64_t result = __swift_destroy_boxed_opaque_existential_1(a1);
    *a3 = v6;
  }
  else
  {
    v8[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4195C0);
    v8[0] = &type metadata for PropertyList;
    a2(a1, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
    swift_willThrow();
    return __swift_destroy_boxed_opaque_existential_1(a1);
  }
  return result;
}

uint64_t sub_25A44D024@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  a1[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_26A417658);
  *a1 = v3;

  return swift_bridgeObjectRetain();
}

uint64_t sub_25A44D070@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, void *)@<X1>, void *a3@<X8>)
{
  return sub_25A44CF40(a1, a2, a3);
}

uint64_t sub_25A44D088@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  v10[5] = a1;
  void v10[2] = a2;
  void v10[3] = a3;
  uint64_t v5 = sub_25A50F1E0();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v8 = sub_25A39F5D4((void (*)(char *, char *))sub_25A461974, (uint64_t)v10, v5, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v7);
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4195B0);
  a4[3] = result;
  *a4 = v8;
  return result;
}

uint64_t sub_25A44D148@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v8((char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417750);
  if (swift_dynamicCast())
  {
    sub_25A3C85D8(v13, (uint64_t)v15);
    uint64_t v9 = v16;
    uint64_t v10 = v17;
    __swift_project_boxed_opaque_existential_1(v15, v16);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  }
  else
  {
    uint64_t v14 = 0;
    memset(v13, 0, sizeof(v13));
    sub_25A384BCC((uint64_t)v13, &qword_26A417780);
    a3[3] = a2;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a3);
    return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))v8)(boxed_opaque_existential_1, a1, a2);
  }
}

uint64_t sub_25A44D2D0(uint64_t a1, void (*a2)(uint64_t, void *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_25A3937CC(a1, (uint64_t)v18);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4195B0);
  uint64_t v11 = swift_dynamicCast();
  if (v11)
  {
    v17[1] = v17;
    v18[0] = v19;
    MEMORY[0x270FA5388](v11);
    void v16[2] = a4;
    v16[3] = a5;
    v16[4] = a2;
    v16[5] = a3;
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A415838);
    unint64_t v13 = sub_25A461918();
    uint64_t v14 = sub_25A39F5D4((void (*)(char *, char *))sub_25A4618F4, (uint64_t)v16, v10, a4, v12, v13, MEMORY[0x263F8E4E0], (uint64_t)&v19);
    __swift_destroy_boxed_opaque_existential_1(a1);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v14 = sub_25A50F1E0();
    void v18[3] = swift_getMetatypeMetadata();
    v18[0] = v14;
    a2(a1, v18);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1(a1);
  }
  return v14;
}

uint64_t sub_25A44D478@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v29 = a5;
  uint64_t v30 = a2;
  uint64_t v7 = v6;
  uint64_t v35 = a3;
  uint64_t v28 = a6;
  uint64_t v10 = sub_25A50FA40();
  uint64_t v27 = *(void *)(v10 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  unint64_t v13 = (char *)&v26 - v12;
  uint64_t v14 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = swift_conformsToProtocol2();
  if (v17) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  if (v17) {
    uint64_t v19 = a4;
  }
  else {
    uint64_t v19 = 0;
  }
  if (v19)
  {
    sub_25A3937CC(a1, (uint64_t)v31);
    uint64_t v20 = *(void (**)(unsigned char *, uint64_t (*)(void, void), uint64_t, uint64_t, uint64_t))(v18 + 16);
    uint64_t MetatypeMetadata = v19;
    uint64_t v34 = v18;
    __swift_allocate_boxed_opaque_existential_1(v32);
    v20(v31, (uint64_t (*)(void, void))v30, v35, v19, v18);
    if (!v6)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A417750);
      return swift_dynamicCast();
    }
    uint64_t result = __swift_deallocate_boxed_opaque_existential_1((uint64_t)v32);
  }
  else
  {
    uint64_t v22 = v27;
    sub_25A3937CC(a1, (uint64_t)v32);
    char v23 = swift_dynamicCast();
    uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
    if (v23)
    {
      v24(v13, 0, 1, a4);
      uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
      v25(v16, v13, a4);
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v25)(v28, v16, a4);
    }
    v24(v13, 1, 1, a4);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v13, v10);
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
    v32[0] = a4;
    uint64_t v7 = v30(a1, v32);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
    uint64_t result = swift_willThrow();
  }
  uint64_t *v29 = v7;
  return result;
}

uint64_t sub_25A44D778@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_25A44D088(*v3, *(void *)(a1 + 16), *(void *)(a2 - 8), a3);
}

uint64_t sub_25A44D78C@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, void *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t result = sub_25A44D2D0(a1, a2, a3, *(void *)(a4 + 16), *(void *)(a5 - 8));
  if (!v6) {
    *a6 = result;
  }
  return result;
}

uint64_t sub_25A44D7C0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_25A50E970();
  uint64_t result = sub_25A50E990();
  a1[3] = result;
  *a1 = v2;
  return result;
}

uint64_t sub_25A44D86C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = *(void (**)(char *, uint64_t))(v6 + 16);
  v8((char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417750);
  if (swift_dynamicCast())
  {
    sub_25A3C85D8(v13, (uint64_t)v15);
    uint64_t v9 = v16;
    uint64_t v10 = v17;
    __swift_project_boxed_opaque_existential_1(v15, v16);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  }
  else
  {
    uint64_t v14 = 0;
    memset(v13, 0, sizeof(v13));
    sub_25A384BCC((uint64_t)v13, &qword_26A417780);
    a3[3] = a2;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a3);
    return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))v8)(boxed_opaque_existential_1, a1, a2);
  }
}

void (*sub_25A44D9F0(uint64_t a1, void (*a2)(uint64_t, void *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))(uint64_t, void *)
{
  v13[1] = a8;
  sub_25A3937CC(a1, (uint64_t)v14);
  sub_25A50E990();
  uint64_t v10 = swift_dynamicCast();
  if (v10)
  {
    v13[0] = v13;
    MEMORY[0x270FA5388](v10);
    a2 = (void (*)(uint64_t, void *))sub_25A50E970();
    __swift_destroy_boxed_opaque_existential_1(a1);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = sub_25A50E990();
    v14[3] = swift_getMetatypeMetadata();
    v14[0] = v11;
    a2(a1, v14);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1(a1);
  }
  return a2;
}

uint64_t sub_25A44DB8C@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, uint64_t *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t v31 = a1;
  uint64_t v24 = a5;
  uint64_t v7 = sub_25A50FA40();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v24 - v10;
  uint64_t v12 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = swift_conformsToProtocol2();
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  if (v15) {
    uint64_t v17 = a4;
  }
  else {
    uint64_t v17 = 0;
  }
  if (v17)
  {
    sub_25A3937CC(v31, (uint64_t)v27);
    uint64_t v18 = *(void (**)(unsigned char *, void (*)(void, void), uint64_t, uint64_t, uint64_t))(v16 + 16);
    uint64_t MetatypeMetadata = v17;
    uint64_t v30 = v16;
    __swift_allocate_boxed_opaque_existential_1(v28);
    v18(v27, (void (*)(void, void))v25, v26, v17, v16);
    if (v5)
    {
      return __swift_deallocate_boxed_opaque_existential_1((uint64_t)v28);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A417750);
      return swift_dynamicCast();
    }
  }
  else
  {
    uint64_t v20 = v25;
    sub_25A3937CC(v31, (uint64_t)v28);
    char v21 = swift_dynamicCast();
    uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
    if (v21)
    {
      v22(v11, 0, 1, a4);
      char v23 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
      v23(v14, v11, a4);
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v23)(v24, v14, a4);
    }
    else
    {
      v22(v11, 1, 1, a4);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
      v28[0] = a4;
      v20(v31, v28);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
      return swift_willThrow();
    }
  }
}

uint64_t sub_25A44DE70@<X0>(uint64_t *a1@<X8>)
{
  return sub_25A44D7C0(a1);
}

void (*sub_25A44DE88@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, void *)@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>))(uint64_t, void *)
{
  uint64_t result = sub_25A44D9F0(a1, a2, a3, a4[2], a4[3], *(void *)(a5 - 8), a4[4], *(void *)(a5 - 16));
  if (!v6) {
    *a6 = result;
  }
  return result;
}

uint64_t sub_25A44DEC4(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    sub_25A39A088(0, v2, 0);
    uint64_t result = v9;
    uint64_t v4 = (int *)(a1 + 32);
    unint64_t v5 = *(void *)(v9 + 16);
    do
    {
      int v7 = *v4++;
      int v6 = v7;
      uint64_t v10 = result;
      unint64_t v8 = *(void *)(result + 24);
      if (v5 >= v8 >> 1)
      {
        sub_25A39A088(v8 > 1, v5 + 1, 1);
        uint64_t result = v10;
      }
      *(void *)(result + 16) = v5 + 1;
      *(_DWORD *)(result + 4 * v5++ + 32) = v6;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t Array<A>.propertyListValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[5] = a1;
  v8[2] = a2;
  v8[3] = a3;
  uint64_t v3 = sub_25A50F1E0();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t WitnessTable = swift_getWitnessTable();
  return sub_25A39F5D4((void (*)(char *, char *))sub_25A4608CC, (uint64_t)v8, v3, AssociatedTypeWitness, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v6);
}

uint64_t Array<A>.init(propertyListValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = sub_25A46025C(a1, a2, a3);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_25A44E08C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v11 = (char *)v14 - v10;
  (*(void (**)(char *, uint64_t))(v12 + 16))((char *)v14 - v10, a1);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a3 + 32))(v11, a2, a3);
  if (v4) {
    *a4 = v4;
  }
  return result;
}

uint64_t sub_25A44E1B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = Array<A>.propertyListValue.getter(*v3, *(void *)(a1 + 16), *(void *)(a2 - 8));
  *a3 = result;
  return result;
}

uint64_t sub_25A44E1EC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6 = sub_25A46025C(*a1, *(void *)(a2 + 16), *(void *)(a3 - 8));
  uint64_t result = swift_bridgeObjectRelease();
  if (!v4) {
    *a4 = v6;
  }
  return result;
}

uint64_t Set<>.propertyListValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[7] = a1;
  v9[2] = a2;
  v9[3] = a3;
  v9[4] = a4;
  uint64_t v4 = sub_25A50F530();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t WitnessTable = swift_getWitnessTable();
  return sub_25A39F5D4((void (*)(char *, char *))sub_25A4608CC, (uint64_t)v9, v4, AssociatedTypeWitness, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v7);
}

uint64_t Set<>.init(propertyListValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = a1;
  v11[2] = a2;
  v11[3] = a3;
  void v11[4] = a4;
  swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_25A50F1E0();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A415838);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v9 = sub_25A39F5D4((void (*)(char *, char *))sub_25A460928, (uint64_t)v11, v6, a2, v7, WitnessTable, MEMORY[0x263F8E4E0], (uint64_t)&v12);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v4)
  {
    uint64_t v13 = v9;
    sub_25A50F1E0();
    swift_getWitnessTable();
    return sub_25A50F540();
  }
  return result;
}

uint64_t sub_25A44E464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v12 = (char *)v15 - v11;
  (*(void (**)(char *, uint64_t))(v13 + 16))((char *)v15 - v11, a1);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a3 + 32))(v12, a2, a3);
  if (v5) {
    *a5 = v5;
  }
  return result;
}

uint64_t sub_25A44E58C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = Set<>.propertyListValue.getter(*v3, *(void *)(a1 + 16), *(void *)(a2 - 8), *(void *)(a1 + 24));
  *a3 = result;
  return result;
}

uint64_t sub_25A44E5C4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = Set<>.init(propertyListValue:)(*a1, *(void *)(a2 + 16), *(void *)(a3 - 8), *(void *)(a2 + 24));
  if (!v4) {
    *a4 = result;
  }
  return result;
}

uint64_t Dictionary<>.propertyListValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v21 = a1;
  uint64_t v15 = a2;
  uint64_t v16 = a3;
  uint64_t v17 = a4;
  uint64_t v18 = a5;
  uint64_t v19 = a6;
  uint64_t v20 = a7;
  void v13[2] = a2;
  v13[3] = a3;
  v13[4] = a4;
  v13[5] = a5;
  void v13[6] = a6;
  v13[7] = a7;
  v13[8] = sub_25A46094C;
  v13[9] = &v14;
  uint64_t v8 = sub_25A50E990();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t WitnessTable = swift_getWitnessTable();
  return Sequence.keyedMap<A, B>(_:)((uint64_t)sub_25A4609D0, (uint64_t)v13, v8, AssociatedTypeWitness, v10, WitnessTable, a7);
}

uint64_t Dictionary<>.init(propertyListValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = sub_25A46011C(a1, a2, a3, a4, a5, a6, a7);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_25A44E770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v22 = a4;
  uint64_t v23 = a2;
  uint64_t v24 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v21 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  char v14 = (char *)&v21 - v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v21 - v16;
  (*(void (**)(char *, uint64_t))(v18 + 16))((char *)&v21 - v16, a3);
  uint64_t v19 = v25;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a7 + 32))(v17, a5, a7);
  if (!v19)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v14, v22, AssociatedTypeWitness);
    return (*(uint64_t (**)(char *))(a9 + 32))(v14);
  }
  return result;
}

uint64_t sub_25A44E9B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return a4(a1, a2, a3, a3 + *(int *)(TupleTypeMetadata2 + 48));
}

uint64_t sub_25A44EAA0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = Dictionary<>.propertyListValue.getter(*v3, a1[2], a1[3], *(void *)(a2 - 8), a1[4], *(void *)(a2 - 16), *(void *)(a2 - 24));
  *a3 = result;
  return result;
}

uint64_t sub_25A44EAE0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6 = sub_25A46011C(*a1, a2[2], a2[3], *(void *)(a3 - 8), a2[4], *(void *)(a3 - 16), *(void *)(a3 - 24));
  uint64_t result = swift_bridgeObjectRelease();
  if (!v4) {
    *a4 = v6;
  }
  return result;
}

uint64_t sub_25A44EB44(char *a1, char *a2)
{
  return sub_25A4D5DC4(*a1, *a2);
}

uint64_t sub_25A44EB50()
{
  return sub_25A510530();
}

uint64_t sub_25A44EBAC()
{
  sub_25A50ED30();

  return swift_bridgeObjectRelease();
}

uint64_t sub_25A44EBEC()
{
  return sub_25A510530();
}

uint64_t sub_25A44EC44@<X0>(char *a1@<X8>)
{
  return sub_25A3E6010(a1);
}

void sub_25A44EC50(uint64_t *a1@<X8>)
{
  uint64_t v2 = 120;
  if (*v1) {
    uint64_t v2 = 121;
  }
  *a1 = v2;
  a1[1] = 0xE100000000000000;
}

uint64_t sub_25A44EC6C()
{
  if (*v0) {
    return 121;
  }
  else {
    return 120;
  }
}

uint64_t CGPoint.propertyListValue.getter@<X0>(uint64_t *a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417728);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25A511AC0;
  uint64_t v7 = MEMORY[0x263F8EF38];
  *(void *)(inited + 32) = 120;
  *(void *)(inited + 40) = 0xE100000000000000;
  *(void *)(inited + 72) = v7;
  *(void *)(inited + 80) = &protocol witness table for CGFloat;
  *(double *)(inited + 48) = a2;
  *(void *)(inited + 88) = 121;
  *(void *)(inited + 96) = 0xE100000000000000;
  *(void *)(inited + 128) = v7;
  *(void *)(inited + 136) = &protocol witness table for CGFloat;
  *(double *)(inited + 104) = a3;
  unint64_t v8 = sub_25A392B24(inited);
  uint64_t v9 = sub_25A44B160(v8);
  swift_bridgeObjectRelease();
  uint64_t v10 = sub_25A3EB380(v9);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v10;
  return result;
}

uint64_t static PropertyListBuilder.buildBlock<A, B, C, D>(_:_:)(char *a1, uint64_t a2, char *a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v86 = a7;
  uint64_t v64 = a6;
  uint64_t v75 = a4;
  uint64_t v71 = a3;
  uint64_t v85 = a2;
  uint64_t v84 = a1;
  uint64_t v73 = a11;
  uint64_t v77 = a9;
  uint64_t v80 = a8;
  uint64_t v83 = (void *)sub_25A50FA40();
  uint64_t v82 = *(v83 - 1);
  MEMORY[0x270FA5388](v83);
  uint64_t v78 = (char *)&v59 - v13;
  uint64_t v14 = sub_25A50FA40();
  uint64_t v81 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v63 = (char *)&v59 - v15;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v79 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v74 = (char *)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v59 - v19;
  uint64_t v21 = swift_getTupleTypeMetadata2();
  uint64_t v76 = *(void *)(v21 - 8);
  uint64_t v22 = MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v59 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x270FA5388](v22);
  uint64_t v27 = (char *)&v59 - v26;
  uint64_t v60 = (char *)&v59 + *(int *)(v25 + 48) - v26;
  uint64_t v28 = v60;
  uint64_t v59 = a5;
  uint64_t v65 = *(void *)(a5 - 8);
  uint64_t v61 = *(void (**)(char *, char *, uint64_t))(v65 + 16);
  v61((char *)&v59 - v26, v84, a5);
  uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v81 + 16);
  v29(v28, v85, v14);
  uint64_t v85 = TupleTypeMetadata2;
  uint64_t v30 = &v20[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v72 = *(void *)(v86 - 8);
  uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v72 + 16);
  uint64_t v84 = v20;
  uint64_t v70 = v72 + 16;
  uint64_t v69 = v31;
  ((void (*)(char *, char *))v31)(v20, v71);
  uint64_t v32 = *(void (**)(char *, char *, void *))(v82 + 16);
  uint64_t v71 = v30;
  uint64_t v67 = v82 + 16;
  uint64_t v66 = v32;
  v32(v30, v75, v83);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417728);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25A511AC0;
  uint64_t v62 = (uint64_t *)(inited + 48);
  uint64_t v34 = v59;
  *(void *)(inited + 32) = (*(uint64_t (**)(uint64_t))(v77 + 8))(v59);
  *(void *)(inited + 40) = v35;
  uint64_t v77 = v21;
  uint64_t v36 = *(int *)(v21 + 48);
  uint64_t v37 = v34;
  long long v38 = &v24[v36];
  uint64_t v68 = v24;
  uint64_t v75 = v27;
  uint64_t v39 = v27;
  uint64_t v40 = v64;
  v61(v24, v39, v34);
  uint64_t v41 = v63;
  v29(v38, (uint64_t)v60, v14);
  uint64_t v42 = v81;
  (*(void (**)(char *, char *, uint64_t))(v81 + 32))(v41, v38, v14);
  uint64_t v43 = *(void *)(v40 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v40) == 1)
  {
    (*(void (**)(char *, uint64_t))(v65 + 8))(v68, v37);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v41, v14);
    uint64_t v44 = v62;
    v62[4] = 0;
    *(_OWORD *)uint64_t v44 = 0u;
    *((_OWORD *)v44 + 1) = 0u;
  }
  else
  {
    uint64_t v45 = *(void (**)(uint64_t, uint64_t))(a10 + 24);
    *(void *)(inited + 72) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 80) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1(v62);
    v45(v40, a10);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v41, v40);
    (*(void (**)(char *, uint64_t))(v65 + 8))(v68, v37);
  }
  uint64_t v46 = v84;
  uint64_t v47 = v86;
  *(void *)(inited + 88) = (*(uint64_t (**)(uint64_t))(v73 + 8))(v86);
  *(void *)(inited + 96) = v48;
  uint64_t v49 = v74;
  uint64_t v50 = &v74[*(int *)(v85 + 48)];
  v69(v74, v46, v47);
  uint64_t v51 = v83;
  v66(v50, v71, v83);
  uint64_t v52 = v82;
  long long v53 = v78;
  (*(void (**)(char *, char *, void *))(v82 + 32))(v78, v50, v51);
  uint64_t v54 = v80;
  uint64_t v55 = *(void *)(v80 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v80) == 1)
  {
    (*(void (**)(char *, uint64_t))(v72 + 8))(v49, v47);
    (*(void (**)(char *, void *))(v52 + 8))(v53, v51);
    *(void *)(inited + 136) = 0;
    *(_OWORD *)(inited + 104) = 0u;
    *(_OWORD *)(inited + 120) = 0u;
  }
  else
  {
    uint64_t v83 = *(void **)(a12 + 24);
    *(void *)(inited + 128) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 136) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 104));
    ((void (*)(uint64_t, uint64_t))v83)(v54, a12);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v53, v54);
    (*(void (**)(char *, uint64_t))(v72 + 8))(v49, v47);
  }
  unint64_t v56 = sub_25A392B24(inited);
  uint64_t v57 = sub_25A44B160(v56);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v79 + 8))(v84, v85);
  (*(void (**)(char *, uint64_t))(v76 + 8))(v75, v77);
  return v57;
}

CGPoint __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CGPoint.init(propertyListValue:)(PreviewsFoundationOS::PropertyList propertyListValue)
{
  double v1 = sub_25A46057C((uint64_t *)propertyListValue.serializableDictionary._rawValue, (uint64_t)&_s3KeyON_0, (uint64_t)&off_270832E68);
  result.y = v2;
  result.x = v1;
  return result;
}

uint64_t sub_25A44F6C4@<X0>(uint64_t *a1@<X8>)
{
  return sub_25A44FA50(120, 0xE100000000000000, 121, 0xE100000000000000, a1);
}

void sub_25A44F6D8(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_25A44F700(char *a1, char *a2)
{
  return sub_25A4D5E28(*a1, *a2);
}

uint64_t sub_25A44F70C()
{
  return sub_25A510530();
}

uint64_t sub_25A44F788()
{
  sub_25A50ED30();

  return swift_bridgeObjectRelease();
}

uint64_t sub_25A44F7F0()
{
  return sub_25A510530();
}

uint64_t sub_25A44F868@<X0>(char *a1@<X8>)
{
  return sub_25A3E6010(a1);
}

void sub_25A44F874(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x6874646977;
  if (*v1) {
    uint64_t v2 = 0x746867696568;
  }
  unint64_t v3 = 0xE500000000000000;
  if (*v1) {
    unint64_t v3 = 0xE600000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_25A44F8AC()
{
  if (*v0) {
    return 0x746867696568;
  }
  else {
    return 0x6874646977;
  }
}

uint64_t CGSize.propertyListValue.getter@<X0>(uint64_t *a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  uint64_t v4 = sub_25A44F950(0x6874646977, 0xE500000000000000, 0x746867696568, 0xE600000000000000, a2, a3);
  uint64_t v5 = sub_25A3EB380(v4);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v5;
  return result;
}

uint64_t sub_25A44F950(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417728);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25A511AC0;
  *(void *)(inited + 32) = a1;
  *(void *)(inited + 40) = a2;
  uint64_t v13 = MEMORY[0x263F8EF38];
  *(void *)(inited + 72) = MEMORY[0x263F8EF38];
  *(void *)(inited + 80) = &protocol witness table for CGFloat;
  *(double *)(inited + 48) = a5;
  *(void *)(inited + 88) = a3;
  *(void *)(inited + 96) = a4;
  *(void *)(inited + 128) = v13;
  *(void *)(inited + 136) = &protocol witness table for CGFloat;
  *(double *)(inited + 104) = a6;
  unint64_t v14 = sub_25A392B24(inited);
  uint64_t v15 = sub_25A44B160(v14);
  swift_bridgeObjectRelease();
  return v15;
}

CGSize __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CGSize.init(propertyListValue:)(PreviewsFoundationOS::PropertyList propertyListValue)
{
  double v1 = sub_25A46057C((uint64_t *)propertyListValue.serializableDictionary._rawValue, (uint64_t)&_s3KeyON, (uint64_t)&off_270832E58);
  result.height = v2;
  result.width = v1;
  return result;
}

uint64_t sub_25A44FA2C@<X0>(uint64_t *a1@<X8>)
{
  return sub_25A44FA50(0x6874646977, 0xE500000000000000, 0x746867696568, 0xE600000000000000, a1);
}

uint64_t sub_25A44FA50@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t *a5@<X8>)
{
  uint64_t v7 = sub_25A44F950(a1, a2, a3, a4, *v5, v5[1]);
  uint64_t v8 = sub_25A3EB380(v7);
  uint64_t result = swift_bridgeObjectRelease();
  *a5 = v8;
  return result;
}

void sub_25A44FAB4(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_25A44FADC(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  double v6 = sub_25A46057C(a1, a2, a3);
  if (!v4)
  {
    *(double *)a4 = v6;
    *(void *)(a4 + 8) = v7;
  }
}

uint64_t CGRect.propertyListValue.getter@<X0>(uint64_t *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417728);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25A511AC0;
  uint64_t v11 = MEMORY[0x263F8EF38];
  *(void *)(inited + 32) = 120;
  *(void *)(inited + 40) = 0xE100000000000000;
  *(void *)(inited + 72) = v11;
  *(void *)(inited + 80) = &protocol witness table for CGFloat;
  *(double *)(inited + 48) = a2;
  *(void *)(inited + 88) = 121;
  *(void *)(inited + 96) = 0xE100000000000000;
  *(void *)(inited + 128) = v11;
  *(void *)(inited + 136) = &protocol witness table for CGFloat;
  *(double *)(inited + 104) = a3;
  unint64_t v12 = sub_25A392B24(inited);
  uint64_t v13 = sub_25A44B160(v12);
  swift_bridgeObjectRelease();
  uint64_t v14 = sub_25A3EB380(v13);
  swift_bridgeObjectRelease();
  uint64_t v15 = sub_25A44F950(0x6874646977, 0xE500000000000000, 0x746867696568, 0xE600000000000000, a4, a5);
  sub_25A3EB380(v15);
  swift_bridgeObjectRelease();
  swift_retain();
  uint64_t v16 = swift_retain();
  uint64_t v17 = sub_25A460078(v16, v14);
  swift_release();
  uint64_t result = swift_release();
  *a1 = v17;
  return result;
}

__C::CGRect __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CGRect.init(propertyListValue:)(PreviewsFoundationOS::PropertyList propertyListValue)
{
  double v2 = sub_25A460418((uint64_t *)propertyListValue.serializableDictionary._rawValue);
  if (v1)
  {
    double v3 = v2;
    double v4 = v2;
    double v5 = v2;
  }
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

uint64_t sub_25A44FC90@<X0>(uint64_t *a1@<X8>)
{
  double v3 = v1[2];
  double v4 = v1[3];
  uint64_t v5 = sub_25A44F950(120, 0xE100000000000000, 121, 0xE100000000000000, *v1, v1[1]);
  uint64_t v6 = sub_25A3EB380(v5);
  swift_bridgeObjectRelease();
  uint64_t v7 = sub_25A44F950(0x6874646977, 0xE500000000000000, 0x746867696568, 0xE600000000000000, v3, v4);
  sub_25A3EB380(v7);
  swift_bridgeObjectRelease();
  swift_retain();
  uint64_t v8 = swift_retain();
  uint64_t v9 = sub_25A460078(v8, v6);
  swift_release();
  uint64_t result = swift_release();
  *a1 = v9;
  return result;
}

void sub_25A44FD7C(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  double v4 = sub_25A460418(a1);
  if (!v2)
  {
    *(double *)a2 = v4;
    *(void *)(a2 + 8) = v5;
    *(void *)(a2 + 16) = v6;
    *(void *)(a2 + 24) = v7;
  }
}

uint64_t sub_25A44FDAC()
{
  return sub_25A510530();
}

uint64_t sub_25A44FDF8()
{
  return sub_25A50ED30();
}

uint64_t sub_25A44FE08()
{
  return sub_25A510530();
}

uint64_t sub_25A44FE50@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2 = sub_25A510190();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_25A44FEA4(void *a1@<X8>)
{
  *a1 = 7102838;
  a1[1] = 0xE300000000000000;
}

uint64_t sub_25A44FEB8()
{
  return 7102838;
}

uint64_t audit_token_t.propertyListValue.getter@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  int v5 = a4;
  int v6 = a3;
  int v7 = a2;
  int v8 = a1;
  unint64_t v10 = HIDWORD(a1);
  unint64_t v11 = HIDWORD(a2);
  unint64_t v12 = HIDWORD(a3);
  unint64_t v13 = HIDWORD(a4);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415C30);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25A518130;
  *(_DWORD *)(inited + 32) = v8;
  *(_DWORD *)(inited + 36) = v10;
  *(_DWORD *)(inited + 40) = v7;
  *(_DWORD *)(inited + 44) = v11;
  *(_DWORD *)(inited + 48) = v6;
  *(_DWORD *)(inited + 52) = v12;
  *(_DWORD *)(inited + 56) = v5;
  *(_DWORD *)(inited + 60) = v13;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A419580);
  uint64_t v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_25A5119F0;
  *(void *)(v15 + 32) = 7102838;
  *(void *)(v15 + 40) = 0xE300000000000000;
  *(void *)(v15 + 48) = sub_25A44DEC4(inited);
  unint64_t v16 = sub_25A392C68(v15);
  uint64_t v17 = sub_25A44B520(v16);
  swift_bridgeObjectRelease();
  unint64_t v18 = sub_25A44B820(v17);
  swift_bridgeObjectRelease();
  uint64_t v19 = sub_25A3EB380(v18);
  swift_bridgeObjectRelease();
  uint64_t result = swift_setDeallocating();
  *a5 = v19;
  return result;
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> audit_token_t.init(propertyListValue:)(audit_token_t *__return_ptr retstr, PreviewsFoundationOS::PropertyList propertyListValue)
{
}

uint64_t sub_25A450024@<X0>(uint64_t *a1@<X8>)
{
  return audit_token_t.propertyListValue.getter(*v1, v1[1], v1[2], v1[3], a1);
}

uint64_t sub_25A450030@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_25A460344(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

unint64_t sub_25A450078()
{
  sub_25A50FDB0();
  swift_bridgeObjectRelease();
  uint64_t v0 = swift_bridgeObjectRetain();
  MEMORY[0x26113D0A0](v0, MEMORY[0x263F8E8F8]);
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0xD000000000000027;
}

unint64_t sub_25A450114()
{
  return sub_25A450078();
}

uint64_t UUID.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A419588);
  MEMORY[0x270FA5388](v6 - 8);
  int v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25A50E480();
  uint64_t v9 = sub_25A50E4C0();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_25A384BCC((uint64_t)v8, &qword_26A419588);
    sub_25A460A48();
    swift_allocError();
    *unint64_t v11 = a1;
    v11[1] = a2;
    return swift_willThrow();
  }
  else
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a3, v8, v9);
  }
}

uint64_t sub_25A450288@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = _s10Foundation4UUIDV08PreviewsA2OSE17propertyListValueSSvg_0();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_25A4502B0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A419588);
  MEMORY[0x270FA5388](v6 - 8);
  int v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *a1;
  uint64_t v9 = a1[1];
  sub_25A50E480();
  uint64_t v11 = *(void *)(a2 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, a2) == 1)
  {
    sub_25A384BCC((uint64_t)v8, &qword_26A419588);
    sub_25A460A48();
    swift_allocError();
    *unint64_t v12 = v10;
    v12[1] = v9;
    return swift_willThrow();
  }
  else
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a3, v8, a2);
  }
}

unint64_t sub_25A450410()
{
  return 0xD000000000000015;
}

unint64_t sub_25A4504A0()
{
  return sub_25A450410();
}

uint64_t sub_25A4504A8()
{
  return sub_25A445F88(*v0, v0[1]);
}

uint64_t static PropertyListBuilder.buildBlock<A, B, C, D, E, F, G, H>(_:_:_:_:)(char *a1, uint64_t a2, void (*a3)(void), char *a4, uint64_t a5, uint64_t a6, char *a7, char *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v138 = a8;
  uint64_t v130 = a5;
  unint64_t v131 = a7;
  uint64_t v134 = a6;
  uint64_t v157 = a2;
  uint64_t v158 = a4;
  uint64_t v129 = a3;
  uint64_t v156 = a1;
  uint64_t v136 = a21;
  uint64_t v132 = a19;
  uint64_t v161 = a15;
  v162 = a13;
  uint64_t v117 = a10;
  uint64_t v118 = a17;
  uint64_t v146 = a16;
  uint64_t v24 = (uint64_t *)sub_25A50FA40();
  uint64_t v159 = *(v24 - 1);
  uint64_t v160 = v24;
  MEMORY[0x270FA5388](v24);
  uint64_t v145 = (char *)&v106 - v25;
  uint64_t v140 = a14;
  uint64_t v26 = sub_25A50FA40();
  uint64_t v153 = *(void *)(v26 - 8);
  uint64_t v154 = v26;
  MEMORY[0x270FA5388](v26);
  unint64_t v137 = (char *)&v106 - v27;
  uint64_t v135 = a12;
  uint64_t v28 = sub_25A50FA40();
  uint64_t v151 = *(void *)(v28 - 8);
  uint64_t v152 = (void (*)(void, void))v28;
  MEMORY[0x270FA5388](v28);
  uint64_t v133 = (char *)&v106 - v29;
  uint64_t v30 = sub_25A50FA40();
  uint64_t v150 = *(void *)(v30 - 8);
  MEMORY[0x270FA5388](v30);
  uint64_t v116 = (char *)&v106 - v31;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v144 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v32 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v141 = (char *)&v106 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v32);
  uint64_t v164 = (char *)&v106 - v34;
  uint64_t v163 = swift_getTupleTypeMetadata2();
  uint64_t v143 = *(void *)(v163 - 8);
  uint64_t v35 = MEMORY[0x270FA5388](v163);
  v147 = (char *)&v106 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v35);
  long long v38 = (char *)&v106 - v37;
  uint64_t v39 = swift_getTupleTypeMetadata2();
  uint64_t v142 = *(void *)(v39 - 8);
  uint64_t v40 = MEMORY[0x270FA5388](v39);
  uint64_t v125 = (char *)&v106 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v40);
  uint64_t v43 = (char *)&v106 - v42;
  uint64_t v155 = swift_getTupleTypeMetadata2();
  uint64_t v139 = *(void *)(v155 - 8);
  uint64_t v44 = MEMORY[0x270FA5388](v155);
  uint64_t v149 = (char *)&v106 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = MEMORY[0x270FA5388](v44);
  uint64_t v48 = (char *)&v106 - v47;
  uint64_t v49 = (char *)&v106 + *(int *)(v46 + 48) - v47;
  uint64_t v106 = a9;
  uint64_t v110 = *(void *)(a9 - 8);
  uint64_t v50 = *(void (**)(void))(v110 + 16);
  uint64_t v108 = v49;
  uint64_t v109 = v50;
  ((void (*)(char *, char *, uint64_t))v50)((char *)&v106 - v47, v156, a9);
  uint64_t v107 = *(void (**)(char *, uint64_t, uint64_t))(v150 + 16);
  v107(v49, v157, v30);
  uint64_t v156 = v43;
  uint64_t v157 = v39;
  uint64_t v51 = &v43[*(int *)(v39 + 48)];
  uint64_t v119 = *(void *)(a11 - 8);
  uint64_t v52 = *(void (**)(char *, char *, uint64_t))(v119 + 16);
  uint64_t v148 = a11;
  uint64_t v113 = v52;
  uint64_t v114 = v119 + 16;
  v52(v43, (char *)v129, a11);
  long long v53 = *(void (**)(char *, char *, void (*)(void, void)))(v151 + 16);
  unint64_t v115 = v51;
  uint64_t v111 = v53;
  uint64_t v112 = v151 + 16;
  v53(v51, v158, v152);
  uint64_t v54 = &v38[*(int *)(v163 + 48)];
  uint64_t v126 = *(v162 - 1);
  uint64_t v55 = *(void (**)(char *, char *, void *))(v126 + 16);
  uint64_t v158 = v38;
  uint64_t v122 = v55;
  uint64_t v123 = v126 + 16;
  ((void (*)(char *, uint64_t))v55)(v38, v130);
  unint64_t v56 = *(void (**)(char *, char *, uint64_t))(v153 + 16);
  uint64_t v124 = v54;
  uint64_t v120 = v56;
  uint64_t v121 = v153 + 16;
  v56(v54, (char *)v134, v154);
  uint64_t v57 = &v164[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v134 = *(void *)(v161 - 8);
  uint64_t v129 = *(void (**)(void))(v134 + 16);
  uint64_t v130 = v134 + 16;
  v129();
  uint64_t v58 = *(void (**)(char *, char *, uint64_t *))(v159 + 16);
  unint64_t v131 = v57;
  char v127 = v58;
  uint64_t v128 = v159 + 16;
  v58(v57, v138, v160);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417728);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25A5144E0;
  uint64_t v60 = (uint64_t *)(inited + 48);
  uint64_t v61 = v106;
  *(void *)(inited + 32) = (*(uint64_t (**)(uint64_t))(v118 + 8))(v106);
  *(void *)(inited + 40) = v62;
  uint64_t v63 = &v149[*(int *)(v155 + 48)];
  uint64_t v138 = v48;
  uint64_t v64 = v61;
  v109();
  v107(v63, (uint64_t)v108, v30);
  uint64_t v65 = v150;
  uint64_t v66 = v116;
  (*(void (**)(char *, char *, uint64_t))(v150 + 32))(v116, v63, v30);
  uint64_t v67 = *(void *)(v117 - 8);
  uint64_t v68 = v66;
  uint64_t v69 = v66;
  uint64_t v70 = v117;
  if ((*(unsigned int (**)(char *, uint64_t))(v67 + 48))(v69, 1) == 1)
  {
    (*(void (**)(char *, uint64_t))(v110 + 8))(v149, v64);
    (*(void (**)(char *, uint64_t))(v65 + 8))(v68, v30);
    *(void *)(inited + 80) = 0;
    *(_OWORD *)uint64_t v60 = 0u;
    *(_OWORD *)(inited + 64) = 0u;
    uint64_t v71 = v151;
  }
  else
  {
    uint64_t v150 = *(void *)(a18 + 24);
    *(void *)(inited + 72) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 80) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1(v60);
    uint64_t v72 = v68;
    ((void (*)(uint64_t, uint64_t))v150)(v70, a18);
    uint64_t v71 = v151;
    (*(void (**)(char *, uint64_t))(v67 + 8))(v72, v70);
    (*(void (**)(char *, uint64_t))(v110 + 8))(v149, v64);
  }
  uint64_t v151 = a23;
  uint64_t v73 = v156;
  uint64_t v74 = v148;
  *(void *)(inited + 88) = (*(uint64_t (**)(uint64_t))(v132 + 8))(v148);
  *(void *)(inited + 96) = v75;
  uint64_t v76 = v125;
  uint64_t v77 = &v125[*(int *)(v157 + 48)];
  v113(v125, v73, v74);
  uint64_t v78 = v152;
  v111(v77, v115, v152);
  uint64_t v79 = v133;
  (*(void (**)(char *, char *, void (*)(void, void)))(v71 + 32))(v133, v77, v78);
  uint64_t v80 = v135;
  uint64_t v81 = *(void *)(v135 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v81 + 48))(v79, 1, v135) == 1)
  {
    (*(void (**)(char *, uint64_t))(v119 + 8))(v76, v74);
    (*(void (**)(char *, void))(v71 + 8))(v79, v78);
    *(void *)(inited + 136) = 0;
    *(_OWORD *)(inited + 104) = 0u;
    *(_OWORD *)(inited + 120) = 0u;
  }
  else
  {
    uint64_t v152 = *(void (**)(void, void))(a20 + 24);
    *(void *)(inited + 128) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 136) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 104));
    v152(v80, a20);
    (*(void (**)(char *, uint64_t))(v81 + 8))(v79, v80);
    (*(void (**)(char *, uint64_t))(v119 + 8))(v76, v148);
  }
  uint64_t v82 = v153;
  uint64_t v83 = v147;
  uint64_t v84 = v158;
  uint64_t v85 = v162;
  *(void *)(inited + 144) = (*(uint64_t (**)(void *))(v136 + 8))(v162);
  *(void *)(inited + 152) = v86;
  uint64_t v87 = &v83[*(int *)(v163 + 48)];
  v122(v83, v84, v85);
  uint64_t v88 = v154;
  v120(v87, v124, v154);
  uint64_t v89 = v137;
  (*(void (**)(char *, char *, uint64_t))(v82 + 32))(v137, v87, v88);
  uint64_t v90 = v140;
  uint64_t v91 = *(void *)(v140 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v91 + 48))(v89, 1, v140) == 1)
  {
    (*(void (**)(char *, void *))(v126 + 8))(v83, v85);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v89, v88);
    *(void *)(inited + 192) = 0;
    *(_OWORD *)(inited + 160) = 0u;
    *(_OWORD *)(inited + 176) = 0u;
  }
  else
  {
    uint64_t v92 = *(void (**)(uint64_t, uint64_t))(a22 + 24);
    *(void *)(inited + 184) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 192) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 160));
    v92(v90, a22);
    (*(void (**)(char *, uint64_t))(v91 + 8))(v89, v90);
    (*(void (**)(char *, void *))(v126 + 8))(v147, v162);
  }
  uint64_t v93 = v161;
  uint64_t v94 = v145;
  uint64_t v95 = v159;
  uint64_t v96 = v164;
  *(void *)(inited + 200) = (*(uint64_t (**)(uint64_t))(v151 + 8))(v161);
  *(void *)(inited + 208) = v97;
  uint64_t v98 = v141;
  uint64_t v99 = &v141[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, char *, uint64_t))v129)(v141, v96, v93);
  uint64_t v100 = v160;
  v127(v99, v131, v160);
  (*(void (**)(char *, char *, uint64_t *))(v95 + 32))(v94, v99, v100);
  uint64_t v101 = v146;
  uint64_t v102 = *(void *)(v146 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v102 + 48))(v94, 1, v146) == 1)
  {
    (*(void (**)(char *, uint64_t))(v134 + 8))(v98, v93);
    (*(void (**)(char *, uint64_t *))(v95 + 8))(v94, v100);
    *(void *)(inited + 248) = 0;
    *(_OWORD *)(inited + 216) = 0u;
    *(_OWORD *)(inited + 232) = 0u;
  }
  else
  {
    uint64_t v160 = (uint64_t *)(inited + 216);
    v162 = *(void **)(a24 + 24);
    *(void *)(inited + 240) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 248) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1(v160);
    ((void (*)(uint64_t, uint64_t))v162)(v101, a24);
    (*(void (**)(char *, uint64_t))(v102 + 8))(v94, v101);
    (*(void (**)(char *, uint64_t))(v134 + 8))(v98, v93);
  }
  unint64_t v103 = sub_25A392B24(inited);
  uint64_t v104 = sub_25A44B160(v103);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v144 + 8))(v164, TupleTypeMetadata2);
  (*(void (**)(char *, uint64_t))(v143 + 8))(v158, v163);
  (*(void (**)(char *, uint64_t))(v142 + 8))(v156, v157);
  (*(void (**)(char *, uint64_t))(v139 + 8))(v138, v155);
  return v104;
}

uint64_t static PropertyListBuilder.buildBlock<A, B, C, D, E, F, G, H, I, J>(_:_:_:_:_:)(char *a1, uint64_t a2, uint64_t a3, char *a4, void (*a5)(char *, char *, uint64_t), void (*a6)(void), char *a7, uint64_t a8, uint64_t a9, char *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char *a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v168 = a8;
  uint64_t v166 = a7;
  uint64_t v164 = a6;
  uint64_t v161 = a3;
  v162 = a5;
  uint64_t v198 = a4;
  uint64_t v197 = a2;
  uint64_t v196 = a1;
  uint64_t v169 = a25;
  uint64_t v160 = a23;
  uint64_t v201 = a19;
  uint64_t v202 = a17;
  uint64_t v192 = a15;
  uint64_t v203 = a13;
  uint64_t v146 = a12;
  uint64_t v186 = a11;
  v172 = a21;
  uint64_t v163 = a10;
  uint64_t v165 = a9;
  uint64_t v181 = a20;
  uint64_t v200 = sub_25A50FA40();
  uint64_t v199 = *(void *)(v200 - 8);
  MEMORY[0x270FA5388](v200);
  uint64_t v180 = (char *)&v132 - v30;
  uint64_t v176 = a18;
  uint64_t v31 = sub_25A50FA40();
  uint64_t v193 = *(void *)(v31 - 8);
  uint64_t v194 = v31;
  MEMORY[0x270FA5388](v31);
  uint64_t v174 = (char *)&v132 - v32;
  uint64_t v171 = a16;
  uint64_t v33 = sub_25A50FA40();
  uint64_t v190 = *(void *)(v33 - 8);
  uint64_t v191 = (void (*)(void, void))v33;
  MEMORY[0x270FA5388](v33);
  v170 = (char *)&v132 - v34;
  uint64_t v167 = a14;
  uint64_t v35 = sub_25A50FA40();
  uint64_t v188 = *(void *)(v35 - 8);
  uint64_t v189 = (void (*)(void, void))v35;
  MEMORY[0x270FA5388](v35);
  uint64_t v159 = (char *)&v132 - v36;
  uint64_t v37 = sub_25A50FA40();
  uint64_t v138 = *(void *)(v37 - 8);
  MEMORY[0x270FA5388](v37);
  uint64_t v145 = (char *)&v132 - v38;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v179 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v39 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v185 = (char *)&v132 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v39);
  uint64_t v207 = (char *)&v132 - v41;
  uint64_t v206 = swift_getTupleTypeMetadata2();
  uint64_t v178 = *(void *)(v206 - 8);
  uint64_t v42 = MEMORY[0x270FA5388](v206);
  uint64_t v184 = (char *)&v132 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v42);
  v205 = (char *)&v132 - v44;
  uint64_t v204 = swift_getTupleTypeMetadata2();
  uint64_t v177 = *(void *)(v204 - 8);
  uint64_t v45 = MEMORY[0x270FA5388](v204);
  uint64_t v183 = (char *)&v132 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v45);
  uint64_t v48 = (char *)&v132 - v47;
  uint64_t v49 = swift_getTupleTypeMetadata2();
  uint64_t v175 = *(void *)(v49 - 8);
  uint64_t v50 = MEMORY[0x270FA5388](v49);
  uint64_t v182 = (char *)&v132 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v50);
  long long v53 = (char *)&v132 - v52;
  uint64_t v54 = v186;
  uint64_t v55 = v37;
  uint64_t v134 = v37;
  uint64_t v195 = swift_getTupleTypeMetadata2();
  uint64_t v173 = *(void *)(v195 - 8);
  uint64_t v56 = MEMORY[0x270FA5388](v195);
  v187 = (char *)&v132 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = MEMORY[0x270FA5388](v56);
  uint64_t v60 = (char *)&v132 - v59;
  uint64_t v61 = (char *)&v132 + *(int *)(v58 + 48) - v59;
  uint64_t v139 = *(void *)(v54 - 8);
  uint64_t v62 = *(void (**)(void))(v139 + 16);
  uint64_t v135 = v61;
  uint64_t v136 = v62;
  uint64_t v137 = v139 + 16;
  ((void (*)(char *, char *, uint64_t))v62)((char *)&v132 - v59, v196, v54);
  uint64_t v63 = v138;
  uint64_t v64 = *(void (**)(char *, uint64_t, uint64_t))(v138 + 16);
  v64(v61, v197, v55);
  uint64_t v197 = v49;
  uint64_t v65 = &v53[*(int *)(v49 + 48)];
  uint64_t v147 = *(void *)(v203 - 8);
  uint64_t v66 = *(void (**)(char *, char *, uint64_t))(v147 + 16);
  uint64_t v196 = v53;
  uint64_t v142 = v66;
  uint64_t v143 = v147 + 16;
  ((void (*)(char *, uint64_t))v66)(v53, v161);
  uint64_t v67 = *(void (**)(char *, char *, void (*)(void, void)))(v188 + 16);
  uint64_t v144 = v65;
  uint64_t v140 = v67;
  uint64_t v141 = v188 + 16;
  v67(v65, v198, v189);
  uint64_t v68 = &v48[*(int *)(v204 + 48)];
  uint64_t v153 = *(void *)(v192 - 8);
  uint64_t v69 = *(void (**)(char *, char *, uint64_t))(v153 + 16);
  uint64_t v198 = v48;
  uint64_t v150 = v69;
  uint64_t v151 = v153 + 16;
  ((void (*)(char *, void (*)(char *, char *, uint64_t)))v69)(v48, v162);
  uint64_t v70 = *(void (**)(char *, char *, void (*)(void, void)))(v190 + 16);
  uint64_t v152 = v68;
  uint64_t v148 = v70;
  uint64_t v149 = v190 + 16;
  v70(v68, (char *)v164, v191);
  uint64_t v71 = &v205[*(int *)(v206 + 48)];
  uint64_t v161 = *(void *)(v202 - 8);
  uint64_t v156 = *(void (**)(void))(v161 + 16);
  uint64_t v157 = v161 + 16;
  v156();
  uint64_t v72 = *(void (**)(char *, char *, uint64_t))(v193 + 16);
  uint64_t v158 = v71;
  uint64_t v154 = v72;
  uint64_t v155 = v193 + 16;
  v72(v71, (char *)v168, v194);
  uint64_t v73 = &v207[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v168 = *(void *)(v201 - 8);
  uint64_t v164 = *(void (**)(void))(v168 + 16);
  uint64_t v165 = v168 + 16;
  v164();
  uint64_t v74 = *(void (**)(char *, char *, uint64_t))(v199 + 16);
  uint64_t v166 = v73;
  uint64_t v75 = v163;
  v162 = v74;
  uint64_t v163 = (char *)(v199 + 16);
  v74(v73, v75, v200);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417728);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25A518140;
  uint64_t v133 = (uint64_t *)(inited + 48);
  uint64_t v77 = v186;
  *(void *)(inited + 32) = (*((uint64_t (**)(uint64_t))v172 + 1))(v186);
  *(void *)(inited + 40) = v78;
  uint64_t v79 = &v187[*(int *)(v195 + 48)];
  v172 = v60;
  uint64_t v80 = v146;
  v136();
  uint64_t v81 = v134;
  v64(v79, (uint64_t)v135, v134);
  uint64_t v82 = v63;
  uint64_t v83 = *(void (**)(char *, char *, uint64_t))(v63 + 32);
  uint64_t v84 = v145;
  v83(v145, v79, v81);
  uint64_t v85 = *(void *)(v80 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v85 + 48))(v84, 1, v80) == 1)
  {
    (*(void (**)(char *, uint64_t))(v139 + 8))(v187, v77);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v84, v81);
    uint64_t v86 = v133;
    v133[4] = 0;
    *(_OWORD *)uint64_t v86 = 0u;
    *((_OWORD *)v86 + 1) = 0u;
  }
  else
  {
    uint64_t v87 = *(void (**)(uint64_t, uint64_t))(a22 + 24);
    *(void *)(inited + 72) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 80) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1(v133);
    v87(v80, a22);
    (*(void (**)(char *, uint64_t))(v85 + 8))(v84, v80);
    (*(void (**)(char *, uint64_t))(v139 + 8))(v187, v77);
  }
  v187 = a27;
  uint64_t v88 = v196;
  uint64_t v89 = v203;
  *(void *)(inited + 88) = (*(uint64_t (**)(uint64_t))(v160 + 8))(v203);
  *(void *)(inited + 96) = v90;
  uint64_t v91 = v182;
  uint64_t v92 = &v182[*(int *)(v197 + 48)];
  v142(v182, v88, v89);
  uint64_t v93 = v189;
  v140(v92, v144, v189);
  uint64_t v94 = v188;
  uint64_t v95 = v159;
  (*(void (**)(char *, char *, void (*)(void, void)))(v188 + 32))(v159, v92, v93);
  uint64_t v96 = v167;
  uint64_t v97 = *(void *)(v167 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v97 + 48))(v95, 1, v167) == 1)
  {
    (*(void (**)(char *, uint64_t))(v147 + 8))(v91, v89);
    (*(void (**)(char *, void))(v94 + 8))(v95, v93);
    *(void *)(inited + 136) = 0;
    *(_OWORD *)(inited + 104) = 0u;
    *(_OWORD *)(inited + 120) = 0u;
  }
  else
  {
    uint64_t v189 = *(void (**)(void, void))(a24 + 24);
    *(void *)(inited + 128) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 136) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 104));
    v189(v96, a24);
    (*(void (**)(char *, uint64_t))(v97 + 8))(v95, v96);
    (*(void (**)(char *, uint64_t))(v147 + 8))(v182, v89);
  }
  uint64_t v98 = v170;
  uint64_t v99 = v190;
  uint64_t v203 = a29;
  uint64_t v100 = v198;
  uint64_t v101 = v192;
  *(void *)(inited + 144) = (*(uint64_t (**)(uint64_t))(v169 + 8))(v192);
  *(void *)(inited + 152) = v102;
  unint64_t v103 = v183;
  uint64_t v104 = &v183[*(int *)(v204 + 48)];
  v150(v183, v100, v101);
  uint64_t v105 = v191;
  v148(v104, v152, v191);
  (*(void (**)(char *, char *, void (*)(void, void)))(v99 + 32))(v98, v104, v105);
  uint64_t v106 = v171;
  uint64_t v107 = *(void *)(v171 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v107 + 48))(v98, 1, v171) == 1)
  {
    (*(void (**)(char *, uint64_t))(v153 + 8))(v103, v101);
    (*(void (**)(char *, void))(v99 + 8))(v98, v105);
    *(void *)(inited + 192) = 0;
    *(_OWORD *)(inited + 160) = 0u;
    *(_OWORD *)(inited + 176) = 0u;
  }
  else
  {
    uint64_t v191 = *(void (**)(void, void))(a26 + 24);
    *(void *)(inited + 184) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 192) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 160));
    v191(v106, a26);
    (*(void (**)(char *, uint64_t))(v107 + 8))(v98, v106);
    (*(void (**)(char *, uint64_t))(v153 + 8))(v183, v101);
  }
  uint64_t v108 = v174;
  uint64_t v109 = v184;
  uint64_t v110 = v205;
  uint64_t v111 = v202;
  *(void *)(inited + 200) = (*((uint64_t (**)(uint64_t))v187 + 1))(v202);
  *(void *)(inited + 208) = v112;
  uint64_t v113 = &v109[*(int *)(v206 + 48)];
  ((void (*)(char *, char *, uint64_t))v156)(v109, v110, v111);
  uint64_t v114 = v194;
  v154(v113, v158, v194);
  uint64_t v115 = v193;
  (*(void (**)(char *, char *, uint64_t))(v193 + 32))(v108, v113, v114);
  uint64_t v116 = v176;
  uint64_t v117 = *(void *)(v176 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v117 + 48))(v108, 1, v176) == 1)
  {
    (*(void (**)(char *, uint64_t))(v161 + 8))(v109, v111);
    (*(void (**)(char *, uint64_t))(v115 + 8))(v108, v114);
    *(void *)(inited + 248) = 0;
    *(_OWORD *)(inited + 216) = 0u;
    *(_OWORD *)(inited + 232) = 0u;
  }
  else
  {
    uint64_t v118 = *(void (**)(uint64_t, uint64_t))(a28 + 24);
    *(void *)(inited + 240) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 248) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 216));
    v118(v116, a28);
    (*(void (**)(char *, uint64_t))(v117 + 8))(v108, v116);
    (*(void (**)(char *, uint64_t))(v161 + 8))(v184, v202);
  }
  uint64_t v119 = v201;
  uint64_t v120 = v199;
  uint64_t v121 = v185;
  uint64_t v122 = v207;
  *(void *)(inited + 256) = (*(uint64_t (**)(uint64_t))(v203 + 8))(v201);
  *(void *)(inited + 264) = v123;
  uint64_t v124 = &v121[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, char *, uint64_t))v164)(v121, v122, v119);
  uint64_t v125 = v200;
  v162(v124, v166, v200);
  uint64_t v126 = v180;
  (*(void (**)(char *, char *, uint64_t))(v120 + 32))(v180, v124, v125);
  uint64_t v127 = v181;
  uint64_t v128 = *(void *)(v181 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v128 + 48))(v126, 1, v181) == 1)
  {
    (*(void (**)(char *, uint64_t))(v168 + 8))(v121, v119);
    (*(void (**)(char *, uint64_t))(v120 + 8))(v126, v125);
    *(void *)(inited + 304) = 0;
    *(_OWORD *)(inited + 272) = 0u;
    *(_OWORD *)(inited + 288) = 0u;
  }
  else
  {
    uint64_t v203 = *(void *)(a30 + 24);
    *(void *)(inited + 296) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 304) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 272));
    ((void (*)(uint64_t, uint64_t))v203)(v127, a30);
    (*(void (**)(char *, uint64_t))(v128 + 8))(v126, v127);
    (*(void (**)(char *, uint64_t))(v168 + 8))(v185, v119);
  }
  unint64_t v129 = sub_25A392B24(inited);
  uint64_t v130 = sub_25A44B160(v129);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v179 + 8))(v207, TupleTypeMetadata2);
  (*(void (**)(char *, uint64_t))(v178 + 8))(v205, v206);
  (*(void (**)(char *, uint64_t))(v177 + 8))(v198, v204);
  (*(void (**)(char *, uint64_t))(v175 + 8))(v196, v197);
  (*(void (**)(char *, uint64_t))(v173 + 8))(v172, v195);
  return v130;
}

uint64_t static PropertyListBuilder.buildBlock<A, B, C, D, E, F, G, H, I, J, K, L>(_:_:_:_:_:_:)(char *a1, uint64_t a2, char *a3, uint64_t a4, char *a5, uint64_t a6, void (*a7)(void), uint64_t a8, void (*a9)(char *, char *, uint64_t), char *a10, char *a11, char *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t *a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t *a35,uint64_t a36)
{
  uint64_t v198 = a8;
  uint64_t v192 = a7;
  uint64_t v189 = a6;
  v187 = a5;
  uint64_t v232 = a4;
  uint64_t v230 = a3;
  uint64_t v229 = a2;
  v226 = a1;
  uint64_t v196 = a29;
  uint64_t v186 = a27;
  uint64_t v235 = a23;
  uint64_t v237 = a21;
  uint64_t v245 = a19;
  unint64_t v244 = a17;
  uint64_t v236 = a15;
  uint64_t v167 = a14;
  uint64_t v216 = a13;
  uint64_t v203 = a25;
  uint64_t v191 = a12;
  uint64_t v194 = a11;
  uint64_t v193 = a10;
  uint64_t v190 = a9;
  uint64_t v213 = a24;
  uint64_t v234 = sub_25A50FA40();
  uint64_t v233 = *(void *)(v234 - 8);
  MEMORY[0x270FA5388](v234);
  uint64_t v212 = (char *)&v154 - v36;
  uint64_t v209 = a22;
  uint64_t v228 = sub_25A50FA40();
  uint64_t v227 = *(void *)(v228 - 8);
  MEMORY[0x270FA5388](v228);
  v231 = (char *)&v154 - v37;
  uint64_t v202 = a20;
  uint64_t v223 = sub_25A50FA40();
  uint64_t v224 = *(void *)(v223 - 8);
  MEMORY[0x270FA5388](v223);
  uint64_t v199 = a18;
  uint64_t v200 = (char *)&v154 - v38;
  uint64_t v222 = (void *)sub_25A50FA40();
  uint64_t v221 = *(v222 - 1);
  MEMORY[0x270FA5388](v222);
  uint64_t v195 = (char *)&v154 - v39;
  uint64_t v188 = a16;
  v219 = (void *)sub_25A50FA40();
  uint64_t v218 = *(v219 - 1);
  MEMORY[0x270FA5388](v219);
  uint64_t v181 = (char *)&v154 - v40;
  uint64_t v214 = sub_25A50FA40();
  uint64_t v217 = *(void *)(v214 - 8);
  MEMORY[0x270FA5388](v214);
  uint64_t v165 = (char *)&v154 - v41;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v211 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v42 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v207 = (char *)&v154 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v42);
  uint64_t v242 = (char *)&v154 - v44;
  uint64_t v241 = swift_getTupleTypeMetadata2();
  uint64_t v210 = *(void *)(v241 - 8);
  uint64_t v45 = MEMORY[0x270FA5388](v241);
  uint64_t v201 = (char *)&v154 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v45);
  uint64_t v240 = (char *)&v154 - v47;
  uint64_t v239 = swift_getTupleTypeMetadata2();
  uint64_t v208 = *(void *)(v239 - 8);
  uint64_t v48 = MEMORY[0x270FA5388](v239);
  uint64_t v197 = (char *)&v154 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v48);
  v238 = (char *)&v154 - v50;
  uint64_t v51 = swift_getTupleTypeMetadata2();
  uint64_t v206 = *(void *)(v51 - 8);
  uint64_t v52 = MEMORY[0x270FA5388](v51);
  uint64_t v220 = (char *)&v154 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v52);
  uint64_t v55 = (char *)&v154 - v54;
  uint64_t v56 = v236;
  uint64_t v57 = swift_getTupleTypeMetadata2();
  uint64_t v205 = *(void *)(v57 - 8);
  uint64_t v58 = MEMORY[0x270FA5388](v57);
  uint64_t v173 = (char *)&v154 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v58);
  uint64_t v61 = (char *)&v154 - v60;
  uint64_t v62 = v216;
  uint64_t v63 = v214;
  uint64_t v225 = swift_getTupleTypeMetadata2();
  uint64_t v204 = *(void *)(v225 - 8);
  uint64_t v64 = MEMORY[0x270FA5388](v225);
  uint64_t v215 = (char *)&v154 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = MEMORY[0x270FA5388](v64);
  uint64_t v68 = (char *)&v154 - v67;
  uint64_t v70 = *(void *)(v62 - 8);
  uint64_t v71 = *(void (**)(void))(v70 + 16);
  uint64_t v156 = (char *)&v154 + *(int *)(v66 + 48) - v67;
  uint64_t v69 = v156;
  uint64_t v157 = v70 + 16;
  uint64_t v158 = v71;
  uint64_t v159 = v70;
  ((void (*)(char *, char *, uint64_t))v71)((char *)&v154 - v67, v226, v62);
  uint64_t v155 = *(void (**)(char *, uint64_t, uint64_t))(v217 + 16);
  v155(v69, v229, v63);
  uint64_t v229 = v57;
  uint64_t v72 = &v61[*(int *)(v57 + 48)];
  uint64_t v166 = *(void *)(v56 - 8);
  uint64_t v73 = *(void (**)(char *, char *, uint64_t))(v166 + 16);
  v226 = v61;
  v162 = v73;
  uint64_t v163 = v166 + 16;
  v73(v61, v230, v56);
  uint64_t v74 = *(void (**)(char *, char *, void *))(v218 + 16);
  uint64_t v164 = v72;
  uint64_t v160 = v74;
  uint64_t v161 = v218 + 16;
  v74(v72, (char *)v232, v219);
  uint64_t v232 = v51;
  uint64_t v75 = &v55[*(int *)(v51 + 48)];
  uint64_t v174 = *(v244 - 1);
  uint64_t v76 = *(void (**)(char *, char *, uint64_t *))(v174 + 16);
  uint64_t v230 = v55;
  v170 = v76;
  uint64_t v171 = v174 + 16;
  ((void (*)(char *, char *))v76)(v55, v187);
  uint64_t v77 = *(void (**)(char *, char *, void *))(v221 + 16);
  v172 = v75;
  uint64_t v168 = v77;
  uint64_t v169 = v221 + 16;
  v77(v75, (char *)v189, v222);
  uint64_t v78 = &v238[*(int *)(v239 + 48)];
  uint64_t v180 = *(v245 - 1);
  uint64_t v177 = *(void (**)(void))(v180 + 16);
  uint64_t v178 = v180 + 16;
  v177();
  uint64_t v79 = *(void (**)(char *, char *, uint64_t))(v224 + 16);
  uint64_t v179 = v78;
  uint64_t v175 = v79;
  uint64_t v176 = v224 + 16;
  v79(v78, (char *)v198, v223);
  uint64_t v80 = &v240[*(int *)(v241 + 48)];
  uint64_t v189 = *(void *)(v237 - 8);
  uint64_t v184 = *(void (**)(void))(v189 + 16);
  uint64_t v185 = v189 + 16;
  v184();
  uint64_t v81 = *(void (**)(char *, char *, uint64_t))(v227 + 16);
  v187 = v80;
  uint64_t v182 = v81;
  uint64_t v183 = v227 + 16;
  v81(v80, v193, v228);
  uint64_t v82 = &v242[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v198 = *(void *)(v235 - 8);
  uint64_t v192 = *(void (**)(void))(v198 + 16);
  uint64_t v193 = (char *)(v198 + 16);
  v192();
  uint64_t v83 = *(void (**)(char *, char *, uint64_t))(v233 + 16);
  uint64_t v194 = v82;
  uint64_t v84 = v191;
  uint64_t v190 = v83;
  uint64_t v191 = (char *)(v233 + 16);
  v83(v82, v84, v234);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417728);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25A518150;
  uint64_t v86 = (uint64_t *)(inited + 48);
  uint64_t v87 = v216;
  *(void *)(inited + 32) = (*((uint64_t (**)(uint64_t))v203 + 1))(v216);
  *(void *)(inited + 40) = v88;
  uint64_t v89 = &v215[*(int *)(v225 + 48)];
  uint64_t v203 = v68;
  v158();
  uint64_t v90 = v214;
  v155(v89, (uint64_t)v156, v214);
  uint64_t v91 = v90;
  uint64_t v92 = v217;
  uint64_t v93 = v165;
  (*(void (**)(char *, char *, uint64_t))(v217 + 32))(v165, v89, v91);
  uint64_t v94 = *(void *)(v167 - 8);
  uint64_t v95 = v167;
  if ((*(unsigned int (**)(char *, uint64_t))(v94 + 48))(v93, 1) == 1)
  {
    (*(void (**)(char *, uint64_t))(v159 + 8))(v215, v87);
    (*(void (**)(char *, uint64_t))(v92 + 8))(v93, v91);
    *(void *)(inited + 80) = 0;
    *(_OWORD *)uint64_t v86 = 0u;
    *(_OWORD *)(inited + 64) = 0u;
  }
  else
  {
    uint64_t v217 = *(void *)(a26 + 24);
    *(void *)(inited + 72) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 80) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1(v86);
    ((void (*)(uint64_t, uint64_t))v217)(v95, a26);
    (*(void (**)(char *, uint64_t))(v94 + 8))(v93, v95);
    (*(void (**)(char *, uint64_t))(v159 + 8))(v215, v87);
  }
  uint64_t v217 = a31;
  uint64_t v96 = v226;
  uint64_t v97 = v236;
  *(void *)(inited + 88) = (*(uint64_t (**)(uint64_t))(v186 + 8))(v236);
  *(void *)(inited + 96) = v98;
  uint64_t v99 = v173;
  uint64_t v100 = &v173[*(int *)(v229 + 48)];
  v162(v173, v96, v97);
  uint64_t v101 = v219;
  v160(v100, v164, v219);
  uint64_t v102 = v218;
  unint64_t v103 = v181;
  (*(void (**)(char *, char *, void *))(v218 + 32))(v181, v100, v101);
  uint64_t v104 = v188;
  uint64_t v105 = *(void *)(v188 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v105 + 48))(v103, 1, v188) == 1)
  {
    (*(void (**)(char *, uint64_t))(v166 + 8))(v99, v97);
    (*(void (**)(char *, void *))(v102 + 8))(v103, v101);
    *(void *)(inited + 136) = 0;
    *(_OWORD *)(inited + 104) = 0u;
    *(_OWORD *)(inited + 120) = 0u;
  }
  else
  {
    v219 = *(void **)(a28 + 24);
    *(void *)(inited + 128) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 136) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 104));
    ((void (*)(uint64_t, uint64_t))v219)(v104, a28);
    (*(void (**)(char *, uint64_t))(v105 + 8))(v103, v104);
    (*(void (**)(char *, uint64_t))(v166 + 8))(v99, v236);
  }
  uint64_t v106 = v244;
  uint64_t v107 = v220;
  uint64_t v236 = a33;
  uint64_t v108 = v230;
  *(void *)(inited + 144) = (*(uint64_t (**)(uint64_t *))(v196 + 8))(v244);
  *(void *)(inited + 152) = v109;
  uint64_t v110 = &v107[*(int *)(v232 + 48)];
  v170(v107, v108, v106);
  uint64_t v111 = v222;
  v168(v110, v172, v222);
  uint64_t v112 = v221;
  uint64_t v113 = v195;
  (*(void (**)(char *, char *, void *))(v221 + 32))(v195, v110, v111);
  uint64_t v114 = v199;
  uint64_t v115 = *(void *)(v199 - 8);
  int v116 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v115 + 48))(v113, 1, v199);
  uint64_t v117 = v223;
  if (v116 == 1)
  {
    (*(void (**)(char *, uint64_t *))(v174 + 8))(v220, v106);
    (*(void (**)(char *, void *))(v112 + 8))(v113, v111);
    *(void *)(inited + 192) = 0;
    *(_OWORD *)(inited + 160) = 0u;
    *(_OWORD *)(inited + 176) = 0u;
  }
  else
  {
    uint64_t v222 = *(void **)(a30 + 24);
    *(void *)(inited + 184) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 192) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 160));
    ((void (*)(uint64_t, uint64_t))v222)(v114, a30);
    (*(void (**)(char *, uint64_t))(v115 + 8))(v113, v114);
    (*(void (**)(char *, uint64_t *))(v174 + 8))(v220, v244);
  }
  uint64_t v118 = v245;
  uint64_t v119 = v224;
  uint64_t v120 = v197;
  unint64_t v244 = a35;
  uint64_t v121 = v238;
  *(void *)(inited + 200) = (*(uint64_t (**)(void *))(v217 + 8))(v245);
  *(void *)(inited + 208) = v122;
  uint64_t v123 = &v120[*(int *)(v239 + 48)];
  ((void (*)(char *, char *, void *))v177)(v120, v121, v118);
  v175(v123, v179, v117);
  uint64_t v124 = v120;
  uint64_t v125 = v200;
  (*(void (**)(char *, char *, uint64_t))(v119 + 32))(v200, v123, v117);
  uint64_t v126 = v202;
  uint64_t v127 = *(void *)(v202 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v127 + 48))(v125, 1, v202) == 1)
  {
    (*(void (**)(char *, void *))(v180 + 8))(v124, v118);
    (*(void (**)(char *, uint64_t))(v119 + 8))(v125, v117);
    *(void *)(inited + 248) = 0;
    *(_OWORD *)(inited + 216) = 0u;
    *(_OWORD *)(inited + 232) = 0u;
  }
  else
  {
    uint64_t v224 = *(void *)(a32 + 24);
    *(void *)(inited + 240) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 248) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 216));
    ((void (*)(uint64_t, uint64_t))v224)(v126, a32);
    (*(void (**)(char *, uint64_t))(v127 + 8))(v125, v126);
    (*(void (**)(char *, void *))(v180 + 8))(v124, v245);
  }
  uint64_t v128 = v227;
  unint64_t v129 = v240;
  uint64_t v130 = v237;
  *(void *)(inited + 256) = (*(uint64_t (**)(uint64_t))(v236 + 8))(v237);
  *(void *)(inited + 264) = v131;
  uint64_t v132 = v201;
  uint64_t v133 = &v201[*(int *)(v241 + 48)];
  ((void (*)(char *, char *, uint64_t))v184)(v201, v129, v130);
  uint64_t v134 = v228;
  v182(v133, v187, v228);
  uint64_t v135 = v231;
  (*(void (**)(char *, char *, uint64_t))(v128 + 32))(v231, v133, v134);
  uint64_t v136 = v209;
  uint64_t v137 = *(void *)(v209 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v137 + 48))(v135, 1, v209) == 1)
  {
    (*(void (**)(char *, uint64_t))(v189 + 8))(v132, v130);
    (*(void (**)(char *, uint64_t))(v128 + 8))(v231, v134);
    *(void *)(inited + 304) = 0;
    *(_OWORD *)(inited + 272) = 0u;
    *(_OWORD *)(inited + 288) = 0u;
  }
  else
  {
    uint64_t v138 = *(void (**)(uint64_t, uint64_t))(a34 + 24);
    *(void *)(inited + 296) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 304) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 272));
    uint64_t v139 = v136;
    uint64_t v140 = v231;
    v138(v139, a34);
    (*(void (**)(char *, uint64_t))(v137 + 8))(v140, v139);
    (*(void (**)(char *, uint64_t))(v189 + 8))(v132, v237);
  }
  uint64_t v141 = v235;
  uint64_t v142 = v212;
  uint64_t v143 = v233;
  uint64_t v144 = v242;
  *(void *)(inited + 312) = ((uint64_t (*)(uint64_t))v244[1])(v235);
  *(void *)(inited + 320) = v145;
  uint64_t v146 = v207;
  uint64_t v147 = &v207[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, char *, uint64_t))v192)(v207, v144, v141);
  uint64_t v148 = v234;
  v190(v147, v194, v234);
  (*(void (**)(char *, char *, uint64_t))(v143 + 32))(v142, v147, v148);
  uint64_t v149 = v213;
  uint64_t v150 = *(void *)(v213 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v150 + 48))(v142, 1, v213) == 1)
  {
    (*(void (**)(char *, uint64_t))(v198 + 8))(v146, v141);
    (*(void (**)(char *, uint64_t))(v143 + 8))(v142, v148);
    *(void *)(inited + 360) = 0;
    *(_OWORD *)(inited + 328) = 0u;
    *(_OWORD *)(inited + 344) = 0u;
  }
  else
  {
    unint64_t v244 = (uint64_t *)(inited + 328);
    uint64_t v245 = *(void **)(a36 + 24);
    *(void *)(inited + 352) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 360) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1(v244);
    ((void (*)(uint64_t, uint64_t))v245)(v149, a36);
    (*(void (**)(char *, uint64_t))(v150 + 8))(v142, v149);
    (*(void (**)(char *, uint64_t))(v198 + 8))(v146, v141);
  }
  unint64_t v151 = sub_25A392B24(inited);
  uint64_t v152 = sub_25A44B160(v151);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v211 + 8))(v242, TupleTypeMetadata2);
  (*(void (**)(char *, uint64_t))(v210 + 8))(v240, v241);
  (*(void (**)(char *, uint64_t))(v208 + 8))(v238, v239);
  (*(void (**)(char *, uint64_t))(v206 + 8))(v230, v232);
  (*(void (**)(char *, uint64_t))(v205 + 8))(v226, v229);
  (*(void (**)(char *, uint64_t))(v204 + 8))(v203, v225);
  return v152;
}

uint64_t static PropertyListBuilder.buildBlock<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(_:_:_:_:_:_:_:)(char *a1, uint64_t a2, uint64_t a3, char *a4, void (*a5)(void), char *a6, void (*a7)(char *, char *, uint64_t), void (*a8)(void), char *a9, uint64_t a10, uint64_t a11, uint64_t a12, char *a13, char *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  uint64_t v224 = a8;
  uint64_t v222 = a7;
  uint64_t v215 = a5;
  uint64_t v216 = a6;
  uint64_t v266 = a4;
  uint64_t v214 = a3;
  uint64_t v265 = a2;
  uint64_t v264 = a1;
  uint64_t v220 = a33;
  uint64_t v211 = a31;
  uint64_t v271 = a27;
  uint64_t v272 = a25;
  uint64_t v283 = a23;
  uint64_t v285 = a21;
  uint64_t v282 = a19;
  uint64_t v284 = a17;
  uint64_t v197 = a16;
  uint64_t v254 = a15;
  uint64_t v232 = a29;
  uint64_t v223 = a14;
  v226 = a13;
  uint64_t v228 = a12;
  uint64_t v225 = a11;
  uint64_t v221 = a10;
  uint64_t v217 = a9;
  uint64_t v244 = a28;
  uint64_t v270 = sub_25A50FA40();
  uint64_t v269 = *(void *)(v270 - 8);
  MEMORY[0x270FA5388](v270);
  uint64_t v243 = (char *)&v179 - v42;
  uint64_t v241 = a26;
  uint64_t v268 = sub_25A50FA40();
  uint64_t v267 = *(void *)(v268 - 8);
  MEMORY[0x270FA5388](v268);
  v238 = (char *)&v179 - v43;
  uint64_t v234 = a24;
  uint64_t v262 = sub_25A50FA40();
  uint64_t v261 = *(void *)(v262 - 8);
  MEMORY[0x270FA5388](v262);
  uint64_t v230 = a22;
  v231 = (char *)&v179 - v44;
  uint64_t v260 = (void *)sub_25A50FA40();
  uint64_t v259 = *(v260 - 1);
  MEMORY[0x270FA5388](v260);
  uint64_t v229 = (char *)&v179 - v45;
  uint64_t v227 = a20;
  uint64_t v258 = sub_25A50FA40();
  uint64_t v257 = *(void *)(v258 - 8);
  MEMORY[0x270FA5388](v258);
  uint64_t v218 = a18;
  v219 = (char *)&v179 - v46;
  uint64_t v256 = (void *)sub_25A50FA40();
  uint64_t v255 = *(v256 - 1);
  MEMORY[0x270FA5388](v256);
  uint64_t v210 = (char *)&v179 - v47;
  uint64_t v251 = sub_25A50FA40();
  uint64_t v253 = *(void *)(v251 - 8);
  MEMORY[0x270FA5388](v251);
  uint64_t v195 = (char *)&v179 - v48;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v242 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v49 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  v250 = (char *)&v179 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v49);
  v280 = (char *)&v179 - v51;
  uint64_t v279 = swift_getTupleTypeMetadata2();
  uint64_t v240 = *(void *)(v279 - 8);
  uint64_t v52 = MEMORY[0x270FA5388](v279);
  v249 = (char *)&v179 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v52);
  uint64_t v278 = (char *)&v179 - v54;
  uint64_t v277 = swift_getTupleTypeMetadata2();
  uint64_t v239 = *(void *)(v277 - 8);
  uint64_t v55 = MEMORY[0x270FA5388](v277);
  uint64_t v248 = (char *)&v179 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v55);
  v276 = (char *)&v179 - v57;
  uint64_t v275 = swift_getTupleTypeMetadata2();
  uint64_t v237 = *(void *)(v275 - 8);
  uint64_t v58 = MEMORY[0x270FA5388](v275);
  v247 = (char *)&v179 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v58);
  v274 = (char *)&v179 - v60;
  uint64_t v273 = swift_getTupleTypeMetadata2();
  uint64_t v236 = *(void *)(v273 - 8);
  uint64_t v61 = MEMORY[0x270FA5388](v273);
  v246 = (char *)&v179 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v61);
  uint64_t v64 = (char *)&v179 - v63;
  uint64_t v65 = swift_getTupleTypeMetadata2();
  uint64_t v235 = *(void *)(v65 - 8);
  uint64_t v66 = MEMORY[0x270FA5388](v65);
  uint64_t v245 = (char *)&v179 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v66);
  uint64_t v69 = (char *)&v179 - v68;
  uint64_t v70 = v254;
  uint64_t v71 = v251;
  uint64_t v263 = swift_getTupleTypeMetadata2();
  uint64_t v233 = *(void *)(v263 - 8);
  uint64_t v72 = MEMORY[0x270FA5388](v263);
  v252 = (char *)&v179 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = MEMORY[0x270FA5388](v72);
  uint64_t v76 = (char *)&v179 - v75;
  uint64_t v78 = *(void *)(v70 - 8);
  uint64_t v79 = *(void (**)(void))(v78 + 16);
  uint64_t v181 = (char *)&v179 + *(int *)(v74 + 48) - v75;
  uint64_t v77 = v181;
  uint64_t v182 = v79;
  uint64_t v183 = v78 + 16;
  uint64_t v184 = v78;
  ((void (*)(char *, char *, uint64_t))v79)((char *)&v179 - v75, v264, v70);
  uint64_t v180 = *(void (**)(char *, uint64_t, uint64_t))(v253 + 16);
  v180(v77, v265, v71);
  uint64_t v265 = v65;
  uint64_t v80 = &v69[*(int *)(v65 + 48)];
  uint64_t v190 = *(void *)(v284 - 8);
  uint64_t v81 = *(void (**)(char *, char *, uint64_t))(v190 + 16);
  uint64_t v264 = v69;
  uint64_t v82 = v69;
  uint64_t v83 = v70;
  uint64_t v84 = v285;
  v187 = v81;
  uint64_t v188 = v190 + 16;
  ((void (*)(char *, uint64_t))v81)(v82, v214);
  uint64_t v85 = *(void (**)(char *, char *, void *))(v255 + 16);
  uint64_t v189 = v80;
  uint64_t v185 = v85;
  uint64_t v186 = v255 + 16;
  v85(v80, v266, v256);
  uint64_t v86 = &v64[*(int *)(v273 + 48)];
  uint64_t v198 = *(void *)(v282 - 8);
  uint64_t v87 = *(void (**)(char *, char *, uint64_t))(v198 + 16);
  uint64_t v266 = v64;
  uint64_t v88 = v261;
  uint64_t v193 = v87;
  uint64_t v194 = v198 + 16;
  ((void (*)(char *, void (*)(void)))v87)(v64, v215);
  uint64_t v89 = *(void (**)(char *, char *, uint64_t))(v257 + 16);
  uint64_t v196 = v86;
  uint64_t v191 = v89;
  uint64_t v192 = v257 + 16;
  v89(v86, v216, v258);
  uint64_t v90 = &v274[*(int *)(v275 + 48)];
  uint64_t v204 = *(void *)(v84 - 8);
  uint64_t v201 = *(void (**)(void))(v204 + 16);
  uint64_t v202 = v204 + 16;
  v201();
  uint64_t v91 = *(void (**)(char *, char *, void *))(v259 + 16);
  uint64_t v203 = v90;
  uint64_t v199 = v91;
  uint64_t v200 = v259 + 16;
  v91(v90, (char *)v224, v260);
  uint64_t v92 = &v276[*(int *)(v277 + 48)];
  uint64_t v212 = *(void *)(v283 - 8);
  uint64_t v207 = *(void (**)(void))(v212 + 16);
  uint64_t v208 = v212 + 16;
  v207();
  uint64_t v93 = *(void (**)(char *, char *, uint64_t))(v88 + 16);
  uint64_t v209 = v92;
  uint64_t v205 = v93;
  uint64_t v206 = v88 + 16;
  v93(v92, (char *)v221, v262);
  uint64_t v94 = &v278[*(int *)(v279 + 48)];
  uint64_t v221 = *(void *)(v272 - 8);
  uint64_t v215 = *(void (**)(void))(v221 + 16);
  uint64_t v216 = (char *)(v221 + 16);
  v215();
  uint64_t v95 = *(void (**)(char *, char *, uint64_t))(v267 + 16);
  uint64_t v217 = v94;
  uint64_t v213 = v95;
  uint64_t v214 = v267 + 16;
  v95(v94, (char *)v228, v268);
  uint64_t v96 = &v280[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v228 = *(void *)(v271 - 8);
  uint64_t v224 = *(void (**)(void))(v228 + 16);
  uint64_t v225 = v228 + 16;
  v224();
  uint64_t v97 = *(void (**)(char *, char *, uint64_t))(v269 + 16);
  v226 = v96;
  uint64_t v98 = v223;
  uint64_t v222 = v97;
  uint64_t v223 = (char *)(v269 + 16);
  v97(v96, v98, v270);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417728);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25A518160;
  uint64_t v100 = (uint64_t *)(inited + 48);
  *(void *)(inited + 32) = (*((uint64_t (**)(uint64_t))v232 + 1))(v83);
  *(void *)(inited + 40) = v101;
  uint64_t v102 = &v252[*(int *)(v263 + 48)];
  uint64_t v232 = v76;
  uint64_t v103 = v251;
  v182();
  v180(v102, (uint64_t)v181, v103);
  uint64_t v104 = v253;
  uint64_t v105 = v195;
  (*(void (**)(char *, char *, uint64_t))(v253 + 32))(v195, v102, v103);
  uint64_t v106 = *(void *)(v197 - 8);
  uint64_t v107 = v105;
  uint64_t v108 = v105;
  uint64_t v109 = v197;
  if ((*(unsigned int (**)(char *, uint64_t))(v106 + 48))(v108, 1) == 1)
  {
    (*(void (**)(char *, uint64_t))(v184 + 8))(v252, v254);
    (*(void (**)(char *, uint64_t))(v104 + 8))(v107, v103);
    *(void *)(inited + 80) = 0;
    *(_OWORD *)uint64_t v100 = 0u;
    *(_OWORD *)(inited + 64) = 0u;
  }
  else
  {
    uint64_t v110 = *(void (**)(uint64_t, uint64_t))(a30 + 24);
    *(void *)(inited + 72) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 80) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1(v100);
    v110(v109, a30);
    (*(void (**)(char *, uint64_t))(v106 + 8))(v107, v109);
    (*(void (**)(char *, uint64_t))(v184 + 8))(v252, v254);
  }
  uint64_t v254 = a35;
  uint64_t v111 = v264;
  uint64_t v112 = v284;
  *(void *)(inited + 88) = (*(uint64_t (**)(uint64_t))(v211 + 8))(v284);
  *(void *)(inited + 96) = v113;
  uint64_t v114 = v245;
  uint64_t v115 = &v245[*(int *)(v265 + 48)];
  v187(v245, v111, v112);
  int v116 = v256;
  v185(v115, v189, v256);
  uint64_t v117 = v255;
  uint64_t v118 = v210;
  (*(void (**)(char *, char *, void *))(v255 + 32))(v210, v115, v116);
  uint64_t v119 = v218;
  uint64_t v120 = *(void *)(v218 - 8);
  int v121 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v120 + 48))(v118, 1, v218);
  uint64_t v122 = v257;
  if (v121 == 1)
  {
    (*(void (**)(char *, uint64_t))(v190 + 8))(v114, v284);
    (*(void (**)(char *, void *))(v117 + 8))(v118, v116);
    *(void *)(inited + 136) = 0;
    *(_OWORD *)(inited + 104) = 0u;
    *(_OWORD *)(inited + 120) = 0u;
  }
  else
  {
    uint64_t v256 = *(void **)(a32 + 24);
    *(void *)(inited + 128) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 136) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 104));
    ((void (*)(uint64_t, uint64_t))v256)(v119, a32);
    (*(void (**)(char *, uint64_t))(v120 + 8))(v118, v119);
    (*(void (**)(char *, uint64_t))(v190 + 8))(v245, v284);
  }
  uint64_t v123 = v219;
  uint64_t v124 = v258;
  uint64_t v125 = v246;
  uint64_t v284 = a37;
  uint64_t v126 = v266;
  uint64_t v127 = v282;
  *(void *)(inited + 144) = (*(uint64_t (**)(uint64_t))(v220 + 8))(v282);
  *(void *)(inited + 152) = v128;
  unint64_t v129 = &v125[*(int *)(v273 + 48)];
  v193(v125, v126, v127);
  v191(v129, v196, v124);
  (*(void (**)(char *, char *, uint64_t))(v122 + 32))(v123, v129, v124);
  uint64_t v130 = v227;
  uint64_t v131 = *(void *)(v227 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v131 + 48))(v123, 1, v227) == 1)
  {
    (*(void (**)(char *, uint64_t))(v198 + 8))(v125, v127);
    (*(void (**)(char *, uint64_t))(v122 + 8))(v123, v124);
    *(void *)(inited + 192) = 0;
    *(_OWORD *)(inited + 160) = 0u;
    *(_OWORD *)(inited + 176) = 0u;
  }
  else
  {
    uint64_t v132 = *(void (**)(uint64_t, uint64_t))(a34 + 24);
    *(void *)(inited + 184) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 192) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 160));
    v132(v130, a34);
    (*(void (**)(char *, uint64_t))(v131 + 8))(v123, v130);
    (*(void (**)(char *, uint64_t))(v198 + 8))(v246, v282);
  }
  uint64_t v133 = v260;
  uint64_t v134 = v247;
  uint64_t v282 = a39;
  uint64_t v135 = v274;
  uint64_t v136 = v285;
  *(void *)(inited + 200) = (*(uint64_t (**)(uint64_t))(v254 + 8))(v285);
  *(void *)(inited + 208) = v137;
  uint64_t v138 = &v134[*(int *)(v275 + 48)];
  ((void (*)(char *, char *, uint64_t))v201)(v134, v135, v136);
  v199(v138, v203, v133);
  uint64_t v139 = v259;
  uint64_t v140 = v229;
  (*(void (**)(char *, char *, void *))(v259 + 32))(v229, v138, v133);
  uint64_t v141 = v230;
  uint64_t v142 = *(void *)(v230 - 8);
  int v143 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v142 + 48))(v140, 1, v230);
  uint64_t v144 = v261;
  if (v143 == 1)
  {
    (*(void (**)(char *, uint64_t))(v204 + 8))(v134, v285);
    (*(void (**)(char *, void *))(v139 + 8))(v140, v133);
    *(void *)(inited + 248) = 0;
    *(_OWORD *)(inited + 216) = 0u;
    *(_OWORD *)(inited + 232) = 0u;
  }
  else
  {
    uint64_t v260 = *(void **)(a36 + 24);
    *(void *)(inited + 240) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 248) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 216));
    ((void (*)(uint64_t, uint64_t))v260)(v141, a36);
    (*(void (**)(char *, uint64_t))(v142 + 8))(v140, v141);
    (*(void (**)(char *, uint64_t))(v204 + 8))(v247, v285);
  }
  uint64_t v145 = v283;
  uint64_t v285 = a41;
  uint64_t v146 = v276;
  *(void *)(inited + 256) = (*(uint64_t (**)(uint64_t))(v284 + 8))(v283);
  *(void *)(inited + 264) = v147;
  uint64_t v148 = v248;
  uint64_t v149 = &v248[*(int *)(v277 + 48)];
  ((void (*)(char *, char *, uint64_t))v207)(v248, v146, v145);
  uint64_t v150 = v262;
  v205(v149, v209, v262);
  unint64_t v151 = v231;
  (*(void (**)(char *, char *, uint64_t))(v144 + 32))(v231, v149, v150);
  uint64_t v152 = v234;
  uint64_t v153 = *(void *)(v234 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v153 + 48))(v151, 1, v234) == 1)
  {
    (*(void (**)(char *, uint64_t))(v212 + 8))(v148, v145);
    (*(void (**)(char *, uint64_t))(v144 + 8))(v151, v150);
    *(void *)(inited + 304) = 0;
    *(_OWORD *)(inited + 272) = 0u;
    *(_OWORD *)(inited + 288) = 0u;
  }
  else
  {
    uint64_t v154 = *(void (**)(uint64_t, uint64_t))(a38 + 24);
    *(void *)(inited + 296) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 304) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 272));
    v154(v152, a38);
    (*(void (**)(char *, uint64_t))(v153 + 8))(v151, v152);
    (*(void (**)(char *, uint64_t))(v212 + 8))(v248, v283);
  }
  uint64_t v155 = v238;
  uint64_t v156 = v278;
  uint64_t v157 = v272;
  *(void *)(inited + 312) = (*(uint64_t (**)(uint64_t))(v282 + 8))(v272);
  *(void *)(inited + 320) = v158;
  uint64_t v159 = v249;
  uint64_t v160 = &v249[*(int *)(v279 + 48)];
  ((void (*)(char *, char *, uint64_t))v215)(v249, v156, v157);
  uint64_t v161 = v268;
  v213(v160, v217, v268);
  uint64_t v162 = v267;
  (*(void (**)(char *, char *, uint64_t))(v267 + 32))(v155, v160, v161);
  uint64_t v163 = v241;
  uint64_t v164 = *(void *)(v241 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v164 + 48))(v155, 1, v241) == 1)
  {
    (*(void (**)(char *, uint64_t))(v221 + 8))(v159, v157);
    (*(void (**)(char *, uint64_t))(v162 + 8))(v155, v161);
    *(void *)(inited + 360) = 0;
    *(_OWORD *)(inited + 328) = 0u;
    *(_OWORD *)(inited + 344) = 0u;
  }
  else
  {
    uint64_t v165 = *(void (**)(uint64_t, uint64_t))(a40 + 24);
    *(void *)(inited + 352) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 360) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 328));
    v165(v163, a40);
    (*(void (**)(char *, uint64_t))(v164 + 8))(v155, v163);
    (*(void (**)(char *, uint64_t))(v221 + 8))(v249, v272);
  }
  uint64_t v166 = v271;
  uint64_t v167 = v269;
  uint64_t v168 = v250;
  uint64_t v169 = v280;
  *(void *)(inited + 368) = (*(uint64_t (**)(uint64_t))(v285 + 8))(v271);
  *(void *)(inited + 376) = v170;
  uint64_t v171 = &v168[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, char *, uint64_t))v224)(v168, v169, v166);
  uint64_t v172 = v270;
  v222(v171, v226, v270);
  uint64_t v173 = v243;
  (*(void (**)(char *, char *, uint64_t))(v167 + 32))(v243, v171, v172);
  uint64_t v174 = v244;
  uint64_t v175 = *(void *)(v244 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v175 + 48))(v173, 1, v244) == 1)
  {
    (*(void (**)(char *, uint64_t))(v228 + 8))(v168, v166);
    (*(void (**)(char *, uint64_t))(v167 + 8))(v173, v172);
    *(void *)(inited + 416) = 0;
    *(_OWORD *)(inited + 384) = 0u;
    *(_OWORD *)(inited + 400) = 0u;
  }
  else
  {
    uint64_t v285 = *(void *)(a42 + 24);
    *(void *)(inited + 408) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 416) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 384));
    ((void (*)(uint64_t, uint64_t))v285)(v174, a42);
    (*(void (**)(char *, uint64_t))(v175 + 8))(v173, v174);
    (*(void (**)(char *, uint64_t))(v228 + 8))(v250, v166);
  }
  unint64_t v176 = sub_25A392B24(inited);
  uint64_t v177 = sub_25A44B160(v176);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v242 + 8))(v280, TupleTypeMetadata2);
  (*(void (**)(char *, uint64_t))(v240 + 8))(v278, v279);
  (*(void (**)(char *, uint64_t))(v239 + 8))(v276, v277);
  (*(void (**)(char *, uint64_t))(v237 + 8))(v274, v275);
  (*(void (**)(char *, uint64_t))(v236 + 8))(v266, v273);
  (*(void (**)(char *, uint64_t))(v235 + 8))(v264, v265);
  (*(void (**)(char *, uint64_t))(v233 + 8))(v232, v263);
  return v177;
}

uint64_t static PropertyListBuilder.buildBlock<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(_:_:_:_:_:_:_:_:)(char *a1, uint64_t a2, uint64_t a3, char *a4, void (*a5)(char *, char *, uint64_t), char *a6, char *a7, uint64_t a8, void (*a9)(void), char *a10, void (*a11)(char *, char *, uint64_t), void (*a12)(void), uint64_t a13, uint64_t a14, char *a15, char *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t *a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,char *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v243 = a8;
  uint64_t v241 = a7;
  uint64_t v237 = a5;
  v238 = a6;
  uint64_t v291 = a4;
  uint64_t v236 = a3;
  uint64_t v290 = a2;
  uint64_t v289 = a1;
  uint64_t v242 = a37;
  uint64_t v231 = a35;
  uint64_t v296 = a31;
  uint64_t v313 = a29;
  v312 = a27;
  uint64_t v311 = a25;
  uint64_t v310 = a23;
  uint64_t v309 = a21;
  uint64_t v297 = a19;
  uint64_t v211 = a18;
  uint64_t v278 = a17;
  uint64_t v258 = a33;
  v246 = a16;
  v249 = a15;
  uint64_t v251 = a14;
  uint64_t v248 = a13;
  v247 = a12;
  uint64_t v245 = a11;
  uint64_t v240 = a10;
  uint64_t v239 = a9;
  uint64_t v272 = a32;
  uint64_t v295 = sub_25A50FA40();
  uint64_t v294 = *(void *)(v295 - 8);
  MEMORY[0x270FA5388](v295);
  uint64_t v271 = (char *)&v194 - v48;
  uint64_t v270 = a30;
  uint64_t v293 = sub_25A50FA40();
  uint64_t v292 = *(void *)(v293 - 8);
  MEMORY[0x270FA5388](v293);
  uint64_t v267 = (char *)&v194 - v49;
  uint64_t v262 = a28;
  uint64_t v287 = sub_25A50FA40();
  uint64_t v286 = *(void *)(v287 - 8);
  MEMORY[0x270FA5388](v287);
  uint64_t v257 = (char *)&v194 - v50;
  uint64_t v255 = a26;
  uint64_t v285 = sub_25A50FA40();
  uint64_t v284 = *(void *)(v285 - 8);
  MEMORY[0x270FA5388](v285);
  uint64_t v254 = (char *)&v194 - v51;
  uint64_t v252 = a24;
  uint64_t v283 = (void *)sub_25A50FA40();
  uint64_t v282 = *(v283 - 1);
  MEMORY[0x270FA5388](v283);
  v250 = (char *)&v194 - v52;
  uint64_t v244 = a22;
  uint64_t v281 = (void *)sub_25A50FA40();
  uint64_t v280 = *(v281 - 1);
  MEMORY[0x270FA5388](v281);
  uint64_t v234 = a20;
  uint64_t v235 = (char *)&v194 - v53;
  uint64_t v279 = (void *)sub_25A50FA40();
  uint64_t v274 = *(v279 - 1);
  MEMORY[0x270FA5388](v279);
  uint64_t v225 = (char *)&v194 - v54;
  uint64_t v55 = sub_25A50FA40();
  uint64_t v277 = *(void *)(v55 - 8);
  MEMORY[0x270FA5388](v55);
  uint64_t v210 = (char *)&v194 - v56;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v269 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v57 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v265 = (char *)&v194 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v57);
  v307 = (char *)&v194 - v59;
  uint64_t v306 = swift_getTupleTypeMetadata2();
  uint64_t v268 = *(void *)(v306 - 8);
  uint64_t v60 = MEMORY[0x270FA5388](v306);
  uint64_t v256 = (char *)&v194 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v60);
  v305 = (char *)&v194 - v62;
  uint64_t v304 = swift_getTupleTypeMetadata2();
  uint64_t v266 = *(void *)(v304 - 8);
  uint64_t v63 = MEMORY[0x270FA5388](v304);
  uint64_t v253 = (char *)&v194 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v63);
  uint64_t v303 = (char *)&v194 - v65;
  uint64_t v302 = swift_getTupleTypeMetadata2();
  uint64_t v264 = *(void *)(v302 - 8);
  uint64_t v66 = MEMORY[0x270FA5388](v302);
  uint64_t v275 = (char *)&v194 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v66);
  uint64_t v301 = (char *)&v194 - v68;
  uint64_t v300 = swift_getTupleTypeMetadata2();
  uint64_t v263 = *(void *)(v300 - 8);
  uint64_t v69 = MEMORY[0x270FA5388](v300);
  uint64_t v233 = (char *)&v194 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v69);
  uint64_t v299 = (char *)&v194 - v71;
  uint64_t v298 = swift_getTupleTypeMetadata2();
  uint64_t v261 = *(void *)(v298 - 8);
  uint64_t v72 = MEMORY[0x270FA5388](v298);
  v219 = (char *)&v194 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v72);
  uint64_t v75 = (char *)&v194 - v74;
  uint64_t v76 = swift_getTupleTypeMetadata2();
  uint64_t v260 = *(void *)(v76 - 8);
  uint64_t v77 = MEMORY[0x270FA5388](v76);
  uint64_t v273 = (char *)&v194 - ((v78 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v77);
  uint64_t v80 = (char *)&v194 - v79;
  uint64_t v81 = v278;
  uint64_t v194 = v55;
  uint64_t v288 = swift_getTupleTypeMetadata2();
  uint64_t v259 = *(void *)(v288 - 8);
  uint64_t v82 = MEMORY[0x270FA5388](v288);
  v276 = (char *)&v194 - ((v83 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = MEMORY[0x270FA5388](v82);
  uint64_t v86 = (char *)&v194 - v85;
  uint64_t v88 = *(void *)(v81 - 8);
  uint64_t v89 = *(void (**)(void))(v88 + 16);
  uint64_t v195 = (char *)&v194 + *(int *)(v84 + 48) - v85;
  uint64_t v87 = v195;
  uint64_t v196 = v89;
  uint64_t v197 = v88 + 16;
  uint64_t v198 = v88;
  ((void (*)(char *, char *, uint64_t))v89)((char *)&v194 - v85, v289, v81);
  uint64_t v90 = *(void (**)(char *, uint64_t, uint64_t))(v277 + 16);
  v90(v87, v290, v55);
  uint64_t v290 = v76;
  uint64_t v91 = &v80[*(int *)(v76 + 48)];
  uint64_t v204 = *(void *)(v297 - 8);
  uint64_t v92 = *(void (**)(char *, char *, uint64_t))(v204 + 16);
  uint64_t v289 = v80;
  uint64_t v93 = v80;
  uint64_t v94 = v274;
  uint64_t v201 = v92;
  uint64_t v202 = v204 + 16;
  ((void (*)(char *, uint64_t))v92)(v93, v236);
  uint64_t v95 = *(void (**)(char *, char *, void *))(v94 + 16);
  uint64_t v203 = v91;
  uint64_t v199 = v95;
  uint64_t v200 = v94 + 16;
  v95(v91, v291, v279);
  uint64_t v96 = &v75[*(int *)(v298 + 48)];
  uint64_t v212 = *(void *)(v309 - 8);
  uint64_t v97 = *(void (**)(char *, char *, uint64_t))(v212 + 16);
  uint64_t v291 = v75;
  uint64_t v207 = v97;
  uint64_t v208 = v212 + 16;
  ((void (*)(char *, void (*)(char *, char *, uint64_t)))v97)(v75, v237);
  uint64_t v98 = *(void (**)(char *, char *, void *))(v280 + 16);
  uint64_t v209 = v96;
  uint64_t v205 = v98;
  uint64_t v206 = v280 + 16;
  v98(v96, v238, v281);
  uint64_t v99 = &v299[*(int *)(v300 + 48)];
  uint64_t v218 = *(void *)(v310 - 8);
  uint64_t v215 = *(void (**)(void))(v218 + 16);
  uint64_t v216 = v218 + 16;
  v215();
  uint64_t v100 = *(void (**)(char *, char *, void *))(v282 + 16);
  uint64_t v217 = v99;
  uint64_t v213 = v100;
  uint64_t v214 = v282 + 16;
  v100(v99, (char *)v243, v283);
  uint64_t v101 = &v301[*(int *)(v302 + 48)];
  uint64_t v226 = *(void *)(v311 - 8);
  uint64_t v222 = *(void (**)(void))(v226 + 16);
  uint64_t v223 = v226 + 16;
  v222();
  uint64_t v102 = *(void (**)(char *, char *, uint64_t))(v284 + 16);
  uint64_t v224 = v101;
  uint64_t v220 = v102;
  uint64_t v221 = v284 + 16;
  v102(v101, v240, v285);
  uint64_t v103 = &v303[*(int *)(v304 + 48)];
  uint64_t v236 = *(v312 - 1);
  uint64_t v229 = *(void (**)(void))(v236 + 16);
  uint64_t v230 = v236 + 16;
  v229();
  uint64_t v104 = *(void (**)(char *, char *, uint64_t))(v286 + 16);
  uint64_t v232 = v103;
  uint64_t v227 = v104;
  uint64_t v228 = v286 + 16;
  v104(v103, (char *)v247, v287);
  uint64_t v105 = &v305[*(int *)(v306 + 48)];
  uint64_t v243 = *(v313 - 1);
  uint64_t v239 = *(void (**)(void))(v243 + 16);
  uint64_t v240 = (char *)(v243 + 16);
  v239();
  uint64_t v106 = *(void (**)(char *, char *, uint64_t))(v292 + 16);
  uint64_t v241 = v105;
  uint64_t v237 = v106;
  v238 = (char *)(v292 + 16);
  v106(v105, (char *)v251, v293);
  uint64_t v107 = &v307[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v251 = *(void *)(v296 - 8);
  v247 = *(void (**)(void))(v251 + 16);
  uint64_t v248 = v251 + 16;
  v247();
  uint64_t v108 = *(void (**)(char *, char *, uint64_t))(v294 + 16);
  v249 = v107;
  uint64_t v109 = v246;
  uint64_t v245 = v108;
  v246 = (char *)(v294 + 16);
  v108(v107, v109, v295);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417728);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25A518130;
  uint64_t v111 = (uint64_t *)(inited + 48);
  *(void *)(inited + 32) = (*((uint64_t (**)(uint64_t))v258 + 1))(v81);
  *(void *)(inited + 40) = v112;
  uint64_t v113 = &v276[*(int *)(v288 + 48)];
  uint64_t v258 = v86;
  uint64_t v114 = v277;
  v196();
  uint64_t v115 = v194;
  v90(v113, (uint64_t)v195, v194);
  uint64_t v116 = v115;
  uint64_t v117 = v210;
  (*(void (**)(char *, char *, uint64_t))(v114 + 32))(v210, v113, v116);
  uint64_t v118 = *(void *)(v211 - 8);
  uint64_t v119 = v211;
  if ((*(unsigned int (**)(char *, uint64_t))(v118 + 48))(v117, 1) == 1)
  {
    (*(void (**)(char *, uint64_t))(v198 + 8))(v276, v278);
    (*(void (**)(char *, uint64_t))(v114 + 8))(v117, v116);
    *(void *)(inited + 80) = 0;
    *(_OWORD *)uint64_t v111 = 0u;
    *(_OWORD *)(inited + 64) = 0u;
  }
  else
  {
    uint64_t v120 = *(void (**)(uint64_t, uint64_t))(a34 + 24);
    *(void *)(inited + 72) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 80) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1(v111);
    v120(v119, a34);
    uint64_t v94 = v274;
    (*(void (**)(char *, uint64_t))(v118 + 8))(v117, v119);
    (*(void (**)(char *, uint64_t))(v198 + 8))(v276, v278);
  }
  uint64_t v278 = a39;
  int v121 = v289;
  uint64_t v122 = v297;
  *(void *)(inited + 88) = (*(uint64_t (**)(uint64_t))(v231 + 8))(v297);
  *(void *)(inited + 96) = v123;
  uint64_t v124 = v273;
  uint64_t v125 = &v273[*(int *)(v290 + 48)];
  v201(v273, v121, v122);
  uint64_t v126 = v279;
  v199(v125, v203, v279);
  uint64_t v127 = v225;
  (*(void (**)(char *, char *, void *))(v94 + 32))(v225, v125, v126);
  uint64_t v128 = v234;
  uint64_t v129 = *(void *)(v234 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v129 + 48))(v127, 1, v234) == 1)
  {
    (*(void (**)(char *, uint64_t))(v204 + 8))(v124, v122);
    (*(void (**)(char *, void *))(v94 + 8))(v127, v126);
    *(void *)(inited + 136) = 0;
    *(_OWORD *)(inited + 104) = 0u;
    *(_OWORD *)(inited + 120) = 0u;
  }
  else
  {
    uint64_t v279 = *(void **)(a36 + 24);
    *(void *)(inited + 128) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 136) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 104));
    ((void (*)(uint64_t, uint64_t))v279)(v128, a36);
    (*(void (**)(char *, uint64_t))(v129 + 8))(v127, v128);
    (*(void (**)(char *, uint64_t))(v204 + 8))(v273, v122);
  }
  uint64_t v130 = v309;
  uint64_t v297 = a41;
  uint64_t v131 = v291;
  *(void *)(inited + 144) = (*(uint64_t (**)(uint64_t))(v242 + 8))(v309);
  *(void *)(inited + 152) = v132;
  uint64_t v133 = v219;
  uint64_t v134 = &v219[*(int *)(v298 + 48)];
  v207(v219, v131, v130);
  uint64_t v135 = v281;
  v205(v134, v209, v281);
  uint64_t v136 = v280;
  uint64_t v137 = v235;
  (*(void (**)(char *, char *, void *))(v280 + 32))(v235, v134, v135);
  uint64_t v138 = v244;
  uint64_t v139 = *(void *)(v244 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v139 + 48))(v137, 1, v244) == 1)
  {
    (*(void (**)(char *, uint64_t))(v212 + 8))(v133, v130);
    (*(void (**)(char *, void *))(v136 + 8))(v137, v135);
    *(void *)(inited + 192) = 0;
    *(_OWORD *)(inited + 160) = 0u;
    *(_OWORD *)(inited + 176) = 0u;
  }
  else
  {
    uint64_t v281 = *(void **)(a38 + 24);
    *(void *)(inited + 184) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 192) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 160));
    ((void (*)(uint64_t, uint64_t))v281)(v138, a38);
    (*(void (**)(char *, uint64_t))(v139 + 8))(v137, v138);
    (*(void (**)(char *, uint64_t))(v212 + 8))(v133, v309);
  }
  uint64_t v140 = v310;
  uint64_t v141 = v283;
  uint64_t v142 = v282;
  uint64_t v309 = a43;
  int v143 = v299;
  *(void *)(inited + 200) = (*(uint64_t (**)(uint64_t))(v278 + 8))(v310);
  *(void *)(inited + 208) = v144;
  uint64_t v145 = v233;
  uint64_t v146 = &v233[*(int *)(v300 + 48)];
  ((void (*)(char *, char *, uint64_t))v215)(v233, v143, v140);
  v213(v146, v217, v141);
  uint64_t v147 = v250;
  (*(void (**)(char *, char *, void *))(v142 + 32))(v250, v146, v141);
  uint64_t v148 = v252;
  uint64_t v149 = *(void *)(v252 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v149 + 48))(v147, 1, v252) == 1)
  {
    (*(void (**)(char *, uint64_t))(v218 + 8))(v145, v140);
    (*(void (**)(char *, void *))(v142 + 8))(v147, v141);
    *(void *)(inited + 248) = 0;
    *(_OWORD *)(inited + 216) = 0u;
    *(_OWORD *)(inited + 232) = 0u;
  }
  else
  {
    uint64_t v283 = *(void **)(a40 + 24);
    *(void *)(inited + 240) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 248) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 216));
    ((void (*)(uint64_t, uint64_t))v283)(v148, a40);
    (*(void (**)(char *, uint64_t))(v149 + 8))(v147, v148);
    (*(void (**)(char *, uint64_t))(v218 + 8))(v145, v310);
  }
  uint64_t v150 = v311;
  uint64_t v151 = v284;
  uint64_t v310 = a45;
  uint64_t v152 = v301;
  *(void *)(inited + 256) = (*(uint64_t (**)(uint64_t))(v297 + 8))(v311);
  *(void *)(inited + 264) = v153;
  uint64_t v154 = v275;
  uint64_t v155 = &v275[*(int *)(v302 + 48)];
  ((void (*)(char *, char *, uint64_t))v222)(v275, v152, v150);
  uint64_t v156 = v285;
  v220(v155, v224, v285);
  uint64_t v157 = v254;
  (*(void (**)(char *, char *, uint64_t))(v151 + 32))(v254, v155, v156);
  uint64_t v158 = v255;
  uint64_t v159 = *(void *)(v255 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v159 + 48))(v157, 1, v255) == 1)
  {
    (*(void (**)(char *, uint64_t))(v226 + 8))(v154, v150);
    (*(void (**)(char *, uint64_t))(v151 + 8))(v157, v156);
    *(void *)(inited + 304) = 0;
    *(_OWORD *)(inited + 272) = 0u;
    *(_OWORD *)(inited + 288) = 0u;
  }
  else
  {
    uint64_t v160 = *(void (**)(uint64_t, uint64_t))(a42 + 24);
    *(void *)(inited + 296) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 304) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 272));
    v160(v158, a42);
    (*(void (**)(char *, uint64_t))(v159 + 8))(v157, v158);
    (*(void (**)(char *, uint64_t))(v226 + 8))(v275, v311);
  }
  uint64_t v161 = v312;
  uint64_t v162 = v286;
  uint64_t v311 = a47;
  uint64_t v163 = v303;
  *(void *)(inited + 312) = (*(uint64_t (**)(uint64_t *))(v309 + 8))(v312);
  *(void *)(inited + 320) = v164;
  uint64_t v165 = v253;
  uint64_t v166 = &v253[*(int *)(v304 + 48)];
  ((void (*)(char *, char *, uint64_t *))v229)(v253, v163, v161);
  uint64_t v167 = v287;
  v227(v166, v232, v287);
  uint64_t v168 = v257;
  (*(void (**)(char *, char *, uint64_t))(v162 + 32))(v257, v166, v167);
  uint64_t v169 = v262;
  uint64_t v170 = *(void *)(v262 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v170 + 48))(v168, 1, v262) == 1)
  {
    (*(void (**)(char *, uint64_t *))(v236 + 8))(v165, v161);
    (*(void (**)(char *, uint64_t))(v162 + 8))(v168, v167);
    *(void *)(inited + 360) = 0;
    *(_OWORD *)(inited + 328) = 0u;
    *(_OWORD *)(inited + 344) = 0u;
  }
  else
  {
    uint64_t v309 = *(void *)(a44 + 24);
    *(void *)(inited + 352) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 360) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 328));
    ((void (*)(uint64_t, uint64_t))v309)(v169, a44);
    (*(void (**)(char *, uint64_t))(v170 + 8))(v168, v169);
    (*(void (**)(char *, uint64_t *))(v236 + 8))(v165, v312);
  }
  uint64_t v171 = v292;
  uint64_t v172 = v256;
  uint64_t v173 = v305;
  uint64_t v174 = v313;
  *(void *)(inited + 368) = (*(uint64_t (**)(void *))(v310 + 8))(v313);
  *(void *)(inited + 376) = v175;
  unint64_t v176 = &v172[*(int *)(v306 + 48)];
  ((void (*)(char *, char *, void *))v239)(v172, v173, v174);
  uint64_t v177 = v293;
  v237(v176, v241, v293);
  uint64_t v178 = v267;
  (*(void (**)(char *, char *, uint64_t))(v171 + 32))(v267, v176, v177);
  uint64_t v179 = v270;
  uint64_t v180 = *(void *)(v270 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v180 + 48))(v178, 1, v270) == 1)
  {
    (*(void (**)(char *, void *))(v243 + 8))(v172, v174);
    (*(void (**)(char *, uint64_t))(v171 + 8))(v178, v177);
    *(void *)(inited + 416) = 0;
    *(_OWORD *)(inited + 384) = 0u;
    *(_OWORD *)(inited + 400) = 0u;
  }
  else
  {
    v312 = *(uint64_t **)(a46 + 24);
    *(void *)(inited + 408) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 416) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 384));
    ((void (*)(uint64_t, uint64_t))v312)(v179, a46);
    (*(void (**)(char *, uint64_t))(v180 + 8))(v178, v179);
    (*(void (**)(char *, void *))(v243 + 8))(v172, v313);
  }
  uint64_t v181 = v296;
  uint64_t v182 = v294;
  uint64_t v183 = v307;
  *(void *)(inited + 424) = (*(uint64_t (**)(uint64_t))(v311 + 8))(v296);
  *(void *)(inited + 432) = v184;
  uint64_t v185 = v265;
  uint64_t v186 = &v265[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, char *, uint64_t))v247)(v265, v183, v181);
  uint64_t v187 = v295;
  v245(v186, v249, v295);
  uint64_t v188 = v271;
  (*(void (**)(char *, char *, uint64_t))(v182 + 32))(v271, v186, v187);
  uint64_t v189 = v272;
  uint64_t v190 = *(void *)(v272 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v190 + 48))(v188, 1, v272) == 1)
  {
    (*(void (**)(char *, uint64_t))(v251 + 8))(v185, v181);
    (*(void (**)(char *, uint64_t))(v182 + 8))(v188, v187);
    *(void *)(inited + 472) = 0;
    *(_OWORD *)(inited + 440) = 0u;
    *(_OWORD *)(inited + 456) = 0u;
  }
  else
  {
    v312 = (uint64_t *)(inited + 440);
    uint64_t v313 = *(void **)(a48 + 24);
    *(void *)(inited + 464) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 472) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1(v312);
    ((void (*)(uint64_t, uint64_t))v313)(v189, a48);
    (*(void (**)(char *, uint64_t))(v190 + 8))(v188, v189);
    (*(void (**)(char *, uint64_t))(v251 + 8))(v185, v181);
  }
  unint64_t v191 = sub_25A392B24(inited);
  uint64_t v192 = sub_25A44B160(v191);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v269 + 8))(v307, TupleTypeMetadata2);
  (*(void (**)(char *, uint64_t))(v268 + 8))(v305, v306);
  (*(void (**)(char *, uint64_t))(v266 + 8))(v303, v304);
  (*(void (**)(char *, uint64_t))(v264 + 8))(v301, v302);
  (*(void (**)(char *, uint64_t))(v263 + 8))(v299, v300);
  (*(void (**)(char *, uint64_t))(v261 + 8))(v291, v298);
  (*(void (**)(char *, uint64_t))(v260 + 8))(v289, v290);
  (*(void (**)(char *, uint64_t))(v259 + 8))(v258, v288);
  return v192;
}

uint64_t static PropertyListBuilder.buildBlock<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R>(_:_:_:_:_:_:_:_:_:)(char *a1, uint64_t a2, char *a3, char *a4, char *a5, void (*a6)(char *, char *, uint64_t), void (*a7)(void), char *a8, uint64_t a9, char *a10, uint64_t a11, uint64_t a12, void (*a13)(char *, char *, uint64_t), void (*a14)(void), uint64_t a15, uint64_t a16, char *a17, char *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t *a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,char *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  uint64_t v272 = a8;
  uint64_t v270 = a7;
  uint64_t v268 = a6;
  uint64_t v263 = a3;
  uint64_t v264 = a5;
  v329 = a4;
  uint64_t v328 = a2;
  uint64_t v327 = a1;
  uint64_t v266 = a41;
  uint64_t v257 = a39;
  uint64_t v352 = a35;
  uint64_t v355 = a33;
  uint64_t v354 = a31;
  uint64_t v338 = a29;
  uint64_t v353 = a27;
  uint64_t v337 = a25;
  uint64_t v336 = a23;
  uint64_t v317 = a21;
  uint64_t v229 = a20;
  uint64_t v334 = a19;
  uint64_t v289 = a37;
  uint64_t v277 = a18;
  uint64_t v280 = a17;
  uint64_t v283 = a16;
  uint64_t v279 = a15;
  uint64_t v278 = a14;
  v276 = a13;
  uint64_t v275 = a12;
  uint64_t v271 = a11;
  uint64_t v269 = a10;
  uint64_t v267 = a9;
  uint64_t v305 = a36;
  uint64_t v333 = sub_25A50FA40();
  uint64_t v332 = *(void *)(v333 - 8);
  MEMORY[0x270FA5388](v333);
  uint64_t v304 = (char *)&v221 - v54;
  uint64_t v303 = a34;
  uint64_t v331 = sub_25A50FA40();
  uint64_t v330 = *(void *)(v331 - 8);
  MEMORY[0x270FA5388](v331);
  uint64_t v301 = (char *)&v221 - v55;
  uint64_t v296 = a32;
  uint64_t v325 = sub_25A50FA40();
  uint64_t v324 = *(void *)(v325 - 8);
  MEMORY[0x270FA5388](v325);
  uint64_t v291 = (char *)&v221 - v56;
  uint64_t v287 = a30;
  uint64_t v323 = sub_25A50FA40();
  uint64_t v322 = *(void *)(v323 - 8);
  MEMORY[0x270FA5388](v323);
  uint64_t v286 = (char *)&v221 - v57;
  uint64_t v285 = a28;
  uint64_t v321 = sub_25A50FA40();
  uint64_t v320 = *(void *)(v321 - 8);
  MEMORY[0x270FA5388](v321);
  uint64_t v281 = a26;
  uint64_t v282 = (char *)&v221 - v58;
  uint64_t v319 = sub_25A50FA40();
  uint64_t v318 = *(void *)(v319 - 8);
  MEMORY[0x270FA5388](v319);
  uint64_t v273 = a24;
  uint64_t v274 = (char *)&v221 - v59;
  uint64_t v316 = sub_25A50FA40();
  uint64_t v315 = *(void *)(v316 - 8);
  MEMORY[0x270FA5388](v316);
  uint64_t v262 = (char *)&v221 - v60;
  uint64_t v265 = a22;
  uint64_t v335 = sub_25A50FA40();
  uint64_t v314 = *(void *)(v335 - 8);
  MEMORY[0x270FA5388](v335);
  v250 = (char *)&v221 - v61;
  uint64_t v311 = sub_25A50FA40();
  uint64_t v313 = *(void *)(v311 - 8);
  MEMORY[0x270FA5388](v311);
  uint64_t v237 = (char *)&v221 - v62;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v302 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v63 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v298 = (char *)&v221 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v63);
  uint64_t v350 = (char *)&v221 - v65;
  uint64_t v349 = swift_getTupleTypeMetadata2();
  uint64_t v300 = *(void *)(v349 - 8);
  uint64_t v66 = MEMORY[0x270FA5388](v349);
  uint64_t v288 = (char *)&v221 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v66);
  v348 = (char *)&v221 - v68;
  uint64_t v347 = swift_getTupleTypeMetadata2();
  uint64_t v299 = *(void *)(v347 - 8);
  uint64_t v69 = MEMORY[0x270FA5388](v347);
  uint64_t v284 = (char *)&v221 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v69);
  v346 = (char *)&v221 - v71;
  uint64_t v345 = swift_getTupleTypeMetadata2();
  uint64_t v297 = *(void *)(v345 - 8);
  uint64_t v72 = MEMORY[0x270FA5388](v345);
  uint64_t v310 = (char *)&v221 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v72);
  v344 = (char *)&v221 - v74;
  uint64_t v343 = swift_getTupleTypeMetadata2();
  uint64_t v295 = *(void *)(v343 - 8);
  uint64_t v75 = MEMORY[0x270FA5388](v343);
  uint64_t v309 = (char *)&v221 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v75);
  uint64_t v342 = (char *)&v221 - v77;
  uint64_t v341 = swift_getTupleTypeMetadata2();
  uint64_t v294 = *(void *)(v341 - 8);
  uint64_t v78 = MEMORY[0x270FA5388](v341);
  v308 = (char *)&v221 - ((v79 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v78);
  uint64_t v340 = (char *)&v221 - v80;
  uint64_t v339 = swift_getTupleTypeMetadata2();
  uint64_t v293 = *(void *)(v339 - 8);
  uint64_t v81 = MEMORY[0x270FA5388](v339);
  v307 = (char *)&v221 - ((v82 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v81);
  uint64_t v84 = (char *)&v221 - v83;
  uint64_t v85 = v317;
  uint64_t v86 = swift_getTupleTypeMetadata2();
  uint64_t v292 = *(void *)(v86 - 8);
  uint64_t v87 = MEMORY[0x270FA5388](v86);
  uint64_t v306 = (char *)&v221 - ((v88 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v87);
  uint64_t v90 = (char *)&v221 - v89;
  uint64_t v91 = v334;
  uint64_t v92 = v311;
  uint64_t v326 = swift_getTupleTypeMetadata2();
  uint64_t v290 = *(void *)(v326 - 8);
  uint64_t v93 = MEMORY[0x270FA5388](v326);
  v312 = (char *)&v221 - ((v94 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = MEMORY[0x270FA5388](v93);
  uint64_t v97 = (char *)&v221 - v96;
  uint64_t v99 = *(void *)(v91 - 8);
  uint64_t v100 = *(void (**)(void))(v99 + 16);
  uint64_t v221 = (char *)&v221 + *(int *)(v95 + 48) - v96;
  uint64_t v98 = v221;
  uint64_t v222 = v100;
  uint64_t v223 = v99 + 16;
  uint64_t v224 = v99;
  ((void (*)(char *, char *, uint64_t))v100)((char *)&v221 - v96, v327, v91);
  uint64_t v101 = *(void (**)(char *, uint64_t, uint64_t))(v313 + 16);
  v101(v98, v328, v92);
  uint64_t v102 = (void (*)(char *, char *, uint64_t))v101;
  uint64_t v328 = v86;
  uint64_t v103 = &v90[*(int *)(v86 + 48)];
  uint64_t v231 = *(void *)(v85 - 8);
  uint64_t v104 = *(void (**)(char *, char *, uint64_t))(v231 + 16);
  uint64_t v327 = v90;
  uint64_t v227 = v104;
  uint64_t v228 = v231 + 16;
  v104(v90, v263, v85);
  uint64_t v105 = *(void (**)(char *, char *, uint64_t))(v314 + 16);
  uint64_t v230 = v103;
  uint64_t v225 = v105;
  uint64_t v226 = v314 + 16;
  v105(v103, v329, v335);
  uint64_t v106 = &v84[*(int *)(v339 + 48)];
  uint64_t v238 = *(void *)(v336 - 8);
  uint64_t v107 = *(void (**)(char *, char *, uint64_t))(v238 + 16);
  v329 = v84;
  uint64_t v108 = v84;
  uint64_t v109 = v229;
  uint64_t v234 = v107;
  uint64_t v235 = v238 + 16;
  ((void (*)(char *, char *))v107)(v108, v264);
  uint64_t v110 = *(void (**)(char *, char *, uint64_t))(v315 + 16);
  uint64_t v236 = v106;
  uint64_t v232 = v110;
  uint64_t v233 = v315 + 16;
  v110(v106, (char *)v268, v316);
  uint64_t v111 = &v340[*(int *)(v341 + 48)];
  uint64_t v244 = *(void *)(v337 - 8);
  uint64_t v112 = v334;
  uint64_t v241 = *(void (**)(void))(v244 + 16);
  uint64_t v242 = v244 + 16;
  v241();
  uint64_t v113 = *(void (**)(char *, char *, uint64_t))(v318 + 16);
  uint64_t v243 = v111;
  uint64_t v239 = v113;
  uint64_t v240 = v318 + 16;
  v113(v111, v272, v319);
  uint64_t v114 = &v342[*(int *)(v343 + 48)];
  uint64_t v251 = *(void *)(v353 - 8);
  v247 = *(void (**)(void))(v251 + 16);
  uint64_t v248 = v251 + 16;
  v247();
  uint64_t v115 = *(void (**)(char *, char *, uint64_t))(v320 + 16);
  v249 = v114;
  uint64_t v245 = v115;
  uint64_t v246 = v320 + 16;
  v115(v114, v269, v321);
  uint64_t v116 = &v344[*(int *)(v345 + 48)];
  uint64_t v258 = *(void *)(v338 - 8);
  uint64_t v254 = *(void (**)(void))(v258 + 16);
  uint64_t v255 = v258 + 16;
  v254();
  uint64_t v117 = *(void (**)(char *, char *, uint64_t))(v322 + 16);
  uint64_t v256 = v116;
  uint64_t v252 = v117;
  uint64_t v253 = v322 + 16;
  v117(v116, (char *)v275, v323);
  uint64_t v118 = &v346[*(int *)(v347 + 48)];
  uint64_t v267 = *(v354 - 1);
  uint64_t v119 = *(void (**)(void))(v267 + 16);
  uint64_t v263 = (char *)(v267 + 16);
  uint64_t v261 = v119;
  v119();
  uint64_t v120 = *(void (**)(char *, char *, uint64_t))(v324 + 16);
  uint64_t v264 = v118;
  uint64_t v259 = v120;
  uint64_t v260 = v324 + 16;
  v120(v118, (char *)v278, v325);
  int v121 = &v348[*(int *)(v349 + 48)];
  uint64_t v275 = *(v355 - 1);
  uint64_t v270 = *(void (**)(void))(v275 + 16);
  uint64_t v271 = v275 + 16;
  v270();
  uint64_t v122 = *(void (**)(char *, char *, uint64_t))(v330 + 16);
  uint64_t v272 = v121;
  uint64_t v268 = v122;
  uint64_t v269 = (char *)(v330 + 16);
  v122(v121, (char *)v283, v331);
  uint64_t v123 = &v350[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v283 = *(void *)(v352 - 8);
  uint64_t v278 = *(void (**)(void))(v283 + 16);
  uint64_t v279 = v283 + 16;
  v278();
  uint64_t v124 = *(void (**)(char *, char *, uint64_t))(v332 + 16);
  uint64_t v280 = v123;
  uint64_t v125 = v277;
  v276 = v124;
  uint64_t v277 = (char *)(v332 + 16);
  v124(v123, v125, v333);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417728);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25A518170;
  uint64_t v127 = (uint64_t *)(inited + 48);
  *(void *)(inited + 32) = (*((uint64_t (**)(uint64_t))v289 + 1))(v112);
  *(void *)(inited + 40) = v128;
  uint64_t v129 = &v312[*(int *)(v326 + 48)];
  uint64_t v289 = v97;
  uint64_t v130 = v311;
  v222();
  v102(v129, v221, v130);
  uint64_t v131 = v313;
  uint64_t v132 = v237;
  (*(void (**)(char *, char *, uint64_t))(v313 + 32))(v237, v129, v130);
  uint64_t v133 = *(void *)(v109 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v133 + 48))(v132, 1, v109) == 1)
  {
    (*(void (**)(char *, uint64_t))(v224 + 8))(v312, v334);
    (*(void (**)(char *, uint64_t))(v131 + 8))(v132, v130);
    *(void *)(inited + 80) = 0;
    *(_OWORD *)uint64_t v127 = 0u;
    *(_OWORD *)(inited + 64) = 0u;
  }
  else
  {
    uint64_t v134 = *(void (**)(uint64_t, uint64_t))(a38 + 24);
    *(void *)(inited + 72) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 80) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1(v127);
    v134(v109, a38);
    (*(void (**)(char *, uint64_t))(v133 + 8))(v132, v109);
    (*(void (**)(char *, uint64_t))(v224 + 8))(v312, v334);
  }
  uint64_t v334 = a43;
  uint64_t v135 = v327;
  uint64_t v136 = v317;
  *(void *)(inited + 88) = (*(uint64_t (**)(uint64_t))(v257 + 8))(v317);
  *(void *)(inited + 96) = v137;
  uint64_t v138 = v306;
  uint64_t v139 = &v306[*(int *)(v328 + 48)];
  v227(v306, v135, v136);
  uint64_t v140 = v335;
  v225(v139, v230, v335);
  uint64_t v141 = v314;
  uint64_t v142 = v250;
  (*(void (**)(char *, char *, uint64_t))(v314 + 32))(v250, v139, v140);
  uint64_t v143 = v265;
  uint64_t v144 = *(void *)(v265 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v144 + 48))(v142, 1, v265) == 1)
  {
    (*(void (**)(char *, uint64_t))(v231 + 8))(v138, v136);
    (*(void (**)(char *, uint64_t))(v141 + 8))(v142, v140);
    *(void *)(inited + 136) = 0;
    *(_OWORD *)(inited + 104) = 0u;
    *(_OWORD *)(inited + 120) = 0u;
  }
  else
  {
    uint64_t v335 = *(void *)(a40 + 24);
    *(void *)(inited + 128) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 136) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 104));
    ((void (*)(uint64_t, uint64_t))v335)(v143, a40);
    (*(void (**)(char *, uint64_t))(v144 + 8))(v142, v143);
    (*(void (**)(char *, uint64_t))(v231 + 8))(v306, v136);
  }
  uint64_t v145 = v336;
  uint64_t v146 = v315;
  uint64_t v147 = v307;
  uint64_t v336 = a45;
  uint64_t v148 = v329;
  *(void *)(inited + 144) = (*(uint64_t (**)(uint64_t))(v266 + 8))(v145);
  *(void *)(inited + 152) = v149;
  uint64_t v150 = &v147[*(int *)(v339 + 48)];
  v234(v147, v148, v145);
  uint64_t v151 = v316;
  v232(v150, v236, v316);
  uint64_t v152 = v262;
  (*(void (**)(char *, char *, uint64_t))(v146 + 32))(v262, v150, v151);
  uint64_t v153 = v273;
  uint64_t v154 = *(void *)(v273 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v154 + 48))(v152, 1, v273) == 1)
  {
    (*(void (**)(char *, uint64_t))(v238 + 8))(v147, v145);
    (*(void (**)(char *, uint64_t))(v146 + 8))(v152, v151);
    *(void *)(inited + 192) = 0;
    *(_OWORD *)(inited + 160) = 0u;
    *(_OWORD *)(inited + 176) = 0u;
  }
  else
  {
    uint64_t v335 = *(void *)(a42 + 24);
    *(void *)(inited + 184) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 192) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 160));
    ((void (*)(uint64_t, uint64_t))v335)(v153, a42);
    (*(void (**)(char *, uint64_t))(v154 + 8))(v152, v153);
    (*(void (**)(char *, uint64_t))(v238 + 8))(v307, v145);
  }
  uint64_t v155 = v319;
  uint64_t v156 = v318;
  uint64_t v157 = v308;
  uint64_t v335 = a47;
  uint64_t v158 = v340;
  uint64_t v159 = v337;
  *(void *)(inited + 200) = (*(uint64_t (**)(uint64_t))(v334 + 8))(v337);
  *(void *)(inited + 208) = v160;
  uint64_t v161 = &v157[*(int *)(v341 + 48)];
  ((void (*)(char *, char *, uint64_t))v241)(v157, v158, v159);
  v239(v161, v243, v155);
  uint64_t v162 = v274;
  (*(void (**)(char *, char *, uint64_t))(v156 + 32))(v274, v161, v155);
  uint64_t v163 = v281;
  uint64_t v164 = *(void *)(v281 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v164 + 48))(v162, 1, v281) == 1)
  {
    (*(void (**)(char *, uint64_t))(v244 + 8))(v157, v159);
    (*(void (**)(char *, uint64_t))(v156 + 8))(v162, v155);
    *(void *)(inited + 248) = 0;
    *(_OWORD *)(inited + 216) = 0u;
    *(_OWORD *)(inited + 232) = 0u;
  }
  else
  {
    uint64_t v334 = *(void *)(a44 + 24);
    *(void *)(inited + 240) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 248) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 216));
    ((void (*)(uint64_t, uint64_t))v334)(v163, a44);
    (*(void (**)(char *, uint64_t))(v164 + 8))(v162, v163);
    (*(void (**)(char *, uint64_t))(v244 + 8))(v308, v159);
  }
  uint64_t v165 = v353;
  uint64_t v166 = v321;
  uint64_t v167 = v320;
  uint64_t v337 = a49;
  uint64_t v168 = v342;
  *(void *)(inited + 256) = (*(uint64_t (**)(uint64_t))(v336 + 8))(v353);
  *(void *)(inited + 264) = v169;
  uint64_t v170 = v309;
  uint64_t v171 = &v309[*(int *)(v343 + 48)];
  ((void (*)(char *, char *, uint64_t))v247)(v309, v168, v165);
  v245(v171, v249, v166);
  uint64_t v172 = v282;
  (*(void (**)(char *, char *, uint64_t))(v167 + 32))(v282, v171, v166);
  uint64_t v173 = v285;
  uint64_t v174 = *(void *)(v285 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v174 + 48))(v172, 1, v285) == 1)
  {
    (*(void (**)(char *, uint64_t))(v251 + 8))(v170, v165);
    (*(void (**)(char *, uint64_t))(v167 + 8))(v172, v166);
    *(void *)(inited + 304) = 0;
    *(_OWORD *)(inited + 272) = 0u;
    *(_OWORD *)(inited + 288) = 0u;
  }
  else
  {
    uint64_t v175 = *(void (**)(uint64_t, uint64_t))(a46 + 24);
    *(void *)(inited + 296) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 304) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 272));
    v175(v173, a46);
    (*(void (**)(char *, uint64_t))(v174 + 8))(v172, v173);
    (*(void (**)(char *, uint64_t))(v251 + 8))(v309, v353);
  }
  uint64_t v176 = v322;
  uint64_t v353 = a51;
  uint64_t v177 = v344;
  uint64_t v178 = v338;
  *(void *)(inited + 312) = (*(uint64_t (**)(uint64_t))(v335 + 8))(v338);
  *(void *)(inited + 320) = v179;
  uint64_t v180 = v310;
  uint64_t v181 = &v310[*(int *)(v345 + 48)];
  uint64_t v182 = v177;
  uint64_t v183 = v178;
  ((void (*)(char *, char *, uint64_t))v254)(v310, v182, v178);
  uint64_t v184 = v323;
  v252(v181, v256, v323);
  uint64_t v185 = v286;
  (*(void (**)(char *, char *, uint64_t))(v176 + 32))(v286, v181, v184);
  uint64_t v186 = v287;
  uint64_t v187 = *(void *)(v287 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v187 + 48))(v185, 1, v287) == 1)
  {
    (*(void (**)(char *, uint64_t))(v258 + 8))(v180, v183);
    (*(void (**)(char *, uint64_t))(v176 + 8))(v185, v184);
    *(void *)(inited + 360) = 0;
    *(_OWORD *)(inited + 328) = 0u;
    *(_OWORD *)(inited + 344) = 0u;
  }
  else
  {
    uint64_t v336 = *(void *)(a48 + 24);
    *(void *)(inited + 352) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 360) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 328));
    ((void (*)(uint64_t, uint64_t))v336)(v186, a48);
    (*(void (**)(char *, uint64_t))(v187 + 8))(v185, v186);
    (*(void (**)(char *, uint64_t))(v258 + 8))(v310, v183);
  }
  uint64_t v188 = v354;
  uint64_t v189 = v291;
  uint64_t v190 = v324;
  uint64_t v338 = a53;
  unint64_t v191 = v346;
  *(void *)(inited + 368) = (*(uint64_t (**)(uint64_t *))(v337 + 8))(v354);
  *(void *)(inited + 376) = v192;
  uint64_t v193 = v284;
  uint64_t v194 = &v284[*(int *)(v347 + 48)];
  ((void (*)(char *, char *, uint64_t *))v261)(v284, v191, v188);
  uint64_t v195 = v325;
  v259(v194, v264, v325);
  (*(void (**)(char *, char *, uint64_t))(v190 + 32))(v189, v194, v195);
  uint64_t v196 = v296;
  uint64_t v197 = *(void *)(v296 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v197 + 48))(v189, 1, v296) == 1)
  {
    (*(void (**)(char *, uint64_t *))(v267 + 8))(v193, v188);
    (*(void (**)(char *, uint64_t))(v190 + 8))(v189, v195);
    *(void *)(inited + 416) = 0;
    *(_OWORD *)(inited + 384) = 0u;
    *(_OWORD *)(inited + 400) = 0u;
  }
  else
  {
    uint64_t v337 = *(void *)(a50 + 24);
    *(void *)(inited + 408) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 416) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 384));
    ((void (*)(uint64_t, uint64_t))v337)(v196, a50);
    (*(void (**)(char *, uint64_t))(v197 + 8))(v189, v196);
    (*(void (**)(char *, uint64_t *))(v267 + 8))(v193, v354);
  }
  uint64_t v198 = v330;
  uint64_t v199 = v348;
  uint64_t v200 = v355;
  *(void *)(inited + 424) = (*(uint64_t (**)(void *))(v353 + 8))(v355);
  *(void *)(inited + 432) = v201;
  uint64_t v202 = v288;
  uint64_t v203 = &v288[*(int *)(v349 + 48)];
  ((void (*)(char *, char *, void *))v270)(v288, v199, v200);
  uint64_t v204 = v331;
  v268(v203, v272, v331);
  uint64_t v205 = v301;
  (*(void (**)(char *, char *, uint64_t))(v198 + 32))(v301, v203, v204);
  uint64_t v206 = v303;
  uint64_t v207 = *(void *)(v303 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v207 + 48))(v205, 1, v303) == 1)
  {
    (*(void (**)(char *, void *))(v275 + 8))(v202, v200);
    (*(void (**)(char *, uint64_t))(v198 + 8))(v205, v204);
    *(void *)(inited + 472) = 0;
    *(_OWORD *)(inited + 440) = 0u;
    *(_OWORD *)(inited + 456) = 0u;
  }
  else
  {
    uint64_t v354 = *(uint64_t **)(a52 + 24);
    *(void *)(inited + 464) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 472) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 440));
    ((void (*)(uint64_t, uint64_t))v354)(v206, a52);
    (*(void (**)(char *, uint64_t))(v207 + 8))(v205, v206);
    (*(void (**)(char *, void *))(v275 + 8))(v202, v355);
  }
  uint64_t v208 = v352;
  uint64_t v209 = v332;
  uint64_t v210 = v350;
  *(void *)(inited + 480) = (*(uint64_t (**)(uint64_t))(v338 + 8))(v352);
  *(void *)(inited + 488) = v211;
  uint64_t v212 = v298;
  uint64_t v213 = &v298[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, char *, uint64_t))v278)(v298, v210, v208);
  uint64_t v214 = v333;
  v276(v213, v280, v333);
  uint64_t v215 = v304;
  (*(void (**)(char *, char *, uint64_t))(v209 + 32))(v304, v213, v214);
  uint64_t v216 = v305;
  uint64_t v217 = *(void *)(v305 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v217 + 48))(v215, 1, v305) == 1)
  {
    (*(void (**)(char *, uint64_t))(v283 + 8))(v212, v208);
    (*(void (**)(char *, uint64_t))(v209 + 8))(v215, v214);
    *(void *)(inited + 528) = 0;
    *(_OWORD *)(inited + 496) = 0u;
    *(_OWORD *)(inited + 512) = 0u;
  }
  else
  {
    uint64_t v354 = (uint64_t *)(inited + 496);
    uint64_t v355 = *(void **)(a54 + 24);
    *(void *)(inited + 520) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 528) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1(v354);
    ((void (*)(uint64_t, uint64_t))v355)(v216, a54);
    (*(void (**)(char *, uint64_t))(v217 + 8))(v215, v216);
    (*(void (**)(char *, uint64_t))(v283 + 8))(v212, v208);
  }
  unint64_t v218 = sub_25A392B24(inited);
  uint64_t v219 = sub_25A44B160(v218);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v302 + 8))(v350, TupleTypeMetadata2);
  (*(void (**)(char *, uint64_t))(v300 + 8))(v348, v349);
  (*(void (**)(char *, uint64_t))(v299 + 8))(v346, v347);
  (*(void (**)(char *, uint64_t))(v297 + 8))(v344, v345);
  (*(void (**)(char *, uint64_t))(v295 + 8))(v342, v343);
  (*(void (**)(char *, uint64_t))(v294 + 8))(v340, v341);
  (*(void (**)(char *, uint64_t))(v293 + 8))(v329, v339);
  (*(void (**)(char *, uint64_t))(v292 + 8))(v327, v328);
  (*(void (**)(char *, uint64_t))(v290 + 8))(v289, v326);
  return v219;
}

uint64_t static PropertyListBuilder.buildBlock<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V>(_:_:_:_:_:_:_:_:_:_:_:)(char *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7, char *a8, void (*a9)(char *, char *, uint64_t), void (*a10)(void), char *a11, void (*a12)(char *, char *, uint64_t), void (*a13)(void), char *a14, char *a15, uint64_t a16, void (*a17)(char *, char *, uint64_t), void (*a18)(void), uint64_t a19, uint64_t a20,char *a21,char *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t *a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  v329 = a8;
  uint64_t v327 = a7;
  uint64_t v324 = a6;
  uint64_t v322 = a5;
  uint64_t v398 = a4;
  v397 = a3;
  uint64_t v396 = a2;
  uint64_t v395 = a1;
  uint64_t v318 = a49;
  uint64_t v309 = a47;
  uint64_t v429 = a43;
  v432 = a41;
  v431 = a39;
  v412 = a37;
  uint64_t v410 = a35;
  uint64_t v409 = a33;
  uint64_t v430 = a31;
  uint64_t v408 = a29;
  uint64_t v407 = a27;
  uint64_t v382 = a25;
  uint64_t v380 = a24;
  uint64_t v405 = a23;
  uint64_t v296 = a45;
  uint64_t v337 = a22;
  uint64_t v340 = a21;
  uint64_t v343 = a20;
  uint64_t v339 = a19;
  uint64_t v338 = a18;
  uint64_t v336 = a17;
  uint64_t v335 = a16;
  uint64_t v332 = a15;
  uint64_t v331 = a14;
  uint64_t v330 = a13;
  uint64_t v328 = a12;
  uint64_t v325 = a11;
  uint64_t v323 = a10;
  uint64_t v321 = a9;
  uint64_t v368 = a44;
  uint64_t v428 = sub_25A50FA40();
  uint64_t v403 = *(void *)(v428 - 8);
  MEMORY[0x270FA5388](v428);
  uint64_t v367 = (char *)v265 - v66;
  uint64_t v366 = a42;
  uint64_t v402 = sub_25A50FA40();
  uint64_t v401 = *(void *)(v402 - 8);
  MEMORY[0x270FA5388](v402);
  uint64_t v365 = (char *)v265 - v67;
  uint64_t v362 = a40;
  uint64_t v400 = sub_25A50FA40();
  uint64_t v399 = *(void *)(v400 - 8);
  MEMORY[0x270FA5388](v400);
  uint64_t v356 = (char *)v265 - v68;
  uint64_t v353 = a38;
  uint64_t v392 = sub_25A50FA40();
  uint64_t v391 = *(void *)(v392 - 8);
  MEMORY[0x270FA5388](v392);
  v348 = (char *)v265 - v69;
  uint64_t v347 = a36;
  uint64_t v390 = sub_25A50FA40();
  uint64_t v389 = *(void *)(v390 - 8);
  MEMORY[0x270FA5388](v390);
  uint64_t v345 = (char *)v265 - v70;
  uint64_t v344 = a34;
  uint64_t v388 = sub_25A50FA40();
  uint64_t v387 = *(void *)(v388 - 8);
  MEMORY[0x270FA5388](v388);
  uint64_t v341 = (char *)v265 - v71;
  uint64_t v342 = a32;
  uint64_t v386 = sub_25A50FA40();
  uint64_t v385 = *(void *)(v386 - 8);
  MEMORY[0x270FA5388](v386);
  uint64_t v333 = (char *)v265 - v72;
  uint64_t v334 = a30;
  uint64_t v384 = sub_25A50FA40();
  uint64_t v383 = *(void *)(v384 - 8);
  MEMORY[0x270FA5388](v384);
  uint64_t v320 = (char *)v265 - v73;
  uint64_t v326 = a28;
  uint64_t v404 = sub_25A50FA40();
  uint64_t v381 = *(void *)(v404 - 8);
  MEMORY[0x270FA5388](v404);
  uint64_t v310 = (char *)v265 - v74;
  uint64_t v316 = a26;
  uint64_t v406 = sub_25A50FA40();
  uint64_t v379 = *(void *)(v406 - 8);
  MEMORY[0x270FA5388](v406);
  uint64_t v302 = (char *)v265 - v75;
  uint64_t v376 = sub_25A50FA40();
  uint64_t v378 = *(void *)(v376 - 8);
  MEMORY[0x270FA5388](v376);
  uint64_t v287 = (char *)v265 - v76;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v364 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v77 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v360 = (char *)v265 - ((v78 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v77);
  v426 = (char *)v265 - v79;
  uint64_t v425 = swift_getTupleTypeMetadata2();
  uint64_t v363 = *(void *)(v425 - 8);
  uint64_t v80 = MEMORY[0x270FA5388](v425);
  uint64_t v350 = (char *)v265 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v80);
  v424 = (char *)v265 - v82;
  uint64_t v423 = swift_getTupleTypeMetadata2();
  uint64_t v361 = *(void *)(v423 - 8);
  uint64_t v83 = MEMORY[0x270FA5388](v423);
  v346 = (char *)v265 - ((v84 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v83);
  v422 = (char *)v265 - v85;
  uint64_t v421 = swift_getTupleTypeMetadata2();
  uint64_t v359 = *(void *)(v421 - 8);
  uint64_t v86 = MEMORY[0x270FA5388](v421);
  uint64_t v375 = (char *)v265 - ((v87 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v86);
  v420 = (char *)v265 - v88;
  uint64_t v419 = swift_getTupleTypeMetadata2();
  uint64_t v358 = *(void *)(v419 - 8);
  uint64_t v89 = MEMORY[0x270FA5388](v419);
  v374 = (char *)v265 - ((v90 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v89);
  v418 = (char *)v265 - v91;
  uint64_t v417 = swift_getTupleTypeMetadata2();
  uint64_t v357 = *(void *)(v417 - 8);
  uint64_t v92 = MEMORY[0x270FA5388](v417);
  uint64_t v373 = (char *)v265 - ((v93 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v92);
  v416 = (char *)v265 - v94;
  uint64_t v415 = swift_getTupleTypeMetadata2();
  uint64_t v355 = *(void *)(v415 - 8);
  uint64_t v95 = MEMORY[0x270FA5388](v415);
  uint64_t v372 = (char *)v265 - ((v96 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v95);
  v414 = (char *)v265 - v97;
  uint64_t v413 = swift_getTupleTypeMetadata2();
  uint64_t v354 = *(void *)(v413 - 8);
  uint64_t v98 = MEMORY[0x270FA5388](v413);
  uint64_t v371 = (char *)v265 - ((v99 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v98);
  v411 = (char *)v265 - v100;
  uint64_t v101 = swift_getTupleTypeMetadata2();
  uint64_t v352 = *(void *)(v101 - 8);
  uint64_t v102 = MEMORY[0x270FA5388](v101);
  v370 = (char *)v265 - ((v103 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v102);
  uint64_t v105 = (char *)v265 - v104;
  uint64_t v106 = v382;
  uint64_t v107 = swift_getTupleTypeMetadata2();
  uint64_t v351 = *(void *)(v107 - 8);
  uint64_t v108 = MEMORY[0x270FA5388](v107);
  uint64_t v369 = (char *)v265 - ((v109 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v108);
  uint64_t v111 = (char *)v265 - v110;
  uint64_t v112 = v405;
  uint64_t v113 = v376;
  uint64_t v394 = swift_getTupleTypeMetadata2();
  uint64_t v349 = *(void *)(v394 - 8);
  uint64_t v114 = MEMORY[0x270FA5388](v394);
  uint64_t v377 = (char *)v265 - ((v115 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v116 = MEMORY[0x270FA5388](v114);
  uint64_t v118 = (char *)v265 + *(int *)(v116 + 48) - v117;
  uint64_t v393 = (char *)v265 - v117;
  uint64_t v119 = *(void *)(v112 - 8);
  uint64_t v120 = *(void (**)(void))(v119 + 16);
  uint64_t v267 = v118;
  uint64_t v268 = v119 + 16;
  uint64_t v269 = v120;
  uint64_t v270 = v119;
  ((void (*)(char *, char *, uint64_t))v120)((char *)v265 - v117, v395, v112);
  int v121 = *(void (**)(char *, char *, uint64_t))(v378 + 16);
  v265[1] = v378 + 16;
  uint64_t v266 = v121;
  v121(v118, (char *)v396, v113);
  uint64_t v396 = v107;
  uint64_t v122 = *(int *)(v107 + 48);
  uint64_t v123 = v428;
  uint64_t v124 = &v111[v122];
  uint64_t v276 = *(void *)(v106 - 8);
  uint64_t v125 = *(void (**)(char *, char *, uint64_t))(v276 + 16);
  uint64_t v395 = v111;
  uint64_t v273 = v125;
  uint64_t v274 = v276 + 16;
  v125(v111, v397, v106);
  uint64_t v126 = *(void (**)(char *, char *, uint64_t))(v379 + 16);
  uint64_t v275 = v124;
  uint64_t v271 = v126;
  uint64_t v272 = v379 + 16;
  v126(v124, (char *)v398, v406);
  uint64_t v398 = v101;
  uint64_t v127 = &v105[*(int *)(v101 + 48)];
  uint64_t v282 = *(void *)(v407 - 8);
  uint64_t v128 = *(void (**)(char *, char *, uint64_t))(v282 + 16);
  v397 = v105;
  uint64_t v279 = v128;
  uint64_t v280 = v282 + 16;
  ((void (*)(char *, uint64_t))v128)(v105, v322);
  uint64_t v129 = *(void (**)(char *, char *, uint64_t))(v381 + 16);
  uint64_t v281 = v127;
  uint64_t v277 = v129;
  uint64_t v278 = v381 + 16;
  v129(v127, v324, v404);
  uint64_t v130 = v410;
  uint64_t v131 = &v411[*(int *)(v413 + 48)];
  uint64_t v289 = *(void *)(v408 - 8);
  uint64_t v285 = *(void (**)(void))(v289 + 16);
  uint64_t v286 = v289 + 16;
  v285();
  uint64_t v132 = *(void (**)(char *, char *, uint64_t))(v383 + 16);
  uint64_t v288 = v131;
  uint64_t v283 = v132;
  uint64_t v284 = v383 + 16;
  v132(v131, v329, v384);
  uint64_t v133 = &v414[*(int *)(v415 + 48)];
  uint64_t v295 = *(void *)(v430 - 8);
  uint64_t v292 = *(void (**)(void))(v295 + 16);
  uint64_t v293 = v295 + 16;
  v292();
  uint64_t v134 = *(void (**)(char *, char *, uint64_t))(v385 + 16);
  uint64_t v294 = v133;
  uint64_t v290 = v134;
  uint64_t v291 = v385 + 16;
  v134(v133, (char *)v323, v386);
  uint64_t v135 = &v416[*(int *)(v417 + 48)];
  uint64_t v303 = *(void *)(v409 - 8);
  uint64_t v299 = *(void (**)(void))(v303 + 16);
  uint64_t v300 = v303 + 16;
  v299();
  uint64_t v136 = *(void (**)(char *, char *, uint64_t))(v387 + 16);
  uint64_t v301 = v135;
  uint64_t v297 = v136;
  uint64_t v298 = v387 + 16;
  v136(v135, (char *)v328, v388);
  uint64_t v137 = &v418[*(int *)(v419 + 48)];
  uint64_t v311 = *(void *)(v130 - 8);
  uint64_t v306 = *(void (**)(void))(v311 + 16);
  uint64_t v307 = v311 + 16;
  v306();
  uint64_t v138 = *(void (**)(char *, char *, uint64_t))(v389 + 16);
  v308 = v137;
  uint64_t v304 = v138;
  uint64_t v305 = v389 + 16;
  v138(v137, v331, v390);
  uint64_t v139 = &v420[*(int *)(v421 + 48)];
  uint64_t v319 = *(v412 - 1);
  uint64_t v314 = *(void (**)(void))(v319 + 16);
  uint64_t v315 = v319 + 16;
  v314();
  uint64_t v140 = *(void (**)(char *, char *, uint64_t))(v391 + 16);
  uint64_t v317 = v139;
  v312 = v140;
  uint64_t v313 = v391 + 16;
  v140(v139, (char *)v335, v392);
  uint64_t v141 = &v422[*(int *)(v423 + 48)];
  uint64_t v327 = *(v431 - 1);
  uint64_t v323 = *(void (**)(void))(v327 + 16);
  uint64_t v324 = (char *)(v327 + 16);
  v323();
  uint64_t v142 = *(void (**)(char *, char *, uint64_t))(v399 + 16);
  uint64_t v325 = v141;
  uint64_t v321 = v142;
  uint64_t v322 = v399 + 16;
  v142(v141, (char *)v338, v400);
  uint64_t v143 = &v424[*(int *)(v425 + 48)];
  uint64_t v335 = *(v432 - 1);
  uint64_t v144 = *(void (**)(void))(v335 + 16);
  uint64_t v331 = (char *)(v335 + 16);
  uint64_t v330 = v144;
  v144();
  uint64_t v145 = *(void (**)(char *, char *, uint64_t))(v401 + 16);
  uint64_t v332 = v143;
  v329 = (char *)(v401 + 16);
  uint64_t v328 = v145;
  v145(v143, (char *)v343, v402);
  uint64_t v146 = &v426[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v343 = *(void *)(v429 - 8);
  uint64_t v147 = *(void (**)(void))(v343 + 16);
  uint64_t v339 = v343 + 16;
  uint64_t v338 = v147;
  v147();
  uint64_t v148 = *(void (**)(char *, char *, uint64_t))(v403 + 16);
  uint64_t v340 = v146;
  uint64_t v149 = v337;
  uint64_t v337 = (char *)(v403 + 16);
  uint64_t v336 = v148;
  v148(v146, v149, v123);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417728);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25A518180;
  uint64_t v151 = (uint64_t *)(inited + 48);
  *(void *)(inited + 32) = (*(uint64_t (**)(uint64_t))(v296 + 8))(v405);
  *(void *)(inited + 40) = v152;
  uint64_t v153 = &v377[*(int *)(v394 + 48)];
  v269();
  uint64_t v154 = v376;
  v266(v153, v267, v376);
  uint64_t v155 = v378;
  uint64_t v156 = v287;
  (*(void (**)(char *, char *, uint64_t))(v378 + 32))(v287, v153, v154);
  uint64_t v157 = *(void *)(v380 - 8);
  uint64_t v158 = v380;
  if ((*(unsigned int (**)(char *, uint64_t))(v157 + 48))(v156, 1) == 1)
  {
    (*(void (**)(char *, uint64_t))(v270 + 8))(v377, v405);
    (*(void (**)(char *, uint64_t))(v155 + 8))(v156, v154);
    *(void *)(inited + 80) = 0;
    *(_OWORD *)uint64_t v151 = 0u;
    *(_OWORD *)(inited + 64) = 0u;
  }
  else
  {
    uint64_t v378 = *(void *)(a46 + 24);
    *(void *)(inited + 72) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 80) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1(v151);
    ((void (*)(uint64_t, uint64_t))v378)(v158, a46);
    (*(void (**)(char *, uint64_t))(v157 + 8))(v156, v158);
    (*(void (**)(char *, uint64_t))(v270 + 8))(v377, v405);
  }
  uint64_t v405 = a51;
  uint64_t v159 = v395;
  uint64_t v160 = v382;
  *(void *)(inited + 88) = (*(uint64_t (**)(uint64_t))(v309 + 8))(v382);
  *(void *)(inited + 96) = v161;
  uint64_t v162 = v369;
  uint64_t v163 = &v369[*(int *)(v396 + 48)];
  v273(v369, v159, v160);
  uint64_t v164 = v406;
  v271(v163, v275, v406);
  uint64_t v165 = v379;
  uint64_t v166 = v302;
  (*(void (**)(char *, char *, uint64_t))(v379 + 32))(v302, v163, v164);
  uint64_t v167 = v316;
  uint64_t v168 = *(void *)(v316 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v168 + 48))(v166, 1, v316) == 1)
  {
    (*(void (**)(char *, uint64_t))(v276 + 8))(v162, v160);
    (*(void (**)(char *, uint64_t))(v165 + 8))(v166, v164);
    *(void *)(inited + 136) = 0;
    *(_OWORD *)(inited + 104) = 0u;
    *(_OWORD *)(inited + 120) = 0u;
  }
  else
  {
    uint64_t v406 = *(void *)(a48 + 24);
    *(void *)(inited + 128) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 136) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 104));
    ((void (*)(uint64_t, uint64_t))v406)(v167, a48);
    (*(void (**)(char *, uint64_t))(v168 + 8))(v166, v167);
    (*(void (**)(char *, uint64_t))(v276 + 8))(v369, v160);
  }
  uint64_t v169 = v407;
  uint64_t v170 = v381;
  uint64_t v407 = a53;
  uint64_t v171 = v397;
  *(void *)(inited + 144) = (*(uint64_t (**)(uint64_t))(v318 + 8))(v169);
  *(void *)(inited + 152) = v172;
  uint64_t v173 = v370;
  uint64_t v174 = &v370[*(int *)(v398 + 48)];
  v279(v370, v171, v169);
  uint64_t v175 = v404;
  v277(v174, v281, v404);
  uint64_t v176 = v310;
  (*(void (**)(char *, char *, uint64_t))(v170 + 32))(v310, v174, v175);
  uint64_t v177 = v326;
  uint64_t v178 = *(void *)(v326 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v178 + 48))(v176, 1, v326) == 1)
  {
    (*(void (**)(char *, uint64_t))(v282 + 8))(v173, v169);
    (*(void (**)(char *, uint64_t))(v170 + 8))(v176, v404);
    *(void *)(inited + 192) = 0;
    *(_OWORD *)(inited + 160) = 0u;
    *(_OWORD *)(inited + 176) = 0u;
  }
  else
  {
    uint64_t v406 = *(void *)(a50 + 24);
    *(void *)(inited + 184) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 192) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 160));
    ((void (*)(uint64_t, uint64_t))v406)(v177, a50);
    (*(void (**)(char *, uint64_t))(v178 + 8))(v176, v177);
    (*(void (**)(char *, uint64_t))(v282 + 8))(v370, v169);
  }
  uint64_t v179 = v320;
  uint64_t v180 = v383;
  uint64_t v181 = v371;
  uint64_t v406 = a55;
  uint64_t v182 = v411;
  uint64_t v183 = v408;
  *(void *)(inited + 200) = (*(uint64_t (**)(uint64_t))(v405 + 8))(v408);
  *(void *)(inited + 208) = v184;
  uint64_t v185 = &v181[*(int *)(v413 + 48)];
  ((void (*)(char *, char *, uint64_t))v285)(v181, v182, v183);
  uint64_t v186 = v384;
  v283(v185, v288, v384);
  (*(void (**)(char *, char *, uint64_t))(v180 + 32))(v179, v185, v186);
  uint64_t v187 = v334;
  uint64_t v188 = *(void *)(v334 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v188 + 48))(v179, 1, v334) == 1)
  {
    (*(void (**)(char *, uint64_t))(v289 + 8))(v181, v183);
    (*(void (**)(char *, uint64_t))(v180 + 8))(v179, v186);
    *(void *)(inited + 248) = 0;
    *(_OWORD *)(inited + 216) = 0u;
    *(_OWORD *)(inited + 232) = 0u;
  }
  else
  {
    uint64_t v405 = *(void *)(a52 + 24);
    *(void *)(inited + 240) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 248) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 216));
    ((void (*)(uint64_t, uint64_t))v405)(v187, a52);
    (*(void (**)(char *, uint64_t))(v188 + 8))(v179, v187);
    (*(void (**)(char *, uint64_t))(v289 + 8))(v371, v183);
  }
  uint64_t v189 = v430;
  uint64_t v190 = v333;
  uint64_t v191 = v386;
  uint64_t v192 = v372;
  uint64_t v408 = a57;
  uint64_t v193 = v414;
  *(void *)(inited + 256) = (*(uint64_t (**)(uint64_t))(v407 + 8))(v430);
  *(void *)(inited + 264) = v194;
  uint64_t v195 = &v192[*(int *)(v415 + 48)];
  ((void (*)(char *, char *, uint64_t))v292)(v192, v193, v189);
  v290(v195, v294, v191);
  uint64_t v196 = v385;
  (*(void (**)(char *, char *, uint64_t))(v385 + 32))(v190, v195, v191);
  uint64_t v197 = v342;
  uint64_t v198 = *(void *)(v342 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v198 + 48))(v190, 1, v342) == 1)
  {
    (*(void (**)(char *, uint64_t))(v295 + 8))(v192, v189);
    (*(void (**)(char *, uint64_t))(v196 + 8))(v190, v191);
    *(void *)(inited + 304) = 0;
    *(_OWORD *)(inited + 272) = 0u;
    *(_OWORD *)(inited + 288) = 0u;
  }
  else
  {
    uint64_t v199 = *(void (**)(uint64_t, uint64_t))(a54 + 24);
    *(void *)(inited + 296) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 304) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 272));
    v199(v197, a54);
    (*(void (**)(char *, uint64_t))(v198 + 8))(v190, v197);
    (*(void (**)(char *, uint64_t))(v295 + 8))(v372, v430);
  }
  uint64_t v200 = v409;
  uint64_t v201 = v341;
  uint64_t v202 = v373;
  uint64_t v430 = a59;
  uint64_t v203 = v416;
  *(void *)(inited + 312) = (*(uint64_t (**)(uint64_t))(v406 + 8))(v409);
  *(void *)(inited + 320) = v204;
  uint64_t v205 = &v202[*(int *)(v417 + 48)];
  ((void (*)(char *, char *, uint64_t))v299)(v202, v203, v200);
  uint64_t v206 = v388;
  v297(v205, v301, v388);
  uint64_t v207 = v387;
  (*(void (**)(char *, char *, uint64_t))(v387 + 32))(v201, v205, v206);
  uint64_t v208 = v344;
  uint64_t v209 = *(void *)(v344 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v209 + 48))(v201, 1, v344) == 1)
  {
    (*(void (**)(char *, uint64_t))(v303 + 8))(v202, v200);
    (*(void (**)(char *, uint64_t))(v207 + 8))(v201, v206);
    *(void *)(inited + 360) = 0;
    *(_OWORD *)(inited + 328) = 0u;
    *(_OWORD *)(inited + 344) = 0u;
  }
  else
  {
    uint64_t v409 = *(void *)(a56 + 24);
    *(void *)(inited + 352) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 360) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 328));
    ((void (*)(uint64_t, uint64_t))v409)(v208, a56);
    (*(void (**)(char *, uint64_t))(v209 + 8))(v201, v208);
    (*(void (**)(char *, uint64_t))(v303 + 8))(v373, v200);
  }
  uint64_t v210 = v410;
  uint64_t v211 = v389;
  uint64_t v212 = v374;
  uint64_t v410 = a61;
  uint64_t v213 = v418;
  *(void *)(inited + 368) = (*(uint64_t (**)(uint64_t))(v408 + 8))(v210);
  *(void *)(inited + 376) = v214;
  uint64_t v215 = &v212[*(int *)(v419 + 48)];
  ((void (*)(char *, char *, uint64_t))v306)(v212, v213, v210);
  uint64_t v216 = v390;
  v304(v215, v308, v390);
  uint64_t v217 = v345;
  (*(void (**)(char *, char *, uint64_t))(v211 + 32))(v345, v215, v216);
  uint64_t v218 = v347;
  uint64_t v219 = *(void *)(v347 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v219 + 48))(v217, 1, v347) == 1)
  {
    (*(void (**)(char *, uint64_t))(v311 + 8))(v212, v210);
    (*(void (**)(char *, uint64_t))(v211 + 8))(v217, v216);
    *(void *)(inited + 416) = 0;
    *(_OWORD *)(inited + 384) = 0u;
    *(_OWORD *)(inited + 400) = 0u;
  }
  else
  {
    uint64_t v409 = *(void *)(a58 + 24);
    *(void *)(inited + 408) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 416) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 384));
    ((void (*)(uint64_t, uint64_t))v409)(v218, a58);
    (*(void (**)(char *, uint64_t))(v219 + 8))(v217, v218);
    (*(void (**)(char *, uint64_t))(v311 + 8))(v374, v210);
  }
  uint64_t v220 = v392;
  uint64_t v221 = v391;
  uint64_t v222 = v375;
  uint64_t v409 = a63;
  uint64_t v223 = v420;
  uint64_t v224 = v412;
  *(void *)(inited + 424) = (*(uint64_t (**)(void *))(v430 + 8))(v412);
  *(void *)(inited + 432) = v225;
  uint64_t v226 = &v222[*(int *)(v421 + 48)];
  uint64_t v227 = v223;
  uint64_t v228 = v224;
  ((void (*)(char *, char *, void *))v314)(v222, v227, v224);
  v312(v226, v317, v220);
  uint64_t v229 = v348;
  (*(void (**)(char *, char *, uint64_t))(v221 + 32))(v348, v226, v220);
  uint64_t v230 = v353;
  uint64_t v231 = *(void *)(v353 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v231 + 48))(v229, 1, v353) == 1)
  {
    (*(void (**)(char *, void *))(v319 + 8))(v222, v228);
    (*(void (**)(char *, uint64_t))(v221 + 8))(v229, v220);
    *(void *)(inited + 472) = 0;
    *(_OWORD *)(inited + 440) = 0u;
    *(_OWORD *)(inited + 456) = 0u;
  }
  else
  {
    uint64_t v430 = *(void *)(a60 + 24);
    *(void *)(inited + 464) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 472) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 440));
    ((void (*)(uint64_t, uint64_t))v430)(v230, a60);
    (*(void (**)(char *, uint64_t))(v231 + 8))(v229, v230);
    (*(void (**)(char *, void *))(v319 + 8))(v375, v228);
  }
  uint64_t v232 = v431;
  uint64_t v233 = v399;
  uint64_t v430 = a65;
  uint64_t v234 = v422;
  *(void *)(inited + 480) = (*(uint64_t (**)(uint64_t *))(v410 + 8))(v431);
  *(void *)(inited + 488) = v235;
  uint64_t v236 = v346;
  uint64_t v237 = &v346[*(int *)(v423 + 48)];
  ((void (*)(char *, char *, uint64_t *))v323)(v346, v234, v232);
  uint64_t v238 = v400;
  v321(v237, v325, v400);
  uint64_t v239 = v356;
  (*(void (**)(char *, char *, uint64_t))(v233 + 32))(v356, v237, v238);
  uint64_t v240 = v362;
  uint64_t v241 = *(void *)(v362 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v241 + 48))(v239, 1, v362) == 1)
  {
    (*(void (**)(char *, uint64_t *))(v327 + 8))(v236, v232);
    (*(void (**)(char *, uint64_t))(v233 + 8))(v239, v238);
    *(void *)(inited + 528) = 0;
    *(_OWORD *)(inited + 496) = 0u;
    *(_OWORD *)(inited + 512) = 0u;
  }
  else
  {
    v412 = *(void **)(a62 + 24);
    *(void *)(inited + 520) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 528) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 496));
    ((void (*)(uint64_t, uint64_t))v412)(v240, a62);
    (*(void (**)(char *, uint64_t))(v241 + 8))(v239, v240);
    (*(void (**)(char *, uint64_t *))(v327 + 8))(v236, v431);
  }
  uint64_t v242 = v401;
  uint64_t v243 = v424;
  uint64_t v244 = v432;
  *(void *)(inited + 536) = (*(uint64_t (**)(void *))(v409 + 8))(v432);
  *(void *)(inited + 544) = v245;
  uint64_t v246 = v350;
  v247 = &v350[*(int *)(v425 + 48)];
  ((void (*)(char *, char *, void *))v330)(v350, v243, v244);
  uint64_t v248 = v402;
  v328(v247, v332, v402);
  v249 = v365;
  (*(void (**)(char *, char *, uint64_t))(v242 + 32))(v365, v247, v248);
  uint64_t v250 = v366;
  uint64_t v251 = *(void *)(v366 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v251 + 48))(v249, 1, v366) == 1)
  {
    (*(void (**)(char *, void *))(v335 + 8))(v246, v244);
    (*(void (**)(char *, uint64_t))(v242 + 8))(v249, v248);
    *(void *)(inited + 584) = 0;
    *(_OWORD *)(inited + 552) = 0u;
    *(_OWORD *)(inited + 568) = 0u;
  }
  else
  {
    v431 = *(uint64_t **)(a64 + 24);
    *(void *)(inited + 576) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 584) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 552));
    ((void (*)(uint64_t, uint64_t))v431)(v250, a64);
    (*(void (**)(char *, uint64_t))(v251 + 8))(v249, v250);
    (*(void (**)(char *, void *))(v335 + 8))(v246, v432);
  }
  uint64_t v252 = v429;
  uint64_t v253 = v403;
  uint64_t v254 = v426;
  *(void *)(inited + 592) = (*(uint64_t (**)(uint64_t))(v430 + 8))(v429);
  *(void *)(inited + 600) = v255;
  uint64_t v256 = v360;
  uint64_t v257 = &v360[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, char *, uint64_t))v338)(v360, v254, v252);
  uint64_t v258 = v428;
  v336(v257, v340, v428);
  uint64_t v259 = v367;
  (*(void (**)(char *, char *, uint64_t))(v253 + 32))(v367, v257, v258);
  uint64_t v260 = v368;
  uint64_t v261 = *(void *)(v368 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v261 + 48))(v259, 1, v368) == 1)
  {
    (*(void (**)(char *, uint64_t))(v343 + 8))(v256, v252);
    (*(void (**)(char *, uint64_t))(v253 + 8))(v259, v258);
    *(void *)(inited + 640) = 0;
    *(_OWORD *)(inited + 608) = 0u;
    *(_OWORD *)(inited + 624) = 0u;
  }
  else
  {
    v431 = (uint64_t *)(inited + 608);
    v432 = *(void **)(a66 + 24);
    *(void *)(inited + 632) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 640) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1(v431);
    ((void (*)(uint64_t, uint64_t))v432)(v260, a66);
    (*(void (**)(char *, uint64_t))(v261 + 8))(v259, v260);
    (*(void (**)(char *, uint64_t))(v343 + 8))(v256, v252);
  }
  unint64_t v262 = sub_25A392B24(inited);
  uint64_t v263 = sub_25A44B160(v262);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v364 + 8))(v426, TupleTypeMetadata2);
  (*(void (**)(char *, uint64_t))(v363 + 8))(v424, v425);
  (*(void (**)(char *, uint64_t))(v361 + 8))(v422, v423);
  (*(void (**)(char *, uint64_t))(v359 + 8))(v420, v421);
  (*(void (**)(char *, uint64_t))(v358 + 8))(v418, v419);
  (*(void (**)(char *, uint64_t))(v357 + 8))(v416, v417);
  (*(void (**)(char *, uint64_t))(v355 + 8))(v414, v415);
  (*(void (**)(char *, uint64_t))(v354 + 8))(v411, v413);
  (*(void (**)(char *, uint64_t))(v352 + 8))(v397, v398);
  (*(void (**)(char *, uint64_t))(v351 + 8))(v395, v396);
  (*(void (**)(char *, uint64_t))(v349 + 8))(v393, v394);
  return v263;
}

uint64_t static PropertyListBuilder.buildBlock<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X>(_:_:_:_:_:_:_:_:_:_:_:_:)(char *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7, uint64_t a8, char *a9, void (*a10)(char *, char *, uint64_t), void (*a11)(void), char *a12, void (*a13)(char *, char *, uint64_t), char *a14, void (*a15)(void), char *a16, char *a17, uint64_t a18, void (*a19)(char *, char *, uint64_t), void (*a20)(void),uint64_t a21,uint64_t a22,char *a23,char *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t *a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v354 = a8;
  uint64_t v351 = a7;
  uint64_t v349 = a6;
  uint64_t v347 = a5;
  uint64_t v431 = a4;
  uint64_t v430 = a3;
  uint64_t v429 = a2;
  uint64_t v428 = a1;
  uint64_t v344 = a53;
  uint64_t v332 = a51;
  uint64_t v462 = a47;
  v467 = a45;
  v466 = a43;
  uint64_t v465 = a41;
  uint64_t v442 = a39;
  v441 = a37;
  uint64_t v464 = a35;
  uint64_t v463 = a33;
  uint64_t v440 = a31;
  uint64_t v439 = a29;
  uint64_t v412 = a28;
  uint64_t v413 = a27;
  uint64_t v408 = a26;
  uint64_t v437 = a25;
  uint64_t v323 = a49;
  uint64_t v364 = a24;
  uint64_t v367 = a23;
  uint64_t v369 = a22;
  uint64_t v366 = a21;
  uint64_t v365 = a20;
  uint64_t v363 = a19;
  uint64_t v361 = a18;
  uint64_t v360 = a17;
  uint64_t v359 = a16;
  uint64_t v358 = a15;
  uint64_t v357 = a14;
  uint64_t v356 = a13;
  uint64_t v352 = a12;
  uint64_t v350 = a11;
  v348 = a10;
  uint64_t v343 = a9;
  uint64_t v397 = a48;
  uint64_t v461 = sub_25A50FA40();
  uint64_t v436 = *(void *)(v461 - 8);
  MEMORY[0x270FA5388](v461);
  uint64_t v396 = (char *)&v286 - v72;
  uint64_t v395 = a46;
  uint64_t v435 = sub_25A50FA40();
  uint64_t v434 = *(void *)(v435 - 8);
  MEMORY[0x270FA5388](v435);
  uint64_t v394 = (char *)&v286 - v73;
  uint64_t v392 = a44;
  uint64_t v433 = sub_25A50FA40();
  uint64_t v432 = *(void *)(v433 - 8);
  MEMORY[0x270FA5388](v433);
  uint64_t v386 = (char *)&v286 - v74;
  uint64_t v383 = a42;
  uint64_t v425 = sub_25A50FA40();
  uint64_t v424 = *(void *)(v425 - 8);
  MEMORY[0x270FA5388](v425);
  uint64_t v376 = (char *)&v286 - v75;
  uint64_t v375 = a40;
  uint64_t v423 = sub_25A50FA40();
  uint64_t v422 = *(void *)(v423 - 8);
  MEMORY[0x270FA5388](v423);
  uint64_t v373 = (char *)&v286 - v76;
  uint64_t v372 = a38;
  uint64_t v421 = sub_25A50FA40();
  uint64_t v420 = *(void *)(v421 - 8);
  MEMORY[0x270FA5388](v421);
  v370 = (char *)&v286 - v77;
  uint64_t v371 = a36;
  uint64_t v419 = sub_25A50FA40();
  uint64_t v418 = *(void *)(v419 - 8);
  MEMORY[0x270FA5388](v419);
  uint64_t v362 = (char *)&v286 - v78;
  uint64_t v368 = a34;
  uint64_t v417 = sub_25A50FA40();
  uint64_t v416 = *(void *)(v417 - 8);
  MEMORY[0x270FA5388](v417);
  uint64_t v353 = (char *)&v286 - v79;
  uint64_t v355 = a32;
  uint64_t v415 = sub_25A50FA40();
  uint64_t v414 = *(void *)(v415 - 8);
  MEMORY[0x270FA5388](v415);
  uint64_t v345 = (char *)&v286 - v80;
  uint64_t v346 = a30;
  uint64_t v411 = sub_25A50FA40();
  uint64_t v410 = *(void *)(v411 - 8);
  MEMORY[0x270FA5388](v411);
  uint64_t v331 = (char *)&v286 - v81;
  uint64_t v438 = sub_25A50FA40();
  uint64_t v409 = *(void *)(v438 - 8);
  MEMORY[0x270FA5388](v438);
  uint64_t v322 = (char *)&v286 - v82;
  uint64_t v290 = sub_25A50FA40();
  uint64_t v407 = *(void *)(v290 - 8);
  MEMORY[0x270FA5388](v290);
  uint64_t v309 = (char *)&v286 - v83;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v393 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v84 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v389 = (char *)&v286 - ((v85 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v84);
  v459 = (char *)&v286 - v86;
  uint64_t v458 = swift_getTupleTypeMetadata2();
  uint64_t v391 = *(void *)(v458 - 8);
  uint64_t v87 = MEMORY[0x270FA5388](v458);
  uint64_t v379 = (char *)&v286 - ((v88 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v87);
  v457 = (char *)&v286 - v89;
  uint64_t v456 = swift_getTupleTypeMetadata2();
  uint64_t v390 = *(void *)(v456 - 8);
  uint64_t v90 = MEMORY[0x270FA5388](v456);
  v374 = (char *)&v286 - ((v91 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v90);
  v455 = (char *)&v286 - v92;
  uint64_t v454 = swift_getTupleTypeMetadata2();
  uint64_t v388 = *(void *)(v454 - 8);
  uint64_t v93 = MEMORY[0x270FA5388](v454);
  uint64_t v405 = (char *)&v286 - ((v94 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v93);
  v453 = (char *)&v286 - v95;
  uint64_t v452 = swift_getTupleTypeMetadata2();
  uint64_t v387 = *(void *)(v452 - 8);
  uint64_t v96 = MEMORY[0x270FA5388](v452);
  uint64_t v404 = (char *)&v286 - ((v97 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v96);
  v451 = (char *)&v286 - v98;
  uint64_t v450 = swift_getTupleTypeMetadata2();
  uint64_t v385 = *(void *)(v450 - 8);
  uint64_t v99 = MEMORY[0x270FA5388](v450);
  uint64_t v403 = (char *)&v286 - ((v100 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v99);
  v449 = (char *)&v286 - v101;
  uint64_t v448 = swift_getTupleTypeMetadata2();
  uint64_t v384 = *(void *)(v448 - 8);
  uint64_t v102 = MEMORY[0x270FA5388](v448);
  uint64_t v402 = (char *)&v286 - ((v103 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v102);
  v447 = (char *)&v286 - v104;
  uint64_t v446 = swift_getTupleTypeMetadata2();
  uint64_t v382 = *(void *)(v446 - 8);
  uint64_t v105 = MEMORY[0x270FA5388](v446);
  uint64_t v401 = (char *)&v286 - ((v106 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v105);
  v445 = (char *)&v286 - v107;
  uint64_t v444 = swift_getTupleTypeMetadata2();
  uint64_t v381 = *(void *)(v444 - 8);
  uint64_t v108 = MEMORY[0x270FA5388](v444);
  uint64_t v400 = (char *)&v286 - ((v109 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v108);
  v443 = (char *)&v286 - v110;
  uint64_t v111 = swift_getTupleTypeMetadata2();
  uint64_t v380 = *(void *)(v111 - 8);
  uint64_t v112 = MEMORY[0x270FA5388](v111);
  uint64_t v399 = (char *)&v286 - ((v113 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v112);
  uint64_t v115 = (char *)&v286 - v114;
  uint64_t v116 = v413;
  uint64_t v117 = swift_getTupleTypeMetadata2();
  uint64_t v378 = *(void *)(v117 - 8);
  uint64_t v118 = MEMORY[0x270FA5388](v117);
  uint64_t v398 = (char *)&v286 - ((v119 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v118);
  int v121 = (char *)&v286 - v120;
  uint64_t v122 = v437;
  uint64_t v123 = v290;
  uint64_t v427 = swift_getTupleTypeMetadata2();
  uint64_t v377 = *(void *)(v427 - 8);
  uint64_t v124 = MEMORY[0x270FA5388](v427);
  uint64_t v406 = (char *)&v286 - ((v125 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v126 = MEMORY[0x270FA5388](v124);
  uint64_t v128 = (char *)&v286 + *(int *)(v126 + 48) - v127;
  v426 = (char *)&v286 - v127;
  uint64_t v291 = *(void *)(v122 - 8);
  uint64_t v129 = *(void (**)(void))(v291 + 16);
  uint64_t v287 = v128;
  uint64_t v288 = v291 + 16;
  uint64_t v289 = v129;
  ((void (*)(char *, char *, uint64_t))v129)((char *)&v286 - v127, v428, v122);
  uint64_t v286 = *(void (**)(char *, uint64_t, uint64_t))(v407 + 16);
  v286(v128, v429, v123);
  uint64_t v429 = v117;
  uint64_t v130 = &v121[*(int *)(v117 + 48)];
  uint64_t v297 = *(v116 - 1);
  uint64_t v131 = *(void (**)(char *, char *, void (*)(void, void)))(v297 + 16);
  uint64_t v428 = v121;
  uint64_t v294 = v131;
  uint64_t v295 = v297 + 16;
  v131(v121, v430, (void (*)(void, void))v116);
  uint64_t v132 = *(void (**)(char *, char *, uint64_t))(v409 + 16);
  uint64_t v296 = v130;
  uint64_t v292 = v132;
  uint64_t v293 = v409 + 16;
  v132(v130, (char *)v431, v438);
  uint64_t v431 = v111;
  uint64_t v133 = &v115[*(int *)(v111 + 48)];
  uint64_t v303 = *(void *)(v439 - 8);
  uint64_t v134 = *(void (**)(char *, char *, uint64_t))(v303 + 16);
  uint64_t v430 = v115;
  uint64_t v300 = v134;
  uint64_t v301 = v303 + 16;
  ((void (*)(char *, uint64_t))v134)(v115, v347);
  uint64_t v135 = *(void (**)(char *, char *, uint64_t))(v410 + 16);
  uint64_t v302 = v133;
  uint64_t v298 = v135;
  uint64_t v299 = v410 + 16;
  v135(v133, v349, v411);
  uint64_t v136 = v408;
  uint64_t v137 = &v443[*(int *)(v444 + 48)];
  uint64_t v310 = *(void *)(v440 - 8);
  uint64_t v306 = *(void (**)(void))(v310 + 16);
  uint64_t v307 = v310 + 16;
  v306();
  uint64_t v138 = *(void (**)(char *, char *, uint64_t))(v414 + 16);
  v308 = v137;
  uint64_t v304 = v138;
  uint64_t v305 = v414 + 16;
  v138(v137, (char *)v354, v415);
  uint64_t v139 = &v445[*(int *)(v446 + 48)];
  uint64_t v316 = *(void *)(v463 - 8);
  uint64_t v140 = v437;
  uint64_t v141 = v442;
  uint64_t v313 = *(void (**)(void))(v316 + 16);
  uint64_t v314 = v316 + 16;
  v313();
  uint64_t v142 = *(void (**)(char *, char *, uint64_t))(v416 + 16);
  uint64_t v315 = v139;
  uint64_t v311 = v142;
  uint64_t v312 = v416 + 16;
  v142(v139, (char *)v348, v417);
  uint64_t v143 = &v447[*(int *)(v448 + 48)];
  uint64_t v324 = *(void *)(v464 - 8);
  uint64_t v319 = *(void (**)(void))(v324 + 16);
  uint64_t v320 = v324 + 16;
  v319();
  uint64_t v144 = *(void (**)(char *, char *, uint64_t))(v418 + 16);
  uint64_t v321 = v143;
  uint64_t v317 = v144;
  uint64_t v318 = v418 + 16;
  v144(v143, v352, v419);
  uint64_t v145 = &v449[*(int *)(v450 + 48)];
  uint64_t v330 = *(v441 - 1);
  uint64_t v327 = *(void (**)(void))(v330 + 16);
  uint64_t v328 = v330 + 16;
  v327();
  uint64_t v146 = *(void (**)(char *, char *, uint64_t))(v420 + 16);
  v329 = v145;
  uint64_t v325 = v146;
  uint64_t v326 = v420 + 16;
  v146(v145, v357, v421);
  uint64_t v147 = &v451[*(int *)(v452 + 48)];
  uint64_t v338 = *(void *)(v141 - 8);
  uint64_t v148 = v123;
  uint64_t v335 = *(void (**)(void))(v338 + 16);
  uint64_t v336 = v338 + 16;
  v335();
  uint64_t v149 = *(void (**)(char *, char *, uint64_t))(v422 + 16);
  uint64_t v337 = v147;
  uint64_t v333 = v149;
  uint64_t v334 = v422 + 16;
  v149(v147, v359, v423);
  uint64_t v150 = &v453[*(int *)(v454 + 48)];
  uint64_t v347 = *(void *)(v465 - 8);
  uint64_t v341 = *(void (**)(void))(v347 + 16);
  uint64_t v342 = v347 + 16;
  v341();
  uint64_t v151 = *(void (**)(char *, char *, uint64_t))(v424 + 16);
  uint64_t v343 = v150;
  uint64_t v339 = v151;
  uint64_t v340 = v424 + 16;
  v151(v150, (char *)v361, v425);
  uint64_t v152 = &v455[*(int *)(v456 + 48)];
  uint64_t v354 = *(v466 - 1);
  uint64_t v153 = *(void (**)(void))(v354 + 16);
  uint64_t v351 = v354 + 16;
  uint64_t v350 = v153;
  v153();
  uint64_t v154 = *(void (**)(char *, char *, uint64_t))(v432 + 16);
  uint64_t v352 = v152;
  v348 = v154;
  uint64_t v349 = (char *)(v432 + 16);
  v154(v152, (char *)v365, v433);
  uint64_t v155 = &v457[*(int *)(v458 + 48)];
  uint64_t v361 = *(v467 - 1);
  uint64_t v156 = *(void (**)(void))(v361 + 16);
  uint64_t v359 = (char *)(v361 + 16);
  uint64_t v358 = v156;
  v156();
  uint64_t v157 = *(void (**)(char *, char *, uint64_t))(v434 + 16);
  uint64_t v360 = v155;
  uint64_t v357 = (char *)(v434 + 16);
  uint64_t v356 = v157;
  v157(v155, (char *)v369, v435);
  uint64_t v158 = &v459[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v369 = *(void *)(v462 - 8);
  uint64_t v159 = *(void (**)(void))(v369 + 16);
  uint64_t v366 = v369 + 16;
  uint64_t v365 = v159;
  v159();
  uint64_t v160 = *(void (**)(char *, char *, uint64_t))(v436 + 16);
  uint64_t v367 = v158;
  uint64_t v161 = v364;
  uint64_t v364 = (char *)(v436 + 16);
  uint64_t v363 = v160;
  v160(v158, v161, v461);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417728);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25A518190;
  uint64_t v163 = (uint64_t *)(inited + 48);
  *(void *)(inited + 32) = (*(uint64_t (**)(uint64_t))(v323 + 8))(v140);
  *(void *)(inited + 40) = v164;
  uint64_t v165 = &v406[*(int *)(v427 + 48)];
  uint64_t v166 = v407;
  v289();
  v286(v165, (uint64_t)v287, v148);
  uint64_t v167 = v309;
  (*(void (**)(char *, char *, uint64_t))(v166 + 32))(v309, v165, v148);
  uint64_t v168 = *(void *)(v136 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v168 + 48))(v167, 1, v136) == 1)
  {
    (*(void (**)(char *, uint64_t))(v291 + 8))(v406, v437);
    (*(void (**)(char *, uint64_t))(v166 + 8))(v167, v148);
    *(void *)(inited + 80) = 0;
    *(_OWORD *)uint64_t v163 = 0u;
    *(_OWORD *)(inited + 64) = 0u;
  }
  else
  {
    uint64_t v169 = *(void (**)(uint64_t, uint64_t))(a50 + 24);
    *(void *)(inited + 72) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 80) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1(v163);
    v169(v136, a50);
    (*(void (**)(char *, uint64_t))(v168 + 8))(v167, v136);
    (*(void (**)(char *, uint64_t))(v291 + 8))(v406, v437);
  }
  uint64_t v437 = a55;
  uint64_t v170 = v428;
  uint64_t v171 = (void (*)(void, void))v413;
  *(void *)(inited + 88) = (*(uint64_t (**)(void *))(v332 + 8))(v413);
  *(void *)(inited + 96) = v172;
  uint64_t v173 = v398;
  uint64_t v174 = &v398[*(int *)(v429 + 48)];
  v294(v398, v170, v171);
  uint64_t v175 = v438;
  v292(v174, v296, v438);
  uint64_t v176 = v409;
  uint64_t v177 = v322;
  (*(void (**)(char *, char *, uint64_t))(v409 + 32))(v322, v174, v175);
  uint64_t v178 = v412;
  uint64_t v179 = *(void *)(v412 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v179 + 48))(v177, 1, v412) == 1)
  {
    (*(void (**)(char *, void))(v297 + 8))(v173, v171);
    (*(void (**)(char *, uint64_t))(v176 + 8))(v177, v175);
    *(void *)(inited + 136) = 0;
    *(_OWORD *)(inited + 104) = 0u;
    *(_OWORD *)(inited + 120) = 0u;
  }
  else
  {
    uint64_t v438 = *(void *)(a52 + 24);
    *(void *)(inited + 128) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 136) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 104));
    ((void (*)(uint64_t, uint64_t))v438)(v178, a52);
    (*(void (**)(char *, uint64_t))(v179 + 8))(v177, v178);
    (*(void (**)(char *, void))(v297 + 8))(v398, v171);
  }
  uint64_t v180 = v411;
  uint64_t v181 = v410;
  uint64_t v438 = a57;
  uint64_t v182 = v430;
  uint64_t v183 = v439;
  *(void *)(inited + 144) = (*(uint64_t (**)(uint64_t))(v344 + 8))(v439);
  *(void *)(inited + 152) = v184;
  uint64_t v185 = v399;
  uint64_t v186 = &v399[*(int *)(v431 + 48)];
  v300(v399, v182, v183);
  v298(v186, v302, v180);
  uint64_t v187 = v331;
  (*(void (**)(char *, char *, uint64_t))(v181 + 32))(v331, v186, v180);
  uint64_t v188 = v346;
  uint64_t v189 = *(void *)(v346 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v189 + 48))(v187, 1, v346) == 1)
  {
    (*(void (**)(char *, uint64_t))(v303 + 8))(v185, v183);
    (*(void (**)(char *, uint64_t))(v181 + 8))(v187, v180);
    *(void *)(inited + 192) = 0;
    *(_OWORD *)(inited + 160) = 0u;
    *(_OWORD *)(inited + 176) = 0u;
  }
  else
  {
    uint64_t v413 = *(void **)(a54 + 24);
    *(void *)(inited + 184) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 192) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 160));
    ((void (*)(uint64_t, uint64_t))v413)(v188, a54);
    (*(void (**)(char *, uint64_t))(v189 + 8))(v187, v188);
    (*(void (**)(char *, uint64_t))(v303 + 8))(v399, v183);
  }
  uint64_t v190 = v415;
  uint64_t v191 = v414;
  uint64_t v192 = v400;
  uint64_t v439 = a59;
  uint64_t v193 = v443;
  uint64_t v194 = v440;
  *(void *)(inited + 200) = (*(uint64_t (**)(uint64_t))(v437 + 8))(v440);
  *(void *)(inited + 208) = v195;
  uint64_t v196 = &v192[*(int *)(v444 + 48)];
  ((void (*)(char *, char *, uint64_t))v306)(v192, v193, v194);
  v304(v196, v308, v190);
  uint64_t v197 = v345;
  (*(void (**)(char *, char *, uint64_t))(v191 + 32))(v345, v196, v190);
  uint64_t v198 = v355;
  uint64_t v199 = *(void *)(v355 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v199 + 48))(v197, 1, v355) == 1)
  {
    (*(void (**)(char *, uint64_t))(v310 + 8))(v192, v194);
    (*(void (**)(char *, uint64_t))(v191 + 8))(v197, v190);
    *(void *)(inited + 248) = 0;
    *(_OWORD *)(inited + 216) = 0u;
    *(_OWORD *)(inited + 232) = 0u;
  }
  else
  {
    uint64_t v437 = *(void *)(a56 + 24);
    *(void *)(inited + 240) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 248) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 216));
    ((void (*)(uint64_t, uint64_t))v437)(v198, a56);
    (*(void (**)(char *, uint64_t))(v199 + 8))(v197, v198);
    (*(void (**)(char *, uint64_t))(v310 + 8))(v400, v194);
  }
  uint64_t v200 = v463;
  uint64_t v201 = v353;
  uint64_t v202 = v401;
  uint64_t v440 = a61;
  uint64_t v203 = v445;
  *(void *)(inited + 256) = (*(uint64_t (**)(uint64_t))(v438 + 8))(v463);
  *(void *)(inited + 264) = v204;
  uint64_t v205 = &v202[*(int *)(v446 + 48)];
  ((void (*)(char *, char *, uint64_t))v313)(v202, v203, v200);
  uint64_t v206 = v417;
  v311(v205, v315, v417);
  uint64_t v207 = v416;
  (*(void (**)(char *, char *, uint64_t))(v416 + 32))(v201, v205, v206);
  uint64_t v208 = v368;
  uint64_t v209 = *(void *)(v368 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v209 + 48))(v201, 1, v368) == 1)
  {
    (*(void (**)(char *, uint64_t))(v316 + 8))(v202, v200);
    (*(void (**)(char *, uint64_t))(v207 + 8))(v201, v206);
    *(void *)(inited + 304) = 0;
    *(_OWORD *)(inited + 272) = 0u;
    *(_OWORD *)(inited + 288) = 0u;
  }
  else
  {
    uint64_t v210 = *(void (**)(uint64_t, uint64_t))(a58 + 24);
    *(void *)(inited + 296) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 304) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 272));
    v210(v208, a58);
    (*(void (**)(char *, uint64_t))(v209 + 8))(v201, v208);
    (*(void (**)(char *, uint64_t))(v316 + 8))(v401, v463);
  }
  uint64_t v211 = v464;
  uint64_t v212 = v362;
  uint64_t v213 = v419;
  uint64_t v214 = v418;
  uint64_t v215 = v402;
  uint64_t v463 = a63;
  uint64_t v216 = v447;
  *(void *)(inited + 312) = (*(uint64_t (**)(uint64_t))(v439 + 8))(v464);
  *(void *)(inited + 320) = v217;
  uint64_t v218 = &v215[*(int *)(v448 + 48)];
  ((void (*)(char *, char *, uint64_t))v319)(v215, v216, v211);
  v317(v218, v321, v213);
  (*(void (**)(char *, char *, uint64_t))(v214 + 32))(v212, v218, v213);
  uint64_t v219 = v371;
  uint64_t v220 = *(void *)(v371 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v220 + 48))(v212, 1, v371) == 1)
  {
    (*(void (**)(char *, uint64_t))(v324 + 8))(v215, v211);
    (*(void (**)(char *, uint64_t))(v214 + 8))(v212, v213);
    *(void *)(inited + 360) = 0;
    *(_OWORD *)(inited + 328) = 0u;
    *(_OWORD *)(inited + 344) = 0u;
  }
  else
  {
    uint64_t v221 = *(void (**)(uint64_t, uint64_t))(a60 + 24);
    *(void *)(inited + 352) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 360) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 328));
    v221(v219, a60);
    (*(void (**)(char *, uint64_t))(v220 + 8))(v212, v219);
    (*(void (**)(char *, uint64_t))(v324 + 8))(v402, v464);
  }
  uint64_t v222 = v441;
  uint64_t v223 = v370;
  uint64_t v224 = v403;
  uint64_t v464 = a65;
  uint64_t v225 = v449;
  *(void *)(inited + 368) = (*(uint64_t (**)(void *))(v440 + 8))(v441);
  *(void *)(inited + 376) = v226;
  uint64_t v227 = &v224[*(int *)(v450 + 48)];
  ((void (*)(char *, char *, void *))v327)(v224, v225, v222);
  uint64_t v228 = v421;
  v325(v227, v329, v421);
  uint64_t v229 = v420;
  (*(void (**)(char *, char *, uint64_t))(v420 + 32))(v223, v227, v228);
  uint64_t v230 = v372;
  uint64_t v231 = *(void *)(v372 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v231 + 48))(v223, 1, v372) == 1)
  {
    (*(void (**)(char *, void *))(v330 + 8))(v224, v222);
    (*(void (**)(char *, uint64_t))(v229 + 8))(v223, v228);
    *(void *)(inited + 416) = 0;
    *(_OWORD *)(inited + 384) = 0u;
    *(_OWORD *)(inited + 400) = 0u;
  }
  else
  {
    v441 = *(void **)(a62 + 24);
    *(void *)(inited + 408) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 416) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 384));
    ((void (*)(uint64_t, uint64_t))v441)(v230, a62);
    (*(void (**)(char *, uint64_t))(v231 + 8))(v223, v230);
    (*(void (**)(char *, void *))(v330 + 8))(v403, v222);
  }
  uint64_t v232 = v442;
  uint64_t v233 = v422;
  uint64_t v234 = v404;
  uint64_t v442 = a67;
  uint64_t v235 = v451;
  *(void *)(inited + 424) = (*(uint64_t (**)(uint64_t))(v463 + 8))(v232);
  *(void *)(inited + 432) = v236;
  uint64_t v237 = &v234[*(int *)(v452 + 48)];
  ((void (*)(char *, char *, uint64_t))v335)(v234, v235, v232);
  uint64_t v238 = v423;
  v333(v237, v337, v423);
  uint64_t v239 = v373;
  (*(void (**)(char *, char *, uint64_t))(v233 + 32))(v373, v237, v238);
  uint64_t v240 = v375;
  uint64_t v241 = *(void *)(v375 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v241 + 48))(v239, 1, v375) == 1)
  {
    (*(void (**)(char *, uint64_t))(v338 + 8))(v234, v232);
    (*(void (**)(char *, uint64_t))(v233 + 8))(v239, v238);
    *(void *)(inited + 472) = 0;
    *(_OWORD *)(inited + 440) = 0u;
    *(_OWORD *)(inited + 456) = 0u;
  }
  else
  {
    uint64_t v463 = *(void *)(a64 + 24);
    *(void *)(inited + 464) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 472) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 440));
    ((void (*)(uint64_t, uint64_t))v463)(v240, a64);
    (*(void (**)(char *, uint64_t))(v241 + 8))(v239, v240);
    (*(void (**)(char *, uint64_t))(v338 + 8))(v404, v232);
  }
  uint64_t v242 = v465;
  uint64_t v243 = v405;
  uint64_t v463 = a69;
  uint64_t v244 = v453;
  *(void *)(inited + 480) = (*(uint64_t (**)(uint64_t))(v464 + 8))(v465);
  *(void *)(inited + 488) = v245;
  uint64_t v246 = &v243[*(int *)(v454 + 48)];
  ((void (*)(char *, char *, uint64_t))v341)(v243, v244, v242);
  uint64_t v247 = v425;
  v339(v246, v343, v425);
  uint64_t v248 = v424;
  v249 = v376;
  (*(void (**)(char *, char *, uint64_t))(v424 + 32))(v376, v246, v247);
  uint64_t v250 = v383;
  uint64_t v251 = *(void *)(v383 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v251 + 48))(v249, 1, v383) == 1)
  {
    (*(void (**)(char *, uint64_t))(v347 + 8))(v243, v242);
    (*(void (**)(char *, uint64_t))(v248 + 8))(v249, v247);
    *(void *)(inited + 528) = 0;
    *(_OWORD *)(inited + 496) = 0u;
    *(_OWORD *)(inited + 512) = 0u;
  }
  else
  {
    uint64_t v252 = *(void (**)(uint64_t, uint64_t))(a66 + 24);
    *(void *)(inited + 520) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 528) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 496));
    v252(v250, a66);
    (*(void (**)(char *, uint64_t))(v251 + 8))(v249, v250);
    (*(void (**)(char *, uint64_t))(v347 + 8))(v405, v465);
  }
  uint64_t v253 = v466;
  uint64_t v254 = v432;
  uint64_t v465 = a71;
  uint64_t v255 = v455;
  *(void *)(inited + 536) = (*(uint64_t (**)(uint64_t *))(v442 + 8))(v466);
  *(void *)(inited + 544) = v256;
  uint64_t v257 = v374;
  uint64_t v258 = &v374[*(int *)(v456 + 48)];
  ((void (*)(char *, char *, uint64_t *))v350)(v374, v255, v253);
  uint64_t v259 = v433;
  v348(v258, v352, v433);
  uint64_t v260 = v386;
  (*(void (**)(char *, char *, uint64_t))(v254 + 32))(v386, v258, v259);
  uint64_t v261 = v392;
  uint64_t v262 = *(void *)(v392 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v262 + 48))(v260, 1, v392) == 1)
  {
    (*(void (**)(char *, uint64_t *))(v354 + 8))(v257, v253);
    (*(void (**)(char *, uint64_t))(v254 + 8))(v260, v259);
    *(void *)(inited + 584) = 0;
    *(_OWORD *)(inited + 552) = 0u;
    *(_OWORD *)(inited + 568) = 0u;
  }
  else
  {
    uint64_t v464 = *(void *)(a68 + 24);
    *(void *)(inited + 576) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 584) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 552));
    ((void (*)(uint64_t, uint64_t))v464)(v261, a68);
    (*(void (**)(char *, uint64_t))(v262 + 8))(v260, v261);
    (*(void (**)(char *, uint64_t *))(v354 + 8))(v257, v466);
  }
  uint64_t v263 = v434;
  uint64_t v264 = v457;
  uint64_t v265 = v467;
  *(void *)(inited + 592) = (*(uint64_t (**)(void *))(v463 + 8))(v467);
  *(void *)(inited + 600) = v266;
  uint64_t v267 = v379;
  uint64_t v268 = &v379[*(int *)(v458 + 48)];
  ((void (*)(char *, char *, void *))v358)(v379, v264, v265);
  uint64_t v269 = v435;
  v356(v268, v360, v435);
  uint64_t v270 = v394;
  (*(void (**)(char *, char *, uint64_t))(v263 + 32))(v394, v268, v269);
  uint64_t v271 = v395;
  uint64_t v272 = *(void *)(v395 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v272 + 48))(v270, 1, v395) == 1)
  {
    (*(void (**)(char *, void *))(v361 + 8))(v267, v265);
    (*(void (**)(char *, uint64_t))(v263 + 8))(v270, v269);
    *(void *)(inited + 640) = 0;
    *(_OWORD *)(inited + 608) = 0u;
    *(_OWORD *)(inited + 624) = 0u;
  }
  else
  {
    v466 = *(uint64_t **)(a70 + 24);
    *(void *)(inited + 632) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 640) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 608));
    ((void (*)(uint64_t, uint64_t))v466)(v271, a70);
    (*(void (**)(char *, uint64_t))(v272 + 8))(v270, v271);
    (*(void (**)(char *, void *))(v361 + 8))(v267, v467);
  }
  uint64_t v273 = v462;
  uint64_t v274 = v436;
  uint64_t v275 = v459;
  *(void *)(inited + 648) = (*(uint64_t (**)(uint64_t))(v465 + 8))(v462);
  *(void *)(inited + 656) = v276;
  uint64_t v277 = v389;
  uint64_t v278 = &v389[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, char *, uint64_t))v365)(v389, v275, v273);
  uint64_t v279 = v461;
  v363(v278, v367, v461);
  uint64_t v280 = v396;
  (*(void (**)(char *, char *, uint64_t))(v274 + 32))(v396, v278, v279);
  uint64_t v281 = v397;
  uint64_t v282 = *(void *)(v397 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v282 + 48))(v280, 1, v397) == 1)
  {
    (*(void (**)(char *, uint64_t))(v369 + 8))(v277, v273);
    (*(void (**)(char *, uint64_t))(v274 + 8))(v280, v279);
    *(void *)(inited + 696) = 0;
    *(_OWORD *)(inited + 664) = 0u;
    *(_OWORD *)(inited + 680) = 0u;
  }
  else
  {
    v466 = (uint64_t *)(inited + 664);
    v467 = *(void **)(a72 + 24);
    *(void *)(inited + 688) = swift_getAssociatedTypeWitness();
    *(void *)(inited + 696) = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1(v466);
    ((void (*)(uint64_t, uint64_t))v467)(v281, a72);
    (*(void (**)(char *, uint64_t))(v282 + 8))(v280, v281);
    (*(void (**)(char *, uint64_t))(v369 + 8))(v277, v273);
  }
  unint64_t v283 = sub_25A392B24(inited);
  uint64_t v284 = sub_25A44B160(v283);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v393 + 8))(v459, TupleTypeMetadata2);
  (*(void (**)(char *, uint64_t))(v391 + 8))(v457, v458);
  (*(void (**)(char *, uint64_t))(v390 + 8))(v455, v456);
  (*(void (**)(char *, uint64_t))(v388 + 8))(v453, v454);
  (*(void (**)(char *, uint64_t))(v387 + 8))(v451, v452);
  (*(void (**)(char *, uint64_t))(v385 + 8))(v449, v450);
  (*(void (**)(char *, uint64_t))(v384 + 8))(v447, v448);
  (*(void (**)(char *, uint64_t))(v382 + 8))(v445, v446);
  (*(void (**)(char *, uint64_t))(v381 + 8))(v443, v444);
  (*(void (**)(char *, uint64_t))(v380 + 8))(v430, v431);
  (*(void (**)(char *, uint64_t))(v378 + 8))(v428, v429);
  (*(void (**)(char *, uint64_t))(v377 + 8))(v426, v427);
  return v284;
}

uint64_t sub_25A45F8E4@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  sub_25A3937CC((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  *a2 = v4;
  a2[1] = v3;

  return swift_bridgeObjectRetain();
}

void sub_25A45F938(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(_OWORD *__return_ptr, id *, _OWORD *), uint64_t a6)
{
  uint64_t v8 = v6;
  uint64_t v48 = a6;
  uint64_t v10 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v11 = ~v10;
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v13 = -v10;
  uint64_t v41 = a1;
  uint64_t v42 = a1 + 64;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  else {
    uint64_t v14 = -1;
  }
  uint64_t v43 = v11;
  uint64_t v44 = 0;
  uint64_t v45 = v14 & v12;
  uint64_t v46 = a2;
  uint64_t v47 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_25A4092A8(&v39);
  uint64_t v15 = *((void *)&v39 + 1);
  if (!*((void *)&v39 + 1))
  {
LABEL_20:
    swift_release();
    swift_bridgeObjectRelease();
    sub_25A39C550();
    swift_release();
    return;
  }
  while (1)
  {
    uint64_t v21 = v39;
    uint64_t v37 = v39;
    uint64_t v38 = v15;
    sub_25A3936C4(&v40, v36);
    uint64_t v22 = *(void **)v8;
    unint64_t v24 = sub_25A409670(v21, v15);
    uint64_t v25 = v22[2];
    BOOL v26 = (v23 & 1) == 0;
    uint64_t v27 = v25 + v26;
    if (__OFADD__(v25, v26))
    {
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      sub_25A510430();
      __break(1u);
      goto LABEL_26;
    }
    char v28 = v23;
    if (v22[3] < v27) {
      break;
    }
    if (a4)
    {
      if (v23) {
        goto LABEL_16;
      }
    }
    else
    {
      sub_25A40E7F8();
      if (v28) {
        goto LABEL_16;
      }
    }
LABEL_6:
    unint64_t v16 = *(void **)v8;
    *(void *)(*(void *)v8 + 8 * (v24 >> 6) + 64) |= 1 << v24;
    uint64_t v17 = (uint64_t *)(v16[6] + 16 * v24);
    *uint64_t v17 = v21;
    v17[1] = v15;
    sub_25A3936C4(v36, (_OWORD *)(v16[7] + 32 * v24));
    uint64_t v18 = v16[2];
    BOOL v19 = __OFADD__(v18, 1);
    uint64_t v20 = v18 + 1;
    if (v19) {
      goto LABEL_24;
    }
    void v16[2] = v20;
LABEL_8:
    sub_25A4092A8(&v39);
    uint64_t v15 = *((void *)&v39 + 1);
    a4 = 1;
    if (!*((void *)&v39 + 1)) {
      goto LABEL_20;
    }
  }
  sub_25A40A614(v27, a4 & 1);
  unint64_t v29 = sub_25A409670(v21, v15);
  if ((v28 & 1) != (v30 & 1)) {
    goto LABEL_25;
  }
  unint64_t v24 = v29;
  if ((v28 & 1) == 0) {
    goto LABEL_6;
  }
LABEL_16:
  sub_25A3937CC(*(void *)(*(void *)v8 + 56) + 32 * v24, (uint64_t)v34);
  a5(v35, v34, v36);
  if (!v7)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
    swift_bridgeObjectRelease();
    uint64_t v31 = (_OWORD *)(*(void *)(*(void *)v8 + 56) + 32 * v24);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
    sub_25A3936C4(v35, v31);
    goto LABEL_8;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
  v34[0] = v7;
  id v32 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415838);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_release();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
    swift_bridgeObjectRelease();
    sub_25A39C550();
    swift_release();

    return;
  }
LABEL_26:
  *(void *)&v35[0] = 0;
  *((void *)&v35[0] + 1) = 0xE000000000000000;
  sub_25A50FDB0();
  sub_25A50EDA0();
  sub_25A50FFB0();
  sub_25A50EDA0();
  sub_25A510060();
  __break(1u);
}

uint64_t sub_25A45FCE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A415B00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_25A45FD4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t v4 = sub_25A50FA40();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
}

uint64_t sub_25A45FDE0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = -v7;
  uint64_t v40 = a1;
  uint64_t v41 = a1 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  else {
    uint64_t v11 = -1;
  }
  uint64_t v42 = v8;
  uint64_t v43 = 0;
  uint64_t v44 = v11 & v9;
  uint64_t v45 = a2;
  uint64_t v46 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_25A4092A8(&v38);
  uint64_t v12 = *((void *)&v38 + 1);
  if (!*((void *)&v38 + 1))
  {
LABEL_19:
    swift_release();
    swift_bridgeObjectRelease();
    sub_25A39C550();
    return swift_release();
  }
  while (1)
  {
    uint64_t v15 = v38;
    sub_25A3936C4(&v39, v37);
    unint64_t v16 = (void *)*a5;
    unint64_t v18 = sub_25A409670(v15, v12);
    uint64_t v19 = v16[2];
    BOOL v20 = (v17 & 1) == 0;
    uint64_t v21 = v19 + v20;
    if (__OFADD__(v19, v20)) {
      break;
    }
    char v22 = v17;
    if (v16[3] >= v21)
    {
      if (a4)
      {
        if (v17) {
          goto LABEL_6;
        }
      }
      else
      {
        sub_25A40E7F8();
        if (v22) {
          goto LABEL_6;
        }
      }
    }
    else
    {
      sub_25A40A614(v21, a4 & 1);
      unint64_t v23 = sub_25A409670(v15, v12);
      if ((v22 & 1) != (v24 & 1)) {
        goto LABEL_22;
      }
      unint64_t v18 = v23;
      if (v22)
      {
LABEL_6:
        uint64_t v13 = (void *)*a5;
        *(void *)&long long v31 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/Preview"
                          "sFoundation/PropertyList.swift";
        *((void *)&v31 + 1) = 124;
        char v32 = 2;
        long long v33 = xmmword_25A5181A0;
        uint64_t v34 = "confidentlyMerging(_:)";
        uint64_t v35 = 22;
        char v36 = 2;
        sub_25A403498();
        sub_25A3936C4(v37, &v31);
        swift_bridgeObjectRelease();
        uint64_t v14 = (_OWORD *)(v13[7] + 32 * v18);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
        sub_25A3936C4(&v31, v14);
        goto LABEL_7;
      }
    }
    uint64_t v25 = (void *)*a5;
    *(void *)(*a5 + 8 * (v18 >> 6) + 64) |= 1 << v18;
    BOOL v26 = (uint64_t *)(v25[6] + 16 * v18);
    *BOOL v26 = v15;
    v26[1] = v12;
    sub_25A3936C4(v37, (_OWORD *)(v25[7] + 32 * v18));
    uint64_t v27 = v25[2];
    BOOL v28 = __OFADD__(v27, 1);
    uint64_t v29 = v27 + 1;
    if (v28) {
      goto LABEL_21;
    }
    void v25[2] = v29;
LABEL_7:
    sub_25A4092A8(&v38);
    uint64_t v12 = *((void *)&v38 + 1);
    a4 = 1;
    if (!*((void *)&v38 + 1)) {
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = sub_25A510430();
  __break(1u);
  return result;
}

uint64_t sub_25A460078(uint64_t a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = a2;
  sub_25A45FDE0(a1, (uint64_t)sub_25A45F8E4, 0, isUniquelyReferenced_nonNull_native, &v8);
  uint64_t v6 = v8;
  swift_bridgeObjectRelease();
  if (v2) {
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t sub_25A46011C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v20 = a7;
  uint64_t v21 = a1;
  uint64_t v15 = a2;
  uint64_t v16 = a3;
  uint64_t v17 = a4;
  uint64_t v18 = a5;
  uint64_t v19 = a6;
  void v13[2] = a2;
  v13[3] = a3;
  v13[4] = a4;
  v13[5] = a5;
  void v13[6] = a6;
  v13[7] = a7;
  v13[8] = sub_25A461A98;
  v13[9] = &v14;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v10 = sub_25A50E990();
  uint64_t WitnessTable = swift_getWitnessTable();
  return Sequence.keyedMap<A, B>(_:)((uint64_t)sub_25A461AC8, (uint64_t)v13, v10, a2, a3, WitnessTable, a5);
}

uint64_t sub_25A46025C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v9[2] = a1;
  v8[2] = a2;
  v8[3] = a3;
  swift_getAssociatedTypeWitness();
  uint64_t v4 = sub_25A50F1E0();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A415838);
  uint64_t WitnessTable = swift_getWitnessTable();
  return sub_25A39F5D4((void (*)(char *, char *))sub_25A461B04, (uint64_t)v8, v4, a2, v5, WitnessTable, MEMORY[0x263F8E4E0], (uint64_t)v9);
}

uint64_t sub_25A460344(uint64_t *a1)
{
  uint64_t v2 = *a1;
  v6[3] = &_s3KeyON_1;
  v6[4] = &off_270832E78;
  uint64_t v3 = sub_25A3E6668(v6, v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  swift_bridgeObjectRelease();
  if (!v1)
  {
    if (*(void *)(v3 + 16) == 8)
    {
      uint64_t v2 = *(void *)(v3 + 32);
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_25A4619D8();
      swift_allocError();
      *uint64_t v4 = v3;
      swift_willThrow();
    }
  }
  return v2;
}

double sub_25A460418(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v7 = &_s3KeyON_0;
  uint64_t v8 = &off_270832E68;
  LOBYTE(v6[0]) = 0;
  swift_bridgeObjectRetain();
  double v4 = sub_25A3E6510(v6, v3);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    double v2 = v4;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
    uint64_t v7 = &_s3KeyON_0;
    uint64_t v8 = &off_270832E68;
    LOBYTE(v6[0]) = 1;
    sub_25A3E6510(v6, v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
    swift_bridgeObjectRelease();
    uint64_t v7 = &_s3KeyON;
    uint64_t v8 = &off_270832E58;
    LOBYTE(v6[0]) = 0;
    sub_25A3E6510(v6, v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
    uint64_t v7 = &_s3KeyON;
    uint64_t v8 = &off_270832E58;
    LOBYTE(v6[0]) = 1;
    sub_25A3E6510(v6, v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
    swift_bridgeObjectRelease();
  }
  return v2;
}

double sub_25A46057C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v10 = a2;
  uint64_t v11 = a3;
  LOBYTE(v9[0]) = 0;
  double v7 = sub_25A3E6510(v9, v6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  if (!v3)
  {
    uint64_t v10 = a2;
    uint64_t v11 = a3;
    LOBYTE(v9[0]) = 1;
    sub_25A3E6510(v9, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_25A460634(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = -v7;
  uint64_t v40 = a1;
  uint64_t v41 = a1 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  else {
    uint64_t v11 = -1;
  }
  uint64_t v42 = v8;
  uint64_t v43 = 0;
  uint64_t v44 = v11 & v9;
  uint64_t v45 = a2;
  uint64_t v46 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_25A4092A8(&v38);
  uint64_t v12 = *((void *)&v38 + 1);
  if (!*((void *)&v38 + 1))
  {
LABEL_19:
    swift_release();
    swift_bridgeObjectRelease();
    sub_25A39C550();
    return swift_release();
  }
  while (1)
  {
    uint64_t v15 = v38;
    sub_25A3936C4(&v39, v37);
    uint64_t v16 = (void *)*a5;
    unint64_t v18 = sub_25A409670(v15, v12);
    uint64_t v19 = v16[2];
    BOOL v20 = (v17 & 1) == 0;
    uint64_t v21 = v19 + v20;
    if (__OFADD__(v19, v20)) {
      break;
    }
    char v22 = v17;
    if (v16[3] >= v21)
    {
      if (a4)
      {
        if (v17) {
          goto LABEL_6;
        }
      }
      else
      {
        sub_25A40E7F8();
        if (v22) {
          goto LABEL_6;
        }
      }
    }
    else
    {
      sub_25A40A614(v21, a4 & 1);
      unint64_t v23 = sub_25A409670(v15, v12);
      if ((v22 & 1) != (v24 & 1)) {
        goto LABEL_22;
      }
      unint64_t v18 = v23;
      if (v22)
      {
LABEL_6:
        uint64_t v13 = (void *)*a5;
        *(void *)&long long v31 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/Preview"
                          "sFoundation/PropertyList.swift";
        *((void *)&v31 + 1) = 124;
        char v32 = 2;
        long long v33 = xmmword_25A5181B0;
        uint64_t v34 = "confidentlyMerge(_:)";
        uint64_t v35 = 20;
        char v36 = 2;
        sub_25A403498();
        sub_25A3936C4(v37, &v31);
        swift_bridgeObjectRelease();
        char v14 = (_OWORD *)(v13[7] + 32 * v18);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
        sub_25A3936C4(&v31, v14);
        goto LABEL_7;
      }
    }
    uint64_t v25 = (void *)*a5;
    *(void *)(*a5 + 8 * (v18 >> 6) + 64) |= 1 << v18;
    BOOL v26 = (uint64_t *)(v25[6] + 16 * v18);
    *BOOL v26 = v15;
    v26[1] = v12;
    sub_25A3936C4(v37, (_OWORD *)(v25[7] + 32 * v18));
    uint64_t v27 = v25[2];
    BOOL v28 = __OFADD__(v27, 1);
    uint64_t v29 = v27 + 1;
    if (v28) {
      goto LABEL_21;
    }
    void v25[2] = v29;
LABEL_7:
    sub_25A4092A8(&v38);
    uint64_t v12 = *((void *)&v38 + 1);
    a4 = 1;
    if (!*((void *)&v38 + 1)) {
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = sub_25A510430();
  __break(1u);
  return result;
}

uint64_t sub_25A4608CC()
{
  return sub_25A4608E4();
}

uint64_t sub_25A4608E4()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 24) + 24))(*(void *)(v0 + 16));
}

uint64_t sub_25A460928(uint64_t a1, void *a2)
{
  return sub_25A44E464(a1, v2[2], v2[3], v2[4], a2);
}

uint64_t sub_25A46094C()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[6];
  (*(void (**)(void))(v0[4] + 24))(v0[2]);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
}

uint64_t sub_25A4609D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 64);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return v7(a1, a2, a3, a3 + *(int *)(TupleTypeMetadata2 + 48));
}

unint64_t sub_25A460A48()
{
  unint64_t result = qword_26A419590;
  if (!qword_26A419590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A419590);
  }
  return result;
}

_UNKNOWN **sub_25A460A9C()
{
  return &protocol witness table for Int;
}

_UNKNOWN **sub_25A460AA8()
{
  return &protocol witness table for UInt;
}

_UNKNOWN **sub_25A460AB4()
{
  return &protocol witness table for UInt8;
}

_UNKNOWN **sub_25A460AC0()
{
  return &protocol witness table for UInt32;
}

_UNKNOWN **sub_25A460ACC()
{
  return &protocol witness table for UInt64;
}

_UNKNOWN **sub_25A460AD8()
{
  return &protocol witness table for String;
}

_UNKNOWN **sub_25A460AE4()
{
  return &protocol witness table for Data;
}

_UNKNOWN **sub_25A460AF0()
{
  return &protocol witness table for Bool;
}

_UNKNOWN **sub_25A460AFC()
{
  return &protocol witness table for Float;
}

_UNKNOWN **sub_25A460B08()
{
  return &protocol witness table for Double;
}

_UNKNOWN **sub_25A460B14()
{
  return &protocol witness table for CGFloat;
}

_UNKNOWN **sub_25A460B20()
{
  return &protocol witness table for Int32;
}

_UNKNOWN **sub_25A460B2C()
{
  return &protocol witness table for Date;
}

_UNKNOWN **sub_25A460B38()
{
  return &protocol witness table for NSString;
}

_UNKNOWN **sub_25A460B44()
{
  return &protocol witness table for NSNumber;
}

_UNKNOWN **sub_25A460B50()
{
  return &protocol witness table for NSData;
}

_UNKNOWN **sub_25A460B5C()
{
  return &protocol witness table for PropertyList;
}

uint64_t sub_25A460B6C()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A460BD4()
{
  return swift_getWitnessTable();
}

uint64_t dispatch thunk of PropertyListRepresentable.propertyListValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of PropertyListRepresentable.init(propertyListValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of PropertyListKey.rawValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

ValueMetadata *type metadata accessor for PropertyList()
{
  return &type metadata for PropertyList;
}

ValueMetadata *type metadata accessor for PropertyListBuilder()
{
  return &type metadata for PropertyListBuilder;
}

ValueMetadata *type metadata accessor for InvalidUUID()
{
  return &type metadata for InvalidUUID;
}

uint64_t destroy for PropertyListError(uint64_t a1)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 112);
  if (v2 >= 4) {
    unsigned int v2 = *(_DWORD *)a1 + 4;
  }
  switch(v2)
  {
    case 1u:
    case 2u:
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1(a1 + 8);
      __swift_destroy_boxed_opaque_existential_1(a1 + 48);
      uint64_t v3 = a1 + 80;
      break;
    case 3u:
      __swift_destroy_boxed_opaque_existential_1(a1);
      uint64_t v3 = a1 + 32;
      break;
    default:
      uint64_t v3 = a1 + 8;
      swift_bridgeObjectRelease();
      break;
  }
  return __swift_destroy_boxed_opaque_existential_1(v3);
}

uint64_t initializeWithCopy for PropertyListError(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a2 + 112);
  if (v4 >= 4) {
    unsigned int v4 = *(_DWORD *)a2 + 4;
  }
  switch(v4)
  {
    case 1u:
      *(void *)a1 = *(void *)a2;
      long long v17 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 32) = v17;
      uint64_t v18 = v17;
      uint64_t v19 = **(void (***)(uint64_t, uint64_t, uint64_t))(v17 - 8);
      swift_bridgeObjectRetain();
      v19(a1 + 8, a2 + 8, v18);
      uint64_t v20 = *(void *)(a2 + 72);
      *(void *)(a1 + 72) = v20;
      (**(void (***)(uint64_t, uint64_t))(v20 - 8))(a1 + 48, a2 + 48);
      uint64_t v21 = *(void *)(a2 + 104);
      *(void *)(a1 + 104) = v21;
      (**(void (***)(uint64_t, uint64_t))(v21 - 8))(a1 + 80, a2 + 80);
      char v9 = 1;
      break;
    case 2u:
      *(void *)a1 = *(void *)a2;
      long long v10 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 32) = v10;
      uint64_t v11 = v10;
      uint64_t v12 = **(void (***)(uint64_t, uint64_t, uint64_t))(v10 - 8);
      swift_bridgeObjectRetain();
      v12(a1 + 8, a2 + 8, v11);
      uint64_t v13 = *(void *)(a2 + 72);
      *(void *)(a1 + 72) = v13;
      (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 48, a2 + 48);
      uint64_t v14 = *(void *)(a2 + 104);
      *(void *)(a1 + 104) = v14;
      (**(void (***)(uint64_t, uint64_t))(v14 - 8))(a1 + 80, a2 + 80);
      char v9 = 2;
      break;
    case 3u:
      uint64_t v15 = *(void *)(a2 + 24);
      *(void *)(a1 + 24) = v15;
      (**(void (***)(uint64_t, uint64_t))(v15 - 8))(a1, a2);
      uint64_t v16 = *(void *)(a2 + 56);
      *(void *)(a1 + 56) = v16;
      (**(void (***)(uint64_t, uint64_t))(v16 - 8))(a1 + 32, a2 + 32);
      char v9 = 3;
      break;
    default:
      *(void *)a1 = *(void *)a2;
      uint64_t v5 = a2 + 8;
      long long v6 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 32) = v6;
      uint64_t v7 = v6;
      uint64_t v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
      swift_bridgeObjectRetain();
      v8(a1 + 8, v5, v7);
      char v9 = 0;
      break;
  }
  *(unsigned char *)(a1 + 112) = v9;
  return a1;
}

uint64_t assignWithCopy for PropertyListError(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 112);
    if (v4 >= 4) {
      unsigned int v4 = *(_DWORD *)a1 + 4;
    }
    switch(v4)
    {
      case 1u:
      case 2u:
        uint64_t v5 = a1 + 80;
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1(a1 + 8);
        __swift_destroy_boxed_opaque_existential_1(a1 + 48);
        break;
      case 3u:
        __swift_destroy_boxed_opaque_existential_1(a1);
        uint64_t v5 = a1 + 32;
        break;
      default:
        uint64_t v5 = a1 + 8;
        swift_bridgeObjectRelease();
        break;
    }
    __swift_destroy_boxed_opaque_existential_1(v5);
    unsigned int v6 = *(unsigned __int8 *)(a2 + 112);
    if (v6 >= 4) {
      unsigned int v6 = *(_DWORD *)a2 + 4;
    }
    switch(v6)
    {
      case 1u:
        *(void *)a1 = *(void *)a2;
        uint64_t v11 = *(void *)(a2 + 32);
        *(void *)(a1 + 32) = v11;
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        uint64_t v12 = **(void (***)(uint64_t, uint64_t, uint64_t))(v11 - 8);
        swift_bridgeObjectRetain();
        v12(a1 + 8, a2 + 8, v11);
        uint64_t v13 = *(void *)(a2 + 72);
        *(void *)(a1 + 72) = v13;
        (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 48, a2 + 48);
        uint64_t v14 = *(void *)(a2 + 104);
        *(void *)(a1 + 104) = v14;
        (**(void (***)(uint64_t, uint64_t))(v14 - 8))(a1 + 80, a2 + 80);
        char v10 = 1;
        break;
      case 2u:
        *(void *)a1 = *(void *)a2;
        uint64_t v15 = *(void *)(a2 + 32);
        *(void *)(a1 + 32) = v15;
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        uint64_t v16 = **(void (***)(uint64_t, uint64_t, uint64_t))(v15 - 8);
        swift_bridgeObjectRetain();
        v16(a1 + 8, a2 + 8, v15);
        uint64_t v17 = *(void *)(a2 + 72);
        *(void *)(a1 + 72) = v17;
        (**(void (***)(uint64_t, uint64_t))(v17 - 8))(a1 + 48, a2 + 48);
        uint64_t v18 = *(void *)(a2 + 104);
        *(void *)(a1 + 104) = v18;
        (**(void (***)(uint64_t, uint64_t))(v18 - 8))(a1 + 80, a2 + 80);
        char v10 = 2;
        break;
      case 3u:
        uint64_t v19 = *(void *)(a2 + 24);
        *(void *)(a1 + 24) = v19;
        (**(void (***)(uint64_t, uint64_t))(v19 - 8))(a1, a2);
        uint64_t v20 = *(void *)(a2 + 56);
        *(void *)(a1 + 56) = v20;
        (**(void (***)(uint64_t, uint64_t))(v20 - 8))(a1 + 32, a2 + 32);
        char v10 = 3;
        break;
      default:
        *(void *)a1 = *(void *)a2;
        uint64_t v7 = a2 + 8;
        uint64_t v8 = *(void *)(a2 + 32);
        *(void *)(a1 + 32) = v8;
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        char v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8);
        swift_bridgeObjectRetain();
        v9(a1 + 8, v7, v8);
        char v10 = 0;
        break;
    }
    *(unsigned char *)(a1 + 112) = v10;
  }
  return a1;
}

__n128 __swift_memcpy113_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(unsigned char *)(a1 + 112) = *((unsigned char *)a2 + 112);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for PropertyListError(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 112);
    if (v4 >= 4) {
      unsigned int v4 = *(_DWORD *)a1 + 4;
    }
    switch(v4)
    {
      case 1u:
      case 2u:
        uint64_t v5 = a1 + 80;
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1(a1 + 8);
        __swift_destroy_boxed_opaque_existential_1(a1 + 48);
        break;
      case 3u:
        __swift_destroy_boxed_opaque_existential_1(a1);
        uint64_t v5 = a1 + 32;
        break;
      default:
        uint64_t v5 = a1 + 8;
        swift_bridgeObjectRelease();
        break;
    }
    __swift_destroy_boxed_opaque_existential_1(v5);
    unsigned int v6 = *(unsigned __int8 *)(a2 + 112);
    if (v6 >= 4) {
      unsigned int v6 = *(_DWORD *)a2 + 4;
    }
    switch(v6)
    {
      case 1u:
        long long v9 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 80) = v9;
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
        long long v10 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v10;
        long long v12 = *(_OWORD *)(a2 + 32);
        long long v11 = *(_OWORD *)(a2 + 48);
        char v7 = 1;
        goto LABEL_14;
      case 2u:
        long long v13 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 80) = v13;
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
        long long v14 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v14;
        long long v12 = *(_OWORD *)(a2 + 32);
        long long v11 = *(_OWORD *)(a2 + 48);
        char v7 = 2;
LABEL_14:
        *(_OWORD *)(a1 + 32) = v12;
        *(_OWORD *)(a1 + 48) = v11;
        break;
      case 3u:
        long long v15 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v15;
        long long v16 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v16;
        char v7 = 3;
        break;
      default:
        char v7 = 0;
        long long v8 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        break;
    }
    *(unsigned char *)(a1 + 112) = v7;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for PropertyListError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 113)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 112);
  if (v3 >= 4) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for PropertyListError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 112) = 0;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_DWORD *)__n128 result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 113) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 113) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 112) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_25A461738(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 112);
  if (result >= 4) {
    return (*(_DWORD *)a1 + 4);
  }
  return result;
}

uint64_t sub_25A461754(uint64_t result, unsigned int a2)
{
  if (a2 > 3)
  {
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    unsigned int v2 = a2 - 4;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    LOBYTE(a2) = 4;
    *(_DWORD *)uint64_t result = v2;
  }
  *(unsigned char *)(result + 112) = a2;
  return result;
}

ValueMetadata *type metadata accessor for PropertyListError()
{
  return &type metadata for PropertyListError;
}

uint64_t sub_25A461798(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25A461DE8(a1, a2, a3, (uint64_t (*)(void))sub_25A4617C4, (uint64_t (*)(void))sub_25A461818);
}

unint64_t sub_25A4617C4()
{
  unint64_t result = qword_26A419598;
  if (!qword_26A419598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A419598);
  }
  return result;
}

unint64_t sub_25A461818()
{
  unint64_t result = qword_26A4195A0;
  if (!qword_26A4195A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4195A0);
  }
  return result;
}

uint64_t sub_25A46186C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_25A4618A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A44DB8C(a1, *(void (**)(uint64_t, uint64_t *))(v2 + 56), *(void *)(v2 + 64), *(void *)(v2 + 24), a2);
}

uint64_t sub_25A4618D0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_25A44D86C(a1, *(void *)(v2 + 24), a2);
}

uint64_t sub_25A4618F4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_25A44D478(a1, *(uint64_t (**)(uint64_t, uint64_t *))(v3 + 32), *(void *)(v3 + 40), *(void *)(v3 + 16), a2, a3);
}

unint64_t sub_25A461918()
{
  unint64_t result = qword_26A4195B8;
  if (!qword_26A4195B8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A4195B0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4195B8);
  }
  return result;
}

uint64_t sub_25A461974@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_25A44D148(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_25A461994()
{
  sub_25A3ECD84(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));

  return MEMORY[0x270FA0238](v0, 41, 7);
}

unint64_t sub_25A4619D8()
{
  unint64_t result = qword_26A4195D8;
  if (!qword_26A4195D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4195D8);
  }
  return result;
}

unint64_t sub_25A461A2C()
{
  unint64_t result = qword_26A4195E0;
  if (!qword_26A4195E0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A417748);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4195E0);
  }
  return result;
}

uint64_t sub_25A461A98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_25A44E770(a1, a2, a3, a4, v4[2], v4[3], v4[4], v4[5], v4[6]);
}

uint64_t sub_25A461AC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25A44E9B8(a1, a2, a3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 64));
}

uint64_t sub_25A461B04(uint64_t a1, void *a2)
{
  return sub_25A44E08C(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_25A461B24()
{
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);

  return MEMORY[0x270FA0238](v0, 64, 7);
}

ValueMetadata *_s3KeyOMa()
{
  return &_s3KeyON;
}

unsigned char *_s3KeyOwst_1(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25A461C44);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *_s3KeyOMa_0()
{
  return &_s3KeyON_0;
}

ValueMetadata *type metadata accessor for InvalidAuditTokenDeserialization()
{
  return &type metadata for InvalidAuditTokenDeserialization;
}

unsigned char *_s3KeyOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x25A461D28);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *_s3KeyOMa_1()
{
  return &_s3KeyON_1;
}

unint64_t sub_25A461D64()
{
  unint64_t result = qword_26A4195E8;
  if (!qword_26A4195E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4195E8);
  }
  return result;
}

uint64_t sub_25A461DBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25A461DE8(a1, a2, a3, (uint64_t (*)(void))sub_25A461E24, (uint64_t (*)(void))sub_25A461E78);
}

uint64_t sub_25A461DE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  *(void *)(a1 + 8) = a4();
  uint64_t result = a5();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_25A461E24()
{
  unint64_t result = qword_26A4195F0;
  if (!qword_26A4195F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4195F0);
  }
  return result;
}

unint64_t sub_25A461E78()
{
  unint64_t result = qword_26A4195F8;
  if (!qword_26A4195F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4195F8);
  }
  return result;
}

unint64_t sub_25A461ED0()
{
  unint64_t result = qword_26A419600;
  if (!qword_26A419600)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A419600);
  }
  return result;
}

unint64_t sub_25A461F28()
{
  unint64_t result = qword_26A419608;
  if (!qword_26A419608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A419608);
  }
  return result;
}

void *sub_25A461F7C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_25A385038(a1, a2);
}

_DWORD *sub_25A461F94@<X0>(_DWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_25A44A9FC(a1, a2);
}

uint64_t AsyncObservableEvent.init(file:line:column:function:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t *a9@<X8>)
{
  uint64_t v14 = type metadata accessor for AsyncObservableEvent.Observer();
  type metadata accessor for ObserverAndTokenStorage();
  type metadata accessor for FulfillOnceState();
  sub_25A3CCCF8(v14, (uint64_t)v30);
  v29[0] = v30[0];
  v29[1] = v30[1];
  v29[2] = v30[2];
  v22[0] = a1;
  v22[1] = a2;
  char v23 = a3;
  uint64_t v24 = a4;
  uint64_t v25 = a5;
  uint64_t v26 = a6;
  uint64_t v27 = a7;
  char v28 = a8;
  long long v21 = xmmword_25A511960;
  uint64_t v15 = sub_25A3B275C((uint64_t)v29, v22, 0, 0, (uint64_t *)&v21, 0xD000000000000016, 0x800000025A520370, 0x6465726966, 0xE500000000000000);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a9 = v15;
  return result;
}

uint64_t type metadata accessor for AsyncObservableEvent.Observer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t AsyncObservableEvent.fire(file:line:column:function:with:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  *(void *)(v9 + 232) = a7;
  *(void *)(v9 + 240) = v16;
  *(unsigned char *)(v9 + 74) = a8;
  *(void *)(v9 + 216) = a5;
  *(void *)(v9 + 224) = a6;
  *(void *)(v9 + 200) = a2;
  *(void *)(v9 + 208) = a4;
  *(unsigned char *)(v9 + 73) = a3;
  *(void *)(v9 + 192) = a1;
  uint64_t v10 = *(void *)(v17 + 16);
  *(void *)(v9 + 248) = v10;
  *(void *)(v9 + 256) = *(void *)(v10 - 8);
  *(void *)(v9 + 264) = swift_task_alloc();
  *(void *)(v9 + 272) = type metadata accessor for AsyncObservableEvent.Observer();
  *(void *)(v9 + 280) = type metadata accessor for ObserverAndTokenStorage();
  uint64_t v11 = type metadata accessor for FulfillOnceState.FulfillmentOutcome();
  *(void *)(v9 + 288) = v11;
  *(void *)(v9 + 296) = *(void *)(v11 - 8);
  *(void *)(v9 + 304) = swift_task_alloc();
  uint64_t v12 = swift_task_alloc();
  uint64_t v13 = *v8;
  *(void *)(v9 + 312) = v12;
  *(void *)(v9 + 320) = v13;
  return MEMORY[0x270FA2498](sub_25A4622C0, 0, 0);
}

uint64_t sub_25A4622C0()
{
  uint64_t v40 = v0;
  uint64_t v1 = v0;
  *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 192);
  uint64_t v2 = v0 + 80;
  long long v3 = *(_OWORD *)(v0 + 224);
  *(_OWORD *)(v0 + 104) = *(_OWORD *)(v0 + 208);
  uint64_t v4 = *(void *)(v0 + 312);
  uint64_t v5 = *(void *)(v0 + 296);
  uint64_t v6 = *(void *)(v2 + 224);
  uint64_t v37 = *(void *)(v2 + 208);
  uint64_t v7 = *(void *)(v2 + 160);
  uint64_t v8 = *(void *)(v2 + 168);
  char v9 = *(unsigned char *)(v2 - 6);
  *(unsigned char *)(v2 + 16) = *(unsigned char *)(v2 - 7);
  *(_OWORD *)(v2 + 40) = v3;
  *(unsigned char *)(v2 + 56) = v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v10 + 16) = v8;
  *(void *)(v10 + 24) = v7;
  uint64_t v11 = swift_task_alloc();
  *(void *)(v11 + 16) = v8;
  FulfillOnceState.fulfill(callsite:makeFulfilledState:ifAlreadyFulfilled:)((long long *)v2, (uint64_t)sub_25A463A10, v10, (uint64_t)sub_25A463A40, v11);
  swift_task_dealloc();
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v6, v4, v37);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48))(v6, 1, TupleTypeMetadata2) != 1)
  {
    uint64_t v18 = *(long long **)(v1 + 304);
    long long v38 = *v18;
    uint64_t v19 = (void *)*((void *)v18 + 2);
    (*(void (**)(void, uint64_t, void))(*(void *)(v1 + 256) + 32))(*(void *)(v1 + 264), (uint64_t)v18 + *(int *)(TupleTypeMetadata2 + 48), *(void *)(v1 + 248));
    uint64_t v20 = v19[2];
    uint64_t v21 = v1;
    if (v20)
    {
      *(void *)(v1 + 16) = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/Prev"
                             "iewsFoundation/AsyncObservableEvent.swift";
      *(void *)(v1 + 24) = 132;
      *(unsigned char *)(v1 + 32) = 2;
      *(_OWORD *)(v1 + 40) = xmmword_25A518B10;
      *(void *)(v1 + 56) = "fire(file:line:column:function:with:)";
      *(void *)(v1 + 64) = 37;
      *(unsigned char *)(v1 + 72) = 2;
      uint64_t v35 = (void (*)(uint64_t))v19[4];
      uint64_t v22 = v19[6];
      swift_bridgeObjectRetain_n();
      char v36 = v19;
      uint64_t v23 = *(void *)(v22 + 144);
      uint64_t v24 = (void *)swift_task_alloc();
      uint64_t v24[2] = nullsub_1;
      void v24[3] = 0;
      v24[4] = v2 - 64;
      v24[5] = v22;
      v24[6] = sub_25A3B1EC4;
      v24[7] = 0;
      swift_retain();
      swift_retain();
      swift_retain();
      os_unfair_lock_lock((os_unfair_lock_t)(v23 + 76));
      sub_25A3B8530((long long *)(v23 + 16), v39);
      uint64_t v34 = v21;
      os_unfair_lock_unlock((os_unfair_lock_t)(v23 + 76));
      swift_release();
      uint64_t v25 = swift_task_dealloc();
      if ((v39[0] & 1) == 0) {
        v35(v25);
      }
      swift_release();
      swift_release();
      uint64_t v26 = v20 - 1;
      uint64_t v27 = v2 - 64;
      if (v20 != 1)
      {
        char v28 = v36 + 9;
        do
        {
          uint64_t v29 = (void (*)(uint64_t))*(v28 - 2);
          uint64_t v30 = *v28;
          uint64_t v31 = *(void *)(*v28 + 144);
          char v32 = (void *)swift_task_alloc();
          long long v32[2] = nullsub_1;
          uint64_t v32[3] = 0;
          v32[4] = v27;
          v32[5] = v30;
          v32[6] = sub_25A3B1EC4;
          v32[7] = 0;
          swift_retain();
          swift_retain();
          swift_retain();
          os_unfair_lock_lock((os_unfair_lock_t)(v31 + 76));
          sub_25A3B8530((long long *)(v31 + 16), v39);
          os_unfair_lock_unlock((os_unfair_lock_t)(v31 + 76));
          swift_release();
          uint64_t v33 = swift_task_dealloc();
          if ((v39[0] & 1) == 0) {
            v29(v33);
          }
          swift_release();
          swift_release();
          v28 += 3;
          --v26;
          uint64_t v27 = v2 - 64;
        }
        while (v26);
      }
      swift_bridgeObjectRelease_n();
      uint64_t v21 = v34;
    }
    swift_bridgeObjectRelease();
    *(_OWORD *)(v21 + 144) = v38;
    *(void *)(v21 + 160) = 0;
    sub_25A3CE5CC();
    *(void *)(v21 + 328) = type metadata accessor for OrderedDictionary();
    OrderedDictionary.endIndex.getter();
  }
  uint64_t v13 = *(void *)(v1 + 304);
  uint64_t v14 = *(void *)(v1 + 288);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(*(void *)(v1 + 296) + 8);
  v15(*(void *)(v1 + 312), v14);
  v15(v13, v14);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = *(uint64_t (**)(void))(v1 + 8);
  return v16();
}

uint64_t sub_25A4628C0()
{
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x270FA2498](sub_25A4629D8, 0, 0);
}

void sub_25A4629D8()
{
}

uint64_t AsyncObservableEvent.observe(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *v3;
  v4[6] = a3;
  v4[7] = v8;
  v4[5] = v8;
  char v9 = (void *)swift_task_alloc();
  v4[8] = v9;
  *char v9 = v4;
  v9[1] = sub_25A462C94;
  return AsyncObservableEvent.addCancelableObserver(_:)((uint64_t)(v4 + 2), a1, a2, a3);
}

uint64_t sub_25A462C94()
{
  swift_task_dealloc();
  return MEMORY[0x270FA2498](sub_25A462D90, 0, 0);
}

uint64_t sub_25A462D90()
{
  uint64_t v8 = v0;
  uint64_t v1 = v0[2];
  if (v1)
  {
    uint64_t v2 = v0[6];
    uint64_t v4 = v0[3];
    uint64_t v3 = v0[4];
    v7[0] = v0[2];
    v7[1] = v4;
    long long v7[2] = v3;
    sub_25A46347C((uint64_t)v7, v2);
    sub_25A3901A8(v1);
  }
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t AsyncObservableEvent.addCancelableObserver(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[11] = a2;
  v5[12] = a3;
  v5[10] = a1;
  uint64_t v6 = *(void *)(a4 + 16);
  v5[13] = v6;
  v5[14] = *(void *)(v6 - 8);
  v5[15] = swift_task_alloc();
  type metadata accessor for AsyncObservableEvent.Observer();
  type metadata accessor for ObserverAndTokenStorage();
  uint64_t updated = type metadata accessor for FulfillOnceState.WaitingStateUpdateResult();
  unsigned char v5[16] = updated;
  v5[17] = *(void *)(updated - 8);
  v5[18] = swift_task_alloc();
  uint64_t v8 = swift_task_alloc();
  uint64_t v9 = *v4;
  v5[19] = v8;
  v5[20] = v9;
  return MEMORY[0x270FA2498](sub_25A462F9C, 0, 0);
}

uint64_t sub_25A462F9C()
{
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v3 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 128);
  uint64_t v5 = *(void *)(v0 + 104);
  uint64_t v6 = swift_task_alloc();
  long long v7 = *(_OWORD *)(v0 + 88);
  *(void *)(v6 + 16) = v5;
  *(_OWORD *)(v6 + 24) = v7;
  FulfillOnceState.updateWaitingState<A>(update:)((uint64_t)sub_25A463A5C, v6, (uint64_t)&type metadata for Identifier);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v9 = *(void *)(v0 + 104);
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v10 = *(int **)(v0 + 88);
    (*(void (**)(void, void, void))(*(void *)(v0 + 112) + 32))(*(void *)(v0 + 120), *(void *)(v0 + 144), *(void *)(v0 + 104));
    uint64_t v23 = (uint64_t (*)(uint64_t))((char *)v10 + *v10);
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 168) = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_25A4632C0;
    uint64_t v12 = *(void *)(v0 + 120);
    return v23(v12);
  }
  else
  {
    uint64_t v14 = *(void *)(v0 + 152);
    uint64_t v15 = *(void *)(v0 + 136);
    uint64_t v16 = *(void *)(v0 + 128);
    uint64_t v17 = **(void **)(v0 + 144);
    uint64_t v18 = swift_allocObject();
    swift_weakInit();
    uint64_t v19 = (uint64_t (*)())swift_allocObject();
    *((void *)v19 + 2) = v9;
    *((void *)v19 + 3) = v18;
    *((void *)v19 + 4) = v17;
    *(void *)(v0 + 16) = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/Previe"
                           "wsFoundation/AsyncObservableEvent.swift";
    *(void *)(v0 + 24) = 132;
    *(unsigned char *)(v0 + 32) = 2;
    *(_OWORD *)(v0 + 40) = xmmword_25A518B20;
    *(void *)(v0 + 56) = "addCancelableObserver(_:)";
    *(void *)(v0 + 64) = 25;
    *(unsigned char *)(v0 + 72) = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A416708);
    swift_allocObject();
    uint64_t v20 = sub_25A3B7704((_OWORD *)(v0 + 16), 0, 0, 1, 0, 0xD000000000000011, 0x800000025A51E350, 0x64656C65636E6163, 0xE800000000000000);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    uint64_t v21 = *(uint64_t (***)())(v0 + 80);
    *uint64_t v21 = sub_25A463AD8;
    v21[1] = v19;
    _OWORD v21[2] = (uint64_t (*)())v20;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
    return v22();
  }
}

uint64_t sub_25A4632C0()
{
  swift_task_dealloc();
  return MEMORY[0x270FA2498](sub_25A4633BC, 0, 0);
}

uint64_t sub_25A4633BC()
{
  uint64_t v1 = v0[19];
  uint64_t v2 = v0[16];
  uint64_t v3 = v0[17];
  (*(void (**)(void, void))(v0[14] + 8))(v0[15], v0[13]);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  uint64_t v4 = (void *)v0[10];
  *uint64_t v4 = 0;
  v4[1] = 0;
  _OWORD v4[2] = 0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_25A46347C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  type metadata accessor for AsyncObservableEvent.Observer();
  type metadata accessor for ObserverAndTokenStorage();
  uint64_t v4 = MEMORY[0x263F8EE60] + 8;
  uint64_t updated = type metadata accessor for FulfillOnceState.WaitingStateUpdateResult();
  uint64_t v6 = *(void *)(updated - 8);
  uint64_t v7 = MEMORY[0x270FA5388](updated);
  uint64_t v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)v20 - v10;
  uint64_t v13 = *(void (**)(void))a1;
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v22 = v3;
  uint64_t v23 = v13;
  uint64_t v24 = v12;
  uint64_t v25 = v14;
  FulfillOnceState.updateWaitingState<A>(update:)((uint64_t)sub_25A463B04, (uint64_t)v21, v4);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, updated);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, updated);
  }
  v20[1] = v20;
  v27[0] = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Asy"
           "ncObservableEvent.swift";
  v27[1] = 132;
  uint64_t v30 = "manage(_:)";
  uint64_t v31 = 10;
  char v28 = 2;
  long long v29 = xmmword_25A518B30;
  char v32 = 2;
  uint64_t v16 = *(void *)(v14 + 144);
  MEMORY[0x270FA5388](EnumCaseMultiPayload);
  v20[-6] = nullsub_1;
  v20[-5] = 0;
  v20[-4] = v27;
  v20[-3] = v14;
  v20[-2] = sub_25A3B1EC4;
  v20[-1] = 0;
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v16 + 76));
  sub_25A3B8530((long long *)(v16 + 16), &v26);
  os_unfair_lock_unlock((os_unfair_lock_t)(v16 + 76));
  uint64_t v17 = swift_release();
  if ((v26 & 1) == 0) {
    v13(v17);
  }
  uint64_t v18 = *(void (**)(char *, uint64_t))(v6 + 8);
  v18(v11, updated);
  return ((uint64_t (*)(char *, uint64_t))v18)(v9, updated);
}

uint64_t sub_25A46373C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  v6[0] = a1;
  v6[1] = a2;
  type metadata accessor for AsyncObservableEvent.Observer();
  uint64_t v4 = type metadata accessor for ObserverAndTokenStorage();
  swift_retain();
  sub_25A3CCA60((uint64_t)v6, v4, a3);
  return swift_release();
}

uint64_t sub_25A4637C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for AsyncObservableEvent.Observer();
  type metadata accessor for ObserverAndTokenStorage();
  uint64_t v5 = MEMORY[0x263F8EE60] + 8;
  uint64_t updated = type metadata accessor for FulfillOnceState.WaitingStateUpdateResult();
  uint64_t v7 = sub_25A50FA40();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v14 - v9;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    MEMORY[0x270FA5388](Strong);
    *(&v14 - 2) = a3;
    *(&v14 - 1) = a2;
    FulfillOnceState.updateWaitingState<A>(update:)((uint64_t)sub_25A463AFC, (uint64_t)(&v14 - 4), v5);
    swift_release();
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v12 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(updated - 8) + 56))(v10, v12, 1, updated);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_25A4639B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  type metadata accessor for AsyncObservableEvent.Observer();
  uint64_t v2 = type metadata accessor for ObserverAndTokenStorage();
  return sub_25A3CCC14(&v4, v2);
}

uint64_t sub_25A463A10@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(*(void *)(v1 + 16) - 8) + 16))(a1, *(void *)(v1 + 24));
}

unint64_t sub_25A463A40(uint64_t a1, long long *a2)
{
  return sub_25A3B1EDC(a1, a2);
}

uint64_t sub_25A463A5C@<X0>(void *a1@<X8>)
{
  return sub_25A46373C(*(void *)(v1 + 24), *(void *)(v1 + 32), a1);
}

uint64_t sub_25A463A68()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_25A463AA0()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_25A463AD8()
{
  return sub_25A4637C4(v0[3], v0[4], v0[2]);
}

uint64_t type metadata accessor for AsyncObservableEvent()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A463AFC(uint64_t a1)
{
  return sub_25A4639B0(a1, *(void *)(v1 + 24));
}

uint64_t sub_25A463B04(uint64_t a1)
{
  return sub_25A3CD1D4(a1, v1[3], v1[4], v1[5]);
}

uint64_t Inhabited<>.encode(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t WitnessTable = swift_getWitnessTable();
  PredicatedWrapper.value.getter(a2, WitnessTable, (uint64_t)v6);
  sub_25A50EA00();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_25A463C28(uint64_t a1, uint64_t a2)
{
  return Inhabited<>.encode(to:)(a1, a2);
}

uint64_t KeyedEncodingContainer.encodeIfNotEmpty<A>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v19[0] = a2;
  v19[1] = a3;
  uint64_t v9 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Inhabited();
  uint64_t v13 = sub_25A50FA40();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)v19 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a4);
  uint64_t WitnessTable = swift_getWitnessTable();
  PredicatedWrapper.init(_:)((uint64_t)v11, v12, WitnessTable, (uint64_t)v16);
  v19[5] = a6;
  swift_getWitnessTable();
  sub_25A510230();
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t KeyedEncodingContainer.encodeIf<A>(_:forKey:predicate:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v19[1] = a8;
  uint64_t v11 = sub_25A50FA40();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)v19 - v13;
  char v15 = a3(a1);
  uint64_t v16 = *(void *)(a6 - 8);
  uint64_t v17 = v16;
  if (v15)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v14, a1, a6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, a6);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v14, 1, 1, a6);
  }
  sub_25A510230();
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t KeyValueMap.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v52 = a5;
  uint64_t v53 = a4;
  uint64_t v39 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = sub_25A50FA40();
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v46 = (char *)&v36 - v9;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v44 = *(void (***)(char *, char *, uint64_t))(v10 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v47 = (char *)&v36 - v12;
  uint64_t v51 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v36 - v13;
  uint64_t v48 = v15;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v16 = sub_25A50FA40();
  uint64_t v17 = MEMORY[0x270FA5388](v16 - 8);
  uint64_t v19 = (char *)&v36 - v18;
  uint64_t v20 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v22 = (char *)&v36 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = swift_getAssociatedTypeWitness();
  uint64_t v36 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)&v36 - v24;
  char v26 = *(void (**)(uint64_t))(v53 + 24);
  uint64_t v49 = a2;
  v26(a2);
  uint64_t v37 = v20;
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, v39, a3);
  sub_25A50EEF0();
  uint64_t v27 = v23;
  uint64_t v38 = a3;
  swift_getAssociatedConformanceWitness();
  sub_25A50FAF0();
  uint64_t v28 = TupleTypeMetadata2;
  long long v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48);
  if (v29(v19, 1, TupleTypeMetadata2) != 1)
  {
    uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v51 + 32);
    v44 += 4;
    uint64_t v45 = v30;
    uint64_t v42 = (void (**)(char *, void, uint64_t, uint64_t))(v51 + 56);
    uint64_t v43 = (void (**)(char *, char *, uint64_t))(v51 + 16);
    v51 += 32;
    uint64_t v40 = (void (**)(char *, uint64_t))(v51 - 24);
    uint64_t v41 = v53 + 40;
    do
    {
      v45(v14, &v19[*(int *)(v28 + 48)], AssociatedTypeWitness);
      uint64_t v31 = v47;
      (*v44)(v47, v19, v48);
      uint64_t v32 = v27;
      uint64_t v33 = v46;
      (*v43)(v46, v14, AssociatedTypeWitness);
      (*v42)(v33, 0, 1, AssociatedTypeWitness);
      uint64_t v34 = v33;
      uint64_t v27 = v32;
      (*(void (**)(char *, char *, uint64_t))(v53 + 40))(v34, v31, v49);
      (*v40)(v14, AssociatedTypeWitness);
      sub_25A50FAF0();
      uint64_t v28 = TupleTypeMetadata2;
    }
    while (v29(v19, 1, TupleTypeMetadata2) != 1);
  }
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v39, v38);
  return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v25, v27);
}

uint64_t KeyValueMap.guaranteedValue(for:creatingIfNecessaryWith:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v35 = a6;
  uint64_t v32 = a3;
  uint64_t v33 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v28 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v29 = AssociatedTypeWitness;
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v30 = (char *)&v27 - v10;
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v34 = (char *)&v27 - v13;
  uint64_t v14 = sub_25A50FA40();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v27 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v27 - v18;
  uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(a5 + 32);
  uint64_t v31 = a1;
  v20(a1, a4, a5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v19, 1, v11) == 1)
  {
    uint64_t v21 = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v14);
    uint64_t v22 = v34;
    uint64_t v23 = v36;
    uint64_t result = v33(v21);
    if (v23) {
      return result;
    }
    uint64_t v25 = v30;
    (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v30, v31, v29);
    char v26 = v27;
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v27, v22, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v26, 0, 1, v11);
    (*(void (**)(char *, char *, uint64_t, uint64_t))(a5 + 40))(v26, v25, a4, a5);
  }
  else
  {
    uint64_t v22 = v19;
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(v35, v22, v11);
}

uint64_t KeyValueMap.setting(value:for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v22 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = sub_25A50FA40();
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v21 - v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v21 - v17;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(a5, v6, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a2, v15);
  uint64_t v19 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v14, v22, AssociatedTypeWitness);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v14, 0, 1, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(a4 + 40))(v14, v18, a3, a4);
}

uint64_t KeyValueMap<>.appending(contentsOf:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v58 = a1;
  uint64_t v56 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_25A50FA40();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v48 = (char *)&v40 - v8;
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v50 = *(void *)(v9 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  uint64_t v46 = (char *)&v40 - v11;
  uint64_t v40 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v44 = (char *)&v40 - v12;
  uint64_t v45 = AssociatedTypeWitness;
  uint64_t v47 = v13;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v55 = sub_25A50FA40();
  uint64_t v52 = *(void (***)(char *, char *, uint64_t))(v55 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v55);
  uint64_t v54 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v40 - v18;
  uint64_t v20 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v22 = (char *)&v40 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = swift_getAssociatedTypeWitness();
  uint64_t v41 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)&v40 - v24;
  char v26 = *(void (**)(uint64_t, char *, uint64_t))(v20 + 16);
  v26(v56, v57, a2);
  v26((uint64_t)v22, (char *)v58, a2);
  uint64_t v57 = v25;
  sub_25A50EEF0();
  uint64_t v49 = a2;
  uint64_t v58 = v23;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v52 += 4;
  uint64_t v53 = AssociatedConformanceWitness;
  uint64_t v28 = (void (**)(char *, char *, uint64_t))(v50 + 32);
  uint64_t v29 = (void (**)(char *, char *, uint64_t))(v40 + 16);
  uint64_t v30 = (void (**)(char *, void, uint64_t, uint64_t))(v40 + 56);
  uint64_t v50 = a3;
  uint64_t v51 = TupleTypeMetadata2 - 8;
  uint64_t v42 = a3 + 40;
  uint64_t v43 = (void (**)(char *, char *, uint64_t))(v40 + 32);
  uint64_t v31 = (void (**)(char *, uint64_t))(v40 + 8);
  for (uint64_t i = v45; ; (*v31)(v34, i))
  {
    uint64_t v33 = v54;
    sub_25A50FAF0();
    (*v52)(v19, v33, v55);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48))(v19, 1, TupleTypeMetadata2) == 1)break; {
    uint64_t v34 = v44;
    }
    (*v43)(v44, &v19[*(int *)(TupleTypeMetadata2 + 48)], i);
    uint64_t v35 = TupleTypeMetadata2;
    uint64_t v36 = v46;
    (*v28)(v46, v19, v47);
    uint64_t v37 = v48;
    (*v29)(v48, v34, i);
    (*v30)(v37, 0, 1, i);
    uint64_t v38 = v36;
    TupleTypeMetadata2 = v35;
    (*(void (**)(char *, char *, uint64_t))(v50 + 40))(v37, v38, v49);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v57, v58);
}

void sub_25A46504C()
{
}

void (*sub_25A465064(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_25A50E9C0();
  return sub_25A3C2658;
}

uint64_t sub_25A4650D4(uint64_t a1)
{
  *(void *)(a1 + 8) = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t dispatch thunk of KeyValueMap.init()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of KeyValueMap.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of KeyValueMap.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of KeyValueMap.subscript.modify(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t ExecutionExclusivity.hash(into:)()
{
  return sub_25A5104F0();
}

BOOL static ExecutionExclusivity.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t ExecutionExclusivity.hashValue.getter()
{
  return sub_25A510530();
}

BOOL static ExecutionExclusivity.< infix(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  return a1 < a2;
}

unint64_t sub_25A465218()
{
  unint64_t result = qword_26A419728;
  if (!qword_26A419728)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A419728);
  }
  return result;
}

BOOL sub_25A46526C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

BOOL sub_25A465280(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 >= *a1;
}

BOOL sub_25A465294(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 >= *a2;
}

BOOL sub_25A4652A8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 < *a1;
}

uint64_t dispatch thunk of ExecutionExclusivityTracking.currentExecutionExclusivity.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

unsigned char *storeEnumTagSinglePayload for ExecutionExclusivity(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25A46539CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ExecutionExclusivity()
{
  return &type metadata for ExecutionExclusivity;
}

uint64_t withTimeout<A>(_:perform:makeTimeoutError:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 48) = a6;
  *(void *)(v7 + 56) = a7;
  *(void *)(v7 + 32) = a4;
  *(void *)(v7 + 40) = a5;
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a3;
  *(void *)(v7 + 64) = *(void *)a2;
  *(unsigned char *)(v7 + 96) = *(unsigned char *)(a2 + 8);
  return MEMORY[0x270FA2498](sub_25A46540C, 0, 0);
}

uint64_t sub_25A46540C()
{
  char v1 = *(unsigned char *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v4 = sub_25A50FA40();
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 72) = v5;
  long long v6 = *(_OWORD *)(v0 + 24);
  long long v7 = *(_OWORD *)(v0 + 40);
  *(void *)(v5 + 16) = v2;
  *(void *)(v5 + 24) = v3;
  *(unsigned char *)(v5 + 32) = v1;
  *(_OWORD *)(v5 + 40) = v6;
  *(_OWORD *)(v5 + 56) = v7;
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_25A465528;
  uint64_t v9 = *(void *)(v0 + 16);
  return MEMORY[0x270FA22B8](v9, v4);
}

uint64_t sub_25A465528()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](sub_25A465664, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_25A465664()
{
  swift_task_dealloc();
  char v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_25A4656C8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 64) = a8;
  *(void *)(v8 + 72) = v13;
  *(void *)(v8 + 48) = a6;
  *(void *)(v8 + 56) = a7;
  *(unsigned char *)(v8 + 184) = a4;
  *(void *)(v8 + 32) = a3;
  *(void *)(v8 + 40) = a5;
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  uint64_t v9 = sub_25A50FA40();
  *(void *)(v8 + 80) = v9;
  uint64_t v10 = sub_25A50FA40();
  *(void *)(v8 + 88) = v10;
  *(void *)(v8 + 96) = *(void *)(v10 - 8);
  *(void *)(v8 + 104) = swift_task_alloc();
  *(void *)(v8 + 112) = *(void *)(v9 - 8);
  *(void *)(v8 + 120) = swift_task_alloc();
  *(void *)(v8 + 128) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4159A8);
  *(void *)(v8 + 136) = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_25A465848, 0, 0);
}

uint64_t sub_25A465848()
{
  int v1 = *(unsigned __int8 *)(v0 + 184);
  if (v1 != 2)
  {
    uint64_t v2 = *(void *)(v0 + 136);
    uint64_t v3 = *(void *)(v0 + 72);
    char v4 = v1 & 1;
    uint64_t v5 = *(void *)(v0 + 32);
    uint64_t v6 = sub_25A50F2A0();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v2, 1, 1, v6);
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = 0;
    *(void *)(v7 + 24) = 0;
    *(void *)(v7 + 32) = v3;
    *(void *)(v7 + 40) = v5;
    *(unsigned char *)(v7 + 48) = v4;
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
    sub_25A50F420();
    sub_25A487B80(v2, (uint64_t)&unk_26A419778, v7);
    sub_25A391AF4(v2);
  }
  uint64_t v8 = *(void *)(v0 + 136);
  uint64_t v9 = *(void *)(v0 + 72);
  uint64_t v11 = *(void *)(v0 + 40);
  uint64_t v10 = *(void *)(v0 + 48);
  uint64_t v12 = sub_25A50F2A0();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v8, 1, 1, v12);
  uint64_t v13 = (void *)swift_allocObject();
  void v13[2] = 0;
  v13[3] = 0;
  v13[4] = v9;
  v13[5] = v11;
  void v13[6] = v10;
  swift_retain();
  *(void *)(v0 + 144) = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v14 = sub_25A50F420();
  sub_25A487B80(v8, (uint64_t)&unk_26A419768, (uint64_t)v13);
  sub_25A391AF4(v8);
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v0 + 152) = v15;
  *uint64_t v15 = v0;
  v15[1] = sub_25A465AAC;
  uint64_t v16 = *(void *)(v0 + 104);
  return MEMORY[0x270FA2048](v16, 0, 0, v14);
}

uint64_t sub_25A465AAC()
{
  *(void *)(*(void *)v1 + 160) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_25A4660F4;
  }
  else {
    uint64_t v2 = sub_25A465BC0;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_25A465BC0()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 80);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    (*(void (**)(uint64_t, void))(*(void *)(v0 + 96) + 8))(v1, *(void *)(v0 + 88));
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v0 + 120);
  uint64_t v4 = *(void *)(v0 + 128);
  uint64_t v6 = *(void *)(v0 + 72);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v4, v1, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v5, v4, v3);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    uint64_t v8 = *(void *)(v0 + 120);
    uint64_t v9 = *(void *)(v0 + 80);
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 112) + 8);
    v10(*(void *)(v0 + 128), v9);
    v10(v8, v9);
LABEL_5:
    int v11 = *(unsigned __int8 *)(v0 + 184);
    sub_25A50F410();
    double v12 = 0.0;
    if (v11 != 2)
    {
      double v12 = *(double *)(v0 + 32);
      if (*(unsigned char *)(v0 + 184))
      {
        if (qword_26A415568 != -1) {
          swift_once();
        }
        if (byte_26A419DB0)
        {
          if (qword_26A415570 != -1) {
            swift_once();
          }
          if (byte_26A419DB1) {
            double v12 = v12 * 20.0;
          }
        }
        else
        {
          double v12 = *(double *)&qword_26A419DA8;
        }
      }
    }
    uint64_t v20 = (uint64_t (*)(__n128))(*(void *)(v0 + 56) + **(int **)(v0 + 56));
    uint64_t v18 = (void *)swift_task_alloc();
    *(void *)(v0 + 168) = v18;
    void *v18 = v0;
    v18[1] = sub_25A465F58;
    v19.n128_f64[0] = v12;
    return v20(v19);
  }
  uint64_t v13 = *(void *)(v0 + 128);
  uint64_t v14 = *(void *)(v0 + 112);
  uint64_t v15 = *(void *)(v0 + 80);
  (*(void (**)(void, void, void))(v7 + 32))(*(void *)(v0 + 16), *(void *)(v0 + 120), *(void *)(v0 + 72));
  sub_25A50F410();
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
  return v16();
}

uint64_t sub_25A465F58(uint64_t a1)
{
  *(void *)(*(void *)v1 + 176) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](sub_25A466058, 0, 0);
}

uint64_t sub_25A466058()
{
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_25A4660F4()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_25A466180(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(v2 + 40);
  uint64_t v8 = *(void *)(v2 + 48);
  uint64_t v9 = *(void *)(v2 + 56);
  uint64_t v10 = *(void *)(v2 + 64);
  char v11 = *(unsigned char *)(v2 + 32);
  double v12 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v12;
  *double v12 = v3;
  v12[1] = sub_25A3923B4;
  return sub_25A4656C8(a1, a2, v6, v11, v7, v8, v9, v10);
}

uint64_t sub_25A466270(uint64_t a1, double a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  *(void *)(v6 + 32) = a6;
  *(unsigned char *)(v6 + 80) = a5;
  *(double *)(v6 + 24) = a2;
  *(void *)(v6 + 16) = a1;
  uint64_t v7 = sub_25A50FF70();
  *(void *)(v6 + 40) = v7;
  *(void *)(v6 + 48) = *(void *)(v7 - 8);
  *(void *)(v6 + 56) = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_25A46633C, 0, 0);
}

uint64_t sub_25A46633C()
{
  if (*(unsigned char *)(v0 + 80))
  {
    if (qword_26A415568 != -1) {
      swift_once();
    }
    if ((byte_26A419DB0 & 1) != 0 && qword_26A415570 != -1) {
      swift_once();
    }
  }
  uint64_t v1 = sub_25A5105A0();
  uint64_t v3 = v2;
  sub_25A50FF60();
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_26A419780 + dword_26A419780);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_25A4664B8;
  return v6(v1, v3, 0, 0, 1);
}

uint64_t sub_25A4664B8()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 56);
  uint64_t v3 = *(void *)(*(void *)v1 + 48);
  uint64_t v4 = *(void *)(*(void *)v1 + 40);
  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0) {
    uint64_t v5 = sub_25A3DD178;
  }
  else {
    uint64_t v5 = sub_25A466628;
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t sub_25A466628()
{
  (*(void (**)(void, uint64_t, uint64_t))(*(void *)(v0[4] - 8) + 56))(v0[2], 1, 1);
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_25A4666C8(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  void v6[2] = a1;
  void v6[3] = a6;
  uint64_t v10 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  uint64_t v8 = (void *)swift_task_alloc();
  v6[4] = v8;
  *uint64_t v8 = v6;
  v8[1] = sub_25A4667A8;
  return v10(a1);
}

uint64_t sub_25A4667A8()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return MEMORY[0x270FA2498](sub_25A4668D8, 0, 0);
  }
}

uint64_t sub_25A4668D8()
{
  (*(void (**)(void, void, uint64_t))(*(void *)(v0[3] - 8) + 56))(v0[2], 0, 1);
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t withTimeout<A>(_:perform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v10 = *(unsigned char *)(a2 + 8);
  *(void *)(v5 + 16) = *(void *)a2;
  *(unsigned char *)(v5 + 24) = v10;
  uint64_t v11 = swift_task_alloc();
  *(void *)(v5 + 32) = v11;
  *(void *)uint64_t v11 = v5;
  *(void *)(v11 + 8) = sub_25A466A60;
  *(void *)(v11 + 16) = a1;
  *(void *)(v11 + 48) = 0;
  *(void *)(v11 + 56) = a5;
  *(void *)(v11 + 32) = a4;
  *(void *)(v11 + 40) = &unk_26A419750;
  *(void *)(v11 + 24) = a3;
  *(void *)(v11 + 64) = *(void *)(v5 + 16);
  *(unsigned char *)(v11 + 96) = *(unsigned char *)(v5 + 24);
  return MEMORY[0x270FA2498](sub_25A46540C, 0, 0);
}

uint64_t sub_25A466A60()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 40) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](sub_25A466B94, 0, 0);
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_25A466B94()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_25A466BAC()
{
  return MEMORY[0x270FA2498](sub_25A466BC8, 0, 0);
}

uint64_t sub_25A466BC8()
{
  sub_25A466C3C();
  uint64_t v1 = swift_allocError();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

unint64_t sub_25A466C3C()
{
  unint64_t result = qword_26A419758;
  if (!qword_26A419758)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_26A419758);
  }
  return result;
}

uint64_t sub_25A466C90()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t sub_25A466CD0(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 32);
  uint64_t v4 = *(int **)(v1 + 40);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  void v6[2] = a1;
  void v6[3] = v5;
  v6[1] = sub_25A38F608;
  uint64_t v9 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v7 = (void *)swift_task_alloc();
  v6[4] = v7;
  *uint64_t v7 = v6;
  v7[1] = sub_25A4667A8;
  return v9(a1);
}

uint64_t sub_25A466E00()
{
  swift_unknownObjectRelease();

  return MEMORY[0x270FA0238](v0, 49, 7);
}

uint64_t sub_25A466E38(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v6 = *(void *)(v1 + 16);
  double v7 = *(double *)(v1 + 40);
  char v8 = *(unsigned char *)(v1 + 48);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_25A3923B4;
  return sub_25A466270(a1, v7, v6, v5, v8, v4);
}

uint64_t sub_25A466F04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 56) = v5;
  uint64_t v12 = sub_25A50FF50();
  *(void *)(v6 + 64) = v12;
  *(void *)(v6 + 72) = *(void *)(v12 - 8);
  *(void *)(v6 + 80) = swift_task_alloc();
  *(void *)(v6 + 88) = swift_task_alloc();
  *(void *)(v6 + 40) = a1;
  *(void *)(v6 + 48) = a2;
  *(void *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = a4;
  *(unsigned char *)(v6 + 32) = a5 & 1;
  return MEMORY[0x270FA2498](sub_25A467008, 0, 0);
}

uint64_t sub_25A467008()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v4 = sub_25A50FF70();
  uint64_t v5 = sub_25A4673D0(&qword_26A419788, MEMORY[0x263F8F710]);
  sub_25A510440();
  sub_25A4673D0(&qword_26A419790, MEMORY[0x263F8F6D8]);
  sub_25A50FF80();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v6;
  v0[13] = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v1, v2);
  double v7 = (void *)swift_task_alloc();
  v0[14] = v7;
  *double v7 = v0;
  v7[1] = sub_25A4671A8;
  uint64_t v8 = v0[11];
  return MEMORY[0x270FA2380](v8, v0 + 2, v4, v5);
}

uint64_t sub_25A4671A8()
{
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  uint64_t v3 = *(void *)(*v1 + 88);
  uint64_t v4 = *(void *)(*v1 + 64);
  uint64_t v5 = *v1;
  *(void *)(v5 + 120) = v0;
  swift_task_dealloc();
  v2(v3, v4);
  if (v0)
  {
    return MEMORY[0x270FA2498](sub_25A467364, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
}

uint64_t sub_25A467364()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_25A4673D0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for TaskTimeoutError()
{
  return &type metadata for TaskTimeoutError;
}

uint64_t sub_25A467428(_OWORD *a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4197D8);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (uint64_t *)((char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A415D20);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (uint64_t *)((char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_25A393828(a2, (uint64_t)v6, &qword_26A4197D8);
  if (swift_getEnumCaseMultiPayload() == 1) {
    *uint64_t v9 = *v6;
  }
  else {
    sub_25A3F6C88((uint64_t)v6, (uint64_t)v9);
  }
  swift_storeEnumTagMultiPayload();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4197E0);
  swift_allocObject();
  uint64_t v10 = sub_25A39D318(a1);
  swift_retain();
  sub_25A39DD44((uint64_t)v9);
  swift_release();
  sub_25A384BCC((uint64_t)v9, &qword_26A415D20);
  return v10;
}

uint64_t sub_25A4675AC(_OWORD *a1, void (*a2)(uint64_t), uint64_t a3)
{
  long long v6 = a1[1];
  v8[0] = *a1;
  v8[1] = v6;
  v9[0] = a1[2];
  *(_OWORD *)((char *)v9 + 9) = *(_OWORD *)((char *)a1 + 41);
  type metadata accessor for CrashReport(0);
  sub_25A3BC014((uint64_t)v8, a2, a3, v3, (uint64_t)&v10);
  return v10;
}

uint64_t sub_25A467628(_OWORD *a1, void (*a2)(uint64_t), uint64_t a3)
{
  long long v6 = a1[1];
  v8[0] = *a1;
  v8[1] = v6;
  v9[0] = a1[2];
  *(_OWORD *)((char *)v9 + 9) = *(_OWORD *)((char *)a1 + 41);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415878);
  sub_25A3BC014((uint64_t)v8, a2, a3, v3, (uint64_t)&v10);
  return v10;
}

uint64_t CrashLogSymbolicator.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  CrashLogSymbolicator.init()();
  return v0;
}

uint64_t CrashLogSymbolicator.init()()
{
  uint64_t v1 = sub_25A50F870();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_25A50E790();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (uint64_t *)(v0 + 16);
  sub_25A50E780();
  uint64_t v15 = MEMORY[0x263F8EE78];
  sub_25A46F710(&qword_26A418498, MEMORY[0x263F8F0F8]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4184A0);
  sub_25A46F758(&qword_26A4184A8, &qword_26A4184A0);
  sub_25A50FC90();
  static ExecutionLane.queue(label:qos:attributes:target:)(0xD000000000000020, 0x800000025A520480, (uint64_t)v8, (uint64_t)v4, 0, v13);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A419798);
  uint64_t v9 = swift_allocObject();
  *(_DWORD *)(v9 + 24) = 0;
  *(void *)(v9 + 16) = MEMORY[0x263F8EE80];
  uint64_t v10 = v14;
  *(void *)(v14 + 32) = v9;
  return v10;
}

uint64_t CrashLogSymbolicator.symbolicate(_:with:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = sub_25A50E750();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v87 = (char *)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = sub_25A50E790();
  uint64_t v88 = *(void *)(v89 - 8);
  MEMORY[0x270FA5388](v89);
  uint64_t v86 = (char *)&v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = type metadata accessor for CrashReport(0);
  uint64_t v95 = *(unsigned __int8 **)(v91 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v91);
  uint64_t v93 = (uint64_t)&v84 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v101 = (uint64_t)&v84 - v12;
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v84 - v14;
  uint64_t v16 = MEMORY[0x270FA5388](v13);
  uint64_t v94 = (uint64_t)&v84 - v17;
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v84 - v19;
  uint64_t v99 = v21;
  MEMORY[0x270FA5388](v18);
  uint64_t v23 = (char *)&v84 - v22;
  uint64_t v98 = *a2;
  uint64_t v96 = v2;
  uint64_t v24 = *(void *)(v2 + 32);
  uint64_t v100 = (const char *)a1;
  uint64_t v102 = a1;
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v24 + 24));
  sub_25A468CF8((uint64_t *)(v24 + 16), (uint64_t *)&aBlock);
  os_unfair_lock_unlock((os_unfair_lock_t)(v24 + 24));
  uint64_t v25 = *((void *)&aBlock + 1);
  uint64_t v26 = aBlock;
  swift_release();
  if (v25)
  {
    uint64_t v27 = qword_26A415610;
    swift_retain();
    if (v27 != -1) {
      swift_once();
    }
    uint64_t v92 = v25;
    uint64_t v28 = sub_25A50E5E0();
    __swift_project_value_buffer(v28, (uint64_t)qword_26A419FA8);
    uint64_t v29 = (uint64_t)v100;
    sub_25A46FD20((uint64_t)v100, (uint64_t)v23, type metadata accessor for CrashReport);
    sub_25A46FD20(v29, (uint64_t)v20, type metadata accessor for CrashReport);
    uint64_t v30 = sub_25A50E5C0();
    os_log_type_t v31 = sub_25A50F810();
    BOOL v32 = os_log_type_enabled(v30, v31);
    uint64_t v97 = v15;
    uint64_t v90 = v26;
    uint64_t v85 = v5;
    uint64_t v84 = v6;
    if (v32)
    {
      uint64_t v33 = swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      *(void *)&long long aBlock = v34;
      *(_DWORD *)uint64_t v33 = 136446466;
      uint64_t v35 = _s10Foundation4UUIDV08PreviewsA2OSE17propertyListValueSSvg_0();
      uint64_t v103 = sub_25A3A36A4(v35, v36, (uint64_t *)&aBlock);
      sub_25A50FB00();
      swift_bridgeObjectRelease();
      sub_25A470630((uint64_t)v23, type metadata accessor for CrashReport);
      *(_WORD *)(v33 + 12) = 2080;
      uint64_t v37 = (uint64_t *)&v20[*(int *)(v91 + 20)];
      uint64_t v39 = *v37;
      unint64_t v38 = v37[1];
      swift_bridgeObjectRetain();
      uint64_t v40 = v39;
      uint64_t v15 = v97;
      uint64_t v103 = sub_25A3A36A4(v40, v38, (uint64_t *)&aBlock);
      sub_25A50FB00();
      swift_bridgeObjectRelease();
      sub_25A470630((uint64_t)v20, type metadata accessor for CrashReport);
      _os_log_impl(&dword_25A380000, v30, v31, "Starting symbolication of report %{public}s for %s", (uint8_t *)v33, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x26113F070](v34, -1, -1);
      MEMORY[0x26113F070](v33, -1, -1);
    }
    else
    {
      sub_25A470630((uint64_t)v23, type metadata accessor for CrashReport);
      sub_25A470630((uint64_t)v20, type metadata accessor for CrashReport);
    }

    uint64_t v41 = v99;
    uint64_t v43 = *(unsigned __int8 **)(v96 + 16);
    uint64_t v42 = *(void *)(v96 + 24);
    uint64_t v44 = v94;
    sub_25A46FD20((uint64_t)v100, v94, type metadata accessor for CrashReport);
    sub_25A46FD20(v44, (uint64_t)v15, type metadata accessor for CrashReport);
    sub_25A46FD20(v44, v101, type metadata accessor for CrashReport);
    uint64_t v45 = v95[80];
    uint64_t v96 = ~v45;
    uint64_t v46 = (v45 + 16) & ~v45;
    unint64_t v47 = (v41 + v46 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v48 = (v47 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v49 = swift_allocObject();
    sub_25A3F6C88(v44, v49 + v46);
    *(void *)(v49 + v47) = v98;
    uint64_t v50 = (unsigned __int8 **)(v49 + v48);
    *uint64_t v50 = v43;
    v50[1] = (unsigned __int8 *)v42;
    uint64_t v51 = v92;
    uint64_t v100 = (const char *)v49;
    *(void *)(v49 + ((v48 + 23) & 0xFFFFFFFFFFFFFFF8)) = v92;
    uint64_t v52 = v42;
    uint64_t v53 = v51;
    *(void *)&long long aBlock = v43;
    *((void *)&aBlock + 1) = v42;
    swift_retain();
    swift_bridgeObjectRetain();
    sub_25A3EE304(v43);
    swift_retain();
    swift_bridgeObjectRetain();
    sub_25A3EE304(v43);
    swift_retain();
    swift_bridgeObjectRetain();
    sub_25A3EE304(v43);
    if (ExecutionLane.isCurrentLane.getter())
    {
      uint64_t v54 = (uint64_t)v97;
      uint64_t v55 = sub_25A468DF0();
      uint64_t v56 = v93;
      sub_25A46FD20(v54, v93, type metadata accessor for CrashReport);
      uint64_t v57 = (v45 + 32) & v96;
      uint64_t v58 = swift_allocObject();
      *(void *)(v58 + 16) = v43;
      *(void *)(v58 + 24) = v52;
      sub_25A3F6C88(v56, v58 + v57);
      *(void *)&long long aBlock = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/Previe"
                           "wsFoundation/CrashLogSymbolicator.swift";
      *((void *)&aBlock + 1) = 132;
      LOBYTE(v105) = 2;
      long long v106 = xmmword_25A518E00;
      uint64_t v107 = "symbolicate(with:on:)";
      uint64_t v108 = 21;
      char v109 = 2;
      uint64_t v59 = swift_allocObject();
      *(void *)(v59 + 16) = sub_25A46D7F4;
      *(void *)(v59 + 24) = v58;
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A4197A0);
      swift_allocObject();
      sub_25A3EE304(v43);
      sub_25A46DFD0(&aBlock, v55, 0, 0, 0, 0, (uint64_t)sub_25A46F020, v59);
      uint64_t v61 = v60;
      uint64_t v62 = *(void *)(v53 + 16);
      uint64_t v63 = v54;
      if (v62 == v60)
      {
        swift_release();
        swift_release_n();
        swift_release();
      }
      else
      {
        swift_retain();
        sub_25A4CE3E8(0, 0, v61, v53);
        sub_25A4CEC80(0, 0, v61, v53);
        swift_release();
        swift_retain();
        sub_25A4CF558(0, 0, v62, v61);
        swift_release();
        swift_release_n();
        swift_release_n();
      }
      uint64_t v26 = v90;
    }
    else
    {
      uint64_t v64 = v96;
      uint64_t v65 = (uint64_t)v97;
      if (v43)
      {
        if (v43 == (unsigned __int8 *)1)
        {
          sub_25A3DD980();
          uint64_t v99 = sub_25A50F8D0();
          *((void *)&v106 + 1) = sub_25A46D748;
          uint64_t v107 = v100;
          *(void *)&long long aBlock = MEMORY[0x263EF8330];
          *((void *)&aBlock + 1) = 1107296256;
          uint64_t v105 = sub_25A3BE05C;
          *(void *)&long long v106 = &block_descriptor_9;
          uint64_t v66 = _Block_copy(&aBlock);
          swift_retain();
          swift_release();
          uint64_t v67 = v86;
          sub_25A50E770();
          *(void *)&long long aBlock = MEMORY[0x263F8EE78];
          sub_25A46F710((unint64_t *)&qword_26A4168D0, MEMORY[0x263F8F030]);
          __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
          sub_25A46F758(qword_26A4168E0, &qword_26A4168D8);
          uint64_t v68 = v87;
          uint64_t v69 = v85;
          sub_25A50FC90();
          uint64_t v70 = (void *)v99;
          MEMORY[0x26113D8E0](0, v67, v68, v66);
          _Block_release(v66);

          (*(void (**)(char *, uint64_t))(v84 + 8))(v68, v69);
          (*(void (**)(char *, uint64_t))(v88 + 8))(v67, v89);
          swift_release();
          swift_release_n();
        }
        else
        {
          *((void *)&v106 + 1) = sub_25A46D748;
          uint64_t v107 = v100;
          *(void *)&long long aBlock = MEMORY[0x263EF8330];
          *((void *)&aBlock + 1) = 1107296256;
          uint64_t v105 = sub_25A3BE05C;
          *(void *)&long long v106 = &block_descriptor_7;
          uint64_t v79 = _Block_copy(&aBlock);
          sub_25A3EE304(v43);
          swift_retain();
          uint64_t v80 = v86;
          sub_25A50E770();
          uint64_t v103 = MEMORY[0x263F8EE78];
          sub_25A46F710((unint64_t *)&qword_26A4168D0, MEMORY[0x263F8F030]);
          __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
          sub_25A46F758(qword_26A4168E0, &qword_26A4168D8);
          uint64_t v81 = v87;
          uint64_t v82 = v85;
          sub_25A50FC90();
          MEMORY[0x26113D8E0](0, v80, v81, v79);
          _Block_release(v79);
          sub_25A3EE314(v43);
          (*(void (**)(char *, uint64_t))(v84 + 8))(v81, v82);
          (*(void (**)(char *, uint64_t))(v88 + 8))(v80, v89);
          swift_release();
          swift_release_n();
          swift_release();
        }
        uint64_t v26 = v90;
        uint64_t v63 = (uint64_t)v97;
      }
      else
      {
        uint64_t v95 = 0;
        uint64_t v71 = v101;
        uint64_t v72 = sub_25A468DF0();
        uint64_t v73 = v93;
        sub_25A46FD20(v71, v93, type metadata accessor for CrashReport);
        uint64_t v74 = swift_allocObject();
        *(void *)(v74 + 16) = 0;
        *(void *)(v74 + 24) = v52;
        sub_25A3F6C88(v73, v74 + ((v45 + 32) & v64));
        *(void *)&long long aBlock = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/Prev"
                             "iewsFoundation/CrashLogSymbolicator.swift";
        *((void *)&aBlock + 1) = 132;
        LOBYTE(v105) = 2;
        long long v106 = xmmword_25A518E00;
        uint64_t v107 = "symbolicate(with:on:)";
        uint64_t v108 = 21;
        char v109 = 2;
        uint64_t v75 = swift_allocObject();
        *(void *)(v75 + 16) = sub_25A46D7F4;
        *(void *)(v75 + 24) = v74;
        __swift_instantiateConcreteTypeFromMangledName(&qword_26A4197A0);
        swift_allocObject();
        sub_25A3EE304(0);
        sub_25A46DFD0(&aBlock, v72, 0, v52, 0, v52, (uint64_t)sub_25A46F020, v75);
        uint64_t v77 = v76;
        uint64_t v78 = *(void *)(v53 + 16);
        uint64_t v63 = v65;
        if (v78 != v76)
        {
          swift_retain();
          sub_25A4CE3E8(0, v52, v77, v53);
          sub_25A4CEC80(0, v52, v77, v53);
          swift_release();
          swift_retain();
          sub_25A4CF558(0, v52, v78, v77);
          swift_release();
        }
        swift_release();
        sub_25A3EE314(0);
        swift_release();
        swift_release_n();
        uint64_t v26 = v90;
        uint64_t v43 = v95;
      }
    }
    sub_25A470630(v101, type metadata accessor for CrashReport);
    swift_bridgeObjectRelease();
    sub_25A3EE314(v43);
    swift_release();
    sub_25A470630(v63, type metadata accessor for CrashReport);
    swift_bridgeObjectRelease();
    sub_25A3EE314(v43);
    swift_release();
  }
  return v26;
}

uint64_t sub_25A46877C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for CrashReport.ID(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4197B8);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *a1;
  if (*(void *)(*a1 + 16) && (unint64_t v13 = sub_25A40991C(a2), (v14 & 1) != 0))
  {
    *a3 = *(void *)(*(void *)(v12 + 56) + 8 * v13);
    a3[1] = 0;
    return swift_retain();
  }
  else
  {
    *(void *)&long long v22 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFou"
                      "ndation/CrashLogSymbolicator.swift";
    *((void *)&v22 + 1) = 132;
    char v23 = 2;
    long long v24 = xmmword_25A518E10;
    uint64_t v25 = "symbolicate(_:with:)";
    uint64_t v26 = 20;
    char v27 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A4197C0);
    uint64_t v16 = swift_allocObject();
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A415D20);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v11, 1, 1, v17);
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A4197C8);
    uint64_t v18 = swift_allocObject();
    *(_DWORD *)(v18 + ((*(unsigned int *)(*(void *)v18 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
    sub_25A393828((uint64_t)v11, v18 + *(void *)(*MEMORY[0x263F8DD00] + *(void *)v18 + 16), &qword_26A4197B8);
    swift_retain();
    sub_25A384BCC((uint64_t)v11, &qword_26A4197B8);
    *(void *)(v16 + 104) = v18;
    swift_release();
    uint64_t v19 = sub_25A39D318(&v22);
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A4197D0);
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = v19;
    sub_25A46FD20(a2, (uint64_t)v8, type metadata accessor for CrashReport.ID);
    swift_retain_n();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v28 = *a1;
    *a1 = 0x8000000000000000;
    sub_25A3FEA84(v19, (uint64_t)v8, isUniquelyReferenced_nonNull_native);
    *a1 = v28;
    swift_bridgeObjectRelease();
    uint64_t result = sub_25A470630((uint64_t)v8, type metadata accessor for CrashReport.ID);
    *a3 = v19;
    a3[1] = v20;
  }
  return result;
}

uint64_t sub_25A468A9C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for CrashReport(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v12 = sub_25A468DF0();
  sub_25A46FD20(a1, (uint64_t)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for CrashReport);
  unint64_t v13 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a3;
  *(void *)(v14 + 24) = a4;
  sub_25A3F6C88((uint64_t)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v14 + v13);
  *(void *)&long long v20 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFound"
                    "ation/CrashLogSymbolicator.swift";
  *((void *)&v20 + 1) = 132;
  char v21 = 2;
  long long v22 = xmmword_25A518E00;
  char v23 = "symbolicate(with:on:)";
  uint64_t v24 = 21;
  char v25 = 2;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = sub_25A46D7F4;
  *(void *)(v15 + 24) = v14;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4197A0);
  swift_allocObject();
  sub_25A3EE304(a3);
  sub_25A46DFD0(&v20, v12, 0, 0, 0, 0, (uint64_t)sub_25A46F020, v15);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a5 + 16);
  if (v18 != v16)
  {
    swift_retain();
    sub_25A4CE3E8(0, 0, v17, a5);
    sub_25A4CEC80(0, 0, v17, a5);
    swift_release();
    swift_retain();
    sub_25A4CF558(0, 0, v18, v17);
    swift_release();
  }
  return swift_release();
}

uint64_t sub_25A468CF8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_25A46877C(a1, *(void *)(v2 + 16), a2);
}

uint64_t CrashLogSymbolicator.deinit()
{
  sub_25A3EE314(*(id *)(v0 + 16));
  swift_release();
  return v0;
}

uint64_t CrashLogSymbolicator.__deallocating_deinit()
{
  sub_25A3EE314(*(id *)(v0 + 16));
  swift_release();

  return MEMORY[0x270FA0228](v0, 40, 7);
}

uint64_t sub_25A468D7C()
{
  CSRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0228](v0, 104, 7);
}

uint64_t sub_25A468DF0()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CrashReport(0) + 40));
  uint64_t v25 = *(void *)(v1 + 16);
  if (v25)
  {
    uint64_t v2 = 0;
    uint64_t v3 = swift_bridgeObjectRetain() + 48;
    uint64_t v20 = MEMORY[0x263F8EE78];
    do
    {
      uint64_t v4 = *(void *)(v3 + 32);
      if (v4)
      {
        long long v24 = *(_OWORD *)(v3 + 32);
        uint64_t v5 = *(void *)(v3 - 8);
        uint64_t v21 = *(void *)v3;
        uint64_t v22 = *(void *)(v3 - 16);
        long long v6 = *(_OWORD *)(v3 + 8);
        uint64_t v7 = *(void *)(v3 + 24);
        uint64_t v8 = *(void *)(v3 + 48);
        *(void *)&long long v26 = v7;
        *((void *)&v26 + 1) = v4;
        long long v23 = v6;
        sub_25A39BE4C();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        if (sub_25A50FB90())
        {
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
        else
        {
          *(void *)&long long v26 = v7;
          *((void *)&v26 + 1) = v4;
          char v9 = sub_25A50FB90();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v9)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v10 = v20;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_25A39A198(0, *(void *)(v20 + 16) + 1, 1);
              uint64_t v10 = v20;
            }
            long long v11 = v24;
            unint64_t v13 = *(void *)(v10 + 16);
            unint64_t v12 = *(void *)(v10 + 24);
            if (v13 >= v12 >> 1)
            {
              sub_25A39A198(v12 > 1, v13 + 1, 1);
              long long v11 = v24;
              uint64_t v10 = v20;
            }
            *(void *)(v10 + 16) = v13 + 1;
            uint64_t v20 = v10;
            unint64_t v14 = v10 + 80 * v13;
            *(void *)(v14 + 32) = v2;
            *(void *)(v14 + 40) = v22;
            *(void *)(v14 + 48) = v5;
            *(void *)(v14 + 56) = v21;
            *(_OWORD *)(v14 + 64) = v23;
            *(void *)(v14 + 80) = v7;
            *(_OWORD *)(v14 + 88) = v11;
            *(void *)(v14 + 104) = v8;
          }
        }
      }
      ++v2;
      v3 += 72;
    }
    while (v25 != v2);
    uint64_t v1 = swift_bridgeObjectRelease();
    uint64_t v15 = v20;
  }
  else
  {
    uint64_t v15 = MEMORY[0x263F8EE78];
  }
  MEMORY[0x270FA5388](v1);
  unint64_t v16 = sub_25A46F2C4(v15, (void (*)(void, void))sub_25A46FE60);
  swift_release();
  *(void *)&long long v26 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFound"
                    "ation/CrashLogSymbolicator.swift";
  *((void *)&v26 + 1) = 132;
  char v27 = 2;
  long long v28 = xmmword_25A518E20;
  uint64_t v29 = "resolveObfuscatedImagePaths(using:)";
  uint64_t v30 = 35;
  char v31 = 2;
  sub_25A3F102C(&v26, 0, v16);
  uint64_t v18 = v17;
  swift_bridgeObjectRelease();
  return v18;
}

uint64_t sub_25A4691A8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *a1;
  void v6[2] = a2;
  void v6[3] = a3;
  v6[4] = a4;
  void v6[5] = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4197E8);
  *(void *)&long long v7 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFounda"
                   "tion/CrashLogSymbolicator.swift";
  *((void *)&v7 + 1) = 132;
  char v8 = 2;
  long long v9 = xmmword_25A518E30;
  uint64_t v10 = "symbolicate(with:on:)";
  uint64_t v11 = 21;
  char v12 = 2;
  return sub_25A4675AC(&v7, (void (*)(uint64_t))sub_25A46FAB4, (uint64_t)v6);
}

uint64_t sub_25A469240(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v55 = a5;
  uint64_t v56 = a3;
  uint64_t v53 = (char *)a4;
  uint64_t v54 = a2;
  uint64_t v6 = sub_25A50E750();
  uint64_t v51 = *(void *)(v6 - 8);
  uint64_t v52 = v6;
  MEMORY[0x270FA5388](v6);
  unint64_t v48 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_25A50E790();
  uint64_t v49 = *(void *)(v8 - 8);
  uint64_t v50 = v8;
  MEMORY[0x270FA5388](v8);
  unint64_t v47 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4197D8);
  MEMORY[0x270FA5388](v10);
  char v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for CrashReport(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  uint64_t v16 = MEMORY[0x270FA5388](v13 - 8);
  uint64_t v17 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v45 - v19;
  uint64_t v21 = MEMORY[0x270FA5388](v18);
  long long v23 = (char *)&v45 - v22;
  MEMORY[0x270FA5388](v21);
  uint64_t v25 = (char *)&v45 - v24;
  sub_25A46FD20((uint64_t)v53, (uint64_t)&v45 - v24, type metadata accessor for CrashReport);
  sub_25A46FD20((uint64_t)v25, (uint64_t)v23, type metadata accessor for CrashReport);
  uint64_t v53 = v20;
  sub_25A46FD20((uint64_t)v25, (uint64_t)v20, type metadata accessor for CrashReport);
  unint64_t v26 = (*(unsigned __int8 *)(v14 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  unint64_t v27 = (v15 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v28 = swift_allocObject();
  uint64_t v29 = (uint64_t)v25;
  uint64_t v30 = v54;
  sub_25A3F6C88(v29, v28 + v26);
  uint64_t v31 = v55;
  *(void *)(v28 + v27) = v55;
  *(void *)(v28 + ((v27 + 15) & 0xFFFFFFFFFFFFFFF8)) = a1;
  uint64_t v32 = v31;
  long long aBlock = v30;
  uint64_t v59 = v56;
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  if (ExecutionLane.isCurrentLane.getter())
  {
    sub_25A469B2C(v32, (uint64_t)v17);
    sub_25A46FD20((uint64_t)v17, (uint64_t)v12, type metadata accessor for CrashReport);
    swift_storeEnumTagMultiPayload();
    sub_25A4C61BC((uint64_t)v12);
    sub_25A384BCC((uint64_t)v12, &qword_26A4197D8);
    sub_25A470630((uint64_t)v17, type metadata accessor for CrashReport);
    swift_release();
LABEL_9:
    uint64_t v38 = (uint64_t)v53;
    goto LABEL_10;
  }
  uint64_t v46 = v23;
  if (v30)
  {
    if (v30 == (void *)1)
    {
      sub_25A3DD980();
      uint64_t v33 = (void *)sub_25A50F8D0();
      uint64_t v62 = sub_25A46FC64;
      uint64_t v63 = v28;
      long long aBlock = (void *)MEMORY[0x263EF8330];
      uint64_t v59 = 1107296256;
      uint64_t v60 = sub_25A3BE05C;
      uint64_t v61 = &block_descriptor_48;
      uint64_t v34 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      uint64_t v35 = v47;
      sub_25A50E770();
      long long aBlock = (void *)MEMORY[0x263F8EE78];
      sub_25A46F710((unint64_t *)&qword_26A4168D0, MEMORY[0x263F8F030]);
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
      sub_25A46F758(qword_26A4168E0, &qword_26A4168D8);
      unint64_t v36 = v48;
      uint64_t v37 = v52;
      sub_25A50FC90();
      MEMORY[0x26113D8E0](0, v35, v36, v34);
      _Block_release(v34);

      (*(void (**)(char *, uint64_t))(v51 + 8))(v36, v37);
      (*(void (**)(char *, uint64_t))(v49 + 8))(v35, v50);
    }
    else
    {
      uint64_t v62 = sub_25A46FC64;
      uint64_t v63 = v28;
      long long aBlock = (void *)MEMORY[0x263EF8330];
      uint64_t v59 = 1107296256;
      uint64_t v60 = sub_25A3BE05C;
      uint64_t v61 = &block_descriptor_45;
      uint64_t v45 = _Block_copy(&aBlock);
      swift_retain();
      sub_25A3EE304(v30);
      uint64_t v39 = v47;
      sub_25A50E770();
      uint64_t v57 = MEMORY[0x263F8EE78];
      sub_25A46F710((unint64_t *)&qword_26A4168D0, MEMORY[0x263F8F030]);
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
      uint64_t v40 = v30;
      sub_25A46F758(qword_26A4168E0, &qword_26A4168D8);
      uint64_t v41 = v48;
      uint64_t v42 = v52;
      sub_25A50FC90();
      uint64_t v43 = v45;
      MEMORY[0x26113D8E0](0, v39, v41, v45);
      _Block_release(v43);
      sub_25A3EE314(v40);
      (*(void (**)(char *, uint64_t))(v51 + 8))(v41, v42);
      (*(void (**)(char *, uint64_t))(v49 + 8))(v39, v50);
      swift_release();
    }
    swift_release();
    long long v23 = v46;
    goto LABEL_9;
  }
  uint64_t v38 = (uint64_t)v53;
  sub_25A469B2C(v32, (uint64_t)v17);
  sub_25A46FD20((uint64_t)v17, (uint64_t)v12, type metadata accessor for CrashReport);
  swift_storeEnumTagMultiPayload();
  sub_25A4C61BC((uint64_t)v12);
  sub_25A384BCC((uint64_t)v12, &qword_26A4197D8);
  sub_25A470630((uint64_t)v17, type metadata accessor for CrashReport);
  swift_release();
  long long v23 = v46;
LABEL_10:
  sub_25A470630(v38, type metadata accessor for CrashReport);
  swift_release();
  swift_bridgeObjectRelease();
  sub_25A470630((uint64_t)v23, type metadata accessor for CrashReport);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_25A4699E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4197D8);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CrashReport(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25A469B2C(a2, (uint64_t)v8);
  sub_25A46FD20((uint64_t)v8, (uint64_t)v5, type metadata accessor for CrashReport);
  swift_storeEnumTagMultiPayload();
  sub_25A4C61BC((uint64_t)v5);
  sub_25A384BCC((uint64_t)v5, &qword_26A4197D8);
  return sub_25A470630((uint64_t)v8, type metadata accessor for CrashReport);
}

uint64_t sub_25A469B2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v90 = a2;
  uint64_t v91 = 0;
  uint64_t v4 = type metadata accessor for CrashReport(0);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v114 = MEMORY[0x263F8EE80];
  uint64_t v89 = (int *)v5;
  uint64_t v7 = *(int *)(v5 + 40);
  uint64_t v102 = v2;
  uint64_t v8 = *(void **)(v2 + v7);
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
    uint64_t v65 = swift_bridgeObjectRetain();
LABEL_49:
    uint64_t v96 = v8;
    uint64_t v107 = MEMORY[0x263F8EE80];
    uint64_t v66 = v89;
    uint64_t v67 = v102;
    uint64_t v68 = *(void *)(v102 + v89[11]);
    MEMORY[0x270FA5388](v65);
    v88[-4] = &v107;
    v88[-3] = &v114;
    v88[-2] = v67;
    swift_bridgeObjectRetain();
    *(void *)&long long v101 = sub_25A4E2EE8((void (*)(long long *__return_ptr, long long *))sub_25A46FCFC, (uint64_t)&v88[-6], v68);
    swift_bridgeObjectRelease();
    uint64_t v69 = v90;
    sub_25A46FD20(v67, v90, type metadata accessor for CrashReport.ID);
    uint64_t v70 = (uint64_t *)(v67 + v66[5]);
    uint64_t v72 = *v70;
    uint64_t v71 = v70[1];
    uint64_t v73 = (uint64_t *)(v67 + v66[6]);
    uint64_t v74 = *v73;
    uint64_t v75 = v73[1];
    uint64_t v76 = v66[8];
    int v77 = *(_DWORD *)(v67 + v66[7]);
    uint64_t v78 = v67 + v76;
    uint64_t v79 = v69 + v76;
    uint64_t v80 = sub_25A50E470();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v80 - 8) + 16))(v79, v78, v80);
    uint64_t v81 = *(void *)(v67 + v66[9]);
    uint64_t v82 = (uint64_t *)(v67 + v66[12]);
    uint64_t v83 = (void *)(v69 + v66[5]);
    *uint64_t v83 = v72;
    v83[1] = v71;
    uint64_t v84 = (void *)(v69 + v66[6]);
    *uint64_t v84 = v74;
    v84[1] = v75;
    *(_DWORD *)(v69 + v66[7]) = v77;
    *(void *)(v69 + v66[9]) = v81;
    *(void *)(v69 + v66[10]) = v96;
    *(void *)(v69 + v66[11]) = v101;
    uint64_t v86 = *v82;
    uint64_t v85 = v82[1];
    uint64_t v87 = (void *)(v69 + v66[12]);
    *uint64_t v87 = v86;
    v87[1] = v85;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  uint64_t v94 = (uint64_t)v88 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRetain();
  v88[1] = a1;
  uint64_t v11 = (void *)(a1 + 48);
  *(void *)&long long v12 = 136446466;
  long long v93 = v12;
  uint64_t v92 = MEMORY[0x263F8EE58] + 8;
  uint64_t v97 = v7;
  while (1)
  {
    uint64_t v15 = *(v11 - 2);
    uint64_t v16 = *(void *)(v102 + v7);
    if (v15 >= *(void *)(v16 + 16)) {
      goto LABEL_4;
    }
    if (v15 < 0) {
      break;
    }
    uint64_t v99 = v9;
    uint64_t v17 = *(v11 - 1);
    uint64_t v18 = *v11;
    uint64_t v98 = v11;
    uint64_t v19 = v16 + 72 * v15;
    uint64_t v20 = *(void *)(v19 + 40);
    uint64_t v21 = *(void *)(v19 + 48);
    uint64_t v22 = *(void *)(v19 + 72);
    unint64_t v23 = *(void *)(v19 + 96);
    long long v24 = *(_OWORD *)(v19 + 56);
    long long v25 = *(_OWORD *)(v19 + 80);
    uint64_t v107 = *(void *)(v19 + 32);
    uint64_t v108 = v20;
    uint64_t v109 = v21;
    long long v101 = v24;
    long long v110 = v24;
    uint64_t v111 = v22;
    long long v112 = v25;
    unint64_t v113 = v23;
    uint64_t v26 = v25;
    uint64_t v100 = v15;
    if (v18)
    {
      uint64_t v27 = v18;
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v17 = v22;
      uint64_t v27 = v26;
    }
    swift_beginAccess();
    uint64_t v111 = v17;
    *(void *)&long long v112 = v27;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (!v27 || !(void)v110)
    {
      if (qword_26A415610 != -1) {
        swift_once();
      }
      uint64_t v29 = sub_25A50E5E0();
      __swift_project_value_buffer(v29, (uint64_t)qword_26A419FA8);
      uint64_t v30 = v94;
      sub_25A46FD20(v102, v94, type metadata accessor for CrashReport);
      uint64_t v31 = sub_25A50E5C0();
      os_log_type_t v32 = sub_25A50F820();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = swift_slowAlloc();
        uint64_t v34 = swift_slowAlloc();
        uint64_t v105 = v34;
        *(_DWORD *)uint64_t v33 = v93;
        uint64_t v35 = _s10Foundation4UUIDV08PreviewsA2OSE17propertyListValueSSvg_0();
        *(void *)(v33 + 4) = sub_25A3A36A4(v35, v36, &v105);
        swift_bridgeObjectRelease();
        sub_25A470630(v30, type metadata accessor for CrashReport);
        *(_WORD *)(v33 + 12) = 2080;
        if (v113) {
          uint64_t v37 = *((void *)&v112 + 1);
        }
        else {
          uint64_t v37 = 0x6E776F6E6B6E753CLL;
        }
        if (v113) {
          unint64_t v38 = v113;
        }
        else {
          unint64_t v38 = 0xE90000000000003ELL;
        }
        swift_bridgeObjectRetain();
        *(void *)(v33 + 14) = sub_25A3A36A4(v37, v38, &v105);
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_25A380000, v31, v32, "[%{public}s] Ignoring image without path or arch: %s", (uint8_t *)v33, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x26113F070](v34, -1, -1);
        MEMORY[0x26113F070](v33, -1, -1);
      }
      else
      {
        sub_25A470630(v30, type metadata accessor for CrashReport);
      }

      unint64_t v39 = v100;
      goto LABEL_41;
    }
    if ((v110 & 0x1000000000000000) != 0 || !(v110 & 0x2000000000000000 | v109 & 0x1000000000000000))
    {
      type metadata accessor for _CSArchitecture(0);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v63 = v91;
      sub_25A50FD80();
      uint64_t v91 = v63;
    }
    else
    {
      if ((v110 & 0x2000000000000000) != 0)
      {
        uint64_t v105 = v109;
        uint64_t v106 = v110 & 0xFFFFFFFFFFFFFFLL;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t ArchitectureForName = CSArchitectureGetArchitectureForName();
        uint64_t v28 = swift_bridgeObjectRelease();
        goto LABEL_32;
      }
      if ((v109 & 0x1000000000000000) == 0) {
        sub_25A50FE60();
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t ArchitectureForName = CSArchitectureGetArchitectureForName();
    }
    uint64_t v28 = swift_bridgeObjectRelease();
LABEL_32:
    int v40 = ArchitectureForName;
    int v41 = HIDWORD(ArchitectureForName);
    MEMORY[0x270FA5388](v28);
    LODWORD(v88[-2]) = v40;
    HIDWORD(v88[-2]) = v41;
    uint64_t v96 = v8;
    if ((v27 & 0x1000000000000000) != 0 || !(v27 & 0x2000000000000000 | v17 & 0x1000000000000000))
    {
      type metadata accessor for _CSTypeRef(0);
      uint64_t v64 = v91;
      sub_25A50FD80();
      uint64_t v91 = v64;
    }
    else
    {
      if ((v27 & 0x2000000000000000) != 0)
      {
        uint64_t ArchitectureForName = v17;
        uint64_t v104 = v27 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v105 = CSSymbolicatorCreateWithPathAndArchitecture();
        uint64_t v106 = v43;
        swift_bridgeObjectRelease();
        goto LABEL_40;
      }
      if ((v17 & 0x1000000000000000) == 0) {
        sub_25A50FE60();
      }
      uint64_t v105 = CSSymbolicatorCreateWithPathAndArchitecture();
      uint64_t v106 = v42;
    }
    swift_bridgeObjectRelease();
LABEL_40:
    *(void *)&long long v101 = v105;
    uint64_t v95 = v106;
    uint64_t v45 = v107;
    uint64_t v44 = v108;
    uint64_t v46 = v109;
    uint64_t v49 = *((void *)&v110 + 1);
    uint64_t v47 = v110;
    uint64_t v48 = v111;
    long long v50 = v112;
    unint64_t v51 = v113;
    type metadata accessor for ImageEntry();
    uint64_t v52 = swift_allocObject();
    *(void *)(v52 + 16) = v45;
    *(void *)(v52 + 24) = v44;
    *(void *)(v52 + 32) = v46;
    *(void *)(v52 + 40) = v47;
    *(void *)(v52 + 48) = v49;
    *(void *)(v52 + 56) = v48;
    *(_OWORD *)(v52 + 64) = v50;
    uint64_t v53 = v101;
    *(void *)(v52 + 80) = v51;
    *(void *)(v52 + 88) = v53;
    *(void *)(v52 + 96) = v95;
    swift_bridgeObjectRetain();
    uint64_t v54 = v114;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v105 = v54;
    unint64_t v39 = v100;
    sub_25A3FEBF0(v52, v100, isUniquelyReferenced_nonNull_native);
    uint64_t v114 = v105;
    swift_bridgeObjectRelease();
    uint64_t v8 = v96;
LABEL_41:
    uint64_t v57 = v107;
    uint64_t v56 = v108;
    uint64_t v58 = v109;
    long long v60 = v110;
    uint64_t v59 = v111;
    *(void *)&long long v101 = *((void *)&v112 + 1);
    uint64_t v61 = v112;
    unint64_t v62 = v113;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_25A3C7BD0(v8);
      uint64_t v8 = (void *)result;
    }
    if (v39 >= v8[2]) {
      goto LABEL_51;
    }
    uint64_t v13 = &v8[9 * v39];
    v13[4] = v57;
    v13[5] = v56;
    void v13[6] = v58;
    *(_OWORD *)(v13 + 7) = v60;
    v13[9] = v59;
    uint64_t v14 = v101;
    void v13[10] = v61;
    v13[11] = v14;
    v13[12] = v62;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v7 = v97;
    uint64_t v9 = v99;
    uint64_t v11 = v98;
LABEL_4:
    v11 += 3;
    if (!--v9)
    {
      uint64_t v65 = swift_bridgeObjectRelease();
      goto LABEL_49;
    }
  }
  __break(1u);
LABEL_51:
  __break(1u);
  return result;
}

void sub_25A46A4E8(uint64_t a1, long long *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for CrashReport(0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x270FA5388](v8 - 8);
  long long v11 = a2[3];
  long long v37 = a2[2];
  long long v38 = v11;
  uint64_t v39 = *((void *)a2 + 8);
  long long v12 = a2[1];
  long long v35 = *a2;
  long long v36 = v12;
  uint64_t v13 = *((void *)&v37 + 1);
  uint64_t v14 = v11;
  if ((void)v11)
  {
    swift_bridgeObjectRetain();
    unint64_t v15 = sub_25A46F424(a3, v13, v14);
    swift_bridgeObjectRelease();
    int v40 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Cras"
          "hLogSymbolicator.swift";
    *(void *)&long long v41 = 132;
    BYTE8(v41) = 2;
    long long v42 = xmmword_25A518E40;
    *(void *)&long long v43 = "resolvePath(with:)";
    *((void *)&v43 + 1) = 18;
    LOBYTE(v44) = 2;
    sub_25A3F1198(&v40, 0, v15);
    uint64_t v28 = v16;
    swift_bridgeObjectRelease();
    *(void *)&long long v45 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFou"
                      "ndation/CrashLogSymbolicator.swift";
    *((void *)&v45 + 1) = 132;
    char v46 = 2;
    long long v47 = xmmword_25A518E50;
    uint64_t v48 = "resolvePath(with:)";
    uint64_t v49 = 18;
    char v50 = 2;
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = sub_25A46B88C;
    *(void *)(v17 + 24) = 0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A419800);
    swift_allocObject();
    sub_25A46BB38(&v45, v28, 0, 0, 0, 0, (uint64_t)sub_25A470138, v17);
    uint64_t v19 = v18;
  }
  else
  {
    *(void *)&long long v45 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFou"
                      "ndation/CrashLogSymbolicator.swift";
    *((void *)&v45 + 1) = 132;
    char v46 = 2;
    long long v47 = xmmword_25A518E60;
    uint64_t v48 = "resolvePath(with:)";
    uint64_t v49 = 18;
    char v50 = 2;
    int v40 = (const char *)*((void *)&v37 + 1);
    long long v41 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    __int16 v44 = 0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A4197F0);
    swift_allocObject();
    uint64_t v19 = sub_25A39D6A8(&v45);
    swift_retain();
    sub_25A39E1AC((uint64_t)&v40);
    swift_release();
  }
  sub_25A46FD20(a4, (uint64_t)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for CrashReport);
  unint64_t v20 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v21 = (v10 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v22 = swift_allocObject();
  sub_25A3F6C88((uint64_t)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v22 + v20);
  unint64_t v23 = v22 + v21;
  long long v24 = v38;
  *(_OWORD *)(v23 + 32) = v37;
  *(_OWORD *)(v23 + 48) = v24;
  *(void *)(v23 + 64) = v39;
  long long v25 = v36;
  *(_OWORD *)unint64_t v23 = v35;
  *(_OWORD *)(v23 + 16) = v25;
  *(void *)(v22 + ((v21 + 79) & 0xFFFFFFFFFFFFFFF8)) = a1;
  *(void *)&long long v29 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFound"
                    "ation/CrashLogSymbolicator.swift";
  *((void *)&v29 + 1) = 132;
  char v30 = 2;
  long long v31 = xmmword_25A518E70;
  os_log_type_t v32 = "resolveObfuscatedImagePaths(using:)";
  uint64_t v33 = 35;
  char v34 = 2;
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = sub_25A470020;
  *(void *)(v26 + 24) = v22;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4197F8);
  swift_allocObject();
  sub_25A4700E0((uint64_t)&v35);
  sub_25A46BFA0(&v29, v19, 0, 0, 0, 0, (uint64_t)sub_25A4700D8, v26);
}

uint64_t sub_25A46A8D4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = type metadata accessor for CrashReport(0);
  MEMORY[0x270FA5388](v10 - 8);
  long long v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *a1;
  unint64_t v13 = a1[1];
  if (qword_26A415610 != -1) {
    swift_once();
  }
  uint64_t v15 = sub_25A50E5E0();
  __swift_project_value_buffer(v15, (uint64_t)qword_26A419FA8);
  sub_25A46FD20(a2, (uint64_t)v12, type metadata accessor for CrashReport);
  sub_25A4700E0(a3);
  swift_bridgeObjectRetain();
  sub_25A4700E0(a3);
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_25A50E5C0();
  os_log_type_t v17 = sub_25A50F820();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v31 = v14;
    uint64_t v32 = a4;
    uint64_t v18 = swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    uint64_t v34 = v19;
    *(_DWORD *)uint64_t v18 = 136446722;
    uint64_t v20 = _s10Foundation4UUIDV08PreviewsA2OSE17propertyListValueSSvg_0();
    uint64_t v33 = sub_25A3A36A4(v20, v21, &v34);
    sub_25A50FB00();
    swift_bridgeObjectRelease();
    sub_25A470630((uint64_t)v12, type metadata accessor for CrashReport);
    *(_WORD *)(v18 + 12) = 2080;
    unint64_t v22 = *(void *)(a3 + 48);
    uint64_t v30 = v19;
    if (v22)
    {
      uint64_t v23 = *(void *)(a3 + 40);
      unint64_t v24 = v22;
    }
    else
    {
      unint64_t v24 = 0xE300000000000000;
      uint64_t v23 = 7104878;
    }
    swift_bridgeObjectRetain();
    uint64_t v33 = sub_25A3A36A4(v23, v24, &v34);
    sub_25A50FB00();
    swift_bridgeObjectRelease();
    sub_25A4705D8(a3);
    sub_25A4705D8(a3);
    *(_WORD *)(v18 + 22) = 2080;
    uint64_t v14 = v31;
    if (v13) {
      uint64_t v25 = v31;
    }
    else {
      uint64_t v25 = 7104878;
    }
    if (v13) {
      unint64_t v26 = v13;
    }
    else {
      unint64_t v26 = 0xE300000000000000;
    }
    swift_bridgeObjectRetain();
    uint64_t v33 = sub_25A3A36A4(v25, v26, &v34);
    sub_25A50FB00();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25A380000, v16, v17, "[%{public}s] Resolved %s to %s", (uint8_t *)v18, 0x20u);
    uint64_t v27 = v30;
    swift_arrayDestroy();
    MEMORY[0x26113F070](v27, -1, -1);
    MEMORY[0x26113F070](v18, -1, -1);

    a4 = v32;
  }
  else
  {
    sub_25A470630((uint64_t)v12, type metadata accessor for CrashReport);
    sub_25A4705D8(a3);
    sub_25A4705D8(a3);

    swift_bridgeObjectRelease_n();
  }
  *a5 = a4;
  a5[1] = v14;
  a5[2] = v13;
  return swift_bridgeObjectRetain();
}

uint64_t sub_25A46AC4C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CSArchitectureGetArchitectureForName();
  *a1 = result;
  return result;
}

uint64_t sub_25A46AC7C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for CrashReport(0);
  MEMORY[0x270FA5388](v10 - 8);
  long long v12 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  unint64_t v15 = *(void *)(a1 + 24);
  uint64_t v79 = *(void *)(a1 + 16);
  unint64_t v80 = v15;
  uint64_t v78 = *(void *)(a1 + 32);
  int v16 = *(unsigned __int8 *)(a1 + 40);
  uint64_t v17 = *(void *)(a1 + 48);
  uint64_t v18 = *(void *)(a1 + 56);
  uint64_t v77 = *(void *)(a1 + 64);
  int v75 = *(unsigned __int8 *)(a1 + 72);
  int v76 = v16;
  uint64_t v73 = a2;
  uint64_t v19 = *a2;
  if (*(void *)(*a2 + 16))
  {
    uint64_t v20 = v13;
    uint64_t v21 = v18;
    uint64_t v22 = v17;
    uint64_t v23 = v14;
    unint64_t v24 = sub_25A4099A0(v14, v13);
    uint64_t v14 = v23;
    uint64_t v17 = v22;
    uint64_t v18 = v21;
    uint64_t v13 = v20;
    if (v25)
    {
      uint64_t v26 = *(void *)(v19 + 56) + 80 * v24;
      uint64_t v27 = *(void *)(v26 + 16);
      char v28 = *(unsigned char *)(v26 + 40);
      uint64_t v29 = *(void *)(v26 + 48);
      char v30 = *(unsigned char *)(v26 + 72);
      *(_OWORD *)a5 = *(_OWORD *)v26;
      *(void *)(a5 + 16) = v27;
      *(_OWORD *)(a5 + 24) = *(_OWORD *)(v26 + 24);
      *(unsigned char *)(a5 + 40) = v28;
      *(void *)(a5 + 48) = v29;
      *(_OWORD *)(a5 + 56) = *(_OWORD *)(v26 + 56);
      *(unsigned char *)(a5 + 72) = v30;
LABEL_18:
      swift_bridgeObjectRetain();
      return swift_bridgeObjectRetain();
    }
  }
  uint64_t v31 = *a3;
  if (!*(void *)(*a3 + 16)
    || (*(void *)&long long v74 = v14,
        *((void *)&v74 + 1) = v13,
        unint64_t v32 = sub_25A4096EC(v14),
        uint64_t v13 = *((void *)&v74 + 1),
        uint64_t v14 = v74,
        (v33 & 1) == 0))
  {
    *(void *)a5 = v14;
    *(void *)(a5 + 8) = v13;
    unint64_t v48 = v80;
    *(void *)(a5 + 16) = v79;
    *(void *)(a5 + 24) = v48;
    *(void *)(a5 + 32) = v78;
    *(unsigned char *)(a5 + 40) = v76;
    *(void *)(a5 + 48) = v17;
    *(void *)(a5 + 56) = v18;
    *(void *)(a5 + 64) = v77;
    *(unsigned char *)(a5 + 72) = v75;
    goto LABEL_18;
  }
  uint64_t v34 = *(void *)(*(void *)(v31 + 56) + 8 * v32);
  uint64_t v35 = qword_26A415610;
  swift_retain();
  if (v35 != -1) {
    swift_once();
  }
  uint64_t v36 = sub_25A50E5E0();
  __swift_project_value_buffer(v36, (uint64_t)qword_26A419FA8);
  sub_25A46FD20(a4, (uint64_t)v12, type metadata accessor for CrashReport);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  long long v37 = sub_25A50E5C0();
  int v38 = sub_25A50F820();
  if (os_log_type_enabled(v37, (os_log_type_t)v38))
  {
    LODWORD(v72) = v38;
    uint64_t v70 = v37;
    uint64_t v39 = swift_slowAlloc();
    uint64_t v71 = swift_slowAlloc();
    *(void *)&long long v81 = v71;
    *(_DWORD *)uint64_t v39 = 136446722;
    uint64_t v40 = _s10Foundation4UUIDV08PreviewsA2OSE17propertyListValueSSvg_0();
    uint64_t v90 = sub_25A3A36A4(v40, v41, (uint64_t *)&v81);
    sub_25A50FB00();
    swift_bridgeObjectRelease();
    sub_25A470630((uint64_t)v12, type metadata accessor for CrashReport);
    *(_WORD *)(v39 + 12) = 2080;
    if (v80) {
      uint64_t v42 = v79;
    }
    else {
      uint64_t v42 = 0x6E776F6E6B6E753CLL;
    }
    if (v80) {
      unint64_t v43 = v80;
    }
    else {
      unint64_t v43 = 0xE90000000000003ELL;
    }
    swift_bridgeObjectRetain();
    uint64_t v90 = sub_25A3A36A4(v42, v43, (uint64_t *)&v81);
    sub_25A50FB00();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v39 + 22) = 2080;
    if (*(void *)(v34 + 80))
    {
      uint64_t v44 = *(void *)(v34 + 72);
      unint64_t v45 = *(void *)(v34 + 80);
      char v46 = v75;
      long long v47 = v70;
    }
    else
    {
      char v46 = v75;
      long long v47 = v70;
      unint64_t v45 = 0xE90000000000003ELL;
      uint64_t v44 = 0x6E776F6E6B6E753CLL;
    }
    swift_bridgeObjectRetain();
    uint64_t v90 = sub_25A3A36A4(v44, v45, (uint64_t *)&v81);
    sub_25A50FB00();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25A380000, v47, (os_log_type_t)v72, "[%{public}s] Attempting to symbolicate %s in %s", (uint8_t *)v39, 0x20u);
    uint64_t v50 = v71;
    swift_arrayDestroy();
    MEMORY[0x26113F070](v50, -1, -1);
    MEMORY[0x26113F070](v39, -1, -1);
  }
  else
  {
    sub_25A470630((uint64_t)v12, type metadata accessor for CrashReport);

    swift_release_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    char v46 = v75;
  }
  long long v81 = v74;
  uint64_t v82 = v79;
  unint64_t v83 = v80;
  uint64_t v84 = v78;
  char v85 = v76;
  uint64_t v86 = v17;
  uint64_t v87 = v18;
  uint64_t v88 = v77;
  char v89 = v46;
  uint64_t v72 = v34;
  uint64_t v51 = sub_25A46B35C();
  uint64_t v53 = v52;
  uint64_t v55 = v54;
  char v57 = v56;
  if (v52 == 1)
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
LABEL_27:
    uint64_t v58 = v18;
    goto LABEL_28;
  }
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  if (!v53)
  {
    swift_bridgeObjectRetain();
    sub_25A46FDBC(v51, 0);
    goto LABEL_27;
  }
  sub_25A39915C(v51, v53);
  uint64_t v17 = v51;
  uint64_t v58 = v53;
LABEL_28:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v53 == 1)
  {
    uint64_t v59 = v17;
    long long v60 = v73;
    swift_bridgeObjectRelease();
    char v61 = v75;
    uint64_t v62 = v77;
  }
  else
  {
    uint64_t v63 = v51;
    uint64_t v59 = v17;
    long long v60 = v73;
    sub_25A46FDBC(v63, v53);
    swift_bridgeObjectRelease();
    uint64_t v62 = v77;
    if ((v57 & 1) == 0) {
      uint64_t v62 = v55;
    }
    char v61 = v57 & v75;
  }
  long long v64 = v74;
  long long v81 = v74;
  uint64_t v82 = v79;
  unint64_t v83 = v80;
  uint64_t v84 = v78;
  char v65 = v76;
  char v85 = v76;
  uint64_t v71 = v59;
  uint64_t v86 = v59;
  uint64_t v87 = v58;
  uint64_t v88 = v62;
  char v89 = v61;
  uint64_t v77 = v58;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v90 = *v60;
  uint64_t *v60 = 0x8000000000000000;
  sub_25A3FED2C(&v81, v64, *((uint64_t *)&v64 + 1), isUniquelyReferenced_nonNull_native);
  uint64_t *v60 = v90;
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  *(_OWORD *)a5 = v64;
  unint64_t v67 = v80;
  *(void *)(a5 + 16) = v79;
  *(void *)(a5 + 24) = v67;
  *(void *)(a5 + 32) = v78;
  *(unsigned char *)(a5 + 40) = v65;
  uint64_t v68 = v77;
  *(void *)(a5 + 48) = v71;
  *(void *)(a5 + 56) = v68;
  *(void *)(a5 + 64) = v62;
  *(unsigned char *)(a5 + 72) = v61;
  return result;
}

uint64_t sub_25A46B35C()
{
  uint64_t v1 = *(void *)(v0 + 8);
  CSSymbolicatorGetSymbolOwner();
  if (CSIsNull()) {
    return 0;
  }
  uint64_t BaseAddress = CSSymbolOwnerGetBaseAddress();
  if ((v1 & 0x8000000000000000) == 0)
  {
    if (__CFADD__(BaseAddress, v1))
    {
      __break(1u);
    }
    else if (BaseAddress + v1)
    {
      CSSymbolOwnerGetSymbolWithAddress();
      if (CSIsNull()) {
        return 0;
      }
      uint64_t v4 = swift_allocObject();
      *(void *)(v4 + 24) = 0;
      *(void *)(v4 + 16) = 0;
      uint64_t v5 = swift_allocObject();
      *(void *)(v5 + 16) = 0;
      *(unsigned char *)(v5 + 24) = 1;
      uint64_t v6 = swift_allocObject();
      *(void *)(v6 + 16) = v4;
      *(void *)(v6 + 24) = v5;
      aBlock[4] = sub_25A46FE58;
      aBlock[5] = v6;
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_25A46BAC0;
      aBlock[3] = &block_descriptor_60;
      uint64_t v7 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      CSSymbolOwnerForEachStackFrameAtAddress();
      _Block_release(v7);
      swift_beginAccess();
      uint64_t v2 = *(void *)(v4 + 16);
      swift_beginAccess();
      swift_bridgeObjectRetain();
      swift_release();
      swift_release();
      return v2;
    }
    __break(1u);
  }
  uint64_t result = sub_25A510050();
  __break(1u);
  return result;
}

uint64_t sub_25A46B5CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[6] = a3;
  v4[7] = a4;
  v4[4] = a1;
  v4[5] = a2;
  return MEMORY[0x270FA2498](sub_25A46B5EC, a2, 0);
}

uint64_t sub_25A46B5EC()
{
  uint64_t v1 = sub_25A43107C();
  *(void *)(v0 + 64) = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v2;
  void *v2 = v0;
  v2[1] = sub_25A46B6A4;
  return MEMORY[0x270FA1FD0](v0 + 16, v1, &type metadata for BuiltProductPathResolver.Cache);
}

uint64_t sub_25A46B6A4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40);
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x270FA2498](sub_25A46B7D0, v1, 0);
}

uint64_t sub_25A46B7D0()
{
  uint64_t v1 = sub_25A431AC4(v0[6], v0[7], v0[2], v0[3]);
  uint64_t v3 = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v0[10] = v1;
  v0[11] = v3;
  return MEMORY[0x270FA2498](sub_25A46B868, 0, 0);
}

uint64_t sub_25A46B868()
{
  *(_OWORD *)*(void *)(v0 + 32) = *(_OWORD *)(v0 + 80);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_25A46B88C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = sub_25A4E3628(*a1);
  if (v3[2])
  {
    uint64_t v5 = v3[4];
    uint64_t v4 = v3[5];
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v4 = 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v5;
  a2[1] = v4;
  return result;
}

uint64_t sub_25A46B8EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = CSIsNull();
  if (result) {
    return result;
  }
  if (CSSourceInfoGetPath())
  {
    uint64_t v10 = sub_25A50EDB0();
    uint64_t v11 = v9;
    if (v10 == 0xD000000000000014 && v9 == 0x800000025A520710)
    {
      unint64_t v12 = 1;
    }
    else if (sub_25A510370())
    {
      unint64_t v12 = 1;
    }
    else
    {
      unint64_t v12 = 2;
    }
    swift_beginAccess();
    uint64_t v13 = *(void *)(a5 + 24);
    if (v13)
    {
      if (*(void *)(a5 + 16) == 0xD000000000000014 && v13 == 0x800000025A520710)
      {
        if (v12 < 2) {
          goto LABEL_17;
        }
      }
      else if ((sub_25A510370() & 1) == 0 || v12 <= 1)
      {
        goto LABEL_17;
      }
    }
    swift_beginAccess();
    *(void *)(a5 + 16) = v10;
    *(void *)(a5 + 24) = v11;
LABEL_17:
    swift_bridgeObjectRelease();
  }
  uint64_t LineNumber = CSSourceInfoGetLineNumber();
  uint64_t result = swift_beginAccess();
  if ((*(unsigned char *)(a6 + 24) & 1) != 0 || *(uint64_t *)(a6 + 16) <= 0 && LineNumber)
  {
    uint64_t result = swift_beginAccess();
    *(void *)(a6 + 16) = LineNumber;
    *(unsigned char *)(a6 + 24) = 0;
  }
  return result;
}

uint64_t sub_25A46BAC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v9(a2, a3, a4, a5);

  return swift_release();
}

void sub_25A46BB38(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A419808);
  uint64_t v17 = swift_allocObject();
  *(_DWORD *)(v17 + 24) = 0;
  *(void *)(v17 + 16) = a2;
  v8[13] = v17;
  v8[14] = a7;
  v8[15] = a8;
  unsigned char v8[16] = a3;
  v8[17] = a4;
  v8[18] = a5;
  v8[19] = a6;
  swift_retain();
  swift_retain();
  uint64_t v18 = sub_25A39D6A8(a1);
  uint64_t v19 = (void *)swift_allocObject();
  void v19[2] = 0;
  uint64_t v19[3] = 0;
  void v19[4] = sub_25A470140;
  v19[5] = v18;
  uint64_t v20 = *(os_unfair_lock_s **)(a2 + 88);
  swift_retain_n();
  swift_retain();
  os_unfair_lock_lock(v20 + 25);
  sub_25A470174((uint64_t)&v20[4], (uint64_t)&v44);
  os_unfair_lock_unlock(v20 + 25);
  swift_release();
  uint64_t v21 = v51;
  unsigned int v22 = HIBYTE(v51);
  uint64_t v43 = a2;
  if (v22 <= 0xFE)
  {
    id v24 = v44;
    uint64_t v23 = v45;
    uint64_t v25 = v47;
    uint64_t v27 = v48;
    uint64_t v26 = v49;
    uint64_t v28 = v50;
    uint64_t v41 = v46;
    if (v22)
    {
      if (v22 != 1)
      {
LABEL_8:
        sub_25A4701F0(v24, v23, v41, v25, v27, v26, v28, v21);
        sub_25A4701F0(v24, v23, v41, v25, v27, v26, v28, v21);
        a2 = v43;
        goto LABEL_9;
      }
      LOBYTE(v52[0]) = 1;
      sub_25A39F434(v44, v45, v46, v47, v48, v49, v50, v51, 1);
      id v29 = v24;
    }
    else
    {
      LOBYTE(v52[0]) = 0;
      sub_25A39F434(v44, v45, v46, v47, v48, v49, v50, v51, 0);
      swift_bridgeObjectRetain();
    }
    unsigned __int8 v30 = v52[0];
    if (LOBYTE(v52[0]) != 255)
    {
      swift_retain();
      sub_25A470228(v24, v30);
      sub_25A46C430(v24, v30 & 1);
      sub_25A470254(v24, v30);
      swift_release();
      sub_25A470254(v24, v30);
    }
    goto LABEL_8;
  }
LABEL_9:
  swift_release();
  swift_release_n();
  uint64_t v31 = (void *)swift_allocObject();
  v31[2] = 0;
  v31[3] = 0;
  v31[4] = sub_25A470190;
  v31[5] = v18;
  unint64_t v32 = *(os_unfair_lock_s **)(a2 + 88);
  MEMORY[0x270FA5388](v31);
  swift_retain_n();
  swift_retain();
  os_unfair_lock_lock(v32 + 25);
  sub_25A470948((uint64_t)&v32[4], (uint64_t)&v44);
  os_unfair_lock_unlock(v32 + 25);
  swift_release();
  uint64_t v33 = v51;
  if (HIBYTE(v51) <= 0xFEu)
  {
    id v34 = v44;
    uint64_t v35 = v45;
    uint64_t v36 = v46;
    uint64_t v37 = v47;
    uint64_t v39 = v48;
    uint64_t v38 = v49;
    uint64_t v40 = v50;
    if (v51 >= 0x200u)
    {
      v52[0] = (uint64_t)v44;
      v52[1] = v45;
      char v53 = v46;
      uint64_t v54 = v47;
      uint64_t v55 = v48;
      uint64_t v56 = v49;
      uint64_t v57 = v50;
      char v58 = v51;
      uint64_t v42 = v46;
      swift_retain();
      sub_25A46D0C8(v52);
      swift_release();
      uint64_t v36 = v42;
    }
    sub_25A4701F0(v34, v35, v36, v37, v39, v38, v40, v33);
  }
  swift_release();
  swift_release_n();
  swift_release();
  swift_release();
}

void sub_25A46BFA0(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A419840);
  uint64_t v17 = swift_allocObject();
  *(_DWORD *)(v17 + 24) = 0;
  *(void *)(v17 + 16) = a2;
  v8[13] = v17;
  v8[14] = a7;
  v8[15] = a8;
  unsigned char v8[16] = a3;
  v8[17] = a4;
  v8[18] = a5;
  v8[19] = a6;
  swift_retain();
  swift_retain();
  uint64_t v18 = sub_25A39D958(a1);
  uint64_t v19 = (void *)swift_allocObject();
  void v19[2] = 0;
  uint64_t v19[3] = 0;
  void v19[4] = sub_25A470504;
  v19[5] = v18;
  uint64_t v20 = *(os_unfair_lock_s **)(a2 + 88);
  swift_retain_n();
  swift_retain();
  os_unfair_lock_lock(v20 + 25);
  sub_25A3F60E0((uint64_t)&v20[4], (uint64_t)&v45);
  os_unfair_lock_unlock(v20 + 25);
  swift_release();
  __int16 v21 = v52;
  unsigned int v22 = HIBYTE(v52);
  uint64_t v44 = a2;
  if (v22 <= 0xFE)
  {
    id v23 = v45;
    id v24 = v46;
    int v25 = v47;
    int v26 = v48;
    int v27 = v51;
    int v42 = v49;
    int v41 = v50;
    if (v22)
    {
      if (v22 != 1)
      {
LABEL_8:
        sub_25A3F5230(v23, v24, v25, v26, v42, v41, v27, v21);
        sub_25A3F5230(v23, v24, v25, v26, v42, v41, v27, v21);
        a2 = v44;
        goto LABEL_9;
      }
      LOBYTE(v53[0]) = 1;
      sub_25A39F4D8(v45, v46, v47, v48, v49, v50, v51, v52, 1);
      id v28 = v23;
      uint64_t v29 = 0;
    }
    else
    {
      LOBYTE(v53[0]) = 0;
      sub_25A39F4D8(v45, v46, v47, v48, v49, v50, v51, v52, 0);
      swift_bridgeObjectRetain();
      uint64_t v29 = (uint64_t)v24;
    }
    unsigned __int8 v30 = v53[0];
    if (LOBYTE(v53[0]) != 255)
    {
      swift_retain();
      sub_25A3F5138(v23, v29, v30);
      sub_25A46CA50(v23, v29, v30 & 1);
      sub_25A3F5208(v23, v29, v30);
      swift_release();
      sub_25A3F5208(v23, v29, v30);
    }
    goto LABEL_8;
  }
LABEL_9:
  swift_release();
  swift_release_n();
  uint64_t v31 = (void *)swift_allocObject();
  v31[2] = 0;
  v31[3] = 0;
  v31[4] = sub_25A470524;
  v31[5] = v18;
  unint64_t v32 = *(os_unfair_lock_s **)(a2 + 88);
  MEMORY[0x270FA5388](v31);
  swift_retain_n();
  swift_retain();
  os_unfair_lock_lock(v32 + 25);
  sub_25A3F60E0((uint64_t)&v32[4], (uint64_t)&v45);
  os_unfair_lock_unlock(v32 + 25);
  swift_release();
  __int16 v33 = v52;
  if (HIBYTE(v52) <= 0xFEu)
  {
    id v34 = v45;
    id v35 = v46;
    int v36 = v47;
    int v37 = v48;
    int v39 = v49;
    int v38 = v50;
    int v40 = v51;
    if (v52 >= 0x200u)
    {
      v53[0] = (uint64_t)v45;
      v53[1] = (uint64_t)v46;
      char v54 = v47;
      uint64_t v55 = v48;
      uint64_t v56 = v49;
      uint64_t v57 = v50;
      uint64_t v58 = v51;
      char v59 = v52;
      int v43 = v47;
      swift_retain();
      sub_25A46D210(v53);
      swift_release();
      int v36 = v43;
    }
    sub_25A3F5230(v34, v35, v36, v37, v39, v38, v40, v33);
  }
  swift_release();
  swift_release_n();
  swift_release();
  swift_release();
}

void sub_25A46C430(void *a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_25A50E750();
  uint64_t v29 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_25A50E790();
  uint64_t v27 = *(void *)(v9 - 8);
  uint64_t v28 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v2 + 104);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v12 + 24));
  sub_25A470988((unint64_t *)(v12 + 16), (BOOL *)&aBlock);
  os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 24));
  int v13 = aBlock;
  swift_release();
  if (v13 == 1)
  {
    int v14 = a2 & 1;
    uint64_t v15 = 128;
    uint64_t v16 = 136;
    if (v14) {
      uint64_t v16 = 152;
    }
    uint64_t v17 = *(void *)(v3 + v16);
    if (v14) {
      uint64_t v15 = 144;
    }
    uint64_t v18 = *(void **)(v3 + v15);
    int v37 = a1;
    BOOL v38 = v14 != 0;
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = v3;
    sub_25A39F4F8((uint64_t)&v37, v19 + 24, &qword_26A419810);
    long long aBlock = v18;
    uint64_t v32 = v17;
    swift_retain();
    sub_25A3A4A8C(a1, v14);
    swift_retain();
    sub_25A3A4A8C(a1, v14);
    swift_retain();
    sub_25A3A4A8C(a1, v14);
    sub_25A3EE304(v18);
    if (ExecutionLane.isCurrentLane.getter())
    {
      sub_25A46D358(v3, (uint64_t)a1, v14);
      swift_release();
LABEL_13:
      swift_release();
      sub_25A3A4ABC(a1, v14);
      swift_release();
      sub_25A3A4ABC(a1, v14);
      uint64_t v22 = (uint64_t)v18;
      goto LABEL_14;
    }
    if (v18)
    {
      uint64_t v26 = v17;
      if (v18 != (void *)1)
      {
        id v35 = sub_25A4702C4;
        uint64_t v36 = v19;
        long long aBlock = (void *)MEMORY[0x263EF8330];
        uint64_t v32 = 1107296256;
        __int16 v33 = sub_25A3BE05C;
        id v34 = &block_descriptor_82;
        uint64_t v25 = (uint64_t)_Block_copy(&aBlock);
        sub_25A3EE304(v18);
        swift_retain();
        sub_25A50E770();
        uint64_t v30 = MEMORY[0x263F8EE78];
        uint64_t v24 = sub_25A46F710((unint64_t *)&qword_26A4168D0, MEMORY[0x263F8F030]);
        __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
        sub_25A46F758(qword_26A4168E0, &qword_26A4168D8);
        sub_25A50FC90();
        id v23 = (const void *)v25;
        MEMORY[0x26113D8E0](0, v11, v8, v25);
        _Block_release(v23);
        sub_25A3EE314(v18);
        (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v6);
        (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v28);
        swift_release();
        swift_release();
        goto LABEL_13;
      }
      sub_25A3DD980();
      uint64_t v25 = sub_25A50F8D0();
      id v35 = sub_25A4702C4;
      uint64_t v36 = v19;
      long long aBlock = (void *)MEMORY[0x263EF8330];
      uint64_t v32 = 1107296256;
      __int16 v33 = sub_25A3BE05C;
      id v34 = &block_descriptor_85;
      uint64_t v24 = (uint64_t)_Block_copy(&aBlock);
      swift_retain();
      swift_release();
      sub_25A50E770();
      long long aBlock = (void *)MEMORY[0x263F8EE78];
      sub_25A46F710((unint64_t *)&qword_26A4168D0, MEMORY[0x263F8F030]);
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
      sub_25A46F758(qword_26A4168E0, &qword_26A4168D8);
      sub_25A50FC90();
      __int16 v21 = (const void *)v24;
      uint64_t v20 = (void *)v25;
      MEMORY[0x26113D8E0](0, v11, v8, v24);
      _Block_release(v21);

      (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v6);
      (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v28);
      swift_release();
      swift_release();
      sub_25A3A4ABC(a1, v14);
      swift_release();
      sub_25A3A4ABC(a1, v14);
      uint64_t v22 = 1;
    }
    else
    {
      sub_25A46D358(v3, (uint64_t)a1, v14);
      swift_release();
      swift_release();
      sub_25A3A4ABC(a1, v14);
      swift_release();
      sub_25A3A4ABC(a1, v14);
      uint64_t v22 = 0;
    }
LABEL_14:
    sub_25A3EE314((id)v22);
  }
}

void sub_25A46CA50(void *a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_25A50E750();
  uint64_t v32 = *(void *)(v8 - 8);
  uint64_t v33 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_25A50E790();
  uint64_t v30 = *(void *)(v11 - 8);
  uint64_t v31 = v11;
  MEMORY[0x270FA5388](v11);
  int v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v3 + 104);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v14 + 24));
  sub_25A46F23C((unint64_t *)(v14 + 16), (BOOL *)&aBlock);
  os_unfair_lock_unlock((os_unfair_lock_t)(v14 + 24));
  int v15 = aBlock;
  swift_release();
  if (v15 == 1)
  {
    int v16 = a3 & 1;
    uint64_t v17 = 128;
    if (v16) {
      uint64_t v17 = 144;
    }
    uint64_t v18 = 136;
    if (v16) {
      uint64_t v18 = 152;
    }
    uint64_t v19 = *(void *)(v4 + v18);
    uint64_t v20 = *(void **)(v4 + v17);
    v41[0] = a1;
    v41[1] = a2;
    BOOL v42 = v16 != 0;
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = v4;
    sub_25A39F4F8((uint64_t)v41, v21 + 24, &qword_26A415888);
    long long aBlock = v20;
    uint64_t v36 = v19;
    swift_retain();
    sub_25A3F5150(a1, a2, v16);
    swift_retain();
    sub_25A3F5150(a1, a2, v16);
    swift_retain();
    sub_25A3F5150(a1, a2, v16);
    sub_25A3EE304(v20);
    if (ExecutionLane.isCurrentLane.getter())
    {
      sub_25A46D464(v4, (uint64_t)a1, a2, v16);
      swift_release();
      swift_release();
      sub_25A3F5220(a1, a2, v16);
      swift_release();
      sub_25A3F5220(a1, a2, v16);
      uint64_t v22 = (uint64_t)v20;
    }
    else if (v20)
    {
      uint64_t v29 = v19;
      if (v20 == (void *)1)
      {
        sub_25A3DD980();
        uint64_t v28 = sub_25A50F8D0();
        int v39 = sub_25A4705A8;
        uint64_t v40 = v21;
        long long aBlock = (void *)MEMORY[0x263EF8330];
        uint64_t v36 = 1107296256;
        int v37 = sub_25A3BE05C;
        BOOL v38 = &block_descriptor_116;
        uint64_t v27 = (uint64_t)_Block_copy(&aBlock);
        swift_retain();
        swift_release();
        sub_25A50E770();
        long long aBlock = (void *)MEMORY[0x263F8EE78];
        sub_25A46F710((unint64_t *)&qword_26A4168D0, MEMORY[0x263F8F030]);
        __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
        sub_25A46F758(qword_26A4168E0, &qword_26A4168D8);
        uint64_t v23 = v33;
        sub_25A50FC90();
        uint64_t v25 = (const void *)v27;
        uint64_t v24 = (void *)v28;
        MEMORY[0x26113D8E0](0, v13, v10, v27);
        _Block_release(v25);

        (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v23);
        (*(void (**)(char *, uint64_t))(v30 + 8))(v13, v31);
        swift_release();
        swift_release();
        sub_25A3F5220(a1, a2, v16);
        swift_release();
        sub_25A3F5220(a1, a2, v16);
        uint64_t v22 = 1;
      }
      else
      {
        int v39 = sub_25A4705A8;
        uint64_t v40 = v21;
        long long aBlock = (void *)MEMORY[0x263EF8330];
        uint64_t v36 = 1107296256;
        int v37 = sub_25A3BE05C;
        BOOL v38 = &block_descriptor_113;
        uint64_t v28 = (uint64_t)_Block_copy(&aBlock);
        sub_25A3EE304(v20);
        swift_retain();
        sub_25A50E770();
        uint64_t v34 = MEMORY[0x263F8EE78];
        uint64_t v27 = sub_25A46F710((unint64_t *)&qword_26A4168D0, MEMORY[0x263F8F030]);
        __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
        sub_25A46F758(qword_26A4168E0, &qword_26A4168D8);
        sub_25A50FC90();
        uint64_t v26 = (const void *)v28;
        MEMORY[0x26113D8E0](0, v13, v10, v28);
        _Block_release(v26);
        sub_25A3EE314(v20);
        (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v33);
        (*(void (**)(char *, uint64_t))(v30 + 8))(v13, v31);
        swift_release();
        swift_release();
        swift_release();
        sub_25A3F5220(a1, a2, v16);
        swift_release();
        sub_25A3F5220(a1, a2, v16);
        uint64_t v22 = (uint64_t)v20;
      }
    }
    else
    {
      sub_25A46D464(v4, (uint64_t)a1, a2, v16);
      swift_release();
      swift_release();
      sub_25A3F5220(a1, a2, v16);
      swift_release();
      sub_25A3F5220(a1, a2, v16);
      uint64_t v22 = 0;
    }
    sub_25A3EE314((id)v22);
  }
}

uint64_t sub_25A46D0C8(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = *((unsigned __int8 *)a1 + 16);
  uint64_t v6 = a1[3];
  uint64_t v13 = a1[5];
  uint64_t v14 = a1[4];
  uint64_t v12 = a1[6];
  char v11 = *((unsigned char *)a1 + 56);
  uint64_t v7 = *(void *)(v1 + 104);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 24));
  sub_25A4708DC((uint64_t *)(v7 + 16), v17);
  os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 24));
  uint64_t v8 = v17[0];
  uint64_t result = swift_release();
  if (v8)
  {
    v17[0] = v3;
    v17[1] = v4;
    void v17[2] = v5;
    v17[3] = v6;
    v17[4] = v14;
    v17[5] = v13;
    v17[6] = v12;
    char v18 = v11;
    char v19 = 2;
    swift_retain();
    sub_25A39E1AC((uint64_t)v17);
    long long v10 = *((_OWORD *)a1 + 1);
    v15[0] = *(_OWORD *)a1;
    v15[1] = v10;
    v16[0] = *((_OWORD *)a1 + 2);
    *(_OWORD *)((char *)v16 + 9) = *(_OWORD *)((char *)a1 + 41);
    (*(void (**)(_OWORD *))(*(void *)v8 + 192))(v15);
    return swift_release_n();
  }
  return result;
}

uint64_t sub_25A46D210(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = *((unsigned __int8 *)a1 + 16);
  uint64_t v6 = a1[3];
  uint64_t v13 = a1[5];
  uint64_t v14 = a1[4];
  uint64_t v12 = a1[6];
  char v11 = *((unsigned char *)a1 + 56);
  uint64_t v7 = *(void *)(v1 + 104);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 24));
  sub_25A46F220((uint64_t *)(v7 + 16), v17);
  os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 24));
  uint64_t v8 = v17[0];
  uint64_t result = swift_release();
  if (v8)
  {
    v17[0] = v3;
    v17[1] = v4;
    void v17[2] = v5;
    v17[3] = v6;
    v17[4] = v14;
    v17[5] = v13;
    v17[6] = v12;
    char v18 = v11;
    char v19 = 2;
    swift_retain();
    sub_25A39E67C((uint64_t)v17);
    long long v10 = *((_OWORD *)a1 + 1);
    v15[0] = *(_OWORD *)a1;
    v15[1] = v10;
    v16[0] = *((_OWORD *)a1 + 2);
    *(_OWORD *)((char *)v16 + 9) = *(_OWORD *)((char *)a1 + 41);
    (*(void (**)(_OWORD *))(*(void *)v8 + 192))(v15);
    return swift_release_n();
  }
  return result;
}

void sub_25A46D358(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v13 = a2;
  char v14 = a3 & 1;
  uint64_t v4 = *(void *)(a1 + 104);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 24));
  sub_25A4709A0((unint64_t *)(v4 + 16), v15);
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 24));
  unint64_t v5 = v15[0];
  swift_release();
  sub_25A4705B8(v5);
  if (v5 != 1)
  {
    (*(void (**)(void **__return_ptr, uint64_t *))(a1 + 112))(&v10, &v13);
    uint64_t v6 = v10;
    uint64_t v7 = v11;
    char v8 = v12;
    if (v12) {
      unint64_t v9 = 0;
    }
    else {
      unint64_t v9 = v11;
    }
    v15[0] = (unint64_t)v10;
    v15[1] = v9;
    long long v16 = 0u;
    memset(v17, 0, 25);
    v17[25] = v12;
    sub_25A3F5150(v10, v11, v12);
    sub_25A39E1AC((uint64_t)v15);
    sub_25A3F5220(v6, v7, v8);
    sub_25A3F5220(v6, v7, v8);
  }
}

void sub_25A46D464(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  v17[0] = a2;
  v17[1] = a3;
  char v18 = a4 & 1;
  uint64_t v5 = *(void *)(a1 + 104);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 24));
  sub_25A46F294((unint64_t *)(v5 + 16), v19);
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 24));
  unint64_t v6 = v19[0];
  swift_release();
  sub_25A4705B8(v6);
  if (v6 != 1)
  {
    (*(void (**)(void **__return_ptr, void *))(a1 + 112))(&v13, v17);
    uint64_t v7 = v13;
    uint64_t v8 = v14;
    uint64_t v9 = v15;
    char v10 = v16;
    if (v16) {
      unint64_t v11 = 0;
    }
    else {
      unint64_t v11 = v14;
    }
    if (v16) {
      unint64_t v12 = 0;
    }
    else {
      unint64_t v12 = v15;
    }
    v19[0] = (unint64_t)v13;
    v19[1] = v11;
    void v19[2] = v12;
    long long v20 = 0u;
    long long v21 = 0u;
    char v22 = 0;
    char v23 = v16;
    sub_25A3F4E98(v13, v14, v15, v16);
    sub_25A39E67C((uint64_t)v19);
    sub_25A3F4F88(v7, v8, v9, v10);
    sub_25A3F4F88(v7, v8, v9, v10);
  }
}

uint64_t sub_25A46D58C()
{
  uint64_t v1 = (int *)(type metadata accessor for CrashReport(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  unint64_t v4 = (((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = v0 + v3;
  uint64_t v6 = sub_25A50E4C0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = v5 + v1[10];
  uint64_t v8 = sub_25A50E470();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void **)(v0 + v4);
  if ((unint64_t)v9 >= 2) {

  }
  swift_release();

  return MEMORY[0x270FA0238](v0, ((v4 + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_25A46D748()
{
  uint64_t v1 = *(void *)(type metadata accessor for CrashReport(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(v0 + v3);
  uint64_t v6 = *(void *)(v0 + ((v4 + 23) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v7 = *(void **)(v0 + v4);
  uint64_t v8 = *(void *)(v0 + v4 + 8);

  return sub_25A468A9C(v0 + v2, v5, v7, v8, v6);
}

uint64_t sub_25A46D7F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4159A8);
  MEMORY[0x270FA5388](v8 - 8);
  char v10 = &v25[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_25A393828(a2, (uint64_t)v10, &qword_26A4159A8);
  unint64_t v11 = (void *)swift_allocObject();
  v11[2] = 0;
  v11[3] = 0;
  void v11[4] = a3;
  void v11[5] = a4;
  v11[6] = a1;
  swift_retain();
  swift_retain();
  uint64_t v12 = sub_25A38ED10((uint64_t)v10, (uint64_t)&unk_26A419838, (uint64_t)v11);
  uint64_t v13 = *(void *)(a1 + 16);
  unint64_t v14 = (void *)swift_allocObject();
  void v14[2] = 0;
  v14[3] = 0;
  void v14[4] = sub_25A4704EC;
  v14[5] = v12;
  unint64_t v15 = *(os_unfair_lock_s **)(v13 + 88);
  uint64_t v26 = sub_25A4704F8;
  uint64_t v27 = v14;
  swift_retain_n();
  swift_retain();
  os_unfair_lock_lock(v15 + 25);
  sub_25A3F511C((uint64_t)&v15[4], (uint64_t)v28);
  os_unfair_lock_unlock(v15 + 25);
  swift_release();
  __int16 v16 = v34;
  if (HIBYTE(v34) <= 0xFEu)
  {
    uint64_t v17 = (void *)v28[0];
    char v18 = (void *)v28[1];
    int v19 = v29;
    int v20 = v30;
    int v21 = v31;
    int v22 = v32;
    int v23 = v33;
    if (v34 >= 0x200u)
    {
      swift_retain();
      sub_25A50F3A0();
      swift_release();
    }
    sub_25A3F5230(v17, v18, v19, v20, v21, v22, v23, v16);
  }
  swift_release();
  return swift_release_n();
}

uint64_t sub_25A46DA40(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  v6[29] = a6;
  uint64_t v8 = sub_25A50F270();
  v6[30] = v8;
  v6[31] = *(void *)(v8 - 8);
  v6[32] = swift_task_alloc();
  unint64_t v11 = (uint64_t (*)(void *))((char *)a4 + *a4);
  uint64_t v9 = (void *)swift_task_alloc();
  v6[33] = v9;
  *uint64_t v9 = v6;
  v9[1] = sub_25A46DB84;
  return v11(v6 + 26);
}

uint64_t sub_25A46DB84()
{
  *(void *)(*(void *)v1 + 272) = v0;
  swift_task_dealloc();
  if (v0) {
    unint64_t v2 = sub_25A46DD40;
  }
  else {
    unint64_t v2 = sub_25A46DC98;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_25A46DC98()
{
  uint64_t v1 = *(void *)(v0 + 216);
  *(void *)(v0 + 80) = *(void *)(v0 + 208);
  *(void *)(v0 + 88) = v1;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 122) = 0u;
  swift_bridgeObjectRetain();
  sub_25A3BC844(v0 + 80);
  swift_bridgeObjectRelease_n();
  swift_task_dealloc();
  unint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_25A46DD40()
{
  uint64_t v1 = *(void **)(v0 + 272);
  *(void *)(v0 + 224) = v1;
  id v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415838);
  char v3 = swift_dynamicCast();
  uint64_t v4 = *(void **)(v0 + 272);
  if (v3)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 248) + 8))(*(void *)(v0 + 256), *(void *)(v0 + 240));
    *(void *)(v0 + 144) = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/Previ"
                            "ewsFoundation/Future.swift";
    *(void *)(v0 + 152) = 118;
    *(unsigned char *)(v0 + 160) = 2;
    *(_OWORD *)(v0 + 168) = xmmword_25A518E80;
    *(void *)(v0 + 184) = "init(dsoHandle:file:line:column:function:priority:operation:)";
    *(void *)(v0 + 192) = 61;
    *(unsigned char *)(v0 + 200) = 2;
    sub_25A50187C((long long *)(v0 + 144));
  }
  else
  {
    *(void *)(v0 + 16) = v4;
    *(_OWORD *)(v0 + 24) = 0u;
    *(_OWORD *)(v0 + 40) = 0u;
    *(_OWORD *)(v0 + 56) = 0u;
    *(_WORD *)(v0 + 72) = 256;
    id v5 = v4;
    sub_25A3BC844(v0 + 16);
  }
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_25A46DE94(void *a1, char a2, uint64_t (*a3)(long long *))
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4197D8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (void *)((char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a2)
  {
    *(void *)&long long v12 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFou"
                      "ndation/FlatMapFuture.swift";
    *((void *)&v12 + 1) = 125;
    char v13 = 2;
    long long v14 = xmmword_25A518E90;
    unint64_t v15 = "then(callsite:on:transform:)";
    uint64_t v16 = 28;
    char v17 = 2;
    *uint64_t v8 = a1;
    swift_storeEnumTagMultiPayload();
    id v10 = a1;
    uint64_t v9 = sub_25A467428(&v12, (uint64_t)v8);
    sub_25A384BCC((uint64_t)v8, &qword_26A4197D8);
  }
  else
  {
    *(void *)&long long v12 = a1;
    swift_bridgeObjectRetain();
    uint64_t v9 = a3(&v12);
    sub_25A3A4ABC(a1, 0);
  }
  return v9;
}

void sub_25A46DFD0(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[13] = a7;
  v8[14] = a8;
  v8[15] = a3;
  unsigned char v8[16] = a4;
  v8[17] = a5;
  v8[18] = a6;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4197A8);
  uint64_t v11 = swift_allocObject();
  *(_DWORD *)(v11 + 24) = 0;
  *(void *)(v11 + 16) = a2;
  v8[19] = v11;
  swift_retain();
  swift_retain();
  uint64_t v12 = sub_25A39D318(a1);
  char v13 = (void *)swift_allocObject();
  void v13[2] = 0;
  v13[3] = 0;
  v13[4] = sub_25A46F830;
  v13[5] = v12;
  long long v14 = *(os_unfair_lock_s **)(a2 + 88);
  swift_retain_n();
  swift_retain();
  os_unfair_lock_lock(v14 + 25);
  sub_25A46F864((uint64_t)&v14[4], (uint64_t)&v36);
  os_unfair_lock_unlock(v14 + 25);
  swift_release();
  uint64_t v15 = v42;
  unsigned int v16 = HIBYTE(v42);
  uint64_t v35 = a2;
  if (v16 <= 0xFE)
  {
    long long v17 = v36;
    uint64_t v18 = v38;
    uint64_t v20 = v39;
    uint64_t v19 = v40;
    uint64_t v21 = v41;
    uint64_t v33 = v37;
    if (v16)
    {
      if (v16 != 1)
      {
LABEL_8:
        sub_25A4701F0((void *)v17, *((uint64_t *)&v17 + 1), v33, v18, v20, v19, v21, v15);
        sub_25A4701F0((void *)v17, *((uint64_t *)&v17 + 1), v33, v18, v20, v19, v21, v15);
        a2 = v35;
        goto LABEL_9;
      }
      LOBYTE(v43) = 1;
      sub_25A39F434((id)v36, *((uint64_t *)&v36 + 1), v37, v38, v39, v40, v41, v42, 1);
      id v22 = (id)v17;
    }
    else
    {
      LOBYTE(v43) = 0;
      sub_25A39F434((id)v36, *((uint64_t *)&v36 + 1), v37, v38, v39, v40, v41, v42, 0);
      swift_bridgeObjectRetain();
    }
    unsigned __int8 v23 = v43;
    if (v43 != 255)
    {
      swift_retain();
      sub_25A470228((id)v17, v23);
      sub_25A46E424(v17, v23 & 1);
      sub_25A470254((void *)v17, v23);
      swift_release();
      sub_25A470254((void *)v17, v23);
    }
    goto LABEL_8;
  }
LABEL_9:
  swift_release();
  swift_release_n();
  uint64_t v24 = (void *)swift_allocObject();
  uint64_t v24[2] = 0;
  void v24[3] = 0;
  v24[4] = sub_25A46F880;
  v24[5] = v12;
  uint64_t v25 = *(os_unfair_lock_s **)(a2 + 88);
  MEMORY[0x270FA5388](v24);
  swift_retain_n();
  swift_retain();
  os_unfair_lock_lock(v25 + 25);
  sub_25A470930((uint64_t)&v25[4], (uint64_t)&v36);
  os_unfair_lock_unlock(v25 + 25);
  swift_release();
  uint64_t v26 = v42;
  if (HIBYTE(v42) <= 0xFEu)
  {
    long long v27 = v36;
    uint64_t v28 = v37;
    uint64_t v29 = v38;
    uint64_t v31 = v39;
    uint64_t v30 = v40;
    uint64_t v32 = v41;
    if (v42 >= 0x200u)
    {
      long long v43 = v36;
      char v44 = v37;
      uint64_t v45 = v38;
      uint64_t v46 = v39;
      uint64_t v47 = v40;
      uint64_t v48 = v41;
      char v49 = v42;
      uint64_t v34 = v37;
      swift_retain();
      sub_25A46EAA0(&v43);
      swift_release();
      uint64_t v28 = v34;
    }
    sub_25A4701F0((void *)v27, *((uint64_t *)&v27 + 1), v28, v29, v31, v30, v32, v26);
  }
  swift_release();
  swift_release_n();
  swift_release();
  swift_release();
}

void sub_25A46E424(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_25A50E750();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_25A50E790();
  uint64_t v42 = *(void *)(v10 - 8);
  uint64_t v43 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = a1;
  char v57 = a2 & 1;
  uint64_t v13 = *(void *)(v3 + 152);
  uint64_t v46 = &v56;
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v13 + 24));
  sub_25A46F948((unint64_t *)(v13 + 16), &aBlock);
  os_unfair_lock_unlock((os_unfair_lock_t)(v13 + 24));
  long long v14 = aBlock;
  uint64_t v15 = v49;
  char v16 = v49;
  uint64_t v17 = (uint64_t)v50;
  swift_release();
  if (v17)
  {
    uint64_t v40 = v7;
    uint64_t v41 = v6;
    char v18 = v16 & 1;
    uint64_t v19 = 120;
    uint64_t v20 = 128;
    if (v16) {
      uint64_t v20 = 144;
    }
    uint64_t v21 = *(void *)(v3 + v20);
    if (v16) {
      uint64_t v19 = 136;
    }
    id v22 = *(void **)(v3 + v19);
    char v54 = v14;
    BOOL v55 = (v16 & 1) != 0;
    uint64_t v23 = v15;
    uint64_t v24 = swift_allocObject();
    *(void *)(v24 + 16) = v3;
    sub_25A39F4F8((uint64_t)&v54, v24 + 24, &qword_26A4197B0);
    *(void *)(v24 + 40) = v17;
    long long aBlock = v22;
    uint64_t v49 = v21;
    swift_retain();
    sub_25A3A4A8C(v14, v18);
    swift_retain();
    swift_retain();
    sub_25A3A4A8C(v14, v18);
    swift_retain();
    swift_retain();
    sub_25A3A4A8C(v14, v18);
    swift_retain();
    uint64_t v44 = v23;
    sub_25A46F9E0(v14, v23, v17);
    uint64_t v45 = v21;
    sub_25A3EE304(v22);
    if ((ExecutionLane.isCurrentLane.getter() & 1) != 0 || !v22)
    {
      sub_25A46EEB0(v3, (uint64_t)v14, v18, v17);
    }
    else
    {
      uint64_t v39 = v12;
      if (v22 != (void *)1)
      {
        unsigned __int16 v52 = sub_25A46F9D0;
        uint64_t v53 = v24;
        long long aBlock = (void *)MEMORY[0x263EF8330];
        uint64_t v49 = 1107296256;
        uint64_t v50 = sub_25A3BE05C;
        uint64_t v51 = &block_descriptor_36;
        uint64_t v29 = v9;
        uint64_t v38 = (uint64_t)_Block_copy(&aBlock);
        sub_25A3EE304(v22);
        swift_retain();
        uint64_t v30 = v12;
        sub_25A50E770();
        uint64_t v47 = MEMORY[0x263F8EE78];
        uint64_t v37 = sub_25A46F710((unint64_t *)&qword_26A4168D0, MEMORY[0x263F8F030]);
        __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
        sub_25A46F758(qword_26A4168E0, &qword_26A4168D8);
        uint64_t v31 = v22;
        uint64_t v32 = v41;
        sub_25A50FC90();
        uint64_t v33 = v30;
        uint64_t v34 = (const void *)v38;
        MEMORY[0x26113D8E0](0, v33, v29, v38);
        _Block_release(v34);
        sub_25A3EE314(v31);
        uint64_t v35 = v32;
        id v22 = v31;
        (*(void (**)(char *, uint64_t))(v40 + 8))(v29, v35);
        (*(void (**)(char *, uint64_t))(v42 + 8))(v39, v43);
        swift_release();
        swift_release();
        goto LABEL_12;
      }
      sub_25A3DD980();
      uint64_t v38 = sub_25A50F8D0();
      unsigned __int16 v52 = sub_25A46F9D0;
      uint64_t v53 = v24;
      long long aBlock = (void *)MEMORY[0x263EF8330];
      uint64_t v49 = 1107296256;
      uint64_t v50 = sub_25A3BE05C;
      uint64_t v51 = &block_descriptor_39;
      uint64_t v37 = (uint64_t)_Block_copy(&aBlock);
      swift_retain();
      swift_release();
      sub_25A50E770();
      long long aBlock = (void *)MEMORY[0x263F8EE78];
      uint64_t v36 = sub_25A46F710((unint64_t *)&qword_26A4168D0, MEMORY[0x263F8F030]);
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
      sub_25A46F758(qword_26A4168E0, &qword_26A4168D8);
      uint64_t v25 = v41;
      sub_25A50FC90();
      uint64_t v26 = v12;
      long long v27 = (const void *)v37;
      uint64_t v28 = (void *)v38;
      MEMORY[0x26113D8E0](0, v26, v9, v37);
      _Block_release(v27);

      (*(void (**)(char *, uint64_t))(v40 + 8))(v9, v25);
      (*(void (**)(char *, uint64_t))(v42 + 8))(v39, v43);
    }
    swift_release();
LABEL_12:
    swift_release();
    sub_25A3A4ABC(v14, v18);
    swift_release();
    swift_release();
    sub_25A3A4ABC(v14, v18);
    swift_release();
    swift_release();
    sub_25A3A4ABC(v14, v18);
    sub_25A46FA24(v14, v44, v17);
    sub_25A3EE314(v22);
  }
}

uint64_t sub_25A46EAA0(_OWORD *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A415D20);
  MEMORY[0x270FA5388](v3);
  id v5 = (_OWORD *)((char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void *)(v1 + 152);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 24));
  sub_25A46F024((uint64_t *)(v6 + 16), (uint64_t)v13);
  os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 24));
  uint64_t v7 = *(void *)&v13[0];
  int v8 = BYTE8(v13[0]);
  uint64_t result = swift_release();
  if (v8 != 255)
  {
    long long v10 = a1[1];
    v13[0] = *a1;
    v13[1] = v10;
    v14[0] = a1[2];
    *(_OWORD *)((char *)v14 + 9) = *(_OWORD *)((char *)a1 + 41);
    uint64_t v11 = *(void (**)(_OWORD *))(*(void *)v7 + 192);
    swift_retain();
    v11(v13);
    long long v12 = a1[1];
    *id v5 = *a1;
    v5[1] = v12;
    uint64_t v5[2] = a1[2];
    *(_OWORD *)((char *)v5 + 41) = *(_OWORD *)((char *)a1 + 41);
    swift_storeEnumTagMultiPayload();
    sub_25A39DD44((uint64_t)v5);
    sub_25A46FAA0(v7, v8);
    sub_25A46FAA0(v7, v8);
    return sub_25A384BCC((uint64_t)v5, &qword_26A415D20);
  }
  return result;
}

void *sub_25A46EC34(unint64_t *a1, void *a2, char a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4197B8);
  MEMORY[0x270FA5388](v6 - 8);
  int v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*a1 >> 62) {
    return 0;
  }
  sub_25A46FA68(*a1);
  *(void *)&long long v14 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFound"
                    "ation/FlatMapFuture.swift";
  *((void *)&v14 + 1) = 125;
  char v15 = 2;
  long long v16 = xmmword_25A518EA0;
  uint64_t v17 = "firstCompleted(_:)";
  uint64_t v18 = 18;
  char v19 = 2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4197C0);
  uint64_t v9 = swift_allocObject();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A415D20);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v8, 1, 1, v10);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4197C8);
  uint64_t v11 = swift_allocObject();
  *(_DWORD *)(v11 + ((*(unsigned int *)(*(void *)v11 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  sub_25A393828((uint64_t)v8, v11 + *(void *)(*MEMORY[0x263F8DD00] + *(void *)v11 + 16), &qword_26A4197B8);
  swift_retain();
  sub_25A384BCC((uint64_t)v8, &qword_26A4197B8);
  *(void *)(v9 + 104) = v11;
  swift_release();
  uint64_t v12 = sub_25A39D318(&v14);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4197D0);
  *(void *)(swift_allocObject() + 16) = v12;
  *a1 = v12 | 0x4000000000000000;
  swift_retain();
  sub_25A3A4A8C(a2, a3 & 1);
  return a2;
}

unint64_t sub_25A46EEB0(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v12 = a2;
  char v13 = a3 & 1;
  uint64_t v6 = *(void *)(a1 + 152);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 24));
  sub_25A46F06C((unint64_t *)(v6 + 16), &v11);
  os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 24));
  unint64_t v7 = v11;
  swift_release();
  unint64_t result = sub_25A46FA68(v7);
  if (v7 != 0x8000000000000008)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t *))(a1 + 104))(&v12);
    uint64_t v10 = *(void *)(a4 + 16);
    if (v10 != v9)
    {
      swift_retain();
      sub_25A4CE3E8(0, 0, v9, a4);
      sub_25A4CEC80(0, 0, v9, a4);
      swift_release();
      swift_retain();
      sub_25A4CF558(0, 0, v10, v9);
      swift_release();
    }
    swift_retain();
    sub_25A4D01C8(0, 0, v9, a1);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t *sub_25A46F024@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *result;
  unint64_t v3 = (unint64_t)*result >> 62;
  uint64_t v4 = *result & 0x3FFFFFFFFFFFFFFFLL;
  if (v3 == 1)
  {
    char v5 = 1;
  }
  else
  {
    uint64_t v4 = 0;
    char v5 = -1;
  }
  if (v3)
  {
    uint64_t v2 = v4;
    char v6 = v5;
  }
  else
  {
    char v6 = 0;
  }
  *unint64_t result = 0x8000000000000008;
  *(void *)a2 = v2;
  *(unsigned char *)(a2 + 8) = v6;
  return result;
}

unint64_t sub_25A46F06C@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v2 = *a1;
  *a2 = v2;
  return sub_25A46FA84(v2);
}

void sub_25A46F09C(uint64_t a1@<X0>, void (*a2)(long long *__return_ptr, void **)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void **)a1;
  char v5 = *(unsigned char *)(a1 + 8);
  if (v5)
  {
    id v6 = v4;
    long long v7 = (unint64_t)v4;
  }
  else
  {
    uint64_t v10 = *(void **)a1;
    swift_bridgeObjectRetain();
    a2(&v9, &v10);
    sub_25A3A4ABC(v4, 0);
    long long v7 = v9;
  }
  *(_OWORD *)a3 = v7;
  *(unsigned char *)(a3 + 16) = v5;
}

uint64_t sub_25A46F130(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t *a3)
{
  char v3 = *((unsigned char *)a3 + 8);
  uint64_t v5 = *a3;
  char v6 = v3;
  return a1(&v5);
}

void sub_25A46F178(uint64_t a1@<X0>, void (*a2)(long long *__return_ptr, void *)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void **)a1;
  char v5 = *(unsigned char *)(a1 + 16);
  if (v5)
  {
    id v6 = v4;
    uint64_t v7 = 0;
    long long v8 = (unint64_t)v4;
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 8);
    v13[0] = *(void *)a1;
    v13[1] = v10;
    swift_bridgeObjectRetain();
    a2(&v11, v13);
    sub_25A3F5220(v4, v10, 0);
    long long v8 = v11;
    uint64_t v7 = v12;
  }
  *(_OWORD *)a3 = v8;
  *(void *)(a3 + 16) = v7;
  *(unsigned char *)(a3 + 24) = v5;
}

uint64_t *sub_25A46F220@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *result;
  if ((unint64_t)*result < 2) {
    uint64_t v2 = 0;
  }
  *unint64_t result = 1;
  *a2 = v2;
  return result;
}

unint64_t *sub_25A46F23C@<X0>(unint64_t *result@<X0>, BOOL *a2@<X8>)
{
  unint64_t v3 = *result;
  if (*result >= 2)
  {
    uint64_t v4 = result;
    unint64_t result = (unint64_t *)sub_25A4705B8(*result);
    *uint64_t v4 = 0;
  }
  *a2 = v3 > 1;
  return result;
}

unint64_t sub_25A46F294@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v2 = *a1;
  *a2 = v2;
  return sub_25A4705C8(v2);
}

uint64_t sub_25A46F2C4(uint64_t a1, void (*a2)(void, void))
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v3)
  {
    uint64_t v19 = MEMORY[0x263F8EE78];
    sub_25A50FEF0();
    long long v11 = a2;
    id v6 = (uint64_t *)(a1 + 56);
    do
    {
      uint64_t v8 = *(v6 - 1);
      uint64_t v7 = *v6;
      uint64_t v9 = v6[3];
      uint64_t v10 = v6[6];
      long long v12 = *(_OWORD *)(v6 - 3);
      uint64_t v13 = v8;
      uint64_t v14 = v7;
      long long v15 = *(_OWORD *)(v6 + 1);
      uint64_t v16 = v9;
      long long v17 = *((_OWORD *)v6 + 2);
      uint64_t v18 = v10;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      a2(v12, (char *)&v12 + 8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_25A50FEC0();
      sub_25A50FF00();
      a2 = v11;
      sub_25A50FF10();
      sub_25A50FED0();
      v6 += 10;
      --v3;
    }
    while (v3);
    return v19;
  }
  return result;
}

uint64_t sub_25A46F424(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v21 = a2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4159A8);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v10 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t result = MEMORY[0x263F8EE78];
    if (!v10) {
      break;
    }
    uint64_t v28 = MEMORY[0x263F8EE78];
    uint64_t result = sub_25A50FEF0();
    if (v10 < 0)
    {
      __break(1u);
      return result;
    }
    v18[1] = v4;
    unint64_t v19 = a1 & 0xC000000000000001;
    v18[2] = __swift_instantiateConcreteTypeFromMangledName(&qword_26A419820);
    uint64_t v12 = 0;
    *(void *)&long long v22 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFou"
                      "ndation/CrashLogSymbolicator.swift";
    *((void *)&v22 + 1) = 132;
    char v23 = 2;
    long long v24 = xmmword_25A518EB0;
    uint64_t v25 = "resolvePath(with:)";
    uint64_t v26 = 18;
    char v27 = 2;
    unint64_t v20 = a1;
    while (v10 != v12)
    {
      if (v19)
      {
        uint64_t v13 = MEMORY[0x26113DE30](v12, a1);
      }
      else
      {
        uint64_t v13 = *(void *)(a1 + 8 * v12 + 32);
        swift_retain();
      }
      ++v12;
      uint64_t v14 = sub_25A50F2A0();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 1, 1, v14);
      long long v15 = (void *)swift_allocObject();
      uint64_t v16 = v21;
      unint64_t v15[2] = v13;
      void v15[3] = v16;
      void v15[4] = a3;
      uint64_t v17 = MEMORY[0x270FA5388](v15);
      v18[-4] = v9;
      v18[-3] = &unk_26A419828;
      v18[-2] = v17;
      swift_retain();
      swift_bridgeObjectRetain();
      sub_25A467628(&v22, (void (*)(uint64_t))sub_25A4703D0, (uint64_t)&v18[-6]);
      swift_release();
      sub_25A384BCC((uint64_t)v9, &qword_26A4159A8);
      swift_release();
      sub_25A50FEC0();
      uint64_t v4 = *(void *)(v28 + 16);
      sub_25A50FF00();
      sub_25A50FF10();
      sub_25A50FED0();
      a1 = v20;
      if (v10 == v12) {
        return v28;
      }
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_25A510100();
    swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t sub_25A46F710(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_25A46F758(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for CrashLogSymbolicator()
{
  return self;
}

uint64_t method lookup function for CrashLogSymbolicator(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CrashLogSymbolicator);
}

uint64_t dispatch thunk of CrashLogSymbolicator.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t type metadata accessor for ImageEntry()
{
  return self;
}

ValueMetadata *type metadata accessor for CrashLogSymbolicator.State()
{
  return &type metadata for CrashLogSymbolicator.State;
}

void sub_25A46F830(uint64_t a1)
{
}

uint64_t sub_25A46F844(uint64_t a1)
{
  return sub_25A46F8E0(a1, &qword_26A415D38, (uint64_t (*)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_25A4C73F0);
}

double sub_25A46F864@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A503560(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_25A46F880(_OWORD *a1)
{
  long long v1 = a1[1];
  v3[0] = *a1;
  v3[1] = v1;
  v4[0] = a1[2];
  *(_OWORD *)((char *)v4 + 9) = *(_OWORD *)((char *)a1 + 41);
  return sub_25A46EAA0(v3);
}

uint64_t sub_25A46F8C0(uint64_t a1)
{
  return sub_25A46F8E0(a1, &qword_26A415D38, (uint64_t (*)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_25A4CA97C);
}

uint64_t sub_25A46F8E0(uint64_t a1, uint64_t *a2, uint64_t (*a3)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = v3[2];
  uint64_t v6 = v3[3];
  uint64_t v8 = v3[4];
  uint64_t v7 = v3[5];
  sub_25A39F4F8(a1, (uint64_t)v10, a2);
  return a3(v10, v5, v6, v8, v7);
}

void *sub_25A46F948@<X0>(unint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_25A46EC34(a1, **(void ***)(v2 + 16), *(unsigned char *)(*(void *)(v2 + 16) + 8));
  if (!v3)
  {
    *a2 = result;
    a2[1] = v6;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_25A46F984()
{
  swift_release();
  sub_25A3A4ABC(*(id *)(v0 + 24), *(unsigned char *)(v0 + 32));
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

unint64_t sub_25A46F9D0()
{
  return sub_25A46EEB0(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32), *(void *)(v0 + 40));
}

void *sub_25A46F9E0(void *result, char a2, uint64_t a3)
{
  if (a3)
  {
    sub_25A3A4A8C(result, a2 & 1);
    return (void *)swift_retain();
  }
  return result;
}

void *sub_25A46FA24(void *result, char a2, uint64_t a3)
{
  if (a3)
  {
    sub_25A3A4ABC(result, a2 & 1);
    return (void *)swift_release();
  }
  return result;
}

unint64_t sub_25A46FA68(unint64_t result)
{
  if ((result >> 62) <= 1) {
    return swift_release();
  }
  return result;
}

unint64_t sub_25A46FA84(unint64_t result)
{
  if ((result >> 62) <= 1) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_25A46FAA0(uint64_t a1, char a2)
{
  if (a2 != -1) {
    return swift_release();
  }
  return result;
}

uint64_t sub_25A46FAB4(uint64_t a1)
{
  return sub_25A469240(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_25A46FAC0()
{
  uint64_t v1 = (int *)(type metadata accessor for CrashReport(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = sub_25A50E4C0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = v6 + v1[10];
  uint64_t v9 = sub_25A50E470();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, v5 + 8, v4);
}

uint64_t sub_25A46FC64()
{
  uint64_t v1 = *(void *)(type metadata accessor for CrashReport(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_25A4699E8(v0 + v2, v3);
}

uint64_t sub_25A46FCFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A46AC7C(a1, *(uint64_t **)(v2 + 16), *(uint64_t **)(v2 + 24), *(void *)(v2 + 32), a2);
}

uint64_t sub_25A46FD20(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_25A46FD88@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CSSymbolicatorCreateWithPathAndArchitecture();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_25A46FDBC(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_25A46FDD0()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_25A46FE08()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_25A46FE18()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_25A46FE58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_25A46B8EC(a1, a2, a3, a4, *(void *)(v4 + 16), *(void *)(v4 + 24));
}

void sub_25A46FE60(uint64_t a1, long long *a2)
{
  sub_25A46A4E8(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_25A46FE68()
{
  uint64_t v1 = (int *)(type metadata accessor for CrashReport(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 79) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = sub_25A50E4C0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = v6 + v1[10];
  uint64_t v9 = sub_25A50E470();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, v5, v4);
}

uint64_t sub_25A470020@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for CrashReport(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)(v2 + ((v7 + 79) & 0xFFFFFFFFFFFFFFF8));

  return sub_25A46A8D4(a1, v2 + v6, v2 + v7, v8, a2);
}

void sub_25A4700D8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_25A46F178(a1, *(void (**)(long long *__return_ptr, void *))(v2 + 16), a2);
}

uint64_t sub_25A4700E0(uint64_t a1)
{
  return a1;
}

void sub_25A470138(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_25A46F09C(a1, *(void (**)(long long *__return_ptr, void **))(v2 + 16), a2);
}

void sub_25A470140(uint64_t a1)
{
}

uint64_t sub_25A470154(uint64_t a1)
{
  return sub_25A46F8E0(a1, &qword_26A415D58, (uint64_t (*)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_25A4C8158);
}

double sub_25A470174@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A5038EC(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_25A470190(_OWORD *a1)
{
  long long v1 = a1[1];
  v3[0] = *a1;
  v3[1] = v1;
  v4[0] = a1[2];
  *(_OWORD *)((char *)v4 + 9) = *(_OWORD *)((char *)a1 + 41);
  return sub_25A46D0C8((uint64_t *)v3);
}

uint64_t sub_25A4701D0(uint64_t a1)
{
  return sub_25A46F8E0(a1, &qword_26A415D58, (uint64_t (*)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_25A4CB67C);
}

void sub_25A4701F0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (BYTE1(a8) != 255) {
    sub_25A3F5084(a1, a2, a3, a4, a5, a6, a7, a8, SBYTE1(a8));
  }
}

id sub_25A470228(id result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return sub_25A3A4A8C(result, a2 & 1);
  }
  return result;
}

void sub_25A470254(void *a1, unsigned __int8 a2)
{
  if (a2 != 255) {
    sub_25A3A4ABC(a1, a2 & 1);
  }
}

uint64_t sub_25A470280()
{
  swift_release();
  sub_25A3A4ABC(*(id *)(v0 + 24), *(unsigned char *)(v0 + 32));

  return MEMORY[0x270FA0238](v0, 33, 7);
}

void sub_25A4702C4()
{
  sub_25A46D358(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
}

uint64_t sub_25A4702D0()
{
  swift_release();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_25A470310(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *unint64_t v7 = v2;
  v7[1] = sub_25A38F608;
  void v7[6] = v5;
  v7[7] = v6;
  v7[4] = a1;
  v7[5] = v4;
  return MEMORY[0x270FA2498](sub_25A46B5EC, v4, 0);
}

uint64_t sub_25A4703D0(uint64_t a1)
{
  return sub_25A46D7F8(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_25A4703DC()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t sub_25A470424(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_25A38F608;
  return sub_25A46DA40(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_25A4704EC()
{
  return sub_25A4F1A08();
}

uint64_t sub_25A4704F8(uint64_t a1)
{
  return sub_25A3F444C(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void (**)(void **))(v1 + 32), *(void *)(v1 + 40));
}

void sub_25A470504(uint64_t a1)
{
}

void sub_25A470518(uint64_t a1)
{
  sub_25A3F44C4(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void (**)(void **))(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_25A470524(_OWORD *a1)
{
  long long v1 = a1[1];
  v3[0] = *a1;
  v3[1] = v1;
  v4[0] = a1[2];
  *(_OWORD *)((char *)v4 + 9) = *(_OWORD *)((char *)a1 + 41);
  return sub_25A46D210((uint64_t *)v3);
}

uint64_t sub_25A470564()
{
  swift_release();
  sub_25A3F5220(*(void **)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));

  return MEMORY[0x270FA0238](v0, 41, 7);
}

void sub_25A4705A8()
{
  sub_25A46D464(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
}

unint64_t sub_25A4705B8(unint64_t result)
{
  if (result >= 2) {
    return swift_release();
  }
  return result;
}

unint64_t sub_25A4705C8(unint64_t result)
{
  if (result >= 2) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_25A4705D8(uint64_t a1)
{
  return a1;
}

uint64_t sub_25A470630(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t objectdestroy_2Tm_1()
{
  uint64_t v1 = type metadata accessor for CrashReport(0);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v4 = *(void **)(v0 + 16);
  if ((unint64_t)v4 >= 2) {

  }
  uint64_t v5 = v2 | 7;
  uint64_t v6 = (v2 + 32) & ~v2;
  uint64_t v7 = v6 + v3;
  uint64_t v8 = v0 + v6;
  uint64_t v9 = sub_25A50E4C0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = v8 + *(int *)(v1 + 32);
  uint64_t v11 = sub_25A50E470();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, v7, v5);
}

uint64_t sub_25A47081C(uint64_t *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for CrashReport(0) - 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_25A4691A8(a1, v4, v5, v6);
}

uint64_t sub_25A470890()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_25A4708C8(uint64_t a1)
{
  return sub_25A46DE94(*(void **)a1, *(unsigned char *)(a1 + 8), *(uint64_t (**)(long long *))(v1 + 16));
}

uint64_t *sub_25A4708DC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_25A46F220(a1, a2);
}

double sub_25A470930@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A46F864(a1, a2);
}

double sub_25A470948@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A470174(a1, a2);
}

unint64_t *sub_25A470988@<X0>(unint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_25A46F23C(a1, a2);
}

unint64_t sub_25A4709A0@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  return sub_25A46F294(a1, a2);
}

uint64_t SimpleTimeoutTimer.init(timeInterval:qos:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  sub_25A3DD980();
  uint64_t v6 = sub_25A50F900();
  type metadata accessor for DelayedInvocation();
  uint64_t v7 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417D18);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v6;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417D20);
  uint64_t v9 = swift_allocObject();
  *(_DWORD *)(v9 + 44) = 0;
  *(void *)(v9 + 24) = 0;
  *(void *)(v9 + 32) = 0;
  *(void *)(v9 + 16) = nullsub_1;
  *(unsigned char *)(v9 + 40) = 1;
  *(void *)(v8 + 24) = v9;
  *(void *)(v7 + 16) = v8;
  uint64_t v10 = sub_25A50E760();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(a1, v10);
  *(void *)a2 = v7;
  *(double *)(a2 + 8) = a3;
  return result;
}

double SimpleTimeoutTimer.timeoutInterval.getter()
{
  return *(double *)(v0 + 8);
}

uint64_t SimpleTimeoutTimer.init<A>(scheduler:timeoutInterval:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  type metadata accessor for DelayedInvocation();
  uint64_t v8 = sub_25A41F534(a1, (uint64_t)nullsub_1, 0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  *(void *)a3 = v8;
  *(double *)(a3 + 8) = a4;
  return result;
}

uint64_t SimpleTimeoutTimer.operationStarted(timeoutCallback:)(uint64_t a1, uint64_t a2)
{
  double v5 = v2[1];
  uint64_t v6 = *(void *)(*(void *)v2 + 16);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 88);
  swift_retain();
  uint64_t v8 = v7(a1, a2);
  return (*(uint64_t (**)(uint64_t, double))(*(void *)v6 + 104))(v8, v5);
}

uint64_t _s20PreviewsFoundationOS18SimpleTimeoutTimerV17operationFinishedyyF_0()
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)v0 + 16) + 112))();
}

double sub_25A470C80()
{
  return *(double *)(v0 + 8);
}

uint64_t sub_25A470C88(uint64_t a1, uint64_t a2)
{
  double v5 = v2[1];
  uint64_t v6 = *(void *)(*(void *)v2 + 16);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 88);
  swift_retain();
  uint64_t v8 = v7(a1, a2);
  return (*(uint64_t (**)(uint64_t, double))(*(void *)v6 + 104))(v8, v5);
}

uint64_t dispatch thunk of TimeoutTimer.timeoutInterval.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of TimeoutTimer.operationStarted(timeoutCallback:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of TimeoutTimer.operationFinished()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of TimeoutTimer.operationCanceled()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

void *initializeBufferWithCopyOfBuffer for SimpleTimeoutTimer(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for SimpleTimeoutTimer()
{
  return swift_release();
}

void *assignWithCopy for SimpleTimeoutTimer(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  return a1;
}

void *assignWithTake for SimpleTimeoutTimer(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for SimpleTimeoutTimer()
{
  return &type metadata for SimpleTimeoutTimer;
}

uint64_t CrashReportError.IndexOutOfRangeError.crashReport.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_25A3C635C(v1, a1);
}

unint64_t CrashReportError.IndexOutOfRangeError.highValueTitle.getter()
{
  return 0xD000000000000012;
}

uint64_t CrashReportError.IndexOutOfRangeError.additionalInfo.getter()
{
  sub_25A50FDB0();
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CrashReport(0) + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  return v1;
}

id sub_25A470F18()
{
  id v0 = objc_allocWithZone(MEMORY[0x263F08AE8]);
  id result = sub_25A4B2F48(0xD00000000000001FLL, 0x800000025A5208F0, 0);
  qword_26A419848 = (uint64_t)result;
  return result;
}

uint64_t static CrashReportError.IndexOutOfRangeError.asiRegularExpression.getter()
{
  if (qword_26A415560 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v0 = qword_26A419848;
  id v1 = (id)qword_26A419848;
  return v0;
}

void static CrashReportError.IndexOutOfRangeError.asiRegularExpression.setter(uint64_t a1)
{
  if (qword_26A415560 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v2 = (void *)qword_26A419848;
  qword_26A419848 = a1;
}

uint64_t (*static CrashReportError.IndexOutOfRangeError.asiRegularExpression.modify())()
{
  if (qword_26A415560 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t CrashReportError.IndexOutOfRangeError.init(report:asi:match:)@<X0>(uint64_t a1@<X0>, void *a2@<X3>, uint64_t a3@<X8>)
{
  swift_bridgeObjectRelease();

  sub_25A3F6C88(a1, a3);
  uint64_t v6 = type metadata accessor for CrashReportError.IndexOutOfRangeError();
  uint64_t v7 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(a3, 0, 1, v6);
}

uint64_t type metadata accessor for CrashReportError.IndexOutOfRangeError()
{
  uint64_t result = qword_26A419850;
  if (!qword_26A419850) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_25A471234()
{
  return 0xD000000000000012;
}

uint64_t _s20IndexOutOfRangeErrorVwet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25A471268);
}

uint64_t sub_25A471268(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CrashReport(0);
  double v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t _s20IndexOutOfRangeErrorVwst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25A4712E8);
}

uint64_t sub_25A4712E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CrashReport(0);
  double v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t Array.popFirst()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (sub_25A50F6C0()) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 56))(a2, 1, 1);
  }
  swift_getWitnessTable();
  sub_25A50F790();
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 56))(a2, 0, 1);
}

uint64_t Array.appending(_:)(uint64_t a1, uint64_t a2)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = a2;
  (*(void (**)(char *))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_25A50F1E0();
  swift_bridgeObjectRetain();
  sub_25A50F180();
  return v7;
}

uint64_t Array.inserting(_:at:)(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = v2;
  (*(void (**)(char *))(v3 + 16))((char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_25A50F1E0();
  swift_bridgeObjectRetain();
  sub_25A50F190();
  return v6;
}

uint64_t Array.interleaving(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v29 = a1;
  uint64_t v5 = *(void *)(a3 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](a1);
  uint64_t v31 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v37 = (char *)&v28 - v8;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v36 = sub_25A50FA40();
  uint64_t v10 = *(void *)(v36 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v36);
  uint64_t v35 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (uint64_t *)((char *)&v28 - v13);
  uint64_t v40 = sub_25A50E860();
  v39[1] = a2;
  uint64_t v15 = sub_25A50F1E0();
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x26113CF40](v39, v15, WitnessTable);
  uint64_t v38 = v39[0];
  sub_25A5100D0();
  sub_25A5100A0();
  uint64_t v17 = sub_25A5100C0();
  uint64_t v33 = (void (**)(uint64_t *, char *, uint64_t))(v10 + 32);
  uint64_t v34 = v17;
  uint64_t v32 = TupleTypeMetadata2 - 8;
  uint64_t v30 = (void (**)(char *, char *, uint64_t))(v5 + 32);
  uint64_t v18 = (void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  unint64_t v19 = (void (**)(char *, uint64_t))(v5 + 8);
  while (1)
  {
    long long v22 = v35;
    sub_25A5100B0();
    (*v33)(v14, v22, v36);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48))(v14, 1, TupleTypeMetadata2) == 1)break; {
    uint64_t v23 = *v14;
    }
    uint64_t v24 = TupleTypeMetadata2;
    (*v30)(v37, (char *)v14 + *(int *)(TupleTypeMetadata2 + 48), a3);
    uint64_t v25 = *v18;
    uint64_t v26 = v31;
    if (v23 >= 1)
    {
      v25(v31, v29, a3);
      sub_25A50F180();
    }
    unint64_t v20 = v26;
    uint64_t v21 = v37;
    v25(v20, (uint64_t)v37, a3);
    sub_25A50F180();
    (*v19)(v21, a3);
    TupleTypeMetadata2 = v24;
  }
  swift_bridgeObjectRelease();
  return v40;
}

uint64_t Array.invert<A>()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](a1);
  uint64_t v33 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v32 = (char *)&v22 - v7;
  uint64_t v8 = sub_25A50FA40();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = v11;
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v22 - v13;
  uint64_t v35 = sub_25A50F120();
  MEMORY[0x26113D160](a1, v8);
  uint64_t v31 = sub_25A50F1E0();
  sub_25A50F0E0();
  uint64_t v15 = swift_bridgeObjectRetain();
  if (!MEMORY[0x26113D1B0](v15, v8))
  {
LABEL_12:
    swift_bridgeObjectRelease();
    return v35;
  }
  uint64_t v16 = 0;
  uint64_t v29 = (void (**)(char *, char *, uint64_t))(v9 + 32);
  uint64_t v30 = (void (**)(char *, uint64_t *, uint64_t))(v9 + 16);
  char v27 = v14;
  uint64_t v28 = (unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
  uint64_t v25 = (void (**)(char *, char *, uint64_t))(v4 + 16);
  uint64_t v26 = (void (**)(char *, char *, uint64_t))(v4 + 32);
  uint64_t v24 = (void (**)(char *, uint64_t))(v4 + 8);
  while (1)
  {
    char v17 = sub_25A50F140();
    sub_25A50F0D0();
    if (v17)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v14, a1+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v16, v8);
      uint64_t v18 = v16 + 1;
      if (__OFADD__(v16, 1)) {
        goto LABEL_11;
      }
      goto LABEL_5;
    }
    uint64_t result = sub_25A50FE20();
    if (v23 != 8) {
      break;
    }
    uint64_t v34 = result;
    (*v30)(v14, &v34, v8);
    swift_unknownObjectRelease();
    uint64_t v18 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_11:
      __break(1u);
      goto LABEL_12;
    }
LABEL_5:
    (*v29)(v12, v14, v8);
    if ((*v28)(v12, 1, a2) == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      return 0;
    }
    unint64_t v19 = v32;
    (*v26)(v32, v12, a2);
    (*v25)(v33, v19, a2);
    sub_25A50F180();
    unint64_t v20 = v19;
    uint64_t v14 = v27;
    (*v24)(v20, a2);
    ++v16;
    if (v18 == MEMORY[0x26113D1B0](a1, v8)) {
      goto LABEL_12;
    }
  }
  __break(1u);
  return result;
}

uint64_t Array<A>.disambiguate<A>(keyPaths:basePath:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int (**a4)(char *, uint64_t, void), uint64_t a5, void (*a6)(char *, uint64_t), uint64_t a7)
{
  sub_25A50F1E0();
  uint64_t v17 = sub_25A50E850();
  uint64_t v16 = sub_25A50E860();
  uint64_t v14 = sub_25A50F120();
  sub_25A471E6C(a3, a1, a2, v14, (uint64_t)&v17, (uint64_t)&v16, a3, a4, a5, a6, a7);
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t sub_25A471E6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int (**a8)(char *, uint64_t, void), uint64_t a9, void (*a10)(char *, uint64_t), uint64_t a11)
{
  uint64_t v107 = a7;
  uint64_t v111 = a5;
  uint64_t v122 = a4;
  uint64_t v110 = a3;
  uint64_t v105 = sub_25A50FA40();
  uint64_t v15 = *(void *)(v105 - 8);
  MEMORY[0x270FA5388](v105);
  uint64_t v109 = (char *)&v96 - v16;
  uint64_t v17 = sub_25A50F1E0();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v124 = sub_25A50FA40();
  uint64_t v19 = *(void *)(v124 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v124);
  uint64_t v22 = (char *)&v96 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x270FA5388](v20);
  uint64_t v138 = (char *)&v96 - v24;
  uint64_t v120 = *(void *)(a9 - 8);
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  uint64_t v139 = (char *)&v96 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  uint64_t v118 = (char *)&v96 - v28;
  uint64_t v29 = MEMORY[0x270FA5388](v27);
  uint64_t v135 = (uint64_t)&v96 - v30;
  uint64_t v119 = (uint64_t)*(a8 - 1);
  uint64_t v31 = MEMORY[0x270FA5388](v29);
  uint64_t v104 = (char *)&v96 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = MEMORY[0x270FA5388](v31);
  uint64_t v103 = (char *)&v96 - v34;
  uint64_t v35 = MEMORY[0x270FA5388](v33);
  uint64_t v130 = (void (**)(char *, char *, uint64_t))((char *)&v96 - v36);
  uint64_t v37 = MEMORY[0x270FA5388](v35);
  uint64_t v129 = (char *)&v96 - v38;
  uint64_t v97 = v39;
  MEMORY[0x270FA5388](v37);
  uint64_t v131 = (void (**)(char *, char *, uint64_t))((char *)&v96 - v40);
  uint64_t v106 = a2;
  uint64_t v141 = a9;
  *(void *)&long long v142 = a2;
  uint64_t v113 = sub_25A510580();
  uint64_t v41 = sub_25A50F1E0();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v102 = v41;
  uint64_t v101 = WitnessTable;
  sub_25A50F670();
  uint64_t v123 = *(void *)&v144[0];
  if (!*(void *)&v144[0])
  {
LABEL_17:
    *(void *)&v144[0] = a1;
    swift_bridgeObjectRetain();
    swift_getWitnessTable();
    return sub_25A50F170();
  }
  uint64_t v98 = v19;
  uint64_t v99 = v15;
  uint64_t v112 = TupleTypeMetadata2;
  uint64_t v100 = a6;
  uint64_t v125 = a10;
  uint64_t v137 = v17;
  uint64_t v134 = a11;
  uint64_t v140 = sub_25A50E850();
  uint64_t v43 = swift_bridgeObjectRetain();
  uint64_t v117 = a8;
  uint64_t v44 = MEMORY[0x26113D1B0](v43, a8);
  uint64_t v121 = a1;
  uint64_t v136 = v22;
  if (!v44)
  {
    uint64_t v132 = 0;
    uint64_t v133 = 0;
    long long v64 = 0;
    uint64_t v69 = v123;
    uint64_t v47 = (unsigned int (**)(void, uint64_t, void))v117;
LABEL_19:
    uint64_t v97 = v64;
    swift_bridgeObjectRelease();
    uint64_t v135 = 0;
    uint64_t v73 = v140;
    uint64_t v74 = *(void *)(v140 + 64);
    uint64_t v116 = (void (**)(char *, void, void (*)(char *, uint64_t)))(v140 + 64);
    uint64_t v75 = 1 << *(unsigned char *)(v140 + 32);
    uint64_t v76 = -1;
    if (v75 < 64) {
      uint64_t v76 = ~(-1 << v75);
    }
    unint64_t v77 = v76 & v74;
    uint64_t v78 = v112;
    uint64_t v129 = (char *)(v112 - 8);
    uint64_t v131 = (void (**)(char *, char *, uint64_t))(v120 + 16);
    uint64_t v130 = (void (**)(char *, char *, uint64_t))(v98 + 32);
    uint64_t v128 = (void (**)(char *, char *, uint64_t))(v120 + 32);
    uint64_t v127 = (void (**)(char *, uint64_t))(v120 + 8);
    uint64_t v117 = (unsigned int (**)(char *, uint64_t, void))(v119 + 48);
    uint64_t v115 = (void (**)(uint64_t, uint64_t))(v119 + 32);
    uint64_t v114 = (void (**)(char *, char *, void))(v119 + 16);
    v119 += 8;
    uint64_t v108 = (void (**)(char *, uint64_t, uint64_t))(v99 + 8);
    int64_t v126 = (unint64_t)(v75 + 63) >> 6;
    uint64_t v99 = v126 - 1;
    uint64_t v79 = v138;
    unint64_t v80 = v47;
    while (!v77)
    {
      uint64_t v84 = v135 + 1;
      if (__OFADD__(v135, 1)) {
        goto LABEL_57;
      }
      if (v84 < v126)
      {
        unint64_t v85 = (unint64_t)v116[v84];
        if (v85) {
          goto LABEL_30;
        }
        uint64_t v86 = v135 + 2;
        ++v135;
        if (v84 + 1 < v126)
        {
          unint64_t v85 = (unint64_t)v116[v86];
          if (v85)
          {
            ++v84;
            goto LABEL_30;
          }
          uint64_t v87 = v84 + 2;
          uint64_t v135 = v84 + 1;
          if (v84 + 2 < v126)
          {
            unint64_t v85 = (unint64_t)v116[v87];
            if (!v85)
            {
              while (1)
              {
                uint64_t v84 = v87 + 1;
                if (__OFADD__(v87, 1)) {
                  goto LABEL_58;
                }
                if (v84 >= v126)
                {
                  uint64_t v135 = v99;
                  goto LABEL_42;
                }
                unint64_t v85 = (unint64_t)v116[v84];
                ++v87;
                if (v85) {
                  goto LABEL_30;
                }
              }
            }
            v84 += 2;
LABEL_30:
            unint64_t v77 = (v85 - 1) & v85;
            uint64_t v82 = __clz(__rbit64(v85)) + (v84 << 6);
            uint64_t v135 = v84;
LABEL_26:
            (*(void (**)(char *, uint64_t, uint64_t))(v120 + 16))(v22, *(void *)(v73 + 48) + *(void *)(v120 + 72) * v82, v141);
            *(void *)&v22[*(int *)(v78 + 48)] = *(void *)(*(void *)(v73 + 56) + 8 * v82);
            uint64_t v83 = *(void *)(v78 - 8);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v83 + 56))(v22, 0, 1, v78);
            swift_bridgeObjectRetain();
            uint64_t v79 = v138;
            goto LABEL_43;
          }
        }
      }
LABEL_42:
      uint64_t v83 = *(void *)(v78 - 8);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v83 + 56))(v22, 1, 1, v78);
      unint64_t v77 = 0;
LABEL_43:
      (*v130)(v79, v22, v124);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v83 + 48))(v79, 1, v78) == 1)
      {
        swift_release();
        swift_release();
        sub_25A393228((uint64_t)v132);
        return sub_25A393228((uint64_t)v133);
      }
      uint64_t v88 = *(void *)&v79[*(int *)(v78 + 48)];
      (*v128)(v139, v79, v141);
      uint64_t v145 = v122;
      swift_bridgeObjectRetain();
      uint64_t v89 = MEMORY[0x26113D160](v88, v80);
      if (v89 != MEMORY[0x26113D160](a1, v80))
      {
        *(void *)&v144[0] = v69;
        if (!v110
          || (*(void *)&long long v142 = v110,
              swift_retain_n(),
              char v90 = sub_25A50EBE0(),
              swift_release(),
              a1 = v121,
              swift_release(),
              (v90 & 1) == 0))
        {
          (*v131)(v118, v139, v141);
          sub_25A50F1E0();
          uint64_t v69 = v123;
          sub_25A50F180();
        }
      }
      if (v89 == 1)
      {
        *(void *)&v144[0] = v88;
        swift_getWitnessTable();
        uint64_t v91 = v109;
        sub_25A50F670();
        swift_bridgeObjectRelease();
        if ((*v117)(v91, 1, v80) == 1)
        {
          swift_bridgeObjectRelease();
          (*v127)(v139, v141);
          ((void (*)(char *, uint64_t))*v108)(v91, v105);
        }
        else
        {
          uint64_t v94 = v103;
          ((void (*)(char *, char *, unsigned int (**)(void, uint64_t, void)))*v115)(v103, v91, v80);
          (*v114)(v104, v94, v80);
          *(void *)&v144[0] = v145;
          uint64_t v95 = v141;
          sub_25A50F1E0();
          sub_25A50E990();
          sub_25A50E9E0();
          (*(void (**)(char *, unsigned int (**)(void, uint64_t, void)))v119)(v94, v80);
          (*v127)(v139, v95);
        }
        uint64_t v78 = v112;
      }
      else if (v89 < 2)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*v127)(v139, v141);
      }
      else
      {
        *(void *)&long long v142 = v106;
        swift_bridgeObjectRetain();
        sub_25A50F6E0();
        long long v142 = v144[0];
        long long v143 = v144[1];
        sub_25A50FC50();
        swift_getWitnessTable();
        uint64_t v92 = sub_25A50F200();
        uint64_t v93 = v141;
        sub_25A471E6C(v88, v92, 0, v145, v111, v100, v107, v80, v141, v125, v134);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*v127)(v139, v93);
      }
      uint64_t v22 = v136;
      uint64_t v79 = v138;
      uint64_t v73 = v140;
    }
    unint64_t v81 = __clz(__rbit64(v77));
    v77 &= v77 - 1;
    uint64_t v82 = v81 | (v135 << 6);
    goto LABEL_26;
  }
  uint64_t v45 = 0;
  uint64_t v132 = 0;
  uint64_t v133 = 0;
  uint64_t v46 = 0;
  uint64_t v128 = (void (**)(char *, char *, uint64_t))(v119 + 16);
  uint64_t v116 = (void (**)(char *, void, void (*)(char *, uint64_t)))(v119 + 32);
  uint64_t v108 = (void (**)(char *, uint64_t, uint64_t))(v120 + 16);
  uint64_t v115 = (void (**)(uint64_t, uint64_t))(v120 + 8);
  uint64_t v114 = (void (**)(char *, char *, void))(v119 + 8);
  uint64_t v47 = (unsigned int (**)(void, uint64_t, void))v117;
  while (1)
  {
    char v51 = sub_25A50F140();
    sub_25A50F0D0();
    unsigned __int16 v52 = (void (*)(char *, uint64_t))v47;
    if (v51)
    {
      uint64_t v53 = *(void (**)(char *, char *, uint64_t))(v119 + 16);
      v53((char *)v131, (char *)(a1+ ((*(unsigned __int8 *)(v119 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v119 + 80))+ *(void *)(v119 + 72) * v45), (uint64_t)v47);
      uint64_t v55 = v134;
      uint64_t v54 = v135;
      int64_t v56 = v45 + 1;
      if (__OFADD__(v45, 1)) {
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v71 = sub_25A50FE20();
      uint64_t v55 = v134;
      uint64_t v54 = v135;
      if (v97 != (void (*)(char *, uint64_t))8) {
        goto LABEL_59;
      }
      *(void *)&v144[0] = v71;
      uint64_t v53 = *v128;
      (*v128)((char *)v131, (char *)v144, (uint64_t)v52);
      swift_unknownObjectRelease();
      int64_t v56 = v45 + 1;
      if (__OFADD__(v45, 1))
      {
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
    }
    int64_t v126 = v56;
    char v57 = *v116;
    uint64_t v127 = v46;
    uint64_t v58 = v129;
    v57(v129, v131, v52);
    swift_getAtKeyPath();
    char v59 = (void (*)(char *, uint64_t))swift_allocObject();
    uint64_t v60 = v54;
    uint64_t v61 = v141;
    *((void *)v59 + 2) = v52;
    *((void *)v59 + 3) = v61;
    uint64_t v62 = v125;
    *((void *)v59 + 4) = v125;
    *((void *)v59 + 5) = v55;
    sub_25A393228((uint64_t)v132);
    v53((char *)v130, v58, (uint64_t)v52);
    uint64_t v63 = (void (**)(char *, uint64_t))swift_allocObject();
    v63[2] = v52;
    v63[3] = (void (*)(char *, uint64_t))v61;
    uint64_t v63[4] = v62;
    v63[5] = (void (*)(char *, uint64_t))v55;
    v63[6] = (void (*)(char *, uint64_t))sub_25A473378;
    v63[7] = v59;
    long long v64 = v59;
    sub_25A393228((uint64_t)v133);
    uint64_t v65 = v140;
    swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v144[0] = v65;
    sub_25A479860(v60, v61, v55);
    if (__OFADD__(*(void *)(v65 + 16), (v66 & 1) == 0)) {
      break;
    }
    char v67 = v66;
    sub_25A510020();
    char v68 = sub_25A510000();
    a1 = v121;
    uint64_t v69 = v123;
    uint64_t v140 = *(void *)&v144[0];
    uint64_t v49 = v135;
    if (v68)
    {
      sub_25A479860(v135, v141, v134);
      if ((v67 & 1) != (v70 & 1)) {
        goto LABEL_60;
      }
    }
    swift_bridgeObjectRelease();
    if (v67)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v48 = swift_bridgeObjectRetain();
      *(void *)&v144[0] = ((uint64_t (*)(uint64_t))v63[6])(v48);
      (*v108)(v118, v49, v141);
      uint64_t v49 = v135;
      sub_25A510010();
    }
    swift_bridgeObjectRelease();
    sub_25A50F180();
    (*v115)(v49, v141);
    uint64_t v47 = (unsigned int (**)(void, uint64_t, void))v117;
    ((void (*)(char *, unsigned int (**)(char *, uint64_t, void)))*v114)(v129, v117);
    uint64_t v50 = MEMORY[0x26113D1B0](a1, v47);
    ++v45;
    uint64_t v133 = sub_25A473394;
    uint64_t v132 = sub_25A473378;
    uint64_t v46 = v63;
    uint64_t v22 = v136;
    if (v126 == v50) {
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  uint64_t result = sub_25A510430();
  __break(1u);
  return result;
}

uint64_t Array.transformElements(_:)()
{
  uint64_t v2 = sub_25A50F120();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  sub_25A50EFF0();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t *v0 = v2;
  return result;
}

uint64_t sub_25A473028(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(void *)(a5 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v15 - v11;
  uint64_t v13 = *(void (**)(char *))(v7 + 16);
  v13((char *)&v15 - v11);
  a2(v12);
  ((void (*)(char *, char *, uint64_t))v13)(v10, v12, a5);
  sub_25A50F1E0();
  sub_25A50F180();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v12, a5);
}

uint64_t Array.transformElement<A>(id:_:)()
{
  return Array.transformElements(_:)();
}

uint64_t sub_25A4731D0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v11 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v7 = (char *)&v10 - v6;
  sub_25A50FDE0();
  swift_getAssociatedConformanceWitness();
  char v8 = sub_25A50EBE0();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
  if (v8) {
    return v11(a1);
  }
  return result;
}

uint64_t sub_25A473338(uint64_t a1)
{
  return sub_25A473028(a1, *(void (**)(char *))(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 16));
}

uint64_t sub_25A473358(uint64_t a1)
{
  return sub_25A4731D0(a1, *(void *)(v1 + 32), *(uint64_t (**)(uint64_t))(v1 + 40));
}

uint64_t sub_25A473368()
{
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_25A473378()
{
  return sub_25A50F120();
}

uint64_t sub_25A473384()
{
  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t sub_25A473394@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 48))();
  *a1 = result;
  return result;
}

double Double.microseconds.getter(double a1)
{
  return a1 * 1000000.0;
}

uint64_t EventStreamObservable.wrappedValue.getter()
{
  uint64_t v0 = sub_25A50E5B0();
  uint64_t WitnessTable = swift_getWitnessTable();
  return SynchronousAccessProviding<>.peek(file:line:column:function:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/EventStreamObservable.swift", 133, 2, 35, 25, (uint64_t)"wrappedValue", 12, 2, v0, WitnessTable);
}

void EventStreamObservable.wrappedValue.setter(uint64_t a1)
{
}

uint64_t sub_25A47349C()
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v1 + 80) - 8) + 8);
  return v2(v0);
}

void (*EventStreamObservable.wrappedValue.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  void *v3 = v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 80);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  _OWORD v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  EventStreamObservable.wrappedValue.getter();
  return sub_25A4735CC;
}

void sub_25A4735CC(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)(*(void *)a1 + 24);
  if (a2)
  {
    (*(void (**)(void, void, void))(*(void *)(*(void *)a1 + 16) + 16))(*(void *)(*(void *)a1 + 24), *(void *)(*(void *)a1 + 32), *(void *)(*(void *)a1 + 8));
    sub_25A4739F4(v2);
  }
  sub_25A4739F4(*(void *)(*(void *)a1 + 32));
}

void sub_25A473658()
{
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
  JUMPOUT(0x25A473670);
}

uint64_t EventStreamObservable.__allocating_init(wrappedValue:emitsInitialValue:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  swift_allocObject();
  uint64_t v6 = sub_25A473B54(a1, a2);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 8))(a1);
  return v6;
}

uint64_t EventStreamObservable.init(wrappedValue:emitsInitialValue:)(uint64_t a1, char a2)
{
  uint64_t v4 = *v2;
  uint64_t v5 = sub_25A473B54(a1, a2);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v4 + 80) - 8) + 8))(a1);
  return v5;
}

uint64_t EventStreamObservable.projectedValue.getter@<X0>(void *a1@<X8>)
{
  sub_25A4BC52C((uint64_t)sub_25A473BD0, v1, a1);

  return swift_retain();
}

uint64_t sub_25A473804@<X0>(uint64_t a1@<X0>, void (*a2)(char *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  uint64_t v21 = a5;
  uint64_t v5 = *(void *)(*(void *)a4 + 80);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v18 - v8;
  uint64_t v10 = *(void *)v7;
  uint64_t v11 = *(void *)(v7 + 8);
  char v12 = *(unsigned char *)(v7 + 16);
  uint64_t v14 = *(void *)(v7 + 24);
  uint64_t v13 = *(void *)(v7 + 32);
  uint64_t v15 = *(void *)(v7 + 40);
  uint64_t v19 = *(void *)(v7 + 48);
  uint64_t v20 = v13;
  HIDWORD(v18) = *(unsigned __int8 *)(v7 + 56);
  if (*(unsigned char *)(v16 + 32) == 1)
  {
    EventStreamObservable.wrappedValue.getter();
    v22(v9);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  EventStream.Sink.eventStream.getter(v33);
  uint64_t v31 = v33[0];
  uint64_t v32 = v33[1];
  *(void *)&long long v24 = v10;
  *((void *)&v24 + 1) = v11;
  char v25 = v12;
  uint64_t v26 = v14;
  uint64_t v27 = v20;
  uint64_t v28 = v15;
  uint64_t v29 = v19;
  char v30 = BYTE4(v18);
  type metadata accessor for EventStream();
  sub_25A4BC4D0(&v24);
  return swift_release();
}

uint64_t EventStreamObservable.deinit()
{
  swift_release();
  swift_release();
  return v0;
}

uint64_t EventStreamObservable.__deallocating_deinit()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0228](v0, 33, 7);
}

void sub_25A4739F4(uint64_t a1)
{
  uint64_t v3 = *(void *)(*v1 + 80);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)v11 - v5;
  uint64_t v7 = v1[3];
  v11[0] = v3;
  v11[1] = v7;
  KeyPath = (uint64_t *)swift_getKeyPath();
  uint64_t v9 = sub_25A50E5B0();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  SynchronousAccessProviding.syncSetValue<A>(at:to:)(KeyPath, a1, v9, WitnessTable);
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  EventStream.Sink.send(_:)(a1);
}

uint64_t sub_25A473B54(uint64_t a1, char a2)
{
  uint64_t v5 = *(void *)(*(void *)v2 + 80);
  type metadata accessor for EventStream.Sink();
  *(void *)(v2 + 16) = EventStream.Sink.__allocating_init()();
  *(unsigned char *)(v2 + 32) = a2;
  *(void *)(v2 + 24) = sub_25A3EF560(a1, v5);
  return v2;
}

uint64_t sub_25A473BD0@<X0>(uint64_t a1@<X0>, void (*a2)(char *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_25A473804(a1, a2, a3, v4, a4);
}

uint64_t sub_25A473BD8()
{
  return EventStreamObservable.wrappedValue.getter();
}

void sub_25A473BFC(uint64_t a1)
{
}

uint64_t sub_25A473C20()
{
  return 8;
}

void *sub_25A473C2C(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_25A473C38()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for EventStreamObservable()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for EventStreamObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for EventStreamObservable);
}

uint64_t dispatch thunk of EventStreamObservable.__allocating_init(wrappedValue:emitsInitialValue:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t ChunkStack.init(size:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  type metadata accessor for FixedStack();
  uint64_t result = sub_25A50F120();
  *a2 = a1;
  a2[1] = result;
  return result;
}

uint64_t ChunkStack.push(_:)(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1 + 8);
  uint64_t v4 = type metadata accessor for FixedStack();
  sub_25A50F1E0();
  swift_getWitnessTable();
  sub_25A50EA80();
  if (v10)
  {
    if (FixedStack.push(_:)(a1))
    {
      uint64_t v5 = swift_bridgeObjectRetain();
      uint64_t v6 = MEMORY[0x26113D1B0](v5, v4);
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v8 = v6 - 1;
      if (__OFSUB__(v6, 1))
      {
        __break(1u);
      }
      else
      {
        swift_retain();
        sub_25A50F110();
        uint64_t v9 = *v3;
        sub_25A474B7C(v8, v9);
        *(void *)(v9 + 8 * v8 + 32) = v10;
        swift_release();
        return swift_release();
      }
      return result;
    }
    swift_release();
  }
  FixedStack.init(capacity:)(&v10);
  if ((FixedStack.push(_:)(a1) & 1) == 0) {
    sub_25A403498();
  }
  return sub_25A50F180();
}

uint64_t ChunkStack.pop()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = a1;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = sub_25A50FA40();
  uint64_t v25 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v23 - v6;
  unint64_t v8 = (uint64_t *)(v2 + 8);
  uint64_t v9 = *(void *)(v2 + 8);
  uint64_t v27 = v2;
  uint64_t v28 = v9;
  uint64_t v10 = type metadata accessor for FixedStack();
  uint64_t v11 = sub_25A50F1E0();
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_25A50EA80();
  if (!v29) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(a2, 1, 1, v4);
  }
  uint64_t v24 = a2;
  uint64_t v30 = v29;
  FixedStack.pop()((uint64_t)v7);
  uint64_t v13 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v7, 1, v4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v25 + 8))(v7, v5);
    uint64_t v14 = swift_getWitnessTable();
    MEMORY[0x26113D7B0](&v29, v11, WitnessTable, v14);
    swift_release();
    ChunkStack.pop()(v26);
    return swift_release();
  }
  else
  {
    uint64_t v16 = v24;
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v24, v7, v4);
    uint64_t v17 = swift_bridgeObjectRetain();
    uint64_t v18 = MEMORY[0x26113D160](v17, v10);
    uint64_t result = swift_bridgeObjectRelease();
    BOOL v19 = __OFSUB__(v18, 1);
    unint64_t v20 = v18 - 1;
    if (v19)
    {
      __break(1u);
    }
    else
    {
      uint64_t v21 = v30;
      swift_retain();
      sub_25A50F110();
      uint64_t v22 = *v8;
      sub_25A474B7C(v20, *v8);
      *(void *)(v22 + 8 * v20 + 32) = v21;
      swift_release();
      swift_release();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v4);
    }
  }
  return result;
}

uint64_t ChunkStack.startIndex.getter()
{
  return 0;
}

Swift::Int __swiftcall ChunkStack.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

uint64_t ChunkStack.endIndex.getter()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  uint64_t v3 = type metadata accessor for FixedStack();
  sub_25A50F1E0();
  swift_getWitnessTable();
  sub_25A50EA80();
  if (!v8) {
    return 0;
  }
  uint64_t result = MEMORY[0x26113D160](v1, v3);
  uint64_t v5 = result - 1;
  if (__OFSUB__(result, 1))
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v6 = v5 * v2;
  if ((unsigned __int128)(v5 * (__int128)v2) >> 64 != (v5 * v2) >> 63)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v7 = FixedStack.endIndex.getter();
  swift_release();
  uint64_t result = v6 + v7;
  if (!__OFADD__(v6, v7)) {
    return result;
  }
  __break(1u);
  return 0;
}

uint64_t ChunkStack.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    if (result != 0x8000000000000000 || v4 != -1)
    {
      uint64_t v5 = result % v4;
      type metadata accessor for FixedStack();
      sub_25A50F210();
      FixedStack.subscript.getter(v5, a2);
      return swift_release();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

Swift::Int __swiftcall ChunkStack.index(before:)(Swift::Int before)
{
  BOOL v1 = __OFSUB__(before, 1);
  Swift::Int result = before - 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

Swift::Int __swiftcall ChunkStack.index(_:offsetBy:)(Swift::Int _, Swift::Int offsetBy)
{
  BOOL v2 = __OFADD__(_, offsetBy);
  Swift::Int result = _ + offsetBy;
  if (v2) {
    __break(1u);
  }
  return result;
}

Swift::Int __swiftcall ChunkStack.distance(from:to:)(Swift::Int from, Swift::Int to)
{
  BOOL v2 = __OFSUB__(to, from);
  Swift::Int result = to - from;
  if (v2) {
    __break(1u);
  }
  return result;
}

uint64_t sub_25A4743AC()
{
  swift_getWitnessTable();

  return sub_25A50F580();
}

uint64_t sub_25A474430(void *a1, void *a2)
{
  BOOL v2 = __OFSUB__(*a2, *a1);
  uint64_t result = *a2 - *a1;
  if (v2) {
    __break(1u);
  }
  return result;
}

uint64_t sub_25A474448@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ChunkStack.endIndex.getter();
  *a1 = result;
  return result;
}

void (*sub_25A474470(void *a1, uint64_t *a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = sub_25A4744E0(v6, *a2, a3);
  return sub_25A3AC394;
}

void (*sub_25A4744E0(void *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v5 = *(void *)(a3 + 16);
  *a1 = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  a1[1] = v6;
  uint64_t v7 = malloc(*(void *)(v6 + 64));
  a1[2] = v7;
  ChunkStack.subscript.getter(a2, (uint64_t)v7);
  return sub_25A3AC494;
}

uint64_t sub_25A474598(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v3 = MEMORY[0x263F8D708];

  return MEMORY[0x270F9E070](a1, WitnessTable, v3);
}

void *sub_25A474604@<X0>(void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (__OFADD__(*result, a2)) {
    __break(1u);
  }
  else {
    *a3 = *result + a2;
  }
  return result;
}

void sub_25A47461C(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = 0;
}

uint64_t sub_25A47462C(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F9E108](a1, WitnessTable);
}

uint64_t sub_25A474680()
{
  swift_getWitnessTable();
  uint64_t v0 = sub_25A474DDC();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t static ChunkStack<A>.== infix(_:_:)()
{
  type metadata accessor for ChunkStack();
  swift_getWitnessTable();
  uint64_t v0 = sub_25A50F660();
  if (v0 == sub_25A50F660())
  {
    swift_getWitnessTable();
    uint64_t v1 = sub_25A510410();
    uint64_t v2 = MEMORY[0x270FA5388](v1);
    MEMORY[0x270FA5388](v2);
    sub_25A50FE10();
    swift_getWitnessTable();
    char v3 = sub_25A50EF20();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    char v3 = 0;
  }
  return v3 & 1;
}

uint64_t sub_25A4748D8(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return a2(a1, a1 + *(int *)(TupleTypeMetadata2 + 48)) & 1;
}

uint64_t sub_25A474940()
{
  return static ChunkStack<A>.== infix(_:_:)();
}

uint64_t ChunkStack<A>.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  uint64_t v7 = v2[1];
  sub_25A5104F0();
  v13[1] = v8;
  void v13[2] = v7;
  uint64_t v14 = 0;
  swift_bridgeObjectRetain();
  if (!ChunkStack.endIndex.getter()) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v9 = 0;
  uint64_t v10 = (void (**)(char *, uint64_t))(v4 + 8);
  while (1)
  {
    uint64_t result = ChunkStack.subscript.getter(v9, (uint64_t)v6);
    uint64_t v12 = v9 + 1;
    if (__OFADD__(v9, 1)) {
      break;
    }
    uint64_t v14 = v9 + 1;
    sub_25A50EA20();
    (*v10)(v6, v3);
    ++v9;
    if (v12 == ChunkStack.endIndex.getter()) {
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
  return result;
}

uint64_t ChunkStack<A>.hashValue.getter(uint64_t a1)
{
  uint64_t v3 = v1[1];
  uint64_t v6 = *v1;
  uint64_t v7 = v3;
  sub_25A5104E0();
  ChunkStack<A>.hash(into:)((uint64_t)v5, a1);
  return sub_25A510530();
}

uint64_t sub_25A474B18(uint64_t a1)
{
  return ChunkStack<A>.hashValue.getter(a1);
}

uint64_t sub_25A474B20(uint64_t a1, uint64_t a2)
{
  return ChunkStack<A>.hash(into:)(a1, a2);
}

uint64_t sub_25A474B28(uint64_t a1, uint64_t a2)
{
  sub_25A5104E0();
  ChunkStack<A>.hash(into:)((uint64_t)v4, a2);
  return sub_25A510530();
}

uint64_t sub_25A474B7C(unint64_t a1, uint64_t a2)
{
  uint64_t result = _swift_isClassOrObjCExistentialType();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v5 = a2 & 0xFFFFFFFFFFFFFF8;
  if ((result & 1) == 0) {
    uint64_t v5 = a2;
  }
  if (*(void *)(v5 + 16) <= a1) {
    goto LABEL_7;
  }
  return result;
}

uint64_t type metadata accessor for ChunkStack()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A474BE8()
{
  return sub_25A50EBE0() & 1;
}

uint64_t sub_25A474C14(uint64_t a1)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 32);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return v3(a1, a1 + *(int *)(TupleTypeMetadata2 + 48)) & 1;
}

uint64_t sub_25A474C78()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A474C94()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A474CF8()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A474D14()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A474D78()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A474D94()
{
  return swift_getWitnessTable();
}

uint64_t AsyncThrowingCache.clearOnFailure.getter()
{
  return *(unsigned __int8 *)(v0 + 112);
}

uint64_t AsyncThrowingCache.__allocating_init(clearOnFailure:)(char a1)
{
  uint64_t v2 = swift_allocObject();
  AsyncThrowingCache.init(clearOnFailure:)(a1);
  return v2;
}

uint64_t AsyncThrowingCache.init(clearOnFailure:)(char a1)
{
  swift_defaultActor_initialize();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  sub_25A50F3C0();
  swift_getTupleTypeMetadata2();
  sub_25A50F120();
  *(void *)(v1 + 120) = sub_25A50E900();
  *(unsigned char *)(v1 + 112) = a1;
  return v1;
}

uint64_t sub_25A474F0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[17] = a4;
  v5[18] = v4;
  v5[15] = a2;
  unsigned char v5[16] = a3;
  v5[14] = a1;
  uint64_t v6 = *v4;
  v5[19] = *v4;
  uint64_t v7 = *(void *)(v6 + 80);
  v5[20] = v7;
  v5[21] = *(void *)(v7 - 8);
  v5[22] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4159A8);
  v5[23] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_25A47503C, v4, 0);
}

uint64_t sub_25A47503C()
{
  uint64_t v1 = v0[19];
  uint64_t v2 = v0[20];
  uint64_t v3 = v0[15];
  uint64_t v4 = (uint64_t *)(v0[18] + 120);
  swift_beginAccess();
  uint64_t v5 = *v4;
  uint64_t v6 = *(void *)(v1 + 88);
  swift_bridgeObjectRetain();
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v7 = sub_25A50F3C0();
  uint64_t v8 = *(void *)(v1 + 96);
  MEMORY[0x26113C9D0](v3, v5, v2, v7, v8);
  swift_bridgeObjectRelease();
  uint64_t v9 = v0[11];
  v0[24] = v9;
  if (v9)
  {
    uint64_t v10 = (void *)swift_task_alloc();
    v0[25] = v10;
    *uint64_t v10 = v0;
    v10[1] = sub_25A475340;
    uint64_t v11 = v0[14];
    uint64_t v12 = MEMORY[0x263F8E4E0];
    uint64_t v13 = v9;
  }
  else
  {
    uint64_t v14 = v0[23];
    uint64_t v26 = v0[22];
    uint64_t v16 = v0[20];
    uint64_t v15 = v0[21];
    uint64_t v17 = v0[17];
    uint64_t v24 = v0[16];
    uint64_t v25 = v0[15];
    uint64_t v18 = sub_25A50F2A0();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v14, 1, 1, v18);
    BOOL v19 = (void *)swift_allocObject();
    void v19[2] = 0;
    unint64_t v19[3] = 0;
    void v19[4] = v16;
    v19[5] = v6;
    void v19[6] = v8;
    v19[7] = v24;
    v19[8] = v17;
    swift_retain();
    uint64_t v20 = sub_25A38FBAC(v14, (uint64_t)&unk_26A419970, (uint64_t)v19);
    v0[27] = v20;
    uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
    v0[28] = v21;
    v0[29] = (v15 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v21(v26, v25, v16);
    v0[12] = v20;
    swift_beginAccess();
    v0[30] = sub_25A50E990();
    swift_retain();
    sub_25A50E9E0();
    swift_endAccess();
    uint64_t v22 = (void *)swift_task_alloc();
    v0[31] = v22;
    void *v22 = v0;
    v22[1] = sub_25A4754E0;
    uint64_t v11 = v0[14];
    uint64_t v12 = MEMORY[0x263F8E4E0];
    uint64_t v13 = v20;
  }
  return MEMORY[0x270FA1FA8](v11, v13, v6, v27, v12);
}

uint64_t sub_25A475340()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 208) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 144);
  if (v0) {
    uint64_t v4 = sub_25A475680;
  }
  else {
    uint64_t v4 = sub_25A47546C;
  }
  return MEMORY[0x270FA2498](v4, v3, 0);
}

uint64_t sub_25A47546C()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_25A4754E0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 256) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 144);
  if (v0) {
    uint64_t v4 = sub_25A4756F4;
  }
  else {
    uint64_t v4 = sub_25A47560C;
  }
  return MEMORY[0x270FA2498](v4, v3, 0);
}

uint64_t sub_25A47560C()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_25A475680()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_25A4756F4()
{
  if (*(unsigned char *)(*(void *)(v0 + 144) + 112) == 1)
  {
    (*(void (**)(void, void, void))(v0 + 224))(*(void *)(v0 + 176), *(void *)(v0 + 120), *(void *)(v0 + 160));
    *(void *)(v0 + 104) = 0;
    swift_beginAccess();
    sub_25A50E9E0();
    swift_endAccess();
  }
  swift_willThrow();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_25A4757F0(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v8 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v6;
  *uint64_t v6 = v4;
  v6[1] = sub_25A38F608;
  return v8(a1);
}

uint64_t sub_25A4758CC(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 80);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v13[-1] - v6;
  if (v8)
  {
    swift_beginAccess();
    uint64_t v9 = v1[15];
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
    uint64_t v10 = sub_25A50F3C0();
    MEMORY[0x26113C9D0](v13, a1, v9, v4, v10, *(void *)(v3 + 96));
    swift_bridgeObjectRelease();
    if (v13[0])
    {
      sub_25A50F3A0();
      swift_release();
    }
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  void v13[3] = 0;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  sub_25A50F3C0();
  sub_25A50E990();
  sub_25A50E9E0();
  return swift_endAccess();
}

uint64_t AsyncThrowingCache.deinit()
{
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t AsyncThrowingCache.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();

  return MEMORY[0x270FA2418](v0);
}

uint64_t AsyncThrowingCache.unownedExecutor.getter()
{
  return v0;
}

uint64_t sub_25A475B50()
{
  return AsyncThrowingCache.unownedExecutor.getter();
}

uint64_t sub_25A475B6C()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, 72, 7);
}

uint64_t sub_25A475BAC(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 56);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_25A3923B4;
  char v8 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v6 = (void *)swift_task_alloc();
  uint64_t v5[2] = v6;
  *uint64_t v6 = v5;
  v6[1] = sub_25A38F608;
  return v8(a1);
}

uint64_t sub_25A475CD0()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for AsyncThrowingCache()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for AsyncThrowingCache(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AsyncThrowingCache);
}

uint64_t dispatch thunk of AsyncThrowingCache.__allocating_init(clearOnFailure:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of AsyncThrowingCache.value(for:makeValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v4 + 160)
                                                                   + **(int **)(*(void *)v4 + 160));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  *uint64_t v10 = v5;
  v10[1] = sub_25A38F608;
  return v12(a1, a2, a3, a4);
}

uint64_t dispatch thunk of AsyncThrowingCache.invalidate(key:cancelingTask:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t AssociatedObjectCache.__allocating_init(logAspect:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  AssociatedObjectCache.init(logAspect:)(a1);
  return v2;
}

uint64_t AssociatedObjectCache.init(logAspect:)(uint64_t a1)
{
  type metadata accessor for Ref();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A419A00);
  swift_getTupleTypeMetadata3();
  swift_getWitnessTable();
  *(void *)(v1 + 16) = sub_25A50E850();
  uint64_t v3 = v1 + qword_26A419A08;
  uint64_t v4 = sub_25A50E5E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(v3, a1, v4);
  return v1;
}

void AssociatedObjectCache.retainedAssociatedObject(to:createAssociatedObject:)(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v61 = a3;
  uint64_t v62 = a2;
  uint64_t v69 = a4;
  uint64_t v7 = *v4;
  uint64_t v8 = *(void *)(v7 + 88);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A419A00);
  uint64_t v71 = v8;
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  uint64_t v10 = sub_25A50FA40();
  uint64_t v65 = *(void (***)(char *, char *, void))(v10 - 8);
  uint64_t v66 = v10;
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  char v67 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v59 - v14;
  uint64_t v16 = MEMORY[0x270FA5388](v13);
  uint64_t v18 = (char *)&v59 - v17;
  uint64_t v19 = *(void *)(TupleTypeMetadata3 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v21 = (char *)&v59 - v20;
  uint64_t v22 = *(void *)(v7 + 80);
  Ref.init(_:)(a1, &v74);
  uint64_t v23 = v74;
  long long v64 = v5 + 2;
  swift_beginAccess();
  uint64_t v24 = v5[2];
  uint64_t v72 = v23;
  uint64_t v25 = *(void *)(v24 + 16);
  uint64_t v70 = v19;
  uint64_t v68 = v22;
  if (v25)
  {
    uint64_t v26 = type metadata accessor for Ref();
    uint64_t v60 = a1;
    swift_unknownObjectRetain();
    uint64_t WitnessTable = swift_getWitnessTable();
    unint64_t v28 = sub_25A479860((uint64_t)&v72, v26, WitnessTable);
    if (v29)
    {
      uint64_t v30 = *(void *)(v24 + 56);
      uint64_t v31 = v70;
      (*(void (**)(char *, unint64_t, uint64_t))(v70 + 16))(v18, v30 + *(void *)(v70 + 72) * v28, TupleTypeMetadata3);
      uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56);
      uint64_t v33 = v18;
      uint64_t v34 = 0;
    }
    else
    {
      uint64_t v31 = v70;
      uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v70 + 56);
      uint64_t v33 = v18;
      uint64_t v34 = 1;
    }
    uint64_t v63 = v32;
    v32(v33, v34, 1, TupleTypeMetadata3);
    uint64_t v35 = v60;
  }
  else
  {
    uint64_t v63 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
    v63(v18, 1, 1, TupleTypeMetadata3);
    swift_unknownObjectRetain();
    uint64_t v35 = a1;
    uint64_t v31 = v19;
  }
  uint64_t v37 = v65;
  uint64_t v36 = v66;
  v65[4](v15, v18, v66);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v15, 1, TupleTypeMetadata3) == 1)
  {
    uint64_t v38 = *(int *)(TupleTypeMetadata3 + 48);
    uint64_t v39 = v35;
    uint64_t v40 = *(int *)(TupleTypeMetadata3 + 64);
    v62(v39);
    *(void *)&v21[v38] = 0;
    *(void *)&v21[v40] = 0;
    uint64_t v35 = v39;
    ((void (*)(char *, uint64_t))v37[1])(v15, v36);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v21, v15, TupleTypeMetadata3);
  }
  uint64_t v41 = v69;
  swift_unknownObjectRelease();
  uint64_t v66 = *(void *)&v21[*(int *)(TupleTypeMetadata3 + 48)];
  uint64_t v42 = *(void **)&v21[*(int *)(TupleTypeMetadata3 + 64)];
  swift_endAccess();
  uint64_t v43 = *(void *)(v71 - 8);
  (*(void (**)(uint64_t, char *))(v43 + 32))(v41, v21);
  if (v42)
  {
    swift_unknownObjectRetain_n();
    uint64_t v44 = v42;
    uint64_t v45 = sub_25A50E5C0();
    os_log_type_t v46 = sub_25A50F820();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = swift_slowAlloc();
      uint64_t v62 = (void (*)(uint64_t))swift_slowAlloc();
      v73[0] = (uint64_t)v62;
      *(_DWORD *)uint64_t v47 = 136446466;
      uint64_t v65 = v44;
      uint64_t v74 = v71;
      swift_getMetatypeMetadata();
      uint64_t v48 = sub_25A50EC90();
      uint64_t v74 = sub_25A3A36A4(v48, v49, v73);
      sub_25A50FB00();
      swift_bridgeObjectRelease();
      *(_WORD *)(v47 + 12) = 2082;
      uint64_t v50 = static Logging.describe<A>(ref:)(v35);
      uint64_t v74 = sub_25A3A36A4(v50, v51, v73);
      uint64_t v44 = v65;
      sub_25A50FB00();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_25A380000, v45, v46, "%{public}s: Retain requested for previous purged, canceling purging: %{public}s", (uint8_t *)v47, 0x16u);
      unsigned __int16 v52 = v62;
      swift_arrayDestroy();
      MEMORY[0x26113F070](v52, -1, -1);
      uint64_t v53 = v47;
      uint64_t v41 = v69;
      MEMORY[0x26113F070](v53, -1, -1);
    }
    else
    {
      swift_unknownObjectRelease_n();
    }

    objc_msgSend(v44, sel_invalidate);
  }
  uint64_t v54 = v42;
  Ref.init(_:)(v35, &v74);
  uint64_t v55 = v74;
  uint64_t v56 = *(int *)(TupleTypeMetadata3 + 48);
  uint64_t v57 = *(int *)(TupleTypeMetadata3 + 64);
  uint64_t v58 = v67;
  (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v67, v41, v71);
  if (__OFADD__(v66, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)&v58[v56] = v66 + 1;
    *(void *)&v58[v57] = 0;
    v63(v58, 0, 1, TupleTypeMetadata3);
    uint64_t v72 = v55;
    swift_beginAccess();
    type metadata accessor for Ref();
    swift_unknownObjectRetain();
    swift_getWitnessTable();
    sub_25A50E990();
    sub_25A50E9E0();
    swift_endAccess();
  }
}

uint64_t AssociatedObjectCache.retainedAssociatedObject(to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v70 = a2;
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 88);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A419A00);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  uint64_t v7 = sub_25A50FA40();
  uint64_t v65 = *(void *)(v7 - 8);
  uint64_t v66 = v7;
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  uint64_t v69 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v54 - v10;
  uint64_t v12 = swift_getTupleTypeMetadata3();
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v54 - v14;
  uint64_t v71 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v13);
  long long v64 = (char *)&v54 - v16;
  uint64_t v17 = *(void *)(v4 + 80);
  Ref.init(_:)(a1, v74);
  uint64_t v18 = v74[0];
  uint64_t v63 = v2 + 2;
  swift_beginAccess();
  uint64_t v19 = v2[2];
  uint64_t v72 = v18;
  uint64_t v68 = v17;
  uint64_t v20 = type metadata accessor for Ref();
  uint64_t v67 = a1;
  swift_unknownObjectRetain();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v62 = v20;
  MEMORY[0x26113C9D0](&v72, v19, v20, TupleTypeMetadata3, WitnessTable);
  uint64_t v22 = TupleTypeMetadata3;
  swift_unknownObjectRelease();
  swift_endAccess();
  uint64_t v23 = *(void *)(TupleTypeMetadata3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v11, 1, v22) == 1)
  {
    (*(void (**)(char *, uint64_t))(v65 + 8))(v11, v66);
    uint64_t v24 = 1;
    uint64_t v25 = v5;
    uint64_t v26 = v70;
    uint64_t v27 = v71;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56))(v26, v24, 1, v25);
  }
  uint64_t v59 = v23;
  uint64_t v61 = WitnessTable;
  uint64_t v65 = *(void *)&v11[*(int *)(v22 + 48)];
  uint64_t v66 = v22;
  uint64_t v28 = *(void *)&v11[*(int *)(v22 + 64)];
  uint64_t v29 = *(int *)(v12 + 48);
  uint64_t v30 = *(int *)(v12 + 64);
  uint64_t v25 = v5;
  uint64_t v32 = v71 + 32;
  uint64_t v31 = *(void (**)(uint64_t, char *, uint64_t))(v71 + 32);
  uint64_t v58 = v31;
  v31((uint64_t)v15, v11, v25);
  *(void *)&v15[v29] = v65;
  *(void *)&v15[v30] = v28;
  uint64_t v65 = *(void *)&v15[*(int *)(v12 + 48)];
  uint64_t v33 = *(void **)&v15[*(int *)(v12 + 64)];
  uint64_t v34 = v64;
  uint64_t v60 = v32;
  v31((uint64_t)v64, v15, v25);
  uint64_t v35 = v67;
  uint64_t v36 = v69;
  if (v33)
  {
    swift_unknownObjectRetain_n();
    id v37 = v33;
    uint64_t v38 = sub_25A50E5C0();
    os_log_type_t v39 = sub_25A50F820();
    int v40 = v39;
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v41 = swift_slowAlloc();
      int v56 = v40;
      uint64_t v42 = v41;
      uint64_t v55 = swift_slowAlloc();
      v73[0] = v55;
      *(_DWORD *)uint64_t v42 = 136446466;
      v74[0] = v25;
      swift_getMetatypeMetadata();
      uint64_t v43 = sub_25A50EC90();
      id v57 = v37;
      v74[0] = sub_25A3A36A4(v43, v44, v73);
      sub_25A50FB00();
      swift_bridgeObjectRelease();
      *(_WORD *)(v42 + 12) = 2082;
      uint64_t v45 = static Logging.describe<A>(ref:)(v35);
      v74[0] = sub_25A3A36A4(v45, v46, v73);
      uint64_t v36 = v69;
      sub_25A50FB00();
      swift_unknownObjectRelease_n();
      id v37 = v57;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_25A380000, v38, (os_log_type_t)v56, "%{public}s: Retain requested for previous purged, canceling purging: %{public}s", (uint8_t *)v42, 0x16u);
      uint64_t v47 = v55;
      swift_arrayDestroy();
      MEMORY[0x26113F070](v47, -1, -1);
      MEMORY[0x26113F070](v42, -1, -1);
    }
    else
    {
      swift_unknownObjectRelease_n();
    }

    objc_msgSend(v37, sel_invalidate);
  }
  uint64_t v48 = v33;
  Ref.init(_:)(v35, v74);
  uint64_t v49 = v74[0];
  uint64_t v50 = v66;
  uint64_t v51 = *(int *)(v66 + 48);
  uint64_t v52 = *(int *)(v66 + 64);
  uint64_t v27 = v71;
  uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v71 + 16))(v36, v34, v25);
  if (!__OFADD__(v65, 1))
  {
    *(void *)&v36[v51] = v65 + 1;
    *(void *)&v36[v52] = 0;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v59 + 56))(v36, 0, 1, v50);
    uint64_t v72 = v49;
    swift_beginAccess();
    sub_25A50E990();
    swift_unknownObjectRetain();
    sub_25A50E9E0();
    swift_endAccess();

    uint64_t v26 = v70;
    v58(v70, v34, v25);
    uint64_t v24 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56))(v26, v24, 1, v25);
  }
  __break(1u);
  return result;
}

uint64_t AssociatedObjectCache.withAssociatedObject(to:during:)(uint64_t a1, void (*a2)(char *), uint64_t a3)
{
  uint64_t v4 = v3;
  v18[1] = a3;
  uint64_t v19 = a2;
  uint64_t v6 = *(void *)(*(void *)v4 + 88);
  uint64_t v20 = type metadata accessor for AssociatedObjectCache.DecrementResult();
  v18[0] = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v8 = (char *)v18 - v7;
  uint64_t v9 = sub_25A50FA40();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)v18 - v12;
  uint64_t v14 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v16 = (char *)v18 - v15;
  AssociatedObjectCache.retainedAssociatedObject(to:)(a1, (uint64_t)v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, v6) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v13, v6);
  v19(v16);
  AssociatedObjectCache.decrementReferenceCount(to:after:)(a1, 0, 0, 0, (unint64_t)v8);
  (*(void (**)(char *, uint64_t))(v18[0] + 8))(v8, v20);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v6);
}

const char *AssociatedObjectCache.decrementReferenceCount(to:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X8>)
{
  return AssociatedObjectCache.decrementReferenceCount(to:after:)(a1, 0, 0, 0, a2);
}

const char *AssociatedObjectCache.decrementReferenceCount(to:after:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const char *a4@<X3>, unint64_t a5@<X8>)
{
  uint64_t v165 = a4;
  uint64_t v167 = a3;
  double v164 = *(double *)&a2;
  uint64_t v7 = *v5;
  uint64_t v8 = *v5;
  unint64_t v174 = a5;
  uint64_t v175 = v8;
  uint64_t v160 = sub_25A50E5E0();
  uint64_t v159 = *(void *)(v160 - 8);
  MEMORY[0x270FA5388](v160);
  uint64_t v157 = v9;
  uint64_t v158 = (char *)&v148 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v7 + 88);
  uint64_t v154 = sub_25A50FA40();
  uint64_t v153 = *(void (***)(uint64_t, uint64_t))(v154 - 8);
  MEMORY[0x270FA5388](v154);
  uint64_t v152 = (char *)&v148 - v11;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A419A00);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  uint64_t v13 = sub_25A50FA40();
  uint64_t v170 = *(uint64_t **)(v13 - 8);
  uint64_t v171 = v13;
  uint64_t v14 = MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v148 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v148 - v17;
  uint64_t v169 = swift_getTupleTypeMetadata3();
  uint64_t v19 = MEMORY[0x270FA5388](v169);
  uint64_t v168 = (char *)&v148 - v20;
  uint64_t v178 = *(void *)(v10 - 8);
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v161 = (void (*)(unint64_t, char *, uint64_t))((char *)&v148 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  uint64_t v162 = (char *)&v148 - v24;
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  uint64_t v155 = (char *)&v148 - v26;
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  uint64_t v151 = (char *)&v148 - v28;
  uint64_t v156 = v29;
  MEMORY[0x270FA5388](v27);
  uint64_t v31 = (char *)&v148 - v30;
  uint64_t v177 = v5;
  uint64_t v32 = (char *)v5 + qword_26A419A08;
  swift_unknownObjectRetain_n();
  uint64_t v166 = (void (*)(void, void))v32;
  uint64_t v33 = sub_25A50E5C0();
  os_log_type_t v34 = sub_25A50F820();
  BOOL v35 = os_log_type_enabled(v33, v34);
  uint64_t v176 = v10;
  uint64_t v173 = v31;
  uint64_t v163 = v16;
  uint64_t v172 = (uint8_t *)TupleTypeMetadata3;
  if (v35)
  {
    uint64_t v36 = swift_slowAlloc();
    uint64_t v37 = a1;
    uint64_t v38 = (const char *)swift_slowAlloc();
    long long aBlock = v38;
    *(_DWORD *)uint64_t v36 = 136446466;
    uint64_t v187 = v10;
    swift_getMetatypeMetadata();
    uint64_t v39 = sub_25A50EC90();
    uint64_t v187 = sub_25A3A36A4(v39, v40, (uint64_t *)&aBlock);
    sub_25A50FB00();
    swift_bridgeObjectRelease();
    *(_WORD *)(v36 + 12) = 2082;
    uint64_t v41 = *(void *)(v175 + 80);
    uint64_t v42 = static Logging.describe<A>(ref:)(v37);
    uint64_t v187 = sub_25A3A36A4(v42, v43, (uint64_t *)&aBlock);
    sub_25A50FB00();
    swift_unknownObjectRelease_n();
    TupleTypeMetadata3 = (uint64_t)v172;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25A380000, v33, v34, "%{public}s: Release requested for: %{public}s", (uint8_t *)v36, 0x16u);
    swift_arrayDestroy();
    unint64_t v44 = v38;
    a1 = v37;
    MEMORY[0x26113F070](v44, -1, -1);
    MEMORY[0x26113F070](v36, -1, -1);

    uint64_t v45 = v41;
  }
  else
  {
    swift_unknownObjectRelease_n();

    uint64_t v45 = *(void *)(v175 + 80);
  }
  Ref.init(_:)(a1, &v187);
  uint64_t v46 = v187;
  uint64_t v47 = v177;
  swift_beginAccess();
  uint64_t v48 = v47[2];
  uint64_t v186 = v46;
  uint64_t v49 = type metadata accessor for Ref();
  swift_unknownObjectRetain();
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x26113C9D0](&v186, v48, v49, TupleTypeMetadata3, WitnessTable);
  swift_unknownObjectRelease();
  swift_endAccess();
  uint64_t v51 = *(void *)(TupleTypeMetadata3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v18, 1, TupleTypeMetadata3) == 1)
  {
    ((void (*)(char *, uint64_t))v170[1])(v18, v171);
    long long aBlock = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/A"
             "ssociatedObjectCache.swift";
    uint64_t v180 = 133;
    uint64_t v52 = 2;
    LOBYTE(v181) = 2;
    long long v182 = xmmword_25A519460;
    uint64_t v183 = "decrementReferenceCount(to:after:)";
    uint64_t v184 = 34;
    char v185 = 2;
    sub_25A403498();
    unint64_t v53 = v174;
    uint64_t v54 = v176;
    uint64_t v55 = v178;
    return (const char *)(*(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v55 + 56))(v53, v52, 2, v54);
  }
  uint64_t v149 = v51;
  uint64_t v150 = WitnessTable;
  uint64_t v170 = v47 + 2;
  uint64_t v171 = v45;
  uint64_t v175 = a1;
  uint64_t v56 = *(void *)&v18[*(int *)(TupleTypeMetadata3 + 48)];
  uint64_t v57 = *(void *)&v18[*(int *)(TupleTypeMetadata3 + 64)];
  uint64_t v58 = v169;
  uint64_t v59 = *(int *)(v169 + 48);
  uint64_t v60 = *(int *)(v169 + 64);
  uint64_t v62 = v178 + 32;
  uint64_t v61 = *(void (**)(char *, char *, uint64_t))(v178 + 32);
  uint64_t v63 = v168;
  long long v64 = v18;
  uint64_t v65 = v176;
  v61(v168, v64, v176);
  *(void *)&v63[v59] = v56;
  *(void *)&v63[v60] = v57;
  uint64_t v66 = *(void *)&v63[*(int *)(v58 + 48)];

  uint64_t v67 = v173;
  uint64_t v68 = v62;
  uint64_t v54 = v65;
  uint64_t v169 = v68;
  v61(v173, v63, v65);
  if (!v66)
  {
    long long aBlock = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/A"
             "ssociatedObjectCache.swift";
    uint64_t v180 = 133;
    uint64_t v88 = v67;
    uint64_t v52 = 2;
    LOBYTE(v181) = 2;
    long long v182 = xmmword_25A519450;
    uint64_t v183 = "decrementReferenceCount(to:after:)";
    uint64_t v184 = 34;
    char v185 = 2;
    sub_25A403498();
    uint64_t v55 = v178;
    (*(void (**)(char *, uint64_t))(v178 + 8))(v88, v65);
    unint64_t v53 = v174;
    return (const char *)(*(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v55 + 56))(v53, v52, 2, v54);
  }
  if (v66 == 1)
  {
    uint64_t v161 = (void (*)(unint64_t, char *, uint64_t))v61;
    uint64_t v55 = v178;
    uint64_t v69 = v166;
    if (v167)
    {
      uint64_t v168 = (char *)v49;
      uint64_t v70 = v67;
      uint64_t v71 = *(void *)&v164;
      double v72 = v164;
      uint64_t v73 = *(void (***)(uint64_t, uint64_t))(v178 + 16);
      uint64_t v74 = v155;
      uint64_t v154 = v178 + 16;
      uint64_t v153 = v73;
      ((void (*)(char *, char *, uint64_t))v73)(v155, v70, v65);
      swift_retain();
      uint64_t v75 = sub_25A50E5C0();
      os_log_type_t v76 = sub_25A50F820();
      if (os_log_type_enabled(v75, v76))
      {
        uint64_t v77 = swift_slowAlloc();
        uint64_t v151 = (const char *)swift_slowAlloc();
        long long aBlock = v151;
        *(_DWORD *)uint64_t v77 = 134218242;
        uint64_t v187 = v71;
        uint64_t v152 = &v188;
        sub_25A50FB00();
        *(_WORD *)(v77 + 12) = 2082;
        uint64_t v148 = v77 + 14;
        sub_25A510350();
        __swift_instantiateConcreteTypeFromMangledName(&qword_26A417468);
        uint64_t v78 = swift_allocObject();
        *(_OWORD *)(v78 + 16) = xmmword_25A511AC0;
        *(void *)(v78 + 56) = MEMORY[0x263F8D310];
        *(void *)(v78 + 64) = sub_25A3DF94C();
        *(void *)(v78 + 32) = 0x63656A624F796E41;
        *(void *)(v78 + 40) = 0xE900000000000074;
        uint64_t v79 = sub_25A50EBD0();
        uint64_t v80 = MEMORY[0x263F8D750];
        *(void *)(v78 + 96) = MEMORY[0x263F8D6C8];
        *(void *)(v78 + 104) = v80;
        *(void *)(v78 + 72) = v79;
        uint64_t v81 = sub_25A50EC50();
        uint64_t v82 = v54;
        unint64_t v84 = v83;
        swift_unknownObjectRelease();
        uint64_t v85 = v81;
        uint64_t v55 = v178;
        uint64_t v187 = sub_25A3A36A4(v85, v84, (uint64_t *)&aBlock);
        sub_25A50FB00();
        uint64_t v54 = v82;
        swift_bridgeObjectRelease();
        uint64_t v86 = *(void (**)(char *, uint64_t))(v55 + 8);
        uint64_t v152 = (char *)((v55 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
        v86(v74, v82);
        _os_log_impl(&dword_25A380000, v75, v76, "Ref count is 1, but delaying purging for %f seconds: %{public}s", (uint8_t *)v77, 0x16u);
        uint64_t v87 = v151;
        swift_arrayDestroy();
        MEMORY[0x26113F070](v87, -1, -1);
        MEMORY[0x26113F070](v77, -1, -1);
      }
      else
      {

        uint64_t v125 = *(void (**)(char *, uint64_t))(v55 + 8);
        uint64_t v152 = (char *)((v55 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
        v125(v74, v65);
      }
      uint64_t v155 = (char *)self;
      uint64_t v151 = (const char *)swift_allocObject();
      swift_weakInit();
      uint64_t v126 = v159;
      uint64_t v127 = v158;
      uint64_t v128 = v160;
      (*(void (**)(char *, void (*)(void, void), uint64_t))(v159 + 16))(v158, v69, v160);
      ((void (*)(char *, char *, uint64_t))v153)(v162, v173, v54);
      unint64_t v129 = (*(unsigned __int8 *)(v126 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v126 + 80);
      unint64_t v130 = (v157 + v129 + *(unsigned __int8 *)(v55 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80);
      unint64_t v131 = (v156 + v130 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v132 = (v131 + 15) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v133 = swift_allocObject();
      *(void *)(v133 + 16) = v171;
      *(void *)(v133 + 24) = v54;
      (*(void (**)(unint64_t, char *, uint64_t))(v126 + 32))(v133 + v129, v127, v128);
      v161(v133 + v130, v162, v54);
      *(void *)(v133 + v131) = v151;
      uint64_t v134 = v175;
      *(void *)(v133 + v132) = v175;
      uint64_t v135 = (void *)(v133 + ((v132 + 15) & 0xFFFFFFFFFFFFFFF8));
      uint64_t v55 = v178;
      uint64_t v136 = v167;
      uint64_t v137 = v165;
      *uint64_t v135 = v167;
      v135[1] = v137;
      *((void *)&v182 + 1) = sub_25A479BE8;
      uint64_t v183 = (const char *)v133;
      long long aBlock = (const char *)MEMORY[0x263EF8330];
      uint64_t v180 = 1107296256;
      uint64_t v181 = sub_25A3CA460;
      *(void *)&long long v182 = &block_descriptor_8;
      uint64_t v138 = _Block_copy(&aBlock);
      swift_unknownObjectRetain();
      sub_25A423608(*(uint64_t *)&v164, v136);
      swift_release();
      id v139 = objc_msgSend(v155, sel_scheduledTimerWithTimeInterval_repeats_block_, 0, v138, v72);
      _Block_release(v138);
      Ref.init(_:)(v134, &v187);
      uint64_t v140 = v187;
      uint64_t v141 = v172;
      long long v142 = v173;
      uint64_t v143 = *((int *)v172 + 12);
      uint64_t v144 = *((int *)v172 + 16);
      uint64_t v145 = v163;
      ((void (*)(char *, char *, uint64_t))v153)(v163, v173, v54);
      *(void *)&v145[v143] = 0;
      *(void *)&v145[v144] = v139;
      uint64_t v52 = 1;
      (*(void (**)(char *, void, uint64_t, uint8_t *))(v149 + 56))(v145, 0, 1, v141);
      uint64_t v186 = v140;
      swift_beginAccess();
      sub_25A50E990();
      swift_unknownObjectRetain();
      id v146 = v139;
      sub_25A50E9E0();
      swift_endAccess();

      sub_25A423628(*(uint64_t *)&v164, v167);
      (*(void (**)(char *, uint64_t))(v55 + 8))(v142, v54);
      unint64_t v53 = v174;
    }
    else
    {
      uint64_t v113 = v151;
      (*(void (**)(const char *, char *, uint64_t))(v178 + 16))(v151, v67, v65);
      uint64_t v114 = v67;
      uint64_t v115 = sub_25A50E5C0();
      os_log_type_t v116 = sub_25A50F820();
      if (os_log_type_enabled(v115, v116))
      {
        uint64_t v117 = (uint8_t *)swift_slowAlloc();
        uint64_t v118 = (const char *)swift_slowAlloc();
        long long aBlock = v118;
        *(_DWORD *)uint64_t v117 = 136446210;
        uint64_t v172 = v117 + 4;
        sub_25A510350();
        __swift_instantiateConcreteTypeFromMangledName(&qword_26A417468);
        uint64_t v119 = swift_allocObject();
        *(_OWORD *)(v119 + 16) = xmmword_25A511AC0;
        *(void *)(v119 + 56) = MEMORY[0x263F8D310];
        *(void *)(v119 + 64) = sub_25A3DF94C();
        *(void *)(v119 + 32) = 0x63656A624F796E41;
        *(void *)(v119 + 40) = 0xE900000000000074;
        uint64_t v120 = sub_25A50EBD0();
        uint64_t v121 = MEMORY[0x263F8D750];
        *(void *)(v119 + 96) = MEMORY[0x263F8D6C8];
        *(void *)(v119 + 104) = v121;
        *(void *)(v119 + 72) = v120;
        uint64_t v122 = sub_25A50EC50();
        unint64_t v124 = v123;
        uint64_t v114 = v173;
        swift_unknownObjectRelease();
        uint64_t v187 = sub_25A3A36A4(v122, v124, (uint64_t *)&aBlock);
        sub_25A50FB00();
        uint64_t v55 = v178;
        swift_bridgeObjectRelease();
        (*(void (**)(const char *, uint64_t))(v55 + 8))(v113, v54);
        _os_log_impl(&dword_25A380000, v115, v116, "Ref count is 1, invalidating: %{public}s", v117, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x26113F070](v118, -1, -1);
        MEMORY[0x26113F070](v117, -1, -1);
      }
      else
      {

        (*(void (**)(const char *, uint64_t))(v55 + 8))(v113, v65);
      }
      uint64_t v147 = (uint64_t)v152;
      AssociatedObjectCache.purgeAssociatedObject(to:)(v175, (uint64_t)v152);
      v153[1](v147, v154);
      unint64_t v53 = v174;
      v161(v174, v114, v54);
      uint64_t v52 = 0;
    }
    return (const char *)(*(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v55 + 56))(v53, v52, 2, v54);
  }
  uint64_t v168 = (char *)v49;
  uint64_t v55 = v178;
  uint64_t v89 = (uint64_t *)(v178 + 16);
  char v90 = v161;
  uint64_t v169 = *(void *)(v178 + 16);
  ((void (*)(void, char *, uint64_t))v169)(v161, v67, v65);
  uint64_t v91 = sub_25A50E5C0();
  os_log_type_t v92 = sub_25A50F820();
  BOOL v93 = os_log_type_enabled(v91, v92);
  BOOL v94 = __OFSUB__(v66, 1);
  uint64_t v95 = v66 - 1;
  char v96 = v94;
  uint64_t v97 = v175;
  uint64_t v177 = v89;
  uint64_t v167 = v95;
  if (v93)
  {
    uint64_t v98 = swift_slowAlloc();
    uint64_t result = (const char *)swift_slowAlloc();
    uint64_t v165 = result;
    long long aBlock = result;
    *(_DWORD *)uint64_t v98 = 134218242;
    if (v96) {
      goto LABEL_29;
    }
    uint64_t v187 = v95;
    sub_25A50FB00();
    *(_WORD *)(v98 + 12) = 2082;
    sub_25A510350();
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A417468);
    uint64_t v100 = swift_allocObject();
    *(_OWORD *)(v100 + 16) = xmmword_25A511AC0;
    *(void *)(v100 + 56) = MEMORY[0x263F8D310];
    *(void *)(v100 + 64) = sub_25A3DF94C();
    *(void *)(v100 + 32) = 0x63656A624F796E41;
    *(void *)(v100 + 40) = 0xE900000000000074;
    uint64_t v101 = sub_25A50EBD0();
    uint64_t v102 = MEMORY[0x263F8D750];
    *(void *)(v100 + 96) = MEMORY[0x263F8D6C8];
    *(void *)(v100 + 104) = v102;
    *(void *)(v100 + 72) = v101;
    uint64_t v103 = sub_25A50EC50();
    unint64_t v105 = v104;
    swift_unknownObjectRelease();
    uint64_t v187 = sub_25A3A36A4(v103, v105, (uint64_t *)&aBlock);
    sub_25A50FB00();
    swift_bridgeObjectRelease();
    uint64_t v55 = v178;
    uint64_t v166 = *(void (**)(void, void))(v178 + 8);
    v166(v90, v54);
    _os_log_impl(&dword_25A380000, v91, v92, "Decrementing ref count to %ld for %{public}s", (uint8_t *)v98, 0x16u);
    uint64_t v106 = v165;
    swift_arrayDestroy();
    MEMORY[0x26113F070](v106, -1, -1);
    MEMORY[0x26113F070](v98, -1, -1);

    char v96 = 0;
    uint64_t v97 = v175;
  }
  else
  {

    uint64_t v166 = *(void (**)(void, void))(v55 + 8);
    v166(v90, v54);
  }
  Ref.init(_:)(v97, &v187);
  uint64_t v107 = v187;
  uint64_t v109 = v172;
  uint64_t v108 = v173;
  uint64_t v110 = *((int *)v172 + 12);
  uint64_t v111 = *((int *)v172 + 16);
  uint64_t v112 = v163;
  uint64_t result = (const char *)((uint64_t (*)(char *, char *, uint64_t))v169)(v163, v173, v54);
  if ((v96 & 1) == 0)
  {
    *(void *)&v112[v110] = v167;
    *(void *)&v112[v111] = 0;
    (*(void (**)(char *, void, uint64_t, uint8_t *))(v149 + 56))(v112, 0, 1, v109);
    uint64_t v186 = v107;
    swift_beginAccess();
    sub_25A50E990();
    swift_unknownObjectRetain();
    sub_25A50E9E0();
    swift_endAccess();
    v166(v108, v54);
    uint64_t v52 = 2;
    unint64_t v53 = v174;
    return (const char *)(*(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v55 + 56))(v53, v52, 2, v54);
  }
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t AssociatedObjectCache.purgeAssociatedObject(to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v43 = a2;
  uint64_t v4 = *(void *)(*v2 + 88);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A419A00);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  uint64_t v6 = sub_25A50FA40();
  uint64_t v39 = *(void *)(v6 - 8);
  uint64_t v40 = v6;
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  uint64_t v42 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v32 - v9;
  uint64_t v44 = v4;
  uint64_t v11 = swift_getTupleTypeMetadata3();
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v32 - v12;
  Ref.init(_:)(a1, &v46);
  uint64_t v14 = v46;
  uint64_t v38 = v2 + 2;
  swift_beginAccess();
  uint64_t v15 = v2[2];
  uint64_t v45 = v14;
  uint64_t v16 = type metadata accessor for Ref();
  uint64_t v41 = a1;
  swift_unknownObjectRetain();
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x26113C9D0](&v45, v15, v16, TupleTypeMetadata3);
  swift_unknownObjectRelease();
  swift_endAccess();
  uint64_t v17 = *(void *)(TupleTypeMetadata3 - 8);
  uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
  uint64_t v36 = v17 + 48;
  uint64_t v37 = v18;
  if (v18(v10, 1, TupleTypeMetadata3) == 1)
  {
    uint64_t v20 = v39;
    uint64_t v19 = v40;
    (*(void (**)(char *, uint64_t))(v39 + 8))(v10, v40);
  }
  else
  {
    uint64_t v21 = *(void *)&v10[*(int *)(TupleTypeMetadata3 + 48)];
    uint64_t v33 = *(void *)&v10[*(int *)(TupleTypeMetadata3 + 64)];
    uint64_t v34 = v21;
    uint64_t v22 = *(int *)(v11 + 48);
    uint64_t v23 = v44;
    uint64_t v24 = *(int *)(v11 + 64);
    uint64_t v25 = *(void *)(v44 - 8);
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v13, v10, v44);
    *(void *)&v13[v22] = v34;
    *(void *)&v13[v24] = v33;
    uint64_t v26 = *(void **)&v13[*(int *)(v11 + 64)];
    (*(void (**)(char *, uint64_t))(v25 + 8))(v13, v23);
    objc_msgSend(v26, sel_invalidate);

    uint64_t v20 = v39;
    uint64_t v19 = v40;
  }
  Ref.init(_:)(v41, &v46);
  uint64_t v45 = v46;
  swift_beginAccess();
  sub_25A50E990();
  swift_unknownObjectRetain();
  uint64_t v27 = v42;
  sub_25A50E8C0();
  swift_endAccess();
  swift_unknownObjectRelease();
  if (v37(v27, 1, TupleTypeMetadata3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v27, v19);
    uint64_t v28 = v43;
    uint64_t v29 = *(void *)(v44 - 8);
    uint64_t v30 = 1;
  }
  else
  {

    uint64_t v28 = v43;
    uint64_t v29 = *(void *)(v44 - 8);
    (*(void (**)(uint64_t, char *))(v29 + 32))(v43, v27);
    uint64_t v30 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v28, v30, 1, v44);
}

id sub_25A478A48(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void), uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v45 = a5;
  uint64_t v14 = sub_25A50FA40();
  uint64_t v43 = *(void *)(v14 - 8);
  uint64_t v44 = v14;
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)v37 - v16;
  uint64_t v18 = *(void *)(a9 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v20 = (char *)v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  id result = objc_msgSend(a1, sel_isValid);
  if (result)
  {
    uint64_t v42 = a4 + 16;
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, a3, a9);
    uint64_t v22 = sub_25A50E5C0();
    os_log_type_t v23 = sub_25A50F820();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      v47[0] = v39;
      uint64_t v40 = a7;
      *(_DWORD *)uint64_t v24 = 136446210;
      v37[1] = v24 + 4;
      uint64_t v38 = v24;
      sub_25A510350();
      uint64_t v41 = a6;
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A417468);
      uint64_t v25 = swift_allocObject();
      *(_OWORD *)(v25 + 16) = xmmword_25A511AC0;
      *(void *)(v25 + 56) = MEMORY[0x263F8D310];
      *(void *)(v25 + 64) = sub_25A3DF94C();
      *(void *)(v25 + 32) = 0x63656A624F796E41;
      *(void *)(v25 + 40) = 0xE900000000000074;
      uint64_t v26 = sub_25A50EBD0();
      uint64_t v27 = MEMORY[0x263F8D750];
      *(void *)(v25 + 96) = MEMORY[0x263F8D6C8];
      *(void *)(v25 + 104) = v27;
      *(void *)(v25 + 72) = v26;
      uint64_t v28 = sub_25A50EC50();
      unint64_t v30 = v29;
      a6 = v41;
      swift_unknownObjectRelease();
      uint64_t v46 = sub_25A3A36A4(v28, v30, v47);
      sub_25A50FB00();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v18 + 8))(v20, a9);
      os_log_type_t v31 = v23;
      uint64_t v32 = v38;
      _os_log_impl(&dword_25A380000, v22, v31, "Purging pending associated object %{public}s", v38, 0xCu);
      uint64_t v33 = v39;
      swift_arrayDestroy();
      MEMORY[0x26113F070](v33, -1, -1);
      MEMORY[0x26113F070](v32, -1, -1);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v18 + 8))(v20, a9);
    }
    uint64_t v35 = v44;
    uint64_t v34 = v45;
    uint64_t v36 = v43;
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      AssociatedObjectCache.purgeAssociatedObject(to:)(v34, (uint64_t)v17);
      swift_release();
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v17, 1, 1, a9);
    }
    (*(void (**)(char *, uint64_t))(v36 + 8))(v17, v35);
    return (id)a6(v34);
  }
  return result;
}

Swift::Void __swiftcall AssociatedObjectCache.purgeAllAssociatedObjects()()
{
  uint64_t v1 = *(void *)(*v0 + 88);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A419A00);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  uint64_t v3 = *(void *)(TupleTypeMetadata3 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](TupleTypeMetadata3);
  uint64_t v60 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v59 = (char *)&v46 - v7;
  MEMORY[0x270FA5388](v6);
  uint64_t v58 = (char *)&v46 - v8;
  uint64_t v49 = type metadata accessor for Ref();
  uint64_t v68 = TupleTypeMetadata3;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v64 = sub_25A50FA40();
  uint64_t v10 = *(void *)(v64 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v64);
  uint64_t v13 = (uint64_t *)((char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v11);
  uint64_t v65 = (char *)&v46 - v14;
  uint64_t v48 = v0 + 2;
  swift_beginAccess();
  uint64_t v15 = v0[2];
  uint64_t v16 = *(void *)(v15 + 64);
  uint64_t v50 = v15 + 64;
  uint64_t v17 = 1 << *(unsigned char *)(v15 + 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & v16;
  uint64_t v66 = TupleTypeMetadata2;
  uint64_t v63 = TupleTypeMetadata2 - 8;
  uint64_t v52 = v3 + 16;
  uint64_t v61 = v1;
  uint64_t v62 = (void (**)(char *, void *, uint64_t))(v10 + 32);
  uint64_t v56 = v1 - 8;
  uint64_t v53 = v3;
  uint64_t v55 = (void (**)(char *, uint64_t))(v3 + 8);
  int64_t v51 = (unint64_t)(v17 + 63) >> 6;
  int64_t v47 = v51 - 1;
  uint64_t v54 = v15;
  swift_bridgeObjectRetain();
  int64_t v67 = 0;
  uint64_t v57 = v13;
  uint64_t v20 = v68;
  uint64_t v21 = v61;
  if (!v19) {
    goto LABEL_6;
  }
LABEL_4:
  unint64_t v22 = __clz(__rbit64(v19));
  uint64_t v23 = (v19 - 1) & v19;
  uint64_t v24 = v66;
  unint64_t v25 = v22 | (v67 << 6);
  uint64_t v26 = v65;
LABEL_5:
  uint64_t v27 = *(void *)(v54 + 56);
  *uint64_t v13 = *(void *)(*(void *)(v54 + 48) + 8 * v25);
  (*(void (**)(char *, unint64_t, uint64_t))(v53 + 16))((char *)v13 + *(int *)(v24 + 48), v27 + *(void *)(v53 + 72) * v25, v68);
  uint64_t v28 = *(void *)(v24 - 8);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v13, 0, 1, v24);
  swift_unknownObjectRetain();
  while (1)
  {
    (*v62)(v26, v13, v64);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v24) == 1)
    {
      swift_release();
      swift_beginAccess();
      swift_getWitnessTable();
      sub_25A50E990();
      sub_25A50E980();
      swift_endAccess();
      return;
    }
    swift_unknownObjectRelease();
    uint64_t v33 = &v26[*(int *)(v24 + 48)];
    uint64_t v34 = *(int *)(v20 + 48);
    unint64_t v70 = v23;
    uint64_t v35 = *(void *)&v33[v34];
    uint64_t v36 = *(int *)(v20 + 64);
    uint64_t v37 = *(void **)&v33[v36];
    uint64_t v38 = *(void *)(v21 - 8);
    uint64_t v39 = *(void (**)(char *))(v38 + 32);
    uint64_t v40 = v59;
    v39(v59);
    *(void *)&v40[v34] = v35;
    *(void *)&v40[v36] = v37;
    uint64_t v69 = *(int *)(v20 + 48);
    uint64_t v41 = *(int *)(v20 + 64);
    uint64_t v42 = v58;
    ((void (*)(char *, char *, uint64_t))v39)(v58, v40, v21);
    *(void *)&v42[v69] = v35;
    *(void *)&v42[v41] = v37;
    uint64_t v43 = *(int *)(v20 + 48);
    uint64_t v44 = *(int *)(v20 + 64);
    uint64_t v45 = v60;
    (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v60, v42, v21);
    *(void *)&v45[v43] = v35;
    unint64_t v19 = v70;
    *(void *)&v45[v44] = v37;
    uint64_t v13 = v57;
    objc_msgSend(v37, sel_invalidate);
    (*v55)(v42, v20);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v45, v21);
    if (v19) {
      goto LABEL_4;
    }
LABEL_6:
    uint64_t v24 = v66;
    int64_t v29 = v67 + 1;
    uint64_t v26 = v65;
    if (__OFADD__(v67, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v29 < v51)
    {
      unint64_t v30 = *(void *)(v50 + 8 * v29);
      if (v30) {
        goto LABEL_9;
      }
      int64_t v31 = v67 + 2;
      ++v67;
      if (v29 + 1 < v51)
      {
        unint64_t v30 = *(void *)(v50 + 8 * v31);
        if (v30)
        {
          ++v29;
LABEL_9:
          uint64_t v23 = (v30 - 1) & v30;
          unint64_t v25 = __clz(__rbit64(v30)) + (v29 << 6);
          int64_t v67 = v29;
          goto LABEL_5;
        }
        int64_t v32 = v29 + 2;
        int64_t v67 = v29 + 1;
        if (v29 + 2 < v51) {
          break;
        }
      }
    }
LABEL_21:
    uint64_t v28 = *(void *)(v66 - 8);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v28 + 56))(v13, 1, 1, v66);
    uint64_t v23 = 0;
  }
  unint64_t v30 = *(void *)(v50 + 8 * v32);
  if (v30)
  {
    v29 += 2;
    goto LABEL_9;
  }
  while (1)
  {
    int64_t v29 = v32 + 1;
    if (__OFADD__(v32, 1)) {
      break;
    }
    if (v29 >= v51)
    {
      int64_t v67 = v47;
      goto LABEL_21;
    }
    unint64_t v30 = *(void *)(v50 + 8 * v29);
    ++v32;
    if (v30) {
      goto LABEL_9;
    }
  }
LABEL_27:
  __break(1u);
}

uint64_t AssociatedObjectCache.deinit()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + qword_26A419A08;
  uint64_t v2 = sub_25A50E5E0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t AssociatedObjectCache.__deallocating_deinit()
{
  AssociatedObjectCache.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x270FA0228](v0, v1, v2);
}

BOOL static AssociatedObjectCache.DecrementResult.Discriminant.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t AssociatedObjectCache.DecrementResult.Discriminant.hash(into:)()
{
  return sub_25A5104F0();
}

uint64_t AssociatedObjectCache.DecrementResult.Discriminant.hashValue.getter()
{
  return sub_25A510530();
}

BOOL sub_25A4796B8(char *a1, char *a2)
{
  return static AssociatedObjectCache.DecrementResult.Discriminant.== infix(_:_:)(*a1, *a2);
}

uint64_t sub_25A4796C4()
{
  return AssociatedObjectCache.DecrementResult.Discriminant.hashValue.getter();
}

uint64_t sub_25A4796CC()
{
  return AssociatedObjectCache.DecrementResult.Discriminant.hash(into:)();
}

uint64_t sub_25A4796D4()
{
  return sub_25A510530();
}

uint64_t AssociatedObjectCache.DecrementResult.discriminant.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 48))(v4, 2);
  if (result)
  {
    if (result != 1) {
      return 2;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
    return 0;
  }
  return result;
}

uint64_t sub_25A479830@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

unint64_t sub_25A479860(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_25A50EA10();

  return sub_25A4798D4(a1, v6, a2, a3);
}

uint64_t type metadata accessor for AssociatedObjectCache.DecrementResult()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t sub_25A4798D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v21[1] = a1;
  _OWORD v21[2] = a4;
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = v4;
  uint64_t v9 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v11 = v10 & ~v9;
  v21[0] = v4 + 64;
  if ((*(void *)(v4 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11))
  {
    uint64_t v12 = ~v9;
    uint64_t v15 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v13 = v6 + 16;
    uint64_t v14 = v15;
    uint64_t v16 = *(void *)(v13 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v13 - 8);
    do
    {
      uint64_t v18 = v13;
      v14(v8, *(void *)(v22 + 48) + v16 * v11, a3);
      char v19 = sub_25A50EBE0();
      (*v17)(v8, a3);
      if (v19) {
        break;
      }
      unint64_t v11 = (v11 + 1) & v12;
      uint64_t v13 = v18;
    }
    while (((*(void *)(v21[0] + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  }
  return v11;
}

uint64_t sub_25A479A5C()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_25A479A94()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = sub_25A50E5E0();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 32) & ~v4;
  uint64_t v6 = *(void *)(v1 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v5 + *(void *)(v3 + 64) + v7) & ~v7;
  uint64_t v9 = v4 | v7 | 7;
  unint64_t v10 = (((((*(void *)(v6 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v5, v2);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v8, v1);
  swift_release();
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, v10 + 16, v9);
}

id sub_25A479BE8(void *a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(sub_25A50E5E0() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (v6 + *(void *)(v5 + 64) + *(unsigned __int8 *)(*(void *)(v4 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v4 - 8) + 80);
  unint64_t v8 = (*(void *)(*(void *)(v4 - 8) + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_25A478A48(a1, v1 + v6, v1 + v7, *(void *)(v1 + v8), *(void *)(v1 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8)), *(uint64_t (**)(void))(v1 + ((((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v1 + ((((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8), v3, v4);
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

uint64_t sub_25A479D1C()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A479D38()
{
  uint64_t result = sub_25A50E5E0();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for AssociatedObjectCache()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for AssociatedObjectCache(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AssociatedObjectCache);
}

uint64_t dispatch thunk of AssociatedObjectCache.__allocating_init(logAspect:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t sub_25A479E1C()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *sub_25A479E98(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  unint64_t v9 = v8;
  if (v7 <= 1)
  {
    if (v8 <= 3)
    {
      unsigned int v11 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
      if (v11 > 0xFFFE)
      {
        uint64_t v10 = 4;
      }
      else
      {
        BOOL v12 = v11 != 0;
        BOOL v13 = v11 >= 0xFF;
        uint64_t v10 = 2;
        if (!v13) {
          uint64_t v10 = v12;
        }
      }
    }
    else
    {
      uint64_t v10 = 1;
    }
    unint64_t v9 = v10 + v8;
  }
  uint64_t v14 = *(_DWORD *)(v6 + 80);
  if (v14 <= 7 && v9 <= 0x18 && (*(_DWORD *)(v6 + 80) & 0x100000) == 0)
  {
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v6 + 48))(a2, 2, v5))
    {
      if (v7 <= 1)
      {
        if (v8 <= 3)
        {
          unsigned int v19 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
          if (v19 > 0xFFFE)
          {
            uint64_t v18 = 4;
          }
          else
          {
            BOOL v20 = v19 != 0;
            BOOL v13 = v19 >= 0xFF;
            uint64_t v18 = 2;
            if (!v13) {
              uint64_t v18 = v20;
            }
          }
        }
        else
        {
          uint64_t v18 = 1;
        }
        v8 += v18;
      }
      memcpy(a1, a2, v8);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
    }
  }
  else
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v14 + 16) & ~v14));
    swift_retain();
  }
  return a1;
}

uint64_t sub_25A47A090(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 2, v3);
  if (!result)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
    return v5(a1, v3);
  }
  return result;
}

void *sub_25A47A154(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 2, v5))
  {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
    size_t v8 = *(void *)(v6 + 64);
    if (v7 <= 1)
    {
      if (v8 <= 3)
      {
        unsigned int v10 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
        if (v10 > 0xFFFE)
        {
          uint64_t v9 = 4;
        }
        else
        {
          BOOL v11 = v10 != 0;
          BOOL v12 = v10 >= 0xFF;
          uint64_t v9 = 2;
          if (!v12) {
            uint64_t v9 = v11;
          }
        }
      }
      else
      {
        uint64_t v9 = 1;
      }
      v8 += v9;
    }
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  return a1;
}

void *sub_25A47A2A4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  unsigned int v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 2, v5);
  int v9 = v7(a2, 2, v5);
  if (v8)
  {
    if (v9)
    {
      unsigned int v10 = *(_DWORD *)(v6 + 84);
      size_t v11 = *(void *)(v6 + 64);
      if (v10 <= 1)
      {
        if (v11 > 3)
        {
LABEL_5:
          uint64_t v12 = 1;
LABEL_16:
          v11 += v12;
          goto LABEL_17;
        }
LABEL_9:
        unsigned int v15 = (~(-1 << (8 * v11)) - v10 + 2) >> (8 * v11);
        if (v15 > 0xFFFE)
        {
          uint64_t v12 = 4;
        }
        else
        {
          BOOL v16 = v15 != 0;
          BOOL v17 = v15 >= 0xFF;
          uint64_t v12 = 2;
          if (!v17) {
            uint64_t v12 = v16;
          }
        }
        goto LABEL_16;
      }
      goto LABEL_17;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  else
  {
    if (v9)
    {
      uint64_t v14 = *(void (**)(void *, uint64_t))(v6 + 8);
      uint64_t v13 = v6 + 8;
      v14(a1, v5);
      unsigned int v10 = *(_DWORD *)(v13 + 76);
      size_t v11 = *(void *)(v13 + 56);
      if (v10 <= 1)
      {
        if (v11 > 3) {
          goto LABEL_5;
        }
        goto LABEL_9;
      }
LABEL_17:
      memcpy(a1, a2, v11);
      return a1;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
  }
  return a1;
}

void *sub_25A47A474(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 2, v5))
  {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
    size_t v8 = *(void *)(v6 + 64);
    if (v7 <= 1)
    {
      if (v8 <= 3)
      {
        unsigned int v10 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
        if (v10 > 0xFFFE)
        {
          uint64_t v9 = 4;
        }
        else
        {
          BOOL v11 = v10 != 0;
          BOOL v12 = v10 >= 0xFF;
          uint64_t v9 = 2;
          if (!v12) {
            uint64_t v9 = v11;
          }
        }
      }
      else
      {
        uint64_t v9 = 1;
      }
      v8 += v9;
    }
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  return a1;
}

void *sub_25A47A5C4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  unsigned int v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 2, v5);
  int v9 = v7(a2, 2, v5);
  if (v8)
  {
    if (v9)
    {
      unsigned int v10 = *(_DWORD *)(v6 + 84);
      size_t v11 = *(void *)(v6 + 64);
      if (v10 <= 1)
      {
        if (v11 > 3)
        {
LABEL_5:
          uint64_t v12 = 1;
LABEL_16:
          v11 += v12;
          goto LABEL_17;
        }
LABEL_9:
        unsigned int v15 = (~(-1 << (8 * v11)) - v10 + 2) >> (8 * v11);
        if (v15 > 0xFFFE)
        {
          uint64_t v12 = 4;
        }
        else
        {
          BOOL v16 = v15 != 0;
          BOOL v17 = v15 >= 0xFF;
          uint64_t v12 = 2;
          if (!v17) {
            uint64_t v12 = v16;
          }
        }
        goto LABEL_16;
      }
      goto LABEL_17;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  else
  {
    if (v9)
    {
      uint64_t v14 = *(void (**)(void *, uint64_t))(v6 + 8);
      uint64_t v13 = v6 + 8;
      v14(a1, v5);
      unsigned int v10 = *(_DWORD *)(v13 + 76);
      size_t v11 = *(void *)(v13 + 56);
      if (v10 <= 1)
      {
        if (v11 > 3) {
          goto LABEL_5;
        }
        goto LABEL_9;
      }
LABEL_17:
      memcpy(a1, a2, v11);
      return a1;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
  }
  return a1;
}

uint64_t sub_25A47A794(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 2;
  uint64_t v7 = *(void *)(v4 + 64);
  if (v5 <= 1)
  {
    unsigned int v6 = 0;
    if (v7 <= 3)
    {
      unsigned int v9 = (~(-1 << (8 * v7)) - v5 + 2) >> (8 * v7);
      if (v9 > 0xFFFE)
      {
        uint64_t v8 = 4;
      }
      else
      {
        BOOL v10 = v9 != 0;
        BOOL v11 = v9 >= 0xFF;
        uint64_t v8 = 2;
        if (!v11) {
          uint64_t v8 = v10;
        }
      }
    }
    else
    {
      uint64_t v8 = 1;
    }
    v7 += v8;
  }
  if (!a2) {
    return 0;
  }
  int v12 = a2 - v6;
  if (a2 <= v6) {
    goto LABEL_30;
  }
  char v13 = 8 * v7;
  if (v7 <= 3)
  {
    unsigned int v15 = ((v12 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      int v14 = *(_DWORD *)((char *)a1 + v7);
      if (!v14) {
        goto LABEL_30;
      }
      goto LABEL_20;
    }
    if (v15 > 0xFF)
    {
      int v14 = *(unsigned __int16 *)((char *)a1 + v7);
      if (!*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_30;
      }
      goto LABEL_20;
    }
    if (v15 < 2)
    {
LABEL_30:
      if (v6)
      {
        unsigned int v19 = (*(uint64_t (**)(void))(v4 + 48))();
        if (v19 >= 3) {
          return v19 - 2;
        }
        else {
          return 0;
        }
      }
      return 0;
    }
  }
  int v14 = *((unsigned __int8 *)a1 + v7);
  if (!*((unsigned char *)a1 + v7)) {
    goto LABEL_30;
  }
LABEL_20:
  int v16 = (v14 - 1) << v13;
  if (v7 > 3) {
    int v16 = 0;
  }
  if (v7)
  {
    if (v7 <= 3) {
      int v17 = v7;
    }
    else {
      int v17 = 4;
    }
    switch(v17)
    {
      case 2:
        int v18 = *a1;
        break;
      case 3:
        int v18 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v18 = *(_DWORD *)a1;
        break;
      default:
        int v18 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v18 = 0;
  }
  return v6 + (v18 | v16) + 1;
}

void sub_25A47A988(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  unsigned int v8 = v7 - 2;
  size_t v9 = *(void *)(v6 + 64);
  if (v7 <= 1)
  {
    unsigned int v8 = 0;
    if (v9 <= 3)
    {
      unsigned int v11 = (~(-1 << (8 * v9)) - v7 + 2) >> (8 * v9);
      if (v11 > 0xFFFE)
      {
        uint64_t v10 = 4;
      }
      else
      {
        BOOL v12 = v11 != 0;
        BOOL v13 = v11 >= 0xFF;
        uint64_t v10 = 2;
        if (!v13) {
          uint64_t v10 = v12;
        }
      }
    }
    else
    {
      uint64_t v10 = 1;
    }
    v9 += v10;
  }
  BOOL v13 = a3 >= v8;
  unsigned int v14 = a3 - v8;
  if (v14 != 0 && v13)
  {
    if (v9 <= 3)
    {
      unsigned int v18 = ((v14 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v18))
      {
        int v15 = 4;
      }
      else if (v18 >= 0x100)
      {
        int v15 = 2;
      }
      else
      {
        int v15 = v18 > 1;
      }
    }
    else
    {
      int v15 = 1;
    }
  }
  else
  {
    int v15 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v16 = ~v8 + a2;
    if (v9 < 4)
    {
      int v17 = (v16 >> (8 * v9)) + 1;
      if (v9)
      {
        int v19 = v16 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v19;
          a1[2] = BYTE2(v19);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v19;
        }
        else
        {
          *a1 = v19;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v16;
      int v17 = 1;
    }
    switch(v15)
    {
      case 1:
        a1[v9] = v17;
        return;
      case 2:
        *(_WORD *)&a1[v9] = v17;
        return;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v9] = v17;
        return;
      default:
        return;
    }
  }
  switch(v15)
  {
    case 1:
      a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 2:
      *(_WORD *)&a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x25A47AC0CLL);
    case 4:
      *(_DWORD *)&a1[v9] = 0;
      goto LABEL_29;
    default:
LABEL_29:
      if (a2)
      {
LABEL_30:
        BOOL v20 = *(void (**)(void))(v6 + 56);
        v20();
      }
      return;
  }
}

uint64_t sub_25A47AC34(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 24) - 8) + 48))(a1, 2);
}

uint64_t sub_25A47AC64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a3 + 24) - 8) + 56))(a1, a2, 2);
}

uint64_t sub_25A47AC98(uint64_t result)
{
  if (*(void *)(result + 8) >= 0xFFFFFFFFuLL) {
    return swift_release();
  }
  return result;
}

uint64_t sub_25A47ACB4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
  }
  else
  {
    uint64_t v4 = *(void *)(a2 + 16);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    *(void *)(a1 + 16) = v4;
    swift_retain();
  }
  return a1;
}

void *sub_25A47AD10(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      uint64_t v6 = a2[2];
      a1[1] = a2[1];
      a1[2] = v6;
      swift_retain();
      return a1;
    }
LABEL_7:
    long long v7 = *(_OWORD *)a2;
    a1[2] = a2[2];
    *(_OWORD *)a1 = v7;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  *a1 = *a2;
  uint64_t v5 = a2[2];
  a1[1] = a2[1];
  a1[2] = v5;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_25A47ADB8(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_release();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  swift_release();
  return a1;
}

uint64_t sub_25A47AE34(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t sub_25A47AE84(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

uint64_t sub_25A47AEDC(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_25A47AEF4(void *result, int a2)
{
  if (a2 < 0)
  {
    result[1] = 0;
    result[2] = 0;
    *uint64_t result = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for AssociatedObjectCache.PurgeDelay()
{
  return __swift_instantiateGenericMetadata();
}

unsigned char *sub_25A47AF30(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25A47AFFCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t type metadata accessor for AssociatedObjectCache.DecrementResult.Discriminant()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t CommandLineTool.description.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CommandLineTool.commands.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CommandLineTool.usageExamples.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CommandLineTool.printer.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_25A3990F8(v1 + 32, a1);
}

uint64_t CommandLineTool.init(description:commands:usageExamples:printer:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, long long *a5@<X4>, void *a6@<X8>)
{
  *a6 = a1;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  return sub_25A3C85D8(a5, (uint64_t)(a6 + 4));
}

Swift::Void __swiftcall CommandLineTool.run()()
{
  uint64_t v1 = sub_25A50FD30();
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2)
  {
    __break(1u);

    uint64_t v3 = v0[7];
    uint64_t v4 = v0[8];
    __swift_project_boxed_opaque_existential_1(v0 + 4, v3);
    sub_25A50FFB0();
    (*(void (**)(void, unint64_t, uint64_t, uint64_t, uint64_t))(v4 + 24))(0, 0xE000000000000000, 1, v3, v4);
    swift_bridgeObjectRelease();
    exit(1);
  }
  sub_25A47B28C(v1, v1 + 32, 1, (2 * v2) | 1);

  swift_bridgeObjectRelease();
}

uint64_t sub_25A47B28C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if ((uint64_t)((a4 >> 1) - a3) <= 0)
  {
    uint64_t v18 = v4[7];
    uint64_t v19 = v4[8];
    __swift_project_boxed_opaque_existential_1(v4 + 4, v18);
    uint64_t v20 = CommandLineTool.usage.getter();
    AnyCommandLinePrinter.print(_:_:)(v20, v21, MEMORY[0x263F8EE78], v18, v19);
    swift_bridgeObjectRelease();
    sub_25A47C7EC();
    swift_allocError();
    return swift_willThrow();
  }
  if ((uint64_t)(a4 >> 1) <= a3) {
    goto LABEL_39;
  }
  size_t v9 = (uint64_t *)(a2 + 16 * a3);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  uint64_t v12 = v4[2];
  uint64_t v13 = *(void *)(v12 + 16);
  if (v13)
  {
    unint64_t v36 = a4 >> 1;
    uint64_t v37 = a2;
    unint64_t v39 = a4;
    uint64_t v40 = v4;
    uint64_t v38 = a3 + 1;
    swift_bridgeObjectRetain();
    uint64_t v41 = a1;
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    unsigned int v14 = (void *)(v12 + 40);
    while (1)
    {
      uint64_t v4 = (void *)*(v14 - 1);
      uint64_t v7 = *v14;
      if ((*(uint64_t (**)(void *, void))(*v14 + 8))(v4, *v14) == v11 && v15 == v10) {
        break;
      }
      char v17 = sub_25A510370();
      swift_bridgeObjectRelease();
      if (v17) {
        goto LABEL_22;
      }
      v14 += 2;
      if (!--v13)
      {
        swift_bridgeObjectRelease();
        uint64_t v4 = v40;
        goto LABEL_15;
      }
    }
    swift_bridgeObjectRelease();
LABEL_22:
    swift_bridgeObjectRelease();
    uint64_t v5 = v41;
    uint64_t v6 = v38;
    unint64_t v23 = v39;
    if ((v39 & 1) == 0)
    {
      swift_unknownObjectRetain();
LABEL_24:
      uint64_t v24 = sub_25A399374(v5, v37, v6, v23);
LABEL_31:
      swift_unknownObjectRelease();
      (*(void (**)(uint64_t, void *, void *, uint64_t))(v7 + 40))(v24, v40 + 4, v4, v7);
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      return swift_release();
    }
    sub_25A5103A0();
    swift_unknownObjectRetain_n();
    uint64_t v25 = swift_dynamicCastClass();
    if (!v25)
    {
      swift_unknownObjectRelease();
      uint64_t v25 = MEMORY[0x263F8EE78];
    }
    uint64_t v26 = *(void *)(v25 + 16);
    swift_release();
    if (!__OFSUB__(v36, v38))
    {
      if (v26 == v36 - v38)
      {
        uint64_t v24 = swift_dynamicCastClass();
        if (!v24)
        {
          swift_unknownObjectRelease();
          uint64_t v24 = MEMORY[0x263F8EE78];
        }
        goto LABEL_31;
      }
      goto LABEL_41;
    }
LABEL_40:
    __break(1u);
LABEL_41:
    swift_unknownObjectRelease();
    unint64_t v23 = v39;
    goto LABEL_24;
  }
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
LABEL_15:
  if (v11 == 26669 && v10 == 0xE200000000000000
    || (sub_25A510370() & 1) != 0
    || v11 == 0x706C65682D2DLL && v10 == 0xE600000000000000
    || (sub_25A510370() & 1) != 0
    || v11 == 0x706C65682DLL && v10 == 0xE500000000000000
    || (sub_25A510370() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v27 = v4[7];
    uint64_t v28 = v4[8];
    __swift_project_boxed_opaque_existential_1(v4 + 4, v27);
    uint64_t v29 = CommandLineTool.usage.getter();
    AnyCommandLinePrinter.print(_:_:)(v29, v30, MEMORY[0x263F8EE78], v27, v28);
    swift_unknownObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v31 = v4[7];
    uint64_t v32 = v4[8];
    __swift_project_boxed_opaque_existential_1(v4 + 4, v31);
    uint64_t v33 = CommandLineTool.usage.getter();
    AnyCommandLinePrinter.print(_:_:)(v33, v34, MEMORY[0x263F8EE78], v31, v32);
    swift_bridgeObjectRelease();
    sub_25A47C798();
    swift_allocError();
    void *v35 = v11;
    v35[1] = v10;
    swift_willThrow();
    return swift_unknownObjectRelease();
  }
}

uint64_t CommandLineTool.run<A>(arguments:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 - 8);
  uint64_t v59 = v2;
  uint64_t v60 = v5;
  MEMORY[0x270FA5388](a1);
  uint64_t v62 = (char *)v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(*(void *)(v7 + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v57 = (char *)v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v61 = (char *)v54 - v13;
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)v54 - v19;
  if (sub_25A50F5F0() < 1)
  {
    uint64_t v34 = v64[7];
    uint64_t v35 = v64[8];
    __swift_project_boxed_opaque_existential_1(v64 + 4, v34);
    uint64_t v36 = CommandLineTool.usage.getter();
    AnyCommandLinePrinter.print(_:_:)(v36, v37, MEMORY[0x263F8EE78], v34, v35);
    swift_bridgeObjectRelease();
    sub_25A47C7EC();
    swift_allocError();
    return swift_willThrow();
  }
  uint64_t v55 = AssociatedTypeWitness;
  uint64_t v56 = v10;
  sub_25A50F5E0();
  uint64_t v21 = (void (*)(char *, void))sub_25A50F730();
  uint64_t v23 = *v22;
  uint64_t v58 = v22[1];
  swift_bridgeObjectRetain();
  v21(v63, 0);
  uint64_t v24 = *(void (**)(char *, uint64_t))(v15 + 8);
  v24(v20, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v62, a1, a2);
  sub_25A50F5E0();
  sub_25A50F600();
  v24(v18, v14);
  v54[1] = a2;
  uint64_t v60 = v8;
  sub_25A50F6B0();
  uint64_t v25 = v14;
  uint64_t v26 = v58;
  v24(v20, v25);
  uint64_t v27 = v64;
  uint64_t v28 = *(void *)(v64[2] + 16);
  if (v28)
  {
    uint64_t v29 = (void *)(swift_bridgeObjectRetain() + 40);
    while (1)
    {
      uint64_t v30 = *v29;
      if ((*(uint64_t (**)(void, void))(*v29 + 8))(*(v29 - 1), *v29) == v23 && v31 == v26) {
        break;
      }
      char v33 = sub_25A510370();
      swift_bridgeObjectRelease();
      if (v33) {
        goto LABEL_18;
      }
      v29 += 2;
      if (!--v28)
      {
        swift_bridgeObjectRelease();
        uint64_t v27 = v64;
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease();
LABEL_18:
    swift_bridgeObjectRelease();
    uint64_t v39 = v59;
    uint64_t v40 = v55;
    uint64_t v41 = v56;
    uint64_t v42 = v61;
    (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v57, v61, v55);
    swift_getAssociatedConformanceWitness();
    sub_25A50F200();
    (*(void (**)(void))(v30 + 40))();
    if (v39)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v42, v40);
    }
    swift_bridgeObjectRelease();
    uint64_t v43 = v42;
    goto LABEL_25;
  }
LABEL_11:
  if (v23 == 26669 && v26 == 0xE200000000000000
    || (sub_25A510370() & 1) != 0
    || v23 == 0x706C65682D2DLL && v26 == 0xE600000000000000
    || (sub_25A510370() & 1) != 0
    || v23 == 0x706C65682DLL && v26 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    uint64_t v40 = v55;
LABEL_24:
    uint64_t v41 = v56;
    uint64_t v43 = v61;
    uint64_t v44 = v27[7];
    uint64_t v45 = v27[8];
    __swift_project_boxed_opaque_existential_1(v27 + 4, v44);
    uint64_t v46 = CommandLineTool.usage.getter();
    AnyCommandLinePrinter.print(_:_:)(v46, v47, MEMORY[0x263F8EE78], v44, v45);
LABEL_25:
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v43, v40);
  }
  char v48 = sub_25A510370();
  uint64_t v40 = v55;
  if (v48)
  {
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  uint64_t v49 = v27[7];
  uint64_t v50 = v27[8];
  __swift_project_boxed_opaque_existential_1(v27 + 4, v49);
  uint64_t v51 = CommandLineTool.usage.getter();
  AnyCommandLinePrinter.print(_:_:)(v51, v52, MEMORY[0x263F8EE78], v49, v50);
  swift_bridgeObjectRelease();
  sub_25A47C798();
  swift_allocError();
  *uint64_t v53 = v23;
  v53[1] = v26;
  swift_willThrow();
  return (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v61, v40);
}

Swift::Void __swiftcall CommandLineTool.printUsage()()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[8];
  __swift_project_boxed_opaque_existential_1(v0 + 4, v1);
  uint64_t v3 = CommandLineTool.usage.getter();
  AnyCommandLinePrinter.print(_:_:)(v3, v4, MEMORY[0x263F8EE78], v1, v2);

  swift_bridgeObjectRelease();
}

uint64_t CommandLineTool.usage.getter()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4158C0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25A5119F0;
  uint64_t v3 = *(void *)(v0 + 24);
  if (*(void *)(v3 + 16))
  {
    uint64_t v4 = *(void *)(v3 + 32);
    uint64_t v5 = swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0xE000000000000000;
  }
  *(void *)(inited + 32) = v4;
  *(void *)(inited + 40) = v5;
  uint64_t v37 = inited;
  unint64_t v6 = *(void *)(v3 + 16);
  uint64_t v7 = MEMORY[0x263F8EE78];
  if (v6 < 2)
  {
    int64_t v10 = 1;
  }
  else
  {
    unint64_t v8 = (2 * v6) | 1;
    uint64_t v9 = swift_bridgeObjectRetain();
    sub_25A39C5F0(v9, v3 + 32, 1, v8);
    swift_bridgeObjectRelease();
    uint64_t inited = v37;
    int64_t v10 = *(void *)(v37 + 16);
    if (!v10)
    {
      uint64_t v11 = MEMORY[0x263F8EE78];
      goto LABEL_13;
    }
  }
  swift_bridgeObjectRetain();
  sub_25A39A068(0, v10, 0);
  uint64_t v11 = v7;
  uint64_t v12 = inited + 40;
  do
  {
    id v13 = objc_allocWithZone(MEMORY[0x263F08AB0]);
    swift_bridgeObjectRetain();
    id v14 = objc_msgSend(v13, sel_init);
    id v15 = objc_msgSend(v14, sel_processName);

    uint64_t v16 = sub_25A50EC20();
    uint64_t v18 = v17;

    v36._uint64_t countAndFlagsBits = v16;
    v36._object = v18;
    swift_bridgeObjectRetain();
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v19 = v18;
    *(void *)&long long v34 = v11;
    unint64_t v21 = *(void *)(v11 + 16);
    unint64_t v20 = *(void *)(v11 + 24);
    if (v21 >= v20 >> 1)
    {
      sub_25A39A068(v20 > 1, v21 + 1, 1);
      uint64_t v11 = v34;
    }
    v12 += 16;
    *(void *)(v11 + 16) = v21 + 1;
    uint64_t v22 = v11 + 16 * v21;
    *(void *)(v22 + 32) = v16;
    *(void *)(v22 + 40) = v19;
    --v10;
  }
  while (v10);
  swift_bridgeObjectRelease();
  uint64_t v7 = MEMORY[0x263F8EE78];
LABEL_13:
  v36._uint64_t countAndFlagsBits = v11;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415DC0);
  sub_25A3A108C();
  sub_25A50EAD0();
  swift_bridgeObjectRelease();
  v23._uint64_t countAndFlagsBits = 0x20202020202020;
  v23._object = (void *)0xE700000000000000;
  String.prefixingEachLine(with:startingOnLine:)(v23, 1uLL);
  swift_bridgeObjectRelease();
  uint64_t v24 = *(void *)(v1 + 16);
  int64_t v25 = *(void *)(v24 + 16);
  if (v25)
  {
    uint64_t v35 = v7;
    swift_bridgeObjectRetain();
    sub_25A39A068(0, v25, 0);
    uint64_t v26 = 0;
    uint64_t v27 = v7;
    do
    {
      long long v34 = *(_OWORD *)(v24 + 16 * v26 + 32);
      sub_25A47C2DC(&v34, &v36);
      uint64_t countAndFlagsBits = v36._countAndFlagsBits;
      object = v36._object;
      uint64_t v35 = v27;
      unint64_t v31 = *(void *)(v27 + 16);
      unint64_t v30 = *(void *)(v27 + 24);
      if (v31 >= v30 >> 1)
      {
        sub_25A39A068(v30 > 1, v31 + 1, 1);
        uint64_t v27 = v35;
      }
      ++v26;
      *(void *)(v27 + 16) = v31 + 1;
      uint64_t v32 = v27 + 16 * v31;
      *(void *)(v32 + 32) = countAndFlagsBits;
      *(void *)(v32 + 40) = object;
    }
    while (v25 != v26);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v27 = MEMORY[0x263F8EE78];
  }
  v36._uint64_t countAndFlagsBits = v27;
  sub_25A50EAD0();
  swift_bridgeObjectRelease();
  v36._uint64_t countAndFlagsBits = 0;
  v36._object = (void *)0xE000000000000000;
  sub_25A50FDB0();
  swift_bridgeObjectRelease();
  v36._uint64_t countAndFlagsBits = 0x203A6567617355;
  v36._object = (void *)0xE700000000000000;
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  swift_bridgeObjectRetain();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  return v36._countAndFlagsBits;
}

uint64_t sub_25A47C2DC@<X0>(void *a1@<X0>, Swift::String *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v31 = a1[1];
  uint64_t v4 = (*(uint64_t (**)(void))(v31 + 32))(*a1);
  int64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v30 = v3;
    uint64_t v37 = MEMORY[0x263F8EE78];
    sub_25A39A068(0, v5, 0);
    uint64_t v6 = v37;
    uint64_t v7 = 32;
    uint64_t v32 = v4;
    do
    {
      long long v8 = *(_OWORD *)(v4 + v7);
      long long v9 = *(_OWORD *)(v4 + v7 + 16);
      long long v10 = *(_OWORD *)(v4 + v7 + 32);
      uint64_t v36 = *(void *)(v4 + v7 + 48);
      v34[1] = v9;
      long long v35 = v10;
      v34[0] = v8;
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A4158C0);
      uint64_t v11 = swift_allocObject();
      *(_OWORD *)(v11 + 16) = xmmword_25A5119F0;
      sub_25A3A0FE4((uint64_t)v34);
      uint64_t v12 = sub_25A50ED50();
      uint64_t v13 = 11565;
      if (v12 == 1)
      {
        uint64_t v13 = 45;
        unint64_t v14 = 0xE100000000000000;
      }
      else
      {
        unint64_t v14 = 0xE200000000000000;
      }
      uint64_t v33 = v13;
      swift_bridgeObjectRetain();
      sub_25A50EDA0();
      swift_bridgeObjectRelease();
      if ((void)v35)
      {
        sub_25A50EA50();
        sub_25A50EDA0();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRetain();
      sub_25A50EDA0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)(v11 + 32) = v33;
      *(void *)(v11 + 40) = v14;
      sub_25A3A0FE4((uint64_t)v34);
      uint64_t v15 = swift_bridgeObjectRetain();
      uint64_t v16 = sub_25A3A0E28(v15, (uint64_t)v34);
      sub_25A3A1038((uint64_t)v34);
      swift_bridgeObjectRelease();
      sub_25A396E24(v16);
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A415DC0);
      sub_25A3A108C();
      uint64_t v17 = sub_25A50EAD0();
      uint64_t v19 = v18;
      swift_bridgeObjectRelease();
      sub_25A3A1038((uint64_t)v34);
      sub_25A50EDA0();
      v20._uint64_t countAndFlagsBits = 538976288;
      v20._object = (void *)0xE400000000000000;
      String.prefixingEachLine(with:startingOnLine:)(v20, 0);
      sub_25A50EDA0();
      swift_bridgeObjectRelease();
      uint64_t v37 = v6;
      unint64_t v22 = *(void *)(v6 + 16);
      unint64_t v21 = *(void *)(v6 + 24);
      if (v22 >= v21 >> 1)
      {
        sub_25A39A068(v21 > 1, v22 + 1, 1);
        uint64_t v6 = v37;
      }
      *(void *)(v6 + 16) = v22 + 1;
      uint64_t v23 = v6 + 16 * v22;
      *(void *)(v23 + 32) = v17;
      *(void *)(v23 + 40) = v19;
      v7 += 56;
      --v5;
      uint64_t v4 = v32;
    }
    while (v5);
    swift_bridgeObjectRelease();
    uint64_t v3 = v30;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415DC0);
  sub_25A3A108C();
  sub_25A50EAD0();
  swift_bridgeObjectRelease();
  uint64_t v24 = v31;
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v3, v31);
  sub_25A50EDA0();
  (*(void (**)(uint64_t, uint64_t))(v24 + 16))(v3, v24);
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  (*(void (**)(uint64_t, uint64_t))(v24 + 24))(v3, v24);
  v25._uint64_t countAndFlagsBits = 538976288;
  v25._object = (void *)0xE400000000000000;
  String.prefixingEachLine(with:startingOnLine:)(v25, 0);
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  v26._uint64_t countAndFlagsBits = 538976288;
  v26._object = (void *)0xE400000000000000;
  String.prefixingEachLine(with:startingOnLine:)(v26, 0);
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  v27._uint64_t countAndFlagsBits = 538976288;
  v27._object = (void *)0xE400000000000000;
  Swift::String v28 = String.prefixingEachLine(with:startingOnLine:)(v27, 0);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v28;
  return result;
}

unint64_t sub_25A47C798()
{
  unint64_t result = qword_26A419C10;
  if (!qword_26A419C10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A419C10);
  }
  return result;
}

unint64_t sub_25A47C7EC()
{
  unint64_t result = qword_26A419C18[0];
  if (!qword_26A419C18[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A419C18);
  }
  return result;
}

unint64_t sub_25A47C840()
{
  return 0xD000000000000011;
}

unint64_t sub_25A47C85C()
{
  return 0xD000000000000011;
}

unint64_t sub_25A47C8FC()
{
  return sub_25A47C85C();
}

uint64_t destroy for CommandLineTool(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return __swift_destroy_boxed_opaque_existential_1(a1 + 32);
}

uint64_t initializeWithCopy for CommandLineTool(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = a2 + 32;
  long long v6 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 56) = v6;
  uint64_t v7 = v6;
  long long v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8(a1 + 32, v5, v7);
  return a1;
}

void *assignWithCopy for CommandLineTool(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1(a1 + 4, a2 + 4);
  return a1;
}

uint64_t assignWithTake for CommandLineTool(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 32);
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  return a1;
}

ValueMetadata *type metadata accessor for CommandLineTool()
{
  return &type metadata for CommandLineTool;
}

ValueMetadata *type metadata accessor for MissingCommandError()
{
  return &type metadata for MissingCommandError;
}

ValueMetadata *type metadata accessor for UnknownCommandError()
{
  return &type metadata for UnknownCommandError;
}

uint64_t sub_25A47CB24@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](a1);
  long long v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v10, v3, v7);
    a1(v10);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    sub_25A510540();
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)(*(void *)(a2 + 16) - 8) + 32))(a3, v3, *(void *)(a2 + 16));
    sub_25A510540();
    return swift_storeEnumTagMultiPayload();
  }
}

uint64_t Future.map<A>(dsoHandle:file:line:column:function:on:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t *a10, uint64_t a11, uint64_t a12)
{
  return sub_25A47E6EC(a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t Future.mapSuccess<A>(dsoHandle:file:line:column:function:on:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, long long *a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return sub_25A47E74C(a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t sub_25A47CD68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 16);
  long long v17 = *(_OWORD *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  char v16 = *(unsigned char *)(a1 + 56);
  uint64_t v11 = *(void **)a2;
  uint64_t v12 = *(void *)(a2 + 8);
  uint64_t v13 = *(void **)a3;
  uint64_t v14 = *(void *)(a3 + 8);
  type metadata accessor for MapFuture();
  v22[0] = v6;
  v22[1] = v7;
  char v23 = v8;
  long long v24 = v17;
  uint64_t v25 = v9;
  uint64_t v26 = v10;
  char v27 = v16;
  v21[0] = (uint64_t)v11;
  v21[1] = v12;
  v20[0] = (uint64_t)v13;
  v20[1] = v14;
  swift_retain();
  sub_25A3EE304(v11);
  sub_25A3EE304(v13);
  swift_allocObject();
  swift_retain();
  return sub_25A47D73C(v22, v5, v21, v20, a4, a5);
}

uint64_t sub_25A47CE7C(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  return sub_25A47D73C(a1, a2, a3, a4, a5, a6);
}

uint64_t Future.tryMapSuccess<A>(dsoHandle:file:line:column:function:on:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, long long *a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return sub_25A47D460(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, (uint64_t)&unk_270833D38, (uint64_t)sub_25A47E868);
}

uint64_t sub_25A47CF4C@<X0>(uint64_t a1@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v2 = sub_25A510540();
  return sub_25A47CFE0((void (*)(char *))sub_25A47EE0C, v2, a1);
}

uint64_t sub_25A47CFE0@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v13 + 16))(v12, v14);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(uint64_t, char *, void))(*(void *)(*(void *)(a2 + 24) - 8) + 32))(a3, v12, *(void *)(a2 + 24));
    sub_25A510540();
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v12, v6);
    a1(v10);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
}

uint64_t Future.mapFailure(dsoHandle:file:line:column:function:on:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, long long *a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = *v12;
  v19[0] = a2;
  v19[1] = a3;
  char v20 = a4;
  uint64_t v21 = a5;
  uint64_t v22 = a6;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  char v25 = a9;
  long long v18 = *a10;
  uint64_t v14 = (void *)swift_allocObject();
  void v14[2] = *(void *)(v13 + 80);
  _OWORD v14[3] = a11;
  void v14[4] = a12;
  v17[0] = 0;
  v17[1] = 0;
  swift_retain();
  uint64_t v15 = sub_25A47CD68((uint64_t)v19, (uint64_t)v17, (uint64_t)&v18, (uint64_t)sub_25A47E8AC, (uint64_t)v14);
  swift_release();
  sub_25A3EE314(0);
  return v15;
}

uint64_t sub_25A47D2D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v8 = sub_25A510540();
  MEMORY[0x270FA5388](v8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v10 + 16))(&v12[-v9], a1, v8);
  uint64_t v13 = a2;
  uint64_t v14 = a3;
  return sub_25A47CB24((void (*)(char *))sub_25A47EDD8, v8, a4);
}

uint64_t Future.mapSuccessToResult<A>(dsoHandle:file:line:column:function:on:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, long long *a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return sub_25A47D460(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, (uint64_t)&unk_270833D88, (uint64_t)sub_25A47E8B8);
}

uint64_t sub_25A47D460(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, long long *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v16 = *v15;
  v22[0] = a2;
  v22[1] = a3;
  char v23 = a4;
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  uint64_t v26 = a7;
  uint64_t v27 = a8;
  char v28 = a9;
  long long v21 = *a10;
  long long v17 = (void *)swift_allocObject();
  void v17[2] = *(void *)(v16 + 80);
  v17[3] = a13;
  v17[4] = a11;
  v17[5] = a12;
  v20[0] = 0;
  v20[1] = 0;
  swift_retain();
  uint64_t v18 = sub_25A47CD68((uint64_t)v22, (uint64_t)&v21, (uint64_t)v20, a15, (uint64_t)v17);
  swift_release();
  sub_25A3EE314(0);
  return v18;
}

uint64_t sub_25A47D53C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v10 = sub_25A510540();
  return a6(a2, a3, v10, a5);
}

uint64_t Future.ignoringValue(dsoHandle:file:line:column:function:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v10 = *v9;
  v16[0] = a2;
  v16[1] = a3;
  char v17 = a4;
  uint64_t v18 = a5;
  uint64_t v19 = a6;
  uint64_t v20 = a7;
  uint64_t v21 = a8;
  char v22 = a9;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = *(void *)(v10 + 80);
  v15[0] = 0;
  v15[1] = 0;
  v14[0] = 0;
  v14[1] = 0;
  uint64_t v12 = sub_25A47CD68((uint64_t)v16, (uint64_t)v15, (uint64_t)v14, (uint64_t)sub_25A47E8FC, v11);
  swift_release();
  sub_25A3EE314(0);
  sub_25A3EE314(0);
  return v12;
}

uint64_t sub_25A47D6AC@<X0>(uint64_t a1@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v2 = sub_25A510540();
  return sub_25A4B7DC0((void (*)(char *))nullsub_1, v2, a1);
}

uint64_t sub_25A47D73C(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v21 = a1[1];
  uint64_t v22 = *a1;
  char v20 = *((unsigned char *)a1 + 16);
  long long v19 = *(_OWORD *)(a1 + 3);
  uint64_t v9 = a1[6];
  uint64_t v18 = a1[5];
  char v17 = *((unsigned char *)a1 + 56);
  uint64_t v10 = *a3;
  uint64_t v11 = a3[1];
  uint64_t v12 = *a4;
  uint64_t v13 = a4[1];
  v23[0] = a2;
  uint64_t v14 = type metadata accessor for MapFuture.Activity();
  swift_retain();
  v6[13] = sub_25A3EF560(v23, v14);
  v6[14] = a5;
  v6[15] = a6;
  v6[16] = v10;
  v6[17] = v11;
  v6[18] = v12;
  v6[19] = v13;
  swift_retain();
  swift_release();
  v23[0] = v22;
  v23[1] = v21;
  char v24 = v20;
  long long v25 = v19;
  uint64_t v26 = v18;
  uint64_t v27 = v9;
  char v28 = v17;
  uint64_t v15 = sub_25A4EECC4((uint64_t)v23);
  swift_retain_n();
  Future.observeCompletion(_:)((uint64_t)sub_25A47EB98, v15);
  swift_release();
  swift_retain();
  Future.observeCancelation(_:)((uint64_t)sub_25A47EB90, v15);
  swift_release_n();
  swift_release();
  swift_release();
  return v15;
}

void sub_25A47D8DC(uint64_t a1)
{
  uint64_t v2 = (uint64_t)v1;
  uint64_t v55 = (char *)a1;
  uint64_t v3 = *v1;
  uint64_t v4 = sub_25A50E750();
  uint64_t v53 = *(void *)(v4 - 8);
  uint64_t v54 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v50 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_25A50E790();
  uint64_t v51 = *(void *)(v6 - 8);
  uint64_t v52 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v49 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v3 + 200);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v9 = sub_25A510540();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  uint64_t v12 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  uint64_t v56 = (char *)&v43 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v43 - v15;
  long long aBlock = *(void **)(v2 + 104);
  uint64_t v58 = v8;
  uint64_t v17 = *(void *)(v3 + 208);
  uint64_t v59 = v17;
  type metadata accessor for MapFuture.Activity();
  uint64_t v18 = sub_25A50E5B0();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_25A380000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/MapFuture.swift", 121, 2, 181, 47, (uint64_t)"receiveUnderlyingCompletion(_:)", 31, 2, (uint64_t)sub_25A47EB9C, (uint64_t)v57, v18, MEMORY[0x263F8D4F8], WitnessTable);
  swift_release();
  if (v60 == 1)
  {
    uint64_t v20 = (uint64_t)v55;
    Result.analyze<A>(success:failure:)((void (*)(char *))sub_25A47EBF4, v2, (void (*)(char *))sub_25A47EC00, v2, v9);
    char v48 = aBlock;
    uint64_t v47 = v2;
    uint64_t v21 = v62;
    uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
    v22(v16, v20, v9);
    v22(v56, (uint64_t)v16, v9);
    uint64_t v55 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    v22(v55, (uint64_t)v16, v9);
    unint64_t v23 = (*(unsigned __int8 *)(v10 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    char v24 = (char *)swift_allocObject();
    *((void *)v24 + 2) = v8;
    *((void *)v24 + 3) = v17;
    long long v25 = v48;
    uint64_t v26 = v21;
    uint64_t v27 = v47;
    *((void *)v24 + 4) = v47;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v24[v23], v16, v9);
    long long aBlock = v25;
    uint64_t v62 = v26;
    swift_retain_n();
    uint64_t v28 = v9;
    if (ExecutionLane.isCurrentLane.getter())
    {
      uint64_t v29 = (uint64_t)v56;
      sub_25A47E3C0(v27, (uint64_t)v56);
    }
    else
    {
      uint64_t v29 = (uint64_t)v56;
      if (!v25)
      {
        uint64_t v36 = (uint64_t)v55;
        sub_25A47E3C0(v27, (uint64_t)v55);
        swift_release();
        swift_release();
LABEL_11:
        uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
        v42(v36, v28);
        swift_release();
        v42(v29, v28);
        sub_25A3EE314(v25);
        return;
      }
      uint64_t v46 = v26;
      if (v25 != (void *)1)
      {
        uint64_t v65 = sub_25A47ED34;
        uint64_t v66 = v24;
        long long aBlock = (void *)MEMORY[0x263EF8330];
        uint64_t v62 = 1107296256;
        uint64_t v63 = sub_25A3BE05C;
        uint64_t v64 = &block_descriptor_9;
        uint64_t v37 = _Block_copy(&aBlock);
        swift_retain();
        sub_25A3EE304(v25);
        uint64_t v38 = v49;
        sub_25A50E770();
        uint64_t v60 = MEMORY[0x263F8EE78];
        sub_25A3BE558();
        __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
        sub_25A3DDB54();
        uint64_t v39 = v50;
        uint64_t v40 = v54;
        long long v25 = v48;
        sub_25A50FC90();
        MEMORY[0x26113D8E0](0, v38, v39, v37);
        uint64_t v41 = v37;
        uint64_t v29 = (uint64_t)v56;
        _Block_release(v41);
        sub_25A3EE314(v25);
        (*(void (**)(char *, uint64_t))(v53 + 8))(v39, v40);
        (*(void (**)(char *, uint64_t))(v51 + 8))(v38, v52);
        swift_release();
        swift_release();
        goto LABEL_10;
      }
      sub_25A3DD980();
      uint64_t v45 = sub_25A50F8D0();
      uint64_t v65 = sub_25A47ED34;
      uint64_t v66 = v24;
      long long aBlock = (void *)MEMORY[0x263EF8330];
      uint64_t v62 = 1107296256;
      uint64_t v63 = sub_25A3BE05C;
      uint64_t v64 = &block_descriptor_15;
      uint64_t v44 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      uint64_t v30 = v49;
      sub_25A50E770();
      long long aBlock = (void *)MEMORY[0x263F8EE78];
      sub_25A3BE558();
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A4168D8);
      sub_25A3DDB54();
      uint64_t v31 = v50;
      uint64_t v32 = v54;
      sub_25A50FC90();
      uint64_t v33 = v44;
      long long v34 = (void *)v45;
      MEMORY[0x26113D8E0](0, v30, v31, v44);
      _Block_release(v33);

      (*(void (**)(char *, uint64_t))(v53 + 8))(v31, v32);
      long long v35 = v30;
      long long v25 = v48;
      (*(void (**)(char *, uint64_t))(v51 + 8))(v35, v52);
    }
    swift_release();
LABEL_10:
    swift_release();
    uint64_t v36 = (uint64_t)v55;
    goto LABEL_11;
  }
}

uint64_t sub_25A47E09C(long long *a1)
{
  char v1 = *((unsigned char *)a1 + 16);
  char v2 = *((unsigned char *)a1 + 56);
  long long v4 = *a1;
  char v5 = v1;
  long long v6 = *(long long *)((char *)a1 + 24);
  long long v7 = *(long long *)((char *)a1 + 40);
  char v8 = v2;
  return sub_25A47E0F4((uint64_t *)&v4);
}

uint64_t sub_25A47E0F4(uint64_t *a1)
{
  char v2 = v1;
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 208);
  uint64_t v6 = type metadata accessor for FutureTermination();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v25 - v8;
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  int v12 = *((unsigned __int8 *)a1 + 16);
  uint64_t v13 = a1[3];
  uint64_t v32 = a1[4];
  uint64_t v33 = v13;
  uint64_t v14 = a1[5];
  uint64_t v30 = a1[6];
  uint64_t v31 = v14;
  int v29 = *((unsigned __int8 *)a1 + 56);
  uint64_t v44 = v2[13];
  uint64_t v35 = *(void *)(v4 + 200);
  uint64_t v36 = v5;
  type metadata accessor for MapFuture.Activity();
  uint64_t v15 = sub_25A50E5B0();
  type metadata accessor for Future();
  uint64_t v16 = sub_25A50FA40();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_25A380000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/MapFuture.swift", 121, 2, 205, 42, (uint64_t)"cancel(callsite:)", 17, 2, (uint64_t)sub_25A46F220, (uint64_t)v34, v15, v16, WitnessTable);
  uint64_t result = swift_release();
  uint64_t v19 = v37[0];
  if (v37[0])
  {
    *(void *)uint64_t v9 = v10;
    *((void *)v9 + 1) = v11;
    v9[16] = v12;
    uint64_t v20 = v33;
    int v28 = v12;
    uint64_t v27 = v11;
    uint64_t v26 = v10;
    uint64_t v22 = v31;
    uint64_t v21 = v32;
    *((void *)v9 + 3) = v33;
    *((void *)v9 + 4) = v21;
    uint64_t v23 = v30;
    *((void *)v9 + 5) = v22;
    *((void *)v9 + 6) = v23;
    char v24 = v29;
    v9[56] = v29;
    swift_storeEnumTagMultiPayload();
    swift_retain();
    sub_25A4EF7A8((uint64_t)v9);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v37[0] = v26;
    v37[1] = v27;
    char v38 = v28;
    uint64_t v39 = v20;
    uint64_t v40 = v21;
    uint64_t v41 = v22;
    uint64_t v42 = v23;
    char v43 = v24;
    (*(void (**)(void *))(*(void *)v19 + 192))(v37);
    return swift_release_n();
  }
  return result;
}

unint64_t sub_25A47E3C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)a1 + 208);
  uint64_t v5 = type metadata accessor for FutureTermination();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (uint64_t *)((char *)&v17 - v7);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v9 = sub_25A510540();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  int v12 = (char *)&v17 - v11;
  uint64_t v17 = *(void *)(a1 + 104);
  type metadata accessor for MapFuture.Activity();
  uint64_t v13 = sub_25A50E5B0();
  uint64_t WitnessTable = swift_getWitnessTable();
  SynchronousAccessProviding<>.peek(file:line:column:function:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/MapFuture.swift", 121, 2, 196, 42, (uint64_t)"receiveUnderlyingCompletion(_:)", 31, 2, v13, WitnessTable);
  unint64_t v15 = v18;
  unint64_t result = sub_25A4705B8(v18);
  if (v15 != 1)
  {
    (*(void (**)(uint64_t))(a1 + 112))(a2);
    static FutureTermination.completed(_:)((uint64_t)v12, v4, v8);
    sub_25A4EF7A8((uint64_t)v8);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  return result;
}

void sub_25A47E634()
{
  swift_release();
  swift_release();
  sub_25A3EE314(*(id *)(v0 + 128));
  char v1 = *(void **)(v0 + 144);

  sub_25A3EE314(v1);
}

uint64_t sub_25A47E674()
{
  uint64_t v0 = Future.deinit();
  swift_release();
  swift_release();
  sub_25A3EE314(*(id *)(v0 + 128));
  sub_25A3EE314(*(id *)(v0 + 144));
  return v0;
}

uint64_t sub_25A47E6BC()
{
  uint64_t v0 = sub_25A47E674();

  return MEMORY[0x270FA0228](v0, 160, 7);
}

uint64_t sub_25A47E6EC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t *a9, uint64_t a10, uint64_t a11)
{
  uint64_t v12 = *a9;
  uint64_t v11 = a9[1];
  v16[0] = a1;
  v16[1] = a2;
  char v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v20 = a6;
  uint64_t v21 = a7;
  char v22 = a8;
  v15[0] = v12;
  v15[1] = v11;
  v14[0] = v12;
  v14[1] = v11;
  return sub_25A47CD68((uint64_t)v16, (uint64_t)v15, (uint64_t)v14, a10, a11);
}

uint64_t sub_25A47E74C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, long long *a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = *v12;
  v19[0] = a1;
  v19[1] = a2;
  char v20 = a3;
  uint64_t v21 = a4;
  uint64_t v22 = a5;
  uint64_t v23 = a6;
  uint64_t v24 = a7;
  char v25 = a8;
  long long v18 = *a9;
  uint64_t v14 = (void *)swift_allocObject();
  void v14[2] = *(void *)(v13 + 80);
  _OWORD v14[3] = a12;
  void v14[4] = a10;
  v14[5] = a11;
  v17[0] = 0;
  v17[1] = 0;
  swift_retain();
  uint64_t v15 = sub_25A47CD68((uint64_t)v19, (uint64_t)&v18, (uint64_t)v17, (uint64_t)sub_25A47EED0, (uint64_t)v14);
  swift_release();
  sub_25A3EE314(0);
  return v15;
}

uint64_t sub_25A47E830()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_25A47E868@<X0>(uint64_t a1@<X8>)
{
  return sub_25A47CF4C(a1);
}

uint64_t sub_25A47E874()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_25A47E8AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A47D2D4(a1, *(void *)(v2 + 24), *(void *)(v2 + 32), a2);
}

uint64_t sub_25A47E8B8(uint64_t a1)
{
  return sub_25A47D53C(a1, v1[4], v1[5], v1[2], v1[3], (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_25A47CFE0);
}

uint64_t sub_25A47E8EC()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_25A47E8FC@<X0>(uint64_t a1@<X8>)
{
  return sub_25A47D6AC(a1);
}

uint64_t sub_25A47E904()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for MapFuture()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t *sub_25A47E97C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    uint64_t v3 = swift_retain();
  }
  *a1 = v3;
  return a1;
}

unint64_t sub_25A47E9B8(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF) {
    return swift_release();
  }
  return result;
}

unint64_t *sub_25A47E9D0(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF) {
      swift_retain();
    }
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    *a1 = *a2;
  }
  else
  {
    *a1 = v4;
    swift_retain();
    swift_release();
  }
  return a1;
}

unint64_t *sub_25A47EA64(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if (*a1 < 0xFFFFFFFF) {
    goto LABEL_6;
  }
  if (v3 < 0xFFFFFFFF)
  {
    swift_release();
LABEL_6:
    *a1 = v3;
    return a1;
  }
  *a1 = v3;
  swift_release();
  return a1;
}

uint64_t sub_25A47EAC8(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t sub_25A47EB1C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 1;
    }
  }
  return result;
}

uint64_t type metadata accessor for MapFuture.Activity()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A47EB90(long long *a1)
{
  return sub_25A47E09C(a1);
}

unint64_t sub_25A47EB9C@<X0>(unint64_t *a1@<X0>, char *a2@<X8>)
{
  unint64_t result = *a1;
  if (result >= 2)
  {
    unint64_t result = sub_25A4705B8(result);
    *a1 = 0;
    char v5 = 1;
  }
  else
  {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

id sub_25A47EBF4@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void **)(v1 + 128);
  uint64_t v3 = *(void *)(v1 + 136);
  *a1 = v2;
  a1[1] = v3;
  return sub_25A3EE304(v2);
}

id sub_25A47EC00@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void **)(v1 + 144);
  uint64_t v3 = *(void *)(v1 + 152);
  *a1 = v2;
  a1[1] = v3;
  return sub_25A3EE304(v2);
}

uint64_t sub_25A47EC0C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v2 = *(void *)(sub_25A510540() - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  if (swift_getEnumCaseMultiPayload() == 1) {

  }
  else {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + v4, v1);
  }

  return MEMORY[0x270FA0238](v0, v4 + v5, v3 | 7);
}

unint64_t sub_25A47ED34()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v1 = *(void *)(sub_25A510540() - 8);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_25A47E3C0(v2, v3);
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_9()
{
  return swift_release();
}

uint64_t sub_25A47EDD8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 16))(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_25A47EE0C@<X0>(uint64_t a1@<X8>)
{
  return sub_25A39CF80((void (*)(unsigned char *))sub_25A47EE90, a1);
}

uint64_t sub_25A47EE90(void *a1)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 32))(*(void *)(v1 + 48));
  if (v2) {
    *a1 = v2;
  }
  return result;
}

uint64_t sub_25A47EED0(uint64_t a1)
{
  return sub_25A47D53C(a1, v1[4], v1[5], v1[2], v1[3], (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_25A4B7DC0);
}

uint64_t static EventStream.merge(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a2;
  *(void *)(v6 + 24) = a1;
  sub_25A4BC52C((uint64_t)sub_25A47F140, v6, a3);

  return swift_bridgeObjectRetain();
}

uint64_t sub_25A47EF9C@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (**a6)()@<X8>)
{
  long long v7 = a1[1];
  v19[0] = *a1;
  v19[1] = v7;
  v20[0] = a1[2];
  *(_OWORD *)((char *)v20 + 9) = *(_OWORD *)((char *)a1 + 41);
  uint64_t v18 = a4;
  uint64_t v15 = a5;
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  type metadata accessor for EventStream();
  uint64_t v8 = sub_25A50F1E0();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v11 = sub_25A39F5D4((void (*)(char *, char *))sub_25A481EFC, (uint64_t)v14, v8, (uint64_t)&type metadata for CancellationToken, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v10);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v11;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A416708);
  swift_allocObject();
  uint64_t result = sub_25A3B7704(v19, 0, 0, 1, 0, 0xD000000000000011, 0x800000025A51E350, 0x64656C65636E6163, 0xE800000000000000);
  *a6 = sub_25A481F58;
  a6[1] = (uint64_t (*)())v12;
  a6[2] = (uint64_t (*)())result;
  return result;
}

uint64_t sub_25A47F108()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_25A47F140@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  return sub_25A47EF9C(a1, a2, a3, *(void *)(v4 + 24), *(void *)(v4 + 16), a4);
}

uint64_t sub_25A47F148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return EventStream.observe(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_25A380000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/EventStream+Operators.swift", 133, 2, 20, 50, (uint64_t)"merge(_:)", 9, 2, a2, a3);
}

uint64_t sub_25A47F1E4(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    uint64_t v8 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Event"
         "Stream+Operators.swift";
    uint64_t v9 = 133;
    char v10 = 2;
    long long v11 = xmmword_25A5197A0;
    uint64_t v12 = "merge(_:)";
    uint64_t v13 = 9;
    char v14 = 2;
    uint64_t v2 = swift_bridgeObjectRetain();
    uint64_t v3 = v2 + 48;
    do
    {
      uint64_t v6 = *(void (**)(uint64_t))(v3 - 16);
      uint64_t v4 = *(void *)(*(void *)v3 + 144);
      MEMORY[0x270FA5388](v2);
      swift_retain();
      swift_retain();
      swift_retain();
      os_unfair_lock_lock((os_unfair_lock_t)(v4 + 76));
      sub_25A3B8530((long long *)(v4 + 16), &v7);
      os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 76));
      uint64_t v5 = swift_release();
      if ((v7 & 1) == 0) {
        v6(v5);
      }
      swift_release();
      uint64_t v2 = swift_release();
      v3 += 24;
      --v1;
    }
    while (v1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t EventStreamProtocol.compactMap<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  return sub_25A47F718(a1, a2, a3, a4, a5, (uint64_t)sub_25A47F500, a6);
}

uint64_t sub_25A47F388(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12 = *a1;
  uint64_t v11 = a1[1];
  char v13 = *((unsigned char *)a1 + 16);
  long long v19 = *(_OWORD *)(a1 + 3);
  uint64_t v14 = a1[5];
  uint64_t v15 = a1[6];
  char v16 = *((unsigned char *)a1 + 56);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(a9 + 16))(&v31, a7, a9);
  long long v30 = v31;
  *(void *)&long long v24 = v12;
  *((void *)&v24 + 1) = v11;
  char v25 = v13;
  long long v26 = v19;
  uint64_t v27 = v14;
  uint64_t v28 = v15;
  char v29 = v16;
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = a7;
  v17[3] = a8;
  v17[4] = a9;
  v17[5] = a5;
  v17[6] = a6;
  void v17[7] = a2;
  v17[8] = a3;
  swift_getAssociatedTypeWitness();
  type metadata accessor for EventStream();
  swift_retain();
  swift_retain();
  sub_25A4BC4D0(&v24);
  swift_release();

  return swift_release();
}

uint64_t sub_25A47F500(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25A47FAA4(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t, void, void))sub_25A47F388);
}

uint64_t sub_25A47F518(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, void (*a4)(char *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v20 = a4;
  uint64_t v10 = sub_25A50FA40();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v19 - v13;
  uint64_t v15 = *(void *)(a7 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)&v19 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2(a1);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, a7) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v14, a7);
  v20(v17);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, a7);
}

uint64_t EventStreamProtocol.map<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  return sub_25A47F718(a1, a2, a3, a4, a5, (uint64_t)sub_25A47FA8C, a6);
}

uint64_t sub_25A47F718@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, void *a7@<X8>)
{
  uint64_t v19 = a7;
  uint64_t v20 = a6;
  uint64_t v12 = *(void *)(a3 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, uint64_t))(v12 + 16))((char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v14);
  unint64_t v15 = (*(unsigned __int8 *)(v12 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v16 = (char *)swift_allocObject();
  *((void *)v16 + 2) = a3;
  *((void *)v16 + 3) = a4;
  *((void *)v16 + 4) = a5;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v16[v15], (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a3);
  uint64_t v17 = &v16[(v13 + v15 + 7) & 0xFFFFFFFFFFFFFFF8];
  *(void *)uint64_t v17 = a1;
  *((void *)v17 + 1) = a2;
  sub_25A4BC52C(v20, (uint64_t)v16, v19);
  return swift_retain();
}

uint64_t sub_25A47F874(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12 = *a1;
  uint64_t v11 = a1[1];
  char v13 = *((unsigned char *)a1 + 16);
  long long v19 = *(_OWORD *)(a1 + 3);
  uint64_t v14 = a1[5];
  uint64_t v15 = a1[6];
  char v16 = *((unsigned char *)a1 + 56);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(a9 + 16))(&v31, a7, a9);
  long long v30 = v31;
  *(void *)&long long v24 = v12;
  *((void *)&v24 + 1) = v11;
  char v25 = v13;
  long long v26 = v19;
  uint64_t v27 = v14;
  uint64_t v28 = v15;
  char v29 = v16;
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = a7;
  v17[3] = a8;
  v17[4] = a9;
  v17[5] = a2;
  v17[6] = a3;
  void v17[7] = a5;
  v17[8] = a6;
  swift_getAssociatedTypeWitness();
  type metadata accessor for EventStream();
  swift_retain();
  swift_retain();
  sub_25A4BC4D0(&v24);
  swift_release();

  return swift_release();
}

uint64_t objectdestroy_2Tm_2()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  swift_release();

  return MEMORY[0x270FA0238](v0, v5 + 16, v4);
}

uint64_t sub_25A47FA8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25A47FAA4(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t, void, void))sub_25A47F874);
}

uint64_t sub_25A47FAA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, unint64_t, void, void))
{
  unint64_t v5 = (*(unsigned __int8 *)(*(void *)(*(void *)(v4 + 16) - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v4 + 16) - 8) + 80);
  uint64_t v6 = (void *)(v4 + ((*(void *)(*(void *)(*(void *)(v4 + 16) - 8) + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  return a4(a1, a2, a3, v4 + v5, *v6, v6[1]);
}

uint64_t sub_25A47FB3C(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9 = *(void *)(a7 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13(v10);
  a2(v12);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, a7);
}

uint64_t EventStreamProtocol.merged<A>(with:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for EventStream();
  sub_25A5102C0();
  swift_allocObject();
  uint64_t v10 = sub_25A50F0C0();
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a1, a3);
  (*(void (**)(uint64_t, uint64_t))(a4 + 16))(a2, a4);
  sub_25A3DFCA4();
  static EventStream.merge(_:)(v10, AssociatedTypeWitness, a5);

  return swift_bridgeObjectRelease();
}

uint64_t EventStreamProtocol.filter(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *(void *)(a3 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v10 + 16))(v12, v13);
  unint64_t v14 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v15 = (v11 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a3;
  *(void *)(v16 + 24) = a4;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v16 + v14, v12, a3);
  uint64_t v17 = (void *)(v16 + v15);
  *uint64_t v17 = a1;
  v17[1] = a2;
  swift_getAssociatedTypeWitness();
  sub_25A4BC52C((uint64_t)sub_25A4819E8, v16, a5);
  return swift_retain();
}

uint64_t sub_25A47FECC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *a1;
  uint64_t v12 = a1[1];
  char v13 = *((unsigned char *)a1 + 16);
  long long v19 = *(_OWORD *)(a1 + 3);
  uint64_t v14 = a1[5];
  uint64_t v15 = a1[6];
  char v16 = *((unsigned char *)a1 + 56);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(a8 + 16))(&v30, a7, a8);
  long long v29 = v30;
  *(void *)&long long v23 = v11;
  *((void *)&v23 + 1) = v12;
  char v24 = v13;
  long long v25 = v19;
  uint64_t v26 = v14;
  uint64_t v27 = v15;
  char v28 = v16;
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = a7;
  v17[3] = a8;
  v17[4] = a5;
  v17[5] = a6;
  v17[6] = a2;
  void v17[7] = a3;
  swift_getAssociatedTypeWitness();
  type metadata accessor for EventStream();
  swift_retain();
  swift_retain();
  sub_25A4BC4D0(&v23);
  swift_release();

  return swift_release();
}

uint64_t EventStreamProtocol.replacingNil<A>(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v9 = *(void *)(a3 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v9 + 16))(v11);
  unint64_t v12 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  char v13 = (char *)swift_allocObject();
  *((void *)v13 + 2) = a2;
  *((void *)v13 + 3) = a3;
  *((void *)v13 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v13[v12], v11, a3);
  EventStreamProtocol.map<A>(_:)((uint64_t)sub_25A481ADC, (uint64_t)v13, a2, a3, a4, a5);
  return swift_release();
}

uint64_t sub_25A48018C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_25A50FA40();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v16 - v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v16 - v13, a1, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a2, a3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v14, 1, a3) == 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(a4, v10, a3);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a3);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a4, v14, a3);
  }
}

uint64_t EventStreamProtocol<>.switchToLatest()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = *(void *)(a1 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v11, a1);
  unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v13 = (char *)swift_allocObject();
  *((void *)v13 + 2) = a1;
  *((void *)v13 + 3) = a2;
  *((void *)v13 + 4) = a3;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v13[v12], v10, a1);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  return sub_25A4BC52C((uint64_t)sub_25A481B24, (uint64_t)v13, a4);
}

uint64_t sub_25A48051C@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t (**a7)()@<X8>)
{
  long long v14 = a1[1];
  v27[0] = *a1;
  v27[1] = v14;
  v28[0] = a1[2];
  *(_OWORD *)((char *)v28 + 9) = *(_OWORD *)((char *)a1 + 41);
  __swift_instantiateConcreteTypeFromMangledName(qword_26A419D20);
  uint64_t v15 = swift_allocObject();
  *(_DWORD *)(v15 + 44) = 0;
  *(void *)(v15 + 24) = 0;
  *(void *)(v15 + 32) = 0;
  *(void *)(v15 + 16) = 0;
  *(unsigned char *)(v15 + 40) = 0;
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(a5 + 16))(v25, a4, a5);
  uint64_t v24[2] = v25[0];
  long long v16 = a1[1];
  v23[0] = *a1;
  v23[1] = v16;
  v24[0] = a1[2];
  *(_OWORD *)((char *)v24 + 9) = *(_OWORD *)((char *)a1 + 41);
  uint64_t v17 = swift_allocObject();
  long long v18 = a1[1];
  *(_OWORD *)(v17 + 40) = *a1;
  *(void *)(v17 + 16) = a4;
  *(void *)(v17 + 24) = a5;
  *(void *)(v17 + 32) = a6;
  *(_OWORD *)(v17 + 56) = v18;
  *(_OWORD *)(v17 + 72) = a1[2];
  *(_OWORD *)(v17 + 81) = *(_OWORD *)((char *)a1 + 41);
  *(void *)(v17 + 104) = a2;
  *(void *)(v17 + 112) = a3;
  *(void *)(v17 + 120) = v15;
  swift_getAssociatedTypeWitness();
  type metadata accessor for EventStream();
  swift_retain();
  swift_retain();
  sub_25A4BC4D0(v23);
  swift_release();
  swift_release();
  uint64_t v19 = v26;
  long long v22 = v25[1];
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v15;
  *(_OWORD *)(v20 + 24) = v22;
  *(void *)(v20 + 40) = v19;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A416708);
  swift_allocObject();
  uint64_t result = sub_25A3B7704(v27, 0, 0, 1, 0, 0xD000000000000011, 0x800000025A51E350, 0x64656C65636E6163, 0xE800000000000000);
  *a7 = sub_25A481D64;
  a7[1] = (uint64_t (*)())v20;
  a7[2] = (uint64_t (*)())result;
  return result;
}

uint64_t sub_25A480774(uint64_t a1, long long *a2, uint64_t a3, uint64_t *a4, os_unfair_lock_s *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*v10)(void *__return_ptr);
  long long v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void v25[2];
  void v26[3];
  long long v27;
  unsigned char v28[41];

  uint64_t v19 = a4;
  uint64_t v10 = *(void (**)(void *__return_ptr))(a8 + 16);
  swift_getAssociatedTypeWitness();
  v10(v25);
  long long v23 = v25[0];
  char v24 = v25[1];
  uint64_t v11 = a2[1];
  uint64_t v27 = *a2;
  *(_OWORD *)char v28 = v11;
  *(_OWORD *)&v28[16] = a2[2];
  *(_OWORD *)&v28[25] = *(long long *)((char *)a2 + 41);
  swift_getAssociatedTypeWitness();
  type metadata accessor for EventStream();
  sub_25A4BC4D0(&v27);
  swift_release();
  uint64_t v20 = v26[0];
  uint64_t v21 = v26[1];
  long long v22 = v26[2];
  os_unfair_lock_lock(a5 + 11);
  sub_25A481DB4((uint64_t)&a5[4], (uint64_t)&v27);
  os_unfair_lock_unlock(a5 + 11);
  uint64_t v13 = (void (*)(uint64_t))v27;
  if ((void)v27)
  {
    uint64_t v19 = &v18;
    long long v14 = *(void *)v28;
    *(void *)&uint64_t v27 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFou"
                      "ndation/EventStream+Operators.swift";
    *((void *)&v27 + 1) = 133;
    v28[0] = 2;
    *(_OWORD *)&v28[8] = xmmword_25A5197B0;
    *(void *)&v28[24] = "switchToLatest()";
    *(void *)&v28[32] = 16;
    v28[40] = 2;
    uint64_t v15 = *(void *)(v14 + 144);
    MEMORY[0x270FA5388](v12);
    sub_25A481D70((uint64_t)v13);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v15 + 76));
    sub_25A3B8530((long long *)(v15 + 16), v26);
    os_unfair_lock_unlock((os_unfair_lock_t)(v15 + 76));
    long long v16 = swift_release();
    if ((v26[0] & 1) == 0) {
      v13(v16);
    }
    swift_release();
    swift_release();
    sub_25A3901A8((uint64_t)v13);
    return sub_25A3901A8((uint64_t)v13);
  }
  else
  {
    swift_release();
    return swift_release();
  }
}

uint64_t sub_25A480A18@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (*(unsigned char *)(result + 24))
  {
    uint64_t v6 = 0;
    long long v7 = 0uLL;
  }
  else
  {
    long long v8 = *(_OWORD *)result;
    uint64_t v6 = *(void *)(result + 16);
    *(void *)uint64_t result = a2;
    *(void *)(result + 8) = a3;
    *(void *)(result + 16) = a4;
    swift_retain();
    uint64_t result = swift_retain();
    long long v7 = v8;
  }
  *(_OWORD *)a5 = v7;
  *(void *)(a5 + 16) = v6;
  return result;
}

uint64_t sub_25A480A90(os_unfair_lock_s *a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t)&a1[4];
  long long v7 = a1 + 11;
  os_unfair_lock_lock(a1 + 11);
  sub_25A480BC0(v6);
  os_unfair_lock_unlock(v7);
  uint64_t v11 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/EventS"
        "tream+Operators.swift";
  uint64_t v12 = 133;
  char v13 = 2;
  long long v14 = xmmword_25A5197C0;
  uint64_t v15 = "switchToLatest()";
  uint64_t v16 = 16;
  char v17 = 2;
  uint64_t v8 = *(void *)(a4 + 144);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v8 + 76));
  sub_25A3B8530((long long *)(v8 + 16), v10);
  os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 76));
  uint64_t result = swift_release();
  if ((v10[0] & 1) == 0) {
    return a2(result);
  }
  return result;
}

uint64_t sub_25A480BC0(uint64_t result)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void (**)(uint64_t))result;
  if (!*(void *)result)
  {
LABEL_6:
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  v7[1] = v7;
  uint64_t v4 = *(void *)(result + 16);
  long long v7[2] = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/Even"
          "tStream+Operators.swift";
  void v7[3] = 133;
  uint64_t v10 = "switchToLatest()";
  uint64_t v11 = 16;
  char v8 = 2;
  long long v9 = xmmword_25A5197D0;
  char v12 = 2;
  uint64_t v5 = *(void *)(v4 + 144);
  MEMORY[0x270FA5388](result);
  sub_25A481D70((uint64_t)v3);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 76));
  sub_25A3B8530((long long *)(v5 + 16), &v13);
  if (!v1)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 76));
    uint64_t v6 = swift_release();
    if ((v13 & 1) == 0) {
      v3(v6);
    }
    uint64_t result = sub_25A3901A8((uint64_t)v3);
    goto LABEL_6;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 76));
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t EventStreamProtocol<>.filterDuplicateEvents()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v9 = *(void *)(a1 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v4, a1);
  unint64_t v11 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  char v12 = (char *)swift_allocObject();
  *((void *)v12 + 2) = a1;
  *((void *)v12 + 3) = a2;
  *((void *)v12 + 4) = a3;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v12[v11], (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  swift_getAssociatedTypeWitness();
  return sub_25A4BC52C((uint64_t)sub_25A481BC8, (uint64_t)v12, a4);
}

uint64_t sub_25A480EB0@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t (**a7)()@<X8>)
{
  uint64_t v25 = a6;
  *(void *)&long long v26 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = type metadata accessor for FilterDuplicateEventsState();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v24 - v15;
  long long v17 = a1[1];
  long long v31 = *a1;
  long long v32 = v17;
  v33[0] = a1[2];
  *(_OWORD *)((char *)v33 + 9) = *(long long *)((char *)a1 + 41);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))((char *)&v24 - v15, 1, 1, AssociatedTypeWitness);
  uint64_t v18 = sub_25A3EF560(v16, v13);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(a5 + 16))(v29, a4, a5);
  void v28[2] = v29[0];
  v27[0] = v31;
  v27[1] = v32;
  v28[0] = v33[0];
  *(_OWORD *)((char *)v28 + 9) = *(_OWORD *)((char *)v33 + 9);
  uint64_t v19 = (void *)swift_allocObject();
  _OWORD v19[2] = a4;
  unint64_t v19[3] = a5;
  void v19[4] = v25;
  v19[5] = v18;
  void v19[6] = v26;
  v19[7] = a3;
  type metadata accessor for EventStream();
  swift_retain();
  swift_retain();
  sub_25A4BC4D0(v27);
  swift_release();
  swift_release();
  uint64_t v20 = v30;
  long long v26 = v29[1];
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = v26;
  *(void *)(v21 + 32) = v20;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A416708);
  swift_allocObject();
  uint64_t v22 = sub_25A3B7704(&v31, 0, 0, 1, 0, 0xD000000000000011, 0x800000025A51E350, 0x64656C65636E6163, 0xE800000000000000);
  uint64_t result = swift_release();
  *a7 = sub_25A481C98;
  a7[1] = (uint64_t (*)())v21;
  a7[2] = (uint64_t (*)())v22;
  return result;
}

uint64_t sub_25A4811D8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v17 = a2;
  uint64_t v13 = a5;
  uint64_t v14 = a6;
  uint64_t v15 = a7;
  uint64_t v16 = a1;
  swift_getAssociatedTypeWitness();
  type metadata accessor for FilterDuplicateEventsState();
  uint64_t v9 = sub_25A50E5B0();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_25A380000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/EventStream+Operators.swift", 133, 2, 135, 52, (uint64_t)"filterDuplicateEvents()", 23, 2, (uint64_t)sub_25A481CA4, (uint64_t)v12, v9, MEMORY[0x263F8D4F8], WitnessTable);
  if (v18 == 1) {
    return a3(a1);
  }
  return result;
}

uint64_t sub_25A481308@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, unsigned char *a4@<X8>)
{
  uint64_t v51 = a4;
  uint64_t v39 = a3;
  uint64_t v53 = a2;
  uint64_t v54 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void **)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  char v38 = (char *)&v37 - v6;
  uint64_t v7 = sub_25A50FA40();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v41 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  unint64_t v11 = (char *)&v37 - v10;
  uint64_t v45 = *(void *)(v7 - 8);
  uint64_t v12 = v45;
  uint64_t v13 = MEMORY[0x270FA5388](v9);
  uint64_t v44 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v37 - v16;
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v37 - v18;
  uint64_t v50 = v12;
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v20((char *)&v37 - v18, (uint64_t)v54, v7);
  char v48 = (void (*)(char *, uint64_t, uint64_t))v5[2];
  uint64_t v49 = v5 + 2;
  v48(v17, v53, AssociatedTypeWitness);
  uint64_t v46 = (void (*)(char *, void, uint64_t, uint64_t))v5[7];
  uint64_t v47 = v5 + 7;
  v46(v17, 0, 1, AssociatedTypeWitness);
  uint64_t v42 = TupleTypeMetadata2;
  uint64_t v21 = &v11[*(int *)(TupleTypeMetadata2 + 48)];
  v20(v11, (uint64_t)v19, v7);
  char v43 = v21;
  v20(v21, (uint64_t)v17, v7);
  uint64_t v40 = v5;
  uint64_t v22 = (uint64_t (*)(char *, uint64_t, uint64_t))v5[6];
  uint64_t v52 = v11;
  if (v22(v11, 1, AssociatedTypeWitness) != 1)
  {
    uint64_t v37 = v19;
    v20(v44, (uint64_t)v52, v7);
    long long v26 = v43;
    int v27 = v22(v43, 1, AssociatedTypeWitness);
    char v28 = v40;
    long long v29 = (void (**)(char *, uint64_t))(v40 + 1);
    if (v27 != 1)
    {
      long long v31 = v38;
      ((void (*)(char *, char *, uint64_t))v40[4])(v38, v26, AssociatedTypeWitness);
      long long v32 = v44;
      char v33 = sub_25A50EBE0();
      long long v34 = (void (*)(char *, uint64_t))v28[1];
      v34(v31, AssociatedTypeWitness);
      uint64_t v24 = *(void (**)(char *, uint64_t))(v45 + 8);
      v24(v17, v7);
      v24(v37, v7);
      v34(v32, AssociatedTypeWitness);
      v24(v52, v7);
      char v25 = v33 ^ 1;
      goto LABEL_9;
    }
    uint64_t v24 = *(void (**)(char *, uint64_t))(v45 + 8);
    v24(v17, v7);
    v24(v37, v7);
    (*v29)(v44, AssociatedTypeWitness);
    uint64_t v30 = v52;
    goto LABEL_7;
  }
  long long v23 = v52;
  uint64_t v24 = *(void (**)(char *, uint64_t))(v45 + 8);
  v24(v17, v7);
  v24(v19, v7);
  if (v22(v43, 1, AssociatedTypeWitness) != 1)
  {
    uint64_t v30 = v23;
LABEL_7:
    (*(void (**)(char *, uint64_t))(v41 + 8))(v30, v42);
    char v25 = 1;
    goto LABEL_9;
  }
  v24(v23, v7);
  char v25 = 0;
LABEL_9:
  uint64_t v35 = v54;
  v24(v54, v7);
  v48(v35, v53, AssociatedTypeWitness);
  uint64_t result = ((uint64_t (*)(char *, void, uint64_t, uint64_t))v46)(v35, 0, 1, AssociatedTypeWitness);
  *uint64_t v51 = v25 & 1;
  return result;
}

uint64_t sub_25A481850(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v7 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/EventSt"
       "ream+Operators.swift";
  uint64_t v8 = 133;
  char v9 = 2;
  long long v10 = xmmword_25A5197E0;
  unint64_t v11 = "filterDuplicateEvents()";
  uint64_t v12 = 23;
  char v13 = 2;
  uint64_t v4 = *(void *)(a3 + 144);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 76));
  sub_25A3B8530((long long *)(v4 + 16), &v6);
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 76));
  uint64_t result = swift_release();
  if ((v6 & 1) == 0) {
    return a1(result);
  }
  return result;
}

uint64_t sub_25A481948()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  swift_release();

  return MEMORY[0x270FA0238](v0, v5 + 16, v4);
}

uint64_t sub_25A4819E8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = (*(unsigned __int8 *)(*(void *)(*(void *)(v3 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v3 + 16) - 8) + 80);
  unint64_t v5 = (uint64_t *)(v3 + ((*(void *)(*(void *)(*(void *)(v3 + 16) - 8) + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_25A47FECC(a1, a2, a3, v3 + v4, *v5, v5[1], *(void *)(v3 + 16), *(void *)(v3 + 24));
}

uint64_t sub_25A481A54()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);

  return MEMORY[0x270FA0238](v0, v4, v5);
}

uint64_t sub_25A481ADC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A48018C(a1, v2+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v2 + 24) - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v2 + 24) - 8) + 80)), *(void *)(v2 + 24), a2);
}

uint64_t sub_25A481B24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25A481BE0(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))sub_25A48051C);
}

uint64_t objectdestroy_14Tm()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);

  return MEMORY[0x270FA0238](v0, v4, v5);
}

uint64_t sub_25A481BC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25A481BE0(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))sub_25A480EB0);
}

uint64_t sub_25A481BE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, unint64_t))
{
  return a4(a1, a2, a3, v4+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v4 + 16) - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v4 + 16) - 8) + 80)));
}

uint64_t type metadata accessor for FilterDuplicateEventsState()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A481C48(uint64_t a1)
{
  return sub_25A4811D8(a1, *(void *)(v1 + 40), *(uint64_t (**)(uint64_t))(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_25A481C58()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_25A481C98()
{
  return sub_25A481850(*(uint64_t (**)(uint64_t))(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_25A481CA4@<X0>(char *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_25A481308(a1, *(void *)(v2 + 40), *(void *)(v2 + 32), a2);
}

uint64_t sub_25A481CC4()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 128, 7);
}

uint64_t sub_25A481D04(uint64_t a1)
{
  return sub_25A480774(a1, (long long *)(v1 + 40), *(void *)(v1 + 104), *(uint64_t **)(v1 + 112), *(os_unfair_lock_s **)(v1 + 120), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_25A481D1C()
{
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_25A481D64()
{
  return sub_25A480A90(*(os_unfair_lock_s **)(v0 + 16), *(uint64_t (**)(uint64_t))(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_25A481D70(uint64_t result)
{
  if (result)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_25A481DB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A480A18(a1, v2[2], v2[3], v2[4], a2);
}

uint64_t objectdestroy_20Tm()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t sub_25A481E18(uint64_t a1)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v1 + 48);
  uint64_t result = (*(uint64_t (**)(void))(v1 + 32))();
  if (result) {
    return v3(a1);
  }
  return result;
}

uint64_t sub_25A481E6C(uint64_t a1)
{
  return sub_25A481EE0(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void))sub_25A47FB3C);
}

uint64_t objectdestroy_38Tm()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 72, 7);
}

uint64_t sub_25A481EC8(uint64_t a1)
{
  return sub_25A481EE0(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void))sub_25A47F518);
}

uint64_t sub_25A481EE0(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void, void))
{
  return a2(a1, v2[5], v2[6], v2[7], v2[8], v2[2], v2[3], v2[4]);
}

uint64_t sub_25A481EFC(uint64_t a1)
{
  return sub_25A47F148(a1, *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_25A481F20()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_25A481F58()
{
  return sub_25A47F1E4(*(void *)(v0 + 16));
}

void *destroy for SwitchToLatestState(void *result)
{
  if (*result)
  {
    swift_release();
    return (void *)swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for SwitchToLatestState(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    uint64_t v5 = *(void *)(a2 + 16);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v5;
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
  }
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t assignWithCopy for SwitchToLatestState(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if (*(void *)a1)
  {
    if (v4)
    {
      uint64_t v5 = a2[1];
      *(void *)a1 = v4;
      *(void *)(a1 + 8) = v5;
      swift_retain();
      swift_release();
      *(void *)(a1 + 16) = a2[2];
      swift_retain();
      swift_release();
    }
    else
    {
      sub_25A4820E8(a1);
      uint64_t v7 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = v7;
    }
  }
  else if (v4)
  {
    uint64_t v6 = a2[1];
    *(void *)a1 = v4;
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 16) = a2[2];
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v8 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = a2[2];
    *(_OWORD *)a1 = v8;
  }
  *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
  return a1;
}

uint64_t sub_25A4820E8(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for SwitchToLatestState(uint64_t a1, uint64_t a2)
{
  if (!*(void *)a1) {
    goto LABEL_5;
  }
  if (!*(void *)a2)
  {
    sub_25A4820E8(a1);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    goto LABEL_6;
  }
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
LABEL_6:
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for SwitchToLatestState(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 25)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SwitchToLatestState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SwitchToLatestState()
{
  return &type metadata for SwitchToLatestState;
}

uint64_t sub_25A48227C()
{
  uint64_t result = sub_25A50FA40();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_25A48230C(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v5) {
    ++v7;
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v6;
  if (a2 > v6)
  {
    char v9 = 8 * v7;
    if (v7 > 3) {
      goto LABEL_8;
    }
    unsigned int v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v7);
      if (v10) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2) {
          goto LABEL_25;
        }
LABEL_8:
        int v10 = *((unsigned __int8 *)a1 + v7);
        if (!*((unsigned char *)a1 + v7)) {
          goto LABEL_25;
        }
LABEL_15:
        int v12 = (v10 - 1) << v9;
        if (v7 > 3) {
          int v12 = 0;
        }
        if (v7)
        {
          if (v7 <= 3) {
            int v13 = v7;
          }
          else {
            int v13 = 4;
          }
          switch(v13)
          {
            case 2:
              int v14 = *a1;
              break;
            case 3:
              int v14 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
              break;
            case 4:
              int v14 = *(_DWORD *)a1;
              break;
            default:
              int v14 = *(unsigned __int8 *)a1;
              break;
          }
        }
        else
        {
          int v14 = 0;
        }
        return v6 + (v14 | v12) + 1;
      }
      int v10 = *(unsigned __int16 *)((char *)a1 + v7);
      if (*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_15;
      }
    }
  }
LABEL_25:
  if (v5 < 2) {
    return 0;
  }
  unsigned int v16 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v16 >= 2) {
    return v16 - 1;
  }
  else {
    return 0;
  }
}

void sub_25A4824AC(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (v8)
  {
    size_t v10 = *(void *)(v7 + 64);
  }
  else
  {
    unsigned int v9 = 0;
    size_t v10 = *(void *)(v7 + 64) + 1;
  }
  BOOL v11 = a3 >= v9;
  unsigned int v12 = a3 - v9;
  if (v12 == 0 || !v11)
  {
LABEL_13:
    if (v9 < a2) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  if (v10 > 3)
  {
    int v6 = 1;
    if (v9 < a2) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  unsigned int v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
  if (!HIWORD(v13))
  {
    if (v13 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v13 > 1;
    }
    goto LABEL_13;
  }
  int v6 = 4;
  if (v9 < a2)
  {
LABEL_14:
    unsigned int v14 = ~v9 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v16 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
LABEL_21:
  switch(v6)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x25A4826E8);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_25;
    default:
LABEL_25:
      if (a2)
      {
LABEL_26:
        if (v8 >= 2)
        {
          uint64_t v17 = *(void (**)(void))(v7 + 56);
          v17();
        }
      }
      return;
  }
}

double Timeout.effectiveSeconds.getter()
{
  double v1 = *(double *)v0;
  if (*(unsigned char *)(v0 + 8) == 1)
  {
    if (qword_26A415568 != -1) {
      swift_once();
    }
    if (byte_26A419DB0)
    {
      if (qword_26A415570 != -1) {
        swift_once();
      }
      if (byte_26A419DB1) {
        return v1 * 20.0;
      }
    }
    else
    {
      return *(double *)&qword_26A419DA8;
    }
  }
  return v1;
}

Swift::Double __swiftcall effectiveTimeout(_:)(Swift::Double a1)
{
  if (qword_26A415568 != -1) {
    swift_once();
  }
  if ((byte_26A419DB0 & 1) == 0) {
    return *(double *)&qword_26A419DA8;
  }
  if (qword_26A415570 != -1) {
    swift_once();
  }
  Swift::Double result = a1 * 20.0;
  if (!byte_26A419DB1) {
    return a1;
  }
  return result;
}

void static Timeout.seconds(_:)(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  *(unsigned char *)(a1 + 8) = 1;
}

double static Timeout.minutes(_:)@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  double result = a2 * 60.0;
  *(double *)a1 = result;
  *(unsigned char *)(a1 + 8) = 1;
  return result;
}

void static Timeout.unadjustableSeconds(_:)(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  *(unsigned char *)(a1 + 8) = 0;
}

uint64_t sub_25A4828B8()
{
  uint64_t result = sub_25A4828E4();
  qword_26A419DA8 = result;
  byte_26A419DB0 = v1 & 1;
  return result;
}

uint64_t sub_25A4828E4()
{
  id v0 = objc_msgSend(self, sel_processInfo);
  id v1 = objc_msgSend(v0, sel_environment);

  uint64_t v2 = sub_25A50E8A0();
  if (!*(void *)(v2 + 16)) {
    goto LABEL_14;
  }
  unint64_t v3 = sub_25A409670(0x4F454D49545F5655, 0xEA00000000005455);
  if ((v4 & 1) == 0) {
    goto LABEL_14;
  }
  unsigned int v5 = (uint64_t *)(*(void *)(v2 + 56) + 16 * v3);
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  swift_bridgeObjectRetain();
  uint64_t v8 = swift_bridgeObjectRelease();
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  if ((v6 & 0x1000000000000000) == 0 && v6 & 0x2000000000000000 | v7 & 0x1000000000000000)
  {
    MEMORY[0x270FA5388](v9);
    if ((v6 & 0x2000000000000000) == 0)
    {
      if ((v7 & 0x1000000000000000) != 0)
      {
        uint64_t v10 = (v6 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v11 = v7 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v10 = sub_25A50FE60();
      }
      char v12 = sub_25A3EEFFC(v10, v11, (void (*)(uint64_t *__return_ptr))sub_25A482EC8);
      swift_bridgeObjectRelease();
      if ((v12 & 1) == 0) {
        return 0;
      }
      goto LABEL_9;
    }
    if (v7 > 0x20u || ((1 << v7) & 0x100003E01) == 0)
    {
      uint64_t v19 = (unsigned __int8 *)_swift_stdlib_strtod_clocale();
      if (v19)
      {
        int v20 = *v19;
        swift_bridgeObjectRelease();
        if (v20) {
          return 0;
        }
        goto LABEL_9;
      }
    }
LABEL_14:
    swift_bridgeObjectRelease();
    return 0;
  }
  sub_25A50FD80();
  swift_bridgeObjectRelease();
  if ((v21 & 1) == 0) {
    return 0;
  }
LABEL_9:
  if (qword_26A415608 != -1) {
    swift_once();
  }
  uint64_t v13 = sub_25A50E5E0();
  __swift_project_value_buffer(v13, (uint64_t)qword_26A419F90);
  unsigned int v14 = sub_25A50E5C0();
  os_log_type_t v15 = sub_25A50F840();
  if (os_log_type_enabled(v14, v15))
  {
    int v16 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)int v16 = 134217984;
    sub_25A50FB00();
    _os_log_impl(&dword_25A380000, v14, v15, "Using explicit timeout %f", v16, 0xCu);
    MEMORY[0x26113F070](v16, -1, -1);
  }

  return 0;
}

void sub_25A482C60()
{
  if (qword_26B3292F0 != -1) {
    swift_once();
  }
  if (byte_26A416FE0) {
    goto LABEL_7;
  }
  if (qword_26B3292E8 != -1) {
    swift_once();
  }
  if (byte_26A416FE1 == 1)
  {
LABEL_7:
    if (qword_26A415608 != -1) {
      swift_once();
    }
    uint64_t v0 = sub_25A50E5E0();
    __swift_project_value_buffer(v0, (uint64_t)qword_26A419F90);
    id v1 = sub_25A50E5C0();
    os_log_type_t v2 = sub_25A50F840();
    if (os_log_type_enabled(v1, v2))
    {
      unint64_t v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v3 = 0;
      _os_log_impl(&dword_25A380000, v1, v2, "Using CI timeout", v3, 2u);
      MEMORY[0x26113F070](v3, -1, -1);
    }
  }
  if (byte_26A416FE0)
  {
    char v4 = 1;
  }
  else
  {
    if (qword_26B3292E8 != -1) {
      swift_once();
    }
    char v4 = byte_26A416FE1;
  }
  byte_26A419DB1 = v4;
}

uint64_t getEnumTagSinglePayload for Timeout(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Timeout(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Timeout()
{
  return &type metadata for Timeout;
}

unsigned char *sub_25A482EAC@<X0>(unsigned char *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_25A3EEF90(a1, a2);
}

void *sub_25A482EC8@<X0>(unsigned char *a1@<X8>)
{
  return sub_25A3EF05C(*(void *(**)(uint64_t *__return_ptr))(v1 + 16), a1);
}

uint64_t CrashReportError.MissingEnvironmentObjectError.type.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CrashReportError.MissingEnvironmentObjectError.crashReport.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CrashReportError.MissingEnvironmentObjectError() + 24);

  return sub_25A3C635C(v3, a1);
}

uint64_t type metadata accessor for CrashReportError.MissingEnvironmentObjectError()
{
  uint64_t result = qword_26A419DC0;
  if (!qword_26A419DC0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t CrashReportError.MissingEnvironmentObjectError.highValueTitle.getter()
{
  return 0x1000000000000029;
}

uint64_t CrashReportError.MissingEnvironmentObjectError.additionalInfo.getter()
{
  return 0;
}

id sub_25A483160()
{
  id v0 = objc_allocWithZone(MEMORY[0x263F08AE8]);
  id result = sub_25A4B2F48(0xD000000000000048, 0x800000025A520EE0, 0);
  qword_26A419DB8 = (uint64_t)result;
  return result;
}

uint64_t static CrashReportError.MissingEnvironmentObjectError.asiRegularExpression.getter()
{
  if (qword_26A415578 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v0 = qword_26A419DB8;
  id v1 = (id)qword_26A419DB8;
  return v0;
}

void static CrashReportError.MissingEnvironmentObjectError.asiRegularExpression.setter(uint64_t a1)
{
  if (qword_26A415578 != -1) {
    swift_once();
  }
  swift_beginAccess();
  os_log_type_t v2 = (void *)qword_26A419DB8;
  qword_26A419DB8 = a1;
}

uint64_t (*static CrashReportError.MissingEnvironmentObjectError.asiRegularExpression.modify())()
{
  if (qword_26A415578 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t CrashReportError.MissingEnvironmentObjectError.init(report:asi:match:)@<X0>(uint64_t a1@<X0>, void *a2@<X3>, void *a3@<X8>)
{
  uint64_t v6 = (void *)(a1 + *(int *)(type metadata accessor for CrashReport(0) + 20));
  uint64_t v7 = v6[1];
  *a3 = *v6;
  a3[1] = v7;
  swift_bridgeObjectRetain();
  uint64_t v8 = (void *)sub_25A50EBF0();
  swift_bridgeObjectRelease();
  uint64_t v9 = (void *)sub_25A50EBF0();
  id v10 = objc_msgSend(a2, sel_rangeWithName_, v9);
  uint64_t v12 = v11;

  id v13 = objc_msgSend(v8, sel_substringWithRange_, v10, v12);
  sub_25A50EC20();

  uint64_t v14 = sub_25A50EED0();
  uint64_t v16 = v15;

  a3[2] = v14;
  a3[3] = v16;
  uint64_t v17 = type metadata accessor for CrashReportError.MissingEnvironmentObjectError();
  sub_25A3F6C88(a1, (uint64_t)a3 + *(int *)(v17 + 24));
  return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(a3, 0, 1, v17);
}

uint64_t _s29MissingEnvironmentObjectErrorVwet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25A483534);
}

uint64_t sub_25A483534(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for CrashReport(0);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t _s29MissingEnvironmentObjectErrorVwst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25A4835F8);
}

uint64_t sub_25A4835F8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for CrashReport(0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_25A4836A0()
{
  uint64_t result = type metadata accessor for CrashReport(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t ConcurrentInvalidatable.observeInvalidation(_:)@<X0>(void (*a1)(long long *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (**a5)()@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(a4 + 16))(a3, a4);
  swift_retain();
  sub_25A4838F4(a1, a2, a5);
  swift_release();

  return swift_release();
}

uint64_t sub_25A4837BC@<X0>(uint64_t a1@<X0>, void (*a2)(long long *)@<X1>, uint64_t a3@<X8>)
{
  return sub_25A4837D4(a1, a2, a3);
}

uint64_t sub_25A4837D4@<X0>(uint64_t a1@<X0>, void (*a2)(long long *)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)a1;
  char v5 = *(unsigned char *)(a1 + 65);
  if (v5)
  {
    *(void *)a3 = v4;
    uint64_t result = swift_bridgeObjectRetain();
  }
  else
  {
    char v13 = *(unsigned char *)(a1 + 64);
    uint64_t v19 = *(void *)(a1 + 56);
    uint64_t v15 = *(void *)(a1 + 40);
    uint64_t v16 = *(void *)(a1 + 48);
    uint64_t v9 = *(void *)(a1 + 24);
    uint64_t v14 = *(void *)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v10 = *(void *)(a1 + 16);
    *(void *)&long long v17 = v4;
    *((void *)&v17 + 1) = v11;
    uint64_t v18 = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a2(&v17);
    uint64_t result = sub_25A4862D8(v4, v11, v10, v9, v14, v15, v16, v19, v13, 0);
    uint64_t v12 = v18;
    *(_OWORD *)a1 = v17;
    *(void *)(a1 + 16) = v12;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 50) = 0u;
  }
  *(unsigned char *)(a3 + 8) = v5;
  return result;
}

uint64_t sub_25A4838F4@<X0>(void (*a1)(long long *)@<X0>, uint64_t a2@<X1>, uint64_t (**a3)()@<X8>)
{
  uint64_t v12 = a1;
  uint64_t v13 = a2;
  char v5 = *(os_unfair_lock_s **)(*(void *)(v3 + 32) + 144);
  swift_retain();
  swift_retain();
  os_unfair_lock_lock(v5 + 21);
  sub_25A4869C4((uint64_t)&v5[4], (uint64_t)&v10);
  os_unfair_lock_unlock(v5 + 21);
  swift_release();
  swift_release();
  uint64_t v6 = v10;
  if (v11 == 1)
  {
    *(void *)&long long v14 = v10;
    v12(&v14);
    uint64_t result = sub_25A3CE684(v6, 1);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    uint64_t v8 = swift_allocObject();
    swift_weakInit();
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = v8;
    *(void *)(v9 + 24) = v6;
    *(void *)&long long v14 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFou"
                      "ndation/InvalidationHandle.swift";
    *((void *)&v14 + 1) = 130;
    char v15 = 2;
    long long v16 = xmmword_25A519920;
    long long v17 = "makeCancelationToken(for:)";
    uint64_t v18 = 26;
    char v19 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A416708);
    swift_allocObject();
    uint64_t result = sub_25A3B7704(&v14, 0, 0, 1, 0, 0xD000000000000011, 0x800000025A51E350, 0x64656C65636E6163, 0xE800000000000000);
    *a3 = sub_25A4869B0;
    a3[1] = (uint64_t (*)())v9;
    a3[2] = (uint64_t (*)())result;
  }
  return result;
}

uint64_t sub_25A483AE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v5 = *(os_unfair_lock_s **)(*(void *)(v2 + 32) + 144);
  swift_retain();
  swift_retain();
  os_unfair_lock_lock(v5 + 21);
  sub_25A486460((uint64_t)&v5[4], (uint64_t)&v13);
  os_unfair_lock_unlock(v5 + 21);
  swift_release();
  swift_release();
  uint64_t v6 = v13;
  if (v14 == 1)
  {
    if (MEMORY[0x26113F1A0](a1))
    {
      swift_getObjectType();
      Actor.verifyIsolated(_:file:line:)();
      swift_unknownObjectRelease();
    }
    uint64_t v7 = *(void (**)(long long *))(a1 + 16);
    *(void *)&long long v15 = v6;
    v7(&v15);
    uint64_t result = sub_25A3CE684(v6, 1);
    *(void *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  else
  {
    swift_beginAccess();
    uint64_t v9 = MEMORY[0x26113F1A0](v2 + 40);
    uint64_t v10 = *(void *)(v2 + 48);
    uint64_t v11 = swift_allocObject();
    swift_weakInit();
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = v11;
    *(void *)(v12 + 24) = v6;
    *(void *)&long long v15 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFou"
                      "ndation/InvalidationHandle.swift";
    *((void *)&v15 + 1) = 130;
    char v16 = 2;
    long long v17 = xmmword_25A519930;
    uint64_t v18 = "makeCancelationToken(for:)";
    uint64_t v19 = 26;
    char v20 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A416708);
    swift_allocObject();
    uint64_t result = sub_25A3B7704(&v15, 0, 0, 1, 0, 0xD000000000000011, 0x800000025A51E350, 0x64656C65636E6163, 0xE800000000000000);
    *(void *)a2 = v9;
    *(void *)(a2 + 8) = v10;
    *(void *)(a2 + 16) = sub_25A4864B4;
    *(void *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = result;
  }
  return result;
}

uint64_t sub_25A483D58@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  if (qword_26A4154C0 != -1) {
    swift_once();
  }
  uint64_t v6 = (void *)(qword_26A418748 + 16);
  uint64_t v7 = (os_unfair_lock_s *)(qword_26A418748 + 24);
  swift_retain();
  os_unfair_lock_lock(v7);
  sub_25A42091C(v6, &v11);
  os_unfair_lock_unlock(v7);
  uint64_t v8 = v11;
  swift_release();
  swift_retain();
  uint64_t v9 = sub_25A3CC544(a1, a2, v8);
  sub_25A393228(v9);
  uint64_t result = swift_release();
  *a3 = v8;
  return result;
}

uint64_t sub_25A483E48@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  if (qword_26A4154C0 != -1) {
    swift_once();
  }
  uint64_t v4 = (void *)(qword_26A418748 + 16);
  char v5 = (os_unfair_lock_s *)(qword_26A418748 + 24);
  swift_retain();
  os_unfair_lock_lock(v5);
  sub_25A42091C(v4, v8);
  os_unfair_lock_unlock(v5);
  uint64_t v6 = v8[0];
  swift_release();
  sub_25A3CE764(a1, (uint64_t)v8);
  uint64_t result = sub_25A3CBFC4((uint64_t)v8, v6);
  *a2 = v6;
  return result;
}

uint64_t sub_25A483F28(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 32);
  uint64_t v29 = a2;
  uint64_t v30 = &v37;
  uint64_t v31 = a1;
  uint64_t v4 = *(os_unfair_lock_s **)(v3 + 144);
  uint64_t v22 = sub_25A4865BC;
  long long v23 = &v28;
  uint64_t v24 = a1;
  uint64_t v25 = v3;
  long long v26 = nullsub_1;
  uint64_t v27 = 0;
  swift_retain();
  swift_retain();
  os_unfair_lock_lock(v4 + 21);
  sub_25A486884((uint64_t)&v4[4]);
  os_unfair_lock_unlock(v4 + 21);
  swift_release();
  uint64_t result = swift_release();
  uint64_t v6 = v33;
  if (v33)
  {
    uint64_t v8 = v35;
    uint64_t v7 = v36;
    uint64_t v9 = v34;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_25A4865EC(v6, v9, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    uint64_t v10 = *(void *)(v8 + 16);
    if (v10)
    {
      v19[0] = v9;
      _OWORD v19[2] = v6;
      v38[0] = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation"
               "/InvalidationHandle.swift";
      v38[1] = 130;
      char v39 = 2;
      long long v40 = xmmword_25A519940;
      uint64_t v41 = "_invalidate(callsite:trace:)";
      uint64_t v42 = 28;
      char v43 = 2;
      uint64_t v11 = swift_bridgeObjectRetain_n();
      v19[1] = v8;
      uint64_t v12 = (uint64_t *)(v8 + 64);
      do
      {
        char v21 = v19;
        char v20 = (void (*)(uint64_t, uint64_t, uint64_t))*(v12 - 2);
        uint64_t v13 = *v12;
        uint64_t v14 = *(v12 - 4);
        unint64_t v19[3] = *(v12 - 3);
        uint64_t v15 = *(void *)(v13 + 144);
        MEMORY[0x270FA5388](v11);
        v19[-6] = nullsub_1;
        v19[-5] = 0;
        v19[-4] = v38;
        v19[-3] = v13;
        v19[-2] = sub_25A3B1EC4;
        v19[-1] = 0;
        swift_unknownObjectRetain();
        swift_retain();
        swift_retain();
        swift_retain();
        os_unfair_lock_lock((os_unfair_lock_t)(v15 + 76));
        sub_25A3B8530((long long *)(v15 + 16), v32);
        os_unfair_lock_unlock((os_unfair_lock_t)(v15 + 76));
        uint64_t v16 = swift_release();
        if ((v32[0] & 1) == 0)
        {
          if (v14)
          {
            swift_getObjectType();
            uint64_t v16 = Actor.verifyIsolated(_:file:line:)();
          }
          v20(v16, v17, v18);
        }
        swift_release();
        swift_release();
        uint64_t v11 = swift_unknownObjectRelease();
        v12 += 5;
        --v10;
      }
      while (v10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_25A4842A0()
{
  unint64_t v1 = *(os_unfair_lock_s **)(*(void *)(v0 + 32) + 144);
  swift_retain();
  swift_retain();
  os_unfair_lock_lock(v1 + 21);
  sub_25A4865C0((uint64_t)&v1[4]);
  os_unfair_lock_unlock(v1 + 21);
  swift_release();
  uint64_t result = swift_release();
  if (v10)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_25A486788(v10, v11, v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    uint64_t v3 = *(void *)(v12 + 16);
    if (v3)
    {
      uint64_t v14 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/In"
            "validationHandle.swift";
      uint64_t v15 = 130;
      char v16 = 2;
      long long v17 = xmmword_25A519940;
      uint64_t v18 = "_invalidate(callsite:trace:)";
      uint64_t v19 = 28;
      char v20 = 2;
      uint64_t v4 = swift_bridgeObjectRetain_n();
      uint64_t v5 = v12 + 48;
      do
      {
        uint64_t v8 = *(void (**)(uint64_t))(v5 - 16);
        uint64_t v6 = *(void *)(*(void *)v5 + 144);
        MEMORY[0x270FA5388](v4);
        swift_retain();
        swift_retain();
        swift_retain();
        os_unfair_lock_lock((os_unfair_lock_t)(v6 + 76));
        sub_25A3B8530((long long *)(v6 + 16), v9);
        os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 76));
        uint64_t v7 = swift_release();
        if ((v9[0] & 1) == 0) {
          v8(v7);
        }
        swift_release();
        uint64_t v4 = swift_release();
        v5 += 24;
        --v3;
      }
      while (v3);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_25A4845A0@<X0>(void *a1@<X3>, void *a2@<X4>, long long *a3@<X5>, void *a4@<X8>)
{
  char v6 = *((unsigned char *)a3 + 16);
  char v7 = *((unsigned char *)a3 + 56);
  uint64_t v8 = a2[3];
  uint64_t v9 = a2[4];
  char v10 = *(unsigned char *)(v9 + 32);
  char v11 = *(unsigned char *)(v9 + 72);
  *(void *)&long long v15 = a2[2];
  *((void *)&v15 + 1) = v8;
  long long v16 = *(_OWORD *)(v9 + 16);
  v17[0] = v10;
  *(_OWORD *)&v17[8] = *(_OWORD *)(v9 + 40);
  *(_OWORD *)&v17[24] = *(_OWORD *)(v9 + 56);
  v17[40] = v11;
  long long v18 = *a3;
  v19[0] = v6;
  *(_OWORD *)&v19[8] = *(long long *)((char *)a3 + 24);
  *(_OWORD *)&v19[24] = *(long long *)((char *)a3 + 40);
  v19[40] = v7;
  _OWORD v20[2] = *(_OWORD *)v17;
  uint64_t v20[3] = *(_OWORD *)&v17[16];
  void v20[4] = *(_OWORD *)&v17[32];
  v20[5] = v18;
  v20[0] = v15;
  v20[1] = v16;
  v20[6] = *(_OWORD *)v19;
  v21[0] = *(_OWORD *)&v19[16];
  *(_OWORD *)((char *)v21 + 9) = *(_OWORD *)&v19[25];
  sub_25A3C5C10((uint64_t)v20);
  swift_bridgeObjectRetain();
  sub_25A3D04A0((uint64_t)&v15);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    a1 = sub_25A38AEB0(0, a1[2] + 1, 1, a1);
  }
  unint64_t v13 = a1[2];
  unint64_t v12 = a1[3];
  if (v13 >= v12 >> 1) {
    a1 = sub_25A38AEB0((void *)(v12 > 1), v13 + 1, 1, a1);
  }
  a1[2] = v13 + 1;
  sub_25A3C5C28((uint64_t)v20, (uint64_t)&a1[18 * v13 + 4]);
  uint64_t result = swift_bridgeObjectRelease_n();
  *a4 = a1;
  return result;
}

uint64_t sub_25A48470C(_OWORD *a1, uint64_t *a2)
{
  long long v3 = a1[1];
  v8[0] = *a1;
  v8[1] = v3;
  v9[0] = a1[2];
  *(_OWORD *)((char *)v9 + 9) = *(_OWORD *)((char *)a1 + 41);
  uint64_t v4 = *a2;
  uint64_t v5 = *v2 + 40;
  swift_beginAccess();
  if (MEMORY[0x26113F1A0](v5))
  {
    uint64_t ObjectType = swift_getObjectType();
    MEMORY[0x270FA5388](ObjectType);
    Actor.verifyIsolated(_:file:line:)();
    swift_unknownObjectRelease();
  }
  swift_retain();
  sub_25A483F28((uint64_t)v8, v4);
  return swift_release();
}

uint64_t IsolatedInvalidatable.invalidate(callsite:trace:)(_OWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  long long v6 = a1[1];
  v12[0] = *a1;
  v12[1] = v6;
  v13[0] = a1[2];
  *(_OWORD *)((char *)v13 + 9) = *(_OWORD *)((char *)a1 + 41);
  uint64_t v7 = *a2;
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 16);
  uint64_t v9 = v8(a3, a4) + 40;
  swift_beginAccess();
  if (MEMORY[0x26113F1A0](v9))
  {
    swift_release();
    uint64_t ObjectType = swift_getObjectType();
    MEMORY[0x270FA5388](ObjectType);
    Actor.verifyIsolated(_:file:line:)();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_release();
  }
  v8(a3, a4);
  sub_25A483F28((uint64_t)v12, v7);
  return swift_release();
}

uint64_t sub_25A48498C()
{
  swift_retain();
  sub_25A4842A0();

  return swift_release();
}

uint64_t ConcurrentInvalidatable.invalidate(callsite:trace:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(uint64_t, uint64_t))(a4 + 16))(a3, a4);
  sub_25A4842A0();

  return swift_release();
}

uint64_t sub_25A484A78(_OWORD *a1, uint64_t *a2, uint64_t a3)
{
  return IsolatedInvalidatable.invalidate(callsite:trace:)(a1, a2, a3, (uint64_t)&off_270831580);
}

uint64_t AnyInvalidatable.invalidate(file:line:column:function:trace:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t *a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11 = *a9;
  v14[0] = a1;
  v14[1] = a2;
  char v15 = a3;
  uint64_t v16 = a4;
  uint64_t v17 = a5;
  uint64_t v18 = a6;
  uint64_t v19 = a7;
  char v20 = a8;
  uint64_t v13 = v11;
  return (*(uint64_t (**)(void *, uint64_t *, uint64_t, uint64_t))(a11 + 8))(v14, &v13, a10, a11);
}

uint64_t IsolatedInvalidatable.onInvalidation(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = IsolatedInvalidatable.observeInvalidation(_:)(a1, a2, a3, a4, (uint64_t)v11);
  uint64_t v8 = v12;
  if (v12)
  {
    uint64_t v10 = v11[0];
    uint64_t v9 = v11[1];
    CancelationToken<>.cancel<A>(onInvalidationOf:)(v4, a3, a4);
    return sub_25A484F74(v10, v9, v8);
  }
  return result;
}

uint64_t ConcurrentInvalidatable.invalidationTrace.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  _OWORD v4[2] = a1;
  v4[3] = a2;
  return MEMORY[0x270FA2498](sub_25A484BAC, 0, 0);
}

uint64_t sub_25A484BAC()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 48) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 24);
  *(void *)(v2 + 32) = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v3;
  void *v3 = v0;
  v3[1] = sub_25A484CA4;
  uint64_t v4 = *(void *)(v0 + 16);
  return MEMORY[0x270FA2318](v4, 0, 0, 0xD000000000000011, 0x800000025A520F70, sub_25A485B40, v2, &type metadata for InvalidationTrace);
}

uint64_t sub_25A484CA4()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_25A484DB4()
{
  return 0;
}

uint64_t sub_25A484EA4()
{
  return sub_25A484DB4();
}

uint64_t IsolatedInvalidatable.observeInvalidation(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a3, a4);
  swift_beginAccess();
  MEMORY[0x26113F1A0](v8 + 40);
  uint64_t v11 = *(void *)(v8 + 48);
  swift_unknownObjectWeakInit();
  swift_retain();
  swift_unknownObjectRelease();
  uint64_t v12 = a1;
  uint64_t v13 = a2;
  sub_25A483AE0((uint64_t)v10, a5);
  sub_25A3CE734((uint64_t)v10);
  return swift_release();
}

uint64_t sub_25A484F74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_release();
    swift_release();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t IsolatedInvalidatable.invalidationTrace(on:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  void v6[5] = a4;
  void v6[2] = a1;
  void v6[3] = a2;
  swift_getObjectType();
  uint64_t v8 = sub_25A50F220();
  return MEMORY[0x270FA2498](sub_25A48505C, v8, v7);
}

uint64_t sub_25A48505C()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 64) = v4;
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(v0 + 40);
  *(void *)(v4 + 32) = v2;
  *(void *)(v4 + 40) = v3;
  *(void *)(v4 + 48) = v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_25A485164;
  uint64_t v6 = *(void *)(v0 + 16);
  return MEMORY[0x270FA2318](v6, v2, v3, 0xD000000000000016, 0x800000025A520F90, sub_25A485B4C, v4, &type metadata for InvalidationTrace);
}

uint64_t sub_25A485164()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_25A485274(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A419DF0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x270FA5388](v9);
  swift_getObjectType();
  Actor.verifyIsolated(_:file:line:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v13 + v12, (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  IsolatedInvalidatable.onInvalidation(_:)((uint64_t)sub_25A486454, v13, a5, a6);
  return swift_release();
}

uint64_t IsolatedInvalidatable.invalidation(on:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[3] = a1;
  v4[4] = a2;
  uint64_t v9 = (void *)swift_task_alloc();
  v4[5] = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_25A4854E8;
  return IsolatedInvalidatable.invalidationTrace(on:)((uint64_t)(v4 + 2), a1, a2, a3, a4);
}

uint64_t sub_25A4854E8()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_getObjectType();
  uint64_t v1 = sub_25A50F220();
  return MEMORY[0x270FA2498](sub_25A48564C, v1, v0);
}

uint64_t sub_25A48564C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t IsolatedInvalidatable.trackInvalidation<A>(file:line:column:function:of:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return sub_25A485DC0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t))sub_25A4856A0);
}

uint64_t sub_25A4856A0(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  (*(void (**)(uint64_t, uint64_t))(a5 + 16))(a3, a5);
  uint64_t v11 = swift_allocObject();
  swift_weakInit();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v11;
  long long v13 = a2[1];
  *(_OWORD *)(v12 + 24) = *a2;
  *(_OWORD *)(v12 + 40) = v13;
  *(_OWORD *)(v12 + 56) = a2[2];
  *(_OWORD *)(v12 + 65) = *(_OWORD *)((char *)a2 + 41);
  swift_retain();
  IsolatedInvalidatable.observeInvalidation(_:)((uint64_t)sub_25A48641C, v12, a4, a6, (uint64_t)v19);
  swift_release();
  swift_release();
  uint64_t v14 = v20;
  if (v20)
  {
    uint64_t v15 = v19[0];
    uint64_t v16 = v19[1];
    CancelationToken<>.cancel<A>(onInvalidationOf:)(v18, a3, a5);
    swift_release();
    return sub_25A484F74(v15, v16, v14);
  }
  else
  {
    return swift_release();
  }
}

uint64_t IsolatedInvalidatable.bindInvalidation(file:line:column:function:of:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return sub_25A485FFC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, (void (*)(void *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))sub_25A4856A0);
}

uint64_t IsolatedInvalidatable.isInvalidated.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(os_unfair_lock_s **)(*(void *)((*(uint64_t (**)(void))(a2 + 16))() + 32) + 144);
  swift_retain();
  swift_retain();
  os_unfair_lock_lock(v2 + 21);
  sub_25A3EF30C((uint64_t)&v2[4], (uint64_t)v5);
  os_unfair_lock_unlock(v2 + 21);
  swift_release();
  swift_release();
  uint64_t v3 = v7;
  sub_25A4862D8(v5[0], v5[1], v5[2], v5[3], v5[4], v5[5], v5[6], v5[7], v6, v7);
  swift_release();
  return v3;
}

uint64_t ConcurrentInvalidatable.onInvalidation(_:)(void (*a1)(long long *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = ConcurrentInvalidatable.observeInvalidation(_:)(a1, a2, a3, a4, &v9);
  uint64_t v8 = v9;
  if (v9)
  {
    CancelationToken<>.cancel<A>(onInvalidationOf:)(v4, a3, a4);
    return sub_25A3901A8((uint64_t)v8);
  }
  return result;
}

uint64_t sub_25A4859E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A419DF0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x270FA5388](v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
  unint64_t v10 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v11 + v10, (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  ConcurrentInvalidatable.onInvalidation(_:)((void (*)(long long *))sub_25A486454, v11, a3, a4);
  return swift_release();
}

uint64_t sub_25A485B40(uint64_t a1)
{
  return sub_25A4859E8(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_25A485B4C(uint64_t a1)
{
  return sub_25A485274(a1, v1[4], v1[5], v1[6], v1[2], v1[3]);
}

uint64_t sub_25A485B5C()
{
  return sub_25A50F250();
}

uint64_t ConcurrentInvalidatable.invalidation.getter(uint64_t a1, uint64_t a2)
{
  char v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 24) = v6;
  *char v6 = v3;
  v6[4] = a2;
  void v6[5] = v2;
  void v6[2] = v3 + 16;
  void v6[3] = a1;
  v6[1] = sub_25A485C68;
  return MEMORY[0x270FA2498](sub_25A484BAC, 0, 0);
}

uint64_t sub_25A485C68()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](sub_25A48564C, 0, 0);
}

uint64_t ConcurrentInvalidatable.trackInvalidation<A>(file:line:column:function:of:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return sub_25A485DC0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t))sub_25A485E1C);
}

uint64_t sub_25A485DC0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t (*a14)(uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  v15[0] = a1;
  v15[1] = a2;
  char v16 = a3;
  uint64_t v17 = a4;
  uint64_t v18 = a5;
  uint64_t v19 = a6;
  uint64_t v20 = a7;
  char v21 = a8;
  return a14(a9, v15, a10, a11, a12, a13);
}

uint64_t sub_25A485E1C(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  (*(void (**)(uint64_t, uint64_t))(a5 + 16))(a3, a5);
  uint64_t v11 = swift_allocObject();
  swift_weakInit();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v11;
  long long v13 = a2[1];
  *(_OWORD *)(v12 + 24) = *a2;
  *(_OWORD *)(v12 + 40) = v13;
  *(_OWORD *)(v12 + 56) = a2[2];
  *(_OWORD *)(v12 + 65) = *(_OWORD *)((char *)a2 + 41);
  swift_retain();
  ConcurrentInvalidatable.observeInvalidation(_:)((void (*)(long long *))sub_25A4863B0, v12, a4, a6, &v17);
  swift_release();
  swift_release();
  uint64_t v14 = v17;
  if (v17)
  {
    CancelationToken<>.cancel<A>(onInvalidationOf:)(v16, a3, a5);
    swift_release();
    return sub_25A3901A8((uint64_t)v14);
  }
  else
  {
    return swift_release();
  }
}

uint64_t ConcurrentInvalidatable.bindInvalidation(file:line:column:function:of:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return sub_25A485FFC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, (void (*)(void *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))sub_25A485E1C);
}

uint64_t sub_25A485FFC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, void (*a12)(void *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t result = a9;
  uint64_t v15 = *(void *)(a9 + 16);
  if (v15)
  {
    uint64_t v16 = (void *)(a9 + 32);
    uint64_t v30 = a1;
    swift_bridgeObjectRetain();
    char v21 = v12;
    do
    {
      uint64_t v29 = v15;
      uint64_t v17 = v16[3];
      uint64_t v18 = v16[4];
      uint64_t v19 = __swift_project_boxed_opaque_existential_1(v16, v17);
      uint64_t v32 = v30;
      uint64_t v33 = a2;
      char v34 = a3;
      uint64_t v35 = a4;
      uint64_t v36 = a5;
      uint64_t v37 = a6;
      uint64_t v38 = a7;
      char v39 = a8;
      a12(v19, &v32, a10, v17, a11, v18);
      uint64_t v20 = v16[3];
      uint64_t v28 = v16[4];
      __swift_project_boxed_opaque_existential_1(v16, v20);
      uint64_t v32 = v30;
      uint64_t v33 = a2;
      char v34 = a3;
      uint64_t v35 = a4;
      uint64_t v36 = a5;
      uint64_t v37 = a6;
      uint64_t v38 = a7;
      char v39 = a8;
      a12(v21, &v32, v20, a10, v28, a11);
      v16 += 5;
      uint64_t v15 = v29 - 1;
    }
    while (v29 != 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_25A48618C(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    a4(a3, v6);
    return swift_release();
  }
  return result;
}

Swift::Bool __swiftcall ConcurrentInvalidatable.peekIsInvalidated()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(*(void *)((*(uint64_t (**)(void))(v0 + 16))() + 32) + 144);
  swift_retain();
  swift_retain();
  os_unfair_lock_lock(v1 + 21);
  sub_25A3EF30C((uint64_t)&v1[4], (uint64_t)v4);
  os_unfair_lock_unlock(v1 + 21);
  swift_release();
  swift_release();
  char v2 = v6;
  sub_25A4862D8(v4[0], v4[1], v4[2], v4[3], v4[4], v4[5], v4[6], v4[7], v5, v6);
  swift_release();
  return v2;
}

uint64_t sub_25A4862D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, char a10)
{
  uint64_t result = swift_bridgeObjectRelease();
  if ((a10 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t dispatch thunk of AnyInvalidatable.invalidate(callsite:trace:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of IsolatedInvalidatable.invalidationHandle.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ConcurrentInvalidatable.invalidationHandle.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_25A486378()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_25A4863B0(uint64_t *a1)
{
  return sub_25A48618C(a1, *(void *)(v1 + 16), v1 + 24, (void (*)(uint64_t, uint64_t))sub_25A4842A0);
}

uint64_t sub_25A4863E4()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 81, 7);
}

uint64_t sub_25A48641C(uint64_t *a1)
{
  return sub_25A48618C(a1, *(void *)(v1 + 16), v1 + 24, (void (*)(uint64_t, uint64_t))sub_25A483F28);
}

uint64_t sub_25A486458@<X0>(uint64_t *a1@<X8>)
{
  return sub_25A483E48(*(void *)(v1 + 16), a1);
}

uint64_t sub_25A486460@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A4837D4(a1, *(void (**)(long long *))(v2 + 16), a2);
}

uint64_t sub_25A48647C()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_25A4864B4()
{
  return sub_25A3CD594(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t objectdestroy_16Tm()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A419DF0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t sub_25A486554()
{
  return sub_25A485B5C();
}

uint64_t sub_25A4865C0(uint64_t a1)
{
  return sub_25A4868B0(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void))sub_25A3B7BDC);
}

uint64_t sub_25A4865EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    uint64_t v7 = a2 + 32;
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    unint64_t v9 = 0;
    while (v9 < v5)
    {
      uint64_t v10 = *(void *)(v7 + 8 * v9);
      uint64_t v12 = v10;
      if (!*(void *)(a1 + 16)) {
        goto LABEL_12;
      }
      uint64_t result = sub_25A4096E8(v10);
      if ((v11 & 1) == 0) {
        goto LABEL_13;
      }
      sub_25A3CE764(*(void *)(a1 + 56) + 32 * result, (uint64_t)v13);
      uint64_t v14 = v10;
      sub_25A3CE764((uint64_t)v13, (uint64_t)&v15);
      sub_25A4868DC((uint64_t)&v12);
      sub_25A48693C((uint64_t)&v14, (uint64_t)&v12);
      if (MEMORY[0x26113F1A0](v13))
      {
        swift_getObjectType();
        Actor.verifyIsolated(_:file:line:)();
        swift_unknownObjectRelease();
      }
      ++v9;
      uint64_t v16 = a3;
      ((void (*)(uint64_t *))v13[2])(&v16);
      uint64_t result = sub_25A4868DC((uint64_t)&v12);
      unint64_t v5 = *(void *)(a2 + 16);
      if (v9 == v5) {
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_10:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_25A486788(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3)
  {
    uint64_t v6 = result;
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v7 = 0;
    while (*(void *)(v6 + 16))
    {
      uint64_t result = sub_25A4096E8(*(void *)(a2 + 8 * v7 + 32));
      if ((v8 & 1) == 0) {
        goto LABEL_9;
      }
      ++v7;
      unint64_t v9 = *(void (**)(uint64_t *))(*(void *)(v6 + 56) + 16 * result);
      uint64_t v10 = a3;
      swift_retain();
      v9(&v10);
      uint64_t result = swift_release();
      if (v3 == v7)
      {
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
    }
    __break(1u);
LABEL_9:
    __break(1u);
  }
  return result;
}

uint64_t sub_25A486854@<X0>(void *a1@<X8>)
{
  return sub_25A4845A0(*(void **)(v1 + 16), **(void ***)(v1 + 24), *(long long **)(v1 + 32), a1);
}

uint64_t sub_25A486884(uint64_t a1)
{
  return sub_25A4868B0(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void))sub_25A3B7994);
}

uint64_t sub_25A4868B0(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void))
{
  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7]);
}

uint64_t sub_25A4868DC(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A419DF8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_25A48693C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A419DF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_25A4869A4@<X0>(uint64_t *a1@<X8>)
{
  return sub_25A483D58(**(void **)(v1 + 16), *(void *)(*(void *)(v1 + 16) + 8), a1);
}

uint64_t sub_25A4869B0()
{
  return sub_25A3CD780(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_25A4869C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A486460(a1, a2);
}

uint64_t static AsyncStream.empty.getter(uint64_t a1)
{
  uint64_t v2 = sub_25A50F2E0();
  MEMORY[0x270FA5388](v2);
  uint64_t v7 = a1;
  (*(void (**)(unsigned char *, void))(v4 + 104))(&v6[-v3], *MEMORY[0x263F8F580]);
  return sub_25A50F380();
}

uint64_t sub_25A486ADC()
{
  return sub_25A50F310();
}

uint64_t AsyncStream.filterAndMap<A>(transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v20 = a1;
  uint64_t v21 = a5;
  uint64_t v10 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getWitnessTable();
  uint64_t v13 = sub_25A5102A0();
  MEMORY[0x270FA5388](v13);
  sub_25A510290();
  uint64_t v19 = swift_allocBox();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v6, a3);
  uint64_t v14 = (void *)swift_allocObject();
  uint64_t v15 = *(void *)(a3 + 16);
  void v14[2] = v15;
  _OWORD v14[3] = a4;
  void v14[4] = v20;
  v14[5] = a2;
  swift_retain();
  sub_25A50F440();
  swift_release();
  sub_25A510270();
  uint64_t v16 = (void *)swift_allocObject();
  void v16[2] = v15;
  v16[3] = a4;
  v16[4] = v19;
  return sub_25A50F360();
}

uint64_t sub_25A486D48(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  a3(a2);
  uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
  return sub_25A487248(v4);
}

uint64_t sub_25A486DD4()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_25A486E0C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void (**)(uint64_t))(v2 + 32);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_25A3923B4;
  char v8 = (uint64_t (*)(uint64_t, uint64_t, void (*)(uint64_t)))((char *)&dword_26A419E00
                                                                              + dword_26A419E00);
  return v8(a1, a2, v6);
}

uint64_t sub_25A486EE8(uint64_t a1)
{
  v1[5] = a1;
  sub_25A50F370();
  swift_getWitnessTable();
  v1[6] = sub_25A510290();
  v1[7] = swift_projectBox();
  return MEMORY[0x270FA2498](sub_25A486FAC, 0, 0);
}

uint64_t sub_25A486FAC()
{
  swift_beginAccess();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[8] = v1;
  void *v1 = v0;
  v1[1] = sub_25A48705C;
  uint64_t v2 = v0[6];
  uint64_t v3 = v0[5];
  return MEMORY[0x270FA22E0](v3, v2);
}

uint64_t sub_25A48705C()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_endAccess();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_25A48715C()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_25A487194(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_25A38F608;
  return sub_25A486EE8(a1);
}

uint64_t sub_25A487248(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t Sequence<>.identified()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v10, v4, a1);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return IdentifiedSet.init<A>(_:)((uint64_t)v10, AssociatedTypeWitness, a1, a3, a2, a4);
}

uint64_t RandomAccessCollection<>.binarySearchForFirstElementIndexLessThanOrEqual(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a1;
  uint64_t v18 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v7 = (char *)&v15 - v6;
  if (sub_25A50F610()) {
    return 0;
  }
  sub_25A50F5E0();
  uint64_t result = sub_25A50F620();
  uint64_t v9 = v19[0] - 1;
  if (__OFSUB__(v19[0], 1)) {
    goto LABEL_19;
  }
  uint64_t v10 = v20;
  if (v9 >= v20)
  {
    uint64_t v16 = 0;
    uint64_t v11 = (void (**)(char *))(v5 + 16);
    uint64_t v12 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
    HIDWORD(v15) = 1;
    while (!__OFSUB__(v9, v10))
    {
      uint64_t v13 = v10 + (v9 - v10) / 2;
      if (__OFADD__(v10, (v9 - v10) / 2)) {
        goto LABEL_16;
      }
      void v19[4] = v10 + (v9 - v10) / 2;
      uint64_t v14 = sub_25A50F730();
      (*v11)(v7);
      ((void (*)(void *, void))v14)(v19, 0);
      LOBYTE(v14) = sub_25A50EAE0();
      uint64_t result = (*v12)(v7, AssociatedTypeWitness);
      if (v14)
      {
        uint64_t v9 = v13 - 1;
        if (__OFSUB__(v13, 1)) {
          goto LABEL_18;
        }
        uint64_t v10 = v20;
        if (v9 < v20) {
          return v16;
        }
      }
      else
      {
        uint64_t v10 = v13 + 1;
        if (__OFADD__(v13, 1)) {
          goto LABEL_17;
        }
        HIDWORD(v15) = 0;
        uint64_t v20 = v13 + 1;
        uint64_t v16 = v13;
        if (v9 < v10) {
          return v16;
        }
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    return result;
  }
  uint64_t v16 = 0;
  HIDWORD(v15) = 1;
  return v16;
}

uint64_t Collection.compacted<A>(type:)()
{
  return sub_25A50EF30();
}

uint64_t RandomAccessCollection.subscript.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v5 = &v14[-v4];
  sub_25A50F620();
  swift_getAssociatedConformanceWitness();
  char v6 = sub_25A50EAF0();
  (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, AssociatedTypeWitness);
  if (v6)
  {
    uint64_t v7 = (void (*)(unsigned char *, void))sub_25A50F730();
    uint64_t v9 = v8;
    uint64_t v10 = swift_getAssociatedTypeWitness();
    uint64_t v11 = *(void *)(v10 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(a1, v9, v10);
    v7(v14, 0);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(a1, 0, 1, v10);
  }
  else
  {
    uint64_t v13 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a1, 1, 1, v13);
  }
}

uint64_t Collection<>.uniqued()(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v1, a1);
  swift_getAssociatedTypeWitness();
  return sub_25A50F540();
}

double Collection<>.orderedUniqued()@<D0>(uint64_t a1@<X0>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v8, v3, a1);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return OrderedSet.init<A>(_:)((uint64_t)v8, AssociatedTypeWitness, a1, a2, a3);
}

double Sequence<>.orderedIdentified()@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v6, v2, a1);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return OrderedIdentifiedSet.init<A>(_:)((uint64_t)v6, AssociatedTypeWitness, a1, a2);
}

uint64_t sub_25A487B80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4159A8);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25A489C78(a1, (uint64_t)v9);
  uint64_t v10 = sub_25A50F2A0();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_25A391AF4((uint64_t)v9);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v12 = sub_25A50F220();
      uint64_t v14 = v13;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    sub_25A50F290();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v12 = 0;
  uint64_t v14 = 0;
LABEL_6:
  uint64_t v15 = *v4;
  uint64_t v16 = (void *)(v14 | v12);
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    uint64_t v16 = v19;
    void v19[2] = v12;
    unint64_t v19[3] = v14;
  }
  v18[1] = 1;
  void v18[2] = v16;
  void v18[3] = v15;
  swift_task_create();
  return swift_release();
}

uint64_t sub_25A487D54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_25A50FA40();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
}

uint64_t Collection.only.getter@<X0>(uint64_t a1@<X8>)
{
  if (sub_25A50F5F0() == 1)
  {
    return sub_25A50F670();
  }
  else
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56);
    return v4(a1, 1, 1, AssociatedTypeWitness);
  }
}

uint64_t LazySequence<>.compacted<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (void *)swift_allocObject();
  long long v7[2] = *(void *)(a2 + 16);
  void v7[3] = a3;
  void v7[4] = a4;
  swift_getWitnessTable();
  sub_25A510160();

  return swift_release();
}

uint64_t Collection<>.hasPrefix<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v25 = a6;
  uint64_t v10 = *(void *)(a4 + 8);
  uint64_t v11 = *(void *)(a5 + 8);
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  uint64_t v30 = v10;
  uint64_t v31 = v11;
  uint64_t v23 = v11;
  uint64_t v12 = sub_25A50FE10();
  uint64_t v26 = *(void *)(v12 - 8);
  uint64_t v27 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v24 = (char *)&v23 - v13;
  uint64_t v14 = sub_25A50F5F0();
  if (sub_25A50F5F0() >= v14)
  {
    uint64_t v16 = v24;
    uint64_t v17 = sub_25A510410();
    uint64_t v18 = MEMORY[0x270FA5388](v17);
    *(&v23 - 6) = a2;
    *(&v23 - 5) = a3;
    *(&v23 - 4) = a4;
    *(&v23 - 3) = a5;
    *(&v23 - 2) = v25;
    MEMORY[0x270FA5388](v18);
    *(&v23 - 8) = a2;
    *(&v23 - 7) = a3;
    *(&v23 - 6) = a4;
    *(&v23 - 5) = a5;
    *(&v23 - 4) = v19;
    *(&v23 - 3) = (uint64_t)sub_25A488208;
    *(&v23 - 2) = v20;
    uint64_t v21 = v27;
    swift_getWitnessTable();
    char v15 = sub_25A50EF20();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v16, v21);
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_25A488180()
{
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_25A488190@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_25A50FA40();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a2, a1, v4);
}

uint64_t sub_25A488208()
{
  return sub_25A50EBE0() & 1;
}

uint64_t sub_25A488278(uint64_t a1)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 56);
  swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return v3(a1, a1 + *(int *)(TupleTypeMetadata2 + 48)) & 1;
}

uint64_t Collection.asyncChildTaskMap<A>(width:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[10] = a6;
  v7[11] = v6;
  v7[8] = a4;
  v7[9] = a5;
  void v7[6] = a2;
  v7[7] = a3;
  v7[5] = a1;
  return MEMORY[0x270FA2498](sub_25A48832C, 0, 0);
}

uint64_t sub_25A48832C()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 40);
  long long v9 = *(_OWORD *)(v0 + 72);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *(void *)(v0 + 96) = sub_25A50F1E0();
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 104) = v5;
  long long v6 = *(_OWORD *)(v0 + 48);
  *(void *)(v5 + 16) = v2;
  *(_OWORD *)(v5 + 24) = v9;
  *(void *)(v5 + 40) = v1;
  *(_OWORD *)(v5 + 48) = v6;
  *(void *)(v5 + 64) = v3;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_25A488488;
  return MEMORY[0x270FA22B8](v0 + 16, TupleTypeMetadata2);
}

uint64_t sub_25A488488()
{
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_25A488764;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_25A4885A4;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_25A4885A4()
{
  uint64_t v1 = v0[12];
  uint64_t v2 = v0[9];
  uint64_t v3 = v0[10];
  uint64_t v4 = v0[8];
  v0[3] = v0[2];
  uint64_t v5 = (void *)swift_task_alloc();
  uint64_t v5[2] = v4;
  v5[3] = v2;
  v5[4] = v3;
  swift_getWitnessTable();
  uint64_t v6 = sub_25A50EFD0();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  v0[4] = v6;
  uint64_t v7 = (void *)swift_task_alloc();
  *uint64_t v7 = v4;
  v7[1] = v2;
  long long v7[2] = v3;
  uint64_t KeyPath = swift_getKeyPath();
  swift_task_dealloc();
  long long v9 = (void *)swift_task_alloc();
  _OWORD v9[2] = v4;
  void v9[3] = v3;
  v9[4] = KeyPath;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v12 = sub_25A39F5D4((void (*)(char *, char *))sub_25A489A30, (uint64_t)v9, v1, v2, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v11);
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(uint64_t))v0[1];
  return v13(v12);
}

uint64_t sub_25A488764()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_25A4887C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[10] = a8;
  v8[11] = v15;
  void v8[8] = a6;
  v8[9] = a7;
  void v8[6] = a4;
  v8[7] = a5;
  void v8[4] = a2;
  void v8[5] = a3;
  v8[3] = a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v8[12] = TupleTypeMetadata2;
  v8[13] = *(void *)(TupleTypeMetadata2 - 8);
  v8[14] = swift_task_alloc();
  uint64_t v12 = sub_25A50FA40();
  v8[15] = v12;
  unsigned char v8[16] = *(void *)(v12 - 8);
  v8[17] = swift_task_alloc();
  v8[18] = *(void *)(a8 - 8);
  v8[19] = swift_task_alloc();
  v8[20] = *(void *)(a7 - 8);
  v8[21] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_25A4889CC, 0, 0);
}

uint64_t sub_25A4889CC()
{
  uint64_t v2 = v0[20];
  uint64_t v1 = v0[21];
  uint64_t v4 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v5 = v0[5];
  uint64_t v6 = swift_allocObject();
  v0[22] = v6;
  *(void *)(v6 + 16) = 0;
  swift_getAssociatedTypeWitness();
  uint64_t v7 = swift_allocBox();
  v0[23] = v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v5, v3);
  uint64_t v8 = sub_25A50EEF0();
  if (v4 < 0)
  {
    __break(1u);
  }
  else
  {
    if (v0[8] && (sub_25A489174(v7, (char *)v6, v0[4], v0[6], v0[7], v0[9], v0[10], v0[11]) & 1) != 0)
    {
      uint64_t v12 = 0;
      do
        ++v12;
      while (v12 != v0[8] && (sub_25A489174(v7, (char *)v6, v0[4], v0[6], v0[7], v0[9], v0[10], v0[11]) & 1) != 0);
    }
    v0[2] = sub_25A50F120();
    uint64_t v13 = (void *)swift_task_alloc();
    v0[24] = v13;
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
    uint64_t v11 = sub_25A50F420();
    *uint64_t v13 = v0;
    v13[1] = sub_25A488BC0;
    uint64_t v8 = v0[17];
    uint64_t v9 = 0;
    uint64_t v10 = 0;
  }
  return MEMORY[0x270FA2048](v8, v9, v10, v11);
}

uint64_t sub_25A488BC0()
{
  *(void *)(*(void *)v1 + 200) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_25A488FC4;
  }
  else {
    uint64_t v2 = sub_25A488CD4;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_25A488CD4()
{
  uint64_t v1 = *(char **)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 96);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v0 + 104) + 48))(v1, 1, v2) == 1)
  {
    uint64_t v3 = *(void **)(v0 + 24);
    (*(void (**)(char *, void))(*(void *)(v0 + 128) + 8))(v1, *(void *)(v0 + 120));
    swift_release();
    swift_release();
    void *v3 = *(void *)(v0 + 16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
LABEL_5:
    return v4();
  }
  uint64_t v5 = *(void *)(v0 + 200);
  uint64_t v7 = *(void *)(v0 + 144);
  uint64_t v6 = *(void *)(v0 + 152);
  uint64_t v8 = *(void **)(v0 + 112);
  uint64_t v9 = *(void *)(v0 + 80);
  uint64_t v10 = *(void *)v1;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v6, &v1[*(int *)(v2 + 48)], v9);
  uint64_t v11 = (char *)v8 + *(int *)(v2 + 48);
  *uint64_t v8 = v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v11, v6, v9);
  sub_25A50F1E0();
  sub_25A50F180();
  sub_25A50F3F0();
  if (v5)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 144) + 8))(*(void *)(v0 + 152), *(void *)(v0 + 80));
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_5;
  }
  uint64_t v14 = *(void *)(v0 + 144);
  uint64_t v13 = *(void *)(v0 + 152);
  uint64_t v15 = *(void *)(v0 + 80);
  sub_25A489174(*(void *)(v0 + 184), *(char **)(v0 + 176), *(void *)(v0 + 32), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 72), v15, *(void *)(v0 + 88));
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  uint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v0 + 192) = v16;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v17 = sub_25A50F420();
  *uint64_t v16 = v0;
  v16[1] = sub_25A488BC0;
  uint64_t v18 = *(void *)(v0 + 136);
  return MEMORY[0x270FA2048](v18, 0, 0, v17);
}

uint64_t sub_25A488FC4()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_25A489084(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[5];
  uint64_t v9 = v2[6];
  uint64_t v10 = v2[7];
  uint64_t v11 = v2[8];
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v12;
  *uint64_t v12 = v3;
  v12[1] = sub_25A3923B4;
  return sub_25A4887C8(a1, a2, v8, v9, v10, v11, v6, v7);
}

uint64_t sub_25A489174(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v39 = a5;
  uint64_t v40 = a7;
  uint64_t v38 = a4;
  uint64_t v41 = a3;
  uint64_t v36 = a2;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4159A8);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v43 = (uint64_t)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = a8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v34 = sub_25A50FA40();
  uint64_t v13 = *(void *)(v34 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v34);
  uint64_t v16 = (char *)&v34 - v15;
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  uint64_t v19 = MEMORY[0x270FA5388](v14);
  uint64_t v35 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v42 = (char *)&v34 - v20;
  swift_getAssociatedTypeWitness();
  swift_projectBox();
  swift_beginAccess();
  swift_getAssociatedConformanceWitness();
  sub_25A50FAF0();
  swift_endAccess();
  int v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, AssociatedTypeWitness);
  int v22 = v21;
  if (v21 == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v34);
    return v22 != 1;
  }
  LODWORD(v34) = v21;
  uint64_t v23 = v36 + 16;
  uint64_t v36 = *(char **)(v17 + 32);
  uint64_t v24 = v42;
  ((void (*)(char *, char *, uint64_t))v36)(v42, v16, AssociatedTypeWitness);
  uint64_t v25 = sub_25A50F2A0();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v43, 1, 1, v25);
  swift_beginAccess();
  uint64_t v26 = *v23;
  uint64_t v27 = v35;
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v35, v24, AssociatedTypeWitness);
  unint64_t v28 = (*(unsigned __int8 *)(v17 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  uint64_t v29 = (void *)swift_allocObject();
  _OWORD v29[2] = 0;
  void v29[3] = 0;
  uint64_t v30 = v40;
  v29[4] = a6;
  v29[5] = v30;
  v29[6] = v37;
  v29[7] = v26;
  uint64_t v31 = v39;
  v29[8] = v38;
  v29[9] = v31;
  ((void (*)(char *, char *, uint64_t))v36)((char *)v29 + v28, v27, AssociatedTypeWitness);
  swift_retain();
  swift_getTupleTypeMetadata2();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  sub_25A50F420();
  uint64_t v32 = v43;
  sub_25A487B80(v43, (uint64_t)&unk_26A419E40, (uint64_t)v29);
  sub_25A391AF4(v32);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v42, AssociatedTypeWitness);
  uint64_t result = swift_beginAccess();
  if (!__OFADD__(*v23, 1))
  {
    ++*v23;
    int v22 = v34;
    return v22 != 1;
  }
  __break(1u);
  return result;
}

uint64_t sub_25A4895F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void v7[6] = a7;
  v7[7] = v9;
  void v7[4] = a5;
  v7[5] = a6;
  long long v7[2] = a1;
  void v7[3] = a4;
  return MEMORY[0x270FA2498](sub_25A489620, 0, 0);
}

uint64_t sub_25A489620()
{
  sub_25A50F3F0();
  uint64_t v2 = v0[3];
  uint64_t v1 = (int *)v0[4];
  uint64_t v3 = (void *)v0[2];
  uint64_t v4 = (char *)v3 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  void *v3 = v2;
  uint64_t v8 = (uint64_t (*)(char *, uint64_t))((char *)v1 + *v1);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[8] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_25A48977C;
  uint64_t v6 = v0[6];
  return v8(v4, v6);
}

uint64_t sub_25A48977C()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_25A489870(uint64_t a1, void *a2)
{
  uint64_t v2 = (uint64_t *)(*a2 + *MEMORY[0x263F8EA20]);
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](a1);
  uint64_t v7 = (uint64_t *)((char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = (char *)MEMORY[0x270FA5388](v5);
  uint64_t v10 = *(int *)(v3 + 48);
  uint64_t v11 = (char *)&v18 + v10 - v9;
  uint64_t v12 = *(void *)v8;
  *(uint64_t *)((char *)&v18 - v9) = *(void *)v8;
  uint64_t v14 = *(void *)(v13 + 8);
  uint64_t v15 = *(void *)(v14 - 8);
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v11, &v8[v10], v14);
  uint64_t v16 = (char *)v7 + *(int *)(v3 + 48);
  *uint64_t v7 = v12;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v16, v11, v14);
  swift_getAtKeyPath();
  return (*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_25A489A30(uint64_t a1)
{
  return sub_25A489870(a1, *(void **)(v1 + 32));
}

uint64_t sub_25A489A54()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_25A489A64()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 80) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, AssociatedTypeWitness);

  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t sub_25A489B54(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 40);
  uint64_t v5 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v6 = *(void *)(v1 + 56);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v5 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  uint64_t v8 = swift_task_alloc();
  long long v9 = *(_OWORD *)(v1 + 64);
  *(void *)(v2 + 16) = v8;
  *(void *)uint64_t v8 = v2;
  *(void *)(v8 + 8) = sub_25A38F608;
  *(void *)(v8 + 48) = v7;
  *(void *)(v8 + 56) = v4;
  *(_OWORD *)(v8 + 32) = v9;
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = v6;
  return MEMORY[0x270FA2498](sub_25A489620, 0, 0);
}

uint64_t sub_25A489C78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4159A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t OS_os_log.logLargeString(_:publicPreamble:linePrefix:type:)(uint64_t (*a1)(void), uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, os_log_type_t a7)
{
  uint64_t result = os_log_type_enabled(v8, a7);
  if (!result) {
    return result;
  }
  uint64_t v69 = a1();
  unint64_t v16 = v15;
  if ((a4 & 0x1000000000000000) != 0) {
    goto LABEL_103;
  }
  if ((a4 & 0x2000000000000000) != 0) {
    uint64_t v17 = HIBYTE(a4) & 0xF;
  }
  else {
    uint64_t v17 = a3 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v18 = v17 + 2;
  if (__OFADD__(v17, 2)) {
    goto LABEL_105;
  }
LABEL_7:
  uint64_t v7 = HIBYTE(v16) & 0xF;
  if ((v16 & 0x1000000000000000) != 0)
  {
LABEL_106:
    uint64_t result = sub_25A50EDD0();
    BOOL v19 = __OFADD__(v18, result);
    uint64_t v20 = v18 + result;
    if (!v19) {
      goto LABEL_12;
    }
LABEL_108:
    __break(1u);
    goto LABEL_109;
  }
  if ((v16 & 0x2000000000000000) != 0) {
    uint64_t result = HIBYTE(v16) & 0xF;
  }
  else {
    uint64_t result = v69 & 0xFFFFFFFFFFFFLL;
  }
  BOOL v19 = __OFADD__(v18, result);
  uint64_t v20 = v18 + result;
  if (v19) {
    goto LABEL_108;
  }
LABEL_12:
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417468);
  if (v20 >= 1021)
  {
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_25A5119F0;
    *(void *)(v21 + 56) = MEMORY[0x263F8D310];
    unint64_t v64 = sub_25A3DF94C();
    *(void *)(v21 + 64) = v64;
    *(void *)(v21 + 32) = a3;
    *(void *)(v21 + 40) = a4;
    swift_bridgeObjectRetain();
    sub_25A50E540();
    swift_bridgeObjectRelease();
    if (a6)
    {
      swift_bridgeObjectRetain();
      sub_25A50EDA0();
      uint64_t v23 = a5;
      unint64_t v22 = a6;
    }
    else
    {
      uint64_t v23 = 0;
      unint64_t v22 = 0xE000000000000000;
    }
    a3 = v69;
    unint64_t v65 = v22;
    uint64_t result = sub_25A50ED50();
    uint64_t v27 = 1020 - result;
    if (!__OFSUB__(1020, result))
    {
      uint64_t v28 = 990 - result;
      if (!__OFSUB__(v27, 30))
      {
        if ((v16 & 0x1000000000000000) != 0)
        {
          uint64_t result = sub_25A50EDD0();
          if (!v28) {
            goto LABEL_34;
          }
        }
        else
        {
          if ((v16 & 0x2000000000000000) == 0)
          {
            uint64_t result = v69 & 0xFFFFFFFFFFFFLL;
            if (v27 == 30) {
              goto LABEL_34;
            }
            goto LABEL_25;
          }
          uint64_t result = v7;
          if (v27 == 30)
          {
LABEL_34:
            __break(1u);
            goto LABEL_35;
          }
        }
LABEL_25:
        if (result == 0x8000000000000000 && v28 == -1) {
          goto LABEL_112;
        }
        uint64_t v29 = result / v28;
        if (!(result % v28) || (BOOL v19 = __OFADD__(v29, 1), ++v29, !v19))
        {
          uint64_t v62 = v29;
          uint64_t v63 = v23;
          if ((v16 & 0x1000000000000000) != 0)
          {
            uint64_t v30 = sub_25A50EDD0();
          }
          else
          {
            if ((v16 & 0x2000000000000000) != 0)
            {
LABEL_35:
              uint64_t v30 = v7;
              goto LABEL_36;
            }
            uint64_t v30 = v69 & 0xFFFFFFFFFFFFLL;
          }
LABEL_36:
          BOOL v31 = v30 >= 0;
          if (v28 > 0) {
            BOOL v31 = v30 < 1;
          }
          if (v31)
          {
LABEL_39:
            swift_bridgeObjectRelease();
            goto LABEL_40;
          }
          a5 = 0;
          unint64_t v32 = 0;
          if ((v16 & 0x2000000000000000) != 0) {
            unint64_t v33 = v7;
          }
          else {
            unint64_t v33 = v69 & 0xFFFFFFFFFFFFLL;
          }
          uint64_t v34 = 7;
          uint64_t v35 = 11;
          if ((v69 & 0x800000000000000) != 0) {
            uint64_t v35 = 7;
          }
          if ((v16 & 0x1000000000000000) != 0) {
            uint64_t v34 = v35;
          }
          unint64_t v68 = v34 | (v33 << 16);
          uint64_t v66 = v34 & 0xC;
          unint64_t v67 = v33;
          uint64_t v61 = v30;
          while (1)
          {
            if (__OFADD__(v32, v28)) {
              int64_t v40 = ((uint64_t)(v32 + v28) >> 63) ^ 0x8000000000000000;
            }
            else {
              int64_t v40 = v32 + v28;
            }
            uint64_t v7 = a5 + 1;
            if (__OFADD__(a5, 1))
            {
LABEL_97:
              __break(1u);
LABEL_98:
              __break(1u);
LABEL_99:
              __break(1u);
LABEL_100:
              __break(1u);
LABEL_101:
              __break(1u);
LABEL_102:
              __break(1u);
LABEL_103:
              uint64_t v60 = sub_25A50EDD0();
              uint64_t v18 = v60 + 2;
              if (!__OFADD__(v60, 2)) {
                goto LABEL_7;
              }
LABEL_105:
              __break(1u);
              goto LABEL_106;
            }
            if ((v16 & 0x1000000000000000) != 0)
            {
              uint64_t v41 = sub_25A50EDF0();
              if (v42) {
                goto LABEL_39;
              }
              a4 = v41;
            }
            else
            {
              if ((v32 & 0x8000000000000000) != 0) {
                goto LABEL_95;
              }
              if (v33 < v32) {
                goto LABEL_39;
              }
              a4 = (v32 << 16) | 4;
            }
            a6 = a4 & 0xC;
            a3 = a4;
            uint64_t v43 = 4 << (((v16 & 0x1000000000000000) == 0) | ((v69 & 0x800000000000000uLL) >> 59));
            if (a6 == v43)
            {
              uint64_t v46 = sub_25A48B718(a4, v69, v16);
              uint64_t v43 = 4 << (((v16 & 0x1000000000000000) == 0) | ((v69 & 0x800000000000000uLL) >> 59));
              a3 = v46;
            }
            unint64_t v44 = v68;
            if (v66 == v43)
            {
              uint64_t v47 = sub_25A48B718(v68, v69, v16);
              uint64_t v43 = 4 << (((v16 & 0x1000000000000000) == 0) | ((v69 & 0x800000000000000uLL) >> 59));
              unint64_t v44 = v47;
              if ((v16 & 0x1000000000000000) == 0)
              {
LABEL_69:
                uint64_t v45 = (v44 >> 16) - (a3 >> 16);
                a3 = v69;
                goto LABEL_74;
              }
            }
            else if ((v16 & 0x1000000000000000) == 0)
            {
              goto LABEL_69;
            }
            if (v33 < a3 >> 16) {
              goto LABEL_98;
            }
            if (v33 < v44 >> 16) {
              goto LABEL_99;
            }
            a3 = v69;
            uint64_t v45 = sub_25A50EE10();
            uint64_t v43 = 4 << (((v16 & 0x1000000000000000) == 0) | ((v69 & 0x800000000000000uLL) >> 59));
LABEL_74:
            if (v45 >= v28) {
              uint64_t v48 = v28;
            }
            else {
              uint64_t v48 = v45;
            }
            unint64_t v49 = a4;
            if (a6 == v43)
            {
              unint64_t v49 = sub_25A48B718(a4, a3, v16);
              if ((v16 & 0x1000000000000000) != 0)
              {
LABEL_90:
                sub_25A50EDF0();
                if (v53) {
                  goto LABEL_39;
                }
                goto LABEL_91;
              }
            }
            else if ((v16 & 0x1000000000000000) != 0)
            {
              goto LABEL_90;
            }
            unint64_t v50 = v49 >> 16;
            int64_t v51 = (v49 >> 16) + v48;
            if (__OFADD__(v49 >> 16, v48)) {
              goto LABEL_100;
            }
            if (v48 < 0)
            {
              unint64_t v52 = v67;
              if (v50 >= v67 && v51 < (uint64_t)v67) {
                goto LABEL_39;
              }
            }
            else
            {
              unint64_t v52 = v67;
              if (v67 >= v50 && (uint64_t)v67 < v51) {
                goto LABEL_39;
              }
            }
            if (v51 < 0) {
              goto LABEL_101;
            }
            if (v52 < v51) {
              goto LABEL_102;
            }
LABEL_91:
            uint64_t v54 = sub_25A50ED40();
            if ((v55 & 1) == 0)
            {
              a4 = v54;
              uint64_t v56 = sub_25A50ED40();
              if ((v57 & 1) == 0)
              {
                unint64_t v33 = v56;
                a3 = swift_allocObject();
                *(_OWORD *)(a3 + 16) = xmmword_25A5144E0;
                *(void *)(a3 + 56) = MEMORY[0x263F8D310];
                *(void *)(a3 + 64) = v64;
                *(void *)(a3 + 32) = v63;
                *(void *)(a3 + 40) = v65;
                uint64_t v58 = MEMORY[0x263F8D6C8];
                *(void *)(a3 + 96) = MEMORY[0x263F8D6C8];
                uint64_t v59 = MEMORY[0x263F8D750];
                *(void *)(a3 + 72) = v7;
                *(void *)(a3 + 136) = v58;
                *(void *)(a3 + 144) = v59;
                *(void *)(a3 + 104) = v59;
                *(void *)(a3 + 112) = v62;
                if (v33 >> 14 < a4 >> 14)
                {
                  __break(1u);
LABEL_95:
                  if (!v33) {
                    goto LABEL_39;
                  }
                  __break(1u);
                  goto LABEL_97;
                }
                swift_bridgeObjectRetain();
                a6 = v69;
                uint64_t v36 = sub_25A50EEE0();
                a4 = MEMORY[0x26113CCD0](v36);
                uint64_t v38 = v37;
                swift_bridgeObjectRelease();
                *(void *)(a3 + 176) = MEMORY[0x263F8D310];
                *(void *)(a3 + 184) = v64;
                uint64_t v30 = v61;
                *(void *)(a3 + 152) = a4;
                *(void *)(a3 + 160) = v38;
                sub_25A50E540();
                a3 = v69;
                swift_bridgeObjectRelease();
              }
            }
            BOOL v39 = v30 >= v40;
            if (v28 > 0) {
              BOOL v39 = v40 >= v30;
            }
            ++a5;
            unint64_t v32 = v40;
            unint64_t v33 = v67;
            if (v39) {
              goto LABEL_39;
            }
          }
        }
LABEL_111:
        __break(1u);
LABEL_112:
        __break(1u);
        return result;
      }
LABEL_110:
      __break(1u);
      goto LABEL_111;
    }
LABEL_109:
    __break(1u);
    goto LABEL_110;
  }
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_25A511AD0;
  uint64_t v25 = MEMORY[0x263F8D310];
  *(void *)(v24 + 56) = MEMORY[0x263F8D310];
  unint64_t v26 = sub_25A3DF94C();
  *(void *)(v24 + 32) = a3;
  *(void *)(v24 + 40) = a4;
  *(void *)(v24 + 96) = v25;
  *(void *)(v24 + 104) = v26;
  *(void *)(v24 + 64) = v26;
  *(void *)(v24 + 72) = 2618;
  *(void *)(v24 + 80) = 0xE200000000000000;
  *(void *)(v24 + 136) = v25;
  *(void *)(v24 + 144) = v26;
  *(void *)(v24 + 112) = v69;
  *(void *)(v24 + 120) = v16;
  swift_bridgeObjectRetain();
  sub_25A50E540();
LABEL_40:

  return swift_bridgeObjectRelease();
}

uint64_t Optional.log.getter(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](a1);
  uint64_t v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v8 + 16))(v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1) {
    return 7104878;
  }
  (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v5, v7, v1);
  v11[0] = 0;
  v11[1] = 0xE000000000000000;
  sub_25A510310();
  uint64_t v9 = v11[0];
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  return v9;
}

uint64_t static Logging.describe<A>(ref:)(uint64_t a1)
{
  if (a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A417468);
    uint64_t v1 = swift_allocObject();
    *(_OWORD *)(v1 + 16) = xmmword_25A511AC0;
    swift_unknownObjectRetain();
    uint64_t v2 = sub_25A5105D0();
    uint64_t v4 = v3;
    *(void *)(v1 + 56) = MEMORY[0x263F8D310];
    *(void *)(v1 + 64) = sub_25A3DF94C();
    *(void *)(v1 + 32) = v2;
    *(void *)(v1 + 40) = v4;
    uint64_t v5 = sub_25A50EBD0();
    uint64_t v6 = MEMORY[0x263F8D750];
    *(void *)(v1 + 96) = MEMORY[0x263F8D6C8];
    *(void *)(v1 + 104) = v6;
    *(void *)(v1 + 72) = v5;
    uint64_t v7 = sub_25A50EC50();
    swift_unknownObjectRelease();
    return v7;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A417468);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_25A5119F0;
    uint64_t v10 = sub_25A5105D0();
    uint64_t v12 = v11;
    *(void *)(v9 + 56) = MEMORY[0x263F8D310];
    *(void *)(v9 + 64) = sub_25A3DF94C();
    *(void *)(v9 + 32) = v10;
    *(void *)(v9 + 40) = v12;
    return sub_25A50EC50();
  }
}

uint64_t static Logging.describe<A>(sequence:)(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v6 = (char *)&v23 - v5;
  uint64_t v7 = sub_25A50FA40();
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v10 = (char *)&v23 - v9;
  uint64_t v11 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v24 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  unint64_t v16 = (char *)&v23 - v15;
  uint64_t v31 = 91;
  unint64_t v32 = 0xE100000000000000;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v28, a2);
  sub_25A50EEF0();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_25A50FAF0();
  uint64_t v18 = v4;
  BOOL v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
  if (v19(v10, 1, AssociatedTypeWitness) != 1)
  {
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
    uint64_t v27 = AssociatedConformanceWitness;
    uint64_t v28 = v18 + 32;
    uint64_t v25 = (void (**)(char *, uint64_t))(v18 + 8);
    unint64_t v26 = v20;
    do
    {
      v26(v6, v10, AssociatedTypeWitness);
      uint64_t v29 = 0;
      unint64_t v30 = 0xE000000000000000;
      sub_25A510310();
      v21._uint64_t countAndFlagsBits = 538976288;
      v21._object = (void *)0xE400000000000000;
      String.prefixingEachLine(with:startingOnLine:)(v21, 0);
      swift_bridgeObjectRelease();
      uint64_t v29 = 10;
      unint64_t v30 = 0xE100000000000000;
      sub_25A50EDA0();
      swift_bridgeObjectRelease();
      sub_25A50EDA0();
      sub_25A50EDA0();
      swift_bridgeObjectRelease();
      (*v25)(v6, AssociatedTypeWitness);
      sub_25A50FAF0();
    }
    while (v19(v10, 1, AssociatedTypeWitness) != 1);
  }
  (*(void (**)(char *, uint64_t))(v24 + 8))(v16, v14);
  uint64_t v29 = v31;
  unint64_t v30 = v32;
  swift_bridgeObjectRetain();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  return v29;
}

unint64_t static OS_os_log.Constants.ultravioletLogSubsystem.getter()
{
  return 0xD000000000000015;
}

uint64_t static OS_os_log.Constants.messageSizeLimit.getter()
{
  return 1020;
}

uint64_t static OS_os_log.Constants.Categories.uv.getter()
{
  return 30325;
}

uint64_t static OS_os_log.Constants.Categories.parsing.getter()
{
  return 0x676E6973726150;
}

uint64_t static OS_os_log.Constants.Categories.metadata.getter()
{
  return 0x617461646174654DLL;
}

uint64_t static OS_os_log.Constants.Categories.previews.getter()
{
  return 0x7377656976657250;
}

uint64_t static OS_os_log.Constants.Categories.devices.getter()
{
  return 0x73656369766544;
}

uint64_t static OS_os_log.Constants.Categories.editorContext.getter()
{
  return 0x4320726F74696445;
}

uint64_t static OS_os_log.Constants.Categories.documentManagement.getter()
{
  return 0x746E656D75636F44;
}

uint64_t static OS_os_log.Constants.Categories.editors.getter()
{
  return 0x73726F74696445;
}

uint64_t static OS_os_log.Constants.Categories.connectivity.getter()
{
  return 0x697463656E6E6F43;
}

uint64_t static OS_os_log.Constants.Categories.canvas.getter()
{
  return 0x7361766E6143;
}

uint64_t static OS_os_log.Constants.Categories.analytics.getter()
{
  return 0x636974796C616E41;
}

uint64_t static OS_os_log.Constants.Categories.tests.getter()
{
  return 0x7374736554;
}

uint64_t static OS_os_log.Constants.Categories.symbolication.getter()
{
  return 0x63696C6F626D7953;
}

uint64_t static OS_os_log.Constants.Categories.stressTests.getter()
{
  return 0x5420737365727453;
}

uint64_t static OS_os_log.Constants.Categories.jit.getter()
{
  return 5523786;
}

uint64_t static OS_os_log.Constants.Categories.timingCounter.getter()
{
  return 0x6F43676E696D6954;
}

uint64_t static OS_os_log.Constants.Categories.ipc.getter()
{
  return 4411465;
}

uint64_t static OS_os_log.Constants.Categories.canvasControls.getter()
{
  return 0x43207361766E6143;
}

uint64_t static OS_os_log.Constants.Categories.signposts.getter()
{
  return 0x74736F706E676953;
}

uint64_t static OS_os_log.Constants.Categories.llm.getter()
{
  return 5065804;
}

unint64_t static OS_os_log.Constants.Categories.registryDetection.getter()
{
  return 0xD000000000000012;
}

uint64_t sub_25A48AD40()
{
  sub_25A48B7C4();
  uint64_t result = sub_25A50FA10();
  qword_26A419E48 = result;
  return result;
}

id static OS_os_log.previews.getter()
{
  return sub_25A48AFF0(&qword_26A415580, (void **)&qword_26A419E48);
}

uint64_t sub_25A48ADC4()
{
  sub_25A48B7C4();
  uint64_t result = sub_25A50FA10();
  qword_26A419E50 = result;
  return result;
}

id static OS_os_log.editorContext.getter()
{
  return sub_25A48AFF0(&qword_26A415588, (void **)&qword_26A419E50);
}

uint64_t sub_25A48AE54()
{
  sub_25A48B7C4();
  uint64_t result = sub_25A50FA10();
  qword_26A419E58 = result;
  return result;
}

id static OS_os_log.tests.getter()
{
  return sub_25A48AFF0(&qword_26A415590, (void **)&qword_26A419E58);
}

uint64_t sub_25A48AED4()
{
  sub_25A48B7C4();
  uint64_t result = sub_25A50FA10();
  qword_26A419E60 = result;
  return result;
}

id static OS_os_log.connectivity.getter()
{
  return sub_25A48AFF0(&qword_26A415598, (void **)&qword_26A419E60);
}

uint64_t sub_25A48AF60()
{
  sub_25A48B7C4();
  uint64_t result = sub_25A50FA10();
  qword_26A419E68 = result;
  return result;
}

id static OS_os_log.timingCounter.getter()
{
  return sub_25A48AFF0(&qword_26A4155A0, (void **)&qword_26A419E68);
}

id sub_25A48AFF0(void *a1, void **a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = *a2;

  return v3;
}

uint64_t sub_25A48B03C(uint64_t a1)
{
  return sub_25A48B5E4(a1, qword_26B3292F8);
}

uint64_t static Logger.uv.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_25A48B680(&qword_26B329310, (uint64_t)qword_26B3292F8, a1);
}

uint64_t sub_25A48B074(uint64_t a1)
{
  return sub_25A48B5E4(a1, qword_26A419E70);
}

uint64_t static Logger.parsing.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_25A48B680(&qword_26A4155A8, (uint64_t)qword_26A419E70, a1);
}

uint64_t sub_25A48B0B8(uint64_t a1)
{
  return sub_25A48B5E4(a1, qword_26A419E88);
}

uint64_t static Logger.metadata.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_25A48B680(&qword_26A4155B0, (uint64_t)qword_26A419E88, a1);
}

uint64_t sub_25A48B0FC(uint64_t a1)
{
  return sub_25A48B5E4(a1, qword_26A419EA0);
}

uint64_t static Logger.previews.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_25A48B680(&qword_26A4155B8, (uint64_t)qword_26A419EA0, a1);
}

uint64_t sub_25A48B140(uint64_t a1)
{
  return sub_25A48B5E4(a1, qword_26A419EB8);
}

uint64_t static Logger.devices.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_25A48B680(&qword_26A4155C0, (uint64_t)qword_26A419EB8, a1);
}

uint64_t sub_25A48B184(uint64_t a1)
{
  return sub_25A48B5E4(a1, qword_26A419ED0);
}

uint64_t static Logger.editorContext.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_25A48B680(&qword_26A4155C8, (uint64_t)qword_26A419ED0, a1);
}

uint64_t sub_25A48B1D4(uint64_t a1)
{
  return sub_25A48B5E4(a1, qword_26A419EE8);
}

uint64_t static Logger.canvasControls.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_25A48B680(&qword_26A4155D0, (uint64_t)qword_26A419EE8, a1);
}

uint64_t sub_25A48B224(uint64_t a1)
{
  return sub_25A48B5E4(a1, qword_26A419F00);
}

uint64_t static Logger.documentManagement.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_25A48B680(&qword_26A4155D8, (uint64_t)qword_26A419F00, a1);
}

uint64_t sub_25A48B268(uint64_t a1)
{
  return sub_25A48B5E4(a1, qword_26A419F18);
}

uint64_t static Logger.editors.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_25A48B680(&qword_26A4155E0, (uint64_t)qword_26A419F18, a1);
}

uint64_t sub_25A48B2AC(uint64_t a1)
{
  return sub_25A48B5E4(a1, qword_26A419F30);
}

uint64_t static Logger.stressTests.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_25A48B680(&qword_26A4155E8, (uint64_t)qword_26A419F30, a1);
}

uint64_t sub_25A48B2F8(uint64_t a1)
{
  return sub_25A48B5E4(a1, qword_26A419F48);
}

uint64_t static Logger.connectivity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_25A48B680(&qword_26A4155F0, (uint64_t)qword_26A419F48, a1);
}

uint64_t sub_25A48B344(uint64_t a1)
{
  return sub_25A48B5E4(a1, qword_26A419F60);
}

uint64_t static Logger.canvas.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_25A48B680(&qword_26A4155F8, (uint64_t)qword_26A419F60, a1);
}

uint64_t sub_25A48B384(uint64_t a1)
{
  return sub_25A48B5E4(a1, qword_26A419F78);
}

uint64_t static Logger.analytics.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_25A48B680(&qword_26A415600, (uint64_t)qword_26A419F78, a1);
}

uint64_t sub_25A48B3CC(uint64_t a1)
{
  return sub_25A48B5E4(a1, qword_26A419F90);
}

uint64_t static Logger.tests.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_25A48B680(&qword_26A415608, (uint64_t)qword_26A419F90, a1);
}

uint64_t sub_25A48B40C(uint64_t a1)
{
  return sub_25A48B5E4(a1, qword_26A419FA8);
}

uint64_t static Logger.symbolication.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_25A48B680(&qword_26A415610, (uint64_t)qword_26A419FA8, a1);
}

uint64_t sub_25A48B45C(uint64_t a1)
{
  return sub_25A48B5E4(a1, qword_26A419FC0);
}

uint64_t static Logger.jit.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_25A48B680(&qword_26A415618, (uint64_t)qword_26A419FC0, a1);
}

uint64_t sub_25A48B498()
{
  uint64_t v0 = sub_25A50E5E0();
  __swift_allocate_value_buffer(v0, qword_26A419FD8);
  __swift_project_value_buffer(v0, (uint64_t)qword_26A419FD8);
  if (qword_26A4155A0 != -1) {
    swift_once();
  }
  id v1 = (id)qword_26A419E68;
  return sub_25A50E5F0();
}

uint64_t static Logger.timingCounter.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_25A48B680(&qword_26A415620, (uint64_t)qword_26A419FD8, a1);
}

uint64_t sub_25A48B548(uint64_t a1)
{
  return sub_25A48B5E4(a1, qword_26A419FF0);
}

uint64_t static Logger.llm.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_25A48B680(&qword_26A415628, (uint64_t)qword_26A419FF0, a1);
}

uint64_t sub_25A48B584(uint64_t a1)
{
  return sub_25A48B5E4(a1, qword_26A41A008);
}

uint64_t static Logger.ipc.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_25A48B680(&qword_26A415630, (uint64_t)qword_26A41A008, a1);
}

uint64_t sub_25A48B5C0(uint64_t a1)
{
  return sub_25A48B5E4(a1, qword_26A41A020);
}

uint64_t sub_25A48B5E4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_25A50E5E0();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return sub_25A50E5D0();
}

uint64_t static Logger.registryDetection.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_25A48B680(&qword_26A415638, (uint64_t)qword_26A41A020, a1);
}

uint64_t sub_25A48B680@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_25A50E5E0();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v7(a3, v6, v5);
}

uint64_t sub_25A48B718(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = sub_25A50EE70();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = MEMORY[0x26113CE00](15, a1 >> 16);
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

ValueMetadata *type metadata accessor for Logging()
{
  return &type metadata for Logging;
}

ValueMetadata *type metadata accessor for OS_os_log.Constants()
{
  return &type metadata for OS_os_log.Constants;
}

ValueMetadata *type metadata accessor for OS_os_log.Constants.Categories()
{
  return &type metadata for OS_os_log.Constants.Categories;
}

unint64_t sub_25A48B7C4()
{
  unint64_t result = qword_26A41A038[0];
  if (!qword_26A41A038[0])
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, qword_26A41A038);
  }
  return result;
}

uint64_t sub_25A48B804(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, os_log_type_t a5, os_log_t oslog)
{
  uint64_t result = os_log_type_enabled(oslog, a5);
  if (!result) {
    return result;
  }
  uint64_t v66 = CommandLineToolInvocation.commandLineDescription.getter();
  unint64_t v13 = v12;
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_103;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v14 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v14 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v15 = v14 + 2;
  if (__OFADD__(v14, 2)) {
    goto LABEL_105;
  }
LABEL_7:
  uint64_t v6 = HIBYTE(v13) & 0xF;
  if ((v13 & 0x1000000000000000) != 0)
  {
LABEL_106:
    uint64_t result = sub_25A50EDD0();
    BOOL v16 = __OFADD__(v15, result);
    uint64_t v17 = v15 + result;
    if (!v16) {
      goto LABEL_12;
    }
LABEL_108:
    __break(1u);
    goto LABEL_109;
  }
  if ((v13 & 0x2000000000000000) != 0) {
    uint64_t result = HIBYTE(v13) & 0xF;
  }
  else {
    uint64_t result = v66 & 0xFFFFFFFFFFFFLL;
  }
  BOOL v16 = __OFADD__(v15, result);
  uint64_t v17 = v15 + result;
  if (v16) {
    goto LABEL_108;
  }
LABEL_12:
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417468);
  if (v17 >= 1021)
  {
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_25A5119F0;
    *(void *)(v18 + 56) = MEMORY[0x263F8D310];
    unint64_t v61 = sub_25A3DF94C();
    *(void *)(v18 + 64) = v61;
    *(void *)(v18 + 32) = a1;
    *(void *)(v18 + 40) = a2;
    swift_bridgeObjectRetain();
    sub_25A50E540();
    swift_bridgeObjectRelease();
    if (a4)
    {
      swift_bridgeObjectRetain();
      sub_25A50EDA0();
      unint64_t v19 = a4;
      uint64_t v20 = a3;
    }
    else
    {
      uint64_t v20 = 0;
      unint64_t v19 = 0xE000000000000000;
    }
    a1 = v66;
    unint64_t v62 = v19;
    uint64_t result = sub_25A50ED50();
    uint64_t v24 = 1020 - result;
    if (!__OFSUB__(1020, result))
    {
      uint64_t v25 = 990 - result;
      if (!__OFSUB__(v24, 30))
      {
        if ((v13 & 0x1000000000000000) != 0)
        {
          uint64_t result = sub_25A50EDD0();
          if (!v25) {
            goto LABEL_34;
          }
        }
        else
        {
          if ((v13 & 0x2000000000000000) == 0)
          {
            uint64_t result = v66 & 0xFFFFFFFFFFFFLL;
            if (v24 == 30) {
              goto LABEL_34;
            }
            goto LABEL_25;
          }
          uint64_t result = v6;
          if (v24 == 30)
          {
LABEL_34:
            __break(1u);
            goto LABEL_35;
          }
        }
LABEL_25:
        if (result == 0x8000000000000000 && v25 == -1) {
          goto LABEL_112;
        }
        uint64_t v26 = result / v25;
        if (!(result % v25) || (BOOL v16 = __OFADD__(v26, 1), ++v26, !v16))
        {
          uint64_t v59 = v26;
          uint64_t v60 = v20;
          if ((v13 & 0x1000000000000000) != 0)
          {
            uint64_t v27 = sub_25A50EDD0();
          }
          else
          {
            if ((v13 & 0x2000000000000000) != 0)
            {
LABEL_35:
              uint64_t v27 = v6;
              goto LABEL_36;
            }
            uint64_t v27 = v66 & 0xFFFFFFFFFFFFLL;
          }
LABEL_36:
          BOOL v28 = v27 >= 0;
          if (v25 > 0) {
            BOOL v28 = v27 < 1;
          }
          if (v28)
          {
LABEL_39:
            swift_bridgeObjectRelease();
            goto LABEL_40;
          }
          a3 = 0;
          unint64_t v29 = 0;
          if ((v13 & 0x2000000000000000) != 0) {
            unint64_t v30 = v6;
          }
          else {
            unint64_t v30 = v66 & 0xFFFFFFFFFFFFLL;
          }
          uint64_t v31 = 7;
          uint64_t v32 = 11;
          if ((v66 & 0x800000000000000) != 0) {
            uint64_t v32 = 7;
          }
          if ((v13 & 0x1000000000000000) != 0) {
            uint64_t v31 = v32;
          }
          unint64_t v65 = v31 | (v30 << 16);
          uint64_t v63 = v31 & 0xC;
          unint64_t v64 = v30;
          uint64_t v58 = v27;
          while (1)
          {
            if (__OFADD__(v29, v25)) {
              int64_t v37 = ((uint64_t)(v29 + v25) >> 63) ^ 0x8000000000000000;
            }
            else {
              int64_t v37 = v29 + v25;
            }
            uint64_t v6 = a3 + 1;
            if (__OFADD__(a3, 1))
            {
LABEL_97:
              __break(1u);
LABEL_98:
              __break(1u);
LABEL_99:
              __break(1u);
LABEL_100:
              __break(1u);
LABEL_101:
              __break(1u);
LABEL_102:
              __break(1u);
LABEL_103:
              uint64_t v57 = sub_25A50EDD0();
              uint64_t v15 = v57 + 2;
              if (!__OFADD__(v57, 2)) {
                goto LABEL_7;
              }
LABEL_105:
              __break(1u);
              goto LABEL_106;
            }
            if ((v13 & 0x1000000000000000) != 0)
            {
              uint64_t v38 = sub_25A50EDF0();
              if (v39) {
                goto LABEL_39;
              }
              a2 = v38;
            }
            else
            {
              if ((v29 & 0x8000000000000000) != 0) {
                goto LABEL_95;
              }
              if (v30 < v29) {
                goto LABEL_39;
              }
              a2 = (v29 << 16) | 4;
            }
            a4 = a2 & 0xC;
            a1 = a2;
            uint64_t v40 = 4 << (((v13 & 0x1000000000000000) == 0) | ((v66 & 0x800000000000000uLL) >> 59));
            if (a4 == v40)
            {
              uint64_t v43 = sub_25A48B718(a2, v66, v13);
              uint64_t v40 = 4 << (((v13 & 0x1000000000000000) == 0) | ((v66 & 0x800000000000000uLL) >> 59));
              a1 = v43;
            }
            unint64_t v41 = v65;
            if (v63 == v40)
            {
              uint64_t v44 = sub_25A48B718(v65, v66, v13);
              uint64_t v40 = 4 << (((v13 & 0x1000000000000000) == 0) | ((v66 & 0x800000000000000uLL) >> 59));
              unint64_t v41 = v44;
              if ((v13 & 0x1000000000000000) == 0)
              {
LABEL_69:
                uint64_t v42 = (v41 >> 16) - (a1 >> 16);
                a1 = v66;
                goto LABEL_74;
              }
            }
            else if ((v13 & 0x1000000000000000) == 0)
            {
              goto LABEL_69;
            }
            if (v30 < a1 >> 16) {
              goto LABEL_98;
            }
            if (v30 < v41 >> 16) {
              goto LABEL_99;
            }
            a1 = v66;
            uint64_t v42 = sub_25A50EE10();
            uint64_t v40 = 4 << (((v13 & 0x1000000000000000) == 0) | ((v66 & 0x800000000000000uLL) >> 59));
LABEL_74:
            if (v42 >= v25) {
              uint64_t v45 = v25;
            }
            else {
              uint64_t v45 = v42;
            }
            unint64_t v46 = a2;
            if (a4 == v40)
            {
              unint64_t v46 = sub_25A48B718(a2, a1, v13);
              if ((v13 & 0x1000000000000000) != 0)
              {
LABEL_90:
                sub_25A50EDF0();
                if (v50) {
                  goto LABEL_39;
                }
                goto LABEL_91;
              }
            }
            else if ((v13 & 0x1000000000000000) != 0)
            {
              goto LABEL_90;
            }
            unint64_t v47 = v46 >> 16;
            int64_t v48 = (v46 >> 16) + v45;
            if (__OFADD__(v46 >> 16, v45)) {
              goto LABEL_100;
            }
            if (v45 < 0)
            {
              unint64_t v49 = v64;
              if (v47 >= v64 && v48 < (uint64_t)v64) {
                goto LABEL_39;
              }
            }
            else
            {
              unint64_t v49 = v64;
              if (v64 >= v47 && (uint64_t)v64 < v48) {
                goto LABEL_39;
              }
            }
            if (v48 < 0) {
              goto LABEL_101;
            }
            if (v49 < v48) {
              goto LABEL_102;
            }
LABEL_91:
            uint64_t v51 = sub_25A50ED40();
            if ((v52 & 1) == 0)
            {
              a2 = v51;
              uint64_t v53 = sub_25A50ED40();
              if ((v54 & 1) == 0)
              {
                unint64_t v30 = v53;
                a1 = swift_allocObject();
                *(_OWORD *)(a1 + 16) = xmmword_25A5144E0;
                *(void *)(a1 + 56) = MEMORY[0x263F8D310];
                *(void *)(a1 + 64) = v61;
                *(void *)(a1 + 32) = v60;
                *(void *)(a1 + 40) = v62;
                uint64_t v55 = MEMORY[0x263F8D6C8];
                *(void *)(a1 + 96) = MEMORY[0x263F8D6C8];
                uint64_t v56 = MEMORY[0x263F8D750];
                *(void *)(a1 + 72) = v6;
                *(void *)(a1 + 136) = v55;
                *(void *)(a1 + 144) = v56;
                *(void *)(a1 + 104) = v56;
                *(void *)(a1 + 112) = v59;
                if (v30 >> 14 < a2 >> 14)
                {
                  __break(1u);
LABEL_95:
                  if (!v30) {
                    goto LABEL_39;
                  }
                  __break(1u);
                  goto LABEL_97;
                }
                swift_bridgeObjectRetain();
                a4 = v66;
                uint64_t v33 = sub_25A50EEE0();
                a2 = MEMORY[0x26113CCD0](v33);
                uint64_t v35 = v34;
                swift_bridgeObjectRelease();
                *(void *)(a1 + 176) = MEMORY[0x263F8D310];
                *(void *)(a1 + 184) = v61;
                uint64_t v27 = v58;
                *(void *)(a1 + 152) = a2;
                *(void *)(a1 + 160) = v35;
                sub_25A50E540();
                a1 = v66;
                swift_bridgeObjectRelease();
              }
            }
            BOOL v36 = v27 >= v37;
            if (v25 > 0) {
              BOOL v36 = v37 >= v27;
            }
            ++a3;
            unint64_t v29 = v37;
            unint64_t v30 = v64;
            if (v36) {
              goto LABEL_39;
            }
          }
        }
LABEL_111:
        __break(1u);
LABEL_112:
        __break(1u);
        return result;
      }
LABEL_110:
      __break(1u);
      goto LABEL_111;
    }
LABEL_109:
    __break(1u);
    goto LABEL_110;
  }
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_25A511AD0;
  uint64_t v22 = MEMORY[0x263F8D310];
  *(void *)(v21 + 56) = MEMORY[0x263F8D310];
  unint64_t v23 = sub_25A3DF94C();
  *(void *)(v21 + 32) = a1;
  *(void *)(v21 + 40) = a2;
  *(void *)(v21 + 96) = v22;
  *(void *)(v21 + 104) = v23;
  *(void *)(v21 + 64) = v23;
  *(void *)(v21 + 72) = 2618;
  *(void *)(v21 + 80) = 0xE200000000000000;
  *(void *)(v21 + 136) = v22;
  *(void *)(v21 + 144) = v23;
  *(void *)(v21 + 112) = v66;
  *(void *)(v21 + 120) = v13;
  swift_bridgeObjectRetain();
  sub_25A50E540();
LABEL_40:

  return swift_bridgeObjectRelease();
}

uint64_t sub_25A48BECC(uint64_t a1, unint64_t a2, unint64_t a3, int64_t a4, os_log_type_t a5, os_log_t oslog, uint64_t a7, unint64_t a8)
{
  uint64_t result = os_log_type_enabled(oslog, a5);
  if (!result) {
    return result;
  }
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_103;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v15 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v15 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v16 = v15 + 2;
  if (__OFADD__(v15, 2)) {
    goto LABEL_105;
  }
LABEL_7:
  uint64_t v8 = HIBYTE(a8) & 0xF;
  if ((a8 & 0x1000000000000000) != 0)
  {
LABEL_106:
    uint64_t result = sub_25A50EDD0();
    BOOL v17 = __OFADD__(v16, result);
    uint64_t v18 = v16 + result;
    if (!v17) {
      goto LABEL_12;
    }
LABEL_108:
    __break(1u);
    goto LABEL_109;
  }
  if ((a8 & 0x2000000000000000) != 0) {
    uint64_t result = HIBYTE(a8) & 0xF;
  }
  else {
    uint64_t result = a7 & 0xFFFFFFFFFFFFLL;
  }
  BOOL v17 = __OFADD__(v16, result);
  uint64_t v18 = v16 + result;
  if (v17) {
    goto LABEL_108;
  }
LABEL_12:
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417468);
  if (v18 >= 1021)
  {
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_25A5119F0;
    *(void *)(v19 + 56) = MEMORY[0x263F8D310];
    unint64_t v60 = sub_25A3DF94C();
    *(void *)(v19 + 64) = v60;
    *(void *)(v19 + 32) = a1;
    *(void *)(v19 + 40) = a2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_25A50E540();
    swift_bridgeObjectRelease();
    if (a4)
    {
      unint64_t v67 = a4;
      swift_bridgeObjectRetain();
      sub_25A50EDA0();
      a4 = a3;
      unint64_t v20 = v67;
    }
    else
    {
      unint64_t v20 = 0xE000000000000000;
    }
    unint64_t v61 = v20;
    uint64_t result = sub_25A50ED50();
    uint64_t v24 = 1020 - result;
    if (!__OFSUB__(1020, result))
    {
      uint64_t v25 = 990 - result;
      if (!__OFSUB__(v24, 30))
      {
        if ((a8 & 0x1000000000000000) != 0)
        {
          uint64_t result = sub_25A50EDD0();
          if (!v25) {
            goto LABEL_34;
          }
        }
        else
        {
          if ((a8 & 0x2000000000000000) == 0)
          {
            uint64_t result = a7 & 0xFFFFFFFFFFFFLL;
            if (!v25) {
              goto LABEL_34;
            }
            goto LABEL_25;
          }
          uint64_t result = v8;
          if (v24 == 30)
          {
LABEL_34:
            __break(1u);
            goto LABEL_35;
          }
        }
LABEL_25:
        if (result == 0x8000000000000000 && v25 == -1) {
          goto LABEL_112;
        }
        uint64_t v26 = result / v25;
        if (!(result % v25) || (BOOL v17 = __OFADD__(v26, 1), ++v26, !v17))
        {
          uint64_t v58 = v26;
          int64_t v59 = a4;
          if ((a8 & 0x1000000000000000) != 0)
          {
            uint64_t v27 = sub_25A50EDD0();
          }
          else
          {
            if ((a8 & 0x2000000000000000) != 0)
            {
LABEL_35:
              uint64_t v27 = v8;
              goto LABEL_36;
            }
            uint64_t v27 = a7 & 0xFFFFFFFFFFFFLL;
          }
LABEL_36:
          BOOL v28 = v27 >= 0;
          if (v25 > 0) {
            BOOL v28 = v27 < 1;
          }
          if (v28)
          {
LABEL_39:
            swift_bridgeObjectRelease();
            goto LABEL_40;
          }
          a1 = 0;
          unint64_t v29 = 0;
          if ((a8 & 0x2000000000000000) != 0) {
            unint64_t v30 = v8;
          }
          else {
            unint64_t v30 = a7 & 0xFFFFFFFFFFFFLL;
          }
          uint64_t v31 = 7;
          uint64_t v32 = 11;
          if ((a7 & 0x800000000000000) != 0) {
            uint64_t v32 = 7;
          }
          if ((a8 & 0x1000000000000000) != 0) {
            uint64_t v31 = v32;
          }
          unint64_t v65 = v31 | (v30 << 16);
          uint64_t v33 = 4 << (((a8 & 0x1000000000000000) == 0) | ((a7 & 0x800000000000000uLL) >> 59));
          uint64_t v63 = v31 & 0xC;
          uint64_t v62 = v27;
          unint64_t v64 = v30;
          while (1)
          {
            if (__OFADD__(v29, v25)) {
              a4 = ((uint64_t)(v29 + v25) >> 63) ^ 0x8000000000000000;
            }
            else {
              a4 = v29 + v25;
            }
            uint64_t v8 = a1 + 1;
            if (__OFADD__(a1, 1))
            {
LABEL_97:
              __break(1u);
LABEL_98:
              __break(1u);
LABEL_99:
              __break(1u);
LABEL_100:
              __break(1u);
LABEL_101:
              __break(1u);
LABEL_102:
              __break(1u);
LABEL_103:
              uint64_t v57 = sub_25A50EDD0();
              uint64_t v16 = v57 + 2;
              if (!__OFADD__(v57, 2)) {
                goto LABEL_7;
              }
LABEL_105:
              __break(1u);
              goto LABEL_106;
            }
            if ((a8 & 0x1000000000000000) != 0)
            {
              uint64_t v39 = sub_25A50EDF0();
              if (v40) {
                goto LABEL_39;
              }
              a2 = v39;
            }
            else
            {
              if ((v29 & 0x8000000000000000) != 0) {
                goto LABEL_95;
              }
              if (v30 < v29) {
                goto LABEL_39;
              }
              a2 = (v29 << 16) | 4;
            }
            a3 = a2 & 0xC;
            unint64_t v41 = a2;
            if (a3 == v33) {
              unint64_t v41 = sub_25A48B718(a2, a7, a8);
            }
            unint64_t v42 = v65;
            if (v63 == v33)
            {
              unint64_t v42 = sub_25A48B718(v65, a7, a8);
              if ((a8 & 0x1000000000000000) == 0)
              {
LABEL_69:
                uint64_t v43 = (v42 >> 16) - (v41 >> 16);
                goto LABEL_74;
              }
            }
            else if ((a8 & 0x1000000000000000) == 0)
            {
              goto LABEL_69;
            }
            if (v30 < v41 >> 16) {
              goto LABEL_98;
            }
            if (v30 < v42 >> 16) {
              goto LABEL_99;
            }
            uint64_t v43 = sub_25A50EE10();
LABEL_74:
            if (v43 >= v25) {
              uint64_t v44 = v25;
            }
            else {
              uint64_t v44 = v43;
            }
            unint64_t v45 = a2;
            if (a3 == v33)
            {
              unint64_t v45 = sub_25A48B718(a2, a7, a8);
              if ((a8 & 0x1000000000000000) != 0)
              {
LABEL_90:
                sub_25A50EDF0();
                if (v49) {
                  goto LABEL_39;
                }
                goto LABEL_91;
              }
            }
            else if ((a8 & 0x1000000000000000) != 0)
            {
              goto LABEL_90;
            }
            unint64_t v46 = v45 >> 16;
            int64_t v47 = (v45 >> 16) + v44;
            if (__OFADD__(v45 >> 16, v44)) {
              goto LABEL_100;
            }
            if (v44 < 0)
            {
              unint64_t v48 = v64;
              if (v46 >= v64 && v47 < (uint64_t)v64) {
                goto LABEL_39;
              }
            }
            else
            {
              unint64_t v48 = v64;
              if (v64 >= v46 && (uint64_t)v64 < v47) {
                goto LABEL_39;
              }
            }
            if (v47 < 0) {
              goto LABEL_101;
            }
            if (v48 < v47) {
              goto LABEL_102;
            }
LABEL_91:
            uint64_t v50 = sub_25A50ED40();
            if ((v51 & 1) == 0)
            {
              unint64_t v52 = v50;
              uint64_t v53 = sub_25A50ED40();
              if ((v54 & 1) == 0)
              {
                unint64_t v30 = v53;
                a2 = swift_allocObject();
                *(_OWORD *)(a2 + 16) = xmmword_25A5144E0;
                a3 = v60;
                *(void *)(a2 + 56) = MEMORY[0x263F8D310];
                *(void *)(a2 + 64) = v60;
                *(void *)(a2 + 32) = v59;
                *(void *)(a2 + 40) = v61;
                uint64_t v55 = MEMORY[0x263F8D6C8];
                *(void *)(a2 + 96) = MEMORY[0x263F8D6C8];
                uint64_t v56 = MEMORY[0x263F8D750];
                *(void *)(a2 + 72) = v8;
                *(void *)(a2 + 136) = v55;
                *(void *)(a2 + 144) = v56;
                *(void *)(a2 + 104) = v56;
                *(void *)(a2 + 112) = v58;
                if (v30 >> 14 < v52 >> 14)
                {
                  __break(1u);
LABEL_95:
                  if (!v30) {
                    goto LABEL_39;
                  }
                  __break(1u);
                  goto LABEL_97;
                }
                swift_bridgeObjectRetain();
                uint64_t v34 = sub_25A50EEE0();
                uint64_t v35 = MEMORY[0x26113CCD0](v34);
                uint64_t v37 = v36;
                swift_bridgeObjectRelease();
                *(void *)(a2 + 176) = MEMORY[0x263F8D310];
                *(void *)(a2 + 184) = v60;
                *(void *)(a2 + 152) = v35;
                *(void *)(a2 + 160) = v37;
                sub_25A50E540();
                swift_bridgeObjectRelease();
              }
            }
            BOOL v38 = v62 >= a4;
            if (v25 > 0) {
              BOOL v38 = a4 >= v62;
            }
            ++a1;
            unint64_t v29 = a4;
            unint64_t v30 = v64;
            if (v38) {
              goto LABEL_39;
            }
          }
        }
LABEL_111:
        __break(1u);
LABEL_112:
        __break(1u);
        return result;
      }
LABEL_110:
      __break(1u);
      goto LABEL_111;
    }
LABEL_109:
    __break(1u);
    goto LABEL_110;
  }
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_25A511AD0;
  uint64_t v22 = MEMORY[0x263F8D310];
  *(void *)(v21 + 56) = MEMORY[0x263F8D310];
  unint64_t v23 = sub_25A3DF94C();
  *(void *)(v21 + 32) = a1;
  *(void *)(v21 + 40) = a2;
  *(void *)(v21 + 96) = v22;
  *(void *)(v21 + 104) = v23;
  *(void *)(v21 + 64) = v23;
  *(void *)(v21 + 72) = 2618;
  *(void *)(v21 + 80) = 0xE200000000000000;
  *(void *)(v21 + 136) = v22;
  *(void *)(v21 + 144) = v23;
  *(void *)(v21 + 112) = a7;
  *(void *)(v21 + 120) = a8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_25A50E540();
LABEL_40:

  return swift_bridgeObjectRelease();
}

uint64_t InvalidatableCache.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  InvalidatableCache.init()();
  return v0;
}

uint64_t InvalidatableCache.snapshot.getter()
{
  type metadata accessor for Future();
  sub_25A50E990();
  uint64_t v0 = sub_25A50E5B0();
  uint64_t WitnessTable = swift_getWitnessTable();
  SynchronousAccessProviding<>.peek(file:line:column:function:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/InvalidatableCache.swift", 130, 2, 62, 19, (uint64_t)"snapshot", 8, 2, v0, WitnessTable);
  return v3;
}

uint64_t InvalidatableCache.subscript.getter(uint64_t a1)
{
  uint64_t v3 = *v1;
  v10[0] = v1[2];
  uint64_t v4 = *(void *)(v3 + 80);
  uint64_t v5 = type metadata accessor for Future();
  uint64_t v6 = *(void *)(v3 + 96);
  sub_25A50E990();
  uint64_t v7 = sub_25A50E5B0();
  uint64_t WitnessTable = swift_getWitnessTable();
  SynchronousAccessProviding<>.peek(file:line:column:function:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/InvalidatableCache.swift", 130, 2, 20, 19, (uint64_t)"subscript(_:)", 13, 2, v7, WitnessTable);
  MEMORY[0x26113C9D0](v10, a1, v10[1], v4, v5, v6);
  swift_bridgeObjectRelease();
  return v10[0];
}

uint64_t InvalidatableCache.futureResource(for:create:)(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  uint64_t v20[3] = v2[2];
  uint64_t v15 = *(void *)(v4 + 80);
  uint64_t v16 = *(void *)(v4 + 88);
  long long v17 = *(_OWORD *)(v5 + 96);
  uint64_t v18 = a1;
  type metadata accessor for Future();
  sub_25A50E990();
  uint64_t v6 = sub_25A50E5B0();
  type metadata accessor for Promise();
  sub_25A50FA40();
  swift_retain();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t WitnessTable = swift_getWitnessTable();
  SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_25A380000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/InvalidatableCache.swift", 130, 2, 24, 49, (uint64_t)"futureResource(for:create:)", 27, 2, (uint64_t)sub_25A48D06C, (uint64_t)v14, v6, TupleTypeMetadata2, WitnessTable);
  swift_release();
  uint64_t v9 = v20[4];
  if (v20[5])
  {
    swift_retain();
    uint64_t v10 = sub_25A48D090(v9);
    uint64_t v11 = a2(v10);
    sub_25A41B150(v20);
    unint64_t v12 = (void *)v20[0];
    v19[0] = v20[0];
    v19[1] = v20[1];
    Promise.track(future:on:)(v11, v19);
    swift_release_n();
    swift_release();
    sub_25A3EE314(v12);
  }
  return v9;
}

Swift::Void __swiftcall InvalidatableCache.invalidate()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  uint64_t v3 = *(void *)(*v0 + 80);
  uint64_t v4 = *(void *)(*v0 + 88);
  type metadata accessor for Future();
  uint64_t v5 = *(void *)(v1 + 96);
  sub_25A50E990();
  uint64_t v6 = sub_25A50E5B0();
  uint64_t WitnessTable = swift_getWitnessTable();
  SynchronousAccessProviding<>.peek(file:line:column:function:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/InvalidatableCache.swift", 130, 2, 54, 35, (uint64_t)"invalidate()", 12, 2, v6, WitnessTable);
  unint64_t v8 = j_nullsub_1();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if ((v8 & 0xC000000000000001) != 0)
  {
    uint64_t v9 = sub_25A510030();
    unint64_t v25 = 0;
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    unint64_t v8 = v9 | 0x8000000000000000;
  }
  else
  {
    uint64_t v12 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v25 = v8 + 64;
    uint64_t v10 = ~v12;
    uint64_t v13 = -v12;
    if (v13 < 64) {
      uint64_t v14 = ~(-1 << v13);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v11 = v14 & *(void *)(v8 + 64);
  }
  uint64_t v15 = 0;
  int64_t v24 = (unint64_t)(v10 + 64) >> 6;
  if ((v8 & 0x8000000000000000) != 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v11)
    {
      uint64_t v16 = (v11 - 1) & v11;
      unint64_t v17 = __clz(__rbit64(v11)) | (v15 << 6);
      uint64_t v18 = v15;
      goto LABEL_27;
    }
    int64_t v19 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v19 >= v24) {
      goto LABEL_30;
    }
    unint64_t v20 = *(void *)(v25 + 8 * v19);
    uint64_t v18 = v15 + 1;
    if (!v20)
    {
      uint64_t v18 = v15 + 2;
      if (v15 + 2 >= v24) {
        goto LABEL_30;
      }
      unint64_t v20 = *(void *)(v25 + 8 * v18);
      if (!v20)
      {
        uint64_t v18 = v15 + 3;
        if (v15 + 3 >= v24) {
          goto LABEL_30;
        }
        unint64_t v20 = *(void *)(v25 + 8 * v18);
        if (!v20)
        {
          uint64_t v18 = v15 + 4;
          if (v15 + 4 >= v24) {
            goto LABEL_30;
          }
          unint64_t v20 = *(void *)(v25 + 8 * v18);
          if (!v20)
          {
            uint64_t v21 = v15 + 5;
            while (v24 != v21)
            {
              unint64_t v20 = *(void *)(v25 + 8 * v21++);
              if (v20)
              {
                uint64_t v18 = v21 - 1;
                goto LABEL_26;
              }
            }
LABEL_30:
            sub_25A39C550();
            return;
          }
        }
      }
    }
LABEL_26:
    uint64_t v16 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v18 << 6);
LABEL_27:
    uint64_t v22 = *(void *)(*(void *)(v8 + 56) + 8 * v17);
    swift_retain();
    if (!v22) {
      goto LABEL_30;
    }
    while (1)
    {
      unint64_t v23 = (void *)swift_allocObject();
      long long v23[2] = v3;
      v23[3] = v4;
      void v23[4] = v5;
      v23[5] = *(void *)(v2 + 104);
      Future.observeSuccess(_:)((uint64_t)sub_25A48DB40, (uint64_t)v23);
      swift_release();
      sub_25A4F1FD0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/InvalidatableCache.swift", 130, 2, 56, 28, (uint64_t)"invalidate()", 12, 2);
      swift_release();
      uint64_t v15 = v18;
      unint64_t v11 = v16;
      if ((v8 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (sub_25A510040())
      {
        swift_unknownObjectRelease();
        sub_25A510330();
        swift_unknownObjectRelease();
        uint64_t v18 = v15;
        uint64_t v16 = v11;
        if (v26) {
          continue;
        }
      }
      goto LABEL_30;
    }
  }
  __break(1u);
}

uint64_t InvalidatableCache.init()()
{
  type metadata accessor for Future();
  uint64_t v4 = sub_25A50E850();
  uint64_t v1 = sub_25A50E990();
  uint64_t v2 = sub_25A3EF560(&v4, v1);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 16) = v2;
  return v0;
}

void *sub_25A48CE8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v10 = *(void *)(a3 - 8);
  unint64_t v11 = (uint64_t *)MEMORY[0x270FA5388](a1);
  uint64_t v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20[3] = v11;
  uint64_t v14 = *v11;
  uint64_t v15 = type metadata accessor for Future();
  _OWORD v20[2] = a4;
  uint64_t result = MEMORY[0x26113C9D0](&v21, a2, v14, a3, v15, a4);
  uint64_t v17 = v21;
  if (v21)
  {
    uint64_t v18 = 0;
  }
  else
  {
    v20[1] = v5;
    v20[0] = sub_25A3BE428((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/InvalidatableCache.swift", 130, 2, 29, 60, (uint64_t)"futureResource(for:create:)", 27, 2);
    uint64_t v18 = v19;
    uint64_t v17 = sub_25A4A753C((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/InvalidatableCache.swift", 130, 2, 32, 51, (uint64_t)"futureResource(for:create:)", 27, 2);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a2, a3);
    uint64_t v21 = v17;
    sub_25A50E990();
    swift_retain();
    sub_25A50E9E0();
    uint64_t result = (void *)swift_release();
  }
  *a5 = v17;
  a5[1] = v18;
  return result;
}

void *sub_25A48D06C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_25A48CE8C(a1, v2[6], v2[2], v2[4], a2);
}

uint64_t sub_25A48D090(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 80);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v11 - v6;
  (*(void (**)(char *))(v5 + 16))((char *)&v11 - v6);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v4;
  *(_OWORD *)(v9 + 24) = *(_OWORD *)(v3 + 88);
  *(void *)(v9 + 40) = *(void *)(v2 + 104);
  *(void *)(v9 + 48) = v1;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, v7, v4);
  swift_retain();
  Future.observeFinish(_:)((uint64_t)sub_25A48DC84, v9);
  return swift_release();
}

uint64_t sub_25A48D230(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v28 = a3;
  uint64_t v25 = *a2;
  uint64_t v5 = *(void *)(v25 + 80);
  uint64_t v26 = *(void *)(v5 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](a1);
  unint64_t v8 = (char *)&v25 - v7;
  uint64_t v10 = *(void *)(v9 + 88);
  uint64_t v27 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v12 = (char *)&v25 - v11;
  uint64_t v13 = type metadata accessor for FutureTermination();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v25 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v25 - v15, a1, v13);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    uint64_t v18 = v28;
    if (EnumCaseMultiPayload == 1) {
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    }
    return sub_25A48D570(v18);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v12, v16, v10);
    uint64_t v20 = v26;
    (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v8, v28, v5);
    unint64_t v21 = (*(unsigned __int8 *)(v20 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
    uint64_t v22 = (char *)swift_allocObject();
    *((void *)v22 + 2) = v5;
    *((void *)v22 + 3) = v10;
    uint64_t v23 = v25;
    *((void *)v22 + 4) = *(void *)(v25 + 96);
    uint64_t v24 = *(void *)(v23 + 104);
    *((void *)v22 + 5) = v24;
    *((void *)v22 + 6) = a2;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(&v22[v21], v8, v5);
    swift_retain();
    Invalidatable.onInvalidation(_:)((void (*)(uint64_t))sub_25A48DD8C, (uint64_t)v22, v10, v24);
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v12, v10);
  }
}

uint64_t sub_25A48D570(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 80);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v16[-1] - v6;
  v16[1] = v1[2];
  uint64_t v8 = (*(uint64_t (**)(char *))(v5 + 16))((char *)&v16[-1] - v6);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v16[-1] - v9;
  *(void *)uint64_t v10 = v4;
  *((void *)v10 + 1) = *(void *)(v2 + 88);
  long long v15 = *(_OWORD *)(v3 + 96);
  *((_OWORD *)v10 + 1) = v15;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))((char *)&v16[3] - v9, v7, v4);
  uint64_t KeyPath = (uint64_t *)swift_getKeyPath();
  v16[0] = 0;
  type metadata accessor for Future();
  sub_25A50E990();
  uint64_t v12 = sub_25A50E5B0();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  SynchronousAccessProviding.syncSetValue<A>(at:to:)(KeyPath, (uint64_t)v16, v12, WitnessTable);
  swift_release();
  swift_release();
  return swift_release();
}

void *sub_25A48D790@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = *(void *)(a3 + a2 - 32);
  uint64_t v7 = *(void *)(a3 + a2 - 16);
  uint64_t v8 = *a1;
  uint64_t v9 = type metadata accessor for Future();
  uint64_t result = MEMORY[0x26113C9D0](&v11, a2, v8, v6, v9, v7);
  *a4 = v11;
  return result;
}

uint64_t sub_25A48D808(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + a3 - 32);
  MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)v10 - v6, v8, v5);
  v10[1] = *a1;
  type metadata accessor for Future();
  sub_25A50E990();
  swift_retain();
  return sub_25A50E9E0();
}

uint64_t InvalidatableCache.deinit()
{
  swift_release();
  return v0;
}

uint64_t InvalidatableCache.__deallocating_deinit()
{
  swift_release();

  return MEMORY[0x270FA0228](v0, 24, 7);
}

uint64_t OnDemand.__allocating_init(create:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  OnDemand.init(create:)(a1, a2);
  return v4;
}

void *OnDemand.init(create:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  type metadata accessor for InvalidatableCache();
  uint64_t v6 = swift_allocObject();
  InvalidatableCache.init()();
  _OWORD v3[2] = v6;
  v3[3] = a1;
  v3[4] = a2;
  return v3;
}

uint64_t OnDemand.get()()
{
  uint64_t v2 = 0;
  return InvalidatableCache.futureResource(for:create:)((uint64_t)&v2, *(uint64_t (**)(uint64_t))(v0 + 24));
}

Swift::Void __swiftcall OnDemand.invalidate()()
{
}

uint64_t OnDemand.deinit()
{
  swift_release();
  swift_release();
  return v0;
}

uint64_t OnDemand.__deallocating_deinit()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0228](v0, 40, 7);
}

uint64_t sub_25A48DB30()
{
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_25A48DB40()
{
  return sub_25A4C4F5C((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/InvalidatableCache.swift", 130, 2, 55, 52, (uint64_t)"invalidate()", 12, 2, *(void *)(v0 + 24), *(void *)(v0 + 40));
}

uint64_t type metadata accessor for InvalidatableCache()
{
  return swift_getGenericMetadata();
}

uint64_t method lookup function for InvalidatableCache(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for InvalidatableCache);
}

uint64_t dispatch thunk of InvalidatableCache.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t sub_25A48DBE8()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for OnDemand()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for OnDemand(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for OnDemand);
}

uint64_t dispatch thunk of OnDemand.__allocating_init(create:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t sub_25A48DC84(uint64_t a1)
{
  return sub_25A48D230(a1, *(uint64_t **)(v1 + 48), v1+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 16) - 8) + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 16) - 8) + 80)));
}

uint64_t objectdestroy_3Tm()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t sub_25A48DD8C()
{
  return sub_25A48D570(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80)));
}

uint64_t sub_25A48DDEC(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

unint64_t sub_25A48DDFC(void *a1)
{
  return ((*(void *)(*(void *)(*a1 - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 32;
}

uint64_t sub_25A48DE5C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + a1 - 32) - 8) + 8))();
}

__n128 sub_25A48DE8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + a1 - 32) - 8) + 16;
  (*(void (**)(uint64_t, uint64_t))v5)(a2, a1);
  unint64_t v6 = (*(void *)(v5 + 48) + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  __n128 result = *(__n128 *)(v7 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v7;
  *(__n128 *)(v8 + 16) = result;
  return result;
}

uint64_t sub_25A48DF0C()
{
  return sub_25A50EBE0() & 1;
}

uint64_t sub_25A48DF50()
{
  return sub_25A50EA30();
}

__n128 sub_25A48DF84(__n128 *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1->n128_u64[0] - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  (*(void (**)(uint64_t, unint64_t))(v4 + 32))(a2, (unint64_t)a1->n128_u64+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)));
  unint64_t v6 = (__n128 *)(a2 + ((v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  __n128 result = a1[1];
  *unint64_t v6 = *a1;
  v6[1] = result;
  return result;
}

uint64_t ResourceHub.__allocating_init(serviceName:resourceName:bootstrapResource:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = swift_allocObject();
  ResourceHub.init(serviceName:resourceName:bootstrapResource:)(a1, a2, a3, a4, a5, a6);
  return v12;
}

void *ResourceHub.init(serviceName:resourceName:bootstrapResource:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  swift_defaultActor_initialize();
  type metadata accessor for ResourceHub.ResourceState();
  swift_getTupleTypeMetadata2();
  sub_25A50F120();
  v6[14] = sub_25A50E900();
  v6[15] = a1;
  unsigned char v6[16] = a2;
  v6[17] = a3;
  v6[18] = a4;
  v6[19] = a5;
  v6[20] = a6;
  return v6;
}

uint64_t sub_25A48E1B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4[8] = a3;
  v4[9] = v3;
  v4[6] = a1;
  v4[7] = a2;
  v4[10] = *v3;
  return MEMORY[0x270FA2498](sub_25A48E200, v3, 0);
}

uint64_t sub_25A48E200()
{
  uint64_t v22 = v0;
  if (qword_26A4154C0 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)(qword_26A418748 + 16);
  uint64_t v2 = (os_unfair_lock_s *)(qword_26A418748 + 24);
  swift_retain();
  os_unfair_lock_lock(v2);
  sub_25A42091C(v1, v21);
  os_unfair_lock_unlock(v2);
  uint64_t v3 = (void *)v0[10];
  uint64_t v5 = v0[7];
  uint64_t v4 = (uint64_t *)v0[8];
  uint64_t v6 = v21[0];
  uint64_t v19 = v21[0];
  uint64_t v20 = v0[9];
  swift_release();
  uint64_t v7 = v3[10];
  uint64_t v8 = static Task.create<>(file:line:column:function:)(v21, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/ResourceHub.swift", 123, 2, 59, 59, (uint64_t)"requestResource(for:with:)", 26, 2, v7);
  uint64_t v9 = v21[0];
  v0[11] = v8;
  v0[12] = v9;
  uint64_t v10 = v3[11];
  uint64_t v11 = v3[12];
  uint64_t v12 = v3[13];
  v21[0] = v6;
  v21[1] = v9;
  swift_retain();
  sub_25A48FC0C(v21, v5, v4);
  uint64_t v13 = (void *)swift_task_alloc();
  v0[13] = v13;
  _OWORD v13[2] = v7;
  void v13[3] = v10;
  void v13[4] = v11;
  v13[5] = v12;
  void v13[6] = v8;
  uint64_t v14 = (void *)swift_task_alloc();
  v0[14] = v14;
  void v14[2] = v8;
  _OWORD v14[3] = v20;
  void v14[4] = v19;
  v14[5] = v5;
  v0[2] = v7;
  v0[3] = v10;
  v0[4] = v11;
  v0[5] = v12;
  type metadata accessor for ResourceHub();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v16 = (void *)swift_task_alloc();
  v0[15] = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_25A48E478;
  uint64_t v17 = v0[6];
  return MEMORY[0x270FA2338](v17, &unk_26A41A150, v13, sub_25A492D1C, v14, v20, WitnessTable, v7);
}

uint64_t sub_25A48E478()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 128) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 72);
    uint64_t v4 = sub_25A48E618;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 72);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = sub_25A48E5A8;
    uint64_t v3 = v5;
  }
  return MEMORY[0x270FA2498](v4, v3, 0);
}

uint64_t sub_25A48E5A8()
{
  swift_release_n();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_25A48E618()
{
  swift_release_n();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_25A48E6A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A415838);
  *uint64_t v7 = v3;
  v7[1] = sub_25A3923B4;
  uint64_t v9 = MEMORY[0x263F8E4E0];
  return MEMORY[0x270FA1FA8](a1, a2, a3, v8, v9);
}

uint64_t sub_25A48E770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a3;
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void *)(*(void *)a2 + 88);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4159A8);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = v6[10];
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415838);
  sub_25A50F3A0();
  uint64_t v15 = sub_25A50F2A0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v13, 1, 1, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a4, v7);
  unint64_t v16 = (*(unsigned __int8 *)(v8 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v17 = (char *)swift_allocObject();
  *((void *)v17 + 2) = 0;
  *((void *)v17 + 3) = 0;
  *((void *)v17 + 4) = v14;
  *((void *)v17 + 5) = v7;
  *((void *)v17 + 6) = v6[12];
  *((void *)v17 + 7) = v6[13];
  *((void *)v17 + 8) = a2;
  *((void *)v17 + 9) = v20;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v17[v16], v10, v7);
  swift_retain();
  sub_25A38ED10((uint64_t)v13, (uint64_t)&unk_26A41A348, (uint64_t)v17);
  return swift_release();
}

uint64_t sub_25A48E9D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void v6[3] = a4;
  v6[4] = a6;
  void v6[2] = a5;
  return MEMORY[0x270FA2498](sub_25A48E9F8, a4, 0);
}

uint64_t sub_25A48E9F8()
{
  sub_25A4904C0(v0 + 2, v0[4]);
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_25A48EA5C(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 16) = v2;
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 24) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_25A48EB44;
  v6[9] = v2;
  void v6[6] = a1;
  v6[7] = a2;
  v6[10] = *v2;
  return MEMORY[0x270FA2498](sub_25A48E200, v2, 0);
}

uint64_t sub_25A48EB44()
{
  uint64_t v2 = (void *)*v1;
  v2[4] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[2];
    return MEMORY[0x270FA2498](sub_25A4128C4, v3, 0);
  }
  else
  {
    uint64_t v4 = (uint64_t (*)(void))v2[1];
    return v4();
  }
}

uint64_t sub_25A48EC78(uint64_t a1, uint64_t a2)
{
  uint64_t v79 = a1;
  uint64_t v4 = *(void *)(*v2 + 88);
  uint64_t v81 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](a1);
  os_log_type_t v76 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v82 = (char *)&v67 - v7;
  uint64_t v10 = (uint64_t *)v9[12];
  uint64_t v11 = v9[13];
  uint64_t v83 = v9[10];
  uint64_t v8 = v83;
  uint64_t v84 = v4;
  uint64_t v77 = v10;
  uint64_t v85 = v10;
  uint64_t v86 = v11;
  uint64_t v12 = type metadata accessor for ResourceHub.ResourceState();
  uint64_t v13 = sub_25A50FA40();
  uint64_t v14 = MEMORY[0x270FA5388](v13 - 8);
  unint64_t v70 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v78 = (char *)&v67 - v17;
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v20 = (uint64_t *)((char *)&v67 - v19);
  uint64_t v80 = v8;
  uint64_t v73 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v67 - v21;
  uint64_t v71 = v2 + 14;
  swift_beginAccess();
  uint64_t v23 = v2[14];
  swift_bridgeObjectRetain();
  uint64_t v72 = v11;
  MEMORY[0x26113C9D0](a2, v23, v4, v12, v11);
  swift_bridgeObjectRelease();
  uint64_t v24 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v24 + 48))(v20, 1, v12) == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v81 + 16))(v82, a2, v4);
    uint64_t v25 = v78;
    (*(void (**)(char *, uint64_t, uint64_t))(v73 + 16))(v78, v79, v80);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v25, 0, 1, v12);
    swift_beginAccess();
    sub_25A50E990();
    sub_25A50E9E0();
    return swift_endAccess();
  }
  else
  {
    uint64_t v27 = v77;
    uint64_t v74 = v2;
    uint64_t v75 = a2;
    uint64_t v69 = v4;
    if (swift_getEnumCaseMultiPayload())
    {
      uint64_t v28 = v73;
      uint64_t v29 = v80;
      (*(void (**)(char *, uint64_t *, uint64_t))(v73 + 32))(v22, v20, v80);
      sub_25A491B84(&v83);
      (*(void (**)(char *, uint64_t))(v28 + 8))(v22, v29);
      uint64_t v30 = v86;
      uint64_t v31 = __swift_project_boxed_opaque_existential_1(&v83, v86);
      uint64_t v32 = *(void *)(v30 - 8);
      MEMORY[0x270FA5388](v31);
      uint64_t v34 = (char *)&v67 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v32 + 16))(v34);
      if (sub_25A5102E0())
      {
        (*(void (**)(char *, uint64_t))(v32 + 8))(v34, v30);
      }
      else
      {
        swift_allocError();
        (*(void (**)(uint64_t, char *, uint64_t))(v32 + 32))(v64, v34, v30);
      }
      swift_willThrow();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v83);
    }
    else
    {
      uint64_t v67 = v24;
      uint64_t v68 = v12;
      uint64_t v35 = *v20;
      uint64_t v36 = v80;
      uint64_t v37 = v69;
      uint64_t v83 = v80;
      uint64_t v84 = v69;
      uint64_t v85 = v27;
      uint64_t v86 = v72;
      uint64_t v38 = type metadata accessor for ResourceHub.Request();
      uint64_t v39 = MEMORY[0x26113D1B0](v35, v38);
      uint64_t v40 = v75;
      if (v39)
      {
        uint64_t v41 = 0;
        char v42 = 0;
        uint64_t v43 = 40;
        uint64_t v44 = v76;
        uint64_t v45 = v35;
        uint64_t v78 = (char *)v38;
        while (1)
        {
          char v50 = sub_25A50F140();
          uint64_t v51 = v45;
          char v52 = v50;
          uint64_t v53 = v51;
          uint64_t result = sub_25A50F0D0();
          if ((v52 & 1) == 0) {
            break;
          }
          if (__OFADD__(v41, 1)) {
            goto LABEL_24;
          }
          uint64_t v82 = (char *)(v41 + 1);
          if (v42)
          {
            uint64_t v87 = *(void *)(v53 + v43);
            swift_retain_n();
            sub_25A491A20(&v83);
            uint64_t v54 = v86;
            uint64_t v55 = __swift_project_boxed_opaque_existential_1(&v83, v86);
            uint64_t v77 = &v67;
            uint64_t v56 = *(void *)(v54 - 8);
            MEMORY[0x270FA5388](v55);
            uint64_t v58 = (char *)&v67 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
            (*(void (**)(char *))(v56 + 16))(v58);
            uint64_t v59 = sub_25A5102E0();
            if (v59)
            {
              unint64_t v60 = (void *)v59;
              (*(void (**)(char *, uint64_t))(v56 + 8))(v58, v54);
            }
            else
            {
              unint64_t v60 = (void *)swift_allocError();
              (*(void (**)(uint64_t, char *, uint64_t))(v56 + 32))(v61, v58, v54);
            }
            __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
            uint64_t v36 = v80;
            uint64_t v62 = type metadata accessor for Task.Promise();
            uint64_t WitnessTable = swift_getWitnessTable();
            PromiseProtocol.fulfill<>(file:line:column:function:throwing:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/ResourceHub.swift", 123, 2, 96, 44, (uint64_t)"deliverResource(_:for:)", 23, 2, (uint64_t)v60, v62, WitnessTable);

            swift_release();
            swift_release();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v83);
            char v42 = 1;
            uint64_t v40 = v75;
            uint64_t v44 = v76;
          }
          else
          {
            uint64_t v83 = *(void *)(v53 + v43);
            __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
            uint64_t v46 = type metadata accessor for Task.Promise();
            uint64_t v47 = swift_getWitnessTable();
            char v42 = PromiseProtocol.fulfill(file:line:column:function:returning:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/ResourceHub.swift", 123, 2, 99, 52, (uint64_t)"deliverResource(_:for:)", 23, 2, v79, v46, v47);
          }
          uint64_t v45 = v53;
          uint64_t v48 = MEMORY[0x26113D1B0](v53, v78);
          ++v41;
          v43 += 16;
          uint64_t v49 = v81;
          if (v82 == (char *)v48)
          {
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v44, v40, v69);
            goto LABEL_21;
          }
        }
        uint64_t result = sub_25A50FE20();
        __break(1u);
LABEL_24:
        __break(1u);
      }
      else
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t, uint64_t))(v81 + 16))(v76, v40, v37);
LABEL_21:
        unint64_t v65 = v70;
        (*(void (**)(char *, uint64_t, uint64_t))(v73 + 16))(v70, v79, v36);
        uint64_t v66 = v68;
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, void, uint64_t, uint64_t))(v67 + 56))(v65, 0, 1, v66);
        swift_beginAccess();
        sub_25A50E990();
        sub_25A50E9E0();
        return swift_endAccess();
      }
    }
  }
  return result;
}

uint64_t sub_25A48F664(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(*(void *)v2 + 88);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v9 - v6;
  sub_25A50FDE0();
  sub_25A48EC78(a1, (uint64_t)v7);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_25A48F770(uint64_t a1)
{
  uint64_t v3 = *(void *)(*v1 + 88);
  uint64_t v25 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v27 = (char *)v22 - v4;
  uint64_t v6 = v5[10];
  uint64_t v7 = v5[13];
  uint64_t v23 = v5[12];
  uint64_t v24 = v6;
  uint64_t v29 = v6;
  uint64_t v30 = v3;
  uint64_t v31 = v23;
  uint64_t v32 = v7;
  uint64_t v8 = type metadata accessor for ResourceHub.ResourceState();
  uint64_t v9 = sub_25A50FA40();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (void *)((char *)v22 - v14);
  swift_beginAccess();
  uint64_t v16 = v1[14];
  swift_bridgeObjectRetain();
  uint64_t v26 = a1;
  MEMORY[0x26113C9D0](a1, v16, v3, v8, v7);
  swift_bridgeObjectRelease();
  uint64_t v17 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v8) == 1)
  {
    (*(void (**)(uint64_t *, uint64_t))(v10 + 8))(v15, v9);
  }
  else
  {
    uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      (*(void (**)(uint64_t *, uint64_t))(v17 + 8))(v15, v8);
    }
    else
    {
      v22[1] = v22;
      uint64_t v28 = *v15;
      MEMORY[0x270FA5388](EnumCaseMultiPayload);
      uint64_t v20 = v23;
      uint64_t v19 = v24;
      v22[-4] = v24;
      v22[-3] = v3;
      v22[-2] = v20;
      v22[-1] = v7;
      uint64_t v29 = v19;
      uint64_t v30 = v3;
      uint64_t v31 = v20;
      uint64_t v32 = v7;
      type metadata accessor for ResourceHub.Request();
      sub_25A50F1E0();
      swift_getWitnessTable();
      sub_25A50EFF0();
      swift_bridgeObjectRelease();
    }
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v27, v26, v3);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v13, 1, 1, v8);
  swift_beginAccess();
  sub_25A50E990();
  sub_25A50E9E0();
  return swift_endAccess();
}

void sub_25A48FB58()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v0 = type metadata accessor for Task.Promise();
  uint64_t WitnessTable = swift_getWitnessTable();
  PromiseProtocol.cancel<>(file:line:column:function:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/ResourceHub.swift", 123, 2, 117, 49, (uint64_t)"purgeResource(for:)", 19, 2, v0, WitnessTable);
}

uint64_t sub_25A48FC0C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v59 = a3;
  uint64_t v58 = *(void *)(*(void *)(*v4 + 80) - 8);
  uint64_t v7 = MEMORY[0x270FA5388](a1);
  uint64_t v57 = (char *)v56 - v8;
  uint64_t v10 = *(void *)(v9 + 88);
  uint64_t v61 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v66 = (char *)v56 - v11;
  uint64_t v13 = *(void *)(v12 + 104);
  uint64_t v64 = *(void *)(v12 + 96);
  uint64_t v65 = v14;
  uint64_t v67 = v14;
  uint64_t v68 = v10;
  uint64_t v69 = v64;
  uint64_t v70 = v13;
  uint64_t v15 = type metadata accessor for ResourceHub.ResourceState();
  uint64_t v16 = sub_25A50FA40();
  uint64_t v17 = MEMORY[0x270FA5388](v16 - 8);
  uint64_t v19 = (void *)((char *)v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)v56 - v20;
  uint64_t v60 = *a1;
  uint64_t v62 = a1[1];
  swift_beginAccess();
  uint64_t v22 = v4[14];
  swift_bridgeObjectRetain();
  MEMORY[0x26113C9D0](a2, v22, v10, v15, v13);
  swift_bridgeObjectRelease();
  uint64_t v23 = *(uint64_t (***)(char *, uint64_t, uint64_t))(v15 - 8);
  int v24 = v23[6](v21, 1, v15);
  uint64_t v63 = a2;
  if (v24 == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v66, a2, v10);
    uint64_t v67 = v65;
    uint64_t v68 = v10;
    uint64_t v69 = v64;
    uint64_t v70 = v13;
    type metadata accessor for ResourceHub.Request();
    sub_25A5102C0();
    swift_allocObject();
    uint64_t v25 = sub_25A50F0C0();
    uint64_t v26 = v62;
    *uint64_t v27 = v60;
    v27[1] = v26;
    sub_25A3DFCA4();
    *uint64_t v19 = v25;
    swift_storeEnumTagMultiPayload();
    ((void (*)(uint64_t *, void, uint64_t, uint64_t))v23[7])(v19, 0, 1, v15);
    swift_beginAccess();
    sub_25A50E990();
    swift_retain();
    sub_25A50E9E0();
    swift_endAccess();
    return sub_25A4908F8(v63, (uint64_t)v59);
  }
  else
  {
    v56[0] = v13;
    v56[1] = v4 + 14;
    uint64_t v59 = v19;
    uint64_t v30 = v64;
    uint64_t v29 = v65;
    uint64_t v31 = v66;
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      uint64_t v64 = v15;
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v33 = (uint64_t)v57;
        uint64_t v34 = v58;
        uint64_t v35 = v29;
        (*(void (**)(char *, char *, uint64_t))(v58 + 32))(v57, v21, v29);
        uint64_t v67 = v62;
        __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
        uint64_t v36 = type metadata accessor for Task.Promise();
        uint64_t WitnessTable = swift_getWitnessTable();
        if (PromiseProtocol.fulfill(file:line:column:function:returning:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/ResourceHub.swift", 123, 2, 135, 39, (uint64_t)"storeOrResumeRequest(_:for:with:)", 33, 2, v33, v36, WitnessTable))
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v31, v63, v10);
          uint64_t v38 = v59;
          (*(void (**)(uint64_t *, uint64_t, uint64_t))(v34 + 16))(v59, v33, v35);
          uint64_t v39 = v33;
          uint64_t v40 = v64;
          swift_storeEnumTagMultiPayload();
          ((void (*)(uint64_t *, void, uint64_t, uint64_t))v23[7])(v38, 0, 1, v40);
          swift_beginAccess();
          sub_25A50E990();
          sub_25A50E9E0();
          swift_endAccess();
          return (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 8))(v39, v35);
        }
        else
        {
          return (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 8))(v33, v29);
        }
      }
      else
      {
        uint64_t v66 = (char *)v23;
        uint64_t v71 = v62;
        swift_retain();
        sub_25A491A20(&v67);
        uint64_t v45 = v70;
        uint64_t v46 = __swift_project_boxed_opaque_existential_1(&v67, v70);
        uint64_t v47 = *(void *)(v45 - 8);
        MEMORY[0x270FA5388](v46);
        uint64_t v49 = (char *)v56 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v47 + 16))(v49);
        uint64_t v50 = sub_25A5102E0();
        if (v50)
        {
          uint64_t v51 = (void *)v50;
          (*(void (**)(char *, uint64_t))(v47 + 8))(v49, v45);
        }
        else
        {
          uint64_t v51 = (void *)swift_allocError();
          (*(void (**)(uint64_t, char *, uint64_t))(v47 + 32))(v52, v49, v45);
        }
        uint64_t v53 = v64;
        __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
        uint64_t v54 = type metadata accessor for Task.Promise();
        uint64_t v55 = swift_getWitnessTable();
        PromiseProtocol.fulfill<>(file:line:column:function:throwing:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/ResourceHub.swift", 123, 2, 140, 36, (uint64_t)"storeOrResumeRequest(_:for:with:)", 33, 2, (uint64_t)v51, v54, v55);

        swift_release();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v67);
        return (*((uint64_t (**)(char *, uint64_t))v66 + 1))(v21, v53);
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v31, v63, v10);
      uint64_t v67 = v29;
      uint64_t v68 = v10;
      uint64_t v69 = v30;
      uint64_t v70 = v56[0];
      type metadata accessor for ResourceHub.Request();
      sub_25A5102C0();
      swift_allocObject();
      sub_25A50F0C0();
      uint64_t v41 = v62;
      *char v42 = v60;
      v42[1] = v41;
      sub_25A3DFCA4();
      swift_retain();
      uint64_t v43 = sub_25A50F100();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v44 = v59;
      *uint64_t v59 = v43;
      swift_storeEnumTagMultiPayload();
      ((void (*)(uint64_t *, void, uint64_t, uint64_t))v23[7])(v44, 0, 1, v15);
      swift_beginAccess();
      sub_25A50E990();
      sub_25A50E9E0();
      return swift_endAccess();
    }
  }
}

uint64_t sub_25A4904C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(*v2 + 88);
  uint64_t v30 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v32 = (char *)v25 - v6;
  uint64_t v8 = v7[12];
  uint64_t v9 = v7[13];
  uint64_t v27 = v7[10];
  uint64_t v34 = v27;
  uint64_t v35 = v5;
  uint64_t v36 = v8;
  uint64_t v37 = v9;
  uint64_t v10 = type metadata accessor for ResourceHub.ResourceState();
  uint64_t v11 = sub_25A50FA40();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v29 = (void *)((char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (void *)((char *)v25 - v15);
  uint64_t v26 = *a1;
  uint64_t v28 = v2 + 14;
  swift_beginAccess();
  uint64_t v17 = v2[14];
  swift_bridgeObjectRetain();
  uint64_t v31 = a2;
  uint64_t v18 = v9;
  MEMORY[0x26113C9D0](a2, v17, v5, v10, v9);
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v19 + 48))(v16, 1, v10) == 1) {
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v12 + 8))(v16, v11);
  }
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload) {
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v19 + 8))(v16, v10);
  }
  v25[1] = v25;
  uint64_t v33 = *v16;
  MEMORY[0x270FA5388](EnumCaseMultiPayload);
  uint64_t v23 = v26;
  uint64_t v22 = v27;
  v25[-6] = v27;
  v25[-5] = v5;
  v25[-4] = v8;
  v25[-3] = v18;
  v25[-2] = v23;
  uint64_t v34 = v22;
  uint64_t v35 = v5;
  uint64_t v36 = v8;
  uint64_t v37 = v18;
  type metadata accessor for ResourceHub.Request();
  sub_25A50F1E0();
  swift_getWitnessTable();
  swift_getWitnessTable();
  sub_25A50F7C0();
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v32, v31, v5);
  int v24 = v29;
  void *v29 = v33;
  swift_storeEnumTagMultiPayload();
  (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v24, 0, 1, v10);
  swift_beginAccess();
  sub_25A50E990();
  sub_25A50E9E0();
  return swift_endAccess();
}

uint64_t sub_25A4908F8(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = a2;
  uint64_t v25 = a1;
  uint64_t v3 = *(void **)v2;
  uint64_t v26 = *(void *)(*(void *)v2 + 96);
  uint64_t v4 = *(void *)(v26 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v22 - v6;
  int v24 = (char *)&v22 - v6;
  uint64_t v8 = v3[11];
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x270FA5388](v5);
  uint64_t v12 = (char *)&v22 - v11;
  uint64_t v23 = (char *)&v22 - v11;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4159A8);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_25A50F2A0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v25, v8);
  uint64_t v17 = v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v27, v26);
  unint64_t v18 = (*(unsigned __int8 *)(v9 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v19 = (v10 + *(unsigned __int8 *)(v4 + 80) + v18) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v20 = (char *)swift_allocObject();
  *((void *)v20 + 2) = 0;
  *((void *)v20 + 3) = 0;
  *((void *)v20 + 4) = v3[10];
  *((void *)v20 + 5) = v8;
  *((void *)v20 + 6) = v17;
  *((void *)v20 + 7) = v3[13];
  *((void *)v20 + 8) = v2;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v20[v18], v23, v8);
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(&v20[v19], v24, v17);
  swift_retain();
  sub_25A4913CC((uint64_t)v15, (uint64_t)&unk_26A41A328, (uint64_t)v20);
  swift_release();
  return sub_25A391AF4((uint64_t)v15);
}

uint64_t sub_25A490BF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[7] = a5;
  v6[8] = a6;
  void v6[6] = a4;
  uint64_t v7 = *(void *)(*(void *)a4 + 88);
  v6[9] = v7;
  v6[10] = *(void *)(v7 - 8);
  v6[11] = swift_task_alloc();
  v6[12] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_25A490CD4, 0, 0);
}

uint64_t sub_25A490CD4()
{
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v0[6] + 152) + **(int **)(v0[6] + 152));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[13] = v1;
  void *v1 = v0;
  v1[1] = sub_25A490DA8;
  uint64_t v3 = v0[7];
  uint64_t v2 = v0[8];
  return v5(v3, v2);
}

uint64_t sub_25A490DA8()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](sub_25A490FC8, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_25A490EEC()
{
  sub_25A4915B0(*(void *)(v0 + 112), *(void *)(v0 + 56));
  return MEMORY[0x270FA2498](sub_25A490F58, 0, 0);
}

uint64_t sub_25A490F58()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_25A490FC8()
{
  uint64_t v39 = v0;
  if (qword_26B329310 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[14];
  uint64_t v3 = v0[10];
  uint64_t v2 = v0[11];
  uint64_t v4 = v0[9];
  uint64_t v5 = v0[7];
  uint64_t v6 = sub_25A50E5E0();
  __swift_project_value_buffer(v6, (uint64_t)qword_26B3292F8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v7(v2, v5, v4);
  id v8 = v1;
  swift_retain();
  id v9 = v1;
  uint64_t v10 = sub_25A50E5C0();
  os_log_type_t v11 = sub_25A50F830();
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v13 = (void *)v0[14];
  if (v12)
  {
    uint64_t v31 = v0[12];
    uint64_t v32 = v0[11];
    uint64_t v33 = v0[10];
    uint64_t v30 = v0[9];
    uint64_t v14 = (void *)v0[6];
    uint64_t v15 = swift_slowAlloc();
    uint64_t v36 = (void *)swift_slowAlloc();
    uint64_t v37 = swift_slowAlloc();
    uint64_t v38 = v37;
    *(_DWORD *)uint64_t v15 = 136446978;
    log = v10;
    uint64_t v29 = v7;
    os_log_type_t type = v11;
    uint64_t v17 = v14[15];
    unint64_t v16 = v14[16];
    swift_bridgeObjectRetain();
    v0[2] = sub_25A3A36A4(v17, v16, &v38);
    sub_25A50FB00();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2082;
    uint64_t v18 = v14[17];
    unint64_t v19 = v14[18];
    swift_bridgeObjectRetain();
    v0[3] = sub_25A3A36A4(v18, v19, &v38);
    sub_25A50FB00();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 22) = 2082;
    v29(v31, v32, v30);
    uint64_t v20 = sub_25A50EC90();
    v0[4] = sub_25A3A36A4(v20, v21, &v38);
    sub_25A50FB00();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v30);
    *(_WORD *)(v15 + 32) = 2114;
    id v22 = v13;
    uint64_t v23 = _swift_stdlib_bridgeErrorToNSError();
    v0[5] = v23;
    sub_25A50FB00();
    *uint64_t v36 = v23;

    _os_log_impl(&dword_25A380000, log, type, "%{public}s was unable to bootstrap %{public}s for '%{public}s': %{public}@", (uint8_t *)v15, 0x2Au);
    __swift_instantiateConcreteTypeFromMangledName(qword_26A416680);
    swift_arrayDestroy();
    MEMORY[0x26113F070](v36, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x26113F070](v37, -1, -1);
    MEMORY[0x26113F070](v15, -1, -1);
  }
  else
  {
    uint64_t v25 = v0[10];
    uint64_t v24 = v0[11];
    uint64_t v26 = v0[9];
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
  }
  uint64_t v27 = v0[6];
  return MEMORY[0x270FA2498](sub_25A490EEC, v27, 0);
}

uint64_t sub_25A4913CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4159A8);
  MEMORY[0x270FA5388](v6 - 8);
  id v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25A489C78(a1, (uint64_t)v8);
  uint64_t v9 = sub_25A50F2A0();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_25A391AF4((uint64_t)v8);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v11 = sub_25A50F220();
      uint64_t v13 = v12;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    sub_25A50F290();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v11 = 0;
  uint64_t v13 = 0;
LABEL_6:
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a2;
  *(void *)(v14 + 24) = a3;
  if (v13 | v11)
  {
    v16[0] = 0;
    v16[1] = 0;
    void v16[2] = v11;
    v16[3] = v13;
  }
  return swift_task_create();
}

uint64_t sub_25A4915B0(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = a1;
  uint64_t v4 = *(void *)(*v2 + 88);
  uint64_t v25 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v27 = (char *)&v21 - v5;
  uint64_t v7 = v6[10];
  uint64_t v8 = v6[12];
  uint64_t v9 = v6[13];
  uint64_t v29 = v7;
  uint64_t v30 = v4;
  uint64_t v31 = v8;
  uint64_t v32 = v9;
  uint64_t v10 = type metadata accessor for ResourceHub.ResourceState();
  uint64_t v11 = sub_25A50FA40();
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  unint64_t v16 = (uint64_t *)((char *)&v21 - v15);
  swift_beginAccess();
  uint64_t v17 = v2[14];
  swift_bridgeObjectRetain();
  uint64_t v26 = a2;
  MEMORY[0x26113C9D0](a2, v17, v4, v10, v9);
  swift_bridgeObjectRelease();
  uint64_t v18 = *(void *)(v10 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v10);
  if (result != 1)
  {
    uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      return (*(uint64_t (**)(uint64_t *, uint64_t))(v18 + 8))(v16, v10);
    }
    else
    {
      uint64_t v23 = &v21;
      uint64_t v22 = *v16;
      uint64_t v28 = v22;
      MEMORY[0x270FA5388](EnumCaseMultiPayload);
      *(&v21 - 6) = v7;
      *(&v21 - 5) = v4;
      *(&v21 - 4) = v8;
      *(&v21 - 3) = v9;
      *(&v21 - 2) = v24;
      uint64_t v29 = v7;
      uint64_t v30 = v4;
      uint64_t v31 = v8;
      uint64_t v32 = v9;
      type metadata accessor for ResourceHub.Request();
      sub_25A50F1E0();
      swift_getWitnessTable();
      sub_25A50EFF0();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v27, v26, v4);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v14, 1, 1, v10);
      swift_beginAccess();
      sub_25A50E990();
      sub_25A50E9E0();
      return swift_endAccess();
    }
  }
  return result;
}

uint64_t sub_25A491950(uint64_t a1, uint64_t a2)
{
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v3 = type metadata accessor for Task.Promise();
  uint64_t WitnessTable = swift_getWitnessTable();
  PromiseProtocol.fulfill<>(file:line:column:function:throwing:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/ResourceHub.swift", 123, 2, 172, 50, (uint64_t)"handleBootstrapError(_:for:)", 28, 2, a2, v3, WitnessTable);
  return swift_release();
}

double sub_25A491A20@<D0>(uint64_t *a1@<X8>)
{
  sub_25A50FDB0();
  swift_bridgeObjectRetain();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  swift_bridgeObjectRetain();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  sub_25A510310();
  sub_25A50EDA0();
  a1[3] = (uint64_t)&type metadata for LowValueError;
  a1[4] = sub_25A4947F4();
  uint64_t v2 = swift_allocObject();
  *a1 = v2;
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = 0xE000000000000000;
  double result = 0.0;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(unsigned char *)(v2 + 64) = 0;
  return result;
}

uint64_t sub_25A491B84@<X0>(uint64_t *a1@<X8>)
{
  sub_25A50FDB0();
  sub_25A50EDA0();
  swift_bridgeObjectRetain();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  sub_25A510310();
  sub_25A50EDA0();
  sub_25A50FDB0();
  sub_25A50EDA0();
  swift_bridgeObjectRetain();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  sub_25A510310();
  sub_25A50EDA0();
  swift_bridgeObjectRetain();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  sub_25A510310();
  a1[3] = (uint64_t)&type metadata for LowValueError;
  a1[4] = sub_25A4947F4();
  uint64_t result = swift_allocObject();
  *a1 = result;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0xE000000000000000;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0xE000000000000000;
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  *(unsigned char *)(result + 64) = 0;
  return result;
}

uint64_t ResourceHub.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t ResourceHub.__deallocating_deinit()
{
  ResourceHub.deinit();

  return MEMORY[0x270FA2418](v0);
}

uint64_t ResourceHub.unownedExecutor.getter()
{
  return v0;
}

uint64_t sub_25A491E34()
{
  return ResourceHub.unownedExecutor.getter();
}

uint64_t ResourceHub.requestResource(for:with:withTimeout:makeTimeoutError:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v7 + 64) = a6;
  *(void *)(v7 + 72) = v6;
  *(void *)(v7 + 48) = a3;
  *(void *)(v7 + 56) = a5;
  *(void *)(v7 + 32) = a1;
  *(void *)(v7 + 40) = a2;
  uint64_t v9 = *v6;
  *(void *)(v7 + 80) = *v6;
  uint64_t v10 = *(void *)(v9 + 96);
  *(void *)(v7 + 88) = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  *(void *)(v7 + 96) = v11;
  *(void *)(v7 + 104) = *(void *)(v11 + 64);
  *(void *)(v7 + 112) = swift_task_alloc();
  uint64_t v12 = *(void *)(v9 + 88);
  *(void *)(v7 + 120) = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  *(void *)(v7 + 128) = v13;
  *(void *)(v7 + 136) = *(void *)(v13 + 64);
  *(void *)(v7 + 144) = swift_task_alloc();
  uint64_t v14 = swift_task_alloc();
  uint64_t v15 = *a4;
  *(void *)(v7 + 152) = v14;
  *(void *)(v7 + 160) = v15;
  *(unsigned char *)(v7 + 25) = *((unsigned char *)a4 + 8);
  return MEMORY[0x270FA2498](sub_25A491FEC, v6, 0);
}

uint64_t sub_25A491FEC()
{
  char v1 = *(unsigned char *)(v0 + 25);
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v25 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 128);
  uint64_t v5 = *(void *)(v0 + 112);
  uint64_t v21 = *(void *)(v0 + 152);
  uint64_t v22 = v5;
  uint64_t v7 = *(void *)(v0 + 88);
  uint64_t v6 = *(void *)(v0 + 96);
  uint64_t v19 = *(void *)(v0 + 80);
  uint64_t v28 = *(void *)(v0 + 72);
  uint64_t v8 = *(void *)(v0 + 48);
  uint64_t v26 = *(void *)(v0 + 56);
  uint64_t v27 = *(void *)(v0 + 64);
  uint64_t v9 = *(void *)(v0 + 40);
  *(void *)(v0 + 16) = *(void *)(v0 + 160);
  *(unsigned char *)(v0 + 24) = v1;
  uint64_t v23 = *(void (**)(void))(v3 + 16);
  uint64_t v24 = v9;
  v23();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v8, v7);
  uint64_t v10 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v11 = (v10 + 56) & ~v10;
  unint64_t v12 = (v2 + *(unsigned __int8 *)(v6 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v13 = (char *)swift_allocObject();
  *(void *)(v0 + 168) = v13;
  uint64_t v29 = *(void *)(v19 + 80);
  *((void *)v13 + 2) = v29;
  *((void *)v13 + 3) = v4;
  *((void *)v13 + 4) = v7;
  uint64_t v20 = *(void *)(v19 + 104);
  *((void *)v13 + 5) = v20;
  *((void *)v13 + 6) = v28;
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 32);
  v18(&v13[v11], v21, v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(&v13[v12], v22, v7);
  ((void (*)(uint64_t, uint64_t, uint64_t))v23)(v25, v24, v4);
  uint64_t v14 = (char *)swift_allocObject();
  *(void *)(v0 + 176) = v14;
  *((void *)v14 + 2) = v29;
  *((void *)v14 + 3) = v4;
  *((void *)v14 + 4) = v7;
  *((void *)v14 + 5) = v20;
  *((void *)v14 + 6) = v26;
  *((void *)v14 + 7) = v27;
  *((void *)v14 + 8) = v28;
  v18(&v14[(v10 + 72) & ~v10], v25, v4);
  swift_retain_n();
  sub_25A3C5A4C(v26);
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v0 + 184) = v15;
  *uint64_t v15 = v0;
  v15[1] = sub_25A4922A8;
  uint64_t v16 = *(void *)(v0 + 32);
  return withTimeout<A>(_:perform:makeTimeoutError:)(v16, v0 + 16, (uint64_t)&unk_26A41A170, (uint64_t)v13, (uint64_t)&unk_26A41A180, (uint64_t)v14, v29);
}

uint64_t sub_25A4922A8()
{
  uint64_t v2 = (void *)*v1;
  v2[24] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[9];
    swift_release();
    swift_release();
    return MEMORY[0x270FA2498](sub_25A492430, v3, 0);
  }
  else
  {
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v2[1];
    return v4();
  }
}

uint64_t sub_25A492430()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_25A4924A8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_25A38F608;
  void v9[8] = a4;
  unsigned char v9[9] = a2;
  v9[6] = a1;
  v9[7] = a3;
  v9[10] = *a2;
  return MEMORY[0x270FA2498](sub_25A48E200, a2, 0);
}

uint64_t sub_25A492594(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  *(void *)(v5 + 80) = a3;
  *(void *)(v5 + 88) = a4;
  *(void *)(v5 + 64) = a1;
  *(void *)(v5 + 72) = a2;
  *(double *)(v5 + 56) = a5;
  uint64_t v6 = *(void *)(*(void *)a3 + 88);
  *(void *)(v5 + 96) = v6;
  *(void *)(v5 + 104) = *(void *)(v6 - 8);
  *(void *)(v5 + 112) = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_25A492668, 0, 0);
}

uint64_t sub_25A492668()
{
  char v1 = *(uint64_t (**)(double))(v0 + 64);
  if (v1) {
    uint64_t v2 = v1(*(double *)(v0 + 56));
  }
  else {
    uint64_t v2 = 0;
  }
  (*(void (**)(void, void, void))(*(void *)(v0 + 104) + 16))(*(void *)(v0 + 112), *(void *)(v0 + 88), *(void *)(v0 + 96));
  if (v2)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 104) + 8))(*(void *)(v0 + 112), *(void *)(v0 + 96));
  }
  else
  {
    sub_25A492868((uint64_t *)(v0 + 16));
    uint64_t v3 = *(void *)(v0 + 40);
    uint64_t v4 = __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v3);
    uint64_t v5 = *(void *)(v3 - 8);
    uint64_t v6 = swift_task_alloc();
    (*(void (**)(uint64_t, void *, uint64_t))(v5 + 16))(v6, v4, v3);
    uint64_t v7 = sub_25A5102E0();
    if (v7)
    {
      uint64_t v2 = v7;
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v3);
    }
    else
    {
      uint64_t v2 = swift_allocError();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v8, v6, v3);
    }
    (*(void (**)(void, void))(*(void *)(v0 + 104) + 8))(*(void *)(v0 + 112), *(void *)(v0 + 96));
    swift_task_dealloc();
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v9(v2);
}

double sub_25A492868@<D0>(uint64_t *a1@<X8>)
{
  sub_25A50FDB0();
  swift_bridgeObjectRetain();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  sub_25A50F450();
  sub_25A50EDA0();
  swift_bridgeObjectRetain();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  sub_25A510310();
  sub_25A50EDA0();
  a1[3] = (uint64_t)&type metadata for LowValueError;
  a1[4] = sub_25A4947F4();
  uint64_t v2 = swift_allocObject();
  *a1 = v2;
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = 0xE000000000000000;
  double result = 0.0;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(unsigned char *)(v2 + 64) = 2;
  return result;
}

uint64_t ResourceHub.requestResource<>(for:withTimeout:makeTimeoutError:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v6 + 32) = v5;
  char v11 = *(unsigned char *)(a3 + 8);
  *(void *)(v6 + 16) = *(void *)a3;
  *(unsigned char *)(v6 + 24) = v11;
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v6 + 40) = v13;
  *uint64_t v13 = v6;
  v13[1] = sub_25A492AF0;
  return ResourceHub.requestResource(for:with:withTimeout:makeTimeoutError:)(a1, a2, v12, (uint64_t *)(v6 + 16), a4, a5);
}

uint64_t sub_25A492AF0()
{
  uint64_t v2 = (void *)*v1;
  v2[6] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[4];
    return MEMORY[0x270FA2498](sub_25A492C24, v3, 0);
  }
  else
  {
    uint64_t v4 = (uint64_t (*)(void))v2[1];
    return v4();
  }
}

uint64_t sub_25A492C24()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for ResourceHub.ResourceState()
{
  return swift_getGenericMetadata();
}

uint64_t sub_25A492C54(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 48);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_25A3923B4;
  return sub_25A48E6A4(a1, v5, v4);
}

uint64_t sub_25A492D1C()
{
  return sub_25A48E770(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t type metadata accessor for ResourceHub()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for ResourceHub.Request()
{
  return swift_getGenericMetadata();
}

void sub_25A492D58()
{
}

uint64_t sub_25A492D78()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v1 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 56) & ~v4;
  uint64_t v6 = *(void *)(v2 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v5 + *(void *)(v3 + 64) + v7) & ~v7;
  uint64_t v9 = v8 + *(void *)(v6 + 64);
  uint64_t v10 = v4 | v7 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v5, v1);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v8, v2);

  return MEMORY[0x270FA0238](v0, v9, v10);
}

uint64_t sub_25A492EBC(uint64_t a1)
{
  unint64_t v4 = (*(unsigned __int8 *)(*(void *)(v1[3] - 8) + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1[3] - 8) + 80);
  uint64_t v5 = (void *)v1[6];
  uint64_t v6 = (uint64_t)v1 + v4;
  uint64_t v7 = (uint64_t)v1
     + ((v4 + *(void *)(*(void *)(v1[3] - 8) + 64) + *(unsigned __int8 *)(*(void *)(v1[4] - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1[4] - 8) + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_25A38F608;
  return sub_25A4924A8(a1, v5, v6, v7);
}

uint64_t sub_25A492FF4()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  if (*(void *)(v0 + 48)) {
    swift_release();
  }
  uint64_t v5 = (v3 + 72) & ~v3;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v5, v1);

  return MEMORY[0x270FA0238](v0, v5 + v4, v3 | 7);
}

uint64_t sub_25A4930D0(double a1)
{
  uint64_t v4 = v1[6];
  uint64_t v5 = v1[7];
  uint64_t v6 = v1[8];
  uint64_t v7 = (uint64_t)v1
     + ((*(unsigned __int8 *)(*(void *)(v1[3] - 8) + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1[3] - 8) + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_25A3D2554;
  return sub_25A492594(v4, v5, v6, v7, a1);
}

uint64_t sub_25A4931C4()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for ResourceHub(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ResourceHub);
}

uint64_t dispatch thunk of ResourceHub.__allocating_init(serviceName:resourceName:bootstrapResource:)()
{
  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t dispatch thunk of ResourceHub.requestResource(for:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v3 + 184)
                                                          + **(int **)(*(void *)v3 + 184));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = sub_25A3923B4;
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of ResourceHub.requestResource<>(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v2 + 192) + **(int **)(*(void *)v2 + 192));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_25A3923B4;
  return v8(a1, a2);
}

uint64_t dispatch thunk of ResourceHub.deliverResource(_:for:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of ResourceHub.deliverResource<>(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of ResourceHub.purgeResource(for:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

void *sub_25A493520(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

void *sub_25A493564(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_release();
  return a1;
}

uint64_t sub_25A493598()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void *sub_25A493634(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(v4 + 64) <= 8uLL) {
    uint64_t v5 = 8;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  int v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    uint64_t v8 = *(void *)a2;
    void *v3 = *(void *)a2;
    uint64_t v3 = (void *)(v8 + ((unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    unsigned int v9 = a2[v5];
    unsigned int v10 = v9 - 3;
    if (v9 >= 3)
    {
      if (v5 <= 3) {
        uint64_t v11 = v5;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a2;
          goto LABEL_19;
        case 2:
          int v12 = *(unsigned __int16 *)a2;
          goto LABEL_19;
        case 3:
          int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_19;
        case 4:
          int v12 = *(_DWORD *)a2;
LABEL_19:
          int v13 = (v12 | (v10 << (8 * v5))) + 3;
          unsigned int v9 = v12 + 3;
          if (v5 < 4) {
            unsigned int v9 = v13;
          }
          break;
        default:
          break;
      }
    }
    if (v9 == 2)
    {
      (*(void (**)(void *))(v4 + 16))(a1);
      *((unsigned char *)v3 + v5) = 2;
    }
    else if (v9 == 1)
    {
      (*(void (**)(void *))(v4 + 16))(a1);
      *((unsigned char *)v3 + v5) = 1;
    }
    else
    {
      *a1 = *(void *)a2;
      *((unsigned char *)a1 + v5) = 0;
      swift_bridgeObjectRetain();
    }
  }
  return v3;
}

uint64_t sub_25A4937D8(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  if (v2 <= 8) {
    unint64_t v2 = 8;
  }
  unsigned int v3 = a1[v2];
  unsigned int v4 = v3 - 3;
  if (v3 >= 3)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_12:
        int v7 = (v6 | (v4 << (8 * v2))) + 3;
        unsigned int v3 = v6 + 3;
        if (v2 < 4) {
          unsigned int v3 = v7;
        }
        break;
      default:
        break;
    }
  }
  if (v3 == 2 || v3 == 1) {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

void *sub_25A4938E0(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(v4 + 64) <= 8uLL) {
    uint64_t v5 = 8;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v6 = a2[v5];
  unsigned int v7 = v6 - 3;
  if (v6 >= 3)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a2;
        goto LABEL_13;
      case 2:
        int v9 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v9 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v9 = *(_DWORD *)a2;
LABEL_13:
        int v10 = (v9 | (v7 << (8 * v5))) + 3;
        unsigned int v6 = v9 + 3;
        if (v5 < 4) {
          unsigned int v6 = v10;
        }
        break;
      default:
        break;
    }
  }
  if (v6 == 2)
  {
    (*(void (**)(void *))(v4 + 16))(a1);
    char v11 = 2;
  }
  else
  {
    if (v6 != 1)
    {
      *a1 = *(void *)a2;
      *((unsigned char *)a1 + v5) = 0;
      swift_bridgeObjectRetain();
      return a1;
    }
    (*(void (**)(void *))(v4 + 16))(a1);
    char v11 = 1;
  }
  *((unsigned char *)a1 + v5) = v11;
  return a1;
}

unsigned __int8 *sub_25A493A40(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 8uLL) {
      uint64_t v7 = 8;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 3;
    if (v8 >= 3)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 3;
          unsigned int v8 = v11 + 3;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 2 || v8 == 1) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    else {
      swift_bridgeObjectRelease();
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 3;
    if (v13 >= 3)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_29;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_29;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_29;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_29:
          int v17 = (v16 | (v14 << (8 * v7))) + 3;
          unsigned int v13 = v16 + 3;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 2)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      char v18 = 2;
    }
    else
    {
      if (v13 != 1)
      {
        *(void *)a1 = *(void *)a2;
        a1[v7] = 0;
        swift_bridgeObjectRetain();
        return a1;
      }
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      char v18 = 1;
    }
    a1[v7] = v18;
  }
  return a1;
}

void *sub_25A493C90(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(v4 + 64) <= 8uLL) {
    uint64_t v5 = 8;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v6 = a2[v5];
  unsigned int v7 = v6 - 3;
  if (v6 >= 3)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a2;
        goto LABEL_13;
      case 2:
        int v9 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v9 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v9 = *(_DWORD *)a2;
LABEL_13:
        int v10 = (v9 | (v7 << (8 * v5))) + 3;
        unsigned int v6 = v9 + 3;
        if (v5 < 4) {
          unsigned int v6 = v10;
        }
        break;
      default:
        break;
    }
  }
  if (v6 == 2)
  {
    (*(void (**)(void *))(v4 + 32))(a1);
    char v11 = 2;
  }
  else if (v6 == 1)
  {
    (*(void (**)(void *))(v4 + 32))(a1);
    char v11 = 1;
  }
  else
  {
    char v11 = 0;
    *a1 = *(void *)a2;
  }
  *((unsigned char *)a1 + v5) = v11;
  return a1;
}

unsigned __int8 *sub_25A493DEC(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 8uLL) {
      uint64_t v7 = 8;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 3;
    if (v8 >= 3)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 3;
          unsigned int v8 = v11 + 3;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 2 || v8 == 1) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    else {
      swift_bridgeObjectRelease();
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 3;
    if (v13 >= 3)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_29;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_29;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_29;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_29:
          int v17 = (v16 | (v14 << (8 * v7))) + 3;
          unsigned int v13 = v16 + 3;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 2)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v18 = 2;
    }
    else if (v13 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v18 = 1;
    }
    else
    {
      char v18 = 0;
      *(void *)a1 = *(void *)a2;
    }
    a1[v7] = v18;
  }
  return a1;
}

uint64_t sub_25A494038(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v4 = 8;
  if (*(void *)(v3 + 64) > 8uLL) {
    uint64_t v4 = *(void *)(v3 + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_22;
  }
  uint64_t v5 = v4 + 1;
  char v6 = 8 * (v4 + 1);
  if ((v4 + 1) <= 3)
  {
    unsigned int v9 = ((a2 + ~(-1 << v6) - 253) >> v6) + 1;
    if (HIWORD(v9))
    {
      int v7 = *(_DWORD *)((char *)a1 + v5);
      if (!v7) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 > 0xFF)
    {
      int v7 = *(unsigned __int16 *)((char *)a1 + v5);
      if (!*(unsigned __int16 *)((char *)a1 + v5)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 < 2)
    {
LABEL_22:
      unsigned int v11 = *((unsigned __int8 *)a1 + v4);
      if (v11 >= 3) {
        return (v11 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v7 = *((unsigned __int8 *)a1 + v5);
  if (!*((unsigned char *)a1 + v5)) {
    goto LABEL_22;
  }
LABEL_14:
  int v10 = (v7 - 1) << v6;
  if (v5 > 3) {
    int v10 = 0;
  }
  if (v5)
  {
    if (v5 > 3) {
      LODWORD(v5) = 4;
    }
    switch((int)v5)
    {
      case 2:
        LODWORD(v5) = *a1;
        break;
      case 3:
        LODWORD(v5) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v5) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v5) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v5 | v10) + 254;
}

void sub_25A49416C(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (v5 <= 8) {
    unint64_t v5 = 8;
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFE)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 253) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFD)
  {
    unsigned int v8 = a2 - 254;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x25A494334);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_25A49435C(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v3 = 8;
  if (*(void *)(v2 + 64) > 8uLL) {
    uint64_t v3 = *(void *)(v2 + 64);
  }
  uint64_t v4 = a1[v3];
  int v5 = v4 - 3;
  if (v4 >= 3)
  {
    if (v3 <= 3) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = 4;
    }
    switch(v6)
    {
      case 1:
        int v7 = *a1;
        goto LABEL_12;
      case 2:
        int v7 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v7 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v7 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v8 = (v7 | (v5 << (8 * v3))) + 3;
        LODWORD(v4) = v7 + 3;
        if (v3 >= 4) {
          uint64_t v4 = v4;
        }
        else {
          uint64_t v4 = v8;
        }
        break;
      default:
        return v4;
    }
  }
  return v4;
}

void sub_25A494414(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 8uLL) {
    size_t v4 = 8;
  }
  else {
    size_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  if (a2 > 2)
  {
    unsigned int v5 = a2 - 3;
    if (v4 < 4)
    {
      unsigned int v6 = v5 >> (8 * v4);
      int v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 3;
      bzero(a1, v4);
      if (v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if (v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 3;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

uint64_t sub_25A4944EC(uint64_t a1)
{
  return sub_25A491950(a1, *(void *)(v1 + 48));
}

uint64_t sub_25A494510()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v1 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 72) & ~v4;
  uint64_t v6 = *(void *)(v2 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v5 + *(void *)(v3 + 64) + v7) & ~v7;
  uint64_t v9 = v8 + *(void *)(v6 + 64);
  uint64_t v10 = v4 | v7 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v5, v1);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v8, v2);

  return MEMORY[0x270FA0238](v0, v9, v10);
}

uint64_t sub_25A49465C(uint64_t a1)
{
  unint64_t v4 = (*(unsigned __int8 *)(*(void *)(v1[5] - 8) + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1[5] - 8) + 80);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[8];
  uint64_t v8 = (uint64_t)v1 + v4;
  uint64_t v9 = (uint64_t)v1
     + ((v4 + *(void *)(*(void *)(v1[5] - 8) + 64) + *(unsigned __int8 *)(*(void *)(v1[6] - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1[6] - 8) + 80));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_25A3923B4;
  return sub_25A490BF4(a1, v5, v6, v7, v8, v9);
}

uint64_t sub_25A4947A8()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

BOOL sub_25A4947E0(void *a1)
{
  return *a1 == *(void *)(v1 + 48);
}

unint64_t sub_25A4947F4()
{
  unint64_t result = qword_26A41A338;
  if (!qword_26A41A338)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_26A41A338);
  }
  return result;
}

uint64_t sub_25A494848()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 65, 7);
}

uint64_t sub_25A494890()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 80) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t sub_25A49495C()
{
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v4 = (char *)v0
     + ((*(unsigned __int8 *)(*(void *)(v0[5] - 8) + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v0[5] - 8) + 80));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[3] = v2;
  v5[4] = v4;
  v5[1] = sub_25A38F608;
  uint64_t v5[2] = v3;
  return MEMORY[0x270FA2498](sub_25A48E9F8, v2, 0);
}

uint64_t CodableBox.description.getter()
{
  uint64_t v0 = sub_25A495354();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t CodableBox.init(wrapping:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  sub_25A50E220();
  swift_allocObject();
  sub_25A50E210();
  uint64_t v6 = sub_25A50E200();
  uint64_t v8 = v7;
  swift_release();
  uint64_t v10 = 0;
  unint64_t v11 = 0xE000000000000000;
  sub_25A510310();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  *a3 = 0;
  a3[1] = 0xE000000000000000;
  a3[2] = v6;
  a3[3] = v8;
  return result;
}

uint64_t CodableBox.value.getter()
{
  return swift_release();
}

uint64_t sub_25A494DB4()
{
  uint64_t v0 = sub_25A510190();
  swift_bridgeObjectRelease();
  if (v0 == 1) {
    unsigned int v1 = 1;
  }
  else {
    unsigned int v1 = 2;
  }
  if (v0) {
    return v1;
  }
  else {
    return 0;
  }
}

uint64_t sub_25A494E08(char a1)
{
  if (a1) {
    return 1635017060;
  }
  else {
    return 0x7470697263736564;
  }
}

uint64_t sub_25A494E40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x263F8D338];

  return MEMORY[0x270F9F940](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_25A494EB4(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x263F8D320];

  return MEMORY[0x270F9DAE8](a1, a2, WitnessTable, v5);
}

uint64_t sub_25A494F20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x263F8D320];

  return MEMORY[0x270F9DAF8](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_25A494F90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x263F8D320];

  return MEMORY[0x270F9DAF0](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_25A495000@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_25A494DB4();
  *a1 = result;
  return result;
}

uint64_t sub_25A49503C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_25A494E08(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_25A495074()
{
  return sub_25A494E08(*v0);
}

uint64_t CodableBox.propertyListValue.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = sub_25A4950EC(*v1, v1[1], v1[2], v1[3]);
  uint64_t v4 = sub_25A3EB380(v3);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v4;
  return result;
}

uint64_t sub_25A4950EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v9 = 0;
  v8[0] = a1;
  v8[1] = a2;
  char v7 = 1;
  v6[0] = a3;
  v6[1] = a4;
  uint64_t v4 = type metadata accessor for CodableBox.Key();
  return static PropertyListBuilder.buildBlock<A, B, C, D>(_:_:)(&v9, (uint64_t)v8, &v7, (char *)v6, v4, MEMORY[0x263F8D310], v4, MEMORY[0x263F06F78], (uint64_t)&off_270834B28, (uint64_t)&protocol witness table for String, (uint64_t)&off_270834B28, (uint64_t)&protocol witness table for Data);
}

uint64_t CodableBox.init(propertyListValue:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = type metadata accessor for CodableBox.Key();
  uint64_t v13 = v5;
  unsigned int v14 = &off_270834B28;
  LOBYTE(v12[0]) = 0;
  uint64_t v6 = sub_25A3E690C(v12, v4);
  uint64_t v8 = v7;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  if (v2) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v13 = v5;
  unsigned int v14 = &off_270834B28;
  LOBYTE(v12[0]) = 1;
  swift_bridgeObjectRetain();
  sub_25A3E6A64(v12, v4, &v11);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  swift_bridgeObjectRelease();
  long long v10 = v11;
  swift_bridgeObjectRetain();
  sub_25A39375C(v10, *((unint64_t *)&v10 + 1));
  swift_bridgeObjectRelease();
  *(void *)a2 = v6;
  *(void *)(a2 + 8) = v8;
  *(_OWORD *)(a2 + 16) = v10;
  swift_bridgeObjectRelease();
  return sub_25A3B9048(v10, *((unint64_t *)&v10 + 1));
}

uint64_t sub_25A4952BC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return CodableBox.init(propertyListValue:)(a1, a2);
}

uint64_t sub_25A4952E0()
{
  uint64_t v0 = sub_25A495354();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_25A495318(void (*a1)(void))
{
  a1();

  return sub_25A5105D0();
}

uint64_t sub_25A495354()
{
  return *(void *)v0;
}

uint64_t type metadata accessor for CodableBox.Key()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A495374(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void *)(a1 + 24);

  return sub_25A3B9048(v2, v3);
}

void *sub_25A4953B0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[2];
  unint64_t v5 = a2[3];
  swift_bridgeObjectRetain();
  sub_25A39375C(v4, v5);
  a1[2] = v4;
  a1[3] = v5;
  return a1;
}

void *sub_25A4953FC(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[2];
  unint64_t v4 = a2[3];
  sub_25A39375C(v5, v4);
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  a1[2] = v5;
  a1[3] = v4;
  sub_25A3B9048(v6, v7);
  return a1;
}

void *sub_25A495468(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a1[2];
  unint64_t v6 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  sub_25A3B9048(v5, v6);
  return a1;
}

uint64_t type metadata accessor for CodableBox()
{
  return __swift_instantiateGenericMetadata();
}

unsigned char *sub_25A4954C8(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25A495594);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_25A4955BC()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A4955D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](a1);
  unint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v8 + 24);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_25A510540();
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v18 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))((char *)&v18 - v14, a1, v13);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v15, v9);
    return sub_25A50F240();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v15, v3);
    return sub_25A50F250();
  }
}

uint64_t sub_25A495814(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  if (a2)
  {
    swift_getObjectType();
    Actor.verifyIsolated(_:file:line:)();
  }
  return a4(a1);
}

uint64_t sub_25A4958A8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for IsolatedTask();
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v9, a1, v4);
  uint64_t v6 = MEMORY[0x26113F1A0](v10);
  uint64_t v7 = v10[1];
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v9, v4);
  *a2 = v6;
  a2[1] = v7;
  return result;
}

uint64_t IsolatedTask.executor.getter()
{
  return MEMORY[0x26113F1A0](v0 + 8);
}

uint64_t IsolatedTask.executor.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a2;
  swift_unknownObjectWeakAssign();

  return swift_unknownObjectRelease();
}

uint64_t (*IsolatedTask.executor.modify(uint64_t *a1))(uint64_t a1)
{
  a1[2] = v1;
  uint64_t v3 = MEMORY[0x26113F1A0](v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  *a1 = v3;
  a1[1] = v4;
  return sub_25A495A2C;
}

uint64_t sub_25A495A2C(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 16) + 16) = *(void *)(a1 + 8);
  swift_unknownObjectWeakAssign();

  return swift_unknownObjectRelease();
}

uint64_t IsolatedTask.init(file:line:column:function:on:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11)
{
  v12[0] = a1;
  v12[1] = a2;
  char v13 = a3;
  uint64_t v14 = a4;
  uint64_t v15 = a5;
  uint64_t v16 = a6;
  uint64_t v17 = a7;
  char v18 = a8;
  return sub_25A495AD0((uint64_t)v12, a11, a9);
}

uint64_t sub_25A495AD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  char v13 = *(unsigned char *)(a1 + 16);
  long long v12 = *(_OWORD *)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 40);
  char v9 = *(unsigned char *)(a1 + 56);
  a3[2] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v6 = type metadata accessor for IsolatedTask.ObserverBox();
  type metadata accessor for ObserverAndTokenStorage();
  type metadata accessor for PromiseFulfillment();
  type metadata accessor for FulfillOnceState();
  sub_25A3CCCF8(v6, (uint64_t)v24);
  v23[0] = v24[0];
  v23[1] = v24[1];
  long long v23[2] = v24[2];
  v17[0] = v4;
  v17[1] = v5;
  char v18 = v13;
  long long v19 = v12;
  uint64_t v20 = v11;
  uint64_t v21 = v10;
  char v22 = v9;
  long long v16 = xmmword_25A511960;
  sub_25A50FDB0();
  swift_bridgeObjectRelease();
  strcpy((char *)v15, "IsolatedTask<");
  HIWORD(v15[1]) = -4864;
  sub_25A5105D0();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  sub_25A5105D0();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  uint64_t v7 = sub_25A3B275C((uint64_t)v23, v17, 0, 0, (uint64_t *)&v16, v15[0], v15[1], 0x656C6C69666C7566, 0xE900000000000064);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *a3 = v7;
  a3[2] = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t static IsolatedTask.create(file:line:column:function:on:)(uint64_t *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11)
{
  v14[0] = a2;
  v14[1] = a3;
  char v15 = a4;
  uint64_t v16 = a5;
  uint64_t v17 = a6;
  uint64_t v18 = a7;
  uint64_t v19 = a8;
  char v20 = a9;
  swift_unknownObjectRetain();
  sub_25A495AD0((uint64_t)v14, a11, a1);
  type metadata accessor for IsolatedTask.Promise();
  uint64_t v12 = type metadata accessor for IsolatedTask();
  (*(void (**)(void *, uint64_t *, uint64_t))(*(void *)(v12 - 8) + 16))(v14, a1, v12);
  swift_allocObject();
  return sub_25A498CAC((uint64_t)v14);
}

uint64_t type metadata accessor for IsolatedTask.Promise()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for IsolatedTask()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A495E6C(uint64_t a1)
{
  return sub_25A498CAC(a1);
}

uint64_t IsolatedTask.description.getter()
{
  sub_25A50FDB0();
  swift_bridgeObjectRelease();
  strcpy((char *)v1, "IsolatedTask<");
  sub_25A5105D0();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  sub_25A5105D0();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  Callsite.description.getter();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  return v1[0];
}

uint64_t sub_25A495FC0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v73 = a5;
  uint64_t v71 = a4;
  uint64_t v70 = a3;
  uint64_t v69 = a2;
  uint64_t v7 = (void (*)(void))a6[2];
  uint64_t v8 = a6[3];
  uint64_t v9 = a6[4];
  uint64_t v10 = type metadata accessor for PromiseFulfillment();
  uint64_t v63 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v62 = (char *)v60 - v11;
  uint64_t v75 = v7;
  uint64_t v76 = v9;
  uint64_t v77 = v8;
  v60[0] = type metadata accessor for IsolatedTask.ObserverBox();
  v60[1] = type metadata accessor for ObserverAndTokenStorage();
  uint64_t v66 = v10;
  uint64_t v65 = type metadata accessor for FulfillOnceState.FulfillmentOutcome();
  uint64_t v64 = *(void *)(v65 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v65);
  uint64_t v61 = (char *)v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v72 = (char *)v60 - v14;
  uint64_t v15 = *a1;
  uint64_t v67 = a1[1];
  int v91 = *((unsigned __int8 *)a1 + 16);
  uint64_t v16 = a1[3];
  uint64_t v17 = a1[4];
  uint64_t v19 = a1[5];
  uint64_t v18 = a1[6];
  char v20 = v68;
  char v21 = *((unsigned char *)a1 + 56);
  uint64_t v22 = MEMORY[0x26113F1A0](v68 + 1);
  if (v22)
  {
    swift_getObjectType();
    Actor.verifyIsolated(_:file:line:)();
    uint64_t v22 = swift_unknownObjectRelease();
  }
  uint64_t v23 = *v20;
  *(void *)&long long v78 = v15;
  *((void *)&v78 + 1) = v67;
  char v79 = v91;
  uint64_t v80 = v16;
  uint64_t v81 = v17;
  uint64_t v82 = v19;
  uint64_t v83 = v18;
  char v84 = v21;
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  uint64_t v26 = v75;
  uint64_t v25 = v76;
  uint64_t v27 = v77;
  v60[-6] = v75;
  v60[-5] = v27;
  uint64_t v28 = v69;
  v60[-4] = v25;
  v60[-3] = v28;
  v60[-2] = v70;
  MEMORY[0x270FA5388](v24);
  v60[-6] = v26;
  v60[-5] = v29;
  uint64_t v30 = v71;
  v60[-4] = v31;
  v60[-3] = v30;
  uint64_t v32 = v74;
  v60[-2] = v73;
  uint64_t v33 = v72;
  FulfillOnceState.fulfill(callsite:makeFulfilledState:ifAlreadyFulfilled:)(&v78, (uint64_t)sub_25A391AA8, v34, (uint64_t)sub_25A49ACC4, (uint64_t)&v60[-8]);
  if (v32) {
    return v23 & 1;
  }
  uint64_t v35 = v64;
  uint64_t v36 = v61;
  uint64_t v37 = v65;
  (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v61, v33, v65);
  uint64_t v38 = v66;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  int v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48))(v36, 1, TupleTypeMetadata2);
  LOBYTE(v23) = v40 != 1;
  if (v40 == 1)
  {
    uint64_t v58 = *(void (**)(char *, uint64_t))(v35 + 8);
    v58(v33, v37);
    v58(v36, v37);
    return v23 & 1;
  }
  LODWORD(v70) = 1;
  uint64_t v41 = v36;
  char v42 = v26;
  uint64_t v44 = *(void *)v41;
  uint64_t v43 = *((void *)v41 + 1);
  uint64_t v71 = *((void *)v41 + 2);
  uint64_t v45 = v62;
  uint64_t v46 = (*(uint64_t (**)(char *, char *, uint64_t))(v63 + 32))(v62, &v41[*(int *)(TupleTypeMetadata2 + 48)], v38);
  uint64_t v74 = v60;
  *(void *)&long long v78 = v44;
  *((void *)&v78 + 1) = v43;
  MEMORY[0x270FA5388](v46);
  uint64_t v47 = v77;
  v60[-4] = v42;
  v60[-3] = v47;
  v60[-2] = v76;
  v60[-1] = v45;
  sub_25A3CE5CC();
  type metadata accessor for OrderedDictionary();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  uint64_t v48 = v71;
  sub_25A50EFF0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v49 = *(void *)(v48 + 16);
  if (!v49)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_16:
    (*(void (**)(char *, uint64_t))(v35 + 8))(v72, v37);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v62, v38);
    LOBYTE(v23) = v70;
    return v23 & 1;
  }
  uint64_t v69 = v43;
  uint64_t v77 = 0;
  v85[0] = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/IsolatedTask.swift";
  v85[1] = 124;
  char v86 = 2;
  long long v87 = xmmword_25A519D80;
  uint64_t v88 = "fulfill(callsite:makeFulfillment:ifAlreadyCompleted:)";
  uint64_t v89 = 53;
  char v90 = 2;
  uint64_t v50 = swift_bridgeObjectRetain_n();
  uint64_t v51 = (uint64_t *)(v48 + 64);
  uint64_t v73 = v44;
  while (1)
  {
    uint64_t v75 = (void (*)(void))*(v51 - 2);
    uint64_t v76 = v49;
    uint64_t v52 = *v51;
    uint64_t v53 = *(v51 - 4);
    uint64_t v74 = (void *)*(v51 - 3);
    uint64_t v54 = *(void *)(v52 + 144);
    MEMORY[0x270FA5388](v50);
    v60[-6] = nullsub_1;
    v60[-5] = 0;
    v60[-4] = v85;
    v60[-3] = v52;
    v60[-2] = sub_25A3B1EC4;
    v60[-1] = 0;
    swift_unknownObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v54 + 76));
    uint64_t v55 = v77;
    sub_25A3B86E0((long long *)(v54 + 16), &v92);
    uint64_t v77 = v55;
    uint64_t v56 = (os_unfair_lock_s *)(v54 + 76);
    if (v55) {
      break;
    }
    os_unfair_lock_unlock(v56);
    swift_release();
    uint64_t v57 = v76;
    if ((v92 & 1) == 0)
    {
      if (v53)
      {
        swift_getObjectType();
        Actor.verifyIsolated(_:file:line:)();
      }
      v75();
    }
    swift_release();
    swift_release();
    uint64_t v50 = swift_unknownObjectRelease();
    v51 += 5;
    uint64_t v49 = v57 - 1;
    if (!v49)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      uint64_t v38 = v66;
      uint64_t v37 = v65;
      uint64_t v35 = v64;
      goto LABEL_16;
    }
  }
  os_unfair_lock_unlock(v56);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_25A4967B4(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void *), uint64_t a4)
{
  uint64_t v25 = a4;
  uint64_t v36 = a3;
  uint64_t v6 = type metadata accessor for PromiseFulfillment();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v16 - v8;
  uint64_t v10 = *a2;
  uint64_t v11 = a2[1];
  char v12 = *((unsigned char *)a2 + 16);
  uint64_t v13 = a2[3];
  uint64_t v22 = a2[4];
  uint64_t v23 = v13;
  uint64_t v14 = a2[5];
  uint64_t v20 = a2[6];
  uint64_t v21 = v14;
  int v19 = *((unsigned __int8 *)a2 + 56);
  uint64_t v18 = a2[8];
  uint64_t v17 = a2[9];
  long long v24 = *((_OWORD *)a2 + 5);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v16 - v8, a1, v6);
  LODWORD(a2) = swift_getEnumCaseMultiPayload();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (a2 <= 1)
  {
    v26[0] = v10;
    v26[1] = v11;
    char v27 = v12;
    uint64_t v28 = v23;
    uint64_t v29 = v22;
    uint64_t v30 = v21;
    uint64_t v31 = v20;
    char v32 = v19;
    uint64_t v33 = v18;
    uint64_t v34 = v17;
    long long v35 = v24;
    return v36(v26);
  }
  return result;
}

uint64_t sub_25A496980@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  uint64_t v38 = a1;
  uint64_t v44 = a4;
  uint64_t v6 = a3[2];
  uint64_t v7 = a3[3];
  uint64_t v37 = a3;
  uint64_t v8 = a3[4];
  uint64_t v9 = type metadata accessor for PromiseFulfillment();
  uint64_t v35 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v33 = (char *)&v33 - v10;
  type metadata accessor for IsolatedTask.ObserverBox();
  type metadata accessor for ObserverAndTokenStorage();
  uint64_t v36 = v9;
  uint64_t updated = type metadata accessor for FulfillOnceState.WaitingStateUpdateResult();
  uint64_t v12 = *(void *)(updated - 8);
  uint64_t v13 = MEMORY[0x270FA5388](updated);
  uint64_t v15 = (uint64_t *)((char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v33 - v16;
  uint64_t v18 = MEMORY[0x26113F1A0](v4 + 8);
  uint64_t v19 = *(void *)(v4 + 16);
  uint64_t v34 = v4;
  uint64_t v41 = v6;
  uint64_t v46 = v6;
  uint64_t v47 = v7;
  uint64_t v48 = v8;
  uint64_t v49 = v18;
  uint64_t v40 = v18;
  uint64_t v20 = v38;
  uint64_t v50 = v19;
  uint64_t v51 = v38;
  uint64_t v52 = a2;
  uint64_t v43 = a2;
  swift_retain();
  FulfillOnceState.updateWaitingState<A>(update:)((uint64_t)sub_25A49AD84, (uint64_t)v45, (uint64_t)&type metadata for Identifier);
  uint64_t v42 = v12;
  uint64_t v21 = *(void (**)(uint64_t *, char *, uint64_t))(v12 + 16);
  uint64_t v39 = v17;
  v21(v15, v17, updated);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v22 = v35;
    uint64_t v23 = (uint64_t)v33;
    uint64_t v24 = v36;
    (*(void (**)(char *, uint64_t *, uint64_t))(v35 + 32))(v33, v15, v36);
    sub_25A495814(v23, v40, v19, v20);
    swift_release();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v23, v24);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v39, updated);
    uint64_t v26 = 0;
    char v27 = 0;
    uint64_t v28 = 0;
  }
  else
  {
    uint64_t v29 = *v15;
    uint64_t v30 = v37;
    uint64_t v31 = *(v37 - 1);
    (*(void (**)(unsigned char *, uint64_t, void *))(v31 + 16))(v53, v34, v37);
    char v27 = (void *)swift_allocObject();
    long long v27[2] = v41;
    v27[3] = v7;
    v27[4] = v8;
    (*(void (**)(void *, unsigned char *, void *))(v31 + 32))(v27 + 5, v53, v30);
    v27[8] = v29;
    *(void *)&long long v54 = "/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFou"
                      "ndation/IsolatedTask.swift";
    *((void *)&v54 + 1) = 124;
    char v55 = 2;
    long long v56 = xmmword_25A519D90;
    uint64_t v57 = "observeFulfillment(observer:)";
    uint64_t v58 = 29;
    char v59 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A416708);
    swift_allocObject();
    uint64_t v28 = sub_25A3B7704(&v54, 0, 0, 1, 0, 0xD000000000000011, 0x800000025A51E350, 0x64656C65636E6163, 0xE800000000000000);
    swift_release();
    swift_unknownObjectRelease();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v39, updated);
    uint64_t v26 = sub_25A49ADD8;
  }
  char v32 = v44;
  *uint64_t v44 = 0;
  v32[1] = 0;
  long long v32[2] = v26;
  uint64_t v32[3] = v27;
  v32[4] = v28;
  return result;
}

uint64_t sub_25A496E98@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  v8[0] = a1;
  v8[1] = a2;
  void v8[2] = a3;
  v8[3] = a4;
  type metadata accessor for IsolatedTask.ObserverBox();
  uint64_t v6 = type metadata accessor for ObserverAndTokenStorage();
  return sub_25A3CCA60((uint64_t)v8, v6, a5);
}

uint64_t sub_25A496F0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for IsolatedTask.ObserverBox();
  type metadata accessor for ObserverAndTokenStorage();
  type metadata accessor for PromiseFulfillment();
  uint64_t v9 = MEMORY[0x263F8EE60] + 8;
  uint64_t updated = type metadata accessor for FulfillOnceState.WaitingStateUpdateResult();
  uint64_t v11 = *(void *)(updated - 8);
  MEMORY[0x270FA5388](updated);
  uint64_t v13 = &v15[-v12];
  uint64_t v16 = a3;
  uint64_t v17 = a4;
  uint64_t v18 = a5;
  uint64_t v19 = a2;
  FulfillOnceState.updateWaitingState<A>(update:)((uint64_t)sub_25A49ADEC, (uint64_t)v15, v9);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v11 + 8))(v13, updated);
}

uint64_t sub_25A497080(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  type metadata accessor for IsolatedTask.ObserverBox();
  uint64_t v2 = type metadata accessor for ObserverAndTokenStorage();
  return sub_25A3CCC14(&v4, v2);
}

uint64_t IsolatedTask.observe<>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  return sub_25A4973BC(a1, a2, a3, sub_25A49726C, a4);
}

{
  return sub_25A4973BC(a1, a2, a3, sub_25A497390, a4);
}

uint64_t sub_25A497108(uint64_t a1, void (*a2)(char *))
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v3 = sub_25A510540();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v9 - v5;
  uint64_t v7 = type metadata accessor for PromiseFulfillment();
  sub_25A419230(v7, v6);
  a2(v6);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_25A497234()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_25A49726C(uint64_t a1)
{
  return sub_25A497108(a1, *(void (**)(char *))(v1 + 24));
}

uint64_t sub_25A497298(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for PromiseFulfillment();
  sub_25A417108(v9, (uint64_t)v8);
  a2(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, a4);
}

uint64_t sub_25A497390(uint64_t a1)
{
  return sub_25A497298(a1, *(void (**)(char *))(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 16));
}

uint64_t IsolatedTask.observeSuccess<>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  return sub_25A4973BC(a1, a2, a3, sub_25A497634, a4);
}

uint64_t sub_25A4973BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t (*a4)(uint64_t)@<X4>, void *a5@<X8>)
{
  uint64_t v10 = (void *)swift_allocObject();
  void v10[2] = a3[2];
  void v10[3] = a1;
  v10[4] = a2;
  swift_retain();
  sub_25A496980(a4, (uint64_t)v10, a3, a5);

  return swift_release();
}

uint64_t sub_25A497454(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v10 = type metadata accessor for PromiseFulfillment();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v15 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v15 - v12, a1, v10);
  if (swift_getEnumCaseMultiPayload()) {
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v13, a4);
  a2(v9);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, a4);
}

uint64_t sub_25A497634(uint64_t a1)
{
  return sub_25A497454(a1, *(void (**)(char *))(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 16));
}

void *IsolatedTask.onFulfillment<>(observer:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25A49778C(a1, a2, a3, (void *(*)(uint64_t *__return_ptr))IsolatedTask.observe<>(_:));
}

uint64_t CancelationToken<>.cancel<A, B>(onFulfillmentOf:)()
{
  uint64_t v1 = *(void *)(v0 + 32);
  long long v2 = *(_OWORD *)(v0 + 16);
  v5[0] = *(_OWORD *)v0;
  v5[1] = v2;
  uint64_t v6 = v1;
  uint64_t v3 = (void *)type metadata accessor for IsolatedTask();
  return sub_25A497A9C((uint64_t)v5, v3);
}

uint64_t IsolatedTask.onFulfillment<>(observer:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result = IsolatedTask.observe<>(_:)(a1, a2, a3, &v8);
  uint64_t v4 = v10;
  if (v10)
  {
    uint64_t v6 = v8;
    uint64_t v5 = v9;
    v13[0] = v8;
    v13[1] = v9;
    _OWORD v13[2] = v10;
    void v13[3] = v11;
    void v13[4] = v12;
    uint64_t v7 = (void *)type metadata accessor for IsolatedTask();
    sub_25A497A9C((uint64_t)v13, v7);
    return sub_25A484F74(v6, v5, v4);
  }
  return result;
}

void *IsolatedTask.onSuccess<>(observer:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25A49778C(a1, a2, a3, (void *(*)(uint64_t *__return_ptr))IsolatedTask.observeSuccess<>(_:));
}

void *sub_25A49778C(uint64_t a1, uint64_t a2, uint64_t a3, void *(*a4)(uint64_t *__return_ptr))
{
  uint64_t result = a4(&v9);
  uint64_t v5 = v11;
  if (v11)
  {
    uint64_t v7 = v9;
    uint64_t v6 = v10;
    v14[0] = v9;
    v14[1] = v10;
    void v14[2] = v11;
    _OWORD v14[3] = v12;
    void v14[4] = v13;
    uint64_t v8 = (void *)type metadata accessor for IsolatedTask();
    sub_25A497A9C((uint64_t)v14, v8);
    return (void *)sub_25A484F74(v7, v6, v5);
  }
  return result;
}

uint64_t sub_25A497854(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = (void *)swift_allocObject();
  void v6[2] = a3[2];
  void v6[3] = a1;
  v6[4] = a2;
  swift_retain();
  sub_25A496980(sub_25A49AD24, (uint64_t)v6, a3, v12);
  uint64_t result = swift_release();
  uint64_t v8 = v13;
  if (v13)
  {
    uint64_t v9 = v12[0];
    uint64_t v10 = v12[1];
    uint64_t v11 = (void *)type metadata accessor for IsolatedTask();
    sub_25A497A9C((uint64_t)v12, v11);
    return sub_25A484F74(v9, v10, v8);
  }
  return result;
}

uint64_t sub_25A497974(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v4 = type metadata accessor for PromiseFulfillment();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v9 - v6;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v9 - v6, a1, v4);
  LODWORD(a1) = swift_getEnumCaseMultiPayload();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (a1 == 2) {
    return a2(result);
  }
  return result;
}

uint64_t sub_25A497A9C(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[2];
  uint64_t v4 = a2[3];
  uint64_t v5 = a2[4];
  type metadata accessor for IsolatedTask.ObserverBox();
  type metadata accessor for ObserverAndTokenStorage();
  type metadata accessor for PromiseFulfillment();
  uint64_t v6 = MEMORY[0x263F8EE60] + 8;
  uint64_t updated = type metadata accessor for FulfillOnceState.WaitingStateUpdateResult();
  uint64_t v8 = *(void *)(updated - 8);
  uint64_t v9 = MEMORY[0x270FA5388](updated);
  uint64_t v11 = &v17[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = &v17[-v12];
  long long v14 = *(_OWORD *)(a1 + 16);
  v22[0] = *(_OWORD *)a1;
  v22[1] = v14;
  uint64_t v23 = *(void *)(a1 + 32);
  uint64_t v18 = v3;
  uint64_t v19 = v4;
  uint64_t v20 = v5;
  uint64_t v21 = v22;
  FulfillOnceState.updateWaitingState<A>(update:)((uint64_t)sub_25A49AD30, (uint64_t)v17, v6);
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v8 + 16))(v11, v13, updated);
  if (swift_getEnumCaseMultiPayload() != 1) {
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v8 + 8))(v13, updated);
  }
  sub_25A50693C((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/IsolatedTask.swift", 124, 2, 171, 45, (uint64_t)"manage(token:)", 14, 2);
  uint64_t v15 = *(void (**)(unsigned char *, uint64_t))(v8 + 8);
  v15(v13, updated);
  return ((uint64_t (*)(unsigned char *, uint64_t))v15)(v11, updated);
}

__n128 sub_25A497CD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 16);
  sub_25A49AD3C(a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v4 = sub_25A38AFD8(0, v4[2] + 1, 1, v4);
  }
  unint64_t v6 = v4[2];
  unint64_t v5 = v4[3];
  if (v6 >= v5 >> 1) {
    uint64_t v4 = sub_25A38AFD8((void *)(v5 > 1), v6 + 1, 1, v4);
  }
  _OWORD v4[2] = v6 + 1;
  uint64_t v7 = (__n128 *)&v4[5 * v6];
  __n128 result = *(__n128 *)a2;
  __n128 v9 = *(__n128 *)(a2 + 16);
  v7[4].n128_u64[0] = *(void *)(a2 + 32);
  long long v7[2] = result;
  void v7[3] = v9;
  *(void *)(a1 + 16) = v4;
  return result;
}

BOOL IsolatedTask.isFulfilled.getter()
{
  type metadata accessor for IsolatedTask.ObserverBox();
  type metadata accessor for ObserverAndTokenStorage();
  type metadata accessor for PromiseFulfillment();
  uint64_t v0 = type metadata accessor for FulfillOnceState.State();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v7 - v2;
  FulfillOnceState.snapshot.getter();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v5 = swift_checkMetadataState();
    (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8))(v3, v5);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
  return EnumCaseMultiPayload == 1;
}

uint64_t type metadata accessor for IsolatedTask.ObserverBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t IsolatedTask.result.getter@<X0>(char *a1@<X8>)
{
  long long v14 = a1;
  uint64_t v1 = type metadata accessor for PromiseFulfillment();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v13 - v3;
  type metadata accessor for IsolatedTask.ObserverBox();
  type metadata accessor for ObserverAndTokenStorage();
  uint64_t v5 = type metadata accessor for FulfillOnceState.State();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v13 - v7;
  FulfillOnceState.snapshot.getter();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v8, v1);
    __n128 v9 = v14;
    sub_25A419230(v1, v14);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    uint64_t v10 = sub_25A510540();
    return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 0, 1, v10);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v12 = sub_25A510540();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v14, 1, 1, v12);
  }
}

uint64_t IsolatedTask<>.value(on:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  _OWORD v5[2] = a1;
  swift_getObjectType();
  uint64_t v7 = sub_25A50F220();
  return MEMORY[0x270FA2498](sub_25A498254, v7, v6);
}

{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  _OWORD v5[2] = a1;
  swift_getObjectType();
  uint64_t v7 = sub_25A50F220();
  v5[7] = v7;
  uint64_t v5[8] = v6;
  return MEMORY[0x270FA2498](sub_25A4989B4, v7, v6);
}

uint64_t sub_25A498254()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  v0[7] = v5;
  uint64_t v6 = *(void *)(v1 + 16);
  _OWORD v5[2] = v6;
  v5[3] = v3;
  v5[4] = v4;
  v5[5] = v2;
  uint64_t v7 = (void *)swift_task_alloc();
  v0[8] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_25A49835C;
  uint64_t v8 = v0[2];
  return MEMORY[0x270FA2318](v8, v3, v4, 0x6E6F2865756C6176, 0xEA0000000000293ALL, sub_25A49851C, v5, v6);
}

uint64_t sub_25A49835C()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_25A49846C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_getObjectType();
  Actor.verifyIsolated(_:file:line:)();
  uint64_t v5 = (void *)sub_25A50F260();
  return CheckedContinuation.track(task:)(a4, v5);
}

uint64_t sub_25A49851C(uint64_t a1)
{
  return sub_25A49846C(a1, v1[3], v1[4], v1[5]);
}

uint64_t CheckedContinuation.track(task:)(uint64_t a1, void *a2)
{
  uint64_t v3 = *(a2 - 1);
  uint64_t v4 = *(void *)(v3 + 64);
  MEMORY[0x270FA5388](a1);
  uint64_t v5 = (char *)&v16[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, void *))(v3 + 16))(v5, v6, a2);
  unint64_t v7 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = (char *)swift_allocObject();
  uint64_t v9 = a2[3];
  *((void *)v8 + 2) = a2[2];
  *((void *)v8 + 3) = v9;
  *((void *)v8 + 4) = a2[4];
  (*(void (**)(char *, char *, void *))(v3 + 32))(&v8[v7], v5, a2);
  uint64_t v10 = (void *)type metadata accessor for IsolatedTask();
  sub_25A496980((uint64_t (*)(uint64_t))sub_25A49A1C4, (uint64_t)v8, v10, v16);
  uint64_t result = swift_release();
  uint64_t v12 = v17;
  if (v17)
  {
    uint64_t v13 = v16[0];
    uint64_t v14 = v16[1];
    sub_25A497A9C((uint64_t)v16, v10);
    return sub_25A484F74(v13, v14, v12);
  }
  return result;
}

uint64_t IsolatedTask<>.currentValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = type metadata accessor for PromiseFulfillment();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v7 = (char *)&v14 - v6;
  type metadata accessor for IsolatedTask.ObserverBox();
  type metadata accessor for ObserverAndTokenStorage();
  uint64_t v8 = type metadata accessor for FulfillOnceState.State();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v14 - v10;
  FulfillOnceState.snapshot.getter();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v11, v4);
    sub_25A417108(v4, a2);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    uint64_t v12 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v12 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(a2, v12, 1, v3);
}

uint64_t sub_25A4989B4()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  v0[9] = v5;
  uint64_t v6 = *(void *)(v1 + 16);
  _OWORD v5[2] = v6;
  v5[3] = v3;
  v5[4] = v4;
  v5[5] = v2;
  unint64_t v7 = (void *)swift_task_alloc();
  v0[10] = v7;
  *unint64_t v7 = v0;
  v7[1] = sub_25A498ABC;
  uint64_t v8 = v0[2];
  return MEMORY[0x270FA2360](v8, v3, v4, 0x6E6F2865756C6176, 0xEA0000000000293ALL, sub_25A49A264, v5, v6);
}

uint64_t sub_25A498ABC()
{
  uint64_t v2 = (void *)*v1;
  v2[11] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[7];
    uint64_t v4 = v2[8];
    return MEMORY[0x270FA2498](sub_25A465664, v3, v4);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v2[1];
    return v5();
  }
}

uint64_t sub_25A498BF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_getObjectType();
  Actor.verifyIsolated(_:file:line:)();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v5 = (void *)sub_25A50F260();
  return CheckedContinuation.track(task:)(a4, v5);
}

uint64_t sub_25A498CAC(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for IsolatedTask();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 32))(v1 + 16, a1, v3);
  return v1;
}

uint64_t IsolatedTask.Promise.cancel<A>(file:line:column:function:onInvalidationOf:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a10;
  *(void *)(v18 + 24) = a11;
  *(void *)(v18 + 32) = v11;
  *(void *)(v18 + 40) = a1;
  *(void *)(v18 + 48) = a2;
  *(unsigned char *)(v18 + 56) = a3;
  *(void *)(v18 + 64) = a4;
  *(void *)(v18 + 72) = a5;
  *(void *)(v18 + 80) = a6;
  *(void *)(v18 + 88) = a7;
  *(unsigned char *)(v18 + 96) = a8;
  swift_retain();
  IsolatedInvalidatable.onInvalidation(_:)((uint64_t)sub_25A49A2A8, v18, a10, a11);

  return swift_release();
}

void sub_25A498E4C(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v10 = a2;
  long long v3 = a3[1];
  v8[0] = *a3;
  v8[1] = v3;
  v9[0] = a3[2];
  *(_OWORD *)((char *)v9 + 9) = *(long long *)((char *)a3 + 41);
  sub_25A50F270();
  sub_25A39210C();
  uint64_t v4 = (void *)swift_allocError();
  sub_25A50E870();
  uint64_t v7 = v4;
  uint64_t v5 = type metadata accessor for IsolatedTask.Promise();
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_25A417378(v8, (uint64_t)&v7, v5, WitnessTable);
}

uint64_t IsolatedTask.Promise.deinit()
{
  uint64_t v1 = type metadata accessor for IsolatedTask();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + 16, v1);
  return v0;
}

uint64_t IsolatedTask.Promise.__deallocating_deinit()
{
  IsolatedTask.Promise.deinit();

  return MEMORY[0x270FA0228](v0, 40, 7);
}

uint64_t sub_25A499018(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v9 = *((unsigned char *)a1 + 16);
  char v10 = *((unsigned char *)a1 + 56);
  long long v13 = *a1;
  char v14 = v9;
  long long v15 = *(long long *)((char *)a1 + 24);
  long long v16 = *(long long *)((char *)a1 + 40);
  char v17 = v10;
  uint64_t v11 = (void *)type metadata accessor for IsolatedTask();
  return sub_25A495FC0((uint64_t *)&v13, a2, a3, a4, a5, v11) & 1;
}

uint64_t sub_25A499104(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_25A499018(a1, a2, a3, a4, a5) & 1;
}

uint64_t IsolatedTask.init<>(file:line:column:function:on:work:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  v25[0] = a1;
  v25[1] = a2;
  char v26 = a3;
  uint64_t v27 = a4;
  uint64_t v28 = a5;
  uint64_t v29 = a6;
  uint64_t v30 = a7;
  char v31 = a8;
  swift_unknownObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415838);
  uint64_t v23 = a9;
  sub_25A495AD0((uint64_t)v25, a11, a9);
  type metadata accessor for IsolatedTask.Promise();
  char v14 = (void *)type metadata accessor for IsolatedTask();
  uint64_t v24 = *(v14 - 1);
  long long v15 = *(void (**)(void *, uint64_t *, void *))(v24 + 16);
  v15(v25, a9, v14);
  long long v16 = v15;
  swift_allocObject();
  uint64_t v17 = sub_25A498CAC((uint64_t)v25);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v19 = (void *)swift_allocObject();
  uint64_t v19[2] = a10;
  unint64_t v19[3] = a11;
  void v19[4] = a12;
  void v19[5] = a13;
  void v19[6] = v17;
  uint64_t v20 = (void *)swift_allocObject();
  _OWORD v20[2] = ObjectType;
  uint64_t v20[3] = a11;
  void v20[4] = &unk_26A41A468;
  v20[5] = v19;
  swift_unknownObjectRetain();
  swift_retain();
  swift_retain();
  uint64_t v21 = Actor.makeIsolatedTask(_:)((uint64_t)&unk_26A41A478, (uint64_t)v20, ObjectType, a11);
  swift_release();
  v16(v25, v23, v14);
  swift_retain();
  sub_25A497854((uint64_t)sub_25A49A490, v21, v14);
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release_n();
  return (*(uint64_t (**)(void *, void *))(v24 + 8))(v25, v14);
}

{
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;
  void *v17;
  void *v18;
  void v20[2];
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v20[0] = a1;
  v20[1] = a2;
  uint64_t v21 = a3;
  uint64_t v22 = a4;
  uint64_t v23 = a5;
  uint64_t v24 = a6;
  uint64_t v25 = a7;
  char v26 = a8;
  swift_unknownObjectRetain();
  sub_25A495AD0((uint64_t)v20, a11, a9);
  type metadata accessor for IsolatedTask.Promise();
  char v14 = type metadata accessor for IsolatedTask();
  (*(void (**)(void *, uint64_t *, uint64_t))(*(void *)(v14 - 8) + 16))(v20, a9, v14);
  swift_allocObject();
  long long v15 = sub_25A498CAC((uint64_t)v20);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v17 = (void *)swift_allocObject();
  uint64_t v17[2] = a10;
  v17[3] = a11;
  v17[4] = a12;
  v17[5] = a13;
  v17[6] = v15;
  uint64_t v18 = (void *)swift_allocObject();
  void v18[2] = ObjectType;
  void v18[3] = a11;
  void v18[4] = &unk_26A41A488;
  v18[5] = v17;
  swift_unknownObjectRetain();
  swift_retain();
  swift_retain();
  Actor.makeIsolatedTask(_:)((uint64_t)&unk_26A41A490, (uint64_t)v18, ObjectType, a11);
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t sub_25A4993A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  void v7[6] = a5;
  void v7[4] = a3;
  v7[9] = *(void *)a7;
  uint64_t v8 = *(void *)(*(void *)a7 + 80);
  v7[10] = v8;
  v7[11] = *(void *)(v8 - 8);
  v7[12] = swift_task_alloc();
  swift_getObjectType();
  uint64_t v10 = sub_25A50F220();
  v7[13] = v10;
  v7[14] = v9;
  return MEMORY[0x270FA2498](sub_25A4994C4, v10, v9);
}

uint64_t sub_25A4994C4()
{
  uint64_t v1 = (int *)v0[6];
  swift_getObjectType();
  Actor.verifyIsolated(_:file:line:)();
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)v1 + *v1);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[15] = v2;
  void *v2 = v0;
  v2[1] = sub_25A4995EC;
  uint64_t v3 = v0[12];
  return v5(v3);
}

uint64_t sub_25A4995EC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 128) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 112);
  uint64_t v4 = *(void *)(v2 + 104);
  if (v0) {
    uint64_t v5 = sub_25A499814;
  }
  else {
    uint64_t v5 = sub_25A499728;
  }
  return MEMORY[0x270FA2498](v5, v4, v3);
}

uint64_t sub_25A499728()
{
  uint64_t v2 = v0[11];
  uint64_t v1 = v0[12];
  uint64_t v4 = v0[9];
  uint64_t v3 = v0[10];
  v0[3] = v0[8];
  uint64_t WitnessTable = swift_getWitnessTable();
  PromiseProtocol.fulfill(file:line:column:function:returning:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/IsolatedTask.swift", 124, 2, 292, 32, (uint64_t)"init(file:line:column:function:on:work:)", 40, 2, v1, v4, WitnessTable);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_25A499814()
{
  uint64_t v1 = (void *)v0[16];
  uint64_t v2 = v0[9];
  v0[2] = v0[8];
  uint64_t WitnessTable = swift_getWitnessTable();
  PromiseProtocol.fulfill<>(file:line:column:function:throwing:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/IsolatedTask.swift", 124, 2, 294, 32, (uint64_t)"init(file:line:column:function:on:work:)", 40, 2, (uint64_t)v1, v2, WitnessTable);

  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_25A4998E4(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))((char *)a2 + *a2);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v8;
  *uint64_t v8 = v5;
  v8[1] = sub_25A3923B4;
  return v10(a1, a5);
}

uint64_t sub_25A499BB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void v7[6] = a6;
  v7[7] = a7;
  void v7[4] = a4;
  v7[5] = a5;
  void v7[3] = a3;
  v7[8] = *(void *)a7;
  uint64_t v8 = *(void *)(*(void *)a7 + 80);
  v7[9] = v8;
  v7[10] = *(void *)(v8 - 8);
  v7[11] = swift_task_alloc();
  swift_getObjectType();
  uint64_t v10 = sub_25A50F220();
  v7[12] = v10;
  v7[13] = v9;
  return MEMORY[0x270FA2498](sub_25A499CD4, v10, v9);
}

uint64_t sub_25A499CD4()
{
  uint64_t v1 = (int *)v0[5];
  swift_getObjectType();
  Actor.verifyIsolated(_:file:line:)();
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)v1 + *v1);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[14] = v2;
  void *v2 = v0;
  v2[1] = sub_25A499DFC;
  uint64_t v3 = v0[11];
  return v5(v3);
}

uint64_t sub_25A499DFC()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 104);
  uint64_t v3 = *(void *)(v1 + 96);
  return MEMORY[0x270FA2498](sub_25A499F1C, v3, v2);
}

uint64_t sub_25A499F1C()
{
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v4 = v0[8];
  uint64_t v3 = v0[9];
  v0[2] = v0[7];
  uint64_t WitnessTable = swift_getWitnessTable();
  PromiseProtocol.fulfill(file:line:column:function:returning:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/IsolatedTask.swift", 124, 2, 319, 28, (uint64_t)"init(file:line:column:function:on:work:)", 40, 2, v1, v4, WitnessTable);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_25A49A008()
{
  uint64_t v0 = sub_25A510540();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v7 - v2;
  uint64_t v4 = type metadata accessor for PromiseFulfillment();
  sub_25A419230(v4, v3);
  uint64_t v5 = sub_25A50F260();
  sub_25A4955D8((uint64_t)v3, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_25A49A12C()
{
  uint64_t v1 = sub_25A50F260();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t sub_25A49A1C4()
{
  sub_25A50F260();

  return sub_25A49A008();
}

uint64_t sub_25A49A264(uint64_t a1)
{
  return sub_25A498BF4(a1, v1[3], v1[4], v1[5]);
}

uint64_t sub_25A49A270()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 97, 7);
}

void sub_25A49A2A8(uint64_t a1)
{
  sub_25A498E4C(a1, *(void *)(v1 + 32), (long long *)(v1 + 40));
}

uint64_t sub_25A49A2BC(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = v2[5];
  uint64_t v10 = v2[6];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v11;
  *uint64_t v11 = v3;
  v11[1] = sub_25A38F608;
  return sub_25A4993A8(a1, a2, v6, v7, v8, v9, v10);
}

uint64_t sub_25A49A390()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_25A49A3C8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = (int *)v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_25A3923B4;
  uint64_t v9 = (uint64_t (*)(uint64_t, int *, uint64_t, uint64_t, uint64_t))((char *)&dword_26A41A470 + dword_26A41A470);
  return v9(a1, v7, v6, v4, v5);
}

uint64_t sub_25A49A490()
{
  return sub_25A50F3A0();
}

uint64_t objectdestroy_17Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t sub_25A49A500(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = v2[5];
  uint64_t v10 = v2[6];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v11;
  *uint64_t v11 = v3;
  v11[1] = sub_25A3923B4;
  return sub_25A499BB8(a1, a2, v6, v7, v8, v9, v10);
}

uint64_t Continuation.track(task:)(uint64_t a1, void *a2)
{
  uint64_t v5 = *v2;
  uint64_t v4 = v2[1];
  uint64_t v6 = v2[2];
  uint64_t v7 = (void *)swift_allocObject();
  uint64_t v8 = a2[3];
  long long v7[2] = a2[2];
  void v7[3] = v8;
  void v7[4] = a2[4];
  v7[5] = v5;
  void v7[6] = v4;
  v7[7] = v6;
  uint64_t v9 = (void *)type metadata accessor for IsolatedTask();
  swift_retain();
  swift_retain();
  sub_25A496980(sub_25A49A8B8, (uint64_t)v7, v9, v14);
  uint64_t result = swift_release();
  uint64_t v11 = v15;
  if (v15)
  {
    uint64_t v12 = v14[0];
    uint64_t v13 = v14[1];
    sub_25A497A9C((uint64_t)v14, v9);
    return sub_25A484F74(v12, v13, v11);
  }
  return result;
}

uint64_t sub_25A49A700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_25A510540();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v13 - v9;
  v13[1] = a2;
  _OWORD v13[2] = a3;
  void v13[3] = a4;
  uint64_t v11 = type metadata accessor for PromiseFulfillment();
  sub_25A419230(v11, v10);
  type metadata accessor for Continuation();
  Continuation.resume(with:file:line:column:function:)((uint64_t)v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/IsolatedTask.swift", 124, 2, 349, 24, (uint64_t)"track(task:)", 12, 2);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_25A49A878()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t sub_25A49A8B8(uint64_t a1)
{
  return sub_25A49A700(a1, v1[5], v1[6], v1[7]);
}

uint64_t sub_25A49A8C8(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 96);
}

uint64_t sub_25A49A8D0(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_25A49A910(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 16) = *(void *)(a1 + 8);
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_25A49A924()
{
  return 24;
}

__n128 sub_25A49A930(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_25A49A944()
{
  swift_release();

  return swift_unknownObjectWeakDestroy();
}

void *sub_25A49A980(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_unknownObjectWeakCopyInit();
  a1[2] = a2[2];
  return a1;
}

void *sub_25A49A9D8(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  swift_unknownObjectWeakCopyAssign();
  a1[2] = a2[2];
  return a1;
}

void *sub_25A49AA34(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectWeakTakeInit();
  a1[2] = a2[2];
  return a1;
}

void *sub_25A49AA70(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  swift_unknownObjectWeakTakeAssign();
  a1[2] = a2[2];
  return a1;
}

uint64_t sub_25A49AABC()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for IsolatedTask.Promise(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for IsolatedTask.Promise);
}

uint64_t destroy for IsolatedTokenCallback()
{
  swift_unknownObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for IsolatedTokenCallback(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_unknownObjectRetain();
  swift_retain();
  return a1;
}

void *assignWithCopy for IsolatedTokenCallback(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for IsolatedTokenCallback(_OWORD *a1, _OWORD *a2)
{
  swift_unknownObjectRelease();
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for IsolatedTokenCallback(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IsolatedTokenCallback(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_25A49ACC4(uint64_t a1, uint64_t *a2)
{
  return sub_25A4967B4(a1, a2, *(uint64_t (**)(void *))(v2 + 40), *(void *)(v2 + 48));
}

uint64_t sub_25A49ACE8(uint64_t a1)
{
  return sub_25A495814(*(void *)(v1 + 40), *(void *)(a1 + 8), *(void *)(a1 + 16), *(uint64_t (**)(uint64_t))(a1 + 24));
}

uint64_t sub_25A49AD24(uint64_t a1)
{
  return sub_25A497974(a1, *(uint64_t (**)(uint64_t))(v1 + 24));
}

double sub_25A49AD30(uint64_t a1)
{
  *(void *)&double result = sub_25A497CD4(a1, *(void *)(v1 + 40)).n128_u64[0];
  return result;
}

uint64_t sub_25A49AD3C(uint64_t a1)
{
  return a1;
}

uint64_t sub_25A49AD84@<X0>(void *a1@<X8>)
{
  return sub_25A496E98(v1[5], v1[6], v1[7], v1[8], a1);
}

uint64_t sub_25A49AD98()
{
  swift_release();
  swift_unknownObjectWeakDestroy();

  return MEMORY[0x270FA0238](v0, 72, 7);
}

uint64_t sub_25A49ADD8()
{
  return sub_25A496F0C((uint64_t)(v0 + 5), v0[8], v0[2], v0[3], v0[4]);
}

uint64_t sub_25A49ADEC(uint64_t a1)
{
  return sub_25A497080(a1, *(void *)(v1 + 40));
}

uint64_t AnyCommandLinePrinter.print(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t CommandLinePrintingAttribute.rawValue.getter(char a1)
{
  return qword_25A51A018[a1];
}

BOOL sub_25A49AE38(char *a1, char *a2)
{
  return qword_25A51A018[*a1] == qword_25A51A018[*a2];
}

uint64_t sub_25A49AE5C()
{
  return sub_25A510530();
}

uint64_t sub_25A49AEAC()
{
  return sub_25A5104F0();
}

uint64_t sub_25A49AEE4()
{
  return sub_25A510530();
}

uint64_t sub_25A49AF30@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = _s20PreviewsFoundationOS28CommandLinePrintingAttributeO8rawValueACSgSi_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_25A49AF5C(void *a1@<X8>)
{
  *a1 = qword_25A51A018[*v1];
}

uint64_t AnyCommandLinePrinter.printInColumns<A, B, C>(headers:rows:attributes:separator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v126 = a6;
  uint64_t v108 = a5;
  uint64_t v122 = a3;
  uint64_t v123 = a4;
  uint64_t v112 = a2;
  uint64_t v117 = a13;
  uint64_t v133 = a10;
  uint64_t v114 = *(void *)(a9 - 8);
  uint64_t v127 = a11;
  MEMORY[0x270FA5388](a1);
  uint64_t v113 = (char *)&v96 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_25A50FA40();
  uint64_t v18 = MEMORY[0x270FA5388](v17 - 8);
  uint64_t v121 = (char *)&v96 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v120 = (char *)&v96 - v21;
  uint64_t v115 = *(void *)(a8 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v111 = (char *)&v96 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = *(void *)(a12 + 8);
  uint64_t v124 = a8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v116 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v23 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v107 = (char *)&v96 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  uint64_t v125 = (void (*)(uint64_t, char *, uint64_t))((char *)&v96 - v25);
  uint64_t v26 = sub_25A50FA40();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  uint64_t v102 = (char *)&v96 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = MEMORY[0x270FA5388](v28);
  char v32 = (char *)&v96 - v31;
  uint64_t v33 = *(void *)(a7 - 8);
  uint64_t v34 = MEMORY[0x270FA5388](v30);
  char v96 = (char *)&v96 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v34);
  uint64_t v37 = (char *)&v96 - v36;
  uint64_t v38 = swift_allocObject();
  *(void *)(v38 + 16) = MEMORY[0x263F8EE80];
  uint64_t v103 = v27;
  uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 16);
  uint64_t v106 = a1;
  uint64_t v100 = v27 + 16;
  uint64_t v99 = v39;
  v39(v32, a1, v26);
  uint64_t v40 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48);
  uint64_t v41 = a7;
  uint64_t v98 = v33 + 48;
  uint64_t v97 = v40;
  int v42 = v40(v32, 1, a7);
  uint64_t v43 = v117;
  uint64_t v132 = a12;
  uint64_t v44 = v127;
  uint64_t v128 = v38;
  uint64_t v105 = v33;
  uint64_t v104 = v26;
  if (v42 == 1)
  {
    uint64_t v45 = v41;
    (*(void (**)(char *, uint64_t))(v103 + 8))(v32, v26);
    uint64_t v46 = v124;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v37, v32, v41);
    uint64_t v95 = v43;
    uint64_t v46 = v124;
    sub_25A49BA70((uint64_t)v37, v38, v126, v41, v124, a9, v41, v133, v44, a12, v95, v44);
    uint64_t v47 = *(void (**)(char *, uint64_t))(v33 + 8);
    uint64_t v45 = v41;
    v47(v37, v41);
  }
  uint64_t v129 = v45;
  uint64_t v48 = *(void (**)(char *, uint64_t, uint64_t))(v115 + 16);
  v115 += 16;
  uint64_t v101 = v48;
  v48(v111, v112, v46);
  sub_25A50EEF0();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v50 = v120;
  uint64_t v131 = AssociatedConformanceWitness;
  sub_25A50FAF0();
  uint64_t v51 = v50;
  uint64_t v52 = v114 + 48;
  unint64_t v130 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v114 + 48);
  int v53 = v130(v50, 1, a9);
  uint64_t v54 = v117;
  uint64_t v56 = v127;
  uint64_t v55 = v128;
  uint64_t v57 = (uint64_t)v113;
  if (v53 != 1)
  {
    uint64_t v118 = *(void (**)(uint64_t, char *, uint64_t))(v114 + 32);
    uint64_t v58 = (void (**)(uint64_t, uint64_t))(v114 + 8);
    do
    {
      v118(v57, v51, a9);
      sub_25A49BA70(v57, v55, v126, v129, v46, a9, a9, v133, v56, v132, v54, v54);
      (*v58)(v57, a9);
      sub_25A50FAF0();
      uint64_t v51 = v120;
    }
    while (v130(v120, 1, a9) != 1);
  }
  uint64_t v119 = v52;
  char v59 = *(char **)(v116 + 8);
  v116 += 8;
  uint64_t v120 = v59;
  ((void (*)(void (*)(uint64_t, char *, uint64_t), uint64_t))v59)(v125, AssociatedTypeWitness);
  uint64_t v60 = v102;
  uint64_t v61 = v104;
  v99(v102, v106, v104);
  uint64_t v62 = v129;
  int v63 = v97(v60, 1, v129);
  uint64_t v64 = v132;
  if (v63 == 1)
  {
    (*(void (**)(char *, uint64_t))(v103 + 8))(v60, v61);
    uint64_t v65 = v46;
    uint64_t v66 = v108;
  }
  else
  {
    uint64_t v67 = (uint64_t)v96;
    uint64_t v68 = v62;
    (*(void (**)(char *, char *, uint64_t))(v105 + 32))(v96, v60, v62);
    uint64_t v69 = v127;
    *((void *)&v92 + 1) = v64;
    *(void *)&long long v92 = v127;
    *((void *)&v88 + 1) = v46;
    *(void *)&long long v88 = v68;
    uint64_t v70 = v109;
    uint64_t v71 = v108;
    uint64_t v72 = v126;
    sub_25A49BDA8(v67, 0, v122, v128, v109, v123, v108, v126, v88, a9, v68, v133, v92, v117, v127);
    uint64_t v135 = sub_25A39F5D4((void (*)(char *, char *))sub_25A49C218, 0, v68, MEMORY[0x263F8D310], MEMORY[0x263F8E628], v69, MEMORY[0x263F8E658], v73);
    uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A415DC0);
    uint64_t v75 = sub_25A49CFE8(&qword_26A41A620);
    *((void *)&v93 + 1) = v64;
    *(void *)&long long v93 = v69;
    uint64_t v91 = v74;
    uint64_t v65 = v124;
    *((void *)&v89 + 1) = v124;
    *(void *)&long long v89 = v68;
    uint64_t v66 = v71;
    sub_25A49BDA8((uint64_t)&v135, 0, v122, v128, v70, v123, v71, v72, v89, a9, v91, v133, v93, v117, v75);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v67, v68);
  }
  uint64_t v76 = v107;
  uint64_t v77 = v130;
  v101(v111, v112, v65);
  sub_25A50EEF0();
  long long v78 = v121;
  sub_25A50FAF0();
  char v79 = v78;
  int v80 = v77(v78, 1, a9);
  uint64_t v81 = v117;
  uint64_t v82 = v114;
  uint64_t v83 = v76;
  uint64_t v84 = (uint64_t)v113;
  uint64_t v85 = v109;
  uint64_t v86 = v126;
  if (v80 != 1)
  {
    uint64_t v125 = *(void (**)(uint64_t, char *, uint64_t))(v114 + 32);
    do
    {
      v125(v84, v79, a9);
      *((void *)&v94 + 1) = v132;
      *(void *)&long long v94 = v127;
      *((void *)&v90 + 1) = v124;
      *(void *)&long long v90 = v129;
      sub_25A49BDA8(v84, 1, v122, v128, v85, v123, v66, v86, v90, a9, a9, v133, v94, v81, v81);
      (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v84, a9);
      sub_25A50FAF0();
      char v79 = v121;
    }
    while (v130(v121, 1, a9) != 1);
  }
  ((void (*)(char *, uint64_t))v120)(v83, AssociatedTypeWitness);
  return swift_release();
}

uint64_t sub_25A49BA70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v14 = *(void *)(a12 + 8);
  uint64_t v15 = sub_25A5100D0();
  MEMORY[0x270FA5388](v15);
  uint64_t v16 = sub_25A5100C0();
  uint64_t v44 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v43 - v17;
  MEMORY[0x26113CF40](a7, v14);
  sub_25A5100A0();
  sub_25A5100B0();
  if (!v47) {
    return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v18, v16);
  }
  uint64_t v19 = (uint64_t *)(a2 + 16);
  uint64_t v20 = v46;
  while (1)
  {
    swift_beginAccess();
    uint64_t v21 = *v19;
    if (*(void *)(*v19 + 16) && (unint64_t v22 = sub_25A4096EC(v20), (v23 & 1) != 0)) {
      uint64_t v24 = *(void *)(*(void *)(v21 + 56) + 8 * v22);
    }
    else {
      uint64_t v24 = 0;
    }
    swift_endAccess();
    uint64_t v25 = sub_25A50ED50();
    swift_bridgeObjectRelease();
    uint64_t v26 = v25 <= v24 ? v24 : v25;
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v45 = (void *)*v19;
    uint64_t v28 = v45;
    *uint64_t v19 = 0x8000000000000000;
    unint64_t v30 = sub_25A4096EC(v20);
    uint64_t v31 = v28[2];
    BOOL v32 = (v29 & 1) == 0;
    uint64_t v33 = v31 + v32;
    if (__OFADD__(v31, v32)) {
      break;
    }
    char v34 = v29;
    if (v28[3] >= v33)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v37 = v45;
        if (v29) {
          goto LABEL_3;
        }
      }
      else
      {
        sub_25A410468();
        uint64_t v37 = v45;
        if (v34) {
          goto LABEL_3;
        }
      }
    }
    else
    {
      sub_25A40DAD8(v33, isUniquelyReferenced_nonNull_native);
      unint64_t v35 = sub_25A4096EC(v20);
      if ((v34 & 1) != (v36 & 1)) {
        goto LABEL_26;
      }
      unint64_t v30 = v35;
      uint64_t v37 = v45;
      if (v34)
      {
LABEL_3:
        *(void *)(v37[7] + 8 * v30) = v26;
        goto LABEL_4;
      }
    }
    v37[(v30 >> 6) + 8] |= 1 << v30;
    uint64_t v38 = 8 * v30;
    *(void *)(v37[6] + v38) = v20;
    *(void *)(v37[7] + v38) = v26;
    uint64_t v39 = v37[2];
    BOOL v40 = __OFADD__(v39, 1);
    uint64_t v41 = v39 + 1;
    if (v40) {
      goto LABEL_25;
    }
    void v37[2] = v41;
LABEL_4:
    *uint64_t v19 = (uint64_t)v37;
    swift_bridgeObjectRelease();
    swift_endAccess();
    sub_25A5100B0();
    uint64_t v20 = v46;
    if (!v47) {
      return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v18, v16);
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  uint64_t result = sub_25A510430();
  __break(1u);
  return result;
}

uint64_t sub_25A49BDA8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, uint64_t a14, uint64_t a15)
{
  uint64_t v33 = a8;
  uint64_t v38 = a7;
  uint64_t v37 = a6;
  uint64_t v36 = a5;
  uint64_t v34 = a3;
  int v35 = a2;
  long long v32 = a13;
  long long v29 = a9;
  uint64_t v30 = a10;
  uint64_t v31 = a14;
  uint64_t v16 = *(void *)(a15 + 8);
  uint64_t v17 = sub_25A5100D0();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v29 - v19;
  MEMORY[0x26113CF40](a11, v16);
  uint64_t v21 = v33;
  uint64_t v43 = v33;
  long long v44 = v29;
  uint64_t v45 = v30;
  uint64_t v46 = a11;
  uint64_t v47 = a12;
  long long v48 = v32;
  uint64_t v49 = v31;
  uint64_t v50 = a15;
  uint64_t v51 = v34;
  uint64_t v52 = a4 + 16;
  uint64_t v53 = v36;
  char v54 = v35;
  BOOL v40 = sub_25A49D030;
  uint64_t v41 = &v42;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v24 = sub_25A4E8930((void (*)(char *, char *))sub_25A49D07C, (uint64_t)v39, v17, MEMORY[0x263F8D310], MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v23);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  uint64_t v55 = v24;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415DC0);
  sub_25A49CFE8(qword_26A415DC8);
  uint64_t v25 = sub_25A50EAD0();
  uint64_t v27 = v26;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(a12 + 8))(v25, v27, MEMORY[0x263F8EE78], v21, a12);
  return swift_bridgeObjectRelease();
}

uint64_t sub_25A49C08C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v18 = result;
  if (*(void *)(a4 + 16) <= result)
  {
    uint64_t v19 = MEMORY[0x263F8EE78];
  }
  else
  {
    if (result < 0)
    {
LABEL_14:
      __break(1u);
      return result;
    }
    uint64_t v19 = *(void *)(a4 + 8 * result + 32);
    swift_bridgeObjectRetain();
  }
  swift_beginAccess();
  uint64_t v20 = *a5;
  if (*(void *)(*a5 + 16) && (unint64_t v21 = sub_25A4096EC(v18), (v22 & 1) != 0)) {
    uint64_t v23 = *(void *)(*(void *)(v20 + 56) + 8 * v21);
  }
  else {
    uint64_t v23 = 0;
  }
  swift_endAccess();
  uint64_t result = sub_25A50ED50();
  BOOL v24 = __OFSUB__(v23, result);
  uint64_t v25 = v23 - result;
  if (v24)
  {
    __break(1u);
    goto LABEL_14;
  }
  if ((a7 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v19 = MEMORY[0x263F8EE78];
  }
  uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a13 + 32))(a2, a3, v19, a8, a13);
  swift_bridgeObjectRelease();
  MEMORY[0x26113CE90](32, 0xE100000000000000, v25 & ~(v25 >> 63));
  swift_bridgeObjectRetain();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v26;
}

uint64_t sub_25A49C218@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_25A50ED50();
  uint64_t result = MEMORY[0x26113CE90](61, 0xE100000000000000, v2);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_25A49C260()
{
  uint64_t v0 = (FILE *)sub_25A50E620();
  int v1 = fileno(v0);
  uint64_t result = isatty(v1);
  if (result != 1) {
    goto LABEL_8;
  }
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08AB0]), sel_init);
  id v4 = objc_msgSend(v3, sel_environment);

  uint64_t v5 = sub_25A50E8A0();
  if (!*(void *)(v5 + 16) || (unint64_t v6 = sub_25A409670(0x53524F4C4F43534CLL, 0xE800000000000000), (v7 & 1) == 0))
  {
    uint64_t result = swift_bridgeObjectRelease();
LABEL_8:
    BOOL v12 = 0;
    goto LABEL_9;
  }
  uint64_t v8 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v6);
  uint64_t v9 = *v8;
  unint64_t v10 = v8[1];
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v11 = HIBYTE(v10) & 0xF;
  if ((v10 & 0x2000000000000000) == 0) {
    uint64_t v11 = v9 & 0xFFFFFFFFFFFFLL;
  }
  BOOL v12 = v11 != 0;
LABEL_9:
  byte_26A41A618 = v12;
  return result;
}

uint64_t static CommandLinePrinter.allowsColor.getter()
{
  if (qword_26A415640 != -1) {
    swift_once();
  }
  return byte_26A41A618;
}

uint64_t static CommandLinePrinter.format(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_26A415640 != -1) {
    swift_once();
  }
  if (byte_26A41A618 == 1)
  {
    sub_25A49C9D0(a3);
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
    sub_25A50EDA0();
    uint64_t v4 = 993024795;
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v6 = v4;
  swift_bridgeObjectRetain();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6;
}

{
  uint64_t v4;
  uint64_t v6;

  if (qword_26A415640 != -1) {
    swift_once();
  }
  if (byte_26A41A618 == 1)
  {
    sub_25A49C9D0(a3);
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
    sub_25A50EDA0();
    uint64_t v4 = 993024795;
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v6 = v4;
  swift_bridgeObjectRetain();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6;
}

Swift::String __swiftcall CommandLinePrinter.format(_:_:)(Swift::String a1, Swift::OpaquePointer a2)
{
  if (qword_26A415640 != -1) {
    swift_once();
  }
  if (byte_26A41A618 == 1)
  {
    sub_25A49C9D0((uint64_t)a2._rawValue);
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
    sub_25A50EDA0();
    uint64_t v3 = 993024795;
    unint64_t v4 = 0xE400000000000000;
  }
  else
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0xE000000000000000;
  }
  uint64_t v8 = v3;
  swift_bridgeObjectRetain();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = v8;
  uint64_t v6 = (void *)v4;
  result._object = v6;
  result._uint64_t countAndFlagsBits = v5;
  return result;
}

uint64_t static CommandLinePrinter.printError(_:)()
{
  sub_25A50EDA0();
  _s20PreviewsFoundationOS18CommandLinePrinterV5printyySS_AA0dE17PrintingAttributeOdtFZ_0(539634218, 0xE400000000000000, (uint64_t)&unk_27082BFA0);

  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall CommandLinePrinter.printError(_:)(Swift::String a1)
{
  sub_25A50EDA0();
  _s20PreviewsFoundationOS18CommandLinePrinterV5printyySS_AA0dE17PrintingAttributeOdtFZ_0(539634218, 0xE400000000000000, (uint64_t)&unk_27082BFC8);

  swift_bridgeObjectRelease();
}

void static CommandLinePrinter.printError(_:exitCode:)(uint64_t a1, uint64_t a2, int a3)
{
}

Swift::Void __swiftcall CommandLinePrinter.printError(_:exitCode:)(Swift::String _, Swift::Int32 exitCode)
{
}

uint64_t sub_25A49C900()
{
  sub_25A50EDA0();
  _s20PreviewsFoundationOS18CommandLinePrinterV5printyySS_AA0dE17PrintingAttributeOdtFZ_0(539634218, 0xE400000000000000, (uint64_t)&unk_27082BFC8);

  return swift_bridgeObjectRelease();
}

void sub_25A49C964(uint64_t a1, uint64_t a2, int a3)
{
}

uint64_t sub_25A49C9B8(uint64_t a1, uint64_t a2, Swift::OpaquePointer a3)
{
  return CommandLinePrinter.format(_:_:)(*(Swift::String *)&a1, a3)._countAndFlagsBits;
}

uint64_t sub_25A49C9D0(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v12 = MEMORY[0x263F8EE78];
    sub_25A39A068(0, v1, 0);
    uint64_t v3 = a1 + 32;
    do
    {
      ++v3;
      uint64_t v4 = sub_25A5102B0();
      uint64_t v6 = v5;
      unint64_t v8 = *(void *)(v12 + 16);
      unint64_t v7 = *(void *)(v12 + 24);
      if (v8 >= v7 >> 1) {
        sub_25A39A068(v7 > 1, v8 + 1, 1);
      }
      *(void *)(v12 + 16) = v8 + 1;
      uint64_t v9 = v12 + 16 * v8;
      *(void *)(v9 + 32) = v4;
      *(void *)(v9 + 40) = v6;
      --v1;
    }
    while (v1);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415DC0);
  sub_25A49CFE8(qword_26A415DC8);
  uint64_t v10 = sub_25A50EAD0();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t _s20PreviewsFoundationOS28CommandLinePrintingAttributeO8rawValueACSgSi_tcfC_0(uint64_t a1)
{
  uint64_t v1 = a1 - 1;
  uint64_t result = 1;
  switch(v1)
  {
    case 0:
      uint64_t result = 0;
      break;
    case 29:
      return result;
    case 30:
      uint64_t result = 5;
      break;
    case 31:
      uint64_t result = 3;
      break;
    case 32:
      uint64_t result = 7;
      break;
    case 33:
      uint64_t result = 2;
      break;
    case 34:
      uint64_t result = 6;
      break;
    case 35:
      uint64_t result = 4;
      break;
    case 36:
      uint64_t result = 8;
      break;
    default:
      uint64_t result = 9;
      break;
  }
  return result;
}

uint64_t sub_25A49CC40()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t _s20PreviewsFoundationOS18CommandLinePrinterV5printyySS_AA0dE17PrintingAttributeOdtFZ_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A417478);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_25A5119F0;
  if (qword_26A415640 != -1) {
    swift_once();
  }
  if (byte_26A41A618 == 1)
  {
    sub_25A49C9D0(a3);
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
    sub_25A50EDA0();
    uint64_t v5 = 993024795;
    unint64_t v6 = 0xE400000000000000;
  }
  else
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0xE000000000000000;
  }
  uint64_t v8 = v5;
  swift_bridgeObjectRetain();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v4 + 56) = MEMORY[0x263F8D310];
  *(void *)(v4 + 32) = v8;
  *(void *)(v4 + 40) = v6;
  sub_25A5104B0();

  return swift_bridgeObjectRelease();
}

unint64_t sub_25A49CE30()
{
  unint64_t result = qword_26A41A628;
  if (!qword_26A41A628)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A41A628);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CommandLinePrintingAttribute(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *unint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25A49CF50);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CommandLinePrintingAttribute()
{
  return &type metadata for CommandLinePrintingAttribute;
}

uint64_t dispatch thunk of AnyCommandLinePrinter.print(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of AnyCommandLinePrinter.printError(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of AnyCommandLinePrinter.printError(_:exitCode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t dispatch thunk of AnyCommandLinePrinter.format(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

ValueMetadata *type metadata accessor for CommandLinePrinter()
{
  return &type metadata for CommandLinePrinter;
}

uint64_t sub_25A49CFE8(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415DC0);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_25A49D030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25A49C08C(a1, a2, a3, *(void *)(v3 + 96), *(uint64_t **)(v3 + 104), *(void *)(v3 + 112), *(unsigned char *)(v3 + 120), *(void *)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40), *(void *)(v3 + 48), *(void *)(v3 + 56));
}

uint64_t sub_25A49D07C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void, void, void))(v2 + 16))(*a1, a1[1], a1[2]);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t sub_25A49D0C8(char a1)
{
  uint64_t result = 1667329385;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x656E6F687069;
      break;
    case 2:
      uint64_t result = 1684107369;
      break;
    case 3:
      uint64_t result = 0x64756F6C6369;
      break;
    case 4:
      uint64_t result = 1685024873;
      break;
    case 5:
      uint64_t result = 0x6567617373656D69;
      break;
    case 6:
      uint64_t result = 7565161;
      break;
    case 7:
      uint64_t result = 0x73656E757469;
      break;
    case 8:
      uint64_t result = 6578537;
      break;
    case 9:
      uint64_t result = 0x6F746F687069;
      break;
    case 10:
      uint64_t result = 0x6566696C69;
      break;
    case 11:
      uint64_t result = 0x6569766F6D69;
      break;
    case 12:
      uint64_t result = 0x736B6F6F6269;
      break;
    case 13:
      uint64_t result = 0x6B726F7769;
      break;
    default:
      return result;
  }
  return result;
}

void *sub_25A49D228()
{
  uint64_t result = (void *)sub_25A49D248();
  off_26A41A630 = result;
  return result;
}

uint64_t sub_25A49D248()
{
  uint64_t v0 = qword_27082C028;
  uint64_t v1 = MEMORY[0x263F8EE78];
  if (qword_27082C028)
  {
    uint64_t v15 = MEMORY[0x263F8EE78];
    sub_25A39A068(0, qword_27082C028, 0);
    uint64_t v2 = &byte_27082C038;
    uint64_t v1 = v15;
    while (2)
    {
      int v4 = *v2++;
      int v3 = v4;
      switch(v4)
      {
        case 6:
          swift_bridgeObjectRelease();
          goto LABEL_6;
        default:
          char v5 = sub_25A510370();
          swift_bridgeObjectRelease();
          if (v5)
          {
LABEL_6:
            unint64_t v6 = 0xE200000000000000;
            uint64_t v7 = 21327;
          }
          else
          {
            unint64_t v8 = 0xE300000000000000;
            switch(v3)
            {
              case 0:
                unint64_t v8 = 0xE400000000000000;
                break;
              case 1:
                unint64_t v8 = 0xE600000000000000;
                break;
              case 2:
                unint64_t v8 = 0xE400000000000000;
                break;
              case 3:
                unint64_t v8 = 0xE600000000000000;
                break;
              case 4:
                unint64_t v8 = 0xE400000000000000;
                break;
              case 5:
                unint64_t v8 = 0xE800000000000000;
                break;
              case 6:
              case 8:
                break;
              case 7:
                unint64_t v8 = 0xE600000000000000;
                break;
              case 9:
                unint64_t v8 = 0xE600000000000000;
                break;
              case 10:
                unint64_t v8 = 0xE500000000000000;
                break;
              case 11:
                unint64_t v8 = 0xE600000000000000;
                break;
              case 12:
                unint64_t v8 = 0xE600000000000000;
                break;
              case 13:
                unint64_t v8 = 0xE500000000000000;
                break;
              default:
                JUMPOUT(0);
            }
            unint64_t v9 = sub_25A50ED60();
            swift_bridgeObjectRelease();
            if (((v8 >> 40) & 0xF0000) >> 14 < v9 >> 14)
            {
              __break(1u);
              JUMPOUT(0x25A49D618);
            }
            sub_25A50EEE0();
            swift_bridgeObjectRelease();
            sub_25A49EC84();
            uint64_t v7 = sub_25A50FB30();
            unint64_t v6 = v10;
            swift_bridgeObjectRelease();
          }
          unint64_t v12 = *(void *)(v15 + 16);
          unint64_t v11 = *(void *)(v15 + 24);
          if (v12 >= v11 >> 1) {
            sub_25A39A068(v11 > 1, v12 + 1, 1);
          }
          *(void *)(v15 + 16) = v12 + 1;
          uint64_t v13 = v15 + 16 * v12;
          *(void *)(v13 + 32) = v7;
          *(void *)(v13 + 40) = v6;
          if (!--v0) {
            return v1;
          }
          continue;
      }
    }
  }
  return v1;
}

uint64_t sub_25A49D688()
{
  uint64_t result = sub_25A49D6AC();
  qword_26A41A638 = result;
  unk_26A41A640 = v1;
  return result;
}

uint64_t sub_25A49D6AC()
{
  if (qword_26A415648 != -1) {
    swift_once();
  }
  uint64_t v0 = (char *)off_26A41A630;
  int64_t v1 = *((void *)off_26A41A630 + 2);
  if (v1)
  {
    uint64_t v14 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    sub_25A39A068(0, v1, 0);
    uint64_t v2 = self;
    int v3 = v0 + 40;
    do
    {
      swift_bridgeObjectRetain();
      int v4 = (void *)sub_25A50EBF0();
      id v5 = objc_msgSend(v2, sel_escapedPatternForString_, v4);

      uint64_t v6 = sub_25A50EC20();
      uint64_t v8 = v7;
      swift_bridgeObjectRelease();

      unint64_t v10 = *(void *)(v14 + 16);
      unint64_t v9 = *(void *)(v14 + 24);
      if (v10 >= v9 >> 1) {
        sub_25A39A068(v9 > 1, v10 + 1, 1);
      }
      v3 += 16;
      *(void *)(v14 + 16) = v10 + 1;
      uint64_t v11 = v14 + 16 * v10;
      *(void *)(v11 + 32) = v6;
      *(void *)(v11 + 40) = v8;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415DC0);
  sub_25A3A108C();
  uint64_t v12 = sub_25A50EAD0();
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_25A49D870()
{
  uint64_t result = sub_25A49D894();
  qword_26A41A648 = result;
  unk_26A41A650 = v1;
  return result;
}

uint64_t sub_25A49D894()
{
  uint64_t v20 = MEMORY[0x263F8EE78];
  sub_25A39A068(0, 2, 0);
  uint64_t v0 = v20;
  uint64_t v1 = self;
  uint64_t v2 = (void *)sub_25A50EBF0();
  id v3 = objc_msgSend(v1, sel_escapedPatternForString_, v2);

  uint64_t v4 = sub_25A50EC20();
  uint64_t v6 = v5;

  unint64_t v8 = *(void *)(v20 + 16);
  unint64_t v7 = *(void *)(v20 + 24);
  if (v8 >= v7 >> 1)
  {
    sub_25A39A068(v7 > 1, v8 + 1, 1);
    uint64_t v0 = v20;
  }
  *(void *)(v0 + 16) = v8 + 1;
  uint64_t v9 = v0 + 16 * v8;
  *(void *)(v9 + 32) = v4;
  *(void *)(v9 + 40) = v6;
  unint64_t v10 = (void *)sub_25A50EBF0();
  id v11 = objc_msgSend(v1, sel_escapedPatternForString_, v10);

  uint64_t v12 = sub_25A50EC20();
  uint64_t v14 = v13;

  unint64_t v16 = *(void *)(v0 + 16);
  unint64_t v15 = *(void *)(v0 + 24);
  if (v16 >= v15 >> 1)
  {
    sub_25A39A068(v15 > 1, v16 + 1, 1);
    uint64_t v0 = v20;
  }
  *(void *)(v0 + 16) = v16 + 1;
  uint64_t v17 = v0 + 16 * v16;
  *(void *)(v17 + 32) = v12;
  *(void *)(v17 + 40) = v14;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415DC0);
  sub_25A3A108C();
  uint64_t v18 = sub_25A50EAD0();
  swift_release();
  return v18;
}

id sub_25A49DA58()
{
  id result = sub_25A49DA78();
  qword_26A41A658 = (uint64_t)result;
  return result;
}

id sub_25A49DA78()
{
  if (qword_26A415650 != -1) {
    swift_once();
  }
  sub_25A50EDA0();
  sub_25A50EDA0();
  sub_25A50EDA0();
  sub_25A50EDA0();
  sub_25A50FDB0();
  sub_25A50EDA0();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  if (qword_26A415658 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  sub_25A50EDA0();
  sub_25A50EDA0();
  swift_bridgeObjectRetain();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  id v0 = objc_allocWithZone(MEMORY[0x263F08AE8]);
  return sub_25A4B2F48(0, 0xE000000000000000, 0);
}

id sub_25A49DD3C()
{
  id v0 = objc_allocWithZone(MEMORY[0x263F08AE8]);
  id result = sub_25A4B2F48(0x292B2E282A5FLL, 0xE600000000000000, 0);
  qword_26A41A660 = (uint64_t)result;
  return result;
}

Swift::String __swiftcall String.englishName(strippingClassPrefix:)(Swift::Bool strippingClassPrefix)
{
  uint64_t v4 = v2;
  uint64_t v5 = v1;
  BOOL v93 = strippingClassPrefix;
  uint64_t v6 = sub_25A50E0C0();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v90 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = v5;
  unint64_t v100 = (unint64_t)v4;
  sub_25A50E070();
  sub_25A39BE4C();
  unint64_t object = sub_25A50FB50();
  unint64_t v12 = v11;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v13 = HIBYTE(v12) & 0xF;
  if ((v12 & 0x2000000000000000) == 0) {
    uint64_t v13 = object & 0xFFFFFFFFFFFFLL;
  }
  if (v13)
  {
    if (qword_26A415660 != -1) {
      swift_once();
    }
    id v14 = (id)qword_26A41A658;
    unint64_t v15 = (void *)sub_25A50EBF0();
    swift_bridgeObjectRetain();
    uint64_t v16 = sub_25A50EE60();
    swift_bridgeObjectRelease();
    id v17 = objc_msgSend(v14, sel_matchesInString_options_range_, v15, 0, 0, v16);

    sub_25A49EBF8();
    unint64_t v18 = sub_25A50F090();

    id v97 = (id)sub_25A50EBF0();
    swift_bridgeObjectRelease();
    uint64_t v91 = v5;
    long long v92 = v4;
    if (v18 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t countAndFlagsBits = sub_25A510100();
      swift_bridgeObjectRelease();
      if (countAndFlagsBits) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t countAndFlagsBits = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (countAndFlagsBits)
      {
LABEL_8:
        if (countAndFlagsBits < 1) {
          goto LABEL_86;
        }
        uint64_t v20 = 0;
        unint64_t v96 = v18 & 0xC000000000000001;
        id v3 = (void *)MEMORY[0x263F8EE78];
        uint64_t v94 = countAndFlagsBits;
        unint64_t v95 = v18;
        while (1)
        {
          if (v96)
          {
            id v22 = (id)MEMORY[0x26113DE30](v20, v18);
            if (v20) {
              goto LABEL_15;
            }
          }
          else
          {
            id v22 = *(id *)(v18 + 8 * v20 + 32);
            if (v20)
            {
LABEL_15:
              uint64_t v23 = 0;
              unint64_t v24 = 0;
              goto LABEL_20;
            }
          }
          id v25 = objc_msgSend(v22, sel_range);
          uint64_t v23 = 0;
          unint64_t v24 = 0;
          if (v25 && !v93)
          {
            id v26 = objc_msgSend(v97, sel_substringToIndex_, v25);
            uint64_t v23 = sub_25A50EC20();
            unint64_t v24 = v27;
          }
LABEL_20:
          uint64_t v98 = (void *)v23;
          uint64_t v28 = v3;
          id v29 = objc_msgSend(v22, sel_range);
          id v31 = objc_msgSend(v97, sel_substringWithRange_, v29, v30);
          long long v32 = v31;
          uint64_t v33 = v31;
          if (!v31)
          {
            sub_25A50EC20();
            uint64_t v33 = (void *)sub_25A50EBF0();
            swift_bridgeObjectRelease();
            sub_25A50EC20();
            long long v32 = (void *)sub_25A50EBF0();
            swift_bridgeObjectRelease();
          }
          sub_25A50EC20();
          uint64_t v35 = v34;
          uint64_t v36 = qword_26A415668;
          id v37 = v31;
          if (v36 != -1) {
            swift_once();
          }
          uint64_t v38 = (void *)qword_26A41A660;
          if ((v35 & 0x1000000000000000) != 0) {
            uint64_t v39 = sub_25A50EE40();
          }
          else {
            uint64_t v39 = sub_25A50EE50();
          }
          uint64_t v40 = v39;
          id v41 = v38;
          swift_bridgeObjectRelease();
          id v42 = objc_msgSend(v41, sel_firstMatchInString_options_range_, v33, 0, 0, v40);

          if (v42)
          {
            id v43 = objc_msgSend(v42, sel_rangeAtIndex_, 1);
            uint64_t v45 = v44;
            id v46 = objc_msgSend(v32, sel_substringWithRange_, v43, v44);

            uint64_t v47 = sub_25A50EC20();
            uint64_t v49 = v48;

            if (!v24)
            {
              id v3 = v28;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                id v3 = sub_25A38A5A4(0, v28[2] + 1, 1, v28);
              }
              uint64_t v21 = v94;
              unint64_t v57 = v3[2];
              unint64_t v56 = v3[3];
              if (v57 >= v56 >> 1) {
                id v3 = sub_25A38A5A4((void *)(v56 > 1), v57 + 1, 1, v3);
              }
              _OWORD v3[2] = v57 + 1;
              uint64_t v58 = &v3[2 * v57];
              v58[4] = v47;
              v58[5] = v49;

              unint64_t v18 = v95;
              goto LABEL_12;
            }
            if (v43 != objc_msgSend(v42, sel_range) || v45 != v50)
            {
              id v3 = v28;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                id v3 = sub_25A38A5A4(0, v28[2] + 1, 1, v28);
              }
              uint64_t v21 = v94;
              unint64_t v60 = v3[2];
              unint64_t v59 = v3[3];
              int64_t v61 = v59 >> 1;
              unint64_t v62 = v60 + 1;
              if (v59 >> 1 <= v60)
              {
                id v3 = sub_25A38A5A4((void *)(v59 > 1), v60 + 1, 1, v3);
                unint64_t v59 = v3[3];
                int64_t v61 = v59 >> 1;
              }
              _OWORD v3[2] = v62;
              int v63 = &v3[2 * v60];
              uint64_t v63[4] = v98;
              v63[5] = v24;
              unint64_t v64 = v60 + 2;
              if (v61 < (uint64_t)(v60 + 2)) {
                id v3 = sub_25A38A5A4((void *)(v59 > 1), v60 + 2, 1, v3);
              }
              unint64_t v18 = v95;
              _OWORD v3[2] = v64;
              uint64_t v65 = &v3[2 * v62];
              v65[4] = v47;
              v65[5] = v49;

              goto LABEL_12;
            }
            uint64_t v99 = (uint64_t)v98;
            unint64_t v100 = v24;
            sub_25A50EDA0();
            swift_bridgeObjectRelease();
            uint64_t v51 = v99;
            unint64_t v52 = v100;
            id v3 = v28;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              id v3 = sub_25A38A5A4(0, v28[2] + 1, 1, v28);
            }
            unint64_t v54 = v3[2];
            unint64_t v53 = v3[3];
            if (v54 >= v53 >> 1) {
              id v3 = sub_25A38A5A4((void *)(v53 > 1), v54 + 1, 1, v3);
            }
            _OWORD v3[2] = v54 + 1;
            uint64_t v55 = &v3[2 * v54];
            v55[4] = v51;
            v55[5] = v52;
          }
          else
          {

            swift_bridgeObjectRelease();
            id v3 = v28;
          }
          uint64_t v21 = v94;
          unint64_t v18 = v95;
LABEL_12:
          if (v21 == ++v20) {
            goto LABEL_51;
          }
        }
      }
    }
    id v3 = (void *)MEMORY[0x263F8EE78];
LABEL_51:
    swift_bridgeObjectRelease();
    if (v3[2])
    {
      swift_bridgeObjectRetain();
      Swift::String v66 = String.uppercasingFirstLetter()();
      uint64_t countAndFlagsBits = v66._countAndFlagsBits;
      unint64_t object = (unint64_t)v66._object;
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        goto LABEL_87;
      }
      if (!v3[2])
      {
LABEL_88:
        __break(1u);
        JUMPOUT(0x25A49E9BCLL);
      }
LABEL_54:
      v3[4] = countAndFlagsBits;
      v3[5] = object;
      swift_bridgeObjectRelease();
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A4158C0);
      uint64_t v67 = swift_allocObject();
      *(_OWORD *)(v67 + 16) = xmmword_25A5119F0;
      *(void *)(v67 + 32) = v91;
      *(void *)(v67 + 40) = v92;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      id v3 = (void *)v67;
    }
    int64_t v68 = v3[2];
    uint64_t v69 = MEMORY[0x263F8EE78];
    if (v68)
    {
      uint64_t v103 = MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      sub_25A39A068(0, v68, 0);
      uint64_t v69 = v103;
      uint64_t v98 = v3;
      uint64_t v70 = (void **)(v3 + 5);
      while (2)
      {
        uint64_t v71 = (uint64_t)*(v70 - 1);
        id v3 = *v70;
        sub_25A50EA40();
        swift_bridgeObjectRetain();
        unsigned __int8 v72 = sub_25A49EC38();
        v70 += 2;
        switch(v72)
        {
          case 6u:
            swift_bridgeObjectRelease();
            goto LABEL_78;
          case 0xEu:
            goto LABEL_79;
          default:
            char v73 = sub_25A510370();
            swift_bridgeObjectRelease();
            if (v73) {
              goto LABEL_78;
            }
            unint64_t object = 0xE300000000000000;
            uint64_t v74 = v72;
            uint64_t countAndFlagsBits = 7565161;
            switch(v74)
            {
              case 1:
                unint64_t object = 0xE600000000000000;
                uint64_t countAndFlagsBits = 0x656E6F687069;
                break;
              case 2:
                unint64_t object = 0xE400000000000000;
                uint64_t countAndFlagsBits = 1684107369;
                break;
              case 3:
                unint64_t object = 0xE600000000000000;
                uint64_t countAndFlagsBits = 0x64756F6C6369;
                break;
              case 4:
                uint64_t countAndFlagsBits = 1685024873;
                unint64_t object = 0xE400000000000000;
                break;
              case 5:
                unint64_t object = 0xE800000000000000;
                uint64_t countAndFlagsBits = 0x6567617373656D69;
                break;
              case 6:
                break;
              case 7:
                unint64_t object = 0xE600000000000000;
                uint64_t countAndFlagsBits = 0x73656E757469;
                break;
              case 8:
                uint64_t countAndFlagsBits = 6578537;
                break;
              case 9:
                unint64_t object = 0xE600000000000000;
                uint64_t countAndFlagsBits = 0x6F746F687069;
                break;
              case 10:
                unint64_t object = 0xE500000000000000;
                uint64_t countAndFlagsBits = 0x6566696C69;
                break;
              case 11:
                unint64_t object = 0xE600000000000000;
                uint64_t countAndFlagsBits = 0x6569766F6D69;
                break;
              case 12:
                unint64_t object = 0xE600000000000000;
                uint64_t countAndFlagsBits = 0x736B6F6F6269;
                break;
              case 13:
                unint64_t object = 0xE500000000000000;
                uint64_t countAndFlagsBits = 0x6B726F7769;
                break;
              default:
                unint64_t object = 0xE400000000000000;
                uint64_t countAndFlagsBits = 1667329385;
                break;
            }
            unint64_t v75 = sub_25A50ED60();
            swift_bridgeObjectRelease();
            if (((object >> 40) & 0xF0000) >> 14 < v75 >> 14)
            {
              __break(1u);
LABEL_86:
              __break(1u);
LABEL_87:
              id v3 = sub_25A3C7BF8(v3);
              if (!v3[2]) {
                goto LABEL_88;
              }
              goto LABEL_54;
            }
            uint64_t v76 = sub_25A50EEE0();
            unint64_t v78 = v77;
            uint64_t v80 = v79;
            uint64_t v82 = v81;
            swift_bridgeObjectRelease();
            uint64_t v99 = v76;
            unint64_t v100 = v78;
            uint64_t v101 = v80;
            uint64_t v102 = v82;
            sub_25A49EC84();
            sub_25A50FB30();
            swift_bridgeObjectRelease();
LABEL_78:
            uint64_t v99 = 105;
            unint64_t v100 = 0xE100000000000000;
            sub_25A50EDA0();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v71 = v99;
            id v3 = (void *)v100;
LABEL_79:
            uint64_t v103 = v69;
            unint64_t v84 = *(void *)(v69 + 16);
            unint64_t v83 = *(void *)(v69 + 24);
            if (v84 >= v83 >> 1)
            {
              sub_25A39A068(v83 > 1, v84 + 1, 1);
              uint64_t v69 = v103;
            }
            *(void *)(v69 + 16) = v84 + 1;
            unint64_t v85 = v69 + 16 * v84;
            *(void *)(v85 + 32) = v71;
            *(void *)(v85 + 40) = v3;
            if (--v68) {
              continue;
            }
            swift_bridgeObjectRelease();
            break;
        }
        break;
      }
    }
    uint64_t v99 = v69;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A415DC0);
    sub_25A3A108C();
    uint64_t v5 = sub_25A50EAD0();
    uint64_t v4 = v86;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  uint64_t v87 = v5;
  long long v88 = v4;
  result._unint64_t object = v88;
  result._uint64_t countAndFlagsBits = v87;
  return result;
}

uint64_t String.firstEnglishNameLetter.getter()
{
  uint64_t v0 = sub_25A50E0C0();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  id v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v8 = String.englishName(strippingClassPrefix:)(1);
  sub_25A50E090();
  sub_25A39BE4C();
  sub_25A50FB40();
  char v5 = v4;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (v5)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    sub_25A50EEE0();
    swift_bridgeObjectRelease();
    sub_25A50FA90();
    swift_bridgeObjectRelease();
    uint64_t v6 = sub_25A50EEB0();
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t sub_25A49EBF0(Swift::Bool strippingClassPrefix)
{
  return String.englishName(strippingClassPrefix:)(strippingClassPrefix)._countAndFlagsBits;
}

unint64_t sub_25A49EBF8()
{
  unint64_t result = qword_26A41A668;
  if (!qword_26A41A668)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_26A41A668);
  }
  return result;
}

uint64_t sub_25A49EC38()
{
  unint64_t v0 = sub_25A510190();
  swift_bridgeObjectRelease();
  if (v0 >= 0xE) {
    return 14;
  }
  else {
    return v0;
  }
}

unint64_t sub_25A49EC84()
{
  unint64_t result = qword_26A41A670;
  if (!qword_26A41A670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A41A670);
  }
  return result;
}

uint64_t dispatch thunk of EnglishNameConvertible.englishName(strippingClassPrefix:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t AsyncSequence.collect()(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3[6] = AssociatedTypeWitness;
  uint64_t v6 = sub_25A50FA40();
  v3[7] = v6;
  v3[8] = *(void *)(v6 - 8);
  v3[9] = swift_task_alloc();
  v3[10] = *(void *)(AssociatedTypeWitness - 8);
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  v3[13] = *(void *)(a1 - 8);
  v3[14] = swift_task_alloc();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  v3[15] = v7;
  v3[16] = *(void *)(v7 - 8);
  v3[17] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_25A49EF10, 0, 0);
}

uint64_t sub_25A49EF10()
{
  uint64_t v2 = v0[13];
  uint64_t v1 = v0[14];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[3];
  v0[2] = sub_25A50E860();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v3, v4);
  sub_25A50F430();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v6 = (void *)swift_task_alloc();
  v0[18] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_25A49F02C;
  uint64_t v7 = v0[15];
  uint64_t v8 = v0[9];
  return MEMORY[0x270FA1E80](v8, v7, AssociatedConformanceWitness);
}

uint64_t sub_25A49F02C()
{
  *(void *)(*(void *)v1 + 152) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_25A49F378;
  }
  else
  {
    uint64_t v2 = sub_25A49F148;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_25A49F148()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[6];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    uint64_t v4 = v0[7];
    uint64_t v5 = v0[8];
    (*(void (**)(void, void))(v0[16] + 8))(v0[17], v0[15]);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1, v4);
    uint64_t v6 = v0[2];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(uint64_t))v0[1];
    return v7(v6);
  }
  else
  {
    uint64_t v10 = v0[11];
    uint64_t v9 = v0[12];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v9, v1, v3);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v10, v9, v3);
    sub_25A50F1E0();
    sub_25A50F180();
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v9, v3);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    unint64_t v12 = (void *)swift_task_alloc();
    v0[18] = v12;
    *unint64_t v12 = v0;
    v12[1] = sub_25A49F02C;
    uint64_t v13 = v0[15];
    uint64_t v14 = v0[9];
    return MEMORY[0x270FA1E80](v14, v13, AssociatedConformanceWitness);
  }
}

uint64_t sub_25A49F378()
{
  (*(void (**)(void, void))(v0[16] + 8))(v0[17], v0[15]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t OrderedSet.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_25A50F120();
  uint64_t v10 = sub_25A50E880();
  uint64_t v20 = v9;
  uint64_t v21 = v10;
  if (MEMORY[0x26113D1B0](a1, a2))
  {
    uint64_t v17 = v7;
    unint64_t v18 = a3;
    uint64_t v11 = 0;
    while (1)
    {
      char v12 = sub_25A50F140();
      sub_25A50F0D0();
      if (v12)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, a1+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v11, a2);
        uint64_t v13 = v11 + 1;
        if (__OFADD__(v11, 1)) {
          goto LABEL_10;
        }
      }
      else
      {
        uint64_t result = sub_25A50FE20();
        if (v17 != 8)
        {
          __break(1u);
          return result;
        }
        uint64_t v19 = result;
        (*(void (**)(char *, uint64_t *, uint64_t))(v6 + 16))(v8, &v19, a2);
        swift_unknownObjectRelease();
        uint64_t v13 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_10:
          __break(1u);
LABEL_11:
          uint64_t result = swift_bridgeObjectRelease();
          uint64_t v9 = v20;
          uint64_t v10 = v21;
          a3 = v18;
          goto LABEL_13;
        }
      }
      uint64_t v14 = type metadata accessor for OrderedSet();
      OrderedSet.append(_:)((uint64_t)v8, v14);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a2);
      ++v11;
      if (v13 == MEMORY[0x26113D1B0](a1, a2)) {
        goto LABEL_11;
      }
    }
  }
  uint64_t result = swift_bridgeObjectRelease();
LABEL_13:
  *a3 = v9;
  a3[1] = v10;
  return result;
}

uint64_t OrderedSet.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = a2;
  uint64_t v25 = a1;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_25A50FA40();
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v11 = (char *)&v21 - v10;
  uint64_t v12 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v22 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v17 = (char *)&v21 - v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v25, a3);
  sub_25A50EEF0();
  swift_getAssociatedConformanceWitness();
  unint64_t v24 = v17;
  uint64_t v25 = AssociatedTypeWitness;
  sub_25A50FAF0();
  unint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v18(v11, 1, v4) != 1)
  {
    uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
    do
    {
      v19(v7, v11, v4);
      OrderedSet.append(_:)((uint64_t)v7, v23);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      sub_25A50FAF0();
    }
    while (v18(v11, 1, v4) != 1);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v24, v25);
}

BOOL OrderedSet.append(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)v14 - v9;
  char v11 = sub_25A50F4F0();
  if ((v11 & 1) == 0)
  {
    v14[1] = v2;
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v12(v8, a1, v4);
    sub_25A50F530();
    sub_25A50F4C0();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    v12(v10, a1, v4);
    sub_25A50F1E0();
    sub_25A50F180();
  }
  return (v11 & 1) == 0;
}

uint64_t OrderedSet.startIndex.getter()
{
  return 0;
}

uint64_t OrderedSet.subscript.getter()
{
  return sub_25A50F210();
}

uint64_t OrderedSet.appending<A>(contentsOf:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  return sub_25A4A0E1C(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))OrderedSet.append<A>(contentsOf:), a5);
}

uint64_t OrderedSet.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_25A50F120();
  uint64_t result = sub_25A50E880();
  *a1 = v2;
  a1[1] = result;
  return result;
}

Swift::Void __swiftcall OrderedSet.reserveCapacity(_:)(Swift::Int a1)
{
}

double OrderedSet.init<A>(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v35 = a4;
  id v31 = a5;
  uint64_t v32 = a1;
  uint64_t v27 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_25A50FA40();
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v12 = (char *)&v26 - v11;
  uint64_t v13 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v28 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  unint64_t v18 = (char *)&v26 - v17;
  uint64_t v19 = sub_25A50F120();
  uint64_t v20 = sub_25A50E880();
  *(void *)&long long v36 = v19;
  *((void *)&v36 + 1) = v20;
  uint64_t v29 = v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v32, a3);
  sub_25A50EEF0();
  uint64_t v30 = a3;
  swift_getAssociatedConformanceWitness();
  uint64_t v33 = v18;
  uint64_t v34 = AssociatedTypeWitness;
  sub_25A50FAF0();
  uint64_t v21 = v27;
  uint64_t v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
  if (v22(v12, 1, a2) != 1)
  {
    uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
    do
    {
      v23(v8, v12, a2);
      uint64_t v24 = type metadata accessor for OrderedSet();
      OrderedSet.append(_:)((uint64_t)v8, v24);
      (*(void (**)(char *, uint64_t))(v21 + 8))(v8, a2);
      sub_25A50FAF0();
    }
    while (v22(v12, 1, a2) != 1);
  }
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v32, v30);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v33, v34);
  double result = *(double *)&v36;
  *id v31 = v36;
  return result;
}

uint64_t static OrderedSet.== infix<A>(_:_:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x270F9DCF8](*a1, *a2, a4, *(void *)(a6 + 8));
}

void OrderedSet.count.getter()
{
}

uint64_t OrderedSet.isEmpty.getter()
{
  return sub_25A50F6C0() & 1;
}

uint64_t OrderedSet.arrayForm.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t OrderedSet.contains(_:)()
{
  return sub_25A50F4F0();
}

uint64_t OrderedSet.first.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (MEMORY[0x26113D160](*v2, v4) < 1)
  {
    uint64_t v5 = 1;
  }
  else
  {
    sub_25A50F210();
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v6(a2, v5, 1, v4);
}

uint64_t OrderedSet.last.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(a1 + 16);
  if (MEMORY[0x26113D160](*v2, v5) < 1)
  {
    uint64_t v9 = 1;
  }
  else
  {
    uint64_t v6 = MEMORY[0x26113D160](v4, v5);
    BOOL v7 = __OFSUB__(v6, 1);
    uint64_t result = v6 - 1;
    if (v7)
    {
      __break(1u);
      return result;
    }
    sub_25A50F210();
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);

  return v10(a2, v9, 1, v5);
}

uint64_t OrderedSet.indexOf(_:)()
{
  sub_25A50F1E0();
  swift_getWitnessTable();
  sub_25A50F700();
  return v1;
}

BOOL OrderedSet.appending(_:)@<W0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *v3;
  uint64_t v7 = v3[1];
  *a3 = v6;
  a3[1] = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return OrderedSet.append(_:)(a1, a2);
}

uint64_t OrderedSet.removeLast()()
{
  uint64_t v0 = sub_25A50FA40();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v5 - v2;
  sub_25A50F1E0();
  swift_getWitnessTable();
  swift_getWitnessTable();
  sub_25A50F7A0();
  sub_25A50F530();
  sub_25A50F4D0();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t OrderedSet.insert(_:atIndex:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)v15 - v11;
  if ((sub_25A50F4F0() & 1) == 0)
  {
    v15[0] = a2;
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v14(v10, a1, v6);
    sub_25A50F530();
    sub_25A50F4C0();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    v14(v12, a1, v6);
    sub_25A50F1E0();
    return sub_25A50F190();
  }
  v15[1] = *v3;
  sub_25A50F1E0();
  swift_getWitnessTable();
  uint64_t result = sub_25A50F700();
  if (v16)
  {
    __break(1u);
    return result;
  }
  if (v15[2] != a2)
  {
    sub_25A50F1A0();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v12, a1, v6);
    return sub_25A50F190();
  }
  return result;
}

uint64_t OrderedSet.remove(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = sub_25A50FA40();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v14 - v8;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  uint64_t v15 = a2;
  v10(a2, 1, 1, v5);
  long long v16 = *v3;
  uint64_t result = OrderedSet.indexOf(_:)();
  if ((v12 & 1) == 0)
  {
    OrderedSet.remove(at:)();
    uint64_t v13 = v15;
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v15, v6);
    v10((uint64_t)v9, 0, 1, v5);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(v13, v9, v6);
  }
  return result;
}

uint64_t OrderedSet.remove(at:)()
{
  uint64_t v0 = sub_25A50FA40();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v5 - v2;
  sub_25A50F1E0();
  sub_25A50F1A0();
  sub_25A50F530();
  sub_25A50F4D0();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t OrderedSet.subtract<A>(_:)(char *a1, uint64_t a2, unsigned int (*a3)(void, void, void))
{
  uint64_t v39 = a3;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  id v43 = a1;
  uint64_t v44 = v7;
  uint64_t v8 = MEMORY[0x270FA5388](a1);
  uint64_t v38 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v37 - v10;
  uint64_t v12 = sub_25A50FA40();
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v15 = (char *)&v37 - v14;
  uint64_t v40 = *((void *)a3 - 1);
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v37 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v20 = (char *)&v37 - v19;
  uint64_t v41 = a2;
  id v42 = v3;
  sub_25A50F530();
  uint64_t v21 = v43;
  uint64_t v22 = v39;
  sub_25A50F500();
  (*(void (**)(char *, char *, unsigned int (*)(void, void, void)))(v40 + 16))(v17, v21, v22);
  sub_25A50EEF0();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  id v43 = v20;
  uint64_t v40 = AssociatedConformanceWitness;
  sub_25A50FAF0();
  uint64_t v24 = v44;
  uint64_t v25 = AssociatedTypeWitness;
  uint64_t v39 = *(unsigned int (**)(void, void, void))(v44 + 48);
  if (v39(v15, 1, v6) != 1)
  {
    uint64_t v27 = v24 + 32;
    uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v24 + 32);
    uint64_t v44 = v27;
    uint64_t v29 = (void (**)(char *, uint64_t))(v27 - 24);
    uint64_t v30 = v42;
    v28(v11, v15, v6);
    while (1)
    {
      long long v45 = *v30;
      OrderedSet.indexOf(_:)();
      if (v36)
      {
        (*v29)(v11, v6);
      }
      else
      {
        sub_25A50F1E0();
        id v31 = v28;
        uint64_t v32 = v25;
        uint64_t v33 = v38;
        sub_25A50F1A0();
        uint64_t v34 = *v29;
        uint64_t v35 = v33;
        uint64_t v25 = v32;
        uint64_t v28 = v31;
        (*v29)(v35, v6);
        v34(v11, v6);
      }
      sub_25A50FAF0();
      if (v39(v15, 1, v6) == 1) {
        break;
      }
      v28(v11, v15, v6);
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v43, v25);
}

uint64_t OrderedSet.subtracting<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  return sub_25A4A0E1C(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))OrderedSet.subtract<A>(_:), a5);
}

uint64_t OrderedSet.formIntersection<A>(_:)()
{
  return sub_25A50F7C0();
}

uint64_t OrderedSet.intersection<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  return sub_25A4A0E1C(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))OrderedSet.formIntersection<A>(_:), a5);
}

uint64_t sub_25A4A0E1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t)@<X4>, void *a6@<X8>)
{
  uint64_t v12 = *v6;
  uint64_t v13 = v6[1];
  *a6 = v12;
  a6[1] = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a5(a1, a2, a3, a4);
}

Swift::Void __swiftcall OrderedSet.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
}

void OrderedSet.endIndex.getter()
{
}

uint64_t OrderedSet.makeIterator()()
{
  return sub_25A50FD10();
}

uint64_t sub_25A4A0FC0(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static OrderedSet.== infix<A>(_:_:)(a1, a2, a3, *(void *)(a3 + 16), a5, *(void *)(a3 + 24));
}

uint64_t sub_25A4A0FC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return OrderedSet.init(arrayLiteral:)(a1, *(void *)(a2 + 16), a3);
}

uint64_t sub_25A4A0FD4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = OrderedSet.makeIterator()();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_25A4A1018(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F9E108](a1, WitnessTable);
}

uint64_t sub_25A4A106C(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F9E128](a1, WitnessTable);
}

uint64_t sub_25A4A10C0(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x263F8D708];

  return MEMORY[0x270F9E060](a1, a2, WitnessTable, v5);
}

void *sub_25A4A1130(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_25A4A1514(a1, a2, a3, MEMORY[0x263F8D7A8]);
}

uint64_t sub_25A4A1148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x263F8D708];

  return MEMORY[0x270F9E068](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_25A4A11CC()
{
  swift_getWitnessTable();

  return sub_25A50F580();
}

uint64_t sub_25A4A1250(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x263F8D708];

  return MEMORY[0x270F9E078](a1, a2, a3, WitnessTable, v7);
}

void sub_25A4A12C4()
{
}

uint64_t sub_25A4A12DC(uint64_t result)
{
  void *v1 = result;
  return result;
}

void (*sub_25A4A12EC(void *a1, uint64_t *a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = sub_25A4A135C(v6, *a2, a3);
  return sub_25A3AC394;
}

void (*sub_25A4A135C(void *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v3 = *(void *)(a3 + 16);
  *a1 = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  a1[1] = v4;
  a1[2] = malloc(*(void *)(v4 + 64));
  sub_25A50F210();
  return sub_25A3AC494;
}

uint64_t sub_25A4A1418(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v3 = MEMORY[0x263F8D708];

  return MEMORY[0x270F9E070](a1, WitnessTable, v3);
}

uint64_t sub_25A4A148C(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x263F8D708];

  return MEMORY[0x270F9E058](a1, a2, WitnessTable, v5);
}

void *sub_25A4A14FC(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_25A4A1514(a1, a2, a3, MEMORY[0x263F8D7A0]);
}

void *sub_25A4A1514(void *a1, uint64_t a2, uint64_t a3, void *(*a4)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, void))
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = a4(&v9, a1, a2, WitnessTable, MEMORY[0x263F8D708]);
  *a1 = v9;
  return result;
}

uint64_t type metadata accessor for OrderedSet()
{
  return __swift_instantiateGenericMetadata();
}

BOOL sub_25A4A15A4()
{
  swift_bridgeObjectRetain();
  char v0 = sub_25A50F4F0();
  swift_bridgeObjectRelease();
  return (v0 & 1) == 0;
}

uint64_t sub_25A4A1614()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A4A1630()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A4A1694()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A4A16B0()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A4A16CC()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A4A1730()
{
  return swift_getWitnessTable();
}

uint64_t sub_25A4A1758(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  if (a3 == -1)
  {
    sub_25A4A3264(a4, a5, (uint64_t)v13);
    swift_bridgeObjectRelease();
    return sub_25A4A3818(v13[0], v13[1], v14);
  }
  else
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v13[0] = *v5;
    *uint64_t v5 = 0x8000000000000000;
    sub_25A3FDEC8(a1, a2, a3, a4, a5, isUniquelyReferenced_nonNull_native);
    *uint64_t v5 = v13[0];
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_25A4A1838(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (*(void *)(a1 + 24))
  {
    sub_25A3936C4((_OWORD *)a1, v14);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    sub_25A3FE064(v14, a2, isUniquelyReferenced_nonNull_native);
    uint64_t *v2 = v12;
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_25A3C9154(a1);
    unint64_t v7 = sub_25A4096EC(a2);
    if (v8)
    {
      unint64_t v9 = v7;
      char v10 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = *v2;
      uint64_t v13 = *v3;
      uint64_t *v3 = 0x8000000000000000;
      if ((v10 & 1) == 0)
      {
        sub_25A40EB8C();
        uint64_t v11 = v13;
      }
      sub_25A3936C4((_OWORD *)(*(void *)(v11 + 56) + 32 * v9), v14);
      sub_25A397E4C(v9, v11);
      uint64_t *v3 = v11;
      swift_bridgeObjectRelease();
    }
    else
    {
      memset(v14, 0, sizeof(v14));
    }
    return sub_25A3C9154((uint64_t)v14);
  }
}

uint64_t sub_25A4A193C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24))
  {
    sub_25A3936C4((_OWORD *)a1, v7);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v6 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    sub_25A3FE2D8(v7, a2, isUniquelyReferenced_nonNull_native);
    uint64_t *v2 = v6;
    swift_bridgeObjectRelease();
    return sub_25A39C7F0(a2);
  }
  else
  {
    sub_25A3C9154(a1);
    sub_25A4A3358(a2, v7);
    sub_25A39C7F0(a2);
    return sub_25A3C9154((uint64_t)v7);
  }
}

uint64_t sub_25A4A19EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    sub_25A3936C4((_OWORD *)a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    sub_25A3FE930(v9, a2, a3, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_25A3C9154(a1);
    sub_25A4A3454(a2, a3, v9);
    swift_bridgeObjectRelease();
    return sub_25A3C9154((uint64_t)v9);
  }
}

uint64_t sub_25A4A1AAC(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v54 = MEMORY[0x263F8EE78];
  sub_25A39A228(0, v2, 0);
  uint64_t v3 = a1;
  uint64_t v48 = a1;
  uint64_t v49 = a1 + 64;
  uint64_t v4 = -1;
  uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
  if (-v5 < 64) {
    uint64_t v4 = ~(-1 << -(char)v5);
  }
  unint64_t v6 = v4 & *(void *)(a1 + 64);
  int64_t v50 = (unint64_t)(63 - v5) >> 6;
  int64_t v47 = v2;
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v51 = 0;
    int64_t v7 = 0;
    while (2)
    {
      if (v6)
      {
        unint64_t v8 = __clz(__rbit64(v6));
        v6 &= v6 - 1;
        unint64_t v9 = v8 | (v7 << 6);
        goto LABEL_23;
      }
      int64_t v10 = v7 + 1;
      if (!__OFADD__(v7, 1))
      {
        if (v10 >= v50) {
          goto LABEL_72;
        }
        unint64_t v11 = *(void *)(v49 + 8 * v10);
        ++v7;
        if (v11) {
          goto LABEL_22;
        }
        int64_t v7 = v10 + 1;
        if (v10 + 1 >= v50) {
          goto LABEL_72;
        }
        unint64_t v11 = *(void *)(v49 + 8 * v7);
        if (v11) {
          goto LABEL_22;
        }
        int64_t v7 = v10 + 2;
        if (v10 + 2 >= v50) {
          goto LABEL_72;
        }
        unint64_t v11 = *(void *)(v49 + 8 * v7);
        if (v11) {
          goto LABEL_22;
        }
        int64_t v7 = v10 + 3;
        if (v10 + 3 >= v50) {
          goto LABEL_72;
        }
        unint64_t v11 = *(void *)(v49 + 8 * v7);
        if (v11) {
          goto LABEL_22;
        }
        int64_t v12 = v10 + 4;
        if (v12 >= v50) {
          goto LABEL_72;
        }
        unint64_t v11 = *(void *)(v49 + 8 * v12);
        if (v11)
        {
          int64_t v7 = v12;
LABEL_22:
          unint64_t v6 = (v11 - 1) & v11;
          unint64_t v9 = __clz(__rbit64(v11)) + (v7 << 6);
LABEL_23:
          uint64_t v13 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v9);
          uint64_t v14 = *v13;
          uint64_t v15 = v13[1];
          uint64_t v16 = *(void *)(v3 + 56) + 24 * v9;
          uint64_t v18 = *(void *)v16;
          unint64_t v17 = *(void *)(v16 + 8);
          uint64_t v19 = *(unsigned __int8 *)(v16 + 16);
          swift_bridgeObjectRetain();
          sub_25A39373C(v18, v17, v19);
          if (v15)
          {
            ++v51;
            int64_t v52 = v7;
            switch(v19)
            {
              case 1:
                sub_25A4A37DC(0, qword_26A41A748);
                swift_bridgeObjectRetain();
                id v20 = (id)sub_25A50F980();
                uint64_t v3 = v48;
                goto LABEL_31;
              case 2:
                sub_25A4A37DC(0, qword_26A41A748);
                swift_bridgeObjectRetain();
                id v20 = (id)sub_25A50F990();
                uint64_t v3 = v48;
                goto LABEL_31;
              case 3:
                sub_25A4A37DC(0, qword_26A41A748);
                swift_bridgeObjectRetain();
                id v20 = (id)sub_25A50F970();
                uint64_t v3 = v48;
                goto LABEL_31;
              case 4:
                swift_bridgeObjectRetain();
                sub_25A39373C(v18, v17, 4);
                uint64_t v21 = sub_25A50E370();
                sub_25A3B9028(v18, v17, 4);
                goto LABEL_32;
              case 5:
                id v22 = objc_allocWithZone(MEMORY[0x263EFF9D0]);
                swift_bridgeObjectRetain();
                id v20 = objc_msgSend(v22, sel_init);
                goto LABEL_31;
              default:
                swift_bridgeObjectRetain();
                id v20 = (id)sub_25A50EBF0();
LABEL_31:
                uint64_t v21 = (uint64_t)v20;
LABEL_32:
                swift_bridgeObjectRelease();
                sub_25A3B9028(v18, v17, v19);
                unint64_t v24 = *(void *)(v54 + 16);
                unint64_t v23 = *(void *)(v54 + 24);
                if (v24 >= v23 >> 1)
                {
                  sub_25A39A228(v23 > 1, v24 + 1, 1);
                  uint64_t v3 = v48;
                }
                *(void *)(v54 + 16) = v24 + 1;
                uint64_t v25 = (void *)(v54 + 24 * v24);
                void v25[4] = v14;
                v25[5] = v15;
                v25[6] = v21;
                int64_t v7 = v52;
                if (v51 != v47) {
                  continue;
                }
                if (!v6) {
                  goto LABEL_39;
                }
                goto LABEL_38;
            }
          }
LABEL_72:
          __break(1u);
          JUMPOUT(0x25A4A21C0);
        }
        while (1)
        {
          int64_t v7 = v12 + 1;
          if (__OFADD__(v12, 1)) {
            break;
          }
          if (v7 >= v50) {
            goto LABEL_72;
          }
          unint64_t v11 = *(void *)(v49 + 8 * v7);
          ++v12;
          if (v11) {
            goto LABEL_22;
          }
        }
LABEL_71:
        __break(1u);
        goto LABEL_72;
      }
      goto LABEL_69;
    }
  }
  swift_bridgeObjectRetain();
  int64_t v7 = 0;
  if (v6)
  {
LABEL_38:
    while (2)
    {
      unint64_t v26 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      int64_t v53 = v7;
      unint64_t v27 = v26 | (v7 << 6);
LABEL_55:
      uint64_t v32 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v27);
      uint64_t v33 = *v32;
      uint64_t v34 = v32[1];
      uint64_t v35 = *(void *)(v3 + 56) + 24 * v27;
      uint64_t v36 = *(void *)v35;
      unint64_t v37 = *(void *)(v35 + 8);
      char v38 = *(unsigned char *)(v35 + 16);
      switch(v38)
      {
        case 1:
          sub_25A4A37DC(0, qword_26A41A748);
          swift_bridgeObjectRetain_n();
          id v39 = (id)sub_25A50F980();
          uint64_t v3 = v48;
          goto LABEL_62;
        case 2:
          sub_25A4A37DC(0, qword_26A41A748);
          swift_bridgeObjectRetain_n();
          id v39 = (id)sub_25A50F990();
          uint64_t v3 = v48;
          goto LABEL_62;
        case 3:
          sub_25A4A37DC(0, qword_26A41A748);
          swift_bridgeObjectRetain_n();
          id v39 = (id)sub_25A50F970();
          uint64_t v3 = v48;
          goto LABEL_62;
        case 4:
          swift_bridgeObjectRetain();
          sub_25A39373C(v36, v37, 4);
          swift_bridgeObjectRetain();
          sub_25A39373C(v36, v37, 4);
          uint64_t v40 = sub_25A50E370();
          sub_25A3B9028(v36, v37, 4);
          goto LABEL_63;
        case 5:
          id v41 = objc_allocWithZone(MEMORY[0x263EFF9D0]);
          swift_bridgeObjectRetain_n();
          id v42 = v41;
          uint64_t v3 = v48;
          id v39 = objc_msgSend(v42, sel_init);
          goto LABEL_62;
        default:
          swift_bridgeObjectRetain_n();
          sub_25A39373C(v36, v37, 0);
          id v39 = (id)sub_25A50EBF0();
LABEL_62:
          uint64_t v40 = (uint64_t)v39;
LABEL_63:
          swift_bridgeObjectRelease();
          sub_25A3B9028(v36, v37, v38);
          unint64_t v44 = *(void *)(v54 + 16);
          unint64_t v43 = *(void *)(v54 + 24);
          if (v44 >= v43 >> 1)
          {
            sub_25A39A228(v43 > 1, v44 + 1, 1);
            uint64_t v3 = v48;
          }
          *(void *)(v54 + 16) = v44 + 1;
          long long v45 = (void *)(v54 + 24 * v44);
          v45[4] = v33;
          v45[5] = v34;
          v45[6] = v40;
          int64_t v7 = v53;
          if (!v6) {
            break;
          }
          continue;
      }
      break;
    }
  }
LABEL_39:
  int64_t v28 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  if (v28 < v50)
  {
    unint64_t v29 = *(void *)(v49 + 8 * v28);
    int64_t v30 = v7 + 1;
    if (v29) {
      goto LABEL_54;
    }
    int64_t v30 = v7 + 2;
    if (v7 + 2 >= v50) {
      goto LABEL_67;
    }
    unint64_t v29 = *(void *)(v49 + 8 * v30);
    if (v29) {
      goto LABEL_54;
    }
    int64_t v30 = v7 + 3;
    if (v7 + 3 >= v50) {
      goto LABEL_67;
    }
    unint64_t v29 = *(void *)(v49 + 8 * v30);
    if (v29) {
      goto LABEL_54;
    }
    int64_t v30 = v7 + 4;
    if (v7 + 4 >= v50) {
      goto LABEL_67;
    }
    unint64_t v29 = *(void *)(v49 + 8 * v30);
    if (v29)
    {
LABEL_54:
      unint64_t v6 = (v29 - 1) & v29;
      int64_t v53 = v30;
      unint64_t v27 = __clz(__rbit64(v29)) + (v30 << 6);
      goto LABEL_55;
    }
    int64_t v31 = v7 + 5;
    if (v7 + 5 < v50)
    {
      unint64_t v29 = *(void *)(v49 + 8 * v31);
      if (!v29)
      {
        while (1)
        {
          int64_t v30 = v31 + 1;
          if (__OFADD__(v31, 1)) {
            goto LABEL_70;
          }
          if (v30 >= v50) {
            goto LABEL_67;
          }
          unint64_t v29 = *(void *)(v49 + 8 * v30);
          ++v31;
          if (v29) {
            goto LABEL_54;
          }
        }
      }
      int64_t v30 = v7 + 5;
      goto LABEL_54;
    }
  }
LABEL_67:
  swift_release();
  return v54;
}

uint64_t CoreAnalyticsLogger.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(qword_26A417C10);
  uint64_t v1 = swift_allocObject();
  *(_DWORD *)(v1 + 20) = 0;
  *(unsigned char *)(v1 + 16) = 2;
  *(void *)(v0 + 16) = v1;
  return v0;
}

Swift::Void __swiftcall CoreAnalyticsLogger.logEvent(identifierSuffix:fields:)(Swift::String identifierSuffix, Swift::OpaquePointer fields)
{
  void (*v8)(unint64_t *__return_ptr, uint64_t);
  id v9;
  id v10;
  char v11;
  id v12;
  uint64_t v13;
  char v14;
  Swift::OpaquePointer *v15;
  Swift::OpaquePointer *v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  unint64_t rawValue;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  void *v36;
  void *v37;
  unint64_t aBlock;
  unint64_t v39;
  id (*v40)(uint64_t);
  void *v41;
  uint64_t (*v42)();
  Swift::OpaquePointer *v43;

  uint64_t v3 = v2;
  if (qword_26A415678 != -1) {
    swift_once();
  }
  if (byte_26A41A729 == 2)
  {
    uint64_t v6 = qword_26A41A710;
    uint64_t v5 = *(void *)algn_26A41A718;
    int64_t v7 = (void *)qword_26A41A720;
    unint64_t v8 = (void (*)(unint64_t *__return_ptr, uint64_t))qword_26A41A730;
    swift_bridgeObjectRetain_n();
    unint64_t v9 = v7;
    swift_retain_n();
    swift_retain_n();
    int64_t v10 = v9;
    unint64_t v11 = _sSb20PreviewsFoundationOSE15userDefaultsKey0dE0SbSgSS_So06NSUserE0CtcfC_0(v6, v5, v10);
    if (v11 == 2)
    {
      swift_bridgeObjectRetain();
      int64_t v12 = v10;
      swift_retain();
      uint64_t v13 = swift_retain();
      v8(&aBlock, v13);
      swift_release_n();
      swift_release_n();

      swift_bridgeObjectRelease_n();
      if ((aBlock & 1) == 0) {
        return;
      }
    }
    else
    {
      uint64_t v14 = v11;
      swift_release_n();
      swift_release_n();

      swift_bridgeObjectRelease_n();
      if ((v14 & 1) == 0) {
        return;
      }
    }
  }
  else if ((byte_26A41A729 & 1) == 0)
  {
    return;
  }
  uint64_t v15 = (Swift::OpaquePointer *)swift_allocObject();
  v15[2]._rawValue = fields._rawValue;
  uint64_t v16 = v15 + 2;
  unint64_t v17 = objc_allocWithZone(MEMORY[0x263F08AB0]);
  swift_bridgeObjectRetain();
  uint64_t v18 = objc_msgSend(v17, sel_init);
  uint64_t v19 = objc_msgSend(v18, sel_processName);

  id v20 = sub_25A50EC20();
  id v22 = v21;

  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  long long aBlock = (unint64_t)fields._rawValue;
  v15[2]._rawValue = (void *)0x8000000000000000;
  sub_25A3FDEC8(v20, v22, 0, 0xD000000000000012, 0x800000025A521590, isUniquelyReferenced_nonNull_native);
  v15[2]._rawValue = (void *)aBlock;
  swift_bridgeObjectRelease();
  if (qword_26A415670 != -1) {
    swift_once();
  }
  uint64_t v25 = qword_26A41A700;
  unint64_t v24 = *(void *)algn_26A41A708;
  swift_bridgeObjectRetain();
  if (v24) {
    unint64_t v26 = v25;
  }
  else {
    unint64_t v26 = 0;
  }
  if (v24) {
    unint64_t v27 = 0;
  }
  else {
    unint64_t v27 = 5;
  }
  sub_25A4A1758(v26, v24, v27, 0x72655665646F6378, 0xEC0000006E6F6973);
  int64_t v28 = *(void *)(v3 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v28 + 20));
  sub_25A3EF300((unsigned char *)(v28 + 16), &aBlock);
  os_unfair_lock_unlock((os_unfair_lock_t)(v28 + 20));
  swift_release();
  unint64_t v29 = aBlock;
  if (aBlock != 2)
  {
    rawValue = (unint64_t)v16->_rawValue;
    if (*((void *)v16->_rawValue + 2)
      && (int64_t v31 = sub_25A409670(0xD000000000000015, 0x800000025A5215F0), (v32 & 1) != 0)
      && (uint64_t v33 = *(void *)(rawValue + 56) + 24 * v31, *(unsigned char *)(v33 + 16) == 1)
      && (*(void *)v33 & 1) != 0)
    {
      uint64_t v34 = 1;
    }
    else
    {
      uint64_t v34 = v29 & 1;
    }
    uint64_t v35 = swift_isUniquelyReferenced_nonNull_native();
    long long aBlock = rawValue;
    v16->_rawValue = (void *)0x8000000000000000;
    sub_25A3FDEC8(v34, 0, 1, 0xD000000000000015, 0x800000025A5215F0, v35);
    v16->_rawValue = (void *)aBlock;
    swift_bridgeObjectRelease();
  }
  long long aBlock = 0;
  id v39 = 0xE000000000000000;
  sub_25A50FDB0();
  swift_bridgeObjectRelease();
  long long aBlock = 0xD000000000000011;
  id v39 = 0x800000025A5215B0;
  sub_25A50EDA0();
  uint64_t v36 = (void *)sub_25A50EBF0();
  swift_bridgeObjectRelease();
  id v42 = sub_25A4A3590;
  unint64_t v43 = v15;
  long long aBlock = MEMORY[0x263EF8330];
  id v39 = 1107296256;
  uint64_t v40 = sub_25A4A2FF4;
  id v41 = &block_descriptor_10;
  unint64_t v37 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v37);
  swift_release();
}

unint64_t static CoreAnalyticsLogger.sampleProjectKey.getter()
{
  return 0xD000000000000015;
}

uint64_t CoreAnalyticsLogger.hints.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 20));
  sub_25A3EF300((unsigned char *)(v3 + 16), a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 20));

  return swift_release();
}

uint64_t sub_25A4A27C4@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)a1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 20));
  sub_25A3EF300((unsigned char *)(v3 + 16), &v5);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 20));
  uint64_t result = swift_release();
  *a2 = v5;
  return result;
}

uint64_t sub_25A4A2848(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)a2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 20));
  sub_25A4A382C((unsigned char *)(v2 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 20));
  return swift_release();
}

uint64_t CoreAnalyticsLogger.hints.setter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 20));
  sub_25A4A35B0((unsigned char *)(v1 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 20));
  return swift_release();
}

uint64_t (*CoreAnalyticsLogger.hints.modify(void *a1))(os_unfair_lock_s **a1)
{
  uint64_t v3 = a1 + 2;
  uint64_t v4 = *(void *)(v1 + 16);
  *a1 = v4;
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 20));
  sub_25A3EF300((unsigned char *)(v4 + 16), v3);
  a1[1] = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 20));
  swift_release();
  return sub_25A4A29CC;
}

uint64_t sub_25A4A29CC(os_unfair_lock_s **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *a1 + 5;
  swift_retain();
  os_unfair_lock_lock(v2);
  sub_25A4A382C(&v1[4]);
  os_unfair_lock_unlock(v2);
  return swift_release();
}

uint64_t CoreAnalyticsLogger.init()()
{
  __swift_instantiateConcreteTypeFromMangledName(qword_26A417C10);
  uint64_t v1 = swift_allocObject();
  *(_DWORD *)(v1 + 20) = 0;
  *(unsigned char *)(v1 + 16) = 2;
  *(void *)(v0 + 16) = v1;
  return v0;
}

Swift::Int sub_25A4A2AA4()
{
  Swift::Int result = sub_25A4A2AC8();
  qword_26A41A700 = result;
  *(void *)algn_26A41A708 = v1;
  return result;
}

Swift::Int sub_25A4A2AC8()
{
  uint64_t v0 = sub_25A50E320();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = MEMORY[0x270FA5388](v0);
  uint64_t v4 = (char *)v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)v26 - v5;
  int64_t v7 = self;
  id v8 = objc_msgSend(v7, sel_mainBundle);
  id v9 = objc_msgSend(v8, sel_bundleURL);
  sub_25A50E2E0();

  sub_25A50E2C0();
  int64_t v10 = *(void (**)(char *, uint64_t))(v1 + 8);
  v10(v4, v0);
  id v11 = objc_allocWithZone(NSDictionary);
  int64_t v12 = (void *)sub_25A50E2B0();
  id v13 = objc_msgSend(v11, sel_initWithContentsOfURL_, v12);

  if (v13)
  {
    *(void *)&v29[0] = 0xD000000000000013;
    *((void *)&v29[0] + 1) = 0x800000025A521670;
    id v14 = objc_msgSend(v13, sel___swift_objectForKeyedSubscript_, sub_25A510400());
    swift_unknownObjectRelease();
    if (v14)
    {
      sub_25A50FC10();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v29, 0, sizeof(v29));
    }
    sub_25A3C90EC((uint64_t)v29, (uint64_t)&v27);
    if (v27.rawMinorRelease._object)
    {
      if (swift_dynamicCast())
      {
        BuildNumber.init(_:)(&v27, v28);
        if (!v15)
        {
          *(void *)&v29[0] = v27.majorRelease;
          v27.Swift::Int majorRelease = sub_25A5102B0();
          v27.majorBuild = v25;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v26[0] = sub_25A50EA50();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_25A50EDA0();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          Swift::Int majorRelease = v27.majorRelease;
          v10(v6, v0);
          return majorRelease;
        }
      }
      else
      {
      }
    }
    else
    {

      sub_25A3C9154((uint64_t)&v27);
    }
  }
  id v16 = objc_msgSend(v7, sel_mainBundle);
  id v17 = objc_msgSend(v16, sel_infoDictionary);

  if (!v17)
  {

    v10(v6, v0);
    memset(&v27, 0, 32);
LABEL_22:
    sub_25A3C9154((uint64_t)&v27);
    return 0;
  }
  uint64_t v18 = sub_25A50E8A0();

  Swift::Int result = *MEMORY[0x263EFFB70];
  if (*MEMORY[0x263EFFB70])
  {
    uint64_t v20 = sub_25A50EC20();
    if (*(void *)(v18 + 16) && (unint64_t v22 = sub_25A409670(v20, v21), (v23 & 1) != 0)) {
      sub_25A3937CC(*(void *)(v18 + 56) + 32 * v22, (uint64_t)&v27);
    }
    else {
      memset(&v27, 0, 32);
    }
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    v10(v6, v0);
    if (v27.rawMinorRelease._object)
    {
      if (swift_dynamicCast()) {
        return *(void *)&v29[0];
      }
      else {
        return 0;
      }
    }
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t sub_25A4A2F4C()
{
  return sub_25A4D0BE4(0xD000000000000012, 0x800000025A521690, 0, 0, 1, (uint64_t)&qword_26A41A710);
}

uint64_t sub_25A4A2F7C()
{
  swift_beginAccess();
  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = sub_25A4A1AAC(v0);
  uint64_t v2 = sub_25A4A3614(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2;
}

id sub_25A4A2FF4(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  swift_release();
  if (v3)
  {
    sub_25A4A37DC(0, (unint64_t *)&qword_26A4189F8);
    uint64_t v4 = (void *)sub_25A50E890();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = 0;
  }

  return v4;
}

uint64_t CoreAnalyticsLogger.deinit()
{
  swift_release();
  return v0;
}

uint64_t CoreAnalyticsLogger.__deallocating_deinit()
{
  swift_release();

  return MEMORY[0x270FA0228](v0, 24, 7);
}

void sub_25A4A30E8(uint64_t a1, uint64_t a2, Swift::OpaquePointer a3)
{
}

uint64_t sub_25A4A310C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 20));
  sub_25A3EF300((unsigned char *)(v3 + 16), a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 20));

  return swift_release();
}

uint64_t sub_25A4A3194()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 20));
  sub_25A4A382C((unsigned char *)(v1 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 20));
  return swift_release();
}

void (*sub_25A4A3208(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = CoreAnalyticsLogger.hints.modify(v2);
  return sub_25A3C2658;
}

uint64_t sub_25A4A3264@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_25A409670(a1, a2);
  LOBYTE(a2) = v9;
  uint64_t result = swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v4;
    uint64_t v15 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_25A40E61C();
      uint64_t v12 = v15;
    }
    swift_bridgeObjectRelease();
    uint64_t v13 = *(void *)(v12 + 56) + 24 * v8;
    char v14 = *(unsigned char *)(v13 + 16);
    *(_OWORD *)a3 = *(_OWORD *)v13;
    *(unsigned char *)(a3 + 16) = v14;
    sub_25A397A98(v8, v12);
    *uint64_t v4 = v12;
    return swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 16) = -1;
  }
  return result;
}

double sub_25A4A3358@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_25A409798(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v11 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_25A40F274();
      uint64_t v9 = v11;
    }
    sub_25A39C7F0(*(void *)(v9 + 48) + 40 * v6);
    sub_25A3936C4((_OWORD *)(*(void *)(v9 + 56) + 32 * v6), a2);
    sub_25A398560(v6, v9);
    uint64_t *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

double sub_25A4A3454@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_25A409670(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_25A40E7F8();
      uint64_t v11 = v13;
    }
    swift_bridgeObjectRelease();
    sub_25A3936C4((_OWORD *)(*(void *)(v11 + 56) + 32 * v8), a3);
    sub_25A398CB4(v8, v11);
    *uint64_t v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_25A4A3558()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_25A4A3590()
{
  return sub_25A4A2F7C();
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_10()
{
  return swift_release();
}

unsigned char *sub_25A4A35B0(unsigned char *result)
{
  *double result = *(unsigned char *)(v1 + 16);
  return result;
}

uint64_t type metadata accessor for CoreAnalyticsLogger()
{
  return self;
}

uint64_t method lookup function for CoreAnalyticsLogger(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CoreAnalyticsLogger);
}

uint64_t dispatch thunk of CoreAnalyticsLogger.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t sub_25A4A3614(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x263F8EE80];
  }
  uint64_t v2 = (void **)(swift_bridgeObjectRetain() + 48);
  uint64_t v3 = (void *)MEMORY[0x263F8EE80];
  while (1)
  {
    uint64_t v7 = (uint64_t)*(v2 - 2);
    uint64_t v6 = (uint64_t)*(v2 - 1);
    unint64_t v8 = *v2;
    swift_bridgeObjectRetain();
    id v9 = v8;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v12 = sub_25A409670(v7, v6);
    uint64_t v13 = v3[2];
    BOOL v14 = (v11 & 1) == 0;
    uint64_t v15 = v13 + v14;
    if (__OFADD__(v13, v14)) {
      break;
    }
    char v16 = v11;
    if (v3[3] >= v15)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v11) {
          goto LABEL_3;
        }
      }
      else
      {
        sub_25A4105F8();
        if (v16) {
          goto LABEL_3;
        }
      }
    }
    else
    {
      sub_25A40DD80(v15, isUniquelyReferenced_nonNull_native);
      unint64_t v17 = sub_25A409670(v7, v6);
      if ((v16 & 1) != (v18 & 1)) {
        goto LABEL_21;
      }
      unint64_t v12 = v17;
      if (v16)
      {
LABEL_3:
        uint64_t v4 = v3[7];
        uint64_t v5 = 8 * v12;

        *(void *)(v4 + v5) = v9;
        goto LABEL_4;
      }
    }
    v3[(v12 >> 6) + 8] |= 1 << v12;
    uint64_t v19 = (uint64_t *)(v3[6] + 16 * v12);
    *uint64_t v19 = v7;
    v19[1] = v6;
    *(void *)(v3[7] + 8 * v12) = v9;
    uint64_t v20 = v3[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_20;
    }
    _OWORD v3[2] = v22;
    swift_bridgeObjectRetain();
LABEL_4:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v2 += 3;
    if (!--v1)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v3;
    }
  }
  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  uint64_t result = sub_25A510430();
  __break(1u);
  return result;
}

uint64_t sub_25A4A37DC(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_25A4A3818(uint64_t result, unint64_t a2, char a3)
{
  if (a3 != -1) {
    return sub_25A3B9028(result, a2, a3);
  }
  return result;
}

unsigned char *sub_25A4A382C(unsigned char *a1)
{
  return sub_25A4A35B0(a1);
}

uint64_t AsyncStream.Sink.init(_:bufferingPolicy:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v18 = a1;
  uint64_t v5 = sub_25A50F320();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unint64_t v8 = (char *)&v18 - v7;
  uint64_t v9 = sub_25A50F370();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  unint64_t v12 = (char *)&v18 - v11;
  nullsub_1(a2);
  sub_25A50F2B0();
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 16))(a3, v8, v5);
  swift_getTupleTypeMetadata2();
  uint64_t v19 = sub_25A50F120();
  uint64_t v13 = sub_25A50F1E0();
  uint64_t v14 = sub_25A3EF560(&v19, v13);
  swift_bridgeObjectRelease();
  uint64_t v15 = type metadata accessor for AsyncStream.Sink();
  *(void *)(a3 + *(int *)(v15 + 28)) = v14;
  sub_25A4A3AB0((uint64_t)v12, v15);
  uint64_t v16 = sub_25A50F2E0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v18, v16);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_25A4A3AB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v22 = a1;
  uint64_t v5 = *(void *)(a2 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *(void *)(v8 + 16);
  uint64_t v9 = sub_25A50F370();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v22 - v12;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4159A8);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_25A50F2A0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v16, 1, 1, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v22, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v3, a2);
  unint64_t v18 = (*(unsigned __int8 *)(v10 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v19 = (v11 + *(unsigned __int8 *)(v5 + 80) + v18) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v20 = (char *)swift_allocObject();
  *((void *)v20 + 2) = 0;
  *((void *)v20 + 3) = 0;
  *((void *)v20 + 4) = v23;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v20[v18], v13, v9);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v20[v19], v7, a2);
  sub_25A38ED10((uint64_t)v16, (uint64_t)&unk_26A41A858, (uint64_t)v20);
  return swift_release();
}

uint64_t sub_25A4A3D54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void v6[6] = a5;
  v6[7] = a6;
  void v6[5] = a4;
  uint64_t v8 = sub_25A50F2C0();
  v6[8] = v8;
  v6[9] = *(void *)(v8 - 8);
  v6[10] = swift_task_alloc();
  v6[11] = sub_25A50F320();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v6[12] = TupleTypeMetadata2;
  uint64_t v10 = *(void *)(TupleTypeMetadata2 - 8);
  v6[13] = v10;
  v6[14] = *(void *)(v10 + 64);
  v6[15] = swift_task_alloc();
  unsigned char v6[16] = swift_task_alloc();
  v6[17] = *(void *)(a6 - 8);
  v6[18] = swift_task_alloc();
  v6[19] = swift_task_alloc();
  sub_25A50FA40();
  v6[20] = swift_task_alloc();
  uint64_t v11 = sub_25A50F350();
  v6[21] = v11;
  v6[22] = *(void *)(v11 - 8);
  v6[23] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_25A4A3FB0, 0, 0);
}

uint64_t sub_25A4A3FB0()
{
  sub_25A50F370();
  sub_25A50F330();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[24] = v1;
  void *v1 = v0;
  v1[1] = sub_25A4A4070;
  uint64_t v2 = v0[20];
  uint64_t v3 = v0[21];
  return MEMORY[0x270FA1F68](v2, 0, 0, v3);
}

uint64_t sub_25A4A4070()
{
  swift_task_dealloc();
  return MEMORY[0x270FA2498](sub_25A4A416C, 0, 0);
}

uint64_t sub_25A4A416C()
{
  uint64_t v1 = v0[20];
  uint64_t v2 = v0[17];
  uint64_t v3 = v0[7];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    (*(void (**)(void, void))(v0[22] + 8))(v0[23], v0[21]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
  else
  {
    uint64_t v6 = v0[12];
    uint64_t v7 = v0[6];
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[19], v1, v3);
    v0[3] = *(void *)(v7 + *(int *)(type metadata accessor for AsyncStream.Sink() + 28));
    sub_25A50F1E0();
    uint64_t v8 = sub_25A50E5B0();
    uint64_t WitnessTable = swift_getWitnessTable();
    SynchronousAccessProviding<>.peek(file:line:column:function:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/AsyncStream+Sink.swift", 128, 2, 27, 61, (uint64_t)"consumeStream(_:)", 17, 2, v8, WitnessTable);
    uint64_t v10 = v0[2];
    if (MEMORY[0x26113D1B0](v10, v6))
    {
      uint64_t v11 = 0;
      uint64_t v35 = v0[16] + *(int *)(v0[12] + 48);
      uint64_t v36 = v10;
      do
      {
        char v12 = sub_25A50F140();
        sub_25A50F0D0();
        if (v12)
        {
          (*(void (**)(void, unint64_t, void))(v0[13] + 16))(v0[16], v10+ ((*(unsigned __int8 *)(v0[13] + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0[13] + 80))+ *(void *)(v0[13] + 72) * v11, v0[12]);
          uint64_t v13 = v11 + 1;
          if (__OFADD__(v11, 1)) {
            goto LABEL_14;
          }
        }
        else
        {
          uint64_t v22 = v0[14];
          uint64_t v23 = sub_25A50FE20();
          if (v22 != 8)
          {
            __break(1u);
            return MEMORY[0x270FA1F68](v23, v24, v25, v26);
          }
          uint64_t v27 = v23;
          uint64_t v28 = v0[16];
          uint64_t v29 = v0[12];
          uint64_t v30 = v0[13];
          v0[4] = v27;
          (*(void (**)(uint64_t, void *, uint64_t))(v30 + 16))(v28, v0 + 4, v29);
          swift_unknownObjectRelease();
          uint64_t v13 = v11 + 1;
          if (__OFADD__(v11, 1))
          {
LABEL_14:
            __break(1u);
            break;
          }
        }
        uint64_t v14 = v0[18];
        uint64_t v41 = v13;
        uint64_t v15 = v0[17];
        uint64_t v16 = (void *)v0[15];
        uint64_t v18 = v0[12];
        uint64_t v17 = v0[13];
        uint64_t v19 = v0[11];
        uint64_t v38 = v0[10];
        uint64_t v39 = v0[19];
        uint64_t v20 = v0[9];
        uint64_t v40 = v0[8];
        uint64_t v37 = v0[7];
        BOOL v21 = (char *)v16 + *(int *)(v18 + 48);
        *uint64_t v16 = *(void *)v0[16];
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32))(v21, v35, v19);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v14, v39, v37);
        sub_25A50F300();
        (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v38, v40);
        uint64_t v10 = v36;
        (*(void (**)(void *, uint64_t))(v17 + 8))(v16, v18);
        ++v11;
      }
      while (v41 != MEMORY[0x26113D1B0](v36, v18));
    }
    uint64_t v31 = v0[19];
    uint64_t v32 = v0[17];
    uint64_t v33 = v0[7];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
    uint64_t v34 = (void *)swift_task_alloc();
    v0[24] = v34;
    *uint64_t v34 = v0;
    v34[1] = sub_25A4A4070;
    uint64_t v23 = v0[20];
    uint64_t v26 = v0[21];
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    return MEMORY[0x270FA1F68](v23, v24, v25, v26);
  }
}

uint64_t sub_25A4A45C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v50 = a3;
  uint64_t v44 = a2;
  uint64_t v49 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v47 = v3;
  uint64_t v48 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(v4 + 24);
  uint64_t v6 = sub_25A50F2C0();
  uint64_t v41 = *(void *)(v6 - 8);
  uint64_t v42 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v40 = (char *)&v38 - v7;
  uint64_t v8 = sub_25A50FA40();
  uint64_t v43 = *(void *)(v8 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v38 - v10;
  uint64_t v12 = *(void *)(v5 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v9);
  uint64_t v39 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v38 - v15;
  uint64_t v17 = sub_25A50F320();
  uint64_t v45 = *(void *)(v17 - 8);
  uint64_t v46 = v17;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v38 - v18;
  nullsub_1(v5);
  sub_25A50F2B0();
  if (qword_26A4154C0 != -1) {
    swift_once();
  }
  uint64_t v20 = (void *)(qword_26A418748 + 16);
  BOOL v21 = (os_unfair_lock_s *)(qword_26A418748 + 24);
  swift_retain();
  os_unfair_lock_lock(v21);
  sub_25A42091C(v20, &v52);
  os_unfair_lock_unlock(v21);
  uint64_t v22 = v52;
  swift_release();
  uint64_t v23 = v43;
  (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v11, v44, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v11, v8);
    uint64_t v24 = v46;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v16, v11, v5);
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v39, v16, v5);
    uint64_t v25 = v40;
    uint64_t v24 = v46;
    sub_25A50F300();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v25, v42);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v5);
  }
  uint64_t v26 = v50;
  uint64_t v52 = *(void *)(v51 + *(int *)(v50 + 28));
  MEMORY[0x270FA5388](v52);
  swift_retain();
  swift_getTupleTypeMetadata2();
  sub_25A50F1E0();
  uint64_t v27 = sub_25A50E5B0();
  uint64_t WitnessTable = swift_getWitnessTable();
  SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_25A380000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/AsyncStream+Sink.swift", 128, 2, 45, 43, (uint64_t)"asyncStream(bufferingPolicy:emitInitialValue:)", 46, 2, (uint64_t)sub_25A4A6F14, (uint64_t)v37, v27, MEMORY[0x263F8EE60] + 8, WitnessTable);
  swift_release();
  uint64_t v29 = v49;
  uint64_t v30 = v22;
  uint64_t v31 = v24;
  uint64_t v32 = v48;
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v48, v51, v26);
  unint64_t v33 = (*(unsigned __int8 *)(v29 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
  unint64_t v34 = (v47 + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v35 = swift_allocObject();
  *(void *)(v35 + 16) = v5;
  (*(void (**)(unint64_t, char *, uint64_t))(v29 + 32))(v35 + v33, v32, v26);
  *(void *)(v35 + v34) = v30;
  sub_25A50F2D0();
  return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v19, v31);
}

uint64_t sub_25A4A4BEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_25A50F320();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v7 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v9 = (char *)v11 + *(int *)(v7 + 48) - v8;
  *(void *)((char *)v11 - v8) = a2;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(v9, a3, v5);
  sub_25A50F1E0();
  return sub_25A50F180();
}

uint64_t sub_25A4A4D00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = *(void *)(a2 + *(int *)(type metadata accessor for AsyncStream.Sink() + 28));
  uint64_t v10 = a4;
  uint64_t v11 = a3;
  sub_25A50F320();
  swift_retain();
  swift_getTupleTypeMetadata2();
  sub_25A50F1E0();
  uint64_t v6 = sub_25A50E5B0();
  uint64_t WitnessTable = swift_getWitnessTable();
  SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_25A380000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/AsyncStream+Sink.swift", 128, 2, 51, 52, (uint64_t)"asyncStream(bufferingPolicy:emitInitialValue:)", 46, 2, (uint64_t)sub_25A4A70EC, (uint64_t)v9, v6, MEMORY[0x263F8EE60] + 8, WitnessTable);
  return swift_release();
}

uint64_t sub_25A4A4E38()
{
  return sub_25A50F7C0();
}

uint64_t AsyncStream.Sink.asyncStream(bufferingPolicy:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = sub_25A50FA40();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v10 - v7;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))((char *)&v10 - v7, 1, 1, v4);
  sub_25A4A45C4(a1, (uint64_t)v8, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t AsyncStream.Sink.yield(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v5, v2);
  sub_25A50F320();
  return sub_25A50F300();
}

Swift::Void __swiftcall AsyncStream.Sink.finish()()
{
  uint64_t v2 = v0;
  uint64_t v3 = sub_25A50F320();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v28 = (char *)&v28 - v5;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v30 = sub_25A50FA40();
  uint64_t v7 = *(void *)(v30 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v30);
  uint64_t v31 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v28 - v10;
  uint64_t v29 = v3;
  sub_25A50F310();
  uint64_t v32 = *(void *)(v1 + *(int *)(v2 + 28));
  sub_25A50F1E0();
  uint64_t v12 = sub_25A50E5B0();
  uint64_t WitnessTable = swift_getWitnessTable();
  SynchronousAccessProviding<>.peek(file:line:column:function:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/AsyncStream+Sink.swift", 128, 2, 74, 62, (uint64_t)"finish()", 8, 2, v12, WitnessTable);
  uint64_t v14 = 0;
  uint64_t v15 = v33;
  uint64_t v16 = (void (**)(char *, char *, uint64_t))(v7 + 32);
  uint64_t v17 = (void (**)(char *, char *, uint64_t))(v4 + 32);
  for (uint64_t i = (void (**)(char *, uint64_t))(v4 + 8); ; (*i)(v25, v26))
  {
    if (v14 == MEMORY[0x26113D1B0](v15, TupleTypeMetadata2))
    {
      uint64_t v19 = *(void *)(TupleTypeMetadata2 - 8);
      uint64_t v20 = v31;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v31, 1, 1, TupleTypeMetadata2);
      goto LABEL_7;
    }
    char v21 = sub_25A50F140();
    sub_25A50F0D0();
    if ((v21 & 1) == 0) {
      break;
    }
    uint64_t v22 = *(void *)(TupleTypeMetadata2 - 8);
    (*(void (**)(char *, unint64_t, uint64_t))(v22 + 16))(v31, v15+ ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80))+ *(void *)(v22 + 72) * v14, TupleTypeMetadata2);
    BOOL v23 = __OFADD__(v14++, 1);
    if (v23) {
      goto LABEL_12;
    }
LABEL_6:
    uint64_t v19 = v22;
    uint64_t v24 = *(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56);
    uint64_t v20 = v31;
    v24(v31, 0, 1, TupleTypeMetadata2);
LABEL_7:
    (*v16)(v11, v20, v30);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v11, 1, TupleTypeMetadata2) == 1) {
      goto LABEL_13;
    }
    uint64_t v25 = v28;
    uint64_t v26 = v29;
    (*v17)(v28, &v11[*(int *)(TupleTypeMetadata2 + 48)], v29);
    sub_25A50F310();
  }
  uint64_t v27 = sub_25A50FE20();
  uint64_t v22 = *(void *)(TupleTypeMetadata2 - 8);
  if (*(void *)(v22 + 64) == 8)
  {
    uint64_t v33 = v27;
    (*(void (**)(char *, uint64_t *, uint64_t))(v22 + 16))(v31, &v33, TupleTypeMetadata2);
    swift_unknownObjectRelease();
    BOOL v23 = __OFADD__(v14++, 1);
    if (v23)
    {
LABEL_12:
      __break(1u);
LABEL_13:
      swift_bridgeObjectRelease();
      return;
    }
    goto LABEL_6;
  }
  __break(1u);
}

uint64_t AsyncStreamObservable.wrappedValue.getter()
{
  uint64_t v0 = sub_25A50E5B0();
  uint64_t WitnessTable = swift_getWitnessTable();
  return SynchronousAccessProviding<>.peek(file:line:column:function:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/AsyncStream+Sink.swift", 128, 2, 104, 25, (uint64_t)"wrappedValue", 12, 2, v0, WitnessTable);
}

uint64_t AsyncStreamObservable.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  sub_25A4A5CBC(a1, a2);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8);

  return v4(a1);
}

void (*AsyncStreamObservable.wrappedValue.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v5 = malloc(0x30uLL);
  *a1 = v5;
  *uint64_t v5 = a2;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a2 + 16);
  _OWORD v5[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v5[4] = malloc(v8);
  v5[5] = malloc(v8);
  AsyncStreamObservable.wrappedValue.getter();
  return sub_25A4A5780;
}

void sub_25A4A5780(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[4];
  uint64_t v4 = (void *)(*a1)[5];
  uint64_t v5 = (*a1)[2];
  uint64_t v6 = (*a1)[3];
  uint64_t v7 = **a1;
  if (a2)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[4], v4, v5);
    sub_25A4A5CBC((uint64_t)v3, v7);
    size_t v8 = *(void (**)(void *, uint64_t))(v6 + 8);
    v8(v3, v5);
    v8(v4, v5);
  }
  else
  {
    sub_25A4A5CBC((*a1)[5], v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t AsyncStreamObservable.init(wrappedValue:emitsInitialValue:bufferingPolicy:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = sub_25A50F2E0();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v17 - v12;
  (*(void (**)(char *, void, uint64_t))(v11 + 104))((char *)&v17 - v12, *MEMORY[0x263F8F580], v10);
  AsyncStream.Sink.init(_:bufferingPolicy:)((uint64_t)v13, a4, a5);
  uint64_t v14 = (int *)type metadata accessor for AsyncStreamObservable();
  *(unsigned char *)(a5 + v14[8]) = a2;
  uint64_t v15 = sub_25A3EF560(a1, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(a1, a4);
  *(void *)(a5 + v14[7]) = v15;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(a5 + v14[9], a3, v10);
}

uint64_t AsyncStreamObservable.projectedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = a2;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v20 = sub_25A50FA40();
  uint64_t v18 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v6 = (char *)&v17 - v5;
  uint64_t v7 = sub_25A50F2E0();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v17 - v9;
  uint64_t v11 = type metadata accessor for AsyncStream.Sink();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v17 - v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v17 - v13, v2, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v2 + *(int *)(a1 + 36), v7);
  if (*(unsigned char *)(v2 + *(int *)(a1 + 32)) == 1)
  {
    AsyncStreamObservable.wrappedValue.getter();
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v6, v15, 1, v4);
  sub_25A4A45C4((uint64_t)v10, (uint64_t)v6, v11);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v6, v20);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t type metadata accessor for AsyncStream.Sink()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A4A5CBC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v20 = sub_25A50F2C0();
  uint64_t v6 = *(void *)(v20 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v20);
  uint64_t v9 = (char *)&v19 - v8;
  uint64_t v10 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(v2 + *(int *)(a2 + 28));
  uint64_t v21 = v5;
  uint64_t v22 = v13;
  uint64_t KeyPath = (uint64_t *)swift_getKeyPath();
  uint64_t v15 = sub_25A50E5B0();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  SynchronousAccessProviding.syncSetValue<A>(at:to:)(KeyPath, a1, v15, WitnessTable);
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v5);
  uint64_t v17 = type metadata accessor for AsyncStream.Sink();
  AsyncStream.Sink.yield(_:)(a1, v17);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v20);
}

uint64_t type metadata accessor for AsyncStreamObservable()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A4A5EDC()
{
  return AsyncStreamObservable.wrappedValue.getter();
}

uint64_t sub_25A4A5F18(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AsyncStreamObservable();
  return sub_25A4A5CBC(a1, v2);
}

uint64_t sub_25A4A5F58()
{
  return 8;
}

void *sub_25A4A5F64(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_25A4A5F70()
{
  uint64_t result = sub_25A50F320();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_25A4A600C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = sub_25A50F320();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 28)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 28));
  }
  swift_retain();
  return a1;
}

uint64_t sub_25A4A60DC(uint64_t a1)
{
  uint64_t v2 = sub_25A50F320();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_release();
}

uint64_t sub_25A4A6154(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_25A50F320();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 28)) = *(void *)(a2 + *(int *)(a3 + 28));
  swift_retain();
  return a1;
}

uint64_t sub_25A4A61D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_25A50F320();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 28)) = *(void *)(a2 + *(int *)(a3 + 28));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_25A4A6268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_25A50F320();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 28)) = *(void *)(a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t sub_25A4A62E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_25A50F320();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 28)) = *(void *)(a2 + *(int *)(a3 + 28));
  swift_release();
  return a1;
}

uint64_t sub_25A4A6370(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25A4A6384);
}

uint64_t sub_25A4A6384(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_25A50F320();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 28));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_25A4A6448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25A4A645C);
}

uint64_t sub_25A4A645C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_25A50F320();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_25A4A651C()
{
  uint64_t result = type metadata accessor for AsyncStream.Sink();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_25A50F2E0();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void *sub_25A4A6608(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_25A50F320();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = type metadata accessor for AsyncStream.Sink();
    *(void *)((char *)a1 + *(int *)(v8 + 28)) = *(void *)((char *)a2 + *(int *)(v8 + 28));
    uint64_t v9 = a3[8];
    *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
    *((unsigned char *)a1 + v9) = *((unsigned char *)a2 + v9);
    uint64_t v10 = a3[9];
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = sub_25A50F2E0();
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
    swift_retain();
    swift_retain();
    v14(v11, v12, v13);
  }
  return a1;
}

uint64_t sub_25A4A676C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25A50F320();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  type metadata accessor for AsyncStream.Sink();
  swift_release();
  swift_release();
  uint64_t v5 = a1 + *(int *)(a2 + 36);
  uint64_t v6 = sub_25A50F2E0();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);

  return v7(v5, v6);
}

uint64_t sub_25A4A684C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_25A50F320();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for AsyncStream.Sink();
  *(void *)(a1 + *(int *)(v7 + 28)) = *(void *)(a2 + *(int *)(v7 + 28));
  uint64_t v8 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  uint64_t v9 = a3[9];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = sub_25A50F2E0();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
  swift_retain();
  swift_retain();
  v13(v10, v11, v12);
  return a1;
}

uint64_t sub_25A4A6960(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_25A50F320();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for AsyncStream.Sink();
  *(void *)(a1 + *(int *)(v7 + 28)) = *(void *)(a2 + *(int *)(v7 + 28));
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  uint64_t v8 = a3[9];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_25A50F2E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

uint64_t sub_25A4A6A7C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_25A50F320();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for AsyncStream.Sink();
  *(void *)(a1 + *(int *)(v7 + 28)) = *(void *)(a2 + *(int *)(v7 + 28));
  uint64_t v8 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  uint64_t v9 = a3[9];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = sub_25A50F2E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
  return a1;
}

uint64_t sub_25A4A6B6C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_25A50F320();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for AsyncStream.Sink();
  *(void *)(a1 + *(int *)(v7 + 28)) = *(void *)(a2 + *(int *)(v7 + 28));
  swift_release();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_release();
  uint64_t v8 = a3[9];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_25A50F2E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_25A4A6C6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25A4A6C80);
}

uint64_t sub_25A4A6C80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AsyncStream.Sink();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 28));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
  else
  {
    uint64_t v11 = sub_25A50F2E0();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 36);
    return v12(v14, a2, v13);
  }
}

uint64_t sub_25A4A6DB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25A4A6DCC);
}

uint64_t sub_25A4A6DCC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for AsyncStream.Sink();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  }
  else
  {
    uint64_t v11 = sub_25A50F2E0();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 36);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

uint64_t sub_25A4A6F14(uint64_t a1)
{
  return sub_25A4A4BEC(a1, *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_25A4A6F34()
{
  uint64_t v1 = *(void *)(type metadata accessor for AsyncStream.Sink() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = sub_25A50F320();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_release();

  return MEMORY[0x270FA0238](v0, v5, v4);
}

uint64_t sub_25A4A703C(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(type metadata accessor for AsyncStream.Sink() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_25A4A4D00(a1, v1 + v5, v6, v3);
}

uint64_t sub_25A4A70EC()
{
  return sub_25A4A4E38();
}

BOOL sub_25A4A7108(void *a1)
{
  return *a1 == *(void *)(v1 + 24);
}

uint64_t sub_25A4A711C()
{
  uint64_t v1 = sub_25A50F370();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for AsyncStream.Sink() - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v4 + v5 + v7) & ~v7;
  uint64_t v9 = v8 + *(void *)(v6 + 64);
  uint64_t v10 = v3 | v7 | 7;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  uint64_t v11 = sub_25A50F320();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v0 + v8, v11);
  swift_release();

  return MEMORY[0x270FA0238](v0, v9, v10);
}

uint64_t sub_25A4A72B0(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = v1[4];
  uint64_t v6 = *(void *)(sub_25A50F370() - 8);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(unsigned __int8 *)(*(void *)(type metadata accessor for AsyncStream.Sink() - 8) + 80);
  unint64_t v10 = v7 + v8 + v9;
  uint64_t v11 = v1[2];
  uint64_t v12 = v1[3];
  uint64_t v13 = (uint64_t)v1 + v7;
  uint64_t v14 = (uint64_t)v1 + (v10 & ~v9);
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v15;
  *uint64_t v15 = v3;
  v15[1] = sub_25A38F608;
  return sub_25A4A3D54(a1, v11, v12, v13, v14, v5);
}

double CGPoint.distance(from:)(double a1, double a2, double a3, double a4)
{
  return hypot(a3 - a1, a4 - a2);
}

uint64_t Future.uncancelable(dsoHandle:file:line:column:function:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_25A4A753C(a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_25A4A744C(long long *a1)
{
  return sub_25A4A7498(a1);
}

uint64_t sub_25A4A7498(long long *a1)
{
  char v1 = *((unsigned char *)a1 + 16);
  char v2 = *((unsigned char *)a1 + 56);
  long long v5 = *a1;
  char v6 = v1;
  long long v7 = *(long long *)((char *)a1 + 24);
  long long v8 = *(long long *)((char *)a1 + 40);
  char v9 = v2;
  uint64_t v3 = sub_25A4EECC4((uint64_t)&v5);
  swift_retain_n();
  Future.observeFinish(_:)((uint64_t)sub_25A4A7610, v3);
  swift_release_n();
  swift_release();
  return v3;
}

uint64_t sub_25A4A753C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  type metadata accessor for UncancelableFuture();
  *(void *)&long long v17 = a1;
  *((void *)&v17 + 1) = a2;
  char v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v21 = a6;
  uint64_t v22 = a7;
  char v23 = a8;
  swift_allocObject();
  swift_retain();
  return sub_25A4A7498(&v17);
}

uint64_t type metadata accessor for UncancelableFuture()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static CommandLineCommand.shortUsage.getter(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr))(a2 + 32))(&v4);
  swift_getAssociatedTypeWitness();
  type metadata accessor for CommandLineOptions();
  uint64_t v2 = CommandLineOptions.shortUsage.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t static CommandLineCommand.optionDescriptions.getter(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr))(a2 + 32))(&v11);
  uint64_t v4 = v11;
  swift_bridgeObjectRelease();
  v10[5] = v4;
  void v10[2] = a1;
  void v10[3] = a2;
  swift_getAssociatedTypeWitness();
  type metadata accessor for CommandLineOption();
  uint64_t v5 = sub_25A50F1E0();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v8 = sub_25A39F5D4((void (*)(char *, char *))sub_25A4A7828, (uint64_t)v10, v5, (uint64_t)&type metadata for CommandLineOptionDescription, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v7);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_25A4A77C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 48);
  *(void *)a2 = *(void *)a1;
  *(void *)(a2 + 8) = v2;
  *(void *)(a2 + 16) = v4;
  *(void *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 48) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_25A4A7828@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A4A77C4(a1, a2);
}

uint64_t static CommandLineCommand.run(with:printer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v15)(long long *__return_ptr, uint64_t, uint64_t);
  uint64_t AssociatedConformanceWitness;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  long long v26;
  long long v27;
  uint64_t v28;

  char v23 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v25 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v22 - v13;
  uint64_t v15 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(a4 + 32);
  uint64_t v24 = v4;
  v15(&v27, a3, a4);
  uint64_t v26 = v27;
  uint64_t v28 = a1;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 8))(AssociatedTypeWitness, AssociatedConformanceWitness);
  long long v17 = type metadata accessor for CommandLineOptions();
  char v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A415DC0);
  uint64_t v19 = sub_25A4A7AA8();
  CommandLineOptions.parse<A>(_:into:)((uint64_t)&v28, v17, v18, v19, (uint64_t)v14);
  if (v5)
  {
    (*(void (**)(char *, uint64_t))(v25 + 8))(v12, AssociatedTypeWitness);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v21 = *(void (**)(char *, uint64_t))(v25 + 8);
    v21(v12, AssociatedTypeWitness);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(a4 + 40))(v14, v23, a3, a4);
    return ((uint64_t (*)(char *, uint64_t))v21)(v14, AssociatedTypeWitness);
  }
}

unint64_t sub_25A4A7AA8()
{
  unint64_t result = qword_26A41A8E0;
  if (!qword_26A41A8E0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415DC0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A41A8E0);
  }
  return result;
}

uint64_t dispatch thunk of static CommandLineCommandProtocol.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of static CommandLineCommandProtocol.shortUsage.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static CommandLineCommandProtocol.description.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static CommandLineCommandProtocol.optionDescriptions.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of static CommandLineCommandProtocol.run(with:printer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of static CommandLineCommand.options.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of static CommandLineCommand.run(_:printer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t sub_25A4A7BB8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, a1);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t))(v3 + 8);
  if (EnumCaseMultiPayload == 1) {
    return v7(v5, a1);
  }
  v7((char *)v1, a1);
  uint64_t v9 = *((void *)v5 + 6);
  sub_25A3C85D8((long long *)v5, v1);
  *(unsigned char *)(v1 + 40) = 1;
  *(void *)(v1 + 48) = v9;
  return swift_storeEnumTagMultiPayload();
}

uint64_t static TaskRef.running(_:)(uint64_t a1)
{
  uint64_t v4 = a1;
  uint64_t v1 = sub_25A50F3C0();
  uint64_t WitnessTable = swift_getWitnessTable();
  return sub_25A4AB0A8((uint64_t)&v4, v1, WitnessTable);
}

uint64_t static TaskRef.succeeded(_:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 80);
  uint64_t v4 = sub_25A510540();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - v6;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))((char *)&v10 - v6, a1, v3);
  swift_storeEnumTagMultiPayload();
  uint64_t v8 = _s20PreviewsFoundationOS7TaskRefC9completedyACyxq_Gs6ResultOyxq_GFZ_0((uint64_t)v7);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v8;
}

uint64_t static TaskRef.failed(_:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 88);
  uint64_t v4 = sub_25A510540();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - v6;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))((char *)&v10 - v6, a1, v3);
  swift_storeEnumTagMultiPayload();
  uint64_t v8 = _s20PreviewsFoundationOS7TaskRefC9completedyACyxq_Gs6ResultOyxq_GFZ_0((uint64_t)v7);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v8;
}

uint64_t TaskRef.result.getter(uint64_t a1)
{
  v2[9] = a1;
  v2[10] = v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 88);
  v2[11] = v4;
  v2[12] = *(void *)(v4 - 8);
  v2[13] = swift_task_alloc();
  uint64_t v5 = *(void *)(v3 + 80);
  v2[14] = v5;
  uint64_t v6 = sub_25A50FA40();
  v2[15] = v6;
  v2[16] = *(void *)(v6 - 8);
  v2[17] = swift_task_alloc();
  v2[18] = *(void *)(v5 - 8);
  v2[19] = swift_task_alloc();
  v2[20] = *(void *)(v3 + 96);
  uint64_t v7 = sub_25A510540();
  v2[21] = v7;
  v2[22] = *(void *)(v7 - 8);
  v2[23] = swift_task_alloc();
  v2[24] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for TaskRef.State();
  v2[25] = v8;
  v2[26] = *(void *)(v8 - 8);
  v2[27] = swift_task_alloc();
  v2[28] = swift_task_alloc();
  v2[29] = swift_task_alloc();
  v2[30] = swift_task_alloc();
  v2[31] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_25A4A8264, 0, 0);
}

uint64_t sub_25A4A8264()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 80) + 16);
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = *(void *)(v0 + 248);
  uint64_t v24 = *(void *)(v0 + 240);
  uint64_t v3 = *(void *)(v0 + 200);
  uint64_t v4 = *(void *)(v0 + 208);
  uint64_t v5 = *(void *)(v0 + 160);
  uint64_t v6 = *(void *)(v0 + 112);
  uint64_t v7 = *(void *)(v0 + 88);
  *(void *)(v0 + 256) = v1;
  uint64_t v8 = (void *)swift_task_alloc();
  long long v8[2] = v6;
  v8[3] = v7;
  void v8[4] = v5;
  uint64_t v9 = sub_25A50E5B0();
  *(void *)(v0 + 264) = v9;
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  *(void *)(v0 + 272) = WitnessTable;
  SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_25A380000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/TaskRef.swift", 119, 2, 81, 49, (uint64_t)"result", 6, 2, (uint64_t)sub_25A4AB394, (uint64_t)v8, v9, v3, WitnessTable);
  *(void *)(v0 + 280) = 0;
  swift_task_dealloc();
  swift_release();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(void *)(v0 + 288) = v11;
  *(void *)(v0 + 296) = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v11(v24, v2, v3);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v13 = *(void *)(v0 + 240);
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v14 = *(void *)(v0 + 168);
    uint64_t v15 = *(void *)(v0 + 176);
    uint64_t v16 = *(void *)(v0 + 72);
    (*(void (**)(void, void))(*(void *)(v0 + 208) + 8))(*(void *)(v0 + 248), *(void *)(v0 + 200));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v16, v13, v14);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    long long v17 = *(uint64_t (**)(void))(v0 + 8);
    return v17();
  }
  else
  {
    *(unsigned char *)(v0 + 312) = *(unsigned char *)(v13 + 40);
    swift_bridgeObjectRelease();
    sub_25A3C85D8((long long *)v13, v0 + 16);
    uint64_t v19 = *(void *)(v0 + 40);
    uint64_t v20 = *(void *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v19);
    char v23 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 + 40) + **(int **)(v20 + 40));
    uint64_t v21 = (void *)swift_task_alloc();
    *(void *)(v0 + 304) = v21;
    *uint64_t v21 = v0;
    v21[1] = sub_25A4A85B8;
    uint64_t v22 = *(void *)(v0 + 192);
    return v23(v22, v19, v20);
  }
}

uint64_t sub_25A4A85B8()
{
  swift_task_dealloc();
  return MEMORY[0x270FA2498](sub_25A4A86B4, 0, 0);
}

uint64_t sub_25A4A86B4()
{
  if (*(unsigned char *)(v0 + 312))
  {
    (*(void (**)(void, void))(*(void *)(v0 + 208) + 8))(*(void *)(v0 + 248), *(void *)(v0 + 200));
LABEL_18:
    (*(void (**)(void, void, void))(*(void *)(v0 + 176) + 32))(*(void *)(v0 + 72), *(void *)(v0 + 192), *(void *)(v0 + 168));
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v47 = *(uint64_t (**)(void))(v0 + 8);
    return v47();
  }
  *(void *)(v0 + 64) = *(void *)(v0 + 256);
  uint64_t v54 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 288);
  uint64_t v51 = *(void *)(v0 + 264);
  uint64_t v52 = *(void *)(v0 + 272);
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v2 = *(void *)(v0 + 208);
  uint64_t v53 = *(void *)(v0 + 216);
  uint64_t v3 = *(void *)(v0 + 200);
  uint64_t v49 = *(void *)(v0 + 192);
  uint64_t v50 = *(void *)(v0 + 232);
  uint64_t v4 = *(void *)(v0 + 176);
  uint64_t v48 = *(void *)(v0 + 168);
  uint64_t v5 = *(void *)(v0 + 160);
  uint64_t v6 = *(void *)(v0 + 112);
  uint64_t v7 = *(void *)(v0 + 88);
  uint64_t v8 = (void *)swift_task_alloc();
  *uint64_t v8 = v6;
  v8[1] = v7;
  long long v8[2] = v5;
  uint64_t KeyPath = (uint64_t *)swift_getKeyPath();
  swift_task_dealloc();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v10(v1, v49, v48);
  swift_storeEnumTagMultiPayload();
  swift_retain();
  SynchronousAccessProviding.syncSetValue<A>(at:to:)(KeyPath, v1, v51, v52);
  swift_release();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v11(v1, v3);
  swift_release();
  v54(v53, v50, v3);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = *(void *)(v0 + 248);
    uint64_t v13 = *(void *)(v0 + 216);
    uint64_t v14 = *(void *)(v0 + 200);
    v11(*(void *)(v0 + 232), v14);
    v11(v12, v14);
    v11(v13, v14);
    goto LABEL_18;
  }
  uint64_t v55 = v11;
  uint64_t v15 = *(void *)(v0 + 280);
  uint64_t v16 = *(void *)(v0 + 216);
  uint64_t v18 = *(void *)(v0 + 184);
  uint64_t v17 = *(void *)(v0 + 192);
  uint64_t v19 = *(void *)(v0 + 168);
  uint64_t v20 = *(void *)(v0 + 136);
  uint64_t v21 = *(void *)(v0 + 104);
  uint64_t v22 = *(void *)(v16 + 48);
  __swift_destroy_boxed_opaque_existential_1(v16);
  v10(v18, v17, v19);
  sub_25A408D2C(v19, v21, v20);
  if (v15)
  {
    uint64_t v23 = *(void *)(v0 + 248);
    uint64_t v24 = *(void *)(v0 + 232);
    uint64_t v25 = *(void *)(v0 + 200);
    uint64_t v26 = *(void *)(v0 + 136);
    uint64_t v27 = *(void *)(v0 + 144);
    uint64_t v28 = *(void *)(v0 + 120);
    uint64_t v29 = *(void *)(v0 + 128);
    uint64_t v30 = *(void *)(v0 + 112);
    (*(void (**)(void, void))(*(void *)(v0 + 96) + 8))(*(void *)(v0 + 104), *(void *)(v0 + 88));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56))(v26, 1, 1, v30);
    swift_bridgeObjectRelease();
    v55(v24, v25);
    v55(v23, v25);
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v26, v28);
    goto LABEL_18;
  }
  uint64_t v32 = *(void *)(v0 + 144);
  uint64_t v31 = *(void *)(v0 + 152);
  uint64_t v33 = *(void *)(v0 + 136);
  uint64_t v34 = *(void *)(v0 + 112);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v32 + 56))(v33, 0, 1, v34);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 32))(v31, v33, v34);
  FunctionTypeMetadata1 = swift_getFunctionTypeMetadata1();
  if (!MEMORY[0x26113D1B0](v22, FunctionTypeMetadata1))
  {
    swift_bridgeObjectRelease();
    uint64_t v38 = v55;
LABEL_17:
    uint64_t v44 = *(void *)(v0 + 248);
    uint64_t v45 = *(void *)(v0 + 232);
    uint64_t v46 = *(void *)(v0 + 200);
    (*(void (**)(void, void))(*(void *)(v0 + 144) + 8))(*(void *)(v0 + 152), *(void *)(v0 + 112));
    v38(v45, v46);
    v38(v44, v46);
    goto LABEL_18;
  }
  uint64_t v36 = 0;
  uint64_t v37 = v22 + 40;
  uint64_t v38 = v55;
  while (1)
  {
    char v39 = sub_25A50F140();
    sub_25A50F0D0();
    if ((v39 & 1) == 0) {
      break;
    }
    uint64_t v40 = *(void (**)(void))(v37 - 8);
    uint64_t v41 = v36 + 1;
    BOOL v42 = __OFADD__(v36, 1);
    uint64_t result = swift_retain();
    if (v42) {
      goto LABEL_22;
    }
    v40(*(void *)(v0 + 152));
    swift_release();
    ++v36;
    v37 += 16;
    if (v41 == MEMORY[0x26113D1B0](v22, FunctionTypeMetadata1))
    {
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
  }
  uint64_t result = sub_25A50FE20();
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

uint64_t TaskRef.value.getter(uint64_t a1)
{
  v2[2] = a1;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 88);
  v2[3] = v4;
  v2[4] = *(void *)(v4 - 8);
  v2[5] = swift_task_alloc();
  v2[6] = swift_task_alloc();
  v2[7] = *(void *)(v3 + 96);
  v2[8] = sub_25A510540();
  uint64_t v5 = swift_task_alloc();
  v2[9] = v5;
  uint64_t v6 = (void *)swift_task_alloc();
  v2[10] = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_25A4A8D40;
  return TaskRef.result.getter(v5);
}

uint64_t sub_25A4A8D40()
{
  swift_task_dealloc();
  return MEMORY[0x270FA2498](sub_25A4A8E3C, 0, 0);
}

uint64_t sub_25A4A8E3C()
{
  sub_25A408D2C(v0[8], v0[6], v0[2]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t TaskRef.cancel(andCleanUpSuccessfulValue:)(void (*a1)(void), uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = *(void *)(*v2 + 80);
  uint64_t v24 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v22 = (char *)&v21 - v7;
  uint64_t v8 = sub_25A50FA40();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v21 - v13;
  uint64_t v31 = v2[2];
  uint64_t v26 = v6;
  uint64_t v27 = *(void *)(v5 + 88);
  uint64_t v28 = *(void *)(v5 + 96);
  uint64_t v29 = a1;
  uint64_t v23 = (void (*)(char *))a1;
  uint64_t v30 = a2;
  type metadata accessor for TaskRef.State();
  uint64_t v15 = sub_25A50E5B0();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  SynchronousAccessProviding.syncWrite<A>(dsoHandle:file:line:column:function:_:)((uint64_t)&dword_25A380000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/TaskRef.swift", 119, 2, 127, 37, (uint64_t)"cancel(andCleanUpSuccessfulValue:)", 34, 2, (uint64_t)sub_25A4AB41C, (uint64_t)v25, v15, v8, WitnessTable);
  uint64_t v17 = v24;
  swift_release();
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v12, 1, v6) == 1)
  {
    uint64_t v18 = *(void (**)(char *, uint64_t))(v9 + 8);
    v18(v14, v8);
    return ((uint64_t (*)(char *, uint64_t))v18)(v12, v8);
  }
  else
  {
    uint64_t v20 = v22;
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v22, v12, v6);
    v23(v20);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v6);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  }
}

uint64_t sub_25A4A92E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v50 = a3;
  uint64_t v48 = a2;
  uint64_t v58 = a7;
  uint64_t v46 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v47 = (uint64_t)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_25A510540();
  uint64_t v51 = *(void *)(v12 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v44 - v16;
  uint64_t v52 = a5;
  uint64_t v53 = a4;
  uint64_t v49 = a6;
  uint64_t v18 = type metadata accessor for TaskRef.State();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v24 = (char *)&v44 - v23;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))((char *)&v44 - v23, a1, v18);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v26 = v52;
    uint64_t v25 = v53;
    uint64_t v27 = v51;
    (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v17, v24, v12);
    (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v15, v17, v12);
    uint64_t v28 = v58;
    uint64_t v29 = v54;
    uint64_t v30 = v47;
    sub_25A408D2C(v12, v47, v58);
    if (v29)
    {
      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v30, v26);
      (*(void (**)(char *, uint64_t))(v51 + 8))(v17, v12);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v28, 1, 1, v25);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v51 + 8))(v17, v12);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v28, 0, 1, v25);
    }
  }
  else
  {
    uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    uint64_t v45 = a1;
    v32(a1, v18);
    char v33 = v24[40];
    uint64_t v51 = *((void *)v24 + 6);
    sub_25A3C85D8((long long *)v24, (uint64_t)v55);
    uint64_t v34 = v56;
    uint64_t v35 = v57;
    __swift_project_boxed_opaque_existential_1(v55, v56);
    (*(void (**)(uint64_t, uint64_t))(v35 + 32))(v34, v35);
    sub_25A3990F8((uint64_t)v55, (uint64_t)v22);
    v22[40] = v33;
    uint64_t v36 = v53;
    swift_getFunctionTypeMetadata1();
    sub_25A5102C0();
    swift_allocObject();
    sub_25A50F0C0();
    uint64_t v38 = v37;
    char v39 = (uint64_t (*)())swift_allocObject();
    uint64_t v40 = v52;
    *((void *)v39 + 2) = v36;
    *((void *)v39 + 3) = v40;
    uint64_t v41 = v50;
    uint64_t v42 = v48;
    *((void *)v39 + 4) = v49;
    *((void *)v39 + 5) = v42;
    *((void *)v39 + 6) = v41;
    *uint64_t v38 = sub_25A4ACDC4;
    v38[1] = v39;
    sub_25A3DFCA4();
    swift_retain();
    uint64_t v43 = sub_25A50F100();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *((void *)v22 + 6) = v43;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(v45, v22, v18);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v58, 1, 1, v36);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v55);
  }
}

Swift::Void __swiftcall TaskRef.cancel()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v2 + 80);
  *(void *)(v3 + 32) = *(void *)(v1 + 96);
  TaskRef.cancel(andCleanUpSuccessfulValue:)((void (*)(void))nullsub_1, v3);

  swift_release();
}

uint64_t TaskRef.peek()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for TaskRef.State();
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)v12 - v4;
  v12[1] = *(void *)(v1 + 16);
  uint64_t v6 = sub_25A50E5B0();
  uint64_t WitnessTable = swift_getWitnessTable();
  SynchronousAccessProviding<>.peek(file:line:column:function:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsFoundation/Sources/PreviewsFoundation/TaskRef.swift", 119, 2, 149, 26, (uint64_t)"peek()", 6, 2, v6, WitnessTable);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = sub_25A510540();
    uint64_t v9 = *(void *)(v8 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a1, v5, v8);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v11 = sub_25A510540();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(a1, 1, 1, v11);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  }
}

uint64_t TaskRef.peekValue()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 80);
  uint64_t v4 = sub_25A510540();
  uint64_t v5 = sub_25A50FA40();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v13 - v7;
  TaskRef.peek()((uint64_t)&v13 - v7);
  uint64_t v9 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v4) == 1)
  {
    uint64_t v4 = v5;
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      uint64_t v10 = *(void *)(v3 - 8);
      (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a1, v8, v3);
      uint64_t v11 = 0;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a1, v11, 1, v3);
    }
    uint64_t v6 = v9;
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v4);
  uint64_t v10 = *(void *)(v3 - 8);
  uint64_t v11 = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a1, v11, 1, v3);
}

uint64_t TaskRef.peekError()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 88);
  uint64_t v4 = sub_25A510540();
  uint64_t v5 = sub_25A50FA40();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v13 - v7;
  TaskRef.peek()((uint64_t)&v13 - v7);
  uint64_t v9 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v4) == 1)
  {
    uint64_t v4 = v5;
LABEL_6:
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v4);
    uint64_t v10 = *(void *)(v3 - 8);
    uint64_t v11 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a1, v11, 1, v3);
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v6 = v9;
    goto LABEL_6;
  }
  uint64_t v10 = *(void *)(v3 - 8);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a1, v8, v3);
  uint64_t v11 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a1, v11, 1, v3);
}

uint64_t TaskRef.map<A>(transform:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = *(void *)(*v3 + 88);
  uint64_t v9 = *(void *)(*v3 + 96);
  type metadata accessor for TaskRef();
  uint64_t v10 = (void *)swift_allocObject();
  void v10[2] = *(void *)(v7 + 80);
  void v10[3] = v8;
  v10[4] = a3;
  v10[5] = v9;
  void v10[6] = a1;
  v10[7] = a2;
  v15[0] = v3;
  v15[1] = sub_25A4AB4A0;
  uint64_t v15[2] = v10;
  swift_retain();
  swift_retain();
  uint64_t v11 = type metadata accessor for MapTaskRef();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v13 = sub_25A4AB0A8((uint64_t)v15, v11, WitnessTable);
  swift_release();
  swift_release();
  return v13;
}

{
  void *v3;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t WitnessTable;
  uint64_t v11;
  void v13[3];

  uint64_t v7 = (void *)*v3;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  type metadata accessor for TaskRef();
  uint64_t v8 = (void *)swift_allocObject();
  long long v8[2] = v7[10];
  v8[3] = v7[11];
  void v8[4] = a3;
  void v8[5] = v7[12];
  void v8[6] = a1;
  v8[7] = a2;
  v13[0] = v3;
  v13[1] = sub_25A4AB4D0;
  uint64_t v13[2] = v8;
  swift_retain();
  swift_retain();
  uint64_t v9 = type metadata accessor for MapTaskRef();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v11 = sub_25A4AB0A8((uint64_t)v13, v9, WitnessTable);
  swift_release();
  swift_release();
  return v11;
}

uint64_t sub_25A4AA118@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  v18[0] = a2;
  v18[1] = a5;
  uint64_t v10 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_25A510540();
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)v18 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))((char *)v18 - v14, a1, v13);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(a4 - 8) + 32))(a6, v15, a4);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v15, a3);
    ((void (*)(char *))v18[0])(v12);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, a3);
  }
  sub_25A510540();
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_25A4AA4BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  char v39 = (uint64_t *)a7;
  uint64_t v40 = a6;
  uint64_t v37 = a2;
  uint64_t v38 = a3;
  uint64_t v10 = *(void *)(a5 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](a1);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  uint64_t v16 = (char *)&v36 - v15;
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v20 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = v21;
  uint64_t v22 = sub_25A510540();
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v36 - v23;
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))((char *)&v36 - v23, a1, v22);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v26 = v39;
    uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v27(v16, v24, a5);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v16, a5);
    uint64_t v28 = sub_25A5102E0();
    if (v28)
    {
      uint64_t v29 = v28;
      uint64_t v30 = *(void (**)(char *, uint64_t))(v10 + 8);
      v30(v13, a5);
    }
    else
    {
      uint64_t v29 = swift_allocError();
      v27(v35, v13, a5);
      uint64_t v30 = *(void (**)(char *, uint64_t))(v10 + 8);
    }
    v30(v16, a5);
    *uint64_t v26 = v29;
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
    sub_25A510540();
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    uint64_t v31 = (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(v20, v24, a4);
    MEMORY[0x270FA5388](v31);
    *(&v36 - 8) = a4;
    *(&v36 - 7) = a5;
    uint64_t v32 = v41;
    *(&v36 - 6) = v40;
    *(&v36 - 5) = v32;
    uint64_t v33 = v38;
    *(&v36 - 4) = v37;
    *(&v36 - 3) = v33;
    *(&v36 - 2) = (uint64_t)v20;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A415838);
    sub_25A39CF80((void (*)(unsigned char *))sub_25A4ACD4C, (uint64_t)v39);
    return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, a4);
  }
}

uint64_t TaskRef.deinit()
{
  swift_release();
  return v0;
}

uint64_t TaskRef.__deallocating_deinit()
{
  swift_release();

  return MEMORY[0x270FA0228](v0, 24, 7);
}

uint64_t TaskRef<>.value.getter(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = *(void *)(*(void *)v1 + 80);
  v2[4] = sub_25A510540();
  uint64_t v3 = swift_task_alloc();
  v2[5] = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[6] = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_25A4AA9D4;
  return TaskRef.result.getter(v3);
}

uint64_t sub_25A4AA9D4()
{
  swift_task_dealloc();
  return MEMORY[0x270FA2498](sub_25A4AAAD0, 0, 0);
}

uint64_t sub_25A4AAAD0()
{
  uint64_t v1 = v0[5];
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    return sub_25A510360();
  }
  else
  {
    (*(void (**)(void, uint64_t))(*(void *)(v0[3] - 8) + 32))(v0[2], v1);
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3();
  }
}

uint64_t sub_25A4AABA0()
{
  return sub_25A50F3A0();
}

uint64_t sub_25A4AABB4(uint64_t a1, void *a2)
{
  uint64_t v6 = *v2;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  uint64_t v8 = a2[2];
  uint64_t v9 = a2[3];
  uint64_t v10 = a2[4];
  *uint64_t v7 = v3;
  v7[1] = sub_25A3923B4;
  return MEMORY[0x270FA1FB8](a1, v6, v8, v9, v10);
}

void sub_25A4AAC6C()
{
}

uint64_t sub_25A4AAC90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[3] = a3;
  v4[4] = a4;
  _OWORD v4[2] = a1;
  uint64_t v5 = sub_25A510540();
  v4[5] = v5;
  v4[6] = *(void *)(v5 - 8);
  uint64_t v6 = swift_task_alloc();
  v4[7] = v6;
  uint64_t v7 = (void *)swift_task_alloc();
  uint64_t v4[8] = v7;
  *uint64_t v7 = v4;
  v7[1] = sub_25A4AADA4;
  return TaskRef.result.getter(v6);
}

uint64_t sub_25A4AADA4()
{
  swift_task_dealloc();
  return MEMORY[0x270FA2498](sub_25A4AAEA0, 0, 0);
}

uint64_t sub_25A4AAEA0()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 40);
  (*(void (**)(uint64_t))(v0 + 24))(v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

void sub_25A4AAF38()
{
}

uint64_t sub_25A4AAF5C(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = v1[1];
  uint64_t v6 = v1[2];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_25A38F608;
  return sub_25A4AAC90(a1, v4, v5, v6);
}

uint64_t sub_25A4AB02C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for TaskRef.State();
  *(void *)(v1 + 16) = sub_25A3EF560(a1, v3);
  return v1;
}

uint64_t sub_25A4AB0A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskRef.State();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v13 - v8;
  *((void *)v9 + 3) = a2;
  *((void *)v9 + 4) = a3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)((char *)&v13 - v8));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(boxed_opaque_existential_1, a1, a2);
  unsigned char v9[40] = 0;
  swift_getFunctionTypeMetadata1();
  *((void *)v9 + 6) = sub_25A50F120();
  swift_storeEnumTagMultiPayload();
  swift_allocObject();
  uint64_t v11 = sub_25A4AB02C((uint64_t)v9);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return v11;
}

uint64_t _s20PreviewsFoundationOS7TaskRefC9completedyACyxq_Gs6ResultOyxq_GFZ_0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TaskRef.State();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v9 - v4;
  uint64_t v6 = sub_25A510540();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(v5, a1, v6);
  swift_storeEnumTagMultiPayload();
  swift_allocObject();
  uint64_t v7 = sub_25A4AB02C((uint64_t)v5);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v7;
}

uint64_t type metadata accessor for TaskRef.State()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A4AB394@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for TaskRef.State();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return sub_25A4A7BB8(v4);
}

uint64_t sub_25A4AB41C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A4A92E0(a1, v2[5], v2[6], v2[2], v2[3], v2[4], a2);
}

uint64_t sub_25A4AB440()
{
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t type metadata accessor for TaskRef()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A4AB468()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t sub_25A4AB4A0(uint64_t a1)
{
  return sub_25A4AB4E8(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void))sub_25A4AA118);
}

uint64_t type metadata accessor for MapTaskRef()
{
  return swift_getGenericMetadata();
}

uint64_t sub_25A4AB4D0(uint64_t a1)
{
  return sub_25A4AB4E8(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void))sub_25A4AA4BC);
}

uint64_t sub_25A4AB4E8(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void))
{
  return a2(a1, v2[6], v2[7], v2[2], v2[3], v2[4], v2[5]);
}

uint64_t sub_25A4AB500()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for TaskRef(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for TaskRef);
}

uint64_t sub_25A4AB560()
{
  uint64_t result = sub_25A510540();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_25A4AB5FC(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(*(void *)(v5 - 8) + 64) <= *(void *)(v6 + 64)) {
    uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v7 = *(void *)(*(void *)(v5 - 8) + 64);
  }
  if ((unint64_t)(v7 + 1) > 0x38) {
    uint64_t v8 = v7 + 1;
  }
  else {
    uint64_t v8 = 56;
  }
  int v9 = *(_DWORD *)(*(void *)(v5 - 8) + 80) | *(_DWORD *)(v6 + 80);
  if ((v9 & 0x1000F8) != 0 || (unint64_t)(v8 + 1) > 0x18)
  {
    uint64_t v11 = *(void *)a2;
    *(void *)uint64_t v4 = *(void *)a2;
    uint64_t v4 = v11 + (((v9 & 0xF8 | 7u) + 16) & ~(unint64_t)(v9 & 0xF8 | 7u));
    swift_retain();
  }
  else
  {
    unsigned int v12 = a2[v8];
    if (v12 >= 2) {
      unsigned int v12 = *(_DWORD *)a2 + 2;
    }
    if (v12 == 1)
    {
      unsigned int v13 = a2[v7];
      unsigned int v14 = v13 - 2;
      if (v13 >= 2)
      {
        if (v7 <= 3) {
          uint64_t v15 = v7;
        }
        else {
          uint64_t v15 = 4;
        }
        switch(v15)
        {
          case 1:
            int v16 = *a2;
            goto LABEL_26;
          case 2:
            int v16 = *(unsigned __int16 *)a2;
            goto LABEL_26;
          case 3:
            int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_26;
          case 4:
            int v16 = *(_DWORD *)a2;
LABEL_26:
            int v18 = (v16 | (v14 << (8 * v7))) + 2;
            unsigned int v13 = v16 + 2;
            if (v7 < 4) {
              unsigned int v13 = v18;
            }
            break;
          default:
            break;
        }
      }
      BOOL v19 = v13 == 1;
      if (v13 == 1)
      {
        uint64_t v6 = *(void *)(v5 - 8);
        uint64_t v20 = *(void *)(a3 + 24);
      }
      else
      {
        uint64_t v20 = *(void *)(a3 + 16);
      }
      (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v20);
      *(unsigned char *)(v4 + v7) = v19;
      *(unsigned char *)(v4 + v8) = 1;
    }
    else
    {
      long long v17 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v17;
      (**(void (***)(uint64_t, unsigned __int8 *))(v17 - 8))(a1, a2);
      *(unsigned char *)(v4 + 40) = a2[40];
      *(void *)(v4 + 48) = *((void *)a2 + 6);
      *(unsigned char *)(v4 + v8) = 0;
      swift_bridgeObjectRetain();
    }
  }
  return v4;
}

uint64_t sub_25A4AB854(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24) - 8;
  uint64_t v3 = *(void *)v2;
  unint64_t v4 = *(void *)(*(void *)v2 + 64);
  if (v4 <= *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64)) {
    unint64_t v4 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  }
  uint64_t v5 = 56;
  if (v4 + 1 > 0x38) {
    uint64_t v5 = v4 + 1;
  }
  unsigned int v6 = a1[v5];
  unsigned int v7 = v6 - 2;
  if (v6 >= 2)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a1;
        goto LABEL_14;
      case 2:
        int v9 = *(unsigned __int16 *)a1;
        goto LABEL_14;
      case 3:
        int v9 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_14;
      case 4:
        int v9 = *(_DWORD *)a1;
LABEL_14:
        int v10 = (v9 | (v7 << (8 * v5))) + 2;
        unsigned int v6 = v9 + 2;
        if (v5 < 4) {
          unsigned int v6 = v10;
        }
        break;
      default:
        break;
    }
  }
  if (v6 == 1)
  {
    unsigned int v11 = a1[v4];
    unsigned int v12 = v11 - 2;
    if (v11 >= 2)
    {
      if (v4 <= 3) {
        uint64_t v13 = v4;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a1;
          goto LABEL_29;
        case 2:
          int v14 = *(unsigned __int16 *)a1;
          goto LABEL_29;
        case 3:
          int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_29;
        case 4:
          int v14 = *(_DWORD *)a1;
LABEL_29:
          int v16 = (v14 | (v12 << (8 * v4))) + 2;
          unsigned int v11 = v14 + 2;
          if (v4 < 4) {
            unsigned int v11 = v16;
          }
          break;
        default:
          break;
      }
    }
    if (v11 == 1)
    {
      long long v17 = *(uint64_t (**)(void))(v3 + 8);
      return v17();
    }
    else
    {
      int v18 = *(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8);
      return v18();
    }
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_25A4ABAC0(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(*(void *)(v5 - 8) + 64) <= *(void *)(v6 + 64)) {
    uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v7 = *(void *)(*(void *)(v5 - 8) + 64);
  }
  if ((unint64_t)(v7 + 1) > 0x38) {
    uint64_t v8 = v7 + 1;
  }
  else {
    uint64_t v8 = 56;
  }
  unsigned int v9 = a2[v8];
  unsigned int v10 = v9 - 2;
  if (v9 >= 2)
  {
    if (v8 <= 3) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = 4;
    }
    switch(v11)
    {
      case 1:
        int v12 = *a2;
        goto LABEL_16;
      case 2:
        int v12 = *(unsigned __int16 *)a2;
        goto LABEL_16;
      case 3:
        int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_16;
      case 4:
        int v12 = *(_DWORD *)a2;
LABEL_16:
        int v13 = (v12 | (v10 << (8 * v8))) + 2;
        unsigned int v9 = v12 + 2;
        if (v8 < 4) {
          unsigned int v9 = v13;
        }
        break;
      default:
        break;
    }
  }
  if (v9 == 1)
  {
    unsigned int v14 = a2[v7];
    unsigned int v15 = v14 - 2;
    if (v14 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v16 = v7;
      }
      else {
        uint64_t v16 = 4;
      }
      switch(v16)
      {
        case 1:
          int v17 = *a2;
          goto LABEL_29;
        case 2:
          int v17 = *(unsigned __int16 *)a2;
          goto LABEL_29;
        case 3:
          int v17 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_29;
        case 4:
          int v17 = *(_DWORD *)a2;
LABEL_29:
          int v19 = (v17 | (v15 << (8 * v7))) + 2;
          unsigned int v14 = v17 + 2;
          if (v7 < 4) {
            unsigned int v14 = v19;
          }
          break;
        default:
          break;
      }
    }
    BOOL v20 = v14 == 1;
    if (v14 == 1)
    {
      uint64_t v6 = *(void *)(v5 - 8);
      uint64_t v21 = *(void *)(a3 + 24);
    }
    else
    {
      uint64_t v21 = *(void *)(a3 + 16);
    }
    (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v21);
    *(unsigned char *)(a1 + v7) = v20;
    *(unsigned char *)(a1 + v8) = 1;
  }
  else
  {
    long long v18 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v18;
    (**(void (***)(uint64_t, unsigned __int8 *))(v18 - 8))(a1, a2);
    *(unsigned char *)(a1 + 40) = a2[40];
    *(void *)(a1 + 48) = *((void *)a2 + 6);
    *(unsigned char *)(a1 + v8) = 0;
    swift_bridgeObjectRetain();
  }
  return a1;
}

unsigned __int8 *sub_25A4ABD48(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = *(void *)(v6 - 8);
    if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    }
    else {
      uint64_t v9 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    if ((unint64_t)(v9 + 1) > 0x38) {
      uint64_t v10 = v9 + 1;
    }
    else {
      uint64_t v10 = 56;
    }
    unsigned int v11 = a1[v10];
    unsigned int v12 = v11 - 2;
    if (v11 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v13 = v10;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a1;
          if (v10 >= 4) {
            goto LABEL_28;
          }
          goto LABEL_18;
        case 2:
          int v14 = *(unsigned __int16 *)a1;
          if (v10 >= 4) {
            goto LABEL_28;
          }
          goto LABEL_18;
        case 3:
          int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v10 < 4) {
            goto LABEL_18;
          }
          goto LABEL_28;
        case 4:
          int v14 = *(_DWORD *)a1;
          if (v10 < 4)
          {
LABEL_18:
            unsigned int v11 = (v14 | (v12 << (8 * v10))) + 2;
            break;
          }
LABEL_28:
          if (v14 != -1) {
            goto LABEL_29;
          }
          goto LABEL_20;
        default:
          break;
      }
    }
    if (v11 == 1)
    {
LABEL_20:
      unsigned int v15 = a1[v9];
      unsigned int v16 = v15 - 2;
      if (v15 >= 2)
      {
        if (v9 <= 3) {
          uint64_t v17 = v9;
        }
        else {
          uint64_t v17 = 4;
        }
        switch(v17)
        {
          case 1:
            int v18 = *a1;
            if (v9 >= 4) {
              goto LABEL_37;
            }
            goto LABEL_33;
          case 2:
            int v18 = *(unsigned __int16 *)a1;
            if (v9 >= 4) {
              goto LABEL_37;
            }
            goto LABEL_33;
          case 3:
            int v18 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            if (v9 < 4) {
              goto LABEL_33;
            }
            goto LABEL_37;
          case 4:
            int v18 = *(_DWORD *)a1;
            if (v9 < 4)
            {
LABEL_33:
              unsigned int v15 = (v18 | (v16 << (8 * v9))) + 2;
              break;
            }
LABEL_37:
            if (v18 != -1) {
              goto LABEL_38;
            }
            goto LABEL_35;
          default:
            break;
        }
      }
      if (v15 == 1) {
LABEL_35:
      }
        int v19 = *(void (**)(void))(v8 + 8);
      else {
LABEL_38:
      }
        int v19 = *(void (**)(void))(v7 + 8);
      v19();
    }
    else
    {
LABEL_29:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      swift_bridgeObjectRelease();
    }
    unsigned int v20 = a2[v10];
    unsigned int v21 = v20 - 2;
    if (v20 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v22 = v10;
      }
      else {
        uint64_t v22 = 4;
      }
      switch(v22)
      {
        case 1:
          int v23 = *a2;
          if (v10 >= 4) {
            goto LABEL_59;
          }
          goto LABEL_50;
        case 2:
          int v23 = *(unsigned __int16 *)a2;
          if (v10 >= 4) {
            goto LABEL_59;
          }
          goto LABEL_50;
        case 3:
          int v23 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v10 < 4) {
            goto LABEL_50;
          }
          goto LABEL_59;
        case 4:
          int v23 = *(_DWORD *)a2;
          if (v10 < 4)
          {
LABEL_50:
            unsigned int v20 = (v23 | (v21 << (8 * v10))) + 2;
            break;
          }
LABEL_59:
          if (v23 != -1) {
            goto LABEL_60;
          }
          goto LABEL_52;
        default:
          break;
      }
    }
    if (v20 == 1)
    {
LABEL_52:
      unsigned int v24 = a2[v9];
      unsigned int v25 = v24 - 2;
      if (v24 >= 2)
      {
        if (v9 <= 3) {
          uint64_t v26 = v9;
        }
        else {
          uint64_t v26 = 4;
        }
        switch(v26)
        {
          case 1:
            int v27 = *a2;
            goto LABEL_64;
          case 2:
            int v27 = *(unsigned __int16 *)a2;
            goto LABEL_64;
          case 3:
            int v27 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_64;
          case 4:
            int v27 = *(_DWORD *)a2;
LABEL_64:
            int v29 = (v27 | (v25 << (8 * v9))) + 2;
            unsigned int v24 = v27 + 2;
            if (v9 < 4) {
              unsigned int v24 = v29;
            }
            break;
          default:
            break;
        }
      }
      BOOL v30 = v24 == 1;
      if (v24 == 1) {
        uint64_t v31 = v8;
      }
      else {
        uint64_t v31 = v7;
      }
      if (v24 == 1) {
        uint64_t v32 = v6;
      }
      else {
        uint64_t v32 = v5;
      }
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v31 + 16))(a1, a2, v32);
      a1[v9] = v30;
      a1[v10] = 1;
    }
    else
    {
LABEL_60:
      uint64_t v28 = *((void *)a2 + 3);
      *((void *)a1 + 3) = v28;
      *((void *)a1 + 4) = *((void *)a2 + 4);
      (**(void (***)(unsigned __int8 *, unsigned __int8 *))(v28 - 8))(a1, a2);
      a1[40] = a2[40];
      *((void *)a1 + 6) = *((void *)a2 + 6);
      a1[v10] = 0;
      swift_bridgeObjectRetain();
    }
  }
  return a1;
}

uint64_t sub_25A4AC1AC(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(*(void *)(v4 - 8) + 64) <= *(void *)(v5 + 64)) {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v6 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  if ((unint64_t)(v6 + 1) > 0x38) {
    uint64_t v7 = v6 + 1;
  }
  else {
    uint64_t v7 = 56;
  }
  unsigned int v8 = a2[v7];
  unsigned int v9 = v8 - 2;
  if (v8 >= 2)
  {
    if (v7 <= 3) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = 4;
    }
    switch(v10)
    {
      case 1:
        int v11 = *a2;
        goto LABEL_16;
      case 2:
        int v11 = *(unsigned __int16 *)a2;
        goto LABEL_16;
      case 3:
        int v11 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_16;
      case 4:
        int v11 = *(_DWORD *)a2;
LABEL_16:
        int v12 = (v11 | (v9 << (8 * v7))) + 2;
        unsigned int v8 = v11 + 2;
        if (v7 < 4) {
          unsigned int v8 = v12;
        }
        break;
      default:
        break;
    }
  }
  if (v8 == 1)
  {
    unsigned int v13 = a2[v6];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v6 <= 3) {
        uint64_t v15 = v6;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_29;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_29;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_29;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_29:
          int v19 = (v16 | (v14 << (8 * v6))) + 2;
          unsigned int v13 = v16 + 2;
          if (v6 < 4) {
            unsigned int v13 = v19;
          }
          break;
        default:
          break;
      }
    }
    BOOL v20 = v13 == 1;
    if (v13 == 1) {
      uint64_t v5 = *(void *)(v4 - 8);
    }
    (*(void (**)(uint64_t))(v5 + 32))(a1);
    *(unsigned char *)(a1 + v6) = v20;
    char v17 = 1;
  }
  else
  {
    char v17 = 0;
    long long v18 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v18;
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(void *)(a1 + 48) = *((void *)a2 + 6);
  }
  *(unsigned char *)(a1 + v7) = v17;
  return a1;
}

unsigned __int8 *sub_25A4AC3EC(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = *(void *)(v6 - 8);
    if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    }
    else {
      uint64_t v9 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    if ((unint64_t)(v9 + 1) > 0x38) {
      uint64_t v10 = v9 + 1;
    }
    else {
      uint64_t v10 = 56;
    }
    unsigned int v11 = a1[v10];
    unsigned int v12 = v11 - 2;
    if (v11 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v13 = v10;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a1;
          goto LABEL_17;
        case 2:
          int v14 = *(unsigned __int16 *)a1;
          goto LABEL_17;
        case 3:
          int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_17;
        case 4:
          int v14 = *(_DWORD *)a1;
LABEL_17:
          int v15 = (v14 | (v12 << (8 * v10))) + 2;
          unsigned int v11 = v14 + 2;
          if (v10 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    if (v11 == 1)
    {
      unsigned int v16 = a1[v9];
      unsigned int v17 = v16 - 2;
      if (v16 >= 2)
      {
        if (v9 <= 3) {
          uint64_t v18 = v9;
        }
        else {
          uint64_t v18 = 4;
        }
        switch(v18)
        {
          case 1:
            int v19 = *a1;
            goto LABEL_30;
          case 2:
            int v19 = *(unsigned __int16 *)a1;
            goto LABEL_30;
          case 3:
            int v19 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            goto LABEL_30;
          case 4:
            int v19 = *(_DWORD *)a1;
LABEL_30:
            int v20 = (v19 | (v17 << (8 * v9))) + 2;
            unsigned int v16 = v19 + 2;
            if (v9 < 4) {
              unsigned int v16 = v20;
            }
            break;
          default:
            break;
        }
      }
      if (v16 == 1) {
        unsigned int v21 = *(void (**)(void))(v8 + 8);
      }
      else {
        unsigned int v21 = *(void (**)(void))(v7 + 8);
      }
      v21();
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      swift_bridgeObjectRelease();
    }
    unsigned int v22 = a2[v10];
    unsigned int v23 = v22 - 2;
    if (v22 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v24 = v10;
      }
      else {
        uint64_t v24 = 4;
      }
      switch(v24)
      {
        case 1:
          int v25 = *a2;
          goto LABEL_45;
        case 2:
          int v25 = *(unsigned __int16 *)a2;
          goto LABEL_45;
        case 3:
          int v25 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_45;
        case 4:
          int v25 = *(_DWORD *)a2;
LABEL_45:
          int v26 = (v25 | (v23 << (8 * v10))) + 2;
          unsigned int v22 = v25 + 2;
          if (v10 < 4) {
            unsigned int v22 = v26;
          }
          break;
        default:
          break;
      }
    }
    if (v22 == 1)
    {
      unsigned int v27 = a2[v9];
      unsigned int v28 = v27 - 2;
      if (v27 >= 2)
      {
        if (v9 <= 3) {
          uint64_t v29 = v9;
        }
        else {
          uint64_t v29 = 4;
        }
        switch(v29)
        {
          case 1:
            int v30 = *a2;
            goto LABEL_58;
          case 2:
            int v30 = *(unsigned __int16 *)a2;
            goto LABEL_58;
          case 3:
            int v30 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_58;
          case 4:
            int v30 = *(_DWORD *)a2;
LABEL_58:
            int v33 = (v30 | (v28 << (8 * v9))) + 2;
            unsigned int v27 = v30 + 2;
            if (v9 < 4) {
              unsigned int v27 = v33;
            }
            break;
          default:
            break;
        }
      }
      BOOL v34 = v27 == 1;
      if (v27 == 1) {
        uint64_t v35 = v8;
      }
      else {
        uint64_t v35 = v7;
      }
      if (v27 == 1) {
        uint64_t v36 = v6;
      }
      else {
        uint64_t v36 = v5;
      }
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v35 + 32))(a1, a2, v36);
      a1[v9] = v34;
      char v31 = 1;
    }
    else
    {
      char v31 = 0;
      long long v32 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v32;
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *((void *)a1 + 6) = *((void *)a2 + 6);
    }
    a1[v10] = v31;
  }
  return a1;
}

uint64_t sub_25A4AC7C0(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  if (*(void *)(v4 + 64) > v3) {
    unint64_t v3 = *(void *)(v4 + 64);
  }
  uint64_t v5 = 56;
  if (v3 + 1 > 0x38) {
    uint64_t v5 = v3 + 1;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_24;
  }
  uint64_t v6 = v5 + 1;
  char v7 = 8 * (v5 + 1);
  if ((v5 + 1) <= 3)
  {
    unsigned int v10 = ((a2 + ~(-1 << v7) - 254) >> v7) + 1;
    if (HIWORD(v10))
    {
      int v8 = *(_DWORD *)((char *)a1 + v6);
      if (!v8) {
        goto LABEL_24;
      }
      goto LABEL_16;
    }
    if (v10 > 0xFF)
    {
      int v8 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_24;
      }
      goto LABEL_16;
    }
    if (v10 < 2)
    {
LABEL_24:
      unsigned int v12 = *((unsigned __int8 *)a1 + v5);
      if (v12 >= 2) {
        return (v12 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v8 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_24;
  }
LABEL_16:
  int v11 = (v8 - 1) << v7;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v6 | v11) + 255;
}

void sub_25A4AC914(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (*(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  }
  if (v5 + 1 > 0x38) {
    uint64_t v6 = v5 + 1;
  }
  else {
    uint64_t v6 = 56;
  }
  size_t v7 = v6 + 1;
  if (a3 < 0xFF)
  {
    int v8 = 0;
  }
  else if (v7 <= 3)
  {
    unsigned int v11 = ((a3 + ~(-1 << (8 * v7)) - 254) >> (8 * v7)) + 1;
    if (HIWORD(v11))
    {
      int v8 = 4;
    }
    else if (v11 >= 0x100)
    {
      int v8 = 2;
    }
    else
    {
      int v8 = v11 > 1;
    }
  }
  else
  {
    int v8 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v9 = a2 - 255;
    if (v7 < 4)
    {
      int v10 = (v9 >> (8 * v7)) + 1;
      if (v6 != -1)
      {
        int v12 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if (v7 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }
        else if (v7 == 2)
        {
          *(_WORD *)a1 = v12;
        }
        else
        {
          *a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v6 + 1);
      *(_DWORD *)a1 = v9;
      int v10 = 1;
    }
    switch(v8)
    {
      case 1:
        a1[v7] = v10;
        break;
      case 2:
        *(_WORD *)&a1[v7] = v10;
        break;
      case 3:
LABEL_37:
        __break(1u);
        JUMPOUT(0x25A4ACAFCLL);
      case 4:
        *(_DWORD *)&a1[v7] = v10;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v8)
    {
      case 1:
        a1[v7] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_26;
      case 2:
        *(_WORD *)&a1[v7] = 0;
        goto LABEL_25;
      case 3:
        goto LABEL_37;
      case 4:
        *(_DWORD *)&a1[v7] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_26;
      default:
LABEL_25:
        if (a2) {
LABEL_26:
        }
          a1[v6] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_25A4ACB24(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  uint64_t v3 = *(void *)(*(void *)(a2 + 24) - 8);
  if (*(void *)(v3 + 64) > v2) {
    unint64_t v2 = *(void *)(v3 + 64);
  }
  uint64_t v4 = 56;
  if (v2 + 1 > 0x38) {
    uint64_t v4 = v2 + 1;
  }
  uint64_t v5 = a1[v4];
  int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a1;
        goto LABEL_14;
      case 2:
        int v8 = *(unsigned __int16 *)a1;
        goto LABEL_14;
      case 3:
        int v8 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_14;
      case 4:
        int v8 = *(_DWORD *)a1;
LABEL_14:
        unsigned int v9 = (v8 | (v6 << (8 * v4))) + 2;
        LODWORD(v5) = v8 + 2;
        if (v4 >= 4) {
          uint64_t v5 = v5;
        }
        else {
          uint64_t v5 = v9;
        }
        break;
      default:
        return v5;
    }
  }
  return v5;
}

void sub_25A4ACBFC(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  if (a2 > 1)
  {
    unint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
    if (*(void *)(v8 + 64) > v7) {
      unint64_t v7 = *(void *)(v8 + 64);
    }
    if (v7 + 1 > 0x38) {
      size_t v9 = v7 + 1;
    }
    else {
      size_t v9 = 56;
    }
    unsigned int v10 = a2 - 2;
    if (v9 < 4)
    {
      unsigned int v11 = v10 >> (8 * v9);
      int v12 = v10 & ~(-1 << (8 * v9));
      a1[v9] = v11 + 2;
      bzero(a1, v9);
      if (v9 == 3)
      {
        *(_WORD *)a1 = v12;
        a1[2] = BYTE2(v12);
      }
      else if (v9 == 2)
      {
        *(_WORD *)a1 = v12;
      }
      else
      {
        *a1 = v12;
      }
    }
    else
    {
      a1[v9] = 2;
      bzero(a1, v9);
      *(_DWORD *)a1 = v10;
    }
  }
  else
  {
    uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    if (*(void *)(v4 + 64) > v5) {
      unint64_t v5 = *(void *)(v4 + 64);
    }
    if (v5 + 1 > 0x38) {
      uint64_t v6 = v5 + 1;
    }
    else {
      uint64_t v6 = 56;
    }
    a1[v6] = a2;
  }
}

uint64_t sub_25A4ACD44(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 48);
}

uint64_t sub_25A4ACD4C(void *a1)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 48))(*(void *)(v1 + 64));
  if (v2) {
    *a1 = v2;
  }
  return result;
}

uint64_t sub_25A4ACD8C()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t sub_25A4ACDC4()
{
  return (*(uint64_t (**)(void))(v0 + 40))();
}

uint64_t DepthFirstDAGIterator.init(root:identifierAccessor:childrenAccessor:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v14 = sub_25A50E880();
  sub_25A42F3C4(a6, a6);
  uint64_t v15 = *(void *)(a6 - 8);
  swift_allocObject();
  uint64_t v16 = sub_25A50F0C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v17, a1, a6);
  uint64_t result = v16;
  sub_25A3DFCA4();
  *a7 = v16;
  a7[1] = v14;
  a7[2] = a2;
  a7[3] = a3;
  a7[4] = a4;
  a7[5] = a5;
  return result;
}

double DepthFirstDAGIterator.init<>(root:childrenKeyPath:)@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5 = *a2;
  uint64_t v11 = a1;
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = *(void *)(v5 + *MEMORY[0x263F8EA20]);
  *(void *)(v6 + 16) = v7;
  DepthFirstDAGIterator.init(root:identifierAccessor:childrenAccessor:)((uint64_t)&v11, (uint64_t)sub_25A385038, v6, (uint64_t)sub_25A4AE5A4, (uint64_t)a2, v7, (uint64_t *)v12);
  double result = *(double *)v12;
  long long v9 = v12[1];
  long long v10 = v12[2];
  *a3 = v12[0];
  a3[1] = v9;
  a3[2] = v10;
  return result;
}

uint64_t sub_25A4ACFEC()
{
  swift_unknownObjectRetain();
  swift_getAtKeyPath();
  swift_unknownObjectRelease();
  return v1;
}

double DepthFirstDAGIterator.init<>(root:childrenKeyPath:)@<D0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v10 = *(void *)(*a2 + *MEMORY[0x263F8EA20]);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v13 = (char *)v19 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)v19 - v12, a1, v10);
  uint64_t v14 = (void *)swift_allocObject();
  _OWORD v14[2] = v10;
  _OWORD v14[3] = a3;
  void v14[4] = a4;
  uint64_t v15 = (void *)swift_allocObject();
  uint64_t v15[2] = a3;
  void v15[3] = a4;
  void v15[4] = a2;
  swift_getAssociatedConformanceWitness();
  DepthFirstDAGIterator.init(root:identifierAccessor:childrenAccessor:)((uint64_t)v13, (uint64_t)sub_25A4AE5BC, (uint64_t)v14, (uint64_t)sub_25A4AE624, (uint64_t)v15, v10, (uint64_t *)v19);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, v10);
  double result = *(double *)v19;
  long long v17 = v19[1];
  long long v18 = v19[2];
  *a5 = v19[0];
  a5[1] = v17;
  a5[2] = v18;
  return result;
}

double DepthFirstDAGIterator.init<>(root:childrenAccessor:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  uint64_t v12 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v14 = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v15);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a4;
  *(void *)(v16 + 24) = a5;
  DepthFirstDAGIterator.init(root:identifierAccessor:childrenAccessor:)((uint64_t)v14, (uint64_t)sub_25A4AE660, v16, a2, a3, a4, (uint64_t *)v20);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, a4);
  double result = *(double *)v20;
  long long v18 = v20[1];
  long long v19 = v20[2];
  *a6 = v20[0];
  a6[1] = v18;
  a6[2] = v19;
  return result;
}

uint64_t DepthFirstDAGIterator.next()@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v42 = a2;
  uint64_t v48 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(v48 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](a1);
  uint64_t v40 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v46 = (char *)&v37 - v7;
  uint64_t v44 = v6;
  uint64_t v8 = *(void *)(v6 + 16);
  uint64_t v9 = sub_25A50FA40();
  uint64_t v38 = *(void *)(v9 - 8);
  uint64_t v39 = v9;
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v37 - v11;
  uint64_t v13 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_25A50F1E0();
  uint64_t v49 = (unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  uint64_t v50 = v16;
  uint64_t v47 = (void (**)(char *, char *, uint64_t))(v13 + 32);
  uint64_t v37 = v2 + 8;
  uint64_t v45 = (void (**)(char *, uint64_t))(v3 + 8);
  uint64_t v41 = v13;
  uint64_t v43 = (void (**)(char *, uint64_t))(v13 + 8);
  long long v17 = v46;
  uint64_t v18 = v48;
  while (1)
  {
    uint64_t v19 = v50;
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v21 = swift_getWitnessTable();
    MEMORY[0x26113D7B0](v19, WitnessTable, v21);
    if ((*v49)(v12, 1, v8) == 1)
    {
      (*(void (**)(char *, uint64_t))(v38 + 8))(v12, v39);
      uint64_t v28 = 1;
      uint64_t v29 = v42;
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v41 + 56))(v29, v28, 1, v8);
    }
    unsigned int v22 = *v47;
    (*v47)(v15, v12, v8);
    unsigned int v23 = *(void (**)(char *))(v2 + 16);
    uint64_t v24 = v2;
    swift_bridgeObjectRetain();
    swift_retain();
    v23(v15);
    swift_release();
    uint64_t v25 = *(void *)(v44 + 32);
    char v26 = sub_25A50F4F0();
    swift_bridgeObjectRelease();
    unsigned int v27 = *v45;
    (*v45)(v17, v18);
    if ((v26 & 1) == 0) {
      break;
    }
    (*v43)(v15, v8);
    uint64_t v2 = v24;
  }
  int v30 = *(void (**)(char *))(v24 + 16);
  swift_retain();
  v30(v15);
  swift_release();
  uint64_t v31 = v48;
  sub_25A50F530();
  long long v32 = v46;
  sub_25A50F4C0();
  v27(v32, v31);
  int v33 = *(uint64_t (**)(char *))(v24 + 32);
  swift_retain();
  uint64_t v34 = v33(v15);
  uint64_t v35 = swift_release();
  uint64_t v51 = v34;
  MEMORY[0x270FA5388](v35);
  *(&v37 - 4) = v8;
  *(&v37 - 3) = v31;
  *(&v37 - 2) = v25;
  *(&v37 - 1) = v24;
  swift_getWitnessTable();
  uint64_t v51 = sub_25A50FEB0();
  swift_getWitnessTable();
  sub_25A50F170();
  uint64_t v29 = v42;
  v22(v42, v15, v8);
  uint64_t v28 = 0;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v41 + 56))(v29, v28, 1, v8);
}

BOOL sub_25A4AD870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void (**)(uint64_t))(v9 + 16);
  swift_bridgeObjectRetain();
  swift_retain();
  v10(a1);
  swift_release();
  char v11 = sub_25A50F4F0();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a4);
  return (v11 & 1) == 0;
}

uint64_t DepthFirstDAGIterator.postOrderReverseTopologicallySorted()(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = a1[2];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v88 = sub_25A50FA40();
  uint64_t v104 = *(void *)(v88 - 8);
  MEMORY[0x270FA5388](v88);
  uint64_t v7 = (char *)&v80 - v6;
  uint64_t v99 = swift_getTupleTypeMetadata2();
  uint64_t v8 = MEMORY[0x270FA5388](v99);
  uint64_t v98 = (unsigned __int8 *)&v80 - v9;
  uint64_t v110 = *(void (***)(char *, uint64_t))(TupleTypeMetadata2 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v102 = (char *)&v80 - v11;
  uint64_t v12 = a1[3];
  uint64_t v109 = *(void *)(v12 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  uint64_t v112 = (char *)&v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v94 = (char *)&v80 - v16;
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  BOOL v93 = (char *)&v80 - v18;
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v101 = (char *)&v80 - v20;
  MEMORY[0x270FA5388](v19);
  uint64_t v91 = (char *)&v80 - v21;
  uint64_t v22 = sub_25A50FA40();
  uint64_t v83 = *(void *)(v22 - 8);
  uint64_t v23 = MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)&v80 - v24;
  uint64_t v105 = *(void *)(v4 - 8);
  uint64_t v26 = MEMORY[0x270FA5388](v23);
  uint64_t v28 = (char *)&v80 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = MEMORY[0x270FA5388](v26);
  uint64_t v113 = (char *)&v80 - v30;
  uint64_t v31 = MEMORY[0x270FA5388](v29);
  unint64_t v95 = (char *)&v80 - v32;
  uint64_t v33 = MEMORY[0x270FA5388](v31);
  unint64_t v96 = (char *)&v80 - v34;
  uint64_t v82 = v35;
  MEMORY[0x270FA5388](v33);
  uint64_t v90 = (char *)&v80 - v36;
  uint64_t v37 = a1[4];
  uint64_t v114 = v12;
  uint64_t v106 = v37;
  uint64_t v118 = sub_25A50E880();
  uint64_t v117 = sub_25A50F120();
  uint64_t v116 = sub_25A50F120();
  long long v89 = a1;
  uint64_t v38 = (uint64_t)a1;
  uint64_t v39 = v105;
  DepthFirstDAGIterator.next()(v38, v25);
  uint64_t v40 = (uint64_t)v25;
  uint64_t v41 = v83;
  uint64_t v42 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
  uint64_t v87 = v39 + 48;
  uint64_t v86 = v42;
  if (v42((char *)v40, 1, v4) == 1) {
    goto LABEL_29;
  }
  uint64_t v81 = v22;
  uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v39 + 32);
  uint64_t v43 = v39 + 32;
  uint64_t v108 = v44;
  uint64_t v111 = (void (**)(char *, char *, uint64_t))(v43 - 16);
  uint64_t v45 = v109;
  unint64_t v100 = (unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v110 + 6);
  long long v92 = (void (**)(char *, char *, uint64_t))(v109 + 16);
  uint64_t v109 = v43;
  uint64_t v110 = (void (**)(char *, uint64_t))(v45 + 8);
  uint64_t v107 = (void (**)(char *, uint64_t))(v43 - 24);
  unint64_t v84 = (void (**)(unsigned char *, uint64_t))(v104 + 8);
  uint64_t v46 = v114;
  uint64_t v47 = v90;
  uint64_t v103 = TupleTypeMetadata2;
  id v97 = v7;
  unint64_t v85 = (char *)v40;
  v44(v90, (char *)v40, v4);
LABEL_5:
  (*(void (**)(char *))(v2 + 16))(v47);
  swift_bridgeObjectRetain();
  char v49 = sub_25A50F4F0();
  swift_bridgeObjectRelease();
  if ((v49 & 1) == 0)
  {
    uint64_t v50 = &v102[*(int *)(TupleTypeMetadata2 + 48)];
    *uint64_t v102 = 0;
    (*v111)(v50, v47, v4);
    sub_25A50F1E0();
    uint64_t v46 = v114;
    sub_25A50F180();
  }
  uint64_t v104 = sub_25A50F1E0();
  for (uint64_t i = v96; ; (*v107)(i, v4))
  {
    uint64_t v52 = v104;
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v54 = swift_getWitnessTable();
    MEMORY[0x26113D7B0](v52, WitnessTable, v54);
    if ((*v100)(v7, 1, TupleTypeMetadata2) == 1)
    {
      (*v84)(v7, v88);
      (*v110)(v91, v46);
      uint64_t v47 = v90;
      (*v107)(v90, v4);
      uint64_t v48 = v85;
      DepthFirstDAGIterator.next()((uint64_t)v89, v85);
      uint64_t v40 = (uint64_t)v48;
      if (v86(v48, 1, v4) == 1)
      {
LABEL_28:
        uint64_t v22 = v81;
        uint64_t v41 = v83;
LABEL_29:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v22);
        return v116;
      }
      v108(v47, v48, v4);
      goto LABEL_5;
    }
    unsigned __int8 v55 = *v7;
    uint64_t v56 = &v7[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v57 = TupleTypeMetadata2;
    unint64_t v59 = v98;
    uint64_t v58 = v99;
    unint64_t v60 = &v98[*(int *)(v99 + 48)];
    *uint64_t v98 = v55;
    int64_t v61 = (void (*)(char *, unsigned __int8 *, uint64_t))v108;
    v108((char *)v60, v56, v4);
    int v62 = *v59;
    v61(i, &v59[*(int *)(v58 + 48)], v4);
    int v63 = v101;
    (*(void (**)(char *))(v2 + 16))(i);
    if (v62 == 1)
    {
      (*v111)(v95, i, v4);
      sub_25A50F1E0();
      sub_25A50F180();
      uint64_t v46 = v114;
      (*v110)(v63, v114);
      TupleTypeMetadata2 = v57;
LABEL_9:
      uint64_t v7 = v97;
      continue;
    }
    swift_bridgeObjectRetain();
    uint64_t v46 = v114;
    unint64_t v64 = v63;
    char v65 = sub_25A50F4F0();
    swift_bridgeObjectRelease();
    if (v65)
    {
      (*v110)(v64, v46);
      uint64_t i = v96;
      TupleTypeMetadata2 = v103;
      goto LABEL_9;
    }
    (*v92)(v94, v64, v46);
    sub_25A50F530();
    Swift::String v66 = v93;
    sub_25A50F4C0();
    uint64_t v67 = v46;
    int64_t v68 = *v110;
    (*v110)(v66, v67);
    uint64_t v69 = &v102[*(int *)(v103 + 48)];
    *uint64_t v102 = 1;
    uint64_t v70 = *v111;
    uint64_t v71 = v96;
    (*v111)(v69, v96, v4);
    sub_25A50F180();
    uint64_t v72 = (*(uint64_t (**)(char *))(v2 + 32))(v71);
    if (MEMORY[0x26113D1B0](v72, v4)) {
      break;
    }
LABEL_26:
    swift_bridgeObjectRelease();
    uint64_t v79 = v114;
    v68(v101, v114);
    uint64_t v46 = v79;
    TupleTypeMetadata2 = v103;
    uint64_t v7 = v97;
    uint64_t i = v96;
  }
  uint64_t v73 = 0;
  while (1)
  {
    uint64_t v40 = sub_25A50F140();
    sub_25A50F0D0();
    if (v40)
    {
      v70(v113, (char *)(v72+ ((*(unsigned __int8 *)(v105 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v105 + 80))+ *(void *)(v105 + 72) * v73), v4);
      uint64_t v74 = v73 + 1;
      if (__OFADD__(v73, 1)) {
        goto LABEL_27;
      }
      goto LABEL_20;
    }
    uint64_t result = sub_25A50FE20();
    if (v82 != 8) {
      break;
    }
    uint64_t v40 = result;
    uint64_t v115 = result;
    v70(v113, (char *)&v115, v4);
    swift_unknownObjectRelease();
    uint64_t v74 = v73 + 1;
    if (__OFADD__(v73, 1))
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
LABEL_20:
    v108(v28, v113, v4);
    uint64_t v75 = v2;
    (*(void (**)(char *))(v2 + 16))(v28);
    swift_bridgeObjectRetain();
    char v76 = sub_25A50F4F0();
    swift_bridgeObjectRelease();
    if ((v76 & 1) == 0)
    {
      unint64_t v77 = &v102[*(int *)(v103 + 48)];
      *uint64_t v102 = 0;
      v70(v77, v28, v4);
      sub_25A50F180();
    }
    v68(v112, v114);
    (*v107)(v28, v4);
    ++v73;
    uint64_t v2 = v75;
    if (v74 == MEMORY[0x26113D1B0](v72, v4)) {
      goto LABEL_26;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_25A4AE594()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_25A4AE5A4()
{
  return sub_25A4ACFEC();
}

uint64_t sub_25A4AE5AC()
{
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_25A4AE5BC()
{
  return sub_25A50FDE0();
}

uint64_t sub_25A4AE5EC()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_25A4AE624()
{
  swift_getAtKeyPath();
  return v1;
}

uint64_t sub_25A4AE650()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_25A4AE660@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v2 + 16) - 8) + 16))(a2, a1);
}

BOOL sub_25A4AE694(uint64_t a1)
{
  return sub_25A4AD870(a1, v1[5], v1[2], v1[3]);
}

uint64_t sub_25A4AE6B8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_release();
}

uint64_t sub_25A4AE704(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

void *sub_25A4AE77C(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_25A4AE80C(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_release();
  a1[2] = a2[2];
  swift_release();
  return a1;
}

uint64_t sub_25A4AE86C(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_25A4AE8B4(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for DepthFirstDAGIterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25A4AE91C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v7 = *v5++;
      uint64_t v6 = v7;
      if ((v7 & ~v4) == 0) {
        uint64_t v6 = 0;
      }
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t DiagnosticsCollector.__allocating_init(options:simulatorDiagnosticsDeviceSet:outputDirectory:prefix:suffix:)(uint64_t *a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = swift_allocObject();
  DiagnosticsCollector.init(options:simulatorDiagnosticsDeviceSet:outputDirectory:prefix:suffix:)(a1, a2, a3, a4, a5, a6, a7, a8);
  return v16;
}

uint64_t DiagnosticsCollector.summaryText.getter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC20PreviewsFoundationOS20DiagnosticsCollector_state);
  swift_retain();
  os_unfair_lock_lock(v1 + 8);
  sub_25A4B043C((uint64_t)&v1[4], &v4);
  os_unfair_lock_unlock(v1 + 8);
  uint64_t v2 = v4;
  swift_release();
  return v2;
}

Swift::Void __swiftcall DiagnosticsCollector.appendLogEntry(titled:_:at:)(Swift::String titled, Swift::String _, PreviewsFoundationOS::DiagnosticsLogPosition at)
{
  uint64_t v4 = *(os_unfair_lock_s **)(v3 + OBJC_IVAR____TtC20PreviewsFoundationOS20DiagnosticsCollector_state);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  os_unfair_lock_lock(v4 + 8);
  sub_25A3D18F0((uint64_t)&v4[4]);
  os_unfair_lock_unlock(v4 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
}

uint64_t static DiagnosticsCollector.numberOfDiagnosticsToKeep.getter()
{
  return qword_26A41AB18;
}

uint64_t static DiagnosticsCollector.numberOfDiagnosticsToKeep.setter(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  qword_26A41AB18 = a1;
  return result;
}

uint64_t (*static DiagnosticsCollector.numberOfDiagnosticsToKeep.modify())()
{
  return j__swift_endAccess;
}

unint64_t static DiagnosticsCollector.archiveNamePrefix.getter()
{
  return 0xD000000000000014;
}

unint64_t static DiagnosticsCollector.logFileName.getter()
{
  return 0xD000000000000020;
}

uint64_t static DiagnosticsCollector.simulatorDiagnosticsDirectoryName.getter()
{
  return 0x645F6C74636D6973;
}

uint64_t DiagnosticsCollector.Options.rawValue.getter()
{
  return *(void *)v0;
}

PreviewsFoundationOS::DiagnosticsCollector::Options __swiftcall DiagnosticsCollector.Options.init(rawValue:)(PreviewsFoundationOS::DiagnosticsCollector::Options rawValue)
{
  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

uint64_t static DiagnosticsCollector.Options.all.getter@<X0>(void *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  *a1 = qword_26A41AB20;
  return result;
}

uint64_t static DiagnosticsCollector.Options.all.setter(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t result = swift_beginAccess();
  qword_26A41AB20 = v1;
  return result;
}

uint64_t (*static DiagnosticsCollector.Options.all.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t static DiagnosticsCollector.Options.crashLogs.getter@<X0>(void *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  *a1 = qword_26A41AB28;
  return result;
}

uint64_t static DiagnosticsCollector.Options.crashLogs.setter(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t result = swift_beginAccess();
  qword_26A41AB28 = v1;
  return result;
}

uint64_t (*static DiagnosticsCollector.Options.crashLogs.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t static DiagnosticsCollector.Options.osLog.getter@<X0>(void *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  *a1 = qword_26A41AB30;
  return result;
}

uint64_t static DiagnosticsCollector.Options.osLog.setter(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t result = swift_beginAccess();
  qword_26A41AB30 = v1;
  return result;
}

uint64_t (*static DiagnosticsCollector.Options.osLog.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t static DiagnosticsCollector.Options.simulator.getter@<X0>(void *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  *a1 = qword_26A41AB38;
  return result;
}

uint64_t static DiagnosticsCollector.Options.simulator.setter(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t result = swift_beginAccess();
  qword_26A41AB38 = v1;
  return result;
}

uint64_t (*static DiagnosticsCollector.Options.simulator.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_25A4AF048@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_25A4AE91C(a1, a2);
}

BOOL static DiagnosticsCollector.SimulatorDiagnosticsDeviceSet.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t DiagnosticsCollector.SimulatorDiagnosticsDeviceSet.hash(into:)()
{
  return sub_25A5104F0();
}

BOOL sub_25A4AF0A8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t DiagnosticsCollector.archive.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC20PreviewsFoundationOS20DiagnosticsCollector_archive;
  uint64_t v4 = sub_25A50E320();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

void DiagnosticsCollector.options.getter(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + OBJC_IVAR____TtC20PreviewsFoundationOS20DiagnosticsCollector_options);
}

void DiagnosticsCollector.simulatorDiagnosticsDeviceSet.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + OBJC_IVAR____TtC20PreviewsFoundationOS20DiagnosticsCollector_simulatorDiagnosticsDeviceSet);
}

uint64_t DiagnosticsCollector.zipArchive.getter()
{
  return sub_25A50E2D0();
}

uint64_t DiagnosticsCollector.init(options:simulatorDiagnosticsDeviceSet:outputDirectory:prefix:suffix:)(uint64_t *a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  uint64_t v70 = a4;
  v68[1] = a3;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A41AB48);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v75 = (char *)v68 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_25A50E4F0();
  uint64_t v72 = *(void *)(v17 - 8);
  uint64_t v73 = v17;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = sub_25A50E320();
  uint64_t v20 = *(void *)(v71 - 8);
  uint64_t v21 = MEMORY[0x270FA5388](v71);
  uint64_t v23 = (char *)v68 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v69 = (char *)v68 - v24;
  uint64_t v25 = sub_25A50E470();
  uint64_t v77 = *(void *)(v25 - 8);
  uint64_t v78 = v25;
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = *a1;
  LOBYTE(a2) = *a2;
  uint64_t v79 = (char *)v68 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25A50E460();
  *(void *)(v9 + OBJC_IVAR____TtC20PreviewsFoundationOS20DiagnosticsCollector_options) = v27;
  *(unsigned char *)(v9 + OBJC_IVAR____TtC20PreviewsFoundationOS20DiagnosticsCollector_simulatorDiagnosticsDeviceSet) = (_BYTE)a2;
  if (!a6)
  {
    unint64_t v28 = 0xE000000000000000;
    uint64_t v74 = v9;
    if (!a8) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  uint64_t v80 = a5;
  unint64_t v81 = a6;
  swift_bridgeObjectRetain();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  a6 = v80;
  unint64_t v28 = v81;
  uint64_t v74 = v9;
  if (a8)
  {
LABEL_3:
    uint64_t v80 = 45;
    unint64_t v81 = 0xE100000000000000;
    sub_25A50EDA0();
    swift_bridgeObjectRelease();
  }
LABEL_5:
  id v29 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08790]), sel_init);
  uint64_t v30 = (void *)sub_25A50EBF0();
  objc_msgSend(v29, sel_setDateFormat_, v30);

  uint64_t v80 = a6;
  unint64_t v81 = v28;
  sub_25A50EDA0();
  sub_25A50EDA0();
  uint64_t v31 = (void *)sub_25A50E400();
  id v76 = v29;
  id v32 = objc_msgSend(v29, sel_stringFromDate_, v31);

  sub_25A50EC20();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  id v33 = objc_msgSend(self, sel_processInfo);
  id v34 = objc_msgSend(v33, sel_environment);

  uint64_t v35 = sub_25A50E8A0();
  if (*(void *)(v35 + 16) && (sub_25A409670(0xD00000000000001ELL, 0x800000025A5218C0), (v36 & 1) != 0))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v37 = v69;
    sub_25A50E290();
    swift_bridgeObjectRelease();
    uint64_t v38 = v74;
    uint64_t v39 = v75;
    uint64_t v41 = v72;
    uint64_t v40 = v73;
    unint64_t v42 = 0x263F08000;
    uint64_t v43 = &unk_265479000;
    uint64_t v44 = v71;
  }
  else
  {
    swift_bridgeObjectRelease();
    if (!v70)
    {
      uint64_t v45 = NSTemporaryDirectory();
      sub_25A50EC20();
    }
    uint64_t v38 = v74;
    sub_25A50E280();
    swift_bridgeObjectRelease();
    uint64_t v46 = v69;
    sub_25A50E2C0();
    uint64_t v37 = v46;
    swift_bridgeObjectRelease();
    uint64_t v44 = v71;
    (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v71);
    uint64_t v39 = v75;
    uint64_t v41 = v72;
    uint64_t v40 = v73;
    unint64_t v42 = 0x263F08000uLL;
    uint64_t v43 = &unk_265479000;
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(v38 + OBJC_IVAR____TtC20PreviewsFoundationOS20DiagnosticsCollector_archive, v37, v44);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A41AB50);
  uint64_t v47 = swift_allocObject();
  *(_DWORD *)(v47 + 32) = 0;
  uint64_t v48 = MEMORY[0x263F8EE78];
  *(void *)(v47 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v47 + 24) = v48;
  *(void *)(v38 + OBJC_IVAR____TtC20PreviewsFoundationOS20DiagnosticsCollector_state) = v47;
  id v49 = [objc_allocWithZone(*(Class *)(v42 + 1936)) *((SEL *)v43 + 103)];
  sub_25A50E4D0();
  uint64_t v50 = (void *)sub_25A50E4E0();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v19, v40);
  objc_msgSend(v49, sel_setLocale_, v50);

  uint64_t v51 = (void *)sub_25A50EBF0();
  objc_msgSend(v49, sel_setDateFormat_, v51);

  sub_25A50E500();
  uint64_t v52 = sub_25A50E530();
  uint64_t v53 = *(void *)(v52 - 8);
  uint64_t v54 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v39, 1, v52) != 1)
  {
    uint64_t v54 = (void *)sub_25A50E510();
    (*(void (**)(char *, uint64_t))(v53 + 8))(v39, v52);
  }
  objc_msgSend(v49, sel_setTimeZone_, v54);

  unsigned __int8 v55 = (void *)sub_25A50E400();
  id v56 = objc_msgSend(v49, sel_stringFromDate_, v55);

  uint64_t v57 = sub_25A50EC20();
  uint64_t v75 = v58;

  id v59 = [objc_allocWithZone(*(Class *)(v42 + 1936)) (SEL)v43 + 1560];
  objc_msgSend(v59, sel_setTimeStyle_, 4);
  objc_msgSend(v59, sel_setDateStyle_, 4);
  unint64_t v60 = (void *)sub_25A50E400();
  id v61 = objc_msgSend(v59, sel_stringFromDate_, v60);

  uint64_t v62 = sub_25A50EC20();
  uint64_t v64 = v63;

  char v65 = *(os_unfair_lock_s **)(v38 + OBJC_IVAR____TtC20PreviewsFoundationOS20DiagnosticsCollector_state);
  MEMORY[0x270FA5388](v66);
  v68[-4] = v62;
  v68[-3] = v64;
  v68[-2] = v57;
  v68[-1] = v75;
  swift_retain();
  os_unfair_lock_lock(v65 + 8);
  sub_25A4B0750((uint64_t)&v65[4]);
  os_unfair_lock_unlock(v65 + 8);
  swift_release();

  (*(void (**)(char *, uint64_t))(v77 + 8))(v79, v78);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v38;
}

uint64_t sub_25A4AFA48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRetain();
  sub_25A50EDA0();
  swift_bridgeObjectRetain();
  sub_25A50EDA0();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 8);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_25A38C094(0, v4[2] + 1, 1, v4);
    uint64_t v4 = (void *)result;
  }
  unint64_t v7 = v4[2];
  unint64_t v6 = v4[3];
  if (v7 >= v6 >> 1)
  {
    uint64_t result = (uint64_t)sub_25A38C094((void *)(v6 > 1), v7 + 1, 1, v4);
    uint64_t v4 = (void *)result;
  }
  _OWORD v4[2] = v7 + 1;
  uint64_t v8 = &v4[4 * v7];
  void v8[4] = 1702125892;
  void v8[5] = 0xE400000000000000;
  void v8[6] = a2;
  v8[7] = a3;
  *(void *)(a1 + 8) = v4;
  return result;
}

uint64_t sub_25A4AFB60(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = (void **)(a1 + 8);
  if (a2)
  {
    uint64_t v12 = *v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_25A38C094(0, v12[2] + 1, 1, v12);
      uint64_t v12 = (void *)result;
    }
    unint64_t v14 = v12[2];
    unint64_t v13 = v12[3];
    if (v14 >= v13 >> 1)
    {
      uint64_t result = (uint64_t)sub_25A38C094((void *)(v13 > 1), v14 + 1, 1, v12);
      uint64_t v12 = (void *)result;
    }
    void v12[2] = v14 + 1;
    uint64_t v15 = &v12[4 * v14];
    void v15[4] = a3;
    v15[5] = a4;
    v15[6] = a5;
    v15[7] = a6;
    *uint64_t v10 = v12;
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return (uint64_t)sub_25A4229F0(0, 0, a3, a4, a5, a6);
  }
  return result;
}

Swift::Void __swiftcall DiagnosticsCollector.appendFileEntry(named:folderName:contents:)(Swift::String named, Swift::String_optional folderName, Swift::String contents)
{
  uint64_t v4 = *(void *)(v3 + OBJC_IVAR____TtC20PreviewsFoundationOS20DiagnosticsCollector_state);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 32));
  sub_25A4B0770((void **)(v4 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 32));
  swift_release();
}

uint64_t sub_25A4AFCEC(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t v13 = *a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v13 = sub_25A38C1A4(0, v13[2] + 1, 1, v13);
  }
  unint64_t v15 = v13[2];
  unint64_t v14 = v13[3];
  if (v15 >= v14 >> 1) {
    unint64_t v13 = sub_25A38C1A4((void *)(v14 > 1), v15 + 1, 1, v13);
  }
  uint64_t v20 = &type metadata for DiagnosticsCollector.WriteFileAction;
  uint64_t v21 = &off_2708358E8;
  uint64_t v16 = (void *)swift_allocObject();
  *(void *)&long long v19 = v16;
  void v16[2] = a2;
  v16[3] = a3;
  void v16[4] = a4;
  v16[5] = a5;
  void v16[6] = a6;
  v16[7] = a7;
  uint64_t v13[2] = v15 + 1;
  uint64_t result = sub_25A3C85D8(&v19, (uint64_t)&v13[5 * v15 + 4]);
  *a1 = v13;
  return result;
}

uint64_t DiagnosticsCollector.copyNonUniqueDirectories(named:descendingFrom:)()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC20PreviewsFoundationOS20DiagnosticsCollector_state);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 32));
  sub_25A4B0794((void **)(v1 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 32));
  return swift_release();
}

uint64_t sub_25A4AFE94(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DiagnosticsCollector.CopyNonUniqueDirectoriesAction(0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_25A50E320();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v10, a2, v11);
  uint64_t v12 = &v10[*(int *)(v8 + 20)];
  *(void *)uint64_t v12 = a3;
  *((void *)v12 + 1) = a4;
  unint64_t v13 = *a1;
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v13;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v13 = sub_25A38C1A4(0, v13[2] + 1, 1, v13);
    *a1 = v13;
  }
  unint64_t v16 = v13[2];
  unint64_t v15 = v13[3];
  if (v16 >= v15 >> 1)
  {
    unint64_t v13 = sub_25A38C1A4((void *)(v15 > 1), v16 + 1, 1, v13);
    *a1 = v13;
  }
  uint64_t v21 = v8;
  uint64_t v22 = &off_2708358F8;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v20);
  sub_25A4B0CC8((uint64_t)v10, (uint64_t)boxed_opaque_existential_1, type metadata accessor for DiagnosticsCollector.CopyNonUniqueDirectoriesAction);
  uint64_t v13[2] = v16 + 1;
  sub_25A3C85D8(&v20, (uint64_t)&v13[5 * v16 + 4]);
  return sub_25A4B0D30((uint64_t)v10, type metadata accessor for DiagnosticsCollector.CopyNonUniqueDirectoriesAction);
}

uint64_t DiagnosticsCollector.copyFiles(descendingFrom:intoFolderName:matching:)()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC20PreviewsFoundationOS20DiagnosticsCollector_state);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 32));
  sub_25A4B07B4((void **)(v1 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 32));
  return swift_release();
}

uint64_t sub_25A4B00C8(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for DiagnosticsCollector.CopyFilesAction(0);
  MEMORY[0x270FA5388](v12);
  unint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_25A50E320();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v14, a2, v15);
  unint64_t v16 = &v14[*(int *)(v12 + 20)];
  *(void *)unint64_t v16 = a3;
  *((void *)v16 + 1) = a4;
  uint64_t v17 = &v14[*(int *)(v12 + 24)];
  *(void *)uint64_t v17 = a5;
  *((void *)v17 + 1) = a6;
  uint64_t v18 = *a1;
  swift_bridgeObjectRetain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v18;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v18 = sub_25A38C1A4(0, v18[2] + 1, 1, v18);
    *a1 = v18;
  }
  unint64_t v21 = v18[2];
  unint64_t v20 = v18[3];
  if (v21 >= v20 >> 1)
  {
    uint64_t v18 = sub_25A38C1A4((void *)(v20 > 1), v21 + 1, 1, v18);
    *a1 = v18;
  }
  uint64_t v26 = v12;
  uint64_t v27 = &off_270835908;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v25);
  sub_25A4B0CC8((uint64_t)v14, (uint64_t)boxed_opaque_existential_1, type metadata accessor for DiagnosticsCollector.CopyFilesAction);
  void v18[2] = v21 + 1;
  sub_25A3C85D8(&v25, (uint64_t)&v18[5 * v21 + 4]);
  return sub_25A4B0D30((uint64_t)v14, type metadata accessor for DiagnosticsCollector.CopyFilesAction);
}

uint64_t DiagnosticsCollector.writeFile(intoFolderName:using:)()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC20PreviewsFoundationOS20DiagnosticsCollector_state);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 32));
  sub_25A4B07D8((void **)(v1 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 32));
  return swift_release();
}

uint64_t sub_25A4B031C(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *a1;
  swift_bridgeObjectRetain();
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v10 = sub_25A38C1A4(0, v10[2] + 1, 1, v10);
  }
  unint64_t v12 = v10[2];
  unint64_t v11 = v10[3];
  if (v12 >= v11 >> 1) {
    uint64_t v10 = sub_25A38C1A4((void *)(v11 > 1), v12 + 1, 1, v10);
  }
  unint64_t v16 = &type metadata for DiagnosticsCollector.DelayedFileWriteAction;
  uint64_t v17 = &off_270835918;
  uint64_t v13 = (void *)swift_allocObject();
  *(void *)&long long v15 = v13;
  uint64_t v13[2] = a2;
  void v13[3] = a3;
  void v13[4] = a4;
  void v13[5] = a5;
  void v10[2] = v12 + 1;
  uint64_t result = sub_25A3C85D8(&v15, (uint64_t)&v10[5 * v12 + 4]);
  *a1 = v10;
  return result;
}

uint64_t sub_25A4B043C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = a2;
  uint64_t v3 = *(void *)(a1 + 8);
  int64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v15 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    sub_25A39A068(0, v4, 0);
    uint64_t v5 = v3 + 56;
    do
    {
      sub_25A50EA50();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_25A50EDA0();
      swift_bridgeObjectRelease();
      sub_25A50EDA0();
      v6._uint64_t countAndFlagsBits = 538976288;
      v6._unint64_t object = (void *)0xE400000000000000;
      String.prefixingEachLine(with:startingOnLine:)(v6, 0);
      sub_25A50EDA0();
      swift_bridgeObjectRelease();
      sub_25A50EDA0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v8 = *(void *)(v15 + 16);
      unint64_t v7 = *(void *)(v15 + 24);
      if (v8 >= v7 >> 1) {
        sub_25A39A068(v7 > 1, v8 + 1, 1);
      }
      v5 += 32;
      *(void *)(v15 + 16) = v8 + 1;
      uint64_t v9 = v15 + 16 * v8;
      *(void *)(v9 + 32) = 2112829;
      *(void *)(v9 + 40) = 0xE300000000000000;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    uint64_t v2 = a2;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A415DC0);
  sub_25A3A108C();
  uint64_t v10 = sub_25A50EAD0();
  uint64_t v12 = v11;
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t *v2 = v10;
  v2[1] = v12;
  return result;
}

uint64_t DiagnosticsCollector.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC20PreviewsFoundationOS20DiagnosticsCollector_archive;
  uint64_t v2 = sub_25A50E320();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  return v0;
}

uint64_t DiagnosticsCollector.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC20PreviewsFoundationOS20DiagnosticsCollector_archive;
  uint64_t v2 = sub_25A50E320();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  uint64_t v3 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v4 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x270FA0228](v0, v3, v4);
}

uint64_t sub_25A4B0750(uint64_t a1)
{
  return sub_25A4AFA48(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_25A4B0770(void **a1)
{
  return sub_25A4AFCEC(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t sub_25A4B0794(void **a1)
{
  return sub_25A4AFE94(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_25A4B07B4(void **a1)
{
  return sub_25A4B00C8(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_25A4B07D8(void **a1)
{
  return sub_25A4B031C(a1, v1[2], v1[3], v1[4], v1[5]);
}

unint64_t sub_25A4B07FC()
{
  unint64_t result = qword_26A41AB58;
  if (!qword_26A41AB58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A41AB58);
  }
  return result;
}

unint64_t sub_25A4B0854()
{
  unint64_t result = qword_26A41AB60;
  if (!qword_26A41AB60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A41AB60);
  }
  return result;
}

unint64_t sub_25A4B08AC()
{
  unint64_t result = qword_26A41AB68;
  if (!qword_26A41AB68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A41AB68);
  }
  return result;
}

unint64_t sub_25A4B0904()
{
  unint64_t result = qword_26A41AB70;
  if (!qword_26A41AB70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A41AB70);
  }
  return result;
}

unint64_t sub_25A4B095C()
{
  unint64_t result = qword_26A41AB78;
  if (!qword_26A41AB78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A41AB78);
  }
  return result;
}

unint64_t sub_25A4B09B4()
{
  unint64_t result = qword_26A41AB80;
  if (!qword_26A41AB80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A41AB80);
  }
  return result;
}

ValueMetadata *type metadata accessor for DiagnosticsLogPosition()
{
  return &type metadata for DiagnosticsLogPosition;
}

uint64_t sub_25A4B0A1C()
{
  return type metadata accessor for DiagnosticsCollector(0);
}

uint64_t type metadata accessor for DiagnosticsCollector(uint64_t a1)
{
  return sub_25A384AE8(a1, (uint64_t *)&unk_26A41AB88);
}

uint64_t sub_25A4B0A44()
{
  uint64_t result = sub_25A50E320();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for DiagnosticsCollector(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for DiagnosticsCollector);
}

uint64_t dispatch thunk of DiagnosticsCollector.__allocating_init(options:simulatorDiagnosticsDeviceSet:outputDirectory:prefix:suffix:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

ValueMetadata *type metadata accessor for DiagnosticsCollector.Options()
{
  return &type metadata for DiagnosticsCollector.Options;
}

unsigned char *_s20PreviewsFoundationOS20DiagnosticsCollectorC29SimulatorDiagnosticsDeviceSetOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25A4B0C00);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DiagnosticsCollector.SimulatorDiagnosticsDeviceSet()
{
  return &type metadata for DiagnosticsCollector.SimulatorDiagnosticsDeviceSet;
}

ValueMetadata *type metadata accessor for DiagnosticsCollector.State()
{
  return &type metadata for DiagnosticsCollector.State;
}

uint64_t sub_25A4B0C48()
{
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t type metadata accessor for DiagnosticsCollector.CopyFilesAction(uint64_t a1)
{
  return sub_25A384AE8(a1, (uint64_t *)&unk_26A41ABA8);
}

uint64_t type metadata accessor for DiagnosticsCollector.CopyNonUniqueDirectoriesAction(uint64_t a1)
{
  return sub_25A384AE8(a1, (uint64_t *)&unk_26A41AB98);
}

uint64_t sub_25A4B0CC8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_25A4B0D30(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_25A4B0D90()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 64, 7);
}

void *initializeWithCopy for DiagnosticsCollector.WriteFileAction(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for DiagnosticsCollector.WriteFileAction(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for DiagnosticsCollector.WriteFileAction(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for DiagnosticsCollector.WriteFileAction()
{
  return &type metadata for DiagnosticsCollector.WriteFileAction;
}

uint64_t *sub_25A4B0F28(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_25A50E320();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_25A4B1000(uint64_t a1)
{
  uint64_t v2 = sub_25A50E320();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t sub_25A4B1078(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_25A50E320();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_25A4B1100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_25A50E320();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_25A4B119C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_25A50E320();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_25A4B1218(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_25A50E320();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_25A4B12A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm);
}

uint64_t sub_25A4B12BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm);
}

uint64_t sub_25A4B12D4()
{
  uint64_t result = sub_25A50E320();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_25A4B1368(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = sub_25A50E320();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (uint64_t *)((char *)v4 + v8);
    uint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (uint64_t *)((char *)v4 + v9);
    unint64_t v14 = (uint64_t *)((char *)a2 + v9);
    uint64_t v15 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v15;
    swift_bridgeObjectRetain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_25A4B1454(uint64_t a1)
{
  uint64_t v2 = sub_25A50E320();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t sub_25A4B14DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_25A50E320();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (void *)(a1 + v8);
  uint64_t v13 = (void *)(a2 + v8);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t sub_25A4B157C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_25A50E320();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  uint64_t v13 = v12[1];
  *uint64_t v11 = *v12;
  v11[1] = v13;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_25A4B163C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_25A50E320();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  return a1;
}

uint64_t sub_25A4B16C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_25A50E320();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + *(int *)(a3 + 24)) = *(_OWORD *)(a2 + *(int *)(a3 + 24));
  swift_release();
  return a1;
}

uint64_t sub_25A4B1764(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25A4B1778);
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_25A50E320();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_25A4B1840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25A4B1854);
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_25A50E320();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_25A4B1918()
{
  uint64_t result = sub_25A50E320();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for DiagnosticsCollector.DelayedFileWriteAction(uint64_t a1, uint64_t a2)
{
  return sub_25A4B1B08(a1, a2, MEMORY[0x263F8EED8]);
}

uint64_t initializeWithCopy for DiagnosticsCollector.DelayedFileWriteAction(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *assignWithCopy for DiagnosticsCollector.DelayedFileWriteAction(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for DiagnosticsCollector.DelayedFileWriteAction(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v4;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for DiagnosticsCollector.DelayedFileWriteAction()
{
  return &type metadata for DiagnosticsCollector.DelayedFileWriteAction;
}

uint64_t destroy for DiagnosticsCollector.LogAction(uint64_t a1, uint64_t a2)
{
  return sub_25A4B1B08(a1, a2, MEMORY[0x263F8EEA0]);
}

uint64_t sub_25A4B1B08(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a1 + 24);

  return a3(v4);
}

ValueMetadata *type metadata accessor for DiagnosticsCollector.LogAction()
{
  return &type metadata for DiagnosticsCollector.LogAction;
}

uint64_t Timestamp.rawValue.getter()
{
  return *(void *)v0;
}

uint64_t Timestamp.init(rawValue:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t static Timestamp.now()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = mach_absolute_time();
  *a1 = result;
  return result;
}

uint64_t *Timestamp.period(until:)@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *result;
  *a2 = *v2;
  a2[1] = v3;
  return result;
}

BOOL static Timestamp.< infix(_:_:)(void *a1, void *a2)
{
  return *a1 < *a2;
}

unint64_t sub_25A4B1BDC()
{
  unint64_t result = qword_26A41ABB8;
  if (!qword_26A41ABB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A41ABB8);
  }
  return result;
}

ValueMetadata *type metadata accessor for Timestamp()
{
  return &type metadata for Timestamp;
}

uint64_t URL.appendingFile(_:)()
{
  return sub_25A50E2C0();
}

uint64_t URL.appendingDirectory(_:)()
{
  return sub_25A50E2C0();
}

uint64_t CrashReportError.UncaughtExceptionError.exception.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CrashReportError.UncaughtExceptionError.reason.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CrashReportError.UncaughtExceptionError.crashReport.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CrashReportError.UncaughtExceptionError() + 28);

  return sub_25A3C635C(v3, a1);
}

uint64_t type metadata accessor for CrashReportError.UncaughtExceptionError()
{
  uint64_t result = qword_26A41ABC8;
  if (!qword_26A41ABC8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t CrashReportError.UncaughtExceptionError.highValueTitle.getter()
{
  sub_25A50FDB0();
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_25A50EDA0();
  return v1;
}

uint64_t CrashReportError.UncaughtExceptionError.additionalInfo.getter()
{
  return 0;
}

id sub_25A4B1ED4()
{
  id v0 = objc_allocWithZone(MEMORY[0x263F08AE8]);
  id result = sub_25A4B2F48(0xD000000000000045, 0x800000025A521A60, 0);
  qword_26A41ABC0 = (uint64_t)result;
  return result;
}

uint64_t static CrashReportError.UncaughtExceptionError.asiRegularExpression.getter()
{
  if (qword_26A415680 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v0 = qword_26A41ABC0;
  id v1 = (id)qword_26A41ABC0;
  return v0;
}

void static CrashReportError.UncaughtExceptionError.asiRegularExpression.setter(uint64_t a1)
{
  if (qword_26A415680 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v2 = (void *)qword_26A41ABC0;
  qword_26A41ABC0 = a1;
}

uint64_t (*static CrashReportError.UncaughtExceptionError.asiRegularExpression.modify())()
{
  if (qword_26A415680 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t CrashReportError.UncaughtExceptionError.init(report:asi:match:)@<X0>(uint64_t a1@<X0>, void *a2@<X3>, void *a3@<X8>)
{
  uint64_t v6 = (void *)sub_25A50EBF0();
  swift_bridgeObjectRelease();
  uint64_t v7 = (void *)(a1 + *(int *)(type metadata accessor for CrashReport(0) + 20));
  uint64_t v8 = v7[1];
  *a3 = *v7;
  a3[1] = v8;
  swift_bridgeObjectRetain();
  uint64_t v9 = (void *)sub_25A50EBF0();
  id v10 = objc_msgSend(a2, sel_rangeWithName_, v9);
  uint64_t v12 = v11;

  id v13 = objc_msgSend(v6, sel_substringWithRange_, v10, v12);
  sub_25A50EC20();

  a3[2] = sub_25A50EED0();
  a3[3] = v14;
  uint64_t v15 = (void *)sub_25A50EBF0();
  id v16 = objc_msgSend(a2, sel_rangeWithName_, v15);
  uint64_t v18 = v17;

  id v19 = objc_msgSend(v6, sel_substringWithRange_, v16, v18);
  sub_25A50EC20();

  uint64_t v20 = sub_25A50EED0();
  uint64_t v22 = v21;

  a3[4] = v20;
  a3[5] = v22;
  uint64_t v23 = type metadata accessor for CrashReportError.UncaughtExceptionError();
  sub_25A3F6C88(a1, (uint64_t)a3 + *(int *)(v23 + 28));
  return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(a3, 0, 1, v23);
}

uint64_t sub_25A4B2328@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25A3C635C(v2 + *(int *)(a1 + 28), a2);
}

uint64_t *_s22UncaughtExceptionErrorVwCP(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v30 = *a2;
    uint64_t *v3 = *a2;
    uint64_t v3 = (uint64_t *)(v30 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    uint64_t v7 = a2[5];
    uint64_t v8 = *(int *)(a3 + 28);
    uint64_t v9 = (char *)a2 + v8;
    id v10 = (char *)a1 + v8;
    a1[4] = a2[4];
    a1[5] = v7;
    uint64_t v11 = sub_25A50E4C0();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v10, v9, v11);
    id v13 = (int *)type metadata accessor for CrashReport(0);
    uint64_t v14 = v13[5];
    uint64_t v15 = &v10[v14];
    id v16 = &v9[v14];
    uint64_t v17 = *((void *)v16 + 1);
    *(void *)uint64_t v15 = *(void *)v16;
    *((void *)v15 + 1) = v17;
    uint64_t v18 = v13[6];
    id v19 = &v10[v18];
    uint64_t v20 = &v9[v18];
    uint64_t v21 = *((void *)v20 + 1);
    *(void *)id v19 = *(void *)v20;
    *((void *)v19 + 1) = v21;
    *(_DWORD *)&v10[v13[7]] = *(_DWORD *)&v9[v13[7]];
    uint64_t v22 = v13[8];
    id v32 = &v10[v22];
    uint64_t v23 = &v9[v22];
    uint64_t v24 = sub_25A50E470();
    long long v25 = *(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v25(v32, v23, v24);
    *(void *)&v10[v13[9]] = *(void *)&v9[v13[9]];
    *(void *)&v10[v13[10]] = *(void *)&v9[v13[10]];
    *(void *)&v10[v13[11]] = *(void *)&v9[v13[11]];
    uint64_t v26 = v13[12];
    uint64_t v27 = &v10[v26];
    unint64_t v28 = &v9[v26];
    uint64_t v29 = *((void *)v28 + 1);
    *(void *)uint64_t v27 = *(void *)v28;
    *((void *)v27 + 1) = v29;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v3;
}

uint64_t _s22UncaughtExceptionErrorVwxx(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = sub_25A50E4C0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = type metadata accessor for CrashReport(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = v4 + *(int *)(v6 + 32);
  uint64_t v8 = sub_25A50E470();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s22UncaughtExceptionErrorVwcp(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = a2[5];
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = (char *)a2 + v7;
  uint64_t v9 = (char *)a1 + v7;
  a1[4] = a2[4];
  a1[5] = v6;
  uint64_t v10 = sub_25A50E4C0();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v9, v8, v10);
  uint64_t v12 = (int *)type metadata accessor for CrashReport(0);
  uint64_t v13 = v12[5];
  uint64_t v14 = &v9[v13];
  uint64_t v15 = &v8[v13];
  uint64_t v16 = *((void *)v15 + 1);
  *(void *)uint64_t v14 = *(void *)v15;
  *((void *)v14 + 1) = v16;
  uint64_t v17 = v12[6];
  uint64_t v18 = &v9[v17];
  id v19 = &v8[v17];
  uint64_t v20 = *((void *)v19 + 1);
  *(void *)uint64_t v18 = *(void *)v19;
  *((void *)v18 + 1) = v20;
  *(_DWORD *)&v9[v12[7]] = *(_DWORD *)&v8[v12[7]];
  uint64_t v21 = v12[8];
  uint64_t v30 = &v9[v21];
  uint64_t v22 = &v8[v21];
  uint64_t v23 = sub_25A50E470();
  uint64_t v24 = *(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v24(v30, v22, v23);
  *(void *)&v9[v12[9]] = *(void *)&v8[v12[9]];
  *(void *)&v9[v12[10]] = *(void *)&v8[v12[10]];
  *(void *)&v9[v12[11]] = *(void *)&v8[v12[11]];
  uint64_t v25 = v12[12];
  uint64_t v26 = &v9[v25];
  uint64_t v27 = &v8[v25];
  uint64_t v28 = *((void *)v27 + 1);
  *(void *)uint64_t v26 = *(void *)v27;
  *((void *)v26 + 1) = v28;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *_s22UncaughtExceptionErrorVwca(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_25A50E4C0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = (int *)type metadata accessor for CrashReport(0);
  uint64_t v11 = v10[5];
  uint64_t v12 = &v7[v11];
  uint64_t v13 = &v8[v11];
  *(void *)uint64_t v12 = *(void *)v13;
  *((void *)v12 + 1) = *((void *)v13 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = v10[6];
  uint64_t v15 = &v7[v14];
  uint64_t v16 = &v8[v14];
  *(void *)uint64_t v15 = *(void *)v16;
  *((void *)v15 + 1) = *((void *)v16 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)&v7[v10[7]] = *(_DWORD *)&v8[v10[7]];
  uint64_t v17 = v10[8];
  uint64_t v18 = &v7[v17];
  id v19 = &v8[v17];
  uint64_t v20 = sub_25A50E470();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 24))(v18, v19, v20);
  *(void *)&v7[v10[9]] = *(void *)&v8[v10[9]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v7[v10[10]] = *(void *)&v8[v10[10]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v7[v10[11]] = *(void *)&v8[v10[11]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v21 = v10[12];
  uint64_t v22 = &v7[v21];
  uint64_t v23 = &v8[v21];
  *(void *)uint64_t v22 = *(void *)v23;
  *((void *)v22 + 1) = *((void *)v23 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *_s22UncaughtExceptionErrorVwtk(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = sub_25A50E4C0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  uint64_t v9 = (int *)type metadata accessor for CrashReport(0);
  *(_OWORD *)&v6[v9[5]] = *(_OWORD *)&v7[v9[5]];
  *(_OWORD *)&v6[v9[6]] = *(_OWORD *)&v7[v9[6]];
  *(_DWORD *)&v6[v9[7]] = *(_DWORD *)&v7[v9[7]];
  uint64_t v10 = v9[8];
  uint64_t v11 = &v6[v10];
  uint64_t v12 = &v7[v10];
  uint64_t v13 = sub_25A50E470();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  *(void *)&v6[v9[9]] = *(void *)&v7[v9[9]];
  *(void *)&v6[v9[10]] = *(void *)&v7[v9[10]];
  *(void *)&v6[v9[11]] = *(void *)&v7[v9[11]];
  *(_OWORD *)&v6[v9[12]] = *(_OWORD *)&v7[v9[12]];
  return a1;
}

void *_s22UncaughtExceptionErrorVwta(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(int *)(a3 + 28);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = sub_25A50E4C0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  uint64_t v13 = (int *)type metadata accessor for CrashReport(0);
  uint64_t v14 = v13[5];
  uint64_t v15 = &v10[v14];
  uint64_t v16 = &v11[v14];
  uint64_t v18 = *(void *)v16;
  uint64_t v17 = *((void *)v16 + 1);
  *(void *)uint64_t v15 = v18;
  *((void *)v15 + 1) = v17;
  swift_bridgeObjectRelease();
  uint64_t v19 = v13[6];
  uint64_t v20 = &v10[v19];
  uint64_t v21 = &v11[v19];
  uint64_t v23 = *(void *)v21;
  uint64_t v22 = *((void *)v21 + 1);
  *(void *)uint64_t v20 = v23;
  *((void *)v20 + 1) = v22;
  swift_bridgeObjectRelease();
  *(_DWORD *)&v10[v13[7]] = *(_DWORD *)&v11[v13[7]];
  uint64_t v24 = v13[8];
  uint64_t v25 = &v10[v24];
  uint64_t v26 = &v11[v24];
  uint64_t v27 = sub_25A50E470();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 40))(v25, v26, v27);
  *(void *)&v10[v13[9]] = *(void *)&v11[v13[9]];
  swift_bridgeObjectRelease();
  *(void *)&v10[v13[10]] = *(void *)&v11[v13[10]];
  swift_bridgeObjectRelease();
  *(void *)&v10[v13[11]] = *(void *)&v11[v13[11]];
  swift_bridgeObjectRelease();
  uint64_t v28 = v13[12];
  uint64_t v29 = &v10[v28];
  uint64_t v30 = &v11[v28];
  uint64_t v32 = *(void *)v30;
  uint64_t v31 = *((void *)v30 + 1);
  *(void *)uint64_t v29 = v32;
  *((void *)v29 + 1) = v31;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s22UncaughtExceptionErrorVwet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25A4B2D40);
}

uint64_t sub_25A4B2D40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for CrashReport(0);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t _s22UncaughtExceptionErrorVwst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25A4B2E04);
}

uint64_t sub_25A4B2E04(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for CrashReport(0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_25A4B2EAC()
{
  uint64_t result = type metadata accessor for CrashReport(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

id sub_25A4B2F48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v10[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v5 = (void *)sub_25A50EBF0();
  swift_bridgeObjectRelease();
  v10[0] = 0;
  id v6 = objc_msgSend(v3, sel_initWithPattern_options_error_, v5, a3, v10);

  if (v6)
  {
    id v7 = v10[0];
  }
  else
  {
    id v8 = v10[0];
    sub_25A50E240();

    swift_willThrow();
  }
  return v6;
}

uint64_t FutureState.map<A>(_:)@<X0>(void (*a1)(void *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v12 = type metadata accessor for FutureTermination();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v23 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v18, v6, a3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v18, 1, v12) == 1)
  {
    uint64_t v20 = type metadata accessor for FutureTermination();
    return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(a5, 1, 1, v20);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v18, v12);
    FutureTermination.map<A>(_:)(a1, a2, v12, a4, a5);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    uint64_t v22 = type metadata accessor for FutureTermination();
    return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(a5, 0, 1, v22);
  }
}

uint64_t FutureState.mapSuccess<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  void v6[2] = *(void *)(a3 + 16);
  void v6[3] = a4;
  v6[4] = a1;
  void v6[5] = a2;
  return FutureState.map<A>(_:)((void (*)(void *))sub_25A4B333C, (uint64_t)v6, a3, a4, a5);
}

uint64_t sub_25A4B32B8@<X0>(void (*a1)(char *)@<X1>, uint64_t a2@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
  uint64_t v4 = sub_25A510540();
  return sub_25A4B7DC0(a1, v4, a2);
}

uint64_t sub_25A4B333C@<X0>(uint64_t a1@<X8>)
{
  return sub_25A4B32B8(*(void (**)(char *))(v1 + 32), a1);
}

uint64_t FutureState.succeededValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = type metadata accessor for FutureTermination();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v16 - v10;
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v13, v3, a1);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v13, 1, v7) == 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(a2, 1, 1, v6);
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v13, v7);
  FutureTermination.succeededValue.getter(v7, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t FutureState.failedError.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for FutureTermination();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v14 - v7;
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v10, v2, a1);
  uint64_t v12 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v10, v4);
    uint64_t v12 = FutureTermination.failedError.getter(v4);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  return v12;
}

uint64_t FutureState.completedResult.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = type metadata accessor for FutureTermination();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v15 - v8;
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v11, v2, a1);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5) == 1)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A415838);
    uint64_t v13 = sub_25A510540();
    return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a2, 1, 1, v13);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v11, v5);
    FutureTermination.completedResult.getter(v5, a2);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
}

uint64_t FutureState.description.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for FutureTermination();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v14 - v7;
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v10, v2, a1);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1) {
    return 0x676E696E6E7572;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v10, v4);
  uint64_t v12 = FutureTermination.description.getter(v4);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return v12;
}

BOOL FutureState.isRunning.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  uint64_t v5 = type metadata accessor for FutureTermination();
  int v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5);
  if (v6 != 1) {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  }
  return v6 == 1;
}

BOOL FutureState.isCanceled.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for FutureTermination();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v14 - v7;
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v10, v2, a1);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v10, v4);
    BOOL v12 = FutureTermination.isCanceled.getter(v4);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  return v12;
}

uint64_t sub_25A4B3DA0()
{
  uint64_t result = type metadata accessor for FutureTermination();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

char *sub_25A4B3E1C(char *__dst, _OWORD *a2, uint64_t a3)
{
  uint64_t v3 = __dst;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(v4 + 64) <= 0x39uLL) {
    uint64_t v5 = 57;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  int v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    uint64_t v8 = *(char **)a2;
    *(void *)uint64_t v3 = *(void *)a2;
    uint64_t v3 = &v8[(unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8];
    swift_retain();
  }
  else
  {
    unsigned int v9 = *((unsigned __int8 *)a2 + v5);
    if (v9 > 2)
    {
      memcpy(__dst, a2, v5 + 1);
    }
    else if (v9 == 2)
    {
      long long v12 = a2[1];
      *(_OWORD *)__dst = *a2;
      *((_OWORD *)__dst + 1) = v12;
      *((_OWORD *)__dst + 2) = a2[2];
      *(_OWORD *)(__dst + 41) = *(_OWORD *)((char *)a2 + 41);
      __dst[v5] = 2;
    }
    else if (v9 == 1)
    {
      uint64_t v10 = *(void *)a2;
      id v11 = *(id *)a2;
      *(void *)uint64_t v3 = v10;
      v3[v5] = 1;
    }
    else
    {
      (*(void (**)(char *))(v4 + 16))(__dst);
      v3[v5] = 0;
    }
  }
  return v3;
}